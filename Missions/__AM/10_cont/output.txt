// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 115 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// PrepareArabian ;
  33: CALL 3401 0 0
// PrepareAmerican ;
  37: CALL 1011 0 0
// PrepareRussian ;
  41: CALL 8706 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  45: LD_INT 4
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 4
  53: PUSH
  54: LD_INT 5
  56: PUSH
  57: LD_INT 5
  59: PUSH
  60: LD_INT 5
  62: PUSH
  63: EMPTY
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: PUSH
  69: LD_OWVAR 67
  73: ARRAY
  74: PPUSH
  75: LD_INT 2
  77: PPUSH
  78: LD_INT 1
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 2
  86: PPUSH
  87: LD_INT 1
  89: PPUSH
  90: LD_INT 2
  92: PPUSH
  93: CALL 88981 0 9
// Action ;
  97: CALL 25319 0 0
// if debug then
 101: LD_EXP 1
 105: IFFALSE 114
// FogOff ( 1 ) ;
 107: LD_INT 1
 109: PPUSH
 110: CALL_OW 344
// end ;
 114: END
// export debug , mission_prefix , arBaseActive , arabianAttack , khatamStatus , seenRussianTeleport , joinedToEpsilon , arabianDefeated , hasBase , epsilon , escapeKhatam , arabianAttackSpawned , gensherEscaped , ruScriptActive , ruScriptActive2 , firstAttack , dialogRussianSpaceAmmo , russianWaveAttack , spawnedRussians , hasSniper , arabianEscapedCounter , ruActiveAttacks ; function Init ; begin
 115: LD_INT 0
 117: PPUSH
// debug := false ;
 118: LD_ADDR_EXP 1
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// mission_prefix := 08c_ ;
 126: LD_ADDR_EXP 2
 130: PUSH
 131: LD_STRING 08c_
 133: ST_TO_ADDR
// arBaseActive := true ;
 134: LD_ADDR_EXP 3
 138: PUSH
 139: LD_INT 1
 141: ST_TO_ADDR
// arabianAttack := false ;
 142: LD_ADDR_EXP 4
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// khatamStatus := false ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// seenRussianTeleport := false ;
 158: LD_ADDR_EXP 6
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// joinedToEpsilon := false ;
 166: LD_ADDR_EXP 7
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// arabianDefeated := false ;
 174: LD_ADDR_EXP 8
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// arabianAttackSpawned := false ;
 182: LD_ADDR_EXP 12
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// gensherEscaped := false ;
 190: LD_ADDR_EXP 13
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// hasBase := false ;
 198: LD_ADDR_EXP 9
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// epsilon := 0 ;
 206: LD_ADDR_EXP 10
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// escapeKhatam := false ;
 214: LD_ADDR_EXP 11
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// ruScriptActive := false ;
 222: LD_ADDR_EXP 14
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// ruScriptActive2 := false ;
 230: LD_ADDR_EXP 15
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// firstAttack := false ;
 238: LD_ADDR_EXP 16
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// dialogRussianSpaceAmmo := false ;
 246: LD_ADDR_EXP 17
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// russianWaveAttack := 0 ;
 254: LD_ADDR_EXP 18
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// spawnedRussians := false ;
 262: LD_ADDR_EXP 19
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// hasSniper := false ;
 270: LD_ADDR_EXP 20
 274: PUSH
 275: LD_INT 0
 277: ST_TO_ADDR
// arabianEscapedCounter := 0 ;
 278: LD_ADDR_EXP 21
 282: PUSH
 283: LD_INT 0
 285: ST_TO_ADDR
// ruActiveAttacks := false ;
 286: LD_ADDR_EXP 22
 290: PUSH
 291: LD_INT 0
 293: ST_TO_ADDR
// ruTransportDestroyed := false ;
 294: LD_ADDR_EXP 78
 298: PUSH
 299: LD_INT 0
 301: ST_TO_ADDR
// end ;
 302: LD_VAR 0 1
 306: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) do
 307: LD_INT 22
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 25
 319: PUSH
 320: LD_INT 5
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PPUSH
 331: CALL_OW 69
 335: IFFALSE 348
 337: GO 339
 339: DISABLE
// hasSniper := true ;
 340: LD_ADDR_EXP 20
 344: PUSH
 345: LD_INT 1
 347: ST_TO_ADDR
 348: END
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and not arabianAttack and spawnedRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 349: LD_INT 1
 351: PPUSH
 352: LD_INT 2
 354: PPUSH
 355: CALL_OW 81
 359: PUSH
 360: LD_INT 1
 362: EQUAL
 363: PUSH
 364: LD_EXP 4
 368: NOT
 369: AND
 370: PUSH
 371: LD_EXP 19
 375: AND
 376: PUSH
 377: LD_INT 22
 379: PUSH
 380: LD_INT 3
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PPUSH
 387: CALL_OW 69
 391: PUSH
 392: LD_INT 0
 394: EQUAL
 395: AND
 396: IFFALSE 408
 398: GO 400
 400: DISABLE
// SetAchievement ( ACH_POWER ) ;
 401: LD_STRING ACH_POWER
 403: PPUSH
 404: CALL_OW 543
 408: END
// every 0 0$1 trigger spawnedRussians and not ruBase and not ruBase2 and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 409: LD_EXP 19
 413: PUSH
 414: LD_EXP 68
 418: NOT
 419: AND
 420: PUSH
 421: LD_EXP 69
 425: NOT
 426: AND
 427: PUSH
 428: LD_INT 22
 430: PUSH
 431: LD_INT 3
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PPUSH
 438: CALL_OW 69
 442: PUSH
 443: LD_INT 0
 445: EQUAL
 446: AND
 447: IFFALSE 459
 449: GO 451
 451: DISABLE
// SetAchievement ( ACH_TACT ) ;
 452: LD_STRING ACH_TACT
 454: PPUSH
 455: CALL_OW 543
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: LD_INT 22
 491: PUSH
 492: LD_INT 1
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 30
 501: PUSH
 502: LD_INT 32
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PPUSH
 513: CALL_OW 69
 517: AND
 518: PUSH
 519: LD_INT 22
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: LD_INT 30
 531: PUSH
 532: LD_INT 33
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PPUSH
 543: CALL_OW 69
 547: AND
 548: PUSH
 549: LD_INT 22
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 30
 561: PUSH
 562: LD_INT 5
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL_OW 69
 577: AND
 578: PUSH
 579: LD_INT 22
 581: PUSH
 582: LD_INT 1
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PUSH
 589: LD_INT 30
 591: PUSH
 592: LD_INT 3
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PPUSH
 603: CALL_OW 69
 607: AND
 608: PUSH
 609: LD_INT 22
 611: PUSH
 612: LD_INT 1
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: PUSH
 619: LD_INT 30
 621: PUSH
 622: LD_INT 36
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PPUSH
 633: CALL_OW 69
 637: AND
 638: PUSH
 639: LD_INT 22
 641: PUSH
 642: LD_INT 1
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 30
 651: PUSH
 652: LD_INT 31
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PPUSH
 663: CALL_OW 69
 667: AND
 668: PUSH
 669: LD_INT 22
 671: PUSH
 672: LD_INT 1
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: PUSH
 679: LD_INT 30
 681: PUSH
 682: LD_INT 22
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PUSH
 689: EMPTY
 690: LIST
 691: LIST
 692: PPUSH
 693: CALL_OW 69
 697: AND
 698: PUSH
 699: LD_INT 22
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: PUSH
 709: LD_INT 30
 711: PUSH
 712: LD_INT 20
 714: PUSH
 715: EMPTY
 716: LIST
 717: LIST
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: PPUSH
 723: CALL_OW 69
 727: AND
 728: PUSH
 729: LD_INT 22
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: PUSH
 739: LD_INT 30
 741: PUSH
 742: LD_INT 19
 744: PUSH
 745: EMPTY
 746: LIST
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: PPUSH
 753: CALL_OW 69
 757: AND
 758: PUSH
 759: LD_INT 22
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: PUSH
 769: LD_INT 30
 771: PUSH
 772: LD_INT 16
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PPUSH
 783: CALL_OW 69
 787: AND
 788: PUSH
 789: LD_INT 22
 791: PUSH
 792: LD_INT 1
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 30
 801: PUSH
 802: LD_INT 17
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: PPUSH
 813: CALL_OW 69
 817: AND
 818: PUSH
 819: LD_INT 22
 821: PUSH
 822: LD_INT 1
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: LD_INT 30
 831: PUSH
 832: LD_INT 21
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PPUSH
 843: CALL_OW 69
 847: AND
 848: PUSH
 849: LD_INT 22
 851: PUSH
 852: LD_INT 1
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: PUSH
 859: LD_INT 30
 861: PUSH
 862: LD_INT 29
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: PPUSH
 873: CALL_OW 69
 877: AND
 878: PUSH
 879: LD_INT 22
 881: PUSH
 882: LD_INT 1
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: PUSH
 889: LD_INT 30
 891: PUSH
 892: LD_INT 30
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: PPUSH
 903: CALL_OW 69
 907: AND
 908: PUSH
 909: LD_INT 22
 911: PUSH
 912: LD_INT 1
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: PUSH
 919: LD_INT 30
 921: PUSH
 922: LD_INT 27
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: PPUSH
 933: CALL_OW 69
 937: AND
 938: PUSH
 939: LD_INT 22
 941: PUSH
 942: LD_INT 1
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: LD_INT 30
 951: PUSH
 952: LD_INT 26
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PPUSH
 963: CALL_OW 69
 967: AND
 968: PUSH
 969: LD_INT 22
 971: PUSH
 972: LD_INT 1
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PUSH
 979: LD_INT 30
 981: PUSH
 982: LD_INT 28
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: PPUSH
 993: CALL_OW 69
 997: AND
 998: IFFALSE 1010
1000: GO 1002
1002: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1003: LD_STRING ACH_ARCH
1005: PPUSH
1006: CALL_OW 543
1010: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Mike ; export Cornell , Truman , Powell ; export JMMSquad , others , others09 , ape09 ; export function PrepareAmerican ; var i , j , veh , vehs , sibRes , tmp , amount ; begin
1011: LD_INT 0
1013: PPUSH
1014: PPUSH
1015: PPUSH
1016: PPUSH
1017: PPUSH
1018: PPUSH
1019: PPUSH
1020: PPUSH
// uc_nation := nation_american ;
1021: LD_ADDR_OWVAR 21
1025: PUSH
1026: LD_INT 1
1028: ST_TO_ADDR
// uc_side := 4 ;
1029: LD_ADDR_OWVAR 20
1033: PUSH
1034: LD_INT 4
1036: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1037: LD_ADDR_EXP 44
1041: PUSH
1042: LD_STRING Powell
1044: PPUSH
1045: LD_INT 0
1047: PPUSH
1048: LD_STRING 
1050: PPUSH
1051: CALL 54613 0 3
1055: ST_TO_ADDR
// uc_side := 1 ;
1056: LD_ADDR_OWVAR 20
1060: PUSH
1061: LD_INT 1
1063: ST_TO_ADDR
// JMMSquad := [ ] ;
1064: LD_ADDR_EXP 45
1068: PUSH
1069: EMPTY
1070: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 10_ ) ;
1071: LD_ADDR_EXP 23
1075: PUSH
1076: LD_STRING JMM
1078: PPUSH
1079: LD_EXP 1
1083: NOT
1084: PPUSH
1085: LD_STRING 10_
1087: PPUSH
1088: CALL 54613 0 3
1092: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 10_ ) ;
1093: LD_ADDR_EXP 32
1097: PUSH
1098: LD_STRING Gary
1100: PPUSH
1101: LD_EXP 1
1105: NOT
1106: PPUSH
1107: LD_STRING 10_
1109: PPUSH
1110: CALL 54613 0 3
1114: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 10_ ) ;
1115: LD_ADDR_EXP 27
1119: PUSH
1120: LD_STRING Cyrus
1122: PPUSH
1123: LD_EXP 1
1127: NOT
1128: PPUSH
1129: LD_STRING 10_
1131: PPUSH
1132: CALL 54613 0 3
1136: ST_TO_ADDR
// if Cyrus then
1137: LD_EXP 27
1141: IFFALSE 1159
// JMMSquad := JMMSquad ^ Cyrus ;
1143: LD_ADDR_EXP 45
1147: PUSH
1148: LD_EXP 45
1152: PUSH
1153: LD_EXP 27
1157: ADD
1158: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 10_ ) ;
1159: LD_ADDR_EXP 26
1163: PUSH
1164: LD_STRING Bobby
1166: PPUSH
1167: LD_EXP 1
1171: NOT
1172: PPUSH
1173: LD_STRING 10_
1175: PPUSH
1176: CALL 54613 0 3
1180: ST_TO_ADDR
// if Bobby then
1181: LD_EXP 26
1185: IFFALSE 1203
// JMMSquad := JMMSquad ^ Bobby ;
1187: LD_ADDR_EXP 45
1191: PUSH
1192: LD_EXP 45
1196: PUSH
1197: LD_EXP 26
1201: ADD
1202: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 10_ ) ;
1203: LD_ADDR_EXP 28
1207: PUSH
1208: LD_STRING Lisa
1210: PPUSH
1211: LD_EXP 1
1215: NOT
1216: PPUSH
1217: LD_STRING 10_
1219: PPUSH
1220: CALL 54613 0 3
1224: ST_TO_ADDR
// if Lisa then
1225: LD_EXP 28
1229: IFFALSE 1247
// JMMSquad := JMMSquad ^ Lisa ;
1231: LD_ADDR_EXP 45
1235: PUSH
1236: LD_EXP 45
1240: PUSH
1241: LD_EXP 28
1245: ADD
1246: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 10_ ) ;
1247: LD_ADDR_EXP 24
1251: PUSH
1252: LD_STRING Brown
1254: PPUSH
1255: LD_EXP 1
1259: NOT
1260: PPUSH
1261: LD_STRING 10_
1263: PPUSH
1264: CALL 54613 0 3
1268: ST_TO_ADDR
// if Brown then
1269: LD_EXP 24
1273: IFFALSE 1291
// JMMSquad := JMMSquad ^ Brown ;
1275: LD_ADDR_EXP 45
1279: PUSH
1280: LD_EXP 45
1284: PUSH
1285: LD_EXP 24
1289: ADD
1290: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 10_ ) ;
1291: LD_ADDR_EXP 25
1295: PUSH
1296: LD_STRING Donaldson
1298: PPUSH
1299: LD_EXP 1
1303: NOT
1304: PPUSH
1305: LD_STRING 10_
1307: PPUSH
1308: CALL 54613 0 3
1312: ST_TO_ADDR
// if Donaldson then
1313: LD_EXP 25
1317: IFFALSE 1335
// JMMSquad := JMMSquad ^ Donaldson ;
1319: LD_ADDR_EXP 45
1323: PUSH
1324: LD_EXP 45
1328: PUSH
1329: LD_EXP 25
1333: ADD
1334: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 10_ ) ;
1335: LD_ADDR_EXP 29
1339: PUSH
1340: LD_STRING Frank
1342: PPUSH
1343: LD_EXP 1
1347: NOT
1348: PPUSH
1349: LD_STRING 10_
1351: PPUSH
1352: CALL 54613 0 3
1356: ST_TO_ADDR
// if Frank then
1357: LD_EXP 29
1361: IFFALSE 1379
// JMMSquad := JMMSquad ^ Frank ;
1363: LD_ADDR_EXP 45
1367: PUSH
1368: LD_EXP 45
1372: PUSH
1373: LD_EXP 29
1377: ADD
1378: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 10_ ) ;
1379: LD_ADDR_EXP 31
1383: PUSH
1384: LD_STRING Houten
1386: PPUSH
1387: LD_EXP 1
1391: NOT
1392: PPUSH
1393: LD_STRING 10_
1395: PPUSH
1396: CALL 54613 0 3
1400: ST_TO_ADDR
// if Houten then
1401: LD_EXP 31
1405: IFFALSE 1423
// JMMSquad := JMMSquad ^ Houten ;
1407: LD_ADDR_EXP 45
1411: PUSH
1412: LD_EXP 45
1416: PUSH
1417: LD_EXP 31
1421: ADD
1422: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn10 ) ;
1423: LD_ADDR_EXP 46
1427: PUSH
1428: LD_STRING OthersIn10
1430: PPUSH
1431: CALL_OW 31
1435: ST_TO_ADDR
// if Count ( JMMSquad ) + Count ( others ) < 9 then
1436: LD_EXP 45
1440: PPUSH
1441: CALL 56715 0 1
1445: PUSH
1446: LD_EXP 46
1450: PPUSH
1451: CALL 56715 0 1
1455: PLUS
1456: PUSH
1457: LD_INT 9
1459: LESS
1460: IFFALSE 1547
// begin InitHC_All ( ) ;
1462: CALL_OW 584
// for i := 9 downto Count ( JMMSquad ) + Count ( others ) do
1466: LD_ADDR_VAR 0 2
1470: PUSH
1471: DOUBLE
1472: LD_INT 9
1474: INC
1475: ST_TO_ADDR
1476: LD_EXP 45
1480: PPUSH
1481: CALL 56715 0 1
1485: PUSH
1486: LD_EXP 46
1490: PPUSH
1491: CALL 56715 0 1
1495: PLUS
1496: PUSH
1497: FOR_DOWNTO
1498: IFFALSE 1545
// begin PrepareHuman ( false , i mod 4 + 1 , 5 ) ;
1500: LD_INT 0
1502: PPUSH
1503: LD_VAR 0 2
1507: PUSH
1508: LD_INT 4
1510: MOD
1511: PUSH
1512: LD_INT 1
1514: PLUS
1515: PPUSH
1516: LD_INT 5
1518: PPUSH
1519: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1523: LD_ADDR_EXP 46
1527: PUSH
1528: LD_EXP 46
1532: PPUSH
1533: CALL_OW 44
1537: PPUSH
1538: CALL 92304 0 2
1542: ST_TO_ADDR
// end ;
1543: GO 1497
1545: POP
1546: POP
// end ; if debug then
1547: LD_EXP 1
1551: IFFALSE 1592
// result := [ Cyrus , Bobby , Lisa , Donaldson , Brown ] else
1553: LD_ADDR_VAR 0 1
1557: PUSH
1558: LD_EXP 27
1562: PUSH
1563: LD_EXP 26
1567: PUSH
1568: LD_EXP 28
1572: PUSH
1573: LD_EXP 25
1577: PUSH
1578: LD_EXP 24
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: ST_TO_ADDR
1590: GO 1755
// result := CharacterSelection ( 1 , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ sel_not_changeable , sel_hired , sel_change_class ] ^ JMM ^ Gary ^ [ sel_not_hired , sel_changeable , sel_change_class ] ^ JMMSquad ^ others ^ [ sel_not_changeable , sel_not_hired ] ^ Powell , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , class_scientistic ] ) ;
1592: LD_ADDR_VAR 0 1
1596: PUSH
1597: LD_STRING 1
1599: PPUSH
1600: LD_INT 6
1602: PUSH
1603: LD_INT 5
1605: PUSH
1606: LD_INT 4
1608: PUSH
1609: LD_INT 4
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: PUSH
1618: LD_OWVAR 67
1622: ARRAY
1623: PPUSH
1624: LD_INT 6
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: LD_INT 4
1632: PUSH
1633: LD_INT 4
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: LD_OWVAR 67
1646: ARRAY
1647: PPUSH
1648: LD_INT -4
1650: PUSH
1651: LD_INT -1
1653: PUSH
1654: LD_INT -5
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: PUSH
1662: LD_EXP 23
1666: ADD
1667: PUSH
1668: LD_EXP 32
1672: ADD
1673: PUSH
1674: LD_INT -2
1676: PUSH
1677: LD_INT -3
1679: PUSH
1680: LD_INT -5
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: LIST
1687: ADD
1688: PUSH
1689: LD_EXP 45
1693: ADD
1694: PUSH
1695: LD_EXP 46
1699: ADD
1700: PUSH
1701: LD_INT -4
1703: PUSH
1704: LD_INT -2
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: ADD
1711: PUSH
1712: LD_EXP 44
1716: ADD
1717: PPUSH
1718: LD_INT 1
1720: PUSH
1721: LD_INT 3
1723: PUSH
1724: LD_INT 1
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: PUSH
1731: LD_INT 2
1733: PUSH
1734: LD_INT 1
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: PUSH
1741: LD_INT 4
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: PPUSH
1750: CALL_OW 42
1754: ST_TO_ADDR
// result := JoinUnion ( result , JMM ) ;
1755: LD_ADDR_VAR 0 1
1759: PUSH
1760: LD_VAR 0 1
1764: PPUSH
1765: LD_EXP 23
1769: PPUSH
1770: CALL 92341 0 2
1774: ST_TO_ADDR
// if Gary then
1775: LD_EXP 32
1779: IFFALSE 1801
// result := JoinUnion ( result , Gary ) ;
1781: LD_ADDR_VAR 0 1
1785: PUSH
1786: LD_VAR 0 1
1790: PPUSH
1791: LD_EXP 32
1795: PPUSH
1796: CALL 92341 0 2
1800: ST_TO_ADDR
// if Count ( others ) then
1801: LD_EXP 46
1805: PPUSH
1806: CALL 56715 0 1
1810: IFFALSE 1828
// others := others diff result ;
1812: LD_ADDR_EXP 46
1816: PUSH
1817: LD_EXP 46
1821: PUSH
1822: LD_VAR 0 1
1826: DIFF
1827: ST_TO_ADDR
// vehs := [ ] ;
1828: LD_ADDR_VAR 0 5
1832: PUSH
1833: EMPTY
1834: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1835: LD_INT 2
1837: PPUSH
1838: LD_INT 1
1840: PPUSH
1841: LD_INT 1
1843: PPUSH
1844: LD_INT 12
1846: PPUSH
1847: LD_INT 50
1849: PPUSH
1850: CALL 59453 0 5
// veh := CreateVehicle ;
1854: LD_ADDR_VAR 0 4
1858: PUSH
1859: CALL_OW 45
1863: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1864: LD_ADDR_VAR 0 5
1868: PUSH
1869: LD_VAR 0 5
1873: PPUSH
1874: LD_VAR 0 4
1878: PPUSH
1879: CALL 92304 0 2
1883: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1884: LD_VAR 0 4
1888: PPUSH
1889: LD_INT 1
1891: PPUSH
1892: CALL_OW 233
// sibRes := LoadVariable ( 09_sibRes , 100 ) - 20 ;
1896: LD_ADDR_VAR 0 6
1900: PUSH
1901: LD_STRING 09_sibRes
1903: PPUSH
1904: LD_INT 100
1906: PPUSH
1907: CALL_OW 30
1911: PUSH
1912: LD_INT 20
1914: MINUS
1915: ST_TO_ADDR
// if sibRes >= 100 then
1916: LD_VAR 0 6
1920: PUSH
1921: LD_INT 100
1923: GREATEREQUAL
1924: IFFALSE 1943
// SetCargo ( veh , mat_siberit , 100 ) else
1926: LD_VAR 0 4
1930: PPUSH
1931: LD_INT 3
1933: PPUSH
1934: LD_INT 100
1936: PPUSH
1937: CALL_OW 290
1941: GO 1960
// SetCargo ( veh , mat_siberit , sibRes ) ;
1943: LD_VAR 0 4
1947: PPUSH
1948: LD_INT 3
1950: PPUSH
1951: LD_VAR 0 6
1955: PPUSH
1956: CALL_OW 290
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1960: LD_INT 2
1962: PPUSH
1963: LD_INT 1
1965: PPUSH
1966: LD_INT 1
1968: PPUSH
1969: LD_INT 12
1971: PPUSH
1972: LD_INT 50
1974: PPUSH
1975: CALL 59453 0 5
// veh := CreateVehicle ;
1979: LD_ADDR_VAR 0 4
1983: PUSH
1984: CALL_OW 45
1988: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1989: LD_ADDR_VAR 0 5
1993: PUSH
1994: LD_VAR 0 5
1998: PPUSH
1999: LD_VAR 0 4
2003: PPUSH
2004: CALL 92304 0 2
2008: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2009: LD_VAR 0 4
2013: PPUSH
2014: LD_INT 1
2016: PPUSH
2017: CALL_OW 233
// SetCargo ( veh , mat_cans , 100 ) ;
2021: LD_VAR 0 4
2025: PPUSH
2026: LD_INT 1
2028: PPUSH
2029: LD_INT 100
2031: PPUSH
2032: CALL_OW 290
// for i := 1 to Count ( result ) - 2 do
2036: LD_ADDR_VAR 0 2
2040: PUSH
2041: DOUBLE
2042: LD_INT 1
2044: DEC
2045: ST_TO_ADDR
2046: LD_VAR 0 1
2050: PPUSH
2051: CALL 56715 0 1
2055: PUSH
2056: LD_INT 2
2058: MINUS
2059: PUSH
2060: FOR_TO
2061: IFFALSE 2167
// begin PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , [ us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun ] [ i mod 5 + 1 ] , rand ( 45 , 55 ) ) ;
2063: LD_INT 2
2065: PPUSH
2066: LD_INT 1
2068: PPUSH
2069: LD_INT 1
2071: PPUSH
2072: LD_INT 3
2074: PUSH
2075: LD_INT 4
2077: PUSH
2078: LD_INT 5
2080: PUSH
2081: LD_INT 11
2083: PUSH
2084: LD_INT 3
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: PUSH
2094: LD_VAR 0 2
2098: PUSH
2099: LD_INT 5
2101: MOD
2102: PUSH
2103: LD_INT 1
2105: PLUS
2106: ARRAY
2107: PPUSH
2108: LD_INT 45
2110: PPUSH
2111: LD_INT 55
2113: PPUSH
2114: CALL_OW 12
2118: PPUSH
2119: CALL 59453 0 5
// veh := CreateVehicle ;
2123: LD_ADDR_VAR 0 4
2127: PUSH
2128: CALL_OW 45
2132: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
2133: LD_ADDR_VAR 0 5
2137: PUSH
2138: LD_VAR 0 5
2142: PPUSH
2143: LD_VAR 0 4
2147: PPUSH
2148: CALL 92304 0 2
2152: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 1
2160: PPUSH
2161: CALL_OW 233
// end ;
2165: GO 2060
2167: POP
2168: POP
// for i in vehs do
2169: LD_ADDR_VAR 0 2
2173: PUSH
2174: LD_VAR 0 5
2178: PUSH
2179: FOR_IN
2180: IFFALSE 2235
// begin PlaceUnitArea ( i , startArea , false ) ;
2182: LD_VAR 0 2
2186: PPUSH
2187: LD_INT 3
2189: PPUSH
2190: LD_INT 0
2192: PPUSH
2193: CALL_OW 49
// PlaceHumanInUnit ( result [ 1 ] , i ) ;
2197: LD_VAR 0 1
2201: PUSH
2202: LD_INT 1
2204: ARRAY
2205: PPUSH
2206: LD_VAR 0 2
2210: PPUSH
2211: CALL_OW 52
// result := Delete ( result , 1 ) ;
2215: LD_ADDR_VAR 0 1
2219: PUSH
2220: LD_VAR 0 1
2224: PPUSH
2225: LD_INT 1
2227: PPUSH
2228: CALL_OW 3
2232: ST_TO_ADDR
// end ;
2233: GO 2179
2235: POP
2236: POP
// uc_side := 4 ;
2237: LD_ADDR_OWVAR 20
2241: PUSH
2242: LD_INT 4
2244: ST_TO_ADDR
// if LoadVariable ( 08_SikorskiStatus , debug ) then
2245: LD_STRING 08_SikorskiStatus
2247: PPUSH
2248: LD_EXP 1
2252: PPUSH
2253: CALL_OW 30
2257: IFFALSE 2278
// Truman := PrepareUnit ( Truman , false ,  ) ;
2259: LD_ADDR_EXP 43
2263: PUSH
2264: LD_STRING Truman
2266: PPUSH
2267: LD_INT 0
2269: PPUSH
2270: LD_STRING 
2272: PPUSH
2273: CALL 54613 0 3
2277: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , false ,  ) ;
2278: LD_ADDR_EXP 33
2282: PUSH
2283: LD_STRING Simms
2285: PPUSH
2286: LD_INT 0
2288: PPUSH
2289: LD_STRING 
2291: PPUSH
2292: CALL 54613 0 3
2296: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 08_ ) ;
2297: LD_ADDR_EXP 34
2301: PUSH
2302: LD_STRING Denis
2304: PPUSH
2305: LD_EXP 1
2309: NOT
2310: PPUSH
2311: LD_STRING 08_
2313: PPUSH
2314: CALL 54613 0 3
2318: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 08_ ) ;
2319: LD_ADDR_EXP 35
2323: PUSH
2324: LD_STRING Joan
2326: PPUSH
2327: LD_EXP 1
2331: NOT
2332: PPUSH
2333: LD_STRING 08_
2335: PPUSH
2336: CALL 54613 0 3
2340: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 08_ ) ;
2341: LD_ADDR_EXP 41
2345: PUSH
2346: LD_STRING Mike
2348: PPUSH
2349: LD_EXP 1
2353: NOT
2354: PPUSH
2355: LD_STRING 08_
2357: PPUSH
2358: CALL 54613 0 3
2362: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2363: LD_STRING 08_Khatam
2365: PPUSH
2366: CALL_OW 28
2370: IFFALSE 2393
// Khatam := PrepareUnit ( Khatam , true , 08_ ) else
2372: LD_ADDR_EXP 36
2376: PUSH
2377: LD_STRING Khatam
2379: PPUSH
2380: LD_INT 1
2382: PPUSH
2383: LD_STRING 08_
2385: PPUSH
2386: CALL 54613 0 3
2390: ST_TO_ADDR
2391: GO 2421
// if TestCharacters ( 03_Khatam ) then
2393: LD_STRING 03_Khatam
2395: PPUSH
2396: CALL_OW 28
2400: IFFALSE 2421
// Khatam := PrepareUnit ( Khatam , true , 03_ ) ;
2402: LD_ADDR_EXP 36
2406: PUSH
2407: LD_STRING Khatam
2409: PPUSH
2410: LD_INT 1
2412: PPUSH
2413: LD_STRING 03_
2415: PPUSH
2416: CALL 54613 0 3
2420: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 08_ ) ;
2421: LD_ADDR_EXP 37
2425: PUSH
2426: LD_STRING Gladstone
2428: PPUSH
2429: LD_EXP 1
2433: NOT
2434: PPUSH
2435: LD_STRING 08_
2437: PPUSH
2438: CALL 54613 0 3
2442: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) ,  ) ;
2443: LD_ADDR_EXP 39
2447: PUSH
2448: LD_STRING DeltaDoctor
2450: PPUSH
2451: LD_EXP 1
2455: NOT
2456: PPUSH
2457: LD_STRING 
2459: PPUSH
2460: CALL 54613 0 3
2464: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 08_ ) ;
2465: LD_ADDR_EXP 29
2469: PUSH
2470: LD_STRING Frank
2472: PPUSH
2473: LD_EXP 1
2477: NOT
2478: PPUSH
2479: LD_STRING 08_
2481: PPUSH
2482: CALL 54613 0 3
2486: ST_TO_ADDR
// if Frank then
2487: LD_EXP 29
2491: IFFALSE 2514
// Kikuchi := PrepareUnit ( Yamoko , false ,  ) else
2493: LD_ADDR_EXP 30
2497: PUSH
2498: LD_STRING Yamoko
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: LD_STRING 
2506: PPUSH
2507: CALL 54613 0 3
2511: ST_TO_ADDR
2512: GO 2536
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 08_ ) ;
2514: LD_ADDR_EXP 30
2518: PUSH
2519: LD_STRING Kikuchi
2521: PPUSH
2522: LD_EXP 1
2526: NOT
2527: PPUSH
2528: LD_STRING 08_
2530: PPUSH
2531: CALL 54613 0 3
2535: ST_TO_ADDR
// others09 := CreateCharacterSet ( 09_others ) ;
2536: LD_ADDR_EXP 47
2540: PUSH
2541: LD_STRING 09_others
2543: PPUSH
2544: CALL_OW 31
2548: ST_TO_ADDR
// ape09 := CreateCharacterSet ( 09_apes ) ;
2549: LD_ADDR_EXP 48
2553: PUSH
2554: LD_STRING 09_apes
2556: PPUSH
2557: CALL_OW 31
2561: ST_TO_ADDR
// if Truman then
2562: LD_EXP 43
2566: IFFALSE 2583
// PlaceUnitArea ( Truman , epsilonSpawnArea , false ) ;
2568: LD_EXP 43
2572: PPUSH
2573: LD_INT 4
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 49
// if Mike then
2583: LD_EXP 41
2587: IFFALSE 2604
// PlaceUnitArea ( Mike , epsilonSpawnArea , false ) ;
2589: LD_EXP 41
2593: PPUSH
2594: LD_INT 4
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 49
// if Simms then
2604: LD_EXP 33
2608: IFFALSE 2625
// PlaceUnitArea ( Simms , epsilonSpawnArea , false ) ;
2610: LD_EXP 33
2614: PPUSH
2615: LD_INT 4
2617: PPUSH
2618: LD_INT 0
2620: PPUSH
2621: CALL_OW 49
// if Denis then
2625: LD_EXP 34
2629: IFFALSE 2646
// PlaceUnitArea ( Denis , epsilonSpawnArea , false ) ;
2631: LD_EXP 34
2635: PPUSH
2636: LD_INT 4
2638: PPUSH
2639: LD_INT 0
2641: PPUSH
2642: CALL_OW 49
// if Joan then
2646: LD_EXP 35
2650: IFFALSE 2667
// PlaceUnitArea ( Joan , epsilonSpawnArea , false ) ;
2652: LD_EXP 35
2656: PPUSH
2657: LD_INT 4
2659: PPUSH
2660: LD_INT 0
2662: PPUSH
2663: CALL_OW 49
// if Khatam then
2667: LD_EXP 36
2671: IFFALSE 2688
// PlaceUnitArea ( Khatam , epsilonSpawnArea , false ) ;
2673: LD_EXP 36
2677: PPUSH
2678: LD_INT 4
2680: PPUSH
2681: LD_INT 0
2683: PPUSH
2684: CALL_OW 49
// if Gladstone then
2688: LD_EXP 37
2692: IFFALSE 2709
// PlaceUnitArea ( Gladstone , epsilonSpawnArea , false ) ;
2694: LD_EXP 37
2698: PPUSH
2699: LD_INT 4
2701: PPUSH
2702: LD_INT 0
2704: PPUSH
2705: CALL_OW 49
// if DeltaDoctor then
2709: LD_EXP 39
2713: IFFALSE 2730
// PlaceUnitArea ( DeltaDoctor , epsilonSpawnArea , false ) ;
2715: LD_EXP 39
2719: PPUSH
2720: LD_INT 4
2722: PPUSH
2723: LD_INT 0
2725: PPUSH
2726: CALL_OW 49
// if Kikuchi then
2730: LD_EXP 30
2734: IFFALSE 2751
// PlaceUnitArea ( Kikuchi , epsilonSpawnArea , false ) ;
2736: LD_EXP 30
2740: PPUSH
2741: LD_INT 4
2743: PPUSH
2744: LD_INT 0
2746: PPUSH
2747: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , class_scientistic ) ;
2751: LD_EXP 33
2755: PUSH
2756: LD_EXP 36
2760: PUSH
2761: LD_EXP 34
2765: PUSH
2766: LD_EXP 37
2770: PUSH
2771: LD_EXP 39
2775: PUSH
2776: LD_EXP 35
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: LIST
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: CALL_OW 336
// amount := Count ( others09 ) ;
2796: LD_ADDR_VAR 0 8
2800: PUSH
2801: LD_EXP 47
2805: PPUSH
2806: CALL 56715 0 1
2810: ST_TO_ADDR
// if amount then
2811: LD_VAR 0 8
2815: IFFALSE 2963
// begin if amount > [ 6 , 5 , 4 , 4 ] [ Difficulty ] then
2817: LD_VAR 0 8
2821: PUSH
2822: LD_INT 6
2824: PUSH
2825: LD_INT 5
2827: PUSH
2828: LD_INT 4
2830: PUSH
2831: LD_INT 4
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_OWVAR 67
2844: ARRAY
2845: GREATER
2846: IFFALSE 2877
// amount := [ 6 , 5 , 4 , 4 ] [ Difficulty ] ;
2848: LD_ADDR_VAR 0 8
2852: PUSH
2853: LD_INT 6
2855: PUSH
2856: LD_INT 5
2858: PUSH
2859: LD_INT 4
2861: PUSH
2862: LD_INT 4
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: LIST
2869: LIST
2870: PUSH
2871: LD_OWVAR 67
2875: ARRAY
2876: ST_TO_ADDR
// for i := 1 to amount do
2877: LD_ADDR_VAR 0 2
2881: PUSH
2882: DOUBLE
2883: LD_INT 1
2885: DEC
2886: ST_TO_ADDR
2887: LD_VAR 0 8
2891: PUSH
2892: FOR_TO
2893: IFFALSE 2934
// begin PlaceUnitArea ( others09 [ 1 ] , epsilonSpawnArea , false ) ;
2895: LD_EXP 47
2899: PUSH
2900: LD_INT 1
2902: ARRAY
2903: PPUSH
2904: LD_INT 4
2906: PPUSH
2907: LD_INT 0
2909: PPUSH
2910: CALL_OW 49
// others09 := Delete ( others09 , 1 ) ;
2914: LD_ADDR_EXP 47
2918: PUSH
2919: LD_EXP 47
2923: PPUSH
2924: LD_INT 1
2926: PPUSH
2927: CALL_OW 3
2931: ST_TO_ADDR
// end ;
2932: GO 2892
2934: POP
2935: POP
// if Count ( others09 ) then
2936: LD_EXP 47
2940: PPUSH
2941: CALL 56715 0 1
2945: IFFALSE 2963
// others := others union others09 ;
2947: LD_ADDR_EXP 46
2951: PUSH
2952: LD_EXP 46
2956: PUSH
2957: LD_EXP 47
2961: UNION
2962: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) = 0 then
2963: LD_INT 22
2965: PUSH
2966: LD_INT 4
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PUSH
2973: LD_INT 50
2975: PUSH
2976: EMPTY
2977: LIST
2978: PUSH
2979: LD_INT 25
2981: PUSH
2982: LD_INT 2
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: PUSH
2989: EMPTY
2990: LIST
2991: LIST
2992: LIST
2993: PPUSH
2994: CALL_OW 69
2998: PUSH
2999: LD_INT 0
3001: EQUAL
3002: IFFALSE 3141
// begin tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3004: LD_ADDR_VAR 0 7
3008: PUSH
3009: LD_INT 22
3011: PUSH
3012: LD_INT 4
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: LD_INT 50
3021: PUSH
3022: EMPTY
3023: LIST
3024: PUSH
3025: LD_INT 25
3027: PUSH
3028: LD_INT 2
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: LIST
3039: PPUSH
3040: CALL_OW 69
3044: PUSH
3045: LD_EXP 33
3049: PUSH
3050: LD_EXP 36
3054: PUSH
3055: LD_EXP 34
3059: PUSH
3060: LD_EXP 37
3064: PUSH
3065: LD_EXP 39
3069: PUSH
3070: LD_EXP 35
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: LIST
3082: DIFF
3083: ST_TO_ADDR
// if not tmp then
3084: LD_VAR 0 7
3088: NOT
3089: IFFALSE 3125
// begin if Denis then
3091: LD_EXP 34
3095: IFFALSE 3111
// SetClass ( Denis , class_engineer ) else
3097: LD_EXP 34
3101: PPUSH
3102: LD_INT 2
3104: PPUSH
3105: CALL_OW 336
3109: GO 3123
// SetClass ( DeltaDoctor , class_engineer ) ;
3111: LD_EXP 39
3115: PPUSH
3116: LD_INT 2
3118: PPUSH
3119: CALL_OW 336
// end else
3123: GO 3141
// SetClass ( tmp [ 1 ] , class_engineer ) ;
3125: LD_VAR 0 7
3129: PUSH
3130: LD_INT 1
3132: ARRAY
3133: PPUSH
3134: LD_INT 2
3136: PPUSH
3137: CALL_OW 336
// end ; for i in ape09 do
3141: LD_ADDR_VAR 0 2
3145: PUSH
3146: LD_EXP 48
3150: PUSH
3151: FOR_IN
3152: IFFALSE 3171
// PlaceUnitArea ( i , epsilonSpawnArea , false ) ;
3154: LD_VAR 0 2
3158: PPUSH
3159: LD_INT 4
3161: PPUSH
3162: LD_INT 0
3164: PPUSH
3165: CALL_OW 49
3169: GO 3151
3171: POP
3172: POP
// PrepareSoldier ( sex_female , 6 ) ;
3173: LD_INT 2
3175: PPUSH
3176: LD_INT 6
3178: PPUSH
3179: CALL_OW 381
// AmScout := CreateHuman ;
3183: LD_ADDR_EXP 40
3187: PUSH
3188: CALL_OW 44
3192: ST_TO_ADDR
// end ;
3193: LD_VAR 0 1
3197: RET
// export function PrepareCornell ; begin
3198: LD_INT 0
3200: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3201: LD_INT 4
3203: PPUSH
3204: LD_INT 4
3206: PPUSH
3207: CALL_OW 343
// uc_side := 4 ;
3211: LD_ADDR_OWVAR 20
3215: PUSH
3216: LD_INT 4
3218: ST_TO_ADDR
// uc_nation := nation_american ;
3219: LD_ADDR_OWVAR 21
3223: PUSH
3224: LD_INT 1
3226: ST_TO_ADDR
// Cornell := PrepareUnit ( Cornel , ( not debug ) , 03_ ) ;
3227: LD_ADDR_EXP 42
3231: PUSH
3232: LD_STRING Cornel
3234: PPUSH
3235: LD_EXP 1
3239: NOT
3240: PPUSH
3241: LD_STRING 03_
3243: PPUSH
3244: CALL 54613 0 3
3248: ST_TO_ADDR
// if not Cornell then
3249: LD_EXP 42
3253: NOT
3254: IFFALSE 3258
// exit ;
3256: GO 3396
// PlaceUnitArea ( Cornell , cornelSpawnArea , false ) ;
3258: LD_EXP 42
3262: PPUSH
3263: LD_INT 12
3265: PPUSH
3266: LD_INT 0
3268: PPUSH
3269: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3273: LD_EXP 42
3277: PPUSH
3278: LD_INT 350
3280: PPUSH
3281: CALL_OW 234
// ComMoveXY ( Cornell , 125 , 17 ) ;
3285: LD_EXP 42
3289: PPUSH
3290: LD_INT 125
3292: PPUSH
3293: LD_INT 17
3295: PPUSH
3296: CALL_OW 111
// AddComMoveXY ( Cornell , 112 , 19 ) ;
3300: LD_EXP 42
3304: PPUSH
3305: LD_INT 112
3307: PPUSH
3308: LD_INT 19
3310: PPUSH
3311: CALL_OW 171
// if IsInUnit ( JMM ) then
3315: LD_EXP 23
3319: PPUSH
3320: CALL_OW 310
3324: IFFALSE 3367
// AddComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3326: LD_EXP 42
3330: PPUSH
3331: LD_EXP 23
3335: PPUSH
3336: CALL_OW 310
3340: PPUSH
3341: CALL_OW 250
3345: PPUSH
3346: LD_EXP 23
3350: PPUSH
3351: CALL_OW 310
3355: PPUSH
3356: CALL_OW 251
3360: PPUSH
3361: CALL_OW 171
3365: GO 3396
// AddComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3367: LD_EXP 42
3371: PPUSH
3372: LD_EXP 23
3376: PPUSH
3377: CALL_OW 250
3381: PPUSH
3382: LD_EXP 23
3386: PPUSH
3387: CALL_OW 251
3391: PPUSH
3392: CALL_OW 171
// end ; end_of_file
3396: LD_VAR 0 1
3400: RET
// export arForces , Dietrich , Ahmed ; export arTech , arBuildings , arMines , arCameras , arEscapist ; export function PrepareArabian ; var i , j , un , tmp , skill ; begin
3401: LD_INT 0
3403: PPUSH
3404: PPUSH
3405: PPUSH
3406: PPUSH
3407: PPUSH
3408: PPUSH
// uc_side := 2 ;
3409: LD_ADDR_OWVAR 20
3413: PUSH
3414: LD_INT 2
3416: ST_TO_ADDR
// uc_nation := nation_arabian ;
3417: LD_ADDR_OWVAR 21
3421: PUSH
3422: LD_INT 2
3424: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
3425: LD_ADDR_VAR 0 6
3429: PUSH
3430: LD_INT 4
3432: PUSH
3433: LD_INT 5
3435: PUSH
3436: LD_INT 6
3438: PUSH
3439: LD_INT 7
3441: PUSH
3442: EMPTY
3443: LIST
3444: LIST
3445: LIST
3446: LIST
3447: PUSH
3448: LD_OWVAR 67
3452: ARRAY
3453: ST_TO_ADDR
// arForces := [ ] ;
3454: LD_ADDR_EXP 49
3458: PUSH
3459: EMPTY
3460: ST_TO_ADDR
// arTech := [ ] ;
3461: LD_ADDR_EXP 52
3465: PUSH
3466: EMPTY
3467: ST_TO_ADDR
// arBuildings := [ ] ;
3468: LD_ADDR_EXP 53
3472: PUSH
3473: EMPTY
3474: ST_TO_ADDR
// arCameras := [ [ 94 , 19 ] , [ 92 , 34 ] , [ 109 , 67 ] , [ 120 , 38 ] , [ 116 , 30 ] , [ 102 , 20 ] ] ;
3475: LD_ADDR_EXP 55
3479: PUSH
3480: LD_INT 94
3482: PUSH
3483: LD_INT 19
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PUSH
3490: LD_INT 92
3492: PUSH
3493: LD_INT 34
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: LD_INT 109
3502: PUSH
3503: LD_INT 67
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: LD_INT 120
3512: PUSH
3513: LD_INT 38
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PUSH
3520: LD_INT 116
3522: PUSH
3523: LD_INT 30
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: PUSH
3530: LD_INT 102
3532: PUSH
3533: LD_INT 20
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: ST_TO_ADDR
// arMines := [ [ 73 , 36 ] , [ 76 , 38 ] , [ 79 , 39 ] ] ;
3548: LD_ADDR_EXP 54
3552: PUSH
3553: LD_INT 73
3555: PUSH
3556: LD_INT 36
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: PUSH
3563: LD_INT 76
3565: PUSH
3566: LD_INT 38
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: PUSH
3573: LD_INT 79
3575: PUSH
3576: LD_INT 39
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: LIST
3587: ST_TO_ADDR
// arEscapist := [ ] ;
3588: LD_ADDR_EXP 56
3592: PUSH
3593: EMPTY
3594: ST_TO_ADDR
// SetResourceType ( GetBase ( arDep ) , mat_cans , 150 ) ;
3595: LD_INT 35
3597: PPUSH
3598: CALL_OW 274
3602: PPUSH
3603: LD_INT 1
3605: PPUSH
3606: LD_INT 150
3608: PPUSH
3609: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_oil , 60 ) ;
3613: LD_INT 35
3615: PPUSH
3616: CALL_OW 274
3620: PPUSH
3621: LD_INT 2
3623: PPUSH
3624: LD_INT 60
3626: PPUSH
3627: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_siberit , 10 ) ;
3631: LD_INT 35
3633: PPUSH
3634: CALL_OW 274
3638: PPUSH
3639: LD_INT 3
3641: PPUSH
3642: LD_INT 10
3644: PPUSH
3645: CALL_OW 277
// HiddenCamera ( 36 , 22 , 2 ) ;
3649: LD_INT 36
3651: PPUSH
3652: LD_INT 22
3654: PPUSH
3655: LD_INT 2
3657: PPUSH
3658: CALL_OW 244
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
3662: LD_ADDR_VAR 0 2
3666: PUSH
3667: LD_INT 22
3669: PUSH
3670: LD_INT 2
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_INT 21
3679: PUSH
3680: LD_INT 3
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: PPUSH
3691: CALL_OW 69
3695: PUSH
3696: FOR_IN
3697: IFFALSE 3713
// SetBLevel ( i , 6 ) ;
3699: LD_VAR 0 2
3703: PPUSH
3704: LD_INT 6
3706: PPUSH
3707: CALL_OW 241
3711: GO 3696
3713: POP
3714: POP
// Dietrich := NewCharacter ( Dietrich ) ;
3715: LD_ADDR_EXP 50
3719: PUSH
3720: LD_STRING Dietrich
3722: PPUSH
3723: CALL_OW 25
3727: ST_TO_ADDR
// PlaceHumanInUnit ( Dietrich , arDep ) ;
3728: LD_EXP 50
3732: PPUSH
3733: LD_INT 35
3735: PPUSH
3736: CALL_OW 52
// InitHC_All ( ) ;
3740: CALL_OW 584
// for i := 1 to 3 do
3744: LD_ADDR_VAR 0 2
3748: PUSH
3749: DOUBLE
3750: LD_INT 1
3752: DEC
3753: ST_TO_ADDR
3754: LD_INT 3
3756: PUSH
3757: FOR_TO
3758: IFFALSE 3864
// begin PrepareEngineer ( sex_male , skill ) ;
3760: LD_INT 1
3762: PPUSH
3763: LD_VAR 0 6
3767: PPUSH
3768: CALL_OW 382
// if i = 1 then
3772: LD_VAR 0 2
3776: PUSH
3777: LD_INT 1
3779: EQUAL
3780: IFFALSE 3792
// hc_name := Ahmed Abbasid else
3782: LD_ADDR_OWVAR 26
3786: PUSH
3787: LD_STRING Ahmed Abbasid
3789: ST_TO_ADDR
3790: GO 3800
// hc_name :=  ;
3792: LD_ADDR_OWVAR 26
3796: PUSH
3797: LD_STRING 
3799: ST_TO_ADDR
// un := CreateHuman ;
3800: LD_ADDR_VAR 0 4
3804: PUSH
3805: CALL_OW 44
3809: ST_TO_ADDR
// if i = 1 then
3810: LD_VAR 0 2
3814: PUSH
3815: LD_INT 1
3817: EQUAL
3818: IFFALSE 3830
// Ahmed := un ;
3820: LD_ADDR_EXP 51
3824: PUSH
3825: LD_VAR 0 4
3829: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
3830: LD_ADDR_EXP 49
3834: PUSH
3835: LD_EXP 49
3839: PPUSH
3840: LD_VAR 0 4
3844: PPUSH
3845: CALL 92304 0 2
3849: ST_TO_ADDR
// PlaceHumanInUnit ( un , arDep ) ;
3850: LD_VAR 0 4
3854: PPUSH
3855: LD_INT 35
3857: PPUSH
3858: CALL_OW 52
// end ;
3862: GO 3757
3864: POP
3865: POP
// for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
3866: LD_ADDR_VAR 0 2
3870: PUSH
3871: DOUBLE
3872: LD_INT 1
3874: DEC
3875: ST_TO_ADDR
3876: LD_INT 2
3878: PUSH
3879: LD_INT 3
3881: PUSH
3882: LD_INT 4
3884: PUSH
3885: LD_INT 5
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: PUSH
3894: LD_OWVAR 67
3898: ARRAY
3899: PUSH
3900: FOR_TO
3901: IFFALSE 3976
// begin PrepareScientist ( false , skill ) ;
3903: LD_INT 0
3905: PPUSH
3906: LD_VAR 0 6
3910: PPUSH
3911: CALL_OW 384
// un := CreateHuman ;
3915: LD_ADDR_VAR 0 4
3919: PUSH
3920: CALL_OW 44
3924: ST_TO_ADDR
// SetSkill ( un , skill_combat , skill ) ;
3925: LD_VAR 0 4
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_VAR 0 6
3937: PPUSH
3938: CALL_OW 237
// arForces := Join ( arForces , un ) ;
3942: LD_ADDR_EXP 49
3946: PUSH
3947: LD_EXP 49
3951: PPUSH
3952: LD_VAR 0 4
3956: PPUSH
3957: CALL 92304 0 2
3961: ST_TO_ADDR
// PlaceHumanInUnit ( un , arLab ) ;
3962: LD_VAR 0 4
3966: PPUSH
3967: LD_INT 36
3969: PPUSH
3970: CALL_OW 52
// end ;
3974: GO 3900
3976: POP
3977: POP
// for j in [ arBar1 , arBar2 ] do
3978: LD_ADDR_VAR 0 3
3982: PUSH
3983: LD_INT 37
3985: PUSH
3986: LD_INT 38
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: PUSH
3993: FOR_IN
3994: IFFALSE 4074
// for i := 1 to 4 do
3996: LD_ADDR_VAR 0 2
4000: PUSH
4001: DOUBLE
4002: LD_INT 1
4004: DEC
4005: ST_TO_ADDR
4006: LD_INT 4
4008: PUSH
4009: FOR_TO
4010: IFFALSE 4070
// begin PrepareSoldier ( false , skill ) ;
4012: LD_INT 0
4014: PPUSH
4015: LD_VAR 0 6
4019: PPUSH
4020: CALL_OW 381
// un := CreateHuman ;
4024: LD_ADDR_VAR 0 4
4028: PUSH
4029: CALL_OW 44
4033: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
4034: LD_ADDR_EXP 49
4038: PUSH
4039: LD_EXP 49
4043: PPUSH
4044: LD_VAR 0 4
4048: PPUSH
4049: CALL 92304 0 2
4053: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
4054: LD_VAR 0 4
4058: PPUSH
4059: LD_VAR 0 3
4063: PPUSH
4064: CALL_OW 52
// end ;
4068: GO 4009
4070: POP
4071: POP
4072: GO 3993
4074: POP
4075: POP
// for i := 1 to 3 do
4076: LD_ADDR_VAR 0 2
4080: PUSH
4081: DOUBLE
4082: LD_INT 1
4084: DEC
4085: ST_TO_ADDR
4086: LD_INT 3
4088: PUSH
4089: FOR_TO
4090: IFFALSE 4169
// begin un := arForces [ arForces - i ] ;
4092: LD_ADDR_VAR 0 4
4096: PUSH
4097: LD_EXP 49
4101: PUSH
4102: LD_EXP 49
4106: PUSH
4107: LD_VAR 0 2
4111: MINUS
4112: ARRAY
4113: ST_TO_ADDR
// ComExitBuilding ( un ) ;
4114: LD_VAR 0 4
4118: PPUSH
4119: CALL_OW 122
// AddComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4123: LD_VAR 0 4
4127: PPUSH
4128: LD_INT 22
4130: PUSH
4131: LD_INT 2
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 30
4140: PUSH
4141: LD_INT 31
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PPUSH
4152: CALL_OW 69
4156: PUSH
4157: LD_VAR 0 2
4161: ARRAY
4162: PPUSH
4163: CALL_OW 180
// end ;
4167: GO 4089
4169: POP
4170: POP
// for i := 1 to 3 do
4171: LD_ADDR_VAR 0 2
4175: PUSH
4176: DOUBLE
4177: LD_INT 1
4179: DEC
4180: ST_TO_ADDR
4181: LD_INT 3
4183: PUSH
4184: FOR_TO
4185: IFFALSE 4270
// begin tmp := UnitFilter ( arForces , [ [ f_class , class_soldier ] , [ f_not , [ f_tag , tMine ] ] ] ) ;
4187: LD_ADDR_VAR 0 5
4191: PUSH
4192: LD_EXP 49
4196: PPUSH
4197: LD_INT 25
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 3
4209: PUSH
4210: LD_INT 120
4212: PUSH
4213: LD_INT 6
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PUSH
4224: EMPTY
4225: LIST
4226: LIST
4227: PPUSH
4228: CALL_OW 72
4232: ST_TO_ADDR
// if not tmp then
4233: LD_VAR 0 5
4237: NOT
4238: IFFALSE 4242
// continue ;
4240: GO 4184
// un := tmp [ 1 ] ;
4242: LD_ADDR_VAR 0 4
4246: PUSH
4247: LD_VAR 0 5
4251: PUSH
4252: LD_INT 1
4254: ARRAY
4255: ST_TO_ADDR
// SetTag ( un , tMine ) ;
4256: LD_VAR 0 4
4260: PPUSH
4261: LD_INT 6
4263: PPUSH
4264: CALL_OW 109
// end ;
4268: GO 4184
4270: POP
4271: POP
// for i in UnitsInside ( arBar2 ) do
4272: LD_ADDR_VAR 0 2
4276: PUSH
4277: LD_INT 38
4279: PPUSH
4280: CALL_OW 313
4284: PUSH
4285: FOR_IN
4286: IFFALSE 4302
// SetClass ( i , class_mortar ) ;
4288: LD_VAR 0 2
4292: PPUSH
4293: LD_INT 8
4295: PPUSH
4296: CALL_OW 336
4300: GO 4285
4302: POP
4303: POP
// end ;
4304: LD_VAR 0 1
4308: RET
// every 0 0$2 trigger joinedToEpsilon do var i , eng ;
4309: LD_EXP 7
4313: IFFALSE 4726
4315: GO 4317
4317: DISABLE
4318: LD_INT 0
4320: PPUSH
4321: PPUSH
// begin ComUpgradeLab ( arLab , b_lab_siberium ) ;
4322: LD_INT 36
4324: PPUSH
4325: LD_INT 11
4327: PPUSH
4328: CALL_OW 147
// wait ( 0 0$10 ) ;
4332: LD_INT 350
4334: PPUSH
4335: CALL_OW 67
// arBuildings := [ [ b_solar_power , 69 , 4 , 2 ] , [ b_solar_power , 67 , 6 , 3 ] ] ;
4339: LD_ADDR_EXP 53
4343: PUSH
4344: LD_INT 27
4346: PUSH
4347: LD_INT 69
4349: PUSH
4350: LD_INT 4
4352: PUSH
4353: LD_INT 2
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: PUSH
4362: LD_INT 27
4364: PUSH
4365: LD_INT 67
4367: PUSH
4368: LD_INT 6
4370: PUSH
4371: LD_INT 3
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4384: LD_INT 35
4386: PPUSH
4387: CALL_OW 67
// until not arBuildings ;
4391: LD_EXP 53
4395: NOT
4396: IFFALSE 4384
// eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
4398: LD_ADDR_VAR 0 2
4402: PUSH
4403: LD_EXP 49
4407: PPUSH
4408: LD_INT 25
4410: PUSH
4411: LD_INT 2
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PPUSH
4418: CALL_OW 72
4422: ST_TO_ADDR
// if eng then
4423: LD_VAR 0 2
4427: IFFALSE 4564
// begin eng := eng [ 1 ] ;
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: LD_VAR 0 2
4438: PUSH
4439: LD_INT 1
4441: ARRAY
4442: ST_TO_ADDR
// SetTag ( eng , tCamera ) ;
4443: LD_VAR 0 2
4447: PPUSH
4448: LD_INT 4
4450: PPUSH
4451: CALL_OW 109
// for i in arCameras do
4455: LD_ADDR_VAR 0 1
4459: PUSH
4460: LD_EXP 55
4464: PUSH
4465: FOR_IN
4466: IFFALSE 4497
// AddComHiddenCamera ( eng , i [ 1 ] , i [ 2 ] ) ;
4468: LD_VAR 0 2
4472: PPUSH
4473: LD_VAR 0 1
4477: PUSH
4478: LD_INT 1
4480: ARRAY
4481: PPUSH
4482: LD_VAR 0 1
4486: PUSH
4487: LD_INT 2
4489: ARRAY
4490: PPUSH
4491: CALL_OW 217
4495: GO 4465
4497: POP
4498: POP
// repeat wait ( 0 0$1 ) ;
4499: LD_INT 35
4501: PPUSH
4502: CALL_OW 67
// until not HasTask ( eng ) or IsDead ( eng ) ;
4506: LD_VAR 0 2
4510: PPUSH
4511: CALL_OW 314
4515: NOT
4516: PUSH
4517: LD_VAR 0 2
4521: PPUSH
4522: CALL_OW 301
4526: OR
4527: IFFALSE 4499
// if IsOk ( eng ) then
4529: LD_VAR 0 2
4533: PPUSH
4534: CALL_OW 302
4538: IFFALSE 4564
// begin SetTag ( eng , 0 ) ;
4540: LD_VAR 0 2
4544: PPUSH
4545: LD_INT 0
4547: PPUSH
4548: CALL_OW 109
// ComEnterUnit ( eng , arDep ) ;
4552: LD_VAR 0 2
4556: PPUSH
4557: LD_INT 35
4559: PPUSH
4560: CALL_OW 120
// end ; end ; repeat wait ( 0 0$1 ) ;
4564: LD_INT 35
4566: PPUSH
4567: CALL_OW 67
// if tick mod 4200 = 0 and GetListOfCratesInArea ( arCratesArea ) < 3 then
4571: LD_OWVAR 1
4575: PUSH
4576: LD_INT 4200
4578: MOD
4579: PUSH
4580: LD_INT 0
4582: EQUAL
4583: PUSH
4584: LD_INT 9
4586: PPUSH
4587: CALL_OW 435
4591: PUSH
4592: LD_INT 3
4594: LESS
4595: AND
4596: IFFALSE 4619
// CreateCratesArea ( rand ( 1 , 5 ) , arCratesArea , true ) ;
4598: LD_INT 1
4600: PPUSH
4601: LD_INT 5
4603: PPUSH
4604: CALL_OW 12
4608: PPUSH
4609: LD_INT 9
4611: PPUSH
4612: LD_INT 1
4614: PPUSH
4615: CALL_OW 55
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) ;
4619: LD_INT 22
4621: PUSH
4622: LD_INT 1
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PUSH
4629: LD_INT 3
4631: PUSH
4632: LD_INT 57
4634: PUSH
4635: EMPTY
4636: LIST
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 63
4644: PUSH
4645: LD_INT 11
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: PPUSH
4657: CALL_OW 69
4661: IFFALSE 4564
// wait ( 0 0$10 ) ;
4663: LD_INT 350
4665: PPUSH
4666: CALL_OW 67
// arTech := [ tech_sibPow , tech_sibEng , tech_sib1 ] ;
4670: LD_ADDR_EXP 52
4674: PUSH
4675: LD_INT 21
4677: PUSH
4678: LD_INT 22
4680: PUSH
4681: LD_INT 54
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: LIST
4688: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4689: LD_INT 35
4691: PPUSH
4692: CALL_OW 67
// until not arTech ;
4696: LD_EXP 52
4700: NOT
4701: IFFALSE 4689
// wait ( 0 0$30 ) ;
4703: LD_INT 1050
4705: PPUSH
4706: CALL_OW 67
// arabianAttack := true ;
4710: LD_ADDR_EXP 4
4714: PUSH
4715: LD_INT 1
4717: ST_TO_ADDR
// arBaseActive := false ;
4718: LD_ADDR_EXP 3
4722: PUSH
4723: LD_INT 0
4725: ST_TO_ADDR
// end ;
4726: PPOPN 2
4728: END
// every 3 trigger arBaseActive and arMines and FilterUnitsInArea ( arMinesArea , [ f_enemy , 2 ] ) do var i , e ;
4729: LD_EXP 3
4733: PUSH
4734: LD_EXP 54
4738: AND
4739: PUSH
4740: LD_INT 8
4742: PPUSH
4743: LD_INT 81
4745: PUSH
4746: LD_INT 2
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PPUSH
4753: CALL_OW 70
4757: AND
4758: IFFALSE 4869
4760: GO 4762
4762: DISABLE
4763: LD_INT 0
4765: PPUSH
4766: PPUSH
// begin enable ;
4767: ENABLE
// for i in arMines do
4768: LD_ADDR_VAR 0 1
4772: PUSH
4773: LD_EXP 54
4777: PUSH
4778: FOR_IN
4779: IFFALSE 4867
// begin e := HexInfo ( i [ 1 ] , i [ 2 ] ) ;
4781: LD_ADDR_VAR 0 2
4785: PUSH
4786: LD_VAR 0 1
4790: PUSH
4791: LD_INT 1
4793: ARRAY
4794: PPUSH
4795: LD_VAR 0 1
4799: PUSH
4800: LD_INT 2
4802: ARRAY
4803: PPUSH
4804: CALL_OW 428
4808: ST_TO_ADDR
// if not e then
4809: LD_VAR 0 2
4813: NOT
4814: IFFALSE 4818
// continue ;
4816: GO 4778
// if GetSide ( e ) in [ 3 , 6 ] then
4818: LD_VAR 0 2
4822: PPUSH
4823: CALL_OW 255
4827: PUSH
4828: LD_INT 3
4830: PUSH
4831: LD_INT 6
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: IN
4838: IFFALSE 4865
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 2 ) ;
4840: LD_VAR 0 1
4844: PUSH
4845: LD_INT 1
4847: ARRAY
4848: PPUSH
4849: LD_VAR 0 1
4853: PUSH
4854: LD_INT 2
4856: ARRAY
4857: PPUSH
4858: LD_INT 2
4860: PPUSH
4861: CALL_OW 456
// end ;
4865: GO 4778
4867: POP
4868: POP
// end ;
4869: PPOPN 2
4871: END
// every 0 0$2 trigger arBaseActive do var i , un , b , side , tmp , lab , eng , tag , cr , tw , sci , sol , hurtUnits , enemyInBase , empty , fac ;
4872: LD_EXP 3
4876: IFFALSE 7064
4878: GO 4880
4880: DISABLE
4881: LD_INT 0
4883: PPUSH
4884: PPUSH
4885: PPUSH
4886: PPUSH
4887: PPUSH
4888: PPUSH
4889: PPUSH
4890: PPUSH
4891: PPUSH
4892: PPUSH
4893: PPUSH
4894: PPUSH
4895: PPUSH
4896: PPUSH
4897: PPUSH
4898: PPUSH
// begin enable ;
4899: ENABLE
// side := 2 ;
4900: LD_ADDR_VAR 0 4
4904: PUSH
4905: LD_INT 2
4907: ST_TO_ADDR
// if arTech then
4908: LD_EXP 52
4912: IFFALSE 5068
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4914: LD_ADDR_VAR 0 6
4918: PUSH
4919: LD_INT 22
4921: PUSH
4922: LD_VAR 0 4
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: LD_INT 50
4933: PUSH
4934: EMPTY
4935: LIST
4936: PUSH
4937: LD_INT 2
4939: PUSH
4940: LD_INT 30
4942: PUSH
4943: LD_INT 6
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PUSH
4950: LD_INT 30
4952: PUSH
4953: LD_INT 7
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: PUSH
4960: LD_INT 30
4962: PUSH
4963: LD_INT 8
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: LIST
4980: PPUSH
4981: CALL_OW 69
4985: ST_TO_ADDR
// if lab then
4986: LD_VAR 0 6
4990: IFFALSE 5068
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
4992: LD_VAR 0 6
4996: PUSH
4997: LD_INT 1
4999: ARRAY
5000: PPUSH
5001: CALL_OW 461
5005: PUSH
5006: LD_INT 2
5008: EQUAL
5009: IFFALSE 5068
// begin for i in arTech do
5011: LD_ADDR_VAR 0 1
5015: PUSH
5016: LD_EXP 52
5020: PUSH
5021: FOR_IN
5022: IFFALSE 5066
// if CanBeResearched ( lab [ 1 ] , i ) then
5024: LD_VAR 0 6
5028: PUSH
5029: LD_INT 1
5031: ARRAY
5032: PPUSH
5033: LD_VAR 0 1
5037: PPUSH
5038: CALL_OW 430
5042: IFFALSE 5064
// begin ComResearch ( lab [ 1 ] , i ) ;
5044: LD_VAR 0 6
5048: PUSH
5049: LD_INT 1
5051: ARRAY
5052: PPUSH
5053: LD_VAR 0 1
5057: PPUSH
5058: CALL_OW 124
// break ;
5062: GO 5066
// end ;
5064: GO 5021
5066: POP
5067: POP
// end ; end ; end ; tmp := FilterUnitsInArea ( arBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5068: LD_ADDR_VAR 0 5
5072: PUSH
5073: LD_INT 5
5075: PPUSH
5076: LD_INT 21
5078: PUSH
5079: LD_INT 3
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 3
5088: PUSH
5089: LD_INT 24
5091: PUSH
5092: LD_INT 1000
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: PPUSH
5107: CALL_OW 70
5111: ST_TO_ADDR
// cr := GetListOfCratesInArea ( arCratesArea ) ;
5112: LD_ADDR_VAR 0 9
5116: PUSH
5117: LD_INT 9
5119: PPUSH
5120: CALL_OW 435
5124: ST_TO_ADDR
// sci := UnitFilter ( arForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
5125: LD_ADDR_VAR 0 11
5129: PUSH
5130: LD_EXP 49
5134: PPUSH
5135: LD_INT 25
5137: PUSH
5138: LD_INT 4
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: PUSH
5145: LD_INT 50
5147: PUSH
5148: EMPTY
5149: LIST
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: PPUSH
5155: CALL_OW 72
5159: ST_TO_ADDR
// if sci then
5160: LD_VAR 0 11
5164: IFFALSE 5528
// begin hurtUnits := UnitFilter ( arForces , [ [ f_inarea , arBaseArea ] , [ f_not , [ f_inside ] ] , [ f_tag , tHeal ] ] ) ;
5166: LD_ADDR_VAR 0 13
5170: PUSH
5171: LD_EXP 49
5175: PPUSH
5176: LD_INT 95
5178: PUSH
5179: LD_INT 5
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 3
5188: PUSH
5189: LD_INT 54
5191: PUSH
5192: EMPTY
5193: LIST
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PUSH
5199: LD_INT 120
5201: PUSH
5202: LD_INT 1
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: LIST
5213: PPUSH
5214: CALL_OW 72
5218: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5219: LD_ADDR_VAR 0 6
5223: PUSH
5224: LD_INT 22
5226: PUSH
5227: LD_VAR 0 4
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PUSH
5236: LD_INT 50
5238: PUSH
5239: EMPTY
5240: LIST
5241: PUSH
5242: LD_INT 2
5244: PUSH
5245: LD_INT 30
5247: PUSH
5248: LD_INT 6
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: LD_INT 30
5257: PUSH
5258: LD_INT 7
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PUSH
5265: LD_INT 30
5267: PUSH
5268: LD_INT 8
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: LIST
5285: PPUSH
5286: CALL_OW 69
5290: ST_TO_ADDR
// tag := GetTag ( i ) ;
5291: LD_ADDR_VAR 0 8
5295: PUSH
5296: LD_VAR 0 1
5300: PPUSH
5301: CALL_OW 110
5305: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
5306: LD_VAR 0 1
5310: PPUSH
5311: CALL_OW 256
5315: PUSH
5316: LD_INT 800
5318: LESS
5319: PUSH
5320: LD_VAR 0 8
5324: PUSH
5325: LD_INT 1
5327: NONEQUAL
5328: AND
5329: IFFALSE 5358
// begin ComMoveXY ( i , 72 , 15 ) ;
5331: LD_VAR 0 1
5335: PPUSH
5336: LD_INT 72
5338: PPUSH
5339: LD_INT 15
5341: PPUSH
5342: CALL_OW 111
// SetTag ( i , tHeal ) ;
5346: LD_VAR 0 1
5350: PPUSH
5351: LD_INT 1
5353: PPUSH
5354: CALL_OW 109
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
5358: LD_VAR 0 1
5362: PPUSH
5363: CALL_OW 256
5367: PUSH
5368: LD_INT 1000
5370: EQUAL
5371: PUSH
5372: LD_VAR 0 8
5376: PUSH
5377: LD_INT 1
5379: EQUAL
5380: AND
5381: IFFALSE 5395
// begin SetTag ( i , 0 ) ;
5383: LD_VAR 0 1
5387: PPUSH
5388: LD_INT 0
5390: PPUSH
5391: CALL_OW 109
// end ; if hurtUnits then
5395: LD_VAR 0 13
5399: IFFALSE 5460
// begin for i in sci do
5401: LD_ADDR_VAR 0 1
5405: PUSH
5406: LD_VAR 0 11
5410: PUSH
5411: FOR_IN
5412: IFFALSE 5456
// if IsInUnit ( i ) then
5414: LD_VAR 0 1
5418: PPUSH
5419: CALL_OW 310
5423: IFFALSE 5436
// ComExitBuilding ( i ) else
5425: LD_VAR 0 1
5429: PPUSH
5430: CALL_OW 122
5434: GO 5454
// ComHeal ( i , hurtUnits [ 1 ] ) ;
5436: LD_VAR 0 1
5440: PPUSH
5441: LD_VAR 0 13
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PPUSH
5450: CALL_OW 128
5454: GO 5411
5456: POP
5457: POP
// end else
5458: GO 5528
// if lab then
5460: LD_VAR 0 6
5464: IFFALSE 5528
// begin for i in sci do
5466: LD_ADDR_VAR 0 1
5470: PUSH
5471: LD_VAR 0 11
5475: PUSH
5476: FOR_IN
5477: IFFALSE 5526
// if not IsInUnit ( i ) and GetTag ( i ) <> tHeal then
5479: LD_VAR 0 1
5483: PPUSH
5484: CALL_OW 310
5488: NOT
5489: PUSH
5490: LD_VAR 0 1
5494: PPUSH
5495: CALL_OW 110
5499: PUSH
5500: LD_INT 1
5502: NONEQUAL
5503: AND
5504: IFFALSE 5524
// ComEnterUnit ( i , lab [ 1 ] ) ;
5506: LD_VAR 0 1
5510: PPUSH
5511: LD_VAR 0 6
5515: PUSH
5516: LD_INT 1
5518: ARRAY
5519: PPUSH
5520: CALL_OW 120
5524: GO 5476
5526: POP
5527: POP
// end ; end ; eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
5528: LD_ADDR_VAR 0 7
5532: PUSH
5533: LD_EXP 49
5537: PPUSH
5538: LD_INT 25
5540: PUSH
5541: LD_INT 2
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PPUSH
5548: CALL_OW 72
5552: ST_TO_ADDR
// if eng then
5553: LD_VAR 0 7
5557: IFFALSE 6226
// begin for i in eng do
5559: LD_ADDR_VAR 0 1
5563: PUSH
5564: LD_VAR 0 7
5568: PUSH
5569: FOR_IN
5570: IFFALSE 6224
// begin tag := GetTag ( i ) ;
5572: LD_ADDR_VAR 0 8
5576: PUSH
5577: LD_VAR 0 1
5581: PPUSH
5582: CALL_OW 110
5586: ST_TO_ADDR
// if tag = tCamera then
5587: LD_VAR 0 8
5591: PUSH
5592: LD_INT 4
5594: EQUAL
5595: IFFALSE 5599
// continue ;
5597: GO 5569
// if GetLives ( i ) < 600 and tag <> tHeal then
5599: LD_VAR 0 1
5603: PPUSH
5604: CALL_OW 256
5608: PUSH
5609: LD_INT 600
5611: LESS
5612: PUSH
5613: LD_VAR 0 8
5617: PUSH
5618: LD_INT 1
5620: NONEQUAL
5621: AND
5622: IFFALSE 5660
// begin SetTag ( i , tHeal ) ;
5624: LD_VAR 0 1
5628: PPUSH
5629: LD_INT 1
5631: PPUSH
5632: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
5636: LD_VAR 0 1
5640: PPUSH
5641: LD_INT 72
5643: PPUSH
5644: LD_INT 15
5646: PPUSH
5647: CALL_OW 111
// AddComHold ( i ) ;
5651: LD_VAR 0 1
5655: PPUSH
5656: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
5660: LD_VAR 0 8
5664: PUSH
5665: LD_INT 1
5667: EQUAL
5668: PUSH
5669: LD_VAR 0 1
5673: PPUSH
5674: CALL_OW 256
5678: PUSH
5679: LD_INT 1000
5681: EQUAL
5682: AND
5683: IFFALSE 5697
// SetTag ( i , 0 ) ;
5685: LD_VAR 0 1
5689: PPUSH
5690: LD_INT 0
5692: PPUSH
5693: CALL_OW 109
// if not tag then
5697: LD_VAR 0 8
5701: NOT
5702: IFFALSE 5848
// begin if cr or tmp or Count ( arBuildings ) then
5704: LD_VAR 0 9
5708: PUSH
5709: LD_VAR 0 5
5713: OR
5714: PUSH
5715: LD_EXP 53
5719: PPUSH
5720: CALL 56715 0 1
5724: OR
5725: IFFALSE 5812
// begin if IsInUnit ( i ) then
5727: LD_VAR 0 1
5731: PPUSH
5732: CALL_OW 310
5736: IFFALSE 5747
// ComExitBuilding ( i ) ;
5738: LD_VAR 0 1
5742: PPUSH
5743: CALL_OW 122
// if tmp then
5747: LD_VAR 0 5
5751: IFFALSE 5767
// SetTag ( i , tRepair ) else
5753: LD_VAR 0 1
5757: PPUSH
5758: LD_INT 3
5760: PPUSH
5761: CALL_OW 109
5765: GO 5810
// if cr then
5767: LD_VAR 0 9
5771: IFFALSE 5787
// SetTag ( i , tCrates ) else
5773: LD_VAR 0 1
5777: PPUSH
5778: LD_INT 2
5780: PPUSH
5781: CALL_OW 109
5785: GO 5810
// if Count ( arBuildings ) then
5787: LD_EXP 53
5791: PPUSH
5792: CALL 56715 0 1
5796: IFFALSE 5810
// SetTag ( i , tBuild ) ;
5798: LD_VAR 0 1
5802: PPUSH
5803: LD_INT 5
5805: PPUSH
5806: CALL_OW 109
// end else
5810: GO 5848
// if not IsInUnit ( i ) then
5812: LD_VAR 0 1
5816: PPUSH
5817: CALL_OW 310
5821: NOT
5822: IFFALSE 5848
// begin SetTag ( i , 0 ) ;
5824: LD_VAR 0 1
5828: PPUSH
5829: LD_INT 0
5831: PPUSH
5832: CALL_OW 109
// ComEnterUnit ( i , arDep ) ;
5836: LD_VAR 0 1
5840: PPUSH
5841: LD_INT 35
5843: PPUSH
5844: CALL_OW 120
// end ; end ; if tag = tRepair then
5848: LD_VAR 0 8
5852: PUSH
5853: LD_INT 3
5855: EQUAL
5856: IFFALSE 5958
// begin if IsInUnit ( i ) then
5858: LD_VAR 0 1
5862: PPUSH
5863: CALL_OW 310
5867: IFFALSE 5880
// begin ComExitBuilding ( i ) ;
5869: LD_VAR 0 1
5873: PPUSH
5874: CALL_OW 122
// continue ;
5878: GO 5569
// end ; if not tmp then
5880: LD_VAR 0 5
5884: NOT
5885: IFFALSE 5901
// begin SetTag ( i , 0 ) ;
5887: LD_VAR 0 1
5891: PPUSH
5892: LD_INT 0
5894: PPUSH
5895: CALL_OW 109
// continue ;
5899: GO 5569
// end ; if not HasTask ( i ) then
5901: LD_VAR 0 1
5905: PPUSH
5906: CALL_OW 314
5910: NOT
5911: IFFALSE 5931
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
5913: LD_VAR 0 1
5917: PPUSH
5918: LD_VAR 0 5
5922: PUSH
5923: LD_INT 1
5925: ARRAY
5926: PPUSH
5927: CALL_OW 130
// if not IsInArea ( i , arBaseArea ) then
5931: LD_VAR 0 1
5935: PPUSH
5936: LD_INT 5
5938: PPUSH
5939: CALL_OW 308
5943: NOT
5944: IFFALSE 5958
// ComMoveToArea ( i , arBaseArea ) ;
5946: LD_VAR 0 1
5950: PPUSH
5951: LD_INT 5
5953: PPUSH
5954: CALL_OW 113
// end ; if tag = tBuild then
5958: LD_VAR 0 8
5962: PUSH
5963: LD_INT 5
5965: EQUAL
5966: IFFALSE 6077
// begin if IsInUnit ( i ) then
5968: LD_VAR 0 1
5972: PPUSH
5973: CALL_OW 310
5977: IFFALSE 5990
// begin ComExitBuilding ( i ) ;
5979: LD_VAR 0 1
5983: PPUSH
5984: CALL_OW 122
// continue ;
5988: GO 5569
// end ; if not Count ( arBuildings ) then
5990: LD_EXP 53
5994: PPUSH
5995: CALL 56715 0 1
5999: NOT
6000: IFFALSE 6016
// begin SetTag ( i , 0 ) ;
6002: LD_VAR 0 1
6006: PPUSH
6007: LD_INT 0
6009: PPUSH
6010: CALL_OW 109
// continue ;
6014: GO 5569
// end ; ComBuild ( i , arBuildings [ 1 ] [ 1 ] , arBuildings [ 1 ] [ 2 ] , arBuildings [ 1 ] [ 3 ] , arBuildings [ 1 ] [ 4 ] ) ;
6016: LD_VAR 0 1
6020: PPUSH
6021: LD_EXP 53
6025: PUSH
6026: LD_INT 1
6028: ARRAY
6029: PUSH
6030: LD_INT 1
6032: ARRAY
6033: PPUSH
6034: LD_EXP 53
6038: PUSH
6039: LD_INT 1
6041: ARRAY
6042: PUSH
6043: LD_INT 2
6045: ARRAY
6046: PPUSH
6047: LD_EXP 53
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PUSH
6056: LD_INT 3
6058: ARRAY
6059: PPUSH
6060: LD_EXP 53
6064: PUSH
6065: LD_INT 1
6067: ARRAY
6068: PUSH
6069: LD_INT 4
6071: ARRAY
6072: PPUSH
6073: CALL_OW 145
// end ; if tag = tCrates then
6077: LD_VAR 0 8
6081: PUSH
6082: LD_INT 2
6084: EQUAL
6085: IFFALSE 6222
// begin if IsInUnit ( i ) then
6087: LD_VAR 0 1
6091: PPUSH
6092: CALL_OW 310
6096: IFFALSE 6109
// begin ComExitBuilding ( i ) ;
6098: LD_VAR 0 1
6102: PPUSH
6103: CALL_OW 122
// continue ;
6107: GO 5569
// end ; if not cr then
6109: LD_VAR 0 9
6113: NOT
6114: IFFALSE 6130
// begin SetTag ( i , 0 ) ;
6116: LD_VAR 0 1
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 109
// continue ;
6128: GO 5569
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
6130: LD_VAR 0 1
6134: PPUSH
6135: CALL_OW 314
6139: NOT
6140: PUSH
6141: LD_INT 81
6143: PUSH
6144: LD_VAR 0 4
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: PUSH
6153: LD_INT 92
6155: PUSH
6156: LD_VAR 0 9
6160: PUSH
6161: LD_INT 1
6163: ARRAY
6164: PUSH
6165: LD_VAR 0 9
6169: PUSH
6170: LD_INT 2
6172: ARRAY
6173: PUSH
6174: LD_INT 12
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: EMPTY
6184: LIST
6185: LIST
6186: PPUSH
6187: CALL_OW 69
6191: NOT
6192: AND
6193: IFFALSE 6222
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
6195: LD_VAR 0 1
6199: PPUSH
6200: LD_VAR 0 9
6204: PUSH
6205: LD_INT 1
6207: ARRAY
6208: PPUSH
6209: LD_VAR 0 9
6213: PUSH
6214: LD_INT 2
6216: ARRAY
6217: PPUSH
6218: CALL_OW 117
// end ; end ;
6222: GO 5569
6224: POP
6225: POP
// end ; sol := UnitFilter ( arForces , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6226: LD_ADDR_VAR 0 12
6230: PUSH
6231: LD_EXP 49
6235: PPUSH
6236: LD_INT 25
6238: PUSH
6239: LD_INT 1
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: PUSH
6246: LD_INT 50
6248: PUSH
6249: EMPTY
6250: LIST
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PPUSH
6256: CALL_OW 72
6260: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( arBaseArea , [ f_enemy , side ] ) ;
6261: LD_ADDR_VAR 0 14
6265: PUSH
6266: LD_INT 5
6268: PPUSH
6269: LD_INT 81
6271: PUSH
6272: LD_VAR 0 4
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PPUSH
6281: CALL_OW 70
6285: ST_TO_ADDR
// if sol then
6286: LD_VAR 0 12
6290: IFFALSE 7064
// begin tmp := UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ;
6292: LD_ADDR_VAR 0 5
6296: PUSH
6297: LD_VAR 0 12
6301: PPUSH
6302: LD_INT 50
6304: PUSH
6305: EMPTY
6306: LIST
6307: PUSH
6308: LD_INT 120
6310: PUSH
6311: LD_INT 6
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: PPUSH
6322: CALL_OW 72
6326: ST_TO_ADDR
// if tmp and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , 76 , 38 , 12 ] ] ) then
6327: LD_VAR 0 5
6331: PUSH
6332: LD_INT 81
6334: PUSH
6335: LD_VAR 0 4
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: LD_INT 92
6346: PUSH
6347: LD_INT 76
6349: PUSH
6350: LD_INT 38
6352: PUSH
6353: LD_INT 12
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PPUSH
6366: CALL_OW 69
6370: NOT
6371: AND
6372: IFFALSE 6542
// for i := 1 to Count ( tmp ) do
6374: LD_ADDR_VAR 0 1
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_VAR 0 5
6388: PPUSH
6389: CALL 56715 0 1
6393: PUSH
6394: FOR_TO
6395: IFFALSE 6540
// begin un := tmp [ i ] ;
6397: LD_ADDR_VAR 0 2
6401: PUSH
6402: LD_VAR 0 5
6406: PUSH
6407: LD_VAR 0 1
6411: ARRAY
6412: ST_TO_ADDR
// b := IsInUnit ( un ) ;
6413: LD_ADDR_VAR 0 3
6417: PUSH
6418: LD_VAR 0 2
6422: PPUSH
6423: CALL_OW 310
6427: ST_TO_ADDR
// if not MineOfUnit ( un ) then
6428: LD_VAR 0 2
6432: PPUSH
6433: CALL_OW 459
6437: NOT
6438: IFFALSE 6507
// begin ComExitBuilding ( un ) ;
6440: LD_VAR 0 2
6444: PPUSH
6445: CALL_OW 122
// AddComPlaceRemoteCharge ( un , arMines [ i ] [ 1 ] , arMines [ i ] [ 2 ] , 0 ) ;
6449: LD_VAR 0 2
6453: PPUSH
6454: LD_EXP 54
6458: PUSH
6459: LD_VAR 0 1
6463: ARRAY
6464: PUSH
6465: LD_INT 1
6467: ARRAY
6468: PPUSH
6469: LD_EXP 54
6473: PUSH
6474: LD_VAR 0 1
6478: ARRAY
6479: PUSH
6480: LD_INT 2
6482: ARRAY
6483: PPUSH
6484: LD_INT 0
6486: PPUSH
6487: CALL_OW 193
// AddComEnterUnit ( un , b ) ;
6491: LD_VAR 0 2
6495: PPUSH
6496: LD_VAR 0 3
6500: PPUSH
6501: CALL_OW 180
// end else
6505: GO 6538
// if not b and not HasTask ( un ) then
6507: LD_VAR 0 3
6511: NOT
6512: PUSH
6513: LD_VAR 0 2
6517: PPUSH
6518: CALL_OW 314
6522: NOT
6523: AND
6524: IFFALSE 6538
// ComEnterUnit ( un , arBar1 ) ;
6526: LD_VAR 0 2
6530: PPUSH
6531: LD_INT 37
6533: PPUSH
6534: CALL_OW 120
// end ;
6538: GO 6394
6540: POP
6541: POP
// if enemyInBase then
6542: LD_VAR 0 14
6546: IFFALSE 6691
// begin for i in sol do
6548: LD_ADDR_VAR 0 1
6552: PUSH
6553: LD_VAR 0 12
6557: PUSH
6558: FOR_IN
6559: IFFALSE 6687
// begin tw := IsInUnit ( i ) ;
6561: LD_ADDR_VAR 0 10
6565: PUSH
6566: LD_VAR 0 1
6570: PPUSH
6571: CALL_OW 310
6575: ST_TO_ADDR
// if tw then
6576: LD_VAR 0 10
6580: IFFALSE 6661
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
6582: LD_VAR 0 10
6586: PUSH
6587: LD_INT 22
6589: PUSH
6590: LD_VAR 0 4
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 101
6601: PUSH
6602: LD_INT 2
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: LD_INT 2
6611: PUSH
6612: LD_INT 30
6614: PUSH
6615: LD_INT 32
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: PUSH
6622: LD_INT 30
6624: PUSH
6625: LD_INT 31
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: LIST
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: LIST
6641: PPUSH
6642: CALL_OW 69
6646: IN
6647: NOT
6648: IFFALSE 6659
// ComExitBuilding ( i ) ;
6650: LD_VAR 0 1
6654: PPUSH
6655: CALL_OW 122
// end else
6659: GO 6685
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
6661: LD_VAR 0 1
6665: PPUSH
6666: LD_VAR 0 14
6670: PPUSH
6671: LD_VAR 0 1
6675: PPUSH
6676: CALL_OW 74
6680: PPUSH
6681: CALL_OW 115
// end ;
6685: GO 6558
6687: POP
6688: POP
// end else
6689: GO 7064
// begin empty := FilterUnitsInArea ( arBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
6691: LD_ADDR_VAR 0 15
6695: PUSH
6696: LD_INT 5
6698: PPUSH
6699: LD_INT 3
6701: PUSH
6702: LD_INT 62
6704: PUSH
6705: EMPTY
6706: LIST
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: LD_INT 2
6714: PUSH
6715: LD_INT 30
6717: PUSH
6718: LD_INT 32
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 30
6727: PUSH
6728: LD_INT 4
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: PUSH
6735: LD_INT 30
6737: PUSH
6738: LD_INT 5
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 30
6747: PUSH
6748: LD_INT 31
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PPUSH
6766: CALL_OW 70
6770: ST_TO_ADDR
// if empty then
6771: LD_VAR 0 15
6775: IFFALSE 6792
// empty := ReverseArray ( empty ) ;
6777: LD_ADDR_VAR 0 15
6781: PUSH
6782: LD_VAR 0 15
6786: PPUSH
6787: CALL 87591 0 1
6791: ST_TO_ADDR
// for i in sol do
6792: LD_ADDR_VAR 0 1
6796: PUSH
6797: LD_VAR 0 12
6801: PUSH
6802: FOR_IN
6803: IFFALSE 7062
// begin tag := GetTag ( i ) ;
6805: LD_ADDR_VAR 0 8
6809: PUSH
6810: LD_VAR 0 1
6814: PPUSH
6815: CALL_OW 110
6819: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
6820: LD_VAR 0 1
6824: PPUSH
6825: CALL_OW 256
6829: PUSH
6830: LD_INT 1000
6832: LESS
6833: PUSH
6834: LD_VAR 0 8
6838: PUSH
6839: LD_INT 1
6841: NONEQUAL
6842: AND
6843: IFFALSE 6883
// begin SetTag ( i , tHeal ) ;
6845: LD_VAR 0 1
6849: PPUSH
6850: LD_INT 1
6852: PPUSH
6853: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
6857: LD_VAR 0 1
6861: PPUSH
6862: LD_INT 72
6864: PPUSH
6865: LD_INT 15
6867: PPUSH
6868: CALL_OW 111
// AddComHold ( i ) ;
6872: LD_VAR 0 1
6876: PPUSH
6877: CALL_OW 200
// continue ;
6881: GO 6802
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
6883: LD_VAR 0 1
6887: PPUSH
6888: CALL_OW 256
6892: PUSH
6893: LD_INT 1000
6895: EQUAL
6896: PUSH
6897: LD_VAR 0 8
6901: PUSH
6902: LD_INT 1
6904: EQUAL
6905: AND
6906: IFFALSE 6987
// begin if MineOfUnit ( i ) or Count ( UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ) < 3 then
6908: LD_VAR 0 1
6912: PPUSH
6913: CALL_OW 459
6917: PUSH
6918: LD_VAR 0 12
6922: PPUSH
6923: LD_INT 50
6925: PUSH
6926: EMPTY
6927: LIST
6928: PUSH
6929: LD_INT 120
6931: PUSH
6932: LD_INT 6
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PPUSH
6943: CALL_OW 72
6947: PPUSH
6948: CALL 56715 0 1
6952: PUSH
6953: LD_INT 3
6955: LESS
6956: OR
6957: IFFALSE 6973
// SetTag ( i , tMine ) else
6959: LD_VAR 0 1
6963: PPUSH
6964: LD_INT 6
6966: PPUSH
6967: CALL_OW 109
6971: GO 6985
// SetTag ( i , 0 ) ;
6973: LD_VAR 0 1
6977: PPUSH
6978: LD_INT 0
6980: PPUSH
6981: CALL_OW 109
// continue ;
6985: GO 6802
// end ; if tag = tMine then
6987: LD_VAR 0 8
6991: PUSH
6992: LD_INT 6
6994: EQUAL
6995: IFFALSE 6999
// continue ;
6997: GO 6802
// if not IsInUnit ( i ) and not tag and empty then
6999: LD_VAR 0 1
7003: PPUSH
7004: CALL_OW 310
7008: NOT
7009: PUSH
7010: LD_VAR 0 8
7014: NOT
7015: AND
7016: PUSH
7017: LD_VAR 0 15
7021: AND
7022: IFFALSE 7060
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
7024: LD_VAR 0 1
7028: PPUSH
7029: LD_VAR 0 15
7033: PUSH
7034: LD_INT 1
7036: ARRAY
7037: PPUSH
7038: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
7042: LD_ADDR_VAR 0 15
7046: PUSH
7047: LD_VAR 0 15
7051: PPUSH
7052: LD_INT 1
7054: PPUSH
7055: CALL_OW 3
7059: ST_TO_ADDR
// end ; end ;
7060: GO 6802
7062: POP
7063: POP
// end ; end ; end ;
7064: PPOPN 16
7066: END
// every 0 0$1 trigger Count ( arEscapist ) do var i ;
7067: LD_EXP 56
7071: PPUSH
7072: CALL 56715 0 1
7076: IFFALSE 7221
7078: GO 7080
7080: DISABLE
7081: LD_INT 0
7083: PPUSH
// begin enable ;
7084: ENABLE
// for i in UnitFilter ( arEscapist , [ f_ok ] ) do
7085: LD_ADDR_VAR 0 1
7089: PUSH
7090: LD_EXP 56
7094: PPUSH
7095: LD_INT 50
7097: PUSH
7098: EMPTY
7099: LIST
7100: PPUSH
7101: CALL_OW 72
7105: PUSH
7106: FOR_IN
7107: IFFALSE 7219
// begin if not HasTask ( i ) then
7109: LD_VAR 0 1
7113: PPUSH
7114: CALL_OW 314
7118: NOT
7119: IFFALSE 7133
// AddComMoveToArea ( i , khatamArea ) ;
7121: LD_VAR 0 1
7125: PPUSH
7126: LD_INT 11
7128: PPUSH
7129: CALL_OW 173
// if IsInArea ( i , khatamArea ) then
7133: LD_VAR 0 1
7137: PPUSH
7138: LD_INT 11
7140: PPUSH
7141: CALL_OW 308
7145: IFFALSE 7217
// begin RemoveUnit ( i ) ;
7147: LD_VAR 0 1
7151: PPUSH
7152: CALL_OW 64
// arEscapist := arEscapist diff i ;
7156: LD_ADDR_EXP 56
7160: PUSH
7161: LD_EXP 56
7165: PUSH
7166: LD_VAR 0 1
7170: DIFF
7171: ST_TO_ADDR
// arabianEscapedCounter := Inc ( arabianEscapedCounter ) ;
7172: LD_ADDR_EXP 21
7176: PUSH
7177: LD_EXP 21
7181: PPUSH
7182: CALL 93665 0 1
7186: ST_TO_ADDR
// if i = Dietrich then
7187: LD_VAR 0 1
7191: PUSH
7192: LD_EXP 50
7196: EQUAL
7197: IFFALSE 7217
// begin gensherEscaped := true ;
7199: LD_ADDR_EXP 13
7203: PUSH
7204: LD_INT 1
7206: ST_TO_ADDR
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
7207: LD_INT 1
7209: PPUSH
7210: LD_STRING 10_GensherEscape_1
7212: PPUSH
7213: CALL_OW 39
// end ; end ; end ;
7217: GO 7106
7219: POP
7220: POP
// end ;
7221: PPOPN 1
7223: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ; var i , skill , un , veh ; begin
7224: LD_INT 0
7226: PPUSH
7227: PPUSH
7228: PPUSH
7229: PPUSH
7230: PPUSH
// uc_side := 5 ;
7231: LD_ADDR_OWVAR 20
7235: PUSH
7236: LD_INT 5
7238: ST_TO_ADDR
// uc_nation := nation_arabian ;
7239: LD_ADDR_OWVAR 21
7243: PUSH
7244: LD_INT 2
7246: ST_TO_ADDR
// skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
7247: LD_ADDR_VAR 0 3
7251: PUSH
7252: LD_INT 5
7254: PUSH
7255: LD_INT 6
7257: PUSH
7258: LD_INT 7
7260: PUSH
7261: LD_INT 8
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: PUSH
7270: LD_OWVAR 67
7274: ARRAY
7275: ST_TO_ADDR
// arAttackersInf := [ ] ;
7276: LD_ADDR_EXP 57
7280: PUSH
7281: EMPTY
7282: ST_TO_ADDR
// arAttackersVeh := [ ] ;
7283: LD_ADDR_EXP 58
7287: PUSH
7288: EMPTY
7289: ST_TO_ADDR
// InitHC_All ( ) ;
7290: CALL_OW 584
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
7294: LD_ADDR_VAR 0 2
7298: PUSH
7299: DOUBLE
7300: LD_INT 1
7302: DEC
7303: ST_TO_ADDR
7304: LD_INT 3
7306: PUSH
7307: LD_INT 4
7309: PUSH
7310: LD_INT 5
7312: PUSH
7313: LD_INT 6
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: PUSH
7322: LD_OWVAR 67
7326: ARRAY
7327: PUSH
7328: FOR_TO
7329: IFFALSE 7431
// begin PrepareSoldier ( false , skill ) ;
7331: LD_INT 0
7333: PPUSH
7334: LD_VAR 0 3
7338: PPUSH
7339: CALL_OW 381
// un := CreateHuman ;
7343: LD_ADDR_VAR 0 4
7347: PUSH
7348: CALL_OW 44
7352: ST_TO_ADDR
// if i mod 2 = 0 then
7353: LD_VAR 0 2
7357: PUSH
7358: LD_INT 2
7360: MOD
7361: PUSH
7362: LD_INT 0
7364: EQUAL
7365: IFFALSE 7379
// SetClass ( un , class_mortar ) ;
7367: LD_VAR 0 4
7371: PPUSH
7372: LD_INT 8
7374: PPUSH
7375: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
7379: LD_VAR 0 4
7383: PPUSH
7384: LD_INT 19
7386: PPUSH
7387: LD_INT 0
7389: PPUSH
7390: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
7394: LD_ADDR_EXP 57
7398: PUSH
7399: LD_EXP 57
7403: PPUSH
7404: LD_VAR 0 4
7408: PPUSH
7409: CALL 92304 0 2
7413: ST_TO_ADDR
// ComAgressiveMove ( un , 104 , 60 ) ;
7414: LD_VAR 0 4
7418: PPUSH
7419: LD_INT 104
7421: PPUSH
7422: LD_INT 60
7424: PPUSH
7425: CALL_OW 114
// end ;
7429: GO 7328
7431: POP
7432: POP
// for i := 1 to 3 do
7433: LD_ADDR_VAR 0 2
7437: PUSH
7438: DOUBLE
7439: LD_INT 1
7441: DEC
7442: ST_TO_ADDR
7443: LD_INT 3
7445: PUSH
7446: FOR_TO
7447: IFFALSE 7599
// begin PrepareMechanic ( false , skill ) ;
7449: LD_INT 0
7451: PPUSH
7452: LD_VAR 0 3
7456: PPUSH
7457: CALL_OW 383
// un := CreateHuman ;
7461: LD_ADDR_VAR 0 4
7465: PUSH
7466: CALL_OW 44
7470: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
7471: LD_INT 14
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: LD_INT 1
7479: PPUSH
7480: LD_INT 27
7482: PUSH
7483: LD_INT 25
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: PUSH
7490: LD_VAR 0 2
7494: PUSH
7495: LD_INT 2
7497: MOD
7498: PUSH
7499: LD_INT 1
7501: PLUS
7502: ARRAY
7503: PPUSH
7504: LD_INT 80
7506: PPUSH
7507: CALL 59453 0 5
// veh := CreateVehicle ;
7511: LD_ADDR_VAR 0 5
7515: PUSH
7516: CALL_OW 45
7520: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7521: LD_VAR 0 5
7525: PPUSH
7526: LD_INT 4
7528: PPUSH
7529: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7533: LD_VAR 0 5
7537: PPUSH
7538: LD_INT 18
7540: PPUSH
7541: LD_INT 0
7543: PPUSH
7544: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7548: LD_VAR 0 4
7552: PPUSH
7553: LD_VAR 0 5
7557: PPUSH
7558: CALL_OW 52
// ComMoveXY ( un , 129 , 20 ) ;
7562: LD_VAR 0 4
7566: PPUSH
7567: LD_INT 129
7569: PPUSH
7570: LD_INT 20
7572: PPUSH
7573: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7577: LD_ADDR_EXP 58
7581: PUSH
7582: LD_EXP 58
7586: PPUSH
7587: LD_VAR 0 5
7591: PPUSH
7592: CALL 92304 0 2
7596: ST_TO_ADDR
// end ;
7597: GO 7446
7599: POP
7600: POP
// wait ( 0 0$2 ) ;
7601: LD_INT 70
7603: PPUSH
7604: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
7608: LD_ADDR_VAR 0 2
7612: PUSH
7613: DOUBLE
7614: LD_INT 1
7616: DEC
7617: ST_TO_ADDR
7618: LD_INT 1
7620: PUSH
7621: LD_INT 2
7623: PUSH
7624: LD_INT 2
7626: PUSH
7627: LD_INT 3
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: LD_OWVAR 67
7640: ARRAY
7641: PUSH
7642: FOR_TO
7643: IFFALSE 7774
// begin PrepareMechanic ( false , skill ) ;
7645: LD_INT 0
7647: PPUSH
7648: LD_VAR 0 3
7652: PPUSH
7653: CALL_OW 383
// un := CreateHuman ;
7657: LD_ADDR_VAR 0 4
7661: PUSH
7662: CALL_OW 44
7666: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
7667: LD_INT 14
7669: PPUSH
7670: LD_INT 1
7672: PPUSH
7673: LD_INT 1
7675: PPUSH
7676: LD_INT 26
7678: PPUSH
7679: LD_INT 80
7681: PPUSH
7682: CALL 59453 0 5
// veh := CreateVehicle ;
7686: LD_ADDR_VAR 0 5
7690: PUSH
7691: CALL_OW 45
7695: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7696: LD_VAR 0 5
7700: PPUSH
7701: LD_INT 4
7703: PPUSH
7704: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7708: LD_VAR 0 5
7712: PPUSH
7713: LD_INT 18
7715: PPUSH
7716: LD_INT 0
7718: PPUSH
7719: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7723: LD_VAR 0 4
7727: PPUSH
7728: LD_VAR 0 5
7732: PPUSH
7733: CALL_OW 52
// ComMoveXY ( un , 133 , 40 ) ;
7737: LD_VAR 0 4
7741: PPUSH
7742: LD_INT 133
7744: PPUSH
7745: LD_INT 40
7747: PPUSH
7748: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7752: LD_ADDR_EXP 58
7756: PUSH
7757: LD_EXP 58
7761: PPUSH
7762: LD_VAR 0 5
7766: PPUSH
7767: CALL 92304 0 2
7771: ST_TO_ADDR
// end ;
7772: GO 7642
7774: POP
7775: POP
// wait ( 0 0$2 ) ;
7776: LD_INT 70
7778: PPUSH
7779: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
7783: LD_ADDR_VAR 0 2
7787: PUSH
7788: DOUBLE
7789: LD_INT 1
7791: DEC
7792: ST_TO_ADDR
7793: LD_INT 1
7795: PUSH
7796: LD_INT 2
7798: PUSH
7799: LD_INT 3
7801: PUSH
7802: LD_INT 4
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: PUSH
7811: LD_OWVAR 67
7815: ARRAY
7816: PUSH
7817: FOR_TO
7818: IFFALSE 7980
// begin PrepareMechanic ( false , skill ) ;
7820: LD_INT 0
7822: PPUSH
7823: LD_VAR 0 3
7827: PPUSH
7828: CALL_OW 383
// un := CreateHuman ;
7832: LD_ADDR_VAR 0 4
7836: PUSH
7837: CALL_OW 44
7841: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
7842: LD_INT 14
7844: PPUSH
7845: LD_INT 1
7847: PPUSH
7848: LD_INT 1
7850: PPUSH
7851: LD_INT 28
7853: PPUSH
7854: LD_INT 80
7856: PPUSH
7857: CALL 59453 0 5
// veh := CreateVehicle ;
7861: LD_ADDR_VAR 0 5
7865: PUSH
7866: CALL_OW 45
7870: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7871: LD_VAR 0 5
7875: PPUSH
7876: LD_INT 4
7878: PPUSH
7879: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7883: LD_VAR 0 5
7887: PPUSH
7888: LD_INT 18
7890: PPUSH
7891: LD_INT 0
7893: PPUSH
7894: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7898: LD_VAR 0 4
7902: PPUSH
7903: LD_VAR 0 5
7907: PPUSH
7908: CALL_OW 52
// if i mod 2 = 0 then
7912: LD_VAR 0 2
7916: PUSH
7917: LD_INT 2
7919: MOD
7920: PUSH
7921: LD_INT 0
7923: EQUAL
7924: IFFALSE 7943
// ComMoveXY ( un , 136 , 61 ) else
7926: LD_VAR 0 4
7930: PPUSH
7931: LD_INT 136
7933: PPUSH
7934: LD_INT 61
7936: PPUSH
7937: CALL_OW 111
7941: GO 7958
// ComMoveXY ( un , 137 , 41 ) ;
7943: LD_VAR 0 4
7947: PPUSH
7948: LD_INT 137
7950: PPUSH
7951: LD_INT 41
7953: PPUSH
7954: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7958: LD_ADDR_EXP 58
7962: PUSH
7963: LD_EXP 58
7967: PPUSH
7968: LD_VAR 0 5
7972: PPUSH
7973: CALL 92304 0 2
7977: ST_TO_ADDR
// end ;
7978: GO 7817
7980: POP
7981: POP
// arabianAttackSpawned := true ;
7982: LD_ADDR_EXP 12
7986: PUSH
7987: LD_INT 1
7989: ST_TO_ADDR
// end ;
7990: LD_VAR 0 1
7994: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest ;
7995: LD_EXP 57
7999: IFFALSE 8412
8001: GO 8003
8003: DISABLE
8004: LD_INT 0
8006: PPUSH
8007: PPUSH
8008: PPUSH
// begin wait ( 0 0$10 ) ;
8009: LD_INT 350
8011: PPUSH
8012: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
8016: LD_ADDR_VAR 0 2
8020: PUSH
8021: LD_EXP 57
8025: PPUSH
8026: LD_INT 25
8028: PUSH
8029: LD_INT 1
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: PUSH
8036: LD_INT 50
8038: PUSH
8039: EMPTY
8040: LIST
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PPUSH
8046: CALL_OW 72
8050: ST_TO_ADDR
// for i in tmp do
8051: LD_ADDR_VAR 0 1
8055: PUSH
8056: LD_VAR 0 2
8060: PUSH
8061: FOR_IN
8062: IFFALSE 8187
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
8064: LD_ADDR_VAR 0 3
8068: PUSH
8069: LD_INT 22
8071: PUSH
8072: LD_INT 1
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PUSH
8079: LD_INT 3
8081: PUSH
8082: LD_INT 120
8084: PUSH
8085: LD_INT 11
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PUSH
8096: LD_INT 2
8098: PUSH
8099: LD_INT 21
8101: PUSH
8102: LD_INT 2
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PUSH
8109: LD_INT 21
8111: PUSH
8112: LD_INT 3
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: LIST
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: LIST
8128: PPUSH
8129: CALL_OW 69
8133: PPUSH
8134: LD_VAR 0 1
8138: PPUSH
8139: CALL_OW 74
8143: ST_TO_ADDR
// if not nearest then
8144: LD_VAR 0 3
8148: NOT
8149: IFFALSE 8153
// break ;
8151: GO 8187
// SetTag ( nearest , tMined ) ;
8153: LD_VAR 0 3
8157: PPUSH
8158: LD_INT 11
8160: PPUSH
8161: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
8165: LD_VAR 0 1
8169: PPUSH
8170: LD_INT 0
8172: PPUSH
8173: LD_INT 0
8175: PPUSH
8176: LD_VAR 0 3
8180: PPUSH
8181: CALL_OW 132
// end ;
8185: GO 8061
8187: POP
8188: POP
// if hasBase and epsilon then
8189: LD_EXP 9
8193: PUSH
8194: LD_EXP 10
8198: AND
8199: IFFALSE 8223
// AddComPlaceDelayedCharge ( tmp , 0 , 0 , epsilon ) else
8201: LD_VAR 0 2
8205: PPUSH
8206: LD_INT 0
8208: PPUSH
8209: LD_INT 0
8211: PPUSH
8212: LD_EXP 10
8216: PPUSH
8217: CALL_OW 192
8221: GO 8238
// AddComMoveXY ( tmp , 107 , 59 ) ;
8223: LD_VAR 0 2
8227: PPUSH
8228: LD_INT 107
8230: PPUSH
8231: LD_INT 59
8233: PPUSH
8234: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8238: LD_INT 35
8240: PPUSH
8241: CALL_OW 67
// until IsDead ( Dietrich ) or gensherEscaped ;
8245: LD_EXP 50
8249: PPUSH
8250: CALL_OW 301
8254: PUSH
8255: LD_EXP 13
8259: OR
8260: IFFALSE 8238
// if not gensherEscaped then
8262: LD_EXP 13
8266: NOT
8267: IFFALSE 8276
// wait ( 1 1$20 ) ;
8269: LD_INT 2800
8271: PPUSH
8272: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
8276: LD_ADDR_VAR 0 2
8280: PUSH
8281: LD_EXP 57
8285: PPUSH
8286: LD_INT 50
8288: PUSH
8289: EMPTY
8290: LIST
8291: PPUSH
8292: CALL_OW 72
8296: ST_TO_ADDR
// ComMoveXY ( tmp , 143 , 117 ) ;
8297: LD_VAR 0 2
8301: PPUSH
8302: LD_INT 143
8304: PPUSH
8305: LD_INT 117
8307: PPUSH
8308: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8312: LD_INT 35
8314: PPUSH
8315: CALL_OW 67
// for i in tmp do
8319: LD_ADDR_VAR 0 1
8323: PUSH
8324: LD_VAR 0 2
8328: PUSH
8329: FOR_IN
8330: IFFALSE 8403
// if IsInArea ( i , arAttackSpawn2Area ) then
8332: LD_VAR 0 1
8336: PPUSH
8337: LD_INT 19
8339: PPUSH
8340: CALL_OW 308
8344: IFFALSE 8389
// begin tmp := tmp diff i ;
8346: LD_ADDR_VAR 0 2
8350: PUSH
8351: LD_VAR 0 2
8355: PUSH
8356: LD_VAR 0 1
8360: DIFF
8361: ST_TO_ADDR
// arAttackersInf := arAttackersInf diff i ;
8362: LD_ADDR_EXP 57
8366: PUSH
8367: LD_EXP 57
8371: PUSH
8372: LD_VAR 0 1
8376: DIFF
8377: ST_TO_ADDR
// RemoveUnit ( i ) ;
8378: LD_VAR 0 1
8382: PPUSH
8383: CALL_OW 64
// end else
8387: GO 8401
// ComMoveToArea ( i , arAttackSpawn2Area ) ;
8389: LD_VAR 0 1
8393: PPUSH
8394: LD_INT 19
8396: PPUSH
8397: CALL_OW 113
8401: GO 8329
8403: POP
8404: POP
// until not tmp ;
8405: LD_VAR 0 2
8409: NOT
8410: IFFALSE 8312
// end ;
8412: PPOPN 3
8414: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp , p ;
8415: LD_EXP 58
8419: IFFALSE 8703
8421: GO 8423
8423: DISABLE
8424: LD_INT 0
8426: PPUSH
8427: PPUSH
8428: PPUSH
// begin p := 0 ;
8429: LD_ADDR_VAR 0 3
8433: PUSH
8434: LD_INT 0
8436: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8437: LD_INT 35
8439: PPUSH
8440: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8444: LD_ADDR_VAR 0 2
8448: PUSH
8449: LD_EXP 58
8453: PPUSH
8454: LD_INT 50
8456: PUSH
8457: EMPTY
8458: LIST
8459: PPUSH
8460: CALL_OW 72
8464: ST_TO_ADDR
// for i in tmp do
8465: LD_ADDR_VAR 0 1
8469: PUSH
8470: LD_VAR 0 2
8474: PUSH
8475: FOR_IN
8476: IFFALSE 8513
// AgressiveMove ( i , [ [ 143 , 38 ] , [ 111 , 31 ] ] ) ;
8478: LD_VAR 0 1
8482: PPUSH
8483: LD_INT 143
8485: PUSH
8486: LD_INT 38
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PUSH
8493: LD_INT 111
8495: PUSH
8496: LD_INT 31
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PPUSH
8507: CALL 94908 0 2
8511: GO 8475
8513: POP
8514: POP
// if IsDead ( Dietrich ) then
8515: LD_EXP 50
8519: PPUSH
8520: CALL_OW 301
8524: IFFALSE 8541
// p := Inc ( p ) ;
8526: LD_ADDR_VAR 0 3
8530: PUSH
8531: LD_VAR 0 3
8535: PPUSH
8536: CALL 93665 0 1
8540: ST_TO_ADDR
// until not tmp or gensherEscaped or p > 40 ;
8541: LD_VAR 0 2
8545: NOT
8546: PUSH
8547: LD_EXP 13
8551: OR
8552: PUSH
8553: LD_VAR 0 3
8557: PUSH
8558: LD_INT 40
8560: GREATER
8561: OR
8562: IFFALSE 8437
// if not arAttackersVeh then
8564: LD_EXP 58
8568: NOT
8569: IFFALSE 8573
// exit ;
8571: GO 8703
// repeat wait ( 0 0$1 ) ;
8573: LD_INT 35
8575: PPUSH
8576: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8580: LD_ADDR_VAR 0 2
8584: PUSH
8585: LD_EXP 58
8589: PPUSH
8590: LD_INT 50
8592: PUSH
8593: EMPTY
8594: LIST
8595: PPUSH
8596: CALL_OW 72
8600: ST_TO_ADDR
// for i in tmp do
8601: LD_ADDR_VAR 0 1
8605: PUSH
8606: LD_VAR 0 2
8610: PUSH
8611: FOR_IN
8612: IFFALSE 8694
// if IsInArea ( i , arAttackSpawnArea ) then
8614: LD_VAR 0 1
8618: PPUSH
8619: LD_INT 18
8621: PPUSH
8622: CALL_OW 308
8626: IFFALSE 8680
// begin if IsInUnit ( i ) then
8628: LD_VAR 0 1
8632: PPUSH
8633: CALL_OW 310
8637: IFFALSE 8653
// RemoveUnit ( IsInUnit ( i ) ) ;
8639: LD_VAR 0 1
8643: PPUSH
8644: CALL_OW 310
8648: PPUSH
8649: CALL_OW 64
// RemoveUnit ( i ) ;
8653: LD_VAR 0 1
8657: PPUSH
8658: CALL_OW 64
// arAttackersVeh := arAttackersVeh diff i ;
8662: LD_ADDR_EXP 58
8666: PUSH
8667: LD_EXP 58
8671: PUSH
8672: LD_VAR 0 1
8676: DIFF
8677: ST_TO_ADDR
// end else
8678: GO 8692
// ComMoveToArea ( i , arAttackSpawnArea ) ;
8680: LD_VAR 0 1
8684: PPUSH
8685: LD_INT 18
8687: PPUSH
8688: CALL_OW 113
8692: GO 8611
8694: POP
8695: POP
// until not tmp ;
8696: LD_VAR 0 2
8700: NOT
8701: IFFALSE 8573
// end ; end_of_file
8703: PPOPN 3
8705: END
// export ruForces , ruForces2 , ruCommander , ruCommander2 , ruMech , ruMech2 ; export ruTech , ruBaseArea , ruBaseArea2 , ruBase , ruBase2 , ruConstructList , ruConstructList2 , ruCratesArea , ruCratesArea2 , ruHealPoint , ruHealPoint2 , ruBuildings , ruBuildings2 , ruTransportDestroyed , ruTanks , ruTanks2 , ruExtraTanks , ruParkingArea , ruParkingArea2 , ruCratesSpawnArea , ruCratesSpawnArea2 ; export function PrepareRussian ; var i , j , un , skill , sources ; begin
8706: LD_INT 0
8708: PPUSH
8709: PPUSH
8710: PPUSH
8711: PPUSH
8712: PPUSH
8713: PPUSH
// uc_side := 3 ;
8714: LD_ADDR_OWVAR 20
8718: PUSH
8719: LD_INT 3
8721: ST_TO_ADDR
// uc_nation := nation_russian ;
8722: LD_ADDR_OWVAR 21
8726: PUSH
8727: LD_INT 3
8729: ST_TO_ADDR
// ruForces := [ ] ;
8730: LD_ADDR_EXP 59
8734: PUSH
8735: EMPTY
8736: ST_TO_ADDR
// ruForces2 := [ ] ;
8737: LD_ADDR_EXP 60
8741: PUSH
8742: EMPTY
8743: ST_TO_ADDR
// ruMech := [ ] ;
8744: LD_ADDR_EXP 63
8748: PUSH
8749: EMPTY
8750: ST_TO_ADDR
// ruMech2 := [ ] ;
8751: LD_ADDR_EXP 64
8755: PUSH
8756: EMPTY
8757: ST_TO_ADDR
// ruTech := [ tech_LimTeleport , tech_ST1 , tech_Weap2 , tech_Sib1 ] ;
8758: LD_ADDR_EXP 65
8762: PUSH
8763: LD_INT 37
8765: PUSH
8766: LD_INT 63
8768: PUSH
8769: LD_INT 52
8771: PUSH
8772: LD_INT 54
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: ST_TO_ADDR
// ruBaseArea := 0 ;
8781: LD_ADDR_EXP 66
8785: PUSH
8786: LD_INT 0
8788: ST_TO_ADDR
// ruBaseArea2 := 0 ;
8789: LD_ADDR_EXP 67
8793: PUSH
8794: LD_INT 0
8796: ST_TO_ADDR
// ruBase := 0 ;
8797: LD_ADDR_EXP 68
8801: PUSH
8802: LD_INT 0
8804: ST_TO_ADDR
// ruBase2 := 0 ;
8805: LD_ADDR_EXP 69
8809: PUSH
8810: LD_INT 0
8812: ST_TO_ADDR
// ruConstructList := [ ] ;
8813: LD_ADDR_EXP 70
8817: PUSH
8818: EMPTY
8819: ST_TO_ADDR
// ruConstructList2 := [ [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ] ;
8820: LD_ADDR_EXP 71
8824: PUSH
8825: LD_INT 22
8827: PUSH
8828: LD_INT 3
8830: PUSH
8831: LD_INT 1
8833: PUSH
8834: LD_INT 43
8836: PUSH
8837: LD_INT 44
8839: PUSH
8840: LD_INT 45
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 1
8850: PPUSH
8851: LD_INT 3
8853: PPUSH
8854: CALL_OW 12
8858: ARRAY
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: PUSH
8866: LD_INT 22
8868: PUSH
8869: LD_INT 3
8871: PUSH
8872: LD_INT 1
8874: PUSH
8875: LD_INT 43
8877: PUSH
8878: LD_INT 44
8880: PUSH
8881: LD_INT 45
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: LIST
8888: PUSH
8889: LD_INT 1
8891: PPUSH
8892: LD_INT 3
8894: PPUSH
8895: CALL_OW 12
8899: ARRAY
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 22
8909: PUSH
8910: LD_INT 3
8912: PUSH
8913: LD_INT 1
8915: PUSH
8916: LD_INT 43
8918: PUSH
8919: LD_INT 44
8921: PUSH
8922: LD_INT 45
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 1
8932: PPUSH
8933: LD_INT 3
8935: PPUSH
8936: CALL_OW 12
8940: ARRAY
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: LIST
8952: ST_TO_ADDR
// ruCratesArea := 0 ;
8953: LD_ADDR_EXP 72
8957: PUSH
8958: LD_INT 0
8960: ST_TO_ADDR
// ruCratesArea2 := 0 ;
8961: LD_ADDR_EXP 73
8965: PUSH
8966: LD_INT 0
8968: ST_TO_ADDR
// ruHealPoint := [ ] ;
8969: LD_ADDR_EXP 74
8973: PUSH
8974: EMPTY
8975: ST_TO_ADDR
// ruHealPoint2 := [ ] ;
8976: LD_ADDR_EXP 75
8980: PUSH
8981: EMPTY
8982: ST_TO_ADDR
// ruBuildings := [ ] ;
8983: LD_ADDR_EXP 76
8987: PUSH
8988: EMPTY
8989: ST_TO_ADDR
// ruBuildings2 := [ ] ;
8990: LD_ADDR_EXP 77
8994: PUSH
8995: EMPTY
8996: ST_TO_ADDR
// ruTanks := [ ] ;
8997: LD_ADDR_EXP 79
9001: PUSH
9002: EMPTY
9003: ST_TO_ADDR
// ruTanks2 := [ ] ;
9004: LD_ADDR_EXP 80
9008: PUSH
9009: EMPTY
9010: ST_TO_ADDR
// ruParkingArea := 0 ;
9011: LD_ADDR_EXP 82
9015: PUSH
9016: LD_INT 0
9018: ST_TO_ADDR
// ruParkingArea2 := 0 ;
9019: LD_ADDR_EXP 83
9023: PUSH
9024: LD_INT 0
9026: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
9027: LD_ADDR_VAR 0 2
9031: PUSH
9032: DOUBLE
9033: LD_INT 1
9035: DEC
9036: ST_TO_ADDR
9037: LD_INT 2
9039: PUSH
9040: LD_INT 3
9042: PUSH
9043: LD_INT 4
9045: PUSH
9046: LD_INT 4
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: PUSH
9055: LD_OWVAR 67
9059: ARRAY
9060: PUSH
9061: FOR_TO
9062: IFFALSE 9122
// ruConstructList := Join ( ruConstructList , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
9064: LD_ADDR_EXP 70
9068: PUSH
9069: LD_EXP 70
9073: PPUSH
9074: LD_INT 22
9076: PUSH
9077: LD_INT 3
9079: PUSH
9080: LD_INT 1
9082: PUSH
9083: LD_INT 43
9085: PUSH
9086: LD_INT 44
9088: PUSH
9089: LD_INT 45
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: LIST
9096: PUSH
9097: LD_INT 1
9099: PPUSH
9100: LD_INT 3
9102: PPUSH
9103: CALL_OW 12
9107: ARRAY
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: PPUSH
9115: CALL 92304 0 2
9119: ST_TO_ADDR
9120: GO 9061
9122: POP
9123: POP
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
9124: LD_ADDR_VAR 0 6
9128: PUSH
9129: LD_INT 43
9131: PUSH
9132: LD_INT 68
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PUSH
9139: LD_INT 43
9141: PUSH
9142: LD_INT 79
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 99
9151: PUSH
9152: LD_INT 114
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: LD_INT 103
9161: PUSH
9162: LD_INT 114
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: PUSH
9169: LD_INT 156
9171: PUSH
9172: LD_INT 92
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: PUSH
9179: LD_INT 152
9181: PUSH
9182: LD_INT 85
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: ST_TO_ADDR
// for i in sources do
9197: LD_ADDR_VAR 0 2
9201: PUSH
9202: LD_VAR 0 6
9206: PUSH
9207: FOR_IN
9208: IFFALSE 9237
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
9210: LD_VAR 0 2
9214: PUSH
9215: LD_INT 1
9217: ARRAY
9218: PPUSH
9219: LD_VAR 0 2
9223: PUSH
9224: LD_INT 2
9226: ARRAY
9227: PPUSH
9228: LD_INT 3
9230: PPUSH
9231: CALL_OW 441
9235: GO 9207
9237: POP
9238: POP
// if Difficulty > 2 then
9239: LD_OWVAR 67
9243: PUSH
9244: LD_INT 2
9246: GREATER
9247: IFFALSE 9275
// begin SetTech ( tech_weap2 , 6 , state_researched ) ;
9249: LD_INT 52
9251: PPUSH
9252: LD_INT 6
9254: PPUSH
9255: LD_INT 2
9257: PPUSH
9258: CALL_OW 322
// SetTech ( tech_comp2 , 6 , state_researched ) ;
9262: LD_INT 58
9264: PPUSH
9265: LD_INT 6
9267: PPUSH
9268: LD_INT 2
9270: PPUSH
9271: CALL_OW 322
// end ; skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
9275: LD_ADDR_VAR 0 5
9279: PUSH
9280: LD_INT 5
9282: PUSH
9283: LD_INT 6
9285: PUSH
9286: LD_INT 7
9288: PUSH
9289: LD_INT 8
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: PUSH
9298: LD_OWVAR 67
9302: ARRAY
9303: ST_TO_ADDR
// ruCommander := PrepareUnit ( Tsaritsyn , false ,  ) ;
9304: LD_ADDR_EXP 61
9308: PUSH
9309: LD_STRING Tsaritsyn
9311: PPUSH
9312: LD_INT 0
9314: PPUSH
9315: LD_STRING 
9317: PPUSH
9318: CALL 54613 0 3
9322: ST_TO_ADDR
// for i := 1 to 4 do
9323: LD_ADDR_VAR 0 2
9327: PUSH
9328: DOUBLE
9329: LD_INT 1
9331: DEC
9332: ST_TO_ADDR
9333: LD_INT 4
9335: PUSH
9336: FOR_TO
9337: IFFALSE 9555
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9339: LD_ADDR_VAR 0 3
9343: PUSH
9344: DOUBLE
9345: LD_INT 1
9347: DEC
9348: ST_TO_ADDR
9349: LD_INT 5
9351: PUSH
9352: LD_INT 6
9354: PUSH
9355: LD_INT 8
9357: PUSH
9358: LD_INT 9
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: PUSH
9367: LD_OWVAR 67
9371: ARRAY
9372: PUSH
9373: LD_INT 3
9375: PUSH
9376: LD_INT 4
9378: PUSH
9379: LD_INT 5
9381: PUSH
9382: LD_INT 6
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: LD_OWVAR 67
9395: ARRAY
9396: PUSH
9397: LD_INT 3
9399: PUSH
9400: LD_INT 4
9402: PUSH
9403: LD_INT 5
9405: PUSH
9406: LD_INT 6
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: PUSH
9415: LD_OWVAR 67
9419: ARRAY
9420: PUSH
9421: LD_INT 2
9423: PUSH
9424: LD_INT 3
9426: PUSH
9427: LD_INT 3
9429: PUSH
9430: LD_INT 3
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: PUSH
9439: LD_OWVAR 67
9443: ARRAY
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: PUSH
9451: LD_VAR 0 2
9455: ARRAY
9456: PUSH
9457: FOR_TO
9458: IFFALSE 9551
// begin PrepareHuman ( false , i , skill ) ;
9460: LD_INT 0
9462: PPUSH
9463: LD_VAR 0 2
9467: PPUSH
9468: LD_VAR 0 5
9472: PPUSH
9473: CALL_OW 380
// un := CreateHuman ;
9477: LD_ADDR_VAR 0 4
9481: PUSH
9482: CALL_OW 44
9486: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
9487: LD_ADDR_EXP 59
9491: PUSH
9492: LD_EXP 59
9496: PPUSH
9497: LD_VAR 0 4
9501: PPUSH
9502: CALL 92304 0 2
9506: ST_TO_ADDR
// if i = 3 then
9507: LD_VAR 0 2
9511: PUSH
9512: LD_INT 3
9514: EQUAL
9515: IFFALSE 9549
// begin ruMech := Join ( ruMech , un ) ;
9517: LD_ADDR_EXP 63
9521: PUSH
9522: LD_EXP 63
9526: PPUSH
9527: LD_VAR 0 4
9531: PPUSH
9532: CALL 92304 0 2
9536: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9537: LD_VAR 0 4
9541: PPUSH
9542: LD_INT 1
9544: PPUSH
9545: CALL_OW 336
// end ; end ;
9549: GO 9457
9551: POP
9552: POP
9553: GO 9336
9555: POP
9556: POP
// if Difficulty < 4 then
9557: LD_OWVAR 67
9561: PUSH
9562: LD_INT 4
9564: LESS
9565: IFFALSE 9569
// exit ;
9567: GO 9841
// PrepareSoldier ( sex_male , skill + 1 ) ;
9569: LD_INT 1
9571: PPUSH
9572: LD_VAR 0 5
9576: PUSH
9577: LD_INT 1
9579: PLUS
9580: PPUSH
9581: CALL_OW 381
// hc_importance := 100 ;
9585: LD_ADDR_OWVAR 32
9589: PUSH
9590: LD_INT 100
9592: ST_TO_ADDR
// ruCommander2 := CreateHuman ;
9593: LD_ADDR_EXP 62
9597: PUSH
9598: CALL_OW 44
9602: ST_TO_ADDR
// InitHc_All ( ) ;
9603: CALL_OW 584
// for i := 1 to 4 do
9607: LD_ADDR_VAR 0 2
9611: PUSH
9612: DOUBLE
9613: LD_INT 1
9615: DEC
9616: ST_TO_ADDR
9617: LD_INT 4
9619: PUSH
9620: FOR_TO
9621: IFFALSE 9839
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9623: LD_ADDR_VAR 0 3
9627: PUSH
9628: DOUBLE
9629: LD_INT 1
9631: DEC
9632: ST_TO_ADDR
9633: LD_INT 5
9635: PUSH
9636: LD_INT 6
9638: PUSH
9639: LD_INT 8
9641: PUSH
9642: LD_INT 9
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: PUSH
9651: LD_OWVAR 67
9655: ARRAY
9656: PUSH
9657: LD_INT 3
9659: PUSH
9660: LD_INT 4
9662: PUSH
9663: LD_INT 5
9665: PUSH
9666: LD_INT 6
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: PUSH
9675: LD_OWVAR 67
9679: ARRAY
9680: PUSH
9681: LD_INT 3
9683: PUSH
9684: LD_INT 4
9686: PUSH
9687: LD_INT 5
9689: PUSH
9690: LD_INT 6
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: PUSH
9699: LD_OWVAR 67
9703: ARRAY
9704: PUSH
9705: LD_INT 2
9707: PUSH
9708: LD_INT 3
9710: PUSH
9711: LD_INT 3
9713: PUSH
9714: LD_INT 3
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: PUSH
9723: LD_OWVAR 67
9727: ARRAY
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: PUSH
9735: LD_VAR 0 2
9739: ARRAY
9740: PUSH
9741: FOR_TO
9742: IFFALSE 9835
// begin PrepareHuman ( false , i , skill ) ;
9744: LD_INT 0
9746: PPUSH
9747: LD_VAR 0 2
9751: PPUSH
9752: LD_VAR 0 5
9756: PPUSH
9757: CALL_OW 380
// un := CreateHuman ;
9761: LD_ADDR_VAR 0 4
9765: PUSH
9766: CALL_OW 44
9770: ST_TO_ADDR
// ruForces2 := Join ( ruForces2 , un ) ;
9771: LD_ADDR_EXP 60
9775: PUSH
9776: LD_EXP 60
9780: PPUSH
9781: LD_VAR 0 4
9785: PPUSH
9786: CALL 92304 0 2
9790: ST_TO_ADDR
// if i = 3 then
9791: LD_VAR 0 2
9795: PUSH
9796: LD_INT 3
9798: EQUAL
9799: IFFALSE 9833
// begin ruMech2 := Join ( ruMech2 , un ) ;
9801: LD_ADDR_EXP 64
9805: PUSH
9806: LD_EXP 64
9810: PPUSH
9811: LD_VAR 0 4
9815: PPUSH
9816: CALL 92304 0 2
9820: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9821: LD_VAR 0 4
9825: PPUSH
9826: LD_INT 1
9828: PPUSH
9829: CALL_OW 336
// end ; end ;
9833: GO 9741
9835: POP
9836: POP
9837: GO 9620
9839: POP
9840: POP
// end ;
9841: LD_VAR 0 1
9845: RET
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings ) < 3 do var i ;
9846: LD_EXP 66
9850: PPUSH
9851: LD_INT 30
9853: PUSH
9854: LD_INT 3
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: LD_INT 50
9863: PUSH
9864: EMPTY
9865: LIST
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PPUSH
9871: CALL_OW 70
9875: PUSH
9876: LD_EXP 76
9880: PPUSH
9881: CALL 56715 0 1
9885: PUSH
9886: LD_INT 3
9888: LESS
9889: AND
9890: IFFALSE 10154
9892: GO 9894
9894: DISABLE
9895: LD_INT 0
9897: PPUSH
// begin enable ;
9898: ENABLE
// ruConstructList := ruConstructList ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
9899: LD_ADDR_EXP 70
9903: PUSH
9904: LD_EXP 70
9908: PUSH
9909: LD_INT 22
9911: PUSH
9912: LD_INT 22
9914: PUSH
9915: LD_INT 24
9917: PUSH
9918: LD_INT 24
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: PUSH
9927: LD_OWVAR 67
9931: ARRAY
9932: PUSH
9933: LD_INT 1
9935: PUSH
9936: LD_INT 3
9938: PUSH
9939: LD_INT 44
9941: PUSH
9942: LD_INT 45
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: LD_INT 1
9951: PPUSH
9952: LD_INT 2
9954: PPUSH
9955: CALL_OW 12
9959: ARRAY
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 22
9969: PUSH
9970: LD_INT 22
9972: PUSH
9973: LD_INT 24
9975: PUSH
9976: LD_INT 24
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: PUSH
9985: LD_OWVAR 67
9989: ARRAY
9990: PUSH
9991: LD_INT 1
9993: PUSH
9994: LD_INT 3
9996: PUSH
9997: LD_INT 45
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: PUSH
10006: LD_INT 22
10008: PUSH
10009: LD_INT 22
10011: PUSH
10012: LD_INT 24
10014: PUSH
10015: LD_INT 24
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: PUSH
10024: LD_OWVAR 67
10028: ARRAY
10029: PUSH
10030: LD_INT 1
10032: PUSH
10033: LD_INT 3
10035: PUSH
10036: LD_INT 45
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: LIST
10049: ADD
10050: ST_TO_ADDR
// for i := Difficulty downto 1 do
10051: LD_ADDR_VAR 0 1
10055: PUSH
10056: DOUBLE
10057: LD_OWVAR 67
10061: INC
10062: ST_TO_ADDR
10063: LD_INT 1
10065: PUSH
10066: FOR_DOWNTO
10067: IFFALSE 10152
// ruConstructList := Join ( ruConstructList , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 4 ) ] ] ) ;
10069: LD_ADDR_EXP 70
10073: PUSH
10074: LD_EXP 70
10078: PPUSH
10079: LD_INT 22
10081: PUSH
10082: LD_INT 22
10084: PUSH
10085: LD_INT 24
10087: PUSH
10088: LD_INT 24
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: PUSH
10097: LD_OWVAR 67
10101: ARRAY
10102: PUSH
10103: LD_INT 1
10105: PUSH
10106: LD_INT 3
10108: PUSH
10109: LD_INT 44
10111: PUSH
10112: LD_INT 45
10114: PUSH
10115: LD_INT 45
10117: PUSH
10118: LD_INT 43
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: PUSH
10127: LD_INT 1
10129: PPUSH
10130: LD_INT 4
10132: PPUSH
10133: CALL_OW 12
10137: ARRAY
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: PPUSH
10145: CALL 92304 0 2
10149: ST_TO_ADDR
10150: GO 10066
10152: POP
10153: POP
// end ;
10154: PPOPN 1
10156: END
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea2 , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings2 ) < 3 do
10157: LD_EXP 67
10161: PPUSH
10162: LD_INT 30
10164: PUSH
10165: LD_INT 3
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 50
10174: PUSH
10175: EMPTY
10176: LIST
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PPUSH
10182: CALL_OW 70
10186: PUSH
10187: LD_EXP 77
10191: PPUSH
10192: CALL 56715 0 1
10196: PUSH
10197: LD_INT 3
10199: LESS
10200: AND
10201: IFFALSE 10396
10203: GO 10205
10205: DISABLE
// begin enable ;
10206: ENABLE
// ruConstructList2 := ruConstructList2 ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] ] ;
10207: LD_ADDR_EXP 71
10211: PUSH
10212: LD_EXP 71
10216: PUSH
10217: LD_INT 22
10219: PUSH
10220: LD_INT 22
10222: PUSH
10223: LD_INT 24
10225: PUSH
10226: LD_INT 24
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: PUSH
10235: LD_INT 1
10237: PPUSH
10238: LD_INT 4
10240: PPUSH
10241: CALL_OW 12
10245: ARRAY
10246: PUSH
10247: LD_INT 1
10249: PUSH
10250: LD_INT 3
10252: PUSH
10253: LD_INT 44
10255: PUSH
10256: LD_INT 45
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 1
10265: PPUSH
10266: LD_INT 2
10268: PPUSH
10269: CALL_OW 12
10273: ARRAY
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 22
10283: PUSH
10284: LD_INT 22
10286: PUSH
10287: LD_INT 24
10289: PUSH
10290: LD_INT 24
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 1
10301: PPUSH
10302: LD_INT 4
10304: PPUSH
10305: CALL_OW 12
10309: ARRAY
10310: PUSH
10311: LD_INT 1
10313: PUSH
10314: LD_INT 3
10316: PUSH
10317: LD_INT 45
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 22
10328: PUSH
10329: LD_INT 22
10331: PUSH
10332: LD_INT 24
10334: PUSH
10335: LD_INT 24
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: PUSH
10344: LD_INT 1
10346: PPUSH
10347: LD_INT 4
10349: PPUSH
10350: CALL_OW 12
10354: ARRAY
10355: PUSH
10356: LD_INT 1
10358: PUSH
10359: LD_INT 3
10361: PUSH
10362: LD_INT 45
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: PUSH
10371: LD_INT 22
10373: PUSH
10374: LD_INT 1
10376: PUSH
10377: LD_INT 3
10379: PUSH
10380: LD_INT 43
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: ADD
10395: ST_TO_ADDR
// end ;
10396: END
// export function SpawnConvoy ; var i , tmp , spawn , area , path , place , point ; begin
10397: LD_INT 0
10399: PPUSH
10400: PPUSH
10401: PPUSH
10402: PPUSH
10403: PPUSH
10404: PPUSH
10405: PPUSH
10406: PPUSH
// case Difficulty of 1 :
10407: LD_OWVAR 67
10411: PUSH
10412: LD_INT 1
10414: DOUBLE
10415: EQUAL
10416: IFTRUE 10420
10418: GO 10439
10420: POP
// spawn := rand ( 1 , 2 ) ; 2 :
10421: LD_ADDR_VAR 0 4
10425: PUSH
10426: LD_INT 1
10428: PPUSH
10429: LD_INT 2
10431: PPUSH
10432: CALL_OW 12
10436: ST_TO_ADDR
10437: GO 10513
10439: LD_INT 2
10441: DOUBLE
10442: EQUAL
10443: IFTRUE 10447
10445: GO 10466
10447: POP
// spawn := rand ( 1 , 3 ) ; 3 :
10448: LD_ADDR_VAR 0 4
10452: PUSH
10453: LD_INT 1
10455: PPUSH
10456: LD_INT 3
10458: PPUSH
10459: CALL_OW 12
10463: ST_TO_ADDR
10464: GO 10513
10466: LD_INT 3
10468: DOUBLE
10469: EQUAL
10470: IFTRUE 10474
10472: GO 10493
10474: POP
// spawn := rand ( 2 , 3 ) ; 4 :
10475: LD_ADDR_VAR 0 4
10479: PUSH
10480: LD_INT 2
10482: PPUSH
10483: LD_INT 3
10485: PPUSH
10486: CALL_OW 12
10490: ST_TO_ADDR
10491: GO 10513
10493: LD_INT 4
10495: DOUBLE
10496: EQUAL
10497: IFTRUE 10501
10499: GO 10512
10501: POP
// spawn := 3 ; end ;
10502: LD_ADDR_VAR 0 4
10506: PUSH
10507: LD_INT 3
10509: ST_TO_ADDR
10510: GO 10513
10512: POP
// path := [ centerPathArea , westPathArea , eastPathArea ] [ spawn ] ;
10513: LD_ADDR_VAR 0 6
10517: PUSH
10518: LD_INT 24
10520: PUSH
10521: LD_INT 25
10523: PUSH
10524: LD_INT 23
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: PUSH
10532: LD_VAR 0 4
10536: ARRAY
10537: ST_TO_ADDR
// area := [ ruSpawnCenterArea , ruSpawnWestArea , ruSpawnEastArea ] [ spawn ] ;
10538: LD_ADDR_VAR 0 5
10542: PUSH
10543: LD_INT 21
10545: PUSH
10546: LD_INT 22
10548: PUSH
10549: LD_INT 20
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: PUSH
10557: LD_VAR 0 4
10561: ARRAY
10562: ST_TO_ADDR
// point := [ [ 96 , 102 ] , [ 54 , 85 ] , [ 146 , 67 ] ] [ spawn ] ;
10563: LD_ADDR_VAR 0 8
10567: PUSH
10568: LD_INT 96
10570: PUSH
10571: LD_INT 102
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: LD_INT 54
10580: PUSH
10581: LD_INT 85
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: PUSH
10588: LD_INT 146
10590: PUSH
10591: LD_INT 67
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: LIST
10602: PUSH
10603: LD_VAR 0 4
10607: ARRAY
10608: ST_TO_ADDR
// for i in ruForces union ruCommander do
10609: LD_ADDR_VAR 0 2
10613: PUSH
10614: LD_EXP 59
10618: PUSH
10619: LD_EXP 61
10623: UNION
10624: PUSH
10625: FOR_IN
10626: IFFALSE 10681
// begin PlaceUnitArea ( i , area , false ) ;
10628: LD_VAR 0 2
10632: PPUSH
10633: LD_VAR 0 5
10637: PPUSH
10638: LD_INT 0
10640: PPUSH
10641: CALL_OW 49
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
10645: LD_VAR 0 2
10649: PPUSH
10650: LD_VAR 0 8
10654: PUSH
10655: LD_INT 1
10657: ARRAY
10658: PPUSH
10659: LD_VAR 0 8
10663: PUSH
10664: LD_INT 2
10666: ARRAY
10667: PPUSH
10668: CALL_OW 111
// wait ( 0 0$0.4 ) ;
10672: LD_INT 14
10674: PPUSH
10675: CALL_OW 67
// end ;
10679: GO 10625
10681: POP
10682: POP
// DRussianConvoy ;
10683: CALL 28498 0 0
// spawnedRussians := true ;
10687: LD_ADDR_EXP 19
10691: PUSH
10692: LD_INT 1
10694: ST_TO_ADDR
// RevealFogArea ( 1 , path ) ;
10695: LD_INT 1
10697: PPUSH
10698: LD_VAR 0 6
10702: PPUSH
10703: CALL_OW 332
// case spawn of 1 :
10707: LD_VAR 0 4
10711: PUSH
10712: LD_INT 1
10714: DOUBLE
10715: EQUAL
10716: IFTRUE 10720
10718: GO 10730
10720: POP
// RaiseSailEvent ( ERussianBaseC ) ; 2 :
10721: LD_INT 102
10723: PPUSH
10724: CALL_OW 427
10728: GO 10767
10730: LD_INT 2
10732: DOUBLE
10733: EQUAL
10734: IFTRUE 10738
10736: GO 10748
10738: POP
// RaiseSailEvent ( ERussianBaseW ) ; 3 :
10739: LD_INT 103
10741: PPUSH
10742: CALL_OW 427
10746: GO 10767
10748: LD_INT 3
10750: DOUBLE
10751: EQUAL
10752: IFTRUE 10756
10754: GO 10766
10756: POP
// RaiseSailEvent ( ERussianBaseE ) ; end ;
10757: LD_INT 104
10759: PPUSH
10760: CALL_OW 427
10764: GO 10767
10766: POP
// if Difficulty < 4 then
10767: LD_OWVAR 67
10771: PUSH
10772: LD_INT 4
10774: LESS
10775: IFFALSE 10779
// exit ;
10777: GO 10856
// RevealFogArea ( 1 , ruSpawnWestArea ) ;
10779: LD_INT 1
10781: PPUSH
10782: LD_INT 22
10784: PPUSH
10785: CALL_OW 332
// for i in ruForces2 union ruCommander2 do
10789: LD_ADDR_VAR 0 2
10793: PUSH
10794: LD_EXP 60
10798: PUSH
10799: LD_EXP 62
10803: UNION
10804: PUSH
10805: FOR_IN
10806: IFFALSE 10847
// begin PlaceUnitArea ( i , ruSpawnWestArea , false ) ;
10808: LD_VAR 0 2
10812: PPUSH
10813: LD_INT 22
10815: PPUSH
10816: LD_INT 0
10818: PPUSH
10819: CALL_OW 49
// ComAgressiveMove ( i , 54 , 85 ) ;
10823: LD_VAR 0 2
10827: PPUSH
10828: LD_INT 54
10830: PPUSH
10831: LD_INT 85
10833: PPUSH
10834: CALL_OW 114
// wait ( 0 0$0.8 ) ;
10838: LD_INT 28
10840: PPUSH
10841: CALL_OW 67
// end ;
10845: GO 10805
10847: POP
10848: POP
// RaiseSailEvent ( ERussianBaseW2 ) ;
10849: LD_INT 105
10851: PPUSH
10852: CALL_OW 427
// end ;
10856: LD_VAR 0 1
10860: RET
// export function RussianBase ( group , option ) ; begin
10861: LD_INT 0
10863: PPUSH
// case option of 1 :
10864: LD_VAR 0 2
10868: PUSH
10869: LD_INT 1
10871: DOUBLE
10872: EQUAL
10873: IFTRUE 10877
10875: GO 11333
10877: POP
// begin ruBaseArea := ruBaseCenterArea ;
10878: LD_ADDR_EXP 66
10882: PUSH
10883: LD_INT 26
10885: ST_TO_ADDR
// ruCratesArea := ruBaseCenterArea ;
10886: LD_ADDR_EXP 72
10890: PUSH
10891: LD_INT 26
10893: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
10894: LD_ADDR_EXP 76
10898: PUSH
10899: LD_INT 0
10901: PUSH
10902: LD_INT 104
10904: PUSH
10905: LD_INT 110
10907: PUSH
10908: LD_INT 5
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 4
10919: PUSH
10920: LD_INT 98
10922: PUSH
10923: LD_INT 90
10925: PUSH
10926: LD_INT 3
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 29
10937: PUSH
10938: LD_INT 103
10940: PUSH
10941: LD_INT 114
10943: PUSH
10944: LD_INT 2
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 30
10955: PUSH
10956: LD_INT 99
10958: PUSH
10959: LD_INT 114
10961: PUSH
10962: LD_INT 3
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 28
10973: PUSH
10974: LD_INT 100
10976: PUSH
10977: LD_INT 112
10979: PUSH
10980: LD_INT 1
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 2
10991: PUSH
10992: LD_INT 92
10994: PUSH
10995: LD_INT 101
10997: PUSH
10998: LD_INT 0
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 26
11009: PUSH
11010: LD_INT 97
11012: PUSH
11013: LD_INT 116
11015: PUSH
11016: LD_INT 5
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: PUSH
11025: LD_INT 17
11027: PUSH
11028: LD_INT 96
11030: PUSH
11031: LD_INT 101
11033: PUSH
11034: LD_INT 4
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 18
11045: PUSH
11046: LD_INT 88
11048: PUSH
11049: LD_INT 97
11051: PUSH
11052: LD_INT 2
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: PUSH
11061: LD_INT 26
11063: PUSH
11064: LD_INT 106
11066: PUSH
11067: LD_INT 92
11069: PUSH
11070: LD_INT 2
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: PUSH
11079: LD_INT 6
11081: PUSH
11082: LD_INT 93
11084: PUSH
11085: LD_INT 110
11087: PUSH
11088: LD_INT 0
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: PUSH
11097: LD_INT 21
11099: PUSH
11100: LD_INT 89
11102: PUSH
11103: LD_INT 101
11105: PUSH
11106: LD_INT 1
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: PUSH
11115: LD_INT 16
11117: PUSH
11118: LD_INT 95
11120: PUSH
11121: LD_INT 104
11123: PUSH
11124: LD_INT 4
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: PUSH
11133: LD_INT 24
11135: PUSH
11136: LD_INT 92
11138: PUSH
11139: LD_INT 105
11141: PUSH
11142: LD_INT 0
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 33
11153: PUSH
11154: LD_INT 88
11156: PUSH
11157: LD_INT 89
11159: PUSH
11160: LD_INT 2
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 33
11171: PUSH
11172: LD_INT 86
11174: PUSH
11175: LD_INT 90
11177: PUSH
11178: LD_INT 2
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 33
11189: PUSH
11190: LD_INT 85
11192: PUSH
11193: LD_INT 99
11195: PUSH
11196: LD_INT 2
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: PUSH
11205: LD_INT 33
11207: PUSH
11208: LD_INT 85
11210: PUSH
11211: LD_INT 107
11213: PUSH
11214: LD_INT 1
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: PUSH
11223: LD_INT 33
11225: PUSH
11226: LD_INT 105
11228: PUSH
11229: LD_INT 99
11231: PUSH
11232: LD_INT 1
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 33
11243: PUSH
11244: LD_INT 102
11246: PUSH
11247: LD_INT 92
11249: PUSH
11250: LD_INT 3
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: PUSH
11259: LD_INT 33
11261: PUSH
11262: LD_INT 105
11264: PUSH
11265: LD_INT 92
11267: PUSH
11268: LD_INT 2
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: ST_TO_ADDR
// ruHealPoint := [ 98 , 107 ] ;
11300: LD_ADDR_EXP 74
11304: PUSH
11305: LD_INT 98
11307: PUSH
11308: LD_INT 107
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: ST_TO_ADDR
// ruParkingArea := ruParkingCenterArea ;
11315: LD_ADDR_EXP 82
11319: PUSH
11320: LD_INT 30
11322: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnCenterArea ;
11323: LD_ADDR_EXP 84
11327: PUSH
11328: LD_INT 36
11330: ST_TO_ADDR
// end ; 2 :
11331: GO 12357
11333: LD_INT 2
11335: DOUBLE
11336: EQUAL
11337: IFTRUE 11341
11339: GO 11835
11341: POP
// begin ruBaseArea := ruBaseWestArea ;
11342: LD_ADDR_EXP 66
11346: PUSH
11347: LD_INT 28
11349: ST_TO_ADDR
// ruCratesArea := ruBaseWestArea ;
11350: LD_ADDR_EXP 72
11354: PUSH
11355: LD_INT 28
11357: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
11358: LD_ADDR_EXP 76
11362: PUSH
11363: LD_INT 0
11365: PUSH
11366: LD_INT 49
11368: PUSH
11369: LD_INT 74
11371: PUSH
11372: LD_INT 3
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: PUSH
11381: LD_INT 4
11383: PUSH
11384: LD_INT 73
11386: PUSH
11387: LD_INT 88
11389: PUSH
11390: LD_INT 5
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 4
11401: PUSH
11402: LD_INT 56
11404: PUSH
11405: LD_INT 62
11407: PUSH
11408: LD_INT 3
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: PUSH
11417: LD_INT 29
11419: PUSH
11420: LD_INT 43
11422: PUSH
11423: LD_INT 68
11425: PUSH
11426: LD_INT 2
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 30
11437: PUSH
11438: LD_INT 43
11440: PUSH
11441: LD_INT 79
11443: PUSH
11444: LD_INT 5
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: PUSH
11453: LD_INT 28
11455: PUSH
11456: LD_INT 60
11458: PUSH
11459: LD_INT 75
11461: PUSH
11462: LD_INT 1
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: PUSH
11471: LD_INT 2
11473: PUSH
11474: LD_INT 50
11476: PUSH
11477: LD_INT 87
11479: PUSH
11480: LD_INT 1
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 26
11491: PUSH
11492: LD_INT 45
11494: PUSH
11495: LD_INT 67
11497: PUSH
11498: LD_INT 2
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 17
11509: PUSH
11510: LD_INT 47
11512: PUSH
11513: LD_INT 84
11515: PUSH
11516: LD_INT 2
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: PUSH
11525: LD_INT 18
11527: PUSH
11528: LD_INT 46
11530: PUSH
11531: LD_INT 87
11533: PUSH
11534: LD_INT 1
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 26
11545: PUSH
11546: LD_INT 41
11548: PUSH
11549: LD_INT 64
11551: PUSH
11552: LD_INT 5
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 6
11563: PUSH
11564: LD_INT 42
11566: PUSH
11567: LD_INT 74
11569: PUSH
11570: LD_INT 1
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 21
11581: PUSH
11582: LD_INT 54
11584: PUSH
11585: LD_INT 91
11587: PUSH
11588: LD_INT 5
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 16
11599: PUSH
11600: LD_INT 50
11602: PUSH
11603: LD_INT 83
11605: PUSH
11606: LD_INT 3
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 24
11617: PUSH
11618: LD_INT 50
11620: PUSH
11621: LD_INT 90
11623: PUSH
11624: LD_INT 0
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: PUSH
11633: LD_INT 33
11635: PUSH
11636: LD_INT 51
11638: PUSH
11639: LD_INT 61
11641: PUSH
11642: LD_INT 3
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 33
11653: PUSH
11654: LD_INT 42
11656: PUSH
11657: LD_INT 60
11659: PUSH
11660: LD_INT 3
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 33
11671: PUSH
11672: LD_INT 36
11674: PUSH
11675: LD_INT 58
11677: PUSH
11678: LD_INT 3
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 33
11689: PUSH
11690: LD_INT 39
11692: PUSH
11693: LD_INT 59
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: PUSH
11705: LD_INT 33
11707: PUSH
11708: LD_INT 61
11710: PUSH
11711: LD_INT 64
11713: PUSH
11714: LD_INT 3
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 33
11725: PUSH
11726: LD_INT 63
11728: PUSH
11729: LD_INT 90
11731: PUSH
11732: LD_INT 5
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 33
11743: PUSH
11744: LD_INT 64
11746: PUSH
11747: LD_INT 88
11749: PUSH
11750: LD_INT 5
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: PUSH
11759: LD_INT 33
11761: PUSH
11762: LD_INT 72
11764: PUSH
11765: LD_INT 82
11767: PUSH
11768: LD_INT 5
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
11802: LD_ADDR_EXP 74
11806: PUSH
11807: LD_INT 45
11809: PUSH
11810: LD_INT 75
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: ST_TO_ADDR
// ruParkingArea := ruParkingWestArea ;
11817: LD_ADDR_EXP 82
11821: PUSH
11822: LD_INT 31
11824: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnWestArea ;
11825: LD_ADDR_EXP 84
11829: PUSH
11830: LD_INT 37
11832: ST_TO_ADDR
// end ; 3 :
11833: GO 12357
11835: LD_INT 3
11837: DOUBLE
11838: EQUAL
11839: IFTRUE 11843
11841: GO 12356
11843: POP
// begin ruBaseArea := ruBaseEastArea ;
11844: LD_ADDR_EXP 66
11848: PUSH
11849: LD_INT 27
11851: ST_TO_ADDR
// ruCratesArea := ruBaseEastArea ;
11852: LD_ADDR_EXP 72
11856: PUSH
11857: LD_INT 27
11859: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] , [ b_turret , 158 , 65 , 3 ] , [ b_turret , 144 , 53 , 2 ] , [ b_turret , 150 , 81 , 1 ] ] ;
11860: LD_ADDR_EXP 76
11864: PUSH
11865: LD_INT 0
11867: PUSH
11868: LD_INT 152
11870: PUSH
11871: LD_INT 72
11873: PUSH
11874: LD_INT 4
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: PUSH
11883: LD_INT 4
11885: PUSH
11886: LD_INT 139
11888: PUSH
11889: LD_INT 69
11891: PUSH
11892: LD_INT 1
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: PUSH
11901: LD_INT 4
11903: PUSH
11904: LD_INT 142
11906: PUSH
11907: LD_INT 56
11909: PUSH
11910: LD_INT 2
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 29
11921: PUSH
11922: LD_INT 152
11924: PUSH
11925: LD_INT 85
11927: PUSH
11928: LD_INT 3
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: PUSH
11937: LD_INT 30
11939: PUSH
11940: LD_INT 156
11942: PUSH
11943: LD_INT 92
11945: PUSH
11946: LD_INT 3
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 28
11957: PUSH
11958: LD_INT 157
11960: PUSH
11961: LD_INT 96
11963: PUSH
11964: LD_INT 4
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 2
11975: PUSH
11976: LD_INT 161
11978: PUSH
11979: LD_INT 74
11981: PUSH
11982: LD_INT 5
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: PUSH
11991: LD_INT 21
11993: PUSH
11994: LD_INT 157
11996: PUSH
11997: LD_INT 74
11999: PUSH
12000: LD_INT 1
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 16
12011: PUSH
12012: LD_INT 161
12014: PUSH
12015: LD_INT 77
12017: PUSH
12018: LD_INT 0
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: PUSH
12027: LD_INT 24
12029: PUSH
12030: LD_INT 165
12032: PUSH
12033: LD_INT 78
12035: PUSH
12036: LD_INT 5
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 17
12047: PUSH
12048: LD_INT 164
12050: PUSH
12051: LD_INT 74
12053: PUSH
12054: LD_INT 4
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 6
12065: PUSH
12066: LD_INT 164
12068: PUSH
12069: LD_INT 95
12071: PUSH
12072: LD_INT 5
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 18
12083: PUSH
12084: LD_INT 161
12086: PUSH
12087: LD_INT 70
12089: PUSH
12090: LD_INT 3
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: PUSH
12099: LD_INT 26
12101: PUSH
12102: LD_INT 155
12104: PUSH
12105: LD_INT 87
12107: PUSH
12108: LD_INT 0
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: PUSH
12117: LD_INT 26
12119: PUSH
12120: LD_INT 159
12122: PUSH
12123: LD_INT 95
12125: PUSH
12126: LD_INT 3
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: PUSH
12135: LD_INT 26
12137: PUSH
12138: LD_INT 167
12140: PUSH
12141: LD_INT 98
12143: PUSH
12144: LD_INT 1
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 33
12155: PUSH
12156: LD_INT 152
12158: PUSH
12159: LD_INT 89
12161: PUSH
12162: LD_INT 1
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 33
12173: PUSH
12174: LD_INT 134
12176: PUSH
12177: LD_INT 61
12179: PUSH
12180: LD_INT 2
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 33
12191: PUSH
12192: LD_INT 156
12194: PUSH
12195: LD_INT 62
12197: PUSH
12198: LD_INT 3
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: PUSH
12207: LD_INT 33
12209: PUSH
12210: LD_INT 171
12212: PUSH
12213: LD_INT 97
12215: PUSH
12216: LD_INT 5
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: PUSH
12225: LD_INT 33
12227: PUSH
12228: LD_INT 169
12230: PUSH
12231: LD_INT 103
12233: PUSH
12234: LD_INT 5
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 33
12245: PUSH
12246: LD_INT 158
12248: PUSH
12249: LD_INT 65
12251: PUSH
12252: LD_INT 3
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: PUSH
12261: LD_INT 33
12263: PUSH
12264: LD_INT 144
12266: PUSH
12267: LD_INT 53
12269: PUSH
12270: LD_INT 2
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: PUSH
12279: LD_INT 33
12281: PUSH
12282: LD_INT 150
12284: PUSH
12285: LD_INT 81
12287: PUSH
12288: LD_INT 1
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: ST_TO_ADDR
// ruHealPoint := [ 145 , 71 ] ;
12323: LD_ADDR_EXP 74
12327: PUSH
12328: LD_INT 145
12330: PUSH
12331: LD_INT 71
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: ST_TO_ADDR
// ruParkingArea := ruParkingEastArea ;
12338: LD_ADDR_EXP 82
12342: PUSH
12343: LD_INT 29
12345: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnEastArea ;
12346: LD_ADDR_EXP 84
12350: PUSH
12351: LD_INT 35
12353: ST_TO_ADDR
// end ; end ;
12354: GO 12357
12356: POP
// ruScriptActive := true ;
12357: LD_ADDR_EXP 14
12361: PUSH
12362: LD_INT 1
12364: ST_TO_ADDR
// end ;
12365: LD_VAR 0 3
12369: RET
// export function RussianBase2 ( group , option ) ; begin
12370: LD_INT 0
12372: PPUSH
// case option of 1 :
12373: LD_VAR 0 2
12377: PUSH
12378: LD_INT 1
12380: DOUBLE
12381: EQUAL
12382: IFTRUE 12386
12384: GO 12842
12386: POP
// begin ruBaseArea2 := ruBaseCenterArea ;
12387: LD_ADDR_EXP 67
12391: PUSH
12392: LD_INT 26
12394: ST_TO_ADDR
// ruCratesArea2 := ruBaseCenterArea ;
12395: LD_ADDR_EXP 73
12399: PUSH
12400: LD_INT 26
12402: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
12403: LD_ADDR_EXP 77
12407: PUSH
12408: LD_INT 0
12410: PUSH
12411: LD_INT 104
12413: PUSH
12414: LD_INT 110
12416: PUSH
12417: LD_INT 5
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: PUSH
12426: LD_INT 4
12428: PUSH
12429: LD_INT 98
12431: PUSH
12432: LD_INT 90
12434: PUSH
12435: LD_INT 3
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 29
12446: PUSH
12447: LD_INT 103
12449: PUSH
12450: LD_INT 114
12452: PUSH
12453: LD_INT 2
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 30
12464: PUSH
12465: LD_INT 99
12467: PUSH
12468: LD_INT 114
12470: PUSH
12471: LD_INT 3
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 28
12482: PUSH
12483: LD_INT 100
12485: PUSH
12486: LD_INT 112
12488: PUSH
12489: LD_INT 1
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: PUSH
12498: LD_INT 2
12500: PUSH
12501: LD_INT 92
12503: PUSH
12504: LD_INT 101
12506: PUSH
12507: LD_INT 0
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: PUSH
12516: LD_INT 26
12518: PUSH
12519: LD_INT 97
12521: PUSH
12522: LD_INT 116
12524: PUSH
12525: LD_INT 5
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 17
12536: PUSH
12537: LD_INT 96
12539: PUSH
12540: LD_INT 101
12542: PUSH
12543: LD_INT 4
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: PUSH
12552: LD_INT 18
12554: PUSH
12555: LD_INT 88
12557: PUSH
12558: LD_INT 97
12560: PUSH
12561: LD_INT 2
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: PUSH
12570: LD_INT 26
12572: PUSH
12573: LD_INT 106
12575: PUSH
12576: LD_INT 92
12578: PUSH
12579: LD_INT 2
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: PUSH
12588: LD_INT 6
12590: PUSH
12591: LD_INT 93
12593: PUSH
12594: LD_INT 110
12596: PUSH
12597: LD_INT 0
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: PUSH
12606: LD_INT 21
12608: PUSH
12609: LD_INT 89
12611: PUSH
12612: LD_INT 101
12614: PUSH
12615: LD_INT 1
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: PUSH
12624: LD_INT 16
12626: PUSH
12627: LD_INT 95
12629: PUSH
12630: LD_INT 104
12632: PUSH
12633: LD_INT 4
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 24
12644: PUSH
12645: LD_INT 92
12647: PUSH
12648: LD_INT 105
12650: PUSH
12651: LD_INT 0
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: PUSH
12660: LD_INT 33
12662: PUSH
12663: LD_INT 88
12665: PUSH
12666: LD_INT 89
12668: PUSH
12669: LD_INT 2
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: PUSH
12678: LD_INT 33
12680: PUSH
12681: LD_INT 86
12683: PUSH
12684: LD_INT 90
12686: PUSH
12687: LD_INT 2
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: PUSH
12696: LD_INT 33
12698: PUSH
12699: LD_INT 85
12701: PUSH
12702: LD_INT 99
12704: PUSH
12705: LD_INT 2
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: PUSH
12714: LD_INT 33
12716: PUSH
12717: LD_INT 85
12719: PUSH
12720: LD_INT 107
12722: PUSH
12723: LD_INT 1
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: PUSH
12732: LD_INT 33
12734: PUSH
12735: LD_INT 105
12737: PUSH
12738: LD_INT 99
12740: PUSH
12741: LD_INT 1
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: PUSH
12750: LD_INT 33
12752: PUSH
12753: LD_INT 102
12755: PUSH
12756: LD_INT 92
12758: PUSH
12759: LD_INT 3
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: PUSH
12768: LD_INT 33
12770: PUSH
12771: LD_INT 105
12773: PUSH
12774: LD_INT 92
12776: PUSH
12777: LD_INT 2
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: ST_TO_ADDR
// ruHealPoint2 := [ 98 , 107 ] ;
12809: LD_ADDR_EXP 75
12813: PUSH
12814: LD_INT 98
12816: PUSH
12817: LD_INT 107
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: ST_TO_ADDR
// ruParkingArea2 := ruParkingCenterArea ;
12824: LD_ADDR_EXP 83
12828: PUSH
12829: LD_INT 30
12831: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnCenterArea ;
12832: LD_ADDR_EXP 85
12836: PUSH
12837: LD_INT 36
12839: ST_TO_ADDR
// end ; 2 :
12840: GO 13809
12842: LD_INT 2
12844: DOUBLE
12845: EQUAL
12846: IFTRUE 12850
12848: GO 13344
12850: POP
// begin ruBaseArea2 := ruBaseWestArea ;
12851: LD_ADDR_EXP 67
12855: PUSH
12856: LD_INT 28
12858: ST_TO_ADDR
// ruCratesArea2 := ruBaseWestArea ;
12859: LD_ADDR_EXP 73
12863: PUSH
12864: LD_INT 28
12866: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
12867: LD_ADDR_EXP 77
12871: PUSH
12872: LD_INT 0
12874: PUSH
12875: LD_INT 49
12877: PUSH
12878: LD_INT 74
12880: PUSH
12881: LD_INT 3
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 4
12892: PUSH
12893: LD_INT 73
12895: PUSH
12896: LD_INT 88
12898: PUSH
12899: LD_INT 5
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 4
12910: PUSH
12911: LD_INT 56
12913: PUSH
12914: LD_INT 62
12916: PUSH
12917: LD_INT 3
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 29
12928: PUSH
12929: LD_INT 43
12931: PUSH
12932: LD_INT 68
12934: PUSH
12935: LD_INT 2
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 30
12946: PUSH
12947: LD_INT 43
12949: PUSH
12950: LD_INT 79
12952: PUSH
12953: LD_INT 5
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 28
12964: PUSH
12965: LD_INT 60
12967: PUSH
12968: LD_INT 75
12970: PUSH
12971: LD_INT 1
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: PUSH
12980: LD_INT 2
12982: PUSH
12983: LD_INT 50
12985: PUSH
12986: LD_INT 87
12988: PUSH
12989: LD_INT 1
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 26
13000: PUSH
13001: LD_INT 45
13003: PUSH
13004: LD_INT 67
13006: PUSH
13007: LD_INT 2
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 17
13018: PUSH
13019: LD_INT 47
13021: PUSH
13022: LD_INT 84
13024: PUSH
13025: LD_INT 2
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: PUSH
13034: LD_INT 18
13036: PUSH
13037: LD_INT 46
13039: PUSH
13040: LD_INT 87
13042: PUSH
13043: LD_INT 1
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 26
13054: PUSH
13055: LD_INT 41
13057: PUSH
13058: LD_INT 64
13060: PUSH
13061: LD_INT 5
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 6
13072: PUSH
13073: LD_INT 42
13075: PUSH
13076: LD_INT 74
13078: PUSH
13079: LD_INT 1
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: PUSH
13088: LD_INT 21
13090: PUSH
13091: LD_INT 54
13093: PUSH
13094: LD_INT 91
13096: PUSH
13097: LD_INT 5
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: PUSH
13106: LD_INT 16
13108: PUSH
13109: LD_INT 50
13111: PUSH
13112: LD_INT 83
13114: PUSH
13115: LD_INT 3
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 24
13126: PUSH
13127: LD_INT 50
13129: PUSH
13130: LD_INT 90
13132: PUSH
13133: LD_INT 0
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: PUSH
13142: LD_INT 33
13144: PUSH
13145: LD_INT 51
13147: PUSH
13148: LD_INT 61
13150: PUSH
13151: LD_INT 3
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 33
13162: PUSH
13163: LD_INT 42
13165: PUSH
13166: LD_INT 60
13168: PUSH
13169: LD_INT 3
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 33
13180: PUSH
13181: LD_INT 36
13183: PUSH
13184: LD_INT 58
13186: PUSH
13187: LD_INT 3
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 33
13198: PUSH
13199: LD_INT 39
13201: PUSH
13202: LD_INT 59
13204: PUSH
13205: LD_INT 3
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 33
13216: PUSH
13217: LD_INT 61
13219: PUSH
13220: LD_INT 64
13222: PUSH
13223: LD_INT 3
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: PUSH
13232: LD_INT 33
13234: PUSH
13235: LD_INT 63
13237: PUSH
13238: LD_INT 90
13240: PUSH
13241: LD_INT 5
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 33
13252: PUSH
13253: LD_INT 64
13255: PUSH
13256: LD_INT 88
13258: PUSH
13259: LD_INT 5
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 33
13270: PUSH
13271: LD_INT 72
13273: PUSH
13274: LD_INT 82
13276: PUSH
13277: LD_INT 5
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
13311: LD_ADDR_EXP 74
13315: PUSH
13316: LD_INT 45
13318: PUSH
13319: LD_INT 75
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: ST_TO_ADDR
// ruParkingArea2 := ruParkingWestArea ;
13326: LD_ADDR_EXP 83
13330: PUSH
13331: LD_INT 31
13333: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnWestArea ;
13334: LD_ADDR_EXP 85
13338: PUSH
13339: LD_INT 37
13341: ST_TO_ADDR
// end ; 3 :
13342: GO 13809
13344: LD_INT 3
13346: DOUBLE
13347: EQUAL
13348: IFTRUE 13352
13350: GO 13808
13352: POP
// begin ruBaseArea2 := ruBaseEastArea ;
13353: LD_ADDR_EXP 67
13357: PUSH
13358: LD_INT 27
13360: ST_TO_ADDR
// ruCratesArea2 := ruBaseEastArea ;
13361: LD_ADDR_EXP 73
13365: PUSH
13366: LD_INT 27
13368: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] ] ;
13369: LD_ADDR_EXP 77
13373: PUSH
13374: LD_INT 0
13376: PUSH
13377: LD_INT 152
13379: PUSH
13380: LD_INT 72
13382: PUSH
13383: LD_INT 4
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 4
13394: PUSH
13395: LD_INT 139
13397: PUSH
13398: LD_INT 69
13400: PUSH
13401: LD_INT 1
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: PUSH
13410: LD_INT 4
13412: PUSH
13413: LD_INT 142
13415: PUSH
13416: LD_INT 56
13418: PUSH
13419: LD_INT 2
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: PUSH
13428: LD_INT 29
13430: PUSH
13431: LD_INT 152
13433: PUSH
13434: LD_INT 85
13436: PUSH
13437: LD_INT 3
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 30
13448: PUSH
13449: LD_INT 156
13451: PUSH
13452: LD_INT 92
13454: PUSH
13455: LD_INT 3
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 28
13466: PUSH
13467: LD_INT 157
13469: PUSH
13470: LD_INT 96
13472: PUSH
13473: LD_INT 4
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: PUSH
13482: LD_INT 2
13484: PUSH
13485: LD_INT 161
13487: PUSH
13488: LD_INT 74
13490: PUSH
13491: LD_INT 5
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 21
13502: PUSH
13503: LD_INT 157
13505: PUSH
13506: LD_INT 74
13508: PUSH
13509: LD_INT 1
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 16
13520: PUSH
13521: LD_INT 161
13523: PUSH
13524: LD_INT 77
13526: PUSH
13527: LD_INT 0
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: PUSH
13536: LD_INT 24
13538: PUSH
13539: LD_INT 165
13541: PUSH
13542: LD_INT 78
13544: PUSH
13545: LD_INT 5
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 17
13556: PUSH
13557: LD_INT 164
13559: PUSH
13560: LD_INT 74
13562: PUSH
13563: LD_INT 4
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: PUSH
13572: LD_INT 6
13574: PUSH
13575: LD_INT 164
13577: PUSH
13578: LD_INT 95
13580: PUSH
13581: LD_INT 5
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 18
13592: PUSH
13593: LD_INT 161
13595: PUSH
13596: LD_INT 70
13598: PUSH
13599: LD_INT 3
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: PUSH
13608: LD_INT 26
13610: PUSH
13611: LD_INT 155
13613: PUSH
13614: LD_INT 87
13616: PUSH
13617: LD_INT 0
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 26
13628: PUSH
13629: LD_INT 159
13631: PUSH
13632: LD_INT 95
13634: PUSH
13635: LD_INT 3
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: PUSH
13644: LD_INT 26
13646: PUSH
13647: LD_INT 167
13649: PUSH
13650: LD_INT 98
13652: PUSH
13653: LD_INT 1
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 33
13664: PUSH
13665: LD_INT 152
13667: PUSH
13668: LD_INT 89
13670: PUSH
13671: LD_INT 1
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: PUSH
13680: LD_INT 33
13682: PUSH
13683: LD_INT 134
13685: PUSH
13686: LD_INT 61
13688: PUSH
13689: LD_INT 2
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: PUSH
13698: LD_INT 33
13700: PUSH
13701: LD_INT 156
13703: PUSH
13704: LD_INT 62
13706: PUSH
13707: LD_INT 3
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 33
13718: PUSH
13719: LD_INT 171
13721: PUSH
13722: LD_INT 97
13724: PUSH
13725: LD_INT 5
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: PUSH
13734: LD_INT 33
13736: PUSH
13737: LD_INT 169
13739: PUSH
13740: LD_INT 103
13742: PUSH
13743: LD_INT 5
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: ST_TO_ADDR
// ruHealPoint2 := [ 145 , 71 ] ;
13775: LD_ADDR_EXP 75
13779: PUSH
13780: LD_INT 145
13782: PUSH
13783: LD_INT 71
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: ST_TO_ADDR
// ruParkingArea2 := ruParkingEastArea ;
13790: LD_ADDR_EXP 83
13794: PUSH
13795: LD_INT 29
13797: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnEastArea ;
13798: LD_ADDR_EXP 85
13802: PUSH
13803: LD_INT 35
13805: ST_TO_ADDR
// end ; end ;
13806: GO 13809
13808: POP
// ruScriptActive2 := true ;
13809: LD_ADDR_EXP 15
13813: PUSH
13814: LD_INT 1
13816: ST_TO_ADDR
// end ;
13817: LD_VAR 0 3
13821: RET
// every 0 0$2 trigger ruScriptActive and Count ( ruForces ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
13822: LD_EXP 14
13826: PUSH
13827: LD_EXP 59
13831: PPUSH
13832: CALL 56715 0 1
13836: AND
13837: IFFALSE 16419
13839: GO 13841
13841: DISABLE
13842: LD_INT 0
13844: PPUSH
13845: PPUSH
13846: PPUSH
13847: PPUSH
13848: PPUSH
13849: PPUSH
13850: PPUSH
13851: PPUSH
13852: PPUSH
13853: PPUSH
13854: PPUSH
13855: PPUSH
13856: PPUSH
13857: PPUSH
13858: PPUSH
13859: PPUSH
// begin enable ;
13860: ENABLE
// if ruTech then
13861: LD_EXP 65
13865: IFFALSE 14019
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
13867: LD_ADDR_VAR 0 4
13871: PUSH
13872: LD_INT 22
13874: PUSH
13875: LD_INT 3
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 50
13884: PUSH
13885: EMPTY
13886: LIST
13887: PUSH
13888: LD_INT 2
13890: PUSH
13891: LD_INT 30
13893: PUSH
13894: LD_INT 6
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: LD_INT 30
13903: PUSH
13904: LD_INT 7
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 30
13913: PUSH
13914: LD_INT 8
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: LIST
13931: PPUSH
13932: CALL_OW 69
13936: ST_TO_ADDR
// if lab then
13937: LD_VAR 0 4
13941: IFFALSE 14019
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
13943: LD_VAR 0 4
13947: PUSH
13948: LD_INT 1
13950: ARRAY
13951: PPUSH
13952: CALL_OW 461
13956: PUSH
13957: LD_INT 2
13959: EQUAL
13960: IFFALSE 14019
// begin for i in ruTech do
13962: LD_ADDR_VAR 0 1
13966: PUSH
13967: LD_EXP 65
13971: PUSH
13972: FOR_IN
13973: IFFALSE 14017
// if CanBeResearched ( lab [ 1 ] , i ) then
13975: LD_VAR 0 4
13979: PUSH
13980: LD_INT 1
13982: ARRAY
13983: PPUSH
13984: LD_VAR 0 1
13988: PPUSH
13989: CALL_OW 430
13993: IFFALSE 14015
// begin ComResearch ( lab [ 1 ] , i ) ;
13995: LD_VAR 0 4
13999: PUSH
14000: LD_INT 1
14002: ARRAY
14003: PPUSH
14004: LD_VAR 0 1
14008: PPUSH
14009: CALL_OW 124
// break ;
14013: GO 14017
// end ;
14015: GO 13972
14017: POP
14018: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
14019: LD_ADDR_VAR 0 14
14023: PUSH
14024: LD_EXP 66
14028: PPUSH
14029: LD_INT 22
14031: PUSH
14032: LD_INT 3
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: LD_INT 30
14041: PUSH
14042: LD_INT 3
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PUSH
14049: LD_INT 50
14051: PUSH
14052: EMPTY
14053: LIST
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: LIST
14059: PPUSH
14060: CALL_OW 70
14064: ST_TO_ADDR
// if fac then
14065: LD_VAR 0 14
14069: IFFALSE 14664
// begin if UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
14071: LD_EXP 63
14075: PPUSH
14076: LD_INT 3
14078: PUSH
14079: LD_INT 60
14081: PUSH
14082: EMPTY
14083: LIST
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: LD_INT 3
14091: PUSH
14092: LD_INT 25
14094: PUSH
14095: LD_INT 3
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PPUSH
14110: CALL_OW 72
14114: IFFALSE 14255
// begin for i in UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
14116: LD_ADDR_VAR 0 1
14120: PUSH
14121: LD_EXP 63
14125: PPUSH
14126: LD_INT 3
14128: PUSH
14129: LD_INT 60
14131: PUSH
14132: EMPTY
14133: LIST
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 3
14141: PUSH
14142: LD_INT 25
14144: PUSH
14145: LD_INT 3
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PPUSH
14160: CALL_OW 72
14164: PUSH
14165: FOR_IN
14166: IFFALSE 14253
// begin SetTag ( i , tMech ) ;
14168: LD_VAR 0 1
14172: PPUSH
14173: LD_INT 7
14175: PPUSH
14176: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
14180: LD_VAR 0 1
14184: PPUSH
14185: CALL_OW 310
14189: PUSH
14190: LD_VAR 0 1
14194: PPUSH
14195: CALL_OW 310
14199: PUSH
14200: LD_VAR 0 14
14204: PUSH
14205: LD_INT 1
14207: ARRAY
14208: NONEQUAL
14209: AND
14210: IFFALSE 14221
// ComExitBuilding ( i ) ;
14212: LD_VAR 0 1
14216: PPUSH
14217: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
14221: LD_VAR 0 1
14225: PPUSH
14226: LD_VAR 0 14
14230: PUSH
14231: LD_INT 1
14233: ARRAY
14234: PPUSH
14235: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
14239: LD_VAR 0 1
14243: PPUSH
14244: LD_INT 3
14246: PPUSH
14247: CALL_OW 183
// end ;
14251: GO 14165
14253: POP
14254: POP
// end ; if UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
14255: LD_EXP 63
14259: PPUSH
14260: LD_INT 25
14262: PUSH
14263: LD_INT 3
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: LD_INT 3
14272: PUSH
14273: LD_INT 54
14275: PUSH
14276: EMPTY
14277: LIST
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: LD_INT 120
14285: PUSH
14286: LD_INT 7
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PUSH
14293: LD_INT 50
14295: PUSH
14296: EMPTY
14297: LIST
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: PPUSH
14305: CALL_OW 72
14309: IFFALSE 14396
// begin for i in UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
14311: LD_ADDR_VAR 0 1
14315: PUSH
14316: LD_EXP 63
14320: PPUSH
14321: LD_INT 25
14323: PUSH
14324: LD_INT 3
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: LD_INT 3
14333: PUSH
14334: LD_INT 54
14336: PUSH
14337: EMPTY
14338: LIST
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: LD_INT 120
14346: PUSH
14347: LD_INT 7
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PUSH
14354: LD_INT 50
14356: PUSH
14357: EMPTY
14358: LIST
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: PPUSH
14366: CALL_OW 72
14370: PUSH
14371: FOR_IN
14372: IFFALSE 14394
// ComEnterUnit ( i , fac [ 1 ] ) ;
14374: LD_VAR 0 1
14378: PPUSH
14379: LD_VAR 0 14
14383: PUSH
14384: LD_INT 1
14386: ARRAY
14387: PPUSH
14388: CALL_OW 120
14392: GO 14371
14394: POP
14395: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
14396: LD_VAR 0 14
14400: PUSH
14401: LD_INT 1
14403: ARRAY
14404: PPUSH
14405: CALL_OW 461
14409: PUSH
14410: LD_INT 2
14412: EQUAL
14413: IFFALSE 14664
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
14415: LD_ADDR_VAR 0 15
14419: PUSH
14420: LD_EXP 66
14424: PPUSH
14425: LD_INT 2
14427: PUSH
14428: LD_INT 30
14430: PUSH
14431: LD_INT 32
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 30
14440: PUSH
14441: LD_INT 33
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: LIST
14452: PUSH
14453: LD_INT 35
14455: PUSH
14456: LD_INT 0
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PPUSH
14467: CALL_OW 70
14471: ST_TO_ADDR
// if emptyTowers then
14472: LD_VAR 0 15
14476: IFFALSE 14526
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea ) ;
14478: LD_ADDR_VAR 0 16
14482: PUSH
14483: LD_VAR 0 15
14487: PUSH
14488: LD_INT 1
14490: ARRAY
14491: PPUSH
14492: LD_EXP 66
14496: PPUSH
14497: CALL 64960 0 2
14501: ST_TO_ADDR
// if weapon then
14502: LD_VAR 0 16
14506: IFFALSE 14526
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
14508: LD_VAR 0 15
14512: PUSH
14513: LD_INT 1
14515: ARRAY
14516: PPUSH
14517: LD_VAR 0 16
14521: PPUSH
14522: CALL_OW 148
// end ; if ruConstructList then
14526: LD_EXP 70
14530: IFFALSE 14664
// if CanBeConstructed ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) then
14532: LD_VAR 0 14
14536: PUSH
14537: LD_INT 1
14539: ARRAY
14540: PPUSH
14541: LD_EXP 70
14545: PUSH
14546: LD_INT 1
14548: ARRAY
14549: PUSH
14550: LD_INT 1
14552: ARRAY
14553: PPUSH
14554: LD_EXP 70
14558: PUSH
14559: LD_INT 1
14561: ARRAY
14562: PUSH
14563: LD_INT 2
14565: ARRAY
14566: PPUSH
14567: LD_EXP 70
14571: PUSH
14572: LD_INT 1
14574: ARRAY
14575: PUSH
14576: LD_INT 3
14578: ARRAY
14579: PPUSH
14580: LD_EXP 70
14584: PUSH
14585: LD_INT 1
14587: ARRAY
14588: PUSH
14589: LD_INT 4
14591: ARRAY
14592: PPUSH
14593: CALL_OW 448
14597: IFFALSE 14664
// ComConstruct ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) ;
14599: LD_VAR 0 14
14603: PUSH
14604: LD_INT 1
14606: ARRAY
14607: PPUSH
14608: LD_EXP 70
14612: PUSH
14613: LD_INT 1
14615: ARRAY
14616: PUSH
14617: LD_INT 1
14619: ARRAY
14620: PPUSH
14621: LD_EXP 70
14625: PUSH
14626: LD_INT 1
14628: ARRAY
14629: PUSH
14630: LD_INT 2
14632: ARRAY
14633: PPUSH
14634: LD_EXP 70
14638: PUSH
14639: LD_INT 1
14641: ARRAY
14642: PUSH
14643: LD_INT 3
14645: ARRAY
14646: PPUSH
14647: LD_EXP 70
14651: PUSH
14652: LD_INT 1
14654: ARRAY
14655: PUSH
14656: LD_INT 4
14658: ARRAY
14659: PPUSH
14660: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14664: LD_ADDR_VAR 0 2
14668: PUSH
14669: LD_EXP 66
14673: PPUSH
14674: LD_INT 21
14676: PUSH
14677: LD_INT 3
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: LD_INT 3
14686: PUSH
14687: LD_INT 57
14689: PUSH
14690: EMPTY
14691: LIST
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: LD_INT 3
14699: PUSH
14700: LD_INT 24
14702: PUSH
14703: LD_INT 1000
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: LIST
14718: PPUSH
14719: CALL_OW 70
14723: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea ) ;
14724: LD_ADDR_VAR 0 8
14728: PUSH
14729: LD_EXP 72
14733: PPUSH
14734: CALL_OW 435
14738: ST_TO_ADDR
// sci := UnitFilter ( ruForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
14739: LD_ADDR_VAR 0 9
14743: PUSH
14744: LD_EXP 59
14748: PPUSH
14749: LD_INT 25
14751: PUSH
14752: LD_INT 4
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 50
14761: PUSH
14762: EMPTY
14763: LIST
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PPUSH
14769: CALL_OW 72
14773: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
14774: LD_ADDR_VAR 0 4
14778: PUSH
14779: LD_EXP 66
14783: PPUSH
14784: LD_INT 2
14786: PUSH
14787: LD_INT 30
14789: PUSH
14790: LD_INT 6
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 30
14799: PUSH
14800: LD_INT 7
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: LD_INT 30
14809: PUSH
14810: LD_INT 8
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: PPUSH
14823: CALL_OW 70
14827: ST_TO_ADDR
// if sci then
14828: LD_VAR 0 9
14832: IFFALSE 14993
// begin hurtUnits := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_tag , tHeal ] ] ) ;
14834: LD_ADDR_VAR 0 11
14838: PUSH
14839: LD_EXP 59
14843: PPUSH
14844: LD_INT 95
14846: PUSH
14847: LD_EXP 66
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 120
14858: PUSH
14859: LD_INT 1
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PPUSH
14870: CALL_OW 72
14874: ST_TO_ADDR
// if hurtUnits then
14875: LD_VAR 0 11
14879: IFFALSE 14940
// begin for i in sci do
14881: LD_ADDR_VAR 0 1
14885: PUSH
14886: LD_VAR 0 9
14890: PUSH
14891: FOR_IN
14892: IFFALSE 14936
// if IsInUnit ( i ) then
14894: LD_VAR 0 1
14898: PPUSH
14899: CALL_OW 310
14903: IFFALSE 14916
// ComExitBuilding ( i ) else
14905: LD_VAR 0 1
14909: PPUSH
14910: CALL_OW 122
14914: GO 14934
// ComHeal ( i , hurtUnits [ 1 ] ) ;
14916: LD_VAR 0 1
14920: PPUSH
14921: LD_VAR 0 11
14925: PUSH
14926: LD_INT 1
14928: ARRAY
14929: PPUSH
14930: CALL_OW 128
14934: GO 14891
14936: POP
14937: POP
// end else
14938: GO 14993
// if lab then
14940: LD_VAR 0 4
14944: IFFALSE 14993
// begin for i in sci do
14946: LD_ADDR_VAR 0 1
14950: PUSH
14951: LD_VAR 0 9
14955: PUSH
14956: FOR_IN
14957: IFFALSE 14991
// if not IsInUnit ( i ) then
14959: LD_VAR 0 1
14963: PPUSH
14964: CALL_OW 310
14968: NOT
14969: IFFALSE 14989
// ComEnterUnit ( i , lab [ 1 ] ) ;
14971: LD_VAR 0 1
14975: PPUSH
14976: LD_VAR 0 4
14980: PUSH
14981: LD_INT 1
14983: ARRAY
14984: PPUSH
14985: CALL_OW 120
14989: GO 14956
14991: POP
14992: POP
// end ; end ; eng := UnitFilter ( ruForces , [ f_class , 2 ] ) ;
14993: LD_ADDR_VAR 0 5
14997: PUSH
14998: LD_EXP 59
15002: PPUSH
15003: LD_INT 25
15005: PUSH
15006: LD_INT 2
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PPUSH
15013: CALL_OW 72
15017: ST_TO_ADDR
// if eng then
15018: LD_VAR 0 5
15022: IFFALSE 15807
// begin for i in eng do
15024: LD_ADDR_VAR 0 1
15028: PUSH
15029: LD_VAR 0 5
15033: PUSH
15034: FOR_IN
15035: IFFALSE 15805
// begin tag := GetTag ( i ) ;
15037: LD_ADDR_VAR 0 6
15041: PUSH
15042: LD_VAR 0 1
15046: PPUSH
15047: CALL_OW 110
15051: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
15052: LD_VAR 0 1
15056: PPUSH
15057: CALL_OW 256
15061: PUSH
15062: LD_INT 800
15064: LESS
15065: PUSH
15066: LD_VAR 0 6
15070: PUSH
15071: LD_INT 1
15073: NONEQUAL
15074: AND
15075: IFFALSE 15125
// begin SetTag ( i , tHeal ) ;
15077: LD_VAR 0 1
15081: PPUSH
15082: LD_INT 1
15084: PPUSH
15085: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
15089: LD_VAR 0 1
15093: PPUSH
15094: LD_EXP 74
15098: PUSH
15099: LD_INT 1
15101: ARRAY
15102: PPUSH
15103: LD_EXP 74
15107: PUSH
15108: LD_INT 2
15110: ARRAY
15111: PPUSH
15112: CALL_OW 111
// AddComHold ( i ) ;
15116: LD_VAR 0 1
15120: PPUSH
15121: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
15125: LD_VAR 0 6
15129: PUSH
15130: LD_INT 1
15132: EQUAL
15133: PUSH
15134: LD_VAR 0 1
15138: PPUSH
15139: CALL_OW 256
15143: PUSH
15144: LD_INT 1000
15146: EQUAL
15147: AND
15148: IFFALSE 15162
// SetTag ( i , 0 ) ;
15150: LD_VAR 0 1
15154: PPUSH
15155: LD_INT 0
15157: PPUSH
15158: CALL_OW 109
// if not tag then
15162: LD_VAR 0 6
15166: NOT
15167: IFFALSE 15339
// begin undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15169: LD_ADDR_VAR 0 3
15173: PUSH
15174: LD_EXP 66
15178: PPUSH
15179: LD_INT 57
15181: PUSH
15182: EMPTY
15183: LIST
15184: PPUSH
15185: CALL_OW 70
15189: ST_TO_ADDR
// if undone then
15190: LD_VAR 0 3
15194: IFFALSE 15216
// begin ComComplete ( i , undone [ 1 ] ) ;
15196: LD_VAR 0 1
15200: PPUSH
15201: LD_VAR 0 3
15205: PUSH
15206: LD_INT 1
15208: ARRAY
15209: PPUSH
15210: CALL 62813 0 2
// continue ;
15214: GO 15034
// end ; if cr or tmp or Count ( ruBuildings ) then
15216: LD_VAR 0 8
15220: PUSH
15221: LD_VAR 0 2
15225: OR
15226: PUSH
15227: LD_EXP 76
15231: PPUSH
15232: CALL 56715 0 1
15236: OR
15237: IFFALSE 15313
// begin if IsInUnit ( i ) then
15239: LD_VAR 0 1
15243: PPUSH
15244: CALL_OW 310
15248: IFFALSE 15259
// ComExitBuilding ( i ) ;
15250: LD_VAR 0 1
15254: PPUSH
15255: CALL_OW 122
// if tmp then
15259: LD_VAR 0 2
15263: IFFALSE 15279
// SetTag ( i , tRepair ) else
15265: LD_VAR 0 1
15269: PPUSH
15270: LD_INT 3
15272: PPUSH
15273: CALL_OW 109
15277: GO 15311
// if cr then
15279: LD_VAR 0 8
15283: IFFALSE 15299
// SetTag ( i , tCrates ) else
15285: LD_VAR 0 1
15289: PPUSH
15290: LD_INT 2
15292: PPUSH
15293: CALL_OW 109
15297: GO 15311
// SetTag ( i , tBuild ) ;
15299: LD_VAR 0 1
15303: PPUSH
15304: LD_INT 5
15306: PPUSH
15307: CALL_OW 109
// end else
15311: GO 15339
// if not IsInUnit ( i ) then
15313: LD_VAR 0 1
15317: PPUSH
15318: CALL_OW 310
15322: NOT
15323: IFFALSE 15339
// ComEnterUnit ( i , ruBase ) ;
15325: LD_VAR 0 1
15329: PPUSH
15330: LD_EXP 68
15334: PPUSH
15335: CALL_OW 120
// end ; if tag = tRepair then
15339: LD_VAR 0 6
15343: PUSH
15344: LD_INT 3
15346: EQUAL
15347: IFFALSE 15453
// begin if IsInUnit ( i ) then
15349: LD_VAR 0 1
15353: PPUSH
15354: CALL_OW 310
15358: IFFALSE 15371
// begin ComExitBuilding ( i ) ;
15360: LD_VAR 0 1
15364: PPUSH
15365: CALL_OW 122
// continue ;
15369: GO 15034
// end ; if not tmp then
15371: LD_VAR 0 2
15375: NOT
15376: IFFALSE 15392
// begin SetTag ( i , 0 ) ;
15378: LD_VAR 0 1
15382: PPUSH
15383: LD_INT 0
15385: PPUSH
15386: CALL_OW 109
// continue ;
15390: GO 15034
// end ; if not HasTask ( i ) then
15392: LD_VAR 0 1
15396: PPUSH
15397: CALL_OW 314
15401: NOT
15402: IFFALSE 15422
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
15404: LD_VAR 0 1
15408: PPUSH
15409: LD_VAR 0 2
15413: PUSH
15414: LD_INT 1
15416: ARRAY
15417: PPUSH
15418: CALL_OW 130
// if not IsInArea ( i , ruBaseArea ) then
15422: LD_VAR 0 1
15426: PPUSH
15427: LD_EXP 66
15431: PPUSH
15432: CALL_OW 308
15436: NOT
15437: IFFALSE 15453
// ComMoveToArea ( i , ruBaseArea ) ;
15439: LD_VAR 0 1
15443: PPUSH
15444: LD_EXP 66
15448: PPUSH
15449: CALL_OW 113
// end ; if tag = tBuild then
15453: LD_VAR 0 6
15457: PUSH
15458: LD_INT 5
15460: EQUAL
15461: IFFALSE 15660
// begin if IsInUnit ( i ) then
15463: LD_VAR 0 1
15467: PPUSH
15468: CALL_OW 310
15472: IFFALSE 15485
// begin ComExitBuilding ( i ) ;
15474: LD_VAR 0 1
15478: PPUSH
15479: CALL_OW 122
// continue ;
15483: GO 15034
// end ; if not Count ( ruBuildings ) then
15485: LD_EXP 76
15489: PPUSH
15490: CALL 56715 0 1
15494: NOT
15495: IFFALSE 15513
// begin SetTag ( i , 0 ) ;
15497: LD_VAR 0 1
15501: PPUSH
15502: LD_INT 0
15504: PPUSH
15505: CALL_OW 109
// continue ;
15509: GO 15034
// end else
15511: GO 15552
// if not CanBeBuiltOnlyResources ( ruBase , ruBuildings [ 1 ] [ 1 ] ) then
15513: LD_EXP 68
15517: PPUSH
15518: LD_EXP 76
15522: PUSH
15523: LD_INT 1
15525: ARRAY
15526: PUSH
15527: LD_INT 1
15529: ARRAY
15530: PPUSH
15531: CALL 96223 0 2
15535: NOT
15536: IFFALSE 15552
// begin SetTag ( i , 0 ) ;
15538: LD_VAR 0 1
15542: PPUSH
15543: LD_INT 0
15545: PPUSH
15546: CALL_OW 109
// continue ;
15550: GO 15034
// end ; undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15552: LD_ADDR_VAR 0 3
15556: PUSH
15557: LD_EXP 66
15561: PPUSH
15562: LD_INT 57
15564: PUSH
15565: EMPTY
15566: LIST
15567: PPUSH
15568: CALL_OW 70
15572: ST_TO_ADDR
// if undone then
15573: LD_VAR 0 3
15577: IFFALSE 15599
// begin ComComplete ( i , undone [ 1 ] ) ;
15579: LD_VAR 0 1
15583: PPUSH
15584: LD_VAR 0 3
15588: PUSH
15589: LD_INT 1
15591: ARRAY
15592: PPUSH
15593: CALL 62813 0 2
// continue ;
15597: GO 15034
// end ; ComBuild ( i , ruBuildings [ 1 ] [ 1 ] , ruBuildings [ 1 ] [ 2 ] , ruBuildings [ 1 ] [ 3 ] , ruBuildings [ 1 ] [ 4 ] ) ;
15599: LD_VAR 0 1
15603: PPUSH
15604: LD_EXP 76
15608: PUSH
15609: LD_INT 1
15611: ARRAY
15612: PUSH
15613: LD_INT 1
15615: ARRAY
15616: PPUSH
15617: LD_EXP 76
15621: PUSH
15622: LD_INT 1
15624: ARRAY
15625: PUSH
15626: LD_INT 2
15628: ARRAY
15629: PPUSH
15630: LD_EXP 76
15634: PUSH
15635: LD_INT 1
15637: ARRAY
15638: PUSH
15639: LD_INT 3
15641: ARRAY
15642: PPUSH
15643: LD_EXP 76
15647: PUSH
15648: LD_INT 1
15650: ARRAY
15651: PUSH
15652: LD_INT 4
15654: ARRAY
15655: PPUSH
15656: CALL_OW 145
// end ; if tag = tCrates then
15660: LD_VAR 0 6
15664: PUSH
15665: LD_INT 2
15667: EQUAL
15668: IFFALSE 15803
// begin if IsInUnit ( i ) then
15670: LD_VAR 0 1
15674: PPUSH
15675: CALL_OW 310
15679: IFFALSE 15692
// begin ComExitBuilding ( i ) ;
15681: LD_VAR 0 1
15685: PPUSH
15686: CALL_OW 122
// continue ;
15690: GO 15034
// end ; if not cr then
15692: LD_VAR 0 8
15696: NOT
15697: IFFALSE 15713
// begin SetTag ( i , 0 ) ;
15699: LD_VAR 0 1
15703: PPUSH
15704: LD_INT 0
15706: PPUSH
15707: CALL_OW 109
// continue ;
15711: GO 15034
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
15713: LD_VAR 0 1
15717: PPUSH
15718: CALL_OW 314
15722: NOT
15723: PUSH
15724: LD_INT 81
15726: PUSH
15727: LD_INT 3
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 92
15736: PUSH
15737: LD_VAR 0 8
15741: PUSH
15742: LD_INT 1
15744: ARRAY
15745: PUSH
15746: LD_VAR 0 8
15750: PUSH
15751: LD_INT 2
15753: ARRAY
15754: PUSH
15755: LD_INT 12
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PPUSH
15768: CALL_OW 69
15772: NOT
15773: AND
15774: IFFALSE 15803
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
15776: LD_VAR 0 1
15780: PPUSH
15781: LD_VAR 0 8
15785: PUSH
15786: LD_INT 1
15788: ARRAY
15789: PPUSH
15790: LD_VAR 0 8
15794: PUSH
15795: LD_INT 2
15797: ARRAY
15798: PPUSH
15799: CALL_OW 117
// end ; end ;
15803: GO 15034
15805: POP
15806: POP
// end ; sol := UnitFilter ( ruForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander ;
15807: LD_ADDR_VAR 0 10
15811: PUSH
15812: LD_EXP 59
15816: PPUSH
15817: LD_INT 2
15819: PUSH
15820: LD_INT 25
15822: PUSH
15823: LD_INT 1
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 25
15832: PUSH
15833: LD_INT 9
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: LIST
15844: PUSH
15845: LD_INT 50
15847: PUSH
15848: EMPTY
15849: LIST
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PPUSH
15855: CALL_OW 72
15859: PUSH
15860: LD_EXP 61
15864: UNION
15865: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
15866: LD_ADDR_VAR 0 12
15870: PUSH
15871: LD_EXP 66
15875: PPUSH
15876: LD_INT 81
15878: PUSH
15879: LD_INT 3
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PPUSH
15886: CALL_OW 70
15890: ST_TO_ADDR
// if sol then
15891: LD_VAR 0 10
15895: IFFALSE 16419
// begin if enemyInBase then
15897: LD_VAR 0 12
15901: IFFALSE 16044
// begin for i in sol do
15903: LD_ADDR_VAR 0 1
15907: PUSH
15908: LD_VAR 0 10
15912: PUSH
15913: FOR_IN
15914: IFFALSE 16040
// begin tw := IsInUnit ( i ) ;
15916: LD_ADDR_VAR 0 7
15920: PUSH
15921: LD_VAR 0 1
15925: PPUSH
15926: CALL_OW 310
15930: ST_TO_ADDR
// if tw then
15931: LD_VAR 0 7
15935: IFFALSE 16014
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
15937: LD_VAR 0 7
15941: PUSH
15942: LD_INT 22
15944: PUSH
15945: LD_INT 3
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: LD_INT 101
15954: PUSH
15955: LD_INT 1
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: LD_INT 2
15964: PUSH
15965: LD_INT 30
15967: PUSH
15968: LD_INT 32
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 30
15977: PUSH
15978: LD_INT 31
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: LIST
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: LIST
15994: PPUSH
15995: CALL_OW 69
15999: IN
16000: NOT
16001: IFFALSE 16012
// ComExitBuilding ( i ) ;
16003: LD_VAR 0 1
16007: PPUSH
16008: CALL_OW 122
// end else
16012: GO 16038
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
16014: LD_VAR 0 1
16018: PPUSH
16019: LD_VAR 0 12
16023: PPUSH
16024: LD_VAR 0 1
16028: PPUSH
16029: CALL_OW 74
16033: PPUSH
16034: CALL_OW 115
// end ;
16038: GO 15913
16040: POP
16041: POP
// end else
16042: GO 16419
// begin empty := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
16044: LD_ADDR_VAR 0 13
16048: PUSH
16049: LD_EXP 66
16053: PPUSH
16054: LD_INT 3
16056: PUSH
16057: LD_INT 62
16059: PUSH
16060: EMPTY
16061: LIST
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 2
16069: PUSH
16070: LD_INT 30
16072: PUSH
16073: LD_INT 32
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 30
16082: PUSH
16083: LD_INT 4
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 30
16092: PUSH
16093: LD_INT 5
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 30
16102: PUSH
16103: LD_INT 31
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PPUSH
16121: CALL_OW 70
16125: ST_TO_ADDR
// if empty then
16126: LD_VAR 0 13
16130: IFFALSE 16147
// empty := ReverseArray ( empty ) ;
16132: LD_ADDR_VAR 0 13
16136: PUSH
16137: LD_VAR 0 13
16141: PPUSH
16142: CALL 87591 0 1
16146: ST_TO_ADDR
// for i in sol do
16147: LD_ADDR_VAR 0 1
16151: PUSH
16152: LD_VAR 0 10
16156: PUSH
16157: FOR_IN
16158: IFFALSE 16417
// begin tag := GetTag ( i ) ;
16160: LD_ADDR_VAR 0 6
16164: PUSH
16165: LD_VAR 0 1
16169: PPUSH
16170: CALL_OW 110
16174: ST_TO_ADDR
// if tag = tMech then
16175: LD_VAR 0 6
16179: PUSH
16180: LD_INT 7
16182: EQUAL
16183: IFFALSE 16187
// continue ;
16185: GO 16157
// if GetLives ( i ) < 1000 and tag <> tHeal then
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL_OW 256
16196: PUSH
16197: LD_INT 1000
16199: LESS
16200: PUSH
16201: LD_VAR 0 6
16205: PUSH
16206: LD_INT 1
16208: NONEQUAL
16209: AND
16210: IFFALSE 16262
// begin SetTag ( i , tHeal ) ;
16212: LD_VAR 0 1
16216: PPUSH
16217: LD_INT 1
16219: PPUSH
16220: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
16224: LD_VAR 0 1
16228: PPUSH
16229: LD_EXP 74
16233: PUSH
16234: LD_INT 1
16236: ARRAY
16237: PPUSH
16238: LD_EXP 74
16242: PUSH
16243: LD_INT 2
16245: ARRAY
16246: PPUSH
16247: CALL_OW 111
// AddComHold ( i ) ;
16251: LD_VAR 0 1
16255: PPUSH
16256: CALL_OW 200
// continue ;
16260: GO 16157
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
16262: LD_VAR 0 1
16266: PPUSH
16267: CALL_OW 256
16271: PUSH
16272: LD_INT 1000
16274: EQUAL
16275: PUSH
16276: LD_VAR 0 6
16280: PUSH
16281: LD_INT 1
16283: EQUAL
16284: AND
16285: IFFALSE 16301
// begin SetTag ( i , 0 ) ;
16287: LD_VAR 0 1
16291: PPUSH
16292: LD_INT 0
16294: PPUSH
16295: CALL_OW 109
// continue ;
16299: GO 16157
// end ; if HasTask ( i ) then
16301: LD_VAR 0 1
16305: PPUSH
16306: CALL_OW 314
16310: IFFALSE 16314
// continue ;
16312: GO 16157
// if not IsInUnit ( i ) and not tag and empty then
16314: LD_VAR 0 1
16318: PPUSH
16319: CALL_OW 310
16323: NOT
16324: PUSH
16325: LD_VAR 0 6
16329: NOT
16330: AND
16331: PUSH
16332: LD_VAR 0 13
16336: AND
16337: IFFALSE 16415
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
16339: LD_VAR 0 1
16343: PPUSH
16344: LD_VAR 0 13
16348: PUSH
16349: LD_INT 1
16351: ARRAY
16352: PPUSH
16353: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
16357: LD_VAR 0 13
16361: PUSH
16362: LD_INT 1
16364: ARRAY
16365: PPUSH
16366: CALL_OW 266
16370: PUSH
16371: LD_INT 5
16373: EQUAL
16374: PUSH
16375: LD_INT 50
16377: PPUSH
16378: CALL_OW 13
16382: AND
16383: IFFALSE 16397
// AddComChangeProfession ( i , class_bazooker ) ;
16385: LD_VAR 0 1
16389: PPUSH
16390: LD_INT 9
16392: PPUSH
16393: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
16397: LD_ADDR_VAR 0 13
16401: PUSH
16402: LD_VAR 0 13
16406: PPUSH
16407: LD_INT 1
16409: PPUSH
16410: CALL_OW 3
16414: ST_TO_ADDR
// end ; end ;
16415: GO 16157
16417: POP
16418: POP
// end ; end ; end ;
16419: PPOPN 16
16421: END
// every 0 0$2 trigger ruScriptActive2 and Count ( ruForces2 ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
16422: LD_EXP 15
16426: PUSH
16427: LD_EXP 60
16431: PPUSH
16432: CALL 56715 0 1
16436: AND
16437: IFFALSE 19019
16439: GO 16441
16441: DISABLE
16442: LD_INT 0
16444: PPUSH
16445: PPUSH
16446: PPUSH
16447: PPUSH
16448: PPUSH
16449: PPUSH
16450: PPUSH
16451: PPUSH
16452: PPUSH
16453: PPUSH
16454: PPUSH
16455: PPUSH
16456: PPUSH
16457: PPUSH
16458: PPUSH
16459: PPUSH
// begin enable ;
16460: ENABLE
// if ruTech then
16461: LD_EXP 65
16465: IFFALSE 16619
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
16467: LD_ADDR_VAR 0 4
16471: PUSH
16472: LD_INT 22
16474: PUSH
16475: LD_INT 3
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 50
16484: PUSH
16485: EMPTY
16486: LIST
16487: PUSH
16488: LD_INT 2
16490: PUSH
16491: LD_INT 30
16493: PUSH
16494: LD_INT 6
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 30
16503: PUSH
16504: LD_INT 7
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 30
16513: PUSH
16514: LD_INT 8
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: LIST
16531: PPUSH
16532: CALL_OW 69
16536: ST_TO_ADDR
// if lab then
16537: LD_VAR 0 4
16541: IFFALSE 16619
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
16543: LD_VAR 0 4
16547: PUSH
16548: LD_INT 1
16550: ARRAY
16551: PPUSH
16552: CALL_OW 461
16556: PUSH
16557: LD_INT 2
16559: EQUAL
16560: IFFALSE 16619
// begin for i in ruTech do
16562: LD_ADDR_VAR 0 1
16566: PUSH
16567: LD_EXP 65
16571: PUSH
16572: FOR_IN
16573: IFFALSE 16617
// if CanBeResearched ( lab [ 1 ] , i ) then
16575: LD_VAR 0 4
16579: PUSH
16580: LD_INT 1
16582: ARRAY
16583: PPUSH
16584: LD_VAR 0 1
16588: PPUSH
16589: CALL_OW 430
16593: IFFALSE 16615
// begin ComResearch ( lab [ 1 ] , i ) ;
16595: LD_VAR 0 4
16599: PUSH
16600: LD_INT 1
16602: ARRAY
16603: PPUSH
16604: LD_VAR 0 1
16608: PPUSH
16609: CALL_OW 124
// break ;
16613: GO 16617
// end ;
16615: GO 16572
16617: POP
16618: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
16619: LD_ADDR_VAR 0 14
16623: PUSH
16624: LD_EXP 67
16628: PPUSH
16629: LD_INT 22
16631: PUSH
16632: LD_INT 3
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 30
16641: PUSH
16642: LD_INT 3
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 50
16651: PUSH
16652: EMPTY
16653: LIST
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: LIST
16659: PPUSH
16660: CALL_OW 70
16664: ST_TO_ADDR
// if fac then
16665: LD_VAR 0 14
16669: IFFALSE 17264
// begin if UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
16671: LD_EXP 64
16675: PPUSH
16676: LD_INT 3
16678: PUSH
16679: LD_INT 60
16681: PUSH
16682: EMPTY
16683: LIST
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 3
16691: PUSH
16692: LD_INT 25
16694: PUSH
16695: LD_INT 3
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PPUSH
16710: CALL_OW 72
16714: IFFALSE 16855
// begin for i in UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
16716: LD_ADDR_VAR 0 1
16720: PUSH
16721: LD_EXP 64
16725: PPUSH
16726: LD_INT 3
16728: PUSH
16729: LD_INT 60
16731: PUSH
16732: EMPTY
16733: LIST
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: LD_INT 3
16741: PUSH
16742: LD_INT 25
16744: PUSH
16745: LD_INT 3
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PPUSH
16760: CALL_OW 72
16764: PUSH
16765: FOR_IN
16766: IFFALSE 16853
// begin SetTag ( i , tMech ) ;
16768: LD_VAR 0 1
16772: PPUSH
16773: LD_INT 7
16775: PPUSH
16776: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
16780: LD_VAR 0 1
16784: PPUSH
16785: CALL_OW 310
16789: PUSH
16790: LD_VAR 0 1
16794: PPUSH
16795: CALL_OW 310
16799: PUSH
16800: LD_VAR 0 14
16804: PUSH
16805: LD_INT 1
16807: ARRAY
16808: NONEQUAL
16809: AND
16810: IFFALSE 16821
// ComExitBuilding ( i ) ;
16812: LD_VAR 0 1
16816: PPUSH
16817: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
16821: LD_VAR 0 1
16825: PPUSH
16826: LD_VAR 0 14
16830: PUSH
16831: LD_INT 1
16833: ARRAY
16834: PPUSH
16835: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
16839: LD_VAR 0 1
16843: PPUSH
16844: LD_INT 3
16846: PPUSH
16847: CALL_OW 183
// end ;
16851: GO 16765
16853: POP
16854: POP
// end ; if UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
16855: LD_EXP 64
16859: PPUSH
16860: LD_INT 25
16862: PUSH
16863: LD_INT 3
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 3
16872: PUSH
16873: LD_INT 54
16875: PUSH
16876: EMPTY
16877: LIST
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: LD_INT 120
16885: PUSH
16886: LD_INT 7
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PUSH
16893: LD_INT 50
16895: PUSH
16896: EMPTY
16897: LIST
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: PPUSH
16905: CALL_OW 72
16909: IFFALSE 16996
// begin for i in UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
16911: LD_ADDR_VAR 0 1
16915: PUSH
16916: LD_EXP 64
16920: PPUSH
16921: LD_INT 25
16923: PUSH
16924: LD_INT 3
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 3
16933: PUSH
16934: LD_INT 54
16936: PUSH
16937: EMPTY
16938: LIST
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PUSH
16944: LD_INT 120
16946: PUSH
16947: LD_INT 7
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: LD_INT 50
16956: PUSH
16957: EMPTY
16958: LIST
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: PPUSH
16966: CALL_OW 72
16970: PUSH
16971: FOR_IN
16972: IFFALSE 16994
// ComEnterUnit ( i , fac [ 1 ] ) ;
16974: LD_VAR 0 1
16978: PPUSH
16979: LD_VAR 0 14
16983: PUSH
16984: LD_INT 1
16986: ARRAY
16987: PPUSH
16988: CALL_OW 120
16992: GO 16971
16994: POP
16995: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
16996: LD_VAR 0 14
17000: PUSH
17001: LD_INT 1
17003: ARRAY
17004: PPUSH
17005: CALL_OW 461
17009: PUSH
17010: LD_INT 2
17012: EQUAL
17013: IFFALSE 17264
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea2 , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
17015: LD_ADDR_VAR 0 15
17019: PUSH
17020: LD_EXP 67
17024: PPUSH
17025: LD_INT 2
17027: PUSH
17028: LD_INT 30
17030: PUSH
17031: LD_INT 32
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 30
17040: PUSH
17041: LD_INT 33
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 35
17055: PUSH
17056: LD_INT 0
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PPUSH
17067: CALL_OW 70
17071: ST_TO_ADDR
// if emptyTowers then
17072: LD_VAR 0 15
17076: IFFALSE 17126
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea2 ) ;
17078: LD_ADDR_VAR 0 16
17082: PUSH
17083: LD_VAR 0 15
17087: PUSH
17088: LD_INT 1
17090: ARRAY
17091: PPUSH
17092: LD_EXP 67
17096: PPUSH
17097: CALL 64960 0 2
17101: ST_TO_ADDR
// if weapon then
17102: LD_VAR 0 16
17106: IFFALSE 17126
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
17108: LD_VAR 0 15
17112: PUSH
17113: LD_INT 1
17115: ARRAY
17116: PPUSH
17117: LD_VAR 0 16
17121: PPUSH
17122: CALL_OW 148
// end ; if ruConstructList2 then
17126: LD_EXP 71
17130: IFFALSE 17264
// if CanBeConstructed ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) then
17132: LD_VAR 0 14
17136: PUSH
17137: LD_INT 1
17139: ARRAY
17140: PPUSH
17141: LD_EXP 71
17145: PUSH
17146: LD_INT 1
17148: ARRAY
17149: PUSH
17150: LD_INT 1
17152: ARRAY
17153: PPUSH
17154: LD_EXP 71
17158: PUSH
17159: LD_INT 1
17161: ARRAY
17162: PUSH
17163: LD_INT 2
17165: ARRAY
17166: PPUSH
17167: LD_EXP 71
17171: PUSH
17172: LD_INT 1
17174: ARRAY
17175: PUSH
17176: LD_INT 3
17178: ARRAY
17179: PPUSH
17180: LD_EXP 71
17184: PUSH
17185: LD_INT 1
17187: ARRAY
17188: PUSH
17189: LD_INT 4
17191: ARRAY
17192: PPUSH
17193: CALL_OW 448
17197: IFFALSE 17264
// ComConstruct ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) ;
17199: LD_VAR 0 14
17203: PUSH
17204: LD_INT 1
17206: ARRAY
17207: PPUSH
17208: LD_EXP 71
17212: PUSH
17213: LD_INT 1
17215: ARRAY
17216: PUSH
17217: LD_INT 1
17219: ARRAY
17220: PPUSH
17221: LD_EXP 71
17225: PUSH
17226: LD_INT 1
17228: ARRAY
17229: PUSH
17230: LD_INT 2
17232: ARRAY
17233: PPUSH
17234: LD_EXP 71
17238: PUSH
17239: LD_INT 1
17241: ARRAY
17242: PUSH
17243: LD_INT 3
17245: ARRAY
17246: PPUSH
17247: LD_EXP 71
17251: PUSH
17252: LD_INT 1
17254: ARRAY
17255: PUSH
17256: LD_INT 4
17258: ARRAY
17259: PPUSH
17260: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea2 , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17264: LD_ADDR_VAR 0 2
17268: PUSH
17269: LD_EXP 67
17273: PPUSH
17274: LD_INT 21
17276: PUSH
17277: LD_INT 3
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 3
17286: PUSH
17287: LD_INT 57
17289: PUSH
17290: EMPTY
17291: LIST
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 3
17299: PUSH
17300: LD_INT 24
17302: PUSH
17303: LD_INT 1000
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: LIST
17318: PPUSH
17319: CALL_OW 70
17323: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea2 ) ;
17324: LD_ADDR_VAR 0 8
17328: PUSH
17329: LD_EXP 73
17333: PPUSH
17334: CALL_OW 435
17338: ST_TO_ADDR
// sci := UnitFilter ( ruForces2 , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
17339: LD_ADDR_VAR 0 9
17343: PUSH
17344: LD_EXP 60
17348: PPUSH
17349: LD_INT 25
17351: PUSH
17352: LD_INT 4
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: LD_INT 50
17361: PUSH
17362: EMPTY
17363: LIST
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PPUSH
17369: CALL_OW 72
17373: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea2 , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
17374: LD_ADDR_VAR 0 4
17378: PUSH
17379: LD_EXP 67
17383: PPUSH
17384: LD_INT 2
17386: PUSH
17387: LD_INT 30
17389: PUSH
17390: LD_INT 6
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 30
17399: PUSH
17400: LD_INT 7
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 30
17409: PUSH
17410: LD_INT 8
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: PPUSH
17423: CALL_OW 70
17427: ST_TO_ADDR
// if sci then
17428: LD_VAR 0 9
17432: IFFALSE 17593
// begin hurtUnits := UnitFilter ( ruForces2 , [ [ f_inarea , ruBaseArea2 ] , [ f_tag , tHeal ] ] ) ;
17434: LD_ADDR_VAR 0 11
17438: PUSH
17439: LD_EXP 60
17443: PPUSH
17444: LD_INT 95
17446: PUSH
17447: LD_EXP 67
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PUSH
17456: LD_INT 120
17458: PUSH
17459: LD_INT 1
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PPUSH
17470: CALL_OW 72
17474: ST_TO_ADDR
// if hurtUnits then
17475: LD_VAR 0 11
17479: IFFALSE 17540
// begin for i in sci do
17481: LD_ADDR_VAR 0 1
17485: PUSH
17486: LD_VAR 0 9
17490: PUSH
17491: FOR_IN
17492: IFFALSE 17536
// if IsInUnit ( i ) then
17494: LD_VAR 0 1
17498: PPUSH
17499: CALL_OW 310
17503: IFFALSE 17516
// ComExitBuilding ( i ) else
17505: LD_VAR 0 1
17509: PPUSH
17510: CALL_OW 122
17514: GO 17534
// ComHeal ( i , hurtUnits [ 1 ] ) ;
17516: LD_VAR 0 1
17520: PPUSH
17521: LD_VAR 0 11
17525: PUSH
17526: LD_INT 1
17528: ARRAY
17529: PPUSH
17530: CALL_OW 128
17534: GO 17491
17536: POP
17537: POP
// end else
17538: GO 17593
// if lab then
17540: LD_VAR 0 4
17544: IFFALSE 17593
// begin for i in sci do
17546: LD_ADDR_VAR 0 1
17550: PUSH
17551: LD_VAR 0 9
17555: PUSH
17556: FOR_IN
17557: IFFALSE 17591
// if not IsInUnit ( i ) then
17559: LD_VAR 0 1
17563: PPUSH
17564: CALL_OW 310
17568: NOT
17569: IFFALSE 17589
// ComEnterUnit ( i , lab [ 1 ] ) ;
17571: LD_VAR 0 1
17575: PPUSH
17576: LD_VAR 0 4
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PPUSH
17585: CALL_OW 120
17589: GO 17556
17591: POP
17592: POP
// end ; end ; eng := UnitFilter ( ruForces2 , [ f_class , 2 ] ) ;
17593: LD_ADDR_VAR 0 5
17597: PUSH
17598: LD_EXP 60
17602: PPUSH
17603: LD_INT 25
17605: PUSH
17606: LD_INT 2
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PPUSH
17613: CALL_OW 72
17617: ST_TO_ADDR
// if eng then
17618: LD_VAR 0 5
17622: IFFALSE 18407
// begin for i in eng do
17624: LD_ADDR_VAR 0 1
17628: PUSH
17629: LD_VAR 0 5
17633: PUSH
17634: FOR_IN
17635: IFFALSE 18405
// begin tag := GetTag ( i ) ;
17637: LD_ADDR_VAR 0 6
17641: PUSH
17642: LD_VAR 0 1
17646: PPUSH
17647: CALL_OW 110
17651: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
17652: LD_VAR 0 1
17656: PPUSH
17657: CALL_OW 256
17661: PUSH
17662: LD_INT 800
17664: LESS
17665: PUSH
17666: LD_VAR 0 6
17670: PUSH
17671: LD_INT 1
17673: NONEQUAL
17674: AND
17675: IFFALSE 17725
// begin SetTag ( i , tHeal ) ;
17677: LD_VAR 0 1
17681: PPUSH
17682: LD_INT 1
17684: PPUSH
17685: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
17689: LD_VAR 0 1
17693: PPUSH
17694: LD_EXP 75
17698: PUSH
17699: LD_INT 1
17701: ARRAY
17702: PPUSH
17703: LD_EXP 75
17707: PUSH
17708: LD_INT 2
17710: ARRAY
17711: PPUSH
17712: CALL_OW 111
// AddComHold ( i ) ;
17716: LD_VAR 0 1
17720: PPUSH
17721: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
17725: LD_VAR 0 6
17729: PUSH
17730: LD_INT 1
17732: EQUAL
17733: PUSH
17734: LD_VAR 0 1
17738: PPUSH
17739: CALL_OW 256
17743: PUSH
17744: LD_INT 1000
17746: EQUAL
17747: AND
17748: IFFALSE 17762
// SetTag ( i , 0 ) ;
17750: LD_VAR 0 1
17754: PPUSH
17755: LD_INT 0
17757: PPUSH
17758: CALL_OW 109
// if not tag then
17762: LD_VAR 0 6
17766: NOT
17767: IFFALSE 17939
// begin undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
17769: LD_ADDR_VAR 0 3
17773: PUSH
17774: LD_EXP 67
17778: PPUSH
17779: LD_INT 57
17781: PUSH
17782: EMPTY
17783: LIST
17784: PPUSH
17785: CALL_OW 70
17789: ST_TO_ADDR
// if undone then
17790: LD_VAR 0 3
17794: IFFALSE 17816
// begin ComComplete ( i , undone [ 1 ] ) ;
17796: LD_VAR 0 1
17800: PPUSH
17801: LD_VAR 0 3
17805: PUSH
17806: LD_INT 1
17808: ARRAY
17809: PPUSH
17810: CALL 62813 0 2
// continue ;
17814: GO 17634
// end ; if cr or tmp or Count ( ruBuildings2 ) then
17816: LD_VAR 0 8
17820: PUSH
17821: LD_VAR 0 2
17825: OR
17826: PUSH
17827: LD_EXP 77
17831: PPUSH
17832: CALL 56715 0 1
17836: OR
17837: IFFALSE 17913
// begin if IsInUnit ( i ) then
17839: LD_VAR 0 1
17843: PPUSH
17844: CALL_OW 310
17848: IFFALSE 17859
// ComExitBuilding ( i ) ;
17850: LD_VAR 0 1
17854: PPUSH
17855: CALL_OW 122
// if tmp then
17859: LD_VAR 0 2
17863: IFFALSE 17879
// SetTag ( i , tRepair ) else
17865: LD_VAR 0 1
17869: PPUSH
17870: LD_INT 3
17872: PPUSH
17873: CALL_OW 109
17877: GO 17911
// if cr then
17879: LD_VAR 0 8
17883: IFFALSE 17899
// SetTag ( i , tCrates ) else
17885: LD_VAR 0 1
17889: PPUSH
17890: LD_INT 2
17892: PPUSH
17893: CALL_OW 109
17897: GO 17911
// SetTag ( i , tBuild ) ;
17899: LD_VAR 0 1
17903: PPUSH
17904: LD_INT 5
17906: PPUSH
17907: CALL_OW 109
// end else
17911: GO 17939
// if not IsInUnit ( i ) then
17913: LD_VAR 0 1
17917: PPUSH
17918: CALL_OW 310
17922: NOT
17923: IFFALSE 17939
// ComEnterUnit ( i , ruBase2 ) ;
17925: LD_VAR 0 1
17929: PPUSH
17930: LD_EXP 69
17934: PPUSH
17935: CALL_OW 120
// end ; if tag = tRepair then
17939: LD_VAR 0 6
17943: PUSH
17944: LD_INT 3
17946: EQUAL
17947: IFFALSE 18053
// begin if IsInUnit ( i ) then
17949: LD_VAR 0 1
17953: PPUSH
17954: CALL_OW 310
17958: IFFALSE 17971
// begin ComExitBuilding ( i ) ;
17960: LD_VAR 0 1
17964: PPUSH
17965: CALL_OW 122
// continue ;
17969: GO 17634
// end ; if not tmp then
17971: LD_VAR 0 2
17975: NOT
17976: IFFALSE 17992
// begin SetTag ( i , 0 ) ;
17978: LD_VAR 0 1
17982: PPUSH
17983: LD_INT 0
17985: PPUSH
17986: CALL_OW 109
// continue ;
17990: GO 17634
// end ; if not HasTask ( i ) then
17992: LD_VAR 0 1
17996: PPUSH
17997: CALL_OW 314
18001: NOT
18002: IFFALSE 18022
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
18004: LD_VAR 0 1
18008: PPUSH
18009: LD_VAR 0 2
18013: PUSH
18014: LD_INT 1
18016: ARRAY
18017: PPUSH
18018: CALL_OW 130
// if not IsInArea ( i , ruBaseArea2 ) then
18022: LD_VAR 0 1
18026: PPUSH
18027: LD_EXP 67
18031: PPUSH
18032: CALL_OW 308
18036: NOT
18037: IFFALSE 18053
// ComMoveToArea ( i , ruBaseArea2 ) ;
18039: LD_VAR 0 1
18043: PPUSH
18044: LD_EXP 67
18048: PPUSH
18049: CALL_OW 113
// end ; if tag = tBuild then
18053: LD_VAR 0 6
18057: PUSH
18058: LD_INT 5
18060: EQUAL
18061: IFFALSE 18260
// begin if IsInUnit ( i ) then
18063: LD_VAR 0 1
18067: PPUSH
18068: CALL_OW 310
18072: IFFALSE 18085
// begin ComExitBuilding ( i ) ;
18074: LD_VAR 0 1
18078: PPUSH
18079: CALL_OW 122
// continue ;
18083: GO 17634
// end ; if not Count ( ruBuildings2 ) then
18085: LD_EXP 77
18089: PPUSH
18090: CALL 56715 0 1
18094: NOT
18095: IFFALSE 18113
// begin SetTag ( i , 0 ) ;
18097: LD_VAR 0 1
18101: PPUSH
18102: LD_INT 0
18104: PPUSH
18105: CALL_OW 109
// continue ;
18109: GO 17634
// end else
18111: GO 18152
// if not CanBeBuiltOnlyResources ( ruBase2 , ruBuildings2 [ 1 ] [ 1 ] ) then
18113: LD_EXP 69
18117: PPUSH
18118: LD_EXP 77
18122: PUSH
18123: LD_INT 1
18125: ARRAY
18126: PUSH
18127: LD_INT 1
18129: ARRAY
18130: PPUSH
18131: CALL 96223 0 2
18135: NOT
18136: IFFALSE 18152
// begin SetTag ( i , 0 ) ;
18138: LD_VAR 0 1
18142: PPUSH
18143: LD_INT 0
18145: PPUSH
18146: CALL_OW 109
// continue ;
18150: GO 17634
// end ; undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
18152: LD_ADDR_VAR 0 3
18156: PUSH
18157: LD_EXP 67
18161: PPUSH
18162: LD_INT 57
18164: PUSH
18165: EMPTY
18166: LIST
18167: PPUSH
18168: CALL_OW 70
18172: ST_TO_ADDR
// if undone then
18173: LD_VAR 0 3
18177: IFFALSE 18199
// begin ComComplete ( i , undone [ 1 ] ) ;
18179: LD_VAR 0 1
18183: PPUSH
18184: LD_VAR 0 3
18188: PUSH
18189: LD_INT 1
18191: ARRAY
18192: PPUSH
18193: CALL 62813 0 2
// continue ;
18197: GO 17634
// end ; ComBuild ( i , ruBuildings2 [ 1 ] [ 1 ] , ruBuildings2 [ 1 ] [ 2 ] , ruBuildings2 [ 1 ] [ 3 ] , ruBuildings2 [ 1 ] [ 4 ] ) ;
18199: LD_VAR 0 1
18203: PPUSH
18204: LD_EXP 77
18208: PUSH
18209: LD_INT 1
18211: ARRAY
18212: PUSH
18213: LD_INT 1
18215: ARRAY
18216: PPUSH
18217: LD_EXP 77
18221: PUSH
18222: LD_INT 1
18224: ARRAY
18225: PUSH
18226: LD_INT 2
18228: ARRAY
18229: PPUSH
18230: LD_EXP 77
18234: PUSH
18235: LD_INT 1
18237: ARRAY
18238: PUSH
18239: LD_INT 3
18241: ARRAY
18242: PPUSH
18243: LD_EXP 77
18247: PUSH
18248: LD_INT 1
18250: ARRAY
18251: PUSH
18252: LD_INT 4
18254: ARRAY
18255: PPUSH
18256: CALL_OW 145
// end ; if tag = tCrates then
18260: LD_VAR 0 6
18264: PUSH
18265: LD_INT 2
18267: EQUAL
18268: IFFALSE 18403
// begin if IsInUnit ( i ) then
18270: LD_VAR 0 1
18274: PPUSH
18275: CALL_OW 310
18279: IFFALSE 18292
// begin ComExitBuilding ( i ) ;
18281: LD_VAR 0 1
18285: PPUSH
18286: CALL_OW 122
// continue ;
18290: GO 17634
// end ; if not cr then
18292: LD_VAR 0 8
18296: NOT
18297: IFFALSE 18313
// begin SetTag ( i , 0 ) ;
18299: LD_VAR 0 1
18303: PPUSH
18304: LD_INT 0
18306: PPUSH
18307: CALL_OW 109
// continue ;
18311: GO 17634
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
18313: LD_VAR 0 1
18317: PPUSH
18318: CALL_OW 314
18322: NOT
18323: PUSH
18324: LD_INT 81
18326: PUSH
18327: LD_INT 3
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 92
18336: PUSH
18337: LD_VAR 0 8
18341: PUSH
18342: LD_INT 1
18344: ARRAY
18345: PUSH
18346: LD_VAR 0 8
18350: PUSH
18351: LD_INT 2
18353: ARRAY
18354: PUSH
18355: LD_INT 12
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PPUSH
18368: CALL_OW 69
18372: NOT
18373: AND
18374: IFFALSE 18403
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
18376: LD_VAR 0 1
18380: PPUSH
18381: LD_VAR 0 8
18385: PUSH
18386: LD_INT 1
18388: ARRAY
18389: PPUSH
18390: LD_VAR 0 8
18394: PUSH
18395: LD_INT 2
18397: ARRAY
18398: PPUSH
18399: CALL_OW 117
// end ; end ;
18403: GO 17634
18405: POP
18406: POP
// end ; sol := UnitFilter ( ruForces2 , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander2 ;
18407: LD_ADDR_VAR 0 10
18411: PUSH
18412: LD_EXP 60
18416: PPUSH
18417: LD_INT 2
18419: PUSH
18420: LD_INT 25
18422: PUSH
18423: LD_INT 1
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 25
18432: PUSH
18433: LD_INT 9
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 50
18447: PUSH
18448: EMPTY
18449: LIST
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PPUSH
18455: CALL_OW 72
18459: PUSH
18460: LD_EXP 62
18464: UNION
18465: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
18466: LD_ADDR_VAR 0 12
18470: PUSH
18471: LD_EXP 67
18475: PPUSH
18476: LD_INT 81
18478: PUSH
18479: LD_INT 3
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PPUSH
18486: CALL_OW 70
18490: ST_TO_ADDR
// if sol then
18491: LD_VAR 0 10
18495: IFFALSE 19019
// begin if enemyInBase then
18497: LD_VAR 0 12
18501: IFFALSE 18644
// begin for i in sol do
18503: LD_ADDR_VAR 0 1
18507: PUSH
18508: LD_VAR 0 10
18512: PUSH
18513: FOR_IN
18514: IFFALSE 18640
// begin tw := IsInUnit ( i ) ;
18516: LD_ADDR_VAR 0 7
18520: PUSH
18521: LD_VAR 0 1
18525: PPUSH
18526: CALL_OW 310
18530: ST_TO_ADDR
// if tw then
18531: LD_VAR 0 7
18535: IFFALSE 18614
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
18537: LD_VAR 0 7
18541: PUSH
18542: LD_INT 22
18544: PUSH
18545: LD_INT 3
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 101
18554: PUSH
18555: LD_INT 1
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 2
18564: PUSH
18565: LD_INT 30
18567: PUSH
18568: LD_INT 32
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 30
18577: PUSH
18578: LD_INT 31
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: LIST
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: LIST
18594: PPUSH
18595: CALL_OW 69
18599: IN
18600: NOT
18601: IFFALSE 18612
// ComExitBuilding ( i ) ;
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL_OW 122
// end else
18612: GO 18638
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
18614: LD_VAR 0 1
18618: PPUSH
18619: LD_VAR 0 12
18623: PPUSH
18624: LD_VAR 0 1
18628: PPUSH
18629: CALL_OW 74
18633: PPUSH
18634: CALL_OW 115
// end ;
18638: GO 18513
18640: POP
18641: POP
// end else
18642: GO 19019
// begin empty := FilterUnitsInArea ( ruBaseArea2 , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
18644: LD_ADDR_VAR 0 13
18648: PUSH
18649: LD_EXP 67
18653: PPUSH
18654: LD_INT 3
18656: PUSH
18657: LD_INT 62
18659: PUSH
18660: EMPTY
18661: LIST
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 2
18669: PUSH
18670: LD_INT 30
18672: PUSH
18673: LD_INT 32
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 30
18682: PUSH
18683: LD_INT 4
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 30
18692: PUSH
18693: LD_INT 5
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 30
18702: PUSH
18703: LD_INT 31
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PPUSH
18721: CALL_OW 70
18725: ST_TO_ADDR
// if empty then
18726: LD_VAR 0 13
18730: IFFALSE 18747
// empty := ReverseArray ( empty ) ;
18732: LD_ADDR_VAR 0 13
18736: PUSH
18737: LD_VAR 0 13
18741: PPUSH
18742: CALL 87591 0 1
18746: ST_TO_ADDR
// for i in sol do
18747: LD_ADDR_VAR 0 1
18751: PUSH
18752: LD_VAR 0 10
18756: PUSH
18757: FOR_IN
18758: IFFALSE 19017
// begin tag := GetTag ( i ) ;
18760: LD_ADDR_VAR 0 6
18764: PUSH
18765: LD_VAR 0 1
18769: PPUSH
18770: CALL_OW 110
18774: ST_TO_ADDR
// if tag = tMech then
18775: LD_VAR 0 6
18779: PUSH
18780: LD_INT 7
18782: EQUAL
18783: IFFALSE 18787
// continue ;
18785: GO 18757
// if GetLives ( i ) < 1000 and tag <> tHeal then
18787: LD_VAR 0 1
18791: PPUSH
18792: CALL_OW 256
18796: PUSH
18797: LD_INT 1000
18799: LESS
18800: PUSH
18801: LD_VAR 0 6
18805: PUSH
18806: LD_INT 1
18808: NONEQUAL
18809: AND
18810: IFFALSE 18862
// begin SetTag ( i , tHeal ) ;
18812: LD_VAR 0 1
18816: PPUSH
18817: LD_INT 1
18819: PPUSH
18820: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
18824: LD_VAR 0 1
18828: PPUSH
18829: LD_EXP 75
18833: PUSH
18834: LD_INT 1
18836: ARRAY
18837: PPUSH
18838: LD_EXP 75
18842: PUSH
18843: LD_INT 2
18845: ARRAY
18846: PPUSH
18847: CALL_OW 111
// AddComHold ( i ) ;
18851: LD_VAR 0 1
18855: PPUSH
18856: CALL_OW 200
// continue ;
18860: GO 18757
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
18862: LD_VAR 0 1
18866: PPUSH
18867: CALL_OW 256
18871: PUSH
18872: LD_INT 1000
18874: EQUAL
18875: PUSH
18876: LD_VAR 0 6
18880: PUSH
18881: LD_INT 1
18883: EQUAL
18884: AND
18885: IFFALSE 18901
// begin SetTag ( i , 0 ) ;
18887: LD_VAR 0 1
18891: PPUSH
18892: LD_INT 0
18894: PPUSH
18895: CALL_OW 109
// continue ;
18899: GO 18757
// end ; if HasTask ( i ) then
18901: LD_VAR 0 1
18905: PPUSH
18906: CALL_OW 314
18910: IFFALSE 18914
// continue ;
18912: GO 18757
// if not IsInUnit ( i ) and not tag and empty then
18914: LD_VAR 0 1
18918: PPUSH
18919: CALL_OW 310
18923: NOT
18924: PUSH
18925: LD_VAR 0 6
18929: NOT
18930: AND
18931: PUSH
18932: LD_VAR 0 13
18936: AND
18937: IFFALSE 19015
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
18939: LD_VAR 0 1
18943: PPUSH
18944: LD_VAR 0 13
18948: PUSH
18949: LD_INT 1
18951: ARRAY
18952: PPUSH
18953: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
18957: LD_VAR 0 13
18961: PUSH
18962: LD_INT 1
18964: ARRAY
18965: PPUSH
18966: CALL_OW 266
18970: PUSH
18971: LD_INT 5
18973: EQUAL
18974: PUSH
18975: LD_INT 50
18977: PPUSH
18978: CALL_OW 13
18982: AND
18983: IFFALSE 18997
// AddComChangeProfession ( i , class_bazooker ) ;
18985: LD_VAR 0 1
18989: PPUSH
18990: LD_INT 9
18992: PPUSH
18993: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
18997: LD_ADDR_VAR 0 13
19001: PUSH
19002: LD_VAR 0 13
19006: PPUSH
19007: LD_INT 1
19009: PPUSH
19010: CALL_OW 3
19014: ST_TO_ADDR
// end ; end ;
19015: GO 18757
19017: POP
19018: POP
// end ; end ; end ;
19019: PPOPN 16
19021: END
// every 0 0$1 trigger ruTanks and ruActiveAttacks do var i , mech , enemy ;
19022: LD_EXP 79
19026: PUSH
19027: LD_EXP 22
19031: AND
19032: IFFALSE 19599
19034: GO 19036
19036: DISABLE
19037: LD_INT 0
19039: PPUSH
19040: PPUSH
19041: PPUSH
// begin enable ;
19042: ENABLE
// if not ruTanks then
19043: LD_EXP 79
19047: NOT
19048: IFFALSE 19052
// exit ;
19050: GO 19599
// for i in ruTanks do
19052: LD_ADDR_VAR 0 1
19056: PUSH
19057: LD_EXP 79
19061: PUSH
19062: FOR_IN
19063: IFFALSE 19597
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19065: LD_VAR 0 1
19069: PPUSH
19070: CALL_OW 302
19074: NOT
19075: PUSH
19076: LD_VAR 0 1
19080: PPUSH
19081: CALL_OW 255
19085: PUSH
19086: LD_INT 3
19088: NONEQUAL
19089: OR
19090: IFFALSE 19110
// begin ruTanks := ruTanks diff i ;
19092: LD_ADDR_EXP 79
19096: PUSH
19097: LD_EXP 79
19101: PUSH
19102: LD_VAR 0 1
19106: DIFF
19107: ST_TO_ADDR
// continue ;
19108: GO 19062
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19110: LD_VAR 0 1
19114: PPUSH
19115: CALL_OW 110
19119: NOT
19120: PUSH
19121: LD_VAR 0 1
19125: PPUSH
19126: CALL_OW 110
19130: PUSH
19131: LD_INT 0
19133: EQUAL
19134: OR
19135: IFFALSE 19308
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase ) then
19137: LD_VAR 0 1
19141: PPUSH
19142: CALL_OW 262
19146: PUSH
19147: LD_INT 1
19149: EQUAL
19150: PUSH
19151: LD_VAR 0 1
19155: PPUSH
19156: CALL_OW 261
19160: PUSH
19161: LD_INT 50
19163: LESS
19164: AND
19165: PUSH
19166: LD_EXP 68
19170: PPUSH
19171: CALL_OW 302
19175: AND
19176: IFFALSE 19263
// begin ComMoveXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) ;
19178: LD_VAR 0 1
19182: PPUSH
19183: LD_EXP 68
19187: PPUSH
19188: CALL_OW 250
19192: PPUSH
19193: LD_EXP 68
19197: PPUSH
19198: CALL_OW 251
19202: PPUSH
19203: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19207: LD_INT 35
19209: PPUSH
19210: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) < 6 ;
19214: LD_VAR 0 1
19218: PPUSH
19219: LD_EXP 68
19223: PPUSH
19224: CALL_OW 250
19228: PPUSH
19229: LD_EXP 68
19233: PPUSH
19234: CALL_OW 251
19238: PPUSH
19239: CALL_OW 297
19243: PUSH
19244: LD_INT 6
19246: LESS
19247: IFFALSE 19207
// SetFuel ( i , 100 ) ;
19249: LD_VAR 0 1
19253: PPUSH
19254: LD_INT 100
19256: PPUSH
19257: CALL_OW 240
// end else
19261: GO 19308
// if not IsInArea ( i , ruParkingArea ) then
19263: LD_VAR 0 1
19267: PPUSH
19268: LD_EXP 82
19272: PPUSH
19273: CALL_OW 308
19277: NOT
19278: IFFALSE 19296
// ComMoveToArea ( i , ruParkingArea ) else
19280: LD_VAR 0 1
19284: PPUSH
19285: LD_EXP 82
19289: PPUSH
19290: CALL_OW 113
19294: GO 19308
// SetTag ( i , tParking ) ;
19296: LD_VAR 0 1
19300: PPUSH
19301: LD_INT 12
19303: PPUSH
19304: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
19308: LD_VAR 0 1
19312: PPUSH
19313: CALL_OW 110
19317: PUSH
19318: LD_INT 12
19320: EQUAL
19321: IFFALSE 19451
// begin if GetLives ( i ) < 650 then
19323: LD_VAR 0 1
19327: PPUSH
19328: CALL_OW 256
19332: PUSH
19333: LD_INT 650
19335: LESS
19336: IFFALSE 19428
// begin if not IsDrivenBy ( i ) then
19338: LD_VAR 0 1
19342: PPUSH
19343: CALL_OW 311
19347: NOT
19348: IFFALSE 19352
// continue ;
19350: GO 19062
// mech := IsDrivenBy ( i ) ;
19352: LD_ADDR_VAR 0 2
19356: PUSH
19357: LD_VAR 0 1
19361: PPUSH
19362: CALL_OW 311
19366: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19367: LD_VAR 0 2
19371: PPUSH
19372: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19376: LD_VAR 0 2
19380: PPUSH
19381: LD_VAR 0 1
19385: PPUSH
19386: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19390: LD_INT 35
19392: PPUSH
19393: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19397: LD_VAR 0 1
19401: PPUSH
19402: CALL_OW 256
19406: PUSH
19407: LD_INT 1000
19409: EQUAL
19410: IFFALSE 19390
// ComEnterUnit ( mech , i ) ;
19412: LD_VAR 0 2
19416: PPUSH
19417: LD_VAR 0 1
19421: PPUSH
19422: CALL_OW 120
// end else
19426: GO 19451
// if IsDrivenBy ( i ) then
19428: LD_VAR 0 1
19432: PPUSH
19433: CALL_OW 311
19437: IFFALSE 19451
// SetTag ( i , tAttack ) ;
19439: LD_VAR 0 1
19443: PPUSH
19444: LD_INT 13
19446: PPUSH
19447: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
19451: LD_VAR 0 1
19455: PPUSH
19456: CALL_OW 110
19460: PUSH
19461: LD_INT 13
19463: EQUAL
19464: IFFALSE 19595
// begin enemy := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
19466: LD_ADDR_VAR 0 3
19470: PUSH
19471: LD_EXP 66
19475: PPUSH
19476: LD_INT 81
19478: PUSH
19479: LD_INT 3
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PPUSH
19486: CALL_OW 70
19490: ST_TO_ADDR
// if GetLives ( i ) < 650 then
19491: LD_VAR 0 1
19495: PPUSH
19496: CALL_OW 256
19500: PUSH
19501: LD_INT 650
19503: LESS
19504: IFFALSE 19529
// begin ComStop ( i ) ;
19506: LD_VAR 0 1
19510: PPUSH
19511: CALL_OW 141
// SetTag ( i , 0 ) ;
19515: LD_VAR 0 1
19519: PPUSH
19520: LD_INT 0
19522: PPUSH
19523: CALL_OW 109
// continue ;
19527: GO 19062
// end ; if enemy then
19529: LD_VAR 0 3
19533: IFFALSE 19573
// begin if not HasTask ( i ) then
19535: LD_VAR 0 1
19539: PPUSH
19540: CALL_OW 314
19544: NOT
19545: IFFALSE 19571
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
19547: LD_VAR 0 1
19551: PPUSH
19552: LD_VAR 0 3
19556: PPUSH
19557: LD_VAR 0 1
19561: PPUSH
19562: CALL_OW 74
19566: PPUSH
19567: CALL_OW 115
// end else
19571: GO 19595
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
19573: LD_VAR 0 1
19577: PPUSH
19578: LD_INT 105
19580: PUSH
19581: LD_INT 35
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: EMPTY
19589: LIST
19590: PPUSH
19591: CALL 94908 0 2
// end ; end ;
19595: GO 19062
19597: POP
19598: POP
// end ;
19599: PPOPN 3
19601: END
// every 0 0$1 trigger ruTanks2 and ruActiveAttacks do var i , mech , enemy ;
19602: LD_EXP 80
19606: PUSH
19607: LD_EXP 22
19611: AND
19612: IFFALSE 20179
19614: GO 19616
19616: DISABLE
19617: LD_INT 0
19619: PPUSH
19620: PPUSH
19621: PPUSH
// begin enable ;
19622: ENABLE
// if not ruTanks2 then
19623: LD_EXP 80
19627: NOT
19628: IFFALSE 19632
// exit ;
19630: GO 20179
// for i in ruTanks2 do
19632: LD_ADDR_VAR 0 1
19636: PUSH
19637: LD_EXP 80
19641: PUSH
19642: FOR_IN
19643: IFFALSE 20177
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19645: LD_VAR 0 1
19649: PPUSH
19650: CALL_OW 302
19654: NOT
19655: PUSH
19656: LD_VAR 0 1
19660: PPUSH
19661: CALL_OW 255
19665: PUSH
19666: LD_INT 3
19668: NONEQUAL
19669: OR
19670: IFFALSE 19690
// begin ruTanks := ruTanks diff i ;
19672: LD_ADDR_EXP 79
19676: PUSH
19677: LD_EXP 79
19681: PUSH
19682: LD_VAR 0 1
19686: DIFF
19687: ST_TO_ADDR
// continue ;
19688: GO 19642
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19690: LD_VAR 0 1
19694: PPUSH
19695: CALL_OW 110
19699: NOT
19700: PUSH
19701: LD_VAR 0 1
19705: PPUSH
19706: CALL_OW 110
19710: PUSH
19711: LD_INT 0
19713: EQUAL
19714: OR
19715: IFFALSE 19888
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase2 ) then
19717: LD_VAR 0 1
19721: PPUSH
19722: CALL_OW 262
19726: PUSH
19727: LD_INT 1
19729: EQUAL
19730: PUSH
19731: LD_VAR 0 1
19735: PPUSH
19736: CALL_OW 261
19740: PUSH
19741: LD_INT 50
19743: LESS
19744: AND
19745: PUSH
19746: LD_EXP 69
19750: PPUSH
19751: CALL_OW 302
19755: AND
19756: IFFALSE 19843
// begin ComMoveXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) ;
19758: LD_VAR 0 1
19762: PPUSH
19763: LD_EXP 69
19767: PPUSH
19768: CALL_OW 250
19772: PPUSH
19773: LD_EXP 69
19777: PPUSH
19778: CALL_OW 251
19782: PPUSH
19783: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19787: LD_INT 35
19789: PPUSH
19790: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) < 6 ;
19794: LD_VAR 0 1
19798: PPUSH
19799: LD_EXP 69
19803: PPUSH
19804: CALL_OW 250
19808: PPUSH
19809: LD_EXP 69
19813: PPUSH
19814: CALL_OW 251
19818: PPUSH
19819: CALL_OW 297
19823: PUSH
19824: LD_INT 6
19826: LESS
19827: IFFALSE 19787
// SetFuel ( i , 100 ) ;
19829: LD_VAR 0 1
19833: PPUSH
19834: LD_INT 100
19836: PPUSH
19837: CALL_OW 240
// end else
19841: GO 19888
// if not IsInArea ( i , ruParkingArea2 ) then
19843: LD_VAR 0 1
19847: PPUSH
19848: LD_EXP 83
19852: PPUSH
19853: CALL_OW 308
19857: NOT
19858: IFFALSE 19876
// ComMoveToArea ( i , ruParkingArea2 ) else
19860: LD_VAR 0 1
19864: PPUSH
19865: LD_EXP 83
19869: PPUSH
19870: CALL_OW 113
19874: GO 19888
// SetTag ( i , tParking ) ;
19876: LD_VAR 0 1
19880: PPUSH
19881: LD_INT 12
19883: PPUSH
19884: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
19888: LD_VAR 0 1
19892: PPUSH
19893: CALL_OW 110
19897: PUSH
19898: LD_INT 12
19900: EQUAL
19901: IFFALSE 20031
// begin if GetLives ( i ) < 650 then
19903: LD_VAR 0 1
19907: PPUSH
19908: CALL_OW 256
19912: PUSH
19913: LD_INT 650
19915: LESS
19916: IFFALSE 20008
// begin if not IsDrivenBy ( i ) then
19918: LD_VAR 0 1
19922: PPUSH
19923: CALL_OW 311
19927: NOT
19928: IFFALSE 19932
// continue ;
19930: GO 19642
// mech := IsDrivenBy ( i ) ;
19932: LD_ADDR_VAR 0 2
19936: PUSH
19937: LD_VAR 0 1
19941: PPUSH
19942: CALL_OW 311
19946: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19947: LD_VAR 0 2
19951: PPUSH
19952: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19956: LD_VAR 0 2
19960: PPUSH
19961: LD_VAR 0 1
19965: PPUSH
19966: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19970: LD_INT 35
19972: PPUSH
19973: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19977: LD_VAR 0 1
19981: PPUSH
19982: CALL_OW 256
19986: PUSH
19987: LD_INT 1000
19989: EQUAL
19990: IFFALSE 19970
// ComEnterUnit ( mech , i ) ;
19992: LD_VAR 0 2
19996: PPUSH
19997: LD_VAR 0 1
20001: PPUSH
20002: CALL_OW 120
// end else
20006: GO 20031
// if IsDrivenBy ( i ) then
20008: LD_VAR 0 1
20012: PPUSH
20013: CALL_OW 311
20017: IFFALSE 20031
// SetTag ( i , tAttack ) ;
20019: LD_VAR 0 1
20023: PPUSH
20024: LD_INT 13
20026: PPUSH
20027: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
20031: LD_VAR 0 1
20035: PPUSH
20036: CALL_OW 110
20040: PUSH
20041: LD_INT 13
20043: EQUAL
20044: IFFALSE 20175
// begin enemy := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
20046: LD_ADDR_VAR 0 3
20050: PUSH
20051: LD_EXP 67
20055: PPUSH
20056: LD_INT 81
20058: PUSH
20059: LD_INT 3
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PPUSH
20066: CALL_OW 70
20070: ST_TO_ADDR
// if GetLives ( i ) < 650 then
20071: LD_VAR 0 1
20075: PPUSH
20076: CALL_OW 256
20080: PUSH
20081: LD_INT 650
20083: LESS
20084: IFFALSE 20109
// begin ComStop ( i ) ;
20086: LD_VAR 0 1
20090: PPUSH
20091: CALL_OW 141
// SetTag ( i , 0 ) ;
20095: LD_VAR 0 1
20099: PPUSH
20100: LD_INT 0
20102: PPUSH
20103: CALL_OW 109
// continue ;
20107: GO 19642
// end ; if enemy then
20109: LD_VAR 0 3
20113: IFFALSE 20153
// begin if not HasTask ( i ) then
20115: LD_VAR 0 1
20119: PPUSH
20120: CALL_OW 314
20124: NOT
20125: IFFALSE 20151
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
20127: LD_VAR 0 1
20131: PPUSH
20132: LD_VAR 0 3
20136: PPUSH
20137: LD_VAR 0 1
20141: PPUSH
20142: CALL_OW 74
20146: PPUSH
20147: CALL_OW 115
// end else
20151: GO 20175
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20153: LD_VAR 0 1
20157: PPUSH
20158: LD_INT 105
20160: PUSH
20161: LD_INT 35
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: EMPTY
20169: LIST
20170: PPUSH
20171: CALL 94908 0 2
// end ; end ;
20175: GO 19642
20177: POP
20178: POP
// end ;
20179: PPOPN 3
20181: END
// every 5 5$00 trigger Count ( ruExtraTanks ) do
20182: LD_EXP 81
20186: PPUSH
20187: CALL 56715 0 1
20191: IFFALSE 20204
20193: GO 20195
20195: DISABLE
// begin enable ;
20196: ENABLE
// RaiseSailEvent ( EExtraAttack ) ;
20197: LD_INT 106
20199: PPUSH
20200: CALL_OW 427
// end ;
20204: END
// export function RussianExtraAttack ; var i , tmp ; begin
20205: LD_INT 0
20207: PPUSH
20208: PPUSH
20209: PPUSH
// tmp := UnitFilter ( ruExtraTanks , [ f_ok ] ) ;
20210: LD_ADDR_VAR 0 3
20214: PUSH
20215: LD_EXP 81
20219: PPUSH
20220: LD_INT 50
20222: PUSH
20223: EMPTY
20224: LIST
20225: PPUSH
20226: CALL_OW 72
20230: ST_TO_ADDR
// ruExtraTanks := ruExtraTanks diff tmp ;
20231: LD_ADDR_EXP 81
20235: PUSH
20236: LD_EXP 81
20240: PUSH
20241: LD_VAR 0 3
20245: DIFF
20246: ST_TO_ADDR
// ComAgressiveMove ( tmp , 105 , 35 ) ;
20247: LD_VAR 0 3
20251: PPUSH
20252: LD_INT 105
20254: PPUSH
20255: LD_INT 35
20257: PPUSH
20258: CALL_OW 114
// wait ( 0 0$5 ) ;
20262: LD_INT 175
20264: PPUSH
20265: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20269: LD_INT 35
20271: PPUSH
20272: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20276: LD_ADDR_VAR 0 3
20280: PUSH
20281: LD_VAR 0 3
20285: PPUSH
20286: LD_INT 50
20288: PUSH
20289: EMPTY
20290: LIST
20291: PPUSH
20292: CALL_OW 72
20296: ST_TO_ADDR
// for i in tmp do
20297: LD_ADDR_VAR 0 2
20301: PUSH
20302: LD_VAR 0 3
20306: PUSH
20307: FOR_IN
20308: IFFALSE 20334
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20310: LD_VAR 0 2
20314: PPUSH
20315: LD_INT 105
20317: PUSH
20318: LD_INT 35
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: EMPTY
20326: LIST
20327: PPUSH
20328: CALL 94908 0 2
20332: GO 20307
20334: POP
20335: POP
// until not tmp ;
20336: LD_VAR 0 3
20340: NOT
20341: IFFALSE 20269
// end ;
20343: LD_VAR 0 1
20347: RET
// export function PrepareRussianAttack ( strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
20348: LD_INT 0
20350: PPUSH
20351: PPUSH
20352: PPUSH
20353: PPUSH
20354: PPUSH
20355: PPUSH
20356: PPUSH
20357: PPUSH
20358: PPUSH
20359: PPUSH
// result := [ ] ;
20360: LD_ADDR_VAR 0 2
20364: PUSH
20365: EMPTY
20366: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
20367: LD_ADDR_VAR 0 7
20371: PUSH
20372: LD_INT 4
20374: PUSH
20375: LD_INT 5
20377: PUSH
20378: LD_INT 6
20380: PUSH
20381: LD_INT 7
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: PUSH
20390: LD_OWVAR 67
20394: ARRAY
20395: ST_TO_ADDR
// area := arAttackSpawn2Area ;
20396: LD_ADDR_VAR 0 8
20400: PUSH
20401: LD_INT 19
20403: ST_TO_ADDR
// parking := ruGatPointArea ;
20404: LD_ADDR_VAR 0 9
20408: PUSH
20409: LD_INT 32
20411: ST_TO_ADDR
// dir := 5 ;
20412: LD_ADDR_VAR 0 10
20416: PUSH
20417: LD_INT 5
20419: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) then
20420: LD_VAR 0 8
20424: PPUSH
20425: LD_INT 2
20427: PUSH
20428: LD_INT 22
20430: PUSH
20431: LD_INT 0
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 22
20440: PUSH
20441: LD_INT 6
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: LIST
20452: PPUSH
20453: CALL_OW 70
20457: IFFALSE 20518
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) do
20459: LD_ADDR_VAR 0 3
20463: PUSH
20464: LD_VAR 0 8
20468: PPUSH
20469: LD_INT 2
20471: PUSH
20472: LD_INT 22
20474: PUSH
20475: LD_INT 0
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 22
20484: PUSH
20485: LD_INT 6
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: LIST
20496: PPUSH
20497: CALL_OW 70
20501: PUSH
20502: FOR_IN
20503: IFFALSE 20516
// RemoveUnit ( i ) ;
20505: LD_VAR 0 3
20509: PPUSH
20510: CALL_OW 64
20514: GO 20502
20516: POP
20517: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) then
20518: LD_VAR 0 8
20522: PPUSH
20523: LD_INT 3
20525: PUSH
20526: LD_INT 21
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 22
20542: PUSH
20543: LD_INT 1
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PPUSH
20554: CALL_OW 70
20558: IFFALSE 20622
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) do
20560: LD_ADDR_VAR 0 3
20564: PUSH
20565: LD_VAR 0 8
20569: PPUSH
20570: LD_INT 3
20572: PUSH
20573: LD_INT 21
20575: PUSH
20576: LD_INT 1
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 22
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PPUSH
20601: CALL_OW 70
20605: PUSH
20606: FOR_IN
20607: IFFALSE 20620
// KillUnit ( i ) ;
20609: LD_VAR 0 3
20613: PPUSH
20614: CALL_OW 66
20618: GO 20606
20620: POP
20621: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) then
20622: LD_VAR 0 8
20626: PPUSH
20627: LD_INT 21
20629: PUSH
20630: LD_INT 1
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 22
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PPUSH
20651: CALL_OW 70
20655: IFFALSE 20718
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) do
20657: LD_ADDR_VAR 0 3
20661: PUSH
20662: LD_VAR 0 8
20666: PPUSH
20667: LD_INT 21
20669: PUSH
20670: LD_INT 1
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 22
20679: PUSH
20680: LD_INT 1
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PPUSH
20691: CALL_OW 70
20695: PUSH
20696: FOR_IN
20697: IFFALSE 20716
// ComMoveXY ( i , 92 , 92 ) ;
20699: LD_VAR 0 3
20703: PPUSH
20704: LD_INT 92
20706: PPUSH
20707: LD_INT 92
20709: PPUSH
20710: CALL_OW 111
20714: GO 20696
20716: POP
20717: POP
// repeat wait ( 0 0$1 ) ;
20718: LD_INT 35
20720: PPUSH
20721: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
20725: LD_VAR 0 8
20729: PPUSH
20730: LD_INT 50
20732: PUSH
20733: EMPTY
20734: LIST
20735: PPUSH
20736: CALL_OW 70
20740: NOT
20741: IFFALSE 20718
// InitHC_All ( ) ;
20743: CALL_OW 584
// InitVc ;
20747: CALL_OW 20
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + strength do
20751: LD_ADDR_VAR 0 3
20755: PUSH
20756: DOUBLE
20757: LD_INT 1
20759: DEC
20760: ST_TO_ADDR
20761: LD_INT 3
20763: PUSH
20764: LD_INT 4
20766: PUSH
20767: LD_INT 4
20769: PUSH
20770: LD_INT 5
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: PUSH
20779: LD_OWVAR 67
20783: ARRAY
20784: PUSH
20785: LD_VAR 0 1
20789: PLUS
20790: PUSH
20791: FOR_TO
20792: IFFALSE 21099
// begin uc_side := 6 ;
20794: LD_ADDR_OWVAR 20
20798: PUSH
20799: LD_INT 6
20801: ST_TO_ADDR
// uc_nation := nation_russian ;
20802: LD_ADDR_OWVAR 21
20806: PUSH
20807: LD_INT 3
20809: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer , control_computer ] [ rand ( 1 , 4 ) ] ;
20810: LD_ADDR_VAR 0 11
20814: PUSH
20815: LD_INT 1
20817: PUSH
20818: LD_INT 3
20820: PUSH
20821: LD_INT 3
20823: PUSH
20824: LD_INT 3
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 1
20835: PPUSH
20836: LD_INT 4
20838: PPUSH
20839: CALL_OW 12
20843: ARRAY
20844: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
20845: LD_INT 22
20847: PUSH
20848: LD_INT 24
20850: PUSH
20851: LD_INT 23
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: LIST
20858: PUSH
20859: LD_VAR 0 3
20863: PUSH
20864: LD_INT 3
20866: MOD
20867: PUSH
20868: LD_INT 1
20870: PLUS
20871: ARRAY
20872: PPUSH
20873: LD_INT 3
20875: PUSH
20876: LD_INT 1
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 1
20885: PPUSH
20886: LD_INT 2
20888: PPUSH
20889: CALL_OW 12
20893: ARRAY
20894: PPUSH
20895: LD_VAR 0 11
20899: PPUSH
20900: LD_INT 45
20902: PUSH
20903: LD_INT 46
20905: PUSH
20906: LD_INT 43
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: LIST
20913: PUSH
20914: LD_VAR 0 3
20918: PUSH
20919: LD_INT 3
20921: MOD
20922: PUSH
20923: LD_INT 1
20925: PLUS
20926: ARRAY
20927: PPUSH
20928: LD_INT 100
20930: PPUSH
20931: CALL 59453 0 5
// veh := CreateVehicle ;
20935: LD_ADDR_VAR 0 6
20939: PUSH
20940: CALL_OW 45
20944: ST_TO_ADDR
// SetDir ( veh , dir ) ;
20945: LD_VAR 0 6
20949: PPUSH
20950: LD_VAR 0 10
20954: PPUSH
20955: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
20959: LD_VAR 0 6
20963: PPUSH
20964: LD_VAR 0 8
20968: PPUSH
20969: LD_INT 0
20971: PPUSH
20972: CALL_OW 49
// if control = control_manual then
20976: LD_VAR 0 11
20980: PUSH
20981: LD_INT 1
20983: EQUAL
20984: IFFALSE 21038
// begin uc_side := 6 ;
20986: LD_ADDR_OWVAR 20
20990: PUSH
20991: LD_INT 6
20993: ST_TO_ADDR
// uc_nation := nation_russian ;
20994: LD_ADDR_OWVAR 21
20998: PUSH
20999: LD_INT 3
21001: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
21002: LD_INT 0
21004: PPUSH
21005: LD_VAR 0 7
21009: PPUSH
21010: CALL_OW 383
// un := CreateHuman ;
21014: LD_ADDR_VAR 0 5
21018: PUSH
21019: CALL_OW 44
21023: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
21024: LD_VAR 0 5
21028: PPUSH
21029: LD_VAR 0 6
21033: PPUSH
21034: CALL_OW 52
// end ; repeat ComMoveToArea ( veh , parking ) ;
21038: LD_VAR 0 6
21042: PPUSH
21043: LD_VAR 0 9
21047: PPUSH
21048: CALL_OW 113
// wait ( 0 0$3 ) ;
21052: LD_INT 105
21054: PPUSH
21055: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
21059: LD_VAR 0 8
21063: PPUSH
21064: LD_INT 50
21066: PUSH
21067: EMPTY
21068: LIST
21069: PPUSH
21070: CALL_OW 70
21074: NOT
21075: IFFALSE 21038
// result := Join ( result , veh ) ;
21077: LD_ADDR_VAR 0 2
21081: PUSH
21082: LD_VAR 0 2
21086: PPUSH
21087: LD_VAR 0 6
21091: PPUSH
21092: CALL 92304 0 2
21096: ST_TO_ADDR
// end ;
21097: GO 20791
21099: POP
21100: POP
// for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
21101: LD_ADDR_VAR 0 3
21105: PUSH
21106: DOUBLE
21107: LD_INT 1
21109: DEC
21110: ST_TO_ADDR
21111: LD_INT 2
21113: PUSH
21114: LD_INT 2
21116: PUSH
21117: LD_INT 3
21119: PUSH
21120: LD_INT 4
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: PUSH
21129: LD_OWVAR 67
21133: ARRAY
21134: PUSH
21135: FOR_TO
21136: IFFALSE 21292
// begin uc_side := 6 ;
21138: LD_ADDR_OWVAR 20
21142: PUSH
21143: LD_INT 6
21145: ST_TO_ADDR
// uc_nation := nation_russian ;
21146: LD_ADDR_OWVAR 21
21150: PUSH
21151: LD_INT 3
21153: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
21154: LD_INT 0
21156: PPUSH
21157: LD_VAR 0 7
21161: PPUSH
21162: CALL_OW 381
// un := CreateHuman ;
21166: LD_ADDR_VAR 0 5
21170: PUSH
21171: CALL_OW 44
21175: ST_TO_ADDR
// if Prob ( [ 35 , 60 , 70 , 80 ] [ Difficulty ] ) then
21176: LD_INT 35
21178: PUSH
21179: LD_INT 60
21181: PUSH
21182: LD_INT 70
21184: PUSH
21185: LD_INT 80
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: PUSH
21194: LD_OWVAR 67
21198: ARRAY
21199: PPUSH
21200: CALL_OW 13
21204: IFFALSE 21218
// SetClass ( un , class_bazooker ) ;
21206: LD_VAR 0 5
21210: PPUSH
21211: LD_INT 9
21213: PPUSH
21214: CALL_OW 336
// SetDir ( un , dir ) ;
21218: LD_VAR 0 5
21222: PPUSH
21223: LD_VAR 0 10
21227: PPUSH
21228: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
21232: LD_VAR 0 5
21236: PPUSH
21237: LD_VAR 0 8
21241: PPUSH
21242: LD_INT 0
21244: PPUSH
21245: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
21249: LD_VAR 0 5
21253: PPUSH
21254: LD_VAR 0 9
21258: PPUSH
21259: CALL_OW 113
// wait ( 0 0$1 ) ;
21263: LD_INT 35
21265: PPUSH
21266: CALL_OW 67
// result := Join ( result , un ) ;
21270: LD_ADDR_VAR 0 2
21274: PUSH
21275: LD_VAR 0 2
21279: PPUSH
21280: LD_VAR 0 5
21284: PPUSH
21285: CALL 92304 0 2
21289: ST_TO_ADDR
// end ;
21290: GO 21135
21292: POP
21293: POP
// end ;
21294: LD_VAR 0 2
21298: RET
// export function SendRussianAttack ( wave ) ; var path , attackers , e , i , enemy ; begin
21299: LD_INT 0
21301: PPUSH
21302: PPUSH
21303: PPUSH
21304: PPUSH
21305: PPUSH
21306: PPUSH
// russianWaveAttack := Inc ( russianWaveAttack ) ;
21307: LD_ADDR_EXP 18
21311: PUSH
21312: LD_EXP 18
21316: PPUSH
21317: CALL 93665 0 1
21321: ST_TO_ADDR
// path := [ [ 99 , 91 ] , [ 78 , 50 ] , [ 91 , 45 ] ] ;
21322: LD_ADDR_VAR 0 3
21326: PUSH
21327: LD_INT 99
21329: PUSH
21330: LD_INT 91
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 78
21339: PUSH
21340: LD_INT 50
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 91
21349: PUSH
21350: LD_INT 45
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: LIST
21361: ST_TO_ADDR
// attackers := PrepareRussianAttack ( wave ) ;
21362: LD_ADDR_VAR 0 4
21366: PUSH
21367: LD_VAR 0 1
21371: PPUSH
21372: CALL 20348 0 1
21376: ST_TO_ADDR
// ComAgressiveMove ( UnitFilter ( attackers , [ f_type , unit_human ] ) , 108 , 60 ) ;
21377: LD_VAR 0 4
21381: PPUSH
21382: LD_INT 21
21384: PUSH
21385: LD_INT 1
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PPUSH
21392: CALL_OW 72
21396: PPUSH
21397: LD_INT 108
21399: PPUSH
21400: LD_INT 60
21402: PPUSH
21403: CALL_OW 114
// DRussianNextAttack ;
21407: CALL 28478 0 0
// repeat wait ( 0 0$2 ) ;
21411: LD_INT 70
21413: PPUSH
21414: CALL_OW 67
// enemy := FilterAllUnits ( [ f_enemy , 6 ] ) ;
21418: LD_ADDR_VAR 0 7
21422: PUSH
21423: LD_INT 81
21425: PUSH
21426: LD_INT 6
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PPUSH
21433: CALL_OW 69
21437: ST_TO_ADDR
// attackers := UnitFilter ( attackers , [ f_ok ] ) ;
21438: LD_ADDR_VAR 0 4
21442: PUSH
21443: LD_VAR 0 4
21447: PPUSH
21448: LD_INT 50
21450: PUSH
21451: EMPTY
21452: LIST
21453: PPUSH
21454: CALL_OW 72
21458: ST_TO_ADDR
// for i in attackers do
21459: LD_ADDR_VAR 0 6
21463: PUSH
21464: LD_VAR 0 4
21468: PUSH
21469: FOR_IN
21470: IFFALSE 21846
// begin if not IsOk ( i ) then
21472: LD_VAR 0 6
21476: PPUSH
21477: CALL_OW 302
21481: NOT
21482: IFFALSE 21502
// begin attackers := attackers diff i ;
21484: LD_ADDR_VAR 0 4
21488: PUSH
21489: LD_VAR 0 4
21493: PUSH
21494: LD_VAR 0 6
21498: DIFF
21499: ST_TO_ADDR
// continue ;
21500: GO 21469
// end ; if GetType ( i ) = unit_vehicle then
21502: LD_VAR 0 6
21506: PPUSH
21507: CALL_OW 247
21511: PUSH
21512: LD_INT 2
21514: EQUAL
21515: IFFALSE 21533
// AgressiveMove ( i , path ) else
21517: LD_VAR 0 6
21521: PPUSH
21522: LD_VAR 0 3
21526: PPUSH
21527: CALL 94908 0 2
21531: GO 21844
// begin if GetClass ( i ) = class_bazooker then
21533: LD_VAR 0 6
21537: PPUSH
21538: CALL_OW 257
21542: PUSH
21543: LD_INT 9
21545: EQUAL
21546: IFFALSE 21820
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
21548: LD_VAR 0 6
21552: PPUSH
21553: LD_VAR 0 7
21557: PPUSH
21558: LD_VAR 0 6
21562: PPUSH
21563: CALL_OW 74
21567: PPUSH
21568: CALL_OW 296
21572: PUSH
21573: LD_INT 12
21575: GREATER
21576: IFFALSE 21604
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21578: LD_VAR 0 6
21582: PPUSH
21583: LD_VAR 0 7
21587: PPUSH
21588: LD_VAR 0 6
21592: PPUSH
21593: CALL_OW 74
21597: PPUSH
21598: CALL 96522 0 2
21602: GO 21818
// begin e := NearestUnitToUnit ( enemy , i ) ;
21604: LD_ADDR_VAR 0 5
21608: PUSH
21609: LD_VAR 0 7
21613: PPUSH
21614: LD_VAR 0 6
21618: PPUSH
21619: CALL_OW 74
21623: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
21624: LD_INT 1
21626: PPUSH
21627: LD_INT 3
21629: PPUSH
21630: CALL_OW 12
21634: PUSH
21635: LD_INT 1
21637: DOUBLE
21638: EQUAL
21639: IFTRUE 21643
21641: GO 21660
21643: POP
// ComAttackUnit ( i , e ) ; 2 :
21644: LD_VAR 0 6
21648: PPUSH
21649: LD_VAR 0 5
21653: PPUSH
21654: CALL_OW 115
21658: GO 21818
21660: LD_INT 2
21662: DOUBLE
21663: EQUAL
21664: IFTRUE 21668
21666: GO 21746
21668: POP
// begin ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ;
21669: LD_VAR 0 6
21673: PPUSH
21674: LD_VAR 0 5
21678: PPUSH
21679: CALL_OW 250
21683: PPUSH
21684: LD_VAR 0 5
21688: PPUSH
21689: CALL_OW 251
21693: PPUSH
21694: CALL_OW 153
// if GetType ( e ) <> unit_building and not dialogRussianSpaceAmmo then
21698: LD_VAR 0 5
21702: PPUSH
21703: CALL_OW 247
21707: PUSH
21708: LD_INT 3
21710: NONEQUAL
21711: PUSH
21712: LD_EXP 17
21716: NOT
21717: AND
21718: IFFALSE 21744
// begin dialogRussianSpaceAmmo := true ;
21720: LD_ADDR_EXP 17
21724: PUSH
21725: LD_INT 1
21727: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21728: LD_INT 210
21730: PPUSH
21731: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21735: LD_VAR 0 5
21739: PPUSH
21740: CALL 28525 0 1
// end ; end ; 3 :
21744: GO 21818
21746: LD_INT 3
21748: DOUBLE
21749: EQUAL
21750: IFTRUE 21754
21752: GO 21817
21754: POP
// begin ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ;
21755: LD_VAR 0 6
21759: PPUSH
21760: LD_VAR 0 5
21764: PPUSH
21765: CALL_OW 250
21769: PPUSH
21770: LD_VAR 0 5
21774: PPUSH
21775: CALL_OW 251
21779: PPUSH
21780: CALL_OW 154
// if not dialogRussianSpaceAmmo then
21784: LD_EXP 17
21788: NOT
21789: IFFALSE 21815
// begin dialogRussianSpaceAmmo := true ;
21791: LD_ADDR_EXP 17
21795: PUSH
21796: LD_INT 1
21798: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21799: LD_INT 210
21801: PPUSH
21802: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21806: LD_VAR 0 5
21810: PPUSH
21811: CALL 28525 0 1
// end ; end ; end ;
21815: GO 21818
21817: POP
// end ; end else
21818: GO 21844
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
21820: LD_VAR 0 6
21824: PPUSH
21825: LD_VAR 0 7
21829: PPUSH
21830: LD_VAR 0 6
21834: PPUSH
21835: CALL_OW 74
21839: PPUSH
21840: CALL 96522 0 2
// end ; end ;
21844: GO 21469
21846: POP
21847: POP
// until not attackers ;
21848: LD_VAR 0 4
21852: NOT
21853: IFFALSE 21411
// end ;
21855: LD_VAR 0 2
21859: RET
// every 6 6$30 trigger epsilon and firstAttack do var i , un , tmp ;
21860: LD_EXP 10
21864: PUSH
21865: LD_EXP 16
21869: AND
21870: IFFALSE 21982
21872: GO 21874
21874: DISABLE
21875: LD_INT 0
21877: PPUSH
21878: PPUSH
21879: PPUSH
// begin InitHC_All ( ) ;
21880: CALL_OW 584
// for i := 1 to 3 do
21884: LD_ADDR_VAR 0 1
21888: PUSH
21889: DOUBLE
21890: LD_INT 1
21892: DEC
21893: ST_TO_ADDR
21894: LD_INT 3
21896: PUSH
21897: FOR_TO
21898: IFFALSE 21980
// begin uc_side := 6 ;
21900: LD_ADDR_OWVAR 20
21904: PUSH
21905: LD_INT 6
21907: ST_TO_ADDR
// uc_nation := nation_russian ;
21908: LD_ADDR_OWVAR 21
21912: PUSH
21913: LD_INT 3
21915: ST_TO_ADDR
// PrepareSoldier ( false , 3 ) ;
21916: LD_INT 0
21918: PPUSH
21919: LD_INT 3
21921: PPUSH
21922: CALL_OW 381
// un := CreateHuman ;
21926: LD_ADDR_VAR 0 2
21930: PUSH
21931: CALL_OW 44
21935: ST_TO_ADDR
// SetDir ( un , 2 ) ;
21936: LD_VAR 0 2
21940: PPUSH
21941: LD_INT 2
21943: PPUSH
21944: CALL_OW 233
// PlaceUnitArea ( un , ruNorthSpawnArea , false ) ;
21948: LD_VAR 0 2
21952: PPUSH
21953: LD_INT 33
21955: PPUSH
21956: LD_INT 0
21958: PPUSH
21959: CALL_OW 49
// ComAgressiveMove ( un , 52 , 16 ) ;
21963: LD_VAR 0 2
21967: PPUSH
21968: LD_INT 52
21970: PPUSH
21971: LD_INT 16
21973: PPUSH
21974: CALL_OW 114
// end ;
21978: GO 21897
21980: POP
21981: POP
// end ;
21982: PPOPN 3
21984: END
// every 5 5$00 trigger IsOk ( ruBase ) and not ruTransportDestroyed do var cargo ;
21985: LD_EXP 68
21989: PPUSH
21990: CALL_OW 302
21994: PUSH
21995: LD_EXP 78
21999: NOT
22000: AND
22001: IFFALSE 22238
22003: GO 22005
22005: DISABLE
22006: LD_INT 0
22008: PPUSH
// begin enable ;
22009: ENABLE
// uc_side := 3 ;
22010: LD_ADDR_OWVAR 20
22014: PUSH
22015: LD_INT 3
22017: ST_TO_ADDR
// uc_nation := nation_russian ;
22018: LD_ADDR_OWVAR 21
22022: PUSH
22023: LD_INT 3
22025: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
22026: LD_INT 22
22028: PPUSH
22029: LD_INT 3
22031: PPUSH
22032: LD_INT 3
22034: PPUSH
22035: LD_INT 51
22037: PPUSH
22038: LD_INT 100
22040: PPUSH
22041: CALL 59453 0 5
// cargo := CreateVehicle ;
22045: LD_ADDR_VAR 0 1
22049: PUSH
22050: CALL_OW 45
22054: ST_TO_ADDR
// SetDir ( cargo , 5 ) ;
22055: LD_VAR 0 1
22059: PPUSH
22060: LD_INT 5
22062: PPUSH
22063: CALL_OW 233
// PlaceUnitXY ( cargo , 187 , 117 , false ) ;
22067: LD_VAR 0 1
22071: PPUSH
22072: LD_INT 187
22074: PPUSH
22075: LD_INT 117
22077: PPUSH
22078: LD_INT 0
22080: PPUSH
22081: CALL_OW 48
// SetCargo ( cargo , mat_cans , 100 ) ;
22085: LD_VAR 0 1
22089: PPUSH
22090: LD_INT 1
22092: PPUSH
22093: LD_INT 100
22095: PPUSH
22096: CALL_OW 290
// ComMoveUnit ( cargo , ruBase ) ;
22100: LD_VAR 0 1
22104: PPUSH
22105: LD_EXP 68
22109: PPUSH
22110: CALL_OW 112
// AddComGive ( cargo , ruBase ) ;
22114: LD_VAR 0 1
22118: PPUSH
22119: LD_EXP 68
22123: PPUSH
22124: CALL_OW 221
// AddComMoveXY ( cargo , 187 , 117 ) ;
22128: LD_VAR 0 1
22132: PPUSH
22133: LD_INT 187
22135: PPUSH
22136: LD_INT 117
22138: PPUSH
22139: CALL_OW 171
// wait ( 0 0$10 ) ;
22143: LD_INT 350
22145: PPUSH
22146: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22150: LD_INT 35
22152: PPUSH
22153: CALL_OW 67
// if not HasTask ( cargo ) then
22157: LD_VAR 0 1
22161: PPUSH
22162: CALL_OW 314
22166: NOT
22167: IFFALSE 22184
// ComMoveXY ( cargo , 187 , 117 ) ;
22169: LD_VAR 0 1
22173: PPUSH
22174: LD_INT 187
22176: PPUSH
22177: LD_INT 117
22179: PPUSH
22180: CALL_OW 111
// until IsDead ( cargo ) or IsAt ( cargo , 187 , 117 ) ;
22184: LD_VAR 0 1
22188: PPUSH
22189: CALL_OW 301
22193: PUSH
22194: LD_VAR 0 1
22198: PPUSH
22199: LD_INT 187
22201: PPUSH
22202: LD_INT 117
22204: PPUSH
22205: CALL_OW 307
22209: OR
22210: IFFALSE 22150
// if IsAt ( cargo , 187 , 117 ) then
22212: LD_VAR 0 1
22216: PPUSH
22217: LD_INT 187
22219: PPUSH
22220: LD_INT 117
22222: PPUSH
22223: CALL_OW 307
22227: IFFALSE 22238
// RemoveUnit ( cargo ) ;
22229: LD_VAR 0 1
22233: PPUSH
22234: CALL_OW 64
// end ; end_of_file
22238: PPOPN 1
22240: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
22241: LD_VAR 0 1
22245: PPUSH
22246: CALL 49719 0 1
// if unit = Dietrich and not arabianAttack then
22250: LD_VAR 0 1
22254: PUSH
22255: LD_EXP 50
22259: EQUAL
22260: PUSH
22261: LD_EXP 4
22265: NOT
22266: AND
22267: IFFALSE 22276
// YouLost ( ArabDefeated ) ;
22269: LD_STRING ArabDefeated
22271: PPUSH
22272: CALL_OW 104
// if unit in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) and not arabianAttack then
22276: LD_VAR 0 1
22280: PUSH
22281: LD_INT 22
22283: PUSH
22284: LD_INT 2
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 25
22293: PUSH
22294: LD_INT 4
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PPUSH
22305: CALL_OW 69
22309: IN
22310: PUSH
22311: LD_EXP 4
22315: NOT
22316: AND
22317: IFFALSE 22326
// YouLost ( ArabDefeated ) ;
22319: LD_STRING ArabDefeated
22321: PPUSH
22322: CALL_OW 104
// if unit in JMMSquad then
22326: LD_VAR 0 1
22330: PUSH
22331: LD_EXP 45
22335: IN
22336: IFFALSE 22354
// JMMSquad := JMMSquad diff unit ;
22338: LD_ADDR_EXP 45
22342: PUSH
22343: LD_EXP 45
22347: PUSH
22348: LD_VAR 0 1
22352: DIFF
22353: ST_TO_ADDR
// if unit = Truman then
22354: LD_VAR 0 1
22358: PUSH
22359: LD_EXP 43
22363: EQUAL
22364: IFFALSE 22373
// YouLost ( Powell ) ;
22366: LD_STRING Powell
22368: PPUSH
22369: CALL_OW 104
// if unit = JMM then
22373: LD_VAR 0 1
22377: PUSH
22378: LD_EXP 23
22382: EQUAL
22383: IFFALSE 22392
// YouLost ( JMM ) ;
22385: LD_STRING JMM
22387: PPUSH
22388: CALL_OW 104
// if unit in arEscapist then
22392: LD_VAR 0 1
22396: PUSH
22397: LD_EXP 56
22401: IN
22402: IFFALSE 22420
// arEscapist := arEscapist diff unit ;
22404: LD_ADDR_EXP 56
22408: PUSH
22409: LD_EXP 56
22413: PUSH
22414: LD_VAR 0 1
22418: DIFF
22419: ST_TO_ADDR
// if unit in arAttackersInf then
22420: LD_VAR 0 1
22424: PUSH
22425: LD_EXP 57
22429: IN
22430: IFFALSE 22448
// arAttackersInf := arAttackersInf diff unit ;
22432: LD_ADDR_EXP 57
22436: PUSH
22437: LD_EXP 57
22441: PUSH
22442: LD_VAR 0 1
22446: DIFF
22447: ST_TO_ADDR
// if unit in arAttackersVeh then
22448: LD_VAR 0 1
22452: PUSH
22453: LD_EXP 58
22457: IN
22458: IFFALSE 22476
// arAttackersVeh := arAttackersVeh diff unit ;
22460: LD_ADDR_EXP 58
22464: PUSH
22465: LD_EXP 58
22469: PUSH
22470: LD_VAR 0 1
22474: DIFF
22475: ST_TO_ADDR
// if unit = Khatam then
22476: LD_VAR 0 1
22480: PUSH
22481: LD_EXP 36
22485: EQUAL
22486: IFFALSE 22496
// khatamStatus := false ;
22488: LD_ADDR_EXP 5
22492: PUSH
22493: LD_INT 0
22495: ST_TO_ADDR
// if unit = epsilon then
22496: LD_VAR 0 1
22500: PUSH
22501: LD_EXP 10
22505: EQUAL
22506: IFFALSE 22537
// begin hasBase := false ;
22508: LD_ADDR_EXP 9
22512: PUSH
22513: LD_INT 0
22515: ST_TO_ADDR
// epsilon := 0 ;
22516: LD_ADDR_EXP 10
22520: PUSH
22521: LD_INT 0
22523: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
22524: LD_INT 0
22526: PPUSH
22527: LD_INT 1
22529: PPUSH
22530: LD_INT 1
22532: PPUSH
22533: CALL_OW 324
// end ; if unit = Khatam then
22537: LD_VAR 0 1
22541: PUSH
22542: LD_EXP 36
22546: EQUAL
22547: IFFALSE 22559
// SaveVariable ( 0 , 10_KhatamStatus_1 ) ;
22549: LD_INT 0
22551: PPUSH
22552: LD_STRING 10_KhatamStatus_1
22554: PPUSH
22555: CALL_OW 39
// if unit in ruForces then
22559: LD_VAR 0 1
22563: PUSH
22564: LD_EXP 59
22568: IN
22569: IFFALSE 22587
// ruForces := ruForces diff unit ;
22571: LD_ADDR_EXP 59
22575: PUSH
22576: LD_EXP 59
22580: PUSH
22581: LD_VAR 0 1
22585: DIFF
22586: ST_TO_ADDR
// if unit in ruForces2 then
22587: LD_VAR 0 1
22591: PUSH
22592: LD_EXP 60
22596: IN
22597: IFFALSE 22615
// ruForces2 := ruForces2 diff unit ;
22599: LD_ADDR_EXP 60
22603: PUSH
22604: LD_EXP 60
22608: PUSH
22609: LD_VAR 0 1
22613: DIFF
22614: ST_TO_ADDR
// if unit in ruTanks then
22615: LD_VAR 0 1
22619: PUSH
22620: LD_EXP 79
22624: IN
22625: IFFALSE 22643
// ruTanks := ruTanks diff unit ;
22627: LD_ADDR_EXP 79
22631: PUSH
22632: LD_EXP 79
22636: PUSH
22637: LD_VAR 0 1
22641: DIFF
22642: ST_TO_ADDR
// if unit in ruTanks2 then
22643: LD_VAR 0 1
22647: PUSH
22648: LD_EXP 80
22652: IN
22653: IFFALSE 22671
// ruTanks2 := ruTanks2 diff unit ;
22655: LD_ADDR_EXP 80
22659: PUSH
22660: LD_EXP 80
22664: PUSH
22665: LD_VAR 0 1
22669: DIFF
22670: ST_TO_ADDR
// if unit in ruExtraTanks then
22671: LD_VAR 0 1
22675: PUSH
22676: LD_EXP 81
22680: IN
22681: IFFALSE 22699
// ruExtraTanks := ruExtraTanks diff unit ;
22683: LD_ADDR_EXP 81
22687: PUSH
22688: LD_EXP 81
22692: PUSH
22693: LD_VAR 0 1
22697: DIFF
22698: ST_TO_ADDR
// if unit in ruMech then
22699: LD_VAR 0 1
22703: PUSH
22704: LD_EXP 63
22708: IN
22709: IFFALSE 22727
// ruMech := ruMech diff unit ;
22711: LD_ADDR_EXP 63
22715: PUSH
22716: LD_EXP 63
22720: PUSH
22721: LD_VAR 0 1
22725: DIFF
22726: ST_TO_ADDR
// if unit in ruMech2 then
22727: LD_VAR 0 1
22731: PUSH
22732: LD_EXP 64
22736: IN
22737: IFFALSE 22755
// ruMech2 := ruMech2 diff unit ;
22739: LD_ADDR_EXP 64
22743: PUSH
22744: LD_EXP 64
22748: PUSH
22749: LD_VAR 0 1
22753: DIFF
22754: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 3 then
22755: LD_VAR 0 1
22759: PPUSH
22760: CALL_OW 266
22764: PUSH
22765: LD_INT 32
22767: PUSH
22768: LD_INT 33
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: IN
22775: PUSH
22776: LD_VAR 0 1
22780: PPUSH
22781: CALL_OW 255
22785: PUSH
22786: LD_INT 3
22788: EQUAL
22789: AND
22790: IFFALSE 22946
// begin if IsInArea ( unit , ruBaseArea ) then
22792: LD_VAR 0 1
22796: PPUSH
22797: LD_EXP 66
22801: PPUSH
22802: CALL_OW 308
22806: IFFALSE 22869
// ruBuildings := Join ( ruBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
22808: LD_ADDR_EXP 76
22812: PUSH
22813: LD_EXP 76
22817: PPUSH
22818: LD_VAR 0 1
22822: PPUSH
22823: CALL_OW 266
22827: PUSH
22828: LD_VAR 0 1
22832: PPUSH
22833: CALL_OW 250
22837: PUSH
22838: LD_VAR 0 1
22842: PPUSH
22843: CALL_OW 251
22847: PUSH
22848: LD_VAR 0 1
22852: PPUSH
22853: CALL_OW 254
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: PPUSH
22864: CALL 92304 0 2
22868: ST_TO_ADDR
// if IsInArea ( unit , ruBaseArea2 ) then
22869: LD_VAR 0 1
22873: PPUSH
22874: LD_EXP 67
22878: PPUSH
22879: CALL_OW 308
22883: IFFALSE 22946
// ruBuildings2 := Join ( ruBuildings2 , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
22885: LD_ADDR_EXP 77
22889: PUSH
22890: LD_EXP 77
22894: PPUSH
22895: LD_VAR 0 1
22899: PPUSH
22900: CALL_OW 266
22904: PUSH
22905: LD_VAR 0 1
22909: PPUSH
22910: CALL_OW 250
22914: PUSH
22915: LD_VAR 0 1
22919: PPUSH
22920: CALL_OW 251
22924: PUSH
22925: LD_VAR 0 1
22929: PPUSH
22930: CALL_OW 254
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: PPUSH
22941: CALL 92304 0 2
22945: ST_TO_ADDR
// end ; if unit in FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) then
22946: LD_VAR 0 1
22950: PUSH
22951: LD_INT 22
22953: PUSH
22954: LD_INT 6
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 34
22963: PUSH
22964: LD_INT 51
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PPUSH
22975: CALL_OW 69
22979: IN
22980: IFFALSE 22990
// ruTransportDestroyed := true ;
22982: LD_ADDR_EXP 78
22986: PUSH
22987: LD_INT 1
22989: ST_TO_ADDR
// end ;
22990: PPOPN 1
22992: END
// on ClassChanged ( un , oldClass , newClass ) do begin if GetTag ( un ) = tMech then
22993: LD_VAR 0 1
22997: PPUSH
22998: CALL_OW 110
23002: PUSH
23003: LD_INT 7
23005: EQUAL
23006: IFFALSE 23020
// SetTag ( un , 0 ) ;
23008: LD_VAR 0 1
23012: PPUSH
23013: LD_INT 0
23015: PPUSH
23016: CALL_OW 109
// end ;
23020: PPOPN 3
23022: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
23023: LD_VAR 0 2
23027: PUSH
23028: LD_INT 22
23030: PUSH
23031: LD_INT 3
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 25
23040: PUSH
23041: LD_INT 3
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PPUSH
23052: CALL_OW 69
23056: IN
23057: PUSH
23058: LD_VAR 0 1
23062: PPUSH
23063: CALL_OW 266
23067: PUSH
23068: LD_INT 3
23070: EQUAL
23071: AND
23072: PUSH
23073: LD_VAR 0 2
23077: PPUSH
23078: CALL_OW 256
23082: PUSH
23083: LD_INT 1000
23085: LESS
23086: AND
23087: IFFALSE 23113
// begin SetTag ( un , 0 ) ;
23089: LD_VAR 0 2
23093: PPUSH
23094: LD_INT 0
23096: PPUSH
23097: CALL_OW 109
// SetLives ( un , 1000 ) ;
23101: LD_VAR 0 2
23105: PPUSH
23106: LD_INT 1000
23108: PPUSH
23109: CALL_OW 234
// end ; end ;
23113: PPOPN 2
23115: END
// on UnitGoesToRed ( un ) do var i ;
23116: LD_INT 0
23118: PPUSH
// begin if un = Khatam and GetSide ( Khatam ) = 8 then
23119: LD_VAR 0 1
23123: PUSH
23124: LD_EXP 36
23128: EQUAL
23129: PUSH
23130: LD_EXP 36
23134: PPUSH
23135: CALL_OW 255
23139: PUSH
23140: LD_INT 8
23142: EQUAL
23143: AND
23144: IFFALSE 23155
// KillUnit ( Khatam ) ;
23146: LD_EXP 36
23150: PPUSH
23151: CALL_OW 66
// end ;
23155: PPOPN 2
23157: END
// on SpontaneousTeleported ( un ) do begin if not seenRussianTeleport then
23158: LD_EXP 6
23162: NOT
23163: IFFALSE 23197
// begin seenRussianTeleport := true ;
23165: LD_ADDR_EXP 6
23169: PUSH
23170: LD_INT 1
23172: ST_TO_ADDR
// DTankTeleport ( GetX ( un ) , GetY ( un ) ) ;
23173: LD_VAR 0 1
23177: PPUSH
23178: CALL_OW 250
23182: PPUSH
23183: LD_VAR 0 1
23187: PPUSH
23188: CALL_OW 251
23192: PPUSH
23193: CALL 26535 0 2
// end ; end ;
23197: PPOPN 1
23199: END
// on BuildingCaptured ( captured , oldSide , unit ) do var i , x , y ;
23200: LD_INT 0
23202: PPUSH
23203: PPUSH
23204: PPUSH
// begin if oldSide = 2 and GetBType ( captured ) in [ b_lab_half , b_lab , b_depot , b_barracks ] then
23205: LD_VAR 0 2
23209: PUSH
23210: LD_INT 2
23212: EQUAL
23213: PUSH
23214: LD_VAR 0 1
23218: PPUSH
23219: CALL_OW 266
23223: PUSH
23224: LD_INT 7
23226: PUSH
23227: LD_INT 6
23229: PUSH
23230: LD_INT 0
23232: PUSH
23233: LD_INT 5
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: IN
23242: AND
23243: IFFALSE 23362
// begin for i := 1 to rand ( 2 , 4 ) do
23245: LD_ADDR_VAR 0 4
23249: PUSH
23250: DOUBLE
23251: LD_INT 1
23253: DEC
23254: ST_TO_ADDR
23255: LD_INT 2
23257: PPUSH
23258: LD_INT 4
23260: PPUSH
23261: CALL_OW 12
23265: PUSH
23266: FOR_TO
23267: IFFALSE 23360
// begin x := GetX ( captured ) - rand ( - 2 , 2 ) ;
23269: LD_ADDR_VAR 0 5
23273: PUSH
23274: LD_VAR 0 1
23278: PPUSH
23279: CALL_OW 250
23283: PUSH
23284: LD_INT 2
23286: NEG
23287: PPUSH
23288: LD_INT 2
23290: PPUSH
23291: CALL_OW 12
23295: MINUS
23296: ST_TO_ADDR
// y := GetY ( captured ) + rand ( - 2 , 2 ) ;
23297: LD_ADDR_VAR 0 6
23301: PUSH
23302: LD_VAR 0 1
23306: PPUSH
23307: CALL_OW 251
23311: PUSH
23312: LD_INT 2
23314: NEG
23315: PPUSH
23316: LD_INT 2
23318: PPUSH
23319: CALL_OW 12
23323: PLUS
23324: ST_TO_ADDR
// if ValidHex ( x , y ) then
23325: LD_VAR 0 5
23329: PPUSH
23330: LD_VAR 0 6
23334: PPUSH
23335: CALL_OW 488
23339: IFFALSE 23358
// MineExplosion ( x , y , 10 ) ;
23341: LD_VAR 0 5
23345: PPUSH
23346: LD_VAR 0 6
23350: PPUSH
23351: LD_INT 10
23353: PPUSH
23354: CALL_OW 453
// end ;
23358: GO 23266
23360: POP
23361: POP
// end ; end ;
23362: PPOPN 6
23364: END
// on VehicleConstructed ( veh , fac ) do var side ;
23365: LD_INT 0
23367: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
23368: LD_VAR 0 1
23372: PPUSH
23373: LD_VAR 0 2
23377: PPUSH
23378: CALL 49839 0 2
// side := GetSide ( fac ) ;
23382: LD_ADDR_VAR 0 3
23386: PUSH
23387: LD_VAR 0 2
23391: PPUSH
23392: CALL_OW 255
23396: ST_TO_ADDR
// if side = 3 then
23397: LD_VAR 0 3
23401: PUSH
23402: LD_INT 3
23404: EQUAL
23405: IFFALSE 23589
// begin if IsInArea ( fac , ruBaseArea ) then
23407: LD_VAR 0 2
23411: PPUSH
23412: LD_EXP 66
23416: PPUSH
23417: CALL_OW 308
23421: IFFALSE 23498
// begin ruConstructList := Delete ( ruConstructList , 1 ) ;
23423: LD_ADDR_EXP 70
23427: PUSH
23428: LD_EXP 70
23432: PPUSH
23433: LD_INT 1
23435: PPUSH
23436: CALL_OW 3
23440: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23441: LD_VAR 0 1
23445: PPUSH
23446: CALL_OW 263
23450: PUSH
23451: LD_INT 1
23453: EQUAL
23454: IFFALSE 23478
// ruTanks := Join ( ruTanks , veh ) else
23456: LD_ADDR_EXP 79
23460: PUSH
23461: LD_EXP 79
23465: PPUSH
23466: LD_VAR 0 1
23470: PPUSH
23471: CALL 92304 0 2
23475: ST_TO_ADDR
23476: GO 23498
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23478: LD_ADDR_EXP 81
23482: PUSH
23483: LD_EXP 81
23487: PPUSH
23488: LD_VAR 0 1
23492: PPUSH
23493: CALL 92304 0 2
23497: ST_TO_ADDR
// end ; if IsInArea ( fac , ruBaseArea2 ) then
23498: LD_VAR 0 2
23502: PPUSH
23503: LD_EXP 67
23507: PPUSH
23508: CALL_OW 308
23512: IFFALSE 23589
// begin ruConstructList2 := Delete ( ruConstructList2 , 1 ) ;
23514: LD_ADDR_EXP 71
23518: PUSH
23519: LD_EXP 71
23523: PPUSH
23524: LD_INT 1
23526: PPUSH
23527: CALL_OW 3
23531: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23532: LD_VAR 0 1
23536: PPUSH
23537: CALL_OW 263
23541: PUSH
23542: LD_INT 1
23544: EQUAL
23545: IFFALSE 23569
// ruTanks2 := Join ( ruTanks2 , veh ) else
23547: LD_ADDR_EXP 80
23551: PUSH
23552: LD_EXP 80
23556: PPUSH
23557: LD_VAR 0 1
23561: PPUSH
23562: CALL 92304 0 2
23566: ST_TO_ADDR
23567: GO 23589
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23569: LD_ADDR_EXP 81
23573: PUSH
23574: LD_EXP 81
23578: PPUSH
23579: LD_VAR 0 1
23583: PPUSH
23584: CALL 92304 0 2
23588: ST_TO_ADDR
// end ; end ; end ;
23589: PPOPN 3
23591: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
23592: LD_INT 0
23594: PPUSH
23595: PPUSH
23596: PPUSH
// begin side := GetSide ( driver ) ;
23597: LD_ADDR_VAR 0 7
23601: PUSH
23602: LD_VAR 0 1
23606: PPUSH
23607: CALL_OW 255
23611: ST_TO_ADDR
// if side = 5 then
23612: LD_VAR 0 7
23616: PUSH
23617: LD_INT 5
23619: EQUAL
23620: IFFALSE 23700
// begin arAttackersVeh := arAttackersVeh diff driver ;
23622: LD_ADDR_EXP 58
23626: PUSH
23627: LD_EXP 58
23631: PUSH
23632: LD_VAR 0 1
23636: DIFF
23637: ST_TO_ADDR
// ComMoveXY ( driver , 189 , 80 ) ;
23638: LD_VAR 0 1
23642: PPUSH
23643: LD_INT 189
23645: PPUSH
23646: LD_INT 80
23648: PPUSH
23649: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23653: LD_INT 35
23655: PPUSH
23656: CALL_OW 67
// if not IsOk ( driver ) then
23660: LD_VAR 0 1
23664: PPUSH
23665: CALL_OW 302
23669: NOT
23670: IFFALSE 23674
// exit ;
23672: GO 24224
// until IsAt ( driver , 189 , 80 ) ;
23674: LD_VAR 0 1
23678: PPUSH
23679: LD_INT 189
23681: PPUSH
23682: LD_INT 80
23684: PPUSH
23685: CALL_OW 307
23689: IFFALSE 23653
// RemoveUnit ( driver ) ;
23691: LD_VAR 0 1
23695: PPUSH
23696: CALL_OW 64
// end ; if side = 6 then
23700: LD_VAR 0 7
23704: PUSH
23705: LD_INT 6
23707: EQUAL
23708: IFFALSE 23766
// begin repeat ComMoveToArea ( driver , arAttackSpawn2Area ) ;
23710: LD_VAR 0 1
23714: PPUSH
23715: LD_INT 19
23717: PPUSH
23718: CALL_OW 113
// wait ( 0 0$3 ) ;
23722: LD_INT 105
23724: PPUSH
23725: CALL_OW 67
// if not IsOk ( driver ) then
23729: LD_VAR 0 1
23733: PPUSH
23734: CALL_OW 302
23738: NOT
23739: IFFALSE 23743
// exit ;
23741: GO 24224
// until IsInArea ( driver , arAttackSpawn2Area ) ;
23743: LD_VAR 0 1
23747: PPUSH
23748: LD_INT 19
23750: PPUSH
23751: CALL_OW 308
23755: IFFALSE 23710
// RemoveUnit ( driver ) ;
23757: LD_VAR 0 1
23761: PPUSH
23762: CALL_OW 64
// end ; if side = 3 then
23766: LD_VAR 0 7
23770: PUSH
23771: LD_INT 3
23773: EQUAL
23774: IFFALSE 24224
// begin if driver in ruMech then
23776: LD_VAR 0 1
23780: PUSH
23781: LD_EXP 63
23785: IN
23786: IFFALSE 24000
// begin ComMoveToArea ( driver , ruBaseArea ) ;
23788: LD_VAR 0 1
23792: PPUSH
23793: LD_EXP 66
23797: PPUSH
23798: CALL_OW 113
// SetTag ( driver , tMech ) ;
23802: LD_VAR 0 1
23806: PPUSH
23807: LD_INT 7
23809: PPUSH
23810: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
23814: LD_ADDR_VAR 0 6
23818: PUSH
23819: LD_EXP 66
23823: PPUSH
23824: LD_INT 22
23826: PUSH
23827: LD_INT 3
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 30
23836: PUSH
23837: LD_INT 3
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 50
23846: PUSH
23847: EMPTY
23848: LIST
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: LIST
23854: PPUSH
23855: CALL_OW 70
23859: ST_TO_ADDR
// if fac then
23860: LD_VAR 0 6
23864: IFFALSE 23886
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
23866: LD_VAR 0 1
23870: PPUSH
23871: LD_VAR 0 6
23875: PUSH
23876: LD_INT 1
23878: ARRAY
23879: PPUSH
23880: CALL_OW 180
// exit ;
23884: GO 24224
// end ; arm := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
23886: LD_ADDR_VAR 0 5
23890: PUSH
23891: LD_EXP 66
23895: PPUSH
23896: LD_INT 22
23898: PUSH
23899: LD_INT 3
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 2
23908: PUSH
23909: LD_INT 30
23911: PUSH
23912: LD_INT 4
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 30
23921: PUSH
23922: LD_INT 5
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 3
23936: PUSH
23937: LD_INT 62
23939: PUSH
23940: EMPTY
23941: LIST
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 50
23949: PUSH
23950: EMPTY
23951: LIST
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: PPUSH
23959: CALL_OW 70
23963: ST_TO_ADDR
// if arm then
23964: LD_VAR 0 5
23968: IFFALSE 24000
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
23970: LD_VAR 0 1
23974: PPUSH
23975: LD_VAR 0 5
23979: PUSH
23980: LD_INT 1
23982: ARRAY
23983: PPUSH
23984: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
23988: LD_VAR 0 1
23992: PPUSH
23993: LD_INT 1
23995: PPUSH
23996: CALL_OW 183
// end ; end ; if driver in ruMech2 then
24000: LD_VAR 0 1
24004: PUSH
24005: LD_EXP 64
24009: IN
24010: IFFALSE 24224
// begin ComMoveToArea ( driver , ruBaseArea2 ) ;
24012: LD_VAR 0 1
24016: PPUSH
24017: LD_EXP 67
24021: PPUSH
24022: CALL_OW 113
// SetTag ( driver , tMech ) ;
24026: LD_VAR 0 1
24030: PPUSH
24031: LD_INT 7
24033: PPUSH
24034: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
24038: LD_ADDR_VAR 0 6
24042: PUSH
24043: LD_EXP 67
24047: PPUSH
24048: LD_INT 22
24050: PUSH
24051: LD_INT 3
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 30
24060: PUSH
24061: LD_INT 3
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 50
24070: PUSH
24071: EMPTY
24072: LIST
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: LIST
24078: PPUSH
24079: CALL_OW 70
24083: ST_TO_ADDR
// if fac then
24084: LD_VAR 0 6
24088: IFFALSE 24110
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
24090: LD_VAR 0 1
24094: PPUSH
24095: LD_VAR 0 6
24099: PUSH
24100: LD_INT 1
24102: ARRAY
24103: PPUSH
24104: CALL_OW 180
// exit ;
24108: GO 24224
// end ; arm := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
24110: LD_ADDR_VAR 0 5
24114: PUSH
24115: LD_EXP 67
24119: PPUSH
24120: LD_INT 22
24122: PUSH
24123: LD_INT 3
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 2
24132: PUSH
24133: LD_INT 30
24135: PUSH
24136: LD_INT 4
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 30
24145: PUSH
24146: LD_INT 5
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 3
24160: PUSH
24161: LD_INT 62
24163: PUSH
24164: EMPTY
24165: LIST
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 50
24173: PUSH
24174: EMPTY
24175: LIST
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: PPUSH
24183: CALL_OW 70
24187: ST_TO_ADDR
// if arm then
24188: LD_VAR 0 5
24192: IFFALSE 24224
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
24194: LD_VAR 0 1
24198: PPUSH
24199: LD_VAR 0 5
24203: PUSH
24204: LD_INT 1
24206: ARRAY
24207: PPUSH
24208: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
24212: LD_VAR 0 1
24216: PPUSH
24217: LD_INT 1
24219: PPUSH
24220: CALL_OW 183
// end ; end ; end ; end ;
24224: PPOPN 7
24226: END
// on EndTheMissionRaised ( ev ) do begin if end_the_mission_allowed then
24227: LD_OWVAR 57
24231: IFFALSE 24245
// begin end_the_mission_allowed := false ;
24233: LD_ADDR_OWVAR 57
24237: PUSH
24238: LD_INT 0
24240: ST_TO_ADDR
// FinishMission ;
24241: CALL 31983 0 0
// end ; end ;
24245: PPOPN 1
24247: END
// on BuildingComplete ( b ) do var side , type ;
24248: LD_INT 0
24250: PPUSH
24251: PPUSH
// begin side := GetSide ( b ) ;
24252: LD_ADDR_VAR 0 2
24256: PUSH
24257: LD_VAR 0 1
24261: PPUSH
24262: CALL_OW 255
24266: ST_TO_ADDR
// type := GetBType ( b ) ;
24267: LD_ADDR_VAR 0 3
24271: PUSH
24272: LD_VAR 0 1
24276: PPUSH
24277: CALL_OW 266
24281: ST_TO_ADDR
// if side = 2 then
24282: LD_VAR 0 2
24286: PUSH
24287: LD_INT 2
24289: EQUAL
24290: IFFALSE 24310
// arBuildings := Delete ( arBuildings , 1 ) ;
24292: LD_ADDR_EXP 53
24296: PUSH
24297: LD_EXP 53
24301: PPUSH
24302: LD_INT 1
24304: PPUSH
24305: CALL_OW 3
24309: ST_TO_ADDR
// if side = 1 then
24310: LD_VAR 0 2
24314: PUSH
24315: LD_INT 1
24317: EQUAL
24318: IFFALSE 24380
// if type = b_depot and not hasBase then
24320: LD_VAR 0 3
24324: PUSH
24325: LD_INT 0
24327: EQUAL
24328: PUSH
24329: LD_EXP 9
24333: NOT
24334: AND
24335: IFFALSE 24380
// begin hasBase := true ;
24337: LD_ADDR_EXP 9
24341: PUSH
24342: LD_INT 1
24344: ST_TO_ADDR
// epsilon := b ;
24345: LD_ADDR_EXP 10
24349: PUSH
24350: LD_VAR 0 1
24354: ST_TO_ADDR
// SetBName ( b , epsilon ) ;
24355: LD_VAR 0 1
24359: PPUSH
24360: LD_STRING epsilon
24362: PPUSH
24363: CALL_OW 500
// SetRestrict ( b_depot , 1 , false ) ;
24367: LD_INT 0
24369: PPUSH
24370: LD_INT 1
24372: PPUSH
24373: LD_INT 0
24375: PPUSH
24376: CALL_OW 324
// end ; if side = 3 then
24380: LD_VAR 0 2
24384: PUSH
24385: LD_INT 3
24387: EQUAL
24388: IFFALSE 24674
// begin if IsInArea ( b , ruBaseArea ) then
24390: LD_VAR 0 1
24394: PPUSH
24395: LD_EXP 66
24399: PPUSH
24400: CALL_OW 308
24404: IFFALSE 24424
// ruBuildings := Delete ( ruBuildings , 1 ) ;
24406: LD_ADDR_EXP 76
24410: PUSH
24411: LD_EXP 76
24415: PPUSH
24416: LD_INT 1
24418: PPUSH
24419: CALL_OW 3
24423: ST_TO_ADDR
// if IsInArea ( b , ruBaseArea2 ) then
24424: LD_VAR 0 1
24428: PPUSH
24429: LD_EXP 67
24433: PPUSH
24434: CALL_OW 308
24438: IFFALSE 24458
// ruBuildings2 := Delete ( ruBuildings2 , 1 ) ;
24440: LD_ADDR_EXP 77
24444: PUSH
24445: LD_EXP 77
24449: PPUSH
24450: LD_INT 1
24452: PPUSH
24453: CALL_OW 3
24457: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
24458: LD_VAR 0 3
24462: PUSH
24463: LD_INT 0
24465: PUSH
24466: LD_INT 4
24468: PUSH
24469: LD_INT 2
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: LIST
24476: IN
24477: IFFALSE 24488
// ComUpgrade ( b ) ;
24479: LD_VAR 0 1
24483: PPUSH
24484: CALL_OW 146
// if type = b_lab then
24488: LD_VAR 0 3
24492: PUSH
24493: LD_INT 6
24495: EQUAL
24496: IFFALSE 24540
// if IsInArea ( b , ruBaseArea ) then
24498: LD_VAR 0 1
24502: PPUSH
24503: LD_EXP 66
24507: PPUSH
24508: CALL_OW 308
24512: IFFALSE 24528
// ComUpgradeLab ( b , b_lab_weapon ) else
24514: LD_VAR 0 1
24518: PPUSH
24519: LD_INT 10
24521: PPUSH
24522: CALL_OW 147
24526: GO 24540
// ComUpgradeLab ( b , b_lab_computer ) ;
24528: LD_VAR 0 1
24532: PPUSH
24533: LD_INT 12
24535: PPUSH
24536: CALL_OW 147
// if type = b_depot then
24540: LD_VAR 0 3
24544: PUSH
24545: LD_INT 0
24547: EQUAL
24548: IFFALSE 24674
// begin SetResourceType ( GetBase ( b ) , mat_cans , 2550 ) ;
24550: LD_VAR 0 1
24554: PPUSH
24555: CALL_OW 274
24559: PPUSH
24560: LD_INT 1
24562: PPUSH
24563: LD_INT 2550
24565: PPUSH
24566: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
24570: LD_VAR 0 1
24574: PPUSH
24575: CALL_OW 274
24579: PPUSH
24580: LD_INT 2
24582: PPUSH
24583: LD_INT 250
24585: PPUSH
24586: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 200 ) ;
24590: LD_VAR 0 1
24594: PPUSH
24595: CALL_OW 274
24599: PPUSH
24600: LD_INT 3
24602: PPUSH
24603: LD_INT 200
24605: PPUSH
24606: CALL_OW 277
// if IsInArea ( b , ruBaseArea ) then
24610: LD_VAR 0 1
24614: PPUSH
24615: LD_EXP 66
24619: PPUSH
24620: CALL_OW 308
24624: IFFALSE 24648
// begin ruBase := b ;
24626: LD_ADDR_EXP 68
24630: PUSH
24631: LD_VAR 0 1
24635: ST_TO_ADDR
// SetBName ( b , chuikov ) ;
24636: LD_VAR 0 1
24640: PPUSH
24641: LD_STRING chuikov
24643: PPUSH
24644: CALL_OW 500
// end ; if IsInArea ( b , ruBaseArea2 ) then
24648: LD_VAR 0 1
24652: PPUSH
24653: LD_EXP 67
24657: PPUSH
24658: CALL_OW 308
24662: IFFALSE 24674
// begin ruBase2 := b ;
24664: LD_ADDR_EXP 69
24668: PUSH
24669: LD_VAR 0 1
24673: ST_TO_ADDR
// end ; end ; end ; end ;
24674: PPOPN 3
24676: END
// on UpgradeComplete ( b ) do var side , type ;
24677: LD_INT 0
24679: PPUSH
24680: PPUSH
// begin side := GetSide ( b ) ;
24681: LD_ADDR_VAR 0 2
24685: PUSH
24686: LD_VAR 0 1
24690: PPUSH
24691: CALL_OW 255
24695: ST_TO_ADDR
// type := GetBType ( b ) ;
24696: LD_ADDR_VAR 0 3
24700: PUSH
24701: LD_VAR 0 1
24705: PPUSH
24706: CALL_OW 266
24710: ST_TO_ADDR
// if side = 3 then
24711: LD_VAR 0 2
24715: PUSH
24716: LD_INT 3
24718: EQUAL
24719: IFFALSE 24773
// if type = b_lab_half then
24721: LD_VAR 0 3
24725: PUSH
24726: LD_INT 7
24728: EQUAL
24729: IFFALSE 24773
// if IsInArea ( b , ruBaseArea ) then
24731: LD_VAR 0 1
24735: PPUSH
24736: LD_EXP 66
24740: PPUSH
24741: CALL_OW 308
24745: IFFALSE 24761
// ComUpgradeLab ( b , b_lab_spacetime ) else
24747: LD_VAR 0 1
24751: PPUSH
24752: LD_INT 14
24754: PPUSH
24755: CALL_OW 147
24759: GO 24773
// ComUpgradeLab ( b , b_lab_siberium ) ;
24761: LD_VAR 0 1
24765: PPUSH
24766: LD_INT 11
24768: PPUSH
24769: CALL_OW 147
// end ;
24773: PPOPN 3
24775: END
// on ResearchComplete ( tech , lab ) do var side ;
24776: LD_INT 0
24778: PPUSH
// begin side := GetSide ( lab ) ;
24779: LD_ADDR_VAR 0 3
24783: PUSH
24784: LD_VAR 0 2
24788: PPUSH
24789: CALL_OW 255
24793: ST_TO_ADDR
// if side = 2 then
24794: LD_VAR 0 3
24798: PUSH
24799: LD_INT 2
24801: EQUAL
24802: IFFALSE 24850
// begin arTech := Delete ( arTech , 1 ) ;
24804: LD_ADDR_EXP 52
24808: PUSH
24809: LD_EXP 52
24813: PPUSH
24814: LD_INT 1
24816: PPUSH
24817: CALL_OW 3
24821: ST_TO_ADDR
// if tech = tech_sibPow then
24822: LD_VAR 0 1
24826: PUSH
24827: LD_INT 21
24829: EQUAL
24830: IFFALSE 24836
// DArabTrait1 ;
24832: CALL 28897 0 0
// if tech = tech_sibEng then
24836: LD_VAR 0 1
24840: PUSH
24841: LD_INT 22
24843: EQUAL
24844: IFFALSE 24850
// DArabTrait2 ;
24846: CALL 29228 0 0
// end ; end ;
24850: PPOPN 3
24852: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
24853: LD_VAR 0 1
24857: PPUSH
24858: CALL 49823 0 1
// end ;
24862: PPOPN 1
24864: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
24865: LD_VAR 0 1
24869: PUSH
24870: LD_INT 1
24872: EQUAL
24873: PUSH
24874: LD_VAR 0 2
24878: PUSH
24879: LD_INT 2
24881: EQUAL
24882: AND
24883: PUSH
24884: LD_INT 1
24886: PPUSH
24887: LD_INT 2
24889: PPUSH
24890: CALL_OW 81
24894: PUSH
24895: LD_INT 1
24897: EQUAL
24898: AND
24899: IFFALSE 24905
// DAttackOnAlly ;
24901: CALL 26613 0 0
// end ;
24905: PPOPN 2
24907: END
// on SailEvent ( event ) do begin case event of EArabAttack :
24908: LD_VAR 0 1
24912: PUSH
24913: LD_INT 101
24915: DOUBLE
24916: EQUAL
24917: IFTRUE 24921
24919: GO 24928
24921: POP
// ArabAttack ; ERussianBaseC :
24922: CALL 7224 0 0
24926: GO 25080
24928: LD_INT 102
24930: DOUBLE
24931: EQUAL
24932: IFTRUE 24936
24934: GO 24957
24936: POP
// RussianBase ( ruForces union ruCommander , 1 ) ; ERussianBaseW :
24937: LD_EXP 59
24941: PUSH
24942: LD_EXP 61
24946: UNION
24947: PPUSH
24948: LD_INT 1
24950: PPUSH
24951: CALL 10861 0 2
24955: GO 25080
24957: LD_INT 103
24959: DOUBLE
24960: EQUAL
24961: IFTRUE 24965
24963: GO 24986
24965: POP
// RussianBase ( ruForces union ruCommander , 2 ) ; ERussianBaseE :
24966: LD_EXP 59
24970: PUSH
24971: LD_EXP 61
24975: UNION
24976: PPUSH
24977: LD_INT 2
24979: PPUSH
24980: CALL 10861 0 2
24984: GO 25080
24986: LD_INT 104
24988: DOUBLE
24989: EQUAL
24990: IFTRUE 24994
24992: GO 25015
24994: POP
// RussianBase ( ruForces union ruCommander , 3 ) ; ERussianBaseW2 :
24995: LD_EXP 59
24999: PUSH
25000: LD_EXP 61
25004: UNION
25005: PPUSH
25006: LD_INT 3
25008: PPUSH
25009: CALL 10861 0 2
25013: GO 25080
25015: LD_INT 105
25017: DOUBLE
25018: EQUAL
25019: IFTRUE 25023
25021: GO 25044
25023: POP
// RussianBase2 ( ruForces2 union ruCommander2 , 2 ) ; EExtraAttack :
25024: LD_EXP 60
25028: PUSH
25029: LD_EXP 62
25033: UNION
25034: PPUSH
25035: LD_INT 2
25037: PPUSH
25038: CALL 12370 0 2
25042: GO 25080
25044: LD_INT 106
25046: DOUBLE
25047: EQUAL
25048: IFTRUE 25052
25050: GO 25059
25052: POP
// RussianExtraAttack ; ESendRussianAttack :
25053: CALL 20205 0 0
25057: GO 25080
25059: LD_INT 107
25061: DOUBLE
25062: EQUAL
25063: IFTRUE 25067
25065: GO 25079
25067: POP
// SendRussianAttack ( russianWaveAttack ) ; end ;
25068: LD_EXP 18
25072: PPUSH
25073: CALL 21299 0 1
25077: GO 25080
25079: POP
// end ; end_of_file
25080: PPOPN 1
25082: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
25083: LD_INT 0
25085: PPUSH
25086: PPUSH
25087: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
25088: LD_ADDR_VAR 0 1
25092: PUSH
25093: LD_VAR 0 1
25097: PUSH
25098: LD_EXP 23
25102: PUSH
25103: LD_EXP 24
25107: PUSH
25108: LD_EXP 25
25112: PUSH
25113: LD_EXP 26
25117: PUSH
25118: LD_EXP 27
25122: PUSH
25123: LD_EXP 28
25127: PUSH
25128: LD_EXP 29
25132: PUSH
25133: LD_EXP 30
25137: PUSH
25138: LD_EXP 31
25142: PUSH
25143: LD_EXP 32
25147: PUSH
25148: LD_EXP 33
25152: PUSH
25153: LD_EXP 34
25157: PUSH
25158: LD_EXP 35
25162: PUSH
25163: LD_EXP 36
25167: PUSH
25168: LD_EXP 37
25172: PUSH
25173: LD_EXP 38
25177: PUSH
25178: LD_EXP 39
25182: PUSH
25183: LD_EXP 40
25187: PUSH
25188: LD_EXP 42
25192: PUSH
25193: LD_EXP 44
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: DIFF
25220: ST_TO_ADDR
// if not characters then
25221: LD_VAR 0 1
25225: NOT
25226: IFFALSE 25230
// exit ;
25228: GO 25314
// speaker := characters [ rand ( 1 , Count ( characters ) ) ] ;
25230: LD_ADDR_VAR 0 6
25234: PUSH
25235: LD_VAR 0 1
25239: PUSH
25240: LD_INT 1
25242: PPUSH
25243: LD_VAR 0 1
25247: PPUSH
25248: CALL 56715 0 1
25252: PPUSH
25253: CALL_OW 12
25257: ARRAY
25258: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
25259: LD_VAR 0 6
25263: PPUSH
25264: CALL_OW 258
25268: PUSH
25269: LD_INT 1
25271: EQUAL
25272: IFFALSE 25290
// Say ( speaker , dialogMID ) else
25274: LD_VAR 0 6
25278: PPUSH
25279: LD_VAR 0 2
25283: PPUSH
25284: CALL_OW 88
25288: GO 25304
// Say ( speaker , dialogFID ) ;
25290: LD_VAR 0 6
25294: PPUSH
25295: LD_VAR 0 3
25299: PPUSH
25300: CALL_OW 88
// result := speaker ;
25304: LD_ADDR_VAR 0 4
25308: PUSH
25309: LD_VAR 0 6
25313: ST_TO_ADDR
// end ; end_of_file
25314: LD_VAR 0 4
25318: RET
// export function Action ; begin
25319: LD_INT 0
25321: PPUSH
// InGameOn ;
25322: CALL_OW 8
// CenterNowOnXY ( 25 , 35 ) ;
25326: LD_INT 25
25328: PPUSH
25329: LD_INT 35
25331: PPUSH
25332: CALL_OW 86
// RevealFogArea ( 1 , arBaseArea ) ;
25336: LD_INT 1
25338: PPUSH
25339: LD_INT 5
25341: PPUSH
25342: CALL_OW 332
// RevealFogArea ( 1 , epsilonSpawnArea ) ;
25346: LD_INT 1
25348: PPUSH
25349: LD_INT 4
25351: PPUSH
25352: CALL_OW 332
// wait ( 0 0$1.5 ) ;
25356: LD_INT 52
25358: PPUSH
25359: CALL_OW 67
// CenterNowOnUnits ( Simms ) ;
25363: LD_EXP 33
25367: PPUSH
25368: CALL_OW 87
// wait ( 0 0$3 ) ;
25372: LD_INT 105
25374: PPUSH
25375: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
25379: LD_EXP 23
25383: PPUSH
25384: CALL_OW 310
25388: PPUSH
25389: CALL_OW 85
// wait ( 0 0$1 ) ;
25393: LD_INT 35
25395: PPUSH
25396: CALL_OW 67
// if IsOk ( Gary ) then
25400: LD_EXP 32
25404: PPUSH
25405: CALL_OW 302
25409: IFFALSE 25447
// begin Say ( Gary , D2-Gary-1 ) ;
25411: LD_EXP 32
25415: PPUSH
25416: LD_STRING D2-Gary-1
25418: PPUSH
25419: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
25423: LD_EXP 23
25427: PPUSH
25428: LD_STRING D2-JMM-1
25430: PPUSH
25431: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
25435: LD_EXP 32
25439: PPUSH
25440: LD_STRING D2-Gary-2
25442: PPUSH
25443: CALL_OW 88
// end ; InGameOff ;
25447: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
25451: LD_STRING M1
25453: PPUSH
25454: CALL_OW 337
// SaveForQuickRestart ;
25458: CALL_OW 22
// end ;
25462: LD_VAR 0 1
25466: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var i , p ;
25467: LD_EXP 23
25471: PPUSH
25472: LD_EXP 33
25476: PPUSH
25477: CALL_OW 296
25481: PUSH
25482: LD_INT 15
25484: LESS
25485: IFFALSE 26445
25487: GO 25489
25489: DISABLE
25490: LD_INT 0
25492: PPUSH
25493: PPUSH
// begin wait ( 0 0$3 ) ;
25494: LD_INT 105
25496: PPUSH
25497: CALL_OW 67
// Video ( true ) ;
25501: LD_INT 1
25503: PPUSH
25504: CALL 92276 0 1
// ComExitVehicle ( JMM ) ;
25508: LD_EXP 23
25512: PPUSH
25513: CALL_OW 121
// AddComMoveUnit ( JMM , Simms ) ;
25517: LD_EXP 23
25521: PPUSH
25522: LD_EXP 33
25526: PPUSH
25527: CALL_OW 172
// CenterNowOnUnits ( JMM ) ;
25531: LD_EXP 23
25535: PPUSH
25536: CALL_OW 87
// if Truman then
25540: LD_EXP 43
25544: IFFALSE 25681
// begin ComMoveUnit ( Truman , JMM ) ;
25546: LD_EXP 43
25550: PPUSH
25551: LD_EXP 23
25555: PPUSH
25556: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
25560: LD_INT 35
25562: PPUSH
25563: CALL_OW 67
// until GetDistUnits ( Truman , JMM ) < 6 ;
25567: LD_EXP 43
25571: PPUSH
25572: LD_EXP 23
25576: PPUSH
25577: CALL_OW 296
25581: PUSH
25582: LD_INT 6
25584: LESS
25585: IFFALSE 25560
// ComTurnUnit ( Truman , JMM ) ;
25587: LD_EXP 43
25591: PPUSH
25592: LD_EXP 23
25596: PPUSH
25597: CALL_OW 119
// ComTurnUnit ( JMM , Truman ) ;
25601: LD_EXP 23
25605: PPUSH
25606: LD_EXP 43
25610: PPUSH
25611: CALL_OW 119
// Say ( Truman , D2-Tru-1 ) ;
25615: LD_EXP 43
25619: PPUSH
25620: LD_STRING D2-Tru-1
25622: PPUSH
25623: CALL_OW 88
// Say ( JMM , D2-JMM-Tru-1 ) ;
25627: LD_EXP 23
25631: PPUSH
25632: LD_STRING D2-JMM-Tru-1
25634: PPUSH
25635: CALL_OW 88
// Say ( Truman , D2-Tru-2 ) ;
25639: LD_EXP 43
25643: PPUSH
25644: LD_STRING D2-Tru-2
25646: PPUSH
25647: CALL_OW 88
// ComMoveXY ( Truman , 79 , 41 ) ;
25651: LD_EXP 43
25655: PPUSH
25656: LD_INT 79
25658: PPUSH
25659: LD_INT 41
25661: PPUSH
25662: CALL_OW 111
// AddComMoveXY ( Truman , 17 , 31 ) ;
25666: LD_EXP 43
25670: PPUSH
25671: LD_INT 17
25673: PPUSH
25674: LD_INT 31
25676: PPUSH
25677: CALL_OW 171
// end ; AddComTurnUnit ( JMM , Simms ) ;
25681: LD_EXP 23
25685: PPUSH
25686: LD_EXP 33
25690: PPUSH
25691: CALL_OW 179
// p := 15 ;
25695: LD_ADDR_VAR 0 2
25699: PUSH
25700: LD_INT 15
25702: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25703: LD_INT 35
25705: PPUSH
25706: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
25710: LD_EXP 33
25714: PUSH
25715: LD_EXP 35
25719: PUSH
25720: LD_EXP 34
25724: PUSH
25725: LD_EXP 36
25729: PUSH
25730: LD_EXP 30
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: PPUSH
25742: LD_EXP 23
25746: PPUSH
25747: CALL_OW 112
// p := p - 1 ;
25751: LD_ADDR_VAR 0 2
25755: PUSH
25756: LD_VAR 0 2
25760: PUSH
25761: LD_INT 1
25763: MINUS
25764: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
25765: LD_EXP 23
25769: PPUSH
25770: LD_EXP 33
25774: PPUSH
25775: CALL_OW 296
25779: PUSH
25780: LD_INT 5
25782: LESS
25783: PUSH
25784: LD_VAR 0 2
25788: PUSH
25789: LD_INT 0
25791: LESSEQUAL
25792: OR
25793: IFFALSE 25703
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
25795: LD_EXP 33
25799: PUSH
25800: LD_EXP 35
25804: PUSH
25805: LD_EXP 34
25809: PUSH
25810: LD_EXP 36
25814: PUSH
25815: LD_EXP 30
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: PPUSH
25827: LD_EXP 23
25831: PPUSH
25832: CALL_OW 119
// if not IsInUnit ( JMM ) then
25836: LD_EXP 23
25840: PPUSH
25841: CALL_OW 310
25845: NOT
25846: IFFALSE 25862
// ComTurnUnit ( JMM , Simms ) ;
25848: LD_EXP 23
25852: PPUSH
25853: LD_EXP 33
25857: PPUSH
25858: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
25862: LD_EXP 33
25866: PUSH
25867: LD_EXP 35
25871: PUSH
25872: LD_EXP 34
25876: PUSH
25877: LD_EXP 36
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: PPUSH
25888: LD_EXP 23
25892: PPUSH
25893: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
25897: LD_EXP 23
25901: PUSH
25902: LD_EXP 33
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PPUSH
25911: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
25915: LD_EXP 33
25919: PPUSH
25920: LD_STRING D2a-Sim-1
25922: PPUSH
25923: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
25927: LD_EXP 23
25931: PPUSH
25932: LD_STRING D2a-JMM-1
25934: PPUSH
25935: CALL_OW 88
// if IsOk ( Joan ) then
25939: LD_EXP 35
25943: PPUSH
25944: CALL_OW 302
25948: IFFALSE 26026
// begin if not IsInUnit ( JMM ) then
25950: LD_EXP 23
25954: PPUSH
25955: CALL_OW 310
25959: NOT
25960: IFFALSE 25976
// ComTurnUnit ( JMM , Joan ) ;
25962: LD_EXP 23
25966: PPUSH
25967: LD_EXP 35
25971: PPUSH
25972: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
25976: LD_EXP 35
25980: PPUSH
25981: LD_EXP 23
25985: PPUSH
25986: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
25990: LD_EXP 35
25994: PPUSH
25995: LD_STRING D2b-Joan-1
25997: PPUSH
25998: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
26002: LD_EXP 23
26006: PPUSH
26007: LD_STRING D2b-JMM-1
26009: PPUSH
26010: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
26014: LD_EXP 35
26018: PPUSH
26019: LD_STRING D2b-Joan-2
26021: PPUSH
26022: CALL_OW 88
// end ; if IsOk ( Denis ) then
26026: LD_EXP 34
26030: PPUSH
26031: CALL_OW 302
26035: IFFALSE 26089
// begin if not IsInUnit ( JMM ) then
26037: LD_EXP 23
26041: PPUSH
26042: CALL_OW 310
26046: NOT
26047: IFFALSE 26063
// ComTurnUnit ( JMM , Denis ) ;
26049: LD_EXP 23
26053: PPUSH
26054: LD_EXP 34
26058: PPUSH
26059: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
26063: LD_EXP 34
26067: PPUSH
26068: LD_EXP 23
26072: PPUSH
26073: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
26077: LD_EXP 34
26081: PPUSH
26082: LD_STRING D2c-Den-1
26084: PPUSH
26085: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
26089: LD_EXP 30
26093: PPUSH
26094: CALL_OW 302
26098: PUSH
26099: LD_STRING 08_Kikuchi
26101: PPUSH
26102: CALL_OW 28
26106: NOT
26107: AND
26108: IFFALSE 26203
// begin repeat wait ( 0 0$1 ) ;
26110: LD_INT 35
26112: PPUSH
26113: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
26117: LD_EXP 30
26121: PPUSH
26122: LD_EXP 23
26126: PPUSH
26127: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
26131: LD_EXP 23
26135: PPUSH
26136: LD_EXP 30
26140: PPUSH
26141: CALL_OW 296
26145: PUSH
26146: LD_INT 5
26148: LESS
26149: IFFALSE 26110
// ComTurnUnit ( Kikuchi , JMM ) ;
26151: LD_EXP 30
26155: PPUSH
26156: LD_EXP 23
26160: PPUSH
26161: CALL_OW 119
// if not IsInUnit ( JMM ) then
26165: LD_EXP 23
26169: PPUSH
26170: CALL_OW 310
26174: NOT
26175: IFFALSE 26191
// ComTurnUnit ( JMM , Kikuchi ) ;
26177: LD_EXP 23
26181: PPUSH
26182: LD_EXP 30
26186: PPUSH
26187: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
26191: LD_EXP 30
26195: PPUSH
26196: LD_STRING D3b-Yam-1
26198: PPUSH
26199: CALL_OW 88
// end ; if IsOk ( Khatam ) then
26203: LD_EXP 36
26207: PPUSH
26208: CALL_OW 302
26212: IFFALSE 26278
// begin if not IsInUnit ( JMM ) then
26214: LD_EXP 23
26218: PPUSH
26219: CALL_OW 310
26223: NOT
26224: IFFALSE 26240
// ComTurnUnit ( JMM , Khatam ) ;
26226: LD_EXP 23
26230: PPUSH
26231: LD_EXP 36
26235: PPUSH
26236: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
26240: LD_EXP 36
26244: PPUSH
26245: LD_EXP 23
26249: PPUSH
26250: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
26254: LD_EXP 23
26258: PPUSH
26259: LD_STRING D2c-JMM-1
26261: PPUSH
26262: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
26266: LD_EXP 36
26270: PPUSH
26271: LD_STRING D2c-Khat-1
26273: PPUSH
26274: CALL_OW 88
// end ; Video ( false ) ;
26278: LD_INT 0
26280: PPUSH
26281: CALL 92276 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff Truman , 1 ) ;
26285: LD_INT 22
26287: PUSH
26288: LD_INT 4
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PPUSH
26295: CALL_OW 69
26299: PUSH
26300: LD_EXP 43
26304: DIFF
26305: PPUSH
26306: LD_INT 1
26308: PPUSH
26309: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
26313: LD_STRING M1a
26315: PPUSH
26316: CALL_OW 337
// SetRestrict ( b_depot , 1 , true ) ;
26320: LD_INT 0
26322: PPUSH
26323: LD_INT 1
26325: PPUSH
26326: LD_INT 1
26328: PPUSH
26329: CALL_OW 324
// joinedToEpsilon := true ;
26333: LD_ADDR_EXP 7
26337: PUSH
26338: LD_INT 1
26340: ST_TO_ADDR
// wait ( 0 0$30 ) ;
26341: LD_INT 1050
26343: PPUSH
26344: CALL_OW 67
// SpawnConvoy ;
26348: CALL 10397 0 0
// wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26352: LD_INT 25200
26354: PUSH
26355: LD_INT 2100
26357: PUSH
26358: LD_OWVAR 67
26362: MUL
26363: MINUS
26364: PPUSH
26365: CALL_OW 67
// firstAttack := true ;
26369: LD_ADDR_EXP 16
26373: PUSH
26374: LD_INT 1
26376: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26377: LD_INT 107
26379: PPUSH
26380: CALL_OW 427
// for i := 1 to Difficulty do
26384: LD_ADDR_VAR 0 1
26388: PUSH
26389: DOUBLE
26390: LD_INT 1
26392: DEC
26393: ST_TO_ADDR
26394: LD_OWVAR 67
26398: PUSH
26399: FOR_TO
26400: IFFALSE 26443
// begin wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26402: LD_INT 25200
26404: PUSH
26405: LD_INT 2100
26407: PUSH
26408: LD_OWVAR 67
26412: MUL
26413: MINUS
26414: PPUSH
26415: CALL_OW 67
// if not ruActiveAttacks then
26419: LD_EXP 22
26423: NOT
26424: IFFALSE 26434
// ruActiveAttacks := true ;
26426: LD_ADDR_EXP 22
26430: PUSH
26431: LD_INT 1
26433: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26434: LD_INT 107
26436: PPUSH
26437: CALL_OW 427
// end ;
26441: GO 26399
26443: POP
26444: POP
// end ;
26445: PPOPN 2
26447: END
// every 0 0$1 trigger IsOk ( Truman ) and joinedToEpsilon do
26448: LD_EXP 43
26452: PPUSH
26453: CALL_OW 302
26457: PUSH
26458: LD_EXP 7
26462: AND
26463: IFFALSE 26534
26465: GO 26467
26467: DISABLE
// begin enable ;
26468: ENABLE
// if not HasTask ( Truman ) then
26469: LD_EXP 43
26473: PPUSH
26474: CALL_OW 314
26478: NOT
26479: IFFALSE 26493
// ComMoveToArea ( Truman , removeArea ) ;
26481: LD_EXP 43
26485: PPUSH
26486: LD_INT 10
26488: PPUSH
26489: CALL_OW 113
// if IsAt ( Truman , 17 , 32 ) or IsInArea ( Truman , removeArea ) then
26493: LD_EXP 43
26497: PPUSH
26498: LD_INT 17
26500: PPUSH
26501: LD_INT 32
26503: PPUSH
26504: CALL_OW 307
26508: PUSH
26509: LD_EXP 43
26513: PPUSH
26514: LD_INT 10
26516: PPUSH
26517: CALL_OW 308
26521: OR
26522: IFFALSE 26534
// begin RemoveUnit ( Truman ) ;
26524: LD_EXP 43
26528: PPUSH
26529: CALL_OW 64
// disable ;
26533: DISABLE
// end ; end ;
26534: END
// export function DTankTeleport ( x , y ) ; begin
26535: LD_INT 0
26537: PPUSH
// DialogueOn ;
26538: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
26542: LD_VAR 0 1
26546: PPUSH
26547: LD_VAR 0 2
26551: PPUSH
26552: CALL_OW 86
// if IsOk ( Cyrus ) then
26556: LD_EXP 27
26560: PPUSH
26561: CALL_OW 302
26565: IFFALSE 26581
// Say ( Cyrus , D10-Cyrus-1 ) else
26567: LD_EXP 27
26571: PPUSH
26572: LD_STRING D10-Cyrus-1
26574: PPUSH
26575: CALL_OW 88
26579: GO 26604
// if IsOk ( JMM ) then
26581: LD_EXP 23
26585: PPUSH
26586: CALL_OW 302
26590: IFFALSE 26604
// Say ( JMM , D10-JMM-1 ) ;
26592: LD_EXP 23
26596: PPUSH
26597: LD_STRING D10-JMM-1
26599: PPUSH
26600: CALL_OW 88
// DialogueOff ;
26604: CALL_OW 7
// end ;
26608: LD_VAR 0 3
26612: RET
// export function DAttackOnAlly ; begin
26613: LD_INT 0
26615: PPUSH
// DialogueOn ;
26616: CALL_OW 6
// dwait ( 0 0$0.3 ) ;
26620: LD_INT 10
26622: PPUSH
26623: CALL_OW 68
// SayRadio ( Powell , D6b-Pow-1 ) ;
26627: LD_EXP 44
26631: PPUSH
26632: LD_STRING D6b-Pow-1
26634: PPUSH
26635: CALL_OW 94
// YouLost ( Powell ) ;
26639: LD_STRING Powell
26641: PPUSH
26642: CALL_OW 104
// DialogueOff ;
26646: CALL_OW 7
// end ;
26650: LD_VAR 0 1
26654: RET
// every 0 0$5 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
26655: LD_INT 5
26657: PPUSH
26658: LD_INT 22
26660: PUSH
26661: LD_INT 1
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 21
26670: PUSH
26671: LD_INT 3
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PPUSH
26682: CALL_OW 70
26686: PUSH
26687: LD_INT 5
26689: PPUSH
26690: LD_INT 22
26692: PUSH
26693: LD_INT 1
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 21
26702: PUSH
26703: LD_INT 2
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PPUSH
26714: CALL_OW 70
26718: OR
26719: PUSH
26720: LD_INT 1
26722: PPUSH
26723: LD_INT 2
26725: PPUSH
26726: CALL_OW 81
26730: PUSH
26731: LD_INT 1
26733: EQUAL
26734: AND
26735: IFFALSE 26970
26737: GO 26739
26739: DISABLE
// begin if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
26740: LD_INT 5
26742: PPUSH
26743: LD_INT 22
26745: PUSH
26746: LD_INT 1
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 21
26755: PUSH
26756: LD_INT 3
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PPUSH
26767: CALL_OW 70
26771: PUSH
26772: LD_INT 5
26774: PPUSH
26775: LD_INT 22
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 21
26787: PUSH
26788: LD_INT 2
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PPUSH
26799: CALL_OW 70
26803: OR
26804: PUSH
26805: LD_INT 1
26807: PPUSH
26808: LD_INT 2
26810: PPUSH
26811: CALL_OW 81
26815: PUSH
26816: LD_INT 1
26818: EQUAL
26819: AND
26820: IFFALSE 26829
// Query ( QAttack ) ;
26822: LD_STRING QAttack
26824: PPUSH
26825: CALL_OW 97
// wait ( 0 0$20 ) ;
26829: LD_INT 700
26831: PPUSH
26832: CALL_OW 67
// repeat wait ( 0 0$10 ) ;
26836: LD_INT 350
26838: PPUSH
26839: CALL_OW 67
// if arabianAttack then
26843: LD_EXP 4
26847: IFFALSE 26851
// exit ;
26849: GO 26970
// until ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend ;
26851: LD_INT 5
26853: PPUSH
26854: LD_INT 22
26856: PUSH
26857: LD_INT 1
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 21
26866: PUSH
26867: LD_INT 3
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PPUSH
26878: CALL_OW 70
26882: PUSH
26883: LD_INT 5
26885: PPUSH
26886: LD_INT 22
26888: PUSH
26889: LD_INT 1
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 21
26898: PUSH
26899: LD_INT 2
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PPUSH
26910: CALL_OW 70
26914: OR
26915: PUSH
26916: LD_INT 1
26918: PPUSH
26919: LD_INT 2
26921: PPUSH
26922: CALL_OW 81
26926: PUSH
26927: LD_INT 1
26929: EQUAL
26930: AND
26931: IFFALSE 26836
// InGameOn ;
26933: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
26937: LD_INT 73
26939: PPUSH
26940: LD_INT 18
26942: PPUSH
26943: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
26947: LD_EXP 44
26951: PPUSH
26952: LD_STRING D6b-Pow-1
26954: PPUSH
26955: CALL_OW 94
// YouLost ( Powell ) ;
26959: LD_STRING Powell
26961: PPUSH
26962: CALL_OW 104
// InGameOff ;
26966: CALL_OW 9
// end ;
26970: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
26971: LD_INT 12
26973: PPUSH
26974: LD_INT 1
26976: PPUSH
26977: CALL_OW 321
26981: PUSH
26982: LD_INT 2
26984: EQUAL
26985: IFFALSE 26997
26987: GO 26989
26989: DISABLE
// ChangeMissionObjectives ( M2b ) ;
26990: LD_STRING M2b
26992: PPUSH
26993: CALL_OW 337
26997: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
26998: LD_INT 32
27000: PPUSH
27001: LD_INT 1
27003: PPUSH
27004: CALL_OW 321
27008: PUSH
27009: LD_INT 2
27011: EQUAL
27012: IFFALSE 27024
27014: GO 27016
27016: DISABLE
// ChangeMissionObjectives ( M2c ) ;
27017: LD_STRING M2c
27019: PPUSH
27020: CALL_OW 337
27024: END
// every 0 0$1 trigger arabianAttack and arabianAttackSpawned and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and UnitFilter ( arAttackersVeh , [ f_ok ] ) = 0 and UnitFilter ( arAttackersInf , [ f_ok ] ) = 0 do
27025: LD_EXP 4
27029: PUSH
27030: LD_EXP 12
27034: AND
27035: PUSH
27036: LD_INT 22
27038: PUSH
27039: LD_INT 2
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 21
27048: PUSH
27049: LD_INT 1
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PPUSH
27060: CALL_OW 69
27064: PUSH
27065: LD_INT 0
27067: EQUAL
27068: AND
27069: PUSH
27070: LD_EXP 58
27074: PPUSH
27075: LD_INT 50
27077: PUSH
27078: EMPTY
27079: LIST
27080: PPUSH
27081: CALL_OW 72
27085: PUSH
27086: LD_INT 0
27088: EQUAL
27089: AND
27090: PUSH
27091: LD_EXP 57
27095: PPUSH
27096: LD_INT 50
27098: PUSH
27099: EMPTY
27100: LIST
27101: PPUSH
27102: CALL_OW 72
27106: PUSH
27107: LD_INT 0
27109: EQUAL
27110: AND
27111: IFFALSE 27131
27113: GO 27115
27115: DISABLE
// begin arabianDefeated := true ;
27116: LD_ADDR_EXP 8
27120: PUSH
27121: LD_INT 1
27123: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
27124: LD_STRING M4a
27126: PPUSH
27127: CALL_OW 337
// end ;
27131: END
// every 0 0$1 trigger GetTech ( tech_Sib1 , 1 ) = state_researched and GetTech ( tech_Sib2 , 1 ) = state_researched and GetTech ( tech_SibPow , 1 ) = state_researched and GetTech ( tech_SibEng , 1 ) = state_researched do
27132: LD_INT 54
27134: PPUSH
27135: LD_INT 1
27137: PPUSH
27138: CALL_OW 321
27142: PUSH
27143: LD_INT 2
27145: EQUAL
27146: PUSH
27147: LD_INT 55
27149: PPUSH
27150: LD_INT 1
27152: PPUSH
27153: CALL_OW 321
27157: PUSH
27158: LD_INT 2
27160: EQUAL
27161: AND
27162: PUSH
27163: LD_INT 21
27165: PPUSH
27166: LD_INT 1
27168: PPUSH
27169: CALL_OW 321
27173: PUSH
27174: LD_INT 2
27176: EQUAL
27177: AND
27178: PUSH
27179: LD_INT 22
27181: PPUSH
27182: LD_INT 1
27184: PPUSH
27185: CALL_OW 321
27189: PUSH
27190: LD_INT 2
27192: EQUAL
27193: AND
27194: IFFALSE 27206
27196: GO 27198
27198: DISABLE
// ChangeMissionObjectives ( M2a ) ;
27199: LD_STRING M2a
27201: PPUSH
27202: CALL_OW 337
27206: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) do var garySpeaker , deltaSpeaker , tmp1 , tmp2 , tmp3 ;
27207: LD_INT 22
27209: PUSH
27210: LD_INT 1
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 3
27219: PUSH
27220: LD_INT 57
27222: PUSH
27223: EMPTY
27224: LIST
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 63
27232: PUSH
27233: LD_INT 11
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: LIST
27244: PPUSH
27245: CALL_OW 69
27249: IFFALSE 28475
27251: GO 27253
27253: DISABLE
27254: LD_INT 0
27256: PPUSH
27257: PPUSH
27258: PPUSH
27259: PPUSH
27260: PPUSH
// begin garySpeaker := IsOk ( Gary ) ;
27261: LD_ADDR_VAR 0 1
27265: PUSH
27266: LD_EXP 32
27270: PPUSH
27271: CALL_OW 302
27275: ST_TO_ADDR
// deltaSpeaker := IsOk ( DeltaDoctor ) ;
27276: LD_ADDR_VAR 0 2
27280: PUSH
27281: LD_EXP 39
27285: PPUSH
27286: CALL_OW 302
27290: ST_TO_ADDR
// tmp1 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27291: LD_ADDR_VAR 0 3
27295: PUSH
27296: LD_INT 22
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 50
27308: PUSH
27309: EMPTY
27310: LIST
27311: PUSH
27312: LD_INT 25
27314: PUSH
27315: LD_INT 4
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 26
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: PPUSH
27338: CALL_OW 69
27342: PUSH
27343: LD_EXP 23
27347: PUSH
27348: LD_EXP 24
27352: PUSH
27353: LD_EXP 25
27357: PUSH
27358: LD_EXP 26
27362: PUSH
27363: LD_EXP 27
27367: PUSH
27368: LD_EXP 28
27372: PUSH
27373: LD_EXP 29
27377: PUSH
27378: LD_EXP 30
27382: PUSH
27383: LD_EXP 31
27387: PUSH
27388: LD_EXP 32
27392: PUSH
27393: LD_EXP 33
27397: PUSH
27398: LD_EXP 34
27402: PUSH
27403: LD_EXP 35
27407: PUSH
27408: LD_EXP 36
27412: PUSH
27413: LD_EXP 37
27417: PUSH
27418: LD_EXP 38
27422: PUSH
27423: LD_EXP 39
27427: PUSH
27428: LD_EXP 40
27432: PUSH
27433: LD_EXP 42
27437: PUSH
27438: LD_EXP 44
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: DIFF
27465: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27466: LD_ADDR_VAR 0 4
27470: PUSH
27471: LD_INT 22
27473: PUSH
27474: LD_INT 1
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 50
27483: PUSH
27484: EMPTY
27485: LIST
27486: PUSH
27487: LD_INT 26
27489: PUSH
27490: LD_INT 1
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 2
27499: PUSH
27500: LD_INT 25
27502: PUSH
27503: LD_INT 1
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 25
27512: PUSH
27513: LD_INT 2
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 25
27522: PUSH
27523: LD_INT 3
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: PPUSH
27542: CALL_OW 69
27546: PUSH
27547: LD_EXP 23
27551: PUSH
27552: LD_EXP 24
27556: PUSH
27557: LD_EXP 25
27561: PUSH
27562: LD_EXP 26
27566: PUSH
27567: LD_EXP 27
27571: PUSH
27572: LD_EXP 28
27576: PUSH
27577: LD_EXP 29
27581: PUSH
27582: LD_EXP 30
27586: PUSH
27587: LD_EXP 31
27591: PUSH
27592: LD_EXP 32
27596: PUSH
27597: LD_EXP 33
27601: PUSH
27602: LD_EXP 34
27606: PUSH
27607: LD_EXP 35
27611: PUSH
27612: LD_EXP 36
27616: PUSH
27617: LD_EXP 37
27621: PUSH
27622: LD_EXP 38
27626: PUSH
27627: LD_EXP 39
27631: PUSH
27632: LD_EXP 40
27636: PUSH
27637: LD_EXP 42
27641: PUSH
27642: LD_EXP 44
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: DIFF
27669: ST_TO_ADDR
// if tmp1 then
27670: LD_VAR 0 3
27674: IFFALSE 27690
// tmp1 := tmp1 [ 1 ] ;
27676: LD_ADDR_VAR 0 3
27680: PUSH
27681: LD_VAR 0 3
27685: PUSH
27686: LD_INT 1
27688: ARRAY
27689: ST_TO_ADDR
// if tmp2 then
27690: LD_VAR 0 4
27694: IFFALSE 27710
// tmp2 := tmp2 [ 1 ] ;
27696: LD_ADDR_VAR 0 4
27700: PUSH
27701: LD_VAR 0 4
27705: PUSH
27706: LD_INT 1
27708: ARRAY
27709: ST_TO_ADDR
// if ( garySpeaker or tmp2 ) and ( deltaSpeaker or tmp1 ) then
27710: LD_VAR 0 1
27714: PUSH
27715: LD_VAR 0 4
27719: OR
27720: PUSH
27721: LD_VAR 0 2
27725: PUSH
27726: LD_VAR 0 3
27730: OR
27731: AND
27732: IFFALSE 27926
// begin DialogueOn ;
27734: CALL_OW 6
// if deltaSpeaker then
27738: LD_VAR 0 2
27742: IFFALSE 27758
// Say ( DeltaDoctor , D3-Sci1-1 ) else
27744: LD_EXP 39
27748: PPUSH
27749: LD_STRING D3-Sci1-1
27751: PPUSH
27752: CALL_OW 88
27756: GO 27770
// Say ( tmp1 , D3-Sci1-1 ) ;
27758: LD_VAR 0 3
27762: PPUSH
27763: LD_STRING D3-Sci1-1
27765: PPUSH
27766: CALL_OW 88
// if garySpeaker then
27770: LD_VAR 0 1
27774: IFFALSE 27790
// Say ( Gary , D3-Gary-1 ) else
27776: LD_EXP 32
27780: PPUSH
27781: LD_STRING D3-Gary-1
27783: PPUSH
27784: CALL_OW 88
27788: GO 27802
// Say ( tmp2 , D3-Gary-1 ) ;
27790: LD_VAR 0 4
27794: PPUSH
27795: LD_STRING D3-Gary-1
27797: PPUSH
27798: CALL_OW 88
// if deltaSpeaker then
27802: LD_VAR 0 2
27806: IFFALSE 27822
// Say ( DeltaDoctor , D3-Sci1-2 ) else
27808: LD_EXP 39
27812: PPUSH
27813: LD_STRING D3-Sci1-2
27815: PPUSH
27816: CALL_OW 88
27820: GO 27834
// Say ( tmp1 , D3-Sci1-2 ) ;
27822: LD_VAR 0 3
27826: PPUSH
27827: LD_STRING D3-Sci1-2
27829: PPUSH
27830: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
27834: LD_EXP 23
27838: PPUSH
27839: LD_STRING D3-JMM-2
27841: PPUSH
27842: CALL_OW 88
// if deltaSpeaker then
27846: LD_VAR 0 2
27850: IFFALSE 27866
// Say ( DeltaDoctor , D3-Sci1-3 ) else
27852: LD_EXP 39
27856: PPUSH
27857: LD_STRING D3-Sci1-3
27859: PPUSH
27860: CALL_OW 88
27864: GO 27878
// Say ( tmp1 , D3-Sci1-3 ) ;
27866: LD_VAR 0 3
27870: PPUSH
27871: LD_STRING D3-Sci1-3
27873: PPUSH
27874: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
27878: LD_EXP 23
27882: PPUSH
27883: LD_STRING D3-JMM-3
27885: PPUSH
27886: CALL_OW 88
// if deltaSpeaker then
27890: LD_VAR 0 2
27894: IFFALSE 27910
// Say ( DeltaDoctor , D3-Sci1-4 ) else
27896: LD_EXP 39
27900: PPUSH
27901: LD_STRING D3-Sci1-4
27903: PPUSH
27904: CALL_OW 88
27908: GO 27922
// Say ( tmp1 , D3-Sci1-4 ) ;
27910: LD_VAR 0 3
27914: PPUSH
27915: LD_STRING D3-Sci1-4
27917: PPUSH
27918: CALL_OW 88
// DialogueOff ;
27922: CALL_OW 7
// end ; SetTech ( tech_LasSight , 1 , state_enabled ) ;
27926: LD_INT 12
27928: PPUSH
27929: LD_INT 1
27931: PPUSH
27932: LD_INT 1
27934: PPUSH
27935: CALL_OW 322
// SetTech ( tech_Rocket , 1 , state_enabled ) ;
27939: LD_INT 40
27941: PPUSH
27942: LD_INT 1
27944: PPUSH
27945: LD_INT 1
27947: PPUSH
27948: CALL_OW 322
// SetTech ( tech_AI , 1 , state_enabled ) ;
27952: LD_INT 32
27954: PPUSH
27955: LD_INT 1
27957: PPUSH
27958: LD_INT 1
27960: PPUSH
27961: CALL_OW 322
// SetRestrict ( b_turret , 1 , true ) ;
27965: LD_INT 33
27967: PPUSH
27968: LD_INT 1
27970: PPUSH
27971: LD_INT 1
27973: PPUSH
27974: CALL_OW 324
// SetRestrict ( b_lab_computer , 1 , true ) ;
27978: LD_INT 12
27980: PPUSH
27981: LD_INT 1
27983: PPUSH
27984: LD_INT 1
27986: PPUSH
27987: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
27991: LD_STRING M2
27993: PPUSH
27994: CALL_OW 337
// wait ( 3 3$0 ) ;
27998: LD_INT 6300
28000: PPUSH
28001: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
28005: LD_INT 35
28007: PPUSH
28008: CALL_OW 67
// until not InBattle ( 1 ) ;
28012: LD_INT 1
28014: PPUSH
28015: CALL_OW 463
28019: NOT
28020: IFFALSE 28005
// if IsOk ( Simms ) and deltaSpeaker then
28022: LD_EXP 33
28026: PPUSH
28027: CALL_OW 302
28031: PUSH
28032: LD_VAR 0 2
28036: AND
28037: IFFALSE 28206
// begin DialogueOn ;
28039: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28043: LD_EXP 33
28047: PPUSH
28048: LD_STRING D3a-Sim-1
28050: PPUSH
28051: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
28055: LD_EXP 39
28059: PPUSH
28060: LD_STRING D3a-Sci1-1
28062: PPUSH
28063: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28067: LD_EXP 33
28071: PPUSH
28072: LD_STRING D3a-Sim-2
28074: PPUSH
28075: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
28079: LD_EXP 39
28083: PPUSH
28084: LD_STRING D3a-Sci1-2
28086: PPUSH
28087: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28091: LD_EXP 33
28095: PPUSH
28096: LD_STRING D3a-Sim-3
28098: PPUSH
28099: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
28103: LD_EXP 39
28107: PPUSH
28108: LD_STRING D3a-Sci1-3
28110: PPUSH
28111: CALL_OW 88
// if IsOK ( Joan ) then
28115: LD_EXP 35
28119: PPUSH
28120: CALL_OW 302
28124: IFFALSE 28140
// Say ( Simms , D3a-Sim-4 ) else
28126: LD_EXP 33
28130: PPUSH
28131: LD_STRING D3a-Sim-4
28133: PPUSH
28134: CALL_OW 88
28138: GO 28152
// Say ( Simms , D3a-Sim-4a ) ;
28140: LD_EXP 33
28144: PPUSH
28145: LD_STRING D3a-Sim-4a
28147: PPUSH
28148: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
28152: LD_EXP 39
28156: PPUSH
28157: LD_STRING D3a-Sci1-4
28159: PPUSH
28160: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28164: LD_EXP 33
28168: PPUSH
28169: LD_STRING D3a-Sim-5
28171: PPUSH
28172: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
28176: LD_EXP 39
28180: PPUSH
28181: LD_STRING D3a-Sci1-5
28183: PPUSH
28184: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28188: LD_EXP 33
28192: PPUSH
28193: LD_STRING D3a-Sim-6
28195: PPUSH
28196: CALL_OW 88
// DialogueOff ;
28200: CALL_OW 7
// end else
28204: GO 28475
// begin tmp3 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_class , 4 ] ] ) diff [ JMM , Frank , Lisa , Simms , Khatam ] ;
28206: LD_ADDR_VAR 0 5
28210: PUSH
28211: LD_INT 22
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 26
28223: PUSH
28224: LD_INT 1
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 25
28233: PUSH
28234: LD_INT 4
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: LIST
28245: PPUSH
28246: CALL_OW 69
28250: PUSH
28251: LD_EXP 23
28255: PUSH
28256: LD_EXP 29
28260: PUSH
28261: LD_EXP 28
28265: PUSH
28266: LD_EXP 33
28270: PUSH
28271: LD_EXP 36
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: DIFF
28283: ST_TO_ADDR
// if tmp3 then
28284: LD_VAR 0 5
28288: IFFALSE 28475
// begin DialogueOn ;
28290: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28294: LD_EXP 33
28298: PPUSH
28299: LD_STRING D3a-Sim-1
28301: PPUSH
28302: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
28306: LD_VAR 0 5
28310: PUSH
28311: LD_INT 1
28313: ARRAY
28314: PPUSH
28315: LD_STRING D3a-Sci1-1
28317: PPUSH
28318: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28322: LD_EXP 33
28326: PPUSH
28327: LD_STRING D3a-Sim-2
28329: PPUSH
28330: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
28334: LD_VAR 0 5
28338: PUSH
28339: LD_INT 1
28341: ARRAY
28342: PPUSH
28343: LD_STRING D3a-Sci1-2
28345: PPUSH
28346: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28350: LD_EXP 33
28354: PPUSH
28355: LD_STRING D3a-Sim-3
28357: PPUSH
28358: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
28362: LD_VAR 0 5
28366: PUSH
28367: LD_INT 1
28369: ARRAY
28370: PPUSH
28371: LD_STRING D3a-Sci1-3
28373: PPUSH
28374: CALL_OW 88
// if IsOK ( Joan ) then
28378: LD_EXP 35
28382: PPUSH
28383: CALL_OW 302
28387: IFFALSE 28403
// Say ( Simms , D3a-Sim-4 ) else
28389: LD_EXP 33
28393: PPUSH
28394: LD_STRING D3a-Sim-4
28396: PPUSH
28397: CALL_OW 88
28401: GO 28415
// Say ( Simms , D3a-Sim-4a ) ;
28403: LD_EXP 33
28407: PPUSH
28408: LD_STRING D3a-Sim-4a
28410: PPUSH
28411: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
28415: LD_VAR 0 5
28419: PUSH
28420: LD_INT 1
28422: ARRAY
28423: PPUSH
28424: LD_STRING D3a-Sci1-4
28426: PPUSH
28427: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28431: LD_EXP 33
28435: PPUSH
28436: LD_STRING D3a-Sim-5
28438: PPUSH
28439: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
28443: LD_VAR 0 5
28447: PUSH
28448: LD_INT 1
28450: ARRAY
28451: PPUSH
28452: LD_STRING D3a-Sci1-5
28454: PPUSH
28455: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28459: LD_EXP 33
28463: PPUSH
28464: LD_STRING D3a-Sim-6
28466: PPUSH
28467: CALL_OW 88
// DialogueOff ;
28471: CALL_OW 7
// end ; end ; end ;
28475: PPOPN 5
28477: END
// export function DRussianNextAttack ; begin
28478: LD_INT 0
28480: PPUSH
// SayRadio ( AmScout , D4-FSol1-2 ) ;
28481: LD_EXP 40
28485: PPUSH
28486: LD_STRING D4-FSol1-2
28488: PPUSH
28489: CALL_OW 94
// end ;
28493: LD_VAR 0 1
28497: RET
// export function DRussianConvoy ; begin
28498: LD_INT 0
28500: PPUSH
// SayRadio ( AmScout , D4-FSol1-1 ) ;
28501: LD_EXP 40
28505: PPUSH
28506: LD_STRING D4-FSol1-1
28508: PPUSH
28509: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
28513: LD_STRING M3
28515: PPUSH
28516: CALL_OW 337
// end ;
28520: LD_VAR 0 1
28524: RET
// export function DRussianSpaceAmmo ( unit ) ; begin
28525: LD_INT 0
28527: PPUSH
// CenterNowOnUnits ( unit ) ;
28528: LD_VAR 0 1
28532: PPUSH
28533: CALL_OW 87
// DialogueOn ;
28537: CALL_OW 6
// if IsOK ( Cyrus ) then
28541: LD_EXP 27
28545: PPUSH
28546: CALL_OW 302
28550: IFFALSE 28566
// Say ( Cyrus , D9a-Cyrus-1 ) else
28552: LD_EXP 27
28556: PPUSH
28557: LD_STRING D9a-Cyrus-1
28559: PPUSH
28560: CALL_OW 88
28564: GO 28688
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
28566: LD_INT 22
28568: PUSH
28569: LD_INT 1
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 26
28578: PUSH
28579: LD_INT 1
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 2
28588: PUSH
28589: LD_INT 25
28591: PUSH
28592: LD_INT 1
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 25
28601: PUSH
28602: LD_INT 2
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 25
28611: PUSH
28612: LD_INT 3
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 25
28621: PUSH
28622: LD_INT 4
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 25
28631: PUSH
28632: LD_INT 5
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: LIST
28651: PPUSH
28652: CALL_OW 69
28656: PUSH
28657: LD_EXP 23
28661: PUSH
28662: LD_EXP 36
28666: PUSH
28667: LD_EXP 27
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: LIST
28676: DIFF
28677: PPUSH
28678: LD_STRING D9a-Sol1-1
28680: PPUSH
28681: LD_STRING D9a-Sol1-1
28683: PPUSH
28684: CALL 25083 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
28688: LD_INT 22
28690: PUSH
28691: LD_INT 1
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 26
28700: PUSH
28701: LD_INT 1
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 2
28710: PUSH
28711: LD_INT 25
28713: PUSH
28714: LD_INT 1
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 25
28723: PUSH
28724: LD_INT 2
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 25
28733: PUSH
28734: LD_INT 3
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 25
28743: PUSH
28744: LD_INT 4
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 25
28753: PUSH
28754: LD_INT 5
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: LIST
28773: PPUSH
28774: CALL_OW 69
28778: PUSH
28779: LD_EXP 23
28783: PUSH
28784: LD_EXP 36
28788: PUSH
28789: LD_EXP 27
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: LIST
28798: DIFF
28799: PPUSH
28800: LD_STRING D9b-Sol1-1
28802: PPUSH
28803: LD_STRING D9b-Sol1-1
28805: PPUSH
28806: CALL 25083 0 3
// if LoadVariable ( 09_arInfo , 0 ) then
28810: LD_STRING 09_arInfo
28812: PPUSH
28813: LD_INT 0
28815: PPUSH
28816: CALL_OW 30
28820: IFFALSE 28834
// Say ( JMM , D9a-JMM-1 ) ;
28822: LD_EXP 23
28826: PPUSH
28827: LD_STRING D9a-JMM-1
28829: PPUSH
28830: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
28834: LD_EXP 23
28838: PPUSH
28839: LD_STRING D9c-JMM-1
28841: PPUSH
28842: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) then
28846: LD_INT 22
28848: PUSH
28849: LD_INT 1
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 25
28858: PUSH
28859: LD_INT 5
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PPUSH
28870: CALL_OW 69
28874: IFFALSE 28888
// Say ( JMM , D9c-JMM-1a ) ;
28876: LD_EXP 23
28880: PPUSH
28881: LD_STRING D9c-JMM-1a
28883: PPUSH
28884: CALL_OW 88
// DialogueOff ;
28888: CALL_OW 7
// end ;
28892: LD_VAR 0 2
28896: RET
// export function DArabTrait1 ; var tmp ; begin
28897: LD_INT 0
28899: PPUSH
28900: PPUSH
// if IsOk ( DeltaDoctor ) then
28901: LD_EXP 39
28905: PPUSH
28906: CALL_OW 302
28910: IFFALSE 28924
// tmp := DeltaDoctor else
28912: LD_ADDR_VAR 0 2
28916: PUSH
28917: LD_EXP 39
28921: ST_TO_ADDR
28922: GO 29122
// if IsOk ( Denis ) then
28924: LD_EXP 34
28928: PPUSH
28929: CALL_OW 302
28933: IFFALSE 28947
// tmp := Denis else
28935: LD_ADDR_VAR 0 2
28939: PUSH
28940: LD_EXP 34
28944: ST_TO_ADDR
28945: GO 29122
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
28947: LD_ADDR_VAR 0 2
28951: PUSH
28952: LD_INT 22
28954: PUSH
28955: LD_INT 1
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 50
28964: PUSH
28965: EMPTY
28966: LIST
28967: PUSH
28968: LD_INT 25
28970: PUSH
28971: LD_INT 4
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 26
28980: PUSH
28981: LD_INT 1
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: PPUSH
28994: CALL_OW 69
28998: PUSH
28999: LD_EXP 23
29003: PUSH
29004: LD_EXP 24
29008: PUSH
29009: LD_EXP 25
29013: PUSH
29014: LD_EXP 26
29018: PUSH
29019: LD_EXP 27
29023: PUSH
29024: LD_EXP 28
29028: PUSH
29029: LD_EXP 29
29033: PUSH
29034: LD_EXP 30
29038: PUSH
29039: LD_EXP 31
29043: PUSH
29044: LD_EXP 32
29048: PUSH
29049: LD_EXP 33
29053: PUSH
29054: LD_EXP 34
29058: PUSH
29059: LD_EXP 35
29063: PUSH
29064: LD_EXP 36
29068: PUSH
29069: LD_EXP 37
29073: PUSH
29074: LD_EXP 38
29078: PUSH
29079: LD_EXP 39
29083: PUSH
29084: LD_EXP 40
29088: PUSH
29089: LD_EXP 42
29093: PUSH
29094: LD_EXP 44
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: DIFF
29121: ST_TO_ADDR
// if not tmp then
29122: LD_VAR 0 2
29126: NOT
29127: IFFALSE 29131
// exit ;
29129: GO 29223
// DialogueOn ;
29131: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
29135: LD_EXP 23
29139: PPUSH
29140: LD_STRING D6-JMM-1
29142: PPUSH
29143: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
29147: LD_VAR 0 2
29151: PPUSH
29152: LD_STRING D6-Sci1-1
29154: PPUSH
29155: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
29159: LD_EXP 23
29163: PPUSH
29164: LD_STRING D6-JMM-2
29166: PPUSH
29167: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
29171: LD_VAR 0 2
29175: PPUSH
29176: LD_STRING D6-Sci1-2
29178: PPUSH
29179: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
29183: LD_EXP 23
29187: PPUSH
29188: LD_STRING D6-JMM-3
29190: PPUSH
29191: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
29195: LD_VAR 0 2
29199: PPUSH
29200: LD_STRING D6-Sci1-3
29202: PPUSH
29203: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
29207: LD_EXP 23
29211: PPUSH
29212: LD_STRING D6-JMM-4
29214: PPUSH
29215: CALL_OW 88
// DialogueOff ;
29219: CALL_OW 7
// end ;
29223: LD_VAR 0 1
29227: RET
// export function DArabTrait2 ; begin
29228: LD_INT 0
29230: PPUSH
// if not IsPlaced ( Khatam ) or not IsOk ( Ahmed ) or not IsOk ( Dietrich ) then
29231: LD_EXP 36
29235: PPUSH
29236: CALL_OW 305
29240: NOT
29241: PUSH
29242: LD_EXP 51
29246: PPUSH
29247: CALL_OW 302
29251: NOT
29252: OR
29253: PUSH
29254: LD_EXP 50
29258: PPUSH
29259: CALL_OW 302
29263: NOT
29264: OR
29265: IFFALSE 29269
// exit ;
29267: GO 29325
// DialogueOn ;
29269: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
29273: LD_EXP 51
29277: PPUSH
29278: LD_STRING D5-Ar1-1
29280: PPUSH
29281: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
29285: LD_EXP 50
29289: PPUSH
29290: LD_STRING D5-Diet-1
29292: PPUSH
29293: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
29297: LD_EXP 51
29301: PPUSH
29302: LD_STRING D5-Ar1-2
29304: PPUSH
29305: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
29309: LD_EXP 50
29313: PPUSH
29314: LD_STRING D5-Diet-2
29316: PPUSH
29317: CALL_OW 88
// DialogueOff ;
29321: CALL_OW 7
// end ;
29325: LD_VAR 0 1
29329: RET
// every 0 0$2 trigger arabianAttack do var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding , speaker ;
29330: LD_EXP 4
29334: IFFALSE 31047
29336: GO 29338
29338: DISABLE
29339: LD_INT 0
29341: PPUSH
29342: PPUSH
29343: PPUSH
29344: PPUSH
29345: PPUSH
29346: PPUSH
29347: PPUSH
29348: PPUSH
// begin SetAttitude ( 2 , 3 , att_friend , true ) ;
29349: LD_INT 2
29351: PPUSH
29352: LD_INT 3
29354: PPUSH
29355: LD_INT 1
29357: PPUSH
29358: LD_INT 1
29360: PPUSH
29361: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
29365: LD_INT 2
29367: PPUSH
29368: LD_INT 6
29370: PPUSH
29371: LD_INT 1
29373: PPUSH
29374: LD_INT 1
29376: PPUSH
29377: CALL_OW 80
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
29381: LD_ADDR_VAR 0 5
29385: PUSH
29386: LD_INT 22
29388: PUSH
29389: LD_INT 2
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 2
29398: PUSH
29399: LD_INT 25
29401: PUSH
29402: LD_INT 4
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 25
29411: PUSH
29412: LD_INT 2
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 25
29421: PUSH
29422: LD_INT 3
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PPUSH
29439: CALL_OW 69
29443: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff Dietrich ;
29444: LD_ADDR_VAR 0 4
29448: PUSH
29449: LD_INT 22
29451: PUSH
29452: LD_INT 2
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 21
29461: PUSH
29462: LD_INT 1
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 2
29471: PUSH
29472: LD_INT 25
29474: PUSH
29475: LD_INT 1
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 25
29484: PUSH
29485: LD_INT 8
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 25
29494: PUSH
29495: LD_INT 15
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: LIST
29512: PPUSH
29513: CALL_OW 69
29517: PUSH
29518: LD_EXP 50
29522: DIFF
29523: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
29524: LD_ADDR_VAR 0 6
29528: PUSH
29529: LD_INT 22
29531: PUSH
29532: LD_INT 2
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 30
29541: PUSH
29542: LD_INT 5
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PPUSH
29553: CALL_OW 69
29557: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
29558: LD_VAR 0 5
29562: PPUSH
29563: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
29567: LD_VAR 0 4
29571: PPUSH
29572: CALL_OW 122
// RaiseSailEvent ( EArabAttack ) ;
29576: LD_INT 101
29578: PPUSH
29579: CALL_OW 427
// SayRadio ( AmScout , D4-FSol1-3 ) ;
29583: LD_EXP 40
29587: PPUSH
29588: LD_STRING D4-FSol1-3
29590: PPUSH
29591: CALL_OW 94
// for i in arCivilian do
29595: LD_ADDR_VAR 0 1
29599: PUSH
29600: LD_VAR 0 5
29604: PUSH
29605: FOR_IN
29606: IFFALSE 29685
// begin AddComEnterUnit ( i , barracks [ i mod 2 + 1 ] ) ;
29608: LD_VAR 0 1
29612: PPUSH
29613: LD_VAR 0 6
29617: PUSH
29618: LD_VAR 0 1
29622: PUSH
29623: LD_INT 2
29625: MOD
29626: PUSH
29627: LD_INT 1
29629: PLUS
29630: ARRAY
29631: PPUSH
29632: CALL_OW 180
// AddComChangeProfession ( i , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
29636: LD_VAR 0 1
29640: PPUSH
29641: LD_INT 1
29643: PUSH
29644: LD_INT 8
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: PPUSH
29654: LD_INT 2
29656: PPUSH
29657: CALL_OW 12
29661: ARRAY
29662: PPUSH
29663: CALL_OW 183
// AddComExitBuilding ( i ) ;
29667: LD_VAR 0 1
29671: PPUSH
29672: CALL_OW 182
// wait ( 0 0$0.5 ) ;
29676: LD_INT 18
29678: PPUSH
29679: CALL_OW 67
// end ;
29683: GO 29605
29685: POP
29686: POP
// wait ( 0 0$5 ) ;
29687: LD_INT 175
29689: PPUSH
29690: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
29694: LD_INT 76
29696: PPUSH
29697: LD_INT 19
29699: PPUSH
29700: CALL_OW 84
// DialogueOn ;
29704: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
29708: LD_INT 22
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 26
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 2
29730: PUSH
29731: LD_INT 25
29733: PUSH
29734: LD_INT 1
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 25
29743: PUSH
29744: LD_INT 2
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 25
29753: PUSH
29754: LD_INT 3
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 25
29763: PUSH
29764: LD_INT 4
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 25
29773: PUSH
29774: LD_INT 5
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: LIST
29793: PPUSH
29794: CALL_OW 69
29798: PPUSH
29799: LD_STRING D8-Sol1-1
29801: PPUSH
29802: LD_STRING D8-Sol1-1
29804: PPUSH
29805: CALL 25083 0 3
// if IsOk ( DeltaDoctor ) then
29809: LD_EXP 39
29813: PPUSH
29814: CALL_OW 302
29818: IFFALSE 29834
// Say ( DeltaDoctor , D8-Sci1-1 ) else
29820: LD_EXP 39
29824: PPUSH
29825: LD_STRING D8-Sci1-1
29827: PPUSH
29828: CALL_OW 88
29832: GO 29935
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
29834: LD_INT 22
29836: PUSH
29837: LD_INT 1
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 26
29846: PUSH
29847: LD_INT 1
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 2
29856: PUSH
29857: LD_INT 25
29859: PUSH
29860: LD_INT 1
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 25
29869: PUSH
29870: LD_INT 2
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 25
29879: PUSH
29880: LD_INT 3
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 25
29889: PUSH
29890: LD_INT 4
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 25
29899: PUSH
29900: LD_INT 5
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: LIST
29919: PPUSH
29920: CALL_OW 69
29924: PPUSH
29925: LD_STRING D8-Sol1-1
29927: PPUSH
29928: LD_STRING D8-Sol1-1
29930: PPUSH
29931: CALL 25083 0 3
// Say ( JMM , D8-JMM-1 ) ;
29935: LD_EXP 23
29939: PPUSH
29940: LD_STRING D8-JMM-1
29942: PPUSH
29943: CALL_OW 88
// DialogueOff ;
29947: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
29951: LD_INT 2
29953: PPUSH
29954: LD_INT 2
29956: PPUSH
29957: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
29961: LD_INT 1
29963: PPUSH
29964: LD_INT 2
29966: PPUSH
29967: LD_INT 2
29969: PPUSH
29970: LD_INT 1
29972: PPUSH
29973: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
29977: LD_INT 3
29979: PPUSH
29980: LD_INT 2
29982: PPUSH
29983: LD_INT 1
29985: PPUSH
29986: LD_INT 1
29988: PPUSH
29989: CALL_OW 80
// SetAttitude ( 6 , 2 , att_friend , true ) ;
29993: LD_INT 6
29995: PPUSH
29996: LD_INT 2
29998: PPUSH
29999: LD_INT 1
30001: PPUSH
30002: LD_INT 1
30004: PPUSH
30005: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
30009: LD_STRING M4
30011: PPUSH
30012: CALL_OW 337
// wait ( 0 0$1 ) ;
30016: LD_INT 35
30018: PPUSH
30019: CALL_OW 67
// if IsLive ( Khatam ) then
30023: LD_EXP 36
30027: PPUSH
30028: CALL_OW 300
30032: IFFALSE 30046
// DoNotAttack ( 2 , Khatam ) ;
30034: LD_INT 2
30036: PPUSH
30037: LD_EXP 36
30041: PPUSH
30042: CALL_OW 471
// wait ( 0 0$1 ) ;
30046: LD_INT 35
30048: PPUSH
30049: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
30053: LD_ADDR_VAR 0 7
30057: PUSH
30058: LD_INT 22
30060: PUSH
30061: LD_INT 1
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 21
30070: PUSH
30071: LD_INT 3
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PPUSH
30082: CALL_OW 69
30086: PPUSH
30087: LD_VAR 0 4
30091: PUSH
30092: LD_INT 1
30094: ARRAY
30095: PPUSH
30096: CALL_OW 74
30100: ST_TO_ADDR
// for i := 1 to 3 do
30101: LD_ADDR_VAR 0 1
30105: PUSH
30106: DOUBLE
30107: LD_INT 1
30109: DEC
30110: ST_TO_ADDR
30111: LD_INT 3
30113: PUSH
30114: FOR_TO
30115: IFFALSE 30174
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ i ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
30117: LD_VAR 0 4
30121: PPUSH
30122: LD_INT 25
30124: PUSH
30125: LD_INT 1
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PPUSH
30132: CALL_OW 72
30136: PUSH
30137: LD_VAR 0 1
30141: ARRAY
30142: PPUSH
30143: LD_VAR 0 7
30147: PPUSH
30148: CALL_OW 250
30152: PPUSH
30153: LD_VAR 0 7
30157: PPUSH
30158: CALL_OW 251
30162: PPUSH
30163: LD_VAR 0 7
30167: PPUSH
30168: CALL_OW 192
30172: GO 30114
30174: POP
30175: POP
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
30176: LD_VAR 0 4
30180: PPUSH
30181: LD_INT 84
30183: PPUSH
30184: LD_INT 22
30186: PPUSH
30187: CALL_OW 174
// AddComMoveXY ( arSoldiers , 95 , 12 ) ;
30191: LD_VAR 0 4
30195: PPUSH
30196: LD_INT 95
30198: PPUSH
30199: LD_INT 12
30201: PPUSH
30202: CALL_OW 171
// AddComMoveXY ( arSoldiers , 102 , 11 ) ;
30206: LD_VAR 0 4
30210: PPUSH
30211: LD_INT 102
30213: PPUSH
30214: LD_INT 11
30216: PPUSH
30217: CALL_OW 171
// AddComMoveXY ( arSoldiers , 116 , 15 ) ;
30221: LD_VAR 0 4
30225: PPUSH
30226: LD_INT 116
30228: PPUSH
30229: LD_INT 15
30231: PPUSH
30232: CALL_OW 171
// AddComMoveXY ( arSoldiers , 140 , 25 ) ;
30236: LD_VAR 0 4
30240: PPUSH
30241: LD_INT 140
30243: PPUSH
30244: LD_INT 25
30246: PPUSH
30247: CALL_OW 171
// arSoldiers := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff Dietrich ;
30251: LD_ADDR_VAR 0 4
30255: PUSH
30256: LD_INT 22
30258: PUSH
30259: LD_INT 2
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 21
30268: PUSH
30269: LD_INT 1
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 2
30278: PUSH
30279: LD_INT 25
30281: PUSH
30282: LD_INT 1
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 25
30291: PUSH
30292: LD_INT 8
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 25
30301: PUSH
30302: LD_INT 15
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: LIST
30319: PPUSH
30320: CALL_OW 69
30324: PUSH
30325: LD_EXP 50
30329: DIFF
30330: ST_TO_ADDR
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
30331: LD_ADDR_VAR 0 5
30335: PUSH
30336: LD_INT 22
30338: PUSH
30339: LD_INT 2
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 21
30348: PUSH
30349: LD_INT 1
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 2
30358: PUSH
30359: LD_INT 25
30361: PUSH
30362: LD_INT 2
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 25
30371: PUSH
30372: LD_INT 3
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 25
30381: PUSH
30382: LD_INT 4
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 25
30391: PUSH
30392: LD_INT 12
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 25
30401: PUSH
30402: LD_INT 16
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: LIST
30421: PPUSH
30422: CALL_OW 69
30426: ST_TO_ADDR
// arCivilian := arCivilian ^ Dietrich ;
30427: LD_ADDR_VAR 0 5
30431: PUSH
30432: LD_VAR 0 5
30436: PUSH
30437: LD_EXP 50
30441: ADD
30442: ST_TO_ADDR
// AddComMoveXY ( arCivilian , 81 , 12 ) ;
30443: LD_VAR 0 5
30447: PPUSH
30448: LD_INT 81
30450: PPUSH
30451: LD_INT 12
30453: PPUSH
30454: CALL_OW 171
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
30458: LD_VAR 0 5
30462: PPUSH
30463: LD_INT 88
30465: PPUSH
30466: LD_INT 8
30468: PPUSH
30469: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
30473: LD_VAR 0 5
30477: PPUSH
30478: LD_INT 102
30480: PPUSH
30481: LD_INT 10
30483: PPUSH
30484: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
30488: LD_VAR 0 5
30492: PPUSH
30493: LD_INT 116
30495: PPUSH
30496: LD_INT 15
30498: PPUSH
30499: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
30503: LD_VAR 0 5
30507: PPUSH
30508: LD_INT 140
30510: PPUSH
30511: LD_INT 25
30513: PPUSH
30514: CALL_OW 171
// wait ( 3 ) ;
30518: LD_INT 3
30520: PPUSH
30521: CALL_OW 67
// arEscapist := arCivilian union arSoldiers ;
30525: LD_ADDR_EXP 56
30529: PUSH
30530: LD_VAR 0 5
30534: PUSH
30535: LD_VAR 0 4
30539: UNION
30540: ST_TO_ADDR
// if IsOk ( Gary ) then
30541: LD_EXP 32
30545: PPUSH
30546: CALL_OW 302
30550: IFFALSE 30564
// Say ( Gary , D8a-Gary-1 ) ;
30552: LD_EXP 32
30556: PPUSH
30557: LD_STRING D8a-Gary-1
30559: PPUSH
30560: CALL_OW 88
// wait ( 0 0$5 ) ;
30564: LD_INT 175
30566: PPUSH
30567: CALL_OW 67
// if IsOK ( Khatam ) then
30571: LD_EXP 36
30575: PPUSH
30576: CALL_OW 302
30580: IFFALSE 31047
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
30582: LD_ADDR_VAR 0 2
30586: PUSH
30587: LD_INT 22
30589: PUSH
30590: LD_INT 1
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 2
30599: PUSH
30600: LD_INT 25
30602: PUSH
30603: LD_INT 1
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 25
30612: PUSH
30613: LD_INT 2
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 25
30622: PUSH
30623: LD_INT 3
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 25
30632: PUSH
30633: LD_INT 4
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 25
30642: PUSH
30643: LD_INT 5
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 25
30652: PUSH
30653: LD_INT 8
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PPUSH
30673: CALL_OW 69
30677: PUSH
30678: LD_EXP 23
30682: PUSH
30683: LD_EXP 24
30687: PUSH
30688: LD_EXP 25
30692: PUSH
30693: LD_EXP 26
30697: PUSH
30698: LD_EXP 27
30702: PUSH
30703: LD_EXP 28
30707: PUSH
30708: LD_EXP 29
30712: PUSH
30713: LD_EXP 30
30717: PUSH
30718: LD_EXP 31
30722: PUSH
30723: LD_EXP 32
30727: PUSH
30728: LD_EXP 33
30732: PUSH
30733: LD_EXP 34
30737: PUSH
30738: LD_EXP 35
30742: PUSH
30743: LD_EXP 36
30747: PUSH
30748: LD_EXP 37
30752: PUSH
30753: LD_EXP 38
30757: PUSH
30758: LD_EXP 39
30762: PUSH
30763: LD_EXP 42
30767: PUSH
30768: LD_EXP 44
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: DIFF
30794: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
30795: LD_EXP 36
30799: PPUSH
30800: LD_INT 8
30802: PPUSH
30803: CALL_OW 235
// ComExit ( Khatam ) ;
30807: LD_EXP 36
30811: PPUSH
30812: CALL 92702 0 1
// wait ( 0 0$1 ) ;
30816: LD_INT 35
30818: PPUSH
30819: CALL_OW 67
// ComMoveToArea ( Khatam , khatamArea ) ;
30823: LD_EXP 36
30827: PPUSH
30828: LD_INT 11
30830: PPUSH
30831: CALL_OW 113
// escapeKhatam := true ;
30835: LD_ADDR_EXP 11
30839: PUSH
30840: LD_INT 1
30842: ST_TO_ADDR
// if not tmp then
30843: LD_VAR 0 2
30847: NOT
30848: IFFALSE 30852
// exit ;
30850: GO 31047
// wait ( 0 0$2 ) ;
30852: LD_INT 70
30854: PPUSH
30855: CALL_OW 67
// DialogueOn ;
30859: CALL_OW 6
// speaker := DialogRandom ( tmp , D8b-Sol1-1 , D8b-FSol1-1 ) ;
30863: LD_ADDR_VAR 0 8
30867: PUSH
30868: LD_VAR 0 2
30872: PPUSH
30873: LD_STRING D8b-Sol1-1
30875: PPUSH
30876: LD_STRING D8b-FSol1-1
30878: PPUSH
30879: CALL 25083 0 3
30883: ST_TO_ADDR
// Say ( Khatam , D8b-Khat-1 ) ;
30884: LD_EXP 36
30888: PPUSH
30889: LD_STRING D8b-Khat-1
30891: PPUSH
30892: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
30896: LD_VAR 0 8
30900: PPUSH
30901: CALL_OW 258
30905: PUSH
30906: LD_INT 1
30908: EQUAL
30909: IFFALSE 30925
// Say ( speaker , D8b-Sol1-2 ) else
30911: LD_VAR 0 8
30915: PPUSH
30916: LD_STRING D8b-Sol1-2
30918: PPUSH
30919: CALL_OW 88
30923: GO 30937
// Say ( speaker , D8b-FSol1-2 ) ;
30925: LD_VAR 0 8
30929: PPUSH
30930: LD_STRING D8b-FSol1-2
30932: PPUSH
30933: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
30937: LD_EXP 36
30941: PPUSH
30942: LD_STRING D8b-Khat-2
30944: PPUSH
30945: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
30949: LD_VAR 0 8
30953: PPUSH
30954: CALL_OW 258
30958: PUSH
30959: LD_INT 1
30961: EQUAL
30962: IFFALSE 30978
// Say ( speaker , D8b-Sol1-3 ) else
30964: LD_VAR 0 8
30968: PPUSH
30969: LD_STRING D8b-Sol1-3
30971: PPUSH
30972: CALL_OW 88
30976: GO 30990
// Say ( speaker , D8b-FSol1-3 ) ;
30978: LD_VAR 0 8
30982: PPUSH
30983: LD_STRING D8b-FSol1-3
30985: PPUSH
30986: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
30990: LD_EXP 36
30994: PPUSH
30995: LD_STRING D8b-Khat-3
30997: PPUSH
30998: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31002: LD_VAR 0 8
31006: PPUSH
31007: CALL_OW 258
31011: PUSH
31012: LD_INT 1
31014: EQUAL
31015: IFFALSE 31031
// Say ( speaker , D8b-Sol1-4 ) else
31017: LD_VAR 0 8
31021: PPUSH
31022: LD_STRING D8b-Sol1-4
31024: PPUSH
31025: CALL_OW 88
31029: GO 31043
// Say ( speaker , D8b-FSol1-4 ) ;
31031: LD_VAR 0 8
31035: PPUSH
31036: LD_STRING D8b-FSol1-4
31038: PPUSH
31039: CALL_OW 88
// DialogueOff ;
31043: CALL_OW 7
// end ; end ;
31047: PPOPN 8
31049: END
// every 0 0$1 trigger escapeKhatam and IsOk ( Khatam ) do
31050: LD_EXP 11
31054: PUSH
31055: LD_EXP 36
31059: PPUSH
31060: CALL_OW 302
31064: AND
31065: IFFALSE 31140
31067: GO 31069
31069: DISABLE
// begin enable ;
31070: ENABLE
// if IsOk ( Khatam ) and not HasTask ( Khatam ) then
31071: LD_EXP 36
31075: PPUSH
31076: CALL_OW 302
31080: PUSH
31081: LD_EXP 36
31085: PPUSH
31086: CALL_OW 314
31090: NOT
31091: AND
31092: IFFALSE 31106
// ComMoveToArea ( Khatam , khatamArea ) ;
31094: LD_EXP 36
31098: PPUSH
31099: LD_INT 11
31101: PPUSH
31102: CALL_OW 113
// if IsInArea ( Khatam , khatamArea ) then
31106: LD_EXP 36
31110: PPUSH
31111: LD_INT 11
31113: PPUSH
31114: CALL_OW 308
31118: IFFALSE 31140
// begin SaveVariable ( 1 , 10_KhatamStatus_1 ) ;
31120: LD_INT 1
31122: PPUSH
31123: LD_STRING 10_KhatamStatus_1
31125: PPUSH
31126: CALL_OW 39
// RemoveUnit ( Khatam ) ;
31130: LD_EXP 36
31134: PPUSH
31135: CALL_OW 64
// disable ;
31139: DISABLE
// end ; end ;
31140: END
// every 0 0$30 trigger joinedToEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) = 0 or not arabianAttack ) do
31141: LD_EXP 7
31145: PUSH
31146: LD_STRING 02_mikhailStatus_1
31148: PPUSH
31149: LD_INT 0
31151: PPUSH
31152: CALL_OW 30
31156: AND
31157: PUSH
31158: LD_INT 22
31160: PUSH
31161: LD_INT 5
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 50
31170: PUSH
31171: EMPTY
31172: LIST
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PPUSH
31178: CALL_OW 69
31182: PUSH
31183: LD_INT 0
31185: EQUAL
31186: AND
31187: PUSH
31188: LD_INT 22
31190: PUSH
31191: LD_INT 2
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 50
31200: PUSH
31201: EMPTY
31202: LIST
31203: PUSH
31204: LD_INT 21
31206: PUSH
31207: LD_INT 1
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: LIST
31218: PPUSH
31219: CALL_OW 69
31223: PUSH
31224: LD_INT 0
31226: EQUAL
31227: PUSH
31228: LD_EXP 4
31232: NOT
31233: OR
31234: AND
31235: IFFALSE 31257
31237: GO 31239
31239: DISABLE
// begin wait ( 2 2$00 * Difficulty ) ;
31240: LD_INT 4200
31242: PUSH
31243: LD_OWVAR 67
31247: MUL
31248: PPUSH
31249: CALL_OW 67
// PrepareCornell ;
31253: CALL 3198 0 0
// end ;
31257: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 and IsOk ( Cornell ) do
31258: LD_INT 22
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PPUSH
31268: CALL_OW 69
31272: PPUSH
31273: LD_EXP 42
31277: PPUSH
31278: CALL_OW 74
31282: PPUSH
31283: LD_EXP 42
31287: PPUSH
31288: CALL_OW 296
31292: PUSH
31293: LD_INT 9
31295: LESS
31296: PUSH
31297: LD_EXP 42
31301: PPUSH
31302: CALL_OW 302
31306: AND
31307: IFFALSE 31751
31309: GO 31311
31311: DISABLE
// begin InGameOn ;
31312: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
31316: LD_EXP 42
31320: PPUSH
31321: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
31325: LD_EXP 42
31329: PPUSH
31330: LD_STRING D7-Corn-1
31332: PPUSH
31333: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
31337: LD_INT 22
31339: PUSH
31340: LD_INT 1
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 2
31349: PUSH
31350: LD_INT 25
31352: PUSH
31353: LD_INT 1
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 25
31362: PUSH
31363: LD_INT 2
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 25
31372: PUSH
31373: LD_INT 3
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 25
31382: PUSH
31383: LD_INT 4
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 25
31392: PUSH
31393: LD_INT 5
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PPUSH
31412: CALL_OW 69
31416: PPUSH
31417: LD_STRING D7-Sol1-1
31419: PPUSH
31420: LD_STRING D7-FSol1-1
31422: PPUSH
31423: CALL 25083 0 3
// CenterNowOnUnits ( Cornell ) ;
31427: LD_EXP 42
31431: PPUSH
31432: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
31436: LD_EXP 42
31440: PPUSH
31441: LD_STRING D7-Corn-2
31443: PPUSH
31444: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
31448: LD_EXP 23
31452: PPUSH
31453: LD_STRING D7-JMM-2
31455: PPUSH
31456: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
31460: LD_EXP 42
31464: PPUSH
31465: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
31469: LD_EXP 42
31473: PPUSH
31474: LD_STRING D7-Corn-3
31476: PPUSH
31477: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
31481: LD_EXP 42
31485: PPUSH
31486: LD_INT 250
31488: PPUSH
31489: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
31493: LD_EXP 42
31497: PPUSH
31498: LD_INT 1
31500: PPUSH
31501: CALL_OW 235
// wait ( 0 0$1 ) ;
31505: LD_INT 35
31507: PPUSH
31508: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
31512: LD_EXP 23
31516: PPUSH
31517: LD_STRING D7-JMM-3
31519: PPUSH
31520: CALL_OW 88
// InGameOff ;
31524: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
31528: LD_INT 35
31530: PPUSH
31531: CALL_OW 67
// if IsDead ( Cornell ) then
31535: LD_EXP 42
31539: PPUSH
31540: CALL_OW 301
31544: IFFALSE 31548
// exit ;
31546: GO 31751
// until GetLives ( Cornell ) > 350 ;
31548: LD_EXP 42
31552: PPUSH
31553: CALL_OW 256
31557: PUSH
31558: LD_INT 350
31560: GREATER
31561: IFFALSE 31528
// DialogueOn ;
31563: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
31567: LD_EXP 23
31571: PPUSH
31572: LD_STRING D7a-JMM-1
31574: PPUSH
31575: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
31579: LD_EXP 42
31583: PPUSH
31584: LD_STRING D7a-Corn-1
31586: PPUSH
31587: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
31591: LD_EXP 23
31595: PPUSH
31596: LD_STRING D7a-JMM-2
31598: PPUSH
31599: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
31603: LD_EXP 42
31607: PPUSH
31608: LD_STRING D7a-Corn-2
31610: PPUSH
31611: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
31615: LD_EXP 23
31619: PPUSH
31620: LD_STRING D7a-JMM-3
31622: PPUSH
31623: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
31627: LD_EXP 42
31631: PPUSH
31632: LD_STRING D7a-Corn-3
31634: PPUSH
31635: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
31639: LD_EXP 23
31643: PPUSH
31644: LD_STRING D7a-JMM-4
31646: PPUSH
31647: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
31651: LD_EXP 42
31655: PPUSH
31656: LD_STRING D7a-Corn-4
31658: PPUSH
31659: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
31663: LD_EXP 23
31667: PPUSH
31668: LD_STRING D7a-JMM-5
31670: PPUSH
31671: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
31675: LD_EXP 42
31679: PPUSH
31680: LD_STRING D7a-Corn-5
31682: PPUSH
31683: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
31687: LD_EXP 23
31691: PPUSH
31692: LD_STRING D7a-JMM-6
31694: PPUSH
31695: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
31699: LD_EXP 42
31703: PPUSH
31704: LD_STRING D7a-Corn-6
31706: PPUSH
31707: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
31711: LD_EXP 23
31715: PPUSH
31716: LD_STRING D7a-JMM-7
31718: PPUSH
31719: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
31723: LD_EXP 42
31727: PPUSH
31728: LD_STRING D7a-Corn-7
31730: PPUSH
31731: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
31735: LD_EXP 23
31739: PPUSH
31740: LD_STRING D7a-JMM-8
31742: PPUSH
31743: CALL_OW 88
// DialogueOff ;
31747: CALL_OW 7
// end ;
31751: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
31752: LD_INT 54
31754: PPUSH
31755: LD_INT 1
31757: PPUSH
31758: CALL_OW 321
31762: PUSH
31763: LD_INT 2
31765: EQUAL
31766: PUSH
31767: LD_INT 55
31769: PPUSH
31770: LD_INT 1
31772: PPUSH
31773: CALL_OW 321
31777: PUSH
31778: LD_INT 2
31780: EQUAL
31781: AND
31782: PUSH
31783: LD_INT 21
31785: PPUSH
31786: LD_INT 1
31788: PPUSH
31789: CALL_OW 321
31793: PUSH
31794: LD_INT 2
31796: EQUAL
31797: AND
31798: PUSH
31799: LD_INT 22
31801: PPUSH
31802: LD_INT 1
31804: PPUSH
31805: CALL_OW 321
31809: PUSH
31810: LD_INT 2
31812: EQUAL
31813: AND
31814: PUSH
31815: LD_INT 12
31817: PPUSH
31818: LD_INT 1
31820: PPUSH
31821: CALL_OW 321
31825: PUSH
31826: LD_INT 1
31828: EQUAL
31829: PUSH
31830: LD_INT 32
31832: PPUSH
31833: LD_INT 1
31835: PPUSH
31836: CALL_OW 321
31840: PUSH
31841: LD_INT 1
31843: EQUAL
31844: OR
31845: PUSH
31846: EMPTY
31847: LIST
31848: AND
31849: PUSH
31850: LD_EXP 8
31854: AND
31855: PUSH
31856: LD_INT 22
31858: PUSH
31859: LD_INT 3
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 21
31868: PUSH
31869: LD_INT 1
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PPUSH
31880: CALL_OW 69
31884: PUSH
31885: LD_INT 0
31887: EQUAL
31888: AND
31889: IFFALSE 31937
31891: GO 31893
31893: DISABLE
// begin case Query ( QEndMission ) of 1 :
31894: LD_STRING QEndMission
31896: PPUSH
31897: CALL_OW 97
31901: PUSH
31902: LD_INT 1
31904: DOUBLE
31905: EQUAL
31906: IFTRUE 31910
31908: GO 31921
31910: POP
// end_the_mission_allowed = true ; 2 :
31911: LD_ADDR_OWVAR 57
31915: PUSH
31916: LD_INT 1
31918: ST_TO_ADDR
31919: GO 31937
31921: LD_INT 2
31923: DOUBLE
31924: EQUAL
31925: IFTRUE 31929
31927: GO 31936
31929: POP
// FinishMission ; end ;
31930: CALL 31983 0 0
31934: GO 31937
31936: POP
// end ;
31937: END
// function EnchancedSaveCharacters ( unit , id ) ; begin
31938: LD_INT 0
31940: PPUSH
// if IsLive ( unit ) or unit in JMMSquad then
31941: LD_VAR 0 1
31945: PPUSH
31946: CALL_OW 300
31950: PUSH
31951: LD_VAR 0 1
31955: PUSH
31956: LD_EXP 45
31960: IN
31961: OR
31962: IFFALSE 31978
// SaveCharacters ( unit , id ) ;
31964: LD_VAR 0 1
31968: PPUSH
31969: LD_VAR 0 2
31973: PPUSH
31974: CALL_OW 38
// end ;
31978: LD_VAR 0 3
31982: RET
// export function FinishMission ; var m1 , m2 , m3 , prefix ; begin
31983: LD_INT 0
31985: PPUSH
31986: PPUSH
31987: PPUSH
31988: PPUSH
31989: PPUSH
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
31990: LD_INT 22
31992: PUSH
31993: LD_INT 1
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 21
32002: PUSH
32003: LD_INT 1
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 23
32012: PUSH
32013: LD_INT 1
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 50
32022: PUSH
32023: EMPTY
32024: LIST
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: PPUSH
32032: CALL_OW 69
32036: PPUSH
32037: CALL 56715 0 1
32041: PUSH
32042: LD_INT 5
32044: LESS
32045: IFFALSE 32054
// YouLost ( Troops ) ;
32047: LD_STRING Troops
32049: PPUSH
32050: CALL_OW 104
// if not hasSniper then
32054: LD_EXP 20
32058: NOT
32059: IFFALSE 32068
// SetAchievement ( ACH_SNIPER ) ;
32061: LD_STRING ACH_SNIPER
32063: PPUSH
32064: CALL_OW 543
// m1 := false ;
32068: LD_ADDR_VAR 0 2
32072: PUSH
32073: LD_INT 0
32075: ST_TO_ADDR
// m2 := false ;
32076: LD_ADDR_VAR 0 3
32080: PUSH
32081: LD_INT 0
32083: ST_TO_ADDR
// m3 := false ;
32084: LD_ADDR_VAR 0 4
32088: PUSH
32089: LD_INT 0
32091: ST_TO_ADDR
// if GetTech ( tech_LasSight , 1 ) = state_researched then
32092: LD_INT 12
32094: PPUSH
32095: LD_INT 1
32097: PPUSH
32098: CALL_OW 321
32102: PUSH
32103: LD_INT 2
32105: EQUAL
32106: IFFALSE 32128
// begin AddMedal ( sights , 1 ) ;
32108: LD_STRING sights
32110: PPUSH
32111: LD_INT 1
32113: PPUSH
32114: CALL_OW 101
// m1 := true ;
32118: LD_ADDR_VAR 0 2
32122: PUSH
32123: LD_INT 1
32125: ST_TO_ADDR
// end else
32126: GO 32139
// AddMedal ( sights , - 1 ) ;
32128: LD_STRING sights
32130: PPUSH
32131: LD_INT 1
32133: NEG
32134: PPUSH
32135: CALL_OW 101
// if GetTech ( tech_AI , 1 ) = state_researched then
32139: LD_INT 32
32141: PPUSH
32142: LD_INT 1
32144: PPUSH
32145: CALL_OW 321
32149: PUSH
32150: LD_INT 2
32152: EQUAL
32153: IFFALSE 32175
// begin AddMedal ( computers , 1 ) ;
32155: LD_STRING computers
32157: PPUSH
32158: LD_INT 1
32160: PPUSH
32161: CALL_OW 101
// m2 := true ;
32165: LD_ADDR_VAR 0 3
32169: PUSH
32170: LD_INT 1
32172: ST_TO_ADDR
// end else
32173: GO 32186
// AddMedal ( computers , - 1 ) ;
32175: LD_STRING computers
32177: PPUSH
32178: LD_INT 1
32180: NEG
32181: PPUSH
32182: CALL_OW 101
// if arabianEscapedCounter = 0 then
32186: LD_EXP 21
32190: PUSH
32191: LD_INT 0
32193: EQUAL
32194: IFFALSE 32226
// begin AddMedal ( renegades , 2 ) ;
32196: LD_STRING renegades
32198: PPUSH
32199: LD_INT 2
32201: PPUSH
32202: CALL_OW 101
// m3 := true ;
32206: LD_ADDR_VAR 0 4
32210: PUSH
32211: LD_INT 1
32213: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
32214: LD_INT 0
32216: PPUSH
32217: LD_STRING 10_ScientistsEscape_1
32219: PPUSH
32220: CALL_OW 39
// end else
32224: GO 32237
// AddMedal ( renegades , - 1 ) ;
32226: LD_STRING renegades
32228: PPUSH
32229: LD_INT 1
32231: NEG
32232: PPUSH
32233: CALL_OW 101
// SaveEpsilonBase ;
32237: CALL 33079 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
32241: LD_VAR 0 2
32245: PUSH
32246: LD_VAR 0 3
32250: AND
32251: PUSH
32252: LD_VAR 0 4
32256: AND
32257: PUSH
32258: LD_OWVAR 67
32262: PUSH
32263: LD_INT 3
32265: GREATEREQUAL
32266: AND
32267: IFFALSE 32279
// SetAchievementEX ( ACH_AMER , 10 ) ;
32269: LD_STRING ACH_AMER
32271: PPUSH
32272: LD_INT 10
32274: PPUSH
32275: CALL_OW 564
// if tick <= 40 40$00 then
32279: LD_OWVAR 1
32283: PUSH
32284: LD_INT 84000
32286: LESSEQUAL
32287: IFFALSE 32303
// begin wait ( 3 ) ;
32289: LD_INT 3
32291: PPUSH
32292: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
32296: LD_STRING ACH_ASPEED_10
32298: PPUSH
32299: CALL_OW 543
// end ; GiveMedals ( Main ) ;
32303: LD_STRING Main
32305: PPUSH
32306: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
32310: LD_INT 22
32312: PUSH
32313: LD_INT 1
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 23
32322: PUSH
32323: LD_INT 1
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 21
32332: PUSH
32333: LD_INT 1
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 2
32342: PUSH
32343: LD_INT 25
32345: PUSH
32346: LD_INT 1
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 25
32355: PUSH
32356: LD_INT 2
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 25
32365: PUSH
32366: LD_INT 3
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 25
32375: PUSH
32376: LD_INT 4
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 25
32385: PUSH
32386: LD_INT 5
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 25
32395: PUSH
32396: LD_INT 8
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: PPUSH
32418: CALL_OW 69
32422: PPUSH
32423: CALL_OW 43
// prefix := 10c_ ;
32427: LD_ADDR_VAR 0 5
32431: PUSH
32432: LD_STRING 10c_
32434: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
32435: LD_EXP 23
32439: PPUSH
32440: LD_VAR 0 5
32444: PUSH
32445: LD_STRING JMM
32447: STR
32448: PPUSH
32449: CALL_OW 38
// EnchancedSaveCharacters ( Brown , prefix & Brown ) ;
32453: LD_EXP 24
32457: PPUSH
32458: LD_VAR 0 5
32462: PUSH
32463: LD_STRING Brown
32465: STR
32466: PPUSH
32467: CALL 31938 0 2
// EnchancedSaveCharacters ( Donaldson , prefix & Donaldson ) ;
32471: LD_EXP 25
32475: PPUSH
32476: LD_VAR 0 5
32480: PUSH
32481: LD_STRING Donaldson
32483: STR
32484: PPUSH
32485: CALL 31938 0 2
// EnchancedSaveCharacters ( Bobby , prefix & Bobby ) ;
32489: LD_EXP 26
32493: PPUSH
32494: LD_VAR 0 5
32498: PUSH
32499: LD_STRING Bobby
32501: STR
32502: PPUSH
32503: CALL 31938 0 2
// EnchancedSaveCharacters ( Cyrus , prefix & Cyrus ) ;
32507: LD_EXP 27
32511: PPUSH
32512: LD_VAR 0 5
32516: PUSH
32517: LD_STRING Cyrus
32519: STR
32520: PPUSH
32521: CALL 31938 0 2
// EnchancedSaveCharacters ( Lisa , prefix & Lisa ) ;
32525: LD_EXP 28
32529: PPUSH
32530: LD_VAR 0 5
32534: PUSH
32535: LD_STRING Lisa
32537: STR
32538: PPUSH
32539: CALL 31938 0 2
// EnchancedSaveCharacters ( Frank , prefix & Frank ) ;
32543: LD_EXP 29
32547: PPUSH
32548: LD_VAR 0 5
32552: PUSH
32553: LD_STRING Frank
32555: STR
32556: PPUSH
32557: CALL 31938 0 2
// if Kikuchi then
32561: LD_EXP 30
32565: IFFALSE 32592
// begin ToLua ( enableBioCharacter(BIO_YAMO) ) ;
32567: LD_STRING enableBioCharacter(BIO_YAMO)
32569: PPUSH
32570: CALL_OW 559
// EnchancedSaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
32574: LD_EXP 30
32578: PPUSH
32579: LD_VAR 0 5
32583: PUSH
32584: LD_STRING Kikuchi
32586: STR
32587: PPUSH
32588: CALL 31938 0 2
// end ; EnchancedSaveCharacters ( Houten , prefix & Houten ) ;
32592: LD_EXP 31
32596: PPUSH
32597: LD_VAR 0 5
32601: PUSH
32602: LD_STRING Houten
32604: STR
32605: PPUSH
32606: CALL 31938 0 2
// EnchancedSaveCharacters ( Gary , prefix & Gary ) ;
32610: LD_EXP 32
32614: PPUSH
32615: LD_VAR 0 5
32619: PUSH
32620: LD_STRING Gary
32622: STR
32623: PPUSH
32624: CALL 31938 0 2
// EnchancedSaveCharacters ( Cornell , prefix & Cornell ) ;
32628: LD_EXP 42
32632: PPUSH
32633: LD_VAR 0 5
32637: PUSH
32638: LD_STRING Cornell
32640: STR
32641: PPUSH
32642: CALL 31938 0 2
// EnchancedSaveCharacters ( Simms , prefix & Simms ) ;
32646: LD_EXP 33
32650: PPUSH
32651: LD_VAR 0 5
32655: PUSH
32656: LD_STRING Simms
32658: STR
32659: PPUSH
32660: CALL 31938 0 2
// EnchancedSaveCharacters ( Denis , prefix & Denis ) ;
32664: LD_EXP 34
32668: PPUSH
32669: LD_VAR 0 5
32673: PUSH
32674: LD_STRING Denis
32676: STR
32677: PPUSH
32678: CALL 31938 0 2
// EnchancedSaveCharacters ( Joan , prefix & Joan ) ;
32682: LD_EXP 35
32686: PPUSH
32687: LD_VAR 0 5
32691: PUSH
32692: LD_STRING Joan
32694: STR
32695: PPUSH
32696: CALL 31938 0 2
// EnchancedSaveCharacters ( Gladstone , prefix & Gladstone ) ;
32700: LD_EXP 37
32704: PPUSH
32705: LD_VAR 0 5
32709: PUSH
32710: LD_STRING Gladstone
32712: STR
32713: PPUSH
32714: CALL 31938 0 2
// EnchancedSaveCharacters ( DeltaDoctor , prefix & DeltaDoctor ) ;
32718: LD_EXP 39
32722: PPUSH
32723: LD_VAR 0 5
32727: PUSH
32728: LD_STRING DeltaDoctor
32730: STR
32731: PPUSH
32732: CALL 31938 0 2
// if IsLive ( Mike ) then
32736: LD_EXP 41
32740: PPUSH
32741: CALL_OW 300
32745: IFFALSE 32765
// SaveCharacters ( Mike , prefix & Mike ) ;
32747: LD_EXP 41
32751: PPUSH
32752: LD_VAR 0 5
32756: PUSH
32757: LD_STRING Mike
32759: STR
32760: PPUSH
32761: CALL_OW 38
// SaveCharacters ( others , 10c_lock ) ;
32765: LD_EXP 46
32769: PPUSH
32770: LD_STRING 10c_lock
32772: PPUSH
32773: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
32777: LD_INT 50
32779: PUSH
32780: EMPTY
32781: LIST
32782: PUSH
32783: LD_INT 22
32785: PUSH
32786: LD_INT 1
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 21
32795: PUSH
32796: LD_INT 1
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 2
32805: PUSH
32806: LD_INT 25
32808: PUSH
32809: LD_INT 1
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 25
32818: PUSH
32819: LD_INT 2
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 25
32828: PUSH
32829: LD_INT 3
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 25
32838: PUSH
32839: LD_INT 4
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 25
32848: PUSH
32849: LD_INT 5
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 25
32858: PUSH
32859: LD_INT 8
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: PPUSH
32881: CALL_OW 69
32885: PUSH
32886: LD_EXP 23
32890: PUSH
32891: LD_EXP 24
32895: PUSH
32896: LD_EXP 25
32900: PUSH
32901: LD_EXP 26
32905: PUSH
32906: LD_EXP 27
32910: PUSH
32911: LD_EXP 28
32915: PUSH
32916: LD_EXP 29
32920: PUSH
32921: LD_EXP 37
32925: PUSH
32926: LD_EXP 30
32930: PUSH
32931: LD_EXP 34
32935: PUSH
32936: LD_EXP 35
32940: PUSH
32941: LD_EXP 31
32945: PUSH
32946: LD_EXP 33
32950: PUSH
32951: LD_EXP 32
32955: PUSH
32956: LD_EXP 39
32960: PUSH
32961: LD_EXP 42
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: DIFF
32984: PPUSH
32985: LD_STRING 10_other_survivors
32987: PPUSH
32988: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) diff Mike , 10_ape ) ;
32992: LD_INT 50
32994: PUSH
32995: EMPTY
32996: LIST
32997: PUSH
32998: LD_INT 22
33000: PUSH
33001: LD_INT 1
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 21
33010: PUSH
33011: LD_INT 1
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 2
33020: PUSH
33021: LD_INT 25
33023: PUSH
33024: LD_INT 16
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 25
33033: PUSH
33034: LD_INT 12
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: LIST
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: PPUSH
33052: CALL_OW 69
33056: PUSH
33057: LD_EXP 41
33061: DIFF
33062: PPUSH
33063: LD_STRING 10_ape
33065: PPUSH
33066: CALL_OW 38
// YouWin ;
33070: CALL_OW 103
// end ;
33074: LD_VAR 0 1
33078: RET
// function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
33079: LD_INT 0
33081: PPUSH
33082: PPUSH
33083: PPUSH
33084: PPUSH
// epsilonBase := [ ] ;
33085: LD_ADDR_VAR 0 2
33089: PUSH
33090: EMPTY
33091: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
33092: LD_ADDR_VAR 0 3
33096: PUSH
33097: LD_INT 22
33099: PUSH
33100: LD_INT 1
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 21
33109: PUSH
33110: LD_INT 3
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 50
33119: PUSH
33120: EMPTY
33121: LIST
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: LIST
33127: PPUSH
33128: CALL_OW 69
33132: ST_TO_ADDR
// for i in buildings do
33133: LD_ADDR_VAR 0 4
33137: PUSH
33138: LD_VAR 0 3
33142: PUSH
33143: FOR_IN
33144: IFFALSE 33596
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
33146: LD_VAR 0 4
33150: PPUSH
33151: CALL_OW 266
33155: PUSH
33156: LD_INT 6
33158: PUSH
33159: LD_INT 7
33161: PUSH
33162: LD_INT 8
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: LIST
33169: IN
33170: IFFALSE 33284
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
33172: LD_ADDR_VAR 0 2
33176: PUSH
33177: LD_VAR 0 2
33181: PUSH
33182: LD_VAR 0 4
33186: PPUSH
33187: CALL_OW 266
33191: PUSH
33192: LD_VAR 0 4
33196: PPUSH
33197: CALL_OW 250
33201: PUSH
33202: LD_VAR 0 4
33206: PPUSH
33207: CALL_OW 251
33211: PUSH
33212: LD_VAR 0 4
33216: PPUSH
33217: CALL_OW 254
33221: PUSH
33222: LD_VAR 0 4
33226: PPUSH
33227: CALL_OW 267
33231: PUSH
33232: LD_VAR 0 4
33236: PPUSH
33237: CALL_OW 248
33241: PUSH
33242: LD_VAR 0 4
33246: PPUSH
33247: LD_INT 1
33249: PPUSH
33250: CALL_OW 268
33254: PUSH
33255: LD_VAR 0 4
33259: PPUSH
33260: LD_INT 2
33262: PPUSH
33263: CALL_OW 268
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: PUSH
33278: EMPTY
33279: LIST
33280: ADD
33281: ST_TO_ADDR
33282: GO 33594
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
33284: LD_VAR 0 4
33288: PPUSH
33289: CALL_OW 266
33293: PUSH
33294: LD_INT 32
33296: EQUAL
33297: PUSH
33298: LD_VAR 0 4
33302: PPUSH
33303: CALL_OW 266
33307: PUSH
33308: LD_INT 33
33310: EQUAL
33311: OR
33312: IFFALSE 33409
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
33314: LD_ADDR_VAR 0 2
33318: PUSH
33319: LD_VAR 0 2
33323: PUSH
33324: LD_VAR 0 4
33328: PPUSH
33329: CALL_OW 266
33333: PUSH
33334: LD_VAR 0 4
33338: PPUSH
33339: CALL_OW 250
33343: PUSH
33344: LD_VAR 0 4
33348: PPUSH
33349: CALL_OW 251
33353: PUSH
33354: LD_VAR 0 4
33358: PPUSH
33359: CALL_OW 254
33363: PUSH
33364: LD_VAR 0 4
33368: PPUSH
33369: CALL_OW 267
33373: PUSH
33374: LD_VAR 0 4
33378: PPUSH
33379: CALL_OW 248
33383: PUSH
33384: LD_VAR 0 4
33388: PPUSH
33389: CALL_OW 269
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: PUSH
33403: EMPTY
33404: LIST
33405: ADD
33406: ST_TO_ADDR
33407: GO 33594
// if GetBType ( i ) = b_factory then
33409: LD_VAR 0 4
33413: PPUSH
33414: CALL_OW 266
33418: PUSH
33419: LD_INT 3
33421: EQUAL
33422: IFFALSE 33512
// epsilonBase := Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
33424: LD_ADDR_VAR 0 2
33428: PUSH
33429: LD_VAR 0 2
33433: PPUSH
33434: LD_INT 1
33436: PPUSH
33437: LD_VAR 0 4
33441: PPUSH
33442: CALL_OW 266
33446: PUSH
33447: LD_VAR 0 4
33451: PPUSH
33452: CALL_OW 250
33456: PUSH
33457: LD_VAR 0 4
33461: PPUSH
33462: CALL_OW 251
33466: PUSH
33467: LD_VAR 0 4
33471: PPUSH
33472: CALL_OW 254
33476: PUSH
33477: LD_VAR 0 4
33481: PPUSH
33482: CALL_OW 267
33486: PUSH
33487: LD_VAR 0 4
33491: PPUSH
33492: CALL_OW 248
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: PPUSH
33505: CALL_OW 2
33509: ST_TO_ADDR
33510: GO 33594
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
33512: LD_ADDR_VAR 0 2
33516: PUSH
33517: LD_VAR 0 2
33521: PUSH
33522: LD_VAR 0 4
33526: PPUSH
33527: CALL_OW 266
33531: PUSH
33532: LD_VAR 0 4
33536: PPUSH
33537: CALL_OW 250
33541: PUSH
33542: LD_VAR 0 4
33546: PPUSH
33547: CALL_OW 251
33551: PUSH
33552: LD_VAR 0 4
33556: PPUSH
33557: CALL_OW 254
33561: PUSH
33562: LD_VAR 0 4
33566: PPUSH
33567: CALL_OW 267
33571: PUSH
33572: LD_VAR 0 4
33576: PPUSH
33577: CALL_OW 248
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: PUSH
33590: EMPTY
33591: LIST
33592: ADD
33593: ST_TO_ADDR
// end ;
33594: GO 33143
33596: POP
33597: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
33598: LD_VAR 0 2
33602: PPUSH
33603: LD_STRING 10_EpsilonBase
33605: PPUSH
33606: CALL_OW 39
// SaveVariable ( ListEnvironmentArea ( epsilonBaseArea ) , 10_EpsilonEnv ) ;
33610: LD_INT 34
33612: PPUSH
33613: CALL_OW 353
33617: PPUSH
33618: LD_STRING 10_EpsilonEnv
33620: PPUSH
33621: CALL_OW 39
// end ; end_of_file
33625: LD_VAR 0 1
33629: RET
// every 1 1$05 + 0 0$20 trigger joinedToEpsilon do var i , tmp ;
33630: LD_EXP 7
33634: IFFALSE 33757
33636: GO 33638
33638: DISABLE
33639: LD_INT 0
33641: PPUSH
33642: PPUSH
// begin enable ;
33643: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
33644: LD_INT 35
33646: PPUSH
33647: LD_INT 385
33649: PPUSH
33650: CALL_OW 12
33654: PPUSH
33655: CALL_OW 67
// tmp := [ cratesSpawn1Area , cratesSpawn2Area , cratesSpawn3Area , cratesSpawn4Area , cratesSpawn5Area , cratesSpawn6Area ] ;
33659: LD_ADDR_VAR 0 2
33663: PUSH
33664: LD_INT 13
33666: PUSH
33667: LD_INT 14
33669: PUSH
33670: LD_INT 15
33672: PUSH
33673: LD_INT 16
33675: PUSH
33676: LD_INT 17
33678: PUSH
33679: LD_INT 38
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
33690: LD_ADDR_VAR 0 1
33694: PUSH
33695: LD_VAR 0 2
33699: PUSH
33700: LD_INT 1
33702: PPUSH
33703: LD_VAR 0 2
33707: PPUSH
33708: CALL 56715 0 1
33712: PPUSH
33713: CALL_OW 12
33717: ARRAY
33718: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 8 then
33719: LD_VAR 0 1
33723: PPUSH
33724: CALL_OW 435
33728: PUSH
33729: LD_INT 8
33731: LESS
33732: IFFALSE 33757
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
33734: LD_INT 1
33736: PPUSH
33737: LD_INT 5
33739: PPUSH
33740: CALL_OW 12
33744: PPUSH
33745: LD_VAR 0 1
33749: PPUSH
33750: LD_INT 1
33752: PPUSH
33753: CALL_OW 55
// end ;
33757: PPOPN 2
33759: END
// every 0 0$20 trigger tick < 5 5$00 and hasBase do
33760: LD_OWVAR 1
33764: PUSH
33765: LD_INT 10500
33767: LESS
33768: PUSH
33769: LD_EXP 9
33773: AND
33774: IFFALSE 33801
33776: GO 33778
33778: DISABLE
// begin enable ;
33779: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSpawn3Area , true ) ;
33780: LD_INT 1
33782: PPUSH
33783: LD_INT 5
33785: PPUSH
33786: CALL_OW 12
33790: PPUSH
33791: LD_INT 15
33793: PPUSH
33794: LD_INT 1
33796: PPUSH
33797: CALL_OW 55
// end ;
33801: END
// every 0 0$55 trigger ruBase do
33802: LD_EXP 68
33806: IFFALSE 33850
33808: GO 33810
33810: DISABLE
// begin enable ;
33811: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea ) < 3 then
33812: LD_EXP 84
33816: PPUSH
33817: CALL_OW 435
33821: PUSH
33822: LD_INT 3
33824: LESS
33825: IFFALSE 33850
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea , true ) ;
33827: LD_INT 1
33829: PPUSH
33830: LD_INT 5
33832: PPUSH
33833: CALL_OW 12
33837: PPUSH
33838: LD_EXP 84
33842: PPUSH
33843: LD_INT 1
33845: PPUSH
33846: CALL_OW 55
// end ;
33850: END
// every 1 1$05 trigger ruBase2 do
33851: LD_EXP 69
33855: IFFALSE 33899
33857: GO 33859
33859: DISABLE
// begin enable ;
33860: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea2 ) < 3 then
33861: LD_EXP 85
33865: PPUSH
33866: CALL_OW 435
33870: PUSH
33871: LD_INT 3
33873: LESS
33874: IFFALSE 33899
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea2 , true ) ;
33876: LD_INT 1
33878: PPUSH
33879: LD_INT 5
33881: PPUSH
33882: CALL_OW 12
33886: PPUSH
33887: LD_EXP 85
33891: PPUSH
33892: LD_INT 1
33894: PPUSH
33895: CALL_OW 55
// end ; end_of_file end_of_file
33899: END
// export globalGameSaveCounter ; every 0 0$1 do
33900: GO 33902
33902: DISABLE
// begin enable ;
33903: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
33904: LD_STRING updateTimer(
33906: PUSH
33907: LD_OWVAR 1
33911: STR
33912: PUSH
33913: LD_STRING );
33915: STR
33916: PPUSH
33917: CALL_OW 559
// end ;
33921: END
// every 0 0$1 do
33922: GO 33924
33924: DISABLE
// begin globalGameSaveCounter := 0 ;
33925: LD_ADDR_EXP 86
33929: PUSH
33930: LD_INT 0
33932: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
33933: LD_STRING setGameSaveCounter(0)
33935: PPUSH
33936: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
33940: LD_STRING initStreamRollete();
33942: PPUSH
33943: CALL_OW 559
// InitStreamMode ;
33947: CALL 35290 0 0
// DefineStreamItems ( false ) ;
33951: LD_INT 0
33953: PPUSH
33954: CALL 35754 0 1
// end ;
33958: END
// export function SOS_MapStart ( ) ; begin
33959: LD_INT 0
33961: PPUSH
// if streamModeActive then
33962: LD_EXP 87
33966: IFFALSE 33975
// DefineStreamItems ( true ) ;
33968: LD_INT 1
33970: PPUSH
33971: CALL 35754 0 1
// UpdateLuaVariables ( ) ;
33975: CALL 33992 0 0
// UpdateFactoryWaypoints ( ) ;
33979: CALL 48623 0 0
// UpdateWarehouseGatheringPoints ( ) ;
33983: CALL 48880 0 0
// end ;
33987: LD_VAR 0 1
33991: RET
// function UpdateLuaVariables ( ) ; begin
33992: LD_INT 0
33994: PPUSH
// if globalGameSaveCounter then
33995: LD_EXP 86
33999: IFFALSE 34033
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
34001: LD_ADDR_EXP 86
34005: PUSH
34006: LD_EXP 86
34010: PPUSH
34011: CALL 93665 0 1
34015: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
34016: LD_STRING setGameSaveCounter(
34018: PUSH
34019: LD_EXP 86
34023: STR
34024: PUSH
34025: LD_STRING )
34027: STR
34028: PPUSH
34029: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
34033: LD_STRING setGameDifficulty(
34035: PUSH
34036: LD_OWVAR 67
34040: STR
34041: PUSH
34042: LD_STRING )
34044: STR
34045: PPUSH
34046: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
34050: LD_STRING displayDifficulty(
34052: PUSH
34053: LD_OWVAR 67
34057: STR
34058: PUSH
34059: LD_STRING )
34061: STR
34062: PPUSH
34063: CALL_OW 559
// end ;
34067: LD_VAR 0 1
34071: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34072: LD_INT 0
34074: PPUSH
// if p2 = stream_mode then
34075: LD_VAR 0 2
34079: PUSH
34080: LD_INT 100
34082: EQUAL
34083: IFFALSE 35086
// begin if not StreamModeActive then
34085: LD_EXP 87
34089: NOT
34090: IFFALSE 34100
// StreamModeActive := true ;
34092: LD_ADDR_EXP 87
34096: PUSH
34097: LD_INT 1
34099: ST_TO_ADDR
// if p3 = 0 then
34100: LD_VAR 0 3
34104: PUSH
34105: LD_INT 0
34107: EQUAL
34108: IFFALSE 34114
// InitStreamMode ;
34110: CALL 35290 0 0
// if p3 = 1 then
34114: LD_VAR 0 3
34118: PUSH
34119: LD_INT 1
34121: EQUAL
34122: IFFALSE 34132
// sRocket := true ;
34124: LD_ADDR_EXP 92
34128: PUSH
34129: LD_INT 1
34131: ST_TO_ADDR
// if p3 = 2 then
34132: LD_VAR 0 3
34136: PUSH
34137: LD_INT 2
34139: EQUAL
34140: IFFALSE 34150
// sSpeed := true ;
34142: LD_ADDR_EXP 91
34146: PUSH
34147: LD_INT 1
34149: ST_TO_ADDR
// if p3 = 3 then
34150: LD_VAR 0 3
34154: PUSH
34155: LD_INT 3
34157: EQUAL
34158: IFFALSE 34168
// sEngine := true ;
34160: LD_ADDR_EXP 93
34164: PUSH
34165: LD_INT 1
34167: ST_TO_ADDR
// if p3 = 4 then
34168: LD_VAR 0 3
34172: PUSH
34173: LD_INT 4
34175: EQUAL
34176: IFFALSE 34186
// sSpec := true ;
34178: LD_ADDR_EXP 90
34182: PUSH
34183: LD_INT 1
34185: ST_TO_ADDR
// if p3 = 5 then
34186: LD_VAR 0 3
34190: PUSH
34191: LD_INT 5
34193: EQUAL
34194: IFFALSE 34204
// sLevel := true ;
34196: LD_ADDR_EXP 94
34200: PUSH
34201: LD_INT 1
34203: ST_TO_ADDR
// if p3 = 6 then
34204: LD_VAR 0 3
34208: PUSH
34209: LD_INT 6
34211: EQUAL
34212: IFFALSE 34222
// sArmoury := true ;
34214: LD_ADDR_EXP 95
34218: PUSH
34219: LD_INT 1
34221: ST_TO_ADDR
// if p3 = 7 then
34222: LD_VAR 0 3
34226: PUSH
34227: LD_INT 7
34229: EQUAL
34230: IFFALSE 34240
// sRadar := true ;
34232: LD_ADDR_EXP 96
34236: PUSH
34237: LD_INT 1
34239: ST_TO_ADDR
// if p3 = 8 then
34240: LD_VAR 0 3
34244: PUSH
34245: LD_INT 8
34247: EQUAL
34248: IFFALSE 34258
// sBunker := true ;
34250: LD_ADDR_EXP 97
34254: PUSH
34255: LD_INT 1
34257: ST_TO_ADDR
// if p3 = 9 then
34258: LD_VAR 0 3
34262: PUSH
34263: LD_INT 9
34265: EQUAL
34266: IFFALSE 34276
// sHack := true ;
34268: LD_ADDR_EXP 98
34272: PUSH
34273: LD_INT 1
34275: ST_TO_ADDR
// if p3 = 10 then
34276: LD_VAR 0 3
34280: PUSH
34281: LD_INT 10
34283: EQUAL
34284: IFFALSE 34294
// sFire := true ;
34286: LD_ADDR_EXP 99
34290: PUSH
34291: LD_INT 1
34293: ST_TO_ADDR
// if p3 = 11 then
34294: LD_VAR 0 3
34298: PUSH
34299: LD_INT 11
34301: EQUAL
34302: IFFALSE 34312
// sRefresh := true ;
34304: LD_ADDR_EXP 100
34308: PUSH
34309: LD_INT 1
34311: ST_TO_ADDR
// if p3 = 12 then
34312: LD_VAR 0 3
34316: PUSH
34317: LD_INT 12
34319: EQUAL
34320: IFFALSE 34330
// sExp := true ;
34322: LD_ADDR_EXP 101
34326: PUSH
34327: LD_INT 1
34329: ST_TO_ADDR
// if p3 = 13 then
34330: LD_VAR 0 3
34334: PUSH
34335: LD_INT 13
34337: EQUAL
34338: IFFALSE 34348
// sDepot := true ;
34340: LD_ADDR_EXP 102
34344: PUSH
34345: LD_INT 1
34347: ST_TO_ADDR
// if p3 = 14 then
34348: LD_VAR 0 3
34352: PUSH
34353: LD_INT 14
34355: EQUAL
34356: IFFALSE 34366
// sFlag := true ;
34358: LD_ADDR_EXP 103
34362: PUSH
34363: LD_INT 1
34365: ST_TO_ADDR
// if p3 = 15 then
34366: LD_VAR 0 3
34370: PUSH
34371: LD_INT 15
34373: EQUAL
34374: IFFALSE 34384
// sKamikadze := true ;
34376: LD_ADDR_EXP 111
34380: PUSH
34381: LD_INT 1
34383: ST_TO_ADDR
// if p3 = 16 then
34384: LD_VAR 0 3
34388: PUSH
34389: LD_INT 16
34391: EQUAL
34392: IFFALSE 34402
// sTroll := true ;
34394: LD_ADDR_EXP 112
34398: PUSH
34399: LD_INT 1
34401: ST_TO_ADDR
// if p3 = 17 then
34402: LD_VAR 0 3
34406: PUSH
34407: LD_INT 17
34409: EQUAL
34410: IFFALSE 34420
// sSlow := true ;
34412: LD_ADDR_EXP 113
34416: PUSH
34417: LD_INT 1
34419: ST_TO_ADDR
// if p3 = 18 then
34420: LD_VAR 0 3
34424: PUSH
34425: LD_INT 18
34427: EQUAL
34428: IFFALSE 34438
// sLack := true ;
34430: LD_ADDR_EXP 114
34434: PUSH
34435: LD_INT 1
34437: ST_TO_ADDR
// if p3 = 19 then
34438: LD_VAR 0 3
34442: PUSH
34443: LD_INT 19
34445: EQUAL
34446: IFFALSE 34456
// sTank := true ;
34448: LD_ADDR_EXP 116
34452: PUSH
34453: LD_INT 1
34455: ST_TO_ADDR
// if p3 = 20 then
34456: LD_VAR 0 3
34460: PUSH
34461: LD_INT 20
34463: EQUAL
34464: IFFALSE 34474
// sRemote := true ;
34466: LD_ADDR_EXP 117
34470: PUSH
34471: LD_INT 1
34473: ST_TO_ADDR
// if p3 = 21 then
34474: LD_VAR 0 3
34478: PUSH
34479: LD_INT 21
34481: EQUAL
34482: IFFALSE 34492
// sPowell := true ;
34484: LD_ADDR_EXP 118
34488: PUSH
34489: LD_INT 1
34491: ST_TO_ADDR
// if p3 = 22 then
34492: LD_VAR 0 3
34496: PUSH
34497: LD_INT 22
34499: EQUAL
34500: IFFALSE 34510
// sTeleport := true ;
34502: LD_ADDR_EXP 121
34506: PUSH
34507: LD_INT 1
34509: ST_TO_ADDR
// if p3 = 23 then
34510: LD_VAR 0 3
34514: PUSH
34515: LD_INT 23
34517: EQUAL
34518: IFFALSE 34528
// sOilTower := true ;
34520: LD_ADDR_EXP 123
34524: PUSH
34525: LD_INT 1
34527: ST_TO_ADDR
// if p3 = 24 then
34528: LD_VAR 0 3
34532: PUSH
34533: LD_INT 24
34535: EQUAL
34536: IFFALSE 34546
// sShovel := true ;
34538: LD_ADDR_EXP 124
34542: PUSH
34543: LD_INT 1
34545: ST_TO_ADDR
// if p3 = 25 then
34546: LD_VAR 0 3
34550: PUSH
34551: LD_INT 25
34553: EQUAL
34554: IFFALSE 34564
// sSheik := true ;
34556: LD_ADDR_EXP 125
34560: PUSH
34561: LD_INT 1
34563: ST_TO_ADDR
// if p3 = 26 then
34564: LD_VAR 0 3
34568: PUSH
34569: LD_INT 26
34571: EQUAL
34572: IFFALSE 34582
// sEarthquake := true ;
34574: LD_ADDR_EXP 127
34578: PUSH
34579: LD_INT 1
34581: ST_TO_ADDR
// if p3 = 27 then
34582: LD_VAR 0 3
34586: PUSH
34587: LD_INT 27
34589: EQUAL
34590: IFFALSE 34600
// sAI := true ;
34592: LD_ADDR_EXP 128
34596: PUSH
34597: LD_INT 1
34599: ST_TO_ADDR
// if p3 = 28 then
34600: LD_VAR 0 3
34604: PUSH
34605: LD_INT 28
34607: EQUAL
34608: IFFALSE 34618
// sCargo := true ;
34610: LD_ADDR_EXP 131
34614: PUSH
34615: LD_INT 1
34617: ST_TO_ADDR
// if p3 = 29 then
34618: LD_VAR 0 3
34622: PUSH
34623: LD_INT 29
34625: EQUAL
34626: IFFALSE 34636
// sDLaser := true ;
34628: LD_ADDR_EXP 132
34632: PUSH
34633: LD_INT 1
34635: ST_TO_ADDR
// if p3 = 30 then
34636: LD_VAR 0 3
34640: PUSH
34641: LD_INT 30
34643: EQUAL
34644: IFFALSE 34654
// sExchange := true ;
34646: LD_ADDR_EXP 133
34650: PUSH
34651: LD_INT 1
34653: ST_TO_ADDR
// if p3 = 31 then
34654: LD_VAR 0 3
34658: PUSH
34659: LD_INT 31
34661: EQUAL
34662: IFFALSE 34672
// sFac := true ;
34664: LD_ADDR_EXP 134
34668: PUSH
34669: LD_INT 1
34671: ST_TO_ADDR
// if p3 = 32 then
34672: LD_VAR 0 3
34676: PUSH
34677: LD_INT 32
34679: EQUAL
34680: IFFALSE 34690
// sPower := true ;
34682: LD_ADDR_EXP 135
34686: PUSH
34687: LD_INT 1
34689: ST_TO_ADDR
// if p3 = 33 then
34690: LD_VAR 0 3
34694: PUSH
34695: LD_INT 33
34697: EQUAL
34698: IFFALSE 34708
// sRandom := true ;
34700: LD_ADDR_EXP 136
34704: PUSH
34705: LD_INT 1
34707: ST_TO_ADDR
// if p3 = 34 then
34708: LD_VAR 0 3
34712: PUSH
34713: LD_INT 34
34715: EQUAL
34716: IFFALSE 34726
// sShield := true ;
34718: LD_ADDR_EXP 137
34722: PUSH
34723: LD_INT 1
34725: ST_TO_ADDR
// if p3 = 35 then
34726: LD_VAR 0 3
34730: PUSH
34731: LD_INT 35
34733: EQUAL
34734: IFFALSE 34744
// sTime := true ;
34736: LD_ADDR_EXP 138
34740: PUSH
34741: LD_INT 1
34743: ST_TO_ADDR
// if p3 = 36 then
34744: LD_VAR 0 3
34748: PUSH
34749: LD_INT 36
34751: EQUAL
34752: IFFALSE 34762
// sTools := true ;
34754: LD_ADDR_EXP 139
34758: PUSH
34759: LD_INT 1
34761: ST_TO_ADDR
// if p3 = 101 then
34762: LD_VAR 0 3
34766: PUSH
34767: LD_INT 101
34769: EQUAL
34770: IFFALSE 34780
// sSold := true ;
34772: LD_ADDR_EXP 104
34776: PUSH
34777: LD_INT 1
34779: ST_TO_ADDR
// if p3 = 102 then
34780: LD_VAR 0 3
34784: PUSH
34785: LD_INT 102
34787: EQUAL
34788: IFFALSE 34798
// sDiff := true ;
34790: LD_ADDR_EXP 105
34794: PUSH
34795: LD_INT 1
34797: ST_TO_ADDR
// if p3 = 103 then
34798: LD_VAR 0 3
34802: PUSH
34803: LD_INT 103
34805: EQUAL
34806: IFFALSE 34816
// sFog := true ;
34808: LD_ADDR_EXP 108
34812: PUSH
34813: LD_INT 1
34815: ST_TO_ADDR
// if p3 = 104 then
34816: LD_VAR 0 3
34820: PUSH
34821: LD_INT 104
34823: EQUAL
34824: IFFALSE 34834
// sReset := true ;
34826: LD_ADDR_EXP 109
34830: PUSH
34831: LD_INT 1
34833: ST_TO_ADDR
// if p3 = 105 then
34834: LD_VAR 0 3
34838: PUSH
34839: LD_INT 105
34841: EQUAL
34842: IFFALSE 34852
// sSun := true ;
34844: LD_ADDR_EXP 110
34848: PUSH
34849: LD_INT 1
34851: ST_TO_ADDR
// if p3 = 106 then
34852: LD_VAR 0 3
34856: PUSH
34857: LD_INT 106
34859: EQUAL
34860: IFFALSE 34870
// sTiger := true ;
34862: LD_ADDR_EXP 106
34866: PUSH
34867: LD_INT 1
34869: ST_TO_ADDR
// if p3 = 107 then
34870: LD_VAR 0 3
34874: PUSH
34875: LD_INT 107
34877: EQUAL
34878: IFFALSE 34888
// sBomb := true ;
34880: LD_ADDR_EXP 107
34884: PUSH
34885: LD_INT 1
34887: ST_TO_ADDR
// if p3 = 108 then
34888: LD_VAR 0 3
34892: PUSH
34893: LD_INT 108
34895: EQUAL
34896: IFFALSE 34906
// sWound := true ;
34898: LD_ADDR_EXP 115
34902: PUSH
34903: LD_INT 1
34905: ST_TO_ADDR
// if p3 = 109 then
34906: LD_VAR 0 3
34910: PUSH
34911: LD_INT 109
34913: EQUAL
34914: IFFALSE 34924
// sBetray := true ;
34916: LD_ADDR_EXP 119
34920: PUSH
34921: LD_INT 1
34923: ST_TO_ADDR
// if p3 = 110 then
34924: LD_VAR 0 3
34928: PUSH
34929: LD_INT 110
34931: EQUAL
34932: IFFALSE 34942
// sContamin := true ;
34934: LD_ADDR_EXP 120
34938: PUSH
34939: LD_INT 1
34941: ST_TO_ADDR
// if p3 = 111 then
34942: LD_VAR 0 3
34946: PUSH
34947: LD_INT 111
34949: EQUAL
34950: IFFALSE 34960
// sOil := true ;
34952: LD_ADDR_EXP 122
34956: PUSH
34957: LD_INT 1
34959: ST_TO_ADDR
// if p3 = 112 then
34960: LD_VAR 0 3
34964: PUSH
34965: LD_INT 112
34967: EQUAL
34968: IFFALSE 34978
// sStu := true ;
34970: LD_ADDR_EXP 126
34974: PUSH
34975: LD_INT 1
34977: ST_TO_ADDR
// if p3 = 113 then
34978: LD_VAR 0 3
34982: PUSH
34983: LD_INT 113
34985: EQUAL
34986: IFFALSE 34996
// sBazooka := true ;
34988: LD_ADDR_EXP 129
34992: PUSH
34993: LD_INT 1
34995: ST_TO_ADDR
// if p3 = 114 then
34996: LD_VAR 0 3
35000: PUSH
35001: LD_INT 114
35003: EQUAL
35004: IFFALSE 35014
// sMortar := true ;
35006: LD_ADDR_EXP 130
35010: PUSH
35011: LD_INT 1
35013: ST_TO_ADDR
// if p3 = 115 then
35014: LD_VAR 0 3
35018: PUSH
35019: LD_INT 115
35021: EQUAL
35022: IFFALSE 35032
// sRanger := true ;
35024: LD_ADDR_EXP 140
35028: PUSH
35029: LD_INT 1
35031: ST_TO_ADDR
// if p3 = 116 then
35032: LD_VAR 0 3
35036: PUSH
35037: LD_INT 116
35039: EQUAL
35040: IFFALSE 35050
// sComputer := true ;
35042: LD_ADDR_EXP 141
35046: PUSH
35047: LD_INT 1
35049: ST_TO_ADDR
// if p3 = 117 then
35050: LD_VAR 0 3
35054: PUSH
35055: LD_INT 117
35057: EQUAL
35058: IFFALSE 35068
// s30 := true ;
35060: LD_ADDR_EXP 142
35064: PUSH
35065: LD_INT 1
35067: ST_TO_ADDR
// if p3 = 118 then
35068: LD_VAR 0 3
35072: PUSH
35073: LD_INT 118
35075: EQUAL
35076: IFFALSE 35086
// s60 := true ;
35078: LD_ADDR_EXP 143
35082: PUSH
35083: LD_INT 1
35085: ST_TO_ADDR
// end ; if p2 = hack_mode then
35086: LD_VAR 0 2
35090: PUSH
35091: LD_INT 101
35093: EQUAL
35094: IFFALSE 35222
// begin case p3 of 1 :
35096: LD_VAR 0 3
35100: PUSH
35101: LD_INT 1
35103: DOUBLE
35104: EQUAL
35105: IFTRUE 35109
35107: GO 35116
35109: POP
// hHackUnlimitedResources ; 2 :
35110: CALL 47369 0 0
35114: GO 35222
35116: LD_INT 2
35118: DOUBLE
35119: EQUAL
35120: IFTRUE 35124
35122: GO 35131
35124: POP
// hHackSetLevel10 ; 3 :
35125: CALL 47502 0 0
35129: GO 35222
35131: LD_INT 3
35133: DOUBLE
35134: EQUAL
35135: IFTRUE 35139
35137: GO 35146
35139: POP
// hHackSetLevel10YourUnits ; 4 :
35140: CALL 47587 0 0
35144: GO 35222
35146: LD_INT 4
35148: DOUBLE
35149: EQUAL
35150: IFTRUE 35154
35152: GO 35161
35154: POP
// hHackInvincible ; 5 :
35155: CALL 48035 0 0
35159: GO 35222
35161: LD_INT 5
35163: DOUBLE
35164: EQUAL
35165: IFTRUE 35169
35167: GO 35176
35169: POP
// hHackInvisible ; 6 :
35170: CALL 48146 0 0
35174: GO 35222
35176: LD_INT 6
35178: DOUBLE
35179: EQUAL
35180: IFTRUE 35184
35182: GO 35191
35184: POP
// hHackChangeYourSide ; 7 :
35185: CALL 48203 0 0
35189: GO 35222
35191: LD_INT 7
35193: DOUBLE
35194: EQUAL
35195: IFTRUE 35199
35197: GO 35206
35199: POP
// hHackChangeUnitSide ; 8 :
35200: CALL 48245 0 0
35204: GO 35222
35206: LD_INT 8
35208: DOUBLE
35209: EQUAL
35210: IFTRUE 35214
35212: GO 35221
35214: POP
// hHackFog ; end ;
35215: CALL 48346 0 0
35219: GO 35222
35221: POP
// end ; if p2 = game_save_mode then
35222: LD_VAR 0 2
35226: PUSH
35227: LD_INT 102
35229: EQUAL
35230: IFFALSE 35285
// begin if p3 = 1 then
35232: LD_VAR 0 3
35236: PUSH
35237: LD_INT 1
35239: EQUAL
35240: IFFALSE 35252
// globalGameSaveCounter := p4 ;
35242: LD_ADDR_EXP 86
35246: PUSH
35247: LD_VAR 0 4
35251: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
35252: LD_VAR 0 3
35256: PUSH
35257: LD_INT 2
35259: EQUAL
35260: PUSH
35261: LD_EXP 86
35265: AND
35266: IFFALSE 35285
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
35268: LD_STRING setGameSaveCounter(
35270: PUSH
35271: LD_EXP 86
35275: STR
35276: PUSH
35277: LD_STRING )
35279: STR
35280: PPUSH
35281: CALL_OW 559
// end ; end ;
35285: LD_VAR 0 7
35289: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
35290: LD_INT 0
35292: PPUSH
// streamModeActive := false ;
35293: LD_ADDR_EXP 87
35297: PUSH
35298: LD_INT 0
35300: ST_TO_ADDR
// normalCounter := 36 ;
35301: LD_ADDR_EXP 88
35305: PUSH
35306: LD_INT 36
35308: ST_TO_ADDR
// hardcoreCounter := 18 ;
35309: LD_ADDR_EXP 89
35313: PUSH
35314: LD_INT 18
35316: ST_TO_ADDR
// sRocket := false ;
35317: LD_ADDR_EXP 92
35321: PUSH
35322: LD_INT 0
35324: ST_TO_ADDR
// sSpeed := false ;
35325: LD_ADDR_EXP 91
35329: PUSH
35330: LD_INT 0
35332: ST_TO_ADDR
// sEngine := false ;
35333: LD_ADDR_EXP 93
35337: PUSH
35338: LD_INT 0
35340: ST_TO_ADDR
// sSpec := false ;
35341: LD_ADDR_EXP 90
35345: PUSH
35346: LD_INT 0
35348: ST_TO_ADDR
// sLevel := false ;
35349: LD_ADDR_EXP 94
35353: PUSH
35354: LD_INT 0
35356: ST_TO_ADDR
// sArmoury := false ;
35357: LD_ADDR_EXP 95
35361: PUSH
35362: LD_INT 0
35364: ST_TO_ADDR
// sRadar := false ;
35365: LD_ADDR_EXP 96
35369: PUSH
35370: LD_INT 0
35372: ST_TO_ADDR
// sBunker := false ;
35373: LD_ADDR_EXP 97
35377: PUSH
35378: LD_INT 0
35380: ST_TO_ADDR
// sHack := false ;
35381: LD_ADDR_EXP 98
35385: PUSH
35386: LD_INT 0
35388: ST_TO_ADDR
// sFire := false ;
35389: LD_ADDR_EXP 99
35393: PUSH
35394: LD_INT 0
35396: ST_TO_ADDR
// sRefresh := false ;
35397: LD_ADDR_EXP 100
35401: PUSH
35402: LD_INT 0
35404: ST_TO_ADDR
// sExp := false ;
35405: LD_ADDR_EXP 101
35409: PUSH
35410: LD_INT 0
35412: ST_TO_ADDR
// sDepot := false ;
35413: LD_ADDR_EXP 102
35417: PUSH
35418: LD_INT 0
35420: ST_TO_ADDR
// sFlag := false ;
35421: LD_ADDR_EXP 103
35425: PUSH
35426: LD_INT 0
35428: ST_TO_ADDR
// sKamikadze := false ;
35429: LD_ADDR_EXP 111
35433: PUSH
35434: LD_INT 0
35436: ST_TO_ADDR
// sTroll := false ;
35437: LD_ADDR_EXP 112
35441: PUSH
35442: LD_INT 0
35444: ST_TO_ADDR
// sSlow := false ;
35445: LD_ADDR_EXP 113
35449: PUSH
35450: LD_INT 0
35452: ST_TO_ADDR
// sLack := false ;
35453: LD_ADDR_EXP 114
35457: PUSH
35458: LD_INT 0
35460: ST_TO_ADDR
// sTank := false ;
35461: LD_ADDR_EXP 116
35465: PUSH
35466: LD_INT 0
35468: ST_TO_ADDR
// sRemote := false ;
35469: LD_ADDR_EXP 117
35473: PUSH
35474: LD_INT 0
35476: ST_TO_ADDR
// sPowell := false ;
35477: LD_ADDR_EXP 118
35481: PUSH
35482: LD_INT 0
35484: ST_TO_ADDR
// sTeleport := false ;
35485: LD_ADDR_EXP 121
35489: PUSH
35490: LD_INT 0
35492: ST_TO_ADDR
// sOilTower := false ;
35493: LD_ADDR_EXP 123
35497: PUSH
35498: LD_INT 0
35500: ST_TO_ADDR
// sShovel := false ;
35501: LD_ADDR_EXP 124
35505: PUSH
35506: LD_INT 0
35508: ST_TO_ADDR
// sSheik := false ;
35509: LD_ADDR_EXP 125
35513: PUSH
35514: LD_INT 0
35516: ST_TO_ADDR
// sEarthquake := false ;
35517: LD_ADDR_EXP 127
35521: PUSH
35522: LD_INT 0
35524: ST_TO_ADDR
// sAI := false ;
35525: LD_ADDR_EXP 128
35529: PUSH
35530: LD_INT 0
35532: ST_TO_ADDR
// sCargo := false ;
35533: LD_ADDR_EXP 131
35537: PUSH
35538: LD_INT 0
35540: ST_TO_ADDR
// sDLaser := false ;
35541: LD_ADDR_EXP 132
35545: PUSH
35546: LD_INT 0
35548: ST_TO_ADDR
// sExchange := false ;
35549: LD_ADDR_EXP 133
35553: PUSH
35554: LD_INT 0
35556: ST_TO_ADDR
// sFac := false ;
35557: LD_ADDR_EXP 134
35561: PUSH
35562: LD_INT 0
35564: ST_TO_ADDR
// sPower := false ;
35565: LD_ADDR_EXP 135
35569: PUSH
35570: LD_INT 0
35572: ST_TO_ADDR
// sRandom := false ;
35573: LD_ADDR_EXP 136
35577: PUSH
35578: LD_INT 0
35580: ST_TO_ADDR
// sShield := false ;
35581: LD_ADDR_EXP 137
35585: PUSH
35586: LD_INT 0
35588: ST_TO_ADDR
// sTime := false ;
35589: LD_ADDR_EXP 138
35593: PUSH
35594: LD_INT 0
35596: ST_TO_ADDR
// sTools := false ;
35597: LD_ADDR_EXP 139
35601: PUSH
35602: LD_INT 0
35604: ST_TO_ADDR
// sSold := false ;
35605: LD_ADDR_EXP 104
35609: PUSH
35610: LD_INT 0
35612: ST_TO_ADDR
// sDiff := false ;
35613: LD_ADDR_EXP 105
35617: PUSH
35618: LD_INT 0
35620: ST_TO_ADDR
// sFog := false ;
35621: LD_ADDR_EXP 108
35625: PUSH
35626: LD_INT 0
35628: ST_TO_ADDR
// sReset := false ;
35629: LD_ADDR_EXP 109
35633: PUSH
35634: LD_INT 0
35636: ST_TO_ADDR
// sSun := false ;
35637: LD_ADDR_EXP 110
35641: PUSH
35642: LD_INT 0
35644: ST_TO_ADDR
// sTiger := false ;
35645: LD_ADDR_EXP 106
35649: PUSH
35650: LD_INT 0
35652: ST_TO_ADDR
// sBomb := false ;
35653: LD_ADDR_EXP 107
35657: PUSH
35658: LD_INT 0
35660: ST_TO_ADDR
// sWound := false ;
35661: LD_ADDR_EXP 115
35665: PUSH
35666: LD_INT 0
35668: ST_TO_ADDR
// sBetray := false ;
35669: LD_ADDR_EXP 119
35673: PUSH
35674: LD_INT 0
35676: ST_TO_ADDR
// sContamin := false ;
35677: LD_ADDR_EXP 120
35681: PUSH
35682: LD_INT 0
35684: ST_TO_ADDR
// sOil := false ;
35685: LD_ADDR_EXP 122
35689: PUSH
35690: LD_INT 0
35692: ST_TO_ADDR
// sStu := false ;
35693: LD_ADDR_EXP 126
35697: PUSH
35698: LD_INT 0
35700: ST_TO_ADDR
// sBazooka := false ;
35701: LD_ADDR_EXP 129
35705: PUSH
35706: LD_INT 0
35708: ST_TO_ADDR
// sMortar := false ;
35709: LD_ADDR_EXP 130
35713: PUSH
35714: LD_INT 0
35716: ST_TO_ADDR
// sRanger := false ;
35717: LD_ADDR_EXP 140
35721: PUSH
35722: LD_INT 0
35724: ST_TO_ADDR
// sComputer := false ;
35725: LD_ADDR_EXP 141
35729: PUSH
35730: LD_INT 0
35732: ST_TO_ADDR
// s30 := false ;
35733: LD_ADDR_EXP 142
35737: PUSH
35738: LD_INT 0
35740: ST_TO_ADDR
// s60 := false ;
35741: LD_ADDR_EXP 143
35745: PUSH
35746: LD_INT 0
35748: ST_TO_ADDR
// end ;
35749: LD_VAR 0 1
35753: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
35754: LD_INT 0
35756: PPUSH
35757: PPUSH
35758: PPUSH
35759: PPUSH
35760: PPUSH
35761: PPUSH
35762: PPUSH
// result := [ ] ;
35763: LD_ADDR_VAR 0 2
35767: PUSH
35768: EMPTY
35769: ST_TO_ADDR
// if campaign_id = 1 then
35770: LD_OWVAR 69
35774: PUSH
35775: LD_INT 1
35777: EQUAL
35778: IFFALSE 38944
// begin case mission_number of 1 :
35780: LD_OWVAR 70
35784: PUSH
35785: LD_INT 1
35787: DOUBLE
35788: EQUAL
35789: IFTRUE 35793
35791: GO 35869
35793: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
35794: LD_ADDR_VAR 0 2
35798: PUSH
35799: LD_INT 2
35801: PUSH
35802: LD_INT 4
35804: PUSH
35805: LD_INT 11
35807: PUSH
35808: LD_INT 12
35810: PUSH
35811: LD_INT 15
35813: PUSH
35814: LD_INT 16
35816: PUSH
35817: LD_INT 22
35819: PUSH
35820: LD_INT 23
35822: PUSH
35823: LD_INT 26
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 101
35839: PUSH
35840: LD_INT 102
35842: PUSH
35843: LD_INT 106
35845: PUSH
35846: LD_INT 116
35848: PUSH
35849: LD_INT 117
35851: PUSH
35852: LD_INT 118
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: ST_TO_ADDR
35867: GO 38942
35869: LD_INT 2
35871: DOUBLE
35872: EQUAL
35873: IFTRUE 35877
35875: GO 35961
35877: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
35878: LD_ADDR_VAR 0 2
35882: PUSH
35883: LD_INT 2
35885: PUSH
35886: LD_INT 4
35888: PUSH
35889: LD_INT 11
35891: PUSH
35892: LD_INT 12
35894: PUSH
35895: LD_INT 15
35897: PUSH
35898: LD_INT 16
35900: PUSH
35901: LD_INT 22
35903: PUSH
35904: LD_INT 23
35906: PUSH
35907: LD_INT 26
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 101
35923: PUSH
35924: LD_INT 102
35926: PUSH
35927: LD_INT 105
35929: PUSH
35930: LD_INT 106
35932: PUSH
35933: LD_INT 108
35935: PUSH
35936: LD_INT 116
35938: PUSH
35939: LD_INT 117
35941: PUSH
35942: LD_INT 118
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: ST_TO_ADDR
35959: GO 38942
35961: LD_INT 3
35963: DOUBLE
35964: EQUAL
35965: IFTRUE 35969
35967: GO 36057
35969: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
35970: LD_ADDR_VAR 0 2
35974: PUSH
35975: LD_INT 2
35977: PUSH
35978: LD_INT 4
35980: PUSH
35981: LD_INT 5
35983: PUSH
35984: LD_INT 11
35986: PUSH
35987: LD_INT 12
35989: PUSH
35990: LD_INT 15
35992: PUSH
35993: LD_INT 16
35995: PUSH
35996: LD_INT 22
35998: PUSH
35999: LD_INT 26
36001: PUSH
36002: LD_INT 36
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 101
36019: PUSH
36020: LD_INT 102
36022: PUSH
36023: LD_INT 105
36025: PUSH
36026: LD_INT 106
36028: PUSH
36029: LD_INT 108
36031: PUSH
36032: LD_INT 116
36034: PUSH
36035: LD_INT 117
36037: PUSH
36038: LD_INT 118
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: ST_TO_ADDR
36055: GO 38942
36057: LD_INT 4
36059: DOUBLE
36060: EQUAL
36061: IFTRUE 36065
36063: GO 36161
36065: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
36066: LD_ADDR_VAR 0 2
36070: PUSH
36071: LD_INT 2
36073: PUSH
36074: LD_INT 4
36076: PUSH
36077: LD_INT 5
36079: PUSH
36080: LD_INT 8
36082: PUSH
36083: LD_INT 11
36085: PUSH
36086: LD_INT 12
36088: PUSH
36089: LD_INT 15
36091: PUSH
36092: LD_INT 16
36094: PUSH
36095: LD_INT 22
36097: PUSH
36098: LD_INT 23
36100: PUSH
36101: LD_INT 26
36103: PUSH
36104: LD_INT 36
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 101
36123: PUSH
36124: LD_INT 102
36126: PUSH
36127: LD_INT 105
36129: PUSH
36130: LD_INT 106
36132: PUSH
36133: LD_INT 108
36135: PUSH
36136: LD_INT 116
36138: PUSH
36139: LD_INT 117
36141: PUSH
36142: LD_INT 118
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: ST_TO_ADDR
36159: GO 38942
36161: LD_INT 5
36163: DOUBLE
36164: EQUAL
36165: IFTRUE 36169
36167: GO 36281
36169: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
36170: LD_ADDR_VAR 0 2
36174: PUSH
36175: LD_INT 2
36177: PUSH
36178: LD_INT 4
36180: PUSH
36181: LD_INT 5
36183: PUSH
36184: LD_INT 6
36186: PUSH
36187: LD_INT 8
36189: PUSH
36190: LD_INT 11
36192: PUSH
36193: LD_INT 12
36195: PUSH
36196: LD_INT 15
36198: PUSH
36199: LD_INT 16
36201: PUSH
36202: LD_INT 22
36204: PUSH
36205: LD_INT 23
36207: PUSH
36208: LD_INT 25
36210: PUSH
36211: LD_INT 26
36213: PUSH
36214: LD_INT 36
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 101
36235: PUSH
36236: LD_INT 102
36238: PUSH
36239: LD_INT 105
36241: PUSH
36242: LD_INT 106
36244: PUSH
36245: LD_INT 108
36247: PUSH
36248: LD_INT 109
36250: PUSH
36251: LD_INT 112
36253: PUSH
36254: LD_INT 116
36256: PUSH
36257: LD_INT 117
36259: PUSH
36260: LD_INT 118
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: ST_TO_ADDR
36279: GO 38942
36281: LD_INT 6
36283: DOUBLE
36284: EQUAL
36285: IFTRUE 36289
36287: GO 36421
36289: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
36290: LD_ADDR_VAR 0 2
36294: PUSH
36295: LD_INT 2
36297: PUSH
36298: LD_INT 4
36300: PUSH
36301: LD_INT 5
36303: PUSH
36304: LD_INT 6
36306: PUSH
36307: LD_INT 8
36309: PUSH
36310: LD_INT 11
36312: PUSH
36313: LD_INT 12
36315: PUSH
36316: LD_INT 15
36318: PUSH
36319: LD_INT 16
36321: PUSH
36322: LD_INT 20
36324: PUSH
36325: LD_INT 21
36327: PUSH
36328: LD_INT 22
36330: PUSH
36331: LD_INT 23
36333: PUSH
36334: LD_INT 25
36336: PUSH
36337: LD_INT 26
36339: PUSH
36340: LD_INT 30
36342: PUSH
36343: LD_INT 31
36345: PUSH
36346: LD_INT 32
36348: PUSH
36349: LD_INT 36
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 101
36375: PUSH
36376: LD_INT 102
36378: PUSH
36379: LD_INT 105
36381: PUSH
36382: LD_INT 106
36384: PUSH
36385: LD_INT 108
36387: PUSH
36388: LD_INT 109
36390: PUSH
36391: LD_INT 112
36393: PUSH
36394: LD_INT 116
36396: PUSH
36397: LD_INT 117
36399: PUSH
36400: LD_INT 118
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: ST_TO_ADDR
36419: GO 38942
36421: LD_INT 7
36423: DOUBLE
36424: EQUAL
36425: IFTRUE 36429
36427: GO 36541
36429: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
36430: LD_ADDR_VAR 0 2
36434: PUSH
36435: LD_INT 2
36437: PUSH
36438: LD_INT 4
36440: PUSH
36441: LD_INT 5
36443: PUSH
36444: LD_INT 7
36446: PUSH
36447: LD_INT 11
36449: PUSH
36450: LD_INT 12
36452: PUSH
36453: LD_INT 15
36455: PUSH
36456: LD_INT 16
36458: PUSH
36459: LD_INT 20
36461: PUSH
36462: LD_INT 21
36464: PUSH
36465: LD_INT 22
36467: PUSH
36468: LD_INT 23
36470: PUSH
36471: LD_INT 25
36473: PUSH
36474: LD_INT 26
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 101
36495: PUSH
36496: LD_INT 102
36498: PUSH
36499: LD_INT 103
36501: PUSH
36502: LD_INT 105
36504: PUSH
36505: LD_INT 106
36507: PUSH
36508: LD_INT 108
36510: PUSH
36511: LD_INT 112
36513: PUSH
36514: LD_INT 116
36516: PUSH
36517: LD_INT 117
36519: PUSH
36520: LD_INT 118
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: ST_TO_ADDR
36539: GO 38942
36541: LD_INT 8
36543: DOUBLE
36544: EQUAL
36545: IFTRUE 36549
36547: GO 36689
36549: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
36550: LD_ADDR_VAR 0 2
36554: PUSH
36555: LD_INT 2
36557: PUSH
36558: LD_INT 4
36560: PUSH
36561: LD_INT 5
36563: PUSH
36564: LD_INT 6
36566: PUSH
36567: LD_INT 7
36569: PUSH
36570: LD_INT 8
36572: PUSH
36573: LD_INT 11
36575: PUSH
36576: LD_INT 12
36578: PUSH
36579: LD_INT 15
36581: PUSH
36582: LD_INT 16
36584: PUSH
36585: LD_INT 20
36587: PUSH
36588: LD_INT 21
36590: PUSH
36591: LD_INT 22
36593: PUSH
36594: LD_INT 23
36596: PUSH
36597: LD_INT 25
36599: PUSH
36600: LD_INT 26
36602: PUSH
36603: LD_INT 30
36605: PUSH
36606: LD_INT 31
36608: PUSH
36609: LD_INT 32
36611: PUSH
36612: LD_INT 36
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 101
36639: PUSH
36640: LD_INT 102
36642: PUSH
36643: LD_INT 103
36645: PUSH
36646: LD_INT 105
36648: PUSH
36649: LD_INT 106
36651: PUSH
36652: LD_INT 108
36654: PUSH
36655: LD_INT 109
36657: PUSH
36658: LD_INT 112
36660: PUSH
36661: LD_INT 116
36663: PUSH
36664: LD_INT 117
36666: PUSH
36667: LD_INT 118
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: ST_TO_ADDR
36687: GO 38942
36689: LD_INT 9
36691: DOUBLE
36692: EQUAL
36693: IFTRUE 36697
36695: GO 36845
36697: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
36698: LD_ADDR_VAR 0 2
36702: PUSH
36703: LD_INT 2
36705: PUSH
36706: LD_INT 4
36708: PUSH
36709: LD_INT 5
36711: PUSH
36712: LD_INT 6
36714: PUSH
36715: LD_INT 7
36717: PUSH
36718: LD_INT 8
36720: PUSH
36721: LD_INT 11
36723: PUSH
36724: LD_INT 12
36726: PUSH
36727: LD_INT 15
36729: PUSH
36730: LD_INT 16
36732: PUSH
36733: LD_INT 20
36735: PUSH
36736: LD_INT 21
36738: PUSH
36739: LD_INT 22
36741: PUSH
36742: LD_INT 23
36744: PUSH
36745: LD_INT 25
36747: PUSH
36748: LD_INT 26
36750: PUSH
36751: LD_INT 28
36753: PUSH
36754: LD_INT 30
36756: PUSH
36757: LD_INT 31
36759: PUSH
36760: LD_INT 32
36762: PUSH
36763: LD_INT 36
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 101
36791: PUSH
36792: LD_INT 102
36794: PUSH
36795: LD_INT 103
36797: PUSH
36798: LD_INT 105
36800: PUSH
36801: LD_INT 106
36803: PUSH
36804: LD_INT 108
36806: PUSH
36807: LD_INT 109
36809: PUSH
36810: LD_INT 112
36812: PUSH
36813: LD_INT 114
36815: PUSH
36816: LD_INT 116
36818: PUSH
36819: LD_INT 117
36821: PUSH
36822: LD_INT 118
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: ST_TO_ADDR
36843: GO 38942
36845: LD_INT 10
36847: DOUBLE
36848: EQUAL
36849: IFTRUE 36853
36851: GO 37049
36853: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
36854: LD_ADDR_VAR 0 2
36858: PUSH
36859: LD_INT 2
36861: PUSH
36862: LD_INT 4
36864: PUSH
36865: LD_INT 5
36867: PUSH
36868: LD_INT 6
36870: PUSH
36871: LD_INT 7
36873: PUSH
36874: LD_INT 8
36876: PUSH
36877: LD_INT 9
36879: PUSH
36880: LD_INT 10
36882: PUSH
36883: LD_INT 11
36885: PUSH
36886: LD_INT 12
36888: PUSH
36889: LD_INT 13
36891: PUSH
36892: LD_INT 14
36894: PUSH
36895: LD_INT 15
36897: PUSH
36898: LD_INT 16
36900: PUSH
36901: LD_INT 17
36903: PUSH
36904: LD_INT 18
36906: PUSH
36907: LD_INT 19
36909: PUSH
36910: LD_INT 20
36912: PUSH
36913: LD_INT 21
36915: PUSH
36916: LD_INT 22
36918: PUSH
36919: LD_INT 23
36921: PUSH
36922: LD_INT 24
36924: PUSH
36925: LD_INT 25
36927: PUSH
36928: LD_INT 26
36930: PUSH
36931: LD_INT 28
36933: PUSH
36934: LD_INT 30
36936: PUSH
36937: LD_INT 31
36939: PUSH
36940: LD_INT 32
36942: PUSH
36943: LD_INT 36
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 101
36979: PUSH
36980: LD_INT 102
36982: PUSH
36983: LD_INT 103
36985: PUSH
36986: LD_INT 104
36988: PUSH
36989: LD_INT 105
36991: PUSH
36992: LD_INT 106
36994: PUSH
36995: LD_INT 107
36997: PUSH
36998: LD_INT 108
37000: PUSH
37001: LD_INT 109
37003: PUSH
37004: LD_INT 110
37006: PUSH
37007: LD_INT 111
37009: PUSH
37010: LD_INT 112
37012: PUSH
37013: LD_INT 114
37015: PUSH
37016: LD_INT 116
37018: PUSH
37019: LD_INT 117
37021: PUSH
37022: LD_INT 118
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: ST_TO_ADDR
37047: GO 38942
37049: LD_INT 11
37051: DOUBLE
37052: EQUAL
37053: IFTRUE 37057
37055: GO 37261
37057: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
37058: LD_ADDR_VAR 0 2
37062: PUSH
37063: LD_INT 2
37065: PUSH
37066: LD_INT 3
37068: PUSH
37069: LD_INT 4
37071: PUSH
37072: LD_INT 5
37074: PUSH
37075: LD_INT 6
37077: PUSH
37078: LD_INT 7
37080: PUSH
37081: LD_INT 8
37083: PUSH
37084: LD_INT 9
37086: PUSH
37087: LD_INT 10
37089: PUSH
37090: LD_INT 11
37092: PUSH
37093: LD_INT 12
37095: PUSH
37096: LD_INT 13
37098: PUSH
37099: LD_INT 14
37101: PUSH
37102: LD_INT 15
37104: PUSH
37105: LD_INT 16
37107: PUSH
37108: LD_INT 17
37110: PUSH
37111: LD_INT 18
37113: PUSH
37114: LD_INT 19
37116: PUSH
37117: LD_INT 20
37119: PUSH
37120: LD_INT 21
37122: PUSH
37123: LD_INT 22
37125: PUSH
37126: LD_INT 23
37128: PUSH
37129: LD_INT 24
37131: PUSH
37132: LD_INT 25
37134: PUSH
37135: LD_INT 26
37137: PUSH
37138: LD_INT 28
37140: PUSH
37141: LD_INT 30
37143: PUSH
37144: LD_INT 31
37146: PUSH
37147: LD_INT 32
37149: PUSH
37150: LD_INT 34
37152: PUSH
37153: LD_INT 36
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 101
37191: PUSH
37192: LD_INT 102
37194: PUSH
37195: LD_INT 103
37197: PUSH
37198: LD_INT 104
37200: PUSH
37201: LD_INT 105
37203: PUSH
37204: LD_INT 106
37206: PUSH
37207: LD_INT 107
37209: PUSH
37210: LD_INT 108
37212: PUSH
37213: LD_INT 109
37215: PUSH
37216: LD_INT 110
37218: PUSH
37219: LD_INT 111
37221: PUSH
37222: LD_INT 112
37224: PUSH
37225: LD_INT 114
37227: PUSH
37228: LD_INT 116
37230: PUSH
37231: LD_INT 117
37233: PUSH
37234: LD_INT 118
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: ST_TO_ADDR
37259: GO 38942
37261: LD_INT 12
37263: DOUBLE
37264: EQUAL
37265: IFTRUE 37269
37267: GO 37489
37269: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
37270: LD_ADDR_VAR 0 2
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: LD_INT 2
37280: PUSH
37281: LD_INT 3
37283: PUSH
37284: LD_INT 4
37286: PUSH
37287: LD_INT 5
37289: PUSH
37290: LD_INT 6
37292: PUSH
37293: LD_INT 7
37295: PUSH
37296: LD_INT 8
37298: PUSH
37299: LD_INT 9
37301: PUSH
37302: LD_INT 10
37304: PUSH
37305: LD_INT 11
37307: PUSH
37308: LD_INT 12
37310: PUSH
37311: LD_INT 13
37313: PUSH
37314: LD_INT 14
37316: PUSH
37317: LD_INT 15
37319: PUSH
37320: LD_INT 16
37322: PUSH
37323: LD_INT 17
37325: PUSH
37326: LD_INT 18
37328: PUSH
37329: LD_INT 19
37331: PUSH
37332: LD_INT 20
37334: PUSH
37335: LD_INT 21
37337: PUSH
37338: LD_INT 22
37340: PUSH
37341: LD_INT 23
37343: PUSH
37344: LD_INT 24
37346: PUSH
37347: LD_INT 25
37349: PUSH
37350: LD_INT 26
37352: PUSH
37353: LD_INT 27
37355: PUSH
37356: LD_INT 28
37358: PUSH
37359: LD_INT 30
37361: PUSH
37362: LD_INT 31
37364: PUSH
37365: LD_INT 32
37367: PUSH
37368: LD_INT 33
37370: PUSH
37371: LD_INT 34
37373: PUSH
37374: LD_INT 36
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 101
37415: PUSH
37416: LD_INT 102
37418: PUSH
37419: LD_INT 103
37421: PUSH
37422: LD_INT 104
37424: PUSH
37425: LD_INT 105
37427: PUSH
37428: LD_INT 106
37430: PUSH
37431: LD_INT 107
37433: PUSH
37434: LD_INT 108
37436: PUSH
37437: LD_INT 109
37439: PUSH
37440: LD_INT 110
37442: PUSH
37443: LD_INT 111
37445: PUSH
37446: LD_INT 112
37448: PUSH
37449: LD_INT 113
37451: PUSH
37452: LD_INT 114
37454: PUSH
37455: LD_INT 116
37457: PUSH
37458: LD_INT 117
37460: PUSH
37461: LD_INT 118
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: ST_TO_ADDR
37487: GO 38942
37489: LD_INT 13
37491: DOUBLE
37492: EQUAL
37493: IFTRUE 37497
37495: GO 37705
37497: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
37498: LD_ADDR_VAR 0 2
37502: PUSH
37503: LD_INT 1
37505: PUSH
37506: LD_INT 2
37508: PUSH
37509: LD_INT 3
37511: PUSH
37512: LD_INT 4
37514: PUSH
37515: LD_INT 5
37517: PUSH
37518: LD_INT 8
37520: PUSH
37521: LD_INT 9
37523: PUSH
37524: LD_INT 10
37526: PUSH
37527: LD_INT 11
37529: PUSH
37530: LD_INT 12
37532: PUSH
37533: LD_INT 14
37535: PUSH
37536: LD_INT 15
37538: PUSH
37539: LD_INT 16
37541: PUSH
37542: LD_INT 17
37544: PUSH
37545: LD_INT 18
37547: PUSH
37548: LD_INT 19
37550: PUSH
37551: LD_INT 20
37553: PUSH
37554: LD_INT 21
37556: PUSH
37557: LD_INT 22
37559: PUSH
37560: LD_INT 23
37562: PUSH
37563: LD_INT 24
37565: PUSH
37566: LD_INT 25
37568: PUSH
37569: LD_INT 26
37571: PUSH
37572: LD_INT 27
37574: PUSH
37575: LD_INT 28
37577: PUSH
37578: LD_INT 30
37580: PUSH
37581: LD_INT 31
37583: PUSH
37584: LD_INT 32
37586: PUSH
37587: LD_INT 33
37589: PUSH
37590: LD_INT 34
37592: PUSH
37593: LD_INT 36
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 101
37631: PUSH
37632: LD_INT 102
37634: PUSH
37635: LD_INT 103
37637: PUSH
37638: LD_INT 104
37640: PUSH
37641: LD_INT 105
37643: PUSH
37644: LD_INT 106
37646: PUSH
37647: LD_INT 107
37649: PUSH
37650: LD_INT 108
37652: PUSH
37653: LD_INT 109
37655: PUSH
37656: LD_INT 110
37658: PUSH
37659: LD_INT 111
37661: PUSH
37662: LD_INT 112
37664: PUSH
37665: LD_INT 113
37667: PUSH
37668: LD_INT 114
37670: PUSH
37671: LD_INT 116
37673: PUSH
37674: LD_INT 117
37676: PUSH
37677: LD_INT 118
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: ST_TO_ADDR
37703: GO 38942
37705: LD_INT 14
37707: DOUBLE
37708: EQUAL
37709: IFTRUE 37713
37711: GO 37937
37713: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
37714: LD_ADDR_VAR 0 2
37718: PUSH
37719: LD_INT 1
37721: PUSH
37722: LD_INT 2
37724: PUSH
37725: LD_INT 3
37727: PUSH
37728: LD_INT 4
37730: PUSH
37731: LD_INT 5
37733: PUSH
37734: LD_INT 6
37736: PUSH
37737: LD_INT 7
37739: PUSH
37740: LD_INT 8
37742: PUSH
37743: LD_INT 9
37745: PUSH
37746: LD_INT 10
37748: PUSH
37749: LD_INT 11
37751: PUSH
37752: LD_INT 12
37754: PUSH
37755: LD_INT 13
37757: PUSH
37758: LD_INT 14
37760: PUSH
37761: LD_INT 15
37763: PUSH
37764: LD_INT 16
37766: PUSH
37767: LD_INT 17
37769: PUSH
37770: LD_INT 18
37772: PUSH
37773: LD_INT 19
37775: PUSH
37776: LD_INT 20
37778: PUSH
37779: LD_INT 21
37781: PUSH
37782: LD_INT 22
37784: PUSH
37785: LD_INT 23
37787: PUSH
37788: LD_INT 24
37790: PUSH
37791: LD_INT 25
37793: PUSH
37794: LD_INT 26
37796: PUSH
37797: LD_INT 27
37799: PUSH
37800: LD_INT 28
37802: PUSH
37803: LD_INT 29
37805: PUSH
37806: LD_INT 30
37808: PUSH
37809: LD_INT 31
37811: PUSH
37812: LD_INT 32
37814: PUSH
37815: LD_INT 33
37817: PUSH
37818: LD_INT 34
37820: PUSH
37821: LD_INT 36
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 101
37863: PUSH
37864: LD_INT 102
37866: PUSH
37867: LD_INT 103
37869: PUSH
37870: LD_INT 104
37872: PUSH
37873: LD_INT 105
37875: PUSH
37876: LD_INT 106
37878: PUSH
37879: LD_INT 107
37881: PUSH
37882: LD_INT 108
37884: PUSH
37885: LD_INT 109
37887: PUSH
37888: LD_INT 110
37890: PUSH
37891: LD_INT 111
37893: PUSH
37894: LD_INT 112
37896: PUSH
37897: LD_INT 113
37899: PUSH
37900: LD_INT 114
37902: PUSH
37903: LD_INT 116
37905: PUSH
37906: LD_INT 117
37908: PUSH
37909: LD_INT 118
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: ST_TO_ADDR
37935: GO 38942
37937: LD_INT 15
37939: DOUBLE
37940: EQUAL
37941: IFTRUE 37945
37943: GO 38169
37945: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
37946: LD_ADDR_VAR 0 2
37950: PUSH
37951: LD_INT 1
37953: PUSH
37954: LD_INT 2
37956: PUSH
37957: LD_INT 3
37959: PUSH
37960: LD_INT 4
37962: PUSH
37963: LD_INT 5
37965: PUSH
37966: LD_INT 6
37968: PUSH
37969: LD_INT 7
37971: PUSH
37972: LD_INT 8
37974: PUSH
37975: LD_INT 9
37977: PUSH
37978: LD_INT 10
37980: PUSH
37981: LD_INT 11
37983: PUSH
37984: LD_INT 12
37986: PUSH
37987: LD_INT 13
37989: PUSH
37990: LD_INT 14
37992: PUSH
37993: LD_INT 15
37995: PUSH
37996: LD_INT 16
37998: PUSH
37999: LD_INT 17
38001: PUSH
38002: LD_INT 18
38004: PUSH
38005: LD_INT 19
38007: PUSH
38008: LD_INT 20
38010: PUSH
38011: LD_INT 21
38013: PUSH
38014: LD_INT 22
38016: PUSH
38017: LD_INT 23
38019: PUSH
38020: LD_INT 24
38022: PUSH
38023: LD_INT 25
38025: PUSH
38026: LD_INT 26
38028: PUSH
38029: LD_INT 27
38031: PUSH
38032: LD_INT 28
38034: PUSH
38035: LD_INT 29
38037: PUSH
38038: LD_INT 30
38040: PUSH
38041: LD_INT 31
38043: PUSH
38044: LD_INT 32
38046: PUSH
38047: LD_INT 33
38049: PUSH
38050: LD_INT 34
38052: PUSH
38053: LD_INT 36
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 101
38095: PUSH
38096: LD_INT 102
38098: PUSH
38099: LD_INT 103
38101: PUSH
38102: LD_INT 104
38104: PUSH
38105: LD_INT 105
38107: PUSH
38108: LD_INT 106
38110: PUSH
38111: LD_INT 107
38113: PUSH
38114: LD_INT 108
38116: PUSH
38117: LD_INT 109
38119: PUSH
38120: LD_INT 110
38122: PUSH
38123: LD_INT 111
38125: PUSH
38126: LD_INT 112
38128: PUSH
38129: LD_INT 113
38131: PUSH
38132: LD_INT 114
38134: PUSH
38135: LD_INT 116
38137: PUSH
38138: LD_INT 117
38140: PUSH
38141: LD_INT 118
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: ST_TO_ADDR
38167: GO 38942
38169: LD_INT 16
38171: DOUBLE
38172: EQUAL
38173: IFTRUE 38177
38175: GO 38313
38177: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
38178: LD_ADDR_VAR 0 2
38182: PUSH
38183: LD_INT 2
38185: PUSH
38186: LD_INT 4
38188: PUSH
38189: LD_INT 5
38191: PUSH
38192: LD_INT 7
38194: PUSH
38195: LD_INT 11
38197: PUSH
38198: LD_INT 12
38200: PUSH
38201: LD_INT 15
38203: PUSH
38204: LD_INT 16
38206: PUSH
38207: LD_INT 20
38209: PUSH
38210: LD_INT 21
38212: PUSH
38213: LD_INT 22
38215: PUSH
38216: LD_INT 23
38218: PUSH
38219: LD_INT 25
38221: PUSH
38222: LD_INT 26
38224: PUSH
38225: LD_INT 30
38227: PUSH
38228: LD_INT 31
38230: PUSH
38231: LD_INT 32
38233: PUSH
38234: LD_INT 33
38236: PUSH
38237: LD_INT 34
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 101
38263: PUSH
38264: LD_INT 102
38266: PUSH
38267: LD_INT 103
38269: PUSH
38270: LD_INT 106
38272: PUSH
38273: LD_INT 108
38275: PUSH
38276: LD_INT 112
38278: PUSH
38279: LD_INT 113
38281: PUSH
38282: LD_INT 114
38284: PUSH
38285: LD_INT 116
38287: PUSH
38288: LD_INT 117
38290: PUSH
38291: LD_INT 118
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: ST_TO_ADDR
38311: GO 38942
38313: LD_INT 17
38315: DOUBLE
38316: EQUAL
38317: IFTRUE 38321
38319: GO 38545
38321: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
38322: LD_ADDR_VAR 0 2
38326: PUSH
38327: LD_INT 1
38329: PUSH
38330: LD_INT 2
38332: PUSH
38333: LD_INT 3
38335: PUSH
38336: LD_INT 4
38338: PUSH
38339: LD_INT 5
38341: PUSH
38342: LD_INT 6
38344: PUSH
38345: LD_INT 7
38347: PUSH
38348: LD_INT 8
38350: PUSH
38351: LD_INT 9
38353: PUSH
38354: LD_INT 10
38356: PUSH
38357: LD_INT 11
38359: PUSH
38360: LD_INT 12
38362: PUSH
38363: LD_INT 13
38365: PUSH
38366: LD_INT 14
38368: PUSH
38369: LD_INT 15
38371: PUSH
38372: LD_INT 16
38374: PUSH
38375: LD_INT 17
38377: PUSH
38378: LD_INT 18
38380: PUSH
38381: LD_INT 19
38383: PUSH
38384: LD_INT 20
38386: PUSH
38387: LD_INT 21
38389: PUSH
38390: LD_INT 22
38392: PUSH
38393: LD_INT 23
38395: PUSH
38396: LD_INT 24
38398: PUSH
38399: LD_INT 25
38401: PUSH
38402: LD_INT 26
38404: PUSH
38405: LD_INT 27
38407: PUSH
38408: LD_INT 28
38410: PUSH
38411: LD_INT 29
38413: PUSH
38414: LD_INT 30
38416: PUSH
38417: LD_INT 31
38419: PUSH
38420: LD_INT 32
38422: PUSH
38423: LD_INT 33
38425: PUSH
38426: LD_INT 34
38428: PUSH
38429: LD_INT 36
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 101
38471: PUSH
38472: LD_INT 102
38474: PUSH
38475: LD_INT 103
38477: PUSH
38478: LD_INT 104
38480: PUSH
38481: LD_INT 105
38483: PUSH
38484: LD_INT 106
38486: PUSH
38487: LD_INT 107
38489: PUSH
38490: LD_INT 108
38492: PUSH
38493: LD_INT 109
38495: PUSH
38496: LD_INT 110
38498: PUSH
38499: LD_INT 111
38501: PUSH
38502: LD_INT 112
38504: PUSH
38505: LD_INT 113
38507: PUSH
38508: LD_INT 114
38510: PUSH
38511: LD_INT 116
38513: PUSH
38514: LD_INT 117
38516: PUSH
38517: LD_INT 118
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: ST_TO_ADDR
38543: GO 38942
38545: LD_INT 18
38547: DOUBLE
38548: EQUAL
38549: IFTRUE 38553
38551: GO 38701
38553: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
38554: LD_ADDR_VAR 0 2
38558: PUSH
38559: LD_INT 2
38561: PUSH
38562: LD_INT 4
38564: PUSH
38565: LD_INT 5
38567: PUSH
38568: LD_INT 7
38570: PUSH
38571: LD_INT 11
38573: PUSH
38574: LD_INT 12
38576: PUSH
38577: LD_INT 15
38579: PUSH
38580: LD_INT 16
38582: PUSH
38583: LD_INT 20
38585: PUSH
38586: LD_INT 21
38588: PUSH
38589: LD_INT 22
38591: PUSH
38592: LD_INT 23
38594: PUSH
38595: LD_INT 25
38597: PUSH
38598: LD_INT 26
38600: PUSH
38601: LD_INT 30
38603: PUSH
38604: LD_INT 31
38606: PUSH
38607: LD_INT 32
38609: PUSH
38610: LD_INT 33
38612: PUSH
38613: LD_INT 34
38615: PUSH
38616: LD_INT 35
38618: PUSH
38619: LD_INT 36
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 101
38647: PUSH
38648: LD_INT 102
38650: PUSH
38651: LD_INT 103
38653: PUSH
38654: LD_INT 106
38656: PUSH
38657: LD_INT 108
38659: PUSH
38660: LD_INT 112
38662: PUSH
38663: LD_INT 113
38665: PUSH
38666: LD_INT 114
38668: PUSH
38669: LD_INT 115
38671: PUSH
38672: LD_INT 116
38674: PUSH
38675: LD_INT 117
38677: PUSH
38678: LD_INT 118
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: ST_TO_ADDR
38699: GO 38942
38701: LD_INT 19
38703: DOUBLE
38704: EQUAL
38705: IFTRUE 38709
38707: GO 38941
38709: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
38710: LD_ADDR_VAR 0 2
38714: PUSH
38715: LD_INT 1
38717: PUSH
38718: LD_INT 2
38720: PUSH
38721: LD_INT 3
38723: PUSH
38724: LD_INT 4
38726: PUSH
38727: LD_INT 5
38729: PUSH
38730: LD_INT 6
38732: PUSH
38733: LD_INT 7
38735: PUSH
38736: LD_INT 8
38738: PUSH
38739: LD_INT 9
38741: PUSH
38742: LD_INT 10
38744: PUSH
38745: LD_INT 11
38747: PUSH
38748: LD_INT 12
38750: PUSH
38751: LD_INT 13
38753: PUSH
38754: LD_INT 14
38756: PUSH
38757: LD_INT 15
38759: PUSH
38760: LD_INT 16
38762: PUSH
38763: LD_INT 17
38765: PUSH
38766: LD_INT 18
38768: PUSH
38769: LD_INT 19
38771: PUSH
38772: LD_INT 20
38774: PUSH
38775: LD_INT 21
38777: PUSH
38778: LD_INT 22
38780: PUSH
38781: LD_INT 23
38783: PUSH
38784: LD_INT 24
38786: PUSH
38787: LD_INT 25
38789: PUSH
38790: LD_INT 26
38792: PUSH
38793: LD_INT 27
38795: PUSH
38796: LD_INT 28
38798: PUSH
38799: LD_INT 29
38801: PUSH
38802: LD_INT 30
38804: PUSH
38805: LD_INT 31
38807: PUSH
38808: LD_INT 32
38810: PUSH
38811: LD_INT 33
38813: PUSH
38814: LD_INT 34
38816: PUSH
38817: LD_INT 35
38819: PUSH
38820: LD_INT 36
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 101
38863: PUSH
38864: LD_INT 102
38866: PUSH
38867: LD_INT 103
38869: PUSH
38870: LD_INT 104
38872: PUSH
38873: LD_INT 105
38875: PUSH
38876: LD_INT 106
38878: PUSH
38879: LD_INT 107
38881: PUSH
38882: LD_INT 108
38884: PUSH
38885: LD_INT 109
38887: PUSH
38888: LD_INT 110
38890: PUSH
38891: LD_INT 111
38893: PUSH
38894: LD_INT 112
38896: PUSH
38897: LD_INT 113
38899: PUSH
38900: LD_INT 114
38902: PUSH
38903: LD_INT 115
38905: PUSH
38906: LD_INT 116
38908: PUSH
38909: LD_INT 117
38911: PUSH
38912: LD_INT 118
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: ST_TO_ADDR
38939: GO 38942
38941: POP
// end else
38942: GO 39173
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
38944: LD_ADDR_VAR 0 2
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: LD_INT 2
38954: PUSH
38955: LD_INT 3
38957: PUSH
38958: LD_INT 4
38960: PUSH
38961: LD_INT 5
38963: PUSH
38964: LD_INT 6
38966: PUSH
38967: LD_INT 7
38969: PUSH
38970: LD_INT 8
38972: PUSH
38973: LD_INT 9
38975: PUSH
38976: LD_INT 10
38978: PUSH
38979: LD_INT 11
38981: PUSH
38982: LD_INT 12
38984: PUSH
38985: LD_INT 13
38987: PUSH
38988: LD_INT 14
38990: PUSH
38991: LD_INT 15
38993: PUSH
38994: LD_INT 16
38996: PUSH
38997: LD_INT 17
38999: PUSH
39000: LD_INT 18
39002: PUSH
39003: LD_INT 19
39005: PUSH
39006: LD_INT 20
39008: PUSH
39009: LD_INT 21
39011: PUSH
39012: LD_INT 22
39014: PUSH
39015: LD_INT 23
39017: PUSH
39018: LD_INT 24
39020: PUSH
39021: LD_INT 25
39023: PUSH
39024: LD_INT 26
39026: PUSH
39027: LD_INT 27
39029: PUSH
39030: LD_INT 28
39032: PUSH
39033: LD_INT 29
39035: PUSH
39036: LD_INT 30
39038: PUSH
39039: LD_INT 31
39041: PUSH
39042: LD_INT 32
39044: PUSH
39045: LD_INT 33
39047: PUSH
39048: LD_INT 34
39050: PUSH
39051: LD_INT 35
39053: PUSH
39054: LD_INT 36
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 101
39097: PUSH
39098: LD_INT 102
39100: PUSH
39101: LD_INT 103
39103: PUSH
39104: LD_INT 104
39106: PUSH
39107: LD_INT 105
39109: PUSH
39110: LD_INT 106
39112: PUSH
39113: LD_INT 107
39115: PUSH
39116: LD_INT 108
39118: PUSH
39119: LD_INT 109
39121: PUSH
39122: LD_INT 110
39124: PUSH
39125: LD_INT 111
39127: PUSH
39128: LD_INT 112
39130: PUSH
39131: LD_INT 113
39133: PUSH
39134: LD_INT 114
39136: PUSH
39137: LD_INT 115
39139: PUSH
39140: LD_INT 116
39142: PUSH
39143: LD_INT 117
39145: PUSH
39146: LD_INT 118
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: ST_TO_ADDR
// if result then
39173: LD_VAR 0 2
39177: IFFALSE 39963
// begin normal :=  ;
39179: LD_ADDR_VAR 0 5
39183: PUSH
39184: LD_STRING 
39186: ST_TO_ADDR
// hardcore :=  ;
39187: LD_ADDR_VAR 0 6
39191: PUSH
39192: LD_STRING 
39194: ST_TO_ADDR
// active :=  ;
39195: LD_ADDR_VAR 0 7
39199: PUSH
39200: LD_STRING 
39202: ST_TO_ADDR
// for i = 1 to normalCounter do
39203: LD_ADDR_VAR 0 8
39207: PUSH
39208: DOUBLE
39209: LD_INT 1
39211: DEC
39212: ST_TO_ADDR
39213: LD_EXP 88
39217: PUSH
39218: FOR_TO
39219: IFFALSE 39320
// begin tmp := 0 ;
39221: LD_ADDR_VAR 0 3
39225: PUSH
39226: LD_STRING 0
39228: ST_TO_ADDR
// if result [ 1 ] then
39229: LD_VAR 0 2
39233: PUSH
39234: LD_INT 1
39236: ARRAY
39237: IFFALSE 39302
// if result [ 1 ] [ 1 ] = i then
39239: LD_VAR 0 2
39243: PUSH
39244: LD_INT 1
39246: ARRAY
39247: PUSH
39248: LD_INT 1
39250: ARRAY
39251: PUSH
39252: LD_VAR 0 8
39256: EQUAL
39257: IFFALSE 39302
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
39259: LD_ADDR_VAR 0 2
39263: PUSH
39264: LD_VAR 0 2
39268: PPUSH
39269: LD_INT 1
39271: PPUSH
39272: LD_VAR 0 2
39276: PUSH
39277: LD_INT 1
39279: ARRAY
39280: PPUSH
39281: LD_INT 1
39283: PPUSH
39284: CALL_OW 3
39288: PPUSH
39289: CALL_OW 1
39293: ST_TO_ADDR
// tmp := 1 ;
39294: LD_ADDR_VAR 0 3
39298: PUSH
39299: LD_STRING 1
39301: ST_TO_ADDR
// end ; normal := normal & tmp ;
39302: LD_ADDR_VAR 0 5
39306: PUSH
39307: LD_VAR 0 5
39311: PUSH
39312: LD_VAR 0 3
39316: STR
39317: ST_TO_ADDR
// end ;
39318: GO 39218
39320: POP
39321: POP
// for i = 1 to hardcoreCounter do
39322: LD_ADDR_VAR 0 8
39326: PUSH
39327: DOUBLE
39328: LD_INT 1
39330: DEC
39331: ST_TO_ADDR
39332: LD_EXP 89
39336: PUSH
39337: FOR_TO
39338: IFFALSE 39443
// begin tmp := 0 ;
39340: LD_ADDR_VAR 0 3
39344: PUSH
39345: LD_STRING 0
39347: ST_TO_ADDR
// if result [ 2 ] then
39348: LD_VAR 0 2
39352: PUSH
39353: LD_INT 2
39355: ARRAY
39356: IFFALSE 39425
// if result [ 2 ] [ 1 ] = 100 + i then
39358: LD_VAR 0 2
39362: PUSH
39363: LD_INT 2
39365: ARRAY
39366: PUSH
39367: LD_INT 1
39369: ARRAY
39370: PUSH
39371: LD_INT 100
39373: PUSH
39374: LD_VAR 0 8
39378: PLUS
39379: EQUAL
39380: IFFALSE 39425
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
39382: LD_ADDR_VAR 0 2
39386: PUSH
39387: LD_VAR 0 2
39391: PPUSH
39392: LD_INT 2
39394: PPUSH
39395: LD_VAR 0 2
39399: PUSH
39400: LD_INT 2
39402: ARRAY
39403: PPUSH
39404: LD_INT 1
39406: PPUSH
39407: CALL_OW 3
39411: PPUSH
39412: CALL_OW 1
39416: ST_TO_ADDR
// tmp := 1 ;
39417: LD_ADDR_VAR 0 3
39421: PUSH
39422: LD_STRING 1
39424: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
39425: LD_ADDR_VAR 0 6
39429: PUSH
39430: LD_VAR 0 6
39434: PUSH
39435: LD_VAR 0 3
39439: STR
39440: ST_TO_ADDR
// end ;
39441: GO 39337
39443: POP
39444: POP
// if isGameLoad then
39445: LD_VAR 0 1
39449: IFFALSE 39924
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
39451: LD_ADDR_VAR 0 4
39455: PUSH
39456: LD_EXP 92
39460: PUSH
39461: LD_EXP 91
39465: PUSH
39466: LD_EXP 93
39470: PUSH
39471: LD_EXP 90
39475: PUSH
39476: LD_EXP 94
39480: PUSH
39481: LD_EXP 95
39485: PUSH
39486: LD_EXP 96
39490: PUSH
39491: LD_EXP 97
39495: PUSH
39496: LD_EXP 98
39500: PUSH
39501: LD_EXP 99
39505: PUSH
39506: LD_EXP 100
39510: PUSH
39511: LD_EXP 101
39515: PUSH
39516: LD_EXP 102
39520: PUSH
39521: LD_EXP 103
39525: PUSH
39526: LD_EXP 111
39530: PUSH
39531: LD_EXP 112
39535: PUSH
39536: LD_EXP 113
39540: PUSH
39541: LD_EXP 114
39545: PUSH
39546: LD_EXP 116
39550: PUSH
39551: LD_EXP 117
39555: PUSH
39556: LD_EXP 118
39560: PUSH
39561: LD_EXP 121
39565: PUSH
39566: LD_EXP 123
39570: PUSH
39571: LD_EXP 124
39575: PUSH
39576: LD_EXP 125
39580: PUSH
39581: LD_EXP 127
39585: PUSH
39586: LD_EXP 128
39590: PUSH
39591: LD_EXP 131
39595: PUSH
39596: LD_EXP 132
39600: PUSH
39601: LD_EXP 133
39605: PUSH
39606: LD_EXP 134
39610: PUSH
39611: LD_EXP 135
39615: PUSH
39616: LD_EXP 136
39620: PUSH
39621: LD_EXP 137
39625: PUSH
39626: LD_EXP 138
39630: PUSH
39631: LD_EXP 139
39635: PUSH
39636: LD_EXP 104
39640: PUSH
39641: LD_EXP 105
39645: PUSH
39646: LD_EXP 108
39650: PUSH
39651: LD_EXP 109
39655: PUSH
39656: LD_EXP 110
39660: PUSH
39661: LD_EXP 106
39665: PUSH
39666: LD_EXP 107
39670: PUSH
39671: LD_EXP 115
39675: PUSH
39676: LD_EXP 119
39680: PUSH
39681: LD_EXP 120
39685: PUSH
39686: LD_EXP 122
39690: PUSH
39691: LD_EXP 126
39695: PUSH
39696: LD_EXP 129
39700: PUSH
39701: LD_EXP 130
39705: PUSH
39706: LD_EXP 140
39710: PUSH
39711: LD_EXP 141
39715: PUSH
39716: LD_EXP 142
39720: PUSH
39721: LD_EXP 143
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: ST_TO_ADDR
// tmp :=  ;
39782: LD_ADDR_VAR 0 3
39786: PUSH
39787: LD_STRING 
39789: ST_TO_ADDR
// for i = 1 to normalCounter do
39790: LD_ADDR_VAR 0 8
39794: PUSH
39795: DOUBLE
39796: LD_INT 1
39798: DEC
39799: ST_TO_ADDR
39800: LD_EXP 88
39804: PUSH
39805: FOR_TO
39806: IFFALSE 39842
// begin if flags [ i ] then
39808: LD_VAR 0 4
39812: PUSH
39813: LD_VAR 0 8
39817: ARRAY
39818: IFFALSE 39840
// tmp := tmp & i & ; ;
39820: LD_ADDR_VAR 0 3
39824: PUSH
39825: LD_VAR 0 3
39829: PUSH
39830: LD_VAR 0 8
39834: STR
39835: PUSH
39836: LD_STRING ;
39838: STR
39839: ST_TO_ADDR
// end ;
39840: GO 39805
39842: POP
39843: POP
// for i = 1 to hardcoreCounter do
39844: LD_ADDR_VAR 0 8
39848: PUSH
39849: DOUBLE
39850: LD_INT 1
39852: DEC
39853: ST_TO_ADDR
39854: LD_EXP 89
39858: PUSH
39859: FOR_TO
39860: IFFALSE 39906
// begin if flags [ normalCounter + i ] then
39862: LD_VAR 0 4
39866: PUSH
39867: LD_EXP 88
39871: PUSH
39872: LD_VAR 0 8
39876: PLUS
39877: ARRAY
39878: IFFALSE 39904
// tmp := tmp & ( 100 + i ) & ; ;
39880: LD_ADDR_VAR 0 3
39884: PUSH
39885: LD_VAR 0 3
39889: PUSH
39890: LD_INT 100
39892: PUSH
39893: LD_VAR 0 8
39897: PLUS
39898: STR
39899: PUSH
39900: LD_STRING ;
39902: STR
39903: ST_TO_ADDR
// end ;
39904: GO 39859
39906: POP
39907: POP
// if tmp then
39908: LD_VAR 0 3
39912: IFFALSE 39924
// active := tmp ;
39914: LD_ADDR_VAR 0 7
39918: PUSH
39919: LD_VAR 0 3
39923: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
39924: LD_STRING getStreamItemsFromMission("
39926: PUSH
39927: LD_VAR 0 5
39931: STR
39932: PUSH
39933: LD_STRING ","
39935: STR
39936: PUSH
39937: LD_VAR 0 6
39941: STR
39942: PUSH
39943: LD_STRING ","
39945: STR
39946: PUSH
39947: LD_VAR 0 7
39951: STR
39952: PUSH
39953: LD_STRING ")
39955: STR
39956: PPUSH
39957: CALL_OW 559
// end else
39961: GO 39970
// ToLua ( getStreamItemsFromMission("","","") ) ;
39963: LD_STRING getStreamItemsFromMission("","","")
39965: PPUSH
39966: CALL_OW 559
// end ;
39970: LD_VAR 0 2
39974: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
39975: LD_EXP 87
39979: PUSH
39980: LD_EXP 92
39984: AND
39985: IFFALSE 40109
39987: GO 39989
39989: DISABLE
39990: LD_INT 0
39992: PPUSH
39993: PPUSH
// begin enable ;
39994: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
39995: LD_ADDR_VAR 0 2
39999: PUSH
40000: LD_INT 22
40002: PUSH
40003: LD_OWVAR 2
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 2
40014: PUSH
40015: LD_INT 34
40017: PUSH
40018: LD_INT 7
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 34
40027: PUSH
40028: LD_INT 45
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 34
40037: PUSH
40038: LD_INT 28
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 34
40047: PUSH
40048: LD_INT 47
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PPUSH
40066: CALL_OW 69
40070: ST_TO_ADDR
// if not tmp then
40071: LD_VAR 0 2
40075: NOT
40076: IFFALSE 40080
// exit ;
40078: GO 40109
// for i in tmp do
40080: LD_ADDR_VAR 0 1
40084: PUSH
40085: LD_VAR 0 2
40089: PUSH
40090: FOR_IN
40091: IFFALSE 40107
// begin SetLives ( i , 0 ) ;
40093: LD_VAR 0 1
40097: PPUSH
40098: LD_INT 0
40100: PPUSH
40101: CALL_OW 234
// end ;
40105: GO 40090
40107: POP
40108: POP
// end ;
40109: PPOPN 2
40111: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
40112: LD_EXP 87
40116: PUSH
40117: LD_EXP 93
40121: AND
40122: IFFALSE 40206
40124: GO 40126
40126: DISABLE
40127: LD_INT 0
40129: PPUSH
40130: PPUSH
// begin enable ;
40131: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
40132: LD_ADDR_VAR 0 2
40136: PUSH
40137: LD_INT 22
40139: PUSH
40140: LD_OWVAR 2
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 32
40151: PUSH
40152: LD_INT 3
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PPUSH
40163: CALL_OW 69
40167: ST_TO_ADDR
// if not tmp then
40168: LD_VAR 0 2
40172: NOT
40173: IFFALSE 40177
// exit ;
40175: GO 40206
// for i in tmp do
40177: LD_ADDR_VAR 0 1
40181: PUSH
40182: LD_VAR 0 2
40186: PUSH
40187: FOR_IN
40188: IFFALSE 40204
// begin SetLives ( i , 0 ) ;
40190: LD_VAR 0 1
40194: PPUSH
40195: LD_INT 0
40197: PPUSH
40198: CALL_OW 234
// end ;
40202: GO 40187
40204: POP
40205: POP
// end ;
40206: PPOPN 2
40208: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
40209: LD_EXP 87
40213: PUSH
40214: LD_EXP 90
40218: AND
40219: IFFALSE 40312
40221: GO 40223
40223: DISABLE
40224: LD_INT 0
40226: PPUSH
// begin enable ;
40227: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
40228: LD_ADDR_VAR 0 1
40232: PUSH
40233: LD_INT 22
40235: PUSH
40236: LD_OWVAR 2
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 2
40247: PUSH
40248: LD_INT 25
40250: PUSH
40251: LD_INT 5
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 25
40260: PUSH
40261: LD_INT 9
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 25
40270: PUSH
40271: LD_INT 8
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PPUSH
40288: CALL_OW 69
40292: PUSH
40293: FOR_IN
40294: IFFALSE 40310
// begin SetClass ( i , 1 ) ;
40296: LD_VAR 0 1
40300: PPUSH
40301: LD_INT 1
40303: PPUSH
40304: CALL_OW 336
// end ;
40308: GO 40293
40310: POP
40311: POP
// end ;
40312: PPOPN 1
40314: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
40315: LD_EXP 87
40319: PUSH
40320: LD_EXP 91
40324: AND
40325: PUSH
40326: LD_OWVAR 65
40330: PUSH
40331: LD_INT 7
40333: LESS
40334: AND
40335: IFFALSE 40349
40337: GO 40339
40339: DISABLE
// begin enable ;
40340: ENABLE
// game_speed := 7 ;
40341: LD_ADDR_OWVAR 65
40345: PUSH
40346: LD_INT 7
40348: ST_TO_ADDR
// end ;
40349: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
40350: LD_EXP 87
40354: PUSH
40355: LD_EXP 94
40359: AND
40360: IFFALSE 40562
40362: GO 40364
40364: DISABLE
40365: LD_INT 0
40367: PPUSH
40368: PPUSH
40369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
40370: LD_ADDR_VAR 0 3
40374: PUSH
40375: LD_INT 81
40377: PUSH
40378: LD_OWVAR 2
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 21
40389: PUSH
40390: LD_INT 1
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PPUSH
40401: CALL_OW 69
40405: ST_TO_ADDR
// if not tmp then
40406: LD_VAR 0 3
40410: NOT
40411: IFFALSE 40415
// exit ;
40413: GO 40562
// if tmp > 5 then
40415: LD_VAR 0 3
40419: PUSH
40420: LD_INT 5
40422: GREATER
40423: IFFALSE 40435
// k := 5 else
40425: LD_ADDR_VAR 0 2
40429: PUSH
40430: LD_INT 5
40432: ST_TO_ADDR
40433: GO 40445
// k := tmp ;
40435: LD_ADDR_VAR 0 2
40439: PUSH
40440: LD_VAR 0 3
40444: ST_TO_ADDR
// for i := 1 to k do
40445: LD_ADDR_VAR 0 1
40449: PUSH
40450: DOUBLE
40451: LD_INT 1
40453: DEC
40454: ST_TO_ADDR
40455: LD_VAR 0 2
40459: PUSH
40460: FOR_TO
40461: IFFALSE 40560
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
40463: LD_VAR 0 3
40467: PUSH
40468: LD_VAR 0 1
40472: ARRAY
40473: PPUSH
40474: LD_VAR 0 1
40478: PUSH
40479: LD_INT 4
40481: MOD
40482: PUSH
40483: LD_INT 1
40485: PLUS
40486: PPUSH
40487: CALL_OW 259
40491: PUSH
40492: LD_INT 10
40494: LESS
40495: IFFALSE 40558
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
40497: LD_VAR 0 3
40501: PUSH
40502: LD_VAR 0 1
40506: ARRAY
40507: PPUSH
40508: LD_VAR 0 1
40512: PUSH
40513: LD_INT 4
40515: MOD
40516: PUSH
40517: LD_INT 1
40519: PLUS
40520: PPUSH
40521: LD_VAR 0 3
40525: PUSH
40526: LD_VAR 0 1
40530: ARRAY
40531: PPUSH
40532: LD_VAR 0 1
40536: PUSH
40537: LD_INT 4
40539: MOD
40540: PUSH
40541: LD_INT 1
40543: PLUS
40544: PPUSH
40545: CALL_OW 259
40549: PUSH
40550: LD_INT 1
40552: PLUS
40553: PPUSH
40554: CALL_OW 237
40558: GO 40460
40560: POP
40561: POP
// end ;
40562: PPOPN 3
40564: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
40565: LD_EXP 87
40569: PUSH
40570: LD_EXP 95
40574: AND
40575: IFFALSE 40595
40577: GO 40579
40579: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
40580: LD_INT 4
40582: PPUSH
40583: LD_OWVAR 2
40587: PPUSH
40588: LD_INT 0
40590: PPUSH
40591: CALL_OW 324
40595: END
// every 0 0$1 trigger StreamModeActive and sShovel do
40596: LD_EXP 87
40600: PUSH
40601: LD_EXP 124
40605: AND
40606: IFFALSE 40626
40608: GO 40610
40610: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
40611: LD_INT 19
40613: PPUSH
40614: LD_OWVAR 2
40618: PPUSH
40619: LD_INT 0
40621: PPUSH
40622: CALL_OW 324
40626: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
40627: LD_EXP 87
40631: PUSH
40632: LD_EXP 96
40636: AND
40637: IFFALSE 40739
40639: GO 40641
40641: DISABLE
40642: LD_INT 0
40644: PPUSH
40645: PPUSH
// begin enable ;
40646: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
40647: LD_ADDR_VAR 0 2
40651: PUSH
40652: LD_INT 22
40654: PUSH
40655: LD_OWVAR 2
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 2
40666: PUSH
40667: LD_INT 34
40669: PUSH
40670: LD_INT 11
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 34
40679: PUSH
40680: LD_INT 30
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: LIST
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PPUSH
40696: CALL_OW 69
40700: ST_TO_ADDR
// if not tmp then
40701: LD_VAR 0 2
40705: NOT
40706: IFFALSE 40710
// exit ;
40708: GO 40739
// for i in tmp do
40710: LD_ADDR_VAR 0 1
40714: PUSH
40715: LD_VAR 0 2
40719: PUSH
40720: FOR_IN
40721: IFFALSE 40737
// begin SetLives ( i , 0 ) ;
40723: LD_VAR 0 1
40727: PPUSH
40728: LD_INT 0
40730: PPUSH
40731: CALL_OW 234
// end ;
40735: GO 40720
40737: POP
40738: POP
// end ;
40739: PPOPN 2
40741: END
// every 0 0$1 trigger StreamModeActive and sBunker do
40742: LD_EXP 87
40746: PUSH
40747: LD_EXP 97
40751: AND
40752: IFFALSE 40772
40754: GO 40756
40756: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
40757: LD_INT 32
40759: PPUSH
40760: LD_OWVAR 2
40764: PPUSH
40765: LD_INT 0
40767: PPUSH
40768: CALL_OW 324
40772: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
40773: LD_EXP 87
40777: PUSH
40778: LD_EXP 98
40782: AND
40783: IFFALSE 40964
40785: GO 40787
40787: DISABLE
40788: LD_INT 0
40790: PPUSH
40791: PPUSH
40792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
40793: LD_ADDR_VAR 0 2
40797: PUSH
40798: LD_INT 22
40800: PUSH
40801: LD_OWVAR 2
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 33
40812: PUSH
40813: LD_INT 3
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PPUSH
40824: CALL_OW 69
40828: ST_TO_ADDR
// if not tmp then
40829: LD_VAR 0 2
40833: NOT
40834: IFFALSE 40838
// exit ;
40836: GO 40964
// side := 0 ;
40838: LD_ADDR_VAR 0 3
40842: PUSH
40843: LD_INT 0
40845: ST_TO_ADDR
// for i := 1 to 8 do
40846: LD_ADDR_VAR 0 1
40850: PUSH
40851: DOUBLE
40852: LD_INT 1
40854: DEC
40855: ST_TO_ADDR
40856: LD_INT 8
40858: PUSH
40859: FOR_TO
40860: IFFALSE 40908
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
40862: LD_OWVAR 2
40866: PUSH
40867: LD_VAR 0 1
40871: NONEQUAL
40872: PUSH
40873: LD_OWVAR 2
40877: PPUSH
40878: LD_VAR 0 1
40882: PPUSH
40883: CALL_OW 81
40887: PUSH
40888: LD_INT 2
40890: EQUAL
40891: AND
40892: IFFALSE 40906
// begin side := i ;
40894: LD_ADDR_VAR 0 3
40898: PUSH
40899: LD_VAR 0 1
40903: ST_TO_ADDR
// break ;
40904: GO 40908
// end ;
40906: GO 40859
40908: POP
40909: POP
// if not side then
40910: LD_VAR 0 3
40914: NOT
40915: IFFALSE 40919
// exit ;
40917: GO 40964
// for i := 1 to tmp do
40919: LD_ADDR_VAR 0 1
40923: PUSH
40924: DOUBLE
40925: LD_INT 1
40927: DEC
40928: ST_TO_ADDR
40929: LD_VAR 0 2
40933: PUSH
40934: FOR_TO
40935: IFFALSE 40962
// if Prob ( 60 ) then
40937: LD_INT 60
40939: PPUSH
40940: CALL_OW 13
40944: IFFALSE 40960
// SetSide ( i , side ) ;
40946: LD_VAR 0 1
40950: PPUSH
40951: LD_VAR 0 3
40955: PPUSH
40956: CALL_OW 235
40960: GO 40934
40962: POP
40963: POP
// end ;
40964: PPOPN 3
40966: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
40967: LD_EXP 87
40971: PUSH
40972: LD_EXP 100
40976: AND
40977: IFFALSE 41096
40979: GO 40981
40981: DISABLE
40982: LD_INT 0
40984: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
40985: LD_ADDR_VAR 0 1
40989: PUSH
40990: LD_INT 22
40992: PUSH
40993: LD_OWVAR 2
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 21
41004: PUSH
41005: LD_INT 1
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 3
41014: PUSH
41015: LD_INT 23
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: LIST
41033: PPUSH
41034: CALL_OW 69
41038: PUSH
41039: FOR_IN
41040: IFFALSE 41094
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
41042: LD_VAR 0 1
41046: PPUSH
41047: CALL_OW 257
41051: PUSH
41052: LD_INT 1
41054: PUSH
41055: LD_INT 2
41057: PUSH
41058: LD_INT 3
41060: PUSH
41061: LD_INT 4
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: IN
41070: IFFALSE 41092
// SetClass ( un , rand ( 1 , 4 ) ) ;
41072: LD_VAR 0 1
41076: PPUSH
41077: LD_INT 1
41079: PPUSH
41080: LD_INT 4
41082: PPUSH
41083: CALL_OW 12
41087: PPUSH
41088: CALL_OW 336
41092: GO 41039
41094: POP
41095: POP
// end ;
41096: PPOPN 1
41098: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
41099: LD_EXP 87
41103: PUSH
41104: LD_EXP 99
41108: AND
41109: IFFALSE 41188
41111: GO 41113
41113: DISABLE
41114: LD_INT 0
41116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41117: LD_ADDR_VAR 0 1
41121: PUSH
41122: LD_INT 22
41124: PUSH
41125: LD_OWVAR 2
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 21
41136: PUSH
41137: LD_INT 3
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PPUSH
41148: CALL_OW 69
41152: ST_TO_ADDR
// if not tmp then
41153: LD_VAR 0 1
41157: NOT
41158: IFFALSE 41162
// exit ;
41160: GO 41188
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
41162: LD_VAR 0 1
41166: PUSH
41167: LD_INT 1
41169: PPUSH
41170: LD_VAR 0 1
41174: PPUSH
41175: CALL_OW 12
41179: ARRAY
41180: PPUSH
41181: LD_INT 100
41183: PPUSH
41184: CALL_OW 234
// end ;
41188: PPOPN 1
41190: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
41191: LD_EXP 87
41195: PUSH
41196: LD_EXP 101
41200: AND
41201: IFFALSE 41299
41203: GO 41205
41205: DISABLE
41206: LD_INT 0
41208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
41209: LD_ADDR_VAR 0 1
41213: PUSH
41214: LD_INT 22
41216: PUSH
41217: LD_OWVAR 2
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 21
41228: PUSH
41229: LD_INT 1
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PPUSH
41240: CALL_OW 69
41244: ST_TO_ADDR
// if not tmp then
41245: LD_VAR 0 1
41249: NOT
41250: IFFALSE 41254
// exit ;
41252: GO 41299
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
41254: LD_VAR 0 1
41258: PUSH
41259: LD_INT 1
41261: PPUSH
41262: LD_VAR 0 1
41266: PPUSH
41267: CALL_OW 12
41271: ARRAY
41272: PPUSH
41273: LD_INT 1
41275: PPUSH
41276: LD_INT 4
41278: PPUSH
41279: CALL_OW 12
41283: PPUSH
41284: LD_INT 3000
41286: PPUSH
41287: LD_INT 9000
41289: PPUSH
41290: CALL_OW 12
41294: PPUSH
41295: CALL_OW 492
// end ;
41299: PPOPN 1
41301: END
// every 0 0$1 trigger StreamModeActive and sDepot do
41302: LD_EXP 87
41306: PUSH
41307: LD_EXP 102
41311: AND
41312: IFFALSE 41332
41314: GO 41316
41316: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
41317: LD_INT 1
41319: PPUSH
41320: LD_OWVAR 2
41324: PPUSH
41325: LD_INT 0
41327: PPUSH
41328: CALL_OW 324
41332: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
41333: LD_EXP 87
41337: PUSH
41338: LD_EXP 103
41342: AND
41343: IFFALSE 41426
41345: GO 41347
41347: DISABLE
41348: LD_INT 0
41350: PPUSH
41351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41352: LD_ADDR_VAR 0 2
41356: PUSH
41357: LD_INT 22
41359: PUSH
41360: LD_OWVAR 2
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 21
41371: PUSH
41372: LD_INT 3
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PPUSH
41383: CALL_OW 69
41387: ST_TO_ADDR
// if not tmp then
41388: LD_VAR 0 2
41392: NOT
41393: IFFALSE 41397
// exit ;
41395: GO 41426
// for i in tmp do
41397: LD_ADDR_VAR 0 1
41401: PUSH
41402: LD_VAR 0 2
41406: PUSH
41407: FOR_IN
41408: IFFALSE 41424
// SetBLevel ( i , 10 ) ;
41410: LD_VAR 0 1
41414: PPUSH
41415: LD_INT 10
41417: PPUSH
41418: CALL_OW 241
41422: GO 41407
41424: POP
41425: POP
// end ;
41426: PPOPN 2
41428: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
41429: LD_EXP 87
41433: PUSH
41434: LD_EXP 104
41438: AND
41439: IFFALSE 41550
41441: GO 41443
41443: DISABLE
41444: LD_INT 0
41446: PPUSH
41447: PPUSH
41448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41449: LD_ADDR_VAR 0 3
41453: PUSH
41454: LD_INT 22
41456: PUSH
41457: LD_OWVAR 2
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 25
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PPUSH
41480: CALL_OW 69
41484: ST_TO_ADDR
// if not tmp then
41485: LD_VAR 0 3
41489: NOT
41490: IFFALSE 41494
// exit ;
41492: GO 41550
// un := tmp [ rand ( 1 , tmp ) ] ;
41494: LD_ADDR_VAR 0 2
41498: PUSH
41499: LD_VAR 0 3
41503: PUSH
41504: LD_INT 1
41506: PPUSH
41507: LD_VAR 0 3
41511: PPUSH
41512: CALL_OW 12
41516: ARRAY
41517: ST_TO_ADDR
// if Crawls ( un ) then
41518: LD_VAR 0 2
41522: PPUSH
41523: CALL_OW 318
41527: IFFALSE 41538
// ComWalk ( un ) ;
41529: LD_VAR 0 2
41533: PPUSH
41534: CALL_OW 138
// SetClass ( un , class_sniper ) ;
41538: LD_VAR 0 2
41542: PPUSH
41543: LD_INT 5
41545: PPUSH
41546: CALL_OW 336
// end ;
41550: PPOPN 3
41552: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
41553: LD_EXP 87
41557: PUSH
41558: LD_EXP 105
41562: AND
41563: PUSH
41564: LD_OWVAR 67
41568: PUSH
41569: LD_INT 4
41571: LESS
41572: AND
41573: IFFALSE 41592
41575: GO 41577
41577: DISABLE
// begin Difficulty := Difficulty + 1 ;
41578: LD_ADDR_OWVAR 67
41582: PUSH
41583: LD_OWVAR 67
41587: PUSH
41588: LD_INT 1
41590: PLUS
41591: ST_TO_ADDR
// end ;
41592: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
41593: LD_EXP 87
41597: PUSH
41598: LD_EXP 106
41602: AND
41603: IFFALSE 41706
41605: GO 41607
41607: DISABLE
41608: LD_INT 0
41610: PPUSH
// begin for i := 1 to 5 do
41611: LD_ADDR_VAR 0 1
41615: PUSH
41616: DOUBLE
41617: LD_INT 1
41619: DEC
41620: ST_TO_ADDR
41621: LD_INT 5
41623: PUSH
41624: FOR_TO
41625: IFFALSE 41704
// begin uc_nation := nation_nature ;
41627: LD_ADDR_OWVAR 21
41631: PUSH
41632: LD_INT 0
41634: ST_TO_ADDR
// uc_side := 0 ;
41635: LD_ADDR_OWVAR 20
41639: PUSH
41640: LD_INT 0
41642: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
41643: LD_ADDR_OWVAR 29
41647: PUSH
41648: LD_INT 12
41650: PUSH
41651: LD_INT 12
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: ST_TO_ADDR
// hc_agressivity := 20 ;
41658: LD_ADDR_OWVAR 35
41662: PUSH
41663: LD_INT 20
41665: ST_TO_ADDR
// hc_class := class_tiger ;
41666: LD_ADDR_OWVAR 28
41670: PUSH
41671: LD_INT 14
41673: ST_TO_ADDR
// hc_gallery :=  ;
41674: LD_ADDR_OWVAR 33
41678: PUSH
41679: LD_STRING 
41681: ST_TO_ADDR
// hc_name :=  ;
41682: LD_ADDR_OWVAR 26
41686: PUSH
41687: LD_STRING 
41689: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
41690: CALL_OW 44
41694: PPUSH
41695: LD_INT 0
41697: PPUSH
41698: CALL_OW 51
// end ;
41702: GO 41624
41704: POP
41705: POP
// end ;
41706: PPOPN 1
41708: END
// every 0 0$1 trigger StreamModeActive and sBomb do
41709: LD_EXP 87
41713: PUSH
41714: LD_EXP 107
41718: AND
41719: IFFALSE 41728
41721: GO 41723
41723: DISABLE
// StreamSibBomb ;
41724: CALL 41729 0 0
41728: END
// export function StreamSibBomb ; var i , x , y ; begin
41729: LD_INT 0
41731: PPUSH
41732: PPUSH
41733: PPUSH
41734: PPUSH
// result := false ;
41735: LD_ADDR_VAR 0 1
41739: PUSH
41740: LD_INT 0
41742: ST_TO_ADDR
// for i := 1 to 16 do
41743: LD_ADDR_VAR 0 2
41747: PUSH
41748: DOUBLE
41749: LD_INT 1
41751: DEC
41752: ST_TO_ADDR
41753: LD_INT 16
41755: PUSH
41756: FOR_TO
41757: IFFALSE 41956
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
41759: LD_ADDR_VAR 0 3
41763: PUSH
41764: LD_INT 10
41766: PUSH
41767: LD_INT 20
41769: PUSH
41770: LD_INT 30
41772: PUSH
41773: LD_INT 40
41775: PUSH
41776: LD_INT 50
41778: PUSH
41779: LD_INT 60
41781: PUSH
41782: LD_INT 70
41784: PUSH
41785: LD_INT 80
41787: PUSH
41788: LD_INT 90
41790: PUSH
41791: LD_INT 100
41793: PUSH
41794: LD_INT 110
41796: PUSH
41797: LD_INT 120
41799: PUSH
41800: LD_INT 130
41802: PUSH
41803: LD_INT 140
41805: PUSH
41806: LD_INT 150
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: PPUSH
41829: LD_INT 15
41831: PPUSH
41832: CALL_OW 12
41836: ARRAY
41837: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
41838: LD_ADDR_VAR 0 4
41842: PUSH
41843: LD_INT 10
41845: PUSH
41846: LD_INT 20
41848: PUSH
41849: LD_INT 30
41851: PUSH
41852: LD_INT 40
41854: PUSH
41855: LD_INT 50
41857: PUSH
41858: LD_INT 60
41860: PUSH
41861: LD_INT 70
41863: PUSH
41864: LD_INT 80
41866: PUSH
41867: LD_INT 90
41869: PUSH
41870: LD_INT 100
41872: PUSH
41873: LD_INT 110
41875: PUSH
41876: LD_INT 120
41878: PUSH
41879: LD_INT 130
41881: PUSH
41882: LD_INT 140
41884: PUSH
41885: LD_INT 150
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 1
41907: PPUSH
41908: LD_INT 15
41910: PPUSH
41911: CALL_OW 12
41915: ARRAY
41916: ST_TO_ADDR
// if ValidHex ( x , y ) then
41917: LD_VAR 0 3
41921: PPUSH
41922: LD_VAR 0 4
41926: PPUSH
41927: CALL_OW 488
41931: IFFALSE 41954
// begin result := [ x , y ] ;
41933: LD_ADDR_VAR 0 1
41937: PUSH
41938: LD_VAR 0 3
41942: PUSH
41943: LD_VAR 0 4
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: ST_TO_ADDR
// break ;
41952: GO 41956
// end ; end ;
41954: GO 41756
41956: POP
41957: POP
// if result then
41958: LD_VAR 0 1
41962: IFFALSE 42022
// begin ToLua ( playSibBomb() ) ;
41964: LD_STRING playSibBomb()
41966: PPUSH
41967: CALL_OW 559
// wait ( 0 0$14 ) ;
41971: LD_INT 490
41973: PPUSH
41974: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
41978: LD_VAR 0 1
41982: PUSH
41983: LD_INT 1
41985: ARRAY
41986: PPUSH
41987: LD_VAR 0 1
41991: PUSH
41992: LD_INT 2
41994: ARRAY
41995: PPUSH
41996: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
42000: LD_VAR 0 1
42004: PUSH
42005: LD_INT 1
42007: ARRAY
42008: PPUSH
42009: LD_VAR 0 1
42013: PUSH
42014: LD_INT 2
42016: ARRAY
42017: PPUSH
42018: CALL_OW 429
// end ; end ;
42022: LD_VAR 0 1
42026: RET
// every 0 0$1 trigger StreamModeActive and sReset do
42027: LD_EXP 87
42031: PUSH
42032: LD_EXP 109
42036: AND
42037: IFFALSE 42049
42039: GO 42041
42041: DISABLE
// YouLost (  ) ;
42042: LD_STRING 
42044: PPUSH
42045: CALL_OW 104
42049: END
// every 0 0$1 trigger StreamModeActive and sFog do
42050: LD_EXP 87
42054: PUSH
42055: LD_EXP 108
42059: AND
42060: IFFALSE 42074
42062: GO 42064
42064: DISABLE
// FogOff ( your_side ) ;
42065: LD_OWVAR 2
42069: PPUSH
42070: CALL_OW 344
42074: END
// every 0 0$1 trigger StreamModeActive and sSun do
42075: LD_EXP 87
42079: PUSH
42080: LD_EXP 110
42084: AND
42085: IFFALSE 42113
42087: GO 42089
42089: DISABLE
// begin solar_recharge_percent := 0 ;
42090: LD_ADDR_OWVAR 79
42094: PUSH
42095: LD_INT 0
42097: ST_TO_ADDR
// wait ( 5 5$00 ) ;
42098: LD_INT 10500
42100: PPUSH
42101: CALL_OW 67
// solar_recharge_percent := 100 ;
42105: LD_ADDR_OWVAR 79
42109: PUSH
42110: LD_INT 100
42112: ST_TO_ADDR
// end ;
42113: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
42114: LD_EXP 87
42118: PUSH
42119: LD_EXP 111
42123: AND
42124: IFFALSE 42363
42126: GO 42128
42128: DISABLE
42129: LD_INT 0
42131: PPUSH
42132: PPUSH
42133: PPUSH
// begin tmp := [ ] ;
42134: LD_ADDR_VAR 0 3
42138: PUSH
42139: EMPTY
42140: ST_TO_ADDR
// for i := 1 to 6 do
42141: LD_ADDR_VAR 0 1
42145: PUSH
42146: DOUBLE
42147: LD_INT 1
42149: DEC
42150: ST_TO_ADDR
42151: LD_INT 6
42153: PUSH
42154: FOR_TO
42155: IFFALSE 42260
// begin uc_nation := nation_nature ;
42157: LD_ADDR_OWVAR 21
42161: PUSH
42162: LD_INT 0
42164: ST_TO_ADDR
// uc_side := 0 ;
42165: LD_ADDR_OWVAR 20
42169: PUSH
42170: LD_INT 0
42172: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
42173: LD_ADDR_OWVAR 29
42177: PUSH
42178: LD_INT 12
42180: PUSH
42181: LD_INT 12
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: ST_TO_ADDR
// hc_agressivity := 20 ;
42188: LD_ADDR_OWVAR 35
42192: PUSH
42193: LD_INT 20
42195: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
42196: LD_ADDR_OWVAR 28
42200: PUSH
42201: LD_INT 17
42203: ST_TO_ADDR
// hc_gallery :=  ;
42204: LD_ADDR_OWVAR 33
42208: PUSH
42209: LD_STRING 
42211: ST_TO_ADDR
// hc_name :=  ;
42212: LD_ADDR_OWVAR 26
42216: PUSH
42217: LD_STRING 
42219: ST_TO_ADDR
// un := CreateHuman ;
42220: LD_ADDR_VAR 0 2
42224: PUSH
42225: CALL_OW 44
42229: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
42230: LD_VAR 0 2
42234: PPUSH
42235: LD_INT 1
42237: PPUSH
42238: CALL_OW 51
// tmp := tmp ^ un ;
42242: LD_ADDR_VAR 0 3
42246: PUSH
42247: LD_VAR 0 3
42251: PUSH
42252: LD_VAR 0 2
42256: ADD
42257: ST_TO_ADDR
// end ;
42258: GO 42154
42260: POP
42261: POP
// repeat wait ( 0 0$1 ) ;
42262: LD_INT 35
42264: PPUSH
42265: CALL_OW 67
// for un in tmp do
42269: LD_ADDR_VAR 0 2
42273: PUSH
42274: LD_VAR 0 3
42278: PUSH
42279: FOR_IN
42280: IFFALSE 42354
// begin if IsDead ( un ) then
42282: LD_VAR 0 2
42286: PPUSH
42287: CALL_OW 301
42291: IFFALSE 42311
// begin tmp := tmp diff un ;
42293: LD_ADDR_VAR 0 3
42297: PUSH
42298: LD_VAR 0 3
42302: PUSH
42303: LD_VAR 0 2
42307: DIFF
42308: ST_TO_ADDR
// continue ;
42309: GO 42279
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
42311: LD_VAR 0 2
42315: PPUSH
42316: LD_INT 3
42318: PUSH
42319: LD_INT 22
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PPUSH
42333: CALL_OW 69
42337: PPUSH
42338: LD_VAR 0 2
42342: PPUSH
42343: CALL_OW 74
42347: PPUSH
42348: CALL_OW 115
// end ;
42352: GO 42279
42354: POP
42355: POP
// until not tmp ;
42356: LD_VAR 0 3
42360: NOT
42361: IFFALSE 42262
// end ;
42363: PPOPN 3
42365: END
// every 0 0$1 trigger StreamModeActive and sTroll do
42366: LD_EXP 87
42370: PUSH
42371: LD_EXP 112
42375: AND
42376: IFFALSE 42430
42378: GO 42380
42380: DISABLE
// begin ToLua ( displayTroll(); ) ;
42381: LD_STRING displayTroll();
42383: PPUSH
42384: CALL_OW 559
// wait ( 3 3$00 ) ;
42388: LD_INT 6300
42390: PPUSH
42391: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42395: LD_STRING hideTroll();
42397: PPUSH
42398: CALL_OW 559
// wait ( 1 1$00 ) ;
42402: LD_INT 2100
42404: PPUSH
42405: CALL_OW 67
// ToLua ( displayTroll(); ) ;
42409: LD_STRING displayTroll();
42411: PPUSH
42412: CALL_OW 559
// wait ( 1 1$00 ) ;
42416: LD_INT 2100
42418: PPUSH
42419: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42423: LD_STRING hideTroll();
42425: PPUSH
42426: CALL_OW 559
// end ;
42430: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
42431: LD_EXP 87
42435: PUSH
42436: LD_EXP 113
42440: AND
42441: IFFALSE 42504
42443: GO 42445
42445: DISABLE
42446: LD_INT 0
42448: PPUSH
// begin p := 0 ;
42449: LD_ADDR_VAR 0 1
42453: PUSH
42454: LD_INT 0
42456: ST_TO_ADDR
// repeat game_speed := 1 ;
42457: LD_ADDR_OWVAR 65
42461: PUSH
42462: LD_INT 1
42464: ST_TO_ADDR
// wait ( 0 0$1 ) ;
42465: LD_INT 35
42467: PPUSH
42468: CALL_OW 67
// p := p + 1 ;
42472: LD_ADDR_VAR 0 1
42476: PUSH
42477: LD_VAR 0 1
42481: PUSH
42482: LD_INT 1
42484: PLUS
42485: ST_TO_ADDR
// until p >= 60 ;
42486: LD_VAR 0 1
42490: PUSH
42491: LD_INT 60
42493: GREATEREQUAL
42494: IFFALSE 42457
// game_speed := 4 ;
42496: LD_ADDR_OWVAR 65
42500: PUSH
42501: LD_INT 4
42503: ST_TO_ADDR
// end ;
42504: PPOPN 1
42506: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
42507: LD_EXP 87
42511: PUSH
42512: LD_EXP 114
42516: AND
42517: IFFALSE 42663
42519: GO 42521
42521: DISABLE
42522: LD_INT 0
42524: PPUSH
42525: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42526: LD_ADDR_VAR 0 1
42530: PUSH
42531: LD_INT 22
42533: PUSH
42534: LD_OWVAR 2
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 2
42545: PUSH
42546: LD_INT 30
42548: PUSH
42549: LD_INT 0
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 30
42558: PUSH
42559: LD_INT 1
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: LIST
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PPUSH
42575: CALL_OW 69
42579: ST_TO_ADDR
// if not depot then
42580: LD_VAR 0 1
42584: NOT
42585: IFFALSE 42589
// exit ;
42587: GO 42663
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
42589: LD_ADDR_VAR 0 2
42593: PUSH
42594: LD_VAR 0 1
42598: PUSH
42599: LD_INT 1
42601: PPUSH
42602: LD_VAR 0 1
42606: PPUSH
42607: CALL_OW 12
42611: ARRAY
42612: PPUSH
42613: CALL_OW 274
42617: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
42618: LD_VAR 0 2
42622: PPUSH
42623: LD_INT 1
42625: PPUSH
42626: LD_INT 0
42628: PPUSH
42629: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
42633: LD_VAR 0 2
42637: PPUSH
42638: LD_INT 2
42640: PPUSH
42641: LD_INT 0
42643: PPUSH
42644: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
42648: LD_VAR 0 2
42652: PPUSH
42653: LD_INT 3
42655: PPUSH
42656: LD_INT 0
42658: PPUSH
42659: CALL_OW 277
// end ;
42663: PPOPN 2
42665: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
42666: LD_EXP 87
42670: PUSH
42671: LD_EXP 115
42675: AND
42676: IFFALSE 42773
42678: GO 42680
42680: DISABLE
42681: LD_INT 0
42683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
42684: LD_ADDR_VAR 0 1
42688: PUSH
42689: LD_INT 22
42691: PUSH
42692: LD_OWVAR 2
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 21
42703: PUSH
42704: LD_INT 1
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 3
42713: PUSH
42714: LD_INT 23
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: LIST
42732: PPUSH
42733: CALL_OW 69
42737: ST_TO_ADDR
// if not tmp then
42738: LD_VAR 0 1
42742: NOT
42743: IFFALSE 42747
// exit ;
42745: GO 42773
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
42747: LD_VAR 0 1
42751: PUSH
42752: LD_INT 1
42754: PPUSH
42755: LD_VAR 0 1
42759: PPUSH
42760: CALL_OW 12
42764: ARRAY
42765: PPUSH
42766: LD_INT 200
42768: PPUSH
42769: CALL_OW 234
// end ;
42773: PPOPN 1
42775: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
42776: LD_EXP 87
42780: PUSH
42781: LD_EXP 116
42785: AND
42786: IFFALSE 42865
42788: GO 42790
42790: DISABLE
42791: LD_INT 0
42793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
42794: LD_ADDR_VAR 0 1
42798: PUSH
42799: LD_INT 22
42801: PUSH
42802: LD_OWVAR 2
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 21
42813: PUSH
42814: LD_INT 2
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PPUSH
42825: CALL_OW 69
42829: ST_TO_ADDR
// if not tmp then
42830: LD_VAR 0 1
42834: NOT
42835: IFFALSE 42839
// exit ;
42837: GO 42865
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
42839: LD_VAR 0 1
42843: PUSH
42844: LD_INT 1
42846: PPUSH
42847: LD_VAR 0 1
42851: PPUSH
42852: CALL_OW 12
42856: ARRAY
42857: PPUSH
42858: LD_INT 60
42860: PPUSH
42861: CALL_OW 234
// end ;
42865: PPOPN 1
42867: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
42868: LD_EXP 87
42872: PUSH
42873: LD_EXP 117
42877: AND
42878: IFFALSE 42977
42880: GO 42882
42882: DISABLE
42883: LD_INT 0
42885: PPUSH
42886: PPUSH
// begin enable ;
42887: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
42888: LD_ADDR_VAR 0 1
42892: PUSH
42893: LD_INT 22
42895: PUSH
42896: LD_OWVAR 2
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 61
42907: PUSH
42908: EMPTY
42909: LIST
42910: PUSH
42911: LD_INT 33
42913: PUSH
42914: LD_INT 2
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: LIST
42925: PPUSH
42926: CALL_OW 69
42930: ST_TO_ADDR
// if not tmp then
42931: LD_VAR 0 1
42935: NOT
42936: IFFALSE 42940
// exit ;
42938: GO 42977
// for i in tmp do
42940: LD_ADDR_VAR 0 2
42944: PUSH
42945: LD_VAR 0 1
42949: PUSH
42950: FOR_IN
42951: IFFALSE 42975
// if IsControledBy ( i ) then
42953: LD_VAR 0 2
42957: PPUSH
42958: CALL_OW 312
42962: IFFALSE 42973
// ComUnlink ( i ) ;
42964: LD_VAR 0 2
42968: PPUSH
42969: CALL_OW 136
42973: GO 42950
42975: POP
42976: POP
// end ;
42977: PPOPN 2
42979: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
42980: LD_EXP 87
42984: PUSH
42985: LD_EXP 118
42989: AND
42990: IFFALSE 43130
42992: GO 42994
42994: DISABLE
42995: LD_INT 0
42997: PPUSH
42998: PPUSH
// begin ToLua ( displayPowell(); ) ;
42999: LD_STRING displayPowell();
43001: PPUSH
43002: CALL_OW 559
// uc_side := 0 ;
43006: LD_ADDR_OWVAR 20
43010: PUSH
43011: LD_INT 0
43013: ST_TO_ADDR
// uc_nation := 2 ;
43014: LD_ADDR_OWVAR 21
43018: PUSH
43019: LD_INT 2
43021: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
43022: LD_ADDR_OWVAR 37
43026: PUSH
43027: LD_INT 14
43029: ST_TO_ADDR
// vc_engine := engine_siberite ;
43030: LD_ADDR_OWVAR 39
43034: PUSH
43035: LD_INT 3
43037: ST_TO_ADDR
// vc_control := control_apeman ;
43038: LD_ADDR_OWVAR 38
43042: PUSH
43043: LD_INT 5
43045: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
43046: LD_ADDR_OWVAR 40
43050: PUSH
43051: LD_INT 29
43053: ST_TO_ADDR
// un := CreateVehicle ;
43054: LD_ADDR_VAR 0 2
43058: PUSH
43059: CALL_OW 45
43063: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
43064: LD_VAR 0 2
43068: PPUSH
43069: LD_INT 1
43071: PPUSH
43072: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
43076: LD_INT 35
43078: PPUSH
43079: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
43083: LD_VAR 0 2
43087: PPUSH
43088: LD_INT 22
43090: PUSH
43091: LD_OWVAR 2
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PPUSH
43100: CALL_OW 69
43104: PPUSH
43105: LD_VAR 0 2
43109: PPUSH
43110: CALL_OW 74
43114: PPUSH
43115: CALL_OW 115
// until IsDead ( un ) ;
43119: LD_VAR 0 2
43123: PPUSH
43124: CALL_OW 301
43128: IFFALSE 43076
// end ;
43130: PPOPN 2
43132: END
// every 0 0$1 trigger StreamModeActive and sStu do
43133: LD_EXP 87
43137: PUSH
43138: LD_EXP 126
43142: AND
43143: IFFALSE 43159
43145: GO 43147
43147: DISABLE
// begin ToLua ( displayStucuk(); ) ;
43148: LD_STRING displayStucuk();
43150: PPUSH
43151: CALL_OW 559
// ResetFog ;
43155: CALL_OW 335
// end ;
43159: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
43160: LD_EXP 87
43164: PUSH
43165: LD_EXP 119
43169: AND
43170: IFFALSE 43311
43172: GO 43174
43174: DISABLE
43175: LD_INT 0
43177: PPUSH
43178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43179: LD_ADDR_VAR 0 2
43183: PUSH
43184: LD_INT 22
43186: PUSH
43187: LD_OWVAR 2
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 21
43198: PUSH
43199: LD_INT 1
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PPUSH
43210: CALL_OW 69
43214: ST_TO_ADDR
// if not tmp then
43215: LD_VAR 0 2
43219: NOT
43220: IFFALSE 43224
// exit ;
43222: GO 43311
// un := tmp [ rand ( 1 , tmp ) ] ;
43224: LD_ADDR_VAR 0 1
43228: PUSH
43229: LD_VAR 0 2
43233: PUSH
43234: LD_INT 1
43236: PPUSH
43237: LD_VAR 0 2
43241: PPUSH
43242: CALL_OW 12
43246: ARRAY
43247: ST_TO_ADDR
// SetSide ( un , 0 ) ;
43248: LD_VAR 0 1
43252: PPUSH
43253: LD_INT 0
43255: PPUSH
43256: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
43260: LD_VAR 0 1
43264: PPUSH
43265: LD_OWVAR 3
43269: PUSH
43270: LD_VAR 0 1
43274: DIFF
43275: PPUSH
43276: LD_VAR 0 1
43280: PPUSH
43281: CALL_OW 74
43285: PPUSH
43286: CALL_OW 115
// wait ( 0 0$20 ) ;
43290: LD_INT 700
43292: PPUSH
43293: CALL_OW 67
// SetSide ( un , your_side ) ;
43297: LD_VAR 0 1
43301: PPUSH
43302: LD_OWVAR 2
43306: PPUSH
43307: CALL_OW 235
// end ;
43311: PPOPN 2
43313: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
43314: LD_EXP 87
43318: PUSH
43319: LD_EXP 120
43323: AND
43324: IFFALSE 43430
43326: GO 43328
43328: DISABLE
43329: LD_INT 0
43331: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43332: LD_ADDR_VAR 0 1
43336: PUSH
43337: LD_INT 22
43339: PUSH
43340: LD_OWVAR 2
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 2
43351: PUSH
43352: LD_INT 30
43354: PUSH
43355: LD_INT 0
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 30
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: LIST
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PPUSH
43381: CALL_OW 69
43385: ST_TO_ADDR
// if not depot then
43386: LD_VAR 0 1
43390: NOT
43391: IFFALSE 43395
// exit ;
43393: GO 43430
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
43395: LD_VAR 0 1
43399: PUSH
43400: LD_INT 1
43402: ARRAY
43403: PPUSH
43404: CALL_OW 250
43408: PPUSH
43409: LD_VAR 0 1
43413: PUSH
43414: LD_INT 1
43416: ARRAY
43417: PPUSH
43418: CALL_OW 251
43422: PPUSH
43423: LD_INT 70
43425: PPUSH
43426: CALL_OW 495
// end ;
43430: PPOPN 1
43432: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
43433: LD_EXP 87
43437: PUSH
43438: LD_EXP 121
43442: AND
43443: IFFALSE 43654
43445: GO 43447
43447: DISABLE
43448: LD_INT 0
43450: PPUSH
43451: PPUSH
43452: PPUSH
43453: PPUSH
43454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43455: LD_ADDR_VAR 0 5
43459: PUSH
43460: LD_INT 22
43462: PUSH
43463: LD_OWVAR 2
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 21
43474: PUSH
43475: LD_INT 1
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PPUSH
43486: CALL_OW 69
43490: ST_TO_ADDR
// if not tmp then
43491: LD_VAR 0 5
43495: NOT
43496: IFFALSE 43500
// exit ;
43498: GO 43654
// for i in tmp do
43500: LD_ADDR_VAR 0 1
43504: PUSH
43505: LD_VAR 0 5
43509: PUSH
43510: FOR_IN
43511: IFFALSE 43652
// begin d := rand ( 0 , 5 ) ;
43513: LD_ADDR_VAR 0 4
43517: PUSH
43518: LD_INT 0
43520: PPUSH
43521: LD_INT 5
43523: PPUSH
43524: CALL_OW 12
43528: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
43529: LD_ADDR_VAR 0 2
43533: PUSH
43534: LD_VAR 0 1
43538: PPUSH
43539: CALL_OW 250
43543: PPUSH
43544: LD_VAR 0 4
43548: PPUSH
43549: LD_INT 3
43551: PPUSH
43552: LD_INT 12
43554: PPUSH
43555: CALL_OW 12
43559: PPUSH
43560: CALL_OW 272
43564: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
43565: LD_ADDR_VAR 0 3
43569: PUSH
43570: LD_VAR 0 1
43574: PPUSH
43575: CALL_OW 251
43579: PPUSH
43580: LD_VAR 0 4
43584: PPUSH
43585: LD_INT 3
43587: PPUSH
43588: LD_INT 12
43590: PPUSH
43591: CALL_OW 12
43595: PPUSH
43596: CALL_OW 273
43600: ST_TO_ADDR
// if ValidHex ( x , y ) then
43601: LD_VAR 0 2
43605: PPUSH
43606: LD_VAR 0 3
43610: PPUSH
43611: CALL_OW 488
43615: IFFALSE 43650
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
43617: LD_VAR 0 1
43621: PPUSH
43622: LD_VAR 0 2
43626: PPUSH
43627: LD_VAR 0 3
43631: PPUSH
43632: LD_INT 3
43634: PPUSH
43635: LD_INT 6
43637: PPUSH
43638: CALL_OW 12
43642: PPUSH
43643: LD_INT 1
43645: PPUSH
43646: CALL_OW 483
// end ;
43650: GO 43510
43652: POP
43653: POP
// end ;
43654: PPOPN 5
43656: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
43657: LD_EXP 87
43661: PUSH
43662: LD_EXP 122
43666: AND
43667: IFFALSE 43761
43669: GO 43671
43671: DISABLE
43672: LD_INT 0
43674: PPUSH
43675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
43676: LD_ADDR_VAR 0 2
43680: PUSH
43681: LD_INT 22
43683: PUSH
43684: LD_OWVAR 2
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 32
43695: PUSH
43696: LD_INT 1
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 21
43705: PUSH
43706: LD_INT 2
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: LIST
43717: PPUSH
43718: CALL_OW 69
43722: ST_TO_ADDR
// if not tmp then
43723: LD_VAR 0 2
43727: NOT
43728: IFFALSE 43732
// exit ;
43730: GO 43761
// for i in tmp do
43732: LD_ADDR_VAR 0 1
43736: PUSH
43737: LD_VAR 0 2
43741: PUSH
43742: FOR_IN
43743: IFFALSE 43759
// SetFuel ( i , 0 ) ;
43745: LD_VAR 0 1
43749: PPUSH
43750: LD_INT 0
43752: PPUSH
43753: CALL_OW 240
43757: GO 43742
43759: POP
43760: POP
// end ;
43761: PPOPN 2
43763: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
43764: LD_EXP 87
43768: PUSH
43769: LD_EXP 123
43773: AND
43774: IFFALSE 43840
43776: GO 43778
43778: DISABLE
43779: LD_INT 0
43781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
43782: LD_ADDR_VAR 0 1
43786: PUSH
43787: LD_INT 22
43789: PUSH
43790: LD_OWVAR 2
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 30
43801: PUSH
43802: LD_INT 29
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PPUSH
43813: CALL_OW 69
43817: ST_TO_ADDR
// if not tmp then
43818: LD_VAR 0 1
43822: NOT
43823: IFFALSE 43827
// exit ;
43825: GO 43840
// DestroyUnit ( tmp [ 1 ] ) ;
43827: LD_VAR 0 1
43831: PUSH
43832: LD_INT 1
43834: ARRAY
43835: PPUSH
43836: CALL_OW 65
// end ;
43840: PPOPN 1
43842: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
43843: LD_EXP 87
43847: PUSH
43848: LD_EXP 125
43852: AND
43853: IFFALSE 43982
43855: GO 43857
43857: DISABLE
43858: LD_INT 0
43860: PPUSH
// begin uc_side := 0 ;
43861: LD_ADDR_OWVAR 20
43865: PUSH
43866: LD_INT 0
43868: ST_TO_ADDR
// uc_nation := nation_arabian ;
43869: LD_ADDR_OWVAR 21
43873: PUSH
43874: LD_INT 2
43876: ST_TO_ADDR
// hc_gallery :=  ;
43877: LD_ADDR_OWVAR 33
43881: PUSH
43882: LD_STRING 
43884: ST_TO_ADDR
// hc_name :=  ;
43885: LD_ADDR_OWVAR 26
43889: PUSH
43890: LD_STRING 
43892: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
43893: LD_INT 1
43895: PPUSH
43896: LD_INT 11
43898: PPUSH
43899: LD_INT 10
43901: PPUSH
43902: CALL_OW 380
// un := CreateHuman ;
43906: LD_ADDR_VAR 0 1
43910: PUSH
43911: CALL_OW 44
43915: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
43916: LD_VAR 0 1
43920: PPUSH
43921: LD_INT 1
43923: PPUSH
43924: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
43928: LD_INT 35
43930: PPUSH
43931: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
43935: LD_VAR 0 1
43939: PPUSH
43940: LD_INT 22
43942: PUSH
43943: LD_OWVAR 2
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PPUSH
43952: CALL_OW 69
43956: PPUSH
43957: LD_VAR 0 1
43961: PPUSH
43962: CALL_OW 74
43966: PPUSH
43967: CALL_OW 115
// until IsDead ( un ) ;
43971: LD_VAR 0 1
43975: PPUSH
43976: CALL_OW 301
43980: IFFALSE 43928
// end ;
43982: PPOPN 1
43984: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
43985: LD_EXP 87
43989: PUSH
43990: LD_EXP 127
43994: AND
43995: IFFALSE 44007
43997: GO 43999
43999: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
44000: LD_STRING earthquake(getX(game), 0, 32)
44002: PPUSH
44003: CALL_OW 559
44007: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
44008: LD_EXP 87
44012: PUSH
44013: LD_EXP 128
44017: AND
44018: IFFALSE 44109
44020: GO 44022
44022: DISABLE
44023: LD_INT 0
44025: PPUSH
// begin enable ;
44026: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
44027: LD_ADDR_VAR 0 1
44031: PUSH
44032: LD_INT 22
44034: PUSH
44035: LD_OWVAR 2
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 21
44046: PUSH
44047: LD_INT 2
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 33
44056: PUSH
44057: LD_INT 3
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: LIST
44068: PPUSH
44069: CALL_OW 69
44073: ST_TO_ADDR
// if not tmp then
44074: LD_VAR 0 1
44078: NOT
44079: IFFALSE 44083
// exit ;
44081: GO 44109
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
44083: LD_VAR 0 1
44087: PUSH
44088: LD_INT 1
44090: PPUSH
44091: LD_VAR 0 1
44095: PPUSH
44096: CALL_OW 12
44100: ARRAY
44101: PPUSH
44102: LD_INT 1
44104: PPUSH
44105: CALL_OW 234
// end ;
44109: PPOPN 1
44111: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
44112: LD_EXP 87
44116: PUSH
44117: LD_EXP 129
44121: AND
44122: IFFALSE 44263
44124: GO 44126
44126: DISABLE
44127: LD_INT 0
44129: PPUSH
44130: PPUSH
44131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44132: LD_ADDR_VAR 0 3
44136: PUSH
44137: LD_INT 22
44139: PUSH
44140: LD_OWVAR 2
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 25
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PPUSH
44163: CALL_OW 69
44167: ST_TO_ADDR
// if not tmp then
44168: LD_VAR 0 3
44172: NOT
44173: IFFALSE 44177
// exit ;
44175: GO 44263
// un := tmp [ rand ( 1 , tmp ) ] ;
44177: LD_ADDR_VAR 0 2
44181: PUSH
44182: LD_VAR 0 3
44186: PUSH
44187: LD_INT 1
44189: PPUSH
44190: LD_VAR 0 3
44194: PPUSH
44195: CALL_OW 12
44199: ARRAY
44200: ST_TO_ADDR
// if Crawls ( un ) then
44201: LD_VAR 0 2
44205: PPUSH
44206: CALL_OW 318
44210: IFFALSE 44221
// ComWalk ( un ) ;
44212: LD_VAR 0 2
44216: PPUSH
44217: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
44221: LD_VAR 0 2
44225: PPUSH
44226: LD_INT 9
44228: PPUSH
44229: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
44233: LD_INT 28
44235: PPUSH
44236: LD_OWVAR 2
44240: PPUSH
44241: LD_INT 2
44243: PPUSH
44244: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
44248: LD_INT 29
44250: PPUSH
44251: LD_OWVAR 2
44255: PPUSH
44256: LD_INT 2
44258: PPUSH
44259: CALL_OW 322
// end ;
44263: PPOPN 3
44265: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
44266: LD_EXP 87
44270: PUSH
44271: LD_EXP 130
44275: AND
44276: IFFALSE 44387
44278: GO 44280
44280: DISABLE
44281: LD_INT 0
44283: PPUSH
44284: PPUSH
44285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44286: LD_ADDR_VAR 0 3
44290: PUSH
44291: LD_INT 22
44293: PUSH
44294: LD_OWVAR 2
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 25
44305: PUSH
44306: LD_INT 1
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PPUSH
44317: CALL_OW 69
44321: ST_TO_ADDR
// if not tmp then
44322: LD_VAR 0 3
44326: NOT
44327: IFFALSE 44331
// exit ;
44329: GO 44387
// un := tmp [ rand ( 1 , tmp ) ] ;
44331: LD_ADDR_VAR 0 2
44335: PUSH
44336: LD_VAR 0 3
44340: PUSH
44341: LD_INT 1
44343: PPUSH
44344: LD_VAR 0 3
44348: PPUSH
44349: CALL_OW 12
44353: ARRAY
44354: ST_TO_ADDR
// if Crawls ( un ) then
44355: LD_VAR 0 2
44359: PPUSH
44360: CALL_OW 318
44364: IFFALSE 44375
// ComWalk ( un ) ;
44366: LD_VAR 0 2
44370: PPUSH
44371: CALL_OW 138
// SetClass ( un , class_mortar ) ;
44375: LD_VAR 0 2
44379: PPUSH
44380: LD_INT 8
44382: PPUSH
44383: CALL_OW 336
// end ;
44387: PPOPN 3
44389: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
44390: LD_EXP 87
44394: PUSH
44395: LD_EXP 131
44399: AND
44400: IFFALSE 44544
44402: GO 44404
44404: DISABLE
44405: LD_INT 0
44407: PPUSH
44408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
44409: LD_ADDR_VAR 0 2
44413: PUSH
44414: LD_INT 22
44416: PUSH
44417: LD_OWVAR 2
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 21
44428: PUSH
44429: LD_INT 2
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 2
44438: PUSH
44439: LD_INT 34
44441: PUSH
44442: LD_INT 12
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 34
44451: PUSH
44452: LD_INT 51
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 34
44461: PUSH
44462: LD_INT 32
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: LIST
44479: PPUSH
44480: CALL_OW 69
44484: ST_TO_ADDR
// if not tmp then
44485: LD_VAR 0 2
44489: NOT
44490: IFFALSE 44494
// exit ;
44492: GO 44544
// for i in tmp do
44494: LD_ADDR_VAR 0 1
44498: PUSH
44499: LD_VAR 0 2
44503: PUSH
44504: FOR_IN
44505: IFFALSE 44542
// if GetCargo ( i , mat_artifact ) = 0 then
44507: LD_VAR 0 1
44511: PPUSH
44512: LD_INT 4
44514: PPUSH
44515: CALL_OW 289
44519: PUSH
44520: LD_INT 0
44522: EQUAL
44523: IFFALSE 44540
// SetCargo ( i , mat_siberit , 100 ) ;
44525: LD_VAR 0 1
44529: PPUSH
44530: LD_INT 3
44532: PPUSH
44533: LD_INT 100
44535: PPUSH
44536: CALL_OW 290
44540: GO 44504
44542: POP
44543: POP
// end ;
44544: PPOPN 2
44546: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
44547: LD_EXP 87
44551: PUSH
44552: LD_EXP 132
44556: AND
44557: IFFALSE 44740
44559: GO 44561
44561: DISABLE
44562: LD_INT 0
44564: PPUSH
44565: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
44566: LD_ADDR_VAR 0 2
44570: PUSH
44571: LD_INT 22
44573: PUSH
44574: LD_OWVAR 2
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PPUSH
44583: CALL_OW 69
44587: ST_TO_ADDR
// if not tmp then
44588: LD_VAR 0 2
44592: NOT
44593: IFFALSE 44597
// exit ;
44595: GO 44740
// for i := 1 to 2 do
44597: LD_ADDR_VAR 0 1
44601: PUSH
44602: DOUBLE
44603: LD_INT 1
44605: DEC
44606: ST_TO_ADDR
44607: LD_INT 2
44609: PUSH
44610: FOR_TO
44611: IFFALSE 44738
// begin uc_side := your_side ;
44613: LD_ADDR_OWVAR 20
44617: PUSH
44618: LD_OWVAR 2
44622: ST_TO_ADDR
// uc_nation := nation_american ;
44623: LD_ADDR_OWVAR 21
44627: PUSH
44628: LD_INT 1
44630: ST_TO_ADDR
// vc_chassis := us_morphling ;
44631: LD_ADDR_OWVAR 37
44635: PUSH
44636: LD_INT 5
44638: ST_TO_ADDR
// vc_engine := engine_siberite ;
44639: LD_ADDR_OWVAR 39
44643: PUSH
44644: LD_INT 3
44646: ST_TO_ADDR
// vc_control := control_computer ;
44647: LD_ADDR_OWVAR 38
44651: PUSH
44652: LD_INT 3
44654: ST_TO_ADDR
// vc_weapon := us_double_laser ;
44655: LD_ADDR_OWVAR 40
44659: PUSH
44660: LD_INT 10
44662: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
44663: LD_VAR 0 2
44667: PUSH
44668: LD_INT 1
44670: ARRAY
44671: PPUSH
44672: CALL_OW 310
44676: NOT
44677: IFFALSE 44724
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
44679: CALL_OW 45
44683: PPUSH
44684: LD_VAR 0 2
44688: PUSH
44689: LD_INT 1
44691: ARRAY
44692: PPUSH
44693: CALL_OW 250
44697: PPUSH
44698: LD_VAR 0 2
44702: PUSH
44703: LD_INT 1
44705: ARRAY
44706: PPUSH
44707: CALL_OW 251
44711: PPUSH
44712: LD_INT 12
44714: PPUSH
44715: LD_INT 1
44717: PPUSH
44718: CALL_OW 50
44722: GO 44736
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
44724: CALL_OW 45
44728: PPUSH
44729: LD_INT 1
44731: PPUSH
44732: CALL_OW 51
// end ;
44736: GO 44610
44738: POP
44739: POP
// end ;
44740: PPOPN 2
44742: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
44743: LD_EXP 87
44747: PUSH
44748: LD_EXP 133
44752: AND
44753: IFFALSE 44975
44755: GO 44757
44757: DISABLE
44758: LD_INT 0
44760: PPUSH
44761: PPUSH
44762: PPUSH
44763: PPUSH
44764: PPUSH
44765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
44766: LD_ADDR_VAR 0 6
44770: PUSH
44771: LD_INT 22
44773: PUSH
44774: LD_OWVAR 2
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 21
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 3
44795: PUSH
44796: LD_INT 23
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: LIST
44814: PPUSH
44815: CALL_OW 69
44819: ST_TO_ADDR
// if not tmp then
44820: LD_VAR 0 6
44824: NOT
44825: IFFALSE 44829
// exit ;
44827: GO 44975
// s1 := rand ( 1 , 4 ) ;
44829: LD_ADDR_VAR 0 2
44833: PUSH
44834: LD_INT 1
44836: PPUSH
44837: LD_INT 4
44839: PPUSH
44840: CALL_OW 12
44844: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
44845: LD_ADDR_VAR 0 4
44849: PUSH
44850: LD_VAR 0 6
44854: PUSH
44855: LD_INT 1
44857: ARRAY
44858: PPUSH
44859: LD_VAR 0 2
44863: PPUSH
44864: CALL_OW 259
44868: ST_TO_ADDR
// if s1 = 1 then
44869: LD_VAR 0 2
44873: PUSH
44874: LD_INT 1
44876: EQUAL
44877: IFFALSE 44897
// s2 := rand ( 2 , 4 ) else
44879: LD_ADDR_VAR 0 3
44883: PUSH
44884: LD_INT 2
44886: PPUSH
44887: LD_INT 4
44889: PPUSH
44890: CALL_OW 12
44894: ST_TO_ADDR
44895: GO 44905
// s2 := 1 ;
44897: LD_ADDR_VAR 0 3
44901: PUSH
44902: LD_INT 1
44904: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
44905: LD_ADDR_VAR 0 5
44909: PUSH
44910: LD_VAR 0 6
44914: PUSH
44915: LD_INT 1
44917: ARRAY
44918: PPUSH
44919: LD_VAR 0 3
44923: PPUSH
44924: CALL_OW 259
44928: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
44929: LD_VAR 0 6
44933: PUSH
44934: LD_INT 1
44936: ARRAY
44937: PPUSH
44938: LD_VAR 0 2
44942: PPUSH
44943: LD_VAR 0 5
44947: PPUSH
44948: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
44952: LD_VAR 0 6
44956: PUSH
44957: LD_INT 1
44959: ARRAY
44960: PPUSH
44961: LD_VAR 0 3
44965: PPUSH
44966: LD_VAR 0 4
44970: PPUSH
44971: CALL_OW 237
// end ;
44975: PPOPN 6
44977: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
44978: LD_EXP 87
44982: PUSH
44983: LD_EXP 134
44987: AND
44988: IFFALSE 45067
44990: GO 44992
44992: DISABLE
44993: LD_INT 0
44995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
44996: LD_ADDR_VAR 0 1
45000: PUSH
45001: LD_INT 22
45003: PUSH
45004: LD_OWVAR 2
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 30
45015: PUSH
45016: LD_INT 3
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PPUSH
45027: CALL_OW 69
45031: ST_TO_ADDR
// if not tmp then
45032: LD_VAR 0 1
45036: NOT
45037: IFFALSE 45041
// exit ;
45039: GO 45067
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
45041: LD_VAR 0 1
45045: PUSH
45046: LD_INT 1
45048: PPUSH
45049: LD_VAR 0 1
45053: PPUSH
45054: CALL_OW 12
45058: ARRAY
45059: PPUSH
45060: LD_INT 1
45062: PPUSH
45063: CALL_OW 234
// end ;
45067: PPOPN 1
45069: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
45070: LD_EXP 87
45074: PUSH
45075: LD_EXP 135
45079: AND
45080: IFFALSE 45192
45082: GO 45084
45084: DISABLE
45085: LD_INT 0
45087: PPUSH
45088: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
45089: LD_ADDR_VAR 0 2
45093: PUSH
45094: LD_INT 22
45096: PUSH
45097: LD_OWVAR 2
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: LD_INT 30
45111: PUSH
45112: LD_INT 27
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 30
45121: PUSH
45122: LD_INT 26
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 30
45131: PUSH
45132: LD_INT 28
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PPUSH
45149: CALL_OW 69
45153: ST_TO_ADDR
// if not tmp then
45154: LD_VAR 0 2
45158: NOT
45159: IFFALSE 45163
// exit ;
45161: GO 45192
// for i in tmp do
45163: LD_ADDR_VAR 0 1
45167: PUSH
45168: LD_VAR 0 2
45172: PUSH
45173: FOR_IN
45174: IFFALSE 45190
// SetLives ( i , 1 ) ;
45176: LD_VAR 0 1
45180: PPUSH
45181: LD_INT 1
45183: PPUSH
45184: CALL_OW 234
45188: GO 45173
45190: POP
45191: POP
// end ;
45192: PPOPN 2
45194: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
45195: LD_EXP 87
45199: PUSH
45200: LD_EXP 136
45204: AND
45205: IFFALSE 45492
45207: GO 45209
45209: DISABLE
45210: LD_INT 0
45212: PPUSH
45213: PPUSH
45214: PPUSH
// begin i := rand ( 1 , 7 ) ;
45215: LD_ADDR_VAR 0 1
45219: PUSH
45220: LD_INT 1
45222: PPUSH
45223: LD_INT 7
45225: PPUSH
45226: CALL_OW 12
45230: ST_TO_ADDR
// case i of 1 :
45231: LD_VAR 0 1
45235: PUSH
45236: LD_INT 1
45238: DOUBLE
45239: EQUAL
45240: IFTRUE 45244
45242: GO 45254
45244: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
45245: LD_STRING earthquake(getX(game), 0, 32)
45247: PPUSH
45248: CALL_OW 559
45252: GO 45492
45254: LD_INT 2
45256: DOUBLE
45257: EQUAL
45258: IFTRUE 45262
45260: GO 45276
45262: POP
// begin ToLua ( displayStucuk(); ) ;
45263: LD_STRING displayStucuk();
45265: PPUSH
45266: CALL_OW 559
// ResetFog ;
45270: CALL_OW 335
// end ; 3 :
45274: GO 45492
45276: LD_INT 3
45278: DOUBLE
45279: EQUAL
45280: IFTRUE 45284
45282: GO 45388
45284: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
45285: LD_ADDR_VAR 0 2
45289: PUSH
45290: LD_INT 22
45292: PUSH
45293: LD_OWVAR 2
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 25
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PPUSH
45316: CALL_OW 69
45320: ST_TO_ADDR
// if not tmp then
45321: LD_VAR 0 2
45325: NOT
45326: IFFALSE 45330
// exit ;
45328: GO 45492
// un := tmp [ rand ( 1 , tmp ) ] ;
45330: LD_ADDR_VAR 0 3
45334: PUSH
45335: LD_VAR 0 2
45339: PUSH
45340: LD_INT 1
45342: PPUSH
45343: LD_VAR 0 2
45347: PPUSH
45348: CALL_OW 12
45352: ARRAY
45353: ST_TO_ADDR
// if Crawls ( un ) then
45354: LD_VAR 0 3
45358: PPUSH
45359: CALL_OW 318
45363: IFFALSE 45374
// ComWalk ( un ) ;
45365: LD_VAR 0 3
45369: PPUSH
45370: CALL_OW 138
// SetClass ( un , class_mortar ) ;
45374: LD_VAR 0 3
45378: PPUSH
45379: LD_INT 8
45381: PPUSH
45382: CALL_OW 336
// end ; 4 :
45386: GO 45492
45388: LD_INT 4
45390: DOUBLE
45391: EQUAL
45392: IFTRUE 45396
45394: GO 45470
45396: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
45397: LD_ADDR_VAR 0 2
45401: PUSH
45402: LD_INT 22
45404: PUSH
45405: LD_OWVAR 2
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 30
45416: PUSH
45417: LD_INT 29
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PPUSH
45428: CALL_OW 69
45432: ST_TO_ADDR
// if not tmp then
45433: LD_VAR 0 2
45437: NOT
45438: IFFALSE 45442
// exit ;
45440: GO 45492
// CenterNowOnUnits ( tmp [ 1 ] ) ;
45442: LD_VAR 0 2
45446: PUSH
45447: LD_INT 1
45449: ARRAY
45450: PPUSH
45451: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
45455: LD_VAR 0 2
45459: PUSH
45460: LD_INT 1
45462: ARRAY
45463: PPUSH
45464: CALL_OW 65
// end ; 5 .. 7 :
45468: GO 45492
45470: LD_INT 5
45472: DOUBLE
45473: GREATEREQUAL
45474: IFFALSE 45482
45476: LD_INT 7
45478: DOUBLE
45479: LESSEQUAL
45480: IFTRUE 45484
45482: GO 45491
45484: POP
// StreamSibBomb ; end ;
45485: CALL 41729 0 0
45489: GO 45492
45491: POP
// end ;
45492: PPOPN 3
45494: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
45495: LD_EXP 87
45499: PUSH
45500: LD_EXP 137
45504: AND
45505: IFFALSE 45661
45507: GO 45509
45509: DISABLE
45510: LD_INT 0
45512: PPUSH
45513: PPUSH
45514: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
45515: LD_ADDR_VAR 0 2
45519: PUSH
45520: LD_INT 81
45522: PUSH
45523: LD_OWVAR 2
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 2
45534: PUSH
45535: LD_INT 21
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 21
45547: PUSH
45548: LD_INT 2
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: LIST
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PPUSH
45564: CALL_OW 69
45568: ST_TO_ADDR
// if not tmp then
45569: LD_VAR 0 2
45573: NOT
45574: IFFALSE 45578
// exit ;
45576: GO 45661
// p := 0 ;
45578: LD_ADDR_VAR 0 3
45582: PUSH
45583: LD_INT 0
45585: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
45586: LD_INT 35
45588: PPUSH
45589: CALL_OW 67
// p := p + 1 ;
45593: LD_ADDR_VAR 0 3
45597: PUSH
45598: LD_VAR 0 3
45602: PUSH
45603: LD_INT 1
45605: PLUS
45606: ST_TO_ADDR
// for i in tmp do
45607: LD_ADDR_VAR 0 1
45611: PUSH
45612: LD_VAR 0 2
45616: PUSH
45617: FOR_IN
45618: IFFALSE 45649
// if GetLives ( i ) < 1000 then
45620: LD_VAR 0 1
45624: PPUSH
45625: CALL_OW 256
45629: PUSH
45630: LD_INT 1000
45632: LESS
45633: IFFALSE 45647
// SetLives ( i , 1000 ) ;
45635: LD_VAR 0 1
45639: PPUSH
45640: LD_INT 1000
45642: PPUSH
45643: CALL_OW 234
45647: GO 45617
45649: POP
45650: POP
// until p > 20 ;
45651: LD_VAR 0 3
45655: PUSH
45656: LD_INT 20
45658: GREATER
45659: IFFALSE 45586
// end ;
45661: PPOPN 3
45663: END
// every 0 0$1 trigger StreamModeActive and sTime do
45664: LD_EXP 87
45668: PUSH
45669: LD_EXP 138
45673: AND
45674: IFFALSE 45709
45676: GO 45678
45678: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
45679: LD_INT 28
45681: PPUSH
45682: LD_OWVAR 2
45686: PPUSH
45687: LD_INT 2
45689: PPUSH
45690: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
45694: LD_INT 30
45696: PPUSH
45697: LD_OWVAR 2
45701: PPUSH
45702: LD_INT 2
45704: PPUSH
45705: CALL_OW 322
// end ;
45709: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
45710: LD_EXP 87
45714: PUSH
45715: LD_EXP 139
45719: AND
45720: IFFALSE 45841
45722: GO 45724
45724: DISABLE
45725: LD_INT 0
45727: PPUSH
45728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
45729: LD_ADDR_VAR 0 2
45733: PUSH
45734: LD_INT 22
45736: PUSH
45737: LD_OWVAR 2
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 21
45748: PUSH
45749: LD_INT 1
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 3
45758: PUSH
45759: LD_INT 23
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: LIST
45777: PPUSH
45778: CALL_OW 69
45782: ST_TO_ADDR
// if not tmp then
45783: LD_VAR 0 2
45787: NOT
45788: IFFALSE 45792
// exit ;
45790: GO 45841
// for i in tmp do
45792: LD_ADDR_VAR 0 1
45796: PUSH
45797: LD_VAR 0 2
45801: PUSH
45802: FOR_IN
45803: IFFALSE 45839
// begin if Crawls ( i ) then
45805: LD_VAR 0 1
45809: PPUSH
45810: CALL_OW 318
45814: IFFALSE 45825
// ComWalk ( i ) ;
45816: LD_VAR 0 1
45820: PPUSH
45821: CALL_OW 138
// SetClass ( i , 2 ) ;
45825: LD_VAR 0 1
45829: PPUSH
45830: LD_INT 2
45832: PPUSH
45833: CALL_OW 336
// end ;
45837: GO 45802
45839: POP
45840: POP
// end ;
45841: PPOPN 2
45843: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
45844: LD_EXP 87
45848: PUSH
45849: LD_EXP 140
45853: AND
45854: IFFALSE 46142
45856: GO 45858
45858: DISABLE
45859: LD_INT 0
45861: PPUSH
45862: PPUSH
45863: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
45864: LD_OWVAR 2
45868: PPUSH
45869: LD_INT 9
45871: PPUSH
45872: LD_INT 1
45874: PPUSH
45875: LD_INT 1
45877: PPUSH
45878: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
45882: LD_INT 9
45884: PPUSH
45885: LD_OWVAR 2
45889: PPUSH
45890: CALL_OW 343
// uc_side := 9 ;
45894: LD_ADDR_OWVAR 20
45898: PUSH
45899: LD_INT 9
45901: ST_TO_ADDR
// uc_nation := 2 ;
45902: LD_ADDR_OWVAR 21
45906: PUSH
45907: LD_INT 2
45909: ST_TO_ADDR
// hc_name := Dark Warrior ;
45910: LD_ADDR_OWVAR 26
45914: PUSH
45915: LD_STRING Dark Warrior
45917: ST_TO_ADDR
// hc_gallery :=  ;
45918: LD_ADDR_OWVAR 33
45922: PUSH
45923: LD_STRING 
45925: ST_TO_ADDR
// hc_noskilllimit := true ;
45926: LD_ADDR_OWVAR 76
45930: PUSH
45931: LD_INT 1
45933: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
45934: LD_ADDR_OWVAR 31
45938: PUSH
45939: LD_INT 30
45941: PUSH
45942: LD_INT 30
45944: PUSH
45945: LD_INT 30
45947: PUSH
45948: LD_INT 30
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: ST_TO_ADDR
// un := CreateHuman ;
45957: LD_ADDR_VAR 0 3
45961: PUSH
45962: CALL_OW 44
45966: ST_TO_ADDR
// hc_noskilllimit := false ;
45967: LD_ADDR_OWVAR 76
45971: PUSH
45972: LD_INT 0
45974: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
45975: LD_VAR 0 3
45979: PPUSH
45980: LD_INT 1
45982: PPUSH
45983: CALL_OW 51
// ToLua ( playRanger() ) ;
45987: LD_STRING playRanger()
45989: PPUSH
45990: CALL_OW 559
// p := 0 ;
45994: LD_ADDR_VAR 0 2
45998: PUSH
45999: LD_INT 0
46001: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
46002: LD_INT 35
46004: PPUSH
46005: CALL_OW 67
// p := p + 1 ;
46009: LD_ADDR_VAR 0 2
46013: PUSH
46014: LD_VAR 0 2
46018: PUSH
46019: LD_INT 1
46021: PLUS
46022: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
46023: LD_VAR 0 3
46027: PPUSH
46028: CALL_OW 256
46032: PUSH
46033: LD_INT 1000
46035: LESS
46036: IFFALSE 46050
// SetLives ( un , 1000 ) ;
46038: LD_VAR 0 3
46042: PPUSH
46043: LD_INT 1000
46045: PPUSH
46046: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
46050: LD_VAR 0 3
46054: PPUSH
46055: LD_INT 81
46057: PUSH
46058: LD_OWVAR 2
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 91
46069: PUSH
46070: LD_VAR 0 3
46074: PUSH
46075: LD_INT 30
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: LIST
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PPUSH
46087: CALL_OW 69
46091: PPUSH
46092: LD_VAR 0 3
46096: PPUSH
46097: CALL_OW 74
46101: PPUSH
46102: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
46106: LD_VAR 0 2
46110: PUSH
46111: LD_INT 80
46113: GREATER
46114: PUSH
46115: LD_VAR 0 3
46119: PPUSH
46120: CALL_OW 301
46124: OR
46125: IFFALSE 46002
// if un then
46127: LD_VAR 0 3
46131: IFFALSE 46142
// RemoveUnit ( un ) ;
46133: LD_VAR 0 3
46137: PPUSH
46138: CALL_OW 64
// end ;
46142: PPOPN 3
46144: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
46145: LD_EXP 141
46149: IFFALSE 46265
46151: GO 46153
46153: DISABLE
46154: LD_INT 0
46156: PPUSH
46157: PPUSH
46158: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
46159: LD_ADDR_VAR 0 2
46163: PUSH
46164: LD_INT 81
46166: PUSH
46167: LD_OWVAR 2
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 21
46178: PUSH
46179: LD_INT 1
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PPUSH
46190: CALL_OW 69
46194: ST_TO_ADDR
// ToLua ( playComputer() ) ;
46195: LD_STRING playComputer()
46197: PPUSH
46198: CALL_OW 559
// if not tmp then
46202: LD_VAR 0 2
46206: NOT
46207: IFFALSE 46211
// exit ;
46209: GO 46265
// for i in tmp do
46211: LD_ADDR_VAR 0 1
46215: PUSH
46216: LD_VAR 0 2
46220: PUSH
46221: FOR_IN
46222: IFFALSE 46263
// for j := 1 to 4 do
46224: LD_ADDR_VAR 0 3
46228: PUSH
46229: DOUBLE
46230: LD_INT 1
46232: DEC
46233: ST_TO_ADDR
46234: LD_INT 4
46236: PUSH
46237: FOR_TO
46238: IFFALSE 46259
// SetSkill ( i , j , 10 ) ;
46240: LD_VAR 0 1
46244: PPUSH
46245: LD_VAR 0 3
46249: PPUSH
46250: LD_INT 10
46252: PPUSH
46253: CALL_OW 237
46257: GO 46237
46259: POP
46260: POP
46261: GO 46221
46263: POP
46264: POP
// end ;
46265: PPOPN 3
46267: END
// every 0 0$1 trigger s30 do var i , tmp ;
46268: LD_EXP 142
46272: IFFALSE 46341
46274: GO 46276
46276: DISABLE
46277: LD_INT 0
46279: PPUSH
46280: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46281: LD_ADDR_VAR 0 2
46285: PUSH
46286: LD_INT 22
46288: PUSH
46289: LD_OWVAR 2
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PPUSH
46298: CALL_OW 69
46302: ST_TO_ADDR
// if not tmp then
46303: LD_VAR 0 2
46307: NOT
46308: IFFALSE 46312
// exit ;
46310: GO 46341
// for i in tmp do
46312: LD_ADDR_VAR 0 1
46316: PUSH
46317: LD_VAR 0 2
46321: PUSH
46322: FOR_IN
46323: IFFALSE 46339
// SetLives ( i , 300 ) ;
46325: LD_VAR 0 1
46329: PPUSH
46330: LD_INT 300
46332: PPUSH
46333: CALL_OW 234
46337: GO 46322
46339: POP
46340: POP
// end ;
46341: PPOPN 2
46343: END
// every 0 0$1 trigger s60 do var i , tmp ;
46344: LD_EXP 143
46348: IFFALSE 46417
46350: GO 46352
46352: DISABLE
46353: LD_INT 0
46355: PPUSH
46356: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46357: LD_ADDR_VAR 0 2
46361: PUSH
46362: LD_INT 22
46364: PUSH
46365: LD_OWVAR 2
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PPUSH
46374: CALL_OW 69
46378: ST_TO_ADDR
// if not tmp then
46379: LD_VAR 0 2
46383: NOT
46384: IFFALSE 46388
// exit ;
46386: GO 46417
// for i in tmp do
46388: LD_ADDR_VAR 0 1
46392: PUSH
46393: LD_VAR 0 2
46397: PUSH
46398: FOR_IN
46399: IFFALSE 46415
// SetLives ( i , 600 ) ;
46401: LD_VAR 0 1
46405: PPUSH
46406: LD_INT 600
46408: PPUSH
46409: CALL_OW 234
46413: GO 46398
46415: POP
46416: POP
// end ;
46417: PPOPN 2
46419: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46420: LD_INT 0
46422: PPUSH
// case cmd of 301 :
46423: LD_VAR 0 1
46427: PUSH
46428: LD_INT 301
46430: DOUBLE
46431: EQUAL
46432: IFTRUE 46436
46434: GO 46468
46436: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
46437: LD_VAR 0 6
46441: PPUSH
46442: LD_VAR 0 7
46446: PPUSH
46447: LD_VAR 0 8
46451: PPUSH
46452: LD_VAR 0 4
46456: PPUSH
46457: LD_VAR 0 5
46461: PPUSH
46462: CALL 47677 0 5
46466: GO 46589
46468: LD_INT 302
46470: DOUBLE
46471: EQUAL
46472: IFTRUE 46476
46474: GO 46513
46476: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
46477: LD_VAR 0 6
46481: PPUSH
46482: LD_VAR 0 7
46486: PPUSH
46487: LD_VAR 0 8
46491: PPUSH
46492: LD_VAR 0 9
46496: PPUSH
46497: LD_VAR 0 4
46501: PPUSH
46502: LD_VAR 0 5
46506: PPUSH
46507: CALL 47768 0 6
46511: GO 46589
46513: LD_INT 303
46515: DOUBLE
46516: EQUAL
46517: IFTRUE 46521
46519: GO 46558
46521: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
46522: LD_VAR 0 6
46526: PPUSH
46527: LD_VAR 0 7
46531: PPUSH
46532: LD_VAR 0 8
46536: PPUSH
46537: LD_VAR 0 9
46541: PPUSH
46542: LD_VAR 0 4
46546: PPUSH
46547: LD_VAR 0 5
46551: PPUSH
46552: CALL 46594 0 6
46556: GO 46589
46558: LD_INT 304
46560: DOUBLE
46561: EQUAL
46562: IFTRUE 46566
46564: GO 46588
46566: POP
// hHackTeleport ( unit , x , y ) ; end ;
46567: LD_VAR 0 2
46571: PPUSH
46572: LD_VAR 0 4
46576: PPUSH
46577: LD_VAR 0 5
46581: PPUSH
46582: CALL 48361 0 3
46586: GO 46589
46588: POP
// end ;
46589: LD_VAR 0 12
46593: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
46594: LD_INT 0
46596: PPUSH
46597: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
46598: LD_VAR 0 1
46602: PUSH
46603: LD_INT 1
46605: LESS
46606: PUSH
46607: LD_VAR 0 1
46611: PUSH
46612: LD_INT 3
46614: GREATER
46615: OR
46616: PUSH
46617: LD_VAR 0 5
46621: PPUSH
46622: LD_VAR 0 6
46626: PPUSH
46627: CALL_OW 428
46631: OR
46632: IFFALSE 46636
// exit ;
46634: GO 47364
// uc_side := your_side ;
46636: LD_ADDR_OWVAR 20
46640: PUSH
46641: LD_OWVAR 2
46645: ST_TO_ADDR
// uc_nation := nation ;
46646: LD_ADDR_OWVAR 21
46650: PUSH
46651: LD_VAR 0 1
46655: ST_TO_ADDR
// bc_level = 1 ;
46656: LD_ADDR_OWVAR 43
46660: PUSH
46661: LD_INT 1
46663: ST_TO_ADDR
// case btype of 1 :
46664: LD_VAR 0 2
46668: PUSH
46669: LD_INT 1
46671: DOUBLE
46672: EQUAL
46673: IFTRUE 46677
46675: GO 46688
46677: POP
// bc_type := b_depot ; 2 :
46678: LD_ADDR_OWVAR 42
46682: PUSH
46683: LD_INT 0
46685: ST_TO_ADDR
46686: GO 47308
46688: LD_INT 2
46690: DOUBLE
46691: EQUAL
46692: IFTRUE 46696
46694: GO 46707
46696: POP
// bc_type := b_warehouse ; 3 :
46697: LD_ADDR_OWVAR 42
46701: PUSH
46702: LD_INT 1
46704: ST_TO_ADDR
46705: GO 47308
46707: LD_INT 3
46709: DOUBLE
46710: EQUAL
46711: IFTRUE 46715
46713: GO 46726
46715: POP
// bc_type := b_lab ; 4 .. 9 :
46716: LD_ADDR_OWVAR 42
46720: PUSH
46721: LD_INT 6
46723: ST_TO_ADDR
46724: GO 47308
46726: LD_INT 4
46728: DOUBLE
46729: GREATEREQUAL
46730: IFFALSE 46738
46732: LD_INT 9
46734: DOUBLE
46735: LESSEQUAL
46736: IFTRUE 46740
46738: GO 46800
46740: POP
// begin bc_type := b_lab_half ;
46741: LD_ADDR_OWVAR 42
46745: PUSH
46746: LD_INT 7
46748: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
46749: LD_ADDR_OWVAR 44
46753: PUSH
46754: LD_INT 10
46756: PUSH
46757: LD_INT 11
46759: PUSH
46760: LD_INT 12
46762: PUSH
46763: LD_INT 15
46765: PUSH
46766: LD_INT 14
46768: PUSH
46769: LD_INT 13
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: PUSH
46780: LD_VAR 0 2
46784: PUSH
46785: LD_INT 3
46787: MINUS
46788: ARRAY
46789: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
46790: LD_ADDR_OWVAR 45
46794: PUSH
46795: LD_INT 9
46797: ST_TO_ADDR
// end ; 10 .. 13 :
46798: GO 47308
46800: LD_INT 10
46802: DOUBLE
46803: GREATEREQUAL
46804: IFFALSE 46812
46806: LD_INT 13
46808: DOUBLE
46809: LESSEQUAL
46810: IFTRUE 46814
46812: GO 46891
46814: POP
// begin bc_type := b_lab_full ;
46815: LD_ADDR_OWVAR 42
46819: PUSH
46820: LD_INT 8
46822: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
46823: LD_ADDR_OWVAR 44
46827: PUSH
46828: LD_INT 10
46830: PUSH
46831: LD_INT 12
46833: PUSH
46834: LD_INT 14
46836: PUSH
46837: LD_INT 13
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: PUSH
46846: LD_VAR 0 2
46850: PUSH
46851: LD_INT 9
46853: MINUS
46854: ARRAY
46855: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
46856: LD_ADDR_OWVAR 45
46860: PUSH
46861: LD_INT 11
46863: PUSH
46864: LD_INT 15
46866: PUSH
46867: LD_INT 12
46869: PUSH
46870: LD_INT 15
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: PUSH
46879: LD_VAR 0 2
46883: PUSH
46884: LD_INT 9
46886: MINUS
46887: ARRAY
46888: ST_TO_ADDR
// end ; 14 :
46889: GO 47308
46891: LD_INT 14
46893: DOUBLE
46894: EQUAL
46895: IFTRUE 46899
46897: GO 46910
46899: POP
// bc_type := b_workshop ; 15 :
46900: LD_ADDR_OWVAR 42
46904: PUSH
46905: LD_INT 2
46907: ST_TO_ADDR
46908: GO 47308
46910: LD_INT 15
46912: DOUBLE
46913: EQUAL
46914: IFTRUE 46918
46916: GO 46929
46918: POP
// bc_type := b_factory ; 16 :
46919: LD_ADDR_OWVAR 42
46923: PUSH
46924: LD_INT 3
46926: ST_TO_ADDR
46927: GO 47308
46929: LD_INT 16
46931: DOUBLE
46932: EQUAL
46933: IFTRUE 46937
46935: GO 46948
46937: POP
// bc_type := b_ext_gun ; 17 :
46938: LD_ADDR_OWVAR 42
46942: PUSH
46943: LD_INT 17
46945: ST_TO_ADDR
46946: GO 47308
46948: LD_INT 17
46950: DOUBLE
46951: EQUAL
46952: IFTRUE 46956
46954: GO 46984
46956: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
46957: LD_ADDR_OWVAR 42
46961: PUSH
46962: LD_INT 19
46964: PUSH
46965: LD_INT 23
46967: PUSH
46968: LD_INT 19
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: LIST
46975: PUSH
46976: LD_VAR 0 1
46980: ARRAY
46981: ST_TO_ADDR
46982: GO 47308
46984: LD_INT 18
46986: DOUBLE
46987: EQUAL
46988: IFTRUE 46992
46990: GO 47003
46992: POP
// bc_type := b_ext_radar ; 19 :
46993: LD_ADDR_OWVAR 42
46997: PUSH
46998: LD_INT 20
47000: ST_TO_ADDR
47001: GO 47308
47003: LD_INT 19
47005: DOUBLE
47006: EQUAL
47007: IFTRUE 47011
47009: GO 47022
47011: POP
// bc_type := b_ext_radio ; 20 :
47012: LD_ADDR_OWVAR 42
47016: PUSH
47017: LD_INT 22
47019: ST_TO_ADDR
47020: GO 47308
47022: LD_INT 20
47024: DOUBLE
47025: EQUAL
47026: IFTRUE 47030
47028: GO 47041
47030: POP
// bc_type := b_ext_siberium ; 21 :
47031: LD_ADDR_OWVAR 42
47035: PUSH
47036: LD_INT 21
47038: ST_TO_ADDR
47039: GO 47308
47041: LD_INT 21
47043: DOUBLE
47044: EQUAL
47045: IFTRUE 47049
47047: GO 47060
47049: POP
// bc_type := b_ext_computer ; 22 :
47050: LD_ADDR_OWVAR 42
47054: PUSH
47055: LD_INT 24
47057: ST_TO_ADDR
47058: GO 47308
47060: LD_INT 22
47062: DOUBLE
47063: EQUAL
47064: IFTRUE 47068
47066: GO 47079
47068: POP
// bc_type := b_ext_track ; 23 :
47069: LD_ADDR_OWVAR 42
47073: PUSH
47074: LD_INT 16
47076: ST_TO_ADDR
47077: GO 47308
47079: LD_INT 23
47081: DOUBLE
47082: EQUAL
47083: IFTRUE 47087
47085: GO 47098
47087: POP
// bc_type := b_ext_laser ; 24 :
47088: LD_ADDR_OWVAR 42
47092: PUSH
47093: LD_INT 25
47095: ST_TO_ADDR
47096: GO 47308
47098: LD_INT 24
47100: DOUBLE
47101: EQUAL
47102: IFTRUE 47106
47104: GO 47117
47106: POP
// bc_type := b_control_tower ; 25 :
47107: LD_ADDR_OWVAR 42
47111: PUSH
47112: LD_INT 36
47114: ST_TO_ADDR
47115: GO 47308
47117: LD_INT 25
47119: DOUBLE
47120: EQUAL
47121: IFTRUE 47125
47123: GO 47136
47125: POP
// bc_type := b_breastwork ; 26 :
47126: LD_ADDR_OWVAR 42
47130: PUSH
47131: LD_INT 31
47133: ST_TO_ADDR
47134: GO 47308
47136: LD_INT 26
47138: DOUBLE
47139: EQUAL
47140: IFTRUE 47144
47142: GO 47155
47144: POP
// bc_type := b_bunker ; 27 :
47145: LD_ADDR_OWVAR 42
47149: PUSH
47150: LD_INT 32
47152: ST_TO_ADDR
47153: GO 47308
47155: LD_INT 27
47157: DOUBLE
47158: EQUAL
47159: IFTRUE 47163
47161: GO 47174
47163: POP
// bc_type := b_turret ; 28 :
47164: LD_ADDR_OWVAR 42
47168: PUSH
47169: LD_INT 33
47171: ST_TO_ADDR
47172: GO 47308
47174: LD_INT 28
47176: DOUBLE
47177: EQUAL
47178: IFTRUE 47182
47180: GO 47193
47182: POP
// bc_type := b_armoury ; 29 :
47183: LD_ADDR_OWVAR 42
47187: PUSH
47188: LD_INT 4
47190: ST_TO_ADDR
47191: GO 47308
47193: LD_INT 29
47195: DOUBLE
47196: EQUAL
47197: IFTRUE 47201
47199: GO 47212
47201: POP
// bc_type := b_barracks ; 30 :
47202: LD_ADDR_OWVAR 42
47206: PUSH
47207: LD_INT 5
47209: ST_TO_ADDR
47210: GO 47308
47212: LD_INT 30
47214: DOUBLE
47215: EQUAL
47216: IFTRUE 47220
47218: GO 47231
47220: POP
// bc_type := b_solar_power ; 31 :
47221: LD_ADDR_OWVAR 42
47225: PUSH
47226: LD_INT 27
47228: ST_TO_ADDR
47229: GO 47308
47231: LD_INT 31
47233: DOUBLE
47234: EQUAL
47235: IFTRUE 47239
47237: GO 47250
47239: POP
// bc_type := b_oil_power ; 32 :
47240: LD_ADDR_OWVAR 42
47244: PUSH
47245: LD_INT 26
47247: ST_TO_ADDR
47248: GO 47308
47250: LD_INT 32
47252: DOUBLE
47253: EQUAL
47254: IFTRUE 47258
47256: GO 47269
47258: POP
// bc_type := b_siberite_power ; 33 :
47259: LD_ADDR_OWVAR 42
47263: PUSH
47264: LD_INT 28
47266: ST_TO_ADDR
47267: GO 47308
47269: LD_INT 33
47271: DOUBLE
47272: EQUAL
47273: IFTRUE 47277
47275: GO 47288
47277: POP
// bc_type := b_oil_mine ; 34 :
47278: LD_ADDR_OWVAR 42
47282: PUSH
47283: LD_INT 29
47285: ST_TO_ADDR
47286: GO 47308
47288: LD_INT 34
47290: DOUBLE
47291: EQUAL
47292: IFTRUE 47296
47294: GO 47307
47296: POP
// bc_type := b_siberite_mine ; end ;
47297: LD_ADDR_OWVAR 42
47301: PUSH
47302: LD_INT 30
47304: ST_TO_ADDR
47305: GO 47308
47307: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
47308: LD_ADDR_VAR 0 8
47312: PUSH
47313: LD_VAR 0 5
47317: PPUSH
47318: LD_VAR 0 6
47322: PPUSH
47323: LD_VAR 0 3
47327: PPUSH
47328: CALL_OW 47
47332: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
47333: LD_OWVAR 42
47337: PUSH
47338: LD_INT 32
47340: PUSH
47341: LD_INT 33
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: IN
47348: IFFALSE 47364
// PlaceWeaponTurret ( b , weapon ) ;
47350: LD_VAR 0 8
47354: PPUSH
47355: LD_VAR 0 4
47359: PPUSH
47360: CALL_OW 431
// end ;
47364: LD_VAR 0 7
47368: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
47369: LD_INT 0
47371: PPUSH
47372: PPUSH
47373: PPUSH
47374: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47375: LD_ADDR_VAR 0 4
47379: PUSH
47380: LD_INT 22
47382: PUSH
47383: LD_OWVAR 2
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 2
47394: PUSH
47395: LD_INT 30
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 30
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: LIST
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PPUSH
47424: CALL_OW 69
47428: ST_TO_ADDR
// if not tmp then
47429: LD_VAR 0 4
47433: NOT
47434: IFFALSE 47438
// exit ;
47436: GO 47497
// for i in tmp do
47438: LD_ADDR_VAR 0 2
47442: PUSH
47443: LD_VAR 0 4
47447: PUSH
47448: FOR_IN
47449: IFFALSE 47495
// for j = 1 to 3 do
47451: LD_ADDR_VAR 0 3
47455: PUSH
47456: DOUBLE
47457: LD_INT 1
47459: DEC
47460: ST_TO_ADDR
47461: LD_INT 3
47463: PUSH
47464: FOR_TO
47465: IFFALSE 47491
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
47467: LD_VAR 0 2
47471: PPUSH
47472: CALL_OW 274
47476: PPUSH
47477: LD_VAR 0 3
47481: PPUSH
47482: LD_INT 99999
47484: PPUSH
47485: CALL_OW 277
47489: GO 47464
47491: POP
47492: POP
47493: GO 47448
47495: POP
47496: POP
// end ;
47497: LD_VAR 0 1
47501: RET
// export function hHackSetLevel10 ; var i , j ; begin
47502: LD_INT 0
47504: PPUSH
47505: PPUSH
47506: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
47507: LD_ADDR_VAR 0 2
47511: PUSH
47512: LD_INT 21
47514: PUSH
47515: LD_INT 1
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PPUSH
47522: CALL_OW 69
47526: PUSH
47527: FOR_IN
47528: IFFALSE 47580
// if IsSelected ( i ) then
47530: LD_VAR 0 2
47534: PPUSH
47535: CALL_OW 306
47539: IFFALSE 47578
// begin for j := 1 to 4 do
47541: LD_ADDR_VAR 0 3
47545: PUSH
47546: DOUBLE
47547: LD_INT 1
47549: DEC
47550: ST_TO_ADDR
47551: LD_INT 4
47553: PUSH
47554: FOR_TO
47555: IFFALSE 47576
// SetSkill ( i , j , 10 ) ;
47557: LD_VAR 0 2
47561: PPUSH
47562: LD_VAR 0 3
47566: PPUSH
47567: LD_INT 10
47569: PPUSH
47570: CALL_OW 237
47574: GO 47554
47576: POP
47577: POP
// end ;
47578: GO 47527
47580: POP
47581: POP
// end ;
47582: LD_VAR 0 1
47586: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
47587: LD_INT 0
47589: PPUSH
47590: PPUSH
47591: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
47592: LD_ADDR_VAR 0 2
47596: PUSH
47597: LD_INT 22
47599: PUSH
47600: LD_OWVAR 2
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 21
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PPUSH
47623: CALL_OW 69
47627: PUSH
47628: FOR_IN
47629: IFFALSE 47670
// begin for j := 1 to 4 do
47631: LD_ADDR_VAR 0 3
47635: PUSH
47636: DOUBLE
47637: LD_INT 1
47639: DEC
47640: ST_TO_ADDR
47641: LD_INT 4
47643: PUSH
47644: FOR_TO
47645: IFFALSE 47666
// SetSkill ( i , j , 10 ) ;
47647: LD_VAR 0 2
47651: PPUSH
47652: LD_VAR 0 3
47656: PPUSH
47657: LD_INT 10
47659: PPUSH
47660: CALL_OW 237
47664: GO 47644
47666: POP
47667: POP
// end ;
47668: GO 47628
47670: POP
47671: POP
// end ;
47672: LD_VAR 0 1
47676: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
47677: LD_INT 0
47679: PPUSH
// uc_side := your_side ;
47680: LD_ADDR_OWVAR 20
47684: PUSH
47685: LD_OWVAR 2
47689: ST_TO_ADDR
// uc_nation := nation ;
47690: LD_ADDR_OWVAR 21
47694: PUSH
47695: LD_VAR 0 1
47699: ST_TO_ADDR
// InitHc ;
47700: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
47704: LD_INT 0
47706: PPUSH
47707: LD_VAR 0 2
47711: PPUSH
47712: LD_VAR 0 3
47716: PPUSH
47717: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
47721: LD_VAR 0 4
47725: PPUSH
47726: LD_VAR 0 5
47730: PPUSH
47731: CALL_OW 428
47735: PUSH
47736: LD_INT 0
47738: EQUAL
47739: IFFALSE 47763
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
47741: CALL_OW 44
47745: PPUSH
47746: LD_VAR 0 4
47750: PPUSH
47751: LD_VAR 0 5
47755: PPUSH
47756: LD_INT 1
47758: PPUSH
47759: CALL_OW 48
// end ;
47763: LD_VAR 0 6
47767: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
47768: LD_INT 0
47770: PPUSH
47771: PPUSH
// uc_side := your_side ;
47772: LD_ADDR_OWVAR 20
47776: PUSH
47777: LD_OWVAR 2
47781: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
47782: LD_VAR 0 1
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: LD_INT 2
47792: PUSH
47793: LD_INT 3
47795: PUSH
47796: LD_INT 4
47798: PUSH
47799: LD_INT 5
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: IN
47809: IFFALSE 47821
// uc_nation := nation_american else
47811: LD_ADDR_OWVAR 21
47815: PUSH
47816: LD_INT 1
47818: ST_TO_ADDR
47819: GO 47864
// if chassis in [ 11 , 12 , 13 , 14 ] then
47821: LD_VAR 0 1
47825: PUSH
47826: LD_INT 11
47828: PUSH
47829: LD_INT 12
47831: PUSH
47832: LD_INT 13
47834: PUSH
47835: LD_INT 14
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: IN
47844: IFFALSE 47856
// uc_nation := nation_arabian else
47846: LD_ADDR_OWVAR 21
47850: PUSH
47851: LD_INT 2
47853: ST_TO_ADDR
47854: GO 47864
// uc_nation := nation_russian ;
47856: LD_ADDR_OWVAR 21
47860: PUSH
47861: LD_INT 3
47863: ST_TO_ADDR
// vc_chassis := chassis ;
47864: LD_ADDR_OWVAR 37
47868: PUSH
47869: LD_VAR 0 1
47873: ST_TO_ADDR
// vc_engine := engine ;
47874: LD_ADDR_OWVAR 39
47878: PUSH
47879: LD_VAR 0 2
47883: ST_TO_ADDR
// vc_control := control ;
47884: LD_ADDR_OWVAR 38
47888: PUSH
47889: LD_VAR 0 3
47893: ST_TO_ADDR
// vc_weapon := weapon ;
47894: LD_ADDR_OWVAR 40
47898: PUSH
47899: LD_VAR 0 4
47903: ST_TO_ADDR
// un := CreateVehicle ;
47904: LD_ADDR_VAR 0 8
47908: PUSH
47909: CALL_OW 45
47913: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
47914: LD_VAR 0 8
47918: PPUSH
47919: LD_INT 0
47921: PPUSH
47922: LD_INT 5
47924: PPUSH
47925: CALL_OW 12
47929: PPUSH
47930: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
47934: LD_VAR 0 8
47938: PPUSH
47939: LD_VAR 0 5
47943: PPUSH
47944: LD_VAR 0 6
47948: PPUSH
47949: LD_INT 1
47951: PPUSH
47952: CALL_OW 48
// end ;
47956: LD_VAR 0 7
47960: RET
// export hInvincible ; every 1 do
47961: GO 47963
47963: DISABLE
// hInvincible := [ ] ;
47964: LD_ADDR_EXP 144
47968: PUSH
47969: EMPTY
47970: ST_TO_ADDR
47971: END
// every 10 do var i ;
47972: GO 47974
47974: DISABLE
47975: LD_INT 0
47977: PPUSH
// begin enable ;
47978: ENABLE
// if not hInvincible then
47979: LD_EXP 144
47983: NOT
47984: IFFALSE 47988
// exit ;
47986: GO 48032
// for i in hInvincible do
47988: LD_ADDR_VAR 0 1
47992: PUSH
47993: LD_EXP 144
47997: PUSH
47998: FOR_IN
47999: IFFALSE 48030
// if GetLives ( i ) < 1000 then
48001: LD_VAR 0 1
48005: PPUSH
48006: CALL_OW 256
48010: PUSH
48011: LD_INT 1000
48013: LESS
48014: IFFALSE 48028
// SetLives ( i , 1000 ) ;
48016: LD_VAR 0 1
48020: PPUSH
48021: LD_INT 1000
48023: PPUSH
48024: CALL_OW 234
48028: GO 47998
48030: POP
48031: POP
// end ;
48032: PPOPN 1
48034: END
// export function hHackInvincible ; var i ; begin
48035: LD_INT 0
48037: PPUSH
48038: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
48039: LD_ADDR_VAR 0 2
48043: PUSH
48044: LD_INT 2
48046: PUSH
48047: LD_INT 21
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 21
48059: PUSH
48060: LD_INT 2
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: LIST
48071: PPUSH
48072: CALL_OW 69
48076: PUSH
48077: FOR_IN
48078: IFFALSE 48139
// if IsSelected ( i ) then
48080: LD_VAR 0 2
48084: PPUSH
48085: CALL_OW 306
48089: IFFALSE 48137
// begin if i in hInvincible then
48091: LD_VAR 0 2
48095: PUSH
48096: LD_EXP 144
48100: IN
48101: IFFALSE 48121
// hInvincible := hInvincible diff i else
48103: LD_ADDR_EXP 144
48107: PUSH
48108: LD_EXP 144
48112: PUSH
48113: LD_VAR 0 2
48117: DIFF
48118: ST_TO_ADDR
48119: GO 48137
// hInvincible := hInvincible union i ;
48121: LD_ADDR_EXP 144
48125: PUSH
48126: LD_EXP 144
48130: PUSH
48131: LD_VAR 0 2
48135: UNION
48136: ST_TO_ADDR
// end ;
48137: GO 48077
48139: POP
48140: POP
// end ;
48141: LD_VAR 0 1
48145: RET
// export function hHackInvisible ; var i , j ; begin
48146: LD_INT 0
48148: PPUSH
48149: PPUSH
48150: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
48151: LD_ADDR_VAR 0 2
48155: PUSH
48156: LD_INT 21
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PPUSH
48166: CALL_OW 69
48170: PUSH
48171: FOR_IN
48172: IFFALSE 48196
// if IsSelected ( i ) then
48174: LD_VAR 0 2
48178: PPUSH
48179: CALL_OW 306
48183: IFFALSE 48194
// ComForceInvisible ( i ) ;
48185: LD_VAR 0 2
48189: PPUSH
48190: CALL_OW 496
48194: GO 48171
48196: POP
48197: POP
// end ;
48198: LD_VAR 0 1
48202: RET
// export function hHackChangeYourSide ; begin
48203: LD_INT 0
48205: PPUSH
// if your_side = 8 then
48206: LD_OWVAR 2
48210: PUSH
48211: LD_INT 8
48213: EQUAL
48214: IFFALSE 48226
// your_side := 0 else
48216: LD_ADDR_OWVAR 2
48220: PUSH
48221: LD_INT 0
48223: ST_TO_ADDR
48224: GO 48240
// your_side := your_side + 1 ;
48226: LD_ADDR_OWVAR 2
48230: PUSH
48231: LD_OWVAR 2
48235: PUSH
48236: LD_INT 1
48238: PLUS
48239: ST_TO_ADDR
// end ;
48240: LD_VAR 0 1
48244: RET
// export function hHackChangeUnitSide ; var i , j ; begin
48245: LD_INT 0
48247: PPUSH
48248: PPUSH
48249: PPUSH
// for i in all_units do
48250: LD_ADDR_VAR 0 2
48254: PUSH
48255: LD_OWVAR 3
48259: PUSH
48260: FOR_IN
48261: IFFALSE 48339
// if IsSelected ( i ) then
48263: LD_VAR 0 2
48267: PPUSH
48268: CALL_OW 306
48272: IFFALSE 48337
// begin j := GetSide ( i ) ;
48274: LD_ADDR_VAR 0 3
48278: PUSH
48279: LD_VAR 0 2
48283: PPUSH
48284: CALL_OW 255
48288: ST_TO_ADDR
// if j = 8 then
48289: LD_VAR 0 3
48293: PUSH
48294: LD_INT 8
48296: EQUAL
48297: IFFALSE 48309
// j := 0 else
48299: LD_ADDR_VAR 0 3
48303: PUSH
48304: LD_INT 0
48306: ST_TO_ADDR
48307: GO 48323
// j := j + 1 ;
48309: LD_ADDR_VAR 0 3
48313: PUSH
48314: LD_VAR 0 3
48318: PUSH
48319: LD_INT 1
48321: PLUS
48322: ST_TO_ADDR
// SetSide ( i , j ) ;
48323: LD_VAR 0 2
48327: PPUSH
48328: LD_VAR 0 3
48332: PPUSH
48333: CALL_OW 235
// end ;
48337: GO 48260
48339: POP
48340: POP
// end ;
48341: LD_VAR 0 1
48345: RET
// export function hHackFog ; begin
48346: LD_INT 0
48348: PPUSH
// FogOff ( true ) ;
48349: LD_INT 1
48351: PPUSH
48352: CALL_OW 344
// end ;
48356: LD_VAR 0 1
48360: RET
// export function hHackTeleport ( unit , x , y ) ; begin
48361: LD_INT 0
48363: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
48364: LD_VAR 0 1
48368: PPUSH
48369: LD_VAR 0 2
48373: PPUSH
48374: LD_VAR 0 3
48378: PPUSH
48379: LD_INT 1
48381: PPUSH
48382: LD_INT 1
48384: PPUSH
48385: CALL_OW 483
// CenterOnXY ( x , y ) ;
48389: LD_VAR 0 2
48393: PPUSH
48394: LD_VAR 0 3
48398: PPUSH
48399: CALL_OW 84
// end ;
48403: LD_VAR 0 4
48407: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
48408: LD_INT 0
48410: PPUSH
48411: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
48412: LD_VAR 0 1
48416: NOT
48417: PUSH
48418: LD_VAR 0 2
48422: PPUSH
48423: LD_VAR 0 3
48427: PPUSH
48428: CALL_OW 488
48432: NOT
48433: OR
48434: PUSH
48435: LD_VAR 0 1
48439: PPUSH
48440: CALL_OW 266
48444: PUSH
48445: LD_INT 3
48447: NONEQUAL
48448: PUSH
48449: LD_VAR 0 1
48453: PPUSH
48454: CALL_OW 247
48458: PUSH
48459: LD_INT 1
48461: EQUAL
48462: NOT
48463: AND
48464: OR
48465: IFFALSE 48469
// exit ;
48467: GO 48618
// if GetType ( factory ) = unit_human then
48469: LD_VAR 0 1
48473: PPUSH
48474: CALL_OW 247
48478: PUSH
48479: LD_INT 1
48481: EQUAL
48482: IFFALSE 48499
// factory := IsInUnit ( factory ) ;
48484: LD_ADDR_VAR 0 1
48488: PUSH
48489: LD_VAR 0 1
48493: PPUSH
48494: CALL_OW 310
48498: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
48499: LD_VAR 0 1
48503: PPUSH
48504: CALL_OW 266
48508: PUSH
48509: LD_INT 3
48511: NONEQUAL
48512: IFFALSE 48516
// exit ;
48514: GO 48618
// if HexInfo ( x , y ) = factory then
48516: LD_VAR 0 2
48520: PPUSH
48521: LD_VAR 0 3
48525: PPUSH
48526: CALL_OW 428
48530: PUSH
48531: LD_VAR 0 1
48535: EQUAL
48536: IFFALSE 48563
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
48538: LD_ADDR_EXP 145
48542: PUSH
48543: LD_EXP 145
48547: PPUSH
48548: LD_VAR 0 1
48552: PPUSH
48553: LD_INT 0
48555: PPUSH
48556: CALL_OW 1
48560: ST_TO_ADDR
48561: GO 48614
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
48563: LD_ADDR_EXP 145
48567: PUSH
48568: LD_EXP 145
48572: PPUSH
48573: LD_VAR 0 1
48577: PPUSH
48578: LD_VAR 0 1
48582: PPUSH
48583: CALL_OW 255
48587: PUSH
48588: LD_VAR 0 1
48592: PUSH
48593: LD_VAR 0 2
48597: PUSH
48598: LD_VAR 0 3
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: PPUSH
48609: CALL_OW 1
48613: ST_TO_ADDR
// UpdateFactoryWaypoints ;
48614: CALL 48623 0 0
// end ;
48618: LD_VAR 0 4
48622: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
48623: LD_INT 0
48625: PPUSH
48626: PPUSH
48627: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
48628: LD_STRING resetFactoryWaypoint();
48630: PPUSH
48631: CALL_OW 559
// if factoryWaypoints then
48635: LD_EXP 145
48639: IFFALSE 48765
// begin list := PrepareArray ( factoryWaypoints ) ;
48641: LD_ADDR_VAR 0 3
48645: PUSH
48646: LD_EXP 145
48650: PPUSH
48651: CALL 96062 0 1
48655: ST_TO_ADDR
// for i := 1 to list do
48656: LD_ADDR_VAR 0 2
48660: PUSH
48661: DOUBLE
48662: LD_INT 1
48664: DEC
48665: ST_TO_ADDR
48666: LD_VAR 0 3
48670: PUSH
48671: FOR_TO
48672: IFFALSE 48763
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
48674: LD_STRING setFactoryWaypointXY(
48676: PUSH
48677: LD_VAR 0 3
48681: PUSH
48682: LD_VAR 0 2
48686: ARRAY
48687: PUSH
48688: LD_INT 1
48690: ARRAY
48691: STR
48692: PUSH
48693: LD_STRING ,
48695: STR
48696: PUSH
48697: LD_VAR 0 3
48701: PUSH
48702: LD_VAR 0 2
48706: ARRAY
48707: PUSH
48708: LD_INT 2
48710: ARRAY
48711: STR
48712: PUSH
48713: LD_STRING ,
48715: STR
48716: PUSH
48717: LD_VAR 0 3
48721: PUSH
48722: LD_VAR 0 2
48726: ARRAY
48727: PUSH
48728: LD_INT 3
48730: ARRAY
48731: STR
48732: PUSH
48733: LD_STRING ,
48735: STR
48736: PUSH
48737: LD_VAR 0 3
48741: PUSH
48742: LD_VAR 0 2
48746: ARRAY
48747: PUSH
48748: LD_INT 4
48750: ARRAY
48751: STR
48752: PUSH
48753: LD_STRING )
48755: STR
48756: PPUSH
48757: CALL_OW 559
48761: GO 48671
48763: POP
48764: POP
// end ; end ;
48765: LD_VAR 0 1
48769: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
48770: LD_INT 0
48772: PPUSH
// if HexInfo ( x , y ) = warehouse then
48773: LD_VAR 0 2
48777: PPUSH
48778: LD_VAR 0 3
48782: PPUSH
48783: CALL_OW 428
48787: PUSH
48788: LD_VAR 0 1
48792: EQUAL
48793: IFFALSE 48820
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
48795: LD_ADDR_EXP 146
48799: PUSH
48800: LD_EXP 146
48804: PPUSH
48805: LD_VAR 0 1
48809: PPUSH
48810: LD_INT 0
48812: PPUSH
48813: CALL_OW 1
48817: ST_TO_ADDR
48818: GO 48871
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
48820: LD_ADDR_EXP 146
48824: PUSH
48825: LD_EXP 146
48829: PPUSH
48830: LD_VAR 0 1
48834: PPUSH
48835: LD_VAR 0 1
48839: PPUSH
48840: CALL_OW 255
48844: PUSH
48845: LD_VAR 0 1
48849: PUSH
48850: LD_VAR 0 2
48854: PUSH
48855: LD_VAR 0 3
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: PPUSH
48866: CALL_OW 1
48870: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
48871: CALL 48880 0 0
// end ;
48875: LD_VAR 0 4
48879: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
48880: LD_INT 0
48882: PPUSH
48883: PPUSH
48884: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
48885: LD_STRING resetWarehouseGatheringPoints();
48887: PPUSH
48888: CALL_OW 559
// if warehouseGatheringPoints then
48892: LD_EXP 146
48896: IFFALSE 49022
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
48898: LD_ADDR_VAR 0 3
48902: PUSH
48903: LD_EXP 146
48907: PPUSH
48908: CALL 96062 0 1
48912: ST_TO_ADDR
// for i := 1 to list do
48913: LD_ADDR_VAR 0 2
48917: PUSH
48918: DOUBLE
48919: LD_INT 1
48921: DEC
48922: ST_TO_ADDR
48923: LD_VAR 0 3
48927: PUSH
48928: FOR_TO
48929: IFFALSE 49020
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
48931: LD_STRING setWarehouseGatheringPointXY(
48933: PUSH
48934: LD_VAR 0 3
48938: PUSH
48939: LD_VAR 0 2
48943: ARRAY
48944: PUSH
48945: LD_INT 1
48947: ARRAY
48948: STR
48949: PUSH
48950: LD_STRING ,
48952: STR
48953: PUSH
48954: LD_VAR 0 3
48958: PUSH
48959: LD_VAR 0 2
48963: ARRAY
48964: PUSH
48965: LD_INT 2
48967: ARRAY
48968: STR
48969: PUSH
48970: LD_STRING ,
48972: STR
48973: PUSH
48974: LD_VAR 0 3
48978: PUSH
48979: LD_VAR 0 2
48983: ARRAY
48984: PUSH
48985: LD_INT 3
48987: ARRAY
48988: STR
48989: PUSH
48990: LD_STRING ,
48992: STR
48993: PUSH
48994: LD_VAR 0 3
48998: PUSH
48999: LD_VAR 0 2
49003: ARRAY
49004: PUSH
49005: LD_INT 4
49007: ARRAY
49008: STR
49009: PUSH
49010: LD_STRING )
49012: STR
49013: PPUSH
49014: CALL_OW 559
49018: GO 48928
49020: POP
49021: POP
// end ; end ;
49022: LD_VAR 0 1
49026: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
49027: LD_EXP 146
49031: IFFALSE 49716
49033: GO 49035
49035: DISABLE
49036: LD_INT 0
49038: PPUSH
49039: PPUSH
49040: PPUSH
49041: PPUSH
49042: PPUSH
49043: PPUSH
49044: PPUSH
49045: PPUSH
49046: PPUSH
// begin enable ;
49047: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
49048: LD_ADDR_VAR 0 3
49052: PUSH
49053: LD_EXP 146
49057: PPUSH
49058: CALL 96062 0 1
49062: ST_TO_ADDR
// if not list then
49063: LD_VAR 0 3
49067: NOT
49068: IFFALSE 49072
// exit ;
49070: GO 49716
// for i := 1 to list do
49072: LD_ADDR_VAR 0 1
49076: PUSH
49077: DOUBLE
49078: LD_INT 1
49080: DEC
49081: ST_TO_ADDR
49082: LD_VAR 0 3
49086: PUSH
49087: FOR_TO
49088: IFFALSE 49714
// begin depot := list [ i ] [ 2 ] ;
49090: LD_ADDR_VAR 0 8
49094: PUSH
49095: LD_VAR 0 3
49099: PUSH
49100: LD_VAR 0 1
49104: ARRAY
49105: PUSH
49106: LD_INT 2
49108: ARRAY
49109: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
49110: LD_ADDR_VAR 0 5
49114: PUSH
49115: LD_VAR 0 3
49119: PUSH
49120: LD_VAR 0 1
49124: ARRAY
49125: PUSH
49126: LD_INT 1
49128: ARRAY
49129: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
49130: LD_VAR 0 8
49134: PPUSH
49135: CALL_OW 301
49139: PUSH
49140: LD_VAR 0 5
49144: PUSH
49145: LD_VAR 0 8
49149: PPUSH
49150: CALL_OW 255
49154: NONEQUAL
49155: OR
49156: IFFALSE 49185
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
49158: LD_ADDR_EXP 146
49162: PUSH
49163: LD_EXP 146
49167: PPUSH
49168: LD_VAR 0 8
49172: PPUSH
49173: LD_INT 0
49175: PPUSH
49176: CALL_OW 1
49180: ST_TO_ADDR
// exit ;
49181: POP
49182: POP
49183: GO 49716
// end ; x := list [ i ] [ 3 ] ;
49185: LD_ADDR_VAR 0 6
49189: PUSH
49190: LD_VAR 0 3
49194: PUSH
49195: LD_VAR 0 1
49199: ARRAY
49200: PUSH
49201: LD_INT 3
49203: ARRAY
49204: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
49205: LD_ADDR_VAR 0 7
49209: PUSH
49210: LD_VAR 0 3
49214: PUSH
49215: LD_VAR 0 1
49219: ARRAY
49220: PUSH
49221: LD_INT 4
49223: ARRAY
49224: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
49225: LD_ADDR_VAR 0 9
49229: PUSH
49230: LD_VAR 0 6
49234: PPUSH
49235: LD_VAR 0 7
49239: PPUSH
49240: LD_INT 16
49242: PPUSH
49243: CALL 94650 0 3
49247: ST_TO_ADDR
// if not cratesNearbyPoint then
49248: LD_VAR 0 9
49252: NOT
49253: IFFALSE 49259
// exit ;
49255: POP
49256: POP
49257: GO 49716
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
49259: LD_ADDR_VAR 0 4
49263: PUSH
49264: LD_INT 22
49266: PUSH
49267: LD_VAR 0 5
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 3
49278: PUSH
49279: LD_INT 60
49281: PUSH
49282: EMPTY
49283: LIST
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 91
49291: PUSH
49292: LD_VAR 0 8
49296: PUSH
49297: LD_INT 6
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: LD_INT 25
49310: PUSH
49311: LD_INT 2
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 25
49320: PUSH
49321: LD_INT 16
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: LIST
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: PPUSH
49339: CALL_OW 69
49343: PUSH
49344: LD_VAR 0 8
49348: PPUSH
49349: CALL_OW 313
49353: PPUSH
49354: LD_INT 3
49356: PUSH
49357: LD_INT 60
49359: PUSH
49360: EMPTY
49361: LIST
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 2
49369: PUSH
49370: LD_INT 25
49372: PUSH
49373: LD_INT 2
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 25
49382: PUSH
49383: LD_INT 16
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: LIST
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PPUSH
49399: CALL_OW 72
49403: UNION
49404: ST_TO_ADDR
// if tmp then
49405: LD_VAR 0 4
49409: IFFALSE 49489
// begin tmp := ShrinkArray ( tmp , 3 ) ;
49411: LD_ADDR_VAR 0 4
49415: PUSH
49416: LD_VAR 0 4
49420: PPUSH
49421: LD_INT 3
49423: PPUSH
49424: CALL 92619 0 2
49428: ST_TO_ADDR
// for j in tmp do
49429: LD_ADDR_VAR 0 2
49433: PUSH
49434: LD_VAR 0 4
49438: PUSH
49439: FOR_IN
49440: IFFALSE 49483
// begin if IsInUnit ( j ) then
49442: LD_VAR 0 2
49446: PPUSH
49447: CALL_OW 310
49451: IFFALSE 49462
// ComExit ( j ) ;
49453: LD_VAR 0 2
49457: PPUSH
49458: CALL 92702 0 1
// AddComCollect ( j , x , y ) ;
49462: LD_VAR 0 2
49466: PPUSH
49467: LD_VAR 0 6
49471: PPUSH
49472: LD_VAR 0 7
49476: PPUSH
49477: CALL_OW 177
// end ;
49481: GO 49439
49483: POP
49484: POP
// exit ;
49485: POP
49486: POP
49487: GO 49716
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
49489: LD_ADDR_VAR 0 4
49493: PUSH
49494: LD_INT 22
49496: PUSH
49497: LD_VAR 0 5
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 91
49508: PUSH
49509: LD_VAR 0 8
49513: PUSH
49514: LD_INT 8
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 2
49524: PUSH
49525: LD_INT 34
49527: PUSH
49528: LD_INT 12
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 34
49537: PUSH
49538: LD_INT 51
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 34
49547: PUSH
49548: LD_INT 32
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 34
49557: PUSH
49558: LD_INT 89
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: LIST
49576: PPUSH
49577: CALL_OW 69
49581: ST_TO_ADDR
// if tmp then
49582: LD_VAR 0 4
49586: IFFALSE 49712
// begin for j in tmp do
49588: LD_ADDR_VAR 0 2
49592: PUSH
49593: LD_VAR 0 4
49597: PUSH
49598: FOR_IN
49599: IFFALSE 49710
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
49601: LD_VAR 0 2
49605: PPUSH
49606: CALL_OW 262
49610: PUSH
49611: LD_INT 3
49613: EQUAL
49614: PUSH
49615: LD_VAR 0 2
49619: PPUSH
49620: CALL_OW 261
49624: PUSH
49625: LD_INT 20
49627: GREATER
49628: OR
49629: PUSH
49630: LD_VAR 0 2
49634: PPUSH
49635: CALL_OW 314
49639: NOT
49640: AND
49641: PUSH
49642: LD_VAR 0 2
49646: PPUSH
49647: CALL_OW 263
49651: PUSH
49652: LD_INT 1
49654: NONEQUAL
49655: PUSH
49656: LD_VAR 0 2
49660: PPUSH
49661: CALL_OW 311
49665: OR
49666: AND
49667: IFFALSE 49708
// begin ComCollect ( j , x , y ) ;
49669: LD_VAR 0 2
49673: PPUSH
49674: LD_VAR 0 6
49678: PPUSH
49679: LD_VAR 0 7
49683: PPUSH
49684: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
49688: LD_VAR 0 2
49692: PPUSH
49693: LD_VAR 0 8
49697: PPUSH
49698: CALL_OW 172
// exit ;
49702: POP
49703: POP
49704: POP
49705: POP
49706: GO 49716
// end ;
49708: GO 49598
49710: POP
49711: POP
// end ; end ;
49712: GO 49087
49714: POP
49715: POP
// end ; end_of_file
49716: PPOPN 9
49718: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
49719: LD_INT 0
49721: PPUSH
49722: PPUSH
49723: PPUSH
49724: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
49725: LD_VAR 0 1
49729: PPUSH
49730: CALL_OW 264
49734: PUSH
49735: LD_INT 91
49737: EQUAL
49738: IFFALSE 49810
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
49740: LD_INT 68
49742: PPUSH
49743: LD_VAR 0 1
49747: PPUSH
49748: CALL_OW 255
49752: PPUSH
49753: CALL_OW 321
49757: PUSH
49758: LD_INT 2
49760: EQUAL
49761: IFFALSE 49773
// eff := 70 else
49763: LD_ADDR_VAR 0 4
49767: PUSH
49768: LD_INT 70
49770: ST_TO_ADDR
49771: GO 49781
// eff := 30 ;
49773: LD_ADDR_VAR 0 4
49777: PUSH
49778: LD_INT 30
49780: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
49781: LD_VAR 0 1
49785: PPUSH
49786: CALL_OW 250
49790: PPUSH
49791: LD_VAR 0 1
49795: PPUSH
49796: CALL_OW 251
49800: PPUSH
49801: LD_VAR 0 4
49805: PPUSH
49806: CALL_OW 495
// end ; end ;
49810: LD_VAR 0 2
49814: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
49815: LD_INT 0
49817: PPUSH
// end ;
49818: LD_VAR 0 4
49822: RET
// export function SOS_Command ( cmd ) ; begin
49823: LD_INT 0
49825: PPUSH
// end ;
49826: LD_VAR 0 2
49830: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
49831: LD_INT 0
49833: PPUSH
// end ;
49834: LD_VAR 0 6
49838: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
49839: LD_INT 0
49841: PPUSH
49842: PPUSH
// if not vehicle or not factory then
49843: LD_VAR 0 1
49847: NOT
49848: PUSH
49849: LD_VAR 0 2
49853: NOT
49854: OR
49855: IFFALSE 49859
// exit ;
49857: GO 50090
// if factoryWaypoints >= factory then
49859: LD_EXP 145
49863: PUSH
49864: LD_VAR 0 2
49868: GREATEREQUAL
49869: IFFALSE 50090
// if factoryWaypoints [ factory ] then
49871: LD_EXP 145
49875: PUSH
49876: LD_VAR 0 2
49880: ARRAY
49881: IFFALSE 50090
// begin if GetControl ( vehicle ) = control_manual then
49883: LD_VAR 0 1
49887: PPUSH
49888: CALL_OW 263
49892: PUSH
49893: LD_INT 1
49895: EQUAL
49896: IFFALSE 49977
// begin driver := IsDrivenBy ( vehicle ) ;
49898: LD_ADDR_VAR 0 4
49902: PUSH
49903: LD_VAR 0 1
49907: PPUSH
49908: CALL_OW 311
49912: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
49913: LD_VAR 0 4
49917: PPUSH
49918: LD_EXP 145
49922: PUSH
49923: LD_VAR 0 2
49927: ARRAY
49928: PUSH
49929: LD_INT 3
49931: ARRAY
49932: PPUSH
49933: LD_EXP 145
49937: PUSH
49938: LD_VAR 0 2
49942: ARRAY
49943: PUSH
49944: LD_INT 4
49946: ARRAY
49947: PPUSH
49948: CALL_OW 171
// AddComExitVehicle ( driver ) ;
49952: LD_VAR 0 4
49956: PPUSH
49957: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
49961: LD_VAR 0 4
49965: PPUSH
49966: LD_VAR 0 2
49970: PPUSH
49971: CALL_OW 180
// end else
49975: GO 50090
// if GetControl ( vehicle ) = control_remote then
49977: LD_VAR 0 1
49981: PPUSH
49982: CALL_OW 263
49986: PUSH
49987: LD_INT 2
49989: EQUAL
49990: IFFALSE 50051
// begin wait ( 0 0$2 ) ;
49992: LD_INT 70
49994: PPUSH
49995: CALL_OW 67
// if Connect ( vehicle ) then
49999: LD_VAR 0 1
50003: PPUSH
50004: CALL 62921 0 1
50008: IFFALSE 50049
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
50010: LD_VAR 0 1
50014: PPUSH
50015: LD_EXP 145
50019: PUSH
50020: LD_VAR 0 2
50024: ARRAY
50025: PUSH
50026: LD_INT 3
50028: ARRAY
50029: PPUSH
50030: LD_EXP 145
50034: PUSH
50035: LD_VAR 0 2
50039: ARRAY
50040: PUSH
50041: LD_INT 4
50043: ARRAY
50044: PPUSH
50045: CALL_OW 171
// end else
50049: GO 50090
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
50051: LD_VAR 0 1
50055: PPUSH
50056: LD_EXP 145
50060: PUSH
50061: LD_VAR 0 2
50065: ARRAY
50066: PUSH
50067: LD_INT 3
50069: ARRAY
50070: PPUSH
50071: LD_EXP 145
50075: PUSH
50076: LD_VAR 0 2
50080: ARRAY
50081: PUSH
50082: LD_INT 4
50084: ARRAY
50085: PPUSH
50086: CALL_OW 171
// end ; end ;
50090: LD_VAR 0 3
50094: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
50095: LD_INT 0
50097: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
50098: LD_VAR 0 1
50102: PUSH
50103: LD_INT 250
50105: EQUAL
50106: PUSH
50107: LD_VAR 0 2
50111: PPUSH
50112: CALL_OW 264
50116: PUSH
50117: LD_INT 81
50119: EQUAL
50120: AND
50121: IFFALSE 50142
// MinerPlaceMine ( unit , x , y ) ;
50123: LD_VAR 0 2
50127: PPUSH
50128: LD_VAR 0 4
50132: PPUSH
50133: LD_VAR 0 5
50137: PPUSH
50138: CALL 53132 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
50142: LD_VAR 0 1
50146: PUSH
50147: LD_INT 251
50149: EQUAL
50150: PUSH
50151: LD_VAR 0 2
50155: PPUSH
50156: CALL_OW 264
50160: PUSH
50161: LD_INT 81
50163: EQUAL
50164: AND
50165: IFFALSE 50186
// MinerDetonateMine ( unit , x , y ) ;
50167: LD_VAR 0 2
50171: PPUSH
50172: LD_VAR 0 4
50176: PPUSH
50177: LD_VAR 0 5
50181: PPUSH
50182: CALL 53407 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
50186: LD_VAR 0 1
50190: PUSH
50191: LD_INT 252
50193: EQUAL
50194: PUSH
50195: LD_VAR 0 2
50199: PPUSH
50200: CALL_OW 264
50204: PUSH
50205: LD_INT 81
50207: EQUAL
50208: AND
50209: IFFALSE 50230
// MinerCreateMinefield ( unit , x , y ) ;
50211: LD_VAR 0 2
50215: PPUSH
50216: LD_VAR 0 4
50220: PPUSH
50221: LD_VAR 0 5
50225: PPUSH
50226: CALL 53824 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
50230: LD_VAR 0 1
50234: PUSH
50235: LD_INT 253
50237: EQUAL
50238: PUSH
50239: LD_VAR 0 2
50243: PPUSH
50244: CALL_OW 257
50248: PUSH
50249: LD_INT 5
50251: EQUAL
50252: AND
50253: IFFALSE 50274
// ComBinocular ( unit , x , y ) ;
50255: LD_VAR 0 2
50259: PPUSH
50260: LD_VAR 0 4
50264: PPUSH
50265: LD_VAR 0 5
50269: PPUSH
50270: CALL 54193 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
50274: LD_VAR 0 1
50278: PUSH
50279: LD_INT 254
50281: EQUAL
50282: PUSH
50283: LD_VAR 0 2
50287: PPUSH
50288: CALL_OW 264
50292: PUSH
50293: LD_INT 99
50295: EQUAL
50296: AND
50297: PUSH
50298: LD_VAR 0 3
50302: PPUSH
50303: CALL_OW 263
50307: PUSH
50308: LD_INT 3
50310: EQUAL
50311: AND
50312: IFFALSE 50328
// HackDestroyVehicle ( unit , selectedUnit ) ;
50314: LD_VAR 0 2
50318: PPUSH
50319: LD_VAR 0 3
50323: PPUSH
50324: CALL 52496 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
50328: LD_VAR 0 1
50332: PUSH
50333: LD_INT 255
50335: EQUAL
50336: PUSH
50337: LD_VAR 0 2
50341: PPUSH
50342: CALL_OW 264
50346: PUSH
50347: LD_INT 14
50349: PUSH
50350: LD_INT 53
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: IN
50357: AND
50358: PUSH
50359: LD_VAR 0 4
50363: PPUSH
50364: LD_VAR 0 5
50368: PPUSH
50369: CALL_OW 488
50373: AND
50374: IFFALSE 50398
// CutTreeXYR ( unit , x , y , 12 ) ;
50376: LD_VAR 0 2
50380: PPUSH
50381: LD_VAR 0 4
50385: PPUSH
50386: LD_VAR 0 5
50390: PPUSH
50391: LD_INT 12
50393: PPUSH
50394: CALL 50493 0 4
// if cmd = 256 then
50398: LD_VAR 0 1
50402: PUSH
50403: LD_INT 256
50405: EQUAL
50406: IFFALSE 50427
// SetFactoryWaypoint ( unit , x , y ) ;
50408: LD_VAR 0 2
50412: PPUSH
50413: LD_VAR 0 4
50417: PPUSH
50418: LD_VAR 0 5
50422: PPUSH
50423: CALL 48408 0 3
// if cmd = 257 then
50427: LD_VAR 0 1
50431: PUSH
50432: LD_INT 257
50434: EQUAL
50435: IFFALSE 50456
// SetWarehouseGatheringPoint ( unit , x , y ) ;
50437: LD_VAR 0 2
50441: PPUSH
50442: LD_VAR 0 4
50446: PPUSH
50447: LD_VAR 0 5
50451: PPUSH
50452: CALL 48770 0 3
// if cmd = 258 then
50456: LD_VAR 0 1
50460: PUSH
50461: LD_INT 258
50463: EQUAL
50464: IFFALSE 50488
// BurnTreeXYR ( unit , x , y , 8 ) ;
50466: LD_VAR 0 2
50470: PPUSH
50471: LD_VAR 0 4
50475: PPUSH
50476: LD_VAR 0 5
50480: PPUSH
50481: LD_INT 8
50483: PPUSH
50484: CALL 50887 0 4
// end ;
50488: LD_VAR 0 6
50492: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
50493: LD_INT 0
50495: PPUSH
50496: PPUSH
50497: PPUSH
50498: PPUSH
50499: PPUSH
50500: PPUSH
50501: PPUSH
50502: PPUSH
50503: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
50504: LD_VAR 0 1
50508: PPUSH
50509: CALL_OW 302
50513: NOT
50514: PUSH
50515: LD_VAR 0 2
50519: PPUSH
50520: LD_VAR 0 3
50524: PPUSH
50525: CALL_OW 488
50529: NOT
50530: OR
50531: PUSH
50532: LD_VAR 0 4
50536: NOT
50537: OR
50538: IFFALSE 50542
// exit ;
50540: GO 50882
// list := [ ] ;
50542: LD_ADDR_VAR 0 13
50546: PUSH
50547: EMPTY
50548: ST_TO_ADDR
// if x - r < 0 then
50549: LD_VAR 0 2
50553: PUSH
50554: LD_VAR 0 4
50558: MINUS
50559: PUSH
50560: LD_INT 0
50562: LESS
50563: IFFALSE 50575
// min_x := 0 else
50565: LD_ADDR_VAR 0 7
50569: PUSH
50570: LD_INT 0
50572: ST_TO_ADDR
50573: GO 50591
// min_x := x - r ;
50575: LD_ADDR_VAR 0 7
50579: PUSH
50580: LD_VAR 0 2
50584: PUSH
50585: LD_VAR 0 4
50589: MINUS
50590: ST_TO_ADDR
// if y - r < 0 then
50591: LD_VAR 0 3
50595: PUSH
50596: LD_VAR 0 4
50600: MINUS
50601: PUSH
50602: LD_INT 0
50604: LESS
50605: IFFALSE 50617
// min_y := 0 else
50607: LD_ADDR_VAR 0 8
50611: PUSH
50612: LD_INT 0
50614: ST_TO_ADDR
50615: GO 50633
// min_y := y - r ;
50617: LD_ADDR_VAR 0 8
50621: PUSH
50622: LD_VAR 0 3
50626: PUSH
50627: LD_VAR 0 4
50631: MINUS
50632: ST_TO_ADDR
// max_x := x + r ;
50633: LD_ADDR_VAR 0 9
50637: PUSH
50638: LD_VAR 0 2
50642: PUSH
50643: LD_VAR 0 4
50647: PLUS
50648: ST_TO_ADDR
// max_y := y + r ;
50649: LD_ADDR_VAR 0 10
50653: PUSH
50654: LD_VAR 0 3
50658: PUSH
50659: LD_VAR 0 4
50663: PLUS
50664: ST_TO_ADDR
// for _x = min_x to max_x do
50665: LD_ADDR_VAR 0 11
50669: PUSH
50670: DOUBLE
50671: LD_VAR 0 7
50675: DEC
50676: ST_TO_ADDR
50677: LD_VAR 0 9
50681: PUSH
50682: FOR_TO
50683: IFFALSE 50800
// for _y = min_y to max_y do
50685: LD_ADDR_VAR 0 12
50689: PUSH
50690: DOUBLE
50691: LD_VAR 0 8
50695: DEC
50696: ST_TO_ADDR
50697: LD_VAR 0 10
50701: PUSH
50702: FOR_TO
50703: IFFALSE 50796
// begin if not ValidHex ( _x , _y ) then
50705: LD_VAR 0 11
50709: PPUSH
50710: LD_VAR 0 12
50714: PPUSH
50715: CALL_OW 488
50719: NOT
50720: IFFALSE 50724
// continue ;
50722: GO 50702
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
50724: LD_VAR 0 11
50728: PPUSH
50729: LD_VAR 0 12
50733: PPUSH
50734: CALL_OW 351
50738: PUSH
50739: LD_VAR 0 11
50743: PPUSH
50744: LD_VAR 0 12
50748: PPUSH
50749: CALL_OW 554
50753: AND
50754: IFFALSE 50794
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
50756: LD_ADDR_VAR 0 13
50760: PUSH
50761: LD_VAR 0 13
50765: PPUSH
50766: LD_VAR 0 13
50770: PUSH
50771: LD_INT 1
50773: PLUS
50774: PPUSH
50775: LD_VAR 0 11
50779: PUSH
50780: LD_VAR 0 12
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PPUSH
50789: CALL_OW 2
50793: ST_TO_ADDR
// end ;
50794: GO 50702
50796: POP
50797: POP
50798: GO 50682
50800: POP
50801: POP
// if not list then
50802: LD_VAR 0 13
50806: NOT
50807: IFFALSE 50811
// exit ;
50809: GO 50882
// for i in list do
50811: LD_ADDR_VAR 0 6
50815: PUSH
50816: LD_VAR 0 13
50820: PUSH
50821: FOR_IN
50822: IFFALSE 50880
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
50824: LD_VAR 0 1
50828: PPUSH
50829: LD_STRING M
50831: PUSH
50832: LD_VAR 0 6
50836: PUSH
50837: LD_INT 1
50839: ARRAY
50840: PUSH
50841: LD_VAR 0 6
50845: PUSH
50846: LD_INT 2
50848: ARRAY
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: PUSH
50871: EMPTY
50872: LIST
50873: PPUSH
50874: CALL_OW 447
50878: GO 50821
50880: POP
50881: POP
// end ;
50882: LD_VAR 0 5
50886: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
50887: LD_INT 0
50889: PPUSH
50890: PPUSH
50891: PPUSH
50892: PPUSH
50893: PPUSH
50894: PPUSH
50895: PPUSH
50896: PPUSH
50897: PPUSH
50898: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
50899: LD_VAR 0 1
50903: PPUSH
50904: CALL_OW 302
50908: NOT
50909: PUSH
50910: LD_VAR 0 2
50914: PPUSH
50915: LD_VAR 0 3
50919: PPUSH
50920: CALL_OW 488
50924: NOT
50925: OR
50926: PUSH
50927: LD_VAR 0 4
50931: NOT
50932: OR
50933: IFFALSE 50937
// exit ;
50935: GO 51450
// list := [ ] ;
50937: LD_ADDR_VAR 0 13
50941: PUSH
50942: EMPTY
50943: ST_TO_ADDR
// if x - r < 0 then
50944: LD_VAR 0 2
50948: PUSH
50949: LD_VAR 0 4
50953: MINUS
50954: PUSH
50955: LD_INT 0
50957: LESS
50958: IFFALSE 50970
// min_x := 0 else
50960: LD_ADDR_VAR 0 7
50964: PUSH
50965: LD_INT 0
50967: ST_TO_ADDR
50968: GO 50986
// min_x := x - r ;
50970: LD_ADDR_VAR 0 7
50974: PUSH
50975: LD_VAR 0 2
50979: PUSH
50980: LD_VAR 0 4
50984: MINUS
50985: ST_TO_ADDR
// if y - r < 0 then
50986: LD_VAR 0 3
50990: PUSH
50991: LD_VAR 0 4
50995: MINUS
50996: PUSH
50997: LD_INT 0
50999: LESS
51000: IFFALSE 51012
// min_y := 0 else
51002: LD_ADDR_VAR 0 8
51006: PUSH
51007: LD_INT 0
51009: ST_TO_ADDR
51010: GO 51028
// min_y := y - r ;
51012: LD_ADDR_VAR 0 8
51016: PUSH
51017: LD_VAR 0 3
51021: PUSH
51022: LD_VAR 0 4
51026: MINUS
51027: ST_TO_ADDR
// max_x := x + r ;
51028: LD_ADDR_VAR 0 9
51032: PUSH
51033: LD_VAR 0 2
51037: PUSH
51038: LD_VAR 0 4
51042: PLUS
51043: ST_TO_ADDR
// max_y := y + r ;
51044: LD_ADDR_VAR 0 10
51048: PUSH
51049: LD_VAR 0 3
51053: PUSH
51054: LD_VAR 0 4
51058: PLUS
51059: ST_TO_ADDR
// for _x = min_x to max_x do
51060: LD_ADDR_VAR 0 11
51064: PUSH
51065: DOUBLE
51066: LD_VAR 0 7
51070: DEC
51071: ST_TO_ADDR
51072: LD_VAR 0 9
51076: PUSH
51077: FOR_TO
51078: IFFALSE 51195
// for _y = min_y to max_y do
51080: LD_ADDR_VAR 0 12
51084: PUSH
51085: DOUBLE
51086: LD_VAR 0 8
51090: DEC
51091: ST_TO_ADDR
51092: LD_VAR 0 10
51096: PUSH
51097: FOR_TO
51098: IFFALSE 51191
// begin if not ValidHex ( _x , _y ) then
51100: LD_VAR 0 11
51104: PPUSH
51105: LD_VAR 0 12
51109: PPUSH
51110: CALL_OW 488
51114: NOT
51115: IFFALSE 51119
// continue ;
51117: GO 51097
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
51119: LD_VAR 0 11
51123: PPUSH
51124: LD_VAR 0 12
51128: PPUSH
51129: CALL_OW 351
51133: PUSH
51134: LD_VAR 0 11
51138: PPUSH
51139: LD_VAR 0 12
51143: PPUSH
51144: CALL_OW 554
51148: AND
51149: IFFALSE 51189
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
51151: LD_ADDR_VAR 0 13
51155: PUSH
51156: LD_VAR 0 13
51160: PPUSH
51161: LD_VAR 0 13
51165: PUSH
51166: LD_INT 1
51168: PLUS
51169: PPUSH
51170: LD_VAR 0 11
51174: PUSH
51175: LD_VAR 0 12
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PPUSH
51184: CALL_OW 2
51188: ST_TO_ADDR
// end ;
51189: GO 51097
51191: POP
51192: POP
51193: GO 51077
51195: POP
51196: POP
// if not list then
51197: LD_VAR 0 13
51201: NOT
51202: IFFALSE 51206
// exit ;
51204: GO 51450
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
51206: LD_ADDR_VAR 0 13
51210: PUSH
51211: LD_VAR 0 1
51215: PPUSH
51216: LD_VAR 0 13
51220: PPUSH
51221: LD_INT 1
51223: PPUSH
51224: LD_INT 1
51226: PPUSH
51227: CALL 60063 0 4
51231: ST_TO_ADDR
// ComStop ( flame ) ;
51232: LD_VAR 0 1
51236: PPUSH
51237: CALL_OW 141
// for i in list do
51241: LD_ADDR_VAR 0 6
51245: PUSH
51246: LD_VAR 0 13
51250: PUSH
51251: FOR_IN
51252: IFFALSE 51283
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
51254: LD_VAR 0 1
51258: PPUSH
51259: LD_VAR 0 6
51263: PUSH
51264: LD_INT 1
51266: ARRAY
51267: PPUSH
51268: LD_VAR 0 6
51272: PUSH
51273: LD_INT 2
51275: ARRAY
51276: PPUSH
51277: CALL_OW 176
51281: GO 51251
51283: POP
51284: POP
// repeat wait ( 0 0$1 ) ;
51285: LD_INT 35
51287: PPUSH
51288: CALL_OW 67
// task := GetTaskList ( flame ) ;
51292: LD_ADDR_VAR 0 14
51296: PUSH
51297: LD_VAR 0 1
51301: PPUSH
51302: CALL_OW 437
51306: ST_TO_ADDR
// if not task then
51307: LD_VAR 0 14
51311: NOT
51312: IFFALSE 51316
// exit ;
51314: GO 51450
// if task [ 1 ] [ 1 ] <> | then
51316: LD_VAR 0 14
51320: PUSH
51321: LD_INT 1
51323: ARRAY
51324: PUSH
51325: LD_INT 1
51327: ARRAY
51328: PUSH
51329: LD_STRING |
51331: NONEQUAL
51332: IFFALSE 51336
// exit ;
51334: GO 51450
// _x := task [ 1 ] [ 2 ] ;
51336: LD_ADDR_VAR 0 11
51340: PUSH
51341: LD_VAR 0 14
51345: PUSH
51346: LD_INT 1
51348: ARRAY
51349: PUSH
51350: LD_INT 2
51352: ARRAY
51353: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
51354: LD_ADDR_VAR 0 12
51358: PUSH
51359: LD_VAR 0 14
51363: PUSH
51364: LD_INT 1
51366: ARRAY
51367: PUSH
51368: LD_INT 3
51370: ARRAY
51371: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
51372: LD_VAR 0 11
51376: PPUSH
51377: LD_VAR 0 12
51381: PPUSH
51382: CALL_OW 351
51386: NOT
51387: PUSH
51388: LD_VAR 0 11
51392: PPUSH
51393: LD_VAR 0 12
51397: PPUSH
51398: CALL_OW 554
51402: NOT
51403: OR
51404: IFFALSE 51438
// begin task := Delete ( task , 1 ) ;
51406: LD_ADDR_VAR 0 14
51410: PUSH
51411: LD_VAR 0 14
51415: PPUSH
51416: LD_INT 1
51418: PPUSH
51419: CALL_OW 3
51423: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
51424: LD_VAR 0 1
51428: PPUSH
51429: LD_VAR 0 14
51433: PPUSH
51434: CALL_OW 446
// end ; until not HasTask ( flame ) ;
51438: LD_VAR 0 1
51442: PPUSH
51443: CALL_OW 314
51447: NOT
51448: IFFALSE 51285
// end ;
51450: LD_VAR 0 5
51454: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
51455: LD_EXP 148
51459: NOT
51460: IFFALSE 51510
51462: GO 51464
51464: DISABLE
// begin initHack := true ;
51465: LD_ADDR_EXP 148
51469: PUSH
51470: LD_INT 1
51472: ST_TO_ADDR
// hackTanks := [ ] ;
51473: LD_ADDR_EXP 149
51477: PUSH
51478: EMPTY
51479: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
51480: LD_ADDR_EXP 150
51484: PUSH
51485: EMPTY
51486: ST_TO_ADDR
// hackLimit := 3 ;
51487: LD_ADDR_EXP 151
51491: PUSH
51492: LD_INT 3
51494: ST_TO_ADDR
// hackDist := 12 ;
51495: LD_ADDR_EXP 152
51499: PUSH
51500: LD_INT 12
51502: ST_TO_ADDR
// hackCounter := [ ] ;
51503: LD_ADDR_EXP 153
51507: PUSH
51508: EMPTY
51509: ST_TO_ADDR
// end ;
51510: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
51511: LD_EXP 148
51515: PUSH
51516: LD_INT 34
51518: PUSH
51519: LD_INT 99
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PPUSH
51526: CALL_OW 69
51530: AND
51531: IFFALSE 51784
51533: GO 51535
51535: DISABLE
51536: LD_INT 0
51538: PPUSH
51539: PPUSH
// begin enable ;
51540: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
51541: LD_ADDR_VAR 0 1
51545: PUSH
51546: LD_INT 34
51548: PUSH
51549: LD_INT 99
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PPUSH
51556: CALL_OW 69
51560: PUSH
51561: FOR_IN
51562: IFFALSE 51782
// begin if not i in hackTanks then
51564: LD_VAR 0 1
51568: PUSH
51569: LD_EXP 149
51573: IN
51574: NOT
51575: IFFALSE 51658
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
51577: LD_ADDR_EXP 149
51581: PUSH
51582: LD_EXP 149
51586: PPUSH
51587: LD_EXP 149
51591: PUSH
51592: LD_INT 1
51594: PLUS
51595: PPUSH
51596: LD_VAR 0 1
51600: PPUSH
51601: CALL_OW 1
51605: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
51606: LD_ADDR_EXP 150
51610: PUSH
51611: LD_EXP 150
51615: PPUSH
51616: LD_EXP 150
51620: PUSH
51621: LD_INT 1
51623: PLUS
51624: PPUSH
51625: EMPTY
51626: PPUSH
51627: CALL_OW 1
51631: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
51632: LD_ADDR_EXP 153
51636: PUSH
51637: LD_EXP 153
51641: PPUSH
51642: LD_EXP 153
51646: PUSH
51647: LD_INT 1
51649: PLUS
51650: PPUSH
51651: EMPTY
51652: PPUSH
51653: CALL_OW 1
51657: ST_TO_ADDR
// end ; if not IsOk ( i ) then
51658: LD_VAR 0 1
51662: PPUSH
51663: CALL_OW 302
51667: NOT
51668: IFFALSE 51681
// begin HackUnlinkAll ( i ) ;
51670: LD_VAR 0 1
51674: PPUSH
51675: CALL 51787 0 1
// continue ;
51679: GO 51561
// end ; HackCheckCapturedStatus ( i ) ;
51681: LD_VAR 0 1
51685: PPUSH
51686: CALL 52230 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
51690: LD_ADDR_VAR 0 2
51694: PUSH
51695: LD_INT 81
51697: PUSH
51698: LD_VAR 0 1
51702: PPUSH
51703: CALL_OW 255
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 33
51714: PUSH
51715: LD_INT 3
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 91
51724: PUSH
51725: LD_VAR 0 1
51729: PUSH
51730: LD_EXP 152
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 50
51742: PUSH
51743: EMPTY
51744: LIST
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: PPUSH
51752: CALL_OW 69
51756: ST_TO_ADDR
// if not tmp then
51757: LD_VAR 0 2
51761: NOT
51762: IFFALSE 51766
// continue ;
51764: GO 51561
// HackLink ( i , tmp ) ;
51766: LD_VAR 0 1
51770: PPUSH
51771: LD_VAR 0 2
51775: PPUSH
51776: CALL 51923 0 2
// end ;
51780: GO 51561
51782: POP
51783: POP
// end ;
51784: PPOPN 2
51786: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
51787: LD_INT 0
51789: PPUSH
51790: PPUSH
51791: PPUSH
// if not hack in hackTanks then
51792: LD_VAR 0 1
51796: PUSH
51797: LD_EXP 149
51801: IN
51802: NOT
51803: IFFALSE 51807
// exit ;
51805: GO 51918
// index := GetElementIndex ( hackTanks , hack ) ;
51807: LD_ADDR_VAR 0 4
51811: PUSH
51812: LD_EXP 149
51816: PPUSH
51817: LD_VAR 0 1
51821: PPUSH
51822: CALL 59360 0 2
51826: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
51827: LD_EXP 150
51831: PUSH
51832: LD_VAR 0 4
51836: ARRAY
51837: IFFALSE 51918
// begin for i in hackTanksCaptured [ index ] do
51839: LD_ADDR_VAR 0 3
51843: PUSH
51844: LD_EXP 150
51848: PUSH
51849: LD_VAR 0 4
51853: ARRAY
51854: PUSH
51855: FOR_IN
51856: IFFALSE 51882
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
51858: LD_VAR 0 3
51862: PUSH
51863: LD_INT 1
51865: ARRAY
51866: PPUSH
51867: LD_VAR 0 3
51871: PUSH
51872: LD_INT 2
51874: ARRAY
51875: PPUSH
51876: CALL_OW 235
51880: GO 51855
51882: POP
51883: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
51884: LD_ADDR_EXP 150
51888: PUSH
51889: LD_EXP 150
51893: PPUSH
51894: LD_VAR 0 4
51898: PPUSH
51899: EMPTY
51900: PPUSH
51901: CALL_OW 1
51905: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
51906: LD_VAR 0 1
51910: PPUSH
51911: LD_INT 0
51913: PPUSH
51914: CALL_OW 505
// end ; end ;
51918: LD_VAR 0 2
51922: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
51923: LD_INT 0
51925: PPUSH
51926: PPUSH
51927: PPUSH
// if not hack in hackTanks or not vehicles then
51928: LD_VAR 0 1
51932: PUSH
51933: LD_EXP 149
51937: IN
51938: NOT
51939: PUSH
51940: LD_VAR 0 2
51944: NOT
51945: OR
51946: IFFALSE 51950
// exit ;
51948: GO 52225
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
51950: LD_ADDR_VAR 0 2
51954: PUSH
51955: LD_VAR 0 1
51959: PPUSH
51960: LD_VAR 0 2
51964: PPUSH
51965: LD_INT 1
51967: PPUSH
51968: LD_INT 1
51970: PPUSH
51971: CALL 60010 0 4
51975: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
51976: LD_ADDR_VAR 0 5
51980: PUSH
51981: LD_EXP 149
51985: PPUSH
51986: LD_VAR 0 1
51990: PPUSH
51991: CALL 59360 0 2
51995: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
51996: LD_EXP 150
52000: PUSH
52001: LD_VAR 0 5
52005: ARRAY
52006: PUSH
52007: LD_EXP 151
52011: LESS
52012: IFFALSE 52201
// begin for i := 1 to vehicles do
52014: LD_ADDR_VAR 0 4
52018: PUSH
52019: DOUBLE
52020: LD_INT 1
52022: DEC
52023: ST_TO_ADDR
52024: LD_VAR 0 2
52028: PUSH
52029: FOR_TO
52030: IFFALSE 52199
// begin if hackTanksCaptured [ index ] = hackLimit then
52032: LD_EXP 150
52036: PUSH
52037: LD_VAR 0 5
52041: ARRAY
52042: PUSH
52043: LD_EXP 151
52047: EQUAL
52048: IFFALSE 52052
// break ;
52050: GO 52199
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
52052: LD_ADDR_EXP 153
52056: PUSH
52057: LD_EXP 153
52061: PPUSH
52062: LD_VAR 0 5
52066: PPUSH
52067: LD_EXP 153
52071: PUSH
52072: LD_VAR 0 5
52076: ARRAY
52077: PUSH
52078: LD_INT 1
52080: PLUS
52081: PPUSH
52082: CALL_OW 1
52086: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
52087: LD_ADDR_EXP 150
52091: PUSH
52092: LD_EXP 150
52096: PPUSH
52097: LD_VAR 0 5
52101: PUSH
52102: LD_EXP 150
52106: PUSH
52107: LD_VAR 0 5
52111: ARRAY
52112: PUSH
52113: LD_INT 1
52115: PLUS
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PPUSH
52121: LD_VAR 0 2
52125: PUSH
52126: LD_VAR 0 4
52130: ARRAY
52131: PUSH
52132: LD_VAR 0 2
52136: PUSH
52137: LD_VAR 0 4
52141: ARRAY
52142: PPUSH
52143: CALL_OW 255
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PPUSH
52152: CALL 59575 0 3
52156: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
52157: LD_VAR 0 2
52161: PUSH
52162: LD_VAR 0 4
52166: ARRAY
52167: PPUSH
52168: LD_VAR 0 1
52172: PPUSH
52173: CALL_OW 255
52177: PPUSH
52178: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
52182: LD_VAR 0 2
52186: PUSH
52187: LD_VAR 0 4
52191: ARRAY
52192: PPUSH
52193: CALL_OW 141
// end ;
52197: GO 52029
52199: POP
52200: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
52201: LD_VAR 0 1
52205: PPUSH
52206: LD_EXP 150
52210: PUSH
52211: LD_VAR 0 5
52215: ARRAY
52216: PUSH
52217: LD_INT 0
52219: PLUS
52220: PPUSH
52221: CALL_OW 505
// end ;
52225: LD_VAR 0 3
52229: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
52230: LD_INT 0
52232: PPUSH
52233: PPUSH
52234: PPUSH
52235: PPUSH
// if not hack in hackTanks then
52236: LD_VAR 0 1
52240: PUSH
52241: LD_EXP 149
52245: IN
52246: NOT
52247: IFFALSE 52251
// exit ;
52249: GO 52491
// index := GetElementIndex ( hackTanks , hack ) ;
52251: LD_ADDR_VAR 0 4
52255: PUSH
52256: LD_EXP 149
52260: PPUSH
52261: LD_VAR 0 1
52265: PPUSH
52266: CALL 59360 0 2
52270: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
52271: LD_ADDR_VAR 0 3
52275: PUSH
52276: DOUBLE
52277: LD_EXP 150
52281: PUSH
52282: LD_VAR 0 4
52286: ARRAY
52287: INC
52288: ST_TO_ADDR
52289: LD_INT 1
52291: PUSH
52292: FOR_DOWNTO
52293: IFFALSE 52465
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
52295: LD_ADDR_VAR 0 5
52299: PUSH
52300: LD_EXP 150
52304: PUSH
52305: LD_VAR 0 4
52309: ARRAY
52310: PUSH
52311: LD_VAR 0 3
52315: ARRAY
52316: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
52317: LD_VAR 0 5
52321: PUSH
52322: LD_INT 1
52324: ARRAY
52325: PPUSH
52326: CALL_OW 302
52330: NOT
52331: PUSH
52332: LD_VAR 0 5
52336: PUSH
52337: LD_INT 1
52339: ARRAY
52340: PPUSH
52341: CALL_OW 255
52345: PUSH
52346: LD_VAR 0 1
52350: PPUSH
52351: CALL_OW 255
52355: NONEQUAL
52356: OR
52357: IFFALSE 52463
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
52359: LD_VAR 0 5
52363: PUSH
52364: LD_INT 1
52366: ARRAY
52367: PPUSH
52368: CALL_OW 305
52372: PUSH
52373: LD_VAR 0 5
52377: PUSH
52378: LD_INT 1
52380: ARRAY
52381: PPUSH
52382: CALL_OW 255
52386: PUSH
52387: LD_VAR 0 1
52391: PPUSH
52392: CALL_OW 255
52396: EQUAL
52397: AND
52398: IFFALSE 52422
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
52400: LD_VAR 0 5
52404: PUSH
52405: LD_INT 1
52407: ARRAY
52408: PPUSH
52409: LD_VAR 0 5
52413: PUSH
52414: LD_INT 2
52416: ARRAY
52417: PPUSH
52418: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
52422: LD_ADDR_EXP 150
52426: PUSH
52427: LD_EXP 150
52431: PPUSH
52432: LD_VAR 0 4
52436: PPUSH
52437: LD_EXP 150
52441: PUSH
52442: LD_VAR 0 4
52446: ARRAY
52447: PPUSH
52448: LD_VAR 0 3
52452: PPUSH
52453: CALL_OW 3
52457: PPUSH
52458: CALL_OW 1
52462: ST_TO_ADDR
// end ; end ;
52463: GO 52292
52465: POP
52466: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
52467: LD_VAR 0 1
52471: PPUSH
52472: LD_EXP 150
52476: PUSH
52477: LD_VAR 0 4
52481: ARRAY
52482: PUSH
52483: LD_INT 0
52485: PLUS
52486: PPUSH
52487: CALL_OW 505
// end ;
52491: LD_VAR 0 2
52495: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
52496: LD_INT 0
52498: PPUSH
52499: PPUSH
52500: PPUSH
52501: PPUSH
// if not hack in hackTanks then
52502: LD_VAR 0 1
52506: PUSH
52507: LD_EXP 149
52511: IN
52512: NOT
52513: IFFALSE 52517
// exit ;
52515: GO 52602
// index := GetElementIndex ( hackTanks , hack ) ;
52517: LD_ADDR_VAR 0 5
52521: PUSH
52522: LD_EXP 149
52526: PPUSH
52527: LD_VAR 0 1
52531: PPUSH
52532: CALL 59360 0 2
52536: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
52537: LD_ADDR_VAR 0 4
52541: PUSH
52542: DOUBLE
52543: LD_INT 1
52545: DEC
52546: ST_TO_ADDR
52547: LD_EXP 150
52551: PUSH
52552: LD_VAR 0 5
52556: ARRAY
52557: PUSH
52558: FOR_TO
52559: IFFALSE 52600
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
52561: LD_EXP 150
52565: PUSH
52566: LD_VAR 0 5
52570: ARRAY
52571: PUSH
52572: LD_VAR 0 4
52576: ARRAY
52577: PUSH
52578: LD_INT 1
52580: ARRAY
52581: PUSH
52582: LD_VAR 0 2
52586: EQUAL
52587: IFFALSE 52598
// KillUnit ( vehicle ) ;
52589: LD_VAR 0 2
52593: PPUSH
52594: CALL_OW 66
52598: GO 52558
52600: POP
52601: POP
// end ;
52602: LD_VAR 0 3
52606: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
52607: LD_EXP 154
52611: NOT
52612: IFFALSE 52647
52614: GO 52616
52616: DISABLE
// begin initMiner := true ;
52617: LD_ADDR_EXP 154
52621: PUSH
52622: LD_INT 1
52624: ST_TO_ADDR
// minersList := [ ] ;
52625: LD_ADDR_EXP 155
52629: PUSH
52630: EMPTY
52631: ST_TO_ADDR
// minerMinesList := [ ] ;
52632: LD_ADDR_EXP 156
52636: PUSH
52637: EMPTY
52638: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
52639: LD_ADDR_EXP 157
52643: PUSH
52644: LD_INT 5
52646: ST_TO_ADDR
// end ;
52647: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
52648: LD_EXP 154
52652: PUSH
52653: LD_INT 34
52655: PUSH
52656: LD_INT 81
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PPUSH
52663: CALL_OW 69
52667: AND
52668: IFFALSE 53129
52670: GO 52672
52672: DISABLE
52673: LD_INT 0
52675: PPUSH
52676: PPUSH
52677: PPUSH
52678: PPUSH
// begin enable ;
52679: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
52680: LD_ADDR_VAR 0 1
52684: PUSH
52685: LD_INT 34
52687: PUSH
52688: LD_INT 81
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PPUSH
52695: CALL_OW 69
52699: PUSH
52700: FOR_IN
52701: IFFALSE 52773
// begin if not i in minersList then
52703: LD_VAR 0 1
52707: PUSH
52708: LD_EXP 155
52712: IN
52713: NOT
52714: IFFALSE 52771
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
52716: LD_ADDR_EXP 155
52720: PUSH
52721: LD_EXP 155
52725: PPUSH
52726: LD_EXP 155
52730: PUSH
52731: LD_INT 1
52733: PLUS
52734: PPUSH
52735: LD_VAR 0 1
52739: PPUSH
52740: CALL_OW 1
52744: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
52745: LD_ADDR_EXP 156
52749: PUSH
52750: LD_EXP 156
52754: PPUSH
52755: LD_EXP 156
52759: PUSH
52760: LD_INT 1
52762: PLUS
52763: PPUSH
52764: EMPTY
52765: PPUSH
52766: CALL_OW 1
52770: ST_TO_ADDR
// end end ;
52771: GO 52700
52773: POP
52774: POP
// for i := minerMinesList downto 1 do
52775: LD_ADDR_VAR 0 1
52779: PUSH
52780: DOUBLE
52781: LD_EXP 156
52785: INC
52786: ST_TO_ADDR
52787: LD_INT 1
52789: PUSH
52790: FOR_DOWNTO
52791: IFFALSE 53127
// begin if IsLive ( minersList [ i ] ) then
52793: LD_EXP 155
52797: PUSH
52798: LD_VAR 0 1
52802: ARRAY
52803: PPUSH
52804: CALL_OW 300
52808: IFFALSE 52836
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
52810: LD_EXP 155
52814: PUSH
52815: LD_VAR 0 1
52819: ARRAY
52820: PPUSH
52821: LD_EXP 156
52825: PUSH
52826: LD_VAR 0 1
52830: ARRAY
52831: PPUSH
52832: CALL_OW 505
// if not minerMinesList [ i ] then
52836: LD_EXP 156
52840: PUSH
52841: LD_VAR 0 1
52845: ARRAY
52846: NOT
52847: IFFALSE 52851
// continue ;
52849: GO 52790
// for j := minerMinesList [ i ] downto 1 do
52851: LD_ADDR_VAR 0 2
52855: PUSH
52856: DOUBLE
52857: LD_EXP 156
52861: PUSH
52862: LD_VAR 0 1
52866: ARRAY
52867: INC
52868: ST_TO_ADDR
52869: LD_INT 1
52871: PUSH
52872: FOR_DOWNTO
52873: IFFALSE 53123
// begin side := GetSide ( minersList [ i ] ) ;
52875: LD_ADDR_VAR 0 3
52879: PUSH
52880: LD_EXP 155
52884: PUSH
52885: LD_VAR 0 1
52889: ARRAY
52890: PPUSH
52891: CALL_OW 255
52895: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
52896: LD_ADDR_VAR 0 4
52900: PUSH
52901: LD_EXP 156
52905: PUSH
52906: LD_VAR 0 1
52910: ARRAY
52911: PUSH
52912: LD_VAR 0 2
52916: ARRAY
52917: PUSH
52918: LD_INT 1
52920: ARRAY
52921: PPUSH
52922: LD_EXP 156
52926: PUSH
52927: LD_VAR 0 1
52931: ARRAY
52932: PUSH
52933: LD_VAR 0 2
52937: ARRAY
52938: PUSH
52939: LD_INT 2
52941: ARRAY
52942: PPUSH
52943: CALL_OW 428
52947: ST_TO_ADDR
// if not tmp then
52948: LD_VAR 0 4
52952: NOT
52953: IFFALSE 52957
// continue ;
52955: GO 52872
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
52957: LD_VAR 0 4
52961: PUSH
52962: LD_INT 81
52964: PUSH
52965: LD_VAR 0 3
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PPUSH
52974: CALL_OW 69
52978: IN
52979: PUSH
52980: LD_EXP 156
52984: PUSH
52985: LD_VAR 0 1
52989: ARRAY
52990: PUSH
52991: LD_VAR 0 2
52995: ARRAY
52996: PUSH
52997: LD_INT 1
52999: ARRAY
53000: PPUSH
53001: LD_EXP 156
53005: PUSH
53006: LD_VAR 0 1
53010: ARRAY
53011: PUSH
53012: LD_VAR 0 2
53016: ARRAY
53017: PUSH
53018: LD_INT 2
53020: ARRAY
53021: PPUSH
53022: CALL_OW 458
53026: AND
53027: IFFALSE 53121
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
53029: LD_EXP 156
53033: PUSH
53034: LD_VAR 0 1
53038: ARRAY
53039: PUSH
53040: LD_VAR 0 2
53044: ARRAY
53045: PUSH
53046: LD_INT 1
53048: ARRAY
53049: PPUSH
53050: LD_EXP 156
53054: PUSH
53055: LD_VAR 0 1
53059: ARRAY
53060: PUSH
53061: LD_VAR 0 2
53065: ARRAY
53066: PUSH
53067: LD_INT 2
53069: ARRAY
53070: PPUSH
53071: LD_VAR 0 3
53075: PPUSH
53076: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
53080: LD_ADDR_EXP 156
53084: PUSH
53085: LD_EXP 156
53089: PPUSH
53090: LD_VAR 0 1
53094: PPUSH
53095: LD_EXP 156
53099: PUSH
53100: LD_VAR 0 1
53104: ARRAY
53105: PPUSH
53106: LD_VAR 0 2
53110: PPUSH
53111: CALL_OW 3
53115: PPUSH
53116: CALL_OW 1
53120: ST_TO_ADDR
// end ; end ;
53121: GO 52872
53123: POP
53124: POP
// end ;
53125: GO 52790
53127: POP
53128: POP
// end ;
53129: PPOPN 4
53131: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
53132: LD_INT 0
53134: PPUSH
53135: PPUSH
// result := false ;
53136: LD_ADDR_VAR 0 4
53140: PUSH
53141: LD_INT 0
53143: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
53144: LD_VAR 0 1
53148: PPUSH
53149: CALL_OW 264
53153: PUSH
53154: LD_INT 81
53156: EQUAL
53157: NOT
53158: IFFALSE 53162
// exit ;
53160: GO 53402
// index := GetElementIndex ( minersList , unit ) ;
53162: LD_ADDR_VAR 0 5
53166: PUSH
53167: LD_EXP 155
53171: PPUSH
53172: LD_VAR 0 1
53176: PPUSH
53177: CALL 59360 0 2
53181: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
53182: LD_EXP 156
53186: PUSH
53187: LD_VAR 0 5
53191: ARRAY
53192: PUSH
53193: LD_EXP 157
53197: GREATEREQUAL
53198: IFFALSE 53202
// exit ;
53200: GO 53402
// ComMoveXY ( unit , x , y ) ;
53202: LD_VAR 0 1
53206: PPUSH
53207: LD_VAR 0 2
53211: PPUSH
53212: LD_VAR 0 3
53216: PPUSH
53217: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
53221: LD_INT 35
53223: PPUSH
53224: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
53228: LD_VAR 0 1
53232: PPUSH
53233: LD_VAR 0 2
53237: PPUSH
53238: LD_VAR 0 3
53242: PPUSH
53243: CALL 91101 0 3
53247: NOT
53248: PUSH
53249: LD_VAR 0 1
53253: PPUSH
53254: CALL_OW 314
53258: AND
53259: IFFALSE 53263
// exit ;
53261: GO 53402
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
53263: LD_VAR 0 2
53267: PPUSH
53268: LD_VAR 0 3
53272: PPUSH
53273: CALL_OW 428
53277: PUSH
53278: LD_VAR 0 1
53282: EQUAL
53283: PUSH
53284: LD_VAR 0 1
53288: PPUSH
53289: CALL_OW 314
53293: NOT
53294: AND
53295: IFFALSE 53221
// PlaySoundXY ( x , y , PlantMine ) ;
53297: LD_VAR 0 2
53301: PPUSH
53302: LD_VAR 0 3
53306: PPUSH
53307: LD_STRING PlantMine
53309: PPUSH
53310: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
53314: LD_VAR 0 2
53318: PPUSH
53319: LD_VAR 0 3
53323: PPUSH
53324: LD_VAR 0 1
53328: PPUSH
53329: CALL_OW 255
53333: PPUSH
53334: LD_INT 0
53336: PPUSH
53337: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
53341: LD_ADDR_EXP 156
53345: PUSH
53346: LD_EXP 156
53350: PPUSH
53351: LD_VAR 0 5
53355: PUSH
53356: LD_EXP 156
53360: PUSH
53361: LD_VAR 0 5
53365: ARRAY
53366: PUSH
53367: LD_INT 1
53369: PLUS
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PPUSH
53375: LD_VAR 0 2
53379: PUSH
53380: LD_VAR 0 3
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PPUSH
53389: CALL 59575 0 3
53393: ST_TO_ADDR
// result := true ;
53394: LD_ADDR_VAR 0 4
53398: PUSH
53399: LD_INT 1
53401: ST_TO_ADDR
// end ;
53402: LD_VAR 0 4
53406: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
53407: LD_INT 0
53409: PPUSH
53410: PPUSH
53411: PPUSH
// if not unit in minersList then
53412: LD_VAR 0 1
53416: PUSH
53417: LD_EXP 155
53421: IN
53422: NOT
53423: IFFALSE 53427
// exit ;
53425: GO 53819
// index := GetElementIndex ( minersList , unit ) ;
53427: LD_ADDR_VAR 0 6
53431: PUSH
53432: LD_EXP 155
53436: PPUSH
53437: LD_VAR 0 1
53441: PPUSH
53442: CALL 59360 0 2
53446: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
53447: LD_ADDR_VAR 0 5
53451: PUSH
53452: DOUBLE
53453: LD_EXP 156
53457: PUSH
53458: LD_VAR 0 6
53462: ARRAY
53463: INC
53464: ST_TO_ADDR
53465: LD_INT 1
53467: PUSH
53468: FOR_DOWNTO
53469: IFFALSE 53630
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
53471: LD_EXP 156
53475: PUSH
53476: LD_VAR 0 6
53480: ARRAY
53481: PUSH
53482: LD_VAR 0 5
53486: ARRAY
53487: PUSH
53488: LD_INT 1
53490: ARRAY
53491: PUSH
53492: LD_VAR 0 2
53496: EQUAL
53497: PUSH
53498: LD_EXP 156
53502: PUSH
53503: LD_VAR 0 6
53507: ARRAY
53508: PUSH
53509: LD_VAR 0 5
53513: ARRAY
53514: PUSH
53515: LD_INT 2
53517: ARRAY
53518: PUSH
53519: LD_VAR 0 3
53523: EQUAL
53524: AND
53525: IFFALSE 53628
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
53527: LD_EXP 156
53531: PUSH
53532: LD_VAR 0 6
53536: ARRAY
53537: PUSH
53538: LD_VAR 0 5
53542: ARRAY
53543: PUSH
53544: LD_INT 1
53546: ARRAY
53547: PPUSH
53548: LD_EXP 156
53552: PUSH
53553: LD_VAR 0 6
53557: ARRAY
53558: PUSH
53559: LD_VAR 0 5
53563: ARRAY
53564: PUSH
53565: LD_INT 2
53567: ARRAY
53568: PPUSH
53569: LD_VAR 0 1
53573: PPUSH
53574: CALL_OW 255
53578: PPUSH
53579: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
53583: LD_ADDR_EXP 156
53587: PUSH
53588: LD_EXP 156
53592: PPUSH
53593: LD_VAR 0 6
53597: PPUSH
53598: LD_EXP 156
53602: PUSH
53603: LD_VAR 0 6
53607: ARRAY
53608: PPUSH
53609: LD_VAR 0 5
53613: PPUSH
53614: CALL_OW 3
53618: PPUSH
53619: CALL_OW 1
53623: ST_TO_ADDR
// exit ;
53624: POP
53625: POP
53626: GO 53819
// end ; end ;
53628: GO 53468
53630: POP
53631: POP
// for i := minerMinesList [ index ] downto 1 do
53632: LD_ADDR_VAR 0 5
53636: PUSH
53637: DOUBLE
53638: LD_EXP 156
53642: PUSH
53643: LD_VAR 0 6
53647: ARRAY
53648: INC
53649: ST_TO_ADDR
53650: LD_INT 1
53652: PUSH
53653: FOR_DOWNTO
53654: IFFALSE 53817
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
53656: LD_EXP 156
53660: PUSH
53661: LD_VAR 0 6
53665: ARRAY
53666: PUSH
53667: LD_VAR 0 5
53671: ARRAY
53672: PUSH
53673: LD_INT 1
53675: ARRAY
53676: PPUSH
53677: LD_EXP 156
53681: PUSH
53682: LD_VAR 0 6
53686: ARRAY
53687: PUSH
53688: LD_VAR 0 5
53692: ARRAY
53693: PUSH
53694: LD_INT 2
53696: ARRAY
53697: PPUSH
53698: LD_VAR 0 2
53702: PPUSH
53703: LD_VAR 0 3
53707: PPUSH
53708: CALL_OW 298
53712: PUSH
53713: LD_INT 6
53715: LESS
53716: IFFALSE 53815
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
53718: LD_EXP 156
53722: PUSH
53723: LD_VAR 0 6
53727: ARRAY
53728: PUSH
53729: LD_VAR 0 5
53733: ARRAY
53734: PUSH
53735: LD_INT 1
53737: ARRAY
53738: PPUSH
53739: LD_EXP 156
53743: PUSH
53744: LD_VAR 0 6
53748: ARRAY
53749: PUSH
53750: LD_VAR 0 5
53754: ARRAY
53755: PUSH
53756: LD_INT 2
53758: ARRAY
53759: PPUSH
53760: LD_VAR 0 1
53764: PPUSH
53765: CALL_OW 255
53769: PPUSH
53770: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
53774: LD_ADDR_EXP 156
53778: PUSH
53779: LD_EXP 156
53783: PPUSH
53784: LD_VAR 0 6
53788: PPUSH
53789: LD_EXP 156
53793: PUSH
53794: LD_VAR 0 6
53798: ARRAY
53799: PPUSH
53800: LD_VAR 0 5
53804: PPUSH
53805: CALL_OW 3
53809: PPUSH
53810: CALL_OW 1
53814: ST_TO_ADDR
// end ; end ;
53815: GO 53653
53817: POP
53818: POP
// end ;
53819: LD_VAR 0 4
53823: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
53824: LD_INT 0
53826: PPUSH
53827: PPUSH
53828: PPUSH
53829: PPUSH
53830: PPUSH
53831: PPUSH
53832: PPUSH
53833: PPUSH
53834: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
53835: LD_VAR 0 1
53839: PPUSH
53840: CALL_OW 264
53844: PUSH
53845: LD_INT 81
53847: EQUAL
53848: NOT
53849: PUSH
53850: LD_VAR 0 1
53854: PUSH
53855: LD_EXP 155
53859: IN
53860: NOT
53861: OR
53862: IFFALSE 53866
// exit ;
53864: GO 54188
// index := GetElementIndex ( minersList , unit ) ;
53866: LD_ADDR_VAR 0 6
53870: PUSH
53871: LD_EXP 155
53875: PPUSH
53876: LD_VAR 0 1
53880: PPUSH
53881: CALL 59360 0 2
53885: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
53886: LD_ADDR_VAR 0 8
53890: PUSH
53891: LD_EXP 157
53895: PUSH
53896: LD_EXP 156
53900: PUSH
53901: LD_VAR 0 6
53905: ARRAY
53906: MINUS
53907: ST_TO_ADDR
// if not minesFreeAmount then
53908: LD_VAR 0 8
53912: NOT
53913: IFFALSE 53917
// exit ;
53915: GO 54188
// tmp := [ ] ;
53917: LD_ADDR_VAR 0 7
53921: PUSH
53922: EMPTY
53923: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
53924: LD_ADDR_VAR 0 5
53928: PUSH
53929: DOUBLE
53930: LD_INT 1
53932: DEC
53933: ST_TO_ADDR
53934: LD_VAR 0 8
53938: PUSH
53939: FOR_TO
53940: IFFALSE 54135
// begin _d := rand ( 0 , 5 ) ;
53942: LD_ADDR_VAR 0 11
53946: PUSH
53947: LD_INT 0
53949: PPUSH
53950: LD_INT 5
53952: PPUSH
53953: CALL_OW 12
53957: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
53958: LD_ADDR_VAR 0 12
53962: PUSH
53963: LD_INT 2
53965: PPUSH
53966: LD_INT 6
53968: PPUSH
53969: CALL_OW 12
53973: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
53974: LD_ADDR_VAR 0 9
53978: PUSH
53979: LD_VAR 0 2
53983: PPUSH
53984: LD_VAR 0 11
53988: PPUSH
53989: LD_VAR 0 12
53993: PPUSH
53994: CALL_OW 272
53998: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
53999: LD_ADDR_VAR 0 10
54003: PUSH
54004: LD_VAR 0 3
54008: PPUSH
54009: LD_VAR 0 11
54013: PPUSH
54014: LD_VAR 0 12
54018: PPUSH
54019: CALL_OW 273
54023: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
54024: LD_VAR 0 9
54028: PPUSH
54029: LD_VAR 0 10
54033: PPUSH
54034: CALL_OW 488
54038: PUSH
54039: LD_VAR 0 9
54043: PUSH
54044: LD_VAR 0 10
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_VAR 0 7
54057: IN
54058: NOT
54059: AND
54060: PUSH
54061: LD_VAR 0 9
54065: PPUSH
54066: LD_VAR 0 10
54070: PPUSH
54071: CALL_OW 458
54075: NOT
54076: AND
54077: IFFALSE 54119
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
54079: LD_ADDR_VAR 0 7
54083: PUSH
54084: LD_VAR 0 7
54088: PPUSH
54089: LD_VAR 0 7
54093: PUSH
54094: LD_INT 1
54096: PLUS
54097: PPUSH
54098: LD_VAR 0 9
54102: PUSH
54103: LD_VAR 0 10
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PPUSH
54112: CALL_OW 1
54116: ST_TO_ADDR
54117: GO 54133
// i := i - 1 ;
54119: LD_ADDR_VAR 0 5
54123: PUSH
54124: LD_VAR 0 5
54128: PUSH
54129: LD_INT 1
54131: MINUS
54132: ST_TO_ADDR
// end ;
54133: GO 53939
54135: POP
54136: POP
// for i in tmp do
54137: LD_ADDR_VAR 0 5
54141: PUSH
54142: LD_VAR 0 7
54146: PUSH
54147: FOR_IN
54148: IFFALSE 54186
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
54150: LD_VAR 0 1
54154: PPUSH
54155: LD_VAR 0 5
54159: PUSH
54160: LD_INT 1
54162: ARRAY
54163: PPUSH
54164: LD_VAR 0 5
54168: PUSH
54169: LD_INT 2
54171: ARRAY
54172: PPUSH
54173: CALL 53132 0 3
54177: NOT
54178: IFFALSE 54184
// exit ;
54180: POP
54181: POP
54182: GO 54188
54184: GO 54147
54186: POP
54187: POP
// end ;
54188: LD_VAR 0 4
54192: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
54193: LD_INT 0
54195: PPUSH
54196: PPUSH
54197: PPUSH
54198: PPUSH
54199: PPUSH
54200: PPUSH
54201: PPUSH
// if not GetClass ( unit ) = class_sniper then
54202: LD_VAR 0 1
54206: PPUSH
54207: CALL_OW 257
54211: PUSH
54212: LD_INT 5
54214: EQUAL
54215: NOT
54216: IFFALSE 54220
// exit ;
54218: GO 54608
// dist := 8 ;
54220: LD_ADDR_VAR 0 5
54224: PUSH
54225: LD_INT 8
54227: ST_TO_ADDR
// viewRange := 12 ;
54228: LD_ADDR_VAR 0 7
54232: PUSH
54233: LD_INT 12
54235: ST_TO_ADDR
// side := GetSide ( unit ) ;
54236: LD_ADDR_VAR 0 6
54240: PUSH
54241: LD_VAR 0 1
54245: PPUSH
54246: CALL_OW 255
54250: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
54251: LD_INT 61
54253: PPUSH
54254: LD_VAR 0 6
54258: PPUSH
54259: CALL_OW 321
54263: PUSH
54264: LD_INT 2
54266: EQUAL
54267: IFFALSE 54277
// viewRange := 16 ;
54269: LD_ADDR_VAR 0 7
54273: PUSH
54274: LD_INT 16
54276: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
54277: LD_VAR 0 1
54281: PPUSH
54282: LD_VAR 0 2
54286: PPUSH
54287: LD_VAR 0 3
54291: PPUSH
54292: CALL_OW 297
54296: PUSH
54297: LD_VAR 0 5
54301: GREATER
54302: IFFALSE 54381
// begin ComMoveXY ( unit , x , y ) ;
54304: LD_VAR 0 1
54308: PPUSH
54309: LD_VAR 0 2
54313: PPUSH
54314: LD_VAR 0 3
54318: PPUSH
54319: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
54323: LD_INT 35
54325: PPUSH
54326: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
54330: LD_VAR 0 1
54334: PPUSH
54335: LD_VAR 0 2
54339: PPUSH
54340: LD_VAR 0 3
54344: PPUSH
54345: CALL 91101 0 3
54349: NOT
54350: IFFALSE 54354
// exit ;
54352: GO 54608
// until GetDistUnitXY ( unit , x , y ) < dist ;
54354: LD_VAR 0 1
54358: PPUSH
54359: LD_VAR 0 2
54363: PPUSH
54364: LD_VAR 0 3
54368: PPUSH
54369: CALL_OW 297
54373: PUSH
54374: LD_VAR 0 5
54378: LESS
54379: IFFALSE 54323
// end ; ComTurnXY ( unit , x , y ) ;
54381: LD_VAR 0 1
54385: PPUSH
54386: LD_VAR 0 2
54390: PPUSH
54391: LD_VAR 0 3
54395: PPUSH
54396: CALL_OW 118
// wait ( 5 ) ;
54400: LD_INT 5
54402: PPUSH
54403: CALL_OW 67
// _d := GetDir ( unit ) ;
54407: LD_ADDR_VAR 0 10
54411: PUSH
54412: LD_VAR 0 1
54416: PPUSH
54417: CALL_OW 254
54421: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
54422: LD_ADDR_VAR 0 8
54426: PUSH
54427: LD_VAR 0 1
54431: PPUSH
54432: CALL_OW 250
54436: PPUSH
54437: LD_VAR 0 10
54441: PPUSH
54442: LD_VAR 0 5
54446: PPUSH
54447: CALL_OW 272
54451: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
54452: LD_ADDR_VAR 0 9
54456: PUSH
54457: LD_VAR 0 1
54461: PPUSH
54462: CALL_OW 251
54466: PPUSH
54467: LD_VAR 0 10
54471: PPUSH
54472: LD_VAR 0 5
54476: PPUSH
54477: CALL_OW 273
54481: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54482: LD_VAR 0 8
54486: PPUSH
54487: LD_VAR 0 9
54491: PPUSH
54492: CALL_OW 488
54496: NOT
54497: IFFALSE 54501
// exit ;
54499: GO 54608
// ComAnimCustom ( unit , 1 ) ;
54501: LD_VAR 0 1
54505: PPUSH
54506: LD_INT 1
54508: PPUSH
54509: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
54513: LD_VAR 0 8
54517: PPUSH
54518: LD_VAR 0 9
54522: PPUSH
54523: LD_VAR 0 6
54527: PPUSH
54528: LD_VAR 0 7
54532: PPUSH
54533: CALL_OW 330
// repeat wait ( 1 ) ;
54537: LD_INT 1
54539: PPUSH
54540: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
54544: LD_VAR 0 1
54548: PPUSH
54549: CALL_OW 316
54553: PUSH
54554: LD_VAR 0 1
54558: PPUSH
54559: CALL_OW 314
54563: OR
54564: PUSH
54565: LD_VAR 0 1
54569: PPUSH
54570: CALL_OW 302
54574: NOT
54575: OR
54576: PUSH
54577: LD_VAR 0 1
54581: PPUSH
54582: CALL_OW 301
54586: OR
54587: IFFALSE 54537
// RemoveSeeing ( _x , _y , side ) ;
54589: LD_VAR 0 8
54593: PPUSH
54594: LD_VAR 0 9
54598: PPUSH
54599: LD_VAR 0 6
54603: PPUSH
54604: CALL_OW 331
// end ; end_of_file
54608: LD_VAR 0 4
54612: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
54613: LD_INT 0
54615: PPUSH
54616: PPUSH
// if exist_mode then
54617: LD_VAR 0 2
54621: IFFALSE 54646
// unit := CreateCharacter ( prefix & ident ) else
54623: LD_ADDR_VAR 0 5
54627: PUSH
54628: LD_VAR 0 3
54632: PUSH
54633: LD_VAR 0 1
54637: STR
54638: PPUSH
54639: CALL_OW 34
54643: ST_TO_ADDR
54644: GO 54661
// unit := NewCharacter ( ident ) ;
54646: LD_ADDR_VAR 0 5
54650: PUSH
54651: LD_VAR 0 1
54655: PPUSH
54656: CALL_OW 25
54660: ST_TO_ADDR
// result := unit ;
54661: LD_ADDR_VAR 0 4
54665: PUSH
54666: LD_VAR 0 5
54670: ST_TO_ADDR
// end ;
54671: LD_VAR 0 4
54675: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
54676: LD_INT 0
54678: PPUSH
54679: PPUSH
// if not side or not nation then
54680: LD_VAR 0 1
54684: NOT
54685: PUSH
54686: LD_VAR 0 2
54690: NOT
54691: OR
54692: IFFALSE 54696
// exit ;
54694: GO 55464
// case nation of nation_american :
54696: LD_VAR 0 2
54700: PUSH
54701: LD_INT 1
54703: DOUBLE
54704: EQUAL
54705: IFTRUE 54709
54707: GO 54923
54709: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
54710: LD_ADDR_VAR 0 4
54714: PUSH
54715: LD_INT 35
54717: PUSH
54718: LD_INT 45
54720: PUSH
54721: LD_INT 46
54723: PUSH
54724: LD_INT 47
54726: PUSH
54727: LD_INT 82
54729: PUSH
54730: LD_INT 83
54732: PUSH
54733: LD_INT 84
54735: PUSH
54736: LD_INT 85
54738: PUSH
54739: LD_INT 86
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: LD_INT 6
54750: PUSH
54751: LD_INT 15
54753: PUSH
54754: LD_INT 16
54756: PUSH
54757: LD_INT 7
54759: PUSH
54760: LD_INT 12
54762: PUSH
54763: LD_INT 13
54765: PUSH
54766: LD_INT 10
54768: PUSH
54769: LD_INT 14
54771: PUSH
54772: LD_INT 20
54774: PUSH
54775: LD_INT 21
54777: PUSH
54778: LD_INT 22
54780: PUSH
54781: LD_INT 25
54783: PUSH
54784: LD_INT 32
54786: PUSH
54787: LD_INT 27
54789: PUSH
54790: LD_INT 36
54792: PUSH
54793: LD_INT 69
54795: PUSH
54796: LD_INT 39
54798: PUSH
54799: LD_INT 34
54801: PUSH
54802: LD_INT 40
54804: PUSH
54805: LD_INT 48
54807: PUSH
54808: LD_INT 49
54810: PUSH
54811: LD_INT 50
54813: PUSH
54814: LD_INT 51
54816: PUSH
54817: LD_INT 52
54819: PUSH
54820: LD_INT 53
54822: PUSH
54823: LD_INT 54
54825: PUSH
54826: LD_INT 55
54828: PUSH
54829: LD_INT 56
54831: PUSH
54832: LD_INT 57
54834: PUSH
54835: LD_INT 58
54837: PUSH
54838: LD_INT 59
54840: PUSH
54841: LD_INT 60
54843: PUSH
54844: LD_INT 61
54846: PUSH
54847: LD_INT 62
54849: PUSH
54850: LD_INT 80
54852: PUSH
54853: LD_INT 82
54855: PUSH
54856: LD_INT 83
54858: PUSH
54859: LD_INT 84
54861: PUSH
54862: LD_INT 85
54864: PUSH
54865: LD_INT 86
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: ST_TO_ADDR
54921: GO 55388
54923: LD_INT 2
54925: DOUBLE
54926: EQUAL
54927: IFTRUE 54931
54929: GO 55157
54931: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
54932: LD_ADDR_VAR 0 4
54936: PUSH
54937: LD_INT 35
54939: PUSH
54940: LD_INT 45
54942: PUSH
54943: LD_INT 46
54945: PUSH
54946: LD_INT 47
54948: PUSH
54949: LD_INT 82
54951: PUSH
54952: LD_INT 83
54954: PUSH
54955: LD_INT 84
54957: PUSH
54958: LD_INT 85
54960: PUSH
54961: LD_INT 87
54963: PUSH
54964: LD_INT 70
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: LD_INT 11
54972: PUSH
54973: LD_INT 3
54975: PUSH
54976: LD_INT 4
54978: PUSH
54979: LD_INT 5
54981: PUSH
54982: LD_INT 6
54984: PUSH
54985: LD_INT 15
54987: PUSH
54988: LD_INT 18
54990: PUSH
54991: LD_INT 7
54993: PUSH
54994: LD_INT 17
54996: PUSH
54997: LD_INT 8
54999: PUSH
55000: LD_INT 20
55002: PUSH
55003: LD_INT 21
55005: PUSH
55006: LD_INT 22
55008: PUSH
55009: LD_INT 72
55011: PUSH
55012: LD_INT 26
55014: PUSH
55015: LD_INT 69
55017: PUSH
55018: LD_INT 39
55020: PUSH
55021: LD_INT 40
55023: PUSH
55024: LD_INT 41
55026: PUSH
55027: LD_INT 42
55029: PUSH
55030: LD_INT 43
55032: PUSH
55033: LD_INT 48
55035: PUSH
55036: LD_INT 49
55038: PUSH
55039: LD_INT 50
55041: PUSH
55042: LD_INT 51
55044: PUSH
55045: LD_INT 52
55047: PUSH
55048: LD_INT 53
55050: PUSH
55051: LD_INT 54
55053: PUSH
55054: LD_INT 55
55056: PUSH
55057: LD_INT 56
55059: PUSH
55060: LD_INT 60
55062: PUSH
55063: LD_INT 61
55065: PUSH
55066: LD_INT 62
55068: PUSH
55069: LD_INT 66
55071: PUSH
55072: LD_INT 67
55074: PUSH
55075: LD_INT 68
55077: PUSH
55078: LD_INT 81
55080: PUSH
55081: LD_INT 82
55083: PUSH
55084: LD_INT 83
55086: PUSH
55087: LD_INT 84
55089: PUSH
55090: LD_INT 85
55092: PUSH
55093: LD_INT 87
55095: PUSH
55096: LD_INT 88
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: ST_TO_ADDR
55155: GO 55388
55157: LD_INT 3
55159: DOUBLE
55160: EQUAL
55161: IFTRUE 55165
55163: GO 55387
55165: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
55166: LD_ADDR_VAR 0 4
55170: PUSH
55171: LD_INT 46
55173: PUSH
55174: LD_INT 47
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: LD_INT 2
55182: PUSH
55183: LD_INT 82
55185: PUSH
55186: LD_INT 83
55188: PUSH
55189: LD_INT 84
55191: PUSH
55192: LD_INT 85
55194: PUSH
55195: LD_INT 86
55197: PUSH
55198: LD_INT 11
55200: PUSH
55201: LD_INT 9
55203: PUSH
55204: LD_INT 20
55206: PUSH
55207: LD_INT 19
55209: PUSH
55210: LD_INT 21
55212: PUSH
55213: LD_INT 24
55215: PUSH
55216: LD_INT 22
55218: PUSH
55219: LD_INT 25
55221: PUSH
55222: LD_INT 28
55224: PUSH
55225: LD_INT 29
55227: PUSH
55228: LD_INT 30
55230: PUSH
55231: LD_INT 31
55233: PUSH
55234: LD_INT 37
55236: PUSH
55237: LD_INT 38
55239: PUSH
55240: LD_INT 32
55242: PUSH
55243: LD_INT 27
55245: PUSH
55246: LD_INT 33
55248: PUSH
55249: LD_INT 69
55251: PUSH
55252: LD_INT 39
55254: PUSH
55255: LD_INT 34
55257: PUSH
55258: LD_INT 40
55260: PUSH
55261: LD_INT 71
55263: PUSH
55264: LD_INT 23
55266: PUSH
55267: LD_INT 44
55269: PUSH
55270: LD_INT 48
55272: PUSH
55273: LD_INT 49
55275: PUSH
55276: LD_INT 50
55278: PUSH
55279: LD_INT 51
55281: PUSH
55282: LD_INT 52
55284: PUSH
55285: LD_INT 53
55287: PUSH
55288: LD_INT 54
55290: PUSH
55291: LD_INT 55
55293: PUSH
55294: LD_INT 56
55296: PUSH
55297: LD_INT 57
55299: PUSH
55300: LD_INT 58
55302: PUSH
55303: LD_INT 59
55305: PUSH
55306: LD_INT 63
55308: PUSH
55309: LD_INT 64
55311: PUSH
55312: LD_INT 65
55314: PUSH
55315: LD_INT 82
55317: PUSH
55318: LD_INT 83
55320: PUSH
55321: LD_INT 84
55323: PUSH
55324: LD_INT 85
55326: PUSH
55327: LD_INT 86
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: ST_TO_ADDR
55385: GO 55388
55387: POP
// if state > - 1 and state < 3 then
55388: LD_VAR 0 3
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: GREATER
55397: PUSH
55398: LD_VAR 0 3
55402: PUSH
55403: LD_INT 3
55405: LESS
55406: AND
55407: IFFALSE 55464
// for i in result do
55409: LD_ADDR_VAR 0 5
55413: PUSH
55414: LD_VAR 0 4
55418: PUSH
55419: FOR_IN
55420: IFFALSE 55462
// if GetTech ( i , side ) <> state then
55422: LD_VAR 0 5
55426: PPUSH
55427: LD_VAR 0 1
55431: PPUSH
55432: CALL_OW 321
55436: PUSH
55437: LD_VAR 0 3
55441: NONEQUAL
55442: IFFALSE 55460
// result := result diff i ;
55444: LD_ADDR_VAR 0 4
55448: PUSH
55449: LD_VAR 0 4
55453: PUSH
55454: LD_VAR 0 5
55458: DIFF
55459: ST_TO_ADDR
55460: GO 55419
55462: POP
55463: POP
// end ;
55464: LD_VAR 0 4
55468: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
55469: LD_INT 0
55471: PPUSH
55472: PPUSH
55473: PPUSH
// result := true ;
55474: LD_ADDR_VAR 0 3
55478: PUSH
55479: LD_INT 1
55481: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
55482: LD_ADDR_VAR 0 5
55486: PUSH
55487: LD_VAR 0 2
55491: PPUSH
55492: CALL_OW 480
55496: ST_TO_ADDR
// if not tmp then
55497: LD_VAR 0 5
55501: NOT
55502: IFFALSE 55506
// exit ;
55504: GO 55555
// for i in tmp do
55506: LD_ADDR_VAR 0 4
55510: PUSH
55511: LD_VAR 0 5
55515: PUSH
55516: FOR_IN
55517: IFFALSE 55553
// if GetTech ( i , side ) <> state_researched then
55519: LD_VAR 0 4
55523: PPUSH
55524: LD_VAR 0 1
55528: PPUSH
55529: CALL_OW 321
55533: PUSH
55534: LD_INT 2
55536: NONEQUAL
55537: IFFALSE 55551
// begin result := false ;
55539: LD_ADDR_VAR 0 3
55543: PUSH
55544: LD_INT 0
55546: ST_TO_ADDR
// exit ;
55547: POP
55548: POP
55549: GO 55555
// end ;
55551: GO 55516
55553: POP
55554: POP
// end ;
55555: LD_VAR 0 3
55559: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
55560: LD_INT 0
55562: PPUSH
55563: PPUSH
55564: PPUSH
55565: PPUSH
55566: PPUSH
55567: PPUSH
55568: PPUSH
55569: PPUSH
55570: PPUSH
55571: PPUSH
55572: PPUSH
55573: PPUSH
55574: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
55575: LD_VAR 0 1
55579: NOT
55580: PUSH
55581: LD_VAR 0 1
55585: PPUSH
55586: CALL_OW 257
55590: PUSH
55591: LD_INT 9
55593: NONEQUAL
55594: OR
55595: IFFALSE 55599
// exit ;
55597: GO 56172
// side := GetSide ( unit ) ;
55599: LD_ADDR_VAR 0 9
55603: PUSH
55604: LD_VAR 0 1
55608: PPUSH
55609: CALL_OW 255
55613: ST_TO_ADDR
// tech_space := tech_spacanom ;
55614: LD_ADDR_VAR 0 12
55618: PUSH
55619: LD_INT 29
55621: ST_TO_ADDR
// tech_time := tech_taurad ;
55622: LD_ADDR_VAR 0 13
55626: PUSH
55627: LD_INT 28
55629: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
55630: LD_ADDR_VAR 0 11
55634: PUSH
55635: LD_VAR 0 1
55639: PPUSH
55640: CALL_OW 310
55644: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
55645: LD_VAR 0 11
55649: PPUSH
55650: CALL_OW 247
55654: PUSH
55655: LD_INT 2
55657: EQUAL
55658: IFFALSE 55662
// exit ;
55660: GO 56172
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
55662: LD_ADDR_VAR 0 8
55666: PUSH
55667: LD_INT 81
55669: PUSH
55670: LD_VAR 0 9
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 3
55681: PUSH
55682: LD_INT 21
55684: PUSH
55685: LD_INT 3
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PPUSH
55700: CALL_OW 69
55704: ST_TO_ADDR
// if not tmp then
55705: LD_VAR 0 8
55709: NOT
55710: IFFALSE 55714
// exit ;
55712: GO 56172
// if in_unit then
55714: LD_VAR 0 11
55718: IFFALSE 55742
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
55720: LD_ADDR_VAR 0 10
55724: PUSH
55725: LD_VAR 0 8
55729: PPUSH
55730: LD_VAR 0 11
55734: PPUSH
55735: CALL_OW 74
55739: ST_TO_ADDR
55740: GO 55762
// enemy := NearestUnitToUnit ( tmp , unit ) ;
55742: LD_ADDR_VAR 0 10
55746: PUSH
55747: LD_VAR 0 8
55751: PPUSH
55752: LD_VAR 0 1
55756: PPUSH
55757: CALL_OW 74
55761: ST_TO_ADDR
// if not enemy then
55762: LD_VAR 0 10
55766: NOT
55767: IFFALSE 55771
// exit ;
55769: GO 56172
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
55771: LD_VAR 0 11
55775: PUSH
55776: LD_VAR 0 11
55780: PPUSH
55781: LD_VAR 0 10
55785: PPUSH
55786: CALL_OW 296
55790: PUSH
55791: LD_INT 13
55793: GREATER
55794: AND
55795: PUSH
55796: LD_VAR 0 1
55800: PPUSH
55801: LD_VAR 0 10
55805: PPUSH
55806: CALL_OW 296
55810: PUSH
55811: LD_INT 12
55813: GREATER
55814: OR
55815: IFFALSE 55819
// exit ;
55817: GO 56172
// missile := [ 1 ] ;
55819: LD_ADDR_VAR 0 14
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: EMPTY
55828: LIST
55829: ST_TO_ADDR
// if Researched ( side , tech_space ) then
55830: LD_VAR 0 9
55834: PPUSH
55835: LD_VAR 0 12
55839: PPUSH
55840: CALL_OW 325
55844: IFFALSE 55873
// missile := Replace ( missile , missile + 1 , 2 ) ;
55846: LD_ADDR_VAR 0 14
55850: PUSH
55851: LD_VAR 0 14
55855: PPUSH
55856: LD_VAR 0 14
55860: PUSH
55861: LD_INT 1
55863: PLUS
55864: PPUSH
55865: LD_INT 2
55867: PPUSH
55868: CALL_OW 1
55872: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
55873: LD_VAR 0 9
55877: PPUSH
55878: LD_VAR 0 13
55882: PPUSH
55883: CALL_OW 325
55887: PUSH
55888: LD_VAR 0 10
55892: PPUSH
55893: CALL_OW 255
55897: PPUSH
55898: LD_VAR 0 13
55902: PPUSH
55903: CALL_OW 325
55907: NOT
55908: AND
55909: IFFALSE 55938
// missile := Replace ( missile , missile + 1 , 3 ) ;
55911: LD_ADDR_VAR 0 14
55915: PUSH
55916: LD_VAR 0 14
55920: PPUSH
55921: LD_VAR 0 14
55925: PUSH
55926: LD_INT 1
55928: PLUS
55929: PPUSH
55930: LD_INT 3
55932: PPUSH
55933: CALL_OW 1
55937: ST_TO_ADDR
// if missile < 2 then
55938: LD_VAR 0 14
55942: PUSH
55943: LD_INT 2
55945: LESS
55946: IFFALSE 55950
// exit ;
55948: GO 56172
// x := GetX ( enemy ) ;
55950: LD_ADDR_VAR 0 4
55954: PUSH
55955: LD_VAR 0 10
55959: PPUSH
55960: CALL_OW 250
55964: ST_TO_ADDR
// y := GetY ( enemy ) ;
55965: LD_ADDR_VAR 0 5
55969: PUSH
55970: LD_VAR 0 10
55974: PPUSH
55975: CALL_OW 251
55979: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
55980: LD_ADDR_VAR 0 6
55984: PUSH
55985: LD_VAR 0 4
55989: PUSH
55990: LD_INT 1
55992: NEG
55993: PPUSH
55994: LD_INT 1
55996: PPUSH
55997: CALL_OW 12
56001: PLUS
56002: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
56003: LD_ADDR_VAR 0 7
56007: PUSH
56008: LD_VAR 0 5
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PPUSH
56017: LD_INT 1
56019: PPUSH
56020: CALL_OW 12
56024: PLUS
56025: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56026: LD_VAR 0 6
56030: PPUSH
56031: LD_VAR 0 7
56035: PPUSH
56036: CALL_OW 488
56040: NOT
56041: IFFALSE 56063
// begin _x := x ;
56043: LD_ADDR_VAR 0 6
56047: PUSH
56048: LD_VAR 0 4
56052: ST_TO_ADDR
// _y := y ;
56053: LD_ADDR_VAR 0 7
56057: PUSH
56058: LD_VAR 0 5
56062: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
56063: LD_ADDR_VAR 0 3
56067: PUSH
56068: LD_INT 1
56070: PPUSH
56071: LD_VAR 0 14
56075: PPUSH
56076: CALL_OW 12
56080: ST_TO_ADDR
// case i of 1 :
56081: LD_VAR 0 3
56085: PUSH
56086: LD_INT 1
56088: DOUBLE
56089: EQUAL
56090: IFTRUE 56094
56092: GO 56111
56094: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
56095: LD_VAR 0 1
56099: PPUSH
56100: LD_VAR 0 10
56104: PPUSH
56105: CALL_OW 115
56109: GO 56172
56111: LD_INT 2
56113: DOUBLE
56114: EQUAL
56115: IFTRUE 56119
56117: GO 56141
56119: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
56120: LD_VAR 0 1
56124: PPUSH
56125: LD_VAR 0 6
56129: PPUSH
56130: LD_VAR 0 7
56134: PPUSH
56135: CALL_OW 153
56139: GO 56172
56141: LD_INT 3
56143: DOUBLE
56144: EQUAL
56145: IFTRUE 56149
56147: GO 56171
56149: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
56150: LD_VAR 0 1
56154: PPUSH
56155: LD_VAR 0 6
56159: PPUSH
56160: LD_VAR 0 7
56164: PPUSH
56165: CALL_OW 154
56169: GO 56172
56171: POP
// end ;
56172: LD_VAR 0 2
56176: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
56177: LD_INT 0
56179: PPUSH
56180: PPUSH
56181: PPUSH
56182: PPUSH
56183: PPUSH
56184: PPUSH
// if not unit or not building then
56185: LD_VAR 0 1
56189: NOT
56190: PUSH
56191: LD_VAR 0 2
56195: NOT
56196: OR
56197: IFFALSE 56201
// exit ;
56199: GO 56359
// x := GetX ( building ) ;
56201: LD_ADDR_VAR 0 5
56205: PUSH
56206: LD_VAR 0 2
56210: PPUSH
56211: CALL_OW 250
56215: ST_TO_ADDR
// y := GetY ( building ) ;
56216: LD_ADDR_VAR 0 6
56220: PUSH
56221: LD_VAR 0 2
56225: PPUSH
56226: CALL_OW 251
56230: ST_TO_ADDR
// for i = 0 to 5 do
56231: LD_ADDR_VAR 0 4
56235: PUSH
56236: DOUBLE
56237: LD_INT 0
56239: DEC
56240: ST_TO_ADDR
56241: LD_INT 5
56243: PUSH
56244: FOR_TO
56245: IFFALSE 56357
// begin _x := ShiftX ( x , i , 3 ) ;
56247: LD_ADDR_VAR 0 7
56251: PUSH
56252: LD_VAR 0 5
56256: PPUSH
56257: LD_VAR 0 4
56261: PPUSH
56262: LD_INT 3
56264: PPUSH
56265: CALL_OW 272
56269: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
56270: LD_ADDR_VAR 0 8
56274: PUSH
56275: LD_VAR 0 6
56279: PPUSH
56280: LD_VAR 0 4
56284: PPUSH
56285: LD_INT 3
56287: PPUSH
56288: CALL_OW 273
56292: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56293: LD_VAR 0 7
56297: PPUSH
56298: LD_VAR 0 8
56302: PPUSH
56303: CALL_OW 488
56307: NOT
56308: IFFALSE 56312
// continue ;
56310: GO 56244
// if HexInfo ( _x , _y ) = 0 then
56312: LD_VAR 0 7
56316: PPUSH
56317: LD_VAR 0 8
56321: PPUSH
56322: CALL_OW 428
56326: PUSH
56327: LD_INT 0
56329: EQUAL
56330: IFFALSE 56355
// begin ComMoveXY ( unit , _x , _y ) ;
56332: LD_VAR 0 1
56336: PPUSH
56337: LD_VAR 0 7
56341: PPUSH
56342: LD_VAR 0 8
56346: PPUSH
56347: CALL_OW 111
// exit ;
56351: POP
56352: POP
56353: GO 56359
// end ; end ;
56355: GO 56244
56357: POP
56358: POP
// end ;
56359: LD_VAR 0 3
56363: RET
// export function ScanBase ( side , base_area ) ; begin
56364: LD_INT 0
56366: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
56367: LD_ADDR_VAR 0 3
56371: PUSH
56372: LD_VAR 0 2
56376: PPUSH
56377: LD_INT 81
56379: PUSH
56380: LD_VAR 0 1
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PPUSH
56389: CALL_OW 70
56393: ST_TO_ADDR
// end ;
56394: LD_VAR 0 3
56398: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
56399: LD_INT 0
56401: PPUSH
56402: PPUSH
56403: PPUSH
56404: PPUSH
// result := false ;
56405: LD_ADDR_VAR 0 2
56409: PUSH
56410: LD_INT 0
56412: ST_TO_ADDR
// side := GetSide ( unit ) ;
56413: LD_ADDR_VAR 0 3
56417: PUSH
56418: LD_VAR 0 1
56422: PPUSH
56423: CALL_OW 255
56427: ST_TO_ADDR
// nat := GetNation ( unit ) ;
56428: LD_ADDR_VAR 0 4
56432: PUSH
56433: LD_VAR 0 1
56437: PPUSH
56438: CALL_OW 248
56442: ST_TO_ADDR
// case nat of 1 :
56443: LD_VAR 0 4
56447: PUSH
56448: LD_INT 1
56450: DOUBLE
56451: EQUAL
56452: IFTRUE 56456
56454: GO 56467
56456: POP
// tech := tech_lassight ; 2 :
56457: LD_ADDR_VAR 0 5
56461: PUSH
56462: LD_INT 12
56464: ST_TO_ADDR
56465: GO 56506
56467: LD_INT 2
56469: DOUBLE
56470: EQUAL
56471: IFTRUE 56475
56473: GO 56486
56475: POP
// tech := tech_mortar ; 3 :
56476: LD_ADDR_VAR 0 5
56480: PUSH
56481: LD_INT 41
56483: ST_TO_ADDR
56484: GO 56506
56486: LD_INT 3
56488: DOUBLE
56489: EQUAL
56490: IFTRUE 56494
56492: GO 56505
56494: POP
// tech := tech_bazooka ; end ;
56495: LD_ADDR_VAR 0 5
56499: PUSH
56500: LD_INT 44
56502: ST_TO_ADDR
56503: GO 56506
56505: POP
// if Researched ( side , tech ) then
56506: LD_VAR 0 3
56510: PPUSH
56511: LD_VAR 0 5
56515: PPUSH
56516: CALL_OW 325
56520: IFFALSE 56547
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
56522: LD_ADDR_VAR 0 2
56526: PUSH
56527: LD_INT 5
56529: PUSH
56530: LD_INT 8
56532: PUSH
56533: LD_INT 9
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: LIST
56540: PUSH
56541: LD_VAR 0 4
56545: ARRAY
56546: ST_TO_ADDR
// end ;
56547: LD_VAR 0 2
56551: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
56552: LD_INT 0
56554: PPUSH
56555: PPUSH
56556: PPUSH
// if not mines then
56557: LD_VAR 0 2
56561: NOT
56562: IFFALSE 56566
// exit ;
56564: GO 56710
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
56566: LD_ADDR_VAR 0 5
56570: PUSH
56571: LD_INT 81
56573: PUSH
56574: LD_VAR 0 1
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 3
56585: PUSH
56586: LD_INT 21
56588: PUSH
56589: LD_INT 3
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PPUSH
56604: CALL_OW 69
56608: ST_TO_ADDR
// for i in mines do
56609: LD_ADDR_VAR 0 4
56613: PUSH
56614: LD_VAR 0 2
56618: PUSH
56619: FOR_IN
56620: IFFALSE 56708
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
56622: LD_VAR 0 4
56626: PUSH
56627: LD_INT 1
56629: ARRAY
56630: PPUSH
56631: LD_VAR 0 4
56635: PUSH
56636: LD_INT 2
56638: ARRAY
56639: PPUSH
56640: CALL_OW 458
56644: NOT
56645: IFFALSE 56649
// continue ;
56647: GO 56619
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
56649: LD_VAR 0 4
56653: PUSH
56654: LD_INT 1
56656: ARRAY
56657: PPUSH
56658: LD_VAR 0 4
56662: PUSH
56663: LD_INT 2
56665: ARRAY
56666: PPUSH
56667: CALL_OW 428
56671: PUSH
56672: LD_VAR 0 5
56676: IN
56677: IFFALSE 56706
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
56679: LD_VAR 0 4
56683: PUSH
56684: LD_INT 1
56686: ARRAY
56687: PPUSH
56688: LD_VAR 0 4
56692: PUSH
56693: LD_INT 2
56695: ARRAY
56696: PPUSH
56697: LD_VAR 0 1
56701: PPUSH
56702: CALL_OW 456
// end ;
56706: GO 56619
56708: POP
56709: POP
// end ;
56710: LD_VAR 0 3
56714: RET
// export function Count ( array ) ; begin
56715: LD_INT 0
56717: PPUSH
// result := array + 0 ;
56718: LD_ADDR_VAR 0 2
56722: PUSH
56723: LD_VAR 0 1
56727: PUSH
56728: LD_INT 0
56730: PLUS
56731: ST_TO_ADDR
// end ;
56732: LD_VAR 0 2
56736: RET
// export function IsEmpty ( building ) ; begin
56737: LD_INT 0
56739: PPUSH
// if not building then
56740: LD_VAR 0 1
56744: NOT
56745: IFFALSE 56749
// exit ;
56747: GO 56792
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
56749: LD_ADDR_VAR 0 2
56753: PUSH
56754: LD_VAR 0 1
56758: PUSH
56759: LD_INT 22
56761: PUSH
56762: LD_VAR 0 1
56766: PPUSH
56767: CALL_OW 255
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 58
56778: PUSH
56779: EMPTY
56780: LIST
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PPUSH
56786: CALL_OW 69
56790: IN
56791: ST_TO_ADDR
// end ;
56792: LD_VAR 0 2
56796: RET
// export function IsNotFull ( building ) ; var places ; begin
56797: LD_INT 0
56799: PPUSH
56800: PPUSH
// if not building then
56801: LD_VAR 0 1
56805: NOT
56806: IFFALSE 56810
// exit ;
56808: GO 56838
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
56810: LD_ADDR_VAR 0 2
56814: PUSH
56815: LD_VAR 0 1
56819: PPUSH
56820: LD_INT 3
56822: PUSH
56823: LD_INT 62
56825: PUSH
56826: EMPTY
56827: LIST
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PPUSH
56833: CALL_OW 72
56837: ST_TO_ADDR
// end ;
56838: LD_VAR 0 2
56842: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
56843: LD_INT 0
56845: PPUSH
56846: PPUSH
56847: PPUSH
56848: PPUSH
// tmp := [ ] ;
56849: LD_ADDR_VAR 0 3
56853: PUSH
56854: EMPTY
56855: ST_TO_ADDR
// list := [ ] ;
56856: LD_ADDR_VAR 0 5
56860: PUSH
56861: EMPTY
56862: ST_TO_ADDR
// for i = 16 to 25 do
56863: LD_ADDR_VAR 0 4
56867: PUSH
56868: DOUBLE
56869: LD_INT 16
56871: DEC
56872: ST_TO_ADDR
56873: LD_INT 25
56875: PUSH
56876: FOR_TO
56877: IFFALSE 56950
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
56879: LD_ADDR_VAR 0 3
56883: PUSH
56884: LD_VAR 0 3
56888: PUSH
56889: LD_INT 22
56891: PUSH
56892: LD_VAR 0 1
56896: PPUSH
56897: CALL_OW 255
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 91
56908: PUSH
56909: LD_VAR 0 1
56913: PUSH
56914: LD_INT 6
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 30
56924: PUSH
56925: LD_VAR 0 4
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: LIST
56938: PUSH
56939: EMPTY
56940: LIST
56941: PPUSH
56942: CALL_OW 69
56946: ADD
56947: ST_TO_ADDR
56948: GO 56876
56950: POP
56951: POP
// for i = 1 to tmp do
56952: LD_ADDR_VAR 0 4
56956: PUSH
56957: DOUBLE
56958: LD_INT 1
56960: DEC
56961: ST_TO_ADDR
56962: LD_VAR 0 3
56966: PUSH
56967: FOR_TO
56968: IFFALSE 57056
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
56970: LD_ADDR_VAR 0 5
56974: PUSH
56975: LD_VAR 0 5
56979: PUSH
56980: LD_VAR 0 3
56984: PUSH
56985: LD_VAR 0 4
56989: ARRAY
56990: PPUSH
56991: CALL_OW 266
56995: PUSH
56996: LD_VAR 0 3
57000: PUSH
57001: LD_VAR 0 4
57005: ARRAY
57006: PPUSH
57007: CALL_OW 250
57011: PUSH
57012: LD_VAR 0 3
57016: PUSH
57017: LD_VAR 0 4
57021: ARRAY
57022: PPUSH
57023: CALL_OW 251
57027: PUSH
57028: LD_VAR 0 3
57032: PUSH
57033: LD_VAR 0 4
57037: ARRAY
57038: PPUSH
57039: CALL_OW 254
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: PUSH
57050: EMPTY
57051: LIST
57052: ADD
57053: ST_TO_ADDR
57054: GO 56967
57056: POP
57057: POP
// result := list ;
57058: LD_ADDR_VAR 0 2
57062: PUSH
57063: LD_VAR 0 5
57067: ST_TO_ADDR
// end ;
57068: LD_VAR 0 2
57072: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
57073: LD_INT 0
57075: PPUSH
57076: PPUSH
57077: PPUSH
57078: PPUSH
57079: PPUSH
57080: PPUSH
57081: PPUSH
// if not factory then
57082: LD_VAR 0 1
57086: NOT
57087: IFFALSE 57091
// exit ;
57089: GO 57684
// if control = control_apeman then
57091: LD_VAR 0 4
57095: PUSH
57096: LD_INT 5
57098: EQUAL
57099: IFFALSE 57208
// begin tmp := UnitsInside ( factory ) ;
57101: LD_ADDR_VAR 0 8
57105: PUSH
57106: LD_VAR 0 1
57110: PPUSH
57111: CALL_OW 313
57115: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
57116: LD_VAR 0 8
57120: PPUSH
57121: LD_INT 25
57123: PUSH
57124: LD_INT 12
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PPUSH
57131: CALL_OW 72
57135: NOT
57136: IFFALSE 57146
// control := control_manual ;
57138: LD_ADDR_VAR 0 4
57142: PUSH
57143: LD_INT 1
57145: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
57146: LD_ADDR_VAR 0 8
57150: PUSH
57151: LD_VAR 0 1
57155: PPUSH
57156: CALL 56843 0 1
57160: ST_TO_ADDR
// if tmp then
57161: LD_VAR 0 8
57165: IFFALSE 57208
// begin for i in tmp do
57167: LD_ADDR_VAR 0 7
57171: PUSH
57172: LD_VAR 0 8
57176: PUSH
57177: FOR_IN
57178: IFFALSE 57206
// if i [ 1 ] = b_ext_radio then
57180: LD_VAR 0 7
57184: PUSH
57185: LD_INT 1
57187: ARRAY
57188: PUSH
57189: LD_INT 22
57191: EQUAL
57192: IFFALSE 57204
// begin control := control_remote ;
57194: LD_ADDR_VAR 0 4
57198: PUSH
57199: LD_INT 2
57201: ST_TO_ADDR
// break ;
57202: GO 57206
// end ;
57204: GO 57177
57206: POP
57207: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
57208: LD_VAR 0 1
57212: PPUSH
57213: LD_VAR 0 2
57217: PPUSH
57218: LD_VAR 0 3
57222: PPUSH
57223: LD_VAR 0 4
57227: PPUSH
57228: LD_VAR 0 5
57232: PPUSH
57233: CALL_OW 448
57237: IFFALSE 57272
// begin result := [ chassis , engine , control , weapon ] ;
57239: LD_ADDR_VAR 0 6
57243: PUSH
57244: LD_VAR 0 2
57248: PUSH
57249: LD_VAR 0 3
57253: PUSH
57254: LD_VAR 0 4
57258: PUSH
57259: LD_VAR 0 5
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: ST_TO_ADDR
// exit ;
57270: GO 57684
// end ; _chassis := AvailableChassisList ( factory ) ;
57272: LD_ADDR_VAR 0 9
57276: PUSH
57277: LD_VAR 0 1
57281: PPUSH
57282: CALL_OW 475
57286: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
57287: LD_ADDR_VAR 0 11
57291: PUSH
57292: LD_VAR 0 1
57296: PPUSH
57297: CALL_OW 476
57301: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
57302: LD_ADDR_VAR 0 12
57306: PUSH
57307: LD_VAR 0 1
57311: PPUSH
57312: CALL_OW 477
57316: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
57317: LD_ADDR_VAR 0 10
57321: PUSH
57322: LD_VAR 0 1
57326: PPUSH
57327: CALL_OW 478
57331: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
57332: LD_VAR 0 9
57336: NOT
57337: PUSH
57338: LD_VAR 0 11
57342: NOT
57343: OR
57344: PUSH
57345: LD_VAR 0 12
57349: NOT
57350: OR
57351: PUSH
57352: LD_VAR 0 10
57356: NOT
57357: OR
57358: IFFALSE 57393
// begin result := [ chassis , engine , control , weapon ] ;
57360: LD_ADDR_VAR 0 6
57364: PUSH
57365: LD_VAR 0 2
57369: PUSH
57370: LD_VAR 0 3
57374: PUSH
57375: LD_VAR 0 4
57379: PUSH
57380: LD_VAR 0 5
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: ST_TO_ADDR
// exit ;
57391: GO 57684
// end ; if not chassis in _chassis then
57393: LD_VAR 0 2
57397: PUSH
57398: LD_VAR 0 9
57402: IN
57403: NOT
57404: IFFALSE 57430
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
57406: LD_ADDR_VAR 0 2
57410: PUSH
57411: LD_VAR 0 9
57415: PUSH
57416: LD_INT 1
57418: PPUSH
57419: LD_VAR 0 9
57423: PPUSH
57424: CALL_OW 12
57428: ARRAY
57429: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
57430: LD_VAR 0 2
57434: PPUSH
57435: LD_VAR 0 3
57439: PPUSH
57440: CALL 57689 0 2
57444: NOT
57445: IFFALSE 57504
// repeat engine := _engine [ 1 ] ;
57447: LD_ADDR_VAR 0 3
57451: PUSH
57452: LD_VAR 0 11
57456: PUSH
57457: LD_INT 1
57459: ARRAY
57460: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
57461: LD_ADDR_VAR 0 11
57465: PUSH
57466: LD_VAR 0 11
57470: PPUSH
57471: LD_INT 1
57473: PPUSH
57474: CALL_OW 3
57478: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
57479: LD_VAR 0 2
57483: PPUSH
57484: LD_VAR 0 3
57488: PPUSH
57489: CALL 57689 0 2
57493: PUSH
57494: LD_VAR 0 11
57498: PUSH
57499: EMPTY
57500: EQUAL
57501: OR
57502: IFFALSE 57447
// if not control in _control then
57504: LD_VAR 0 4
57508: PUSH
57509: LD_VAR 0 12
57513: IN
57514: NOT
57515: IFFALSE 57541
// control := _control [ rand ( 1 , _control ) ] ;
57517: LD_ADDR_VAR 0 4
57521: PUSH
57522: LD_VAR 0 12
57526: PUSH
57527: LD_INT 1
57529: PPUSH
57530: LD_VAR 0 12
57534: PPUSH
57535: CALL_OW 12
57539: ARRAY
57540: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
57541: LD_VAR 0 2
57545: PPUSH
57546: LD_VAR 0 5
57550: PPUSH
57551: CALL 57909 0 2
57555: NOT
57556: IFFALSE 57615
// repeat weapon := _weapon [ 1 ] ;
57558: LD_ADDR_VAR 0 5
57562: PUSH
57563: LD_VAR 0 10
57567: PUSH
57568: LD_INT 1
57570: ARRAY
57571: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
57572: LD_ADDR_VAR 0 10
57576: PUSH
57577: LD_VAR 0 10
57581: PPUSH
57582: LD_INT 1
57584: PPUSH
57585: CALL_OW 3
57589: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
57590: LD_VAR 0 2
57594: PPUSH
57595: LD_VAR 0 5
57599: PPUSH
57600: CALL 57909 0 2
57604: PUSH
57605: LD_VAR 0 10
57609: PUSH
57610: EMPTY
57611: EQUAL
57612: OR
57613: IFFALSE 57558
// result := [ ] ;
57615: LD_ADDR_VAR 0 6
57619: PUSH
57620: EMPTY
57621: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
57622: LD_VAR 0 1
57626: PPUSH
57627: LD_VAR 0 2
57631: PPUSH
57632: LD_VAR 0 3
57636: PPUSH
57637: LD_VAR 0 4
57641: PPUSH
57642: LD_VAR 0 5
57646: PPUSH
57647: CALL_OW 448
57651: IFFALSE 57684
// result := [ chassis , engine , control , weapon ] ;
57653: LD_ADDR_VAR 0 6
57657: PUSH
57658: LD_VAR 0 2
57662: PUSH
57663: LD_VAR 0 3
57667: PUSH
57668: LD_VAR 0 4
57672: PUSH
57673: LD_VAR 0 5
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: ST_TO_ADDR
// end ;
57684: LD_VAR 0 6
57688: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
57689: LD_INT 0
57691: PPUSH
// if not chassis or not engine then
57692: LD_VAR 0 1
57696: NOT
57697: PUSH
57698: LD_VAR 0 2
57702: NOT
57703: OR
57704: IFFALSE 57708
// exit ;
57706: GO 57904
// case engine of engine_solar :
57708: LD_VAR 0 2
57712: PUSH
57713: LD_INT 2
57715: DOUBLE
57716: EQUAL
57717: IFTRUE 57721
57719: GO 57759
57721: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
57722: LD_ADDR_VAR 0 3
57726: PUSH
57727: LD_INT 11
57729: PUSH
57730: LD_INT 12
57732: PUSH
57733: LD_INT 13
57735: PUSH
57736: LD_INT 14
57738: PUSH
57739: LD_INT 1
57741: PUSH
57742: LD_INT 2
57744: PUSH
57745: LD_INT 3
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: ST_TO_ADDR
57757: GO 57888
57759: LD_INT 1
57761: DOUBLE
57762: EQUAL
57763: IFTRUE 57767
57765: GO 57829
57767: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
57768: LD_ADDR_VAR 0 3
57772: PUSH
57773: LD_INT 11
57775: PUSH
57776: LD_INT 12
57778: PUSH
57779: LD_INT 13
57781: PUSH
57782: LD_INT 14
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: LD_INT 2
57790: PUSH
57791: LD_INT 3
57793: PUSH
57794: LD_INT 4
57796: PUSH
57797: LD_INT 5
57799: PUSH
57800: LD_INT 21
57802: PUSH
57803: LD_INT 23
57805: PUSH
57806: LD_INT 22
57808: PUSH
57809: LD_INT 24
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: ST_TO_ADDR
57827: GO 57888
57829: LD_INT 3
57831: DOUBLE
57832: EQUAL
57833: IFTRUE 57837
57835: GO 57887
57837: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
57838: LD_ADDR_VAR 0 3
57842: PUSH
57843: LD_INT 13
57845: PUSH
57846: LD_INT 14
57848: PUSH
57849: LD_INT 2
57851: PUSH
57852: LD_INT 3
57854: PUSH
57855: LD_INT 4
57857: PUSH
57858: LD_INT 5
57860: PUSH
57861: LD_INT 21
57863: PUSH
57864: LD_INT 22
57866: PUSH
57867: LD_INT 23
57869: PUSH
57870: LD_INT 24
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: ST_TO_ADDR
57885: GO 57888
57887: POP
// result := ( chassis in result ) ;
57888: LD_ADDR_VAR 0 3
57892: PUSH
57893: LD_VAR 0 1
57897: PUSH
57898: LD_VAR 0 3
57902: IN
57903: ST_TO_ADDR
// end ;
57904: LD_VAR 0 3
57908: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
57909: LD_INT 0
57911: PPUSH
// if not chassis or not weapon then
57912: LD_VAR 0 1
57916: NOT
57917: PUSH
57918: LD_VAR 0 2
57922: NOT
57923: OR
57924: IFFALSE 57928
// exit ;
57926: GO 58988
// case weapon of us_machine_gun :
57928: LD_VAR 0 2
57932: PUSH
57933: LD_INT 2
57935: DOUBLE
57936: EQUAL
57937: IFTRUE 57941
57939: GO 57971
57941: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
57942: LD_ADDR_VAR 0 3
57946: PUSH
57947: LD_INT 1
57949: PUSH
57950: LD_INT 2
57952: PUSH
57953: LD_INT 3
57955: PUSH
57956: LD_INT 4
57958: PUSH
57959: LD_INT 5
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: ST_TO_ADDR
57969: GO 58972
57971: LD_INT 3
57973: DOUBLE
57974: EQUAL
57975: IFTRUE 57979
57977: GO 58009
57979: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
57980: LD_ADDR_VAR 0 3
57984: PUSH
57985: LD_INT 1
57987: PUSH
57988: LD_INT 2
57990: PUSH
57991: LD_INT 3
57993: PUSH
57994: LD_INT 4
57996: PUSH
57997: LD_INT 5
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: ST_TO_ADDR
58007: GO 58972
58009: LD_INT 11
58011: DOUBLE
58012: EQUAL
58013: IFTRUE 58017
58015: GO 58047
58017: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
58018: LD_ADDR_VAR 0 3
58022: PUSH
58023: LD_INT 1
58025: PUSH
58026: LD_INT 2
58028: PUSH
58029: LD_INT 3
58031: PUSH
58032: LD_INT 4
58034: PUSH
58035: LD_INT 5
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: ST_TO_ADDR
58045: GO 58972
58047: LD_INT 4
58049: DOUBLE
58050: EQUAL
58051: IFTRUE 58055
58053: GO 58081
58055: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
58056: LD_ADDR_VAR 0 3
58060: PUSH
58061: LD_INT 2
58063: PUSH
58064: LD_INT 3
58066: PUSH
58067: LD_INT 4
58069: PUSH
58070: LD_INT 5
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: ST_TO_ADDR
58079: GO 58972
58081: LD_INT 5
58083: DOUBLE
58084: EQUAL
58085: IFTRUE 58089
58087: GO 58115
58089: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
58090: LD_ADDR_VAR 0 3
58094: PUSH
58095: LD_INT 2
58097: PUSH
58098: LD_INT 3
58100: PUSH
58101: LD_INT 4
58103: PUSH
58104: LD_INT 5
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: ST_TO_ADDR
58113: GO 58972
58115: LD_INT 9
58117: DOUBLE
58118: EQUAL
58119: IFTRUE 58123
58121: GO 58149
58123: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
58124: LD_ADDR_VAR 0 3
58128: PUSH
58129: LD_INT 2
58131: PUSH
58132: LD_INT 3
58134: PUSH
58135: LD_INT 4
58137: PUSH
58138: LD_INT 5
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: ST_TO_ADDR
58147: GO 58972
58149: LD_INT 7
58151: DOUBLE
58152: EQUAL
58153: IFTRUE 58157
58155: GO 58183
58157: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
58158: LD_ADDR_VAR 0 3
58162: PUSH
58163: LD_INT 2
58165: PUSH
58166: LD_INT 3
58168: PUSH
58169: LD_INT 4
58171: PUSH
58172: LD_INT 5
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: ST_TO_ADDR
58181: GO 58972
58183: LD_INT 12
58185: DOUBLE
58186: EQUAL
58187: IFTRUE 58191
58189: GO 58217
58191: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
58192: LD_ADDR_VAR 0 3
58196: PUSH
58197: LD_INT 2
58199: PUSH
58200: LD_INT 3
58202: PUSH
58203: LD_INT 4
58205: PUSH
58206: LD_INT 5
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: ST_TO_ADDR
58215: GO 58972
58217: LD_INT 13
58219: DOUBLE
58220: EQUAL
58221: IFTRUE 58225
58223: GO 58251
58225: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
58226: LD_ADDR_VAR 0 3
58230: PUSH
58231: LD_INT 2
58233: PUSH
58234: LD_INT 3
58236: PUSH
58237: LD_INT 4
58239: PUSH
58240: LD_INT 5
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: ST_TO_ADDR
58249: GO 58972
58251: LD_INT 14
58253: DOUBLE
58254: EQUAL
58255: IFTRUE 58259
58257: GO 58277
58259: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
58260: LD_ADDR_VAR 0 3
58264: PUSH
58265: LD_INT 4
58267: PUSH
58268: LD_INT 5
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: ST_TO_ADDR
58275: GO 58972
58277: LD_INT 6
58279: DOUBLE
58280: EQUAL
58281: IFTRUE 58285
58283: GO 58303
58285: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
58286: LD_ADDR_VAR 0 3
58290: PUSH
58291: LD_INT 4
58293: PUSH
58294: LD_INT 5
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: ST_TO_ADDR
58301: GO 58972
58303: LD_INT 10
58305: DOUBLE
58306: EQUAL
58307: IFTRUE 58311
58309: GO 58329
58311: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
58312: LD_ADDR_VAR 0 3
58316: PUSH
58317: LD_INT 4
58319: PUSH
58320: LD_INT 5
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: ST_TO_ADDR
58327: GO 58972
58329: LD_INT 22
58331: DOUBLE
58332: EQUAL
58333: IFTRUE 58337
58335: GO 58363
58337: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
58338: LD_ADDR_VAR 0 3
58342: PUSH
58343: LD_INT 11
58345: PUSH
58346: LD_INT 12
58348: PUSH
58349: LD_INT 13
58351: PUSH
58352: LD_INT 14
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: ST_TO_ADDR
58361: GO 58972
58363: LD_INT 23
58365: DOUBLE
58366: EQUAL
58367: IFTRUE 58371
58369: GO 58397
58371: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
58372: LD_ADDR_VAR 0 3
58376: PUSH
58377: LD_INT 11
58379: PUSH
58380: LD_INT 12
58382: PUSH
58383: LD_INT 13
58385: PUSH
58386: LD_INT 14
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: ST_TO_ADDR
58395: GO 58972
58397: LD_INT 24
58399: DOUBLE
58400: EQUAL
58401: IFTRUE 58405
58403: GO 58431
58405: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
58406: LD_ADDR_VAR 0 3
58410: PUSH
58411: LD_INT 11
58413: PUSH
58414: LD_INT 12
58416: PUSH
58417: LD_INT 13
58419: PUSH
58420: LD_INT 14
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: ST_TO_ADDR
58429: GO 58972
58431: LD_INT 30
58433: DOUBLE
58434: EQUAL
58435: IFTRUE 58439
58437: GO 58465
58439: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
58440: LD_ADDR_VAR 0 3
58444: PUSH
58445: LD_INT 11
58447: PUSH
58448: LD_INT 12
58450: PUSH
58451: LD_INT 13
58453: PUSH
58454: LD_INT 14
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: ST_TO_ADDR
58463: GO 58972
58465: LD_INT 25
58467: DOUBLE
58468: EQUAL
58469: IFTRUE 58473
58471: GO 58491
58473: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
58474: LD_ADDR_VAR 0 3
58478: PUSH
58479: LD_INT 13
58481: PUSH
58482: LD_INT 14
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: ST_TO_ADDR
58489: GO 58972
58491: LD_INT 27
58493: DOUBLE
58494: EQUAL
58495: IFTRUE 58499
58497: GO 58517
58499: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
58500: LD_ADDR_VAR 0 3
58504: PUSH
58505: LD_INT 13
58507: PUSH
58508: LD_INT 14
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: ST_TO_ADDR
58515: GO 58972
58517: LD_INT 92
58519: DOUBLE
58520: EQUAL
58521: IFTRUE 58525
58523: GO 58551
58525: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
58526: LD_ADDR_VAR 0 3
58530: PUSH
58531: LD_INT 11
58533: PUSH
58534: LD_INT 12
58536: PUSH
58537: LD_INT 13
58539: PUSH
58540: LD_INT 14
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: ST_TO_ADDR
58549: GO 58972
58551: LD_INT 28
58553: DOUBLE
58554: EQUAL
58555: IFTRUE 58559
58557: GO 58577
58559: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
58560: LD_ADDR_VAR 0 3
58564: PUSH
58565: LD_INT 13
58567: PUSH
58568: LD_INT 14
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: ST_TO_ADDR
58575: GO 58972
58577: LD_INT 29
58579: DOUBLE
58580: EQUAL
58581: IFTRUE 58585
58583: GO 58603
58585: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
58586: LD_ADDR_VAR 0 3
58590: PUSH
58591: LD_INT 13
58593: PUSH
58594: LD_INT 14
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: ST_TO_ADDR
58601: GO 58972
58603: LD_INT 31
58605: DOUBLE
58606: EQUAL
58607: IFTRUE 58611
58609: GO 58629
58611: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
58612: LD_ADDR_VAR 0 3
58616: PUSH
58617: LD_INT 13
58619: PUSH
58620: LD_INT 14
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: ST_TO_ADDR
58627: GO 58972
58629: LD_INT 26
58631: DOUBLE
58632: EQUAL
58633: IFTRUE 58637
58635: GO 58655
58637: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
58638: LD_ADDR_VAR 0 3
58642: PUSH
58643: LD_INT 13
58645: PUSH
58646: LD_INT 14
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: ST_TO_ADDR
58653: GO 58972
58655: LD_INT 42
58657: DOUBLE
58658: EQUAL
58659: IFTRUE 58663
58661: GO 58689
58663: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
58664: LD_ADDR_VAR 0 3
58668: PUSH
58669: LD_INT 21
58671: PUSH
58672: LD_INT 22
58674: PUSH
58675: LD_INT 23
58677: PUSH
58678: LD_INT 24
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: ST_TO_ADDR
58687: GO 58972
58689: LD_INT 43
58691: DOUBLE
58692: EQUAL
58693: IFTRUE 58697
58695: GO 58723
58697: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
58698: LD_ADDR_VAR 0 3
58702: PUSH
58703: LD_INT 21
58705: PUSH
58706: LD_INT 22
58708: PUSH
58709: LD_INT 23
58711: PUSH
58712: LD_INT 24
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: ST_TO_ADDR
58721: GO 58972
58723: LD_INT 44
58725: DOUBLE
58726: EQUAL
58727: IFTRUE 58731
58729: GO 58757
58731: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
58732: LD_ADDR_VAR 0 3
58736: PUSH
58737: LD_INT 21
58739: PUSH
58740: LD_INT 22
58742: PUSH
58743: LD_INT 23
58745: PUSH
58746: LD_INT 24
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: ST_TO_ADDR
58755: GO 58972
58757: LD_INT 45
58759: DOUBLE
58760: EQUAL
58761: IFTRUE 58765
58763: GO 58791
58765: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
58766: LD_ADDR_VAR 0 3
58770: PUSH
58771: LD_INT 21
58773: PUSH
58774: LD_INT 22
58776: PUSH
58777: LD_INT 23
58779: PUSH
58780: LD_INT 24
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: ST_TO_ADDR
58789: GO 58972
58791: LD_INT 49
58793: DOUBLE
58794: EQUAL
58795: IFTRUE 58799
58797: GO 58825
58799: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
58800: LD_ADDR_VAR 0 3
58804: PUSH
58805: LD_INT 21
58807: PUSH
58808: LD_INT 22
58810: PUSH
58811: LD_INT 23
58813: PUSH
58814: LD_INT 24
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: ST_TO_ADDR
58823: GO 58972
58825: LD_INT 51
58827: DOUBLE
58828: EQUAL
58829: IFTRUE 58833
58831: GO 58859
58833: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
58834: LD_ADDR_VAR 0 3
58838: PUSH
58839: LD_INT 21
58841: PUSH
58842: LD_INT 22
58844: PUSH
58845: LD_INT 23
58847: PUSH
58848: LD_INT 24
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: ST_TO_ADDR
58857: GO 58972
58859: LD_INT 52
58861: DOUBLE
58862: EQUAL
58863: IFTRUE 58867
58865: GO 58893
58867: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
58868: LD_ADDR_VAR 0 3
58872: PUSH
58873: LD_INT 21
58875: PUSH
58876: LD_INT 22
58878: PUSH
58879: LD_INT 23
58881: PUSH
58882: LD_INT 24
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: ST_TO_ADDR
58891: GO 58972
58893: LD_INT 53
58895: DOUBLE
58896: EQUAL
58897: IFTRUE 58901
58899: GO 58919
58901: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
58902: LD_ADDR_VAR 0 3
58906: PUSH
58907: LD_INT 23
58909: PUSH
58910: LD_INT 24
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: ST_TO_ADDR
58917: GO 58972
58919: LD_INT 46
58921: DOUBLE
58922: EQUAL
58923: IFTRUE 58927
58925: GO 58945
58927: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
58928: LD_ADDR_VAR 0 3
58932: PUSH
58933: LD_INT 23
58935: PUSH
58936: LD_INT 24
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: ST_TO_ADDR
58943: GO 58972
58945: LD_INT 47
58947: DOUBLE
58948: EQUAL
58949: IFTRUE 58953
58951: GO 58971
58953: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
58954: LD_ADDR_VAR 0 3
58958: PUSH
58959: LD_INT 23
58961: PUSH
58962: LD_INT 24
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: ST_TO_ADDR
58969: GO 58972
58971: POP
// result := ( chassis in result ) ;
58972: LD_ADDR_VAR 0 3
58976: PUSH
58977: LD_VAR 0 1
58981: PUSH
58982: LD_VAR 0 3
58986: IN
58987: ST_TO_ADDR
// end ;
58988: LD_VAR 0 3
58992: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
58993: LD_INT 0
58995: PPUSH
58996: PPUSH
58997: PPUSH
58998: PPUSH
58999: PPUSH
59000: PPUSH
59001: PPUSH
// result := array ;
59002: LD_ADDR_VAR 0 5
59006: PUSH
59007: LD_VAR 0 1
59011: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
59012: LD_VAR 0 1
59016: NOT
59017: PUSH
59018: LD_VAR 0 2
59022: NOT
59023: OR
59024: PUSH
59025: LD_VAR 0 3
59029: NOT
59030: OR
59031: PUSH
59032: LD_VAR 0 2
59036: PUSH
59037: LD_VAR 0 1
59041: GREATER
59042: OR
59043: PUSH
59044: LD_VAR 0 3
59048: PUSH
59049: LD_VAR 0 1
59053: GREATER
59054: OR
59055: IFFALSE 59059
// exit ;
59057: GO 59355
// if direction then
59059: LD_VAR 0 4
59063: IFFALSE 59127
// begin d := 1 ;
59065: LD_ADDR_VAR 0 9
59069: PUSH
59070: LD_INT 1
59072: ST_TO_ADDR
// if i_from > i_to then
59073: LD_VAR 0 2
59077: PUSH
59078: LD_VAR 0 3
59082: GREATER
59083: IFFALSE 59109
// length := ( array - i_from ) + i_to else
59085: LD_ADDR_VAR 0 11
59089: PUSH
59090: LD_VAR 0 1
59094: PUSH
59095: LD_VAR 0 2
59099: MINUS
59100: PUSH
59101: LD_VAR 0 3
59105: PLUS
59106: ST_TO_ADDR
59107: GO 59125
// length := i_to - i_from ;
59109: LD_ADDR_VAR 0 11
59113: PUSH
59114: LD_VAR 0 3
59118: PUSH
59119: LD_VAR 0 2
59123: MINUS
59124: ST_TO_ADDR
// end else
59125: GO 59188
// begin d := - 1 ;
59127: LD_ADDR_VAR 0 9
59131: PUSH
59132: LD_INT 1
59134: NEG
59135: ST_TO_ADDR
// if i_from > i_to then
59136: LD_VAR 0 2
59140: PUSH
59141: LD_VAR 0 3
59145: GREATER
59146: IFFALSE 59166
// length := i_from - i_to else
59148: LD_ADDR_VAR 0 11
59152: PUSH
59153: LD_VAR 0 2
59157: PUSH
59158: LD_VAR 0 3
59162: MINUS
59163: ST_TO_ADDR
59164: GO 59188
// length := ( array - i_to ) + i_from ;
59166: LD_ADDR_VAR 0 11
59170: PUSH
59171: LD_VAR 0 1
59175: PUSH
59176: LD_VAR 0 3
59180: MINUS
59181: PUSH
59182: LD_VAR 0 2
59186: PLUS
59187: ST_TO_ADDR
// end ; if not length then
59188: LD_VAR 0 11
59192: NOT
59193: IFFALSE 59197
// exit ;
59195: GO 59355
// tmp := array ;
59197: LD_ADDR_VAR 0 10
59201: PUSH
59202: LD_VAR 0 1
59206: ST_TO_ADDR
// for i = 1 to length do
59207: LD_ADDR_VAR 0 6
59211: PUSH
59212: DOUBLE
59213: LD_INT 1
59215: DEC
59216: ST_TO_ADDR
59217: LD_VAR 0 11
59221: PUSH
59222: FOR_TO
59223: IFFALSE 59343
// begin for j = 1 to array do
59225: LD_ADDR_VAR 0 7
59229: PUSH
59230: DOUBLE
59231: LD_INT 1
59233: DEC
59234: ST_TO_ADDR
59235: LD_VAR 0 1
59239: PUSH
59240: FOR_TO
59241: IFFALSE 59329
// begin k := j + d ;
59243: LD_ADDR_VAR 0 8
59247: PUSH
59248: LD_VAR 0 7
59252: PUSH
59253: LD_VAR 0 9
59257: PLUS
59258: ST_TO_ADDR
// if k > array then
59259: LD_VAR 0 8
59263: PUSH
59264: LD_VAR 0 1
59268: GREATER
59269: IFFALSE 59279
// k := 1 ;
59271: LD_ADDR_VAR 0 8
59275: PUSH
59276: LD_INT 1
59278: ST_TO_ADDR
// if not k then
59279: LD_VAR 0 8
59283: NOT
59284: IFFALSE 59296
// k := array ;
59286: LD_ADDR_VAR 0 8
59290: PUSH
59291: LD_VAR 0 1
59295: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
59296: LD_ADDR_VAR 0 10
59300: PUSH
59301: LD_VAR 0 10
59305: PPUSH
59306: LD_VAR 0 8
59310: PPUSH
59311: LD_VAR 0 1
59315: PUSH
59316: LD_VAR 0 7
59320: ARRAY
59321: PPUSH
59322: CALL_OW 1
59326: ST_TO_ADDR
// end ;
59327: GO 59240
59329: POP
59330: POP
// array := tmp ;
59331: LD_ADDR_VAR 0 1
59335: PUSH
59336: LD_VAR 0 10
59340: ST_TO_ADDR
// end ;
59341: GO 59222
59343: POP
59344: POP
// result := array ;
59345: LD_ADDR_VAR 0 5
59349: PUSH
59350: LD_VAR 0 1
59354: ST_TO_ADDR
// end ;
59355: LD_VAR 0 5
59359: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
59360: LD_INT 0
59362: PPUSH
59363: PPUSH
// result := 0 ;
59364: LD_ADDR_VAR 0 3
59368: PUSH
59369: LD_INT 0
59371: ST_TO_ADDR
// if not array or not value in array then
59372: LD_VAR 0 1
59376: NOT
59377: PUSH
59378: LD_VAR 0 2
59382: PUSH
59383: LD_VAR 0 1
59387: IN
59388: NOT
59389: OR
59390: IFFALSE 59394
// exit ;
59392: GO 59448
// for i = 1 to array do
59394: LD_ADDR_VAR 0 4
59398: PUSH
59399: DOUBLE
59400: LD_INT 1
59402: DEC
59403: ST_TO_ADDR
59404: LD_VAR 0 1
59408: PUSH
59409: FOR_TO
59410: IFFALSE 59446
// if value = array [ i ] then
59412: LD_VAR 0 2
59416: PUSH
59417: LD_VAR 0 1
59421: PUSH
59422: LD_VAR 0 4
59426: ARRAY
59427: EQUAL
59428: IFFALSE 59444
// begin result := i ;
59430: LD_ADDR_VAR 0 3
59434: PUSH
59435: LD_VAR 0 4
59439: ST_TO_ADDR
// exit ;
59440: POP
59441: POP
59442: GO 59448
// end ;
59444: GO 59409
59446: POP
59447: POP
// end ;
59448: LD_VAR 0 3
59452: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
59453: LD_INT 0
59455: PPUSH
// vc_chassis := chassis ;
59456: LD_ADDR_OWVAR 37
59460: PUSH
59461: LD_VAR 0 1
59465: ST_TO_ADDR
// vc_engine := engine ;
59466: LD_ADDR_OWVAR 39
59470: PUSH
59471: LD_VAR 0 2
59475: ST_TO_ADDR
// vc_control := control ;
59476: LD_ADDR_OWVAR 38
59480: PUSH
59481: LD_VAR 0 3
59485: ST_TO_ADDR
// vc_weapon := weapon ;
59486: LD_ADDR_OWVAR 40
59490: PUSH
59491: LD_VAR 0 4
59495: ST_TO_ADDR
// vc_fuel_battery := fuel ;
59496: LD_ADDR_OWVAR 41
59500: PUSH
59501: LD_VAR 0 5
59505: ST_TO_ADDR
// end ;
59506: LD_VAR 0 6
59510: RET
// export function WantPlant ( unit ) ; var task ; begin
59511: LD_INT 0
59513: PPUSH
59514: PPUSH
// result := false ;
59515: LD_ADDR_VAR 0 2
59519: PUSH
59520: LD_INT 0
59522: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
59523: LD_ADDR_VAR 0 3
59527: PUSH
59528: LD_VAR 0 1
59532: PPUSH
59533: CALL_OW 437
59537: ST_TO_ADDR
// if task then
59538: LD_VAR 0 3
59542: IFFALSE 59570
// if task [ 1 ] [ 1 ] = p then
59544: LD_VAR 0 3
59548: PUSH
59549: LD_INT 1
59551: ARRAY
59552: PUSH
59553: LD_INT 1
59555: ARRAY
59556: PUSH
59557: LD_STRING p
59559: EQUAL
59560: IFFALSE 59570
// result := true ;
59562: LD_ADDR_VAR 0 2
59566: PUSH
59567: LD_INT 1
59569: ST_TO_ADDR
// end ;
59570: LD_VAR 0 2
59574: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
59575: LD_INT 0
59577: PPUSH
59578: PPUSH
59579: PPUSH
59580: PPUSH
// if pos < 1 then
59581: LD_VAR 0 2
59585: PUSH
59586: LD_INT 1
59588: LESS
59589: IFFALSE 59593
// exit ;
59591: GO 59896
// if pos = 1 then
59593: LD_VAR 0 2
59597: PUSH
59598: LD_INT 1
59600: EQUAL
59601: IFFALSE 59634
// result := Replace ( arr , pos [ 1 ] , value ) else
59603: LD_ADDR_VAR 0 4
59607: PUSH
59608: LD_VAR 0 1
59612: PPUSH
59613: LD_VAR 0 2
59617: PUSH
59618: LD_INT 1
59620: ARRAY
59621: PPUSH
59622: LD_VAR 0 3
59626: PPUSH
59627: CALL_OW 1
59631: ST_TO_ADDR
59632: GO 59896
// begin tmp := arr ;
59634: LD_ADDR_VAR 0 6
59638: PUSH
59639: LD_VAR 0 1
59643: ST_TO_ADDR
// s_arr := [ tmp ] ;
59644: LD_ADDR_VAR 0 7
59648: PUSH
59649: LD_VAR 0 6
59653: PUSH
59654: EMPTY
59655: LIST
59656: ST_TO_ADDR
// for i = 1 to pos - 1 do
59657: LD_ADDR_VAR 0 5
59661: PUSH
59662: DOUBLE
59663: LD_INT 1
59665: DEC
59666: ST_TO_ADDR
59667: LD_VAR 0 2
59671: PUSH
59672: LD_INT 1
59674: MINUS
59675: PUSH
59676: FOR_TO
59677: IFFALSE 59722
// begin tmp := tmp [ pos [ i ] ] ;
59679: LD_ADDR_VAR 0 6
59683: PUSH
59684: LD_VAR 0 6
59688: PUSH
59689: LD_VAR 0 2
59693: PUSH
59694: LD_VAR 0 5
59698: ARRAY
59699: ARRAY
59700: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
59701: LD_ADDR_VAR 0 7
59705: PUSH
59706: LD_VAR 0 7
59710: PUSH
59711: LD_VAR 0 6
59715: PUSH
59716: EMPTY
59717: LIST
59718: ADD
59719: ST_TO_ADDR
// end ;
59720: GO 59676
59722: POP
59723: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
59724: LD_ADDR_VAR 0 6
59728: PUSH
59729: LD_VAR 0 6
59733: PPUSH
59734: LD_VAR 0 2
59738: PUSH
59739: LD_VAR 0 2
59743: ARRAY
59744: PPUSH
59745: LD_VAR 0 3
59749: PPUSH
59750: CALL_OW 1
59754: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
59755: LD_ADDR_VAR 0 7
59759: PUSH
59760: LD_VAR 0 7
59764: PPUSH
59765: LD_VAR 0 7
59769: PPUSH
59770: LD_VAR 0 6
59774: PPUSH
59775: CALL_OW 1
59779: ST_TO_ADDR
// for i = s_arr downto 2 do
59780: LD_ADDR_VAR 0 5
59784: PUSH
59785: DOUBLE
59786: LD_VAR 0 7
59790: INC
59791: ST_TO_ADDR
59792: LD_INT 2
59794: PUSH
59795: FOR_DOWNTO
59796: IFFALSE 59880
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
59798: LD_ADDR_VAR 0 6
59802: PUSH
59803: LD_VAR 0 7
59807: PUSH
59808: LD_VAR 0 5
59812: PUSH
59813: LD_INT 1
59815: MINUS
59816: ARRAY
59817: PPUSH
59818: LD_VAR 0 2
59822: PUSH
59823: LD_VAR 0 5
59827: PUSH
59828: LD_INT 1
59830: MINUS
59831: ARRAY
59832: PPUSH
59833: LD_VAR 0 7
59837: PUSH
59838: LD_VAR 0 5
59842: ARRAY
59843: PPUSH
59844: CALL_OW 1
59848: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
59849: LD_ADDR_VAR 0 7
59853: PUSH
59854: LD_VAR 0 7
59858: PPUSH
59859: LD_VAR 0 5
59863: PUSH
59864: LD_INT 1
59866: MINUS
59867: PPUSH
59868: LD_VAR 0 6
59872: PPUSH
59873: CALL_OW 1
59877: ST_TO_ADDR
// end ;
59878: GO 59795
59880: POP
59881: POP
// result := s_arr [ 1 ] ;
59882: LD_ADDR_VAR 0 4
59886: PUSH
59887: LD_VAR 0 7
59891: PUSH
59892: LD_INT 1
59894: ARRAY
59895: ST_TO_ADDR
// end ; end ;
59896: LD_VAR 0 4
59900: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
59901: LD_INT 0
59903: PPUSH
59904: PPUSH
// if not list then
59905: LD_VAR 0 1
59909: NOT
59910: IFFALSE 59914
// exit ;
59912: GO 60005
// i := list [ pos1 ] ;
59914: LD_ADDR_VAR 0 5
59918: PUSH
59919: LD_VAR 0 1
59923: PUSH
59924: LD_VAR 0 2
59928: ARRAY
59929: ST_TO_ADDR
// if not i then
59930: LD_VAR 0 5
59934: NOT
59935: IFFALSE 59939
// exit ;
59937: GO 60005
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
59939: LD_ADDR_VAR 0 1
59943: PUSH
59944: LD_VAR 0 1
59948: PPUSH
59949: LD_VAR 0 2
59953: PPUSH
59954: LD_VAR 0 1
59958: PUSH
59959: LD_VAR 0 3
59963: ARRAY
59964: PPUSH
59965: CALL_OW 1
59969: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
59970: LD_ADDR_VAR 0 1
59974: PUSH
59975: LD_VAR 0 1
59979: PPUSH
59980: LD_VAR 0 3
59984: PPUSH
59985: LD_VAR 0 5
59989: PPUSH
59990: CALL_OW 1
59994: ST_TO_ADDR
// result := list ;
59995: LD_ADDR_VAR 0 4
59999: PUSH
60000: LD_VAR 0 1
60004: ST_TO_ADDR
// end ;
60005: LD_VAR 0 4
60009: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
60010: LD_INT 0
60012: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
60013: LD_ADDR_VAR 0 5
60017: PUSH
60018: LD_VAR 0 1
60022: PPUSH
60023: CALL_OW 250
60027: PPUSH
60028: LD_VAR 0 1
60032: PPUSH
60033: CALL_OW 251
60037: PPUSH
60038: LD_VAR 0 2
60042: PPUSH
60043: LD_VAR 0 3
60047: PPUSH
60048: LD_VAR 0 4
60052: PPUSH
60053: CALL 60431 0 5
60057: ST_TO_ADDR
// end ;
60058: LD_VAR 0 5
60062: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
60063: LD_INT 0
60065: PPUSH
60066: PPUSH
60067: PPUSH
60068: PPUSH
// if not list or not unit then
60069: LD_VAR 0 2
60073: NOT
60074: PUSH
60075: LD_VAR 0 1
60079: NOT
60080: OR
60081: IFFALSE 60085
// exit ;
60083: GO 60426
// result := [ ] ;
60085: LD_ADDR_VAR 0 5
60089: PUSH
60090: EMPTY
60091: ST_TO_ADDR
// for i in list do
60092: LD_ADDR_VAR 0 6
60096: PUSH
60097: LD_VAR 0 2
60101: PUSH
60102: FOR_IN
60103: IFFALSE 60321
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
60105: LD_ADDR_VAR 0 8
60109: PUSH
60110: LD_VAR 0 1
60114: PPUSH
60115: LD_VAR 0 6
60119: PUSH
60120: LD_INT 1
60122: ARRAY
60123: PPUSH
60124: LD_VAR 0 6
60128: PUSH
60129: LD_INT 2
60131: ARRAY
60132: PPUSH
60133: CALL_OW 297
60137: ST_TO_ADDR
// if not Count ( result ) then
60138: LD_VAR 0 5
60142: PPUSH
60143: CALL 56715 0 1
60147: NOT
60148: IFFALSE 60181
// begin result := Join ( result , [ i , tmp ] ) ;
60150: LD_ADDR_VAR 0 5
60154: PUSH
60155: LD_VAR 0 5
60159: PPUSH
60160: LD_VAR 0 6
60164: PUSH
60165: LD_VAR 0 8
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PPUSH
60174: CALL 92304 0 2
60178: ST_TO_ADDR
// continue ;
60179: GO 60102
// end ; if result [ result ] [ 2 ] <= tmp then
60181: LD_VAR 0 5
60185: PUSH
60186: LD_VAR 0 5
60190: ARRAY
60191: PUSH
60192: LD_INT 2
60194: ARRAY
60195: PUSH
60196: LD_VAR 0 8
60200: LESSEQUAL
60201: IFFALSE 60234
// result := Join ( result , [ i , tmp ] ) else
60203: LD_ADDR_VAR 0 5
60207: PUSH
60208: LD_VAR 0 5
60212: PPUSH
60213: LD_VAR 0 6
60217: PUSH
60218: LD_VAR 0 8
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PPUSH
60227: CALL 92304 0 2
60231: ST_TO_ADDR
60232: GO 60319
// begin for j := 1 to Count ( result ) do
60234: LD_ADDR_VAR 0 7
60238: PUSH
60239: DOUBLE
60240: LD_INT 1
60242: DEC
60243: ST_TO_ADDR
60244: LD_VAR 0 5
60248: PPUSH
60249: CALL 56715 0 1
60253: PUSH
60254: FOR_TO
60255: IFFALSE 60317
// begin if tmp < result [ j ] [ 2 ] then
60257: LD_VAR 0 8
60261: PUSH
60262: LD_VAR 0 5
60266: PUSH
60267: LD_VAR 0 7
60271: ARRAY
60272: PUSH
60273: LD_INT 2
60275: ARRAY
60276: LESS
60277: IFFALSE 60315
// begin result := Insert ( result , j , [ i , tmp ] ) ;
60279: LD_ADDR_VAR 0 5
60283: PUSH
60284: LD_VAR 0 5
60288: PPUSH
60289: LD_VAR 0 7
60293: PPUSH
60294: LD_VAR 0 6
60298: PUSH
60299: LD_VAR 0 8
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PPUSH
60308: CALL_OW 2
60312: ST_TO_ADDR
// break ;
60313: GO 60317
// end ; end ;
60315: GO 60254
60317: POP
60318: POP
// end ; end ;
60319: GO 60102
60321: POP
60322: POP
// if result and not asc then
60323: LD_VAR 0 5
60327: PUSH
60328: LD_VAR 0 3
60332: NOT
60333: AND
60334: IFFALSE 60351
// result := ReverseArray ( result ) ;
60336: LD_ADDR_VAR 0 5
60340: PUSH
60341: LD_VAR 0 5
60345: PPUSH
60346: CALL 87591 0 1
60350: ST_TO_ADDR
// tmp := [ ] ;
60351: LD_ADDR_VAR 0 8
60355: PUSH
60356: EMPTY
60357: ST_TO_ADDR
// if mode then
60358: LD_VAR 0 4
60362: IFFALSE 60426
// begin for i := 1 to result do
60364: LD_ADDR_VAR 0 6
60368: PUSH
60369: DOUBLE
60370: LD_INT 1
60372: DEC
60373: ST_TO_ADDR
60374: LD_VAR 0 5
60378: PUSH
60379: FOR_TO
60380: IFFALSE 60414
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
60382: LD_ADDR_VAR 0 8
60386: PUSH
60387: LD_VAR 0 8
60391: PPUSH
60392: LD_VAR 0 5
60396: PUSH
60397: LD_VAR 0 6
60401: ARRAY
60402: PUSH
60403: LD_INT 1
60405: ARRAY
60406: PPUSH
60407: CALL 92304 0 2
60411: ST_TO_ADDR
60412: GO 60379
60414: POP
60415: POP
// result := tmp ;
60416: LD_ADDR_VAR 0 5
60420: PUSH
60421: LD_VAR 0 8
60425: ST_TO_ADDR
// end ; end ;
60426: LD_VAR 0 5
60430: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
60431: LD_INT 0
60433: PPUSH
60434: PPUSH
60435: PPUSH
60436: PPUSH
// if not list then
60437: LD_VAR 0 3
60441: NOT
60442: IFFALSE 60446
// exit ;
60444: GO 60834
// result := [ ] ;
60446: LD_ADDR_VAR 0 6
60450: PUSH
60451: EMPTY
60452: ST_TO_ADDR
// for i in list do
60453: LD_ADDR_VAR 0 7
60457: PUSH
60458: LD_VAR 0 3
60462: PUSH
60463: FOR_IN
60464: IFFALSE 60666
// begin tmp := GetDistUnitXY ( i , x , y ) ;
60466: LD_ADDR_VAR 0 9
60470: PUSH
60471: LD_VAR 0 7
60475: PPUSH
60476: LD_VAR 0 1
60480: PPUSH
60481: LD_VAR 0 2
60485: PPUSH
60486: CALL_OW 297
60490: ST_TO_ADDR
// if not result then
60491: LD_VAR 0 6
60495: NOT
60496: IFFALSE 60522
// result := [ [ i , tmp ] ] else
60498: LD_ADDR_VAR 0 6
60502: PUSH
60503: LD_VAR 0 7
60507: PUSH
60508: LD_VAR 0 9
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: EMPTY
60518: LIST
60519: ST_TO_ADDR
60520: GO 60664
// begin if result [ result ] [ 2 ] < tmp then
60522: LD_VAR 0 6
60526: PUSH
60527: LD_VAR 0 6
60531: ARRAY
60532: PUSH
60533: LD_INT 2
60535: ARRAY
60536: PUSH
60537: LD_VAR 0 9
60541: LESS
60542: IFFALSE 60584
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
60544: LD_ADDR_VAR 0 6
60548: PUSH
60549: LD_VAR 0 6
60553: PPUSH
60554: LD_VAR 0 6
60558: PUSH
60559: LD_INT 1
60561: PLUS
60562: PPUSH
60563: LD_VAR 0 7
60567: PUSH
60568: LD_VAR 0 9
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PPUSH
60577: CALL_OW 2
60581: ST_TO_ADDR
60582: GO 60664
// for j = 1 to result do
60584: LD_ADDR_VAR 0 8
60588: PUSH
60589: DOUBLE
60590: LD_INT 1
60592: DEC
60593: ST_TO_ADDR
60594: LD_VAR 0 6
60598: PUSH
60599: FOR_TO
60600: IFFALSE 60662
// begin if tmp < result [ j ] [ 2 ] then
60602: LD_VAR 0 9
60606: PUSH
60607: LD_VAR 0 6
60611: PUSH
60612: LD_VAR 0 8
60616: ARRAY
60617: PUSH
60618: LD_INT 2
60620: ARRAY
60621: LESS
60622: IFFALSE 60660
// begin result := Insert ( result , j , [ i , tmp ] ) ;
60624: LD_ADDR_VAR 0 6
60628: PUSH
60629: LD_VAR 0 6
60633: PPUSH
60634: LD_VAR 0 8
60638: PPUSH
60639: LD_VAR 0 7
60643: PUSH
60644: LD_VAR 0 9
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PPUSH
60653: CALL_OW 2
60657: ST_TO_ADDR
// break ;
60658: GO 60662
// end ; end ;
60660: GO 60599
60662: POP
60663: POP
// end ; end ;
60664: GO 60463
60666: POP
60667: POP
// if result and not asc then
60668: LD_VAR 0 6
60672: PUSH
60673: LD_VAR 0 4
60677: NOT
60678: AND
60679: IFFALSE 60754
// begin tmp := result ;
60681: LD_ADDR_VAR 0 9
60685: PUSH
60686: LD_VAR 0 6
60690: ST_TO_ADDR
// for i = tmp downto 1 do
60691: LD_ADDR_VAR 0 7
60695: PUSH
60696: DOUBLE
60697: LD_VAR 0 9
60701: INC
60702: ST_TO_ADDR
60703: LD_INT 1
60705: PUSH
60706: FOR_DOWNTO
60707: IFFALSE 60752
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
60709: LD_ADDR_VAR 0 6
60713: PUSH
60714: LD_VAR 0 6
60718: PPUSH
60719: LD_VAR 0 9
60723: PUSH
60724: LD_VAR 0 7
60728: MINUS
60729: PUSH
60730: LD_INT 1
60732: PLUS
60733: PPUSH
60734: LD_VAR 0 9
60738: PUSH
60739: LD_VAR 0 7
60743: ARRAY
60744: PPUSH
60745: CALL_OW 1
60749: ST_TO_ADDR
60750: GO 60706
60752: POP
60753: POP
// end ; tmp := [ ] ;
60754: LD_ADDR_VAR 0 9
60758: PUSH
60759: EMPTY
60760: ST_TO_ADDR
// if mode then
60761: LD_VAR 0 5
60765: IFFALSE 60834
// begin for i = 1 to result do
60767: LD_ADDR_VAR 0 7
60771: PUSH
60772: DOUBLE
60773: LD_INT 1
60775: DEC
60776: ST_TO_ADDR
60777: LD_VAR 0 6
60781: PUSH
60782: FOR_TO
60783: IFFALSE 60822
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
60785: LD_ADDR_VAR 0 9
60789: PUSH
60790: LD_VAR 0 9
60794: PPUSH
60795: LD_VAR 0 7
60799: PPUSH
60800: LD_VAR 0 6
60804: PUSH
60805: LD_VAR 0 7
60809: ARRAY
60810: PUSH
60811: LD_INT 1
60813: ARRAY
60814: PPUSH
60815: CALL_OW 1
60819: ST_TO_ADDR
60820: GO 60782
60822: POP
60823: POP
// result := tmp ;
60824: LD_ADDR_VAR 0 6
60828: PUSH
60829: LD_VAR 0 9
60833: ST_TO_ADDR
// end ; end ;
60834: LD_VAR 0 6
60838: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
60839: LD_INT 0
60841: PPUSH
60842: PPUSH
60843: PPUSH
60844: PPUSH
60845: PPUSH
60846: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
60847: LD_ADDR_VAR 0 5
60851: PUSH
60852: LD_INT 0
60854: PUSH
60855: LD_INT 0
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: EMPTY
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: ST_TO_ADDR
// if not x or not y then
60869: LD_VAR 0 2
60873: NOT
60874: PUSH
60875: LD_VAR 0 3
60879: NOT
60880: OR
60881: IFFALSE 60885
// exit ;
60883: GO 62535
// if not range then
60885: LD_VAR 0 4
60889: NOT
60890: IFFALSE 60900
// range := 10 ;
60892: LD_ADDR_VAR 0 4
60896: PUSH
60897: LD_INT 10
60899: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
60900: LD_ADDR_VAR 0 8
60904: PUSH
60905: LD_INT 81
60907: PUSH
60908: LD_VAR 0 1
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 92
60919: PUSH
60920: LD_VAR 0 2
60924: PUSH
60925: LD_VAR 0 3
60929: PUSH
60930: LD_VAR 0 4
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 3
60943: PUSH
60944: LD_INT 21
60946: PUSH
60947: LD_INT 3
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: LIST
60962: PPUSH
60963: CALL_OW 69
60967: ST_TO_ADDR
// if not tmp then
60968: LD_VAR 0 8
60972: NOT
60973: IFFALSE 60977
// exit ;
60975: GO 62535
// for i in tmp do
60977: LD_ADDR_VAR 0 6
60981: PUSH
60982: LD_VAR 0 8
60986: PUSH
60987: FOR_IN
60988: IFFALSE 62510
// begin points := [ 0 , 0 , 0 ] ;
60990: LD_ADDR_VAR 0 9
60994: PUSH
60995: LD_INT 0
60997: PUSH
60998: LD_INT 0
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: LIST
61008: ST_TO_ADDR
// bpoints := 1 ;
61009: LD_ADDR_VAR 0 10
61013: PUSH
61014: LD_INT 1
61016: ST_TO_ADDR
// case GetType ( i ) of unit_human :
61017: LD_VAR 0 6
61021: PPUSH
61022: CALL_OW 247
61026: PUSH
61027: LD_INT 1
61029: DOUBLE
61030: EQUAL
61031: IFTRUE 61035
61033: GO 61613
61035: POP
// begin if GetClass ( i ) = 1 then
61036: LD_VAR 0 6
61040: PPUSH
61041: CALL_OW 257
61045: PUSH
61046: LD_INT 1
61048: EQUAL
61049: IFFALSE 61070
// points := [ 10 , 5 , 3 ] ;
61051: LD_ADDR_VAR 0 9
61055: PUSH
61056: LD_INT 10
61058: PUSH
61059: LD_INT 5
61061: PUSH
61062: LD_INT 3
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: LIST
61069: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
61070: LD_VAR 0 6
61074: PPUSH
61075: CALL_OW 257
61079: PUSH
61080: LD_INT 2
61082: PUSH
61083: LD_INT 3
61085: PUSH
61086: LD_INT 4
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: LIST
61093: IN
61094: IFFALSE 61115
// points := [ 3 , 2 , 1 ] ;
61096: LD_ADDR_VAR 0 9
61100: PUSH
61101: LD_INT 3
61103: PUSH
61104: LD_INT 2
61106: PUSH
61107: LD_INT 1
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: LIST
61114: ST_TO_ADDR
// if GetClass ( i ) = 5 then
61115: LD_VAR 0 6
61119: PPUSH
61120: CALL_OW 257
61124: PUSH
61125: LD_INT 5
61127: EQUAL
61128: IFFALSE 61149
// points := [ 130 , 5 , 2 ] ;
61130: LD_ADDR_VAR 0 9
61134: PUSH
61135: LD_INT 130
61137: PUSH
61138: LD_INT 5
61140: PUSH
61141: LD_INT 2
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: LIST
61148: ST_TO_ADDR
// if GetClass ( i ) = 8 then
61149: LD_VAR 0 6
61153: PPUSH
61154: CALL_OW 257
61158: PUSH
61159: LD_INT 8
61161: EQUAL
61162: IFFALSE 61183
// points := [ 35 , 35 , 30 ] ;
61164: LD_ADDR_VAR 0 9
61168: PUSH
61169: LD_INT 35
61171: PUSH
61172: LD_INT 35
61174: PUSH
61175: LD_INT 30
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: LIST
61182: ST_TO_ADDR
// if GetClass ( i ) = 9 then
61183: LD_VAR 0 6
61187: PPUSH
61188: CALL_OW 257
61192: PUSH
61193: LD_INT 9
61195: EQUAL
61196: IFFALSE 61217
// points := [ 20 , 55 , 40 ] ;
61198: LD_ADDR_VAR 0 9
61202: PUSH
61203: LD_INT 20
61205: PUSH
61206: LD_INT 55
61208: PUSH
61209: LD_INT 40
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: LIST
61216: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
61217: LD_VAR 0 6
61221: PPUSH
61222: CALL_OW 257
61226: PUSH
61227: LD_INT 12
61229: PUSH
61230: LD_INT 16
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: IN
61237: IFFALSE 61258
// points := [ 5 , 3 , 2 ] ;
61239: LD_ADDR_VAR 0 9
61243: PUSH
61244: LD_INT 5
61246: PUSH
61247: LD_INT 3
61249: PUSH
61250: LD_INT 2
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: LIST
61257: ST_TO_ADDR
// if GetClass ( i ) = 17 then
61258: LD_VAR 0 6
61262: PPUSH
61263: CALL_OW 257
61267: PUSH
61268: LD_INT 17
61270: EQUAL
61271: IFFALSE 61292
// points := [ 100 , 50 , 75 ] ;
61273: LD_ADDR_VAR 0 9
61277: PUSH
61278: LD_INT 100
61280: PUSH
61281: LD_INT 50
61283: PUSH
61284: LD_INT 75
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: LIST
61291: ST_TO_ADDR
// if GetClass ( i ) = 15 then
61292: LD_VAR 0 6
61296: PPUSH
61297: CALL_OW 257
61301: PUSH
61302: LD_INT 15
61304: EQUAL
61305: IFFALSE 61326
// points := [ 10 , 5 , 3 ] ;
61307: LD_ADDR_VAR 0 9
61311: PUSH
61312: LD_INT 10
61314: PUSH
61315: LD_INT 5
61317: PUSH
61318: LD_INT 3
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: LIST
61325: ST_TO_ADDR
// if GetClass ( i ) = 14 then
61326: LD_VAR 0 6
61330: PPUSH
61331: CALL_OW 257
61335: PUSH
61336: LD_INT 14
61338: EQUAL
61339: IFFALSE 61360
// points := [ 10 , 0 , 0 ] ;
61341: LD_ADDR_VAR 0 9
61345: PUSH
61346: LD_INT 10
61348: PUSH
61349: LD_INT 0
61351: PUSH
61352: LD_INT 0
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: LIST
61359: ST_TO_ADDR
// if GetClass ( i ) = 11 then
61360: LD_VAR 0 6
61364: PPUSH
61365: CALL_OW 257
61369: PUSH
61370: LD_INT 11
61372: EQUAL
61373: IFFALSE 61394
// points := [ 30 , 10 , 5 ] ;
61375: LD_ADDR_VAR 0 9
61379: PUSH
61380: LD_INT 30
61382: PUSH
61383: LD_INT 10
61385: PUSH
61386: LD_INT 5
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: LIST
61393: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
61394: LD_VAR 0 1
61398: PPUSH
61399: LD_INT 5
61401: PPUSH
61402: CALL_OW 321
61406: PUSH
61407: LD_INT 2
61409: EQUAL
61410: IFFALSE 61427
// bpoints := bpoints * 1.8 ;
61412: LD_ADDR_VAR 0 10
61416: PUSH
61417: LD_VAR 0 10
61421: PUSH
61422: LD_REAL  1.80000000000000E+0000
61425: MUL
61426: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
61427: LD_VAR 0 6
61431: PPUSH
61432: CALL_OW 257
61436: PUSH
61437: LD_INT 1
61439: PUSH
61440: LD_INT 2
61442: PUSH
61443: LD_INT 3
61445: PUSH
61446: LD_INT 4
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: IN
61455: PUSH
61456: LD_VAR 0 1
61460: PPUSH
61461: LD_INT 51
61463: PPUSH
61464: CALL_OW 321
61468: PUSH
61469: LD_INT 2
61471: EQUAL
61472: AND
61473: IFFALSE 61490
// bpoints := bpoints * 1.2 ;
61475: LD_ADDR_VAR 0 10
61479: PUSH
61480: LD_VAR 0 10
61484: PUSH
61485: LD_REAL  1.20000000000000E+0000
61488: MUL
61489: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
61490: LD_VAR 0 6
61494: PPUSH
61495: CALL_OW 257
61499: PUSH
61500: LD_INT 5
61502: PUSH
61503: LD_INT 7
61505: PUSH
61506: LD_INT 9
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: LIST
61513: IN
61514: PUSH
61515: LD_VAR 0 1
61519: PPUSH
61520: LD_INT 52
61522: PPUSH
61523: CALL_OW 321
61527: PUSH
61528: LD_INT 2
61530: EQUAL
61531: AND
61532: IFFALSE 61549
// bpoints := bpoints * 1.5 ;
61534: LD_ADDR_VAR 0 10
61538: PUSH
61539: LD_VAR 0 10
61543: PUSH
61544: LD_REAL  1.50000000000000E+0000
61547: MUL
61548: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
61549: LD_VAR 0 1
61553: PPUSH
61554: LD_INT 66
61556: PPUSH
61557: CALL_OW 321
61561: PUSH
61562: LD_INT 2
61564: EQUAL
61565: IFFALSE 61582
// bpoints := bpoints * 1.1 ;
61567: LD_ADDR_VAR 0 10
61571: PUSH
61572: LD_VAR 0 10
61576: PUSH
61577: LD_REAL  1.10000000000000E+0000
61580: MUL
61581: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
61582: LD_ADDR_VAR 0 10
61586: PUSH
61587: LD_VAR 0 10
61591: PUSH
61592: LD_VAR 0 6
61596: PPUSH
61597: LD_INT 1
61599: PPUSH
61600: CALL_OW 259
61604: PUSH
61605: LD_REAL  1.15000000000000E+0000
61608: MUL
61609: MUL
61610: ST_TO_ADDR
// end ; unit_vehicle :
61611: GO 62439
61613: LD_INT 2
61615: DOUBLE
61616: EQUAL
61617: IFTRUE 61621
61619: GO 62427
61621: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
61622: LD_VAR 0 6
61626: PPUSH
61627: CALL_OW 264
61631: PUSH
61632: LD_INT 2
61634: PUSH
61635: LD_INT 42
61637: PUSH
61638: LD_INT 24
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: LIST
61645: IN
61646: IFFALSE 61667
// points := [ 25 , 5 , 3 ] ;
61648: LD_ADDR_VAR 0 9
61652: PUSH
61653: LD_INT 25
61655: PUSH
61656: LD_INT 5
61658: PUSH
61659: LD_INT 3
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: LIST
61666: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
61667: LD_VAR 0 6
61671: PPUSH
61672: CALL_OW 264
61676: PUSH
61677: LD_INT 4
61679: PUSH
61680: LD_INT 43
61682: PUSH
61683: LD_INT 25
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: LIST
61690: IN
61691: IFFALSE 61712
// points := [ 40 , 15 , 5 ] ;
61693: LD_ADDR_VAR 0 9
61697: PUSH
61698: LD_INT 40
61700: PUSH
61701: LD_INT 15
61703: PUSH
61704: LD_INT 5
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: LIST
61711: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
61712: LD_VAR 0 6
61716: PPUSH
61717: CALL_OW 264
61721: PUSH
61722: LD_INT 3
61724: PUSH
61725: LD_INT 23
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: IN
61732: IFFALSE 61753
// points := [ 7 , 25 , 8 ] ;
61734: LD_ADDR_VAR 0 9
61738: PUSH
61739: LD_INT 7
61741: PUSH
61742: LD_INT 25
61744: PUSH
61745: LD_INT 8
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: LIST
61752: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
61753: LD_VAR 0 6
61757: PPUSH
61758: CALL_OW 264
61762: PUSH
61763: LD_INT 5
61765: PUSH
61766: LD_INT 27
61768: PUSH
61769: LD_INT 44
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: LIST
61776: IN
61777: IFFALSE 61798
// points := [ 14 , 50 , 16 ] ;
61779: LD_ADDR_VAR 0 9
61783: PUSH
61784: LD_INT 14
61786: PUSH
61787: LD_INT 50
61789: PUSH
61790: LD_INT 16
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: LIST
61797: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
61798: LD_VAR 0 6
61802: PPUSH
61803: CALL_OW 264
61807: PUSH
61808: LD_INT 6
61810: PUSH
61811: LD_INT 46
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: IN
61818: IFFALSE 61839
// points := [ 32 , 120 , 70 ] ;
61820: LD_ADDR_VAR 0 9
61824: PUSH
61825: LD_INT 32
61827: PUSH
61828: LD_INT 120
61830: PUSH
61831: LD_INT 70
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: LIST
61838: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
61839: LD_VAR 0 6
61843: PPUSH
61844: CALL_OW 264
61848: PUSH
61849: LD_INT 7
61851: PUSH
61852: LD_INT 28
61854: PUSH
61855: LD_INT 45
61857: PUSH
61858: LD_INT 92
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: IN
61867: IFFALSE 61888
// points := [ 35 , 20 , 45 ] ;
61869: LD_ADDR_VAR 0 9
61873: PUSH
61874: LD_INT 35
61876: PUSH
61877: LD_INT 20
61879: PUSH
61880: LD_INT 45
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: LIST
61887: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
61888: LD_VAR 0 6
61892: PPUSH
61893: CALL_OW 264
61897: PUSH
61898: LD_INT 47
61900: PUSH
61901: EMPTY
61902: LIST
61903: IN
61904: IFFALSE 61925
// points := [ 67 , 45 , 75 ] ;
61906: LD_ADDR_VAR 0 9
61910: PUSH
61911: LD_INT 67
61913: PUSH
61914: LD_INT 45
61916: PUSH
61917: LD_INT 75
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: LIST
61924: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
61925: LD_VAR 0 6
61929: PPUSH
61930: CALL_OW 264
61934: PUSH
61935: LD_INT 26
61937: PUSH
61938: EMPTY
61939: LIST
61940: IN
61941: IFFALSE 61962
// points := [ 120 , 30 , 80 ] ;
61943: LD_ADDR_VAR 0 9
61947: PUSH
61948: LD_INT 120
61950: PUSH
61951: LD_INT 30
61953: PUSH
61954: LD_INT 80
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: LIST
61961: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
61962: LD_VAR 0 6
61966: PPUSH
61967: CALL_OW 264
61971: PUSH
61972: LD_INT 22
61974: PUSH
61975: EMPTY
61976: LIST
61977: IN
61978: IFFALSE 61999
// points := [ 40 , 1 , 1 ] ;
61980: LD_ADDR_VAR 0 9
61984: PUSH
61985: LD_INT 40
61987: PUSH
61988: LD_INT 1
61990: PUSH
61991: LD_INT 1
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: LIST
61998: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
61999: LD_VAR 0 6
62003: PPUSH
62004: CALL_OW 264
62008: PUSH
62009: LD_INT 29
62011: PUSH
62012: EMPTY
62013: LIST
62014: IN
62015: IFFALSE 62036
// points := [ 70 , 200 , 400 ] ;
62017: LD_ADDR_VAR 0 9
62021: PUSH
62022: LD_INT 70
62024: PUSH
62025: LD_INT 200
62027: PUSH
62028: LD_INT 400
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: LIST
62035: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
62036: LD_VAR 0 6
62040: PPUSH
62041: CALL_OW 264
62045: PUSH
62046: LD_INT 14
62048: PUSH
62049: LD_INT 53
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: IN
62056: IFFALSE 62077
// points := [ 40 , 10 , 20 ] ;
62058: LD_ADDR_VAR 0 9
62062: PUSH
62063: LD_INT 40
62065: PUSH
62066: LD_INT 10
62068: PUSH
62069: LD_INT 20
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: LIST
62076: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
62077: LD_VAR 0 6
62081: PPUSH
62082: CALL_OW 264
62086: PUSH
62087: LD_INT 9
62089: PUSH
62090: EMPTY
62091: LIST
62092: IN
62093: IFFALSE 62114
// points := [ 5 , 70 , 20 ] ;
62095: LD_ADDR_VAR 0 9
62099: PUSH
62100: LD_INT 5
62102: PUSH
62103: LD_INT 70
62105: PUSH
62106: LD_INT 20
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: LIST
62113: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
62114: LD_VAR 0 6
62118: PPUSH
62119: CALL_OW 264
62123: PUSH
62124: LD_INT 10
62126: PUSH
62127: EMPTY
62128: LIST
62129: IN
62130: IFFALSE 62151
// points := [ 35 , 110 , 70 ] ;
62132: LD_ADDR_VAR 0 9
62136: PUSH
62137: LD_INT 35
62139: PUSH
62140: LD_INT 110
62142: PUSH
62143: LD_INT 70
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: LIST
62150: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
62151: LD_VAR 0 6
62155: PPUSH
62156: CALL_OW 265
62160: PUSH
62161: LD_INT 25
62163: EQUAL
62164: IFFALSE 62185
// points := [ 80 , 65 , 100 ] ;
62166: LD_ADDR_VAR 0 9
62170: PUSH
62171: LD_INT 80
62173: PUSH
62174: LD_INT 65
62176: PUSH
62177: LD_INT 100
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: LIST
62184: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
62185: LD_VAR 0 6
62189: PPUSH
62190: CALL_OW 263
62194: PUSH
62195: LD_INT 1
62197: EQUAL
62198: IFFALSE 62233
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
62200: LD_ADDR_VAR 0 10
62204: PUSH
62205: LD_VAR 0 10
62209: PUSH
62210: LD_VAR 0 6
62214: PPUSH
62215: CALL_OW 311
62219: PPUSH
62220: LD_INT 3
62222: PPUSH
62223: CALL_OW 259
62227: PUSH
62228: LD_INT 4
62230: MUL
62231: MUL
62232: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
62233: LD_VAR 0 6
62237: PPUSH
62238: CALL_OW 263
62242: PUSH
62243: LD_INT 2
62245: EQUAL
62246: IFFALSE 62297
// begin j := IsControledBy ( i ) ;
62248: LD_ADDR_VAR 0 7
62252: PUSH
62253: LD_VAR 0 6
62257: PPUSH
62258: CALL_OW 312
62262: ST_TO_ADDR
// if j then
62263: LD_VAR 0 7
62267: IFFALSE 62297
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
62269: LD_ADDR_VAR 0 10
62273: PUSH
62274: LD_VAR 0 10
62278: PUSH
62279: LD_VAR 0 7
62283: PPUSH
62284: LD_INT 3
62286: PPUSH
62287: CALL_OW 259
62291: PUSH
62292: LD_INT 3
62294: MUL
62295: MUL
62296: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
62297: LD_VAR 0 6
62301: PPUSH
62302: CALL_OW 264
62306: PUSH
62307: LD_INT 5
62309: PUSH
62310: LD_INT 6
62312: PUSH
62313: LD_INT 46
62315: PUSH
62316: LD_INT 44
62318: PUSH
62319: LD_INT 47
62321: PUSH
62322: LD_INT 45
62324: PUSH
62325: LD_INT 28
62327: PUSH
62328: LD_INT 7
62330: PUSH
62331: LD_INT 27
62333: PUSH
62334: LD_INT 29
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: IN
62349: PUSH
62350: LD_VAR 0 1
62354: PPUSH
62355: LD_INT 52
62357: PPUSH
62358: CALL_OW 321
62362: PUSH
62363: LD_INT 2
62365: EQUAL
62366: AND
62367: IFFALSE 62384
// bpoints := bpoints * 1.2 ;
62369: LD_ADDR_VAR 0 10
62373: PUSH
62374: LD_VAR 0 10
62378: PUSH
62379: LD_REAL  1.20000000000000E+0000
62382: MUL
62383: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
62384: LD_VAR 0 6
62388: PPUSH
62389: CALL_OW 264
62393: PUSH
62394: LD_INT 6
62396: PUSH
62397: LD_INT 46
62399: PUSH
62400: LD_INT 47
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: LIST
62407: IN
62408: IFFALSE 62425
// bpoints := bpoints * 1.2 ;
62410: LD_ADDR_VAR 0 10
62414: PUSH
62415: LD_VAR 0 10
62419: PUSH
62420: LD_REAL  1.20000000000000E+0000
62423: MUL
62424: ST_TO_ADDR
// end ; unit_building :
62425: GO 62439
62427: LD_INT 3
62429: DOUBLE
62430: EQUAL
62431: IFTRUE 62435
62433: GO 62438
62435: POP
// ; end ;
62436: GO 62439
62438: POP
// for j = 1 to 3 do
62439: LD_ADDR_VAR 0 7
62443: PUSH
62444: DOUBLE
62445: LD_INT 1
62447: DEC
62448: ST_TO_ADDR
62449: LD_INT 3
62451: PUSH
62452: FOR_TO
62453: IFFALSE 62506
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
62455: LD_ADDR_VAR 0 5
62459: PUSH
62460: LD_VAR 0 5
62464: PPUSH
62465: LD_VAR 0 7
62469: PPUSH
62470: LD_VAR 0 5
62474: PUSH
62475: LD_VAR 0 7
62479: ARRAY
62480: PUSH
62481: LD_VAR 0 9
62485: PUSH
62486: LD_VAR 0 7
62490: ARRAY
62491: PUSH
62492: LD_VAR 0 10
62496: MUL
62497: PLUS
62498: PPUSH
62499: CALL_OW 1
62503: ST_TO_ADDR
62504: GO 62452
62506: POP
62507: POP
// end ;
62508: GO 60987
62510: POP
62511: POP
// result := Replace ( result , 4 , tmp ) ;
62512: LD_ADDR_VAR 0 5
62516: PUSH
62517: LD_VAR 0 5
62521: PPUSH
62522: LD_INT 4
62524: PPUSH
62525: LD_VAR 0 8
62529: PPUSH
62530: CALL_OW 1
62534: ST_TO_ADDR
// end ;
62535: LD_VAR 0 5
62539: RET
// export function DangerAtRange ( unit , range ) ; begin
62540: LD_INT 0
62542: PPUSH
// if not unit then
62543: LD_VAR 0 1
62547: NOT
62548: IFFALSE 62552
// exit ;
62550: GO 62597
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
62552: LD_ADDR_VAR 0 3
62556: PUSH
62557: LD_VAR 0 1
62561: PPUSH
62562: CALL_OW 255
62566: PPUSH
62567: LD_VAR 0 1
62571: PPUSH
62572: CALL_OW 250
62576: PPUSH
62577: LD_VAR 0 1
62581: PPUSH
62582: CALL_OW 251
62586: PPUSH
62587: LD_VAR 0 2
62591: PPUSH
62592: CALL 60839 0 4
62596: ST_TO_ADDR
// end ;
62597: LD_VAR 0 3
62601: RET
// export function DangerInArea ( side , area ) ; begin
62602: LD_INT 0
62604: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
62605: LD_ADDR_VAR 0 3
62609: PUSH
62610: LD_VAR 0 2
62614: PPUSH
62615: LD_INT 81
62617: PUSH
62618: LD_VAR 0 1
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PPUSH
62627: CALL_OW 70
62631: ST_TO_ADDR
// end ;
62632: LD_VAR 0 3
62636: RET
// export function IsExtension ( b ) ; begin
62637: LD_INT 0
62639: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
62640: LD_ADDR_VAR 0 2
62644: PUSH
62645: LD_VAR 0 1
62649: PUSH
62650: LD_INT 23
62652: PUSH
62653: LD_INT 20
62655: PUSH
62656: LD_INT 22
62658: PUSH
62659: LD_INT 17
62661: PUSH
62662: LD_INT 24
62664: PUSH
62665: LD_INT 21
62667: PUSH
62668: LD_INT 19
62670: PUSH
62671: LD_INT 16
62673: PUSH
62674: LD_INT 25
62676: PUSH
62677: LD_INT 18
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: IN
62692: ST_TO_ADDR
// end ;
62693: LD_VAR 0 2
62697: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
62698: LD_INT 0
62700: PPUSH
62701: PPUSH
62702: PPUSH
// result := [ ] ;
62703: LD_ADDR_VAR 0 4
62707: PUSH
62708: EMPTY
62709: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
62710: LD_ADDR_VAR 0 5
62714: PUSH
62715: LD_VAR 0 2
62719: PPUSH
62720: LD_INT 21
62722: PUSH
62723: LD_INT 3
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PPUSH
62730: CALL_OW 70
62734: ST_TO_ADDR
// if not tmp then
62735: LD_VAR 0 5
62739: NOT
62740: IFFALSE 62744
// exit ;
62742: GO 62808
// if checkLink then
62744: LD_VAR 0 3
62748: IFFALSE 62798
// begin for i in tmp do
62750: LD_ADDR_VAR 0 6
62754: PUSH
62755: LD_VAR 0 5
62759: PUSH
62760: FOR_IN
62761: IFFALSE 62796
// if GetBase ( i ) <> base then
62763: LD_VAR 0 6
62767: PPUSH
62768: CALL_OW 274
62772: PUSH
62773: LD_VAR 0 1
62777: NONEQUAL
62778: IFFALSE 62794
// ComLinkToBase ( base , i ) ;
62780: LD_VAR 0 1
62784: PPUSH
62785: LD_VAR 0 6
62789: PPUSH
62790: CALL_OW 169
62794: GO 62760
62796: POP
62797: POP
// end ; result := tmp ;
62798: LD_ADDR_VAR 0 4
62802: PUSH
62803: LD_VAR 0 5
62807: ST_TO_ADDR
// end ;
62808: LD_VAR 0 4
62812: RET
// export function ComComplete ( units , b ) ; var i ; begin
62813: LD_INT 0
62815: PPUSH
62816: PPUSH
// if not units then
62817: LD_VAR 0 1
62821: NOT
62822: IFFALSE 62826
// exit ;
62824: GO 62916
// for i in units do
62826: LD_ADDR_VAR 0 4
62830: PUSH
62831: LD_VAR 0 1
62835: PUSH
62836: FOR_IN
62837: IFFALSE 62914
// if BuildingStatus ( b ) = bs_build then
62839: LD_VAR 0 2
62843: PPUSH
62844: CALL_OW 461
62848: PUSH
62849: LD_INT 1
62851: EQUAL
62852: IFFALSE 62912
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
62854: LD_VAR 0 4
62858: PPUSH
62859: LD_STRING h
62861: PUSH
62862: LD_VAR 0 2
62866: PPUSH
62867: CALL_OW 250
62871: PUSH
62872: LD_VAR 0 2
62876: PPUSH
62877: CALL_OW 251
62881: PUSH
62882: LD_VAR 0 2
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: LD_INT 0
62892: PUSH
62893: LD_INT 0
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: PUSH
62905: EMPTY
62906: LIST
62907: PPUSH
62908: CALL_OW 446
62912: GO 62836
62914: POP
62915: POP
// end ;
62916: LD_VAR 0 3
62920: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
62921: LD_INT 0
62923: PPUSH
62924: PPUSH
62925: PPUSH
62926: PPUSH
62927: PPUSH
62928: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
62929: LD_VAR 0 1
62933: NOT
62934: PUSH
62935: LD_VAR 0 1
62939: PPUSH
62940: CALL_OW 263
62944: PUSH
62945: LD_INT 2
62947: NONEQUAL
62948: OR
62949: IFFALSE 62953
// exit ;
62951: GO 63269
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
62953: LD_ADDR_VAR 0 6
62957: PUSH
62958: LD_INT 22
62960: PUSH
62961: LD_VAR 0 1
62965: PPUSH
62966: CALL_OW 255
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 2
62977: PUSH
62978: LD_INT 30
62980: PUSH
62981: LD_INT 36
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 34
62990: PUSH
62991: LD_INT 31
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: LIST
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PPUSH
63007: CALL_OW 69
63011: ST_TO_ADDR
// if not tmp then
63012: LD_VAR 0 6
63016: NOT
63017: IFFALSE 63021
// exit ;
63019: GO 63269
// result := [ ] ;
63021: LD_ADDR_VAR 0 2
63025: PUSH
63026: EMPTY
63027: ST_TO_ADDR
// for i in tmp do
63028: LD_ADDR_VAR 0 3
63032: PUSH
63033: LD_VAR 0 6
63037: PUSH
63038: FOR_IN
63039: IFFALSE 63110
// begin t := UnitsInside ( i ) ;
63041: LD_ADDR_VAR 0 4
63045: PUSH
63046: LD_VAR 0 3
63050: PPUSH
63051: CALL_OW 313
63055: ST_TO_ADDR
// if t then
63056: LD_VAR 0 4
63060: IFFALSE 63108
// for j in t do
63062: LD_ADDR_VAR 0 7
63066: PUSH
63067: LD_VAR 0 4
63071: PUSH
63072: FOR_IN
63073: IFFALSE 63106
// result := Replace ( result , result + 1 , j ) ;
63075: LD_ADDR_VAR 0 2
63079: PUSH
63080: LD_VAR 0 2
63084: PPUSH
63085: LD_VAR 0 2
63089: PUSH
63090: LD_INT 1
63092: PLUS
63093: PPUSH
63094: LD_VAR 0 7
63098: PPUSH
63099: CALL_OW 1
63103: ST_TO_ADDR
63104: GO 63072
63106: POP
63107: POP
// end ;
63108: GO 63038
63110: POP
63111: POP
// if not result then
63112: LD_VAR 0 2
63116: NOT
63117: IFFALSE 63121
// exit ;
63119: GO 63269
// mech := result [ 1 ] ;
63121: LD_ADDR_VAR 0 5
63125: PUSH
63126: LD_VAR 0 2
63130: PUSH
63131: LD_INT 1
63133: ARRAY
63134: ST_TO_ADDR
// if result > 1 then
63135: LD_VAR 0 2
63139: PUSH
63140: LD_INT 1
63142: GREATER
63143: IFFALSE 63255
// begin for i = 2 to result do
63145: LD_ADDR_VAR 0 3
63149: PUSH
63150: DOUBLE
63151: LD_INT 2
63153: DEC
63154: ST_TO_ADDR
63155: LD_VAR 0 2
63159: PUSH
63160: FOR_TO
63161: IFFALSE 63253
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
63163: LD_ADDR_VAR 0 4
63167: PUSH
63168: LD_VAR 0 2
63172: PUSH
63173: LD_VAR 0 3
63177: ARRAY
63178: PPUSH
63179: LD_INT 3
63181: PPUSH
63182: CALL_OW 259
63186: PUSH
63187: LD_VAR 0 2
63191: PUSH
63192: LD_VAR 0 3
63196: ARRAY
63197: PPUSH
63198: CALL_OW 432
63202: MINUS
63203: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
63204: LD_VAR 0 4
63208: PUSH
63209: LD_VAR 0 5
63213: PPUSH
63214: LD_INT 3
63216: PPUSH
63217: CALL_OW 259
63221: PUSH
63222: LD_VAR 0 5
63226: PPUSH
63227: CALL_OW 432
63231: MINUS
63232: GREATEREQUAL
63233: IFFALSE 63251
// mech := result [ i ] ;
63235: LD_ADDR_VAR 0 5
63239: PUSH
63240: LD_VAR 0 2
63244: PUSH
63245: LD_VAR 0 3
63249: ARRAY
63250: ST_TO_ADDR
// end ;
63251: GO 63160
63253: POP
63254: POP
// end ; ComLinkTo ( vehicle , mech ) ;
63255: LD_VAR 0 1
63259: PPUSH
63260: LD_VAR 0 5
63264: PPUSH
63265: CALL_OW 135
// end ;
63269: LD_VAR 0 2
63273: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
63274: LD_INT 0
63276: PPUSH
63277: PPUSH
63278: PPUSH
63279: PPUSH
63280: PPUSH
63281: PPUSH
63282: PPUSH
63283: PPUSH
63284: PPUSH
63285: PPUSH
63286: PPUSH
63287: PPUSH
63288: PPUSH
// result := [ ] ;
63289: LD_ADDR_VAR 0 7
63293: PUSH
63294: EMPTY
63295: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
63296: LD_VAR 0 1
63300: PPUSH
63301: CALL_OW 266
63305: PUSH
63306: LD_INT 0
63308: PUSH
63309: LD_INT 1
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: IN
63316: NOT
63317: IFFALSE 63321
// exit ;
63319: GO 64955
// if name then
63321: LD_VAR 0 3
63325: IFFALSE 63341
// SetBName ( base_dep , name ) ;
63327: LD_VAR 0 1
63331: PPUSH
63332: LD_VAR 0 3
63336: PPUSH
63337: CALL_OW 500
// base := GetBase ( base_dep ) ;
63341: LD_ADDR_VAR 0 15
63345: PUSH
63346: LD_VAR 0 1
63350: PPUSH
63351: CALL_OW 274
63355: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
63356: LD_ADDR_VAR 0 16
63360: PUSH
63361: LD_VAR 0 1
63365: PPUSH
63366: CALL_OW 255
63370: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
63371: LD_ADDR_VAR 0 17
63375: PUSH
63376: LD_VAR 0 1
63380: PPUSH
63381: CALL_OW 248
63385: ST_TO_ADDR
// if sources then
63386: LD_VAR 0 5
63390: IFFALSE 63437
// for i = 1 to 3 do
63392: LD_ADDR_VAR 0 8
63396: PUSH
63397: DOUBLE
63398: LD_INT 1
63400: DEC
63401: ST_TO_ADDR
63402: LD_INT 3
63404: PUSH
63405: FOR_TO
63406: IFFALSE 63435
// AddResourceType ( base , i , sources [ i ] ) ;
63408: LD_VAR 0 15
63412: PPUSH
63413: LD_VAR 0 8
63417: PPUSH
63418: LD_VAR 0 5
63422: PUSH
63423: LD_VAR 0 8
63427: ARRAY
63428: PPUSH
63429: CALL_OW 276
63433: GO 63405
63435: POP
63436: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
63437: LD_ADDR_VAR 0 18
63441: PUSH
63442: LD_VAR 0 15
63446: PPUSH
63447: LD_VAR 0 2
63451: PPUSH
63452: LD_INT 1
63454: PPUSH
63455: CALL 62698 0 3
63459: ST_TO_ADDR
// InitHc ;
63460: CALL_OW 19
// InitUc ;
63464: CALL_OW 18
// uc_side := side ;
63468: LD_ADDR_OWVAR 20
63472: PUSH
63473: LD_VAR 0 16
63477: ST_TO_ADDR
// uc_nation := nation ;
63478: LD_ADDR_OWVAR 21
63482: PUSH
63483: LD_VAR 0 17
63487: ST_TO_ADDR
// if buildings then
63488: LD_VAR 0 18
63492: IFFALSE 64814
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
63494: LD_ADDR_VAR 0 19
63498: PUSH
63499: LD_VAR 0 18
63503: PPUSH
63504: LD_INT 2
63506: PUSH
63507: LD_INT 30
63509: PUSH
63510: LD_INT 29
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 30
63519: PUSH
63520: LD_INT 30
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: LIST
63531: PPUSH
63532: CALL_OW 72
63536: ST_TO_ADDR
// if tmp then
63537: LD_VAR 0 19
63541: IFFALSE 63589
// for i in tmp do
63543: LD_ADDR_VAR 0 8
63547: PUSH
63548: LD_VAR 0 19
63552: PUSH
63553: FOR_IN
63554: IFFALSE 63587
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
63556: LD_VAR 0 8
63560: PPUSH
63561: CALL_OW 250
63565: PPUSH
63566: LD_VAR 0 8
63570: PPUSH
63571: CALL_OW 251
63575: PPUSH
63576: LD_VAR 0 16
63580: PPUSH
63581: CALL_OW 441
63585: GO 63553
63587: POP
63588: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
63589: LD_VAR 0 18
63593: PPUSH
63594: LD_INT 2
63596: PUSH
63597: LD_INT 30
63599: PUSH
63600: LD_INT 32
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 30
63609: PUSH
63610: LD_INT 33
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: LIST
63621: PPUSH
63622: CALL_OW 72
63626: IFFALSE 63714
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
63628: LD_ADDR_VAR 0 8
63632: PUSH
63633: LD_VAR 0 18
63637: PPUSH
63638: LD_INT 2
63640: PUSH
63641: LD_INT 30
63643: PUSH
63644: LD_INT 32
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 30
63653: PUSH
63654: LD_INT 33
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: LIST
63665: PPUSH
63666: CALL_OW 72
63670: PUSH
63671: FOR_IN
63672: IFFALSE 63712
// begin if not GetBWeapon ( i ) then
63674: LD_VAR 0 8
63678: PPUSH
63679: CALL_OW 269
63683: NOT
63684: IFFALSE 63710
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
63686: LD_VAR 0 8
63690: PPUSH
63691: LD_VAR 0 8
63695: PPUSH
63696: LD_VAR 0 2
63700: PPUSH
63701: CALL 64960 0 2
63705: PPUSH
63706: CALL_OW 431
// end ;
63710: GO 63671
63712: POP
63713: POP
// end ; for i = 1 to personel do
63714: LD_ADDR_VAR 0 8
63718: PUSH
63719: DOUBLE
63720: LD_INT 1
63722: DEC
63723: ST_TO_ADDR
63724: LD_VAR 0 6
63728: PUSH
63729: FOR_TO
63730: IFFALSE 64794
// begin if i > 4 then
63732: LD_VAR 0 8
63736: PUSH
63737: LD_INT 4
63739: GREATER
63740: IFFALSE 63744
// break ;
63742: GO 64794
// case i of 1 :
63744: LD_VAR 0 8
63748: PUSH
63749: LD_INT 1
63751: DOUBLE
63752: EQUAL
63753: IFTRUE 63757
63755: GO 63837
63757: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
63758: LD_ADDR_VAR 0 12
63762: PUSH
63763: LD_VAR 0 18
63767: PPUSH
63768: LD_INT 22
63770: PUSH
63771: LD_VAR 0 16
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 58
63782: PUSH
63783: EMPTY
63784: LIST
63785: PUSH
63786: LD_INT 2
63788: PUSH
63789: LD_INT 30
63791: PUSH
63792: LD_INT 32
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 30
63801: PUSH
63802: LD_INT 4
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 30
63811: PUSH
63812: LD_INT 5
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: LIST
63829: PPUSH
63830: CALL_OW 72
63834: ST_TO_ADDR
63835: GO 64059
63837: LD_INT 2
63839: DOUBLE
63840: EQUAL
63841: IFTRUE 63845
63843: GO 63907
63845: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
63846: LD_ADDR_VAR 0 12
63850: PUSH
63851: LD_VAR 0 18
63855: PPUSH
63856: LD_INT 22
63858: PUSH
63859: LD_VAR 0 16
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 2
63870: PUSH
63871: LD_INT 30
63873: PUSH
63874: LD_INT 0
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 30
63883: PUSH
63884: LD_INT 1
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: LIST
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PPUSH
63900: CALL_OW 72
63904: ST_TO_ADDR
63905: GO 64059
63907: LD_INT 3
63909: DOUBLE
63910: EQUAL
63911: IFTRUE 63915
63913: GO 63977
63915: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
63916: LD_ADDR_VAR 0 12
63920: PUSH
63921: LD_VAR 0 18
63925: PPUSH
63926: LD_INT 22
63928: PUSH
63929: LD_VAR 0 16
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 2
63940: PUSH
63941: LD_INT 30
63943: PUSH
63944: LD_INT 2
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 30
63953: PUSH
63954: LD_INT 3
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: LIST
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PPUSH
63970: CALL_OW 72
63974: ST_TO_ADDR
63975: GO 64059
63977: LD_INT 4
63979: DOUBLE
63980: EQUAL
63981: IFTRUE 63985
63983: GO 64058
63985: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
63986: LD_ADDR_VAR 0 12
63990: PUSH
63991: LD_VAR 0 18
63995: PPUSH
63996: LD_INT 22
63998: PUSH
63999: LD_VAR 0 16
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 2
64010: PUSH
64011: LD_INT 30
64013: PUSH
64014: LD_INT 6
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 30
64023: PUSH
64024: LD_INT 7
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 30
64033: PUSH
64034: LD_INT 8
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PPUSH
64051: CALL_OW 72
64055: ST_TO_ADDR
64056: GO 64059
64058: POP
// if i = 1 then
64059: LD_VAR 0 8
64063: PUSH
64064: LD_INT 1
64066: EQUAL
64067: IFFALSE 64178
// begin tmp := [ ] ;
64069: LD_ADDR_VAR 0 19
64073: PUSH
64074: EMPTY
64075: ST_TO_ADDR
// for j in f do
64076: LD_ADDR_VAR 0 9
64080: PUSH
64081: LD_VAR 0 12
64085: PUSH
64086: FOR_IN
64087: IFFALSE 64160
// if GetBType ( j ) = b_bunker then
64089: LD_VAR 0 9
64093: PPUSH
64094: CALL_OW 266
64098: PUSH
64099: LD_INT 32
64101: EQUAL
64102: IFFALSE 64129
// tmp := Insert ( tmp , 1 , j ) else
64104: LD_ADDR_VAR 0 19
64108: PUSH
64109: LD_VAR 0 19
64113: PPUSH
64114: LD_INT 1
64116: PPUSH
64117: LD_VAR 0 9
64121: PPUSH
64122: CALL_OW 2
64126: ST_TO_ADDR
64127: GO 64158
// tmp := Insert ( tmp , tmp + 1 , j ) ;
64129: LD_ADDR_VAR 0 19
64133: PUSH
64134: LD_VAR 0 19
64138: PPUSH
64139: LD_VAR 0 19
64143: PUSH
64144: LD_INT 1
64146: PLUS
64147: PPUSH
64148: LD_VAR 0 9
64152: PPUSH
64153: CALL_OW 2
64157: ST_TO_ADDR
64158: GO 64086
64160: POP
64161: POP
// if tmp then
64162: LD_VAR 0 19
64166: IFFALSE 64178
// f := tmp ;
64168: LD_ADDR_VAR 0 12
64172: PUSH
64173: LD_VAR 0 19
64177: ST_TO_ADDR
// end ; x := personel [ i ] ;
64178: LD_ADDR_VAR 0 13
64182: PUSH
64183: LD_VAR 0 6
64187: PUSH
64188: LD_VAR 0 8
64192: ARRAY
64193: ST_TO_ADDR
// if x = - 1 then
64194: LD_VAR 0 13
64198: PUSH
64199: LD_INT 1
64201: NEG
64202: EQUAL
64203: IFFALSE 64412
// begin for j in f do
64205: LD_ADDR_VAR 0 9
64209: PUSH
64210: LD_VAR 0 12
64214: PUSH
64215: FOR_IN
64216: IFFALSE 64408
// repeat InitHc ;
64218: CALL_OW 19
// if GetBType ( j ) = b_barracks then
64222: LD_VAR 0 9
64226: PPUSH
64227: CALL_OW 266
64231: PUSH
64232: LD_INT 5
64234: EQUAL
64235: IFFALSE 64305
// begin if UnitsInside ( j ) < 3 then
64237: LD_VAR 0 9
64241: PPUSH
64242: CALL_OW 313
64246: PUSH
64247: LD_INT 3
64249: LESS
64250: IFFALSE 64286
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
64252: LD_INT 0
64254: PPUSH
64255: LD_INT 5
64257: PUSH
64258: LD_INT 8
64260: PUSH
64261: LD_INT 9
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: LIST
64268: PUSH
64269: LD_VAR 0 17
64273: ARRAY
64274: PPUSH
64275: LD_VAR 0 4
64279: PPUSH
64280: CALL_OW 380
64284: GO 64303
// PrepareHuman ( false , i , skill ) ;
64286: LD_INT 0
64288: PPUSH
64289: LD_VAR 0 8
64293: PPUSH
64294: LD_VAR 0 4
64298: PPUSH
64299: CALL_OW 380
// end else
64303: GO 64322
// PrepareHuman ( false , i , skill ) ;
64305: LD_INT 0
64307: PPUSH
64308: LD_VAR 0 8
64312: PPUSH
64313: LD_VAR 0 4
64317: PPUSH
64318: CALL_OW 380
// un := CreateHuman ;
64322: LD_ADDR_VAR 0 14
64326: PUSH
64327: CALL_OW 44
64331: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
64332: LD_ADDR_VAR 0 7
64336: PUSH
64337: LD_VAR 0 7
64341: PPUSH
64342: LD_INT 1
64344: PPUSH
64345: LD_VAR 0 14
64349: PPUSH
64350: CALL_OW 2
64354: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
64355: LD_VAR 0 14
64359: PPUSH
64360: LD_VAR 0 9
64364: PPUSH
64365: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
64369: LD_VAR 0 9
64373: PPUSH
64374: CALL_OW 313
64378: PUSH
64379: LD_INT 6
64381: EQUAL
64382: PUSH
64383: LD_VAR 0 9
64387: PPUSH
64388: CALL_OW 266
64392: PUSH
64393: LD_INT 32
64395: PUSH
64396: LD_INT 31
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: IN
64403: OR
64404: IFFALSE 64218
64406: GO 64215
64408: POP
64409: POP
// end else
64410: GO 64792
// for j = 1 to x do
64412: LD_ADDR_VAR 0 9
64416: PUSH
64417: DOUBLE
64418: LD_INT 1
64420: DEC
64421: ST_TO_ADDR
64422: LD_VAR 0 13
64426: PUSH
64427: FOR_TO
64428: IFFALSE 64790
// begin InitHc ;
64430: CALL_OW 19
// if not f then
64434: LD_VAR 0 12
64438: NOT
64439: IFFALSE 64528
// begin PrepareHuman ( false , i , skill ) ;
64441: LD_INT 0
64443: PPUSH
64444: LD_VAR 0 8
64448: PPUSH
64449: LD_VAR 0 4
64453: PPUSH
64454: CALL_OW 380
// un := CreateHuman ;
64458: LD_ADDR_VAR 0 14
64462: PUSH
64463: CALL_OW 44
64467: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
64468: LD_ADDR_VAR 0 7
64472: PUSH
64473: LD_VAR 0 7
64477: PPUSH
64478: LD_INT 1
64480: PPUSH
64481: LD_VAR 0 14
64485: PPUSH
64486: CALL_OW 2
64490: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
64491: LD_VAR 0 14
64495: PPUSH
64496: LD_VAR 0 1
64500: PPUSH
64501: CALL_OW 250
64505: PPUSH
64506: LD_VAR 0 1
64510: PPUSH
64511: CALL_OW 251
64515: PPUSH
64516: LD_INT 10
64518: PPUSH
64519: LD_INT 0
64521: PPUSH
64522: CALL_OW 50
// continue ;
64526: GO 64427
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
64528: LD_VAR 0 12
64532: PUSH
64533: LD_INT 1
64535: ARRAY
64536: PPUSH
64537: CALL_OW 313
64541: PUSH
64542: LD_VAR 0 12
64546: PUSH
64547: LD_INT 1
64549: ARRAY
64550: PPUSH
64551: CALL_OW 266
64555: PUSH
64556: LD_INT 32
64558: PUSH
64559: LD_INT 31
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: IN
64566: AND
64567: PUSH
64568: LD_VAR 0 12
64572: PUSH
64573: LD_INT 1
64575: ARRAY
64576: PPUSH
64577: CALL_OW 313
64581: PUSH
64582: LD_INT 6
64584: EQUAL
64585: OR
64586: IFFALSE 64606
// f := Delete ( f , 1 ) ;
64588: LD_ADDR_VAR 0 12
64592: PUSH
64593: LD_VAR 0 12
64597: PPUSH
64598: LD_INT 1
64600: PPUSH
64601: CALL_OW 3
64605: ST_TO_ADDR
// if not f then
64606: LD_VAR 0 12
64610: NOT
64611: IFFALSE 64629
// begin x := x + 2 ;
64613: LD_ADDR_VAR 0 13
64617: PUSH
64618: LD_VAR 0 13
64622: PUSH
64623: LD_INT 2
64625: PLUS
64626: ST_TO_ADDR
// continue ;
64627: GO 64427
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
64629: LD_VAR 0 12
64633: PUSH
64634: LD_INT 1
64636: ARRAY
64637: PPUSH
64638: CALL_OW 266
64642: PUSH
64643: LD_INT 5
64645: EQUAL
64646: IFFALSE 64720
// begin if UnitsInside ( f [ 1 ] ) < 3 then
64648: LD_VAR 0 12
64652: PUSH
64653: LD_INT 1
64655: ARRAY
64656: PPUSH
64657: CALL_OW 313
64661: PUSH
64662: LD_INT 3
64664: LESS
64665: IFFALSE 64701
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
64667: LD_INT 0
64669: PPUSH
64670: LD_INT 5
64672: PUSH
64673: LD_INT 8
64675: PUSH
64676: LD_INT 9
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: LIST
64683: PUSH
64684: LD_VAR 0 17
64688: ARRAY
64689: PPUSH
64690: LD_VAR 0 4
64694: PPUSH
64695: CALL_OW 380
64699: GO 64718
// PrepareHuman ( false , i , skill ) ;
64701: LD_INT 0
64703: PPUSH
64704: LD_VAR 0 8
64708: PPUSH
64709: LD_VAR 0 4
64713: PPUSH
64714: CALL_OW 380
// end else
64718: GO 64737
// PrepareHuman ( false , i , skill ) ;
64720: LD_INT 0
64722: PPUSH
64723: LD_VAR 0 8
64727: PPUSH
64728: LD_VAR 0 4
64732: PPUSH
64733: CALL_OW 380
// un := CreateHuman ;
64737: LD_ADDR_VAR 0 14
64741: PUSH
64742: CALL_OW 44
64746: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
64747: LD_ADDR_VAR 0 7
64751: PUSH
64752: LD_VAR 0 7
64756: PPUSH
64757: LD_INT 1
64759: PPUSH
64760: LD_VAR 0 14
64764: PPUSH
64765: CALL_OW 2
64769: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
64770: LD_VAR 0 14
64774: PPUSH
64775: LD_VAR 0 12
64779: PUSH
64780: LD_INT 1
64782: ARRAY
64783: PPUSH
64784: CALL_OW 52
// end ;
64788: GO 64427
64790: POP
64791: POP
// end ;
64792: GO 63729
64794: POP
64795: POP
// result := result ^ buildings ;
64796: LD_ADDR_VAR 0 7
64800: PUSH
64801: LD_VAR 0 7
64805: PUSH
64806: LD_VAR 0 18
64810: ADD
64811: ST_TO_ADDR
// end else
64812: GO 64955
// begin for i = 1 to personel do
64814: LD_ADDR_VAR 0 8
64818: PUSH
64819: DOUBLE
64820: LD_INT 1
64822: DEC
64823: ST_TO_ADDR
64824: LD_VAR 0 6
64828: PUSH
64829: FOR_TO
64830: IFFALSE 64953
// begin if i > 4 then
64832: LD_VAR 0 8
64836: PUSH
64837: LD_INT 4
64839: GREATER
64840: IFFALSE 64844
// break ;
64842: GO 64953
// x := personel [ i ] ;
64844: LD_ADDR_VAR 0 13
64848: PUSH
64849: LD_VAR 0 6
64853: PUSH
64854: LD_VAR 0 8
64858: ARRAY
64859: ST_TO_ADDR
// if x = - 1 then
64860: LD_VAR 0 13
64864: PUSH
64865: LD_INT 1
64867: NEG
64868: EQUAL
64869: IFFALSE 64873
// continue ;
64871: GO 64829
// PrepareHuman ( false , i , skill ) ;
64873: LD_INT 0
64875: PPUSH
64876: LD_VAR 0 8
64880: PPUSH
64881: LD_VAR 0 4
64885: PPUSH
64886: CALL_OW 380
// un := CreateHuman ;
64890: LD_ADDR_VAR 0 14
64894: PUSH
64895: CALL_OW 44
64899: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
64900: LD_VAR 0 14
64904: PPUSH
64905: LD_VAR 0 1
64909: PPUSH
64910: CALL_OW 250
64914: PPUSH
64915: LD_VAR 0 1
64919: PPUSH
64920: CALL_OW 251
64924: PPUSH
64925: LD_INT 10
64927: PPUSH
64928: LD_INT 0
64930: PPUSH
64931: CALL_OW 50
// result := result ^ un ;
64935: LD_ADDR_VAR 0 7
64939: PUSH
64940: LD_VAR 0 7
64944: PUSH
64945: LD_VAR 0 14
64949: ADD
64950: ST_TO_ADDR
// end ;
64951: GO 64829
64953: POP
64954: POP
// end ; end ;
64955: LD_VAR 0 7
64959: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
64960: LD_INT 0
64962: PPUSH
64963: PPUSH
64964: PPUSH
64965: PPUSH
64966: PPUSH
64967: PPUSH
64968: PPUSH
64969: PPUSH
64970: PPUSH
64971: PPUSH
64972: PPUSH
64973: PPUSH
64974: PPUSH
64975: PPUSH
64976: PPUSH
64977: PPUSH
// result := false ;
64978: LD_ADDR_VAR 0 3
64982: PUSH
64983: LD_INT 0
64985: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
64986: LD_VAR 0 1
64990: NOT
64991: PUSH
64992: LD_VAR 0 1
64996: PPUSH
64997: CALL_OW 266
65001: PUSH
65002: LD_INT 32
65004: PUSH
65005: LD_INT 33
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: IN
65012: NOT
65013: OR
65014: IFFALSE 65018
// exit ;
65016: GO 66127
// nat := GetNation ( tower ) ;
65018: LD_ADDR_VAR 0 12
65022: PUSH
65023: LD_VAR 0 1
65027: PPUSH
65028: CALL_OW 248
65032: ST_TO_ADDR
// side := GetSide ( tower ) ;
65033: LD_ADDR_VAR 0 16
65037: PUSH
65038: LD_VAR 0 1
65042: PPUSH
65043: CALL_OW 255
65047: ST_TO_ADDR
// x := GetX ( tower ) ;
65048: LD_ADDR_VAR 0 10
65052: PUSH
65053: LD_VAR 0 1
65057: PPUSH
65058: CALL_OW 250
65062: ST_TO_ADDR
// y := GetY ( tower ) ;
65063: LD_ADDR_VAR 0 11
65067: PUSH
65068: LD_VAR 0 1
65072: PPUSH
65073: CALL_OW 251
65077: ST_TO_ADDR
// if not x or not y then
65078: LD_VAR 0 10
65082: NOT
65083: PUSH
65084: LD_VAR 0 11
65088: NOT
65089: OR
65090: IFFALSE 65094
// exit ;
65092: GO 66127
// weapon := 0 ;
65094: LD_ADDR_VAR 0 18
65098: PUSH
65099: LD_INT 0
65101: ST_TO_ADDR
// fac_list := [ ] ;
65102: LD_ADDR_VAR 0 17
65106: PUSH
65107: EMPTY
65108: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
65109: LD_ADDR_VAR 0 6
65113: PUSH
65114: LD_VAR 0 1
65118: PPUSH
65119: CALL_OW 274
65123: PPUSH
65124: LD_VAR 0 2
65128: PPUSH
65129: LD_INT 0
65131: PPUSH
65132: CALL 62698 0 3
65136: PPUSH
65137: LD_INT 30
65139: PUSH
65140: LD_INT 3
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PPUSH
65147: CALL_OW 72
65151: ST_TO_ADDR
// if not factories then
65152: LD_VAR 0 6
65156: NOT
65157: IFFALSE 65161
// exit ;
65159: GO 66127
// for i in factories do
65161: LD_ADDR_VAR 0 8
65165: PUSH
65166: LD_VAR 0 6
65170: PUSH
65171: FOR_IN
65172: IFFALSE 65197
// fac_list := fac_list union AvailableWeaponList ( i ) ;
65174: LD_ADDR_VAR 0 17
65178: PUSH
65179: LD_VAR 0 17
65183: PUSH
65184: LD_VAR 0 8
65188: PPUSH
65189: CALL_OW 478
65193: UNION
65194: ST_TO_ADDR
65195: GO 65171
65197: POP
65198: POP
// if not fac_list then
65199: LD_VAR 0 17
65203: NOT
65204: IFFALSE 65208
// exit ;
65206: GO 66127
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
65208: LD_ADDR_VAR 0 5
65212: PUSH
65213: LD_INT 4
65215: PUSH
65216: LD_INT 5
65218: PUSH
65219: LD_INT 9
65221: PUSH
65222: LD_INT 10
65224: PUSH
65225: LD_INT 6
65227: PUSH
65228: LD_INT 7
65230: PUSH
65231: LD_INT 11
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 27
65245: PUSH
65246: LD_INT 28
65248: PUSH
65249: LD_INT 26
65251: PUSH
65252: LD_INT 30
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 43
65263: PUSH
65264: LD_INT 44
65266: PUSH
65267: LD_INT 46
65269: PUSH
65270: LD_INT 45
65272: PUSH
65273: LD_INT 47
65275: PUSH
65276: LD_INT 49
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: LIST
65291: PUSH
65292: LD_VAR 0 12
65296: ARRAY
65297: ST_TO_ADDR
// list := list isect fac_list ;
65298: LD_ADDR_VAR 0 5
65302: PUSH
65303: LD_VAR 0 5
65307: PUSH
65308: LD_VAR 0 17
65312: ISECT
65313: ST_TO_ADDR
// if not list then
65314: LD_VAR 0 5
65318: NOT
65319: IFFALSE 65323
// exit ;
65321: GO 66127
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
65323: LD_VAR 0 12
65327: PUSH
65328: LD_INT 3
65330: EQUAL
65331: PUSH
65332: LD_INT 49
65334: PUSH
65335: LD_VAR 0 5
65339: IN
65340: AND
65341: PUSH
65342: LD_INT 31
65344: PPUSH
65345: LD_VAR 0 16
65349: PPUSH
65350: CALL_OW 321
65354: PUSH
65355: LD_INT 2
65357: EQUAL
65358: AND
65359: IFFALSE 65419
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
65361: LD_INT 22
65363: PUSH
65364: LD_VAR 0 16
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 35
65375: PUSH
65376: LD_INT 49
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 91
65385: PUSH
65386: LD_VAR 0 1
65390: PUSH
65391: LD_INT 10
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: LIST
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: LIST
65403: PPUSH
65404: CALL_OW 69
65408: NOT
65409: IFFALSE 65419
// weapon := ru_time_lapser ;
65411: LD_ADDR_VAR 0 18
65415: PUSH
65416: LD_INT 49
65418: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
65419: LD_VAR 0 12
65423: PUSH
65424: LD_INT 1
65426: PUSH
65427: LD_INT 2
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: IN
65434: PUSH
65435: LD_INT 11
65437: PUSH
65438: LD_VAR 0 5
65442: IN
65443: PUSH
65444: LD_INT 30
65446: PUSH
65447: LD_VAR 0 5
65451: IN
65452: OR
65453: AND
65454: PUSH
65455: LD_INT 6
65457: PPUSH
65458: LD_VAR 0 16
65462: PPUSH
65463: CALL_OW 321
65467: PUSH
65468: LD_INT 2
65470: EQUAL
65471: AND
65472: IFFALSE 65637
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
65474: LD_INT 22
65476: PUSH
65477: LD_VAR 0 16
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 2
65488: PUSH
65489: LD_INT 35
65491: PUSH
65492: LD_INT 11
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 35
65501: PUSH
65502: LD_INT 30
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 91
65516: PUSH
65517: LD_VAR 0 1
65521: PUSH
65522: LD_INT 18
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: LIST
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: LIST
65534: PPUSH
65535: CALL_OW 69
65539: NOT
65540: PUSH
65541: LD_INT 22
65543: PUSH
65544: LD_VAR 0 16
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 2
65555: PUSH
65556: LD_INT 30
65558: PUSH
65559: LD_INT 32
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 30
65568: PUSH
65569: LD_INT 33
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 91
65583: PUSH
65584: LD_VAR 0 1
65588: PUSH
65589: LD_INT 12
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: LIST
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: LIST
65601: PUSH
65602: EMPTY
65603: LIST
65604: PPUSH
65605: CALL_OW 69
65609: PUSH
65610: LD_INT 2
65612: GREATER
65613: AND
65614: IFFALSE 65637
// weapon := [ us_radar , ar_radar ] [ nat ] ;
65616: LD_ADDR_VAR 0 18
65620: PUSH
65621: LD_INT 11
65623: PUSH
65624: LD_INT 30
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_VAR 0 12
65635: ARRAY
65636: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
65637: LD_VAR 0 18
65641: NOT
65642: PUSH
65643: LD_INT 40
65645: PPUSH
65646: LD_VAR 0 16
65650: PPUSH
65651: CALL_OW 321
65655: PUSH
65656: LD_INT 2
65658: EQUAL
65659: AND
65660: PUSH
65661: LD_INT 7
65663: PUSH
65664: LD_VAR 0 5
65668: IN
65669: PUSH
65670: LD_INT 28
65672: PUSH
65673: LD_VAR 0 5
65677: IN
65678: OR
65679: PUSH
65680: LD_INT 45
65682: PUSH
65683: LD_VAR 0 5
65687: IN
65688: OR
65689: AND
65690: IFFALSE 65944
// begin hex := GetHexInfo ( x , y ) ;
65692: LD_ADDR_VAR 0 4
65696: PUSH
65697: LD_VAR 0 10
65701: PPUSH
65702: LD_VAR 0 11
65706: PPUSH
65707: CALL_OW 546
65711: ST_TO_ADDR
// if hex [ 1 ] then
65712: LD_VAR 0 4
65716: PUSH
65717: LD_INT 1
65719: ARRAY
65720: IFFALSE 65724
// exit ;
65722: GO 66127
// height := hex [ 2 ] ;
65724: LD_ADDR_VAR 0 15
65728: PUSH
65729: LD_VAR 0 4
65733: PUSH
65734: LD_INT 2
65736: ARRAY
65737: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
65738: LD_ADDR_VAR 0 14
65742: PUSH
65743: LD_INT 0
65745: PUSH
65746: LD_INT 2
65748: PUSH
65749: LD_INT 3
65751: PUSH
65752: LD_INT 5
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: ST_TO_ADDR
// for i in tmp do
65761: LD_ADDR_VAR 0 8
65765: PUSH
65766: LD_VAR 0 14
65770: PUSH
65771: FOR_IN
65772: IFFALSE 65942
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
65774: LD_ADDR_VAR 0 9
65778: PUSH
65779: LD_VAR 0 10
65783: PPUSH
65784: LD_VAR 0 8
65788: PPUSH
65789: LD_INT 5
65791: PPUSH
65792: CALL_OW 272
65796: PUSH
65797: LD_VAR 0 11
65801: PPUSH
65802: LD_VAR 0 8
65806: PPUSH
65807: LD_INT 5
65809: PPUSH
65810: CALL_OW 273
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
65819: LD_VAR 0 9
65823: PUSH
65824: LD_INT 1
65826: ARRAY
65827: PPUSH
65828: LD_VAR 0 9
65832: PUSH
65833: LD_INT 2
65835: ARRAY
65836: PPUSH
65837: CALL_OW 488
65841: IFFALSE 65940
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
65843: LD_ADDR_VAR 0 4
65847: PUSH
65848: LD_VAR 0 9
65852: PUSH
65853: LD_INT 1
65855: ARRAY
65856: PPUSH
65857: LD_VAR 0 9
65861: PUSH
65862: LD_INT 2
65864: ARRAY
65865: PPUSH
65866: CALL_OW 546
65870: ST_TO_ADDR
// if hex [ 1 ] then
65871: LD_VAR 0 4
65875: PUSH
65876: LD_INT 1
65878: ARRAY
65879: IFFALSE 65883
// continue ;
65881: GO 65771
// h := hex [ 2 ] ;
65883: LD_ADDR_VAR 0 13
65887: PUSH
65888: LD_VAR 0 4
65892: PUSH
65893: LD_INT 2
65895: ARRAY
65896: ST_TO_ADDR
// if h + 7 < height then
65897: LD_VAR 0 13
65901: PUSH
65902: LD_INT 7
65904: PLUS
65905: PUSH
65906: LD_VAR 0 15
65910: LESS
65911: IFFALSE 65940
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
65913: LD_ADDR_VAR 0 18
65917: PUSH
65918: LD_INT 7
65920: PUSH
65921: LD_INT 28
65923: PUSH
65924: LD_INT 45
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: LIST
65931: PUSH
65932: LD_VAR 0 12
65936: ARRAY
65937: ST_TO_ADDR
// break ;
65938: GO 65942
// end ; end ; end ;
65940: GO 65771
65942: POP
65943: POP
// end ; if not weapon then
65944: LD_VAR 0 18
65948: NOT
65949: IFFALSE 66009
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
65951: LD_ADDR_VAR 0 5
65955: PUSH
65956: LD_VAR 0 5
65960: PUSH
65961: LD_INT 11
65963: PUSH
65964: LD_INT 30
65966: PUSH
65967: LD_INT 49
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: LIST
65974: DIFF
65975: ST_TO_ADDR
// if not list then
65976: LD_VAR 0 5
65980: NOT
65981: IFFALSE 65985
// exit ;
65983: GO 66127
// weapon := list [ rand ( 1 , list ) ] ;
65985: LD_ADDR_VAR 0 18
65989: PUSH
65990: LD_VAR 0 5
65994: PUSH
65995: LD_INT 1
65997: PPUSH
65998: LD_VAR 0 5
66002: PPUSH
66003: CALL_OW 12
66007: ARRAY
66008: ST_TO_ADDR
// end ; if weapon then
66009: LD_VAR 0 18
66013: IFFALSE 66127
// begin tmp := CostOfWeapon ( weapon ) ;
66015: LD_ADDR_VAR 0 14
66019: PUSH
66020: LD_VAR 0 18
66024: PPUSH
66025: CALL_OW 451
66029: ST_TO_ADDR
// j := GetBase ( tower ) ;
66030: LD_ADDR_VAR 0 9
66034: PUSH
66035: LD_VAR 0 1
66039: PPUSH
66040: CALL_OW 274
66044: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
66045: LD_VAR 0 9
66049: PPUSH
66050: LD_INT 1
66052: PPUSH
66053: CALL_OW 275
66057: PUSH
66058: LD_VAR 0 14
66062: PUSH
66063: LD_INT 1
66065: ARRAY
66066: GREATEREQUAL
66067: PUSH
66068: LD_VAR 0 9
66072: PPUSH
66073: LD_INT 2
66075: PPUSH
66076: CALL_OW 275
66080: PUSH
66081: LD_VAR 0 14
66085: PUSH
66086: LD_INT 2
66088: ARRAY
66089: GREATEREQUAL
66090: AND
66091: PUSH
66092: LD_VAR 0 9
66096: PPUSH
66097: LD_INT 3
66099: PPUSH
66100: CALL_OW 275
66104: PUSH
66105: LD_VAR 0 14
66109: PUSH
66110: LD_INT 3
66112: ARRAY
66113: GREATEREQUAL
66114: AND
66115: IFFALSE 66127
// result := weapon ;
66117: LD_ADDR_VAR 0 3
66121: PUSH
66122: LD_VAR 0 18
66126: ST_TO_ADDR
// end ; end ;
66127: LD_VAR 0 3
66131: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
66132: LD_INT 0
66134: PPUSH
66135: PPUSH
// result := true ;
66136: LD_ADDR_VAR 0 3
66140: PUSH
66141: LD_INT 1
66143: ST_TO_ADDR
// if array1 = array2 then
66144: LD_VAR 0 1
66148: PUSH
66149: LD_VAR 0 2
66153: EQUAL
66154: IFFALSE 66214
// begin for i = 1 to array1 do
66156: LD_ADDR_VAR 0 4
66160: PUSH
66161: DOUBLE
66162: LD_INT 1
66164: DEC
66165: ST_TO_ADDR
66166: LD_VAR 0 1
66170: PUSH
66171: FOR_TO
66172: IFFALSE 66210
// if array1 [ i ] <> array2 [ i ] then
66174: LD_VAR 0 1
66178: PUSH
66179: LD_VAR 0 4
66183: ARRAY
66184: PUSH
66185: LD_VAR 0 2
66189: PUSH
66190: LD_VAR 0 4
66194: ARRAY
66195: NONEQUAL
66196: IFFALSE 66208
// begin result := false ;
66198: LD_ADDR_VAR 0 3
66202: PUSH
66203: LD_INT 0
66205: ST_TO_ADDR
// break ;
66206: GO 66210
// end ;
66208: GO 66171
66210: POP
66211: POP
// end else
66212: GO 66222
// result := false ;
66214: LD_ADDR_VAR 0 3
66218: PUSH
66219: LD_INT 0
66221: ST_TO_ADDR
// end ;
66222: LD_VAR 0 3
66226: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
66227: LD_INT 0
66229: PPUSH
66230: PPUSH
// if not array1 or not array2 then
66231: LD_VAR 0 1
66235: NOT
66236: PUSH
66237: LD_VAR 0 2
66241: NOT
66242: OR
66243: IFFALSE 66247
// exit ;
66245: GO 66311
// result := true ;
66247: LD_ADDR_VAR 0 3
66251: PUSH
66252: LD_INT 1
66254: ST_TO_ADDR
// for i = 1 to array1 do
66255: LD_ADDR_VAR 0 4
66259: PUSH
66260: DOUBLE
66261: LD_INT 1
66263: DEC
66264: ST_TO_ADDR
66265: LD_VAR 0 1
66269: PUSH
66270: FOR_TO
66271: IFFALSE 66309
// if array1 [ i ] <> array2 [ i ] then
66273: LD_VAR 0 1
66277: PUSH
66278: LD_VAR 0 4
66282: ARRAY
66283: PUSH
66284: LD_VAR 0 2
66288: PUSH
66289: LD_VAR 0 4
66293: ARRAY
66294: NONEQUAL
66295: IFFALSE 66307
// begin result := false ;
66297: LD_ADDR_VAR 0 3
66301: PUSH
66302: LD_INT 0
66304: ST_TO_ADDR
// break ;
66305: GO 66309
// end ;
66307: GO 66270
66309: POP
66310: POP
// end ;
66311: LD_VAR 0 3
66315: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
66316: LD_INT 0
66318: PPUSH
66319: PPUSH
66320: PPUSH
// pom := GetBase ( fac ) ;
66321: LD_ADDR_VAR 0 5
66325: PUSH
66326: LD_VAR 0 1
66330: PPUSH
66331: CALL_OW 274
66335: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
66336: LD_ADDR_VAR 0 4
66340: PUSH
66341: LD_VAR 0 2
66345: PUSH
66346: LD_INT 1
66348: ARRAY
66349: PPUSH
66350: LD_VAR 0 2
66354: PUSH
66355: LD_INT 2
66357: ARRAY
66358: PPUSH
66359: LD_VAR 0 2
66363: PUSH
66364: LD_INT 3
66366: ARRAY
66367: PPUSH
66368: LD_VAR 0 2
66372: PUSH
66373: LD_INT 4
66375: ARRAY
66376: PPUSH
66377: CALL_OW 449
66381: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
66382: LD_ADDR_VAR 0 3
66386: PUSH
66387: LD_VAR 0 5
66391: PPUSH
66392: LD_INT 1
66394: PPUSH
66395: CALL_OW 275
66399: PUSH
66400: LD_VAR 0 4
66404: PUSH
66405: LD_INT 1
66407: ARRAY
66408: GREATEREQUAL
66409: PUSH
66410: LD_VAR 0 5
66414: PPUSH
66415: LD_INT 2
66417: PPUSH
66418: CALL_OW 275
66422: PUSH
66423: LD_VAR 0 4
66427: PUSH
66428: LD_INT 2
66430: ARRAY
66431: GREATEREQUAL
66432: AND
66433: PUSH
66434: LD_VAR 0 5
66438: PPUSH
66439: LD_INT 3
66441: PPUSH
66442: CALL_OW 275
66446: PUSH
66447: LD_VAR 0 4
66451: PUSH
66452: LD_INT 3
66454: ARRAY
66455: GREATEREQUAL
66456: AND
66457: ST_TO_ADDR
// end ;
66458: LD_VAR 0 3
66462: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
66463: LD_INT 0
66465: PPUSH
66466: PPUSH
66467: PPUSH
66468: PPUSH
// pom := GetBase ( building ) ;
66469: LD_ADDR_VAR 0 3
66473: PUSH
66474: LD_VAR 0 1
66478: PPUSH
66479: CALL_OW 274
66483: ST_TO_ADDR
// if not pom then
66484: LD_VAR 0 3
66488: NOT
66489: IFFALSE 66493
// exit ;
66491: GO 66663
// btype := GetBType ( building ) ;
66493: LD_ADDR_VAR 0 5
66497: PUSH
66498: LD_VAR 0 1
66502: PPUSH
66503: CALL_OW 266
66507: ST_TO_ADDR
// if btype = b_armoury then
66508: LD_VAR 0 5
66512: PUSH
66513: LD_INT 4
66515: EQUAL
66516: IFFALSE 66526
// btype := b_barracks ;
66518: LD_ADDR_VAR 0 5
66522: PUSH
66523: LD_INT 5
66525: ST_TO_ADDR
// if btype = b_depot then
66526: LD_VAR 0 5
66530: PUSH
66531: LD_INT 0
66533: EQUAL
66534: IFFALSE 66544
// btype := b_warehouse ;
66536: LD_ADDR_VAR 0 5
66540: PUSH
66541: LD_INT 1
66543: ST_TO_ADDR
// if btype = b_workshop then
66544: LD_VAR 0 5
66548: PUSH
66549: LD_INT 2
66551: EQUAL
66552: IFFALSE 66562
// btype := b_factory ;
66554: LD_ADDR_VAR 0 5
66558: PUSH
66559: LD_INT 3
66561: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
66562: LD_ADDR_VAR 0 4
66566: PUSH
66567: LD_VAR 0 5
66571: PPUSH
66572: LD_VAR 0 1
66576: PPUSH
66577: CALL_OW 248
66581: PPUSH
66582: CALL_OW 450
66586: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
66587: LD_ADDR_VAR 0 2
66591: PUSH
66592: LD_VAR 0 3
66596: PPUSH
66597: LD_INT 1
66599: PPUSH
66600: CALL_OW 275
66604: PUSH
66605: LD_VAR 0 4
66609: PUSH
66610: LD_INT 1
66612: ARRAY
66613: GREATEREQUAL
66614: PUSH
66615: LD_VAR 0 3
66619: PPUSH
66620: LD_INT 2
66622: PPUSH
66623: CALL_OW 275
66627: PUSH
66628: LD_VAR 0 4
66632: PUSH
66633: LD_INT 2
66635: ARRAY
66636: GREATEREQUAL
66637: AND
66638: PUSH
66639: LD_VAR 0 3
66643: PPUSH
66644: LD_INT 3
66646: PPUSH
66647: CALL_OW 275
66651: PUSH
66652: LD_VAR 0 4
66656: PUSH
66657: LD_INT 3
66659: ARRAY
66660: GREATEREQUAL
66661: AND
66662: ST_TO_ADDR
// end ;
66663: LD_VAR 0 2
66667: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
66668: LD_INT 0
66670: PPUSH
66671: PPUSH
66672: PPUSH
// pom := GetBase ( building ) ;
66673: LD_ADDR_VAR 0 4
66677: PUSH
66678: LD_VAR 0 1
66682: PPUSH
66683: CALL_OW 274
66687: ST_TO_ADDR
// if not pom then
66688: LD_VAR 0 4
66692: NOT
66693: IFFALSE 66697
// exit ;
66695: GO 66798
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
66697: LD_ADDR_VAR 0 5
66701: PUSH
66702: LD_VAR 0 2
66706: PPUSH
66707: LD_VAR 0 1
66711: PPUSH
66712: CALL_OW 248
66716: PPUSH
66717: CALL_OW 450
66721: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
66722: LD_ADDR_VAR 0 3
66726: PUSH
66727: LD_VAR 0 4
66731: PPUSH
66732: LD_INT 1
66734: PPUSH
66735: CALL_OW 275
66739: PUSH
66740: LD_VAR 0 5
66744: PUSH
66745: LD_INT 1
66747: ARRAY
66748: GREATEREQUAL
66749: PUSH
66750: LD_VAR 0 4
66754: PPUSH
66755: LD_INT 2
66757: PPUSH
66758: CALL_OW 275
66762: PUSH
66763: LD_VAR 0 5
66767: PUSH
66768: LD_INT 2
66770: ARRAY
66771: GREATEREQUAL
66772: AND
66773: PUSH
66774: LD_VAR 0 4
66778: PPUSH
66779: LD_INT 3
66781: PPUSH
66782: CALL_OW 275
66786: PUSH
66787: LD_VAR 0 5
66791: PUSH
66792: LD_INT 3
66794: ARRAY
66795: GREATEREQUAL
66796: AND
66797: ST_TO_ADDR
// end ;
66798: LD_VAR 0 3
66802: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
66803: LD_INT 0
66805: PPUSH
66806: PPUSH
66807: PPUSH
66808: PPUSH
66809: PPUSH
66810: PPUSH
66811: PPUSH
66812: PPUSH
66813: PPUSH
66814: PPUSH
66815: PPUSH
// result := false ;
66816: LD_ADDR_VAR 0 8
66820: PUSH
66821: LD_INT 0
66823: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
66824: LD_VAR 0 5
66828: NOT
66829: PUSH
66830: LD_VAR 0 1
66834: NOT
66835: OR
66836: PUSH
66837: LD_VAR 0 2
66841: NOT
66842: OR
66843: PUSH
66844: LD_VAR 0 3
66848: NOT
66849: OR
66850: IFFALSE 66854
// exit ;
66852: GO 67668
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
66854: LD_ADDR_VAR 0 14
66858: PUSH
66859: LD_VAR 0 1
66863: PPUSH
66864: LD_VAR 0 2
66868: PPUSH
66869: LD_VAR 0 3
66873: PPUSH
66874: LD_VAR 0 4
66878: PPUSH
66879: LD_VAR 0 5
66883: PUSH
66884: LD_INT 1
66886: ARRAY
66887: PPUSH
66888: CALL_OW 248
66892: PPUSH
66893: LD_INT 0
66895: PPUSH
66896: CALL 68921 0 6
66900: ST_TO_ADDR
// if not hexes then
66901: LD_VAR 0 14
66905: NOT
66906: IFFALSE 66910
// exit ;
66908: GO 67668
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66910: LD_ADDR_VAR 0 17
66914: PUSH
66915: LD_VAR 0 5
66919: PPUSH
66920: LD_INT 22
66922: PUSH
66923: LD_VAR 0 13
66927: PPUSH
66928: CALL_OW 255
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PUSH
66937: LD_INT 2
66939: PUSH
66940: LD_INT 30
66942: PUSH
66943: LD_INT 0
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 30
66952: PUSH
66953: LD_INT 1
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: LIST
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PPUSH
66969: CALL_OW 72
66973: ST_TO_ADDR
// for i = 1 to hexes do
66974: LD_ADDR_VAR 0 9
66978: PUSH
66979: DOUBLE
66980: LD_INT 1
66982: DEC
66983: ST_TO_ADDR
66984: LD_VAR 0 14
66988: PUSH
66989: FOR_TO
66990: IFFALSE 67666
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66992: LD_ADDR_VAR 0 13
66996: PUSH
66997: LD_VAR 0 14
67001: PUSH
67002: LD_VAR 0 9
67006: ARRAY
67007: PUSH
67008: LD_INT 1
67010: ARRAY
67011: PPUSH
67012: LD_VAR 0 14
67016: PUSH
67017: LD_VAR 0 9
67021: ARRAY
67022: PUSH
67023: LD_INT 2
67025: ARRAY
67026: PPUSH
67027: CALL_OW 428
67031: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
67032: LD_VAR 0 14
67036: PUSH
67037: LD_VAR 0 9
67041: ARRAY
67042: PUSH
67043: LD_INT 1
67045: ARRAY
67046: PPUSH
67047: LD_VAR 0 14
67051: PUSH
67052: LD_VAR 0 9
67056: ARRAY
67057: PUSH
67058: LD_INT 2
67060: ARRAY
67061: PPUSH
67062: CALL_OW 351
67066: PUSH
67067: LD_VAR 0 14
67071: PUSH
67072: LD_VAR 0 9
67076: ARRAY
67077: PUSH
67078: LD_INT 1
67080: ARRAY
67081: PPUSH
67082: LD_VAR 0 14
67086: PUSH
67087: LD_VAR 0 9
67091: ARRAY
67092: PUSH
67093: LD_INT 2
67095: ARRAY
67096: PPUSH
67097: CALL_OW 488
67101: NOT
67102: OR
67103: PUSH
67104: LD_VAR 0 13
67108: PPUSH
67109: CALL_OW 247
67113: PUSH
67114: LD_INT 3
67116: EQUAL
67117: OR
67118: IFFALSE 67124
// exit ;
67120: POP
67121: POP
67122: GO 67668
// if not tmp then
67124: LD_VAR 0 13
67128: NOT
67129: IFFALSE 67133
// continue ;
67131: GO 66989
// result := true ;
67133: LD_ADDR_VAR 0 8
67137: PUSH
67138: LD_INT 1
67140: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
67141: LD_VAR 0 6
67145: PUSH
67146: LD_VAR 0 13
67150: PPUSH
67151: CALL_OW 247
67155: PUSH
67156: LD_INT 2
67158: EQUAL
67159: AND
67160: PUSH
67161: LD_VAR 0 13
67165: PPUSH
67166: CALL_OW 263
67170: PUSH
67171: LD_INT 1
67173: EQUAL
67174: AND
67175: IFFALSE 67339
// begin if IsDrivenBy ( tmp ) then
67177: LD_VAR 0 13
67181: PPUSH
67182: CALL_OW 311
67186: IFFALSE 67190
// continue ;
67188: GO 66989
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
67190: LD_VAR 0 6
67194: PPUSH
67195: LD_INT 3
67197: PUSH
67198: LD_INT 60
67200: PUSH
67201: EMPTY
67202: LIST
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: LD_INT 3
67210: PUSH
67211: LD_INT 55
67213: PUSH
67214: EMPTY
67215: LIST
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PPUSH
67225: CALL_OW 72
67229: IFFALSE 67337
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
67231: LD_ADDR_VAR 0 18
67235: PUSH
67236: LD_VAR 0 6
67240: PPUSH
67241: LD_INT 3
67243: PUSH
67244: LD_INT 60
67246: PUSH
67247: EMPTY
67248: LIST
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 3
67256: PUSH
67257: LD_INT 55
67259: PUSH
67260: EMPTY
67261: LIST
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PPUSH
67271: CALL_OW 72
67275: PUSH
67276: LD_INT 1
67278: ARRAY
67279: ST_TO_ADDR
// if IsInUnit ( driver ) then
67280: LD_VAR 0 18
67284: PPUSH
67285: CALL_OW 310
67289: IFFALSE 67300
// ComExit ( driver ) ;
67291: LD_VAR 0 18
67295: PPUSH
67296: CALL 92702 0 1
// AddComEnterUnit ( driver , tmp ) ;
67300: LD_VAR 0 18
67304: PPUSH
67305: LD_VAR 0 13
67309: PPUSH
67310: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
67314: LD_VAR 0 18
67318: PPUSH
67319: LD_VAR 0 7
67323: PPUSH
67324: CALL_OW 173
// AddComExitVehicle ( driver ) ;
67328: LD_VAR 0 18
67332: PPUSH
67333: CALL_OW 181
// end ; continue ;
67337: GO 66989
// end ; if not cleaners or not tmp in cleaners then
67339: LD_VAR 0 6
67343: NOT
67344: PUSH
67345: LD_VAR 0 13
67349: PUSH
67350: LD_VAR 0 6
67354: IN
67355: NOT
67356: OR
67357: IFFALSE 67664
// begin if dep then
67359: LD_VAR 0 17
67363: IFFALSE 67499
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
67365: LD_ADDR_VAR 0 16
67369: PUSH
67370: LD_VAR 0 17
67374: PUSH
67375: LD_INT 1
67377: ARRAY
67378: PPUSH
67379: CALL_OW 250
67383: PPUSH
67384: LD_VAR 0 17
67388: PUSH
67389: LD_INT 1
67391: ARRAY
67392: PPUSH
67393: CALL_OW 254
67397: PPUSH
67398: LD_INT 5
67400: PPUSH
67401: CALL_OW 272
67405: PUSH
67406: LD_VAR 0 17
67410: PUSH
67411: LD_INT 1
67413: ARRAY
67414: PPUSH
67415: CALL_OW 251
67419: PPUSH
67420: LD_VAR 0 17
67424: PUSH
67425: LD_INT 1
67427: ARRAY
67428: PPUSH
67429: CALL_OW 254
67433: PPUSH
67434: LD_INT 5
67436: PPUSH
67437: CALL_OW 273
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
67446: LD_VAR 0 16
67450: PUSH
67451: LD_INT 1
67453: ARRAY
67454: PPUSH
67455: LD_VAR 0 16
67459: PUSH
67460: LD_INT 2
67462: ARRAY
67463: PPUSH
67464: CALL_OW 488
67468: IFFALSE 67499
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
67470: LD_VAR 0 13
67474: PPUSH
67475: LD_VAR 0 16
67479: PUSH
67480: LD_INT 1
67482: ARRAY
67483: PPUSH
67484: LD_VAR 0 16
67488: PUSH
67489: LD_INT 2
67491: ARRAY
67492: PPUSH
67493: CALL_OW 111
// continue ;
67497: GO 66989
// end ; end ; r := GetDir ( tmp ) ;
67499: LD_ADDR_VAR 0 15
67503: PUSH
67504: LD_VAR 0 13
67508: PPUSH
67509: CALL_OW 254
67513: ST_TO_ADDR
// if r = 5 then
67514: LD_VAR 0 15
67518: PUSH
67519: LD_INT 5
67521: EQUAL
67522: IFFALSE 67532
// r := 0 ;
67524: LD_ADDR_VAR 0 15
67528: PUSH
67529: LD_INT 0
67531: ST_TO_ADDR
// for j = r to 5 do
67532: LD_ADDR_VAR 0 10
67536: PUSH
67537: DOUBLE
67538: LD_VAR 0 15
67542: DEC
67543: ST_TO_ADDR
67544: LD_INT 5
67546: PUSH
67547: FOR_TO
67548: IFFALSE 67662
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
67550: LD_ADDR_VAR 0 11
67554: PUSH
67555: LD_VAR 0 13
67559: PPUSH
67560: CALL_OW 250
67564: PPUSH
67565: LD_VAR 0 10
67569: PPUSH
67570: LD_INT 2
67572: PPUSH
67573: CALL_OW 272
67577: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
67578: LD_ADDR_VAR 0 12
67582: PUSH
67583: LD_VAR 0 13
67587: PPUSH
67588: CALL_OW 251
67592: PPUSH
67593: LD_VAR 0 10
67597: PPUSH
67598: LD_INT 2
67600: PPUSH
67601: CALL_OW 273
67605: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
67606: LD_VAR 0 11
67610: PPUSH
67611: LD_VAR 0 12
67615: PPUSH
67616: CALL_OW 488
67620: PUSH
67621: LD_VAR 0 11
67625: PPUSH
67626: LD_VAR 0 12
67630: PPUSH
67631: CALL_OW 428
67635: NOT
67636: AND
67637: IFFALSE 67660
// begin ComMoveXY ( tmp , _x , _y ) ;
67639: LD_VAR 0 13
67643: PPUSH
67644: LD_VAR 0 11
67648: PPUSH
67649: LD_VAR 0 12
67653: PPUSH
67654: CALL_OW 111
// break ;
67658: GO 67662
// end ; end ;
67660: GO 67547
67662: POP
67663: POP
// end ; end ;
67664: GO 66989
67666: POP
67667: POP
// end ;
67668: LD_VAR 0 8
67672: RET
// export function BuildingTechInvented ( side , btype ) ; begin
67673: LD_INT 0
67675: PPUSH
// result := true ;
67676: LD_ADDR_VAR 0 3
67680: PUSH
67681: LD_INT 1
67683: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
67684: LD_VAR 0 2
67688: PUSH
67689: LD_INT 24
67691: DOUBLE
67692: EQUAL
67693: IFTRUE 67703
67695: LD_INT 33
67697: DOUBLE
67698: EQUAL
67699: IFTRUE 67703
67701: GO 67728
67703: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
67704: LD_ADDR_VAR 0 3
67708: PUSH
67709: LD_INT 32
67711: PPUSH
67712: LD_VAR 0 1
67716: PPUSH
67717: CALL_OW 321
67721: PUSH
67722: LD_INT 2
67724: EQUAL
67725: ST_TO_ADDR
67726: GO 68044
67728: LD_INT 20
67730: DOUBLE
67731: EQUAL
67732: IFTRUE 67736
67734: GO 67761
67736: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
67737: LD_ADDR_VAR 0 3
67741: PUSH
67742: LD_INT 6
67744: PPUSH
67745: LD_VAR 0 1
67749: PPUSH
67750: CALL_OW 321
67754: PUSH
67755: LD_INT 2
67757: EQUAL
67758: ST_TO_ADDR
67759: GO 68044
67761: LD_INT 22
67763: DOUBLE
67764: EQUAL
67765: IFTRUE 67775
67767: LD_INT 36
67769: DOUBLE
67770: EQUAL
67771: IFTRUE 67775
67773: GO 67800
67775: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
67776: LD_ADDR_VAR 0 3
67780: PUSH
67781: LD_INT 15
67783: PPUSH
67784: LD_VAR 0 1
67788: PPUSH
67789: CALL_OW 321
67793: PUSH
67794: LD_INT 2
67796: EQUAL
67797: ST_TO_ADDR
67798: GO 68044
67800: LD_INT 30
67802: DOUBLE
67803: EQUAL
67804: IFTRUE 67808
67806: GO 67833
67808: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
67809: LD_ADDR_VAR 0 3
67813: PUSH
67814: LD_INT 20
67816: PPUSH
67817: LD_VAR 0 1
67821: PPUSH
67822: CALL_OW 321
67826: PUSH
67827: LD_INT 2
67829: EQUAL
67830: ST_TO_ADDR
67831: GO 68044
67833: LD_INT 28
67835: DOUBLE
67836: EQUAL
67837: IFTRUE 67847
67839: LD_INT 21
67841: DOUBLE
67842: EQUAL
67843: IFTRUE 67847
67845: GO 67872
67847: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
67848: LD_ADDR_VAR 0 3
67852: PUSH
67853: LD_INT 21
67855: PPUSH
67856: LD_VAR 0 1
67860: PPUSH
67861: CALL_OW 321
67865: PUSH
67866: LD_INT 2
67868: EQUAL
67869: ST_TO_ADDR
67870: GO 68044
67872: LD_INT 16
67874: DOUBLE
67875: EQUAL
67876: IFTRUE 67880
67878: GO 67905
67880: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
67881: LD_ADDR_VAR 0 3
67885: PUSH
67886: LD_INT 84
67888: PPUSH
67889: LD_VAR 0 1
67893: PPUSH
67894: CALL_OW 321
67898: PUSH
67899: LD_INT 2
67901: EQUAL
67902: ST_TO_ADDR
67903: GO 68044
67905: LD_INT 19
67907: DOUBLE
67908: EQUAL
67909: IFTRUE 67919
67911: LD_INT 23
67913: DOUBLE
67914: EQUAL
67915: IFTRUE 67919
67917: GO 67944
67919: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
67920: LD_ADDR_VAR 0 3
67924: PUSH
67925: LD_INT 83
67927: PPUSH
67928: LD_VAR 0 1
67932: PPUSH
67933: CALL_OW 321
67937: PUSH
67938: LD_INT 2
67940: EQUAL
67941: ST_TO_ADDR
67942: GO 68044
67944: LD_INT 17
67946: DOUBLE
67947: EQUAL
67948: IFTRUE 67952
67950: GO 67977
67952: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
67953: LD_ADDR_VAR 0 3
67957: PUSH
67958: LD_INT 39
67960: PPUSH
67961: LD_VAR 0 1
67965: PPUSH
67966: CALL_OW 321
67970: PUSH
67971: LD_INT 2
67973: EQUAL
67974: ST_TO_ADDR
67975: GO 68044
67977: LD_INT 18
67979: DOUBLE
67980: EQUAL
67981: IFTRUE 67985
67983: GO 68010
67985: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
67986: LD_ADDR_VAR 0 3
67990: PUSH
67991: LD_INT 40
67993: PPUSH
67994: LD_VAR 0 1
67998: PPUSH
67999: CALL_OW 321
68003: PUSH
68004: LD_INT 2
68006: EQUAL
68007: ST_TO_ADDR
68008: GO 68044
68010: LD_INT 27
68012: DOUBLE
68013: EQUAL
68014: IFTRUE 68018
68016: GO 68043
68018: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
68019: LD_ADDR_VAR 0 3
68023: PUSH
68024: LD_INT 35
68026: PPUSH
68027: LD_VAR 0 1
68031: PPUSH
68032: CALL_OW 321
68036: PUSH
68037: LD_INT 2
68039: EQUAL
68040: ST_TO_ADDR
68041: GO 68044
68043: POP
// end ;
68044: LD_VAR 0 3
68048: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
68049: LD_INT 0
68051: PPUSH
68052: PPUSH
68053: PPUSH
68054: PPUSH
68055: PPUSH
68056: PPUSH
68057: PPUSH
68058: PPUSH
68059: PPUSH
68060: PPUSH
68061: PPUSH
// result := false ;
68062: LD_ADDR_VAR 0 6
68066: PUSH
68067: LD_INT 0
68069: ST_TO_ADDR
// if btype = b_depot then
68070: LD_VAR 0 2
68074: PUSH
68075: LD_INT 0
68077: EQUAL
68078: IFFALSE 68090
// begin result := true ;
68080: LD_ADDR_VAR 0 6
68084: PUSH
68085: LD_INT 1
68087: ST_TO_ADDR
// exit ;
68088: GO 68916
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
68090: LD_VAR 0 1
68094: NOT
68095: PUSH
68096: LD_VAR 0 1
68100: PPUSH
68101: CALL_OW 266
68105: PUSH
68106: LD_INT 0
68108: PUSH
68109: LD_INT 1
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: IN
68116: NOT
68117: OR
68118: PUSH
68119: LD_VAR 0 2
68123: NOT
68124: OR
68125: PUSH
68126: LD_VAR 0 5
68130: PUSH
68131: LD_INT 0
68133: PUSH
68134: LD_INT 1
68136: PUSH
68137: LD_INT 2
68139: PUSH
68140: LD_INT 3
68142: PUSH
68143: LD_INT 4
68145: PUSH
68146: LD_INT 5
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: IN
68157: NOT
68158: OR
68159: PUSH
68160: LD_VAR 0 3
68164: PPUSH
68165: LD_VAR 0 4
68169: PPUSH
68170: CALL_OW 488
68174: NOT
68175: OR
68176: IFFALSE 68180
// exit ;
68178: GO 68916
// side := GetSide ( depot ) ;
68180: LD_ADDR_VAR 0 9
68184: PUSH
68185: LD_VAR 0 1
68189: PPUSH
68190: CALL_OW 255
68194: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
68195: LD_VAR 0 9
68199: PPUSH
68200: LD_VAR 0 2
68204: PPUSH
68205: CALL 67673 0 2
68209: NOT
68210: IFFALSE 68214
// exit ;
68212: GO 68916
// pom := GetBase ( depot ) ;
68214: LD_ADDR_VAR 0 10
68218: PUSH
68219: LD_VAR 0 1
68223: PPUSH
68224: CALL_OW 274
68228: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
68229: LD_ADDR_VAR 0 11
68233: PUSH
68234: LD_VAR 0 2
68238: PPUSH
68239: LD_VAR 0 1
68243: PPUSH
68244: CALL_OW 248
68248: PPUSH
68249: CALL_OW 450
68253: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
68254: LD_VAR 0 10
68258: PPUSH
68259: LD_INT 1
68261: PPUSH
68262: CALL_OW 275
68266: PUSH
68267: LD_VAR 0 11
68271: PUSH
68272: LD_INT 1
68274: ARRAY
68275: GREATEREQUAL
68276: PUSH
68277: LD_VAR 0 10
68281: PPUSH
68282: LD_INT 2
68284: PPUSH
68285: CALL_OW 275
68289: PUSH
68290: LD_VAR 0 11
68294: PUSH
68295: LD_INT 2
68297: ARRAY
68298: GREATEREQUAL
68299: AND
68300: PUSH
68301: LD_VAR 0 10
68305: PPUSH
68306: LD_INT 3
68308: PPUSH
68309: CALL_OW 275
68313: PUSH
68314: LD_VAR 0 11
68318: PUSH
68319: LD_INT 3
68321: ARRAY
68322: GREATEREQUAL
68323: AND
68324: NOT
68325: IFFALSE 68329
// exit ;
68327: GO 68916
// if GetBType ( depot ) = b_depot then
68329: LD_VAR 0 1
68333: PPUSH
68334: CALL_OW 266
68338: PUSH
68339: LD_INT 0
68341: EQUAL
68342: IFFALSE 68354
// dist := 28 else
68344: LD_ADDR_VAR 0 14
68348: PUSH
68349: LD_INT 28
68351: ST_TO_ADDR
68352: GO 68362
// dist := 36 ;
68354: LD_ADDR_VAR 0 14
68358: PUSH
68359: LD_INT 36
68361: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
68362: LD_VAR 0 1
68366: PPUSH
68367: LD_VAR 0 3
68371: PPUSH
68372: LD_VAR 0 4
68376: PPUSH
68377: CALL_OW 297
68381: PUSH
68382: LD_VAR 0 14
68386: GREATER
68387: IFFALSE 68391
// exit ;
68389: GO 68916
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
68391: LD_ADDR_VAR 0 12
68395: PUSH
68396: LD_VAR 0 2
68400: PPUSH
68401: LD_VAR 0 3
68405: PPUSH
68406: LD_VAR 0 4
68410: PPUSH
68411: LD_VAR 0 5
68415: PPUSH
68416: LD_VAR 0 1
68420: PPUSH
68421: CALL_OW 248
68425: PPUSH
68426: LD_INT 0
68428: PPUSH
68429: CALL 68921 0 6
68433: ST_TO_ADDR
// if not hexes then
68434: LD_VAR 0 12
68438: NOT
68439: IFFALSE 68443
// exit ;
68441: GO 68916
// hex := GetHexInfo ( x , y ) ;
68443: LD_ADDR_VAR 0 15
68447: PUSH
68448: LD_VAR 0 3
68452: PPUSH
68453: LD_VAR 0 4
68457: PPUSH
68458: CALL_OW 546
68462: ST_TO_ADDR
// if hex [ 1 ] then
68463: LD_VAR 0 15
68467: PUSH
68468: LD_INT 1
68470: ARRAY
68471: IFFALSE 68475
// exit ;
68473: GO 68916
// height := hex [ 2 ] ;
68475: LD_ADDR_VAR 0 13
68479: PUSH
68480: LD_VAR 0 15
68484: PUSH
68485: LD_INT 2
68487: ARRAY
68488: ST_TO_ADDR
// for i = 1 to hexes do
68489: LD_ADDR_VAR 0 7
68493: PUSH
68494: DOUBLE
68495: LD_INT 1
68497: DEC
68498: ST_TO_ADDR
68499: LD_VAR 0 12
68503: PUSH
68504: FOR_TO
68505: IFFALSE 68835
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
68507: LD_VAR 0 12
68511: PUSH
68512: LD_VAR 0 7
68516: ARRAY
68517: PUSH
68518: LD_INT 1
68520: ARRAY
68521: PPUSH
68522: LD_VAR 0 12
68526: PUSH
68527: LD_VAR 0 7
68531: ARRAY
68532: PUSH
68533: LD_INT 2
68535: ARRAY
68536: PPUSH
68537: CALL_OW 488
68541: NOT
68542: PUSH
68543: LD_VAR 0 12
68547: PUSH
68548: LD_VAR 0 7
68552: ARRAY
68553: PUSH
68554: LD_INT 1
68556: ARRAY
68557: PPUSH
68558: LD_VAR 0 12
68562: PUSH
68563: LD_VAR 0 7
68567: ARRAY
68568: PUSH
68569: LD_INT 2
68571: ARRAY
68572: PPUSH
68573: CALL_OW 428
68577: PUSH
68578: LD_INT 0
68580: GREATER
68581: OR
68582: PUSH
68583: LD_VAR 0 12
68587: PUSH
68588: LD_VAR 0 7
68592: ARRAY
68593: PUSH
68594: LD_INT 1
68596: ARRAY
68597: PPUSH
68598: LD_VAR 0 12
68602: PUSH
68603: LD_VAR 0 7
68607: ARRAY
68608: PUSH
68609: LD_INT 2
68611: ARRAY
68612: PPUSH
68613: CALL_OW 351
68617: OR
68618: IFFALSE 68624
// exit ;
68620: POP
68621: POP
68622: GO 68916
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68624: LD_ADDR_VAR 0 8
68628: PUSH
68629: LD_VAR 0 12
68633: PUSH
68634: LD_VAR 0 7
68638: ARRAY
68639: PUSH
68640: LD_INT 1
68642: ARRAY
68643: PPUSH
68644: LD_VAR 0 12
68648: PUSH
68649: LD_VAR 0 7
68653: ARRAY
68654: PUSH
68655: LD_INT 2
68657: ARRAY
68658: PPUSH
68659: CALL_OW 546
68663: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
68664: LD_VAR 0 8
68668: PUSH
68669: LD_INT 1
68671: ARRAY
68672: PUSH
68673: LD_VAR 0 8
68677: PUSH
68678: LD_INT 2
68680: ARRAY
68681: PUSH
68682: LD_VAR 0 13
68686: PUSH
68687: LD_INT 2
68689: PLUS
68690: GREATER
68691: OR
68692: PUSH
68693: LD_VAR 0 8
68697: PUSH
68698: LD_INT 2
68700: ARRAY
68701: PUSH
68702: LD_VAR 0 13
68706: PUSH
68707: LD_INT 2
68709: MINUS
68710: LESS
68711: OR
68712: PUSH
68713: LD_VAR 0 8
68717: PUSH
68718: LD_INT 3
68720: ARRAY
68721: PUSH
68722: LD_INT 0
68724: PUSH
68725: LD_INT 8
68727: PUSH
68728: LD_INT 9
68730: PUSH
68731: LD_INT 10
68733: PUSH
68734: LD_INT 11
68736: PUSH
68737: LD_INT 12
68739: PUSH
68740: LD_INT 13
68742: PUSH
68743: LD_INT 16
68745: PUSH
68746: LD_INT 17
68748: PUSH
68749: LD_INT 18
68751: PUSH
68752: LD_INT 19
68754: PUSH
68755: LD_INT 20
68757: PUSH
68758: LD_INT 21
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: IN
68776: NOT
68777: OR
68778: PUSH
68779: LD_VAR 0 8
68783: PUSH
68784: LD_INT 5
68786: ARRAY
68787: NOT
68788: OR
68789: PUSH
68790: LD_VAR 0 8
68794: PUSH
68795: LD_INT 6
68797: ARRAY
68798: PUSH
68799: LD_INT 1
68801: PUSH
68802: LD_INT 2
68804: PUSH
68805: LD_INT 7
68807: PUSH
68808: LD_INT 9
68810: PUSH
68811: LD_INT 10
68813: PUSH
68814: LD_INT 11
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: IN
68825: NOT
68826: OR
68827: IFFALSE 68833
// exit ;
68829: POP
68830: POP
68831: GO 68916
// end ;
68833: GO 68504
68835: POP
68836: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
68837: LD_VAR 0 9
68841: PPUSH
68842: LD_VAR 0 3
68846: PPUSH
68847: LD_VAR 0 4
68851: PPUSH
68852: LD_INT 20
68854: PPUSH
68855: CALL 60839 0 4
68859: PUSH
68860: LD_INT 4
68862: ARRAY
68863: IFFALSE 68867
// exit ;
68865: GO 68916
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
68867: LD_VAR 0 2
68871: PUSH
68872: LD_INT 29
68874: PUSH
68875: LD_INT 30
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: IN
68882: PUSH
68883: LD_VAR 0 3
68887: PPUSH
68888: LD_VAR 0 4
68892: PPUSH
68893: LD_VAR 0 9
68897: PPUSH
68898: CALL_OW 440
68902: NOT
68903: AND
68904: IFFALSE 68908
// exit ;
68906: GO 68916
// result := true ;
68908: LD_ADDR_VAR 0 6
68912: PUSH
68913: LD_INT 1
68915: ST_TO_ADDR
// end ;
68916: LD_VAR 0 6
68920: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
68921: LD_INT 0
68923: PPUSH
68924: PPUSH
68925: PPUSH
68926: PPUSH
68927: PPUSH
68928: PPUSH
68929: PPUSH
68930: PPUSH
68931: PPUSH
68932: PPUSH
68933: PPUSH
68934: PPUSH
68935: PPUSH
68936: PPUSH
68937: PPUSH
68938: PPUSH
68939: PPUSH
68940: PPUSH
68941: PPUSH
68942: PPUSH
68943: PPUSH
68944: PPUSH
68945: PPUSH
68946: PPUSH
68947: PPUSH
68948: PPUSH
68949: PPUSH
68950: PPUSH
68951: PPUSH
68952: PPUSH
68953: PPUSH
68954: PPUSH
68955: PPUSH
68956: PPUSH
68957: PPUSH
68958: PPUSH
68959: PPUSH
68960: PPUSH
68961: PPUSH
68962: PPUSH
68963: PPUSH
68964: PPUSH
68965: PPUSH
68966: PPUSH
68967: PPUSH
68968: PPUSH
68969: PPUSH
68970: PPUSH
68971: PPUSH
68972: PPUSH
68973: PPUSH
68974: PPUSH
68975: PPUSH
68976: PPUSH
68977: PPUSH
68978: PPUSH
68979: PPUSH
68980: PPUSH
// result = [ ] ;
68981: LD_ADDR_VAR 0 7
68985: PUSH
68986: EMPTY
68987: ST_TO_ADDR
// temp_list = [ ] ;
68988: LD_ADDR_VAR 0 9
68992: PUSH
68993: EMPTY
68994: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
68995: LD_VAR 0 4
68999: PUSH
69000: LD_INT 0
69002: PUSH
69003: LD_INT 1
69005: PUSH
69006: LD_INT 2
69008: PUSH
69009: LD_INT 3
69011: PUSH
69012: LD_INT 4
69014: PUSH
69015: LD_INT 5
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: IN
69026: NOT
69027: PUSH
69028: LD_VAR 0 1
69032: PUSH
69033: LD_INT 0
69035: PUSH
69036: LD_INT 1
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: IN
69043: PUSH
69044: LD_VAR 0 5
69048: PUSH
69049: LD_INT 1
69051: PUSH
69052: LD_INT 2
69054: PUSH
69055: LD_INT 3
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: LIST
69062: IN
69063: NOT
69064: AND
69065: OR
69066: IFFALSE 69070
// exit ;
69068: GO 87461
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
69070: LD_VAR 0 1
69074: PUSH
69075: LD_INT 6
69077: PUSH
69078: LD_INT 7
69080: PUSH
69081: LD_INT 8
69083: PUSH
69084: LD_INT 13
69086: PUSH
69087: LD_INT 12
69089: PUSH
69090: LD_INT 15
69092: PUSH
69093: LD_INT 11
69095: PUSH
69096: LD_INT 14
69098: PUSH
69099: LD_INT 10
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: IN
69113: IFFALSE 69123
// btype = b_lab ;
69115: LD_ADDR_VAR 0 1
69119: PUSH
69120: LD_INT 6
69122: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
69123: LD_VAR 0 6
69127: PUSH
69128: LD_INT 0
69130: PUSH
69131: LD_INT 1
69133: PUSH
69134: LD_INT 2
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: LIST
69141: IN
69142: NOT
69143: PUSH
69144: LD_VAR 0 1
69148: PUSH
69149: LD_INT 0
69151: PUSH
69152: LD_INT 1
69154: PUSH
69155: LD_INT 2
69157: PUSH
69158: LD_INT 3
69160: PUSH
69161: LD_INT 6
69163: PUSH
69164: LD_INT 36
69166: PUSH
69167: LD_INT 4
69169: PUSH
69170: LD_INT 5
69172: PUSH
69173: LD_INT 31
69175: PUSH
69176: LD_INT 32
69178: PUSH
69179: LD_INT 33
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: IN
69195: NOT
69196: PUSH
69197: LD_VAR 0 6
69201: PUSH
69202: LD_INT 1
69204: EQUAL
69205: AND
69206: OR
69207: PUSH
69208: LD_VAR 0 1
69212: PUSH
69213: LD_INT 2
69215: PUSH
69216: LD_INT 3
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: IN
69223: NOT
69224: PUSH
69225: LD_VAR 0 6
69229: PUSH
69230: LD_INT 2
69232: EQUAL
69233: AND
69234: OR
69235: IFFALSE 69245
// mode = 0 ;
69237: LD_ADDR_VAR 0 6
69241: PUSH
69242: LD_INT 0
69244: ST_TO_ADDR
// case mode of 0 :
69245: LD_VAR 0 6
69249: PUSH
69250: LD_INT 0
69252: DOUBLE
69253: EQUAL
69254: IFTRUE 69258
69256: GO 80711
69258: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69259: LD_ADDR_VAR 0 11
69263: PUSH
69264: LD_INT 0
69266: PUSH
69267: LD_INT 0
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 0
69276: PUSH
69277: LD_INT 1
69279: NEG
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 1
69287: PUSH
69288: LD_INT 0
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 1
69297: PUSH
69298: LD_INT 1
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: PUSH
69305: LD_INT 0
69307: PUSH
69308: LD_INT 1
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PUSH
69315: LD_INT 1
69317: NEG
69318: PUSH
69319: LD_INT 0
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: PUSH
69326: LD_INT 1
69328: NEG
69329: PUSH
69330: LD_INT 1
69332: NEG
69333: PUSH
69334: EMPTY
69335: LIST
69336: LIST
69337: PUSH
69338: LD_INT 1
69340: NEG
69341: PUSH
69342: LD_INT 2
69344: NEG
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 0
69352: PUSH
69353: LD_INT 2
69355: NEG
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PUSH
69361: LD_INT 1
69363: PUSH
69364: LD_INT 1
69366: NEG
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: PUSH
69372: LD_INT 1
69374: PUSH
69375: LD_INT 2
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 0
69384: PUSH
69385: LD_INT 2
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PUSH
69392: LD_INT 1
69394: NEG
69395: PUSH
69396: LD_INT 1
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PUSH
69403: LD_INT 1
69405: PUSH
69406: LD_INT 3
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 0
69415: PUSH
69416: LD_INT 3
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: PUSH
69423: LD_INT 1
69425: NEG
69426: PUSH
69427: LD_INT 2
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: LIST
69438: LIST
69439: LIST
69440: LIST
69441: LIST
69442: LIST
69443: LIST
69444: LIST
69445: LIST
69446: LIST
69447: LIST
69448: LIST
69449: LIST
69450: LIST
69451: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69452: LD_ADDR_VAR 0 12
69456: PUSH
69457: LD_INT 0
69459: PUSH
69460: LD_INT 0
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: LD_INT 0
69469: PUSH
69470: LD_INT 1
69472: NEG
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PUSH
69478: LD_INT 1
69480: PUSH
69481: LD_INT 0
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PUSH
69488: LD_INT 1
69490: PUSH
69491: LD_INT 1
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 0
69500: PUSH
69501: LD_INT 1
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 1
69510: NEG
69511: PUSH
69512: LD_INT 0
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: PUSH
69519: LD_INT 1
69521: NEG
69522: PUSH
69523: LD_INT 1
69525: NEG
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 1
69533: PUSH
69534: LD_INT 1
69536: NEG
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: PUSH
69542: LD_INT 2
69544: PUSH
69545: LD_INT 0
69547: PUSH
69548: EMPTY
69549: LIST
69550: LIST
69551: PUSH
69552: LD_INT 2
69554: PUSH
69555: LD_INT 1
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: PUSH
69562: LD_INT 1
69564: NEG
69565: PUSH
69566: LD_INT 1
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PUSH
69573: LD_INT 2
69575: NEG
69576: PUSH
69577: LD_INT 0
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 2
69586: NEG
69587: PUSH
69588: LD_INT 1
69590: NEG
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 2
69598: NEG
69599: PUSH
69600: LD_INT 1
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 3
69609: NEG
69610: PUSH
69611: LD_INT 0
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 3
69620: NEG
69621: PUSH
69622: LD_INT 1
69624: NEG
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69648: LD_ADDR_VAR 0 13
69652: PUSH
69653: LD_INT 0
69655: PUSH
69656: LD_INT 0
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: LD_INT 0
69665: PUSH
69666: LD_INT 1
69668: NEG
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: PUSH
69674: LD_INT 1
69676: PUSH
69677: LD_INT 0
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: PUSH
69684: LD_INT 1
69686: PUSH
69687: LD_INT 1
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: LD_INT 0
69696: PUSH
69697: LD_INT 1
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PUSH
69704: LD_INT 1
69706: NEG
69707: PUSH
69708: LD_INT 0
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PUSH
69715: LD_INT 1
69717: NEG
69718: PUSH
69719: LD_INT 1
69721: NEG
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: LD_INT 1
69729: NEG
69730: PUSH
69731: LD_INT 2
69733: NEG
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 2
69741: PUSH
69742: LD_INT 1
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 2
69751: PUSH
69752: LD_INT 2
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 1
69761: PUSH
69762: LD_INT 2
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: LD_INT 2
69771: NEG
69772: PUSH
69773: LD_INT 1
69775: NEG
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: PUSH
69781: LD_INT 2
69783: NEG
69784: PUSH
69785: LD_INT 2
69787: NEG
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: PUSH
69793: LD_INT 2
69795: NEG
69796: PUSH
69797: LD_INT 3
69799: NEG
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: LD_INT 3
69807: NEG
69808: PUSH
69809: LD_INT 2
69811: NEG
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: LD_INT 3
69819: NEG
69820: PUSH
69821: LD_INT 3
69823: NEG
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: LIST
69841: LIST
69842: LIST
69843: LIST
69844: LIST
69845: LIST
69846: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69847: LD_ADDR_VAR 0 14
69851: PUSH
69852: LD_INT 0
69854: PUSH
69855: LD_INT 0
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_INT 0
69864: PUSH
69865: LD_INT 1
69867: NEG
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 1
69875: PUSH
69876: LD_INT 0
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_INT 1
69885: PUSH
69886: LD_INT 1
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 0
69895: PUSH
69896: LD_INT 1
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 1
69905: NEG
69906: PUSH
69907: LD_INT 0
69909: PUSH
69910: EMPTY
69911: LIST
69912: LIST
69913: PUSH
69914: LD_INT 1
69916: NEG
69917: PUSH
69918: LD_INT 1
69920: NEG
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PUSH
69926: LD_INT 1
69928: NEG
69929: PUSH
69930: LD_INT 2
69932: NEG
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: LD_INT 0
69940: PUSH
69941: LD_INT 2
69943: NEG
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: LD_INT 1
69951: PUSH
69952: LD_INT 1
69954: NEG
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: PUSH
69960: LD_INT 1
69962: PUSH
69963: LD_INT 2
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: PUSH
69970: LD_INT 0
69972: PUSH
69973: LD_INT 2
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: LD_INT 1
69982: NEG
69983: PUSH
69984: LD_INT 1
69986: PUSH
69987: EMPTY
69988: LIST
69989: LIST
69990: PUSH
69991: LD_INT 1
69993: NEG
69994: PUSH
69995: LD_INT 3
69997: NEG
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 0
70005: PUSH
70006: LD_INT 3
70008: NEG
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: PUSH
70014: LD_INT 1
70016: PUSH
70017: LD_INT 2
70019: NEG
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70043: LD_ADDR_VAR 0 15
70047: PUSH
70048: LD_INT 0
70050: PUSH
70051: LD_INT 0
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 0
70060: PUSH
70061: LD_INT 1
70063: NEG
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: PUSH
70069: LD_INT 1
70071: PUSH
70072: LD_INT 0
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 1
70081: PUSH
70082: LD_INT 1
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 0
70091: PUSH
70092: LD_INT 1
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 1
70101: NEG
70102: PUSH
70103: LD_INT 0
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 1
70112: NEG
70113: PUSH
70114: LD_INT 1
70116: NEG
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: LD_INT 1
70124: PUSH
70125: LD_INT 1
70127: NEG
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: LD_INT 2
70135: PUSH
70136: LD_INT 0
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PUSH
70143: LD_INT 2
70145: PUSH
70146: LD_INT 1
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 1
70155: NEG
70156: PUSH
70157: LD_INT 1
70159: PUSH
70160: EMPTY
70161: LIST
70162: LIST
70163: PUSH
70164: LD_INT 2
70166: NEG
70167: PUSH
70168: LD_INT 0
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: LD_INT 2
70177: NEG
70178: PUSH
70179: LD_INT 1
70181: NEG
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 2
70189: PUSH
70190: LD_INT 1
70192: NEG
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PUSH
70198: LD_INT 3
70200: PUSH
70201: LD_INT 0
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: PUSH
70208: LD_INT 3
70210: PUSH
70211: LD_INT 1
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: LIST
70224: LIST
70225: LIST
70226: LIST
70227: LIST
70228: LIST
70229: LIST
70230: LIST
70231: LIST
70232: LIST
70233: LIST
70234: LIST
70235: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70236: LD_ADDR_VAR 0 16
70240: PUSH
70241: LD_INT 0
70243: PUSH
70244: LD_INT 0
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 0
70253: PUSH
70254: LD_INT 1
70256: NEG
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: PUSH
70262: LD_INT 1
70264: PUSH
70265: LD_INT 0
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 1
70274: PUSH
70275: LD_INT 1
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 0
70284: PUSH
70285: LD_INT 1
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: PUSH
70292: LD_INT 1
70294: NEG
70295: PUSH
70296: LD_INT 0
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 1
70305: NEG
70306: PUSH
70307: LD_INT 1
70309: NEG
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PUSH
70315: LD_INT 1
70317: NEG
70318: PUSH
70319: LD_INT 2
70321: NEG
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: PUSH
70327: LD_INT 2
70329: PUSH
70330: LD_INT 1
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: PUSH
70337: LD_INT 2
70339: PUSH
70340: LD_INT 2
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: PUSH
70347: LD_INT 1
70349: PUSH
70350: LD_INT 2
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: PUSH
70357: LD_INT 2
70359: NEG
70360: PUSH
70361: LD_INT 1
70363: NEG
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: LD_INT 2
70371: NEG
70372: PUSH
70373: LD_INT 2
70375: NEG
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PUSH
70381: LD_INT 3
70383: PUSH
70384: LD_INT 2
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 3
70393: PUSH
70394: LD_INT 3
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: PUSH
70401: LD_INT 2
70403: PUSH
70404: LD_INT 3
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: LIST
70421: LIST
70422: LIST
70423: LIST
70424: LIST
70425: LIST
70426: LIST
70427: LIST
70428: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70429: LD_ADDR_VAR 0 17
70433: PUSH
70434: LD_INT 0
70436: PUSH
70437: LD_INT 0
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: PUSH
70444: LD_INT 0
70446: PUSH
70447: LD_INT 1
70449: NEG
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: LD_INT 1
70457: PUSH
70458: LD_INT 0
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: LD_INT 1
70467: PUSH
70468: LD_INT 1
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 0
70477: PUSH
70478: LD_INT 1
70480: PUSH
70481: EMPTY
70482: LIST
70483: LIST
70484: PUSH
70485: LD_INT 1
70487: NEG
70488: PUSH
70489: LD_INT 0
70491: PUSH
70492: EMPTY
70493: LIST
70494: LIST
70495: PUSH
70496: LD_INT 1
70498: NEG
70499: PUSH
70500: LD_INT 1
70502: NEG
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 1
70510: NEG
70511: PUSH
70512: LD_INT 2
70514: NEG
70515: PUSH
70516: EMPTY
70517: LIST
70518: LIST
70519: PUSH
70520: LD_INT 0
70522: PUSH
70523: LD_INT 2
70525: NEG
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PUSH
70531: LD_INT 1
70533: PUSH
70534: LD_INT 1
70536: NEG
70537: PUSH
70538: EMPTY
70539: LIST
70540: LIST
70541: PUSH
70542: LD_INT 2
70544: PUSH
70545: LD_INT 0
70547: PUSH
70548: EMPTY
70549: LIST
70550: LIST
70551: PUSH
70552: LD_INT 2
70554: PUSH
70555: LD_INT 1
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: LD_INT 2
70564: PUSH
70565: LD_INT 2
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: PUSH
70572: LD_INT 1
70574: PUSH
70575: LD_INT 2
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PUSH
70582: LD_INT 0
70584: PUSH
70585: LD_INT 2
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: PUSH
70592: LD_INT 1
70594: NEG
70595: PUSH
70596: LD_INT 1
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 2
70605: NEG
70606: PUSH
70607: LD_INT 0
70609: PUSH
70610: EMPTY
70611: LIST
70612: LIST
70613: PUSH
70614: LD_INT 2
70616: NEG
70617: PUSH
70618: LD_INT 1
70620: NEG
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: PUSH
70626: LD_INT 2
70628: NEG
70629: PUSH
70630: LD_INT 2
70632: NEG
70633: PUSH
70634: EMPTY
70635: LIST
70636: LIST
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70659: LD_ADDR_VAR 0 18
70663: PUSH
70664: LD_INT 0
70666: PUSH
70667: LD_INT 0
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: PUSH
70674: LD_INT 0
70676: PUSH
70677: LD_INT 1
70679: NEG
70680: PUSH
70681: EMPTY
70682: LIST
70683: LIST
70684: PUSH
70685: LD_INT 1
70687: PUSH
70688: LD_INT 0
70690: PUSH
70691: EMPTY
70692: LIST
70693: LIST
70694: PUSH
70695: LD_INT 1
70697: PUSH
70698: LD_INT 1
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: LD_INT 0
70707: PUSH
70708: LD_INT 1
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PUSH
70715: LD_INT 1
70717: NEG
70718: PUSH
70719: LD_INT 0
70721: PUSH
70722: EMPTY
70723: LIST
70724: LIST
70725: PUSH
70726: LD_INT 1
70728: NEG
70729: PUSH
70730: LD_INT 1
70732: NEG
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PUSH
70738: LD_INT 1
70740: NEG
70741: PUSH
70742: LD_INT 2
70744: NEG
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: PUSH
70750: LD_INT 0
70752: PUSH
70753: LD_INT 2
70755: NEG
70756: PUSH
70757: EMPTY
70758: LIST
70759: LIST
70760: PUSH
70761: LD_INT 1
70763: PUSH
70764: LD_INT 1
70766: NEG
70767: PUSH
70768: EMPTY
70769: LIST
70770: LIST
70771: PUSH
70772: LD_INT 2
70774: PUSH
70775: LD_INT 0
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: PUSH
70782: LD_INT 2
70784: PUSH
70785: LD_INT 1
70787: PUSH
70788: EMPTY
70789: LIST
70790: LIST
70791: PUSH
70792: LD_INT 2
70794: PUSH
70795: LD_INT 2
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: PUSH
70802: LD_INT 1
70804: PUSH
70805: LD_INT 2
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: PUSH
70812: LD_INT 0
70814: PUSH
70815: LD_INT 2
70817: PUSH
70818: EMPTY
70819: LIST
70820: LIST
70821: PUSH
70822: LD_INT 1
70824: NEG
70825: PUSH
70826: LD_INT 1
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: LD_INT 2
70835: NEG
70836: PUSH
70837: LD_INT 0
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: LD_INT 2
70846: NEG
70847: PUSH
70848: LD_INT 1
70850: NEG
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: PUSH
70856: LD_INT 2
70858: NEG
70859: PUSH
70860: LD_INT 2
70862: NEG
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: LIST
70887: LIST
70888: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70889: LD_ADDR_VAR 0 19
70893: PUSH
70894: LD_INT 0
70896: PUSH
70897: LD_INT 0
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: PUSH
70904: LD_INT 0
70906: PUSH
70907: LD_INT 1
70909: NEG
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: PUSH
70915: LD_INT 1
70917: PUSH
70918: LD_INT 0
70920: PUSH
70921: EMPTY
70922: LIST
70923: LIST
70924: PUSH
70925: LD_INT 1
70927: PUSH
70928: LD_INT 1
70930: PUSH
70931: EMPTY
70932: LIST
70933: LIST
70934: PUSH
70935: LD_INT 0
70937: PUSH
70938: LD_INT 1
70940: PUSH
70941: EMPTY
70942: LIST
70943: LIST
70944: PUSH
70945: LD_INT 1
70947: NEG
70948: PUSH
70949: LD_INT 0
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: LD_INT 1
70958: NEG
70959: PUSH
70960: LD_INT 1
70962: NEG
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: PUSH
70968: LD_INT 1
70970: NEG
70971: PUSH
70972: LD_INT 2
70974: NEG
70975: PUSH
70976: EMPTY
70977: LIST
70978: LIST
70979: PUSH
70980: LD_INT 0
70982: PUSH
70983: LD_INT 2
70985: NEG
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: PUSH
70991: LD_INT 1
70993: PUSH
70994: LD_INT 1
70996: NEG
70997: PUSH
70998: EMPTY
70999: LIST
71000: LIST
71001: PUSH
71002: LD_INT 2
71004: PUSH
71005: LD_INT 0
71007: PUSH
71008: EMPTY
71009: LIST
71010: LIST
71011: PUSH
71012: LD_INT 2
71014: PUSH
71015: LD_INT 1
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 2
71024: PUSH
71025: LD_INT 2
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: PUSH
71032: LD_INT 1
71034: PUSH
71035: LD_INT 2
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: PUSH
71042: LD_INT 0
71044: PUSH
71045: LD_INT 2
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: PUSH
71052: LD_INT 1
71054: NEG
71055: PUSH
71056: LD_INT 1
71058: PUSH
71059: EMPTY
71060: LIST
71061: LIST
71062: PUSH
71063: LD_INT 2
71065: NEG
71066: PUSH
71067: LD_INT 0
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: PUSH
71074: LD_INT 2
71076: NEG
71077: PUSH
71078: LD_INT 1
71080: NEG
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: PUSH
71086: LD_INT 2
71088: NEG
71089: PUSH
71090: LD_INT 2
71092: NEG
71093: PUSH
71094: EMPTY
71095: LIST
71096: LIST
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: LIST
71102: LIST
71103: LIST
71104: LIST
71105: LIST
71106: LIST
71107: LIST
71108: LIST
71109: LIST
71110: LIST
71111: LIST
71112: LIST
71113: LIST
71114: LIST
71115: LIST
71116: LIST
71117: LIST
71118: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71119: LD_ADDR_VAR 0 20
71123: PUSH
71124: LD_INT 0
71126: PUSH
71127: LD_INT 0
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: PUSH
71134: LD_INT 0
71136: PUSH
71137: LD_INT 1
71139: NEG
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: PUSH
71145: LD_INT 1
71147: PUSH
71148: LD_INT 0
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: PUSH
71155: LD_INT 1
71157: PUSH
71158: LD_INT 1
71160: PUSH
71161: EMPTY
71162: LIST
71163: LIST
71164: PUSH
71165: LD_INT 0
71167: PUSH
71168: LD_INT 1
71170: PUSH
71171: EMPTY
71172: LIST
71173: LIST
71174: PUSH
71175: LD_INT 1
71177: NEG
71178: PUSH
71179: LD_INT 0
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: PUSH
71186: LD_INT 1
71188: NEG
71189: PUSH
71190: LD_INT 1
71192: NEG
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_INT 1
71200: NEG
71201: PUSH
71202: LD_INT 2
71204: NEG
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: LD_INT 0
71212: PUSH
71213: LD_INT 2
71215: NEG
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PUSH
71221: LD_INT 1
71223: PUSH
71224: LD_INT 1
71226: NEG
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: PUSH
71232: LD_INT 2
71234: PUSH
71235: LD_INT 0
71237: PUSH
71238: EMPTY
71239: LIST
71240: LIST
71241: PUSH
71242: LD_INT 2
71244: PUSH
71245: LD_INT 1
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: PUSH
71252: LD_INT 2
71254: PUSH
71255: LD_INT 2
71257: PUSH
71258: EMPTY
71259: LIST
71260: LIST
71261: PUSH
71262: LD_INT 1
71264: PUSH
71265: LD_INT 2
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: PUSH
71272: LD_INT 0
71274: PUSH
71275: LD_INT 2
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: LD_INT 1
71284: NEG
71285: PUSH
71286: LD_INT 1
71288: PUSH
71289: EMPTY
71290: LIST
71291: LIST
71292: PUSH
71293: LD_INT 2
71295: NEG
71296: PUSH
71297: LD_INT 0
71299: PUSH
71300: EMPTY
71301: LIST
71302: LIST
71303: PUSH
71304: LD_INT 2
71306: NEG
71307: PUSH
71308: LD_INT 1
71310: NEG
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: PUSH
71316: LD_INT 2
71318: NEG
71319: PUSH
71320: LD_INT 2
71322: NEG
71323: PUSH
71324: EMPTY
71325: LIST
71326: LIST
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: LIST
71332: LIST
71333: LIST
71334: LIST
71335: LIST
71336: LIST
71337: LIST
71338: LIST
71339: LIST
71340: LIST
71341: LIST
71342: LIST
71343: LIST
71344: LIST
71345: LIST
71346: LIST
71347: LIST
71348: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71349: LD_ADDR_VAR 0 21
71353: PUSH
71354: LD_INT 0
71356: PUSH
71357: LD_INT 0
71359: PUSH
71360: EMPTY
71361: LIST
71362: LIST
71363: PUSH
71364: LD_INT 0
71366: PUSH
71367: LD_INT 1
71369: NEG
71370: PUSH
71371: EMPTY
71372: LIST
71373: LIST
71374: PUSH
71375: LD_INT 1
71377: PUSH
71378: LD_INT 0
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: PUSH
71385: LD_INT 1
71387: PUSH
71388: LD_INT 1
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: PUSH
71395: LD_INT 0
71397: PUSH
71398: LD_INT 1
71400: PUSH
71401: EMPTY
71402: LIST
71403: LIST
71404: PUSH
71405: LD_INT 1
71407: NEG
71408: PUSH
71409: LD_INT 0
71411: PUSH
71412: EMPTY
71413: LIST
71414: LIST
71415: PUSH
71416: LD_INT 1
71418: NEG
71419: PUSH
71420: LD_INT 1
71422: NEG
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: PUSH
71428: LD_INT 1
71430: NEG
71431: PUSH
71432: LD_INT 2
71434: NEG
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: PUSH
71440: LD_INT 0
71442: PUSH
71443: LD_INT 2
71445: NEG
71446: PUSH
71447: EMPTY
71448: LIST
71449: LIST
71450: PUSH
71451: LD_INT 1
71453: PUSH
71454: LD_INT 1
71456: NEG
71457: PUSH
71458: EMPTY
71459: LIST
71460: LIST
71461: PUSH
71462: LD_INT 2
71464: PUSH
71465: LD_INT 0
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: PUSH
71472: LD_INT 2
71474: PUSH
71475: LD_INT 1
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: PUSH
71482: LD_INT 2
71484: PUSH
71485: LD_INT 2
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: LD_INT 1
71494: PUSH
71495: LD_INT 2
71497: PUSH
71498: EMPTY
71499: LIST
71500: LIST
71501: PUSH
71502: LD_INT 0
71504: PUSH
71505: LD_INT 2
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: PUSH
71512: LD_INT 1
71514: NEG
71515: PUSH
71516: LD_INT 1
71518: PUSH
71519: EMPTY
71520: LIST
71521: LIST
71522: PUSH
71523: LD_INT 2
71525: NEG
71526: PUSH
71527: LD_INT 0
71529: PUSH
71530: EMPTY
71531: LIST
71532: LIST
71533: PUSH
71534: LD_INT 2
71536: NEG
71537: PUSH
71538: LD_INT 1
71540: NEG
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: PUSH
71546: LD_INT 2
71548: NEG
71549: PUSH
71550: LD_INT 2
71552: NEG
71553: PUSH
71554: EMPTY
71555: LIST
71556: LIST
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: LIST
71562: LIST
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71579: LD_ADDR_VAR 0 22
71583: PUSH
71584: LD_INT 0
71586: PUSH
71587: LD_INT 0
71589: PUSH
71590: EMPTY
71591: LIST
71592: LIST
71593: PUSH
71594: LD_INT 0
71596: PUSH
71597: LD_INT 1
71599: NEG
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: PUSH
71605: LD_INT 1
71607: PUSH
71608: LD_INT 0
71610: PUSH
71611: EMPTY
71612: LIST
71613: LIST
71614: PUSH
71615: LD_INT 1
71617: PUSH
71618: LD_INT 1
71620: PUSH
71621: EMPTY
71622: LIST
71623: LIST
71624: PUSH
71625: LD_INT 0
71627: PUSH
71628: LD_INT 1
71630: PUSH
71631: EMPTY
71632: LIST
71633: LIST
71634: PUSH
71635: LD_INT 1
71637: NEG
71638: PUSH
71639: LD_INT 0
71641: PUSH
71642: EMPTY
71643: LIST
71644: LIST
71645: PUSH
71646: LD_INT 1
71648: NEG
71649: PUSH
71650: LD_INT 1
71652: NEG
71653: PUSH
71654: EMPTY
71655: LIST
71656: LIST
71657: PUSH
71658: LD_INT 1
71660: NEG
71661: PUSH
71662: LD_INT 2
71664: NEG
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: PUSH
71670: LD_INT 0
71672: PUSH
71673: LD_INT 2
71675: NEG
71676: PUSH
71677: EMPTY
71678: LIST
71679: LIST
71680: PUSH
71681: LD_INT 1
71683: PUSH
71684: LD_INT 1
71686: NEG
71687: PUSH
71688: EMPTY
71689: LIST
71690: LIST
71691: PUSH
71692: LD_INT 2
71694: PUSH
71695: LD_INT 0
71697: PUSH
71698: EMPTY
71699: LIST
71700: LIST
71701: PUSH
71702: LD_INT 2
71704: PUSH
71705: LD_INT 1
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: PUSH
71712: LD_INT 2
71714: PUSH
71715: LD_INT 2
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: PUSH
71722: LD_INT 1
71724: PUSH
71725: LD_INT 2
71727: PUSH
71728: EMPTY
71729: LIST
71730: LIST
71731: PUSH
71732: LD_INT 0
71734: PUSH
71735: LD_INT 2
71737: PUSH
71738: EMPTY
71739: LIST
71740: LIST
71741: PUSH
71742: LD_INT 1
71744: NEG
71745: PUSH
71746: LD_INT 1
71748: PUSH
71749: EMPTY
71750: LIST
71751: LIST
71752: PUSH
71753: LD_INT 2
71755: NEG
71756: PUSH
71757: LD_INT 0
71759: PUSH
71760: EMPTY
71761: LIST
71762: LIST
71763: PUSH
71764: LD_INT 2
71766: NEG
71767: PUSH
71768: LD_INT 1
71770: NEG
71771: PUSH
71772: EMPTY
71773: LIST
71774: LIST
71775: PUSH
71776: LD_INT 2
71778: NEG
71779: PUSH
71780: LD_INT 2
71782: NEG
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: PUSH
71788: EMPTY
71789: LIST
71790: LIST
71791: LIST
71792: LIST
71793: LIST
71794: LIST
71795: LIST
71796: LIST
71797: LIST
71798: LIST
71799: LIST
71800: LIST
71801: LIST
71802: LIST
71803: LIST
71804: LIST
71805: LIST
71806: LIST
71807: LIST
71808: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
71809: LD_ADDR_VAR 0 23
71813: PUSH
71814: LD_INT 0
71816: PUSH
71817: LD_INT 0
71819: PUSH
71820: EMPTY
71821: LIST
71822: LIST
71823: PUSH
71824: LD_INT 0
71826: PUSH
71827: LD_INT 1
71829: NEG
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: PUSH
71835: LD_INT 1
71837: PUSH
71838: LD_INT 0
71840: PUSH
71841: EMPTY
71842: LIST
71843: LIST
71844: PUSH
71845: LD_INT 1
71847: PUSH
71848: LD_INT 1
71850: PUSH
71851: EMPTY
71852: LIST
71853: LIST
71854: PUSH
71855: LD_INT 0
71857: PUSH
71858: LD_INT 1
71860: PUSH
71861: EMPTY
71862: LIST
71863: LIST
71864: PUSH
71865: LD_INT 1
71867: NEG
71868: PUSH
71869: LD_INT 0
71871: PUSH
71872: EMPTY
71873: LIST
71874: LIST
71875: PUSH
71876: LD_INT 1
71878: NEG
71879: PUSH
71880: LD_INT 1
71882: NEG
71883: PUSH
71884: EMPTY
71885: LIST
71886: LIST
71887: PUSH
71888: LD_INT 1
71890: NEG
71891: PUSH
71892: LD_INT 2
71894: NEG
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: PUSH
71900: LD_INT 0
71902: PUSH
71903: LD_INT 2
71905: NEG
71906: PUSH
71907: EMPTY
71908: LIST
71909: LIST
71910: PUSH
71911: LD_INT 1
71913: PUSH
71914: LD_INT 1
71916: NEG
71917: PUSH
71918: EMPTY
71919: LIST
71920: LIST
71921: PUSH
71922: LD_INT 2
71924: PUSH
71925: LD_INT 0
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: PUSH
71932: LD_INT 2
71934: PUSH
71935: LD_INT 1
71937: PUSH
71938: EMPTY
71939: LIST
71940: LIST
71941: PUSH
71942: LD_INT 2
71944: PUSH
71945: LD_INT 2
71947: PUSH
71948: EMPTY
71949: LIST
71950: LIST
71951: PUSH
71952: LD_INT 1
71954: PUSH
71955: LD_INT 2
71957: PUSH
71958: EMPTY
71959: LIST
71960: LIST
71961: PUSH
71962: LD_INT 0
71964: PUSH
71965: LD_INT 2
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: PUSH
71972: LD_INT 1
71974: NEG
71975: PUSH
71976: LD_INT 1
71978: PUSH
71979: EMPTY
71980: LIST
71981: LIST
71982: PUSH
71983: LD_INT 2
71985: NEG
71986: PUSH
71987: LD_INT 0
71989: PUSH
71990: EMPTY
71991: LIST
71992: LIST
71993: PUSH
71994: LD_INT 2
71996: NEG
71997: PUSH
71998: LD_INT 1
72000: NEG
72001: PUSH
72002: EMPTY
72003: LIST
72004: LIST
72005: PUSH
72006: LD_INT 2
72008: NEG
72009: PUSH
72010: LD_INT 2
72012: NEG
72013: PUSH
72014: EMPTY
72015: LIST
72016: LIST
72017: PUSH
72018: LD_INT 2
72020: NEG
72021: PUSH
72022: LD_INT 3
72024: NEG
72025: PUSH
72026: EMPTY
72027: LIST
72028: LIST
72029: PUSH
72030: LD_INT 1
72032: NEG
72033: PUSH
72034: LD_INT 3
72036: NEG
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: PUSH
72042: LD_INT 1
72044: PUSH
72045: LD_INT 2
72047: NEG
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: PUSH
72053: LD_INT 2
72055: PUSH
72056: LD_INT 1
72058: NEG
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PUSH
72064: EMPTY
72065: LIST
72066: LIST
72067: LIST
72068: LIST
72069: LIST
72070: LIST
72071: LIST
72072: LIST
72073: LIST
72074: LIST
72075: LIST
72076: LIST
72077: LIST
72078: LIST
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: LIST
72084: LIST
72085: LIST
72086: LIST
72087: LIST
72088: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
72089: LD_ADDR_VAR 0 24
72093: PUSH
72094: LD_INT 0
72096: PUSH
72097: LD_INT 0
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: PUSH
72104: LD_INT 0
72106: PUSH
72107: LD_INT 1
72109: NEG
72110: PUSH
72111: EMPTY
72112: LIST
72113: LIST
72114: PUSH
72115: LD_INT 1
72117: PUSH
72118: LD_INT 0
72120: PUSH
72121: EMPTY
72122: LIST
72123: LIST
72124: PUSH
72125: LD_INT 1
72127: PUSH
72128: LD_INT 1
72130: PUSH
72131: EMPTY
72132: LIST
72133: LIST
72134: PUSH
72135: LD_INT 0
72137: PUSH
72138: LD_INT 1
72140: PUSH
72141: EMPTY
72142: LIST
72143: LIST
72144: PUSH
72145: LD_INT 1
72147: NEG
72148: PUSH
72149: LD_INT 0
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: PUSH
72156: LD_INT 1
72158: NEG
72159: PUSH
72160: LD_INT 1
72162: NEG
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: PUSH
72168: LD_INT 1
72170: NEG
72171: PUSH
72172: LD_INT 2
72174: NEG
72175: PUSH
72176: EMPTY
72177: LIST
72178: LIST
72179: PUSH
72180: LD_INT 0
72182: PUSH
72183: LD_INT 2
72185: NEG
72186: PUSH
72187: EMPTY
72188: LIST
72189: LIST
72190: PUSH
72191: LD_INT 1
72193: PUSH
72194: LD_INT 1
72196: NEG
72197: PUSH
72198: EMPTY
72199: LIST
72200: LIST
72201: PUSH
72202: LD_INT 2
72204: PUSH
72205: LD_INT 0
72207: PUSH
72208: EMPTY
72209: LIST
72210: LIST
72211: PUSH
72212: LD_INT 2
72214: PUSH
72215: LD_INT 1
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: PUSH
72222: LD_INT 2
72224: PUSH
72225: LD_INT 2
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: PUSH
72232: LD_INT 1
72234: PUSH
72235: LD_INT 2
72237: PUSH
72238: EMPTY
72239: LIST
72240: LIST
72241: PUSH
72242: LD_INT 0
72244: PUSH
72245: LD_INT 2
72247: PUSH
72248: EMPTY
72249: LIST
72250: LIST
72251: PUSH
72252: LD_INT 1
72254: NEG
72255: PUSH
72256: LD_INT 1
72258: PUSH
72259: EMPTY
72260: LIST
72261: LIST
72262: PUSH
72263: LD_INT 2
72265: NEG
72266: PUSH
72267: LD_INT 0
72269: PUSH
72270: EMPTY
72271: LIST
72272: LIST
72273: PUSH
72274: LD_INT 2
72276: NEG
72277: PUSH
72278: LD_INT 1
72280: NEG
72281: PUSH
72282: EMPTY
72283: LIST
72284: LIST
72285: PUSH
72286: LD_INT 2
72288: NEG
72289: PUSH
72290: LD_INT 2
72292: NEG
72293: PUSH
72294: EMPTY
72295: LIST
72296: LIST
72297: PUSH
72298: LD_INT 1
72300: PUSH
72301: LD_INT 2
72303: NEG
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PUSH
72309: LD_INT 2
72311: PUSH
72312: LD_INT 1
72314: NEG
72315: PUSH
72316: EMPTY
72317: LIST
72318: LIST
72319: PUSH
72320: LD_INT 3
72322: PUSH
72323: LD_INT 1
72325: PUSH
72326: EMPTY
72327: LIST
72328: LIST
72329: PUSH
72330: LD_INT 3
72332: PUSH
72333: LD_INT 2
72335: PUSH
72336: EMPTY
72337: LIST
72338: LIST
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: LIST
72344: LIST
72345: LIST
72346: LIST
72347: LIST
72348: LIST
72349: LIST
72350: LIST
72351: LIST
72352: LIST
72353: LIST
72354: LIST
72355: LIST
72356: LIST
72357: LIST
72358: LIST
72359: LIST
72360: LIST
72361: LIST
72362: LIST
72363: LIST
72364: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
72365: LD_ADDR_VAR 0 25
72369: PUSH
72370: LD_INT 0
72372: PUSH
72373: LD_INT 0
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: PUSH
72380: LD_INT 0
72382: PUSH
72383: LD_INT 1
72385: NEG
72386: PUSH
72387: EMPTY
72388: LIST
72389: LIST
72390: PUSH
72391: LD_INT 1
72393: PUSH
72394: LD_INT 0
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 1
72403: PUSH
72404: LD_INT 1
72406: PUSH
72407: EMPTY
72408: LIST
72409: LIST
72410: PUSH
72411: LD_INT 0
72413: PUSH
72414: LD_INT 1
72416: PUSH
72417: EMPTY
72418: LIST
72419: LIST
72420: PUSH
72421: LD_INT 1
72423: NEG
72424: PUSH
72425: LD_INT 0
72427: PUSH
72428: EMPTY
72429: LIST
72430: LIST
72431: PUSH
72432: LD_INT 1
72434: NEG
72435: PUSH
72436: LD_INT 1
72438: NEG
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: PUSH
72444: LD_INT 1
72446: NEG
72447: PUSH
72448: LD_INT 2
72450: NEG
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: PUSH
72456: LD_INT 0
72458: PUSH
72459: LD_INT 2
72461: NEG
72462: PUSH
72463: EMPTY
72464: LIST
72465: LIST
72466: PUSH
72467: LD_INT 1
72469: PUSH
72470: LD_INT 1
72472: NEG
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: PUSH
72478: LD_INT 2
72480: PUSH
72481: LD_INT 0
72483: PUSH
72484: EMPTY
72485: LIST
72486: LIST
72487: PUSH
72488: LD_INT 2
72490: PUSH
72491: LD_INT 1
72493: PUSH
72494: EMPTY
72495: LIST
72496: LIST
72497: PUSH
72498: LD_INT 2
72500: PUSH
72501: LD_INT 2
72503: PUSH
72504: EMPTY
72505: LIST
72506: LIST
72507: PUSH
72508: LD_INT 1
72510: PUSH
72511: LD_INT 2
72513: PUSH
72514: EMPTY
72515: LIST
72516: LIST
72517: PUSH
72518: LD_INT 0
72520: PUSH
72521: LD_INT 2
72523: PUSH
72524: EMPTY
72525: LIST
72526: LIST
72527: PUSH
72528: LD_INT 1
72530: NEG
72531: PUSH
72532: LD_INT 1
72534: PUSH
72535: EMPTY
72536: LIST
72537: LIST
72538: PUSH
72539: LD_INT 2
72541: NEG
72542: PUSH
72543: LD_INT 0
72545: PUSH
72546: EMPTY
72547: LIST
72548: LIST
72549: PUSH
72550: LD_INT 2
72552: NEG
72553: PUSH
72554: LD_INT 1
72556: NEG
72557: PUSH
72558: EMPTY
72559: LIST
72560: LIST
72561: PUSH
72562: LD_INT 2
72564: NEG
72565: PUSH
72566: LD_INT 2
72568: NEG
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: PUSH
72574: LD_INT 3
72576: PUSH
72577: LD_INT 1
72579: PUSH
72580: EMPTY
72581: LIST
72582: LIST
72583: PUSH
72584: LD_INT 3
72586: PUSH
72587: LD_INT 2
72589: PUSH
72590: EMPTY
72591: LIST
72592: LIST
72593: PUSH
72594: LD_INT 2
72596: PUSH
72597: LD_INT 3
72599: PUSH
72600: EMPTY
72601: LIST
72602: LIST
72603: PUSH
72604: LD_INT 1
72606: PUSH
72607: LD_INT 3
72609: PUSH
72610: EMPTY
72611: LIST
72612: LIST
72613: PUSH
72614: EMPTY
72615: LIST
72616: LIST
72617: LIST
72618: LIST
72619: LIST
72620: LIST
72621: LIST
72622: LIST
72623: LIST
72624: LIST
72625: LIST
72626: LIST
72627: LIST
72628: LIST
72629: LIST
72630: LIST
72631: LIST
72632: LIST
72633: LIST
72634: LIST
72635: LIST
72636: LIST
72637: LIST
72638: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
72639: LD_ADDR_VAR 0 26
72643: PUSH
72644: LD_INT 0
72646: PUSH
72647: LD_INT 0
72649: PUSH
72650: EMPTY
72651: LIST
72652: LIST
72653: PUSH
72654: LD_INT 0
72656: PUSH
72657: LD_INT 1
72659: NEG
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: PUSH
72665: LD_INT 1
72667: PUSH
72668: LD_INT 0
72670: PUSH
72671: EMPTY
72672: LIST
72673: LIST
72674: PUSH
72675: LD_INT 1
72677: PUSH
72678: LD_INT 1
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: PUSH
72685: LD_INT 0
72687: PUSH
72688: LD_INT 1
72690: PUSH
72691: EMPTY
72692: LIST
72693: LIST
72694: PUSH
72695: LD_INT 1
72697: NEG
72698: PUSH
72699: LD_INT 0
72701: PUSH
72702: EMPTY
72703: LIST
72704: LIST
72705: PUSH
72706: LD_INT 1
72708: NEG
72709: PUSH
72710: LD_INT 1
72712: NEG
72713: PUSH
72714: EMPTY
72715: LIST
72716: LIST
72717: PUSH
72718: LD_INT 1
72720: NEG
72721: PUSH
72722: LD_INT 2
72724: NEG
72725: PUSH
72726: EMPTY
72727: LIST
72728: LIST
72729: PUSH
72730: LD_INT 0
72732: PUSH
72733: LD_INT 2
72735: NEG
72736: PUSH
72737: EMPTY
72738: LIST
72739: LIST
72740: PUSH
72741: LD_INT 1
72743: PUSH
72744: LD_INT 1
72746: NEG
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: PUSH
72752: LD_INT 2
72754: PUSH
72755: LD_INT 0
72757: PUSH
72758: EMPTY
72759: LIST
72760: LIST
72761: PUSH
72762: LD_INT 2
72764: PUSH
72765: LD_INT 1
72767: PUSH
72768: EMPTY
72769: LIST
72770: LIST
72771: PUSH
72772: LD_INT 2
72774: PUSH
72775: LD_INT 2
72777: PUSH
72778: EMPTY
72779: LIST
72780: LIST
72781: PUSH
72782: LD_INT 1
72784: PUSH
72785: LD_INT 2
72787: PUSH
72788: EMPTY
72789: LIST
72790: LIST
72791: PUSH
72792: LD_INT 0
72794: PUSH
72795: LD_INT 2
72797: PUSH
72798: EMPTY
72799: LIST
72800: LIST
72801: PUSH
72802: LD_INT 1
72804: NEG
72805: PUSH
72806: LD_INT 1
72808: PUSH
72809: EMPTY
72810: LIST
72811: LIST
72812: PUSH
72813: LD_INT 2
72815: NEG
72816: PUSH
72817: LD_INT 0
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: PUSH
72824: LD_INT 2
72826: NEG
72827: PUSH
72828: LD_INT 1
72830: NEG
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: PUSH
72836: LD_INT 2
72838: NEG
72839: PUSH
72840: LD_INT 2
72842: NEG
72843: PUSH
72844: EMPTY
72845: LIST
72846: LIST
72847: PUSH
72848: LD_INT 2
72850: PUSH
72851: LD_INT 3
72853: PUSH
72854: EMPTY
72855: LIST
72856: LIST
72857: PUSH
72858: LD_INT 1
72860: PUSH
72861: LD_INT 3
72863: PUSH
72864: EMPTY
72865: LIST
72866: LIST
72867: PUSH
72868: LD_INT 1
72870: NEG
72871: PUSH
72872: LD_INT 2
72874: PUSH
72875: EMPTY
72876: LIST
72877: LIST
72878: PUSH
72879: LD_INT 2
72881: NEG
72882: PUSH
72883: LD_INT 1
72885: PUSH
72886: EMPTY
72887: LIST
72888: LIST
72889: PUSH
72890: EMPTY
72891: LIST
72892: LIST
72893: LIST
72894: LIST
72895: LIST
72896: LIST
72897: LIST
72898: LIST
72899: LIST
72900: LIST
72901: LIST
72902: LIST
72903: LIST
72904: LIST
72905: LIST
72906: LIST
72907: LIST
72908: LIST
72909: LIST
72910: LIST
72911: LIST
72912: LIST
72913: LIST
72914: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
72915: LD_ADDR_VAR 0 27
72919: PUSH
72920: LD_INT 0
72922: PUSH
72923: LD_INT 0
72925: PUSH
72926: EMPTY
72927: LIST
72928: LIST
72929: PUSH
72930: LD_INT 0
72932: PUSH
72933: LD_INT 1
72935: NEG
72936: PUSH
72937: EMPTY
72938: LIST
72939: LIST
72940: PUSH
72941: LD_INT 1
72943: PUSH
72944: LD_INT 0
72946: PUSH
72947: EMPTY
72948: LIST
72949: LIST
72950: PUSH
72951: LD_INT 1
72953: PUSH
72954: LD_INT 1
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: LD_INT 0
72963: PUSH
72964: LD_INT 1
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: PUSH
72971: LD_INT 1
72973: NEG
72974: PUSH
72975: LD_INT 0
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: PUSH
72982: LD_INT 1
72984: NEG
72985: PUSH
72986: LD_INT 1
72988: NEG
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: PUSH
72994: LD_INT 1
72996: NEG
72997: PUSH
72998: LD_INT 2
73000: NEG
73001: PUSH
73002: EMPTY
73003: LIST
73004: LIST
73005: PUSH
73006: LD_INT 0
73008: PUSH
73009: LD_INT 2
73011: NEG
73012: PUSH
73013: EMPTY
73014: LIST
73015: LIST
73016: PUSH
73017: LD_INT 1
73019: PUSH
73020: LD_INT 1
73022: NEG
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: PUSH
73028: LD_INT 2
73030: PUSH
73031: LD_INT 0
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: PUSH
73038: LD_INT 2
73040: PUSH
73041: LD_INT 1
73043: PUSH
73044: EMPTY
73045: LIST
73046: LIST
73047: PUSH
73048: LD_INT 2
73050: PUSH
73051: LD_INT 2
73053: PUSH
73054: EMPTY
73055: LIST
73056: LIST
73057: PUSH
73058: LD_INT 1
73060: PUSH
73061: LD_INT 2
73063: PUSH
73064: EMPTY
73065: LIST
73066: LIST
73067: PUSH
73068: LD_INT 0
73070: PUSH
73071: LD_INT 2
73073: PUSH
73074: EMPTY
73075: LIST
73076: LIST
73077: PUSH
73078: LD_INT 1
73080: NEG
73081: PUSH
73082: LD_INT 1
73084: PUSH
73085: EMPTY
73086: LIST
73087: LIST
73088: PUSH
73089: LD_INT 2
73091: NEG
73092: PUSH
73093: LD_INT 0
73095: PUSH
73096: EMPTY
73097: LIST
73098: LIST
73099: PUSH
73100: LD_INT 2
73102: NEG
73103: PUSH
73104: LD_INT 1
73106: NEG
73107: PUSH
73108: EMPTY
73109: LIST
73110: LIST
73111: PUSH
73112: LD_INT 2
73114: NEG
73115: PUSH
73116: LD_INT 2
73118: NEG
73119: PUSH
73120: EMPTY
73121: LIST
73122: LIST
73123: PUSH
73124: LD_INT 1
73126: NEG
73127: PUSH
73128: LD_INT 2
73130: PUSH
73131: EMPTY
73132: LIST
73133: LIST
73134: PUSH
73135: LD_INT 2
73137: NEG
73138: PUSH
73139: LD_INT 1
73141: PUSH
73142: EMPTY
73143: LIST
73144: LIST
73145: PUSH
73146: LD_INT 3
73148: NEG
73149: PUSH
73150: LD_INT 1
73152: NEG
73153: PUSH
73154: EMPTY
73155: LIST
73156: LIST
73157: PUSH
73158: LD_INT 3
73160: NEG
73161: PUSH
73162: LD_INT 2
73164: NEG
73165: PUSH
73166: EMPTY
73167: LIST
73168: LIST
73169: PUSH
73170: EMPTY
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: LIST
73183: LIST
73184: LIST
73185: LIST
73186: LIST
73187: LIST
73188: LIST
73189: LIST
73190: LIST
73191: LIST
73192: LIST
73193: LIST
73194: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
73195: LD_ADDR_VAR 0 28
73199: PUSH
73200: LD_INT 0
73202: PUSH
73203: LD_INT 0
73205: PUSH
73206: EMPTY
73207: LIST
73208: LIST
73209: PUSH
73210: LD_INT 0
73212: PUSH
73213: LD_INT 1
73215: NEG
73216: PUSH
73217: EMPTY
73218: LIST
73219: LIST
73220: PUSH
73221: LD_INT 1
73223: PUSH
73224: LD_INT 0
73226: PUSH
73227: EMPTY
73228: LIST
73229: LIST
73230: PUSH
73231: LD_INT 1
73233: PUSH
73234: LD_INT 1
73236: PUSH
73237: EMPTY
73238: LIST
73239: LIST
73240: PUSH
73241: LD_INT 0
73243: PUSH
73244: LD_INT 1
73246: PUSH
73247: EMPTY
73248: LIST
73249: LIST
73250: PUSH
73251: LD_INT 1
73253: NEG
73254: PUSH
73255: LD_INT 0
73257: PUSH
73258: EMPTY
73259: LIST
73260: LIST
73261: PUSH
73262: LD_INT 1
73264: NEG
73265: PUSH
73266: LD_INT 1
73268: NEG
73269: PUSH
73270: EMPTY
73271: LIST
73272: LIST
73273: PUSH
73274: LD_INT 1
73276: NEG
73277: PUSH
73278: LD_INT 2
73280: NEG
73281: PUSH
73282: EMPTY
73283: LIST
73284: LIST
73285: PUSH
73286: LD_INT 0
73288: PUSH
73289: LD_INT 2
73291: NEG
73292: PUSH
73293: EMPTY
73294: LIST
73295: LIST
73296: PUSH
73297: LD_INT 1
73299: PUSH
73300: LD_INT 1
73302: NEG
73303: PUSH
73304: EMPTY
73305: LIST
73306: LIST
73307: PUSH
73308: LD_INT 2
73310: PUSH
73311: LD_INT 0
73313: PUSH
73314: EMPTY
73315: LIST
73316: LIST
73317: PUSH
73318: LD_INT 2
73320: PUSH
73321: LD_INT 1
73323: PUSH
73324: EMPTY
73325: LIST
73326: LIST
73327: PUSH
73328: LD_INT 2
73330: PUSH
73331: LD_INT 2
73333: PUSH
73334: EMPTY
73335: LIST
73336: LIST
73337: PUSH
73338: LD_INT 1
73340: PUSH
73341: LD_INT 2
73343: PUSH
73344: EMPTY
73345: LIST
73346: LIST
73347: PUSH
73348: LD_INT 0
73350: PUSH
73351: LD_INT 2
73353: PUSH
73354: EMPTY
73355: LIST
73356: LIST
73357: PUSH
73358: LD_INT 1
73360: NEG
73361: PUSH
73362: LD_INT 1
73364: PUSH
73365: EMPTY
73366: LIST
73367: LIST
73368: PUSH
73369: LD_INT 2
73371: NEG
73372: PUSH
73373: LD_INT 0
73375: PUSH
73376: EMPTY
73377: LIST
73378: LIST
73379: PUSH
73380: LD_INT 2
73382: NEG
73383: PUSH
73384: LD_INT 1
73386: NEG
73387: PUSH
73388: EMPTY
73389: LIST
73390: LIST
73391: PUSH
73392: LD_INT 2
73394: NEG
73395: PUSH
73396: LD_INT 2
73398: NEG
73399: PUSH
73400: EMPTY
73401: LIST
73402: LIST
73403: PUSH
73404: LD_INT 2
73406: NEG
73407: PUSH
73408: LD_INT 3
73410: NEG
73411: PUSH
73412: EMPTY
73413: LIST
73414: LIST
73415: PUSH
73416: LD_INT 1
73418: NEG
73419: PUSH
73420: LD_INT 3
73422: NEG
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: PUSH
73428: LD_INT 3
73430: NEG
73431: PUSH
73432: LD_INT 1
73434: NEG
73435: PUSH
73436: EMPTY
73437: LIST
73438: LIST
73439: PUSH
73440: LD_INT 3
73442: NEG
73443: PUSH
73444: LD_INT 2
73446: NEG
73447: PUSH
73448: EMPTY
73449: LIST
73450: LIST
73451: PUSH
73452: EMPTY
73453: LIST
73454: LIST
73455: LIST
73456: LIST
73457: LIST
73458: LIST
73459: LIST
73460: LIST
73461: LIST
73462: LIST
73463: LIST
73464: LIST
73465: LIST
73466: LIST
73467: LIST
73468: LIST
73469: LIST
73470: LIST
73471: LIST
73472: LIST
73473: LIST
73474: LIST
73475: LIST
73476: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
73477: LD_ADDR_VAR 0 29
73481: PUSH
73482: LD_INT 0
73484: PUSH
73485: LD_INT 0
73487: PUSH
73488: EMPTY
73489: LIST
73490: LIST
73491: PUSH
73492: LD_INT 0
73494: PUSH
73495: LD_INT 1
73497: NEG
73498: PUSH
73499: EMPTY
73500: LIST
73501: LIST
73502: PUSH
73503: LD_INT 1
73505: PUSH
73506: LD_INT 0
73508: PUSH
73509: EMPTY
73510: LIST
73511: LIST
73512: PUSH
73513: LD_INT 1
73515: PUSH
73516: LD_INT 1
73518: PUSH
73519: EMPTY
73520: LIST
73521: LIST
73522: PUSH
73523: LD_INT 0
73525: PUSH
73526: LD_INT 1
73528: PUSH
73529: EMPTY
73530: LIST
73531: LIST
73532: PUSH
73533: LD_INT 1
73535: NEG
73536: PUSH
73537: LD_INT 0
73539: PUSH
73540: EMPTY
73541: LIST
73542: LIST
73543: PUSH
73544: LD_INT 1
73546: NEG
73547: PUSH
73548: LD_INT 1
73550: NEG
73551: PUSH
73552: EMPTY
73553: LIST
73554: LIST
73555: PUSH
73556: LD_INT 1
73558: NEG
73559: PUSH
73560: LD_INT 2
73562: NEG
73563: PUSH
73564: EMPTY
73565: LIST
73566: LIST
73567: PUSH
73568: LD_INT 0
73570: PUSH
73571: LD_INT 2
73573: NEG
73574: PUSH
73575: EMPTY
73576: LIST
73577: LIST
73578: PUSH
73579: LD_INT 1
73581: PUSH
73582: LD_INT 1
73584: NEG
73585: PUSH
73586: EMPTY
73587: LIST
73588: LIST
73589: PUSH
73590: LD_INT 2
73592: PUSH
73593: LD_INT 0
73595: PUSH
73596: EMPTY
73597: LIST
73598: LIST
73599: PUSH
73600: LD_INT 2
73602: PUSH
73603: LD_INT 1
73605: PUSH
73606: EMPTY
73607: LIST
73608: LIST
73609: PUSH
73610: LD_INT 1
73612: PUSH
73613: LD_INT 2
73615: PUSH
73616: EMPTY
73617: LIST
73618: LIST
73619: PUSH
73620: LD_INT 0
73622: PUSH
73623: LD_INT 2
73625: PUSH
73626: EMPTY
73627: LIST
73628: LIST
73629: PUSH
73630: LD_INT 1
73632: NEG
73633: PUSH
73634: LD_INT 1
73636: PUSH
73637: EMPTY
73638: LIST
73639: LIST
73640: PUSH
73641: LD_INT 2
73643: NEG
73644: PUSH
73645: LD_INT 1
73647: NEG
73648: PUSH
73649: EMPTY
73650: LIST
73651: LIST
73652: PUSH
73653: LD_INT 2
73655: NEG
73656: PUSH
73657: LD_INT 2
73659: NEG
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: PUSH
73665: LD_INT 2
73667: NEG
73668: PUSH
73669: LD_INT 3
73671: NEG
73672: PUSH
73673: EMPTY
73674: LIST
73675: LIST
73676: PUSH
73677: LD_INT 2
73679: PUSH
73680: LD_INT 1
73682: NEG
73683: PUSH
73684: EMPTY
73685: LIST
73686: LIST
73687: PUSH
73688: LD_INT 3
73690: PUSH
73691: LD_INT 1
73693: PUSH
73694: EMPTY
73695: LIST
73696: LIST
73697: PUSH
73698: LD_INT 1
73700: PUSH
73701: LD_INT 3
73703: PUSH
73704: EMPTY
73705: LIST
73706: LIST
73707: PUSH
73708: LD_INT 1
73710: NEG
73711: PUSH
73712: LD_INT 2
73714: PUSH
73715: EMPTY
73716: LIST
73717: LIST
73718: PUSH
73719: LD_INT 3
73721: NEG
73722: PUSH
73723: LD_INT 2
73725: NEG
73726: PUSH
73727: EMPTY
73728: LIST
73729: LIST
73730: PUSH
73731: EMPTY
73732: LIST
73733: LIST
73734: LIST
73735: LIST
73736: LIST
73737: LIST
73738: LIST
73739: LIST
73740: LIST
73741: LIST
73742: LIST
73743: LIST
73744: LIST
73745: LIST
73746: LIST
73747: LIST
73748: LIST
73749: LIST
73750: LIST
73751: LIST
73752: LIST
73753: LIST
73754: LIST
73755: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
73756: LD_ADDR_VAR 0 30
73760: PUSH
73761: LD_INT 0
73763: PUSH
73764: LD_INT 0
73766: PUSH
73767: EMPTY
73768: LIST
73769: LIST
73770: PUSH
73771: LD_INT 0
73773: PUSH
73774: LD_INT 1
73776: NEG
73777: PUSH
73778: EMPTY
73779: LIST
73780: LIST
73781: PUSH
73782: LD_INT 1
73784: PUSH
73785: LD_INT 0
73787: PUSH
73788: EMPTY
73789: LIST
73790: LIST
73791: PUSH
73792: LD_INT 1
73794: PUSH
73795: LD_INT 1
73797: PUSH
73798: EMPTY
73799: LIST
73800: LIST
73801: PUSH
73802: LD_INT 0
73804: PUSH
73805: LD_INT 1
73807: PUSH
73808: EMPTY
73809: LIST
73810: LIST
73811: PUSH
73812: LD_INT 1
73814: NEG
73815: PUSH
73816: LD_INT 0
73818: PUSH
73819: EMPTY
73820: LIST
73821: LIST
73822: PUSH
73823: LD_INT 1
73825: NEG
73826: PUSH
73827: LD_INT 1
73829: NEG
73830: PUSH
73831: EMPTY
73832: LIST
73833: LIST
73834: PUSH
73835: LD_INT 1
73837: NEG
73838: PUSH
73839: LD_INT 2
73841: NEG
73842: PUSH
73843: EMPTY
73844: LIST
73845: LIST
73846: PUSH
73847: LD_INT 0
73849: PUSH
73850: LD_INT 2
73852: NEG
73853: PUSH
73854: EMPTY
73855: LIST
73856: LIST
73857: PUSH
73858: LD_INT 1
73860: PUSH
73861: LD_INT 1
73863: NEG
73864: PUSH
73865: EMPTY
73866: LIST
73867: LIST
73868: PUSH
73869: LD_INT 2
73871: PUSH
73872: LD_INT 0
73874: PUSH
73875: EMPTY
73876: LIST
73877: LIST
73878: PUSH
73879: LD_INT 2
73881: PUSH
73882: LD_INT 1
73884: PUSH
73885: EMPTY
73886: LIST
73887: LIST
73888: PUSH
73889: LD_INT 2
73891: PUSH
73892: LD_INT 2
73894: PUSH
73895: EMPTY
73896: LIST
73897: LIST
73898: PUSH
73899: LD_INT 1
73901: PUSH
73902: LD_INT 2
73904: PUSH
73905: EMPTY
73906: LIST
73907: LIST
73908: PUSH
73909: LD_INT 1
73911: NEG
73912: PUSH
73913: LD_INT 1
73915: PUSH
73916: EMPTY
73917: LIST
73918: LIST
73919: PUSH
73920: LD_INT 2
73922: NEG
73923: PUSH
73924: LD_INT 0
73926: PUSH
73927: EMPTY
73928: LIST
73929: LIST
73930: PUSH
73931: LD_INT 2
73933: NEG
73934: PUSH
73935: LD_INT 1
73937: NEG
73938: PUSH
73939: EMPTY
73940: LIST
73941: LIST
73942: PUSH
73943: LD_INT 1
73945: NEG
73946: PUSH
73947: LD_INT 3
73949: NEG
73950: PUSH
73951: EMPTY
73952: LIST
73953: LIST
73954: PUSH
73955: LD_INT 1
73957: PUSH
73958: LD_INT 2
73960: NEG
73961: PUSH
73962: EMPTY
73963: LIST
73964: LIST
73965: PUSH
73966: LD_INT 3
73968: PUSH
73969: LD_INT 2
73971: PUSH
73972: EMPTY
73973: LIST
73974: LIST
73975: PUSH
73976: LD_INT 2
73978: PUSH
73979: LD_INT 3
73981: PUSH
73982: EMPTY
73983: LIST
73984: LIST
73985: PUSH
73986: LD_INT 2
73988: NEG
73989: PUSH
73990: LD_INT 1
73992: PUSH
73993: EMPTY
73994: LIST
73995: LIST
73996: PUSH
73997: LD_INT 3
73999: NEG
74000: PUSH
74001: LD_INT 1
74003: NEG
74004: PUSH
74005: EMPTY
74006: LIST
74007: LIST
74008: PUSH
74009: EMPTY
74010: LIST
74011: LIST
74012: LIST
74013: LIST
74014: LIST
74015: LIST
74016: LIST
74017: LIST
74018: LIST
74019: LIST
74020: LIST
74021: LIST
74022: LIST
74023: LIST
74024: LIST
74025: LIST
74026: LIST
74027: LIST
74028: LIST
74029: LIST
74030: LIST
74031: LIST
74032: LIST
74033: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
74034: LD_ADDR_VAR 0 31
74038: PUSH
74039: LD_INT 0
74041: PUSH
74042: LD_INT 0
74044: PUSH
74045: EMPTY
74046: LIST
74047: LIST
74048: PUSH
74049: LD_INT 0
74051: PUSH
74052: LD_INT 1
74054: NEG
74055: PUSH
74056: EMPTY
74057: LIST
74058: LIST
74059: PUSH
74060: LD_INT 1
74062: PUSH
74063: LD_INT 0
74065: PUSH
74066: EMPTY
74067: LIST
74068: LIST
74069: PUSH
74070: LD_INT 1
74072: PUSH
74073: LD_INT 1
74075: PUSH
74076: EMPTY
74077: LIST
74078: LIST
74079: PUSH
74080: LD_INT 0
74082: PUSH
74083: LD_INT 1
74085: PUSH
74086: EMPTY
74087: LIST
74088: LIST
74089: PUSH
74090: LD_INT 1
74092: NEG
74093: PUSH
74094: LD_INT 0
74096: PUSH
74097: EMPTY
74098: LIST
74099: LIST
74100: PUSH
74101: LD_INT 1
74103: NEG
74104: PUSH
74105: LD_INT 1
74107: NEG
74108: PUSH
74109: EMPTY
74110: LIST
74111: LIST
74112: PUSH
74113: LD_INT 1
74115: NEG
74116: PUSH
74117: LD_INT 2
74119: NEG
74120: PUSH
74121: EMPTY
74122: LIST
74123: LIST
74124: PUSH
74125: LD_INT 1
74127: PUSH
74128: LD_INT 1
74130: NEG
74131: PUSH
74132: EMPTY
74133: LIST
74134: LIST
74135: PUSH
74136: LD_INT 2
74138: PUSH
74139: LD_INT 0
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: PUSH
74146: LD_INT 2
74148: PUSH
74149: LD_INT 1
74151: PUSH
74152: EMPTY
74153: LIST
74154: LIST
74155: PUSH
74156: LD_INT 2
74158: PUSH
74159: LD_INT 2
74161: PUSH
74162: EMPTY
74163: LIST
74164: LIST
74165: PUSH
74166: LD_INT 1
74168: PUSH
74169: LD_INT 2
74171: PUSH
74172: EMPTY
74173: LIST
74174: LIST
74175: PUSH
74176: LD_INT 0
74178: PUSH
74179: LD_INT 2
74181: PUSH
74182: EMPTY
74183: LIST
74184: LIST
74185: PUSH
74186: LD_INT 1
74188: NEG
74189: PUSH
74190: LD_INT 1
74192: PUSH
74193: EMPTY
74194: LIST
74195: LIST
74196: PUSH
74197: LD_INT 2
74199: NEG
74200: PUSH
74201: LD_INT 1
74203: NEG
74204: PUSH
74205: EMPTY
74206: LIST
74207: LIST
74208: PUSH
74209: LD_INT 2
74211: NEG
74212: PUSH
74213: LD_INT 2
74215: NEG
74216: PUSH
74217: EMPTY
74218: LIST
74219: LIST
74220: PUSH
74221: LD_INT 2
74223: NEG
74224: PUSH
74225: LD_INT 3
74227: NEG
74228: PUSH
74229: EMPTY
74230: LIST
74231: LIST
74232: PUSH
74233: LD_INT 2
74235: PUSH
74236: LD_INT 1
74238: NEG
74239: PUSH
74240: EMPTY
74241: LIST
74242: LIST
74243: PUSH
74244: LD_INT 3
74246: PUSH
74247: LD_INT 1
74249: PUSH
74250: EMPTY
74251: LIST
74252: LIST
74253: PUSH
74254: LD_INT 1
74256: PUSH
74257: LD_INT 3
74259: PUSH
74260: EMPTY
74261: LIST
74262: LIST
74263: PUSH
74264: LD_INT 1
74266: NEG
74267: PUSH
74268: LD_INT 2
74270: PUSH
74271: EMPTY
74272: LIST
74273: LIST
74274: PUSH
74275: LD_INT 3
74277: NEG
74278: PUSH
74279: LD_INT 2
74281: NEG
74282: PUSH
74283: EMPTY
74284: LIST
74285: LIST
74286: PUSH
74287: EMPTY
74288: LIST
74289: LIST
74290: LIST
74291: LIST
74292: LIST
74293: LIST
74294: LIST
74295: LIST
74296: LIST
74297: LIST
74298: LIST
74299: LIST
74300: LIST
74301: LIST
74302: LIST
74303: LIST
74304: LIST
74305: LIST
74306: LIST
74307: LIST
74308: LIST
74309: LIST
74310: LIST
74311: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
74312: LD_ADDR_VAR 0 32
74316: PUSH
74317: LD_INT 0
74319: PUSH
74320: LD_INT 0
74322: PUSH
74323: EMPTY
74324: LIST
74325: LIST
74326: PUSH
74327: LD_INT 0
74329: PUSH
74330: LD_INT 1
74332: NEG
74333: PUSH
74334: EMPTY
74335: LIST
74336: LIST
74337: PUSH
74338: LD_INT 1
74340: PUSH
74341: LD_INT 0
74343: PUSH
74344: EMPTY
74345: LIST
74346: LIST
74347: PUSH
74348: LD_INT 1
74350: PUSH
74351: LD_INT 1
74353: PUSH
74354: EMPTY
74355: LIST
74356: LIST
74357: PUSH
74358: LD_INT 0
74360: PUSH
74361: LD_INT 1
74363: PUSH
74364: EMPTY
74365: LIST
74366: LIST
74367: PUSH
74368: LD_INT 1
74370: NEG
74371: PUSH
74372: LD_INT 0
74374: PUSH
74375: EMPTY
74376: LIST
74377: LIST
74378: PUSH
74379: LD_INT 1
74381: NEG
74382: PUSH
74383: LD_INT 1
74385: NEG
74386: PUSH
74387: EMPTY
74388: LIST
74389: LIST
74390: PUSH
74391: LD_INT 1
74393: NEG
74394: PUSH
74395: LD_INT 2
74397: NEG
74398: PUSH
74399: EMPTY
74400: LIST
74401: LIST
74402: PUSH
74403: LD_INT 0
74405: PUSH
74406: LD_INT 2
74408: NEG
74409: PUSH
74410: EMPTY
74411: LIST
74412: LIST
74413: PUSH
74414: LD_INT 1
74416: PUSH
74417: LD_INT 1
74419: NEG
74420: PUSH
74421: EMPTY
74422: LIST
74423: LIST
74424: PUSH
74425: LD_INT 2
74427: PUSH
74428: LD_INT 1
74430: PUSH
74431: EMPTY
74432: LIST
74433: LIST
74434: PUSH
74435: LD_INT 2
74437: PUSH
74438: LD_INT 2
74440: PUSH
74441: EMPTY
74442: LIST
74443: LIST
74444: PUSH
74445: LD_INT 1
74447: PUSH
74448: LD_INT 2
74450: PUSH
74451: EMPTY
74452: LIST
74453: LIST
74454: PUSH
74455: LD_INT 0
74457: PUSH
74458: LD_INT 2
74460: PUSH
74461: EMPTY
74462: LIST
74463: LIST
74464: PUSH
74465: LD_INT 1
74467: NEG
74468: PUSH
74469: LD_INT 1
74471: PUSH
74472: EMPTY
74473: LIST
74474: LIST
74475: PUSH
74476: LD_INT 2
74478: NEG
74479: PUSH
74480: LD_INT 0
74482: PUSH
74483: EMPTY
74484: LIST
74485: LIST
74486: PUSH
74487: LD_INT 2
74489: NEG
74490: PUSH
74491: LD_INT 1
74493: NEG
74494: PUSH
74495: EMPTY
74496: LIST
74497: LIST
74498: PUSH
74499: LD_INT 1
74501: NEG
74502: PUSH
74503: LD_INT 3
74505: NEG
74506: PUSH
74507: EMPTY
74508: LIST
74509: LIST
74510: PUSH
74511: LD_INT 1
74513: PUSH
74514: LD_INT 2
74516: NEG
74517: PUSH
74518: EMPTY
74519: LIST
74520: LIST
74521: PUSH
74522: LD_INT 3
74524: PUSH
74525: LD_INT 2
74527: PUSH
74528: EMPTY
74529: LIST
74530: LIST
74531: PUSH
74532: LD_INT 2
74534: PUSH
74535: LD_INT 3
74537: PUSH
74538: EMPTY
74539: LIST
74540: LIST
74541: PUSH
74542: LD_INT 2
74544: NEG
74545: PUSH
74546: LD_INT 1
74548: PUSH
74549: EMPTY
74550: LIST
74551: LIST
74552: PUSH
74553: LD_INT 3
74555: NEG
74556: PUSH
74557: LD_INT 1
74559: NEG
74560: PUSH
74561: EMPTY
74562: LIST
74563: LIST
74564: PUSH
74565: EMPTY
74566: LIST
74567: LIST
74568: LIST
74569: LIST
74570: LIST
74571: LIST
74572: LIST
74573: LIST
74574: LIST
74575: LIST
74576: LIST
74577: LIST
74578: LIST
74579: LIST
74580: LIST
74581: LIST
74582: LIST
74583: LIST
74584: LIST
74585: LIST
74586: LIST
74587: LIST
74588: LIST
74589: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
74590: LD_ADDR_VAR 0 33
74594: PUSH
74595: LD_INT 0
74597: PUSH
74598: LD_INT 0
74600: PUSH
74601: EMPTY
74602: LIST
74603: LIST
74604: PUSH
74605: LD_INT 0
74607: PUSH
74608: LD_INT 1
74610: NEG
74611: PUSH
74612: EMPTY
74613: LIST
74614: LIST
74615: PUSH
74616: LD_INT 1
74618: PUSH
74619: LD_INT 0
74621: PUSH
74622: EMPTY
74623: LIST
74624: LIST
74625: PUSH
74626: LD_INT 1
74628: PUSH
74629: LD_INT 1
74631: PUSH
74632: EMPTY
74633: LIST
74634: LIST
74635: PUSH
74636: LD_INT 0
74638: PUSH
74639: LD_INT 1
74641: PUSH
74642: EMPTY
74643: LIST
74644: LIST
74645: PUSH
74646: LD_INT 1
74648: NEG
74649: PUSH
74650: LD_INT 0
74652: PUSH
74653: EMPTY
74654: LIST
74655: LIST
74656: PUSH
74657: LD_INT 1
74659: NEG
74660: PUSH
74661: LD_INT 1
74663: NEG
74664: PUSH
74665: EMPTY
74666: LIST
74667: LIST
74668: PUSH
74669: LD_INT 1
74671: NEG
74672: PUSH
74673: LD_INT 2
74675: NEG
74676: PUSH
74677: EMPTY
74678: LIST
74679: LIST
74680: PUSH
74681: LD_INT 1
74683: PUSH
74684: LD_INT 1
74686: NEG
74687: PUSH
74688: EMPTY
74689: LIST
74690: LIST
74691: PUSH
74692: LD_INT 2
74694: PUSH
74695: LD_INT 0
74697: PUSH
74698: EMPTY
74699: LIST
74700: LIST
74701: PUSH
74702: LD_INT 2
74704: PUSH
74705: LD_INT 1
74707: PUSH
74708: EMPTY
74709: LIST
74710: LIST
74711: PUSH
74712: LD_INT 1
74714: PUSH
74715: LD_INT 2
74717: PUSH
74718: EMPTY
74719: LIST
74720: LIST
74721: PUSH
74722: LD_INT 0
74724: PUSH
74725: LD_INT 2
74727: PUSH
74728: EMPTY
74729: LIST
74730: LIST
74731: PUSH
74732: LD_INT 1
74734: NEG
74735: PUSH
74736: LD_INT 1
74738: PUSH
74739: EMPTY
74740: LIST
74741: LIST
74742: PUSH
74743: LD_INT 2
74745: NEG
74746: PUSH
74747: LD_INT 0
74749: PUSH
74750: EMPTY
74751: LIST
74752: LIST
74753: PUSH
74754: LD_INT 2
74756: NEG
74757: PUSH
74758: LD_INT 1
74760: NEG
74761: PUSH
74762: EMPTY
74763: LIST
74764: LIST
74765: PUSH
74766: LD_INT 2
74768: NEG
74769: PUSH
74770: LD_INT 2
74772: NEG
74773: PUSH
74774: EMPTY
74775: LIST
74776: LIST
74777: PUSH
74778: LD_INT 2
74780: NEG
74781: PUSH
74782: LD_INT 3
74784: NEG
74785: PUSH
74786: EMPTY
74787: LIST
74788: LIST
74789: PUSH
74790: LD_INT 2
74792: PUSH
74793: LD_INT 1
74795: NEG
74796: PUSH
74797: EMPTY
74798: LIST
74799: LIST
74800: PUSH
74801: LD_INT 3
74803: PUSH
74804: LD_INT 1
74806: PUSH
74807: EMPTY
74808: LIST
74809: LIST
74810: PUSH
74811: LD_INT 1
74813: PUSH
74814: LD_INT 3
74816: PUSH
74817: EMPTY
74818: LIST
74819: LIST
74820: PUSH
74821: LD_INT 1
74823: NEG
74824: PUSH
74825: LD_INT 2
74827: PUSH
74828: EMPTY
74829: LIST
74830: LIST
74831: PUSH
74832: LD_INT 3
74834: NEG
74835: PUSH
74836: LD_INT 2
74838: NEG
74839: PUSH
74840: EMPTY
74841: LIST
74842: LIST
74843: PUSH
74844: EMPTY
74845: LIST
74846: LIST
74847: LIST
74848: LIST
74849: LIST
74850: LIST
74851: LIST
74852: LIST
74853: LIST
74854: LIST
74855: LIST
74856: LIST
74857: LIST
74858: LIST
74859: LIST
74860: LIST
74861: LIST
74862: LIST
74863: LIST
74864: LIST
74865: LIST
74866: LIST
74867: LIST
74868: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
74869: LD_ADDR_VAR 0 34
74873: PUSH
74874: LD_INT 0
74876: PUSH
74877: LD_INT 0
74879: PUSH
74880: EMPTY
74881: LIST
74882: LIST
74883: PUSH
74884: LD_INT 0
74886: PUSH
74887: LD_INT 1
74889: NEG
74890: PUSH
74891: EMPTY
74892: LIST
74893: LIST
74894: PUSH
74895: LD_INT 1
74897: PUSH
74898: LD_INT 0
74900: PUSH
74901: EMPTY
74902: LIST
74903: LIST
74904: PUSH
74905: LD_INT 1
74907: PUSH
74908: LD_INT 1
74910: PUSH
74911: EMPTY
74912: LIST
74913: LIST
74914: PUSH
74915: LD_INT 0
74917: PUSH
74918: LD_INT 1
74920: PUSH
74921: EMPTY
74922: LIST
74923: LIST
74924: PUSH
74925: LD_INT 1
74927: NEG
74928: PUSH
74929: LD_INT 0
74931: PUSH
74932: EMPTY
74933: LIST
74934: LIST
74935: PUSH
74936: LD_INT 1
74938: NEG
74939: PUSH
74940: LD_INT 1
74942: NEG
74943: PUSH
74944: EMPTY
74945: LIST
74946: LIST
74947: PUSH
74948: LD_INT 1
74950: NEG
74951: PUSH
74952: LD_INT 2
74954: NEG
74955: PUSH
74956: EMPTY
74957: LIST
74958: LIST
74959: PUSH
74960: LD_INT 0
74962: PUSH
74963: LD_INT 2
74965: NEG
74966: PUSH
74967: EMPTY
74968: LIST
74969: LIST
74970: PUSH
74971: LD_INT 1
74973: PUSH
74974: LD_INT 1
74976: NEG
74977: PUSH
74978: EMPTY
74979: LIST
74980: LIST
74981: PUSH
74982: LD_INT 2
74984: PUSH
74985: LD_INT 1
74987: PUSH
74988: EMPTY
74989: LIST
74990: LIST
74991: PUSH
74992: LD_INT 2
74994: PUSH
74995: LD_INT 2
74997: PUSH
74998: EMPTY
74999: LIST
75000: LIST
75001: PUSH
75002: LD_INT 1
75004: PUSH
75005: LD_INT 2
75007: PUSH
75008: EMPTY
75009: LIST
75010: LIST
75011: PUSH
75012: LD_INT 1
75014: NEG
75015: PUSH
75016: LD_INT 1
75018: PUSH
75019: EMPTY
75020: LIST
75021: LIST
75022: PUSH
75023: LD_INT 2
75025: NEG
75026: PUSH
75027: LD_INT 0
75029: PUSH
75030: EMPTY
75031: LIST
75032: LIST
75033: PUSH
75034: LD_INT 2
75036: NEG
75037: PUSH
75038: LD_INT 1
75040: NEG
75041: PUSH
75042: EMPTY
75043: LIST
75044: LIST
75045: PUSH
75046: LD_INT 2
75048: NEG
75049: PUSH
75050: LD_INT 2
75052: NEG
75053: PUSH
75054: EMPTY
75055: LIST
75056: LIST
75057: PUSH
75058: LD_INT 1
75060: NEG
75061: PUSH
75062: LD_INT 3
75064: NEG
75065: PUSH
75066: EMPTY
75067: LIST
75068: LIST
75069: PUSH
75070: LD_INT 1
75072: PUSH
75073: LD_INT 2
75075: NEG
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: PUSH
75081: LD_INT 3
75083: PUSH
75084: LD_INT 2
75086: PUSH
75087: EMPTY
75088: LIST
75089: LIST
75090: PUSH
75091: LD_INT 2
75093: PUSH
75094: LD_INT 3
75096: PUSH
75097: EMPTY
75098: LIST
75099: LIST
75100: PUSH
75101: LD_INT 2
75103: NEG
75104: PUSH
75105: LD_INT 1
75107: PUSH
75108: EMPTY
75109: LIST
75110: LIST
75111: PUSH
75112: LD_INT 3
75114: NEG
75115: PUSH
75116: LD_INT 1
75118: NEG
75119: PUSH
75120: EMPTY
75121: LIST
75122: LIST
75123: PUSH
75124: EMPTY
75125: LIST
75126: LIST
75127: LIST
75128: LIST
75129: LIST
75130: LIST
75131: LIST
75132: LIST
75133: LIST
75134: LIST
75135: LIST
75136: LIST
75137: LIST
75138: LIST
75139: LIST
75140: LIST
75141: LIST
75142: LIST
75143: LIST
75144: LIST
75145: LIST
75146: LIST
75147: LIST
75148: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
75149: LD_ADDR_VAR 0 35
75153: PUSH
75154: LD_INT 0
75156: PUSH
75157: LD_INT 0
75159: PUSH
75160: EMPTY
75161: LIST
75162: LIST
75163: PUSH
75164: LD_INT 0
75166: PUSH
75167: LD_INT 1
75169: NEG
75170: PUSH
75171: EMPTY
75172: LIST
75173: LIST
75174: PUSH
75175: LD_INT 1
75177: PUSH
75178: LD_INT 0
75180: PUSH
75181: EMPTY
75182: LIST
75183: LIST
75184: PUSH
75185: LD_INT 1
75187: PUSH
75188: LD_INT 1
75190: PUSH
75191: EMPTY
75192: LIST
75193: LIST
75194: PUSH
75195: LD_INT 0
75197: PUSH
75198: LD_INT 1
75200: PUSH
75201: EMPTY
75202: LIST
75203: LIST
75204: PUSH
75205: LD_INT 1
75207: NEG
75208: PUSH
75209: LD_INT 0
75211: PUSH
75212: EMPTY
75213: LIST
75214: LIST
75215: PUSH
75216: LD_INT 1
75218: NEG
75219: PUSH
75220: LD_INT 1
75222: NEG
75223: PUSH
75224: EMPTY
75225: LIST
75226: LIST
75227: PUSH
75228: LD_INT 2
75230: PUSH
75231: LD_INT 1
75233: PUSH
75234: EMPTY
75235: LIST
75236: LIST
75237: PUSH
75238: LD_INT 2
75240: NEG
75241: PUSH
75242: LD_INT 1
75244: NEG
75245: PUSH
75246: EMPTY
75247: LIST
75248: LIST
75249: PUSH
75250: EMPTY
75251: LIST
75252: LIST
75253: LIST
75254: LIST
75255: LIST
75256: LIST
75257: LIST
75258: LIST
75259: LIST
75260: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
75261: LD_ADDR_VAR 0 36
75265: PUSH
75266: LD_INT 0
75268: PUSH
75269: LD_INT 0
75271: PUSH
75272: EMPTY
75273: LIST
75274: LIST
75275: PUSH
75276: LD_INT 0
75278: PUSH
75279: LD_INT 1
75281: NEG
75282: PUSH
75283: EMPTY
75284: LIST
75285: LIST
75286: PUSH
75287: LD_INT 1
75289: PUSH
75290: LD_INT 0
75292: PUSH
75293: EMPTY
75294: LIST
75295: LIST
75296: PUSH
75297: LD_INT 1
75299: PUSH
75300: LD_INT 1
75302: PUSH
75303: EMPTY
75304: LIST
75305: LIST
75306: PUSH
75307: LD_INT 0
75309: PUSH
75310: LD_INT 1
75312: PUSH
75313: EMPTY
75314: LIST
75315: LIST
75316: PUSH
75317: LD_INT 1
75319: NEG
75320: PUSH
75321: LD_INT 0
75323: PUSH
75324: EMPTY
75325: LIST
75326: LIST
75327: PUSH
75328: LD_INT 1
75330: NEG
75331: PUSH
75332: LD_INT 1
75334: NEG
75335: PUSH
75336: EMPTY
75337: LIST
75338: LIST
75339: PUSH
75340: LD_INT 1
75342: NEG
75343: PUSH
75344: LD_INT 2
75346: NEG
75347: PUSH
75348: EMPTY
75349: LIST
75350: LIST
75351: PUSH
75352: LD_INT 1
75354: PUSH
75355: LD_INT 2
75357: PUSH
75358: EMPTY
75359: LIST
75360: LIST
75361: PUSH
75362: EMPTY
75363: LIST
75364: LIST
75365: LIST
75366: LIST
75367: LIST
75368: LIST
75369: LIST
75370: LIST
75371: LIST
75372: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
75373: LD_ADDR_VAR 0 37
75377: PUSH
75378: LD_INT 0
75380: PUSH
75381: LD_INT 0
75383: PUSH
75384: EMPTY
75385: LIST
75386: LIST
75387: PUSH
75388: LD_INT 0
75390: PUSH
75391: LD_INT 1
75393: NEG
75394: PUSH
75395: EMPTY
75396: LIST
75397: LIST
75398: PUSH
75399: LD_INT 1
75401: PUSH
75402: LD_INT 0
75404: PUSH
75405: EMPTY
75406: LIST
75407: LIST
75408: PUSH
75409: LD_INT 1
75411: PUSH
75412: LD_INT 1
75414: PUSH
75415: EMPTY
75416: LIST
75417: LIST
75418: PUSH
75419: LD_INT 0
75421: PUSH
75422: LD_INT 1
75424: PUSH
75425: EMPTY
75426: LIST
75427: LIST
75428: PUSH
75429: LD_INT 1
75431: NEG
75432: PUSH
75433: LD_INT 0
75435: PUSH
75436: EMPTY
75437: LIST
75438: LIST
75439: PUSH
75440: LD_INT 1
75442: NEG
75443: PUSH
75444: LD_INT 1
75446: NEG
75447: PUSH
75448: EMPTY
75449: LIST
75450: LIST
75451: PUSH
75452: LD_INT 1
75454: PUSH
75455: LD_INT 1
75457: NEG
75458: PUSH
75459: EMPTY
75460: LIST
75461: LIST
75462: PUSH
75463: LD_INT 1
75465: NEG
75466: PUSH
75467: LD_INT 1
75469: PUSH
75470: EMPTY
75471: LIST
75472: LIST
75473: PUSH
75474: EMPTY
75475: LIST
75476: LIST
75477: LIST
75478: LIST
75479: LIST
75480: LIST
75481: LIST
75482: LIST
75483: LIST
75484: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
75485: LD_ADDR_VAR 0 38
75489: PUSH
75490: LD_INT 0
75492: PUSH
75493: LD_INT 0
75495: PUSH
75496: EMPTY
75497: LIST
75498: LIST
75499: PUSH
75500: LD_INT 0
75502: PUSH
75503: LD_INT 1
75505: NEG
75506: PUSH
75507: EMPTY
75508: LIST
75509: LIST
75510: PUSH
75511: LD_INT 1
75513: PUSH
75514: LD_INT 0
75516: PUSH
75517: EMPTY
75518: LIST
75519: LIST
75520: PUSH
75521: LD_INT 1
75523: PUSH
75524: LD_INT 1
75526: PUSH
75527: EMPTY
75528: LIST
75529: LIST
75530: PUSH
75531: LD_INT 0
75533: PUSH
75534: LD_INT 1
75536: PUSH
75537: EMPTY
75538: LIST
75539: LIST
75540: PUSH
75541: LD_INT 1
75543: NEG
75544: PUSH
75545: LD_INT 0
75547: PUSH
75548: EMPTY
75549: LIST
75550: LIST
75551: PUSH
75552: LD_INT 1
75554: NEG
75555: PUSH
75556: LD_INT 1
75558: NEG
75559: PUSH
75560: EMPTY
75561: LIST
75562: LIST
75563: PUSH
75564: LD_INT 2
75566: PUSH
75567: LD_INT 1
75569: PUSH
75570: EMPTY
75571: LIST
75572: LIST
75573: PUSH
75574: LD_INT 2
75576: NEG
75577: PUSH
75578: LD_INT 1
75580: NEG
75581: PUSH
75582: EMPTY
75583: LIST
75584: LIST
75585: PUSH
75586: EMPTY
75587: LIST
75588: LIST
75589: LIST
75590: LIST
75591: LIST
75592: LIST
75593: LIST
75594: LIST
75595: LIST
75596: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
75597: LD_ADDR_VAR 0 39
75601: PUSH
75602: LD_INT 0
75604: PUSH
75605: LD_INT 0
75607: PUSH
75608: EMPTY
75609: LIST
75610: LIST
75611: PUSH
75612: LD_INT 0
75614: PUSH
75615: LD_INT 1
75617: NEG
75618: PUSH
75619: EMPTY
75620: LIST
75621: LIST
75622: PUSH
75623: LD_INT 1
75625: PUSH
75626: LD_INT 0
75628: PUSH
75629: EMPTY
75630: LIST
75631: LIST
75632: PUSH
75633: LD_INT 1
75635: PUSH
75636: LD_INT 1
75638: PUSH
75639: EMPTY
75640: LIST
75641: LIST
75642: PUSH
75643: LD_INT 0
75645: PUSH
75646: LD_INT 1
75648: PUSH
75649: EMPTY
75650: LIST
75651: LIST
75652: PUSH
75653: LD_INT 1
75655: NEG
75656: PUSH
75657: LD_INT 0
75659: PUSH
75660: EMPTY
75661: LIST
75662: LIST
75663: PUSH
75664: LD_INT 1
75666: NEG
75667: PUSH
75668: LD_INT 1
75670: NEG
75671: PUSH
75672: EMPTY
75673: LIST
75674: LIST
75675: PUSH
75676: LD_INT 1
75678: NEG
75679: PUSH
75680: LD_INT 2
75682: NEG
75683: PUSH
75684: EMPTY
75685: LIST
75686: LIST
75687: PUSH
75688: LD_INT 1
75690: PUSH
75691: LD_INT 2
75693: PUSH
75694: EMPTY
75695: LIST
75696: LIST
75697: PUSH
75698: EMPTY
75699: LIST
75700: LIST
75701: LIST
75702: LIST
75703: LIST
75704: LIST
75705: LIST
75706: LIST
75707: LIST
75708: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
75709: LD_ADDR_VAR 0 40
75713: PUSH
75714: LD_INT 0
75716: PUSH
75717: LD_INT 0
75719: PUSH
75720: EMPTY
75721: LIST
75722: LIST
75723: PUSH
75724: LD_INT 0
75726: PUSH
75727: LD_INT 1
75729: NEG
75730: PUSH
75731: EMPTY
75732: LIST
75733: LIST
75734: PUSH
75735: LD_INT 1
75737: PUSH
75738: LD_INT 0
75740: PUSH
75741: EMPTY
75742: LIST
75743: LIST
75744: PUSH
75745: LD_INT 1
75747: PUSH
75748: LD_INT 1
75750: PUSH
75751: EMPTY
75752: LIST
75753: LIST
75754: PUSH
75755: LD_INT 0
75757: PUSH
75758: LD_INT 1
75760: PUSH
75761: EMPTY
75762: LIST
75763: LIST
75764: PUSH
75765: LD_INT 1
75767: NEG
75768: PUSH
75769: LD_INT 0
75771: PUSH
75772: EMPTY
75773: LIST
75774: LIST
75775: PUSH
75776: LD_INT 1
75778: NEG
75779: PUSH
75780: LD_INT 1
75782: NEG
75783: PUSH
75784: EMPTY
75785: LIST
75786: LIST
75787: PUSH
75788: LD_INT 1
75790: PUSH
75791: LD_INT 1
75793: NEG
75794: PUSH
75795: EMPTY
75796: LIST
75797: LIST
75798: PUSH
75799: LD_INT 1
75801: NEG
75802: PUSH
75803: LD_INT 1
75805: PUSH
75806: EMPTY
75807: LIST
75808: LIST
75809: PUSH
75810: EMPTY
75811: LIST
75812: LIST
75813: LIST
75814: LIST
75815: LIST
75816: LIST
75817: LIST
75818: LIST
75819: LIST
75820: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75821: LD_ADDR_VAR 0 41
75825: PUSH
75826: LD_INT 0
75828: PUSH
75829: LD_INT 0
75831: PUSH
75832: EMPTY
75833: LIST
75834: LIST
75835: PUSH
75836: LD_INT 0
75838: PUSH
75839: LD_INT 1
75841: NEG
75842: PUSH
75843: EMPTY
75844: LIST
75845: LIST
75846: PUSH
75847: LD_INT 1
75849: PUSH
75850: LD_INT 0
75852: PUSH
75853: EMPTY
75854: LIST
75855: LIST
75856: PUSH
75857: LD_INT 1
75859: PUSH
75860: LD_INT 1
75862: PUSH
75863: EMPTY
75864: LIST
75865: LIST
75866: PUSH
75867: LD_INT 0
75869: PUSH
75870: LD_INT 1
75872: PUSH
75873: EMPTY
75874: LIST
75875: LIST
75876: PUSH
75877: LD_INT 1
75879: NEG
75880: PUSH
75881: LD_INT 0
75883: PUSH
75884: EMPTY
75885: LIST
75886: LIST
75887: PUSH
75888: LD_INT 1
75890: NEG
75891: PUSH
75892: LD_INT 1
75894: NEG
75895: PUSH
75896: EMPTY
75897: LIST
75898: LIST
75899: PUSH
75900: LD_INT 1
75902: NEG
75903: PUSH
75904: LD_INT 2
75906: NEG
75907: PUSH
75908: EMPTY
75909: LIST
75910: LIST
75911: PUSH
75912: LD_INT 1
75914: PUSH
75915: LD_INT 1
75917: NEG
75918: PUSH
75919: EMPTY
75920: LIST
75921: LIST
75922: PUSH
75923: LD_INT 2
75925: PUSH
75926: LD_INT 0
75928: PUSH
75929: EMPTY
75930: LIST
75931: LIST
75932: PUSH
75933: LD_INT 2
75935: PUSH
75936: LD_INT 1
75938: PUSH
75939: EMPTY
75940: LIST
75941: LIST
75942: PUSH
75943: LD_INT 2
75945: PUSH
75946: LD_INT 2
75948: PUSH
75949: EMPTY
75950: LIST
75951: LIST
75952: PUSH
75953: LD_INT 1
75955: PUSH
75956: LD_INT 2
75958: PUSH
75959: EMPTY
75960: LIST
75961: LIST
75962: PUSH
75963: LD_INT 1
75965: NEG
75966: PUSH
75967: LD_INT 1
75969: PUSH
75970: EMPTY
75971: LIST
75972: LIST
75973: PUSH
75974: LD_INT 2
75976: NEG
75977: PUSH
75978: LD_INT 0
75980: PUSH
75981: EMPTY
75982: LIST
75983: LIST
75984: PUSH
75985: LD_INT 2
75987: NEG
75988: PUSH
75989: LD_INT 1
75991: NEG
75992: PUSH
75993: EMPTY
75994: LIST
75995: LIST
75996: PUSH
75997: LD_INT 2
75999: NEG
76000: PUSH
76001: LD_INT 2
76003: NEG
76004: PUSH
76005: EMPTY
76006: LIST
76007: LIST
76008: PUSH
76009: LD_INT 2
76011: NEG
76012: PUSH
76013: LD_INT 3
76015: NEG
76016: PUSH
76017: EMPTY
76018: LIST
76019: LIST
76020: PUSH
76021: LD_INT 2
76023: PUSH
76024: LD_INT 1
76026: NEG
76027: PUSH
76028: EMPTY
76029: LIST
76030: LIST
76031: PUSH
76032: LD_INT 3
76034: PUSH
76035: LD_INT 0
76037: PUSH
76038: EMPTY
76039: LIST
76040: LIST
76041: PUSH
76042: LD_INT 3
76044: PUSH
76045: LD_INT 1
76047: PUSH
76048: EMPTY
76049: LIST
76050: LIST
76051: PUSH
76052: LD_INT 3
76054: PUSH
76055: LD_INT 2
76057: PUSH
76058: EMPTY
76059: LIST
76060: LIST
76061: PUSH
76062: LD_INT 3
76064: PUSH
76065: LD_INT 3
76067: PUSH
76068: EMPTY
76069: LIST
76070: LIST
76071: PUSH
76072: LD_INT 2
76074: PUSH
76075: LD_INT 3
76077: PUSH
76078: EMPTY
76079: LIST
76080: LIST
76081: PUSH
76082: LD_INT 2
76084: NEG
76085: PUSH
76086: LD_INT 1
76088: PUSH
76089: EMPTY
76090: LIST
76091: LIST
76092: PUSH
76093: LD_INT 3
76095: NEG
76096: PUSH
76097: LD_INT 0
76099: PUSH
76100: EMPTY
76101: LIST
76102: LIST
76103: PUSH
76104: LD_INT 3
76106: NEG
76107: PUSH
76108: LD_INT 1
76110: NEG
76111: PUSH
76112: EMPTY
76113: LIST
76114: LIST
76115: PUSH
76116: LD_INT 3
76118: NEG
76119: PUSH
76120: LD_INT 2
76122: NEG
76123: PUSH
76124: EMPTY
76125: LIST
76126: LIST
76127: PUSH
76128: LD_INT 3
76130: NEG
76131: PUSH
76132: LD_INT 3
76134: NEG
76135: PUSH
76136: EMPTY
76137: LIST
76138: LIST
76139: PUSH
76140: EMPTY
76141: LIST
76142: LIST
76143: LIST
76144: LIST
76145: LIST
76146: LIST
76147: LIST
76148: LIST
76149: LIST
76150: LIST
76151: LIST
76152: LIST
76153: LIST
76154: LIST
76155: LIST
76156: LIST
76157: LIST
76158: LIST
76159: LIST
76160: LIST
76161: LIST
76162: LIST
76163: LIST
76164: LIST
76165: LIST
76166: LIST
76167: LIST
76168: LIST
76169: LIST
76170: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76171: LD_ADDR_VAR 0 42
76175: PUSH
76176: LD_INT 0
76178: PUSH
76179: LD_INT 0
76181: PUSH
76182: EMPTY
76183: LIST
76184: LIST
76185: PUSH
76186: LD_INT 0
76188: PUSH
76189: LD_INT 1
76191: NEG
76192: PUSH
76193: EMPTY
76194: LIST
76195: LIST
76196: PUSH
76197: LD_INT 1
76199: PUSH
76200: LD_INT 0
76202: PUSH
76203: EMPTY
76204: LIST
76205: LIST
76206: PUSH
76207: LD_INT 1
76209: PUSH
76210: LD_INT 1
76212: PUSH
76213: EMPTY
76214: LIST
76215: LIST
76216: PUSH
76217: LD_INT 0
76219: PUSH
76220: LD_INT 1
76222: PUSH
76223: EMPTY
76224: LIST
76225: LIST
76226: PUSH
76227: LD_INT 1
76229: NEG
76230: PUSH
76231: LD_INT 0
76233: PUSH
76234: EMPTY
76235: LIST
76236: LIST
76237: PUSH
76238: LD_INT 1
76240: NEG
76241: PUSH
76242: LD_INT 1
76244: NEG
76245: PUSH
76246: EMPTY
76247: LIST
76248: LIST
76249: PUSH
76250: LD_INT 1
76252: NEG
76253: PUSH
76254: LD_INT 2
76256: NEG
76257: PUSH
76258: EMPTY
76259: LIST
76260: LIST
76261: PUSH
76262: LD_INT 0
76264: PUSH
76265: LD_INT 2
76267: NEG
76268: PUSH
76269: EMPTY
76270: LIST
76271: LIST
76272: PUSH
76273: LD_INT 1
76275: PUSH
76276: LD_INT 1
76278: NEG
76279: PUSH
76280: EMPTY
76281: LIST
76282: LIST
76283: PUSH
76284: LD_INT 2
76286: PUSH
76287: LD_INT 1
76289: PUSH
76290: EMPTY
76291: LIST
76292: LIST
76293: PUSH
76294: LD_INT 2
76296: PUSH
76297: LD_INT 2
76299: PUSH
76300: EMPTY
76301: LIST
76302: LIST
76303: PUSH
76304: LD_INT 1
76306: PUSH
76307: LD_INT 2
76309: PUSH
76310: EMPTY
76311: LIST
76312: LIST
76313: PUSH
76314: LD_INT 0
76316: PUSH
76317: LD_INT 2
76319: PUSH
76320: EMPTY
76321: LIST
76322: LIST
76323: PUSH
76324: LD_INT 1
76326: NEG
76327: PUSH
76328: LD_INT 1
76330: PUSH
76331: EMPTY
76332: LIST
76333: LIST
76334: PUSH
76335: LD_INT 2
76337: NEG
76338: PUSH
76339: LD_INT 1
76341: NEG
76342: PUSH
76343: EMPTY
76344: LIST
76345: LIST
76346: PUSH
76347: LD_INT 2
76349: NEG
76350: PUSH
76351: LD_INT 2
76353: NEG
76354: PUSH
76355: EMPTY
76356: LIST
76357: LIST
76358: PUSH
76359: LD_INT 2
76361: NEG
76362: PUSH
76363: LD_INT 3
76365: NEG
76366: PUSH
76367: EMPTY
76368: LIST
76369: LIST
76370: PUSH
76371: LD_INT 1
76373: NEG
76374: PUSH
76375: LD_INT 3
76377: NEG
76378: PUSH
76379: EMPTY
76380: LIST
76381: LIST
76382: PUSH
76383: LD_INT 0
76385: PUSH
76386: LD_INT 3
76388: NEG
76389: PUSH
76390: EMPTY
76391: LIST
76392: LIST
76393: PUSH
76394: LD_INT 1
76396: PUSH
76397: LD_INT 2
76399: NEG
76400: PUSH
76401: EMPTY
76402: LIST
76403: LIST
76404: PUSH
76405: LD_INT 3
76407: PUSH
76408: LD_INT 2
76410: PUSH
76411: EMPTY
76412: LIST
76413: LIST
76414: PUSH
76415: LD_INT 3
76417: PUSH
76418: LD_INT 3
76420: PUSH
76421: EMPTY
76422: LIST
76423: LIST
76424: PUSH
76425: LD_INT 2
76427: PUSH
76428: LD_INT 3
76430: PUSH
76431: EMPTY
76432: LIST
76433: LIST
76434: PUSH
76435: LD_INT 1
76437: PUSH
76438: LD_INT 3
76440: PUSH
76441: EMPTY
76442: LIST
76443: LIST
76444: PUSH
76445: LD_INT 0
76447: PUSH
76448: LD_INT 3
76450: PUSH
76451: EMPTY
76452: LIST
76453: LIST
76454: PUSH
76455: LD_INT 1
76457: NEG
76458: PUSH
76459: LD_INT 2
76461: PUSH
76462: EMPTY
76463: LIST
76464: LIST
76465: PUSH
76466: LD_INT 3
76468: NEG
76469: PUSH
76470: LD_INT 2
76472: NEG
76473: PUSH
76474: EMPTY
76475: LIST
76476: LIST
76477: PUSH
76478: LD_INT 3
76480: NEG
76481: PUSH
76482: LD_INT 3
76484: NEG
76485: PUSH
76486: EMPTY
76487: LIST
76488: LIST
76489: PUSH
76490: EMPTY
76491: LIST
76492: LIST
76493: LIST
76494: LIST
76495: LIST
76496: LIST
76497: LIST
76498: LIST
76499: LIST
76500: LIST
76501: LIST
76502: LIST
76503: LIST
76504: LIST
76505: LIST
76506: LIST
76507: LIST
76508: LIST
76509: LIST
76510: LIST
76511: LIST
76512: LIST
76513: LIST
76514: LIST
76515: LIST
76516: LIST
76517: LIST
76518: LIST
76519: LIST
76520: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76521: LD_ADDR_VAR 0 43
76525: PUSH
76526: LD_INT 0
76528: PUSH
76529: LD_INT 0
76531: PUSH
76532: EMPTY
76533: LIST
76534: LIST
76535: PUSH
76536: LD_INT 0
76538: PUSH
76539: LD_INT 1
76541: NEG
76542: PUSH
76543: EMPTY
76544: LIST
76545: LIST
76546: PUSH
76547: LD_INT 1
76549: PUSH
76550: LD_INT 0
76552: PUSH
76553: EMPTY
76554: LIST
76555: LIST
76556: PUSH
76557: LD_INT 1
76559: PUSH
76560: LD_INT 1
76562: PUSH
76563: EMPTY
76564: LIST
76565: LIST
76566: PUSH
76567: LD_INT 0
76569: PUSH
76570: LD_INT 1
76572: PUSH
76573: EMPTY
76574: LIST
76575: LIST
76576: PUSH
76577: LD_INT 1
76579: NEG
76580: PUSH
76581: LD_INT 0
76583: PUSH
76584: EMPTY
76585: LIST
76586: LIST
76587: PUSH
76588: LD_INT 1
76590: NEG
76591: PUSH
76592: LD_INT 1
76594: NEG
76595: PUSH
76596: EMPTY
76597: LIST
76598: LIST
76599: PUSH
76600: LD_INT 1
76602: NEG
76603: PUSH
76604: LD_INT 2
76606: NEG
76607: PUSH
76608: EMPTY
76609: LIST
76610: LIST
76611: PUSH
76612: LD_INT 0
76614: PUSH
76615: LD_INT 2
76617: NEG
76618: PUSH
76619: EMPTY
76620: LIST
76621: LIST
76622: PUSH
76623: LD_INT 1
76625: PUSH
76626: LD_INT 1
76628: NEG
76629: PUSH
76630: EMPTY
76631: LIST
76632: LIST
76633: PUSH
76634: LD_INT 2
76636: PUSH
76637: LD_INT 0
76639: PUSH
76640: EMPTY
76641: LIST
76642: LIST
76643: PUSH
76644: LD_INT 2
76646: PUSH
76647: LD_INT 1
76649: PUSH
76650: EMPTY
76651: LIST
76652: LIST
76653: PUSH
76654: LD_INT 1
76656: PUSH
76657: LD_INT 2
76659: PUSH
76660: EMPTY
76661: LIST
76662: LIST
76663: PUSH
76664: LD_INT 0
76666: PUSH
76667: LD_INT 2
76669: PUSH
76670: EMPTY
76671: LIST
76672: LIST
76673: PUSH
76674: LD_INT 1
76676: NEG
76677: PUSH
76678: LD_INT 1
76680: PUSH
76681: EMPTY
76682: LIST
76683: LIST
76684: PUSH
76685: LD_INT 2
76687: NEG
76688: PUSH
76689: LD_INT 0
76691: PUSH
76692: EMPTY
76693: LIST
76694: LIST
76695: PUSH
76696: LD_INT 2
76698: NEG
76699: PUSH
76700: LD_INT 1
76702: NEG
76703: PUSH
76704: EMPTY
76705: LIST
76706: LIST
76707: PUSH
76708: LD_INT 1
76710: NEG
76711: PUSH
76712: LD_INT 3
76714: NEG
76715: PUSH
76716: EMPTY
76717: LIST
76718: LIST
76719: PUSH
76720: LD_INT 0
76722: PUSH
76723: LD_INT 3
76725: NEG
76726: PUSH
76727: EMPTY
76728: LIST
76729: LIST
76730: PUSH
76731: LD_INT 1
76733: PUSH
76734: LD_INT 2
76736: NEG
76737: PUSH
76738: EMPTY
76739: LIST
76740: LIST
76741: PUSH
76742: LD_INT 2
76744: PUSH
76745: LD_INT 1
76747: NEG
76748: PUSH
76749: EMPTY
76750: LIST
76751: LIST
76752: PUSH
76753: LD_INT 3
76755: PUSH
76756: LD_INT 0
76758: PUSH
76759: EMPTY
76760: LIST
76761: LIST
76762: PUSH
76763: LD_INT 3
76765: PUSH
76766: LD_INT 1
76768: PUSH
76769: EMPTY
76770: LIST
76771: LIST
76772: PUSH
76773: LD_INT 1
76775: PUSH
76776: LD_INT 3
76778: PUSH
76779: EMPTY
76780: LIST
76781: LIST
76782: PUSH
76783: LD_INT 0
76785: PUSH
76786: LD_INT 3
76788: PUSH
76789: EMPTY
76790: LIST
76791: LIST
76792: PUSH
76793: LD_INT 1
76795: NEG
76796: PUSH
76797: LD_INT 2
76799: PUSH
76800: EMPTY
76801: LIST
76802: LIST
76803: PUSH
76804: LD_INT 2
76806: NEG
76807: PUSH
76808: LD_INT 1
76810: PUSH
76811: EMPTY
76812: LIST
76813: LIST
76814: PUSH
76815: LD_INT 3
76817: NEG
76818: PUSH
76819: LD_INT 0
76821: PUSH
76822: EMPTY
76823: LIST
76824: LIST
76825: PUSH
76826: LD_INT 3
76828: NEG
76829: PUSH
76830: LD_INT 1
76832: NEG
76833: PUSH
76834: EMPTY
76835: LIST
76836: LIST
76837: PUSH
76838: EMPTY
76839: LIST
76840: LIST
76841: LIST
76842: LIST
76843: LIST
76844: LIST
76845: LIST
76846: LIST
76847: LIST
76848: LIST
76849: LIST
76850: LIST
76851: LIST
76852: LIST
76853: LIST
76854: LIST
76855: LIST
76856: LIST
76857: LIST
76858: LIST
76859: LIST
76860: LIST
76861: LIST
76862: LIST
76863: LIST
76864: LIST
76865: LIST
76866: LIST
76867: LIST
76868: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76869: LD_ADDR_VAR 0 44
76873: PUSH
76874: LD_INT 0
76876: PUSH
76877: LD_INT 0
76879: PUSH
76880: EMPTY
76881: LIST
76882: LIST
76883: PUSH
76884: LD_INT 0
76886: PUSH
76887: LD_INT 1
76889: NEG
76890: PUSH
76891: EMPTY
76892: LIST
76893: LIST
76894: PUSH
76895: LD_INT 1
76897: PUSH
76898: LD_INT 0
76900: PUSH
76901: EMPTY
76902: LIST
76903: LIST
76904: PUSH
76905: LD_INT 1
76907: PUSH
76908: LD_INT 1
76910: PUSH
76911: EMPTY
76912: LIST
76913: LIST
76914: PUSH
76915: LD_INT 0
76917: PUSH
76918: LD_INT 1
76920: PUSH
76921: EMPTY
76922: LIST
76923: LIST
76924: PUSH
76925: LD_INT 1
76927: NEG
76928: PUSH
76929: LD_INT 0
76931: PUSH
76932: EMPTY
76933: LIST
76934: LIST
76935: PUSH
76936: LD_INT 1
76938: NEG
76939: PUSH
76940: LD_INT 1
76942: NEG
76943: PUSH
76944: EMPTY
76945: LIST
76946: LIST
76947: PUSH
76948: LD_INT 1
76950: NEG
76951: PUSH
76952: LD_INT 2
76954: NEG
76955: PUSH
76956: EMPTY
76957: LIST
76958: LIST
76959: PUSH
76960: LD_INT 1
76962: PUSH
76963: LD_INT 1
76965: NEG
76966: PUSH
76967: EMPTY
76968: LIST
76969: LIST
76970: PUSH
76971: LD_INT 2
76973: PUSH
76974: LD_INT 0
76976: PUSH
76977: EMPTY
76978: LIST
76979: LIST
76980: PUSH
76981: LD_INT 2
76983: PUSH
76984: LD_INT 1
76986: PUSH
76987: EMPTY
76988: LIST
76989: LIST
76990: PUSH
76991: LD_INT 2
76993: PUSH
76994: LD_INT 2
76996: PUSH
76997: EMPTY
76998: LIST
76999: LIST
77000: PUSH
77001: LD_INT 1
77003: PUSH
77004: LD_INT 2
77006: PUSH
77007: EMPTY
77008: LIST
77009: LIST
77010: PUSH
77011: LD_INT 1
77013: NEG
77014: PUSH
77015: LD_INT 1
77017: PUSH
77018: EMPTY
77019: LIST
77020: LIST
77021: PUSH
77022: LD_INT 2
77024: NEG
77025: PUSH
77026: LD_INT 0
77028: PUSH
77029: EMPTY
77030: LIST
77031: LIST
77032: PUSH
77033: LD_INT 2
77035: NEG
77036: PUSH
77037: LD_INT 1
77039: NEG
77040: PUSH
77041: EMPTY
77042: LIST
77043: LIST
77044: PUSH
77045: LD_INT 2
77047: NEG
77048: PUSH
77049: LD_INT 2
77051: NEG
77052: PUSH
77053: EMPTY
77054: LIST
77055: LIST
77056: PUSH
77057: LD_INT 2
77059: NEG
77060: PUSH
77061: LD_INT 3
77063: NEG
77064: PUSH
77065: EMPTY
77066: LIST
77067: LIST
77068: PUSH
77069: LD_INT 2
77071: PUSH
77072: LD_INT 1
77074: NEG
77075: PUSH
77076: EMPTY
77077: LIST
77078: LIST
77079: PUSH
77080: LD_INT 3
77082: PUSH
77083: LD_INT 0
77085: PUSH
77086: EMPTY
77087: LIST
77088: LIST
77089: PUSH
77090: LD_INT 3
77092: PUSH
77093: LD_INT 1
77095: PUSH
77096: EMPTY
77097: LIST
77098: LIST
77099: PUSH
77100: LD_INT 3
77102: PUSH
77103: LD_INT 2
77105: PUSH
77106: EMPTY
77107: LIST
77108: LIST
77109: PUSH
77110: LD_INT 3
77112: PUSH
77113: LD_INT 3
77115: PUSH
77116: EMPTY
77117: LIST
77118: LIST
77119: PUSH
77120: LD_INT 2
77122: PUSH
77123: LD_INT 3
77125: PUSH
77126: EMPTY
77127: LIST
77128: LIST
77129: PUSH
77130: LD_INT 2
77132: NEG
77133: PUSH
77134: LD_INT 1
77136: PUSH
77137: EMPTY
77138: LIST
77139: LIST
77140: PUSH
77141: LD_INT 3
77143: NEG
77144: PUSH
77145: LD_INT 0
77147: PUSH
77148: EMPTY
77149: LIST
77150: LIST
77151: PUSH
77152: LD_INT 3
77154: NEG
77155: PUSH
77156: LD_INT 1
77158: NEG
77159: PUSH
77160: EMPTY
77161: LIST
77162: LIST
77163: PUSH
77164: LD_INT 3
77166: NEG
77167: PUSH
77168: LD_INT 2
77170: NEG
77171: PUSH
77172: EMPTY
77173: LIST
77174: LIST
77175: PUSH
77176: LD_INT 3
77178: NEG
77179: PUSH
77180: LD_INT 3
77182: NEG
77183: PUSH
77184: EMPTY
77185: LIST
77186: LIST
77187: PUSH
77188: EMPTY
77189: LIST
77190: LIST
77191: LIST
77192: LIST
77193: LIST
77194: LIST
77195: LIST
77196: LIST
77197: LIST
77198: LIST
77199: LIST
77200: LIST
77201: LIST
77202: LIST
77203: LIST
77204: LIST
77205: LIST
77206: LIST
77207: LIST
77208: LIST
77209: LIST
77210: LIST
77211: LIST
77212: LIST
77213: LIST
77214: LIST
77215: LIST
77216: LIST
77217: LIST
77218: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
77219: LD_ADDR_VAR 0 45
77223: PUSH
77224: LD_INT 0
77226: PUSH
77227: LD_INT 0
77229: PUSH
77230: EMPTY
77231: LIST
77232: LIST
77233: PUSH
77234: LD_INT 0
77236: PUSH
77237: LD_INT 1
77239: NEG
77240: PUSH
77241: EMPTY
77242: LIST
77243: LIST
77244: PUSH
77245: LD_INT 1
77247: PUSH
77248: LD_INT 0
77250: PUSH
77251: EMPTY
77252: LIST
77253: LIST
77254: PUSH
77255: LD_INT 1
77257: PUSH
77258: LD_INT 1
77260: PUSH
77261: EMPTY
77262: LIST
77263: LIST
77264: PUSH
77265: LD_INT 0
77267: PUSH
77268: LD_INT 1
77270: PUSH
77271: EMPTY
77272: LIST
77273: LIST
77274: PUSH
77275: LD_INT 1
77277: NEG
77278: PUSH
77279: LD_INT 0
77281: PUSH
77282: EMPTY
77283: LIST
77284: LIST
77285: PUSH
77286: LD_INT 1
77288: NEG
77289: PUSH
77290: LD_INT 1
77292: NEG
77293: PUSH
77294: EMPTY
77295: LIST
77296: LIST
77297: PUSH
77298: LD_INT 1
77300: NEG
77301: PUSH
77302: LD_INT 2
77304: NEG
77305: PUSH
77306: EMPTY
77307: LIST
77308: LIST
77309: PUSH
77310: LD_INT 0
77312: PUSH
77313: LD_INT 2
77315: NEG
77316: PUSH
77317: EMPTY
77318: LIST
77319: LIST
77320: PUSH
77321: LD_INT 1
77323: PUSH
77324: LD_INT 1
77326: NEG
77327: PUSH
77328: EMPTY
77329: LIST
77330: LIST
77331: PUSH
77332: LD_INT 2
77334: PUSH
77335: LD_INT 1
77337: PUSH
77338: EMPTY
77339: LIST
77340: LIST
77341: PUSH
77342: LD_INT 2
77344: PUSH
77345: LD_INT 2
77347: PUSH
77348: EMPTY
77349: LIST
77350: LIST
77351: PUSH
77352: LD_INT 1
77354: PUSH
77355: LD_INT 2
77357: PUSH
77358: EMPTY
77359: LIST
77360: LIST
77361: PUSH
77362: LD_INT 0
77364: PUSH
77365: LD_INT 2
77367: PUSH
77368: EMPTY
77369: LIST
77370: LIST
77371: PUSH
77372: LD_INT 1
77374: NEG
77375: PUSH
77376: LD_INT 1
77378: PUSH
77379: EMPTY
77380: LIST
77381: LIST
77382: PUSH
77383: LD_INT 2
77385: NEG
77386: PUSH
77387: LD_INT 1
77389: NEG
77390: PUSH
77391: EMPTY
77392: LIST
77393: LIST
77394: PUSH
77395: LD_INT 2
77397: NEG
77398: PUSH
77399: LD_INT 2
77401: NEG
77402: PUSH
77403: EMPTY
77404: LIST
77405: LIST
77406: PUSH
77407: LD_INT 2
77409: NEG
77410: PUSH
77411: LD_INT 3
77413: NEG
77414: PUSH
77415: EMPTY
77416: LIST
77417: LIST
77418: PUSH
77419: LD_INT 1
77421: NEG
77422: PUSH
77423: LD_INT 3
77425: NEG
77426: PUSH
77427: EMPTY
77428: LIST
77429: LIST
77430: PUSH
77431: LD_INT 0
77433: PUSH
77434: LD_INT 3
77436: NEG
77437: PUSH
77438: EMPTY
77439: LIST
77440: LIST
77441: PUSH
77442: LD_INT 1
77444: PUSH
77445: LD_INT 2
77447: NEG
77448: PUSH
77449: EMPTY
77450: LIST
77451: LIST
77452: PUSH
77453: LD_INT 3
77455: PUSH
77456: LD_INT 2
77458: PUSH
77459: EMPTY
77460: LIST
77461: LIST
77462: PUSH
77463: LD_INT 3
77465: PUSH
77466: LD_INT 3
77468: PUSH
77469: EMPTY
77470: LIST
77471: LIST
77472: PUSH
77473: LD_INT 2
77475: PUSH
77476: LD_INT 3
77478: PUSH
77479: EMPTY
77480: LIST
77481: LIST
77482: PUSH
77483: LD_INT 1
77485: PUSH
77486: LD_INT 3
77488: PUSH
77489: EMPTY
77490: LIST
77491: LIST
77492: PUSH
77493: LD_INT 0
77495: PUSH
77496: LD_INT 3
77498: PUSH
77499: EMPTY
77500: LIST
77501: LIST
77502: PUSH
77503: LD_INT 1
77505: NEG
77506: PUSH
77507: LD_INT 2
77509: PUSH
77510: EMPTY
77511: LIST
77512: LIST
77513: PUSH
77514: LD_INT 3
77516: NEG
77517: PUSH
77518: LD_INT 2
77520: NEG
77521: PUSH
77522: EMPTY
77523: LIST
77524: LIST
77525: PUSH
77526: LD_INT 3
77528: NEG
77529: PUSH
77530: LD_INT 3
77532: NEG
77533: PUSH
77534: EMPTY
77535: LIST
77536: LIST
77537: PUSH
77538: EMPTY
77539: LIST
77540: LIST
77541: LIST
77542: LIST
77543: LIST
77544: LIST
77545: LIST
77546: LIST
77547: LIST
77548: LIST
77549: LIST
77550: LIST
77551: LIST
77552: LIST
77553: LIST
77554: LIST
77555: LIST
77556: LIST
77557: LIST
77558: LIST
77559: LIST
77560: LIST
77561: LIST
77562: LIST
77563: LIST
77564: LIST
77565: LIST
77566: LIST
77567: LIST
77568: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
77569: LD_ADDR_VAR 0 46
77573: PUSH
77574: LD_INT 0
77576: PUSH
77577: LD_INT 0
77579: PUSH
77580: EMPTY
77581: LIST
77582: LIST
77583: PUSH
77584: LD_INT 0
77586: PUSH
77587: LD_INT 1
77589: NEG
77590: PUSH
77591: EMPTY
77592: LIST
77593: LIST
77594: PUSH
77595: LD_INT 1
77597: PUSH
77598: LD_INT 0
77600: PUSH
77601: EMPTY
77602: LIST
77603: LIST
77604: PUSH
77605: LD_INT 1
77607: PUSH
77608: LD_INT 1
77610: PUSH
77611: EMPTY
77612: LIST
77613: LIST
77614: PUSH
77615: LD_INT 0
77617: PUSH
77618: LD_INT 1
77620: PUSH
77621: EMPTY
77622: LIST
77623: LIST
77624: PUSH
77625: LD_INT 1
77627: NEG
77628: PUSH
77629: LD_INT 0
77631: PUSH
77632: EMPTY
77633: LIST
77634: LIST
77635: PUSH
77636: LD_INT 1
77638: NEG
77639: PUSH
77640: LD_INT 1
77642: NEG
77643: PUSH
77644: EMPTY
77645: LIST
77646: LIST
77647: PUSH
77648: LD_INT 1
77650: NEG
77651: PUSH
77652: LD_INT 2
77654: NEG
77655: PUSH
77656: EMPTY
77657: LIST
77658: LIST
77659: PUSH
77660: LD_INT 0
77662: PUSH
77663: LD_INT 2
77665: NEG
77666: PUSH
77667: EMPTY
77668: LIST
77669: LIST
77670: PUSH
77671: LD_INT 1
77673: PUSH
77674: LD_INT 1
77676: NEG
77677: PUSH
77678: EMPTY
77679: LIST
77680: LIST
77681: PUSH
77682: LD_INT 2
77684: PUSH
77685: LD_INT 0
77687: PUSH
77688: EMPTY
77689: LIST
77690: LIST
77691: PUSH
77692: LD_INT 2
77694: PUSH
77695: LD_INT 1
77697: PUSH
77698: EMPTY
77699: LIST
77700: LIST
77701: PUSH
77702: LD_INT 1
77704: PUSH
77705: LD_INT 2
77707: PUSH
77708: EMPTY
77709: LIST
77710: LIST
77711: PUSH
77712: LD_INT 0
77714: PUSH
77715: LD_INT 2
77717: PUSH
77718: EMPTY
77719: LIST
77720: LIST
77721: PUSH
77722: LD_INT 1
77724: NEG
77725: PUSH
77726: LD_INT 1
77728: PUSH
77729: EMPTY
77730: LIST
77731: LIST
77732: PUSH
77733: LD_INT 2
77735: NEG
77736: PUSH
77737: LD_INT 0
77739: PUSH
77740: EMPTY
77741: LIST
77742: LIST
77743: PUSH
77744: LD_INT 2
77746: NEG
77747: PUSH
77748: LD_INT 1
77750: NEG
77751: PUSH
77752: EMPTY
77753: LIST
77754: LIST
77755: PUSH
77756: LD_INT 1
77758: NEG
77759: PUSH
77760: LD_INT 3
77762: NEG
77763: PUSH
77764: EMPTY
77765: LIST
77766: LIST
77767: PUSH
77768: LD_INT 0
77770: PUSH
77771: LD_INT 3
77773: NEG
77774: PUSH
77775: EMPTY
77776: LIST
77777: LIST
77778: PUSH
77779: LD_INT 1
77781: PUSH
77782: LD_INT 2
77784: NEG
77785: PUSH
77786: EMPTY
77787: LIST
77788: LIST
77789: PUSH
77790: LD_INT 2
77792: PUSH
77793: LD_INT 1
77795: NEG
77796: PUSH
77797: EMPTY
77798: LIST
77799: LIST
77800: PUSH
77801: LD_INT 3
77803: PUSH
77804: LD_INT 0
77806: PUSH
77807: EMPTY
77808: LIST
77809: LIST
77810: PUSH
77811: LD_INT 3
77813: PUSH
77814: LD_INT 1
77816: PUSH
77817: EMPTY
77818: LIST
77819: LIST
77820: PUSH
77821: LD_INT 1
77823: PUSH
77824: LD_INT 3
77826: PUSH
77827: EMPTY
77828: LIST
77829: LIST
77830: PUSH
77831: LD_INT 0
77833: PUSH
77834: LD_INT 3
77836: PUSH
77837: EMPTY
77838: LIST
77839: LIST
77840: PUSH
77841: LD_INT 1
77843: NEG
77844: PUSH
77845: LD_INT 2
77847: PUSH
77848: EMPTY
77849: LIST
77850: LIST
77851: PUSH
77852: LD_INT 2
77854: NEG
77855: PUSH
77856: LD_INT 1
77858: PUSH
77859: EMPTY
77860: LIST
77861: LIST
77862: PUSH
77863: LD_INT 3
77865: NEG
77866: PUSH
77867: LD_INT 0
77869: PUSH
77870: EMPTY
77871: LIST
77872: LIST
77873: PUSH
77874: LD_INT 3
77876: NEG
77877: PUSH
77878: LD_INT 1
77880: NEG
77881: PUSH
77882: EMPTY
77883: LIST
77884: LIST
77885: PUSH
77886: EMPTY
77887: LIST
77888: LIST
77889: LIST
77890: LIST
77891: LIST
77892: LIST
77893: LIST
77894: LIST
77895: LIST
77896: LIST
77897: LIST
77898: LIST
77899: LIST
77900: LIST
77901: LIST
77902: LIST
77903: LIST
77904: LIST
77905: LIST
77906: LIST
77907: LIST
77908: LIST
77909: LIST
77910: LIST
77911: LIST
77912: LIST
77913: LIST
77914: LIST
77915: LIST
77916: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
77917: LD_ADDR_VAR 0 47
77921: PUSH
77922: LD_INT 0
77924: PUSH
77925: LD_INT 0
77927: PUSH
77928: EMPTY
77929: LIST
77930: LIST
77931: PUSH
77932: LD_INT 0
77934: PUSH
77935: LD_INT 1
77937: NEG
77938: PUSH
77939: EMPTY
77940: LIST
77941: LIST
77942: PUSH
77943: LD_INT 1
77945: PUSH
77946: LD_INT 0
77948: PUSH
77949: EMPTY
77950: LIST
77951: LIST
77952: PUSH
77953: LD_INT 1
77955: PUSH
77956: LD_INT 1
77958: PUSH
77959: EMPTY
77960: LIST
77961: LIST
77962: PUSH
77963: LD_INT 0
77965: PUSH
77966: LD_INT 1
77968: PUSH
77969: EMPTY
77970: LIST
77971: LIST
77972: PUSH
77973: LD_INT 1
77975: NEG
77976: PUSH
77977: LD_INT 0
77979: PUSH
77980: EMPTY
77981: LIST
77982: LIST
77983: PUSH
77984: LD_INT 1
77986: NEG
77987: PUSH
77988: LD_INT 1
77990: NEG
77991: PUSH
77992: EMPTY
77993: LIST
77994: LIST
77995: PUSH
77996: LD_INT 1
77998: NEG
77999: PUSH
78000: LD_INT 2
78002: NEG
78003: PUSH
78004: EMPTY
78005: LIST
78006: LIST
78007: PUSH
78008: LD_INT 0
78010: PUSH
78011: LD_INT 2
78013: NEG
78014: PUSH
78015: EMPTY
78016: LIST
78017: LIST
78018: PUSH
78019: LD_INT 1
78021: PUSH
78022: LD_INT 1
78024: NEG
78025: PUSH
78026: EMPTY
78027: LIST
78028: LIST
78029: PUSH
78030: LD_INT 2
78032: NEG
78033: PUSH
78034: LD_INT 1
78036: NEG
78037: PUSH
78038: EMPTY
78039: LIST
78040: LIST
78041: PUSH
78042: LD_INT 2
78044: NEG
78045: PUSH
78046: LD_INT 2
78048: NEG
78049: PUSH
78050: EMPTY
78051: LIST
78052: LIST
78053: PUSH
78054: EMPTY
78055: LIST
78056: LIST
78057: LIST
78058: LIST
78059: LIST
78060: LIST
78061: LIST
78062: LIST
78063: LIST
78064: LIST
78065: LIST
78066: LIST
78067: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
78068: LD_ADDR_VAR 0 48
78072: PUSH
78073: LD_INT 0
78075: PUSH
78076: LD_INT 0
78078: PUSH
78079: EMPTY
78080: LIST
78081: LIST
78082: PUSH
78083: LD_INT 0
78085: PUSH
78086: LD_INT 1
78088: NEG
78089: PUSH
78090: EMPTY
78091: LIST
78092: LIST
78093: PUSH
78094: LD_INT 1
78096: PUSH
78097: LD_INT 0
78099: PUSH
78100: EMPTY
78101: LIST
78102: LIST
78103: PUSH
78104: LD_INT 1
78106: PUSH
78107: LD_INT 1
78109: PUSH
78110: EMPTY
78111: LIST
78112: LIST
78113: PUSH
78114: LD_INT 0
78116: PUSH
78117: LD_INT 1
78119: PUSH
78120: EMPTY
78121: LIST
78122: LIST
78123: PUSH
78124: LD_INT 1
78126: NEG
78127: PUSH
78128: LD_INT 0
78130: PUSH
78131: EMPTY
78132: LIST
78133: LIST
78134: PUSH
78135: LD_INT 1
78137: NEG
78138: PUSH
78139: LD_INT 1
78141: NEG
78142: PUSH
78143: EMPTY
78144: LIST
78145: LIST
78146: PUSH
78147: LD_INT 1
78149: NEG
78150: PUSH
78151: LD_INT 2
78153: NEG
78154: PUSH
78155: EMPTY
78156: LIST
78157: LIST
78158: PUSH
78159: LD_INT 0
78161: PUSH
78162: LD_INT 2
78164: NEG
78165: PUSH
78166: EMPTY
78167: LIST
78168: LIST
78169: PUSH
78170: LD_INT 1
78172: PUSH
78173: LD_INT 1
78175: NEG
78176: PUSH
78177: EMPTY
78178: LIST
78179: LIST
78180: PUSH
78181: LD_INT 2
78183: PUSH
78184: LD_INT 0
78186: PUSH
78187: EMPTY
78188: LIST
78189: LIST
78190: PUSH
78191: LD_INT 2
78193: PUSH
78194: LD_INT 1
78196: PUSH
78197: EMPTY
78198: LIST
78199: LIST
78200: PUSH
78201: EMPTY
78202: LIST
78203: LIST
78204: LIST
78205: LIST
78206: LIST
78207: LIST
78208: LIST
78209: LIST
78210: LIST
78211: LIST
78212: LIST
78213: LIST
78214: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
78215: LD_ADDR_VAR 0 49
78219: PUSH
78220: LD_INT 0
78222: PUSH
78223: LD_INT 0
78225: PUSH
78226: EMPTY
78227: LIST
78228: LIST
78229: PUSH
78230: LD_INT 0
78232: PUSH
78233: LD_INT 1
78235: NEG
78236: PUSH
78237: EMPTY
78238: LIST
78239: LIST
78240: PUSH
78241: LD_INT 1
78243: PUSH
78244: LD_INT 0
78246: PUSH
78247: EMPTY
78248: LIST
78249: LIST
78250: PUSH
78251: LD_INT 1
78253: PUSH
78254: LD_INT 1
78256: PUSH
78257: EMPTY
78258: LIST
78259: LIST
78260: PUSH
78261: LD_INT 0
78263: PUSH
78264: LD_INT 1
78266: PUSH
78267: EMPTY
78268: LIST
78269: LIST
78270: PUSH
78271: LD_INT 1
78273: NEG
78274: PUSH
78275: LD_INT 0
78277: PUSH
78278: EMPTY
78279: LIST
78280: LIST
78281: PUSH
78282: LD_INT 1
78284: NEG
78285: PUSH
78286: LD_INT 1
78288: NEG
78289: PUSH
78290: EMPTY
78291: LIST
78292: LIST
78293: PUSH
78294: LD_INT 1
78296: PUSH
78297: LD_INT 1
78299: NEG
78300: PUSH
78301: EMPTY
78302: LIST
78303: LIST
78304: PUSH
78305: LD_INT 2
78307: PUSH
78308: LD_INT 0
78310: PUSH
78311: EMPTY
78312: LIST
78313: LIST
78314: PUSH
78315: LD_INT 2
78317: PUSH
78318: LD_INT 1
78320: PUSH
78321: EMPTY
78322: LIST
78323: LIST
78324: PUSH
78325: LD_INT 2
78327: PUSH
78328: LD_INT 2
78330: PUSH
78331: EMPTY
78332: LIST
78333: LIST
78334: PUSH
78335: LD_INT 1
78337: PUSH
78338: LD_INT 2
78340: PUSH
78341: EMPTY
78342: LIST
78343: LIST
78344: PUSH
78345: EMPTY
78346: LIST
78347: LIST
78348: LIST
78349: LIST
78350: LIST
78351: LIST
78352: LIST
78353: LIST
78354: LIST
78355: LIST
78356: LIST
78357: LIST
78358: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
78359: LD_ADDR_VAR 0 50
78363: PUSH
78364: LD_INT 0
78366: PUSH
78367: LD_INT 0
78369: PUSH
78370: EMPTY
78371: LIST
78372: LIST
78373: PUSH
78374: LD_INT 0
78376: PUSH
78377: LD_INT 1
78379: NEG
78380: PUSH
78381: EMPTY
78382: LIST
78383: LIST
78384: PUSH
78385: LD_INT 1
78387: PUSH
78388: LD_INT 0
78390: PUSH
78391: EMPTY
78392: LIST
78393: LIST
78394: PUSH
78395: LD_INT 1
78397: PUSH
78398: LD_INT 1
78400: PUSH
78401: EMPTY
78402: LIST
78403: LIST
78404: PUSH
78405: LD_INT 0
78407: PUSH
78408: LD_INT 1
78410: PUSH
78411: EMPTY
78412: LIST
78413: LIST
78414: PUSH
78415: LD_INT 1
78417: NEG
78418: PUSH
78419: LD_INT 0
78421: PUSH
78422: EMPTY
78423: LIST
78424: LIST
78425: PUSH
78426: LD_INT 1
78428: NEG
78429: PUSH
78430: LD_INT 1
78432: NEG
78433: PUSH
78434: EMPTY
78435: LIST
78436: LIST
78437: PUSH
78438: LD_INT 2
78440: PUSH
78441: LD_INT 1
78443: PUSH
78444: EMPTY
78445: LIST
78446: LIST
78447: PUSH
78448: LD_INT 2
78450: PUSH
78451: LD_INT 2
78453: PUSH
78454: EMPTY
78455: LIST
78456: LIST
78457: PUSH
78458: LD_INT 1
78460: PUSH
78461: LD_INT 2
78463: PUSH
78464: EMPTY
78465: LIST
78466: LIST
78467: PUSH
78468: LD_INT 0
78470: PUSH
78471: LD_INT 2
78473: PUSH
78474: EMPTY
78475: LIST
78476: LIST
78477: PUSH
78478: LD_INT 1
78480: NEG
78481: PUSH
78482: LD_INT 1
78484: PUSH
78485: EMPTY
78486: LIST
78487: LIST
78488: PUSH
78489: EMPTY
78490: LIST
78491: LIST
78492: LIST
78493: LIST
78494: LIST
78495: LIST
78496: LIST
78497: LIST
78498: LIST
78499: LIST
78500: LIST
78501: LIST
78502: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
78503: LD_ADDR_VAR 0 51
78507: PUSH
78508: LD_INT 0
78510: PUSH
78511: LD_INT 0
78513: PUSH
78514: EMPTY
78515: LIST
78516: LIST
78517: PUSH
78518: LD_INT 0
78520: PUSH
78521: LD_INT 1
78523: NEG
78524: PUSH
78525: EMPTY
78526: LIST
78527: LIST
78528: PUSH
78529: LD_INT 1
78531: PUSH
78532: LD_INT 0
78534: PUSH
78535: EMPTY
78536: LIST
78537: LIST
78538: PUSH
78539: LD_INT 1
78541: PUSH
78542: LD_INT 1
78544: PUSH
78545: EMPTY
78546: LIST
78547: LIST
78548: PUSH
78549: LD_INT 0
78551: PUSH
78552: LD_INT 1
78554: PUSH
78555: EMPTY
78556: LIST
78557: LIST
78558: PUSH
78559: LD_INT 1
78561: NEG
78562: PUSH
78563: LD_INT 0
78565: PUSH
78566: EMPTY
78567: LIST
78568: LIST
78569: PUSH
78570: LD_INT 1
78572: NEG
78573: PUSH
78574: LD_INT 1
78576: NEG
78577: PUSH
78578: EMPTY
78579: LIST
78580: LIST
78581: PUSH
78582: LD_INT 1
78584: PUSH
78585: LD_INT 2
78587: PUSH
78588: EMPTY
78589: LIST
78590: LIST
78591: PUSH
78592: LD_INT 0
78594: PUSH
78595: LD_INT 2
78597: PUSH
78598: EMPTY
78599: LIST
78600: LIST
78601: PUSH
78602: LD_INT 1
78604: NEG
78605: PUSH
78606: LD_INT 1
78608: PUSH
78609: EMPTY
78610: LIST
78611: LIST
78612: PUSH
78613: LD_INT 2
78615: NEG
78616: PUSH
78617: LD_INT 0
78619: PUSH
78620: EMPTY
78621: LIST
78622: LIST
78623: PUSH
78624: LD_INT 2
78626: NEG
78627: PUSH
78628: LD_INT 1
78630: NEG
78631: PUSH
78632: EMPTY
78633: LIST
78634: LIST
78635: PUSH
78636: EMPTY
78637: LIST
78638: LIST
78639: LIST
78640: LIST
78641: LIST
78642: LIST
78643: LIST
78644: LIST
78645: LIST
78646: LIST
78647: LIST
78648: LIST
78649: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78650: LD_ADDR_VAR 0 52
78654: PUSH
78655: LD_INT 0
78657: PUSH
78658: LD_INT 0
78660: PUSH
78661: EMPTY
78662: LIST
78663: LIST
78664: PUSH
78665: LD_INT 0
78667: PUSH
78668: LD_INT 1
78670: NEG
78671: PUSH
78672: EMPTY
78673: LIST
78674: LIST
78675: PUSH
78676: LD_INT 1
78678: PUSH
78679: LD_INT 0
78681: PUSH
78682: EMPTY
78683: LIST
78684: LIST
78685: PUSH
78686: LD_INT 1
78688: PUSH
78689: LD_INT 1
78691: PUSH
78692: EMPTY
78693: LIST
78694: LIST
78695: PUSH
78696: LD_INT 0
78698: PUSH
78699: LD_INT 1
78701: PUSH
78702: EMPTY
78703: LIST
78704: LIST
78705: PUSH
78706: LD_INT 1
78708: NEG
78709: PUSH
78710: LD_INT 0
78712: PUSH
78713: EMPTY
78714: LIST
78715: LIST
78716: PUSH
78717: LD_INT 1
78719: NEG
78720: PUSH
78721: LD_INT 1
78723: NEG
78724: PUSH
78725: EMPTY
78726: LIST
78727: LIST
78728: PUSH
78729: LD_INT 1
78731: NEG
78732: PUSH
78733: LD_INT 2
78735: NEG
78736: PUSH
78737: EMPTY
78738: LIST
78739: LIST
78740: PUSH
78741: LD_INT 1
78743: NEG
78744: PUSH
78745: LD_INT 1
78747: PUSH
78748: EMPTY
78749: LIST
78750: LIST
78751: PUSH
78752: LD_INT 2
78754: NEG
78755: PUSH
78756: LD_INT 0
78758: PUSH
78759: EMPTY
78760: LIST
78761: LIST
78762: PUSH
78763: LD_INT 2
78765: NEG
78766: PUSH
78767: LD_INT 1
78769: NEG
78770: PUSH
78771: EMPTY
78772: LIST
78773: LIST
78774: PUSH
78775: LD_INT 2
78777: NEG
78778: PUSH
78779: LD_INT 2
78781: NEG
78782: PUSH
78783: EMPTY
78784: LIST
78785: LIST
78786: PUSH
78787: EMPTY
78788: LIST
78789: LIST
78790: LIST
78791: LIST
78792: LIST
78793: LIST
78794: LIST
78795: LIST
78796: LIST
78797: LIST
78798: LIST
78799: LIST
78800: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78801: LD_ADDR_VAR 0 53
78805: PUSH
78806: LD_INT 0
78808: PUSH
78809: LD_INT 0
78811: PUSH
78812: EMPTY
78813: LIST
78814: LIST
78815: PUSH
78816: LD_INT 0
78818: PUSH
78819: LD_INT 1
78821: NEG
78822: PUSH
78823: EMPTY
78824: LIST
78825: LIST
78826: PUSH
78827: LD_INT 1
78829: PUSH
78830: LD_INT 0
78832: PUSH
78833: EMPTY
78834: LIST
78835: LIST
78836: PUSH
78837: LD_INT 1
78839: PUSH
78840: LD_INT 1
78842: PUSH
78843: EMPTY
78844: LIST
78845: LIST
78846: PUSH
78847: LD_INT 0
78849: PUSH
78850: LD_INT 1
78852: PUSH
78853: EMPTY
78854: LIST
78855: LIST
78856: PUSH
78857: LD_INT 1
78859: NEG
78860: PUSH
78861: LD_INT 0
78863: PUSH
78864: EMPTY
78865: LIST
78866: LIST
78867: PUSH
78868: LD_INT 1
78870: NEG
78871: PUSH
78872: LD_INT 1
78874: NEG
78875: PUSH
78876: EMPTY
78877: LIST
78878: LIST
78879: PUSH
78880: LD_INT 1
78882: NEG
78883: PUSH
78884: LD_INT 2
78886: NEG
78887: PUSH
78888: EMPTY
78889: LIST
78890: LIST
78891: PUSH
78892: LD_INT 0
78894: PUSH
78895: LD_INT 2
78897: NEG
78898: PUSH
78899: EMPTY
78900: LIST
78901: LIST
78902: PUSH
78903: LD_INT 1
78905: PUSH
78906: LD_INT 1
78908: NEG
78909: PUSH
78910: EMPTY
78911: LIST
78912: LIST
78913: PUSH
78914: LD_INT 2
78916: PUSH
78917: LD_INT 0
78919: PUSH
78920: EMPTY
78921: LIST
78922: LIST
78923: PUSH
78924: LD_INT 2
78926: PUSH
78927: LD_INT 1
78929: PUSH
78930: EMPTY
78931: LIST
78932: LIST
78933: PUSH
78934: LD_INT 2
78936: PUSH
78937: LD_INT 2
78939: PUSH
78940: EMPTY
78941: LIST
78942: LIST
78943: PUSH
78944: LD_INT 1
78946: PUSH
78947: LD_INT 2
78949: PUSH
78950: EMPTY
78951: LIST
78952: LIST
78953: PUSH
78954: LD_INT 0
78956: PUSH
78957: LD_INT 2
78959: PUSH
78960: EMPTY
78961: LIST
78962: LIST
78963: PUSH
78964: LD_INT 1
78966: NEG
78967: PUSH
78968: LD_INT 1
78970: PUSH
78971: EMPTY
78972: LIST
78973: LIST
78974: PUSH
78975: LD_INT 2
78977: NEG
78978: PUSH
78979: LD_INT 0
78981: PUSH
78982: EMPTY
78983: LIST
78984: LIST
78985: PUSH
78986: LD_INT 2
78988: NEG
78989: PUSH
78990: LD_INT 1
78992: NEG
78993: PUSH
78994: EMPTY
78995: LIST
78996: LIST
78997: PUSH
78998: LD_INT 2
79000: NEG
79001: PUSH
79002: LD_INT 2
79004: NEG
79005: PUSH
79006: EMPTY
79007: LIST
79008: LIST
79009: PUSH
79010: EMPTY
79011: LIST
79012: LIST
79013: LIST
79014: LIST
79015: LIST
79016: LIST
79017: LIST
79018: LIST
79019: LIST
79020: LIST
79021: LIST
79022: LIST
79023: LIST
79024: LIST
79025: LIST
79026: LIST
79027: LIST
79028: LIST
79029: LIST
79030: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79031: LD_ADDR_VAR 0 54
79035: PUSH
79036: LD_INT 0
79038: PUSH
79039: LD_INT 0
79041: PUSH
79042: EMPTY
79043: LIST
79044: LIST
79045: PUSH
79046: LD_INT 0
79048: PUSH
79049: LD_INT 1
79051: NEG
79052: PUSH
79053: EMPTY
79054: LIST
79055: LIST
79056: PUSH
79057: LD_INT 1
79059: PUSH
79060: LD_INT 0
79062: PUSH
79063: EMPTY
79064: LIST
79065: LIST
79066: PUSH
79067: LD_INT 1
79069: PUSH
79070: LD_INT 1
79072: PUSH
79073: EMPTY
79074: LIST
79075: LIST
79076: PUSH
79077: LD_INT 0
79079: PUSH
79080: LD_INT 1
79082: PUSH
79083: EMPTY
79084: LIST
79085: LIST
79086: PUSH
79087: LD_INT 1
79089: NEG
79090: PUSH
79091: LD_INT 0
79093: PUSH
79094: EMPTY
79095: LIST
79096: LIST
79097: PUSH
79098: LD_INT 1
79100: NEG
79101: PUSH
79102: LD_INT 1
79104: NEG
79105: PUSH
79106: EMPTY
79107: LIST
79108: LIST
79109: PUSH
79110: LD_INT 1
79112: NEG
79113: PUSH
79114: LD_INT 2
79116: NEG
79117: PUSH
79118: EMPTY
79119: LIST
79120: LIST
79121: PUSH
79122: LD_INT 0
79124: PUSH
79125: LD_INT 2
79127: NEG
79128: PUSH
79129: EMPTY
79130: LIST
79131: LIST
79132: PUSH
79133: LD_INT 1
79135: PUSH
79136: LD_INT 1
79138: NEG
79139: PUSH
79140: EMPTY
79141: LIST
79142: LIST
79143: PUSH
79144: LD_INT 2
79146: PUSH
79147: LD_INT 0
79149: PUSH
79150: EMPTY
79151: LIST
79152: LIST
79153: PUSH
79154: LD_INT 2
79156: PUSH
79157: LD_INT 1
79159: PUSH
79160: EMPTY
79161: LIST
79162: LIST
79163: PUSH
79164: LD_INT 2
79166: PUSH
79167: LD_INT 2
79169: PUSH
79170: EMPTY
79171: LIST
79172: LIST
79173: PUSH
79174: LD_INT 1
79176: PUSH
79177: LD_INT 2
79179: PUSH
79180: EMPTY
79181: LIST
79182: LIST
79183: PUSH
79184: LD_INT 0
79186: PUSH
79187: LD_INT 2
79189: PUSH
79190: EMPTY
79191: LIST
79192: LIST
79193: PUSH
79194: LD_INT 1
79196: NEG
79197: PUSH
79198: LD_INT 1
79200: PUSH
79201: EMPTY
79202: LIST
79203: LIST
79204: PUSH
79205: LD_INT 2
79207: NEG
79208: PUSH
79209: LD_INT 0
79211: PUSH
79212: EMPTY
79213: LIST
79214: LIST
79215: PUSH
79216: LD_INT 2
79218: NEG
79219: PUSH
79220: LD_INT 1
79222: NEG
79223: PUSH
79224: EMPTY
79225: LIST
79226: LIST
79227: PUSH
79228: LD_INT 2
79230: NEG
79231: PUSH
79232: LD_INT 2
79234: NEG
79235: PUSH
79236: EMPTY
79237: LIST
79238: LIST
79239: PUSH
79240: EMPTY
79241: LIST
79242: LIST
79243: LIST
79244: LIST
79245: LIST
79246: LIST
79247: LIST
79248: LIST
79249: LIST
79250: LIST
79251: LIST
79252: LIST
79253: LIST
79254: LIST
79255: LIST
79256: LIST
79257: LIST
79258: LIST
79259: LIST
79260: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79261: LD_ADDR_VAR 0 55
79265: PUSH
79266: LD_INT 0
79268: PUSH
79269: LD_INT 0
79271: PUSH
79272: EMPTY
79273: LIST
79274: LIST
79275: PUSH
79276: LD_INT 0
79278: PUSH
79279: LD_INT 1
79281: NEG
79282: PUSH
79283: EMPTY
79284: LIST
79285: LIST
79286: PUSH
79287: LD_INT 1
79289: PUSH
79290: LD_INT 0
79292: PUSH
79293: EMPTY
79294: LIST
79295: LIST
79296: PUSH
79297: LD_INT 1
79299: PUSH
79300: LD_INT 1
79302: PUSH
79303: EMPTY
79304: LIST
79305: LIST
79306: PUSH
79307: LD_INT 0
79309: PUSH
79310: LD_INT 1
79312: PUSH
79313: EMPTY
79314: LIST
79315: LIST
79316: PUSH
79317: LD_INT 1
79319: NEG
79320: PUSH
79321: LD_INT 0
79323: PUSH
79324: EMPTY
79325: LIST
79326: LIST
79327: PUSH
79328: LD_INT 1
79330: NEG
79331: PUSH
79332: LD_INT 1
79334: NEG
79335: PUSH
79336: EMPTY
79337: LIST
79338: LIST
79339: PUSH
79340: LD_INT 1
79342: NEG
79343: PUSH
79344: LD_INT 2
79346: NEG
79347: PUSH
79348: EMPTY
79349: LIST
79350: LIST
79351: PUSH
79352: LD_INT 0
79354: PUSH
79355: LD_INT 2
79357: NEG
79358: PUSH
79359: EMPTY
79360: LIST
79361: LIST
79362: PUSH
79363: LD_INT 1
79365: PUSH
79366: LD_INT 1
79368: NEG
79369: PUSH
79370: EMPTY
79371: LIST
79372: LIST
79373: PUSH
79374: LD_INT 2
79376: PUSH
79377: LD_INT 0
79379: PUSH
79380: EMPTY
79381: LIST
79382: LIST
79383: PUSH
79384: LD_INT 2
79386: PUSH
79387: LD_INT 1
79389: PUSH
79390: EMPTY
79391: LIST
79392: LIST
79393: PUSH
79394: LD_INT 2
79396: PUSH
79397: LD_INT 2
79399: PUSH
79400: EMPTY
79401: LIST
79402: LIST
79403: PUSH
79404: LD_INT 1
79406: PUSH
79407: LD_INT 2
79409: PUSH
79410: EMPTY
79411: LIST
79412: LIST
79413: PUSH
79414: LD_INT 0
79416: PUSH
79417: LD_INT 2
79419: PUSH
79420: EMPTY
79421: LIST
79422: LIST
79423: PUSH
79424: LD_INT 1
79426: NEG
79427: PUSH
79428: LD_INT 1
79430: PUSH
79431: EMPTY
79432: LIST
79433: LIST
79434: PUSH
79435: LD_INT 2
79437: NEG
79438: PUSH
79439: LD_INT 0
79441: PUSH
79442: EMPTY
79443: LIST
79444: LIST
79445: PUSH
79446: LD_INT 2
79448: NEG
79449: PUSH
79450: LD_INT 1
79452: NEG
79453: PUSH
79454: EMPTY
79455: LIST
79456: LIST
79457: PUSH
79458: LD_INT 2
79460: NEG
79461: PUSH
79462: LD_INT 2
79464: NEG
79465: PUSH
79466: EMPTY
79467: LIST
79468: LIST
79469: PUSH
79470: EMPTY
79471: LIST
79472: LIST
79473: LIST
79474: LIST
79475: LIST
79476: LIST
79477: LIST
79478: LIST
79479: LIST
79480: LIST
79481: LIST
79482: LIST
79483: LIST
79484: LIST
79485: LIST
79486: LIST
79487: LIST
79488: LIST
79489: LIST
79490: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79491: LD_ADDR_VAR 0 56
79495: PUSH
79496: LD_INT 0
79498: PUSH
79499: LD_INT 0
79501: PUSH
79502: EMPTY
79503: LIST
79504: LIST
79505: PUSH
79506: LD_INT 0
79508: PUSH
79509: LD_INT 1
79511: NEG
79512: PUSH
79513: EMPTY
79514: LIST
79515: LIST
79516: PUSH
79517: LD_INT 1
79519: PUSH
79520: LD_INT 0
79522: PUSH
79523: EMPTY
79524: LIST
79525: LIST
79526: PUSH
79527: LD_INT 1
79529: PUSH
79530: LD_INT 1
79532: PUSH
79533: EMPTY
79534: LIST
79535: LIST
79536: PUSH
79537: LD_INT 0
79539: PUSH
79540: LD_INT 1
79542: PUSH
79543: EMPTY
79544: LIST
79545: LIST
79546: PUSH
79547: LD_INT 1
79549: NEG
79550: PUSH
79551: LD_INT 0
79553: PUSH
79554: EMPTY
79555: LIST
79556: LIST
79557: PUSH
79558: LD_INT 1
79560: NEG
79561: PUSH
79562: LD_INT 1
79564: NEG
79565: PUSH
79566: EMPTY
79567: LIST
79568: LIST
79569: PUSH
79570: LD_INT 1
79572: NEG
79573: PUSH
79574: LD_INT 2
79576: NEG
79577: PUSH
79578: EMPTY
79579: LIST
79580: LIST
79581: PUSH
79582: LD_INT 0
79584: PUSH
79585: LD_INT 2
79587: NEG
79588: PUSH
79589: EMPTY
79590: LIST
79591: LIST
79592: PUSH
79593: LD_INT 1
79595: PUSH
79596: LD_INT 1
79598: NEG
79599: PUSH
79600: EMPTY
79601: LIST
79602: LIST
79603: PUSH
79604: LD_INT 2
79606: PUSH
79607: LD_INT 0
79609: PUSH
79610: EMPTY
79611: LIST
79612: LIST
79613: PUSH
79614: LD_INT 2
79616: PUSH
79617: LD_INT 1
79619: PUSH
79620: EMPTY
79621: LIST
79622: LIST
79623: PUSH
79624: LD_INT 2
79626: PUSH
79627: LD_INT 2
79629: PUSH
79630: EMPTY
79631: LIST
79632: LIST
79633: PUSH
79634: LD_INT 1
79636: PUSH
79637: LD_INT 2
79639: PUSH
79640: EMPTY
79641: LIST
79642: LIST
79643: PUSH
79644: LD_INT 0
79646: PUSH
79647: LD_INT 2
79649: PUSH
79650: EMPTY
79651: LIST
79652: LIST
79653: PUSH
79654: LD_INT 1
79656: NEG
79657: PUSH
79658: LD_INT 1
79660: PUSH
79661: EMPTY
79662: LIST
79663: LIST
79664: PUSH
79665: LD_INT 2
79667: NEG
79668: PUSH
79669: LD_INT 0
79671: PUSH
79672: EMPTY
79673: LIST
79674: LIST
79675: PUSH
79676: LD_INT 2
79678: NEG
79679: PUSH
79680: LD_INT 1
79682: NEG
79683: PUSH
79684: EMPTY
79685: LIST
79686: LIST
79687: PUSH
79688: LD_INT 2
79690: NEG
79691: PUSH
79692: LD_INT 2
79694: NEG
79695: PUSH
79696: EMPTY
79697: LIST
79698: LIST
79699: PUSH
79700: EMPTY
79701: LIST
79702: LIST
79703: LIST
79704: LIST
79705: LIST
79706: LIST
79707: LIST
79708: LIST
79709: LIST
79710: LIST
79711: LIST
79712: LIST
79713: LIST
79714: LIST
79715: LIST
79716: LIST
79717: LIST
79718: LIST
79719: LIST
79720: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79721: LD_ADDR_VAR 0 57
79725: PUSH
79726: LD_INT 0
79728: PUSH
79729: LD_INT 0
79731: PUSH
79732: EMPTY
79733: LIST
79734: LIST
79735: PUSH
79736: LD_INT 0
79738: PUSH
79739: LD_INT 1
79741: NEG
79742: PUSH
79743: EMPTY
79744: LIST
79745: LIST
79746: PUSH
79747: LD_INT 1
79749: PUSH
79750: LD_INT 0
79752: PUSH
79753: EMPTY
79754: LIST
79755: LIST
79756: PUSH
79757: LD_INT 1
79759: PUSH
79760: LD_INT 1
79762: PUSH
79763: EMPTY
79764: LIST
79765: LIST
79766: PUSH
79767: LD_INT 0
79769: PUSH
79770: LD_INT 1
79772: PUSH
79773: EMPTY
79774: LIST
79775: LIST
79776: PUSH
79777: LD_INT 1
79779: NEG
79780: PUSH
79781: LD_INT 0
79783: PUSH
79784: EMPTY
79785: LIST
79786: LIST
79787: PUSH
79788: LD_INT 1
79790: NEG
79791: PUSH
79792: LD_INT 1
79794: NEG
79795: PUSH
79796: EMPTY
79797: LIST
79798: LIST
79799: PUSH
79800: LD_INT 1
79802: NEG
79803: PUSH
79804: LD_INT 2
79806: NEG
79807: PUSH
79808: EMPTY
79809: LIST
79810: LIST
79811: PUSH
79812: LD_INT 0
79814: PUSH
79815: LD_INT 2
79817: NEG
79818: PUSH
79819: EMPTY
79820: LIST
79821: LIST
79822: PUSH
79823: LD_INT 1
79825: PUSH
79826: LD_INT 1
79828: NEG
79829: PUSH
79830: EMPTY
79831: LIST
79832: LIST
79833: PUSH
79834: LD_INT 2
79836: PUSH
79837: LD_INT 0
79839: PUSH
79840: EMPTY
79841: LIST
79842: LIST
79843: PUSH
79844: LD_INT 2
79846: PUSH
79847: LD_INT 1
79849: PUSH
79850: EMPTY
79851: LIST
79852: LIST
79853: PUSH
79854: LD_INT 2
79856: PUSH
79857: LD_INT 2
79859: PUSH
79860: EMPTY
79861: LIST
79862: LIST
79863: PUSH
79864: LD_INT 1
79866: PUSH
79867: LD_INT 2
79869: PUSH
79870: EMPTY
79871: LIST
79872: LIST
79873: PUSH
79874: LD_INT 0
79876: PUSH
79877: LD_INT 2
79879: PUSH
79880: EMPTY
79881: LIST
79882: LIST
79883: PUSH
79884: LD_INT 1
79886: NEG
79887: PUSH
79888: LD_INT 1
79890: PUSH
79891: EMPTY
79892: LIST
79893: LIST
79894: PUSH
79895: LD_INT 2
79897: NEG
79898: PUSH
79899: LD_INT 0
79901: PUSH
79902: EMPTY
79903: LIST
79904: LIST
79905: PUSH
79906: LD_INT 2
79908: NEG
79909: PUSH
79910: LD_INT 1
79912: NEG
79913: PUSH
79914: EMPTY
79915: LIST
79916: LIST
79917: PUSH
79918: LD_INT 2
79920: NEG
79921: PUSH
79922: LD_INT 2
79924: NEG
79925: PUSH
79926: EMPTY
79927: LIST
79928: LIST
79929: PUSH
79930: EMPTY
79931: LIST
79932: LIST
79933: LIST
79934: LIST
79935: LIST
79936: LIST
79937: LIST
79938: LIST
79939: LIST
79940: LIST
79941: LIST
79942: LIST
79943: LIST
79944: LIST
79945: LIST
79946: LIST
79947: LIST
79948: LIST
79949: LIST
79950: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79951: LD_ADDR_VAR 0 58
79955: PUSH
79956: LD_INT 0
79958: PUSH
79959: LD_INT 0
79961: PUSH
79962: EMPTY
79963: LIST
79964: LIST
79965: PUSH
79966: LD_INT 0
79968: PUSH
79969: LD_INT 1
79971: NEG
79972: PUSH
79973: EMPTY
79974: LIST
79975: LIST
79976: PUSH
79977: LD_INT 1
79979: PUSH
79980: LD_INT 0
79982: PUSH
79983: EMPTY
79984: LIST
79985: LIST
79986: PUSH
79987: LD_INT 1
79989: PUSH
79990: LD_INT 1
79992: PUSH
79993: EMPTY
79994: LIST
79995: LIST
79996: PUSH
79997: LD_INT 0
79999: PUSH
80000: LD_INT 1
80002: PUSH
80003: EMPTY
80004: LIST
80005: LIST
80006: PUSH
80007: LD_INT 1
80009: NEG
80010: PUSH
80011: LD_INT 0
80013: PUSH
80014: EMPTY
80015: LIST
80016: LIST
80017: PUSH
80018: LD_INT 1
80020: NEG
80021: PUSH
80022: LD_INT 1
80024: NEG
80025: PUSH
80026: EMPTY
80027: LIST
80028: LIST
80029: PUSH
80030: LD_INT 1
80032: NEG
80033: PUSH
80034: LD_INT 2
80036: NEG
80037: PUSH
80038: EMPTY
80039: LIST
80040: LIST
80041: PUSH
80042: LD_INT 0
80044: PUSH
80045: LD_INT 2
80047: NEG
80048: PUSH
80049: EMPTY
80050: LIST
80051: LIST
80052: PUSH
80053: LD_INT 1
80055: PUSH
80056: LD_INT 1
80058: NEG
80059: PUSH
80060: EMPTY
80061: LIST
80062: LIST
80063: PUSH
80064: LD_INT 2
80066: PUSH
80067: LD_INT 0
80069: PUSH
80070: EMPTY
80071: LIST
80072: LIST
80073: PUSH
80074: LD_INT 2
80076: PUSH
80077: LD_INT 1
80079: PUSH
80080: EMPTY
80081: LIST
80082: LIST
80083: PUSH
80084: LD_INT 2
80086: PUSH
80087: LD_INT 2
80089: PUSH
80090: EMPTY
80091: LIST
80092: LIST
80093: PUSH
80094: LD_INT 1
80096: PUSH
80097: LD_INT 2
80099: PUSH
80100: EMPTY
80101: LIST
80102: LIST
80103: PUSH
80104: LD_INT 0
80106: PUSH
80107: LD_INT 2
80109: PUSH
80110: EMPTY
80111: LIST
80112: LIST
80113: PUSH
80114: LD_INT 1
80116: NEG
80117: PUSH
80118: LD_INT 1
80120: PUSH
80121: EMPTY
80122: LIST
80123: LIST
80124: PUSH
80125: LD_INT 2
80127: NEG
80128: PUSH
80129: LD_INT 0
80131: PUSH
80132: EMPTY
80133: LIST
80134: LIST
80135: PUSH
80136: LD_INT 2
80138: NEG
80139: PUSH
80140: LD_INT 1
80142: NEG
80143: PUSH
80144: EMPTY
80145: LIST
80146: LIST
80147: PUSH
80148: LD_INT 2
80150: NEG
80151: PUSH
80152: LD_INT 2
80154: NEG
80155: PUSH
80156: EMPTY
80157: LIST
80158: LIST
80159: PUSH
80160: EMPTY
80161: LIST
80162: LIST
80163: LIST
80164: LIST
80165: LIST
80166: LIST
80167: LIST
80168: LIST
80169: LIST
80170: LIST
80171: LIST
80172: LIST
80173: LIST
80174: LIST
80175: LIST
80176: LIST
80177: LIST
80178: LIST
80179: LIST
80180: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80181: LD_ADDR_VAR 0 59
80185: PUSH
80186: LD_INT 0
80188: PUSH
80189: LD_INT 0
80191: PUSH
80192: EMPTY
80193: LIST
80194: LIST
80195: PUSH
80196: LD_INT 0
80198: PUSH
80199: LD_INT 1
80201: NEG
80202: PUSH
80203: EMPTY
80204: LIST
80205: LIST
80206: PUSH
80207: LD_INT 1
80209: PUSH
80210: LD_INT 0
80212: PUSH
80213: EMPTY
80214: LIST
80215: LIST
80216: PUSH
80217: LD_INT 1
80219: PUSH
80220: LD_INT 1
80222: PUSH
80223: EMPTY
80224: LIST
80225: LIST
80226: PUSH
80227: LD_INT 0
80229: PUSH
80230: LD_INT 1
80232: PUSH
80233: EMPTY
80234: LIST
80235: LIST
80236: PUSH
80237: LD_INT 1
80239: NEG
80240: PUSH
80241: LD_INT 0
80243: PUSH
80244: EMPTY
80245: LIST
80246: LIST
80247: PUSH
80248: LD_INT 1
80250: NEG
80251: PUSH
80252: LD_INT 1
80254: NEG
80255: PUSH
80256: EMPTY
80257: LIST
80258: LIST
80259: PUSH
80260: EMPTY
80261: LIST
80262: LIST
80263: LIST
80264: LIST
80265: LIST
80266: LIST
80267: LIST
80268: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80269: LD_ADDR_VAR 0 60
80273: PUSH
80274: LD_INT 0
80276: PUSH
80277: LD_INT 0
80279: PUSH
80280: EMPTY
80281: LIST
80282: LIST
80283: PUSH
80284: LD_INT 0
80286: PUSH
80287: LD_INT 1
80289: NEG
80290: PUSH
80291: EMPTY
80292: LIST
80293: LIST
80294: PUSH
80295: LD_INT 1
80297: PUSH
80298: LD_INT 0
80300: PUSH
80301: EMPTY
80302: LIST
80303: LIST
80304: PUSH
80305: LD_INT 1
80307: PUSH
80308: LD_INT 1
80310: PUSH
80311: EMPTY
80312: LIST
80313: LIST
80314: PUSH
80315: LD_INT 0
80317: PUSH
80318: LD_INT 1
80320: PUSH
80321: EMPTY
80322: LIST
80323: LIST
80324: PUSH
80325: LD_INT 1
80327: NEG
80328: PUSH
80329: LD_INT 0
80331: PUSH
80332: EMPTY
80333: LIST
80334: LIST
80335: PUSH
80336: LD_INT 1
80338: NEG
80339: PUSH
80340: LD_INT 1
80342: NEG
80343: PUSH
80344: EMPTY
80345: LIST
80346: LIST
80347: PUSH
80348: EMPTY
80349: LIST
80350: LIST
80351: LIST
80352: LIST
80353: LIST
80354: LIST
80355: LIST
80356: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80357: LD_ADDR_VAR 0 61
80361: PUSH
80362: LD_INT 0
80364: PUSH
80365: LD_INT 0
80367: PUSH
80368: EMPTY
80369: LIST
80370: LIST
80371: PUSH
80372: LD_INT 0
80374: PUSH
80375: LD_INT 1
80377: NEG
80378: PUSH
80379: EMPTY
80380: LIST
80381: LIST
80382: PUSH
80383: LD_INT 1
80385: PUSH
80386: LD_INT 0
80388: PUSH
80389: EMPTY
80390: LIST
80391: LIST
80392: PUSH
80393: LD_INT 1
80395: PUSH
80396: LD_INT 1
80398: PUSH
80399: EMPTY
80400: LIST
80401: LIST
80402: PUSH
80403: LD_INT 0
80405: PUSH
80406: LD_INT 1
80408: PUSH
80409: EMPTY
80410: LIST
80411: LIST
80412: PUSH
80413: LD_INT 1
80415: NEG
80416: PUSH
80417: LD_INT 0
80419: PUSH
80420: EMPTY
80421: LIST
80422: LIST
80423: PUSH
80424: LD_INT 1
80426: NEG
80427: PUSH
80428: LD_INT 1
80430: NEG
80431: PUSH
80432: EMPTY
80433: LIST
80434: LIST
80435: PUSH
80436: EMPTY
80437: LIST
80438: LIST
80439: LIST
80440: LIST
80441: LIST
80442: LIST
80443: LIST
80444: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80445: LD_ADDR_VAR 0 62
80449: PUSH
80450: LD_INT 0
80452: PUSH
80453: LD_INT 0
80455: PUSH
80456: EMPTY
80457: LIST
80458: LIST
80459: PUSH
80460: LD_INT 0
80462: PUSH
80463: LD_INT 1
80465: NEG
80466: PUSH
80467: EMPTY
80468: LIST
80469: LIST
80470: PUSH
80471: LD_INT 1
80473: PUSH
80474: LD_INT 0
80476: PUSH
80477: EMPTY
80478: LIST
80479: LIST
80480: PUSH
80481: LD_INT 1
80483: PUSH
80484: LD_INT 1
80486: PUSH
80487: EMPTY
80488: LIST
80489: LIST
80490: PUSH
80491: LD_INT 0
80493: PUSH
80494: LD_INT 1
80496: PUSH
80497: EMPTY
80498: LIST
80499: LIST
80500: PUSH
80501: LD_INT 1
80503: NEG
80504: PUSH
80505: LD_INT 0
80507: PUSH
80508: EMPTY
80509: LIST
80510: LIST
80511: PUSH
80512: LD_INT 1
80514: NEG
80515: PUSH
80516: LD_INT 1
80518: NEG
80519: PUSH
80520: EMPTY
80521: LIST
80522: LIST
80523: PUSH
80524: EMPTY
80525: LIST
80526: LIST
80527: LIST
80528: LIST
80529: LIST
80530: LIST
80531: LIST
80532: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80533: LD_ADDR_VAR 0 63
80537: PUSH
80538: LD_INT 0
80540: PUSH
80541: LD_INT 0
80543: PUSH
80544: EMPTY
80545: LIST
80546: LIST
80547: PUSH
80548: LD_INT 0
80550: PUSH
80551: LD_INT 1
80553: NEG
80554: PUSH
80555: EMPTY
80556: LIST
80557: LIST
80558: PUSH
80559: LD_INT 1
80561: PUSH
80562: LD_INT 0
80564: PUSH
80565: EMPTY
80566: LIST
80567: LIST
80568: PUSH
80569: LD_INT 1
80571: PUSH
80572: LD_INT 1
80574: PUSH
80575: EMPTY
80576: LIST
80577: LIST
80578: PUSH
80579: LD_INT 0
80581: PUSH
80582: LD_INT 1
80584: PUSH
80585: EMPTY
80586: LIST
80587: LIST
80588: PUSH
80589: LD_INT 1
80591: NEG
80592: PUSH
80593: LD_INT 0
80595: PUSH
80596: EMPTY
80597: LIST
80598: LIST
80599: PUSH
80600: LD_INT 1
80602: NEG
80603: PUSH
80604: LD_INT 1
80606: NEG
80607: PUSH
80608: EMPTY
80609: LIST
80610: LIST
80611: PUSH
80612: EMPTY
80613: LIST
80614: LIST
80615: LIST
80616: LIST
80617: LIST
80618: LIST
80619: LIST
80620: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80621: LD_ADDR_VAR 0 64
80625: PUSH
80626: LD_INT 0
80628: PUSH
80629: LD_INT 0
80631: PUSH
80632: EMPTY
80633: LIST
80634: LIST
80635: PUSH
80636: LD_INT 0
80638: PUSH
80639: LD_INT 1
80641: NEG
80642: PUSH
80643: EMPTY
80644: LIST
80645: LIST
80646: PUSH
80647: LD_INT 1
80649: PUSH
80650: LD_INT 0
80652: PUSH
80653: EMPTY
80654: LIST
80655: LIST
80656: PUSH
80657: LD_INT 1
80659: PUSH
80660: LD_INT 1
80662: PUSH
80663: EMPTY
80664: LIST
80665: LIST
80666: PUSH
80667: LD_INT 0
80669: PUSH
80670: LD_INT 1
80672: PUSH
80673: EMPTY
80674: LIST
80675: LIST
80676: PUSH
80677: LD_INT 1
80679: NEG
80680: PUSH
80681: LD_INT 0
80683: PUSH
80684: EMPTY
80685: LIST
80686: LIST
80687: PUSH
80688: LD_INT 1
80690: NEG
80691: PUSH
80692: LD_INT 1
80694: NEG
80695: PUSH
80696: EMPTY
80697: LIST
80698: LIST
80699: PUSH
80700: EMPTY
80701: LIST
80702: LIST
80703: LIST
80704: LIST
80705: LIST
80706: LIST
80707: LIST
80708: ST_TO_ADDR
// end ; 1 :
80709: GO 86606
80711: LD_INT 1
80713: DOUBLE
80714: EQUAL
80715: IFTRUE 80719
80717: GO 83342
80719: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
80720: LD_ADDR_VAR 0 11
80724: PUSH
80725: LD_INT 1
80727: NEG
80728: PUSH
80729: LD_INT 3
80731: NEG
80732: PUSH
80733: EMPTY
80734: LIST
80735: LIST
80736: PUSH
80737: LD_INT 0
80739: PUSH
80740: LD_INT 3
80742: NEG
80743: PUSH
80744: EMPTY
80745: LIST
80746: LIST
80747: PUSH
80748: LD_INT 1
80750: PUSH
80751: LD_INT 2
80753: NEG
80754: PUSH
80755: EMPTY
80756: LIST
80757: LIST
80758: PUSH
80759: EMPTY
80760: LIST
80761: LIST
80762: LIST
80763: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
80764: LD_ADDR_VAR 0 12
80768: PUSH
80769: LD_INT 2
80771: PUSH
80772: LD_INT 1
80774: NEG
80775: PUSH
80776: EMPTY
80777: LIST
80778: LIST
80779: PUSH
80780: LD_INT 3
80782: PUSH
80783: LD_INT 0
80785: PUSH
80786: EMPTY
80787: LIST
80788: LIST
80789: PUSH
80790: LD_INT 3
80792: PUSH
80793: LD_INT 1
80795: PUSH
80796: EMPTY
80797: LIST
80798: LIST
80799: PUSH
80800: EMPTY
80801: LIST
80802: LIST
80803: LIST
80804: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
80805: LD_ADDR_VAR 0 13
80809: PUSH
80810: LD_INT 3
80812: PUSH
80813: LD_INT 2
80815: PUSH
80816: EMPTY
80817: LIST
80818: LIST
80819: PUSH
80820: LD_INT 3
80822: PUSH
80823: LD_INT 3
80825: PUSH
80826: EMPTY
80827: LIST
80828: LIST
80829: PUSH
80830: LD_INT 2
80832: PUSH
80833: LD_INT 3
80835: PUSH
80836: EMPTY
80837: LIST
80838: LIST
80839: PUSH
80840: EMPTY
80841: LIST
80842: LIST
80843: LIST
80844: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
80845: LD_ADDR_VAR 0 14
80849: PUSH
80850: LD_INT 1
80852: PUSH
80853: LD_INT 3
80855: PUSH
80856: EMPTY
80857: LIST
80858: LIST
80859: PUSH
80860: LD_INT 0
80862: PUSH
80863: LD_INT 3
80865: PUSH
80866: EMPTY
80867: LIST
80868: LIST
80869: PUSH
80870: LD_INT 1
80872: NEG
80873: PUSH
80874: LD_INT 2
80876: PUSH
80877: EMPTY
80878: LIST
80879: LIST
80880: PUSH
80881: EMPTY
80882: LIST
80883: LIST
80884: LIST
80885: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
80886: LD_ADDR_VAR 0 15
80890: PUSH
80891: LD_INT 2
80893: NEG
80894: PUSH
80895: LD_INT 1
80897: PUSH
80898: EMPTY
80899: LIST
80900: LIST
80901: PUSH
80902: LD_INT 3
80904: NEG
80905: PUSH
80906: LD_INT 0
80908: PUSH
80909: EMPTY
80910: LIST
80911: LIST
80912: PUSH
80913: LD_INT 3
80915: NEG
80916: PUSH
80917: LD_INT 1
80919: NEG
80920: PUSH
80921: EMPTY
80922: LIST
80923: LIST
80924: PUSH
80925: EMPTY
80926: LIST
80927: LIST
80928: LIST
80929: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
80930: LD_ADDR_VAR 0 16
80934: PUSH
80935: LD_INT 2
80937: NEG
80938: PUSH
80939: LD_INT 3
80941: NEG
80942: PUSH
80943: EMPTY
80944: LIST
80945: LIST
80946: PUSH
80947: LD_INT 3
80949: NEG
80950: PUSH
80951: LD_INT 2
80953: NEG
80954: PUSH
80955: EMPTY
80956: LIST
80957: LIST
80958: PUSH
80959: LD_INT 3
80961: NEG
80962: PUSH
80963: LD_INT 3
80965: NEG
80966: PUSH
80967: EMPTY
80968: LIST
80969: LIST
80970: PUSH
80971: EMPTY
80972: LIST
80973: LIST
80974: LIST
80975: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
80976: LD_ADDR_VAR 0 17
80980: PUSH
80981: LD_INT 1
80983: NEG
80984: PUSH
80985: LD_INT 3
80987: NEG
80988: PUSH
80989: EMPTY
80990: LIST
80991: LIST
80992: PUSH
80993: LD_INT 0
80995: PUSH
80996: LD_INT 3
80998: NEG
80999: PUSH
81000: EMPTY
81001: LIST
81002: LIST
81003: PUSH
81004: LD_INT 1
81006: PUSH
81007: LD_INT 2
81009: NEG
81010: PUSH
81011: EMPTY
81012: LIST
81013: LIST
81014: PUSH
81015: EMPTY
81016: LIST
81017: LIST
81018: LIST
81019: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
81020: LD_ADDR_VAR 0 18
81024: PUSH
81025: LD_INT 2
81027: PUSH
81028: LD_INT 1
81030: NEG
81031: PUSH
81032: EMPTY
81033: LIST
81034: LIST
81035: PUSH
81036: LD_INT 3
81038: PUSH
81039: LD_INT 0
81041: PUSH
81042: EMPTY
81043: LIST
81044: LIST
81045: PUSH
81046: LD_INT 3
81048: PUSH
81049: LD_INT 1
81051: PUSH
81052: EMPTY
81053: LIST
81054: LIST
81055: PUSH
81056: EMPTY
81057: LIST
81058: LIST
81059: LIST
81060: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
81061: LD_ADDR_VAR 0 19
81065: PUSH
81066: LD_INT 3
81068: PUSH
81069: LD_INT 2
81071: PUSH
81072: EMPTY
81073: LIST
81074: LIST
81075: PUSH
81076: LD_INT 3
81078: PUSH
81079: LD_INT 3
81081: PUSH
81082: EMPTY
81083: LIST
81084: LIST
81085: PUSH
81086: LD_INT 2
81088: PUSH
81089: LD_INT 3
81091: PUSH
81092: EMPTY
81093: LIST
81094: LIST
81095: PUSH
81096: EMPTY
81097: LIST
81098: LIST
81099: LIST
81100: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
81101: LD_ADDR_VAR 0 20
81105: PUSH
81106: LD_INT 1
81108: PUSH
81109: LD_INT 3
81111: PUSH
81112: EMPTY
81113: LIST
81114: LIST
81115: PUSH
81116: LD_INT 0
81118: PUSH
81119: LD_INT 3
81121: PUSH
81122: EMPTY
81123: LIST
81124: LIST
81125: PUSH
81126: LD_INT 1
81128: NEG
81129: PUSH
81130: LD_INT 2
81132: PUSH
81133: EMPTY
81134: LIST
81135: LIST
81136: PUSH
81137: EMPTY
81138: LIST
81139: LIST
81140: LIST
81141: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
81142: LD_ADDR_VAR 0 21
81146: PUSH
81147: LD_INT 2
81149: NEG
81150: PUSH
81151: LD_INT 1
81153: PUSH
81154: EMPTY
81155: LIST
81156: LIST
81157: PUSH
81158: LD_INT 3
81160: NEG
81161: PUSH
81162: LD_INT 0
81164: PUSH
81165: EMPTY
81166: LIST
81167: LIST
81168: PUSH
81169: LD_INT 3
81171: NEG
81172: PUSH
81173: LD_INT 1
81175: NEG
81176: PUSH
81177: EMPTY
81178: LIST
81179: LIST
81180: PUSH
81181: EMPTY
81182: LIST
81183: LIST
81184: LIST
81185: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
81186: LD_ADDR_VAR 0 22
81190: PUSH
81191: LD_INT 2
81193: NEG
81194: PUSH
81195: LD_INT 3
81197: NEG
81198: PUSH
81199: EMPTY
81200: LIST
81201: LIST
81202: PUSH
81203: LD_INT 3
81205: NEG
81206: PUSH
81207: LD_INT 2
81209: NEG
81210: PUSH
81211: EMPTY
81212: LIST
81213: LIST
81214: PUSH
81215: LD_INT 3
81217: NEG
81218: PUSH
81219: LD_INT 3
81221: NEG
81222: PUSH
81223: EMPTY
81224: LIST
81225: LIST
81226: PUSH
81227: EMPTY
81228: LIST
81229: LIST
81230: LIST
81231: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
81232: LD_ADDR_VAR 0 23
81236: PUSH
81237: LD_INT 0
81239: PUSH
81240: LD_INT 3
81242: NEG
81243: PUSH
81244: EMPTY
81245: LIST
81246: LIST
81247: PUSH
81248: LD_INT 1
81250: NEG
81251: PUSH
81252: LD_INT 4
81254: NEG
81255: PUSH
81256: EMPTY
81257: LIST
81258: LIST
81259: PUSH
81260: LD_INT 1
81262: PUSH
81263: LD_INT 3
81265: NEG
81266: PUSH
81267: EMPTY
81268: LIST
81269: LIST
81270: PUSH
81271: EMPTY
81272: LIST
81273: LIST
81274: LIST
81275: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
81276: LD_ADDR_VAR 0 24
81280: PUSH
81281: LD_INT 3
81283: PUSH
81284: LD_INT 0
81286: PUSH
81287: EMPTY
81288: LIST
81289: LIST
81290: PUSH
81291: LD_INT 3
81293: PUSH
81294: LD_INT 1
81296: NEG
81297: PUSH
81298: EMPTY
81299: LIST
81300: LIST
81301: PUSH
81302: LD_INT 4
81304: PUSH
81305: LD_INT 1
81307: PUSH
81308: EMPTY
81309: LIST
81310: LIST
81311: PUSH
81312: EMPTY
81313: LIST
81314: LIST
81315: LIST
81316: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
81317: LD_ADDR_VAR 0 25
81321: PUSH
81322: LD_INT 3
81324: PUSH
81325: LD_INT 3
81327: PUSH
81328: EMPTY
81329: LIST
81330: LIST
81331: PUSH
81332: LD_INT 4
81334: PUSH
81335: LD_INT 3
81337: PUSH
81338: EMPTY
81339: LIST
81340: LIST
81341: PUSH
81342: LD_INT 3
81344: PUSH
81345: LD_INT 4
81347: PUSH
81348: EMPTY
81349: LIST
81350: LIST
81351: PUSH
81352: EMPTY
81353: LIST
81354: LIST
81355: LIST
81356: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
81357: LD_ADDR_VAR 0 26
81361: PUSH
81362: LD_INT 0
81364: PUSH
81365: LD_INT 3
81367: PUSH
81368: EMPTY
81369: LIST
81370: LIST
81371: PUSH
81372: LD_INT 1
81374: PUSH
81375: LD_INT 4
81377: PUSH
81378: EMPTY
81379: LIST
81380: LIST
81381: PUSH
81382: LD_INT 1
81384: NEG
81385: PUSH
81386: LD_INT 3
81388: PUSH
81389: EMPTY
81390: LIST
81391: LIST
81392: PUSH
81393: EMPTY
81394: LIST
81395: LIST
81396: LIST
81397: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
81398: LD_ADDR_VAR 0 27
81402: PUSH
81403: LD_INT 3
81405: NEG
81406: PUSH
81407: LD_INT 0
81409: PUSH
81410: EMPTY
81411: LIST
81412: LIST
81413: PUSH
81414: LD_INT 3
81416: NEG
81417: PUSH
81418: LD_INT 1
81420: PUSH
81421: EMPTY
81422: LIST
81423: LIST
81424: PUSH
81425: LD_INT 4
81427: NEG
81428: PUSH
81429: LD_INT 1
81431: NEG
81432: PUSH
81433: EMPTY
81434: LIST
81435: LIST
81436: PUSH
81437: EMPTY
81438: LIST
81439: LIST
81440: LIST
81441: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
81442: LD_ADDR_VAR 0 28
81446: PUSH
81447: LD_INT 3
81449: NEG
81450: PUSH
81451: LD_INT 3
81453: NEG
81454: PUSH
81455: EMPTY
81456: LIST
81457: LIST
81458: PUSH
81459: LD_INT 3
81461: NEG
81462: PUSH
81463: LD_INT 4
81465: NEG
81466: PUSH
81467: EMPTY
81468: LIST
81469: LIST
81470: PUSH
81471: LD_INT 4
81473: NEG
81474: PUSH
81475: LD_INT 3
81477: NEG
81478: PUSH
81479: EMPTY
81480: LIST
81481: LIST
81482: PUSH
81483: EMPTY
81484: LIST
81485: LIST
81486: LIST
81487: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
81488: LD_ADDR_VAR 0 29
81492: PUSH
81493: LD_INT 1
81495: NEG
81496: PUSH
81497: LD_INT 3
81499: NEG
81500: PUSH
81501: EMPTY
81502: LIST
81503: LIST
81504: PUSH
81505: LD_INT 0
81507: PUSH
81508: LD_INT 3
81510: NEG
81511: PUSH
81512: EMPTY
81513: LIST
81514: LIST
81515: PUSH
81516: LD_INT 1
81518: PUSH
81519: LD_INT 2
81521: NEG
81522: PUSH
81523: EMPTY
81524: LIST
81525: LIST
81526: PUSH
81527: LD_INT 1
81529: NEG
81530: PUSH
81531: LD_INT 4
81533: NEG
81534: PUSH
81535: EMPTY
81536: LIST
81537: LIST
81538: PUSH
81539: LD_INT 0
81541: PUSH
81542: LD_INT 4
81544: NEG
81545: PUSH
81546: EMPTY
81547: LIST
81548: LIST
81549: PUSH
81550: LD_INT 1
81552: PUSH
81553: LD_INT 3
81555: NEG
81556: PUSH
81557: EMPTY
81558: LIST
81559: LIST
81560: PUSH
81561: LD_INT 1
81563: NEG
81564: PUSH
81565: LD_INT 5
81567: NEG
81568: PUSH
81569: EMPTY
81570: LIST
81571: LIST
81572: PUSH
81573: LD_INT 0
81575: PUSH
81576: LD_INT 5
81578: NEG
81579: PUSH
81580: EMPTY
81581: LIST
81582: LIST
81583: PUSH
81584: LD_INT 1
81586: PUSH
81587: LD_INT 4
81589: NEG
81590: PUSH
81591: EMPTY
81592: LIST
81593: LIST
81594: PUSH
81595: LD_INT 1
81597: NEG
81598: PUSH
81599: LD_INT 6
81601: NEG
81602: PUSH
81603: EMPTY
81604: LIST
81605: LIST
81606: PUSH
81607: LD_INT 0
81609: PUSH
81610: LD_INT 6
81612: NEG
81613: PUSH
81614: EMPTY
81615: LIST
81616: LIST
81617: PUSH
81618: LD_INT 1
81620: PUSH
81621: LD_INT 5
81623: NEG
81624: PUSH
81625: EMPTY
81626: LIST
81627: LIST
81628: PUSH
81629: EMPTY
81630: LIST
81631: LIST
81632: LIST
81633: LIST
81634: LIST
81635: LIST
81636: LIST
81637: LIST
81638: LIST
81639: LIST
81640: LIST
81641: LIST
81642: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
81643: LD_ADDR_VAR 0 30
81647: PUSH
81648: LD_INT 2
81650: PUSH
81651: LD_INT 1
81653: NEG
81654: PUSH
81655: EMPTY
81656: LIST
81657: LIST
81658: PUSH
81659: LD_INT 3
81661: PUSH
81662: LD_INT 0
81664: PUSH
81665: EMPTY
81666: LIST
81667: LIST
81668: PUSH
81669: LD_INT 3
81671: PUSH
81672: LD_INT 1
81674: PUSH
81675: EMPTY
81676: LIST
81677: LIST
81678: PUSH
81679: LD_INT 3
81681: PUSH
81682: LD_INT 1
81684: NEG
81685: PUSH
81686: EMPTY
81687: LIST
81688: LIST
81689: PUSH
81690: LD_INT 4
81692: PUSH
81693: LD_INT 0
81695: PUSH
81696: EMPTY
81697: LIST
81698: LIST
81699: PUSH
81700: LD_INT 4
81702: PUSH
81703: LD_INT 1
81705: PUSH
81706: EMPTY
81707: LIST
81708: LIST
81709: PUSH
81710: LD_INT 4
81712: PUSH
81713: LD_INT 1
81715: NEG
81716: PUSH
81717: EMPTY
81718: LIST
81719: LIST
81720: PUSH
81721: LD_INT 5
81723: PUSH
81724: LD_INT 0
81726: PUSH
81727: EMPTY
81728: LIST
81729: LIST
81730: PUSH
81731: LD_INT 5
81733: PUSH
81734: LD_INT 1
81736: PUSH
81737: EMPTY
81738: LIST
81739: LIST
81740: PUSH
81741: LD_INT 5
81743: PUSH
81744: LD_INT 1
81746: NEG
81747: PUSH
81748: EMPTY
81749: LIST
81750: LIST
81751: PUSH
81752: LD_INT 6
81754: PUSH
81755: LD_INT 0
81757: PUSH
81758: EMPTY
81759: LIST
81760: LIST
81761: PUSH
81762: LD_INT 6
81764: PUSH
81765: LD_INT 1
81767: PUSH
81768: EMPTY
81769: LIST
81770: LIST
81771: PUSH
81772: EMPTY
81773: LIST
81774: LIST
81775: LIST
81776: LIST
81777: LIST
81778: LIST
81779: LIST
81780: LIST
81781: LIST
81782: LIST
81783: LIST
81784: LIST
81785: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
81786: LD_ADDR_VAR 0 31
81790: PUSH
81791: LD_INT 3
81793: PUSH
81794: LD_INT 2
81796: PUSH
81797: EMPTY
81798: LIST
81799: LIST
81800: PUSH
81801: LD_INT 3
81803: PUSH
81804: LD_INT 3
81806: PUSH
81807: EMPTY
81808: LIST
81809: LIST
81810: PUSH
81811: LD_INT 2
81813: PUSH
81814: LD_INT 3
81816: PUSH
81817: EMPTY
81818: LIST
81819: LIST
81820: PUSH
81821: LD_INT 4
81823: PUSH
81824: LD_INT 3
81826: PUSH
81827: EMPTY
81828: LIST
81829: LIST
81830: PUSH
81831: LD_INT 4
81833: PUSH
81834: LD_INT 4
81836: PUSH
81837: EMPTY
81838: LIST
81839: LIST
81840: PUSH
81841: LD_INT 3
81843: PUSH
81844: LD_INT 4
81846: PUSH
81847: EMPTY
81848: LIST
81849: LIST
81850: PUSH
81851: LD_INT 5
81853: PUSH
81854: LD_INT 4
81856: PUSH
81857: EMPTY
81858: LIST
81859: LIST
81860: PUSH
81861: LD_INT 5
81863: PUSH
81864: LD_INT 5
81866: PUSH
81867: EMPTY
81868: LIST
81869: LIST
81870: PUSH
81871: LD_INT 4
81873: PUSH
81874: LD_INT 5
81876: PUSH
81877: EMPTY
81878: LIST
81879: LIST
81880: PUSH
81881: LD_INT 6
81883: PUSH
81884: LD_INT 5
81886: PUSH
81887: EMPTY
81888: LIST
81889: LIST
81890: PUSH
81891: LD_INT 6
81893: PUSH
81894: LD_INT 6
81896: PUSH
81897: EMPTY
81898: LIST
81899: LIST
81900: PUSH
81901: LD_INT 5
81903: PUSH
81904: LD_INT 6
81906: PUSH
81907: EMPTY
81908: LIST
81909: LIST
81910: PUSH
81911: EMPTY
81912: LIST
81913: LIST
81914: LIST
81915: LIST
81916: LIST
81917: LIST
81918: LIST
81919: LIST
81920: LIST
81921: LIST
81922: LIST
81923: LIST
81924: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
81925: LD_ADDR_VAR 0 32
81929: PUSH
81930: LD_INT 1
81932: PUSH
81933: LD_INT 3
81935: PUSH
81936: EMPTY
81937: LIST
81938: LIST
81939: PUSH
81940: LD_INT 0
81942: PUSH
81943: LD_INT 3
81945: PUSH
81946: EMPTY
81947: LIST
81948: LIST
81949: PUSH
81950: LD_INT 1
81952: NEG
81953: PUSH
81954: LD_INT 2
81956: PUSH
81957: EMPTY
81958: LIST
81959: LIST
81960: PUSH
81961: LD_INT 1
81963: PUSH
81964: LD_INT 4
81966: PUSH
81967: EMPTY
81968: LIST
81969: LIST
81970: PUSH
81971: LD_INT 0
81973: PUSH
81974: LD_INT 4
81976: PUSH
81977: EMPTY
81978: LIST
81979: LIST
81980: PUSH
81981: LD_INT 1
81983: NEG
81984: PUSH
81985: LD_INT 3
81987: PUSH
81988: EMPTY
81989: LIST
81990: LIST
81991: PUSH
81992: LD_INT 1
81994: PUSH
81995: LD_INT 5
81997: PUSH
81998: EMPTY
81999: LIST
82000: LIST
82001: PUSH
82002: LD_INT 0
82004: PUSH
82005: LD_INT 5
82007: PUSH
82008: EMPTY
82009: LIST
82010: LIST
82011: PUSH
82012: LD_INT 1
82014: NEG
82015: PUSH
82016: LD_INT 4
82018: PUSH
82019: EMPTY
82020: LIST
82021: LIST
82022: PUSH
82023: LD_INT 1
82025: PUSH
82026: LD_INT 6
82028: PUSH
82029: EMPTY
82030: LIST
82031: LIST
82032: PUSH
82033: LD_INT 0
82035: PUSH
82036: LD_INT 6
82038: PUSH
82039: EMPTY
82040: LIST
82041: LIST
82042: PUSH
82043: LD_INT 1
82045: NEG
82046: PUSH
82047: LD_INT 5
82049: PUSH
82050: EMPTY
82051: LIST
82052: LIST
82053: PUSH
82054: EMPTY
82055: LIST
82056: LIST
82057: LIST
82058: LIST
82059: LIST
82060: LIST
82061: LIST
82062: LIST
82063: LIST
82064: LIST
82065: LIST
82066: LIST
82067: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
82068: LD_ADDR_VAR 0 33
82072: PUSH
82073: LD_INT 2
82075: NEG
82076: PUSH
82077: LD_INT 1
82079: PUSH
82080: EMPTY
82081: LIST
82082: LIST
82083: PUSH
82084: LD_INT 3
82086: NEG
82087: PUSH
82088: LD_INT 0
82090: PUSH
82091: EMPTY
82092: LIST
82093: LIST
82094: PUSH
82095: LD_INT 3
82097: NEG
82098: PUSH
82099: LD_INT 1
82101: NEG
82102: PUSH
82103: EMPTY
82104: LIST
82105: LIST
82106: PUSH
82107: LD_INT 3
82109: NEG
82110: PUSH
82111: LD_INT 1
82113: PUSH
82114: EMPTY
82115: LIST
82116: LIST
82117: PUSH
82118: LD_INT 4
82120: NEG
82121: PUSH
82122: LD_INT 0
82124: PUSH
82125: EMPTY
82126: LIST
82127: LIST
82128: PUSH
82129: LD_INT 4
82131: NEG
82132: PUSH
82133: LD_INT 1
82135: NEG
82136: PUSH
82137: EMPTY
82138: LIST
82139: LIST
82140: PUSH
82141: LD_INT 4
82143: NEG
82144: PUSH
82145: LD_INT 1
82147: PUSH
82148: EMPTY
82149: LIST
82150: LIST
82151: PUSH
82152: LD_INT 5
82154: NEG
82155: PUSH
82156: LD_INT 0
82158: PUSH
82159: EMPTY
82160: LIST
82161: LIST
82162: PUSH
82163: LD_INT 5
82165: NEG
82166: PUSH
82167: LD_INT 1
82169: NEG
82170: PUSH
82171: EMPTY
82172: LIST
82173: LIST
82174: PUSH
82175: LD_INT 5
82177: NEG
82178: PUSH
82179: LD_INT 1
82181: PUSH
82182: EMPTY
82183: LIST
82184: LIST
82185: PUSH
82186: LD_INT 6
82188: NEG
82189: PUSH
82190: LD_INT 0
82192: PUSH
82193: EMPTY
82194: LIST
82195: LIST
82196: PUSH
82197: LD_INT 6
82199: NEG
82200: PUSH
82201: LD_INT 1
82203: NEG
82204: PUSH
82205: EMPTY
82206: LIST
82207: LIST
82208: PUSH
82209: EMPTY
82210: LIST
82211: LIST
82212: LIST
82213: LIST
82214: LIST
82215: LIST
82216: LIST
82217: LIST
82218: LIST
82219: LIST
82220: LIST
82221: LIST
82222: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
82223: LD_ADDR_VAR 0 34
82227: PUSH
82228: LD_INT 2
82230: NEG
82231: PUSH
82232: LD_INT 3
82234: NEG
82235: PUSH
82236: EMPTY
82237: LIST
82238: LIST
82239: PUSH
82240: LD_INT 3
82242: NEG
82243: PUSH
82244: LD_INT 2
82246: NEG
82247: PUSH
82248: EMPTY
82249: LIST
82250: LIST
82251: PUSH
82252: LD_INT 3
82254: NEG
82255: PUSH
82256: LD_INT 3
82258: NEG
82259: PUSH
82260: EMPTY
82261: LIST
82262: LIST
82263: PUSH
82264: LD_INT 3
82266: NEG
82267: PUSH
82268: LD_INT 4
82270: NEG
82271: PUSH
82272: EMPTY
82273: LIST
82274: LIST
82275: PUSH
82276: LD_INT 4
82278: NEG
82279: PUSH
82280: LD_INT 3
82282: NEG
82283: PUSH
82284: EMPTY
82285: LIST
82286: LIST
82287: PUSH
82288: LD_INT 4
82290: NEG
82291: PUSH
82292: LD_INT 4
82294: NEG
82295: PUSH
82296: EMPTY
82297: LIST
82298: LIST
82299: PUSH
82300: LD_INT 4
82302: NEG
82303: PUSH
82304: LD_INT 5
82306: NEG
82307: PUSH
82308: EMPTY
82309: LIST
82310: LIST
82311: PUSH
82312: LD_INT 5
82314: NEG
82315: PUSH
82316: LD_INT 4
82318: NEG
82319: PUSH
82320: EMPTY
82321: LIST
82322: LIST
82323: PUSH
82324: LD_INT 5
82326: NEG
82327: PUSH
82328: LD_INT 5
82330: NEG
82331: PUSH
82332: EMPTY
82333: LIST
82334: LIST
82335: PUSH
82336: LD_INT 5
82338: NEG
82339: PUSH
82340: LD_INT 6
82342: NEG
82343: PUSH
82344: EMPTY
82345: LIST
82346: LIST
82347: PUSH
82348: LD_INT 6
82350: NEG
82351: PUSH
82352: LD_INT 5
82354: NEG
82355: PUSH
82356: EMPTY
82357: LIST
82358: LIST
82359: PUSH
82360: LD_INT 6
82362: NEG
82363: PUSH
82364: LD_INT 6
82366: NEG
82367: PUSH
82368: EMPTY
82369: LIST
82370: LIST
82371: PUSH
82372: EMPTY
82373: LIST
82374: LIST
82375: LIST
82376: LIST
82377: LIST
82378: LIST
82379: LIST
82380: LIST
82381: LIST
82382: LIST
82383: LIST
82384: LIST
82385: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
82386: LD_ADDR_VAR 0 41
82390: PUSH
82391: LD_INT 0
82393: PUSH
82394: LD_INT 2
82396: NEG
82397: PUSH
82398: EMPTY
82399: LIST
82400: LIST
82401: PUSH
82402: LD_INT 1
82404: NEG
82405: PUSH
82406: LD_INT 3
82408: NEG
82409: PUSH
82410: EMPTY
82411: LIST
82412: LIST
82413: PUSH
82414: LD_INT 1
82416: PUSH
82417: LD_INT 2
82419: NEG
82420: PUSH
82421: EMPTY
82422: LIST
82423: LIST
82424: PUSH
82425: EMPTY
82426: LIST
82427: LIST
82428: LIST
82429: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
82430: LD_ADDR_VAR 0 42
82434: PUSH
82435: LD_INT 2
82437: PUSH
82438: LD_INT 0
82440: PUSH
82441: EMPTY
82442: LIST
82443: LIST
82444: PUSH
82445: LD_INT 2
82447: PUSH
82448: LD_INT 1
82450: NEG
82451: PUSH
82452: EMPTY
82453: LIST
82454: LIST
82455: PUSH
82456: LD_INT 3
82458: PUSH
82459: LD_INT 1
82461: PUSH
82462: EMPTY
82463: LIST
82464: LIST
82465: PUSH
82466: EMPTY
82467: LIST
82468: LIST
82469: LIST
82470: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
82471: LD_ADDR_VAR 0 43
82475: PUSH
82476: LD_INT 2
82478: PUSH
82479: LD_INT 2
82481: PUSH
82482: EMPTY
82483: LIST
82484: LIST
82485: PUSH
82486: LD_INT 3
82488: PUSH
82489: LD_INT 2
82491: PUSH
82492: EMPTY
82493: LIST
82494: LIST
82495: PUSH
82496: LD_INT 2
82498: PUSH
82499: LD_INT 3
82501: PUSH
82502: EMPTY
82503: LIST
82504: LIST
82505: PUSH
82506: EMPTY
82507: LIST
82508: LIST
82509: LIST
82510: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
82511: LD_ADDR_VAR 0 44
82515: PUSH
82516: LD_INT 0
82518: PUSH
82519: LD_INT 2
82521: PUSH
82522: EMPTY
82523: LIST
82524: LIST
82525: PUSH
82526: LD_INT 1
82528: PUSH
82529: LD_INT 3
82531: PUSH
82532: EMPTY
82533: LIST
82534: LIST
82535: PUSH
82536: LD_INT 1
82538: NEG
82539: PUSH
82540: LD_INT 2
82542: PUSH
82543: EMPTY
82544: LIST
82545: LIST
82546: PUSH
82547: EMPTY
82548: LIST
82549: LIST
82550: LIST
82551: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
82552: LD_ADDR_VAR 0 45
82556: PUSH
82557: LD_INT 2
82559: NEG
82560: PUSH
82561: LD_INT 0
82563: PUSH
82564: EMPTY
82565: LIST
82566: LIST
82567: PUSH
82568: LD_INT 2
82570: NEG
82571: PUSH
82572: LD_INT 1
82574: PUSH
82575: EMPTY
82576: LIST
82577: LIST
82578: PUSH
82579: LD_INT 3
82581: NEG
82582: PUSH
82583: LD_INT 1
82585: NEG
82586: PUSH
82587: EMPTY
82588: LIST
82589: LIST
82590: PUSH
82591: EMPTY
82592: LIST
82593: LIST
82594: LIST
82595: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
82596: LD_ADDR_VAR 0 46
82600: PUSH
82601: LD_INT 2
82603: NEG
82604: PUSH
82605: LD_INT 2
82607: NEG
82608: PUSH
82609: EMPTY
82610: LIST
82611: LIST
82612: PUSH
82613: LD_INT 2
82615: NEG
82616: PUSH
82617: LD_INT 3
82619: NEG
82620: PUSH
82621: EMPTY
82622: LIST
82623: LIST
82624: PUSH
82625: LD_INT 3
82627: NEG
82628: PUSH
82629: LD_INT 2
82631: NEG
82632: PUSH
82633: EMPTY
82634: LIST
82635: LIST
82636: PUSH
82637: EMPTY
82638: LIST
82639: LIST
82640: LIST
82641: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
82642: LD_ADDR_VAR 0 47
82646: PUSH
82647: LD_INT 2
82649: NEG
82650: PUSH
82651: LD_INT 3
82653: NEG
82654: PUSH
82655: EMPTY
82656: LIST
82657: LIST
82658: PUSH
82659: LD_INT 1
82661: NEG
82662: PUSH
82663: LD_INT 3
82665: NEG
82666: PUSH
82667: EMPTY
82668: LIST
82669: LIST
82670: PUSH
82671: EMPTY
82672: LIST
82673: LIST
82674: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
82675: LD_ADDR_VAR 0 48
82679: PUSH
82680: LD_INT 1
82682: PUSH
82683: LD_INT 2
82685: NEG
82686: PUSH
82687: EMPTY
82688: LIST
82689: LIST
82690: PUSH
82691: LD_INT 2
82693: PUSH
82694: LD_INT 1
82696: NEG
82697: PUSH
82698: EMPTY
82699: LIST
82700: LIST
82701: PUSH
82702: EMPTY
82703: LIST
82704: LIST
82705: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
82706: LD_ADDR_VAR 0 49
82710: PUSH
82711: LD_INT 3
82713: PUSH
82714: LD_INT 1
82716: PUSH
82717: EMPTY
82718: LIST
82719: LIST
82720: PUSH
82721: LD_INT 3
82723: PUSH
82724: LD_INT 2
82726: PUSH
82727: EMPTY
82728: LIST
82729: LIST
82730: PUSH
82731: EMPTY
82732: LIST
82733: LIST
82734: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
82735: LD_ADDR_VAR 0 50
82739: PUSH
82740: LD_INT 2
82742: PUSH
82743: LD_INT 3
82745: PUSH
82746: EMPTY
82747: LIST
82748: LIST
82749: PUSH
82750: LD_INT 1
82752: PUSH
82753: LD_INT 3
82755: PUSH
82756: EMPTY
82757: LIST
82758: LIST
82759: PUSH
82760: EMPTY
82761: LIST
82762: LIST
82763: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
82764: LD_ADDR_VAR 0 51
82768: PUSH
82769: LD_INT 1
82771: NEG
82772: PUSH
82773: LD_INT 2
82775: PUSH
82776: EMPTY
82777: LIST
82778: LIST
82779: PUSH
82780: LD_INT 2
82782: NEG
82783: PUSH
82784: LD_INT 1
82786: PUSH
82787: EMPTY
82788: LIST
82789: LIST
82790: PUSH
82791: EMPTY
82792: LIST
82793: LIST
82794: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
82795: LD_ADDR_VAR 0 52
82799: PUSH
82800: LD_INT 3
82802: NEG
82803: PUSH
82804: LD_INT 1
82806: NEG
82807: PUSH
82808: EMPTY
82809: LIST
82810: LIST
82811: PUSH
82812: LD_INT 3
82814: NEG
82815: PUSH
82816: LD_INT 2
82818: NEG
82819: PUSH
82820: EMPTY
82821: LIST
82822: LIST
82823: PUSH
82824: EMPTY
82825: LIST
82826: LIST
82827: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
82828: LD_ADDR_VAR 0 53
82832: PUSH
82833: LD_INT 1
82835: NEG
82836: PUSH
82837: LD_INT 3
82839: NEG
82840: PUSH
82841: EMPTY
82842: LIST
82843: LIST
82844: PUSH
82845: LD_INT 0
82847: PUSH
82848: LD_INT 3
82850: NEG
82851: PUSH
82852: EMPTY
82853: LIST
82854: LIST
82855: PUSH
82856: LD_INT 1
82858: PUSH
82859: LD_INT 2
82861: NEG
82862: PUSH
82863: EMPTY
82864: LIST
82865: LIST
82866: PUSH
82867: EMPTY
82868: LIST
82869: LIST
82870: LIST
82871: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
82872: LD_ADDR_VAR 0 54
82876: PUSH
82877: LD_INT 2
82879: PUSH
82880: LD_INT 1
82882: NEG
82883: PUSH
82884: EMPTY
82885: LIST
82886: LIST
82887: PUSH
82888: LD_INT 3
82890: PUSH
82891: LD_INT 0
82893: PUSH
82894: EMPTY
82895: LIST
82896: LIST
82897: PUSH
82898: LD_INT 3
82900: PUSH
82901: LD_INT 1
82903: PUSH
82904: EMPTY
82905: LIST
82906: LIST
82907: PUSH
82908: EMPTY
82909: LIST
82910: LIST
82911: LIST
82912: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
82913: LD_ADDR_VAR 0 55
82917: PUSH
82918: LD_INT 3
82920: PUSH
82921: LD_INT 2
82923: PUSH
82924: EMPTY
82925: LIST
82926: LIST
82927: PUSH
82928: LD_INT 3
82930: PUSH
82931: LD_INT 3
82933: PUSH
82934: EMPTY
82935: LIST
82936: LIST
82937: PUSH
82938: LD_INT 2
82940: PUSH
82941: LD_INT 3
82943: PUSH
82944: EMPTY
82945: LIST
82946: LIST
82947: PUSH
82948: EMPTY
82949: LIST
82950: LIST
82951: LIST
82952: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
82953: LD_ADDR_VAR 0 56
82957: PUSH
82958: LD_INT 1
82960: PUSH
82961: LD_INT 3
82963: PUSH
82964: EMPTY
82965: LIST
82966: LIST
82967: PUSH
82968: LD_INT 0
82970: PUSH
82971: LD_INT 3
82973: PUSH
82974: EMPTY
82975: LIST
82976: LIST
82977: PUSH
82978: LD_INT 1
82980: NEG
82981: PUSH
82982: LD_INT 2
82984: PUSH
82985: EMPTY
82986: LIST
82987: LIST
82988: PUSH
82989: EMPTY
82990: LIST
82991: LIST
82992: LIST
82993: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
82994: LD_ADDR_VAR 0 57
82998: PUSH
82999: LD_INT 2
83001: NEG
83002: PUSH
83003: LD_INT 1
83005: PUSH
83006: EMPTY
83007: LIST
83008: LIST
83009: PUSH
83010: LD_INT 3
83012: NEG
83013: PUSH
83014: LD_INT 0
83016: PUSH
83017: EMPTY
83018: LIST
83019: LIST
83020: PUSH
83021: LD_INT 3
83023: NEG
83024: PUSH
83025: LD_INT 1
83027: NEG
83028: PUSH
83029: EMPTY
83030: LIST
83031: LIST
83032: PUSH
83033: EMPTY
83034: LIST
83035: LIST
83036: LIST
83037: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
83038: LD_ADDR_VAR 0 58
83042: PUSH
83043: LD_INT 2
83045: NEG
83046: PUSH
83047: LD_INT 3
83049: NEG
83050: PUSH
83051: EMPTY
83052: LIST
83053: LIST
83054: PUSH
83055: LD_INT 3
83057: NEG
83058: PUSH
83059: LD_INT 2
83061: NEG
83062: PUSH
83063: EMPTY
83064: LIST
83065: LIST
83066: PUSH
83067: LD_INT 3
83069: NEG
83070: PUSH
83071: LD_INT 3
83073: NEG
83074: PUSH
83075: EMPTY
83076: LIST
83077: LIST
83078: PUSH
83079: EMPTY
83080: LIST
83081: LIST
83082: LIST
83083: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
83084: LD_ADDR_VAR 0 59
83088: PUSH
83089: LD_INT 1
83091: NEG
83092: PUSH
83093: LD_INT 2
83095: NEG
83096: PUSH
83097: EMPTY
83098: LIST
83099: LIST
83100: PUSH
83101: LD_INT 0
83103: PUSH
83104: LD_INT 2
83106: NEG
83107: PUSH
83108: EMPTY
83109: LIST
83110: LIST
83111: PUSH
83112: LD_INT 1
83114: PUSH
83115: LD_INT 1
83117: NEG
83118: PUSH
83119: EMPTY
83120: LIST
83121: LIST
83122: PUSH
83123: EMPTY
83124: LIST
83125: LIST
83126: LIST
83127: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
83128: LD_ADDR_VAR 0 60
83132: PUSH
83133: LD_INT 1
83135: PUSH
83136: LD_INT 1
83138: NEG
83139: PUSH
83140: EMPTY
83141: LIST
83142: LIST
83143: PUSH
83144: LD_INT 2
83146: PUSH
83147: LD_INT 0
83149: PUSH
83150: EMPTY
83151: LIST
83152: LIST
83153: PUSH
83154: LD_INT 2
83156: PUSH
83157: LD_INT 1
83159: PUSH
83160: EMPTY
83161: LIST
83162: LIST
83163: PUSH
83164: EMPTY
83165: LIST
83166: LIST
83167: LIST
83168: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
83169: LD_ADDR_VAR 0 61
83173: PUSH
83174: LD_INT 2
83176: PUSH
83177: LD_INT 1
83179: PUSH
83180: EMPTY
83181: LIST
83182: LIST
83183: PUSH
83184: LD_INT 2
83186: PUSH
83187: LD_INT 2
83189: PUSH
83190: EMPTY
83191: LIST
83192: LIST
83193: PUSH
83194: LD_INT 1
83196: PUSH
83197: LD_INT 2
83199: PUSH
83200: EMPTY
83201: LIST
83202: LIST
83203: PUSH
83204: EMPTY
83205: LIST
83206: LIST
83207: LIST
83208: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
83209: LD_ADDR_VAR 0 62
83213: PUSH
83214: LD_INT 1
83216: PUSH
83217: LD_INT 2
83219: PUSH
83220: EMPTY
83221: LIST
83222: LIST
83223: PUSH
83224: LD_INT 0
83226: PUSH
83227: LD_INT 2
83229: PUSH
83230: EMPTY
83231: LIST
83232: LIST
83233: PUSH
83234: LD_INT 1
83236: NEG
83237: PUSH
83238: LD_INT 1
83240: PUSH
83241: EMPTY
83242: LIST
83243: LIST
83244: PUSH
83245: EMPTY
83246: LIST
83247: LIST
83248: LIST
83249: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
83250: LD_ADDR_VAR 0 63
83254: PUSH
83255: LD_INT 1
83257: NEG
83258: PUSH
83259: LD_INT 1
83261: PUSH
83262: EMPTY
83263: LIST
83264: LIST
83265: PUSH
83266: LD_INT 2
83268: NEG
83269: PUSH
83270: LD_INT 0
83272: PUSH
83273: EMPTY
83274: LIST
83275: LIST
83276: PUSH
83277: LD_INT 2
83279: NEG
83280: PUSH
83281: LD_INT 1
83283: NEG
83284: PUSH
83285: EMPTY
83286: LIST
83287: LIST
83288: PUSH
83289: EMPTY
83290: LIST
83291: LIST
83292: LIST
83293: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
83294: LD_ADDR_VAR 0 64
83298: PUSH
83299: LD_INT 1
83301: NEG
83302: PUSH
83303: LD_INT 2
83305: NEG
83306: PUSH
83307: EMPTY
83308: LIST
83309: LIST
83310: PUSH
83311: LD_INT 2
83313: NEG
83314: PUSH
83315: LD_INT 1
83317: NEG
83318: PUSH
83319: EMPTY
83320: LIST
83321: LIST
83322: PUSH
83323: LD_INT 2
83325: NEG
83326: PUSH
83327: LD_INT 2
83329: NEG
83330: PUSH
83331: EMPTY
83332: LIST
83333: LIST
83334: PUSH
83335: EMPTY
83336: LIST
83337: LIST
83338: LIST
83339: ST_TO_ADDR
// end ; 2 :
83340: GO 86606
83342: LD_INT 2
83344: DOUBLE
83345: EQUAL
83346: IFTRUE 83350
83348: GO 86605
83350: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
83351: LD_ADDR_VAR 0 29
83355: PUSH
83356: LD_INT 4
83358: PUSH
83359: LD_INT 0
83361: PUSH
83362: EMPTY
83363: LIST
83364: LIST
83365: PUSH
83366: LD_INT 4
83368: PUSH
83369: LD_INT 1
83371: NEG
83372: PUSH
83373: EMPTY
83374: LIST
83375: LIST
83376: PUSH
83377: LD_INT 5
83379: PUSH
83380: LD_INT 0
83382: PUSH
83383: EMPTY
83384: LIST
83385: LIST
83386: PUSH
83387: LD_INT 5
83389: PUSH
83390: LD_INT 1
83392: PUSH
83393: EMPTY
83394: LIST
83395: LIST
83396: PUSH
83397: LD_INT 4
83399: PUSH
83400: LD_INT 1
83402: PUSH
83403: EMPTY
83404: LIST
83405: LIST
83406: PUSH
83407: LD_INT 3
83409: PUSH
83410: LD_INT 0
83412: PUSH
83413: EMPTY
83414: LIST
83415: LIST
83416: PUSH
83417: LD_INT 3
83419: PUSH
83420: LD_INT 1
83422: NEG
83423: PUSH
83424: EMPTY
83425: LIST
83426: LIST
83427: PUSH
83428: LD_INT 3
83430: PUSH
83431: LD_INT 2
83433: NEG
83434: PUSH
83435: EMPTY
83436: LIST
83437: LIST
83438: PUSH
83439: LD_INT 5
83441: PUSH
83442: LD_INT 2
83444: PUSH
83445: EMPTY
83446: LIST
83447: LIST
83448: PUSH
83449: LD_INT 3
83451: PUSH
83452: LD_INT 3
83454: PUSH
83455: EMPTY
83456: LIST
83457: LIST
83458: PUSH
83459: LD_INT 3
83461: PUSH
83462: LD_INT 2
83464: PUSH
83465: EMPTY
83466: LIST
83467: LIST
83468: PUSH
83469: LD_INT 4
83471: PUSH
83472: LD_INT 3
83474: PUSH
83475: EMPTY
83476: LIST
83477: LIST
83478: PUSH
83479: LD_INT 4
83481: PUSH
83482: LD_INT 4
83484: PUSH
83485: EMPTY
83486: LIST
83487: LIST
83488: PUSH
83489: LD_INT 3
83491: PUSH
83492: LD_INT 4
83494: PUSH
83495: EMPTY
83496: LIST
83497: LIST
83498: PUSH
83499: LD_INT 2
83501: PUSH
83502: LD_INT 3
83504: PUSH
83505: EMPTY
83506: LIST
83507: LIST
83508: PUSH
83509: LD_INT 2
83511: PUSH
83512: LD_INT 2
83514: PUSH
83515: EMPTY
83516: LIST
83517: LIST
83518: PUSH
83519: LD_INT 4
83521: PUSH
83522: LD_INT 2
83524: PUSH
83525: EMPTY
83526: LIST
83527: LIST
83528: PUSH
83529: LD_INT 2
83531: PUSH
83532: LD_INT 4
83534: PUSH
83535: EMPTY
83536: LIST
83537: LIST
83538: PUSH
83539: LD_INT 0
83541: PUSH
83542: LD_INT 4
83544: PUSH
83545: EMPTY
83546: LIST
83547: LIST
83548: PUSH
83549: LD_INT 0
83551: PUSH
83552: LD_INT 3
83554: PUSH
83555: EMPTY
83556: LIST
83557: LIST
83558: PUSH
83559: LD_INT 1
83561: PUSH
83562: LD_INT 4
83564: PUSH
83565: EMPTY
83566: LIST
83567: LIST
83568: PUSH
83569: LD_INT 1
83571: PUSH
83572: LD_INT 5
83574: PUSH
83575: EMPTY
83576: LIST
83577: LIST
83578: PUSH
83579: LD_INT 0
83581: PUSH
83582: LD_INT 5
83584: PUSH
83585: EMPTY
83586: LIST
83587: LIST
83588: PUSH
83589: LD_INT 1
83591: NEG
83592: PUSH
83593: LD_INT 4
83595: PUSH
83596: EMPTY
83597: LIST
83598: LIST
83599: PUSH
83600: LD_INT 1
83602: NEG
83603: PUSH
83604: LD_INT 3
83606: PUSH
83607: EMPTY
83608: LIST
83609: LIST
83610: PUSH
83611: LD_INT 2
83613: PUSH
83614: LD_INT 5
83616: PUSH
83617: EMPTY
83618: LIST
83619: LIST
83620: PUSH
83621: LD_INT 2
83623: NEG
83624: PUSH
83625: LD_INT 3
83627: PUSH
83628: EMPTY
83629: LIST
83630: LIST
83631: PUSH
83632: LD_INT 3
83634: NEG
83635: PUSH
83636: LD_INT 0
83638: PUSH
83639: EMPTY
83640: LIST
83641: LIST
83642: PUSH
83643: LD_INT 3
83645: NEG
83646: PUSH
83647: LD_INT 1
83649: NEG
83650: PUSH
83651: EMPTY
83652: LIST
83653: LIST
83654: PUSH
83655: LD_INT 2
83657: NEG
83658: PUSH
83659: LD_INT 0
83661: PUSH
83662: EMPTY
83663: LIST
83664: LIST
83665: PUSH
83666: LD_INT 2
83668: NEG
83669: PUSH
83670: LD_INT 1
83672: PUSH
83673: EMPTY
83674: LIST
83675: LIST
83676: PUSH
83677: LD_INT 3
83679: NEG
83680: PUSH
83681: LD_INT 1
83683: PUSH
83684: EMPTY
83685: LIST
83686: LIST
83687: PUSH
83688: LD_INT 4
83690: NEG
83691: PUSH
83692: LD_INT 0
83694: PUSH
83695: EMPTY
83696: LIST
83697: LIST
83698: PUSH
83699: LD_INT 4
83701: NEG
83702: PUSH
83703: LD_INT 1
83705: NEG
83706: PUSH
83707: EMPTY
83708: LIST
83709: LIST
83710: PUSH
83711: LD_INT 4
83713: NEG
83714: PUSH
83715: LD_INT 2
83717: NEG
83718: PUSH
83719: EMPTY
83720: LIST
83721: LIST
83722: PUSH
83723: LD_INT 2
83725: NEG
83726: PUSH
83727: LD_INT 2
83729: PUSH
83730: EMPTY
83731: LIST
83732: LIST
83733: PUSH
83734: LD_INT 4
83736: NEG
83737: PUSH
83738: LD_INT 4
83740: NEG
83741: PUSH
83742: EMPTY
83743: LIST
83744: LIST
83745: PUSH
83746: LD_INT 4
83748: NEG
83749: PUSH
83750: LD_INT 5
83752: NEG
83753: PUSH
83754: EMPTY
83755: LIST
83756: LIST
83757: PUSH
83758: LD_INT 3
83760: NEG
83761: PUSH
83762: LD_INT 4
83764: NEG
83765: PUSH
83766: EMPTY
83767: LIST
83768: LIST
83769: PUSH
83770: LD_INT 3
83772: NEG
83773: PUSH
83774: LD_INT 3
83776: NEG
83777: PUSH
83778: EMPTY
83779: LIST
83780: LIST
83781: PUSH
83782: LD_INT 4
83784: NEG
83785: PUSH
83786: LD_INT 3
83788: NEG
83789: PUSH
83790: EMPTY
83791: LIST
83792: LIST
83793: PUSH
83794: LD_INT 5
83796: NEG
83797: PUSH
83798: LD_INT 4
83800: NEG
83801: PUSH
83802: EMPTY
83803: LIST
83804: LIST
83805: PUSH
83806: LD_INT 5
83808: NEG
83809: PUSH
83810: LD_INT 5
83812: NEG
83813: PUSH
83814: EMPTY
83815: LIST
83816: LIST
83817: PUSH
83818: LD_INT 3
83820: NEG
83821: PUSH
83822: LD_INT 5
83824: NEG
83825: PUSH
83826: EMPTY
83827: LIST
83828: LIST
83829: PUSH
83830: LD_INT 5
83832: NEG
83833: PUSH
83834: LD_INT 3
83836: NEG
83837: PUSH
83838: EMPTY
83839: LIST
83840: LIST
83841: PUSH
83842: EMPTY
83843: LIST
83844: LIST
83845: LIST
83846: LIST
83847: LIST
83848: LIST
83849: LIST
83850: LIST
83851: LIST
83852: LIST
83853: LIST
83854: LIST
83855: LIST
83856: LIST
83857: LIST
83858: LIST
83859: LIST
83860: LIST
83861: LIST
83862: LIST
83863: LIST
83864: LIST
83865: LIST
83866: LIST
83867: LIST
83868: LIST
83869: LIST
83870: LIST
83871: LIST
83872: LIST
83873: LIST
83874: LIST
83875: LIST
83876: LIST
83877: LIST
83878: LIST
83879: LIST
83880: LIST
83881: LIST
83882: LIST
83883: LIST
83884: LIST
83885: LIST
83886: LIST
83887: LIST
83888: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
83889: LD_ADDR_VAR 0 30
83893: PUSH
83894: LD_INT 4
83896: PUSH
83897: LD_INT 4
83899: PUSH
83900: EMPTY
83901: LIST
83902: LIST
83903: PUSH
83904: LD_INT 4
83906: PUSH
83907: LD_INT 3
83909: PUSH
83910: EMPTY
83911: LIST
83912: LIST
83913: PUSH
83914: LD_INT 5
83916: PUSH
83917: LD_INT 4
83919: PUSH
83920: EMPTY
83921: LIST
83922: LIST
83923: PUSH
83924: LD_INT 5
83926: PUSH
83927: LD_INT 5
83929: PUSH
83930: EMPTY
83931: LIST
83932: LIST
83933: PUSH
83934: LD_INT 4
83936: PUSH
83937: LD_INT 5
83939: PUSH
83940: EMPTY
83941: LIST
83942: LIST
83943: PUSH
83944: LD_INT 3
83946: PUSH
83947: LD_INT 4
83949: PUSH
83950: EMPTY
83951: LIST
83952: LIST
83953: PUSH
83954: LD_INT 3
83956: PUSH
83957: LD_INT 3
83959: PUSH
83960: EMPTY
83961: LIST
83962: LIST
83963: PUSH
83964: LD_INT 5
83966: PUSH
83967: LD_INT 3
83969: PUSH
83970: EMPTY
83971: LIST
83972: LIST
83973: PUSH
83974: LD_INT 3
83976: PUSH
83977: LD_INT 5
83979: PUSH
83980: EMPTY
83981: LIST
83982: LIST
83983: PUSH
83984: LD_INT 0
83986: PUSH
83987: LD_INT 3
83989: PUSH
83990: EMPTY
83991: LIST
83992: LIST
83993: PUSH
83994: LD_INT 0
83996: PUSH
83997: LD_INT 2
83999: PUSH
84000: EMPTY
84001: LIST
84002: LIST
84003: PUSH
84004: LD_INT 1
84006: PUSH
84007: LD_INT 3
84009: PUSH
84010: EMPTY
84011: LIST
84012: LIST
84013: PUSH
84014: LD_INT 1
84016: PUSH
84017: LD_INT 4
84019: PUSH
84020: EMPTY
84021: LIST
84022: LIST
84023: PUSH
84024: LD_INT 0
84026: PUSH
84027: LD_INT 4
84029: PUSH
84030: EMPTY
84031: LIST
84032: LIST
84033: PUSH
84034: LD_INT 1
84036: NEG
84037: PUSH
84038: LD_INT 3
84040: PUSH
84041: EMPTY
84042: LIST
84043: LIST
84044: PUSH
84045: LD_INT 1
84047: NEG
84048: PUSH
84049: LD_INT 2
84051: PUSH
84052: EMPTY
84053: LIST
84054: LIST
84055: PUSH
84056: LD_INT 2
84058: PUSH
84059: LD_INT 4
84061: PUSH
84062: EMPTY
84063: LIST
84064: LIST
84065: PUSH
84066: LD_INT 2
84068: NEG
84069: PUSH
84070: LD_INT 2
84072: PUSH
84073: EMPTY
84074: LIST
84075: LIST
84076: PUSH
84077: LD_INT 4
84079: NEG
84080: PUSH
84081: LD_INT 0
84083: PUSH
84084: EMPTY
84085: LIST
84086: LIST
84087: PUSH
84088: LD_INT 4
84090: NEG
84091: PUSH
84092: LD_INT 1
84094: NEG
84095: PUSH
84096: EMPTY
84097: LIST
84098: LIST
84099: PUSH
84100: LD_INT 3
84102: NEG
84103: PUSH
84104: LD_INT 0
84106: PUSH
84107: EMPTY
84108: LIST
84109: LIST
84110: PUSH
84111: LD_INT 3
84113: NEG
84114: PUSH
84115: LD_INT 1
84117: PUSH
84118: EMPTY
84119: LIST
84120: LIST
84121: PUSH
84122: LD_INT 4
84124: NEG
84125: PUSH
84126: LD_INT 1
84128: PUSH
84129: EMPTY
84130: LIST
84131: LIST
84132: PUSH
84133: LD_INT 5
84135: NEG
84136: PUSH
84137: LD_INT 0
84139: PUSH
84140: EMPTY
84141: LIST
84142: LIST
84143: PUSH
84144: LD_INT 5
84146: NEG
84147: PUSH
84148: LD_INT 1
84150: NEG
84151: PUSH
84152: EMPTY
84153: LIST
84154: LIST
84155: PUSH
84156: LD_INT 5
84158: NEG
84159: PUSH
84160: LD_INT 2
84162: NEG
84163: PUSH
84164: EMPTY
84165: LIST
84166: LIST
84167: PUSH
84168: LD_INT 3
84170: NEG
84171: PUSH
84172: LD_INT 2
84174: PUSH
84175: EMPTY
84176: LIST
84177: LIST
84178: PUSH
84179: LD_INT 3
84181: NEG
84182: PUSH
84183: LD_INT 3
84185: NEG
84186: PUSH
84187: EMPTY
84188: LIST
84189: LIST
84190: PUSH
84191: LD_INT 3
84193: NEG
84194: PUSH
84195: LD_INT 4
84197: NEG
84198: PUSH
84199: EMPTY
84200: LIST
84201: LIST
84202: PUSH
84203: LD_INT 2
84205: NEG
84206: PUSH
84207: LD_INT 3
84209: NEG
84210: PUSH
84211: EMPTY
84212: LIST
84213: LIST
84214: PUSH
84215: LD_INT 2
84217: NEG
84218: PUSH
84219: LD_INT 2
84221: NEG
84222: PUSH
84223: EMPTY
84224: LIST
84225: LIST
84226: PUSH
84227: LD_INT 3
84229: NEG
84230: PUSH
84231: LD_INT 2
84233: NEG
84234: PUSH
84235: EMPTY
84236: LIST
84237: LIST
84238: PUSH
84239: LD_INT 4
84241: NEG
84242: PUSH
84243: LD_INT 3
84245: NEG
84246: PUSH
84247: EMPTY
84248: LIST
84249: LIST
84250: PUSH
84251: LD_INT 4
84253: NEG
84254: PUSH
84255: LD_INT 4
84257: NEG
84258: PUSH
84259: EMPTY
84260: LIST
84261: LIST
84262: PUSH
84263: LD_INT 2
84265: NEG
84266: PUSH
84267: LD_INT 4
84269: NEG
84270: PUSH
84271: EMPTY
84272: LIST
84273: LIST
84274: PUSH
84275: LD_INT 4
84277: NEG
84278: PUSH
84279: LD_INT 2
84281: NEG
84282: PUSH
84283: EMPTY
84284: LIST
84285: LIST
84286: PUSH
84287: LD_INT 0
84289: PUSH
84290: LD_INT 4
84292: NEG
84293: PUSH
84294: EMPTY
84295: LIST
84296: LIST
84297: PUSH
84298: LD_INT 0
84300: PUSH
84301: LD_INT 5
84303: NEG
84304: PUSH
84305: EMPTY
84306: LIST
84307: LIST
84308: PUSH
84309: LD_INT 1
84311: PUSH
84312: LD_INT 4
84314: NEG
84315: PUSH
84316: EMPTY
84317: LIST
84318: LIST
84319: PUSH
84320: LD_INT 1
84322: PUSH
84323: LD_INT 3
84325: NEG
84326: PUSH
84327: EMPTY
84328: LIST
84329: LIST
84330: PUSH
84331: LD_INT 0
84333: PUSH
84334: LD_INT 3
84336: NEG
84337: PUSH
84338: EMPTY
84339: LIST
84340: LIST
84341: PUSH
84342: LD_INT 1
84344: NEG
84345: PUSH
84346: LD_INT 4
84348: NEG
84349: PUSH
84350: EMPTY
84351: LIST
84352: LIST
84353: PUSH
84354: LD_INT 1
84356: NEG
84357: PUSH
84358: LD_INT 5
84360: NEG
84361: PUSH
84362: EMPTY
84363: LIST
84364: LIST
84365: PUSH
84366: LD_INT 2
84368: PUSH
84369: LD_INT 3
84371: NEG
84372: PUSH
84373: EMPTY
84374: LIST
84375: LIST
84376: PUSH
84377: LD_INT 2
84379: NEG
84380: PUSH
84381: LD_INT 5
84383: NEG
84384: PUSH
84385: EMPTY
84386: LIST
84387: LIST
84388: PUSH
84389: EMPTY
84390: LIST
84391: LIST
84392: LIST
84393: LIST
84394: LIST
84395: LIST
84396: LIST
84397: LIST
84398: LIST
84399: LIST
84400: LIST
84401: LIST
84402: LIST
84403: LIST
84404: LIST
84405: LIST
84406: LIST
84407: LIST
84408: LIST
84409: LIST
84410: LIST
84411: LIST
84412: LIST
84413: LIST
84414: LIST
84415: LIST
84416: LIST
84417: LIST
84418: LIST
84419: LIST
84420: LIST
84421: LIST
84422: LIST
84423: LIST
84424: LIST
84425: LIST
84426: LIST
84427: LIST
84428: LIST
84429: LIST
84430: LIST
84431: LIST
84432: LIST
84433: LIST
84434: LIST
84435: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
84436: LD_ADDR_VAR 0 31
84440: PUSH
84441: LD_INT 0
84443: PUSH
84444: LD_INT 4
84446: PUSH
84447: EMPTY
84448: LIST
84449: LIST
84450: PUSH
84451: LD_INT 0
84453: PUSH
84454: LD_INT 3
84456: PUSH
84457: EMPTY
84458: LIST
84459: LIST
84460: PUSH
84461: LD_INT 1
84463: PUSH
84464: LD_INT 4
84466: PUSH
84467: EMPTY
84468: LIST
84469: LIST
84470: PUSH
84471: LD_INT 1
84473: PUSH
84474: LD_INT 5
84476: PUSH
84477: EMPTY
84478: LIST
84479: LIST
84480: PUSH
84481: LD_INT 0
84483: PUSH
84484: LD_INT 5
84486: PUSH
84487: EMPTY
84488: LIST
84489: LIST
84490: PUSH
84491: LD_INT 1
84493: NEG
84494: PUSH
84495: LD_INT 4
84497: PUSH
84498: EMPTY
84499: LIST
84500: LIST
84501: PUSH
84502: LD_INT 1
84504: NEG
84505: PUSH
84506: LD_INT 3
84508: PUSH
84509: EMPTY
84510: LIST
84511: LIST
84512: PUSH
84513: LD_INT 2
84515: PUSH
84516: LD_INT 5
84518: PUSH
84519: EMPTY
84520: LIST
84521: LIST
84522: PUSH
84523: LD_INT 2
84525: NEG
84526: PUSH
84527: LD_INT 3
84529: PUSH
84530: EMPTY
84531: LIST
84532: LIST
84533: PUSH
84534: LD_INT 3
84536: NEG
84537: PUSH
84538: LD_INT 0
84540: PUSH
84541: EMPTY
84542: LIST
84543: LIST
84544: PUSH
84545: LD_INT 3
84547: NEG
84548: PUSH
84549: LD_INT 1
84551: NEG
84552: PUSH
84553: EMPTY
84554: LIST
84555: LIST
84556: PUSH
84557: LD_INT 2
84559: NEG
84560: PUSH
84561: LD_INT 0
84563: PUSH
84564: EMPTY
84565: LIST
84566: LIST
84567: PUSH
84568: LD_INT 2
84570: NEG
84571: PUSH
84572: LD_INT 1
84574: PUSH
84575: EMPTY
84576: LIST
84577: LIST
84578: PUSH
84579: LD_INT 3
84581: NEG
84582: PUSH
84583: LD_INT 1
84585: PUSH
84586: EMPTY
84587: LIST
84588: LIST
84589: PUSH
84590: LD_INT 4
84592: NEG
84593: PUSH
84594: LD_INT 0
84596: PUSH
84597: EMPTY
84598: LIST
84599: LIST
84600: PUSH
84601: LD_INT 4
84603: NEG
84604: PUSH
84605: LD_INT 1
84607: NEG
84608: PUSH
84609: EMPTY
84610: LIST
84611: LIST
84612: PUSH
84613: LD_INT 4
84615: NEG
84616: PUSH
84617: LD_INT 2
84619: NEG
84620: PUSH
84621: EMPTY
84622: LIST
84623: LIST
84624: PUSH
84625: LD_INT 2
84627: NEG
84628: PUSH
84629: LD_INT 2
84631: PUSH
84632: EMPTY
84633: LIST
84634: LIST
84635: PUSH
84636: LD_INT 4
84638: NEG
84639: PUSH
84640: LD_INT 4
84642: NEG
84643: PUSH
84644: EMPTY
84645: LIST
84646: LIST
84647: PUSH
84648: LD_INT 4
84650: NEG
84651: PUSH
84652: LD_INT 5
84654: NEG
84655: PUSH
84656: EMPTY
84657: LIST
84658: LIST
84659: PUSH
84660: LD_INT 3
84662: NEG
84663: PUSH
84664: LD_INT 4
84666: NEG
84667: PUSH
84668: EMPTY
84669: LIST
84670: LIST
84671: PUSH
84672: LD_INT 3
84674: NEG
84675: PUSH
84676: LD_INT 3
84678: NEG
84679: PUSH
84680: EMPTY
84681: LIST
84682: LIST
84683: PUSH
84684: LD_INT 4
84686: NEG
84687: PUSH
84688: LD_INT 3
84690: NEG
84691: PUSH
84692: EMPTY
84693: LIST
84694: LIST
84695: PUSH
84696: LD_INT 5
84698: NEG
84699: PUSH
84700: LD_INT 4
84702: NEG
84703: PUSH
84704: EMPTY
84705: LIST
84706: LIST
84707: PUSH
84708: LD_INT 5
84710: NEG
84711: PUSH
84712: LD_INT 5
84714: NEG
84715: PUSH
84716: EMPTY
84717: LIST
84718: LIST
84719: PUSH
84720: LD_INT 3
84722: NEG
84723: PUSH
84724: LD_INT 5
84726: NEG
84727: PUSH
84728: EMPTY
84729: LIST
84730: LIST
84731: PUSH
84732: LD_INT 5
84734: NEG
84735: PUSH
84736: LD_INT 3
84738: NEG
84739: PUSH
84740: EMPTY
84741: LIST
84742: LIST
84743: PUSH
84744: LD_INT 0
84746: PUSH
84747: LD_INT 3
84749: NEG
84750: PUSH
84751: EMPTY
84752: LIST
84753: LIST
84754: PUSH
84755: LD_INT 0
84757: PUSH
84758: LD_INT 4
84760: NEG
84761: PUSH
84762: EMPTY
84763: LIST
84764: LIST
84765: PUSH
84766: LD_INT 1
84768: PUSH
84769: LD_INT 3
84771: NEG
84772: PUSH
84773: EMPTY
84774: LIST
84775: LIST
84776: PUSH
84777: LD_INT 1
84779: PUSH
84780: LD_INT 2
84782: NEG
84783: PUSH
84784: EMPTY
84785: LIST
84786: LIST
84787: PUSH
84788: LD_INT 0
84790: PUSH
84791: LD_INT 2
84793: NEG
84794: PUSH
84795: EMPTY
84796: LIST
84797: LIST
84798: PUSH
84799: LD_INT 1
84801: NEG
84802: PUSH
84803: LD_INT 3
84805: NEG
84806: PUSH
84807: EMPTY
84808: LIST
84809: LIST
84810: PUSH
84811: LD_INT 1
84813: NEG
84814: PUSH
84815: LD_INT 4
84817: NEG
84818: PUSH
84819: EMPTY
84820: LIST
84821: LIST
84822: PUSH
84823: LD_INT 2
84825: PUSH
84826: LD_INT 2
84828: NEG
84829: PUSH
84830: EMPTY
84831: LIST
84832: LIST
84833: PUSH
84834: LD_INT 2
84836: NEG
84837: PUSH
84838: LD_INT 4
84840: NEG
84841: PUSH
84842: EMPTY
84843: LIST
84844: LIST
84845: PUSH
84846: LD_INT 4
84848: PUSH
84849: LD_INT 0
84851: PUSH
84852: EMPTY
84853: LIST
84854: LIST
84855: PUSH
84856: LD_INT 4
84858: PUSH
84859: LD_INT 1
84861: NEG
84862: PUSH
84863: EMPTY
84864: LIST
84865: LIST
84866: PUSH
84867: LD_INT 5
84869: PUSH
84870: LD_INT 0
84872: PUSH
84873: EMPTY
84874: LIST
84875: LIST
84876: PUSH
84877: LD_INT 5
84879: PUSH
84880: LD_INT 1
84882: PUSH
84883: EMPTY
84884: LIST
84885: LIST
84886: PUSH
84887: LD_INT 4
84889: PUSH
84890: LD_INT 1
84892: PUSH
84893: EMPTY
84894: LIST
84895: LIST
84896: PUSH
84897: LD_INT 3
84899: PUSH
84900: LD_INT 0
84902: PUSH
84903: EMPTY
84904: LIST
84905: LIST
84906: PUSH
84907: LD_INT 3
84909: PUSH
84910: LD_INT 1
84912: NEG
84913: PUSH
84914: EMPTY
84915: LIST
84916: LIST
84917: PUSH
84918: LD_INT 3
84920: PUSH
84921: LD_INT 2
84923: NEG
84924: PUSH
84925: EMPTY
84926: LIST
84927: LIST
84928: PUSH
84929: LD_INT 5
84931: PUSH
84932: LD_INT 2
84934: PUSH
84935: EMPTY
84936: LIST
84937: LIST
84938: PUSH
84939: EMPTY
84940: LIST
84941: LIST
84942: LIST
84943: LIST
84944: LIST
84945: LIST
84946: LIST
84947: LIST
84948: LIST
84949: LIST
84950: LIST
84951: LIST
84952: LIST
84953: LIST
84954: LIST
84955: LIST
84956: LIST
84957: LIST
84958: LIST
84959: LIST
84960: LIST
84961: LIST
84962: LIST
84963: LIST
84964: LIST
84965: LIST
84966: LIST
84967: LIST
84968: LIST
84969: LIST
84970: LIST
84971: LIST
84972: LIST
84973: LIST
84974: LIST
84975: LIST
84976: LIST
84977: LIST
84978: LIST
84979: LIST
84980: LIST
84981: LIST
84982: LIST
84983: LIST
84984: LIST
84985: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
84986: LD_ADDR_VAR 0 32
84990: PUSH
84991: LD_INT 4
84993: NEG
84994: PUSH
84995: LD_INT 0
84997: PUSH
84998: EMPTY
84999: LIST
85000: LIST
85001: PUSH
85002: LD_INT 4
85004: NEG
85005: PUSH
85006: LD_INT 1
85008: NEG
85009: PUSH
85010: EMPTY
85011: LIST
85012: LIST
85013: PUSH
85014: LD_INT 3
85016: NEG
85017: PUSH
85018: LD_INT 0
85020: PUSH
85021: EMPTY
85022: LIST
85023: LIST
85024: PUSH
85025: LD_INT 3
85027: NEG
85028: PUSH
85029: LD_INT 1
85031: PUSH
85032: EMPTY
85033: LIST
85034: LIST
85035: PUSH
85036: LD_INT 4
85038: NEG
85039: PUSH
85040: LD_INT 1
85042: PUSH
85043: EMPTY
85044: LIST
85045: LIST
85046: PUSH
85047: LD_INT 5
85049: NEG
85050: PUSH
85051: LD_INT 0
85053: PUSH
85054: EMPTY
85055: LIST
85056: LIST
85057: PUSH
85058: LD_INT 5
85060: NEG
85061: PUSH
85062: LD_INT 1
85064: NEG
85065: PUSH
85066: EMPTY
85067: LIST
85068: LIST
85069: PUSH
85070: LD_INT 5
85072: NEG
85073: PUSH
85074: LD_INT 2
85076: NEG
85077: PUSH
85078: EMPTY
85079: LIST
85080: LIST
85081: PUSH
85082: LD_INT 3
85084: NEG
85085: PUSH
85086: LD_INT 2
85088: PUSH
85089: EMPTY
85090: LIST
85091: LIST
85092: PUSH
85093: LD_INT 3
85095: NEG
85096: PUSH
85097: LD_INT 3
85099: NEG
85100: PUSH
85101: EMPTY
85102: LIST
85103: LIST
85104: PUSH
85105: LD_INT 3
85107: NEG
85108: PUSH
85109: LD_INT 4
85111: NEG
85112: PUSH
85113: EMPTY
85114: LIST
85115: LIST
85116: PUSH
85117: LD_INT 2
85119: NEG
85120: PUSH
85121: LD_INT 3
85123: NEG
85124: PUSH
85125: EMPTY
85126: LIST
85127: LIST
85128: PUSH
85129: LD_INT 2
85131: NEG
85132: PUSH
85133: LD_INT 2
85135: NEG
85136: PUSH
85137: EMPTY
85138: LIST
85139: LIST
85140: PUSH
85141: LD_INT 3
85143: NEG
85144: PUSH
85145: LD_INT 2
85147: NEG
85148: PUSH
85149: EMPTY
85150: LIST
85151: LIST
85152: PUSH
85153: LD_INT 4
85155: NEG
85156: PUSH
85157: LD_INT 3
85159: NEG
85160: PUSH
85161: EMPTY
85162: LIST
85163: LIST
85164: PUSH
85165: LD_INT 4
85167: NEG
85168: PUSH
85169: LD_INT 4
85171: NEG
85172: PUSH
85173: EMPTY
85174: LIST
85175: LIST
85176: PUSH
85177: LD_INT 2
85179: NEG
85180: PUSH
85181: LD_INT 4
85183: NEG
85184: PUSH
85185: EMPTY
85186: LIST
85187: LIST
85188: PUSH
85189: LD_INT 4
85191: NEG
85192: PUSH
85193: LD_INT 2
85195: NEG
85196: PUSH
85197: EMPTY
85198: LIST
85199: LIST
85200: PUSH
85201: LD_INT 0
85203: PUSH
85204: LD_INT 4
85206: NEG
85207: PUSH
85208: EMPTY
85209: LIST
85210: LIST
85211: PUSH
85212: LD_INT 0
85214: PUSH
85215: LD_INT 5
85217: NEG
85218: PUSH
85219: EMPTY
85220: LIST
85221: LIST
85222: PUSH
85223: LD_INT 1
85225: PUSH
85226: LD_INT 4
85228: NEG
85229: PUSH
85230: EMPTY
85231: LIST
85232: LIST
85233: PUSH
85234: LD_INT 1
85236: PUSH
85237: LD_INT 3
85239: NEG
85240: PUSH
85241: EMPTY
85242: LIST
85243: LIST
85244: PUSH
85245: LD_INT 0
85247: PUSH
85248: LD_INT 3
85250: NEG
85251: PUSH
85252: EMPTY
85253: LIST
85254: LIST
85255: PUSH
85256: LD_INT 1
85258: NEG
85259: PUSH
85260: LD_INT 4
85262: NEG
85263: PUSH
85264: EMPTY
85265: LIST
85266: LIST
85267: PUSH
85268: LD_INT 1
85270: NEG
85271: PUSH
85272: LD_INT 5
85274: NEG
85275: PUSH
85276: EMPTY
85277: LIST
85278: LIST
85279: PUSH
85280: LD_INT 2
85282: PUSH
85283: LD_INT 3
85285: NEG
85286: PUSH
85287: EMPTY
85288: LIST
85289: LIST
85290: PUSH
85291: LD_INT 2
85293: NEG
85294: PUSH
85295: LD_INT 5
85297: NEG
85298: PUSH
85299: EMPTY
85300: LIST
85301: LIST
85302: PUSH
85303: LD_INT 3
85305: PUSH
85306: LD_INT 0
85308: PUSH
85309: EMPTY
85310: LIST
85311: LIST
85312: PUSH
85313: LD_INT 3
85315: PUSH
85316: LD_INT 1
85318: NEG
85319: PUSH
85320: EMPTY
85321: LIST
85322: LIST
85323: PUSH
85324: LD_INT 4
85326: PUSH
85327: LD_INT 0
85329: PUSH
85330: EMPTY
85331: LIST
85332: LIST
85333: PUSH
85334: LD_INT 4
85336: PUSH
85337: LD_INT 1
85339: PUSH
85340: EMPTY
85341: LIST
85342: LIST
85343: PUSH
85344: LD_INT 3
85346: PUSH
85347: LD_INT 1
85349: PUSH
85350: EMPTY
85351: LIST
85352: LIST
85353: PUSH
85354: LD_INT 2
85356: PUSH
85357: LD_INT 0
85359: PUSH
85360: EMPTY
85361: LIST
85362: LIST
85363: PUSH
85364: LD_INT 2
85366: PUSH
85367: LD_INT 1
85369: NEG
85370: PUSH
85371: EMPTY
85372: LIST
85373: LIST
85374: PUSH
85375: LD_INT 2
85377: PUSH
85378: LD_INT 2
85380: NEG
85381: PUSH
85382: EMPTY
85383: LIST
85384: LIST
85385: PUSH
85386: LD_INT 4
85388: PUSH
85389: LD_INT 2
85391: PUSH
85392: EMPTY
85393: LIST
85394: LIST
85395: PUSH
85396: LD_INT 4
85398: PUSH
85399: LD_INT 4
85401: PUSH
85402: EMPTY
85403: LIST
85404: LIST
85405: PUSH
85406: LD_INT 4
85408: PUSH
85409: LD_INT 3
85411: PUSH
85412: EMPTY
85413: LIST
85414: LIST
85415: PUSH
85416: LD_INT 5
85418: PUSH
85419: LD_INT 4
85421: PUSH
85422: EMPTY
85423: LIST
85424: LIST
85425: PUSH
85426: LD_INT 5
85428: PUSH
85429: LD_INT 5
85431: PUSH
85432: EMPTY
85433: LIST
85434: LIST
85435: PUSH
85436: LD_INT 4
85438: PUSH
85439: LD_INT 5
85441: PUSH
85442: EMPTY
85443: LIST
85444: LIST
85445: PUSH
85446: LD_INT 3
85448: PUSH
85449: LD_INT 4
85451: PUSH
85452: EMPTY
85453: LIST
85454: LIST
85455: PUSH
85456: LD_INT 3
85458: PUSH
85459: LD_INT 3
85461: PUSH
85462: EMPTY
85463: LIST
85464: LIST
85465: PUSH
85466: LD_INT 5
85468: PUSH
85469: LD_INT 3
85471: PUSH
85472: EMPTY
85473: LIST
85474: LIST
85475: PUSH
85476: LD_INT 3
85478: PUSH
85479: LD_INT 5
85481: PUSH
85482: EMPTY
85483: LIST
85484: LIST
85485: PUSH
85486: EMPTY
85487: LIST
85488: LIST
85489: LIST
85490: LIST
85491: LIST
85492: LIST
85493: LIST
85494: LIST
85495: LIST
85496: LIST
85497: LIST
85498: LIST
85499: LIST
85500: LIST
85501: LIST
85502: LIST
85503: LIST
85504: LIST
85505: LIST
85506: LIST
85507: LIST
85508: LIST
85509: LIST
85510: LIST
85511: LIST
85512: LIST
85513: LIST
85514: LIST
85515: LIST
85516: LIST
85517: LIST
85518: LIST
85519: LIST
85520: LIST
85521: LIST
85522: LIST
85523: LIST
85524: LIST
85525: LIST
85526: LIST
85527: LIST
85528: LIST
85529: LIST
85530: LIST
85531: LIST
85532: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
85533: LD_ADDR_VAR 0 33
85537: PUSH
85538: LD_INT 4
85540: NEG
85541: PUSH
85542: LD_INT 4
85544: NEG
85545: PUSH
85546: EMPTY
85547: LIST
85548: LIST
85549: PUSH
85550: LD_INT 4
85552: NEG
85553: PUSH
85554: LD_INT 5
85556: NEG
85557: PUSH
85558: EMPTY
85559: LIST
85560: LIST
85561: PUSH
85562: LD_INT 3
85564: NEG
85565: PUSH
85566: LD_INT 4
85568: NEG
85569: PUSH
85570: EMPTY
85571: LIST
85572: LIST
85573: PUSH
85574: LD_INT 3
85576: NEG
85577: PUSH
85578: LD_INT 3
85580: NEG
85581: PUSH
85582: EMPTY
85583: LIST
85584: LIST
85585: PUSH
85586: LD_INT 4
85588: NEG
85589: PUSH
85590: LD_INT 3
85592: NEG
85593: PUSH
85594: EMPTY
85595: LIST
85596: LIST
85597: PUSH
85598: LD_INT 5
85600: NEG
85601: PUSH
85602: LD_INT 4
85604: NEG
85605: PUSH
85606: EMPTY
85607: LIST
85608: LIST
85609: PUSH
85610: LD_INT 5
85612: NEG
85613: PUSH
85614: LD_INT 5
85616: NEG
85617: PUSH
85618: EMPTY
85619: LIST
85620: LIST
85621: PUSH
85622: LD_INT 3
85624: NEG
85625: PUSH
85626: LD_INT 5
85628: NEG
85629: PUSH
85630: EMPTY
85631: LIST
85632: LIST
85633: PUSH
85634: LD_INT 5
85636: NEG
85637: PUSH
85638: LD_INT 3
85640: NEG
85641: PUSH
85642: EMPTY
85643: LIST
85644: LIST
85645: PUSH
85646: LD_INT 0
85648: PUSH
85649: LD_INT 3
85651: NEG
85652: PUSH
85653: EMPTY
85654: LIST
85655: LIST
85656: PUSH
85657: LD_INT 0
85659: PUSH
85660: LD_INT 4
85662: NEG
85663: PUSH
85664: EMPTY
85665: LIST
85666: LIST
85667: PUSH
85668: LD_INT 1
85670: PUSH
85671: LD_INT 3
85673: NEG
85674: PUSH
85675: EMPTY
85676: LIST
85677: LIST
85678: PUSH
85679: LD_INT 1
85681: PUSH
85682: LD_INT 2
85684: NEG
85685: PUSH
85686: EMPTY
85687: LIST
85688: LIST
85689: PUSH
85690: LD_INT 0
85692: PUSH
85693: LD_INT 2
85695: NEG
85696: PUSH
85697: EMPTY
85698: LIST
85699: LIST
85700: PUSH
85701: LD_INT 1
85703: NEG
85704: PUSH
85705: LD_INT 3
85707: NEG
85708: PUSH
85709: EMPTY
85710: LIST
85711: LIST
85712: PUSH
85713: LD_INT 1
85715: NEG
85716: PUSH
85717: LD_INT 4
85719: NEG
85720: PUSH
85721: EMPTY
85722: LIST
85723: LIST
85724: PUSH
85725: LD_INT 2
85727: PUSH
85728: LD_INT 2
85730: NEG
85731: PUSH
85732: EMPTY
85733: LIST
85734: LIST
85735: PUSH
85736: LD_INT 2
85738: NEG
85739: PUSH
85740: LD_INT 4
85742: NEG
85743: PUSH
85744: EMPTY
85745: LIST
85746: LIST
85747: PUSH
85748: LD_INT 4
85750: PUSH
85751: LD_INT 0
85753: PUSH
85754: EMPTY
85755: LIST
85756: LIST
85757: PUSH
85758: LD_INT 4
85760: PUSH
85761: LD_INT 1
85763: NEG
85764: PUSH
85765: EMPTY
85766: LIST
85767: LIST
85768: PUSH
85769: LD_INT 5
85771: PUSH
85772: LD_INT 0
85774: PUSH
85775: EMPTY
85776: LIST
85777: LIST
85778: PUSH
85779: LD_INT 5
85781: PUSH
85782: LD_INT 1
85784: PUSH
85785: EMPTY
85786: LIST
85787: LIST
85788: PUSH
85789: LD_INT 4
85791: PUSH
85792: LD_INT 1
85794: PUSH
85795: EMPTY
85796: LIST
85797: LIST
85798: PUSH
85799: LD_INT 3
85801: PUSH
85802: LD_INT 0
85804: PUSH
85805: EMPTY
85806: LIST
85807: LIST
85808: PUSH
85809: LD_INT 3
85811: PUSH
85812: LD_INT 1
85814: NEG
85815: PUSH
85816: EMPTY
85817: LIST
85818: LIST
85819: PUSH
85820: LD_INT 3
85822: PUSH
85823: LD_INT 2
85825: NEG
85826: PUSH
85827: EMPTY
85828: LIST
85829: LIST
85830: PUSH
85831: LD_INT 5
85833: PUSH
85834: LD_INT 2
85836: PUSH
85837: EMPTY
85838: LIST
85839: LIST
85840: PUSH
85841: LD_INT 3
85843: PUSH
85844: LD_INT 3
85846: PUSH
85847: EMPTY
85848: LIST
85849: LIST
85850: PUSH
85851: LD_INT 3
85853: PUSH
85854: LD_INT 2
85856: PUSH
85857: EMPTY
85858: LIST
85859: LIST
85860: PUSH
85861: LD_INT 4
85863: PUSH
85864: LD_INT 3
85866: PUSH
85867: EMPTY
85868: LIST
85869: LIST
85870: PUSH
85871: LD_INT 4
85873: PUSH
85874: LD_INT 4
85876: PUSH
85877: EMPTY
85878: LIST
85879: LIST
85880: PUSH
85881: LD_INT 3
85883: PUSH
85884: LD_INT 4
85886: PUSH
85887: EMPTY
85888: LIST
85889: LIST
85890: PUSH
85891: LD_INT 2
85893: PUSH
85894: LD_INT 3
85896: PUSH
85897: EMPTY
85898: LIST
85899: LIST
85900: PUSH
85901: LD_INT 2
85903: PUSH
85904: LD_INT 2
85906: PUSH
85907: EMPTY
85908: LIST
85909: LIST
85910: PUSH
85911: LD_INT 4
85913: PUSH
85914: LD_INT 2
85916: PUSH
85917: EMPTY
85918: LIST
85919: LIST
85920: PUSH
85921: LD_INT 2
85923: PUSH
85924: LD_INT 4
85926: PUSH
85927: EMPTY
85928: LIST
85929: LIST
85930: PUSH
85931: LD_INT 0
85933: PUSH
85934: LD_INT 4
85936: PUSH
85937: EMPTY
85938: LIST
85939: LIST
85940: PUSH
85941: LD_INT 0
85943: PUSH
85944: LD_INT 3
85946: PUSH
85947: EMPTY
85948: LIST
85949: LIST
85950: PUSH
85951: LD_INT 1
85953: PUSH
85954: LD_INT 4
85956: PUSH
85957: EMPTY
85958: LIST
85959: LIST
85960: PUSH
85961: LD_INT 1
85963: PUSH
85964: LD_INT 5
85966: PUSH
85967: EMPTY
85968: LIST
85969: LIST
85970: PUSH
85971: LD_INT 0
85973: PUSH
85974: LD_INT 5
85976: PUSH
85977: EMPTY
85978: LIST
85979: LIST
85980: PUSH
85981: LD_INT 1
85983: NEG
85984: PUSH
85985: LD_INT 4
85987: PUSH
85988: EMPTY
85989: LIST
85990: LIST
85991: PUSH
85992: LD_INT 1
85994: NEG
85995: PUSH
85996: LD_INT 3
85998: PUSH
85999: EMPTY
86000: LIST
86001: LIST
86002: PUSH
86003: LD_INT 2
86005: PUSH
86006: LD_INT 5
86008: PUSH
86009: EMPTY
86010: LIST
86011: LIST
86012: PUSH
86013: LD_INT 2
86015: NEG
86016: PUSH
86017: LD_INT 3
86019: PUSH
86020: EMPTY
86021: LIST
86022: LIST
86023: PUSH
86024: EMPTY
86025: LIST
86026: LIST
86027: LIST
86028: LIST
86029: LIST
86030: LIST
86031: LIST
86032: LIST
86033: LIST
86034: LIST
86035: LIST
86036: LIST
86037: LIST
86038: LIST
86039: LIST
86040: LIST
86041: LIST
86042: LIST
86043: LIST
86044: LIST
86045: LIST
86046: LIST
86047: LIST
86048: LIST
86049: LIST
86050: LIST
86051: LIST
86052: LIST
86053: LIST
86054: LIST
86055: LIST
86056: LIST
86057: LIST
86058: LIST
86059: LIST
86060: LIST
86061: LIST
86062: LIST
86063: LIST
86064: LIST
86065: LIST
86066: LIST
86067: LIST
86068: LIST
86069: LIST
86070: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
86071: LD_ADDR_VAR 0 34
86075: PUSH
86076: LD_INT 0
86078: PUSH
86079: LD_INT 4
86081: NEG
86082: PUSH
86083: EMPTY
86084: LIST
86085: LIST
86086: PUSH
86087: LD_INT 0
86089: PUSH
86090: LD_INT 5
86092: NEG
86093: PUSH
86094: EMPTY
86095: LIST
86096: LIST
86097: PUSH
86098: LD_INT 1
86100: PUSH
86101: LD_INT 4
86103: NEG
86104: PUSH
86105: EMPTY
86106: LIST
86107: LIST
86108: PUSH
86109: LD_INT 1
86111: PUSH
86112: LD_INT 3
86114: NEG
86115: PUSH
86116: EMPTY
86117: LIST
86118: LIST
86119: PUSH
86120: LD_INT 0
86122: PUSH
86123: LD_INT 3
86125: NEG
86126: PUSH
86127: EMPTY
86128: LIST
86129: LIST
86130: PUSH
86131: LD_INT 1
86133: NEG
86134: PUSH
86135: LD_INT 4
86137: NEG
86138: PUSH
86139: EMPTY
86140: LIST
86141: LIST
86142: PUSH
86143: LD_INT 1
86145: NEG
86146: PUSH
86147: LD_INT 5
86149: NEG
86150: PUSH
86151: EMPTY
86152: LIST
86153: LIST
86154: PUSH
86155: LD_INT 2
86157: PUSH
86158: LD_INT 3
86160: NEG
86161: PUSH
86162: EMPTY
86163: LIST
86164: LIST
86165: PUSH
86166: LD_INT 2
86168: NEG
86169: PUSH
86170: LD_INT 5
86172: NEG
86173: PUSH
86174: EMPTY
86175: LIST
86176: LIST
86177: PUSH
86178: LD_INT 3
86180: PUSH
86181: LD_INT 0
86183: PUSH
86184: EMPTY
86185: LIST
86186: LIST
86187: PUSH
86188: LD_INT 3
86190: PUSH
86191: LD_INT 1
86193: NEG
86194: PUSH
86195: EMPTY
86196: LIST
86197: LIST
86198: PUSH
86199: LD_INT 4
86201: PUSH
86202: LD_INT 0
86204: PUSH
86205: EMPTY
86206: LIST
86207: LIST
86208: PUSH
86209: LD_INT 4
86211: PUSH
86212: LD_INT 1
86214: PUSH
86215: EMPTY
86216: LIST
86217: LIST
86218: PUSH
86219: LD_INT 3
86221: PUSH
86222: LD_INT 1
86224: PUSH
86225: EMPTY
86226: LIST
86227: LIST
86228: PUSH
86229: LD_INT 2
86231: PUSH
86232: LD_INT 0
86234: PUSH
86235: EMPTY
86236: LIST
86237: LIST
86238: PUSH
86239: LD_INT 2
86241: PUSH
86242: LD_INT 1
86244: NEG
86245: PUSH
86246: EMPTY
86247: LIST
86248: LIST
86249: PUSH
86250: LD_INT 2
86252: PUSH
86253: LD_INT 2
86255: NEG
86256: PUSH
86257: EMPTY
86258: LIST
86259: LIST
86260: PUSH
86261: LD_INT 4
86263: PUSH
86264: LD_INT 2
86266: PUSH
86267: EMPTY
86268: LIST
86269: LIST
86270: PUSH
86271: LD_INT 4
86273: PUSH
86274: LD_INT 4
86276: PUSH
86277: EMPTY
86278: LIST
86279: LIST
86280: PUSH
86281: LD_INT 4
86283: PUSH
86284: LD_INT 3
86286: PUSH
86287: EMPTY
86288: LIST
86289: LIST
86290: PUSH
86291: LD_INT 5
86293: PUSH
86294: LD_INT 4
86296: PUSH
86297: EMPTY
86298: LIST
86299: LIST
86300: PUSH
86301: LD_INT 5
86303: PUSH
86304: LD_INT 5
86306: PUSH
86307: EMPTY
86308: LIST
86309: LIST
86310: PUSH
86311: LD_INT 4
86313: PUSH
86314: LD_INT 5
86316: PUSH
86317: EMPTY
86318: LIST
86319: LIST
86320: PUSH
86321: LD_INT 3
86323: PUSH
86324: LD_INT 4
86326: PUSH
86327: EMPTY
86328: LIST
86329: LIST
86330: PUSH
86331: LD_INT 3
86333: PUSH
86334: LD_INT 3
86336: PUSH
86337: EMPTY
86338: LIST
86339: LIST
86340: PUSH
86341: LD_INT 5
86343: PUSH
86344: LD_INT 3
86346: PUSH
86347: EMPTY
86348: LIST
86349: LIST
86350: PUSH
86351: LD_INT 3
86353: PUSH
86354: LD_INT 5
86356: PUSH
86357: EMPTY
86358: LIST
86359: LIST
86360: PUSH
86361: LD_INT 0
86363: PUSH
86364: LD_INT 3
86366: PUSH
86367: EMPTY
86368: LIST
86369: LIST
86370: PUSH
86371: LD_INT 0
86373: PUSH
86374: LD_INT 2
86376: PUSH
86377: EMPTY
86378: LIST
86379: LIST
86380: PUSH
86381: LD_INT 1
86383: PUSH
86384: LD_INT 3
86386: PUSH
86387: EMPTY
86388: LIST
86389: LIST
86390: PUSH
86391: LD_INT 1
86393: PUSH
86394: LD_INT 4
86396: PUSH
86397: EMPTY
86398: LIST
86399: LIST
86400: PUSH
86401: LD_INT 0
86403: PUSH
86404: LD_INT 4
86406: PUSH
86407: EMPTY
86408: LIST
86409: LIST
86410: PUSH
86411: LD_INT 1
86413: NEG
86414: PUSH
86415: LD_INT 3
86417: PUSH
86418: EMPTY
86419: LIST
86420: LIST
86421: PUSH
86422: LD_INT 1
86424: NEG
86425: PUSH
86426: LD_INT 2
86428: PUSH
86429: EMPTY
86430: LIST
86431: LIST
86432: PUSH
86433: LD_INT 2
86435: PUSH
86436: LD_INT 4
86438: PUSH
86439: EMPTY
86440: LIST
86441: LIST
86442: PUSH
86443: LD_INT 2
86445: NEG
86446: PUSH
86447: LD_INT 2
86449: PUSH
86450: EMPTY
86451: LIST
86452: LIST
86453: PUSH
86454: LD_INT 4
86456: NEG
86457: PUSH
86458: LD_INT 0
86460: PUSH
86461: EMPTY
86462: LIST
86463: LIST
86464: PUSH
86465: LD_INT 4
86467: NEG
86468: PUSH
86469: LD_INT 1
86471: NEG
86472: PUSH
86473: EMPTY
86474: LIST
86475: LIST
86476: PUSH
86477: LD_INT 3
86479: NEG
86480: PUSH
86481: LD_INT 0
86483: PUSH
86484: EMPTY
86485: LIST
86486: LIST
86487: PUSH
86488: LD_INT 3
86490: NEG
86491: PUSH
86492: LD_INT 1
86494: PUSH
86495: EMPTY
86496: LIST
86497: LIST
86498: PUSH
86499: LD_INT 4
86501: NEG
86502: PUSH
86503: LD_INT 1
86505: PUSH
86506: EMPTY
86507: LIST
86508: LIST
86509: PUSH
86510: LD_INT 5
86512: NEG
86513: PUSH
86514: LD_INT 0
86516: PUSH
86517: EMPTY
86518: LIST
86519: LIST
86520: PUSH
86521: LD_INT 5
86523: NEG
86524: PUSH
86525: LD_INT 1
86527: NEG
86528: PUSH
86529: EMPTY
86530: LIST
86531: LIST
86532: PUSH
86533: LD_INT 5
86535: NEG
86536: PUSH
86537: LD_INT 2
86539: NEG
86540: PUSH
86541: EMPTY
86542: LIST
86543: LIST
86544: PUSH
86545: LD_INT 3
86547: NEG
86548: PUSH
86549: LD_INT 2
86551: PUSH
86552: EMPTY
86553: LIST
86554: LIST
86555: PUSH
86556: EMPTY
86557: LIST
86558: LIST
86559: LIST
86560: LIST
86561: LIST
86562: LIST
86563: LIST
86564: LIST
86565: LIST
86566: LIST
86567: LIST
86568: LIST
86569: LIST
86570: LIST
86571: LIST
86572: LIST
86573: LIST
86574: LIST
86575: LIST
86576: LIST
86577: LIST
86578: LIST
86579: LIST
86580: LIST
86581: LIST
86582: LIST
86583: LIST
86584: LIST
86585: LIST
86586: LIST
86587: LIST
86588: LIST
86589: LIST
86590: LIST
86591: LIST
86592: LIST
86593: LIST
86594: LIST
86595: LIST
86596: LIST
86597: LIST
86598: LIST
86599: LIST
86600: LIST
86601: LIST
86602: ST_TO_ADDR
// end ; end ;
86603: GO 86606
86605: POP
// case btype of b_depot , b_warehouse :
86606: LD_VAR 0 1
86610: PUSH
86611: LD_INT 0
86613: DOUBLE
86614: EQUAL
86615: IFTRUE 86625
86617: LD_INT 1
86619: DOUBLE
86620: EQUAL
86621: IFTRUE 86625
86623: GO 86826
86625: POP
// case nation of nation_american :
86626: LD_VAR 0 5
86630: PUSH
86631: LD_INT 1
86633: DOUBLE
86634: EQUAL
86635: IFTRUE 86639
86637: GO 86695
86639: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
86640: LD_ADDR_VAR 0 9
86644: PUSH
86645: LD_VAR 0 11
86649: PUSH
86650: LD_VAR 0 12
86654: PUSH
86655: LD_VAR 0 13
86659: PUSH
86660: LD_VAR 0 14
86664: PUSH
86665: LD_VAR 0 15
86669: PUSH
86670: LD_VAR 0 16
86674: PUSH
86675: EMPTY
86676: LIST
86677: LIST
86678: LIST
86679: LIST
86680: LIST
86681: LIST
86682: PUSH
86683: LD_VAR 0 4
86687: PUSH
86688: LD_INT 1
86690: PLUS
86691: ARRAY
86692: ST_TO_ADDR
86693: GO 86824
86695: LD_INT 2
86697: DOUBLE
86698: EQUAL
86699: IFTRUE 86703
86701: GO 86759
86703: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
86704: LD_ADDR_VAR 0 9
86708: PUSH
86709: LD_VAR 0 17
86713: PUSH
86714: LD_VAR 0 18
86718: PUSH
86719: LD_VAR 0 19
86723: PUSH
86724: LD_VAR 0 20
86728: PUSH
86729: LD_VAR 0 21
86733: PUSH
86734: LD_VAR 0 22
86738: PUSH
86739: EMPTY
86740: LIST
86741: LIST
86742: LIST
86743: LIST
86744: LIST
86745: LIST
86746: PUSH
86747: LD_VAR 0 4
86751: PUSH
86752: LD_INT 1
86754: PLUS
86755: ARRAY
86756: ST_TO_ADDR
86757: GO 86824
86759: LD_INT 3
86761: DOUBLE
86762: EQUAL
86763: IFTRUE 86767
86765: GO 86823
86767: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
86768: LD_ADDR_VAR 0 9
86772: PUSH
86773: LD_VAR 0 23
86777: PUSH
86778: LD_VAR 0 24
86782: PUSH
86783: LD_VAR 0 25
86787: PUSH
86788: LD_VAR 0 26
86792: PUSH
86793: LD_VAR 0 27
86797: PUSH
86798: LD_VAR 0 28
86802: PUSH
86803: EMPTY
86804: LIST
86805: LIST
86806: LIST
86807: LIST
86808: LIST
86809: LIST
86810: PUSH
86811: LD_VAR 0 4
86815: PUSH
86816: LD_INT 1
86818: PLUS
86819: ARRAY
86820: ST_TO_ADDR
86821: GO 86824
86823: POP
86824: GO 87379
86826: LD_INT 2
86828: DOUBLE
86829: EQUAL
86830: IFTRUE 86840
86832: LD_INT 3
86834: DOUBLE
86835: EQUAL
86836: IFTRUE 86840
86838: GO 86896
86840: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
86841: LD_ADDR_VAR 0 9
86845: PUSH
86846: LD_VAR 0 29
86850: PUSH
86851: LD_VAR 0 30
86855: PUSH
86856: LD_VAR 0 31
86860: PUSH
86861: LD_VAR 0 32
86865: PUSH
86866: LD_VAR 0 33
86870: PUSH
86871: LD_VAR 0 34
86875: PUSH
86876: EMPTY
86877: LIST
86878: LIST
86879: LIST
86880: LIST
86881: LIST
86882: LIST
86883: PUSH
86884: LD_VAR 0 4
86888: PUSH
86889: LD_INT 1
86891: PLUS
86892: ARRAY
86893: ST_TO_ADDR
86894: GO 87379
86896: LD_INT 16
86898: DOUBLE
86899: EQUAL
86900: IFTRUE 86958
86902: LD_INT 17
86904: DOUBLE
86905: EQUAL
86906: IFTRUE 86958
86908: LD_INT 18
86910: DOUBLE
86911: EQUAL
86912: IFTRUE 86958
86914: LD_INT 19
86916: DOUBLE
86917: EQUAL
86918: IFTRUE 86958
86920: LD_INT 22
86922: DOUBLE
86923: EQUAL
86924: IFTRUE 86958
86926: LD_INT 20
86928: DOUBLE
86929: EQUAL
86930: IFTRUE 86958
86932: LD_INT 21
86934: DOUBLE
86935: EQUAL
86936: IFTRUE 86958
86938: LD_INT 23
86940: DOUBLE
86941: EQUAL
86942: IFTRUE 86958
86944: LD_INT 24
86946: DOUBLE
86947: EQUAL
86948: IFTRUE 86958
86950: LD_INT 25
86952: DOUBLE
86953: EQUAL
86954: IFTRUE 86958
86956: GO 87014
86958: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
86959: LD_ADDR_VAR 0 9
86963: PUSH
86964: LD_VAR 0 35
86968: PUSH
86969: LD_VAR 0 36
86973: PUSH
86974: LD_VAR 0 37
86978: PUSH
86979: LD_VAR 0 38
86983: PUSH
86984: LD_VAR 0 39
86988: PUSH
86989: LD_VAR 0 40
86993: PUSH
86994: EMPTY
86995: LIST
86996: LIST
86997: LIST
86998: LIST
86999: LIST
87000: LIST
87001: PUSH
87002: LD_VAR 0 4
87006: PUSH
87007: LD_INT 1
87009: PLUS
87010: ARRAY
87011: ST_TO_ADDR
87012: GO 87379
87014: LD_INT 6
87016: DOUBLE
87017: EQUAL
87018: IFTRUE 87070
87020: LD_INT 7
87022: DOUBLE
87023: EQUAL
87024: IFTRUE 87070
87026: LD_INT 8
87028: DOUBLE
87029: EQUAL
87030: IFTRUE 87070
87032: LD_INT 13
87034: DOUBLE
87035: EQUAL
87036: IFTRUE 87070
87038: LD_INT 12
87040: DOUBLE
87041: EQUAL
87042: IFTRUE 87070
87044: LD_INT 15
87046: DOUBLE
87047: EQUAL
87048: IFTRUE 87070
87050: LD_INT 11
87052: DOUBLE
87053: EQUAL
87054: IFTRUE 87070
87056: LD_INT 14
87058: DOUBLE
87059: EQUAL
87060: IFTRUE 87070
87062: LD_INT 10
87064: DOUBLE
87065: EQUAL
87066: IFTRUE 87070
87068: GO 87126
87070: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
87071: LD_ADDR_VAR 0 9
87075: PUSH
87076: LD_VAR 0 41
87080: PUSH
87081: LD_VAR 0 42
87085: PUSH
87086: LD_VAR 0 43
87090: PUSH
87091: LD_VAR 0 44
87095: PUSH
87096: LD_VAR 0 45
87100: PUSH
87101: LD_VAR 0 46
87105: PUSH
87106: EMPTY
87107: LIST
87108: LIST
87109: LIST
87110: LIST
87111: LIST
87112: LIST
87113: PUSH
87114: LD_VAR 0 4
87118: PUSH
87119: LD_INT 1
87121: PLUS
87122: ARRAY
87123: ST_TO_ADDR
87124: GO 87379
87126: LD_INT 36
87128: DOUBLE
87129: EQUAL
87130: IFTRUE 87134
87132: GO 87190
87134: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
87135: LD_ADDR_VAR 0 9
87139: PUSH
87140: LD_VAR 0 47
87144: PUSH
87145: LD_VAR 0 48
87149: PUSH
87150: LD_VAR 0 49
87154: PUSH
87155: LD_VAR 0 50
87159: PUSH
87160: LD_VAR 0 51
87164: PUSH
87165: LD_VAR 0 52
87169: PUSH
87170: EMPTY
87171: LIST
87172: LIST
87173: LIST
87174: LIST
87175: LIST
87176: LIST
87177: PUSH
87178: LD_VAR 0 4
87182: PUSH
87183: LD_INT 1
87185: PLUS
87186: ARRAY
87187: ST_TO_ADDR
87188: GO 87379
87190: LD_INT 4
87192: DOUBLE
87193: EQUAL
87194: IFTRUE 87216
87196: LD_INT 5
87198: DOUBLE
87199: EQUAL
87200: IFTRUE 87216
87202: LD_INT 34
87204: DOUBLE
87205: EQUAL
87206: IFTRUE 87216
87208: LD_INT 37
87210: DOUBLE
87211: EQUAL
87212: IFTRUE 87216
87214: GO 87272
87216: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
87217: LD_ADDR_VAR 0 9
87221: PUSH
87222: LD_VAR 0 53
87226: PUSH
87227: LD_VAR 0 54
87231: PUSH
87232: LD_VAR 0 55
87236: PUSH
87237: LD_VAR 0 56
87241: PUSH
87242: LD_VAR 0 57
87246: PUSH
87247: LD_VAR 0 58
87251: PUSH
87252: EMPTY
87253: LIST
87254: LIST
87255: LIST
87256: LIST
87257: LIST
87258: LIST
87259: PUSH
87260: LD_VAR 0 4
87264: PUSH
87265: LD_INT 1
87267: PLUS
87268: ARRAY
87269: ST_TO_ADDR
87270: GO 87379
87272: LD_INT 31
87274: DOUBLE
87275: EQUAL
87276: IFTRUE 87322
87278: LD_INT 32
87280: DOUBLE
87281: EQUAL
87282: IFTRUE 87322
87284: LD_INT 33
87286: DOUBLE
87287: EQUAL
87288: IFTRUE 87322
87290: LD_INT 27
87292: DOUBLE
87293: EQUAL
87294: IFTRUE 87322
87296: LD_INT 26
87298: DOUBLE
87299: EQUAL
87300: IFTRUE 87322
87302: LD_INT 28
87304: DOUBLE
87305: EQUAL
87306: IFTRUE 87322
87308: LD_INT 29
87310: DOUBLE
87311: EQUAL
87312: IFTRUE 87322
87314: LD_INT 30
87316: DOUBLE
87317: EQUAL
87318: IFTRUE 87322
87320: GO 87378
87322: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
87323: LD_ADDR_VAR 0 9
87327: PUSH
87328: LD_VAR 0 59
87332: PUSH
87333: LD_VAR 0 60
87337: PUSH
87338: LD_VAR 0 61
87342: PUSH
87343: LD_VAR 0 62
87347: PUSH
87348: LD_VAR 0 63
87352: PUSH
87353: LD_VAR 0 64
87357: PUSH
87358: EMPTY
87359: LIST
87360: LIST
87361: LIST
87362: LIST
87363: LIST
87364: LIST
87365: PUSH
87366: LD_VAR 0 4
87370: PUSH
87371: LD_INT 1
87373: PLUS
87374: ARRAY
87375: ST_TO_ADDR
87376: GO 87379
87378: POP
// temp_list2 = [ ] ;
87379: LD_ADDR_VAR 0 10
87383: PUSH
87384: EMPTY
87385: ST_TO_ADDR
// for i in temp_list do
87386: LD_ADDR_VAR 0 8
87390: PUSH
87391: LD_VAR 0 9
87395: PUSH
87396: FOR_IN
87397: IFFALSE 87449
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
87399: LD_ADDR_VAR 0 10
87403: PUSH
87404: LD_VAR 0 10
87408: PUSH
87409: LD_VAR 0 8
87413: PUSH
87414: LD_INT 1
87416: ARRAY
87417: PUSH
87418: LD_VAR 0 2
87422: PLUS
87423: PUSH
87424: LD_VAR 0 8
87428: PUSH
87429: LD_INT 2
87431: ARRAY
87432: PUSH
87433: LD_VAR 0 3
87437: PLUS
87438: PUSH
87439: EMPTY
87440: LIST
87441: LIST
87442: PUSH
87443: EMPTY
87444: LIST
87445: ADD
87446: ST_TO_ADDR
87447: GO 87396
87449: POP
87450: POP
// result = temp_list2 ;
87451: LD_ADDR_VAR 0 7
87455: PUSH
87456: LD_VAR 0 10
87460: ST_TO_ADDR
// end ;
87461: LD_VAR 0 7
87465: RET
// export function EnemyInRange ( unit , dist ) ; begin
87466: LD_INT 0
87468: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
87469: LD_ADDR_VAR 0 3
87473: PUSH
87474: LD_VAR 0 1
87478: PPUSH
87479: CALL_OW 255
87483: PPUSH
87484: LD_VAR 0 1
87488: PPUSH
87489: CALL_OW 250
87493: PPUSH
87494: LD_VAR 0 1
87498: PPUSH
87499: CALL_OW 251
87503: PPUSH
87504: LD_VAR 0 2
87508: PPUSH
87509: CALL 60839 0 4
87513: PUSH
87514: LD_INT 4
87516: ARRAY
87517: ST_TO_ADDR
// end ;
87518: LD_VAR 0 3
87522: RET
// export function PlayerSeeMe ( unit ) ; begin
87523: LD_INT 0
87525: PPUSH
// result := See ( your_side , unit ) ;
87526: LD_ADDR_VAR 0 2
87530: PUSH
87531: LD_OWVAR 2
87535: PPUSH
87536: LD_VAR 0 1
87540: PPUSH
87541: CALL_OW 292
87545: ST_TO_ADDR
// end ;
87546: LD_VAR 0 2
87550: RET
// export function ReverseDir ( unit ) ; begin
87551: LD_INT 0
87553: PPUSH
// if not unit then
87554: LD_VAR 0 1
87558: NOT
87559: IFFALSE 87563
// exit ;
87561: GO 87586
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
87563: LD_ADDR_VAR 0 2
87567: PUSH
87568: LD_VAR 0 1
87572: PPUSH
87573: CALL_OW 254
87577: PUSH
87578: LD_INT 3
87580: PLUS
87581: PUSH
87582: LD_INT 6
87584: MOD
87585: ST_TO_ADDR
// end ;
87586: LD_VAR 0 2
87590: RET
// export function ReverseArray ( array ) ; var i ; begin
87591: LD_INT 0
87593: PPUSH
87594: PPUSH
// if not array then
87595: LD_VAR 0 1
87599: NOT
87600: IFFALSE 87604
// exit ;
87602: GO 87659
// result := [ ] ;
87604: LD_ADDR_VAR 0 2
87608: PUSH
87609: EMPTY
87610: ST_TO_ADDR
// for i := array downto 1 do
87611: LD_ADDR_VAR 0 3
87615: PUSH
87616: DOUBLE
87617: LD_VAR 0 1
87621: INC
87622: ST_TO_ADDR
87623: LD_INT 1
87625: PUSH
87626: FOR_DOWNTO
87627: IFFALSE 87657
// result := Join ( result , array [ i ] ) ;
87629: LD_ADDR_VAR 0 2
87633: PUSH
87634: LD_VAR 0 2
87638: PPUSH
87639: LD_VAR 0 1
87643: PUSH
87644: LD_VAR 0 3
87648: ARRAY
87649: PPUSH
87650: CALL 92304 0 2
87654: ST_TO_ADDR
87655: GO 87626
87657: POP
87658: POP
// end ;
87659: LD_VAR 0 2
87663: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
87664: LD_INT 0
87666: PPUSH
87667: PPUSH
87668: PPUSH
87669: PPUSH
87670: PPUSH
87671: PPUSH
// if not unit or not hexes then
87672: LD_VAR 0 1
87676: NOT
87677: PUSH
87678: LD_VAR 0 2
87682: NOT
87683: OR
87684: IFFALSE 87688
// exit ;
87686: GO 87811
// dist := 9999 ;
87688: LD_ADDR_VAR 0 5
87692: PUSH
87693: LD_INT 9999
87695: ST_TO_ADDR
// for i = 1 to hexes do
87696: LD_ADDR_VAR 0 4
87700: PUSH
87701: DOUBLE
87702: LD_INT 1
87704: DEC
87705: ST_TO_ADDR
87706: LD_VAR 0 2
87710: PUSH
87711: FOR_TO
87712: IFFALSE 87799
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
87714: LD_ADDR_VAR 0 6
87718: PUSH
87719: LD_VAR 0 1
87723: PPUSH
87724: LD_VAR 0 2
87728: PUSH
87729: LD_VAR 0 4
87733: ARRAY
87734: PUSH
87735: LD_INT 1
87737: ARRAY
87738: PPUSH
87739: LD_VAR 0 2
87743: PUSH
87744: LD_VAR 0 4
87748: ARRAY
87749: PUSH
87750: LD_INT 2
87752: ARRAY
87753: PPUSH
87754: CALL_OW 297
87758: ST_TO_ADDR
// if tdist < dist then
87759: LD_VAR 0 6
87763: PUSH
87764: LD_VAR 0 5
87768: LESS
87769: IFFALSE 87797
// begin hex := hexes [ i ] ;
87771: LD_ADDR_VAR 0 8
87775: PUSH
87776: LD_VAR 0 2
87780: PUSH
87781: LD_VAR 0 4
87785: ARRAY
87786: ST_TO_ADDR
// dist := tdist ;
87787: LD_ADDR_VAR 0 5
87791: PUSH
87792: LD_VAR 0 6
87796: ST_TO_ADDR
// end ; end ;
87797: GO 87711
87799: POP
87800: POP
// result := hex ;
87801: LD_ADDR_VAR 0 3
87805: PUSH
87806: LD_VAR 0 8
87810: ST_TO_ADDR
// end ;
87811: LD_VAR 0 3
87815: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
87816: LD_INT 0
87818: PPUSH
87819: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
87820: LD_VAR 0 1
87824: NOT
87825: PUSH
87826: LD_VAR 0 1
87830: PUSH
87831: LD_INT 21
87833: PUSH
87834: LD_INT 2
87836: PUSH
87837: EMPTY
87838: LIST
87839: LIST
87840: PUSH
87841: LD_INT 23
87843: PUSH
87844: LD_INT 2
87846: PUSH
87847: EMPTY
87848: LIST
87849: LIST
87850: PUSH
87851: EMPTY
87852: LIST
87853: LIST
87854: PPUSH
87855: CALL_OW 69
87859: IN
87860: NOT
87861: OR
87862: IFFALSE 87866
// exit ;
87864: GO 87913
// for i = 1 to 3 do
87866: LD_ADDR_VAR 0 3
87870: PUSH
87871: DOUBLE
87872: LD_INT 1
87874: DEC
87875: ST_TO_ADDR
87876: LD_INT 3
87878: PUSH
87879: FOR_TO
87880: IFFALSE 87911
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
87882: LD_VAR 0 1
87886: PPUSH
87887: CALL_OW 250
87891: PPUSH
87892: LD_VAR 0 1
87896: PPUSH
87897: CALL_OW 251
87901: PPUSH
87902: LD_INT 1
87904: PPUSH
87905: CALL_OW 453
87909: GO 87879
87911: POP
87912: POP
// end ;
87913: LD_VAR 0 2
87917: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
87918: LD_INT 0
87920: PPUSH
87921: PPUSH
87922: PPUSH
87923: PPUSH
87924: PPUSH
87925: PPUSH
// if not unit or not enemy_unit then
87926: LD_VAR 0 1
87930: NOT
87931: PUSH
87932: LD_VAR 0 2
87936: NOT
87937: OR
87938: IFFALSE 87942
// exit ;
87940: GO 88409
// if GetLives ( i ) < 250 then
87942: LD_VAR 0 4
87946: PPUSH
87947: CALL_OW 256
87951: PUSH
87952: LD_INT 250
87954: LESS
87955: IFFALSE 87968
// begin ComAutodestruct ( i ) ;
87957: LD_VAR 0 4
87961: PPUSH
87962: CALL 87816 0 1
// exit ;
87966: GO 88409
// end ; x := GetX ( enemy_unit ) ;
87968: LD_ADDR_VAR 0 7
87972: PUSH
87973: LD_VAR 0 2
87977: PPUSH
87978: CALL_OW 250
87982: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
87983: LD_ADDR_VAR 0 8
87987: PUSH
87988: LD_VAR 0 2
87992: PPUSH
87993: CALL_OW 251
87997: ST_TO_ADDR
// if not x or not y then
87998: LD_VAR 0 7
88002: NOT
88003: PUSH
88004: LD_VAR 0 8
88008: NOT
88009: OR
88010: IFFALSE 88014
// exit ;
88012: GO 88409
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
88014: LD_ADDR_VAR 0 6
88018: PUSH
88019: LD_VAR 0 7
88023: PPUSH
88024: LD_INT 0
88026: PPUSH
88027: LD_INT 4
88029: PPUSH
88030: CALL_OW 272
88034: PUSH
88035: LD_VAR 0 8
88039: PPUSH
88040: LD_INT 0
88042: PPUSH
88043: LD_INT 4
88045: PPUSH
88046: CALL_OW 273
88050: PUSH
88051: EMPTY
88052: LIST
88053: LIST
88054: PUSH
88055: LD_VAR 0 7
88059: PPUSH
88060: LD_INT 1
88062: PPUSH
88063: LD_INT 4
88065: PPUSH
88066: CALL_OW 272
88070: PUSH
88071: LD_VAR 0 8
88075: PPUSH
88076: LD_INT 1
88078: PPUSH
88079: LD_INT 4
88081: PPUSH
88082: CALL_OW 273
88086: PUSH
88087: EMPTY
88088: LIST
88089: LIST
88090: PUSH
88091: LD_VAR 0 7
88095: PPUSH
88096: LD_INT 2
88098: PPUSH
88099: LD_INT 4
88101: PPUSH
88102: CALL_OW 272
88106: PUSH
88107: LD_VAR 0 8
88111: PPUSH
88112: LD_INT 2
88114: PPUSH
88115: LD_INT 4
88117: PPUSH
88118: CALL_OW 273
88122: PUSH
88123: EMPTY
88124: LIST
88125: LIST
88126: PUSH
88127: LD_VAR 0 7
88131: PPUSH
88132: LD_INT 3
88134: PPUSH
88135: LD_INT 4
88137: PPUSH
88138: CALL_OW 272
88142: PUSH
88143: LD_VAR 0 8
88147: PPUSH
88148: LD_INT 3
88150: PPUSH
88151: LD_INT 4
88153: PPUSH
88154: CALL_OW 273
88158: PUSH
88159: EMPTY
88160: LIST
88161: LIST
88162: PUSH
88163: LD_VAR 0 7
88167: PPUSH
88168: LD_INT 4
88170: PPUSH
88171: LD_INT 4
88173: PPUSH
88174: CALL_OW 272
88178: PUSH
88179: LD_VAR 0 8
88183: PPUSH
88184: LD_INT 4
88186: PPUSH
88187: LD_INT 4
88189: PPUSH
88190: CALL_OW 273
88194: PUSH
88195: EMPTY
88196: LIST
88197: LIST
88198: PUSH
88199: LD_VAR 0 7
88203: PPUSH
88204: LD_INT 5
88206: PPUSH
88207: LD_INT 4
88209: PPUSH
88210: CALL_OW 272
88214: PUSH
88215: LD_VAR 0 8
88219: PPUSH
88220: LD_INT 5
88222: PPUSH
88223: LD_INT 4
88225: PPUSH
88226: CALL_OW 273
88230: PUSH
88231: EMPTY
88232: LIST
88233: LIST
88234: PUSH
88235: EMPTY
88236: LIST
88237: LIST
88238: LIST
88239: LIST
88240: LIST
88241: LIST
88242: ST_TO_ADDR
// for i = tmp downto 1 do
88243: LD_ADDR_VAR 0 4
88247: PUSH
88248: DOUBLE
88249: LD_VAR 0 6
88253: INC
88254: ST_TO_ADDR
88255: LD_INT 1
88257: PUSH
88258: FOR_DOWNTO
88259: IFFALSE 88360
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
88261: LD_VAR 0 6
88265: PUSH
88266: LD_VAR 0 4
88270: ARRAY
88271: PUSH
88272: LD_INT 1
88274: ARRAY
88275: PPUSH
88276: LD_VAR 0 6
88280: PUSH
88281: LD_VAR 0 4
88285: ARRAY
88286: PUSH
88287: LD_INT 2
88289: ARRAY
88290: PPUSH
88291: CALL_OW 488
88295: NOT
88296: PUSH
88297: LD_VAR 0 6
88301: PUSH
88302: LD_VAR 0 4
88306: ARRAY
88307: PUSH
88308: LD_INT 1
88310: ARRAY
88311: PPUSH
88312: LD_VAR 0 6
88316: PUSH
88317: LD_VAR 0 4
88321: ARRAY
88322: PUSH
88323: LD_INT 2
88325: ARRAY
88326: PPUSH
88327: CALL_OW 428
88331: PUSH
88332: LD_INT 0
88334: NONEQUAL
88335: OR
88336: IFFALSE 88358
// tmp := Delete ( tmp , i ) ;
88338: LD_ADDR_VAR 0 6
88342: PUSH
88343: LD_VAR 0 6
88347: PPUSH
88348: LD_VAR 0 4
88352: PPUSH
88353: CALL_OW 3
88357: ST_TO_ADDR
88358: GO 88258
88360: POP
88361: POP
// j := GetClosestHex ( unit , tmp ) ;
88362: LD_ADDR_VAR 0 5
88366: PUSH
88367: LD_VAR 0 1
88371: PPUSH
88372: LD_VAR 0 6
88376: PPUSH
88377: CALL 87664 0 2
88381: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
88382: LD_VAR 0 1
88386: PPUSH
88387: LD_VAR 0 5
88391: PUSH
88392: LD_INT 1
88394: ARRAY
88395: PPUSH
88396: LD_VAR 0 5
88400: PUSH
88401: LD_INT 2
88403: ARRAY
88404: PPUSH
88405: CALL_OW 111
// end ;
88409: LD_VAR 0 3
88413: RET
// export function PrepareApemanSoldier ( ) ; begin
88414: LD_INT 0
88416: PPUSH
// uc_nation := 0 ;
88417: LD_ADDR_OWVAR 21
88421: PUSH
88422: LD_INT 0
88424: ST_TO_ADDR
// hc_sex := sex_male ;
88425: LD_ADDR_OWVAR 27
88429: PUSH
88430: LD_INT 1
88432: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
88433: LD_ADDR_OWVAR 28
88437: PUSH
88438: LD_INT 15
88440: ST_TO_ADDR
// hc_gallery :=  ;
88441: LD_ADDR_OWVAR 33
88445: PUSH
88446: LD_STRING 
88448: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
88449: LD_ADDR_OWVAR 31
88453: PUSH
88454: LD_INT 0
88456: PPUSH
88457: LD_INT 3
88459: PPUSH
88460: CALL_OW 12
88464: PUSH
88465: LD_INT 0
88467: PPUSH
88468: LD_INT 3
88470: PPUSH
88471: CALL_OW 12
88475: PUSH
88476: LD_INT 0
88478: PUSH
88479: LD_INT 0
88481: PUSH
88482: EMPTY
88483: LIST
88484: LIST
88485: LIST
88486: LIST
88487: ST_TO_ADDR
// end ;
88488: LD_VAR 0 1
88492: RET
// export function PrepareApemanEngineer ( ) ; begin
88493: LD_INT 0
88495: PPUSH
// uc_nation := 0 ;
88496: LD_ADDR_OWVAR 21
88500: PUSH
88501: LD_INT 0
88503: ST_TO_ADDR
// hc_sex := sex_male ;
88504: LD_ADDR_OWVAR 27
88508: PUSH
88509: LD_INT 1
88511: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
88512: LD_ADDR_OWVAR 28
88516: PUSH
88517: LD_INT 16
88519: ST_TO_ADDR
// hc_gallery :=  ;
88520: LD_ADDR_OWVAR 33
88524: PUSH
88525: LD_STRING 
88527: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
88528: LD_ADDR_OWVAR 31
88532: PUSH
88533: LD_INT 0
88535: PPUSH
88536: LD_INT 3
88538: PPUSH
88539: CALL_OW 12
88543: PUSH
88544: LD_INT 0
88546: PPUSH
88547: LD_INT 3
88549: PPUSH
88550: CALL_OW 12
88554: PUSH
88555: LD_INT 0
88557: PUSH
88558: LD_INT 0
88560: PUSH
88561: EMPTY
88562: LIST
88563: LIST
88564: LIST
88565: LIST
88566: ST_TO_ADDR
// end ;
88567: LD_VAR 0 1
88571: RET
// export function PrepareApeman ( agressivity ) ; begin
88572: LD_INT 0
88574: PPUSH
// uc_side := 0 ;
88575: LD_ADDR_OWVAR 20
88579: PUSH
88580: LD_INT 0
88582: ST_TO_ADDR
// uc_nation := 0 ;
88583: LD_ADDR_OWVAR 21
88587: PUSH
88588: LD_INT 0
88590: ST_TO_ADDR
// hc_sex := sex_male ;
88591: LD_ADDR_OWVAR 27
88595: PUSH
88596: LD_INT 1
88598: ST_TO_ADDR
// hc_class := class_apeman ;
88599: LD_ADDR_OWVAR 28
88603: PUSH
88604: LD_INT 12
88606: ST_TO_ADDR
// hc_gallery :=  ;
88607: LD_ADDR_OWVAR 33
88611: PUSH
88612: LD_STRING 
88614: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
88615: LD_ADDR_OWVAR 35
88619: PUSH
88620: LD_VAR 0 1
88624: NEG
88625: PPUSH
88626: LD_VAR 0 1
88630: PPUSH
88631: CALL_OW 12
88635: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
88636: LD_ADDR_OWVAR 31
88640: PUSH
88641: LD_INT 0
88643: PPUSH
88644: LD_INT 3
88646: PPUSH
88647: CALL_OW 12
88651: PUSH
88652: LD_INT 0
88654: PPUSH
88655: LD_INT 3
88657: PPUSH
88658: CALL_OW 12
88662: PUSH
88663: LD_INT 0
88665: PUSH
88666: LD_INT 0
88668: PUSH
88669: EMPTY
88670: LIST
88671: LIST
88672: LIST
88673: LIST
88674: ST_TO_ADDR
// end ;
88675: LD_VAR 0 2
88679: RET
// export function PrepareTiger ( agressivity ) ; begin
88680: LD_INT 0
88682: PPUSH
// uc_side := 0 ;
88683: LD_ADDR_OWVAR 20
88687: PUSH
88688: LD_INT 0
88690: ST_TO_ADDR
// uc_nation := 0 ;
88691: LD_ADDR_OWVAR 21
88695: PUSH
88696: LD_INT 0
88698: ST_TO_ADDR
// hc_class := class_tiger ;
88699: LD_ADDR_OWVAR 28
88703: PUSH
88704: LD_INT 14
88706: ST_TO_ADDR
// hc_gallery :=  ;
88707: LD_ADDR_OWVAR 33
88711: PUSH
88712: LD_STRING 
88714: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
88715: LD_ADDR_OWVAR 35
88719: PUSH
88720: LD_VAR 0 1
88724: NEG
88725: PPUSH
88726: LD_VAR 0 1
88730: PPUSH
88731: CALL_OW 12
88735: ST_TO_ADDR
// end ;
88736: LD_VAR 0 2
88740: RET
// export function PrepareEnchidna ( ) ; begin
88741: LD_INT 0
88743: PPUSH
// uc_side := 0 ;
88744: LD_ADDR_OWVAR 20
88748: PUSH
88749: LD_INT 0
88751: ST_TO_ADDR
// uc_nation := 0 ;
88752: LD_ADDR_OWVAR 21
88756: PUSH
88757: LD_INT 0
88759: ST_TO_ADDR
// hc_class := class_baggie ;
88760: LD_ADDR_OWVAR 28
88764: PUSH
88765: LD_INT 13
88767: ST_TO_ADDR
// hc_gallery :=  ;
88768: LD_ADDR_OWVAR 33
88772: PUSH
88773: LD_STRING 
88775: ST_TO_ADDR
// end ;
88776: LD_VAR 0 1
88780: RET
// export function PrepareFrog ( ) ; begin
88781: LD_INT 0
88783: PPUSH
// uc_side := 0 ;
88784: LD_ADDR_OWVAR 20
88788: PUSH
88789: LD_INT 0
88791: ST_TO_ADDR
// uc_nation := 0 ;
88792: LD_ADDR_OWVAR 21
88796: PUSH
88797: LD_INT 0
88799: ST_TO_ADDR
// hc_class := class_frog ;
88800: LD_ADDR_OWVAR 28
88804: PUSH
88805: LD_INT 19
88807: ST_TO_ADDR
// hc_gallery :=  ;
88808: LD_ADDR_OWVAR 33
88812: PUSH
88813: LD_STRING 
88815: ST_TO_ADDR
// end ;
88816: LD_VAR 0 1
88820: RET
// export function PrepareFish ( ) ; begin
88821: LD_INT 0
88823: PPUSH
// uc_side := 0 ;
88824: LD_ADDR_OWVAR 20
88828: PUSH
88829: LD_INT 0
88831: ST_TO_ADDR
// uc_nation := 0 ;
88832: LD_ADDR_OWVAR 21
88836: PUSH
88837: LD_INT 0
88839: ST_TO_ADDR
// hc_class := class_fish ;
88840: LD_ADDR_OWVAR 28
88844: PUSH
88845: LD_INT 20
88847: ST_TO_ADDR
// hc_gallery :=  ;
88848: LD_ADDR_OWVAR 33
88852: PUSH
88853: LD_STRING 
88855: ST_TO_ADDR
// end ;
88856: LD_VAR 0 1
88860: RET
// export function PrepareBird ( ) ; begin
88861: LD_INT 0
88863: PPUSH
// uc_side := 0 ;
88864: LD_ADDR_OWVAR 20
88868: PUSH
88869: LD_INT 0
88871: ST_TO_ADDR
// uc_nation := 0 ;
88872: LD_ADDR_OWVAR 21
88876: PUSH
88877: LD_INT 0
88879: ST_TO_ADDR
// hc_class := class_phororhacos ;
88880: LD_ADDR_OWVAR 28
88884: PUSH
88885: LD_INT 18
88887: ST_TO_ADDR
// hc_gallery :=  ;
88888: LD_ADDR_OWVAR 33
88892: PUSH
88893: LD_STRING 
88895: ST_TO_ADDR
// end ;
88896: LD_VAR 0 1
88900: RET
// export function PrepareHorse ( ) ; begin
88901: LD_INT 0
88903: PPUSH
// uc_side := 0 ;
88904: LD_ADDR_OWVAR 20
88908: PUSH
88909: LD_INT 0
88911: ST_TO_ADDR
// uc_nation := 0 ;
88912: LD_ADDR_OWVAR 21
88916: PUSH
88917: LD_INT 0
88919: ST_TO_ADDR
// hc_class := class_horse ;
88920: LD_ADDR_OWVAR 28
88924: PUSH
88925: LD_INT 21
88927: ST_TO_ADDR
// hc_gallery :=  ;
88928: LD_ADDR_OWVAR 33
88932: PUSH
88933: LD_STRING 
88935: ST_TO_ADDR
// end ;
88936: LD_VAR 0 1
88940: RET
// export function PrepareMastodont ( ) ; begin
88941: LD_INT 0
88943: PPUSH
// uc_side := 0 ;
88944: LD_ADDR_OWVAR 20
88948: PUSH
88949: LD_INT 0
88951: ST_TO_ADDR
// uc_nation := 0 ;
88952: LD_ADDR_OWVAR 21
88956: PUSH
88957: LD_INT 0
88959: ST_TO_ADDR
// vc_chassis := class_mastodont ;
88960: LD_ADDR_OWVAR 37
88964: PUSH
88965: LD_INT 31
88967: ST_TO_ADDR
// vc_control := control_rider ;
88968: LD_ADDR_OWVAR 38
88972: PUSH
88973: LD_INT 4
88975: ST_TO_ADDR
// end ;
88976: LD_VAR 0 1
88980: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
88981: LD_INT 0
88983: PPUSH
88984: PPUSH
88985: PPUSH
// uc_side = 0 ;
88986: LD_ADDR_OWVAR 20
88990: PUSH
88991: LD_INT 0
88993: ST_TO_ADDR
// uc_nation = 0 ;
88994: LD_ADDR_OWVAR 21
88998: PUSH
88999: LD_INT 0
89001: ST_TO_ADDR
// InitHc_All ( ) ;
89002: CALL_OW 584
// InitVc ;
89006: CALL_OW 20
// if mastodonts then
89010: LD_VAR 0 6
89014: IFFALSE 89081
// for i = 1 to mastodonts do
89016: LD_ADDR_VAR 0 11
89020: PUSH
89021: DOUBLE
89022: LD_INT 1
89024: DEC
89025: ST_TO_ADDR
89026: LD_VAR 0 6
89030: PUSH
89031: FOR_TO
89032: IFFALSE 89079
// begin vc_chassis := 31 ;
89034: LD_ADDR_OWVAR 37
89038: PUSH
89039: LD_INT 31
89041: ST_TO_ADDR
// vc_control := control_rider ;
89042: LD_ADDR_OWVAR 38
89046: PUSH
89047: LD_INT 4
89049: ST_TO_ADDR
// animal := CreateVehicle ;
89050: LD_ADDR_VAR 0 12
89054: PUSH
89055: CALL_OW 45
89059: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89060: LD_VAR 0 12
89064: PPUSH
89065: LD_VAR 0 8
89069: PPUSH
89070: LD_INT 0
89072: PPUSH
89073: CALL 91209 0 3
// end ;
89077: GO 89031
89079: POP
89080: POP
// if horses then
89081: LD_VAR 0 5
89085: IFFALSE 89152
// for i = 1 to horses do
89087: LD_ADDR_VAR 0 11
89091: PUSH
89092: DOUBLE
89093: LD_INT 1
89095: DEC
89096: ST_TO_ADDR
89097: LD_VAR 0 5
89101: PUSH
89102: FOR_TO
89103: IFFALSE 89150
// begin hc_class := 21 ;
89105: LD_ADDR_OWVAR 28
89109: PUSH
89110: LD_INT 21
89112: ST_TO_ADDR
// hc_gallery :=  ;
89113: LD_ADDR_OWVAR 33
89117: PUSH
89118: LD_STRING 
89120: ST_TO_ADDR
// animal := CreateHuman ;
89121: LD_ADDR_VAR 0 12
89125: PUSH
89126: CALL_OW 44
89130: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89131: LD_VAR 0 12
89135: PPUSH
89136: LD_VAR 0 8
89140: PPUSH
89141: LD_INT 0
89143: PPUSH
89144: CALL 91209 0 3
// end ;
89148: GO 89102
89150: POP
89151: POP
// if birds then
89152: LD_VAR 0 1
89156: IFFALSE 89223
// for i = 1 to birds do
89158: LD_ADDR_VAR 0 11
89162: PUSH
89163: DOUBLE
89164: LD_INT 1
89166: DEC
89167: ST_TO_ADDR
89168: LD_VAR 0 1
89172: PUSH
89173: FOR_TO
89174: IFFALSE 89221
// begin hc_class := 18 ;
89176: LD_ADDR_OWVAR 28
89180: PUSH
89181: LD_INT 18
89183: ST_TO_ADDR
// hc_gallery =  ;
89184: LD_ADDR_OWVAR 33
89188: PUSH
89189: LD_STRING 
89191: ST_TO_ADDR
// animal := CreateHuman ;
89192: LD_ADDR_VAR 0 12
89196: PUSH
89197: CALL_OW 44
89201: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89202: LD_VAR 0 12
89206: PPUSH
89207: LD_VAR 0 8
89211: PPUSH
89212: LD_INT 0
89214: PPUSH
89215: CALL 91209 0 3
// end ;
89219: GO 89173
89221: POP
89222: POP
// if tigers then
89223: LD_VAR 0 2
89227: IFFALSE 89311
// for i = 1 to tigers do
89229: LD_ADDR_VAR 0 11
89233: PUSH
89234: DOUBLE
89235: LD_INT 1
89237: DEC
89238: ST_TO_ADDR
89239: LD_VAR 0 2
89243: PUSH
89244: FOR_TO
89245: IFFALSE 89309
// begin hc_class = class_tiger ;
89247: LD_ADDR_OWVAR 28
89251: PUSH
89252: LD_INT 14
89254: ST_TO_ADDR
// hc_gallery =  ;
89255: LD_ADDR_OWVAR 33
89259: PUSH
89260: LD_STRING 
89262: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
89263: LD_ADDR_OWVAR 35
89267: PUSH
89268: LD_INT 7
89270: NEG
89271: PPUSH
89272: LD_INT 7
89274: PPUSH
89275: CALL_OW 12
89279: ST_TO_ADDR
// animal := CreateHuman ;
89280: LD_ADDR_VAR 0 12
89284: PUSH
89285: CALL_OW 44
89289: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89290: LD_VAR 0 12
89294: PPUSH
89295: LD_VAR 0 8
89299: PPUSH
89300: LD_INT 0
89302: PPUSH
89303: CALL 91209 0 3
// end ;
89307: GO 89244
89309: POP
89310: POP
// if apemans then
89311: LD_VAR 0 3
89315: IFFALSE 89438
// for i = 1 to apemans do
89317: LD_ADDR_VAR 0 11
89321: PUSH
89322: DOUBLE
89323: LD_INT 1
89325: DEC
89326: ST_TO_ADDR
89327: LD_VAR 0 3
89331: PUSH
89332: FOR_TO
89333: IFFALSE 89436
// begin hc_class = class_apeman ;
89335: LD_ADDR_OWVAR 28
89339: PUSH
89340: LD_INT 12
89342: ST_TO_ADDR
// hc_gallery =  ;
89343: LD_ADDR_OWVAR 33
89347: PUSH
89348: LD_STRING 
89350: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
89351: LD_ADDR_OWVAR 35
89355: PUSH
89356: LD_INT 2
89358: NEG
89359: PPUSH
89360: LD_INT 2
89362: PPUSH
89363: CALL_OW 12
89367: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
89368: LD_ADDR_OWVAR 31
89372: PUSH
89373: LD_INT 1
89375: PPUSH
89376: LD_INT 3
89378: PPUSH
89379: CALL_OW 12
89383: PUSH
89384: LD_INT 1
89386: PPUSH
89387: LD_INT 3
89389: PPUSH
89390: CALL_OW 12
89394: PUSH
89395: LD_INT 0
89397: PUSH
89398: LD_INT 0
89400: PUSH
89401: EMPTY
89402: LIST
89403: LIST
89404: LIST
89405: LIST
89406: ST_TO_ADDR
// animal := CreateHuman ;
89407: LD_ADDR_VAR 0 12
89411: PUSH
89412: CALL_OW 44
89416: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89417: LD_VAR 0 12
89421: PPUSH
89422: LD_VAR 0 8
89426: PPUSH
89427: LD_INT 0
89429: PPUSH
89430: CALL 91209 0 3
// end ;
89434: GO 89332
89436: POP
89437: POP
// if enchidnas then
89438: LD_VAR 0 4
89442: IFFALSE 89509
// for i = 1 to enchidnas do
89444: LD_ADDR_VAR 0 11
89448: PUSH
89449: DOUBLE
89450: LD_INT 1
89452: DEC
89453: ST_TO_ADDR
89454: LD_VAR 0 4
89458: PUSH
89459: FOR_TO
89460: IFFALSE 89507
// begin hc_class = 13 ;
89462: LD_ADDR_OWVAR 28
89466: PUSH
89467: LD_INT 13
89469: ST_TO_ADDR
// hc_gallery =  ;
89470: LD_ADDR_OWVAR 33
89474: PUSH
89475: LD_STRING 
89477: ST_TO_ADDR
// animal := CreateHuman ;
89478: LD_ADDR_VAR 0 12
89482: PUSH
89483: CALL_OW 44
89487: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89488: LD_VAR 0 12
89492: PPUSH
89493: LD_VAR 0 8
89497: PPUSH
89498: LD_INT 0
89500: PPUSH
89501: CALL 91209 0 3
// end ;
89505: GO 89459
89507: POP
89508: POP
// if fishes then
89509: LD_VAR 0 7
89513: IFFALSE 89580
// for i = 1 to fishes do
89515: LD_ADDR_VAR 0 11
89519: PUSH
89520: DOUBLE
89521: LD_INT 1
89523: DEC
89524: ST_TO_ADDR
89525: LD_VAR 0 7
89529: PUSH
89530: FOR_TO
89531: IFFALSE 89578
// begin hc_class = 20 ;
89533: LD_ADDR_OWVAR 28
89537: PUSH
89538: LD_INT 20
89540: ST_TO_ADDR
// hc_gallery =  ;
89541: LD_ADDR_OWVAR 33
89545: PUSH
89546: LD_STRING 
89548: ST_TO_ADDR
// animal := CreateHuman ;
89549: LD_ADDR_VAR 0 12
89553: PUSH
89554: CALL_OW 44
89558: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
89559: LD_VAR 0 12
89563: PPUSH
89564: LD_VAR 0 9
89568: PPUSH
89569: LD_INT 0
89571: PPUSH
89572: CALL 91209 0 3
// end ;
89576: GO 89530
89578: POP
89579: POP
// end ;
89580: LD_VAR 0 10
89584: RET
// export function WantHeal ( sci , unit ) ; begin
89585: LD_INT 0
89587: PPUSH
// if GetTaskList ( sci ) > 0 then
89588: LD_VAR 0 1
89592: PPUSH
89593: CALL_OW 437
89597: PUSH
89598: LD_INT 0
89600: GREATER
89601: IFFALSE 89671
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
89603: LD_VAR 0 1
89607: PPUSH
89608: CALL_OW 437
89612: PUSH
89613: LD_INT 1
89615: ARRAY
89616: PUSH
89617: LD_INT 1
89619: ARRAY
89620: PUSH
89621: LD_STRING l
89623: EQUAL
89624: PUSH
89625: LD_VAR 0 1
89629: PPUSH
89630: CALL_OW 437
89634: PUSH
89635: LD_INT 1
89637: ARRAY
89638: PUSH
89639: LD_INT 4
89641: ARRAY
89642: PUSH
89643: LD_VAR 0 2
89647: EQUAL
89648: AND
89649: IFFALSE 89661
// result := true else
89651: LD_ADDR_VAR 0 3
89655: PUSH
89656: LD_INT 1
89658: ST_TO_ADDR
89659: GO 89669
// result := false ;
89661: LD_ADDR_VAR 0 3
89665: PUSH
89666: LD_INT 0
89668: ST_TO_ADDR
// end else
89669: GO 89679
// result := false ;
89671: LD_ADDR_VAR 0 3
89675: PUSH
89676: LD_INT 0
89678: ST_TO_ADDR
// end ;
89679: LD_VAR 0 3
89683: RET
// export function HealTarget ( sci ) ; begin
89684: LD_INT 0
89686: PPUSH
// if not sci then
89687: LD_VAR 0 1
89691: NOT
89692: IFFALSE 89696
// exit ;
89694: GO 89761
// result := 0 ;
89696: LD_ADDR_VAR 0 2
89700: PUSH
89701: LD_INT 0
89703: ST_TO_ADDR
// if GetTaskList ( sci ) then
89704: LD_VAR 0 1
89708: PPUSH
89709: CALL_OW 437
89713: IFFALSE 89761
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
89715: LD_VAR 0 1
89719: PPUSH
89720: CALL_OW 437
89724: PUSH
89725: LD_INT 1
89727: ARRAY
89728: PUSH
89729: LD_INT 1
89731: ARRAY
89732: PUSH
89733: LD_STRING l
89735: EQUAL
89736: IFFALSE 89761
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
89738: LD_ADDR_VAR 0 2
89742: PUSH
89743: LD_VAR 0 1
89747: PPUSH
89748: CALL_OW 437
89752: PUSH
89753: LD_INT 1
89755: ARRAY
89756: PUSH
89757: LD_INT 4
89759: ARRAY
89760: ST_TO_ADDR
// end ;
89761: LD_VAR 0 2
89765: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
89766: LD_INT 0
89768: PPUSH
89769: PPUSH
89770: PPUSH
89771: PPUSH
// if not base_units then
89772: LD_VAR 0 1
89776: NOT
89777: IFFALSE 89781
// exit ;
89779: GO 89868
// result := false ;
89781: LD_ADDR_VAR 0 2
89785: PUSH
89786: LD_INT 0
89788: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
89789: LD_ADDR_VAR 0 5
89793: PUSH
89794: LD_VAR 0 1
89798: PPUSH
89799: LD_INT 21
89801: PUSH
89802: LD_INT 3
89804: PUSH
89805: EMPTY
89806: LIST
89807: LIST
89808: PPUSH
89809: CALL_OW 72
89813: ST_TO_ADDR
// if not tmp then
89814: LD_VAR 0 5
89818: NOT
89819: IFFALSE 89823
// exit ;
89821: GO 89868
// for i in tmp do
89823: LD_ADDR_VAR 0 3
89827: PUSH
89828: LD_VAR 0 5
89832: PUSH
89833: FOR_IN
89834: IFFALSE 89866
// begin result := EnemyInRange ( i , 22 ) ;
89836: LD_ADDR_VAR 0 2
89840: PUSH
89841: LD_VAR 0 3
89845: PPUSH
89846: LD_INT 22
89848: PPUSH
89849: CALL 87466 0 2
89853: ST_TO_ADDR
// if result then
89854: LD_VAR 0 2
89858: IFFALSE 89864
// exit ;
89860: POP
89861: POP
89862: GO 89868
// end ;
89864: GO 89833
89866: POP
89867: POP
// end ;
89868: LD_VAR 0 2
89872: RET
// export function FilterByTag ( units , tag ) ; begin
89873: LD_INT 0
89875: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
89876: LD_ADDR_VAR 0 3
89880: PUSH
89881: LD_VAR 0 1
89885: PPUSH
89886: LD_INT 120
89888: PUSH
89889: LD_VAR 0 2
89893: PUSH
89894: EMPTY
89895: LIST
89896: LIST
89897: PPUSH
89898: CALL_OW 72
89902: ST_TO_ADDR
// end ;
89903: LD_VAR 0 3
89907: RET
// export function IsDriver ( un ) ; begin
89908: LD_INT 0
89910: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
89911: LD_ADDR_VAR 0 2
89915: PUSH
89916: LD_VAR 0 1
89920: PUSH
89921: LD_INT 55
89923: PUSH
89924: EMPTY
89925: LIST
89926: PPUSH
89927: CALL_OW 69
89931: IN
89932: ST_TO_ADDR
// end ;
89933: LD_VAR 0 2
89937: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
89938: LD_INT 0
89940: PPUSH
89941: PPUSH
// list := [ ] ;
89942: LD_ADDR_VAR 0 5
89946: PUSH
89947: EMPTY
89948: ST_TO_ADDR
// case d of 0 :
89949: LD_VAR 0 3
89953: PUSH
89954: LD_INT 0
89956: DOUBLE
89957: EQUAL
89958: IFTRUE 89962
89960: GO 90095
89962: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
89963: LD_ADDR_VAR 0 5
89967: PUSH
89968: LD_VAR 0 1
89972: PUSH
89973: LD_INT 4
89975: MINUS
89976: PUSH
89977: LD_VAR 0 2
89981: PUSH
89982: LD_INT 4
89984: MINUS
89985: PUSH
89986: LD_INT 2
89988: PUSH
89989: EMPTY
89990: LIST
89991: LIST
89992: LIST
89993: PUSH
89994: LD_VAR 0 1
89998: PUSH
89999: LD_INT 3
90001: MINUS
90002: PUSH
90003: LD_VAR 0 2
90007: PUSH
90008: LD_INT 1
90010: PUSH
90011: EMPTY
90012: LIST
90013: LIST
90014: LIST
90015: PUSH
90016: LD_VAR 0 1
90020: PUSH
90021: LD_INT 4
90023: PLUS
90024: PUSH
90025: LD_VAR 0 2
90029: PUSH
90030: LD_INT 4
90032: PUSH
90033: EMPTY
90034: LIST
90035: LIST
90036: LIST
90037: PUSH
90038: LD_VAR 0 1
90042: PUSH
90043: LD_INT 3
90045: PLUS
90046: PUSH
90047: LD_VAR 0 2
90051: PUSH
90052: LD_INT 3
90054: PLUS
90055: PUSH
90056: LD_INT 5
90058: PUSH
90059: EMPTY
90060: LIST
90061: LIST
90062: LIST
90063: PUSH
90064: LD_VAR 0 1
90068: PUSH
90069: LD_VAR 0 2
90073: PUSH
90074: LD_INT 4
90076: PLUS
90077: PUSH
90078: LD_INT 0
90080: PUSH
90081: EMPTY
90082: LIST
90083: LIST
90084: LIST
90085: PUSH
90086: EMPTY
90087: LIST
90088: LIST
90089: LIST
90090: LIST
90091: LIST
90092: ST_TO_ADDR
// end ; 1 :
90093: GO 90793
90095: LD_INT 1
90097: DOUBLE
90098: EQUAL
90099: IFTRUE 90103
90101: GO 90236
90103: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
90104: LD_ADDR_VAR 0 5
90108: PUSH
90109: LD_VAR 0 1
90113: PUSH
90114: LD_VAR 0 2
90118: PUSH
90119: LD_INT 4
90121: MINUS
90122: PUSH
90123: LD_INT 3
90125: PUSH
90126: EMPTY
90127: LIST
90128: LIST
90129: LIST
90130: PUSH
90131: LD_VAR 0 1
90135: PUSH
90136: LD_INT 3
90138: MINUS
90139: PUSH
90140: LD_VAR 0 2
90144: PUSH
90145: LD_INT 3
90147: MINUS
90148: PUSH
90149: LD_INT 2
90151: PUSH
90152: EMPTY
90153: LIST
90154: LIST
90155: LIST
90156: PUSH
90157: LD_VAR 0 1
90161: PUSH
90162: LD_INT 4
90164: MINUS
90165: PUSH
90166: LD_VAR 0 2
90170: PUSH
90171: LD_INT 1
90173: PUSH
90174: EMPTY
90175: LIST
90176: LIST
90177: LIST
90178: PUSH
90179: LD_VAR 0 1
90183: PUSH
90184: LD_VAR 0 2
90188: PUSH
90189: LD_INT 3
90191: PLUS
90192: PUSH
90193: LD_INT 0
90195: PUSH
90196: EMPTY
90197: LIST
90198: LIST
90199: LIST
90200: PUSH
90201: LD_VAR 0 1
90205: PUSH
90206: LD_INT 4
90208: PLUS
90209: PUSH
90210: LD_VAR 0 2
90214: PUSH
90215: LD_INT 4
90217: PLUS
90218: PUSH
90219: LD_INT 5
90221: PUSH
90222: EMPTY
90223: LIST
90224: LIST
90225: LIST
90226: PUSH
90227: EMPTY
90228: LIST
90229: LIST
90230: LIST
90231: LIST
90232: LIST
90233: ST_TO_ADDR
// end ; 2 :
90234: GO 90793
90236: LD_INT 2
90238: DOUBLE
90239: EQUAL
90240: IFTRUE 90244
90242: GO 90373
90244: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
90245: LD_ADDR_VAR 0 5
90249: PUSH
90250: LD_VAR 0 1
90254: PUSH
90255: LD_VAR 0 2
90259: PUSH
90260: LD_INT 3
90262: MINUS
90263: PUSH
90264: LD_INT 3
90266: PUSH
90267: EMPTY
90268: LIST
90269: LIST
90270: LIST
90271: PUSH
90272: LD_VAR 0 1
90276: PUSH
90277: LD_INT 4
90279: PLUS
90280: PUSH
90281: LD_VAR 0 2
90285: PUSH
90286: LD_INT 4
90288: PUSH
90289: EMPTY
90290: LIST
90291: LIST
90292: LIST
90293: PUSH
90294: LD_VAR 0 1
90298: PUSH
90299: LD_VAR 0 2
90303: PUSH
90304: LD_INT 4
90306: PLUS
90307: PUSH
90308: LD_INT 0
90310: PUSH
90311: EMPTY
90312: LIST
90313: LIST
90314: LIST
90315: PUSH
90316: LD_VAR 0 1
90320: PUSH
90321: LD_INT 3
90323: MINUS
90324: PUSH
90325: LD_VAR 0 2
90329: PUSH
90330: LD_INT 1
90332: PUSH
90333: EMPTY
90334: LIST
90335: LIST
90336: LIST
90337: PUSH
90338: LD_VAR 0 1
90342: PUSH
90343: LD_INT 4
90345: MINUS
90346: PUSH
90347: LD_VAR 0 2
90351: PUSH
90352: LD_INT 4
90354: MINUS
90355: PUSH
90356: LD_INT 2
90358: PUSH
90359: EMPTY
90360: LIST
90361: LIST
90362: LIST
90363: PUSH
90364: EMPTY
90365: LIST
90366: LIST
90367: LIST
90368: LIST
90369: LIST
90370: ST_TO_ADDR
// end ; 3 :
90371: GO 90793
90373: LD_INT 3
90375: DOUBLE
90376: EQUAL
90377: IFTRUE 90381
90379: GO 90514
90381: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
90382: LD_ADDR_VAR 0 5
90386: PUSH
90387: LD_VAR 0 1
90391: PUSH
90392: LD_INT 3
90394: PLUS
90395: PUSH
90396: LD_VAR 0 2
90400: PUSH
90401: LD_INT 4
90403: PUSH
90404: EMPTY
90405: LIST
90406: LIST
90407: LIST
90408: PUSH
90409: LD_VAR 0 1
90413: PUSH
90414: LD_INT 4
90416: PLUS
90417: PUSH
90418: LD_VAR 0 2
90422: PUSH
90423: LD_INT 4
90425: PLUS
90426: PUSH
90427: LD_INT 5
90429: PUSH
90430: EMPTY
90431: LIST
90432: LIST
90433: LIST
90434: PUSH
90435: LD_VAR 0 1
90439: PUSH
90440: LD_INT 4
90442: MINUS
90443: PUSH
90444: LD_VAR 0 2
90448: PUSH
90449: LD_INT 1
90451: PUSH
90452: EMPTY
90453: LIST
90454: LIST
90455: LIST
90456: PUSH
90457: LD_VAR 0 1
90461: PUSH
90462: LD_VAR 0 2
90466: PUSH
90467: LD_INT 4
90469: MINUS
90470: PUSH
90471: LD_INT 3
90473: PUSH
90474: EMPTY
90475: LIST
90476: LIST
90477: LIST
90478: PUSH
90479: LD_VAR 0 1
90483: PUSH
90484: LD_INT 3
90486: MINUS
90487: PUSH
90488: LD_VAR 0 2
90492: PUSH
90493: LD_INT 3
90495: MINUS
90496: PUSH
90497: LD_INT 2
90499: PUSH
90500: EMPTY
90501: LIST
90502: LIST
90503: LIST
90504: PUSH
90505: EMPTY
90506: LIST
90507: LIST
90508: LIST
90509: LIST
90510: LIST
90511: ST_TO_ADDR
// end ; 4 :
90512: GO 90793
90514: LD_INT 4
90516: DOUBLE
90517: EQUAL
90518: IFTRUE 90522
90520: GO 90655
90522: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
90523: LD_ADDR_VAR 0 5
90527: PUSH
90528: LD_VAR 0 1
90532: PUSH
90533: LD_VAR 0 2
90537: PUSH
90538: LD_INT 4
90540: PLUS
90541: PUSH
90542: LD_INT 0
90544: PUSH
90545: EMPTY
90546: LIST
90547: LIST
90548: LIST
90549: PUSH
90550: LD_VAR 0 1
90554: PUSH
90555: LD_INT 3
90557: PLUS
90558: PUSH
90559: LD_VAR 0 2
90563: PUSH
90564: LD_INT 3
90566: PLUS
90567: PUSH
90568: LD_INT 5
90570: PUSH
90571: EMPTY
90572: LIST
90573: LIST
90574: LIST
90575: PUSH
90576: LD_VAR 0 1
90580: PUSH
90581: LD_INT 4
90583: PLUS
90584: PUSH
90585: LD_VAR 0 2
90589: PUSH
90590: LD_INT 4
90592: PUSH
90593: EMPTY
90594: LIST
90595: LIST
90596: LIST
90597: PUSH
90598: LD_VAR 0 1
90602: PUSH
90603: LD_VAR 0 2
90607: PUSH
90608: LD_INT 3
90610: MINUS
90611: PUSH
90612: LD_INT 3
90614: PUSH
90615: EMPTY
90616: LIST
90617: LIST
90618: LIST
90619: PUSH
90620: LD_VAR 0 1
90624: PUSH
90625: LD_INT 4
90627: MINUS
90628: PUSH
90629: LD_VAR 0 2
90633: PUSH
90634: LD_INT 4
90636: MINUS
90637: PUSH
90638: LD_INT 2
90640: PUSH
90641: EMPTY
90642: LIST
90643: LIST
90644: LIST
90645: PUSH
90646: EMPTY
90647: LIST
90648: LIST
90649: LIST
90650: LIST
90651: LIST
90652: ST_TO_ADDR
// end ; 5 :
90653: GO 90793
90655: LD_INT 5
90657: DOUBLE
90658: EQUAL
90659: IFTRUE 90663
90661: GO 90792
90663: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
90664: LD_ADDR_VAR 0 5
90668: PUSH
90669: LD_VAR 0 1
90673: PUSH
90674: LD_INT 4
90676: MINUS
90677: PUSH
90678: LD_VAR 0 2
90682: PUSH
90683: LD_INT 1
90685: PUSH
90686: EMPTY
90687: LIST
90688: LIST
90689: LIST
90690: PUSH
90691: LD_VAR 0 1
90695: PUSH
90696: LD_VAR 0 2
90700: PUSH
90701: LD_INT 4
90703: MINUS
90704: PUSH
90705: LD_INT 3
90707: PUSH
90708: EMPTY
90709: LIST
90710: LIST
90711: LIST
90712: PUSH
90713: LD_VAR 0 1
90717: PUSH
90718: LD_INT 4
90720: PLUS
90721: PUSH
90722: LD_VAR 0 2
90726: PUSH
90727: LD_INT 4
90729: PLUS
90730: PUSH
90731: LD_INT 5
90733: PUSH
90734: EMPTY
90735: LIST
90736: LIST
90737: LIST
90738: PUSH
90739: LD_VAR 0 1
90743: PUSH
90744: LD_INT 3
90746: PLUS
90747: PUSH
90748: LD_VAR 0 2
90752: PUSH
90753: LD_INT 4
90755: PUSH
90756: EMPTY
90757: LIST
90758: LIST
90759: LIST
90760: PUSH
90761: LD_VAR 0 1
90765: PUSH
90766: LD_VAR 0 2
90770: PUSH
90771: LD_INT 3
90773: PLUS
90774: PUSH
90775: LD_INT 0
90777: PUSH
90778: EMPTY
90779: LIST
90780: LIST
90781: LIST
90782: PUSH
90783: EMPTY
90784: LIST
90785: LIST
90786: LIST
90787: LIST
90788: LIST
90789: ST_TO_ADDR
// end ; end ;
90790: GO 90793
90792: POP
// result := list ;
90793: LD_ADDR_VAR 0 4
90797: PUSH
90798: LD_VAR 0 5
90802: ST_TO_ADDR
// end ;
90803: LD_VAR 0 4
90807: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
90808: LD_INT 0
90810: PPUSH
90811: PPUSH
90812: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
90813: LD_VAR 0 1
90817: NOT
90818: PUSH
90819: LD_VAR 0 2
90823: PUSH
90824: LD_INT 1
90826: PUSH
90827: LD_INT 2
90829: PUSH
90830: LD_INT 3
90832: PUSH
90833: LD_INT 4
90835: PUSH
90836: EMPTY
90837: LIST
90838: LIST
90839: LIST
90840: LIST
90841: IN
90842: NOT
90843: OR
90844: IFFALSE 90848
// exit ;
90846: GO 90931
// tmp := [ ] ;
90848: LD_ADDR_VAR 0 5
90852: PUSH
90853: EMPTY
90854: ST_TO_ADDR
// for i in units do
90855: LD_ADDR_VAR 0 4
90859: PUSH
90860: LD_VAR 0 1
90864: PUSH
90865: FOR_IN
90866: IFFALSE 90900
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
90868: LD_ADDR_VAR 0 5
90872: PUSH
90873: LD_VAR 0 5
90877: PPUSH
90878: LD_VAR 0 4
90882: PPUSH
90883: LD_VAR 0 2
90887: PPUSH
90888: CALL_OW 259
90892: PPUSH
90893: CALL 92304 0 2
90897: ST_TO_ADDR
90898: GO 90865
90900: POP
90901: POP
// if not tmp then
90902: LD_VAR 0 5
90906: NOT
90907: IFFALSE 90911
// exit ;
90909: GO 90931
// result := SortListByListDesc ( units , tmp ) ;
90911: LD_ADDR_VAR 0 3
90915: PUSH
90916: LD_VAR 0 1
90920: PPUSH
90921: LD_VAR 0 5
90925: PPUSH
90926: CALL_OW 77
90930: ST_TO_ADDR
// end ;
90931: LD_VAR 0 3
90935: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
90936: LD_INT 0
90938: PPUSH
90939: PPUSH
90940: PPUSH
// result := false ;
90941: LD_ADDR_VAR 0 3
90945: PUSH
90946: LD_INT 0
90948: ST_TO_ADDR
// if not building then
90949: LD_VAR 0 2
90953: NOT
90954: IFFALSE 90958
// exit ;
90956: GO 91096
// x := GetX ( building ) ;
90958: LD_ADDR_VAR 0 4
90962: PUSH
90963: LD_VAR 0 2
90967: PPUSH
90968: CALL_OW 250
90972: ST_TO_ADDR
// y := GetY ( building ) ;
90973: LD_ADDR_VAR 0 5
90977: PUSH
90978: LD_VAR 0 2
90982: PPUSH
90983: CALL_OW 251
90987: ST_TO_ADDR
// if not x or not y then
90988: LD_VAR 0 4
90992: NOT
90993: PUSH
90994: LD_VAR 0 5
90998: NOT
90999: OR
91000: IFFALSE 91004
// exit ;
91002: GO 91096
// if GetTaskList ( unit ) then
91004: LD_VAR 0 1
91008: PPUSH
91009: CALL_OW 437
91013: IFFALSE 91096
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
91015: LD_STRING e
91017: PUSH
91018: LD_VAR 0 1
91022: PPUSH
91023: CALL_OW 437
91027: PUSH
91028: LD_INT 1
91030: ARRAY
91031: PUSH
91032: LD_INT 1
91034: ARRAY
91035: EQUAL
91036: PUSH
91037: LD_VAR 0 4
91041: PUSH
91042: LD_VAR 0 1
91046: PPUSH
91047: CALL_OW 437
91051: PUSH
91052: LD_INT 1
91054: ARRAY
91055: PUSH
91056: LD_INT 2
91058: ARRAY
91059: EQUAL
91060: AND
91061: PUSH
91062: LD_VAR 0 5
91066: PUSH
91067: LD_VAR 0 1
91071: PPUSH
91072: CALL_OW 437
91076: PUSH
91077: LD_INT 1
91079: ARRAY
91080: PUSH
91081: LD_INT 3
91083: ARRAY
91084: EQUAL
91085: AND
91086: IFFALSE 91096
// result := true end ;
91088: LD_ADDR_VAR 0 3
91092: PUSH
91093: LD_INT 1
91095: ST_TO_ADDR
// end ;
91096: LD_VAR 0 3
91100: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
91101: LD_INT 0
91103: PPUSH
// result := false ;
91104: LD_ADDR_VAR 0 4
91108: PUSH
91109: LD_INT 0
91111: ST_TO_ADDR
// if GetTaskList ( unit ) then
91112: LD_VAR 0 1
91116: PPUSH
91117: CALL_OW 437
91121: IFFALSE 91204
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
91123: LD_STRING M
91125: PUSH
91126: LD_VAR 0 1
91130: PPUSH
91131: CALL_OW 437
91135: PUSH
91136: LD_INT 1
91138: ARRAY
91139: PUSH
91140: LD_INT 1
91142: ARRAY
91143: EQUAL
91144: PUSH
91145: LD_VAR 0 2
91149: PUSH
91150: LD_VAR 0 1
91154: PPUSH
91155: CALL_OW 437
91159: PUSH
91160: LD_INT 1
91162: ARRAY
91163: PUSH
91164: LD_INT 2
91166: ARRAY
91167: EQUAL
91168: AND
91169: PUSH
91170: LD_VAR 0 3
91174: PUSH
91175: LD_VAR 0 1
91179: PPUSH
91180: CALL_OW 437
91184: PUSH
91185: LD_INT 1
91187: ARRAY
91188: PUSH
91189: LD_INT 3
91191: ARRAY
91192: EQUAL
91193: AND
91194: IFFALSE 91204
// result := true ;
91196: LD_ADDR_VAR 0 4
91200: PUSH
91201: LD_INT 1
91203: ST_TO_ADDR
// end ; end ;
91204: LD_VAR 0 4
91208: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
91209: LD_INT 0
91211: PPUSH
91212: PPUSH
91213: PPUSH
91214: PPUSH
// if not unit or not area then
91215: LD_VAR 0 1
91219: NOT
91220: PUSH
91221: LD_VAR 0 2
91225: NOT
91226: OR
91227: IFFALSE 91231
// exit ;
91229: GO 91407
// tmp := AreaToList ( area , i ) ;
91231: LD_ADDR_VAR 0 6
91235: PUSH
91236: LD_VAR 0 2
91240: PPUSH
91241: LD_VAR 0 5
91245: PPUSH
91246: CALL_OW 517
91250: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
91251: LD_ADDR_VAR 0 5
91255: PUSH
91256: DOUBLE
91257: LD_INT 1
91259: DEC
91260: ST_TO_ADDR
91261: LD_VAR 0 6
91265: PUSH
91266: LD_INT 1
91268: ARRAY
91269: PUSH
91270: FOR_TO
91271: IFFALSE 91405
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
91273: LD_ADDR_VAR 0 7
91277: PUSH
91278: LD_VAR 0 6
91282: PUSH
91283: LD_INT 1
91285: ARRAY
91286: PUSH
91287: LD_VAR 0 5
91291: ARRAY
91292: PUSH
91293: LD_VAR 0 6
91297: PUSH
91298: LD_INT 2
91300: ARRAY
91301: PUSH
91302: LD_VAR 0 5
91306: ARRAY
91307: PUSH
91308: EMPTY
91309: LIST
91310: LIST
91311: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
91312: LD_INT 92
91314: PUSH
91315: LD_VAR 0 7
91319: PUSH
91320: LD_INT 1
91322: ARRAY
91323: PUSH
91324: LD_VAR 0 7
91328: PUSH
91329: LD_INT 2
91331: ARRAY
91332: PUSH
91333: LD_INT 2
91335: PUSH
91336: EMPTY
91337: LIST
91338: LIST
91339: LIST
91340: LIST
91341: PPUSH
91342: CALL_OW 69
91346: PUSH
91347: LD_INT 0
91349: EQUAL
91350: IFFALSE 91403
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
91352: LD_VAR 0 1
91356: PPUSH
91357: LD_VAR 0 7
91361: PUSH
91362: LD_INT 1
91364: ARRAY
91365: PPUSH
91366: LD_VAR 0 7
91370: PUSH
91371: LD_INT 2
91373: ARRAY
91374: PPUSH
91375: LD_VAR 0 3
91379: PPUSH
91380: CALL_OW 48
// result := IsPlaced ( unit ) ;
91384: LD_ADDR_VAR 0 4
91388: PUSH
91389: LD_VAR 0 1
91393: PPUSH
91394: CALL_OW 305
91398: ST_TO_ADDR
// exit ;
91399: POP
91400: POP
91401: GO 91407
// end ; end ;
91403: GO 91270
91405: POP
91406: POP
// end ;
91407: LD_VAR 0 4
91411: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
91412: LD_INT 0
91414: PPUSH
91415: PPUSH
91416: PPUSH
// if not side or side > 8 then
91417: LD_VAR 0 1
91421: NOT
91422: PUSH
91423: LD_VAR 0 1
91427: PUSH
91428: LD_INT 8
91430: GREATER
91431: OR
91432: IFFALSE 91436
// exit ;
91434: GO 91623
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
91436: LD_ADDR_VAR 0 4
91440: PUSH
91441: LD_INT 22
91443: PUSH
91444: LD_VAR 0 1
91448: PUSH
91449: EMPTY
91450: LIST
91451: LIST
91452: PUSH
91453: LD_INT 21
91455: PUSH
91456: LD_INT 3
91458: PUSH
91459: EMPTY
91460: LIST
91461: LIST
91462: PUSH
91463: EMPTY
91464: LIST
91465: LIST
91466: PPUSH
91467: CALL_OW 69
91471: ST_TO_ADDR
// if not tmp then
91472: LD_VAR 0 4
91476: NOT
91477: IFFALSE 91481
// exit ;
91479: GO 91623
// enable_addtolog := true ;
91481: LD_ADDR_OWVAR 81
91485: PUSH
91486: LD_INT 1
91488: ST_TO_ADDR
// AddToLog ( [ ) ;
91489: LD_STRING [
91491: PPUSH
91492: CALL_OW 561
// for i in tmp do
91496: LD_ADDR_VAR 0 3
91500: PUSH
91501: LD_VAR 0 4
91505: PUSH
91506: FOR_IN
91507: IFFALSE 91614
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
91509: LD_STRING [
91511: PUSH
91512: LD_VAR 0 3
91516: PPUSH
91517: CALL_OW 266
91521: STR
91522: PUSH
91523: LD_STRING , 
91525: STR
91526: PUSH
91527: LD_VAR 0 3
91531: PPUSH
91532: CALL_OW 250
91536: STR
91537: PUSH
91538: LD_STRING , 
91540: STR
91541: PUSH
91542: LD_VAR 0 3
91546: PPUSH
91547: CALL_OW 251
91551: STR
91552: PUSH
91553: LD_STRING , 
91555: STR
91556: PUSH
91557: LD_VAR 0 3
91561: PPUSH
91562: CALL_OW 254
91566: STR
91567: PUSH
91568: LD_STRING , 
91570: STR
91571: PUSH
91572: LD_VAR 0 3
91576: PPUSH
91577: LD_INT 1
91579: PPUSH
91580: CALL_OW 268
91584: STR
91585: PUSH
91586: LD_STRING , 
91588: STR
91589: PUSH
91590: LD_VAR 0 3
91594: PPUSH
91595: LD_INT 2
91597: PPUSH
91598: CALL_OW 268
91602: STR
91603: PUSH
91604: LD_STRING ],
91606: STR
91607: PPUSH
91608: CALL_OW 561
// end ;
91612: GO 91506
91614: POP
91615: POP
// AddToLog ( ]; ) ;
91616: LD_STRING ];
91618: PPUSH
91619: CALL_OW 561
// end ;
91623: LD_VAR 0 2
91627: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
91628: LD_INT 0
91630: PPUSH
91631: PPUSH
91632: PPUSH
91633: PPUSH
91634: PPUSH
// if not area or not rate or not max then
91635: LD_VAR 0 1
91639: NOT
91640: PUSH
91641: LD_VAR 0 2
91645: NOT
91646: OR
91647: PUSH
91648: LD_VAR 0 4
91652: NOT
91653: OR
91654: IFFALSE 91658
// exit ;
91656: GO 91847
// while 1 do
91658: LD_INT 1
91660: IFFALSE 91847
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
91662: LD_ADDR_VAR 0 9
91666: PUSH
91667: LD_VAR 0 1
91671: PPUSH
91672: LD_INT 1
91674: PPUSH
91675: CALL_OW 287
91679: PUSH
91680: LD_INT 10
91682: MUL
91683: ST_TO_ADDR
// r := rate / 10 ;
91684: LD_ADDR_VAR 0 7
91688: PUSH
91689: LD_VAR 0 2
91693: PUSH
91694: LD_INT 10
91696: DIVREAL
91697: ST_TO_ADDR
// time := 1 1$00 ;
91698: LD_ADDR_VAR 0 8
91702: PUSH
91703: LD_INT 2100
91705: ST_TO_ADDR
// if amount < min then
91706: LD_VAR 0 9
91710: PUSH
91711: LD_VAR 0 3
91715: LESS
91716: IFFALSE 91734
// r := r * 2 else
91718: LD_ADDR_VAR 0 7
91722: PUSH
91723: LD_VAR 0 7
91727: PUSH
91728: LD_INT 2
91730: MUL
91731: ST_TO_ADDR
91732: GO 91760
// if amount > max then
91734: LD_VAR 0 9
91738: PUSH
91739: LD_VAR 0 4
91743: GREATER
91744: IFFALSE 91760
// r := r / 2 ;
91746: LD_ADDR_VAR 0 7
91750: PUSH
91751: LD_VAR 0 7
91755: PUSH
91756: LD_INT 2
91758: DIVREAL
91759: ST_TO_ADDR
// time := time / r ;
91760: LD_ADDR_VAR 0 8
91764: PUSH
91765: LD_VAR 0 8
91769: PUSH
91770: LD_VAR 0 7
91774: DIVREAL
91775: ST_TO_ADDR
// if time < 0 then
91776: LD_VAR 0 8
91780: PUSH
91781: LD_INT 0
91783: LESS
91784: IFFALSE 91801
// time := time * - 1 ;
91786: LD_ADDR_VAR 0 8
91790: PUSH
91791: LD_VAR 0 8
91795: PUSH
91796: LD_INT 1
91798: NEG
91799: MUL
91800: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
91801: LD_VAR 0 8
91805: PUSH
91806: LD_INT 35
91808: PPUSH
91809: LD_INT 875
91811: PPUSH
91812: CALL_OW 12
91816: PLUS
91817: PPUSH
91818: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
91822: LD_INT 1
91824: PPUSH
91825: LD_INT 5
91827: PPUSH
91828: CALL_OW 12
91832: PPUSH
91833: LD_VAR 0 1
91837: PPUSH
91838: LD_INT 1
91840: PPUSH
91841: CALL_OW 55
// end ;
91845: GO 91658
// end ;
91847: LD_VAR 0 5
91851: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
91852: LD_INT 0
91854: PPUSH
91855: PPUSH
91856: PPUSH
91857: PPUSH
91858: PPUSH
91859: PPUSH
91860: PPUSH
91861: PPUSH
// if not turrets or not factories then
91862: LD_VAR 0 1
91866: NOT
91867: PUSH
91868: LD_VAR 0 2
91872: NOT
91873: OR
91874: IFFALSE 91878
// exit ;
91876: GO 92185
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
91878: LD_ADDR_VAR 0 10
91882: PUSH
91883: LD_INT 5
91885: PUSH
91886: LD_INT 6
91888: PUSH
91889: EMPTY
91890: LIST
91891: LIST
91892: PUSH
91893: LD_INT 2
91895: PUSH
91896: LD_INT 4
91898: PUSH
91899: EMPTY
91900: LIST
91901: LIST
91902: PUSH
91903: LD_INT 3
91905: PUSH
91906: LD_INT 5
91908: PUSH
91909: EMPTY
91910: LIST
91911: LIST
91912: PUSH
91913: EMPTY
91914: LIST
91915: LIST
91916: LIST
91917: PUSH
91918: LD_INT 24
91920: PUSH
91921: LD_INT 25
91923: PUSH
91924: EMPTY
91925: LIST
91926: LIST
91927: PUSH
91928: LD_INT 23
91930: PUSH
91931: LD_INT 27
91933: PUSH
91934: EMPTY
91935: LIST
91936: LIST
91937: PUSH
91938: EMPTY
91939: LIST
91940: LIST
91941: PUSH
91942: LD_INT 42
91944: PUSH
91945: LD_INT 43
91947: PUSH
91948: EMPTY
91949: LIST
91950: LIST
91951: PUSH
91952: LD_INT 44
91954: PUSH
91955: LD_INT 46
91957: PUSH
91958: EMPTY
91959: LIST
91960: LIST
91961: PUSH
91962: LD_INT 45
91964: PUSH
91965: LD_INT 47
91967: PUSH
91968: EMPTY
91969: LIST
91970: LIST
91971: PUSH
91972: EMPTY
91973: LIST
91974: LIST
91975: LIST
91976: PUSH
91977: EMPTY
91978: LIST
91979: LIST
91980: LIST
91981: ST_TO_ADDR
// result := [ ] ;
91982: LD_ADDR_VAR 0 3
91986: PUSH
91987: EMPTY
91988: ST_TO_ADDR
// for i in turrets do
91989: LD_ADDR_VAR 0 4
91993: PUSH
91994: LD_VAR 0 1
91998: PUSH
91999: FOR_IN
92000: IFFALSE 92183
// begin nat := GetNation ( i ) ;
92002: LD_ADDR_VAR 0 7
92006: PUSH
92007: LD_VAR 0 4
92011: PPUSH
92012: CALL_OW 248
92016: ST_TO_ADDR
// weapon := 0 ;
92017: LD_ADDR_VAR 0 8
92021: PUSH
92022: LD_INT 0
92024: ST_TO_ADDR
// if not nat then
92025: LD_VAR 0 7
92029: NOT
92030: IFFALSE 92034
// continue ;
92032: GO 91999
// for j in list [ nat ] do
92034: LD_ADDR_VAR 0 5
92038: PUSH
92039: LD_VAR 0 10
92043: PUSH
92044: LD_VAR 0 7
92048: ARRAY
92049: PUSH
92050: FOR_IN
92051: IFFALSE 92092
// if GetBWeapon ( i ) = j [ 1 ] then
92053: LD_VAR 0 4
92057: PPUSH
92058: CALL_OW 269
92062: PUSH
92063: LD_VAR 0 5
92067: PUSH
92068: LD_INT 1
92070: ARRAY
92071: EQUAL
92072: IFFALSE 92090
// begin weapon := j [ 2 ] ;
92074: LD_ADDR_VAR 0 8
92078: PUSH
92079: LD_VAR 0 5
92083: PUSH
92084: LD_INT 2
92086: ARRAY
92087: ST_TO_ADDR
// break ;
92088: GO 92092
// end ;
92090: GO 92050
92092: POP
92093: POP
// if not weapon then
92094: LD_VAR 0 8
92098: NOT
92099: IFFALSE 92103
// continue ;
92101: GO 91999
// for k in factories do
92103: LD_ADDR_VAR 0 6
92107: PUSH
92108: LD_VAR 0 2
92112: PUSH
92113: FOR_IN
92114: IFFALSE 92179
// begin weapons := AvailableWeaponList ( k ) ;
92116: LD_ADDR_VAR 0 9
92120: PUSH
92121: LD_VAR 0 6
92125: PPUSH
92126: CALL_OW 478
92130: ST_TO_ADDR
// if not weapons then
92131: LD_VAR 0 9
92135: NOT
92136: IFFALSE 92140
// continue ;
92138: GO 92113
// if weapon in weapons then
92140: LD_VAR 0 8
92144: PUSH
92145: LD_VAR 0 9
92149: IN
92150: IFFALSE 92177
// begin result := [ i , weapon ] ;
92152: LD_ADDR_VAR 0 3
92156: PUSH
92157: LD_VAR 0 4
92161: PUSH
92162: LD_VAR 0 8
92166: PUSH
92167: EMPTY
92168: LIST
92169: LIST
92170: ST_TO_ADDR
// exit ;
92171: POP
92172: POP
92173: POP
92174: POP
92175: GO 92185
// end ; end ;
92177: GO 92113
92179: POP
92180: POP
// end ;
92181: GO 91999
92183: POP
92184: POP
// end ;
92185: LD_VAR 0 3
92189: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
92190: LD_INT 0
92192: PPUSH
// if not side or side > 8 then
92193: LD_VAR 0 3
92197: NOT
92198: PUSH
92199: LD_VAR 0 3
92203: PUSH
92204: LD_INT 8
92206: GREATER
92207: OR
92208: IFFALSE 92212
// exit ;
92210: GO 92271
// if not range then
92212: LD_VAR 0 4
92216: NOT
92217: IFFALSE 92228
// range := - 12 ;
92219: LD_ADDR_VAR 0 4
92223: PUSH
92224: LD_INT 12
92226: NEG
92227: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
92228: LD_VAR 0 1
92232: PPUSH
92233: LD_VAR 0 2
92237: PPUSH
92238: LD_VAR 0 3
92242: PPUSH
92243: LD_VAR 0 4
92247: PPUSH
92248: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
92252: LD_VAR 0 1
92256: PPUSH
92257: LD_VAR 0 2
92261: PPUSH
92262: LD_VAR 0 3
92266: PPUSH
92267: CALL_OW 331
// end ;
92271: LD_VAR 0 5
92275: RET
// export function Video ( mode ) ; begin
92276: LD_INT 0
92278: PPUSH
// ingame_video = mode ;
92279: LD_ADDR_OWVAR 52
92283: PUSH
92284: LD_VAR 0 1
92288: ST_TO_ADDR
// interface_hidden = mode ;
92289: LD_ADDR_OWVAR 54
92293: PUSH
92294: LD_VAR 0 1
92298: ST_TO_ADDR
// end ;
92299: LD_VAR 0 2
92303: RET
// export function Join ( array , element ) ; begin
92304: LD_INT 0
92306: PPUSH
// result := Replace ( array , array + 1 , element ) ;
92307: LD_ADDR_VAR 0 3
92311: PUSH
92312: LD_VAR 0 1
92316: PPUSH
92317: LD_VAR 0 1
92321: PUSH
92322: LD_INT 1
92324: PLUS
92325: PPUSH
92326: LD_VAR 0 2
92330: PPUSH
92331: CALL_OW 1
92335: ST_TO_ADDR
// end ;
92336: LD_VAR 0 3
92340: RET
// export function JoinUnion ( array , element ) ; begin
92341: LD_INT 0
92343: PPUSH
// result := array union element ;
92344: LD_ADDR_VAR 0 3
92348: PUSH
92349: LD_VAR 0 1
92353: PUSH
92354: LD_VAR 0 2
92358: UNION
92359: ST_TO_ADDR
// end ;
92360: LD_VAR 0 3
92364: RET
// export function GetBehemoths ( side ) ; begin
92365: LD_INT 0
92367: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
92368: LD_ADDR_VAR 0 2
92372: PUSH
92373: LD_INT 22
92375: PUSH
92376: LD_VAR 0 1
92380: PUSH
92381: EMPTY
92382: LIST
92383: LIST
92384: PUSH
92385: LD_INT 31
92387: PUSH
92388: LD_INT 25
92390: PUSH
92391: EMPTY
92392: LIST
92393: LIST
92394: PUSH
92395: EMPTY
92396: LIST
92397: LIST
92398: PPUSH
92399: CALL_OW 69
92403: ST_TO_ADDR
// end ;
92404: LD_VAR 0 2
92408: RET
// export function Shuffle ( array ) ; var i , index ; begin
92409: LD_INT 0
92411: PPUSH
92412: PPUSH
92413: PPUSH
// result := [ ] ;
92414: LD_ADDR_VAR 0 2
92418: PUSH
92419: EMPTY
92420: ST_TO_ADDR
// if not array then
92421: LD_VAR 0 1
92425: NOT
92426: IFFALSE 92430
// exit ;
92428: GO 92529
// Randomize ;
92430: CALL_OW 10
// for i = array downto 1 do
92434: LD_ADDR_VAR 0 3
92438: PUSH
92439: DOUBLE
92440: LD_VAR 0 1
92444: INC
92445: ST_TO_ADDR
92446: LD_INT 1
92448: PUSH
92449: FOR_DOWNTO
92450: IFFALSE 92527
// begin index := rand ( 1 , array ) ;
92452: LD_ADDR_VAR 0 4
92456: PUSH
92457: LD_INT 1
92459: PPUSH
92460: LD_VAR 0 1
92464: PPUSH
92465: CALL_OW 12
92469: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
92470: LD_ADDR_VAR 0 2
92474: PUSH
92475: LD_VAR 0 2
92479: PPUSH
92480: LD_VAR 0 2
92484: PUSH
92485: LD_INT 1
92487: PLUS
92488: PPUSH
92489: LD_VAR 0 1
92493: PUSH
92494: LD_VAR 0 4
92498: ARRAY
92499: PPUSH
92500: CALL_OW 2
92504: ST_TO_ADDR
// array := Delete ( array , index ) ;
92505: LD_ADDR_VAR 0 1
92509: PUSH
92510: LD_VAR 0 1
92514: PPUSH
92515: LD_VAR 0 4
92519: PPUSH
92520: CALL_OW 3
92524: ST_TO_ADDR
// end ;
92525: GO 92449
92527: POP
92528: POP
// end ;
92529: LD_VAR 0 2
92533: RET
// export function GetBaseMaterials ( base ) ; begin
92534: LD_INT 0
92536: PPUSH
// result := [ 0 , 0 , 0 ] ;
92537: LD_ADDR_VAR 0 2
92541: PUSH
92542: LD_INT 0
92544: PUSH
92545: LD_INT 0
92547: PUSH
92548: LD_INT 0
92550: PUSH
92551: EMPTY
92552: LIST
92553: LIST
92554: LIST
92555: ST_TO_ADDR
// if not base then
92556: LD_VAR 0 1
92560: NOT
92561: IFFALSE 92565
// exit ;
92563: GO 92614
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
92565: LD_ADDR_VAR 0 2
92569: PUSH
92570: LD_VAR 0 1
92574: PPUSH
92575: LD_INT 1
92577: PPUSH
92578: CALL_OW 275
92582: PUSH
92583: LD_VAR 0 1
92587: PPUSH
92588: LD_INT 2
92590: PPUSH
92591: CALL_OW 275
92595: PUSH
92596: LD_VAR 0 1
92600: PPUSH
92601: LD_INT 3
92603: PPUSH
92604: CALL_OW 275
92608: PUSH
92609: EMPTY
92610: LIST
92611: LIST
92612: LIST
92613: ST_TO_ADDR
// end ;
92614: LD_VAR 0 2
92618: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
92619: LD_INT 0
92621: PPUSH
92622: PPUSH
// result := array ;
92623: LD_ADDR_VAR 0 3
92627: PUSH
92628: LD_VAR 0 1
92632: ST_TO_ADDR
// if size >= result then
92633: LD_VAR 0 2
92637: PUSH
92638: LD_VAR 0 3
92642: GREATEREQUAL
92643: IFFALSE 92647
// exit ;
92645: GO 92697
// if size then
92647: LD_VAR 0 2
92651: IFFALSE 92697
// for i := array downto size do
92653: LD_ADDR_VAR 0 4
92657: PUSH
92658: DOUBLE
92659: LD_VAR 0 1
92663: INC
92664: ST_TO_ADDR
92665: LD_VAR 0 2
92669: PUSH
92670: FOR_DOWNTO
92671: IFFALSE 92695
// result := Delete ( result , result ) ;
92673: LD_ADDR_VAR 0 3
92677: PUSH
92678: LD_VAR 0 3
92682: PPUSH
92683: LD_VAR 0 3
92687: PPUSH
92688: CALL_OW 3
92692: ST_TO_ADDR
92693: GO 92670
92695: POP
92696: POP
// end ;
92697: LD_VAR 0 3
92701: RET
// export function ComExit ( unit ) ; var tmp ; begin
92702: LD_INT 0
92704: PPUSH
92705: PPUSH
// if not IsInUnit ( unit ) then
92706: LD_VAR 0 1
92710: PPUSH
92711: CALL_OW 310
92715: NOT
92716: IFFALSE 92720
// exit ;
92718: GO 92780
// tmp := IsInUnit ( unit ) ;
92720: LD_ADDR_VAR 0 3
92724: PUSH
92725: LD_VAR 0 1
92729: PPUSH
92730: CALL_OW 310
92734: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
92735: LD_VAR 0 3
92739: PPUSH
92740: CALL_OW 247
92744: PUSH
92745: LD_INT 2
92747: EQUAL
92748: IFFALSE 92761
// ComExitVehicle ( unit ) else
92750: LD_VAR 0 1
92754: PPUSH
92755: CALL_OW 121
92759: GO 92770
// ComExitBuilding ( unit ) ;
92761: LD_VAR 0 1
92765: PPUSH
92766: CALL_OW 122
// result := tmp ;
92770: LD_ADDR_VAR 0 2
92774: PUSH
92775: LD_VAR 0 3
92779: ST_TO_ADDR
// end ;
92780: LD_VAR 0 2
92784: RET
// export function ComExitAll ( units ) ; var i ; begin
92785: LD_INT 0
92787: PPUSH
92788: PPUSH
// if not units then
92789: LD_VAR 0 1
92793: NOT
92794: IFFALSE 92798
// exit ;
92796: GO 92824
// for i in units do
92798: LD_ADDR_VAR 0 3
92802: PUSH
92803: LD_VAR 0 1
92807: PUSH
92808: FOR_IN
92809: IFFALSE 92822
// ComExit ( i ) ;
92811: LD_VAR 0 3
92815: PPUSH
92816: CALL 92702 0 1
92820: GO 92808
92822: POP
92823: POP
// end ;
92824: LD_VAR 0 2
92828: RET
// export function ResetHc ; begin
92829: LD_INT 0
92831: PPUSH
// InitHc ;
92832: CALL_OW 19
// hc_importance := 0 ;
92836: LD_ADDR_OWVAR 32
92840: PUSH
92841: LD_INT 0
92843: ST_TO_ADDR
// end ;
92844: LD_VAR 0 1
92848: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
92849: LD_INT 0
92851: PPUSH
92852: PPUSH
92853: PPUSH
// _x := ( x1 + x2 ) div 2 ;
92854: LD_ADDR_VAR 0 6
92858: PUSH
92859: LD_VAR 0 1
92863: PUSH
92864: LD_VAR 0 3
92868: PLUS
92869: PUSH
92870: LD_INT 2
92872: DIV
92873: ST_TO_ADDR
// if _x < 0 then
92874: LD_VAR 0 6
92878: PUSH
92879: LD_INT 0
92881: LESS
92882: IFFALSE 92899
// _x := _x * - 1 ;
92884: LD_ADDR_VAR 0 6
92888: PUSH
92889: LD_VAR 0 6
92893: PUSH
92894: LD_INT 1
92896: NEG
92897: MUL
92898: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
92899: LD_ADDR_VAR 0 7
92903: PUSH
92904: LD_VAR 0 2
92908: PUSH
92909: LD_VAR 0 4
92913: PLUS
92914: PUSH
92915: LD_INT 2
92917: DIV
92918: ST_TO_ADDR
// if _y < 0 then
92919: LD_VAR 0 7
92923: PUSH
92924: LD_INT 0
92926: LESS
92927: IFFALSE 92944
// _y := _y * - 1 ;
92929: LD_ADDR_VAR 0 7
92933: PUSH
92934: LD_VAR 0 7
92938: PUSH
92939: LD_INT 1
92941: NEG
92942: MUL
92943: ST_TO_ADDR
// result := [ _x , _y ] ;
92944: LD_ADDR_VAR 0 5
92948: PUSH
92949: LD_VAR 0 6
92953: PUSH
92954: LD_VAR 0 7
92958: PUSH
92959: EMPTY
92960: LIST
92961: LIST
92962: ST_TO_ADDR
// end ;
92963: LD_VAR 0 5
92967: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
92968: LD_INT 0
92970: PPUSH
92971: PPUSH
92972: PPUSH
92973: PPUSH
// task := GetTaskList ( unit ) ;
92974: LD_ADDR_VAR 0 7
92978: PUSH
92979: LD_VAR 0 1
92983: PPUSH
92984: CALL_OW 437
92988: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
92989: LD_VAR 0 7
92993: NOT
92994: PUSH
92995: LD_VAR 0 1
92999: PPUSH
93000: LD_VAR 0 2
93004: PPUSH
93005: CALL_OW 308
93009: NOT
93010: AND
93011: IFFALSE 93015
// exit ;
93013: GO 93133
// if IsInArea ( unit , area ) then
93015: LD_VAR 0 1
93019: PPUSH
93020: LD_VAR 0 2
93024: PPUSH
93025: CALL_OW 308
93029: IFFALSE 93047
// begin ComMoveToArea ( unit , goAway ) ;
93031: LD_VAR 0 1
93035: PPUSH
93036: LD_VAR 0 3
93040: PPUSH
93041: CALL_OW 113
// exit ;
93045: GO 93133
// end ; if task [ 1 ] [ 1 ] <> M then
93047: LD_VAR 0 7
93051: PUSH
93052: LD_INT 1
93054: ARRAY
93055: PUSH
93056: LD_INT 1
93058: ARRAY
93059: PUSH
93060: LD_STRING M
93062: NONEQUAL
93063: IFFALSE 93067
// exit ;
93065: GO 93133
// x := task [ 1 ] [ 2 ] ;
93067: LD_ADDR_VAR 0 5
93071: PUSH
93072: LD_VAR 0 7
93076: PUSH
93077: LD_INT 1
93079: ARRAY
93080: PUSH
93081: LD_INT 2
93083: ARRAY
93084: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
93085: LD_ADDR_VAR 0 6
93089: PUSH
93090: LD_VAR 0 7
93094: PUSH
93095: LD_INT 1
93097: ARRAY
93098: PUSH
93099: LD_INT 3
93101: ARRAY
93102: ST_TO_ADDR
// if InArea ( x , y , area ) then
93103: LD_VAR 0 5
93107: PPUSH
93108: LD_VAR 0 6
93112: PPUSH
93113: LD_VAR 0 2
93117: PPUSH
93118: CALL_OW 309
93122: IFFALSE 93133
// ComStop ( unit ) ;
93124: LD_VAR 0 1
93128: PPUSH
93129: CALL_OW 141
// end ;
93133: LD_VAR 0 4
93137: RET
// export function Abs ( value ) ; begin
93138: LD_INT 0
93140: PPUSH
// result := value ;
93141: LD_ADDR_VAR 0 2
93145: PUSH
93146: LD_VAR 0 1
93150: ST_TO_ADDR
// if value < 0 then
93151: LD_VAR 0 1
93155: PUSH
93156: LD_INT 0
93158: LESS
93159: IFFALSE 93176
// result := value * - 1 ;
93161: LD_ADDR_VAR 0 2
93165: PUSH
93166: LD_VAR 0 1
93170: PUSH
93171: LD_INT 1
93173: NEG
93174: MUL
93175: ST_TO_ADDR
// end ;
93176: LD_VAR 0 2
93180: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
93181: LD_INT 0
93183: PPUSH
93184: PPUSH
93185: PPUSH
93186: PPUSH
93187: PPUSH
93188: PPUSH
93189: PPUSH
93190: PPUSH
// if not unit or not building then
93191: LD_VAR 0 1
93195: NOT
93196: PUSH
93197: LD_VAR 0 2
93201: NOT
93202: OR
93203: IFFALSE 93207
// exit ;
93205: GO 93433
// x := GetX ( building ) ;
93207: LD_ADDR_VAR 0 4
93211: PUSH
93212: LD_VAR 0 2
93216: PPUSH
93217: CALL_OW 250
93221: ST_TO_ADDR
// y := GetY ( building ) ;
93222: LD_ADDR_VAR 0 6
93226: PUSH
93227: LD_VAR 0 2
93231: PPUSH
93232: CALL_OW 251
93236: ST_TO_ADDR
// d := GetDir ( building ) ;
93237: LD_ADDR_VAR 0 8
93241: PUSH
93242: LD_VAR 0 2
93246: PPUSH
93247: CALL_OW 254
93251: ST_TO_ADDR
// r := 4 ;
93252: LD_ADDR_VAR 0 9
93256: PUSH
93257: LD_INT 4
93259: ST_TO_ADDR
// for i := 1 to 5 do
93260: LD_ADDR_VAR 0 10
93264: PUSH
93265: DOUBLE
93266: LD_INT 1
93268: DEC
93269: ST_TO_ADDR
93270: LD_INT 5
93272: PUSH
93273: FOR_TO
93274: IFFALSE 93431
// begin _x := ShiftX ( x , d , r + i ) ;
93276: LD_ADDR_VAR 0 5
93280: PUSH
93281: LD_VAR 0 4
93285: PPUSH
93286: LD_VAR 0 8
93290: PPUSH
93291: LD_VAR 0 9
93295: PUSH
93296: LD_VAR 0 10
93300: PLUS
93301: PPUSH
93302: CALL_OW 272
93306: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
93307: LD_ADDR_VAR 0 7
93311: PUSH
93312: LD_VAR 0 6
93316: PPUSH
93317: LD_VAR 0 8
93321: PPUSH
93322: LD_VAR 0 9
93326: PUSH
93327: LD_VAR 0 10
93331: PLUS
93332: PPUSH
93333: CALL_OW 273
93337: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
93338: LD_VAR 0 5
93342: PPUSH
93343: LD_VAR 0 7
93347: PPUSH
93348: CALL_OW 488
93352: PUSH
93353: LD_VAR 0 5
93357: PPUSH
93358: LD_VAR 0 7
93362: PPUSH
93363: CALL_OW 428
93367: PPUSH
93368: CALL_OW 247
93372: PUSH
93373: LD_INT 3
93375: PUSH
93376: LD_INT 2
93378: PUSH
93379: EMPTY
93380: LIST
93381: LIST
93382: IN
93383: NOT
93384: AND
93385: IFFALSE 93429
// begin ComMoveXY ( unit , _x , _y ) ;
93387: LD_VAR 0 1
93391: PPUSH
93392: LD_VAR 0 5
93396: PPUSH
93397: LD_VAR 0 7
93401: PPUSH
93402: CALL_OW 111
// result := [ _x , _y ] ;
93406: LD_ADDR_VAR 0 3
93410: PUSH
93411: LD_VAR 0 5
93415: PUSH
93416: LD_VAR 0 7
93420: PUSH
93421: EMPTY
93422: LIST
93423: LIST
93424: ST_TO_ADDR
// exit ;
93425: POP
93426: POP
93427: GO 93433
// end ; end ;
93429: GO 93273
93431: POP
93432: POP
// end ;
93433: LD_VAR 0 3
93437: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
93438: LD_INT 0
93440: PPUSH
93441: PPUSH
93442: PPUSH
// result := 0 ;
93443: LD_ADDR_VAR 0 3
93447: PUSH
93448: LD_INT 0
93450: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
93451: LD_VAR 0 1
93455: PUSH
93456: LD_INT 0
93458: LESS
93459: PUSH
93460: LD_VAR 0 1
93464: PUSH
93465: LD_INT 8
93467: GREATER
93468: OR
93469: PUSH
93470: LD_VAR 0 2
93474: PUSH
93475: LD_INT 0
93477: LESS
93478: OR
93479: PUSH
93480: LD_VAR 0 2
93484: PUSH
93485: LD_INT 8
93487: GREATER
93488: OR
93489: IFFALSE 93493
// exit ;
93491: GO 93568
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
93493: LD_ADDR_VAR 0 4
93497: PUSH
93498: LD_INT 22
93500: PUSH
93501: LD_VAR 0 2
93505: PUSH
93506: EMPTY
93507: LIST
93508: LIST
93509: PPUSH
93510: CALL_OW 69
93514: PUSH
93515: FOR_IN
93516: IFFALSE 93566
// begin un := UnitShoot ( i ) ;
93518: LD_ADDR_VAR 0 5
93522: PUSH
93523: LD_VAR 0 4
93527: PPUSH
93528: CALL_OW 504
93532: ST_TO_ADDR
// if GetSide ( un ) = side1 then
93533: LD_VAR 0 5
93537: PPUSH
93538: CALL_OW 255
93542: PUSH
93543: LD_VAR 0 1
93547: EQUAL
93548: IFFALSE 93564
// begin result := un ;
93550: LD_ADDR_VAR 0 3
93554: PUSH
93555: LD_VAR 0 5
93559: ST_TO_ADDR
// exit ;
93560: POP
93561: POP
93562: GO 93568
// end ; end ;
93564: GO 93515
93566: POP
93567: POP
// end ;
93568: LD_VAR 0 3
93572: RET
// export function GetCargoBay ( units ) ; begin
93573: LD_INT 0
93575: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
93576: LD_ADDR_VAR 0 2
93580: PUSH
93581: LD_VAR 0 1
93585: PPUSH
93586: LD_INT 2
93588: PUSH
93589: LD_INT 34
93591: PUSH
93592: LD_INT 12
93594: PUSH
93595: EMPTY
93596: LIST
93597: LIST
93598: PUSH
93599: LD_INT 34
93601: PUSH
93602: LD_INT 51
93604: PUSH
93605: EMPTY
93606: LIST
93607: LIST
93608: PUSH
93609: LD_INT 34
93611: PUSH
93612: LD_INT 32
93614: PUSH
93615: EMPTY
93616: LIST
93617: LIST
93618: PUSH
93619: LD_INT 34
93621: PUSH
93622: LD_INT 89
93624: PUSH
93625: EMPTY
93626: LIST
93627: LIST
93628: PUSH
93629: EMPTY
93630: LIST
93631: LIST
93632: LIST
93633: LIST
93634: LIST
93635: PPUSH
93636: CALL_OW 72
93640: ST_TO_ADDR
// end ;
93641: LD_VAR 0 2
93645: RET
// export function Negate ( value ) ; begin
93646: LD_INT 0
93648: PPUSH
// result := not value ;
93649: LD_ADDR_VAR 0 2
93653: PUSH
93654: LD_VAR 0 1
93658: NOT
93659: ST_TO_ADDR
// end ;
93660: LD_VAR 0 2
93664: RET
// export function Inc ( value ) ; begin
93665: LD_INT 0
93667: PPUSH
// result := value + 1 ;
93668: LD_ADDR_VAR 0 2
93672: PUSH
93673: LD_VAR 0 1
93677: PUSH
93678: LD_INT 1
93680: PLUS
93681: ST_TO_ADDR
// end ;
93682: LD_VAR 0 2
93686: RET
// export function Dec ( value ) ; begin
93687: LD_INT 0
93689: PPUSH
// result := value - 1 ;
93690: LD_ADDR_VAR 0 2
93694: PUSH
93695: LD_VAR 0 1
93699: PUSH
93700: LD_INT 1
93702: MINUS
93703: ST_TO_ADDR
// end ;
93704: LD_VAR 0 2
93708: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
93709: LD_INT 0
93711: PPUSH
93712: PPUSH
93713: PPUSH
93714: PPUSH
93715: PPUSH
93716: PPUSH
93717: PPUSH
93718: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
93719: LD_VAR 0 1
93723: PPUSH
93724: LD_VAR 0 2
93728: PPUSH
93729: CALL_OW 488
93733: NOT
93734: PUSH
93735: LD_VAR 0 3
93739: PPUSH
93740: LD_VAR 0 4
93744: PPUSH
93745: CALL_OW 488
93749: NOT
93750: OR
93751: IFFALSE 93764
// begin result := - 1 ;
93753: LD_ADDR_VAR 0 5
93757: PUSH
93758: LD_INT 1
93760: NEG
93761: ST_TO_ADDR
// exit ;
93762: GO 93999
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
93764: LD_ADDR_VAR 0 12
93768: PUSH
93769: LD_VAR 0 1
93773: PPUSH
93774: LD_VAR 0 2
93778: PPUSH
93779: LD_VAR 0 3
93783: PPUSH
93784: LD_VAR 0 4
93788: PPUSH
93789: CALL 92849 0 4
93793: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
93794: LD_ADDR_VAR 0 11
93798: PUSH
93799: LD_VAR 0 1
93803: PPUSH
93804: LD_VAR 0 2
93808: PPUSH
93809: LD_VAR 0 12
93813: PUSH
93814: LD_INT 1
93816: ARRAY
93817: PPUSH
93818: LD_VAR 0 12
93822: PUSH
93823: LD_INT 2
93825: ARRAY
93826: PPUSH
93827: CALL_OW 298
93831: ST_TO_ADDR
// distance := 9999 ;
93832: LD_ADDR_VAR 0 10
93836: PUSH
93837: LD_INT 9999
93839: ST_TO_ADDR
// for i := 0 to 5 do
93840: LD_ADDR_VAR 0 6
93844: PUSH
93845: DOUBLE
93846: LD_INT 0
93848: DEC
93849: ST_TO_ADDR
93850: LD_INT 5
93852: PUSH
93853: FOR_TO
93854: IFFALSE 93997
// begin _x := ShiftX ( x1 , i , centerDist ) ;
93856: LD_ADDR_VAR 0 7
93860: PUSH
93861: LD_VAR 0 1
93865: PPUSH
93866: LD_VAR 0 6
93870: PPUSH
93871: LD_VAR 0 11
93875: PPUSH
93876: CALL_OW 272
93880: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
93881: LD_ADDR_VAR 0 8
93885: PUSH
93886: LD_VAR 0 2
93890: PPUSH
93891: LD_VAR 0 6
93895: PPUSH
93896: LD_VAR 0 11
93900: PPUSH
93901: CALL_OW 273
93905: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
93906: LD_VAR 0 7
93910: PPUSH
93911: LD_VAR 0 8
93915: PPUSH
93916: CALL_OW 488
93920: NOT
93921: IFFALSE 93925
// continue ;
93923: GO 93853
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
93925: LD_ADDR_VAR 0 9
93929: PUSH
93930: LD_VAR 0 12
93934: PUSH
93935: LD_INT 1
93937: ARRAY
93938: PPUSH
93939: LD_VAR 0 12
93943: PUSH
93944: LD_INT 2
93946: ARRAY
93947: PPUSH
93948: LD_VAR 0 7
93952: PPUSH
93953: LD_VAR 0 8
93957: PPUSH
93958: CALL_OW 298
93962: ST_TO_ADDR
// if tmp < distance then
93963: LD_VAR 0 9
93967: PUSH
93968: LD_VAR 0 10
93972: LESS
93973: IFFALSE 93995
// begin result := i ;
93975: LD_ADDR_VAR 0 5
93979: PUSH
93980: LD_VAR 0 6
93984: ST_TO_ADDR
// distance := tmp ;
93985: LD_ADDR_VAR 0 10
93989: PUSH
93990: LD_VAR 0 9
93994: ST_TO_ADDR
// end ; end ;
93995: GO 93853
93997: POP
93998: POP
// end ;
93999: LD_VAR 0 5
94003: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
94004: LD_INT 0
94006: PPUSH
94007: PPUSH
// if not driver or not IsInUnit ( driver ) then
94008: LD_VAR 0 1
94012: NOT
94013: PUSH
94014: LD_VAR 0 1
94018: PPUSH
94019: CALL_OW 310
94023: NOT
94024: OR
94025: IFFALSE 94029
// exit ;
94027: GO 94119
// vehicle := IsInUnit ( driver ) ;
94029: LD_ADDR_VAR 0 3
94033: PUSH
94034: LD_VAR 0 1
94038: PPUSH
94039: CALL_OW 310
94043: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
94044: LD_VAR 0 1
94048: PPUSH
94049: LD_STRING \
94051: PUSH
94052: LD_INT 0
94054: PUSH
94055: LD_INT 0
94057: PUSH
94058: LD_INT 0
94060: PUSH
94061: LD_INT 0
94063: PUSH
94064: LD_INT 0
94066: PUSH
94067: LD_INT 0
94069: PUSH
94070: EMPTY
94071: LIST
94072: LIST
94073: LIST
94074: LIST
94075: LIST
94076: LIST
94077: LIST
94078: PUSH
94079: LD_STRING E
94081: PUSH
94082: LD_INT 0
94084: PUSH
94085: LD_INT 0
94087: PUSH
94088: LD_VAR 0 3
94092: PUSH
94093: LD_INT 0
94095: PUSH
94096: LD_INT 0
94098: PUSH
94099: LD_INT 0
94101: PUSH
94102: EMPTY
94103: LIST
94104: LIST
94105: LIST
94106: LIST
94107: LIST
94108: LIST
94109: LIST
94110: PUSH
94111: EMPTY
94112: LIST
94113: LIST
94114: PPUSH
94115: CALL_OW 446
// end ;
94119: LD_VAR 0 2
94123: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
94124: LD_INT 0
94126: PPUSH
94127: PPUSH
// if not driver or not IsInUnit ( driver ) then
94128: LD_VAR 0 1
94132: NOT
94133: PUSH
94134: LD_VAR 0 1
94138: PPUSH
94139: CALL_OW 310
94143: NOT
94144: OR
94145: IFFALSE 94149
// exit ;
94147: GO 94239
// vehicle := IsInUnit ( driver ) ;
94149: LD_ADDR_VAR 0 3
94153: PUSH
94154: LD_VAR 0 1
94158: PPUSH
94159: CALL_OW 310
94163: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
94164: LD_VAR 0 1
94168: PPUSH
94169: LD_STRING \
94171: PUSH
94172: LD_INT 0
94174: PUSH
94175: LD_INT 0
94177: PUSH
94178: LD_INT 0
94180: PUSH
94181: LD_INT 0
94183: PUSH
94184: LD_INT 0
94186: PUSH
94187: LD_INT 0
94189: PUSH
94190: EMPTY
94191: LIST
94192: LIST
94193: LIST
94194: LIST
94195: LIST
94196: LIST
94197: LIST
94198: PUSH
94199: LD_STRING E
94201: PUSH
94202: LD_INT 0
94204: PUSH
94205: LD_INT 0
94207: PUSH
94208: LD_VAR 0 3
94212: PUSH
94213: LD_INT 0
94215: PUSH
94216: LD_INT 0
94218: PUSH
94219: LD_INT 0
94221: PUSH
94222: EMPTY
94223: LIST
94224: LIST
94225: LIST
94226: LIST
94227: LIST
94228: LIST
94229: LIST
94230: PUSH
94231: EMPTY
94232: LIST
94233: LIST
94234: PPUSH
94235: CALL_OW 447
// end ;
94239: LD_VAR 0 2
94243: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
94244: LD_INT 0
94246: PPUSH
94247: PPUSH
94248: PPUSH
// tmp := [ ] ;
94249: LD_ADDR_VAR 0 5
94253: PUSH
94254: EMPTY
94255: ST_TO_ADDR
// for i in units do
94256: LD_ADDR_VAR 0 4
94260: PUSH
94261: LD_VAR 0 1
94265: PUSH
94266: FOR_IN
94267: IFFALSE 94305
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
94269: LD_ADDR_VAR 0 5
94273: PUSH
94274: LD_VAR 0 5
94278: PPUSH
94279: LD_VAR 0 5
94283: PUSH
94284: LD_INT 1
94286: PLUS
94287: PPUSH
94288: LD_VAR 0 4
94292: PPUSH
94293: CALL_OW 256
94297: PPUSH
94298: CALL_OW 2
94302: ST_TO_ADDR
94303: GO 94266
94305: POP
94306: POP
// if not tmp then
94307: LD_VAR 0 5
94311: NOT
94312: IFFALSE 94316
// exit ;
94314: GO 94364
// if asc then
94316: LD_VAR 0 2
94320: IFFALSE 94344
// result := SortListByListAsc ( units , tmp ) else
94322: LD_ADDR_VAR 0 3
94326: PUSH
94327: LD_VAR 0 1
94331: PPUSH
94332: LD_VAR 0 5
94336: PPUSH
94337: CALL_OW 76
94341: ST_TO_ADDR
94342: GO 94364
// result := SortListByListDesc ( units , tmp ) ;
94344: LD_ADDR_VAR 0 3
94348: PUSH
94349: LD_VAR 0 1
94353: PPUSH
94354: LD_VAR 0 5
94358: PPUSH
94359: CALL_OW 77
94363: ST_TO_ADDR
// end ;
94364: LD_VAR 0 3
94368: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
94369: LD_INT 0
94371: PPUSH
94372: PPUSH
// task := GetTaskList ( mech ) ;
94373: LD_ADDR_VAR 0 4
94377: PUSH
94378: LD_VAR 0 1
94382: PPUSH
94383: CALL_OW 437
94387: ST_TO_ADDR
// if not task then
94388: LD_VAR 0 4
94392: NOT
94393: IFFALSE 94397
// exit ;
94395: GO 94439
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
94397: LD_ADDR_VAR 0 3
94401: PUSH
94402: LD_VAR 0 4
94406: PUSH
94407: LD_INT 1
94409: ARRAY
94410: PUSH
94411: LD_INT 1
94413: ARRAY
94414: PUSH
94415: LD_STRING r
94417: EQUAL
94418: PUSH
94419: LD_VAR 0 4
94423: PUSH
94424: LD_INT 1
94426: ARRAY
94427: PUSH
94428: LD_INT 4
94430: ARRAY
94431: PUSH
94432: LD_VAR 0 2
94436: EQUAL
94437: AND
94438: ST_TO_ADDR
// end ;
94439: LD_VAR 0 3
94443: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
94444: LD_INT 0
94446: PPUSH
// SetDir ( unit , d ) ;
94447: LD_VAR 0 1
94451: PPUSH
94452: LD_VAR 0 4
94456: PPUSH
94457: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
94461: LD_VAR 0 1
94465: PPUSH
94466: LD_VAR 0 2
94470: PPUSH
94471: LD_VAR 0 3
94475: PPUSH
94476: LD_VAR 0 5
94480: PPUSH
94481: CALL_OW 48
// end ;
94485: LD_VAR 0 6
94489: RET
// export function ToNaturalNumber ( number ) ; begin
94490: LD_INT 0
94492: PPUSH
// result := number div 1 ;
94493: LD_ADDR_VAR 0 2
94497: PUSH
94498: LD_VAR 0 1
94502: PUSH
94503: LD_INT 1
94505: DIV
94506: ST_TO_ADDR
// if number < 0 then
94507: LD_VAR 0 1
94511: PUSH
94512: LD_INT 0
94514: LESS
94515: IFFALSE 94525
// result := 0 ;
94517: LD_ADDR_VAR 0 2
94521: PUSH
94522: LD_INT 0
94524: ST_TO_ADDR
// end ;
94525: LD_VAR 0 2
94529: RET
// export function SortByClass ( units , class ) ; var un ; begin
94530: LD_INT 0
94532: PPUSH
94533: PPUSH
// if not units or not class then
94534: LD_VAR 0 1
94538: NOT
94539: PUSH
94540: LD_VAR 0 2
94544: NOT
94545: OR
94546: IFFALSE 94550
// exit ;
94548: GO 94645
// result := [ ] ;
94550: LD_ADDR_VAR 0 3
94554: PUSH
94555: EMPTY
94556: ST_TO_ADDR
// for un in units do
94557: LD_ADDR_VAR 0 4
94561: PUSH
94562: LD_VAR 0 1
94566: PUSH
94567: FOR_IN
94568: IFFALSE 94643
// if GetClass ( un ) = class then
94570: LD_VAR 0 4
94574: PPUSH
94575: CALL_OW 257
94579: PUSH
94580: LD_VAR 0 2
94584: EQUAL
94585: IFFALSE 94612
// result := Insert ( result , 1 , un ) else
94587: LD_ADDR_VAR 0 3
94591: PUSH
94592: LD_VAR 0 3
94596: PPUSH
94597: LD_INT 1
94599: PPUSH
94600: LD_VAR 0 4
94604: PPUSH
94605: CALL_OW 2
94609: ST_TO_ADDR
94610: GO 94641
// result := Replace ( result , result + 1 , un ) ;
94612: LD_ADDR_VAR 0 3
94616: PUSH
94617: LD_VAR 0 3
94621: PPUSH
94622: LD_VAR 0 3
94626: PUSH
94627: LD_INT 1
94629: PLUS
94630: PPUSH
94631: LD_VAR 0 4
94635: PPUSH
94636: CALL_OW 1
94640: ST_TO_ADDR
94641: GO 94567
94643: POP
94644: POP
// end ;
94645: LD_VAR 0 3
94649: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
94650: LD_INT 0
94652: PPUSH
94653: PPUSH
94654: PPUSH
94655: PPUSH
94656: PPUSH
94657: PPUSH
94658: PPUSH
// result := [ ] ;
94659: LD_ADDR_VAR 0 4
94663: PUSH
94664: EMPTY
94665: ST_TO_ADDR
// if x - r < 0 then
94666: LD_VAR 0 1
94670: PUSH
94671: LD_VAR 0 3
94675: MINUS
94676: PUSH
94677: LD_INT 0
94679: LESS
94680: IFFALSE 94692
// min_x := 0 else
94682: LD_ADDR_VAR 0 8
94686: PUSH
94687: LD_INT 0
94689: ST_TO_ADDR
94690: GO 94708
// min_x := x - r ;
94692: LD_ADDR_VAR 0 8
94696: PUSH
94697: LD_VAR 0 1
94701: PUSH
94702: LD_VAR 0 3
94706: MINUS
94707: ST_TO_ADDR
// if y - r < 0 then
94708: LD_VAR 0 2
94712: PUSH
94713: LD_VAR 0 3
94717: MINUS
94718: PUSH
94719: LD_INT 0
94721: LESS
94722: IFFALSE 94734
// min_y := 0 else
94724: LD_ADDR_VAR 0 7
94728: PUSH
94729: LD_INT 0
94731: ST_TO_ADDR
94732: GO 94750
// min_y := y - r ;
94734: LD_ADDR_VAR 0 7
94738: PUSH
94739: LD_VAR 0 2
94743: PUSH
94744: LD_VAR 0 3
94748: MINUS
94749: ST_TO_ADDR
// max_x := x + r ;
94750: LD_ADDR_VAR 0 9
94754: PUSH
94755: LD_VAR 0 1
94759: PUSH
94760: LD_VAR 0 3
94764: PLUS
94765: ST_TO_ADDR
// max_y := y + r ;
94766: LD_ADDR_VAR 0 10
94770: PUSH
94771: LD_VAR 0 2
94775: PUSH
94776: LD_VAR 0 3
94780: PLUS
94781: ST_TO_ADDR
// for _x = min_x to max_x do
94782: LD_ADDR_VAR 0 5
94786: PUSH
94787: DOUBLE
94788: LD_VAR 0 8
94792: DEC
94793: ST_TO_ADDR
94794: LD_VAR 0 9
94798: PUSH
94799: FOR_TO
94800: IFFALSE 94901
// for _y = min_y to max_y do
94802: LD_ADDR_VAR 0 6
94806: PUSH
94807: DOUBLE
94808: LD_VAR 0 7
94812: DEC
94813: ST_TO_ADDR
94814: LD_VAR 0 10
94818: PUSH
94819: FOR_TO
94820: IFFALSE 94897
// begin if not ValidHex ( _x , _y ) then
94822: LD_VAR 0 5
94826: PPUSH
94827: LD_VAR 0 6
94831: PPUSH
94832: CALL_OW 488
94836: NOT
94837: IFFALSE 94841
// continue ;
94839: GO 94819
// if GetResourceTypeXY ( _x , _y ) then
94841: LD_VAR 0 5
94845: PPUSH
94846: LD_VAR 0 6
94850: PPUSH
94851: CALL_OW 283
94855: IFFALSE 94895
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
94857: LD_ADDR_VAR 0 4
94861: PUSH
94862: LD_VAR 0 4
94866: PPUSH
94867: LD_VAR 0 4
94871: PUSH
94872: LD_INT 1
94874: PLUS
94875: PPUSH
94876: LD_VAR 0 5
94880: PUSH
94881: LD_VAR 0 6
94885: PUSH
94886: EMPTY
94887: LIST
94888: LIST
94889: PPUSH
94890: CALL_OW 1
94894: ST_TO_ADDR
// end ;
94895: GO 94819
94897: POP
94898: POP
94899: GO 94799
94901: POP
94902: POP
// end ;
94903: LD_VAR 0 4
94907: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
94908: LD_INT 0
94910: PPUSH
94911: PPUSH
94912: PPUSH
94913: PPUSH
94914: PPUSH
94915: PPUSH
94916: PPUSH
94917: PPUSH
// if not units then
94918: LD_VAR 0 1
94922: NOT
94923: IFFALSE 94927
// exit ;
94925: GO 95451
// result := UnitFilter ( units , [ f_ok ] ) ;
94927: LD_ADDR_VAR 0 3
94931: PUSH
94932: LD_VAR 0 1
94936: PPUSH
94937: LD_INT 50
94939: PUSH
94940: EMPTY
94941: LIST
94942: PPUSH
94943: CALL_OW 72
94947: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
94948: LD_ADDR_VAR 0 8
94952: PUSH
94953: LD_VAR 0 1
94957: PUSH
94958: LD_INT 1
94960: ARRAY
94961: PPUSH
94962: CALL_OW 255
94966: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
94967: LD_ADDR_VAR 0 10
94971: PUSH
94972: LD_INT 29
94974: PUSH
94975: LD_INT 91
94977: PUSH
94978: LD_INT 49
94980: PUSH
94981: EMPTY
94982: LIST
94983: LIST
94984: LIST
94985: ST_TO_ADDR
// if not result then
94986: LD_VAR 0 3
94990: NOT
94991: IFFALSE 94995
// exit ;
94993: GO 95451
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
94995: LD_ADDR_VAR 0 5
94999: PUSH
95000: LD_INT 81
95002: PUSH
95003: LD_VAR 0 8
95007: PUSH
95008: EMPTY
95009: LIST
95010: LIST
95011: PPUSH
95012: CALL_OW 69
95016: ST_TO_ADDR
// for i in result do
95017: LD_ADDR_VAR 0 4
95021: PUSH
95022: LD_VAR 0 3
95026: PUSH
95027: FOR_IN
95028: IFFALSE 95449
// begin tag := GetTag ( i ) + 1 ;
95030: LD_ADDR_VAR 0 9
95034: PUSH
95035: LD_VAR 0 4
95039: PPUSH
95040: CALL_OW 110
95044: PUSH
95045: LD_INT 1
95047: PLUS
95048: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
95049: LD_ADDR_VAR 0 7
95053: PUSH
95054: LD_VAR 0 4
95058: PPUSH
95059: CALL_OW 250
95063: PPUSH
95064: LD_VAR 0 4
95068: PPUSH
95069: CALL_OW 251
95073: PPUSH
95074: LD_INT 6
95076: PPUSH
95077: CALL 94650 0 3
95081: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
95082: LD_VAR 0 4
95086: PPUSH
95087: CALL_OW 247
95091: PUSH
95092: LD_INT 2
95094: EQUAL
95095: PUSH
95096: LD_VAR 0 7
95100: AND
95101: PUSH
95102: LD_VAR 0 4
95106: PPUSH
95107: CALL_OW 264
95111: PUSH
95112: LD_VAR 0 10
95116: IN
95117: NOT
95118: AND
95119: IFFALSE 95158
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
95121: LD_VAR 0 4
95125: PPUSH
95126: LD_VAR 0 7
95130: PUSH
95131: LD_INT 1
95133: ARRAY
95134: PUSH
95135: LD_INT 1
95137: ARRAY
95138: PPUSH
95139: LD_VAR 0 7
95143: PUSH
95144: LD_INT 1
95146: ARRAY
95147: PUSH
95148: LD_INT 2
95150: ARRAY
95151: PPUSH
95152: CALL_OW 116
95156: GO 95447
// if path > tag then
95158: LD_VAR 0 2
95162: PUSH
95163: LD_VAR 0 9
95167: GREATER
95168: IFFALSE 95376
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
95170: LD_ADDR_VAR 0 6
95174: PUSH
95175: LD_VAR 0 5
95179: PPUSH
95180: LD_INT 91
95182: PUSH
95183: LD_VAR 0 4
95187: PUSH
95188: LD_INT 8
95190: PUSH
95191: EMPTY
95192: LIST
95193: LIST
95194: LIST
95195: PPUSH
95196: CALL_OW 72
95200: ST_TO_ADDR
// if nearEnemy then
95201: LD_VAR 0 6
95205: IFFALSE 95274
// begin if GetWeapon ( i ) = ru_time_lapser then
95207: LD_VAR 0 4
95211: PPUSH
95212: CALL_OW 264
95216: PUSH
95217: LD_INT 49
95219: EQUAL
95220: IFFALSE 95248
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
95222: LD_VAR 0 4
95226: PPUSH
95227: LD_VAR 0 6
95231: PPUSH
95232: LD_VAR 0 4
95236: PPUSH
95237: CALL_OW 74
95241: PPUSH
95242: CALL_OW 112
95246: GO 95272
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
95248: LD_VAR 0 4
95252: PPUSH
95253: LD_VAR 0 6
95257: PPUSH
95258: LD_VAR 0 4
95262: PPUSH
95263: CALL_OW 74
95267: PPUSH
95268: CALL 96522 0 2
// end else
95272: GO 95374
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
95274: LD_VAR 0 4
95278: PPUSH
95279: LD_VAR 0 2
95283: PUSH
95284: LD_VAR 0 9
95288: ARRAY
95289: PUSH
95290: LD_INT 1
95292: ARRAY
95293: PPUSH
95294: LD_VAR 0 2
95298: PUSH
95299: LD_VAR 0 9
95303: ARRAY
95304: PUSH
95305: LD_INT 2
95307: ARRAY
95308: PPUSH
95309: CALL_OW 297
95313: PUSH
95314: LD_INT 6
95316: GREATER
95317: IFFALSE 95360
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
95319: LD_VAR 0 4
95323: PPUSH
95324: LD_VAR 0 2
95328: PUSH
95329: LD_VAR 0 9
95333: ARRAY
95334: PUSH
95335: LD_INT 1
95337: ARRAY
95338: PPUSH
95339: LD_VAR 0 2
95343: PUSH
95344: LD_VAR 0 9
95348: ARRAY
95349: PUSH
95350: LD_INT 2
95352: ARRAY
95353: PPUSH
95354: CALL_OW 114
95358: GO 95374
// SetTag ( i , tag ) ;
95360: LD_VAR 0 4
95364: PPUSH
95365: LD_VAR 0 9
95369: PPUSH
95370: CALL_OW 109
// end else
95374: GO 95447
// if enemy then
95376: LD_VAR 0 5
95380: IFFALSE 95447
// begin if GetWeapon ( i ) = ru_time_lapser then
95382: LD_VAR 0 4
95386: PPUSH
95387: CALL_OW 264
95391: PUSH
95392: LD_INT 49
95394: EQUAL
95395: IFFALSE 95423
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
95397: LD_VAR 0 4
95401: PPUSH
95402: LD_VAR 0 5
95406: PPUSH
95407: LD_VAR 0 4
95411: PPUSH
95412: CALL_OW 74
95416: PPUSH
95417: CALL_OW 112
95421: GO 95447
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
95423: LD_VAR 0 4
95427: PPUSH
95428: LD_VAR 0 5
95432: PPUSH
95433: LD_VAR 0 4
95437: PPUSH
95438: CALL_OW 74
95442: PPUSH
95443: CALL 96522 0 2
// end ; end ;
95447: GO 95027
95449: POP
95450: POP
// end ;
95451: LD_VAR 0 3
95455: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
95456: LD_INT 0
95458: PPUSH
95459: PPUSH
95460: PPUSH
// if not unit or IsInUnit ( unit ) then
95461: LD_VAR 0 1
95465: NOT
95466: PUSH
95467: LD_VAR 0 1
95471: PPUSH
95472: CALL_OW 310
95476: OR
95477: IFFALSE 95481
// exit ;
95479: GO 95572
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
95481: LD_ADDR_VAR 0 4
95485: PUSH
95486: LD_VAR 0 1
95490: PPUSH
95491: CALL_OW 250
95495: PPUSH
95496: LD_VAR 0 2
95500: PPUSH
95501: LD_INT 1
95503: PPUSH
95504: CALL_OW 272
95508: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
95509: LD_ADDR_VAR 0 5
95513: PUSH
95514: LD_VAR 0 1
95518: PPUSH
95519: CALL_OW 251
95523: PPUSH
95524: LD_VAR 0 2
95528: PPUSH
95529: LD_INT 1
95531: PPUSH
95532: CALL_OW 273
95536: ST_TO_ADDR
// if ValidHex ( x , y ) then
95537: LD_VAR 0 4
95541: PPUSH
95542: LD_VAR 0 5
95546: PPUSH
95547: CALL_OW 488
95551: IFFALSE 95572
// ComTurnXY ( unit , x , y ) ;
95553: LD_VAR 0 1
95557: PPUSH
95558: LD_VAR 0 4
95562: PPUSH
95563: LD_VAR 0 5
95567: PPUSH
95568: CALL_OW 118
// end ;
95572: LD_VAR 0 3
95576: RET
// export function SeeUnits ( side , units ) ; var i ; begin
95577: LD_INT 0
95579: PPUSH
95580: PPUSH
// result := false ;
95581: LD_ADDR_VAR 0 3
95585: PUSH
95586: LD_INT 0
95588: ST_TO_ADDR
// if not units then
95589: LD_VAR 0 2
95593: NOT
95594: IFFALSE 95598
// exit ;
95596: GO 95643
// for i in units do
95598: LD_ADDR_VAR 0 4
95602: PUSH
95603: LD_VAR 0 2
95607: PUSH
95608: FOR_IN
95609: IFFALSE 95641
// if See ( side , i ) then
95611: LD_VAR 0 1
95615: PPUSH
95616: LD_VAR 0 4
95620: PPUSH
95621: CALL_OW 292
95625: IFFALSE 95639
// begin result := true ;
95627: LD_ADDR_VAR 0 3
95631: PUSH
95632: LD_INT 1
95634: ST_TO_ADDR
// exit ;
95635: POP
95636: POP
95637: GO 95643
// end ;
95639: GO 95608
95641: POP
95642: POP
// end ;
95643: LD_VAR 0 3
95647: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
95648: LD_INT 0
95650: PPUSH
95651: PPUSH
95652: PPUSH
95653: PPUSH
// if not unit or not points then
95654: LD_VAR 0 1
95658: NOT
95659: PUSH
95660: LD_VAR 0 2
95664: NOT
95665: OR
95666: IFFALSE 95670
// exit ;
95668: GO 95760
// dist := 99999 ;
95670: LD_ADDR_VAR 0 5
95674: PUSH
95675: LD_INT 99999
95677: ST_TO_ADDR
// for i in points do
95678: LD_ADDR_VAR 0 4
95682: PUSH
95683: LD_VAR 0 2
95687: PUSH
95688: FOR_IN
95689: IFFALSE 95758
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
95691: LD_ADDR_VAR 0 6
95695: PUSH
95696: LD_VAR 0 1
95700: PPUSH
95701: LD_VAR 0 4
95705: PUSH
95706: LD_INT 1
95708: ARRAY
95709: PPUSH
95710: LD_VAR 0 4
95714: PUSH
95715: LD_INT 2
95717: ARRAY
95718: PPUSH
95719: CALL_OW 297
95723: ST_TO_ADDR
// if tmpDist < dist then
95724: LD_VAR 0 6
95728: PUSH
95729: LD_VAR 0 5
95733: LESS
95734: IFFALSE 95756
// begin result := i ;
95736: LD_ADDR_VAR 0 3
95740: PUSH
95741: LD_VAR 0 4
95745: ST_TO_ADDR
// dist := tmpDist ;
95746: LD_ADDR_VAR 0 5
95750: PUSH
95751: LD_VAR 0 6
95755: ST_TO_ADDR
// end ; end ;
95756: GO 95688
95758: POP
95759: POP
// end ;
95760: LD_VAR 0 3
95764: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
95765: LD_INT 0
95767: PPUSH
// uc_side := side ;
95768: LD_ADDR_OWVAR 20
95772: PUSH
95773: LD_VAR 0 1
95777: ST_TO_ADDR
// uc_nation := 3 ;
95778: LD_ADDR_OWVAR 21
95782: PUSH
95783: LD_INT 3
95785: ST_TO_ADDR
// vc_chassis := 25 ;
95786: LD_ADDR_OWVAR 37
95790: PUSH
95791: LD_INT 25
95793: ST_TO_ADDR
// vc_engine := engine_siberite ;
95794: LD_ADDR_OWVAR 39
95798: PUSH
95799: LD_INT 3
95801: ST_TO_ADDR
// vc_control := control_computer ;
95802: LD_ADDR_OWVAR 38
95806: PUSH
95807: LD_INT 3
95809: ST_TO_ADDR
// vc_weapon := 59 ;
95810: LD_ADDR_OWVAR 40
95814: PUSH
95815: LD_INT 59
95817: ST_TO_ADDR
// result := CreateVehicle ;
95818: LD_ADDR_VAR 0 5
95822: PUSH
95823: CALL_OW 45
95827: ST_TO_ADDR
// SetDir ( result , d ) ;
95828: LD_VAR 0 5
95832: PPUSH
95833: LD_VAR 0 4
95837: PPUSH
95838: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
95842: LD_VAR 0 5
95846: PPUSH
95847: LD_VAR 0 2
95851: PPUSH
95852: LD_VAR 0 3
95856: PPUSH
95857: LD_INT 0
95859: PPUSH
95860: CALL_OW 48
// end ;
95864: LD_VAR 0 5
95868: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
95869: LD_INT 0
95871: PPUSH
95872: PPUSH
95873: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
95874: LD_ADDR_VAR 0 2
95878: PUSH
95879: LD_INT 0
95881: PUSH
95882: LD_INT 0
95884: PUSH
95885: LD_INT 0
95887: PUSH
95888: LD_INT 0
95890: PUSH
95891: EMPTY
95892: LIST
95893: LIST
95894: LIST
95895: LIST
95896: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
95897: LD_VAR 0 1
95901: NOT
95902: PUSH
95903: LD_VAR 0 1
95907: PPUSH
95908: CALL_OW 264
95912: PUSH
95913: LD_INT 12
95915: PUSH
95916: LD_INT 51
95918: PUSH
95919: LD_INT 32
95921: PUSH
95922: LD_INT 89
95924: PUSH
95925: EMPTY
95926: LIST
95927: LIST
95928: LIST
95929: LIST
95930: IN
95931: NOT
95932: OR
95933: IFFALSE 95937
// exit ;
95935: GO 96035
// for i := 1 to 3 do
95937: LD_ADDR_VAR 0 3
95941: PUSH
95942: DOUBLE
95943: LD_INT 1
95945: DEC
95946: ST_TO_ADDR
95947: LD_INT 3
95949: PUSH
95950: FOR_TO
95951: IFFALSE 96033
// begin tmp := GetCargo ( cargo , i ) ;
95953: LD_ADDR_VAR 0 4
95957: PUSH
95958: LD_VAR 0 1
95962: PPUSH
95963: LD_VAR 0 3
95967: PPUSH
95968: CALL_OW 289
95972: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
95973: LD_ADDR_VAR 0 2
95977: PUSH
95978: LD_VAR 0 2
95982: PPUSH
95983: LD_VAR 0 3
95987: PPUSH
95988: LD_VAR 0 4
95992: PPUSH
95993: CALL_OW 1
95997: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
95998: LD_ADDR_VAR 0 2
96002: PUSH
96003: LD_VAR 0 2
96007: PPUSH
96008: LD_INT 4
96010: PPUSH
96011: LD_VAR 0 2
96015: PUSH
96016: LD_INT 4
96018: ARRAY
96019: PUSH
96020: LD_VAR 0 4
96024: PLUS
96025: PPUSH
96026: CALL_OW 1
96030: ST_TO_ADDR
// end ;
96031: GO 95950
96033: POP
96034: POP
// end ;
96035: LD_VAR 0 2
96039: RET
// export function Length ( array ) ; begin
96040: LD_INT 0
96042: PPUSH
// result := array + 0 ;
96043: LD_ADDR_VAR 0 2
96047: PUSH
96048: LD_VAR 0 1
96052: PUSH
96053: LD_INT 0
96055: PLUS
96056: ST_TO_ADDR
// end ;
96057: LD_VAR 0 2
96061: RET
// export function PrepareArray ( array ) ; begin
96062: LD_INT 0
96064: PPUSH
// result := array diff 0 ;
96065: LD_ADDR_VAR 0 2
96069: PUSH
96070: LD_VAR 0 1
96074: PUSH
96075: LD_INT 0
96077: DIFF
96078: ST_TO_ADDR
// if not result [ 1 ] then
96079: LD_VAR 0 2
96083: PUSH
96084: LD_INT 1
96086: ARRAY
96087: NOT
96088: IFFALSE 96108
// result := Delete ( result , 1 ) ;
96090: LD_ADDR_VAR 0 2
96094: PUSH
96095: LD_VAR 0 2
96099: PPUSH
96100: LD_INT 1
96102: PPUSH
96103: CALL_OW 3
96107: ST_TO_ADDR
// end ;
96108: LD_VAR 0 2
96112: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
96113: LD_INT 0
96115: PPUSH
96116: PPUSH
96117: PPUSH
96118: PPUSH
// sibRocketRange := 25 ;
96119: LD_ADDR_VAR 0 6
96123: PUSH
96124: LD_INT 25
96126: ST_TO_ADDR
// result := false ;
96127: LD_ADDR_VAR 0 4
96131: PUSH
96132: LD_INT 0
96134: ST_TO_ADDR
// for i := 0 to 5 do
96135: LD_ADDR_VAR 0 5
96139: PUSH
96140: DOUBLE
96141: LD_INT 0
96143: DEC
96144: ST_TO_ADDR
96145: LD_INT 5
96147: PUSH
96148: FOR_TO
96149: IFFALSE 96216
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
96151: LD_VAR 0 1
96155: PPUSH
96156: LD_VAR 0 5
96160: PPUSH
96161: LD_VAR 0 6
96165: PPUSH
96166: CALL_OW 272
96170: PPUSH
96171: LD_VAR 0 2
96175: PPUSH
96176: LD_VAR 0 5
96180: PPUSH
96181: LD_VAR 0 6
96185: PPUSH
96186: CALL_OW 273
96190: PPUSH
96191: LD_VAR 0 3
96195: PPUSH
96196: CALL_OW 309
96200: IFFALSE 96214
// begin result := true ;
96202: LD_ADDR_VAR 0 4
96206: PUSH
96207: LD_INT 1
96209: ST_TO_ADDR
// exit ;
96210: POP
96211: POP
96212: GO 96218
// end ;
96214: GO 96148
96216: POP
96217: POP
// end ;
96218: LD_VAR 0 4
96222: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
96223: LD_INT 0
96225: PPUSH
96226: PPUSH
96227: PPUSH
// if btype = b_depot then
96228: LD_VAR 0 2
96232: PUSH
96233: LD_INT 0
96235: EQUAL
96236: IFFALSE 96248
// begin result := true ;
96238: LD_ADDR_VAR 0 3
96242: PUSH
96243: LD_INT 1
96245: ST_TO_ADDR
// exit ;
96246: GO 96364
// end ; pom := GetBase ( depot ) ;
96248: LD_ADDR_VAR 0 4
96252: PUSH
96253: LD_VAR 0 1
96257: PPUSH
96258: CALL_OW 274
96262: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
96263: LD_ADDR_VAR 0 5
96267: PUSH
96268: LD_VAR 0 2
96272: PPUSH
96273: LD_VAR 0 1
96277: PPUSH
96278: CALL_OW 248
96282: PPUSH
96283: CALL_OW 450
96287: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
96288: LD_ADDR_VAR 0 3
96292: PUSH
96293: LD_VAR 0 4
96297: PPUSH
96298: LD_INT 1
96300: PPUSH
96301: CALL_OW 275
96305: PUSH
96306: LD_VAR 0 5
96310: PUSH
96311: LD_INT 1
96313: ARRAY
96314: GREATEREQUAL
96315: PUSH
96316: LD_VAR 0 4
96320: PPUSH
96321: LD_INT 2
96323: PPUSH
96324: CALL_OW 275
96328: PUSH
96329: LD_VAR 0 5
96333: PUSH
96334: LD_INT 2
96336: ARRAY
96337: GREATEREQUAL
96338: AND
96339: PUSH
96340: LD_VAR 0 4
96344: PPUSH
96345: LD_INT 3
96347: PPUSH
96348: CALL_OW 275
96352: PUSH
96353: LD_VAR 0 5
96357: PUSH
96358: LD_INT 3
96360: ARRAY
96361: GREATEREQUAL
96362: AND
96363: ST_TO_ADDR
// end ;
96364: LD_VAR 0 3
96368: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
96369: LD_INT 0
96371: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
96372: LD_VAR 0 1
96376: PPUSH
96377: LD_VAR 0 2
96381: PPUSH
96382: LD_INT 0
96384: PPUSH
96385: LD_INT 0
96387: PPUSH
96388: LD_INT 1
96390: PPUSH
96391: LD_INT 0
96393: PPUSH
96394: CALL_OW 587
// end ;
96398: LD_VAR 0 3
96402: RET
// export function CenterOnNow ( unit ) ; begin
96403: LD_INT 0
96405: PPUSH
// result := IsInUnit ( unit ) ;
96406: LD_ADDR_VAR 0 2
96410: PUSH
96411: LD_VAR 0 1
96415: PPUSH
96416: CALL_OW 310
96420: ST_TO_ADDR
// if not result then
96421: LD_VAR 0 2
96425: NOT
96426: IFFALSE 96438
// result := unit ;
96428: LD_ADDR_VAR 0 2
96432: PUSH
96433: LD_VAR 0 1
96437: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
96438: LD_VAR 0 1
96442: PPUSH
96443: CALL_OW 87
// end ;
96447: LD_VAR 0 2
96451: RET
// export function ComMoveHex ( unit , hex ) ; begin
96452: LD_INT 0
96454: PPUSH
// if not hex then
96455: LD_VAR 0 2
96459: NOT
96460: IFFALSE 96464
// exit ;
96462: GO 96517
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
96464: LD_VAR 0 2
96468: PUSH
96469: LD_INT 1
96471: ARRAY
96472: PPUSH
96473: LD_VAR 0 2
96477: PUSH
96478: LD_INT 2
96480: ARRAY
96481: PPUSH
96482: CALL_OW 428
96486: IFFALSE 96490
// exit ;
96488: GO 96517
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
96490: LD_VAR 0 1
96494: PPUSH
96495: LD_VAR 0 2
96499: PUSH
96500: LD_INT 1
96502: ARRAY
96503: PPUSH
96504: LD_VAR 0 2
96508: PUSH
96509: LD_INT 2
96511: ARRAY
96512: PPUSH
96513: CALL_OW 111
// end ;
96517: LD_VAR 0 3
96521: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
96522: LD_INT 0
96524: PPUSH
96525: PPUSH
96526: PPUSH
// if not unit or not enemy then
96527: LD_VAR 0 1
96531: NOT
96532: PUSH
96533: LD_VAR 0 2
96537: NOT
96538: OR
96539: IFFALSE 96543
// exit ;
96541: GO 96667
// x := GetX ( enemy ) ;
96543: LD_ADDR_VAR 0 4
96547: PUSH
96548: LD_VAR 0 2
96552: PPUSH
96553: CALL_OW 250
96557: ST_TO_ADDR
// y := GetY ( enemy ) ;
96558: LD_ADDR_VAR 0 5
96562: PUSH
96563: LD_VAR 0 2
96567: PPUSH
96568: CALL_OW 251
96572: ST_TO_ADDR
// if ValidHex ( x , y ) then
96573: LD_VAR 0 4
96577: PPUSH
96578: LD_VAR 0 5
96582: PPUSH
96583: CALL_OW 488
96587: IFFALSE 96667
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
96589: LD_VAR 0 2
96593: PPUSH
96594: CALL_OW 247
96598: PUSH
96599: LD_INT 3
96601: PUSH
96602: LD_INT 2
96604: PUSH
96605: EMPTY
96606: LIST
96607: LIST
96608: IN
96609: PUSH
96610: LD_VAR 0 1
96614: PPUSH
96615: CALL_OW 255
96619: PPUSH
96620: LD_VAR 0 2
96624: PPUSH
96625: CALL_OW 292
96629: OR
96630: IFFALSE 96648
// ComAttackUnit ( unit , enemy ) else
96632: LD_VAR 0 1
96636: PPUSH
96637: LD_VAR 0 2
96641: PPUSH
96642: CALL_OW 115
96646: GO 96667
// ComAgressiveMove ( unit , x , y ) ;
96648: LD_VAR 0 1
96652: PPUSH
96653: LD_VAR 0 4
96657: PPUSH
96658: LD_VAR 0 5
96662: PPUSH
96663: CALL_OW 114
// end ;
96667: LD_VAR 0 3
96671: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
96672: LD_INT 0
96674: PPUSH
96675: PPUSH
96676: PPUSH
// list := AreaToList ( area , 0 ) ;
96677: LD_ADDR_VAR 0 5
96681: PUSH
96682: LD_VAR 0 1
96686: PPUSH
96687: LD_INT 0
96689: PPUSH
96690: CALL_OW 517
96694: ST_TO_ADDR
// if not list then
96695: LD_VAR 0 5
96699: NOT
96700: IFFALSE 96704
// exit ;
96702: GO 96834
// if all then
96704: LD_VAR 0 2
96708: IFFALSE 96796
// begin for i := 1 to list [ 1 ] do
96710: LD_ADDR_VAR 0 4
96714: PUSH
96715: DOUBLE
96716: LD_INT 1
96718: DEC
96719: ST_TO_ADDR
96720: LD_VAR 0 5
96724: PUSH
96725: LD_INT 1
96727: ARRAY
96728: PUSH
96729: FOR_TO
96730: IFFALSE 96792
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
96732: LD_ADDR_VAR 0 3
96736: PUSH
96737: LD_VAR 0 3
96741: PPUSH
96742: LD_VAR 0 3
96746: PUSH
96747: LD_INT 1
96749: PLUS
96750: PPUSH
96751: LD_VAR 0 5
96755: PUSH
96756: LD_INT 1
96758: ARRAY
96759: PUSH
96760: LD_VAR 0 4
96764: ARRAY
96765: PUSH
96766: LD_VAR 0 5
96770: PUSH
96771: LD_INT 2
96773: ARRAY
96774: PUSH
96775: LD_VAR 0 4
96779: ARRAY
96780: PUSH
96781: EMPTY
96782: LIST
96783: LIST
96784: PPUSH
96785: CALL_OW 1
96789: ST_TO_ADDR
96790: GO 96729
96792: POP
96793: POP
// exit ;
96794: GO 96834
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
96796: LD_ADDR_VAR 0 3
96800: PUSH
96801: LD_VAR 0 5
96805: PUSH
96806: LD_INT 1
96808: ARRAY
96809: PUSH
96810: LD_INT 1
96812: ARRAY
96813: PUSH
96814: LD_VAR 0 5
96818: PUSH
96819: LD_INT 2
96821: ARRAY
96822: PUSH
96823: LD_INT 1
96825: ARRAY
96826: PUSH
96827: EMPTY
96828: LIST
96829: LIST
96830: PUSH
96831: EMPTY
96832: LIST
96833: ST_TO_ADDR
// end ;
96834: LD_VAR 0 3
96838: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
96839: LD_INT 0
96841: PPUSH
96842: PPUSH
// list := AreaToList ( area , 0 ) ;
96843: LD_ADDR_VAR 0 4
96847: PUSH
96848: LD_VAR 0 1
96852: PPUSH
96853: LD_INT 0
96855: PPUSH
96856: CALL_OW 517
96860: ST_TO_ADDR
// if not list then
96861: LD_VAR 0 4
96865: NOT
96866: IFFALSE 96870
// exit ;
96868: GO 96911
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
96870: LD_ADDR_VAR 0 3
96874: PUSH
96875: LD_VAR 0 4
96879: PUSH
96880: LD_INT 1
96882: ARRAY
96883: PUSH
96884: LD_INT 1
96886: ARRAY
96887: PUSH
96888: LD_VAR 0 4
96892: PUSH
96893: LD_INT 2
96895: ARRAY
96896: PUSH
96897: LD_INT 1
96899: ARRAY
96900: PUSH
96901: LD_VAR 0 2
96905: PUSH
96906: EMPTY
96907: LIST
96908: LIST
96909: LIST
96910: ST_TO_ADDR
// end ;
96911: LD_VAR 0 3
96915: RET
// export function First ( array ) ; begin
96916: LD_INT 0
96918: PPUSH
// if not array then
96919: LD_VAR 0 1
96923: NOT
96924: IFFALSE 96928
// exit ;
96926: GO 96942
// result := array [ 1 ] ;
96928: LD_ADDR_VAR 0 2
96932: PUSH
96933: LD_VAR 0 1
96937: PUSH
96938: LD_INT 1
96940: ARRAY
96941: ST_TO_ADDR
// end ;
96942: LD_VAR 0 2
96946: RET
// export function Last ( array ) ; begin
96947: LD_INT 0
96949: PPUSH
// if not array then
96950: LD_VAR 0 1
96954: NOT
96955: IFFALSE 96959
// exit ;
96957: GO 96975
// result := array [ array ] ;
96959: LD_ADDR_VAR 0 2
96963: PUSH
96964: LD_VAR 0 1
96968: PUSH
96969: LD_VAR 0 1
96973: ARRAY
96974: ST_TO_ADDR
// end ;
96975: LD_VAR 0 2
96979: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
96980: LD_INT 0
96982: PPUSH
96983: PPUSH
// result := [ ] ;
96984: LD_ADDR_VAR 0 5
96988: PUSH
96989: EMPTY
96990: ST_TO_ADDR
// if not array then
96991: LD_VAR 0 1
96995: NOT
96996: IFFALSE 97000
// exit ;
96998: GO 97112
// for i := 1 to array do
97000: LD_ADDR_VAR 0 6
97004: PUSH
97005: DOUBLE
97006: LD_INT 1
97008: DEC
97009: ST_TO_ADDR
97010: LD_VAR 0 1
97014: PUSH
97015: FOR_TO
97016: IFFALSE 97110
// if array [ i ] [ index ] = value then
97018: LD_VAR 0 1
97022: PUSH
97023: LD_VAR 0 6
97027: ARRAY
97028: PUSH
97029: LD_VAR 0 2
97033: ARRAY
97034: PUSH
97035: LD_VAR 0 3
97039: EQUAL
97040: IFFALSE 97108
// begin if indexColumn then
97042: LD_VAR 0 4
97046: IFFALSE 97082
// result := Join ( result , array [ i ] [ indexColumn ] ) else
97048: LD_ADDR_VAR 0 5
97052: PUSH
97053: LD_VAR 0 5
97057: PPUSH
97058: LD_VAR 0 1
97062: PUSH
97063: LD_VAR 0 6
97067: ARRAY
97068: PUSH
97069: LD_VAR 0 4
97073: ARRAY
97074: PPUSH
97075: CALL 92304 0 2
97079: ST_TO_ADDR
97080: GO 97108
// result := Join ( result , array [ i ] ) ;
97082: LD_ADDR_VAR 0 5
97086: PUSH
97087: LD_VAR 0 5
97091: PPUSH
97092: LD_VAR 0 1
97096: PUSH
97097: LD_VAR 0 6
97101: ARRAY
97102: PPUSH
97103: CALL 92304 0 2
97107: ST_TO_ADDR
// end ;
97108: GO 97015
97110: POP
97111: POP
// end ;
97112: LD_VAR 0 5
97116: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
97117: LD_INT 0
97119: PPUSH
// if not vehicles or not parkingPoint then
97120: LD_VAR 0 1
97124: NOT
97125: PUSH
97126: LD_VAR 0 2
97130: NOT
97131: OR
97132: IFFALSE 97136
// exit ;
97134: GO 97234
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
97136: LD_ADDR_VAR 0 1
97140: PUSH
97141: LD_VAR 0 1
97145: PPUSH
97146: LD_INT 50
97148: PUSH
97149: EMPTY
97150: LIST
97151: PUSH
97152: LD_INT 3
97154: PUSH
97155: LD_INT 92
97157: PUSH
97158: LD_VAR 0 2
97162: PUSH
97163: LD_INT 1
97165: ARRAY
97166: PUSH
97167: LD_VAR 0 2
97171: PUSH
97172: LD_INT 2
97174: ARRAY
97175: PUSH
97176: LD_INT 8
97178: PUSH
97179: EMPTY
97180: LIST
97181: LIST
97182: LIST
97183: LIST
97184: PUSH
97185: EMPTY
97186: LIST
97187: LIST
97188: PUSH
97189: EMPTY
97190: LIST
97191: LIST
97192: PPUSH
97193: CALL_OW 72
97197: ST_TO_ADDR
// if not vehicles then
97198: LD_VAR 0 1
97202: NOT
97203: IFFALSE 97207
// exit ;
97205: GO 97234
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
97207: LD_VAR 0 1
97211: PPUSH
97212: LD_VAR 0 2
97216: PUSH
97217: LD_INT 1
97219: ARRAY
97220: PPUSH
97221: LD_VAR 0 2
97225: PUSH
97226: LD_INT 2
97228: ARRAY
97229: PPUSH
97230: CALL_OW 111
// end ;
97234: LD_VAR 0 3
97238: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
97239: LD_INT 0
97241: PPUSH
97242: PPUSH
97243: PPUSH
// if not side or not area then
97244: LD_VAR 0 1
97248: NOT
97249: PUSH
97250: LD_VAR 0 2
97254: NOT
97255: OR
97256: IFFALSE 97260
// exit ;
97258: GO 97379
// tmp := AreaToList ( area , 0 ) ;
97260: LD_ADDR_VAR 0 5
97264: PUSH
97265: LD_VAR 0 2
97269: PPUSH
97270: LD_INT 0
97272: PPUSH
97273: CALL_OW 517
97277: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
97278: LD_ADDR_VAR 0 4
97282: PUSH
97283: DOUBLE
97284: LD_INT 1
97286: DEC
97287: ST_TO_ADDR
97288: LD_VAR 0 5
97292: PUSH
97293: LD_INT 1
97295: ARRAY
97296: PUSH
97297: FOR_TO
97298: IFFALSE 97377
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
97300: LD_VAR 0 5
97304: PUSH
97305: LD_INT 1
97307: ARRAY
97308: PUSH
97309: LD_VAR 0 4
97313: ARRAY
97314: PPUSH
97315: LD_VAR 0 5
97319: PUSH
97320: LD_INT 2
97322: ARRAY
97323: PUSH
97324: LD_VAR 0 4
97328: ARRAY
97329: PPUSH
97330: CALL_OW 351
97334: IFFALSE 97375
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
97336: LD_VAR 0 5
97340: PUSH
97341: LD_INT 1
97343: ARRAY
97344: PUSH
97345: LD_VAR 0 4
97349: ARRAY
97350: PPUSH
97351: LD_VAR 0 5
97355: PUSH
97356: LD_INT 2
97358: ARRAY
97359: PUSH
97360: LD_VAR 0 4
97364: ARRAY
97365: PPUSH
97366: LD_VAR 0 1
97370: PPUSH
97371: CALL_OW 244
// end ;
97375: GO 97297
97377: POP
97378: POP
// end ; end_of_file
97379: LD_VAR 0 3
97383: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
97384: LD_VAR 0 1
97388: PUSH
97389: LD_INT 200
97391: DOUBLE
97392: GREATEREQUAL
97393: IFFALSE 97401
97395: LD_INT 299
97397: DOUBLE
97398: LESSEQUAL
97399: IFTRUE 97403
97401: GO 97435
97403: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
97404: LD_VAR 0 1
97408: PPUSH
97409: LD_VAR 0 2
97413: PPUSH
97414: LD_VAR 0 3
97418: PPUSH
97419: LD_VAR 0 4
97423: PPUSH
97424: LD_VAR 0 5
97428: PPUSH
97429: CALL 50095 0 5
97433: GO 97512
97435: LD_INT 300
97437: DOUBLE
97438: GREATEREQUAL
97439: IFFALSE 97447
97441: LD_INT 399
97443: DOUBLE
97444: LESSEQUAL
97445: IFTRUE 97449
97447: GO 97511
97449: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
97450: LD_VAR 0 1
97454: PPUSH
97455: LD_VAR 0 2
97459: PPUSH
97460: LD_VAR 0 3
97464: PPUSH
97465: LD_VAR 0 4
97469: PPUSH
97470: LD_VAR 0 5
97474: PPUSH
97475: LD_VAR 0 6
97479: PPUSH
97480: LD_VAR 0 7
97484: PPUSH
97485: LD_VAR 0 8
97489: PPUSH
97490: LD_VAR 0 9
97494: PPUSH
97495: LD_VAR 0 10
97499: PPUSH
97500: LD_VAR 0 11
97504: PPUSH
97505: CALL 46420 0 11
97509: GO 97512
97511: POP
// end ;
97512: PPOPN 11
97514: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
97515: LD_VAR 0 1
97519: PPUSH
97520: LD_VAR 0 2
97524: PPUSH
97525: LD_VAR 0 3
97529: PPUSH
97530: LD_VAR 0 4
97534: PPUSH
97535: LD_VAR 0 5
97539: PPUSH
97540: CALL 49831 0 5
// end ; end_of_file
97544: PPOPN 5
97546: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
97547: LD_VAR 0 1
97551: PPUSH
97552: LD_VAR 0 2
97556: PPUSH
97557: LD_VAR 0 3
97561: PPUSH
97562: LD_VAR 0 4
97566: PPUSH
97567: LD_VAR 0 5
97571: PPUSH
97572: LD_VAR 0 6
97576: PPUSH
97577: CALL 34072 0 6
// end ;
97581: PPOPN 6
97583: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
97584: LD_INT 0
97586: PPUSH
// begin if not units then
97587: LD_VAR 0 1
97591: NOT
97592: IFFALSE 97596
// exit ;
97594: GO 97596
// end ;
97596: PPOPN 7
97598: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
97599: CALL 33959 0 0
// end ;
97603: PPOPN 1
97605: END
