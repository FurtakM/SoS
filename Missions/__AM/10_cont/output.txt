// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Mike ; export Cornell ; export Truman ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export ruMech ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned , ruDepotConstructed , spawnRussians ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog , snipersTrained ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 30
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 22
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 31
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 40
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 41
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 42
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 43
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 44
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 52
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 49
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 48
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 50
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 51
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 63
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// ruMech := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 123: LD_ADDR_EXP 53
 127: PUSH
 128: LD_INT 4
 130: PUSH
 131: LD_INT 5
 133: PUSH
 134: LD_INT 6
 136: PUSH
 137: LD_INT 6
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: PUSH
 146: LD_OWVAR 67
 150: ARRAY
 151: ST_TO_ADDR
// eventVar1 = 0 ;
 152: LD_ADDR_EXP 67
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// eventVar2 = 0 ;
 160: LD_ADDR_EXP 68
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// fastEnd = 0 ;
 168: LD_ADDR_EXP 65
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// KhatamStatus = 0 ;
 176: LD_ADDR_EXP 55
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// GensherStatus = 0 ;
 184: LD_ADDR_EXP 54
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// cratesSpawned = 0 ;
 192: LD_ADDR_EXP 58
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 , 2 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 61
 204: PUSH
 205: LD_INT 1
 207: PUSH
 208: LD_INT 2
 210: PUSH
 211: LD_INT 2
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 , 4 ] [ Difficulty ] ;
 229: LD_ADDR_EXP 62
 233: PUSH
 234: LD_INT 2
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: LD_INT 4
 242: PUSH
 243: LD_INT 4
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: PUSH
 252: LD_OWVAR 67
 256: ARRAY
 257: ST_TO_ADDR
// snipersTrained := false ;
 258: LD_ADDR_EXP 64
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// ruDepotConstructed := false ;
 266: LD_ADDR_EXP 59
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// spawnRussians := false ;
 274: LD_ADDR_EXP 60
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// attackAvalaible = 1 ;
 282: LD_ADDR_EXP 66
 286: PUSH
 287: LD_INT 1
 289: ST_TO_ADDR
// mission_prefix := 10c_ ;
 290: LD_ADDR_EXP 56
 294: PUSH
 295: LD_STRING 10c_
 297: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 298: LD_ADDR_EXP 57
 302: PUSH
 303: LD_STRING 10_
 305: ST_TO_ADDR
// debugMode = 0 ;
 306: LD_ADDR_EXP 69
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// Video ( true ) ;
 314: LD_INT 1
 316: PPUSH
 317: CALL 87569 0 1
// CreateNature ;
 321: CALL 27290 0 0
// PrepareDifficulty ;
 325: CALL 11808 0 0
// PrepareJMMTeam ;
 329: CALL 1363 0 0
// PrepareCathyTeam ;
 333: CALL 2599 0 0
// PlaceMines ( MineField1 , 1 + Difficulty ) ;
 337: LD_INT 24
 339: PPUSH
 340: LD_INT 1
 342: PUSH
 343: LD_OWVAR 67
 347: PLUS
 348: PPUSH
 349: CALL 21668 0 2
// if Difficulty > 1 then
 353: LD_OWVAR 67
 357: PUSH
 358: LD_INT 1
 360: GREATER
 361: IFFALSE 375
// PlaceMines ( MineField2 , Difficulty ) ;
 363: LD_INT 25
 365: PPUSH
 366: LD_OWVAR 67
 370: PPUSH
 371: CALL 21668 0 2
// if Difficulty > 2 then
 375: LD_OWVAR 67
 379: PUSH
 380: LD_INT 2
 382: GREATER
 383: IFFALSE 397
// PlaceMines ( MineField3 , Difficulty ) ;
 385: LD_INT 26
 387: PPUSH
 388: LD_OWVAR 67
 392: PPUSH
 393: CALL 21668 0 2
// PrepareArabianCommander ;
 397: CALL 4250 0 0
// PrepareArabian ;
 401: CALL 4302 0 0
// BuildArabianBase ;
 405: CALL 14623 0 0
// TameApemans ;
 409: CALL 20473 0 0
// end ;
 413: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 414: LD_EXP 69
 418: PUSH
 419: LD_INT 1
 421: EQUAL
 422: IFFALSE 728
 424: GO 426
 426: DISABLE
 427: LD_INT 0
 429: PPUSH
// begin enable ;
 430: ENABLE
// fogoff ( true ) ;
 431: LD_INT 1
 433: PPUSH
 434: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 438: LD_ADDR_VAR 0 1
 442: PUSH
 443: LD_INT 22
 445: PUSH
 446: LD_INT 1
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: PUSH
 453: LD_INT 21
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PPUSH
 467: CALL_OW 69
 471: PUSH
 472: FOR_IN
 473: IFFALSE 489
// SetLives ( i , 1000 ) ;
 475: LD_VAR 0 1
 479: PPUSH
 480: LD_INT 1000
 482: PPUSH
 483: CALL_OW 234
 487: GO 472
 489: POP
 490: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 491: LD_ADDR_VAR 0 1
 495: PUSH
 496: LD_INT 22
 498: PUSH
 499: LD_INT 1
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: PUSH
 506: LD_INT 2
 508: PUSH
 509: LD_INT 30
 511: PUSH
 512: LD_INT 0
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 30
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: PPUSH
 538: CALL_OW 69
 542: PUSH
 543: FOR_IN
 544: IFFALSE 568
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 546: LD_VAR 0 1
 550: PPUSH
 551: CALL_OW 274
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: LD_INT 9999
 561: PPUSH
 562: CALL_OW 277
 566: GO 543
 568: POP
 569: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 570: LD_ADDR_VAR 0 1
 574: PUSH
 575: LD_INT 22
 577: PUSH
 578: LD_INT 1
 580: PUSH
 581: EMPTY
 582: LIST
 583: LIST
 584: PUSH
 585: LD_INT 2
 587: PUSH
 588: LD_INT 30
 590: PUSH
 591: LD_INT 0
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: PUSH
 598: LD_INT 30
 600: PUSH
 601: LD_INT 1
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: PUSH
 608: EMPTY
 609: LIST
 610: LIST
 611: LIST
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: PPUSH
 617: CALL_OW 69
 621: PUSH
 622: FOR_IN
 623: IFFALSE 647
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 625: LD_VAR 0 1
 629: PPUSH
 630: CALL_OW 274
 634: PPUSH
 635: LD_INT 2
 637: PPUSH
 638: LD_INT 9999
 640: PPUSH
 641: CALL_OW 277
 645: GO 622
 647: POP
 648: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 649: LD_ADDR_VAR 0 1
 653: PUSH
 654: LD_INT 22
 656: PUSH
 657: LD_INT 1
 659: PUSH
 660: EMPTY
 661: LIST
 662: LIST
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 30
 669: PUSH
 670: LD_INT 0
 672: PUSH
 673: EMPTY
 674: LIST
 675: LIST
 676: PUSH
 677: LD_INT 30
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: PPUSH
 696: CALL_OW 69
 700: PUSH
 701: FOR_IN
 702: IFFALSE 726
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 704: LD_VAR 0 1
 708: PPUSH
 709: CALL_OW 274
 713: PPUSH
 714: LD_INT 3
 716: PPUSH
 717: LD_INT 9999
 719: PPUSH
 720: CALL_OW 277
 724: GO 701
 726: POP
 727: POP
// end ;
 728: PPOPN 1
 730: END
// every 0 0$1 trigger FilterAllUnits ( [ f_class , class_sniper ] ) do
 731: LD_INT 25
 733: PUSH
 734: LD_INT 5
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PPUSH
 741: CALL_OW 69
 745: IFFALSE 758
 747: GO 749
 749: DISABLE
// snipersTrained := true ;
 750: LD_ADDR_EXP 64
 754: PUSH
 755: LD_INT 1
 757: ST_TO_ADDR
 758: END
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and spawnRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 759: LD_INT 1
 761: PPUSH
 762: LD_INT 2
 764: PPUSH
 765: CALL_OW 81
 769: PUSH
 770: LD_INT 1
 772: EQUAL
 773: PUSH
 774: LD_EXP 60
 778: AND
 779: PUSH
 780: LD_INT 22
 782: PUSH
 783: LD_INT 3
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: PPUSH
 790: CALL_OW 69
 794: PUSH
 795: LD_INT 0
 797: EQUAL
 798: AND
 799: IFFALSE 811
 801: GO 803
 803: DISABLE
// SetAchievement ( ACH_POWER ) ;
 804: LD_STRING ACH_POWER
 806: PPUSH
 807: CALL_OW 543
 811: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 812: LD_INT 22
 814: PUSH
 815: LD_INT 1
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 30
 824: PUSH
 825: LD_INT 1
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: PPUSH
 836: CALL_OW 69
 840: PUSH
 841: LD_INT 22
 843: PUSH
 844: LD_INT 1
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: LD_INT 30
 853: PUSH
 854: LD_INT 32
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PPUSH
 865: CALL_OW 69
 869: AND
 870: PUSH
 871: LD_INT 22
 873: PUSH
 874: LD_INT 1
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 30
 883: PUSH
 884: LD_INT 33
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: PUSH
 891: EMPTY
 892: LIST
 893: LIST
 894: PPUSH
 895: CALL_OW 69
 899: AND
 900: PUSH
 901: LD_INT 22
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: PUSH
 911: LD_INT 30
 913: PUSH
 914: LD_INT 5
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PPUSH
 925: CALL_OW 69
 929: AND
 930: PUSH
 931: LD_INT 22
 933: PUSH
 934: LD_INT 1
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 30
 943: PUSH
 944: LD_INT 3
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: PPUSH
 955: CALL_OW 69
 959: AND
 960: PUSH
 961: LD_INT 22
 963: PUSH
 964: LD_INT 1
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 30
 973: PUSH
 974: LD_INT 36
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 69
 989: AND
 990: PUSH
 991: LD_INT 22
 993: PUSH
 994: LD_INT 1
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: PUSH
1001: LD_INT 30
1003: PUSH
1004: LD_INT 31
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: PPUSH
1015: CALL_OW 69
1019: AND
1020: PUSH
1021: LD_INT 22
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: PUSH
1031: LD_INT 30
1033: PUSH
1034: LD_INT 22
1036: PUSH
1037: EMPTY
1038: LIST
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PPUSH
1045: CALL_OW 69
1049: AND
1050: PUSH
1051: LD_INT 22
1053: PUSH
1054: LD_INT 1
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 30
1063: PUSH
1064: LD_INT 20
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PPUSH
1075: CALL_OW 69
1079: AND
1080: PUSH
1081: LD_INT 22
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: PUSH
1091: LD_INT 30
1093: PUSH
1094: LD_INT 19
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: PPUSH
1105: CALL_OW 69
1109: AND
1110: PUSH
1111: LD_INT 22
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: PUSH
1121: LD_INT 30
1123: PUSH
1124: LD_INT 16
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: PPUSH
1135: CALL_OW 69
1139: AND
1140: PUSH
1141: LD_INT 22
1143: PUSH
1144: LD_INT 1
1146: PUSH
1147: EMPTY
1148: LIST
1149: LIST
1150: PUSH
1151: LD_INT 30
1153: PUSH
1154: LD_INT 17
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PPUSH
1165: CALL_OW 69
1169: AND
1170: PUSH
1171: LD_INT 22
1173: PUSH
1174: LD_INT 1
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PUSH
1181: LD_INT 30
1183: PUSH
1184: LD_INT 21
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: PPUSH
1195: CALL_OW 69
1199: AND
1200: PUSH
1201: LD_INT 22
1203: PUSH
1204: LD_INT 1
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: PUSH
1211: LD_INT 30
1213: PUSH
1214: LD_INT 29
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 69
1229: AND
1230: PUSH
1231: LD_INT 22
1233: PUSH
1234: LD_INT 1
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: LD_INT 30
1243: PUSH
1244: LD_INT 30
1246: PUSH
1247: EMPTY
1248: LIST
1249: LIST
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: PPUSH
1255: CALL_OW 69
1259: AND
1260: PUSH
1261: LD_INT 22
1263: PUSH
1264: LD_INT 1
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 30
1273: PUSH
1274: LD_INT 27
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PPUSH
1285: CALL_OW 69
1289: AND
1290: PUSH
1291: LD_INT 22
1293: PUSH
1294: LD_INT 1
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PUSH
1301: LD_INT 30
1303: PUSH
1304: LD_INT 26
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PPUSH
1315: CALL_OW 69
1319: AND
1320: PUSH
1321: LD_INT 22
1323: PUSH
1324: LD_INT 1
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: PUSH
1331: LD_INT 30
1333: PUSH
1334: LD_INT 28
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: PPUSH
1345: CALL_OW 69
1349: AND
1350: IFFALSE 1362
1352: GO 1354
1354: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1355: LD_STRING ACH_ARCH
1357: PPUSH
1358: CALL_OW 543
1362: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
1363: LD_INT 0
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
1369: PPUSH
1370: PPUSH
// uc_side = 1 ;
1371: LD_ADDR_OWVAR 20
1375: PUSH
1376: LD_INT 1
1378: ST_TO_ADDR
// uc_nation = 1 ;
1379: LD_ADDR_OWVAR 21
1383: PUSH
1384: LD_INT 1
1386: ST_TO_ADDR
// count = 0 ;
1387: LD_ADDR_VAR 0 6
1391: PUSH
1392: LD_INT 0
1394: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 10_ ) ;
1395: LD_ADDR_EXP 1
1399: PUSH
1400: LD_STRING JMM
1402: PPUSH
1403: LD_INT 1
1405: PPUSH
1406: LD_STRING 10_
1408: PPUSH
1409: CALL 50148 0 3
1413: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
1414: LD_ADDR_EXP 22
1418: PUSH
1419: LD_EXP 22
1423: PUSH
1424: LD_EXP 1
1428: ADD
1429: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 10_ ) ;
1430: LD_ADDR_EXP 10
1434: PUSH
1435: LD_STRING Gary
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: LD_STRING 10_
1443: PPUSH
1444: CALL 50148 0 3
1448: ST_TO_ADDR
// if Gary then
1449: LD_EXP 10
1453: IFFALSE 1471
// JMMSquad = JMMSquad ^ Gary ;
1455: LD_ADDR_EXP 22
1459: PUSH
1460: LD_EXP 22
1464: PUSH
1465: LD_EXP 10
1469: ADD
1470: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , 10_ ) ;
1471: LD_ADDR_EXP 5
1475: PUSH
1476: LD_STRING Cyrus
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_STRING 10_
1484: PPUSH
1485: CALL 50148 0 3
1489: ST_TO_ADDR
// if Cyrus then
1490: LD_EXP 5
1494: IFFALSE 1512
// JMMSquad = JMMSquad ^ Cyrus ;
1496: LD_ADDR_EXP 22
1500: PUSH
1501: LD_EXP 22
1505: PUSH
1506: LD_EXP 5
1510: ADD
1511: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , 10_ ) ;
1512: LD_ADDR_EXP 4
1516: PUSH
1517: LD_STRING Bobby
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_STRING 10_
1525: PPUSH
1526: CALL 50148 0 3
1530: ST_TO_ADDR
// if Bobby then
1531: LD_EXP 4
1535: IFFALSE 1553
// JMMSquad = JMMSquad ^ Bobby ;
1537: LD_ADDR_EXP 22
1541: PUSH
1542: LD_EXP 22
1546: PUSH
1547: LD_EXP 4
1551: ADD
1552: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , 10_ ) ;
1553: LD_ADDR_EXP 6
1557: PUSH
1558: LD_STRING Lisa
1560: PPUSH
1561: LD_INT 1
1563: PPUSH
1564: LD_STRING 10_
1566: PPUSH
1567: CALL 50148 0 3
1571: ST_TO_ADDR
// if Lisa then
1572: LD_EXP 6
1576: IFFALSE 1594
// JMMSquad = JMMSquad ^ Lisa ;
1578: LD_ADDR_EXP 22
1582: PUSH
1583: LD_EXP 22
1587: PUSH
1588: LD_EXP 6
1592: ADD
1593: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , 10_ ) ;
1594: LD_ADDR_EXP 2
1598: PUSH
1599: LD_STRING Brown
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: LD_STRING 10_
1607: PPUSH
1608: CALL 50148 0 3
1612: ST_TO_ADDR
// if Brown then
1613: LD_EXP 2
1617: IFFALSE 1635
// JMMSquad = JMMSquad ^ Brown ;
1619: LD_ADDR_EXP 22
1623: PUSH
1624: LD_EXP 22
1628: PUSH
1629: LD_EXP 2
1633: ADD
1634: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , 10_ ) ;
1635: LD_ADDR_EXP 3
1639: PUSH
1640: LD_STRING Donaldson
1642: PPUSH
1643: LD_INT 1
1645: PPUSH
1646: LD_STRING 10_
1648: PPUSH
1649: CALL 50148 0 3
1653: ST_TO_ADDR
// if Donaldson then
1654: LD_EXP 3
1658: IFFALSE 1676
// JMMSquad = JMMSquad ^ Donaldson ;
1660: LD_ADDR_EXP 22
1664: PUSH
1665: LD_EXP 22
1669: PUSH
1670: LD_EXP 3
1674: ADD
1675: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 10_ ) ;
1676: LD_ADDR_EXP 7
1680: PUSH
1681: LD_STRING Frank
1683: PPUSH
1684: LD_INT 1
1686: PPUSH
1687: LD_STRING 10_
1689: PPUSH
1690: CALL 50148 0 3
1694: ST_TO_ADDR
// if Frank then
1695: LD_EXP 7
1699: IFFALSE 1717
// JMMSquad = JMMSquad ^ Frank ;
1701: LD_ADDR_EXP 22
1705: PUSH
1706: LD_EXP 22
1710: PUSH
1711: LD_EXP 7
1715: ADD
1716: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 10_ ) ;
1717: LD_ADDR_EXP 9
1721: PUSH
1722: LD_STRING Houten
1724: PPUSH
1725: LD_INT 1
1727: PPUSH
1728: LD_STRING 10_
1730: PPUSH
1731: CALL 50148 0 3
1735: ST_TO_ADDR
// if Houten then
1736: LD_EXP 9
1740: IFFALSE 1758
// JMMSquad = JMMSquad ^ Houten ;
1742: LD_ADDR_EXP 22
1746: PUSH
1747: LD_EXP 22
1751: PUSH
1752: LD_EXP 9
1756: ADD
1757: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1758: LD_ADDR_EXP 23
1762: PUSH
1763: LD_STRING OthersIn10
1765: PPUSH
1766: CALL_OW 31
1770: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
1771: LD_ADDR_EXP 26
1775: PUSH
1776: LD_STRING Powell
1778: PPUSH
1779: LD_INT 0
1781: PPUSH
1782: LD_STRING 
1784: PPUSH
1785: CALL 50148 0 3
1789: ST_TO_ADDR
// for i in JMMSquad do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: LD_EXP 22
1799: PUSH
1800: FOR_IN
1801: IFFALSE 2081
// begin if count < 3 then
1803: LD_VAR 0 6
1807: PUSH
1808: LD_INT 3
1810: LESS
1811: IFFALSE 1928
// begin vc_engine = 1 ;
1813: LD_ADDR_OWVAR 39
1817: PUSH
1818: LD_INT 1
1820: ST_TO_ADDR
// vc_control = 1 ;
1821: LD_ADDR_OWVAR 38
1825: PUSH
1826: LD_INT 1
1828: ST_TO_ADDR
// vc_weapon = 12 ;
1829: LD_ADDR_OWVAR 40
1833: PUSH
1834: LD_INT 12
1836: ST_TO_ADDR
// vc_chassis = 3 ;
1837: LD_ADDR_OWVAR 37
1841: PUSH
1842: LD_INT 3
1844: ST_TO_ADDR
// veh = CreateVehicle ;
1845: LD_ADDR_VAR 0 4
1849: PUSH
1850: CALL_OW 45
1854: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1855: LD_VAR 0 4
1859: PPUSH
1860: LD_INT 1
1862: PPUSH
1863: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1867: LD_VAR 0 4
1871: PPUSH
1872: LD_INT 2
1874: PPUSH
1875: LD_INT 0
1877: PPUSH
1878: CALL_OW 49
// if count mod 2 = 0 then
1882: LD_VAR 0 6
1886: PUSH
1887: LD_INT 2
1889: MOD
1890: PUSH
1891: LD_INT 0
1893: EQUAL
1894: IFFALSE 1913
// AddCargo ( veh , 1 , 100 ) else
1896: LD_VAR 0 4
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: LD_INT 100
1906: PPUSH
1907: CALL_OW 291
1911: GO 1928
// AddCargo ( veh , 3 , 100 ) end ;
1913: LD_VAR 0 4
1917: PPUSH
1918: LD_INT 3
1920: PPUSH
1921: LD_INT 100
1923: PPUSH
1924: CALL_OW 291
// if count >= 3 then
1928: LD_VAR 0 6
1932: PUSH
1933: LD_INT 3
1935: GREATEREQUAL
1936: IFFALSE 2051
// begin vc_engine = 1 ;
1938: LD_ADDR_OWVAR 39
1942: PUSH
1943: LD_INT 1
1945: ST_TO_ADDR
// vc_control = 1 ;
1946: LD_ADDR_OWVAR 38
1950: PUSH
1951: LD_INT 1
1953: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1954: LD_ADDR_OWVAR 40
1958: PUSH
1959: LD_INT 3
1961: PUSH
1962: LD_INT 4
1964: PUSH
1965: LD_INT 5
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: LD_INT 1
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: CALL_OW 12
1983: ARRAY
1984: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
1985: LD_ADDR_OWVAR 37
1989: PUSH
1990: LD_INT 2
1992: PUSH
1993: LD_INT 3
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: LD_VAR 0 2
2004: PUSH
2005: LD_INT 2
2007: MOD
2008: PUSH
2009: LD_INT 1
2011: PLUS
2012: ARRAY
2013: ST_TO_ADDR
// veh = CreateVehicle ;
2014: LD_ADDR_VAR 0 4
2018: PUSH
2019: CALL_OW 45
2023: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2024: LD_VAR 0 4
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2036: LD_VAR 0 4
2040: PPUSH
2041: LD_INT 2
2043: PPUSH
2044: LD_INT 0
2046: PPUSH
2047: CALL_OW 49
// end ; count = count + 1 ;
2051: LD_ADDR_VAR 0 6
2055: PUSH
2056: LD_VAR 0 6
2060: PUSH
2061: LD_INT 1
2063: PLUS
2064: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2065: LD_VAR 0 2
2069: PPUSH
2070: LD_VAR 0 4
2074: PPUSH
2075: CALL_OW 52
// end ;
2079: GO 1800
2081: POP
2082: POP
// for i := 1 to others10 do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 1
2091: DEC
2092: ST_TO_ADDR
2093: LD_EXP 23
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2330
// begin if i < [ 5 , 4 , 3 , 3 ] [ Difficulty ] then
2101: LD_VAR 0 2
2105: PUSH
2106: LD_INT 5
2108: PUSH
2109: LD_INT 4
2111: PUSH
2112: LD_INT 3
2114: PUSH
2115: LD_INT 3
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: PUSH
2124: LD_OWVAR 67
2128: ARRAY
2129: LESS
2130: IFFALSE 2283
// begin vc_engine = 1 ;
2132: LD_ADDR_OWVAR 39
2136: PUSH
2137: LD_INT 1
2139: ST_TO_ADDR
// vc_control = 1 ;
2140: LD_ADDR_OWVAR 38
2144: PUSH
2145: LD_INT 1
2147: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2148: LD_ADDR_OWVAR 40
2152: PUSH
2153: LD_INT 3
2155: PUSH
2156: LD_INT 4
2158: PUSH
2159: LD_INT 5
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_INT 3
2172: PPUSH
2173: CALL_OW 12
2177: ARRAY
2178: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
2179: LD_ADDR_OWVAR 37
2183: PUSH
2184: LD_INT 2
2186: PUSH
2187: LD_INT 3
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_VAR 0 2
2198: PUSH
2199: LD_INT 2
2201: MOD
2202: PUSH
2203: LD_INT 1
2205: PLUS
2206: ARRAY
2207: ST_TO_ADDR
// veh = CreateVehicle ;
2208: LD_ADDR_VAR 0 4
2212: PUSH
2213: CALL_OW 45
2217: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2218: LD_VAR 0 4
2222: PPUSH
2223: LD_INT 1
2225: PPUSH
2226: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2230: LD_VAR 0 4
2234: PPUSH
2235: LD_INT 2
2237: PPUSH
2238: LD_INT 0
2240: PPUSH
2241: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2245: LD_ADDR_EXP 30
2249: PUSH
2250: LD_EXP 30
2254: PUSH
2255: LD_VAR 0 4
2259: ADD
2260: ST_TO_ADDR
// PlaceHumanInUnit ( others10 [ i ] , veh ) ;
2261: LD_EXP 23
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PPUSH
2272: LD_VAR 0 4
2276: PPUSH
2277: CALL_OW 52
// end else
2281: GO 2328
// begin PlaceUnitXYR ( others10 [ i ] , 106 , 33 , 6 , false ) ;
2283: LD_EXP 23
2287: PUSH
2288: LD_VAR 0 2
2292: ARRAY
2293: PPUSH
2294: LD_INT 106
2296: PPUSH
2297: LD_INT 33
2299: PPUSH
2300: LD_INT 6
2302: PPUSH
2303: LD_INT 0
2305: PPUSH
2306: CALL_OW 50
// SetSide ( others10 [ i ] , 4 ) ;
2310: LD_EXP 23
2314: PUSH
2315: LD_VAR 0 2
2319: ARRAY
2320: PPUSH
2321: LD_INT 4
2323: PPUSH
2324: CALL_OW 235
// end ; end ;
2328: GO 2098
2330: POP
2331: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
2332: LD_INT 22
2334: PUSH
2335: LD_INT 1
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PUSH
2342: LD_INT 21
2344: PUSH
2345: LD_INT 1
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PPUSH
2356: CALL_OW 69
2360: PPUSH
2361: LD_INT 1
2363: PPUSH
2364: CALL_OW 336
// end ;
2368: LD_VAR 0 1
2372: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
2373: LD_INT 0
2375: PPUSH
2376: PPUSH
2377: PPUSH
2378: PPUSH
2379: PPUSH
// uc_side = 1 ;
2380: LD_ADDR_OWVAR 20
2384: PUSH
2385: LD_INT 1
2387: ST_TO_ADDR
// uc_nation = 1 ;
2388: LD_ADDR_OWVAR 21
2392: PUSH
2393: LD_INT 1
2395: ST_TO_ADDR
// for i := 1 to 10 do
2396: LD_ADDR_VAR 0 2
2400: PUSH
2401: DOUBLE
2402: LD_INT 1
2404: DEC
2405: ST_TO_ADDR
2406: LD_INT 10
2408: PUSH
2409: FOR_TO
2410: IFFALSE 2592
// begin vc_engine = 1 ;
2412: LD_ADDR_OWVAR 39
2416: PUSH
2417: LD_INT 1
2419: ST_TO_ADDR
// vc_control = 1 ;
2420: LD_ADDR_OWVAR 38
2424: PUSH
2425: LD_INT 1
2427: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2428: LD_ADDR_OWVAR 40
2432: PUSH
2433: LD_INT 3
2435: PUSH
2436: LD_INT 4
2438: PUSH
2439: LD_INT 5
2441: PUSH
2442: LD_INT 12
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 4
2456: PPUSH
2457: CALL_OW 12
2461: ARRAY
2462: ST_TO_ADDR
// vc_chassis = 3 ;
2463: LD_ADDR_OWVAR 37
2467: PUSH
2468: LD_INT 3
2470: ST_TO_ADDR
// veh = CreateVehicle ;
2471: LD_ADDR_VAR 0 3
2475: PUSH
2476: CALL_OW 45
2480: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2481: LD_VAR 0 3
2485: PPUSH
2486: LD_INT 1
2488: PPUSH
2489: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2493: LD_VAR 0 3
2497: PPUSH
2498: LD_INT 2
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2508: LD_ADDR_EXP 30
2512: PUSH
2513: LD_EXP 30
2517: PUSH
2518: LD_VAR 0 3
2522: ADD
2523: ST_TO_ADDR
// if vc_weapon = 12 then
2524: LD_OWVAR 40
2528: PUSH
2529: LD_INT 12
2531: EQUAL
2532: IFFALSE 2590
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2534: LD_ADDR_VAR 0 4
2538: PUSH
2539: LD_INT 5
2541: PPUSH
2542: LD_INT 10
2544: PPUSH
2545: CALL_OW 12
2549: PUSH
2550: LD_INT 10
2552: MUL
2553: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2554: LD_VAR 0 3
2558: PPUSH
2559: LD_INT 1
2561: PUSH
2562: LD_INT 3
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 1
2571: PPUSH
2572: LD_INT 2
2574: PPUSH
2575: CALL_OW 12
2579: ARRAY
2580: PPUSH
2581: LD_VAR 0 4
2585: PPUSH
2586: CALL_OW 291
// end ; end ;
2590: GO 2409
2592: POP
2593: POP
// end ;
2594: LD_VAR 0 1
2598: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2599: LD_INT 0
2601: PPUSH
2602: PPUSH
2603: PPUSH
// uc_side = 4 ;
2604: LD_ADDR_OWVAR 20
2608: PUSH
2609: LD_INT 4
2611: ST_TO_ADDR
// uc_nation = 1 ;
2612: LD_ADDR_OWVAR 21
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// if LoadVariable ( 08_SikorskiStatus , false ) then
2620: LD_STRING 08_SikorskiStatus
2622: PPUSH
2623: LD_INT 0
2625: PPUSH
2626: CALL_OW 30
2630: IFFALSE 2651
// Truman := PrepareUnit ( Truman , false ,  ) ;
2632: LD_ADDR_EXP 21
2636: PUSH
2637: LD_STRING Truman
2639: PPUSH
2640: LD_INT 0
2642: PPUSH
2643: LD_STRING 
2645: PPUSH
2646: CALL 50148 0 3
2650: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ,  ) ;
2651: LD_ADDR_EXP 11
2655: PUSH
2656: LD_STRING Simms
2658: PPUSH
2659: LD_INT 0
2661: PPUSH
2662: LD_STRING 
2664: PPUSH
2665: CALL 50148 0 3
2669: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 08_ ) ;
2670: LD_ADDR_EXP 12
2674: PUSH
2675: LD_STRING Denis
2677: PPUSH
2678: LD_INT 1
2680: PPUSH
2681: LD_STRING 08_
2683: PPUSH
2684: CALL 50148 0 3
2688: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 08_ ) ;
2689: LD_ADDR_EXP 13
2693: PUSH
2694: LD_STRING Joan
2696: PPUSH
2697: LD_INT 1
2699: PPUSH
2700: LD_STRING 08_
2702: PPUSH
2703: CALL 50148 0 3
2707: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , true , 08_ ) ;
2708: LD_ADDR_EXP 19
2712: PUSH
2713: LD_STRING Mike
2715: PPUSH
2716: LD_INT 1
2718: PPUSH
2719: LD_STRING 08_
2721: PPUSH
2722: CALL 50148 0 3
2726: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2727: LD_STRING 08_Khatam
2729: PPUSH
2730: CALL_OW 28
2734: IFFALSE 2757
// Khatam = PrepareUnit ( Khatam , true , 08_ ) else
2736: LD_ADDR_EXP 14
2740: PUSH
2741: LD_STRING Khatam
2743: PPUSH
2744: LD_INT 1
2746: PPUSH
2747: LD_STRING 08_
2749: PPUSH
2750: CALL 50148 0 3
2754: ST_TO_ADDR
2755: GO 2785
// if TestCharacters ( 03_Khatam ) then
2757: LD_STRING 03_Khatam
2759: PPUSH
2760: CALL_OW 28
2764: IFFALSE 2785
// Khatam = PrepareUnit ( Khatam , true , 03_ ) ;
2766: LD_ADDR_EXP 14
2770: PUSH
2771: LD_STRING Khatam
2773: PPUSH
2774: LD_INT 1
2776: PPUSH
2777: LD_STRING 03_
2779: PPUSH
2780: CALL 50148 0 3
2784: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 08_ ) ;
2785: LD_ADDR_EXP 15
2789: PUSH
2790: LD_STRING Gladstone
2792: PPUSH
2793: LD_INT 1
2795: PPUSH
2796: LD_STRING 08_
2798: PPUSH
2799: CALL 50148 0 3
2803: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ,  ) ;
2804: LD_ADDR_EXP 17
2808: PUSH
2809: LD_STRING DeltaDoctor
2811: PPUSH
2812: LD_INT 1
2814: PPUSH
2815: LD_STRING 
2817: PPUSH
2818: CALL 50148 0 3
2822: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 08_ ) ;
2823: LD_ADDR_EXP 7
2827: PUSH
2828: LD_STRING Frank
2830: PPUSH
2831: LD_INT 1
2833: PPUSH
2834: LD_STRING 08_
2836: PPUSH
2837: CALL 50148 0 3
2841: ST_TO_ADDR
// if Frank then
2842: LD_EXP 7
2846: IFFALSE 2869
// Kikuchi = PrepareUnit ( Yamoko , false ,  ) else
2848: LD_ADDR_EXP 8
2852: PUSH
2853: LD_STRING Yamoko
2855: PPUSH
2856: LD_INT 0
2858: PPUSH
2859: LD_STRING 
2861: PPUSH
2862: CALL 50148 0 3
2866: ST_TO_ADDR
2867: GO 2888
// Kikuchi = PrepareUnit ( Kikuchi , true , 08_ ) ;
2869: LD_ADDR_EXP 8
2873: PUSH
2874: LD_STRING Kikuchi
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_STRING 08_
2882: PPUSH
2883: CALL 50148 0 3
2887: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
2888: LD_ADDR_EXP 24
2892: PUSH
2893: LD_STRING 09_others
2895: PPUSH
2896: CALL_OW 31
2900: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
2901: LD_ADDR_EXP 25
2905: PUSH
2906: LD_STRING 09_apes
2908: PPUSH
2909: CALL_OW 31
2913: ST_TO_ADDR
// if Truman then
2914: LD_EXP 21
2918: IFFALSE 2935
// PlaceUnitArea ( Truman , CathyTeamSpawn , false ) ;
2920: LD_EXP 21
2924: PPUSH
2925: LD_INT 1
2927: PPUSH
2928: LD_INT 0
2930: PPUSH
2931: CALL_OW 49
// PlaceUnitArea ( Mike , CathyTeamSpawn , false ) ;
2935: LD_EXP 19
2939: PPUSH
2940: LD_INT 1
2942: PPUSH
2943: LD_INT 0
2945: PPUSH
2946: CALL_OW 49
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2950: LD_EXP 11
2954: PPUSH
2955: LD_INT 1
2957: PPUSH
2958: LD_INT 0
2960: PPUSH
2961: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2965: LD_EXP 12
2969: PPUSH
2970: LD_INT 1
2972: PPUSH
2973: LD_INT 0
2975: PPUSH
2976: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2980: LD_EXP 13
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 0
2990: PPUSH
2991: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2995: LD_EXP 14
2999: PPUSH
3000: LD_INT 1
3002: PPUSH
3003: LD_INT 0
3005: PPUSH
3006: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
3010: LD_EXP 15
3014: PPUSH
3015: LD_INT 1
3017: PPUSH
3018: LD_INT 0
3020: PPUSH
3021: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
3025: LD_EXP 17
3029: PPUSH
3030: LD_INT 1
3032: PPUSH
3033: LD_INT 0
3035: PPUSH
3036: CALL_OW 49
// if Kikuchi then
3040: LD_EXP 8
3044: IFFALSE 3061
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
3046: LD_EXP 8
3050: PPUSH
3051: LD_INT 1
3053: PPUSH
3054: LD_INT 0
3056: PPUSH
3057: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
3061: LD_EXP 11
3065: PUSH
3066: LD_EXP 14
3070: PUSH
3071: LD_EXP 12
3075: PUSH
3076: LD_EXP 15
3080: PUSH
3081: LD_EXP 17
3085: PUSH
3086: LD_EXP 13
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: PPUSH
3099: LD_INT 4
3101: PPUSH
3102: CALL_OW 336
// if others09 > 2 then
3106: LD_EXP 24
3110: PUSH
3111: LD_INT 2
3113: GREATER
3114: IFFALSE 3195
// begin for i := 1 to 3 do
3116: LD_ADDR_VAR 0 2
3120: PUSH
3121: DOUBLE
3122: LD_INT 1
3124: DEC
3125: ST_TO_ADDR
3126: LD_INT 3
3128: PUSH
3129: FOR_TO
3130: IFFALSE 3191
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
3132: LD_EXP 24
3136: PUSH
3137: LD_VAR 0 2
3141: ARRAY
3142: PPUSH
3143: LD_INT 1
3145: PPUSH
3146: LD_INT 0
3148: PPUSH
3149: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
3153: LD_ADDR_EXP 24
3157: PUSH
3158: LD_EXP 24
3162: PPUSH
3163: LD_INT 1
3165: PPUSH
3166: CALL_OW 3
3170: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
3171: LD_EXP 24
3175: PUSH
3176: LD_VAR 0 2
3180: ARRAY
3181: PPUSH
3182: LD_INT 2
3184: PPUSH
3185: CALL_OW 336
// end ;
3189: GO 3129
3191: POP
3192: POP
// end else
3193: GO 3255
// begin for i in others09 do
3195: LD_ADDR_VAR 0 2
3199: PUSH
3200: LD_EXP 24
3204: PUSH
3205: FOR_IN
3206: IFFALSE 3253
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3208: LD_VAR 0 2
3212: PPUSH
3213: LD_INT 1
3215: PPUSH
3216: LD_INT 0
3218: PPUSH
3219: CALL_OW 49
// others09 = others09 diff i ;
3223: LD_ADDR_EXP 24
3227: PUSH
3228: LD_EXP 24
3232: PUSH
3233: LD_VAR 0 2
3237: DIFF
3238: ST_TO_ADDR
// SetClass ( i , 2 ) ;
3239: LD_VAR 0 2
3243: PPUSH
3244: LD_INT 2
3246: PPUSH
3247: CALL_OW 336
// end ;
3251: GO 3205
3253: POP
3254: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
3255: LD_INT 22
3257: PUSH
3258: LD_INT 4
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PUSH
3265: LD_INT 25
3267: PUSH
3268: LD_INT 2
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: PPUSH
3279: CALL_OW 69
3283: PUSH
3284: LD_INT 0
3286: EQUAL
3287: IFFALSE 3419
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3289: LD_ADDR_VAR 0 3
3293: PUSH
3294: LD_INT 22
3296: PUSH
3297: LD_INT 4
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 25
3306: PUSH
3307: LD_INT 2
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: PPUSH
3318: CALL_OW 69
3322: PUSH
3323: LD_EXP 11
3327: PUSH
3328: LD_EXP 14
3332: PUSH
3333: LD_EXP 12
3337: PUSH
3338: LD_EXP 15
3342: PUSH
3343: LD_EXP 17
3347: PUSH
3348: LD_EXP 13
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: DIFF
3361: ST_TO_ADDR
// if not tmp then
3362: LD_VAR 0 3
3366: NOT
3367: IFFALSE 3403
// begin if Denis then
3369: LD_EXP 12
3373: IFFALSE 3389
// SetClass ( Denis , 2 ) else
3375: LD_EXP 12
3379: PPUSH
3380: LD_INT 2
3382: PPUSH
3383: CALL_OW 336
3387: GO 3401
// SetClass ( DeltaDoctor , 2 ) ;
3389: LD_EXP 17
3393: PPUSH
3394: LD_INT 2
3396: PPUSH
3397: CALL_OW 336
// end else
3401: GO 3419
// begin SetClass ( tmp [ 1 ] , 2 ) ;
3403: LD_VAR 0 3
3407: PUSH
3408: LD_INT 1
3410: ARRAY
3411: PPUSH
3412: LD_INT 2
3414: PPUSH
3415: CALL_OW 336
// end ; end ; for i in ape09 do
3419: LD_ADDR_VAR 0 2
3423: PUSH
3424: LD_EXP 25
3428: PUSH
3429: FOR_IN
3430: IFFALSE 3449
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3432: LD_VAR 0 2
3436: PPUSH
3437: LD_INT 1
3439: PPUSH
3440: LD_INT 0
3442: PPUSH
3443: CALL_OW 49
3447: GO 3429
3449: POP
3450: POP
// uc_side = 4 ;
3451: LD_ADDR_OWVAR 20
3455: PUSH
3456: LD_INT 4
3458: ST_TO_ADDR
// hc_class := 1 ;
3459: LD_ADDR_OWVAR 28
3463: PUSH
3464: LD_INT 1
3466: ST_TO_ADDR
// hc_sex := sex_female ;
3467: LD_ADDR_OWVAR 27
3471: PUSH
3472: LD_INT 2
3474: ST_TO_ADDR
// hc_gallery :=  ;
3475: LD_ADDR_OWVAR 33
3479: PUSH
3480: LD_STRING 
3482: ST_TO_ADDR
// hc_name :=  ;
3483: LD_ADDR_OWVAR 26
3487: PUSH
3488: LD_STRING 
3490: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3491: LD_ADDR_OWVAR 31
3495: PUSH
3496: LD_INT 1
3498: PUSH
3499: LD_INT 7
3501: PUSH
3502: LD_INT 1
3504: PUSH
3505: LD_INT 0
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: ST_TO_ADDR
// AmScout = CreateHuman ;
3514: LD_ADDR_EXP 18
3518: PUSH
3519: CALL_OW 44
3523: ST_TO_ADDR
// end ;
3524: LD_VAR 0 1
3528: RET
// export function PrepareCornell ; begin
3529: LD_INT 0
3531: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3532: LD_INT 4
3534: PPUSH
3535: LD_INT 4
3537: PPUSH
3538: CALL_OW 343
// uc_side = 4 ;
3542: LD_ADDR_OWVAR 20
3546: PUSH
3547: LD_INT 4
3549: ST_TO_ADDR
// uc_nation = 1 ;
3550: LD_ADDR_OWVAR 21
3554: PUSH
3555: LD_INT 1
3557: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornel , true , 03_ ) ;
3558: LD_ADDR_EXP 20
3562: PUSH
3563: LD_STRING Cornel
3565: PPUSH
3566: LD_INT 1
3568: PPUSH
3569: LD_STRING 03_
3571: PPUSH
3572: CALL 50148 0 3
3576: ST_TO_ADDR
// if not Cornell then
3577: LD_EXP 20
3581: NOT
3582: IFFALSE 3586
// exit ;
3584: GO 3694
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3586: LD_EXP 20
3590: PPUSH
3591: LD_INT 8
3593: PPUSH
3594: LD_INT 0
3596: PPUSH
3597: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3601: LD_EXP 20
3605: PPUSH
3606: LD_INT 350
3608: PPUSH
3609: CALL_OW 234
// if IsInUnit ( JMM ) then
3613: LD_EXP 1
3617: PPUSH
3618: CALL_OW 310
3622: IFFALSE 3665
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3624: LD_EXP 20
3628: PPUSH
3629: LD_EXP 1
3633: PPUSH
3634: CALL_OW 310
3638: PPUSH
3639: CALL_OW 250
3643: PPUSH
3644: LD_EXP 1
3648: PPUSH
3649: CALL_OW 310
3653: PPUSH
3654: CALL_OW 251
3658: PPUSH
3659: CALL_OW 111
3663: GO 3694
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3665: LD_EXP 20
3669: PPUSH
3670: LD_EXP 1
3674: PPUSH
3675: CALL_OW 250
3679: PPUSH
3680: LD_EXP 1
3684: PPUSH
3685: CALL_OW 251
3689: PPUSH
3690: CALL_OW 111
// end ;
3694: LD_VAR 0 1
3698: RET
// every 0 0$1 trigger IsAt ( Truman , 17 , 31 ) do
3699: LD_EXP 21
3703: PPUSH
3704: LD_INT 17
3706: PPUSH
3707: LD_INT 31
3709: PPUSH
3710: CALL_OW 307
3714: IFFALSE 3728
3716: GO 3718
3718: DISABLE
// RemoveUnit ( Truman ) ;
3719: LD_EXP 21
3723: PPUSH
3724: CALL_OW 64
3728: END
// every 0 0$2 trigger joinEpsilon = 1 and IsOk ( Truman ) and not HasTask ( Truman ) do
3729: LD_EXP 31
3733: PUSH
3734: LD_INT 1
3736: EQUAL
3737: PUSH
3738: LD_EXP 21
3742: PPUSH
3743: CALL_OW 302
3747: AND
3748: PUSH
3749: LD_EXP 21
3753: PPUSH
3754: CALL_OW 314
3758: NOT
3759: AND
3760: IFFALSE 3781
3762: GO 3764
3764: DISABLE
// begin enable ;
3765: ENABLE
// ComMoveXY ( Truman , 17 , 31 ) ;
3766: LD_EXP 21
3770: PPUSH
3771: LD_INT 17
3773: PPUSH
3774: LD_INT 31
3776: PPUSH
3777: CALL_OW 111
// end ; end_of_file
3781: END
// export function PrepareRussians ; var i , un ; begin
3782: LD_INT 0
3784: PPUSH
3785: PPUSH
3786: PPUSH
// uc_side = 3 ;
3787: LD_ADDR_OWVAR 20
3791: PUSH
3792: LD_INT 3
3794: ST_TO_ADDR
// uc_nation = 3 ;
3795: LD_ADDR_OWVAR 21
3799: PUSH
3800: LD_INT 3
3802: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ,  ) ;
3803: LD_ADDR_EXP 27
3807: PUSH
3808: LD_STRING Tsaritsyn
3810: PPUSH
3811: LD_INT 0
3813: PPUSH
3814: LD_STRING 
3816: PPUSH
3817: CALL 50148 0 3
3821: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3822: LD_EXP 27
3826: PPUSH
3827: LD_INT 3
3829: PPUSH
3830: LD_INT 0
3832: PPUSH
3833: CALL_OW 49
// for i = 1 to 14 do
3837: LD_ADDR_VAR 0 2
3841: PUSH
3842: DOUBLE
3843: LD_INT 1
3845: DEC
3846: ST_TO_ADDR
3847: LD_INT 14
3849: PUSH
3850: FOR_TO
3851: IFFALSE 3937
// begin uc_side = 3 ;
3853: LD_ADDR_OWVAR 20
3857: PUSH
3858: LD_INT 3
3860: ST_TO_ADDR
// uc_nation = 3 ;
3861: LD_ADDR_OWVAR 21
3865: PUSH
3866: LD_INT 3
3868: ST_TO_ADDR
// hc_gallery =  ;
3869: LD_ADDR_OWVAR 33
3873: PUSH
3874: LD_STRING 
3876: ST_TO_ADDR
// hc_name =  ;
3877: LD_ADDR_OWVAR 26
3881: PUSH
3882: LD_STRING 
3884: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3885: LD_INT 0
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_EXP 38
3895: PPUSH
3896: LD_EXP 39
3900: PPUSH
3901: CALL_OW 12
3905: PPUSH
3906: CALL_OW 380
// un = CreateHuman ;
3910: LD_ADDR_VAR 0 3
3914: PUSH
3915: CALL_OW 44
3919: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3920: LD_VAR 0 3
3924: PPUSH
3925: LD_INT 3
3927: PPUSH
3928: LD_INT 0
3930: PPUSH
3931: CALL_OW 49
// end ;
3935: GO 3850
3937: POP
3938: POP
// for i = 1 to 6 do
3939: LD_ADDR_VAR 0 2
3943: PUSH
3944: DOUBLE
3945: LD_INT 1
3947: DEC
3948: ST_TO_ADDR
3949: LD_INT 6
3951: PUSH
3952: FOR_TO
3953: IFFALSE 4039
// begin uc_side = 3 ;
3955: LD_ADDR_OWVAR 20
3959: PUSH
3960: LD_INT 3
3962: ST_TO_ADDR
// uc_nation = 3 ;
3963: LD_ADDR_OWVAR 21
3967: PUSH
3968: LD_INT 3
3970: ST_TO_ADDR
// hc_gallery =  ;
3971: LD_ADDR_OWVAR 33
3975: PUSH
3976: LD_STRING 
3978: ST_TO_ADDR
// hc_name =  ;
3979: LD_ADDR_OWVAR 26
3983: PUSH
3984: LD_STRING 
3986: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3987: LD_INT 0
3989: PPUSH
3990: LD_INT 2
3992: PPUSH
3993: LD_EXP 38
3997: PPUSH
3998: LD_EXP 39
4002: PPUSH
4003: CALL_OW 12
4007: PPUSH
4008: CALL_OW 380
// un = CreateHuman ;
4012: LD_ADDR_VAR 0 3
4016: PUSH
4017: CALL_OW 44
4021: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4022: LD_VAR 0 3
4026: PPUSH
4027: LD_INT 3
4029: PPUSH
4030: LD_INT 0
4032: PPUSH
4033: CALL_OW 49
// end ;
4037: GO 3952
4039: POP
4040: POP
// for i = 1 to 6 do
4041: LD_ADDR_VAR 0 2
4045: PUSH
4046: DOUBLE
4047: LD_INT 1
4049: DEC
4050: ST_TO_ADDR
4051: LD_INT 6
4053: PUSH
4054: FOR_TO
4055: IFFALSE 4141
// begin uc_side = 3 ;
4057: LD_ADDR_OWVAR 20
4061: PUSH
4062: LD_INT 3
4064: ST_TO_ADDR
// uc_nation = 3 ;
4065: LD_ADDR_OWVAR 21
4069: PUSH
4070: LD_INT 3
4072: ST_TO_ADDR
// hc_gallery =  ;
4073: LD_ADDR_OWVAR 33
4077: PUSH
4078: LD_STRING 
4080: ST_TO_ADDR
// hc_name =  ;
4081: LD_ADDR_OWVAR 26
4085: PUSH
4086: LD_STRING 
4088: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4089: LD_INT 0
4091: PPUSH
4092: LD_INT 3
4094: PPUSH
4095: LD_EXP 38
4099: PPUSH
4100: LD_EXP 39
4104: PPUSH
4105: CALL_OW 12
4109: PPUSH
4110: CALL_OW 380
// un = CreateHuman ;
4114: LD_ADDR_VAR 0 3
4118: PUSH
4119: CALL_OW 44
4123: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4124: LD_VAR 0 3
4128: PPUSH
4129: LD_INT 3
4131: PPUSH
4132: LD_INT 0
4134: PPUSH
4135: CALL_OW 49
// end ;
4139: GO 4054
4141: POP
4142: POP
// for i = 1 to 4 do
4143: LD_ADDR_VAR 0 2
4147: PUSH
4148: DOUBLE
4149: LD_INT 1
4151: DEC
4152: ST_TO_ADDR
4153: LD_INT 4
4155: PUSH
4156: FOR_TO
4157: IFFALSE 4243
// begin uc_side = 3 ;
4159: LD_ADDR_OWVAR 20
4163: PUSH
4164: LD_INT 3
4166: ST_TO_ADDR
// uc_nation = 3 ;
4167: LD_ADDR_OWVAR 21
4171: PUSH
4172: LD_INT 3
4174: ST_TO_ADDR
// hc_gallery =  ;
4175: LD_ADDR_OWVAR 33
4179: PUSH
4180: LD_STRING 
4182: ST_TO_ADDR
// hc_name =  ;
4183: LD_ADDR_OWVAR 26
4187: PUSH
4188: LD_STRING 
4190: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4191: LD_INT 0
4193: PPUSH
4194: LD_INT 4
4196: PPUSH
4197: LD_EXP 38
4201: PPUSH
4202: LD_EXP 39
4206: PPUSH
4207: CALL_OW 12
4211: PPUSH
4212: CALL_OW 380
// un = CreateHuman ;
4216: LD_ADDR_VAR 0 3
4220: PUSH
4221: CALL_OW 44
4225: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4226: LD_VAR 0 3
4230: PPUSH
4231: LD_INT 3
4233: PPUSH
4234: LD_INT 0
4236: PPUSH
4237: CALL_OW 49
// end ;
4241: GO 4156
4243: POP
4244: POP
// end ; end_of_file
4245: LD_VAR 0 1
4249: RET
// export function PrepareArabianCommander ; begin
4250: LD_INT 0
4252: PPUSH
// uc_side = 2 ;
4253: LD_ADDR_OWVAR 20
4257: PUSH
4258: LD_INT 2
4260: ST_TO_ADDR
// uc_nation = 2 ;
4261: LD_ADDR_OWVAR 21
4265: PUSH
4266: LD_INT 2
4268: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
4269: LD_ADDR_EXP 28
4273: PUSH
4274: LD_STRING Dietrich
4276: PPUSH
4277: CALL_OW 25
4281: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
4282: LD_EXP 28
4286: PPUSH
4287: LD_INT 4
4289: PPUSH
4290: LD_INT 0
4292: PPUSH
4293: CALL_OW 49
// end ;
4297: LD_VAR 0 1
4301: RET
// export function PrepareArabian ; var i , un , veh ; begin
4302: LD_INT 0
4304: PPUSH
4305: PPUSH
4306: PPUSH
4307: PPUSH
// uc_side := 2 ;
4308: LD_ADDR_OWVAR 20
4312: PUSH
4313: LD_INT 2
4315: ST_TO_ADDR
// uc_nation := 2 ;
4316: LD_ADDR_OWVAR 21
4320: PUSH
4321: LD_INT 2
4323: ST_TO_ADDR
// if not Ahmed then
4324: LD_EXP 29
4328: NOT
4329: IFFALSE 4397
// begin InitHc ;
4331: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
4335: LD_INT 1
4337: PPUSH
4338: LD_INT 1
4340: PPUSH
4341: LD_EXP 38
4345: PPUSH
4346: LD_EXP 39
4350: PUSH
4351: LD_INT 1
4353: PLUS
4354: PPUSH
4355: CALL_OW 12
4359: PPUSH
4360: CALL_OW 380
// hc_name := Ahmed Abbasid ;
4364: LD_ADDR_OWVAR 26
4368: PUSH
4369: LD_STRING Ahmed Abbasid
4371: ST_TO_ADDR
// Ahmed := CreateHuman ;
4372: LD_ADDR_EXP 29
4376: PUSH
4377: CALL_OW 44
4381: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
4382: LD_EXP 29
4386: PPUSH
4387: LD_INT 4
4389: PPUSH
4390: LD_INT 0
4392: PPUSH
4393: CALL_OW 49
// end ; for i = 1 to 4 do
4397: LD_ADDR_VAR 0 2
4401: PUSH
4402: DOUBLE
4403: LD_INT 1
4405: DEC
4406: ST_TO_ADDR
4407: LD_INT 4
4409: PUSH
4410: FOR_TO
4411: IFFALSE 4497
// begin uc_side = 2 ;
4413: LD_ADDR_OWVAR 20
4417: PUSH
4418: LD_INT 2
4420: ST_TO_ADDR
// uc_nation = 2 ;
4421: LD_ADDR_OWVAR 21
4425: PUSH
4426: LD_INT 2
4428: ST_TO_ADDR
// hc_gallery =  ;
4429: LD_ADDR_OWVAR 33
4433: PUSH
4434: LD_STRING 
4436: ST_TO_ADDR
// hc_name =  ;
4437: LD_ADDR_OWVAR 26
4441: PUSH
4442: LD_STRING 
4444: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4445: LD_INT 0
4447: PPUSH
4448: LD_INT 2
4450: PPUSH
4451: LD_EXP 38
4455: PPUSH
4456: LD_EXP 39
4460: PPUSH
4461: CALL_OW 12
4465: PPUSH
4466: CALL_OW 380
// un = CreateHuman ;
4470: LD_ADDR_VAR 0 3
4474: PUSH
4475: CALL_OW 44
4479: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4480: LD_VAR 0 3
4484: PPUSH
4485: LD_INT 4
4487: PPUSH
4488: LD_INT 0
4490: PPUSH
4491: CALL_OW 49
// end ;
4495: GO 4410
4497: POP
4498: POP
// for i = 1 to 5 do
4499: LD_ADDR_VAR 0 2
4503: PUSH
4504: DOUBLE
4505: LD_INT 1
4507: DEC
4508: ST_TO_ADDR
4509: LD_INT 5
4511: PUSH
4512: FOR_TO
4513: IFFALSE 4599
// begin uc_side = 2 ;
4515: LD_ADDR_OWVAR 20
4519: PUSH
4520: LD_INT 2
4522: ST_TO_ADDR
// uc_nation = 2 ;
4523: LD_ADDR_OWVAR 21
4527: PUSH
4528: LD_INT 2
4530: ST_TO_ADDR
// hc_gallery =  ;
4531: LD_ADDR_OWVAR 33
4535: PUSH
4536: LD_STRING 
4538: ST_TO_ADDR
// hc_name =  ;
4539: LD_ADDR_OWVAR 26
4543: PUSH
4544: LD_STRING 
4546: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4547: LD_INT 0
4549: PPUSH
4550: LD_INT 1
4552: PPUSH
4553: LD_EXP 38
4557: PPUSH
4558: LD_EXP 39
4562: PPUSH
4563: CALL_OW 12
4567: PPUSH
4568: CALL_OW 380
// un = CreateHuman ;
4572: LD_ADDR_VAR 0 3
4576: PUSH
4577: CALL_OW 44
4581: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4582: LD_VAR 0 3
4586: PPUSH
4587: LD_INT 4
4589: PPUSH
4590: LD_INT 0
4592: PPUSH
4593: CALL_OW 49
// end ;
4597: GO 4512
4599: POP
4600: POP
// for i = 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
4601: LD_ADDR_VAR 0 2
4605: PUSH
4606: DOUBLE
4607: LD_INT 1
4609: DEC
4610: ST_TO_ADDR
4611: LD_INT 3
4613: PUSH
4614: LD_INT 4
4616: PUSH
4617: LD_INT 4
4619: PUSH
4620: LD_INT 4
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: PUSH
4629: LD_OWVAR 67
4633: ARRAY
4634: PUSH
4635: FOR_TO
4636: IFFALSE 4722
// begin uc_side = 2 ;
4638: LD_ADDR_OWVAR 20
4642: PUSH
4643: LD_INT 2
4645: ST_TO_ADDR
// uc_nation = 2 ;
4646: LD_ADDR_OWVAR 21
4650: PUSH
4651: LD_INT 2
4653: ST_TO_ADDR
// hc_gallery =  ;
4654: LD_ADDR_OWVAR 33
4658: PUSH
4659: LD_STRING 
4661: ST_TO_ADDR
// hc_name =  ;
4662: LD_ADDR_OWVAR 26
4666: PUSH
4667: LD_STRING 
4669: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4670: LD_INT 0
4672: PPUSH
4673: LD_INT 4
4675: PPUSH
4676: LD_EXP 38
4680: PPUSH
4681: LD_EXP 39
4685: PPUSH
4686: CALL_OW 12
4690: PPUSH
4691: CALL_OW 380
// un = CreateHuman ;
4695: LD_ADDR_VAR 0 3
4699: PUSH
4700: CALL_OW 44
4704: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4705: LD_VAR 0 3
4709: PPUSH
4710: LD_INT 4
4712: PPUSH
4713: LD_INT 0
4715: PPUSH
4716: CALL_OW 49
// end ;
4720: GO 4635
4722: POP
4723: POP
// for i = 1 to 2 do
4724: LD_ADDR_VAR 0 2
4728: PUSH
4729: DOUBLE
4730: LD_INT 1
4732: DEC
4733: ST_TO_ADDR
4734: LD_INT 2
4736: PUSH
4737: FOR_TO
4738: IFFALSE 4868
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4740: LD_ADDR_VAR 0 4
4744: PUSH
4745: LD_INT 22
4747: PUSH
4748: LD_INT 2
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PUSH
4755: LD_INT 21
4757: PUSH
4758: LD_INT 2
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: PUSH
4765: LD_INT 58
4767: PUSH
4768: EMPTY
4769: LIST
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: LIST
4775: PPUSH
4776: CALL_OW 69
4780: ST_TO_ADDR
// uc_side = 2 ;
4781: LD_ADDR_OWVAR 20
4785: PUSH
4786: LD_INT 2
4788: ST_TO_ADDR
// uc_nation = 2 ;
4789: LD_ADDR_OWVAR 21
4793: PUSH
4794: LD_INT 2
4796: ST_TO_ADDR
// hc_gallery =  ;
4797: LD_ADDR_OWVAR 33
4801: PUSH
4802: LD_STRING 
4804: ST_TO_ADDR
// hc_name =  ;
4805: LD_ADDR_OWVAR 26
4809: PUSH
4810: LD_STRING 
4812: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4813: LD_INT 0
4815: PPUSH
4816: LD_INT 3
4818: PPUSH
4819: LD_EXP 38
4823: PPUSH
4824: LD_EXP 39
4828: PPUSH
4829: CALL_OW 12
4833: PPUSH
4834: CALL_OW 380
// un = CreateHuman ;
4838: LD_ADDR_VAR 0 3
4842: PUSH
4843: CALL_OW 44
4847: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4848: LD_VAR 0 3
4852: PPUSH
4853: LD_VAR 0 4
4857: PUSH
4858: LD_INT 1
4860: ARRAY
4861: PPUSH
4862: CALL_OW 52
// end ;
4866: GO 4737
4868: POP
4869: POP
// end ;
4870: LD_VAR 0 1
4874: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
4875: LD_INT 0
4877: PPUSH
4878: PPUSH
4879: PPUSH
4880: PPUSH
4881: PPUSH
4882: PPUSH
// for i := 1 to 2 do
4883: LD_ADDR_VAR 0 2
4887: PUSH
4888: DOUBLE
4889: LD_INT 1
4891: DEC
4892: ST_TO_ADDR
4893: LD_INT 2
4895: PUSH
4896: FOR_TO
4897: IFFALSE 5023
// begin uc_side = 5 ;
4899: LD_ADDR_OWVAR 20
4903: PUSH
4904: LD_INT 5
4906: ST_TO_ADDR
// uc_nation = 2 ;
4907: LD_ADDR_OWVAR 21
4911: PUSH
4912: LD_INT 2
4914: ST_TO_ADDR
// vc_chassis := 31 ;
4915: LD_ADDR_OWVAR 37
4919: PUSH
4920: LD_INT 31
4922: ST_TO_ADDR
// vc_control := control_rider ;
4923: LD_ADDR_OWVAR 38
4927: PUSH
4928: LD_INT 4
4930: ST_TO_ADDR
// animal := CreateVehicle ;
4931: LD_ADDR_VAR 0 3
4935: PUSH
4936: CALL_OW 45
4940: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
4941: LD_VAR 0 3
4945: PPUSH
4946: LD_INT 7
4948: PPUSH
4949: LD_INT 0
4951: PPUSH
4952: CALL_OW 49
// hc_gallery =  ;
4956: LD_ADDR_OWVAR 33
4960: PUSH
4961: LD_STRING 
4963: ST_TO_ADDR
// hc_name =  ;
4964: LD_ADDR_OWVAR 26
4968: PUSH
4969: LD_STRING 
4971: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4972: LD_INT 0
4974: PPUSH
4975: LD_INT 11
4977: PPUSH
4978: LD_EXP 38
4982: PPUSH
4983: LD_EXP 39
4987: PPUSH
4988: CALL_OW 12
4992: PPUSH
4993: CALL_OW 380
// un = CreateHuman ;
4997: LD_ADDR_VAR 0 4
5001: PUSH
5002: CALL_OW 44
5006: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
5007: LD_VAR 0 4
5011: PPUSH
5012: LD_VAR 0 3
5016: PPUSH
5017: CALL_OW 52
// end ;
5021: GO 4896
5023: POP
5024: POP
// repeat wait ( 0 0$1 ) ;
5025: LD_INT 35
5027: PPUSH
5028: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
5032: LD_ADDR_VAR 0 5
5036: PUSH
5037: LD_INT 22
5039: PUSH
5040: LD_INT 1
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: PPUSH
5047: CALL_OW 69
5051: PPUSH
5052: LD_VAR 0 2
5056: PPUSH
5057: CALL_OW 74
5061: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5062: LD_ADDR_VAR 0 6
5066: PUSH
5067: LD_INT 22
5069: PUSH
5070: LD_INT 1
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PUSH
5077: LD_INT 2
5079: PUSH
5080: LD_INT 59
5082: PUSH
5083: EMPTY
5084: LIST
5085: PUSH
5086: LD_INT 21
5088: PUSH
5089: LD_INT 1
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 21
5098: PUSH
5099: LD_INT 2
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: PPUSH
5119: CALL_OW 69
5123: PPUSH
5124: LD_VAR 0 2
5128: PPUSH
5129: CALL_OW 74
5133: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
5134: LD_ADDR_VAR 0 2
5138: PUSH
5139: LD_INT 22
5141: PUSH
5142: LD_INT 5
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PUSH
5149: LD_INT 25
5151: PUSH
5152: LD_INT 11
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: PPUSH
5163: CALL_OW 69
5167: PUSH
5168: FOR_IN
5169: IFFALSE 5239
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5171: LD_VAR 0 2
5175: PPUSH
5176: LD_VAR 0 5
5180: PPUSH
5181: CALL_OW 296
5185: PUSH
5186: LD_INT 8
5188: PLUS
5189: PUSH
5190: LD_VAR 0 2
5194: PPUSH
5195: LD_VAR 0 6
5199: PPUSH
5200: CALL_OW 296
5204: LESS
5205: IFFALSE 5223
// ComAttackUnit ( i , target1 ) else
5207: LD_VAR 0 2
5211: PPUSH
5212: LD_VAR 0 5
5216: PPUSH
5217: CALL_OW 115
5221: GO 5237
// ComAttackUnit ( i , target2 ) ;
5223: LD_VAR 0 2
5227: PPUSH
5228: LD_VAR 0 6
5232: PPUSH
5233: CALL_OW 115
// end ;
5237: GO 5168
5239: POP
5240: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 ;
5241: LD_INT 22
5243: PUSH
5244: LD_INT 5
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 25
5253: PUSH
5254: LD_INT 11
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 69
5269: PUSH
5270: LD_INT 0
5272: EQUAL
5273: IFFALSE 5025
// end ; end_of_file
5275: LD_VAR 0 1
5279: RET
// every 0 0$1 do
5280: GO 5282
5282: DISABLE
// begin RevealFogArea ( 1 , EpsilonTerrain ) ;
5283: LD_INT 1
5285: PPUSH
5286: LD_INT 19
5288: PPUSH
5289: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
5293: LD_EXP 11
5297: PPUSH
5298: CALL_OW 87
// wait ( 0 0$3 ) ;
5302: LD_INT 105
5304: PPUSH
5305: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
5309: LD_EXP 1
5313: PPUSH
5314: CALL_OW 310
5318: PPUSH
5319: CALL_OW 85
// Wait ( 0 0$1 ) ;
5323: LD_INT 35
5325: PPUSH
5326: CALL_OW 67
// if IsOk ( Gary ) then
5330: LD_EXP 10
5334: PPUSH
5335: CALL_OW 302
5339: IFFALSE 5377
// begin Say ( Gary , D2-Gary-1 ) ;
5341: LD_EXP 10
5345: PPUSH
5346: LD_STRING D2-Gary-1
5348: PPUSH
5349: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
5353: LD_EXP 1
5357: PPUSH
5358: LD_STRING D2-JMM-1
5360: PPUSH
5361: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
5365: LD_EXP 10
5369: PPUSH
5370: LD_STRING D2-Gary-2
5372: PPUSH
5373: CALL_OW 88
// end ; Video ( false ) ;
5377: LD_INT 0
5379: PPUSH
5380: CALL 87569 0 1
// ChangeMissionObjectives ( M1 ) ;
5384: LD_STRING M1
5386: PPUSH
5387: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
5391: LD_INT 38
5393: PPUSH
5394: LD_INT 1
5396: PPUSH
5397: LD_INT 100
5399: PPUSH
5400: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
5404: LD_INT 47
5406: PPUSH
5407: LD_INT 1
5409: PPUSH
5410: LD_INT 50
5412: PPUSH
5413: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5417: LD_INT 47
5419: PPUSH
5420: LD_INT 3
5422: PPUSH
5423: LD_INT 50
5425: PPUSH
5426: CALL_OW 291
// SaveForQuickRestart ;
5430: CALL_OW 22
// end ;
5434: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var p ;
5435: LD_EXP 1
5439: PPUSH
5440: LD_EXP 11
5444: PPUSH
5445: CALL_OW 296
5449: PUSH
5450: LD_INT 15
5452: LESS
5453: IFFALSE 6281
5455: GO 5457
5457: DISABLE
5458: LD_INT 0
5460: PPUSH
// begin wait ( 0 0$3 ) ;
5461: LD_INT 105
5463: PPUSH
5464: CALL_OW 67
// Video ( true ) ;
5468: LD_INT 1
5470: PPUSH
5471: CALL 87569 0 1
// ComExitVehicle ( JMM ) ;
5475: LD_EXP 1
5479: PPUSH
5480: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5484: LD_EXP 1
5488: PPUSH
5489: CALL_OW 87
// if Truman then
5493: LD_EXP 21
5497: IFFALSE 5634
// begin ComMoveUnit ( Truman , JMM ) ;
5499: LD_EXP 21
5503: PPUSH
5504: LD_EXP 1
5508: PPUSH
5509: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5513: LD_INT 35
5515: PPUSH
5516: CALL_OW 67
// until GetDistUnits ( Truman , JMM ) < 6 ;
5520: LD_EXP 21
5524: PPUSH
5525: LD_EXP 1
5529: PPUSH
5530: CALL_OW 296
5534: PUSH
5535: LD_INT 6
5537: LESS
5538: IFFALSE 5513
// ComTurnUnit ( Truman , JMM ) ;
5540: LD_EXP 21
5544: PPUSH
5545: LD_EXP 1
5549: PPUSH
5550: CALL_OW 119
// ComTurnUnit ( JMM , Truman ) ;
5554: LD_EXP 1
5558: PPUSH
5559: LD_EXP 21
5563: PPUSH
5564: CALL_OW 119
// Say ( Truman , D2-Tru-1 ) ;
5568: LD_EXP 21
5572: PPUSH
5573: LD_STRING D2-Tru-1
5575: PPUSH
5576: CALL_OW 88
// Say ( JMM , D2-JMM-Tru-1 ) ;
5580: LD_EXP 1
5584: PPUSH
5585: LD_STRING D2-JMM-Tru-1
5587: PPUSH
5588: CALL_OW 88
// Say ( Truman , D2-Tru-2 ) ;
5592: LD_EXP 21
5596: PPUSH
5597: LD_STRING D2-Tru-2
5599: PPUSH
5600: CALL_OW 88
// ComMoveXY ( Truman , 79 , 41 ) ;
5604: LD_EXP 21
5608: PPUSH
5609: LD_INT 79
5611: PPUSH
5612: LD_INT 41
5614: PPUSH
5615: CALL_OW 111
// AddComMoveXY ( Truman , 17 , 31 ) ;
5619: LD_EXP 21
5623: PPUSH
5624: LD_INT 17
5626: PPUSH
5627: LD_INT 31
5629: PPUSH
5630: CALL_OW 171
// end ; AddComTurnUnit ( JMM , Simms ) ;
5634: LD_EXP 1
5638: PPUSH
5639: LD_EXP 11
5643: PPUSH
5644: CALL_OW 179
// p := 15 ;
5648: LD_ADDR_VAR 0 1
5652: PUSH
5653: LD_INT 15
5655: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5656: LD_INT 35
5658: PPUSH
5659: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5663: LD_EXP 11
5667: PUSH
5668: LD_EXP 13
5672: PUSH
5673: LD_EXP 12
5677: PUSH
5678: LD_EXP 14
5682: PUSH
5683: LD_EXP 8
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: PPUSH
5695: LD_EXP 1
5699: PPUSH
5700: CALL_OW 112
// p := p - 1 ;
5704: LD_ADDR_VAR 0 1
5708: PUSH
5709: LD_VAR 0 1
5713: PUSH
5714: LD_INT 1
5716: MINUS
5717: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
5718: LD_EXP 1
5722: PPUSH
5723: LD_EXP 11
5727: PPUSH
5728: CALL_OW 296
5732: PUSH
5733: LD_INT 5
5735: LESS
5736: PUSH
5737: LD_VAR 0 1
5741: PUSH
5742: LD_INT 0
5744: LESSEQUAL
5745: OR
5746: IFFALSE 5656
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5748: LD_EXP 11
5752: PUSH
5753: LD_EXP 13
5757: PUSH
5758: LD_EXP 12
5762: PUSH
5763: LD_EXP 14
5767: PUSH
5768: LD_EXP 8
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: LIST
5777: LIST
5778: LIST
5779: PPUSH
5780: LD_EXP 1
5784: PPUSH
5785: CALL_OW 119
// if not IsInUnit ( JMM ) then
5789: LD_EXP 1
5793: PPUSH
5794: CALL_OW 310
5798: NOT
5799: IFFALSE 5815
// ComTurnUnit ( JMM , Simms ) ;
5801: LD_EXP 1
5805: PPUSH
5806: LD_EXP 11
5810: PPUSH
5811: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5815: LD_EXP 11
5819: PUSH
5820: LD_EXP 13
5824: PUSH
5825: LD_EXP 12
5829: PUSH
5830: LD_EXP 14
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: LIST
5839: LIST
5840: PPUSH
5841: LD_EXP 1
5845: PPUSH
5846: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5850: LD_EXP 1
5854: PUSH
5855: LD_EXP 11
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PPUSH
5864: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5868: LD_EXP 11
5872: PPUSH
5873: LD_STRING D2a-Sim-1
5875: PPUSH
5876: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5880: LD_EXP 1
5884: PPUSH
5885: LD_STRING D2a-JMM-1
5887: PPUSH
5888: CALL_OW 88
// if IsOk ( Joan ) then
5892: LD_EXP 13
5896: PPUSH
5897: CALL_OW 302
5901: IFFALSE 5979
// begin if not IsInUnit ( JMM ) then
5903: LD_EXP 1
5907: PPUSH
5908: CALL_OW 310
5912: NOT
5913: IFFALSE 5929
// ComTurnUnit ( JMM , Joan ) ;
5915: LD_EXP 1
5919: PPUSH
5920: LD_EXP 13
5924: PPUSH
5925: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
5929: LD_EXP 13
5933: PPUSH
5934: LD_EXP 1
5938: PPUSH
5939: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5943: LD_EXP 13
5947: PPUSH
5948: LD_STRING D2b-Joan-1
5950: PPUSH
5951: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5955: LD_EXP 1
5959: PPUSH
5960: LD_STRING D2b-JMM-1
5962: PPUSH
5963: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5967: LD_EXP 13
5971: PPUSH
5972: LD_STRING D2b-Joan-2
5974: PPUSH
5975: CALL_OW 88
// end ; if IsOk ( Denis ) then
5979: LD_EXP 12
5983: PPUSH
5984: CALL_OW 302
5988: IFFALSE 6042
// begin if not IsInUnit ( JMM ) then
5990: LD_EXP 1
5994: PPUSH
5995: CALL_OW 310
5999: NOT
6000: IFFALSE 6016
// ComTurnUnit ( JMM , Denis ) ;
6002: LD_EXP 1
6006: PPUSH
6007: LD_EXP 12
6011: PPUSH
6012: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
6016: LD_EXP 12
6020: PPUSH
6021: LD_EXP 1
6025: PPUSH
6026: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
6030: LD_EXP 12
6034: PPUSH
6035: LD_STRING D2c-Den-1
6037: PPUSH
6038: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
6042: LD_EXP 8
6046: PPUSH
6047: CALL_OW 302
6051: PUSH
6052: LD_STRING 08_Kikuchi
6054: PPUSH
6055: CALL_OW 28
6059: NOT
6060: AND
6061: IFFALSE 6156
// begin repeat wait ( 0 0$1 ) ;
6063: LD_INT 35
6065: PPUSH
6066: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
6070: LD_EXP 8
6074: PPUSH
6075: LD_EXP 1
6079: PPUSH
6080: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
6084: LD_EXP 1
6088: PPUSH
6089: LD_EXP 8
6093: PPUSH
6094: CALL_OW 296
6098: PUSH
6099: LD_INT 5
6101: LESS
6102: IFFALSE 6063
// ComTurnUnit ( Kikuchi , JMM ) ;
6104: LD_EXP 8
6108: PPUSH
6109: LD_EXP 1
6113: PPUSH
6114: CALL_OW 119
// if not IsInUnit ( JMM ) then
6118: LD_EXP 1
6122: PPUSH
6123: CALL_OW 310
6127: NOT
6128: IFFALSE 6144
// ComTurnUnit ( JMM , Kikuchi ) ;
6130: LD_EXP 1
6134: PPUSH
6135: LD_EXP 8
6139: PPUSH
6140: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
6144: LD_EXP 8
6148: PPUSH
6149: LD_STRING D3b-Yam-1
6151: PPUSH
6152: CALL_OW 88
// end ; if IsOk ( Khatam ) then
6156: LD_EXP 14
6160: PPUSH
6161: CALL_OW 302
6165: IFFALSE 6231
// begin if not IsInUnit ( JMM ) then
6167: LD_EXP 1
6171: PPUSH
6172: CALL_OW 310
6176: NOT
6177: IFFALSE 6193
// ComTurnUnit ( JMM , Khatam ) ;
6179: LD_EXP 1
6183: PPUSH
6184: LD_EXP 14
6188: PPUSH
6189: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
6193: LD_EXP 14
6197: PPUSH
6198: LD_EXP 1
6202: PPUSH
6203: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
6207: LD_EXP 1
6211: PPUSH
6212: LD_STRING D2c-JMM-1
6214: PPUSH
6215: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
6219: LD_EXP 14
6223: PPUSH
6224: LD_STRING D2c-Khat-1
6226: PPUSH
6227: CALL_OW 88
// end ; Video ( false ) ;
6231: LD_INT 0
6233: PPUSH
6234: CALL 87569 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff Truman , 1 ) ;
6238: LD_INT 22
6240: PUSH
6241: LD_INT 4
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PPUSH
6248: CALL_OW 69
6252: PUSH
6253: LD_EXP 21
6257: DIFF
6258: PPUSH
6259: LD_INT 1
6261: PPUSH
6262: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
6266: LD_STRING M1a
6268: PPUSH
6269: CALL_OW 337
// joinEpsilon := 1 ;
6273: LD_ADDR_EXP 31
6277: PUSH
6278: LD_INT 1
6280: ST_TO_ADDR
// end ;
6281: PPOPN 1
6283: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do var p ;
6284: LD_INT 38
6286: PPUSH
6287: LD_INT 1
6289: PPUSH
6290: CALL_OW 289
6294: PUSH
6295: LD_INT 0
6297: EQUAL
6298: PUSH
6299: LD_INT 47
6301: PPUSH
6302: LD_INT 1
6304: PPUSH
6305: CALL_OW 289
6309: PUSH
6310: LD_INT 0
6312: EQUAL
6313: AND
6314: PUSH
6315: LD_INT 47
6317: PPUSH
6318: LD_INT 2
6320: PPUSH
6321: CALL_OW 289
6325: PUSH
6326: LD_INT 0
6328: EQUAL
6329: AND
6330: IFFALSE 6455
6332: GO 6334
6334: DISABLE
6335: LD_INT 0
6337: PPUSH
// begin p := 0 ;
6338: LD_ADDR_VAR 0 1
6342: PUSH
6343: LD_INT 0
6345: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6346: LD_INT 38
6348: PUSH
6349: LD_INT 47
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PPUSH
6356: LD_INT 56
6358: PPUSH
6359: LD_INT 0
6361: PPUSH
6362: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6366: LD_INT 35
6368: PPUSH
6369: CALL_OW 67
// p := p + 1 ;
6373: LD_ADDR_VAR 0 1
6377: PUSH
6378: LD_VAR 0 1
6382: PUSH
6383: LD_INT 1
6385: PLUS
6386: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6387: LD_INT 38
6389: PUSH
6390: LD_INT 47
6392: PUSH
6393: EMPTY
6394: LIST
6395: LIST
6396: PPUSH
6397: LD_INT 56
6399: PPUSH
6400: LD_INT 0
6402: PPUSH
6403: CALL_OW 111
// if IsInArea ( cargo1 , RemArea ) then
6407: LD_INT 38
6409: PPUSH
6410: LD_INT 27
6412: PPUSH
6413: CALL_OW 308
6417: IFFALSE 6426
// RemoveUnit ( cargo1 ) ;
6419: LD_INT 38
6421: PPUSH
6422: CALL_OW 64
// if IsInArea ( cargo2 , RemArea ) then
6426: LD_INT 47
6428: PPUSH
6429: LD_INT 27
6431: PPUSH
6432: CALL_OW 308
6436: IFFALSE 6445
// RemoveUnit ( cargo2 ) ;
6438: LD_INT 47
6440: PPUSH
6441: CALL_OW 64
// until p > 30 ;
6445: LD_VAR 0 1
6449: PUSH
6450: LD_INT 30
6452: GREATER
6453: IFFALSE 6366
// end ;
6455: PPOPN 1
6457: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
6458: LD_EXP 67
6462: PUSH
6463: LD_INT 1
6465: EQUAL
6466: IFFALSE 7640
6468: GO 6470
6470: DISABLE
6471: LD_INT 0
6473: PPUSH
6474: PPUSH
6475: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6476: LD_ADDR_VAR 0 1
6480: PUSH
6481: LD_INT 22
6483: PUSH
6484: LD_INT 1
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PUSH
6491: LD_INT 25
6493: PUSH
6494: LD_INT 4
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: PUSH
6501: LD_INT 26
6503: PUSH
6504: LD_INT 1
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: LIST
6515: PPUSH
6516: CALL_OW 69
6520: PUSH
6521: LD_EXP 1
6525: PUSH
6526: LD_EXP 2
6530: PUSH
6531: LD_EXP 3
6535: PUSH
6536: LD_EXP 4
6540: PUSH
6541: LD_EXP 5
6545: PUSH
6546: LD_EXP 6
6550: PUSH
6551: LD_EXP 7
6555: PUSH
6556: LD_EXP 8
6560: PUSH
6561: LD_EXP 9
6565: PUSH
6566: LD_EXP 10
6570: PUSH
6571: LD_EXP 11
6575: PUSH
6576: LD_EXP 12
6580: PUSH
6581: LD_EXP 13
6585: PUSH
6586: LD_EXP 14
6590: PUSH
6591: LD_EXP 15
6595: PUSH
6596: LD_EXP 16
6600: PUSH
6601: LD_EXP 17
6605: PUSH
6606: LD_EXP 18
6610: PUSH
6611: LD_EXP 20
6615: PUSH
6616: LD_EXP 26
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: DIFF
6643: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6644: LD_ADDR_VAR 0 2
6648: PUSH
6649: LD_INT 22
6651: PUSH
6652: LD_INT 1
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: LD_INT 26
6661: PUSH
6662: LD_INT 1
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: PUSH
6669: LD_INT 2
6671: PUSH
6672: LD_INT 25
6674: PUSH
6675: LD_INT 1
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: PUSH
6682: LD_INT 25
6684: PUSH
6685: LD_INT 2
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: PUSH
6692: LD_INT 25
6694: PUSH
6695: LD_INT 3
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: LIST
6712: PPUSH
6713: CALL_OW 69
6717: PUSH
6718: LD_EXP 1
6722: PUSH
6723: LD_EXP 2
6727: PUSH
6728: LD_EXP 3
6732: PUSH
6733: LD_EXP 4
6737: PUSH
6738: LD_EXP 5
6742: PUSH
6743: LD_EXP 6
6747: PUSH
6748: LD_EXP 7
6752: PUSH
6753: LD_EXP 8
6757: PUSH
6758: LD_EXP 9
6762: PUSH
6763: LD_EXP 10
6767: PUSH
6768: LD_EXP 11
6772: PUSH
6773: LD_EXP 12
6777: PUSH
6778: LD_EXP 13
6782: PUSH
6783: LD_EXP 14
6787: PUSH
6788: LD_EXP 15
6792: PUSH
6793: LD_EXP 16
6797: PUSH
6798: LD_EXP 17
6802: PUSH
6803: LD_EXP 18
6807: PUSH
6808: LD_EXP 20
6812: PUSH
6813: LD_EXP 26
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: DIFF
6840: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
6841: LD_EXP 10
6845: PUSH
6846: LD_VAR 0 2
6850: OR
6851: PUSH
6852: LD_EXP 17
6856: PUSH
6857: LD_VAR 0 1
6861: OR
6862: AND
6863: IFFALSE 7082
// begin DialogueOn ;
6865: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
6869: LD_EXP 17
6873: PPUSH
6874: CALL_OW 302
6878: IFFALSE 6894
// Say ( DeltaDoctor , D3-Sci1-1 ) else
6880: LD_EXP 17
6884: PPUSH
6885: LD_STRING D3-Sci1-1
6887: PPUSH
6888: CALL_OW 88
6892: GO 6906
// Say ( tmp1 , D3-Sci1-1 ) ;
6894: LD_VAR 0 1
6898: PPUSH
6899: LD_STRING D3-Sci1-1
6901: PPUSH
6902: CALL_OW 88
// if IsOk ( Gary ) then
6906: LD_EXP 10
6910: PPUSH
6911: CALL_OW 302
6915: IFFALSE 6931
// Say ( Gary , D3-Gary-1 ) else
6917: LD_EXP 10
6921: PPUSH
6922: LD_STRING D3-Gary-1
6924: PPUSH
6925: CALL_OW 88
6929: GO 6943
// Say ( tmp2 , D3-Gary-1 ) ;
6931: LD_VAR 0 2
6935: PPUSH
6936: LD_STRING D3-Gary-1
6938: PPUSH
6939: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6943: LD_EXP 17
6947: PPUSH
6948: CALL_OW 302
6952: IFFALSE 6968
// Say ( DeltaDoctor , D3-Sci1-2 ) else
6954: LD_EXP 17
6958: PPUSH
6959: LD_STRING D3-Sci1-2
6961: PPUSH
6962: CALL_OW 88
6966: GO 6980
// Say ( tmp1 , D3-Sci1-2 ) ;
6968: LD_VAR 0 1
6972: PPUSH
6973: LD_STRING D3-Sci1-2
6975: PPUSH
6976: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6980: LD_EXP 1
6984: PPUSH
6985: LD_STRING D3-JMM-2
6987: PPUSH
6988: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6992: LD_EXP 17
6996: PPUSH
6997: CALL_OW 302
7001: IFFALSE 7017
// Say ( DeltaDoctor , D3-Sci1-3 ) else
7003: LD_EXP 17
7007: PPUSH
7008: LD_STRING D3-Sci1-3
7010: PPUSH
7011: CALL_OW 88
7015: GO 7029
// Say ( tmp1 , D3-Sci1-3 ) ;
7017: LD_VAR 0 1
7021: PPUSH
7022: LD_STRING D3-Sci1-3
7024: PPUSH
7025: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7029: LD_EXP 1
7033: PPUSH
7034: LD_STRING D3-JMM-3
7036: PPUSH
7037: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
7041: LD_EXP 17
7045: PPUSH
7046: CALL_OW 302
7050: IFFALSE 7066
// Say ( DeltaDoctor , D3-Sci1-4 ) else
7052: LD_EXP 17
7056: PPUSH
7057: LD_STRING D3-Sci1-4
7059: PPUSH
7060: CALL_OW 88
7064: GO 7078
// Say ( tmp1 , D3-Sci1-4 ) ;
7066: LD_VAR 0 1
7070: PPUSH
7071: LD_STRING D3-Sci1-4
7073: PPUSH
7074: CALL_OW 88
// DialogueOff ;
7078: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
7082: LD_INT 12
7084: PPUSH
7085: LD_INT 1
7087: PPUSH
7088: LD_INT 1
7090: PPUSH
7091: CALL_OW 322
// SetTech ( tech_rocket , 1 , state_enabled ) ;
7095: LD_INT 40
7097: PPUSH
7098: LD_INT 1
7100: PPUSH
7101: LD_INT 1
7103: PPUSH
7104: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
7108: LD_INT 32
7110: PPUSH
7111: LD_INT 1
7113: PPUSH
7114: LD_INT 1
7116: PPUSH
7117: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
7121: LD_INT 12
7123: PPUSH
7124: LD_INT 1
7126: PPUSH
7127: LD_INT 1
7129: PPUSH
7130: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
7134: LD_INT 33
7136: PPUSH
7137: LD_INT 1
7139: PPUSH
7140: LD_INT 1
7142: PPUSH
7143: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
7147: LD_STRING M2
7149: PPUSH
7150: CALL_OW 337
// wait ( 3 3$0 ) ;
7154: LD_INT 6300
7156: PPUSH
7157: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7161: LD_INT 35
7163: PPUSH
7164: CALL_OW 67
// until not InBattle ( 1 ) ;
7168: LD_INT 1
7170: PPUSH
7171: CALL_OW 463
7175: NOT
7176: IFFALSE 7161
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
7178: LD_EXP 11
7182: PPUSH
7183: CALL_OW 302
7187: PUSH
7188: LD_EXP 17
7192: PPUSH
7193: CALL_OW 302
7197: AND
7198: IFFALSE 7367
// begin DialogueOn ;
7200: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7204: LD_EXP 11
7208: PPUSH
7209: LD_STRING D3a-Sim-1
7211: PPUSH
7212: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
7216: LD_EXP 17
7220: PPUSH
7221: LD_STRING D3a-Sci1-1
7223: PPUSH
7224: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7228: LD_EXP 11
7232: PPUSH
7233: LD_STRING D3a-Sim-2
7235: PPUSH
7236: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
7240: LD_EXP 17
7244: PPUSH
7245: LD_STRING D3a-Sci1-2
7247: PPUSH
7248: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7252: LD_EXP 11
7256: PPUSH
7257: LD_STRING D3a-Sim-3
7259: PPUSH
7260: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
7264: LD_EXP 17
7268: PPUSH
7269: LD_STRING D3a-Sci1-3
7271: PPUSH
7272: CALL_OW 88
// if IsOK ( Joan ) then
7276: LD_EXP 13
7280: PPUSH
7281: CALL_OW 302
7285: IFFALSE 7301
// Say ( Simms , D3a-Sim-4 ) else
7287: LD_EXP 11
7291: PPUSH
7292: LD_STRING D3a-Sim-4
7294: PPUSH
7295: CALL_OW 88
7299: GO 7313
// Say ( Simms , D3a-Sim-4a ) ;
7301: LD_EXP 11
7305: PPUSH
7306: LD_STRING D3a-Sim-4a
7308: PPUSH
7309: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
7313: LD_EXP 17
7317: PPUSH
7318: LD_STRING D3a-Sci1-4
7320: PPUSH
7321: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7325: LD_EXP 11
7329: PPUSH
7330: LD_STRING D3a-Sim-5
7332: PPUSH
7333: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
7337: LD_EXP 17
7341: PPUSH
7342: LD_STRING D3a-Sci1-5
7344: PPUSH
7345: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7349: LD_EXP 11
7353: PPUSH
7354: LD_STRING D3a-Sim-6
7356: PPUSH
7357: CALL_OW 88
// DialogueOff ;
7361: CALL_OW 7
// end else
7365: GO 7640
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_class , 4 ] ] ) diff [ JMM , Frank , Lisa , Simms , Khatam ] ;
7367: LD_ADDR_VAR 0 3
7371: PUSH
7372: LD_INT 22
7374: PUSH
7375: LD_INT 1
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 26
7384: PUSH
7385: LD_INT 1
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PUSH
7392: LD_INT 25
7394: PUSH
7395: LD_INT 4
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: LIST
7406: PPUSH
7407: CALL_OW 69
7411: PUSH
7412: LD_EXP 1
7416: PUSH
7417: LD_EXP 7
7421: PUSH
7422: LD_EXP 6
7426: PUSH
7427: LD_EXP 11
7431: PUSH
7432: LD_EXP 14
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: DIFF
7444: ST_TO_ADDR
// if tmp3 > 0 then
7445: LD_VAR 0 3
7449: PUSH
7450: LD_INT 0
7452: GREATER
7453: IFFALSE 7640
// begin DialogueOn ;
7455: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7459: LD_EXP 11
7463: PPUSH
7464: LD_STRING D3a-Sim-1
7466: PPUSH
7467: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
7471: LD_VAR 0 3
7475: PUSH
7476: LD_INT 1
7478: ARRAY
7479: PPUSH
7480: LD_STRING D3a-Sci1-1
7482: PPUSH
7483: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7487: LD_EXP 11
7491: PPUSH
7492: LD_STRING D3a-Sim-2
7494: PPUSH
7495: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
7499: LD_VAR 0 3
7503: PUSH
7504: LD_INT 1
7506: ARRAY
7507: PPUSH
7508: LD_STRING D3a-Sci1-2
7510: PPUSH
7511: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7515: LD_EXP 11
7519: PPUSH
7520: LD_STRING D3a-Sim-3
7522: PPUSH
7523: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
7527: LD_VAR 0 3
7531: PUSH
7532: LD_INT 1
7534: ARRAY
7535: PPUSH
7536: LD_STRING D3a-Sci1-3
7538: PPUSH
7539: CALL_OW 88
// if IsOK ( Joan ) then
7543: LD_EXP 13
7547: PPUSH
7548: CALL_OW 302
7552: IFFALSE 7568
// Say ( Simms , D3a-Sim-4 ) else
7554: LD_EXP 11
7558: PPUSH
7559: LD_STRING D3a-Sim-4
7561: PPUSH
7562: CALL_OW 88
7566: GO 7580
// Say ( Simms , D3a-Sim-4a ) ;
7568: LD_EXP 11
7572: PPUSH
7573: LD_STRING D3a-Sim-4a
7575: PPUSH
7576: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
7580: LD_VAR 0 3
7584: PUSH
7585: LD_INT 1
7587: ARRAY
7588: PPUSH
7589: LD_STRING D3a-Sci1-4
7591: PPUSH
7592: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7596: LD_EXP 11
7600: PPUSH
7601: LD_STRING D3a-Sim-5
7603: PPUSH
7604: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
7608: LD_VAR 0 3
7612: PUSH
7613: LD_INT 1
7615: ARRAY
7616: PPUSH
7617: LD_STRING D3a-Sci1-5
7619: PPUSH
7620: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7624: LD_EXP 11
7628: PPUSH
7629: LD_STRING D3a-Sim-6
7631: PPUSH
7632: CALL_OW 88
// DialogueOff ;
7636: CALL_OW 7
// end ; end ; end ;
7640: PPOPN 3
7642: END
// every 0 0$2 trigger joinEpsilon = 1 do var rnd ;
7643: LD_EXP 31
7647: PUSH
7648: LD_INT 1
7650: EQUAL
7651: IFFALSE 7986
7653: GO 7655
7655: DISABLE
7656: LD_INT 0
7658: PPUSH
// begin wait ( 2 2$00 ) ;
7659: LD_INT 4200
7661: PPUSH
7662: CALL_OW 67
// SayRadio ( AmScout , D4-FSol1-1 ) ;
7666: LD_EXP 18
7670: PPUSH
7671: LD_STRING D4-FSol1-1
7673: PPUSH
7674: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
7678: LD_STRING M3
7680: PPUSH
7681: CALL_OW 337
// PrepareRussians ;
7685: CALL 3782 0 0
// spawnRussians := true ;
7689: LD_ADDR_EXP 60
7693: PUSH
7694: LD_INT 1
7696: ST_TO_ADDR
// rnd = Rand ( 1 , 100 ) ;
7697: LD_ADDR_VAR 0 1
7701: PUSH
7702: LD_INT 1
7704: PPUSH
7705: LD_INT 100
7707: PPUSH
7708: CALL_OW 12
7712: ST_TO_ADDR
// if difficulty = 1 then
7713: LD_OWVAR 67
7717: PUSH
7718: LD_INT 1
7720: EQUAL
7721: IFFALSE 7804
// begin if rnd > 0 and rnd < 51 then
7723: LD_VAR 0 1
7727: PUSH
7728: LD_INT 0
7730: GREATER
7731: PUSH
7732: LD_VAR 0 1
7736: PUSH
7737: LD_INT 51
7739: LESS
7740: AND
7741: IFFALSE 7750
// BuildRussianBase ( 2 ) ;
7743: LD_INT 2
7745: PPUSH
7746: CALL 12128 0 1
// if rnd > 50 and rnd < 81 then
7750: LD_VAR 0 1
7754: PUSH
7755: LD_INT 50
7757: GREATER
7758: PUSH
7759: LD_VAR 0 1
7763: PUSH
7764: LD_INT 81
7766: LESS
7767: AND
7768: IFFALSE 7777
// BuildRussianBase ( 1 ) ;
7770: LD_INT 1
7772: PPUSH
7773: CALL 12128 0 1
// if rnd > 80 and rnd < 101 then
7777: LD_VAR 0 1
7781: PUSH
7782: LD_INT 80
7784: GREATER
7785: PUSH
7786: LD_VAR 0 1
7790: PUSH
7791: LD_INT 101
7793: LESS
7794: AND
7795: IFFALSE 7804
// BuildRussianBase ( 3 ) ;
7797: LD_INT 3
7799: PPUSH
7800: CALL 12128 0 1
// end ; if difficulty = 2 then
7804: LD_OWVAR 67
7808: PUSH
7809: LD_INT 2
7811: EQUAL
7812: IFFALSE 7895
// begin if rnd > 0 and rnd < 61 then
7814: LD_VAR 0 1
7818: PUSH
7819: LD_INT 0
7821: GREATER
7822: PUSH
7823: LD_VAR 0 1
7827: PUSH
7828: LD_INT 61
7830: LESS
7831: AND
7832: IFFALSE 7841
// BuildRussianBase ( 2 ) ;
7834: LD_INT 2
7836: PPUSH
7837: CALL 12128 0 1
// if rnd > 60 and rnd < 81 then
7841: LD_VAR 0 1
7845: PUSH
7846: LD_INT 60
7848: GREATER
7849: PUSH
7850: LD_VAR 0 1
7854: PUSH
7855: LD_INT 81
7857: LESS
7858: AND
7859: IFFALSE 7868
// BuildRussianBase ( 1 ) ;
7861: LD_INT 1
7863: PPUSH
7864: CALL 12128 0 1
// if rnd > 80 and rnd < 101 then
7868: LD_VAR 0 1
7872: PUSH
7873: LD_INT 80
7875: GREATER
7876: PUSH
7877: LD_VAR 0 1
7881: PUSH
7882: LD_INT 101
7884: LESS
7885: AND
7886: IFFALSE 7895
// BuildRussianBase ( 3 ) ;
7888: LD_INT 3
7890: PPUSH
7891: CALL 12128 0 1
// end ; if difficulty >= 3 then
7895: LD_OWVAR 67
7899: PUSH
7900: LD_INT 3
7902: GREATEREQUAL
7903: IFFALSE 7986
// begin if rnd > 0 and rnd < 71 then
7905: LD_VAR 0 1
7909: PUSH
7910: LD_INT 0
7912: GREATER
7913: PUSH
7914: LD_VAR 0 1
7918: PUSH
7919: LD_INT 71
7921: LESS
7922: AND
7923: IFFALSE 7932
// BuildRussianBase ( 3 ) ;
7925: LD_INT 3
7927: PPUSH
7928: CALL 12128 0 1
// if rnd > 70 and rnd < 81 then
7932: LD_VAR 0 1
7936: PUSH
7937: LD_INT 70
7939: GREATER
7940: PUSH
7941: LD_VAR 0 1
7945: PUSH
7946: LD_INT 81
7948: LESS
7949: AND
7950: IFFALSE 7959
// BuildRussianBase ( 2 ) ;
7952: LD_INT 2
7954: PPUSH
7955: CALL 12128 0 1
// if rnd > 80 and rnd < 101 then
7959: LD_VAR 0 1
7963: PUSH
7964: LD_INT 80
7966: GREATER
7967: PUSH
7968: LD_VAR 0 1
7972: PUSH
7973: LD_INT 101
7975: LESS
7976: AND
7977: IFFALSE 7986
// BuildRussianBase ( 1 ) ;
7979: LD_INT 1
7981: PPUSH
7982: CALL 12128 0 1
// end ; end ;
7986: PPOPN 1
7988: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
7989: LD_INT 54
7991: PPUSH
7992: LD_INT 1
7994: PPUSH
7995: CALL_OW 321
7999: PUSH
8000: LD_INT 2
8002: EQUAL
8003: PUSH
8004: LD_INT 21
8006: PPUSH
8007: LD_INT 1
8009: PPUSH
8010: CALL_OW 321
8014: PUSH
8015: LD_INT 2
8017: EQUAL
8018: OR
8019: PUSH
8020: LD_INT 22
8022: PPUSH
8023: LD_INT 1
8025: PPUSH
8026: CALL_OW 321
8030: PUSH
8031: LD_INT 2
8033: EQUAL
8034: OR
8035: IFFALSE 8337
8037: GO 8039
8039: DISABLE
8040: LD_INT 0
8042: PPUSH
8043: PPUSH
// begin if IsOk ( DeltaDoctor ) then
8044: LD_EXP 17
8048: PPUSH
8049: CALL_OW 302
8053: IFFALSE 8067
// tmp := DeltaDoctor else
8055: LD_ADDR_VAR 0 2
8059: PUSH
8060: LD_EXP 17
8064: ST_TO_ADDR
8065: GO 8077
// tmp := Denis ;
8067: LD_ADDR_VAR 0 2
8071: PUSH
8072: LD_EXP 12
8076: ST_TO_ADDR
// if tmp then
8077: LD_VAR 0 2
8081: IFFALSE 8175
// begin DialogueOn ;
8083: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
8087: LD_EXP 1
8091: PPUSH
8092: LD_STRING D6-JMM-1
8094: PPUSH
8095: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
8099: LD_VAR 0 2
8103: PPUSH
8104: LD_STRING D6-Sci1-1
8106: PPUSH
8107: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
8111: LD_EXP 1
8115: PPUSH
8116: LD_STRING D6-JMM-2
8118: PPUSH
8119: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
8123: LD_VAR 0 2
8127: PPUSH
8128: LD_STRING D6-Sci1-2
8130: PPUSH
8131: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
8135: LD_EXP 1
8139: PPUSH
8140: LD_STRING D6-JMM-3
8142: PPUSH
8143: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
8147: LD_VAR 0 2
8151: PPUSH
8152: LD_STRING D6-Sci1-3
8154: PPUSH
8155: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
8159: LD_EXP 1
8163: PPUSH
8164: LD_STRING D6-JMM-4
8166: PPUSH
8167: CALL_OW 88
// DialogueOff ;
8171: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
8175: LD_INT 1050
8177: PPUSH
8178: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
8182: LD_EXP 51
8186: PUSH
8187: LD_INT 0
8189: EQUAL
8190: PUSH
8191: LD_EXP 14
8195: PPUSH
8196: CALL_OW 302
8200: AND
8201: IFFALSE 8259
// begin DialogueOn ;
8203: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
8207: LD_EXP 29
8211: PPUSH
8212: LD_STRING D5-Ar1-1
8214: PPUSH
8215: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
8219: LD_EXP 28
8223: PPUSH
8224: LD_STRING D5-Diet-1
8226: PPUSH
8227: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
8231: LD_EXP 29
8235: PPUSH
8236: LD_STRING D5-Ar1-2
8238: PPUSH
8239: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
8243: LD_EXP 28
8247: PPUSH
8248: LD_STRING D5-Diet-2
8250: PPUSH
8251: CALL_OW 88
// DialogueOff ;
8255: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
8259: LD_INT 35
8261: PPUSH
8262: CALL_OW 67
// until tick > 10 10$00 ;
8266: LD_OWVAR 1
8270: PUSH
8271: LD_INT 21000
8273: GREATER
8274: IFFALSE 8259
// wait ( 1 1$30 ) ;
8276: LD_INT 3150
8278: PPUSH
8279: CALL_OW 67
// if arabianTrait = 0 then
8283: LD_EXP 51
8287: PUSH
8288: LD_INT 0
8290: EQUAL
8291: IFFALSE 8337
// begin arabianTrait = 1 ;
8293: LD_ADDR_EXP 51
8297: PUSH
8298: LD_INT 1
8300: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
8301: LD_INT 2
8303: PPUSH
8304: LD_INT 3
8306: PPUSH
8307: LD_INT 1
8309: PPUSH
8310: LD_INT 1
8312: PPUSH
8313: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
8317: LD_INT 2
8319: PPUSH
8320: LD_INT 6
8322: PPUSH
8323: LD_INT 1
8325: PPUSH
8326: LD_INT 1
8328: PPUSH
8329: CALL_OW 80
// PrepareArabianTrait ;
8333: CALL 8340 0 0
// end ; end ;
8337: PPOPN 2
8339: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding ; begin
8340: LD_INT 0
8342: PPUSH
8343: PPUSH
8344: PPUSH
8345: PPUSH
8346: PPUSH
8347: PPUSH
8348: PPUSH
8349: PPUSH
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
8350: LD_ADDR_VAR 0 6
8354: PUSH
8355: LD_INT 22
8357: PUSH
8358: LD_INT 2
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: PUSH
8365: LD_INT 2
8367: PUSH
8368: LD_INT 25
8370: PUSH
8371: LD_INT 4
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PUSH
8378: LD_INT 25
8380: PUSH
8381: LD_INT 2
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: PUSH
8388: LD_INT 25
8390: PUSH
8391: LD_INT 3
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PPUSH
8408: CALL_OW 69
8412: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8413: LD_ADDR_VAR 0 5
8417: PUSH
8418: LD_INT 22
8420: PUSH
8421: LD_INT 2
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: PUSH
8428: LD_INT 21
8430: PUSH
8431: LD_INT 1
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PUSH
8438: LD_INT 2
8440: PUSH
8441: LD_INT 25
8443: PUSH
8444: LD_INT 1
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_INT 25
8453: PUSH
8454: LD_INT 8
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PUSH
8461: LD_INT 25
8463: PUSH
8464: LD_INT 15
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: LIST
8481: PPUSH
8482: CALL_OW 69
8486: PUSH
8487: LD_EXP 28
8491: PUSH
8492: EMPTY
8493: LIST
8494: DIFF
8495: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
8496: LD_ADDR_VAR 0 7
8500: PUSH
8501: LD_INT 22
8503: PUSH
8504: LD_INT 2
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: LD_INT 30
8513: PUSH
8514: LD_INT 5
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: PPUSH
8525: CALL_OW 69
8529: PUSH
8530: LD_INT 1
8532: ARRAY
8533: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
8534: LD_VAR 0 6
8538: PPUSH
8539: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
8543: LD_VAR 0 5
8547: PPUSH
8548: CALL_OW 122
// wait ( 0 0$3 ) ;
8552: LD_INT 105
8554: PPUSH
8555: CALL_OW 67
// AddComEnterUnit ( arCivilian , barracks ) ;
8559: LD_VAR 0 6
8563: PPUSH
8564: LD_VAR 0 7
8568: PPUSH
8569: CALL_OW 180
// AddComChangeProfession ( arCivilian , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
8573: LD_VAR 0 6
8577: PPUSH
8578: LD_INT 1
8580: PUSH
8581: LD_INT 8
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 1
8590: PPUSH
8591: LD_INT 2
8593: PPUSH
8594: CALL_OW 12
8598: ARRAY
8599: PPUSH
8600: CALL_OW 183
// AddComExitBuilding ( arCivilian ) ;
8604: LD_VAR 0 6
8608: PPUSH
8609: CALL_OW 182
// wait ( 0 0$1 ) ;
8613: LD_INT 35
8615: PPUSH
8616: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
8620: LD_INT 76
8622: PPUSH
8623: LD_INT 19
8625: PPUSH
8626: CALL_OW 84
// DialogueOn ;
8630: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8634: LD_INT 22
8636: PUSH
8637: LD_INT 1
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 26
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 2
8656: PUSH
8657: LD_INT 25
8659: PUSH
8660: LD_INT 1
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PUSH
8667: LD_INT 25
8669: PUSH
8670: LD_INT 2
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PUSH
8677: LD_INT 25
8679: PUSH
8680: LD_INT 3
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PUSH
8687: LD_INT 25
8689: PUSH
8690: LD_INT 4
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: LD_INT 25
8699: PUSH
8700: LD_INT 5
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: LIST
8719: PPUSH
8720: CALL_OW 69
8724: PPUSH
8725: LD_STRING D8-Sol1-1
8727: PPUSH
8728: LD_STRING D8-Sol1-1
8730: PPUSH
8731: CALL 11470 0 3
// if IsOK ( DeltaDoctor ) then
8735: LD_EXP 17
8739: PPUSH
8740: CALL_OW 302
8744: IFFALSE 8760
// Say ( DeltaDoctor , D8-Sci1-1 ) else
8746: LD_EXP 17
8750: PPUSH
8751: LD_STRING D8-Sci1-1
8753: PPUSH
8754: CALL_OW 88
8758: GO 8861
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8760: LD_INT 22
8762: PUSH
8763: LD_INT 1
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: PUSH
8770: LD_INT 26
8772: PUSH
8773: LD_INT 1
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: PUSH
8780: LD_INT 2
8782: PUSH
8783: LD_INT 25
8785: PUSH
8786: LD_INT 1
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_INT 25
8795: PUSH
8796: LD_INT 2
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: LD_INT 25
8805: PUSH
8806: LD_INT 3
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PUSH
8813: LD_INT 25
8815: PUSH
8816: LD_INT 4
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PUSH
8823: LD_INT 25
8825: PUSH
8826: LD_INT 5
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PUSH
8833: EMPTY
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: LIST
8845: PPUSH
8846: CALL_OW 69
8850: PPUSH
8851: LD_STRING D8-Sol1-1
8853: PPUSH
8854: LD_STRING D8-Sol1-1
8856: PPUSH
8857: CALL 11470 0 3
// Say ( JMM , D8-JMM-1 ) ;
8861: LD_EXP 1
8865: PPUSH
8866: LD_STRING D8-JMM-1
8868: PPUSH
8869: CALL_OW 88
// DialogueOff ;
8873: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
8877: LD_INT 2
8879: PPUSH
8880: LD_INT 2
8882: PPUSH
8883: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
8887: LD_INT 1
8889: PPUSH
8890: LD_INT 2
8892: PPUSH
8893: LD_INT 2
8895: PPUSH
8896: LD_INT 1
8898: PPUSH
8899: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
8903: LD_INT 3
8905: PPUSH
8906: LD_INT 2
8908: PPUSH
8909: LD_INT 1
8911: PPUSH
8912: LD_INT 1
8914: PPUSH
8915: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
8919: LD_STRING M4
8921: PPUSH
8922: CALL_OW 337
// wait ( 0 0$1 ) ;
8926: LD_INT 35
8928: PPUSH
8929: CALL_OW 67
// if IsLive ( Khatam ) then
8933: LD_EXP 14
8937: PPUSH
8938: CALL_OW 300
8942: IFFALSE 8956
// DoNotAttack ( 2 , Khatam ) ;
8944: LD_INT 2
8946: PPUSH
8947: LD_EXP 14
8951: PPUSH
8952: CALL_OW 471
// wait ( 0 0$1 ) ;
8956: LD_INT 35
8958: PPUSH
8959: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
8963: LD_ADDR_VAR 0 8
8967: PUSH
8968: LD_INT 22
8970: PUSH
8971: LD_INT 1
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: PUSH
8978: LD_INT 21
8980: PUSH
8981: LD_INT 3
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PPUSH
8992: CALL_OW 69
8996: PPUSH
8997: LD_VAR 0 5
9001: PUSH
9002: LD_INT 1
9004: ARRAY
9005: PPUSH
9006: CALL_OW 74
9010: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
9011: LD_VAR 0 5
9015: PPUSH
9016: LD_INT 25
9018: PUSH
9019: LD_INT 1
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PPUSH
9026: CALL_OW 72
9030: PUSH
9031: LD_INT 1
9033: ARRAY
9034: PPUSH
9035: LD_VAR 0 8
9039: PPUSH
9040: CALL_OW 250
9044: PPUSH
9045: LD_VAR 0 8
9049: PPUSH
9050: CALL_OW 251
9054: PPUSH
9055: LD_VAR 0 8
9059: PPUSH
9060: CALL_OW 192
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
9064: LD_VAR 0 5
9068: PPUSH
9069: LD_INT 84
9071: PPUSH
9072: LD_INT 22
9074: PPUSH
9075: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
9079: LD_VAR 0 5
9083: PPUSH
9084: LD_INT 82
9086: PPUSH
9087: LD_INT 5
9089: PPUSH
9090: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
9094: LD_VAR 0 5
9098: PPUSH
9099: LD_INT 95
9101: PPUSH
9102: LD_INT 12
9104: PPUSH
9105: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
9109: LD_VAR 0 5
9113: PPUSH
9114: LD_INT 102
9116: PPUSH
9117: LD_INT 11
9119: PPUSH
9120: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
9124: LD_VAR 0 5
9128: PPUSH
9129: LD_INT 116
9131: PPUSH
9132: LD_INT 15
9134: PPUSH
9135: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
9139: LD_VAR 0 5
9143: PPUSH
9144: LD_INT 140
9146: PPUSH
9147: LD_INT 25
9149: PPUSH
9150: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
9154: LD_VAR 0 5
9158: PPUSH
9159: LD_INT 160
9161: PPUSH
9162: LD_INT 56
9164: PPUSH
9165: CALL_OW 174
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
9169: LD_ADDR_VAR 0 5
9173: PUSH
9174: LD_INT 22
9176: PUSH
9177: LD_INT 2
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: PUSH
9184: LD_INT 21
9186: PUSH
9187: LD_INT 1
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PUSH
9194: LD_INT 2
9196: PUSH
9197: LD_INT 25
9199: PUSH
9200: LD_INT 1
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 25
9209: PUSH
9210: LD_INT 8
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: LD_INT 25
9219: PUSH
9220: LD_INT 15
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: LIST
9237: PPUSH
9238: CALL_OW 69
9242: PUSH
9243: LD_EXP 28
9247: PUSH
9248: EMPTY
9249: LIST
9250: DIFF
9251: ST_TO_ADDR
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
9252: LD_ADDR_VAR 0 6
9256: PUSH
9257: LD_INT 22
9259: PUSH
9260: LD_INT 2
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: LD_INT 21
9269: PUSH
9270: LD_INT 1
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PUSH
9277: LD_INT 2
9279: PUSH
9280: LD_INT 25
9282: PUSH
9283: LD_INT 2
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: PUSH
9290: LD_INT 25
9292: PUSH
9293: LD_INT 3
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: PUSH
9300: LD_INT 25
9302: PUSH
9303: LD_INT 4
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: PUSH
9310: LD_INT 25
9312: PUSH
9313: LD_INT 12
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PUSH
9320: LD_INT 25
9322: PUSH
9323: LD_INT 16
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: LIST
9342: PPUSH
9343: CALL_OW 69
9347: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
9348: LD_ADDR_VAR 0 6
9352: PUSH
9353: LD_VAR 0 6
9357: PUSH
9358: LD_EXP 28
9362: ADD
9363: ST_TO_ADDR
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
9364: LD_VAR 0 5
9368: PPUSH
9369: LD_INT 189
9371: PPUSH
9372: LD_INT 79
9374: PPUSH
9375: CALL_OW 174
// if UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) then
9379: LD_VAR 0 5
9383: PPUSH
9384: LD_INT 25
9386: PUSH
9387: LD_INT 15
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PPUSH
9394: CALL_OW 72
9398: IFFALSE 9439
// ComEnterUnit ( UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) [ 1 ] , HexInfo ( 84 , 21 ) ) ;
9400: LD_VAR 0 5
9404: PPUSH
9405: LD_INT 25
9407: PUSH
9408: LD_INT 15
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PPUSH
9415: CALL_OW 72
9419: PUSH
9420: LD_INT 1
9422: ARRAY
9423: PPUSH
9424: LD_INT 84
9426: PPUSH
9427: LD_INT 21
9429: PPUSH
9430: CALL_OW 428
9434: PPUSH
9435: CALL_OW 120
// wait ( 0 0$4 ) ;
9439: LD_INT 140
9441: PPUSH
9442: CALL_OW 67
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
9446: LD_VAR 0 6
9450: PPUSH
9451: LD_INT 88
9453: PPUSH
9454: LD_INT 8
9456: PPUSH
9457: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
9461: LD_VAR 0 6
9465: PPUSH
9466: LD_INT 102
9468: PPUSH
9469: LD_INT 10
9471: PPUSH
9472: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
9476: LD_VAR 0 6
9480: PPUSH
9481: LD_INT 116
9483: PPUSH
9484: LD_INT 15
9486: PPUSH
9487: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
9491: LD_VAR 0 6
9495: PPUSH
9496: LD_INT 140
9498: PPUSH
9499: LD_INT 25
9501: PPUSH
9502: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
9506: LD_VAR 0 6
9510: PPUSH
9511: LD_INT 160
9513: PPUSH
9514: LD_INT 56
9516: PPUSH
9517: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
9521: LD_VAR 0 6
9525: PPUSH
9526: LD_INT 189
9528: PPUSH
9529: LD_INT 79
9531: PPUSH
9532: CALL_OW 171
// arabianAttackersAI = 1 ;
9536: LD_ADDR_EXP 48
9540: PUSH
9541: LD_INT 1
9543: ST_TO_ADDR
// if IsOk ( Gary ) then
9544: LD_EXP 10
9548: PPUSH
9549: CALL_OW 302
9553: IFFALSE 9567
// Say ( Gary , D8a-Gary-1 ) ;
9555: LD_EXP 10
9559: PPUSH
9560: LD_STRING D8a-Gary-1
9562: PPUSH
9563: CALL_OW 88
// wait ( 0 0$5 ) ;
9567: LD_INT 175
9569: PPUSH
9570: CALL_OW 67
// if IsOK ( Khatam ) then
9574: LD_EXP 14
9578: PPUSH
9579: CALL_OW 302
9583: IFFALSE 10119
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
9585: LD_ADDR_VAR 0 3
9589: PUSH
9590: LD_INT 22
9592: PUSH
9593: LD_INT 1
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: LD_INT 2
9602: PUSH
9603: LD_INT 25
9605: PUSH
9606: LD_INT 1
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PUSH
9613: LD_INT 25
9615: PUSH
9616: LD_INT 2
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: PUSH
9623: LD_INT 25
9625: PUSH
9626: LD_INT 3
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: PUSH
9633: LD_INT 25
9635: PUSH
9636: LD_INT 4
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: LD_INT 25
9645: PUSH
9646: LD_INT 5
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PUSH
9653: LD_INT 25
9655: PUSH
9656: LD_INT 8
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: PPUSH
9676: CALL_OW 69
9680: PUSH
9681: LD_EXP 1
9685: PUSH
9686: LD_EXP 2
9690: PUSH
9691: LD_EXP 3
9695: PUSH
9696: LD_EXP 4
9700: PUSH
9701: LD_EXP 5
9705: PUSH
9706: LD_EXP 6
9710: PUSH
9711: LD_EXP 7
9715: PUSH
9716: LD_EXP 8
9720: PUSH
9721: LD_EXP 9
9725: PUSH
9726: LD_EXP 10
9730: PUSH
9731: LD_EXP 11
9735: PUSH
9736: LD_EXP 12
9740: PUSH
9741: LD_EXP 13
9745: PUSH
9746: LD_EXP 14
9750: PUSH
9751: LD_EXP 15
9755: PUSH
9756: LD_EXP 16
9760: PUSH
9761: LD_EXP 17
9765: PUSH
9766: LD_EXP 20
9770: PUSH
9771: LD_EXP 26
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: DIFF
9797: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
9798: LD_EXP 14
9802: PPUSH
9803: LD_INT 8
9805: PPUSH
9806: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
9810: LD_EXP 14
9814: PPUSH
9815: CALL_OW 122
// wait ( 0 0$1 ) ;
9819: LD_INT 35
9821: PPUSH
9822: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
9826: LD_EXP 14
9830: PPUSH
9831: CALL_OW 121
// wait ( 0 0$1 ) ;
9835: LD_INT 35
9837: PPUSH
9838: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
9842: LD_EXP 14
9846: PPUSH
9847: LD_INT 7
9849: PPUSH
9850: CALL_OW 113
// if not tmp then
9854: LD_VAR 0 3
9858: NOT
9859: IFFALSE 9863
// exit ;
9861: GO 10119
// DialogueOn ;
9863: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
9867: LD_VAR 0 3
9871: PUSH
9872: LD_INT 1
9874: ARRAY
9875: PPUSH
9876: CALL_OW 258
9880: PUSH
9881: LD_INT 1
9883: EQUAL
9884: IFFALSE 9904
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
9886: LD_VAR 0 3
9890: PUSH
9891: LD_INT 1
9893: ARRAY
9894: PPUSH
9895: LD_STRING D8b-Sol1-1
9897: PPUSH
9898: CALL_OW 88
9902: GO 9920
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
9904: LD_VAR 0 3
9908: PUSH
9909: LD_INT 1
9911: ARRAY
9912: PPUSH
9913: LD_STRING D8b-FSol1-1
9915: PPUSH
9916: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
9920: LD_EXP 14
9924: PPUSH
9925: LD_STRING D8b-Khat-1
9927: PPUSH
9928: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9932: LD_VAR 0 3
9936: PUSH
9937: LD_INT 1
9939: ARRAY
9940: PPUSH
9941: CALL_OW 258
9945: PUSH
9946: LD_INT 1
9948: EQUAL
9949: IFFALSE 9969
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
9951: LD_VAR 0 3
9955: PUSH
9956: LD_INT 1
9958: ARRAY
9959: PPUSH
9960: LD_STRING D8b-Sol1-2
9962: PPUSH
9963: CALL_OW 88
9967: GO 9985
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
9969: LD_VAR 0 3
9973: PUSH
9974: LD_INT 1
9976: ARRAY
9977: PPUSH
9978: LD_STRING D8b-FSol1-2
9980: PPUSH
9981: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
9985: LD_EXP 14
9989: PPUSH
9990: LD_STRING D8b-Khat-2
9992: PPUSH
9993: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9997: LD_VAR 0 3
10001: PUSH
10002: LD_INT 1
10004: ARRAY
10005: PPUSH
10006: CALL_OW 258
10010: PUSH
10011: LD_INT 1
10013: EQUAL
10014: IFFALSE 10034
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
10016: LD_VAR 0 3
10020: PUSH
10021: LD_INT 1
10023: ARRAY
10024: PPUSH
10025: LD_STRING D8b-Sol1-3
10027: PPUSH
10028: CALL_OW 88
10032: GO 10050
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
10034: LD_VAR 0 3
10038: PUSH
10039: LD_INT 1
10041: ARRAY
10042: PPUSH
10043: LD_STRING D8b-FSol1-3
10045: PPUSH
10046: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
10050: LD_EXP 14
10054: PPUSH
10055: LD_STRING D8b-Khat-3
10057: PPUSH
10058: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
10062: LD_VAR 0 3
10066: PUSH
10067: LD_INT 1
10069: ARRAY
10070: PPUSH
10071: CALL_OW 258
10075: PUSH
10076: LD_INT 1
10078: EQUAL
10079: IFFALSE 10099
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
10081: LD_VAR 0 3
10085: PUSH
10086: LD_INT 1
10088: ARRAY
10089: PPUSH
10090: LD_STRING D8b-Sol1-4
10092: PPUSH
10093: CALL_OW 88
10097: GO 10115
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
10099: LD_VAR 0 3
10103: PUSH
10104: LD_INT 1
10106: ARRAY
10107: PPUSH
10108: LD_STRING D8b-FSol1-4
10110: PPUSH
10111: CALL_OW 88
// DialogueOff ;
10115: CALL_OW 7
// end ; end ;
10119: LD_VAR 0 1
10123: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
10124: LD_INT 7
10126: PPUSH
10127: LD_INT 22
10129: PUSH
10130: LD_INT 2
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PPUSH
10137: CALL_OW 70
10141: PUSH
10142: LD_INT 0
10144: GREATER
10145: PUSH
10146: LD_EXP 14
10150: PPUSH
10151: LD_INT 7
10153: PPUSH
10154: CALL_OW 308
10158: OR
10159: IFFALSE 10366
10161: GO 10163
10163: DISABLE
10164: LD_INT 0
10166: PPUSH
// begin enable ;
10167: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
10168: LD_ADDR_VAR 0 1
10172: PUSH
10173: LD_INT 7
10175: PPUSH
10176: LD_INT 22
10178: PUSH
10179: LD_INT 2
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: PPUSH
10186: CALL_OW 70
10190: PUSH
10191: FOR_IN
10192: IFFALSE 10333
// begin if GetClass ( i ) = 4 then
10194: LD_VAR 0 1
10198: PPUSH
10199: CALL_OW 257
10203: PUSH
10204: LD_INT 4
10206: EQUAL
10207: IFFALSE 10219
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
10209: LD_INT 1
10211: PPUSH
10212: LD_STRING 10_ScientistsEscape_1
10214: PPUSH
10215: CALL_OW 39
// if i = Dietrich then
10219: LD_VAR 0 1
10223: PUSH
10224: LD_EXP 28
10228: EQUAL
10229: IFFALSE 10239
// GensherStatus = 1 ;
10231: LD_ADDR_EXP 54
10235: PUSH
10236: LD_INT 1
10238: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
10239: LD_VAR 0 1
10243: PPUSH
10244: CALL_OW 257
10248: PUSH
10249: LD_INT 1
10251: EQUAL
10252: PUSH
10253: LD_VAR 0 1
10257: PPUSH
10258: CALL_OW 257
10262: PUSH
10263: LD_INT 2
10265: EQUAL
10266: OR
10267: PUSH
10268: LD_VAR 0 1
10272: PPUSH
10273: CALL_OW 257
10277: PUSH
10278: LD_INT 3
10280: EQUAL
10281: OR
10282: PUSH
10283: LD_VAR 0 1
10287: PPUSH
10288: CALL_OW 257
10292: PUSH
10293: LD_INT 4
10295: EQUAL
10296: OR
10297: PUSH
10298: LD_VAR 0 1
10302: PPUSH
10303: CALL_OW 257
10307: PUSH
10308: LD_INT 8
10310: EQUAL
10311: OR
10312: IFFALSE 10322
// arabianEscape = 1 ;
10314: LD_ADDR_EXP 49
10318: PUSH
10319: LD_INT 1
10321: ST_TO_ADDR
// RemoveUnit ( i ) ;
10322: LD_VAR 0 1
10326: PPUSH
10327: CALL_OW 64
// end ;
10331: GO 10191
10333: POP
10334: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
10335: LD_EXP 14
10339: PPUSH
10340: LD_INT 7
10342: PPUSH
10343: CALL_OW 308
10347: IFFALSE 10366
// begin KhatamStatus = 1 ;
10349: LD_ADDR_EXP 55
10353: PUSH
10354: LD_INT 1
10356: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
10357: LD_EXP 14
10361: PPUSH
10362: CALL_OW 64
// end ; end ;
10366: PPOPN 1
10368: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
10369: LD_INT 22
10371: PUSH
10372: LD_INT 2
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PUSH
10379: LD_INT 21
10381: PUSH
10382: LD_INT 1
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 69
10397: PUSH
10398: LD_INT 0
10400: EQUAL
10401: PUSH
10402: LD_INT 22
10404: PUSH
10405: LD_INT 4
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 21
10414: PUSH
10415: LD_INT 1
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 69
10430: PUSH
10431: LD_INT 0
10433: EQUAL
10434: AND
10435: IFFALSE 10448
10437: GO 10439
10439: DISABLE
// arabianDefeated = 1 ;
10440: LD_ADDR_EXP 50
10444: PUSH
10445: LD_INT 1
10447: ST_TO_ADDR
10448: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
10449: LD_INT 54
10451: PPUSH
10452: LD_INT 1
10454: PPUSH
10455: CALL_OW 321
10459: PUSH
10460: LD_INT 2
10462: EQUAL
10463: PUSH
10464: LD_INT 55
10466: PPUSH
10467: LD_INT 1
10469: PPUSH
10470: CALL_OW 321
10474: PUSH
10475: LD_INT 2
10477: EQUAL
10478: AND
10479: PUSH
10480: LD_INT 21
10482: PPUSH
10483: LD_INT 1
10485: PPUSH
10486: CALL_OW 321
10490: PUSH
10491: LD_INT 2
10493: EQUAL
10494: AND
10495: PUSH
10496: LD_INT 22
10498: PPUSH
10499: LD_INT 1
10501: PPUSH
10502: CALL_OW 321
10506: PUSH
10507: LD_INT 2
10509: EQUAL
10510: AND
10511: PUSH
10512: LD_INT 12
10514: PPUSH
10515: LD_INT 1
10517: PPUSH
10518: CALL_OW 321
10522: PUSH
10523: LD_INT 2
10525: EQUAL
10526: AND
10527: PUSH
10528: LD_INT 32
10530: PPUSH
10531: LD_INT 1
10533: PPUSH
10534: CALL_OW 321
10538: PUSH
10539: LD_INT 2
10541: EQUAL
10542: AND
10543: PUSH
10544: LD_EXP 65
10548: PUSH
10549: LD_INT 0
10551: EQUAL
10552: AND
10553: PUSH
10554: LD_EXP 51
10558: PUSH
10559: LD_INT 0
10561: EQUAL
10562: AND
10563: PUSH
10564: LD_OWVAR 1
10568: PUSH
10569: LD_INT 31500
10571: GREATEREQUAL
10572: AND
10573: IFFALSE 10590
10575: GO 10577
10577: DISABLE
// begin arabianTrait = 1 ;
10578: LD_ADDR_EXP 51
10582: PUSH
10583: LD_INT 1
10585: ST_TO_ADDR
// PrepareArabianTrait ;
10586: CALL 8340 0 0
// end ;
10590: END
// every 0 0$1 trigger FilterAllUnits ( [ f_side , 5 ] ) > 3 do
10591: LD_INT 22
10593: PUSH
10594: LD_INT 5
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PPUSH
10601: CALL_OW 69
10605: PUSH
10606: LD_INT 3
10608: GREATER
10609: IFFALSE 10626
10611: GO 10613
10613: DISABLE
// SayRadio ( AmScout , D4-FSol1-3 ) ;
10614: LD_EXP 18
10618: PPUSH
10619: LD_STRING D4-FSol1-3
10621: PPUSH
10622: CALL_OW 94
10626: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
10627: LD_EXP 31
10631: PUSH
10632: LD_STRING 02_mikhailStatus_1
10634: PPUSH
10635: LD_INT 0
10637: PPUSH
10638: CALL_OW 30
10642: PUSH
10643: LD_INT 1
10645: EQUAL
10646: AND
10647: PUSH
10648: LD_INT 22
10650: PUSH
10651: LD_INT 5
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PPUSH
10658: CALL_OW 69
10662: PUSH
10663: LD_INT 0
10665: EQUAL
10666: AND
10667: PUSH
10668: LD_INT 22
10670: PUSH
10671: LD_INT 2
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 21
10680: PUSH
10681: LD_INT 1
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PPUSH
10692: CALL_OW 69
10696: PUSH
10697: LD_INT 0
10699: EQUAL
10700: PUSH
10701: LD_EXP 51
10705: PUSH
10706: LD_INT 0
10708: EQUAL
10709: OR
10710: AND
10711: IFFALSE 10720
10713: GO 10715
10715: DISABLE
// PrepareCornell ;
10716: CALL 3529 0 0
10720: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
10721: LD_INT 22
10723: PUSH
10724: LD_INT 1
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PPUSH
10731: CALL_OW 69
10735: PPUSH
10736: LD_EXP 20
10740: PPUSH
10741: CALL_OW 74
10745: PPUSH
10746: LD_EXP 20
10750: PPUSH
10751: CALL_OW 296
10755: PUSH
10756: LD_INT 9
10758: LESS
10759: IFFALSE 10980
10761: GO 10763
10763: DISABLE
// begin InGameOn ;
10764: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
10768: LD_EXP 20
10772: PPUSH
10773: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
10777: LD_EXP 20
10781: PPUSH
10782: LD_STRING D7-Corn-1
10784: PPUSH
10785: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
10789: LD_INT 22
10791: PUSH
10792: LD_INT 1
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: LD_INT 2
10801: PUSH
10802: LD_INT 25
10804: PUSH
10805: LD_INT 1
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: LD_INT 25
10814: PUSH
10815: LD_INT 2
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: LD_INT 25
10824: PUSH
10825: LD_INT 3
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 25
10834: PUSH
10835: LD_INT 4
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: LD_INT 25
10844: PUSH
10845: LD_INT 5
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PPUSH
10864: CALL_OW 69
10868: PPUSH
10869: LD_STRING D7-Sol1-1
10871: PPUSH
10872: LD_STRING D7-FSol1-1
10874: PPUSH
10875: CALL 11470 0 3
// CenterNowOnUnits ( Cornell ) ;
10879: LD_EXP 20
10883: PPUSH
10884: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
10888: LD_EXP 20
10892: PPUSH
10893: LD_STRING D7-Corn-2
10895: PPUSH
10896: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
10900: LD_EXP 1
10904: PPUSH
10905: LD_STRING D7-JMM-2
10907: PPUSH
10908: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
10912: LD_EXP 20
10916: PPUSH
10917: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
10921: LD_EXP 20
10925: PPUSH
10926: LD_STRING D7-Corn-3
10928: PPUSH
10929: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
10933: LD_EXP 20
10937: PPUSH
10938: LD_INT 250
10940: PPUSH
10941: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
10945: LD_EXP 20
10949: PPUSH
10950: LD_INT 1
10952: PPUSH
10953: CALL_OW 235
// wait ( 0 0$1 ) ;
10957: LD_INT 35
10959: PPUSH
10960: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
10964: LD_EXP 1
10968: PPUSH
10969: LD_STRING D7-JMM-3
10971: PPUSH
10972: CALL_OW 88
// InGameOff ;
10976: CALL_OW 9
// end ;
10980: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
10981: LD_EXP 20
10985: PPUSH
10986: CALL_OW 255
10990: PUSH
10991: LD_INT 1
10993: EQUAL
10994: PUSH
10995: LD_EXP 20
10999: PPUSH
11000: CALL_OW 256
11004: PUSH
11005: LD_INT 350
11007: GREATER
11008: AND
11009: IFFALSE 11202
11011: GO 11013
11013: DISABLE
// begin DialogueOn ;
11014: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
11018: LD_EXP 1
11022: PPUSH
11023: LD_STRING D7a-JMM-1
11025: PPUSH
11026: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
11030: LD_EXP 20
11034: PPUSH
11035: LD_STRING D7a-Corn-1
11037: PPUSH
11038: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
11042: LD_EXP 1
11046: PPUSH
11047: LD_STRING D7a-JMM-2
11049: PPUSH
11050: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
11054: LD_EXP 20
11058: PPUSH
11059: LD_STRING D7a-Corn-2
11061: PPUSH
11062: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
11066: LD_EXP 1
11070: PPUSH
11071: LD_STRING D7a-JMM-3
11073: PPUSH
11074: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
11078: LD_EXP 20
11082: PPUSH
11083: LD_STRING D7a-Corn-3
11085: PPUSH
11086: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
11090: LD_EXP 1
11094: PPUSH
11095: LD_STRING D7a-JMM-4
11097: PPUSH
11098: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
11102: LD_EXP 20
11106: PPUSH
11107: LD_STRING D7a-Corn-4
11109: PPUSH
11110: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
11114: LD_EXP 1
11118: PPUSH
11119: LD_STRING D7a-JMM-5
11121: PPUSH
11122: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
11126: LD_EXP 20
11130: PPUSH
11131: LD_STRING D7a-Corn-5
11133: PPUSH
11134: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
11138: LD_EXP 1
11142: PPUSH
11143: LD_STRING D7a-JMM-6
11145: PPUSH
11146: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
11150: LD_EXP 20
11154: PPUSH
11155: LD_STRING D7a-Corn-6
11157: PPUSH
11158: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
11162: LD_EXP 1
11166: PPUSH
11167: LD_STRING D7a-JMM-7
11169: PPUSH
11170: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
11174: LD_EXP 20
11178: PPUSH
11179: LD_STRING D7a-Corn-7
11181: PPUSH
11182: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
11186: LD_EXP 1
11190: PPUSH
11191: LD_STRING D7a-JMM-8
11193: PPUSH
11194: CALL_OW 88
// DialogueOff ;
11198: CALL_OW 7
// end ;
11202: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
11203: LD_EXP 63
11207: PUSH
11208: LD_EXP 1
11212: PPUSH
11213: CALL_OW 302
11217: PUSH
11218: LD_EXP 5
11222: PPUSH
11223: CALL_OW 302
11227: OR
11228: AND
11229: IFFALSE 11319
11231: GO 11233
11233: DISABLE
// begin Wait ( 0 0$2 ) ;
11234: LD_INT 70
11236: PPUSH
11237: CALL_OW 67
// DialogueOn ;
11241: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
11245: LD_EXP 63
11249: PUSH
11250: LD_INT 1
11252: ARRAY
11253: PPUSH
11254: LD_EXP 63
11258: PUSH
11259: LD_INT 2
11261: ARRAY
11262: PPUSH
11263: CALL_OW 86
// if IsOk ( Cyrus ) then
11267: LD_EXP 5
11271: PPUSH
11272: CALL_OW 302
11276: IFFALSE 11292
// Say ( Cyrus , D10-Cyrus-1 ) else
11278: LD_EXP 5
11282: PPUSH
11283: LD_STRING D10-Cyrus-1
11285: PPUSH
11286: CALL_OW 88
11290: GO 11315
// if IsOk ( JMM ) then
11292: LD_EXP 1
11296: PPUSH
11297: CALL_OW 302
11301: IFFALSE 11315
// Say ( JMM , D10-JMM-1 ) ;
11303: LD_EXP 1
11307: PPUSH
11308: LD_STRING D10-JMM-1
11310: PPUSH
11311: CALL_OW 88
// DialogueOff ;
11315: CALL_OW 7
// end ;
11319: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
11320: LD_INT 12
11322: PPUSH
11323: LD_INT 1
11325: PPUSH
11326: CALL_OW 321
11330: PUSH
11331: LD_INT 2
11333: EQUAL
11334: IFFALSE 11346
11336: GO 11338
11338: DISABLE
// ChangeMissionObjectives ( M2b ) ;
11339: LD_STRING M2b
11341: PPUSH
11342: CALL_OW 337
11346: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
11347: LD_INT 32
11349: PPUSH
11350: LD_INT 1
11352: PPUSH
11353: CALL_OW 321
11357: PUSH
11358: LD_INT 2
11360: EQUAL
11361: IFFALSE 11373
11363: GO 11365
11365: DISABLE
// ChangeMissionObjectives ( M2c ) ;
11366: LD_STRING M2c
11368: PPUSH
11369: CALL_OW 337
11373: END
// every 0 0$1 trigger arabianDefeated = 1 do
11374: LD_EXP 50
11378: PUSH
11379: LD_INT 1
11381: EQUAL
11382: IFFALSE 11394
11384: GO 11386
11386: DISABLE
// ChangeMissionObjectives ( M4a ) ;
11387: LD_STRING M4a
11389: PPUSH
11390: CALL_OW 337
11394: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
11395: LD_INT 54
11397: PPUSH
11398: LD_INT 1
11400: PPUSH
11401: CALL_OW 321
11405: PUSH
11406: LD_INT 2
11408: EQUAL
11409: PUSH
11410: LD_INT 55
11412: PPUSH
11413: LD_INT 1
11415: PPUSH
11416: CALL_OW 321
11420: PUSH
11421: LD_INT 2
11423: EQUAL
11424: AND
11425: PUSH
11426: LD_INT 21
11428: PPUSH
11429: LD_INT 1
11431: PPUSH
11432: CALL_OW 321
11436: PUSH
11437: LD_INT 2
11439: EQUAL
11440: AND
11441: PUSH
11442: LD_INT 22
11444: PPUSH
11445: LD_INT 1
11447: PPUSH
11448: CALL_OW 321
11452: PUSH
11453: LD_INT 2
11455: EQUAL
11456: AND
11457: IFFALSE 11469
11459: GO 11461
11461: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
11462: LD_STRING M2a
11464: PPUSH
11465: CALL_OW 337
11469: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
11470: LD_INT 0
11472: PPUSH
11473: PPUSH
11474: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
11475: LD_ADDR_VAR 0 1
11479: PUSH
11480: LD_VAR 0 1
11484: PUSH
11485: LD_EXP 1
11489: PUSH
11490: LD_EXP 2
11494: PUSH
11495: LD_EXP 3
11499: PUSH
11500: LD_EXP 4
11504: PUSH
11505: LD_EXP 5
11509: PUSH
11510: LD_EXP 6
11514: PUSH
11515: LD_EXP 7
11519: PUSH
11520: LD_EXP 8
11524: PUSH
11525: LD_EXP 9
11529: PUSH
11530: LD_EXP 10
11534: PUSH
11535: LD_EXP 11
11539: PUSH
11540: LD_EXP 12
11544: PUSH
11545: LD_EXP 13
11549: PUSH
11550: LD_EXP 14
11554: PUSH
11555: LD_EXP 15
11559: PUSH
11560: LD_EXP 16
11564: PUSH
11565: LD_EXP 17
11569: PUSH
11570: LD_EXP 18
11574: PUSH
11575: LD_EXP 20
11579: PUSH
11580: LD_EXP 26
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: DIFF
11607: ST_TO_ADDR
// if not characters then
11608: LD_VAR 0 1
11612: NOT
11613: IFFALSE 11617
// exit ;
11615: GO 11763
// rnd = rand ( 1 , characters ) ;
11617: LD_ADDR_VAR 0 6
11621: PUSH
11622: LD_INT 1
11624: PPUSH
11625: LD_VAR 0 1
11629: PPUSH
11630: CALL_OW 12
11634: ST_TO_ADDR
// for i = 1 to characters do
11635: LD_ADDR_VAR 0 5
11639: PUSH
11640: DOUBLE
11641: LD_INT 1
11643: DEC
11644: ST_TO_ADDR
11645: LD_VAR 0 1
11649: PUSH
11650: FOR_TO
11651: IFFALSE 11761
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
11653: LD_VAR 0 5
11657: PUSH
11658: LD_VAR 0 6
11662: EQUAL
11663: PUSH
11664: LD_VAR 0 1
11668: PUSH
11669: LD_VAR 0 5
11673: ARRAY
11674: PPUSH
11675: CALL_OW 258
11679: PUSH
11680: LD_INT 1
11682: EQUAL
11683: AND
11684: IFFALSE 11706
// Say ( characters [ i ] , dialogMID ) ;
11686: LD_VAR 0 1
11690: PUSH
11691: LD_VAR 0 5
11695: ARRAY
11696: PPUSH
11697: LD_VAR 0 2
11701: PPUSH
11702: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
11706: LD_VAR 0 5
11710: PUSH
11711: LD_VAR 0 6
11715: EQUAL
11716: PUSH
11717: LD_VAR 0 1
11721: PUSH
11722: LD_VAR 0 5
11726: ARRAY
11727: PPUSH
11728: CALL_OW 258
11732: PUSH
11733: LD_INT 2
11735: EQUAL
11736: AND
11737: IFFALSE 11759
// Say ( characters [ i ] , dialogFID ) ;
11739: LD_VAR 0 1
11743: PUSH
11744: LD_VAR 0 5
11748: ARRAY
11749: PPUSH
11750: LD_VAR 0 3
11754: PPUSH
11755: CALL_OW 88
// end ;
11759: GO 11650
11761: POP
11762: POP
// end ;
11763: LD_VAR 0 4
11767: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
11768: LD_INT 0
11770: PPUSH
11771: PPUSH
// for i in charactersList do
11772: LD_ADDR_VAR 0 4
11776: PUSH
11777: LD_VAR 0 1
11781: PUSH
11782: FOR_IN
11783: IFFALSE 11801
// SaveCharacters ( i , ident ) ;
11785: LD_VAR 0 4
11789: PPUSH
11790: LD_VAR 0 2
11794: PPUSH
11795: CALL_OW 38
11799: GO 11782
11801: POP
11802: POP
// end ;
11803: LD_VAR 0 3
11807: RET
// export function PrepareDifficulty ; begin
11808: LD_INT 0
11810: PPUSH
// if difficulty = 1 then
11811: LD_OWVAR 67
11815: PUSH
11816: LD_INT 1
11818: EQUAL
11819: IFFALSE 11863
// begin RuSolMinLevel = 3 ;
11821: LD_ADDR_EXP 38
11825: PUSH
11826: LD_INT 3
11828: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
11829: LD_ADDR_EXP 39
11833: PUSH
11834: LD_INT 5
11836: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11837: LD_INT 51
11839: PPUSH
11840: LD_INT 6
11842: PPUSH
11843: LD_INT 2
11845: PPUSH
11846: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11850: LD_INT 51
11852: PPUSH
11853: LD_INT 5
11855: PPUSH
11856: LD_INT 2
11858: PPUSH
11859: CALL_OW 322
// end ; if difficulty = 2 then
11863: LD_OWVAR 67
11867: PUSH
11868: LD_INT 2
11870: EQUAL
11871: IFFALSE 11967
// begin RuSolMinLevel = 5 ;
11873: LD_ADDR_EXP 38
11877: PUSH
11878: LD_INT 5
11880: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
11881: LD_ADDR_EXP 39
11885: PUSH
11886: LD_INT 7
11888: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11889: LD_INT 51
11891: PPUSH
11892: LD_INT 6
11894: PPUSH
11895: LD_INT 2
11897: PPUSH
11898: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11902: LD_INT 57
11904: PPUSH
11905: LD_INT 6
11907: PPUSH
11908: LD_INT 2
11910: PPUSH
11911: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11915: LD_INT 63
11917: PPUSH
11918: LD_INT 6
11920: PPUSH
11921: LD_INT 2
11923: PPUSH
11924: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11928: LD_INT 51
11930: PPUSH
11931: LD_INT 5
11933: PPUSH
11934: LD_INT 2
11936: PPUSH
11937: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
11941: LD_INT 5
11943: PPUSH
11944: LD_INT 2
11946: PPUSH
11947: LD_INT 2
11949: PPUSH
11950: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
11954: LD_INT 5
11956: PPUSH
11957: LD_INT 5
11959: PPUSH
11960: LD_INT 2
11962: PPUSH
11963: CALL_OW 322
// end ; if difficulty >= 3 then
11967: LD_OWVAR 67
11971: PUSH
11972: LD_INT 3
11974: GREATEREQUAL
11975: IFFALSE 12123
// begin RuSolMinLevel = 6 ;
11977: LD_ADDR_EXP 38
11981: PUSH
11982: LD_INT 6
11984: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
11985: LD_ADDR_EXP 39
11989: PUSH
11990: LD_INT 8
11992: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11993: LD_INT 51
11995: PPUSH
11996: LD_INT 6
11998: PPUSH
11999: LD_INT 2
12001: PPUSH
12002: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
12006: LD_INT 57
12008: PPUSH
12009: LD_INT 6
12011: PPUSH
12012: LD_INT 2
12014: PPUSH
12015: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
12019: LD_INT 52
12021: PPUSH
12022: LD_INT 6
12024: PPUSH
12025: LD_INT 2
12027: PPUSH
12028: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
12032: LD_INT 58
12034: PPUSH
12035: LD_INT 6
12037: PPUSH
12038: LD_INT 2
12040: PPUSH
12041: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
12045: LD_INT 63
12047: PPUSH
12048: LD_INT 6
12050: PPUSH
12051: LD_INT 2
12053: PPUSH
12054: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
12058: LD_INT 64
12060: PPUSH
12061: LD_INT 6
12063: PPUSH
12064: LD_INT 2
12066: PPUSH
12067: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
12071: LD_INT 51
12073: PPUSH
12074: LD_INT 5
12076: PPUSH
12077: LD_INT 2
12079: PPUSH
12080: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
12084: LD_INT 52
12086: PPUSH
12087: LD_INT 5
12089: PPUSH
12090: LD_INT 2
12092: PPUSH
12093: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
12097: LD_INT 66
12099: PPUSH
12100: LD_INT 2
12102: PPUSH
12103: LD_INT 2
12105: PPUSH
12106: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
12110: LD_INT 66
12112: PPUSH
12113: LD_INT 5
12115: PPUSH
12116: LD_INT 2
12118: PPUSH
12119: CALL_OW 322
// end ; end ;
12123: LD_VAR 0 1
12127: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
12128: LD_INT 0
12130: PPUSH
12131: PPUSH
12132: PPUSH
12133: PPUSH
12134: PPUSH
12135: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
12136: LD_ADDR_VAR 0 7
12140: PUSH
12141: LD_INT 43
12143: PUSH
12144: LD_INT 68
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PUSH
12151: LD_INT 43
12153: PUSH
12154: LD_INT 79
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: PUSH
12161: LD_INT 99
12163: PUSH
12164: LD_INT 114
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 103
12173: PUSH
12174: LD_INT 114
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: LD_INT 156
12183: PUSH
12184: LD_INT 92
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 152
12193: PUSH
12194: LD_INT 85
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: ST_TO_ADDR
// for i in sources do
12209: LD_ADDR_VAR 0 3
12213: PUSH
12214: LD_VAR 0 7
12218: PUSH
12219: FOR_IN
12220: IFFALSE 12249
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
12222: LD_VAR 0 3
12226: PUSH
12227: LD_INT 1
12229: ARRAY
12230: PPUSH
12231: LD_VAR 0 3
12235: PUSH
12236: LD_INT 2
12238: ARRAY
12239: PPUSH
12240: LD_INT 3
12242: PPUSH
12243: CALL_OW 441
12247: GO 12219
12249: POP
12250: POP
// case position of 1 :
12251: LD_VAR 0 1
12255: PUSH
12256: LD_INT 1
12258: DOUBLE
12259: EQUAL
12260: IFTRUE 12264
12262: GO 12275
12264: POP
// area := westConv ; 2 :
12265: LD_ADDR_VAR 0 6
12269: PUSH
12270: LD_INT 20
12272: ST_TO_ADDR
12273: GO 12314
12275: LD_INT 2
12277: DOUBLE
12278: EQUAL
12279: IFTRUE 12283
12281: GO 12294
12283: POP
// area := midConv ; 3 :
12284: LD_ADDR_VAR 0 6
12288: PUSH
12289: LD_INT 21
12291: ST_TO_ADDR
12292: GO 12314
12294: LD_INT 3
12296: DOUBLE
12297: EQUAL
12298: IFTRUE 12302
12300: GO 12313
12302: POP
// area := eastConv ; end ;
12303: LD_ADDR_VAR 0 6
12307: PUSH
12308: LD_INT 22
12310: ST_TO_ADDR
12311: GO 12314
12313: POP
// area := AreaToList ( area , 0 ) ;
12314: LD_ADDR_VAR 0 6
12318: PUSH
12319: LD_VAR 0 6
12323: PPUSH
12324: LD_INT 0
12326: PPUSH
12327: CALL_OW 517
12331: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
12332: LD_ADDR_VAR 0 3
12336: PUSH
12337: DOUBLE
12338: LD_INT 1
12340: DEC
12341: ST_TO_ADDR
12342: LD_VAR 0 6
12346: PUSH
12347: LD_INT 1
12349: ARRAY
12350: PUSH
12351: FOR_TO
12352: IFFALSE 12433
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
12354: LD_VAR 0 6
12358: PUSH
12359: LD_INT 1
12361: ARRAY
12362: PUSH
12363: LD_VAR 0 3
12367: ARRAY
12368: PPUSH
12369: LD_VAR 0 6
12373: PUSH
12374: LD_INT 2
12376: ARRAY
12377: PUSH
12378: LD_VAR 0 3
12382: ARRAY
12383: PPUSH
12384: LD_INT 1
12386: PPUSH
12387: LD_INT 1
12389: PPUSH
12390: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
12394: LD_VAR 0 6
12398: PUSH
12399: LD_INT 1
12401: ARRAY
12402: PUSH
12403: LD_VAR 0 3
12407: ARRAY
12408: PPUSH
12409: LD_VAR 0 6
12413: PUSH
12414: LD_INT 2
12416: ARRAY
12417: PUSH
12418: LD_VAR 0 3
12422: ARRAY
12423: PPUSH
12424: LD_INT 1
12426: PPUSH
12427: CALL_OW 331
// end ;
12431: GO 12351
12433: POP
12434: POP
// ruPossition = position ;
12435: LD_ADDR_EXP 43
12439: PUSH
12440: LD_VAR 0 1
12444: ST_TO_ADDR
// if position = 1 then
12445: LD_VAR 0 1
12449: PUSH
12450: LD_INT 1
12452: EQUAL
12453: IFFALSE 13201
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12455: LD_ADDR_VAR 0 4
12459: PUSH
12460: LD_INT 22
12462: PUSH
12463: LD_INT 3
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PUSH
12470: LD_INT 25
12472: PUSH
12473: LD_INT 2
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PPUSH
12484: CALL_OW 69
12488: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
12489: LD_ADDR_VAR 0 5
12493: PUSH
12494: LD_INT 0
12496: PUSH
12497: LD_INT 49
12499: PUSH
12500: LD_INT 74
12502: PUSH
12503: LD_INT 3
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: PUSH
12512: LD_INT 4
12514: PUSH
12515: LD_INT 73
12517: PUSH
12518: LD_INT 88
12520: PUSH
12521: LD_INT 5
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 4
12532: PUSH
12533: LD_INT 56
12535: PUSH
12536: LD_INT 62
12538: PUSH
12539: LD_INT 3
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: PUSH
12548: LD_INT 29
12550: PUSH
12551: LD_INT 43
12553: PUSH
12554: LD_INT 68
12556: PUSH
12557: LD_INT 2
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: PUSH
12566: LD_INT 30
12568: PUSH
12569: LD_INT 43
12571: PUSH
12572: LD_INT 79
12574: PUSH
12575: LD_INT 5
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: PUSH
12584: LD_INT 28
12586: PUSH
12587: LD_INT 60
12589: PUSH
12590: LD_INT 75
12592: PUSH
12593: LD_INT 1
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: PUSH
12602: LD_INT 2
12604: PUSH
12605: LD_INT 50
12607: PUSH
12608: LD_INT 87
12610: PUSH
12611: LD_INT 1
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 28
12622: PUSH
12623: LD_INT 45
12625: PUSH
12626: LD_INT 67
12628: PUSH
12629: LD_INT 2
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: PUSH
12638: LD_INT 17
12640: PUSH
12641: LD_INT 47
12643: PUSH
12644: LD_INT 84
12646: PUSH
12647: LD_INT 2
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: PUSH
12656: LD_INT 18
12658: PUSH
12659: LD_INT 46
12661: PUSH
12662: LD_INT 87
12664: PUSH
12665: LD_INT 1
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: PUSH
12674: LD_INT 28
12676: PUSH
12677: LD_INT 41
12679: PUSH
12680: LD_INT 64
12682: PUSH
12683: LD_INT 5
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: PUSH
12692: LD_INT 32
12694: PUSH
12695: LD_INT 75
12697: PUSH
12698: LD_INT 76
12700: PUSH
12701: LD_INT 5
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: PUSH
12710: LD_INT 32
12712: PUSH
12713: LD_INT 77
12715: PUSH
12716: LD_INT 75
12718: PUSH
12719: LD_INT 5
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: PUSH
12728: LD_INT 32
12730: PUSH
12731: LD_INT 69
12733: PUSH
12734: LD_INT 68
12736: PUSH
12737: LD_INT 3
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: PUSH
12746: LD_INT 32
12748: PUSH
12749: LD_INT 59
12751: PUSH
12752: LD_INT 96
12754: PUSH
12755: LD_INT 5
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: PUSH
12764: LD_INT 32
12766: PUSH
12767: LD_INT 56
12769: PUSH
12770: LD_INT 96
12772: PUSH
12773: LD_INT 0
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: PUSH
12782: LD_INT 32
12784: PUSH
12785: LD_INT 51
12787: PUSH
12788: LD_INT 61
12790: PUSH
12791: LD_INT 3
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: PUSH
12800: LD_INT 32
12802: PUSH
12803: LD_INT 42
12805: PUSH
12806: LD_INT 60
12808: PUSH
12809: LD_INT 3
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: PUSH
12818: LD_INT 32
12820: PUSH
12821: LD_INT 36
12823: PUSH
12824: LD_INT 58
12826: PUSH
12827: LD_INT 3
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: PUSH
12836: LD_INT 32
12838: PUSH
12839: LD_INT 39
12841: PUSH
12842: LD_INT 59
12844: PUSH
12845: LD_INT 3
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: PUSH
12854: LD_INT 32
12856: PUSH
12857: LD_INT 61
12859: PUSH
12860: LD_INT 64
12862: PUSH
12863: LD_INT 3
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: PUSH
12872: LD_INT 33
12874: PUSH
12875: LD_INT 63
12877: PUSH
12878: LD_INT 90
12880: PUSH
12881: LD_INT 5
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 33
12892: PUSH
12893: LD_INT 64
12895: PUSH
12896: LD_INT 88
12898: PUSH
12899: LD_INT 5
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 33
12910: PUSH
12911: LD_INT 72
12913: PUSH
12914: LD_INT 82
12916: PUSH
12917: LD_INT 5
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 6
12928: PUSH
12929: LD_INT 42
12931: PUSH
12932: LD_INT 74
12934: PUSH
12935: LD_INT 1
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 6
12946: PUSH
12947: LD_INT 56
12949: PUSH
12950: LD_INT 77
12952: PUSH
12953: LD_INT 2
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 21
12964: PUSH
12965: LD_INT 54
12967: PUSH
12968: LD_INT 91
12970: PUSH
12971: LD_INT 5
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: PUSH
12980: LD_INT 16
12982: PUSH
12983: LD_INT 50
12985: PUSH
12986: LD_INT 83
12988: PUSH
12989: LD_INT 3
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 24
13000: PUSH
13001: LD_INT 50
13003: PUSH
13004: LD_INT 90
13006: PUSH
13007: LD_INT 0
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13047: LD_ADDR_VAR 0 3
13051: PUSH
13052: LD_INT 22
13054: PUSH
13055: LD_INT 3
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: PUSH
13062: LD_INT 3
13064: PUSH
13065: LD_INT 25
13067: PUSH
13068: LD_INT 2
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PPUSH
13083: CALL_OW 69
13087: PUSH
13088: FOR_IN
13089: IFFALSE 13108
// AddComAgressiveMove ( i , 53 , 82 ) ;
13091: LD_VAR 0 3
13095: PPUSH
13096: LD_INT 53
13098: PPUSH
13099: LD_INT 82
13101: PPUSH
13102: CALL_OW 174
13106: GO 13088
13108: POP
13109: POP
// for i := 1 to buildingsTab do
13110: LD_ADDR_VAR 0 3
13114: PUSH
13115: DOUBLE
13116: LD_INT 1
13118: DEC
13119: ST_TO_ADDR
13120: LD_VAR 0 5
13124: PUSH
13125: FOR_TO
13126: IFFALSE 13199
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13128: LD_VAR 0 4
13132: PPUSH
13133: LD_VAR 0 5
13137: PUSH
13138: LD_VAR 0 3
13142: ARRAY
13143: PUSH
13144: LD_INT 1
13146: ARRAY
13147: PPUSH
13148: LD_VAR 0 5
13152: PUSH
13153: LD_VAR 0 3
13157: ARRAY
13158: PUSH
13159: LD_INT 2
13161: ARRAY
13162: PPUSH
13163: LD_VAR 0 5
13167: PUSH
13168: LD_VAR 0 3
13172: ARRAY
13173: PUSH
13174: LD_INT 3
13176: ARRAY
13177: PPUSH
13178: LD_VAR 0 5
13182: PUSH
13183: LD_VAR 0 3
13187: ARRAY
13188: PUSH
13189: LD_INT 4
13191: ARRAY
13192: PPUSH
13193: CALL_OW 205
13197: GO 13125
13199: POP
13200: POP
// end ; if position = 2 then
13201: LD_VAR 0 1
13205: PUSH
13206: LD_INT 2
13208: EQUAL
13209: IFFALSE 13824
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13211: LD_ADDR_VAR 0 4
13215: PUSH
13216: LD_INT 22
13218: PUSH
13219: LD_INT 3
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PUSH
13226: LD_INT 25
13228: PUSH
13229: LD_INT 2
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PPUSH
13240: CALL_OW 69
13244: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
13245: LD_ADDR_VAR 0 5
13249: PUSH
13250: LD_INT 0
13252: PUSH
13253: LD_INT 104
13255: PUSH
13256: LD_INT 110
13258: PUSH
13259: LD_INT 5
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 4
13270: PUSH
13271: LD_INT 98
13273: PUSH
13274: LD_INT 90
13276: PUSH
13277: LD_INT 3
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: PUSH
13286: LD_INT 29
13288: PUSH
13289: LD_INT 103
13291: PUSH
13292: LD_INT 114
13294: PUSH
13295: LD_INT 2
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: PUSH
13304: LD_INT 30
13306: PUSH
13307: LD_INT 99
13309: PUSH
13310: LD_INT 114
13312: PUSH
13313: LD_INT 3
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 28
13324: PUSH
13325: LD_INT 100
13327: PUSH
13328: LD_INT 112
13330: PUSH
13331: LD_INT 1
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: PUSH
13340: LD_INT 2
13342: PUSH
13343: LD_INT 92
13345: PUSH
13346: LD_INT 101
13348: PUSH
13349: LD_INT 0
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: PUSH
13358: LD_INT 28
13360: PUSH
13361: LD_INT 97
13363: PUSH
13364: LD_INT 116
13366: PUSH
13367: LD_INT 5
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 17
13378: PUSH
13379: LD_INT 96
13381: PUSH
13382: LD_INT 101
13384: PUSH
13385: LD_INT 4
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 18
13396: PUSH
13397: LD_INT 88
13399: PUSH
13400: LD_INT 97
13402: PUSH
13403: LD_INT 2
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 28
13414: PUSH
13415: LD_INT 106
13417: PUSH
13418: LD_INT 92
13420: PUSH
13421: LD_INT 2
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 32
13432: PUSH
13433: LD_INT 88
13435: PUSH
13436: LD_INT 89
13438: PUSH
13439: LD_INT 2
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 32
13450: PUSH
13451: LD_INT 86
13453: PUSH
13454: LD_INT 90
13456: PUSH
13457: LD_INT 2
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 32
13468: PUSH
13469: LD_INT 85
13471: PUSH
13472: LD_INT 99
13474: PUSH
13475: LD_INT 2
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 32
13486: PUSH
13487: LD_INT 85
13489: PUSH
13490: LD_INT 107
13492: PUSH
13493: LD_INT 1
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: PUSH
13502: LD_INT 33
13504: PUSH
13505: LD_INT 105
13507: PUSH
13508: LD_INT 99
13510: PUSH
13511: LD_INT 1
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 33
13522: PUSH
13523: LD_INT 102
13525: PUSH
13526: LD_INT 92
13528: PUSH
13529: LD_INT 3
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 33
13540: PUSH
13541: LD_INT 105
13543: PUSH
13544: LD_INT 92
13546: PUSH
13547: LD_INT 2
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: PUSH
13556: LD_INT 6
13558: PUSH
13559: LD_INT 92
13561: PUSH
13562: LD_INT 110
13564: PUSH
13565: LD_INT 0
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 6
13576: PUSH
13577: LD_INT 103
13579: PUSH
13580: LD_INT 103
13582: PUSH
13583: LD_INT 5
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: PUSH
13592: LD_INT 21
13594: PUSH
13595: LD_INT 89
13597: PUSH
13598: LD_INT 101
13600: PUSH
13601: LD_INT 1
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: PUSH
13610: LD_INT 16
13612: PUSH
13613: LD_INT 95
13615: PUSH
13616: LD_INT 104
13618: PUSH
13619: LD_INT 4
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: PUSH
13628: LD_INT 24
13630: PUSH
13631: LD_INT 92
13633: PUSH
13634: LD_INT 105
13636: PUSH
13637: LD_INT 0
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13670: LD_ADDR_VAR 0 3
13674: PUSH
13675: LD_INT 22
13677: PUSH
13678: LD_INT 3
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: LD_INT 3
13687: PUSH
13688: LD_INT 25
13690: PUSH
13691: LD_INT 2
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: PPUSH
13706: CALL_OW 69
13710: PUSH
13711: FOR_IN
13712: IFFALSE 13731
// AddComAgressiveMove ( i , 96 , 99 ) ;
13714: LD_VAR 0 3
13718: PPUSH
13719: LD_INT 96
13721: PPUSH
13722: LD_INT 99
13724: PPUSH
13725: CALL_OW 174
13729: GO 13711
13731: POP
13732: POP
// for i := 1 to buildingsTab do
13733: LD_ADDR_VAR 0 3
13737: PUSH
13738: DOUBLE
13739: LD_INT 1
13741: DEC
13742: ST_TO_ADDR
13743: LD_VAR 0 5
13747: PUSH
13748: FOR_TO
13749: IFFALSE 13822
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13751: LD_VAR 0 4
13755: PPUSH
13756: LD_VAR 0 5
13760: PUSH
13761: LD_VAR 0 3
13765: ARRAY
13766: PUSH
13767: LD_INT 1
13769: ARRAY
13770: PPUSH
13771: LD_VAR 0 5
13775: PUSH
13776: LD_VAR 0 3
13780: ARRAY
13781: PUSH
13782: LD_INT 2
13784: ARRAY
13785: PPUSH
13786: LD_VAR 0 5
13790: PUSH
13791: LD_VAR 0 3
13795: ARRAY
13796: PUSH
13797: LD_INT 3
13799: ARRAY
13800: PPUSH
13801: LD_VAR 0 5
13805: PUSH
13806: LD_VAR 0 3
13810: ARRAY
13811: PUSH
13812: LD_INT 4
13814: ARRAY
13815: PPUSH
13816: CALL_OW 205
13820: GO 13748
13822: POP
13823: POP
// end ; if position = 3 then
13824: LD_VAR 0 1
13828: PUSH
13829: LD_INT 3
13831: EQUAL
13832: IFFALSE 14618
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13834: LD_ADDR_VAR 0 4
13838: PUSH
13839: LD_INT 22
13841: PUSH
13842: LD_INT 3
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PUSH
13849: LD_INT 25
13851: PUSH
13852: LD_INT 2
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: PPUSH
13863: CALL_OW 69
13867: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
13868: LD_ADDR_VAR 0 5
13872: PUSH
13873: LD_INT 0
13875: PUSH
13876: LD_INT 151
13878: PUSH
13879: LD_INT 71
13881: PUSH
13882: LD_INT 4
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 4
13893: PUSH
13894: LD_INT 145
13896: PUSH
13897: LD_INT 53
13899: PUSH
13900: LD_INT 3
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: PUSH
13909: LD_INT 4
13911: PUSH
13912: LD_INT 172
13914: PUSH
13915: LD_INT 102
13917: PUSH
13918: LD_INT 5
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: PUSH
13927: LD_INT 29
13929: PUSH
13930: LD_INT 152
13932: PUSH
13933: LD_INT 85
13935: PUSH
13936: LD_INT 3
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: PUSH
13945: LD_INT 30
13947: PUSH
13948: LD_INT 156
13950: PUSH
13951: LD_INT 92
13953: PUSH
13954: LD_INT 3
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: PUSH
13963: LD_INT 28
13965: PUSH
13966: LD_INT 151
13968: PUSH
13969: LD_INT 66
13971: PUSH
13972: LD_INT 4
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: PUSH
13981: LD_INT 2
13983: PUSH
13984: LD_INT 163
13986: PUSH
13987: LD_INT 95
13989: PUSH
13990: LD_INT 5
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 28
14001: PUSH
14002: LD_INT 149
14004: PUSH
14005: LD_INT 63
14007: PUSH
14008: LD_INT 4
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: PUSH
14017: LD_INT 17
14019: PUSH
14020: LD_INT 167
14022: PUSH
14023: LD_INT 99
14025: PUSH
14026: LD_INT 5
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: PUSH
14035: LD_INT 18
14037: PUSH
14038: LD_INT 163
14040: PUSH
14041: LD_INT 98
14043: PUSH
14044: LD_INT 0
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: PUSH
14053: LD_INT 28
14055: PUSH
14056: LD_INT 154
14058: PUSH
14059: LD_INT 70
14061: PUSH
14062: LD_INT 4
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: PUSH
14071: LD_INT 32
14073: PUSH
14074: LD_INT 155
14076: PUSH
14077: LD_INT 62
14079: PUSH
14080: LD_INT 4
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: PUSH
14089: LD_INT 32
14091: PUSH
14092: LD_INT 161
14094: PUSH
14095: LD_INT 69
14097: PUSH
14098: LD_INT 4
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: PUSH
14107: LD_INT 32
14109: PUSH
14110: LD_INT 168
14112: PUSH
14113: LD_INT 78
14115: PUSH
14116: LD_INT 4
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: PUSH
14125: LD_INT 32
14127: PUSH
14128: LD_INT 163
14130: PUSH
14131: LD_INT 80
14133: PUSH
14134: LD_INT 5
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: PUSH
14143: LD_INT 32
14145: PUSH
14146: LD_INT 136
14148: PUSH
14149: LD_INT 73
14151: PUSH
14152: LD_INT 0
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: PUSH
14161: LD_INT 32
14163: PUSH
14164: LD_INT 157
14166: PUSH
14167: LD_INT 98
14169: PUSH
14170: LD_INT 0
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: PUSH
14179: LD_INT 32
14181: PUSH
14182: LD_INT 150
14184: PUSH
14185: LD_INT 87
14187: PUSH
14188: LD_INT 1
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 33
14199: PUSH
14200: LD_INT 171
14202: PUSH
14203: LD_INT 97
14205: PUSH
14206: LD_INT 4
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 33
14217: PUSH
14218: LD_INT 168
14220: PUSH
14221: LD_INT 92
14223: PUSH
14224: LD_INT 4
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: PUSH
14233: LD_INT 33
14235: PUSH
14236: LD_INT 166
14238: PUSH
14239: LD_INT 80
14241: PUSH
14242: LD_INT 5
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: PUSH
14251: LD_INT 33
14253: PUSH
14254: LD_INT 141
14256: PUSH
14257: LD_INT 54
14259: PUSH
14260: LD_INT 2
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: PUSH
14269: LD_INT 33
14271: PUSH
14272: LD_INT 133
14274: PUSH
14275: LD_INT 57
14277: PUSH
14278: LD_INT 2
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: PUSH
14287: LD_INT 33
14289: PUSH
14290: LD_INT 132
14292: PUSH
14293: LD_INT 61
14295: PUSH
14296: LD_INT 2
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: PUSH
14305: LD_INT 33
14307: PUSH
14308: LD_INT 150
14310: PUSH
14311: LD_INT 82
14313: PUSH
14314: LD_INT 0
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: PUSH
14323: LD_INT 33
14325: PUSH
14326: LD_INT 132
14328: PUSH
14329: LD_INT 72
14331: PUSH
14332: LD_INT 0
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: PUSH
14341: LD_INT 6
14343: PUSH
14344: LD_INT 146
14346: PUSH
14347: LD_INT 64
14349: PUSH
14350: LD_INT 4
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: PUSH
14359: LD_INT 6
14361: PUSH
14362: LD_INT 159
14364: PUSH
14365: LD_INT 85
14367: PUSH
14368: LD_INT 4
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: PUSH
14377: LD_INT 21
14379: PUSH
14380: LD_INT 163
14382: PUSH
14383: LD_INT 91
14385: PUSH
14386: LD_INT 3
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 16
14397: PUSH
14398: LD_INT 166
14400: PUSH
14401: LD_INT 95
14403: PUSH
14404: LD_INT 4
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: PUSH
14413: LD_INT 24
14415: PUSH
14416: LD_INT 159
14418: PUSH
14419: LD_INT 95
14421: PUSH
14422: LD_INT 1
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
14464: LD_ADDR_VAR 0 3
14468: PUSH
14469: LD_INT 22
14471: PUSH
14472: LD_INT 3
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: PUSH
14479: LD_INT 3
14481: PUSH
14482: LD_INT 25
14484: PUSH
14485: LD_INT 2
14487: PUSH
14488: EMPTY
14489: LIST
14490: LIST
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: PPUSH
14500: CALL_OW 69
14504: PUSH
14505: FOR_IN
14506: IFFALSE 14525
// AddComAgressiveMove ( i , 141 , 65 ) ;
14508: LD_VAR 0 3
14512: PPUSH
14513: LD_INT 141
14515: PPUSH
14516: LD_INT 65
14518: PPUSH
14519: CALL_OW 174
14523: GO 14505
14525: POP
14526: POP
// for i := 1 to buildingsTab do
14527: LD_ADDR_VAR 0 3
14531: PUSH
14532: DOUBLE
14533: LD_INT 1
14535: DEC
14536: ST_TO_ADDR
14537: LD_VAR 0 5
14541: PUSH
14542: FOR_TO
14543: IFFALSE 14616
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
14545: LD_VAR 0 4
14549: PPUSH
14550: LD_VAR 0 5
14554: PUSH
14555: LD_VAR 0 3
14559: ARRAY
14560: PUSH
14561: LD_INT 1
14563: ARRAY
14564: PPUSH
14565: LD_VAR 0 5
14569: PUSH
14570: LD_VAR 0 3
14574: ARRAY
14575: PUSH
14576: LD_INT 2
14578: ARRAY
14579: PPUSH
14580: LD_VAR 0 5
14584: PUSH
14585: LD_VAR 0 3
14589: ARRAY
14590: PUSH
14591: LD_INT 3
14593: ARRAY
14594: PPUSH
14595: LD_VAR 0 5
14599: PUSH
14600: LD_VAR 0 3
14604: ARRAY
14605: PUSH
14606: LD_INT 4
14608: ARRAY
14609: PPUSH
14610: CALL_OW 205
14614: GO 14542
14616: POP
14617: POP
// end ; end ;
14618: LD_VAR 0 2
14622: RET
// export arBuildingsTab ; export function BuildArabianBase ; var i , engineers ; begin
14623: LD_INT 0
14625: PPUSH
14626: PPUSH
14627: PPUSH
// arBuildingsTab = [ [ b_depot , 71 , 15 , 3 ] , [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 72 , 24 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
14628: LD_ADDR_EXP 70
14632: PUSH
14633: LD_INT 0
14635: PUSH
14636: LD_INT 71
14638: PUSH
14639: LD_INT 15
14641: PUSH
14642: LD_INT 3
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: PUSH
14651: LD_INT 6
14653: PUSH
14654: LD_INT 77
14656: PUSH
14657: LD_INT 18
14659: PUSH
14660: LD_INT 3
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: PUSH
14669: LD_INT 4
14671: PUSH
14672: LD_INT 77
14674: PUSH
14675: LD_INT 26
14677: PUSH
14678: LD_INT 0
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: PUSH
14687: LD_INT 31
14689: PUSH
14690: LD_INT 72
14692: PUSH
14693: LD_INT 24
14695: PUSH
14696: LD_INT 0
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: PUSH
14705: LD_INT 31
14707: PUSH
14708: LD_INT 82
14710: PUSH
14711: LD_INT 28
14713: PUSH
14714: LD_INT 0
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: PUSH
14723: LD_INT 31
14725: PUSH
14726: LD_INT 84
14728: PUSH
14729: LD_INT 21
14731: PUSH
14732: LD_INT 3
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 31
14743: PUSH
14744: LD_INT 66
14746: PUSH
14747: LD_INT 14
14749: PUSH
14750: LD_INT 2
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 27
14761: PUSH
14762: LD_INT 67
14764: PUSH
14765: LD_INT 18
14767: PUSH
14768: LD_INT 5
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: PUSH
14777: LD_INT 27
14779: PUSH
14780: LD_INT 69
14782: PUSH
14783: LD_INT 23
14785: PUSH
14786: LD_INT 2
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: ST_TO_ADDR
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
14806: LD_ADDR_VAR 0 3
14810: PUSH
14811: LD_INT 22
14813: PUSH
14814: LD_INT 2
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: PUSH
14821: LD_INT 25
14823: PUSH
14824: LD_INT 2
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PPUSH
14835: CALL_OW 69
14839: ST_TO_ADDR
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
14840: LD_VAR 0 3
14844: PPUSH
14845: LD_EXP 70
14849: PUSH
14850: LD_INT 1
14852: ARRAY
14853: PUSH
14854: LD_INT 1
14856: ARRAY
14857: PPUSH
14858: LD_EXP 70
14862: PUSH
14863: LD_INT 1
14865: ARRAY
14866: PUSH
14867: LD_INT 2
14869: ARRAY
14870: PPUSH
14871: LD_EXP 70
14875: PUSH
14876: LD_INT 1
14878: ARRAY
14879: PUSH
14880: LD_INT 3
14882: ARRAY
14883: PPUSH
14884: LD_EXP 70
14888: PUSH
14889: LD_INT 1
14891: ARRAY
14892: PUSH
14893: LD_INT 4
14895: ARRAY
14896: PPUSH
14897: CALL_OW 205
// end ;
14901: LD_VAR 0 1
14905: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
14906: LD_INT 0
14908: PPUSH
14909: PPUSH
14910: PPUSH
14911: PPUSH
14912: PPUSH
14913: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14914: LD_ADDR_VAR 0 7
14918: PUSH
14919: LD_INT 22
14921: PUSH
14922: LD_VAR 0 1
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PUSH
14931: LD_INT 25
14933: PUSH
14934: LD_INT 9
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PPUSH
14945: CALL_OW 69
14949: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14950: LD_ADDR_VAR 0 8
14954: PUSH
14955: LD_INT 22
14957: PUSH
14958: LD_VAR 0 2
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: LD_INT 3
14969: PUSH
14970: LD_INT 21
14972: PUSH
14973: LD_INT 3
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PPUSH
14988: CALL_OW 69
14992: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14993: LD_ADDR_VAR 0 5
14997: PUSH
14998: LD_INT 1
15000: PPUSH
15001: LD_INT 3
15003: PPUSH
15004: CALL_OW 12
15008: ST_TO_ADDR
// for i = 1 to list do
15009: LD_ADDR_VAR 0 6
15013: PUSH
15014: DOUBLE
15015: LD_INT 1
15017: DEC
15018: ST_TO_ADDR
15019: LD_VAR 0 7
15023: PUSH
15024: FOR_TO
15025: IFFALSE 16015
// for ta in filter do
15027: LD_ADDR_VAR 0 4
15031: PUSH
15032: LD_VAR 0 8
15036: PUSH
15037: FOR_IN
15038: IFFALSE 16011
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
15040: LD_VAR 0 7
15044: PUSH
15045: LD_VAR 0 6
15049: ARRAY
15050: PPUSH
15051: LD_VAR 0 4
15055: PPUSH
15056: CALL_OW 296
15060: PUSH
15061: LD_INT 15
15063: LESSEQUAL
15064: IFFALSE 16009
// begin case c of 1 :
15066: LD_VAR 0 5
15070: PUSH
15071: LD_INT 1
15073: DOUBLE
15074: EQUAL
15075: IFTRUE 15079
15077: GO 15511
15079: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
15080: LD_VAR 0 7
15084: PUSH
15085: LD_VAR 0 6
15089: ARRAY
15090: PPUSH
15091: LD_VAR 0 4
15095: PPUSH
15096: CALL_OW 250
15100: PPUSH
15101: LD_VAR 0 4
15105: PPUSH
15106: CALL_OW 251
15110: PPUSH
15111: CALL_OW 154
// if eventVar2 = 0 then
15115: LD_EXP 68
15119: PUSH
15120: LD_INT 0
15122: EQUAL
15123: IFFALSE 15509
// begin eventVar2 = 1 ;
15125: LD_ADDR_EXP 68
15129: PUSH
15130: LD_INT 1
15132: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15133: LD_INT 245
15135: PPUSH
15136: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15140: LD_VAR 0 4
15144: PPUSH
15145: CALL_OW 250
15149: PPUSH
15150: LD_VAR 0 4
15154: PPUSH
15155: CALL_OW 251
15159: PPUSH
15160: CALL_OW 84
// DialogueOn ;
15164: CALL_OW 6
// if IsOK ( Cyrus ) then
15168: LD_EXP 5
15172: PPUSH
15173: CALL_OW 302
15177: IFFALSE 15193
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15179: LD_EXP 5
15183: PPUSH
15184: LD_STRING D9a-Cyrus-1
15186: PPUSH
15187: CALL_OW 88
// end else
15191: GO 15315
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15193: LD_INT 22
15195: PUSH
15196: LD_INT 1
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PUSH
15203: LD_INT 26
15205: PUSH
15206: LD_INT 1
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: LD_INT 2
15215: PUSH
15216: LD_INT 25
15218: PUSH
15219: LD_INT 1
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PUSH
15226: LD_INT 25
15228: PUSH
15229: LD_INT 2
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: PUSH
15236: LD_INT 25
15238: PUSH
15239: LD_INT 3
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: PUSH
15246: LD_INT 25
15248: PUSH
15249: LD_INT 4
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: PUSH
15256: LD_INT 25
15258: PUSH
15259: LD_INT 5
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: LIST
15278: PPUSH
15279: CALL_OW 69
15283: PUSH
15284: LD_EXP 1
15288: PUSH
15289: LD_EXP 14
15293: PUSH
15294: LD_EXP 5
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: LIST
15303: DIFF
15304: PPUSH
15305: LD_STRING D9a-Sol1-1
15307: PPUSH
15308: LD_STRING D9a-Sol1-1
15310: PPUSH
15311: CALL 11470 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15315: LD_INT 22
15317: PUSH
15318: LD_INT 1
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: LD_INT 26
15327: PUSH
15328: LD_INT 1
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: PUSH
15335: LD_INT 2
15337: PUSH
15338: LD_INT 25
15340: PUSH
15341: LD_INT 1
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: LD_INT 25
15350: PUSH
15351: LD_INT 2
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: LD_INT 25
15360: PUSH
15361: LD_INT 3
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PUSH
15368: LD_INT 25
15370: PUSH
15371: LD_INT 4
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: LD_INT 25
15380: PUSH
15381: LD_INT 5
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: LIST
15400: PPUSH
15401: CALL_OW 69
15405: PUSH
15406: LD_EXP 1
15410: PUSH
15411: LD_EXP 14
15415: PUSH
15416: LD_EXP 5
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: LIST
15425: DIFF
15426: PPUSH
15427: LD_STRING D9b-Sol1-1
15429: PPUSH
15430: LD_STRING D9b-Sol1-1
15432: PPUSH
15433: CALL 11470 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15437: LD_STRING 09_arInfo
15439: PPUSH
15440: LD_INT 0
15442: PPUSH
15443: CALL_OW 30
15447: PUSH
15448: LD_INT 1
15450: EQUAL
15451: IFFALSE 15465
// Say ( JMM , D9a-JMM-1 ) ;
15453: LD_EXP 1
15457: PPUSH
15458: LD_STRING D9a-JMM-1
15460: PPUSH
15461: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15465: LD_EXP 1
15469: PPUSH
15470: LD_STRING D9c-JMM-1
15472: PPUSH
15473: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15477: LD_INT 12
15479: PPUSH
15480: LD_INT 1
15482: PPUSH
15483: CALL_OW 321
15487: PUSH
15488: LD_INT 2
15490: EQUAL
15491: IFFALSE 15505
// Say ( JMM , D9c-JMM-1a ) ;
15493: LD_EXP 1
15497: PPUSH
15498: LD_STRING D9c-JMM-1a
15500: PPUSH
15501: CALL_OW 88
// DialogueOff ;
15505: CALL_OW 7
// end ; end ; 2 :
15509: GO 16009
15511: LD_INT 2
15513: DOUBLE
15514: EQUAL
15515: IFTRUE 15519
15517: GO 15977
15519: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
15520: LD_VAR 0 7
15524: PUSH
15525: LD_VAR 0 6
15529: ARRAY
15530: PPUSH
15531: LD_VAR 0 4
15535: PPUSH
15536: CALL_OW 250
15540: PUSH
15541: LD_INT 1
15543: NEG
15544: PPUSH
15545: LD_INT 1
15547: PPUSH
15548: CALL_OW 12
15552: PLUS
15553: PPUSH
15554: LD_VAR 0 4
15558: PPUSH
15559: CALL_OW 251
15563: PUSH
15564: LD_INT 1
15566: NEG
15567: PPUSH
15568: LD_INT 1
15570: PPUSH
15571: CALL_OW 12
15575: PLUS
15576: PPUSH
15577: CALL_OW 153
// if eventVar2 = 0 then
15581: LD_EXP 68
15585: PUSH
15586: LD_INT 0
15588: EQUAL
15589: IFFALSE 15975
// begin eventVar2 = 1 ;
15591: LD_ADDR_EXP 68
15595: PUSH
15596: LD_INT 1
15598: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15599: LD_INT 245
15601: PPUSH
15602: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15606: LD_VAR 0 4
15610: PPUSH
15611: CALL_OW 250
15615: PPUSH
15616: LD_VAR 0 4
15620: PPUSH
15621: CALL_OW 251
15625: PPUSH
15626: CALL_OW 84
// DialogueOn ;
15630: CALL_OW 6
// if IsOK ( Cyrus ) then
15634: LD_EXP 5
15638: PPUSH
15639: CALL_OW 302
15643: IFFALSE 15659
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15645: LD_EXP 5
15649: PPUSH
15650: LD_STRING D9a-Cyrus-1
15652: PPUSH
15653: CALL_OW 88
// end else
15657: GO 15781
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15659: LD_INT 22
15661: PUSH
15662: LD_INT 1
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 26
15671: PUSH
15672: LD_INT 1
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: LD_INT 2
15681: PUSH
15682: LD_INT 25
15684: PUSH
15685: LD_INT 1
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: LD_INT 25
15694: PUSH
15695: LD_INT 2
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: LD_INT 25
15704: PUSH
15705: LD_INT 3
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: PUSH
15712: LD_INT 25
15714: PUSH
15715: LD_INT 4
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: LD_INT 25
15724: PUSH
15725: LD_INT 5
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: LIST
15744: PPUSH
15745: CALL_OW 69
15749: PUSH
15750: LD_EXP 1
15754: PUSH
15755: LD_EXP 14
15759: PUSH
15760: LD_EXP 5
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: LIST
15769: DIFF
15770: PPUSH
15771: LD_STRING D9a-Sol1-1
15773: PPUSH
15774: LD_STRING D9a-Sol1-1
15776: PPUSH
15777: CALL 11470 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15781: LD_INT 22
15783: PUSH
15784: LD_INT 1
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 26
15793: PUSH
15794: LD_INT 1
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 2
15803: PUSH
15804: LD_INT 25
15806: PUSH
15807: LD_INT 1
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: LD_INT 25
15816: PUSH
15817: LD_INT 2
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: LD_INT 25
15826: PUSH
15827: LD_INT 3
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: LD_INT 25
15836: PUSH
15837: LD_INT 4
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 25
15846: PUSH
15847: LD_INT 5
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: LIST
15866: PPUSH
15867: CALL_OW 69
15871: PUSH
15872: LD_EXP 1
15876: PUSH
15877: LD_EXP 14
15881: PUSH
15882: LD_EXP 5
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: LIST
15891: DIFF
15892: PPUSH
15893: LD_STRING D9b-Sol1-1
15895: PPUSH
15896: LD_STRING D9b-Sol1-1
15898: PPUSH
15899: CALL 11470 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15903: LD_STRING 09_arInfo
15905: PPUSH
15906: LD_INT 0
15908: PPUSH
15909: CALL_OW 30
15913: PUSH
15914: LD_INT 1
15916: EQUAL
15917: IFFALSE 15931
// Say ( JMM , D9a-JMM-1 ) ;
15919: LD_EXP 1
15923: PPUSH
15924: LD_STRING D9a-JMM-1
15926: PPUSH
15927: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15931: LD_EXP 1
15935: PPUSH
15936: LD_STRING D9c-JMM-1
15938: PPUSH
15939: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15943: LD_INT 12
15945: PPUSH
15946: LD_INT 1
15948: PPUSH
15949: CALL_OW 321
15953: PUSH
15954: LD_INT 2
15956: EQUAL
15957: IFFALSE 15971
// Say ( JMM , D9c-JMM-1a ) ;
15959: LD_EXP 1
15963: PPUSH
15964: LD_STRING D9c-JMM-1a
15966: PPUSH
15967: CALL_OW 88
// DialogueOff ;
15971: CALL_OW 7
// end ; end ; 3 :
15975: GO 16009
15977: LD_INT 3
15979: DOUBLE
15980: EQUAL
15981: IFTRUE 15985
15983: GO 16008
15985: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15986: LD_VAR 0 7
15990: PUSH
15991: LD_VAR 0 6
15995: ARRAY
15996: PPUSH
15997: LD_VAR 0 4
16001: PPUSH
16002: CALL_OW 115
16006: GO 16009
16008: POP
// end ; end ;
16009: GO 15037
16011: POP
16012: POP
16013: GO 15024
16015: POP
16016: POP
// end ;
16017: LD_VAR 0 3
16021: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
16022: LD_INT 0
16024: PPUSH
16025: PPUSH
16026: PPUSH
16027: PPUSH
// for i = 1 to 72 do
16028: LD_ADDR_VAR 0 5
16032: PUSH
16033: DOUBLE
16034: LD_INT 1
16036: DEC
16037: ST_TO_ADDR
16038: LD_INT 72
16040: PUSH
16041: FOR_TO
16042: IFFALSE 16100
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
16044: LD_VAR 0 5
16048: PPUSH
16049: LD_VAR 0 1
16053: PPUSH
16054: CALL_OW 321
16058: PUSH
16059: LD_INT 1
16061: EQUAL
16062: PUSH
16063: LD_VAR 0 5
16067: PPUSH
16068: LD_VAR 0 3
16072: PPUSH
16073: CALL_OW 482
16077: PUSH
16078: LD_INT 1
16080: EQUAL
16081: AND
16082: IFFALSE 16098
// AddComResearch ( lab , i ) ;
16084: LD_VAR 0 2
16088: PPUSH
16089: LD_VAR 0 5
16093: PPUSH
16094: CALL_OW 184
16098: GO 16041
16100: POP
16101: POP
// end ;
16102: LD_VAR 0 4
16106: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
16107: LD_INT 0
16109: PPUSH
16110: PPUSH
16111: PPUSH
16112: PPUSH
16113: PPUSH
16114: PPUSH
16115: PPUSH
16116: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
16117: LD_ADDR_VAR 0 6
16121: PUSH
16122: LD_INT 22
16124: PUSH
16125: LD_VAR 0 1
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 56
16136: PUSH
16137: EMPTY
16138: LIST
16139: PUSH
16140: LD_INT 24
16142: PUSH
16143: LD_INT 700
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: LD_INT 3
16152: PUSH
16153: LD_INT 60
16155: PUSH
16156: EMPTY
16157: LIST
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PUSH
16163: LD_INT 2
16165: PUSH
16166: LD_INT 25
16168: PUSH
16169: LD_INT 1
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: PUSH
16176: LD_INT 25
16178: PUSH
16179: LD_INT 9
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: LIST
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: PPUSH
16198: CALL_OW 69
16202: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
16203: LD_ADDR_VAR 0 7
16207: PUSH
16208: LD_INT 22
16210: PUSH
16211: LD_VAR 0 1
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 30
16222: PUSH
16223: LD_INT 32
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 58
16232: PUSH
16233: EMPTY
16234: LIST
16235: PUSH
16236: LD_INT 24
16238: PUSH
16239: LD_INT 251
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: PPUSH
16252: CALL_OW 69
16256: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
16257: LD_ADDR_VAR 0 9
16261: PUSH
16262: LD_INT 22
16264: PUSH
16265: LD_VAR 0 1
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PUSH
16274: LD_INT 2
16276: PUSH
16277: LD_INT 30
16279: PUSH
16280: LD_INT 4
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: PUSH
16287: LD_INT 30
16289: PUSH
16290: LD_INT 5
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 24
16304: PUSH
16305: LD_INT 251
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: LIST
16316: PPUSH
16317: CALL_OW 69
16321: ST_TO_ADDR
// if barrackList > 0 then
16322: LD_VAR 0 9
16326: PUSH
16327: LD_INT 0
16329: GREATER
16330: IFFALSE 16465
// begin if turretList = 0 then
16332: LD_VAR 0 7
16336: PUSH
16337: LD_INT 0
16339: EQUAL
16340: IFFALSE 16389
// begin for i in soldiers_list do
16342: LD_ADDR_VAR 0 4
16346: PUSH
16347: LD_VAR 0 6
16351: PUSH
16352: FOR_IN
16353: IFFALSE 16385
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
16355: LD_VAR 0 4
16359: PPUSH
16360: LD_VAR 0 9
16364: PUSH
16365: LD_INT 1
16367: PPUSH
16368: LD_VAR 0 9
16372: PPUSH
16373: CALL_OW 12
16377: ARRAY
16378: PPUSH
16379: CALL_OW 120
16383: GO 16352
16385: POP
16386: POP
// end else
16387: GO 16465
// begin for i in barrackList do
16389: LD_ADDR_VAR 0 4
16393: PUSH
16394: LD_VAR 0 9
16398: PUSH
16399: FOR_IN
16400: IFFALSE 16463
// begin insideUnits = UnitsInside ( i ) ;
16402: LD_ADDR_VAR 0 10
16406: PUSH
16407: LD_VAR 0 4
16411: PPUSH
16412: CALL_OW 313
16416: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
16417: LD_VAR 0 10
16421: PUSH
16422: LD_INT 1
16424: ARRAY
16425: PPUSH
16426: LD_VAR 0 7
16430: PUSH
16431: LD_INT 1
16433: ARRAY
16434: PPUSH
16435: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
16439: LD_VAR 0 6
16443: PUSH
16444: LD_INT 1
16446: ARRAY
16447: PPUSH
16448: LD_VAR 0 7
16452: PUSH
16453: LD_INT 1
16455: ARRAY
16456: PPUSH
16457: CALL_OW 120
// end ;
16461: GO 16399
16463: POP
16464: POP
// end ; end ; end ;
16465: LD_VAR 0 3
16469: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
16470: LD_INT 0
16472: PPUSH
16473: PPUSH
16474: PPUSH
16475: PPUSH
16476: PPUSH
16477: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
16478: LD_ADDR_VAR 0 6
16482: PUSH
16483: LD_VAR 0 2
16487: PPUSH
16488: CALL_OW 313
16492: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
16493: LD_ADDR_VAR 0 7
16497: PUSH
16498: LD_INT 22
16500: PUSH
16501: LD_VAR 0 1
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 25
16512: PUSH
16513: LD_INT 2
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 24
16522: PUSH
16523: LD_INT 1000
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 3
16532: PUSH
16533: LD_INT 54
16535: PUSH
16536: EMPTY
16537: LIST
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: PPUSH
16549: CALL_OW 69
16553: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
16554: LD_ADDR_VAR 0 4
16558: PUSH
16559: LD_INT 22
16561: PUSH
16562: LD_VAR 0 1
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 21
16573: PUSH
16574: LD_INT 3
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 3
16583: PUSH
16584: LD_INT 24
16586: PUSH
16587: LD_INT 1000
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: LIST
16602: PUSH
16603: EMPTY
16604: LIST
16605: PPUSH
16606: CALL_OW 69
16610: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
16611: LD_VAR 0 4
16615: NOT
16616: PUSH
16617: LD_VAR 0 7
16621: NOT
16622: AND
16623: PUSH
16624: LD_EXP 44
16628: NOT
16629: AND
16630: IFFALSE 16634
// exit ;
16632: GO 16825
// if buildings_list > 0 and engineerOkInside then
16634: LD_VAR 0 4
16638: PUSH
16639: LD_INT 0
16641: GREATER
16642: PUSH
16643: LD_VAR 0 6
16647: AND
16648: IFFALSE 16702
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16650: LD_ADDR_VAR 0 5
16654: PUSH
16655: LD_INT 22
16657: PUSH
16658: LD_VAR 0 1
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: LD_INT 25
16669: PUSH
16670: LD_INT 2
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PPUSH
16681: CALL_OW 69
16685: PUSH
16686: FOR_IN
16687: IFFALSE 16700
// ComExitBuilding ( i ) ;
16689: LD_VAR 0 5
16693: PPUSH
16694: CALL_OW 122
16698: GO 16686
16700: POP
16701: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
16702: LD_VAR 0 4
16706: PUSH
16707: LD_INT 0
16709: GREATER
16710: PUSH
16711: LD_VAR 0 7
16715: PUSH
16716: LD_INT 0
16718: GREATER
16719: AND
16720: IFFALSE 16774
// begin for i in engineerOkOutside do
16722: LD_ADDR_VAR 0 5
16726: PUSH
16727: LD_VAR 0 7
16731: PUSH
16732: FOR_IN
16733: IFFALSE 16772
// for j in buildings_list do
16735: LD_ADDR_VAR 0 8
16739: PUSH
16740: LD_VAR 0 4
16744: PUSH
16745: FOR_IN
16746: IFFALSE 16768
// ComRepairBuilding ( i , j [ 1 ] ) ;
16748: LD_VAR 0 5
16752: PPUSH
16753: LD_VAR 0 8
16757: PUSH
16758: LD_INT 1
16760: ARRAY
16761: PPUSH
16762: CALL_OW 130
16766: GO 16745
16768: POP
16769: POP
16770: GO 16732
16772: POP
16773: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
16774: LD_VAR 0 4
16778: PUSH
16779: LD_INT 0
16781: EQUAL
16782: PUSH
16783: LD_VAR 0 7
16787: PUSH
16788: LD_INT 0
16790: GREATER
16791: AND
16792: IFFALSE 16825
// for i in engineerOkOutside do
16794: LD_ADDR_VAR 0 5
16798: PUSH
16799: LD_VAR 0 7
16803: PUSH
16804: FOR_IN
16805: IFFALSE 16823
// ComEnterUnit ( i , building ) ;
16807: LD_VAR 0 5
16811: PPUSH
16812: LD_VAR 0 2
16816: PPUSH
16817: CALL_OW 120
16821: GO 16804
16823: POP
16824: POP
// end ;
16825: LD_VAR 0 3
16829: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
16830: LD_INT 0
16832: PPUSH
16833: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
16834: LD_INT 22
16836: PUSH
16837: LD_VAR 0 1
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PUSH
16846: LD_INT 25
16848: PUSH
16849: LD_INT 2
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PPUSH
16860: CALL_OW 69
16864: PUSH
16865: LD_INT 0
16867: GREATER
16868: PUSH
16869: LD_INT 22
16871: PUSH
16872: LD_VAR 0 1
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 21
16883: PUSH
16884: LD_INT 3
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 3
16893: PUSH
16894: LD_INT 24
16896: PUSH
16897: LD_INT 1000
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: LIST
16912: PPUSH
16913: CALL_OW 69
16917: PUSH
16918: LD_INT 0
16920: EQUAL
16921: AND
16922: PUSH
16923: LD_VAR 0 2
16927: PUSH
16928: LD_INT 0
16930: GREATER
16931: AND
16932: IFFALSE 17031
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16934: LD_ADDR_VAR 0 4
16938: PUSH
16939: LD_INT 22
16941: PUSH
16942: LD_VAR 0 1
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PUSH
16951: LD_INT 25
16953: PUSH
16954: LD_INT 2
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: PPUSH
16965: CALL_OW 69
16969: PUSH
16970: FOR_IN
16971: IFFALSE 17029
// begin AddComExitBuilding ( i ) ;
16973: LD_VAR 0 4
16977: PPUSH
16978: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
16982: LD_VAR 0 4
16986: PPUSH
16987: LD_VAR 0 2
16991: PUSH
16992: LD_INT 1
16994: ARRAY
16995: PPUSH
16996: LD_VAR 0 2
17000: PUSH
17001: LD_INT 2
17003: ARRAY
17004: PPUSH
17005: LD_VAR 0 2
17009: PUSH
17010: LD_INT 3
17012: ARRAY
17013: PPUSH
17014: LD_VAR 0 2
17018: PUSH
17019: LD_INT 4
17021: ARRAY
17022: PPUSH
17023: CALL_OW 205
// end ;
17027: GO 16970
17029: POP
17030: POP
// end ; end ;
17031: LD_VAR 0 3
17035: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
17036: LD_INT 0
17038: PPUSH
17039: PPUSH
17040: PPUSH
17041: PPUSH
17042: PPUSH
17043: PPUSH
17044: PPUSH
17045: PPUSH
17046: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
17047: LD_ADDR_VAR 0 6
17051: PUSH
17052: LD_INT 22
17054: PUSH
17055: LD_VAR 0 1
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 25
17066: PUSH
17067: LD_INT 4
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 24
17076: PUSH
17077: LD_INT 251
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: LIST
17088: PPUSH
17089: CALL_OW 69
17093: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
17094: LD_ADDR_VAR 0 7
17098: PUSH
17099: LD_VAR 0 3
17103: PPUSH
17104: LD_INT 22
17106: PUSH
17107: LD_VAR 0 1
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PUSH
17116: LD_INT 25
17118: PUSH
17119: LD_INT 4
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PUSH
17126: LD_INT 50
17128: PUSH
17129: EMPTY
17130: LIST
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: LIST
17136: PPUSH
17137: CALL_OW 70
17141: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
17142: LD_ADDR_VAR 0 10
17146: PUSH
17147: LD_VAR 0 3
17151: PPUSH
17152: LD_INT 22
17154: PUSH
17155: LD_VAR 0 1
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 21
17166: PUSH
17167: LD_INT 1
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 3
17176: PUSH
17177: LD_INT 25
17179: PUSH
17180: LD_INT 3
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 3
17193: PUSH
17194: LD_INT 24
17196: PUSH
17197: LD_INT 750
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: PPUSH
17214: CALL_OW 70
17218: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17219: LD_ADDR_VAR 0 11
17223: PUSH
17224: LD_VAR 0 2
17228: PPUSH
17229: LD_INT 22
17231: PUSH
17232: LD_VAR 0 1
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PUSH
17241: LD_INT 21
17243: PUSH
17244: LD_INT 1
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PUSH
17251: LD_INT 3
17253: PUSH
17254: LD_INT 25
17256: PUSH
17257: LD_INT 3
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 3
17270: PUSH
17271: LD_INT 24
17273: PUSH
17274: LD_INT 1000
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: PPUSH
17291: CALL_OW 70
17295: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
17296: LD_VAR 0 10
17300: NOT
17301: PUSH
17302: LD_VAR 0 7
17306: NOT
17307: AND
17308: PUSH
17309: LD_VAR 0 11
17313: NOT
17314: AND
17315: IFFALSE 17319
// exit ;
17317: GO 17579
// if damageUnits > 0 and sci_list > 0 then
17319: LD_VAR 0 10
17323: PUSH
17324: LD_INT 0
17326: GREATER
17327: PUSH
17328: LD_VAR 0 6
17332: PUSH
17333: LD_INT 0
17335: GREATER
17336: AND
17337: IFFALSE 17370
// for i in damageUnits do
17339: LD_ADDR_VAR 0 8
17343: PUSH
17344: LD_VAR 0 10
17348: PUSH
17349: FOR_IN
17350: IFFALSE 17368
// ComMoveToArea ( i , healArea ) ;
17352: LD_VAR 0 8
17356: PPUSH
17357: LD_VAR 0 2
17361: PPUSH
17362: CALL_OW 113
17366: GO 17349
17368: POP
17369: POP
// if unitsToHeal > 0 and sci_list > 0 then
17370: LD_VAR 0 11
17374: PUSH
17375: LD_INT 0
17377: GREATER
17378: PUSH
17379: LD_VAR 0 6
17383: PUSH
17384: LD_INT 0
17386: GREATER
17387: AND
17388: IFFALSE 17447
// begin for i in sci_list do
17390: LD_ADDR_VAR 0 8
17394: PUSH
17395: LD_VAR 0 6
17399: PUSH
17400: FOR_IN
17401: IFFALSE 17445
// begin ComExitBuilding ( i ) ;
17403: LD_VAR 0 8
17407: PPUSH
17408: CALL_OW 122
// for j in unitsToHeal do
17412: LD_ADDR_VAR 0 9
17416: PUSH
17417: LD_VAR 0 11
17421: PUSH
17422: FOR_IN
17423: IFFALSE 17441
// AddComHeal ( i , j ) ;
17425: LD_VAR 0 8
17429: PPUSH
17430: LD_VAR 0 9
17434: PPUSH
17435: CALL_OW 188
17439: GO 17422
17441: POP
17442: POP
// end ;
17443: GO 17400
17445: POP
17446: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
17447: LD_VAR 0 10
17451: PUSH
17452: LD_INT 0
17454: EQUAL
17455: PUSH
17456: LD_VAR 0 11
17460: PUSH
17461: LD_INT 0
17463: EQUAL
17464: AND
17465: PUSH
17466: LD_VAR 0 7
17470: PUSH
17471: LD_INT 0
17473: GREATER
17474: AND
17475: IFFALSE 17579
// for i in sci_listOutside do
17477: LD_ADDR_VAR 0 8
17481: PUSH
17482: LD_VAR 0 7
17486: PUSH
17487: FOR_IN
17488: IFFALSE 17577
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
17490: LD_ADDR_VAR 0 12
17494: PUSH
17495: LD_INT 22
17497: PUSH
17498: LD_VAR 0 1
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 21
17509: PUSH
17510: LD_INT 3
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PUSH
17517: LD_INT 30
17519: PUSH
17520: LD_INT 8
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: LIST
17531: PPUSH
17532: CALL_OW 69
17536: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
17537: LD_ADDR_VAR 0 13
17541: PUSH
17542: LD_INT 1
17544: PPUSH
17545: LD_VAR 0 12
17549: PPUSH
17550: CALL_OW 12
17554: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
17555: LD_VAR 0 8
17559: PPUSH
17560: LD_VAR 0 12
17564: PUSH
17565: LD_VAR 0 13
17569: ARRAY
17570: PPUSH
17571: CALL_OW 120
// end ;
17575: GO 17487
17577: POP
17578: POP
// end ;
17579: LD_VAR 0 5
17583: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
17584: LD_INT 0
17586: PPUSH
17587: PPUSH
17588: PPUSH
17589: PPUSH
17590: PPUSH
17591: PPUSH
17592: PPUSH
17593: PPUSH
17594: PPUSH
17595: PPUSH
17596: PPUSH
// amChassisTab = [ ] ;
17597: LD_ADDR_VAR 0 19
17601: PUSH
17602: EMPTY
17603: ST_TO_ADDR
// arChassisTab = [ ] ;
17604: LD_ADDR_VAR 0 18
17608: PUSH
17609: EMPTY
17610: ST_TO_ADDR
// ruChassisTab = [ ] ;
17611: LD_ADDR_VAR 0 17
17615: PUSH
17616: EMPTY
17617: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
17618: LD_INT 35
17620: PPUSH
17621: CALL_OW 67
// if nation = 1 then
17625: LD_VAR 0 5
17629: PUSH
17630: LD_INT 1
17632: EQUAL
17633: IFFALSE 18138
// begin uc_side = side ;
17635: LD_ADDR_OWVAR 20
17639: PUSH
17640: LD_VAR 0 2
17644: ST_TO_ADDR
// uc_nation = nation ;
17645: LD_ADDR_OWVAR 21
17649: PUSH
17650: LD_VAR 0 5
17654: ST_TO_ADDR
// vc_engine = vehengine ;
17655: LD_ADDR_OWVAR 39
17659: PUSH
17660: LD_VAR 0 6
17664: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17665: LD_ADDR_OWVAR 38
17669: PUSH
17670: LD_VAR 0 7
17674: PUSH
17675: LD_INT 1
17677: PPUSH
17678: LD_VAR 0 7
17682: PPUSH
17683: CALL_OW 12
17687: ARRAY
17688: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
17689: LD_ADDR_OWVAR 40
17693: PUSH
17694: LD_VAR 0 10
17698: PUSH
17699: LD_INT 1
17701: PPUSH
17702: LD_VAR 0 10
17706: PPUSH
17707: CALL_OW 12
17711: ARRAY
17712: ST_TO_ADDR
// for j = 1 to AMWeapon do
17713: LD_ADDR_VAR 0 14
17717: PUSH
17718: DOUBLE
17719: LD_INT 1
17721: DEC
17722: ST_TO_ADDR
17723: LD_VAR 0 10
17727: PUSH
17728: FOR_TO
17729: IFFALSE 18030
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
17731: LD_VAR 0 10
17735: PUSH
17736: LD_VAR 0 14
17740: ARRAY
17741: PUSH
17742: LD_INT 2
17744: EQUAL
17745: PUSH
17746: LD_VAR 0 10
17750: PUSH
17751: LD_VAR 0 14
17755: ARRAY
17756: PUSH
17757: LD_INT 3
17759: EQUAL
17760: OR
17761: IFFALSE 17814
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
17763: LD_ADDR_VAR 0 19
17767: PUSH
17768: LD_INT 1
17770: PUSH
17771: LD_INT 2
17773: PUSH
17774: LD_INT 3
17776: PUSH
17777: LD_INT 4
17779: PUSH
17780: LD_INT 5
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17790: LD_ADDR_OWVAR 37
17794: PUSH
17795: LD_VAR 0 19
17799: PUSH
17800: LD_INT 1
17802: PPUSH
17803: LD_VAR 0 19
17807: PPUSH
17808: CALL_OW 12
17812: ARRAY
17813: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
17814: LD_VAR 0 10
17818: PUSH
17819: LD_VAR 0 14
17823: ARRAY
17824: PUSH
17825: LD_INT 4
17827: EQUAL
17828: PUSH
17829: LD_VAR 0 10
17833: PUSH
17834: LD_VAR 0 14
17838: ARRAY
17839: PUSH
17840: LD_INT 5
17842: EQUAL
17843: OR
17844: PUSH
17845: LD_VAR 0 10
17849: PUSH
17850: LD_VAR 0 14
17854: ARRAY
17855: PUSH
17856: LD_INT 9
17858: EQUAL
17859: OR
17860: PUSH
17861: LD_VAR 0 10
17865: PUSH
17866: LD_VAR 0 14
17870: ARRAY
17871: PUSH
17872: LD_INT 11
17874: EQUAL
17875: OR
17876: PUSH
17877: LD_VAR 0 10
17881: PUSH
17882: LD_VAR 0 14
17886: ARRAY
17887: PUSH
17888: LD_INT 7
17890: EQUAL
17891: OR
17892: IFFALSE 17941
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
17894: LD_ADDR_VAR 0 19
17898: PUSH
17899: LD_INT 2
17901: PUSH
17902: LD_INT 3
17904: PUSH
17905: LD_INT 4
17907: PUSH
17908: LD_INT 5
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17917: LD_ADDR_OWVAR 37
17921: PUSH
17922: LD_VAR 0 19
17926: PUSH
17927: LD_INT 1
17929: PPUSH
17930: LD_VAR 0 19
17934: PPUSH
17935: CALL_OW 12
17939: ARRAY
17940: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
17941: LD_VAR 0 10
17945: PUSH
17946: LD_VAR 0 14
17950: ARRAY
17951: PUSH
17952: LD_INT 8
17954: EQUAL
17955: PUSH
17956: LD_VAR 0 10
17960: PUSH
17961: LD_VAR 0 14
17965: ARRAY
17966: PUSH
17967: LD_INT 6
17969: EQUAL
17970: OR
17971: PUSH
17972: LD_VAR 0 10
17976: PUSH
17977: LD_VAR 0 14
17981: ARRAY
17982: PUSH
17983: LD_INT 10
17985: EQUAL
17986: OR
17987: IFFALSE 18028
// begin amChassisTab = [ 4 , 5 ] ;
17989: LD_ADDR_VAR 0 19
17993: PUSH
17994: LD_INT 4
17996: PUSH
17997: LD_INT 5
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
18004: LD_ADDR_OWVAR 37
18008: PUSH
18009: LD_VAR 0 19
18013: PUSH
18014: LD_INT 1
18016: PPUSH
18017: LD_VAR 0 19
18021: PPUSH
18022: CALL_OW 12
18026: ARRAY
18027: ST_TO_ADDR
// end ; end ;
18028: GO 17728
18030: POP
18031: POP
// veh = CreateVehicle ;
18032: LD_ADDR_VAR 0 16
18036: PUSH
18037: CALL_OW 45
18041: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18042: LD_VAR 0 16
18046: PPUSH
18047: LD_VAR 0 1
18051: PPUSH
18052: LD_INT 0
18054: PPUSH
18055: CALL_OW 49
// if vc_control = 1 then
18059: LD_OWVAR 38
18063: PUSH
18064: LD_INT 1
18066: EQUAL
18067: IFFALSE 18124
// begin hc_gallery =  ;
18069: LD_ADDR_OWVAR 33
18073: PUSH
18074: LD_STRING 
18076: ST_TO_ADDR
// hc_name =  ;
18077: LD_ADDR_OWVAR 26
18081: PUSH
18082: LD_STRING 
18084: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18085: LD_INT 0
18087: PPUSH
18088: LD_INT 3
18090: PPUSH
18091: LD_VAR 0 4
18095: PPUSH
18096: CALL_OW 380
// un = CreateHuman ;
18100: LD_ADDR_VAR 0 15
18104: PUSH
18105: CALL_OW 44
18109: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18110: LD_VAR 0 15
18114: PPUSH
18115: LD_VAR 0 16
18119: PPUSH
18120: CALL_OW 52
// end ; i = i + 1 ;
18124: LD_ADDR_VAR 0 13
18128: PUSH
18129: LD_VAR 0 13
18133: PUSH
18134: LD_INT 1
18136: PLUS
18137: ST_TO_ADDR
// end ; if nation = 2 then
18138: LD_VAR 0 5
18142: PUSH
18143: LD_INT 2
18145: EQUAL
18146: IFFALSE 18568
// begin uc_side = side ;
18148: LD_ADDR_OWVAR 20
18152: PUSH
18153: LD_VAR 0 2
18157: ST_TO_ADDR
// uc_nation = nation ;
18158: LD_ADDR_OWVAR 21
18162: PUSH
18163: LD_VAR 0 5
18167: ST_TO_ADDR
// vc_engine = vehengine ;
18168: LD_ADDR_OWVAR 39
18172: PUSH
18173: LD_VAR 0 6
18177: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18178: LD_ADDR_OWVAR 38
18182: PUSH
18183: LD_VAR 0 7
18187: PUSH
18188: LD_INT 1
18190: PPUSH
18191: LD_VAR 0 7
18195: PPUSH
18196: CALL_OW 12
18200: ARRAY
18201: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
18202: LD_ADDR_OWVAR 40
18206: PUSH
18207: LD_VAR 0 9
18211: PUSH
18212: LD_INT 1
18214: PPUSH
18215: LD_VAR 0 9
18219: PPUSH
18220: CALL_OW 12
18224: ARRAY
18225: ST_TO_ADDR
// for j = 1 to ARWeapons do
18226: LD_ADDR_VAR 0 14
18230: PUSH
18231: DOUBLE
18232: LD_INT 1
18234: DEC
18235: ST_TO_ADDR
18236: LD_VAR 0 9
18240: PUSH
18241: FOR_TO
18242: IFFALSE 18460
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
18244: LD_VAR 0 9
18248: PUSH
18249: LD_VAR 0 14
18253: ARRAY
18254: PUSH
18255: LD_INT 24
18257: EQUAL
18258: PUSH
18259: LD_VAR 0 9
18263: PUSH
18264: LD_VAR 0 14
18268: ARRAY
18269: PUSH
18270: LD_INT 22
18272: EQUAL
18273: OR
18274: PUSH
18275: LD_VAR 0 9
18279: PUSH
18280: LD_VAR 0 14
18284: ARRAY
18285: PUSH
18286: LD_INT 23
18288: EQUAL
18289: OR
18290: PUSH
18291: LD_VAR 0 9
18295: PUSH
18296: LD_VAR 0 14
18300: ARRAY
18301: PUSH
18302: LD_INT 30
18304: EQUAL
18305: OR
18306: IFFALSE 18343
// begin arChassisTab = [ 14 ] ;
18308: LD_ADDR_VAR 0 18
18312: PUSH
18313: LD_INT 14
18315: PUSH
18316: EMPTY
18317: LIST
18318: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18319: LD_ADDR_OWVAR 37
18323: PUSH
18324: LD_VAR 0 18
18328: PUSH
18329: LD_INT 1
18331: PPUSH
18332: LD_VAR 0 18
18336: PPUSH
18337: CALL_OW 12
18341: ARRAY
18342: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
18343: LD_VAR 0 9
18347: PUSH
18348: LD_VAR 0 14
18352: ARRAY
18353: PUSH
18354: LD_INT 29
18356: EQUAL
18357: PUSH
18358: LD_VAR 0 9
18362: PUSH
18363: LD_VAR 0 14
18367: ARRAY
18368: PUSH
18369: LD_INT 28
18371: EQUAL
18372: OR
18373: PUSH
18374: LD_VAR 0 9
18378: PUSH
18379: LD_VAR 0 14
18383: ARRAY
18384: PUSH
18385: LD_INT 27
18387: EQUAL
18388: OR
18389: PUSH
18390: LD_VAR 0 9
18394: PUSH
18395: LD_VAR 0 14
18399: ARRAY
18400: PUSH
18401: LD_INT 26
18403: EQUAL
18404: OR
18405: PUSH
18406: LD_VAR 0 9
18410: PUSH
18411: LD_VAR 0 14
18415: ARRAY
18416: PUSH
18417: LD_INT 25
18419: EQUAL
18420: OR
18421: IFFALSE 18458
// begin arChassisTab = [ 14 ] ;
18423: LD_ADDR_VAR 0 18
18427: PUSH
18428: LD_INT 14
18430: PUSH
18431: EMPTY
18432: LIST
18433: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18434: LD_ADDR_OWVAR 37
18438: PUSH
18439: LD_VAR 0 18
18443: PUSH
18444: LD_INT 1
18446: PPUSH
18447: LD_VAR 0 18
18451: PPUSH
18452: CALL_OW 12
18456: ARRAY
18457: ST_TO_ADDR
// end ; end ;
18458: GO 18241
18460: POP
18461: POP
// veh = CreateVehicle ;
18462: LD_ADDR_VAR 0 16
18466: PUSH
18467: CALL_OW 45
18471: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18472: LD_VAR 0 16
18476: PPUSH
18477: LD_VAR 0 1
18481: PPUSH
18482: LD_INT 0
18484: PPUSH
18485: CALL_OW 49
// if vc_control = 1 then
18489: LD_OWVAR 38
18493: PUSH
18494: LD_INT 1
18496: EQUAL
18497: IFFALSE 18554
// begin hc_gallery =  ;
18499: LD_ADDR_OWVAR 33
18503: PUSH
18504: LD_STRING 
18506: ST_TO_ADDR
// hc_name =  ;
18507: LD_ADDR_OWVAR 26
18511: PUSH
18512: LD_STRING 
18514: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18515: LD_INT 0
18517: PPUSH
18518: LD_INT 3
18520: PPUSH
18521: LD_VAR 0 4
18525: PPUSH
18526: CALL_OW 380
// un = CreateHuman ;
18530: LD_ADDR_VAR 0 15
18534: PUSH
18535: CALL_OW 44
18539: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18540: LD_VAR 0 15
18544: PPUSH
18545: LD_VAR 0 16
18549: PPUSH
18550: CALL_OW 52
// end ; i = i + 1 ;
18554: LD_ADDR_VAR 0 13
18558: PUSH
18559: LD_VAR 0 13
18563: PUSH
18564: LD_INT 1
18566: PLUS
18567: ST_TO_ADDR
// end ; if nation = 3 then
18568: LD_VAR 0 5
18572: PUSH
18573: LD_INT 3
18575: EQUAL
18576: IFFALSE 18982
// begin uc_side = side ;
18578: LD_ADDR_OWVAR 20
18582: PUSH
18583: LD_VAR 0 2
18587: ST_TO_ADDR
// uc_nation = nation ;
18588: LD_ADDR_OWVAR 21
18592: PUSH
18593: LD_VAR 0 5
18597: ST_TO_ADDR
// vc_engine = vehengine ;
18598: LD_ADDR_OWVAR 39
18602: PUSH
18603: LD_VAR 0 6
18607: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18608: LD_ADDR_OWVAR 38
18612: PUSH
18613: LD_VAR 0 7
18617: PUSH
18618: LD_INT 1
18620: PPUSH
18621: LD_VAR 0 7
18625: PPUSH
18626: CALL_OW 12
18630: ARRAY
18631: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
18632: LD_ADDR_OWVAR 40
18636: PUSH
18637: LD_VAR 0 8
18641: PUSH
18642: LD_INT 1
18644: PPUSH
18645: LD_VAR 0 8
18649: PPUSH
18650: CALL_OW 12
18654: ARRAY
18655: ST_TO_ADDR
// for j = 1 to RuWeapons do
18656: LD_ADDR_VAR 0 14
18660: PUSH
18661: DOUBLE
18662: LD_INT 1
18664: DEC
18665: ST_TO_ADDR
18666: LD_VAR 0 8
18670: PUSH
18671: FOR_TO
18672: IFFALSE 18874
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
18674: LD_VAR 0 8
18678: PUSH
18679: LD_VAR 0 14
18683: ARRAY
18684: PUSH
18685: LD_INT 42
18687: EQUAL
18688: PUSH
18689: LD_VAR 0 8
18693: PUSH
18694: LD_VAR 0 14
18698: ARRAY
18699: PUSH
18700: LD_INT 43
18702: EQUAL
18703: OR
18704: PUSH
18705: LD_VAR 0 8
18709: PUSH
18710: LD_VAR 0 14
18714: ARRAY
18715: PUSH
18716: LD_INT 44
18718: EQUAL
18719: OR
18720: PUSH
18721: LD_VAR 0 8
18725: PUSH
18726: LD_VAR 0 14
18730: ARRAY
18731: PUSH
18732: LD_INT 45
18734: EQUAL
18735: OR
18736: PUSH
18737: LD_VAR 0 8
18741: PUSH
18742: LD_VAR 0 14
18746: ARRAY
18747: PUSH
18748: LD_INT 49
18750: EQUAL
18751: OR
18752: IFFALSE 18801
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
18754: LD_ADDR_VAR 0 17
18758: PUSH
18759: LD_INT 21
18761: PUSH
18762: LD_INT 22
18764: PUSH
18765: LD_INT 23
18767: PUSH
18768: LD_INT 24
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18777: LD_ADDR_OWVAR 37
18781: PUSH
18782: LD_VAR 0 17
18786: PUSH
18787: LD_INT 1
18789: PPUSH
18790: LD_VAR 0 17
18794: PPUSH
18795: CALL_OW 12
18799: ARRAY
18800: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
18801: LD_VAR 0 8
18805: PUSH
18806: LD_VAR 0 14
18810: ARRAY
18811: PUSH
18812: LD_INT 46
18814: EQUAL
18815: PUSH
18816: LD_VAR 0 8
18820: PUSH
18821: LD_VAR 0 14
18825: ARRAY
18826: PUSH
18827: LD_INT 47
18829: EQUAL
18830: OR
18831: IFFALSE 18872
// begin ruChassisTab = [ 23 , 24 ] ;
18833: LD_ADDR_VAR 0 17
18837: PUSH
18838: LD_INT 23
18840: PUSH
18841: LD_INT 24
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18848: LD_ADDR_OWVAR 37
18852: PUSH
18853: LD_VAR 0 17
18857: PUSH
18858: LD_INT 1
18860: PPUSH
18861: LD_VAR 0 17
18865: PPUSH
18866: CALL_OW 12
18870: ARRAY
18871: ST_TO_ADDR
// end ; end ;
18872: GO 18671
18874: POP
18875: POP
// veh = CreateVehicle ;
18876: LD_ADDR_VAR 0 16
18880: PUSH
18881: CALL_OW 45
18885: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18886: LD_VAR 0 16
18890: PPUSH
18891: LD_VAR 0 1
18895: PPUSH
18896: LD_INT 0
18898: PPUSH
18899: CALL_OW 49
// if vc_control = 1 then
18903: LD_OWVAR 38
18907: PUSH
18908: LD_INT 1
18910: EQUAL
18911: IFFALSE 18968
// begin hc_gallery =  ;
18913: LD_ADDR_OWVAR 33
18917: PUSH
18918: LD_STRING 
18920: ST_TO_ADDR
// hc_name =  ;
18921: LD_ADDR_OWVAR 26
18925: PUSH
18926: LD_STRING 
18928: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18929: LD_INT 0
18931: PPUSH
18932: LD_INT 3
18934: PPUSH
18935: LD_VAR 0 4
18939: PPUSH
18940: CALL_OW 380
// un = CreateHuman ;
18944: LD_ADDR_VAR 0 15
18948: PUSH
18949: CALL_OW 44
18953: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18954: LD_VAR 0 15
18958: PPUSH
18959: LD_VAR 0 16
18963: PPUSH
18964: CALL_OW 52
// end ; i = i + 1 ;
18968: LD_ADDR_VAR 0 13
18972: PUSH
18973: LD_VAR 0 13
18977: PUSH
18978: LD_INT 1
18980: PLUS
18981: ST_TO_ADDR
// end ; until i = vehCount ;
18982: LD_VAR 0 13
18986: PUSH
18987: LD_VAR 0 3
18991: EQUAL
18992: IFFALSE 17618
// repeat wait ( 0 0$1 ) ;
18994: LD_INT 35
18996: PPUSH
18997: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
19001: LD_ADDR_VAR 0 20
19005: PUSH
19006: LD_INT 22
19008: PUSH
19009: LD_VAR 0 2
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 21
19020: PUSH
19021: LD_INT 2
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 24
19030: PUSH
19031: LD_INT 650
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: LIST
19042: PPUSH
19043: CALL_OW 69
19047: ST_TO_ADDR
// if vehicleOK_list > 0 then
19048: LD_VAR 0 20
19052: PUSH
19053: LD_INT 0
19055: GREATER
19056: IFFALSE 19247
// begin for i in vehicleOK_list do
19058: LD_ADDR_VAR 0 13
19062: PUSH
19063: LD_VAR 0 20
19067: PUSH
19068: FOR_IN
19069: IFFALSE 19245
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19071: LD_ADDR_VAR 0 21
19075: PUSH
19076: LD_INT 22
19078: PUSH
19079: LD_VAR 0 11
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PPUSH
19088: CALL_OW 69
19092: PPUSH
19093: LD_VAR 0 13
19097: PPUSH
19098: CALL_OW 74
19102: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19103: LD_ADDR_VAR 0 22
19107: PUSH
19108: LD_INT 22
19110: PUSH
19111: LD_VAR 0 11
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 2
19122: PUSH
19123: LD_INT 59
19125: PUSH
19126: EMPTY
19127: LIST
19128: PUSH
19129: LD_INT 21
19131: PUSH
19132: LD_INT 1
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 21
19141: PUSH
19142: LD_INT 2
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: EMPTY
19160: LIST
19161: PPUSH
19162: CALL_OW 69
19166: PPUSH
19167: LD_VAR 0 13
19171: PPUSH
19172: CALL_OW 74
19176: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19177: LD_VAR 0 13
19181: PPUSH
19182: LD_VAR 0 21
19186: PPUSH
19187: CALL_OW 296
19191: PUSH
19192: LD_INT 8
19194: PLUS
19195: PUSH
19196: LD_VAR 0 13
19200: PPUSH
19201: LD_VAR 0 22
19205: PPUSH
19206: CALL_OW 296
19210: LESS
19211: IFFALSE 19229
// begin ComAttackUnit ( i , target1 ) ;
19213: LD_VAR 0 13
19217: PPUSH
19218: LD_VAR 0 21
19222: PPUSH
19223: CALL_OW 115
// end else
19227: GO 19243
// begin ComAttackUnit ( i , target2 ) ;
19229: LD_VAR 0 13
19233: PPUSH
19234: LD_VAR 0 22
19238: PPUSH
19239: CALL_OW 115
// end ; end ;
19243: GO 19068
19245: POP
19246: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
19247: LD_INT 22
19249: PUSH
19250: LD_VAR 0 2
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 21
19261: PUSH
19262: LD_INT 2
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PPUSH
19273: CALL_OW 69
19277: PUSH
19278: LD_INT 0
19280: EQUAL
19281: IFFALSE 18994
// end ;
19283: LD_VAR 0 12
19287: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
19288: LD_INT 0
19290: PPUSH
19291: PPUSH
19292: PPUSH
19293: PPUSH
19294: PPUSH
19295: PPUSH
19296: PPUSH
19297: PPUSH
19298: PPUSH
19299: PPUSH
19300: PPUSH
// for i = 1 to soldierCount do
19301: LD_ADDR_VAR 0 13
19305: PUSH
19306: DOUBLE
19307: LD_INT 1
19309: DEC
19310: ST_TO_ADDR
19311: LD_VAR 0 3
19315: PUSH
19316: FOR_TO
19317: IFFALSE 19399
// begin uc_side = side ;
19319: LD_ADDR_OWVAR 20
19323: PUSH
19324: LD_VAR 0 1
19328: ST_TO_ADDR
// uc_nation = nation ;
19329: LD_ADDR_OWVAR 21
19333: PUSH
19334: LD_VAR 0 2
19338: ST_TO_ADDR
// hc_name =  ;
19339: LD_ADDR_OWVAR 26
19343: PUSH
19344: LD_STRING 
19346: ST_TO_ADDR
// hc_gallery =  ;
19347: LD_ADDR_OWVAR 33
19351: PUSH
19352: LD_STRING 
19354: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
19355: LD_INT 0
19357: PPUSH
19358: LD_INT 1
19360: PPUSH
19361: LD_VAR 0 8
19365: PPUSH
19366: CALL_OW 380
// un = CreateHuman ;
19370: LD_ADDR_VAR 0 15
19374: PUSH
19375: CALL_OW 44
19379: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19380: LD_VAR 0 15
19384: PPUSH
19385: LD_VAR 0 9
19389: PPUSH
19390: LD_INT 0
19392: PPUSH
19393: CALL_OW 49
// end ;
19397: GO 19316
19399: POP
19400: POP
// for i = 1 to sniperCount do
19401: LD_ADDR_VAR 0 13
19405: PUSH
19406: DOUBLE
19407: LD_INT 1
19409: DEC
19410: ST_TO_ADDR
19411: LD_VAR 0 4
19415: PUSH
19416: FOR_TO
19417: IFFALSE 19499
// begin uc_side = side ;
19419: LD_ADDR_OWVAR 20
19423: PUSH
19424: LD_VAR 0 1
19428: ST_TO_ADDR
// uc_nation = nation ;
19429: LD_ADDR_OWVAR 21
19433: PUSH
19434: LD_VAR 0 2
19438: ST_TO_ADDR
// hc_name =  ;
19439: LD_ADDR_OWVAR 26
19443: PUSH
19444: LD_STRING 
19446: ST_TO_ADDR
// hc_gallery =  ;
19447: LD_ADDR_OWVAR 33
19451: PUSH
19452: LD_STRING 
19454: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
19455: LD_INT 0
19457: PPUSH
19458: LD_INT 5
19460: PPUSH
19461: LD_VAR 0 8
19465: PPUSH
19466: CALL_OW 380
// un = CreateHuman ;
19470: LD_ADDR_VAR 0 15
19474: PUSH
19475: CALL_OW 44
19479: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19480: LD_VAR 0 15
19484: PPUSH
19485: LD_VAR 0 9
19489: PPUSH
19490: LD_INT 0
19492: PPUSH
19493: CALL_OW 49
// end ;
19497: GO 19416
19499: POP
19500: POP
// for i = 1 to bazookCount do
19501: LD_ADDR_VAR 0 13
19505: PUSH
19506: DOUBLE
19507: LD_INT 1
19509: DEC
19510: ST_TO_ADDR
19511: LD_VAR 0 5
19515: PUSH
19516: FOR_TO
19517: IFFALSE 19599
// begin uc_side = side ;
19519: LD_ADDR_OWVAR 20
19523: PUSH
19524: LD_VAR 0 1
19528: ST_TO_ADDR
// uc_nation = nation ;
19529: LD_ADDR_OWVAR 21
19533: PUSH
19534: LD_VAR 0 2
19538: ST_TO_ADDR
// hc_name =  ;
19539: LD_ADDR_OWVAR 26
19543: PUSH
19544: LD_STRING 
19546: ST_TO_ADDR
// hc_gallery =  ;
19547: LD_ADDR_OWVAR 33
19551: PUSH
19552: LD_STRING 
19554: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
19555: LD_INT 0
19557: PPUSH
19558: LD_INT 9
19560: PPUSH
19561: LD_VAR 0 8
19565: PPUSH
19566: CALL_OW 380
// un = CreateHuman ;
19570: LD_ADDR_VAR 0 15
19574: PUSH
19575: CALL_OW 44
19579: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19580: LD_VAR 0 15
19584: PPUSH
19585: LD_VAR 0 9
19589: PPUSH
19590: LD_INT 0
19592: PPUSH
19593: CALL_OW 49
// end ;
19597: GO 19516
19599: POP
19600: POP
// for i = 1 to mortalCount do
19601: LD_ADDR_VAR 0 13
19605: PUSH
19606: DOUBLE
19607: LD_INT 1
19609: DEC
19610: ST_TO_ADDR
19611: LD_VAR 0 6
19615: PUSH
19616: FOR_TO
19617: IFFALSE 19699
// begin uc_side = side ;
19619: LD_ADDR_OWVAR 20
19623: PUSH
19624: LD_VAR 0 1
19628: ST_TO_ADDR
// uc_nation = nation ;
19629: LD_ADDR_OWVAR 21
19633: PUSH
19634: LD_VAR 0 2
19638: ST_TO_ADDR
// hc_name =  ;
19639: LD_ADDR_OWVAR 26
19643: PUSH
19644: LD_STRING 
19646: ST_TO_ADDR
// hc_gallery =  ;
19647: LD_ADDR_OWVAR 33
19651: PUSH
19652: LD_STRING 
19654: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
19655: LD_INT 0
19657: PPUSH
19658: LD_INT 8
19660: PPUSH
19661: LD_VAR 0 8
19665: PPUSH
19666: CALL_OW 380
// un = CreateHuman ;
19670: LD_ADDR_VAR 0 15
19674: PUSH
19675: CALL_OW 44
19679: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19680: LD_VAR 0 15
19684: PPUSH
19685: LD_VAR 0 9
19689: PPUSH
19690: LD_INT 0
19692: PPUSH
19693: CALL_OW 49
// end ;
19697: GO 19616
19699: POP
19700: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
19701: LD_ADDR_VAR 0 18
19705: PUSH
19706: LD_INT 22
19708: PUSH
19709: LD_VAR 0 1
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 2
19720: PUSH
19721: LD_INT 25
19723: PUSH
19724: LD_INT 1
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 25
19733: PUSH
19734: LD_INT 5
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 25
19743: PUSH
19744: LD_INT 8
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 25
19753: PUSH
19754: LD_INT 9
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PPUSH
19772: CALL_OW 69
19776: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
19777: LD_ADDR_VAR 0 17
19781: PUSH
19782: LD_INT 22
19784: PUSH
19785: LD_VAR 0 1
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 25
19796: PUSH
19797: LD_INT 4
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PPUSH
19808: CALL_OW 69
19812: ST_TO_ADDR
// for i in medic_list do
19813: LD_ADDR_VAR 0 13
19817: PUSH
19818: LD_VAR 0 17
19822: PUSH
19823: FOR_IN
19824: IFFALSE 19842
// ComMoveToArea ( i , healArea ) ;
19826: LD_VAR 0 13
19830: PPUSH
19831: LD_VAR 0 10
19835: PPUSH
19836: CALL_OW 113
19840: GO 19823
19842: POP
19843: POP
// repeat wait ( 0 0$1 ) ;
19844: LD_INT 35
19846: PPUSH
19847: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
19851: LD_ADDR_VAR 0 16
19855: PUSH
19856: LD_INT 22
19858: PUSH
19859: LD_VAR 0 1
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 1
19870: PUSH
19871: LD_INT 3
19873: PUSH
19874: LD_INT 24
19876: PUSH
19877: LD_INT 550
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 24
19890: PUSH
19891: LD_INT 250
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: LIST
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PPUSH
19907: CALL_OW 69
19911: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
19912: LD_ADDR_VAR 0 18
19916: PUSH
19917: LD_INT 22
19919: PUSH
19920: LD_VAR 0 1
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: LD_INT 2
19931: PUSH
19932: LD_INT 25
19934: PUSH
19935: LD_INT 1
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: LD_INT 25
19944: PUSH
19945: LD_INT 5
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 25
19954: PUSH
19955: LD_INT 8
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 25
19964: PUSH
19965: LD_INT 9
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: PUSH
19979: LD_INT 24
19981: PUSH
19982: LD_INT 1000
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: LIST
19993: PPUSH
19994: CALL_OW 69
19998: ST_TO_ADDR
// if medicCount > 0 then
19999: LD_VAR 0 7
20003: PUSH
20004: LD_INT 0
20006: GREATER
20007: IFFALSE 20081
// begin if damageUnit_list > 0 then
20009: LD_VAR 0 16
20013: PUSH
20014: LD_INT 0
20016: GREATER
20017: IFFALSE 20081
// begin for i in damageUnit_list do
20019: LD_ADDR_VAR 0 13
20023: PUSH
20024: LD_VAR 0 16
20028: PUSH
20029: FOR_IN
20030: IFFALSE 20079
// begin ComMoveToArea ( i , healArea ) ;
20032: LD_VAR 0 13
20036: PPUSH
20037: LD_VAR 0 10
20041: PPUSH
20042: CALL_OW 113
// for j in medic_list do
20046: LD_ADDR_VAR 0 14
20050: PUSH
20051: LD_VAR 0 17
20055: PUSH
20056: FOR_IN
20057: IFFALSE 20075
// AddComHeal ( j , i ) ;
20059: LD_VAR 0 14
20063: PPUSH
20064: LD_VAR 0 13
20068: PPUSH
20069: CALL_OW 188
20073: GO 20056
20075: POP
20076: POP
// end ;
20077: GO 20029
20079: POP
20080: POP
// end ; end ; for i in soldiersOK_list do
20081: LD_ADDR_VAR 0 13
20085: PUSH
20086: LD_VAR 0 18
20090: PUSH
20091: FOR_IN
20092: IFFALSE 20268
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20094: LD_ADDR_VAR 0 21
20098: PUSH
20099: LD_INT 22
20101: PUSH
20102: LD_VAR 0 11
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PPUSH
20111: CALL_OW 69
20115: PPUSH
20116: LD_VAR 0 13
20120: PPUSH
20121: CALL_OW 74
20125: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20126: LD_ADDR_VAR 0 22
20130: PUSH
20131: LD_INT 22
20133: PUSH
20134: LD_VAR 0 11
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 2
20145: PUSH
20146: LD_INT 59
20148: PUSH
20149: EMPTY
20150: LIST
20151: PUSH
20152: LD_INT 21
20154: PUSH
20155: LD_INT 1
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: LD_INT 21
20164: PUSH
20165: LD_INT 2
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: EMPTY
20183: LIST
20184: PPUSH
20185: CALL_OW 69
20189: PPUSH
20190: LD_VAR 0 13
20194: PPUSH
20195: CALL_OW 74
20199: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20200: LD_VAR 0 13
20204: PPUSH
20205: LD_VAR 0 21
20209: PPUSH
20210: CALL_OW 296
20214: PUSH
20215: LD_INT 8
20217: PLUS
20218: PUSH
20219: LD_VAR 0 13
20223: PPUSH
20224: LD_VAR 0 22
20228: PPUSH
20229: CALL_OW 296
20233: LESS
20234: IFFALSE 20252
// begin ComAttackUnit ( i , target1 ) ;
20236: LD_VAR 0 13
20240: PPUSH
20241: LD_VAR 0 21
20245: PPUSH
20246: CALL_OW 115
// end else
20250: GO 20266
// begin ComAttackUnit ( i , target2 ) ;
20252: LD_VAR 0 13
20256: PPUSH
20257: LD_VAR 0 22
20261: PPUSH
20262: CALL_OW 115
// end ; end ;
20266: GO 20091
20268: POP
20269: POP
// for i in soldiersOK_list do
20270: LD_ADDR_VAR 0 13
20274: PUSH
20275: LD_VAR 0 18
20279: PUSH
20280: FOR_IN
20281: IFFALSE 20457
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20283: LD_ADDR_VAR 0 21
20287: PUSH
20288: LD_INT 22
20290: PUSH
20291: LD_VAR 0 11
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PPUSH
20300: CALL_OW 69
20304: PPUSH
20305: LD_VAR 0 13
20309: PPUSH
20310: CALL_OW 74
20314: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20315: LD_ADDR_VAR 0 22
20319: PUSH
20320: LD_INT 22
20322: PUSH
20323: LD_VAR 0 11
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 2
20334: PUSH
20335: LD_INT 59
20337: PUSH
20338: EMPTY
20339: LIST
20340: PUSH
20341: LD_INT 21
20343: PUSH
20344: LD_INT 1
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 21
20353: PUSH
20354: LD_INT 2
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: EMPTY
20372: LIST
20373: PPUSH
20374: CALL_OW 69
20378: PPUSH
20379: LD_VAR 0 13
20383: PPUSH
20384: CALL_OW 74
20388: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20389: LD_VAR 0 13
20393: PPUSH
20394: LD_VAR 0 21
20398: PPUSH
20399: CALL_OW 296
20403: PUSH
20404: LD_INT 8
20406: PLUS
20407: PUSH
20408: LD_VAR 0 13
20412: PPUSH
20413: LD_VAR 0 22
20417: PPUSH
20418: CALL_OW 296
20422: LESS
20423: IFFALSE 20441
// begin ComAttackUnit ( i , target1 ) ;
20425: LD_VAR 0 13
20429: PPUSH
20430: LD_VAR 0 21
20434: PPUSH
20435: CALL_OW 115
// end else
20439: GO 20455
// begin ComAttackUnit ( i , target2 ) ;
20441: LD_VAR 0 13
20445: PPUSH
20446: LD_VAR 0 22
20450: PPUSH
20451: CALL_OW 115
// end ; end ;
20455: GO 20280
20457: POP
20458: POP
// until soldiersOK_list = [ ] ;
20459: LD_VAR 0 18
20463: PUSH
20464: EMPTY
20465: EQUAL
20466: IFFALSE 19844
// end ;
20468: LD_VAR 0 12
20472: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
20473: LD_INT 0
20475: PPUSH
20476: PPUSH
20477: PPUSH
20478: PPUSH
20479: PPUSH
20480: PPUSH
20481: PPUSH
// repeat wait ( 0 0$1 ) ;
20482: LD_INT 35
20484: PPUSH
20485: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
20489: LD_ADDR_VAR 0 7
20493: PUSH
20494: LD_INT 22
20496: PUSH
20497: LD_INT 2
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 25
20506: PUSH
20507: LD_INT 4
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 3
20516: PUSH
20517: LD_INT 60
20519: PUSH
20520: EMPTY
20521: LIST
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: LIST
20531: PPUSH
20532: CALL_OW 69
20536: ST_TO_ADDR
// if not tmp then
20537: LD_VAR 0 7
20541: NOT
20542: IFFALSE 20546
// continue ;
20544: GO 20482
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
20546: LD_ADDR_VAR 0 3
20550: PUSH
20551: LD_INT 5
20553: PPUSH
20554: LD_INT 22
20556: PUSH
20557: LD_INT 0
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 25
20566: PUSH
20567: LD_INT 12
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PPUSH
20578: CALL_OW 70
20582: PUSH
20583: FOR_IN
20584: IFFALSE 20617
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
20586: LD_VAR 0 7
20590: PPUSH
20591: LD_VAR 0 3
20595: PPUSH
20596: CALL_OW 250
20600: PPUSH
20601: LD_VAR 0 3
20605: PPUSH
20606: CALL_OW 251
20610: PPUSH
20611: CALL_OW 131
20615: GO 20583
20617: POP
20618: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
20619: LD_INT 22
20621: PUSH
20622: LD_INT 2
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 25
20631: PUSH
20632: LD_INT 4
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PPUSH
20643: CALL_OW 69
20647: PUSH
20648: LD_INT 0
20650: EQUAL
20651: PUSH
20652: LD_INT 5
20654: PPUSH
20655: LD_INT 22
20657: PUSH
20658: LD_INT 0
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 25
20667: PUSH
20668: LD_INT 12
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PPUSH
20679: CALL_OW 70
20683: PUSH
20684: LD_INT 2
20686: LESS
20687: OR
20688: PUSH
20689: LD_OWVAR 1
20693: PUSH
20694: LD_INT 7000
20696: GREATEREQUAL
20697: OR
20698: IFFALSE 20482
// repeat wait ( 0 0$1 ) ;
20700: LD_INT 35
20702: PPUSH
20703: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
20707: LD_ADDR_VAR 0 5
20711: PUSH
20712: LD_INT 22
20714: PUSH
20715: LD_INT 2
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 30
20724: PUSH
20725: LD_INT 5
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PPUSH
20736: CALL_OW 69
20740: ST_TO_ADDR
// until arm ;
20741: LD_VAR 0 5
20745: IFFALSE 20700
// wait ( 0 0$25 ) ;
20747: LD_INT 875
20749: PPUSH
20750: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20754: LD_ADDR_VAR 0 6
20758: PUSH
20759: LD_INT 22
20761: PUSH
20762: LD_INT 2
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 2
20771: PUSH
20772: LD_INT 30
20774: PUSH
20775: LD_INT 0
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 30
20784: PUSH
20785: LD_INT 1
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: LIST
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PPUSH
20801: CALL_OW 69
20805: ST_TO_ADDR
// j := 0 ;
20806: LD_ADDR_VAR 0 3
20810: PUSH
20811: LD_INT 0
20813: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
20814: LD_ADDR_VAR 0 2
20818: PUSH
20819: LD_INT 22
20821: PUSH
20822: LD_INT 2
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 25
20831: PUSH
20832: LD_INT 12
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PPUSH
20843: CALL_OW 69
20847: PUSH
20848: FOR_IN
20849: IFFALSE 20936
// begin ComMoveXY ( i , 63 , 16 ) ;
20851: LD_VAR 0 2
20855: PPUSH
20856: LD_INT 63
20858: PPUSH
20859: LD_INT 16
20861: PPUSH
20862: CALL_OW 111
// j := j + 1 ;
20866: LD_ADDR_VAR 0 3
20870: PUSH
20871: LD_VAR 0 3
20875: PUSH
20876: LD_INT 1
20878: PLUS
20879: ST_TO_ADDR
// if j < 5 then
20880: LD_VAR 0 3
20884: PUSH
20885: LD_INT 5
20887: LESS
20888: IFFALSE 20906
// b := arm [ 1 ] else
20890: LD_ADDR_VAR 0 4
20894: PUSH
20895: LD_VAR 0 5
20899: PUSH
20900: LD_INT 1
20902: ARRAY
20903: ST_TO_ADDR
20904: GO 20920
// b := dep [ 1 ] ;
20906: LD_ADDR_VAR 0 4
20910: PUSH
20911: LD_VAR 0 6
20915: PUSH
20916: LD_INT 1
20918: ARRAY
20919: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
20920: LD_VAR 0 2
20924: PPUSH
20925: LD_VAR 0 4
20929: PPUSH
20930: CALL_OW 180
// end ;
20934: GO 20848
20936: POP
20937: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
20938: LD_ADDR_VAR 0 2
20942: PUSH
20943: LD_INT 22
20945: PUSH
20946: LD_INT 2
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 25
20955: PUSH
20956: LD_INT 4
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PPUSH
20967: CALL_OW 69
20971: PUSH
20972: FOR_IN
20973: IFFALSE 21019
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
20975: LD_VAR 0 2
20979: PPUSH
20980: LD_INT 22
20982: PUSH
20983: LD_INT 2
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 30
20992: PUSH
20993: LD_INT 8
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PPUSH
21004: CALL_OW 69
21008: PUSH
21009: LD_INT 1
21011: ARRAY
21012: PPUSH
21013: CALL_OW 120
21017: GO 20972
21019: POP
21020: POP
// end ;
21021: LD_VAR 0 1
21025: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
21026: LD_INT 0
21028: PPUSH
21029: PPUSH
21030: PPUSH
21031: PPUSH
21032: PPUSH
21033: PPUSH
21034: PPUSH
21035: PPUSH
21036: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
21037: LD_INT 22
21039: PUSH
21040: LD_VAR 0 1
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 21
21051: PUSH
21052: LD_INT 2
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PPUSH
21063: CALL_OW 69
21067: PUSH
21068: LD_VAR 0 3
21072: LESSEQUAL
21073: IFFALSE 21217
// for i = 1 to vehCount do
21075: LD_ADDR_VAR 0 10
21079: PUSH
21080: DOUBLE
21081: LD_INT 1
21083: DEC
21084: ST_TO_ADDR
21085: LD_VAR 0 3
21089: PUSH
21090: FOR_TO
21091: IFFALSE 21215
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
21093: LD_ADDR_VAR 0 12
21097: PUSH
21098: LD_VAR 0 5
21102: PUSH
21103: LD_INT 1
21105: PPUSH
21106: LD_VAR 0 5
21110: PPUSH
21111: CALL_OW 12
21115: ARRAY
21116: ST_TO_ADDR
// if randWeapon = 46 then
21117: LD_VAR 0 12
21121: PUSH
21122: LD_INT 46
21124: EQUAL
21125: IFFALSE 21170
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
21127: LD_VAR 0 2
21131: PPUSH
21132: LD_INT 24
21134: PPUSH
21135: LD_VAR 0 6
21139: PPUSH
21140: LD_VAR 0 7
21144: PUSH
21145: LD_INT 1
21147: PPUSH
21148: LD_VAR 0 7
21152: PPUSH
21153: CALL_OW 12
21157: ARRAY
21158: PPUSH
21159: LD_VAR 0 12
21163: PPUSH
21164: CALL_OW 185
21168: GO 21213
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
21170: LD_VAR 0 2
21174: PPUSH
21175: LD_VAR 0 8
21179: PPUSH
21180: LD_VAR 0 6
21184: PPUSH
21185: LD_VAR 0 7
21189: PUSH
21190: LD_INT 1
21192: PPUSH
21193: LD_VAR 0 7
21197: PPUSH
21198: CALL_OW 12
21202: ARRAY
21203: PPUSH
21204: LD_VAR 0 12
21208: PPUSH
21209: CALL_OW 185
// end ;
21213: GO 21090
21215: POP
21216: POP
// repeat wait ( 0 0$1 ) ;
21217: LD_INT 35
21219: PPUSH
21220: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
21224: LD_INT 22
21226: PUSH
21227: LD_VAR 0 1
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 21
21238: PUSH
21239: LD_INT 2
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 24
21248: PUSH
21249: LD_INT 250
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: LIST
21260: PPUSH
21261: CALL_OW 69
21265: PUSH
21266: LD_VAR 0 3
21270: GREATEREQUAL
21271: IFFALSE 21217
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
21273: LD_INT 22
21275: PUSH
21276: LD_VAR 0 1
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 21
21287: PUSH
21288: LD_INT 2
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: LD_INT 24
21297: PUSH
21298: LD_INT 250
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: LIST
21309: PPUSH
21310: CALL_OW 69
21314: PUSH
21315: LD_VAR 0 3
21319: GREATEREQUAL
21320: IFFALSE 21663
// begin repeat begin wait ( 0 0$1 ) ;
21322: LD_INT 35
21324: PPUSH
21325: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
21329: LD_INT 22
21331: PUSH
21332: LD_VAR 0 1
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 21
21343: PUSH
21344: LD_INT 2
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 24
21353: PUSH
21354: LD_INT 651
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: LIST
21365: PPUSH
21366: CALL_OW 69
21370: PUSH
21371: LD_INT 0
21373: GREATER
21374: IFFALSE 21602
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
21376: LD_ADDR_VAR 0 10
21380: PUSH
21381: LD_INT 22
21383: PUSH
21384: LD_VAR 0 1
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: PUSH
21393: LD_INT 21
21395: PUSH
21396: LD_INT 2
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: PUSH
21403: LD_INT 24
21405: PUSH
21406: LD_INT 651
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: LIST
21417: PPUSH
21418: CALL_OW 69
21422: PUSH
21423: FOR_IN
21424: IFFALSE 21600
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
21426: LD_ADDR_VAR 0 16
21430: PUSH
21431: LD_INT 22
21433: PUSH
21434: LD_VAR 0 4
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PPUSH
21443: CALL_OW 69
21447: PPUSH
21448: LD_VAR 0 10
21452: PPUSH
21453: CALL_OW 74
21457: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
21458: LD_ADDR_VAR 0 17
21462: PUSH
21463: LD_INT 22
21465: PUSH
21466: LD_VAR 0 4
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 2
21477: PUSH
21478: LD_INT 59
21480: PUSH
21481: EMPTY
21482: LIST
21483: PUSH
21484: LD_INT 21
21486: PUSH
21487: LD_INT 1
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 21
21496: PUSH
21497: LD_INT 2
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: EMPTY
21515: LIST
21516: PPUSH
21517: CALL_OW 69
21521: PPUSH
21522: LD_VAR 0 10
21526: PPUSH
21527: CALL_OW 74
21531: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
21532: LD_VAR 0 10
21536: PPUSH
21537: LD_VAR 0 16
21541: PPUSH
21542: CALL_OW 296
21546: PUSH
21547: LD_INT 8
21549: PLUS
21550: PUSH
21551: LD_VAR 0 10
21555: PPUSH
21556: LD_VAR 0 17
21560: PPUSH
21561: CALL_OW 296
21565: LESS
21566: IFFALSE 21584
// begin ComAttackUnit ( i , target1 ) ;
21568: LD_VAR 0 10
21572: PPUSH
21573: LD_VAR 0 16
21577: PPUSH
21578: CALL_OW 115
// end else
21582: GO 21598
// begin ComAttackUnit ( i , target2 ) ;
21584: LD_VAR 0 10
21588: PPUSH
21589: LD_VAR 0 17
21593: PPUSH
21594: CALL_OW 115
// end ; end ;
21598: GO 21423
21600: POP
21601: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
21602: LD_INT 22
21604: PUSH
21605: LD_VAR 0 1
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 21
21616: PUSH
21617: LD_INT 2
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PPUSH
21628: CALL_OW 69
21632: PUSH
21633: LD_INT 0
21635: EQUAL
21636: PUSH
21637: LD_INT 22
21639: PUSH
21640: LD_VAR 0 4
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: EMPTY
21650: LIST
21651: PPUSH
21652: CALL_OW 69
21656: PUSH
21657: LD_INT 0
21659: EQUAL
21660: OR
21661: IFFALSE 21322
// end ; end ;
21663: LD_VAR 0 9
21667: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
21668: LD_INT 0
21670: PPUSH
21671: PPUSH
21672: PPUSH
21673: PPUSH
// r := 100 ;
21674: LD_ADDR_VAR 0 5
21678: PUSH
21679: LD_INT 100
21681: ST_TO_ADDR
// x := 0 ;
21682: LD_ADDR_VAR 0 6
21686: PUSH
21687: LD_INT 0
21689: ST_TO_ADDR
// while ( x < n ) do
21690: LD_VAR 0 6
21694: PUSH
21695: LD_VAR 0 2
21699: LESS
21700: IFFALSE 21987
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
21702: LD_ADDR_VAR 0 4
21706: PUSH
21707: DOUBLE
21708: LD_INT 1
21710: DEC
21711: ST_TO_ADDR
21712: LD_VAR 0 1
21716: PPUSH
21717: LD_INT 0
21719: PPUSH
21720: CALL_OW 517
21724: PUSH
21725: LD_INT 1
21727: ARRAY
21728: PUSH
21729: FOR_TO
21730: IFFALSE 21983
// begin if r > 50 then
21732: LD_VAR 0 5
21736: PUSH
21737: LD_INT 50
21739: GREATER
21740: IFFALSE 21959
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
21742: LD_VAR 0 1
21746: PPUSH
21747: LD_INT 0
21749: PPUSH
21750: CALL_OW 517
21754: PUSH
21755: LD_INT 1
21757: ARRAY
21758: PUSH
21759: LD_VAR 0 4
21763: ARRAY
21764: PPUSH
21765: LD_VAR 0 1
21769: PPUSH
21770: LD_INT 0
21772: PPUSH
21773: CALL_OW 517
21777: PUSH
21778: LD_INT 2
21780: ARRAY
21781: PUSH
21782: LD_VAR 0 4
21786: ARRAY
21787: PPUSH
21788: CALL_OW 458
21792: NOT
21793: IFFALSE 21943
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
21795: LD_VAR 0 1
21799: PPUSH
21800: LD_INT 0
21802: PPUSH
21803: CALL_OW 517
21807: PUSH
21808: LD_INT 1
21810: ARRAY
21811: PUSH
21812: LD_VAR 0 4
21816: ARRAY
21817: PPUSH
21818: LD_VAR 0 1
21822: PPUSH
21823: LD_INT 0
21825: PPUSH
21826: CALL_OW 517
21830: PUSH
21831: LD_INT 2
21833: ARRAY
21834: PUSH
21835: LD_VAR 0 4
21839: ARRAY
21840: PPUSH
21841: LD_INT 5
21843: PPUSH
21844: LD_INT 0
21846: PPUSH
21847: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
21851: LD_ADDR_EXP 52
21855: PUSH
21856: LD_EXP 52
21860: PPUSH
21861: LD_INT 1
21863: PPUSH
21864: LD_VAR 0 1
21868: PPUSH
21869: LD_INT 0
21871: PPUSH
21872: CALL_OW 517
21876: PUSH
21877: LD_INT 1
21879: ARRAY
21880: PUSH
21881: LD_VAR 0 4
21885: ARRAY
21886: PUSH
21887: LD_VAR 0 1
21891: PPUSH
21892: LD_INT 0
21894: PPUSH
21895: CALL_OW 517
21899: PUSH
21900: LD_INT 2
21902: ARRAY
21903: PUSH
21904: LD_VAR 0 4
21908: ARRAY
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PPUSH
21914: CALL_OW 2
21918: ST_TO_ADDR
// r := 0 ;
21919: LD_ADDR_VAR 0 5
21923: PUSH
21924: LD_INT 0
21926: ST_TO_ADDR
// x := x + 1 ;
21927: LD_ADDR_VAR 0 6
21931: PUSH
21932: LD_VAR 0 6
21936: PUSH
21937: LD_INT 1
21939: PLUS
21940: ST_TO_ADDR
// end else
21941: GO 21957
// r := r + 35 ;
21943: LD_ADDR_VAR 0 5
21947: PUSH
21948: LD_VAR 0 5
21952: PUSH
21953: LD_INT 35
21955: PLUS
21956: ST_TO_ADDR
// end else
21957: GO 21981
// r := r + rand ( 10 , 25 ) ;
21959: LD_ADDR_VAR 0 5
21963: PUSH
21964: LD_VAR 0 5
21968: PUSH
21969: LD_INT 10
21971: PPUSH
21972: LD_INT 25
21974: PPUSH
21975: CALL_OW 12
21979: PLUS
21980: ST_TO_ADDR
// end ;
21981: GO 21729
21983: POP
21984: POP
21985: GO 21690
// end ; end_of_file
21987: LD_VAR 0 3
21991: RET
// every 0 0$1 trigger russianAI = 1 do
21992: LD_EXP 41
21996: PUSH
21997: LD_INT 1
21999: EQUAL
22000: IFFALSE 22219
22002: GO 22004
22004: DISABLE
// begin enable ;
22005: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
22006: LD_INT 3
22008: PPUSH
22009: LD_EXP 32
22013: PPUSH
22014: CALL 16470 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
22018: LD_INT 3
22020: PPUSH
22021: LD_EXP 44
22025: PPUSH
22026: CALL 16830 0 2
// if ruPossition = 1 then
22030: LD_EXP 43
22034: PUSH
22035: LD_INT 1
22037: EQUAL
22038: IFFALSE 22093
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
22040: LD_INT 3
22042: PPUSH
22043: LD_INT 13
22045: PPUSH
22046: LD_INT 10
22048: PPUSH
22049: LD_INT 22
22051: PUSH
22052: LD_INT 3
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 21
22061: PUSH
22062: LD_INT 3
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 30
22071: PUSH
22072: LD_INT 8
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: LIST
22083: PPUSH
22084: CALL_OW 69
22088: PPUSH
22089: CALL 17036 0 4
// if ruPossition = 2 then
22093: LD_EXP 43
22097: PUSH
22098: LD_INT 2
22100: EQUAL
22101: IFFALSE 22156
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
22103: LD_INT 3
22105: PPUSH
22106: LD_INT 14
22108: PPUSH
22109: LD_INT 11
22111: PPUSH
22112: LD_INT 22
22114: PUSH
22115: LD_INT 3
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 21
22124: PUSH
22125: LD_INT 3
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 30
22134: PUSH
22135: LD_INT 8
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: LIST
22146: PPUSH
22147: CALL_OW 69
22151: PPUSH
22152: CALL 17036 0 4
// if ruPossition = 3 then
22156: LD_EXP 43
22160: PUSH
22161: LD_INT 3
22163: EQUAL
22164: IFFALSE 22219
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
22166: LD_INT 3
22168: PPUSH
22169: LD_INT 15
22171: PPUSH
22172: LD_INT 12
22174: PPUSH
22175: LD_INT 22
22177: PUSH
22178: LD_INT 3
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 21
22187: PUSH
22188: LD_INT 3
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: LD_INT 30
22197: PUSH
22198: LD_INT 8
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: LIST
22209: PPUSH
22210: CALL_OW 69
22214: PPUSH
22215: CALL 17036 0 4
// end ;
22219: END
// every 0 0$1 do
22220: GO 22222
22222: DISABLE
// begin enable ;
22223: ENABLE
// if ruPossition = 1 then
22224: LD_EXP 43
22228: PUSH
22229: LD_INT 1
22231: EQUAL
22232: IFFALSE 22244
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
22234: LD_INT 3
22236: PPUSH
22237: LD_INT 10
22239: PPUSH
22240: CALL 16107 0 2
// if ruPossition = 2 then
22244: LD_EXP 43
22248: PUSH
22249: LD_INT 2
22251: EQUAL
22252: IFFALSE 22264
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
22254: LD_INT 3
22256: PPUSH
22257: LD_INT 11
22259: PPUSH
22260: CALL 16107 0 2
// if ruPossition = 3 then
22264: LD_EXP 43
22268: PUSH
22269: LD_INT 3
22271: EQUAL
22272: IFFALSE 22284
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
22274: LD_INT 3
22276: PPUSH
22277: LD_INT 12
22279: PPUSH
22280: CALL 16107 0 2
// IntBazooka ( 3 , 1 ) ;
22284: LD_INT 3
22286: PPUSH
22287: LD_INT 1
22289: PPUSH
22290: CALL 14906 0 2
// IntBazooka ( 6 , 1 ) ;
22294: LD_INT 6
22296: PPUSH
22297: LD_INT 1
22299: PPUSH
22300: CALL 14906 0 2
// end ;
22304: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
22305: LD_EXP 41
22309: PUSH
22310: LD_INT 1
22312: EQUAL
22313: PUSH
22314: LD_EXP 37
22318: PPUSH
22319: CALL_OW 302
22323: AND
22324: PUSH
22325: LD_EXP 37
22329: PPUSH
22330: CALL_OW 255
22334: PUSH
22335: LD_INT 3
22337: EQUAL
22338: AND
22339: PUSH
22340: LD_INT 22
22342: PUSH
22343: LD_INT 3
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 21
22352: PUSH
22353: LD_INT 2
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 33
22362: PUSH
22363: LD_INT 3
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: LIST
22374: PPUSH
22375: CALL_OW 69
22379: PUSH
22380: LD_INT 0
22382: EQUAL
22383: AND
22384: IFFALSE 22592
22386: GO 22388
22388: DISABLE
// begin enable ;
22389: ENABLE
// if Difficulty = 1 then
22390: LD_OWVAR 67
22394: PUSH
22395: LD_INT 1
22397: EQUAL
22398: IFFALSE 22460
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22400: LD_INT 3
22402: PPUSH
22403: LD_EXP 37
22407: PPUSH
22408: LD_INT 5
22410: PPUSH
22411: LD_INT 8
22413: PPUSH
22414: CALL_OW 12
22418: PPUSH
22419: LD_INT 1
22421: PPUSH
22422: LD_INT 43
22424: PUSH
22425: LD_INT 44
22427: PUSH
22428: LD_INT 45
22430: PUSH
22431: LD_INT 46
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: PPUSH
22440: LD_INT 1
22442: PPUSH
22443: LD_INT 3
22445: PUSH
22446: LD_INT 3
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PPUSH
22453: LD_INT 22
22455: PPUSH
22456: CALL 21026 0 8
// if Difficulty = 2 then
22460: LD_OWVAR 67
22464: PUSH
22465: LD_INT 2
22467: EQUAL
22468: IFFALSE 22526
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22470: LD_INT 3
22472: PPUSH
22473: LD_EXP 37
22477: PPUSH
22478: LD_INT 6
22480: PPUSH
22481: LD_INT 8
22483: PPUSH
22484: CALL_OW 12
22488: PPUSH
22489: LD_INT 1
22491: PPUSH
22492: LD_INT 44
22494: PUSH
22495: LD_INT 45
22497: PUSH
22498: LD_INT 46
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: LIST
22505: PPUSH
22506: LD_INT 1
22508: PPUSH
22509: LD_INT 3
22511: PUSH
22512: LD_INT 3
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PPUSH
22519: LD_INT 22
22521: PPUSH
22522: CALL 21026 0 8
// if Difficulty >= 3 then
22526: LD_OWVAR 67
22530: PUSH
22531: LD_INT 3
22533: GREATEREQUAL
22534: IFFALSE 22592
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22536: LD_INT 3
22538: PPUSH
22539: LD_EXP 37
22543: PPUSH
22544: LD_INT 7
22546: PPUSH
22547: LD_INT 8
22549: PPUSH
22550: CALL_OW 12
22554: PPUSH
22555: LD_INT 1
22557: PPUSH
22558: LD_INT 44
22560: PUSH
22561: LD_INT 45
22563: PUSH
22564: LD_INT 46
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: LIST
22571: PPUSH
22572: LD_INT 1
22574: PPUSH
22575: LD_INT 3
22577: PUSH
22578: LD_INT 3
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PPUSH
22585: LD_INT 22
22587: PPUSH
22588: CALL 21026 0 8
// end ;
22592: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
22593: LD_EXP 52
22597: PUSH
22598: LD_EXP 51
22602: AND
22603: IFFALSE 22724
22605: GO 22607
22607: DISABLE
22608: LD_INT 0
22610: PPUSH
// begin enable ;
22611: ENABLE
// for i in arabianMines do
22612: LD_ADDR_VAR 0 1
22616: PUSH
22617: LD_EXP 52
22621: PUSH
22622: FOR_IN
22623: IFFALSE 22722
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
22625: LD_INT 22
22627: PUSH
22628: LD_INT 1
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 92
22637: PUSH
22638: LD_VAR 0 1
22642: PUSH
22643: LD_INT 1
22645: ARRAY
22646: PUSH
22647: LD_VAR 0 1
22651: PUSH
22652: LD_INT 2
22654: ARRAY
22655: PUSH
22656: LD_INT 3
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PPUSH
22669: CALL_OW 69
22673: IFFALSE 22720
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
22675: LD_VAR 0 1
22679: PUSH
22680: LD_INT 1
22682: ARRAY
22683: PPUSH
22684: LD_VAR 0 1
22688: PUSH
22689: LD_INT 2
22691: ARRAY
22692: PPUSH
22693: LD_INT 5
22695: PPUSH
22696: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
22700: LD_ADDR_EXP 52
22704: PUSH
22705: LD_EXP 52
22709: PPUSH
22710: LD_VAR 0 1
22714: PPUSH
22715: CALL_OW 3
22719: ST_TO_ADDR
// end ; end ;
22720: GO 22622
22722: POP
22723: POP
// end ; end_of_file
22724: PPOPN 1
22726: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
22727: LD_VAR 0 1
22731: PPUSH
22732: CALL_OW 255
22736: PUSH
22737: LD_INT 4
22739: EQUAL
22740: IFFALSE 22754
// SetBName ( building , epsilon ) ;
22742: LD_VAR 0 1
22746: PPUSH
22747: LD_STRING epsilon
22749: PPUSH
22750: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
22754: LD_VAR 0 1
22758: PPUSH
22759: CALL_OW 255
22763: PUSH
22764: LD_INT 1
22766: EQUAL
22767: PUSH
22768: LD_VAR 0 1
22772: PPUSH
22773: CALL_OW 266
22777: PUSH
22778: LD_INT 0
22780: EQUAL
22781: AND
22782: IFFALSE 22796
// SetBName ( building , epsilon ) ;
22784: LD_VAR 0 1
22788: PPUSH
22789: LD_STRING epsilon
22791: PPUSH
22792: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
22796: LD_VAR 0 1
22800: PPUSH
22801: CALL_OW 255
22805: PUSH
22806: LD_INT 3
22808: EQUAL
22809: PUSH
22810: LD_VAR 0 1
22814: PPUSH
22815: CALL_OW 266
22819: PUSH
22820: LD_INT 0
22822: EQUAL
22823: AND
22824: IFFALSE 22838
// SetBName ( building , chuikov ) ;
22826: LD_VAR 0 1
22830: PPUSH
22831: LD_STRING chuikov
22833: PPUSH
22834: CALL_OW 500
// if GetSide ( building ) = 2 then
22838: LD_VAR 0 1
22842: PPUSH
22843: CALL_OW 255
22847: PUSH
22848: LD_INT 2
22850: EQUAL
22851: IFFALSE 22907
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22853: LD_VAR 0 1
22857: PPUSH
22858: CALL_OW 266
22862: PUSH
22863: LD_INT 6
22865: EQUAL
22866: PUSH
22867: LD_VAR 0 1
22871: PPUSH
22872: CALL_OW 266
22876: PUSH
22877: LD_INT 9
22879: EQUAL
22880: OR
22881: IFFALSE 22907
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22883: LD_VAR 0 1
22887: PPUSH
22888: LD_INT 10
22890: PPUSH
22891: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22895: LD_VAR 0 1
22899: PPUSH
22900: LD_INT 11
22902: PPUSH
22903: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
22907: LD_VAR 0 1
22911: PPUSH
22912: CALL_OW 255
22916: PUSH
22917: LD_INT 3
22919: EQUAL
22920: IFFALSE 22954
// begin ruDepotConstructed := true ;
22922: LD_ADDR_EXP 59
22926: PUSH
22927: LD_INT 1
22929: ST_TO_ADDR
// if GetBType ( building ) = 2 then
22930: LD_VAR 0 1
22934: PPUSH
22935: CALL_OW 266
22939: PUSH
22940: LD_INT 2
22942: EQUAL
22943: IFFALSE 22954
// AddComUpgrade ( building ) ;
22945: LD_VAR 0 1
22949: PPUSH
22950: CALL_OW 206
// end ; end ;
22954: PPOPN 2
22956: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
22957: LD_INT 0
22959: PPUSH
22960: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
22961: LD_VAR 0 1
22965: PUSH
22966: LD_INT 22
22968: PUSH
22969: LD_INT 3
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 23
22978: PUSH
22979: LD_INT 3
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 21
22988: PUSH
22989: LD_INT 2
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: LIST
23000: PPUSH
23001: CALL_OW 69
23005: IN
23006: PUSH
23007: LD_EXP 63
23011: NOT
23012: AND
23013: IFFALSE 23044
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
23015: LD_ADDR_EXP 63
23019: PUSH
23020: LD_VAR 0 1
23024: PPUSH
23025: CALL_OW 250
23029: PUSH
23030: LD_VAR 0 1
23034: PPUSH
23035: CALL_OW 251
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: ST_TO_ADDR
// end ;
23044: PPOPN 3
23046: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
23047: LD_VAR 0 2
23051: PPUSH
23052: CALL_OW 255
23056: PUSH
23057: LD_INT 3
23059: EQUAL
23060: PUSH
23061: LD_EXP 37
23065: PPUSH
23066: CALL_OW 255
23070: PUSH
23071: LD_INT 3
23073: EQUAL
23074: AND
23075: PUSH
23076: LD_EXP 37
23080: PPUSH
23081: CALL_OW 302
23085: AND
23086: IFFALSE 23102
// ComEnterUnit ( human , ruFab ) ;
23088: LD_VAR 0 2
23092: PPUSH
23093: LD_EXP 37
23097: PPUSH
23098: CALL_OW 120
// end ;
23102: PPOPN 2
23104: END
// on BuildingComplete ( building ) do var i , engineers , sol , tmp ;
23105: LD_INT 0
23107: PPUSH
23108: PPUSH
23109: PPUSH
23110: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
23111: LD_VAR 0 1
23115: PPUSH
23116: CALL_OW 255
23120: PUSH
23121: LD_INT 1
23123: EQUAL
23124: PUSH
23125: LD_EXP 67
23129: PUSH
23130: LD_INT 0
23132: EQUAL
23133: AND
23134: IFFALSE 23336
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
23136: LD_VAR 0 1
23140: PPUSH
23141: CALL_OW 266
23145: PUSH
23146: LD_INT 26
23148: EQUAL
23149: PUSH
23150: LD_VAR 0 1
23154: PPUSH
23155: CALL_OW 266
23159: PUSH
23160: LD_INT 27
23162: EQUAL
23163: OR
23164: PUSH
23165: LD_VAR 0 1
23169: PPUSH
23170: CALL_OW 266
23174: PUSH
23175: LD_INT 28
23177: EQUAL
23178: OR
23179: IFFALSE 23336
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
23181: LD_INT 22
23183: PUSH
23184: LD_INT 1
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 2
23193: PUSH
23194: LD_INT 30
23196: PUSH
23197: LD_INT 7
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 30
23206: PUSH
23207: LD_INT 8
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: LIST
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PPUSH
23223: CALL_OW 69
23227: PUSH
23228: LD_INT 0
23230: GREATER
23231: IFFALSE 23336
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
23233: LD_ADDR_VAR 0 2
23237: PUSH
23238: LD_INT 22
23240: PUSH
23241: LD_INT 1
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 2
23250: PUSH
23251: LD_INT 30
23253: PUSH
23254: LD_INT 7
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 30
23263: PUSH
23264: LD_INT 8
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: LIST
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PPUSH
23280: CALL_OW 69
23284: PUSH
23285: FOR_IN
23286: IFFALSE 23334
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
23288: LD_VAR 0 2
23292: PPUSH
23293: LD_INT 1
23295: PPUSH
23296: CALL_OW 268
23300: PUSH
23301: LD_INT 11
23303: EQUAL
23304: PUSH
23305: LD_VAR 0 2
23309: PPUSH
23310: LD_INT 2
23312: PPUSH
23313: CALL_OW 268
23317: PUSH
23318: LD_INT 11
23320: EQUAL
23321: OR
23322: IFFALSE 23332
// eventVar1 = 1 ;
23324: LD_ADDR_EXP 67
23328: PUSH
23329: LD_INT 1
23331: ST_TO_ADDR
23332: GO 23285
23334: POP
23335: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
23336: LD_VAR 0 1
23340: PPUSH
23341: CALL_OW 255
23345: PUSH
23346: LD_INT 3
23348: EQUAL
23349: IFFALSE 23829
// begin if GetBType ( building ) = b_depot then
23351: LD_VAR 0 1
23355: PPUSH
23356: CALL_OW 266
23360: PUSH
23361: LD_INT 0
23363: EQUAL
23364: IFFALSE 23436
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
23366: LD_VAR 0 1
23370: PPUSH
23371: CALL_OW 274
23375: PPUSH
23376: LD_INT 1
23378: PPUSH
23379: LD_INT 5000
23381: PPUSH
23382: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
23386: LD_VAR 0 1
23390: PPUSH
23391: CALL_OW 274
23395: PPUSH
23396: LD_INT 2
23398: PPUSH
23399: LD_INT 300
23401: PPUSH
23402: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
23406: LD_VAR 0 1
23410: PPUSH
23411: CALL_OW 274
23415: PPUSH
23416: LD_INT 3
23418: PPUSH
23419: LD_INT 100
23421: PPUSH
23422: CALL_OW 277
// ruDepot = building ;
23426: LD_ADDR_EXP 32
23430: PUSH
23431: LD_VAR 0 1
23435: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23436: LD_VAR 0 1
23440: PPUSH
23441: CALL_OW 266
23445: PUSH
23446: LD_INT 0
23448: EQUAL
23449: PUSH
23450: LD_VAR 0 1
23454: PPUSH
23455: CALL_OW 266
23459: PUSH
23460: LD_INT 2
23462: EQUAL
23463: OR
23464: PUSH
23465: LD_VAR 0 1
23469: PPUSH
23470: CALL_OW 266
23474: PUSH
23475: LD_INT 4
23477: EQUAL
23478: OR
23479: IFFALSE 23490
// ComUpgrade ( building ) ;
23481: LD_VAR 0 1
23485: PPUSH
23486: CALL_OW 146
// if GetBType ( building ) = b_lab then
23490: LD_VAR 0 1
23494: PPUSH
23495: CALL_OW 266
23499: PUSH
23500: LD_INT 6
23502: EQUAL
23503: IFFALSE 23706
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
23505: LD_INT 22
23507: PUSH
23508: LD_INT 3
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 30
23517: PUSH
23518: LD_INT 8
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PPUSH
23529: CALL_OW 69
23533: PUSH
23534: LD_INT 0
23536: EQUAL
23537: IFFALSE 23575
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23539: LD_VAR 0 1
23543: PPUSH
23544: LD_INT 10
23546: PPUSH
23547: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
23551: LD_VAR 0 1
23555: PPUSH
23556: LD_INT 12
23558: PPUSH
23559: CALL_OW 207
// ruLab1 = building ;
23563: LD_ADDR_EXP 33
23567: PUSH
23568: LD_VAR 0 1
23572: ST_TO_ADDR
// end else
23573: GO 23609
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
23575: LD_VAR 0 1
23579: PPUSH
23580: LD_INT 11
23582: PPUSH
23583: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
23587: LD_VAR 0 1
23591: PPUSH
23592: LD_INT 14
23594: PPUSH
23595: CALL_OW 207
// ruLab2 = building ;
23599: LD_ADDR_EXP 34
23603: PUSH
23604: LD_VAR 0 1
23608: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
23609: LD_INT 3
23611: PPUSH
23612: LD_VAR 0 1
23616: PPUSH
23617: LD_INT 3
23619: PPUSH
23620: CALL 16022 0 3
// if ruDestroyedBuildings > 0 then
23624: LD_EXP 44
23628: PUSH
23629: LD_INT 0
23631: GREATER
23632: IFFALSE 23706
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23634: LD_ADDR_EXP 44
23638: PUSH
23639: LD_EXP 44
23643: PPUSH
23644: LD_INT 1
23646: PPUSH
23647: CALL_OW 3
23651: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23652: LD_ADDR_EXP 44
23656: PUSH
23657: LD_EXP 44
23661: PPUSH
23662: LD_INT 1
23664: PPUSH
23665: CALL_OW 3
23669: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23670: LD_ADDR_EXP 44
23674: PUSH
23675: LD_EXP 44
23679: PPUSH
23680: LD_INT 1
23682: PPUSH
23683: CALL_OW 3
23687: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23688: LD_ADDR_EXP 44
23692: PUSH
23693: LD_EXP 44
23697: PPUSH
23698: LD_INT 1
23700: PPUSH
23701: CALL_OW 3
23705: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
23706: LD_VAR 0 1
23710: PPUSH
23711: CALL_OW 266
23715: PUSH
23716: LD_INT 32
23718: EQUAL
23719: IFFALSE 23756
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23721: LD_VAR 0 1
23725: PPUSH
23726: LD_INT 44
23728: PUSH
23729: LD_INT 45
23731: PUSH
23732: LD_INT 46
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 1
23742: PPUSH
23743: LD_INT 3
23745: PPUSH
23746: CALL_OW 12
23750: ARRAY
23751: PPUSH
23752: CALL_OW 208
// if GetBType ( building ) = b_turret then
23756: LD_VAR 0 1
23760: PPUSH
23761: CALL_OW 266
23765: PUSH
23766: LD_INT 33
23768: EQUAL
23769: IFFALSE 23806
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23771: LD_VAR 0 1
23775: PPUSH
23776: LD_INT 44
23778: PUSH
23779: LD_INT 45
23781: PUSH
23782: LD_INT 46
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 1
23792: PPUSH
23793: LD_INT 3
23795: PPUSH
23796: CALL_OW 12
23800: ARRAY
23801: PPUSH
23802: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
23806: LD_VAR 0 1
23810: PPUSH
23811: CALL_OW 266
23815: PUSH
23816: LD_INT 24
23818: EQUAL
23819: IFFALSE 23829
// russianAI = 1 ;
23821: LD_ADDR_EXP 41
23825: PUSH
23826: LD_INT 1
23828: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
23829: LD_VAR 0 1
23833: PPUSH
23834: CALL_OW 255
23838: PUSH
23839: LD_INT 2
23841: EQUAL
23842: IFFALSE 24721
// begin if GetBType ( building ) = arBuildingsTab [ 1 ] [ 1 ] then
23844: LD_VAR 0 1
23848: PPUSH
23849: CALL_OW 266
23853: PUSH
23854: LD_EXP 70
23858: PUSH
23859: LD_INT 1
23861: ARRAY
23862: PUSH
23863: LD_INT 1
23865: ARRAY
23866: EQUAL
23867: IFFALSE 23994
// begin arBuildingsTab := Delete ( arBuildingsTab , 1 ) ;
23869: LD_ADDR_EXP 70
23873: PUSH
23874: LD_EXP 70
23878: PPUSH
23879: LD_INT 1
23881: PPUSH
23882: CALL_OW 3
23886: ST_TO_ADDR
// if arBuildingsTab then
23887: LD_EXP 70
23891: IFFALSE 23994
// begin engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
23893: LD_ADDR_VAR 0 3
23897: PUSH
23898: LD_INT 22
23900: PUSH
23901: LD_INT 2
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 25
23910: PUSH
23911: LD_INT 2
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PPUSH
23922: CALL_OW 69
23926: ST_TO_ADDR
// if engineers then
23927: LD_VAR 0 3
23931: IFFALSE 23994
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
23933: LD_VAR 0 3
23937: PPUSH
23938: LD_EXP 70
23942: PUSH
23943: LD_INT 1
23945: ARRAY
23946: PUSH
23947: LD_INT 1
23949: ARRAY
23950: PPUSH
23951: LD_EXP 70
23955: PUSH
23956: LD_INT 1
23958: ARRAY
23959: PUSH
23960: LD_INT 2
23962: ARRAY
23963: PPUSH
23964: LD_EXP 70
23968: PUSH
23969: LD_INT 1
23971: ARRAY
23972: PUSH
23973: LD_INT 3
23975: ARRAY
23976: PPUSH
23977: LD_EXP 70
23981: PUSH
23982: LD_INT 1
23984: ARRAY
23985: PUSH
23986: LD_INT 4
23988: ARRAY
23989: PPUSH
23990: CALL_OW 205
// end ; end ; if GetBType ( building ) = b_breastwork then
23994: LD_VAR 0 1
23998: PPUSH
23999: CALL_OW 266
24003: PUSH
24004: LD_INT 31
24006: EQUAL
24007: IFFALSE 24153
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
24009: LD_ADDR_VAR 0 4
24013: PUSH
24014: LD_INT 22
24016: PUSH
24017: LD_INT 2
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 2
24026: PUSH
24027: LD_INT 25
24029: PUSH
24030: LD_INT 1
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 25
24039: PUSH
24040: LD_INT 8
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: LIST
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PPUSH
24056: CALL_OW 69
24060: PUSH
24061: LD_EXP 28
24065: DIFF
24066: ST_TO_ADDR
// if not sol then
24067: LD_VAR 0 4
24071: NOT
24072: IFFALSE 24076
// exit ;
24074: GO 24721
// for i in sol do
24076: LD_ADDR_VAR 0 2
24080: PUSH
24081: LD_VAR 0 4
24085: PUSH
24086: FOR_IN
24087: IFFALSE 24151
// if not GetTag ( i ) then
24089: LD_VAR 0 2
24093: PPUSH
24094: CALL_OW 110
24098: NOT
24099: IFFALSE 24149
// begin if IsInUnit ( i ) then
24101: LD_VAR 0 2
24105: PPUSH
24106: CALL_OW 310
24110: IFFALSE 24121
// ComExitBuilding ( i ) ;
24112: LD_VAR 0 2
24116: PPUSH
24117: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
24121: LD_VAR 0 2
24125: PPUSH
24126: LD_VAR 0 1
24130: PPUSH
24131: CALL_OW 180
// SetTag ( i , 11 ) ;
24135: LD_VAR 0 2
24139: PPUSH
24140: LD_INT 11
24142: PPUSH
24143: CALL_OW 109
// break ;
24147: GO 24151
// end ;
24149: GO 24086
24151: POP
24152: POP
// end ; if GetBType ( building ) = b_depot then
24153: LD_VAR 0 1
24157: PPUSH
24158: CALL_OW 266
24162: PUSH
24163: LD_INT 0
24165: EQUAL
24166: IFFALSE 24252
// begin arDepot = building ;
24168: LD_ADDR_EXP 45
24172: PUSH
24173: LD_VAR 0 1
24177: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
24178: LD_INT 38
24180: PUSH
24181: LD_INT 47
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PPUSH
24188: LD_INT 71
24190: PPUSH
24191: LD_INT 19
24193: PPUSH
24194: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
24198: LD_VAR 0 1
24202: PPUSH
24203: CALL_OW 274
24207: PPUSH
24208: LD_INT 1
24210: PPUSH
24211: LD_INT 500
24213: PPUSH
24214: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
24218: LD_VAR 0 1
24222: PPUSH
24223: CALL_OW 274
24227: PPUSH
24228: LD_INT 3
24230: PPUSH
24231: LD_INT 30
24233: PPUSH
24234: CALL_OW 277
// ComEnterUnit ( Dietrich , building ) ;
24238: LD_EXP 28
24242: PPUSH
24243: LD_VAR 0 1
24247: PPUSH
24248: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
24252: LD_VAR 0 1
24256: PPUSH
24257: CALL_OW 266
24261: PUSH
24262: LD_INT 6
24264: EQUAL
24265: PUSH
24266: LD_VAR 0 1
24270: PPUSH
24271: CALL_OW 266
24275: PUSH
24276: LD_INT 9
24278: EQUAL
24279: OR
24280: IFFALSE 24331
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
24282: LD_VAR 0 1
24286: PPUSH
24287: LD_INT 10
24289: PPUSH
24290: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
24294: LD_VAR 0 1
24298: PPUSH
24299: LD_INT 11
24301: PPUSH
24302: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
24306: LD_INT 2
24308: PPUSH
24309: LD_VAR 0 1
24313: PPUSH
24314: LD_INT 2
24316: PPUSH
24317: CALL 16022 0 3
// arLab = building ;
24321: LD_ADDR_EXP 46
24325: PUSH
24326: LD_VAR 0 1
24330: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
24331: LD_VAR 0 1
24335: PPUSH
24336: CALL_OW 266
24340: PUSH
24341: LD_INT 2
24343: EQUAL
24344: PUSH
24345: LD_VAR 0 1
24349: PPUSH
24350: CALL_OW 266
24354: PUSH
24355: LD_INT 4
24357: EQUAL
24358: OR
24359: IFFALSE 24430
// begin ComUpgrade ( building ) ;
24361: LD_VAR 0 1
24365: PPUSH
24366: CALL_OW 146
// if GetBType ( building ) = b_armoury then
24370: LD_VAR 0 1
24374: PPUSH
24375: CALL_OW 266
24379: PUSH
24380: LD_INT 4
24382: EQUAL
24383: IFFALSE 24430
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) diff Dietrich , 75 , 21 ) ;
24385: LD_INT 22
24387: PUSH
24388: LD_INT 2
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 25
24397: PUSH
24398: LD_INT 1
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PPUSH
24409: CALL_OW 69
24413: PUSH
24414: LD_EXP 28
24418: DIFF
24419: PPUSH
24420: LD_INT 75
24422: PPUSH
24423: LD_INT 21
24425: PPUSH
24426: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
24430: LD_VAR 0 1
24434: PPUSH
24435: CALL_OW 266
24439: PUSH
24440: LD_INT 27
24442: EQUAL
24443: IFFALSE 24721
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
24445: LD_INT 22
24447: PUSH
24448: LD_INT 2
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 30
24457: PUSH
24458: LD_INT 27
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PPUSH
24469: CALL_OW 69
24473: PUSH
24474: LD_INT 2
24476: EQUAL
24477: IFFALSE 24721
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
24479: LD_ADDR_VAR 0 2
24483: PUSH
24484: LD_INT 22
24486: PUSH
24487: LD_INT 2
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: LD_INT 21
24496: PUSH
24497: LD_INT 1
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 25
24506: PUSH
24507: LD_INT 2
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: LIST
24518: PPUSH
24519: CALL_OW 69
24523: PUSH
24524: LD_INT 1
24526: ARRAY
24527: ST_TO_ADDR
// if not i then
24528: LD_VAR 0 2
24532: NOT
24533: IFFALSE 24537
// exit ;
24535: GO 24721
// AddComMoveXY ( i , 92 , 34 ) ;
24537: LD_VAR 0 2
24541: PPUSH
24542: LD_INT 92
24544: PPUSH
24545: LD_INT 34
24547: PPUSH
24548: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24552: LD_VAR 0 2
24556: PPUSH
24557: LD_INT 35
24559: PPUSH
24560: CALL_OW 202
// AddComMoveXY ( i , 101 , 20 ) ;
24564: LD_VAR 0 2
24568: PPUSH
24569: LD_INT 101
24571: PPUSH
24572: LD_INT 20
24574: PPUSH
24575: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24579: LD_VAR 0 2
24583: PPUSH
24584: LD_INT 35
24586: PPUSH
24587: CALL_OW 202
// AddComMoveXY ( i , 115 , 30 ) ;
24591: LD_VAR 0 2
24595: PPUSH
24596: LD_INT 115
24598: PPUSH
24599: LD_INT 30
24601: PPUSH
24602: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24606: LD_VAR 0 2
24610: PPUSH
24611: LD_INT 35
24613: PPUSH
24614: CALL_OW 202
// AddComMoveXY ( i , 82 , 57 ) ;
24618: LD_VAR 0 2
24622: PPUSH
24623: LD_INT 82
24625: PPUSH
24626: LD_INT 57
24628: PPUSH
24629: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24633: LD_VAR 0 2
24637: PPUSH
24638: LD_INT 35
24640: PPUSH
24641: CALL_OW 202
// AddComMoveXY ( i , 36 , 28 ) ;
24645: LD_VAR 0 2
24649: PPUSH
24650: LD_INT 36
24652: PPUSH
24653: LD_INT 28
24655: PPUSH
24656: CALL_OW 171
// AddComWait ( i , 0 0$2 ) ;
24660: LD_VAR 0 2
24664: PPUSH
24665: LD_INT 70
24667: PPUSH
24668: CALL_OW 202
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
24672: LD_INT 22
24674: PUSH
24675: LD_INT 2
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PUSH
24682: LD_INT 21
24684: PUSH
24685: LD_INT 1
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 25
24694: PUSH
24695: LD_INT 2
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: LIST
24706: PPUSH
24707: CALL_OW 69
24711: PPUSH
24712: LD_EXP 45
24716: PPUSH
24717: CALL_OW 180
// end ; end ; end ;
24721: PPOPN 5
24723: END
// on UpgradeComplete ( building ) do var i ;
24724: LD_INT 0
24726: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
24727: LD_VAR 0 1
24731: PPUSH
24732: CALL_OW 255
24736: PUSH
24737: LD_INT 1
24739: EQUAL
24740: PUSH
24741: LD_EXP 67
24745: PUSH
24746: LD_INT 0
24748: EQUAL
24749: AND
24750: IFFALSE 24948
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
24752: LD_VAR 0 1
24756: PPUSH
24757: CALL_OW 266
24761: PUSH
24762: LD_INT 7
24764: EQUAL
24765: PUSH
24766: LD_VAR 0 1
24770: PPUSH
24771: CALL_OW 266
24775: PUSH
24776: LD_INT 8
24778: EQUAL
24779: OR
24780: IFFALSE 24948
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
24782: LD_INT 22
24784: PUSH
24785: LD_INT 1
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 2
24794: PUSH
24795: LD_INT 30
24797: PUSH
24798: LD_INT 26
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 30
24807: PUSH
24808: LD_INT 27
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 30
24817: PUSH
24818: LD_INT 28
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PPUSH
24835: CALL_OW 69
24839: PUSH
24840: LD_INT 0
24842: GREATER
24843: IFFALSE 24948
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
24845: LD_ADDR_VAR 0 2
24849: PUSH
24850: LD_INT 22
24852: PUSH
24853: LD_INT 1
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 2
24862: PUSH
24863: LD_INT 30
24865: PUSH
24866: LD_INT 7
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 30
24875: PUSH
24876: LD_INT 8
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: LIST
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PPUSH
24892: CALL_OW 69
24896: PUSH
24897: FOR_IN
24898: IFFALSE 24946
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
24900: LD_VAR 0 2
24904: PPUSH
24905: LD_INT 1
24907: PPUSH
24908: CALL_OW 268
24912: PUSH
24913: LD_INT 11
24915: EQUAL
24916: PUSH
24917: LD_VAR 0 2
24921: PPUSH
24922: LD_INT 2
24924: PPUSH
24925: CALL_OW 268
24929: PUSH
24930: LD_INT 11
24932: EQUAL
24933: OR
24934: IFFALSE 24944
// eventVar1 = 1 ;
24936: LD_ADDR_EXP 67
24940: PUSH
24941: LD_INT 1
24943: ST_TO_ADDR
24944: GO 24897
24946: POP
24947: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
24948: LD_VAR 0 1
24952: PPUSH
24953: CALL_OW 255
24957: PUSH
24958: LD_INT 2
24960: EQUAL
24961: IFFALSE 25066
// begin if GetBType ( building ) = b_barracks then
24963: LD_VAR 0 1
24967: PPUSH
24968: CALL_OW 266
24972: PUSH
24973: LD_INT 5
24975: EQUAL
24976: IFFALSE 25066
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
24978: LD_ADDR_VAR 0 2
24982: PUSH
24983: LD_INT 22
24985: PUSH
24986: LD_INT 2
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 25
24995: PUSH
24996: LD_INT 1
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 3
25005: PUSH
25006: LD_INT 54
25008: PUSH
25009: EMPTY
25010: LIST
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: LIST
25020: PPUSH
25021: CALL_OW 69
25025: PUSH
25026: LD_EXP 28
25030: PUSH
25031: EMPTY
25032: LIST
25033: DIFF
25034: PUSH
25035: FOR_IN
25036: IFFALSE 25054
// ComEnterUnit ( i , building ) ;
25038: LD_VAR 0 2
25042: PPUSH
25043: LD_VAR 0 1
25047: PPUSH
25048: CALL_OW 120
25052: GO 25035
25054: POP
25055: POP
// arArm = building ;
25056: LD_ADDR_EXP 47
25060: PUSH
25061: LD_VAR 0 1
25065: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
25066: LD_VAR 0 1
25070: PPUSH
25071: CALL_OW 255
25075: PUSH
25076: LD_INT 3
25078: EQUAL
25079: IFFALSE 25552
// begin if GetBType ( building ) = b_factory then
25081: LD_VAR 0 1
25085: PPUSH
25086: CALL_OW 266
25090: PUSH
25091: LD_INT 3
25093: EQUAL
25094: IFFALSE 25161
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
25096: LD_ADDR_VAR 0 2
25100: PUSH
25101: LD_INT 22
25103: PUSH
25104: LD_INT 3
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 25
25113: PUSH
25114: LD_INT 3
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PPUSH
25125: CALL_OW 69
25129: PUSH
25130: FOR_IN
25131: IFFALSE 25149
// ComEnterUnit ( i , building ) ;
25133: LD_VAR 0 2
25137: PPUSH
25138: LD_VAR 0 1
25142: PPUSH
25143: CALL_OW 120
25147: GO 25130
25149: POP
25150: POP
// ruFab = building ;
25151: LD_ADDR_EXP 37
25155: PUSH
25156: LD_VAR 0 1
25160: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
25161: LD_INT 22
25163: PUSH
25164: LD_INT 3
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 21
25173: PUSH
25174: LD_INT 3
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 30
25183: PUSH
25184: LD_INT 8
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: LIST
25195: PPUSH
25196: CALL_OW 69
25200: PUSH
25201: LD_INT 2
25203: EQUAL
25204: IFFALSE 25412
// begin for i = 1 to 2 do
25206: LD_ADDR_VAR 0 2
25210: PUSH
25211: DOUBLE
25212: LD_INT 1
25214: DEC
25215: ST_TO_ADDR
25216: LD_INT 2
25218: PUSH
25219: FOR_TO
25220: IFFALSE 25307
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
25222: LD_INT 22
25224: PUSH
25225: LD_INT 3
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 25
25234: PUSH
25235: LD_INT 4
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PPUSH
25246: CALL_OW 69
25250: PUSH
25251: LD_VAR 0 2
25255: ARRAY
25256: PPUSH
25257: LD_INT 22
25259: PUSH
25260: LD_INT 3
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 21
25269: PUSH
25270: LD_INT 3
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 30
25279: PUSH
25280: LD_INT 8
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: LIST
25291: PPUSH
25292: CALL_OW 69
25296: PUSH
25297: LD_INT 1
25299: ARRAY
25300: PPUSH
25301: CALL_OW 120
25305: GO 25219
25307: POP
25308: POP
// for i = 3 to 4 do
25309: LD_ADDR_VAR 0 2
25313: PUSH
25314: DOUBLE
25315: LD_INT 3
25317: DEC
25318: ST_TO_ADDR
25319: LD_INT 4
25321: PUSH
25322: FOR_TO
25323: IFFALSE 25410
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
25325: LD_INT 22
25327: PUSH
25328: LD_INT 3
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 25
25337: PUSH
25338: LD_INT 4
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PPUSH
25349: CALL_OW 69
25353: PUSH
25354: LD_VAR 0 2
25358: ARRAY
25359: PPUSH
25360: LD_INT 22
25362: PUSH
25363: LD_INT 3
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 21
25372: PUSH
25373: LD_INT 3
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 30
25382: PUSH
25383: LD_INT 8
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: LIST
25394: PPUSH
25395: CALL_OW 69
25399: PUSH
25400: LD_INT 2
25402: ARRAY
25403: PPUSH
25404: CALL_OW 120
25408: GO 25322
25410: POP
25411: POP
// end ; if GetBType ( building ) = b_barracks then
25412: LD_VAR 0 1
25416: PPUSH
25417: CALL_OW 266
25421: PUSH
25422: LD_INT 5
25424: EQUAL
25425: IFFALSE 25552
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
25427: LD_ADDR_VAR 0 2
25431: PUSH
25432: LD_INT 22
25434: PUSH
25435: LD_INT 3
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 25
25444: PUSH
25445: LD_INT 1
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 3
25454: PUSH
25455: LD_INT 54
25457: PUSH
25458: EMPTY
25459: LIST
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: LIST
25469: PPUSH
25470: CALL_OW 69
25474: PUSH
25475: FOR_IN
25476: IFFALSE 25494
// ComEnterUnit ( i , building ) ;
25478: LD_VAR 0 2
25482: PPUSH
25483: LD_VAR 0 1
25487: PPUSH
25488: CALL_OW 120
25492: GO 25475
25494: POP
25495: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
25496: LD_INT 22
25498: PUSH
25499: LD_INT 3
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 30
25508: PUSH
25509: LD_INT 5
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PPUSH
25520: CALL_OW 69
25524: PUSH
25525: LD_INT 0
25527: EQUAL
25528: IFFALSE 25542
// ruArm1 = building else
25530: LD_ADDR_EXP 35
25534: PUSH
25535: LD_VAR 0 1
25539: ST_TO_ADDR
25540: GO 25552
// ruArm2 = building ;
25542: LD_ADDR_EXP 36
25546: PUSH
25547: LD_VAR 0 1
25551: ST_TO_ADDR
// end ; end ; end ;
25552: PPOPN 2
25554: END
// on EnterBuilding ( building , human ) do var rnd ;
25555: LD_INT 0
25557: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
25558: LD_VAR 0 2
25562: PPUSH
25563: CALL_OW 255
25567: PUSH
25568: LD_INT 2
25570: EQUAL
25571: PUSH
25572: LD_VAR 0 2
25576: PPUSH
25577: CALL_OW 257
25581: PUSH
25582: LD_INT 1
25584: EQUAL
25585: AND
25586: PUSH
25587: LD_VAR 0 1
25591: PUSH
25592: LD_EXP 47
25596: EQUAL
25597: AND
25598: IFFALSE 25645
// begin wait ( 0 0$1 ) ;
25600: LD_INT 35
25602: PPUSH
25603: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
25607: LD_ADDR_VAR 0 3
25611: PUSH
25612: LD_INT 1
25614: PPUSH
25615: LD_INT 100
25617: PPUSH
25618: CALL_OW 12
25622: ST_TO_ADDR
// if rnd > 50 then
25623: LD_VAR 0 3
25627: PUSH
25628: LD_INT 50
25630: GREATER
25631: IFFALSE 25645
// SetClass ( human , class_mortar ) ;
25633: LD_VAR 0 2
25637: PPUSH
25638: LD_INT 8
25640: PPUSH
25641: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
25645: LD_VAR 0 2
25649: PUSH
25650: LD_INT 22
25652: PUSH
25653: LD_INT 2
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 25
25662: PUSH
25663: LD_INT 12
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PPUSH
25674: CALL_OW 69
25678: IN
25679: IFFALSE 25729
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
25681: LD_VAR 0 1
25685: PPUSH
25686: CALL_OW 266
25690: PUSH
25691: LD_INT 0
25693: PUSH
25694: LD_INT 1
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: IN
25701: IFFALSE 25717
// SetClass ( human , class_apeman_engineer ) else
25703: LD_VAR 0 2
25707: PPUSH
25708: LD_INT 16
25710: PPUSH
25711: CALL_OW 336
25715: GO 25729
// SetClass ( human , class_apeman_soldier ) ;
25717: LD_VAR 0 2
25721: PPUSH
25722: LD_INT 15
25724: PPUSH
25725: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
25729: LD_VAR 0 2
25733: PPUSH
25734: CALL_OW 255
25738: PUSH
25739: LD_INT 3
25741: EQUAL
25742: PUSH
25743: LD_VAR 0 2
25747: PPUSH
25748: CALL_OW 257
25752: PUSH
25753: LD_INT 1
25755: EQUAL
25756: AND
25757: PUSH
25758: LD_VAR 0 1
25762: PUSH
25763: LD_EXP 35
25767: EQUAL
25768: PUSH
25769: LD_VAR 0 1
25773: PUSH
25774: LD_EXP 36
25778: EQUAL
25779: OR
25780: PUSH
25781: EMPTY
25782: LIST
25783: AND
25784: IFFALSE 25805
// begin wait ( 0 0$1 ) ;
25786: LD_INT 35
25788: PPUSH
25789: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
25793: LD_VAR 0 2
25797: PPUSH
25798: LD_INT 9
25800: PPUSH
25801: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
25805: LD_VAR 0 2
25809: PPUSH
25810: CALL_OW 255
25814: PUSH
25815: LD_INT 3
25817: EQUAL
25818: PUSH
25819: LD_VAR 0 2
25823: PPUSH
25824: CALL_OW 257
25828: PUSH
25829: LD_INT 9
25831: EQUAL
25832: AND
25833: PUSH
25834: LD_VAR 0 1
25838: PPUSH
25839: CALL_OW 266
25843: PUSH
25844: LD_INT 32
25846: EQUAL
25847: AND
25848: IFFALSE 25869
// begin wait ( 0 0$1 ) ;
25850: LD_INT 35
25852: PPUSH
25853: CALL_OW 67
// SetClass ( human , 1 ) ;
25857: LD_VAR 0 2
25861: PPUSH
25862: LD_INT 1
25864: PPUSH
25865: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
25869: LD_VAR 0 2
25873: PPUSH
25874: CALL_OW 255
25878: PUSH
25879: LD_INT 3
25881: EQUAL
25882: PUSH
25883: LD_VAR 0 2
25887: PPUSH
25888: CALL_OW 257
25892: PUSH
25893: LD_INT 3
25895: EQUAL
25896: AND
25897: PUSH
25898: LD_VAR 0 1
25902: PUSH
25903: LD_EXP 37
25907: EQUAL
25908: AND
25909: IFFALSE 25923
// SetLives ( human , 1000 ) ;
25911: LD_VAR 0 2
25915: PPUSH
25916: LD_INT 1000
25918: PPUSH
25919: CALL_OW 234
// end ;
25923: PPOPN 3
25925: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25926: LD_VAR 0 1
25930: PUSH
25931: LD_INT 1
25933: EQUAL
25934: PUSH
25935: LD_VAR 0 2
25939: PUSH
25940: LD_INT 2
25942: EQUAL
25943: AND
25944: PUSH
25945: LD_INT 1
25947: PPUSH
25948: LD_INT 2
25950: PPUSH
25951: CALL_OW 81
25955: PUSH
25956: LD_INT 1
25958: EQUAL
25959: AND
25960: IFFALSE 25981
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
25962: LD_EXP 26
25966: PPUSH
25967: LD_STRING D6b-Pow-1
25969: PPUSH
25970: CALL_OW 94
// YouLost ( Powell ) ;
25974: LD_STRING Powell
25976: PPUSH
25977: CALL_OW 104
// end ; end ;
25981: PPOPN 2
25983: END
// every 0 0$5 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
25984: LD_INT 23
25986: PPUSH
25987: LD_INT 22
25989: PUSH
25990: LD_INT 1
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 21
25999: PUSH
26000: LD_INT 3
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PPUSH
26011: CALL_OW 70
26015: PUSH
26016: LD_INT 23
26018: PPUSH
26019: LD_INT 22
26021: PUSH
26022: LD_INT 1
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 21
26031: PUSH
26032: LD_INT 2
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PPUSH
26043: CALL_OW 70
26047: OR
26048: PUSH
26049: LD_INT 1
26051: PPUSH
26052: LD_INT 2
26054: PPUSH
26055: CALL_OW 81
26059: PUSH
26060: LD_INT 1
26062: EQUAL
26063: AND
26064: IFFALSE 26303
26066: GO 26068
26068: DISABLE
// begin if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
26069: LD_INT 23
26071: PPUSH
26072: LD_INT 22
26074: PUSH
26075: LD_INT 1
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 21
26084: PUSH
26085: LD_INT 3
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PPUSH
26096: CALL_OW 70
26100: PUSH
26101: LD_INT 23
26103: PPUSH
26104: LD_INT 22
26106: PUSH
26107: LD_INT 1
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 21
26116: PUSH
26117: LD_INT 2
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PPUSH
26128: CALL_OW 70
26132: OR
26133: PUSH
26134: LD_INT 1
26136: PPUSH
26137: LD_INT 2
26139: PPUSH
26140: CALL_OW 81
26144: PUSH
26145: LD_INT 1
26147: EQUAL
26148: AND
26149: IFFALSE 26158
// Query ( QAttack ) ;
26151: LD_STRING QAttack
26153: PPUSH
26154: CALL_OW 97
// wait ( 0 0$20 ) ;
26158: LD_INT 700
26160: PPUSH
26161: CALL_OW 67
// repeat wait ( 0 0$10 ) ;
26165: LD_INT 350
26167: PPUSH
26168: CALL_OW 67
// if arabianTrait = 1 then
26172: LD_EXP 51
26176: PUSH
26177: LD_INT 1
26179: EQUAL
26180: IFFALSE 26184
// exit ;
26182: GO 26303
// until ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend ;
26184: LD_INT 23
26186: PPUSH
26187: LD_INT 22
26189: PUSH
26190: LD_INT 1
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 21
26199: PUSH
26200: LD_INT 3
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PPUSH
26211: CALL_OW 70
26215: PUSH
26216: LD_INT 23
26218: PPUSH
26219: LD_INT 22
26221: PUSH
26222: LD_INT 1
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 21
26231: PUSH
26232: LD_INT 2
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PPUSH
26243: CALL_OW 70
26247: OR
26248: PUSH
26249: LD_INT 1
26251: PPUSH
26252: LD_INT 2
26254: PPUSH
26255: CALL_OW 81
26259: PUSH
26260: LD_INT 1
26262: EQUAL
26263: AND
26264: IFFALSE 26165
// InGameOn ;
26266: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
26270: LD_INT 73
26272: PPUSH
26273: LD_INT 18
26275: PPUSH
26276: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
26280: LD_EXP 26
26284: PPUSH
26285: LD_STRING D6b-Pow-1
26287: PPUSH
26288: CALL_OW 94
// YouLost ( Powell ) ;
26292: LD_STRING Powell
26294: PPUSH
26295: CALL_OW 104
// InGameOff ;
26299: CALL_OW 9
// end ;
26303: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
26304: LD_VAR 0 1
26308: PPUSH
26309: CALL 45859 0 1
// if unit = Truman then
26313: LD_VAR 0 1
26317: PUSH
26318: LD_EXP 21
26322: EQUAL
26323: IFFALSE 26332
// YouLost ( Powell ) ;
26325: LD_STRING Powell
26327: PPUSH
26328: CALL_OW 104
// if unit = JMM then
26332: LD_VAR 0 1
26336: PUSH
26337: LD_EXP 1
26341: EQUAL
26342: IFFALSE 26351
// YouLost ( JMM ) ;
26344: LD_STRING JMM
26346: PPUSH
26347: CALL_OW 104
// if unit = Khatam then
26351: LD_VAR 0 1
26355: PUSH
26356: LD_EXP 14
26360: EQUAL
26361: IFFALSE 26371
// KhatamStatus = 0 ;
26363: LD_ADDR_EXP 55
26367: PUSH
26368: LD_INT 0
26370: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
26371: LD_VAR 0 1
26375: PPUSH
26376: CALL_OW 255
26380: PUSH
26381: LD_INT 3
26383: EQUAL
26384: PUSH
26385: LD_VAR 0 1
26389: PPUSH
26390: CALL_OW 247
26394: PUSH
26395: LD_INT 3
26397: EQUAL
26398: AND
26399: IFFALSE 27091
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
26401: LD_VAR 0 1
26405: PPUSH
26406: CALL_OW 266
26410: PUSH
26411: LD_INT 31
26413: EQUAL
26414: PUSH
26415: LD_VAR 0 1
26419: PPUSH
26420: CALL_OW 266
26424: PUSH
26425: LD_INT 32
26427: EQUAL
26428: OR
26429: PUSH
26430: LD_VAR 0 1
26434: PPUSH
26435: CALL_OW 266
26439: PUSH
26440: LD_INT 36
26442: EQUAL
26443: OR
26444: PUSH
26445: LD_VAR 0 1
26449: PPUSH
26450: CALL_OW 266
26454: PUSH
26455: LD_INT 0
26457: EQUAL
26458: OR
26459: PUSH
26460: LD_VAR 0 1
26464: PPUSH
26465: CALL_OW 266
26469: PUSH
26470: LD_INT 24
26472: EQUAL
26473: OR
26474: PUSH
26475: LD_VAR 0 1
26479: PPUSH
26480: CALL_OW 266
26484: PUSH
26485: LD_INT 17
26487: EQUAL
26488: OR
26489: PUSH
26490: LD_VAR 0 1
26494: PPUSH
26495: CALL_OW 266
26499: PUSH
26500: LD_INT 25
26502: EQUAL
26503: OR
26504: PUSH
26505: LD_VAR 0 1
26509: PPUSH
26510: CALL_OW 266
26514: PUSH
26515: LD_INT 19
26517: EQUAL
26518: OR
26519: PUSH
26520: LD_VAR 0 1
26524: PPUSH
26525: CALL_OW 266
26529: PUSH
26530: LD_INT 20
26532: EQUAL
26533: OR
26534: PUSH
26535: LD_VAR 0 1
26539: PPUSH
26540: CALL_OW 266
26544: PUSH
26545: LD_INT 18
26547: EQUAL
26548: OR
26549: PUSH
26550: LD_VAR 0 1
26554: PPUSH
26555: CALL_OW 266
26559: PUSH
26560: LD_INT 21
26562: EQUAL
26563: OR
26564: PUSH
26565: LD_VAR 0 1
26569: PPUSH
26570: CALL_OW 266
26574: PUSH
26575: LD_INT 23
26577: EQUAL
26578: OR
26579: PUSH
26580: LD_VAR 0 1
26584: PPUSH
26585: CALL_OW 266
26589: PUSH
26590: LD_INT 16
26592: EQUAL
26593: OR
26594: PUSH
26595: LD_VAR 0 1
26599: PPUSH
26600: CALL_OW 266
26604: PUSH
26605: LD_INT 6
26607: EQUAL
26608: OR
26609: PUSH
26610: LD_VAR 0 1
26614: PPUSH
26615: CALL_OW 266
26619: PUSH
26620: LD_INT 29
26622: EQUAL
26623: OR
26624: PUSH
26625: LD_VAR 0 1
26629: PPUSH
26630: CALL_OW 266
26634: PUSH
26635: LD_INT 26
26637: EQUAL
26638: OR
26639: PUSH
26640: LD_VAR 0 1
26644: PPUSH
26645: CALL_OW 266
26649: PUSH
26650: LD_INT 30
26652: EQUAL
26653: OR
26654: PUSH
26655: LD_VAR 0 1
26659: PPUSH
26660: CALL_OW 266
26664: PUSH
26665: LD_INT 28
26667: EQUAL
26668: OR
26669: PUSH
26670: LD_VAR 0 1
26674: PPUSH
26675: CALL_OW 266
26679: PUSH
26680: LD_INT 27
26682: EQUAL
26683: OR
26684: PUSH
26685: LD_VAR 0 1
26689: PPUSH
26690: CALL_OW 266
26694: PUSH
26695: LD_INT 33
26697: EQUAL
26698: OR
26699: PUSH
26700: LD_VAR 0 1
26704: PPUSH
26705: CALL_OW 266
26709: PUSH
26710: LD_INT 2
26712: EQUAL
26713: OR
26714: PUSH
26715: LD_VAR 0 1
26719: PPUSH
26720: CALL_OW 266
26724: PUSH
26725: LD_INT 4
26727: EQUAL
26728: OR
26729: IFFALSE 26815
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
26731: LD_ADDR_EXP 44
26735: PUSH
26736: LD_EXP 44
26740: PUSH
26741: LD_VAR 0 1
26745: PPUSH
26746: CALL_OW 266
26750: ADD
26751: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26752: LD_ADDR_EXP 44
26756: PUSH
26757: LD_EXP 44
26761: PUSH
26762: LD_VAR 0 1
26766: PPUSH
26767: CALL_OW 250
26771: ADD
26772: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26773: LD_ADDR_EXP 44
26777: PUSH
26778: LD_EXP 44
26782: PUSH
26783: LD_VAR 0 1
26787: PPUSH
26788: CALL_OW 251
26792: ADD
26793: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26794: LD_ADDR_EXP 44
26798: PUSH
26799: LD_EXP 44
26803: PUSH
26804: LD_VAR 0 1
26808: PPUSH
26809: CALL_OW 254
26813: ADD
26814: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
26815: LD_VAR 0 1
26819: PPUSH
26820: CALL_OW 266
26824: PUSH
26825: LD_INT 1
26827: EQUAL
26828: IFFALSE 26907
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
26830: LD_ADDR_EXP 44
26834: PUSH
26835: LD_EXP 44
26839: PUSH
26840: LD_INT 0
26842: ADD
26843: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26844: LD_ADDR_EXP 44
26848: PUSH
26849: LD_EXP 44
26853: PUSH
26854: LD_VAR 0 1
26858: PPUSH
26859: CALL_OW 250
26863: ADD
26864: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26865: LD_ADDR_EXP 44
26869: PUSH
26870: LD_EXP 44
26874: PUSH
26875: LD_VAR 0 1
26879: PPUSH
26880: CALL_OW 251
26884: ADD
26885: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26886: LD_ADDR_EXP 44
26890: PUSH
26891: LD_EXP 44
26895: PUSH
26896: LD_VAR 0 1
26900: PPUSH
26901: CALL_OW 254
26905: ADD
26906: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
26907: LD_VAR 0 1
26911: PPUSH
26912: CALL_OW 266
26916: PUSH
26917: LD_INT 3
26919: EQUAL
26920: IFFALSE 26999
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
26922: LD_ADDR_EXP 44
26926: PUSH
26927: LD_EXP 44
26931: PUSH
26932: LD_INT 2
26934: ADD
26935: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26936: LD_ADDR_EXP 44
26940: PUSH
26941: LD_EXP 44
26945: PUSH
26946: LD_VAR 0 1
26950: PPUSH
26951: CALL_OW 250
26955: ADD
26956: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26957: LD_ADDR_EXP 44
26961: PUSH
26962: LD_EXP 44
26966: PUSH
26967: LD_VAR 0 1
26971: PPUSH
26972: CALL_OW 251
26976: ADD
26977: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26978: LD_ADDR_EXP 44
26982: PUSH
26983: LD_EXP 44
26987: PUSH
26988: LD_VAR 0 1
26992: PPUSH
26993: CALL_OW 254
26997: ADD
26998: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
26999: LD_VAR 0 1
27003: PPUSH
27004: CALL_OW 266
27008: PUSH
27009: LD_INT 5
27011: EQUAL
27012: IFFALSE 27091
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
27014: LD_ADDR_EXP 44
27018: PUSH
27019: LD_EXP 44
27023: PUSH
27024: LD_INT 4
27026: ADD
27027: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
27028: LD_ADDR_EXP 44
27032: PUSH
27033: LD_EXP 44
27037: PUSH
27038: LD_VAR 0 1
27042: PPUSH
27043: CALL_OW 250
27047: ADD
27048: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
27049: LD_ADDR_EXP 44
27053: PUSH
27054: LD_EXP 44
27058: PUSH
27059: LD_VAR 0 1
27063: PPUSH
27064: CALL_OW 251
27068: ADD
27069: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
27070: LD_ADDR_EXP 44
27074: PUSH
27075: LD_EXP 44
27079: PUSH
27080: LD_VAR 0 1
27084: PPUSH
27085: CALL_OW 254
27089: ADD
27090: ST_TO_ADDR
// end ; end ; if ruMech and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
27091: LD_EXP 53
27095: PUSH
27096: LD_VAR 0 1
27100: PPUSH
27101: CALL_OW 257
27105: PUSH
27106: LD_INT 3
27108: EQUAL
27109: AND
27110: PUSH
27111: LD_VAR 0 1
27115: PPUSH
27116: CALL_OW 255
27120: PUSH
27121: LD_INT 3
27123: EQUAL
27124: AND
27125: PUSH
27126: LD_EXP 37
27130: PPUSH
27131: CALL_OW 302
27135: AND
27136: PUSH
27137: LD_EXP 37
27141: PPUSH
27142: CALL_OW 255
27146: PUSH
27147: LD_INT 3
27149: EQUAL
27150: AND
27151: IFFALSE 27235
// begin ruMech := ruMech - 1 ;
27153: LD_ADDR_EXP 53
27157: PUSH
27158: LD_EXP 53
27162: PUSH
27163: LD_INT 1
27165: MINUS
27166: ST_TO_ADDR
// uc_side = 3 ;
27167: LD_ADDR_OWVAR 20
27171: PUSH
27172: LD_INT 3
27174: ST_TO_ADDR
// uc_nation = 3 ;
27175: LD_ADDR_OWVAR 21
27179: PUSH
27180: LD_INT 3
27182: ST_TO_ADDR
// hc_gallery :=  ;
27183: LD_ADDR_OWVAR 33
27187: PUSH
27188: LD_STRING 
27190: ST_TO_ADDR
// hc_name :=  ;
27191: LD_ADDR_OWVAR 26
27195: PUSH
27196: LD_STRING 
27198: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
27199: LD_INT 0
27201: PPUSH
27202: LD_EXP 38
27206: PPUSH
27207: LD_EXP 39
27211: PPUSH
27212: CALL_OW 12
27216: PPUSH
27217: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
27221: CALL_OW 44
27225: PPUSH
27226: LD_EXP 37
27230: PPUSH
27231: CALL_OW 52
// end ; end ;
27235: PPOPN 1
27237: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
27238: LD_VAR 0 1
27242: PPUSH
27243: LD_VAR 0 2
27247: PPUSH
27248: CALL 45979 0 2
// end ;
27252: PPOPN 2
27254: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
27255: LD_ADDR_OWVAR 57
27259: PUSH
27260: LD_INT 0
27262: ST_TO_ADDR
// fastEnd = 1 ;
27263: LD_ADDR_EXP 65
27267: PUSH
27268: LD_INT 1
27270: ST_TO_ADDR
// FinishMission ;
27271: CALL 28458 0 0
// end ;
27275: PPOPN 1
27277: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
27278: LD_VAR 0 1
27282: PPUSH
27283: CALL 45963 0 1
// end ; end_of_file
27287: PPOPN 1
27289: END
// export function CreateNature ; var i , un ; begin
27290: LD_INT 0
27292: PPUSH
27293: PPUSH
27294: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
27295: LD_ADDR_VAR 0 2
27299: PUSH
27300: DOUBLE
27301: LD_INT 1
27303: DEC
27304: ST_TO_ADDR
27305: LD_OWVAR 67
27309: PUSH
27310: LD_INT 1
27312: PPUSH
27313: LD_INT 5
27315: PPUSH
27316: CALL_OW 12
27320: PLUS
27321: PUSH
27322: FOR_TO
27323: IFFALSE 27468
// begin hc_sex = sex_male ;
27325: LD_ADDR_OWVAR 27
27329: PUSH
27330: LD_INT 1
27332: ST_TO_ADDR
// uc_side = 0 ;
27333: LD_ADDR_OWVAR 20
27337: PUSH
27338: LD_INT 0
27340: ST_TO_ADDR
// uc_nation = nation_nature ;
27341: LD_ADDR_OWVAR 21
27345: PUSH
27346: LD_INT 0
27348: ST_TO_ADDR
// hc_class = class_apeman ;
27349: LD_ADDR_OWVAR 28
27353: PUSH
27354: LD_INT 12
27356: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
27357: LD_ADDR_OWVAR 31
27361: PUSH
27362: LD_INT 2
27364: PPUSH
27365: LD_INT 7
27367: PPUSH
27368: CALL_OW 12
27372: PUSH
27373: LD_OWVAR 67
27377: PLUS
27378: PUSH
27379: LD_INT 2
27381: PPUSH
27382: LD_INT 10
27384: PPUSH
27385: CALL_OW 12
27389: PUSH
27390: LD_INT 2
27392: PPUSH
27393: LD_INT 10
27395: PPUSH
27396: CALL_OW 12
27400: PUSH
27401: LD_INT 2
27403: PPUSH
27404: LD_INT 10
27406: PPUSH
27407: CALL_OW 12
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27418: LD_ADDR_OWVAR 35
27422: PUSH
27423: LD_INT 5
27425: NEG
27426: PPUSH
27427: LD_INT 5
27429: PPUSH
27430: CALL_OW 12
27434: PUSH
27435: LD_OWVAR 67
27439: MUL
27440: ST_TO_ADDR
// un = CreateHuman ;
27441: LD_ADDR_VAR 0 3
27445: PUSH
27446: CALL_OW 44
27450: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
27451: LD_VAR 0 3
27455: PPUSH
27456: LD_INT 5
27458: PPUSH
27459: LD_INT 0
27461: PPUSH
27462: CALL_OW 49
// end ;
27466: GO 27322
27468: POP
27469: POP
// for i = 1 to Difficulty + 2 do
27470: LD_ADDR_VAR 0 2
27474: PUSH
27475: DOUBLE
27476: LD_INT 1
27478: DEC
27479: ST_TO_ADDR
27480: LD_OWVAR 67
27484: PUSH
27485: LD_INT 2
27487: PLUS
27488: PUSH
27489: FOR_TO
27490: IFFALSE 27599
// begin hc_sex = sex_male ;
27492: LD_ADDR_OWVAR 27
27496: PUSH
27497: LD_INT 1
27499: ST_TO_ADDR
// uc_side = 0 ;
27500: LD_ADDR_OWVAR 20
27504: PUSH
27505: LD_INT 0
27507: ST_TO_ADDR
// uc_nation = nation_nature ;
27508: LD_ADDR_OWVAR 21
27512: PUSH
27513: LD_INT 0
27515: ST_TO_ADDR
// hc_class = class_tiger ;
27516: LD_ADDR_OWVAR 28
27520: PUSH
27521: LD_INT 14
27523: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27524: LD_ADDR_OWVAR 31
27528: PUSH
27529: LD_EXP 39
27533: PUSH
27534: LD_INT 0
27536: PUSH
27537: LD_INT 0
27539: PUSH
27540: LD_INT 0
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27549: LD_ADDR_OWVAR 35
27553: PUSH
27554: LD_INT 5
27556: NEG
27557: PPUSH
27558: LD_INT 5
27560: PPUSH
27561: CALL_OW 12
27565: PUSH
27566: LD_OWVAR 67
27570: MUL
27571: ST_TO_ADDR
// un = CreateHuman ;
27572: LD_ADDR_VAR 0 3
27576: PUSH
27577: CALL_OW 44
27581: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27582: LD_VAR 0 3
27586: PPUSH
27587: LD_INT 6
27589: PPUSH
27590: LD_INT 0
27592: PPUSH
27593: CALL_OW 49
// end ;
27597: GO 27489
27599: POP
27600: POP
// for i = 1 to rand ( 3 , 4 ) do
27601: LD_ADDR_VAR 0 2
27605: PUSH
27606: DOUBLE
27607: LD_INT 1
27609: DEC
27610: ST_TO_ADDR
27611: LD_INT 3
27613: PPUSH
27614: LD_INT 4
27616: PPUSH
27617: CALL_OW 12
27621: PUSH
27622: FOR_TO
27623: IFFALSE 27717
// begin hc_sex = sex_male ;
27625: LD_ADDR_OWVAR 27
27629: PUSH
27630: LD_INT 1
27632: ST_TO_ADDR
// uc_side = 0 ;
27633: LD_ADDR_OWVAR 20
27637: PUSH
27638: LD_INT 0
27640: ST_TO_ADDR
// uc_nation = nation_nature ;
27641: LD_ADDR_OWVAR 21
27645: PUSH
27646: LD_INT 0
27648: ST_TO_ADDR
// hc_class = 18 ;
27649: LD_ADDR_OWVAR 28
27653: PUSH
27654: LD_INT 18
27656: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27657: LD_ADDR_OWVAR 31
27661: PUSH
27662: LD_EXP 39
27666: PUSH
27667: LD_INT 0
27669: PUSH
27670: LD_INT 0
27672: PUSH
27673: LD_INT 0
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: ST_TO_ADDR
// hc_agressivity = 0 ;
27682: LD_ADDR_OWVAR 35
27686: PUSH
27687: LD_INT 0
27689: ST_TO_ADDR
// un = CreateHuman ;
27690: LD_ADDR_VAR 0 3
27694: PUSH
27695: CALL_OW 44
27699: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27700: LD_VAR 0 3
27704: PPUSH
27705: LD_INT 6
27707: PPUSH
27708: LD_INT 0
27710: PPUSH
27711: CALL_OW 49
// end ;
27715: GO 27622
27717: POP
27718: POP
// end ; end_of_file
27719: LD_VAR 0 1
27723: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
27724: LD_EXP 48
27728: PUSH
27729: LD_INT 1
27731: EQUAL
27732: IFFALSE 27827
27734: GO 27736
27736: DISABLE
// begin wait ( 0 0$10 ) ;
27737: LD_INT 350
27739: PPUSH
27740: CALL_OW 67
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 , 8 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
27744: LD_INT 7
27746: PPUSH
27747: LD_INT 5
27749: PPUSH
27750: LD_INT 4
27752: PUSH
27753: LD_INT 5
27755: PUSH
27756: LD_INT 6
27758: PUSH
27759: LD_INT 8
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: PUSH
27768: LD_OWVAR 67
27772: ARRAY
27773: PPUSH
27774: LD_EXP 38
27778: PPUSH
27779: LD_EXP 39
27783: PPUSH
27784: CALL_OW 12
27788: PPUSH
27789: LD_INT 2
27791: PPUSH
27792: LD_INT 1
27794: PPUSH
27795: LD_INT 1
27797: PPUSH
27798: EMPTY
27799: PPUSH
27800: LD_INT 25
27802: PUSH
27803: LD_INT 26
27805: PUSH
27806: LD_INT 27
27808: PUSH
27809: LD_INT 28
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: PPUSH
27818: EMPTY
27819: PPUSH
27820: LD_INT 1
27822: PPUSH
27823: CALL 17584 0 11
// end ;
27827: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27828: LD_EXP 48
27832: PUSH
27833: LD_INT 1
27835: EQUAL
27836: IFFALSE 27928
27838: GO 27840
27840: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 , 9 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
27841: LD_INT 5
27843: PPUSH
27844: LD_INT 2
27846: PPUSH
27847: LD_INT 5
27849: PUSH
27850: LD_INT 6
27852: PUSH
27853: LD_INT 8
27855: PUSH
27856: LD_INT 9
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: PUSH
27865: LD_OWVAR 67
27869: ARRAY
27870: PPUSH
27871: LD_INT 0
27873: PPUSH
27874: LD_INT 0
27876: PPUSH
27877: LD_INT 2
27879: PUSH
27880: LD_INT 4
27882: PUSH
27883: LD_INT 5
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: LIST
27890: PUSH
27891: LD_OWVAR 67
27895: ARRAY
27896: PPUSH
27897: LD_INT 0
27899: PPUSH
27900: LD_EXP 38
27904: PPUSH
27905: LD_EXP 39
27909: PPUSH
27910: CALL_OW 12
27914: PPUSH
27915: LD_INT 7
27917: PPUSH
27918: LD_INT 9
27920: PPUSH
27921: LD_INT 1
27923: PPUSH
27924: CALL 19288 0 11
27928: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27929: LD_EXP 48
27933: PUSH
27934: LD_INT 1
27936: EQUAL
27937: IFFALSE 27946
27939: GO 27941
27941: DISABLE
// PrepareArabianSheik ;
27942: CALL 4875 0 0
27946: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27947: LD_EXP 31
27951: PUSH
27952: LD_EXP 66
27956: PUSH
27957: LD_INT 1
27959: EQUAL
27960: AND
27961: IFFALSE 28030
27963: GO 27965
27965: DISABLE
// begin enable ;
27966: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
27967: LD_INT 6
27969: PPUSH
27970: LD_INT 3
27972: PPUSH
27973: LD_EXP 62
27977: PPUSH
27978: LD_INT 0
27980: PPUSH
27981: LD_OWVAR 67
27985: PPUSH
27986: LD_INT 0
27988: PPUSH
27989: LD_EXP 62
27993: PUSH
27994: LD_INT 3
27996: DIV
27997: PUSH
27998: LD_INT 1
28000: PLUS
28001: PPUSH
28002: LD_EXP 38
28006: PPUSH
28007: LD_EXP 39
28011: PPUSH
28012: CALL_OW 12
28016: PPUSH
28017: LD_INT 17
28019: PPUSH
28020: LD_INT 18
28022: PPUSH
28023: LD_INT 1
28025: PPUSH
28026: CALL 19288 0 11
// end ;
28030: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
28031: LD_EXP 31
28035: PUSH
28036: LD_EXP 66
28040: PUSH
28041: LD_INT 1
28043: EQUAL
28044: AND
28045: IFFALSE 28134
28047: GO 28049
28049: DISABLE
// begin enable ;
28050: ENABLE
// SayRadio ( AmScout , D4-FSol1-2 ) ;
28051: LD_EXP 18
28055: PPUSH
28056: LD_STRING D4-FSol1-2
28058: PPUSH
28059: CALL_OW 94
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
28063: LD_INT 17
28065: PPUSH
28066: LD_INT 6
28068: PPUSH
28069: LD_EXP 61
28073: PPUSH
28074: LD_EXP 38
28078: PPUSH
28079: LD_EXP 39
28083: PPUSH
28084: CALL_OW 12
28088: PPUSH
28089: LD_INT 3
28091: PPUSH
28092: LD_INT 1
28094: PPUSH
28095: LD_INT 3
28097: PUSH
28098: LD_INT 3
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PPUSH
28105: LD_INT 43
28107: PUSH
28108: LD_INT 44
28110: PUSH
28111: LD_INT 45
28113: PUSH
28114: LD_INT 46
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: PPUSH
28123: EMPTY
28124: PPUSH
28125: EMPTY
28126: PPUSH
28127: LD_INT 1
28129: PPUSH
28130: CALL 17584 0 11
// end ;
28134: END
// every 10 10$00 trigger joinEpsilon do
28135: LD_EXP 31
28139: IFFALSE 28193
28141: GO 28143
28143: DISABLE
// begin enable ;
28144: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
28145: LD_ADDR_EXP 61
28149: PUSH
28150: LD_EXP 61
28154: PUSH
28155: LD_INT 1
28157: PPUSH
28158: LD_OWVAR 67
28162: PPUSH
28163: CALL_OW 12
28167: PLUS
28168: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
28169: LD_ADDR_EXP 62
28173: PUSH
28174: LD_EXP 62
28178: PUSH
28179: LD_INT 1
28181: PPUSH
28182: LD_OWVAR 67
28186: PPUSH
28187: CALL_OW 12
28191: PLUS
28192: ST_TO_ADDR
// end ;
28193: END
// every 21 21$0 trigger attackAvalaible = 1 do
28194: LD_EXP 66
28198: PUSH
28199: LD_INT 1
28201: EQUAL
28202: IFFALSE 28215
28204: GO 28206
28206: DISABLE
// attackAvalaible = 0 ; end_of_file
28207: LD_ADDR_EXP 66
28211: PUSH
28212: LD_INT 0
28214: ST_TO_ADDR
28215: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
28216: LD_INT 54
28218: PPUSH
28219: LD_INT 1
28221: PPUSH
28222: CALL_OW 321
28226: PUSH
28227: LD_INT 2
28229: EQUAL
28230: PUSH
28231: LD_INT 55
28233: PPUSH
28234: LD_INT 1
28236: PPUSH
28237: CALL_OW 321
28241: PUSH
28242: LD_INT 2
28244: EQUAL
28245: AND
28246: PUSH
28247: LD_INT 21
28249: PPUSH
28250: LD_INT 1
28252: PPUSH
28253: CALL_OW 321
28257: PUSH
28258: LD_INT 2
28260: EQUAL
28261: AND
28262: PUSH
28263: LD_INT 22
28265: PPUSH
28266: LD_INT 1
28268: PPUSH
28269: CALL_OW 321
28273: PUSH
28274: LD_INT 2
28276: EQUAL
28277: AND
28278: PUSH
28279: LD_INT 12
28281: PPUSH
28282: LD_INT 1
28284: PPUSH
28285: CALL_OW 321
28289: PUSH
28290: LD_INT 1
28292: EQUAL
28293: PUSH
28294: LD_INT 32
28296: PPUSH
28297: LD_INT 1
28299: PPUSH
28300: CALL_OW 321
28304: PUSH
28305: LD_INT 1
28307: EQUAL
28308: OR
28309: PUSH
28310: EMPTY
28311: LIST
28312: AND
28313: PUSH
28314: LD_EXP 50
28318: PUSH
28319: LD_INT 1
28321: EQUAL
28322: AND
28323: PUSH
28324: LD_INT 22
28326: PUSH
28327: LD_INT 3
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 21
28336: PUSH
28337: LD_INT 1
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PPUSH
28348: CALL_OW 69
28352: PUSH
28353: LD_INT 0
28355: EQUAL
28356: AND
28357: IFFALSE 28413
28359: GO 28361
28361: DISABLE
// begin case query ( QEndMission ) of 1 :
28362: LD_STRING QEndMission
28364: PPUSH
28365: CALL_OW 97
28369: PUSH
28370: LD_INT 1
28372: DOUBLE
28373: EQUAL
28374: IFTRUE 28378
28376: GO 28389
28378: POP
// begin end_the_mission_allowed = true ;
28379: LD_ADDR_OWVAR 57
28383: PUSH
28384: LD_INT 1
28386: ST_TO_ADDR
// end ; 2 :
28387: GO 28413
28389: LD_INT 2
28391: DOUBLE
28392: EQUAL
28393: IFTRUE 28397
28395: GO 28412
28397: POP
// begin fastEnd = 1 ;
28398: LD_ADDR_EXP 65
28402: PUSH
28403: LD_INT 1
28405: ST_TO_ADDR
// FinishMission ;
28406: CALL 28458 0 0
// end ; end ;
28410: GO 28413
28412: POP
// end ;
28413: END
// every 0 0$1 trigger spawnRussians and not ruDepotConstructed and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
28414: LD_EXP 60
28418: PUSH
28419: LD_EXP 59
28423: NOT
28424: AND
28425: PUSH
28426: LD_INT 22
28428: PUSH
28429: LD_INT 3
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PPUSH
28436: CALL_OW 69
28440: PUSH
28441: LD_INT 0
28443: EQUAL
28444: AND
28445: IFFALSE 28457
28447: GO 28449
28449: DISABLE
// SetAchievement ( ACH_TACT ) ;
28450: LD_STRING ACH_TACT
28452: PPUSH
28453: CALL_OW 543
28457: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
28458: LD_INT 0
28460: PPUSH
28461: PPUSH
28462: PPUSH
28463: PPUSH
// if not snipersTrained then
28464: LD_EXP 64
28468: NOT
28469: IFFALSE 28478
// SetAchievement ( ACH_SNIPER ) ;
28471: LD_STRING ACH_SNIPER
28473: PPUSH
28474: CALL_OW 543
// m1 := false ;
28478: LD_ADDR_VAR 0 2
28482: PUSH
28483: LD_INT 0
28485: ST_TO_ADDR
// m2 := false ;
28486: LD_ADDR_VAR 0 3
28490: PUSH
28491: LD_INT 0
28493: ST_TO_ADDR
// m3 := false ;
28494: LD_ADDR_VAR 0 4
28498: PUSH
28499: LD_INT 0
28501: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
28502: LD_EXP 55
28506: PPUSH
28507: LD_STRING 10_KhatamStatus_1
28509: PPUSH
28510: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
28514: LD_EXP 54
28518: PPUSH
28519: LD_STRING 10_GensherEscape_1
28521: PPUSH
28522: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
28526: LD_INT 12
28528: PPUSH
28529: LD_INT 1
28531: PPUSH
28532: CALL_OW 321
28536: PUSH
28537: LD_INT 2
28539: EQUAL
28540: IFFALSE 28562
// begin AddMedal ( sights , 1 ) ;
28542: LD_STRING sights
28544: PPUSH
28545: LD_INT 1
28547: PPUSH
28548: CALL_OW 101
// m1 := true ;
28552: LD_ADDR_VAR 0 2
28556: PUSH
28557: LD_INT 1
28559: ST_TO_ADDR
// end else
28560: GO 28573
// begin AddMedal ( sights , - 1 ) ;
28562: LD_STRING sights
28564: PPUSH
28565: LD_INT 1
28567: NEG
28568: PPUSH
28569: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
28573: LD_INT 32
28575: PPUSH
28576: LD_INT 1
28578: PPUSH
28579: CALL_OW 321
28583: PUSH
28584: LD_INT 2
28586: EQUAL
28587: IFFALSE 28609
// begin AddMedal ( computers , 1 ) ;
28589: LD_STRING computers
28591: PPUSH
28592: LD_INT 1
28594: PPUSH
28595: CALL_OW 101
// m2 := true ;
28599: LD_ADDR_VAR 0 3
28603: PUSH
28604: LD_INT 1
28606: ST_TO_ADDR
// end else
28607: GO 28620
// begin AddMedal ( computers , - 1 ) ;
28609: LD_STRING computers
28611: PPUSH
28612: LD_INT 1
28614: NEG
28615: PPUSH
28616: CALL_OW 101
// end ; if arabianEscape = 0 then
28620: LD_EXP 49
28624: PUSH
28625: LD_INT 0
28627: EQUAL
28628: IFFALSE 28660
// begin AddMedal ( renegades , 2 ) ;
28630: LD_STRING renegades
28632: PPUSH
28633: LD_INT 2
28635: PPUSH
28636: CALL_OW 101
// m3 := true ;
28640: LD_ADDR_VAR 0 4
28644: PUSH
28645: LD_INT 1
28647: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
28648: LD_INT 0
28650: PPUSH
28651: LD_STRING 10_ScientistsEscape_1
28653: PPUSH
28654: CALL_OW 39
// end else
28658: GO 28671
// begin AddMedal ( renegades , - 1 ) ;
28660: LD_STRING renegades
28662: PPUSH
28663: LD_INT 1
28665: NEG
28666: PPUSH
28667: CALL_OW 101
// end ; SaveEpsilonBase ;
28671: CALL 29486 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
28675: LD_VAR 0 2
28679: PUSH
28680: LD_VAR 0 3
28684: AND
28685: PUSH
28686: LD_VAR 0 4
28690: AND
28691: PUSH
28692: LD_OWVAR 67
28696: PUSH
28697: LD_INT 3
28699: GREATEREQUAL
28700: AND
28701: IFFALSE 28713
// SetAchievementEX ( ACH_AMER , 10 ) ;
28703: LD_STRING ACH_AMER
28705: PPUSH
28706: LD_INT 10
28708: PPUSH
28709: CALL_OW 564
// if tick <= 40 40$00 then
28713: LD_OWVAR 1
28717: PUSH
28718: LD_INT 84000
28720: LESSEQUAL
28721: IFFALSE 28737
// begin wait ( 3 ) ;
28723: LD_INT 3
28725: PPUSH
28726: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
28730: LD_STRING ACH_ASPEED_10
28732: PPUSH
28733: CALL_OW 543
// end ; GiveMedals ( Main ) ;
28737: LD_STRING Main
28739: PPUSH
28740: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
28744: LD_INT 22
28746: PUSH
28747: LD_INT 1
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 23
28756: PUSH
28757: LD_INT 1
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 21
28766: PUSH
28767: LD_INT 1
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 2
28776: PUSH
28777: LD_INT 25
28779: PUSH
28780: LD_INT 1
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 25
28789: PUSH
28790: LD_INT 2
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 25
28799: PUSH
28800: LD_INT 3
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 25
28809: PUSH
28810: LD_INT 4
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 25
28819: PUSH
28820: LD_INT 5
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 25
28829: PUSH
28830: LD_INT 8
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: PPUSH
28852: CALL_OW 69
28856: PPUSH
28857: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
28861: LD_EXP 1
28865: PPUSH
28866: LD_EXP 56
28870: PUSH
28871: LD_STRING JMM
28873: STR
28874: PPUSH
28875: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
28879: LD_EXP 2
28883: PPUSH
28884: LD_EXP 56
28888: PUSH
28889: LD_STRING Brown
28891: STR
28892: PPUSH
28893: CALL 11768 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
28897: LD_EXP 3
28901: PPUSH
28902: LD_EXP 56
28906: PUSH
28907: LD_STRING Donaldson
28909: STR
28910: PPUSH
28911: CALL 11768 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
28915: LD_EXP 4
28919: PPUSH
28920: LD_EXP 56
28924: PUSH
28925: LD_STRING Bobby
28927: STR
28928: PPUSH
28929: CALL 11768 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
28933: LD_EXP 5
28937: PPUSH
28938: LD_EXP 56
28942: PUSH
28943: LD_STRING Cyrus
28945: STR
28946: PPUSH
28947: CALL 11768 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
28951: LD_EXP 6
28955: PPUSH
28956: LD_EXP 56
28960: PUSH
28961: LD_STRING Lisa
28963: STR
28964: PPUSH
28965: CALL 11768 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
28969: LD_EXP 7
28973: PPUSH
28974: LD_EXP 56
28978: PUSH
28979: LD_STRING Frank
28981: STR
28982: PPUSH
28983: CALL 11768 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
28987: LD_EXP 8
28991: PPUSH
28992: LD_EXP 56
28996: PUSH
28997: LD_STRING Kikuchi
28999: STR
29000: PPUSH
29001: CALL 11768 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
29005: LD_EXP 9
29009: PPUSH
29010: LD_EXP 56
29014: PUSH
29015: LD_STRING Houten
29017: STR
29018: PPUSH
29019: CALL 11768 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
29023: LD_EXP 10
29027: PPUSH
29028: LD_EXP 56
29032: PUSH
29033: LD_STRING Gary
29035: STR
29036: PPUSH
29037: CALL 11768 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
29041: LD_EXP 20
29045: PPUSH
29046: LD_EXP 56
29050: PUSH
29051: LD_STRING Cornell
29053: STR
29054: PPUSH
29055: CALL 11768 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
29059: LD_EXP 11
29063: PPUSH
29064: LD_EXP 56
29068: PUSH
29069: LD_STRING Simms
29071: STR
29072: PPUSH
29073: CALL 11768 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
29077: LD_EXP 12
29081: PPUSH
29082: LD_EXP 56
29086: PUSH
29087: LD_STRING Denis
29089: STR
29090: PPUSH
29091: CALL 11768 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
29095: LD_EXP 13
29099: PPUSH
29100: LD_EXP 56
29104: PUSH
29105: LD_STRING Joan
29107: STR
29108: PPUSH
29109: CALL 11768 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
29113: LD_EXP 15
29117: PPUSH
29118: LD_EXP 56
29122: PUSH
29123: LD_STRING Gladstone
29125: STR
29126: PPUSH
29127: CALL 11768 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
29131: LD_EXP 17
29135: PPUSH
29136: LD_EXP 56
29140: PUSH
29141: LD_STRING DeltaDoctor
29143: STR
29144: PPUSH
29145: CALL 11768 0 2
// if IsLive ( Mike ) then
29149: LD_EXP 19
29153: PPUSH
29154: CALL_OW 300
29158: IFFALSE 29178
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
29160: LD_EXP 19
29164: PPUSH
29165: LD_EXP 56
29169: PUSH
29170: LD_STRING Mike
29172: STR
29173: PPUSH
29174: CALL_OW 38
// SaveCharacters ( others09 , 10c_lock ) ;
29178: LD_EXP 24
29182: PPUSH
29183: LD_STRING 10c_lock
29185: PPUSH
29186: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
29190: LD_INT 50
29192: PUSH
29193: EMPTY
29194: LIST
29195: PUSH
29196: LD_INT 22
29198: PUSH
29199: LD_INT 1
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 21
29208: PUSH
29209: LD_INT 1
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 2
29218: PUSH
29219: LD_INT 25
29221: PUSH
29222: LD_INT 1
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 25
29231: PUSH
29232: LD_INT 2
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 25
29241: PUSH
29242: LD_INT 3
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 25
29251: PUSH
29252: LD_INT 4
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 25
29261: PUSH
29262: LD_INT 5
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 25
29271: PUSH
29272: LD_INT 8
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: PPUSH
29294: CALL_OW 69
29298: PUSH
29299: LD_EXP 1
29303: PUSH
29304: LD_EXP 2
29308: PUSH
29309: LD_EXP 3
29313: PUSH
29314: LD_EXP 4
29318: PUSH
29319: LD_EXP 5
29323: PUSH
29324: LD_EXP 6
29328: PUSH
29329: LD_EXP 7
29333: PUSH
29334: LD_EXP 15
29338: PUSH
29339: LD_EXP 8
29343: PUSH
29344: LD_EXP 12
29348: PUSH
29349: LD_EXP 13
29353: PUSH
29354: LD_EXP 9
29358: PUSH
29359: LD_EXP 11
29363: PUSH
29364: LD_EXP 10
29368: PUSH
29369: LD_EXP 17
29373: PUSH
29374: LD_EXP 20
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: DIFF
29397: PPUSH
29398: LD_STRING 10_other_survivors
29400: PPUSH
29401: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
29405: LD_INT 50
29407: PUSH
29408: EMPTY
29409: LIST
29410: PUSH
29411: LD_INT 22
29413: PUSH
29414: LD_INT 1
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 21
29423: PUSH
29424: LD_INT 1
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 2
29433: PUSH
29434: LD_INT 25
29436: PUSH
29437: LD_INT 16
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 25
29446: PUSH
29447: LD_INT 12
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: LIST
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: PPUSH
29465: CALL_OW 69
29469: PPUSH
29470: LD_STRING 10_ape
29472: PPUSH
29473: CALL_OW 38
// YouWin ;
29477: CALL_OW 103
// end ;
29481: LD_VAR 0 1
29485: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
29486: LD_INT 0
29488: PPUSH
29489: PPUSH
29490: PPUSH
29491: PPUSH
// epsilonBase = [ ] ;
29492: LD_ADDR_VAR 0 2
29496: PUSH
29497: EMPTY
29498: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
29499: LD_ADDR_VAR 0 3
29503: PUSH
29504: LD_INT 22
29506: PUSH
29507: LD_INT 1
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 21
29516: PUSH
29517: LD_INT 3
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 50
29526: PUSH
29527: EMPTY
29528: LIST
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: LIST
29534: PPUSH
29535: CALL_OW 69
29539: ST_TO_ADDR
// for i in buildings do
29540: LD_ADDR_VAR 0 4
29544: PUSH
29545: LD_VAR 0 3
29549: PUSH
29550: FOR_IN
29551: IFFALSE 30003
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
29553: LD_VAR 0 4
29557: PPUSH
29558: CALL_OW 266
29562: PUSH
29563: LD_INT 6
29565: PUSH
29566: LD_INT 7
29568: PUSH
29569: LD_INT 8
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: LIST
29576: IN
29577: IFFALSE 29691
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
29579: LD_ADDR_VAR 0 2
29583: PUSH
29584: LD_VAR 0 2
29588: PUSH
29589: LD_VAR 0 4
29593: PPUSH
29594: CALL_OW 266
29598: PUSH
29599: LD_VAR 0 4
29603: PPUSH
29604: CALL_OW 250
29608: PUSH
29609: LD_VAR 0 4
29613: PPUSH
29614: CALL_OW 251
29618: PUSH
29619: LD_VAR 0 4
29623: PPUSH
29624: CALL_OW 254
29628: PUSH
29629: LD_VAR 0 4
29633: PPUSH
29634: CALL_OW 267
29638: PUSH
29639: LD_VAR 0 4
29643: PPUSH
29644: CALL_OW 248
29648: PUSH
29649: LD_VAR 0 4
29653: PPUSH
29654: LD_INT 1
29656: PPUSH
29657: CALL_OW 268
29661: PUSH
29662: LD_VAR 0 4
29666: PPUSH
29667: LD_INT 2
29669: PPUSH
29670: CALL_OW 268
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: PUSH
29685: EMPTY
29686: LIST
29687: ADD
29688: ST_TO_ADDR
29689: GO 30001
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
29691: LD_VAR 0 4
29695: PPUSH
29696: CALL_OW 266
29700: PUSH
29701: LD_INT 32
29703: EQUAL
29704: PUSH
29705: LD_VAR 0 4
29709: PPUSH
29710: CALL_OW 266
29714: PUSH
29715: LD_INT 33
29717: EQUAL
29718: OR
29719: IFFALSE 29816
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
29721: LD_ADDR_VAR 0 2
29725: PUSH
29726: LD_VAR 0 2
29730: PUSH
29731: LD_VAR 0 4
29735: PPUSH
29736: CALL_OW 266
29740: PUSH
29741: LD_VAR 0 4
29745: PPUSH
29746: CALL_OW 250
29750: PUSH
29751: LD_VAR 0 4
29755: PPUSH
29756: CALL_OW 251
29760: PUSH
29761: LD_VAR 0 4
29765: PPUSH
29766: CALL_OW 254
29770: PUSH
29771: LD_VAR 0 4
29775: PPUSH
29776: CALL_OW 267
29780: PUSH
29781: LD_VAR 0 4
29785: PPUSH
29786: CALL_OW 248
29790: PUSH
29791: LD_VAR 0 4
29795: PPUSH
29796: CALL_OW 269
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: PUSH
29810: EMPTY
29811: LIST
29812: ADD
29813: ST_TO_ADDR
29814: GO 30001
// if GetBType ( i ) = b_factory then
29816: LD_VAR 0 4
29820: PPUSH
29821: CALL_OW 266
29825: PUSH
29826: LD_INT 3
29828: EQUAL
29829: IFFALSE 29919
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
29831: LD_ADDR_VAR 0 2
29835: PUSH
29836: LD_VAR 0 2
29840: PPUSH
29841: LD_INT 1
29843: PPUSH
29844: LD_VAR 0 4
29848: PPUSH
29849: CALL_OW 266
29853: PUSH
29854: LD_VAR 0 4
29858: PPUSH
29859: CALL_OW 250
29863: PUSH
29864: LD_VAR 0 4
29868: PPUSH
29869: CALL_OW 251
29873: PUSH
29874: LD_VAR 0 4
29878: PPUSH
29879: CALL_OW 254
29883: PUSH
29884: LD_VAR 0 4
29888: PPUSH
29889: CALL_OW 267
29893: PUSH
29894: LD_VAR 0 4
29898: PPUSH
29899: CALL_OW 248
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: PPUSH
29912: CALL_OW 2
29916: ST_TO_ADDR
29917: GO 30001
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
29919: LD_ADDR_VAR 0 2
29923: PUSH
29924: LD_VAR 0 2
29928: PUSH
29929: LD_VAR 0 4
29933: PPUSH
29934: CALL_OW 266
29938: PUSH
29939: LD_VAR 0 4
29943: PPUSH
29944: CALL_OW 250
29948: PUSH
29949: LD_VAR 0 4
29953: PPUSH
29954: CALL_OW 251
29958: PUSH
29959: LD_VAR 0 4
29963: PPUSH
29964: CALL_OW 254
29968: PUSH
29969: LD_VAR 0 4
29973: PPUSH
29974: CALL_OW 267
29978: PUSH
29979: LD_VAR 0 4
29983: PPUSH
29984: CALL_OW 248
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: PUSH
29997: EMPTY
29998: LIST
29999: ADD
30000: ST_TO_ADDR
// end ;
30001: GO 29550
30003: POP
30004: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
30005: LD_VAR 0 2
30009: PPUSH
30010: LD_STRING 10_EpsilonBase
30012: PPUSH
30013: CALL_OW 39
// SaveEnvironment ( epsilonTerrain , 10_EpsilonEnv ) ;
30017: LD_INT 19
30019: PPUSH
30020: LD_STRING 10_EpsilonEnv
30022: PPUSH
30023: CALL 30032 0 2
// end ;
30027: LD_VAR 0 1
30031: RET
// export function SaveEnvironment ( area , saveId ) ; begin
30032: LD_INT 0
30034: PPUSH
// result := ListEnvironmentArea ( area ) ;
30035: LD_ADDR_VAR 0 3
30039: PUSH
30040: LD_VAR 0 1
30044: PPUSH
30045: CALL_OW 353
30049: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
30050: LD_VAR 0 3
30054: PPUSH
30055: LD_VAR 0 2
30059: PPUSH
30060: CALL_OW 39
// end ; end_of_file
30064: LD_VAR 0 3
30068: RET
// every 0 0$01 do var timer ;
30069: GO 30071
30071: DISABLE
30072: LD_INT 0
30074: PPUSH
// begin timer := 0 0$20 ;
30075: LD_ADDR_VAR 0 1
30079: PUSH
30080: LD_INT 700
30082: ST_TO_ADDR
// repeat wait ( timer ) ;
30083: LD_VAR 0 1
30087: PPUSH
30088: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 14 then
30092: LD_EXP 58
30096: PUSH
30097: LD_INT 6
30099: GREATEREQUAL
30100: PUSH
30101: LD_EXP 58
30105: PUSH
30106: LD_INT 14
30108: LESS
30109: AND
30110: IFFALSE 30126
// timer := timer + 0 0$3 ;
30112: LD_ADDR_VAR 0 1
30116: PUSH
30117: LD_VAR 0 1
30121: PUSH
30122: LD_INT 105
30124: PLUS
30125: ST_TO_ADDR
// if cratesSpawned >= 14 then
30126: LD_EXP 58
30130: PUSH
30131: LD_INT 14
30133: GREATEREQUAL
30134: IFFALSE 30150
// timer := timer + 0 0$6 ;
30136: LD_ADDR_VAR 0 1
30140: PUSH
30141: LD_VAR 0 1
30145: PUSH
30146: LD_INT 210
30148: PLUS
30149: ST_TO_ADDR
// if timer > 2 2$00 then
30150: LD_VAR 0 1
30154: PUSH
30155: LD_INT 4200
30157: GREATER
30158: IFFALSE 30168
// timer := 0 0$45 ;
30160: LD_ADDR_VAR 0 1
30164: PUSH
30165: LD_INT 1575
30167: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
30168: LD_INT 1
30170: PPUSH
30171: LD_INT 5
30173: PPUSH
30174: CALL_OW 12
30178: PPUSH
30179: LD_INT 16
30181: PPUSH
30182: LD_INT 1
30184: PPUSH
30185: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
30189: LD_ADDR_EXP 58
30193: PUSH
30194: LD_EXP 58
30198: PUSH
30199: LD_INT 1
30201: PLUS
30202: ST_TO_ADDR
// until false ;
30203: LD_INT 0
30205: IFFALSE 30083
// end ; end_of_file end_of_file
30207: PPOPN 1
30209: END
// every 0 0$1 do
30210: GO 30212
30212: DISABLE
// begin enable ;
30213: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
30214: LD_STRING updateTimer(
30216: PUSH
30217: LD_OWVAR 1
30221: STR
30222: PUSH
30223: LD_STRING );
30225: STR
30226: PPUSH
30227: CALL_OW 559
// end ;
30231: END
// export function SOS_MapStart ( ) ; begin
30232: LD_INT 0
30234: PPUSH
// if streamModeActive then
30235: LD_EXP 71
30239: IFFALSE 30248
// DefineStreamItems ( true ) ;
30241: LD_INT 1
30243: PPUSH
30244: CALL 31902 0 1
// UpdateFactoryWaypoints ( ) ;
30248: CALL 44763 0 0
// UpdateWarehouseGatheringPoints ( ) ;
30252: CALL 45020 0 0
// end ;
30256: LD_VAR 0 1
30260: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30261: LD_INT 0
30263: PPUSH
// if p2 = hack_mode then
30264: LD_VAR 0 2
30268: PUSH
30269: LD_INT 100
30271: EQUAL
30272: IFFALSE 31275
// begin if not StreamModeActive then
30274: LD_EXP 71
30278: NOT
30279: IFFALSE 30289
// StreamModeActive := true ;
30281: LD_ADDR_EXP 71
30285: PUSH
30286: LD_INT 1
30288: ST_TO_ADDR
// if p3 = 0 then
30289: LD_VAR 0 3
30293: PUSH
30294: LD_INT 0
30296: EQUAL
30297: IFFALSE 30303
// InitStreamMode ;
30299: CALL 31438 0 0
// if p3 = 1 then
30303: LD_VAR 0 3
30307: PUSH
30308: LD_INT 1
30310: EQUAL
30311: IFFALSE 30321
// sRocket := true ;
30313: LD_ADDR_EXP 76
30317: PUSH
30318: LD_INT 1
30320: ST_TO_ADDR
// if p3 = 2 then
30321: LD_VAR 0 3
30325: PUSH
30326: LD_INT 2
30328: EQUAL
30329: IFFALSE 30339
// sSpeed := true ;
30331: LD_ADDR_EXP 75
30335: PUSH
30336: LD_INT 1
30338: ST_TO_ADDR
// if p3 = 3 then
30339: LD_VAR 0 3
30343: PUSH
30344: LD_INT 3
30346: EQUAL
30347: IFFALSE 30357
// sEngine := true ;
30349: LD_ADDR_EXP 77
30353: PUSH
30354: LD_INT 1
30356: ST_TO_ADDR
// if p3 = 4 then
30357: LD_VAR 0 3
30361: PUSH
30362: LD_INT 4
30364: EQUAL
30365: IFFALSE 30375
// sSpec := true ;
30367: LD_ADDR_EXP 74
30371: PUSH
30372: LD_INT 1
30374: ST_TO_ADDR
// if p3 = 5 then
30375: LD_VAR 0 3
30379: PUSH
30380: LD_INT 5
30382: EQUAL
30383: IFFALSE 30393
// sLevel := true ;
30385: LD_ADDR_EXP 78
30389: PUSH
30390: LD_INT 1
30392: ST_TO_ADDR
// if p3 = 6 then
30393: LD_VAR 0 3
30397: PUSH
30398: LD_INT 6
30400: EQUAL
30401: IFFALSE 30411
// sArmoury := true ;
30403: LD_ADDR_EXP 79
30407: PUSH
30408: LD_INT 1
30410: ST_TO_ADDR
// if p3 = 7 then
30411: LD_VAR 0 3
30415: PUSH
30416: LD_INT 7
30418: EQUAL
30419: IFFALSE 30429
// sRadar := true ;
30421: LD_ADDR_EXP 80
30425: PUSH
30426: LD_INT 1
30428: ST_TO_ADDR
// if p3 = 8 then
30429: LD_VAR 0 3
30433: PUSH
30434: LD_INT 8
30436: EQUAL
30437: IFFALSE 30447
// sBunker := true ;
30439: LD_ADDR_EXP 81
30443: PUSH
30444: LD_INT 1
30446: ST_TO_ADDR
// if p3 = 9 then
30447: LD_VAR 0 3
30451: PUSH
30452: LD_INT 9
30454: EQUAL
30455: IFFALSE 30465
// sHack := true ;
30457: LD_ADDR_EXP 82
30461: PUSH
30462: LD_INT 1
30464: ST_TO_ADDR
// if p3 = 10 then
30465: LD_VAR 0 3
30469: PUSH
30470: LD_INT 10
30472: EQUAL
30473: IFFALSE 30483
// sFire := true ;
30475: LD_ADDR_EXP 83
30479: PUSH
30480: LD_INT 1
30482: ST_TO_ADDR
// if p3 = 11 then
30483: LD_VAR 0 3
30487: PUSH
30488: LD_INT 11
30490: EQUAL
30491: IFFALSE 30501
// sRefresh := true ;
30493: LD_ADDR_EXP 84
30497: PUSH
30498: LD_INT 1
30500: ST_TO_ADDR
// if p3 = 12 then
30501: LD_VAR 0 3
30505: PUSH
30506: LD_INT 12
30508: EQUAL
30509: IFFALSE 30519
// sExp := true ;
30511: LD_ADDR_EXP 85
30515: PUSH
30516: LD_INT 1
30518: ST_TO_ADDR
// if p3 = 13 then
30519: LD_VAR 0 3
30523: PUSH
30524: LD_INT 13
30526: EQUAL
30527: IFFALSE 30537
// sDepot := true ;
30529: LD_ADDR_EXP 86
30533: PUSH
30534: LD_INT 1
30536: ST_TO_ADDR
// if p3 = 14 then
30537: LD_VAR 0 3
30541: PUSH
30542: LD_INT 14
30544: EQUAL
30545: IFFALSE 30555
// sFlag := true ;
30547: LD_ADDR_EXP 87
30551: PUSH
30552: LD_INT 1
30554: ST_TO_ADDR
// if p3 = 15 then
30555: LD_VAR 0 3
30559: PUSH
30560: LD_INT 15
30562: EQUAL
30563: IFFALSE 30573
// sKamikadze := true ;
30565: LD_ADDR_EXP 95
30569: PUSH
30570: LD_INT 1
30572: ST_TO_ADDR
// if p3 = 16 then
30573: LD_VAR 0 3
30577: PUSH
30578: LD_INT 16
30580: EQUAL
30581: IFFALSE 30591
// sTroll := true ;
30583: LD_ADDR_EXP 96
30587: PUSH
30588: LD_INT 1
30590: ST_TO_ADDR
// if p3 = 17 then
30591: LD_VAR 0 3
30595: PUSH
30596: LD_INT 17
30598: EQUAL
30599: IFFALSE 30609
// sSlow := true ;
30601: LD_ADDR_EXP 97
30605: PUSH
30606: LD_INT 1
30608: ST_TO_ADDR
// if p3 = 18 then
30609: LD_VAR 0 3
30613: PUSH
30614: LD_INT 18
30616: EQUAL
30617: IFFALSE 30627
// sLack := true ;
30619: LD_ADDR_EXP 98
30623: PUSH
30624: LD_INT 1
30626: ST_TO_ADDR
// if p3 = 19 then
30627: LD_VAR 0 3
30631: PUSH
30632: LD_INT 19
30634: EQUAL
30635: IFFALSE 30645
// sTank := true ;
30637: LD_ADDR_EXP 100
30641: PUSH
30642: LD_INT 1
30644: ST_TO_ADDR
// if p3 = 20 then
30645: LD_VAR 0 3
30649: PUSH
30650: LD_INT 20
30652: EQUAL
30653: IFFALSE 30663
// sRemote := true ;
30655: LD_ADDR_EXP 101
30659: PUSH
30660: LD_INT 1
30662: ST_TO_ADDR
// if p3 = 21 then
30663: LD_VAR 0 3
30667: PUSH
30668: LD_INT 21
30670: EQUAL
30671: IFFALSE 30681
// sPowell := true ;
30673: LD_ADDR_EXP 102
30677: PUSH
30678: LD_INT 1
30680: ST_TO_ADDR
// if p3 = 22 then
30681: LD_VAR 0 3
30685: PUSH
30686: LD_INT 22
30688: EQUAL
30689: IFFALSE 30699
// sTeleport := true ;
30691: LD_ADDR_EXP 105
30695: PUSH
30696: LD_INT 1
30698: ST_TO_ADDR
// if p3 = 23 then
30699: LD_VAR 0 3
30703: PUSH
30704: LD_INT 23
30706: EQUAL
30707: IFFALSE 30717
// sOilTower := true ;
30709: LD_ADDR_EXP 107
30713: PUSH
30714: LD_INT 1
30716: ST_TO_ADDR
// if p3 = 24 then
30717: LD_VAR 0 3
30721: PUSH
30722: LD_INT 24
30724: EQUAL
30725: IFFALSE 30735
// sShovel := true ;
30727: LD_ADDR_EXP 108
30731: PUSH
30732: LD_INT 1
30734: ST_TO_ADDR
// if p3 = 25 then
30735: LD_VAR 0 3
30739: PUSH
30740: LD_INT 25
30742: EQUAL
30743: IFFALSE 30753
// sSheik := true ;
30745: LD_ADDR_EXP 109
30749: PUSH
30750: LD_INT 1
30752: ST_TO_ADDR
// if p3 = 26 then
30753: LD_VAR 0 3
30757: PUSH
30758: LD_INT 26
30760: EQUAL
30761: IFFALSE 30771
// sEarthquake := true ;
30763: LD_ADDR_EXP 111
30767: PUSH
30768: LD_INT 1
30770: ST_TO_ADDR
// if p3 = 27 then
30771: LD_VAR 0 3
30775: PUSH
30776: LD_INT 27
30778: EQUAL
30779: IFFALSE 30789
// sAI := true ;
30781: LD_ADDR_EXP 112
30785: PUSH
30786: LD_INT 1
30788: ST_TO_ADDR
// if p3 = 28 then
30789: LD_VAR 0 3
30793: PUSH
30794: LD_INT 28
30796: EQUAL
30797: IFFALSE 30807
// sCargo := true ;
30799: LD_ADDR_EXP 115
30803: PUSH
30804: LD_INT 1
30806: ST_TO_ADDR
// if p3 = 29 then
30807: LD_VAR 0 3
30811: PUSH
30812: LD_INT 29
30814: EQUAL
30815: IFFALSE 30825
// sDLaser := true ;
30817: LD_ADDR_EXP 116
30821: PUSH
30822: LD_INT 1
30824: ST_TO_ADDR
// if p3 = 30 then
30825: LD_VAR 0 3
30829: PUSH
30830: LD_INT 30
30832: EQUAL
30833: IFFALSE 30843
// sExchange := true ;
30835: LD_ADDR_EXP 117
30839: PUSH
30840: LD_INT 1
30842: ST_TO_ADDR
// if p3 = 31 then
30843: LD_VAR 0 3
30847: PUSH
30848: LD_INT 31
30850: EQUAL
30851: IFFALSE 30861
// sFac := true ;
30853: LD_ADDR_EXP 118
30857: PUSH
30858: LD_INT 1
30860: ST_TO_ADDR
// if p3 = 32 then
30861: LD_VAR 0 3
30865: PUSH
30866: LD_INT 32
30868: EQUAL
30869: IFFALSE 30879
// sPower := true ;
30871: LD_ADDR_EXP 119
30875: PUSH
30876: LD_INT 1
30878: ST_TO_ADDR
// if p3 = 33 then
30879: LD_VAR 0 3
30883: PUSH
30884: LD_INT 33
30886: EQUAL
30887: IFFALSE 30897
// sRandom := true ;
30889: LD_ADDR_EXP 120
30893: PUSH
30894: LD_INT 1
30896: ST_TO_ADDR
// if p3 = 34 then
30897: LD_VAR 0 3
30901: PUSH
30902: LD_INT 34
30904: EQUAL
30905: IFFALSE 30915
// sShield := true ;
30907: LD_ADDR_EXP 121
30911: PUSH
30912: LD_INT 1
30914: ST_TO_ADDR
// if p3 = 35 then
30915: LD_VAR 0 3
30919: PUSH
30920: LD_INT 35
30922: EQUAL
30923: IFFALSE 30933
// sTime := true ;
30925: LD_ADDR_EXP 122
30929: PUSH
30930: LD_INT 1
30932: ST_TO_ADDR
// if p3 = 36 then
30933: LD_VAR 0 3
30937: PUSH
30938: LD_INT 36
30940: EQUAL
30941: IFFALSE 30951
// sTools := true ;
30943: LD_ADDR_EXP 123
30947: PUSH
30948: LD_INT 1
30950: ST_TO_ADDR
// if p3 = 101 then
30951: LD_VAR 0 3
30955: PUSH
30956: LD_INT 101
30958: EQUAL
30959: IFFALSE 30969
// sSold := true ;
30961: LD_ADDR_EXP 88
30965: PUSH
30966: LD_INT 1
30968: ST_TO_ADDR
// if p3 = 102 then
30969: LD_VAR 0 3
30973: PUSH
30974: LD_INT 102
30976: EQUAL
30977: IFFALSE 30987
// sDiff := true ;
30979: LD_ADDR_EXP 89
30983: PUSH
30984: LD_INT 1
30986: ST_TO_ADDR
// if p3 = 103 then
30987: LD_VAR 0 3
30991: PUSH
30992: LD_INT 103
30994: EQUAL
30995: IFFALSE 31005
// sFog := true ;
30997: LD_ADDR_EXP 92
31001: PUSH
31002: LD_INT 1
31004: ST_TO_ADDR
// if p3 = 104 then
31005: LD_VAR 0 3
31009: PUSH
31010: LD_INT 104
31012: EQUAL
31013: IFFALSE 31023
// sReset := true ;
31015: LD_ADDR_EXP 93
31019: PUSH
31020: LD_INT 1
31022: ST_TO_ADDR
// if p3 = 105 then
31023: LD_VAR 0 3
31027: PUSH
31028: LD_INT 105
31030: EQUAL
31031: IFFALSE 31041
// sSun := true ;
31033: LD_ADDR_EXP 94
31037: PUSH
31038: LD_INT 1
31040: ST_TO_ADDR
// if p3 = 106 then
31041: LD_VAR 0 3
31045: PUSH
31046: LD_INT 106
31048: EQUAL
31049: IFFALSE 31059
// sTiger := true ;
31051: LD_ADDR_EXP 90
31055: PUSH
31056: LD_INT 1
31058: ST_TO_ADDR
// if p3 = 107 then
31059: LD_VAR 0 3
31063: PUSH
31064: LD_INT 107
31066: EQUAL
31067: IFFALSE 31077
// sBomb := true ;
31069: LD_ADDR_EXP 91
31073: PUSH
31074: LD_INT 1
31076: ST_TO_ADDR
// if p3 = 108 then
31077: LD_VAR 0 3
31081: PUSH
31082: LD_INT 108
31084: EQUAL
31085: IFFALSE 31095
// sWound := true ;
31087: LD_ADDR_EXP 99
31091: PUSH
31092: LD_INT 1
31094: ST_TO_ADDR
// if p3 = 109 then
31095: LD_VAR 0 3
31099: PUSH
31100: LD_INT 109
31102: EQUAL
31103: IFFALSE 31113
// sBetray := true ;
31105: LD_ADDR_EXP 103
31109: PUSH
31110: LD_INT 1
31112: ST_TO_ADDR
// if p3 = 110 then
31113: LD_VAR 0 3
31117: PUSH
31118: LD_INT 110
31120: EQUAL
31121: IFFALSE 31131
// sContamin := true ;
31123: LD_ADDR_EXP 104
31127: PUSH
31128: LD_INT 1
31130: ST_TO_ADDR
// if p3 = 111 then
31131: LD_VAR 0 3
31135: PUSH
31136: LD_INT 111
31138: EQUAL
31139: IFFALSE 31149
// sOil := true ;
31141: LD_ADDR_EXP 106
31145: PUSH
31146: LD_INT 1
31148: ST_TO_ADDR
// if p3 = 112 then
31149: LD_VAR 0 3
31153: PUSH
31154: LD_INT 112
31156: EQUAL
31157: IFFALSE 31167
// sStu := true ;
31159: LD_ADDR_EXP 110
31163: PUSH
31164: LD_INT 1
31166: ST_TO_ADDR
// if p3 = 113 then
31167: LD_VAR 0 3
31171: PUSH
31172: LD_INT 113
31174: EQUAL
31175: IFFALSE 31185
// sBazooka := true ;
31177: LD_ADDR_EXP 113
31181: PUSH
31182: LD_INT 1
31184: ST_TO_ADDR
// if p3 = 114 then
31185: LD_VAR 0 3
31189: PUSH
31190: LD_INT 114
31192: EQUAL
31193: IFFALSE 31203
// sMortar := true ;
31195: LD_ADDR_EXP 114
31199: PUSH
31200: LD_INT 1
31202: ST_TO_ADDR
// if p3 = 115 then
31203: LD_VAR 0 3
31207: PUSH
31208: LD_INT 115
31210: EQUAL
31211: IFFALSE 31221
// sRanger := true ;
31213: LD_ADDR_EXP 124
31217: PUSH
31218: LD_INT 1
31220: ST_TO_ADDR
// if p3 = 116 then
31221: LD_VAR 0 3
31225: PUSH
31226: LD_INT 116
31228: EQUAL
31229: IFFALSE 31239
// sComputer := true ;
31231: LD_ADDR_EXP 125
31235: PUSH
31236: LD_INT 1
31238: ST_TO_ADDR
// if p3 = 117 then
31239: LD_VAR 0 3
31243: PUSH
31244: LD_INT 117
31246: EQUAL
31247: IFFALSE 31257
// s30 := true ;
31249: LD_ADDR_EXP 126
31253: PUSH
31254: LD_INT 1
31256: ST_TO_ADDR
// if p3 = 118 then
31257: LD_VAR 0 3
31261: PUSH
31262: LD_INT 118
31264: EQUAL
31265: IFFALSE 31275
// s60 := true ;
31267: LD_ADDR_EXP 127
31271: PUSH
31272: LD_INT 1
31274: ST_TO_ADDR
// end ; if p2 = stream_mode then
31275: LD_VAR 0 2
31279: PUSH
31280: LD_INT 101
31282: EQUAL
31283: IFFALSE 31411
// begin case p3 of 1 :
31285: LD_VAR 0 3
31289: PUSH
31290: LD_INT 1
31292: DOUBLE
31293: EQUAL
31294: IFTRUE 31298
31296: GO 31305
31298: POP
// hHackUnlimitedResources ; 2 :
31299: CALL 43509 0 0
31303: GO 31411
31305: LD_INT 2
31307: DOUBLE
31308: EQUAL
31309: IFTRUE 31313
31311: GO 31320
31313: POP
// hHackSetLevel10 ; 3 :
31314: CALL 43642 0 0
31318: GO 31411
31320: LD_INT 3
31322: DOUBLE
31323: EQUAL
31324: IFTRUE 31328
31326: GO 31335
31328: POP
// hHackSetLevel10YourUnits ; 4 :
31329: CALL 43727 0 0
31333: GO 31411
31335: LD_INT 4
31337: DOUBLE
31338: EQUAL
31339: IFTRUE 31343
31341: GO 31350
31343: POP
// hHackInvincible ; 5 :
31344: CALL 44175 0 0
31348: GO 31411
31350: LD_INT 5
31352: DOUBLE
31353: EQUAL
31354: IFTRUE 31358
31356: GO 31365
31358: POP
// hHackInvisible ; 6 :
31359: CALL 44286 0 0
31363: GO 31411
31365: LD_INT 6
31367: DOUBLE
31368: EQUAL
31369: IFTRUE 31373
31371: GO 31380
31373: POP
// hHackChangeYourSide ; 7 :
31374: CALL 44343 0 0
31378: GO 31411
31380: LD_INT 7
31382: DOUBLE
31383: EQUAL
31384: IFTRUE 31388
31386: GO 31395
31388: POP
// hHackChangeUnitSide ; 8 :
31389: CALL 44385 0 0
31393: GO 31411
31395: LD_INT 8
31397: DOUBLE
31398: EQUAL
31399: IFTRUE 31403
31401: GO 31410
31403: POP
// hHackFog ; end ;
31404: CALL 44486 0 0
31408: GO 31411
31410: POP
// end ; end ;
31411: LD_VAR 0 7
31415: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
31416: GO 31418
31418: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
31419: LD_STRING initStreamRollete();
31421: PPUSH
31422: CALL_OW 559
// InitStreamMode ;
31426: CALL 31438 0 0
// DefineStreamItems ( false ) ;
31430: LD_INT 0
31432: PPUSH
31433: CALL 31902 0 1
// end ;
31437: END
// function InitStreamMode ; begin
31438: LD_INT 0
31440: PPUSH
// streamModeActive := false ;
31441: LD_ADDR_EXP 71
31445: PUSH
31446: LD_INT 0
31448: ST_TO_ADDR
// normalCounter := 36 ;
31449: LD_ADDR_EXP 72
31453: PUSH
31454: LD_INT 36
31456: ST_TO_ADDR
// hardcoreCounter := 18 ;
31457: LD_ADDR_EXP 73
31461: PUSH
31462: LD_INT 18
31464: ST_TO_ADDR
// sRocket := false ;
31465: LD_ADDR_EXP 76
31469: PUSH
31470: LD_INT 0
31472: ST_TO_ADDR
// sSpeed := false ;
31473: LD_ADDR_EXP 75
31477: PUSH
31478: LD_INT 0
31480: ST_TO_ADDR
// sEngine := false ;
31481: LD_ADDR_EXP 77
31485: PUSH
31486: LD_INT 0
31488: ST_TO_ADDR
// sSpec := false ;
31489: LD_ADDR_EXP 74
31493: PUSH
31494: LD_INT 0
31496: ST_TO_ADDR
// sLevel := false ;
31497: LD_ADDR_EXP 78
31501: PUSH
31502: LD_INT 0
31504: ST_TO_ADDR
// sArmoury := false ;
31505: LD_ADDR_EXP 79
31509: PUSH
31510: LD_INT 0
31512: ST_TO_ADDR
// sRadar := false ;
31513: LD_ADDR_EXP 80
31517: PUSH
31518: LD_INT 0
31520: ST_TO_ADDR
// sBunker := false ;
31521: LD_ADDR_EXP 81
31525: PUSH
31526: LD_INT 0
31528: ST_TO_ADDR
// sHack := false ;
31529: LD_ADDR_EXP 82
31533: PUSH
31534: LD_INT 0
31536: ST_TO_ADDR
// sFire := false ;
31537: LD_ADDR_EXP 83
31541: PUSH
31542: LD_INT 0
31544: ST_TO_ADDR
// sRefresh := false ;
31545: LD_ADDR_EXP 84
31549: PUSH
31550: LD_INT 0
31552: ST_TO_ADDR
// sExp := false ;
31553: LD_ADDR_EXP 85
31557: PUSH
31558: LD_INT 0
31560: ST_TO_ADDR
// sDepot := false ;
31561: LD_ADDR_EXP 86
31565: PUSH
31566: LD_INT 0
31568: ST_TO_ADDR
// sFlag := false ;
31569: LD_ADDR_EXP 87
31573: PUSH
31574: LD_INT 0
31576: ST_TO_ADDR
// sKamikadze := false ;
31577: LD_ADDR_EXP 95
31581: PUSH
31582: LD_INT 0
31584: ST_TO_ADDR
// sTroll := false ;
31585: LD_ADDR_EXP 96
31589: PUSH
31590: LD_INT 0
31592: ST_TO_ADDR
// sSlow := false ;
31593: LD_ADDR_EXP 97
31597: PUSH
31598: LD_INT 0
31600: ST_TO_ADDR
// sLack := false ;
31601: LD_ADDR_EXP 98
31605: PUSH
31606: LD_INT 0
31608: ST_TO_ADDR
// sTank := false ;
31609: LD_ADDR_EXP 100
31613: PUSH
31614: LD_INT 0
31616: ST_TO_ADDR
// sRemote := false ;
31617: LD_ADDR_EXP 101
31621: PUSH
31622: LD_INT 0
31624: ST_TO_ADDR
// sPowell := false ;
31625: LD_ADDR_EXP 102
31629: PUSH
31630: LD_INT 0
31632: ST_TO_ADDR
// sTeleport := false ;
31633: LD_ADDR_EXP 105
31637: PUSH
31638: LD_INT 0
31640: ST_TO_ADDR
// sOilTower := false ;
31641: LD_ADDR_EXP 107
31645: PUSH
31646: LD_INT 0
31648: ST_TO_ADDR
// sShovel := false ;
31649: LD_ADDR_EXP 108
31653: PUSH
31654: LD_INT 0
31656: ST_TO_ADDR
// sSheik := false ;
31657: LD_ADDR_EXP 109
31661: PUSH
31662: LD_INT 0
31664: ST_TO_ADDR
// sEarthquake := false ;
31665: LD_ADDR_EXP 111
31669: PUSH
31670: LD_INT 0
31672: ST_TO_ADDR
// sAI := false ;
31673: LD_ADDR_EXP 112
31677: PUSH
31678: LD_INT 0
31680: ST_TO_ADDR
// sCargo := false ;
31681: LD_ADDR_EXP 115
31685: PUSH
31686: LD_INT 0
31688: ST_TO_ADDR
// sDLaser := false ;
31689: LD_ADDR_EXP 116
31693: PUSH
31694: LD_INT 0
31696: ST_TO_ADDR
// sExchange := false ;
31697: LD_ADDR_EXP 117
31701: PUSH
31702: LD_INT 0
31704: ST_TO_ADDR
// sFac := false ;
31705: LD_ADDR_EXP 118
31709: PUSH
31710: LD_INT 0
31712: ST_TO_ADDR
// sPower := false ;
31713: LD_ADDR_EXP 119
31717: PUSH
31718: LD_INT 0
31720: ST_TO_ADDR
// sRandom := false ;
31721: LD_ADDR_EXP 120
31725: PUSH
31726: LD_INT 0
31728: ST_TO_ADDR
// sShield := false ;
31729: LD_ADDR_EXP 121
31733: PUSH
31734: LD_INT 0
31736: ST_TO_ADDR
// sTime := false ;
31737: LD_ADDR_EXP 122
31741: PUSH
31742: LD_INT 0
31744: ST_TO_ADDR
// sTools := false ;
31745: LD_ADDR_EXP 123
31749: PUSH
31750: LD_INT 0
31752: ST_TO_ADDR
// sSold := false ;
31753: LD_ADDR_EXP 88
31757: PUSH
31758: LD_INT 0
31760: ST_TO_ADDR
// sDiff := false ;
31761: LD_ADDR_EXP 89
31765: PUSH
31766: LD_INT 0
31768: ST_TO_ADDR
// sFog := false ;
31769: LD_ADDR_EXP 92
31773: PUSH
31774: LD_INT 0
31776: ST_TO_ADDR
// sReset := false ;
31777: LD_ADDR_EXP 93
31781: PUSH
31782: LD_INT 0
31784: ST_TO_ADDR
// sSun := false ;
31785: LD_ADDR_EXP 94
31789: PUSH
31790: LD_INT 0
31792: ST_TO_ADDR
// sTiger := false ;
31793: LD_ADDR_EXP 90
31797: PUSH
31798: LD_INT 0
31800: ST_TO_ADDR
// sBomb := false ;
31801: LD_ADDR_EXP 91
31805: PUSH
31806: LD_INT 0
31808: ST_TO_ADDR
// sWound := false ;
31809: LD_ADDR_EXP 99
31813: PUSH
31814: LD_INT 0
31816: ST_TO_ADDR
// sBetray := false ;
31817: LD_ADDR_EXP 103
31821: PUSH
31822: LD_INT 0
31824: ST_TO_ADDR
// sContamin := false ;
31825: LD_ADDR_EXP 104
31829: PUSH
31830: LD_INT 0
31832: ST_TO_ADDR
// sOil := false ;
31833: LD_ADDR_EXP 106
31837: PUSH
31838: LD_INT 0
31840: ST_TO_ADDR
// sStu := false ;
31841: LD_ADDR_EXP 110
31845: PUSH
31846: LD_INT 0
31848: ST_TO_ADDR
// sBazooka := false ;
31849: LD_ADDR_EXP 113
31853: PUSH
31854: LD_INT 0
31856: ST_TO_ADDR
// sMortar := false ;
31857: LD_ADDR_EXP 114
31861: PUSH
31862: LD_INT 0
31864: ST_TO_ADDR
// sRanger := false ;
31865: LD_ADDR_EXP 124
31869: PUSH
31870: LD_INT 0
31872: ST_TO_ADDR
// sComputer := false ;
31873: LD_ADDR_EXP 125
31877: PUSH
31878: LD_INT 0
31880: ST_TO_ADDR
// s30 := false ;
31881: LD_ADDR_EXP 126
31885: PUSH
31886: LD_INT 0
31888: ST_TO_ADDR
// s60 := false ;
31889: LD_ADDR_EXP 127
31893: PUSH
31894: LD_INT 0
31896: ST_TO_ADDR
// end ;
31897: LD_VAR 0 1
31901: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
31902: LD_INT 0
31904: PPUSH
31905: PPUSH
31906: PPUSH
31907: PPUSH
31908: PPUSH
31909: PPUSH
31910: PPUSH
// result := [ ] ;
31911: LD_ADDR_VAR 0 2
31915: PUSH
31916: EMPTY
31917: ST_TO_ADDR
// if campaign_id = 1 then
31918: LD_OWVAR 69
31922: PUSH
31923: LD_INT 1
31925: EQUAL
31926: IFFALSE 35092
// begin case mission_number of 1 :
31928: LD_OWVAR 70
31932: PUSH
31933: LD_INT 1
31935: DOUBLE
31936: EQUAL
31937: IFTRUE 31941
31939: GO 32017
31941: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
31942: LD_ADDR_VAR 0 2
31946: PUSH
31947: LD_INT 2
31949: PUSH
31950: LD_INT 4
31952: PUSH
31953: LD_INT 11
31955: PUSH
31956: LD_INT 12
31958: PUSH
31959: LD_INT 15
31961: PUSH
31962: LD_INT 16
31964: PUSH
31965: LD_INT 22
31967: PUSH
31968: LD_INT 23
31970: PUSH
31971: LD_INT 26
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 101
31987: PUSH
31988: LD_INT 102
31990: PUSH
31991: LD_INT 106
31993: PUSH
31994: LD_INT 116
31996: PUSH
31997: LD_INT 117
31999: PUSH
32000: LD_INT 118
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: ST_TO_ADDR
32015: GO 35090
32017: LD_INT 2
32019: DOUBLE
32020: EQUAL
32021: IFTRUE 32025
32023: GO 32109
32025: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
32026: LD_ADDR_VAR 0 2
32030: PUSH
32031: LD_INT 2
32033: PUSH
32034: LD_INT 4
32036: PUSH
32037: LD_INT 11
32039: PUSH
32040: LD_INT 12
32042: PUSH
32043: LD_INT 15
32045: PUSH
32046: LD_INT 16
32048: PUSH
32049: LD_INT 22
32051: PUSH
32052: LD_INT 23
32054: PUSH
32055: LD_INT 26
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 101
32071: PUSH
32072: LD_INT 102
32074: PUSH
32075: LD_INT 105
32077: PUSH
32078: LD_INT 106
32080: PUSH
32081: LD_INT 108
32083: PUSH
32084: LD_INT 116
32086: PUSH
32087: LD_INT 117
32089: PUSH
32090: LD_INT 118
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: ST_TO_ADDR
32107: GO 35090
32109: LD_INT 3
32111: DOUBLE
32112: EQUAL
32113: IFTRUE 32117
32115: GO 32205
32117: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
32118: LD_ADDR_VAR 0 2
32122: PUSH
32123: LD_INT 2
32125: PUSH
32126: LD_INT 4
32128: PUSH
32129: LD_INT 5
32131: PUSH
32132: LD_INT 11
32134: PUSH
32135: LD_INT 12
32137: PUSH
32138: LD_INT 15
32140: PUSH
32141: LD_INT 16
32143: PUSH
32144: LD_INT 22
32146: PUSH
32147: LD_INT 26
32149: PUSH
32150: LD_INT 36
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 101
32167: PUSH
32168: LD_INT 102
32170: PUSH
32171: LD_INT 105
32173: PUSH
32174: LD_INT 106
32176: PUSH
32177: LD_INT 108
32179: PUSH
32180: LD_INT 116
32182: PUSH
32183: LD_INT 117
32185: PUSH
32186: LD_INT 118
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: ST_TO_ADDR
32203: GO 35090
32205: LD_INT 4
32207: DOUBLE
32208: EQUAL
32209: IFTRUE 32213
32211: GO 32309
32213: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
32214: LD_ADDR_VAR 0 2
32218: PUSH
32219: LD_INT 2
32221: PUSH
32222: LD_INT 4
32224: PUSH
32225: LD_INT 5
32227: PUSH
32228: LD_INT 8
32230: PUSH
32231: LD_INT 11
32233: PUSH
32234: LD_INT 12
32236: PUSH
32237: LD_INT 15
32239: PUSH
32240: LD_INT 16
32242: PUSH
32243: LD_INT 22
32245: PUSH
32246: LD_INT 23
32248: PUSH
32249: LD_INT 26
32251: PUSH
32252: LD_INT 36
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 101
32271: PUSH
32272: LD_INT 102
32274: PUSH
32275: LD_INT 105
32277: PUSH
32278: LD_INT 106
32280: PUSH
32281: LD_INT 108
32283: PUSH
32284: LD_INT 116
32286: PUSH
32287: LD_INT 117
32289: PUSH
32290: LD_INT 118
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: ST_TO_ADDR
32307: GO 35090
32309: LD_INT 5
32311: DOUBLE
32312: EQUAL
32313: IFTRUE 32317
32315: GO 32429
32317: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
32318: LD_ADDR_VAR 0 2
32322: PUSH
32323: LD_INT 2
32325: PUSH
32326: LD_INT 4
32328: PUSH
32329: LD_INT 5
32331: PUSH
32332: LD_INT 6
32334: PUSH
32335: LD_INT 8
32337: PUSH
32338: LD_INT 11
32340: PUSH
32341: LD_INT 12
32343: PUSH
32344: LD_INT 15
32346: PUSH
32347: LD_INT 16
32349: PUSH
32350: LD_INT 22
32352: PUSH
32353: LD_INT 23
32355: PUSH
32356: LD_INT 25
32358: PUSH
32359: LD_INT 26
32361: PUSH
32362: LD_INT 36
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 101
32383: PUSH
32384: LD_INT 102
32386: PUSH
32387: LD_INT 105
32389: PUSH
32390: LD_INT 106
32392: PUSH
32393: LD_INT 108
32395: PUSH
32396: LD_INT 109
32398: PUSH
32399: LD_INT 112
32401: PUSH
32402: LD_INT 116
32404: PUSH
32405: LD_INT 117
32407: PUSH
32408: LD_INT 118
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: ST_TO_ADDR
32427: GO 35090
32429: LD_INT 6
32431: DOUBLE
32432: EQUAL
32433: IFTRUE 32437
32435: GO 32569
32437: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
32438: LD_ADDR_VAR 0 2
32442: PUSH
32443: LD_INT 2
32445: PUSH
32446: LD_INT 4
32448: PUSH
32449: LD_INT 5
32451: PUSH
32452: LD_INT 6
32454: PUSH
32455: LD_INT 8
32457: PUSH
32458: LD_INT 11
32460: PUSH
32461: LD_INT 12
32463: PUSH
32464: LD_INT 15
32466: PUSH
32467: LD_INT 16
32469: PUSH
32470: LD_INT 20
32472: PUSH
32473: LD_INT 21
32475: PUSH
32476: LD_INT 22
32478: PUSH
32479: LD_INT 23
32481: PUSH
32482: LD_INT 25
32484: PUSH
32485: LD_INT 26
32487: PUSH
32488: LD_INT 30
32490: PUSH
32491: LD_INT 31
32493: PUSH
32494: LD_INT 32
32496: PUSH
32497: LD_INT 36
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 101
32523: PUSH
32524: LD_INT 102
32526: PUSH
32527: LD_INT 105
32529: PUSH
32530: LD_INT 106
32532: PUSH
32533: LD_INT 108
32535: PUSH
32536: LD_INT 109
32538: PUSH
32539: LD_INT 112
32541: PUSH
32542: LD_INT 116
32544: PUSH
32545: LD_INT 117
32547: PUSH
32548: LD_INT 118
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: ST_TO_ADDR
32567: GO 35090
32569: LD_INT 7
32571: DOUBLE
32572: EQUAL
32573: IFTRUE 32577
32575: GO 32689
32577: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
32578: LD_ADDR_VAR 0 2
32582: PUSH
32583: LD_INT 2
32585: PUSH
32586: LD_INT 4
32588: PUSH
32589: LD_INT 5
32591: PUSH
32592: LD_INT 7
32594: PUSH
32595: LD_INT 11
32597: PUSH
32598: LD_INT 12
32600: PUSH
32601: LD_INT 15
32603: PUSH
32604: LD_INT 16
32606: PUSH
32607: LD_INT 20
32609: PUSH
32610: LD_INT 21
32612: PUSH
32613: LD_INT 22
32615: PUSH
32616: LD_INT 23
32618: PUSH
32619: LD_INT 25
32621: PUSH
32622: LD_INT 26
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 101
32643: PUSH
32644: LD_INT 102
32646: PUSH
32647: LD_INT 103
32649: PUSH
32650: LD_INT 105
32652: PUSH
32653: LD_INT 106
32655: PUSH
32656: LD_INT 108
32658: PUSH
32659: LD_INT 112
32661: PUSH
32662: LD_INT 116
32664: PUSH
32665: LD_INT 117
32667: PUSH
32668: LD_INT 118
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: ST_TO_ADDR
32687: GO 35090
32689: LD_INT 8
32691: DOUBLE
32692: EQUAL
32693: IFTRUE 32697
32695: GO 32837
32697: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
32698: LD_ADDR_VAR 0 2
32702: PUSH
32703: LD_INT 2
32705: PUSH
32706: LD_INT 4
32708: PUSH
32709: LD_INT 5
32711: PUSH
32712: LD_INT 6
32714: PUSH
32715: LD_INT 7
32717: PUSH
32718: LD_INT 8
32720: PUSH
32721: LD_INT 11
32723: PUSH
32724: LD_INT 12
32726: PUSH
32727: LD_INT 15
32729: PUSH
32730: LD_INT 16
32732: PUSH
32733: LD_INT 20
32735: PUSH
32736: LD_INT 21
32738: PUSH
32739: LD_INT 22
32741: PUSH
32742: LD_INT 23
32744: PUSH
32745: LD_INT 25
32747: PUSH
32748: LD_INT 26
32750: PUSH
32751: LD_INT 30
32753: PUSH
32754: LD_INT 31
32756: PUSH
32757: LD_INT 32
32759: PUSH
32760: LD_INT 36
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 101
32787: PUSH
32788: LD_INT 102
32790: PUSH
32791: LD_INT 103
32793: PUSH
32794: LD_INT 105
32796: PUSH
32797: LD_INT 106
32799: PUSH
32800: LD_INT 108
32802: PUSH
32803: LD_INT 109
32805: PUSH
32806: LD_INT 112
32808: PUSH
32809: LD_INT 116
32811: PUSH
32812: LD_INT 117
32814: PUSH
32815: LD_INT 118
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: ST_TO_ADDR
32835: GO 35090
32837: LD_INT 9
32839: DOUBLE
32840: EQUAL
32841: IFTRUE 32845
32843: GO 32993
32845: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
32846: LD_ADDR_VAR 0 2
32850: PUSH
32851: LD_INT 2
32853: PUSH
32854: LD_INT 4
32856: PUSH
32857: LD_INT 5
32859: PUSH
32860: LD_INT 6
32862: PUSH
32863: LD_INT 7
32865: PUSH
32866: LD_INT 8
32868: PUSH
32869: LD_INT 11
32871: PUSH
32872: LD_INT 12
32874: PUSH
32875: LD_INT 15
32877: PUSH
32878: LD_INT 16
32880: PUSH
32881: LD_INT 20
32883: PUSH
32884: LD_INT 21
32886: PUSH
32887: LD_INT 22
32889: PUSH
32890: LD_INT 23
32892: PUSH
32893: LD_INT 25
32895: PUSH
32896: LD_INT 26
32898: PUSH
32899: LD_INT 28
32901: PUSH
32902: LD_INT 30
32904: PUSH
32905: LD_INT 31
32907: PUSH
32908: LD_INT 32
32910: PUSH
32911: LD_INT 36
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 101
32939: PUSH
32940: LD_INT 102
32942: PUSH
32943: LD_INT 103
32945: PUSH
32946: LD_INT 105
32948: PUSH
32949: LD_INT 106
32951: PUSH
32952: LD_INT 108
32954: PUSH
32955: LD_INT 109
32957: PUSH
32958: LD_INT 112
32960: PUSH
32961: LD_INT 114
32963: PUSH
32964: LD_INT 116
32966: PUSH
32967: LD_INT 117
32969: PUSH
32970: LD_INT 118
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: ST_TO_ADDR
32991: GO 35090
32993: LD_INT 10
32995: DOUBLE
32996: EQUAL
32997: IFTRUE 33001
32999: GO 33197
33001: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
33002: LD_ADDR_VAR 0 2
33006: PUSH
33007: LD_INT 2
33009: PUSH
33010: LD_INT 4
33012: PUSH
33013: LD_INT 5
33015: PUSH
33016: LD_INT 6
33018: PUSH
33019: LD_INT 7
33021: PUSH
33022: LD_INT 8
33024: PUSH
33025: LD_INT 9
33027: PUSH
33028: LD_INT 10
33030: PUSH
33031: LD_INT 11
33033: PUSH
33034: LD_INT 12
33036: PUSH
33037: LD_INT 13
33039: PUSH
33040: LD_INT 14
33042: PUSH
33043: LD_INT 15
33045: PUSH
33046: LD_INT 16
33048: PUSH
33049: LD_INT 17
33051: PUSH
33052: LD_INT 18
33054: PUSH
33055: LD_INT 19
33057: PUSH
33058: LD_INT 20
33060: PUSH
33061: LD_INT 21
33063: PUSH
33064: LD_INT 22
33066: PUSH
33067: LD_INT 23
33069: PUSH
33070: LD_INT 24
33072: PUSH
33073: LD_INT 25
33075: PUSH
33076: LD_INT 26
33078: PUSH
33079: LD_INT 28
33081: PUSH
33082: LD_INT 30
33084: PUSH
33085: LD_INT 31
33087: PUSH
33088: LD_INT 32
33090: PUSH
33091: LD_INT 36
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 101
33127: PUSH
33128: LD_INT 102
33130: PUSH
33131: LD_INT 103
33133: PUSH
33134: LD_INT 104
33136: PUSH
33137: LD_INT 105
33139: PUSH
33140: LD_INT 106
33142: PUSH
33143: LD_INT 107
33145: PUSH
33146: LD_INT 108
33148: PUSH
33149: LD_INT 109
33151: PUSH
33152: LD_INT 110
33154: PUSH
33155: LD_INT 111
33157: PUSH
33158: LD_INT 112
33160: PUSH
33161: LD_INT 114
33163: PUSH
33164: LD_INT 116
33166: PUSH
33167: LD_INT 117
33169: PUSH
33170: LD_INT 118
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: ST_TO_ADDR
33195: GO 35090
33197: LD_INT 11
33199: DOUBLE
33200: EQUAL
33201: IFTRUE 33205
33203: GO 33409
33205: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
33206: LD_ADDR_VAR 0 2
33210: PUSH
33211: LD_INT 2
33213: PUSH
33214: LD_INT 3
33216: PUSH
33217: LD_INT 4
33219: PUSH
33220: LD_INT 5
33222: PUSH
33223: LD_INT 6
33225: PUSH
33226: LD_INT 7
33228: PUSH
33229: LD_INT 8
33231: PUSH
33232: LD_INT 9
33234: PUSH
33235: LD_INT 10
33237: PUSH
33238: LD_INT 11
33240: PUSH
33241: LD_INT 12
33243: PUSH
33244: LD_INT 13
33246: PUSH
33247: LD_INT 14
33249: PUSH
33250: LD_INT 15
33252: PUSH
33253: LD_INT 16
33255: PUSH
33256: LD_INT 17
33258: PUSH
33259: LD_INT 18
33261: PUSH
33262: LD_INT 19
33264: PUSH
33265: LD_INT 20
33267: PUSH
33268: LD_INT 21
33270: PUSH
33271: LD_INT 22
33273: PUSH
33274: LD_INT 23
33276: PUSH
33277: LD_INT 24
33279: PUSH
33280: LD_INT 25
33282: PUSH
33283: LD_INT 26
33285: PUSH
33286: LD_INT 28
33288: PUSH
33289: LD_INT 30
33291: PUSH
33292: LD_INT 31
33294: PUSH
33295: LD_INT 32
33297: PUSH
33298: LD_INT 34
33300: PUSH
33301: LD_INT 36
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 101
33339: PUSH
33340: LD_INT 102
33342: PUSH
33343: LD_INT 103
33345: PUSH
33346: LD_INT 104
33348: PUSH
33349: LD_INT 105
33351: PUSH
33352: LD_INT 106
33354: PUSH
33355: LD_INT 107
33357: PUSH
33358: LD_INT 108
33360: PUSH
33361: LD_INT 109
33363: PUSH
33364: LD_INT 110
33366: PUSH
33367: LD_INT 111
33369: PUSH
33370: LD_INT 112
33372: PUSH
33373: LD_INT 114
33375: PUSH
33376: LD_INT 116
33378: PUSH
33379: LD_INT 117
33381: PUSH
33382: LD_INT 118
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: ST_TO_ADDR
33407: GO 35090
33409: LD_INT 12
33411: DOUBLE
33412: EQUAL
33413: IFTRUE 33417
33415: GO 33637
33417: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
33418: LD_ADDR_VAR 0 2
33422: PUSH
33423: LD_INT 1
33425: PUSH
33426: LD_INT 2
33428: PUSH
33429: LD_INT 3
33431: PUSH
33432: LD_INT 4
33434: PUSH
33435: LD_INT 5
33437: PUSH
33438: LD_INT 6
33440: PUSH
33441: LD_INT 7
33443: PUSH
33444: LD_INT 8
33446: PUSH
33447: LD_INT 9
33449: PUSH
33450: LD_INT 10
33452: PUSH
33453: LD_INT 11
33455: PUSH
33456: LD_INT 12
33458: PUSH
33459: LD_INT 13
33461: PUSH
33462: LD_INT 14
33464: PUSH
33465: LD_INT 15
33467: PUSH
33468: LD_INT 16
33470: PUSH
33471: LD_INT 17
33473: PUSH
33474: LD_INT 18
33476: PUSH
33477: LD_INT 19
33479: PUSH
33480: LD_INT 20
33482: PUSH
33483: LD_INT 21
33485: PUSH
33486: LD_INT 22
33488: PUSH
33489: LD_INT 23
33491: PUSH
33492: LD_INT 24
33494: PUSH
33495: LD_INT 25
33497: PUSH
33498: LD_INT 26
33500: PUSH
33501: LD_INT 27
33503: PUSH
33504: LD_INT 28
33506: PUSH
33507: LD_INT 30
33509: PUSH
33510: LD_INT 31
33512: PUSH
33513: LD_INT 32
33515: PUSH
33516: LD_INT 33
33518: PUSH
33519: LD_INT 34
33521: PUSH
33522: LD_INT 36
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 101
33563: PUSH
33564: LD_INT 102
33566: PUSH
33567: LD_INT 103
33569: PUSH
33570: LD_INT 104
33572: PUSH
33573: LD_INT 105
33575: PUSH
33576: LD_INT 106
33578: PUSH
33579: LD_INT 107
33581: PUSH
33582: LD_INT 108
33584: PUSH
33585: LD_INT 109
33587: PUSH
33588: LD_INT 110
33590: PUSH
33591: LD_INT 111
33593: PUSH
33594: LD_INT 112
33596: PUSH
33597: LD_INT 113
33599: PUSH
33600: LD_INT 114
33602: PUSH
33603: LD_INT 116
33605: PUSH
33606: LD_INT 117
33608: PUSH
33609: LD_INT 118
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: ST_TO_ADDR
33635: GO 35090
33637: LD_INT 13
33639: DOUBLE
33640: EQUAL
33641: IFTRUE 33645
33643: GO 33853
33645: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
33646: LD_ADDR_VAR 0 2
33650: PUSH
33651: LD_INT 1
33653: PUSH
33654: LD_INT 2
33656: PUSH
33657: LD_INT 3
33659: PUSH
33660: LD_INT 4
33662: PUSH
33663: LD_INT 5
33665: PUSH
33666: LD_INT 8
33668: PUSH
33669: LD_INT 9
33671: PUSH
33672: LD_INT 10
33674: PUSH
33675: LD_INT 11
33677: PUSH
33678: LD_INT 12
33680: PUSH
33681: LD_INT 14
33683: PUSH
33684: LD_INT 15
33686: PUSH
33687: LD_INT 16
33689: PUSH
33690: LD_INT 17
33692: PUSH
33693: LD_INT 18
33695: PUSH
33696: LD_INT 19
33698: PUSH
33699: LD_INT 20
33701: PUSH
33702: LD_INT 21
33704: PUSH
33705: LD_INT 22
33707: PUSH
33708: LD_INT 23
33710: PUSH
33711: LD_INT 24
33713: PUSH
33714: LD_INT 25
33716: PUSH
33717: LD_INT 26
33719: PUSH
33720: LD_INT 27
33722: PUSH
33723: LD_INT 28
33725: PUSH
33726: LD_INT 30
33728: PUSH
33729: LD_INT 31
33731: PUSH
33732: LD_INT 32
33734: PUSH
33735: LD_INT 33
33737: PUSH
33738: LD_INT 34
33740: PUSH
33741: LD_INT 36
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 101
33779: PUSH
33780: LD_INT 102
33782: PUSH
33783: LD_INT 103
33785: PUSH
33786: LD_INT 104
33788: PUSH
33789: LD_INT 105
33791: PUSH
33792: LD_INT 106
33794: PUSH
33795: LD_INT 107
33797: PUSH
33798: LD_INT 108
33800: PUSH
33801: LD_INT 109
33803: PUSH
33804: LD_INT 110
33806: PUSH
33807: LD_INT 111
33809: PUSH
33810: LD_INT 112
33812: PUSH
33813: LD_INT 113
33815: PUSH
33816: LD_INT 114
33818: PUSH
33819: LD_INT 116
33821: PUSH
33822: LD_INT 117
33824: PUSH
33825: LD_INT 118
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: ST_TO_ADDR
33851: GO 35090
33853: LD_INT 14
33855: DOUBLE
33856: EQUAL
33857: IFTRUE 33861
33859: GO 34085
33861: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
33862: LD_ADDR_VAR 0 2
33866: PUSH
33867: LD_INT 1
33869: PUSH
33870: LD_INT 2
33872: PUSH
33873: LD_INT 3
33875: PUSH
33876: LD_INT 4
33878: PUSH
33879: LD_INT 5
33881: PUSH
33882: LD_INT 6
33884: PUSH
33885: LD_INT 7
33887: PUSH
33888: LD_INT 8
33890: PUSH
33891: LD_INT 9
33893: PUSH
33894: LD_INT 10
33896: PUSH
33897: LD_INT 11
33899: PUSH
33900: LD_INT 12
33902: PUSH
33903: LD_INT 13
33905: PUSH
33906: LD_INT 14
33908: PUSH
33909: LD_INT 15
33911: PUSH
33912: LD_INT 16
33914: PUSH
33915: LD_INT 17
33917: PUSH
33918: LD_INT 18
33920: PUSH
33921: LD_INT 19
33923: PUSH
33924: LD_INT 20
33926: PUSH
33927: LD_INT 21
33929: PUSH
33930: LD_INT 22
33932: PUSH
33933: LD_INT 23
33935: PUSH
33936: LD_INT 24
33938: PUSH
33939: LD_INT 25
33941: PUSH
33942: LD_INT 26
33944: PUSH
33945: LD_INT 27
33947: PUSH
33948: LD_INT 28
33950: PUSH
33951: LD_INT 29
33953: PUSH
33954: LD_INT 30
33956: PUSH
33957: LD_INT 31
33959: PUSH
33960: LD_INT 32
33962: PUSH
33963: LD_INT 33
33965: PUSH
33966: LD_INT 34
33968: PUSH
33969: LD_INT 36
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 101
34011: PUSH
34012: LD_INT 102
34014: PUSH
34015: LD_INT 103
34017: PUSH
34018: LD_INT 104
34020: PUSH
34021: LD_INT 105
34023: PUSH
34024: LD_INT 106
34026: PUSH
34027: LD_INT 107
34029: PUSH
34030: LD_INT 108
34032: PUSH
34033: LD_INT 109
34035: PUSH
34036: LD_INT 110
34038: PUSH
34039: LD_INT 111
34041: PUSH
34042: LD_INT 112
34044: PUSH
34045: LD_INT 113
34047: PUSH
34048: LD_INT 114
34050: PUSH
34051: LD_INT 116
34053: PUSH
34054: LD_INT 117
34056: PUSH
34057: LD_INT 118
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: ST_TO_ADDR
34083: GO 35090
34085: LD_INT 15
34087: DOUBLE
34088: EQUAL
34089: IFTRUE 34093
34091: GO 34317
34093: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
34094: LD_ADDR_VAR 0 2
34098: PUSH
34099: LD_INT 1
34101: PUSH
34102: LD_INT 2
34104: PUSH
34105: LD_INT 3
34107: PUSH
34108: LD_INT 4
34110: PUSH
34111: LD_INT 5
34113: PUSH
34114: LD_INT 6
34116: PUSH
34117: LD_INT 7
34119: PUSH
34120: LD_INT 8
34122: PUSH
34123: LD_INT 9
34125: PUSH
34126: LD_INT 10
34128: PUSH
34129: LD_INT 11
34131: PUSH
34132: LD_INT 12
34134: PUSH
34135: LD_INT 13
34137: PUSH
34138: LD_INT 14
34140: PUSH
34141: LD_INT 15
34143: PUSH
34144: LD_INT 16
34146: PUSH
34147: LD_INT 17
34149: PUSH
34150: LD_INT 18
34152: PUSH
34153: LD_INT 19
34155: PUSH
34156: LD_INT 20
34158: PUSH
34159: LD_INT 21
34161: PUSH
34162: LD_INT 22
34164: PUSH
34165: LD_INT 23
34167: PUSH
34168: LD_INT 24
34170: PUSH
34171: LD_INT 25
34173: PUSH
34174: LD_INT 26
34176: PUSH
34177: LD_INT 27
34179: PUSH
34180: LD_INT 28
34182: PUSH
34183: LD_INT 29
34185: PUSH
34186: LD_INT 30
34188: PUSH
34189: LD_INT 31
34191: PUSH
34192: LD_INT 32
34194: PUSH
34195: LD_INT 33
34197: PUSH
34198: LD_INT 34
34200: PUSH
34201: LD_INT 36
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 101
34243: PUSH
34244: LD_INT 102
34246: PUSH
34247: LD_INT 103
34249: PUSH
34250: LD_INT 104
34252: PUSH
34253: LD_INT 105
34255: PUSH
34256: LD_INT 106
34258: PUSH
34259: LD_INT 107
34261: PUSH
34262: LD_INT 108
34264: PUSH
34265: LD_INT 109
34267: PUSH
34268: LD_INT 110
34270: PUSH
34271: LD_INT 111
34273: PUSH
34274: LD_INT 112
34276: PUSH
34277: LD_INT 113
34279: PUSH
34280: LD_INT 114
34282: PUSH
34283: LD_INT 116
34285: PUSH
34286: LD_INT 117
34288: PUSH
34289: LD_INT 118
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: ST_TO_ADDR
34315: GO 35090
34317: LD_INT 16
34319: DOUBLE
34320: EQUAL
34321: IFTRUE 34325
34323: GO 34461
34325: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
34326: LD_ADDR_VAR 0 2
34330: PUSH
34331: LD_INT 2
34333: PUSH
34334: LD_INT 4
34336: PUSH
34337: LD_INT 5
34339: PUSH
34340: LD_INT 7
34342: PUSH
34343: LD_INT 11
34345: PUSH
34346: LD_INT 12
34348: PUSH
34349: LD_INT 15
34351: PUSH
34352: LD_INT 16
34354: PUSH
34355: LD_INT 20
34357: PUSH
34358: LD_INT 21
34360: PUSH
34361: LD_INT 22
34363: PUSH
34364: LD_INT 23
34366: PUSH
34367: LD_INT 25
34369: PUSH
34370: LD_INT 26
34372: PUSH
34373: LD_INT 30
34375: PUSH
34376: LD_INT 31
34378: PUSH
34379: LD_INT 32
34381: PUSH
34382: LD_INT 33
34384: PUSH
34385: LD_INT 34
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 101
34411: PUSH
34412: LD_INT 102
34414: PUSH
34415: LD_INT 103
34417: PUSH
34418: LD_INT 106
34420: PUSH
34421: LD_INT 108
34423: PUSH
34424: LD_INT 112
34426: PUSH
34427: LD_INT 113
34429: PUSH
34430: LD_INT 114
34432: PUSH
34433: LD_INT 116
34435: PUSH
34436: LD_INT 117
34438: PUSH
34439: LD_INT 118
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: ST_TO_ADDR
34459: GO 35090
34461: LD_INT 17
34463: DOUBLE
34464: EQUAL
34465: IFTRUE 34469
34467: GO 34693
34469: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
34470: LD_ADDR_VAR 0 2
34474: PUSH
34475: LD_INT 1
34477: PUSH
34478: LD_INT 2
34480: PUSH
34481: LD_INT 3
34483: PUSH
34484: LD_INT 4
34486: PUSH
34487: LD_INT 5
34489: PUSH
34490: LD_INT 6
34492: PUSH
34493: LD_INT 7
34495: PUSH
34496: LD_INT 8
34498: PUSH
34499: LD_INT 9
34501: PUSH
34502: LD_INT 10
34504: PUSH
34505: LD_INT 11
34507: PUSH
34508: LD_INT 12
34510: PUSH
34511: LD_INT 13
34513: PUSH
34514: LD_INT 14
34516: PUSH
34517: LD_INT 15
34519: PUSH
34520: LD_INT 16
34522: PUSH
34523: LD_INT 17
34525: PUSH
34526: LD_INT 18
34528: PUSH
34529: LD_INT 19
34531: PUSH
34532: LD_INT 20
34534: PUSH
34535: LD_INT 21
34537: PUSH
34538: LD_INT 22
34540: PUSH
34541: LD_INT 23
34543: PUSH
34544: LD_INT 24
34546: PUSH
34547: LD_INT 25
34549: PUSH
34550: LD_INT 26
34552: PUSH
34553: LD_INT 27
34555: PUSH
34556: LD_INT 28
34558: PUSH
34559: LD_INT 29
34561: PUSH
34562: LD_INT 30
34564: PUSH
34565: LD_INT 31
34567: PUSH
34568: LD_INT 32
34570: PUSH
34571: LD_INT 33
34573: PUSH
34574: LD_INT 34
34576: PUSH
34577: LD_INT 36
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 101
34619: PUSH
34620: LD_INT 102
34622: PUSH
34623: LD_INT 103
34625: PUSH
34626: LD_INT 104
34628: PUSH
34629: LD_INT 105
34631: PUSH
34632: LD_INT 106
34634: PUSH
34635: LD_INT 107
34637: PUSH
34638: LD_INT 108
34640: PUSH
34641: LD_INT 109
34643: PUSH
34644: LD_INT 110
34646: PUSH
34647: LD_INT 111
34649: PUSH
34650: LD_INT 112
34652: PUSH
34653: LD_INT 113
34655: PUSH
34656: LD_INT 114
34658: PUSH
34659: LD_INT 116
34661: PUSH
34662: LD_INT 117
34664: PUSH
34665: LD_INT 118
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: ST_TO_ADDR
34691: GO 35090
34693: LD_INT 18
34695: DOUBLE
34696: EQUAL
34697: IFTRUE 34701
34699: GO 34849
34701: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
34702: LD_ADDR_VAR 0 2
34706: PUSH
34707: LD_INT 2
34709: PUSH
34710: LD_INT 4
34712: PUSH
34713: LD_INT 5
34715: PUSH
34716: LD_INT 7
34718: PUSH
34719: LD_INT 11
34721: PUSH
34722: LD_INT 12
34724: PUSH
34725: LD_INT 15
34727: PUSH
34728: LD_INT 16
34730: PUSH
34731: LD_INT 20
34733: PUSH
34734: LD_INT 21
34736: PUSH
34737: LD_INT 22
34739: PUSH
34740: LD_INT 23
34742: PUSH
34743: LD_INT 25
34745: PUSH
34746: LD_INT 26
34748: PUSH
34749: LD_INT 30
34751: PUSH
34752: LD_INT 31
34754: PUSH
34755: LD_INT 32
34757: PUSH
34758: LD_INT 33
34760: PUSH
34761: LD_INT 34
34763: PUSH
34764: LD_INT 35
34766: PUSH
34767: LD_INT 36
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 101
34795: PUSH
34796: LD_INT 102
34798: PUSH
34799: LD_INT 103
34801: PUSH
34802: LD_INT 106
34804: PUSH
34805: LD_INT 108
34807: PUSH
34808: LD_INT 112
34810: PUSH
34811: LD_INT 113
34813: PUSH
34814: LD_INT 114
34816: PUSH
34817: LD_INT 115
34819: PUSH
34820: LD_INT 116
34822: PUSH
34823: LD_INT 117
34825: PUSH
34826: LD_INT 118
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: ST_TO_ADDR
34847: GO 35090
34849: LD_INT 19
34851: DOUBLE
34852: EQUAL
34853: IFTRUE 34857
34855: GO 35089
34857: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
34858: LD_ADDR_VAR 0 2
34862: PUSH
34863: LD_INT 1
34865: PUSH
34866: LD_INT 2
34868: PUSH
34869: LD_INT 3
34871: PUSH
34872: LD_INT 4
34874: PUSH
34875: LD_INT 5
34877: PUSH
34878: LD_INT 6
34880: PUSH
34881: LD_INT 7
34883: PUSH
34884: LD_INT 8
34886: PUSH
34887: LD_INT 9
34889: PUSH
34890: LD_INT 10
34892: PUSH
34893: LD_INT 11
34895: PUSH
34896: LD_INT 12
34898: PUSH
34899: LD_INT 13
34901: PUSH
34902: LD_INT 14
34904: PUSH
34905: LD_INT 15
34907: PUSH
34908: LD_INT 16
34910: PUSH
34911: LD_INT 17
34913: PUSH
34914: LD_INT 18
34916: PUSH
34917: LD_INT 19
34919: PUSH
34920: LD_INT 20
34922: PUSH
34923: LD_INT 21
34925: PUSH
34926: LD_INT 22
34928: PUSH
34929: LD_INT 23
34931: PUSH
34932: LD_INT 24
34934: PUSH
34935: LD_INT 25
34937: PUSH
34938: LD_INT 26
34940: PUSH
34941: LD_INT 27
34943: PUSH
34944: LD_INT 28
34946: PUSH
34947: LD_INT 29
34949: PUSH
34950: LD_INT 30
34952: PUSH
34953: LD_INT 31
34955: PUSH
34956: LD_INT 32
34958: PUSH
34959: LD_INT 33
34961: PUSH
34962: LD_INT 34
34964: PUSH
34965: LD_INT 35
34967: PUSH
34968: LD_INT 36
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 101
35011: PUSH
35012: LD_INT 102
35014: PUSH
35015: LD_INT 103
35017: PUSH
35018: LD_INT 104
35020: PUSH
35021: LD_INT 105
35023: PUSH
35024: LD_INT 106
35026: PUSH
35027: LD_INT 107
35029: PUSH
35030: LD_INT 108
35032: PUSH
35033: LD_INT 109
35035: PUSH
35036: LD_INT 110
35038: PUSH
35039: LD_INT 111
35041: PUSH
35042: LD_INT 112
35044: PUSH
35045: LD_INT 113
35047: PUSH
35048: LD_INT 114
35050: PUSH
35051: LD_INT 115
35053: PUSH
35054: LD_INT 116
35056: PUSH
35057: LD_INT 117
35059: PUSH
35060: LD_INT 118
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: ST_TO_ADDR
35087: GO 35090
35089: POP
// end else
35090: GO 35321
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
35092: LD_ADDR_VAR 0 2
35096: PUSH
35097: LD_INT 1
35099: PUSH
35100: LD_INT 2
35102: PUSH
35103: LD_INT 3
35105: PUSH
35106: LD_INT 4
35108: PUSH
35109: LD_INT 5
35111: PUSH
35112: LD_INT 6
35114: PUSH
35115: LD_INT 7
35117: PUSH
35118: LD_INT 8
35120: PUSH
35121: LD_INT 9
35123: PUSH
35124: LD_INT 10
35126: PUSH
35127: LD_INT 11
35129: PUSH
35130: LD_INT 12
35132: PUSH
35133: LD_INT 13
35135: PUSH
35136: LD_INT 14
35138: PUSH
35139: LD_INT 15
35141: PUSH
35142: LD_INT 16
35144: PUSH
35145: LD_INT 17
35147: PUSH
35148: LD_INT 18
35150: PUSH
35151: LD_INT 19
35153: PUSH
35154: LD_INT 20
35156: PUSH
35157: LD_INT 21
35159: PUSH
35160: LD_INT 22
35162: PUSH
35163: LD_INT 23
35165: PUSH
35166: LD_INT 24
35168: PUSH
35169: LD_INT 25
35171: PUSH
35172: LD_INT 26
35174: PUSH
35175: LD_INT 27
35177: PUSH
35178: LD_INT 28
35180: PUSH
35181: LD_INT 29
35183: PUSH
35184: LD_INT 30
35186: PUSH
35187: LD_INT 31
35189: PUSH
35190: LD_INT 32
35192: PUSH
35193: LD_INT 33
35195: PUSH
35196: LD_INT 34
35198: PUSH
35199: LD_INT 35
35201: PUSH
35202: LD_INT 36
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 101
35245: PUSH
35246: LD_INT 102
35248: PUSH
35249: LD_INT 103
35251: PUSH
35252: LD_INT 104
35254: PUSH
35255: LD_INT 105
35257: PUSH
35258: LD_INT 106
35260: PUSH
35261: LD_INT 107
35263: PUSH
35264: LD_INT 108
35266: PUSH
35267: LD_INT 109
35269: PUSH
35270: LD_INT 110
35272: PUSH
35273: LD_INT 111
35275: PUSH
35276: LD_INT 112
35278: PUSH
35279: LD_INT 113
35281: PUSH
35282: LD_INT 114
35284: PUSH
35285: LD_INT 115
35287: PUSH
35288: LD_INT 116
35290: PUSH
35291: LD_INT 117
35293: PUSH
35294: LD_INT 118
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: ST_TO_ADDR
// if result then
35321: LD_VAR 0 2
35325: IFFALSE 36111
// begin normal :=  ;
35327: LD_ADDR_VAR 0 5
35331: PUSH
35332: LD_STRING 
35334: ST_TO_ADDR
// hardcore :=  ;
35335: LD_ADDR_VAR 0 6
35339: PUSH
35340: LD_STRING 
35342: ST_TO_ADDR
// active :=  ;
35343: LD_ADDR_VAR 0 7
35347: PUSH
35348: LD_STRING 
35350: ST_TO_ADDR
// for i = 1 to normalCounter do
35351: LD_ADDR_VAR 0 8
35355: PUSH
35356: DOUBLE
35357: LD_INT 1
35359: DEC
35360: ST_TO_ADDR
35361: LD_EXP 72
35365: PUSH
35366: FOR_TO
35367: IFFALSE 35468
// begin tmp := 0 ;
35369: LD_ADDR_VAR 0 3
35373: PUSH
35374: LD_STRING 0
35376: ST_TO_ADDR
// if result [ 1 ] then
35377: LD_VAR 0 2
35381: PUSH
35382: LD_INT 1
35384: ARRAY
35385: IFFALSE 35450
// if result [ 1 ] [ 1 ] = i then
35387: LD_VAR 0 2
35391: PUSH
35392: LD_INT 1
35394: ARRAY
35395: PUSH
35396: LD_INT 1
35398: ARRAY
35399: PUSH
35400: LD_VAR 0 8
35404: EQUAL
35405: IFFALSE 35450
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
35407: LD_ADDR_VAR 0 2
35411: PUSH
35412: LD_VAR 0 2
35416: PPUSH
35417: LD_INT 1
35419: PPUSH
35420: LD_VAR 0 2
35424: PUSH
35425: LD_INT 1
35427: ARRAY
35428: PPUSH
35429: LD_INT 1
35431: PPUSH
35432: CALL_OW 3
35436: PPUSH
35437: CALL_OW 1
35441: ST_TO_ADDR
// tmp := 1 ;
35442: LD_ADDR_VAR 0 3
35446: PUSH
35447: LD_STRING 1
35449: ST_TO_ADDR
// end ; normal := normal & tmp ;
35450: LD_ADDR_VAR 0 5
35454: PUSH
35455: LD_VAR 0 5
35459: PUSH
35460: LD_VAR 0 3
35464: STR
35465: ST_TO_ADDR
// end ;
35466: GO 35366
35468: POP
35469: POP
// for i = 1 to hardcoreCounter do
35470: LD_ADDR_VAR 0 8
35474: PUSH
35475: DOUBLE
35476: LD_INT 1
35478: DEC
35479: ST_TO_ADDR
35480: LD_EXP 73
35484: PUSH
35485: FOR_TO
35486: IFFALSE 35591
// begin tmp := 0 ;
35488: LD_ADDR_VAR 0 3
35492: PUSH
35493: LD_STRING 0
35495: ST_TO_ADDR
// if result [ 2 ] then
35496: LD_VAR 0 2
35500: PUSH
35501: LD_INT 2
35503: ARRAY
35504: IFFALSE 35573
// if result [ 2 ] [ 1 ] = 100 + i then
35506: LD_VAR 0 2
35510: PUSH
35511: LD_INT 2
35513: ARRAY
35514: PUSH
35515: LD_INT 1
35517: ARRAY
35518: PUSH
35519: LD_INT 100
35521: PUSH
35522: LD_VAR 0 8
35526: PLUS
35527: EQUAL
35528: IFFALSE 35573
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
35530: LD_ADDR_VAR 0 2
35534: PUSH
35535: LD_VAR 0 2
35539: PPUSH
35540: LD_INT 2
35542: PPUSH
35543: LD_VAR 0 2
35547: PUSH
35548: LD_INT 2
35550: ARRAY
35551: PPUSH
35552: LD_INT 1
35554: PPUSH
35555: CALL_OW 3
35559: PPUSH
35560: CALL_OW 1
35564: ST_TO_ADDR
// tmp := 1 ;
35565: LD_ADDR_VAR 0 3
35569: PUSH
35570: LD_STRING 1
35572: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
35573: LD_ADDR_VAR 0 6
35577: PUSH
35578: LD_VAR 0 6
35582: PUSH
35583: LD_VAR 0 3
35587: STR
35588: ST_TO_ADDR
// end ;
35589: GO 35485
35591: POP
35592: POP
// if isGameLoad then
35593: LD_VAR 0 1
35597: IFFALSE 36072
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
35599: LD_ADDR_VAR 0 4
35603: PUSH
35604: LD_EXP 76
35608: PUSH
35609: LD_EXP 75
35613: PUSH
35614: LD_EXP 77
35618: PUSH
35619: LD_EXP 74
35623: PUSH
35624: LD_EXP 78
35628: PUSH
35629: LD_EXP 79
35633: PUSH
35634: LD_EXP 80
35638: PUSH
35639: LD_EXP 81
35643: PUSH
35644: LD_EXP 82
35648: PUSH
35649: LD_EXP 83
35653: PUSH
35654: LD_EXP 84
35658: PUSH
35659: LD_EXP 85
35663: PUSH
35664: LD_EXP 86
35668: PUSH
35669: LD_EXP 87
35673: PUSH
35674: LD_EXP 95
35678: PUSH
35679: LD_EXP 96
35683: PUSH
35684: LD_EXP 97
35688: PUSH
35689: LD_EXP 98
35693: PUSH
35694: LD_EXP 100
35698: PUSH
35699: LD_EXP 101
35703: PUSH
35704: LD_EXP 102
35708: PUSH
35709: LD_EXP 105
35713: PUSH
35714: LD_EXP 107
35718: PUSH
35719: LD_EXP 108
35723: PUSH
35724: LD_EXP 109
35728: PUSH
35729: LD_EXP 111
35733: PUSH
35734: LD_EXP 112
35738: PUSH
35739: LD_EXP 115
35743: PUSH
35744: LD_EXP 116
35748: PUSH
35749: LD_EXP 117
35753: PUSH
35754: LD_EXP 118
35758: PUSH
35759: LD_EXP 119
35763: PUSH
35764: LD_EXP 120
35768: PUSH
35769: LD_EXP 121
35773: PUSH
35774: LD_EXP 122
35778: PUSH
35779: LD_EXP 123
35783: PUSH
35784: LD_EXP 88
35788: PUSH
35789: LD_EXP 89
35793: PUSH
35794: LD_EXP 92
35798: PUSH
35799: LD_EXP 93
35803: PUSH
35804: LD_EXP 94
35808: PUSH
35809: LD_EXP 90
35813: PUSH
35814: LD_EXP 91
35818: PUSH
35819: LD_EXP 99
35823: PUSH
35824: LD_EXP 103
35828: PUSH
35829: LD_EXP 104
35833: PUSH
35834: LD_EXP 106
35838: PUSH
35839: LD_EXP 110
35843: PUSH
35844: LD_EXP 113
35848: PUSH
35849: LD_EXP 114
35853: PUSH
35854: LD_EXP 124
35858: PUSH
35859: LD_EXP 125
35863: PUSH
35864: LD_EXP 126
35868: PUSH
35869: LD_EXP 127
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: ST_TO_ADDR
// tmp :=  ;
35930: LD_ADDR_VAR 0 3
35934: PUSH
35935: LD_STRING 
35937: ST_TO_ADDR
// for i = 1 to normalCounter do
35938: LD_ADDR_VAR 0 8
35942: PUSH
35943: DOUBLE
35944: LD_INT 1
35946: DEC
35947: ST_TO_ADDR
35948: LD_EXP 72
35952: PUSH
35953: FOR_TO
35954: IFFALSE 35990
// begin if flags [ i ] then
35956: LD_VAR 0 4
35960: PUSH
35961: LD_VAR 0 8
35965: ARRAY
35966: IFFALSE 35988
// tmp := tmp & i & ; ;
35968: LD_ADDR_VAR 0 3
35972: PUSH
35973: LD_VAR 0 3
35977: PUSH
35978: LD_VAR 0 8
35982: STR
35983: PUSH
35984: LD_STRING ;
35986: STR
35987: ST_TO_ADDR
// end ;
35988: GO 35953
35990: POP
35991: POP
// for i = 1 to hardcoreCounter do
35992: LD_ADDR_VAR 0 8
35996: PUSH
35997: DOUBLE
35998: LD_INT 1
36000: DEC
36001: ST_TO_ADDR
36002: LD_EXP 73
36006: PUSH
36007: FOR_TO
36008: IFFALSE 36054
// begin if flags [ normalCounter + i ] then
36010: LD_VAR 0 4
36014: PUSH
36015: LD_EXP 72
36019: PUSH
36020: LD_VAR 0 8
36024: PLUS
36025: ARRAY
36026: IFFALSE 36052
// tmp := tmp & ( 100 + i ) & ; ;
36028: LD_ADDR_VAR 0 3
36032: PUSH
36033: LD_VAR 0 3
36037: PUSH
36038: LD_INT 100
36040: PUSH
36041: LD_VAR 0 8
36045: PLUS
36046: STR
36047: PUSH
36048: LD_STRING ;
36050: STR
36051: ST_TO_ADDR
// end ;
36052: GO 36007
36054: POP
36055: POP
// if tmp then
36056: LD_VAR 0 3
36060: IFFALSE 36072
// active := tmp ;
36062: LD_ADDR_VAR 0 7
36066: PUSH
36067: LD_VAR 0 3
36071: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
36072: LD_STRING getStreamItemsFromMission("
36074: PUSH
36075: LD_VAR 0 5
36079: STR
36080: PUSH
36081: LD_STRING ","
36083: STR
36084: PUSH
36085: LD_VAR 0 6
36089: STR
36090: PUSH
36091: LD_STRING ","
36093: STR
36094: PUSH
36095: LD_VAR 0 7
36099: STR
36100: PUSH
36101: LD_STRING ")
36103: STR
36104: PPUSH
36105: CALL_OW 559
// end else
36109: GO 36118
// ToLua ( getStreamItemsFromMission("","","") ) ;
36111: LD_STRING getStreamItemsFromMission("","","")
36113: PPUSH
36114: CALL_OW 559
// end ;
36118: LD_VAR 0 2
36122: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
36123: LD_EXP 71
36127: PUSH
36128: LD_EXP 76
36132: AND
36133: IFFALSE 36257
36135: GO 36137
36137: DISABLE
36138: LD_INT 0
36140: PPUSH
36141: PPUSH
// begin enable ;
36142: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
36143: LD_ADDR_VAR 0 2
36147: PUSH
36148: LD_INT 22
36150: PUSH
36151: LD_OWVAR 2
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 2
36162: PUSH
36163: LD_INT 34
36165: PUSH
36166: LD_INT 7
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 34
36175: PUSH
36176: LD_INT 45
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 34
36185: PUSH
36186: LD_INT 28
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 34
36195: PUSH
36196: LD_INT 47
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PPUSH
36214: CALL_OW 69
36218: ST_TO_ADDR
// if not tmp then
36219: LD_VAR 0 2
36223: NOT
36224: IFFALSE 36228
// exit ;
36226: GO 36257
// for i in tmp do
36228: LD_ADDR_VAR 0 1
36232: PUSH
36233: LD_VAR 0 2
36237: PUSH
36238: FOR_IN
36239: IFFALSE 36255
// begin SetLives ( i , 0 ) ;
36241: LD_VAR 0 1
36245: PPUSH
36246: LD_INT 0
36248: PPUSH
36249: CALL_OW 234
// end ;
36253: GO 36238
36255: POP
36256: POP
// end ;
36257: PPOPN 2
36259: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
36260: LD_EXP 71
36264: PUSH
36265: LD_EXP 77
36269: AND
36270: IFFALSE 36354
36272: GO 36274
36274: DISABLE
36275: LD_INT 0
36277: PPUSH
36278: PPUSH
// begin enable ;
36279: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
36280: LD_ADDR_VAR 0 2
36284: PUSH
36285: LD_INT 22
36287: PUSH
36288: LD_OWVAR 2
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 32
36299: PUSH
36300: LD_INT 3
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PPUSH
36311: CALL_OW 69
36315: ST_TO_ADDR
// if not tmp then
36316: LD_VAR 0 2
36320: NOT
36321: IFFALSE 36325
// exit ;
36323: GO 36354
// for i in tmp do
36325: LD_ADDR_VAR 0 1
36329: PUSH
36330: LD_VAR 0 2
36334: PUSH
36335: FOR_IN
36336: IFFALSE 36352
// begin SetLives ( i , 0 ) ;
36338: LD_VAR 0 1
36342: PPUSH
36343: LD_INT 0
36345: PPUSH
36346: CALL_OW 234
// end ;
36350: GO 36335
36352: POP
36353: POP
// end ;
36354: PPOPN 2
36356: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
36357: LD_EXP 71
36361: PUSH
36362: LD_EXP 74
36366: AND
36367: IFFALSE 36460
36369: GO 36371
36371: DISABLE
36372: LD_INT 0
36374: PPUSH
// begin enable ;
36375: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
36376: LD_ADDR_VAR 0 1
36380: PUSH
36381: LD_INT 22
36383: PUSH
36384: LD_OWVAR 2
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 2
36395: PUSH
36396: LD_INT 25
36398: PUSH
36399: LD_INT 5
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 25
36408: PUSH
36409: LD_INT 9
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 25
36418: PUSH
36419: LD_INT 8
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PPUSH
36436: CALL_OW 69
36440: PUSH
36441: FOR_IN
36442: IFFALSE 36458
// begin SetClass ( i , 1 ) ;
36444: LD_VAR 0 1
36448: PPUSH
36449: LD_INT 1
36451: PPUSH
36452: CALL_OW 336
// end ;
36456: GO 36441
36458: POP
36459: POP
// end ;
36460: PPOPN 1
36462: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
36463: LD_EXP 71
36467: PUSH
36468: LD_EXP 75
36472: AND
36473: PUSH
36474: LD_OWVAR 65
36478: PUSH
36479: LD_INT 7
36481: LESS
36482: AND
36483: IFFALSE 36497
36485: GO 36487
36487: DISABLE
// begin enable ;
36488: ENABLE
// game_speed := 7 ;
36489: LD_ADDR_OWVAR 65
36493: PUSH
36494: LD_INT 7
36496: ST_TO_ADDR
// end ;
36497: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
36498: LD_EXP 71
36502: PUSH
36503: LD_EXP 78
36507: AND
36508: IFFALSE 36710
36510: GO 36512
36512: DISABLE
36513: LD_INT 0
36515: PPUSH
36516: PPUSH
36517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
36518: LD_ADDR_VAR 0 3
36522: PUSH
36523: LD_INT 81
36525: PUSH
36526: LD_OWVAR 2
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 21
36537: PUSH
36538: LD_INT 1
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PPUSH
36549: CALL_OW 69
36553: ST_TO_ADDR
// if not tmp then
36554: LD_VAR 0 3
36558: NOT
36559: IFFALSE 36563
// exit ;
36561: GO 36710
// if tmp > 5 then
36563: LD_VAR 0 3
36567: PUSH
36568: LD_INT 5
36570: GREATER
36571: IFFALSE 36583
// k := 5 else
36573: LD_ADDR_VAR 0 2
36577: PUSH
36578: LD_INT 5
36580: ST_TO_ADDR
36581: GO 36593
// k := tmp ;
36583: LD_ADDR_VAR 0 2
36587: PUSH
36588: LD_VAR 0 3
36592: ST_TO_ADDR
// for i := 1 to k do
36593: LD_ADDR_VAR 0 1
36597: PUSH
36598: DOUBLE
36599: LD_INT 1
36601: DEC
36602: ST_TO_ADDR
36603: LD_VAR 0 2
36607: PUSH
36608: FOR_TO
36609: IFFALSE 36708
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
36611: LD_VAR 0 3
36615: PUSH
36616: LD_VAR 0 1
36620: ARRAY
36621: PPUSH
36622: LD_VAR 0 1
36626: PUSH
36627: LD_INT 4
36629: MOD
36630: PUSH
36631: LD_INT 1
36633: PLUS
36634: PPUSH
36635: CALL_OW 259
36639: PUSH
36640: LD_INT 10
36642: LESS
36643: IFFALSE 36706
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
36645: LD_VAR 0 3
36649: PUSH
36650: LD_VAR 0 1
36654: ARRAY
36655: PPUSH
36656: LD_VAR 0 1
36660: PUSH
36661: LD_INT 4
36663: MOD
36664: PUSH
36665: LD_INT 1
36667: PLUS
36668: PPUSH
36669: LD_VAR 0 3
36673: PUSH
36674: LD_VAR 0 1
36678: ARRAY
36679: PPUSH
36680: LD_VAR 0 1
36684: PUSH
36685: LD_INT 4
36687: MOD
36688: PUSH
36689: LD_INT 1
36691: PLUS
36692: PPUSH
36693: CALL_OW 259
36697: PUSH
36698: LD_INT 1
36700: PLUS
36701: PPUSH
36702: CALL_OW 237
36706: GO 36608
36708: POP
36709: POP
// end ;
36710: PPOPN 3
36712: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
36713: LD_EXP 71
36717: PUSH
36718: LD_EXP 79
36722: AND
36723: IFFALSE 36743
36725: GO 36727
36727: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
36728: LD_INT 4
36730: PPUSH
36731: LD_OWVAR 2
36735: PPUSH
36736: LD_INT 0
36738: PPUSH
36739: CALL_OW 324
36743: END
// every 0 0$1 trigger StreamModeActive and sShovel do
36744: LD_EXP 71
36748: PUSH
36749: LD_EXP 108
36753: AND
36754: IFFALSE 36774
36756: GO 36758
36758: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
36759: LD_INT 19
36761: PPUSH
36762: LD_OWVAR 2
36766: PPUSH
36767: LD_INT 0
36769: PPUSH
36770: CALL_OW 324
36774: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
36775: LD_EXP 71
36779: PUSH
36780: LD_EXP 80
36784: AND
36785: IFFALSE 36887
36787: GO 36789
36789: DISABLE
36790: LD_INT 0
36792: PPUSH
36793: PPUSH
// begin enable ;
36794: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
36795: LD_ADDR_VAR 0 2
36799: PUSH
36800: LD_INT 22
36802: PUSH
36803: LD_OWVAR 2
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 2
36814: PUSH
36815: LD_INT 34
36817: PUSH
36818: LD_INT 11
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 34
36827: PUSH
36828: LD_INT 30
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: LIST
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PPUSH
36844: CALL_OW 69
36848: ST_TO_ADDR
// if not tmp then
36849: LD_VAR 0 2
36853: NOT
36854: IFFALSE 36858
// exit ;
36856: GO 36887
// for i in tmp do
36858: LD_ADDR_VAR 0 1
36862: PUSH
36863: LD_VAR 0 2
36867: PUSH
36868: FOR_IN
36869: IFFALSE 36885
// begin SetLives ( i , 0 ) ;
36871: LD_VAR 0 1
36875: PPUSH
36876: LD_INT 0
36878: PPUSH
36879: CALL_OW 234
// end ;
36883: GO 36868
36885: POP
36886: POP
// end ;
36887: PPOPN 2
36889: END
// every 0 0$1 trigger StreamModeActive and sBunker do
36890: LD_EXP 71
36894: PUSH
36895: LD_EXP 81
36899: AND
36900: IFFALSE 36920
36902: GO 36904
36904: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
36905: LD_INT 32
36907: PPUSH
36908: LD_OWVAR 2
36912: PPUSH
36913: LD_INT 0
36915: PPUSH
36916: CALL_OW 324
36920: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
36921: LD_EXP 71
36925: PUSH
36926: LD_EXP 82
36930: AND
36931: IFFALSE 37112
36933: GO 36935
36935: DISABLE
36936: LD_INT 0
36938: PPUSH
36939: PPUSH
36940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
36941: LD_ADDR_VAR 0 2
36945: PUSH
36946: LD_INT 22
36948: PUSH
36949: LD_OWVAR 2
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 33
36960: PUSH
36961: LD_INT 3
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PPUSH
36972: CALL_OW 69
36976: ST_TO_ADDR
// if not tmp then
36977: LD_VAR 0 2
36981: NOT
36982: IFFALSE 36986
// exit ;
36984: GO 37112
// side := 0 ;
36986: LD_ADDR_VAR 0 3
36990: PUSH
36991: LD_INT 0
36993: ST_TO_ADDR
// for i := 1 to 8 do
36994: LD_ADDR_VAR 0 1
36998: PUSH
36999: DOUBLE
37000: LD_INT 1
37002: DEC
37003: ST_TO_ADDR
37004: LD_INT 8
37006: PUSH
37007: FOR_TO
37008: IFFALSE 37056
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
37010: LD_OWVAR 2
37014: PUSH
37015: LD_VAR 0 1
37019: NONEQUAL
37020: PUSH
37021: LD_OWVAR 2
37025: PPUSH
37026: LD_VAR 0 1
37030: PPUSH
37031: CALL_OW 81
37035: PUSH
37036: LD_INT 2
37038: EQUAL
37039: AND
37040: IFFALSE 37054
// begin side := i ;
37042: LD_ADDR_VAR 0 3
37046: PUSH
37047: LD_VAR 0 1
37051: ST_TO_ADDR
// break ;
37052: GO 37056
// end ;
37054: GO 37007
37056: POP
37057: POP
// if not side then
37058: LD_VAR 0 3
37062: NOT
37063: IFFALSE 37067
// exit ;
37065: GO 37112
// for i := 1 to tmp do
37067: LD_ADDR_VAR 0 1
37071: PUSH
37072: DOUBLE
37073: LD_INT 1
37075: DEC
37076: ST_TO_ADDR
37077: LD_VAR 0 2
37081: PUSH
37082: FOR_TO
37083: IFFALSE 37110
// if Prob ( 60 ) then
37085: LD_INT 60
37087: PPUSH
37088: CALL_OW 13
37092: IFFALSE 37108
// SetSide ( i , side ) ;
37094: LD_VAR 0 1
37098: PPUSH
37099: LD_VAR 0 3
37103: PPUSH
37104: CALL_OW 235
37108: GO 37082
37110: POP
37111: POP
// end ;
37112: PPOPN 3
37114: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
37115: LD_EXP 71
37119: PUSH
37120: LD_EXP 84
37124: AND
37125: IFFALSE 37244
37127: GO 37129
37129: DISABLE
37130: LD_INT 0
37132: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
37133: LD_ADDR_VAR 0 1
37137: PUSH
37138: LD_INT 22
37140: PUSH
37141: LD_OWVAR 2
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 21
37152: PUSH
37153: LD_INT 1
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 3
37162: PUSH
37163: LD_INT 23
37165: PUSH
37166: LD_INT 0
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: LIST
37181: PPUSH
37182: CALL_OW 69
37186: PUSH
37187: FOR_IN
37188: IFFALSE 37242
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
37190: LD_VAR 0 1
37194: PPUSH
37195: CALL_OW 257
37199: PUSH
37200: LD_INT 1
37202: PUSH
37203: LD_INT 2
37205: PUSH
37206: LD_INT 3
37208: PUSH
37209: LD_INT 4
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: IN
37218: IFFALSE 37240
// SetClass ( un , rand ( 1 , 4 ) ) ;
37220: LD_VAR 0 1
37224: PPUSH
37225: LD_INT 1
37227: PPUSH
37228: LD_INT 4
37230: PPUSH
37231: CALL_OW 12
37235: PPUSH
37236: CALL_OW 336
37240: GO 37187
37242: POP
37243: POP
// end ;
37244: PPOPN 1
37246: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
37247: LD_EXP 71
37251: PUSH
37252: LD_EXP 83
37256: AND
37257: IFFALSE 37336
37259: GO 37261
37261: DISABLE
37262: LD_INT 0
37264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
37265: LD_ADDR_VAR 0 1
37269: PUSH
37270: LD_INT 22
37272: PUSH
37273: LD_OWVAR 2
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 21
37284: PUSH
37285: LD_INT 3
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PPUSH
37296: CALL_OW 69
37300: ST_TO_ADDR
// if not tmp then
37301: LD_VAR 0 1
37305: NOT
37306: IFFALSE 37310
// exit ;
37308: GO 37336
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
37310: LD_VAR 0 1
37314: PUSH
37315: LD_INT 1
37317: PPUSH
37318: LD_VAR 0 1
37322: PPUSH
37323: CALL_OW 12
37327: ARRAY
37328: PPUSH
37329: LD_INT 100
37331: PPUSH
37332: CALL_OW 234
// end ;
37336: PPOPN 1
37338: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
37339: LD_EXP 71
37343: PUSH
37344: LD_EXP 85
37348: AND
37349: IFFALSE 37447
37351: GO 37353
37353: DISABLE
37354: LD_INT 0
37356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
37357: LD_ADDR_VAR 0 1
37361: PUSH
37362: LD_INT 22
37364: PUSH
37365: LD_OWVAR 2
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 21
37376: PUSH
37377: LD_INT 1
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PPUSH
37388: CALL_OW 69
37392: ST_TO_ADDR
// if not tmp then
37393: LD_VAR 0 1
37397: NOT
37398: IFFALSE 37402
// exit ;
37400: GO 37447
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
37402: LD_VAR 0 1
37406: PUSH
37407: LD_INT 1
37409: PPUSH
37410: LD_VAR 0 1
37414: PPUSH
37415: CALL_OW 12
37419: ARRAY
37420: PPUSH
37421: LD_INT 1
37423: PPUSH
37424: LD_INT 4
37426: PPUSH
37427: CALL_OW 12
37431: PPUSH
37432: LD_INT 3000
37434: PPUSH
37435: LD_INT 9000
37437: PPUSH
37438: CALL_OW 12
37442: PPUSH
37443: CALL_OW 492
// end ;
37447: PPOPN 1
37449: END
// every 0 0$1 trigger StreamModeActive and sDepot do
37450: LD_EXP 71
37454: PUSH
37455: LD_EXP 86
37459: AND
37460: IFFALSE 37480
37462: GO 37464
37464: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
37465: LD_INT 1
37467: PPUSH
37468: LD_OWVAR 2
37472: PPUSH
37473: LD_INT 0
37475: PPUSH
37476: CALL_OW 324
37480: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
37481: LD_EXP 71
37485: PUSH
37486: LD_EXP 87
37490: AND
37491: IFFALSE 37574
37493: GO 37495
37495: DISABLE
37496: LD_INT 0
37498: PPUSH
37499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
37500: LD_ADDR_VAR 0 2
37504: PUSH
37505: LD_INT 22
37507: PUSH
37508: LD_OWVAR 2
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 21
37519: PUSH
37520: LD_INT 3
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PPUSH
37531: CALL_OW 69
37535: ST_TO_ADDR
// if not tmp then
37536: LD_VAR 0 2
37540: NOT
37541: IFFALSE 37545
// exit ;
37543: GO 37574
// for i in tmp do
37545: LD_ADDR_VAR 0 1
37549: PUSH
37550: LD_VAR 0 2
37554: PUSH
37555: FOR_IN
37556: IFFALSE 37572
// SetBLevel ( i , 10 ) ;
37558: LD_VAR 0 1
37562: PPUSH
37563: LD_INT 10
37565: PPUSH
37566: CALL_OW 241
37570: GO 37555
37572: POP
37573: POP
// end ;
37574: PPOPN 2
37576: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
37577: LD_EXP 71
37581: PUSH
37582: LD_EXP 88
37586: AND
37587: IFFALSE 37698
37589: GO 37591
37591: DISABLE
37592: LD_INT 0
37594: PPUSH
37595: PPUSH
37596: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37597: LD_ADDR_VAR 0 3
37601: PUSH
37602: LD_INT 22
37604: PUSH
37605: LD_OWVAR 2
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 25
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PPUSH
37628: CALL_OW 69
37632: ST_TO_ADDR
// if not tmp then
37633: LD_VAR 0 3
37637: NOT
37638: IFFALSE 37642
// exit ;
37640: GO 37698
// un := tmp [ rand ( 1 , tmp ) ] ;
37642: LD_ADDR_VAR 0 2
37646: PUSH
37647: LD_VAR 0 3
37651: PUSH
37652: LD_INT 1
37654: PPUSH
37655: LD_VAR 0 3
37659: PPUSH
37660: CALL_OW 12
37664: ARRAY
37665: ST_TO_ADDR
// if Crawls ( un ) then
37666: LD_VAR 0 2
37670: PPUSH
37671: CALL_OW 318
37675: IFFALSE 37686
// ComWalk ( un ) ;
37677: LD_VAR 0 2
37681: PPUSH
37682: CALL_OW 138
// SetClass ( un , class_sniper ) ;
37686: LD_VAR 0 2
37690: PPUSH
37691: LD_INT 5
37693: PPUSH
37694: CALL_OW 336
// end ;
37698: PPOPN 3
37700: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
37701: LD_EXP 71
37705: PUSH
37706: LD_EXP 89
37710: AND
37711: PUSH
37712: LD_OWVAR 67
37716: PUSH
37717: LD_INT 4
37719: LESS
37720: AND
37721: IFFALSE 37740
37723: GO 37725
37725: DISABLE
// begin Difficulty := Difficulty + 1 ;
37726: LD_ADDR_OWVAR 67
37730: PUSH
37731: LD_OWVAR 67
37735: PUSH
37736: LD_INT 1
37738: PLUS
37739: ST_TO_ADDR
// end ;
37740: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
37741: LD_EXP 71
37745: PUSH
37746: LD_EXP 90
37750: AND
37751: IFFALSE 37854
37753: GO 37755
37755: DISABLE
37756: LD_INT 0
37758: PPUSH
// begin for i := 1 to 5 do
37759: LD_ADDR_VAR 0 1
37763: PUSH
37764: DOUBLE
37765: LD_INT 1
37767: DEC
37768: ST_TO_ADDR
37769: LD_INT 5
37771: PUSH
37772: FOR_TO
37773: IFFALSE 37852
// begin uc_nation := nation_nature ;
37775: LD_ADDR_OWVAR 21
37779: PUSH
37780: LD_INT 0
37782: ST_TO_ADDR
// uc_side := 0 ;
37783: LD_ADDR_OWVAR 20
37787: PUSH
37788: LD_INT 0
37790: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37791: LD_ADDR_OWVAR 29
37795: PUSH
37796: LD_INT 12
37798: PUSH
37799: LD_INT 12
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: ST_TO_ADDR
// hc_agressivity := 20 ;
37806: LD_ADDR_OWVAR 35
37810: PUSH
37811: LD_INT 20
37813: ST_TO_ADDR
// hc_class := class_tiger ;
37814: LD_ADDR_OWVAR 28
37818: PUSH
37819: LD_INT 14
37821: ST_TO_ADDR
// hc_gallery :=  ;
37822: LD_ADDR_OWVAR 33
37826: PUSH
37827: LD_STRING 
37829: ST_TO_ADDR
// hc_name :=  ;
37830: LD_ADDR_OWVAR 26
37834: PUSH
37835: LD_STRING 
37837: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
37838: CALL_OW 44
37842: PPUSH
37843: LD_INT 0
37845: PPUSH
37846: CALL_OW 51
// end ;
37850: GO 37772
37852: POP
37853: POP
// end ;
37854: PPOPN 1
37856: END
// every 0 0$1 trigger StreamModeActive and sBomb do
37857: LD_EXP 71
37861: PUSH
37862: LD_EXP 91
37866: AND
37867: IFFALSE 37876
37869: GO 37871
37871: DISABLE
// StreamSibBomb ;
37872: CALL 37877 0 0
37876: END
// export function StreamSibBomb ; var i , x , y ; begin
37877: LD_INT 0
37879: PPUSH
37880: PPUSH
37881: PPUSH
37882: PPUSH
// result := false ;
37883: LD_ADDR_VAR 0 1
37887: PUSH
37888: LD_INT 0
37890: ST_TO_ADDR
// for i := 1 to 16 do
37891: LD_ADDR_VAR 0 2
37895: PUSH
37896: DOUBLE
37897: LD_INT 1
37899: DEC
37900: ST_TO_ADDR
37901: LD_INT 16
37903: PUSH
37904: FOR_TO
37905: IFFALSE 38104
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
37907: LD_ADDR_VAR 0 3
37911: PUSH
37912: LD_INT 10
37914: PUSH
37915: LD_INT 20
37917: PUSH
37918: LD_INT 30
37920: PUSH
37921: LD_INT 40
37923: PUSH
37924: LD_INT 50
37926: PUSH
37927: LD_INT 60
37929: PUSH
37930: LD_INT 70
37932: PUSH
37933: LD_INT 80
37935: PUSH
37936: LD_INT 90
37938: PUSH
37939: LD_INT 100
37941: PUSH
37942: LD_INT 110
37944: PUSH
37945: LD_INT 120
37947: PUSH
37948: LD_INT 130
37950: PUSH
37951: LD_INT 140
37953: PUSH
37954: LD_INT 150
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 1
37976: PPUSH
37977: LD_INT 15
37979: PPUSH
37980: CALL_OW 12
37984: ARRAY
37985: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
37986: LD_ADDR_VAR 0 4
37990: PUSH
37991: LD_INT 10
37993: PUSH
37994: LD_INT 20
37996: PUSH
37997: LD_INT 30
37999: PUSH
38000: LD_INT 40
38002: PUSH
38003: LD_INT 50
38005: PUSH
38006: LD_INT 60
38008: PUSH
38009: LD_INT 70
38011: PUSH
38012: LD_INT 80
38014: PUSH
38015: LD_INT 90
38017: PUSH
38018: LD_INT 100
38020: PUSH
38021: LD_INT 110
38023: PUSH
38024: LD_INT 120
38026: PUSH
38027: LD_INT 130
38029: PUSH
38030: LD_INT 140
38032: PUSH
38033: LD_INT 150
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 1
38055: PPUSH
38056: LD_INT 15
38058: PPUSH
38059: CALL_OW 12
38063: ARRAY
38064: ST_TO_ADDR
// if ValidHex ( x , y ) then
38065: LD_VAR 0 3
38069: PPUSH
38070: LD_VAR 0 4
38074: PPUSH
38075: CALL_OW 488
38079: IFFALSE 38102
// begin result := [ x , y ] ;
38081: LD_ADDR_VAR 0 1
38085: PUSH
38086: LD_VAR 0 3
38090: PUSH
38091: LD_VAR 0 4
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: ST_TO_ADDR
// break ;
38100: GO 38104
// end ; end ;
38102: GO 37904
38104: POP
38105: POP
// if result then
38106: LD_VAR 0 1
38110: IFFALSE 38170
// begin ToLua ( playSibBomb() ) ;
38112: LD_STRING playSibBomb()
38114: PPUSH
38115: CALL_OW 559
// wait ( 0 0$14 ) ;
38119: LD_INT 490
38121: PPUSH
38122: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
38126: LD_VAR 0 1
38130: PUSH
38131: LD_INT 1
38133: ARRAY
38134: PPUSH
38135: LD_VAR 0 1
38139: PUSH
38140: LD_INT 2
38142: ARRAY
38143: PPUSH
38144: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
38148: LD_VAR 0 1
38152: PUSH
38153: LD_INT 1
38155: ARRAY
38156: PPUSH
38157: LD_VAR 0 1
38161: PUSH
38162: LD_INT 2
38164: ARRAY
38165: PPUSH
38166: CALL_OW 429
// end ; end ;
38170: LD_VAR 0 1
38174: RET
// every 0 0$1 trigger StreamModeActive and sReset do
38175: LD_EXP 71
38179: PUSH
38180: LD_EXP 93
38184: AND
38185: IFFALSE 38197
38187: GO 38189
38189: DISABLE
// YouLost (  ) ;
38190: LD_STRING 
38192: PPUSH
38193: CALL_OW 104
38197: END
// every 0 0$1 trigger StreamModeActive and sFog do
38198: LD_EXP 71
38202: PUSH
38203: LD_EXP 92
38207: AND
38208: IFFALSE 38222
38210: GO 38212
38212: DISABLE
// FogOff ( your_side ) ;
38213: LD_OWVAR 2
38217: PPUSH
38218: CALL_OW 344
38222: END
// every 0 0$1 trigger StreamModeActive and sSun do
38223: LD_EXP 71
38227: PUSH
38228: LD_EXP 94
38232: AND
38233: IFFALSE 38261
38235: GO 38237
38237: DISABLE
// begin solar_recharge_percent := 0 ;
38238: LD_ADDR_OWVAR 79
38242: PUSH
38243: LD_INT 0
38245: ST_TO_ADDR
// wait ( 5 5$00 ) ;
38246: LD_INT 10500
38248: PPUSH
38249: CALL_OW 67
// solar_recharge_percent := 100 ;
38253: LD_ADDR_OWVAR 79
38257: PUSH
38258: LD_INT 100
38260: ST_TO_ADDR
// end ;
38261: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
38262: LD_EXP 71
38266: PUSH
38267: LD_EXP 95
38271: AND
38272: IFFALSE 38511
38274: GO 38276
38276: DISABLE
38277: LD_INT 0
38279: PPUSH
38280: PPUSH
38281: PPUSH
// begin tmp := [ ] ;
38282: LD_ADDR_VAR 0 3
38286: PUSH
38287: EMPTY
38288: ST_TO_ADDR
// for i := 1 to 6 do
38289: LD_ADDR_VAR 0 1
38293: PUSH
38294: DOUBLE
38295: LD_INT 1
38297: DEC
38298: ST_TO_ADDR
38299: LD_INT 6
38301: PUSH
38302: FOR_TO
38303: IFFALSE 38408
// begin uc_nation := nation_nature ;
38305: LD_ADDR_OWVAR 21
38309: PUSH
38310: LD_INT 0
38312: ST_TO_ADDR
// uc_side := 0 ;
38313: LD_ADDR_OWVAR 20
38317: PUSH
38318: LD_INT 0
38320: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
38321: LD_ADDR_OWVAR 29
38325: PUSH
38326: LD_INT 12
38328: PUSH
38329: LD_INT 12
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: ST_TO_ADDR
// hc_agressivity := 20 ;
38336: LD_ADDR_OWVAR 35
38340: PUSH
38341: LD_INT 20
38343: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
38344: LD_ADDR_OWVAR 28
38348: PUSH
38349: LD_INT 17
38351: ST_TO_ADDR
// hc_gallery :=  ;
38352: LD_ADDR_OWVAR 33
38356: PUSH
38357: LD_STRING 
38359: ST_TO_ADDR
// hc_name :=  ;
38360: LD_ADDR_OWVAR 26
38364: PUSH
38365: LD_STRING 
38367: ST_TO_ADDR
// un := CreateHuman ;
38368: LD_ADDR_VAR 0 2
38372: PUSH
38373: CALL_OW 44
38377: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
38378: LD_VAR 0 2
38382: PPUSH
38383: LD_INT 1
38385: PPUSH
38386: CALL_OW 51
// tmp := tmp ^ un ;
38390: LD_ADDR_VAR 0 3
38394: PUSH
38395: LD_VAR 0 3
38399: PUSH
38400: LD_VAR 0 2
38404: ADD
38405: ST_TO_ADDR
// end ;
38406: GO 38302
38408: POP
38409: POP
// repeat wait ( 0 0$1 ) ;
38410: LD_INT 35
38412: PPUSH
38413: CALL_OW 67
// for un in tmp do
38417: LD_ADDR_VAR 0 2
38421: PUSH
38422: LD_VAR 0 3
38426: PUSH
38427: FOR_IN
38428: IFFALSE 38502
// begin if IsDead ( un ) then
38430: LD_VAR 0 2
38434: PPUSH
38435: CALL_OW 301
38439: IFFALSE 38459
// begin tmp := tmp diff un ;
38441: LD_ADDR_VAR 0 3
38445: PUSH
38446: LD_VAR 0 3
38450: PUSH
38451: LD_VAR 0 2
38455: DIFF
38456: ST_TO_ADDR
// continue ;
38457: GO 38427
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
38459: LD_VAR 0 2
38463: PPUSH
38464: LD_INT 3
38466: PUSH
38467: LD_INT 22
38469: PUSH
38470: LD_INT 0
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PPUSH
38481: CALL_OW 69
38485: PPUSH
38486: LD_VAR 0 2
38490: PPUSH
38491: CALL_OW 74
38495: PPUSH
38496: CALL_OW 115
// end ;
38500: GO 38427
38502: POP
38503: POP
// until not tmp ;
38504: LD_VAR 0 3
38508: NOT
38509: IFFALSE 38410
// end ;
38511: PPOPN 3
38513: END
// every 0 0$1 trigger StreamModeActive and sTroll do
38514: LD_EXP 71
38518: PUSH
38519: LD_EXP 96
38523: AND
38524: IFFALSE 38578
38526: GO 38528
38528: DISABLE
// begin ToLua ( displayTroll(); ) ;
38529: LD_STRING displayTroll();
38531: PPUSH
38532: CALL_OW 559
// wait ( 3 3$00 ) ;
38536: LD_INT 6300
38538: PPUSH
38539: CALL_OW 67
// ToLua ( hideTroll(); ) ;
38543: LD_STRING hideTroll();
38545: PPUSH
38546: CALL_OW 559
// wait ( 1 1$00 ) ;
38550: LD_INT 2100
38552: PPUSH
38553: CALL_OW 67
// ToLua ( displayTroll(); ) ;
38557: LD_STRING displayTroll();
38559: PPUSH
38560: CALL_OW 559
// wait ( 1 1$00 ) ;
38564: LD_INT 2100
38566: PPUSH
38567: CALL_OW 67
// ToLua ( hideTroll(); ) ;
38571: LD_STRING hideTroll();
38573: PPUSH
38574: CALL_OW 559
// end ;
38578: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
38579: LD_EXP 71
38583: PUSH
38584: LD_EXP 97
38588: AND
38589: IFFALSE 38652
38591: GO 38593
38593: DISABLE
38594: LD_INT 0
38596: PPUSH
// begin p := 0 ;
38597: LD_ADDR_VAR 0 1
38601: PUSH
38602: LD_INT 0
38604: ST_TO_ADDR
// repeat game_speed := 1 ;
38605: LD_ADDR_OWVAR 65
38609: PUSH
38610: LD_INT 1
38612: ST_TO_ADDR
// wait ( 0 0$1 ) ;
38613: LD_INT 35
38615: PPUSH
38616: CALL_OW 67
// p := p + 1 ;
38620: LD_ADDR_VAR 0 1
38624: PUSH
38625: LD_VAR 0 1
38629: PUSH
38630: LD_INT 1
38632: PLUS
38633: ST_TO_ADDR
// until p >= 60 ;
38634: LD_VAR 0 1
38638: PUSH
38639: LD_INT 60
38641: GREATEREQUAL
38642: IFFALSE 38605
// game_speed := 4 ;
38644: LD_ADDR_OWVAR 65
38648: PUSH
38649: LD_INT 4
38651: ST_TO_ADDR
// end ;
38652: PPOPN 1
38654: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
38655: LD_EXP 71
38659: PUSH
38660: LD_EXP 98
38664: AND
38665: IFFALSE 38811
38667: GO 38669
38669: DISABLE
38670: LD_INT 0
38672: PPUSH
38673: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38674: LD_ADDR_VAR 0 1
38678: PUSH
38679: LD_INT 22
38681: PUSH
38682: LD_OWVAR 2
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 2
38693: PUSH
38694: LD_INT 30
38696: PUSH
38697: LD_INT 0
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 30
38706: PUSH
38707: LD_INT 1
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: LIST
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PPUSH
38723: CALL_OW 69
38727: ST_TO_ADDR
// if not depot then
38728: LD_VAR 0 1
38732: NOT
38733: IFFALSE 38737
// exit ;
38735: GO 38811
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
38737: LD_ADDR_VAR 0 2
38741: PUSH
38742: LD_VAR 0 1
38746: PUSH
38747: LD_INT 1
38749: PPUSH
38750: LD_VAR 0 1
38754: PPUSH
38755: CALL_OW 12
38759: ARRAY
38760: PPUSH
38761: CALL_OW 274
38765: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
38766: LD_VAR 0 2
38770: PPUSH
38771: LD_INT 1
38773: PPUSH
38774: LD_INT 0
38776: PPUSH
38777: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
38781: LD_VAR 0 2
38785: PPUSH
38786: LD_INT 2
38788: PPUSH
38789: LD_INT 0
38791: PPUSH
38792: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
38796: LD_VAR 0 2
38800: PPUSH
38801: LD_INT 3
38803: PPUSH
38804: LD_INT 0
38806: PPUSH
38807: CALL_OW 277
// end ;
38811: PPOPN 2
38813: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
38814: LD_EXP 71
38818: PUSH
38819: LD_EXP 99
38823: AND
38824: IFFALSE 38921
38826: GO 38828
38828: DISABLE
38829: LD_INT 0
38831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38832: LD_ADDR_VAR 0 1
38836: PUSH
38837: LD_INT 22
38839: PUSH
38840: LD_OWVAR 2
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 21
38851: PUSH
38852: LD_INT 1
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 3
38861: PUSH
38862: LD_INT 23
38864: PUSH
38865: LD_INT 0
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: LIST
38880: PPUSH
38881: CALL_OW 69
38885: ST_TO_ADDR
// if not tmp then
38886: LD_VAR 0 1
38890: NOT
38891: IFFALSE 38895
// exit ;
38893: GO 38921
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
38895: LD_VAR 0 1
38899: PUSH
38900: LD_INT 1
38902: PPUSH
38903: LD_VAR 0 1
38907: PPUSH
38908: CALL_OW 12
38912: ARRAY
38913: PPUSH
38914: LD_INT 200
38916: PPUSH
38917: CALL_OW 234
// end ;
38921: PPOPN 1
38923: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
38924: LD_EXP 71
38928: PUSH
38929: LD_EXP 100
38933: AND
38934: IFFALSE 39013
38936: GO 38938
38938: DISABLE
38939: LD_INT 0
38941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
38942: LD_ADDR_VAR 0 1
38946: PUSH
38947: LD_INT 22
38949: PUSH
38950: LD_OWVAR 2
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 21
38961: PUSH
38962: LD_INT 2
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PPUSH
38973: CALL_OW 69
38977: ST_TO_ADDR
// if not tmp then
38978: LD_VAR 0 1
38982: NOT
38983: IFFALSE 38987
// exit ;
38985: GO 39013
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
38987: LD_VAR 0 1
38991: PUSH
38992: LD_INT 1
38994: PPUSH
38995: LD_VAR 0 1
38999: PPUSH
39000: CALL_OW 12
39004: ARRAY
39005: PPUSH
39006: LD_INT 60
39008: PPUSH
39009: CALL_OW 234
// end ;
39013: PPOPN 1
39015: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
39016: LD_EXP 71
39020: PUSH
39021: LD_EXP 101
39025: AND
39026: IFFALSE 39125
39028: GO 39030
39030: DISABLE
39031: LD_INT 0
39033: PPUSH
39034: PPUSH
// begin enable ;
39035: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
39036: LD_ADDR_VAR 0 1
39040: PUSH
39041: LD_INT 22
39043: PUSH
39044: LD_OWVAR 2
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 61
39055: PUSH
39056: EMPTY
39057: LIST
39058: PUSH
39059: LD_INT 33
39061: PUSH
39062: LD_INT 2
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: LIST
39073: PPUSH
39074: CALL_OW 69
39078: ST_TO_ADDR
// if not tmp then
39079: LD_VAR 0 1
39083: NOT
39084: IFFALSE 39088
// exit ;
39086: GO 39125
// for i in tmp do
39088: LD_ADDR_VAR 0 2
39092: PUSH
39093: LD_VAR 0 1
39097: PUSH
39098: FOR_IN
39099: IFFALSE 39123
// if IsControledBy ( i ) then
39101: LD_VAR 0 2
39105: PPUSH
39106: CALL_OW 312
39110: IFFALSE 39121
// ComUnlink ( i ) ;
39112: LD_VAR 0 2
39116: PPUSH
39117: CALL_OW 136
39121: GO 39098
39123: POP
39124: POP
// end ;
39125: PPOPN 2
39127: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
39128: LD_EXP 71
39132: PUSH
39133: LD_EXP 102
39137: AND
39138: IFFALSE 39278
39140: GO 39142
39142: DISABLE
39143: LD_INT 0
39145: PPUSH
39146: PPUSH
// begin ToLua ( displayPowell(); ) ;
39147: LD_STRING displayPowell();
39149: PPUSH
39150: CALL_OW 559
// uc_side := 0 ;
39154: LD_ADDR_OWVAR 20
39158: PUSH
39159: LD_INT 0
39161: ST_TO_ADDR
// uc_nation := 2 ;
39162: LD_ADDR_OWVAR 21
39166: PUSH
39167: LD_INT 2
39169: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
39170: LD_ADDR_OWVAR 37
39174: PUSH
39175: LD_INT 14
39177: ST_TO_ADDR
// vc_engine := engine_siberite ;
39178: LD_ADDR_OWVAR 39
39182: PUSH
39183: LD_INT 3
39185: ST_TO_ADDR
// vc_control := control_apeman ;
39186: LD_ADDR_OWVAR 38
39190: PUSH
39191: LD_INT 5
39193: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
39194: LD_ADDR_OWVAR 40
39198: PUSH
39199: LD_INT 29
39201: ST_TO_ADDR
// un := CreateVehicle ;
39202: LD_ADDR_VAR 0 2
39206: PUSH
39207: CALL_OW 45
39211: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
39212: LD_VAR 0 2
39216: PPUSH
39217: LD_INT 1
39219: PPUSH
39220: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
39224: LD_INT 35
39226: PPUSH
39227: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
39231: LD_VAR 0 2
39235: PPUSH
39236: LD_INT 22
39238: PUSH
39239: LD_OWVAR 2
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PPUSH
39248: CALL_OW 69
39252: PPUSH
39253: LD_VAR 0 2
39257: PPUSH
39258: CALL_OW 74
39262: PPUSH
39263: CALL_OW 115
// until IsDead ( un ) ;
39267: LD_VAR 0 2
39271: PPUSH
39272: CALL_OW 301
39276: IFFALSE 39224
// end ;
39278: PPOPN 2
39280: END
// every 0 0$1 trigger StreamModeActive and sStu do
39281: LD_EXP 71
39285: PUSH
39286: LD_EXP 110
39290: AND
39291: IFFALSE 39307
39293: GO 39295
39295: DISABLE
// begin ToLua ( displayStucuk(); ) ;
39296: LD_STRING displayStucuk();
39298: PPUSH
39299: CALL_OW 559
// ResetFog ;
39303: CALL_OW 335
// end ;
39307: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
39308: LD_EXP 71
39312: PUSH
39313: LD_EXP 103
39317: AND
39318: IFFALSE 39459
39320: GO 39322
39322: DISABLE
39323: LD_INT 0
39325: PPUSH
39326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
39327: LD_ADDR_VAR 0 2
39331: PUSH
39332: LD_INT 22
39334: PUSH
39335: LD_OWVAR 2
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 21
39346: PUSH
39347: LD_INT 1
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PPUSH
39358: CALL_OW 69
39362: ST_TO_ADDR
// if not tmp then
39363: LD_VAR 0 2
39367: NOT
39368: IFFALSE 39372
// exit ;
39370: GO 39459
// un := tmp [ rand ( 1 , tmp ) ] ;
39372: LD_ADDR_VAR 0 1
39376: PUSH
39377: LD_VAR 0 2
39381: PUSH
39382: LD_INT 1
39384: PPUSH
39385: LD_VAR 0 2
39389: PPUSH
39390: CALL_OW 12
39394: ARRAY
39395: ST_TO_ADDR
// SetSide ( un , 0 ) ;
39396: LD_VAR 0 1
39400: PPUSH
39401: LD_INT 0
39403: PPUSH
39404: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
39408: LD_VAR 0 1
39412: PPUSH
39413: LD_OWVAR 3
39417: PUSH
39418: LD_VAR 0 1
39422: DIFF
39423: PPUSH
39424: LD_VAR 0 1
39428: PPUSH
39429: CALL_OW 74
39433: PPUSH
39434: CALL_OW 115
// wait ( 0 0$20 ) ;
39438: LD_INT 700
39440: PPUSH
39441: CALL_OW 67
// SetSide ( un , your_side ) ;
39445: LD_VAR 0 1
39449: PPUSH
39450: LD_OWVAR 2
39454: PPUSH
39455: CALL_OW 235
// end ;
39459: PPOPN 2
39461: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
39462: LD_EXP 71
39466: PUSH
39467: LD_EXP 104
39471: AND
39472: IFFALSE 39578
39474: GO 39476
39476: DISABLE
39477: LD_INT 0
39479: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39480: LD_ADDR_VAR 0 1
39484: PUSH
39485: LD_INT 22
39487: PUSH
39488: LD_OWVAR 2
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 2
39499: PUSH
39500: LD_INT 30
39502: PUSH
39503: LD_INT 0
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 30
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: LIST
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PPUSH
39529: CALL_OW 69
39533: ST_TO_ADDR
// if not depot then
39534: LD_VAR 0 1
39538: NOT
39539: IFFALSE 39543
// exit ;
39541: GO 39578
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
39543: LD_VAR 0 1
39547: PUSH
39548: LD_INT 1
39550: ARRAY
39551: PPUSH
39552: CALL_OW 250
39556: PPUSH
39557: LD_VAR 0 1
39561: PUSH
39562: LD_INT 1
39564: ARRAY
39565: PPUSH
39566: CALL_OW 251
39570: PPUSH
39571: LD_INT 70
39573: PPUSH
39574: CALL_OW 495
// end ;
39578: PPOPN 1
39580: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
39581: LD_EXP 71
39585: PUSH
39586: LD_EXP 105
39590: AND
39591: IFFALSE 39802
39593: GO 39595
39595: DISABLE
39596: LD_INT 0
39598: PPUSH
39599: PPUSH
39600: PPUSH
39601: PPUSH
39602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
39603: LD_ADDR_VAR 0 5
39607: PUSH
39608: LD_INT 22
39610: PUSH
39611: LD_OWVAR 2
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 21
39622: PUSH
39623: LD_INT 1
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PPUSH
39634: CALL_OW 69
39638: ST_TO_ADDR
// if not tmp then
39639: LD_VAR 0 5
39643: NOT
39644: IFFALSE 39648
// exit ;
39646: GO 39802
// for i in tmp do
39648: LD_ADDR_VAR 0 1
39652: PUSH
39653: LD_VAR 0 5
39657: PUSH
39658: FOR_IN
39659: IFFALSE 39800
// begin d := rand ( 0 , 5 ) ;
39661: LD_ADDR_VAR 0 4
39665: PUSH
39666: LD_INT 0
39668: PPUSH
39669: LD_INT 5
39671: PPUSH
39672: CALL_OW 12
39676: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
39677: LD_ADDR_VAR 0 2
39681: PUSH
39682: LD_VAR 0 1
39686: PPUSH
39687: CALL_OW 250
39691: PPUSH
39692: LD_VAR 0 4
39696: PPUSH
39697: LD_INT 3
39699: PPUSH
39700: LD_INT 12
39702: PPUSH
39703: CALL_OW 12
39707: PPUSH
39708: CALL_OW 272
39712: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
39713: LD_ADDR_VAR 0 3
39717: PUSH
39718: LD_VAR 0 1
39722: PPUSH
39723: CALL_OW 251
39727: PPUSH
39728: LD_VAR 0 4
39732: PPUSH
39733: LD_INT 3
39735: PPUSH
39736: LD_INT 12
39738: PPUSH
39739: CALL_OW 12
39743: PPUSH
39744: CALL_OW 273
39748: ST_TO_ADDR
// if ValidHex ( x , y ) then
39749: LD_VAR 0 2
39753: PPUSH
39754: LD_VAR 0 3
39758: PPUSH
39759: CALL_OW 488
39763: IFFALSE 39798
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
39765: LD_VAR 0 1
39769: PPUSH
39770: LD_VAR 0 2
39774: PPUSH
39775: LD_VAR 0 3
39779: PPUSH
39780: LD_INT 3
39782: PPUSH
39783: LD_INT 6
39785: PPUSH
39786: CALL_OW 12
39790: PPUSH
39791: LD_INT 1
39793: PPUSH
39794: CALL_OW 483
// end ;
39798: GO 39658
39800: POP
39801: POP
// end ;
39802: PPOPN 5
39804: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
39805: LD_EXP 71
39809: PUSH
39810: LD_EXP 106
39814: AND
39815: IFFALSE 39909
39817: GO 39819
39819: DISABLE
39820: LD_INT 0
39822: PPUSH
39823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
39824: LD_ADDR_VAR 0 2
39828: PUSH
39829: LD_INT 22
39831: PUSH
39832: LD_OWVAR 2
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 32
39843: PUSH
39844: LD_INT 1
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 21
39853: PUSH
39854: LD_INT 2
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: LIST
39865: PPUSH
39866: CALL_OW 69
39870: ST_TO_ADDR
// if not tmp then
39871: LD_VAR 0 2
39875: NOT
39876: IFFALSE 39880
// exit ;
39878: GO 39909
// for i in tmp do
39880: LD_ADDR_VAR 0 1
39884: PUSH
39885: LD_VAR 0 2
39889: PUSH
39890: FOR_IN
39891: IFFALSE 39907
// SetFuel ( i , 0 ) ;
39893: LD_VAR 0 1
39897: PPUSH
39898: LD_INT 0
39900: PPUSH
39901: CALL_OW 240
39905: GO 39890
39907: POP
39908: POP
// end ;
39909: PPOPN 2
39911: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
39912: LD_EXP 71
39916: PUSH
39917: LD_EXP 107
39921: AND
39922: IFFALSE 39988
39924: GO 39926
39926: DISABLE
39927: LD_INT 0
39929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
39930: LD_ADDR_VAR 0 1
39934: PUSH
39935: LD_INT 22
39937: PUSH
39938: LD_OWVAR 2
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 30
39949: PUSH
39950: LD_INT 29
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PPUSH
39961: CALL_OW 69
39965: ST_TO_ADDR
// if not tmp then
39966: LD_VAR 0 1
39970: NOT
39971: IFFALSE 39975
// exit ;
39973: GO 39988
// DestroyUnit ( tmp [ 1 ] ) ;
39975: LD_VAR 0 1
39979: PUSH
39980: LD_INT 1
39982: ARRAY
39983: PPUSH
39984: CALL_OW 65
// end ;
39988: PPOPN 1
39990: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
39991: LD_EXP 71
39995: PUSH
39996: LD_EXP 109
40000: AND
40001: IFFALSE 40130
40003: GO 40005
40005: DISABLE
40006: LD_INT 0
40008: PPUSH
// begin uc_side := 0 ;
40009: LD_ADDR_OWVAR 20
40013: PUSH
40014: LD_INT 0
40016: ST_TO_ADDR
// uc_nation := nation_arabian ;
40017: LD_ADDR_OWVAR 21
40021: PUSH
40022: LD_INT 2
40024: ST_TO_ADDR
// hc_gallery :=  ;
40025: LD_ADDR_OWVAR 33
40029: PUSH
40030: LD_STRING 
40032: ST_TO_ADDR
// hc_name :=  ;
40033: LD_ADDR_OWVAR 26
40037: PUSH
40038: LD_STRING 
40040: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
40041: LD_INT 1
40043: PPUSH
40044: LD_INT 11
40046: PPUSH
40047: LD_INT 10
40049: PPUSH
40050: CALL_OW 380
// un := CreateHuman ;
40054: LD_ADDR_VAR 0 1
40058: PUSH
40059: CALL_OW 44
40063: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
40064: LD_VAR 0 1
40068: PPUSH
40069: LD_INT 1
40071: PPUSH
40072: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
40076: LD_INT 35
40078: PPUSH
40079: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
40083: LD_VAR 0 1
40087: PPUSH
40088: LD_INT 22
40090: PUSH
40091: LD_OWVAR 2
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PPUSH
40100: CALL_OW 69
40104: PPUSH
40105: LD_VAR 0 1
40109: PPUSH
40110: CALL_OW 74
40114: PPUSH
40115: CALL_OW 115
// until IsDead ( un ) ;
40119: LD_VAR 0 1
40123: PPUSH
40124: CALL_OW 301
40128: IFFALSE 40076
// end ;
40130: PPOPN 1
40132: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
40133: LD_EXP 71
40137: PUSH
40138: LD_EXP 111
40142: AND
40143: IFFALSE 40155
40145: GO 40147
40147: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
40148: LD_STRING earthquake(getX(game), 0, 32)
40150: PPUSH
40151: CALL_OW 559
40155: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
40156: LD_EXP 71
40160: PUSH
40161: LD_EXP 112
40165: AND
40166: IFFALSE 40257
40168: GO 40170
40170: DISABLE
40171: LD_INT 0
40173: PPUSH
// begin enable ;
40174: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
40175: LD_ADDR_VAR 0 1
40179: PUSH
40180: LD_INT 22
40182: PUSH
40183: LD_OWVAR 2
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 21
40194: PUSH
40195: LD_INT 2
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 33
40204: PUSH
40205: LD_INT 3
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: LIST
40216: PPUSH
40217: CALL_OW 69
40221: ST_TO_ADDR
// if not tmp then
40222: LD_VAR 0 1
40226: NOT
40227: IFFALSE 40231
// exit ;
40229: GO 40257
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
40231: LD_VAR 0 1
40235: PUSH
40236: LD_INT 1
40238: PPUSH
40239: LD_VAR 0 1
40243: PPUSH
40244: CALL_OW 12
40248: ARRAY
40249: PPUSH
40250: LD_INT 1
40252: PPUSH
40253: CALL_OW 234
// end ;
40257: PPOPN 1
40259: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
40260: LD_EXP 71
40264: PUSH
40265: LD_EXP 113
40269: AND
40270: IFFALSE 40411
40272: GO 40274
40274: DISABLE
40275: LD_INT 0
40277: PPUSH
40278: PPUSH
40279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40280: LD_ADDR_VAR 0 3
40284: PUSH
40285: LD_INT 22
40287: PUSH
40288: LD_OWVAR 2
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 25
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PPUSH
40311: CALL_OW 69
40315: ST_TO_ADDR
// if not tmp then
40316: LD_VAR 0 3
40320: NOT
40321: IFFALSE 40325
// exit ;
40323: GO 40411
// un := tmp [ rand ( 1 , tmp ) ] ;
40325: LD_ADDR_VAR 0 2
40329: PUSH
40330: LD_VAR 0 3
40334: PUSH
40335: LD_INT 1
40337: PPUSH
40338: LD_VAR 0 3
40342: PPUSH
40343: CALL_OW 12
40347: ARRAY
40348: ST_TO_ADDR
// if Crawls ( un ) then
40349: LD_VAR 0 2
40353: PPUSH
40354: CALL_OW 318
40358: IFFALSE 40369
// ComWalk ( un ) ;
40360: LD_VAR 0 2
40364: PPUSH
40365: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
40369: LD_VAR 0 2
40373: PPUSH
40374: LD_INT 9
40376: PPUSH
40377: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
40381: LD_INT 28
40383: PPUSH
40384: LD_OWVAR 2
40388: PPUSH
40389: LD_INT 2
40391: PPUSH
40392: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
40396: LD_INT 29
40398: PPUSH
40399: LD_OWVAR 2
40403: PPUSH
40404: LD_INT 2
40406: PPUSH
40407: CALL_OW 322
// end ;
40411: PPOPN 3
40413: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
40414: LD_EXP 71
40418: PUSH
40419: LD_EXP 114
40423: AND
40424: IFFALSE 40535
40426: GO 40428
40428: DISABLE
40429: LD_INT 0
40431: PPUSH
40432: PPUSH
40433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40434: LD_ADDR_VAR 0 3
40438: PUSH
40439: LD_INT 22
40441: PUSH
40442: LD_OWVAR 2
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 25
40453: PUSH
40454: LD_INT 1
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PPUSH
40465: CALL_OW 69
40469: ST_TO_ADDR
// if not tmp then
40470: LD_VAR 0 3
40474: NOT
40475: IFFALSE 40479
// exit ;
40477: GO 40535
// un := tmp [ rand ( 1 , tmp ) ] ;
40479: LD_ADDR_VAR 0 2
40483: PUSH
40484: LD_VAR 0 3
40488: PUSH
40489: LD_INT 1
40491: PPUSH
40492: LD_VAR 0 3
40496: PPUSH
40497: CALL_OW 12
40501: ARRAY
40502: ST_TO_ADDR
// if Crawls ( un ) then
40503: LD_VAR 0 2
40507: PPUSH
40508: CALL_OW 318
40512: IFFALSE 40523
// ComWalk ( un ) ;
40514: LD_VAR 0 2
40518: PPUSH
40519: CALL_OW 138
// SetClass ( un , class_mortar ) ;
40523: LD_VAR 0 2
40527: PPUSH
40528: LD_INT 8
40530: PPUSH
40531: CALL_OW 336
// end ;
40535: PPOPN 3
40537: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
40538: LD_EXP 71
40542: PUSH
40543: LD_EXP 115
40547: AND
40548: IFFALSE 40692
40550: GO 40552
40552: DISABLE
40553: LD_INT 0
40555: PPUSH
40556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
40557: LD_ADDR_VAR 0 2
40561: PUSH
40562: LD_INT 22
40564: PUSH
40565: LD_OWVAR 2
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 21
40576: PUSH
40577: LD_INT 2
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 2
40586: PUSH
40587: LD_INT 34
40589: PUSH
40590: LD_INT 12
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 34
40599: PUSH
40600: LD_INT 51
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 34
40609: PUSH
40610: LD_INT 32
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: LIST
40627: PPUSH
40628: CALL_OW 69
40632: ST_TO_ADDR
// if not tmp then
40633: LD_VAR 0 2
40637: NOT
40638: IFFALSE 40642
// exit ;
40640: GO 40692
// for i in tmp do
40642: LD_ADDR_VAR 0 1
40646: PUSH
40647: LD_VAR 0 2
40651: PUSH
40652: FOR_IN
40653: IFFALSE 40690
// if GetCargo ( i , mat_artifact ) = 0 then
40655: LD_VAR 0 1
40659: PPUSH
40660: LD_INT 4
40662: PPUSH
40663: CALL_OW 289
40667: PUSH
40668: LD_INT 0
40670: EQUAL
40671: IFFALSE 40688
// SetCargo ( i , mat_siberit , 100 ) ;
40673: LD_VAR 0 1
40677: PPUSH
40678: LD_INT 3
40680: PPUSH
40681: LD_INT 100
40683: PPUSH
40684: CALL_OW 290
40688: GO 40652
40690: POP
40691: POP
// end ;
40692: PPOPN 2
40694: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
40695: LD_EXP 71
40699: PUSH
40700: LD_EXP 116
40704: AND
40705: IFFALSE 40888
40707: GO 40709
40709: DISABLE
40710: LD_INT 0
40712: PPUSH
40713: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
40714: LD_ADDR_VAR 0 2
40718: PUSH
40719: LD_INT 22
40721: PUSH
40722: LD_OWVAR 2
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PPUSH
40731: CALL_OW 69
40735: ST_TO_ADDR
// if not tmp then
40736: LD_VAR 0 2
40740: NOT
40741: IFFALSE 40745
// exit ;
40743: GO 40888
// for i := 1 to 2 do
40745: LD_ADDR_VAR 0 1
40749: PUSH
40750: DOUBLE
40751: LD_INT 1
40753: DEC
40754: ST_TO_ADDR
40755: LD_INT 2
40757: PUSH
40758: FOR_TO
40759: IFFALSE 40886
// begin uc_side := your_side ;
40761: LD_ADDR_OWVAR 20
40765: PUSH
40766: LD_OWVAR 2
40770: ST_TO_ADDR
// uc_nation := nation_american ;
40771: LD_ADDR_OWVAR 21
40775: PUSH
40776: LD_INT 1
40778: ST_TO_ADDR
// vc_chassis := us_morphling ;
40779: LD_ADDR_OWVAR 37
40783: PUSH
40784: LD_INT 5
40786: ST_TO_ADDR
// vc_engine := engine_siberite ;
40787: LD_ADDR_OWVAR 39
40791: PUSH
40792: LD_INT 3
40794: ST_TO_ADDR
// vc_control := control_computer ;
40795: LD_ADDR_OWVAR 38
40799: PUSH
40800: LD_INT 3
40802: ST_TO_ADDR
// vc_weapon := us_double_laser ;
40803: LD_ADDR_OWVAR 40
40807: PUSH
40808: LD_INT 10
40810: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
40811: LD_VAR 0 2
40815: PUSH
40816: LD_INT 1
40818: ARRAY
40819: PPUSH
40820: CALL_OW 310
40824: NOT
40825: IFFALSE 40872
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
40827: CALL_OW 45
40831: PPUSH
40832: LD_VAR 0 2
40836: PUSH
40837: LD_INT 1
40839: ARRAY
40840: PPUSH
40841: CALL_OW 250
40845: PPUSH
40846: LD_VAR 0 2
40850: PUSH
40851: LD_INT 1
40853: ARRAY
40854: PPUSH
40855: CALL_OW 251
40859: PPUSH
40860: LD_INT 12
40862: PPUSH
40863: LD_INT 1
40865: PPUSH
40866: CALL_OW 50
40870: GO 40884
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
40872: CALL_OW 45
40876: PPUSH
40877: LD_INT 1
40879: PPUSH
40880: CALL_OW 51
// end ;
40884: GO 40758
40886: POP
40887: POP
// end ;
40888: PPOPN 2
40890: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
40891: LD_EXP 71
40895: PUSH
40896: LD_EXP 117
40900: AND
40901: IFFALSE 41123
40903: GO 40905
40905: DISABLE
40906: LD_INT 0
40908: PPUSH
40909: PPUSH
40910: PPUSH
40911: PPUSH
40912: PPUSH
40913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
40914: LD_ADDR_VAR 0 6
40918: PUSH
40919: LD_INT 22
40921: PUSH
40922: LD_OWVAR 2
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 21
40933: PUSH
40934: LD_INT 1
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 3
40943: PUSH
40944: LD_INT 23
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: LIST
40962: PPUSH
40963: CALL_OW 69
40967: ST_TO_ADDR
// if not tmp then
40968: LD_VAR 0 6
40972: NOT
40973: IFFALSE 40977
// exit ;
40975: GO 41123
// s1 := rand ( 1 , 4 ) ;
40977: LD_ADDR_VAR 0 2
40981: PUSH
40982: LD_INT 1
40984: PPUSH
40985: LD_INT 4
40987: PPUSH
40988: CALL_OW 12
40992: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
40993: LD_ADDR_VAR 0 4
40997: PUSH
40998: LD_VAR 0 6
41002: PUSH
41003: LD_INT 1
41005: ARRAY
41006: PPUSH
41007: LD_VAR 0 2
41011: PPUSH
41012: CALL_OW 259
41016: ST_TO_ADDR
// if s1 = 1 then
41017: LD_VAR 0 2
41021: PUSH
41022: LD_INT 1
41024: EQUAL
41025: IFFALSE 41045
// s2 := rand ( 2 , 4 ) else
41027: LD_ADDR_VAR 0 3
41031: PUSH
41032: LD_INT 2
41034: PPUSH
41035: LD_INT 4
41037: PPUSH
41038: CALL_OW 12
41042: ST_TO_ADDR
41043: GO 41053
// s2 := 1 ;
41045: LD_ADDR_VAR 0 3
41049: PUSH
41050: LD_INT 1
41052: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
41053: LD_ADDR_VAR 0 5
41057: PUSH
41058: LD_VAR 0 6
41062: PUSH
41063: LD_INT 1
41065: ARRAY
41066: PPUSH
41067: LD_VAR 0 3
41071: PPUSH
41072: CALL_OW 259
41076: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
41077: LD_VAR 0 6
41081: PUSH
41082: LD_INT 1
41084: ARRAY
41085: PPUSH
41086: LD_VAR 0 2
41090: PPUSH
41091: LD_VAR 0 5
41095: PPUSH
41096: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
41100: LD_VAR 0 6
41104: PUSH
41105: LD_INT 1
41107: ARRAY
41108: PPUSH
41109: LD_VAR 0 3
41113: PPUSH
41114: LD_VAR 0 4
41118: PPUSH
41119: CALL_OW 237
// end ;
41123: PPOPN 6
41125: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
41126: LD_EXP 71
41130: PUSH
41131: LD_EXP 118
41135: AND
41136: IFFALSE 41215
41138: GO 41140
41140: DISABLE
41141: LD_INT 0
41143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
41144: LD_ADDR_VAR 0 1
41148: PUSH
41149: LD_INT 22
41151: PUSH
41152: LD_OWVAR 2
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 30
41163: PUSH
41164: LD_INT 3
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PPUSH
41175: CALL_OW 69
41179: ST_TO_ADDR
// if not tmp then
41180: LD_VAR 0 1
41184: NOT
41185: IFFALSE 41189
// exit ;
41187: GO 41215
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
41189: LD_VAR 0 1
41193: PUSH
41194: LD_INT 1
41196: PPUSH
41197: LD_VAR 0 1
41201: PPUSH
41202: CALL_OW 12
41206: ARRAY
41207: PPUSH
41208: LD_INT 1
41210: PPUSH
41211: CALL_OW 234
// end ;
41215: PPOPN 1
41217: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
41218: LD_EXP 71
41222: PUSH
41223: LD_EXP 119
41227: AND
41228: IFFALSE 41340
41230: GO 41232
41232: DISABLE
41233: LD_INT 0
41235: PPUSH
41236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
41237: LD_ADDR_VAR 0 2
41241: PUSH
41242: LD_INT 22
41244: PUSH
41245: LD_OWVAR 2
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 2
41256: PUSH
41257: LD_INT 30
41259: PUSH
41260: LD_INT 27
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 30
41269: PUSH
41270: LD_INT 26
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 30
41279: PUSH
41280: LD_INT 28
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PPUSH
41297: CALL_OW 69
41301: ST_TO_ADDR
// if not tmp then
41302: LD_VAR 0 2
41306: NOT
41307: IFFALSE 41311
// exit ;
41309: GO 41340
// for i in tmp do
41311: LD_ADDR_VAR 0 1
41315: PUSH
41316: LD_VAR 0 2
41320: PUSH
41321: FOR_IN
41322: IFFALSE 41338
// SetLives ( i , 1 ) ;
41324: LD_VAR 0 1
41328: PPUSH
41329: LD_INT 1
41331: PPUSH
41332: CALL_OW 234
41336: GO 41321
41338: POP
41339: POP
// end ;
41340: PPOPN 2
41342: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
41343: LD_EXP 71
41347: PUSH
41348: LD_EXP 120
41352: AND
41353: IFFALSE 41640
41355: GO 41357
41357: DISABLE
41358: LD_INT 0
41360: PPUSH
41361: PPUSH
41362: PPUSH
// begin i := rand ( 1 , 7 ) ;
41363: LD_ADDR_VAR 0 1
41367: PUSH
41368: LD_INT 1
41370: PPUSH
41371: LD_INT 7
41373: PPUSH
41374: CALL_OW 12
41378: ST_TO_ADDR
// case i of 1 :
41379: LD_VAR 0 1
41383: PUSH
41384: LD_INT 1
41386: DOUBLE
41387: EQUAL
41388: IFTRUE 41392
41390: GO 41402
41392: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
41393: LD_STRING earthquake(getX(game), 0, 32)
41395: PPUSH
41396: CALL_OW 559
41400: GO 41640
41402: LD_INT 2
41404: DOUBLE
41405: EQUAL
41406: IFTRUE 41410
41408: GO 41424
41410: POP
// begin ToLua ( displayStucuk(); ) ;
41411: LD_STRING displayStucuk();
41413: PPUSH
41414: CALL_OW 559
// ResetFog ;
41418: CALL_OW 335
// end ; 3 :
41422: GO 41640
41424: LD_INT 3
41426: DOUBLE
41427: EQUAL
41428: IFTRUE 41432
41430: GO 41536
41432: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41433: LD_ADDR_VAR 0 2
41437: PUSH
41438: LD_INT 22
41440: PUSH
41441: LD_OWVAR 2
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 25
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PPUSH
41464: CALL_OW 69
41468: ST_TO_ADDR
// if not tmp then
41469: LD_VAR 0 2
41473: NOT
41474: IFFALSE 41478
// exit ;
41476: GO 41640
// un := tmp [ rand ( 1 , tmp ) ] ;
41478: LD_ADDR_VAR 0 3
41482: PUSH
41483: LD_VAR 0 2
41487: PUSH
41488: LD_INT 1
41490: PPUSH
41491: LD_VAR 0 2
41495: PPUSH
41496: CALL_OW 12
41500: ARRAY
41501: ST_TO_ADDR
// if Crawls ( un ) then
41502: LD_VAR 0 3
41506: PPUSH
41507: CALL_OW 318
41511: IFFALSE 41522
// ComWalk ( un ) ;
41513: LD_VAR 0 3
41517: PPUSH
41518: CALL_OW 138
// SetClass ( un , class_mortar ) ;
41522: LD_VAR 0 3
41526: PPUSH
41527: LD_INT 8
41529: PPUSH
41530: CALL_OW 336
// end ; 4 :
41534: GO 41640
41536: LD_INT 4
41538: DOUBLE
41539: EQUAL
41540: IFTRUE 41544
41542: GO 41618
41544: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
41545: LD_ADDR_VAR 0 2
41549: PUSH
41550: LD_INT 22
41552: PUSH
41553: LD_OWVAR 2
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 30
41564: PUSH
41565: LD_INT 29
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PPUSH
41576: CALL_OW 69
41580: ST_TO_ADDR
// if not tmp then
41581: LD_VAR 0 2
41585: NOT
41586: IFFALSE 41590
// exit ;
41588: GO 41640
// CenterNowOnUnits ( tmp [ 1 ] ) ;
41590: LD_VAR 0 2
41594: PUSH
41595: LD_INT 1
41597: ARRAY
41598: PPUSH
41599: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
41603: LD_VAR 0 2
41607: PUSH
41608: LD_INT 1
41610: ARRAY
41611: PPUSH
41612: CALL_OW 65
// end ; 5 .. 7 :
41616: GO 41640
41618: LD_INT 5
41620: DOUBLE
41621: GREATEREQUAL
41622: IFFALSE 41630
41624: LD_INT 7
41626: DOUBLE
41627: LESSEQUAL
41628: IFTRUE 41632
41630: GO 41639
41632: POP
// StreamSibBomb ; end ;
41633: CALL 37877 0 0
41637: GO 41640
41639: POP
// end ;
41640: PPOPN 3
41642: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
41643: LD_EXP 71
41647: PUSH
41648: LD_EXP 121
41652: AND
41653: IFFALSE 41809
41655: GO 41657
41657: DISABLE
41658: LD_INT 0
41660: PPUSH
41661: PPUSH
41662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
41663: LD_ADDR_VAR 0 2
41667: PUSH
41668: LD_INT 81
41670: PUSH
41671: LD_OWVAR 2
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 2
41682: PUSH
41683: LD_INT 21
41685: PUSH
41686: LD_INT 1
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 21
41695: PUSH
41696: LD_INT 2
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: LIST
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PPUSH
41712: CALL_OW 69
41716: ST_TO_ADDR
// if not tmp then
41717: LD_VAR 0 2
41721: NOT
41722: IFFALSE 41726
// exit ;
41724: GO 41809
// p := 0 ;
41726: LD_ADDR_VAR 0 3
41730: PUSH
41731: LD_INT 0
41733: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
41734: LD_INT 35
41736: PPUSH
41737: CALL_OW 67
// p := p + 1 ;
41741: LD_ADDR_VAR 0 3
41745: PUSH
41746: LD_VAR 0 3
41750: PUSH
41751: LD_INT 1
41753: PLUS
41754: ST_TO_ADDR
// for i in tmp do
41755: LD_ADDR_VAR 0 1
41759: PUSH
41760: LD_VAR 0 2
41764: PUSH
41765: FOR_IN
41766: IFFALSE 41797
// if GetLives ( i ) < 1000 then
41768: LD_VAR 0 1
41772: PPUSH
41773: CALL_OW 256
41777: PUSH
41778: LD_INT 1000
41780: LESS
41781: IFFALSE 41795
// SetLives ( i , 1000 ) ;
41783: LD_VAR 0 1
41787: PPUSH
41788: LD_INT 1000
41790: PPUSH
41791: CALL_OW 234
41795: GO 41765
41797: POP
41798: POP
// until p > 20 ;
41799: LD_VAR 0 3
41803: PUSH
41804: LD_INT 20
41806: GREATER
41807: IFFALSE 41734
// end ;
41809: PPOPN 3
41811: END
// every 0 0$1 trigger StreamModeActive and sTime do
41812: LD_EXP 71
41816: PUSH
41817: LD_EXP 122
41821: AND
41822: IFFALSE 41857
41824: GO 41826
41826: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
41827: LD_INT 28
41829: PPUSH
41830: LD_OWVAR 2
41834: PPUSH
41835: LD_INT 2
41837: PPUSH
41838: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
41842: LD_INT 30
41844: PPUSH
41845: LD_OWVAR 2
41849: PPUSH
41850: LD_INT 2
41852: PPUSH
41853: CALL_OW 322
// end ;
41857: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
41858: LD_EXP 71
41862: PUSH
41863: LD_EXP 123
41867: AND
41868: IFFALSE 41989
41870: GO 41872
41872: DISABLE
41873: LD_INT 0
41875: PPUSH
41876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
41877: LD_ADDR_VAR 0 2
41881: PUSH
41882: LD_INT 22
41884: PUSH
41885: LD_OWVAR 2
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 21
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 3
41906: PUSH
41907: LD_INT 23
41909: PUSH
41910: LD_INT 0
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: LIST
41925: PPUSH
41926: CALL_OW 69
41930: ST_TO_ADDR
// if not tmp then
41931: LD_VAR 0 2
41935: NOT
41936: IFFALSE 41940
// exit ;
41938: GO 41989
// for i in tmp do
41940: LD_ADDR_VAR 0 1
41944: PUSH
41945: LD_VAR 0 2
41949: PUSH
41950: FOR_IN
41951: IFFALSE 41987
// begin if Crawls ( i ) then
41953: LD_VAR 0 1
41957: PPUSH
41958: CALL_OW 318
41962: IFFALSE 41973
// ComWalk ( i ) ;
41964: LD_VAR 0 1
41968: PPUSH
41969: CALL_OW 138
// SetClass ( i , 2 ) ;
41973: LD_VAR 0 1
41977: PPUSH
41978: LD_INT 2
41980: PPUSH
41981: CALL_OW 336
// end ;
41985: GO 41950
41987: POP
41988: POP
// end ;
41989: PPOPN 2
41991: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
41992: LD_EXP 71
41996: PUSH
41997: LD_EXP 124
42001: AND
42002: IFFALSE 42290
42004: GO 42006
42006: DISABLE
42007: LD_INT 0
42009: PPUSH
42010: PPUSH
42011: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
42012: LD_OWVAR 2
42016: PPUSH
42017: LD_INT 9
42019: PPUSH
42020: LD_INT 1
42022: PPUSH
42023: LD_INT 1
42025: PPUSH
42026: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
42030: LD_INT 9
42032: PPUSH
42033: LD_OWVAR 2
42037: PPUSH
42038: CALL_OW 343
// uc_side := 9 ;
42042: LD_ADDR_OWVAR 20
42046: PUSH
42047: LD_INT 9
42049: ST_TO_ADDR
// uc_nation := 2 ;
42050: LD_ADDR_OWVAR 21
42054: PUSH
42055: LD_INT 2
42057: ST_TO_ADDR
// hc_name := Dark Warrior ;
42058: LD_ADDR_OWVAR 26
42062: PUSH
42063: LD_STRING Dark Warrior
42065: ST_TO_ADDR
// hc_gallery :=  ;
42066: LD_ADDR_OWVAR 33
42070: PUSH
42071: LD_STRING 
42073: ST_TO_ADDR
// hc_noskilllimit := true ;
42074: LD_ADDR_OWVAR 76
42078: PUSH
42079: LD_INT 1
42081: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
42082: LD_ADDR_OWVAR 31
42086: PUSH
42087: LD_INT 30
42089: PUSH
42090: LD_INT 30
42092: PUSH
42093: LD_INT 30
42095: PUSH
42096: LD_INT 30
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: ST_TO_ADDR
// un := CreateHuman ;
42105: LD_ADDR_VAR 0 3
42109: PUSH
42110: CALL_OW 44
42114: ST_TO_ADDR
// hc_noskilllimit := false ;
42115: LD_ADDR_OWVAR 76
42119: PUSH
42120: LD_INT 0
42122: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
42123: LD_VAR 0 3
42127: PPUSH
42128: LD_INT 1
42130: PPUSH
42131: CALL_OW 51
// ToLua ( playRanger() ) ;
42135: LD_STRING playRanger()
42137: PPUSH
42138: CALL_OW 559
// p := 0 ;
42142: LD_ADDR_VAR 0 2
42146: PUSH
42147: LD_INT 0
42149: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
42150: LD_INT 35
42152: PPUSH
42153: CALL_OW 67
// p := p + 1 ;
42157: LD_ADDR_VAR 0 2
42161: PUSH
42162: LD_VAR 0 2
42166: PUSH
42167: LD_INT 1
42169: PLUS
42170: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
42171: LD_VAR 0 3
42175: PPUSH
42176: CALL_OW 256
42180: PUSH
42181: LD_INT 1000
42183: LESS
42184: IFFALSE 42198
// SetLives ( un , 1000 ) ;
42186: LD_VAR 0 3
42190: PPUSH
42191: LD_INT 1000
42193: PPUSH
42194: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
42198: LD_VAR 0 3
42202: PPUSH
42203: LD_INT 81
42205: PUSH
42206: LD_OWVAR 2
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 91
42217: PUSH
42218: LD_VAR 0 3
42222: PUSH
42223: LD_INT 30
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: LIST
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PPUSH
42235: CALL_OW 69
42239: PPUSH
42240: LD_VAR 0 3
42244: PPUSH
42245: CALL_OW 74
42249: PPUSH
42250: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
42254: LD_VAR 0 2
42258: PUSH
42259: LD_INT 80
42261: GREATER
42262: PUSH
42263: LD_VAR 0 3
42267: PPUSH
42268: CALL_OW 301
42272: OR
42273: IFFALSE 42150
// if un then
42275: LD_VAR 0 3
42279: IFFALSE 42290
// RemoveUnit ( un ) ;
42281: LD_VAR 0 3
42285: PPUSH
42286: CALL_OW 64
// end ;
42290: PPOPN 3
42292: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
42293: LD_EXP 125
42297: IFFALSE 42413
42299: GO 42301
42301: DISABLE
42302: LD_INT 0
42304: PPUSH
42305: PPUSH
42306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
42307: LD_ADDR_VAR 0 2
42311: PUSH
42312: LD_INT 81
42314: PUSH
42315: LD_OWVAR 2
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 21
42326: PUSH
42327: LD_INT 1
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PPUSH
42338: CALL_OW 69
42342: ST_TO_ADDR
// ToLua ( playComputer() ) ;
42343: LD_STRING playComputer()
42345: PPUSH
42346: CALL_OW 559
// if not tmp then
42350: LD_VAR 0 2
42354: NOT
42355: IFFALSE 42359
// exit ;
42357: GO 42413
// for i in tmp do
42359: LD_ADDR_VAR 0 1
42363: PUSH
42364: LD_VAR 0 2
42368: PUSH
42369: FOR_IN
42370: IFFALSE 42411
// for j := 1 to 4 do
42372: LD_ADDR_VAR 0 3
42376: PUSH
42377: DOUBLE
42378: LD_INT 1
42380: DEC
42381: ST_TO_ADDR
42382: LD_INT 4
42384: PUSH
42385: FOR_TO
42386: IFFALSE 42407
// SetSkill ( i , j , 10 ) ;
42388: LD_VAR 0 1
42392: PPUSH
42393: LD_VAR 0 3
42397: PPUSH
42398: LD_INT 10
42400: PPUSH
42401: CALL_OW 237
42405: GO 42385
42407: POP
42408: POP
42409: GO 42369
42411: POP
42412: POP
// end ;
42413: PPOPN 3
42415: END
// every 0 0$1 trigger s30 do var i , tmp ;
42416: LD_EXP 126
42420: IFFALSE 42489
42422: GO 42424
42424: DISABLE
42425: LD_INT 0
42427: PPUSH
42428: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
42429: LD_ADDR_VAR 0 2
42433: PUSH
42434: LD_INT 22
42436: PUSH
42437: LD_OWVAR 2
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PPUSH
42446: CALL_OW 69
42450: ST_TO_ADDR
// if not tmp then
42451: LD_VAR 0 2
42455: NOT
42456: IFFALSE 42460
// exit ;
42458: GO 42489
// for i in tmp do
42460: LD_ADDR_VAR 0 1
42464: PUSH
42465: LD_VAR 0 2
42469: PUSH
42470: FOR_IN
42471: IFFALSE 42487
// SetLives ( i , 300 ) ;
42473: LD_VAR 0 1
42477: PPUSH
42478: LD_INT 300
42480: PPUSH
42481: CALL_OW 234
42485: GO 42470
42487: POP
42488: POP
// end ;
42489: PPOPN 2
42491: END
// every 0 0$1 trigger s60 do var i , tmp ;
42492: LD_EXP 127
42496: IFFALSE 42565
42498: GO 42500
42500: DISABLE
42501: LD_INT 0
42503: PPUSH
42504: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
42505: LD_ADDR_VAR 0 2
42509: PUSH
42510: LD_INT 22
42512: PUSH
42513: LD_OWVAR 2
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PPUSH
42522: CALL_OW 69
42526: ST_TO_ADDR
// if not tmp then
42527: LD_VAR 0 2
42531: NOT
42532: IFFALSE 42536
// exit ;
42534: GO 42565
// for i in tmp do
42536: LD_ADDR_VAR 0 1
42540: PUSH
42541: LD_VAR 0 2
42545: PUSH
42546: FOR_IN
42547: IFFALSE 42563
// SetLives ( i , 600 ) ;
42549: LD_VAR 0 1
42553: PPUSH
42554: LD_INT 600
42556: PPUSH
42557: CALL_OW 234
42561: GO 42546
42563: POP
42564: POP
// end ;
42565: PPOPN 2
42567: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
42568: LD_INT 0
42570: PPUSH
// case cmd of 301 :
42571: LD_VAR 0 1
42575: PUSH
42576: LD_INT 301
42578: DOUBLE
42579: EQUAL
42580: IFTRUE 42584
42582: GO 42616
42584: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
42585: LD_VAR 0 6
42589: PPUSH
42590: LD_VAR 0 7
42594: PPUSH
42595: LD_VAR 0 8
42599: PPUSH
42600: LD_VAR 0 4
42604: PPUSH
42605: LD_VAR 0 5
42609: PPUSH
42610: CALL 43817 0 5
42614: GO 42737
42616: LD_INT 302
42618: DOUBLE
42619: EQUAL
42620: IFTRUE 42624
42622: GO 42661
42624: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
42625: LD_VAR 0 6
42629: PPUSH
42630: LD_VAR 0 7
42634: PPUSH
42635: LD_VAR 0 8
42639: PPUSH
42640: LD_VAR 0 9
42644: PPUSH
42645: LD_VAR 0 4
42649: PPUSH
42650: LD_VAR 0 5
42654: PPUSH
42655: CALL 43908 0 6
42659: GO 42737
42661: LD_INT 303
42663: DOUBLE
42664: EQUAL
42665: IFTRUE 42669
42667: GO 42706
42669: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
42670: LD_VAR 0 6
42674: PPUSH
42675: LD_VAR 0 7
42679: PPUSH
42680: LD_VAR 0 8
42684: PPUSH
42685: LD_VAR 0 9
42689: PPUSH
42690: LD_VAR 0 4
42694: PPUSH
42695: LD_VAR 0 5
42699: PPUSH
42700: CALL 42742 0 6
42704: GO 42737
42706: LD_INT 304
42708: DOUBLE
42709: EQUAL
42710: IFTRUE 42714
42712: GO 42736
42714: POP
// hHackTeleport ( unit , x , y ) ; end ;
42715: LD_VAR 0 2
42719: PPUSH
42720: LD_VAR 0 4
42724: PPUSH
42725: LD_VAR 0 5
42729: PPUSH
42730: CALL 44501 0 3
42734: GO 42737
42736: POP
// end ;
42737: LD_VAR 0 12
42741: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
42742: LD_INT 0
42744: PPUSH
42745: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
42746: LD_VAR 0 1
42750: PUSH
42751: LD_INT 1
42753: LESS
42754: PUSH
42755: LD_VAR 0 1
42759: PUSH
42760: LD_INT 3
42762: GREATER
42763: OR
42764: PUSH
42765: LD_VAR 0 5
42769: PPUSH
42770: LD_VAR 0 6
42774: PPUSH
42775: CALL_OW 428
42779: OR
42780: IFFALSE 42784
// exit ;
42782: GO 43504
// uc_side := your_side ;
42784: LD_ADDR_OWVAR 20
42788: PUSH
42789: LD_OWVAR 2
42793: ST_TO_ADDR
// uc_nation := nation ;
42794: LD_ADDR_OWVAR 21
42798: PUSH
42799: LD_VAR 0 1
42803: ST_TO_ADDR
// bc_level = 1 ;
42804: LD_ADDR_OWVAR 43
42808: PUSH
42809: LD_INT 1
42811: ST_TO_ADDR
// case btype of 1 :
42812: LD_VAR 0 2
42816: PUSH
42817: LD_INT 1
42819: DOUBLE
42820: EQUAL
42821: IFTRUE 42825
42823: GO 42836
42825: POP
// bc_type := b_depot ; 2 :
42826: LD_ADDR_OWVAR 42
42830: PUSH
42831: LD_INT 0
42833: ST_TO_ADDR
42834: GO 43448
42836: LD_INT 2
42838: DOUBLE
42839: EQUAL
42840: IFTRUE 42844
42842: GO 42855
42844: POP
// bc_type := b_warehouse ; 3 :
42845: LD_ADDR_OWVAR 42
42849: PUSH
42850: LD_INT 1
42852: ST_TO_ADDR
42853: GO 43448
42855: LD_INT 3
42857: DOUBLE
42858: EQUAL
42859: IFTRUE 42863
42861: GO 42874
42863: POP
// bc_type := b_lab ; 4 .. 9 :
42864: LD_ADDR_OWVAR 42
42868: PUSH
42869: LD_INT 6
42871: ST_TO_ADDR
42872: GO 43448
42874: LD_INT 4
42876: DOUBLE
42877: GREATEREQUAL
42878: IFFALSE 42886
42880: LD_INT 9
42882: DOUBLE
42883: LESSEQUAL
42884: IFTRUE 42888
42886: GO 42940
42888: POP
// begin bc_type := b_lab_half ;
42889: LD_ADDR_OWVAR 42
42893: PUSH
42894: LD_INT 7
42896: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
42897: LD_ADDR_OWVAR 44
42901: PUSH
42902: LD_INT 10
42904: PUSH
42905: LD_INT 11
42907: PUSH
42908: LD_INT 12
42910: PUSH
42911: LD_INT 15
42913: PUSH
42914: LD_INT 14
42916: PUSH
42917: LD_INT 13
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: PUSH
42928: LD_VAR 0 2
42932: PUSH
42933: LD_INT 3
42935: MINUS
42936: ARRAY
42937: ST_TO_ADDR
// end ; 10 .. 13 :
42938: GO 43448
42940: LD_INT 10
42942: DOUBLE
42943: GREATEREQUAL
42944: IFFALSE 42952
42946: LD_INT 13
42948: DOUBLE
42949: LESSEQUAL
42950: IFTRUE 42954
42952: GO 43031
42954: POP
// begin bc_type := b_lab_full ;
42955: LD_ADDR_OWVAR 42
42959: PUSH
42960: LD_INT 8
42962: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
42963: LD_ADDR_OWVAR 44
42967: PUSH
42968: LD_INT 10
42970: PUSH
42971: LD_INT 12
42973: PUSH
42974: LD_INT 14
42976: PUSH
42977: LD_INT 13
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: PUSH
42986: LD_VAR 0 2
42990: PUSH
42991: LD_INT 9
42993: MINUS
42994: ARRAY
42995: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
42996: LD_ADDR_OWVAR 45
43000: PUSH
43001: LD_INT 11
43003: PUSH
43004: LD_INT 15
43006: PUSH
43007: LD_INT 12
43009: PUSH
43010: LD_INT 15
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: PUSH
43019: LD_VAR 0 2
43023: PUSH
43024: LD_INT 9
43026: MINUS
43027: ARRAY
43028: ST_TO_ADDR
// end ; 14 :
43029: GO 43448
43031: LD_INT 14
43033: DOUBLE
43034: EQUAL
43035: IFTRUE 43039
43037: GO 43050
43039: POP
// bc_type := b_workshop ; 15 :
43040: LD_ADDR_OWVAR 42
43044: PUSH
43045: LD_INT 2
43047: ST_TO_ADDR
43048: GO 43448
43050: LD_INT 15
43052: DOUBLE
43053: EQUAL
43054: IFTRUE 43058
43056: GO 43069
43058: POP
// bc_type := b_factory ; 16 :
43059: LD_ADDR_OWVAR 42
43063: PUSH
43064: LD_INT 3
43066: ST_TO_ADDR
43067: GO 43448
43069: LD_INT 16
43071: DOUBLE
43072: EQUAL
43073: IFTRUE 43077
43075: GO 43088
43077: POP
// bc_type := b_ext_gun ; 17 :
43078: LD_ADDR_OWVAR 42
43082: PUSH
43083: LD_INT 17
43085: ST_TO_ADDR
43086: GO 43448
43088: LD_INT 17
43090: DOUBLE
43091: EQUAL
43092: IFTRUE 43096
43094: GO 43124
43096: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
43097: LD_ADDR_OWVAR 42
43101: PUSH
43102: LD_INT 19
43104: PUSH
43105: LD_INT 23
43107: PUSH
43108: LD_INT 19
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: LIST
43115: PUSH
43116: LD_VAR 0 1
43120: ARRAY
43121: ST_TO_ADDR
43122: GO 43448
43124: LD_INT 18
43126: DOUBLE
43127: EQUAL
43128: IFTRUE 43132
43130: GO 43143
43132: POP
// bc_type := b_ext_radar ; 19 :
43133: LD_ADDR_OWVAR 42
43137: PUSH
43138: LD_INT 20
43140: ST_TO_ADDR
43141: GO 43448
43143: LD_INT 19
43145: DOUBLE
43146: EQUAL
43147: IFTRUE 43151
43149: GO 43162
43151: POP
// bc_type := b_ext_radio ; 20 :
43152: LD_ADDR_OWVAR 42
43156: PUSH
43157: LD_INT 22
43159: ST_TO_ADDR
43160: GO 43448
43162: LD_INT 20
43164: DOUBLE
43165: EQUAL
43166: IFTRUE 43170
43168: GO 43181
43170: POP
// bc_type := b_ext_siberium ; 21 :
43171: LD_ADDR_OWVAR 42
43175: PUSH
43176: LD_INT 21
43178: ST_TO_ADDR
43179: GO 43448
43181: LD_INT 21
43183: DOUBLE
43184: EQUAL
43185: IFTRUE 43189
43187: GO 43200
43189: POP
// bc_type := b_ext_computer ; 22 :
43190: LD_ADDR_OWVAR 42
43194: PUSH
43195: LD_INT 24
43197: ST_TO_ADDR
43198: GO 43448
43200: LD_INT 22
43202: DOUBLE
43203: EQUAL
43204: IFTRUE 43208
43206: GO 43219
43208: POP
// bc_type := b_ext_track ; 23 :
43209: LD_ADDR_OWVAR 42
43213: PUSH
43214: LD_INT 16
43216: ST_TO_ADDR
43217: GO 43448
43219: LD_INT 23
43221: DOUBLE
43222: EQUAL
43223: IFTRUE 43227
43225: GO 43238
43227: POP
// bc_type := b_ext_laser ; 24 :
43228: LD_ADDR_OWVAR 42
43232: PUSH
43233: LD_INT 25
43235: ST_TO_ADDR
43236: GO 43448
43238: LD_INT 24
43240: DOUBLE
43241: EQUAL
43242: IFTRUE 43246
43244: GO 43257
43246: POP
// bc_type := b_control_tower ; 25 :
43247: LD_ADDR_OWVAR 42
43251: PUSH
43252: LD_INT 36
43254: ST_TO_ADDR
43255: GO 43448
43257: LD_INT 25
43259: DOUBLE
43260: EQUAL
43261: IFTRUE 43265
43263: GO 43276
43265: POP
// bc_type := b_breastwork ; 26 :
43266: LD_ADDR_OWVAR 42
43270: PUSH
43271: LD_INT 31
43273: ST_TO_ADDR
43274: GO 43448
43276: LD_INT 26
43278: DOUBLE
43279: EQUAL
43280: IFTRUE 43284
43282: GO 43295
43284: POP
// bc_type := b_bunker ; 27 :
43285: LD_ADDR_OWVAR 42
43289: PUSH
43290: LD_INT 32
43292: ST_TO_ADDR
43293: GO 43448
43295: LD_INT 27
43297: DOUBLE
43298: EQUAL
43299: IFTRUE 43303
43301: GO 43314
43303: POP
// bc_type := b_turret ; 28 :
43304: LD_ADDR_OWVAR 42
43308: PUSH
43309: LD_INT 33
43311: ST_TO_ADDR
43312: GO 43448
43314: LD_INT 28
43316: DOUBLE
43317: EQUAL
43318: IFTRUE 43322
43320: GO 43333
43322: POP
// bc_type := b_armoury ; 29 :
43323: LD_ADDR_OWVAR 42
43327: PUSH
43328: LD_INT 4
43330: ST_TO_ADDR
43331: GO 43448
43333: LD_INT 29
43335: DOUBLE
43336: EQUAL
43337: IFTRUE 43341
43339: GO 43352
43341: POP
// bc_type := b_barracks ; 30 :
43342: LD_ADDR_OWVAR 42
43346: PUSH
43347: LD_INT 5
43349: ST_TO_ADDR
43350: GO 43448
43352: LD_INT 30
43354: DOUBLE
43355: EQUAL
43356: IFTRUE 43360
43358: GO 43371
43360: POP
// bc_type := b_solar_power ; 31 :
43361: LD_ADDR_OWVAR 42
43365: PUSH
43366: LD_INT 27
43368: ST_TO_ADDR
43369: GO 43448
43371: LD_INT 31
43373: DOUBLE
43374: EQUAL
43375: IFTRUE 43379
43377: GO 43390
43379: POP
// bc_type := b_oil_power ; 32 :
43380: LD_ADDR_OWVAR 42
43384: PUSH
43385: LD_INT 26
43387: ST_TO_ADDR
43388: GO 43448
43390: LD_INT 32
43392: DOUBLE
43393: EQUAL
43394: IFTRUE 43398
43396: GO 43409
43398: POP
// bc_type := b_siberite_power ; 33 :
43399: LD_ADDR_OWVAR 42
43403: PUSH
43404: LD_INT 28
43406: ST_TO_ADDR
43407: GO 43448
43409: LD_INT 33
43411: DOUBLE
43412: EQUAL
43413: IFTRUE 43417
43415: GO 43428
43417: POP
// bc_type := b_oil_mine ; 34 :
43418: LD_ADDR_OWVAR 42
43422: PUSH
43423: LD_INT 29
43425: ST_TO_ADDR
43426: GO 43448
43428: LD_INT 34
43430: DOUBLE
43431: EQUAL
43432: IFTRUE 43436
43434: GO 43447
43436: POP
// bc_type := b_siberite_mine ; end ;
43437: LD_ADDR_OWVAR 42
43441: PUSH
43442: LD_INT 30
43444: ST_TO_ADDR
43445: GO 43448
43447: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
43448: LD_ADDR_VAR 0 8
43452: PUSH
43453: LD_VAR 0 5
43457: PPUSH
43458: LD_VAR 0 6
43462: PPUSH
43463: LD_VAR 0 3
43467: PPUSH
43468: CALL_OW 47
43472: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
43473: LD_OWVAR 42
43477: PUSH
43478: LD_INT 32
43480: PUSH
43481: LD_INT 33
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: IN
43488: IFFALSE 43504
// PlaceWeaponTurret ( b , weapon ) ;
43490: LD_VAR 0 8
43494: PPUSH
43495: LD_VAR 0 4
43499: PPUSH
43500: CALL_OW 431
// end ;
43504: LD_VAR 0 7
43508: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
43509: LD_INT 0
43511: PPUSH
43512: PPUSH
43513: PPUSH
43514: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43515: LD_ADDR_VAR 0 4
43519: PUSH
43520: LD_INT 22
43522: PUSH
43523: LD_OWVAR 2
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 2
43534: PUSH
43535: LD_INT 30
43537: PUSH
43538: LD_INT 0
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 30
43547: PUSH
43548: LD_INT 1
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: LIST
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PPUSH
43564: CALL_OW 69
43568: ST_TO_ADDR
// if not tmp then
43569: LD_VAR 0 4
43573: NOT
43574: IFFALSE 43578
// exit ;
43576: GO 43637
// for i in tmp do
43578: LD_ADDR_VAR 0 2
43582: PUSH
43583: LD_VAR 0 4
43587: PUSH
43588: FOR_IN
43589: IFFALSE 43635
// for j = 1 to 3 do
43591: LD_ADDR_VAR 0 3
43595: PUSH
43596: DOUBLE
43597: LD_INT 1
43599: DEC
43600: ST_TO_ADDR
43601: LD_INT 3
43603: PUSH
43604: FOR_TO
43605: IFFALSE 43631
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
43607: LD_VAR 0 2
43611: PPUSH
43612: CALL_OW 274
43616: PPUSH
43617: LD_VAR 0 3
43621: PPUSH
43622: LD_INT 99999
43624: PPUSH
43625: CALL_OW 277
43629: GO 43604
43631: POP
43632: POP
43633: GO 43588
43635: POP
43636: POP
// end ;
43637: LD_VAR 0 1
43641: RET
// export function hHackSetLevel10 ; var i , j ; begin
43642: LD_INT 0
43644: PPUSH
43645: PPUSH
43646: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
43647: LD_ADDR_VAR 0 2
43651: PUSH
43652: LD_INT 21
43654: PUSH
43655: LD_INT 1
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PPUSH
43662: CALL_OW 69
43666: PUSH
43667: FOR_IN
43668: IFFALSE 43720
// if IsSelected ( i ) then
43670: LD_VAR 0 2
43674: PPUSH
43675: CALL_OW 306
43679: IFFALSE 43718
// begin for j := 1 to 4 do
43681: LD_ADDR_VAR 0 3
43685: PUSH
43686: DOUBLE
43687: LD_INT 1
43689: DEC
43690: ST_TO_ADDR
43691: LD_INT 4
43693: PUSH
43694: FOR_TO
43695: IFFALSE 43716
// SetSkill ( i , j , 10 ) ;
43697: LD_VAR 0 2
43701: PPUSH
43702: LD_VAR 0 3
43706: PPUSH
43707: LD_INT 10
43709: PPUSH
43710: CALL_OW 237
43714: GO 43694
43716: POP
43717: POP
// end ;
43718: GO 43667
43720: POP
43721: POP
// end ;
43722: LD_VAR 0 1
43726: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
43727: LD_INT 0
43729: PPUSH
43730: PPUSH
43731: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
43732: LD_ADDR_VAR 0 2
43736: PUSH
43737: LD_INT 22
43739: PUSH
43740: LD_OWVAR 2
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 21
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PPUSH
43763: CALL_OW 69
43767: PUSH
43768: FOR_IN
43769: IFFALSE 43810
// begin for j := 1 to 4 do
43771: LD_ADDR_VAR 0 3
43775: PUSH
43776: DOUBLE
43777: LD_INT 1
43779: DEC
43780: ST_TO_ADDR
43781: LD_INT 4
43783: PUSH
43784: FOR_TO
43785: IFFALSE 43806
// SetSkill ( i , j , 10 ) ;
43787: LD_VAR 0 2
43791: PPUSH
43792: LD_VAR 0 3
43796: PPUSH
43797: LD_INT 10
43799: PPUSH
43800: CALL_OW 237
43804: GO 43784
43806: POP
43807: POP
// end ;
43808: GO 43768
43810: POP
43811: POP
// end ;
43812: LD_VAR 0 1
43816: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
43817: LD_INT 0
43819: PPUSH
// uc_side := your_side ;
43820: LD_ADDR_OWVAR 20
43824: PUSH
43825: LD_OWVAR 2
43829: ST_TO_ADDR
// uc_nation := nation ;
43830: LD_ADDR_OWVAR 21
43834: PUSH
43835: LD_VAR 0 1
43839: ST_TO_ADDR
// InitHc ;
43840: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
43844: LD_INT 0
43846: PPUSH
43847: LD_VAR 0 2
43851: PPUSH
43852: LD_VAR 0 3
43856: PPUSH
43857: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
43861: LD_VAR 0 4
43865: PPUSH
43866: LD_VAR 0 5
43870: PPUSH
43871: CALL_OW 428
43875: PUSH
43876: LD_INT 0
43878: EQUAL
43879: IFFALSE 43903
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
43881: CALL_OW 44
43885: PPUSH
43886: LD_VAR 0 4
43890: PPUSH
43891: LD_VAR 0 5
43895: PPUSH
43896: LD_INT 1
43898: PPUSH
43899: CALL_OW 48
// end ;
43903: LD_VAR 0 6
43907: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
43908: LD_INT 0
43910: PPUSH
43911: PPUSH
// uc_side := your_side ;
43912: LD_ADDR_OWVAR 20
43916: PUSH
43917: LD_OWVAR 2
43921: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
43922: LD_VAR 0 1
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: LD_INT 2
43932: PUSH
43933: LD_INT 3
43935: PUSH
43936: LD_INT 4
43938: PUSH
43939: LD_INT 5
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: IN
43949: IFFALSE 43961
// uc_nation := nation_american else
43951: LD_ADDR_OWVAR 21
43955: PUSH
43956: LD_INT 1
43958: ST_TO_ADDR
43959: GO 44004
// if chassis in [ 11 , 12 , 13 , 14 ] then
43961: LD_VAR 0 1
43965: PUSH
43966: LD_INT 11
43968: PUSH
43969: LD_INT 12
43971: PUSH
43972: LD_INT 13
43974: PUSH
43975: LD_INT 14
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: IN
43984: IFFALSE 43996
// uc_nation := nation_arabian else
43986: LD_ADDR_OWVAR 21
43990: PUSH
43991: LD_INT 2
43993: ST_TO_ADDR
43994: GO 44004
// uc_nation := nation_russian ;
43996: LD_ADDR_OWVAR 21
44000: PUSH
44001: LD_INT 3
44003: ST_TO_ADDR
// vc_chassis := chassis ;
44004: LD_ADDR_OWVAR 37
44008: PUSH
44009: LD_VAR 0 1
44013: ST_TO_ADDR
// vc_engine := engine ;
44014: LD_ADDR_OWVAR 39
44018: PUSH
44019: LD_VAR 0 2
44023: ST_TO_ADDR
// vc_control := control ;
44024: LD_ADDR_OWVAR 38
44028: PUSH
44029: LD_VAR 0 3
44033: ST_TO_ADDR
// vc_weapon := weapon ;
44034: LD_ADDR_OWVAR 40
44038: PUSH
44039: LD_VAR 0 4
44043: ST_TO_ADDR
// un := CreateVehicle ;
44044: LD_ADDR_VAR 0 8
44048: PUSH
44049: CALL_OW 45
44053: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
44054: LD_VAR 0 8
44058: PPUSH
44059: LD_INT 0
44061: PPUSH
44062: LD_INT 5
44064: PPUSH
44065: CALL_OW 12
44069: PPUSH
44070: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
44074: LD_VAR 0 8
44078: PPUSH
44079: LD_VAR 0 5
44083: PPUSH
44084: LD_VAR 0 6
44088: PPUSH
44089: LD_INT 1
44091: PPUSH
44092: CALL_OW 48
// end ;
44096: LD_VAR 0 7
44100: RET
// export hInvincible ; every 1 do
44101: GO 44103
44103: DISABLE
// hInvincible := [ ] ;
44104: LD_ADDR_EXP 128
44108: PUSH
44109: EMPTY
44110: ST_TO_ADDR
44111: END
// every 10 do var i ;
44112: GO 44114
44114: DISABLE
44115: LD_INT 0
44117: PPUSH
// begin enable ;
44118: ENABLE
// if not hInvincible then
44119: LD_EXP 128
44123: NOT
44124: IFFALSE 44128
// exit ;
44126: GO 44172
// for i in hInvincible do
44128: LD_ADDR_VAR 0 1
44132: PUSH
44133: LD_EXP 128
44137: PUSH
44138: FOR_IN
44139: IFFALSE 44170
// if GetLives ( i ) < 1000 then
44141: LD_VAR 0 1
44145: PPUSH
44146: CALL_OW 256
44150: PUSH
44151: LD_INT 1000
44153: LESS
44154: IFFALSE 44168
// SetLives ( i , 1000 ) ;
44156: LD_VAR 0 1
44160: PPUSH
44161: LD_INT 1000
44163: PPUSH
44164: CALL_OW 234
44168: GO 44138
44170: POP
44171: POP
// end ;
44172: PPOPN 1
44174: END
// export function hHackInvincible ; var i ; begin
44175: LD_INT 0
44177: PPUSH
44178: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
44179: LD_ADDR_VAR 0 2
44183: PUSH
44184: LD_INT 2
44186: PUSH
44187: LD_INT 21
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 21
44199: PUSH
44200: LD_INT 2
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: LIST
44211: PPUSH
44212: CALL_OW 69
44216: PUSH
44217: FOR_IN
44218: IFFALSE 44279
// if IsSelected ( i ) then
44220: LD_VAR 0 2
44224: PPUSH
44225: CALL_OW 306
44229: IFFALSE 44277
// begin if i in hInvincible then
44231: LD_VAR 0 2
44235: PUSH
44236: LD_EXP 128
44240: IN
44241: IFFALSE 44261
// hInvincible := hInvincible diff i else
44243: LD_ADDR_EXP 128
44247: PUSH
44248: LD_EXP 128
44252: PUSH
44253: LD_VAR 0 2
44257: DIFF
44258: ST_TO_ADDR
44259: GO 44277
// hInvincible := hInvincible union i ;
44261: LD_ADDR_EXP 128
44265: PUSH
44266: LD_EXP 128
44270: PUSH
44271: LD_VAR 0 2
44275: UNION
44276: ST_TO_ADDR
// end ;
44277: GO 44217
44279: POP
44280: POP
// end ;
44281: LD_VAR 0 1
44285: RET
// export function hHackInvisible ; var i , j ; begin
44286: LD_INT 0
44288: PPUSH
44289: PPUSH
44290: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
44291: LD_ADDR_VAR 0 2
44295: PUSH
44296: LD_INT 21
44298: PUSH
44299: LD_INT 1
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PPUSH
44306: CALL_OW 69
44310: PUSH
44311: FOR_IN
44312: IFFALSE 44336
// if IsSelected ( i ) then
44314: LD_VAR 0 2
44318: PPUSH
44319: CALL_OW 306
44323: IFFALSE 44334
// ComForceInvisible ( i ) ;
44325: LD_VAR 0 2
44329: PPUSH
44330: CALL_OW 496
44334: GO 44311
44336: POP
44337: POP
// end ;
44338: LD_VAR 0 1
44342: RET
// export function hHackChangeYourSide ; begin
44343: LD_INT 0
44345: PPUSH
// if your_side = 8 then
44346: LD_OWVAR 2
44350: PUSH
44351: LD_INT 8
44353: EQUAL
44354: IFFALSE 44366
// your_side := 0 else
44356: LD_ADDR_OWVAR 2
44360: PUSH
44361: LD_INT 0
44363: ST_TO_ADDR
44364: GO 44380
// your_side := your_side + 1 ;
44366: LD_ADDR_OWVAR 2
44370: PUSH
44371: LD_OWVAR 2
44375: PUSH
44376: LD_INT 1
44378: PLUS
44379: ST_TO_ADDR
// end ;
44380: LD_VAR 0 1
44384: RET
// export function hHackChangeUnitSide ; var i , j ; begin
44385: LD_INT 0
44387: PPUSH
44388: PPUSH
44389: PPUSH
// for i in all_units do
44390: LD_ADDR_VAR 0 2
44394: PUSH
44395: LD_OWVAR 3
44399: PUSH
44400: FOR_IN
44401: IFFALSE 44479
// if IsSelected ( i ) then
44403: LD_VAR 0 2
44407: PPUSH
44408: CALL_OW 306
44412: IFFALSE 44477
// begin j := GetSide ( i ) ;
44414: LD_ADDR_VAR 0 3
44418: PUSH
44419: LD_VAR 0 2
44423: PPUSH
44424: CALL_OW 255
44428: ST_TO_ADDR
// if j = 8 then
44429: LD_VAR 0 3
44433: PUSH
44434: LD_INT 8
44436: EQUAL
44437: IFFALSE 44449
// j := 0 else
44439: LD_ADDR_VAR 0 3
44443: PUSH
44444: LD_INT 0
44446: ST_TO_ADDR
44447: GO 44463
// j := j + 1 ;
44449: LD_ADDR_VAR 0 3
44453: PUSH
44454: LD_VAR 0 3
44458: PUSH
44459: LD_INT 1
44461: PLUS
44462: ST_TO_ADDR
// SetSide ( i , j ) ;
44463: LD_VAR 0 2
44467: PPUSH
44468: LD_VAR 0 3
44472: PPUSH
44473: CALL_OW 235
// end ;
44477: GO 44400
44479: POP
44480: POP
// end ;
44481: LD_VAR 0 1
44485: RET
// export function hHackFog ; begin
44486: LD_INT 0
44488: PPUSH
// FogOff ( true ) ;
44489: LD_INT 1
44491: PPUSH
44492: CALL_OW 344
// end ;
44496: LD_VAR 0 1
44500: RET
// export function hHackTeleport ( unit , x , y ) ; begin
44501: LD_INT 0
44503: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
44504: LD_VAR 0 1
44508: PPUSH
44509: LD_VAR 0 2
44513: PPUSH
44514: LD_VAR 0 3
44518: PPUSH
44519: LD_INT 1
44521: PPUSH
44522: LD_INT 1
44524: PPUSH
44525: CALL_OW 483
// CenterOnXY ( x , y ) ;
44529: LD_VAR 0 2
44533: PPUSH
44534: LD_VAR 0 3
44538: PPUSH
44539: CALL_OW 84
// end ;
44543: LD_VAR 0 4
44547: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
44548: LD_INT 0
44550: PPUSH
44551: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
44552: LD_VAR 0 1
44556: NOT
44557: PUSH
44558: LD_VAR 0 2
44562: PPUSH
44563: LD_VAR 0 3
44567: PPUSH
44568: CALL_OW 488
44572: NOT
44573: OR
44574: PUSH
44575: LD_VAR 0 1
44579: PPUSH
44580: CALL_OW 266
44584: PUSH
44585: LD_INT 3
44587: NONEQUAL
44588: PUSH
44589: LD_VAR 0 1
44593: PPUSH
44594: CALL_OW 247
44598: PUSH
44599: LD_INT 1
44601: EQUAL
44602: NOT
44603: AND
44604: OR
44605: IFFALSE 44609
// exit ;
44607: GO 44758
// if GetType ( factory ) = unit_human then
44609: LD_VAR 0 1
44613: PPUSH
44614: CALL_OW 247
44618: PUSH
44619: LD_INT 1
44621: EQUAL
44622: IFFALSE 44639
// factory := IsInUnit ( factory ) ;
44624: LD_ADDR_VAR 0 1
44628: PUSH
44629: LD_VAR 0 1
44633: PPUSH
44634: CALL_OW 310
44638: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
44639: LD_VAR 0 1
44643: PPUSH
44644: CALL_OW 266
44648: PUSH
44649: LD_INT 3
44651: NONEQUAL
44652: IFFALSE 44656
// exit ;
44654: GO 44758
// if HexInfo ( x , y ) = factory then
44656: LD_VAR 0 2
44660: PPUSH
44661: LD_VAR 0 3
44665: PPUSH
44666: CALL_OW 428
44670: PUSH
44671: LD_VAR 0 1
44675: EQUAL
44676: IFFALSE 44703
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
44678: LD_ADDR_EXP 129
44682: PUSH
44683: LD_EXP 129
44687: PPUSH
44688: LD_VAR 0 1
44692: PPUSH
44693: LD_INT 0
44695: PPUSH
44696: CALL_OW 1
44700: ST_TO_ADDR
44701: GO 44754
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
44703: LD_ADDR_EXP 129
44707: PUSH
44708: LD_EXP 129
44712: PPUSH
44713: LD_VAR 0 1
44717: PPUSH
44718: LD_VAR 0 1
44722: PPUSH
44723: CALL_OW 255
44727: PUSH
44728: LD_VAR 0 1
44732: PUSH
44733: LD_VAR 0 2
44737: PUSH
44738: LD_VAR 0 3
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: PPUSH
44749: CALL_OW 1
44753: ST_TO_ADDR
// UpdateFactoryWaypoints ;
44754: CALL 44763 0 0
// end ;
44758: LD_VAR 0 4
44762: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
44763: LD_INT 0
44765: PPUSH
44766: PPUSH
44767: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
44768: LD_STRING resetFactoryWaypoint();
44770: PPUSH
44771: CALL_OW 559
// if factoryWaypoints then
44775: LD_EXP 129
44779: IFFALSE 44905
// begin list := PrepareArray ( factoryWaypoints ) ;
44781: LD_ADDR_VAR 0 3
44785: PUSH
44786: LD_EXP 129
44790: PPUSH
44791: CALL 91355 0 1
44795: ST_TO_ADDR
// for i := 1 to list do
44796: LD_ADDR_VAR 0 2
44800: PUSH
44801: DOUBLE
44802: LD_INT 1
44804: DEC
44805: ST_TO_ADDR
44806: LD_VAR 0 3
44810: PUSH
44811: FOR_TO
44812: IFFALSE 44903
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
44814: LD_STRING setFactoryWaypointXY(
44816: PUSH
44817: LD_VAR 0 3
44821: PUSH
44822: LD_VAR 0 2
44826: ARRAY
44827: PUSH
44828: LD_INT 1
44830: ARRAY
44831: STR
44832: PUSH
44833: LD_STRING ,
44835: STR
44836: PUSH
44837: LD_VAR 0 3
44841: PUSH
44842: LD_VAR 0 2
44846: ARRAY
44847: PUSH
44848: LD_INT 2
44850: ARRAY
44851: STR
44852: PUSH
44853: LD_STRING ,
44855: STR
44856: PUSH
44857: LD_VAR 0 3
44861: PUSH
44862: LD_VAR 0 2
44866: ARRAY
44867: PUSH
44868: LD_INT 3
44870: ARRAY
44871: STR
44872: PUSH
44873: LD_STRING ,
44875: STR
44876: PUSH
44877: LD_VAR 0 3
44881: PUSH
44882: LD_VAR 0 2
44886: ARRAY
44887: PUSH
44888: LD_INT 4
44890: ARRAY
44891: STR
44892: PUSH
44893: LD_STRING )
44895: STR
44896: PPUSH
44897: CALL_OW 559
44901: GO 44811
44903: POP
44904: POP
// end ; end ;
44905: LD_VAR 0 1
44909: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
44910: LD_INT 0
44912: PPUSH
// if HexInfo ( x , y ) = warehouse then
44913: LD_VAR 0 2
44917: PPUSH
44918: LD_VAR 0 3
44922: PPUSH
44923: CALL_OW 428
44927: PUSH
44928: LD_VAR 0 1
44932: EQUAL
44933: IFFALSE 44960
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
44935: LD_ADDR_EXP 130
44939: PUSH
44940: LD_EXP 130
44944: PPUSH
44945: LD_VAR 0 1
44949: PPUSH
44950: LD_INT 0
44952: PPUSH
44953: CALL_OW 1
44957: ST_TO_ADDR
44958: GO 45011
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
44960: LD_ADDR_EXP 130
44964: PUSH
44965: LD_EXP 130
44969: PPUSH
44970: LD_VAR 0 1
44974: PPUSH
44975: LD_VAR 0 1
44979: PPUSH
44980: CALL_OW 255
44984: PUSH
44985: LD_VAR 0 1
44989: PUSH
44990: LD_VAR 0 2
44994: PUSH
44995: LD_VAR 0 3
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: PPUSH
45006: CALL_OW 1
45010: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
45011: CALL 45020 0 0
// end ;
45015: LD_VAR 0 4
45019: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
45020: LD_INT 0
45022: PPUSH
45023: PPUSH
45024: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
45025: LD_STRING resetWarehouseGatheringPoints();
45027: PPUSH
45028: CALL_OW 559
// if warehouseGatheringPoints then
45032: LD_EXP 130
45036: IFFALSE 45162
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
45038: LD_ADDR_VAR 0 3
45042: PUSH
45043: LD_EXP 130
45047: PPUSH
45048: CALL 91355 0 1
45052: ST_TO_ADDR
// for i := 1 to list do
45053: LD_ADDR_VAR 0 2
45057: PUSH
45058: DOUBLE
45059: LD_INT 1
45061: DEC
45062: ST_TO_ADDR
45063: LD_VAR 0 3
45067: PUSH
45068: FOR_TO
45069: IFFALSE 45160
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
45071: LD_STRING setWarehouseGatheringPointXY(
45073: PUSH
45074: LD_VAR 0 3
45078: PUSH
45079: LD_VAR 0 2
45083: ARRAY
45084: PUSH
45085: LD_INT 1
45087: ARRAY
45088: STR
45089: PUSH
45090: LD_STRING ,
45092: STR
45093: PUSH
45094: LD_VAR 0 3
45098: PUSH
45099: LD_VAR 0 2
45103: ARRAY
45104: PUSH
45105: LD_INT 2
45107: ARRAY
45108: STR
45109: PUSH
45110: LD_STRING ,
45112: STR
45113: PUSH
45114: LD_VAR 0 3
45118: PUSH
45119: LD_VAR 0 2
45123: ARRAY
45124: PUSH
45125: LD_INT 3
45127: ARRAY
45128: STR
45129: PUSH
45130: LD_STRING ,
45132: STR
45133: PUSH
45134: LD_VAR 0 3
45138: PUSH
45139: LD_VAR 0 2
45143: ARRAY
45144: PUSH
45145: LD_INT 4
45147: ARRAY
45148: STR
45149: PUSH
45150: LD_STRING )
45152: STR
45153: PPUSH
45154: CALL_OW 559
45158: GO 45068
45160: POP
45161: POP
// end ; end ;
45162: LD_VAR 0 1
45166: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
45167: LD_EXP 130
45171: IFFALSE 45856
45173: GO 45175
45175: DISABLE
45176: LD_INT 0
45178: PPUSH
45179: PPUSH
45180: PPUSH
45181: PPUSH
45182: PPUSH
45183: PPUSH
45184: PPUSH
45185: PPUSH
45186: PPUSH
// begin enable ;
45187: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
45188: LD_ADDR_VAR 0 3
45192: PUSH
45193: LD_EXP 130
45197: PPUSH
45198: CALL 91355 0 1
45202: ST_TO_ADDR
// if not list then
45203: LD_VAR 0 3
45207: NOT
45208: IFFALSE 45212
// exit ;
45210: GO 45856
// for i := 1 to list do
45212: LD_ADDR_VAR 0 1
45216: PUSH
45217: DOUBLE
45218: LD_INT 1
45220: DEC
45221: ST_TO_ADDR
45222: LD_VAR 0 3
45226: PUSH
45227: FOR_TO
45228: IFFALSE 45854
// begin depot := list [ i ] [ 2 ] ;
45230: LD_ADDR_VAR 0 8
45234: PUSH
45235: LD_VAR 0 3
45239: PUSH
45240: LD_VAR 0 1
45244: ARRAY
45245: PUSH
45246: LD_INT 2
45248: ARRAY
45249: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
45250: LD_ADDR_VAR 0 5
45254: PUSH
45255: LD_VAR 0 3
45259: PUSH
45260: LD_VAR 0 1
45264: ARRAY
45265: PUSH
45266: LD_INT 1
45268: ARRAY
45269: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
45270: LD_VAR 0 8
45274: PPUSH
45275: CALL_OW 301
45279: PUSH
45280: LD_VAR 0 5
45284: PUSH
45285: LD_VAR 0 8
45289: PPUSH
45290: CALL_OW 255
45294: NONEQUAL
45295: OR
45296: IFFALSE 45325
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
45298: LD_ADDR_EXP 130
45302: PUSH
45303: LD_EXP 130
45307: PPUSH
45308: LD_VAR 0 8
45312: PPUSH
45313: LD_INT 0
45315: PPUSH
45316: CALL_OW 1
45320: ST_TO_ADDR
// exit ;
45321: POP
45322: POP
45323: GO 45856
// end ; x := list [ i ] [ 3 ] ;
45325: LD_ADDR_VAR 0 6
45329: PUSH
45330: LD_VAR 0 3
45334: PUSH
45335: LD_VAR 0 1
45339: ARRAY
45340: PUSH
45341: LD_INT 3
45343: ARRAY
45344: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
45345: LD_ADDR_VAR 0 7
45349: PUSH
45350: LD_VAR 0 3
45354: PUSH
45355: LD_VAR 0 1
45359: ARRAY
45360: PUSH
45361: LD_INT 4
45363: ARRAY
45364: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
45365: LD_ADDR_VAR 0 9
45369: PUSH
45370: LD_VAR 0 6
45374: PPUSH
45375: LD_VAR 0 7
45379: PPUSH
45380: LD_INT 16
45382: PPUSH
45383: CALL 89943 0 3
45387: ST_TO_ADDR
// if not cratesNearbyPoint then
45388: LD_VAR 0 9
45392: NOT
45393: IFFALSE 45399
// exit ;
45395: POP
45396: POP
45397: GO 45856
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
45399: LD_ADDR_VAR 0 4
45403: PUSH
45404: LD_INT 22
45406: PUSH
45407: LD_VAR 0 5
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 3
45418: PUSH
45419: LD_INT 60
45421: PUSH
45422: EMPTY
45423: LIST
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 91
45431: PUSH
45432: LD_VAR 0 8
45436: PUSH
45437: LD_INT 6
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 2
45447: PUSH
45448: LD_INT 25
45450: PUSH
45451: LD_INT 2
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 25
45460: PUSH
45461: LD_INT 16
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: LIST
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: PPUSH
45479: CALL_OW 69
45483: PUSH
45484: LD_VAR 0 8
45488: PPUSH
45489: CALL_OW 313
45493: PPUSH
45494: LD_INT 3
45496: PUSH
45497: LD_INT 60
45499: PUSH
45500: EMPTY
45501: LIST
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 2
45509: PUSH
45510: LD_INT 25
45512: PUSH
45513: LD_INT 2
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 25
45522: PUSH
45523: LD_INT 16
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: LIST
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PPUSH
45539: CALL_OW 72
45543: UNION
45544: ST_TO_ADDR
// if tmp then
45545: LD_VAR 0 4
45549: IFFALSE 45629
// begin tmp := ShrinkArray ( tmp , 3 ) ;
45551: LD_ADDR_VAR 0 4
45555: PUSH
45556: LD_VAR 0 4
45560: PPUSH
45561: LD_INT 3
45563: PPUSH
45564: CALL 87912 0 2
45568: ST_TO_ADDR
// for j in tmp do
45569: LD_ADDR_VAR 0 2
45573: PUSH
45574: LD_VAR 0 4
45578: PUSH
45579: FOR_IN
45580: IFFALSE 45623
// begin if IsInUnit ( j ) then
45582: LD_VAR 0 2
45586: PPUSH
45587: CALL_OW 310
45591: IFFALSE 45602
// ComExit ( j ) ;
45593: LD_VAR 0 2
45597: PPUSH
45598: CALL 87995 0 1
// AddComCollect ( j , x , y ) ;
45602: LD_VAR 0 2
45606: PPUSH
45607: LD_VAR 0 6
45611: PPUSH
45612: LD_VAR 0 7
45616: PPUSH
45617: CALL_OW 177
// end ;
45621: GO 45579
45623: POP
45624: POP
// exit ;
45625: POP
45626: POP
45627: GO 45856
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
45629: LD_ADDR_VAR 0 4
45633: PUSH
45634: LD_INT 22
45636: PUSH
45637: LD_VAR 0 5
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 91
45648: PUSH
45649: LD_VAR 0 8
45653: PUSH
45654: LD_INT 8
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 2
45664: PUSH
45665: LD_INT 34
45667: PUSH
45668: LD_INT 12
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 34
45677: PUSH
45678: LD_INT 51
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 34
45687: PUSH
45688: LD_INT 32
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 34
45697: PUSH
45698: LD_INT 89
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: LIST
45716: PPUSH
45717: CALL_OW 69
45721: ST_TO_ADDR
// if tmp then
45722: LD_VAR 0 4
45726: IFFALSE 45852
// begin for j in tmp do
45728: LD_ADDR_VAR 0 2
45732: PUSH
45733: LD_VAR 0 4
45737: PUSH
45738: FOR_IN
45739: IFFALSE 45850
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
45741: LD_VAR 0 2
45745: PPUSH
45746: CALL_OW 262
45750: PUSH
45751: LD_INT 3
45753: EQUAL
45754: PUSH
45755: LD_VAR 0 2
45759: PPUSH
45760: CALL_OW 261
45764: PUSH
45765: LD_INT 20
45767: GREATER
45768: OR
45769: PUSH
45770: LD_VAR 0 2
45774: PPUSH
45775: CALL_OW 314
45779: NOT
45780: AND
45781: PUSH
45782: LD_VAR 0 2
45786: PPUSH
45787: CALL_OW 263
45791: PUSH
45792: LD_INT 1
45794: NONEQUAL
45795: PUSH
45796: LD_VAR 0 2
45800: PPUSH
45801: CALL_OW 311
45805: OR
45806: AND
45807: IFFALSE 45848
// begin ComCollect ( j , x , y ) ;
45809: LD_VAR 0 2
45813: PPUSH
45814: LD_VAR 0 6
45818: PPUSH
45819: LD_VAR 0 7
45823: PPUSH
45824: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
45828: LD_VAR 0 2
45832: PPUSH
45833: LD_VAR 0 8
45837: PPUSH
45838: CALL_OW 172
// exit ;
45842: POP
45843: POP
45844: POP
45845: POP
45846: GO 45856
// end ;
45848: GO 45738
45850: POP
45851: POP
// end ; end ;
45852: GO 45227
45854: POP
45855: POP
// end ; end_of_file
45856: PPOPN 9
45858: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
45859: LD_INT 0
45861: PPUSH
45862: PPUSH
45863: PPUSH
45864: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
45865: LD_VAR 0 1
45869: PPUSH
45870: CALL_OW 264
45874: PUSH
45875: LD_INT 91
45877: EQUAL
45878: IFFALSE 45950
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
45880: LD_INT 68
45882: PPUSH
45883: LD_VAR 0 1
45887: PPUSH
45888: CALL_OW 255
45892: PPUSH
45893: CALL_OW 321
45897: PUSH
45898: LD_INT 2
45900: EQUAL
45901: IFFALSE 45913
// eff := 70 else
45903: LD_ADDR_VAR 0 4
45907: PUSH
45908: LD_INT 70
45910: ST_TO_ADDR
45911: GO 45921
// eff := 30 ;
45913: LD_ADDR_VAR 0 4
45917: PUSH
45918: LD_INT 30
45920: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
45921: LD_VAR 0 1
45925: PPUSH
45926: CALL_OW 250
45930: PPUSH
45931: LD_VAR 0 1
45935: PPUSH
45936: CALL_OW 251
45940: PPUSH
45941: LD_VAR 0 4
45945: PPUSH
45946: CALL_OW 495
// end ; end ;
45950: LD_VAR 0 2
45954: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
45955: LD_INT 0
45957: PPUSH
// end ;
45958: LD_VAR 0 4
45962: RET
// export function SOS_Command ( cmd ) ; begin
45963: LD_INT 0
45965: PPUSH
// end ;
45966: LD_VAR 0 2
45970: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
45971: LD_INT 0
45973: PPUSH
// end ;
45974: LD_VAR 0 6
45978: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
45979: LD_INT 0
45981: PPUSH
45982: PPUSH
// if not vehicle or not factory then
45983: LD_VAR 0 1
45987: NOT
45988: PUSH
45989: LD_VAR 0 2
45993: NOT
45994: OR
45995: IFFALSE 45999
// exit ;
45997: GO 46230
// if factoryWaypoints >= factory then
45999: LD_EXP 129
46003: PUSH
46004: LD_VAR 0 2
46008: GREATEREQUAL
46009: IFFALSE 46230
// if factoryWaypoints [ factory ] then
46011: LD_EXP 129
46015: PUSH
46016: LD_VAR 0 2
46020: ARRAY
46021: IFFALSE 46230
// begin if GetControl ( vehicle ) = control_manual then
46023: LD_VAR 0 1
46027: PPUSH
46028: CALL_OW 263
46032: PUSH
46033: LD_INT 1
46035: EQUAL
46036: IFFALSE 46117
// begin driver := IsDrivenBy ( vehicle ) ;
46038: LD_ADDR_VAR 0 4
46042: PUSH
46043: LD_VAR 0 1
46047: PPUSH
46048: CALL_OW 311
46052: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
46053: LD_VAR 0 4
46057: PPUSH
46058: LD_EXP 129
46062: PUSH
46063: LD_VAR 0 2
46067: ARRAY
46068: PUSH
46069: LD_INT 3
46071: ARRAY
46072: PPUSH
46073: LD_EXP 129
46077: PUSH
46078: LD_VAR 0 2
46082: ARRAY
46083: PUSH
46084: LD_INT 4
46086: ARRAY
46087: PPUSH
46088: CALL_OW 171
// AddComExitVehicle ( driver ) ;
46092: LD_VAR 0 4
46096: PPUSH
46097: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
46101: LD_VAR 0 4
46105: PPUSH
46106: LD_VAR 0 2
46110: PPUSH
46111: CALL_OW 180
// end else
46115: GO 46230
// if GetControl ( vehicle ) = control_remote then
46117: LD_VAR 0 1
46121: PPUSH
46122: CALL_OW 263
46126: PUSH
46127: LD_INT 2
46129: EQUAL
46130: IFFALSE 46191
// begin wait ( 0 0$2 ) ;
46132: LD_INT 70
46134: PPUSH
46135: CALL_OW 67
// if Connect ( vehicle ) then
46139: LD_VAR 0 1
46143: PPUSH
46144: CALL 58254 0 1
46148: IFFALSE 46189
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
46150: LD_VAR 0 1
46154: PPUSH
46155: LD_EXP 129
46159: PUSH
46160: LD_VAR 0 2
46164: ARRAY
46165: PUSH
46166: LD_INT 3
46168: ARRAY
46169: PPUSH
46170: LD_EXP 129
46174: PUSH
46175: LD_VAR 0 2
46179: ARRAY
46180: PUSH
46181: LD_INT 4
46183: ARRAY
46184: PPUSH
46185: CALL_OW 171
// end else
46189: GO 46230
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
46191: LD_VAR 0 1
46195: PPUSH
46196: LD_EXP 129
46200: PUSH
46201: LD_VAR 0 2
46205: ARRAY
46206: PUSH
46207: LD_INT 3
46209: ARRAY
46210: PPUSH
46211: LD_EXP 129
46215: PUSH
46216: LD_VAR 0 2
46220: ARRAY
46221: PUSH
46222: LD_INT 4
46224: ARRAY
46225: PPUSH
46226: CALL_OW 171
// end ; end ;
46230: LD_VAR 0 3
46234: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
46235: LD_INT 0
46237: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
46238: LD_VAR 0 1
46242: PUSH
46243: LD_INT 250
46245: EQUAL
46246: PUSH
46247: LD_VAR 0 2
46251: PPUSH
46252: CALL_OW 264
46256: PUSH
46257: LD_INT 81
46259: EQUAL
46260: AND
46261: IFFALSE 46282
// MinerPlaceMine ( unit , x , y ) ;
46263: LD_VAR 0 2
46267: PPUSH
46268: LD_VAR 0 4
46272: PPUSH
46273: LD_VAR 0 5
46277: PPUSH
46278: CALL 48667 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
46282: LD_VAR 0 1
46286: PUSH
46287: LD_INT 251
46289: EQUAL
46290: PUSH
46291: LD_VAR 0 2
46295: PPUSH
46296: CALL_OW 264
46300: PUSH
46301: LD_INT 81
46303: EQUAL
46304: AND
46305: IFFALSE 46326
// MinerDetonateMine ( unit , x , y ) ;
46307: LD_VAR 0 2
46311: PPUSH
46312: LD_VAR 0 4
46316: PPUSH
46317: LD_VAR 0 5
46321: PPUSH
46322: CALL 48942 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
46326: LD_VAR 0 1
46330: PUSH
46331: LD_INT 252
46333: EQUAL
46334: PUSH
46335: LD_VAR 0 2
46339: PPUSH
46340: CALL_OW 264
46344: PUSH
46345: LD_INT 81
46347: EQUAL
46348: AND
46349: IFFALSE 46370
// MinerCreateMinefield ( unit , x , y ) ;
46351: LD_VAR 0 2
46355: PPUSH
46356: LD_VAR 0 4
46360: PPUSH
46361: LD_VAR 0 5
46365: PPUSH
46366: CALL 49359 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
46370: LD_VAR 0 1
46374: PUSH
46375: LD_INT 253
46377: EQUAL
46378: PUSH
46379: LD_VAR 0 2
46383: PPUSH
46384: CALL_OW 257
46388: PUSH
46389: LD_INT 5
46391: EQUAL
46392: AND
46393: IFFALSE 46414
// ComBinocular ( unit , x , y ) ;
46395: LD_VAR 0 2
46399: PPUSH
46400: LD_VAR 0 4
46404: PPUSH
46405: LD_VAR 0 5
46409: PPUSH
46410: CALL 49728 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
46414: LD_VAR 0 1
46418: PUSH
46419: LD_INT 254
46421: EQUAL
46422: PUSH
46423: LD_VAR 0 2
46427: PPUSH
46428: CALL_OW 264
46432: PUSH
46433: LD_INT 99
46435: EQUAL
46436: AND
46437: PUSH
46438: LD_VAR 0 3
46442: PPUSH
46443: CALL_OW 263
46447: PUSH
46448: LD_INT 3
46450: EQUAL
46451: AND
46452: IFFALSE 46468
// HackDestroyVehicle ( unit , selectedUnit ) ;
46454: LD_VAR 0 2
46458: PPUSH
46459: LD_VAR 0 3
46463: PPUSH
46464: CALL 48031 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
46468: LD_VAR 0 1
46472: PUSH
46473: LD_INT 255
46475: EQUAL
46476: PUSH
46477: LD_VAR 0 2
46481: PPUSH
46482: CALL_OW 264
46486: PUSH
46487: LD_INT 14
46489: PUSH
46490: LD_INT 53
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: IN
46497: AND
46498: PUSH
46499: LD_VAR 0 4
46503: PPUSH
46504: LD_VAR 0 5
46508: PPUSH
46509: CALL_OW 488
46513: AND
46514: IFFALSE 46538
// CutTreeXYR ( unit , x , y , 12 ) ;
46516: LD_VAR 0 2
46520: PPUSH
46521: LD_VAR 0 4
46525: PPUSH
46526: LD_VAR 0 5
46530: PPUSH
46531: LD_INT 12
46533: PPUSH
46534: CALL 46601 0 4
// if cmd = 256 then
46538: LD_VAR 0 1
46542: PUSH
46543: LD_INT 256
46545: EQUAL
46546: IFFALSE 46567
// SetFactoryWaypoint ( unit , x , y ) ;
46548: LD_VAR 0 2
46552: PPUSH
46553: LD_VAR 0 4
46557: PPUSH
46558: LD_VAR 0 5
46562: PPUSH
46563: CALL 44548 0 3
// if cmd = 257 then
46567: LD_VAR 0 1
46571: PUSH
46572: LD_INT 257
46574: EQUAL
46575: IFFALSE 46596
// SetWarehouseGatheringPoint ( unit , x , y ) ;
46577: LD_VAR 0 2
46581: PPUSH
46582: LD_VAR 0 4
46586: PPUSH
46587: LD_VAR 0 5
46591: PPUSH
46592: CALL 44910 0 3
// end ;
46596: LD_VAR 0 6
46600: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
46601: LD_INT 0
46603: PPUSH
46604: PPUSH
46605: PPUSH
46606: PPUSH
46607: PPUSH
46608: PPUSH
46609: PPUSH
46610: PPUSH
46611: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
46612: LD_VAR 0 1
46616: NOT
46617: PUSH
46618: LD_VAR 0 2
46622: PPUSH
46623: LD_VAR 0 3
46627: PPUSH
46628: CALL_OW 488
46632: NOT
46633: OR
46634: PUSH
46635: LD_VAR 0 4
46639: NOT
46640: OR
46641: IFFALSE 46645
// exit ;
46643: GO 46985
// list := [ ] ;
46645: LD_ADDR_VAR 0 13
46649: PUSH
46650: EMPTY
46651: ST_TO_ADDR
// if x - r < 0 then
46652: LD_VAR 0 2
46656: PUSH
46657: LD_VAR 0 4
46661: MINUS
46662: PUSH
46663: LD_INT 0
46665: LESS
46666: IFFALSE 46678
// min_x := 0 else
46668: LD_ADDR_VAR 0 7
46672: PUSH
46673: LD_INT 0
46675: ST_TO_ADDR
46676: GO 46694
// min_x := x - r ;
46678: LD_ADDR_VAR 0 7
46682: PUSH
46683: LD_VAR 0 2
46687: PUSH
46688: LD_VAR 0 4
46692: MINUS
46693: ST_TO_ADDR
// if y - r < 0 then
46694: LD_VAR 0 3
46698: PUSH
46699: LD_VAR 0 4
46703: MINUS
46704: PUSH
46705: LD_INT 0
46707: LESS
46708: IFFALSE 46720
// min_y := 0 else
46710: LD_ADDR_VAR 0 8
46714: PUSH
46715: LD_INT 0
46717: ST_TO_ADDR
46718: GO 46736
// min_y := y - r ;
46720: LD_ADDR_VAR 0 8
46724: PUSH
46725: LD_VAR 0 3
46729: PUSH
46730: LD_VAR 0 4
46734: MINUS
46735: ST_TO_ADDR
// max_x := x + r ;
46736: LD_ADDR_VAR 0 9
46740: PUSH
46741: LD_VAR 0 2
46745: PUSH
46746: LD_VAR 0 4
46750: PLUS
46751: ST_TO_ADDR
// max_y := y + r ;
46752: LD_ADDR_VAR 0 10
46756: PUSH
46757: LD_VAR 0 3
46761: PUSH
46762: LD_VAR 0 4
46766: PLUS
46767: ST_TO_ADDR
// for _x = min_x to max_x do
46768: LD_ADDR_VAR 0 11
46772: PUSH
46773: DOUBLE
46774: LD_VAR 0 7
46778: DEC
46779: ST_TO_ADDR
46780: LD_VAR 0 9
46784: PUSH
46785: FOR_TO
46786: IFFALSE 46903
// for _y = min_y to max_y do
46788: LD_ADDR_VAR 0 12
46792: PUSH
46793: DOUBLE
46794: LD_VAR 0 8
46798: DEC
46799: ST_TO_ADDR
46800: LD_VAR 0 10
46804: PUSH
46805: FOR_TO
46806: IFFALSE 46899
// begin if not ValidHex ( _x , _y ) then
46808: LD_VAR 0 11
46812: PPUSH
46813: LD_VAR 0 12
46817: PPUSH
46818: CALL_OW 488
46822: NOT
46823: IFFALSE 46827
// continue ;
46825: GO 46805
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
46827: LD_VAR 0 11
46831: PPUSH
46832: LD_VAR 0 12
46836: PPUSH
46837: CALL_OW 351
46841: PUSH
46842: LD_VAR 0 11
46846: PPUSH
46847: LD_VAR 0 12
46851: PPUSH
46852: CALL_OW 554
46856: AND
46857: IFFALSE 46897
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
46859: LD_ADDR_VAR 0 13
46863: PUSH
46864: LD_VAR 0 13
46868: PPUSH
46869: LD_VAR 0 13
46873: PUSH
46874: LD_INT 1
46876: PLUS
46877: PPUSH
46878: LD_VAR 0 11
46882: PUSH
46883: LD_VAR 0 12
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PPUSH
46892: CALL_OW 2
46896: ST_TO_ADDR
// end ;
46897: GO 46805
46899: POP
46900: POP
46901: GO 46785
46903: POP
46904: POP
// if not list then
46905: LD_VAR 0 13
46909: NOT
46910: IFFALSE 46914
// exit ;
46912: GO 46985
// for i in list do
46914: LD_ADDR_VAR 0 6
46918: PUSH
46919: LD_VAR 0 13
46923: PUSH
46924: FOR_IN
46925: IFFALSE 46983
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
46927: LD_VAR 0 1
46931: PPUSH
46932: LD_STRING M
46934: PUSH
46935: LD_VAR 0 6
46939: PUSH
46940: LD_INT 1
46942: ARRAY
46943: PUSH
46944: LD_VAR 0 6
46948: PUSH
46949: LD_INT 2
46951: ARRAY
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: PUSH
46974: EMPTY
46975: LIST
46976: PPUSH
46977: CALL_OW 447
46981: GO 46924
46983: POP
46984: POP
// end ;
46985: LD_VAR 0 5
46989: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
46990: LD_EXP 132
46994: NOT
46995: IFFALSE 47045
46997: GO 46999
46999: DISABLE
// begin initHack := true ;
47000: LD_ADDR_EXP 132
47004: PUSH
47005: LD_INT 1
47007: ST_TO_ADDR
// hackTanks := [ ] ;
47008: LD_ADDR_EXP 133
47012: PUSH
47013: EMPTY
47014: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
47015: LD_ADDR_EXP 134
47019: PUSH
47020: EMPTY
47021: ST_TO_ADDR
// hackLimit := 3 ;
47022: LD_ADDR_EXP 135
47026: PUSH
47027: LD_INT 3
47029: ST_TO_ADDR
// hackDist := 12 ;
47030: LD_ADDR_EXP 136
47034: PUSH
47035: LD_INT 12
47037: ST_TO_ADDR
// hackCounter := [ ] ;
47038: LD_ADDR_EXP 137
47042: PUSH
47043: EMPTY
47044: ST_TO_ADDR
// end ;
47045: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
47046: LD_EXP 132
47050: PUSH
47051: LD_INT 34
47053: PUSH
47054: LD_INT 99
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PPUSH
47061: CALL_OW 69
47065: AND
47066: IFFALSE 47319
47068: GO 47070
47070: DISABLE
47071: LD_INT 0
47073: PPUSH
47074: PPUSH
// begin enable ;
47075: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
47076: LD_ADDR_VAR 0 1
47080: PUSH
47081: LD_INT 34
47083: PUSH
47084: LD_INT 99
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PPUSH
47091: CALL_OW 69
47095: PUSH
47096: FOR_IN
47097: IFFALSE 47317
// begin if not i in hackTanks then
47099: LD_VAR 0 1
47103: PUSH
47104: LD_EXP 133
47108: IN
47109: NOT
47110: IFFALSE 47193
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
47112: LD_ADDR_EXP 133
47116: PUSH
47117: LD_EXP 133
47121: PPUSH
47122: LD_EXP 133
47126: PUSH
47127: LD_INT 1
47129: PLUS
47130: PPUSH
47131: LD_VAR 0 1
47135: PPUSH
47136: CALL_OW 1
47140: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
47141: LD_ADDR_EXP 134
47145: PUSH
47146: LD_EXP 134
47150: PPUSH
47151: LD_EXP 134
47155: PUSH
47156: LD_INT 1
47158: PLUS
47159: PPUSH
47160: EMPTY
47161: PPUSH
47162: CALL_OW 1
47166: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
47167: LD_ADDR_EXP 137
47171: PUSH
47172: LD_EXP 137
47176: PPUSH
47177: LD_EXP 137
47181: PUSH
47182: LD_INT 1
47184: PLUS
47185: PPUSH
47186: EMPTY
47187: PPUSH
47188: CALL_OW 1
47192: ST_TO_ADDR
// end ; if not IsOk ( i ) then
47193: LD_VAR 0 1
47197: PPUSH
47198: CALL_OW 302
47202: NOT
47203: IFFALSE 47216
// begin HackUnlinkAll ( i ) ;
47205: LD_VAR 0 1
47209: PPUSH
47210: CALL 47322 0 1
// continue ;
47214: GO 47096
// end ; HackCheckCapturedStatus ( i ) ;
47216: LD_VAR 0 1
47220: PPUSH
47221: CALL 47765 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
47225: LD_ADDR_VAR 0 2
47229: PUSH
47230: LD_INT 81
47232: PUSH
47233: LD_VAR 0 1
47237: PPUSH
47238: CALL_OW 255
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 33
47249: PUSH
47250: LD_INT 3
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 91
47259: PUSH
47260: LD_VAR 0 1
47264: PUSH
47265: LD_EXP 136
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 50
47277: PUSH
47278: EMPTY
47279: LIST
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: PPUSH
47287: CALL_OW 69
47291: ST_TO_ADDR
// if not tmp then
47292: LD_VAR 0 2
47296: NOT
47297: IFFALSE 47301
// continue ;
47299: GO 47096
// HackLink ( i , tmp ) ;
47301: LD_VAR 0 1
47305: PPUSH
47306: LD_VAR 0 2
47310: PPUSH
47311: CALL 47458 0 2
// end ;
47315: GO 47096
47317: POP
47318: POP
// end ;
47319: PPOPN 2
47321: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
47322: LD_INT 0
47324: PPUSH
47325: PPUSH
47326: PPUSH
// if not hack in hackTanks then
47327: LD_VAR 0 1
47331: PUSH
47332: LD_EXP 133
47336: IN
47337: NOT
47338: IFFALSE 47342
// exit ;
47340: GO 47453
// index := GetElementIndex ( hackTanks , hack ) ;
47342: LD_ADDR_VAR 0 4
47346: PUSH
47347: LD_EXP 133
47351: PPUSH
47352: LD_VAR 0 1
47356: PPUSH
47357: CALL 55070 0 2
47361: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
47362: LD_EXP 134
47366: PUSH
47367: LD_VAR 0 4
47371: ARRAY
47372: IFFALSE 47453
// begin for i in hackTanksCaptured [ index ] do
47374: LD_ADDR_VAR 0 3
47378: PUSH
47379: LD_EXP 134
47383: PUSH
47384: LD_VAR 0 4
47388: ARRAY
47389: PUSH
47390: FOR_IN
47391: IFFALSE 47417
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
47393: LD_VAR 0 3
47397: PUSH
47398: LD_INT 1
47400: ARRAY
47401: PPUSH
47402: LD_VAR 0 3
47406: PUSH
47407: LD_INT 2
47409: ARRAY
47410: PPUSH
47411: CALL_OW 235
47415: GO 47390
47417: POP
47418: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
47419: LD_ADDR_EXP 134
47423: PUSH
47424: LD_EXP 134
47428: PPUSH
47429: LD_VAR 0 4
47433: PPUSH
47434: EMPTY
47435: PPUSH
47436: CALL_OW 1
47440: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
47441: LD_VAR 0 1
47445: PPUSH
47446: LD_INT 0
47448: PPUSH
47449: CALL_OW 505
// end ; end ;
47453: LD_VAR 0 2
47457: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
47458: LD_INT 0
47460: PPUSH
47461: PPUSH
47462: PPUSH
// if not hack in hackTanks or not vehicles then
47463: LD_VAR 0 1
47467: PUSH
47468: LD_EXP 133
47472: IN
47473: NOT
47474: PUSH
47475: LD_VAR 0 2
47479: NOT
47480: OR
47481: IFFALSE 47485
// exit ;
47483: GO 47760
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
47485: LD_ADDR_VAR 0 2
47489: PUSH
47490: LD_VAR 0 1
47494: PPUSH
47495: LD_VAR 0 2
47499: PPUSH
47500: LD_INT 1
47502: PPUSH
47503: LD_INT 1
47505: PPUSH
47506: CALL 55720 0 4
47510: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
47511: LD_ADDR_VAR 0 5
47515: PUSH
47516: LD_EXP 133
47520: PPUSH
47521: LD_VAR 0 1
47525: PPUSH
47526: CALL 55070 0 2
47530: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
47531: LD_EXP 134
47535: PUSH
47536: LD_VAR 0 5
47540: ARRAY
47541: PUSH
47542: LD_EXP 135
47546: LESS
47547: IFFALSE 47736
// begin for i := 1 to vehicles do
47549: LD_ADDR_VAR 0 4
47553: PUSH
47554: DOUBLE
47555: LD_INT 1
47557: DEC
47558: ST_TO_ADDR
47559: LD_VAR 0 2
47563: PUSH
47564: FOR_TO
47565: IFFALSE 47734
// begin if hackTanksCaptured [ index ] = hackLimit then
47567: LD_EXP 134
47571: PUSH
47572: LD_VAR 0 5
47576: ARRAY
47577: PUSH
47578: LD_EXP 135
47582: EQUAL
47583: IFFALSE 47587
// break ;
47585: GO 47734
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
47587: LD_ADDR_EXP 137
47591: PUSH
47592: LD_EXP 137
47596: PPUSH
47597: LD_VAR 0 5
47601: PPUSH
47602: LD_EXP 137
47606: PUSH
47607: LD_VAR 0 5
47611: ARRAY
47612: PUSH
47613: LD_INT 1
47615: PLUS
47616: PPUSH
47617: CALL_OW 1
47621: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
47622: LD_ADDR_EXP 134
47626: PUSH
47627: LD_EXP 134
47631: PPUSH
47632: LD_VAR 0 5
47636: PUSH
47637: LD_EXP 134
47641: PUSH
47642: LD_VAR 0 5
47646: ARRAY
47647: PUSH
47648: LD_INT 1
47650: PLUS
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PPUSH
47656: LD_VAR 0 2
47660: PUSH
47661: LD_VAR 0 4
47665: ARRAY
47666: PUSH
47667: LD_VAR 0 2
47671: PUSH
47672: LD_VAR 0 4
47676: ARRAY
47677: PPUSH
47678: CALL_OW 255
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PPUSH
47687: CALL 55285 0 3
47691: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
47692: LD_VAR 0 2
47696: PUSH
47697: LD_VAR 0 4
47701: ARRAY
47702: PPUSH
47703: LD_VAR 0 1
47707: PPUSH
47708: CALL_OW 255
47712: PPUSH
47713: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
47717: LD_VAR 0 2
47721: PUSH
47722: LD_VAR 0 4
47726: ARRAY
47727: PPUSH
47728: CALL_OW 141
// end ;
47732: GO 47564
47734: POP
47735: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
47736: LD_VAR 0 1
47740: PPUSH
47741: LD_EXP 134
47745: PUSH
47746: LD_VAR 0 5
47750: ARRAY
47751: PUSH
47752: LD_INT 0
47754: PLUS
47755: PPUSH
47756: CALL_OW 505
// end ;
47760: LD_VAR 0 3
47764: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
47765: LD_INT 0
47767: PPUSH
47768: PPUSH
47769: PPUSH
47770: PPUSH
// if not hack in hackTanks then
47771: LD_VAR 0 1
47775: PUSH
47776: LD_EXP 133
47780: IN
47781: NOT
47782: IFFALSE 47786
// exit ;
47784: GO 48026
// index := GetElementIndex ( hackTanks , hack ) ;
47786: LD_ADDR_VAR 0 4
47790: PUSH
47791: LD_EXP 133
47795: PPUSH
47796: LD_VAR 0 1
47800: PPUSH
47801: CALL 55070 0 2
47805: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
47806: LD_ADDR_VAR 0 3
47810: PUSH
47811: DOUBLE
47812: LD_EXP 134
47816: PUSH
47817: LD_VAR 0 4
47821: ARRAY
47822: INC
47823: ST_TO_ADDR
47824: LD_INT 1
47826: PUSH
47827: FOR_DOWNTO
47828: IFFALSE 48000
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
47830: LD_ADDR_VAR 0 5
47834: PUSH
47835: LD_EXP 134
47839: PUSH
47840: LD_VAR 0 4
47844: ARRAY
47845: PUSH
47846: LD_VAR 0 3
47850: ARRAY
47851: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
47852: LD_VAR 0 5
47856: PUSH
47857: LD_INT 1
47859: ARRAY
47860: PPUSH
47861: CALL_OW 302
47865: NOT
47866: PUSH
47867: LD_VAR 0 5
47871: PUSH
47872: LD_INT 1
47874: ARRAY
47875: PPUSH
47876: CALL_OW 255
47880: PUSH
47881: LD_VAR 0 1
47885: PPUSH
47886: CALL_OW 255
47890: NONEQUAL
47891: OR
47892: IFFALSE 47998
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
47894: LD_VAR 0 5
47898: PUSH
47899: LD_INT 1
47901: ARRAY
47902: PPUSH
47903: CALL_OW 305
47907: PUSH
47908: LD_VAR 0 5
47912: PUSH
47913: LD_INT 1
47915: ARRAY
47916: PPUSH
47917: CALL_OW 255
47921: PUSH
47922: LD_VAR 0 1
47926: PPUSH
47927: CALL_OW 255
47931: EQUAL
47932: AND
47933: IFFALSE 47957
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
47935: LD_VAR 0 5
47939: PUSH
47940: LD_INT 1
47942: ARRAY
47943: PPUSH
47944: LD_VAR 0 5
47948: PUSH
47949: LD_INT 2
47951: ARRAY
47952: PPUSH
47953: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
47957: LD_ADDR_EXP 134
47961: PUSH
47962: LD_EXP 134
47966: PPUSH
47967: LD_VAR 0 4
47971: PPUSH
47972: LD_EXP 134
47976: PUSH
47977: LD_VAR 0 4
47981: ARRAY
47982: PPUSH
47983: LD_VAR 0 3
47987: PPUSH
47988: CALL_OW 3
47992: PPUSH
47993: CALL_OW 1
47997: ST_TO_ADDR
// end ; end ;
47998: GO 47827
48000: POP
48001: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
48002: LD_VAR 0 1
48006: PPUSH
48007: LD_EXP 134
48011: PUSH
48012: LD_VAR 0 4
48016: ARRAY
48017: PUSH
48018: LD_INT 0
48020: PLUS
48021: PPUSH
48022: CALL_OW 505
// end ;
48026: LD_VAR 0 2
48030: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
48031: LD_INT 0
48033: PPUSH
48034: PPUSH
48035: PPUSH
48036: PPUSH
// if not hack in hackTanks then
48037: LD_VAR 0 1
48041: PUSH
48042: LD_EXP 133
48046: IN
48047: NOT
48048: IFFALSE 48052
// exit ;
48050: GO 48137
// index := GetElementIndex ( hackTanks , hack ) ;
48052: LD_ADDR_VAR 0 5
48056: PUSH
48057: LD_EXP 133
48061: PPUSH
48062: LD_VAR 0 1
48066: PPUSH
48067: CALL 55070 0 2
48071: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
48072: LD_ADDR_VAR 0 4
48076: PUSH
48077: DOUBLE
48078: LD_INT 1
48080: DEC
48081: ST_TO_ADDR
48082: LD_EXP 134
48086: PUSH
48087: LD_VAR 0 5
48091: ARRAY
48092: PUSH
48093: FOR_TO
48094: IFFALSE 48135
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
48096: LD_EXP 134
48100: PUSH
48101: LD_VAR 0 5
48105: ARRAY
48106: PUSH
48107: LD_VAR 0 4
48111: ARRAY
48112: PUSH
48113: LD_INT 1
48115: ARRAY
48116: PUSH
48117: LD_VAR 0 2
48121: EQUAL
48122: IFFALSE 48133
// KillUnit ( vehicle ) ;
48124: LD_VAR 0 2
48128: PPUSH
48129: CALL_OW 66
48133: GO 48093
48135: POP
48136: POP
// end ;
48137: LD_VAR 0 3
48141: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
48142: LD_EXP 138
48146: NOT
48147: IFFALSE 48182
48149: GO 48151
48151: DISABLE
// begin initMiner := true ;
48152: LD_ADDR_EXP 138
48156: PUSH
48157: LD_INT 1
48159: ST_TO_ADDR
// minersList := [ ] ;
48160: LD_ADDR_EXP 139
48164: PUSH
48165: EMPTY
48166: ST_TO_ADDR
// minerMinesList := [ ] ;
48167: LD_ADDR_EXP 140
48171: PUSH
48172: EMPTY
48173: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
48174: LD_ADDR_EXP 141
48178: PUSH
48179: LD_INT 5
48181: ST_TO_ADDR
// end ;
48182: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
48183: LD_EXP 138
48187: PUSH
48188: LD_INT 34
48190: PUSH
48191: LD_INT 81
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PPUSH
48198: CALL_OW 69
48202: AND
48203: IFFALSE 48664
48205: GO 48207
48207: DISABLE
48208: LD_INT 0
48210: PPUSH
48211: PPUSH
48212: PPUSH
48213: PPUSH
// begin enable ;
48214: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
48215: LD_ADDR_VAR 0 1
48219: PUSH
48220: LD_INT 34
48222: PUSH
48223: LD_INT 81
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PPUSH
48230: CALL_OW 69
48234: PUSH
48235: FOR_IN
48236: IFFALSE 48308
// begin if not i in minersList then
48238: LD_VAR 0 1
48242: PUSH
48243: LD_EXP 139
48247: IN
48248: NOT
48249: IFFALSE 48306
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
48251: LD_ADDR_EXP 139
48255: PUSH
48256: LD_EXP 139
48260: PPUSH
48261: LD_EXP 139
48265: PUSH
48266: LD_INT 1
48268: PLUS
48269: PPUSH
48270: LD_VAR 0 1
48274: PPUSH
48275: CALL_OW 1
48279: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
48280: LD_ADDR_EXP 140
48284: PUSH
48285: LD_EXP 140
48289: PPUSH
48290: LD_EXP 140
48294: PUSH
48295: LD_INT 1
48297: PLUS
48298: PPUSH
48299: EMPTY
48300: PPUSH
48301: CALL_OW 1
48305: ST_TO_ADDR
// end end ;
48306: GO 48235
48308: POP
48309: POP
// for i := minerMinesList downto 1 do
48310: LD_ADDR_VAR 0 1
48314: PUSH
48315: DOUBLE
48316: LD_EXP 140
48320: INC
48321: ST_TO_ADDR
48322: LD_INT 1
48324: PUSH
48325: FOR_DOWNTO
48326: IFFALSE 48662
// begin if IsLive ( minersList [ i ] ) then
48328: LD_EXP 139
48332: PUSH
48333: LD_VAR 0 1
48337: ARRAY
48338: PPUSH
48339: CALL_OW 300
48343: IFFALSE 48371
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
48345: LD_EXP 139
48349: PUSH
48350: LD_VAR 0 1
48354: ARRAY
48355: PPUSH
48356: LD_EXP 140
48360: PUSH
48361: LD_VAR 0 1
48365: ARRAY
48366: PPUSH
48367: CALL_OW 505
// if not minerMinesList [ i ] then
48371: LD_EXP 140
48375: PUSH
48376: LD_VAR 0 1
48380: ARRAY
48381: NOT
48382: IFFALSE 48386
// continue ;
48384: GO 48325
// for j := minerMinesList [ i ] downto 1 do
48386: LD_ADDR_VAR 0 2
48390: PUSH
48391: DOUBLE
48392: LD_EXP 140
48396: PUSH
48397: LD_VAR 0 1
48401: ARRAY
48402: INC
48403: ST_TO_ADDR
48404: LD_INT 1
48406: PUSH
48407: FOR_DOWNTO
48408: IFFALSE 48658
// begin side := GetSide ( minersList [ i ] ) ;
48410: LD_ADDR_VAR 0 3
48414: PUSH
48415: LD_EXP 139
48419: PUSH
48420: LD_VAR 0 1
48424: ARRAY
48425: PPUSH
48426: CALL_OW 255
48430: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
48431: LD_ADDR_VAR 0 4
48435: PUSH
48436: LD_EXP 140
48440: PUSH
48441: LD_VAR 0 1
48445: ARRAY
48446: PUSH
48447: LD_VAR 0 2
48451: ARRAY
48452: PUSH
48453: LD_INT 1
48455: ARRAY
48456: PPUSH
48457: LD_EXP 140
48461: PUSH
48462: LD_VAR 0 1
48466: ARRAY
48467: PUSH
48468: LD_VAR 0 2
48472: ARRAY
48473: PUSH
48474: LD_INT 2
48476: ARRAY
48477: PPUSH
48478: CALL_OW 428
48482: ST_TO_ADDR
// if not tmp then
48483: LD_VAR 0 4
48487: NOT
48488: IFFALSE 48492
// continue ;
48490: GO 48407
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
48492: LD_VAR 0 4
48496: PUSH
48497: LD_INT 81
48499: PUSH
48500: LD_VAR 0 3
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PPUSH
48509: CALL_OW 69
48513: IN
48514: PUSH
48515: LD_EXP 140
48519: PUSH
48520: LD_VAR 0 1
48524: ARRAY
48525: PUSH
48526: LD_VAR 0 2
48530: ARRAY
48531: PUSH
48532: LD_INT 1
48534: ARRAY
48535: PPUSH
48536: LD_EXP 140
48540: PUSH
48541: LD_VAR 0 1
48545: ARRAY
48546: PUSH
48547: LD_VAR 0 2
48551: ARRAY
48552: PUSH
48553: LD_INT 2
48555: ARRAY
48556: PPUSH
48557: CALL_OW 458
48561: AND
48562: IFFALSE 48656
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
48564: LD_EXP 140
48568: PUSH
48569: LD_VAR 0 1
48573: ARRAY
48574: PUSH
48575: LD_VAR 0 2
48579: ARRAY
48580: PUSH
48581: LD_INT 1
48583: ARRAY
48584: PPUSH
48585: LD_EXP 140
48589: PUSH
48590: LD_VAR 0 1
48594: ARRAY
48595: PUSH
48596: LD_VAR 0 2
48600: ARRAY
48601: PUSH
48602: LD_INT 2
48604: ARRAY
48605: PPUSH
48606: LD_VAR 0 3
48610: PPUSH
48611: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
48615: LD_ADDR_EXP 140
48619: PUSH
48620: LD_EXP 140
48624: PPUSH
48625: LD_VAR 0 1
48629: PPUSH
48630: LD_EXP 140
48634: PUSH
48635: LD_VAR 0 1
48639: ARRAY
48640: PPUSH
48641: LD_VAR 0 2
48645: PPUSH
48646: CALL_OW 3
48650: PPUSH
48651: CALL_OW 1
48655: ST_TO_ADDR
// end ; end ;
48656: GO 48407
48658: POP
48659: POP
// end ;
48660: GO 48325
48662: POP
48663: POP
// end ;
48664: PPOPN 4
48666: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
48667: LD_INT 0
48669: PPUSH
48670: PPUSH
// result := false ;
48671: LD_ADDR_VAR 0 4
48675: PUSH
48676: LD_INT 0
48678: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
48679: LD_VAR 0 1
48683: PPUSH
48684: CALL_OW 264
48688: PUSH
48689: LD_INT 81
48691: EQUAL
48692: NOT
48693: IFFALSE 48697
// exit ;
48695: GO 48937
// index := GetElementIndex ( minersList , unit ) ;
48697: LD_ADDR_VAR 0 5
48701: PUSH
48702: LD_EXP 139
48706: PPUSH
48707: LD_VAR 0 1
48711: PPUSH
48712: CALL 55070 0 2
48716: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
48717: LD_EXP 140
48721: PUSH
48722: LD_VAR 0 5
48726: ARRAY
48727: PUSH
48728: LD_EXP 141
48732: GREATEREQUAL
48733: IFFALSE 48737
// exit ;
48735: GO 48937
// ComMoveXY ( unit , x , y ) ;
48737: LD_VAR 0 1
48741: PPUSH
48742: LD_VAR 0 2
48746: PPUSH
48747: LD_VAR 0 3
48751: PPUSH
48752: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
48756: LD_INT 35
48758: PPUSH
48759: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
48763: LD_VAR 0 1
48767: PPUSH
48768: LD_VAR 0 2
48772: PPUSH
48773: LD_VAR 0 3
48777: PPUSH
48778: CALL 86406 0 3
48782: NOT
48783: PUSH
48784: LD_VAR 0 1
48788: PPUSH
48789: CALL_OW 314
48793: AND
48794: IFFALSE 48798
// exit ;
48796: GO 48937
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
48798: LD_VAR 0 2
48802: PPUSH
48803: LD_VAR 0 3
48807: PPUSH
48808: CALL_OW 428
48812: PUSH
48813: LD_VAR 0 1
48817: EQUAL
48818: PUSH
48819: LD_VAR 0 1
48823: PPUSH
48824: CALL_OW 314
48828: NOT
48829: AND
48830: IFFALSE 48756
// PlaySoundXY ( x , y , PlantMine ) ;
48832: LD_VAR 0 2
48836: PPUSH
48837: LD_VAR 0 3
48841: PPUSH
48842: LD_STRING PlantMine
48844: PPUSH
48845: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
48849: LD_VAR 0 2
48853: PPUSH
48854: LD_VAR 0 3
48858: PPUSH
48859: LD_VAR 0 1
48863: PPUSH
48864: CALL_OW 255
48868: PPUSH
48869: LD_INT 0
48871: PPUSH
48872: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
48876: LD_ADDR_EXP 140
48880: PUSH
48881: LD_EXP 140
48885: PPUSH
48886: LD_VAR 0 5
48890: PUSH
48891: LD_EXP 140
48895: PUSH
48896: LD_VAR 0 5
48900: ARRAY
48901: PUSH
48902: LD_INT 1
48904: PLUS
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PPUSH
48910: LD_VAR 0 2
48914: PUSH
48915: LD_VAR 0 3
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PPUSH
48924: CALL 55285 0 3
48928: ST_TO_ADDR
// result := true ;
48929: LD_ADDR_VAR 0 4
48933: PUSH
48934: LD_INT 1
48936: ST_TO_ADDR
// end ;
48937: LD_VAR 0 4
48941: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
48942: LD_INT 0
48944: PPUSH
48945: PPUSH
48946: PPUSH
// if not unit in minersList then
48947: LD_VAR 0 1
48951: PUSH
48952: LD_EXP 139
48956: IN
48957: NOT
48958: IFFALSE 48962
// exit ;
48960: GO 49354
// index := GetElementIndex ( minersList , unit ) ;
48962: LD_ADDR_VAR 0 6
48966: PUSH
48967: LD_EXP 139
48971: PPUSH
48972: LD_VAR 0 1
48976: PPUSH
48977: CALL 55070 0 2
48981: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
48982: LD_ADDR_VAR 0 5
48986: PUSH
48987: DOUBLE
48988: LD_EXP 140
48992: PUSH
48993: LD_VAR 0 6
48997: ARRAY
48998: INC
48999: ST_TO_ADDR
49000: LD_INT 1
49002: PUSH
49003: FOR_DOWNTO
49004: IFFALSE 49165
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
49006: LD_EXP 140
49010: PUSH
49011: LD_VAR 0 6
49015: ARRAY
49016: PUSH
49017: LD_VAR 0 5
49021: ARRAY
49022: PUSH
49023: LD_INT 1
49025: ARRAY
49026: PUSH
49027: LD_VAR 0 2
49031: EQUAL
49032: PUSH
49033: LD_EXP 140
49037: PUSH
49038: LD_VAR 0 6
49042: ARRAY
49043: PUSH
49044: LD_VAR 0 5
49048: ARRAY
49049: PUSH
49050: LD_INT 2
49052: ARRAY
49053: PUSH
49054: LD_VAR 0 3
49058: EQUAL
49059: AND
49060: IFFALSE 49163
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
49062: LD_EXP 140
49066: PUSH
49067: LD_VAR 0 6
49071: ARRAY
49072: PUSH
49073: LD_VAR 0 5
49077: ARRAY
49078: PUSH
49079: LD_INT 1
49081: ARRAY
49082: PPUSH
49083: LD_EXP 140
49087: PUSH
49088: LD_VAR 0 6
49092: ARRAY
49093: PUSH
49094: LD_VAR 0 5
49098: ARRAY
49099: PUSH
49100: LD_INT 2
49102: ARRAY
49103: PPUSH
49104: LD_VAR 0 1
49108: PPUSH
49109: CALL_OW 255
49113: PPUSH
49114: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
49118: LD_ADDR_EXP 140
49122: PUSH
49123: LD_EXP 140
49127: PPUSH
49128: LD_VAR 0 6
49132: PPUSH
49133: LD_EXP 140
49137: PUSH
49138: LD_VAR 0 6
49142: ARRAY
49143: PPUSH
49144: LD_VAR 0 5
49148: PPUSH
49149: CALL_OW 3
49153: PPUSH
49154: CALL_OW 1
49158: ST_TO_ADDR
// exit ;
49159: POP
49160: POP
49161: GO 49354
// end ; end ;
49163: GO 49003
49165: POP
49166: POP
// for i := minerMinesList [ index ] downto 1 do
49167: LD_ADDR_VAR 0 5
49171: PUSH
49172: DOUBLE
49173: LD_EXP 140
49177: PUSH
49178: LD_VAR 0 6
49182: ARRAY
49183: INC
49184: ST_TO_ADDR
49185: LD_INT 1
49187: PUSH
49188: FOR_DOWNTO
49189: IFFALSE 49352
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
49191: LD_EXP 140
49195: PUSH
49196: LD_VAR 0 6
49200: ARRAY
49201: PUSH
49202: LD_VAR 0 5
49206: ARRAY
49207: PUSH
49208: LD_INT 1
49210: ARRAY
49211: PPUSH
49212: LD_EXP 140
49216: PUSH
49217: LD_VAR 0 6
49221: ARRAY
49222: PUSH
49223: LD_VAR 0 5
49227: ARRAY
49228: PUSH
49229: LD_INT 2
49231: ARRAY
49232: PPUSH
49233: LD_VAR 0 2
49237: PPUSH
49238: LD_VAR 0 3
49242: PPUSH
49243: CALL_OW 298
49247: PUSH
49248: LD_INT 6
49250: LESS
49251: IFFALSE 49350
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
49253: LD_EXP 140
49257: PUSH
49258: LD_VAR 0 6
49262: ARRAY
49263: PUSH
49264: LD_VAR 0 5
49268: ARRAY
49269: PUSH
49270: LD_INT 1
49272: ARRAY
49273: PPUSH
49274: LD_EXP 140
49278: PUSH
49279: LD_VAR 0 6
49283: ARRAY
49284: PUSH
49285: LD_VAR 0 5
49289: ARRAY
49290: PUSH
49291: LD_INT 2
49293: ARRAY
49294: PPUSH
49295: LD_VAR 0 1
49299: PPUSH
49300: CALL_OW 255
49304: PPUSH
49305: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
49309: LD_ADDR_EXP 140
49313: PUSH
49314: LD_EXP 140
49318: PPUSH
49319: LD_VAR 0 6
49323: PPUSH
49324: LD_EXP 140
49328: PUSH
49329: LD_VAR 0 6
49333: ARRAY
49334: PPUSH
49335: LD_VAR 0 5
49339: PPUSH
49340: CALL_OW 3
49344: PPUSH
49345: CALL_OW 1
49349: ST_TO_ADDR
// end ; end ;
49350: GO 49188
49352: POP
49353: POP
// end ;
49354: LD_VAR 0 4
49358: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
49359: LD_INT 0
49361: PPUSH
49362: PPUSH
49363: PPUSH
49364: PPUSH
49365: PPUSH
49366: PPUSH
49367: PPUSH
49368: PPUSH
49369: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
49370: LD_VAR 0 1
49374: PPUSH
49375: CALL_OW 264
49379: PUSH
49380: LD_INT 81
49382: EQUAL
49383: NOT
49384: PUSH
49385: LD_VAR 0 1
49389: PUSH
49390: LD_EXP 139
49394: IN
49395: NOT
49396: OR
49397: IFFALSE 49401
// exit ;
49399: GO 49723
// index := GetElementIndex ( minersList , unit ) ;
49401: LD_ADDR_VAR 0 6
49405: PUSH
49406: LD_EXP 139
49410: PPUSH
49411: LD_VAR 0 1
49415: PPUSH
49416: CALL 55070 0 2
49420: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
49421: LD_ADDR_VAR 0 8
49425: PUSH
49426: LD_EXP 141
49430: PUSH
49431: LD_EXP 140
49435: PUSH
49436: LD_VAR 0 6
49440: ARRAY
49441: MINUS
49442: ST_TO_ADDR
// if not minesFreeAmount then
49443: LD_VAR 0 8
49447: NOT
49448: IFFALSE 49452
// exit ;
49450: GO 49723
// tmp := [ ] ;
49452: LD_ADDR_VAR 0 7
49456: PUSH
49457: EMPTY
49458: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
49459: LD_ADDR_VAR 0 5
49463: PUSH
49464: DOUBLE
49465: LD_INT 1
49467: DEC
49468: ST_TO_ADDR
49469: LD_VAR 0 8
49473: PUSH
49474: FOR_TO
49475: IFFALSE 49670
// begin _d := rand ( 0 , 5 ) ;
49477: LD_ADDR_VAR 0 11
49481: PUSH
49482: LD_INT 0
49484: PPUSH
49485: LD_INT 5
49487: PPUSH
49488: CALL_OW 12
49492: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
49493: LD_ADDR_VAR 0 12
49497: PUSH
49498: LD_INT 2
49500: PPUSH
49501: LD_INT 6
49503: PPUSH
49504: CALL_OW 12
49508: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
49509: LD_ADDR_VAR 0 9
49513: PUSH
49514: LD_VAR 0 2
49518: PPUSH
49519: LD_VAR 0 11
49523: PPUSH
49524: LD_VAR 0 12
49528: PPUSH
49529: CALL_OW 272
49533: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
49534: LD_ADDR_VAR 0 10
49538: PUSH
49539: LD_VAR 0 3
49543: PPUSH
49544: LD_VAR 0 11
49548: PPUSH
49549: LD_VAR 0 12
49553: PPUSH
49554: CALL_OW 273
49558: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
49559: LD_VAR 0 9
49563: PPUSH
49564: LD_VAR 0 10
49568: PPUSH
49569: CALL_OW 488
49573: PUSH
49574: LD_VAR 0 9
49578: PUSH
49579: LD_VAR 0 10
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_VAR 0 7
49592: IN
49593: NOT
49594: AND
49595: PUSH
49596: LD_VAR 0 9
49600: PPUSH
49601: LD_VAR 0 10
49605: PPUSH
49606: CALL_OW 458
49610: NOT
49611: AND
49612: IFFALSE 49654
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
49614: LD_ADDR_VAR 0 7
49618: PUSH
49619: LD_VAR 0 7
49623: PPUSH
49624: LD_VAR 0 7
49628: PUSH
49629: LD_INT 1
49631: PLUS
49632: PPUSH
49633: LD_VAR 0 9
49637: PUSH
49638: LD_VAR 0 10
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PPUSH
49647: CALL_OW 1
49651: ST_TO_ADDR
49652: GO 49668
// i := i - 1 ;
49654: LD_ADDR_VAR 0 5
49658: PUSH
49659: LD_VAR 0 5
49663: PUSH
49664: LD_INT 1
49666: MINUS
49667: ST_TO_ADDR
// end ;
49668: GO 49474
49670: POP
49671: POP
// for i in tmp do
49672: LD_ADDR_VAR 0 5
49676: PUSH
49677: LD_VAR 0 7
49681: PUSH
49682: FOR_IN
49683: IFFALSE 49721
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
49685: LD_VAR 0 1
49689: PPUSH
49690: LD_VAR 0 5
49694: PUSH
49695: LD_INT 1
49697: ARRAY
49698: PPUSH
49699: LD_VAR 0 5
49703: PUSH
49704: LD_INT 2
49706: ARRAY
49707: PPUSH
49708: CALL 48667 0 3
49712: NOT
49713: IFFALSE 49719
// exit ;
49715: POP
49716: POP
49717: GO 49723
49719: GO 49682
49721: POP
49722: POP
// end ;
49723: LD_VAR 0 4
49727: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
49728: LD_INT 0
49730: PPUSH
49731: PPUSH
49732: PPUSH
49733: PPUSH
49734: PPUSH
49735: PPUSH
49736: PPUSH
// if not GetClass ( unit ) = class_sniper then
49737: LD_VAR 0 1
49741: PPUSH
49742: CALL_OW 257
49746: PUSH
49747: LD_INT 5
49749: EQUAL
49750: NOT
49751: IFFALSE 49755
// exit ;
49753: GO 50143
// dist := 8 ;
49755: LD_ADDR_VAR 0 5
49759: PUSH
49760: LD_INT 8
49762: ST_TO_ADDR
// viewRange := 12 ;
49763: LD_ADDR_VAR 0 7
49767: PUSH
49768: LD_INT 12
49770: ST_TO_ADDR
// side := GetSide ( unit ) ;
49771: LD_ADDR_VAR 0 6
49775: PUSH
49776: LD_VAR 0 1
49780: PPUSH
49781: CALL_OW 255
49785: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
49786: LD_INT 61
49788: PPUSH
49789: LD_VAR 0 6
49793: PPUSH
49794: CALL_OW 321
49798: PUSH
49799: LD_INT 2
49801: EQUAL
49802: IFFALSE 49812
// viewRange := 16 ;
49804: LD_ADDR_VAR 0 7
49808: PUSH
49809: LD_INT 16
49811: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
49812: LD_VAR 0 1
49816: PPUSH
49817: LD_VAR 0 2
49821: PPUSH
49822: LD_VAR 0 3
49826: PPUSH
49827: CALL_OW 297
49831: PUSH
49832: LD_VAR 0 5
49836: GREATER
49837: IFFALSE 49916
// begin ComMoveXY ( unit , x , y ) ;
49839: LD_VAR 0 1
49843: PPUSH
49844: LD_VAR 0 2
49848: PPUSH
49849: LD_VAR 0 3
49853: PPUSH
49854: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
49858: LD_INT 35
49860: PPUSH
49861: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
49865: LD_VAR 0 1
49869: PPUSH
49870: LD_VAR 0 2
49874: PPUSH
49875: LD_VAR 0 3
49879: PPUSH
49880: CALL 86406 0 3
49884: NOT
49885: IFFALSE 49889
// exit ;
49887: GO 50143
// until GetDistUnitXY ( unit , x , y ) < dist ;
49889: LD_VAR 0 1
49893: PPUSH
49894: LD_VAR 0 2
49898: PPUSH
49899: LD_VAR 0 3
49903: PPUSH
49904: CALL_OW 297
49908: PUSH
49909: LD_VAR 0 5
49913: LESS
49914: IFFALSE 49858
// end ; ComTurnXY ( unit , x , y ) ;
49916: LD_VAR 0 1
49920: PPUSH
49921: LD_VAR 0 2
49925: PPUSH
49926: LD_VAR 0 3
49930: PPUSH
49931: CALL_OW 118
// wait ( 5 ) ;
49935: LD_INT 5
49937: PPUSH
49938: CALL_OW 67
// _d := GetDir ( unit ) ;
49942: LD_ADDR_VAR 0 10
49946: PUSH
49947: LD_VAR 0 1
49951: PPUSH
49952: CALL_OW 254
49956: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
49957: LD_ADDR_VAR 0 8
49961: PUSH
49962: LD_VAR 0 1
49966: PPUSH
49967: CALL_OW 250
49971: PPUSH
49972: LD_VAR 0 10
49976: PPUSH
49977: LD_VAR 0 5
49981: PPUSH
49982: CALL_OW 272
49986: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
49987: LD_ADDR_VAR 0 9
49991: PUSH
49992: LD_VAR 0 1
49996: PPUSH
49997: CALL_OW 251
50001: PPUSH
50002: LD_VAR 0 10
50006: PPUSH
50007: LD_VAR 0 5
50011: PPUSH
50012: CALL_OW 273
50016: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
50017: LD_VAR 0 8
50021: PPUSH
50022: LD_VAR 0 9
50026: PPUSH
50027: CALL_OW 488
50031: NOT
50032: IFFALSE 50036
// exit ;
50034: GO 50143
// ComAnimCustom ( unit , 1 ) ;
50036: LD_VAR 0 1
50040: PPUSH
50041: LD_INT 1
50043: PPUSH
50044: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
50048: LD_VAR 0 8
50052: PPUSH
50053: LD_VAR 0 9
50057: PPUSH
50058: LD_VAR 0 6
50062: PPUSH
50063: LD_VAR 0 7
50067: PPUSH
50068: CALL_OW 330
// repeat wait ( 1 ) ;
50072: LD_INT 1
50074: PPUSH
50075: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
50079: LD_VAR 0 1
50083: PPUSH
50084: CALL_OW 316
50088: PUSH
50089: LD_VAR 0 1
50093: PPUSH
50094: CALL_OW 314
50098: OR
50099: PUSH
50100: LD_VAR 0 1
50104: PPUSH
50105: CALL_OW 302
50109: NOT
50110: OR
50111: PUSH
50112: LD_VAR 0 1
50116: PPUSH
50117: CALL_OW 301
50121: OR
50122: IFFALSE 50072
// RemoveSeeing ( _x , _y , side ) ;
50124: LD_VAR 0 8
50128: PPUSH
50129: LD_VAR 0 9
50133: PPUSH
50134: LD_VAR 0 6
50138: PPUSH
50139: CALL_OW 331
// end ; end_of_file
50143: LD_VAR 0 4
50147: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
50148: LD_INT 0
50150: PPUSH
50151: PPUSH
// if exist_mode then
50152: LD_VAR 0 2
50156: IFFALSE 50181
// unit := CreateCharacter ( prefix & ident ) else
50158: LD_ADDR_VAR 0 5
50162: PUSH
50163: LD_VAR 0 3
50167: PUSH
50168: LD_VAR 0 1
50172: STR
50173: PPUSH
50174: CALL_OW 34
50178: ST_TO_ADDR
50179: GO 50196
// unit := NewCharacter ( ident ) ;
50181: LD_ADDR_VAR 0 5
50185: PUSH
50186: LD_VAR 0 1
50190: PPUSH
50191: CALL_OW 25
50195: ST_TO_ADDR
// result := unit ;
50196: LD_ADDR_VAR 0 4
50200: PUSH
50201: LD_VAR 0 5
50205: ST_TO_ADDR
// end ;
50206: LD_VAR 0 4
50210: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
50211: LD_INT 0
50213: PPUSH
50214: PPUSH
// if not side or not nation then
50215: LD_VAR 0 1
50219: NOT
50220: PUSH
50221: LD_VAR 0 2
50225: NOT
50226: OR
50227: IFFALSE 50231
// exit ;
50229: GO 50999
// case nation of nation_american :
50231: LD_VAR 0 2
50235: PUSH
50236: LD_INT 1
50238: DOUBLE
50239: EQUAL
50240: IFTRUE 50244
50242: GO 50458
50244: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
50245: LD_ADDR_VAR 0 4
50249: PUSH
50250: LD_INT 35
50252: PUSH
50253: LD_INT 45
50255: PUSH
50256: LD_INT 46
50258: PUSH
50259: LD_INT 47
50261: PUSH
50262: LD_INT 82
50264: PUSH
50265: LD_INT 83
50267: PUSH
50268: LD_INT 84
50270: PUSH
50271: LD_INT 85
50273: PUSH
50274: LD_INT 86
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: LD_INT 6
50285: PUSH
50286: LD_INT 15
50288: PUSH
50289: LD_INT 16
50291: PUSH
50292: LD_INT 7
50294: PUSH
50295: LD_INT 12
50297: PUSH
50298: LD_INT 13
50300: PUSH
50301: LD_INT 10
50303: PUSH
50304: LD_INT 14
50306: PUSH
50307: LD_INT 20
50309: PUSH
50310: LD_INT 21
50312: PUSH
50313: LD_INT 22
50315: PUSH
50316: LD_INT 25
50318: PUSH
50319: LD_INT 32
50321: PUSH
50322: LD_INT 27
50324: PUSH
50325: LD_INT 36
50327: PUSH
50328: LD_INT 69
50330: PUSH
50331: LD_INT 39
50333: PUSH
50334: LD_INT 34
50336: PUSH
50337: LD_INT 40
50339: PUSH
50340: LD_INT 48
50342: PUSH
50343: LD_INT 49
50345: PUSH
50346: LD_INT 50
50348: PUSH
50349: LD_INT 51
50351: PUSH
50352: LD_INT 52
50354: PUSH
50355: LD_INT 53
50357: PUSH
50358: LD_INT 54
50360: PUSH
50361: LD_INT 55
50363: PUSH
50364: LD_INT 56
50366: PUSH
50367: LD_INT 57
50369: PUSH
50370: LD_INT 58
50372: PUSH
50373: LD_INT 59
50375: PUSH
50376: LD_INT 60
50378: PUSH
50379: LD_INT 61
50381: PUSH
50382: LD_INT 62
50384: PUSH
50385: LD_INT 80
50387: PUSH
50388: LD_INT 82
50390: PUSH
50391: LD_INT 83
50393: PUSH
50394: LD_INT 84
50396: PUSH
50397: LD_INT 85
50399: PUSH
50400: LD_INT 86
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: ST_TO_ADDR
50456: GO 50923
50458: LD_INT 2
50460: DOUBLE
50461: EQUAL
50462: IFTRUE 50466
50464: GO 50692
50466: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
50467: LD_ADDR_VAR 0 4
50471: PUSH
50472: LD_INT 35
50474: PUSH
50475: LD_INT 45
50477: PUSH
50478: LD_INT 46
50480: PUSH
50481: LD_INT 47
50483: PUSH
50484: LD_INT 82
50486: PUSH
50487: LD_INT 83
50489: PUSH
50490: LD_INT 84
50492: PUSH
50493: LD_INT 85
50495: PUSH
50496: LD_INT 87
50498: PUSH
50499: LD_INT 70
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: LD_INT 11
50507: PUSH
50508: LD_INT 3
50510: PUSH
50511: LD_INT 4
50513: PUSH
50514: LD_INT 5
50516: PUSH
50517: LD_INT 6
50519: PUSH
50520: LD_INT 15
50522: PUSH
50523: LD_INT 18
50525: PUSH
50526: LD_INT 7
50528: PUSH
50529: LD_INT 17
50531: PUSH
50532: LD_INT 8
50534: PUSH
50535: LD_INT 20
50537: PUSH
50538: LD_INT 21
50540: PUSH
50541: LD_INT 22
50543: PUSH
50544: LD_INT 72
50546: PUSH
50547: LD_INT 26
50549: PUSH
50550: LD_INT 69
50552: PUSH
50553: LD_INT 39
50555: PUSH
50556: LD_INT 40
50558: PUSH
50559: LD_INT 41
50561: PUSH
50562: LD_INT 42
50564: PUSH
50565: LD_INT 43
50567: PUSH
50568: LD_INT 48
50570: PUSH
50571: LD_INT 49
50573: PUSH
50574: LD_INT 50
50576: PUSH
50577: LD_INT 51
50579: PUSH
50580: LD_INT 52
50582: PUSH
50583: LD_INT 53
50585: PUSH
50586: LD_INT 54
50588: PUSH
50589: LD_INT 55
50591: PUSH
50592: LD_INT 56
50594: PUSH
50595: LD_INT 60
50597: PUSH
50598: LD_INT 61
50600: PUSH
50601: LD_INT 62
50603: PUSH
50604: LD_INT 66
50606: PUSH
50607: LD_INT 67
50609: PUSH
50610: LD_INT 68
50612: PUSH
50613: LD_INT 81
50615: PUSH
50616: LD_INT 82
50618: PUSH
50619: LD_INT 83
50621: PUSH
50622: LD_INT 84
50624: PUSH
50625: LD_INT 85
50627: PUSH
50628: LD_INT 87
50630: PUSH
50631: LD_INT 88
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: ST_TO_ADDR
50690: GO 50923
50692: LD_INT 3
50694: DOUBLE
50695: EQUAL
50696: IFTRUE 50700
50698: GO 50922
50700: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
50701: LD_ADDR_VAR 0 4
50705: PUSH
50706: LD_INT 46
50708: PUSH
50709: LD_INT 47
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: LD_INT 2
50717: PUSH
50718: LD_INT 82
50720: PUSH
50721: LD_INT 83
50723: PUSH
50724: LD_INT 84
50726: PUSH
50727: LD_INT 85
50729: PUSH
50730: LD_INT 86
50732: PUSH
50733: LD_INT 11
50735: PUSH
50736: LD_INT 9
50738: PUSH
50739: LD_INT 20
50741: PUSH
50742: LD_INT 19
50744: PUSH
50745: LD_INT 21
50747: PUSH
50748: LD_INT 24
50750: PUSH
50751: LD_INT 22
50753: PUSH
50754: LD_INT 25
50756: PUSH
50757: LD_INT 28
50759: PUSH
50760: LD_INT 29
50762: PUSH
50763: LD_INT 30
50765: PUSH
50766: LD_INT 31
50768: PUSH
50769: LD_INT 37
50771: PUSH
50772: LD_INT 38
50774: PUSH
50775: LD_INT 32
50777: PUSH
50778: LD_INT 27
50780: PUSH
50781: LD_INT 33
50783: PUSH
50784: LD_INT 69
50786: PUSH
50787: LD_INT 39
50789: PUSH
50790: LD_INT 34
50792: PUSH
50793: LD_INT 40
50795: PUSH
50796: LD_INT 71
50798: PUSH
50799: LD_INT 23
50801: PUSH
50802: LD_INT 44
50804: PUSH
50805: LD_INT 48
50807: PUSH
50808: LD_INT 49
50810: PUSH
50811: LD_INT 50
50813: PUSH
50814: LD_INT 51
50816: PUSH
50817: LD_INT 52
50819: PUSH
50820: LD_INT 53
50822: PUSH
50823: LD_INT 54
50825: PUSH
50826: LD_INT 55
50828: PUSH
50829: LD_INT 56
50831: PUSH
50832: LD_INT 57
50834: PUSH
50835: LD_INT 58
50837: PUSH
50838: LD_INT 59
50840: PUSH
50841: LD_INT 63
50843: PUSH
50844: LD_INT 64
50846: PUSH
50847: LD_INT 65
50849: PUSH
50850: LD_INT 82
50852: PUSH
50853: LD_INT 83
50855: PUSH
50856: LD_INT 84
50858: PUSH
50859: LD_INT 85
50861: PUSH
50862: LD_INT 86
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: ST_TO_ADDR
50920: GO 50923
50922: POP
// if state > - 1 and state < 3 then
50923: LD_VAR 0 3
50927: PUSH
50928: LD_INT 1
50930: NEG
50931: GREATER
50932: PUSH
50933: LD_VAR 0 3
50937: PUSH
50938: LD_INT 3
50940: LESS
50941: AND
50942: IFFALSE 50999
// for i in result do
50944: LD_ADDR_VAR 0 5
50948: PUSH
50949: LD_VAR 0 4
50953: PUSH
50954: FOR_IN
50955: IFFALSE 50997
// if GetTech ( i , side ) <> state then
50957: LD_VAR 0 5
50961: PPUSH
50962: LD_VAR 0 1
50966: PPUSH
50967: CALL_OW 321
50971: PUSH
50972: LD_VAR 0 3
50976: NONEQUAL
50977: IFFALSE 50995
// result := result diff i ;
50979: LD_ADDR_VAR 0 4
50983: PUSH
50984: LD_VAR 0 4
50988: PUSH
50989: LD_VAR 0 5
50993: DIFF
50994: ST_TO_ADDR
50995: GO 50954
50997: POP
50998: POP
// end ;
50999: LD_VAR 0 4
51003: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
51004: LD_INT 0
51006: PPUSH
51007: PPUSH
51008: PPUSH
// result := true ;
51009: LD_ADDR_VAR 0 3
51013: PUSH
51014: LD_INT 1
51016: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
51017: LD_ADDR_VAR 0 5
51021: PUSH
51022: LD_VAR 0 2
51026: PPUSH
51027: CALL_OW 480
51031: ST_TO_ADDR
// if not tmp then
51032: LD_VAR 0 5
51036: NOT
51037: IFFALSE 51041
// exit ;
51039: GO 51090
// for i in tmp do
51041: LD_ADDR_VAR 0 4
51045: PUSH
51046: LD_VAR 0 5
51050: PUSH
51051: FOR_IN
51052: IFFALSE 51088
// if GetTech ( i , side ) <> state_researched then
51054: LD_VAR 0 4
51058: PPUSH
51059: LD_VAR 0 1
51063: PPUSH
51064: CALL_OW 321
51068: PUSH
51069: LD_INT 2
51071: NONEQUAL
51072: IFFALSE 51086
// begin result := false ;
51074: LD_ADDR_VAR 0 3
51078: PUSH
51079: LD_INT 0
51081: ST_TO_ADDR
// exit ;
51082: POP
51083: POP
51084: GO 51090
// end ;
51086: GO 51051
51088: POP
51089: POP
// end ;
51090: LD_VAR 0 3
51094: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
51095: LD_INT 0
51097: PPUSH
51098: PPUSH
51099: PPUSH
51100: PPUSH
51101: PPUSH
51102: PPUSH
51103: PPUSH
51104: PPUSH
51105: PPUSH
51106: PPUSH
51107: PPUSH
51108: PPUSH
51109: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
51110: LD_VAR 0 1
51114: NOT
51115: PUSH
51116: LD_VAR 0 1
51120: PPUSH
51121: CALL_OW 257
51125: PUSH
51126: LD_INT 9
51128: NONEQUAL
51129: OR
51130: IFFALSE 51134
// exit ;
51132: GO 51707
// side := GetSide ( unit ) ;
51134: LD_ADDR_VAR 0 9
51138: PUSH
51139: LD_VAR 0 1
51143: PPUSH
51144: CALL_OW 255
51148: ST_TO_ADDR
// tech_space := tech_spacanom ;
51149: LD_ADDR_VAR 0 12
51153: PUSH
51154: LD_INT 29
51156: ST_TO_ADDR
// tech_time := tech_taurad ;
51157: LD_ADDR_VAR 0 13
51161: PUSH
51162: LD_INT 28
51164: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
51165: LD_ADDR_VAR 0 11
51169: PUSH
51170: LD_VAR 0 1
51174: PPUSH
51175: CALL_OW 310
51179: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
51180: LD_VAR 0 11
51184: PPUSH
51185: CALL_OW 247
51189: PUSH
51190: LD_INT 2
51192: EQUAL
51193: IFFALSE 51197
// exit ;
51195: GO 51707
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
51197: LD_ADDR_VAR 0 8
51201: PUSH
51202: LD_INT 81
51204: PUSH
51205: LD_VAR 0 9
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 3
51216: PUSH
51217: LD_INT 21
51219: PUSH
51220: LD_INT 3
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PPUSH
51235: CALL_OW 69
51239: ST_TO_ADDR
// if not tmp then
51240: LD_VAR 0 8
51244: NOT
51245: IFFALSE 51249
// exit ;
51247: GO 51707
// if in_unit then
51249: LD_VAR 0 11
51253: IFFALSE 51277
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
51255: LD_ADDR_VAR 0 10
51259: PUSH
51260: LD_VAR 0 8
51264: PPUSH
51265: LD_VAR 0 11
51269: PPUSH
51270: CALL_OW 74
51274: ST_TO_ADDR
51275: GO 51297
// enemy := NearestUnitToUnit ( tmp , unit ) ;
51277: LD_ADDR_VAR 0 10
51281: PUSH
51282: LD_VAR 0 8
51286: PPUSH
51287: LD_VAR 0 1
51291: PPUSH
51292: CALL_OW 74
51296: ST_TO_ADDR
// if not enemy then
51297: LD_VAR 0 10
51301: NOT
51302: IFFALSE 51306
// exit ;
51304: GO 51707
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
51306: LD_VAR 0 11
51310: PUSH
51311: LD_VAR 0 11
51315: PPUSH
51316: LD_VAR 0 10
51320: PPUSH
51321: CALL_OW 296
51325: PUSH
51326: LD_INT 13
51328: GREATER
51329: AND
51330: PUSH
51331: LD_VAR 0 1
51335: PPUSH
51336: LD_VAR 0 10
51340: PPUSH
51341: CALL_OW 296
51345: PUSH
51346: LD_INT 12
51348: GREATER
51349: OR
51350: IFFALSE 51354
// exit ;
51352: GO 51707
// missile := [ 1 ] ;
51354: LD_ADDR_VAR 0 14
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: EMPTY
51363: LIST
51364: ST_TO_ADDR
// if Researched ( side , tech_space ) then
51365: LD_VAR 0 9
51369: PPUSH
51370: LD_VAR 0 12
51374: PPUSH
51375: CALL_OW 325
51379: IFFALSE 51408
// missile := Replace ( missile , missile + 1 , 2 ) ;
51381: LD_ADDR_VAR 0 14
51385: PUSH
51386: LD_VAR 0 14
51390: PPUSH
51391: LD_VAR 0 14
51395: PUSH
51396: LD_INT 1
51398: PLUS
51399: PPUSH
51400: LD_INT 2
51402: PPUSH
51403: CALL_OW 1
51407: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
51408: LD_VAR 0 9
51412: PPUSH
51413: LD_VAR 0 13
51417: PPUSH
51418: CALL_OW 325
51422: PUSH
51423: LD_VAR 0 10
51427: PPUSH
51428: CALL_OW 255
51432: PPUSH
51433: LD_VAR 0 13
51437: PPUSH
51438: CALL_OW 325
51442: NOT
51443: AND
51444: IFFALSE 51473
// missile := Replace ( missile , missile + 1 , 3 ) ;
51446: LD_ADDR_VAR 0 14
51450: PUSH
51451: LD_VAR 0 14
51455: PPUSH
51456: LD_VAR 0 14
51460: PUSH
51461: LD_INT 1
51463: PLUS
51464: PPUSH
51465: LD_INT 3
51467: PPUSH
51468: CALL_OW 1
51472: ST_TO_ADDR
// if missile < 2 then
51473: LD_VAR 0 14
51477: PUSH
51478: LD_INT 2
51480: LESS
51481: IFFALSE 51485
// exit ;
51483: GO 51707
// x := GetX ( enemy ) ;
51485: LD_ADDR_VAR 0 4
51489: PUSH
51490: LD_VAR 0 10
51494: PPUSH
51495: CALL_OW 250
51499: ST_TO_ADDR
// y := GetY ( enemy ) ;
51500: LD_ADDR_VAR 0 5
51504: PUSH
51505: LD_VAR 0 10
51509: PPUSH
51510: CALL_OW 251
51514: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
51515: LD_ADDR_VAR 0 6
51519: PUSH
51520: LD_VAR 0 4
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PPUSH
51529: LD_INT 1
51531: PPUSH
51532: CALL_OW 12
51536: PLUS
51537: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
51538: LD_ADDR_VAR 0 7
51542: PUSH
51543: LD_VAR 0 5
51547: PUSH
51548: LD_INT 1
51550: NEG
51551: PPUSH
51552: LD_INT 1
51554: PPUSH
51555: CALL_OW 12
51559: PLUS
51560: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51561: LD_VAR 0 6
51565: PPUSH
51566: LD_VAR 0 7
51570: PPUSH
51571: CALL_OW 488
51575: NOT
51576: IFFALSE 51598
// begin _x := x ;
51578: LD_ADDR_VAR 0 6
51582: PUSH
51583: LD_VAR 0 4
51587: ST_TO_ADDR
// _y := y ;
51588: LD_ADDR_VAR 0 7
51592: PUSH
51593: LD_VAR 0 5
51597: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
51598: LD_ADDR_VAR 0 3
51602: PUSH
51603: LD_INT 1
51605: PPUSH
51606: LD_VAR 0 14
51610: PPUSH
51611: CALL_OW 12
51615: ST_TO_ADDR
// case i of 1 :
51616: LD_VAR 0 3
51620: PUSH
51621: LD_INT 1
51623: DOUBLE
51624: EQUAL
51625: IFTRUE 51629
51627: GO 51646
51629: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
51630: LD_VAR 0 1
51634: PPUSH
51635: LD_VAR 0 10
51639: PPUSH
51640: CALL_OW 115
51644: GO 51707
51646: LD_INT 2
51648: DOUBLE
51649: EQUAL
51650: IFTRUE 51654
51652: GO 51676
51654: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
51655: LD_VAR 0 1
51659: PPUSH
51660: LD_VAR 0 6
51664: PPUSH
51665: LD_VAR 0 7
51669: PPUSH
51670: CALL_OW 153
51674: GO 51707
51676: LD_INT 3
51678: DOUBLE
51679: EQUAL
51680: IFTRUE 51684
51682: GO 51706
51684: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
51685: LD_VAR 0 1
51689: PPUSH
51690: LD_VAR 0 6
51694: PPUSH
51695: LD_VAR 0 7
51699: PPUSH
51700: CALL_OW 154
51704: GO 51707
51706: POP
// end ;
51707: LD_VAR 0 2
51711: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
51712: LD_INT 0
51714: PPUSH
51715: PPUSH
51716: PPUSH
51717: PPUSH
51718: PPUSH
51719: PPUSH
// if not unit or not building then
51720: LD_VAR 0 1
51724: NOT
51725: PUSH
51726: LD_VAR 0 2
51730: NOT
51731: OR
51732: IFFALSE 51736
// exit ;
51734: GO 51894
// x := GetX ( building ) ;
51736: LD_ADDR_VAR 0 5
51740: PUSH
51741: LD_VAR 0 2
51745: PPUSH
51746: CALL_OW 250
51750: ST_TO_ADDR
// y := GetY ( building ) ;
51751: LD_ADDR_VAR 0 6
51755: PUSH
51756: LD_VAR 0 2
51760: PPUSH
51761: CALL_OW 251
51765: ST_TO_ADDR
// for i = 0 to 5 do
51766: LD_ADDR_VAR 0 4
51770: PUSH
51771: DOUBLE
51772: LD_INT 0
51774: DEC
51775: ST_TO_ADDR
51776: LD_INT 5
51778: PUSH
51779: FOR_TO
51780: IFFALSE 51892
// begin _x := ShiftX ( x , i , 3 ) ;
51782: LD_ADDR_VAR 0 7
51786: PUSH
51787: LD_VAR 0 5
51791: PPUSH
51792: LD_VAR 0 4
51796: PPUSH
51797: LD_INT 3
51799: PPUSH
51800: CALL_OW 272
51804: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
51805: LD_ADDR_VAR 0 8
51809: PUSH
51810: LD_VAR 0 6
51814: PPUSH
51815: LD_VAR 0 4
51819: PPUSH
51820: LD_INT 3
51822: PPUSH
51823: CALL_OW 273
51827: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51828: LD_VAR 0 7
51832: PPUSH
51833: LD_VAR 0 8
51837: PPUSH
51838: CALL_OW 488
51842: NOT
51843: IFFALSE 51847
// continue ;
51845: GO 51779
// if HexInfo ( _x , _y ) = 0 then
51847: LD_VAR 0 7
51851: PPUSH
51852: LD_VAR 0 8
51856: PPUSH
51857: CALL_OW 428
51861: PUSH
51862: LD_INT 0
51864: EQUAL
51865: IFFALSE 51890
// begin ComMoveXY ( unit , _x , _y ) ;
51867: LD_VAR 0 1
51871: PPUSH
51872: LD_VAR 0 7
51876: PPUSH
51877: LD_VAR 0 8
51881: PPUSH
51882: CALL_OW 111
// exit ;
51886: POP
51887: POP
51888: GO 51894
// end ; end ;
51890: GO 51779
51892: POP
51893: POP
// end ;
51894: LD_VAR 0 3
51898: RET
// export function ScanBase ( side , base_area ) ; begin
51899: LD_INT 0
51901: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
51902: LD_ADDR_VAR 0 3
51906: PUSH
51907: LD_VAR 0 2
51911: PPUSH
51912: LD_INT 81
51914: PUSH
51915: LD_VAR 0 1
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PPUSH
51924: CALL_OW 70
51928: ST_TO_ADDR
// end ;
51929: LD_VAR 0 3
51933: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
51934: LD_INT 0
51936: PPUSH
51937: PPUSH
51938: PPUSH
51939: PPUSH
// result := false ;
51940: LD_ADDR_VAR 0 2
51944: PUSH
51945: LD_INT 0
51947: ST_TO_ADDR
// side := GetSide ( unit ) ;
51948: LD_ADDR_VAR 0 3
51952: PUSH
51953: LD_VAR 0 1
51957: PPUSH
51958: CALL_OW 255
51962: ST_TO_ADDR
// nat := GetNation ( unit ) ;
51963: LD_ADDR_VAR 0 4
51967: PUSH
51968: LD_VAR 0 1
51972: PPUSH
51973: CALL_OW 248
51977: ST_TO_ADDR
// case nat of 1 :
51978: LD_VAR 0 4
51982: PUSH
51983: LD_INT 1
51985: DOUBLE
51986: EQUAL
51987: IFTRUE 51991
51989: GO 52002
51991: POP
// tech := tech_lassight ; 2 :
51992: LD_ADDR_VAR 0 5
51996: PUSH
51997: LD_INT 12
51999: ST_TO_ADDR
52000: GO 52041
52002: LD_INT 2
52004: DOUBLE
52005: EQUAL
52006: IFTRUE 52010
52008: GO 52021
52010: POP
// tech := tech_mortar ; 3 :
52011: LD_ADDR_VAR 0 5
52015: PUSH
52016: LD_INT 41
52018: ST_TO_ADDR
52019: GO 52041
52021: LD_INT 3
52023: DOUBLE
52024: EQUAL
52025: IFTRUE 52029
52027: GO 52040
52029: POP
// tech := tech_bazooka ; end ;
52030: LD_ADDR_VAR 0 5
52034: PUSH
52035: LD_INT 44
52037: ST_TO_ADDR
52038: GO 52041
52040: POP
// if Researched ( side , tech ) then
52041: LD_VAR 0 3
52045: PPUSH
52046: LD_VAR 0 5
52050: PPUSH
52051: CALL_OW 325
52055: IFFALSE 52082
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
52057: LD_ADDR_VAR 0 2
52061: PUSH
52062: LD_INT 5
52064: PUSH
52065: LD_INT 8
52067: PUSH
52068: LD_INT 9
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: LIST
52075: PUSH
52076: LD_VAR 0 4
52080: ARRAY
52081: ST_TO_ADDR
// end ;
52082: LD_VAR 0 2
52086: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
52087: LD_INT 0
52089: PPUSH
52090: PPUSH
52091: PPUSH
// if not mines then
52092: LD_VAR 0 2
52096: NOT
52097: IFFALSE 52101
// exit ;
52099: GO 52245
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
52101: LD_ADDR_VAR 0 5
52105: PUSH
52106: LD_INT 81
52108: PUSH
52109: LD_VAR 0 1
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 3
52120: PUSH
52121: LD_INT 21
52123: PUSH
52124: LD_INT 3
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PPUSH
52139: CALL_OW 69
52143: ST_TO_ADDR
// for i in mines do
52144: LD_ADDR_VAR 0 4
52148: PUSH
52149: LD_VAR 0 2
52153: PUSH
52154: FOR_IN
52155: IFFALSE 52243
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
52157: LD_VAR 0 4
52161: PUSH
52162: LD_INT 1
52164: ARRAY
52165: PPUSH
52166: LD_VAR 0 4
52170: PUSH
52171: LD_INT 2
52173: ARRAY
52174: PPUSH
52175: CALL_OW 458
52179: NOT
52180: IFFALSE 52184
// continue ;
52182: GO 52154
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
52184: LD_VAR 0 4
52188: PUSH
52189: LD_INT 1
52191: ARRAY
52192: PPUSH
52193: LD_VAR 0 4
52197: PUSH
52198: LD_INT 2
52200: ARRAY
52201: PPUSH
52202: CALL_OW 428
52206: PUSH
52207: LD_VAR 0 5
52211: IN
52212: IFFALSE 52241
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
52214: LD_VAR 0 4
52218: PUSH
52219: LD_INT 1
52221: ARRAY
52222: PPUSH
52223: LD_VAR 0 4
52227: PUSH
52228: LD_INT 2
52230: ARRAY
52231: PPUSH
52232: LD_VAR 0 1
52236: PPUSH
52237: CALL_OW 456
// end ;
52241: GO 52154
52243: POP
52244: POP
// end ;
52245: LD_VAR 0 3
52249: RET
// export function Count ( array ) ; var i ; begin
52250: LD_INT 0
52252: PPUSH
52253: PPUSH
// result := 0 ;
52254: LD_ADDR_VAR 0 2
52258: PUSH
52259: LD_INT 0
52261: ST_TO_ADDR
// for i in array do
52262: LD_ADDR_VAR 0 3
52266: PUSH
52267: LD_VAR 0 1
52271: PUSH
52272: FOR_IN
52273: IFFALSE 52297
// if i then
52275: LD_VAR 0 3
52279: IFFALSE 52295
// result := result + 1 ;
52281: LD_ADDR_VAR 0 2
52285: PUSH
52286: LD_VAR 0 2
52290: PUSH
52291: LD_INT 1
52293: PLUS
52294: ST_TO_ADDR
52295: GO 52272
52297: POP
52298: POP
// end ;
52299: LD_VAR 0 2
52303: RET
// export function IsEmpty ( building ) ; begin
52304: LD_INT 0
52306: PPUSH
// if not building then
52307: LD_VAR 0 1
52311: NOT
52312: IFFALSE 52316
// exit ;
52314: GO 52359
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
52316: LD_ADDR_VAR 0 2
52320: PUSH
52321: LD_VAR 0 1
52325: PUSH
52326: LD_INT 22
52328: PUSH
52329: LD_VAR 0 1
52333: PPUSH
52334: CALL_OW 255
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 58
52345: PUSH
52346: EMPTY
52347: LIST
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PPUSH
52353: CALL_OW 69
52357: IN
52358: ST_TO_ADDR
// end ;
52359: LD_VAR 0 2
52363: RET
// export function IsNotFull ( building ) ; var places ; begin
52364: LD_INT 0
52366: PPUSH
52367: PPUSH
// if not building then
52368: LD_VAR 0 1
52372: NOT
52373: IFFALSE 52377
// exit ;
52375: GO 52548
// result := false ;
52377: LD_ADDR_VAR 0 2
52381: PUSH
52382: LD_INT 0
52384: ST_TO_ADDR
// places := 0 ;
52385: LD_ADDR_VAR 0 3
52389: PUSH
52390: LD_INT 0
52392: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
52393: LD_VAR 0 1
52397: PPUSH
52398: CALL_OW 266
52402: PUSH
52403: LD_INT 0
52405: DOUBLE
52406: EQUAL
52407: IFTRUE 52465
52409: LD_INT 1
52411: DOUBLE
52412: EQUAL
52413: IFTRUE 52465
52415: LD_INT 6
52417: DOUBLE
52418: EQUAL
52419: IFTRUE 52465
52421: LD_INT 7
52423: DOUBLE
52424: EQUAL
52425: IFTRUE 52465
52427: LD_INT 8
52429: DOUBLE
52430: EQUAL
52431: IFTRUE 52465
52433: LD_INT 4
52435: DOUBLE
52436: EQUAL
52437: IFTRUE 52465
52439: LD_INT 5
52441: DOUBLE
52442: EQUAL
52443: IFTRUE 52465
52445: LD_INT 2
52447: DOUBLE
52448: EQUAL
52449: IFTRUE 52465
52451: LD_INT 3
52453: DOUBLE
52454: EQUAL
52455: IFTRUE 52465
52457: LD_INT 35
52459: DOUBLE
52460: EQUAL
52461: IFTRUE 52465
52463: GO 52476
52465: POP
// places := 6 ; b_bunker , b_breastwork :
52466: LD_ADDR_VAR 0 3
52470: PUSH
52471: LD_INT 6
52473: ST_TO_ADDR
52474: GO 52521
52476: LD_INT 32
52478: DOUBLE
52479: EQUAL
52480: IFTRUE 52490
52482: LD_INT 31
52484: DOUBLE
52485: EQUAL
52486: IFTRUE 52490
52488: GO 52501
52490: POP
// places := 1 ; b_control_tower :
52491: LD_ADDR_VAR 0 3
52495: PUSH
52496: LD_INT 1
52498: ST_TO_ADDR
52499: GO 52521
52501: LD_INT 36
52503: DOUBLE
52504: EQUAL
52505: IFTRUE 52509
52507: GO 52520
52509: POP
// places := 3 ; end ;
52510: LD_ADDR_VAR 0 3
52514: PUSH
52515: LD_INT 3
52517: ST_TO_ADDR
52518: GO 52521
52520: POP
// if places then
52521: LD_VAR 0 3
52525: IFFALSE 52548
// result := UnitsInside ( building ) < places ;
52527: LD_ADDR_VAR 0 2
52531: PUSH
52532: LD_VAR 0 1
52536: PPUSH
52537: CALL_OW 313
52541: PUSH
52542: LD_VAR 0 3
52546: LESS
52547: ST_TO_ADDR
// end ;
52548: LD_VAR 0 2
52552: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
52553: LD_INT 0
52555: PPUSH
52556: PPUSH
52557: PPUSH
52558: PPUSH
// tmp := [ ] ;
52559: LD_ADDR_VAR 0 3
52563: PUSH
52564: EMPTY
52565: ST_TO_ADDR
// list := [ ] ;
52566: LD_ADDR_VAR 0 5
52570: PUSH
52571: EMPTY
52572: ST_TO_ADDR
// for i = 16 to 25 do
52573: LD_ADDR_VAR 0 4
52577: PUSH
52578: DOUBLE
52579: LD_INT 16
52581: DEC
52582: ST_TO_ADDR
52583: LD_INT 25
52585: PUSH
52586: FOR_TO
52587: IFFALSE 52660
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
52589: LD_ADDR_VAR 0 3
52593: PUSH
52594: LD_VAR 0 3
52598: PUSH
52599: LD_INT 22
52601: PUSH
52602: LD_VAR 0 1
52606: PPUSH
52607: CALL_OW 255
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 91
52618: PUSH
52619: LD_VAR 0 1
52623: PUSH
52624: LD_INT 6
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 30
52634: PUSH
52635: LD_VAR 0 4
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: LIST
52648: PUSH
52649: EMPTY
52650: LIST
52651: PPUSH
52652: CALL_OW 69
52656: ADD
52657: ST_TO_ADDR
52658: GO 52586
52660: POP
52661: POP
// for i = 1 to tmp do
52662: LD_ADDR_VAR 0 4
52666: PUSH
52667: DOUBLE
52668: LD_INT 1
52670: DEC
52671: ST_TO_ADDR
52672: LD_VAR 0 3
52676: PUSH
52677: FOR_TO
52678: IFFALSE 52766
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
52680: LD_ADDR_VAR 0 5
52684: PUSH
52685: LD_VAR 0 5
52689: PUSH
52690: LD_VAR 0 3
52694: PUSH
52695: LD_VAR 0 4
52699: ARRAY
52700: PPUSH
52701: CALL_OW 266
52705: PUSH
52706: LD_VAR 0 3
52710: PUSH
52711: LD_VAR 0 4
52715: ARRAY
52716: PPUSH
52717: CALL_OW 250
52721: PUSH
52722: LD_VAR 0 3
52726: PUSH
52727: LD_VAR 0 4
52731: ARRAY
52732: PPUSH
52733: CALL_OW 251
52737: PUSH
52738: LD_VAR 0 3
52742: PUSH
52743: LD_VAR 0 4
52747: ARRAY
52748: PPUSH
52749: CALL_OW 254
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: PUSH
52760: EMPTY
52761: LIST
52762: ADD
52763: ST_TO_ADDR
52764: GO 52677
52766: POP
52767: POP
// result := list ;
52768: LD_ADDR_VAR 0 2
52772: PUSH
52773: LD_VAR 0 5
52777: ST_TO_ADDR
// end ;
52778: LD_VAR 0 2
52782: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
52783: LD_INT 0
52785: PPUSH
52786: PPUSH
52787: PPUSH
52788: PPUSH
52789: PPUSH
52790: PPUSH
52791: PPUSH
// if not factory then
52792: LD_VAR 0 1
52796: NOT
52797: IFFALSE 52801
// exit ;
52799: GO 53394
// if control = control_apeman then
52801: LD_VAR 0 4
52805: PUSH
52806: LD_INT 5
52808: EQUAL
52809: IFFALSE 52918
// begin tmp := UnitsInside ( factory ) ;
52811: LD_ADDR_VAR 0 8
52815: PUSH
52816: LD_VAR 0 1
52820: PPUSH
52821: CALL_OW 313
52825: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
52826: LD_VAR 0 8
52830: PPUSH
52831: LD_INT 25
52833: PUSH
52834: LD_INT 12
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PPUSH
52841: CALL_OW 72
52845: NOT
52846: IFFALSE 52856
// control := control_manual ;
52848: LD_ADDR_VAR 0 4
52852: PUSH
52853: LD_INT 1
52855: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
52856: LD_ADDR_VAR 0 8
52860: PUSH
52861: LD_VAR 0 1
52865: PPUSH
52866: CALL 52553 0 1
52870: ST_TO_ADDR
// if tmp then
52871: LD_VAR 0 8
52875: IFFALSE 52918
// begin for i in tmp do
52877: LD_ADDR_VAR 0 7
52881: PUSH
52882: LD_VAR 0 8
52886: PUSH
52887: FOR_IN
52888: IFFALSE 52916
// if i [ 1 ] = b_ext_radio then
52890: LD_VAR 0 7
52894: PUSH
52895: LD_INT 1
52897: ARRAY
52898: PUSH
52899: LD_INT 22
52901: EQUAL
52902: IFFALSE 52914
// begin control := control_remote ;
52904: LD_ADDR_VAR 0 4
52908: PUSH
52909: LD_INT 2
52911: ST_TO_ADDR
// break ;
52912: GO 52916
// end ;
52914: GO 52887
52916: POP
52917: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
52918: LD_VAR 0 1
52922: PPUSH
52923: LD_VAR 0 2
52927: PPUSH
52928: LD_VAR 0 3
52932: PPUSH
52933: LD_VAR 0 4
52937: PPUSH
52938: LD_VAR 0 5
52942: PPUSH
52943: CALL_OW 448
52947: IFFALSE 52982
// begin result := [ chassis , engine , control , weapon ] ;
52949: LD_ADDR_VAR 0 6
52953: PUSH
52954: LD_VAR 0 2
52958: PUSH
52959: LD_VAR 0 3
52963: PUSH
52964: LD_VAR 0 4
52968: PUSH
52969: LD_VAR 0 5
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: ST_TO_ADDR
// exit ;
52980: GO 53394
// end ; _chassis := AvailableChassisList ( factory ) ;
52982: LD_ADDR_VAR 0 9
52986: PUSH
52987: LD_VAR 0 1
52991: PPUSH
52992: CALL_OW 475
52996: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
52997: LD_ADDR_VAR 0 11
53001: PUSH
53002: LD_VAR 0 1
53006: PPUSH
53007: CALL_OW 476
53011: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
53012: LD_ADDR_VAR 0 12
53016: PUSH
53017: LD_VAR 0 1
53021: PPUSH
53022: CALL_OW 477
53026: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
53027: LD_ADDR_VAR 0 10
53031: PUSH
53032: LD_VAR 0 1
53036: PPUSH
53037: CALL_OW 478
53041: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
53042: LD_VAR 0 9
53046: NOT
53047: PUSH
53048: LD_VAR 0 11
53052: NOT
53053: OR
53054: PUSH
53055: LD_VAR 0 12
53059: NOT
53060: OR
53061: PUSH
53062: LD_VAR 0 10
53066: NOT
53067: OR
53068: IFFALSE 53103
// begin result := [ chassis , engine , control , weapon ] ;
53070: LD_ADDR_VAR 0 6
53074: PUSH
53075: LD_VAR 0 2
53079: PUSH
53080: LD_VAR 0 3
53084: PUSH
53085: LD_VAR 0 4
53089: PUSH
53090: LD_VAR 0 5
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: ST_TO_ADDR
// exit ;
53101: GO 53394
// end ; if not chassis in _chassis then
53103: LD_VAR 0 2
53107: PUSH
53108: LD_VAR 0 9
53112: IN
53113: NOT
53114: IFFALSE 53140
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
53116: LD_ADDR_VAR 0 2
53120: PUSH
53121: LD_VAR 0 9
53125: PUSH
53126: LD_INT 1
53128: PPUSH
53129: LD_VAR 0 9
53133: PPUSH
53134: CALL_OW 12
53138: ARRAY
53139: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
53140: LD_VAR 0 2
53144: PPUSH
53145: LD_VAR 0 3
53149: PPUSH
53150: CALL 53399 0 2
53154: NOT
53155: IFFALSE 53214
// repeat engine := _engine [ 1 ] ;
53157: LD_ADDR_VAR 0 3
53161: PUSH
53162: LD_VAR 0 11
53166: PUSH
53167: LD_INT 1
53169: ARRAY
53170: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
53171: LD_ADDR_VAR 0 11
53175: PUSH
53176: LD_VAR 0 11
53180: PPUSH
53181: LD_INT 1
53183: PPUSH
53184: CALL_OW 3
53188: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
53189: LD_VAR 0 2
53193: PPUSH
53194: LD_VAR 0 3
53198: PPUSH
53199: CALL 53399 0 2
53203: PUSH
53204: LD_VAR 0 11
53208: PUSH
53209: EMPTY
53210: EQUAL
53211: OR
53212: IFFALSE 53157
// if not control in _control then
53214: LD_VAR 0 4
53218: PUSH
53219: LD_VAR 0 12
53223: IN
53224: NOT
53225: IFFALSE 53251
// control := _control [ rand ( 1 , _control ) ] ;
53227: LD_ADDR_VAR 0 4
53231: PUSH
53232: LD_VAR 0 12
53236: PUSH
53237: LD_INT 1
53239: PPUSH
53240: LD_VAR 0 12
53244: PPUSH
53245: CALL_OW 12
53249: ARRAY
53250: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
53251: LD_VAR 0 2
53255: PPUSH
53256: LD_VAR 0 5
53260: PPUSH
53261: CALL 53619 0 2
53265: NOT
53266: IFFALSE 53325
// repeat weapon := _weapon [ 1 ] ;
53268: LD_ADDR_VAR 0 5
53272: PUSH
53273: LD_VAR 0 10
53277: PUSH
53278: LD_INT 1
53280: ARRAY
53281: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
53282: LD_ADDR_VAR 0 10
53286: PUSH
53287: LD_VAR 0 10
53291: PPUSH
53292: LD_INT 1
53294: PPUSH
53295: CALL_OW 3
53299: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
53300: LD_VAR 0 2
53304: PPUSH
53305: LD_VAR 0 5
53309: PPUSH
53310: CALL 53619 0 2
53314: PUSH
53315: LD_VAR 0 10
53319: PUSH
53320: EMPTY
53321: EQUAL
53322: OR
53323: IFFALSE 53268
// result := [ ] ;
53325: LD_ADDR_VAR 0 6
53329: PUSH
53330: EMPTY
53331: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
53332: LD_VAR 0 1
53336: PPUSH
53337: LD_VAR 0 2
53341: PPUSH
53342: LD_VAR 0 3
53346: PPUSH
53347: LD_VAR 0 4
53351: PPUSH
53352: LD_VAR 0 5
53356: PPUSH
53357: CALL_OW 448
53361: IFFALSE 53394
// result := [ chassis , engine , control , weapon ] ;
53363: LD_ADDR_VAR 0 6
53367: PUSH
53368: LD_VAR 0 2
53372: PUSH
53373: LD_VAR 0 3
53377: PUSH
53378: LD_VAR 0 4
53382: PUSH
53383: LD_VAR 0 5
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: ST_TO_ADDR
// end ;
53394: LD_VAR 0 6
53398: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
53399: LD_INT 0
53401: PPUSH
// if not chassis or not engine then
53402: LD_VAR 0 1
53406: NOT
53407: PUSH
53408: LD_VAR 0 2
53412: NOT
53413: OR
53414: IFFALSE 53418
// exit ;
53416: GO 53614
// case engine of engine_solar :
53418: LD_VAR 0 2
53422: PUSH
53423: LD_INT 2
53425: DOUBLE
53426: EQUAL
53427: IFTRUE 53431
53429: GO 53469
53431: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
53432: LD_ADDR_VAR 0 3
53436: PUSH
53437: LD_INT 11
53439: PUSH
53440: LD_INT 12
53442: PUSH
53443: LD_INT 13
53445: PUSH
53446: LD_INT 14
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: LD_INT 2
53454: PUSH
53455: LD_INT 3
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: ST_TO_ADDR
53467: GO 53598
53469: LD_INT 1
53471: DOUBLE
53472: EQUAL
53473: IFTRUE 53477
53475: GO 53539
53477: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
53478: LD_ADDR_VAR 0 3
53482: PUSH
53483: LD_INT 11
53485: PUSH
53486: LD_INT 12
53488: PUSH
53489: LD_INT 13
53491: PUSH
53492: LD_INT 14
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: LD_INT 2
53500: PUSH
53501: LD_INT 3
53503: PUSH
53504: LD_INT 4
53506: PUSH
53507: LD_INT 5
53509: PUSH
53510: LD_INT 21
53512: PUSH
53513: LD_INT 23
53515: PUSH
53516: LD_INT 22
53518: PUSH
53519: LD_INT 24
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: ST_TO_ADDR
53537: GO 53598
53539: LD_INT 3
53541: DOUBLE
53542: EQUAL
53543: IFTRUE 53547
53545: GO 53597
53547: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
53548: LD_ADDR_VAR 0 3
53552: PUSH
53553: LD_INT 13
53555: PUSH
53556: LD_INT 14
53558: PUSH
53559: LD_INT 2
53561: PUSH
53562: LD_INT 3
53564: PUSH
53565: LD_INT 4
53567: PUSH
53568: LD_INT 5
53570: PUSH
53571: LD_INT 21
53573: PUSH
53574: LD_INT 22
53576: PUSH
53577: LD_INT 23
53579: PUSH
53580: LD_INT 24
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: ST_TO_ADDR
53595: GO 53598
53597: POP
// result := ( chassis in result ) ;
53598: LD_ADDR_VAR 0 3
53602: PUSH
53603: LD_VAR 0 1
53607: PUSH
53608: LD_VAR 0 3
53612: IN
53613: ST_TO_ADDR
// end ;
53614: LD_VAR 0 3
53618: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
53619: LD_INT 0
53621: PPUSH
// if not chassis or not weapon then
53622: LD_VAR 0 1
53626: NOT
53627: PUSH
53628: LD_VAR 0 2
53632: NOT
53633: OR
53634: IFFALSE 53638
// exit ;
53636: GO 54698
// case weapon of us_machine_gun :
53638: LD_VAR 0 2
53642: PUSH
53643: LD_INT 2
53645: DOUBLE
53646: EQUAL
53647: IFTRUE 53651
53649: GO 53681
53651: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
53652: LD_ADDR_VAR 0 3
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: LD_INT 2
53662: PUSH
53663: LD_INT 3
53665: PUSH
53666: LD_INT 4
53668: PUSH
53669: LD_INT 5
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: ST_TO_ADDR
53679: GO 54682
53681: LD_INT 3
53683: DOUBLE
53684: EQUAL
53685: IFTRUE 53689
53687: GO 53719
53689: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
53690: LD_ADDR_VAR 0 3
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: LD_INT 2
53700: PUSH
53701: LD_INT 3
53703: PUSH
53704: LD_INT 4
53706: PUSH
53707: LD_INT 5
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: ST_TO_ADDR
53717: GO 54682
53719: LD_INT 11
53721: DOUBLE
53722: EQUAL
53723: IFTRUE 53727
53725: GO 53757
53727: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
53728: LD_ADDR_VAR 0 3
53732: PUSH
53733: LD_INT 1
53735: PUSH
53736: LD_INT 2
53738: PUSH
53739: LD_INT 3
53741: PUSH
53742: LD_INT 4
53744: PUSH
53745: LD_INT 5
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: ST_TO_ADDR
53755: GO 54682
53757: LD_INT 4
53759: DOUBLE
53760: EQUAL
53761: IFTRUE 53765
53763: GO 53791
53765: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
53766: LD_ADDR_VAR 0 3
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: LD_INT 3
53776: PUSH
53777: LD_INT 4
53779: PUSH
53780: LD_INT 5
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: ST_TO_ADDR
53789: GO 54682
53791: LD_INT 5
53793: DOUBLE
53794: EQUAL
53795: IFTRUE 53799
53797: GO 53825
53799: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
53800: LD_ADDR_VAR 0 3
53804: PUSH
53805: LD_INT 2
53807: PUSH
53808: LD_INT 3
53810: PUSH
53811: LD_INT 4
53813: PUSH
53814: LD_INT 5
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: ST_TO_ADDR
53823: GO 54682
53825: LD_INT 9
53827: DOUBLE
53828: EQUAL
53829: IFTRUE 53833
53831: GO 53859
53833: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
53834: LD_ADDR_VAR 0 3
53838: PUSH
53839: LD_INT 2
53841: PUSH
53842: LD_INT 3
53844: PUSH
53845: LD_INT 4
53847: PUSH
53848: LD_INT 5
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: ST_TO_ADDR
53857: GO 54682
53859: LD_INT 7
53861: DOUBLE
53862: EQUAL
53863: IFTRUE 53867
53865: GO 53893
53867: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
53868: LD_ADDR_VAR 0 3
53872: PUSH
53873: LD_INT 2
53875: PUSH
53876: LD_INT 3
53878: PUSH
53879: LD_INT 4
53881: PUSH
53882: LD_INT 5
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: ST_TO_ADDR
53891: GO 54682
53893: LD_INT 12
53895: DOUBLE
53896: EQUAL
53897: IFTRUE 53901
53899: GO 53927
53901: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
53902: LD_ADDR_VAR 0 3
53906: PUSH
53907: LD_INT 2
53909: PUSH
53910: LD_INT 3
53912: PUSH
53913: LD_INT 4
53915: PUSH
53916: LD_INT 5
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: ST_TO_ADDR
53925: GO 54682
53927: LD_INT 13
53929: DOUBLE
53930: EQUAL
53931: IFTRUE 53935
53933: GO 53961
53935: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
53936: LD_ADDR_VAR 0 3
53940: PUSH
53941: LD_INT 2
53943: PUSH
53944: LD_INT 3
53946: PUSH
53947: LD_INT 4
53949: PUSH
53950: LD_INT 5
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: ST_TO_ADDR
53959: GO 54682
53961: LD_INT 14
53963: DOUBLE
53964: EQUAL
53965: IFTRUE 53969
53967: GO 53987
53969: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
53970: LD_ADDR_VAR 0 3
53974: PUSH
53975: LD_INT 4
53977: PUSH
53978: LD_INT 5
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: ST_TO_ADDR
53985: GO 54682
53987: LD_INT 6
53989: DOUBLE
53990: EQUAL
53991: IFTRUE 53995
53993: GO 54013
53995: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
53996: LD_ADDR_VAR 0 3
54000: PUSH
54001: LD_INT 4
54003: PUSH
54004: LD_INT 5
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: ST_TO_ADDR
54011: GO 54682
54013: LD_INT 10
54015: DOUBLE
54016: EQUAL
54017: IFTRUE 54021
54019: GO 54039
54021: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
54022: LD_ADDR_VAR 0 3
54026: PUSH
54027: LD_INT 4
54029: PUSH
54030: LD_INT 5
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: ST_TO_ADDR
54037: GO 54682
54039: LD_INT 22
54041: DOUBLE
54042: EQUAL
54043: IFTRUE 54047
54045: GO 54073
54047: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
54048: LD_ADDR_VAR 0 3
54052: PUSH
54053: LD_INT 11
54055: PUSH
54056: LD_INT 12
54058: PUSH
54059: LD_INT 13
54061: PUSH
54062: LD_INT 14
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: ST_TO_ADDR
54071: GO 54682
54073: LD_INT 23
54075: DOUBLE
54076: EQUAL
54077: IFTRUE 54081
54079: GO 54107
54081: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
54082: LD_ADDR_VAR 0 3
54086: PUSH
54087: LD_INT 11
54089: PUSH
54090: LD_INT 12
54092: PUSH
54093: LD_INT 13
54095: PUSH
54096: LD_INT 14
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: ST_TO_ADDR
54105: GO 54682
54107: LD_INT 24
54109: DOUBLE
54110: EQUAL
54111: IFTRUE 54115
54113: GO 54141
54115: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
54116: LD_ADDR_VAR 0 3
54120: PUSH
54121: LD_INT 11
54123: PUSH
54124: LD_INT 12
54126: PUSH
54127: LD_INT 13
54129: PUSH
54130: LD_INT 14
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: ST_TO_ADDR
54139: GO 54682
54141: LD_INT 30
54143: DOUBLE
54144: EQUAL
54145: IFTRUE 54149
54147: GO 54175
54149: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
54150: LD_ADDR_VAR 0 3
54154: PUSH
54155: LD_INT 11
54157: PUSH
54158: LD_INT 12
54160: PUSH
54161: LD_INT 13
54163: PUSH
54164: LD_INT 14
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: ST_TO_ADDR
54173: GO 54682
54175: LD_INT 25
54177: DOUBLE
54178: EQUAL
54179: IFTRUE 54183
54181: GO 54201
54183: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
54184: LD_ADDR_VAR 0 3
54188: PUSH
54189: LD_INT 13
54191: PUSH
54192: LD_INT 14
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: ST_TO_ADDR
54199: GO 54682
54201: LD_INT 27
54203: DOUBLE
54204: EQUAL
54205: IFTRUE 54209
54207: GO 54227
54209: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
54210: LD_ADDR_VAR 0 3
54214: PUSH
54215: LD_INT 13
54217: PUSH
54218: LD_INT 14
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: ST_TO_ADDR
54225: GO 54682
54227: LD_INT 92
54229: DOUBLE
54230: EQUAL
54231: IFTRUE 54235
54233: GO 54261
54235: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
54236: LD_ADDR_VAR 0 3
54240: PUSH
54241: LD_INT 11
54243: PUSH
54244: LD_INT 12
54246: PUSH
54247: LD_INT 13
54249: PUSH
54250: LD_INT 14
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: ST_TO_ADDR
54259: GO 54682
54261: LD_INT 28
54263: DOUBLE
54264: EQUAL
54265: IFTRUE 54269
54267: GO 54287
54269: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
54270: LD_ADDR_VAR 0 3
54274: PUSH
54275: LD_INT 13
54277: PUSH
54278: LD_INT 14
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: ST_TO_ADDR
54285: GO 54682
54287: LD_INT 29
54289: DOUBLE
54290: EQUAL
54291: IFTRUE 54295
54293: GO 54313
54295: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
54296: LD_ADDR_VAR 0 3
54300: PUSH
54301: LD_INT 13
54303: PUSH
54304: LD_INT 14
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: ST_TO_ADDR
54311: GO 54682
54313: LD_INT 31
54315: DOUBLE
54316: EQUAL
54317: IFTRUE 54321
54319: GO 54339
54321: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
54322: LD_ADDR_VAR 0 3
54326: PUSH
54327: LD_INT 13
54329: PUSH
54330: LD_INT 14
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: ST_TO_ADDR
54337: GO 54682
54339: LD_INT 26
54341: DOUBLE
54342: EQUAL
54343: IFTRUE 54347
54345: GO 54365
54347: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
54348: LD_ADDR_VAR 0 3
54352: PUSH
54353: LD_INT 13
54355: PUSH
54356: LD_INT 14
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: ST_TO_ADDR
54363: GO 54682
54365: LD_INT 42
54367: DOUBLE
54368: EQUAL
54369: IFTRUE 54373
54371: GO 54399
54373: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
54374: LD_ADDR_VAR 0 3
54378: PUSH
54379: LD_INT 21
54381: PUSH
54382: LD_INT 22
54384: PUSH
54385: LD_INT 23
54387: PUSH
54388: LD_INT 24
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: ST_TO_ADDR
54397: GO 54682
54399: LD_INT 43
54401: DOUBLE
54402: EQUAL
54403: IFTRUE 54407
54405: GO 54433
54407: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
54408: LD_ADDR_VAR 0 3
54412: PUSH
54413: LD_INT 21
54415: PUSH
54416: LD_INT 22
54418: PUSH
54419: LD_INT 23
54421: PUSH
54422: LD_INT 24
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: ST_TO_ADDR
54431: GO 54682
54433: LD_INT 44
54435: DOUBLE
54436: EQUAL
54437: IFTRUE 54441
54439: GO 54467
54441: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
54442: LD_ADDR_VAR 0 3
54446: PUSH
54447: LD_INT 21
54449: PUSH
54450: LD_INT 22
54452: PUSH
54453: LD_INT 23
54455: PUSH
54456: LD_INT 24
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: ST_TO_ADDR
54465: GO 54682
54467: LD_INT 45
54469: DOUBLE
54470: EQUAL
54471: IFTRUE 54475
54473: GO 54501
54475: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
54476: LD_ADDR_VAR 0 3
54480: PUSH
54481: LD_INT 21
54483: PUSH
54484: LD_INT 22
54486: PUSH
54487: LD_INT 23
54489: PUSH
54490: LD_INT 24
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: ST_TO_ADDR
54499: GO 54682
54501: LD_INT 49
54503: DOUBLE
54504: EQUAL
54505: IFTRUE 54509
54507: GO 54535
54509: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
54510: LD_ADDR_VAR 0 3
54514: PUSH
54515: LD_INT 21
54517: PUSH
54518: LD_INT 22
54520: PUSH
54521: LD_INT 23
54523: PUSH
54524: LD_INT 24
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: ST_TO_ADDR
54533: GO 54682
54535: LD_INT 51
54537: DOUBLE
54538: EQUAL
54539: IFTRUE 54543
54541: GO 54569
54543: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
54544: LD_ADDR_VAR 0 3
54548: PUSH
54549: LD_INT 21
54551: PUSH
54552: LD_INT 22
54554: PUSH
54555: LD_INT 23
54557: PUSH
54558: LD_INT 24
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: ST_TO_ADDR
54567: GO 54682
54569: LD_INT 52
54571: DOUBLE
54572: EQUAL
54573: IFTRUE 54577
54575: GO 54603
54577: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
54578: LD_ADDR_VAR 0 3
54582: PUSH
54583: LD_INT 21
54585: PUSH
54586: LD_INT 22
54588: PUSH
54589: LD_INT 23
54591: PUSH
54592: LD_INT 24
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: ST_TO_ADDR
54601: GO 54682
54603: LD_INT 53
54605: DOUBLE
54606: EQUAL
54607: IFTRUE 54611
54609: GO 54629
54611: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
54612: LD_ADDR_VAR 0 3
54616: PUSH
54617: LD_INT 23
54619: PUSH
54620: LD_INT 24
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: ST_TO_ADDR
54627: GO 54682
54629: LD_INT 46
54631: DOUBLE
54632: EQUAL
54633: IFTRUE 54637
54635: GO 54655
54637: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
54638: LD_ADDR_VAR 0 3
54642: PUSH
54643: LD_INT 23
54645: PUSH
54646: LD_INT 24
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: ST_TO_ADDR
54653: GO 54682
54655: LD_INT 47
54657: DOUBLE
54658: EQUAL
54659: IFTRUE 54663
54661: GO 54681
54663: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
54664: LD_ADDR_VAR 0 3
54668: PUSH
54669: LD_INT 23
54671: PUSH
54672: LD_INT 24
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: ST_TO_ADDR
54679: GO 54682
54681: POP
// result := ( chassis in result ) ;
54682: LD_ADDR_VAR 0 3
54686: PUSH
54687: LD_VAR 0 1
54691: PUSH
54692: LD_VAR 0 3
54696: IN
54697: ST_TO_ADDR
// end ;
54698: LD_VAR 0 3
54702: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
54703: LD_INT 0
54705: PPUSH
54706: PPUSH
54707: PPUSH
54708: PPUSH
54709: PPUSH
54710: PPUSH
54711: PPUSH
// result := array ;
54712: LD_ADDR_VAR 0 5
54716: PUSH
54717: LD_VAR 0 1
54721: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
54722: LD_VAR 0 1
54726: NOT
54727: PUSH
54728: LD_VAR 0 2
54732: NOT
54733: OR
54734: PUSH
54735: LD_VAR 0 3
54739: NOT
54740: OR
54741: PUSH
54742: LD_VAR 0 2
54746: PUSH
54747: LD_VAR 0 1
54751: GREATER
54752: OR
54753: PUSH
54754: LD_VAR 0 3
54758: PUSH
54759: LD_VAR 0 1
54763: GREATER
54764: OR
54765: IFFALSE 54769
// exit ;
54767: GO 55065
// if direction then
54769: LD_VAR 0 4
54773: IFFALSE 54837
// begin d := 1 ;
54775: LD_ADDR_VAR 0 9
54779: PUSH
54780: LD_INT 1
54782: ST_TO_ADDR
// if i_from > i_to then
54783: LD_VAR 0 2
54787: PUSH
54788: LD_VAR 0 3
54792: GREATER
54793: IFFALSE 54819
// length := ( array - i_from ) + i_to else
54795: LD_ADDR_VAR 0 11
54799: PUSH
54800: LD_VAR 0 1
54804: PUSH
54805: LD_VAR 0 2
54809: MINUS
54810: PUSH
54811: LD_VAR 0 3
54815: PLUS
54816: ST_TO_ADDR
54817: GO 54835
// length := i_to - i_from ;
54819: LD_ADDR_VAR 0 11
54823: PUSH
54824: LD_VAR 0 3
54828: PUSH
54829: LD_VAR 0 2
54833: MINUS
54834: ST_TO_ADDR
// end else
54835: GO 54898
// begin d := - 1 ;
54837: LD_ADDR_VAR 0 9
54841: PUSH
54842: LD_INT 1
54844: NEG
54845: ST_TO_ADDR
// if i_from > i_to then
54846: LD_VAR 0 2
54850: PUSH
54851: LD_VAR 0 3
54855: GREATER
54856: IFFALSE 54876
// length := i_from - i_to else
54858: LD_ADDR_VAR 0 11
54862: PUSH
54863: LD_VAR 0 2
54867: PUSH
54868: LD_VAR 0 3
54872: MINUS
54873: ST_TO_ADDR
54874: GO 54898
// length := ( array - i_to ) + i_from ;
54876: LD_ADDR_VAR 0 11
54880: PUSH
54881: LD_VAR 0 1
54885: PUSH
54886: LD_VAR 0 3
54890: MINUS
54891: PUSH
54892: LD_VAR 0 2
54896: PLUS
54897: ST_TO_ADDR
// end ; if not length then
54898: LD_VAR 0 11
54902: NOT
54903: IFFALSE 54907
// exit ;
54905: GO 55065
// tmp := array ;
54907: LD_ADDR_VAR 0 10
54911: PUSH
54912: LD_VAR 0 1
54916: ST_TO_ADDR
// for i = 1 to length do
54917: LD_ADDR_VAR 0 6
54921: PUSH
54922: DOUBLE
54923: LD_INT 1
54925: DEC
54926: ST_TO_ADDR
54927: LD_VAR 0 11
54931: PUSH
54932: FOR_TO
54933: IFFALSE 55053
// begin for j = 1 to array do
54935: LD_ADDR_VAR 0 7
54939: PUSH
54940: DOUBLE
54941: LD_INT 1
54943: DEC
54944: ST_TO_ADDR
54945: LD_VAR 0 1
54949: PUSH
54950: FOR_TO
54951: IFFALSE 55039
// begin k := j + d ;
54953: LD_ADDR_VAR 0 8
54957: PUSH
54958: LD_VAR 0 7
54962: PUSH
54963: LD_VAR 0 9
54967: PLUS
54968: ST_TO_ADDR
// if k > array then
54969: LD_VAR 0 8
54973: PUSH
54974: LD_VAR 0 1
54978: GREATER
54979: IFFALSE 54989
// k := 1 ;
54981: LD_ADDR_VAR 0 8
54985: PUSH
54986: LD_INT 1
54988: ST_TO_ADDR
// if not k then
54989: LD_VAR 0 8
54993: NOT
54994: IFFALSE 55006
// k := array ;
54996: LD_ADDR_VAR 0 8
55000: PUSH
55001: LD_VAR 0 1
55005: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
55006: LD_ADDR_VAR 0 10
55010: PUSH
55011: LD_VAR 0 10
55015: PPUSH
55016: LD_VAR 0 8
55020: PPUSH
55021: LD_VAR 0 1
55025: PUSH
55026: LD_VAR 0 7
55030: ARRAY
55031: PPUSH
55032: CALL_OW 1
55036: ST_TO_ADDR
// end ;
55037: GO 54950
55039: POP
55040: POP
// array := tmp ;
55041: LD_ADDR_VAR 0 1
55045: PUSH
55046: LD_VAR 0 10
55050: ST_TO_ADDR
// end ;
55051: GO 54932
55053: POP
55054: POP
// result := array ;
55055: LD_ADDR_VAR 0 5
55059: PUSH
55060: LD_VAR 0 1
55064: ST_TO_ADDR
// end ;
55065: LD_VAR 0 5
55069: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
55070: LD_INT 0
55072: PPUSH
55073: PPUSH
// result := 0 ;
55074: LD_ADDR_VAR 0 3
55078: PUSH
55079: LD_INT 0
55081: ST_TO_ADDR
// if not array or not value in array then
55082: LD_VAR 0 1
55086: NOT
55087: PUSH
55088: LD_VAR 0 2
55092: PUSH
55093: LD_VAR 0 1
55097: IN
55098: NOT
55099: OR
55100: IFFALSE 55104
// exit ;
55102: GO 55158
// for i = 1 to array do
55104: LD_ADDR_VAR 0 4
55108: PUSH
55109: DOUBLE
55110: LD_INT 1
55112: DEC
55113: ST_TO_ADDR
55114: LD_VAR 0 1
55118: PUSH
55119: FOR_TO
55120: IFFALSE 55156
// if value = array [ i ] then
55122: LD_VAR 0 2
55126: PUSH
55127: LD_VAR 0 1
55131: PUSH
55132: LD_VAR 0 4
55136: ARRAY
55137: EQUAL
55138: IFFALSE 55154
// begin result := i ;
55140: LD_ADDR_VAR 0 3
55144: PUSH
55145: LD_VAR 0 4
55149: ST_TO_ADDR
// exit ;
55150: POP
55151: POP
55152: GO 55158
// end ;
55154: GO 55119
55156: POP
55157: POP
// end ;
55158: LD_VAR 0 3
55162: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
55163: LD_INT 0
55165: PPUSH
// vc_chassis := chassis ;
55166: LD_ADDR_OWVAR 37
55170: PUSH
55171: LD_VAR 0 1
55175: ST_TO_ADDR
// vc_engine := engine ;
55176: LD_ADDR_OWVAR 39
55180: PUSH
55181: LD_VAR 0 2
55185: ST_TO_ADDR
// vc_control := control ;
55186: LD_ADDR_OWVAR 38
55190: PUSH
55191: LD_VAR 0 3
55195: ST_TO_ADDR
// vc_weapon := weapon ;
55196: LD_ADDR_OWVAR 40
55200: PUSH
55201: LD_VAR 0 4
55205: ST_TO_ADDR
// vc_fuel_battery := fuel ;
55206: LD_ADDR_OWVAR 41
55210: PUSH
55211: LD_VAR 0 5
55215: ST_TO_ADDR
// end ;
55216: LD_VAR 0 6
55220: RET
// export function WantPlant ( unit ) ; var task ; begin
55221: LD_INT 0
55223: PPUSH
55224: PPUSH
// result := false ;
55225: LD_ADDR_VAR 0 2
55229: PUSH
55230: LD_INT 0
55232: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
55233: LD_ADDR_VAR 0 3
55237: PUSH
55238: LD_VAR 0 1
55242: PPUSH
55243: CALL_OW 437
55247: ST_TO_ADDR
// if task then
55248: LD_VAR 0 3
55252: IFFALSE 55280
// if task [ 1 ] [ 1 ] = p then
55254: LD_VAR 0 3
55258: PUSH
55259: LD_INT 1
55261: ARRAY
55262: PUSH
55263: LD_INT 1
55265: ARRAY
55266: PUSH
55267: LD_STRING p
55269: EQUAL
55270: IFFALSE 55280
// result := true ;
55272: LD_ADDR_VAR 0 2
55276: PUSH
55277: LD_INT 1
55279: ST_TO_ADDR
// end ;
55280: LD_VAR 0 2
55284: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
55285: LD_INT 0
55287: PPUSH
55288: PPUSH
55289: PPUSH
55290: PPUSH
// if pos < 1 then
55291: LD_VAR 0 2
55295: PUSH
55296: LD_INT 1
55298: LESS
55299: IFFALSE 55303
// exit ;
55301: GO 55606
// if pos = 1 then
55303: LD_VAR 0 2
55307: PUSH
55308: LD_INT 1
55310: EQUAL
55311: IFFALSE 55344
// result := Replace ( arr , pos [ 1 ] , value ) else
55313: LD_ADDR_VAR 0 4
55317: PUSH
55318: LD_VAR 0 1
55322: PPUSH
55323: LD_VAR 0 2
55327: PUSH
55328: LD_INT 1
55330: ARRAY
55331: PPUSH
55332: LD_VAR 0 3
55336: PPUSH
55337: CALL_OW 1
55341: ST_TO_ADDR
55342: GO 55606
// begin tmp := arr ;
55344: LD_ADDR_VAR 0 6
55348: PUSH
55349: LD_VAR 0 1
55353: ST_TO_ADDR
// s_arr := [ tmp ] ;
55354: LD_ADDR_VAR 0 7
55358: PUSH
55359: LD_VAR 0 6
55363: PUSH
55364: EMPTY
55365: LIST
55366: ST_TO_ADDR
// for i = 1 to pos - 1 do
55367: LD_ADDR_VAR 0 5
55371: PUSH
55372: DOUBLE
55373: LD_INT 1
55375: DEC
55376: ST_TO_ADDR
55377: LD_VAR 0 2
55381: PUSH
55382: LD_INT 1
55384: MINUS
55385: PUSH
55386: FOR_TO
55387: IFFALSE 55432
// begin tmp := tmp [ pos [ i ] ] ;
55389: LD_ADDR_VAR 0 6
55393: PUSH
55394: LD_VAR 0 6
55398: PUSH
55399: LD_VAR 0 2
55403: PUSH
55404: LD_VAR 0 5
55408: ARRAY
55409: ARRAY
55410: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
55411: LD_ADDR_VAR 0 7
55415: PUSH
55416: LD_VAR 0 7
55420: PUSH
55421: LD_VAR 0 6
55425: PUSH
55426: EMPTY
55427: LIST
55428: ADD
55429: ST_TO_ADDR
// end ;
55430: GO 55386
55432: POP
55433: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
55434: LD_ADDR_VAR 0 6
55438: PUSH
55439: LD_VAR 0 6
55443: PPUSH
55444: LD_VAR 0 2
55448: PUSH
55449: LD_VAR 0 2
55453: ARRAY
55454: PPUSH
55455: LD_VAR 0 3
55459: PPUSH
55460: CALL_OW 1
55464: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
55465: LD_ADDR_VAR 0 7
55469: PUSH
55470: LD_VAR 0 7
55474: PPUSH
55475: LD_VAR 0 7
55479: PPUSH
55480: LD_VAR 0 6
55484: PPUSH
55485: CALL_OW 1
55489: ST_TO_ADDR
// for i = s_arr downto 2 do
55490: LD_ADDR_VAR 0 5
55494: PUSH
55495: DOUBLE
55496: LD_VAR 0 7
55500: INC
55501: ST_TO_ADDR
55502: LD_INT 2
55504: PUSH
55505: FOR_DOWNTO
55506: IFFALSE 55590
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
55508: LD_ADDR_VAR 0 6
55512: PUSH
55513: LD_VAR 0 7
55517: PUSH
55518: LD_VAR 0 5
55522: PUSH
55523: LD_INT 1
55525: MINUS
55526: ARRAY
55527: PPUSH
55528: LD_VAR 0 2
55532: PUSH
55533: LD_VAR 0 5
55537: PUSH
55538: LD_INT 1
55540: MINUS
55541: ARRAY
55542: PPUSH
55543: LD_VAR 0 7
55547: PUSH
55548: LD_VAR 0 5
55552: ARRAY
55553: PPUSH
55554: CALL_OW 1
55558: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
55559: LD_ADDR_VAR 0 7
55563: PUSH
55564: LD_VAR 0 7
55568: PPUSH
55569: LD_VAR 0 5
55573: PUSH
55574: LD_INT 1
55576: MINUS
55577: PPUSH
55578: LD_VAR 0 6
55582: PPUSH
55583: CALL_OW 1
55587: ST_TO_ADDR
// end ;
55588: GO 55505
55590: POP
55591: POP
// result := s_arr [ 1 ] ;
55592: LD_ADDR_VAR 0 4
55596: PUSH
55597: LD_VAR 0 7
55601: PUSH
55602: LD_INT 1
55604: ARRAY
55605: ST_TO_ADDR
// end ; end ;
55606: LD_VAR 0 4
55610: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
55611: LD_INT 0
55613: PPUSH
55614: PPUSH
// if not list then
55615: LD_VAR 0 1
55619: NOT
55620: IFFALSE 55624
// exit ;
55622: GO 55715
// i := list [ pos1 ] ;
55624: LD_ADDR_VAR 0 5
55628: PUSH
55629: LD_VAR 0 1
55633: PUSH
55634: LD_VAR 0 2
55638: ARRAY
55639: ST_TO_ADDR
// if not i then
55640: LD_VAR 0 5
55644: NOT
55645: IFFALSE 55649
// exit ;
55647: GO 55715
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
55649: LD_ADDR_VAR 0 1
55653: PUSH
55654: LD_VAR 0 1
55658: PPUSH
55659: LD_VAR 0 2
55663: PPUSH
55664: LD_VAR 0 1
55668: PUSH
55669: LD_VAR 0 3
55673: ARRAY
55674: PPUSH
55675: CALL_OW 1
55679: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
55680: LD_ADDR_VAR 0 1
55684: PUSH
55685: LD_VAR 0 1
55689: PPUSH
55690: LD_VAR 0 3
55694: PPUSH
55695: LD_VAR 0 5
55699: PPUSH
55700: CALL_OW 1
55704: ST_TO_ADDR
// result := list ;
55705: LD_ADDR_VAR 0 4
55709: PUSH
55710: LD_VAR 0 1
55714: ST_TO_ADDR
// end ;
55715: LD_VAR 0 4
55719: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
55720: LD_INT 0
55722: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
55723: LD_ADDR_VAR 0 5
55727: PUSH
55728: LD_VAR 0 1
55732: PPUSH
55733: CALL_OW 250
55737: PPUSH
55738: LD_VAR 0 1
55742: PPUSH
55743: CALL_OW 251
55747: PPUSH
55748: LD_VAR 0 2
55752: PPUSH
55753: LD_VAR 0 3
55757: PPUSH
55758: LD_VAR 0 4
55762: PPUSH
55763: CALL 55773 0 5
55767: ST_TO_ADDR
// end ;
55768: LD_VAR 0 5
55772: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
55773: LD_INT 0
55775: PPUSH
55776: PPUSH
55777: PPUSH
55778: PPUSH
// if not list then
55779: LD_VAR 0 3
55783: NOT
55784: IFFALSE 55788
// exit ;
55786: GO 56176
// result := [ ] ;
55788: LD_ADDR_VAR 0 6
55792: PUSH
55793: EMPTY
55794: ST_TO_ADDR
// for i in list do
55795: LD_ADDR_VAR 0 7
55799: PUSH
55800: LD_VAR 0 3
55804: PUSH
55805: FOR_IN
55806: IFFALSE 56008
// begin tmp := GetDistUnitXY ( i , x , y ) ;
55808: LD_ADDR_VAR 0 9
55812: PUSH
55813: LD_VAR 0 7
55817: PPUSH
55818: LD_VAR 0 1
55822: PPUSH
55823: LD_VAR 0 2
55827: PPUSH
55828: CALL_OW 297
55832: ST_TO_ADDR
// if not result then
55833: LD_VAR 0 6
55837: NOT
55838: IFFALSE 55864
// result := [ [ i , tmp ] ] else
55840: LD_ADDR_VAR 0 6
55844: PUSH
55845: LD_VAR 0 7
55849: PUSH
55850: LD_VAR 0 9
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: EMPTY
55860: LIST
55861: ST_TO_ADDR
55862: GO 56006
// begin if result [ result ] [ 2 ] < tmp then
55864: LD_VAR 0 6
55868: PUSH
55869: LD_VAR 0 6
55873: ARRAY
55874: PUSH
55875: LD_INT 2
55877: ARRAY
55878: PUSH
55879: LD_VAR 0 9
55883: LESS
55884: IFFALSE 55926
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
55886: LD_ADDR_VAR 0 6
55890: PUSH
55891: LD_VAR 0 6
55895: PPUSH
55896: LD_VAR 0 6
55900: PUSH
55901: LD_INT 1
55903: PLUS
55904: PPUSH
55905: LD_VAR 0 7
55909: PUSH
55910: LD_VAR 0 9
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PPUSH
55919: CALL_OW 2
55923: ST_TO_ADDR
55924: GO 56006
// for j = 1 to result do
55926: LD_ADDR_VAR 0 8
55930: PUSH
55931: DOUBLE
55932: LD_INT 1
55934: DEC
55935: ST_TO_ADDR
55936: LD_VAR 0 6
55940: PUSH
55941: FOR_TO
55942: IFFALSE 56004
// begin if tmp < result [ j ] [ 2 ] then
55944: LD_VAR 0 9
55948: PUSH
55949: LD_VAR 0 6
55953: PUSH
55954: LD_VAR 0 8
55958: ARRAY
55959: PUSH
55960: LD_INT 2
55962: ARRAY
55963: LESS
55964: IFFALSE 56002
// begin result := Insert ( result , j , [ i , tmp ] ) ;
55966: LD_ADDR_VAR 0 6
55970: PUSH
55971: LD_VAR 0 6
55975: PPUSH
55976: LD_VAR 0 8
55980: PPUSH
55981: LD_VAR 0 7
55985: PUSH
55986: LD_VAR 0 9
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PPUSH
55995: CALL_OW 2
55999: ST_TO_ADDR
// break ;
56000: GO 56004
// end ; end ;
56002: GO 55941
56004: POP
56005: POP
// end ; end ;
56006: GO 55805
56008: POP
56009: POP
// if result and not asc then
56010: LD_VAR 0 6
56014: PUSH
56015: LD_VAR 0 4
56019: NOT
56020: AND
56021: IFFALSE 56096
// begin tmp := result ;
56023: LD_ADDR_VAR 0 9
56027: PUSH
56028: LD_VAR 0 6
56032: ST_TO_ADDR
// for i = tmp downto 1 do
56033: LD_ADDR_VAR 0 7
56037: PUSH
56038: DOUBLE
56039: LD_VAR 0 9
56043: INC
56044: ST_TO_ADDR
56045: LD_INT 1
56047: PUSH
56048: FOR_DOWNTO
56049: IFFALSE 56094
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
56051: LD_ADDR_VAR 0 6
56055: PUSH
56056: LD_VAR 0 6
56060: PPUSH
56061: LD_VAR 0 9
56065: PUSH
56066: LD_VAR 0 7
56070: MINUS
56071: PUSH
56072: LD_INT 1
56074: PLUS
56075: PPUSH
56076: LD_VAR 0 9
56080: PUSH
56081: LD_VAR 0 7
56085: ARRAY
56086: PPUSH
56087: CALL_OW 1
56091: ST_TO_ADDR
56092: GO 56048
56094: POP
56095: POP
// end ; tmp := [ ] ;
56096: LD_ADDR_VAR 0 9
56100: PUSH
56101: EMPTY
56102: ST_TO_ADDR
// if mode then
56103: LD_VAR 0 5
56107: IFFALSE 56176
// begin for i = 1 to result do
56109: LD_ADDR_VAR 0 7
56113: PUSH
56114: DOUBLE
56115: LD_INT 1
56117: DEC
56118: ST_TO_ADDR
56119: LD_VAR 0 6
56123: PUSH
56124: FOR_TO
56125: IFFALSE 56164
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
56127: LD_ADDR_VAR 0 9
56131: PUSH
56132: LD_VAR 0 9
56136: PPUSH
56137: LD_VAR 0 7
56141: PPUSH
56142: LD_VAR 0 6
56146: PUSH
56147: LD_VAR 0 7
56151: ARRAY
56152: PUSH
56153: LD_INT 1
56155: ARRAY
56156: PPUSH
56157: CALL_OW 1
56161: ST_TO_ADDR
56162: GO 56124
56164: POP
56165: POP
// result := tmp ;
56166: LD_ADDR_VAR 0 6
56170: PUSH
56171: LD_VAR 0 9
56175: ST_TO_ADDR
// end ; end ;
56176: LD_VAR 0 6
56180: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
56181: LD_INT 0
56183: PPUSH
56184: PPUSH
56185: PPUSH
56186: PPUSH
56187: PPUSH
56188: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
56189: LD_ADDR_VAR 0 5
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: EMPTY
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: ST_TO_ADDR
// if not x or not y then
56211: LD_VAR 0 2
56215: NOT
56216: PUSH
56217: LD_VAR 0 3
56221: NOT
56222: OR
56223: IFFALSE 56227
// exit ;
56225: GO 57877
// if not range then
56227: LD_VAR 0 4
56231: NOT
56232: IFFALSE 56242
// range := 10 ;
56234: LD_ADDR_VAR 0 4
56238: PUSH
56239: LD_INT 10
56241: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
56242: LD_ADDR_VAR 0 8
56246: PUSH
56247: LD_INT 81
56249: PUSH
56250: LD_VAR 0 1
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 92
56261: PUSH
56262: LD_VAR 0 2
56266: PUSH
56267: LD_VAR 0 3
56271: PUSH
56272: LD_VAR 0 4
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 3
56285: PUSH
56286: LD_INT 21
56288: PUSH
56289: LD_INT 3
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: LIST
56304: PPUSH
56305: CALL_OW 69
56309: ST_TO_ADDR
// if not tmp then
56310: LD_VAR 0 8
56314: NOT
56315: IFFALSE 56319
// exit ;
56317: GO 57877
// for i in tmp do
56319: LD_ADDR_VAR 0 6
56323: PUSH
56324: LD_VAR 0 8
56328: PUSH
56329: FOR_IN
56330: IFFALSE 57852
// begin points := [ 0 , 0 , 0 ] ;
56332: LD_ADDR_VAR 0 9
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: LIST
56350: ST_TO_ADDR
// bpoints := 1 ;
56351: LD_ADDR_VAR 0 10
56355: PUSH
56356: LD_INT 1
56358: ST_TO_ADDR
// case GetType ( i ) of unit_human :
56359: LD_VAR 0 6
56363: PPUSH
56364: CALL_OW 247
56368: PUSH
56369: LD_INT 1
56371: DOUBLE
56372: EQUAL
56373: IFTRUE 56377
56375: GO 56955
56377: POP
// begin if GetClass ( i ) = 1 then
56378: LD_VAR 0 6
56382: PPUSH
56383: CALL_OW 257
56387: PUSH
56388: LD_INT 1
56390: EQUAL
56391: IFFALSE 56412
// points := [ 10 , 5 , 3 ] ;
56393: LD_ADDR_VAR 0 9
56397: PUSH
56398: LD_INT 10
56400: PUSH
56401: LD_INT 5
56403: PUSH
56404: LD_INT 3
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: LIST
56411: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
56412: LD_VAR 0 6
56416: PPUSH
56417: CALL_OW 257
56421: PUSH
56422: LD_INT 2
56424: PUSH
56425: LD_INT 3
56427: PUSH
56428: LD_INT 4
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: LIST
56435: IN
56436: IFFALSE 56457
// points := [ 3 , 2 , 1 ] ;
56438: LD_ADDR_VAR 0 9
56442: PUSH
56443: LD_INT 3
56445: PUSH
56446: LD_INT 2
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: LIST
56456: ST_TO_ADDR
// if GetClass ( i ) = 5 then
56457: LD_VAR 0 6
56461: PPUSH
56462: CALL_OW 257
56466: PUSH
56467: LD_INT 5
56469: EQUAL
56470: IFFALSE 56491
// points := [ 130 , 5 , 2 ] ;
56472: LD_ADDR_VAR 0 9
56476: PUSH
56477: LD_INT 130
56479: PUSH
56480: LD_INT 5
56482: PUSH
56483: LD_INT 2
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: LIST
56490: ST_TO_ADDR
// if GetClass ( i ) = 8 then
56491: LD_VAR 0 6
56495: PPUSH
56496: CALL_OW 257
56500: PUSH
56501: LD_INT 8
56503: EQUAL
56504: IFFALSE 56525
// points := [ 35 , 35 , 30 ] ;
56506: LD_ADDR_VAR 0 9
56510: PUSH
56511: LD_INT 35
56513: PUSH
56514: LD_INT 35
56516: PUSH
56517: LD_INT 30
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: LIST
56524: ST_TO_ADDR
// if GetClass ( i ) = 9 then
56525: LD_VAR 0 6
56529: PPUSH
56530: CALL_OW 257
56534: PUSH
56535: LD_INT 9
56537: EQUAL
56538: IFFALSE 56559
// points := [ 20 , 55 , 40 ] ;
56540: LD_ADDR_VAR 0 9
56544: PUSH
56545: LD_INT 20
56547: PUSH
56548: LD_INT 55
56550: PUSH
56551: LD_INT 40
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: LIST
56558: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
56559: LD_VAR 0 6
56563: PPUSH
56564: CALL_OW 257
56568: PUSH
56569: LD_INT 12
56571: PUSH
56572: LD_INT 16
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: IN
56579: IFFALSE 56600
// points := [ 5 , 3 , 2 ] ;
56581: LD_ADDR_VAR 0 9
56585: PUSH
56586: LD_INT 5
56588: PUSH
56589: LD_INT 3
56591: PUSH
56592: LD_INT 2
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: LIST
56599: ST_TO_ADDR
// if GetClass ( i ) = 17 then
56600: LD_VAR 0 6
56604: PPUSH
56605: CALL_OW 257
56609: PUSH
56610: LD_INT 17
56612: EQUAL
56613: IFFALSE 56634
// points := [ 100 , 50 , 75 ] ;
56615: LD_ADDR_VAR 0 9
56619: PUSH
56620: LD_INT 100
56622: PUSH
56623: LD_INT 50
56625: PUSH
56626: LD_INT 75
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: LIST
56633: ST_TO_ADDR
// if GetClass ( i ) = 15 then
56634: LD_VAR 0 6
56638: PPUSH
56639: CALL_OW 257
56643: PUSH
56644: LD_INT 15
56646: EQUAL
56647: IFFALSE 56668
// points := [ 10 , 5 , 3 ] ;
56649: LD_ADDR_VAR 0 9
56653: PUSH
56654: LD_INT 10
56656: PUSH
56657: LD_INT 5
56659: PUSH
56660: LD_INT 3
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: LIST
56667: ST_TO_ADDR
// if GetClass ( i ) = 14 then
56668: LD_VAR 0 6
56672: PPUSH
56673: CALL_OW 257
56677: PUSH
56678: LD_INT 14
56680: EQUAL
56681: IFFALSE 56702
// points := [ 10 , 0 , 0 ] ;
56683: LD_ADDR_VAR 0 9
56687: PUSH
56688: LD_INT 10
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: LIST
56701: ST_TO_ADDR
// if GetClass ( i ) = 11 then
56702: LD_VAR 0 6
56706: PPUSH
56707: CALL_OW 257
56711: PUSH
56712: LD_INT 11
56714: EQUAL
56715: IFFALSE 56736
// points := [ 30 , 10 , 5 ] ;
56717: LD_ADDR_VAR 0 9
56721: PUSH
56722: LD_INT 30
56724: PUSH
56725: LD_INT 10
56727: PUSH
56728: LD_INT 5
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: LIST
56735: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
56736: LD_VAR 0 1
56740: PPUSH
56741: LD_INT 5
56743: PPUSH
56744: CALL_OW 321
56748: PUSH
56749: LD_INT 2
56751: EQUAL
56752: IFFALSE 56769
// bpoints := bpoints * 1.8 ;
56754: LD_ADDR_VAR 0 10
56758: PUSH
56759: LD_VAR 0 10
56763: PUSH
56764: LD_REAL  1.80000000000000E+0000
56767: MUL
56768: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
56769: LD_VAR 0 6
56773: PPUSH
56774: CALL_OW 257
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: LD_INT 2
56784: PUSH
56785: LD_INT 3
56787: PUSH
56788: LD_INT 4
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: IN
56797: PUSH
56798: LD_VAR 0 1
56802: PPUSH
56803: LD_INT 51
56805: PPUSH
56806: CALL_OW 321
56810: PUSH
56811: LD_INT 2
56813: EQUAL
56814: AND
56815: IFFALSE 56832
// bpoints := bpoints * 1.2 ;
56817: LD_ADDR_VAR 0 10
56821: PUSH
56822: LD_VAR 0 10
56826: PUSH
56827: LD_REAL  1.20000000000000E+0000
56830: MUL
56831: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
56832: LD_VAR 0 6
56836: PPUSH
56837: CALL_OW 257
56841: PUSH
56842: LD_INT 5
56844: PUSH
56845: LD_INT 7
56847: PUSH
56848: LD_INT 9
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: LIST
56855: IN
56856: PUSH
56857: LD_VAR 0 1
56861: PPUSH
56862: LD_INT 52
56864: PPUSH
56865: CALL_OW 321
56869: PUSH
56870: LD_INT 2
56872: EQUAL
56873: AND
56874: IFFALSE 56891
// bpoints := bpoints * 1.5 ;
56876: LD_ADDR_VAR 0 10
56880: PUSH
56881: LD_VAR 0 10
56885: PUSH
56886: LD_REAL  1.50000000000000E+0000
56889: MUL
56890: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
56891: LD_VAR 0 1
56895: PPUSH
56896: LD_INT 66
56898: PPUSH
56899: CALL_OW 321
56903: PUSH
56904: LD_INT 2
56906: EQUAL
56907: IFFALSE 56924
// bpoints := bpoints * 1.1 ;
56909: LD_ADDR_VAR 0 10
56913: PUSH
56914: LD_VAR 0 10
56918: PUSH
56919: LD_REAL  1.10000000000000E+0000
56922: MUL
56923: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
56924: LD_ADDR_VAR 0 10
56928: PUSH
56929: LD_VAR 0 10
56933: PUSH
56934: LD_VAR 0 6
56938: PPUSH
56939: LD_INT 1
56941: PPUSH
56942: CALL_OW 259
56946: PUSH
56947: LD_REAL  1.15000000000000E+0000
56950: MUL
56951: MUL
56952: ST_TO_ADDR
// end ; unit_vehicle :
56953: GO 57781
56955: LD_INT 2
56957: DOUBLE
56958: EQUAL
56959: IFTRUE 56963
56961: GO 57769
56963: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
56964: LD_VAR 0 6
56968: PPUSH
56969: CALL_OW 264
56973: PUSH
56974: LD_INT 2
56976: PUSH
56977: LD_INT 42
56979: PUSH
56980: LD_INT 24
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: LIST
56987: IN
56988: IFFALSE 57009
// points := [ 25 , 5 , 3 ] ;
56990: LD_ADDR_VAR 0 9
56994: PUSH
56995: LD_INT 25
56997: PUSH
56998: LD_INT 5
57000: PUSH
57001: LD_INT 3
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: LIST
57008: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
57009: LD_VAR 0 6
57013: PPUSH
57014: CALL_OW 264
57018: PUSH
57019: LD_INT 4
57021: PUSH
57022: LD_INT 43
57024: PUSH
57025: LD_INT 25
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: LIST
57032: IN
57033: IFFALSE 57054
// points := [ 40 , 15 , 5 ] ;
57035: LD_ADDR_VAR 0 9
57039: PUSH
57040: LD_INT 40
57042: PUSH
57043: LD_INT 15
57045: PUSH
57046: LD_INT 5
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: LIST
57053: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
57054: LD_VAR 0 6
57058: PPUSH
57059: CALL_OW 264
57063: PUSH
57064: LD_INT 3
57066: PUSH
57067: LD_INT 23
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: IN
57074: IFFALSE 57095
// points := [ 7 , 25 , 8 ] ;
57076: LD_ADDR_VAR 0 9
57080: PUSH
57081: LD_INT 7
57083: PUSH
57084: LD_INT 25
57086: PUSH
57087: LD_INT 8
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: LIST
57094: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
57095: LD_VAR 0 6
57099: PPUSH
57100: CALL_OW 264
57104: PUSH
57105: LD_INT 5
57107: PUSH
57108: LD_INT 27
57110: PUSH
57111: LD_INT 44
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: LIST
57118: IN
57119: IFFALSE 57140
// points := [ 14 , 50 , 16 ] ;
57121: LD_ADDR_VAR 0 9
57125: PUSH
57126: LD_INT 14
57128: PUSH
57129: LD_INT 50
57131: PUSH
57132: LD_INT 16
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: LIST
57139: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
57140: LD_VAR 0 6
57144: PPUSH
57145: CALL_OW 264
57149: PUSH
57150: LD_INT 6
57152: PUSH
57153: LD_INT 46
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: IN
57160: IFFALSE 57181
// points := [ 32 , 120 , 70 ] ;
57162: LD_ADDR_VAR 0 9
57166: PUSH
57167: LD_INT 32
57169: PUSH
57170: LD_INT 120
57172: PUSH
57173: LD_INT 70
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: LIST
57180: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
57181: LD_VAR 0 6
57185: PPUSH
57186: CALL_OW 264
57190: PUSH
57191: LD_INT 7
57193: PUSH
57194: LD_INT 28
57196: PUSH
57197: LD_INT 45
57199: PUSH
57200: LD_INT 92
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: IN
57209: IFFALSE 57230
// points := [ 35 , 20 , 45 ] ;
57211: LD_ADDR_VAR 0 9
57215: PUSH
57216: LD_INT 35
57218: PUSH
57219: LD_INT 20
57221: PUSH
57222: LD_INT 45
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: LIST
57229: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
57230: LD_VAR 0 6
57234: PPUSH
57235: CALL_OW 264
57239: PUSH
57240: LD_INT 47
57242: PUSH
57243: EMPTY
57244: LIST
57245: IN
57246: IFFALSE 57267
// points := [ 67 , 45 , 75 ] ;
57248: LD_ADDR_VAR 0 9
57252: PUSH
57253: LD_INT 67
57255: PUSH
57256: LD_INT 45
57258: PUSH
57259: LD_INT 75
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: LIST
57266: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
57267: LD_VAR 0 6
57271: PPUSH
57272: CALL_OW 264
57276: PUSH
57277: LD_INT 26
57279: PUSH
57280: EMPTY
57281: LIST
57282: IN
57283: IFFALSE 57304
// points := [ 120 , 30 , 80 ] ;
57285: LD_ADDR_VAR 0 9
57289: PUSH
57290: LD_INT 120
57292: PUSH
57293: LD_INT 30
57295: PUSH
57296: LD_INT 80
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: LIST
57303: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
57304: LD_VAR 0 6
57308: PPUSH
57309: CALL_OW 264
57313: PUSH
57314: LD_INT 22
57316: PUSH
57317: EMPTY
57318: LIST
57319: IN
57320: IFFALSE 57341
// points := [ 40 , 1 , 1 ] ;
57322: LD_ADDR_VAR 0 9
57326: PUSH
57327: LD_INT 40
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: LD_INT 1
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: LIST
57340: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
57341: LD_VAR 0 6
57345: PPUSH
57346: CALL_OW 264
57350: PUSH
57351: LD_INT 29
57353: PUSH
57354: EMPTY
57355: LIST
57356: IN
57357: IFFALSE 57378
// points := [ 70 , 200 , 400 ] ;
57359: LD_ADDR_VAR 0 9
57363: PUSH
57364: LD_INT 70
57366: PUSH
57367: LD_INT 200
57369: PUSH
57370: LD_INT 400
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: LIST
57377: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
57378: LD_VAR 0 6
57382: PPUSH
57383: CALL_OW 264
57387: PUSH
57388: LD_INT 14
57390: PUSH
57391: LD_INT 53
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: IN
57398: IFFALSE 57419
// points := [ 40 , 10 , 20 ] ;
57400: LD_ADDR_VAR 0 9
57404: PUSH
57405: LD_INT 40
57407: PUSH
57408: LD_INT 10
57410: PUSH
57411: LD_INT 20
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: LIST
57418: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
57419: LD_VAR 0 6
57423: PPUSH
57424: CALL_OW 264
57428: PUSH
57429: LD_INT 9
57431: PUSH
57432: EMPTY
57433: LIST
57434: IN
57435: IFFALSE 57456
// points := [ 5 , 70 , 20 ] ;
57437: LD_ADDR_VAR 0 9
57441: PUSH
57442: LD_INT 5
57444: PUSH
57445: LD_INT 70
57447: PUSH
57448: LD_INT 20
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: LIST
57455: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
57456: LD_VAR 0 6
57460: PPUSH
57461: CALL_OW 264
57465: PUSH
57466: LD_INT 10
57468: PUSH
57469: EMPTY
57470: LIST
57471: IN
57472: IFFALSE 57493
// points := [ 35 , 110 , 70 ] ;
57474: LD_ADDR_VAR 0 9
57478: PUSH
57479: LD_INT 35
57481: PUSH
57482: LD_INT 110
57484: PUSH
57485: LD_INT 70
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: LIST
57492: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
57493: LD_VAR 0 6
57497: PPUSH
57498: CALL_OW 265
57502: PUSH
57503: LD_INT 25
57505: EQUAL
57506: IFFALSE 57527
// points := [ 80 , 65 , 100 ] ;
57508: LD_ADDR_VAR 0 9
57512: PUSH
57513: LD_INT 80
57515: PUSH
57516: LD_INT 65
57518: PUSH
57519: LD_INT 100
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: LIST
57526: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
57527: LD_VAR 0 6
57531: PPUSH
57532: CALL_OW 263
57536: PUSH
57537: LD_INT 1
57539: EQUAL
57540: IFFALSE 57575
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
57542: LD_ADDR_VAR 0 10
57546: PUSH
57547: LD_VAR 0 10
57551: PUSH
57552: LD_VAR 0 6
57556: PPUSH
57557: CALL_OW 311
57561: PPUSH
57562: LD_INT 3
57564: PPUSH
57565: CALL_OW 259
57569: PUSH
57570: LD_INT 4
57572: MUL
57573: MUL
57574: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
57575: LD_VAR 0 6
57579: PPUSH
57580: CALL_OW 263
57584: PUSH
57585: LD_INT 2
57587: EQUAL
57588: IFFALSE 57639
// begin j := IsControledBy ( i ) ;
57590: LD_ADDR_VAR 0 7
57594: PUSH
57595: LD_VAR 0 6
57599: PPUSH
57600: CALL_OW 312
57604: ST_TO_ADDR
// if j then
57605: LD_VAR 0 7
57609: IFFALSE 57639
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
57611: LD_ADDR_VAR 0 10
57615: PUSH
57616: LD_VAR 0 10
57620: PUSH
57621: LD_VAR 0 7
57625: PPUSH
57626: LD_INT 3
57628: PPUSH
57629: CALL_OW 259
57633: PUSH
57634: LD_INT 3
57636: MUL
57637: MUL
57638: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
57639: LD_VAR 0 6
57643: PPUSH
57644: CALL_OW 264
57648: PUSH
57649: LD_INT 5
57651: PUSH
57652: LD_INT 6
57654: PUSH
57655: LD_INT 46
57657: PUSH
57658: LD_INT 44
57660: PUSH
57661: LD_INT 47
57663: PUSH
57664: LD_INT 45
57666: PUSH
57667: LD_INT 28
57669: PUSH
57670: LD_INT 7
57672: PUSH
57673: LD_INT 27
57675: PUSH
57676: LD_INT 29
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: IN
57691: PUSH
57692: LD_VAR 0 1
57696: PPUSH
57697: LD_INT 52
57699: PPUSH
57700: CALL_OW 321
57704: PUSH
57705: LD_INT 2
57707: EQUAL
57708: AND
57709: IFFALSE 57726
// bpoints := bpoints * 1.2 ;
57711: LD_ADDR_VAR 0 10
57715: PUSH
57716: LD_VAR 0 10
57720: PUSH
57721: LD_REAL  1.20000000000000E+0000
57724: MUL
57725: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
57726: LD_VAR 0 6
57730: PPUSH
57731: CALL_OW 264
57735: PUSH
57736: LD_INT 6
57738: PUSH
57739: LD_INT 46
57741: PUSH
57742: LD_INT 47
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: LIST
57749: IN
57750: IFFALSE 57767
// bpoints := bpoints * 1.2 ;
57752: LD_ADDR_VAR 0 10
57756: PUSH
57757: LD_VAR 0 10
57761: PUSH
57762: LD_REAL  1.20000000000000E+0000
57765: MUL
57766: ST_TO_ADDR
// end ; unit_building :
57767: GO 57781
57769: LD_INT 3
57771: DOUBLE
57772: EQUAL
57773: IFTRUE 57777
57775: GO 57780
57777: POP
// ; end ;
57778: GO 57781
57780: POP
// for j = 1 to 3 do
57781: LD_ADDR_VAR 0 7
57785: PUSH
57786: DOUBLE
57787: LD_INT 1
57789: DEC
57790: ST_TO_ADDR
57791: LD_INT 3
57793: PUSH
57794: FOR_TO
57795: IFFALSE 57848
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
57797: LD_ADDR_VAR 0 5
57801: PUSH
57802: LD_VAR 0 5
57806: PPUSH
57807: LD_VAR 0 7
57811: PPUSH
57812: LD_VAR 0 5
57816: PUSH
57817: LD_VAR 0 7
57821: ARRAY
57822: PUSH
57823: LD_VAR 0 9
57827: PUSH
57828: LD_VAR 0 7
57832: ARRAY
57833: PUSH
57834: LD_VAR 0 10
57838: MUL
57839: PLUS
57840: PPUSH
57841: CALL_OW 1
57845: ST_TO_ADDR
57846: GO 57794
57848: POP
57849: POP
// end ;
57850: GO 56329
57852: POP
57853: POP
// result := Replace ( result , 4 , tmp ) ;
57854: LD_ADDR_VAR 0 5
57858: PUSH
57859: LD_VAR 0 5
57863: PPUSH
57864: LD_INT 4
57866: PPUSH
57867: LD_VAR 0 8
57871: PPUSH
57872: CALL_OW 1
57876: ST_TO_ADDR
// end ;
57877: LD_VAR 0 5
57881: RET
// export function DangerAtRange ( unit , range ) ; begin
57882: LD_INT 0
57884: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
57885: LD_ADDR_VAR 0 3
57889: PUSH
57890: LD_VAR 0 1
57894: PPUSH
57895: CALL_OW 255
57899: PPUSH
57900: LD_VAR 0 1
57904: PPUSH
57905: CALL_OW 250
57909: PPUSH
57910: LD_VAR 0 1
57914: PPUSH
57915: CALL_OW 251
57919: PPUSH
57920: LD_VAR 0 2
57924: PPUSH
57925: CALL 56181 0 4
57929: ST_TO_ADDR
// end ;
57930: LD_VAR 0 3
57934: RET
// export function DangerInArea ( side , area ) ; begin
57935: LD_INT 0
57937: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
57938: LD_ADDR_VAR 0 3
57942: PUSH
57943: LD_VAR 0 2
57947: PPUSH
57948: LD_INT 81
57950: PUSH
57951: LD_VAR 0 1
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PPUSH
57960: CALL_OW 70
57964: ST_TO_ADDR
// end ;
57965: LD_VAR 0 3
57969: RET
// export function IsExtension ( b ) ; begin
57970: LD_INT 0
57972: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
57973: LD_ADDR_VAR 0 2
57977: PUSH
57978: LD_VAR 0 1
57982: PUSH
57983: LD_INT 23
57985: PUSH
57986: LD_INT 20
57988: PUSH
57989: LD_INT 22
57991: PUSH
57992: LD_INT 17
57994: PUSH
57995: LD_INT 24
57997: PUSH
57998: LD_INT 21
58000: PUSH
58001: LD_INT 19
58003: PUSH
58004: LD_INT 16
58006: PUSH
58007: LD_INT 25
58009: PUSH
58010: LD_INT 18
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: IN
58025: ST_TO_ADDR
// end ;
58026: LD_VAR 0 2
58030: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
58031: LD_INT 0
58033: PPUSH
58034: PPUSH
58035: PPUSH
// result := [ ] ;
58036: LD_ADDR_VAR 0 4
58040: PUSH
58041: EMPTY
58042: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
58043: LD_ADDR_VAR 0 5
58047: PUSH
58048: LD_VAR 0 2
58052: PPUSH
58053: LD_INT 21
58055: PUSH
58056: LD_INT 3
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PPUSH
58063: CALL_OW 70
58067: ST_TO_ADDR
// if not tmp then
58068: LD_VAR 0 5
58072: NOT
58073: IFFALSE 58077
// exit ;
58075: GO 58141
// if checkLink then
58077: LD_VAR 0 3
58081: IFFALSE 58131
// begin for i in tmp do
58083: LD_ADDR_VAR 0 6
58087: PUSH
58088: LD_VAR 0 5
58092: PUSH
58093: FOR_IN
58094: IFFALSE 58129
// if GetBase ( i ) <> base then
58096: LD_VAR 0 6
58100: PPUSH
58101: CALL_OW 274
58105: PUSH
58106: LD_VAR 0 1
58110: NONEQUAL
58111: IFFALSE 58127
// ComLinkToBase ( base , i ) ;
58113: LD_VAR 0 1
58117: PPUSH
58118: LD_VAR 0 6
58122: PPUSH
58123: CALL_OW 169
58127: GO 58093
58129: POP
58130: POP
// end ; result := tmp ;
58131: LD_ADDR_VAR 0 4
58135: PUSH
58136: LD_VAR 0 5
58140: ST_TO_ADDR
// end ;
58141: LD_VAR 0 4
58145: RET
// export function ComComplete ( units , b ) ; var i ; begin
58146: LD_INT 0
58148: PPUSH
58149: PPUSH
// if not units then
58150: LD_VAR 0 1
58154: NOT
58155: IFFALSE 58159
// exit ;
58157: GO 58249
// for i in units do
58159: LD_ADDR_VAR 0 4
58163: PUSH
58164: LD_VAR 0 1
58168: PUSH
58169: FOR_IN
58170: IFFALSE 58247
// if BuildingStatus ( b ) = bs_build then
58172: LD_VAR 0 2
58176: PPUSH
58177: CALL_OW 461
58181: PUSH
58182: LD_INT 1
58184: EQUAL
58185: IFFALSE 58245
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
58187: LD_VAR 0 4
58191: PPUSH
58192: LD_STRING h
58194: PUSH
58195: LD_VAR 0 2
58199: PPUSH
58200: CALL_OW 250
58204: PUSH
58205: LD_VAR 0 2
58209: PPUSH
58210: CALL_OW 251
58214: PUSH
58215: LD_VAR 0 2
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: LD_INT 0
58225: PUSH
58226: LD_INT 0
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: PUSH
58238: EMPTY
58239: LIST
58240: PPUSH
58241: CALL_OW 446
58245: GO 58169
58247: POP
58248: POP
// end ;
58249: LD_VAR 0 3
58253: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
58254: LD_INT 0
58256: PPUSH
58257: PPUSH
58258: PPUSH
58259: PPUSH
58260: PPUSH
58261: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
58262: LD_VAR 0 1
58266: NOT
58267: PUSH
58268: LD_VAR 0 1
58272: PPUSH
58273: CALL_OW 263
58277: PUSH
58278: LD_INT 2
58280: NONEQUAL
58281: OR
58282: IFFALSE 58286
// exit ;
58284: GO 58602
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
58286: LD_ADDR_VAR 0 6
58290: PUSH
58291: LD_INT 22
58293: PUSH
58294: LD_VAR 0 1
58298: PPUSH
58299: CALL_OW 255
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 2
58310: PUSH
58311: LD_INT 30
58313: PUSH
58314: LD_INT 36
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 34
58323: PUSH
58324: LD_INT 31
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: LIST
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PPUSH
58340: CALL_OW 69
58344: ST_TO_ADDR
// if not tmp then
58345: LD_VAR 0 6
58349: NOT
58350: IFFALSE 58354
// exit ;
58352: GO 58602
// result := [ ] ;
58354: LD_ADDR_VAR 0 2
58358: PUSH
58359: EMPTY
58360: ST_TO_ADDR
// for i in tmp do
58361: LD_ADDR_VAR 0 3
58365: PUSH
58366: LD_VAR 0 6
58370: PUSH
58371: FOR_IN
58372: IFFALSE 58443
// begin t := UnitsInside ( i ) ;
58374: LD_ADDR_VAR 0 4
58378: PUSH
58379: LD_VAR 0 3
58383: PPUSH
58384: CALL_OW 313
58388: ST_TO_ADDR
// if t then
58389: LD_VAR 0 4
58393: IFFALSE 58441
// for j in t do
58395: LD_ADDR_VAR 0 7
58399: PUSH
58400: LD_VAR 0 4
58404: PUSH
58405: FOR_IN
58406: IFFALSE 58439
// result := Replace ( result , result + 1 , j ) ;
58408: LD_ADDR_VAR 0 2
58412: PUSH
58413: LD_VAR 0 2
58417: PPUSH
58418: LD_VAR 0 2
58422: PUSH
58423: LD_INT 1
58425: PLUS
58426: PPUSH
58427: LD_VAR 0 7
58431: PPUSH
58432: CALL_OW 1
58436: ST_TO_ADDR
58437: GO 58405
58439: POP
58440: POP
// end ;
58441: GO 58371
58443: POP
58444: POP
// if not result then
58445: LD_VAR 0 2
58449: NOT
58450: IFFALSE 58454
// exit ;
58452: GO 58602
// mech := result [ 1 ] ;
58454: LD_ADDR_VAR 0 5
58458: PUSH
58459: LD_VAR 0 2
58463: PUSH
58464: LD_INT 1
58466: ARRAY
58467: ST_TO_ADDR
// if result > 1 then
58468: LD_VAR 0 2
58472: PUSH
58473: LD_INT 1
58475: GREATER
58476: IFFALSE 58588
// begin for i = 2 to result do
58478: LD_ADDR_VAR 0 3
58482: PUSH
58483: DOUBLE
58484: LD_INT 2
58486: DEC
58487: ST_TO_ADDR
58488: LD_VAR 0 2
58492: PUSH
58493: FOR_TO
58494: IFFALSE 58586
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
58496: LD_ADDR_VAR 0 4
58500: PUSH
58501: LD_VAR 0 2
58505: PUSH
58506: LD_VAR 0 3
58510: ARRAY
58511: PPUSH
58512: LD_INT 3
58514: PPUSH
58515: CALL_OW 259
58519: PUSH
58520: LD_VAR 0 2
58524: PUSH
58525: LD_VAR 0 3
58529: ARRAY
58530: PPUSH
58531: CALL_OW 432
58535: MINUS
58536: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
58537: LD_VAR 0 4
58541: PUSH
58542: LD_VAR 0 5
58546: PPUSH
58547: LD_INT 3
58549: PPUSH
58550: CALL_OW 259
58554: PUSH
58555: LD_VAR 0 5
58559: PPUSH
58560: CALL_OW 432
58564: MINUS
58565: GREATEREQUAL
58566: IFFALSE 58584
// mech := result [ i ] ;
58568: LD_ADDR_VAR 0 5
58572: PUSH
58573: LD_VAR 0 2
58577: PUSH
58578: LD_VAR 0 3
58582: ARRAY
58583: ST_TO_ADDR
// end ;
58584: GO 58493
58586: POP
58587: POP
// end ; ComLinkTo ( vehicle , mech ) ;
58588: LD_VAR 0 1
58592: PPUSH
58593: LD_VAR 0 5
58597: PPUSH
58598: CALL_OW 135
// end ;
58602: LD_VAR 0 2
58606: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
58607: LD_INT 0
58609: PPUSH
58610: PPUSH
58611: PPUSH
58612: PPUSH
58613: PPUSH
58614: PPUSH
58615: PPUSH
58616: PPUSH
58617: PPUSH
58618: PPUSH
58619: PPUSH
58620: PPUSH
58621: PPUSH
// result := [ ] ;
58622: LD_ADDR_VAR 0 7
58626: PUSH
58627: EMPTY
58628: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
58629: LD_VAR 0 1
58633: PPUSH
58634: CALL_OW 266
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: IN
58649: NOT
58650: IFFALSE 58654
// exit ;
58652: GO 60288
// if name then
58654: LD_VAR 0 3
58658: IFFALSE 58674
// SetBName ( base_dep , name ) ;
58660: LD_VAR 0 1
58664: PPUSH
58665: LD_VAR 0 3
58669: PPUSH
58670: CALL_OW 500
// base := GetBase ( base_dep ) ;
58674: LD_ADDR_VAR 0 15
58678: PUSH
58679: LD_VAR 0 1
58683: PPUSH
58684: CALL_OW 274
58688: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
58689: LD_ADDR_VAR 0 16
58693: PUSH
58694: LD_VAR 0 1
58698: PPUSH
58699: CALL_OW 255
58703: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
58704: LD_ADDR_VAR 0 17
58708: PUSH
58709: LD_VAR 0 1
58713: PPUSH
58714: CALL_OW 248
58718: ST_TO_ADDR
// if sources then
58719: LD_VAR 0 5
58723: IFFALSE 58770
// for i = 1 to 3 do
58725: LD_ADDR_VAR 0 8
58729: PUSH
58730: DOUBLE
58731: LD_INT 1
58733: DEC
58734: ST_TO_ADDR
58735: LD_INT 3
58737: PUSH
58738: FOR_TO
58739: IFFALSE 58768
// AddResourceType ( base , i , sources [ i ] ) ;
58741: LD_VAR 0 15
58745: PPUSH
58746: LD_VAR 0 8
58750: PPUSH
58751: LD_VAR 0 5
58755: PUSH
58756: LD_VAR 0 8
58760: ARRAY
58761: PPUSH
58762: CALL_OW 276
58766: GO 58738
58768: POP
58769: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
58770: LD_ADDR_VAR 0 18
58774: PUSH
58775: LD_VAR 0 15
58779: PPUSH
58780: LD_VAR 0 2
58784: PPUSH
58785: LD_INT 1
58787: PPUSH
58788: CALL 58031 0 3
58792: ST_TO_ADDR
// InitHc ;
58793: CALL_OW 19
// InitUc ;
58797: CALL_OW 18
// uc_side := side ;
58801: LD_ADDR_OWVAR 20
58805: PUSH
58806: LD_VAR 0 16
58810: ST_TO_ADDR
// uc_nation := nation ;
58811: LD_ADDR_OWVAR 21
58815: PUSH
58816: LD_VAR 0 17
58820: ST_TO_ADDR
// if buildings then
58821: LD_VAR 0 18
58825: IFFALSE 60147
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
58827: LD_ADDR_VAR 0 19
58831: PUSH
58832: LD_VAR 0 18
58836: PPUSH
58837: LD_INT 2
58839: PUSH
58840: LD_INT 30
58842: PUSH
58843: LD_INT 29
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 30
58852: PUSH
58853: LD_INT 30
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: LIST
58864: PPUSH
58865: CALL_OW 72
58869: ST_TO_ADDR
// if tmp then
58870: LD_VAR 0 19
58874: IFFALSE 58922
// for i in tmp do
58876: LD_ADDR_VAR 0 8
58880: PUSH
58881: LD_VAR 0 19
58885: PUSH
58886: FOR_IN
58887: IFFALSE 58920
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
58889: LD_VAR 0 8
58893: PPUSH
58894: CALL_OW 250
58898: PPUSH
58899: LD_VAR 0 8
58903: PPUSH
58904: CALL_OW 251
58908: PPUSH
58909: LD_VAR 0 16
58913: PPUSH
58914: CALL_OW 441
58918: GO 58886
58920: POP
58921: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
58922: LD_VAR 0 18
58926: PPUSH
58927: LD_INT 2
58929: PUSH
58930: LD_INT 30
58932: PUSH
58933: LD_INT 32
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 30
58942: PUSH
58943: LD_INT 33
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: LIST
58954: PPUSH
58955: CALL_OW 72
58959: IFFALSE 59047
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
58961: LD_ADDR_VAR 0 8
58965: PUSH
58966: LD_VAR 0 18
58970: PPUSH
58971: LD_INT 2
58973: PUSH
58974: LD_INT 30
58976: PUSH
58977: LD_INT 32
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 30
58986: PUSH
58987: LD_INT 33
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: LIST
58998: PPUSH
58999: CALL_OW 72
59003: PUSH
59004: FOR_IN
59005: IFFALSE 59045
// begin if not GetBWeapon ( i ) then
59007: LD_VAR 0 8
59011: PPUSH
59012: CALL_OW 269
59016: NOT
59017: IFFALSE 59043
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
59019: LD_VAR 0 8
59023: PPUSH
59024: LD_VAR 0 8
59028: PPUSH
59029: LD_VAR 0 2
59033: PPUSH
59034: CALL 60293 0 2
59038: PPUSH
59039: CALL_OW 431
// end ;
59043: GO 59004
59045: POP
59046: POP
// end ; for i = 1 to personel do
59047: LD_ADDR_VAR 0 8
59051: PUSH
59052: DOUBLE
59053: LD_INT 1
59055: DEC
59056: ST_TO_ADDR
59057: LD_VAR 0 6
59061: PUSH
59062: FOR_TO
59063: IFFALSE 60127
// begin if i > 4 then
59065: LD_VAR 0 8
59069: PUSH
59070: LD_INT 4
59072: GREATER
59073: IFFALSE 59077
// break ;
59075: GO 60127
// case i of 1 :
59077: LD_VAR 0 8
59081: PUSH
59082: LD_INT 1
59084: DOUBLE
59085: EQUAL
59086: IFTRUE 59090
59088: GO 59170
59090: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
59091: LD_ADDR_VAR 0 12
59095: PUSH
59096: LD_VAR 0 18
59100: PPUSH
59101: LD_INT 22
59103: PUSH
59104: LD_VAR 0 16
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 58
59115: PUSH
59116: EMPTY
59117: LIST
59118: PUSH
59119: LD_INT 2
59121: PUSH
59122: LD_INT 30
59124: PUSH
59125: LD_INT 32
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 30
59134: PUSH
59135: LD_INT 4
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 30
59144: PUSH
59145: LD_INT 5
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: LIST
59162: PPUSH
59163: CALL_OW 72
59167: ST_TO_ADDR
59168: GO 59392
59170: LD_INT 2
59172: DOUBLE
59173: EQUAL
59174: IFTRUE 59178
59176: GO 59240
59178: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
59179: LD_ADDR_VAR 0 12
59183: PUSH
59184: LD_VAR 0 18
59188: PPUSH
59189: LD_INT 22
59191: PUSH
59192: LD_VAR 0 16
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 2
59203: PUSH
59204: LD_INT 30
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 30
59216: PUSH
59217: LD_INT 1
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: LIST
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PPUSH
59233: CALL_OW 72
59237: ST_TO_ADDR
59238: GO 59392
59240: LD_INT 3
59242: DOUBLE
59243: EQUAL
59244: IFTRUE 59248
59246: GO 59310
59248: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
59249: LD_ADDR_VAR 0 12
59253: PUSH
59254: LD_VAR 0 18
59258: PPUSH
59259: LD_INT 22
59261: PUSH
59262: LD_VAR 0 16
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 2
59273: PUSH
59274: LD_INT 30
59276: PUSH
59277: LD_INT 2
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 30
59286: PUSH
59287: LD_INT 3
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: LIST
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PPUSH
59303: CALL_OW 72
59307: ST_TO_ADDR
59308: GO 59392
59310: LD_INT 4
59312: DOUBLE
59313: EQUAL
59314: IFTRUE 59318
59316: GO 59391
59318: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
59319: LD_ADDR_VAR 0 12
59323: PUSH
59324: LD_VAR 0 18
59328: PPUSH
59329: LD_INT 22
59331: PUSH
59332: LD_VAR 0 16
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 2
59343: PUSH
59344: LD_INT 30
59346: PUSH
59347: LD_INT 6
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 30
59356: PUSH
59357: LD_INT 7
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 30
59366: PUSH
59367: LD_INT 8
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PPUSH
59384: CALL_OW 72
59388: ST_TO_ADDR
59389: GO 59392
59391: POP
// if i = 1 then
59392: LD_VAR 0 8
59396: PUSH
59397: LD_INT 1
59399: EQUAL
59400: IFFALSE 59511
// begin tmp := [ ] ;
59402: LD_ADDR_VAR 0 19
59406: PUSH
59407: EMPTY
59408: ST_TO_ADDR
// for j in f do
59409: LD_ADDR_VAR 0 9
59413: PUSH
59414: LD_VAR 0 12
59418: PUSH
59419: FOR_IN
59420: IFFALSE 59493
// if GetBType ( j ) = b_bunker then
59422: LD_VAR 0 9
59426: PPUSH
59427: CALL_OW 266
59431: PUSH
59432: LD_INT 32
59434: EQUAL
59435: IFFALSE 59462
// tmp := Insert ( tmp , 1 , j ) else
59437: LD_ADDR_VAR 0 19
59441: PUSH
59442: LD_VAR 0 19
59446: PPUSH
59447: LD_INT 1
59449: PPUSH
59450: LD_VAR 0 9
59454: PPUSH
59455: CALL_OW 2
59459: ST_TO_ADDR
59460: GO 59491
// tmp := Insert ( tmp , tmp + 1 , j ) ;
59462: LD_ADDR_VAR 0 19
59466: PUSH
59467: LD_VAR 0 19
59471: PPUSH
59472: LD_VAR 0 19
59476: PUSH
59477: LD_INT 1
59479: PLUS
59480: PPUSH
59481: LD_VAR 0 9
59485: PPUSH
59486: CALL_OW 2
59490: ST_TO_ADDR
59491: GO 59419
59493: POP
59494: POP
// if tmp then
59495: LD_VAR 0 19
59499: IFFALSE 59511
// f := tmp ;
59501: LD_ADDR_VAR 0 12
59505: PUSH
59506: LD_VAR 0 19
59510: ST_TO_ADDR
// end ; x := personel [ i ] ;
59511: LD_ADDR_VAR 0 13
59515: PUSH
59516: LD_VAR 0 6
59520: PUSH
59521: LD_VAR 0 8
59525: ARRAY
59526: ST_TO_ADDR
// if x = - 1 then
59527: LD_VAR 0 13
59531: PUSH
59532: LD_INT 1
59534: NEG
59535: EQUAL
59536: IFFALSE 59745
// begin for j in f do
59538: LD_ADDR_VAR 0 9
59542: PUSH
59543: LD_VAR 0 12
59547: PUSH
59548: FOR_IN
59549: IFFALSE 59741
// repeat InitHc ;
59551: CALL_OW 19
// if GetBType ( j ) = b_barracks then
59555: LD_VAR 0 9
59559: PPUSH
59560: CALL_OW 266
59564: PUSH
59565: LD_INT 5
59567: EQUAL
59568: IFFALSE 59638
// begin if UnitsInside ( j ) < 3 then
59570: LD_VAR 0 9
59574: PPUSH
59575: CALL_OW 313
59579: PUSH
59580: LD_INT 3
59582: LESS
59583: IFFALSE 59619
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
59585: LD_INT 0
59587: PPUSH
59588: LD_INT 5
59590: PUSH
59591: LD_INT 8
59593: PUSH
59594: LD_INT 9
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: LIST
59601: PUSH
59602: LD_VAR 0 17
59606: ARRAY
59607: PPUSH
59608: LD_VAR 0 4
59612: PPUSH
59613: CALL_OW 380
59617: GO 59636
// PrepareHuman ( false , i , skill ) ;
59619: LD_INT 0
59621: PPUSH
59622: LD_VAR 0 8
59626: PPUSH
59627: LD_VAR 0 4
59631: PPUSH
59632: CALL_OW 380
// end else
59636: GO 59655
// PrepareHuman ( false , i , skill ) ;
59638: LD_INT 0
59640: PPUSH
59641: LD_VAR 0 8
59645: PPUSH
59646: LD_VAR 0 4
59650: PPUSH
59651: CALL_OW 380
// un := CreateHuman ;
59655: LD_ADDR_VAR 0 14
59659: PUSH
59660: CALL_OW 44
59664: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59665: LD_ADDR_VAR 0 7
59669: PUSH
59670: LD_VAR 0 7
59674: PPUSH
59675: LD_INT 1
59677: PPUSH
59678: LD_VAR 0 14
59682: PPUSH
59683: CALL_OW 2
59687: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
59688: LD_VAR 0 14
59692: PPUSH
59693: LD_VAR 0 9
59697: PPUSH
59698: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
59702: LD_VAR 0 9
59706: PPUSH
59707: CALL_OW 313
59711: PUSH
59712: LD_INT 6
59714: EQUAL
59715: PUSH
59716: LD_VAR 0 9
59720: PPUSH
59721: CALL_OW 266
59725: PUSH
59726: LD_INT 32
59728: PUSH
59729: LD_INT 31
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: IN
59736: OR
59737: IFFALSE 59551
59739: GO 59548
59741: POP
59742: POP
// end else
59743: GO 60125
// for j = 1 to x do
59745: LD_ADDR_VAR 0 9
59749: PUSH
59750: DOUBLE
59751: LD_INT 1
59753: DEC
59754: ST_TO_ADDR
59755: LD_VAR 0 13
59759: PUSH
59760: FOR_TO
59761: IFFALSE 60123
// begin InitHc ;
59763: CALL_OW 19
// if not f then
59767: LD_VAR 0 12
59771: NOT
59772: IFFALSE 59861
// begin PrepareHuman ( false , i , skill ) ;
59774: LD_INT 0
59776: PPUSH
59777: LD_VAR 0 8
59781: PPUSH
59782: LD_VAR 0 4
59786: PPUSH
59787: CALL_OW 380
// un := CreateHuman ;
59791: LD_ADDR_VAR 0 14
59795: PUSH
59796: CALL_OW 44
59800: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59801: LD_ADDR_VAR 0 7
59805: PUSH
59806: LD_VAR 0 7
59810: PPUSH
59811: LD_INT 1
59813: PPUSH
59814: LD_VAR 0 14
59818: PPUSH
59819: CALL_OW 2
59823: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
59824: LD_VAR 0 14
59828: PPUSH
59829: LD_VAR 0 1
59833: PPUSH
59834: CALL_OW 250
59838: PPUSH
59839: LD_VAR 0 1
59843: PPUSH
59844: CALL_OW 251
59848: PPUSH
59849: LD_INT 10
59851: PPUSH
59852: LD_INT 0
59854: PPUSH
59855: CALL_OW 50
// continue ;
59859: GO 59760
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
59861: LD_VAR 0 12
59865: PUSH
59866: LD_INT 1
59868: ARRAY
59869: PPUSH
59870: CALL_OW 313
59874: PUSH
59875: LD_VAR 0 12
59879: PUSH
59880: LD_INT 1
59882: ARRAY
59883: PPUSH
59884: CALL_OW 266
59888: PUSH
59889: LD_INT 32
59891: PUSH
59892: LD_INT 31
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: IN
59899: AND
59900: PUSH
59901: LD_VAR 0 12
59905: PUSH
59906: LD_INT 1
59908: ARRAY
59909: PPUSH
59910: CALL_OW 313
59914: PUSH
59915: LD_INT 6
59917: EQUAL
59918: OR
59919: IFFALSE 59939
// f := Delete ( f , 1 ) ;
59921: LD_ADDR_VAR 0 12
59925: PUSH
59926: LD_VAR 0 12
59930: PPUSH
59931: LD_INT 1
59933: PPUSH
59934: CALL_OW 3
59938: ST_TO_ADDR
// if not f then
59939: LD_VAR 0 12
59943: NOT
59944: IFFALSE 59962
// begin x := x + 2 ;
59946: LD_ADDR_VAR 0 13
59950: PUSH
59951: LD_VAR 0 13
59955: PUSH
59956: LD_INT 2
59958: PLUS
59959: ST_TO_ADDR
// continue ;
59960: GO 59760
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
59962: LD_VAR 0 12
59966: PUSH
59967: LD_INT 1
59969: ARRAY
59970: PPUSH
59971: CALL_OW 266
59975: PUSH
59976: LD_INT 5
59978: EQUAL
59979: IFFALSE 60053
// begin if UnitsInside ( f [ 1 ] ) < 3 then
59981: LD_VAR 0 12
59985: PUSH
59986: LD_INT 1
59988: ARRAY
59989: PPUSH
59990: CALL_OW 313
59994: PUSH
59995: LD_INT 3
59997: LESS
59998: IFFALSE 60034
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
60000: LD_INT 0
60002: PPUSH
60003: LD_INT 5
60005: PUSH
60006: LD_INT 8
60008: PUSH
60009: LD_INT 9
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: LIST
60016: PUSH
60017: LD_VAR 0 17
60021: ARRAY
60022: PPUSH
60023: LD_VAR 0 4
60027: PPUSH
60028: CALL_OW 380
60032: GO 60051
// PrepareHuman ( false , i , skill ) ;
60034: LD_INT 0
60036: PPUSH
60037: LD_VAR 0 8
60041: PPUSH
60042: LD_VAR 0 4
60046: PPUSH
60047: CALL_OW 380
// end else
60051: GO 60070
// PrepareHuman ( false , i , skill ) ;
60053: LD_INT 0
60055: PPUSH
60056: LD_VAR 0 8
60060: PPUSH
60061: LD_VAR 0 4
60065: PPUSH
60066: CALL_OW 380
// un := CreateHuman ;
60070: LD_ADDR_VAR 0 14
60074: PUSH
60075: CALL_OW 44
60079: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
60080: LD_ADDR_VAR 0 7
60084: PUSH
60085: LD_VAR 0 7
60089: PPUSH
60090: LD_INT 1
60092: PPUSH
60093: LD_VAR 0 14
60097: PPUSH
60098: CALL_OW 2
60102: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
60103: LD_VAR 0 14
60107: PPUSH
60108: LD_VAR 0 12
60112: PUSH
60113: LD_INT 1
60115: ARRAY
60116: PPUSH
60117: CALL_OW 52
// end ;
60121: GO 59760
60123: POP
60124: POP
// end ;
60125: GO 59062
60127: POP
60128: POP
// result := result ^ buildings ;
60129: LD_ADDR_VAR 0 7
60133: PUSH
60134: LD_VAR 0 7
60138: PUSH
60139: LD_VAR 0 18
60143: ADD
60144: ST_TO_ADDR
// end else
60145: GO 60288
// begin for i = 1 to personel do
60147: LD_ADDR_VAR 0 8
60151: PUSH
60152: DOUBLE
60153: LD_INT 1
60155: DEC
60156: ST_TO_ADDR
60157: LD_VAR 0 6
60161: PUSH
60162: FOR_TO
60163: IFFALSE 60286
// begin if i > 4 then
60165: LD_VAR 0 8
60169: PUSH
60170: LD_INT 4
60172: GREATER
60173: IFFALSE 60177
// break ;
60175: GO 60286
// x := personel [ i ] ;
60177: LD_ADDR_VAR 0 13
60181: PUSH
60182: LD_VAR 0 6
60186: PUSH
60187: LD_VAR 0 8
60191: ARRAY
60192: ST_TO_ADDR
// if x = - 1 then
60193: LD_VAR 0 13
60197: PUSH
60198: LD_INT 1
60200: NEG
60201: EQUAL
60202: IFFALSE 60206
// continue ;
60204: GO 60162
// PrepareHuman ( false , i , skill ) ;
60206: LD_INT 0
60208: PPUSH
60209: LD_VAR 0 8
60213: PPUSH
60214: LD_VAR 0 4
60218: PPUSH
60219: CALL_OW 380
// un := CreateHuman ;
60223: LD_ADDR_VAR 0 14
60227: PUSH
60228: CALL_OW 44
60232: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
60233: LD_VAR 0 14
60237: PPUSH
60238: LD_VAR 0 1
60242: PPUSH
60243: CALL_OW 250
60247: PPUSH
60248: LD_VAR 0 1
60252: PPUSH
60253: CALL_OW 251
60257: PPUSH
60258: LD_INT 10
60260: PPUSH
60261: LD_INT 0
60263: PPUSH
60264: CALL_OW 50
// result := result ^ un ;
60268: LD_ADDR_VAR 0 7
60272: PUSH
60273: LD_VAR 0 7
60277: PUSH
60278: LD_VAR 0 14
60282: ADD
60283: ST_TO_ADDR
// end ;
60284: GO 60162
60286: POP
60287: POP
// end ; end ;
60288: LD_VAR 0 7
60292: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
60293: LD_INT 0
60295: PPUSH
60296: PPUSH
60297: PPUSH
60298: PPUSH
60299: PPUSH
60300: PPUSH
60301: PPUSH
60302: PPUSH
60303: PPUSH
60304: PPUSH
60305: PPUSH
60306: PPUSH
60307: PPUSH
60308: PPUSH
60309: PPUSH
60310: PPUSH
// result := false ;
60311: LD_ADDR_VAR 0 3
60315: PUSH
60316: LD_INT 0
60318: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
60319: LD_VAR 0 1
60323: NOT
60324: PUSH
60325: LD_VAR 0 1
60329: PPUSH
60330: CALL_OW 266
60334: PUSH
60335: LD_INT 32
60337: PUSH
60338: LD_INT 33
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: IN
60345: NOT
60346: OR
60347: IFFALSE 60351
// exit ;
60349: GO 61460
// nat := GetNation ( tower ) ;
60351: LD_ADDR_VAR 0 12
60355: PUSH
60356: LD_VAR 0 1
60360: PPUSH
60361: CALL_OW 248
60365: ST_TO_ADDR
// side := GetSide ( tower ) ;
60366: LD_ADDR_VAR 0 16
60370: PUSH
60371: LD_VAR 0 1
60375: PPUSH
60376: CALL_OW 255
60380: ST_TO_ADDR
// x := GetX ( tower ) ;
60381: LD_ADDR_VAR 0 10
60385: PUSH
60386: LD_VAR 0 1
60390: PPUSH
60391: CALL_OW 250
60395: ST_TO_ADDR
// y := GetY ( tower ) ;
60396: LD_ADDR_VAR 0 11
60400: PUSH
60401: LD_VAR 0 1
60405: PPUSH
60406: CALL_OW 251
60410: ST_TO_ADDR
// if not x or not y then
60411: LD_VAR 0 10
60415: NOT
60416: PUSH
60417: LD_VAR 0 11
60421: NOT
60422: OR
60423: IFFALSE 60427
// exit ;
60425: GO 61460
// weapon := 0 ;
60427: LD_ADDR_VAR 0 18
60431: PUSH
60432: LD_INT 0
60434: ST_TO_ADDR
// fac_list := [ ] ;
60435: LD_ADDR_VAR 0 17
60439: PUSH
60440: EMPTY
60441: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
60442: LD_ADDR_VAR 0 6
60446: PUSH
60447: LD_VAR 0 1
60451: PPUSH
60452: CALL_OW 274
60456: PPUSH
60457: LD_VAR 0 2
60461: PPUSH
60462: LD_INT 0
60464: PPUSH
60465: CALL 58031 0 3
60469: PPUSH
60470: LD_INT 30
60472: PUSH
60473: LD_INT 3
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PPUSH
60480: CALL_OW 72
60484: ST_TO_ADDR
// if not factories then
60485: LD_VAR 0 6
60489: NOT
60490: IFFALSE 60494
// exit ;
60492: GO 61460
// for i in factories do
60494: LD_ADDR_VAR 0 8
60498: PUSH
60499: LD_VAR 0 6
60503: PUSH
60504: FOR_IN
60505: IFFALSE 60530
// fac_list := fac_list union AvailableWeaponList ( i ) ;
60507: LD_ADDR_VAR 0 17
60511: PUSH
60512: LD_VAR 0 17
60516: PUSH
60517: LD_VAR 0 8
60521: PPUSH
60522: CALL_OW 478
60526: UNION
60527: ST_TO_ADDR
60528: GO 60504
60530: POP
60531: POP
// if not fac_list then
60532: LD_VAR 0 17
60536: NOT
60537: IFFALSE 60541
// exit ;
60539: GO 61460
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
60541: LD_ADDR_VAR 0 5
60545: PUSH
60546: LD_INT 4
60548: PUSH
60549: LD_INT 5
60551: PUSH
60552: LD_INT 9
60554: PUSH
60555: LD_INT 10
60557: PUSH
60558: LD_INT 6
60560: PUSH
60561: LD_INT 7
60563: PUSH
60564: LD_INT 11
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 27
60578: PUSH
60579: LD_INT 28
60581: PUSH
60582: LD_INT 26
60584: PUSH
60585: LD_INT 30
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 43
60596: PUSH
60597: LD_INT 44
60599: PUSH
60600: LD_INT 46
60602: PUSH
60603: LD_INT 45
60605: PUSH
60606: LD_INT 47
60608: PUSH
60609: LD_INT 49
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: LIST
60624: PUSH
60625: LD_VAR 0 12
60629: ARRAY
60630: ST_TO_ADDR
// list := list isect fac_list ;
60631: LD_ADDR_VAR 0 5
60635: PUSH
60636: LD_VAR 0 5
60640: PUSH
60641: LD_VAR 0 17
60645: ISECT
60646: ST_TO_ADDR
// if not list then
60647: LD_VAR 0 5
60651: NOT
60652: IFFALSE 60656
// exit ;
60654: GO 61460
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
60656: LD_VAR 0 12
60660: PUSH
60661: LD_INT 3
60663: EQUAL
60664: PUSH
60665: LD_INT 49
60667: PUSH
60668: LD_VAR 0 5
60672: IN
60673: AND
60674: PUSH
60675: LD_INT 31
60677: PPUSH
60678: LD_VAR 0 16
60682: PPUSH
60683: CALL_OW 321
60687: PUSH
60688: LD_INT 2
60690: EQUAL
60691: AND
60692: IFFALSE 60752
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
60694: LD_INT 22
60696: PUSH
60697: LD_VAR 0 16
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 35
60708: PUSH
60709: LD_INT 49
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 91
60718: PUSH
60719: LD_VAR 0 1
60723: PUSH
60724: LD_INT 10
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: LIST
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: LIST
60736: PPUSH
60737: CALL_OW 69
60741: NOT
60742: IFFALSE 60752
// weapon := ru_time_lapser ;
60744: LD_ADDR_VAR 0 18
60748: PUSH
60749: LD_INT 49
60751: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
60752: LD_VAR 0 12
60756: PUSH
60757: LD_INT 1
60759: PUSH
60760: LD_INT 2
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: IN
60767: PUSH
60768: LD_INT 11
60770: PUSH
60771: LD_VAR 0 5
60775: IN
60776: PUSH
60777: LD_INT 30
60779: PUSH
60780: LD_VAR 0 5
60784: IN
60785: OR
60786: AND
60787: PUSH
60788: LD_INT 6
60790: PPUSH
60791: LD_VAR 0 16
60795: PPUSH
60796: CALL_OW 321
60800: PUSH
60801: LD_INT 2
60803: EQUAL
60804: AND
60805: IFFALSE 60970
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
60807: LD_INT 22
60809: PUSH
60810: LD_VAR 0 16
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 2
60821: PUSH
60822: LD_INT 35
60824: PUSH
60825: LD_INT 11
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 35
60834: PUSH
60835: LD_INT 30
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 91
60849: PUSH
60850: LD_VAR 0 1
60854: PUSH
60855: LD_INT 18
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: LIST
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: LIST
60867: PPUSH
60868: CALL_OW 69
60872: NOT
60873: PUSH
60874: LD_INT 22
60876: PUSH
60877: LD_VAR 0 16
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 2
60888: PUSH
60889: LD_INT 30
60891: PUSH
60892: LD_INT 32
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 30
60901: PUSH
60902: LD_INT 33
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 91
60916: PUSH
60917: LD_VAR 0 1
60921: PUSH
60922: LD_INT 12
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: LIST
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: LIST
60934: PUSH
60935: EMPTY
60936: LIST
60937: PPUSH
60938: CALL_OW 69
60942: PUSH
60943: LD_INT 2
60945: GREATER
60946: AND
60947: IFFALSE 60970
// weapon := [ us_radar , ar_radar ] [ nat ] ;
60949: LD_ADDR_VAR 0 18
60953: PUSH
60954: LD_INT 11
60956: PUSH
60957: LD_INT 30
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_VAR 0 12
60968: ARRAY
60969: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
60970: LD_VAR 0 18
60974: NOT
60975: PUSH
60976: LD_INT 40
60978: PPUSH
60979: LD_VAR 0 16
60983: PPUSH
60984: CALL_OW 321
60988: PUSH
60989: LD_INT 2
60991: EQUAL
60992: AND
60993: PUSH
60994: LD_INT 7
60996: PUSH
60997: LD_VAR 0 5
61001: IN
61002: PUSH
61003: LD_INT 28
61005: PUSH
61006: LD_VAR 0 5
61010: IN
61011: OR
61012: PUSH
61013: LD_INT 45
61015: PUSH
61016: LD_VAR 0 5
61020: IN
61021: OR
61022: AND
61023: IFFALSE 61277
// begin hex := GetHexInfo ( x , y ) ;
61025: LD_ADDR_VAR 0 4
61029: PUSH
61030: LD_VAR 0 10
61034: PPUSH
61035: LD_VAR 0 11
61039: PPUSH
61040: CALL_OW 546
61044: ST_TO_ADDR
// if hex [ 1 ] then
61045: LD_VAR 0 4
61049: PUSH
61050: LD_INT 1
61052: ARRAY
61053: IFFALSE 61057
// exit ;
61055: GO 61460
// height := hex [ 2 ] ;
61057: LD_ADDR_VAR 0 15
61061: PUSH
61062: LD_VAR 0 4
61066: PUSH
61067: LD_INT 2
61069: ARRAY
61070: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
61071: LD_ADDR_VAR 0 14
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: LD_INT 2
61081: PUSH
61082: LD_INT 3
61084: PUSH
61085: LD_INT 5
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: ST_TO_ADDR
// for i in tmp do
61094: LD_ADDR_VAR 0 8
61098: PUSH
61099: LD_VAR 0 14
61103: PUSH
61104: FOR_IN
61105: IFFALSE 61275
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
61107: LD_ADDR_VAR 0 9
61111: PUSH
61112: LD_VAR 0 10
61116: PPUSH
61117: LD_VAR 0 8
61121: PPUSH
61122: LD_INT 5
61124: PPUSH
61125: CALL_OW 272
61129: PUSH
61130: LD_VAR 0 11
61134: PPUSH
61135: LD_VAR 0 8
61139: PPUSH
61140: LD_INT 5
61142: PPUSH
61143: CALL_OW 273
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
61152: LD_VAR 0 9
61156: PUSH
61157: LD_INT 1
61159: ARRAY
61160: PPUSH
61161: LD_VAR 0 9
61165: PUSH
61166: LD_INT 2
61168: ARRAY
61169: PPUSH
61170: CALL_OW 488
61174: IFFALSE 61273
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
61176: LD_ADDR_VAR 0 4
61180: PUSH
61181: LD_VAR 0 9
61185: PUSH
61186: LD_INT 1
61188: ARRAY
61189: PPUSH
61190: LD_VAR 0 9
61194: PUSH
61195: LD_INT 2
61197: ARRAY
61198: PPUSH
61199: CALL_OW 546
61203: ST_TO_ADDR
// if hex [ 1 ] then
61204: LD_VAR 0 4
61208: PUSH
61209: LD_INT 1
61211: ARRAY
61212: IFFALSE 61216
// continue ;
61214: GO 61104
// h := hex [ 2 ] ;
61216: LD_ADDR_VAR 0 13
61220: PUSH
61221: LD_VAR 0 4
61225: PUSH
61226: LD_INT 2
61228: ARRAY
61229: ST_TO_ADDR
// if h + 7 < height then
61230: LD_VAR 0 13
61234: PUSH
61235: LD_INT 7
61237: PLUS
61238: PUSH
61239: LD_VAR 0 15
61243: LESS
61244: IFFALSE 61273
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
61246: LD_ADDR_VAR 0 18
61250: PUSH
61251: LD_INT 7
61253: PUSH
61254: LD_INT 28
61256: PUSH
61257: LD_INT 45
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: LIST
61264: PUSH
61265: LD_VAR 0 12
61269: ARRAY
61270: ST_TO_ADDR
// break ;
61271: GO 61275
// end ; end ; end ;
61273: GO 61104
61275: POP
61276: POP
// end ; if not weapon then
61277: LD_VAR 0 18
61281: NOT
61282: IFFALSE 61342
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
61284: LD_ADDR_VAR 0 5
61288: PUSH
61289: LD_VAR 0 5
61293: PUSH
61294: LD_INT 11
61296: PUSH
61297: LD_INT 30
61299: PUSH
61300: LD_INT 49
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: LIST
61307: DIFF
61308: ST_TO_ADDR
// if not list then
61309: LD_VAR 0 5
61313: NOT
61314: IFFALSE 61318
// exit ;
61316: GO 61460
// weapon := list [ rand ( 1 , list ) ] ;
61318: LD_ADDR_VAR 0 18
61322: PUSH
61323: LD_VAR 0 5
61327: PUSH
61328: LD_INT 1
61330: PPUSH
61331: LD_VAR 0 5
61335: PPUSH
61336: CALL_OW 12
61340: ARRAY
61341: ST_TO_ADDR
// end ; if weapon then
61342: LD_VAR 0 18
61346: IFFALSE 61460
// begin tmp := CostOfWeapon ( weapon ) ;
61348: LD_ADDR_VAR 0 14
61352: PUSH
61353: LD_VAR 0 18
61357: PPUSH
61358: CALL_OW 451
61362: ST_TO_ADDR
// j := GetBase ( tower ) ;
61363: LD_ADDR_VAR 0 9
61367: PUSH
61368: LD_VAR 0 1
61372: PPUSH
61373: CALL_OW 274
61377: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
61378: LD_VAR 0 9
61382: PPUSH
61383: LD_INT 1
61385: PPUSH
61386: CALL_OW 275
61390: PUSH
61391: LD_VAR 0 14
61395: PUSH
61396: LD_INT 1
61398: ARRAY
61399: GREATEREQUAL
61400: PUSH
61401: LD_VAR 0 9
61405: PPUSH
61406: LD_INT 2
61408: PPUSH
61409: CALL_OW 275
61413: PUSH
61414: LD_VAR 0 14
61418: PUSH
61419: LD_INT 2
61421: ARRAY
61422: GREATEREQUAL
61423: AND
61424: PUSH
61425: LD_VAR 0 9
61429: PPUSH
61430: LD_INT 3
61432: PPUSH
61433: CALL_OW 275
61437: PUSH
61438: LD_VAR 0 14
61442: PUSH
61443: LD_INT 3
61445: ARRAY
61446: GREATEREQUAL
61447: AND
61448: IFFALSE 61460
// result := weapon ;
61450: LD_ADDR_VAR 0 3
61454: PUSH
61455: LD_VAR 0 18
61459: ST_TO_ADDR
// end ; end ;
61460: LD_VAR 0 3
61464: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
61465: LD_INT 0
61467: PPUSH
61468: PPUSH
// result := true ;
61469: LD_ADDR_VAR 0 3
61473: PUSH
61474: LD_INT 1
61476: ST_TO_ADDR
// if array1 = array2 then
61477: LD_VAR 0 1
61481: PUSH
61482: LD_VAR 0 2
61486: EQUAL
61487: IFFALSE 61547
// begin for i = 1 to array1 do
61489: LD_ADDR_VAR 0 4
61493: PUSH
61494: DOUBLE
61495: LD_INT 1
61497: DEC
61498: ST_TO_ADDR
61499: LD_VAR 0 1
61503: PUSH
61504: FOR_TO
61505: IFFALSE 61543
// if array1 [ i ] <> array2 [ i ] then
61507: LD_VAR 0 1
61511: PUSH
61512: LD_VAR 0 4
61516: ARRAY
61517: PUSH
61518: LD_VAR 0 2
61522: PUSH
61523: LD_VAR 0 4
61527: ARRAY
61528: NONEQUAL
61529: IFFALSE 61541
// begin result := false ;
61531: LD_ADDR_VAR 0 3
61535: PUSH
61536: LD_INT 0
61538: ST_TO_ADDR
// break ;
61539: GO 61543
// end ;
61541: GO 61504
61543: POP
61544: POP
// end else
61545: GO 61555
// result := false ;
61547: LD_ADDR_VAR 0 3
61551: PUSH
61552: LD_INT 0
61554: ST_TO_ADDR
// end ;
61555: LD_VAR 0 3
61559: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
61560: LD_INT 0
61562: PPUSH
61563: PPUSH
// if not array1 or not array2 then
61564: LD_VAR 0 1
61568: NOT
61569: PUSH
61570: LD_VAR 0 2
61574: NOT
61575: OR
61576: IFFALSE 61580
// exit ;
61578: GO 61644
// result := true ;
61580: LD_ADDR_VAR 0 3
61584: PUSH
61585: LD_INT 1
61587: ST_TO_ADDR
// for i = 1 to array1 do
61588: LD_ADDR_VAR 0 4
61592: PUSH
61593: DOUBLE
61594: LD_INT 1
61596: DEC
61597: ST_TO_ADDR
61598: LD_VAR 0 1
61602: PUSH
61603: FOR_TO
61604: IFFALSE 61642
// if array1 [ i ] <> array2 [ i ] then
61606: LD_VAR 0 1
61610: PUSH
61611: LD_VAR 0 4
61615: ARRAY
61616: PUSH
61617: LD_VAR 0 2
61621: PUSH
61622: LD_VAR 0 4
61626: ARRAY
61627: NONEQUAL
61628: IFFALSE 61640
// begin result := false ;
61630: LD_ADDR_VAR 0 3
61634: PUSH
61635: LD_INT 0
61637: ST_TO_ADDR
// break ;
61638: GO 61642
// end ;
61640: GO 61603
61642: POP
61643: POP
// end ;
61644: LD_VAR 0 3
61648: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
61649: LD_INT 0
61651: PPUSH
61652: PPUSH
61653: PPUSH
// pom := GetBase ( fac ) ;
61654: LD_ADDR_VAR 0 5
61658: PUSH
61659: LD_VAR 0 1
61663: PPUSH
61664: CALL_OW 274
61668: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
61669: LD_ADDR_VAR 0 4
61673: PUSH
61674: LD_VAR 0 2
61678: PUSH
61679: LD_INT 1
61681: ARRAY
61682: PPUSH
61683: LD_VAR 0 2
61687: PUSH
61688: LD_INT 2
61690: ARRAY
61691: PPUSH
61692: LD_VAR 0 2
61696: PUSH
61697: LD_INT 3
61699: ARRAY
61700: PPUSH
61701: LD_VAR 0 2
61705: PUSH
61706: LD_INT 4
61708: ARRAY
61709: PPUSH
61710: CALL_OW 449
61714: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61715: LD_ADDR_VAR 0 3
61719: PUSH
61720: LD_VAR 0 5
61724: PPUSH
61725: LD_INT 1
61727: PPUSH
61728: CALL_OW 275
61732: PUSH
61733: LD_VAR 0 4
61737: PUSH
61738: LD_INT 1
61740: ARRAY
61741: GREATEREQUAL
61742: PUSH
61743: LD_VAR 0 5
61747: PPUSH
61748: LD_INT 2
61750: PPUSH
61751: CALL_OW 275
61755: PUSH
61756: LD_VAR 0 4
61760: PUSH
61761: LD_INT 2
61763: ARRAY
61764: GREATEREQUAL
61765: AND
61766: PUSH
61767: LD_VAR 0 5
61771: PPUSH
61772: LD_INT 3
61774: PPUSH
61775: CALL_OW 275
61779: PUSH
61780: LD_VAR 0 4
61784: PUSH
61785: LD_INT 3
61787: ARRAY
61788: GREATEREQUAL
61789: AND
61790: ST_TO_ADDR
// end ;
61791: LD_VAR 0 3
61795: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
61796: LD_INT 0
61798: PPUSH
61799: PPUSH
61800: PPUSH
61801: PPUSH
// pom := GetBase ( building ) ;
61802: LD_ADDR_VAR 0 3
61806: PUSH
61807: LD_VAR 0 1
61811: PPUSH
61812: CALL_OW 274
61816: ST_TO_ADDR
// if not pom then
61817: LD_VAR 0 3
61821: NOT
61822: IFFALSE 61826
// exit ;
61824: GO 61996
// btype := GetBType ( building ) ;
61826: LD_ADDR_VAR 0 5
61830: PUSH
61831: LD_VAR 0 1
61835: PPUSH
61836: CALL_OW 266
61840: ST_TO_ADDR
// if btype = b_armoury then
61841: LD_VAR 0 5
61845: PUSH
61846: LD_INT 4
61848: EQUAL
61849: IFFALSE 61859
// btype := b_barracks ;
61851: LD_ADDR_VAR 0 5
61855: PUSH
61856: LD_INT 5
61858: ST_TO_ADDR
// if btype = b_depot then
61859: LD_VAR 0 5
61863: PUSH
61864: LD_INT 0
61866: EQUAL
61867: IFFALSE 61877
// btype := b_warehouse ;
61869: LD_ADDR_VAR 0 5
61873: PUSH
61874: LD_INT 1
61876: ST_TO_ADDR
// if btype = b_workshop then
61877: LD_VAR 0 5
61881: PUSH
61882: LD_INT 2
61884: EQUAL
61885: IFFALSE 61895
// btype := b_factory ;
61887: LD_ADDR_VAR 0 5
61891: PUSH
61892: LD_INT 3
61894: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
61895: LD_ADDR_VAR 0 4
61899: PUSH
61900: LD_VAR 0 5
61904: PPUSH
61905: LD_VAR 0 1
61909: PPUSH
61910: CALL_OW 248
61914: PPUSH
61915: CALL_OW 450
61919: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61920: LD_ADDR_VAR 0 2
61924: PUSH
61925: LD_VAR 0 3
61929: PPUSH
61930: LD_INT 1
61932: PPUSH
61933: CALL_OW 275
61937: PUSH
61938: LD_VAR 0 4
61942: PUSH
61943: LD_INT 1
61945: ARRAY
61946: GREATEREQUAL
61947: PUSH
61948: LD_VAR 0 3
61952: PPUSH
61953: LD_INT 2
61955: PPUSH
61956: CALL_OW 275
61960: PUSH
61961: LD_VAR 0 4
61965: PUSH
61966: LD_INT 2
61968: ARRAY
61969: GREATEREQUAL
61970: AND
61971: PUSH
61972: LD_VAR 0 3
61976: PPUSH
61977: LD_INT 3
61979: PPUSH
61980: CALL_OW 275
61984: PUSH
61985: LD_VAR 0 4
61989: PUSH
61990: LD_INT 3
61992: ARRAY
61993: GREATEREQUAL
61994: AND
61995: ST_TO_ADDR
// end ;
61996: LD_VAR 0 2
62000: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
62001: LD_INT 0
62003: PPUSH
62004: PPUSH
62005: PPUSH
// pom := GetBase ( building ) ;
62006: LD_ADDR_VAR 0 4
62010: PUSH
62011: LD_VAR 0 1
62015: PPUSH
62016: CALL_OW 274
62020: ST_TO_ADDR
// if not pom then
62021: LD_VAR 0 4
62025: NOT
62026: IFFALSE 62030
// exit ;
62028: GO 62131
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
62030: LD_ADDR_VAR 0 5
62034: PUSH
62035: LD_VAR 0 2
62039: PPUSH
62040: LD_VAR 0 1
62044: PPUSH
62045: CALL_OW 248
62049: PPUSH
62050: CALL_OW 450
62054: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
62055: LD_ADDR_VAR 0 3
62059: PUSH
62060: LD_VAR 0 4
62064: PPUSH
62065: LD_INT 1
62067: PPUSH
62068: CALL_OW 275
62072: PUSH
62073: LD_VAR 0 5
62077: PUSH
62078: LD_INT 1
62080: ARRAY
62081: GREATEREQUAL
62082: PUSH
62083: LD_VAR 0 4
62087: PPUSH
62088: LD_INT 2
62090: PPUSH
62091: CALL_OW 275
62095: PUSH
62096: LD_VAR 0 5
62100: PUSH
62101: LD_INT 2
62103: ARRAY
62104: GREATEREQUAL
62105: AND
62106: PUSH
62107: LD_VAR 0 4
62111: PPUSH
62112: LD_INT 3
62114: PPUSH
62115: CALL_OW 275
62119: PUSH
62120: LD_VAR 0 5
62124: PUSH
62125: LD_INT 3
62127: ARRAY
62128: GREATEREQUAL
62129: AND
62130: ST_TO_ADDR
// end ;
62131: LD_VAR 0 3
62135: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
62136: LD_INT 0
62138: PPUSH
62139: PPUSH
62140: PPUSH
62141: PPUSH
62142: PPUSH
62143: PPUSH
62144: PPUSH
62145: PPUSH
62146: PPUSH
62147: PPUSH
62148: PPUSH
// result := false ;
62149: LD_ADDR_VAR 0 8
62153: PUSH
62154: LD_INT 0
62156: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
62157: LD_VAR 0 5
62161: NOT
62162: PUSH
62163: LD_VAR 0 1
62167: NOT
62168: OR
62169: PUSH
62170: LD_VAR 0 2
62174: NOT
62175: OR
62176: PUSH
62177: LD_VAR 0 3
62181: NOT
62182: OR
62183: IFFALSE 62187
// exit ;
62185: GO 63001
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
62187: LD_ADDR_VAR 0 14
62191: PUSH
62192: LD_VAR 0 1
62196: PPUSH
62197: LD_VAR 0 2
62201: PPUSH
62202: LD_VAR 0 3
62206: PPUSH
62207: LD_VAR 0 4
62211: PPUSH
62212: LD_VAR 0 5
62216: PUSH
62217: LD_INT 1
62219: ARRAY
62220: PPUSH
62221: CALL_OW 248
62225: PPUSH
62226: LD_INT 0
62228: PPUSH
62229: CALL 64234 0 6
62233: ST_TO_ADDR
// if not hexes then
62234: LD_VAR 0 14
62238: NOT
62239: IFFALSE 62243
// exit ;
62241: GO 63001
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62243: LD_ADDR_VAR 0 17
62247: PUSH
62248: LD_VAR 0 5
62252: PPUSH
62253: LD_INT 22
62255: PUSH
62256: LD_VAR 0 13
62260: PPUSH
62261: CALL_OW 255
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 2
62272: PUSH
62273: LD_INT 30
62275: PUSH
62276: LD_INT 0
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 30
62285: PUSH
62286: LD_INT 1
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: LIST
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PPUSH
62302: CALL_OW 72
62306: ST_TO_ADDR
// for i = 1 to hexes do
62307: LD_ADDR_VAR 0 9
62311: PUSH
62312: DOUBLE
62313: LD_INT 1
62315: DEC
62316: ST_TO_ADDR
62317: LD_VAR 0 14
62321: PUSH
62322: FOR_TO
62323: IFFALSE 62999
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62325: LD_ADDR_VAR 0 13
62329: PUSH
62330: LD_VAR 0 14
62334: PUSH
62335: LD_VAR 0 9
62339: ARRAY
62340: PUSH
62341: LD_INT 1
62343: ARRAY
62344: PPUSH
62345: LD_VAR 0 14
62349: PUSH
62350: LD_VAR 0 9
62354: ARRAY
62355: PUSH
62356: LD_INT 2
62358: ARRAY
62359: PPUSH
62360: CALL_OW 428
62364: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
62365: LD_VAR 0 14
62369: PUSH
62370: LD_VAR 0 9
62374: ARRAY
62375: PUSH
62376: LD_INT 1
62378: ARRAY
62379: PPUSH
62380: LD_VAR 0 14
62384: PUSH
62385: LD_VAR 0 9
62389: ARRAY
62390: PUSH
62391: LD_INT 2
62393: ARRAY
62394: PPUSH
62395: CALL_OW 351
62399: PUSH
62400: LD_VAR 0 14
62404: PUSH
62405: LD_VAR 0 9
62409: ARRAY
62410: PUSH
62411: LD_INT 1
62413: ARRAY
62414: PPUSH
62415: LD_VAR 0 14
62419: PUSH
62420: LD_VAR 0 9
62424: ARRAY
62425: PUSH
62426: LD_INT 2
62428: ARRAY
62429: PPUSH
62430: CALL_OW 488
62434: NOT
62435: OR
62436: PUSH
62437: LD_VAR 0 13
62441: PPUSH
62442: CALL_OW 247
62446: PUSH
62447: LD_INT 3
62449: EQUAL
62450: OR
62451: IFFALSE 62457
// exit ;
62453: POP
62454: POP
62455: GO 63001
// if not tmp then
62457: LD_VAR 0 13
62461: NOT
62462: IFFALSE 62466
// continue ;
62464: GO 62322
// result := true ;
62466: LD_ADDR_VAR 0 8
62470: PUSH
62471: LD_INT 1
62473: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
62474: LD_VAR 0 6
62478: PUSH
62479: LD_VAR 0 13
62483: PPUSH
62484: CALL_OW 247
62488: PUSH
62489: LD_INT 2
62491: EQUAL
62492: AND
62493: PUSH
62494: LD_VAR 0 13
62498: PPUSH
62499: CALL_OW 263
62503: PUSH
62504: LD_INT 1
62506: EQUAL
62507: AND
62508: IFFALSE 62672
// begin if IsDrivenBy ( tmp ) then
62510: LD_VAR 0 13
62514: PPUSH
62515: CALL_OW 311
62519: IFFALSE 62523
// continue ;
62521: GO 62322
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
62523: LD_VAR 0 6
62527: PPUSH
62528: LD_INT 3
62530: PUSH
62531: LD_INT 60
62533: PUSH
62534: EMPTY
62535: LIST
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 3
62543: PUSH
62544: LD_INT 55
62546: PUSH
62547: EMPTY
62548: LIST
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PPUSH
62558: CALL_OW 72
62562: IFFALSE 62670
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
62564: LD_ADDR_VAR 0 18
62568: PUSH
62569: LD_VAR 0 6
62573: PPUSH
62574: LD_INT 3
62576: PUSH
62577: LD_INT 60
62579: PUSH
62580: EMPTY
62581: LIST
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 3
62589: PUSH
62590: LD_INT 55
62592: PUSH
62593: EMPTY
62594: LIST
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PPUSH
62604: CALL_OW 72
62608: PUSH
62609: LD_INT 1
62611: ARRAY
62612: ST_TO_ADDR
// if IsInUnit ( driver ) then
62613: LD_VAR 0 18
62617: PPUSH
62618: CALL_OW 310
62622: IFFALSE 62633
// ComExit ( driver ) ;
62624: LD_VAR 0 18
62628: PPUSH
62629: CALL 87995 0 1
// AddComEnterUnit ( driver , tmp ) ;
62633: LD_VAR 0 18
62637: PPUSH
62638: LD_VAR 0 13
62642: PPUSH
62643: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
62647: LD_VAR 0 18
62651: PPUSH
62652: LD_VAR 0 7
62656: PPUSH
62657: CALL_OW 173
// AddComExitVehicle ( driver ) ;
62661: LD_VAR 0 18
62665: PPUSH
62666: CALL_OW 181
// end ; continue ;
62670: GO 62322
// end ; if not cleaners or not tmp in cleaners then
62672: LD_VAR 0 6
62676: NOT
62677: PUSH
62678: LD_VAR 0 13
62682: PUSH
62683: LD_VAR 0 6
62687: IN
62688: NOT
62689: OR
62690: IFFALSE 62997
// begin if dep then
62692: LD_VAR 0 17
62696: IFFALSE 62832
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
62698: LD_ADDR_VAR 0 16
62702: PUSH
62703: LD_VAR 0 17
62707: PUSH
62708: LD_INT 1
62710: ARRAY
62711: PPUSH
62712: CALL_OW 250
62716: PPUSH
62717: LD_VAR 0 17
62721: PUSH
62722: LD_INT 1
62724: ARRAY
62725: PPUSH
62726: CALL_OW 254
62730: PPUSH
62731: LD_INT 5
62733: PPUSH
62734: CALL_OW 272
62738: PUSH
62739: LD_VAR 0 17
62743: PUSH
62744: LD_INT 1
62746: ARRAY
62747: PPUSH
62748: CALL_OW 251
62752: PPUSH
62753: LD_VAR 0 17
62757: PUSH
62758: LD_INT 1
62760: ARRAY
62761: PPUSH
62762: CALL_OW 254
62766: PPUSH
62767: LD_INT 5
62769: PPUSH
62770: CALL_OW 273
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
62779: LD_VAR 0 16
62783: PUSH
62784: LD_INT 1
62786: ARRAY
62787: PPUSH
62788: LD_VAR 0 16
62792: PUSH
62793: LD_INT 2
62795: ARRAY
62796: PPUSH
62797: CALL_OW 488
62801: IFFALSE 62832
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
62803: LD_VAR 0 13
62807: PPUSH
62808: LD_VAR 0 16
62812: PUSH
62813: LD_INT 1
62815: ARRAY
62816: PPUSH
62817: LD_VAR 0 16
62821: PUSH
62822: LD_INT 2
62824: ARRAY
62825: PPUSH
62826: CALL_OW 111
// continue ;
62830: GO 62322
// end ; end ; r := GetDir ( tmp ) ;
62832: LD_ADDR_VAR 0 15
62836: PUSH
62837: LD_VAR 0 13
62841: PPUSH
62842: CALL_OW 254
62846: ST_TO_ADDR
// if r = 5 then
62847: LD_VAR 0 15
62851: PUSH
62852: LD_INT 5
62854: EQUAL
62855: IFFALSE 62865
// r := 0 ;
62857: LD_ADDR_VAR 0 15
62861: PUSH
62862: LD_INT 0
62864: ST_TO_ADDR
// for j = r to 5 do
62865: LD_ADDR_VAR 0 10
62869: PUSH
62870: DOUBLE
62871: LD_VAR 0 15
62875: DEC
62876: ST_TO_ADDR
62877: LD_INT 5
62879: PUSH
62880: FOR_TO
62881: IFFALSE 62995
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
62883: LD_ADDR_VAR 0 11
62887: PUSH
62888: LD_VAR 0 13
62892: PPUSH
62893: CALL_OW 250
62897: PPUSH
62898: LD_VAR 0 10
62902: PPUSH
62903: LD_INT 2
62905: PPUSH
62906: CALL_OW 272
62910: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
62911: LD_ADDR_VAR 0 12
62915: PUSH
62916: LD_VAR 0 13
62920: PPUSH
62921: CALL_OW 251
62925: PPUSH
62926: LD_VAR 0 10
62930: PPUSH
62931: LD_INT 2
62933: PPUSH
62934: CALL_OW 273
62938: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
62939: LD_VAR 0 11
62943: PPUSH
62944: LD_VAR 0 12
62948: PPUSH
62949: CALL_OW 488
62953: PUSH
62954: LD_VAR 0 11
62958: PPUSH
62959: LD_VAR 0 12
62963: PPUSH
62964: CALL_OW 428
62968: NOT
62969: AND
62970: IFFALSE 62993
// begin ComMoveXY ( tmp , _x , _y ) ;
62972: LD_VAR 0 13
62976: PPUSH
62977: LD_VAR 0 11
62981: PPUSH
62982: LD_VAR 0 12
62986: PPUSH
62987: CALL_OW 111
// break ;
62991: GO 62995
// end ; end ;
62993: GO 62880
62995: POP
62996: POP
// end ; end ;
62997: GO 62322
62999: POP
63000: POP
// end ;
63001: LD_VAR 0 8
63005: RET
// export function BuildingTechInvented ( side , btype ) ; begin
63006: LD_INT 0
63008: PPUSH
// result := true ;
63009: LD_ADDR_VAR 0 3
63013: PUSH
63014: LD_INT 1
63016: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
63017: LD_VAR 0 2
63021: PUSH
63022: LD_INT 24
63024: DOUBLE
63025: EQUAL
63026: IFTRUE 63036
63028: LD_INT 33
63030: DOUBLE
63031: EQUAL
63032: IFTRUE 63036
63034: GO 63061
63036: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
63037: LD_ADDR_VAR 0 3
63041: PUSH
63042: LD_INT 32
63044: PPUSH
63045: LD_VAR 0 1
63049: PPUSH
63050: CALL_OW 321
63054: PUSH
63055: LD_INT 2
63057: EQUAL
63058: ST_TO_ADDR
63059: GO 63377
63061: LD_INT 20
63063: DOUBLE
63064: EQUAL
63065: IFTRUE 63069
63067: GO 63094
63069: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
63070: LD_ADDR_VAR 0 3
63074: PUSH
63075: LD_INT 6
63077: PPUSH
63078: LD_VAR 0 1
63082: PPUSH
63083: CALL_OW 321
63087: PUSH
63088: LD_INT 2
63090: EQUAL
63091: ST_TO_ADDR
63092: GO 63377
63094: LD_INT 22
63096: DOUBLE
63097: EQUAL
63098: IFTRUE 63108
63100: LD_INT 36
63102: DOUBLE
63103: EQUAL
63104: IFTRUE 63108
63106: GO 63133
63108: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
63109: LD_ADDR_VAR 0 3
63113: PUSH
63114: LD_INT 15
63116: PPUSH
63117: LD_VAR 0 1
63121: PPUSH
63122: CALL_OW 321
63126: PUSH
63127: LD_INT 2
63129: EQUAL
63130: ST_TO_ADDR
63131: GO 63377
63133: LD_INT 30
63135: DOUBLE
63136: EQUAL
63137: IFTRUE 63141
63139: GO 63166
63141: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
63142: LD_ADDR_VAR 0 3
63146: PUSH
63147: LD_INT 20
63149: PPUSH
63150: LD_VAR 0 1
63154: PPUSH
63155: CALL_OW 321
63159: PUSH
63160: LD_INT 2
63162: EQUAL
63163: ST_TO_ADDR
63164: GO 63377
63166: LD_INT 28
63168: DOUBLE
63169: EQUAL
63170: IFTRUE 63180
63172: LD_INT 21
63174: DOUBLE
63175: EQUAL
63176: IFTRUE 63180
63178: GO 63205
63180: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
63181: LD_ADDR_VAR 0 3
63185: PUSH
63186: LD_INT 21
63188: PPUSH
63189: LD_VAR 0 1
63193: PPUSH
63194: CALL_OW 321
63198: PUSH
63199: LD_INT 2
63201: EQUAL
63202: ST_TO_ADDR
63203: GO 63377
63205: LD_INT 16
63207: DOUBLE
63208: EQUAL
63209: IFTRUE 63213
63211: GO 63238
63213: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
63214: LD_ADDR_VAR 0 3
63218: PUSH
63219: LD_INT 84
63221: PPUSH
63222: LD_VAR 0 1
63226: PPUSH
63227: CALL_OW 321
63231: PUSH
63232: LD_INT 2
63234: EQUAL
63235: ST_TO_ADDR
63236: GO 63377
63238: LD_INT 19
63240: DOUBLE
63241: EQUAL
63242: IFTRUE 63252
63244: LD_INT 23
63246: DOUBLE
63247: EQUAL
63248: IFTRUE 63252
63250: GO 63277
63252: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
63253: LD_ADDR_VAR 0 3
63257: PUSH
63258: LD_INT 83
63260: PPUSH
63261: LD_VAR 0 1
63265: PPUSH
63266: CALL_OW 321
63270: PUSH
63271: LD_INT 2
63273: EQUAL
63274: ST_TO_ADDR
63275: GO 63377
63277: LD_INT 17
63279: DOUBLE
63280: EQUAL
63281: IFTRUE 63285
63283: GO 63310
63285: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
63286: LD_ADDR_VAR 0 3
63290: PUSH
63291: LD_INT 39
63293: PPUSH
63294: LD_VAR 0 1
63298: PPUSH
63299: CALL_OW 321
63303: PUSH
63304: LD_INT 2
63306: EQUAL
63307: ST_TO_ADDR
63308: GO 63377
63310: LD_INT 18
63312: DOUBLE
63313: EQUAL
63314: IFTRUE 63318
63316: GO 63343
63318: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
63319: LD_ADDR_VAR 0 3
63323: PUSH
63324: LD_INT 40
63326: PPUSH
63327: LD_VAR 0 1
63331: PPUSH
63332: CALL_OW 321
63336: PUSH
63337: LD_INT 2
63339: EQUAL
63340: ST_TO_ADDR
63341: GO 63377
63343: LD_INT 27
63345: DOUBLE
63346: EQUAL
63347: IFTRUE 63351
63349: GO 63376
63351: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
63352: LD_ADDR_VAR 0 3
63356: PUSH
63357: LD_INT 35
63359: PPUSH
63360: LD_VAR 0 1
63364: PPUSH
63365: CALL_OW 321
63369: PUSH
63370: LD_INT 2
63372: EQUAL
63373: ST_TO_ADDR
63374: GO 63377
63376: POP
// end ;
63377: LD_VAR 0 3
63381: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
63382: LD_INT 0
63384: PPUSH
63385: PPUSH
63386: PPUSH
63387: PPUSH
63388: PPUSH
63389: PPUSH
63390: PPUSH
63391: PPUSH
63392: PPUSH
63393: PPUSH
63394: PPUSH
// result := false ;
63395: LD_ADDR_VAR 0 6
63399: PUSH
63400: LD_INT 0
63402: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
63403: LD_VAR 0 1
63407: NOT
63408: PUSH
63409: LD_VAR 0 1
63413: PPUSH
63414: CALL_OW 266
63418: PUSH
63419: LD_INT 0
63421: PUSH
63422: LD_INT 1
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: IN
63429: NOT
63430: OR
63431: PUSH
63432: LD_VAR 0 2
63436: NOT
63437: OR
63438: PUSH
63439: LD_VAR 0 5
63443: PUSH
63444: LD_INT 0
63446: PUSH
63447: LD_INT 1
63449: PUSH
63450: LD_INT 2
63452: PUSH
63453: LD_INT 3
63455: PUSH
63456: LD_INT 4
63458: PUSH
63459: LD_INT 5
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: IN
63470: NOT
63471: OR
63472: PUSH
63473: LD_VAR 0 3
63477: PPUSH
63478: LD_VAR 0 4
63482: PPUSH
63483: CALL_OW 488
63487: NOT
63488: OR
63489: IFFALSE 63493
// exit ;
63491: GO 64229
// side := GetSide ( depot ) ;
63493: LD_ADDR_VAR 0 9
63497: PUSH
63498: LD_VAR 0 1
63502: PPUSH
63503: CALL_OW 255
63507: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
63508: LD_VAR 0 9
63512: PPUSH
63513: LD_VAR 0 2
63517: PPUSH
63518: CALL 63006 0 2
63522: NOT
63523: IFFALSE 63527
// exit ;
63525: GO 64229
// pom := GetBase ( depot ) ;
63527: LD_ADDR_VAR 0 10
63531: PUSH
63532: LD_VAR 0 1
63536: PPUSH
63537: CALL_OW 274
63541: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
63542: LD_ADDR_VAR 0 11
63546: PUSH
63547: LD_VAR 0 2
63551: PPUSH
63552: LD_VAR 0 1
63556: PPUSH
63557: CALL_OW 248
63561: PPUSH
63562: CALL_OW 450
63566: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
63567: LD_VAR 0 10
63571: PPUSH
63572: LD_INT 1
63574: PPUSH
63575: CALL_OW 275
63579: PUSH
63580: LD_VAR 0 11
63584: PUSH
63585: LD_INT 1
63587: ARRAY
63588: GREATEREQUAL
63589: PUSH
63590: LD_VAR 0 10
63594: PPUSH
63595: LD_INT 2
63597: PPUSH
63598: CALL_OW 275
63602: PUSH
63603: LD_VAR 0 11
63607: PUSH
63608: LD_INT 2
63610: ARRAY
63611: GREATEREQUAL
63612: AND
63613: PUSH
63614: LD_VAR 0 10
63618: PPUSH
63619: LD_INT 3
63621: PPUSH
63622: CALL_OW 275
63626: PUSH
63627: LD_VAR 0 11
63631: PUSH
63632: LD_INT 3
63634: ARRAY
63635: GREATEREQUAL
63636: AND
63637: NOT
63638: IFFALSE 63642
// exit ;
63640: GO 64229
// if GetBType ( depot ) = b_depot then
63642: LD_VAR 0 1
63646: PPUSH
63647: CALL_OW 266
63651: PUSH
63652: LD_INT 0
63654: EQUAL
63655: IFFALSE 63667
// dist := 28 else
63657: LD_ADDR_VAR 0 14
63661: PUSH
63662: LD_INT 28
63664: ST_TO_ADDR
63665: GO 63675
// dist := 36 ;
63667: LD_ADDR_VAR 0 14
63671: PUSH
63672: LD_INT 36
63674: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
63675: LD_VAR 0 1
63679: PPUSH
63680: LD_VAR 0 3
63684: PPUSH
63685: LD_VAR 0 4
63689: PPUSH
63690: CALL_OW 297
63694: PUSH
63695: LD_VAR 0 14
63699: GREATER
63700: IFFALSE 63704
// exit ;
63702: GO 64229
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
63704: LD_ADDR_VAR 0 12
63708: PUSH
63709: LD_VAR 0 2
63713: PPUSH
63714: LD_VAR 0 3
63718: PPUSH
63719: LD_VAR 0 4
63723: PPUSH
63724: LD_VAR 0 5
63728: PPUSH
63729: LD_VAR 0 1
63733: PPUSH
63734: CALL_OW 248
63738: PPUSH
63739: LD_INT 0
63741: PPUSH
63742: CALL 64234 0 6
63746: ST_TO_ADDR
// if not hexes then
63747: LD_VAR 0 12
63751: NOT
63752: IFFALSE 63756
// exit ;
63754: GO 64229
// hex := GetHexInfo ( x , y ) ;
63756: LD_ADDR_VAR 0 15
63760: PUSH
63761: LD_VAR 0 3
63765: PPUSH
63766: LD_VAR 0 4
63770: PPUSH
63771: CALL_OW 546
63775: ST_TO_ADDR
// if hex [ 1 ] then
63776: LD_VAR 0 15
63780: PUSH
63781: LD_INT 1
63783: ARRAY
63784: IFFALSE 63788
// exit ;
63786: GO 64229
// height := hex [ 2 ] ;
63788: LD_ADDR_VAR 0 13
63792: PUSH
63793: LD_VAR 0 15
63797: PUSH
63798: LD_INT 2
63800: ARRAY
63801: ST_TO_ADDR
// for i = 1 to hexes do
63802: LD_ADDR_VAR 0 7
63806: PUSH
63807: DOUBLE
63808: LD_INT 1
63810: DEC
63811: ST_TO_ADDR
63812: LD_VAR 0 12
63816: PUSH
63817: FOR_TO
63818: IFFALSE 64148
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
63820: LD_VAR 0 12
63824: PUSH
63825: LD_VAR 0 7
63829: ARRAY
63830: PUSH
63831: LD_INT 1
63833: ARRAY
63834: PPUSH
63835: LD_VAR 0 12
63839: PUSH
63840: LD_VAR 0 7
63844: ARRAY
63845: PUSH
63846: LD_INT 2
63848: ARRAY
63849: PPUSH
63850: CALL_OW 488
63854: NOT
63855: PUSH
63856: LD_VAR 0 12
63860: PUSH
63861: LD_VAR 0 7
63865: ARRAY
63866: PUSH
63867: LD_INT 1
63869: ARRAY
63870: PPUSH
63871: LD_VAR 0 12
63875: PUSH
63876: LD_VAR 0 7
63880: ARRAY
63881: PUSH
63882: LD_INT 2
63884: ARRAY
63885: PPUSH
63886: CALL_OW 428
63890: PUSH
63891: LD_INT 0
63893: GREATER
63894: OR
63895: PUSH
63896: LD_VAR 0 12
63900: PUSH
63901: LD_VAR 0 7
63905: ARRAY
63906: PUSH
63907: LD_INT 1
63909: ARRAY
63910: PPUSH
63911: LD_VAR 0 12
63915: PUSH
63916: LD_VAR 0 7
63920: ARRAY
63921: PUSH
63922: LD_INT 2
63924: ARRAY
63925: PPUSH
63926: CALL_OW 351
63930: OR
63931: IFFALSE 63937
// exit ;
63933: POP
63934: POP
63935: GO 64229
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63937: LD_ADDR_VAR 0 8
63941: PUSH
63942: LD_VAR 0 12
63946: PUSH
63947: LD_VAR 0 7
63951: ARRAY
63952: PUSH
63953: LD_INT 1
63955: ARRAY
63956: PPUSH
63957: LD_VAR 0 12
63961: PUSH
63962: LD_VAR 0 7
63966: ARRAY
63967: PUSH
63968: LD_INT 2
63970: ARRAY
63971: PPUSH
63972: CALL_OW 546
63976: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
63977: LD_VAR 0 8
63981: PUSH
63982: LD_INT 1
63984: ARRAY
63985: PUSH
63986: LD_VAR 0 8
63990: PUSH
63991: LD_INT 2
63993: ARRAY
63994: PUSH
63995: LD_VAR 0 13
63999: PUSH
64000: LD_INT 2
64002: PLUS
64003: GREATER
64004: OR
64005: PUSH
64006: LD_VAR 0 8
64010: PUSH
64011: LD_INT 2
64013: ARRAY
64014: PUSH
64015: LD_VAR 0 13
64019: PUSH
64020: LD_INT 2
64022: MINUS
64023: LESS
64024: OR
64025: PUSH
64026: LD_VAR 0 8
64030: PUSH
64031: LD_INT 3
64033: ARRAY
64034: PUSH
64035: LD_INT 0
64037: PUSH
64038: LD_INT 8
64040: PUSH
64041: LD_INT 9
64043: PUSH
64044: LD_INT 10
64046: PUSH
64047: LD_INT 11
64049: PUSH
64050: LD_INT 12
64052: PUSH
64053: LD_INT 13
64055: PUSH
64056: LD_INT 16
64058: PUSH
64059: LD_INT 17
64061: PUSH
64062: LD_INT 18
64064: PUSH
64065: LD_INT 19
64067: PUSH
64068: LD_INT 20
64070: PUSH
64071: LD_INT 21
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: IN
64089: NOT
64090: OR
64091: PUSH
64092: LD_VAR 0 8
64096: PUSH
64097: LD_INT 5
64099: ARRAY
64100: NOT
64101: OR
64102: PUSH
64103: LD_VAR 0 8
64107: PUSH
64108: LD_INT 6
64110: ARRAY
64111: PUSH
64112: LD_INT 1
64114: PUSH
64115: LD_INT 2
64117: PUSH
64118: LD_INT 7
64120: PUSH
64121: LD_INT 9
64123: PUSH
64124: LD_INT 10
64126: PUSH
64127: LD_INT 11
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: IN
64138: NOT
64139: OR
64140: IFFALSE 64146
// exit ;
64142: POP
64143: POP
64144: GO 64229
// end ;
64146: GO 63817
64148: POP
64149: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
64150: LD_VAR 0 9
64154: PPUSH
64155: LD_VAR 0 3
64159: PPUSH
64160: LD_VAR 0 4
64164: PPUSH
64165: LD_INT 20
64167: PPUSH
64168: CALL 56181 0 4
64172: PUSH
64173: LD_INT 4
64175: ARRAY
64176: IFFALSE 64180
// exit ;
64178: GO 64229
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
64180: LD_VAR 0 2
64184: PUSH
64185: LD_INT 29
64187: PUSH
64188: LD_INT 30
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: IN
64195: PUSH
64196: LD_VAR 0 3
64200: PPUSH
64201: LD_VAR 0 4
64205: PPUSH
64206: LD_VAR 0 9
64210: PPUSH
64211: CALL_OW 440
64215: NOT
64216: AND
64217: IFFALSE 64221
// exit ;
64219: GO 64229
// result := true ;
64221: LD_ADDR_VAR 0 6
64225: PUSH
64226: LD_INT 1
64228: ST_TO_ADDR
// end ;
64229: LD_VAR 0 6
64233: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
64234: LD_INT 0
64236: PPUSH
64237: PPUSH
64238: PPUSH
64239: PPUSH
64240: PPUSH
64241: PPUSH
64242: PPUSH
64243: PPUSH
64244: PPUSH
64245: PPUSH
64246: PPUSH
64247: PPUSH
64248: PPUSH
64249: PPUSH
64250: PPUSH
64251: PPUSH
64252: PPUSH
64253: PPUSH
64254: PPUSH
64255: PPUSH
64256: PPUSH
64257: PPUSH
64258: PPUSH
64259: PPUSH
64260: PPUSH
64261: PPUSH
64262: PPUSH
64263: PPUSH
64264: PPUSH
64265: PPUSH
64266: PPUSH
64267: PPUSH
64268: PPUSH
64269: PPUSH
64270: PPUSH
64271: PPUSH
64272: PPUSH
64273: PPUSH
64274: PPUSH
64275: PPUSH
64276: PPUSH
64277: PPUSH
64278: PPUSH
64279: PPUSH
64280: PPUSH
64281: PPUSH
64282: PPUSH
64283: PPUSH
64284: PPUSH
64285: PPUSH
64286: PPUSH
64287: PPUSH
64288: PPUSH
64289: PPUSH
64290: PPUSH
64291: PPUSH
64292: PPUSH
64293: PPUSH
// result = [ ] ;
64294: LD_ADDR_VAR 0 7
64298: PUSH
64299: EMPTY
64300: ST_TO_ADDR
// temp_list = [ ] ;
64301: LD_ADDR_VAR 0 9
64305: PUSH
64306: EMPTY
64307: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
64308: LD_VAR 0 4
64312: PUSH
64313: LD_INT 0
64315: PUSH
64316: LD_INT 1
64318: PUSH
64319: LD_INT 2
64321: PUSH
64322: LD_INT 3
64324: PUSH
64325: LD_INT 4
64327: PUSH
64328: LD_INT 5
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: IN
64339: NOT
64340: PUSH
64341: LD_VAR 0 1
64345: PUSH
64346: LD_INT 0
64348: PUSH
64349: LD_INT 1
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: IN
64356: PUSH
64357: LD_VAR 0 5
64361: PUSH
64362: LD_INT 1
64364: PUSH
64365: LD_INT 2
64367: PUSH
64368: LD_INT 3
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: LIST
64375: IN
64376: NOT
64377: AND
64378: OR
64379: IFFALSE 64383
// exit ;
64381: GO 82774
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
64383: LD_VAR 0 1
64387: PUSH
64388: LD_INT 6
64390: PUSH
64391: LD_INT 7
64393: PUSH
64394: LD_INT 8
64396: PUSH
64397: LD_INT 13
64399: PUSH
64400: LD_INT 12
64402: PUSH
64403: LD_INT 15
64405: PUSH
64406: LD_INT 11
64408: PUSH
64409: LD_INT 14
64411: PUSH
64412: LD_INT 10
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: IN
64426: IFFALSE 64436
// btype = b_lab ;
64428: LD_ADDR_VAR 0 1
64432: PUSH
64433: LD_INT 6
64435: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
64436: LD_VAR 0 6
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: LD_INT 1
64446: PUSH
64447: LD_INT 2
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: LIST
64454: IN
64455: NOT
64456: PUSH
64457: LD_VAR 0 1
64461: PUSH
64462: LD_INT 0
64464: PUSH
64465: LD_INT 1
64467: PUSH
64468: LD_INT 2
64470: PUSH
64471: LD_INT 3
64473: PUSH
64474: LD_INT 6
64476: PUSH
64477: LD_INT 36
64479: PUSH
64480: LD_INT 4
64482: PUSH
64483: LD_INT 5
64485: PUSH
64486: LD_INT 31
64488: PUSH
64489: LD_INT 32
64491: PUSH
64492: LD_INT 33
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: IN
64508: NOT
64509: PUSH
64510: LD_VAR 0 6
64514: PUSH
64515: LD_INT 1
64517: EQUAL
64518: AND
64519: OR
64520: PUSH
64521: LD_VAR 0 1
64525: PUSH
64526: LD_INT 2
64528: PUSH
64529: LD_INT 3
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: IN
64536: NOT
64537: PUSH
64538: LD_VAR 0 6
64542: PUSH
64543: LD_INT 2
64545: EQUAL
64546: AND
64547: OR
64548: IFFALSE 64558
// mode = 0 ;
64550: LD_ADDR_VAR 0 6
64554: PUSH
64555: LD_INT 0
64557: ST_TO_ADDR
// case mode of 0 :
64558: LD_VAR 0 6
64562: PUSH
64563: LD_INT 0
64565: DOUBLE
64566: EQUAL
64567: IFTRUE 64571
64569: GO 76024
64571: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64572: LD_ADDR_VAR 0 11
64576: PUSH
64577: LD_INT 0
64579: PUSH
64580: LD_INT 0
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 0
64589: PUSH
64590: LD_INT 1
64592: NEG
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 1
64600: PUSH
64601: LD_INT 0
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 1
64610: PUSH
64611: LD_INT 1
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 0
64620: PUSH
64621: LD_INT 1
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 1
64630: NEG
64631: PUSH
64632: LD_INT 0
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 1
64641: NEG
64642: PUSH
64643: LD_INT 1
64645: NEG
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 1
64653: NEG
64654: PUSH
64655: LD_INT 2
64657: NEG
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: LD_INT 0
64665: PUSH
64666: LD_INT 2
64668: NEG
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 1
64676: PUSH
64677: LD_INT 1
64679: NEG
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 1
64687: PUSH
64688: LD_INT 2
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 0
64697: PUSH
64698: LD_INT 2
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 1
64707: NEG
64708: PUSH
64709: LD_INT 1
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: LD_INT 1
64718: PUSH
64719: LD_INT 3
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 0
64728: PUSH
64729: LD_INT 3
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 1
64738: NEG
64739: PUSH
64740: LD_INT 2
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64765: LD_ADDR_VAR 0 12
64769: PUSH
64770: LD_INT 0
64772: PUSH
64773: LD_INT 0
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 0
64782: PUSH
64783: LD_INT 1
64785: NEG
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 1
64793: PUSH
64794: LD_INT 0
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 1
64803: PUSH
64804: LD_INT 1
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 0
64813: PUSH
64814: LD_INT 1
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 1
64823: NEG
64824: PUSH
64825: LD_INT 0
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 1
64834: NEG
64835: PUSH
64836: LD_INT 1
64838: NEG
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 1
64846: PUSH
64847: LD_INT 1
64849: NEG
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 2
64857: PUSH
64858: LD_INT 0
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 2
64867: PUSH
64868: LD_INT 1
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 1
64877: NEG
64878: PUSH
64879: LD_INT 1
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 2
64888: NEG
64889: PUSH
64890: LD_INT 0
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 2
64899: NEG
64900: PUSH
64901: LD_INT 1
64903: NEG
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 2
64911: NEG
64912: PUSH
64913: LD_INT 1
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 3
64922: NEG
64923: PUSH
64924: LD_INT 0
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 3
64933: NEG
64934: PUSH
64935: LD_INT 1
64937: NEG
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64961: LD_ADDR_VAR 0 13
64965: PUSH
64966: LD_INT 0
64968: PUSH
64969: LD_INT 0
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 0
64978: PUSH
64979: LD_INT 1
64981: NEG
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 1
64989: PUSH
64990: LD_INT 0
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 1
64999: PUSH
65000: LD_INT 1
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 0
65009: PUSH
65010: LD_INT 1
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 1
65019: NEG
65020: PUSH
65021: LD_INT 0
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 1
65030: NEG
65031: PUSH
65032: LD_INT 1
65034: NEG
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 1
65042: NEG
65043: PUSH
65044: LD_INT 2
65046: NEG
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 2
65054: PUSH
65055: LD_INT 1
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 2
65064: PUSH
65065: LD_INT 2
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 1
65074: PUSH
65075: LD_INT 2
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 2
65084: NEG
65085: PUSH
65086: LD_INT 1
65088: NEG
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 2
65096: NEG
65097: PUSH
65098: LD_INT 2
65100: NEG
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 2
65108: NEG
65109: PUSH
65110: LD_INT 3
65112: NEG
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 3
65120: NEG
65121: PUSH
65122: LD_INT 2
65124: NEG
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 3
65132: NEG
65133: PUSH
65134: LD_INT 3
65136: NEG
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65160: LD_ADDR_VAR 0 14
65164: PUSH
65165: LD_INT 0
65167: PUSH
65168: LD_INT 0
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 0
65177: PUSH
65178: LD_INT 1
65180: NEG
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 1
65188: PUSH
65189: LD_INT 0
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 1
65198: PUSH
65199: LD_INT 1
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 0
65208: PUSH
65209: LD_INT 1
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 1
65218: NEG
65219: PUSH
65220: LD_INT 0
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 1
65229: NEG
65230: PUSH
65231: LD_INT 1
65233: NEG
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 1
65241: NEG
65242: PUSH
65243: LD_INT 2
65245: NEG
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 0
65253: PUSH
65254: LD_INT 2
65256: NEG
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: LD_INT 1
65264: PUSH
65265: LD_INT 1
65267: NEG
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 1
65275: PUSH
65276: LD_INT 2
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 0
65285: PUSH
65286: LD_INT 2
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 1
65295: NEG
65296: PUSH
65297: LD_INT 1
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 1
65306: NEG
65307: PUSH
65308: LD_INT 3
65310: NEG
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 0
65318: PUSH
65319: LD_INT 3
65321: NEG
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 1
65329: PUSH
65330: LD_INT 2
65332: NEG
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65356: LD_ADDR_VAR 0 15
65360: PUSH
65361: LD_INT 0
65363: PUSH
65364: LD_INT 0
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 0
65373: PUSH
65374: LD_INT 1
65376: NEG
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 1
65384: PUSH
65385: LD_INT 0
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 1
65394: PUSH
65395: LD_INT 1
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 0
65404: PUSH
65405: LD_INT 1
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 1
65414: NEG
65415: PUSH
65416: LD_INT 0
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 1
65425: NEG
65426: PUSH
65427: LD_INT 1
65429: NEG
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 1
65437: PUSH
65438: LD_INT 1
65440: NEG
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 2
65448: PUSH
65449: LD_INT 0
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 2
65458: PUSH
65459: LD_INT 1
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 1
65468: NEG
65469: PUSH
65470: LD_INT 1
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 2
65479: NEG
65480: PUSH
65481: LD_INT 0
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 2
65490: NEG
65491: PUSH
65492: LD_INT 1
65494: NEG
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 2
65502: PUSH
65503: LD_INT 1
65505: NEG
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 3
65513: PUSH
65514: LD_INT 0
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 3
65523: PUSH
65524: LD_INT 1
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65549: LD_ADDR_VAR 0 16
65553: PUSH
65554: LD_INT 0
65556: PUSH
65557: LD_INT 0
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 0
65566: PUSH
65567: LD_INT 1
65569: NEG
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 1
65577: PUSH
65578: LD_INT 0
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 1
65587: PUSH
65588: LD_INT 1
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 0
65597: PUSH
65598: LD_INT 1
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 1
65607: NEG
65608: PUSH
65609: LD_INT 0
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 1
65618: NEG
65619: PUSH
65620: LD_INT 1
65622: NEG
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 1
65630: NEG
65631: PUSH
65632: LD_INT 2
65634: NEG
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 2
65642: PUSH
65643: LD_INT 1
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: LD_INT 2
65652: PUSH
65653: LD_INT 2
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 1
65662: PUSH
65663: LD_INT 2
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: LD_INT 2
65672: NEG
65673: PUSH
65674: LD_INT 1
65676: NEG
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 2
65684: NEG
65685: PUSH
65686: LD_INT 2
65688: NEG
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 3
65696: PUSH
65697: LD_INT 2
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 3
65706: PUSH
65707: LD_INT 3
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 2
65716: PUSH
65717: LD_INT 3
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65742: LD_ADDR_VAR 0 17
65746: PUSH
65747: LD_INT 0
65749: PUSH
65750: LD_INT 0
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 0
65759: PUSH
65760: LD_INT 1
65762: NEG
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 1
65770: PUSH
65771: LD_INT 0
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 1
65780: PUSH
65781: LD_INT 1
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 0
65790: PUSH
65791: LD_INT 1
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 1
65800: NEG
65801: PUSH
65802: LD_INT 0
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 1
65811: NEG
65812: PUSH
65813: LD_INT 1
65815: NEG
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 1
65823: NEG
65824: PUSH
65825: LD_INT 2
65827: NEG
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 0
65835: PUSH
65836: LD_INT 2
65838: NEG
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 1
65846: PUSH
65847: LD_INT 1
65849: NEG
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 2
65857: PUSH
65858: LD_INT 0
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 2
65867: PUSH
65868: LD_INT 1
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 2
65877: PUSH
65878: LD_INT 2
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 1
65887: PUSH
65888: LD_INT 2
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 0
65897: PUSH
65898: LD_INT 2
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: LD_INT 1
65907: NEG
65908: PUSH
65909: LD_INT 1
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 2
65918: NEG
65919: PUSH
65920: LD_INT 0
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 2
65929: NEG
65930: PUSH
65931: LD_INT 1
65933: NEG
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 2
65941: NEG
65942: PUSH
65943: LD_INT 2
65945: NEG
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65972: LD_ADDR_VAR 0 18
65976: PUSH
65977: LD_INT 0
65979: PUSH
65980: LD_INT 0
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 0
65989: PUSH
65990: LD_INT 1
65992: NEG
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 1
66000: PUSH
66001: LD_INT 0
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 1
66010: PUSH
66011: LD_INT 1
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 0
66020: PUSH
66021: LD_INT 1
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 1
66030: NEG
66031: PUSH
66032: LD_INT 0
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 1
66041: NEG
66042: PUSH
66043: LD_INT 1
66045: NEG
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 1
66053: NEG
66054: PUSH
66055: LD_INT 2
66057: NEG
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 0
66065: PUSH
66066: LD_INT 2
66068: NEG
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 1
66076: PUSH
66077: LD_INT 1
66079: NEG
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 2
66087: PUSH
66088: LD_INT 0
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 2
66097: PUSH
66098: LD_INT 1
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 2
66107: PUSH
66108: LD_INT 2
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 1
66117: PUSH
66118: LD_INT 2
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 0
66127: PUSH
66128: LD_INT 2
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 1
66137: NEG
66138: PUSH
66139: LD_INT 1
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 2
66148: NEG
66149: PUSH
66150: LD_INT 0
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 2
66159: NEG
66160: PUSH
66161: LD_INT 1
66163: NEG
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 2
66171: NEG
66172: PUSH
66173: LD_INT 2
66175: NEG
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66202: LD_ADDR_VAR 0 19
66206: PUSH
66207: LD_INT 0
66209: PUSH
66210: LD_INT 0
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 0
66219: PUSH
66220: LD_INT 1
66222: NEG
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 1
66230: PUSH
66231: LD_INT 0
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 1
66240: PUSH
66241: LD_INT 1
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 0
66250: PUSH
66251: LD_INT 1
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 1
66260: NEG
66261: PUSH
66262: LD_INT 0
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 1
66271: NEG
66272: PUSH
66273: LD_INT 1
66275: NEG
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 1
66283: NEG
66284: PUSH
66285: LD_INT 2
66287: NEG
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 0
66295: PUSH
66296: LD_INT 2
66298: NEG
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 1
66306: PUSH
66307: LD_INT 1
66309: NEG
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 2
66317: PUSH
66318: LD_INT 0
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 2
66327: PUSH
66328: LD_INT 1
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 2
66337: PUSH
66338: LD_INT 2
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 1
66347: PUSH
66348: LD_INT 2
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 0
66357: PUSH
66358: LD_INT 2
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 1
66367: NEG
66368: PUSH
66369: LD_INT 1
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 2
66378: NEG
66379: PUSH
66380: LD_INT 0
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 2
66389: NEG
66390: PUSH
66391: LD_INT 1
66393: NEG
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 2
66401: NEG
66402: PUSH
66403: LD_INT 2
66405: NEG
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66432: LD_ADDR_VAR 0 20
66436: PUSH
66437: LD_INT 0
66439: PUSH
66440: LD_INT 0
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 0
66449: PUSH
66450: LD_INT 1
66452: NEG
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 1
66460: PUSH
66461: LD_INT 0
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: LD_INT 1
66470: PUSH
66471: LD_INT 1
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 0
66480: PUSH
66481: LD_INT 1
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 1
66490: NEG
66491: PUSH
66492: LD_INT 0
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 1
66501: NEG
66502: PUSH
66503: LD_INT 1
66505: NEG
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 1
66513: NEG
66514: PUSH
66515: LD_INT 2
66517: NEG
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 0
66525: PUSH
66526: LD_INT 2
66528: NEG
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 1
66536: PUSH
66537: LD_INT 1
66539: NEG
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 2
66547: PUSH
66548: LD_INT 0
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 2
66557: PUSH
66558: LD_INT 1
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 2
66567: PUSH
66568: LD_INT 2
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 1
66577: PUSH
66578: LD_INT 2
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 0
66587: PUSH
66588: LD_INT 2
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 1
66597: NEG
66598: PUSH
66599: LD_INT 1
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 2
66608: NEG
66609: PUSH
66610: LD_INT 0
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 2
66619: NEG
66620: PUSH
66621: LD_INT 1
66623: NEG
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 2
66631: NEG
66632: PUSH
66633: LD_INT 2
66635: NEG
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66662: LD_ADDR_VAR 0 21
66666: PUSH
66667: LD_INT 0
66669: PUSH
66670: LD_INT 0
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 0
66679: PUSH
66680: LD_INT 1
66682: NEG
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 1
66690: PUSH
66691: LD_INT 0
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: LD_INT 1
66700: PUSH
66701: LD_INT 1
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 0
66710: PUSH
66711: LD_INT 1
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 1
66720: NEG
66721: PUSH
66722: LD_INT 0
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 1
66731: NEG
66732: PUSH
66733: LD_INT 1
66735: NEG
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 1
66743: NEG
66744: PUSH
66745: LD_INT 2
66747: NEG
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 0
66755: PUSH
66756: LD_INT 2
66758: NEG
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 1
66766: PUSH
66767: LD_INT 1
66769: NEG
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 2
66777: PUSH
66778: LD_INT 0
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 2
66787: PUSH
66788: LD_INT 1
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 2
66797: PUSH
66798: LD_INT 2
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 1
66807: PUSH
66808: LD_INT 2
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: LD_INT 0
66817: PUSH
66818: LD_INT 2
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: LD_INT 1
66827: NEG
66828: PUSH
66829: LD_INT 1
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 2
66838: NEG
66839: PUSH
66840: LD_INT 0
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 2
66849: NEG
66850: PUSH
66851: LD_INT 1
66853: NEG
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 2
66861: NEG
66862: PUSH
66863: LD_INT 2
66865: NEG
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66892: LD_ADDR_VAR 0 22
66896: PUSH
66897: LD_INT 0
66899: PUSH
66900: LD_INT 0
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 0
66909: PUSH
66910: LD_INT 1
66912: NEG
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 1
66920: PUSH
66921: LD_INT 0
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 1
66930: PUSH
66931: LD_INT 1
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 0
66940: PUSH
66941: LD_INT 1
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 1
66950: NEG
66951: PUSH
66952: LD_INT 0
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 1
66961: NEG
66962: PUSH
66963: LD_INT 1
66965: NEG
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 1
66973: NEG
66974: PUSH
66975: LD_INT 2
66977: NEG
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 0
66985: PUSH
66986: LD_INT 2
66988: NEG
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: LD_INT 1
66996: PUSH
66997: LD_INT 1
66999: NEG
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: LD_INT 2
67007: PUSH
67008: LD_INT 0
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: LD_INT 2
67017: PUSH
67018: LD_INT 1
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: LD_INT 2
67027: PUSH
67028: LD_INT 2
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 1
67037: PUSH
67038: LD_INT 2
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: LD_INT 0
67047: PUSH
67048: LD_INT 2
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: PUSH
67055: LD_INT 1
67057: NEG
67058: PUSH
67059: LD_INT 1
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: PUSH
67066: LD_INT 2
67068: NEG
67069: PUSH
67070: LD_INT 0
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 2
67079: NEG
67080: PUSH
67081: LD_INT 1
67083: NEG
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 2
67091: NEG
67092: PUSH
67093: LD_INT 2
67095: NEG
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67122: LD_ADDR_VAR 0 23
67126: PUSH
67127: LD_INT 0
67129: PUSH
67130: LD_INT 0
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 0
67139: PUSH
67140: LD_INT 1
67142: NEG
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: LD_INT 1
67150: PUSH
67151: LD_INT 0
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 1
67160: PUSH
67161: LD_INT 1
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: LD_INT 0
67170: PUSH
67171: LD_INT 1
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: LD_INT 1
67180: NEG
67181: PUSH
67182: LD_INT 0
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: PUSH
67189: LD_INT 1
67191: NEG
67192: PUSH
67193: LD_INT 1
67195: NEG
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 1
67203: NEG
67204: PUSH
67205: LD_INT 2
67207: NEG
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 0
67215: PUSH
67216: LD_INT 2
67218: NEG
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 1
67226: PUSH
67227: LD_INT 1
67229: NEG
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 2
67237: PUSH
67238: LD_INT 0
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 2
67247: PUSH
67248: LD_INT 1
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: LD_INT 2
67257: PUSH
67258: LD_INT 2
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 1
67267: PUSH
67268: LD_INT 2
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 0
67277: PUSH
67278: LD_INT 2
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 1
67287: NEG
67288: PUSH
67289: LD_INT 1
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 2
67298: NEG
67299: PUSH
67300: LD_INT 0
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 2
67309: NEG
67310: PUSH
67311: LD_INT 1
67313: NEG
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 2
67321: NEG
67322: PUSH
67323: LD_INT 2
67325: NEG
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 2
67333: NEG
67334: PUSH
67335: LD_INT 3
67337: NEG
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 1
67345: NEG
67346: PUSH
67347: LD_INT 3
67349: NEG
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 1
67357: PUSH
67358: LD_INT 2
67360: NEG
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 2
67368: PUSH
67369: LD_INT 1
67371: NEG
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
67402: LD_ADDR_VAR 0 24
67406: PUSH
67407: LD_INT 0
67409: PUSH
67410: LD_INT 0
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 0
67419: PUSH
67420: LD_INT 1
67422: NEG
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 1
67430: PUSH
67431: LD_INT 0
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: LD_INT 1
67440: PUSH
67441: LD_INT 1
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 0
67450: PUSH
67451: LD_INT 1
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 1
67460: NEG
67461: PUSH
67462: LD_INT 0
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 1
67471: NEG
67472: PUSH
67473: LD_INT 1
67475: NEG
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 1
67483: NEG
67484: PUSH
67485: LD_INT 2
67487: NEG
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_INT 0
67495: PUSH
67496: LD_INT 2
67498: NEG
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: PUSH
67504: LD_INT 1
67506: PUSH
67507: LD_INT 1
67509: NEG
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: LD_INT 2
67517: PUSH
67518: LD_INT 0
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 2
67527: PUSH
67528: LD_INT 1
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: LD_INT 2
67537: PUSH
67538: LD_INT 2
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: PUSH
67545: LD_INT 1
67547: PUSH
67548: LD_INT 2
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 0
67557: PUSH
67558: LD_INT 2
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 1
67567: NEG
67568: PUSH
67569: LD_INT 1
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 2
67578: NEG
67579: PUSH
67580: LD_INT 0
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: LD_INT 2
67589: NEG
67590: PUSH
67591: LD_INT 1
67593: NEG
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 2
67601: NEG
67602: PUSH
67603: LD_INT 2
67605: NEG
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 1
67613: PUSH
67614: LD_INT 2
67616: NEG
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 2
67624: PUSH
67625: LD_INT 1
67627: NEG
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 3
67635: PUSH
67636: LD_INT 1
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 3
67645: PUSH
67646: LD_INT 2
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
67678: LD_ADDR_VAR 0 25
67682: PUSH
67683: LD_INT 0
67685: PUSH
67686: LD_INT 0
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 0
67695: PUSH
67696: LD_INT 1
67698: NEG
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: LD_INT 1
67706: PUSH
67707: LD_INT 0
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: LD_INT 1
67716: PUSH
67717: LD_INT 1
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: LD_INT 0
67726: PUSH
67727: LD_INT 1
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 1
67736: NEG
67737: PUSH
67738: LD_INT 0
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 1
67747: NEG
67748: PUSH
67749: LD_INT 1
67751: NEG
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: LD_INT 1
67759: NEG
67760: PUSH
67761: LD_INT 2
67763: NEG
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: LD_INT 0
67771: PUSH
67772: LD_INT 2
67774: NEG
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 1
67782: PUSH
67783: LD_INT 1
67785: NEG
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 2
67793: PUSH
67794: LD_INT 0
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 2
67803: PUSH
67804: LD_INT 1
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 2
67813: PUSH
67814: LD_INT 2
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 1
67823: PUSH
67824: LD_INT 2
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 0
67833: PUSH
67834: LD_INT 2
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 1
67843: NEG
67844: PUSH
67845: LD_INT 1
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 2
67854: NEG
67855: PUSH
67856: LD_INT 0
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 2
67865: NEG
67866: PUSH
67867: LD_INT 1
67869: NEG
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: PUSH
67875: LD_INT 2
67877: NEG
67878: PUSH
67879: LD_INT 2
67881: NEG
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: LD_INT 3
67889: PUSH
67890: LD_INT 1
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 3
67899: PUSH
67900: LD_INT 2
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 2
67909: PUSH
67910: LD_INT 3
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: LD_INT 1
67919: PUSH
67920: LD_INT 3
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: LIST
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67952: LD_ADDR_VAR 0 26
67956: PUSH
67957: LD_INT 0
67959: PUSH
67960: LD_INT 0
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 0
67969: PUSH
67970: LD_INT 1
67972: NEG
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 1
67980: PUSH
67981: LD_INT 0
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 1
67990: PUSH
67991: LD_INT 1
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 0
68000: PUSH
68001: LD_INT 1
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 1
68010: NEG
68011: PUSH
68012: LD_INT 0
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 1
68021: NEG
68022: PUSH
68023: LD_INT 1
68025: NEG
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 1
68033: NEG
68034: PUSH
68035: LD_INT 2
68037: NEG
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 0
68045: PUSH
68046: LD_INT 2
68048: NEG
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 1
68056: PUSH
68057: LD_INT 1
68059: NEG
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 2
68067: PUSH
68068: LD_INT 0
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 2
68077: PUSH
68078: LD_INT 1
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 2
68087: PUSH
68088: LD_INT 2
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 1
68097: PUSH
68098: LD_INT 2
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 0
68107: PUSH
68108: LD_INT 2
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 1
68117: NEG
68118: PUSH
68119: LD_INT 1
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 2
68128: NEG
68129: PUSH
68130: LD_INT 0
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 2
68139: NEG
68140: PUSH
68141: LD_INT 1
68143: NEG
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 2
68151: NEG
68152: PUSH
68153: LD_INT 2
68155: NEG
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 2
68163: PUSH
68164: LD_INT 3
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 1
68173: PUSH
68174: LD_INT 3
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: LD_INT 1
68183: NEG
68184: PUSH
68185: LD_INT 2
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: PUSH
68192: LD_INT 2
68194: NEG
68195: PUSH
68196: LD_INT 1
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: LIST
68207: LIST
68208: LIST
68209: LIST
68210: LIST
68211: LIST
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: LIST
68225: LIST
68226: LIST
68227: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68228: LD_ADDR_VAR 0 27
68232: PUSH
68233: LD_INT 0
68235: PUSH
68236: LD_INT 0
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 0
68245: PUSH
68246: LD_INT 1
68248: NEG
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 1
68256: PUSH
68257: LD_INT 0
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 1
68266: PUSH
68267: LD_INT 1
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 0
68276: PUSH
68277: LD_INT 1
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 1
68286: NEG
68287: PUSH
68288: LD_INT 0
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 1
68297: NEG
68298: PUSH
68299: LD_INT 1
68301: NEG
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 1
68309: NEG
68310: PUSH
68311: LD_INT 2
68313: NEG
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 0
68321: PUSH
68322: LD_INT 2
68324: NEG
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: LD_INT 1
68332: PUSH
68333: LD_INT 1
68335: NEG
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 2
68343: PUSH
68344: LD_INT 0
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: LD_INT 2
68353: PUSH
68354: LD_INT 1
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 2
68363: PUSH
68364: LD_INT 2
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: LD_INT 1
68373: PUSH
68374: LD_INT 2
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PUSH
68381: LD_INT 0
68383: PUSH
68384: LD_INT 2
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: PUSH
68391: LD_INT 1
68393: NEG
68394: PUSH
68395: LD_INT 1
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: LD_INT 2
68404: NEG
68405: PUSH
68406: LD_INT 0
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 2
68415: NEG
68416: PUSH
68417: LD_INT 1
68419: NEG
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 2
68427: NEG
68428: PUSH
68429: LD_INT 2
68431: NEG
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: PUSH
68437: LD_INT 1
68439: NEG
68440: PUSH
68441: LD_INT 2
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: PUSH
68448: LD_INT 2
68450: NEG
68451: PUSH
68452: LD_INT 1
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: LD_INT 3
68461: NEG
68462: PUSH
68463: LD_INT 1
68465: NEG
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: LD_INT 3
68473: NEG
68474: PUSH
68475: LD_INT 2
68477: NEG
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: LIST
68505: LIST
68506: LIST
68507: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68508: LD_ADDR_VAR 0 28
68512: PUSH
68513: LD_INT 0
68515: PUSH
68516: LD_INT 0
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: LD_INT 0
68525: PUSH
68526: LD_INT 1
68528: NEG
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 1
68536: PUSH
68537: LD_INT 0
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 1
68546: PUSH
68547: LD_INT 1
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: LD_INT 0
68556: PUSH
68557: LD_INT 1
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: PUSH
68564: LD_INT 1
68566: NEG
68567: PUSH
68568: LD_INT 0
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PUSH
68575: LD_INT 1
68577: NEG
68578: PUSH
68579: LD_INT 1
68581: NEG
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 1
68589: NEG
68590: PUSH
68591: LD_INT 2
68593: NEG
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: LD_INT 0
68601: PUSH
68602: LD_INT 2
68604: NEG
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 1
68612: PUSH
68613: LD_INT 1
68615: NEG
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 2
68623: PUSH
68624: LD_INT 0
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 2
68633: PUSH
68634: LD_INT 1
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 2
68643: PUSH
68644: LD_INT 2
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PUSH
68651: LD_INT 1
68653: PUSH
68654: LD_INT 2
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 0
68663: PUSH
68664: LD_INT 2
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 1
68673: NEG
68674: PUSH
68675: LD_INT 1
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 2
68684: NEG
68685: PUSH
68686: LD_INT 0
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: LD_INT 2
68695: NEG
68696: PUSH
68697: LD_INT 1
68699: NEG
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 2
68707: NEG
68708: PUSH
68709: LD_INT 2
68711: NEG
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: LD_INT 2
68719: NEG
68720: PUSH
68721: LD_INT 3
68723: NEG
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 1
68731: NEG
68732: PUSH
68733: LD_INT 3
68735: NEG
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 3
68743: NEG
68744: PUSH
68745: LD_INT 1
68747: NEG
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 3
68755: NEG
68756: PUSH
68757: LD_INT 2
68759: NEG
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: LIST
68786: LIST
68787: LIST
68788: LIST
68789: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
68790: LD_ADDR_VAR 0 29
68794: PUSH
68795: LD_INT 0
68797: PUSH
68798: LD_INT 0
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PUSH
68805: LD_INT 0
68807: PUSH
68808: LD_INT 1
68810: NEG
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: LD_INT 1
68818: PUSH
68819: LD_INT 0
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: PUSH
68826: LD_INT 1
68828: PUSH
68829: LD_INT 1
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: PUSH
68836: LD_INT 0
68838: PUSH
68839: LD_INT 1
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 1
68848: NEG
68849: PUSH
68850: LD_INT 0
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 1
68859: NEG
68860: PUSH
68861: LD_INT 1
68863: NEG
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: LD_INT 1
68871: NEG
68872: PUSH
68873: LD_INT 2
68875: NEG
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: PUSH
68881: LD_INT 0
68883: PUSH
68884: LD_INT 2
68886: NEG
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 1
68894: PUSH
68895: LD_INT 1
68897: NEG
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 2
68905: PUSH
68906: LD_INT 0
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 2
68915: PUSH
68916: LD_INT 1
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 1
68925: PUSH
68926: LD_INT 2
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 0
68935: PUSH
68936: LD_INT 2
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: LD_INT 1
68945: NEG
68946: PUSH
68947: LD_INT 1
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 2
68956: NEG
68957: PUSH
68958: LD_INT 1
68960: NEG
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 2
68968: NEG
68969: PUSH
68970: LD_INT 2
68972: NEG
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 2
68980: NEG
68981: PUSH
68982: LD_INT 3
68984: NEG
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 2
68992: PUSH
68993: LD_INT 1
68995: NEG
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: PUSH
69001: LD_INT 3
69003: PUSH
69004: LD_INT 1
69006: PUSH
69007: EMPTY
69008: LIST
69009: LIST
69010: PUSH
69011: LD_INT 1
69013: PUSH
69014: LD_INT 3
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: PUSH
69021: LD_INT 1
69023: NEG
69024: PUSH
69025: LD_INT 2
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: PUSH
69032: LD_INT 3
69034: NEG
69035: PUSH
69036: LD_INT 2
69038: NEG
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69069: LD_ADDR_VAR 0 30
69073: PUSH
69074: LD_INT 0
69076: PUSH
69077: LD_INT 0
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 0
69086: PUSH
69087: LD_INT 1
69089: NEG
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 1
69097: PUSH
69098: LD_INT 0
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: PUSH
69105: LD_INT 1
69107: PUSH
69108: LD_INT 1
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 0
69117: PUSH
69118: LD_INT 1
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: LD_INT 1
69127: NEG
69128: PUSH
69129: LD_INT 0
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_INT 1
69138: NEG
69139: PUSH
69140: LD_INT 1
69142: NEG
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 1
69150: NEG
69151: PUSH
69152: LD_INT 2
69154: NEG
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: PUSH
69160: LD_INT 0
69162: PUSH
69163: LD_INT 2
69165: NEG
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: LD_INT 1
69173: PUSH
69174: LD_INT 1
69176: NEG
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 2
69184: PUSH
69185: LD_INT 0
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: LD_INT 2
69194: PUSH
69195: LD_INT 1
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: LD_INT 2
69204: PUSH
69205: LD_INT 2
69207: PUSH
69208: EMPTY
69209: LIST
69210: LIST
69211: PUSH
69212: LD_INT 1
69214: PUSH
69215: LD_INT 2
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: PUSH
69222: LD_INT 1
69224: NEG
69225: PUSH
69226: LD_INT 1
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: PUSH
69233: LD_INT 2
69235: NEG
69236: PUSH
69237: LD_INT 0
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: PUSH
69244: LD_INT 2
69246: NEG
69247: PUSH
69248: LD_INT 1
69250: NEG
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: PUSH
69256: LD_INT 1
69258: NEG
69259: PUSH
69260: LD_INT 3
69262: NEG
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: PUSH
69268: LD_INT 1
69270: PUSH
69271: LD_INT 2
69273: NEG
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: LD_INT 3
69281: PUSH
69282: LD_INT 2
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 2
69291: PUSH
69292: LD_INT 3
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 2
69301: NEG
69302: PUSH
69303: LD_INT 1
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 3
69312: NEG
69313: PUSH
69314: LD_INT 1
69316: NEG
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: LIST
69344: LIST
69345: LIST
69346: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
69347: LD_ADDR_VAR 0 31
69351: PUSH
69352: LD_INT 0
69354: PUSH
69355: LD_INT 0
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: PUSH
69362: LD_INT 0
69364: PUSH
69365: LD_INT 1
69367: NEG
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: PUSH
69373: LD_INT 1
69375: PUSH
69376: LD_INT 0
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: LD_INT 1
69385: PUSH
69386: LD_INT 1
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: LD_INT 0
69395: PUSH
69396: LD_INT 1
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PUSH
69403: LD_INT 1
69405: NEG
69406: PUSH
69407: LD_INT 0
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 1
69416: NEG
69417: PUSH
69418: LD_INT 1
69420: NEG
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 1
69428: NEG
69429: PUSH
69430: LD_INT 2
69432: NEG
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 1
69440: PUSH
69441: LD_INT 1
69443: NEG
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: LD_INT 2
69451: PUSH
69452: LD_INT 0
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: PUSH
69459: LD_INT 2
69461: PUSH
69462: LD_INT 1
69464: PUSH
69465: EMPTY
69466: LIST
69467: LIST
69468: PUSH
69469: LD_INT 2
69471: PUSH
69472: LD_INT 2
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: PUSH
69479: LD_INT 1
69481: PUSH
69482: LD_INT 2
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 0
69491: PUSH
69492: LD_INT 2
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: LD_INT 1
69501: NEG
69502: PUSH
69503: LD_INT 1
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: PUSH
69510: LD_INT 2
69512: NEG
69513: PUSH
69514: LD_INT 1
69516: NEG
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PUSH
69522: LD_INT 2
69524: NEG
69525: PUSH
69526: LD_INT 2
69528: NEG
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: LD_INT 2
69536: NEG
69537: PUSH
69538: LD_INT 3
69540: NEG
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 2
69548: PUSH
69549: LD_INT 1
69551: NEG
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: PUSH
69557: LD_INT 3
69559: PUSH
69560: LD_INT 1
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 1
69569: PUSH
69570: LD_INT 3
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: LD_INT 1
69579: NEG
69580: PUSH
69581: LD_INT 2
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 3
69590: NEG
69591: PUSH
69592: LD_INT 2
69594: NEG
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: LIST
69609: LIST
69610: LIST
69611: LIST
69612: LIST
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69625: LD_ADDR_VAR 0 32
69629: PUSH
69630: LD_INT 0
69632: PUSH
69633: LD_INT 0
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 0
69642: PUSH
69643: LD_INT 1
69645: NEG
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: LD_INT 1
69653: PUSH
69654: LD_INT 0
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PUSH
69661: LD_INT 1
69663: PUSH
69664: LD_INT 1
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: PUSH
69671: LD_INT 0
69673: PUSH
69674: LD_INT 1
69676: PUSH
69677: EMPTY
69678: LIST
69679: LIST
69680: PUSH
69681: LD_INT 1
69683: NEG
69684: PUSH
69685: LD_INT 0
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: LD_INT 1
69694: NEG
69695: PUSH
69696: LD_INT 1
69698: NEG
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PUSH
69704: LD_INT 1
69706: NEG
69707: PUSH
69708: LD_INT 2
69710: NEG
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PUSH
69716: LD_INT 0
69718: PUSH
69719: LD_INT 2
69721: NEG
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: LD_INT 1
69729: PUSH
69730: LD_INT 1
69732: NEG
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PUSH
69738: LD_INT 2
69740: PUSH
69741: LD_INT 1
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: LD_INT 2
69750: PUSH
69751: LD_INT 2
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 1
69760: PUSH
69761: LD_INT 2
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: LD_INT 0
69770: PUSH
69771: LD_INT 2
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: LD_INT 1
69780: NEG
69781: PUSH
69782: LD_INT 1
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 2
69791: NEG
69792: PUSH
69793: LD_INT 0
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 2
69802: NEG
69803: PUSH
69804: LD_INT 1
69806: NEG
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: PUSH
69812: LD_INT 1
69814: NEG
69815: PUSH
69816: LD_INT 3
69818: NEG
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 1
69826: PUSH
69827: LD_INT 2
69829: NEG
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 3
69837: PUSH
69838: LD_INT 2
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 2
69847: PUSH
69848: LD_INT 3
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 2
69857: NEG
69858: PUSH
69859: LD_INT 1
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PUSH
69866: LD_INT 3
69868: NEG
69869: PUSH
69870: LD_INT 1
69872: NEG
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: LIST
69882: LIST
69883: LIST
69884: LIST
69885: LIST
69886: LIST
69887: LIST
69888: LIST
69889: LIST
69890: LIST
69891: LIST
69892: LIST
69893: LIST
69894: LIST
69895: LIST
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: LIST
69901: LIST
69902: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
69903: LD_ADDR_VAR 0 33
69907: PUSH
69908: LD_INT 0
69910: PUSH
69911: LD_INT 0
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 0
69920: PUSH
69921: LD_INT 1
69923: NEG
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: PUSH
69929: LD_INT 1
69931: PUSH
69932: LD_INT 0
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: LD_INT 1
69941: PUSH
69942: LD_INT 1
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: LD_INT 0
69951: PUSH
69952: LD_INT 1
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PUSH
69959: LD_INT 1
69961: NEG
69962: PUSH
69963: LD_INT 0
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: PUSH
69970: LD_INT 1
69972: NEG
69973: PUSH
69974: LD_INT 1
69976: NEG
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: LD_INT 1
69984: NEG
69985: PUSH
69986: LD_INT 2
69988: NEG
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: PUSH
69994: LD_INT 1
69996: PUSH
69997: LD_INT 1
69999: NEG
70000: PUSH
70001: EMPTY
70002: LIST
70003: LIST
70004: PUSH
70005: LD_INT 2
70007: PUSH
70008: LD_INT 0
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: PUSH
70015: LD_INT 2
70017: PUSH
70018: LD_INT 1
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: PUSH
70025: LD_INT 1
70027: PUSH
70028: LD_INT 2
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 0
70037: PUSH
70038: LD_INT 2
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PUSH
70045: LD_INT 1
70047: NEG
70048: PUSH
70049: LD_INT 1
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 2
70058: NEG
70059: PUSH
70060: LD_INT 0
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: PUSH
70067: LD_INT 2
70069: NEG
70070: PUSH
70071: LD_INT 1
70073: NEG
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 2
70081: NEG
70082: PUSH
70083: LD_INT 2
70085: NEG
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: LD_INT 2
70093: NEG
70094: PUSH
70095: LD_INT 3
70097: NEG
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: PUSH
70103: LD_INT 2
70105: PUSH
70106: LD_INT 1
70108: NEG
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: PUSH
70114: LD_INT 3
70116: PUSH
70117: LD_INT 1
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: LD_INT 1
70126: PUSH
70127: LD_INT 3
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PUSH
70134: LD_INT 1
70136: NEG
70137: PUSH
70138: LD_INT 2
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: PUSH
70145: LD_INT 3
70147: NEG
70148: PUSH
70149: LD_INT 2
70151: NEG
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: LIST
70179: LIST
70180: LIST
70181: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70182: LD_ADDR_VAR 0 34
70186: PUSH
70187: LD_INT 0
70189: PUSH
70190: LD_INT 0
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 0
70199: PUSH
70200: LD_INT 1
70202: NEG
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: PUSH
70208: LD_INT 1
70210: PUSH
70211: LD_INT 0
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: PUSH
70218: LD_INT 1
70220: PUSH
70221: LD_INT 1
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PUSH
70228: LD_INT 0
70230: PUSH
70231: LD_INT 1
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: LD_INT 1
70240: NEG
70241: PUSH
70242: LD_INT 0
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: PUSH
70249: LD_INT 1
70251: NEG
70252: PUSH
70253: LD_INT 1
70255: NEG
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 1
70263: NEG
70264: PUSH
70265: LD_INT 2
70267: NEG
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: PUSH
70273: LD_INT 0
70275: PUSH
70276: LD_INT 2
70278: NEG
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: LD_INT 1
70286: PUSH
70287: LD_INT 1
70289: NEG
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PUSH
70295: LD_INT 2
70297: PUSH
70298: LD_INT 1
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: PUSH
70305: LD_INT 2
70307: PUSH
70308: LD_INT 2
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PUSH
70315: LD_INT 1
70317: PUSH
70318: LD_INT 2
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: PUSH
70325: LD_INT 1
70327: NEG
70328: PUSH
70329: LD_INT 1
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: PUSH
70336: LD_INT 2
70338: NEG
70339: PUSH
70340: LD_INT 0
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: PUSH
70347: LD_INT 2
70349: NEG
70350: PUSH
70351: LD_INT 1
70353: NEG
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: PUSH
70359: LD_INT 2
70361: NEG
70362: PUSH
70363: LD_INT 2
70365: NEG
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: PUSH
70371: LD_INT 1
70373: NEG
70374: PUSH
70375: LD_INT 3
70377: NEG
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: PUSH
70383: LD_INT 1
70385: PUSH
70386: LD_INT 2
70388: NEG
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: PUSH
70394: LD_INT 3
70396: PUSH
70397: LD_INT 2
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: PUSH
70404: LD_INT 2
70406: PUSH
70407: LD_INT 3
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 2
70416: NEG
70417: PUSH
70418: LD_INT 1
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: PUSH
70425: LD_INT 3
70427: NEG
70428: PUSH
70429: LD_INT 1
70431: NEG
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: LIST
70449: LIST
70450: LIST
70451: LIST
70452: LIST
70453: LIST
70454: LIST
70455: LIST
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
70462: LD_ADDR_VAR 0 35
70466: PUSH
70467: LD_INT 0
70469: PUSH
70470: LD_INT 0
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: LD_INT 0
70479: PUSH
70480: LD_INT 1
70482: NEG
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: PUSH
70488: LD_INT 1
70490: PUSH
70491: LD_INT 0
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 1
70500: PUSH
70501: LD_INT 1
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 0
70510: PUSH
70511: LD_INT 1
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: PUSH
70518: LD_INT 1
70520: NEG
70521: PUSH
70522: LD_INT 0
70524: PUSH
70525: EMPTY
70526: LIST
70527: LIST
70528: PUSH
70529: LD_INT 1
70531: NEG
70532: PUSH
70533: LD_INT 1
70535: NEG
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: PUSH
70541: LD_INT 2
70543: PUSH
70544: LD_INT 1
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: LD_INT 2
70553: NEG
70554: PUSH
70555: LD_INT 1
70557: NEG
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: LIST
70572: LIST
70573: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
70574: LD_ADDR_VAR 0 36
70578: PUSH
70579: LD_INT 0
70581: PUSH
70582: LD_INT 0
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: PUSH
70589: LD_INT 0
70591: PUSH
70592: LD_INT 1
70594: NEG
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: PUSH
70600: LD_INT 1
70602: PUSH
70603: LD_INT 0
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 1
70612: PUSH
70613: LD_INT 1
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 0
70622: PUSH
70623: LD_INT 1
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 1
70632: NEG
70633: PUSH
70634: LD_INT 0
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 1
70643: NEG
70644: PUSH
70645: LD_INT 1
70647: NEG
70648: PUSH
70649: EMPTY
70650: LIST
70651: LIST
70652: PUSH
70653: LD_INT 1
70655: NEG
70656: PUSH
70657: LD_INT 2
70659: NEG
70660: PUSH
70661: EMPTY
70662: LIST
70663: LIST
70664: PUSH
70665: LD_INT 1
70667: PUSH
70668: LD_INT 2
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: LIST
70679: LIST
70680: LIST
70681: LIST
70682: LIST
70683: LIST
70684: LIST
70685: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
70686: LD_ADDR_VAR 0 37
70690: PUSH
70691: LD_INT 0
70693: PUSH
70694: LD_INT 0
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PUSH
70701: LD_INT 0
70703: PUSH
70704: LD_INT 1
70706: NEG
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_INT 1
70714: PUSH
70715: LD_INT 0
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: PUSH
70722: LD_INT 1
70724: PUSH
70725: LD_INT 1
70727: PUSH
70728: EMPTY
70729: LIST
70730: LIST
70731: PUSH
70732: LD_INT 0
70734: PUSH
70735: LD_INT 1
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 1
70744: NEG
70745: PUSH
70746: LD_INT 0
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 1
70755: NEG
70756: PUSH
70757: LD_INT 1
70759: NEG
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_INT 1
70767: PUSH
70768: LD_INT 1
70770: NEG
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: LD_INT 1
70778: NEG
70779: PUSH
70780: LD_INT 1
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: LIST
70791: LIST
70792: LIST
70793: LIST
70794: LIST
70795: LIST
70796: LIST
70797: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
70798: LD_ADDR_VAR 0 38
70802: PUSH
70803: LD_INT 0
70805: PUSH
70806: LD_INT 0
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: LD_INT 0
70815: PUSH
70816: LD_INT 1
70818: NEG
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: PUSH
70824: LD_INT 1
70826: PUSH
70827: LD_INT 0
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: PUSH
70834: LD_INT 1
70836: PUSH
70837: LD_INT 1
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: LD_INT 0
70846: PUSH
70847: LD_INT 1
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: PUSH
70854: LD_INT 1
70856: NEG
70857: PUSH
70858: LD_INT 0
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: PUSH
70865: LD_INT 1
70867: NEG
70868: PUSH
70869: LD_INT 1
70871: NEG
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: PUSH
70877: LD_INT 2
70879: PUSH
70880: LD_INT 1
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: PUSH
70887: LD_INT 2
70889: NEG
70890: PUSH
70891: LD_INT 1
70893: NEG
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: LIST
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: LIST
70908: LIST
70909: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
70910: LD_ADDR_VAR 0 39
70914: PUSH
70915: LD_INT 0
70917: PUSH
70918: LD_INT 0
70920: PUSH
70921: EMPTY
70922: LIST
70923: LIST
70924: PUSH
70925: LD_INT 0
70927: PUSH
70928: LD_INT 1
70930: NEG
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: PUSH
70936: LD_INT 1
70938: PUSH
70939: LD_INT 0
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: PUSH
70946: LD_INT 1
70948: PUSH
70949: LD_INT 1
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: LD_INT 0
70958: PUSH
70959: LD_INT 1
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: LD_INT 1
70968: NEG
70969: PUSH
70970: LD_INT 0
70972: PUSH
70973: EMPTY
70974: LIST
70975: LIST
70976: PUSH
70977: LD_INT 1
70979: NEG
70980: PUSH
70981: LD_INT 1
70983: NEG
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: LD_INT 1
70991: NEG
70992: PUSH
70993: LD_INT 2
70995: NEG
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 1
71003: PUSH
71004: LD_INT 2
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: LIST
71015: LIST
71016: LIST
71017: LIST
71018: LIST
71019: LIST
71020: LIST
71021: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
71022: LD_ADDR_VAR 0 40
71026: PUSH
71027: LD_INT 0
71029: PUSH
71030: LD_INT 0
71032: PUSH
71033: EMPTY
71034: LIST
71035: LIST
71036: PUSH
71037: LD_INT 0
71039: PUSH
71040: LD_INT 1
71042: NEG
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: PUSH
71048: LD_INT 1
71050: PUSH
71051: LD_INT 0
71053: PUSH
71054: EMPTY
71055: LIST
71056: LIST
71057: PUSH
71058: LD_INT 1
71060: PUSH
71061: LD_INT 1
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: PUSH
71068: LD_INT 0
71070: PUSH
71071: LD_INT 1
71073: PUSH
71074: EMPTY
71075: LIST
71076: LIST
71077: PUSH
71078: LD_INT 1
71080: NEG
71081: PUSH
71082: LD_INT 0
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: PUSH
71089: LD_INT 1
71091: NEG
71092: PUSH
71093: LD_INT 1
71095: NEG
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 1
71103: PUSH
71104: LD_INT 1
71106: NEG
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 1
71114: NEG
71115: PUSH
71116: LD_INT 1
71118: PUSH
71119: EMPTY
71120: LIST
71121: LIST
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: LIST
71127: LIST
71128: LIST
71129: LIST
71130: LIST
71131: LIST
71132: LIST
71133: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71134: LD_ADDR_VAR 0 41
71138: PUSH
71139: LD_INT 0
71141: PUSH
71142: LD_INT 0
71144: PUSH
71145: EMPTY
71146: LIST
71147: LIST
71148: PUSH
71149: LD_INT 0
71151: PUSH
71152: LD_INT 1
71154: NEG
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PUSH
71160: LD_INT 1
71162: PUSH
71163: LD_INT 0
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: PUSH
71170: LD_INT 1
71172: PUSH
71173: LD_INT 1
71175: PUSH
71176: EMPTY
71177: LIST
71178: LIST
71179: PUSH
71180: LD_INT 0
71182: PUSH
71183: LD_INT 1
71185: PUSH
71186: EMPTY
71187: LIST
71188: LIST
71189: PUSH
71190: LD_INT 1
71192: NEG
71193: PUSH
71194: LD_INT 0
71196: PUSH
71197: EMPTY
71198: LIST
71199: LIST
71200: PUSH
71201: LD_INT 1
71203: NEG
71204: PUSH
71205: LD_INT 1
71207: NEG
71208: PUSH
71209: EMPTY
71210: LIST
71211: LIST
71212: PUSH
71213: LD_INT 1
71215: NEG
71216: PUSH
71217: LD_INT 2
71219: NEG
71220: PUSH
71221: EMPTY
71222: LIST
71223: LIST
71224: PUSH
71225: LD_INT 1
71227: PUSH
71228: LD_INT 1
71230: NEG
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_INT 2
71238: PUSH
71239: LD_INT 0
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: PUSH
71246: LD_INT 2
71248: PUSH
71249: LD_INT 1
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 2
71258: PUSH
71259: LD_INT 2
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: LD_INT 1
71268: PUSH
71269: LD_INT 2
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: LD_INT 1
71278: NEG
71279: PUSH
71280: LD_INT 1
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 2
71289: NEG
71290: PUSH
71291: LD_INT 0
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: PUSH
71298: LD_INT 2
71300: NEG
71301: PUSH
71302: LD_INT 1
71304: NEG
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PUSH
71310: LD_INT 2
71312: NEG
71313: PUSH
71314: LD_INT 2
71316: NEG
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: LD_INT 2
71324: NEG
71325: PUSH
71326: LD_INT 3
71328: NEG
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: PUSH
71334: LD_INT 2
71336: PUSH
71337: LD_INT 1
71339: NEG
71340: PUSH
71341: EMPTY
71342: LIST
71343: LIST
71344: PUSH
71345: LD_INT 3
71347: PUSH
71348: LD_INT 0
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: PUSH
71355: LD_INT 3
71357: PUSH
71358: LD_INT 1
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: PUSH
71365: LD_INT 3
71367: PUSH
71368: LD_INT 2
71370: PUSH
71371: EMPTY
71372: LIST
71373: LIST
71374: PUSH
71375: LD_INT 3
71377: PUSH
71378: LD_INT 3
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: PUSH
71385: LD_INT 2
71387: PUSH
71388: LD_INT 3
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: PUSH
71395: LD_INT 2
71397: NEG
71398: PUSH
71399: LD_INT 1
71401: PUSH
71402: EMPTY
71403: LIST
71404: LIST
71405: PUSH
71406: LD_INT 3
71408: NEG
71409: PUSH
71410: LD_INT 0
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: PUSH
71417: LD_INT 3
71419: NEG
71420: PUSH
71421: LD_INT 1
71423: NEG
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: PUSH
71429: LD_INT 3
71431: NEG
71432: PUSH
71433: LD_INT 2
71435: NEG
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: PUSH
71441: LD_INT 3
71443: NEG
71444: PUSH
71445: LD_INT 3
71447: NEG
71448: PUSH
71449: EMPTY
71450: LIST
71451: LIST
71452: PUSH
71453: EMPTY
71454: LIST
71455: LIST
71456: LIST
71457: LIST
71458: LIST
71459: LIST
71460: LIST
71461: LIST
71462: LIST
71463: LIST
71464: LIST
71465: LIST
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: LIST
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71484: LD_ADDR_VAR 0 42
71488: PUSH
71489: LD_INT 0
71491: PUSH
71492: LD_INT 0
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: PUSH
71499: LD_INT 0
71501: PUSH
71502: LD_INT 1
71504: NEG
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PUSH
71510: LD_INT 1
71512: PUSH
71513: LD_INT 0
71515: PUSH
71516: EMPTY
71517: LIST
71518: LIST
71519: PUSH
71520: LD_INT 1
71522: PUSH
71523: LD_INT 1
71525: PUSH
71526: EMPTY
71527: LIST
71528: LIST
71529: PUSH
71530: LD_INT 0
71532: PUSH
71533: LD_INT 1
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: LD_INT 1
71542: NEG
71543: PUSH
71544: LD_INT 0
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PUSH
71551: LD_INT 1
71553: NEG
71554: PUSH
71555: LD_INT 1
71557: NEG
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PUSH
71563: LD_INT 1
71565: NEG
71566: PUSH
71567: LD_INT 2
71569: NEG
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PUSH
71575: LD_INT 0
71577: PUSH
71578: LD_INT 2
71580: NEG
71581: PUSH
71582: EMPTY
71583: LIST
71584: LIST
71585: PUSH
71586: LD_INT 1
71588: PUSH
71589: LD_INT 1
71591: NEG
71592: PUSH
71593: EMPTY
71594: LIST
71595: LIST
71596: PUSH
71597: LD_INT 2
71599: PUSH
71600: LD_INT 1
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: PUSH
71607: LD_INT 2
71609: PUSH
71610: LD_INT 2
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: LD_INT 1
71619: PUSH
71620: LD_INT 2
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: PUSH
71627: LD_INT 0
71629: PUSH
71630: LD_INT 2
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PUSH
71637: LD_INT 1
71639: NEG
71640: PUSH
71641: LD_INT 1
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: PUSH
71648: LD_INT 2
71650: NEG
71651: PUSH
71652: LD_INT 1
71654: NEG
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PUSH
71660: LD_INT 2
71662: NEG
71663: PUSH
71664: LD_INT 2
71666: NEG
71667: PUSH
71668: EMPTY
71669: LIST
71670: LIST
71671: PUSH
71672: LD_INT 2
71674: NEG
71675: PUSH
71676: LD_INT 3
71678: NEG
71679: PUSH
71680: EMPTY
71681: LIST
71682: LIST
71683: PUSH
71684: LD_INT 1
71686: NEG
71687: PUSH
71688: LD_INT 3
71690: NEG
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: LD_INT 0
71698: PUSH
71699: LD_INT 3
71701: NEG
71702: PUSH
71703: EMPTY
71704: LIST
71705: LIST
71706: PUSH
71707: LD_INT 1
71709: PUSH
71710: LD_INT 2
71712: NEG
71713: PUSH
71714: EMPTY
71715: LIST
71716: LIST
71717: PUSH
71718: LD_INT 3
71720: PUSH
71721: LD_INT 2
71723: PUSH
71724: EMPTY
71725: LIST
71726: LIST
71727: PUSH
71728: LD_INT 3
71730: PUSH
71731: LD_INT 3
71733: PUSH
71734: EMPTY
71735: LIST
71736: LIST
71737: PUSH
71738: LD_INT 2
71740: PUSH
71741: LD_INT 3
71743: PUSH
71744: EMPTY
71745: LIST
71746: LIST
71747: PUSH
71748: LD_INT 1
71750: PUSH
71751: LD_INT 3
71753: PUSH
71754: EMPTY
71755: LIST
71756: LIST
71757: PUSH
71758: LD_INT 0
71760: PUSH
71761: LD_INT 3
71763: PUSH
71764: EMPTY
71765: LIST
71766: LIST
71767: PUSH
71768: LD_INT 1
71770: NEG
71771: PUSH
71772: LD_INT 2
71774: PUSH
71775: EMPTY
71776: LIST
71777: LIST
71778: PUSH
71779: LD_INT 3
71781: NEG
71782: PUSH
71783: LD_INT 2
71785: NEG
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: PUSH
71791: LD_INT 3
71793: NEG
71794: PUSH
71795: LD_INT 3
71797: NEG
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: LIST
71807: LIST
71808: LIST
71809: LIST
71810: LIST
71811: LIST
71812: LIST
71813: LIST
71814: LIST
71815: LIST
71816: LIST
71817: LIST
71818: LIST
71819: LIST
71820: LIST
71821: LIST
71822: LIST
71823: LIST
71824: LIST
71825: LIST
71826: LIST
71827: LIST
71828: LIST
71829: LIST
71830: LIST
71831: LIST
71832: LIST
71833: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71834: LD_ADDR_VAR 0 43
71838: PUSH
71839: LD_INT 0
71841: PUSH
71842: LD_INT 0
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: PUSH
71849: LD_INT 0
71851: PUSH
71852: LD_INT 1
71854: NEG
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: PUSH
71860: LD_INT 1
71862: PUSH
71863: LD_INT 0
71865: PUSH
71866: EMPTY
71867: LIST
71868: LIST
71869: PUSH
71870: LD_INT 1
71872: PUSH
71873: LD_INT 1
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: PUSH
71880: LD_INT 0
71882: PUSH
71883: LD_INT 1
71885: PUSH
71886: EMPTY
71887: LIST
71888: LIST
71889: PUSH
71890: LD_INT 1
71892: NEG
71893: PUSH
71894: LD_INT 0
71896: PUSH
71897: EMPTY
71898: LIST
71899: LIST
71900: PUSH
71901: LD_INT 1
71903: NEG
71904: PUSH
71905: LD_INT 1
71907: NEG
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: PUSH
71913: LD_INT 1
71915: NEG
71916: PUSH
71917: LD_INT 2
71919: NEG
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: PUSH
71925: LD_INT 0
71927: PUSH
71928: LD_INT 2
71930: NEG
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: PUSH
71936: LD_INT 1
71938: PUSH
71939: LD_INT 1
71941: NEG
71942: PUSH
71943: EMPTY
71944: LIST
71945: LIST
71946: PUSH
71947: LD_INT 2
71949: PUSH
71950: LD_INT 0
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: PUSH
71957: LD_INT 2
71959: PUSH
71960: LD_INT 1
71962: PUSH
71963: EMPTY
71964: LIST
71965: LIST
71966: PUSH
71967: LD_INT 1
71969: PUSH
71970: LD_INT 2
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: LD_INT 0
71979: PUSH
71980: LD_INT 2
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: PUSH
71987: LD_INT 1
71989: NEG
71990: PUSH
71991: LD_INT 1
71993: PUSH
71994: EMPTY
71995: LIST
71996: LIST
71997: PUSH
71998: LD_INT 2
72000: NEG
72001: PUSH
72002: LD_INT 0
72004: PUSH
72005: EMPTY
72006: LIST
72007: LIST
72008: PUSH
72009: LD_INT 2
72011: NEG
72012: PUSH
72013: LD_INT 1
72015: NEG
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PUSH
72021: LD_INT 1
72023: NEG
72024: PUSH
72025: LD_INT 3
72027: NEG
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PUSH
72033: LD_INT 0
72035: PUSH
72036: LD_INT 3
72038: NEG
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: PUSH
72044: LD_INT 1
72046: PUSH
72047: LD_INT 2
72049: NEG
72050: PUSH
72051: EMPTY
72052: LIST
72053: LIST
72054: PUSH
72055: LD_INT 2
72057: PUSH
72058: LD_INT 1
72060: NEG
72061: PUSH
72062: EMPTY
72063: LIST
72064: LIST
72065: PUSH
72066: LD_INT 3
72068: PUSH
72069: LD_INT 0
72071: PUSH
72072: EMPTY
72073: LIST
72074: LIST
72075: PUSH
72076: LD_INT 3
72078: PUSH
72079: LD_INT 1
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: PUSH
72086: LD_INT 1
72088: PUSH
72089: LD_INT 3
72091: PUSH
72092: EMPTY
72093: LIST
72094: LIST
72095: PUSH
72096: LD_INT 0
72098: PUSH
72099: LD_INT 3
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: PUSH
72106: LD_INT 1
72108: NEG
72109: PUSH
72110: LD_INT 2
72112: PUSH
72113: EMPTY
72114: LIST
72115: LIST
72116: PUSH
72117: LD_INT 2
72119: NEG
72120: PUSH
72121: LD_INT 1
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: PUSH
72128: LD_INT 3
72130: NEG
72131: PUSH
72132: LD_INT 0
72134: PUSH
72135: EMPTY
72136: LIST
72137: LIST
72138: PUSH
72139: LD_INT 3
72141: NEG
72142: PUSH
72143: LD_INT 1
72145: NEG
72146: PUSH
72147: EMPTY
72148: LIST
72149: LIST
72150: PUSH
72151: EMPTY
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: LIST
72177: LIST
72178: LIST
72179: LIST
72180: LIST
72181: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72182: LD_ADDR_VAR 0 44
72186: PUSH
72187: LD_INT 0
72189: PUSH
72190: LD_INT 0
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: PUSH
72197: LD_INT 0
72199: PUSH
72200: LD_INT 1
72202: NEG
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: PUSH
72208: LD_INT 1
72210: PUSH
72211: LD_INT 0
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: PUSH
72218: LD_INT 1
72220: PUSH
72221: LD_INT 1
72223: PUSH
72224: EMPTY
72225: LIST
72226: LIST
72227: PUSH
72228: LD_INT 0
72230: PUSH
72231: LD_INT 1
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: PUSH
72238: LD_INT 1
72240: NEG
72241: PUSH
72242: LD_INT 0
72244: PUSH
72245: EMPTY
72246: LIST
72247: LIST
72248: PUSH
72249: LD_INT 1
72251: NEG
72252: PUSH
72253: LD_INT 1
72255: NEG
72256: PUSH
72257: EMPTY
72258: LIST
72259: LIST
72260: PUSH
72261: LD_INT 1
72263: NEG
72264: PUSH
72265: LD_INT 2
72267: NEG
72268: PUSH
72269: EMPTY
72270: LIST
72271: LIST
72272: PUSH
72273: LD_INT 1
72275: PUSH
72276: LD_INT 1
72278: NEG
72279: PUSH
72280: EMPTY
72281: LIST
72282: LIST
72283: PUSH
72284: LD_INT 2
72286: PUSH
72287: LD_INT 0
72289: PUSH
72290: EMPTY
72291: LIST
72292: LIST
72293: PUSH
72294: LD_INT 2
72296: PUSH
72297: LD_INT 1
72299: PUSH
72300: EMPTY
72301: LIST
72302: LIST
72303: PUSH
72304: LD_INT 2
72306: PUSH
72307: LD_INT 2
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: LD_INT 1
72316: PUSH
72317: LD_INT 2
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: PUSH
72324: LD_INT 1
72326: NEG
72327: PUSH
72328: LD_INT 1
72330: PUSH
72331: EMPTY
72332: LIST
72333: LIST
72334: PUSH
72335: LD_INT 2
72337: NEG
72338: PUSH
72339: LD_INT 0
72341: PUSH
72342: EMPTY
72343: LIST
72344: LIST
72345: PUSH
72346: LD_INT 2
72348: NEG
72349: PUSH
72350: LD_INT 1
72352: NEG
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: PUSH
72358: LD_INT 2
72360: NEG
72361: PUSH
72362: LD_INT 2
72364: NEG
72365: PUSH
72366: EMPTY
72367: LIST
72368: LIST
72369: PUSH
72370: LD_INT 2
72372: NEG
72373: PUSH
72374: LD_INT 3
72376: NEG
72377: PUSH
72378: EMPTY
72379: LIST
72380: LIST
72381: PUSH
72382: LD_INT 2
72384: PUSH
72385: LD_INT 1
72387: NEG
72388: PUSH
72389: EMPTY
72390: LIST
72391: LIST
72392: PUSH
72393: LD_INT 3
72395: PUSH
72396: LD_INT 0
72398: PUSH
72399: EMPTY
72400: LIST
72401: LIST
72402: PUSH
72403: LD_INT 3
72405: PUSH
72406: LD_INT 1
72408: PUSH
72409: EMPTY
72410: LIST
72411: LIST
72412: PUSH
72413: LD_INT 3
72415: PUSH
72416: LD_INT 2
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: PUSH
72423: LD_INT 3
72425: PUSH
72426: LD_INT 3
72428: PUSH
72429: EMPTY
72430: LIST
72431: LIST
72432: PUSH
72433: LD_INT 2
72435: PUSH
72436: LD_INT 3
72438: PUSH
72439: EMPTY
72440: LIST
72441: LIST
72442: PUSH
72443: LD_INT 2
72445: NEG
72446: PUSH
72447: LD_INT 1
72449: PUSH
72450: EMPTY
72451: LIST
72452: LIST
72453: PUSH
72454: LD_INT 3
72456: NEG
72457: PUSH
72458: LD_INT 0
72460: PUSH
72461: EMPTY
72462: LIST
72463: LIST
72464: PUSH
72465: LD_INT 3
72467: NEG
72468: PUSH
72469: LD_INT 1
72471: NEG
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: PUSH
72477: LD_INT 3
72479: NEG
72480: PUSH
72481: LD_INT 2
72483: NEG
72484: PUSH
72485: EMPTY
72486: LIST
72487: LIST
72488: PUSH
72489: LD_INT 3
72491: NEG
72492: PUSH
72493: LD_INT 3
72495: NEG
72496: PUSH
72497: EMPTY
72498: LIST
72499: LIST
72500: PUSH
72501: EMPTY
72502: LIST
72503: LIST
72504: LIST
72505: LIST
72506: LIST
72507: LIST
72508: LIST
72509: LIST
72510: LIST
72511: LIST
72512: LIST
72513: LIST
72514: LIST
72515: LIST
72516: LIST
72517: LIST
72518: LIST
72519: LIST
72520: LIST
72521: LIST
72522: LIST
72523: LIST
72524: LIST
72525: LIST
72526: LIST
72527: LIST
72528: LIST
72529: LIST
72530: LIST
72531: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72532: LD_ADDR_VAR 0 45
72536: PUSH
72537: LD_INT 0
72539: PUSH
72540: LD_INT 0
72542: PUSH
72543: EMPTY
72544: LIST
72545: LIST
72546: PUSH
72547: LD_INT 0
72549: PUSH
72550: LD_INT 1
72552: NEG
72553: PUSH
72554: EMPTY
72555: LIST
72556: LIST
72557: PUSH
72558: LD_INT 1
72560: PUSH
72561: LD_INT 0
72563: PUSH
72564: EMPTY
72565: LIST
72566: LIST
72567: PUSH
72568: LD_INT 1
72570: PUSH
72571: LD_INT 1
72573: PUSH
72574: EMPTY
72575: LIST
72576: LIST
72577: PUSH
72578: LD_INT 0
72580: PUSH
72581: LD_INT 1
72583: PUSH
72584: EMPTY
72585: LIST
72586: LIST
72587: PUSH
72588: LD_INT 1
72590: NEG
72591: PUSH
72592: LD_INT 0
72594: PUSH
72595: EMPTY
72596: LIST
72597: LIST
72598: PUSH
72599: LD_INT 1
72601: NEG
72602: PUSH
72603: LD_INT 1
72605: NEG
72606: PUSH
72607: EMPTY
72608: LIST
72609: LIST
72610: PUSH
72611: LD_INT 1
72613: NEG
72614: PUSH
72615: LD_INT 2
72617: NEG
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: PUSH
72623: LD_INT 0
72625: PUSH
72626: LD_INT 2
72628: NEG
72629: PUSH
72630: EMPTY
72631: LIST
72632: LIST
72633: PUSH
72634: LD_INT 1
72636: PUSH
72637: LD_INT 1
72639: NEG
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: PUSH
72645: LD_INT 2
72647: PUSH
72648: LD_INT 1
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: PUSH
72655: LD_INT 2
72657: PUSH
72658: LD_INT 2
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: PUSH
72665: LD_INT 1
72667: PUSH
72668: LD_INT 2
72670: PUSH
72671: EMPTY
72672: LIST
72673: LIST
72674: PUSH
72675: LD_INT 0
72677: PUSH
72678: LD_INT 2
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: PUSH
72685: LD_INT 1
72687: NEG
72688: PUSH
72689: LD_INT 1
72691: PUSH
72692: EMPTY
72693: LIST
72694: LIST
72695: PUSH
72696: LD_INT 2
72698: NEG
72699: PUSH
72700: LD_INT 1
72702: NEG
72703: PUSH
72704: EMPTY
72705: LIST
72706: LIST
72707: PUSH
72708: LD_INT 2
72710: NEG
72711: PUSH
72712: LD_INT 2
72714: NEG
72715: PUSH
72716: EMPTY
72717: LIST
72718: LIST
72719: PUSH
72720: LD_INT 2
72722: NEG
72723: PUSH
72724: LD_INT 3
72726: NEG
72727: PUSH
72728: EMPTY
72729: LIST
72730: LIST
72731: PUSH
72732: LD_INT 1
72734: NEG
72735: PUSH
72736: LD_INT 3
72738: NEG
72739: PUSH
72740: EMPTY
72741: LIST
72742: LIST
72743: PUSH
72744: LD_INT 0
72746: PUSH
72747: LD_INT 3
72749: NEG
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: PUSH
72755: LD_INT 1
72757: PUSH
72758: LD_INT 2
72760: NEG
72761: PUSH
72762: EMPTY
72763: LIST
72764: LIST
72765: PUSH
72766: LD_INT 3
72768: PUSH
72769: LD_INT 2
72771: PUSH
72772: EMPTY
72773: LIST
72774: LIST
72775: PUSH
72776: LD_INT 3
72778: PUSH
72779: LD_INT 3
72781: PUSH
72782: EMPTY
72783: LIST
72784: LIST
72785: PUSH
72786: LD_INT 2
72788: PUSH
72789: LD_INT 3
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: PUSH
72796: LD_INT 1
72798: PUSH
72799: LD_INT 3
72801: PUSH
72802: EMPTY
72803: LIST
72804: LIST
72805: PUSH
72806: LD_INT 0
72808: PUSH
72809: LD_INT 3
72811: PUSH
72812: EMPTY
72813: LIST
72814: LIST
72815: PUSH
72816: LD_INT 1
72818: NEG
72819: PUSH
72820: LD_INT 2
72822: PUSH
72823: EMPTY
72824: LIST
72825: LIST
72826: PUSH
72827: LD_INT 3
72829: NEG
72830: PUSH
72831: LD_INT 2
72833: NEG
72834: PUSH
72835: EMPTY
72836: LIST
72837: LIST
72838: PUSH
72839: LD_INT 3
72841: NEG
72842: PUSH
72843: LD_INT 3
72845: NEG
72846: PUSH
72847: EMPTY
72848: LIST
72849: LIST
72850: PUSH
72851: EMPTY
72852: LIST
72853: LIST
72854: LIST
72855: LIST
72856: LIST
72857: LIST
72858: LIST
72859: LIST
72860: LIST
72861: LIST
72862: LIST
72863: LIST
72864: LIST
72865: LIST
72866: LIST
72867: LIST
72868: LIST
72869: LIST
72870: LIST
72871: LIST
72872: LIST
72873: LIST
72874: LIST
72875: LIST
72876: LIST
72877: LIST
72878: LIST
72879: LIST
72880: LIST
72881: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72882: LD_ADDR_VAR 0 46
72886: PUSH
72887: LD_INT 0
72889: PUSH
72890: LD_INT 0
72892: PUSH
72893: EMPTY
72894: LIST
72895: LIST
72896: PUSH
72897: LD_INT 0
72899: PUSH
72900: LD_INT 1
72902: NEG
72903: PUSH
72904: EMPTY
72905: LIST
72906: LIST
72907: PUSH
72908: LD_INT 1
72910: PUSH
72911: LD_INT 0
72913: PUSH
72914: EMPTY
72915: LIST
72916: LIST
72917: PUSH
72918: LD_INT 1
72920: PUSH
72921: LD_INT 1
72923: PUSH
72924: EMPTY
72925: LIST
72926: LIST
72927: PUSH
72928: LD_INT 0
72930: PUSH
72931: LD_INT 1
72933: PUSH
72934: EMPTY
72935: LIST
72936: LIST
72937: PUSH
72938: LD_INT 1
72940: NEG
72941: PUSH
72942: LD_INT 0
72944: PUSH
72945: EMPTY
72946: LIST
72947: LIST
72948: PUSH
72949: LD_INT 1
72951: NEG
72952: PUSH
72953: LD_INT 1
72955: NEG
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: LD_INT 1
72963: NEG
72964: PUSH
72965: LD_INT 2
72967: NEG
72968: PUSH
72969: EMPTY
72970: LIST
72971: LIST
72972: PUSH
72973: LD_INT 0
72975: PUSH
72976: LD_INT 2
72978: NEG
72979: PUSH
72980: EMPTY
72981: LIST
72982: LIST
72983: PUSH
72984: LD_INT 1
72986: PUSH
72987: LD_INT 1
72989: NEG
72990: PUSH
72991: EMPTY
72992: LIST
72993: LIST
72994: PUSH
72995: LD_INT 2
72997: PUSH
72998: LD_INT 0
73000: PUSH
73001: EMPTY
73002: LIST
73003: LIST
73004: PUSH
73005: LD_INT 2
73007: PUSH
73008: LD_INT 1
73010: PUSH
73011: EMPTY
73012: LIST
73013: LIST
73014: PUSH
73015: LD_INT 1
73017: PUSH
73018: LD_INT 2
73020: PUSH
73021: EMPTY
73022: LIST
73023: LIST
73024: PUSH
73025: LD_INT 0
73027: PUSH
73028: LD_INT 2
73030: PUSH
73031: EMPTY
73032: LIST
73033: LIST
73034: PUSH
73035: LD_INT 1
73037: NEG
73038: PUSH
73039: LD_INT 1
73041: PUSH
73042: EMPTY
73043: LIST
73044: LIST
73045: PUSH
73046: LD_INT 2
73048: NEG
73049: PUSH
73050: LD_INT 0
73052: PUSH
73053: EMPTY
73054: LIST
73055: LIST
73056: PUSH
73057: LD_INT 2
73059: NEG
73060: PUSH
73061: LD_INT 1
73063: NEG
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: PUSH
73069: LD_INT 1
73071: NEG
73072: PUSH
73073: LD_INT 3
73075: NEG
73076: PUSH
73077: EMPTY
73078: LIST
73079: LIST
73080: PUSH
73081: LD_INT 0
73083: PUSH
73084: LD_INT 3
73086: NEG
73087: PUSH
73088: EMPTY
73089: LIST
73090: LIST
73091: PUSH
73092: LD_INT 1
73094: PUSH
73095: LD_INT 2
73097: NEG
73098: PUSH
73099: EMPTY
73100: LIST
73101: LIST
73102: PUSH
73103: LD_INT 2
73105: PUSH
73106: LD_INT 1
73108: NEG
73109: PUSH
73110: EMPTY
73111: LIST
73112: LIST
73113: PUSH
73114: LD_INT 3
73116: PUSH
73117: LD_INT 0
73119: PUSH
73120: EMPTY
73121: LIST
73122: LIST
73123: PUSH
73124: LD_INT 3
73126: PUSH
73127: LD_INT 1
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: PUSH
73134: LD_INT 1
73136: PUSH
73137: LD_INT 3
73139: PUSH
73140: EMPTY
73141: LIST
73142: LIST
73143: PUSH
73144: LD_INT 0
73146: PUSH
73147: LD_INT 3
73149: PUSH
73150: EMPTY
73151: LIST
73152: LIST
73153: PUSH
73154: LD_INT 1
73156: NEG
73157: PUSH
73158: LD_INT 2
73160: PUSH
73161: EMPTY
73162: LIST
73163: LIST
73164: PUSH
73165: LD_INT 2
73167: NEG
73168: PUSH
73169: LD_INT 1
73171: PUSH
73172: EMPTY
73173: LIST
73174: LIST
73175: PUSH
73176: LD_INT 3
73178: NEG
73179: PUSH
73180: LD_INT 0
73182: PUSH
73183: EMPTY
73184: LIST
73185: LIST
73186: PUSH
73187: LD_INT 3
73189: NEG
73190: PUSH
73191: LD_INT 1
73193: NEG
73194: PUSH
73195: EMPTY
73196: LIST
73197: LIST
73198: PUSH
73199: EMPTY
73200: LIST
73201: LIST
73202: LIST
73203: LIST
73204: LIST
73205: LIST
73206: LIST
73207: LIST
73208: LIST
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: LIST
73214: LIST
73215: LIST
73216: LIST
73217: LIST
73218: LIST
73219: LIST
73220: LIST
73221: LIST
73222: LIST
73223: LIST
73224: LIST
73225: LIST
73226: LIST
73227: LIST
73228: LIST
73229: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73230: LD_ADDR_VAR 0 47
73234: PUSH
73235: LD_INT 0
73237: PUSH
73238: LD_INT 0
73240: PUSH
73241: EMPTY
73242: LIST
73243: LIST
73244: PUSH
73245: LD_INT 0
73247: PUSH
73248: LD_INT 1
73250: NEG
73251: PUSH
73252: EMPTY
73253: LIST
73254: LIST
73255: PUSH
73256: LD_INT 1
73258: PUSH
73259: LD_INT 0
73261: PUSH
73262: EMPTY
73263: LIST
73264: LIST
73265: PUSH
73266: LD_INT 1
73268: PUSH
73269: LD_INT 1
73271: PUSH
73272: EMPTY
73273: LIST
73274: LIST
73275: PUSH
73276: LD_INT 0
73278: PUSH
73279: LD_INT 1
73281: PUSH
73282: EMPTY
73283: LIST
73284: LIST
73285: PUSH
73286: LD_INT 1
73288: NEG
73289: PUSH
73290: LD_INT 0
73292: PUSH
73293: EMPTY
73294: LIST
73295: LIST
73296: PUSH
73297: LD_INT 1
73299: NEG
73300: PUSH
73301: LD_INT 1
73303: NEG
73304: PUSH
73305: EMPTY
73306: LIST
73307: LIST
73308: PUSH
73309: LD_INT 1
73311: NEG
73312: PUSH
73313: LD_INT 2
73315: NEG
73316: PUSH
73317: EMPTY
73318: LIST
73319: LIST
73320: PUSH
73321: LD_INT 0
73323: PUSH
73324: LD_INT 2
73326: NEG
73327: PUSH
73328: EMPTY
73329: LIST
73330: LIST
73331: PUSH
73332: LD_INT 1
73334: PUSH
73335: LD_INT 1
73337: NEG
73338: PUSH
73339: EMPTY
73340: LIST
73341: LIST
73342: PUSH
73343: LD_INT 2
73345: NEG
73346: PUSH
73347: LD_INT 1
73349: NEG
73350: PUSH
73351: EMPTY
73352: LIST
73353: LIST
73354: PUSH
73355: LD_INT 2
73357: NEG
73358: PUSH
73359: LD_INT 2
73361: NEG
73362: PUSH
73363: EMPTY
73364: LIST
73365: LIST
73366: PUSH
73367: EMPTY
73368: LIST
73369: LIST
73370: LIST
73371: LIST
73372: LIST
73373: LIST
73374: LIST
73375: LIST
73376: LIST
73377: LIST
73378: LIST
73379: LIST
73380: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
73381: LD_ADDR_VAR 0 48
73385: PUSH
73386: LD_INT 0
73388: PUSH
73389: LD_INT 0
73391: PUSH
73392: EMPTY
73393: LIST
73394: LIST
73395: PUSH
73396: LD_INT 0
73398: PUSH
73399: LD_INT 1
73401: NEG
73402: PUSH
73403: EMPTY
73404: LIST
73405: LIST
73406: PUSH
73407: LD_INT 1
73409: PUSH
73410: LD_INT 0
73412: PUSH
73413: EMPTY
73414: LIST
73415: LIST
73416: PUSH
73417: LD_INT 1
73419: PUSH
73420: LD_INT 1
73422: PUSH
73423: EMPTY
73424: LIST
73425: LIST
73426: PUSH
73427: LD_INT 0
73429: PUSH
73430: LD_INT 1
73432: PUSH
73433: EMPTY
73434: LIST
73435: LIST
73436: PUSH
73437: LD_INT 1
73439: NEG
73440: PUSH
73441: LD_INT 0
73443: PUSH
73444: EMPTY
73445: LIST
73446: LIST
73447: PUSH
73448: LD_INT 1
73450: NEG
73451: PUSH
73452: LD_INT 1
73454: NEG
73455: PUSH
73456: EMPTY
73457: LIST
73458: LIST
73459: PUSH
73460: LD_INT 1
73462: NEG
73463: PUSH
73464: LD_INT 2
73466: NEG
73467: PUSH
73468: EMPTY
73469: LIST
73470: LIST
73471: PUSH
73472: LD_INT 0
73474: PUSH
73475: LD_INT 2
73477: NEG
73478: PUSH
73479: EMPTY
73480: LIST
73481: LIST
73482: PUSH
73483: LD_INT 1
73485: PUSH
73486: LD_INT 1
73488: NEG
73489: PUSH
73490: EMPTY
73491: LIST
73492: LIST
73493: PUSH
73494: LD_INT 2
73496: PUSH
73497: LD_INT 0
73499: PUSH
73500: EMPTY
73501: LIST
73502: LIST
73503: PUSH
73504: LD_INT 2
73506: PUSH
73507: LD_INT 1
73509: PUSH
73510: EMPTY
73511: LIST
73512: LIST
73513: PUSH
73514: EMPTY
73515: LIST
73516: LIST
73517: LIST
73518: LIST
73519: LIST
73520: LIST
73521: LIST
73522: LIST
73523: LIST
73524: LIST
73525: LIST
73526: LIST
73527: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
73528: LD_ADDR_VAR 0 49
73532: PUSH
73533: LD_INT 0
73535: PUSH
73536: LD_INT 0
73538: PUSH
73539: EMPTY
73540: LIST
73541: LIST
73542: PUSH
73543: LD_INT 0
73545: PUSH
73546: LD_INT 1
73548: NEG
73549: PUSH
73550: EMPTY
73551: LIST
73552: LIST
73553: PUSH
73554: LD_INT 1
73556: PUSH
73557: LD_INT 0
73559: PUSH
73560: EMPTY
73561: LIST
73562: LIST
73563: PUSH
73564: LD_INT 1
73566: PUSH
73567: LD_INT 1
73569: PUSH
73570: EMPTY
73571: LIST
73572: LIST
73573: PUSH
73574: LD_INT 0
73576: PUSH
73577: LD_INT 1
73579: PUSH
73580: EMPTY
73581: LIST
73582: LIST
73583: PUSH
73584: LD_INT 1
73586: NEG
73587: PUSH
73588: LD_INT 0
73590: PUSH
73591: EMPTY
73592: LIST
73593: LIST
73594: PUSH
73595: LD_INT 1
73597: NEG
73598: PUSH
73599: LD_INT 1
73601: NEG
73602: PUSH
73603: EMPTY
73604: LIST
73605: LIST
73606: PUSH
73607: LD_INT 1
73609: PUSH
73610: LD_INT 1
73612: NEG
73613: PUSH
73614: EMPTY
73615: LIST
73616: LIST
73617: PUSH
73618: LD_INT 2
73620: PUSH
73621: LD_INT 0
73623: PUSH
73624: EMPTY
73625: LIST
73626: LIST
73627: PUSH
73628: LD_INT 2
73630: PUSH
73631: LD_INT 1
73633: PUSH
73634: EMPTY
73635: LIST
73636: LIST
73637: PUSH
73638: LD_INT 2
73640: PUSH
73641: LD_INT 2
73643: PUSH
73644: EMPTY
73645: LIST
73646: LIST
73647: PUSH
73648: LD_INT 1
73650: PUSH
73651: LD_INT 2
73653: PUSH
73654: EMPTY
73655: LIST
73656: LIST
73657: PUSH
73658: EMPTY
73659: LIST
73660: LIST
73661: LIST
73662: LIST
73663: LIST
73664: LIST
73665: LIST
73666: LIST
73667: LIST
73668: LIST
73669: LIST
73670: LIST
73671: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
73672: LD_ADDR_VAR 0 50
73676: PUSH
73677: LD_INT 0
73679: PUSH
73680: LD_INT 0
73682: PUSH
73683: EMPTY
73684: LIST
73685: LIST
73686: PUSH
73687: LD_INT 0
73689: PUSH
73690: LD_INT 1
73692: NEG
73693: PUSH
73694: EMPTY
73695: LIST
73696: LIST
73697: PUSH
73698: LD_INT 1
73700: PUSH
73701: LD_INT 0
73703: PUSH
73704: EMPTY
73705: LIST
73706: LIST
73707: PUSH
73708: LD_INT 1
73710: PUSH
73711: LD_INT 1
73713: PUSH
73714: EMPTY
73715: LIST
73716: LIST
73717: PUSH
73718: LD_INT 0
73720: PUSH
73721: LD_INT 1
73723: PUSH
73724: EMPTY
73725: LIST
73726: LIST
73727: PUSH
73728: LD_INT 1
73730: NEG
73731: PUSH
73732: LD_INT 0
73734: PUSH
73735: EMPTY
73736: LIST
73737: LIST
73738: PUSH
73739: LD_INT 1
73741: NEG
73742: PUSH
73743: LD_INT 1
73745: NEG
73746: PUSH
73747: EMPTY
73748: LIST
73749: LIST
73750: PUSH
73751: LD_INT 2
73753: PUSH
73754: LD_INT 1
73756: PUSH
73757: EMPTY
73758: LIST
73759: LIST
73760: PUSH
73761: LD_INT 2
73763: PUSH
73764: LD_INT 2
73766: PUSH
73767: EMPTY
73768: LIST
73769: LIST
73770: PUSH
73771: LD_INT 1
73773: PUSH
73774: LD_INT 2
73776: PUSH
73777: EMPTY
73778: LIST
73779: LIST
73780: PUSH
73781: LD_INT 0
73783: PUSH
73784: LD_INT 2
73786: PUSH
73787: EMPTY
73788: LIST
73789: LIST
73790: PUSH
73791: LD_INT 1
73793: NEG
73794: PUSH
73795: LD_INT 1
73797: PUSH
73798: EMPTY
73799: LIST
73800: LIST
73801: PUSH
73802: EMPTY
73803: LIST
73804: LIST
73805: LIST
73806: LIST
73807: LIST
73808: LIST
73809: LIST
73810: LIST
73811: LIST
73812: LIST
73813: LIST
73814: LIST
73815: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
73816: LD_ADDR_VAR 0 51
73820: PUSH
73821: LD_INT 0
73823: PUSH
73824: LD_INT 0
73826: PUSH
73827: EMPTY
73828: LIST
73829: LIST
73830: PUSH
73831: LD_INT 0
73833: PUSH
73834: LD_INT 1
73836: NEG
73837: PUSH
73838: EMPTY
73839: LIST
73840: LIST
73841: PUSH
73842: LD_INT 1
73844: PUSH
73845: LD_INT 0
73847: PUSH
73848: EMPTY
73849: LIST
73850: LIST
73851: PUSH
73852: LD_INT 1
73854: PUSH
73855: LD_INT 1
73857: PUSH
73858: EMPTY
73859: LIST
73860: LIST
73861: PUSH
73862: LD_INT 0
73864: PUSH
73865: LD_INT 1
73867: PUSH
73868: EMPTY
73869: LIST
73870: LIST
73871: PUSH
73872: LD_INT 1
73874: NEG
73875: PUSH
73876: LD_INT 0
73878: PUSH
73879: EMPTY
73880: LIST
73881: LIST
73882: PUSH
73883: LD_INT 1
73885: NEG
73886: PUSH
73887: LD_INT 1
73889: NEG
73890: PUSH
73891: EMPTY
73892: LIST
73893: LIST
73894: PUSH
73895: LD_INT 1
73897: PUSH
73898: LD_INT 2
73900: PUSH
73901: EMPTY
73902: LIST
73903: LIST
73904: PUSH
73905: LD_INT 0
73907: PUSH
73908: LD_INT 2
73910: PUSH
73911: EMPTY
73912: LIST
73913: LIST
73914: PUSH
73915: LD_INT 1
73917: NEG
73918: PUSH
73919: LD_INT 1
73921: PUSH
73922: EMPTY
73923: LIST
73924: LIST
73925: PUSH
73926: LD_INT 2
73928: NEG
73929: PUSH
73930: LD_INT 0
73932: PUSH
73933: EMPTY
73934: LIST
73935: LIST
73936: PUSH
73937: LD_INT 2
73939: NEG
73940: PUSH
73941: LD_INT 1
73943: NEG
73944: PUSH
73945: EMPTY
73946: LIST
73947: LIST
73948: PUSH
73949: EMPTY
73950: LIST
73951: LIST
73952: LIST
73953: LIST
73954: LIST
73955: LIST
73956: LIST
73957: LIST
73958: LIST
73959: LIST
73960: LIST
73961: LIST
73962: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73963: LD_ADDR_VAR 0 52
73967: PUSH
73968: LD_INT 0
73970: PUSH
73971: LD_INT 0
73973: PUSH
73974: EMPTY
73975: LIST
73976: LIST
73977: PUSH
73978: LD_INT 0
73980: PUSH
73981: LD_INT 1
73983: NEG
73984: PUSH
73985: EMPTY
73986: LIST
73987: LIST
73988: PUSH
73989: LD_INT 1
73991: PUSH
73992: LD_INT 0
73994: PUSH
73995: EMPTY
73996: LIST
73997: LIST
73998: PUSH
73999: LD_INT 1
74001: PUSH
74002: LD_INT 1
74004: PUSH
74005: EMPTY
74006: LIST
74007: LIST
74008: PUSH
74009: LD_INT 0
74011: PUSH
74012: LD_INT 1
74014: PUSH
74015: EMPTY
74016: LIST
74017: LIST
74018: PUSH
74019: LD_INT 1
74021: NEG
74022: PUSH
74023: LD_INT 0
74025: PUSH
74026: EMPTY
74027: LIST
74028: LIST
74029: PUSH
74030: LD_INT 1
74032: NEG
74033: PUSH
74034: LD_INT 1
74036: NEG
74037: PUSH
74038: EMPTY
74039: LIST
74040: LIST
74041: PUSH
74042: LD_INT 1
74044: NEG
74045: PUSH
74046: LD_INT 2
74048: NEG
74049: PUSH
74050: EMPTY
74051: LIST
74052: LIST
74053: PUSH
74054: LD_INT 1
74056: NEG
74057: PUSH
74058: LD_INT 1
74060: PUSH
74061: EMPTY
74062: LIST
74063: LIST
74064: PUSH
74065: LD_INT 2
74067: NEG
74068: PUSH
74069: LD_INT 0
74071: PUSH
74072: EMPTY
74073: LIST
74074: LIST
74075: PUSH
74076: LD_INT 2
74078: NEG
74079: PUSH
74080: LD_INT 1
74082: NEG
74083: PUSH
74084: EMPTY
74085: LIST
74086: LIST
74087: PUSH
74088: LD_INT 2
74090: NEG
74091: PUSH
74092: LD_INT 2
74094: NEG
74095: PUSH
74096: EMPTY
74097: LIST
74098: LIST
74099: PUSH
74100: EMPTY
74101: LIST
74102: LIST
74103: LIST
74104: LIST
74105: LIST
74106: LIST
74107: LIST
74108: LIST
74109: LIST
74110: LIST
74111: LIST
74112: LIST
74113: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74114: LD_ADDR_VAR 0 53
74118: PUSH
74119: LD_INT 0
74121: PUSH
74122: LD_INT 0
74124: PUSH
74125: EMPTY
74126: LIST
74127: LIST
74128: PUSH
74129: LD_INT 0
74131: PUSH
74132: LD_INT 1
74134: NEG
74135: PUSH
74136: EMPTY
74137: LIST
74138: LIST
74139: PUSH
74140: LD_INT 1
74142: PUSH
74143: LD_INT 0
74145: PUSH
74146: EMPTY
74147: LIST
74148: LIST
74149: PUSH
74150: LD_INT 1
74152: PUSH
74153: LD_INT 1
74155: PUSH
74156: EMPTY
74157: LIST
74158: LIST
74159: PUSH
74160: LD_INT 0
74162: PUSH
74163: LD_INT 1
74165: PUSH
74166: EMPTY
74167: LIST
74168: LIST
74169: PUSH
74170: LD_INT 1
74172: NEG
74173: PUSH
74174: LD_INT 0
74176: PUSH
74177: EMPTY
74178: LIST
74179: LIST
74180: PUSH
74181: LD_INT 1
74183: NEG
74184: PUSH
74185: LD_INT 1
74187: NEG
74188: PUSH
74189: EMPTY
74190: LIST
74191: LIST
74192: PUSH
74193: LD_INT 1
74195: NEG
74196: PUSH
74197: LD_INT 2
74199: NEG
74200: PUSH
74201: EMPTY
74202: LIST
74203: LIST
74204: PUSH
74205: LD_INT 0
74207: PUSH
74208: LD_INT 2
74210: NEG
74211: PUSH
74212: EMPTY
74213: LIST
74214: LIST
74215: PUSH
74216: LD_INT 1
74218: PUSH
74219: LD_INT 1
74221: NEG
74222: PUSH
74223: EMPTY
74224: LIST
74225: LIST
74226: PUSH
74227: LD_INT 2
74229: PUSH
74230: LD_INT 0
74232: PUSH
74233: EMPTY
74234: LIST
74235: LIST
74236: PUSH
74237: LD_INT 2
74239: PUSH
74240: LD_INT 1
74242: PUSH
74243: EMPTY
74244: LIST
74245: LIST
74246: PUSH
74247: LD_INT 2
74249: PUSH
74250: LD_INT 2
74252: PUSH
74253: EMPTY
74254: LIST
74255: LIST
74256: PUSH
74257: LD_INT 1
74259: PUSH
74260: LD_INT 2
74262: PUSH
74263: EMPTY
74264: LIST
74265: LIST
74266: PUSH
74267: LD_INT 0
74269: PUSH
74270: LD_INT 2
74272: PUSH
74273: EMPTY
74274: LIST
74275: LIST
74276: PUSH
74277: LD_INT 1
74279: NEG
74280: PUSH
74281: LD_INT 1
74283: PUSH
74284: EMPTY
74285: LIST
74286: LIST
74287: PUSH
74288: LD_INT 2
74290: NEG
74291: PUSH
74292: LD_INT 0
74294: PUSH
74295: EMPTY
74296: LIST
74297: LIST
74298: PUSH
74299: LD_INT 2
74301: NEG
74302: PUSH
74303: LD_INT 1
74305: NEG
74306: PUSH
74307: EMPTY
74308: LIST
74309: LIST
74310: PUSH
74311: LD_INT 2
74313: NEG
74314: PUSH
74315: LD_INT 2
74317: NEG
74318: PUSH
74319: EMPTY
74320: LIST
74321: LIST
74322: PUSH
74323: EMPTY
74324: LIST
74325: LIST
74326: LIST
74327: LIST
74328: LIST
74329: LIST
74330: LIST
74331: LIST
74332: LIST
74333: LIST
74334: LIST
74335: LIST
74336: LIST
74337: LIST
74338: LIST
74339: LIST
74340: LIST
74341: LIST
74342: LIST
74343: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74344: LD_ADDR_VAR 0 54
74348: PUSH
74349: LD_INT 0
74351: PUSH
74352: LD_INT 0
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: PUSH
74359: LD_INT 0
74361: PUSH
74362: LD_INT 1
74364: NEG
74365: PUSH
74366: EMPTY
74367: LIST
74368: LIST
74369: PUSH
74370: LD_INT 1
74372: PUSH
74373: LD_INT 0
74375: PUSH
74376: EMPTY
74377: LIST
74378: LIST
74379: PUSH
74380: LD_INT 1
74382: PUSH
74383: LD_INT 1
74385: PUSH
74386: EMPTY
74387: LIST
74388: LIST
74389: PUSH
74390: LD_INT 0
74392: PUSH
74393: LD_INT 1
74395: PUSH
74396: EMPTY
74397: LIST
74398: LIST
74399: PUSH
74400: LD_INT 1
74402: NEG
74403: PUSH
74404: LD_INT 0
74406: PUSH
74407: EMPTY
74408: LIST
74409: LIST
74410: PUSH
74411: LD_INT 1
74413: NEG
74414: PUSH
74415: LD_INT 1
74417: NEG
74418: PUSH
74419: EMPTY
74420: LIST
74421: LIST
74422: PUSH
74423: LD_INT 1
74425: NEG
74426: PUSH
74427: LD_INT 2
74429: NEG
74430: PUSH
74431: EMPTY
74432: LIST
74433: LIST
74434: PUSH
74435: LD_INT 0
74437: PUSH
74438: LD_INT 2
74440: NEG
74441: PUSH
74442: EMPTY
74443: LIST
74444: LIST
74445: PUSH
74446: LD_INT 1
74448: PUSH
74449: LD_INT 1
74451: NEG
74452: PUSH
74453: EMPTY
74454: LIST
74455: LIST
74456: PUSH
74457: LD_INT 2
74459: PUSH
74460: LD_INT 0
74462: PUSH
74463: EMPTY
74464: LIST
74465: LIST
74466: PUSH
74467: LD_INT 2
74469: PUSH
74470: LD_INT 1
74472: PUSH
74473: EMPTY
74474: LIST
74475: LIST
74476: PUSH
74477: LD_INT 2
74479: PUSH
74480: LD_INT 2
74482: PUSH
74483: EMPTY
74484: LIST
74485: LIST
74486: PUSH
74487: LD_INT 1
74489: PUSH
74490: LD_INT 2
74492: PUSH
74493: EMPTY
74494: LIST
74495: LIST
74496: PUSH
74497: LD_INT 0
74499: PUSH
74500: LD_INT 2
74502: PUSH
74503: EMPTY
74504: LIST
74505: LIST
74506: PUSH
74507: LD_INT 1
74509: NEG
74510: PUSH
74511: LD_INT 1
74513: PUSH
74514: EMPTY
74515: LIST
74516: LIST
74517: PUSH
74518: LD_INT 2
74520: NEG
74521: PUSH
74522: LD_INT 0
74524: PUSH
74525: EMPTY
74526: LIST
74527: LIST
74528: PUSH
74529: LD_INT 2
74531: NEG
74532: PUSH
74533: LD_INT 1
74535: NEG
74536: PUSH
74537: EMPTY
74538: LIST
74539: LIST
74540: PUSH
74541: LD_INT 2
74543: NEG
74544: PUSH
74545: LD_INT 2
74547: NEG
74548: PUSH
74549: EMPTY
74550: LIST
74551: LIST
74552: PUSH
74553: EMPTY
74554: LIST
74555: LIST
74556: LIST
74557: LIST
74558: LIST
74559: LIST
74560: LIST
74561: LIST
74562: LIST
74563: LIST
74564: LIST
74565: LIST
74566: LIST
74567: LIST
74568: LIST
74569: LIST
74570: LIST
74571: LIST
74572: LIST
74573: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74574: LD_ADDR_VAR 0 55
74578: PUSH
74579: LD_INT 0
74581: PUSH
74582: LD_INT 0
74584: PUSH
74585: EMPTY
74586: LIST
74587: LIST
74588: PUSH
74589: LD_INT 0
74591: PUSH
74592: LD_INT 1
74594: NEG
74595: PUSH
74596: EMPTY
74597: LIST
74598: LIST
74599: PUSH
74600: LD_INT 1
74602: PUSH
74603: LD_INT 0
74605: PUSH
74606: EMPTY
74607: LIST
74608: LIST
74609: PUSH
74610: LD_INT 1
74612: PUSH
74613: LD_INT 1
74615: PUSH
74616: EMPTY
74617: LIST
74618: LIST
74619: PUSH
74620: LD_INT 0
74622: PUSH
74623: LD_INT 1
74625: PUSH
74626: EMPTY
74627: LIST
74628: LIST
74629: PUSH
74630: LD_INT 1
74632: NEG
74633: PUSH
74634: LD_INT 0
74636: PUSH
74637: EMPTY
74638: LIST
74639: LIST
74640: PUSH
74641: LD_INT 1
74643: NEG
74644: PUSH
74645: LD_INT 1
74647: NEG
74648: PUSH
74649: EMPTY
74650: LIST
74651: LIST
74652: PUSH
74653: LD_INT 1
74655: NEG
74656: PUSH
74657: LD_INT 2
74659: NEG
74660: PUSH
74661: EMPTY
74662: LIST
74663: LIST
74664: PUSH
74665: LD_INT 0
74667: PUSH
74668: LD_INT 2
74670: NEG
74671: PUSH
74672: EMPTY
74673: LIST
74674: LIST
74675: PUSH
74676: LD_INT 1
74678: PUSH
74679: LD_INT 1
74681: NEG
74682: PUSH
74683: EMPTY
74684: LIST
74685: LIST
74686: PUSH
74687: LD_INT 2
74689: PUSH
74690: LD_INT 0
74692: PUSH
74693: EMPTY
74694: LIST
74695: LIST
74696: PUSH
74697: LD_INT 2
74699: PUSH
74700: LD_INT 1
74702: PUSH
74703: EMPTY
74704: LIST
74705: LIST
74706: PUSH
74707: LD_INT 2
74709: PUSH
74710: LD_INT 2
74712: PUSH
74713: EMPTY
74714: LIST
74715: LIST
74716: PUSH
74717: LD_INT 1
74719: PUSH
74720: LD_INT 2
74722: PUSH
74723: EMPTY
74724: LIST
74725: LIST
74726: PUSH
74727: LD_INT 0
74729: PUSH
74730: LD_INT 2
74732: PUSH
74733: EMPTY
74734: LIST
74735: LIST
74736: PUSH
74737: LD_INT 1
74739: NEG
74740: PUSH
74741: LD_INT 1
74743: PUSH
74744: EMPTY
74745: LIST
74746: LIST
74747: PUSH
74748: LD_INT 2
74750: NEG
74751: PUSH
74752: LD_INT 0
74754: PUSH
74755: EMPTY
74756: LIST
74757: LIST
74758: PUSH
74759: LD_INT 2
74761: NEG
74762: PUSH
74763: LD_INT 1
74765: NEG
74766: PUSH
74767: EMPTY
74768: LIST
74769: LIST
74770: PUSH
74771: LD_INT 2
74773: NEG
74774: PUSH
74775: LD_INT 2
74777: NEG
74778: PUSH
74779: EMPTY
74780: LIST
74781: LIST
74782: PUSH
74783: EMPTY
74784: LIST
74785: LIST
74786: LIST
74787: LIST
74788: LIST
74789: LIST
74790: LIST
74791: LIST
74792: LIST
74793: LIST
74794: LIST
74795: LIST
74796: LIST
74797: LIST
74798: LIST
74799: LIST
74800: LIST
74801: LIST
74802: LIST
74803: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74804: LD_ADDR_VAR 0 56
74808: PUSH
74809: LD_INT 0
74811: PUSH
74812: LD_INT 0
74814: PUSH
74815: EMPTY
74816: LIST
74817: LIST
74818: PUSH
74819: LD_INT 0
74821: PUSH
74822: LD_INT 1
74824: NEG
74825: PUSH
74826: EMPTY
74827: LIST
74828: LIST
74829: PUSH
74830: LD_INT 1
74832: PUSH
74833: LD_INT 0
74835: PUSH
74836: EMPTY
74837: LIST
74838: LIST
74839: PUSH
74840: LD_INT 1
74842: PUSH
74843: LD_INT 1
74845: PUSH
74846: EMPTY
74847: LIST
74848: LIST
74849: PUSH
74850: LD_INT 0
74852: PUSH
74853: LD_INT 1
74855: PUSH
74856: EMPTY
74857: LIST
74858: LIST
74859: PUSH
74860: LD_INT 1
74862: NEG
74863: PUSH
74864: LD_INT 0
74866: PUSH
74867: EMPTY
74868: LIST
74869: LIST
74870: PUSH
74871: LD_INT 1
74873: NEG
74874: PUSH
74875: LD_INT 1
74877: NEG
74878: PUSH
74879: EMPTY
74880: LIST
74881: LIST
74882: PUSH
74883: LD_INT 1
74885: NEG
74886: PUSH
74887: LD_INT 2
74889: NEG
74890: PUSH
74891: EMPTY
74892: LIST
74893: LIST
74894: PUSH
74895: LD_INT 0
74897: PUSH
74898: LD_INT 2
74900: NEG
74901: PUSH
74902: EMPTY
74903: LIST
74904: LIST
74905: PUSH
74906: LD_INT 1
74908: PUSH
74909: LD_INT 1
74911: NEG
74912: PUSH
74913: EMPTY
74914: LIST
74915: LIST
74916: PUSH
74917: LD_INT 2
74919: PUSH
74920: LD_INT 0
74922: PUSH
74923: EMPTY
74924: LIST
74925: LIST
74926: PUSH
74927: LD_INT 2
74929: PUSH
74930: LD_INT 1
74932: PUSH
74933: EMPTY
74934: LIST
74935: LIST
74936: PUSH
74937: LD_INT 2
74939: PUSH
74940: LD_INT 2
74942: PUSH
74943: EMPTY
74944: LIST
74945: LIST
74946: PUSH
74947: LD_INT 1
74949: PUSH
74950: LD_INT 2
74952: PUSH
74953: EMPTY
74954: LIST
74955: LIST
74956: PUSH
74957: LD_INT 0
74959: PUSH
74960: LD_INT 2
74962: PUSH
74963: EMPTY
74964: LIST
74965: LIST
74966: PUSH
74967: LD_INT 1
74969: NEG
74970: PUSH
74971: LD_INT 1
74973: PUSH
74974: EMPTY
74975: LIST
74976: LIST
74977: PUSH
74978: LD_INT 2
74980: NEG
74981: PUSH
74982: LD_INT 0
74984: PUSH
74985: EMPTY
74986: LIST
74987: LIST
74988: PUSH
74989: LD_INT 2
74991: NEG
74992: PUSH
74993: LD_INT 1
74995: NEG
74996: PUSH
74997: EMPTY
74998: LIST
74999: LIST
75000: PUSH
75001: LD_INT 2
75003: NEG
75004: PUSH
75005: LD_INT 2
75007: NEG
75008: PUSH
75009: EMPTY
75010: LIST
75011: LIST
75012: PUSH
75013: EMPTY
75014: LIST
75015: LIST
75016: LIST
75017: LIST
75018: LIST
75019: LIST
75020: LIST
75021: LIST
75022: LIST
75023: LIST
75024: LIST
75025: LIST
75026: LIST
75027: LIST
75028: LIST
75029: LIST
75030: LIST
75031: LIST
75032: LIST
75033: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75034: LD_ADDR_VAR 0 57
75038: PUSH
75039: LD_INT 0
75041: PUSH
75042: LD_INT 0
75044: PUSH
75045: EMPTY
75046: LIST
75047: LIST
75048: PUSH
75049: LD_INT 0
75051: PUSH
75052: LD_INT 1
75054: NEG
75055: PUSH
75056: EMPTY
75057: LIST
75058: LIST
75059: PUSH
75060: LD_INT 1
75062: PUSH
75063: LD_INT 0
75065: PUSH
75066: EMPTY
75067: LIST
75068: LIST
75069: PUSH
75070: LD_INT 1
75072: PUSH
75073: LD_INT 1
75075: PUSH
75076: EMPTY
75077: LIST
75078: LIST
75079: PUSH
75080: LD_INT 0
75082: PUSH
75083: LD_INT 1
75085: PUSH
75086: EMPTY
75087: LIST
75088: LIST
75089: PUSH
75090: LD_INT 1
75092: NEG
75093: PUSH
75094: LD_INT 0
75096: PUSH
75097: EMPTY
75098: LIST
75099: LIST
75100: PUSH
75101: LD_INT 1
75103: NEG
75104: PUSH
75105: LD_INT 1
75107: NEG
75108: PUSH
75109: EMPTY
75110: LIST
75111: LIST
75112: PUSH
75113: LD_INT 1
75115: NEG
75116: PUSH
75117: LD_INT 2
75119: NEG
75120: PUSH
75121: EMPTY
75122: LIST
75123: LIST
75124: PUSH
75125: LD_INT 0
75127: PUSH
75128: LD_INT 2
75130: NEG
75131: PUSH
75132: EMPTY
75133: LIST
75134: LIST
75135: PUSH
75136: LD_INT 1
75138: PUSH
75139: LD_INT 1
75141: NEG
75142: PUSH
75143: EMPTY
75144: LIST
75145: LIST
75146: PUSH
75147: LD_INT 2
75149: PUSH
75150: LD_INT 0
75152: PUSH
75153: EMPTY
75154: LIST
75155: LIST
75156: PUSH
75157: LD_INT 2
75159: PUSH
75160: LD_INT 1
75162: PUSH
75163: EMPTY
75164: LIST
75165: LIST
75166: PUSH
75167: LD_INT 2
75169: PUSH
75170: LD_INT 2
75172: PUSH
75173: EMPTY
75174: LIST
75175: LIST
75176: PUSH
75177: LD_INT 1
75179: PUSH
75180: LD_INT 2
75182: PUSH
75183: EMPTY
75184: LIST
75185: LIST
75186: PUSH
75187: LD_INT 0
75189: PUSH
75190: LD_INT 2
75192: PUSH
75193: EMPTY
75194: LIST
75195: LIST
75196: PUSH
75197: LD_INT 1
75199: NEG
75200: PUSH
75201: LD_INT 1
75203: PUSH
75204: EMPTY
75205: LIST
75206: LIST
75207: PUSH
75208: LD_INT 2
75210: NEG
75211: PUSH
75212: LD_INT 0
75214: PUSH
75215: EMPTY
75216: LIST
75217: LIST
75218: PUSH
75219: LD_INT 2
75221: NEG
75222: PUSH
75223: LD_INT 1
75225: NEG
75226: PUSH
75227: EMPTY
75228: LIST
75229: LIST
75230: PUSH
75231: LD_INT 2
75233: NEG
75234: PUSH
75235: LD_INT 2
75237: NEG
75238: PUSH
75239: EMPTY
75240: LIST
75241: LIST
75242: PUSH
75243: EMPTY
75244: LIST
75245: LIST
75246: LIST
75247: LIST
75248: LIST
75249: LIST
75250: LIST
75251: LIST
75252: LIST
75253: LIST
75254: LIST
75255: LIST
75256: LIST
75257: LIST
75258: LIST
75259: LIST
75260: LIST
75261: LIST
75262: LIST
75263: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75264: LD_ADDR_VAR 0 58
75268: PUSH
75269: LD_INT 0
75271: PUSH
75272: LD_INT 0
75274: PUSH
75275: EMPTY
75276: LIST
75277: LIST
75278: PUSH
75279: LD_INT 0
75281: PUSH
75282: LD_INT 1
75284: NEG
75285: PUSH
75286: EMPTY
75287: LIST
75288: LIST
75289: PUSH
75290: LD_INT 1
75292: PUSH
75293: LD_INT 0
75295: PUSH
75296: EMPTY
75297: LIST
75298: LIST
75299: PUSH
75300: LD_INT 1
75302: PUSH
75303: LD_INT 1
75305: PUSH
75306: EMPTY
75307: LIST
75308: LIST
75309: PUSH
75310: LD_INT 0
75312: PUSH
75313: LD_INT 1
75315: PUSH
75316: EMPTY
75317: LIST
75318: LIST
75319: PUSH
75320: LD_INT 1
75322: NEG
75323: PUSH
75324: LD_INT 0
75326: PUSH
75327: EMPTY
75328: LIST
75329: LIST
75330: PUSH
75331: LD_INT 1
75333: NEG
75334: PUSH
75335: LD_INT 1
75337: NEG
75338: PUSH
75339: EMPTY
75340: LIST
75341: LIST
75342: PUSH
75343: LD_INT 1
75345: NEG
75346: PUSH
75347: LD_INT 2
75349: NEG
75350: PUSH
75351: EMPTY
75352: LIST
75353: LIST
75354: PUSH
75355: LD_INT 0
75357: PUSH
75358: LD_INT 2
75360: NEG
75361: PUSH
75362: EMPTY
75363: LIST
75364: LIST
75365: PUSH
75366: LD_INT 1
75368: PUSH
75369: LD_INT 1
75371: NEG
75372: PUSH
75373: EMPTY
75374: LIST
75375: LIST
75376: PUSH
75377: LD_INT 2
75379: PUSH
75380: LD_INT 0
75382: PUSH
75383: EMPTY
75384: LIST
75385: LIST
75386: PUSH
75387: LD_INT 2
75389: PUSH
75390: LD_INT 1
75392: PUSH
75393: EMPTY
75394: LIST
75395: LIST
75396: PUSH
75397: LD_INT 2
75399: PUSH
75400: LD_INT 2
75402: PUSH
75403: EMPTY
75404: LIST
75405: LIST
75406: PUSH
75407: LD_INT 1
75409: PUSH
75410: LD_INT 2
75412: PUSH
75413: EMPTY
75414: LIST
75415: LIST
75416: PUSH
75417: LD_INT 0
75419: PUSH
75420: LD_INT 2
75422: PUSH
75423: EMPTY
75424: LIST
75425: LIST
75426: PUSH
75427: LD_INT 1
75429: NEG
75430: PUSH
75431: LD_INT 1
75433: PUSH
75434: EMPTY
75435: LIST
75436: LIST
75437: PUSH
75438: LD_INT 2
75440: NEG
75441: PUSH
75442: LD_INT 0
75444: PUSH
75445: EMPTY
75446: LIST
75447: LIST
75448: PUSH
75449: LD_INT 2
75451: NEG
75452: PUSH
75453: LD_INT 1
75455: NEG
75456: PUSH
75457: EMPTY
75458: LIST
75459: LIST
75460: PUSH
75461: LD_INT 2
75463: NEG
75464: PUSH
75465: LD_INT 2
75467: NEG
75468: PUSH
75469: EMPTY
75470: LIST
75471: LIST
75472: PUSH
75473: EMPTY
75474: LIST
75475: LIST
75476: LIST
75477: LIST
75478: LIST
75479: LIST
75480: LIST
75481: LIST
75482: LIST
75483: LIST
75484: LIST
75485: LIST
75486: LIST
75487: LIST
75488: LIST
75489: LIST
75490: LIST
75491: LIST
75492: LIST
75493: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75494: LD_ADDR_VAR 0 59
75498: PUSH
75499: LD_INT 0
75501: PUSH
75502: LD_INT 0
75504: PUSH
75505: EMPTY
75506: LIST
75507: LIST
75508: PUSH
75509: LD_INT 0
75511: PUSH
75512: LD_INT 1
75514: NEG
75515: PUSH
75516: EMPTY
75517: LIST
75518: LIST
75519: PUSH
75520: LD_INT 1
75522: PUSH
75523: LD_INT 0
75525: PUSH
75526: EMPTY
75527: LIST
75528: LIST
75529: PUSH
75530: LD_INT 1
75532: PUSH
75533: LD_INT 1
75535: PUSH
75536: EMPTY
75537: LIST
75538: LIST
75539: PUSH
75540: LD_INT 0
75542: PUSH
75543: LD_INT 1
75545: PUSH
75546: EMPTY
75547: LIST
75548: LIST
75549: PUSH
75550: LD_INT 1
75552: NEG
75553: PUSH
75554: LD_INT 0
75556: PUSH
75557: EMPTY
75558: LIST
75559: LIST
75560: PUSH
75561: LD_INT 1
75563: NEG
75564: PUSH
75565: LD_INT 1
75567: NEG
75568: PUSH
75569: EMPTY
75570: LIST
75571: LIST
75572: PUSH
75573: EMPTY
75574: LIST
75575: LIST
75576: LIST
75577: LIST
75578: LIST
75579: LIST
75580: LIST
75581: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75582: LD_ADDR_VAR 0 60
75586: PUSH
75587: LD_INT 0
75589: PUSH
75590: LD_INT 0
75592: PUSH
75593: EMPTY
75594: LIST
75595: LIST
75596: PUSH
75597: LD_INT 0
75599: PUSH
75600: LD_INT 1
75602: NEG
75603: PUSH
75604: EMPTY
75605: LIST
75606: LIST
75607: PUSH
75608: LD_INT 1
75610: PUSH
75611: LD_INT 0
75613: PUSH
75614: EMPTY
75615: LIST
75616: LIST
75617: PUSH
75618: LD_INT 1
75620: PUSH
75621: LD_INT 1
75623: PUSH
75624: EMPTY
75625: LIST
75626: LIST
75627: PUSH
75628: LD_INT 0
75630: PUSH
75631: LD_INT 1
75633: PUSH
75634: EMPTY
75635: LIST
75636: LIST
75637: PUSH
75638: LD_INT 1
75640: NEG
75641: PUSH
75642: LD_INT 0
75644: PUSH
75645: EMPTY
75646: LIST
75647: LIST
75648: PUSH
75649: LD_INT 1
75651: NEG
75652: PUSH
75653: LD_INT 1
75655: NEG
75656: PUSH
75657: EMPTY
75658: LIST
75659: LIST
75660: PUSH
75661: EMPTY
75662: LIST
75663: LIST
75664: LIST
75665: LIST
75666: LIST
75667: LIST
75668: LIST
75669: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75670: LD_ADDR_VAR 0 61
75674: PUSH
75675: LD_INT 0
75677: PUSH
75678: LD_INT 0
75680: PUSH
75681: EMPTY
75682: LIST
75683: LIST
75684: PUSH
75685: LD_INT 0
75687: PUSH
75688: LD_INT 1
75690: NEG
75691: PUSH
75692: EMPTY
75693: LIST
75694: LIST
75695: PUSH
75696: LD_INT 1
75698: PUSH
75699: LD_INT 0
75701: PUSH
75702: EMPTY
75703: LIST
75704: LIST
75705: PUSH
75706: LD_INT 1
75708: PUSH
75709: LD_INT 1
75711: PUSH
75712: EMPTY
75713: LIST
75714: LIST
75715: PUSH
75716: LD_INT 0
75718: PUSH
75719: LD_INT 1
75721: PUSH
75722: EMPTY
75723: LIST
75724: LIST
75725: PUSH
75726: LD_INT 1
75728: NEG
75729: PUSH
75730: LD_INT 0
75732: PUSH
75733: EMPTY
75734: LIST
75735: LIST
75736: PUSH
75737: LD_INT 1
75739: NEG
75740: PUSH
75741: LD_INT 1
75743: NEG
75744: PUSH
75745: EMPTY
75746: LIST
75747: LIST
75748: PUSH
75749: EMPTY
75750: LIST
75751: LIST
75752: LIST
75753: LIST
75754: LIST
75755: LIST
75756: LIST
75757: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75758: LD_ADDR_VAR 0 62
75762: PUSH
75763: LD_INT 0
75765: PUSH
75766: LD_INT 0
75768: PUSH
75769: EMPTY
75770: LIST
75771: LIST
75772: PUSH
75773: LD_INT 0
75775: PUSH
75776: LD_INT 1
75778: NEG
75779: PUSH
75780: EMPTY
75781: LIST
75782: LIST
75783: PUSH
75784: LD_INT 1
75786: PUSH
75787: LD_INT 0
75789: PUSH
75790: EMPTY
75791: LIST
75792: LIST
75793: PUSH
75794: LD_INT 1
75796: PUSH
75797: LD_INT 1
75799: PUSH
75800: EMPTY
75801: LIST
75802: LIST
75803: PUSH
75804: LD_INT 0
75806: PUSH
75807: LD_INT 1
75809: PUSH
75810: EMPTY
75811: LIST
75812: LIST
75813: PUSH
75814: LD_INT 1
75816: NEG
75817: PUSH
75818: LD_INT 0
75820: PUSH
75821: EMPTY
75822: LIST
75823: LIST
75824: PUSH
75825: LD_INT 1
75827: NEG
75828: PUSH
75829: LD_INT 1
75831: NEG
75832: PUSH
75833: EMPTY
75834: LIST
75835: LIST
75836: PUSH
75837: EMPTY
75838: LIST
75839: LIST
75840: LIST
75841: LIST
75842: LIST
75843: LIST
75844: LIST
75845: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75846: LD_ADDR_VAR 0 63
75850: PUSH
75851: LD_INT 0
75853: PUSH
75854: LD_INT 0
75856: PUSH
75857: EMPTY
75858: LIST
75859: LIST
75860: PUSH
75861: LD_INT 0
75863: PUSH
75864: LD_INT 1
75866: NEG
75867: PUSH
75868: EMPTY
75869: LIST
75870: LIST
75871: PUSH
75872: LD_INT 1
75874: PUSH
75875: LD_INT 0
75877: PUSH
75878: EMPTY
75879: LIST
75880: LIST
75881: PUSH
75882: LD_INT 1
75884: PUSH
75885: LD_INT 1
75887: PUSH
75888: EMPTY
75889: LIST
75890: LIST
75891: PUSH
75892: LD_INT 0
75894: PUSH
75895: LD_INT 1
75897: PUSH
75898: EMPTY
75899: LIST
75900: LIST
75901: PUSH
75902: LD_INT 1
75904: NEG
75905: PUSH
75906: LD_INT 0
75908: PUSH
75909: EMPTY
75910: LIST
75911: LIST
75912: PUSH
75913: LD_INT 1
75915: NEG
75916: PUSH
75917: LD_INT 1
75919: NEG
75920: PUSH
75921: EMPTY
75922: LIST
75923: LIST
75924: PUSH
75925: EMPTY
75926: LIST
75927: LIST
75928: LIST
75929: LIST
75930: LIST
75931: LIST
75932: LIST
75933: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75934: LD_ADDR_VAR 0 64
75938: PUSH
75939: LD_INT 0
75941: PUSH
75942: LD_INT 0
75944: PUSH
75945: EMPTY
75946: LIST
75947: LIST
75948: PUSH
75949: LD_INT 0
75951: PUSH
75952: LD_INT 1
75954: NEG
75955: PUSH
75956: EMPTY
75957: LIST
75958: LIST
75959: PUSH
75960: LD_INT 1
75962: PUSH
75963: LD_INT 0
75965: PUSH
75966: EMPTY
75967: LIST
75968: LIST
75969: PUSH
75970: LD_INT 1
75972: PUSH
75973: LD_INT 1
75975: PUSH
75976: EMPTY
75977: LIST
75978: LIST
75979: PUSH
75980: LD_INT 0
75982: PUSH
75983: LD_INT 1
75985: PUSH
75986: EMPTY
75987: LIST
75988: LIST
75989: PUSH
75990: LD_INT 1
75992: NEG
75993: PUSH
75994: LD_INT 0
75996: PUSH
75997: EMPTY
75998: LIST
75999: LIST
76000: PUSH
76001: LD_INT 1
76003: NEG
76004: PUSH
76005: LD_INT 1
76007: NEG
76008: PUSH
76009: EMPTY
76010: LIST
76011: LIST
76012: PUSH
76013: EMPTY
76014: LIST
76015: LIST
76016: LIST
76017: LIST
76018: LIST
76019: LIST
76020: LIST
76021: ST_TO_ADDR
// end ; 1 :
76022: GO 81919
76024: LD_INT 1
76026: DOUBLE
76027: EQUAL
76028: IFTRUE 76032
76030: GO 78655
76032: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
76033: LD_ADDR_VAR 0 11
76037: PUSH
76038: LD_INT 1
76040: NEG
76041: PUSH
76042: LD_INT 3
76044: NEG
76045: PUSH
76046: EMPTY
76047: LIST
76048: LIST
76049: PUSH
76050: LD_INT 0
76052: PUSH
76053: LD_INT 3
76055: NEG
76056: PUSH
76057: EMPTY
76058: LIST
76059: LIST
76060: PUSH
76061: LD_INT 1
76063: PUSH
76064: LD_INT 2
76066: NEG
76067: PUSH
76068: EMPTY
76069: LIST
76070: LIST
76071: PUSH
76072: EMPTY
76073: LIST
76074: LIST
76075: LIST
76076: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
76077: LD_ADDR_VAR 0 12
76081: PUSH
76082: LD_INT 2
76084: PUSH
76085: LD_INT 1
76087: NEG
76088: PUSH
76089: EMPTY
76090: LIST
76091: LIST
76092: PUSH
76093: LD_INT 3
76095: PUSH
76096: LD_INT 0
76098: PUSH
76099: EMPTY
76100: LIST
76101: LIST
76102: PUSH
76103: LD_INT 3
76105: PUSH
76106: LD_INT 1
76108: PUSH
76109: EMPTY
76110: LIST
76111: LIST
76112: PUSH
76113: EMPTY
76114: LIST
76115: LIST
76116: LIST
76117: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
76118: LD_ADDR_VAR 0 13
76122: PUSH
76123: LD_INT 3
76125: PUSH
76126: LD_INT 2
76128: PUSH
76129: EMPTY
76130: LIST
76131: LIST
76132: PUSH
76133: LD_INT 3
76135: PUSH
76136: LD_INT 3
76138: PUSH
76139: EMPTY
76140: LIST
76141: LIST
76142: PUSH
76143: LD_INT 2
76145: PUSH
76146: LD_INT 3
76148: PUSH
76149: EMPTY
76150: LIST
76151: LIST
76152: PUSH
76153: EMPTY
76154: LIST
76155: LIST
76156: LIST
76157: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
76158: LD_ADDR_VAR 0 14
76162: PUSH
76163: LD_INT 1
76165: PUSH
76166: LD_INT 3
76168: PUSH
76169: EMPTY
76170: LIST
76171: LIST
76172: PUSH
76173: LD_INT 0
76175: PUSH
76176: LD_INT 3
76178: PUSH
76179: EMPTY
76180: LIST
76181: LIST
76182: PUSH
76183: LD_INT 1
76185: NEG
76186: PUSH
76187: LD_INT 2
76189: PUSH
76190: EMPTY
76191: LIST
76192: LIST
76193: PUSH
76194: EMPTY
76195: LIST
76196: LIST
76197: LIST
76198: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76199: LD_ADDR_VAR 0 15
76203: PUSH
76204: LD_INT 2
76206: NEG
76207: PUSH
76208: LD_INT 1
76210: PUSH
76211: EMPTY
76212: LIST
76213: LIST
76214: PUSH
76215: LD_INT 3
76217: NEG
76218: PUSH
76219: LD_INT 0
76221: PUSH
76222: EMPTY
76223: LIST
76224: LIST
76225: PUSH
76226: LD_INT 3
76228: NEG
76229: PUSH
76230: LD_INT 1
76232: NEG
76233: PUSH
76234: EMPTY
76235: LIST
76236: LIST
76237: PUSH
76238: EMPTY
76239: LIST
76240: LIST
76241: LIST
76242: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76243: LD_ADDR_VAR 0 16
76247: PUSH
76248: LD_INT 2
76250: NEG
76251: PUSH
76252: LD_INT 3
76254: NEG
76255: PUSH
76256: EMPTY
76257: LIST
76258: LIST
76259: PUSH
76260: LD_INT 3
76262: NEG
76263: PUSH
76264: LD_INT 2
76266: NEG
76267: PUSH
76268: EMPTY
76269: LIST
76270: LIST
76271: PUSH
76272: LD_INT 3
76274: NEG
76275: PUSH
76276: LD_INT 3
76278: NEG
76279: PUSH
76280: EMPTY
76281: LIST
76282: LIST
76283: PUSH
76284: EMPTY
76285: LIST
76286: LIST
76287: LIST
76288: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
76289: LD_ADDR_VAR 0 17
76293: PUSH
76294: LD_INT 1
76296: NEG
76297: PUSH
76298: LD_INT 3
76300: NEG
76301: PUSH
76302: EMPTY
76303: LIST
76304: LIST
76305: PUSH
76306: LD_INT 0
76308: PUSH
76309: LD_INT 3
76311: NEG
76312: PUSH
76313: EMPTY
76314: LIST
76315: LIST
76316: PUSH
76317: LD_INT 1
76319: PUSH
76320: LD_INT 2
76322: NEG
76323: PUSH
76324: EMPTY
76325: LIST
76326: LIST
76327: PUSH
76328: EMPTY
76329: LIST
76330: LIST
76331: LIST
76332: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
76333: LD_ADDR_VAR 0 18
76337: PUSH
76338: LD_INT 2
76340: PUSH
76341: LD_INT 1
76343: NEG
76344: PUSH
76345: EMPTY
76346: LIST
76347: LIST
76348: PUSH
76349: LD_INT 3
76351: PUSH
76352: LD_INT 0
76354: PUSH
76355: EMPTY
76356: LIST
76357: LIST
76358: PUSH
76359: LD_INT 3
76361: PUSH
76362: LD_INT 1
76364: PUSH
76365: EMPTY
76366: LIST
76367: LIST
76368: PUSH
76369: EMPTY
76370: LIST
76371: LIST
76372: LIST
76373: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
76374: LD_ADDR_VAR 0 19
76378: PUSH
76379: LD_INT 3
76381: PUSH
76382: LD_INT 2
76384: PUSH
76385: EMPTY
76386: LIST
76387: LIST
76388: PUSH
76389: LD_INT 3
76391: PUSH
76392: LD_INT 3
76394: PUSH
76395: EMPTY
76396: LIST
76397: LIST
76398: PUSH
76399: LD_INT 2
76401: PUSH
76402: LD_INT 3
76404: PUSH
76405: EMPTY
76406: LIST
76407: LIST
76408: PUSH
76409: EMPTY
76410: LIST
76411: LIST
76412: LIST
76413: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
76414: LD_ADDR_VAR 0 20
76418: PUSH
76419: LD_INT 1
76421: PUSH
76422: LD_INT 3
76424: PUSH
76425: EMPTY
76426: LIST
76427: LIST
76428: PUSH
76429: LD_INT 0
76431: PUSH
76432: LD_INT 3
76434: PUSH
76435: EMPTY
76436: LIST
76437: LIST
76438: PUSH
76439: LD_INT 1
76441: NEG
76442: PUSH
76443: LD_INT 2
76445: PUSH
76446: EMPTY
76447: LIST
76448: LIST
76449: PUSH
76450: EMPTY
76451: LIST
76452: LIST
76453: LIST
76454: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76455: LD_ADDR_VAR 0 21
76459: PUSH
76460: LD_INT 2
76462: NEG
76463: PUSH
76464: LD_INT 1
76466: PUSH
76467: EMPTY
76468: LIST
76469: LIST
76470: PUSH
76471: LD_INT 3
76473: NEG
76474: PUSH
76475: LD_INT 0
76477: PUSH
76478: EMPTY
76479: LIST
76480: LIST
76481: PUSH
76482: LD_INT 3
76484: NEG
76485: PUSH
76486: LD_INT 1
76488: NEG
76489: PUSH
76490: EMPTY
76491: LIST
76492: LIST
76493: PUSH
76494: EMPTY
76495: LIST
76496: LIST
76497: LIST
76498: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76499: LD_ADDR_VAR 0 22
76503: PUSH
76504: LD_INT 2
76506: NEG
76507: PUSH
76508: LD_INT 3
76510: NEG
76511: PUSH
76512: EMPTY
76513: LIST
76514: LIST
76515: PUSH
76516: LD_INT 3
76518: NEG
76519: PUSH
76520: LD_INT 2
76522: NEG
76523: PUSH
76524: EMPTY
76525: LIST
76526: LIST
76527: PUSH
76528: LD_INT 3
76530: NEG
76531: PUSH
76532: LD_INT 3
76534: NEG
76535: PUSH
76536: EMPTY
76537: LIST
76538: LIST
76539: PUSH
76540: EMPTY
76541: LIST
76542: LIST
76543: LIST
76544: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
76545: LD_ADDR_VAR 0 23
76549: PUSH
76550: LD_INT 0
76552: PUSH
76553: LD_INT 3
76555: NEG
76556: PUSH
76557: EMPTY
76558: LIST
76559: LIST
76560: PUSH
76561: LD_INT 1
76563: NEG
76564: PUSH
76565: LD_INT 4
76567: NEG
76568: PUSH
76569: EMPTY
76570: LIST
76571: LIST
76572: PUSH
76573: LD_INT 1
76575: PUSH
76576: LD_INT 3
76578: NEG
76579: PUSH
76580: EMPTY
76581: LIST
76582: LIST
76583: PUSH
76584: EMPTY
76585: LIST
76586: LIST
76587: LIST
76588: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
76589: LD_ADDR_VAR 0 24
76593: PUSH
76594: LD_INT 3
76596: PUSH
76597: LD_INT 0
76599: PUSH
76600: EMPTY
76601: LIST
76602: LIST
76603: PUSH
76604: LD_INT 3
76606: PUSH
76607: LD_INT 1
76609: NEG
76610: PUSH
76611: EMPTY
76612: LIST
76613: LIST
76614: PUSH
76615: LD_INT 4
76617: PUSH
76618: LD_INT 1
76620: PUSH
76621: EMPTY
76622: LIST
76623: LIST
76624: PUSH
76625: EMPTY
76626: LIST
76627: LIST
76628: LIST
76629: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
76630: LD_ADDR_VAR 0 25
76634: PUSH
76635: LD_INT 3
76637: PUSH
76638: LD_INT 3
76640: PUSH
76641: EMPTY
76642: LIST
76643: LIST
76644: PUSH
76645: LD_INT 4
76647: PUSH
76648: LD_INT 3
76650: PUSH
76651: EMPTY
76652: LIST
76653: LIST
76654: PUSH
76655: LD_INT 3
76657: PUSH
76658: LD_INT 4
76660: PUSH
76661: EMPTY
76662: LIST
76663: LIST
76664: PUSH
76665: EMPTY
76666: LIST
76667: LIST
76668: LIST
76669: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
76670: LD_ADDR_VAR 0 26
76674: PUSH
76675: LD_INT 0
76677: PUSH
76678: LD_INT 3
76680: PUSH
76681: EMPTY
76682: LIST
76683: LIST
76684: PUSH
76685: LD_INT 1
76687: PUSH
76688: LD_INT 4
76690: PUSH
76691: EMPTY
76692: LIST
76693: LIST
76694: PUSH
76695: LD_INT 1
76697: NEG
76698: PUSH
76699: LD_INT 3
76701: PUSH
76702: EMPTY
76703: LIST
76704: LIST
76705: PUSH
76706: EMPTY
76707: LIST
76708: LIST
76709: LIST
76710: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
76711: LD_ADDR_VAR 0 27
76715: PUSH
76716: LD_INT 3
76718: NEG
76719: PUSH
76720: LD_INT 0
76722: PUSH
76723: EMPTY
76724: LIST
76725: LIST
76726: PUSH
76727: LD_INT 3
76729: NEG
76730: PUSH
76731: LD_INT 1
76733: PUSH
76734: EMPTY
76735: LIST
76736: LIST
76737: PUSH
76738: LD_INT 4
76740: NEG
76741: PUSH
76742: LD_INT 1
76744: NEG
76745: PUSH
76746: EMPTY
76747: LIST
76748: LIST
76749: PUSH
76750: EMPTY
76751: LIST
76752: LIST
76753: LIST
76754: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
76755: LD_ADDR_VAR 0 28
76759: PUSH
76760: LD_INT 3
76762: NEG
76763: PUSH
76764: LD_INT 3
76766: NEG
76767: PUSH
76768: EMPTY
76769: LIST
76770: LIST
76771: PUSH
76772: LD_INT 3
76774: NEG
76775: PUSH
76776: LD_INT 4
76778: NEG
76779: PUSH
76780: EMPTY
76781: LIST
76782: LIST
76783: PUSH
76784: LD_INT 4
76786: NEG
76787: PUSH
76788: LD_INT 3
76790: NEG
76791: PUSH
76792: EMPTY
76793: LIST
76794: LIST
76795: PUSH
76796: EMPTY
76797: LIST
76798: LIST
76799: LIST
76800: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
76801: LD_ADDR_VAR 0 29
76805: PUSH
76806: LD_INT 1
76808: NEG
76809: PUSH
76810: LD_INT 3
76812: NEG
76813: PUSH
76814: EMPTY
76815: LIST
76816: LIST
76817: PUSH
76818: LD_INT 0
76820: PUSH
76821: LD_INT 3
76823: NEG
76824: PUSH
76825: EMPTY
76826: LIST
76827: LIST
76828: PUSH
76829: LD_INT 1
76831: PUSH
76832: LD_INT 2
76834: NEG
76835: PUSH
76836: EMPTY
76837: LIST
76838: LIST
76839: PUSH
76840: LD_INT 1
76842: NEG
76843: PUSH
76844: LD_INT 4
76846: NEG
76847: PUSH
76848: EMPTY
76849: LIST
76850: LIST
76851: PUSH
76852: LD_INT 0
76854: PUSH
76855: LD_INT 4
76857: NEG
76858: PUSH
76859: EMPTY
76860: LIST
76861: LIST
76862: PUSH
76863: LD_INT 1
76865: PUSH
76866: LD_INT 3
76868: NEG
76869: PUSH
76870: EMPTY
76871: LIST
76872: LIST
76873: PUSH
76874: LD_INT 1
76876: NEG
76877: PUSH
76878: LD_INT 5
76880: NEG
76881: PUSH
76882: EMPTY
76883: LIST
76884: LIST
76885: PUSH
76886: LD_INT 0
76888: PUSH
76889: LD_INT 5
76891: NEG
76892: PUSH
76893: EMPTY
76894: LIST
76895: LIST
76896: PUSH
76897: LD_INT 1
76899: PUSH
76900: LD_INT 4
76902: NEG
76903: PUSH
76904: EMPTY
76905: LIST
76906: LIST
76907: PUSH
76908: LD_INT 1
76910: NEG
76911: PUSH
76912: LD_INT 6
76914: NEG
76915: PUSH
76916: EMPTY
76917: LIST
76918: LIST
76919: PUSH
76920: LD_INT 0
76922: PUSH
76923: LD_INT 6
76925: NEG
76926: PUSH
76927: EMPTY
76928: LIST
76929: LIST
76930: PUSH
76931: LD_INT 1
76933: PUSH
76934: LD_INT 5
76936: NEG
76937: PUSH
76938: EMPTY
76939: LIST
76940: LIST
76941: PUSH
76942: EMPTY
76943: LIST
76944: LIST
76945: LIST
76946: LIST
76947: LIST
76948: LIST
76949: LIST
76950: LIST
76951: LIST
76952: LIST
76953: LIST
76954: LIST
76955: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
76956: LD_ADDR_VAR 0 30
76960: PUSH
76961: LD_INT 2
76963: PUSH
76964: LD_INT 1
76966: NEG
76967: PUSH
76968: EMPTY
76969: LIST
76970: LIST
76971: PUSH
76972: LD_INT 3
76974: PUSH
76975: LD_INT 0
76977: PUSH
76978: EMPTY
76979: LIST
76980: LIST
76981: PUSH
76982: LD_INT 3
76984: PUSH
76985: LD_INT 1
76987: PUSH
76988: EMPTY
76989: LIST
76990: LIST
76991: PUSH
76992: LD_INT 3
76994: PUSH
76995: LD_INT 1
76997: NEG
76998: PUSH
76999: EMPTY
77000: LIST
77001: LIST
77002: PUSH
77003: LD_INT 4
77005: PUSH
77006: LD_INT 0
77008: PUSH
77009: EMPTY
77010: LIST
77011: LIST
77012: PUSH
77013: LD_INT 4
77015: PUSH
77016: LD_INT 1
77018: PUSH
77019: EMPTY
77020: LIST
77021: LIST
77022: PUSH
77023: LD_INT 4
77025: PUSH
77026: LD_INT 1
77028: NEG
77029: PUSH
77030: EMPTY
77031: LIST
77032: LIST
77033: PUSH
77034: LD_INT 5
77036: PUSH
77037: LD_INT 0
77039: PUSH
77040: EMPTY
77041: LIST
77042: LIST
77043: PUSH
77044: LD_INT 5
77046: PUSH
77047: LD_INT 1
77049: PUSH
77050: EMPTY
77051: LIST
77052: LIST
77053: PUSH
77054: LD_INT 5
77056: PUSH
77057: LD_INT 1
77059: NEG
77060: PUSH
77061: EMPTY
77062: LIST
77063: LIST
77064: PUSH
77065: LD_INT 6
77067: PUSH
77068: LD_INT 0
77070: PUSH
77071: EMPTY
77072: LIST
77073: LIST
77074: PUSH
77075: LD_INT 6
77077: PUSH
77078: LD_INT 1
77080: PUSH
77081: EMPTY
77082: LIST
77083: LIST
77084: PUSH
77085: EMPTY
77086: LIST
77087: LIST
77088: LIST
77089: LIST
77090: LIST
77091: LIST
77092: LIST
77093: LIST
77094: LIST
77095: LIST
77096: LIST
77097: LIST
77098: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
77099: LD_ADDR_VAR 0 31
77103: PUSH
77104: LD_INT 3
77106: PUSH
77107: LD_INT 2
77109: PUSH
77110: EMPTY
77111: LIST
77112: LIST
77113: PUSH
77114: LD_INT 3
77116: PUSH
77117: LD_INT 3
77119: PUSH
77120: EMPTY
77121: LIST
77122: LIST
77123: PUSH
77124: LD_INT 2
77126: PUSH
77127: LD_INT 3
77129: PUSH
77130: EMPTY
77131: LIST
77132: LIST
77133: PUSH
77134: LD_INT 4
77136: PUSH
77137: LD_INT 3
77139: PUSH
77140: EMPTY
77141: LIST
77142: LIST
77143: PUSH
77144: LD_INT 4
77146: PUSH
77147: LD_INT 4
77149: PUSH
77150: EMPTY
77151: LIST
77152: LIST
77153: PUSH
77154: LD_INT 3
77156: PUSH
77157: LD_INT 4
77159: PUSH
77160: EMPTY
77161: LIST
77162: LIST
77163: PUSH
77164: LD_INT 5
77166: PUSH
77167: LD_INT 4
77169: PUSH
77170: EMPTY
77171: LIST
77172: LIST
77173: PUSH
77174: LD_INT 5
77176: PUSH
77177: LD_INT 5
77179: PUSH
77180: EMPTY
77181: LIST
77182: LIST
77183: PUSH
77184: LD_INT 4
77186: PUSH
77187: LD_INT 5
77189: PUSH
77190: EMPTY
77191: LIST
77192: LIST
77193: PUSH
77194: LD_INT 6
77196: PUSH
77197: LD_INT 5
77199: PUSH
77200: EMPTY
77201: LIST
77202: LIST
77203: PUSH
77204: LD_INT 6
77206: PUSH
77207: LD_INT 6
77209: PUSH
77210: EMPTY
77211: LIST
77212: LIST
77213: PUSH
77214: LD_INT 5
77216: PUSH
77217: LD_INT 6
77219: PUSH
77220: EMPTY
77221: LIST
77222: LIST
77223: PUSH
77224: EMPTY
77225: LIST
77226: LIST
77227: LIST
77228: LIST
77229: LIST
77230: LIST
77231: LIST
77232: LIST
77233: LIST
77234: LIST
77235: LIST
77236: LIST
77237: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
77238: LD_ADDR_VAR 0 32
77242: PUSH
77243: LD_INT 1
77245: PUSH
77246: LD_INT 3
77248: PUSH
77249: EMPTY
77250: LIST
77251: LIST
77252: PUSH
77253: LD_INT 0
77255: PUSH
77256: LD_INT 3
77258: PUSH
77259: EMPTY
77260: LIST
77261: LIST
77262: PUSH
77263: LD_INT 1
77265: NEG
77266: PUSH
77267: LD_INT 2
77269: PUSH
77270: EMPTY
77271: LIST
77272: LIST
77273: PUSH
77274: LD_INT 1
77276: PUSH
77277: LD_INT 4
77279: PUSH
77280: EMPTY
77281: LIST
77282: LIST
77283: PUSH
77284: LD_INT 0
77286: PUSH
77287: LD_INT 4
77289: PUSH
77290: EMPTY
77291: LIST
77292: LIST
77293: PUSH
77294: LD_INT 1
77296: NEG
77297: PUSH
77298: LD_INT 3
77300: PUSH
77301: EMPTY
77302: LIST
77303: LIST
77304: PUSH
77305: LD_INT 1
77307: PUSH
77308: LD_INT 5
77310: PUSH
77311: EMPTY
77312: LIST
77313: LIST
77314: PUSH
77315: LD_INT 0
77317: PUSH
77318: LD_INT 5
77320: PUSH
77321: EMPTY
77322: LIST
77323: LIST
77324: PUSH
77325: LD_INT 1
77327: NEG
77328: PUSH
77329: LD_INT 4
77331: PUSH
77332: EMPTY
77333: LIST
77334: LIST
77335: PUSH
77336: LD_INT 1
77338: PUSH
77339: LD_INT 6
77341: PUSH
77342: EMPTY
77343: LIST
77344: LIST
77345: PUSH
77346: LD_INT 0
77348: PUSH
77349: LD_INT 6
77351: PUSH
77352: EMPTY
77353: LIST
77354: LIST
77355: PUSH
77356: LD_INT 1
77358: NEG
77359: PUSH
77360: LD_INT 5
77362: PUSH
77363: EMPTY
77364: LIST
77365: LIST
77366: PUSH
77367: EMPTY
77368: LIST
77369: LIST
77370: LIST
77371: LIST
77372: LIST
77373: LIST
77374: LIST
77375: LIST
77376: LIST
77377: LIST
77378: LIST
77379: LIST
77380: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
77381: LD_ADDR_VAR 0 33
77385: PUSH
77386: LD_INT 2
77388: NEG
77389: PUSH
77390: LD_INT 1
77392: PUSH
77393: EMPTY
77394: LIST
77395: LIST
77396: PUSH
77397: LD_INT 3
77399: NEG
77400: PUSH
77401: LD_INT 0
77403: PUSH
77404: EMPTY
77405: LIST
77406: LIST
77407: PUSH
77408: LD_INT 3
77410: NEG
77411: PUSH
77412: LD_INT 1
77414: NEG
77415: PUSH
77416: EMPTY
77417: LIST
77418: LIST
77419: PUSH
77420: LD_INT 3
77422: NEG
77423: PUSH
77424: LD_INT 1
77426: PUSH
77427: EMPTY
77428: LIST
77429: LIST
77430: PUSH
77431: LD_INT 4
77433: NEG
77434: PUSH
77435: LD_INT 0
77437: PUSH
77438: EMPTY
77439: LIST
77440: LIST
77441: PUSH
77442: LD_INT 4
77444: NEG
77445: PUSH
77446: LD_INT 1
77448: NEG
77449: PUSH
77450: EMPTY
77451: LIST
77452: LIST
77453: PUSH
77454: LD_INT 4
77456: NEG
77457: PUSH
77458: LD_INT 1
77460: PUSH
77461: EMPTY
77462: LIST
77463: LIST
77464: PUSH
77465: LD_INT 5
77467: NEG
77468: PUSH
77469: LD_INT 0
77471: PUSH
77472: EMPTY
77473: LIST
77474: LIST
77475: PUSH
77476: LD_INT 5
77478: NEG
77479: PUSH
77480: LD_INT 1
77482: NEG
77483: PUSH
77484: EMPTY
77485: LIST
77486: LIST
77487: PUSH
77488: LD_INT 5
77490: NEG
77491: PUSH
77492: LD_INT 1
77494: PUSH
77495: EMPTY
77496: LIST
77497: LIST
77498: PUSH
77499: LD_INT 6
77501: NEG
77502: PUSH
77503: LD_INT 0
77505: PUSH
77506: EMPTY
77507: LIST
77508: LIST
77509: PUSH
77510: LD_INT 6
77512: NEG
77513: PUSH
77514: LD_INT 1
77516: NEG
77517: PUSH
77518: EMPTY
77519: LIST
77520: LIST
77521: PUSH
77522: EMPTY
77523: LIST
77524: LIST
77525: LIST
77526: LIST
77527: LIST
77528: LIST
77529: LIST
77530: LIST
77531: LIST
77532: LIST
77533: LIST
77534: LIST
77535: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
77536: LD_ADDR_VAR 0 34
77540: PUSH
77541: LD_INT 2
77543: NEG
77544: PUSH
77545: LD_INT 3
77547: NEG
77548: PUSH
77549: EMPTY
77550: LIST
77551: LIST
77552: PUSH
77553: LD_INT 3
77555: NEG
77556: PUSH
77557: LD_INT 2
77559: NEG
77560: PUSH
77561: EMPTY
77562: LIST
77563: LIST
77564: PUSH
77565: LD_INT 3
77567: NEG
77568: PUSH
77569: LD_INT 3
77571: NEG
77572: PUSH
77573: EMPTY
77574: LIST
77575: LIST
77576: PUSH
77577: LD_INT 3
77579: NEG
77580: PUSH
77581: LD_INT 4
77583: NEG
77584: PUSH
77585: EMPTY
77586: LIST
77587: LIST
77588: PUSH
77589: LD_INT 4
77591: NEG
77592: PUSH
77593: LD_INT 3
77595: NEG
77596: PUSH
77597: EMPTY
77598: LIST
77599: LIST
77600: PUSH
77601: LD_INT 4
77603: NEG
77604: PUSH
77605: LD_INT 4
77607: NEG
77608: PUSH
77609: EMPTY
77610: LIST
77611: LIST
77612: PUSH
77613: LD_INT 4
77615: NEG
77616: PUSH
77617: LD_INT 5
77619: NEG
77620: PUSH
77621: EMPTY
77622: LIST
77623: LIST
77624: PUSH
77625: LD_INT 5
77627: NEG
77628: PUSH
77629: LD_INT 4
77631: NEG
77632: PUSH
77633: EMPTY
77634: LIST
77635: LIST
77636: PUSH
77637: LD_INT 5
77639: NEG
77640: PUSH
77641: LD_INT 5
77643: NEG
77644: PUSH
77645: EMPTY
77646: LIST
77647: LIST
77648: PUSH
77649: LD_INT 5
77651: NEG
77652: PUSH
77653: LD_INT 6
77655: NEG
77656: PUSH
77657: EMPTY
77658: LIST
77659: LIST
77660: PUSH
77661: LD_INT 6
77663: NEG
77664: PUSH
77665: LD_INT 5
77667: NEG
77668: PUSH
77669: EMPTY
77670: LIST
77671: LIST
77672: PUSH
77673: LD_INT 6
77675: NEG
77676: PUSH
77677: LD_INT 6
77679: NEG
77680: PUSH
77681: EMPTY
77682: LIST
77683: LIST
77684: PUSH
77685: EMPTY
77686: LIST
77687: LIST
77688: LIST
77689: LIST
77690: LIST
77691: LIST
77692: LIST
77693: LIST
77694: LIST
77695: LIST
77696: LIST
77697: LIST
77698: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
77699: LD_ADDR_VAR 0 41
77703: PUSH
77704: LD_INT 0
77706: PUSH
77707: LD_INT 2
77709: NEG
77710: PUSH
77711: EMPTY
77712: LIST
77713: LIST
77714: PUSH
77715: LD_INT 1
77717: NEG
77718: PUSH
77719: LD_INT 3
77721: NEG
77722: PUSH
77723: EMPTY
77724: LIST
77725: LIST
77726: PUSH
77727: LD_INT 1
77729: PUSH
77730: LD_INT 2
77732: NEG
77733: PUSH
77734: EMPTY
77735: LIST
77736: LIST
77737: PUSH
77738: EMPTY
77739: LIST
77740: LIST
77741: LIST
77742: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
77743: LD_ADDR_VAR 0 42
77747: PUSH
77748: LD_INT 2
77750: PUSH
77751: LD_INT 0
77753: PUSH
77754: EMPTY
77755: LIST
77756: LIST
77757: PUSH
77758: LD_INT 2
77760: PUSH
77761: LD_INT 1
77763: NEG
77764: PUSH
77765: EMPTY
77766: LIST
77767: LIST
77768: PUSH
77769: LD_INT 3
77771: PUSH
77772: LD_INT 1
77774: PUSH
77775: EMPTY
77776: LIST
77777: LIST
77778: PUSH
77779: EMPTY
77780: LIST
77781: LIST
77782: LIST
77783: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
77784: LD_ADDR_VAR 0 43
77788: PUSH
77789: LD_INT 2
77791: PUSH
77792: LD_INT 2
77794: PUSH
77795: EMPTY
77796: LIST
77797: LIST
77798: PUSH
77799: LD_INT 3
77801: PUSH
77802: LD_INT 2
77804: PUSH
77805: EMPTY
77806: LIST
77807: LIST
77808: PUSH
77809: LD_INT 2
77811: PUSH
77812: LD_INT 3
77814: PUSH
77815: EMPTY
77816: LIST
77817: LIST
77818: PUSH
77819: EMPTY
77820: LIST
77821: LIST
77822: LIST
77823: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
77824: LD_ADDR_VAR 0 44
77828: PUSH
77829: LD_INT 0
77831: PUSH
77832: LD_INT 2
77834: PUSH
77835: EMPTY
77836: LIST
77837: LIST
77838: PUSH
77839: LD_INT 1
77841: PUSH
77842: LD_INT 3
77844: PUSH
77845: EMPTY
77846: LIST
77847: LIST
77848: PUSH
77849: LD_INT 1
77851: NEG
77852: PUSH
77853: LD_INT 2
77855: PUSH
77856: EMPTY
77857: LIST
77858: LIST
77859: PUSH
77860: EMPTY
77861: LIST
77862: LIST
77863: LIST
77864: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
77865: LD_ADDR_VAR 0 45
77869: PUSH
77870: LD_INT 2
77872: NEG
77873: PUSH
77874: LD_INT 0
77876: PUSH
77877: EMPTY
77878: LIST
77879: LIST
77880: PUSH
77881: LD_INT 2
77883: NEG
77884: PUSH
77885: LD_INT 1
77887: PUSH
77888: EMPTY
77889: LIST
77890: LIST
77891: PUSH
77892: LD_INT 3
77894: NEG
77895: PUSH
77896: LD_INT 1
77898: NEG
77899: PUSH
77900: EMPTY
77901: LIST
77902: LIST
77903: PUSH
77904: EMPTY
77905: LIST
77906: LIST
77907: LIST
77908: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
77909: LD_ADDR_VAR 0 46
77913: PUSH
77914: LD_INT 2
77916: NEG
77917: PUSH
77918: LD_INT 2
77920: NEG
77921: PUSH
77922: EMPTY
77923: LIST
77924: LIST
77925: PUSH
77926: LD_INT 2
77928: NEG
77929: PUSH
77930: LD_INT 3
77932: NEG
77933: PUSH
77934: EMPTY
77935: LIST
77936: LIST
77937: PUSH
77938: LD_INT 3
77940: NEG
77941: PUSH
77942: LD_INT 2
77944: NEG
77945: PUSH
77946: EMPTY
77947: LIST
77948: LIST
77949: PUSH
77950: EMPTY
77951: LIST
77952: LIST
77953: LIST
77954: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
77955: LD_ADDR_VAR 0 47
77959: PUSH
77960: LD_INT 2
77962: NEG
77963: PUSH
77964: LD_INT 3
77966: NEG
77967: PUSH
77968: EMPTY
77969: LIST
77970: LIST
77971: PUSH
77972: LD_INT 1
77974: NEG
77975: PUSH
77976: LD_INT 3
77978: NEG
77979: PUSH
77980: EMPTY
77981: LIST
77982: LIST
77983: PUSH
77984: EMPTY
77985: LIST
77986: LIST
77987: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
77988: LD_ADDR_VAR 0 48
77992: PUSH
77993: LD_INT 1
77995: PUSH
77996: LD_INT 2
77998: NEG
77999: PUSH
78000: EMPTY
78001: LIST
78002: LIST
78003: PUSH
78004: LD_INT 2
78006: PUSH
78007: LD_INT 1
78009: NEG
78010: PUSH
78011: EMPTY
78012: LIST
78013: LIST
78014: PUSH
78015: EMPTY
78016: LIST
78017: LIST
78018: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
78019: LD_ADDR_VAR 0 49
78023: PUSH
78024: LD_INT 3
78026: PUSH
78027: LD_INT 1
78029: PUSH
78030: EMPTY
78031: LIST
78032: LIST
78033: PUSH
78034: LD_INT 3
78036: PUSH
78037: LD_INT 2
78039: PUSH
78040: EMPTY
78041: LIST
78042: LIST
78043: PUSH
78044: EMPTY
78045: LIST
78046: LIST
78047: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
78048: LD_ADDR_VAR 0 50
78052: PUSH
78053: LD_INT 2
78055: PUSH
78056: LD_INT 3
78058: PUSH
78059: EMPTY
78060: LIST
78061: LIST
78062: PUSH
78063: LD_INT 1
78065: PUSH
78066: LD_INT 3
78068: PUSH
78069: EMPTY
78070: LIST
78071: LIST
78072: PUSH
78073: EMPTY
78074: LIST
78075: LIST
78076: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
78077: LD_ADDR_VAR 0 51
78081: PUSH
78082: LD_INT 1
78084: NEG
78085: PUSH
78086: LD_INT 2
78088: PUSH
78089: EMPTY
78090: LIST
78091: LIST
78092: PUSH
78093: LD_INT 2
78095: NEG
78096: PUSH
78097: LD_INT 1
78099: PUSH
78100: EMPTY
78101: LIST
78102: LIST
78103: PUSH
78104: EMPTY
78105: LIST
78106: LIST
78107: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
78108: LD_ADDR_VAR 0 52
78112: PUSH
78113: LD_INT 3
78115: NEG
78116: PUSH
78117: LD_INT 1
78119: NEG
78120: PUSH
78121: EMPTY
78122: LIST
78123: LIST
78124: PUSH
78125: LD_INT 3
78127: NEG
78128: PUSH
78129: LD_INT 2
78131: NEG
78132: PUSH
78133: EMPTY
78134: LIST
78135: LIST
78136: PUSH
78137: EMPTY
78138: LIST
78139: LIST
78140: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
78141: LD_ADDR_VAR 0 53
78145: PUSH
78146: LD_INT 1
78148: NEG
78149: PUSH
78150: LD_INT 3
78152: NEG
78153: PUSH
78154: EMPTY
78155: LIST
78156: LIST
78157: PUSH
78158: LD_INT 0
78160: PUSH
78161: LD_INT 3
78163: NEG
78164: PUSH
78165: EMPTY
78166: LIST
78167: LIST
78168: PUSH
78169: LD_INT 1
78171: PUSH
78172: LD_INT 2
78174: NEG
78175: PUSH
78176: EMPTY
78177: LIST
78178: LIST
78179: PUSH
78180: EMPTY
78181: LIST
78182: LIST
78183: LIST
78184: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
78185: LD_ADDR_VAR 0 54
78189: PUSH
78190: LD_INT 2
78192: PUSH
78193: LD_INT 1
78195: NEG
78196: PUSH
78197: EMPTY
78198: LIST
78199: LIST
78200: PUSH
78201: LD_INT 3
78203: PUSH
78204: LD_INT 0
78206: PUSH
78207: EMPTY
78208: LIST
78209: LIST
78210: PUSH
78211: LD_INT 3
78213: PUSH
78214: LD_INT 1
78216: PUSH
78217: EMPTY
78218: LIST
78219: LIST
78220: PUSH
78221: EMPTY
78222: LIST
78223: LIST
78224: LIST
78225: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
78226: LD_ADDR_VAR 0 55
78230: PUSH
78231: LD_INT 3
78233: PUSH
78234: LD_INT 2
78236: PUSH
78237: EMPTY
78238: LIST
78239: LIST
78240: PUSH
78241: LD_INT 3
78243: PUSH
78244: LD_INT 3
78246: PUSH
78247: EMPTY
78248: LIST
78249: LIST
78250: PUSH
78251: LD_INT 2
78253: PUSH
78254: LD_INT 3
78256: PUSH
78257: EMPTY
78258: LIST
78259: LIST
78260: PUSH
78261: EMPTY
78262: LIST
78263: LIST
78264: LIST
78265: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
78266: LD_ADDR_VAR 0 56
78270: PUSH
78271: LD_INT 1
78273: PUSH
78274: LD_INT 3
78276: PUSH
78277: EMPTY
78278: LIST
78279: LIST
78280: PUSH
78281: LD_INT 0
78283: PUSH
78284: LD_INT 3
78286: PUSH
78287: EMPTY
78288: LIST
78289: LIST
78290: PUSH
78291: LD_INT 1
78293: NEG
78294: PUSH
78295: LD_INT 2
78297: PUSH
78298: EMPTY
78299: LIST
78300: LIST
78301: PUSH
78302: EMPTY
78303: LIST
78304: LIST
78305: LIST
78306: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
78307: LD_ADDR_VAR 0 57
78311: PUSH
78312: LD_INT 2
78314: NEG
78315: PUSH
78316: LD_INT 1
78318: PUSH
78319: EMPTY
78320: LIST
78321: LIST
78322: PUSH
78323: LD_INT 3
78325: NEG
78326: PUSH
78327: LD_INT 0
78329: PUSH
78330: EMPTY
78331: LIST
78332: LIST
78333: PUSH
78334: LD_INT 3
78336: NEG
78337: PUSH
78338: LD_INT 1
78340: NEG
78341: PUSH
78342: EMPTY
78343: LIST
78344: LIST
78345: PUSH
78346: EMPTY
78347: LIST
78348: LIST
78349: LIST
78350: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
78351: LD_ADDR_VAR 0 58
78355: PUSH
78356: LD_INT 2
78358: NEG
78359: PUSH
78360: LD_INT 3
78362: NEG
78363: PUSH
78364: EMPTY
78365: LIST
78366: LIST
78367: PUSH
78368: LD_INT 3
78370: NEG
78371: PUSH
78372: LD_INT 2
78374: NEG
78375: PUSH
78376: EMPTY
78377: LIST
78378: LIST
78379: PUSH
78380: LD_INT 3
78382: NEG
78383: PUSH
78384: LD_INT 3
78386: NEG
78387: PUSH
78388: EMPTY
78389: LIST
78390: LIST
78391: PUSH
78392: EMPTY
78393: LIST
78394: LIST
78395: LIST
78396: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
78397: LD_ADDR_VAR 0 59
78401: PUSH
78402: LD_INT 1
78404: NEG
78405: PUSH
78406: LD_INT 2
78408: NEG
78409: PUSH
78410: EMPTY
78411: LIST
78412: LIST
78413: PUSH
78414: LD_INT 0
78416: PUSH
78417: LD_INT 2
78419: NEG
78420: PUSH
78421: EMPTY
78422: LIST
78423: LIST
78424: PUSH
78425: LD_INT 1
78427: PUSH
78428: LD_INT 1
78430: NEG
78431: PUSH
78432: EMPTY
78433: LIST
78434: LIST
78435: PUSH
78436: EMPTY
78437: LIST
78438: LIST
78439: LIST
78440: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
78441: LD_ADDR_VAR 0 60
78445: PUSH
78446: LD_INT 1
78448: PUSH
78449: LD_INT 1
78451: NEG
78452: PUSH
78453: EMPTY
78454: LIST
78455: LIST
78456: PUSH
78457: LD_INT 2
78459: PUSH
78460: LD_INT 0
78462: PUSH
78463: EMPTY
78464: LIST
78465: LIST
78466: PUSH
78467: LD_INT 2
78469: PUSH
78470: LD_INT 1
78472: PUSH
78473: EMPTY
78474: LIST
78475: LIST
78476: PUSH
78477: EMPTY
78478: LIST
78479: LIST
78480: LIST
78481: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
78482: LD_ADDR_VAR 0 61
78486: PUSH
78487: LD_INT 2
78489: PUSH
78490: LD_INT 1
78492: PUSH
78493: EMPTY
78494: LIST
78495: LIST
78496: PUSH
78497: LD_INT 2
78499: PUSH
78500: LD_INT 2
78502: PUSH
78503: EMPTY
78504: LIST
78505: LIST
78506: PUSH
78507: LD_INT 1
78509: PUSH
78510: LD_INT 2
78512: PUSH
78513: EMPTY
78514: LIST
78515: LIST
78516: PUSH
78517: EMPTY
78518: LIST
78519: LIST
78520: LIST
78521: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
78522: LD_ADDR_VAR 0 62
78526: PUSH
78527: LD_INT 1
78529: PUSH
78530: LD_INT 2
78532: PUSH
78533: EMPTY
78534: LIST
78535: LIST
78536: PUSH
78537: LD_INT 0
78539: PUSH
78540: LD_INT 2
78542: PUSH
78543: EMPTY
78544: LIST
78545: LIST
78546: PUSH
78547: LD_INT 1
78549: NEG
78550: PUSH
78551: LD_INT 1
78553: PUSH
78554: EMPTY
78555: LIST
78556: LIST
78557: PUSH
78558: EMPTY
78559: LIST
78560: LIST
78561: LIST
78562: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
78563: LD_ADDR_VAR 0 63
78567: PUSH
78568: LD_INT 1
78570: NEG
78571: PUSH
78572: LD_INT 1
78574: PUSH
78575: EMPTY
78576: LIST
78577: LIST
78578: PUSH
78579: LD_INT 2
78581: NEG
78582: PUSH
78583: LD_INT 0
78585: PUSH
78586: EMPTY
78587: LIST
78588: LIST
78589: PUSH
78590: LD_INT 2
78592: NEG
78593: PUSH
78594: LD_INT 1
78596: NEG
78597: PUSH
78598: EMPTY
78599: LIST
78600: LIST
78601: PUSH
78602: EMPTY
78603: LIST
78604: LIST
78605: LIST
78606: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78607: LD_ADDR_VAR 0 64
78611: PUSH
78612: LD_INT 1
78614: NEG
78615: PUSH
78616: LD_INT 2
78618: NEG
78619: PUSH
78620: EMPTY
78621: LIST
78622: LIST
78623: PUSH
78624: LD_INT 2
78626: NEG
78627: PUSH
78628: LD_INT 1
78630: NEG
78631: PUSH
78632: EMPTY
78633: LIST
78634: LIST
78635: PUSH
78636: LD_INT 2
78638: NEG
78639: PUSH
78640: LD_INT 2
78642: NEG
78643: PUSH
78644: EMPTY
78645: LIST
78646: LIST
78647: PUSH
78648: EMPTY
78649: LIST
78650: LIST
78651: LIST
78652: ST_TO_ADDR
// end ; 2 :
78653: GO 81919
78655: LD_INT 2
78657: DOUBLE
78658: EQUAL
78659: IFTRUE 78663
78661: GO 81918
78663: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
78664: LD_ADDR_VAR 0 29
78668: PUSH
78669: LD_INT 4
78671: PUSH
78672: LD_INT 0
78674: PUSH
78675: EMPTY
78676: LIST
78677: LIST
78678: PUSH
78679: LD_INT 4
78681: PUSH
78682: LD_INT 1
78684: NEG
78685: PUSH
78686: EMPTY
78687: LIST
78688: LIST
78689: PUSH
78690: LD_INT 5
78692: PUSH
78693: LD_INT 0
78695: PUSH
78696: EMPTY
78697: LIST
78698: LIST
78699: PUSH
78700: LD_INT 5
78702: PUSH
78703: LD_INT 1
78705: PUSH
78706: EMPTY
78707: LIST
78708: LIST
78709: PUSH
78710: LD_INT 4
78712: PUSH
78713: LD_INT 1
78715: PUSH
78716: EMPTY
78717: LIST
78718: LIST
78719: PUSH
78720: LD_INT 3
78722: PUSH
78723: LD_INT 0
78725: PUSH
78726: EMPTY
78727: LIST
78728: LIST
78729: PUSH
78730: LD_INT 3
78732: PUSH
78733: LD_INT 1
78735: NEG
78736: PUSH
78737: EMPTY
78738: LIST
78739: LIST
78740: PUSH
78741: LD_INT 3
78743: PUSH
78744: LD_INT 2
78746: NEG
78747: PUSH
78748: EMPTY
78749: LIST
78750: LIST
78751: PUSH
78752: LD_INT 5
78754: PUSH
78755: LD_INT 2
78757: PUSH
78758: EMPTY
78759: LIST
78760: LIST
78761: PUSH
78762: LD_INT 3
78764: PUSH
78765: LD_INT 3
78767: PUSH
78768: EMPTY
78769: LIST
78770: LIST
78771: PUSH
78772: LD_INT 3
78774: PUSH
78775: LD_INT 2
78777: PUSH
78778: EMPTY
78779: LIST
78780: LIST
78781: PUSH
78782: LD_INT 4
78784: PUSH
78785: LD_INT 3
78787: PUSH
78788: EMPTY
78789: LIST
78790: LIST
78791: PUSH
78792: LD_INT 4
78794: PUSH
78795: LD_INT 4
78797: PUSH
78798: EMPTY
78799: LIST
78800: LIST
78801: PUSH
78802: LD_INT 3
78804: PUSH
78805: LD_INT 4
78807: PUSH
78808: EMPTY
78809: LIST
78810: LIST
78811: PUSH
78812: LD_INT 2
78814: PUSH
78815: LD_INT 3
78817: PUSH
78818: EMPTY
78819: LIST
78820: LIST
78821: PUSH
78822: LD_INT 2
78824: PUSH
78825: LD_INT 2
78827: PUSH
78828: EMPTY
78829: LIST
78830: LIST
78831: PUSH
78832: LD_INT 4
78834: PUSH
78835: LD_INT 2
78837: PUSH
78838: EMPTY
78839: LIST
78840: LIST
78841: PUSH
78842: LD_INT 2
78844: PUSH
78845: LD_INT 4
78847: PUSH
78848: EMPTY
78849: LIST
78850: LIST
78851: PUSH
78852: LD_INT 0
78854: PUSH
78855: LD_INT 4
78857: PUSH
78858: EMPTY
78859: LIST
78860: LIST
78861: PUSH
78862: LD_INT 0
78864: PUSH
78865: LD_INT 3
78867: PUSH
78868: EMPTY
78869: LIST
78870: LIST
78871: PUSH
78872: LD_INT 1
78874: PUSH
78875: LD_INT 4
78877: PUSH
78878: EMPTY
78879: LIST
78880: LIST
78881: PUSH
78882: LD_INT 1
78884: PUSH
78885: LD_INT 5
78887: PUSH
78888: EMPTY
78889: LIST
78890: LIST
78891: PUSH
78892: LD_INT 0
78894: PUSH
78895: LD_INT 5
78897: PUSH
78898: EMPTY
78899: LIST
78900: LIST
78901: PUSH
78902: LD_INT 1
78904: NEG
78905: PUSH
78906: LD_INT 4
78908: PUSH
78909: EMPTY
78910: LIST
78911: LIST
78912: PUSH
78913: LD_INT 1
78915: NEG
78916: PUSH
78917: LD_INT 3
78919: PUSH
78920: EMPTY
78921: LIST
78922: LIST
78923: PUSH
78924: LD_INT 2
78926: PUSH
78927: LD_INT 5
78929: PUSH
78930: EMPTY
78931: LIST
78932: LIST
78933: PUSH
78934: LD_INT 2
78936: NEG
78937: PUSH
78938: LD_INT 3
78940: PUSH
78941: EMPTY
78942: LIST
78943: LIST
78944: PUSH
78945: LD_INT 3
78947: NEG
78948: PUSH
78949: LD_INT 0
78951: PUSH
78952: EMPTY
78953: LIST
78954: LIST
78955: PUSH
78956: LD_INT 3
78958: NEG
78959: PUSH
78960: LD_INT 1
78962: NEG
78963: PUSH
78964: EMPTY
78965: LIST
78966: LIST
78967: PUSH
78968: LD_INT 2
78970: NEG
78971: PUSH
78972: LD_INT 0
78974: PUSH
78975: EMPTY
78976: LIST
78977: LIST
78978: PUSH
78979: LD_INT 2
78981: NEG
78982: PUSH
78983: LD_INT 1
78985: PUSH
78986: EMPTY
78987: LIST
78988: LIST
78989: PUSH
78990: LD_INT 3
78992: NEG
78993: PUSH
78994: LD_INT 1
78996: PUSH
78997: EMPTY
78998: LIST
78999: LIST
79000: PUSH
79001: LD_INT 4
79003: NEG
79004: PUSH
79005: LD_INT 0
79007: PUSH
79008: EMPTY
79009: LIST
79010: LIST
79011: PUSH
79012: LD_INT 4
79014: NEG
79015: PUSH
79016: LD_INT 1
79018: NEG
79019: PUSH
79020: EMPTY
79021: LIST
79022: LIST
79023: PUSH
79024: LD_INT 4
79026: NEG
79027: PUSH
79028: LD_INT 2
79030: NEG
79031: PUSH
79032: EMPTY
79033: LIST
79034: LIST
79035: PUSH
79036: LD_INT 2
79038: NEG
79039: PUSH
79040: LD_INT 2
79042: PUSH
79043: EMPTY
79044: LIST
79045: LIST
79046: PUSH
79047: LD_INT 4
79049: NEG
79050: PUSH
79051: LD_INT 4
79053: NEG
79054: PUSH
79055: EMPTY
79056: LIST
79057: LIST
79058: PUSH
79059: LD_INT 4
79061: NEG
79062: PUSH
79063: LD_INT 5
79065: NEG
79066: PUSH
79067: EMPTY
79068: LIST
79069: LIST
79070: PUSH
79071: LD_INT 3
79073: NEG
79074: PUSH
79075: LD_INT 4
79077: NEG
79078: PUSH
79079: EMPTY
79080: LIST
79081: LIST
79082: PUSH
79083: LD_INT 3
79085: NEG
79086: PUSH
79087: LD_INT 3
79089: NEG
79090: PUSH
79091: EMPTY
79092: LIST
79093: LIST
79094: PUSH
79095: LD_INT 4
79097: NEG
79098: PUSH
79099: LD_INT 3
79101: NEG
79102: PUSH
79103: EMPTY
79104: LIST
79105: LIST
79106: PUSH
79107: LD_INT 5
79109: NEG
79110: PUSH
79111: LD_INT 4
79113: NEG
79114: PUSH
79115: EMPTY
79116: LIST
79117: LIST
79118: PUSH
79119: LD_INT 5
79121: NEG
79122: PUSH
79123: LD_INT 5
79125: NEG
79126: PUSH
79127: EMPTY
79128: LIST
79129: LIST
79130: PUSH
79131: LD_INT 3
79133: NEG
79134: PUSH
79135: LD_INT 5
79137: NEG
79138: PUSH
79139: EMPTY
79140: LIST
79141: LIST
79142: PUSH
79143: LD_INT 5
79145: NEG
79146: PUSH
79147: LD_INT 3
79149: NEG
79150: PUSH
79151: EMPTY
79152: LIST
79153: LIST
79154: PUSH
79155: EMPTY
79156: LIST
79157: LIST
79158: LIST
79159: LIST
79160: LIST
79161: LIST
79162: LIST
79163: LIST
79164: LIST
79165: LIST
79166: LIST
79167: LIST
79168: LIST
79169: LIST
79170: LIST
79171: LIST
79172: LIST
79173: LIST
79174: LIST
79175: LIST
79176: LIST
79177: LIST
79178: LIST
79179: LIST
79180: LIST
79181: LIST
79182: LIST
79183: LIST
79184: LIST
79185: LIST
79186: LIST
79187: LIST
79188: LIST
79189: LIST
79190: LIST
79191: LIST
79192: LIST
79193: LIST
79194: LIST
79195: LIST
79196: LIST
79197: LIST
79198: LIST
79199: LIST
79200: LIST
79201: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
79202: LD_ADDR_VAR 0 30
79206: PUSH
79207: LD_INT 4
79209: PUSH
79210: LD_INT 4
79212: PUSH
79213: EMPTY
79214: LIST
79215: LIST
79216: PUSH
79217: LD_INT 4
79219: PUSH
79220: LD_INT 3
79222: PUSH
79223: EMPTY
79224: LIST
79225: LIST
79226: PUSH
79227: LD_INT 5
79229: PUSH
79230: LD_INT 4
79232: PUSH
79233: EMPTY
79234: LIST
79235: LIST
79236: PUSH
79237: LD_INT 5
79239: PUSH
79240: LD_INT 5
79242: PUSH
79243: EMPTY
79244: LIST
79245: LIST
79246: PUSH
79247: LD_INT 4
79249: PUSH
79250: LD_INT 5
79252: PUSH
79253: EMPTY
79254: LIST
79255: LIST
79256: PUSH
79257: LD_INT 3
79259: PUSH
79260: LD_INT 4
79262: PUSH
79263: EMPTY
79264: LIST
79265: LIST
79266: PUSH
79267: LD_INT 3
79269: PUSH
79270: LD_INT 3
79272: PUSH
79273: EMPTY
79274: LIST
79275: LIST
79276: PUSH
79277: LD_INT 5
79279: PUSH
79280: LD_INT 3
79282: PUSH
79283: EMPTY
79284: LIST
79285: LIST
79286: PUSH
79287: LD_INT 3
79289: PUSH
79290: LD_INT 5
79292: PUSH
79293: EMPTY
79294: LIST
79295: LIST
79296: PUSH
79297: LD_INT 0
79299: PUSH
79300: LD_INT 3
79302: PUSH
79303: EMPTY
79304: LIST
79305: LIST
79306: PUSH
79307: LD_INT 0
79309: PUSH
79310: LD_INT 2
79312: PUSH
79313: EMPTY
79314: LIST
79315: LIST
79316: PUSH
79317: LD_INT 1
79319: PUSH
79320: LD_INT 3
79322: PUSH
79323: EMPTY
79324: LIST
79325: LIST
79326: PUSH
79327: LD_INT 1
79329: PUSH
79330: LD_INT 4
79332: PUSH
79333: EMPTY
79334: LIST
79335: LIST
79336: PUSH
79337: LD_INT 0
79339: PUSH
79340: LD_INT 4
79342: PUSH
79343: EMPTY
79344: LIST
79345: LIST
79346: PUSH
79347: LD_INT 1
79349: NEG
79350: PUSH
79351: LD_INT 3
79353: PUSH
79354: EMPTY
79355: LIST
79356: LIST
79357: PUSH
79358: LD_INT 1
79360: NEG
79361: PUSH
79362: LD_INT 2
79364: PUSH
79365: EMPTY
79366: LIST
79367: LIST
79368: PUSH
79369: LD_INT 2
79371: PUSH
79372: LD_INT 4
79374: PUSH
79375: EMPTY
79376: LIST
79377: LIST
79378: PUSH
79379: LD_INT 2
79381: NEG
79382: PUSH
79383: LD_INT 2
79385: PUSH
79386: EMPTY
79387: LIST
79388: LIST
79389: PUSH
79390: LD_INT 4
79392: NEG
79393: PUSH
79394: LD_INT 0
79396: PUSH
79397: EMPTY
79398: LIST
79399: LIST
79400: PUSH
79401: LD_INT 4
79403: NEG
79404: PUSH
79405: LD_INT 1
79407: NEG
79408: PUSH
79409: EMPTY
79410: LIST
79411: LIST
79412: PUSH
79413: LD_INT 3
79415: NEG
79416: PUSH
79417: LD_INT 0
79419: PUSH
79420: EMPTY
79421: LIST
79422: LIST
79423: PUSH
79424: LD_INT 3
79426: NEG
79427: PUSH
79428: LD_INT 1
79430: PUSH
79431: EMPTY
79432: LIST
79433: LIST
79434: PUSH
79435: LD_INT 4
79437: NEG
79438: PUSH
79439: LD_INT 1
79441: PUSH
79442: EMPTY
79443: LIST
79444: LIST
79445: PUSH
79446: LD_INT 5
79448: NEG
79449: PUSH
79450: LD_INT 0
79452: PUSH
79453: EMPTY
79454: LIST
79455: LIST
79456: PUSH
79457: LD_INT 5
79459: NEG
79460: PUSH
79461: LD_INT 1
79463: NEG
79464: PUSH
79465: EMPTY
79466: LIST
79467: LIST
79468: PUSH
79469: LD_INT 5
79471: NEG
79472: PUSH
79473: LD_INT 2
79475: NEG
79476: PUSH
79477: EMPTY
79478: LIST
79479: LIST
79480: PUSH
79481: LD_INT 3
79483: NEG
79484: PUSH
79485: LD_INT 2
79487: PUSH
79488: EMPTY
79489: LIST
79490: LIST
79491: PUSH
79492: LD_INT 3
79494: NEG
79495: PUSH
79496: LD_INT 3
79498: NEG
79499: PUSH
79500: EMPTY
79501: LIST
79502: LIST
79503: PUSH
79504: LD_INT 3
79506: NEG
79507: PUSH
79508: LD_INT 4
79510: NEG
79511: PUSH
79512: EMPTY
79513: LIST
79514: LIST
79515: PUSH
79516: LD_INT 2
79518: NEG
79519: PUSH
79520: LD_INT 3
79522: NEG
79523: PUSH
79524: EMPTY
79525: LIST
79526: LIST
79527: PUSH
79528: LD_INT 2
79530: NEG
79531: PUSH
79532: LD_INT 2
79534: NEG
79535: PUSH
79536: EMPTY
79537: LIST
79538: LIST
79539: PUSH
79540: LD_INT 3
79542: NEG
79543: PUSH
79544: LD_INT 2
79546: NEG
79547: PUSH
79548: EMPTY
79549: LIST
79550: LIST
79551: PUSH
79552: LD_INT 4
79554: NEG
79555: PUSH
79556: LD_INT 3
79558: NEG
79559: PUSH
79560: EMPTY
79561: LIST
79562: LIST
79563: PUSH
79564: LD_INT 4
79566: NEG
79567: PUSH
79568: LD_INT 4
79570: NEG
79571: PUSH
79572: EMPTY
79573: LIST
79574: LIST
79575: PUSH
79576: LD_INT 2
79578: NEG
79579: PUSH
79580: LD_INT 4
79582: NEG
79583: PUSH
79584: EMPTY
79585: LIST
79586: LIST
79587: PUSH
79588: LD_INT 4
79590: NEG
79591: PUSH
79592: LD_INT 2
79594: NEG
79595: PUSH
79596: EMPTY
79597: LIST
79598: LIST
79599: PUSH
79600: LD_INT 0
79602: PUSH
79603: LD_INT 4
79605: NEG
79606: PUSH
79607: EMPTY
79608: LIST
79609: LIST
79610: PUSH
79611: LD_INT 0
79613: PUSH
79614: LD_INT 5
79616: NEG
79617: PUSH
79618: EMPTY
79619: LIST
79620: LIST
79621: PUSH
79622: LD_INT 1
79624: PUSH
79625: LD_INT 4
79627: NEG
79628: PUSH
79629: EMPTY
79630: LIST
79631: LIST
79632: PUSH
79633: LD_INT 1
79635: PUSH
79636: LD_INT 3
79638: NEG
79639: PUSH
79640: EMPTY
79641: LIST
79642: LIST
79643: PUSH
79644: LD_INT 0
79646: PUSH
79647: LD_INT 3
79649: NEG
79650: PUSH
79651: EMPTY
79652: LIST
79653: LIST
79654: PUSH
79655: LD_INT 1
79657: NEG
79658: PUSH
79659: LD_INT 4
79661: NEG
79662: PUSH
79663: EMPTY
79664: LIST
79665: LIST
79666: PUSH
79667: LD_INT 1
79669: NEG
79670: PUSH
79671: LD_INT 5
79673: NEG
79674: PUSH
79675: EMPTY
79676: LIST
79677: LIST
79678: PUSH
79679: LD_INT 2
79681: PUSH
79682: LD_INT 3
79684: NEG
79685: PUSH
79686: EMPTY
79687: LIST
79688: LIST
79689: PUSH
79690: LD_INT 2
79692: NEG
79693: PUSH
79694: LD_INT 5
79696: NEG
79697: PUSH
79698: EMPTY
79699: LIST
79700: LIST
79701: PUSH
79702: EMPTY
79703: LIST
79704: LIST
79705: LIST
79706: LIST
79707: LIST
79708: LIST
79709: LIST
79710: LIST
79711: LIST
79712: LIST
79713: LIST
79714: LIST
79715: LIST
79716: LIST
79717: LIST
79718: LIST
79719: LIST
79720: LIST
79721: LIST
79722: LIST
79723: LIST
79724: LIST
79725: LIST
79726: LIST
79727: LIST
79728: LIST
79729: LIST
79730: LIST
79731: LIST
79732: LIST
79733: LIST
79734: LIST
79735: LIST
79736: LIST
79737: LIST
79738: LIST
79739: LIST
79740: LIST
79741: LIST
79742: LIST
79743: LIST
79744: LIST
79745: LIST
79746: LIST
79747: LIST
79748: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
79749: LD_ADDR_VAR 0 31
79753: PUSH
79754: LD_INT 0
79756: PUSH
79757: LD_INT 4
79759: PUSH
79760: EMPTY
79761: LIST
79762: LIST
79763: PUSH
79764: LD_INT 0
79766: PUSH
79767: LD_INT 3
79769: PUSH
79770: EMPTY
79771: LIST
79772: LIST
79773: PUSH
79774: LD_INT 1
79776: PUSH
79777: LD_INT 4
79779: PUSH
79780: EMPTY
79781: LIST
79782: LIST
79783: PUSH
79784: LD_INT 1
79786: PUSH
79787: LD_INT 5
79789: PUSH
79790: EMPTY
79791: LIST
79792: LIST
79793: PUSH
79794: LD_INT 0
79796: PUSH
79797: LD_INT 5
79799: PUSH
79800: EMPTY
79801: LIST
79802: LIST
79803: PUSH
79804: LD_INT 1
79806: NEG
79807: PUSH
79808: LD_INT 4
79810: PUSH
79811: EMPTY
79812: LIST
79813: LIST
79814: PUSH
79815: LD_INT 1
79817: NEG
79818: PUSH
79819: LD_INT 3
79821: PUSH
79822: EMPTY
79823: LIST
79824: LIST
79825: PUSH
79826: LD_INT 2
79828: PUSH
79829: LD_INT 5
79831: PUSH
79832: EMPTY
79833: LIST
79834: LIST
79835: PUSH
79836: LD_INT 2
79838: NEG
79839: PUSH
79840: LD_INT 3
79842: PUSH
79843: EMPTY
79844: LIST
79845: LIST
79846: PUSH
79847: LD_INT 3
79849: NEG
79850: PUSH
79851: LD_INT 0
79853: PUSH
79854: EMPTY
79855: LIST
79856: LIST
79857: PUSH
79858: LD_INT 3
79860: NEG
79861: PUSH
79862: LD_INT 1
79864: NEG
79865: PUSH
79866: EMPTY
79867: LIST
79868: LIST
79869: PUSH
79870: LD_INT 2
79872: NEG
79873: PUSH
79874: LD_INT 0
79876: PUSH
79877: EMPTY
79878: LIST
79879: LIST
79880: PUSH
79881: LD_INT 2
79883: NEG
79884: PUSH
79885: LD_INT 1
79887: PUSH
79888: EMPTY
79889: LIST
79890: LIST
79891: PUSH
79892: LD_INT 3
79894: NEG
79895: PUSH
79896: LD_INT 1
79898: PUSH
79899: EMPTY
79900: LIST
79901: LIST
79902: PUSH
79903: LD_INT 4
79905: NEG
79906: PUSH
79907: LD_INT 0
79909: PUSH
79910: EMPTY
79911: LIST
79912: LIST
79913: PUSH
79914: LD_INT 4
79916: NEG
79917: PUSH
79918: LD_INT 1
79920: NEG
79921: PUSH
79922: EMPTY
79923: LIST
79924: LIST
79925: PUSH
79926: LD_INT 4
79928: NEG
79929: PUSH
79930: LD_INT 2
79932: NEG
79933: PUSH
79934: EMPTY
79935: LIST
79936: LIST
79937: PUSH
79938: LD_INT 2
79940: NEG
79941: PUSH
79942: LD_INT 2
79944: PUSH
79945: EMPTY
79946: LIST
79947: LIST
79948: PUSH
79949: LD_INT 4
79951: NEG
79952: PUSH
79953: LD_INT 4
79955: NEG
79956: PUSH
79957: EMPTY
79958: LIST
79959: LIST
79960: PUSH
79961: LD_INT 4
79963: NEG
79964: PUSH
79965: LD_INT 5
79967: NEG
79968: PUSH
79969: EMPTY
79970: LIST
79971: LIST
79972: PUSH
79973: LD_INT 3
79975: NEG
79976: PUSH
79977: LD_INT 4
79979: NEG
79980: PUSH
79981: EMPTY
79982: LIST
79983: LIST
79984: PUSH
79985: LD_INT 3
79987: NEG
79988: PUSH
79989: LD_INT 3
79991: NEG
79992: PUSH
79993: EMPTY
79994: LIST
79995: LIST
79996: PUSH
79997: LD_INT 4
79999: NEG
80000: PUSH
80001: LD_INT 3
80003: NEG
80004: PUSH
80005: EMPTY
80006: LIST
80007: LIST
80008: PUSH
80009: LD_INT 5
80011: NEG
80012: PUSH
80013: LD_INT 4
80015: NEG
80016: PUSH
80017: EMPTY
80018: LIST
80019: LIST
80020: PUSH
80021: LD_INT 5
80023: NEG
80024: PUSH
80025: LD_INT 5
80027: NEG
80028: PUSH
80029: EMPTY
80030: LIST
80031: LIST
80032: PUSH
80033: LD_INT 3
80035: NEG
80036: PUSH
80037: LD_INT 5
80039: NEG
80040: PUSH
80041: EMPTY
80042: LIST
80043: LIST
80044: PUSH
80045: LD_INT 5
80047: NEG
80048: PUSH
80049: LD_INT 3
80051: NEG
80052: PUSH
80053: EMPTY
80054: LIST
80055: LIST
80056: PUSH
80057: LD_INT 0
80059: PUSH
80060: LD_INT 3
80062: NEG
80063: PUSH
80064: EMPTY
80065: LIST
80066: LIST
80067: PUSH
80068: LD_INT 0
80070: PUSH
80071: LD_INT 4
80073: NEG
80074: PUSH
80075: EMPTY
80076: LIST
80077: LIST
80078: PUSH
80079: LD_INT 1
80081: PUSH
80082: LD_INT 3
80084: NEG
80085: PUSH
80086: EMPTY
80087: LIST
80088: LIST
80089: PUSH
80090: LD_INT 1
80092: PUSH
80093: LD_INT 2
80095: NEG
80096: PUSH
80097: EMPTY
80098: LIST
80099: LIST
80100: PUSH
80101: LD_INT 0
80103: PUSH
80104: LD_INT 2
80106: NEG
80107: PUSH
80108: EMPTY
80109: LIST
80110: LIST
80111: PUSH
80112: LD_INT 1
80114: NEG
80115: PUSH
80116: LD_INT 3
80118: NEG
80119: PUSH
80120: EMPTY
80121: LIST
80122: LIST
80123: PUSH
80124: LD_INT 1
80126: NEG
80127: PUSH
80128: LD_INT 4
80130: NEG
80131: PUSH
80132: EMPTY
80133: LIST
80134: LIST
80135: PUSH
80136: LD_INT 2
80138: PUSH
80139: LD_INT 2
80141: NEG
80142: PUSH
80143: EMPTY
80144: LIST
80145: LIST
80146: PUSH
80147: LD_INT 2
80149: NEG
80150: PUSH
80151: LD_INT 4
80153: NEG
80154: PUSH
80155: EMPTY
80156: LIST
80157: LIST
80158: PUSH
80159: LD_INT 4
80161: PUSH
80162: LD_INT 0
80164: PUSH
80165: EMPTY
80166: LIST
80167: LIST
80168: PUSH
80169: LD_INT 4
80171: PUSH
80172: LD_INT 1
80174: NEG
80175: PUSH
80176: EMPTY
80177: LIST
80178: LIST
80179: PUSH
80180: LD_INT 5
80182: PUSH
80183: LD_INT 0
80185: PUSH
80186: EMPTY
80187: LIST
80188: LIST
80189: PUSH
80190: LD_INT 5
80192: PUSH
80193: LD_INT 1
80195: PUSH
80196: EMPTY
80197: LIST
80198: LIST
80199: PUSH
80200: LD_INT 4
80202: PUSH
80203: LD_INT 1
80205: PUSH
80206: EMPTY
80207: LIST
80208: LIST
80209: PUSH
80210: LD_INT 3
80212: PUSH
80213: LD_INT 0
80215: PUSH
80216: EMPTY
80217: LIST
80218: LIST
80219: PUSH
80220: LD_INT 3
80222: PUSH
80223: LD_INT 1
80225: NEG
80226: PUSH
80227: EMPTY
80228: LIST
80229: LIST
80230: PUSH
80231: LD_INT 3
80233: PUSH
80234: LD_INT 2
80236: NEG
80237: PUSH
80238: EMPTY
80239: LIST
80240: LIST
80241: PUSH
80242: LD_INT 5
80244: PUSH
80245: LD_INT 2
80247: PUSH
80248: EMPTY
80249: LIST
80250: LIST
80251: PUSH
80252: EMPTY
80253: LIST
80254: LIST
80255: LIST
80256: LIST
80257: LIST
80258: LIST
80259: LIST
80260: LIST
80261: LIST
80262: LIST
80263: LIST
80264: LIST
80265: LIST
80266: LIST
80267: LIST
80268: LIST
80269: LIST
80270: LIST
80271: LIST
80272: LIST
80273: LIST
80274: LIST
80275: LIST
80276: LIST
80277: LIST
80278: LIST
80279: LIST
80280: LIST
80281: LIST
80282: LIST
80283: LIST
80284: LIST
80285: LIST
80286: LIST
80287: LIST
80288: LIST
80289: LIST
80290: LIST
80291: LIST
80292: LIST
80293: LIST
80294: LIST
80295: LIST
80296: LIST
80297: LIST
80298: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
80299: LD_ADDR_VAR 0 32
80303: PUSH
80304: LD_INT 4
80306: NEG
80307: PUSH
80308: LD_INT 0
80310: PUSH
80311: EMPTY
80312: LIST
80313: LIST
80314: PUSH
80315: LD_INT 4
80317: NEG
80318: PUSH
80319: LD_INT 1
80321: NEG
80322: PUSH
80323: EMPTY
80324: LIST
80325: LIST
80326: PUSH
80327: LD_INT 3
80329: NEG
80330: PUSH
80331: LD_INT 0
80333: PUSH
80334: EMPTY
80335: LIST
80336: LIST
80337: PUSH
80338: LD_INT 3
80340: NEG
80341: PUSH
80342: LD_INT 1
80344: PUSH
80345: EMPTY
80346: LIST
80347: LIST
80348: PUSH
80349: LD_INT 4
80351: NEG
80352: PUSH
80353: LD_INT 1
80355: PUSH
80356: EMPTY
80357: LIST
80358: LIST
80359: PUSH
80360: LD_INT 5
80362: NEG
80363: PUSH
80364: LD_INT 0
80366: PUSH
80367: EMPTY
80368: LIST
80369: LIST
80370: PUSH
80371: LD_INT 5
80373: NEG
80374: PUSH
80375: LD_INT 1
80377: NEG
80378: PUSH
80379: EMPTY
80380: LIST
80381: LIST
80382: PUSH
80383: LD_INT 5
80385: NEG
80386: PUSH
80387: LD_INT 2
80389: NEG
80390: PUSH
80391: EMPTY
80392: LIST
80393: LIST
80394: PUSH
80395: LD_INT 3
80397: NEG
80398: PUSH
80399: LD_INT 2
80401: PUSH
80402: EMPTY
80403: LIST
80404: LIST
80405: PUSH
80406: LD_INT 3
80408: NEG
80409: PUSH
80410: LD_INT 3
80412: NEG
80413: PUSH
80414: EMPTY
80415: LIST
80416: LIST
80417: PUSH
80418: LD_INT 3
80420: NEG
80421: PUSH
80422: LD_INT 4
80424: NEG
80425: PUSH
80426: EMPTY
80427: LIST
80428: LIST
80429: PUSH
80430: LD_INT 2
80432: NEG
80433: PUSH
80434: LD_INT 3
80436: NEG
80437: PUSH
80438: EMPTY
80439: LIST
80440: LIST
80441: PUSH
80442: LD_INT 2
80444: NEG
80445: PUSH
80446: LD_INT 2
80448: NEG
80449: PUSH
80450: EMPTY
80451: LIST
80452: LIST
80453: PUSH
80454: LD_INT 3
80456: NEG
80457: PUSH
80458: LD_INT 2
80460: NEG
80461: PUSH
80462: EMPTY
80463: LIST
80464: LIST
80465: PUSH
80466: LD_INT 4
80468: NEG
80469: PUSH
80470: LD_INT 3
80472: NEG
80473: PUSH
80474: EMPTY
80475: LIST
80476: LIST
80477: PUSH
80478: LD_INT 4
80480: NEG
80481: PUSH
80482: LD_INT 4
80484: NEG
80485: PUSH
80486: EMPTY
80487: LIST
80488: LIST
80489: PUSH
80490: LD_INT 2
80492: NEG
80493: PUSH
80494: LD_INT 4
80496: NEG
80497: PUSH
80498: EMPTY
80499: LIST
80500: LIST
80501: PUSH
80502: LD_INT 4
80504: NEG
80505: PUSH
80506: LD_INT 2
80508: NEG
80509: PUSH
80510: EMPTY
80511: LIST
80512: LIST
80513: PUSH
80514: LD_INT 0
80516: PUSH
80517: LD_INT 4
80519: NEG
80520: PUSH
80521: EMPTY
80522: LIST
80523: LIST
80524: PUSH
80525: LD_INT 0
80527: PUSH
80528: LD_INT 5
80530: NEG
80531: PUSH
80532: EMPTY
80533: LIST
80534: LIST
80535: PUSH
80536: LD_INT 1
80538: PUSH
80539: LD_INT 4
80541: NEG
80542: PUSH
80543: EMPTY
80544: LIST
80545: LIST
80546: PUSH
80547: LD_INT 1
80549: PUSH
80550: LD_INT 3
80552: NEG
80553: PUSH
80554: EMPTY
80555: LIST
80556: LIST
80557: PUSH
80558: LD_INT 0
80560: PUSH
80561: LD_INT 3
80563: NEG
80564: PUSH
80565: EMPTY
80566: LIST
80567: LIST
80568: PUSH
80569: LD_INT 1
80571: NEG
80572: PUSH
80573: LD_INT 4
80575: NEG
80576: PUSH
80577: EMPTY
80578: LIST
80579: LIST
80580: PUSH
80581: LD_INT 1
80583: NEG
80584: PUSH
80585: LD_INT 5
80587: NEG
80588: PUSH
80589: EMPTY
80590: LIST
80591: LIST
80592: PUSH
80593: LD_INT 2
80595: PUSH
80596: LD_INT 3
80598: NEG
80599: PUSH
80600: EMPTY
80601: LIST
80602: LIST
80603: PUSH
80604: LD_INT 2
80606: NEG
80607: PUSH
80608: LD_INT 5
80610: NEG
80611: PUSH
80612: EMPTY
80613: LIST
80614: LIST
80615: PUSH
80616: LD_INT 3
80618: PUSH
80619: LD_INT 0
80621: PUSH
80622: EMPTY
80623: LIST
80624: LIST
80625: PUSH
80626: LD_INT 3
80628: PUSH
80629: LD_INT 1
80631: NEG
80632: PUSH
80633: EMPTY
80634: LIST
80635: LIST
80636: PUSH
80637: LD_INT 4
80639: PUSH
80640: LD_INT 0
80642: PUSH
80643: EMPTY
80644: LIST
80645: LIST
80646: PUSH
80647: LD_INT 4
80649: PUSH
80650: LD_INT 1
80652: PUSH
80653: EMPTY
80654: LIST
80655: LIST
80656: PUSH
80657: LD_INT 3
80659: PUSH
80660: LD_INT 1
80662: PUSH
80663: EMPTY
80664: LIST
80665: LIST
80666: PUSH
80667: LD_INT 2
80669: PUSH
80670: LD_INT 0
80672: PUSH
80673: EMPTY
80674: LIST
80675: LIST
80676: PUSH
80677: LD_INT 2
80679: PUSH
80680: LD_INT 1
80682: NEG
80683: PUSH
80684: EMPTY
80685: LIST
80686: LIST
80687: PUSH
80688: LD_INT 2
80690: PUSH
80691: LD_INT 2
80693: NEG
80694: PUSH
80695: EMPTY
80696: LIST
80697: LIST
80698: PUSH
80699: LD_INT 4
80701: PUSH
80702: LD_INT 2
80704: PUSH
80705: EMPTY
80706: LIST
80707: LIST
80708: PUSH
80709: LD_INT 4
80711: PUSH
80712: LD_INT 4
80714: PUSH
80715: EMPTY
80716: LIST
80717: LIST
80718: PUSH
80719: LD_INT 4
80721: PUSH
80722: LD_INT 3
80724: PUSH
80725: EMPTY
80726: LIST
80727: LIST
80728: PUSH
80729: LD_INT 5
80731: PUSH
80732: LD_INT 4
80734: PUSH
80735: EMPTY
80736: LIST
80737: LIST
80738: PUSH
80739: LD_INT 5
80741: PUSH
80742: LD_INT 5
80744: PUSH
80745: EMPTY
80746: LIST
80747: LIST
80748: PUSH
80749: LD_INT 4
80751: PUSH
80752: LD_INT 5
80754: PUSH
80755: EMPTY
80756: LIST
80757: LIST
80758: PUSH
80759: LD_INT 3
80761: PUSH
80762: LD_INT 4
80764: PUSH
80765: EMPTY
80766: LIST
80767: LIST
80768: PUSH
80769: LD_INT 3
80771: PUSH
80772: LD_INT 3
80774: PUSH
80775: EMPTY
80776: LIST
80777: LIST
80778: PUSH
80779: LD_INT 5
80781: PUSH
80782: LD_INT 3
80784: PUSH
80785: EMPTY
80786: LIST
80787: LIST
80788: PUSH
80789: LD_INT 3
80791: PUSH
80792: LD_INT 5
80794: PUSH
80795: EMPTY
80796: LIST
80797: LIST
80798: PUSH
80799: EMPTY
80800: LIST
80801: LIST
80802: LIST
80803: LIST
80804: LIST
80805: LIST
80806: LIST
80807: LIST
80808: LIST
80809: LIST
80810: LIST
80811: LIST
80812: LIST
80813: LIST
80814: LIST
80815: LIST
80816: LIST
80817: LIST
80818: LIST
80819: LIST
80820: LIST
80821: LIST
80822: LIST
80823: LIST
80824: LIST
80825: LIST
80826: LIST
80827: LIST
80828: LIST
80829: LIST
80830: LIST
80831: LIST
80832: LIST
80833: LIST
80834: LIST
80835: LIST
80836: LIST
80837: LIST
80838: LIST
80839: LIST
80840: LIST
80841: LIST
80842: LIST
80843: LIST
80844: LIST
80845: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
80846: LD_ADDR_VAR 0 33
80850: PUSH
80851: LD_INT 4
80853: NEG
80854: PUSH
80855: LD_INT 4
80857: NEG
80858: PUSH
80859: EMPTY
80860: LIST
80861: LIST
80862: PUSH
80863: LD_INT 4
80865: NEG
80866: PUSH
80867: LD_INT 5
80869: NEG
80870: PUSH
80871: EMPTY
80872: LIST
80873: LIST
80874: PUSH
80875: LD_INT 3
80877: NEG
80878: PUSH
80879: LD_INT 4
80881: NEG
80882: PUSH
80883: EMPTY
80884: LIST
80885: LIST
80886: PUSH
80887: LD_INT 3
80889: NEG
80890: PUSH
80891: LD_INT 3
80893: NEG
80894: PUSH
80895: EMPTY
80896: LIST
80897: LIST
80898: PUSH
80899: LD_INT 4
80901: NEG
80902: PUSH
80903: LD_INT 3
80905: NEG
80906: PUSH
80907: EMPTY
80908: LIST
80909: LIST
80910: PUSH
80911: LD_INT 5
80913: NEG
80914: PUSH
80915: LD_INT 4
80917: NEG
80918: PUSH
80919: EMPTY
80920: LIST
80921: LIST
80922: PUSH
80923: LD_INT 5
80925: NEG
80926: PUSH
80927: LD_INT 5
80929: NEG
80930: PUSH
80931: EMPTY
80932: LIST
80933: LIST
80934: PUSH
80935: LD_INT 3
80937: NEG
80938: PUSH
80939: LD_INT 5
80941: NEG
80942: PUSH
80943: EMPTY
80944: LIST
80945: LIST
80946: PUSH
80947: LD_INT 5
80949: NEG
80950: PUSH
80951: LD_INT 3
80953: NEG
80954: PUSH
80955: EMPTY
80956: LIST
80957: LIST
80958: PUSH
80959: LD_INT 0
80961: PUSH
80962: LD_INT 3
80964: NEG
80965: PUSH
80966: EMPTY
80967: LIST
80968: LIST
80969: PUSH
80970: LD_INT 0
80972: PUSH
80973: LD_INT 4
80975: NEG
80976: PUSH
80977: EMPTY
80978: LIST
80979: LIST
80980: PUSH
80981: LD_INT 1
80983: PUSH
80984: LD_INT 3
80986: NEG
80987: PUSH
80988: EMPTY
80989: LIST
80990: LIST
80991: PUSH
80992: LD_INT 1
80994: PUSH
80995: LD_INT 2
80997: NEG
80998: PUSH
80999: EMPTY
81000: LIST
81001: LIST
81002: PUSH
81003: LD_INT 0
81005: PUSH
81006: LD_INT 2
81008: NEG
81009: PUSH
81010: EMPTY
81011: LIST
81012: LIST
81013: PUSH
81014: LD_INT 1
81016: NEG
81017: PUSH
81018: LD_INT 3
81020: NEG
81021: PUSH
81022: EMPTY
81023: LIST
81024: LIST
81025: PUSH
81026: LD_INT 1
81028: NEG
81029: PUSH
81030: LD_INT 4
81032: NEG
81033: PUSH
81034: EMPTY
81035: LIST
81036: LIST
81037: PUSH
81038: LD_INT 2
81040: PUSH
81041: LD_INT 2
81043: NEG
81044: PUSH
81045: EMPTY
81046: LIST
81047: LIST
81048: PUSH
81049: LD_INT 2
81051: NEG
81052: PUSH
81053: LD_INT 4
81055: NEG
81056: PUSH
81057: EMPTY
81058: LIST
81059: LIST
81060: PUSH
81061: LD_INT 4
81063: PUSH
81064: LD_INT 0
81066: PUSH
81067: EMPTY
81068: LIST
81069: LIST
81070: PUSH
81071: LD_INT 4
81073: PUSH
81074: LD_INT 1
81076: NEG
81077: PUSH
81078: EMPTY
81079: LIST
81080: LIST
81081: PUSH
81082: LD_INT 5
81084: PUSH
81085: LD_INT 0
81087: PUSH
81088: EMPTY
81089: LIST
81090: LIST
81091: PUSH
81092: LD_INT 5
81094: PUSH
81095: LD_INT 1
81097: PUSH
81098: EMPTY
81099: LIST
81100: LIST
81101: PUSH
81102: LD_INT 4
81104: PUSH
81105: LD_INT 1
81107: PUSH
81108: EMPTY
81109: LIST
81110: LIST
81111: PUSH
81112: LD_INT 3
81114: PUSH
81115: LD_INT 0
81117: PUSH
81118: EMPTY
81119: LIST
81120: LIST
81121: PUSH
81122: LD_INT 3
81124: PUSH
81125: LD_INT 1
81127: NEG
81128: PUSH
81129: EMPTY
81130: LIST
81131: LIST
81132: PUSH
81133: LD_INT 3
81135: PUSH
81136: LD_INT 2
81138: NEG
81139: PUSH
81140: EMPTY
81141: LIST
81142: LIST
81143: PUSH
81144: LD_INT 5
81146: PUSH
81147: LD_INT 2
81149: PUSH
81150: EMPTY
81151: LIST
81152: LIST
81153: PUSH
81154: LD_INT 3
81156: PUSH
81157: LD_INT 3
81159: PUSH
81160: EMPTY
81161: LIST
81162: LIST
81163: PUSH
81164: LD_INT 3
81166: PUSH
81167: LD_INT 2
81169: PUSH
81170: EMPTY
81171: LIST
81172: LIST
81173: PUSH
81174: LD_INT 4
81176: PUSH
81177: LD_INT 3
81179: PUSH
81180: EMPTY
81181: LIST
81182: LIST
81183: PUSH
81184: LD_INT 4
81186: PUSH
81187: LD_INT 4
81189: PUSH
81190: EMPTY
81191: LIST
81192: LIST
81193: PUSH
81194: LD_INT 3
81196: PUSH
81197: LD_INT 4
81199: PUSH
81200: EMPTY
81201: LIST
81202: LIST
81203: PUSH
81204: LD_INT 2
81206: PUSH
81207: LD_INT 3
81209: PUSH
81210: EMPTY
81211: LIST
81212: LIST
81213: PUSH
81214: LD_INT 2
81216: PUSH
81217: LD_INT 2
81219: PUSH
81220: EMPTY
81221: LIST
81222: LIST
81223: PUSH
81224: LD_INT 4
81226: PUSH
81227: LD_INT 2
81229: PUSH
81230: EMPTY
81231: LIST
81232: LIST
81233: PUSH
81234: LD_INT 2
81236: PUSH
81237: LD_INT 4
81239: PUSH
81240: EMPTY
81241: LIST
81242: LIST
81243: PUSH
81244: LD_INT 0
81246: PUSH
81247: LD_INT 4
81249: PUSH
81250: EMPTY
81251: LIST
81252: LIST
81253: PUSH
81254: LD_INT 0
81256: PUSH
81257: LD_INT 3
81259: PUSH
81260: EMPTY
81261: LIST
81262: LIST
81263: PUSH
81264: LD_INT 1
81266: PUSH
81267: LD_INT 4
81269: PUSH
81270: EMPTY
81271: LIST
81272: LIST
81273: PUSH
81274: LD_INT 1
81276: PUSH
81277: LD_INT 5
81279: PUSH
81280: EMPTY
81281: LIST
81282: LIST
81283: PUSH
81284: LD_INT 0
81286: PUSH
81287: LD_INT 5
81289: PUSH
81290: EMPTY
81291: LIST
81292: LIST
81293: PUSH
81294: LD_INT 1
81296: NEG
81297: PUSH
81298: LD_INT 4
81300: PUSH
81301: EMPTY
81302: LIST
81303: LIST
81304: PUSH
81305: LD_INT 1
81307: NEG
81308: PUSH
81309: LD_INT 3
81311: PUSH
81312: EMPTY
81313: LIST
81314: LIST
81315: PUSH
81316: LD_INT 2
81318: PUSH
81319: LD_INT 5
81321: PUSH
81322: EMPTY
81323: LIST
81324: LIST
81325: PUSH
81326: LD_INT 2
81328: NEG
81329: PUSH
81330: LD_INT 3
81332: PUSH
81333: EMPTY
81334: LIST
81335: LIST
81336: PUSH
81337: EMPTY
81338: LIST
81339: LIST
81340: LIST
81341: LIST
81342: LIST
81343: LIST
81344: LIST
81345: LIST
81346: LIST
81347: LIST
81348: LIST
81349: LIST
81350: LIST
81351: LIST
81352: LIST
81353: LIST
81354: LIST
81355: LIST
81356: LIST
81357: LIST
81358: LIST
81359: LIST
81360: LIST
81361: LIST
81362: LIST
81363: LIST
81364: LIST
81365: LIST
81366: LIST
81367: LIST
81368: LIST
81369: LIST
81370: LIST
81371: LIST
81372: LIST
81373: LIST
81374: LIST
81375: LIST
81376: LIST
81377: LIST
81378: LIST
81379: LIST
81380: LIST
81381: LIST
81382: LIST
81383: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
81384: LD_ADDR_VAR 0 34
81388: PUSH
81389: LD_INT 0
81391: PUSH
81392: LD_INT 4
81394: NEG
81395: PUSH
81396: EMPTY
81397: LIST
81398: LIST
81399: PUSH
81400: LD_INT 0
81402: PUSH
81403: LD_INT 5
81405: NEG
81406: PUSH
81407: EMPTY
81408: LIST
81409: LIST
81410: PUSH
81411: LD_INT 1
81413: PUSH
81414: LD_INT 4
81416: NEG
81417: PUSH
81418: EMPTY
81419: LIST
81420: LIST
81421: PUSH
81422: LD_INT 1
81424: PUSH
81425: LD_INT 3
81427: NEG
81428: PUSH
81429: EMPTY
81430: LIST
81431: LIST
81432: PUSH
81433: LD_INT 0
81435: PUSH
81436: LD_INT 3
81438: NEG
81439: PUSH
81440: EMPTY
81441: LIST
81442: LIST
81443: PUSH
81444: LD_INT 1
81446: NEG
81447: PUSH
81448: LD_INT 4
81450: NEG
81451: PUSH
81452: EMPTY
81453: LIST
81454: LIST
81455: PUSH
81456: LD_INT 1
81458: NEG
81459: PUSH
81460: LD_INT 5
81462: NEG
81463: PUSH
81464: EMPTY
81465: LIST
81466: LIST
81467: PUSH
81468: LD_INT 2
81470: PUSH
81471: LD_INT 3
81473: NEG
81474: PUSH
81475: EMPTY
81476: LIST
81477: LIST
81478: PUSH
81479: LD_INT 2
81481: NEG
81482: PUSH
81483: LD_INT 5
81485: NEG
81486: PUSH
81487: EMPTY
81488: LIST
81489: LIST
81490: PUSH
81491: LD_INT 3
81493: PUSH
81494: LD_INT 0
81496: PUSH
81497: EMPTY
81498: LIST
81499: LIST
81500: PUSH
81501: LD_INT 3
81503: PUSH
81504: LD_INT 1
81506: NEG
81507: PUSH
81508: EMPTY
81509: LIST
81510: LIST
81511: PUSH
81512: LD_INT 4
81514: PUSH
81515: LD_INT 0
81517: PUSH
81518: EMPTY
81519: LIST
81520: LIST
81521: PUSH
81522: LD_INT 4
81524: PUSH
81525: LD_INT 1
81527: PUSH
81528: EMPTY
81529: LIST
81530: LIST
81531: PUSH
81532: LD_INT 3
81534: PUSH
81535: LD_INT 1
81537: PUSH
81538: EMPTY
81539: LIST
81540: LIST
81541: PUSH
81542: LD_INT 2
81544: PUSH
81545: LD_INT 0
81547: PUSH
81548: EMPTY
81549: LIST
81550: LIST
81551: PUSH
81552: LD_INT 2
81554: PUSH
81555: LD_INT 1
81557: NEG
81558: PUSH
81559: EMPTY
81560: LIST
81561: LIST
81562: PUSH
81563: LD_INT 2
81565: PUSH
81566: LD_INT 2
81568: NEG
81569: PUSH
81570: EMPTY
81571: LIST
81572: LIST
81573: PUSH
81574: LD_INT 4
81576: PUSH
81577: LD_INT 2
81579: PUSH
81580: EMPTY
81581: LIST
81582: LIST
81583: PUSH
81584: LD_INT 4
81586: PUSH
81587: LD_INT 4
81589: PUSH
81590: EMPTY
81591: LIST
81592: LIST
81593: PUSH
81594: LD_INT 4
81596: PUSH
81597: LD_INT 3
81599: PUSH
81600: EMPTY
81601: LIST
81602: LIST
81603: PUSH
81604: LD_INT 5
81606: PUSH
81607: LD_INT 4
81609: PUSH
81610: EMPTY
81611: LIST
81612: LIST
81613: PUSH
81614: LD_INT 5
81616: PUSH
81617: LD_INT 5
81619: PUSH
81620: EMPTY
81621: LIST
81622: LIST
81623: PUSH
81624: LD_INT 4
81626: PUSH
81627: LD_INT 5
81629: PUSH
81630: EMPTY
81631: LIST
81632: LIST
81633: PUSH
81634: LD_INT 3
81636: PUSH
81637: LD_INT 4
81639: PUSH
81640: EMPTY
81641: LIST
81642: LIST
81643: PUSH
81644: LD_INT 3
81646: PUSH
81647: LD_INT 3
81649: PUSH
81650: EMPTY
81651: LIST
81652: LIST
81653: PUSH
81654: LD_INT 5
81656: PUSH
81657: LD_INT 3
81659: PUSH
81660: EMPTY
81661: LIST
81662: LIST
81663: PUSH
81664: LD_INT 3
81666: PUSH
81667: LD_INT 5
81669: PUSH
81670: EMPTY
81671: LIST
81672: LIST
81673: PUSH
81674: LD_INT 0
81676: PUSH
81677: LD_INT 3
81679: PUSH
81680: EMPTY
81681: LIST
81682: LIST
81683: PUSH
81684: LD_INT 0
81686: PUSH
81687: LD_INT 2
81689: PUSH
81690: EMPTY
81691: LIST
81692: LIST
81693: PUSH
81694: LD_INT 1
81696: PUSH
81697: LD_INT 3
81699: PUSH
81700: EMPTY
81701: LIST
81702: LIST
81703: PUSH
81704: LD_INT 1
81706: PUSH
81707: LD_INT 4
81709: PUSH
81710: EMPTY
81711: LIST
81712: LIST
81713: PUSH
81714: LD_INT 0
81716: PUSH
81717: LD_INT 4
81719: PUSH
81720: EMPTY
81721: LIST
81722: LIST
81723: PUSH
81724: LD_INT 1
81726: NEG
81727: PUSH
81728: LD_INT 3
81730: PUSH
81731: EMPTY
81732: LIST
81733: LIST
81734: PUSH
81735: LD_INT 1
81737: NEG
81738: PUSH
81739: LD_INT 2
81741: PUSH
81742: EMPTY
81743: LIST
81744: LIST
81745: PUSH
81746: LD_INT 2
81748: PUSH
81749: LD_INT 4
81751: PUSH
81752: EMPTY
81753: LIST
81754: LIST
81755: PUSH
81756: LD_INT 2
81758: NEG
81759: PUSH
81760: LD_INT 2
81762: PUSH
81763: EMPTY
81764: LIST
81765: LIST
81766: PUSH
81767: LD_INT 4
81769: NEG
81770: PUSH
81771: LD_INT 0
81773: PUSH
81774: EMPTY
81775: LIST
81776: LIST
81777: PUSH
81778: LD_INT 4
81780: NEG
81781: PUSH
81782: LD_INT 1
81784: NEG
81785: PUSH
81786: EMPTY
81787: LIST
81788: LIST
81789: PUSH
81790: LD_INT 3
81792: NEG
81793: PUSH
81794: LD_INT 0
81796: PUSH
81797: EMPTY
81798: LIST
81799: LIST
81800: PUSH
81801: LD_INT 3
81803: NEG
81804: PUSH
81805: LD_INT 1
81807: PUSH
81808: EMPTY
81809: LIST
81810: LIST
81811: PUSH
81812: LD_INT 4
81814: NEG
81815: PUSH
81816: LD_INT 1
81818: PUSH
81819: EMPTY
81820: LIST
81821: LIST
81822: PUSH
81823: LD_INT 5
81825: NEG
81826: PUSH
81827: LD_INT 0
81829: PUSH
81830: EMPTY
81831: LIST
81832: LIST
81833: PUSH
81834: LD_INT 5
81836: NEG
81837: PUSH
81838: LD_INT 1
81840: NEG
81841: PUSH
81842: EMPTY
81843: LIST
81844: LIST
81845: PUSH
81846: LD_INT 5
81848: NEG
81849: PUSH
81850: LD_INT 2
81852: NEG
81853: PUSH
81854: EMPTY
81855: LIST
81856: LIST
81857: PUSH
81858: LD_INT 3
81860: NEG
81861: PUSH
81862: LD_INT 2
81864: PUSH
81865: EMPTY
81866: LIST
81867: LIST
81868: PUSH
81869: EMPTY
81870: LIST
81871: LIST
81872: LIST
81873: LIST
81874: LIST
81875: LIST
81876: LIST
81877: LIST
81878: LIST
81879: LIST
81880: LIST
81881: LIST
81882: LIST
81883: LIST
81884: LIST
81885: LIST
81886: LIST
81887: LIST
81888: LIST
81889: LIST
81890: LIST
81891: LIST
81892: LIST
81893: LIST
81894: LIST
81895: LIST
81896: LIST
81897: LIST
81898: LIST
81899: LIST
81900: LIST
81901: LIST
81902: LIST
81903: LIST
81904: LIST
81905: LIST
81906: LIST
81907: LIST
81908: LIST
81909: LIST
81910: LIST
81911: LIST
81912: LIST
81913: LIST
81914: LIST
81915: ST_TO_ADDR
// end ; end ;
81916: GO 81919
81918: POP
// case btype of b_depot , b_warehouse :
81919: LD_VAR 0 1
81923: PUSH
81924: LD_INT 0
81926: DOUBLE
81927: EQUAL
81928: IFTRUE 81938
81930: LD_INT 1
81932: DOUBLE
81933: EQUAL
81934: IFTRUE 81938
81936: GO 82139
81938: POP
// case nation of nation_american :
81939: LD_VAR 0 5
81943: PUSH
81944: LD_INT 1
81946: DOUBLE
81947: EQUAL
81948: IFTRUE 81952
81950: GO 82008
81952: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
81953: LD_ADDR_VAR 0 9
81957: PUSH
81958: LD_VAR 0 11
81962: PUSH
81963: LD_VAR 0 12
81967: PUSH
81968: LD_VAR 0 13
81972: PUSH
81973: LD_VAR 0 14
81977: PUSH
81978: LD_VAR 0 15
81982: PUSH
81983: LD_VAR 0 16
81987: PUSH
81988: EMPTY
81989: LIST
81990: LIST
81991: LIST
81992: LIST
81993: LIST
81994: LIST
81995: PUSH
81996: LD_VAR 0 4
82000: PUSH
82001: LD_INT 1
82003: PLUS
82004: ARRAY
82005: ST_TO_ADDR
82006: GO 82137
82008: LD_INT 2
82010: DOUBLE
82011: EQUAL
82012: IFTRUE 82016
82014: GO 82072
82016: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
82017: LD_ADDR_VAR 0 9
82021: PUSH
82022: LD_VAR 0 17
82026: PUSH
82027: LD_VAR 0 18
82031: PUSH
82032: LD_VAR 0 19
82036: PUSH
82037: LD_VAR 0 20
82041: PUSH
82042: LD_VAR 0 21
82046: PUSH
82047: LD_VAR 0 22
82051: PUSH
82052: EMPTY
82053: LIST
82054: LIST
82055: LIST
82056: LIST
82057: LIST
82058: LIST
82059: PUSH
82060: LD_VAR 0 4
82064: PUSH
82065: LD_INT 1
82067: PLUS
82068: ARRAY
82069: ST_TO_ADDR
82070: GO 82137
82072: LD_INT 3
82074: DOUBLE
82075: EQUAL
82076: IFTRUE 82080
82078: GO 82136
82080: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
82081: LD_ADDR_VAR 0 9
82085: PUSH
82086: LD_VAR 0 23
82090: PUSH
82091: LD_VAR 0 24
82095: PUSH
82096: LD_VAR 0 25
82100: PUSH
82101: LD_VAR 0 26
82105: PUSH
82106: LD_VAR 0 27
82110: PUSH
82111: LD_VAR 0 28
82115: PUSH
82116: EMPTY
82117: LIST
82118: LIST
82119: LIST
82120: LIST
82121: LIST
82122: LIST
82123: PUSH
82124: LD_VAR 0 4
82128: PUSH
82129: LD_INT 1
82131: PLUS
82132: ARRAY
82133: ST_TO_ADDR
82134: GO 82137
82136: POP
82137: GO 82692
82139: LD_INT 2
82141: DOUBLE
82142: EQUAL
82143: IFTRUE 82153
82145: LD_INT 3
82147: DOUBLE
82148: EQUAL
82149: IFTRUE 82153
82151: GO 82209
82153: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
82154: LD_ADDR_VAR 0 9
82158: PUSH
82159: LD_VAR 0 29
82163: PUSH
82164: LD_VAR 0 30
82168: PUSH
82169: LD_VAR 0 31
82173: PUSH
82174: LD_VAR 0 32
82178: PUSH
82179: LD_VAR 0 33
82183: PUSH
82184: LD_VAR 0 34
82188: PUSH
82189: EMPTY
82190: LIST
82191: LIST
82192: LIST
82193: LIST
82194: LIST
82195: LIST
82196: PUSH
82197: LD_VAR 0 4
82201: PUSH
82202: LD_INT 1
82204: PLUS
82205: ARRAY
82206: ST_TO_ADDR
82207: GO 82692
82209: LD_INT 16
82211: DOUBLE
82212: EQUAL
82213: IFTRUE 82271
82215: LD_INT 17
82217: DOUBLE
82218: EQUAL
82219: IFTRUE 82271
82221: LD_INT 18
82223: DOUBLE
82224: EQUAL
82225: IFTRUE 82271
82227: LD_INT 19
82229: DOUBLE
82230: EQUAL
82231: IFTRUE 82271
82233: LD_INT 22
82235: DOUBLE
82236: EQUAL
82237: IFTRUE 82271
82239: LD_INT 20
82241: DOUBLE
82242: EQUAL
82243: IFTRUE 82271
82245: LD_INT 21
82247: DOUBLE
82248: EQUAL
82249: IFTRUE 82271
82251: LD_INT 23
82253: DOUBLE
82254: EQUAL
82255: IFTRUE 82271
82257: LD_INT 24
82259: DOUBLE
82260: EQUAL
82261: IFTRUE 82271
82263: LD_INT 25
82265: DOUBLE
82266: EQUAL
82267: IFTRUE 82271
82269: GO 82327
82271: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
82272: LD_ADDR_VAR 0 9
82276: PUSH
82277: LD_VAR 0 35
82281: PUSH
82282: LD_VAR 0 36
82286: PUSH
82287: LD_VAR 0 37
82291: PUSH
82292: LD_VAR 0 38
82296: PUSH
82297: LD_VAR 0 39
82301: PUSH
82302: LD_VAR 0 40
82306: PUSH
82307: EMPTY
82308: LIST
82309: LIST
82310: LIST
82311: LIST
82312: LIST
82313: LIST
82314: PUSH
82315: LD_VAR 0 4
82319: PUSH
82320: LD_INT 1
82322: PLUS
82323: ARRAY
82324: ST_TO_ADDR
82325: GO 82692
82327: LD_INT 6
82329: DOUBLE
82330: EQUAL
82331: IFTRUE 82383
82333: LD_INT 7
82335: DOUBLE
82336: EQUAL
82337: IFTRUE 82383
82339: LD_INT 8
82341: DOUBLE
82342: EQUAL
82343: IFTRUE 82383
82345: LD_INT 13
82347: DOUBLE
82348: EQUAL
82349: IFTRUE 82383
82351: LD_INT 12
82353: DOUBLE
82354: EQUAL
82355: IFTRUE 82383
82357: LD_INT 15
82359: DOUBLE
82360: EQUAL
82361: IFTRUE 82383
82363: LD_INT 11
82365: DOUBLE
82366: EQUAL
82367: IFTRUE 82383
82369: LD_INT 14
82371: DOUBLE
82372: EQUAL
82373: IFTRUE 82383
82375: LD_INT 10
82377: DOUBLE
82378: EQUAL
82379: IFTRUE 82383
82381: GO 82439
82383: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
82384: LD_ADDR_VAR 0 9
82388: PUSH
82389: LD_VAR 0 41
82393: PUSH
82394: LD_VAR 0 42
82398: PUSH
82399: LD_VAR 0 43
82403: PUSH
82404: LD_VAR 0 44
82408: PUSH
82409: LD_VAR 0 45
82413: PUSH
82414: LD_VAR 0 46
82418: PUSH
82419: EMPTY
82420: LIST
82421: LIST
82422: LIST
82423: LIST
82424: LIST
82425: LIST
82426: PUSH
82427: LD_VAR 0 4
82431: PUSH
82432: LD_INT 1
82434: PLUS
82435: ARRAY
82436: ST_TO_ADDR
82437: GO 82692
82439: LD_INT 36
82441: DOUBLE
82442: EQUAL
82443: IFTRUE 82447
82445: GO 82503
82447: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
82448: LD_ADDR_VAR 0 9
82452: PUSH
82453: LD_VAR 0 47
82457: PUSH
82458: LD_VAR 0 48
82462: PUSH
82463: LD_VAR 0 49
82467: PUSH
82468: LD_VAR 0 50
82472: PUSH
82473: LD_VAR 0 51
82477: PUSH
82478: LD_VAR 0 52
82482: PUSH
82483: EMPTY
82484: LIST
82485: LIST
82486: LIST
82487: LIST
82488: LIST
82489: LIST
82490: PUSH
82491: LD_VAR 0 4
82495: PUSH
82496: LD_INT 1
82498: PLUS
82499: ARRAY
82500: ST_TO_ADDR
82501: GO 82692
82503: LD_INT 4
82505: DOUBLE
82506: EQUAL
82507: IFTRUE 82529
82509: LD_INT 5
82511: DOUBLE
82512: EQUAL
82513: IFTRUE 82529
82515: LD_INT 34
82517: DOUBLE
82518: EQUAL
82519: IFTRUE 82529
82521: LD_INT 37
82523: DOUBLE
82524: EQUAL
82525: IFTRUE 82529
82527: GO 82585
82529: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
82530: LD_ADDR_VAR 0 9
82534: PUSH
82535: LD_VAR 0 53
82539: PUSH
82540: LD_VAR 0 54
82544: PUSH
82545: LD_VAR 0 55
82549: PUSH
82550: LD_VAR 0 56
82554: PUSH
82555: LD_VAR 0 57
82559: PUSH
82560: LD_VAR 0 58
82564: PUSH
82565: EMPTY
82566: LIST
82567: LIST
82568: LIST
82569: LIST
82570: LIST
82571: LIST
82572: PUSH
82573: LD_VAR 0 4
82577: PUSH
82578: LD_INT 1
82580: PLUS
82581: ARRAY
82582: ST_TO_ADDR
82583: GO 82692
82585: LD_INT 31
82587: DOUBLE
82588: EQUAL
82589: IFTRUE 82635
82591: LD_INT 32
82593: DOUBLE
82594: EQUAL
82595: IFTRUE 82635
82597: LD_INT 33
82599: DOUBLE
82600: EQUAL
82601: IFTRUE 82635
82603: LD_INT 27
82605: DOUBLE
82606: EQUAL
82607: IFTRUE 82635
82609: LD_INT 26
82611: DOUBLE
82612: EQUAL
82613: IFTRUE 82635
82615: LD_INT 28
82617: DOUBLE
82618: EQUAL
82619: IFTRUE 82635
82621: LD_INT 29
82623: DOUBLE
82624: EQUAL
82625: IFTRUE 82635
82627: LD_INT 30
82629: DOUBLE
82630: EQUAL
82631: IFTRUE 82635
82633: GO 82691
82635: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
82636: LD_ADDR_VAR 0 9
82640: PUSH
82641: LD_VAR 0 59
82645: PUSH
82646: LD_VAR 0 60
82650: PUSH
82651: LD_VAR 0 61
82655: PUSH
82656: LD_VAR 0 62
82660: PUSH
82661: LD_VAR 0 63
82665: PUSH
82666: LD_VAR 0 64
82670: PUSH
82671: EMPTY
82672: LIST
82673: LIST
82674: LIST
82675: LIST
82676: LIST
82677: LIST
82678: PUSH
82679: LD_VAR 0 4
82683: PUSH
82684: LD_INT 1
82686: PLUS
82687: ARRAY
82688: ST_TO_ADDR
82689: GO 82692
82691: POP
// temp_list2 = [ ] ;
82692: LD_ADDR_VAR 0 10
82696: PUSH
82697: EMPTY
82698: ST_TO_ADDR
// for i in temp_list do
82699: LD_ADDR_VAR 0 8
82703: PUSH
82704: LD_VAR 0 9
82708: PUSH
82709: FOR_IN
82710: IFFALSE 82762
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
82712: LD_ADDR_VAR 0 10
82716: PUSH
82717: LD_VAR 0 10
82721: PUSH
82722: LD_VAR 0 8
82726: PUSH
82727: LD_INT 1
82729: ARRAY
82730: PUSH
82731: LD_VAR 0 2
82735: PLUS
82736: PUSH
82737: LD_VAR 0 8
82741: PUSH
82742: LD_INT 2
82744: ARRAY
82745: PUSH
82746: LD_VAR 0 3
82750: PLUS
82751: PUSH
82752: EMPTY
82753: LIST
82754: LIST
82755: PUSH
82756: EMPTY
82757: LIST
82758: ADD
82759: ST_TO_ADDR
82760: GO 82709
82762: POP
82763: POP
// result = temp_list2 ;
82764: LD_ADDR_VAR 0 7
82768: PUSH
82769: LD_VAR 0 10
82773: ST_TO_ADDR
// end ;
82774: LD_VAR 0 7
82778: RET
// export function EnemyInRange ( unit , dist ) ; begin
82779: LD_INT 0
82781: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
82782: LD_ADDR_VAR 0 3
82786: PUSH
82787: LD_VAR 0 1
82791: PPUSH
82792: CALL_OW 255
82796: PPUSH
82797: LD_VAR 0 1
82801: PPUSH
82802: CALL_OW 250
82806: PPUSH
82807: LD_VAR 0 1
82811: PPUSH
82812: CALL_OW 251
82816: PPUSH
82817: LD_VAR 0 2
82821: PPUSH
82822: CALL 56181 0 4
82826: PUSH
82827: LD_INT 4
82829: ARRAY
82830: ST_TO_ADDR
// end ;
82831: LD_VAR 0 3
82835: RET
// export function PlayerSeeMe ( unit ) ; begin
82836: LD_INT 0
82838: PPUSH
// result := See ( your_side , unit ) ;
82839: LD_ADDR_VAR 0 2
82843: PUSH
82844: LD_OWVAR 2
82848: PPUSH
82849: LD_VAR 0 1
82853: PPUSH
82854: CALL_OW 292
82858: ST_TO_ADDR
// end ;
82859: LD_VAR 0 2
82863: RET
// export function ReverseDir ( unit ) ; begin
82864: LD_INT 0
82866: PPUSH
// if not unit then
82867: LD_VAR 0 1
82871: NOT
82872: IFFALSE 82876
// exit ;
82874: GO 82899
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
82876: LD_ADDR_VAR 0 2
82880: PUSH
82881: LD_VAR 0 1
82885: PPUSH
82886: CALL_OW 254
82890: PUSH
82891: LD_INT 3
82893: PLUS
82894: PUSH
82895: LD_INT 6
82897: MOD
82898: ST_TO_ADDR
// end ;
82899: LD_VAR 0 2
82903: RET
// export function ReverseArray ( array ) ; var i ; begin
82904: LD_INT 0
82906: PPUSH
82907: PPUSH
// if not array then
82908: LD_VAR 0 1
82912: NOT
82913: IFFALSE 82917
// exit ;
82915: GO 82972
// result := [ ] ;
82917: LD_ADDR_VAR 0 2
82921: PUSH
82922: EMPTY
82923: ST_TO_ADDR
// for i := array downto 1 do
82924: LD_ADDR_VAR 0 3
82928: PUSH
82929: DOUBLE
82930: LD_VAR 0 1
82934: INC
82935: ST_TO_ADDR
82936: LD_INT 1
82938: PUSH
82939: FOR_DOWNTO
82940: IFFALSE 82970
// result := Join ( result , array [ i ] ) ;
82942: LD_ADDR_VAR 0 2
82946: PUSH
82947: LD_VAR 0 2
82951: PPUSH
82952: LD_VAR 0 1
82956: PUSH
82957: LD_VAR 0 3
82961: ARRAY
82962: PPUSH
82963: CALL 87597 0 2
82967: ST_TO_ADDR
82968: GO 82939
82970: POP
82971: POP
// end ;
82972: LD_VAR 0 2
82976: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
82977: LD_INT 0
82979: PPUSH
82980: PPUSH
82981: PPUSH
82982: PPUSH
82983: PPUSH
82984: PPUSH
// if not unit or not hexes then
82985: LD_VAR 0 1
82989: NOT
82990: PUSH
82991: LD_VAR 0 2
82995: NOT
82996: OR
82997: IFFALSE 83001
// exit ;
82999: GO 83124
// dist := 9999 ;
83001: LD_ADDR_VAR 0 5
83005: PUSH
83006: LD_INT 9999
83008: ST_TO_ADDR
// for i = 1 to hexes do
83009: LD_ADDR_VAR 0 4
83013: PUSH
83014: DOUBLE
83015: LD_INT 1
83017: DEC
83018: ST_TO_ADDR
83019: LD_VAR 0 2
83023: PUSH
83024: FOR_TO
83025: IFFALSE 83112
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
83027: LD_ADDR_VAR 0 6
83031: PUSH
83032: LD_VAR 0 1
83036: PPUSH
83037: LD_VAR 0 2
83041: PUSH
83042: LD_VAR 0 4
83046: ARRAY
83047: PUSH
83048: LD_INT 1
83050: ARRAY
83051: PPUSH
83052: LD_VAR 0 2
83056: PUSH
83057: LD_VAR 0 4
83061: ARRAY
83062: PUSH
83063: LD_INT 2
83065: ARRAY
83066: PPUSH
83067: CALL_OW 297
83071: ST_TO_ADDR
// if tdist < dist then
83072: LD_VAR 0 6
83076: PUSH
83077: LD_VAR 0 5
83081: LESS
83082: IFFALSE 83110
// begin hex := hexes [ i ] ;
83084: LD_ADDR_VAR 0 8
83088: PUSH
83089: LD_VAR 0 2
83093: PUSH
83094: LD_VAR 0 4
83098: ARRAY
83099: ST_TO_ADDR
// dist := tdist ;
83100: LD_ADDR_VAR 0 5
83104: PUSH
83105: LD_VAR 0 6
83109: ST_TO_ADDR
// end ; end ;
83110: GO 83024
83112: POP
83113: POP
// result := hex ;
83114: LD_ADDR_VAR 0 3
83118: PUSH
83119: LD_VAR 0 8
83123: ST_TO_ADDR
// end ;
83124: LD_VAR 0 3
83128: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
83129: LD_INT 0
83131: PPUSH
83132: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
83133: LD_VAR 0 1
83137: NOT
83138: PUSH
83139: LD_VAR 0 1
83143: PUSH
83144: LD_INT 21
83146: PUSH
83147: LD_INT 2
83149: PUSH
83150: EMPTY
83151: LIST
83152: LIST
83153: PUSH
83154: LD_INT 23
83156: PUSH
83157: LD_INT 2
83159: PUSH
83160: EMPTY
83161: LIST
83162: LIST
83163: PUSH
83164: EMPTY
83165: LIST
83166: LIST
83167: PPUSH
83168: CALL_OW 69
83172: IN
83173: NOT
83174: OR
83175: IFFALSE 83179
// exit ;
83177: GO 83226
// for i = 1 to 3 do
83179: LD_ADDR_VAR 0 3
83183: PUSH
83184: DOUBLE
83185: LD_INT 1
83187: DEC
83188: ST_TO_ADDR
83189: LD_INT 3
83191: PUSH
83192: FOR_TO
83193: IFFALSE 83224
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
83195: LD_VAR 0 1
83199: PPUSH
83200: CALL_OW 250
83204: PPUSH
83205: LD_VAR 0 1
83209: PPUSH
83210: CALL_OW 251
83214: PPUSH
83215: LD_INT 1
83217: PPUSH
83218: CALL_OW 453
83222: GO 83192
83224: POP
83225: POP
// end ;
83226: LD_VAR 0 2
83230: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
83231: LD_INT 0
83233: PPUSH
83234: PPUSH
83235: PPUSH
83236: PPUSH
83237: PPUSH
83238: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
83239: LD_VAR 0 1
83243: NOT
83244: PUSH
83245: LD_VAR 0 2
83249: NOT
83250: OR
83251: PUSH
83252: LD_VAR 0 1
83256: PPUSH
83257: CALL_OW 314
83261: OR
83262: IFFALSE 83266
// exit ;
83264: GO 83707
// x := GetX ( enemy_unit ) ;
83266: LD_ADDR_VAR 0 7
83270: PUSH
83271: LD_VAR 0 2
83275: PPUSH
83276: CALL_OW 250
83280: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
83281: LD_ADDR_VAR 0 8
83285: PUSH
83286: LD_VAR 0 2
83290: PPUSH
83291: CALL_OW 251
83295: ST_TO_ADDR
// if not x or not y then
83296: LD_VAR 0 7
83300: NOT
83301: PUSH
83302: LD_VAR 0 8
83306: NOT
83307: OR
83308: IFFALSE 83312
// exit ;
83310: GO 83707
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
83312: LD_ADDR_VAR 0 6
83316: PUSH
83317: LD_VAR 0 7
83321: PPUSH
83322: LD_INT 0
83324: PPUSH
83325: LD_INT 4
83327: PPUSH
83328: CALL_OW 272
83332: PUSH
83333: LD_VAR 0 8
83337: PPUSH
83338: LD_INT 0
83340: PPUSH
83341: LD_INT 4
83343: PPUSH
83344: CALL_OW 273
83348: PUSH
83349: EMPTY
83350: LIST
83351: LIST
83352: PUSH
83353: LD_VAR 0 7
83357: PPUSH
83358: LD_INT 1
83360: PPUSH
83361: LD_INT 4
83363: PPUSH
83364: CALL_OW 272
83368: PUSH
83369: LD_VAR 0 8
83373: PPUSH
83374: LD_INT 1
83376: PPUSH
83377: LD_INT 4
83379: PPUSH
83380: CALL_OW 273
83384: PUSH
83385: EMPTY
83386: LIST
83387: LIST
83388: PUSH
83389: LD_VAR 0 7
83393: PPUSH
83394: LD_INT 2
83396: PPUSH
83397: LD_INT 4
83399: PPUSH
83400: CALL_OW 272
83404: PUSH
83405: LD_VAR 0 8
83409: PPUSH
83410: LD_INT 2
83412: PPUSH
83413: LD_INT 4
83415: PPUSH
83416: CALL_OW 273
83420: PUSH
83421: EMPTY
83422: LIST
83423: LIST
83424: PUSH
83425: LD_VAR 0 7
83429: PPUSH
83430: LD_INT 3
83432: PPUSH
83433: LD_INT 4
83435: PPUSH
83436: CALL_OW 272
83440: PUSH
83441: LD_VAR 0 8
83445: PPUSH
83446: LD_INT 3
83448: PPUSH
83449: LD_INT 4
83451: PPUSH
83452: CALL_OW 273
83456: PUSH
83457: EMPTY
83458: LIST
83459: LIST
83460: PUSH
83461: LD_VAR 0 7
83465: PPUSH
83466: LD_INT 4
83468: PPUSH
83469: LD_INT 4
83471: PPUSH
83472: CALL_OW 272
83476: PUSH
83477: LD_VAR 0 8
83481: PPUSH
83482: LD_INT 4
83484: PPUSH
83485: LD_INT 4
83487: PPUSH
83488: CALL_OW 273
83492: PUSH
83493: EMPTY
83494: LIST
83495: LIST
83496: PUSH
83497: LD_VAR 0 7
83501: PPUSH
83502: LD_INT 5
83504: PPUSH
83505: LD_INT 4
83507: PPUSH
83508: CALL_OW 272
83512: PUSH
83513: LD_VAR 0 8
83517: PPUSH
83518: LD_INT 5
83520: PPUSH
83521: LD_INT 4
83523: PPUSH
83524: CALL_OW 273
83528: PUSH
83529: EMPTY
83530: LIST
83531: LIST
83532: PUSH
83533: EMPTY
83534: LIST
83535: LIST
83536: LIST
83537: LIST
83538: LIST
83539: LIST
83540: ST_TO_ADDR
// for i = tmp downto 1 do
83541: LD_ADDR_VAR 0 4
83545: PUSH
83546: DOUBLE
83547: LD_VAR 0 6
83551: INC
83552: ST_TO_ADDR
83553: LD_INT 1
83555: PUSH
83556: FOR_DOWNTO
83557: IFFALSE 83658
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
83559: LD_VAR 0 6
83563: PUSH
83564: LD_VAR 0 4
83568: ARRAY
83569: PUSH
83570: LD_INT 1
83572: ARRAY
83573: PPUSH
83574: LD_VAR 0 6
83578: PUSH
83579: LD_VAR 0 4
83583: ARRAY
83584: PUSH
83585: LD_INT 2
83587: ARRAY
83588: PPUSH
83589: CALL_OW 488
83593: NOT
83594: PUSH
83595: LD_VAR 0 6
83599: PUSH
83600: LD_VAR 0 4
83604: ARRAY
83605: PUSH
83606: LD_INT 1
83608: ARRAY
83609: PPUSH
83610: LD_VAR 0 6
83614: PUSH
83615: LD_VAR 0 4
83619: ARRAY
83620: PUSH
83621: LD_INT 2
83623: ARRAY
83624: PPUSH
83625: CALL_OW 428
83629: PUSH
83630: LD_INT 0
83632: NONEQUAL
83633: OR
83634: IFFALSE 83656
// tmp := Delete ( tmp , i ) ;
83636: LD_ADDR_VAR 0 6
83640: PUSH
83641: LD_VAR 0 6
83645: PPUSH
83646: LD_VAR 0 4
83650: PPUSH
83651: CALL_OW 3
83655: ST_TO_ADDR
83656: GO 83556
83658: POP
83659: POP
// j := GetClosestHex ( unit , tmp ) ;
83660: LD_ADDR_VAR 0 5
83664: PUSH
83665: LD_VAR 0 1
83669: PPUSH
83670: LD_VAR 0 6
83674: PPUSH
83675: CALL 82977 0 2
83679: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
83680: LD_VAR 0 1
83684: PPUSH
83685: LD_VAR 0 5
83689: PUSH
83690: LD_INT 1
83692: ARRAY
83693: PPUSH
83694: LD_VAR 0 5
83698: PUSH
83699: LD_INT 2
83701: ARRAY
83702: PPUSH
83703: CALL_OW 111
// end ;
83707: LD_VAR 0 3
83711: RET
// export function PrepareApemanSoldier ( ) ; begin
83712: LD_INT 0
83714: PPUSH
// uc_nation := 0 ;
83715: LD_ADDR_OWVAR 21
83719: PUSH
83720: LD_INT 0
83722: ST_TO_ADDR
// hc_sex := sex_male ;
83723: LD_ADDR_OWVAR 27
83727: PUSH
83728: LD_INT 1
83730: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
83731: LD_ADDR_OWVAR 28
83735: PUSH
83736: LD_INT 15
83738: ST_TO_ADDR
// hc_gallery :=  ;
83739: LD_ADDR_OWVAR 33
83743: PUSH
83744: LD_STRING 
83746: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
83747: LD_ADDR_OWVAR 31
83751: PUSH
83752: LD_INT 0
83754: PPUSH
83755: LD_INT 3
83757: PPUSH
83758: CALL_OW 12
83762: PUSH
83763: LD_INT 0
83765: PPUSH
83766: LD_INT 3
83768: PPUSH
83769: CALL_OW 12
83773: PUSH
83774: LD_INT 0
83776: PUSH
83777: LD_INT 0
83779: PUSH
83780: EMPTY
83781: LIST
83782: LIST
83783: LIST
83784: LIST
83785: ST_TO_ADDR
// end ;
83786: LD_VAR 0 1
83790: RET
// export function PrepareApemanEngineer ( ) ; begin
83791: LD_INT 0
83793: PPUSH
// uc_nation := 0 ;
83794: LD_ADDR_OWVAR 21
83798: PUSH
83799: LD_INT 0
83801: ST_TO_ADDR
// hc_sex := sex_male ;
83802: LD_ADDR_OWVAR 27
83806: PUSH
83807: LD_INT 1
83809: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
83810: LD_ADDR_OWVAR 28
83814: PUSH
83815: LD_INT 16
83817: ST_TO_ADDR
// hc_gallery :=  ;
83818: LD_ADDR_OWVAR 33
83822: PUSH
83823: LD_STRING 
83825: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
83826: LD_ADDR_OWVAR 31
83830: PUSH
83831: LD_INT 0
83833: PPUSH
83834: LD_INT 3
83836: PPUSH
83837: CALL_OW 12
83841: PUSH
83842: LD_INT 0
83844: PPUSH
83845: LD_INT 3
83847: PPUSH
83848: CALL_OW 12
83852: PUSH
83853: LD_INT 0
83855: PUSH
83856: LD_INT 0
83858: PUSH
83859: EMPTY
83860: LIST
83861: LIST
83862: LIST
83863: LIST
83864: ST_TO_ADDR
// end ;
83865: LD_VAR 0 1
83869: RET
// export function PrepareApeman ( agressivity ) ; begin
83870: LD_INT 0
83872: PPUSH
// uc_side := 0 ;
83873: LD_ADDR_OWVAR 20
83877: PUSH
83878: LD_INT 0
83880: ST_TO_ADDR
// uc_nation := 0 ;
83881: LD_ADDR_OWVAR 21
83885: PUSH
83886: LD_INT 0
83888: ST_TO_ADDR
// hc_sex := sex_male ;
83889: LD_ADDR_OWVAR 27
83893: PUSH
83894: LD_INT 1
83896: ST_TO_ADDR
// hc_class := class_apeman ;
83897: LD_ADDR_OWVAR 28
83901: PUSH
83902: LD_INT 12
83904: ST_TO_ADDR
// hc_gallery :=  ;
83905: LD_ADDR_OWVAR 33
83909: PUSH
83910: LD_STRING 
83912: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
83913: LD_ADDR_OWVAR 35
83917: PUSH
83918: LD_VAR 0 1
83922: NEG
83923: PPUSH
83924: LD_VAR 0 1
83928: PPUSH
83929: CALL_OW 12
83933: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
83934: LD_ADDR_OWVAR 31
83938: PUSH
83939: LD_INT 0
83941: PPUSH
83942: LD_INT 3
83944: PPUSH
83945: CALL_OW 12
83949: PUSH
83950: LD_INT 0
83952: PPUSH
83953: LD_INT 3
83955: PPUSH
83956: CALL_OW 12
83960: PUSH
83961: LD_INT 0
83963: PUSH
83964: LD_INT 0
83966: PUSH
83967: EMPTY
83968: LIST
83969: LIST
83970: LIST
83971: LIST
83972: ST_TO_ADDR
// end ;
83973: LD_VAR 0 2
83977: RET
// export function PrepareTiger ( agressivity ) ; begin
83978: LD_INT 0
83980: PPUSH
// uc_side := 0 ;
83981: LD_ADDR_OWVAR 20
83985: PUSH
83986: LD_INT 0
83988: ST_TO_ADDR
// uc_nation := 0 ;
83989: LD_ADDR_OWVAR 21
83993: PUSH
83994: LD_INT 0
83996: ST_TO_ADDR
// hc_class := class_tiger ;
83997: LD_ADDR_OWVAR 28
84001: PUSH
84002: LD_INT 14
84004: ST_TO_ADDR
// hc_gallery :=  ;
84005: LD_ADDR_OWVAR 33
84009: PUSH
84010: LD_STRING 
84012: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
84013: LD_ADDR_OWVAR 35
84017: PUSH
84018: LD_VAR 0 1
84022: NEG
84023: PPUSH
84024: LD_VAR 0 1
84028: PPUSH
84029: CALL_OW 12
84033: ST_TO_ADDR
// end ;
84034: LD_VAR 0 2
84038: RET
// export function PrepareEnchidna ( ) ; begin
84039: LD_INT 0
84041: PPUSH
// uc_side := 0 ;
84042: LD_ADDR_OWVAR 20
84046: PUSH
84047: LD_INT 0
84049: ST_TO_ADDR
// uc_nation := 0 ;
84050: LD_ADDR_OWVAR 21
84054: PUSH
84055: LD_INT 0
84057: ST_TO_ADDR
// hc_class := class_baggie ;
84058: LD_ADDR_OWVAR 28
84062: PUSH
84063: LD_INT 13
84065: ST_TO_ADDR
// hc_gallery :=  ;
84066: LD_ADDR_OWVAR 33
84070: PUSH
84071: LD_STRING 
84073: ST_TO_ADDR
// end ;
84074: LD_VAR 0 1
84078: RET
// export function PrepareFrog ( ) ; begin
84079: LD_INT 0
84081: PPUSH
// uc_side := 0 ;
84082: LD_ADDR_OWVAR 20
84086: PUSH
84087: LD_INT 0
84089: ST_TO_ADDR
// uc_nation := 0 ;
84090: LD_ADDR_OWVAR 21
84094: PUSH
84095: LD_INT 0
84097: ST_TO_ADDR
// hc_class := class_frog ;
84098: LD_ADDR_OWVAR 28
84102: PUSH
84103: LD_INT 19
84105: ST_TO_ADDR
// hc_gallery :=  ;
84106: LD_ADDR_OWVAR 33
84110: PUSH
84111: LD_STRING 
84113: ST_TO_ADDR
// end ;
84114: LD_VAR 0 1
84118: RET
// export function PrepareFish ( ) ; begin
84119: LD_INT 0
84121: PPUSH
// uc_side := 0 ;
84122: LD_ADDR_OWVAR 20
84126: PUSH
84127: LD_INT 0
84129: ST_TO_ADDR
// uc_nation := 0 ;
84130: LD_ADDR_OWVAR 21
84134: PUSH
84135: LD_INT 0
84137: ST_TO_ADDR
// hc_class := class_fish ;
84138: LD_ADDR_OWVAR 28
84142: PUSH
84143: LD_INT 20
84145: ST_TO_ADDR
// hc_gallery :=  ;
84146: LD_ADDR_OWVAR 33
84150: PUSH
84151: LD_STRING 
84153: ST_TO_ADDR
// end ;
84154: LD_VAR 0 1
84158: RET
// export function PrepareBird ( ) ; begin
84159: LD_INT 0
84161: PPUSH
// uc_side := 0 ;
84162: LD_ADDR_OWVAR 20
84166: PUSH
84167: LD_INT 0
84169: ST_TO_ADDR
// uc_nation := 0 ;
84170: LD_ADDR_OWVAR 21
84174: PUSH
84175: LD_INT 0
84177: ST_TO_ADDR
// hc_class := class_phororhacos ;
84178: LD_ADDR_OWVAR 28
84182: PUSH
84183: LD_INT 18
84185: ST_TO_ADDR
// hc_gallery :=  ;
84186: LD_ADDR_OWVAR 33
84190: PUSH
84191: LD_STRING 
84193: ST_TO_ADDR
// end ;
84194: LD_VAR 0 1
84198: RET
// export function PrepareHorse ( ) ; begin
84199: LD_INT 0
84201: PPUSH
// uc_side := 0 ;
84202: LD_ADDR_OWVAR 20
84206: PUSH
84207: LD_INT 0
84209: ST_TO_ADDR
// uc_nation := 0 ;
84210: LD_ADDR_OWVAR 21
84214: PUSH
84215: LD_INT 0
84217: ST_TO_ADDR
// hc_class := class_horse ;
84218: LD_ADDR_OWVAR 28
84222: PUSH
84223: LD_INT 21
84225: ST_TO_ADDR
// hc_gallery :=  ;
84226: LD_ADDR_OWVAR 33
84230: PUSH
84231: LD_STRING 
84233: ST_TO_ADDR
// end ;
84234: LD_VAR 0 1
84238: RET
// export function PrepareMastodont ( ) ; begin
84239: LD_INT 0
84241: PPUSH
// uc_side := 0 ;
84242: LD_ADDR_OWVAR 20
84246: PUSH
84247: LD_INT 0
84249: ST_TO_ADDR
// uc_nation := 0 ;
84250: LD_ADDR_OWVAR 21
84254: PUSH
84255: LD_INT 0
84257: ST_TO_ADDR
// vc_chassis := class_mastodont ;
84258: LD_ADDR_OWVAR 37
84262: PUSH
84263: LD_INT 31
84265: ST_TO_ADDR
// vc_control := control_rider ;
84266: LD_ADDR_OWVAR 38
84270: PUSH
84271: LD_INT 4
84273: ST_TO_ADDR
// end ;
84274: LD_VAR 0 1
84278: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
84279: LD_INT 0
84281: PPUSH
84282: PPUSH
84283: PPUSH
// uc_side = 0 ;
84284: LD_ADDR_OWVAR 20
84288: PUSH
84289: LD_INT 0
84291: ST_TO_ADDR
// uc_nation = 0 ;
84292: LD_ADDR_OWVAR 21
84296: PUSH
84297: LD_INT 0
84299: ST_TO_ADDR
// InitHc_All ( ) ;
84300: CALL_OW 584
// InitVc ;
84304: CALL_OW 20
// if mastodonts then
84308: LD_VAR 0 6
84312: IFFALSE 84379
// for i = 1 to mastodonts do
84314: LD_ADDR_VAR 0 11
84318: PUSH
84319: DOUBLE
84320: LD_INT 1
84322: DEC
84323: ST_TO_ADDR
84324: LD_VAR 0 6
84328: PUSH
84329: FOR_TO
84330: IFFALSE 84377
// begin vc_chassis := 31 ;
84332: LD_ADDR_OWVAR 37
84336: PUSH
84337: LD_INT 31
84339: ST_TO_ADDR
// vc_control := control_rider ;
84340: LD_ADDR_OWVAR 38
84344: PUSH
84345: LD_INT 4
84347: ST_TO_ADDR
// animal := CreateVehicle ;
84348: LD_ADDR_VAR 0 12
84352: PUSH
84353: CALL_OW 45
84357: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84358: LD_VAR 0 12
84362: PPUSH
84363: LD_VAR 0 8
84367: PPUSH
84368: LD_INT 0
84370: PPUSH
84371: CALL 86514 0 3
// end ;
84375: GO 84329
84377: POP
84378: POP
// if horses then
84379: LD_VAR 0 5
84383: IFFALSE 84450
// for i = 1 to horses do
84385: LD_ADDR_VAR 0 11
84389: PUSH
84390: DOUBLE
84391: LD_INT 1
84393: DEC
84394: ST_TO_ADDR
84395: LD_VAR 0 5
84399: PUSH
84400: FOR_TO
84401: IFFALSE 84448
// begin hc_class := 21 ;
84403: LD_ADDR_OWVAR 28
84407: PUSH
84408: LD_INT 21
84410: ST_TO_ADDR
// hc_gallery :=  ;
84411: LD_ADDR_OWVAR 33
84415: PUSH
84416: LD_STRING 
84418: ST_TO_ADDR
// animal := CreateHuman ;
84419: LD_ADDR_VAR 0 12
84423: PUSH
84424: CALL_OW 44
84428: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84429: LD_VAR 0 12
84433: PPUSH
84434: LD_VAR 0 8
84438: PPUSH
84439: LD_INT 0
84441: PPUSH
84442: CALL 86514 0 3
// end ;
84446: GO 84400
84448: POP
84449: POP
// if birds then
84450: LD_VAR 0 1
84454: IFFALSE 84521
// for i = 1 to birds do
84456: LD_ADDR_VAR 0 11
84460: PUSH
84461: DOUBLE
84462: LD_INT 1
84464: DEC
84465: ST_TO_ADDR
84466: LD_VAR 0 1
84470: PUSH
84471: FOR_TO
84472: IFFALSE 84519
// begin hc_class = 18 ;
84474: LD_ADDR_OWVAR 28
84478: PUSH
84479: LD_INT 18
84481: ST_TO_ADDR
// hc_gallery =  ;
84482: LD_ADDR_OWVAR 33
84486: PUSH
84487: LD_STRING 
84489: ST_TO_ADDR
// animal := CreateHuman ;
84490: LD_ADDR_VAR 0 12
84494: PUSH
84495: CALL_OW 44
84499: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84500: LD_VAR 0 12
84504: PPUSH
84505: LD_VAR 0 8
84509: PPUSH
84510: LD_INT 0
84512: PPUSH
84513: CALL 86514 0 3
// end ;
84517: GO 84471
84519: POP
84520: POP
// if tigers then
84521: LD_VAR 0 2
84525: IFFALSE 84609
// for i = 1 to tigers do
84527: LD_ADDR_VAR 0 11
84531: PUSH
84532: DOUBLE
84533: LD_INT 1
84535: DEC
84536: ST_TO_ADDR
84537: LD_VAR 0 2
84541: PUSH
84542: FOR_TO
84543: IFFALSE 84607
// begin hc_class = class_tiger ;
84545: LD_ADDR_OWVAR 28
84549: PUSH
84550: LD_INT 14
84552: ST_TO_ADDR
// hc_gallery =  ;
84553: LD_ADDR_OWVAR 33
84557: PUSH
84558: LD_STRING 
84560: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
84561: LD_ADDR_OWVAR 35
84565: PUSH
84566: LD_INT 7
84568: NEG
84569: PPUSH
84570: LD_INT 7
84572: PPUSH
84573: CALL_OW 12
84577: ST_TO_ADDR
// animal := CreateHuman ;
84578: LD_ADDR_VAR 0 12
84582: PUSH
84583: CALL_OW 44
84587: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84588: LD_VAR 0 12
84592: PPUSH
84593: LD_VAR 0 8
84597: PPUSH
84598: LD_INT 0
84600: PPUSH
84601: CALL 86514 0 3
// end ;
84605: GO 84542
84607: POP
84608: POP
// if apemans then
84609: LD_VAR 0 3
84613: IFFALSE 84736
// for i = 1 to apemans do
84615: LD_ADDR_VAR 0 11
84619: PUSH
84620: DOUBLE
84621: LD_INT 1
84623: DEC
84624: ST_TO_ADDR
84625: LD_VAR 0 3
84629: PUSH
84630: FOR_TO
84631: IFFALSE 84734
// begin hc_class = class_apeman ;
84633: LD_ADDR_OWVAR 28
84637: PUSH
84638: LD_INT 12
84640: ST_TO_ADDR
// hc_gallery =  ;
84641: LD_ADDR_OWVAR 33
84645: PUSH
84646: LD_STRING 
84648: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
84649: LD_ADDR_OWVAR 35
84653: PUSH
84654: LD_INT 2
84656: NEG
84657: PPUSH
84658: LD_INT 2
84660: PPUSH
84661: CALL_OW 12
84665: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
84666: LD_ADDR_OWVAR 31
84670: PUSH
84671: LD_INT 1
84673: PPUSH
84674: LD_INT 3
84676: PPUSH
84677: CALL_OW 12
84681: PUSH
84682: LD_INT 1
84684: PPUSH
84685: LD_INT 3
84687: PPUSH
84688: CALL_OW 12
84692: PUSH
84693: LD_INT 0
84695: PUSH
84696: LD_INT 0
84698: PUSH
84699: EMPTY
84700: LIST
84701: LIST
84702: LIST
84703: LIST
84704: ST_TO_ADDR
// animal := CreateHuman ;
84705: LD_ADDR_VAR 0 12
84709: PUSH
84710: CALL_OW 44
84714: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84715: LD_VAR 0 12
84719: PPUSH
84720: LD_VAR 0 8
84724: PPUSH
84725: LD_INT 0
84727: PPUSH
84728: CALL 86514 0 3
// end ;
84732: GO 84630
84734: POP
84735: POP
// if enchidnas then
84736: LD_VAR 0 4
84740: IFFALSE 84807
// for i = 1 to enchidnas do
84742: LD_ADDR_VAR 0 11
84746: PUSH
84747: DOUBLE
84748: LD_INT 1
84750: DEC
84751: ST_TO_ADDR
84752: LD_VAR 0 4
84756: PUSH
84757: FOR_TO
84758: IFFALSE 84805
// begin hc_class = 13 ;
84760: LD_ADDR_OWVAR 28
84764: PUSH
84765: LD_INT 13
84767: ST_TO_ADDR
// hc_gallery =  ;
84768: LD_ADDR_OWVAR 33
84772: PUSH
84773: LD_STRING 
84775: ST_TO_ADDR
// animal := CreateHuman ;
84776: LD_ADDR_VAR 0 12
84780: PUSH
84781: CALL_OW 44
84785: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84786: LD_VAR 0 12
84790: PPUSH
84791: LD_VAR 0 8
84795: PPUSH
84796: LD_INT 0
84798: PPUSH
84799: CALL 86514 0 3
// end ;
84803: GO 84757
84805: POP
84806: POP
// if fishes then
84807: LD_VAR 0 7
84811: IFFALSE 84878
// for i = 1 to fishes do
84813: LD_ADDR_VAR 0 11
84817: PUSH
84818: DOUBLE
84819: LD_INT 1
84821: DEC
84822: ST_TO_ADDR
84823: LD_VAR 0 7
84827: PUSH
84828: FOR_TO
84829: IFFALSE 84876
// begin hc_class = 20 ;
84831: LD_ADDR_OWVAR 28
84835: PUSH
84836: LD_INT 20
84838: ST_TO_ADDR
// hc_gallery =  ;
84839: LD_ADDR_OWVAR 33
84843: PUSH
84844: LD_STRING 
84846: ST_TO_ADDR
// animal := CreateHuman ;
84847: LD_ADDR_VAR 0 12
84851: PUSH
84852: CALL_OW 44
84856: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
84857: LD_VAR 0 12
84861: PPUSH
84862: LD_VAR 0 9
84866: PPUSH
84867: LD_INT 0
84869: PPUSH
84870: CALL 86514 0 3
// end ;
84874: GO 84828
84876: POP
84877: POP
// end ;
84878: LD_VAR 0 10
84882: RET
// export function WantHeal ( sci , unit ) ; begin
84883: LD_INT 0
84885: PPUSH
// if GetTaskList ( sci ) > 0 then
84886: LD_VAR 0 1
84890: PPUSH
84891: CALL_OW 437
84895: PUSH
84896: LD_INT 0
84898: GREATER
84899: IFFALSE 84969
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
84901: LD_VAR 0 1
84905: PPUSH
84906: CALL_OW 437
84910: PUSH
84911: LD_INT 1
84913: ARRAY
84914: PUSH
84915: LD_INT 1
84917: ARRAY
84918: PUSH
84919: LD_STRING l
84921: EQUAL
84922: PUSH
84923: LD_VAR 0 1
84927: PPUSH
84928: CALL_OW 437
84932: PUSH
84933: LD_INT 1
84935: ARRAY
84936: PUSH
84937: LD_INT 4
84939: ARRAY
84940: PUSH
84941: LD_VAR 0 2
84945: EQUAL
84946: AND
84947: IFFALSE 84959
// result := true else
84949: LD_ADDR_VAR 0 3
84953: PUSH
84954: LD_INT 1
84956: ST_TO_ADDR
84957: GO 84967
// result := false ;
84959: LD_ADDR_VAR 0 3
84963: PUSH
84964: LD_INT 0
84966: ST_TO_ADDR
// end else
84967: GO 84977
// result := false ;
84969: LD_ADDR_VAR 0 3
84973: PUSH
84974: LD_INT 0
84976: ST_TO_ADDR
// end ;
84977: LD_VAR 0 3
84981: RET
// export function HealTarget ( sci ) ; begin
84982: LD_INT 0
84984: PPUSH
// if not sci then
84985: LD_VAR 0 1
84989: NOT
84990: IFFALSE 84994
// exit ;
84992: GO 85059
// result := 0 ;
84994: LD_ADDR_VAR 0 2
84998: PUSH
84999: LD_INT 0
85001: ST_TO_ADDR
// if GetTaskList ( sci ) then
85002: LD_VAR 0 1
85006: PPUSH
85007: CALL_OW 437
85011: IFFALSE 85059
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
85013: LD_VAR 0 1
85017: PPUSH
85018: CALL_OW 437
85022: PUSH
85023: LD_INT 1
85025: ARRAY
85026: PUSH
85027: LD_INT 1
85029: ARRAY
85030: PUSH
85031: LD_STRING l
85033: EQUAL
85034: IFFALSE 85059
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
85036: LD_ADDR_VAR 0 2
85040: PUSH
85041: LD_VAR 0 1
85045: PPUSH
85046: CALL_OW 437
85050: PUSH
85051: LD_INT 1
85053: ARRAY
85054: PUSH
85055: LD_INT 4
85057: ARRAY
85058: ST_TO_ADDR
// end ;
85059: LD_VAR 0 2
85063: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
85064: LD_INT 0
85066: PPUSH
85067: PPUSH
85068: PPUSH
85069: PPUSH
// if not base_units then
85070: LD_VAR 0 1
85074: NOT
85075: IFFALSE 85079
// exit ;
85077: GO 85166
// result := false ;
85079: LD_ADDR_VAR 0 2
85083: PUSH
85084: LD_INT 0
85086: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
85087: LD_ADDR_VAR 0 5
85091: PUSH
85092: LD_VAR 0 1
85096: PPUSH
85097: LD_INT 21
85099: PUSH
85100: LD_INT 3
85102: PUSH
85103: EMPTY
85104: LIST
85105: LIST
85106: PPUSH
85107: CALL_OW 72
85111: ST_TO_ADDR
// if not tmp then
85112: LD_VAR 0 5
85116: NOT
85117: IFFALSE 85121
// exit ;
85119: GO 85166
// for i in tmp do
85121: LD_ADDR_VAR 0 3
85125: PUSH
85126: LD_VAR 0 5
85130: PUSH
85131: FOR_IN
85132: IFFALSE 85164
// begin result := EnemyInRange ( i , 22 ) ;
85134: LD_ADDR_VAR 0 2
85138: PUSH
85139: LD_VAR 0 3
85143: PPUSH
85144: LD_INT 22
85146: PPUSH
85147: CALL 82779 0 2
85151: ST_TO_ADDR
// if result then
85152: LD_VAR 0 2
85156: IFFALSE 85162
// exit ;
85158: POP
85159: POP
85160: GO 85166
// end ;
85162: GO 85131
85164: POP
85165: POP
// end ;
85166: LD_VAR 0 2
85170: RET
// export function FilterByTag ( units , tag ) ; begin
85171: LD_INT 0
85173: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
85174: LD_ADDR_VAR 0 3
85178: PUSH
85179: LD_VAR 0 1
85183: PPUSH
85184: LD_INT 120
85186: PUSH
85187: LD_VAR 0 2
85191: PUSH
85192: EMPTY
85193: LIST
85194: LIST
85195: PPUSH
85196: CALL_OW 72
85200: ST_TO_ADDR
// end ;
85201: LD_VAR 0 3
85205: RET
// export function IsDriver ( un ) ; begin
85206: LD_INT 0
85208: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
85209: LD_ADDR_VAR 0 2
85213: PUSH
85214: LD_VAR 0 1
85218: PUSH
85219: LD_INT 55
85221: PUSH
85222: EMPTY
85223: LIST
85224: PPUSH
85225: CALL_OW 69
85229: IN
85230: ST_TO_ADDR
// end ;
85231: LD_VAR 0 2
85235: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
85236: LD_INT 0
85238: PPUSH
85239: PPUSH
// list := [ ] ;
85240: LD_ADDR_VAR 0 5
85244: PUSH
85245: EMPTY
85246: ST_TO_ADDR
// case d of 0 :
85247: LD_VAR 0 3
85251: PUSH
85252: LD_INT 0
85254: DOUBLE
85255: EQUAL
85256: IFTRUE 85260
85258: GO 85393
85260: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
85261: LD_ADDR_VAR 0 5
85265: PUSH
85266: LD_VAR 0 1
85270: PUSH
85271: LD_INT 4
85273: MINUS
85274: PUSH
85275: LD_VAR 0 2
85279: PUSH
85280: LD_INT 4
85282: MINUS
85283: PUSH
85284: LD_INT 2
85286: PUSH
85287: EMPTY
85288: LIST
85289: LIST
85290: LIST
85291: PUSH
85292: LD_VAR 0 1
85296: PUSH
85297: LD_INT 3
85299: MINUS
85300: PUSH
85301: LD_VAR 0 2
85305: PUSH
85306: LD_INT 1
85308: PUSH
85309: EMPTY
85310: LIST
85311: LIST
85312: LIST
85313: PUSH
85314: LD_VAR 0 1
85318: PUSH
85319: LD_INT 4
85321: PLUS
85322: PUSH
85323: LD_VAR 0 2
85327: PUSH
85328: LD_INT 4
85330: PUSH
85331: EMPTY
85332: LIST
85333: LIST
85334: LIST
85335: PUSH
85336: LD_VAR 0 1
85340: PUSH
85341: LD_INT 3
85343: PLUS
85344: PUSH
85345: LD_VAR 0 2
85349: PUSH
85350: LD_INT 3
85352: PLUS
85353: PUSH
85354: LD_INT 5
85356: PUSH
85357: EMPTY
85358: LIST
85359: LIST
85360: LIST
85361: PUSH
85362: LD_VAR 0 1
85366: PUSH
85367: LD_VAR 0 2
85371: PUSH
85372: LD_INT 4
85374: PLUS
85375: PUSH
85376: LD_INT 0
85378: PUSH
85379: EMPTY
85380: LIST
85381: LIST
85382: LIST
85383: PUSH
85384: EMPTY
85385: LIST
85386: LIST
85387: LIST
85388: LIST
85389: LIST
85390: ST_TO_ADDR
// end ; 1 :
85391: GO 86091
85393: LD_INT 1
85395: DOUBLE
85396: EQUAL
85397: IFTRUE 85401
85399: GO 85534
85401: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
85402: LD_ADDR_VAR 0 5
85406: PUSH
85407: LD_VAR 0 1
85411: PUSH
85412: LD_VAR 0 2
85416: PUSH
85417: LD_INT 4
85419: MINUS
85420: PUSH
85421: LD_INT 3
85423: PUSH
85424: EMPTY
85425: LIST
85426: LIST
85427: LIST
85428: PUSH
85429: LD_VAR 0 1
85433: PUSH
85434: LD_INT 3
85436: MINUS
85437: PUSH
85438: LD_VAR 0 2
85442: PUSH
85443: LD_INT 3
85445: MINUS
85446: PUSH
85447: LD_INT 2
85449: PUSH
85450: EMPTY
85451: LIST
85452: LIST
85453: LIST
85454: PUSH
85455: LD_VAR 0 1
85459: PUSH
85460: LD_INT 4
85462: MINUS
85463: PUSH
85464: LD_VAR 0 2
85468: PUSH
85469: LD_INT 1
85471: PUSH
85472: EMPTY
85473: LIST
85474: LIST
85475: LIST
85476: PUSH
85477: LD_VAR 0 1
85481: PUSH
85482: LD_VAR 0 2
85486: PUSH
85487: LD_INT 3
85489: PLUS
85490: PUSH
85491: LD_INT 0
85493: PUSH
85494: EMPTY
85495: LIST
85496: LIST
85497: LIST
85498: PUSH
85499: LD_VAR 0 1
85503: PUSH
85504: LD_INT 4
85506: PLUS
85507: PUSH
85508: LD_VAR 0 2
85512: PUSH
85513: LD_INT 4
85515: PLUS
85516: PUSH
85517: LD_INT 5
85519: PUSH
85520: EMPTY
85521: LIST
85522: LIST
85523: LIST
85524: PUSH
85525: EMPTY
85526: LIST
85527: LIST
85528: LIST
85529: LIST
85530: LIST
85531: ST_TO_ADDR
// end ; 2 :
85532: GO 86091
85534: LD_INT 2
85536: DOUBLE
85537: EQUAL
85538: IFTRUE 85542
85540: GO 85671
85542: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
85543: LD_ADDR_VAR 0 5
85547: PUSH
85548: LD_VAR 0 1
85552: PUSH
85553: LD_VAR 0 2
85557: PUSH
85558: LD_INT 3
85560: MINUS
85561: PUSH
85562: LD_INT 3
85564: PUSH
85565: EMPTY
85566: LIST
85567: LIST
85568: LIST
85569: PUSH
85570: LD_VAR 0 1
85574: PUSH
85575: LD_INT 4
85577: PLUS
85578: PUSH
85579: LD_VAR 0 2
85583: PUSH
85584: LD_INT 4
85586: PUSH
85587: EMPTY
85588: LIST
85589: LIST
85590: LIST
85591: PUSH
85592: LD_VAR 0 1
85596: PUSH
85597: LD_VAR 0 2
85601: PUSH
85602: LD_INT 4
85604: PLUS
85605: PUSH
85606: LD_INT 0
85608: PUSH
85609: EMPTY
85610: LIST
85611: LIST
85612: LIST
85613: PUSH
85614: LD_VAR 0 1
85618: PUSH
85619: LD_INT 3
85621: MINUS
85622: PUSH
85623: LD_VAR 0 2
85627: PUSH
85628: LD_INT 1
85630: PUSH
85631: EMPTY
85632: LIST
85633: LIST
85634: LIST
85635: PUSH
85636: LD_VAR 0 1
85640: PUSH
85641: LD_INT 4
85643: MINUS
85644: PUSH
85645: LD_VAR 0 2
85649: PUSH
85650: LD_INT 4
85652: MINUS
85653: PUSH
85654: LD_INT 2
85656: PUSH
85657: EMPTY
85658: LIST
85659: LIST
85660: LIST
85661: PUSH
85662: EMPTY
85663: LIST
85664: LIST
85665: LIST
85666: LIST
85667: LIST
85668: ST_TO_ADDR
// end ; 3 :
85669: GO 86091
85671: LD_INT 3
85673: DOUBLE
85674: EQUAL
85675: IFTRUE 85679
85677: GO 85812
85679: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
85680: LD_ADDR_VAR 0 5
85684: PUSH
85685: LD_VAR 0 1
85689: PUSH
85690: LD_INT 3
85692: PLUS
85693: PUSH
85694: LD_VAR 0 2
85698: PUSH
85699: LD_INT 4
85701: PUSH
85702: EMPTY
85703: LIST
85704: LIST
85705: LIST
85706: PUSH
85707: LD_VAR 0 1
85711: PUSH
85712: LD_INT 4
85714: PLUS
85715: PUSH
85716: LD_VAR 0 2
85720: PUSH
85721: LD_INT 4
85723: PLUS
85724: PUSH
85725: LD_INT 5
85727: PUSH
85728: EMPTY
85729: LIST
85730: LIST
85731: LIST
85732: PUSH
85733: LD_VAR 0 1
85737: PUSH
85738: LD_INT 4
85740: MINUS
85741: PUSH
85742: LD_VAR 0 2
85746: PUSH
85747: LD_INT 1
85749: PUSH
85750: EMPTY
85751: LIST
85752: LIST
85753: LIST
85754: PUSH
85755: LD_VAR 0 1
85759: PUSH
85760: LD_VAR 0 2
85764: PUSH
85765: LD_INT 4
85767: MINUS
85768: PUSH
85769: LD_INT 3
85771: PUSH
85772: EMPTY
85773: LIST
85774: LIST
85775: LIST
85776: PUSH
85777: LD_VAR 0 1
85781: PUSH
85782: LD_INT 3
85784: MINUS
85785: PUSH
85786: LD_VAR 0 2
85790: PUSH
85791: LD_INT 3
85793: MINUS
85794: PUSH
85795: LD_INT 2
85797: PUSH
85798: EMPTY
85799: LIST
85800: LIST
85801: LIST
85802: PUSH
85803: EMPTY
85804: LIST
85805: LIST
85806: LIST
85807: LIST
85808: LIST
85809: ST_TO_ADDR
// end ; 4 :
85810: GO 86091
85812: LD_INT 4
85814: DOUBLE
85815: EQUAL
85816: IFTRUE 85820
85818: GO 85953
85820: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
85821: LD_ADDR_VAR 0 5
85825: PUSH
85826: LD_VAR 0 1
85830: PUSH
85831: LD_VAR 0 2
85835: PUSH
85836: LD_INT 4
85838: PLUS
85839: PUSH
85840: LD_INT 0
85842: PUSH
85843: EMPTY
85844: LIST
85845: LIST
85846: LIST
85847: PUSH
85848: LD_VAR 0 1
85852: PUSH
85853: LD_INT 3
85855: PLUS
85856: PUSH
85857: LD_VAR 0 2
85861: PUSH
85862: LD_INT 3
85864: PLUS
85865: PUSH
85866: LD_INT 5
85868: PUSH
85869: EMPTY
85870: LIST
85871: LIST
85872: LIST
85873: PUSH
85874: LD_VAR 0 1
85878: PUSH
85879: LD_INT 4
85881: PLUS
85882: PUSH
85883: LD_VAR 0 2
85887: PUSH
85888: LD_INT 4
85890: PUSH
85891: EMPTY
85892: LIST
85893: LIST
85894: LIST
85895: PUSH
85896: LD_VAR 0 1
85900: PUSH
85901: LD_VAR 0 2
85905: PUSH
85906: LD_INT 3
85908: MINUS
85909: PUSH
85910: LD_INT 3
85912: PUSH
85913: EMPTY
85914: LIST
85915: LIST
85916: LIST
85917: PUSH
85918: LD_VAR 0 1
85922: PUSH
85923: LD_INT 4
85925: MINUS
85926: PUSH
85927: LD_VAR 0 2
85931: PUSH
85932: LD_INT 4
85934: MINUS
85935: PUSH
85936: LD_INT 2
85938: PUSH
85939: EMPTY
85940: LIST
85941: LIST
85942: LIST
85943: PUSH
85944: EMPTY
85945: LIST
85946: LIST
85947: LIST
85948: LIST
85949: LIST
85950: ST_TO_ADDR
// end ; 5 :
85951: GO 86091
85953: LD_INT 5
85955: DOUBLE
85956: EQUAL
85957: IFTRUE 85961
85959: GO 86090
85961: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
85962: LD_ADDR_VAR 0 5
85966: PUSH
85967: LD_VAR 0 1
85971: PUSH
85972: LD_INT 4
85974: MINUS
85975: PUSH
85976: LD_VAR 0 2
85980: PUSH
85981: LD_INT 1
85983: PUSH
85984: EMPTY
85985: LIST
85986: LIST
85987: LIST
85988: PUSH
85989: LD_VAR 0 1
85993: PUSH
85994: LD_VAR 0 2
85998: PUSH
85999: LD_INT 4
86001: MINUS
86002: PUSH
86003: LD_INT 3
86005: PUSH
86006: EMPTY
86007: LIST
86008: LIST
86009: LIST
86010: PUSH
86011: LD_VAR 0 1
86015: PUSH
86016: LD_INT 4
86018: PLUS
86019: PUSH
86020: LD_VAR 0 2
86024: PUSH
86025: LD_INT 4
86027: PLUS
86028: PUSH
86029: LD_INT 5
86031: PUSH
86032: EMPTY
86033: LIST
86034: LIST
86035: LIST
86036: PUSH
86037: LD_VAR 0 1
86041: PUSH
86042: LD_INT 3
86044: PLUS
86045: PUSH
86046: LD_VAR 0 2
86050: PUSH
86051: LD_INT 4
86053: PUSH
86054: EMPTY
86055: LIST
86056: LIST
86057: LIST
86058: PUSH
86059: LD_VAR 0 1
86063: PUSH
86064: LD_VAR 0 2
86068: PUSH
86069: LD_INT 3
86071: PLUS
86072: PUSH
86073: LD_INT 0
86075: PUSH
86076: EMPTY
86077: LIST
86078: LIST
86079: LIST
86080: PUSH
86081: EMPTY
86082: LIST
86083: LIST
86084: LIST
86085: LIST
86086: LIST
86087: ST_TO_ADDR
// end ; end ;
86088: GO 86091
86090: POP
// result := list ;
86091: LD_ADDR_VAR 0 4
86095: PUSH
86096: LD_VAR 0 5
86100: ST_TO_ADDR
// end ;
86101: LD_VAR 0 4
86105: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
86106: LD_INT 0
86108: PPUSH
86109: PPUSH
86110: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
86111: LD_VAR 0 1
86115: NOT
86116: PUSH
86117: LD_VAR 0 2
86121: PUSH
86122: LD_INT 1
86124: PUSH
86125: LD_INT 2
86127: PUSH
86128: LD_INT 3
86130: PUSH
86131: LD_INT 4
86133: PUSH
86134: EMPTY
86135: LIST
86136: LIST
86137: LIST
86138: LIST
86139: IN
86140: NOT
86141: OR
86142: IFFALSE 86146
// exit ;
86144: GO 86238
// tmp := [ ] ;
86146: LD_ADDR_VAR 0 5
86150: PUSH
86151: EMPTY
86152: ST_TO_ADDR
// for i in units do
86153: LD_ADDR_VAR 0 4
86157: PUSH
86158: LD_VAR 0 1
86162: PUSH
86163: FOR_IN
86164: IFFALSE 86207
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
86166: LD_ADDR_VAR 0 5
86170: PUSH
86171: LD_VAR 0 5
86175: PPUSH
86176: LD_VAR 0 5
86180: PUSH
86181: LD_INT 1
86183: PLUS
86184: PPUSH
86185: LD_VAR 0 4
86189: PPUSH
86190: LD_VAR 0 2
86194: PPUSH
86195: CALL_OW 259
86199: PPUSH
86200: CALL_OW 2
86204: ST_TO_ADDR
86205: GO 86163
86207: POP
86208: POP
// if not tmp then
86209: LD_VAR 0 5
86213: NOT
86214: IFFALSE 86218
// exit ;
86216: GO 86238
// result := SortListByListDesc ( units , tmp ) ;
86218: LD_ADDR_VAR 0 3
86222: PUSH
86223: LD_VAR 0 1
86227: PPUSH
86228: LD_VAR 0 5
86232: PPUSH
86233: CALL_OW 77
86237: ST_TO_ADDR
// end ;
86238: LD_VAR 0 3
86242: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
86243: LD_INT 0
86245: PPUSH
86246: PPUSH
86247: PPUSH
// result := false ;
86248: LD_ADDR_VAR 0 3
86252: PUSH
86253: LD_INT 0
86255: ST_TO_ADDR
// x := GetX ( building ) ;
86256: LD_ADDR_VAR 0 4
86260: PUSH
86261: LD_VAR 0 2
86265: PPUSH
86266: CALL_OW 250
86270: ST_TO_ADDR
// y := GetY ( building ) ;
86271: LD_ADDR_VAR 0 5
86275: PUSH
86276: LD_VAR 0 2
86280: PPUSH
86281: CALL_OW 251
86285: ST_TO_ADDR
// if not building or not x or not y then
86286: LD_VAR 0 2
86290: NOT
86291: PUSH
86292: LD_VAR 0 4
86296: NOT
86297: OR
86298: PUSH
86299: LD_VAR 0 5
86303: NOT
86304: OR
86305: IFFALSE 86309
// exit ;
86307: GO 86401
// if GetTaskList ( unit ) then
86309: LD_VAR 0 1
86313: PPUSH
86314: CALL_OW 437
86318: IFFALSE 86401
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
86320: LD_STRING e
86322: PUSH
86323: LD_VAR 0 1
86327: PPUSH
86328: CALL_OW 437
86332: PUSH
86333: LD_INT 1
86335: ARRAY
86336: PUSH
86337: LD_INT 1
86339: ARRAY
86340: EQUAL
86341: PUSH
86342: LD_VAR 0 4
86346: PUSH
86347: LD_VAR 0 1
86351: PPUSH
86352: CALL_OW 437
86356: PUSH
86357: LD_INT 1
86359: ARRAY
86360: PUSH
86361: LD_INT 2
86363: ARRAY
86364: EQUAL
86365: AND
86366: PUSH
86367: LD_VAR 0 5
86371: PUSH
86372: LD_VAR 0 1
86376: PPUSH
86377: CALL_OW 437
86381: PUSH
86382: LD_INT 1
86384: ARRAY
86385: PUSH
86386: LD_INT 3
86388: ARRAY
86389: EQUAL
86390: AND
86391: IFFALSE 86401
// result := true end ;
86393: LD_ADDR_VAR 0 3
86397: PUSH
86398: LD_INT 1
86400: ST_TO_ADDR
// end ;
86401: LD_VAR 0 3
86405: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
86406: LD_INT 0
86408: PPUSH
// result := false ;
86409: LD_ADDR_VAR 0 4
86413: PUSH
86414: LD_INT 0
86416: ST_TO_ADDR
// if GetTaskList ( unit ) then
86417: LD_VAR 0 1
86421: PPUSH
86422: CALL_OW 437
86426: IFFALSE 86509
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
86428: LD_STRING M
86430: PUSH
86431: LD_VAR 0 1
86435: PPUSH
86436: CALL_OW 437
86440: PUSH
86441: LD_INT 1
86443: ARRAY
86444: PUSH
86445: LD_INT 1
86447: ARRAY
86448: EQUAL
86449: PUSH
86450: LD_VAR 0 2
86454: PUSH
86455: LD_VAR 0 1
86459: PPUSH
86460: CALL_OW 437
86464: PUSH
86465: LD_INT 1
86467: ARRAY
86468: PUSH
86469: LD_INT 2
86471: ARRAY
86472: EQUAL
86473: AND
86474: PUSH
86475: LD_VAR 0 3
86479: PUSH
86480: LD_VAR 0 1
86484: PPUSH
86485: CALL_OW 437
86489: PUSH
86490: LD_INT 1
86492: ARRAY
86493: PUSH
86494: LD_INT 3
86496: ARRAY
86497: EQUAL
86498: AND
86499: IFFALSE 86509
// result := true ;
86501: LD_ADDR_VAR 0 4
86505: PUSH
86506: LD_INT 1
86508: ST_TO_ADDR
// end ; end ;
86509: LD_VAR 0 4
86513: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
86514: LD_INT 0
86516: PPUSH
86517: PPUSH
86518: PPUSH
86519: PPUSH
// if not unit or not area then
86520: LD_VAR 0 1
86524: NOT
86525: PUSH
86526: LD_VAR 0 2
86530: NOT
86531: OR
86532: IFFALSE 86536
// exit ;
86534: GO 86700
// tmp := AreaToList ( area , i ) ;
86536: LD_ADDR_VAR 0 6
86540: PUSH
86541: LD_VAR 0 2
86545: PPUSH
86546: LD_VAR 0 5
86550: PPUSH
86551: CALL_OW 517
86555: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
86556: LD_ADDR_VAR 0 5
86560: PUSH
86561: DOUBLE
86562: LD_INT 1
86564: DEC
86565: ST_TO_ADDR
86566: LD_VAR 0 6
86570: PUSH
86571: LD_INT 1
86573: ARRAY
86574: PUSH
86575: FOR_TO
86576: IFFALSE 86698
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
86578: LD_ADDR_VAR 0 7
86582: PUSH
86583: LD_VAR 0 6
86587: PUSH
86588: LD_INT 1
86590: ARRAY
86591: PUSH
86592: LD_VAR 0 5
86596: ARRAY
86597: PUSH
86598: LD_VAR 0 6
86602: PUSH
86603: LD_INT 2
86605: ARRAY
86606: PUSH
86607: LD_VAR 0 5
86611: ARRAY
86612: PUSH
86613: EMPTY
86614: LIST
86615: LIST
86616: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
86617: LD_VAR 0 7
86621: PUSH
86622: LD_INT 1
86624: ARRAY
86625: PPUSH
86626: LD_VAR 0 7
86630: PUSH
86631: LD_INT 2
86633: ARRAY
86634: PPUSH
86635: CALL_OW 428
86639: PUSH
86640: LD_INT 0
86642: EQUAL
86643: IFFALSE 86696
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
86645: LD_VAR 0 1
86649: PPUSH
86650: LD_VAR 0 7
86654: PUSH
86655: LD_INT 1
86657: ARRAY
86658: PPUSH
86659: LD_VAR 0 7
86663: PUSH
86664: LD_INT 2
86666: ARRAY
86667: PPUSH
86668: LD_VAR 0 3
86672: PPUSH
86673: CALL_OW 48
// result := IsPlaced ( unit ) ;
86677: LD_ADDR_VAR 0 4
86681: PUSH
86682: LD_VAR 0 1
86686: PPUSH
86687: CALL_OW 305
86691: ST_TO_ADDR
// exit ;
86692: POP
86693: POP
86694: GO 86700
// end ; end ;
86696: GO 86575
86698: POP
86699: POP
// end ;
86700: LD_VAR 0 4
86704: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
86705: LD_INT 0
86707: PPUSH
86708: PPUSH
86709: PPUSH
// if not side or side > 8 then
86710: LD_VAR 0 1
86714: NOT
86715: PUSH
86716: LD_VAR 0 1
86720: PUSH
86721: LD_INT 8
86723: GREATER
86724: OR
86725: IFFALSE 86729
// exit ;
86727: GO 86916
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
86729: LD_ADDR_VAR 0 4
86733: PUSH
86734: LD_INT 22
86736: PUSH
86737: LD_VAR 0 1
86741: PUSH
86742: EMPTY
86743: LIST
86744: LIST
86745: PUSH
86746: LD_INT 21
86748: PUSH
86749: LD_INT 3
86751: PUSH
86752: EMPTY
86753: LIST
86754: LIST
86755: PUSH
86756: EMPTY
86757: LIST
86758: LIST
86759: PPUSH
86760: CALL_OW 69
86764: ST_TO_ADDR
// if not tmp then
86765: LD_VAR 0 4
86769: NOT
86770: IFFALSE 86774
// exit ;
86772: GO 86916
// enable_addtolog := true ;
86774: LD_ADDR_OWVAR 81
86778: PUSH
86779: LD_INT 1
86781: ST_TO_ADDR
// AddToLog ( [ ) ;
86782: LD_STRING [
86784: PPUSH
86785: CALL_OW 561
// for i in tmp do
86789: LD_ADDR_VAR 0 3
86793: PUSH
86794: LD_VAR 0 4
86798: PUSH
86799: FOR_IN
86800: IFFALSE 86907
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
86802: LD_STRING [
86804: PUSH
86805: LD_VAR 0 3
86809: PPUSH
86810: CALL_OW 266
86814: STR
86815: PUSH
86816: LD_STRING , 
86818: STR
86819: PUSH
86820: LD_VAR 0 3
86824: PPUSH
86825: CALL_OW 250
86829: STR
86830: PUSH
86831: LD_STRING , 
86833: STR
86834: PUSH
86835: LD_VAR 0 3
86839: PPUSH
86840: CALL_OW 251
86844: STR
86845: PUSH
86846: LD_STRING , 
86848: STR
86849: PUSH
86850: LD_VAR 0 3
86854: PPUSH
86855: CALL_OW 254
86859: STR
86860: PUSH
86861: LD_STRING , 
86863: STR
86864: PUSH
86865: LD_VAR 0 3
86869: PPUSH
86870: LD_INT 1
86872: PPUSH
86873: CALL_OW 268
86877: STR
86878: PUSH
86879: LD_STRING , 
86881: STR
86882: PUSH
86883: LD_VAR 0 3
86887: PPUSH
86888: LD_INT 2
86890: PPUSH
86891: CALL_OW 268
86895: STR
86896: PUSH
86897: LD_STRING ],
86899: STR
86900: PPUSH
86901: CALL_OW 561
// end ;
86905: GO 86799
86907: POP
86908: POP
// AddToLog ( ]; ) ;
86909: LD_STRING ];
86911: PPUSH
86912: CALL_OW 561
// end ;
86916: LD_VAR 0 2
86920: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
86921: LD_INT 0
86923: PPUSH
86924: PPUSH
86925: PPUSH
86926: PPUSH
86927: PPUSH
// if not area or not rate or not max then
86928: LD_VAR 0 1
86932: NOT
86933: PUSH
86934: LD_VAR 0 2
86938: NOT
86939: OR
86940: PUSH
86941: LD_VAR 0 4
86945: NOT
86946: OR
86947: IFFALSE 86951
// exit ;
86949: GO 87140
// while 1 do
86951: LD_INT 1
86953: IFFALSE 87140
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
86955: LD_ADDR_VAR 0 9
86959: PUSH
86960: LD_VAR 0 1
86964: PPUSH
86965: LD_INT 1
86967: PPUSH
86968: CALL_OW 287
86972: PUSH
86973: LD_INT 10
86975: MUL
86976: ST_TO_ADDR
// r := rate / 10 ;
86977: LD_ADDR_VAR 0 7
86981: PUSH
86982: LD_VAR 0 2
86986: PUSH
86987: LD_INT 10
86989: DIVREAL
86990: ST_TO_ADDR
// time := 1 1$00 ;
86991: LD_ADDR_VAR 0 8
86995: PUSH
86996: LD_INT 2100
86998: ST_TO_ADDR
// if amount < min then
86999: LD_VAR 0 9
87003: PUSH
87004: LD_VAR 0 3
87008: LESS
87009: IFFALSE 87027
// r := r * 2 else
87011: LD_ADDR_VAR 0 7
87015: PUSH
87016: LD_VAR 0 7
87020: PUSH
87021: LD_INT 2
87023: MUL
87024: ST_TO_ADDR
87025: GO 87053
// if amount > max then
87027: LD_VAR 0 9
87031: PUSH
87032: LD_VAR 0 4
87036: GREATER
87037: IFFALSE 87053
// r := r / 2 ;
87039: LD_ADDR_VAR 0 7
87043: PUSH
87044: LD_VAR 0 7
87048: PUSH
87049: LD_INT 2
87051: DIVREAL
87052: ST_TO_ADDR
// time := time / r ;
87053: LD_ADDR_VAR 0 8
87057: PUSH
87058: LD_VAR 0 8
87062: PUSH
87063: LD_VAR 0 7
87067: DIVREAL
87068: ST_TO_ADDR
// if time < 0 then
87069: LD_VAR 0 8
87073: PUSH
87074: LD_INT 0
87076: LESS
87077: IFFALSE 87094
// time := time * - 1 ;
87079: LD_ADDR_VAR 0 8
87083: PUSH
87084: LD_VAR 0 8
87088: PUSH
87089: LD_INT 1
87091: NEG
87092: MUL
87093: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
87094: LD_VAR 0 8
87098: PUSH
87099: LD_INT 35
87101: PPUSH
87102: LD_INT 875
87104: PPUSH
87105: CALL_OW 12
87109: PLUS
87110: PPUSH
87111: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
87115: LD_INT 1
87117: PPUSH
87118: LD_INT 5
87120: PPUSH
87121: CALL_OW 12
87125: PPUSH
87126: LD_VAR 0 1
87130: PPUSH
87131: LD_INT 1
87133: PPUSH
87134: CALL_OW 55
// end ;
87138: GO 86951
// end ;
87140: LD_VAR 0 5
87144: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
87145: LD_INT 0
87147: PPUSH
87148: PPUSH
87149: PPUSH
87150: PPUSH
87151: PPUSH
87152: PPUSH
87153: PPUSH
87154: PPUSH
// if not turrets or not factories then
87155: LD_VAR 0 1
87159: NOT
87160: PUSH
87161: LD_VAR 0 2
87165: NOT
87166: OR
87167: IFFALSE 87171
// exit ;
87169: GO 87478
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
87171: LD_ADDR_VAR 0 10
87175: PUSH
87176: LD_INT 5
87178: PUSH
87179: LD_INT 6
87181: PUSH
87182: EMPTY
87183: LIST
87184: LIST
87185: PUSH
87186: LD_INT 2
87188: PUSH
87189: LD_INT 4
87191: PUSH
87192: EMPTY
87193: LIST
87194: LIST
87195: PUSH
87196: LD_INT 3
87198: PUSH
87199: LD_INT 5
87201: PUSH
87202: EMPTY
87203: LIST
87204: LIST
87205: PUSH
87206: EMPTY
87207: LIST
87208: LIST
87209: LIST
87210: PUSH
87211: LD_INT 24
87213: PUSH
87214: LD_INT 25
87216: PUSH
87217: EMPTY
87218: LIST
87219: LIST
87220: PUSH
87221: LD_INT 23
87223: PUSH
87224: LD_INT 27
87226: PUSH
87227: EMPTY
87228: LIST
87229: LIST
87230: PUSH
87231: EMPTY
87232: LIST
87233: LIST
87234: PUSH
87235: LD_INT 42
87237: PUSH
87238: LD_INT 43
87240: PUSH
87241: EMPTY
87242: LIST
87243: LIST
87244: PUSH
87245: LD_INT 44
87247: PUSH
87248: LD_INT 46
87250: PUSH
87251: EMPTY
87252: LIST
87253: LIST
87254: PUSH
87255: LD_INT 45
87257: PUSH
87258: LD_INT 47
87260: PUSH
87261: EMPTY
87262: LIST
87263: LIST
87264: PUSH
87265: EMPTY
87266: LIST
87267: LIST
87268: LIST
87269: PUSH
87270: EMPTY
87271: LIST
87272: LIST
87273: LIST
87274: ST_TO_ADDR
// result := [ ] ;
87275: LD_ADDR_VAR 0 3
87279: PUSH
87280: EMPTY
87281: ST_TO_ADDR
// for i in turrets do
87282: LD_ADDR_VAR 0 4
87286: PUSH
87287: LD_VAR 0 1
87291: PUSH
87292: FOR_IN
87293: IFFALSE 87476
// begin nat := GetNation ( i ) ;
87295: LD_ADDR_VAR 0 7
87299: PUSH
87300: LD_VAR 0 4
87304: PPUSH
87305: CALL_OW 248
87309: ST_TO_ADDR
// weapon := 0 ;
87310: LD_ADDR_VAR 0 8
87314: PUSH
87315: LD_INT 0
87317: ST_TO_ADDR
// if not nat then
87318: LD_VAR 0 7
87322: NOT
87323: IFFALSE 87327
// continue ;
87325: GO 87292
// for j in list [ nat ] do
87327: LD_ADDR_VAR 0 5
87331: PUSH
87332: LD_VAR 0 10
87336: PUSH
87337: LD_VAR 0 7
87341: ARRAY
87342: PUSH
87343: FOR_IN
87344: IFFALSE 87385
// if GetBWeapon ( i ) = j [ 1 ] then
87346: LD_VAR 0 4
87350: PPUSH
87351: CALL_OW 269
87355: PUSH
87356: LD_VAR 0 5
87360: PUSH
87361: LD_INT 1
87363: ARRAY
87364: EQUAL
87365: IFFALSE 87383
// begin weapon := j [ 2 ] ;
87367: LD_ADDR_VAR 0 8
87371: PUSH
87372: LD_VAR 0 5
87376: PUSH
87377: LD_INT 2
87379: ARRAY
87380: ST_TO_ADDR
// break ;
87381: GO 87385
// end ;
87383: GO 87343
87385: POP
87386: POP
// if not weapon then
87387: LD_VAR 0 8
87391: NOT
87392: IFFALSE 87396
// continue ;
87394: GO 87292
// for k in factories do
87396: LD_ADDR_VAR 0 6
87400: PUSH
87401: LD_VAR 0 2
87405: PUSH
87406: FOR_IN
87407: IFFALSE 87472
// begin weapons := AvailableWeaponList ( k ) ;
87409: LD_ADDR_VAR 0 9
87413: PUSH
87414: LD_VAR 0 6
87418: PPUSH
87419: CALL_OW 478
87423: ST_TO_ADDR
// if not weapons then
87424: LD_VAR 0 9
87428: NOT
87429: IFFALSE 87433
// continue ;
87431: GO 87406
// if weapon in weapons then
87433: LD_VAR 0 8
87437: PUSH
87438: LD_VAR 0 9
87442: IN
87443: IFFALSE 87470
// begin result := [ i , weapon ] ;
87445: LD_ADDR_VAR 0 3
87449: PUSH
87450: LD_VAR 0 4
87454: PUSH
87455: LD_VAR 0 8
87459: PUSH
87460: EMPTY
87461: LIST
87462: LIST
87463: ST_TO_ADDR
// exit ;
87464: POP
87465: POP
87466: POP
87467: POP
87468: GO 87478
// end ; end ;
87470: GO 87406
87472: POP
87473: POP
// end ;
87474: GO 87292
87476: POP
87477: POP
// end ;
87478: LD_VAR 0 3
87482: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
87483: LD_INT 0
87485: PPUSH
// if not side or side > 8 then
87486: LD_VAR 0 3
87490: NOT
87491: PUSH
87492: LD_VAR 0 3
87496: PUSH
87497: LD_INT 8
87499: GREATER
87500: OR
87501: IFFALSE 87505
// exit ;
87503: GO 87564
// if not range then
87505: LD_VAR 0 4
87509: NOT
87510: IFFALSE 87521
// range := - 12 ;
87512: LD_ADDR_VAR 0 4
87516: PUSH
87517: LD_INT 12
87519: NEG
87520: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
87521: LD_VAR 0 1
87525: PPUSH
87526: LD_VAR 0 2
87530: PPUSH
87531: LD_VAR 0 3
87535: PPUSH
87536: LD_VAR 0 4
87540: PPUSH
87541: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
87545: LD_VAR 0 1
87549: PPUSH
87550: LD_VAR 0 2
87554: PPUSH
87555: LD_VAR 0 3
87559: PPUSH
87560: CALL_OW 331
// end ;
87564: LD_VAR 0 5
87568: RET
// export function Video ( mode ) ; begin
87569: LD_INT 0
87571: PPUSH
// ingame_video = mode ;
87572: LD_ADDR_OWVAR 52
87576: PUSH
87577: LD_VAR 0 1
87581: ST_TO_ADDR
// interface_hidden = mode ;
87582: LD_ADDR_OWVAR 54
87586: PUSH
87587: LD_VAR 0 1
87591: ST_TO_ADDR
// end ;
87592: LD_VAR 0 2
87596: RET
// export function Join ( array , element ) ; begin
87597: LD_INT 0
87599: PPUSH
// result := Replace ( array , array + 1 , element ) ;
87600: LD_ADDR_VAR 0 3
87604: PUSH
87605: LD_VAR 0 1
87609: PPUSH
87610: LD_VAR 0 1
87614: PUSH
87615: LD_INT 1
87617: PLUS
87618: PPUSH
87619: LD_VAR 0 2
87623: PPUSH
87624: CALL_OW 1
87628: ST_TO_ADDR
// end ;
87629: LD_VAR 0 3
87633: RET
// export function JoinUnion ( array , element ) ; begin
87634: LD_INT 0
87636: PPUSH
// result := array union element ;
87637: LD_ADDR_VAR 0 3
87641: PUSH
87642: LD_VAR 0 1
87646: PUSH
87647: LD_VAR 0 2
87651: UNION
87652: ST_TO_ADDR
// end ;
87653: LD_VAR 0 3
87657: RET
// export function GetBehemoths ( side ) ; begin
87658: LD_INT 0
87660: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
87661: LD_ADDR_VAR 0 2
87665: PUSH
87666: LD_INT 22
87668: PUSH
87669: LD_VAR 0 1
87673: PUSH
87674: EMPTY
87675: LIST
87676: LIST
87677: PUSH
87678: LD_INT 31
87680: PUSH
87681: LD_INT 25
87683: PUSH
87684: EMPTY
87685: LIST
87686: LIST
87687: PUSH
87688: EMPTY
87689: LIST
87690: LIST
87691: PPUSH
87692: CALL_OW 69
87696: ST_TO_ADDR
// end ;
87697: LD_VAR 0 2
87701: RET
// export function Shuffle ( array ) ; var i , index ; begin
87702: LD_INT 0
87704: PPUSH
87705: PPUSH
87706: PPUSH
// result := [ ] ;
87707: LD_ADDR_VAR 0 2
87711: PUSH
87712: EMPTY
87713: ST_TO_ADDR
// if not array then
87714: LD_VAR 0 1
87718: NOT
87719: IFFALSE 87723
// exit ;
87721: GO 87822
// Randomize ;
87723: CALL_OW 10
// for i = array downto 1 do
87727: LD_ADDR_VAR 0 3
87731: PUSH
87732: DOUBLE
87733: LD_VAR 0 1
87737: INC
87738: ST_TO_ADDR
87739: LD_INT 1
87741: PUSH
87742: FOR_DOWNTO
87743: IFFALSE 87820
// begin index := rand ( 1 , array ) ;
87745: LD_ADDR_VAR 0 4
87749: PUSH
87750: LD_INT 1
87752: PPUSH
87753: LD_VAR 0 1
87757: PPUSH
87758: CALL_OW 12
87762: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
87763: LD_ADDR_VAR 0 2
87767: PUSH
87768: LD_VAR 0 2
87772: PPUSH
87773: LD_VAR 0 2
87777: PUSH
87778: LD_INT 1
87780: PLUS
87781: PPUSH
87782: LD_VAR 0 1
87786: PUSH
87787: LD_VAR 0 4
87791: ARRAY
87792: PPUSH
87793: CALL_OW 2
87797: ST_TO_ADDR
// array := Delete ( array , index ) ;
87798: LD_ADDR_VAR 0 1
87802: PUSH
87803: LD_VAR 0 1
87807: PPUSH
87808: LD_VAR 0 4
87812: PPUSH
87813: CALL_OW 3
87817: ST_TO_ADDR
// end ;
87818: GO 87742
87820: POP
87821: POP
// end ;
87822: LD_VAR 0 2
87826: RET
// export function GetBaseMaterials ( base ) ; begin
87827: LD_INT 0
87829: PPUSH
// result := [ 0 , 0 , 0 ] ;
87830: LD_ADDR_VAR 0 2
87834: PUSH
87835: LD_INT 0
87837: PUSH
87838: LD_INT 0
87840: PUSH
87841: LD_INT 0
87843: PUSH
87844: EMPTY
87845: LIST
87846: LIST
87847: LIST
87848: ST_TO_ADDR
// if not base then
87849: LD_VAR 0 1
87853: NOT
87854: IFFALSE 87858
// exit ;
87856: GO 87907
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
87858: LD_ADDR_VAR 0 2
87862: PUSH
87863: LD_VAR 0 1
87867: PPUSH
87868: LD_INT 1
87870: PPUSH
87871: CALL_OW 275
87875: PUSH
87876: LD_VAR 0 1
87880: PPUSH
87881: LD_INT 2
87883: PPUSH
87884: CALL_OW 275
87888: PUSH
87889: LD_VAR 0 1
87893: PPUSH
87894: LD_INT 3
87896: PPUSH
87897: CALL_OW 275
87901: PUSH
87902: EMPTY
87903: LIST
87904: LIST
87905: LIST
87906: ST_TO_ADDR
// end ;
87907: LD_VAR 0 2
87911: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
87912: LD_INT 0
87914: PPUSH
87915: PPUSH
// result := array ;
87916: LD_ADDR_VAR 0 3
87920: PUSH
87921: LD_VAR 0 1
87925: ST_TO_ADDR
// if size >= result then
87926: LD_VAR 0 2
87930: PUSH
87931: LD_VAR 0 3
87935: GREATEREQUAL
87936: IFFALSE 87940
// exit ;
87938: GO 87990
// if size then
87940: LD_VAR 0 2
87944: IFFALSE 87990
// for i := array downto size do
87946: LD_ADDR_VAR 0 4
87950: PUSH
87951: DOUBLE
87952: LD_VAR 0 1
87956: INC
87957: ST_TO_ADDR
87958: LD_VAR 0 2
87962: PUSH
87963: FOR_DOWNTO
87964: IFFALSE 87988
// result := Delete ( result , result ) ;
87966: LD_ADDR_VAR 0 3
87970: PUSH
87971: LD_VAR 0 3
87975: PPUSH
87976: LD_VAR 0 3
87980: PPUSH
87981: CALL_OW 3
87985: ST_TO_ADDR
87986: GO 87963
87988: POP
87989: POP
// end ;
87990: LD_VAR 0 3
87994: RET
// export function ComExit ( unit ) ; var tmp ; begin
87995: LD_INT 0
87997: PPUSH
87998: PPUSH
// if not IsInUnit ( unit ) then
87999: LD_VAR 0 1
88003: PPUSH
88004: CALL_OW 310
88008: NOT
88009: IFFALSE 88013
// exit ;
88011: GO 88073
// tmp := IsInUnit ( unit ) ;
88013: LD_ADDR_VAR 0 3
88017: PUSH
88018: LD_VAR 0 1
88022: PPUSH
88023: CALL_OW 310
88027: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
88028: LD_VAR 0 3
88032: PPUSH
88033: CALL_OW 247
88037: PUSH
88038: LD_INT 2
88040: EQUAL
88041: IFFALSE 88054
// ComExitVehicle ( unit ) else
88043: LD_VAR 0 1
88047: PPUSH
88048: CALL_OW 121
88052: GO 88063
// ComExitBuilding ( unit ) ;
88054: LD_VAR 0 1
88058: PPUSH
88059: CALL_OW 122
// result := tmp ;
88063: LD_ADDR_VAR 0 2
88067: PUSH
88068: LD_VAR 0 3
88072: ST_TO_ADDR
// end ;
88073: LD_VAR 0 2
88077: RET
// export function ComExitAll ( units ) ; var i ; begin
88078: LD_INT 0
88080: PPUSH
88081: PPUSH
// if not units then
88082: LD_VAR 0 1
88086: NOT
88087: IFFALSE 88091
// exit ;
88089: GO 88117
// for i in units do
88091: LD_ADDR_VAR 0 3
88095: PUSH
88096: LD_VAR 0 1
88100: PUSH
88101: FOR_IN
88102: IFFALSE 88115
// ComExit ( i ) ;
88104: LD_VAR 0 3
88108: PPUSH
88109: CALL 87995 0 1
88113: GO 88101
88115: POP
88116: POP
// end ;
88117: LD_VAR 0 2
88121: RET
// export function ResetHc ; begin
88122: LD_INT 0
88124: PPUSH
// InitHc ;
88125: CALL_OW 19
// hc_importance := 0 ;
88129: LD_ADDR_OWVAR 32
88133: PUSH
88134: LD_INT 0
88136: ST_TO_ADDR
// end ;
88137: LD_VAR 0 1
88141: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
88142: LD_INT 0
88144: PPUSH
88145: PPUSH
88146: PPUSH
// _x := ( x1 + x2 ) div 2 ;
88147: LD_ADDR_VAR 0 6
88151: PUSH
88152: LD_VAR 0 1
88156: PUSH
88157: LD_VAR 0 3
88161: PLUS
88162: PUSH
88163: LD_INT 2
88165: DIV
88166: ST_TO_ADDR
// if _x < 0 then
88167: LD_VAR 0 6
88171: PUSH
88172: LD_INT 0
88174: LESS
88175: IFFALSE 88192
// _x := _x * - 1 ;
88177: LD_ADDR_VAR 0 6
88181: PUSH
88182: LD_VAR 0 6
88186: PUSH
88187: LD_INT 1
88189: NEG
88190: MUL
88191: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
88192: LD_ADDR_VAR 0 7
88196: PUSH
88197: LD_VAR 0 2
88201: PUSH
88202: LD_VAR 0 4
88206: PLUS
88207: PUSH
88208: LD_INT 2
88210: DIV
88211: ST_TO_ADDR
// if _y < 0 then
88212: LD_VAR 0 7
88216: PUSH
88217: LD_INT 0
88219: LESS
88220: IFFALSE 88237
// _y := _y * - 1 ;
88222: LD_ADDR_VAR 0 7
88226: PUSH
88227: LD_VAR 0 7
88231: PUSH
88232: LD_INT 1
88234: NEG
88235: MUL
88236: ST_TO_ADDR
// result := [ _x , _y ] ;
88237: LD_ADDR_VAR 0 5
88241: PUSH
88242: LD_VAR 0 6
88246: PUSH
88247: LD_VAR 0 7
88251: PUSH
88252: EMPTY
88253: LIST
88254: LIST
88255: ST_TO_ADDR
// end ;
88256: LD_VAR 0 5
88260: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
88261: LD_INT 0
88263: PPUSH
88264: PPUSH
88265: PPUSH
88266: PPUSH
// task := GetTaskList ( unit ) ;
88267: LD_ADDR_VAR 0 7
88271: PUSH
88272: LD_VAR 0 1
88276: PPUSH
88277: CALL_OW 437
88281: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
88282: LD_VAR 0 7
88286: NOT
88287: PUSH
88288: LD_VAR 0 1
88292: PPUSH
88293: LD_VAR 0 2
88297: PPUSH
88298: CALL_OW 308
88302: NOT
88303: AND
88304: IFFALSE 88308
// exit ;
88306: GO 88426
// if IsInArea ( unit , area ) then
88308: LD_VAR 0 1
88312: PPUSH
88313: LD_VAR 0 2
88317: PPUSH
88318: CALL_OW 308
88322: IFFALSE 88340
// begin ComMoveToArea ( unit , goAway ) ;
88324: LD_VAR 0 1
88328: PPUSH
88329: LD_VAR 0 3
88333: PPUSH
88334: CALL_OW 113
// exit ;
88338: GO 88426
// end ; if task [ 1 ] [ 1 ] <> M then
88340: LD_VAR 0 7
88344: PUSH
88345: LD_INT 1
88347: ARRAY
88348: PUSH
88349: LD_INT 1
88351: ARRAY
88352: PUSH
88353: LD_STRING M
88355: NONEQUAL
88356: IFFALSE 88360
// exit ;
88358: GO 88426
// x := task [ 1 ] [ 2 ] ;
88360: LD_ADDR_VAR 0 5
88364: PUSH
88365: LD_VAR 0 7
88369: PUSH
88370: LD_INT 1
88372: ARRAY
88373: PUSH
88374: LD_INT 2
88376: ARRAY
88377: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
88378: LD_ADDR_VAR 0 6
88382: PUSH
88383: LD_VAR 0 7
88387: PUSH
88388: LD_INT 1
88390: ARRAY
88391: PUSH
88392: LD_INT 3
88394: ARRAY
88395: ST_TO_ADDR
// if InArea ( x , y , area ) then
88396: LD_VAR 0 5
88400: PPUSH
88401: LD_VAR 0 6
88405: PPUSH
88406: LD_VAR 0 2
88410: PPUSH
88411: CALL_OW 309
88415: IFFALSE 88426
// ComStop ( unit ) ;
88417: LD_VAR 0 1
88421: PPUSH
88422: CALL_OW 141
// end ;
88426: LD_VAR 0 4
88430: RET
// export function Abs ( value ) ; begin
88431: LD_INT 0
88433: PPUSH
// result := value ;
88434: LD_ADDR_VAR 0 2
88438: PUSH
88439: LD_VAR 0 1
88443: ST_TO_ADDR
// if value < 0 then
88444: LD_VAR 0 1
88448: PUSH
88449: LD_INT 0
88451: LESS
88452: IFFALSE 88469
// result := value * - 1 ;
88454: LD_ADDR_VAR 0 2
88458: PUSH
88459: LD_VAR 0 1
88463: PUSH
88464: LD_INT 1
88466: NEG
88467: MUL
88468: ST_TO_ADDR
// end ;
88469: LD_VAR 0 2
88473: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
88474: LD_INT 0
88476: PPUSH
88477: PPUSH
88478: PPUSH
88479: PPUSH
88480: PPUSH
88481: PPUSH
88482: PPUSH
88483: PPUSH
// if not unit or not building then
88484: LD_VAR 0 1
88488: NOT
88489: PUSH
88490: LD_VAR 0 2
88494: NOT
88495: OR
88496: IFFALSE 88500
// exit ;
88498: GO 88726
// x := GetX ( building ) ;
88500: LD_ADDR_VAR 0 4
88504: PUSH
88505: LD_VAR 0 2
88509: PPUSH
88510: CALL_OW 250
88514: ST_TO_ADDR
// y := GetY ( building ) ;
88515: LD_ADDR_VAR 0 6
88519: PUSH
88520: LD_VAR 0 2
88524: PPUSH
88525: CALL_OW 251
88529: ST_TO_ADDR
// d := GetDir ( building ) ;
88530: LD_ADDR_VAR 0 8
88534: PUSH
88535: LD_VAR 0 2
88539: PPUSH
88540: CALL_OW 254
88544: ST_TO_ADDR
// r := 4 ;
88545: LD_ADDR_VAR 0 9
88549: PUSH
88550: LD_INT 4
88552: ST_TO_ADDR
// for i := 1 to 5 do
88553: LD_ADDR_VAR 0 10
88557: PUSH
88558: DOUBLE
88559: LD_INT 1
88561: DEC
88562: ST_TO_ADDR
88563: LD_INT 5
88565: PUSH
88566: FOR_TO
88567: IFFALSE 88724
// begin _x := ShiftX ( x , d , r + i ) ;
88569: LD_ADDR_VAR 0 5
88573: PUSH
88574: LD_VAR 0 4
88578: PPUSH
88579: LD_VAR 0 8
88583: PPUSH
88584: LD_VAR 0 9
88588: PUSH
88589: LD_VAR 0 10
88593: PLUS
88594: PPUSH
88595: CALL_OW 272
88599: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
88600: LD_ADDR_VAR 0 7
88604: PUSH
88605: LD_VAR 0 6
88609: PPUSH
88610: LD_VAR 0 8
88614: PPUSH
88615: LD_VAR 0 9
88619: PUSH
88620: LD_VAR 0 10
88624: PLUS
88625: PPUSH
88626: CALL_OW 273
88630: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
88631: LD_VAR 0 5
88635: PPUSH
88636: LD_VAR 0 7
88640: PPUSH
88641: CALL_OW 488
88645: PUSH
88646: LD_VAR 0 5
88650: PPUSH
88651: LD_VAR 0 7
88655: PPUSH
88656: CALL_OW 428
88660: PPUSH
88661: CALL_OW 247
88665: PUSH
88666: LD_INT 3
88668: PUSH
88669: LD_INT 2
88671: PUSH
88672: EMPTY
88673: LIST
88674: LIST
88675: IN
88676: NOT
88677: AND
88678: IFFALSE 88722
// begin ComMoveXY ( unit , _x , _y ) ;
88680: LD_VAR 0 1
88684: PPUSH
88685: LD_VAR 0 5
88689: PPUSH
88690: LD_VAR 0 7
88694: PPUSH
88695: CALL_OW 111
// result := [ _x , _y ] ;
88699: LD_ADDR_VAR 0 3
88703: PUSH
88704: LD_VAR 0 5
88708: PUSH
88709: LD_VAR 0 7
88713: PUSH
88714: EMPTY
88715: LIST
88716: LIST
88717: ST_TO_ADDR
// exit ;
88718: POP
88719: POP
88720: GO 88726
// end ; end ;
88722: GO 88566
88724: POP
88725: POP
// end ;
88726: LD_VAR 0 3
88730: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
88731: LD_INT 0
88733: PPUSH
88734: PPUSH
88735: PPUSH
// result := 0 ;
88736: LD_ADDR_VAR 0 3
88740: PUSH
88741: LD_INT 0
88743: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
88744: LD_VAR 0 1
88748: PUSH
88749: LD_INT 0
88751: LESS
88752: PUSH
88753: LD_VAR 0 1
88757: PUSH
88758: LD_INT 8
88760: GREATER
88761: OR
88762: PUSH
88763: LD_VAR 0 2
88767: PUSH
88768: LD_INT 0
88770: LESS
88771: OR
88772: PUSH
88773: LD_VAR 0 2
88777: PUSH
88778: LD_INT 8
88780: GREATER
88781: OR
88782: IFFALSE 88786
// exit ;
88784: GO 88861
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
88786: LD_ADDR_VAR 0 4
88790: PUSH
88791: LD_INT 22
88793: PUSH
88794: LD_VAR 0 2
88798: PUSH
88799: EMPTY
88800: LIST
88801: LIST
88802: PPUSH
88803: CALL_OW 69
88807: PUSH
88808: FOR_IN
88809: IFFALSE 88859
// begin un := UnitShoot ( i ) ;
88811: LD_ADDR_VAR 0 5
88815: PUSH
88816: LD_VAR 0 4
88820: PPUSH
88821: CALL_OW 504
88825: ST_TO_ADDR
// if GetSide ( un ) = side1 then
88826: LD_VAR 0 5
88830: PPUSH
88831: CALL_OW 255
88835: PUSH
88836: LD_VAR 0 1
88840: EQUAL
88841: IFFALSE 88857
// begin result := un ;
88843: LD_ADDR_VAR 0 3
88847: PUSH
88848: LD_VAR 0 5
88852: ST_TO_ADDR
// exit ;
88853: POP
88854: POP
88855: GO 88861
// end ; end ;
88857: GO 88808
88859: POP
88860: POP
// end ;
88861: LD_VAR 0 3
88865: RET
// export function GetCargoBay ( units ) ; begin
88866: LD_INT 0
88868: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
88869: LD_ADDR_VAR 0 2
88873: PUSH
88874: LD_VAR 0 1
88878: PPUSH
88879: LD_INT 2
88881: PUSH
88882: LD_INT 34
88884: PUSH
88885: LD_INT 12
88887: PUSH
88888: EMPTY
88889: LIST
88890: LIST
88891: PUSH
88892: LD_INT 34
88894: PUSH
88895: LD_INT 51
88897: PUSH
88898: EMPTY
88899: LIST
88900: LIST
88901: PUSH
88902: LD_INT 34
88904: PUSH
88905: LD_INT 32
88907: PUSH
88908: EMPTY
88909: LIST
88910: LIST
88911: PUSH
88912: LD_INT 34
88914: PUSH
88915: LD_INT 89
88917: PUSH
88918: EMPTY
88919: LIST
88920: LIST
88921: PUSH
88922: EMPTY
88923: LIST
88924: LIST
88925: LIST
88926: LIST
88927: LIST
88928: PPUSH
88929: CALL_OW 72
88933: ST_TO_ADDR
// end ;
88934: LD_VAR 0 2
88938: RET
// export function Negate ( value ) ; begin
88939: LD_INT 0
88941: PPUSH
// result := not value ;
88942: LD_ADDR_VAR 0 2
88946: PUSH
88947: LD_VAR 0 1
88951: NOT
88952: ST_TO_ADDR
// end ;
88953: LD_VAR 0 2
88957: RET
// export function Inc ( value ) ; begin
88958: LD_INT 0
88960: PPUSH
// result := value + 1 ;
88961: LD_ADDR_VAR 0 2
88965: PUSH
88966: LD_VAR 0 1
88970: PUSH
88971: LD_INT 1
88973: PLUS
88974: ST_TO_ADDR
// end ;
88975: LD_VAR 0 2
88979: RET
// export function Dec ( value ) ; begin
88980: LD_INT 0
88982: PPUSH
// result := value - 1 ;
88983: LD_ADDR_VAR 0 2
88987: PUSH
88988: LD_VAR 0 1
88992: PUSH
88993: LD_INT 1
88995: MINUS
88996: ST_TO_ADDR
// end ;
88997: LD_VAR 0 2
89001: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
89002: LD_INT 0
89004: PPUSH
89005: PPUSH
89006: PPUSH
89007: PPUSH
89008: PPUSH
89009: PPUSH
89010: PPUSH
89011: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
89012: LD_VAR 0 1
89016: PPUSH
89017: LD_VAR 0 2
89021: PPUSH
89022: CALL_OW 488
89026: NOT
89027: PUSH
89028: LD_VAR 0 3
89032: PPUSH
89033: LD_VAR 0 4
89037: PPUSH
89038: CALL_OW 488
89042: NOT
89043: OR
89044: IFFALSE 89057
// begin result := - 1 ;
89046: LD_ADDR_VAR 0 5
89050: PUSH
89051: LD_INT 1
89053: NEG
89054: ST_TO_ADDR
// exit ;
89055: GO 89292
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
89057: LD_ADDR_VAR 0 12
89061: PUSH
89062: LD_VAR 0 1
89066: PPUSH
89067: LD_VAR 0 2
89071: PPUSH
89072: LD_VAR 0 3
89076: PPUSH
89077: LD_VAR 0 4
89081: PPUSH
89082: CALL 88142 0 4
89086: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
89087: LD_ADDR_VAR 0 11
89091: PUSH
89092: LD_VAR 0 1
89096: PPUSH
89097: LD_VAR 0 2
89101: PPUSH
89102: LD_VAR 0 12
89106: PUSH
89107: LD_INT 1
89109: ARRAY
89110: PPUSH
89111: LD_VAR 0 12
89115: PUSH
89116: LD_INT 2
89118: ARRAY
89119: PPUSH
89120: CALL_OW 298
89124: ST_TO_ADDR
// distance := 9999 ;
89125: LD_ADDR_VAR 0 10
89129: PUSH
89130: LD_INT 9999
89132: ST_TO_ADDR
// for i := 0 to 5 do
89133: LD_ADDR_VAR 0 6
89137: PUSH
89138: DOUBLE
89139: LD_INT 0
89141: DEC
89142: ST_TO_ADDR
89143: LD_INT 5
89145: PUSH
89146: FOR_TO
89147: IFFALSE 89290
// begin _x := ShiftX ( x1 , i , centerDist ) ;
89149: LD_ADDR_VAR 0 7
89153: PUSH
89154: LD_VAR 0 1
89158: PPUSH
89159: LD_VAR 0 6
89163: PPUSH
89164: LD_VAR 0 11
89168: PPUSH
89169: CALL_OW 272
89173: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
89174: LD_ADDR_VAR 0 8
89178: PUSH
89179: LD_VAR 0 2
89183: PPUSH
89184: LD_VAR 0 6
89188: PPUSH
89189: LD_VAR 0 11
89193: PPUSH
89194: CALL_OW 273
89198: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
89199: LD_VAR 0 7
89203: PPUSH
89204: LD_VAR 0 8
89208: PPUSH
89209: CALL_OW 488
89213: NOT
89214: IFFALSE 89218
// continue ;
89216: GO 89146
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
89218: LD_ADDR_VAR 0 9
89222: PUSH
89223: LD_VAR 0 12
89227: PUSH
89228: LD_INT 1
89230: ARRAY
89231: PPUSH
89232: LD_VAR 0 12
89236: PUSH
89237: LD_INT 2
89239: ARRAY
89240: PPUSH
89241: LD_VAR 0 7
89245: PPUSH
89246: LD_VAR 0 8
89250: PPUSH
89251: CALL_OW 298
89255: ST_TO_ADDR
// if tmp < distance then
89256: LD_VAR 0 9
89260: PUSH
89261: LD_VAR 0 10
89265: LESS
89266: IFFALSE 89288
// begin result := i ;
89268: LD_ADDR_VAR 0 5
89272: PUSH
89273: LD_VAR 0 6
89277: ST_TO_ADDR
// distance := tmp ;
89278: LD_ADDR_VAR 0 10
89282: PUSH
89283: LD_VAR 0 9
89287: ST_TO_ADDR
// end ; end ;
89288: GO 89146
89290: POP
89291: POP
// end ;
89292: LD_VAR 0 5
89296: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
89297: LD_INT 0
89299: PPUSH
89300: PPUSH
// if not driver or not IsInUnit ( driver ) then
89301: LD_VAR 0 1
89305: NOT
89306: PUSH
89307: LD_VAR 0 1
89311: PPUSH
89312: CALL_OW 310
89316: NOT
89317: OR
89318: IFFALSE 89322
// exit ;
89320: GO 89412
// vehicle := IsInUnit ( driver ) ;
89322: LD_ADDR_VAR 0 3
89326: PUSH
89327: LD_VAR 0 1
89331: PPUSH
89332: CALL_OW 310
89336: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
89337: LD_VAR 0 1
89341: PPUSH
89342: LD_STRING \
89344: PUSH
89345: LD_INT 0
89347: PUSH
89348: LD_INT 0
89350: PUSH
89351: LD_INT 0
89353: PUSH
89354: LD_INT 0
89356: PUSH
89357: LD_INT 0
89359: PUSH
89360: LD_INT 0
89362: PUSH
89363: EMPTY
89364: LIST
89365: LIST
89366: LIST
89367: LIST
89368: LIST
89369: LIST
89370: LIST
89371: PUSH
89372: LD_STRING E
89374: PUSH
89375: LD_INT 0
89377: PUSH
89378: LD_INT 0
89380: PUSH
89381: LD_VAR 0 3
89385: PUSH
89386: LD_INT 0
89388: PUSH
89389: LD_INT 0
89391: PUSH
89392: LD_INT 0
89394: PUSH
89395: EMPTY
89396: LIST
89397: LIST
89398: LIST
89399: LIST
89400: LIST
89401: LIST
89402: LIST
89403: PUSH
89404: EMPTY
89405: LIST
89406: LIST
89407: PPUSH
89408: CALL_OW 446
// end ;
89412: LD_VAR 0 2
89416: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
89417: LD_INT 0
89419: PPUSH
89420: PPUSH
// if not driver or not IsInUnit ( driver ) then
89421: LD_VAR 0 1
89425: NOT
89426: PUSH
89427: LD_VAR 0 1
89431: PPUSH
89432: CALL_OW 310
89436: NOT
89437: OR
89438: IFFALSE 89442
// exit ;
89440: GO 89532
// vehicle := IsInUnit ( driver ) ;
89442: LD_ADDR_VAR 0 3
89446: PUSH
89447: LD_VAR 0 1
89451: PPUSH
89452: CALL_OW 310
89456: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
89457: LD_VAR 0 1
89461: PPUSH
89462: LD_STRING \
89464: PUSH
89465: LD_INT 0
89467: PUSH
89468: LD_INT 0
89470: PUSH
89471: LD_INT 0
89473: PUSH
89474: LD_INT 0
89476: PUSH
89477: LD_INT 0
89479: PUSH
89480: LD_INT 0
89482: PUSH
89483: EMPTY
89484: LIST
89485: LIST
89486: LIST
89487: LIST
89488: LIST
89489: LIST
89490: LIST
89491: PUSH
89492: LD_STRING E
89494: PUSH
89495: LD_INT 0
89497: PUSH
89498: LD_INT 0
89500: PUSH
89501: LD_VAR 0 3
89505: PUSH
89506: LD_INT 0
89508: PUSH
89509: LD_INT 0
89511: PUSH
89512: LD_INT 0
89514: PUSH
89515: EMPTY
89516: LIST
89517: LIST
89518: LIST
89519: LIST
89520: LIST
89521: LIST
89522: LIST
89523: PUSH
89524: EMPTY
89525: LIST
89526: LIST
89527: PPUSH
89528: CALL_OW 447
// end ;
89532: LD_VAR 0 2
89536: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
89537: LD_INT 0
89539: PPUSH
89540: PPUSH
89541: PPUSH
// tmp := [ ] ;
89542: LD_ADDR_VAR 0 5
89546: PUSH
89547: EMPTY
89548: ST_TO_ADDR
// for i in units do
89549: LD_ADDR_VAR 0 4
89553: PUSH
89554: LD_VAR 0 1
89558: PUSH
89559: FOR_IN
89560: IFFALSE 89598
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
89562: LD_ADDR_VAR 0 5
89566: PUSH
89567: LD_VAR 0 5
89571: PPUSH
89572: LD_VAR 0 5
89576: PUSH
89577: LD_INT 1
89579: PLUS
89580: PPUSH
89581: LD_VAR 0 4
89585: PPUSH
89586: CALL_OW 256
89590: PPUSH
89591: CALL_OW 2
89595: ST_TO_ADDR
89596: GO 89559
89598: POP
89599: POP
// if not tmp then
89600: LD_VAR 0 5
89604: NOT
89605: IFFALSE 89609
// exit ;
89607: GO 89657
// if asc then
89609: LD_VAR 0 2
89613: IFFALSE 89637
// result := SortListByListAsc ( units , tmp ) else
89615: LD_ADDR_VAR 0 3
89619: PUSH
89620: LD_VAR 0 1
89624: PPUSH
89625: LD_VAR 0 5
89629: PPUSH
89630: CALL_OW 76
89634: ST_TO_ADDR
89635: GO 89657
// result := SortListByListDesc ( units , tmp ) ;
89637: LD_ADDR_VAR 0 3
89641: PUSH
89642: LD_VAR 0 1
89646: PPUSH
89647: LD_VAR 0 5
89651: PPUSH
89652: CALL_OW 77
89656: ST_TO_ADDR
// end ;
89657: LD_VAR 0 3
89661: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
89662: LD_INT 0
89664: PPUSH
89665: PPUSH
// task := GetTaskList ( mech ) ;
89666: LD_ADDR_VAR 0 4
89670: PUSH
89671: LD_VAR 0 1
89675: PPUSH
89676: CALL_OW 437
89680: ST_TO_ADDR
// if not task then
89681: LD_VAR 0 4
89685: NOT
89686: IFFALSE 89690
// exit ;
89688: GO 89732
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
89690: LD_ADDR_VAR 0 3
89694: PUSH
89695: LD_VAR 0 4
89699: PUSH
89700: LD_INT 1
89702: ARRAY
89703: PUSH
89704: LD_INT 1
89706: ARRAY
89707: PUSH
89708: LD_STRING r
89710: EQUAL
89711: PUSH
89712: LD_VAR 0 4
89716: PUSH
89717: LD_INT 1
89719: ARRAY
89720: PUSH
89721: LD_INT 4
89723: ARRAY
89724: PUSH
89725: LD_VAR 0 2
89729: EQUAL
89730: AND
89731: ST_TO_ADDR
// end ;
89732: LD_VAR 0 3
89736: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
89737: LD_INT 0
89739: PPUSH
// SetDir ( unit , d ) ;
89740: LD_VAR 0 1
89744: PPUSH
89745: LD_VAR 0 4
89749: PPUSH
89750: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
89754: LD_VAR 0 1
89758: PPUSH
89759: LD_VAR 0 2
89763: PPUSH
89764: LD_VAR 0 3
89768: PPUSH
89769: LD_VAR 0 5
89773: PPUSH
89774: CALL_OW 48
// end ;
89778: LD_VAR 0 6
89782: RET
// export function ToNaturalNumber ( number ) ; begin
89783: LD_INT 0
89785: PPUSH
// result := number div 1 ;
89786: LD_ADDR_VAR 0 2
89790: PUSH
89791: LD_VAR 0 1
89795: PUSH
89796: LD_INT 1
89798: DIV
89799: ST_TO_ADDR
// if number < 0 then
89800: LD_VAR 0 1
89804: PUSH
89805: LD_INT 0
89807: LESS
89808: IFFALSE 89818
// result := 0 ;
89810: LD_ADDR_VAR 0 2
89814: PUSH
89815: LD_INT 0
89817: ST_TO_ADDR
// end ;
89818: LD_VAR 0 2
89822: RET
// export function SortByClass ( units , class ) ; var un ; begin
89823: LD_INT 0
89825: PPUSH
89826: PPUSH
// if not units or not class then
89827: LD_VAR 0 1
89831: NOT
89832: PUSH
89833: LD_VAR 0 2
89837: NOT
89838: OR
89839: IFFALSE 89843
// exit ;
89841: GO 89938
// result := [ ] ;
89843: LD_ADDR_VAR 0 3
89847: PUSH
89848: EMPTY
89849: ST_TO_ADDR
// for un in units do
89850: LD_ADDR_VAR 0 4
89854: PUSH
89855: LD_VAR 0 1
89859: PUSH
89860: FOR_IN
89861: IFFALSE 89936
// if GetClass ( un ) = class then
89863: LD_VAR 0 4
89867: PPUSH
89868: CALL_OW 257
89872: PUSH
89873: LD_VAR 0 2
89877: EQUAL
89878: IFFALSE 89905
// result := Insert ( result , 1 , un ) else
89880: LD_ADDR_VAR 0 3
89884: PUSH
89885: LD_VAR 0 3
89889: PPUSH
89890: LD_INT 1
89892: PPUSH
89893: LD_VAR 0 4
89897: PPUSH
89898: CALL_OW 2
89902: ST_TO_ADDR
89903: GO 89934
// result := Replace ( result , result + 1 , un ) ;
89905: LD_ADDR_VAR 0 3
89909: PUSH
89910: LD_VAR 0 3
89914: PPUSH
89915: LD_VAR 0 3
89919: PUSH
89920: LD_INT 1
89922: PLUS
89923: PPUSH
89924: LD_VAR 0 4
89928: PPUSH
89929: CALL_OW 1
89933: ST_TO_ADDR
89934: GO 89860
89936: POP
89937: POP
// end ;
89938: LD_VAR 0 3
89942: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
89943: LD_INT 0
89945: PPUSH
89946: PPUSH
89947: PPUSH
89948: PPUSH
89949: PPUSH
89950: PPUSH
89951: PPUSH
// result := [ ] ;
89952: LD_ADDR_VAR 0 4
89956: PUSH
89957: EMPTY
89958: ST_TO_ADDR
// if x - r < 0 then
89959: LD_VAR 0 1
89963: PUSH
89964: LD_VAR 0 3
89968: MINUS
89969: PUSH
89970: LD_INT 0
89972: LESS
89973: IFFALSE 89985
// min_x := 0 else
89975: LD_ADDR_VAR 0 8
89979: PUSH
89980: LD_INT 0
89982: ST_TO_ADDR
89983: GO 90001
// min_x := x - r ;
89985: LD_ADDR_VAR 0 8
89989: PUSH
89990: LD_VAR 0 1
89994: PUSH
89995: LD_VAR 0 3
89999: MINUS
90000: ST_TO_ADDR
// if y - r < 0 then
90001: LD_VAR 0 2
90005: PUSH
90006: LD_VAR 0 3
90010: MINUS
90011: PUSH
90012: LD_INT 0
90014: LESS
90015: IFFALSE 90027
// min_y := 0 else
90017: LD_ADDR_VAR 0 7
90021: PUSH
90022: LD_INT 0
90024: ST_TO_ADDR
90025: GO 90043
// min_y := y - r ;
90027: LD_ADDR_VAR 0 7
90031: PUSH
90032: LD_VAR 0 2
90036: PUSH
90037: LD_VAR 0 3
90041: MINUS
90042: ST_TO_ADDR
// max_x := x + r ;
90043: LD_ADDR_VAR 0 9
90047: PUSH
90048: LD_VAR 0 1
90052: PUSH
90053: LD_VAR 0 3
90057: PLUS
90058: ST_TO_ADDR
// max_y := y + r ;
90059: LD_ADDR_VAR 0 10
90063: PUSH
90064: LD_VAR 0 2
90068: PUSH
90069: LD_VAR 0 3
90073: PLUS
90074: ST_TO_ADDR
// for _x = min_x to max_x do
90075: LD_ADDR_VAR 0 5
90079: PUSH
90080: DOUBLE
90081: LD_VAR 0 8
90085: DEC
90086: ST_TO_ADDR
90087: LD_VAR 0 9
90091: PUSH
90092: FOR_TO
90093: IFFALSE 90194
// for _y = min_y to max_y do
90095: LD_ADDR_VAR 0 6
90099: PUSH
90100: DOUBLE
90101: LD_VAR 0 7
90105: DEC
90106: ST_TO_ADDR
90107: LD_VAR 0 10
90111: PUSH
90112: FOR_TO
90113: IFFALSE 90190
// begin if not ValidHex ( _x , _y ) then
90115: LD_VAR 0 5
90119: PPUSH
90120: LD_VAR 0 6
90124: PPUSH
90125: CALL_OW 488
90129: NOT
90130: IFFALSE 90134
// continue ;
90132: GO 90112
// if GetResourceTypeXY ( _x , _y ) then
90134: LD_VAR 0 5
90138: PPUSH
90139: LD_VAR 0 6
90143: PPUSH
90144: CALL_OW 283
90148: IFFALSE 90188
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
90150: LD_ADDR_VAR 0 4
90154: PUSH
90155: LD_VAR 0 4
90159: PPUSH
90160: LD_VAR 0 4
90164: PUSH
90165: LD_INT 1
90167: PLUS
90168: PPUSH
90169: LD_VAR 0 5
90173: PUSH
90174: LD_VAR 0 6
90178: PUSH
90179: EMPTY
90180: LIST
90181: LIST
90182: PPUSH
90183: CALL_OW 1
90187: ST_TO_ADDR
// end ;
90188: GO 90112
90190: POP
90191: POP
90192: GO 90092
90194: POP
90195: POP
// end ;
90196: LD_VAR 0 4
90200: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
90201: LD_INT 0
90203: PPUSH
90204: PPUSH
90205: PPUSH
90206: PPUSH
90207: PPUSH
90208: PPUSH
90209: PPUSH
90210: PPUSH
// if not units then
90211: LD_VAR 0 1
90215: NOT
90216: IFFALSE 90220
// exit ;
90218: GO 90744
// result := UnitFilter ( units , [ f_ok ] ) ;
90220: LD_ADDR_VAR 0 3
90224: PUSH
90225: LD_VAR 0 1
90229: PPUSH
90230: LD_INT 50
90232: PUSH
90233: EMPTY
90234: LIST
90235: PPUSH
90236: CALL_OW 72
90240: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
90241: LD_ADDR_VAR 0 8
90245: PUSH
90246: LD_VAR 0 1
90250: PUSH
90251: LD_INT 1
90253: ARRAY
90254: PPUSH
90255: CALL_OW 255
90259: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
90260: LD_ADDR_VAR 0 10
90264: PUSH
90265: LD_INT 29
90267: PUSH
90268: LD_INT 91
90270: PUSH
90271: LD_INT 49
90273: PUSH
90274: EMPTY
90275: LIST
90276: LIST
90277: LIST
90278: ST_TO_ADDR
// if not result then
90279: LD_VAR 0 3
90283: NOT
90284: IFFALSE 90288
// exit ;
90286: GO 90744
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
90288: LD_ADDR_VAR 0 5
90292: PUSH
90293: LD_INT 81
90295: PUSH
90296: LD_VAR 0 8
90300: PUSH
90301: EMPTY
90302: LIST
90303: LIST
90304: PPUSH
90305: CALL_OW 69
90309: ST_TO_ADDR
// for i in result do
90310: LD_ADDR_VAR 0 4
90314: PUSH
90315: LD_VAR 0 3
90319: PUSH
90320: FOR_IN
90321: IFFALSE 90742
// begin tag := GetTag ( i ) + 1 ;
90323: LD_ADDR_VAR 0 9
90327: PUSH
90328: LD_VAR 0 4
90332: PPUSH
90333: CALL_OW 110
90337: PUSH
90338: LD_INT 1
90340: PLUS
90341: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
90342: LD_ADDR_VAR 0 7
90346: PUSH
90347: LD_VAR 0 4
90351: PPUSH
90352: CALL_OW 250
90356: PPUSH
90357: LD_VAR 0 4
90361: PPUSH
90362: CALL_OW 251
90366: PPUSH
90367: LD_INT 6
90369: PPUSH
90370: CALL 89943 0 3
90374: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
90375: LD_VAR 0 4
90379: PPUSH
90380: CALL_OW 247
90384: PUSH
90385: LD_INT 2
90387: EQUAL
90388: PUSH
90389: LD_VAR 0 7
90393: AND
90394: PUSH
90395: LD_VAR 0 4
90399: PPUSH
90400: CALL_OW 264
90404: PUSH
90405: LD_VAR 0 10
90409: IN
90410: NOT
90411: AND
90412: IFFALSE 90451
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
90414: LD_VAR 0 4
90418: PPUSH
90419: LD_VAR 0 7
90423: PUSH
90424: LD_INT 1
90426: ARRAY
90427: PUSH
90428: LD_INT 1
90430: ARRAY
90431: PPUSH
90432: LD_VAR 0 7
90436: PUSH
90437: LD_INT 1
90439: ARRAY
90440: PUSH
90441: LD_INT 2
90443: ARRAY
90444: PPUSH
90445: CALL_OW 116
90449: GO 90740
// if path > tag then
90451: LD_VAR 0 2
90455: PUSH
90456: LD_VAR 0 9
90460: GREATER
90461: IFFALSE 90669
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
90463: LD_ADDR_VAR 0 6
90467: PUSH
90468: LD_VAR 0 5
90472: PPUSH
90473: LD_INT 91
90475: PUSH
90476: LD_VAR 0 4
90480: PUSH
90481: LD_INT 8
90483: PUSH
90484: EMPTY
90485: LIST
90486: LIST
90487: LIST
90488: PPUSH
90489: CALL_OW 72
90493: ST_TO_ADDR
// if nearEnemy then
90494: LD_VAR 0 6
90498: IFFALSE 90567
// begin if GetWeapon ( i ) = ru_time_lapser then
90500: LD_VAR 0 4
90504: PPUSH
90505: CALL_OW 264
90509: PUSH
90510: LD_INT 49
90512: EQUAL
90513: IFFALSE 90541
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
90515: LD_VAR 0 4
90519: PPUSH
90520: LD_VAR 0 6
90524: PPUSH
90525: LD_VAR 0 4
90529: PPUSH
90530: CALL_OW 74
90534: PPUSH
90535: CALL_OW 112
90539: GO 90565
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
90541: LD_VAR 0 4
90545: PPUSH
90546: LD_VAR 0 6
90550: PPUSH
90551: LD_VAR 0 4
90555: PPUSH
90556: CALL_OW 74
90560: PPUSH
90561: CALL_OW 115
// end else
90565: GO 90667
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
90567: LD_VAR 0 4
90571: PPUSH
90572: LD_VAR 0 2
90576: PUSH
90577: LD_VAR 0 9
90581: ARRAY
90582: PUSH
90583: LD_INT 1
90585: ARRAY
90586: PPUSH
90587: LD_VAR 0 2
90591: PUSH
90592: LD_VAR 0 9
90596: ARRAY
90597: PUSH
90598: LD_INT 2
90600: ARRAY
90601: PPUSH
90602: CALL_OW 297
90606: PUSH
90607: LD_INT 6
90609: GREATER
90610: IFFALSE 90653
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
90612: LD_VAR 0 4
90616: PPUSH
90617: LD_VAR 0 2
90621: PUSH
90622: LD_VAR 0 9
90626: ARRAY
90627: PUSH
90628: LD_INT 1
90630: ARRAY
90631: PPUSH
90632: LD_VAR 0 2
90636: PUSH
90637: LD_VAR 0 9
90641: ARRAY
90642: PUSH
90643: LD_INT 2
90645: ARRAY
90646: PPUSH
90647: CALL_OW 114
90651: GO 90667
// SetTag ( i , tag ) ;
90653: LD_VAR 0 4
90657: PPUSH
90658: LD_VAR 0 9
90662: PPUSH
90663: CALL_OW 109
// end else
90667: GO 90740
// if enemy then
90669: LD_VAR 0 5
90673: IFFALSE 90740
// begin if GetWeapon ( i ) = ru_time_lapser then
90675: LD_VAR 0 4
90679: PPUSH
90680: CALL_OW 264
90684: PUSH
90685: LD_INT 49
90687: EQUAL
90688: IFFALSE 90716
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
90690: LD_VAR 0 4
90694: PPUSH
90695: LD_VAR 0 5
90699: PPUSH
90700: LD_VAR 0 4
90704: PPUSH
90705: CALL_OW 74
90709: PPUSH
90710: CALL_OW 112
90714: GO 90740
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
90716: LD_VAR 0 4
90720: PPUSH
90721: LD_VAR 0 5
90725: PPUSH
90726: LD_VAR 0 4
90730: PPUSH
90731: CALL_OW 74
90735: PPUSH
90736: CALL_OW 115
// end ; end ;
90740: GO 90320
90742: POP
90743: POP
// end ;
90744: LD_VAR 0 3
90748: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
90749: LD_INT 0
90751: PPUSH
90752: PPUSH
90753: PPUSH
// if not unit or IsInUnit ( unit ) then
90754: LD_VAR 0 1
90758: NOT
90759: PUSH
90760: LD_VAR 0 1
90764: PPUSH
90765: CALL_OW 310
90769: OR
90770: IFFALSE 90774
// exit ;
90772: GO 90865
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
90774: LD_ADDR_VAR 0 4
90778: PUSH
90779: LD_VAR 0 1
90783: PPUSH
90784: CALL_OW 250
90788: PPUSH
90789: LD_VAR 0 2
90793: PPUSH
90794: LD_INT 1
90796: PPUSH
90797: CALL_OW 272
90801: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
90802: LD_ADDR_VAR 0 5
90806: PUSH
90807: LD_VAR 0 1
90811: PPUSH
90812: CALL_OW 251
90816: PPUSH
90817: LD_VAR 0 2
90821: PPUSH
90822: LD_INT 1
90824: PPUSH
90825: CALL_OW 273
90829: ST_TO_ADDR
// if ValidHex ( x , y ) then
90830: LD_VAR 0 4
90834: PPUSH
90835: LD_VAR 0 5
90839: PPUSH
90840: CALL_OW 488
90844: IFFALSE 90865
// ComTurnXY ( unit , x , y ) ;
90846: LD_VAR 0 1
90850: PPUSH
90851: LD_VAR 0 4
90855: PPUSH
90856: LD_VAR 0 5
90860: PPUSH
90861: CALL_OW 118
// end ;
90865: LD_VAR 0 3
90869: RET
// export function SeeUnits ( side , units ) ; var i ; begin
90870: LD_INT 0
90872: PPUSH
90873: PPUSH
// result := false ;
90874: LD_ADDR_VAR 0 3
90878: PUSH
90879: LD_INT 0
90881: ST_TO_ADDR
// if not units then
90882: LD_VAR 0 2
90886: NOT
90887: IFFALSE 90891
// exit ;
90889: GO 90936
// for i in units do
90891: LD_ADDR_VAR 0 4
90895: PUSH
90896: LD_VAR 0 2
90900: PUSH
90901: FOR_IN
90902: IFFALSE 90934
// if See ( side , i ) then
90904: LD_VAR 0 1
90908: PPUSH
90909: LD_VAR 0 4
90913: PPUSH
90914: CALL_OW 292
90918: IFFALSE 90932
// begin result := true ;
90920: LD_ADDR_VAR 0 3
90924: PUSH
90925: LD_INT 1
90927: ST_TO_ADDR
// exit ;
90928: POP
90929: POP
90930: GO 90936
// end ;
90932: GO 90901
90934: POP
90935: POP
// end ;
90936: LD_VAR 0 3
90940: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
90941: LD_INT 0
90943: PPUSH
90944: PPUSH
90945: PPUSH
90946: PPUSH
// if not unit or not points then
90947: LD_VAR 0 1
90951: NOT
90952: PUSH
90953: LD_VAR 0 2
90957: NOT
90958: OR
90959: IFFALSE 90963
// exit ;
90961: GO 91053
// dist := 99999 ;
90963: LD_ADDR_VAR 0 5
90967: PUSH
90968: LD_INT 99999
90970: ST_TO_ADDR
// for i in points do
90971: LD_ADDR_VAR 0 4
90975: PUSH
90976: LD_VAR 0 2
90980: PUSH
90981: FOR_IN
90982: IFFALSE 91051
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
90984: LD_ADDR_VAR 0 6
90988: PUSH
90989: LD_VAR 0 1
90993: PPUSH
90994: LD_VAR 0 4
90998: PUSH
90999: LD_INT 1
91001: ARRAY
91002: PPUSH
91003: LD_VAR 0 4
91007: PUSH
91008: LD_INT 2
91010: ARRAY
91011: PPUSH
91012: CALL_OW 297
91016: ST_TO_ADDR
// if tmpDist < dist then
91017: LD_VAR 0 6
91021: PUSH
91022: LD_VAR 0 5
91026: LESS
91027: IFFALSE 91049
// begin result := i ;
91029: LD_ADDR_VAR 0 3
91033: PUSH
91034: LD_VAR 0 4
91038: ST_TO_ADDR
// dist := tmpDist ;
91039: LD_ADDR_VAR 0 5
91043: PUSH
91044: LD_VAR 0 6
91048: ST_TO_ADDR
// end ; end ;
91049: GO 90981
91051: POP
91052: POP
// end ;
91053: LD_VAR 0 3
91057: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
91058: LD_INT 0
91060: PPUSH
// uc_side := side ;
91061: LD_ADDR_OWVAR 20
91065: PUSH
91066: LD_VAR 0 1
91070: ST_TO_ADDR
// uc_nation := 3 ;
91071: LD_ADDR_OWVAR 21
91075: PUSH
91076: LD_INT 3
91078: ST_TO_ADDR
// vc_chassis := 25 ;
91079: LD_ADDR_OWVAR 37
91083: PUSH
91084: LD_INT 25
91086: ST_TO_ADDR
// vc_engine := engine_siberite ;
91087: LD_ADDR_OWVAR 39
91091: PUSH
91092: LD_INT 3
91094: ST_TO_ADDR
// vc_control := control_computer ;
91095: LD_ADDR_OWVAR 38
91099: PUSH
91100: LD_INT 3
91102: ST_TO_ADDR
// vc_weapon := 59 ;
91103: LD_ADDR_OWVAR 40
91107: PUSH
91108: LD_INT 59
91110: ST_TO_ADDR
// result := CreateVehicle ;
91111: LD_ADDR_VAR 0 5
91115: PUSH
91116: CALL_OW 45
91120: ST_TO_ADDR
// SetDir ( result , d ) ;
91121: LD_VAR 0 5
91125: PPUSH
91126: LD_VAR 0 4
91130: PPUSH
91131: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
91135: LD_VAR 0 5
91139: PPUSH
91140: LD_VAR 0 2
91144: PPUSH
91145: LD_VAR 0 3
91149: PPUSH
91150: LD_INT 0
91152: PPUSH
91153: CALL_OW 48
// end ;
91157: LD_VAR 0 5
91161: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
91162: LD_INT 0
91164: PPUSH
91165: PPUSH
91166: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
91167: LD_ADDR_VAR 0 2
91171: PUSH
91172: LD_INT 0
91174: PUSH
91175: LD_INT 0
91177: PUSH
91178: LD_INT 0
91180: PUSH
91181: LD_INT 0
91183: PUSH
91184: EMPTY
91185: LIST
91186: LIST
91187: LIST
91188: LIST
91189: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
91190: LD_VAR 0 1
91194: NOT
91195: PUSH
91196: LD_VAR 0 1
91200: PPUSH
91201: CALL_OW 264
91205: PUSH
91206: LD_INT 12
91208: PUSH
91209: LD_INT 51
91211: PUSH
91212: LD_INT 32
91214: PUSH
91215: LD_INT 89
91217: PUSH
91218: EMPTY
91219: LIST
91220: LIST
91221: LIST
91222: LIST
91223: IN
91224: NOT
91225: OR
91226: IFFALSE 91230
// exit ;
91228: GO 91328
// for i := 1 to 3 do
91230: LD_ADDR_VAR 0 3
91234: PUSH
91235: DOUBLE
91236: LD_INT 1
91238: DEC
91239: ST_TO_ADDR
91240: LD_INT 3
91242: PUSH
91243: FOR_TO
91244: IFFALSE 91326
// begin tmp := GetCargo ( cargo , i ) ;
91246: LD_ADDR_VAR 0 4
91250: PUSH
91251: LD_VAR 0 1
91255: PPUSH
91256: LD_VAR 0 3
91260: PPUSH
91261: CALL_OW 289
91265: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
91266: LD_ADDR_VAR 0 2
91270: PUSH
91271: LD_VAR 0 2
91275: PPUSH
91276: LD_VAR 0 3
91280: PPUSH
91281: LD_VAR 0 4
91285: PPUSH
91286: CALL_OW 1
91290: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
91291: LD_ADDR_VAR 0 2
91295: PUSH
91296: LD_VAR 0 2
91300: PPUSH
91301: LD_INT 4
91303: PPUSH
91304: LD_VAR 0 2
91308: PUSH
91309: LD_INT 4
91311: ARRAY
91312: PUSH
91313: LD_VAR 0 4
91317: PLUS
91318: PPUSH
91319: CALL_OW 1
91323: ST_TO_ADDR
// end ;
91324: GO 91243
91326: POP
91327: POP
// end ;
91328: LD_VAR 0 2
91332: RET
// export function Length ( array ) ; begin
91333: LD_INT 0
91335: PPUSH
// result := array + 0 ;
91336: LD_ADDR_VAR 0 2
91340: PUSH
91341: LD_VAR 0 1
91345: PUSH
91346: LD_INT 0
91348: PLUS
91349: ST_TO_ADDR
// end ;
91350: LD_VAR 0 2
91354: RET
// export function PrepareArray ( array ) ; begin
91355: LD_INT 0
91357: PPUSH
// result := array diff 0 ;
91358: LD_ADDR_VAR 0 2
91362: PUSH
91363: LD_VAR 0 1
91367: PUSH
91368: LD_INT 0
91370: DIFF
91371: ST_TO_ADDR
// if not result [ 1 ] then
91372: LD_VAR 0 2
91376: PUSH
91377: LD_INT 1
91379: ARRAY
91380: NOT
91381: IFFALSE 91401
// result := Delete ( result , 1 ) ;
91383: LD_ADDR_VAR 0 2
91387: PUSH
91388: LD_VAR 0 2
91392: PPUSH
91393: LD_INT 1
91395: PPUSH
91396: CALL_OW 3
91400: ST_TO_ADDR
// end ;
91401: LD_VAR 0 2
91405: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
91406: LD_INT 0
91408: PPUSH
91409: PPUSH
91410: PPUSH
91411: PPUSH
// sibRocketRange := 25 ;
91412: LD_ADDR_VAR 0 6
91416: PUSH
91417: LD_INT 25
91419: ST_TO_ADDR
// result := false ;
91420: LD_ADDR_VAR 0 4
91424: PUSH
91425: LD_INT 0
91427: ST_TO_ADDR
// for i := 0 to 5 do
91428: LD_ADDR_VAR 0 5
91432: PUSH
91433: DOUBLE
91434: LD_INT 0
91436: DEC
91437: ST_TO_ADDR
91438: LD_INT 5
91440: PUSH
91441: FOR_TO
91442: IFFALSE 91509
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
91444: LD_VAR 0 1
91448: PPUSH
91449: LD_VAR 0 5
91453: PPUSH
91454: LD_VAR 0 6
91458: PPUSH
91459: CALL_OW 272
91463: PPUSH
91464: LD_VAR 0 2
91468: PPUSH
91469: LD_VAR 0 5
91473: PPUSH
91474: LD_VAR 0 6
91478: PPUSH
91479: CALL_OW 273
91483: PPUSH
91484: LD_VAR 0 3
91488: PPUSH
91489: CALL_OW 309
91493: IFFALSE 91507
// begin result := true ;
91495: LD_ADDR_VAR 0 4
91499: PUSH
91500: LD_INT 1
91502: ST_TO_ADDR
// exit ;
91503: POP
91504: POP
91505: GO 91511
// end ;
91507: GO 91441
91509: POP
91510: POP
// end ;
91511: LD_VAR 0 4
91515: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
91516: LD_INT 0
91518: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
91519: LD_VAR 0 1
91523: PPUSH
91524: LD_VAR 0 2
91528: PPUSH
91529: LD_INT 0
91531: PPUSH
91532: LD_INT 0
91534: PPUSH
91535: LD_INT 1
91537: PPUSH
91538: LD_INT 0
91540: PPUSH
91541: CALL_OW 587
// end ; end_of_file
91545: LD_VAR 0 3
91549: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
91550: LD_VAR 0 1
91554: PUSH
91555: LD_INT 200
91557: DOUBLE
91558: GREATEREQUAL
91559: IFFALSE 91567
91561: LD_INT 299
91563: DOUBLE
91564: LESSEQUAL
91565: IFTRUE 91569
91567: GO 91601
91569: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
91570: LD_VAR 0 1
91574: PPUSH
91575: LD_VAR 0 2
91579: PPUSH
91580: LD_VAR 0 3
91584: PPUSH
91585: LD_VAR 0 4
91589: PPUSH
91590: LD_VAR 0 5
91594: PPUSH
91595: CALL 46235 0 5
91599: GO 91678
91601: LD_INT 300
91603: DOUBLE
91604: GREATEREQUAL
91605: IFFALSE 91613
91607: LD_INT 399
91609: DOUBLE
91610: LESSEQUAL
91611: IFTRUE 91615
91613: GO 91677
91615: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
91616: LD_VAR 0 1
91620: PPUSH
91621: LD_VAR 0 2
91625: PPUSH
91626: LD_VAR 0 3
91630: PPUSH
91631: LD_VAR 0 4
91635: PPUSH
91636: LD_VAR 0 5
91640: PPUSH
91641: LD_VAR 0 6
91645: PPUSH
91646: LD_VAR 0 7
91650: PPUSH
91651: LD_VAR 0 8
91655: PPUSH
91656: LD_VAR 0 9
91660: PPUSH
91661: LD_VAR 0 10
91665: PPUSH
91666: LD_VAR 0 11
91670: PPUSH
91671: CALL 42568 0 11
91675: GO 91678
91677: POP
// end ;
91678: PPOPN 11
91680: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
91681: LD_VAR 0 1
91685: PPUSH
91686: LD_VAR 0 2
91690: PPUSH
91691: LD_VAR 0 3
91695: PPUSH
91696: LD_VAR 0 4
91700: PPUSH
91701: LD_VAR 0 5
91705: PPUSH
91706: CALL 45971 0 5
// end ; end_of_file
91710: PPOPN 5
91712: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
91713: LD_VAR 0 1
91717: PPUSH
91718: LD_VAR 0 2
91722: PPUSH
91723: LD_VAR 0 3
91727: PPUSH
91728: LD_VAR 0 4
91732: PPUSH
91733: LD_VAR 0 5
91737: PPUSH
91738: LD_VAR 0 6
91742: PPUSH
91743: CALL 30261 0 6
// end ;
91747: PPOPN 6
91749: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
91750: LD_INT 0
91752: PPUSH
// begin if not units then
91753: LD_VAR 0 1
91757: NOT
91758: IFFALSE 91762
// exit ;
91760: GO 91762
// end ;
91762: PPOPN 7
91764: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
91765: CALL 30232 0 0
// end ;
91769: PPOPN 1
91771: END
