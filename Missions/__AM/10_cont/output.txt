// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 28
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 20
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 29
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 38
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 39
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 40
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 41
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 42
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 50
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 47
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 46
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 48
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 49
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 58
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// eventVar1 = 0 ;
 123: LD_ADDR_EXP 61
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// eventVar2 = 0 ;
 131: LD_ADDR_EXP 62
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// fastEnd = 0 ;
 139: LD_ADDR_EXP 59
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// KhatamStatus = 0 ;
 147: LD_ADDR_EXP 52
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// GensherStatus = 0 ;
 155: LD_ADDR_EXP 51
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// cratesSpawned = 0 ;
 163: LD_ADDR_EXP 55
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 171: LD_ADDR_EXP 56
 175: PUSH
 176: LD_INT 1
 178: PUSH
 179: LD_INT 2
 181: PUSH
 182: LD_INT 2
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: LIST
 189: PUSH
 190: LD_OWVAR 67
 194: ARRAY
 195: ST_TO_ADDR
// ru_sold_counter := [ 3 , 4 , 4 ] [ Difficulty ] ;
 196: LD_ADDR_EXP 57
 200: PUSH
 201: LD_INT 3
 203: PUSH
 204: LD_INT 4
 206: PUSH
 207: LD_INT 4
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: LIST
 214: PUSH
 215: LD_OWVAR 67
 219: ARRAY
 220: ST_TO_ADDR
// attackAvalaible = 1 ;
 221: LD_ADDR_EXP 60
 225: PUSH
 226: LD_INT 1
 228: ST_TO_ADDR
// mission_prefix := 10c_ ;
 229: LD_ADDR_EXP 53
 233: PUSH
 234: LD_STRING 10c_
 236: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 237: LD_ADDR_EXP 54
 241: PUSH
 242: LD_STRING 10_
 244: ST_TO_ADDR
// debugMode = 0 ;
 245: LD_ADDR_EXP 63
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// PrepareNature ;
 253: CALL 24943 0 0
// PrepareDifficulty ;
 257: CALL 10003 0 0
// PrepareJMMTeam ;
 261: CALL 695 0 0
// PrepareCathyTeam ;
 265: CALL 1770 0 0
// PlaceMines ( MineField1 , rand ( 2 , 4 ) + Difficulty ) ;
 269: LD_INT 24
 271: PPUSH
 272: LD_INT 2
 274: PPUSH
 275: LD_INT 4
 277: PPUSH
 278: CALL_OW 12
 282: PUSH
 283: LD_OWVAR 67
 287: PLUS
 288: PPUSH
 289: CALL 19877 0 2
// if Difficulty > 1 then
 293: LD_OWVAR 67
 297: PUSH
 298: LD_INT 1
 300: GREATER
 301: IFFALSE 327
// PlaceMines ( MineField2 , rand ( 2 , 4 ) + Difficulty ) ;
 303: LD_INT 25
 305: PPUSH
 306: LD_INT 2
 308: PPUSH
 309: LD_INT 4
 311: PPUSH
 312: CALL_OW 12
 316: PUSH
 317: LD_OWVAR 67
 321: PLUS
 322: PPUSH
 323: CALL 19877 0 2
// if Difficulty > 2 then
 327: LD_OWVAR 67
 331: PUSH
 332: LD_INT 2
 334: GREATER
 335: IFFALSE 361
// PlaceMines ( MineField3 , rand ( 2 , 4 ) + Difficulty ) ;
 337: LD_INT 26
 339: PPUSH
 340: LD_INT 2
 342: PPUSH
 343: LD_INT 4
 345: PPUSH
 346: CALL_OW 12
 350: PUSH
 351: LD_OWVAR 67
 355: PLUS
 356: PPUSH
 357: CALL 19877 0 2
// PrepareArabianCommander ;
 361: CALL 3208 0 0
// PrepareArabian ;
 365: CALL 3260 0 0
// BuildArabianBase ;
 369: CALL 12818 0 0
// TameApemans ;
 373: CALL 18682 0 0
// end ;
 377: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 378: LD_EXP 63
 382: PUSH
 383: LD_INT 1
 385: EQUAL
 386: IFFALSE 692
 388: GO 390
 390: DISABLE
 391: LD_INT 0
 393: PPUSH
// begin enable ;
 394: ENABLE
// fogoff ( true ) ;
 395: LD_INT 1
 397: PPUSH
 398: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 402: LD_ADDR_VAR 0 1
 406: PUSH
 407: LD_INT 22
 409: PUSH
 410: LD_INT 1
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PUSH
 417: LD_INT 21
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: EMPTY
 428: LIST
 429: LIST
 430: PPUSH
 431: CALL_OW 69
 435: PUSH
 436: FOR_IN
 437: IFFALSE 453
// SetLives ( i , 1000 ) ;
 439: LD_VAR 0 1
 443: PPUSH
 444: LD_INT 1000
 446: PPUSH
 447: CALL_OW 234
 451: GO 436
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 2
 472: PUSH
 473: LD_INT 30
 475: PUSH
 476: LD_INT 0
 478: PUSH
 479: EMPTY
 480: LIST
 481: LIST
 482: PUSH
 483: LD_INT 30
 485: PUSH
 486: LD_INT 1
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: LIST
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: PPUSH
 502: CALL_OW 69
 506: PUSH
 507: FOR_IN
 508: IFFALSE 532
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 510: LD_VAR 0 1
 514: PPUSH
 515: CALL_OW 274
 519: PPUSH
 520: LD_INT 1
 522: PPUSH
 523: LD_INT 9999
 525: PPUSH
 526: CALL_OW 277
 530: GO 507
 532: POP
 533: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 534: LD_ADDR_VAR 0 1
 538: PUSH
 539: LD_INT 22
 541: PUSH
 542: LD_INT 1
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: PUSH
 549: LD_INT 2
 551: PUSH
 552: LD_INT 30
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PUSH
 562: LD_INT 30
 564: PUSH
 565: LD_INT 1
 567: PUSH
 568: EMPTY
 569: LIST
 570: LIST
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: PPUSH
 581: CALL_OW 69
 585: PUSH
 586: FOR_IN
 587: IFFALSE 611
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 589: LD_VAR 0 1
 593: PPUSH
 594: CALL_OW 274
 598: PPUSH
 599: LD_INT 2
 601: PPUSH
 602: LD_INT 9999
 604: PPUSH
 605: CALL_OW 277
 609: GO 586
 611: POP
 612: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 613: LD_ADDR_VAR 0 1
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 2
 630: PUSH
 631: LD_INT 30
 633: PUSH
 634: LD_INT 0
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: PUSH
 641: LD_INT 30
 643: PUSH
 644: LD_INT 1
 646: PUSH
 647: EMPTY
 648: LIST
 649: LIST
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: LIST
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PPUSH
 660: CALL_OW 69
 664: PUSH
 665: FOR_IN
 666: IFFALSE 690
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 668: LD_VAR 0 1
 672: PPUSH
 673: CALL_OW 274
 677: PPUSH
 678: LD_INT 3
 680: PPUSH
 681: LD_INT 9999
 683: PPUSH
 684: CALL_OW 277
 688: GO 665
 690: POP
 691: POP
// end ; end_of_file
 692: PPOPN 1
 694: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
 695: LD_INT 0
 697: PPUSH
 698: PPUSH
 699: PPUSH
 700: PPUSH
 701: PPUSH
 702: PPUSH
// uc_side = 1 ;
 703: LD_ADDR_OWVAR 20
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// uc_nation = 1 ;
 711: LD_ADDR_OWVAR 21
 715: PUSH
 716: LD_INT 1
 718: ST_TO_ADDR
// count = 0 ;
 719: LD_ADDR_VAR 0 6
 723: PUSH
 724: LD_INT 0
 726: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 727: LD_ADDR_EXP 1
 731: PUSH
 732: LD_STRING 10_JMM
 734: PPUSH
 735: LD_INT 1
 737: PPUSH
 738: CALL 9608 0 2
 742: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
 743: LD_ADDR_EXP 20
 747: PUSH
 748: LD_EXP 20
 752: PUSH
 753: LD_EXP 1
 757: ADD
 758: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
 759: LD_ADDR_EXP 10
 763: PUSH
 764: LD_STRING 10_Gary
 766: PPUSH
 767: LD_INT 1
 769: PPUSH
 770: CALL 9608 0 2
 774: ST_TO_ADDR
// if Gary then
 775: LD_EXP 10
 779: IFFALSE 797
// JMMSquad = JMMSquad ^ Gary ;
 781: LD_ADDR_EXP 20
 785: PUSH
 786: LD_EXP 20
 790: PUSH
 791: LD_EXP 10
 795: ADD
 796: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
 797: LD_ADDR_EXP 5
 801: PUSH
 802: LD_STRING 10_Cyrus
 804: PPUSH
 805: LD_INT 1
 807: PPUSH
 808: CALL 9608 0 2
 812: ST_TO_ADDR
// if Cyrus then
 813: LD_EXP 5
 817: IFFALSE 835
// JMMSquad = JMMSquad ^ Cyrus ;
 819: LD_ADDR_EXP 20
 823: PUSH
 824: LD_EXP 20
 828: PUSH
 829: LD_EXP 5
 833: ADD
 834: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
 835: LD_ADDR_EXP 4
 839: PUSH
 840: LD_STRING 10_Bobby
 842: PPUSH
 843: LD_INT 1
 845: PPUSH
 846: CALL 9608 0 2
 850: ST_TO_ADDR
// if Bobby then
 851: LD_EXP 4
 855: IFFALSE 873
// JMMSquad = JMMSquad ^ Bobby ;
 857: LD_ADDR_EXP 20
 861: PUSH
 862: LD_EXP 20
 866: PUSH
 867: LD_EXP 4
 871: ADD
 872: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
 873: LD_ADDR_EXP 6
 877: PUSH
 878: LD_STRING 10_Lisa
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: CALL 9608 0 2
 888: ST_TO_ADDR
// if Lisa then
 889: LD_EXP 6
 893: IFFALSE 911
// JMMSquad = JMMSquad ^ Lisa ;
 895: LD_ADDR_EXP 20
 899: PUSH
 900: LD_EXP 20
 904: PUSH
 905: LD_EXP 6
 909: ADD
 910: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
 911: LD_ADDR_EXP 2
 915: PUSH
 916: LD_STRING 10_Brown
 918: PPUSH
 919: LD_INT 1
 921: PPUSH
 922: CALL 9608 0 2
 926: ST_TO_ADDR
// if Brown then
 927: LD_EXP 2
 931: IFFALSE 949
// JMMSquad = JMMSquad ^ Brown ;
 933: LD_ADDR_EXP 20
 937: PUSH
 938: LD_EXP 20
 942: PUSH
 943: LD_EXP 2
 947: ADD
 948: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
 949: LD_ADDR_EXP 3
 953: PUSH
 954: LD_STRING 10_Donaldson
 956: PPUSH
 957: LD_INT 1
 959: PPUSH
 960: CALL 9608 0 2
 964: ST_TO_ADDR
// if Donaldson then
 965: LD_EXP 3
 969: IFFALSE 987
// JMMSquad = JMMSquad ^ Donaldson ;
 971: LD_ADDR_EXP 20
 975: PUSH
 976: LD_EXP 20
 980: PUSH
 981: LD_EXP 3
 985: ADD
 986: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
 987: LD_ADDR_EXP 7
 991: PUSH
 992: LD_STRING 10_Frank
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: CALL 9608 0 2
1002: ST_TO_ADDR
// if Frank then
1003: LD_EXP 7
1007: IFFALSE 1025
// JMMSquad = JMMSquad ^ Frank ;
1009: LD_ADDR_EXP 20
1013: PUSH
1014: LD_EXP 20
1018: PUSH
1019: LD_EXP 7
1023: ADD
1024: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
1025: LD_ADDR_EXP 9
1029: PUSH
1030: LD_STRING 10_Houten
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: CALL 9608 0 2
1040: ST_TO_ADDR
// if Houten then
1041: LD_EXP 9
1045: IFFALSE 1063
// JMMSquad = JMMSquad ^ Houten ;
1047: LD_ADDR_EXP 20
1051: PUSH
1052: LD_EXP 20
1056: PUSH
1057: LD_EXP 9
1061: ADD
1062: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1063: LD_ADDR_EXP 21
1067: PUSH
1068: LD_STRING OthersIn10
1070: PPUSH
1071: CALL_OW 31
1075: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1076: LD_ADDR_EXP 24
1080: PUSH
1081: LD_STRING Powell
1083: PPUSH
1084: LD_INT 0
1086: PPUSH
1087: CALL 9608 0 2
1091: ST_TO_ADDR
// for i in JMMSquad do
1092: LD_ADDR_VAR 0 2
1096: PUSH
1097: LD_EXP 20
1101: PUSH
1102: FOR_IN
1103: IFFALSE 1362
// begin if count < 3 then
1105: LD_VAR 0 6
1109: PUSH
1110: LD_INT 3
1112: LESS
1113: IFFALSE 1230
// begin vc_engine = 1 ;
1115: LD_ADDR_OWVAR 39
1119: PUSH
1120: LD_INT 1
1122: ST_TO_ADDR
// vc_control = 1 ;
1123: LD_ADDR_OWVAR 38
1127: PUSH
1128: LD_INT 1
1130: ST_TO_ADDR
// vc_weapon = 12 ;
1131: LD_ADDR_OWVAR 40
1135: PUSH
1136: LD_INT 12
1138: ST_TO_ADDR
// vc_chassis = 3 ;
1139: LD_ADDR_OWVAR 37
1143: PUSH
1144: LD_INT 3
1146: ST_TO_ADDR
// veh = CreateVehicle ;
1147: LD_ADDR_VAR 0 4
1151: PUSH
1152: CALL_OW 45
1156: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1157: LD_VAR 0 4
1161: PPUSH
1162: LD_INT 1
1164: PPUSH
1165: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1169: LD_VAR 0 4
1173: PPUSH
1174: LD_INT 2
1176: PPUSH
1177: LD_INT 0
1179: PPUSH
1180: CALL_OW 49
// if count mod 2 = 0 then
1184: LD_VAR 0 6
1188: PUSH
1189: LD_INT 2
1191: MOD
1192: PUSH
1193: LD_INT 0
1195: EQUAL
1196: IFFALSE 1215
// AddCargo ( veh , 1 , 100 ) else
1198: LD_VAR 0 4
1202: PPUSH
1203: LD_INT 1
1205: PPUSH
1206: LD_INT 100
1208: PPUSH
1209: CALL_OW 291
1213: GO 1230
// AddCargo ( veh , 3 , 100 ) end ;
1215: LD_VAR 0 4
1219: PPUSH
1220: LD_INT 3
1222: PPUSH
1223: LD_INT 100
1225: PPUSH
1226: CALL_OW 291
// if count >= 3 then
1230: LD_VAR 0 6
1234: PUSH
1235: LD_INT 3
1237: GREATEREQUAL
1238: IFFALSE 1332
// begin vc_engine = 1 ;
1240: LD_ADDR_OWVAR 39
1244: PUSH
1245: LD_INT 1
1247: ST_TO_ADDR
// vc_control = 1 ;
1248: LD_ADDR_OWVAR 38
1252: PUSH
1253: LD_INT 1
1255: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1256: LD_ADDR_OWVAR 40
1260: PUSH
1261: LD_INT 3
1263: PUSH
1264: LD_INT 4
1266: PUSH
1267: LD_INT 5
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 1
1277: PPUSH
1278: LD_INT 3
1280: PPUSH
1281: CALL_OW 12
1285: ARRAY
1286: ST_TO_ADDR
// vc_chassis = 3 ;
1287: LD_ADDR_OWVAR 37
1291: PUSH
1292: LD_INT 3
1294: ST_TO_ADDR
// veh = CreateVehicle ;
1295: LD_ADDR_VAR 0 4
1299: PUSH
1300: CALL_OW 45
1304: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1305: LD_VAR 0 4
1309: PPUSH
1310: LD_INT 1
1312: PPUSH
1313: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1317: LD_VAR 0 4
1321: PPUSH
1322: LD_INT 2
1324: PPUSH
1325: LD_INT 0
1327: PPUSH
1328: CALL_OW 49
// end ; count = count + 1 ;
1332: LD_ADDR_VAR 0 6
1336: PUSH
1337: LD_VAR 0 6
1341: PUSH
1342: LD_INT 1
1344: PLUS
1345: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1346: LD_VAR 0 2
1350: PPUSH
1351: LD_VAR 0 4
1355: PPUSH
1356: CALL_OW 52
// end ;
1360: GO 1102
1362: POP
1363: POP
// for i in others10 do
1364: LD_ADDR_VAR 0 2
1368: PUSH
1369: LD_EXP 21
1373: PUSH
1374: FOR_IN
1375: IFFALSE 1501
// begin vc_engine = 1 ;
1377: LD_ADDR_OWVAR 39
1381: PUSH
1382: LD_INT 1
1384: ST_TO_ADDR
// vc_control = 1 ;
1385: LD_ADDR_OWVAR 38
1389: PUSH
1390: LD_INT 1
1392: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1393: LD_ADDR_OWVAR 40
1397: PUSH
1398: LD_INT 3
1400: PUSH
1401: LD_INT 4
1403: PUSH
1404: LD_INT 5
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: LIST
1411: PUSH
1412: LD_INT 1
1414: PPUSH
1415: LD_INT 3
1417: PPUSH
1418: CALL_OW 12
1422: ARRAY
1423: ST_TO_ADDR
// vc_chassis = 3 ;
1424: LD_ADDR_OWVAR 37
1428: PUSH
1429: LD_INT 3
1431: ST_TO_ADDR
// veh = CreateVehicle ;
1432: LD_ADDR_VAR 0 4
1436: PUSH
1437: CALL_OW 45
1441: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1442: LD_VAR 0 4
1446: PPUSH
1447: LD_INT 1
1449: PPUSH
1450: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1454: LD_VAR 0 4
1458: PPUSH
1459: LD_INT 2
1461: PPUSH
1462: LD_INT 0
1464: PPUSH
1465: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1469: LD_ADDR_EXP 28
1473: PUSH
1474: LD_EXP 28
1478: PUSH
1479: LD_VAR 0 4
1483: ADD
1484: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1485: LD_VAR 0 2
1489: PPUSH
1490: LD_VAR 0 4
1494: PPUSH
1495: CALL_OW 52
// end ;
1499: GO 1374
1501: POP
1502: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1503: LD_INT 22
1505: PUSH
1506: LD_INT 1
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: PUSH
1513: LD_INT 21
1515: PUSH
1516: LD_INT 1
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: PPUSH
1527: CALL_OW 69
1531: PPUSH
1532: LD_INT 1
1534: PPUSH
1535: CALL_OW 336
// end ;
1539: LD_VAR 0 1
1543: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
1544: LD_INT 0
1546: PPUSH
1547: PPUSH
1548: PPUSH
1549: PPUSH
1550: PPUSH
// uc_side = 1 ;
1551: LD_ADDR_OWVAR 20
1555: PUSH
1556: LD_INT 1
1558: ST_TO_ADDR
// uc_nation = 1 ;
1559: LD_ADDR_OWVAR 21
1563: PUSH
1564: LD_INT 1
1566: ST_TO_ADDR
// for i := 1 to 10 do
1567: LD_ADDR_VAR 0 2
1571: PUSH
1572: DOUBLE
1573: LD_INT 1
1575: DEC
1576: ST_TO_ADDR
1577: LD_INT 10
1579: PUSH
1580: FOR_TO
1581: IFFALSE 1763
// begin vc_engine = 1 ;
1583: LD_ADDR_OWVAR 39
1587: PUSH
1588: LD_INT 1
1590: ST_TO_ADDR
// vc_control = 1 ;
1591: LD_ADDR_OWVAR 38
1595: PUSH
1596: LD_INT 1
1598: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1599: LD_ADDR_OWVAR 40
1603: PUSH
1604: LD_INT 3
1606: PUSH
1607: LD_INT 4
1609: PUSH
1610: LD_INT 5
1612: PUSH
1613: LD_INT 12
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: PUSH
1622: LD_INT 1
1624: PPUSH
1625: LD_INT 4
1627: PPUSH
1628: CALL_OW 12
1632: ARRAY
1633: ST_TO_ADDR
// vc_chassis = 3 ;
1634: LD_ADDR_OWVAR 37
1638: PUSH
1639: LD_INT 3
1641: ST_TO_ADDR
// veh = CreateVehicle ;
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: CALL_OW 45
1651: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1652: LD_VAR 0 3
1656: PPUSH
1657: LD_INT 1
1659: PPUSH
1660: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1664: LD_VAR 0 3
1668: PPUSH
1669: LD_INT 2
1671: PPUSH
1672: LD_INT 0
1674: PPUSH
1675: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1679: LD_ADDR_EXP 28
1683: PUSH
1684: LD_EXP 28
1688: PUSH
1689: LD_VAR 0 3
1693: ADD
1694: ST_TO_ADDR
// if vc_weapon = 12 then
1695: LD_OWVAR 40
1699: PUSH
1700: LD_INT 12
1702: EQUAL
1703: IFFALSE 1761
// begin rnd = Rand ( 5 , 10 ) * 10 ;
1705: LD_ADDR_VAR 0 4
1709: PUSH
1710: LD_INT 5
1712: PPUSH
1713: LD_INT 10
1715: PPUSH
1716: CALL_OW 12
1720: PUSH
1721: LD_INT 10
1723: MUL
1724: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1725: LD_VAR 0 3
1729: PPUSH
1730: LD_INT 1
1732: PUSH
1733: LD_INT 3
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: PUSH
1740: LD_INT 1
1742: PPUSH
1743: LD_INT 2
1745: PPUSH
1746: CALL_OW 12
1750: ARRAY
1751: PPUSH
1752: LD_VAR 0 4
1756: PPUSH
1757: CALL_OW 291
// end ; end ;
1761: GO 1580
1763: POP
1764: POP
// end ;
1765: LD_VAR 0 1
1769: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1770: LD_INT 0
1772: PPUSH
1773: PPUSH
1774: PPUSH
// uc_side = 4 ;
1775: LD_ADDR_OWVAR 20
1779: PUSH
1780: LD_INT 4
1782: ST_TO_ADDR
// uc_nation = 1 ;
1783: LD_ADDR_OWVAR 21
1787: PUSH
1788: LD_INT 1
1790: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1791: LD_ADDR_EXP 11
1795: PUSH
1796: LD_STRING Simms
1798: PPUSH
1799: LD_INT 0
1801: PPUSH
1802: CALL 9608 0 2
1806: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1807: LD_ADDR_EXP 12
1811: PUSH
1812: LD_STRING 08_Denis
1814: PPUSH
1815: LD_INT 1
1817: PPUSH
1818: CALL 9608 0 2
1822: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1823: LD_ADDR_EXP 13
1827: PUSH
1828: LD_STRING 08_Joan
1830: PPUSH
1831: LD_INT 1
1833: PPUSH
1834: CALL 9608 0 2
1838: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
1839: LD_STRING 08_Khatam
1841: PPUSH
1842: CALL_OW 28
1846: IFFALSE 1866
// Khatam = PrepareUnit ( 08_Khatam , true ) else
1848: LD_ADDR_EXP 14
1852: PUSH
1853: LD_STRING 08_Khatam
1855: PPUSH
1856: LD_INT 1
1858: PPUSH
1859: CALL 9608 0 2
1863: ST_TO_ADDR
1864: GO 1891
// if TestCharacters ( 03_Khatam ) then
1866: LD_STRING 03_Khatam
1868: PPUSH
1869: CALL_OW 28
1873: IFFALSE 1891
// Khatam = PrepareUnit ( 03_Khatam , true ) ;
1875: LD_ADDR_EXP 14
1879: PUSH
1880: LD_STRING 03_Khatam
1882: PPUSH
1883: LD_INT 1
1885: PPUSH
1886: CALL 9608 0 2
1890: ST_TO_ADDR
// Gladstone = PrepareUnit ( 08_Gladstone , true ) ;
1891: LD_ADDR_EXP 15
1895: PUSH
1896: LD_STRING 08_Gladstone
1898: PPUSH
1899: LD_INT 1
1901: PPUSH
1902: CALL 9608 0 2
1906: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1907: LD_ADDR_EXP 17
1911: PUSH
1912: LD_STRING DeltaDoctor
1914: PPUSH
1915: LD_INT 1
1917: PPUSH
1918: CALL 9608 0 2
1922: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) = 1 then
1923: LD_STRING 08_Frank
1925: PPUSH
1926: CALL_OW 28
1930: PUSH
1931: LD_INT 1
1933: EQUAL
1934: IFFALSE 1952
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
1936: LD_ADDR_EXP 8
1940: PUSH
1941: LD_STRING Yamoko
1943: PPUSH
1944: LD_INT 1
1946: PPUSH
1947: CALL 9608 0 2
1951: ST_TO_ADDR
// if TestCharacters ( 08_Kikuchi ) then
1952: LD_STRING 08_Kikuchi
1954: PPUSH
1955: CALL_OW 28
1959: IFFALSE 1977
// Kikuchi = PrepareUnit ( 08_Kikuchi , true ) ;
1961: LD_ADDR_EXP 8
1965: PUSH
1966: LD_STRING 08_Kikuchi
1968: PPUSH
1969: LD_INT 1
1971: PPUSH
1972: CALL 9608 0 2
1976: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
1977: LD_ADDR_EXP 22
1981: PUSH
1982: LD_STRING 09_others
1984: PPUSH
1985: CALL_OW 31
1989: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1990: LD_ADDR_EXP 23
1994: PUSH
1995: LD_STRING 09_apes
1997: PPUSH
1998: CALL_OW 31
2002: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2003: LD_EXP 11
2007: PPUSH
2008: LD_INT 1
2010: PPUSH
2011: LD_INT 0
2013: PPUSH
2014: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2018: LD_EXP 12
2022: PPUSH
2023: LD_INT 1
2025: PPUSH
2026: LD_INT 0
2028: PPUSH
2029: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2033: LD_EXP 13
2037: PPUSH
2038: LD_INT 1
2040: PPUSH
2041: LD_INT 0
2043: PPUSH
2044: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2048: LD_EXP 14
2052: PPUSH
2053: LD_INT 1
2055: PPUSH
2056: LD_INT 0
2058: PPUSH
2059: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2063: LD_EXP 15
2067: PPUSH
2068: LD_INT 1
2070: PPUSH
2071: LD_INT 0
2073: PPUSH
2074: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2078: LD_EXP 17
2082: PPUSH
2083: LD_INT 1
2085: PPUSH
2086: LD_INT 0
2088: PPUSH
2089: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2093: LD_EXP 8
2097: PPUSH
2098: LD_INT 1
2100: PPUSH
2101: LD_INT 0
2103: PPUSH
2104: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2108: LD_EXP 11
2112: PUSH
2113: LD_EXP 14
2117: PUSH
2118: LD_EXP 12
2122: PUSH
2123: LD_EXP 15
2127: PUSH
2128: LD_EXP 17
2132: PUSH
2133: LD_EXP 13
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: LIST
2142: LIST
2143: LIST
2144: LIST
2145: PPUSH
2146: LD_INT 4
2148: PPUSH
2149: CALL_OW 336
// if others09 > 2 then
2153: LD_EXP 22
2157: PUSH
2158: LD_INT 2
2160: GREATER
2161: IFFALSE 2242
// begin for i := 1 to 3 do
2163: LD_ADDR_VAR 0 2
2167: PUSH
2168: DOUBLE
2169: LD_INT 1
2171: DEC
2172: ST_TO_ADDR
2173: LD_INT 3
2175: PUSH
2176: FOR_TO
2177: IFFALSE 2238
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2179: LD_EXP 22
2183: PUSH
2184: LD_VAR 0 2
2188: ARRAY
2189: PPUSH
2190: LD_INT 1
2192: PPUSH
2193: LD_INT 0
2195: PPUSH
2196: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
2200: LD_ADDR_EXP 22
2204: PUSH
2205: LD_EXP 22
2209: PPUSH
2210: LD_INT 1
2212: PPUSH
2213: CALL_OW 3
2217: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
2218: LD_EXP 22
2222: PUSH
2223: LD_VAR 0 2
2227: ARRAY
2228: PPUSH
2229: LD_INT 2
2231: PPUSH
2232: CALL_OW 336
// end ;
2236: GO 2176
2238: POP
2239: POP
// end else
2240: GO 2302
// begin for i in others09 do
2242: LD_ADDR_VAR 0 2
2246: PUSH
2247: LD_EXP 22
2251: PUSH
2252: FOR_IN
2253: IFFALSE 2300
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2255: LD_VAR 0 2
2259: PPUSH
2260: LD_INT 1
2262: PPUSH
2263: LD_INT 0
2265: PPUSH
2266: CALL_OW 49
// others09 = others09 diff i ;
2270: LD_ADDR_EXP 22
2274: PUSH
2275: LD_EXP 22
2279: PUSH
2280: LD_VAR 0 2
2284: DIFF
2285: ST_TO_ADDR
// SetClass ( i , 2 ) ;
2286: LD_VAR 0 2
2290: PPUSH
2291: LD_INT 2
2293: PPUSH
2294: CALL_OW 336
// end ;
2298: GO 2252
2300: POP
2301: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
2302: LD_INT 22
2304: PUSH
2305: LD_INT 4
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: PUSH
2312: LD_INT 25
2314: PUSH
2315: LD_INT 2
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: PPUSH
2326: CALL_OW 69
2330: PUSH
2331: LD_INT 0
2333: EQUAL
2334: IFFALSE 2466
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2336: LD_ADDR_VAR 0 3
2340: PUSH
2341: LD_INT 22
2343: PUSH
2344: LD_INT 4
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: PUSH
2351: LD_INT 25
2353: PUSH
2354: LD_INT 2
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: PPUSH
2365: CALL_OW 69
2369: PUSH
2370: LD_EXP 11
2374: PUSH
2375: LD_EXP 14
2379: PUSH
2380: LD_EXP 12
2384: PUSH
2385: LD_EXP 15
2389: PUSH
2390: LD_EXP 17
2394: PUSH
2395: LD_EXP 13
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: DIFF
2408: ST_TO_ADDR
// if not tmp then
2409: LD_VAR 0 3
2413: NOT
2414: IFFALSE 2450
// begin if Denis then
2416: LD_EXP 12
2420: IFFALSE 2436
// SetClass ( Denis , 2 ) else
2422: LD_EXP 12
2426: PPUSH
2427: LD_INT 2
2429: PPUSH
2430: CALL_OW 336
2434: GO 2448
// SetClass ( DeltaDoctor , 2 ) ;
2436: LD_EXP 17
2440: PPUSH
2441: LD_INT 2
2443: PPUSH
2444: CALL_OW 336
// end else
2448: GO 2466
// begin SetClass ( tmp [ 1 ] , 2 ) ;
2450: LD_VAR 0 3
2454: PUSH
2455: LD_INT 1
2457: ARRAY
2458: PPUSH
2459: LD_INT 2
2461: PPUSH
2462: CALL_OW 336
// end ; end ; for i in ape09 do
2466: LD_ADDR_VAR 0 2
2470: PUSH
2471: LD_EXP 23
2475: PUSH
2476: FOR_IN
2477: IFFALSE 2496
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2479: LD_VAR 0 2
2483: PPUSH
2484: LD_INT 1
2486: PPUSH
2487: LD_INT 0
2489: PPUSH
2490: CALL_OW 49
2494: GO 2476
2496: POP
2497: POP
// uc_side = 4 ;
2498: LD_ADDR_OWVAR 20
2502: PUSH
2503: LD_INT 4
2505: ST_TO_ADDR
// hc_class := 1 ;
2506: LD_ADDR_OWVAR 28
2510: PUSH
2511: LD_INT 1
2513: ST_TO_ADDR
// hc_sex := sex_female ;
2514: LD_ADDR_OWVAR 27
2518: PUSH
2519: LD_INT 2
2521: ST_TO_ADDR
// hc_gallery :=  ;
2522: LD_ADDR_OWVAR 33
2526: PUSH
2527: LD_STRING 
2529: ST_TO_ADDR
// hc_name :=  ;
2530: LD_ADDR_OWVAR 26
2534: PUSH
2535: LD_STRING 
2537: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2538: LD_ADDR_OWVAR 31
2542: PUSH
2543: LD_INT 1
2545: PUSH
2546: LD_INT 7
2548: PUSH
2549: LD_INT 1
2551: PUSH
2552: LD_INT 0
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: ST_TO_ADDR
// AmScout = CreateHuman ;
2561: LD_ADDR_EXP 18
2565: PUSH
2566: CALL_OW 44
2570: ST_TO_ADDR
// end ;
2571: LD_VAR 0 1
2575: RET
// export function PrepareCornell ; begin
2576: LD_INT 0
2578: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
2579: LD_INT 4
2581: PPUSH
2582: LD_INT 4
2584: PPUSH
2585: CALL_OW 343
// uc_side = 4 ;
2589: LD_ADDR_OWVAR 20
2593: PUSH
2594: LD_INT 4
2596: ST_TO_ADDR
// uc_nation = 1 ;
2597: LD_ADDR_OWVAR 21
2601: PUSH
2602: LD_INT 1
2604: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
2605: LD_ADDR_EXP 19
2609: PUSH
2610: LD_STRING 03_Cornel
2612: PPUSH
2613: LD_INT 1
2615: PPUSH
2616: CALL 9608 0 2
2620: ST_TO_ADDR
// if not Cornell then
2621: LD_EXP 19
2625: NOT
2626: IFFALSE 2630
// exit ;
2628: GO 2738
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2630: LD_EXP 19
2634: PPUSH
2635: LD_INT 8
2637: PPUSH
2638: LD_INT 0
2640: PPUSH
2641: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
2645: LD_EXP 19
2649: PPUSH
2650: LD_INT 350
2652: PPUSH
2653: CALL_OW 234
// if IsInUnit ( JMM ) then
2657: LD_EXP 1
2661: PPUSH
2662: CALL_OW 310
2666: IFFALSE 2709
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2668: LD_EXP 19
2672: PPUSH
2673: LD_EXP 1
2677: PPUSH
2678: CALL_OW 310
2682: PPUSH
2683: CALL_OW 250
2687: PPUSH
2688: LD_EXP 1
2692: PPUSH
2693: CALL_OW 310
2697: PPUSH
2698: CALL_OW 251
2702: PPUSH
2703: CALL_OW 111
2707: GO 2738
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2709: LD_EXP 19
2713: PPUSH
2714: LD_EXP 1
2718: PPUSH
2719: CALL_OW 250
2723: PPUSH
2724: LD_EXP 1
2728: PPUSH
2729: CALL_OW 251
2733: PPUSH
2734: CALL_OW 111
// end ; end_of_file
2738: LD_VAR 0 1
2742: RET
// export function PrepareRussians ; var i , un ; begin
2743: LD_INT 0
2745: PPUSH
2746: PPUSH
2747: PPUSH
// uc_side = 3 ;
2748: LD_ADDR_OWVAR 20
2752: PUSH
2753: LD_INT 3
2755: ST_TO_ADDR
// uc_nation = 3 ;
2756: LD_ADDR_OWVAR 21
2760: PUSH
2761: LD_INT 3
2763: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
2764: LD_ADDR_EXP 25
2768: PUSH
2769: LD_STRING Tsaritsyn
2771: PPUSH
2772: LD_INT 0
2774: PPUSH
2775: CALL 9608 0 2
2779: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2780: LD_EXP 25
2784: PPUSH
2785: LD_INT 3
2787: PPUSH
2788: LD_INT 0
2790: PPUSH
2791: CALL_OW 49
// for i = 1 to 14 do
2795: LD_ADDR_VAR 0 2
2799: PUSH
2800: DOUBLE
2801: LD_INT 1
2803: DEC
2804: ST_TO_ADDR
2805: LD_INT 14
2807: PUSH
2808: FOR_TO
2809: IFFALSE 2895
// begin uc_side = 3 ;
2811: LD_ADDR_OWVAR 20
2815: PUSH
2816: LD_INT 3
2818: ST_TO_ADDR
// uc_nation = 3 ;
2819: LD_ADDR_OWVAR 21
2823: PUSH
2824: LD_INT 3
2826: ST_TO_ADDR
// hc_gallery =  ;
2827: LD_ADDR_OWVAR 33
2831: PUSH
2832: LD_STRING 
2834: ST_TO_ADDR
// hc_name =  ;
2835: LD_ADDR_OWVAR 26
2839: PUSH
2840: LD_STRING 
2842: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2843: LD_INT 0
2845: PPUSH
2846: LD_INT 1
2848: PPUSH
2849: LD_EXP 36
2853: PPUSH
2854: LD_EXP 37
2858: PPUSH
2859: CALL_OW 12
2863: PPUSH
2864: CALL_OW 380
// un = CreateHuman ;
2868: LD_ADDR_VAR 0 3
2872: PUSH
2873: CALL_OW 44
2877: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2878: LD_VAR 0 3
2882: PPUSH
2883: LD_INT 3
2885: PPUSH
2886: LD_INT 0
2888: PPUSH
2889: CALL_OW 49
// end ;
2893: GO 2808
2895: POP
2896: POP
// for i = 1 to 6 do
2897: LD_ADDR_VAR 0 2
2901: PUSH
2902: DOUBLE
2903: LD_INT 1
2905: DEC
2906: ST_TO_ADDR
2907: LD_INT 6
2909: PUSH
2910: FOR_TO
2911: IFFALSE 2997
// begin uc_side = 3 ;
2913: LD_ADDR_OWVAR 20
2917: PUSH
2918: LD_INT 3
2920: ST_TO_ADDR
// uc_nation = 3 ;
2921: LD_ADDR_OWVAR 21
2925: PUSH
2926: LD_INT 3
2928: ST_TO_ADDR
// hc_gallery =  ;
2929: LD_ADDR_OWVAR 33
2933: PUSH
2934: LD_STRING 
2936: ST_TO_ADDR
// hc_name =  ;
2937: LD_ADDR_OWVAR 26
2941: PUSH
2942: LD_STRING 
2944: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2945: LD_INT 0
2947: PPUSH
2948: LD_INT 2
2950: PPUSH
2951: LD_EXP 36
2955: PPUSH
2956: LD_EXP 37
2960: PPUSH
2961: CALL_OW 12
2965: PPUSH
2966: CALL_OW 380
// un = CreateHuman ;
2970: LD_ADDR_VAR 0 3
2974: PUSH
2975: CALL_OW 44
2979: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2980: LD_VAR 0 3
2984: PPUSH
2985: LD_INT 3
2987: PPUSH
2988: LD_INT 0
2990: PPUSH
2991: CALL_OW 49
// end ;
2995: GO 2910
2997: POP
2998: POP
// for i = 1 to 6 do
2999: LD_ADDR_VAR 0 2
3003: PUSH
3004: DOUBLE
3005: LD_INT 1
3007: DEC
3008: ST_TO_ADDR
3009: LD_INT 6
3011: PUSH
3012: FOR_TO
3013: IFFALSE 3099
// begin uc_side = 3 ;
3015: LD_ADDR_OWVAR 20
3019: PUSH
3020: LD_INT 3
3022: ST_TO_ADDR
// uc_nation = 3 ;
3023: LD_ADDR_OWVAR 21
3027: PUSH
3028: LD_INT 3
3030: ST_TO_ADDR
// hc_gallery =  ;
3031: LD_ADDR_OWVAR 33
3035: PUSH
3036: LD_STRING 
3038: ST_TO_ADDR
// hc_name =  ;
3039: LD_ADDR_OWVAR 26
3043: PUSH
3044: LD_STRING 
3046: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3047: LD_INT 0
3049: PPUSH
3050: LD_INT 3
3052: PPUSH
3053: LD_EXP 36
3057: PPUSH
3058: LD_EXP 37
3062: PPUSH
3063: CALL_OW 12
3067: PPUSH
3068: CALL_OW 380
// un = CreateHuman ;
3072: LD_ADDR_VAR 0 3
3076: PUSH
3077: CALL_OW 44
3081: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3082: LD_VAR 0 3
3086: PPUSH
3087: LD_INT 3
3089: PPUSH
3090: LD_INT 0
3092: PPUSH
3093: CALL_OW 49
// end ;
3097: GO 3012
3099: POP
3100: POP
// for i = 1 to 4 do
3101: LD_ADDR_VAR 0 2
3105: PUSH
3106: DOUBLE
3107: LD_INT 1
3109: DEC
3110: ST_TO_ADDR
3111: LD_INT 4
3113: PUSH
3114: FOR_TO
3115: IFFALSE 3201
// begin uc_side = 3 ;
3117: LD_ADDR_OWVAR 20
3121: PUSH
3122: LD_INT 3
3124: ST_TO_ADDR
// uc_nation = 3 ;
3125: LD_ADDR_OWVAR 21
3129: PUSH
3130: LD_INT 3
3132: ST_TO_ADDR
// hc_gallery =  ;
3133: LD_ADDR_OWVAR 33
3137: PUSH
3138: LD_STRING 
3140: ST_TO_ADDR
// hc_name =  ;
3141: LD_ADDR_OWVAR 26
3145: PUSH
3146: LD_STRING 
3148: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3149: LD_INT 0
3151: PPUSH
3152: LD_INT 4
3154: PPUSH
3155: LD_EXP 36
3159: PPUSH
3160: LD_EXP 37
3164: PPUSH
3165: CALL_OW 12
3169: PPUSH
3170: CALL_OW 380
// un = CreateHuman ;
3174: LD_ADDR_VAR 0 3
3178: PUSH
3179: CALL_OW 44
3183: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3184: LD_VAR 0 3
3188: PPUSH
3189: LD_INT 3
3191: PPUSH
3192: LD_INT 0
3194: PPUSH
3195: CALL_OW 49
// end ;
3199: GO 3114
3201: POP
3202: POP
// end ; end_of_file
3203: LD_VAR 0 1
3207: RET
// export function PrepareArabianCommander ; begin
3208: LD_INT 0
3210: PPUSH
// uc_side = 2 ;
3211: LD_ADDR_OWVAR 20
3215: PUSH
3216: LD_INT 2
3218: ST_TO_ADDR
// uc_nation = 2 ;
3219: LD_ADDR_OWVAR 21
3223: PUSH
3224: LD_INT 2
3226: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3227: LD_ADDR_EXP 26
3231: PUSH
3232: LD_STRING Dietrich
3234: PPUSH
3235: CALL_OW 25
3239: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3240: LD_EXP 26
3244: PPUSH
3245: LD_INT 4
3247: PPUSH
3248: LD_INT 0
3250: PPUSH
3251: CALL_OW 49
// end ;
3255: LD_VAR 0 1
3259: RET
// export function PrepareArabian ; var i , un , veh ; begin
3260: LD_INT 0
3262: PPUSH
3263: PPUSH
3264: PPUSH
3265: PPUSH
// uc_side := 2 ;
3266: LD_ADDR_OWVAR 20
3270: PUSH
3271: LD_INT 2
3273: ST_TO_ADDR
// uc_nation := 2 ;
3274: LD_ADDR_OWVAR 21
3278: PUSH
3279: LD_INT 2
3281: ST_TO_ADDR
// if not Ahmed then
3282: LD_EXP 27
3286: NOT
3287: IFFALSE 3355
// begin InitHc ;
3289: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
3293: LD_INT 1
3295: PPUSH
3296: LD_INT 1
3298: PPUSH
3299: LD_EXP 36
3303: PPUSH
3304: LD_EXP 37
3308: PUSH
3309: LD_INT 1
3311: PLUS
3312: PPUSH
3313: CALL_OW 12
3317: PPUSH
3318: CALL_OW 380
// hc_name := Ahmed Abbasid ;
3322: LD_ADDR_OWVAR 26
3326: PUSH
3327: LD_STRING Ahmed Abbasid
3329: ST_TO_ADDR
// Ahmed := CreateHuman ;
3330: LD_ADDR_EXP 27
3334: PUSH
3335: CALL_OW 44
3339: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
3340: LD_EXP 27
3344: PPUSH
3345: LD_INT 4
3347: PPUSH
3348: LD_INT 0
3350: PPUSH
3351: CALL_OW 49
// end ; for i = 1 to 4 do
3355: LD_ADDR_VAR 0 2
3359: PUSH
3360: DOUBLE
3361: LD_INT 1
3363: DEC
3364: ST_TO_ADDR
3365: LD_INT 4
3367: PUSH
3368: FOR_TO
3369: IFFALSE 3455
// begin uc_side = 2 ;
3371: LD_ADDR_OWVAR 20
3375: PUSH
3376: LD_INT 2
3378: ST_TO_ADDR
// uc_nation = 2 ;
3379: LD_ADDR_OWVAR 21
3383: PUSH
3384: LD_INT 2
3386: ST_TO_ADDR
// hc_gallery =  ;
3387: LD_ADDR_OWVAR 33
3391: PUSH
3392: LD_STRING 
3394: ST_TO_ADDR
// hc_name =  ;
3395: LD_ADDR_OWVAR 26
3399: PUSH
3400: LD_STRING 
3402: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3403: LD_INT 0
3405: PPUSH
3406: LD_INT 2
3408: PPUSH
3409: LD_EXP 36
3413: PPUSH
3414: LD_EXP 37
3418: PPUSH
3419: CALL_OW 12
3423: PPUSH
3424: CALL_OW 380
// un = CreateHuman ;
3428: LD_ADDR_VAR 0 3
3432: PUSH
3433: CALL_OW 44
3437: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3438: LD_VAR 0 3
3442: PPUSH
3443: LD_INT 4
3445: PPUSH
3446: LD_INT 0
3448: PPUSH
3449: CALL_OW 49
// end ;
3453: GO 3368
3455: POP
3456: POP
// for i = 1 to 5 do
3457: LD_ADDR_VAR 0 2
3461: PUSH
3462: DOUBLE
3463: LD_INT 1
3465: DEC
3466: ST_TO_ADDR
3467: LD_INT 5
3469: PUSH
3470: FOR_TO
3471: IFFALSE 3557
// begin uc_side = 2 ;
3473: LD_ADDR_OWVAR 20
3477: PUSH
3478: LD_INT 2
3480: ST_TO_ADDR
// uc_nation = 2 ;
3481: LD_ADDR_OWVAR 21
3485: PUSH
3486: LD_INT 2
3488: ST_TO_ADDR
// hc_gallery =  ;
3489: LD_ADDR_OWVAR 33
3493: PUSH
3494: LD_STRING 
3496: ST_TO_ADDR
// hc_name =  ;
3497: LD_ADDR_OWVAR 26
3501: PUSH
3502: LD_STRING 
3504: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3505: LD_INT 0
3507: PPUSH
3508: LD_INT 1
3510: PPUSH
3511: LD_EXP 36
3515: PPUSH
3516: LD_EXP 37
3520: PPUSH
3521: CALL_OW 12
3525: PPUSH
3526: CALL_OW 380
// un = CreateHuman ;
3530: LD_ADDR_VAR 0 3
3534: PUSH
3535: CALL_OW 44
3539: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3540: LD_VAR 0 3
3544: PPUSH
3545: LD_INT 4
3547: PPUSH
3548: LD_INT 0
3550: PPUSH
3551: CALL_OW 49
// end ;
3555: GO 3470
3557: POP
3558: POP
// for i = 1 to 4 do
3559: LD_ADDR_VAR 0 2
3563: PUSH
3564: DOUBLE
3565: LD_INT 1
3567: DEC
3568: ST_TO_ADDR
3569: LD_INT 4
3571: PUSH
3572: FOR_TO
3573: IFFALSE 3659
// begin uc_side = 2 ;
3575: LD_ADDR_OWVAR 20
3579: PUSH
3580: LD_INT 2
3582: ST_TO_ADDR
// uc_nation = 2 ;
3583: LD_ADDR_OWVAR 21
3587: PUSH
3588: LD_INT 2
3590: ST_TO_ADDR
// hc_gallery =  ;
3591: LD_ADDR_OWVAR 33
3595: PUSH
3596: LD_STRING 
3598: ST_TO_ADDR
// hc_name =  ;
3599: LD_ADDR_OWVAR 26
3603: PUSH
3604: LD_STRING 
3606: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3607: LD_INT 0
3609: PPUSH
3610: LD_INT 4
3612: PPUSH
3613: LD_EXP 36
3617: PPUSH
3618: LD_EXP 37
3622: PPUSH
3623: CALL_OW 12
3627: PPUSH
3628: CALL_OW 380
// un = CreateHuman ;
3632: LD_ADDR_VAR 0 3
3636: PUSH
3637: CALL_OW 44
3641: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3642: LD_VAR 0 3
3646: PPUSH
3647: LD_INT 4
3649: PPUSH
3650: LD_INT 0
3652: PPUSH
3653: CALL_OW 49
// end ;
3657: GO 3572
3659: POP
3660: POP
// for i = 1 to 2 do
3661: LD_ADDR_VAR 0 2
3665: PUSH
3666: DOUBLE
3667: LD_INT 1
3669: DEC
3670: ST_TO_ADDR
3671: LD_INT 2
3673: PUSH
3674: FOR_TO
3675: IFFALSE 3805
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3677: LD_ADDR_VAR 0 4
3681: PUSH
3682: LD_INT 22
3684: PUSH
3685: LD_INT 2
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: PUSH
3692: LD_INT 21
3694: PUSH
3695: LD_INT 2
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: PUSH
3702: LD_INT 58
3704: PUSH
3705: EMPTY
3706: LIST
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: LIST
3712: PPUSH
3713: CALL_OW 69
3717: ST_TO_ADDR
// uc_side = 2 ;
3718: LD_ADDR_OWVAR 20
3722: PUSH
3723: LD_INT 2
3725: ST_TO_ADDR
// uc_nation = 2 ;
3726: LD_ADDR_OWVAR 21
3730: PUSH
3731: LD_INT 2
3733: ST_TO_ADDR
// hc_gallery =  ;
3734: LD_ADDR_OWVAR 33
3738: PUSH
3739: LD_STRING 
3741: ST_TO_ADDR
// hc_name =  ;
3742: LD_ADDR_OWVAR 26
3746: PUSH
3747: LD_STRING 
3749: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3750: LD_INT 0
3752: PPUSH
3753: LD_INT 3
3755: PPUSH
3756: LD_EXP 36
3760: PPUSH
3761: LD_EXP 37
3765: PPUSH
3766: CALL_OW 12
3770: PPUSH
3771: CALL_OW 380
// un = CreateHuman ;
3775: LD_ADDR_VAR 0 3
3779: PUSH
3780: CALL_OW 44
3784: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3785: LD_VAR 0 3
3789: PPUSH
3790: LD_VAR 0 4
3794: PUSH
3795: LD_INT 1
3797: ARRAY
3798: PPUSH
3799: CALL_OW 52
// end ;
3803: GO 3674
3805: POP
3806: POP
// end ;
3807: LD_VAR 0 1
3811: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
3812: LD_INT 0
3814: PPUSH
3815: PPUSH
3816: PPUSH
3817: PPUSH
3818: PPUSH
3819: PPUSH
// for i := 1 to 2 do
3820: LD_ADDR_VAR 0 2
3824: PUSH
3825: DOUBLE
3826: LD_INT 1
3828: DEC
3829: ST_TO_ADDR
3830: LD_INT 2
3832: PUSH
3833: FOR_TO
3834: IFFALSE 3960
// begin uc_side = 5 ;
3836: LD_ADDR_OWVAR 20
3840: PUSH
3841: LD_INT 5
3843: ST_TO_ADDR
// uc_nation = 2 ;
3844: LD_ADDR_OWVAR 21
3848: PUSH
3849: LD_INT 2
3851: ST_TO_ADDR
// vc_chassis := 31 ;
3852: LD_ADDR_OWVAR 37
3856: PUSH
3857: LD_INT 31
3859: ST_TO_ADDR
// vc_control := control_rider ;
3860: LD_ADDR_OWVAR 38
3864: PUSH
3865: LD_INT 4
3867: ST_TO_ADDR
// animal := CreateVehicle ;
3868: LD_ADDR_VAR 0 3
3872: PUSH
3873: CALL_OW 45
3877: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
3878: LD_VAR 0 3
3882: PPUSH
3883: LD_INT 7
3885: PPUSH
3886: LD_INT 0
3888: PPUSH
3889: CALL_OW 49
// hc_gallery =  ;
3893: LD_ADDR_OWVAR 33
3897: PUSH
3898: LD_STRING 
3900: ST_TO_ADDR
// hc_name =  ;
3901: LD_ADDR_OWVAR 26
3905: PUSH
3906: LD_STRING 
3908: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3909: LD_INT 0
3911: PPUSH
3912: LD_INT 11
3914: PPUSH
3915: LD_EXP 36
3919: PPUSH
3920: LD_EXP 37
3924: PPUSH
3925: CALL_OW 12
3929: PPUSH
3930: CALL_OW 380
// un = CreateHuman ;
3934: LD_ADDR_VAR 0 4
3938: PUSH
3939: CALL_OW 44
3943: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
3944: LD_VAR 0 4
3948: PPUSH
3949: LD_VAR 0 3
3953: PPUSH
3954: CALL_OW 52
// end ;
3958: GO 3833
3960: POP
3961: POP
// repeat wait ( 0 0$1 ) ;
3962: LD_INT 35
3964: PPUSH
3965: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
3969: LD_ADDR_VAR 0 5
3973: PUSH
3974: LD_INT 22
3976: PUSH
3977: LD_INT 1
3979: PUSH
3980: EMPTY
3981: LIST
3982: LIST
3983: PPUSH
3984: CALL_OW 69
3988: PPUSH
3989: LD_VAR 0 2
3993: PPUSH
3994: CALL_OW 74
3998: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
3999: LD_ADDR_VAR 0 6
4003: PUSH
4004: LD_INT 22
4006: PUSH
4007: LD_INT 1
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 2
4016: PUSH
4017: LD_INT 59
4019: PUSH
4020: EMPTY
4021: LIST
4022: PUSH
4023: LD_INT 21
4025: PUSH
4026: LD_INT 1
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PUSH
4033: LD_INT 21
4035: PUSH
4036: LD_INT 2
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PUSH
4053: EMPTY
4054: LIST
4055: PPUSH
4056: CALL_OW 69
4060: PPUSH
4061: LD_VAR 0 2
4065: PPUSH
4066: CALL_OW 74
4070: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4071: LD_ADDR_VAR 0 2
4075: PUSH
4076: LD_INT 22
4078: PUSH
4079: LD_INT 5
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PUSH
4086: LD_INT 25
4088: PUSH
4089: LD_INT 11
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: PPUSH
4100: CALL_OW 69
4104: PUSH
4105: FOR_IN
4106: IFFALSE 4176
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4108: LD_VAR 0 2
4112: PPUSH
4113: LD_VAR 0 5
4117: PPUSH
4118: CALL_OW 296
4122: PUSH
4123: LD_INT 8
4125: PLUS
4126: PUSH
4127: LD_VAR 0 2
4131: PPUSH
4132: LD_VAR 0 6
4136: PPUSH
4137: CALL_OW 296
4141: LESS
4142: IFFALSE 4160
// ComAttackUnit ( i , target1 ) else
4144: LD_VAR 0 2
4148: PPUSH
4149: LD_VAR 0 5
4153: PPUSH
4154: CALL_OW 115
4158: GO 4174
// ComAttackUnit ( i , target2 ) ;
4160: LD_VAR 0 2
4164: PPUSH
4165: LD_VAR 0 6
4169: PPUSH
4170: CALL_OW 115
// end ;
4174: GO 4105
4176: POP
4177: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
4178: LD_INT 22
4180: PUSH
4181: LD_INT 5
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 25
4190: PUSH
4191: LD_INT 11
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: PPUSH
4202: CALL_OW 69
4206: PUSH
4207: LD_INT 0
4209: EQUAL
4210: PUSH
4211: LD_INT 22
4213: PUSH
4214: LD_INT 1
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PPUSH
4221: CALL_OW 69
4225: PUSH
4226: LD_INT 0
4228: EQUAL
4229: OR
4230: IFFALSE 3962
// end ; end_of_file
4232: LD_VAR 0 1
4236: RET
// every 1 do
4237: GO 4239
4239: DISABLE
// begin InGameOn ;
4240: CALL_OW 8
// RevealFogArea ( 1 , EpsilonTerrain ) ;
4244: LD_INT 1
4246: PPUSH
4247: LD_INT 19
4249: PPUSH
4250: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
4254: LD_EXP 11
4258: PPUSH
4259: CALL_OW 87
// wait ( 0 0$3 ) ;
4263: LD_INT 105
4265: PPUSH
4266: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
4270: LD_EXP 1
4274: PPUSH
4275: CALL_OW 310
4279: PPUSH
4280: CALL_OW 85
// Wait ( 0 0$1 ) ;
4284: LD_INT 35
4286: PPUSH
4287: CALL_OW 67
// if IsOk ( Gary ) then
4291: LD_EXP 10
4295: PPUSH
4296: CALL_OW 302
4300: IFFALSE 4338
// begin Say ( Gary , D2-Gary-1 ) ;
4302: LD_EXP 10
4306: PPUSH
4307: LD_STRING D2-Gary-1
4309: PPUSH
4310: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
4314: LD_EXP 1
4318: PPUSH
4319: LD_STRING D2-JMM-1
4321: PPUSH
4322: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
4326: LD_EXP 10
4330: PPUSH
4331: LD_STRING D2-Gary-2
4333: PPUSH
4334: CALL_OW 88
// end ; InGameOff ;
4338: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
4342: LD_STRING M1
4344: PPUSH
4345: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
4349: LD_INT 38
4351: PPUSH
4352: LD_INT 1
4354: PPUSH
4355: LD_INT 100
4357: PPUSH
4358: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
4362: LD_INT 47
4364: PPUSH
4365: LD_INT 1
4367: PPUSH
4368: LD_INT 50
4370: PPUSH
4371: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
4375: LD_INT 47
4377: PPUSH
4378: LD_INT 3
4380: PPUSH
4381: LD_INT 50
4383: PPUSH
4384: CALL_OW 291
// SaveForQuickRestart ;
4388: CALL_OW 22
// end ;
4392: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
4393: LD_EXP 1
4397: PPUSH
4398: LD_EXP 11
4402: PPUSH
4403: CALL_OW 296
4407: PUSH
4408: LD_INT 15
4410: LESS
4411: IFFALSE 4887
4413: GO 4415
4415: DISABLE
// begin InGameOn ;
4416: CALL_OW 8
// ComExitVehicle ( JMM ) ;
4420: LD_EXP 1
4424: PPUSH
4425: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4429: LD_EXP 1
4433: PPUSH
4434: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
4438: LD_EXP 1
4442: PPUSH
4443: LD_EXP 11
4447: PPUSH
4448: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
4452: LD_INT 35
4454: PPUSH
4455: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
4459: LD_EXP 11
4463: PUSH
4464: LD_EXP 13
4468: PUSH
4469: LD_EXP 12
4473: PUSH
4474: LD_EXP 14
4478: PUSH
4479: LD_EXP 8
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: PPUSH
4491: LD_EXP 1
4495: PPUSH
4496: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
4500: LD_EXP 1
4504: PPUSH
4505: LD_EXP 11
4509: PPUSH
4510: CALL_OW 296
4514: PUSH
4515: LD_INT 5
4517: LESS
4518: IFFALSE 4452
// ComTurnUnit ( JMM , Simms ) ;
4520: LD_EXP 1
4524: PPUSH
4525: LD_EXP 11
4529: PPUSH
4530: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
4534: LD_EXP 11
4538: PUSH
4539: LD_EXP 13
4543: PUSH
4544: LD_EXP 12
4548: PUSH
4549: LD_EXP 14
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: PPUSH
4560: LD_EXP 1
4564: PPUSH
4565: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
4569: LD_EXP 1
4573: PUSH
4574: LD_EXP 11
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
4587: LD_EXP 11
4591: PPUSH
4592: LD_STRING D2a-Sim-1
4594: PPUSH
4595: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
4599: LD_EXP 1
4603: PPUSH
4604: LD_STRING D2a-JMM-1
4606: PPUSH
4607: CALL_OW 88
// if IsOk ( Joan ) then
4611: LD_EXP 13
4615: PPUSH
4616: CALL_OW 302
4620: IFFALSE 4672
// begin ComTurnUnit ( JMM , Joan ) ;
4622: LD_EXP 1
4626: PPUSH
4627: LD_EXP 13
4631: PPUSH
4632: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
4636: LD_EXP 13
4640: PPUSH
4641: LD_STRING D2b-Joan-1
4643: PPUSH
4644: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
4648: LD_EXP 1
4652: PPUSH
4653: LD_STRING D2b-JMM-1
4655: PPUSH
4656: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
4660: LD_EXP 13
4664: PPUSH
4665: LD_STRING D2b-Joan-2
4667: PPUSH
4668: CALL_OW 88
// end ; if IsOk ( Denis ) then
4672: LD_EXP 12
4676: PPUSH
4677: CALL_OW 302
4681: IFFALSE 4709
// begin ComTurnUnit ( JMM , Denis ) ;
4683: LD_EXP 1
4687: PPUSH
4688: LD_EXP 12
4692: PPUSH
4693: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
4697: LD_EXP 12
4701: PPUSH
4702: LD_STRING D2c-Den-1
4704: PPUSH
4705: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
4709: LD_EXP 8
4713: PPUSH
4714: CALL_OW 302
4718: PUSH
4719: LD_STRING 08_Kikuchi
4721: PPUSH
4722: CALL_OW 28
4726: NOT
4727: AND
4728: IFFALSE 4797
// begin repeat wait ( 0 0$1 ) ;
4730: LD_INT 35
4732: PPUSH
4733: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
4737: LD_EXP 8
4741: PPUSH
4742: LD_EXP 1
4746: PPUSH
4747: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
4751: LD_EXP 1
4755: PPUSH
4756: LD_EXP 8
4760: PPUSH
4761: CALL_OW 296
4765: PUSH
4766: LD_INT 5
4768: LESS
4769: IFFALSE 4730
// ComTurnUnit ( JMM , Kikuchi ) ;
4771: LD_EXP 1
4775: PPUSH
4776: LD_EXP 8
4780: PPUSH
4781: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
4785: LD_EXP 8
4789: PPUSH
4790: LD_STRING D3b-Yam-1
4792: PPUSH
4793: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4797: LD_EXP 14
4801: PPUSH
4802: CALL_OW 302
4806: IFFALSE 4846
// begin ComTurnUnit ( JMM , Khatam ) ;
4808: LD_EXP 1
4812: PPUSH
4813: LD_EXP 14
4817: PPUSH
4818: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4822: LD_EXP 1
4826: PPUSH
4827: LD_STRING D2c-JMM-1
4829: PPUSH
4830: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4834: LD_EXP 14
4838: PPUSH
4839: LD_STRING D2c-Khat-1
4841: PPUSH
4842: CALL_OW 88
// end ; InGameOff ;
4846: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
4850: LD_INT 22
4852: PUSH
4853: LD_INT 4
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PPUSH
4860: CALL_OW 69
4864: PPUSH
4865: LD_INT 1
4867: PPUSH
4868: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
4872: LD_STRING M1a
4874: PPUSH
4875: CALL_OW 337
// joinEpsilon = 1 ;
4879: LD_ADDR_EXP 29
4883: PUSH
4884: LD_INT 1
4886: ST_TO_ADDR
// end ;
4887: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do
4888: LD_INT 38
4890: PPUSH
4891: LD_INT 1
4893: PPUSH
4894: CALL_OW 289
4898: PUSH
4899: LD_INT 0
4901: EQUAL
4902: PUSH
4903: LD_INT 47
4905: PPUSH
4906: LD_INT 1
4908: PPUSH
4909: CALL_OW 289
4913: PUSH
4914: LD_INT 0
4916: EQUAL
4917: AND
4918: PUSH
4919: LD_INT 47
4921: PPUSH
4922: LD_INT 2
4924: PPUSH
4925: CALL_OW 289
4929: PUSH
4930: LD_INT 0
4932: EQUAL
4933: AND
4934: IFFALSE 4959
4936: GO 4938
4938: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 62 , 6 ) ;
4939: LD_INT 38
4941: PUSH
4942: LD_INT 47
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PPUSH
4949: LD_INT 62
4951: PPUSH
4952: LD_INT 6
4954: PPUSH
4955: CALL_OW 111
4959: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
4960: LD_EXP 61
4964: PUSH
4965: LD_INT 1
4967: EQUAL
4968: IFFALSE 6100
4970: GO 4972
4972: DISABLE
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
4978: LD_ADDR_VAR 0 1
4982: PUSH
4983: LD_INT 22
4985: PUSH
4986: LD_INT 1
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 25
4995: PUSH
4996: LD_INT 4
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: LD_INT 26
5005: PUSH
5006: LD_INT 1
5008: PUSH
5009: EMPTY
5010: LIST
5011: LIST
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: LIST
5017: PPUSH
5018: CALL_OW 69
5022: PUSH
5023: LD_EXP 1
5027: PUSH
5028: LD_EXP 2
5032: PUSH
5033: LD_EXP 3
5037: PUSH
5038: LD_EXP 4
5042: PUSH
5043: LD_EXP 5
5047: PUSH
5048: LD_EXP 6
5052: PUSH
5053: LD_EXP 7
5057: PUSH
5058: LD_EXP 8
5062: PUSH
5063: LD_EXP 9
5067: PUSH
5068: LD_EXP 10
5072: PUSH
5073: LD_EXP 11
5077: PUSH
5078: LD_EXP 12
5082: PUSH
5083: LD_EXP 13
5087: PUSH
5088: LD_EXP 14
5092: PUSH
5093: LD_EXP 15
5097: PUSH
5098: LD_EXP 16
5102: PUSH
5103: LD_EXP 17
5107: PUSH
5108: LD_EXP 18
5112: PUSH
5113: LD_EXP 19
5117: PUSH
5118: LD_EXP 24
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: DIFF
5145: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5146: LD_ADDR_VAR 0 2
5150: PUSH
5151: LD_INT 22
5153: PUSH
5154: LD_INT 1
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: PUSH
5161: LD_INT 26
5163: PUSH
5164: LD_INT 1
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: PUSH
5171: LD_INT 2
5173: PUSH
5174: LD_INT 25
5176: PUSH
5177: LD_INT 1
5179: PUSH
5180: EMPTY
5181: LIST
5182: LIST
5183: PUSH
5184: LD_INT 25
5186: PUSH
5187: LD_INT 2
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: PUSH
5194: LD_INT 25
5196: PUSH
5197: LD_INT 3
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: LIST
5214: PPUSH
5215: CALL_OW 69
5219: PUSH
5220: LD_EXP 1
5224: PUSH
5225: LD_EXP 2
5229: PUSH
5230: LD_EXP 3
5234: PUSH
5235: LD_EXP 4
5239: PUSH
5240: LD_EXP 5
5244: PUSH
5245: LD_EXP 6
5249: PUSH
5250: LD_EXP 7
5254: PUSH
5255: LD_EXP 8
5259: PUSH
5260: LD_EXP 9
5264: PUSH
5265: LD_EXP 10
5269: PUSH
5270: LD_EXP 11
5274: PUSH
5275: LD_EXP 12
5279: PUSH
5280: LD_EXP 13
5284: PUSH
5285: LD_EXP 14
5289: PUSH
5290: LD_EXP 15
5294: PUSH
5295: LD_EXP 16
5299: PUSH
5300: LD_EXP 17
5304: PUSH
5305: LD_EXP 18
5309: PUSH
5310: LD_EXP 19
5314: PUSH
5315: LD_EXP 24
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: LIST
5341: DIFF
5342: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
5343: LD_EXP 10
5347: PUSH
5348: LD_VAR 0 2
5352: OR
5353: PUSH
5354: LD_EXP 17
5358: PUSH
5359: LD_VAR 0 1
5363: OR
5364: AND
5365: IFFALSE 5584
// begin DialogueOn ;
5367: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
5371: LD_EXP 17
5375: PPUSH
5376: CALL_OW 302
5380: IFFALSE 5396
// Say ( DeltaDoctor , D3-Sci1-1 ) else
5382: LD_EXP 17
5386: PPUSH
5387: LD_STRING D3-Sci1-1
5389: PPUSH
5390: CALL_OW 88
5394: GO 5408
// Say ( tmp1 , D3-Sci1-1 ) ;
5396: LD_VAR 0 1
5400: PPUSH
5401: LD_STRING D3-Sci1-1
5403: PPUSH
5404: CALL_OW 88
// if IsOk ( Gary ) then
5408: LD_EXP 10
5412: PPUSH
5413: CALL_OW 302
5417: IFFALSE 5433
// Say ( Gary , D3-Gary-1 ) else
5419: LD_EXP 10
5423: PPUSH
5424: LD_STRING D3-Gary-1
5426: PPUSH
5427: CALL_OW 88
5431: GO 5445
// Say ( tmp2 , D3-Gary-1 ) ;
5433: LD_VAR 0 2
5437: PPUSH
5438: LD_STRING D3-Gary-1
5440: PPUSH
5441: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5445: LD_EXP 17
5449: PPUSH
5450: CALL_OW 302
5454: IFFALSE 5470
// Say ( DeltaDoctor , D3-Sci1-2 ) else
5456: LD_EXP 17
5460: PPUSH
5461: LD_STRING D3-Sci1-2
5463: PPUSH
5464: CALL_OW 88
5468: GO 5482
// Say ( tmp1 , D3-Sci1-2 ) ;
5470: LD_VAR 0 1
5474: PPUSH
5475: LD_STRING D3-Sci1-2
5477: PPUSH
5478: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
5482: LD_EXP 1
5486: PPUSH
5487: LD_STRING D3-JMM-2
5489: PPUSH
5490: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5494: LD_EXP 17
5498: PPUSH
5499: CALL_OW 302
5503: IFFALSE 5519
// Say ( DeltaDoctor , D3-Sci1-3 ) else
5505: LD_EXP 17
5509: PPUSH
5510: LD_STRING D3-Sci1-3
5512: PPUSH
5513: CALL_OW 88
5517: GO 5531
// Say ( tmp1 , D3-Sci1-3 ) ;
5519: LD_VAR 0 1
5523: PPUSH
5524: LD_STRING D3-Sci1-3
5526: PPUSH
5527: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
5531: LD_EXP 1
5535: PPUSH
5536: LD_STRING D3-JMM-3
5538: PPUSH
5539: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5543: LD_EXP 17
5547: PPUSH
5548: CALL_OW 302
5552: IFFALSE 5568
// Say ( DeltaDoctor , D3-Sci1-4 ) else
5554: LD_EXP 17
5558: PPUSH
5559: LD_STRING D3-Sci1-4
5561: PPUSH
5562: CALL_OW 88
5566: GO 5580
// Say ( tmp1 , D3-Sci1-4 ) ;
5568: LD_VAR 0 1
5572: PPUSH
5573: LD_STRING D3-Sci1-4
5575: PPUSH
5576: CALL_OW 88
// DialogueOff ;
5580: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
5584: LD_INT 12
5586: PPUSH
5587: LD_INT 1
5589: PPUSH
5590: LD_INT 1
5592: PPUSH
5593: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
5597: LD_INT 32
5599: PPUSH
5600: LD_INT 1
5602: PPUSH
5603: LD_INT 1
5605: PPUSH
5606: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
5610: LD_INT 12
5612: PPUSH
5613: LD_INT 1
5615: PPUSH
5616: LD_INT 1
5618: PPUSH
5619: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
5623: LD_INT 33
5625: PPUSH
5626: LD_INT 1
5628: PPUSH
5629: LD_INT 1
5631: PPUSH
5632: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
5636: LD_STRING M2
5638: PPUSH
5639: CALL_OW 337
// wait ( 3 3$0 ) ;
5643: LD_INT 6300
5645: PPUSH
5646: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5650: LD_INT 35
5652: PPUSH
5653: CALL_OW 67
// until not InBattle ( 1 ) ;
5657: LD_INT 1
5659: PPUSH
5660: CALL_OW 463
5664: NOT
5665: IFFALSE 5650
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
5667: LD_EXP 11
5671: PPUSH
5672: CALL_OW 302
5676: PUSH
5677: LD_EXP 17
5681: PPUSH
5682: CALL_OW 302
5686: AND
5687: IFFALSE 5856
// begin DialogueOn ;
5689: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5693: LD_EXP 11
5697: PPUSH
5698: LD_STRING D3a-Sim-1
5700: PPUSH
5701: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
5705: LD_EXP 17
5709: PPUSH
5710: LD_STRING D3a-Sci1-1
5712: PPUSH
5713: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5717: LD_EXP 11
5721: PPUSH
5722: LD_STRING D3a-Sim-2
5724: PPUSH
5725: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
5729: LD_EXP 17
5733: PPUSH
5734: LD_STRING D3a-Sci1-2
5736: PPUSH
5737: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5741: LD_EXP 11
5745: PPUSH
5746: LD_STRING D3a-Sim-3
5748: PPUSH
5749: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
5753: LD_EXP 17
5757: PPUSH
5758: LD_STRING D3a-Sci1-3
5760: PPUSH
5761: CALL_OW 88
// if IsOK ( Joan ) then
5765: LD_EXP 13
5769: PPUSH
5770: CALL_OW 302
5774: IFFALSE 5790
// Say ( Simms , D3a-Sim-4 ) else
5776: LD_EXP 11
5780: PPUSH
5781: LD_STRING D3a-Sim-4
5783: PPUSH
5784: CALL_OW 88
5788: GO 5802
// Say ( Simms , D3a-Sim-4a ) ;
5790: LD_EXP 11
5794: PPUSH
5795: LD_STRING D3a-Sim-4a
5797: PPUSH
5798: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
5802: LD_EXP 17
5806: PPUSH
5807: LD_STRING D3a-Sci1-4
5809: PPUSH
5810: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
5814: LD_EXP 11
5818: PPUSH
5819: LD_STRING D3a-Sim-5
5821: PPUSH
5822: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
5826: LD_EXP 17
5830: PPUSH
5831: LD_STRING D3a-Sci1-5
5833: PPUSH
5834: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
5838: LD_EXP 11
5842: PPUSH
5843: LD_STRING D3a-Sim-6
5845: PPUSH
5846: CALL_OW 88
// DialogueOff ;
5850: CALL_OW 7
// end else
5854: GO 6100
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
5856: LD_ADDR_VAR 0 3
5860: PUSH
5861: LD_INT 22
5863: PUSH
5864: LD_INT 1
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: PUSH
5871: LD_INT 25
5873: PUSH
5874: LD_INT 4
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: PPUSH
5885: CALL_OW 69
5889: PUSH
5890: LD_EXP 11
5894: PUSH
5895: LD_EXP 14
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: DIFF
5904: ST_TO_ADDR
// if tmp3 > 0 then
5905: LD_VAR 0 3
5909: PUSH
5910: LD_INT 0
5912: GREATER
5913: IFFALSE 6100
// begin DialogueOn ;
5915: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5919: LD_EXP 11
5923: PPUSH
5924: LD_STRING D3a-Sim-1
5926: PPUSH
5927: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
5931: LD_VAR 0 3
5935: PUSH
5936: LD_INT 1
5938: ARRAY
5939: PPUSH
5940: LD_STRING D3a-Sci1-1
5942: PPUSH
5943: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5947: LD_EXP 11
5951: PPUSH
5952: LD_STRING D3a-Sim-2
5954: PPUSH
5955: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
5959: LD_VAR 0 3
5963: PUSH
5964: LD_INT 1
5966: ARRAY
5967: PPUSH
5968: LD_STRING D3a-Sci1-2
5970: PPUSH
5971: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5975: LD_EXP 11
5979: PPUSH
5980: LD_STRING D3a-Sim-3
5982: PPUSH
5983: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
5987: LD_VAR 0 3
5991: PUSH
5992: LD_INT 1
5994: ARRAY
5995: PPUSH
5996: LD_STRING D3a-Sci1-3
5998: PPUSH
5999: CALL_OW 88
// if IsOK ( Joan ) then
6003: LD_EXP 13
6007: PPUSH
6008: CALL_OW 302
6012: IFFALSE 6028
// Say ( Simms , D3a-Sim-4 ) else
6014: LD_EXP 11
6018: PPUSH
6019: LD_STRING D3a-Sim-4
6021: PPUSH
6022: CALL_OW 88
6026: GO 6040
// Say ( Simms , D3a-Sim-4a ) ;
6028: LD_EXP 11
6032: PPUSH
6033: LD_STRING D3a-Sim-4a
6035: PPUSH
6036: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
6040: LD_VAR 0 3
6044: PUSH
6045: LD_INT 1
6047: ARRAY
6048: PPUSH
6049: LD_STRING D3a-Sci1-4
6051: PPUSH
6052: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6056: LD_EXP 11
6060: PPUSH
6061: LD_STRING D3a-Sim-5
6063: PPUSH
6064: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
6068: LD_VAR 0 3
6072: PUSH
6073: LD_INT 1
6075: ARRAY
6076: PPUSH
6077: LD_STRING D3a-Sci1-5
6079: PPUSH
6080: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6084: LD_EXP 11
6088: PPUSH
6089: LD_STRING D3a-Sim-6
6091: PPUSH
6092: CALL_OW 88
// DialogueOff ;
6096: CALL_OW 7
// end ; end ; end ;
6100: PPOPN 3
6102: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
6103: LD_EXP 29
6107: PUSH
6108: LD_INT 1
6110: EQUAL
6111: IFFALSE 6431
6113: GO 6115
6115: DISABLE
6116: LD_INT 0
6118: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
6119: LD_EXP 18
6123: PPUSH
6124: LD_STRING D4-FSol1-1
6126: PPUSH
6127: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
6131: LD_STRING M3
6133: PPUSH
6134: CALL_OW 337
// PrepareRussians ;
6138: CALL 2743 0 0
// rnd = Rand ( 1 , 100 ) ;
6142: LD_ADDR_VAR 0 1
6146: PUSH
6147: LD_INT 1
6149: PPUSH
6150: LD_INT 100
6152: PPUSH
6153: CALL_OW 12
6157: ST_TO_ADDR
// if difficulty = 1 then
6158: LD_OWVAR 67
6162: PUSH
6163: LD_INT 1
6165: EQUAL
6166: IFFALSE 6249
// begin if rnd > 0 and rnd < 51 then
6168: LD_VAR 0 1
6172: PUSH
6173: LD_INT 0
6175: GREATER
6176: PUSH
6177: LD_VAR 0 1
6181: PUSH
6182: LD_INT 51
6184: LESS
6185: AND
6186: IFFALSE 6195
// BuildRussianBase ( 2 ) ;
6188: LD_INT 2
6190: PPUSH
6191: CALL 10323 0 1
// if rnd > 50 and rnd < 81 then
6195: LD_VAR 0 1
6199: PUSH
6200: LD_INT 50
6202: GREATER
6203: PUSH
6204: LD_VAR 0 1
6208: PUSH
6209: LD_INT 81
6211: LESS
6212: AND
6213: IFFALSE 6222
// BuildRussianBase ( 1 ) ;
6215: LD_INT 1
6217: PPUSH
6218: CALL 10323 0 1
// if rnd > 80 and rnd < 101 then
6222: LD_VAR 0 1
6226: PUSH
6227: LD_INT 80
6229: GREATER
6230: PUSH
6231: LD_VAR 0 1
6235: PUSH
6236: LD_INT 101
6238: LESS
6239: AND
6240: IFFALSE 6249
// BuildRussianBase ( 3 ) ;
6242: LD_INT 3
6244: PPUSH
6245: CALL 10323 0 1
// end ; if difficulty = 2 then
6249: LD_OWVAR 67
6253: PUSH
6254: LD_INT 2
6256: EQUAL
6257: IFFALSE 6340
// begin if rnd > 0 and rnd < 61 then
6259: LD_VAR 0 1
6263: PUSH
6264: LD_INT 0
6266: GREATER
6267: PUSH
6268: LD_VAR 0 1
6272: PUSH
6273: LD_INT 61
6275: LESS
6276: AND
6277: IFFALSE 6286
// BuildRussianBase ( 2 ) ;
6279: LD_INT 2
6281: PPUSH
6282: CALL 10323 0 1
// if rnd > 60 and rnd < 81 then
6286: LD_VAR 0 1
6290: PUSH
6291: LD_INT 60
6293: GREATER
6294: PUSH
6295: LD_VAR 0 1
6299: PUSH
6300: LD_INT 81
6302: LESS
6303: AND
6304: IFFALSE 6313
// BuildRussianBase ( 1 ) ;
6306: LD_INT 1
6308: PPUSH
6309: CALL 10323 0 1
// if rnd > 80 and rnd < 101 then
6313: LD_VAR 0 1
6317: PUSH
6318: LD_INT 80
6320: GREATER
6321: PUSH
6322: LD_VAR 0 1
6326: PUSH
6327: LD_INT 101
6329: LESS
6330: AND
6331: IFFALSE 6340
// BuildRussianBase ( 3 ) ;
6333: LD_INT 3
6335: PPUSH
6336: CALL 10323 0 1
// end ; if difficulty = 3 then
6340: LD_OWVAR 67
6344: PUSH
6345: LD_INT 3
6347: EQUAL
6348: IFFALSE 6431
// begin if rnd > 0 and rnd < 71 then
6350: LD_VAR 0 1
6354: PUSH
6355: LD_INT 0
6357: GREATER
6358: PUSH
6359: LD_VAR 0 1
6363: PUSH
6364: LD_INT 71
6366: LESS
6367: AND
6368: IFFALSE 6377
// BuildRussianBase ( 3 ) ;
6370: LD_INT 3
6372: PPUSH
6373: CALL 10323 0 1
// if rnd > 70 and rnd < 81 then
6377: LD_VAR 0 1
6381: PUSH
6382: LD_INT 70
6384: GREATER
6385: PUSH
6386: LD_VAR 0 1
6390: PUSH
6391: LD_INT 81
6393: LESS
6394: AND
6395: IFFALSE 6404
// BuildRussianBase ( 2 ) ;
6397: LD_INT 2
6399: PPUSH
6400: CALL 10323 0 1
// if rnd > 80 and rnd < 101 then
6404: LD_VAR 0 1
6408: PUSH
6409: LD_INT 80
6411: GREATER
6412: PUSH
6413: LD_VAR 0 1
6417: PUSH
6418: LD_INT 101
6420: LESS
6421: AND
6422: IFFALSE 6431
// BuildRussianBase ( 1 ) ;
6424: LD_INT 1
6426: PPUSH
6427: CALL 10323 0 1
// end ; end ;
6431: PPOPN 1
6433: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
6434: LD_INT 54
6436: PPUSH
6437: LD_INT 1
6439: PPUSH
6440: CALL_OW 321
6444: PUSH
6445: LD_INT 2
6447: EQUAL
6448: PUSH
6449: LD_INT 21
6451: PPUSH
6452: LD_INT 1
6454: PPUSH
6455: CALL_OW 321
6459: PUSH
6460: LD_INT 2
6462: EQUAL
6463: OR
6464: PUSH
6465: LD_INT 22
6467: PPUSH
6468: LD_INT 1
6470: PPUSH
6471: CALL_OW 321
6475: PUSH
6476: LD_INT 2
6478: EQUAL
6479: OR
6480: IFFALSE 6792
6482: GO 6484
6484: DISABLE
6485: LD_INT 0
6487: PPUSH
6488: PPUSH
// begin if IsOk ( DeltaDoctor ) then
6489: LD_EXP 17
6493: PPUSH
6494: CALL_OW 302
6498: IFFALSE 6512
// tmp := DeltaDoctor else
6500: LD_ADDR_VAR 0 2
6504: PUSH
6505: LD_EXP 17
6509: ST_TO_ADDR
6510: GO 6522
// tmp := Denis ;
6512: LD_ADDR_VAR 0 2
6516: PUSH
6517: LD_EXP 12
6521: ST_TO_ADDR
// if tmp then
6522: LD_VAR 0 2
6526: IFFALSE 6620
// begin DialogueOn ;
6528: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
6532: LD_EXP 1
6536: PPUSH
6537: LD_STRING D6-JMM-1
6539: PPUSH
6540: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
6544: LD_VAR 0 2
6548: PPUSH
6549: LD_STRING D6-Sci1-1
6551: PPUSH
6552: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
6556: LD_EXP 1
6560: PPUSH
6561: LD_STRING D6-JMM-2
6563: PPUSH
6564: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
6568: LD_VAR 0 2
6572: PPUSH
6573: LD_STRING D6-Sci1-2
6575: PPUSH
6576: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
6580: LD_EXP 1
6584: PPUSH
6585: LD_STRING D6-JMM-3
6587: PPUSH
6588: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
6592: LD_VAR 0 2
6596: PPUSH
6597: LD_STRING D6-Sci1-3
6599: PPUSH
6600: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
6604: LD_EXP 1
6608: PPUSH
6609: LD_STRING D6-JMM-4
6611: PPUSH
6612: CALL_OW 88
// DialogueOff ;
6616: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
6620: LD_INT 1050
6622: PPUSH
6623: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
6627: LD_EXP 49
6631: PUSH
6632: LD_INT 0
6634: EQUAL
6635: PUSH
6636: LD_EXP 14
6640: PPUSH
6641: CALL_OW 302
6645: AND
6646: IFFALSE 6704
// begin DialogueOn ;
6648: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
6652: LD_EXP 27
6656: PPUSH
6657: LD_STRING D5-Ar1-1
6659: PPUSH
6660: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
6664: LD_EXP 26
6668: PPUSH
6669: LD_STRING D5-Diet-1
6671: PPUSH
6672: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
6676: LD_EXP 27
6680: PPUSH
6681: LD_STRING D5-Ar1-2
6683: PPUSH
6684: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
6688: LD_EXP 26
6692: PPUSH
6693: LD_STRING D5-Diet-2
6695: PPUSH
6696: CALL_OW 88
// DialogueOff ;
6700: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
6704: LD_INT 2100
6706: PUSH
6707: LD_INT 3150
6709: PUSH
6710: LD_INT 4200
6712: PUSH
6713: LD_INT 5250
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: PUSH
6722: LD_INT 1
6724: PPUSH
6725: LD_INT 4
6727: PPUSH
6728: CALL_OW 12
6732: ARRAY
6733: PPUSH
6734: CALL_OW 67
// if arabianTrait = 0 then
6738: LD_EXP 49
6742: PUSH
6743: LD_INT 0
6745: EQUAL
6746: IFFALSE 6792
// begin arabianTrait = 1 ;
6748: LD_ADDR_EXP 49
6752: PUSH
6753: LD_INT 1
6755: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
6756: LD_INT 2
6758: PPUSH
6759: LD_INT 3
6761: PPUSH
6762: LD_INT 1
6764: PPUSH
6765: LD_INT 1
6767: PPUSH
6768: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
6772: LD_INT 2
6774: PPUSH
6775: LD_INT 6
6777: PPUSH
6778: LD_INT 1
6780: PPUSH
6781: LD_INT 1
6783: PPUSH
6784: CALL_OW 80
// PrepareArabianTrait ;
6788: CALL 6795 0 0
// end ; end ;
6792: PPOPN 2
6794: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian ; begin
6795: LD_INT 0
6797: PPUSH
6798: PPUSH
6799: PPUSH
6800: PPUSH
6801: PPUSH
6802: PPUSH
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) ) ;
6803: LD_INT 22
6805: PUSH
6806: LD_INT 2
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 25
6815: PUSH
6816: LD_INT 4
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PPUSH
6827: CALL_OW 69
6831: PPUSH
6832: CALL_OW 122
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) ) ;
6836: LD_INT 22
6838: PUSH
6839: LD_INT 2
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: LD_INT 25
6848: PUSH
6849: LD_INT 3
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PPUSH
6860: CALL_OW 69
6864: PPUSH
6865: CALL_OW 121
// SetClass ( Dietrich , 8 ) ;
6869: LD_EXP 26
6873: PPUSH
6874: LD_INT 8
6876: PPUSH
6877: CALL_OW 336
// wait ( 0 0$3 ) ;
6881: LD_INT 105
6883: PPUSH
6884: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
6888: LD_INT 76
6890: PPUSH
6891: LD_INT 19
6893: PPUSH
6894: CALL_OW 84
// DialogueOn ;
6898: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
6902: LD_INT 22
6904: PUSH
6905: LD_INT 1
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PUSH
6912: LD_INT 26
6914: PUSH
6915: LD_INT 1
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PUSH
6922: LD_INT 2
6924: PUSH
6925: LD_INT 25
6927: PUSH
6928: LD_INT 1
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: PUSH
6935: LD_INT 25
6937: PUSH
6938: LD_INT 2
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PUSH
6945: LD_INT 25
6947: PUSH
6948: LD_INT 3
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 25
6957: PUSH
6958: LD_INT 4
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 25
6967: PUSH
6968: LD_INT 5
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: LIST
6987: PPUSH
6988: CALL_OW 69
6992: PPUSH
6993: LD_STRING D8-Sol1-1
6995: PPUSH
6996: LD_STRING D8-Sol1-1
6998: PPUSH
6999: CALL 9665 0 3
// if IsOK ( DeltaDoctor ) then
7003: LD_EXP 17
7007: PPUSH
7008: CALL_OW 302
7012: IFFALSE 7028
// Say ( DeltaDoctor , D8-Sci1-1 ) else
7014: LD_EXP 17
7018: PPUSH
7019: LD_STRING D8-Sci1-1
7021: PPUSH
7022: CALL_OW 88
7026: GO 7129
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7028: LD_INT 22
7030: PUSH
7031: LD_INT 1
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 26
7040: PUSH
7041: LD_INT 1
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 2
7050: PUSH
7051: LD_INT 25
7053: PUSH
7054: LD_INT 1
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 25
7063: PUSH
7064: LD_INT 2
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: LD_INT 25
7073: PUSH
7074: LD_INT 3
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PUSH
7081: LD_INT 25
7083: PUSH
7084: LD_INT 4
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: LD_INT 25
7093: PUSH
7094: LD_INT 5
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: LIST
7113: PPUSH
7114: CALL_OW 69
7118: PPUSH
7119: LD_STRING D8-Sol1-1
7121: PPUSH
7122: LD_STRING D8-Sol1-1
7124: PPUSH
7125: CALL 9665 0 3
// Say ( JMM , D8-JMM-1 ) ;
7129: LD_EXP 1
7133: PPUSH
7134: LD_STRING D8-JMM-1
7136: PPUSH
7137: CALL_OW 88
// DialogueOff ;
7141: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
7145: LD_INT 2
7147: PPUSH
7148: LD_INT 2
7150: PPUSH
7151: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
7155: LD_INT 1
7157: PPUSH
7158: LD_INT 2
7160: PPUSH
7161: LD_INT 2
7163: PPUSH
7164: LD_INT 1
7166: PPUSH
7167: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7171: LD_INT 3
7173: PPUSH
7174: LD_INT 2
7176: PPUSH
7177: LD_INT 1
7179: PPUSH
7180: LD_INT 1
7182: PPUSH
7183: CALL_OW 80
// SetClass ( Dietrich , 1 ) ;
7187: LD_EXP 26
7191: PPUSH
7192: LD_INT 1
7194: PPUSH
7195: CALL_OW 336
// ChangeMissionObjectives ( M4 ) ;
7199: LD_STRING M4
7201: PPUSH
7202: CALL_OW 337
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
7206: LD_ADDR_VAR 0 5
7210: PUSH
7211: LD_INT 22
7213: PUSH
7214: LD_INT 2
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: LD_INT 21
7223: PUSH
7224: LD_INT 1
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PUSH
7231: LD_INT 2
7233: PUSH
7234: LD_INT 25
7236: PUSH
7237: LD_INT 1
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: PUSH
7244: LD_INT 25
7246: PUSH
7247: LD_INT 8
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PUSH
7254: LD_INT 25
7256: PUSH
7257: LD_INT 15
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: PPUSH
7275: CALL_OW 69
7279: PUSH
7280: LD_EXP 26
7284: PUSH
7285: EMPTY
7286: LIST
7287: DIFF
7288: ST_TO_ADDR
// if IsLive ( Khatam ) then
7289: LD_EXP 14
7293: PPUSH
7294: CALL_OW 300
7298: IFFALSE 7312
// DoNotAttack ( 2 , Khatam ) ;
7300: LD_INT 2
7302: PPUSH
7303: LD_EXP 14
7307: PPUSH
7308: CALL_OW 471
// ComExitBuilding ( arSoldiers ) ;
7312: LD_VAR 0 5
7316: PPUSH
7317: CALL_OW 122
// wait ( 0 0$1 ) ;
7321: LD_INT 35
7323: PPUSH
7324: CALL_OW 67
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
7328: LD_VAR 0 5
7332: PPUSH
7333: LD_INT 84
7335: PPUSH
7336: LD_INT 22
7338: PPUSH
7339: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
7343: LD_VAR 0 5
7347: PPUSH
7348: LD_INT 82
7350: PPUSH
7351: LD_INT 5
7353: PPUSH
7354: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
7358: LD_VAR 0 5
7362: PPUSH
7363: LD_INT 95
7365: PPUSH
7366: LD_INT 12
7368: PPUSH
7369: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
7373: LD_VAR 0 5
7377: PPUSH
7378: LD_INT 102
7380: PPUSH
7381: LD_INT 11
7383: PPUSH
7384: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
7388: LD_VAR 0 5
7392: PPUSH
7393: LD_INT 116
7395: PPUSH
7396: LD_INT 15
7398: PPUSH
7399: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
7403: LD_VAR 0 5
7407: PPUSH
7408: LD_INT 140
7410: PPUSH
7411: LD_INT 25
7413: PPUSH
7414: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
7418: LD_VAR 0 5
7422: PPUSH
7423: LD_INT 160
7425: PPUSH
7426: LD_INT 56
7428: PPUSH
7429: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
7433: LD_VAR 0 5
7437: PPUSH
7438: LD_INT 189
7440: PPUSH
7441: LD_INT 79
7443: PPUSH
7444: CALL_OW 174
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
7448: LD_ADDR_VAR 0 6
7452: PUSH
7453: LD_INT 22
7455: PUSH
7456: LD_INT 2
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: PUSH
7463: LD_INT 21
7465: PUSH
7466: LD_INT 1
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PUSH
7473: LD_INT 2
7475: PUSH
7476: LD_INT 25
7478: PUSH
7479: LD_INT 2
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: PUSH
7486: LD_INT 25
7488: PUSH
7489: LD_INT 3
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: PUSH
7496: LD_INT 25
7498: PUSH
7499: LD_INT 4
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 25
7508: PUSH
7509: LD_INT 12
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PUSH
7516: LD_INT 25
7518: PUSH
7519: LD_INT 16
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: LIST
7538: PPUSH
7539: CALL_OW 69
7543: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
7544: LD_ADDR_VAR 0 6
7548: PUSH
7549: LD_VAR 0 6
7553: PUSH
7554: LD_EXP 26
7558: ADD
7559: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7560: LD_INT 350
7562: PPUSH
7563: CALL_OW 67
// ComExitBuilding ( arCivilian ) ;
7567: LD_VAR 0 6
7571: PPUSH
7572: CALL_OW 122
// wait ( 0 0$1 ) ;
7576: LD_INT 35
7578: PPUSH
7579: CALL_OW 67
// AddComMoveXY ( arCivilian , 81 , 5 ) ;
7583: LD_VAR 0 6
7587: PPUSH
7588: LD_INT 81
7590: PPUSH
7591: LD_INT 5
7593: PPUSH
7594: CALL_OW 171
// AddComMoveXY ( arCivilian , 82 , 5 ) ;
7598: LD_VAR 0 6
7602: PPUSH
7603: LD_INT 82
7605: PPUSH
7606: LD_INT 5
7608: PPUSH
7609: CALL_OW 171
// AddComMoveXY ( arCivilian , 95 , 12 ) ;
7613: LD_VAR 0 6
7617: PPUSH
7618: LD_INT 95
7620: PPUSH
7621: LD_INT 12
7623: PPUSH
7624: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 11 ) ;
7628: LD_VAR 0 6
7632: PPUSH
7633: LD_INT 102
7635: PPUSH
7636: LD_INT 11
7638: PPUSH
7639: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
7643: LD_VAR 0 6
7647: PPUSH
7648: LD_INT 116
7650: PPUSH
7651: LD_INT 15
7653: PPUSH
7654: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
7658: LD_VAR 0 6
7662: PPUSH
7663: LD_INT 140
7665: PPUSH
7666: LD_INT 25
7668: PPUSH
7669: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
7673: LD_VAR 0 6
7677: PPUSH
7678: LD_INT 160
7680: PPUSH
7681: LD_INT 56
7683: PPUSH
7684: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
7688: LD_VAR 0 6
7692: PPUSH
7693: LD_INT 189
7695: PPUSH
7696: LD_INT 79
7698: PPUSH
7699: CALL_OW 171
// arabianAttackersAI = 1 ;
7703: LD_ADDR_EXP 46
7707: PUSH
7708: LD_INT 1
7710: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7711: LD_INT 350
7713: PPUSH
7714: CALL_OW 67
// if IsOk ( Gary ) then
7718: LD_EXP 10
7722: PPUSH
7723: CALL_OW 302
7727: IFFALSE 7741
// Say ( Gary , D8a-Gary-1 ) ;
7729: LD_EXP 10
7733: PPUSH
7734: LD_STRING D8a-Gary-1
7736: PPUSH
7737: CALL_OW 88
// wait ( 0 0$5 ) ;
7741: LD_INT 175
7743: PPUSH
7744: CALL_OW 67
// if IsOK ( Khatam ) then
7748: LD_EXP 14
7752: PPUSH
7753: CALL_OW 302
7757: IFFALSE 8293
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
7759: LD_ADDR_VAR 0 3
7763: PUSH
7764: LD_INT 22
7766: PUSH
7767: LD_INT 1
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: LD_INT 2
7776: PUSH
7777: LD_INT 25
7779: PUSH
7780: LD_INT 1
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: PUSH
7787: LD_INT 25
7789: PUSH
7790: LD_INT 2
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: PUSH
7797: LD_INT 25
7799: PUSH
7800: LD_INT 3
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: PUSH
7807: LD_INT 25
7809: PUSH
7810: LD_INT 4
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PUSH
7817: LD_INT 25
7819: PUSH
7820: LD_INT 5
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: PUSH
7827: LD_INT 25
7829: PUSH
7830: LD_INT 8
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: PPUSH
7850: CALL_OW 69
7854: PUSH
7855: LD_EXP 1
7859: PUSH
7860: LD_EXP 2
7864: PUSH
7865: LD_EXP 3
7869: PUSH
7870: LD_EXP 4
7874: PUSH
7875: LD_EXP 5
7879: PUSH
7880: LD_EXP 6
7884: PUSH
7885: LD_EXP 7
7889: PUSH
7890: LD_EXP 8
7894: PUSH
7895: LD_EXP 9
7899: PUSH
7900: LD_EXP 10
7904: PUSH
7905: LD_EXP 11
7909: PUSH
7910: LD_EXP 12
7914: PUSH
7915: LD_EXP 13
7919: PUSH
7920: LD_EXP 14
7924: PUSH
7925: LD_EXP 15
7929: PUSH
7930: LD_EXP 16
7934: PUSH
7935: LD_EXP 17
7939: PUSH
7940: LD_EXP 19
7944: PUSH
7945: LD_EXP 24
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: DIFF
7971: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
7972: LD_EXP 14
7976: PPUSH
7977: LD_INT 8
7979: PPUSH
7980: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
7984: LD_EXP 14
7988: PPUSH
7989: CALL_OW 122
// wait ( 0 0$1 ) ;
7993: LD_INT 35
7995: PPUSH
7996: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
8000: LD_EXP 14
8004: PPUSH
8005: CALL_OW 121
// wait ( 0 0$1 ) ;
8009: LD_INT 35
8011: PPUSH
8012: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
8016: LD_EXP 14
8020: PPUSH
8021: LD_INT 7
8023: PPUSH
8024: CALL_OW 113
// if not tmp then
8028: LD_VAR 0 3
8032: NOT
8033: IFFALSE 8037
// exit ;
8035: GO 8293
// DialogueOn ;
8037: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
8041: LD_VAR 0 3
8045: PUSH
8046: LD_INT 1
8048: ARRAY
8049: PPUSH
8050: CALL_OW 258
8054: PUSH
8055: LD_INT 1
8057: EQUAL
8058: IFFALSE 8078
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
8060: LD_VAR 0 3
8064: PUSH
8065: LD_INT 1
8067: ARRAY
8068: PPUSH
8069: LD_STRING D8b-Sol1-1
8071: PPUSH
8072: CALL_OW 88
8076: GO 8094
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
8078: LD_VAR 0 3
8082: PUSH
8083: LD_INT 1
8085: ARRAY
8086: PPUSH
8087: LD_STRING D8b-FSol1-1
8089: PPUSH
8090: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
8094: LD_EXP 14
8098: PPUSH
8099: LD_STRING D8b-Khat-1
8101: PPUSH
8102: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8106: LD_VAR 0 3
8110: PUSH
8111: LD_INT 1
8113: ARRAY
8114: PPUSH
8115: CALL_OW 258
8119: PUSH
8120: LD_INT 1
8122: EQUAL
8123: IFFALSE 8143
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
8125: LD_VAR 0 3
8129: PUSH
8130: LD_INT 1
8132: ARRAY
8133: PPUSH
8134: LD_STRING D8b-Sol1-2
8136: PPUSH
8137: CALL_OW 88
8141: GO 8159
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
8143: LD_VAR 0 3
8147: PUSH
8148: LD_INT 1
8150: ARRAY
8151: PPUSH
8152: LD_STRING D8b-FSol1-2
8154: PPUSH
8155: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
8159: LD_EXP 14
8163: PPUSH
8164: LD_STRING D8b-Khat-2
8166: PPUSH
8167: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8171: LD_VAR 0 3
8175: PUSH
8176: LD_INT 1
8178: ARRAY
8179: PPUSH
8180: CALL_OW 258
8184: PUSH
8185: LD_INT 1
8187: EQUAL
8188: IFFALSE 8208
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
8190: LD_VAR 0 3
8194: PUSH
8195: LD_INT 1
8197: ARRAY
8198: PPUSH
8199: LD_STRING D8b-Sol1-3
8201: PPUSH
8202: CALL_OW 88
8206: GO 8224
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
8208: LD_VAR 0 3
8212: PUSH
8213: LD_INT 1
8215: ARRAY
8216: PPUSH
8217: LD_STRING D8b-FSol1-3
8219: PPUSH
8220: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
8224: LD_EXP 14
8228: PPUSH
8229: LD_STRING D8b-Khat-3
8231: PPUSH
8232: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8236: LD_VAR 0 3
8240: PUSH
8241: LD_INT 1
8243: ARRAY
8244: PPUSH
8245: CALL_OW 258
8249: PUSH
8250: LD_INT 1
8252: EQUAL
8253: IFFALSE 8273
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
8255: LD_VAR 0 3
8259: PUSH
8260: LD_INT 1
8262: ARRAY
8263: PPUSH
8264: LD_STRING D8b-Sol1-4
8266: PPUSH
8267: CALL_OW 88
8271: GO 8289
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
8273: LD_VAR 0 3
8277: PUSH
8278: LD_INT 1
8280: ARRAY
8281: PPUSH
8282: LD_STRING D8b-FSol1-4
8284: PPUSH
8285: CALL_OW 88
// DialogueOff ;
8289: CALL_OW 7
// end ; end ;
8293: LD_VAR 0 1
8297: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
8298: LD_INT 7
8300: PPUSH
8301: LD_INT 22
8303: PUSH
8304: LD_INT 2
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: PPUSH
8311: CALL_OW 70
8315: PUSH
8316: LD_INT 0
8318: GREATER
8319: PUSH
8320: LD_EXP 14
8324: PPUSH
8325: LD_INT 7
8327: PPUSH
8328: CALL_OW 308
8332: OR
8333: IFFALSE 8540
8335: GO 8337
8337: DISABLE
8338: LD_INT 0
8340: PPUSH
// begin enable ;
8341: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
8342: LD_ADDR_VAR 0 1
8346: PUSH
8347: LD_INT 7
8349: PPUSH
8350: LD_INT 22
8352: PUSH
8353: LD_INT 2
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: PPUSH
8360: CALL_OW 70
8364: PUSH
8365: FOR_IN
8366: IFFALSE 8507
// begin if GetClass ( i ) = 4 then
8368: LD_VAR 0 1
8372: PPUSH
8373: CALL_OW 257
8377: PUSH
8378: LD_INT 4
8380: EQUAL
8381: IFFALSE 8393
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
8383: LD_INT 1
8385: PPUSH
8386: LD_STRING 10_ScientistsEscape_1
8388: PPUSH
8389: CALL_OW 39
// if i = Dietrich then
8393: LD_VAR 0 1
8397: PUSH
8398: LD_EXP 26
8402: EQUAL
8403: IFFALSE 8413
// GensherStatus = 1 ;
8405: LD_ADDR_EXP 51
8409: PUSH
8410: LD_INT 1
8412: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
8413: LD_VAR 0 1
8417: PPUSH
8418: CALL_OW 257
8422: PUSH
8423: LD_INT 1
8425: EQUAL
8426: PUSH
8427: LD_VAR 0 1
8431: PPUSH
8432: CALL_OW 257
8436: PUSH
8437: LD_INT 2
8439: EQUAL
8440: OR
8441: PUSH
8442: LD_VAR 0 1
8446: PPUSH
8447: CALL_OW 257
8451: PUSH
8452: LD_INT 3
8454: EQUAL
8455: OR
8456: PUSH
8457: LD_VAR 0 1
8461: PPUSH
8462: CALL_OW 257
8466: PUSH
8467: LD_INT 4
8469: EQUAL
8470: OR
8471: PUSH
8472: LD_VAR 0 1
8476: PPUSH
8477: CALL_OW 257
8481: PUSH
8482: LD_INT 8
8484: EQUAL
8485: OR
8486: IFFALSE 8496
// arabianEscape = 1 ;
8488: LD_ADDR_EXP 47
8492: PUSH
8493: LD_INT 1
8495: ST_TO_ADDR
// RemoveUnit ( i ) ;
8496: LD_VAR 0 1
8500: PPUSH
8501: CALL_OW 64
// end ;
8505: GO 8365
8507: POP
8508: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
8509: LD_EXP 14
8513: PPUSH
8514: LD_INT 7
8516: PPUSH
8517: CALL_OW 308
8521: IFFALSE 8540
// begin KhatamStatus = 1 ;
8523: LD_ADDR_EXP 52
8527: PUSH
8528: LD_INT 1
8530: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
8531: LD_EXP 14
8535: PPUSH
8536: CALL_OW 64
// end ; end ;
8540: PPOPN 1
8542: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
8543: LD_INT 22
8545: PUSH
8546: LD_INT 2
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PUSH
8553: LD_INT 21
8555: PUSH
8556: LD_INT 1
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PPUSH
8567: CALL_OW 69
8571: PUSH
8572: LD_INT 0
8574: EQUAL
8575: PUSH
8576: LD_INT 22
8578: PUSH
8579: LD_INT 4
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: LD_INT 21
8588: PUSH
8589: LD_INT 1
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: PPUSH
8600: CALL_OW 69
8604: PUSH
8605: LD_INT 0
8607: EQUAL
8608: AND
8609: IFFALSE 8622
8611: GO 8613
8613: DISABLE
// arabianDefeated = 1 ;
8614: LD_ADDR_EXP 48
8618: PUSH
8619: LD_INT 1
8621: ST_TO_ADDR
8622: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
8623: LD_INT 54
8625: PPUSH
8626: LD_INT 1
8628: PPUSH
8629: CALL_OW 321
8633: PUSH
8634: LD_INT 2
8636: EQUAL
8637: PUSH
8638: LD_INT 55
8640: PPUSH
8641: LD_INT 1
8643: PPUSH
8644: CALL_OW 321
8648: PUSH
8649: LD_INT 2
8651: EQUAL
8652: AND
8653: PUSH
8654: LD_INT 21
8656: PPUSH
8657: LD_INT 1
8659: PPUSH
8660: CALL_OW 321
8664: PUSH
8665: LD_INT 2
8667: EQUAL
8668: AND
8669: PUSH
8670: LD_INT 22
8672: PPUSH
8673: LD_INT 1
8675: PPUSH
8676: CALL_OW 321
8680: PUSH
8681: LD_INT 2
8683: EQUAL
8684: AND
8685: PUSH
8686: LD_INT 12
8688: PPUSH
8689: LD_INT 1
8691: PPUSH
8692: CALL_OW 321
8696: PUSH
8697: LD_INT 2
8699: EQUAL
8700: AND
8701: PUSH
8702: LD_INT 32
8704: PPUSH
8705: LD_INT 1
8707: PPUSH
8708: CALL_OW 321
8712: PUSH
8713: LD_INT 2
8715: EQUAL
8716: AND
8717: PUSH
8718: LD_EXP 59
8722: PUSH
8723: LD_INT 0
8725: EQUAL
8726: AND
8727: PUSH
8728: LD_EXP 49
8732: PUSH
8733: LD_INT 0
8735: EQUAL
8736: AND
8737: PUSH
8738: LD_OWVAR 1
8742: PUSH
8743: LD_INT 31500
8745: GREATEREQUAL
8746: AND
8747: IFFALSE 8764
8749: GO 8751
8751: DISABLE
// begin arabianTrait = 1 ;
8752: LD_ADDR_EXP 49
8756: PUSH
8757: LD_INT 1
8759: ST_TO_ADDR
// PrepareArabianTrait ;
8760: CALL 6795 0 0
// end ;
8764: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
8765: LD_EXP 29
8769: PUSH
8770: LD_STRING 02_mikhailStatus_1
8772: PPUSH
8773: LD_INT 0
8775: PPUSH
8776: CALL_OW 30
8780: PUSH
8781: LD_INT 1
8783: EQUAL
8784: AND
8785: PUSH
8786: LD_INT 22
8788: PUSH
8789: LD_INT 5
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PPUSH
8796: CALL_OW 69
8800: PUSH
8801: LD_INT 0
8803: EQUAL
8804: AND
8805: PUSH
8806: LD_INT 22
8808: PUSH
8809: LD_INT 2
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: LD_INT 21
8818: PUSH
8819: LD_INT 1
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PPUSH
8830: CALL_OW 69
8834: PUSH
8835: LD_INT 0
8837: EQUAL
8838: PUSH
8839: LD_EXP 49
8843: PUSH
8844: LD_INT 0
8846: EQUAL
8847: OR
8848: AND
8849: IFFALSE 8858
8851: GO 8853
8853: DISABLE
// PrepareCornell ;
8854: CALL 2576 0 0
8858: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
8859: LD_INT 22
8861: PUSH
8862: LD_INT 1
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PPUSH
8869: CALL_OW 69
8873: PPUSH
8874: LD_EXP 19
8878: PPUSH
8879: CALL_OW 74
8883: PPUSH
8884: LD_EXP 19
8888: PPUSH
8889: CALL_OW 296
8893: PUSH
8894: LD_INT 9
8896: LESS
8897: IFFALSE 9118
8899: GO 8901
8901: DISABLE
// begin InGameOn ;
8902: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
8906: LD_EXP 19
8910: PPUSH
8911: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
8915: LD_EXP 19
8919: PPUSH
8920: LD_STRING D7-Corn-1
8922: PPUSH
8923: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
8927: LD_INT 22
8929: PUSH
8930: LD_INT 1
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: LD_INT 2
8939: PUSH
8940: LD_INT 25
8942: PUSH
8943: LD_INT 1
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: PUSH
8950: LD_INT 25
8952: PUSH
8953: LD_INT 2
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: PUSH
8960: LD_INT 25
8962: PUSH
8963: LD_INT 3
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: PUSH
8970: LD_INT 25
8972: PUSH
8973: LD_INT 4
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PUSH
8980: LD_INT 25
8982: PUSH
8983: LD_INT 5
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PPUSH
9002: CALL_OW 69
9006: PPUSH
9007: LD_STRING D7-Sol1-1
9009: PPUSH
9010: LD_STRING D7-FSol1-1
9012: PPUSH
9013: CALL 9665 0 3
// CenterNowOnUnits ( Cornell ) ;
9017: LD_EXP 19
9021: PPUSH
9022: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
9026: LD_EXP 19
9030: PPUSH
9031: LD_STRING D7-Corn-2
9033: PPUSH
9034: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
9038: LD_EXP 1
9042: PPUSH
9043: LD_STRING D7-JMM-2
9045: PPUSH
9046: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
9050: LD_EXP 19
9054: PPUSH
9055: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
9059: LD_EXP 19
9063: PPUSH
9064: LD_STRING D7-Corn-3
9066: PPUSH
9067: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
9071: LD_EXP 19
9075: PPUSH
9076: LD_INT 250
9078: PPUSH
9079: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
9083: LD_EXP 19
9087: PPUSH
9088: LD_INT 1
9090: PPUSH
9091: CALL_OW 235
// wait ( 0 0$1 ) ;
9095: LD_INT 35
9097: PPUSH
9098: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
9102: LD_EXP 1
9106: PPUSH
9107: LD_STRING D7-JMM-3
9109: PPUSH
9110: CALL_OW 88
// InGameOff ;
9114: CALL_OW 9
// end ;
9118: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
9119: LD_EXP 19
9123: PPUSH
9124: CALL_OW 255
9128: PUSH
9129: LD_INT 1
9131: EQUAL
9132: PUSH
9133: LD_EXP 19
9137: PPUSH
9138: CALL_OW 256
9142: PUSH
9143: LD_INT 350
9145: GREATER
9146: AND
9147: IFFALSE 9340
9149: GO 9151
9151: DISABLE
// begin DialogueOn ;
9152: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
9156: LD_EXP 1
9160: PPUSH
9161: LD_STRING D7a-JMM-1
9163: PPUSH
9164: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
9168: LD_EXP 19
9172: PPUSH
9173: LD_STRING D7a-Corn-1
9175: PPUSH
9176: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
9180: LD_EXP 1
9184: PPUSH
9185: LD_STRING D7a-JMM-2
9187: PPUSH
9188: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
9192: LD_EXP 19
9196: PPUSH
9197: LD_STRING D7a-Corn-2
9199: PPUSH
9200: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
9204: LD_EXP 1
9208: PPUSH
9209: LD_STRING D7a-JMM-3
9211: PPUSH
9212: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
9216: LD_EXP 19
9220: PPUSH
9221: LD_STRING D7a-Corn-3
9223: PPUSH
9224: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
9228: LD_EXP 1
9232: PPUSH
9233: LD_STRING D7a-JMM-4
9235: PPUSH
9236: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
9240: LD_EXP 19
9244: PPUSH
9245: LD_STRING D7a-Corn-4
9247: PPUSH
9248: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
9252: LD_EXP 1
9256: PPUSH
9257: LD_STRING D7a-JMM-5
9259: PPUSH
9260: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
9264: LD_EXP 19
9268: PPUSH
9269: LD_STRING D7a-Corn-5
9271: PPUSH
9272: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
9276: LD_EXP 1
9280: PPUSH
9281: LD_STRING D7a-JMM-6
9283: PPUSH
9284: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
9288: LD_EXP 19
9292: PPUSH
9293: LD_STRING D7a-Corn-6
9295: PPUSH
9296: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
9300: LD_EXP 1
9304: PPUSH
9305: LD_STRING D7a-JMM-7
9307: PPUSH
9308: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
9312: LD_EXP 19
9316: PPUSH
9317: LD_STRING D7a-Corn-7
9319: PPUSH
9320: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
9324: LD_EXP 1
9328: PPUSH
9329: LD_STRING D7a-JMM-8
9331: PPUSH
9332: CALL_OW 88
// DialogueOff ;
9336: CALL_OW 7
// end ;
9340: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
9341: LD_EXP 58
9345: PUSH
9346: LD_EXP 1
9350: PPUSH
9351: CALL_OW 302
9355: PUSH
9356: LD_EXP 5
9360: PPUSH
9361: CALL_OW 302
9365: OR
9366: AND
9367: IFFALSE 9457
9369: GO 9371
9371: DISABLE
// begin Wait ( 0 0$2 ) ;
9372: LD_INT 70
9374: PPUSH
9375: CALL_OW 67
// DialogueOn ;
9379: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
9383: LD_EXP 58
9387: PUSH
9388: LD_INT 1
9390: ARRAY
9391: PPUSH
9392: LD_EXP 58
9396: PUSH
9397: LD_INT 2
9399: ARRAY
9400: PPUSH
9401: CALL_OW 86
// if IsOk ( Cyrus ) then
9405: LD_EXP 5
9409: PPUSH
9410: CALL_OW 302
9414: IFFALSE 9430
// Say ( Cyrus , D10-Cyrus-1 ) else
9416: LD_EXP 5
9420: PPUSH
9421: LD_STRING D10-Cyrus-1
9423: PPUSH
9424: CALL_OW 88
9428: GO 9453
// if IsOk ( JMM ) then
9430: LD_EXP 1
9434: PPUSH
9435: CALL_OW 302
9439: IFFALSE 9453
// Say ( JMM , D10-JMM-1 ) ;
9441: LD_EXP 1
9445: PPUSH
9446: LD_STRING D10-JMM-1
9448: PPUSH
9449: CALL_OW 88
// DialogueOff ;
9453: CALL_OW 7
// end ;
9457: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
9458: LD_INT 12
9460: PPUSH
9461: LD_INT 1
9463: PPUSH
9464: CALL_OW 321
9468: PUSH
9469: LD_INT 2
9471: EQUAL
9472: IFFALSE 9484
9474: GO 9476
9476: DISABLE
// ChangeMissionObjectives ( M2b ) ;
9477: LD_STRING M2b
9479: PPUSH
9480: CALL_OW 337
9484: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
9485: LD_INT 32
9487: PPUSH
9488: LD_INT 1
9490: PPUSH
9491: CALL_OW 321
9495: PUSH
9496: LD_INT 2
9498: EQUAL
9499: IFFALSE 9511
9501: GO 9503
9503: DISABLE
// ChangeMissionObjectives ( M2c ) ;
9504: LD_STRING M2c
9506: PPUSH
9507: CALL_OW 337
9511: END
// every 0 0$1 trigger arabianDefeated = 1 do
9512: LD_EXP 48
9516: PUSH
9517: LD_INT 1
9519: EQUAL
9520: IFFALSE 9532
9522: GO 9524
9524: DISABLE
// ChangeMissionObjectives ( M4a ) ;
9525: LD_STRING M4a
9527: PPUSH
9528: CALL_OW 337
9532: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
9533: LD_INT 54
9535: PPUSH
9536: LD_INT 1
9538: PPUSH
9539: CALL_OW 321
9543: PUSH
9544: LD_INT 2
9546: EQUAL
9547: PUSH
9548: LD_INT 55
9550: PPUSH
9551: LD_INT 1
9553: PPUSH
9554: CALL_OW 321
9558: PUSH
9559: LD_INT 2
9561: EQUAL
9562: AND
9563: PUSH
9564: LD_INT 21
9566: PPUSH
9567: LD_INT 1
9569: PPUSH
9570: CALL_OW 321
9574: PUSH
9575: LD_INT 2
9577: EQUAL
9578: AND
9579: PUSH
9580: LD_INT 22
9582: PPUSH
9583: LD_INT 1
9585: PPUSH
9586: CALL_OW 321
9590: PUSH
9591: LD_INT 2
9593: EQUAL
9594: AND
9595: IFFALSE 9607
9597: GO 9599
9599: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
9600: LD_STRING M2a
9602: PPUSH
9603: CALL_OW 337
9607: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
9608: LD_INT 0
9610: PPUSH
9611: PPUSH
// if exist_mode then
9612: LD_VAR 0 2
9616: IFFALSE 9635
// unit := CreateCharacter ( ident ) else
9618: LD_ADDR_VAR 0 4
9622: PUSH
9623: LD_VAR 0 1
9627: PPUSH
9628: CALL_OW 34
9632: ST_TO_ADDR
9633: GO 9650
// unit := NewCharacter ( ident ) ;
9635: LD_ADDR_VAR 0 4
9639: PUSH
9640: LD_VAR 0 1
9644: PPUSH
9645: CALL_OW 25
9649: ST_TO_ADDR
// result := unit ;
9650: LD_ADDR_VAR 0 3
9654: PUSH
9655: LD_VAR 0 4
9659: ST_TO_ADDR
// end ;
9660: LD_VAR 0 3
9664: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
9665: LD_INT 0
9667: PPUSH
9668: PPUSH
9669: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
9670: LD_ADDR_VAR 0 1
9674: PUSH
9675: LD_VAR 0 1
9679: PUSH
9680: LD_EXP 1
9684: PUSH
9685: LD_EXP 2
9689: PUSH
9690: LD_EXP 3
9694: PUSH
9695: LD_EXP 4
9699: PUSH
9700: LD_EXP 5
9704: PUSH
9705: LD_EXP 6
9709: PUSH
9710: LD_EXP 7
9714: PUSH
9715: LD_EXP 8
9719: PUSH
9720: LD_EXP 9
9724: PUSH
9725: LD_EXP 10
9729: PUSH
9730: LD_EXP 11
9734: PUSH
9735: LD_EXP 12
9739: PUSH
9740: LD_EXP 13
9744: PUSH
9745: LD_EXP 14
9749: PUSH
9750: LD_EXP 15
9754: PUSH
9755: LD_EXP 16
9759: PUSH
9760: LD_EXP 17
9764: PUSH
9765: LD_EXP 18
9769: PUSH
9770: LD_EXP 19
9774: PUSH
9775: LD_EXP 24
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: DIFF
9802: ST_TO_ADDR
// if not characters then
9803: LD_VAR 0 1
9807: NOT
9808: IFFALSE 9812
// exit ;
9810: GO 9958
// rnd = rand ( 1 , characters ) ;
9812: LD_ADDR_VAR 0 6
9816: PUSH
9817: LD_INT 1
9819: PPUSH
9820: LD_VAR 0 1
9824: PPUSH
9825: CALL_OW 12
9829: ST_TO_ADDR
// for i = 1 to characters do
9830: LD_ADDR_VAR 0 5
9834: PUSH
9835: DOUBLE
9836: LD_INT 1
9838: DEC
9839: ST_TO_ADDR
9840: LD_VAR 0 1
9844: PUSH
9845: FOR_TO
9846: IFFALSE 9956
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
9848: LD_VAR 0 5
9852: PUSH
9853: LD_VAR 0 6
9857: EQUAL
9858: PUSH
9859: LD_VAR 0 1
9863: PUSH
9864: LD_VAR 0 5
9868: ARRAY
9869: PPUSH
9870: CALL_OW 258
9874: PUSH
9875: LD_INT 1
9877: EQUAL
9878: AND
9879: IFFALSE 9901
// Say ( characters [ i ] , dialogMID ) ;
9881: LD_VAR 0 1
9885: PUSH
9886: LD_VAR 0 5
9890: ARRAY
9891: PPUSH
9892: LD_VAR 0 2
9896: PPUSH
9897: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
9901: LD_VAR 0 5
9905: PUSH
9906: LD_VAR 0 6
9910: EQUAL
9911: PUSH
9912: LD_VAR 0 1
9916: PUSH
9917: LD_VAR 0 5
9921: ARRAY
9922: PPUSH
9923: CALL_OW 258
9927: PUSH
9928: LD_INT 2
9930: EQUAL
9931: AND
9932: IFFALSE 9954
// Say ( characters [ i ] , dialogFID ) ;
9934: LD_VAR 0 1
9938: PUSH
9939: LD_VAR 0 5
9943: ARRAY
9944: PPUSH
9945: LD_VAR 0 3
9949: PPUSH
9950: CALL_OW 88
// end ;
9954: GO 9845
9956: POP
9957: POP
// end ;
9958: LD_VAR 0 4
9962: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
9963: LD_INT 0
9965: PPUSH
9966: PPUSH
// for i in charactersList do
9967: LD_ADDR_VAR 0 4
9971: PUSH
9972: LD_VAR 0 1
9976: PUSH
9977: FOR_IN
9978: IFFALSE 9996
// SaveCharacters ( i , ident ) ;
9980: LD_VAR 0 4
9984: PPUSH
9985: LD_VAR 0 2
9989: PPUSH
9990: CALL_OW 38
9994: GO 9977
9996: POP
9997: POP
// end ;
9998: LD_VAR 0 3
10002: RET
// export function PrepareDifficulty ; begin
10003: LD_INT 0
10005: PPUSH
// if difficulty = 1 then
10006: LD_OWVAR 67
10010: PUSH
10011: LD_INT 1
10013: EQUAL
10014: IFFALSE 10058
// begin RuSolMinLevel = 4 ;
10016: LD_ADDR_EXP 36
10020: PUSH
10021: LD_INT 4
10023: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
10024: LD_ADDR_EXP 37
10028: PUSH
10029: LD_INT 7
10031: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10032: LD_INT 51
10034: PPUSH
10035: LD_INT 6
10037: PPUSH
10038: LD_INT 2
10040: PPUSH
10041: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10045: LD_INT 51
10047: PPUSH
10048: LD_INT 5
10050: PPUSH
10051: LD_INT 2
10053: PPUSH
10054: CALL_OW 322
// end ; if difficulty = 2 then
10058: LD_OWVAR 67
10062: PUSH
10063: LD_INT 2
10065: EQUAL
10066: IFFALSE 10162
// begin RuSolMinLevel = 5 ;
10068: LD_ADDR_EXP 36
10072: PUSH
10073: LD_INT 5
10075: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
10076: LD_ADDR_EXP 37
10080: PUSH
10081: LD_INT 7
10083: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10084: LD_INT 51
10086: PPUSH
10087: LD_INT 6
10089: PPUSH
10090: LD_INT 2
10092: PPUSH
10093: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10097: LD_INT 57
10099: PPUSH
10100: LD_INT 6
10102: PPUSH
10103: LD_INT 2
10105: PPUSH
10106: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10110: LD_INT 63
10112: PPUSH
10113: LD_INT 6
10115: PPUSH
10116: LD_INT 2
10118: PPUSH
10119: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10123: LD_INT 51
10125: PPUSH
10126: LD_INT 5
10128: PPUSH
10129: LD_INT 2
10131: PPUSH
10132: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
10136: LD_INT 5
10138: PPUSH
10139: LD_INT 2
10141: PPUSH
10142: LD_INT 2
10144: PPUSH
10145: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
10149: LD_INT 5
10151: PPUSH
10152: LD_INT 5
10154: PPUSH
10155: LD_INT 2
10157: PPUSH
10158: CALL_OW 322
// end ; if difficulty = 3 then
10162: LD_OWVAR 67
10166: PUSH
10167: LD_INT 3
10169: EQUAL
10170: IFFALSE 10318
// begin RuSolMinLevel = 6 ;
10172: LD_ADDR_EXP 36
10176: PUSH
10177: LD_INT 6
10179: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
10180: LD_ADDR_EXP 37
10184: PUSH
10185: LD_INT 8
10187: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10188: LD_INT 51
10190: PPUSH
10191: LD_INT 6
10193: PPUSH
10194: LD_INT 2
10196: PPUSH
10197: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10201: LD_INT 57
10203: PPUSH
10204: LD_INT 6
10206: PPUSH
10207: LD_INT 2
10209: PPUSH
10210: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
10214: LD_INT 52
10216: PPUSH
10217: LD_INT 6
10219: PPUSH
10220: LD_INT 2
10222: PPUSH
10223: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
10227: LD_INT 58
10229: PPUSH
10230: LD_INT 6
10232: PPUSH
10233: LD_INT 2
10235: PPUSH
10236: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10240: LD_INT 63
10242: PPUSH
10243: LD_INT 6
10245: PPUSH
10246: LD_INT 2
10248: PPUSH
10249: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
10253: LD_INT 64
10255: PPUSH
10256: LD_INT 6
10258: PPUSH
10259: LD_INT 2
10261: PPUSH
10262: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10266: LD_INT 51
10268: PPUSH
10269: LD_INT 5
10271: PPUSH
10272: LD_INT 2
10274: PPUSH
10275: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
10279: LD_INT 52
10281: PPUSH
10282: LD_INT 5
10284: PPUSH
10285: LD_INT 2
10287: PPUSH
10288: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
10292: LD_INT 66
10294: PPUSH
10295: LD_INT 2
10297: PPUSH
10298: LD_INT 2
10300: PPUSH
10301: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
10305: LD_INT 66
10307: PPUSH
10308: LD_INT 5
10310: PPUSH
10311: LD_INT 2
10313: PPUSH
10314: CALL_OW 322
// end ; end ;
10318: LD_VAR 0 1
10322: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
10323: LD_INT 0
10325: PPUSH
10326: PPUSH
10327: PPUSH
10328: PPUSH
10329: PPUSH
10330: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
10331: LD_ADDR_VAR 0 7
10335: PUSH
10336: LD_INT 43
10338: PUSH
10339: LD_INT 68
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 43
10348: PUSH
10349: LD_INT 79
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 99
10358: PUSH
10359: LD_INT 114
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: LD_INT 103
10368: PUSH
10369: LD_INT 114
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 156
10378: PUSH
10379: LD_INT 92
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PUSH
10386: LD_INT 152
10388: PUSH
10389: LD_INT 85
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: ST_TO_ADDR
// for i in sources do
10404: LD_ADDR_VAR 0 3
10408: PUSH
10409: LD_VAR 0 7
10413: PUSH
10414: FOR_IN
10415: IFFALSE 10444
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
10417: LD_VAR 0 3
10421: PUSH
10422: LD_INT 1
10424: ARRAY
10425: PPUSH
10426: LD_VAR 0 3
10430: PUSH
10431: LD_INT 2
10433: ARRAY
10434: PPUSH
10435: LD_INT 3
10437: PPUSH
10438: CALL_OW 441
10442: GO 10414
10444: POP
10445: POP
// case position of 1 :
10446: LD_VAR 0 1
10450: PUSH
10451: LD_INT 1
10453: DOUBLE
10454: EQUAL
10455: IFTRUE 10459
10457: GO 10470
10459: POP
// area := westConv ; 2 :
10460: LD_ADDR_VAR 0 6
10464: PUSH
10465: LD_INT 20
10467: ST_TO_ADDR
10468: GO 10509
10470: LD_INT 2
10472: DOUBLE
10473: EQUAL
10474: IFTRUE 10478
10476: GO 10489
10478: POP
// area := midConv ; 3 :
10479: LD_ADDR_VAR 0 6
10483: PUSH
10484: LD_INT 21
10486: ST_TO_ADDR
10487: GO 10509
10489: LD_INT 3
10491: DOUBLE
10492: EQUAL
10493: IFTRUE 10497
10495: GO 10508
10497: POP
// area := eastConv ; end ;
10498: LD_ADDR_VAR 0 6
10502: PUSH
10503: LD_INT 22
10505: ST_TO_ADDR
10506: GO 10509
10508: POP
// area := AreaToList ( area , 0 ) ;
10509: LD_ADDR_VAR 0 6
10513: PUSH
10514: LD_VAR 0 6
10518: PPUSH
10519: LD_INT 0
10521: PPUSH
10522: CALL_OW 517
10526: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
10527: LD_ADDR_VAR 0 3
10531: PUSH
10532: DOUBLE
10533: LD_INT 1
10535: DEC
10536: ST_TO_ADDR
10537: LD_VAR 0 6
10541: PUSH
10542: LD_INT 1
10544: ARRAY
10545: PUSH
10546: FOR_TO
10547: IFFALSE 10628
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
10549: LD_VAR 0 6
10553: PUSH
10554: LD_INT 1
10556: ARRAY
10557: PUSH
10558: LD_VAR 0 3
10562: ARRAY
10563: PPUSH
10564: LD_VAR 0 6
10568: PUSH
10569: LD_INT 2
10571: ARRAY
10572: PUSH
10573: LD_VAR 0 3
10577: ARRAY
10578: PPUSH
10579: LD_INT 1
10581: PPUSH
10582: LD_INT 1
10584: PPUSH
10585: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
10589: LD_VAR 0 6
10593: PUSH
10594: LD_INT 1
10596: ARRAY
10597: PUSH
10598: LD_VAR 0 3
10602: ARRAY
10603: PPUSH
10604: LD_VAR 0 6
10608: PUSH
10609: LD_INT 2
10611: ARRAY
10612: PUSH
10613: LD_VAR 0 3
10617: ARRAY
10618: PPUSH
10619: LD_INT 1
10621: PPUSH
10622: CALL_OW 331
// end ;
10626: GO 10546
10628: POP
10629: POP
// ruPossition = position ;
10630: LD_ADDR_EXP 41
10634: PUSH
10635: LD_VAR 0 1
10639: ST_TO_ADDR
// if position = 1 then
10640: LD_VAR 0 1
10644: PUSH
10645: LD_INT 1
10647: EQUAL
10648: IFFALSE 11396
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10650: LD_ADDR_VAR 0 4
10654: PUSH
10655: LD_INT 22
10657: PUSH
10658: LD_INT 3
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PUSH
10665: LD_INT 25
10667: PUSH
10668: LD_INT 2
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: PPUSH
10679: CALL_OW 69
10683: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
10684: LD_ADDR_VAR 0 5
10688: PUSH
10689: LD_INT 0
10691: PUSH
10692: LD_INT 49
10694: PUSH
10695: LD_INT 74
10697: PUSH
10698: LD_INT 3
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: PUSH
10707: LD_INT 4
10709: PUSH
10710: LD_INT 73
10712: PUSH
10713: LD_INT 88
10715: PUSH
10716: LD_INT 5
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: PUSH
10725: LD_INT 4
10727: PUSH
10728: LD_INT 56
10730: PUSH
10731: LD_INT 62
10733: PUSH
10734: LD_INT 3
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: PUSH
10743: LD_INT 29
10745: PUSH
10746: LD_INT 43
10748: PUSH
10749: LD_INT 68
10751: PUSH
10752: LD_INT 2
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: PUSH
10761: LD_INT 30
10763: PUSH
10764: LD_INT 43
10766: PUSH
10767: LD_INT 79
10769: PUSH
10770: LD_INT 5
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 28
10781: PUSH
10782: LD_INT 60
10784: PUSH
10785: LD_INT 75
10787: PUSH
10788: LD_INT 1
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: PUSH
10797: LD_INT 2
10799: PUSH
10800: LD_INT 50
10802: PUSH
10803: LD_INT 87
10805: PUSH
10806: LD_INT 1
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: PUSH
10815: LD_INT 28
10817: PUSH
10818: LD_INT 45
10820: PUSH
10821: LD_INT 67
10823: PUSH
10824: LD_INT 2
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: PUSH
10833: LD_INT 17
10835: PUSH
10836: LD_INT 47
10838: PUSH
10839: LD_INT 84
10841: PUSH
10842: LD_INT 2
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: PUSH
10851: LD_INT 18
10853: PUSH
10854: LD_INT 46
10856: PUSH
10857: LD_INT 87
10859: PUSH
10860: LD_INT 1
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: PUSH
10869: LD_INT 28
10871: PUSH
10872: LD_INT 41
10874: PUSH
10875: LD_INT 64
10877: PUSH
10878: LD_INT 5
10880: PUSH
10881: EMPTY
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: PUSH
10887: LD_INT 32
10889: PUSH
10890: LD_INT 75
10892: PUSH
10893: LD_INT 76
10895: PUSH
10896: LD_INT 5
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: PUSH
10905: LD_INT 32
10907: PUSH
10908: LD_INT 77
10910: PUSH
10911: LD_INT 75
10913: PUSH
10914: LD_INT 5
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: PUSH
10923: LD_INT 32
10925: PUSH
10926: LD_INT 69
10928: PUSH
10929: LD_INT 68
10931: PUSH
10932: LD_INT 3
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: PUSH
10941: LD_INT 32
10943: PUSH
10944: LD_INT 59
10946: PUSH
10947: LD_INT 96
10949: PUSH
10950: LD_INT 5
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: PUSH
10959: LD_INT 32
10961: PUSH
10962: LD_INT 56
10964: PUSH
10965: LD_INT 96
10967: PUSH
10968: LD_INT 0
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: PUSH
10977: LD_INT 32
10979: PUSH
10980: LD_INT 51
10982: PUSH
10983: LD_INT 61
10985: PUSH
10986: LD_INT 3
10988: PUSH
10989: EMPTY
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: PUSH
10995: LD_INT 32
10997: PUSH
10998: LD_INT 42
11000: PUSH
11001: LD_INT 60
11003: PUSH
11004: LD_INT 3
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: PUSH
11013: LD_INT 32
11015: PUSH
11016: LD_INT 36
11018: PUSH
11019: LD_INT 58
11021: PUSH
11022: LD_INT 3
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 32
11033: PUSH
11034: LD_INT 39
11036: PUSH
11037: LD_INT 59
11039: PUSH
11040: LD_INT 3
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: PUSH
11049: LD_INT 32
11051: PUSH
11052: LD_INT 61
11054: PUSH
11055: LD_INT 64
11057: PUSH
11058: LD_INT 3
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: PUSH
11067: LD_INT 33
11069: PUSH
11070: LD_INT 63
11072: PUSH
11073: LD_INT 90
11075: PUSH
11076: LD_INT 5
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: PUSH
11085: LD_INT 33
11087: PUSH
11088: LD_INT 64
11090: PUSH
11091: LD_INT 88
11093: PUSH
11094: LD_INT 5
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: PUSH
11103: LD_INT 33
11105: PUSH
11106: LD_INT 72
11108: PUSH
11109: LD_INT 82
11111: PUSH
11112: LD_INT 5
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 6
11123: PUSH
11124: LD_INT 42
11126: PUSH
11127: LD_INT 74
11129: PUSH
11130: LD_INT 1
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: PUSH
11139: LD_INT 6
11141: PUSH
11142: LD_INT 56
11144: PUSH
11145: LD_INT 77
11147: PUSH
11148: LD_INT 2
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: PUSH
11157: LD_INT 21
11159: PUSH
11160: LD_INT 54
11162: PUSH
11163: LD_INT 91
11165: PUSH
11166: LD_INT 5
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: PUSH
11175: LD_INT 16
11177: PUSH
11178: LD_INT 50
11180: PUSH
11181: LD_INT 83
11183: PUSH
11184: LD_INT 3
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: PUSH
11193: LD_INT 24
11195: PUSH
11196: LD_INT 50
11198: PUSH
11199: LD_INT 90
11201: PUSH
11202: LD_INT 0
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: PUSH
11211: EMPTY
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11242: LD_ADDR_VAR 0 3
11246: PUSH
11247: LD_INT 22
11249: PUSH
11250: LD_INT 3
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: LD_INT 3
11259: PUSH
11260: LD_INT 25
11262: PUSH
11263: LD_INT 2
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PPUSH
11278: CALL_OW 69
11282: PUSH
11283: FOR_IN
11284: IFFALSE 11303
// AddComAgressiveMove ( i , 53 , 82 ) ;
11286: LD_VAR 0 3
11290: PPUSH
11291: LD_INT 53
11293: PPUSH
11294: LD_INT 82
11296: PPUSH
11297: CALL_OW 174
11301: GO 11283
11303: POP
11304: POP
// for i := 1 to buildingsTab do
11305: LD_ADDR_VAR 0 3
11309: PUSH
11310: DOUBLE
11311: LD_INT 1
11313: DEC
11314: ST_TO_ADDR
11315: LD_VAR 0 5
11319: PUSH
11320: FOR_TO
11321: IFFALSE 11394
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11323: LD_VAR 0 4
11327: PPUSH
11328: LD_VAR 0 5
11332: PUSH
11333: LD_VAR 0 3
11337: ARRAY
11338: PUSH
11339: LD_INT 1
11341: ARRAY
11342: PPUSH
11343: LD_VAR 0 5
11347: PUSH
11348: LD_VAR 0 3
11352: ARRAY
11353: PUSH
11354: LD_INT 2
11356: ARRAY
11357: PPUSH
11358: LD_VAR 0 5
11362: PUSH
11363: LD_VAR 0 3
11367: ARRAY
11368: PUSH
11369: LD_INT 3
11371: ARRAY
11372: PPUSH
11373: LD_VAR 0 5
11377: PUSH
11378: LD_VAR 0 3
11382: ARRAY
11383: PUSH
11384: LD_INT 4
11386: ARRAY
11387: PPUSH
11388: CALL_OW 205
11392: GO 11320
11394: POP
11395: POP
// end ; if position = 2 then
11396: LD_VAR 0 1
11400: PUSH
11401: LD_INT 2
11403: EQUAL
11404: IFFALSE 12019
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11406: LD_ADDR_VAR 0 4
11410: PUSH
11411: LD_INT 22
11413: PUSH
11414: LD_INT 3
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: PUSH
11421: LD_INT 25
11423: PUSH
11424: LD_INT 2
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PPUSH
11435: CALL_OW 69
11439: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
11440: LD_ADDR_VAR 0 5
11444: PUSH
11445: LD_INT 0
11447: PUSH
11448: LD_INT 104
11450: PUSH
11451: LD_INT 110
11453: PUSH
11454: LD_INT 5
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: PUSH
11463: LD_INT 4
11465: PUSH
11466: LD_INT 98
11468: PUSH
11469: LD_INT 90
11471: PUSH
11472: LD_INT 3
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: PUSH
11481: LD_INT 29
11483: PUSH
11484: LD_INT 103
11486: PUSH
11487: LD_INT 114
11489: PUSH
11490: LD_INT 2
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: PUSH
11499: LD_INT 30
11501: PUSH
11502: LD_INT 99
11504: PUSH
11505: LD_INT 114
11507: PUSH
11508: LD_INT 3
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: PUSH
11517: LD_INT 28
11519: PUSH
11520: LD_INT 100
11522: PUSH
11523: LD_INT 112
11525: PUSH
11526: LD_INT 1
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: PUSH
11535: LD_INT 2
11537: PUSH
11538: LD_INT 92
11540: PUSH
11541: LD_INT 101
11543: PUSH
11544: LD_INT 0
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: PUSH
11553: LD_INT 28
11555: PUSH
11556: LD_INT 97
11558: PUSH
11559: LD_INT 116
11561: PUSH
11562: LD_INT 5
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: PUSH
11571: LD_INT 17
11573: PUSH
11574: LD_INT 96
11576: PUSH
11577: LD_INT 101
11579: PUSH
11580: LD_INT 4
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: PUSH
11589: LD_INT 18
11591: PUSH
11592: LD_INT 88
11594: PUSH
11595: LD_INT 97
11597: PUSH
11598: LD_INT 2
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: PUSH
11607: LD_INT 28
11609: PUSH
11610: LD_INT 106
11612: PUSH
11613: LD_INT 92
11615: PUSH
11616: LD_INT 2
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: PUSH
11625: LD_INT 32
11627: PUSH
11628: LD_INT 88
11630: PUSH
11631: LD_INT 89
11633: PUSH
11634: LD_INT 2
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: PUSH
11643: LD_INT 32
11645: PUSH
11646: LD_INT 86
11648: PUSH
11649: LD_INT 90
11651: PUSH
11652: LD_INT 2
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: PUSH
11661: LD_INT 32
11663: PUSH
11664: LD_INT 85
11666: PUSH
11667: LD_INT 99
11669: PUSH
11670: LD_INT 2
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: PUSH
11679: LD_INT 32
11681: PUSH
11682: LD_INT 85
11684: PUSH
11685: LD_INT 107
11687: PUSH
11688: LD_INT 1
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: PUSH
11697: LD_INT 33
11699: PUSH
11700: LD_INT 105
11702: PUSH
11703: LD_INT 99
11705: PUSH
11706: LD_INT 1
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: PUSH
11715: LD_INT 33
11717: PUSH
11718: LD_INT 102
11720: PUSH
11721: LD_INT 92
11723: PUSH
11724: LD_INT 3
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: PUSH
11733: LD_INT 33
11735: PUSH
11736: LD_INT 105
11738: PUSH
11739: LD_INT 92
11741: PUSH
11742: LD_INT 2
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: PUSH
11751: LD_INT 6
11753: PUSH
11754: LD_INT 92
11756: PUSH
11757: LD_INT 110
11759: PUSH
11760: LD_INT 0
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: PUSH
11769: LD_INT 6
11771: PUSH
11772: LD_INT 103
11774: PUSH
11775: LD_INT 103
11777: PUSH
11778: LD_INT 5
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: PUSH
11787: LD_INT 21
11789: PUSH
11790: LD_INT 89
11792: PUSH
11793: LD_INT 101
11795: PUSH
11796: LD_INT 1
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: PUSH
11805: LD_INT 16
11807: PUSH
11808: LD_INT 95
11810: PUSH
11811: LD_INT 104
11813: PUSH
11814: LD_INT 4
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: PUSH
11823: LD_INT 24
11825: PUSH
11826: LD_INT 92
11828: PUSH
11829: LD_INT 105
11831: PUSH
11832: LD_INT 0
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11865: LD_ADDR_VAR 0 3
11869: PUSH
11870: LD_INT 22
11872: PUSH
11873: LD_INT 3
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: PUSH
11880: LD_INT 3
11882: PUSH
11883: LD_INT 25
11885: PUSH
11886: LD_INT 2
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: PPUSH
11901: CALL_OW 69
11905: PUSH
11906: FOR_IN
11907: IFFALSE 11926
// AddComAgressiveMove ( i , 96 , 99 ) ;
11909: LD_VAR 0 3
11913: PPUSH
11914: LD_INT 96
11916: PPUSH
11917: LD_INT 99
11919: PPUSH
11920: CALL_OW 174
11924: GO 11906
11926: POP
11927: POP
// for i := 1 to buildingsTab do
11928: LD_ADDR_VAR 0 3
11932: PUSH
11933: DOUBLE
11934: LD_INT 1
11936: DEC
11937: ST_TO_ADDR
11938: LD_VAR 0 5
11942: PUSH
11943: FOR_TO
11944: IFFALSE 12017
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11946: LD_VAR 0 4
11950: PPUSH
11951: LD_VAR 0 5
11955: PUSH
11956: LD_VAR 0 3
11960: ARRAY
11961: PUSH
11962: LD_INT 1
11964: ARRAY
11965: PPUSH
11966: LD_VAR 0 5
11970: PUSH
11971: LD_VAR 0 3
11975: ARRAY
11976: PUSH
11977: LD_INT 2
11979: ARRAY
11980: PPUSH
11981: LD_VAR 0 5
11985: PUSH
11986: LD_VAR 0 3
11990: ARRAY
11991: PUSH
11992: LD_INT 3
11994: ARRAY
11995: PPUSH
11996: LD_VAR 0 5
12000: PUSH
12001: LD_VAR 0 3
12005: ARRAY
12006: PUSH
12007: LD_INT 4
12009: ARRAY
12010: PPUSH
12011: CALL_OW 205
12015: GO 11943
12017: POP
12018: POP
// end ; if position = 3 then
12019: LD_VAR 0 1
12023: PUSH
12024: LD_INT 3
12026: EQUAL
12027: IFFALSE 12813
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12029: LD_ADDR_VAR 0 4
12033: PUSH
12034: LD_INT 22
12036: PUSH
12037: LD_INT 3
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: LD_INT 25
12046: PUSH
12047: LD_INT 2
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PPUSH
12058: CALL_OW 69
12062: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
12063: LD_ADDR_VAR 0 5
12067: PUSH
12068: LD_INT 0
12070: PUSH
12071: LD_INT 151
12073: PUSH
12074: LD_INT 71
12076: PUSH
12077: LD_INT 4
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: PUSH
12086: LD_INT 4
12088: PUSH
12089: LD_INT 145
12091: PUSH
12092: LD_INT 53
12094: PUSH
12095: LD_INT 3
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: PUSH
12104: LD_INT 4
12106: PUSH
12107: LD_INT 172
12109: PUSH
12110: LD_INT 102
12112: PUSH
12113: LD_INT 5
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 29
12124: PUSH
12125: LD_INT 152
12127: PUSH
12128: LD_INT 85
12130: PUSH
12131: LD_INT 3
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: PUSH
12140: LD_INT 30
12142: PUSH
12143: LD_INT 156
12145: PUSH
12146: LD_INT 92
12148: PUSH
12149: LD_INT 3
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: PUSH
12158: LD_INT 28
12160: PUSH
12161: LD_INT 151
12163: PUSH
12164: LD_INT 66
12166: PUSH
12167: LD_INT 4
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: PUSH
12176: LD_INT 2
12178: PUSH
12179: LD_INT 163
12181: PUSH
12182: LD_INT 95
12184: PUSH
12185: LD_INT 5
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: PUSH
12194: LD_INT 28
12196: PUSH
12197: LD_INT 149
12199: PUSH
12200: LD_INT 63
12202: PUSH
12203: LD_INT 4
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: PUSH
12212: LD_INT 17
12214: PUSH
12215: LD_INT 167
12217: PUSH
12218: LD_INT 99
12220: PUSH
12221: LD_INT 5
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 18
12232: PUSH
12233: LD_INT 163
12235: PUSH
12236: LD_INT 98
12238: PUSH
12239: LD_INT 0
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: PUSH
12248: LD_INT 28
12250: PUSH
12251: LD_INT 154
12253: PUSH
12254: LD_INT 70
12256: PUSH
12257: LD_INT 4
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: PUSH
12266: LD_INT 32
12268: PUSH
12269: LD_INT 155
12271: PUSH
12272: LD_INT 62
12274: PUSH
12275: LD_INT 4
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: PUSH
12284: LD_INT 32
12286: PUSH
12287: LD_INT 161
12289: PUSH
12290: LD_INT 69
12292: PUSH
12293: LD_INT 4
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: PUSH
12302: LD_INT 32
12304: PUSH
12305: LD_INT 168
12307: PUSH
12308: LD_INT 78
12310: PUSH
12311: LD_INT 4
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: PUSH
12320: LD_INT 32
12322: PUSH
12323: LD_INT 163
12325: PUSH
12326: LD_INT 80
12328: PUSH
12329: LD_INT 5
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: PUSH
12338: LD_INT 32
12340: PUSH
12341: LD_INT 136
12343: PUSH
12344: LD_INT 73
12346: PUSH
12347: LD_INT 0
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: PUSH
12356: LD_INT 32
12358: PUSH
12359: LD_INT 157
12361: PUSH
12362: LD_INT 98
12364: PUSH
12365: LD_INT 0
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 32
12376: PUSH
12377: LD_INT 150
12379: PUSH
12380: LD_INT 87
12382: PUSH
12383: LD_INT 1
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: PUSH
12392: LD_INT 33
12394: PUSH
12395: LD_INT 171
12397: PUSH
12398: LD_INT 97
12400: PUSH
12401: LD_INT 4
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: PUSH
12410: LD_INT 33
12412: PUSH
12413: LD_INT 168
12415: PUSH
12416: LD_INT 92
12418: PUSH
12419: LD_INT 4
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: PUSH
12428: LD_INT 33
12430: PUSH
12431: LD_INT 166
12433: PUSH
12434: LD_INT 80
12436: PUSH
12437: LD_INT 5
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: PUSH
12446: LD_INT 33
12448: PUSH
12449: LD_INT 141
12451: PUSH
12452: LD_INT 54
12454: PUSH
12455: LD_INT 2
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: PUSH
12464: LD_INT 33
12466: PUSH
12467: LD_INT 133
12469: PUSH
12470: LD_INT 57
12472: PUSH
12473: LD_INT 2
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 33
12484: PUSH
12485: LD_INT 132
12487: PUSH
12488: LD_INT 61
12490: PUSH
12491: LD_INT 2
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: PUSH
12500: LD_INT 33
12502: PUSH
12503: LD_INT 150
12505: PUSH
12506: LD_INT 82
12508: PUSH
12509: LD_INT 0
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: PUSH
12518: LD_INT 33
12520: PUSH
12521: LD_INT 132
12523: PUSH
12524: LD_INT 72
12526: PUSH
12527: LD_INT 0
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: PUSH
12536: LD_INT 6
12538: PUSH
12539: LD_INT 146
12541: PUSH
12542: LD_INT 64
12544: PUSH
12545: LD_INT 4
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: PUSH
12554: LD_INT 6
12556: PUSH
12557: LD_INT 159
12559: PUSH
12560: LD_INT 85
12562: PUSH
12563: LD_INT 4
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: PUSH
12572: LD_INT 21
12574: PUSH
12575: LD_INT 163
12577: PUSH
12578: LD_INT 91
12580: PUSH
12581: LD_INT 3
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: PUSH
12590: LD_INT 16
12592: PUSH
12593: LD_INT 166
12595: PUSH
12596: LD_INT 95
12598: PUSH
12599: LD_INT 4
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: PUSH
12608: LD_INT 24
12610: PUSH
12611: LD_INT 159
12613: PUSH
12614: LD_INT 95
12616: PUSH
12617: LD_INT 1
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12659: LD_ADDR_VAR 0 3
12663: PUSH
12664: LD_INT 22
12666: PUSH
12667: LD_INT 3
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: PUSH
12674: LD_INT 3
12676: PUSH
12677: LD_INT 25
12679: PUSH
12680: LD_INT 2
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PPUSH
12695: CALL_OW 69
12699: PUSH
12700: FOR_IN
12701: IFFALSE 12720
// AddComAgressiveMove ( i , 141 , 65 ) ;
12703: LD_VAR 0 3
12707: PPUSH
12708: LD_INT 141
12710: PPUSH
12711: LD_INT 65
12713: PPUSH
12714: CALL_OW 174
12718: GO 12700
12720: POP
12721: POP
// for i := 1 to buildingsTab do
12722: LD_ADDR_VAR 0 3
12726: PUSH
12727: DOUBLE
12728: LD_INT 1
12730: DEC
12731: ST_TO_ADDR
12732: LD_VAR 0 5
12736: PUSH
12737: FOR_TO
12738: IFFALSE 12811
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12740: LD_VAR 0 4
12744: PPUSH
12745: LD_VAR 0 5
12749: PUSH
12750: LD_VAR 0 3
12754: ARRAY
12755: PUSH
12756: LD_INT 1
12758: ARRAY
12759: PPUSH
12760: LD_VAR 0 5
12764: PUSH
12765: LD_VAR 0 3
12769: ARRAY
12770: PUSH
12771: LD_INT 2
12773: ARRAY
12774: PPUSH
12775: LD_VAR 0 5
12779: PUSH
12780: LD_VAR 0 3
12784: ARRAY
12785: PUSH
12786: LD_INT 3
12788: ARRAY
12789: PPUSH
12790: LD_VAR 0 5
12794: PUSH
12795: LD_VAR 0 3
12799: ARRAY
12800: PUSH
12801: LD_INT 4
12803: ARRAY
12804: PPUSH
12805: CALL_OW 205
12809: GO 12737
12811: POP
12812: POP
// end ; end ;
12813: LD_VAR 0 2
12817: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
12818: LD_INT 0
12820: PPUSH
12821: PPUSH
12822: PPUSH
12823: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
12824: LD_ADDR_VAR 0 3
12828: PUSH
12829: LD_INT 22
12831: PUSH
12832: LD_INT 2
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: PUSH
12839: LD_INT 25
12841: PUSH
12842: LD_INT 2
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: PPUSH
12853: CALL_OW 69
12857: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
12858: LD_VAR 0 3
12862: PPUSH
12863: LD_INT 0
12865: PPUSH
12866: LD_INT 71
12868: PPUSH
12869: LD_INT 15
12871: PPUSH
12872: LD_INT 3
12874: PPUSH
12875: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
12879: LD_ADDR_VAR 0 4
12883: PUSH
12884: LD_INT 6
12886: PUSH
12887: LD_INT 77
12889: PUSH
12890: LD_INT 18
12892: PUSH
12893: LD_INT 3
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: PUSH
12902: LD_INT 4
12904: PUSH
12905: LD_INT 77
12907: PUSH
12908: LD_INT 26
12910: PUSH
12911: LD_INT 0
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 31
12922: PUSH
12923: LD_INT 82
12925: PUSH
12926: LD_INT 28
12928: PUSH
12929: LD_INT 0
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: PUSH
12938: LD_INT 31
12940: PUSH
12941: LD_INT 84
12943: PUSH
12944: LD_INT 21
12946: PUSH
12947: LD_INT 3
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: PUSH
12956: LD_INT 31
12958: PUSH
12959: LD_INT 66
12961: PUSH
12962: LD_INT 14
12964: PUSH
12965: LD_INT 2
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: PUSH
12974: LD_INT 27
12976: PUSH
12977: LD_INT 67
12979: PUSH
12980: LD_INT 18
12982: PUSH
12983: LD_INT 5
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: PUSH
12992: LD_INT 27
12994: PUSH
12995: LD_INT 69
12997: PUSH
12998: LD_INT 23
13000: PUSH
13001: LD_INT 2
13003: PUSH
13004: EMPTY
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: ST_TO_ADDR
// for i := 1 to buildingsTab do
13019: LD_ADDR_VAR 0 2
13023: PUSH
13024: DOUBLE
13025: LD_INT 1
13027: DEC
13028: ST_TO_ADDR
13029: LD_VAR 0 4
13033: PUSH
13034: FOR_TO
13035: IFFALSE 13108
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13037: LD_VAR 0 3
13041: PPUSH
13042: LD_VAR 0 4
13046: PUSH
13047: LD_VAR 0 2
13051: ARRAY
13052: PUSH
13053: LD_INT 1
13055: ARRAY
13056: PPUSH
13057: LD_VAR 0 4
13061: PUSH
13062: LD_VAR 0 2
13066: ARRAY
13067: PUSH
13068: LD_INT 2
13070: ARRAY
13071: PPUSH
13072: LD_VAR 0 4
13076: PUSH
13077: LD_VAR 0 2
13081: ARRAY
13082: PUSH
13083: LD_INT 3
13085: ARRAY
13086: PPUSH
13087: LD_VAR 0 4
13091: PUSH
13092: LD_VAR 0 2
13096: ARRAY
13097: PUSH
13098: LD_INT 4
13100: ARRAY
13101: PPUSH
13102: CALL_OW 205
13106: GO 13034
13108: POP
13109: POP
// end ;
13110: LD_VAR 0 1
13114: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
13115: LD_INT 0
13117: PPUSH
13118: PPUSH
13119: PPUSH
13120: PPUSH
13121: PPUSH
13122: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
13123: LD_ADDR_VAR 0 7
13127: PUSH
13128: LD_INT 22
13130: PUSH
13131: LD_VAR 0 1
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: PUSH
13140: LD_INT 25
13142: PUSH
13143: LD_INT 9
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PPUSH
13154: CALL_OW 69
13158: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13159: LD_ADDR_VAR 0 8
13163: PUSH
13164: LD_INT 22
13166: PUSH
13167: LD_VAR 0 2
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PUSH
13176: LD_INT 3
13178: PUSH
13179: LD_INT 21
13181: PUSH
13182: LD_INT 3
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PPUSH
13197: CALL_OW 69
13201: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
13202: LD_ADDR_VAR 0 5
13206: PUSH
13207: LD_INT 1
13209: PPUSH
13210: LD_INT 3
13212: PPUSH
13213: CALL_OW 12
13217: ST_TO_ADDR
// for i = 1 to list do
13218: LD_ADDR_VAR 0 6
13222: PUSH
13223: DOUBLE
13224: LD_INT 1
13226: DEC
13227: ST_TO_ADDR
13228: LD_VAR 0 7
13232: PUSH
13233: FOR_TO
13234: IFFALSE 14224
// for ta in filter do
13236: LD_ADDR_VAR 0 4
13240: PUSH
13241: LD_VAR 0 8
13245: PUSH
13246: FOR_IN
13247: IFFALSE 14220
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
13249: LD_VAR 0 7
13253: PUSH
13254: LD_VAR 0 6
13258: ARRAY
13259: PPUSH
13260: LD_VAR 0 4
13264: PPUSH
13265: CALL_OW 296
13269: PUSH
13270: LD_INT 15
13272: LESSEQUAL
13273: IFFALSE 14218
// begin case c of 1 :
13275: LD_VAR 0 5
13279: PUSH
13280: LD_INT 1
13282: DOUBLE
13283: EQUAL
13284: IFTRUE 13288
13286: GO 13720
13288: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
13289: LD_VAR 0 7
13293: PUSH
13294: LD_VAR 0 6
13298: ARRAY
13299: PPUSH
13300: LD_VAR 0 4
13304: PPUSH
13305: CALL_OW 250
13309: PPUSH
13310: LD_VAR 0 4
13314: PPUSH
13315: CALL_OW 251
13319: PPUSH
13320: CALL_OW 154
// if eventVar2 = 0 then
13324: LD_EXP 62
13328: PUSH
13329: LD_INT 0
13331: EQUAL
13332: IFFALSE 13718
// begin eventVar2 = 1 ;
13334: LD_ADDR_EXP 62
13338: PUSH
13339: LD_INT 1
13341: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13342: LD_INT 245
13344: PPUSH
13345: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13349: LD_VAR 0 4
13353: PPUSH
13354: CALL_OW 250
13358: PPUSH
13359: LD_VAR 0 4
13363: PPUSH
13364: CALL_OW 251
13368: PPUSH
13369: CALL_OW 84
// DialogueOn ;
13373: CALL_OW 6
// if IsOK ( Cyrus ) then
13377: LD_EXP 5
13381: PPUSH
13382: CALL_OW 302
13386: IFFALSE 13402
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13388: LD_EXP 5
13392: PPUSH
13393: LD_STRING D9a-Cyrus-1
13395: PPUSH
13396: CALL_OW 88
// end else
13400: GO 13524
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13402: LD_INT 22
13404: PUSH
13405: LD_INT 1
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 26
13414: PUSH
13415: LD_INT 1
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: LD_INT 2
13424: PUSH
13425: LD_INT 25
13427: PUSH
13428: LD_INT 1
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: LD_INT 25
13437: PUSH
13438: LD_INT 2
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: PUSH
13445: LD_INT 25
13447: PUSH
13448: LD_INT 3
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PUSH
13455: LD_INT 25
13457: PUSH
13458: LD_INT 4
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PUSH
13465: LD_INT 25
13467: PUSH
13468: LD_INT 5
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: LIST
13487: PPUSH
13488: CALL_OW 69
13492: PUSH
13493: LD_EXP 1
13497: PUSH
13498: LD_EXP 14
13502: PUSH
13503: LD_EXP 5
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: LIST
13512: DIFF
13513: PPUSH
13514: LD_STRING D9a-Sol1-1
13516: PPUSH
13517: LD_STRING D9a-Sol1-1
13519: PPUSH
13520: CALL 9665 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13524: LD_INT 22
13526: PUSH
13527: LD_INT 1
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 26
13536: PUSH
13537: LD_INT 1
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PUSH
13544: LD_INT 2
13546: PUSH
13547: LD_INT 25
13549: PUSH
13550: LD_INT 1
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: LD_INT 25
13559: PUSH
13560: LD_INT 2
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 25
13569: PUSH
13570: LD_INT 3
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: LD_INT 25
13579: PUSH
13580: LD_INT 4
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: PUSH
13587: LD_INT 25
13589: PUSH
13590: LD_INT 5
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: LIST
13609: PPUSH
13610: CALL_OW 69
13614: PUSH
13615: LD_EXP 1
13619: PUSH
13620: LD_EXP 14
13624: PUSH
13625: LD_EXP 5
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: LIST
13634: DIFF
13635: PPUSH
13636: LD_STRING D9b-Sol1-1
13638: PPUSH
13639: LD_STRING D9b-Sol1-1
13641: PPUSH
13642: CALL 9665 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13646: LD_STRING 09_arInfo
13648: PPUSH
13649: LD_INT 0
13651: PPUSH
13652: CALL_OW 30
13656: PUSH
13657: LD_INT 1
13659: EQUAL
13660: IFFALSE 13674
// Say ( JMM , D9a-JMM-1 ) ;
13662: LD_EXP 1
13666: PPUSH
13667: LD_STRING D9a-JMM-1
13669: PPUSH
13670: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13674: LD_EXP 1
13678: PPUSH
13679: LD_STRING D9c-JMM-1
13681: PPUSH
13682: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
13686: LD_INT 12
13688: PPUSH
13689: LD_INT 1
13691: PPUSH
13692: CALL_OW 321
13696: PUSH
13697: LD_INT 2
13699: EQUAL
13700: IFFALSE 13714
// Say ( JMM , D9c-JMM-1a ) ;
13702: LD_EXP 1
13706: PPUSH
13707: LD_STRING D9c-JMM-1a
13709: PPUSH
13710: CALL_OW 88
// DialogueOff ;
13714: CALL_OW 7
// end ; end ; 2 :
13718: GO 14218
13720: LD_INT 2
13722: DOUBLE
13723: EQUAL
13724: IFTRUE 13728
13726: GO 14186
13728: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
13729: LD_VAR 0 7
13733: PUSH
13734: LD_VAR 0 6
13738: ARRAY
13739: PPUSH
13740: LD_VAR 0 4
13744: PPUSH
13745: CALL_OW 250
13749: PUSH
13750: LD_INT 1
13752: NEG
13753: PPUSH
13754: LD_INT 1
13756: PPUSH
13757: CALL_OW 12
13761: PLUS
13762: PPUSH
13763: LD_VAR 0 4
13767: PPUSH
13768: CALL_OW 251
13772: PUSH
13773: LD_INT 1
13775: NEG
13776: PPUSH
13777: LD_INT 1
13779: PPUSH
13780: CALL_OW 12
13784: PLUS
13785: PPUSH
13786: CALL_OW 153
// if eventVar2 = 0 then
13790: LD_EXP 62
13794: PUSH
13795: LD_INT 0
13797: EQUAL
13798: IFFALSE 14184
// begin eventVar2 = 1 ;
13800: LD_ADDR_EXP 62
13804: PUSH
13805: LD_INT 1
13807: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13808: LD_INT 245
13810: PPUSH
13811: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13815: LD_VAR 0 4
13819: PPUSH
13820: CALL_OW 250
13824: PPUSH
13825: LD_VAR 0 4
13829: PPUSH
13830: CALL_OW 251
13834: PPUSH
13835: CALL_OW 84
// DialogueOn ;
13839: CALL_OW 6
// if IsOK ( Cyrus ) then
13843: LD_EXP 5
13847: PPUSH
13848: CALL_OW 302
13852: IFFALSE 13868
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13854: LD_EXP 5
13858: PPUSH
13859: LD_STRING D9a-Cyrus-1
13861: PPUSH
13862: CALL_OW 88
// end else
13866: GO 13990
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13868: LD_INT 22
13870: PUSH
13871: LD_INT 1
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PUSH
13878: LD_INT 26
13880: PUSH
13881: LD_INT 1
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: LD_INT 2
13890: PUSH
13891: LD_INT 25
13893: PUSH
13894: LD_INT 1
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: LD_INT 25
13903: PUSH
13904: LD_INT 2
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 25
13913: PUSH
13914: LD_INT 3
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: LD_INT 25
13923: PUSH
13924: LD_INT 4
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PUSH
13931: LD_INT 25
13933: PUSH
13934: LD_INT 5
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: LIST
13953: PPUSH
13954: CALL_OW 69
13958: PUSH
13959: LD_EXP 1
13963: PUSH
13964: LD_EXP 14
13968: PUSH
13969: LD_EXP 5
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: LIST
13978: DIFF
13979: PPUSH
13980: LD_STRING D9a-Sol1-1
13982: PPUSH
13983: LD_STRING D9a-Sol1-1
13985: PPUSH
13986: CALL 9665 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13990: LD_INT 22
13992: PUSH
13993: LD_INT 1
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: PUSH
14000: LD_INT 26
14002: PUSH
14003: LD_INT 1
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: LD_INT 2
14012: PUSH
14013: LD_INT 25
14015: PUSH
14016: LD_INT 1
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: PUSH
14023: LD_INT 25
14025: PUSH
14026: LD_INT 2
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: PUSH
14033: LD_INT 25
14035: PUSH
14036: LD_INT 3
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PUSH
14043: LD_INT 25
14045: PUSH
14046: LD_INT 4
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: PUSH
14053: LD_INT 25
14055: PUSH
14056: LD_INT 5
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: LIST
14075: PPUSH
14076: CALL_OW 69
14080: PUSH
14081: LD_EXP 1
14085: PUSH
14086: LD_EXP 14
14090: PUSH
14091: LD_EXP 5
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: LIST
14100: DIFF
14101: PPUSH
14102: LD_STRING D9b-Sol1-1
14104: PPUSH
14105: LD_STRING D9b-Sol1-1
14107: PPUSH
14108: CALL 9665 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
14112: LD_STRING 09_arInfo
14114: PPUSH
14115: LD_INT 0
14117: PPUSH
14118: CALL_OW 30
14122: PUSH
14123: LD_INT 1
14125: EQUAL
14126: IFFALSE 14140
// Say ( JMM , D9a-JMM-1 ) ;
14128: LD_EXP 1
14132: PPUSH
14133: LD_STRING D9a-JMM-1
14135: PPUSH
14136: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
14140: LD_EXP 1
14144: PPUSH
14145: LD_STRING D9c-JMM-1
14147: PPUSH
14148: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
14152: LD_INT 12
14154: PPUSH
14155: LD_INT 1
14157: PPUSH
14158: CALL_OW 321
14162: PUSH
14163: LD_INT 2
14165: EQUAL
14166: IFFALSE 14180
// Say ( JMM , D9c-JMM-1a ) ;
14168: LD_EXP 1
14172: PPUSH
14173: LD_STRING D9c-JMM-1a
14175: PPUSH
14176: CALL_OW 88
// DialogueOff ;
14180: CALL_OW 7
// end ; end ; 3 :
14184: GO 14218
14186: LD_INT 3
14188: DOUBLE
14189: EQUAL
14190: IFTRUE 14194
14192: GO 14217
14194: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14195: LD_VAR 0 7
14199: PUSH
14200: LD_VAR 0 6
14204: ARRAY
14205: PPUSH
14206: LD_VAR 0 4
14210: PPUSH
14211: CALL_OW 115
14215: GO 14218
14217: POP
// end ; end ;
14218: GO 13246
14220: POP
14221: POP
14222: GO 13233
14224: POP
14225: POP
// end ;
14226: LD_VAR 0 3
14230: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
14231: LD_INT 0
14233: PPUSH
14234: PPUSH
14235: PPUSH
14236: PPUSH
// for i = 1 to 72 do
14237: LD_ADDR_VAR 0 5
14241: PUSH
14242: DOUBLE
14243: LD_INT 1
14245: DEC
14246: ST_TO_ADDR
14247: LD_INT 72
14249: PUSH
14250: FOR_TO
14251: IFFALSE 14309
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
14253: LD_VAR 0 5
14257: PPUSH
14258: LD_VAR 0 1
14262: PPUSH
14263: CALL_OW 321
14267: PUSH
14268: LD_INT 1
14270: EQUAL
14271: PUSH
14272: LD_VAR 0 5
14276: PPUSH
14277: LD_VAR 0 3
14281: PPUSH
14282: CALL_OW 482
14286: PUSH
14287: LD_INT 1
14289: EQUAL
14290: AND
14291: IFFALSE 14307
// AddComResearch ( lab , i ) ;
14293: LD_VAR 0 2
14297: PPUSH
14298: LD_VAR 0 5
14302: PPUSH
14303: CALL_OW 184
14307: GO 14250
14309: POP
14310: POP
// end ;
14311: LD_VAR 0 4
14315: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
14316: LD_INT 0
14318: PPUSH
14319: PPUSH
14320: PPUSH
14321: PPUSH
14322: PPUSH
14323: PPUSH
14324: PPUSH
14325: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
14326: LD_ADDR_VAR 0 6
14330: PUSH
14331: LD_INT 22
14333: PUSH
14334: LD_VAR 0 1
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 56
14345: PUSH
14346: EMPTY
14347: LIST
14348: PUSH
14349: LD_INT 24
14351: PUSH
14352: LD_INT 700
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: PUSH
14359: LD_INT 3
14361: PUSH
14362: LD_INT 60
14364: PUSH
14365: EMPTY
14366: LIST
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: PUSH
14372: LD_INT 2
14374: PUSH
14375: LD_INT 25
14377: PUSH
14378: LD_INT 1
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: LD_INT 25
14387: PUSH
14388: LD_INT 9
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: LIST
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: PPUSH
14407: CALL_OW 69
14411: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
14412: LD_ADDR_VAR 0 7
14416: PUSH
14417: LD_INT 22
14419: PUSH
14420: LD_VAR 0 1
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: PUSH
14429: LD_INT 30
14431: PUSH
14432: LD_INT 32
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PUSH
14439: LD_INT 58
14441: PUSH
14442: EMPTY
14443: LIST
14444: PUSH
14445: LD_INT 24
14447: PUSH
14448: LD_INT 251
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: PPUSH
14461: CALL_OW 69
14465: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
14466: LD_ADDR_VAR 0 9
14470: PUSH
14471: LD_INT 22
14473: PUSH
14474: LD_VAR 0 1
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PUSH
14483: LD_INT 2
14485: PUSH
14486: LD_INT 30
14488: PUSH
14489: LD_INT 4
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: PUSH
14496: LD_INT 30
14498: PUSH
14499: LD_INT 5
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: LIST
14510: PUSH
14511: LD_INT 24
14513: PUSH
14514: LD_INT 251
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: LIST
14525: PPUSH
14526: CALL_OW 69
14530: ST_TO_ADDR
// if barrackList > 0 then
14531: LD_VAR 0 9
14535: PUSH
14536: LD_INT 0
14538: GREATER
14539: IFFALSE 14674
// begin if turretList = 0 then
14541: LD_VAR 0 7
14545: PUSH
14546: LD_INT 0
14548: EQUAL
14549: IFFALSE 14598
// begin for i in soldiers_list do
14551: LD_ADDR_VAR 0 4
14555: PUSH
14556: LD_VAR 0 6
14560: PUSH
14561: FOR_IN
14562: IFFALSE 14594
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
14564: LD_VAR 0 4
14568: PPUSH
14569: LD_VAR 0 9
14573: PUSH
14574: LD_INT 1
14576: PPUSH
14577: LD_VAR 0 9
14581: PPUSH
14582: CALL_OW 12
14586: ARRAY
14587: PPUSH
14588: CALL_OW 120
14592: GO 14561
14594: POP
14595: POP
// end else
14596: GO 14674
// begin for i in barrackList do
14598: LD_ADDR_VAR 0 4
14602: PUSH
14603: LD_VAR 0 9
14607: PUSH
14608: FOR_IN
14609: IFFALSE 14672
// begin insideUnits = UnitsInside ( i ) ;
14611: LD_ADDR_VAR 0 10
14615: PUSH
14616: LD_VAR 0 4
14620: PPUSH
14621: CALL_OW 313
14625: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
14626: LD_VAR 0 10
14630: PUSH
14631: LD_INT 1
14633: ARRAY
14634: PPUSH
14635: LD_VAR 0 7
14639: PUSH
14640: LD_INT 1
14642: ARRAY
14643: PPUSH
14644: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
14648: LD_VAR 0 6
14652: PUSH
14653: LD_INT 1
14655: ARRAY
14656: PPUSH
14657: LD_VAR 0 7
14661: PUSH
14662: LD_INT 1
14664: ARRAY
14665: PPUSH
14666: CALL_OW 120
// end ;
14670: GO 14608
14672: POP
14673: POP
// end ; end ; end ;
14674: LD_VAR 0 3
14678: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14679: LD_INT 0
14681: PPUSH
14682: PPUSH
14683: PPUSH
14684: PPUSH
14685: PPUSH
14686: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14687: LD_ADDR_VAR 0 6
14691: PUSH
14692: LD_VAR 0 2
14696: PPUSH
14697: CALL_OW 313
14701: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
14702: LD_ADDR_VAR 0 7
14706: PUSH
14707: LD_INT 22
14709: PUSH
14710: LD_VAR 0 1
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: PUSH
14719: LD_INT 25
14721: PUSH
14722: LD_INT 2
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: LD_INT 24
14731: PUSH
14732: LD_INT 1000
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 3
14741: PUSH
14742: LD_INT 54
14744: PUSH
14745: EMPTY
14746: LIST
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: PPUSH
14758: CALL_OW 69
14762: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14763: LD_ADDR_VAR 0 4
14767: PUSH
14768: LD_INT 22
14770: PUSH
14771: LD_VAR 0 1
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PUSH
14780: LD_INT 21
14782: PUSH
14783: LD_INT 3
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PUSH
14790: LD_INT 3
14792: PUSH
14793: LD_INT 24
14795: PUSH
14796: LD_INT 1000
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: LIST
14811: PUSH
14812: EMPTY
14813: LIST
14814: PPUSH
14815: CALL_OW 69
14819: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
14820: LD_VAR 0 4
14824: NOT
14825: PUSH
14826: LD_VAR 0 7
14830: NOT
14831: AND
14832: PUSH
14833: LD_EXP 42
14837: NOT
14838: AND
14839: IFFALSE 14843
// exit ;
14841: GO 15034
// if buildings_list > 0 and engineerOkInside then
14843: LD_VAR 0 4
14847: PUSH
14848: LD_INT 0
14850: GREATER
14851: PUSH
14852: LD_VAR 0 6
14856: AND
14857: IFFALSE 14911
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
14859: LD_ADDR_VAR 0 5
14863: PUSH
14864: LD_INT 22
14866: PUSH
14867: LD_VAR 0 1
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: LD_INT 25
14878: PUSH
14879: LD_INT 2
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PPUSH
14890: CALL_OW 69
14894: PUSH
14895: FOR_IN
14896: IFFALSE 14909
// ComExitBuilding ( i ) ;
14898: LD_VAR 0 5
14902: PPUSH
14903: CALL_OW 122
14907: GO 14895
14909: POP
14910: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
14911: LD_VAR 0 4
14915: PUSH
14916: LD_INT 0
14918: GREATER
14919: PUSH
14920: LD_VAR 0 7
14924: PUSH
14925: LD_INT 0
14927: GREATER
14928: AND
14929: IFFALSE 14983
// begin for i in engineerOkOutside do
14931: LD_ADDR_VAR 0 5
14935: PUSH
14936: LD_VAR 0 7
14940: PUSH
14941: FOR_IN
14942: IFFALSE 14981
// for j in buildings_list do
14944: LD_ADDR_VAR 0 8
14948: PUSH
14949: LD_VAR 0 4
14953: PUSH
14954: FOR_IN
14955: IFFALSE 14977
// ComRepairBuilding ( i , j [ 1 ] ) ;
14957: LD_VAR 0 5
14961: PPUSH
14962: LD_VAR 0 8
14966: PUSH
14967: LD_INT 1
14969: ARRAY
14970: PPUSH
14971: CALL_OW 130
14975: GO 14954
14977: POP
14978: POP
14979: GO 14941
14981: POP
14982: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
14983: LD_VAR 0 4
14987: PUSH
14988: LD_INT 0
14990: EQUAL
14991: PUSH
14992: LD_VAR 0 7
14996: PUSH
14997: LD_INT 0
14999: GREATER
15000: AND
15001: IFFALSE 15034
// for i in engineerOkOutside do
15003: LD_ADDR_VAR 0 5
15007: PUSH
15008: LD_VAR 0 7
15012: PUSH
15013: FOR_IN
15014: IFFALSE 15032
// ComEnterUnit ( i , building ) ;
15016: LD_VAR 0 5
15020: PPUSH
15021: LD_VAR 0 2
15025: PPUSH
15026: CALL_OW 120
15030: GO 15013
15032: POP
15033: POP
// end ;
15034: LD_VAR 0 3
15038: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
15039: LD_INT 0
15041: PPUSH
15042: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
15043: LD_INT 22
15045: PUSH
15046: LD_VAR 0 1
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PUSH
15055: LD_INT 25
15057: PUSH
15058: LD_INT 2
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PPUSH
15069: CALL_OW 69
15073: PUSH
15074: LD_INT 0
15076: GREATER
15077: PUSH
15078: LD_INT 22
15080: PUSH
15081: LD_VAR 0 1
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: LD_INT 21
15092: PUSH
15093: LD_INT 3
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 3
15102: PUSH
15103: LD_INT 24
15105: PUSH
15106: LD_INT 1000
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: LIST
15121: PPUSH
15122: CALL_OW 69
15126: PUSH
15127: LD_INT 0
15129: EQUAL
15130: AND
15131: PUSH
15132: LD_VAR 0 2
15136: PUSH
15137: LD_INT 0
15139: GREATER
15140: AND
15141: IFFALSE 15240
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
15143: LD_ADDR_VAR 0 4
15147: PUSH
15148: LD_INT 22
15150: PUSH
15151: LD_VAR 0 1
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: LD_INT 25
15162: PUSH
15163: LD_INT 2
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PPUSH
15174: CALL_OW 69
15178: PUSH
15179: FOR_IN
15180: IFFALSE 15238
// begin AddComExitBuilding ( i ) ;
15182: LD_VAR 0 4
15186: PPUSH
15187: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
15191: LD_VAR 0 4
15195: PPUSH
15196: LD_VAR 0 2
15200: PUSH
15201: LD_INT 1
15203: ARRAY
15204: PPUSH
15205: LD_VAR 0 2
15209: PUSH
15210: LD_INT 2
15212: ARRAY
15213: PPUSH
15214: LD_VAR 0 2
15218: PUSH
15219: LD_INT 3
15221: ARRAY
15222: PPUSH
15223: LD_VAR 0 2
15227: PUSH
15228: LD_INT 4
15230: ARRAY
15231: PPUSH
15232: CALL_OW 205
// end ;
15236: GO 15179
15238: POP
15239: POP
// end ; end ;
15240: LD_VAR 0 3
15244: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
15245: LD_INT 0
15247: PPUSH
15248: PPUSH
15249: PPUSH
15250: PPUSH
15251: PPUSH
15252: PPUSH
15253: PPUSH
15254: PPUSH
15255: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
15256: LD_ADDR_VAR 0 6
15260: PUSH
15261: LD_INT 22
15263: PUSH
15264: LD_VAR 0 1
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PUSH
15273: LD_INT 25
15275: PUSH
15276: LD_INT 4
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PUSH
15283: LD_INT 24
15285: PUSH
15286: LD_INT 251
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: LIST
15297: PPUSH
15298: CALL_OW 69
15302: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
15303: LD_ADDR_VAR 0 7
15307: PUSH
15308: LD_VAR 0 3
15312: PPUSH
15313: LD_INT 22
15315: PUSH
15316: LD_VAR 0 1
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: LD_INT 25
15327: PUSH
15328: LD_INT 4
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: PUSH
15335: LD_INT 50
15337: PUSH
15338: EMPTY
15339: LIST
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: LIST
15345: PPUSH
15346: CALL_OW 70
15350: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
15351: LD_ADDR_VAR 0 10
15355: PUSH
15356: LD_VAR 0 3
15360: PPUSH
15361: LD_INT 22
15363: PUSH
15364: LD_VAR 0 1
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: PUSH
15373: LD_INT 21
15375: PUSH
15376: LD_INT 1
15378: PUSH
15379: EMPTY
15380: LIST
15381: LIST
15382: PUSH
15383: LD_INT 3
15385: PUSH
15386: LD_INT 25
15388: PUSH
15389: LD_INT 3
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 3
15402: PUSH
15403: LD_INT 24
15405: PUSH
15406: LD_INT 750
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: PPUSH
15423: CALL_OW 70
15427: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15428: LD_ADDR_VAR 0 11
15432: PUSH
15433: LD_VAR 0 2
15437: PPUSH
15438: LD_INT 22
15440: PUSH
15441: LD_VAR 0 1
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: PUSH
15450: LD_INT 21
15452: PUSH
15453: LD_INT 1
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: PUSH
15460: LD_INT 3
15462: PUSH
15463: LD_INT 25
15465: PUSH
15466: LD_INT 3
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 3
15479: PUSH
15480: LD_INT 24
15482: PUSH
15483: LD_INT 1000
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: PPUSH
15500: CALL_OW 70
15504: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
15505: LD_VAR 0 10
15509: NOT
15510: PUSH
15511: LD_VAR 0 7
15515: NOT
15516: AND
15517: PUSH
15518: LD_VAR 0 11
15522: NOT
15523: AND
15524: IFFALSE 15528
// exit ;
15526: GO 15788
// if damageUnits > 0 and sci_list > 0 then
15528: LD_VAR 0 10
15532: PUSH
15533: LD_INT 0
15535: GREATER
15536: PUSH
15537: LD_VAR 0 6
15541: PUSH
15542: LD_INT 0
15544: GREATER
15545: AND
15546: IFFALSE 15579
// for i in damageUnits do
15548: LD_ADDR_VAR 0 8
15552: PUSH
15553: LD_VAR 0 10
15557: PUSH
15558: FOR_IN
15559: IFFALSE 15577
// ComMoveToArea ( i , healArea ) ;
15561: LD_VAR 0 8
15565: PPUSH
15566: LD_VAR 0 2
15570: PPUSH
15571: CALL_OW 113
15575: GO 15558
15577: POP
15578: POP
// if unitsToHeal > 0 and sci_list > 0 then
15579: LD_VAR 0 11
15583: PUSH
15584: LD_INT 0
15586: GREATER
15587: PUSH
15588: LD_VAR 0 6
15592: PUSH
15593: LD_INT 0
15595: GREATER
15596: AND
15597: IFFALSE 15656
// begin for i in sci_list do
15599: LD_ADDR_VAR 0 8
15603: PUSH
15604: LD_VAR 0 6
15608: PUSH
15609: FOR_IN
15610: IFFALSE 15654
// begin ComExitBuilding ( i ) ;
15612: LD_VAR 0 8
15616: PPUSH
15617: CALL_OW 122
// for j in unitsToHeal do
15621: LD_ADDR_VAR 0 9
15625: PUSH
15626: LD_VAR 0 11
15630: PUSH
15631: FOR_IN
15632: IFFALSE 15650
// AddComHeal ( i , j ) ;
15634: LD_VAR 0 8
15638: PPUSH
15639: LD_VAR 0 9
15643: PPUSH
15644: CALL_OW 188
15648: GO 15631
15650: POP
15651: POP
// end ;
15652: GO 15609
15654: POP
15655: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15656: LD_VAR 0 10
15660: PUSH
15661: LD_INT 0
15663: EQUAL
15664: PUSH
15665: LD_VAR 0 11
15669: PUSH
15670: LD_INT 0
15672: EQUAL
15673: AND
15674: PUSH
15675: LD_VAR 0 7
15679: PUSH
15680: LD_INT 0
15682: GREATER
15683: AND
15684: IFFALSE 15788
// for i in sci_listOutside do
15686: LD_ADDR_VAR 0 8
15690: PUSH
15691: LD_VAR 0 7
15695: PUSH
15696: FOR_IN
15697: IFFALSE 15786
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15699: LD_ADDR_VAR 0 12
15703: PUSH
15704: LD_INT 22
15706: PUSH
15707: LD_VAR 0 1
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PUSH
15716: LD_INT 21
15718: PUSH
15719: LD_INT 3
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: PUSH
15726: LD_INT 30
15728: PUSH
15729: LD_INT 8
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: LIST
15740: PPUSH
15741: CALL_OW 69
15745: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15746: LD_ADDR_VAR 0 13
15750: PUSH
15751: LD_INT 1
15753: PPUSH
15754: LD_VAR 0 12
15758: PPUSH
15759: CALL_OW 12
15763: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
15764: LD_VAR 0 8
15768: PPUSH
15769: LD_VAR 0 12
15773: PUSH
15774: LD_VAR 0 13
15778: ARRAY
15779: PPUSH
15780: CALL_OW 120
// end ;
15784: GO 15696
15786: POP
15787: POP
// end ;
15788: LD_VAR 0 5
15792: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
15793: LD_INT 0
15795: PPUSH
15796: PPUSH
15797: PPUSH
15798: PPUSH
15799: PPUSH
15800: PPUSH
15801: PPUSH
15802: PPUSH
15803: PPUSH
15804: PPUSH
15805: PPUSH
// amChassisTab = [ ] ;
15806: LD_ADDR_VAR 0 19
15810: PUSH
15811: EMPTY
15812: ST_TO_ADDR
// arChassisTab = [ ] ;
15813: LD_ADDR_VAR 0 18
15817: PUSH
15818: EMPTY
15819: ST_TO_ADDR
// ruChassisTab = [ ] ;
15820: LD_ADDR_VAR 0 17
15824: PUSH
15825: EMPTY
15826: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15827: LD_INT 35
15829: PPUSH
15830: CALL_OW 67
// if nation = 1 then
15834: LD_VAR 0 5
15838: PUSH
15839: LD_INT 1
15841: EQUAL
15842: IFFALSE 16347
// begin uc_side = side ;
15844: LD_ADDR_OWVAR 20
15848: PUSH
15849: LD_VAR 0 2
15853: ST_TO_ADDR
// uc_nation = nation ;
15854: LD_ADDR_OWVAR 21
15858: PUSH
15859: LD_VAR 0 5
15863: ST_TO_ADDR
// vc_engine = vehengine ;
15864: LD_ADDR_OWVAR 39
15868: PUSH
15869: LD_VAR 0 6
15873: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
15874: LD_ADDR_OWVAR 38
15878: PUSH
15879: LD_VAR 0 7
15883: PUSH
15884: LD_INT 1
15886: PPUSH
15887: LD_VAR 0 7
15891: PPUSH
15892: CALL_OW 12
15896: ARRAY
15897: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
15898: LD_ADDR_OWVAR 40
15902: PUSH
15903: LD_VAR 0 10
15907: PUSH
15908: LD_INT 1
15910: PPUSH
15911: LD_VAR 0 10
15915: PPUSH
15916: CALL_OW 12
15920: ARRAY
15921: ST_TO_ADDR
// for j = 1 to AMWeapon do
15922: LD_ADDR_VAR 0 14
15926: PUSH
15927: DOUBLE
15928: LD_INT 1
15930: DEC
15931: ST_TO_ADDR
15932: LD_VAR 0 10
15936: PUSH
15937: FOR_TO
15938: IFFALSE 16239
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15940: LD_VAR 0 10
15944: PUSH
15945: LD_VAR 0 14
15949: ARRAY
15950: PUSH
15951: LD_INT 2
15953: EQUAL
15954: PUSH
15955: LD_VAR 0 10
15959: PUSH
15960: LD_VAR 0 14
15964: ARRAY
15965: PUSH
15966: LD_INT 3
15968: EQUAL
15969: OR
15970: IFFALSE 16023
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15972: LD_ADDR_VAR 0 19
15976: PUSH
15977: LD_INT 1
15979: PUSH
15980: LD_INT 2
15982: PUSH
15983: LD_INT 3
15985: PUSH
15986: LD_INT 4
15988: PUSH
15989: LD_INT 5
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15999: LD_ADDR_OWVAR 37
16003: PUSH
16004: LD_VAR 0 19
16008: PUSH
16009: LD_INT 1
16011: PPUSH
16012: LD_VAR 0 19
16016: PPUSH
16017: CALL_OW 12
16021: ARRAY
16022: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
16023: LD_VAR 0 10
16027: PUSH
16028: LD_VAR 0 14
16032: ARRAY
16033: PUSH
16034: LD_INT 4
16036: EQUAL
16037: PUSH
16038: LD_VAR 0 10
16042: PUSH
16043: LD_VAR 0 14
16047: ARRAY
16048: PUSH
16049: LD_INT 5
16051: EQUAL
16052: OR
16053: PUSH
16054: LD_VAR 0 10
16058: PUSH
16059: LD_VAR 0 14
16063: ARRAY
16064: PUSH
16065: LD_INT 9
16067: EQUAL
16068: OR
16069: PUSH
16070: LD_VAR 0 10
16074: PUSH
16075: LD_VAR 0 14
16079: ARRAY
16080: PUSH
16081: LD_INT 11
16083: EQUAL
16084: OR
16085: PUSH
16086: LD_VAR 0 10
16090: PUSH
16091: LD_VAR 0 14
16095: ARRAY
16096: PUSH
16097: LD_INT 7
16099: EQUAL
16100: OR
16101: IFFALSE 16150
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
16103: LD_ADDR_VAR 0 19
16107: PUSH
16108: LD_INT 2
16110: PUSH
16111: LD_INT 3
16113: PUSH
16114: LD_INT 4
16116: PUSH
16117: LD_INT 5
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16126: LD_ADDR_OWVAR 37
16130: PUSH
16131: LD_VAR 0 19
16135: PUSH
16136: LD_INT 1
16138: PPUSH
16139: LD_VAR 0 19
16143: PPUSH
16144: CALL_OW 12
16148: ARRAY
16149: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
16150: LD_VAR 0 10
16154: PUSH
16155: LD_VAR 0 14
16159: ARRAY
16160: PUSH
16161: LD_INT 8
16163: EQUAL
16164: PUSH
16165: LD_VAR 0 10
16169: PUSH
16170: LD_VAR 0 14
16174: ARRAY
16175: PUSH
16176: LD_INT 6
16178: EQUAL
16179: OR
16180: PUSH
16181: LD_VAR 0 10
16185: PUSH
16186: LD_VAR 0 14
16190: ARRAY
16191: PUSH
16192: LD_INT 10
16194: EQUAL
16195: OR
16196: IFFALSE 16237
// begin amChassisTab = [ 4 , 5 ] ;
16198: LD_ADDR_VAR 0 19
16202: PUSH
16203: LD_INT 4
16205: PUSH
16206: LD_INT 5
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16213: LD_ADDR_OWVAR 37
16217: PUSH
16218: LD_VAR 0 19
16222: PUSH
16223: LD_INT 1
16225: PPUSH
16226: LD_VAR 0 19
16230: PPUSH
16231: CALL_OW 12
16235: ARRAY
16236: ST_TO_ADDR
// end ; end ;
16237: GO 15937
16239: POP
16240: POP
// veh = CreateVehicle ;
16241: LD_ADDR_VAR 0 16
16245: PUSH
16246: CALL_OW 45
16250: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16251: LD_VAR 0 16
16255: PPUSH
16256: LD_VAR 0 1
16260: PPUSH
16261: LD_INT 0
16263: PPUSH
16264: CALL_OW 49
// if vc_control = 1 then
16268: LD_OWVAR 38
16272: PUSH
16273: LD_INT 1
16275: EQUAL
16276: IFFALSE 16333
// begin hc_gallery =  ;
16278: LD_ADDR_OWVAR 33
16282: PUSH
16283: LD_STRING 
16285: ST_TO_ADDR
// hc_name =  ;
16286: LD_ADDR_OWVAR 26
16290: PUSH
16291: LD_STRING 
16293: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16294: LD_INT 0
16296: PPUSH
16297: LD_INT 3
16299: PPUSH
16300: LD_VAR 0 4
16304: PPUSH
16305: CALL_OW 380
// un = CreateHuman ;
16309: LD_ADDR_VAR 0 15
16313: PUSH
16314: CALL_OW 44
16318: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16319: LD_VAR 0 15
16323: PPUSH
16324: LD_VAR 0 16
16328: PPUSH
16329: CALL_OW 52
// end ; i = i + 1 ;
16333: LD_ADDR_VAR 0 13
16337: PUSH
16338: LD_VAR 0 13
16342: PUSH
16343: LD_INT 1
16345: PLUS
16346: ST_TO_ADDR
// end ; if nation = 2 then
16347: LD_VAR 0 5
16351: PUSH
16352: LD_INT 2
16354: EQUAL
16355: IFFALSE 16777
// begin uc_side = side ;
16357: LD_ADDR_OWVAR 20
16361: PUSH
16362: LD_VAR 0 2
16366: ST_TO_ADDR
// uc_nation = nation ;
16367: LD_ADDR_OWVAR 21
16371: PUSH
16372: LD_VAR 0 5
16376: ST_TO_ADDR
// vc_engine = vehengine ;
16377: LD_ADDR_OWVAR 39
16381: PUSH
16382: LD_VAR 0 6
16386: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16387: LD_ADDR_OWVAR 38
16391: PUSH
16392: LD_VAR 0 7
16396: PUSH
16397: LD_INT 1
16399: PPUSH
16400: LD_VAR 0 7
16404: PPUSH
16405: CALL_OW 12
16409: ARRAY
16410: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
16411: LD_ADDR_OWVAR 40
16415: PUSH
16416: LD_VAR 0 9
16420: PUSH
16421: LD_INT 1
16423: PPUSH
16424: LD_VAR 0 9
16428: PPUSH
16429: CALL_OW 12
16433: ARRAY
16434: ST_TO_ADDR
// for j = 1 to ARWeapons do
16435: LD_ADDR_VAR 0 14
16439: PUSH
16440: DOUBLE
16441: LD_INT 1
16443: DEC
16444: ST_TO_ADDR
16445: LD_VAR 0 9
16449: PUSH
16450: FOR_TO
16451: IFFALSE 16669
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
16453: LD_VAR 0 9
16457: PUSH
16458: LD_VAR 0 14
16462: ARRAY
16463: PUSH
16464: LD_INT 24
16466: EQUAL
16467: PUSH
16468: LD_VAR 0 9
16472: PUSH
16473: LD_VAR 0 14
16477: ARRAY
16478: PUSH
16479: LD_INT 22
16481: EQUAL
16482: OR
16483: PUSH
16484: LD_VAR 0 9
16488: PUSH
16489: LD_VAR 0 14
16493: ARRAY
16494: PUSH
16495: LD_INT 23
16497: EQUAL
16498: OR
16499: PUSH
16500: LD_VAR 0 9
16504: PUSH
16505: LD_VAR 0 14
16509: ARRAY
16510: PUSH
16511: LD_INT 30
16513: EQUAL
16514: OR
16515: IFFALSE 16552
// begin arChassisTab = [ 14 ] ;
16517: LD_ADDR_VAR 0 18
16521: PUSH
16522: LD_INT 14
16524: PUSH
16525: EMPTY
16526: LIST
16527: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16528: LD_ADDR_OWVAR 37
16532: PUSH
16533: LD_VAR 0 18
16537: PUSH
16538: LD_INT 1
16540: PPUSH
16541: LD_VAR 0 18
16545: PPUSH
16546: CALL_OW 12
16550: ARRAY
16551: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
16552: LD_VAR 0 9
16556: PUSH
16557: LD_VAR 0 14
16561: ARRAY
16562: PUSH
16563: LD_INT 29
16565: EQUAL
16566: PUSH
16567: LD_VAR 0 9
16571: PUSH
16572: LD_VAR 0 14
16576: ARRAY
16577: PUSH
16578: LD_INT 28
16580: EQUAL
16581: OR
16582: PUSH
16583: LD_VAR 0 9
16587: PUSH
16588: LD_VAR 0 14
16592: ARRAY
16593: PUSH
16594: LD_INT 27
16596: EQUAL
16597: OR
16598: PUSH
16599: LD_VAR 0 9
16603: PUSH
16604: LD_VAR 0 14
16608: ARRAY
16609: PUSH
16610: LD_INT 26
16612: EQUAL
16613: OR
16614: PUSH
16615: LD_VAR 0 9
16619: PUSH
16620: LD_VAR 0 14
16624: ARRAY
16625: PUSH
16626: LD_INT 25
16628: EQUAL
16629: OR
16630: IFFALSE 16667
// begin arChassisTab = [ 14 ] ;
16632: LD_ADDR_VAR 0 18
16636: PUSH
16637: LD_INT 14
16639: PUSH
16640: EMPTY
16641: LIST
16642: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16643: LD_ADDR_OWVAR 37
16647: PUSH
16648: LD_VAR 0 18
16652: PUSH
16653: LD_INT 1
16655: PPUSH
16656: LD_VAR 0 18
16660: PPUSH
16661: CALL_OW 12
16665: ARRAY
16666: ST_TO_ADDR
// end ; end ;
16667: GO 16450
16669: POP
16670: POP
// veh = CreateVehicle ;
16671: LD_ADDR_VAR 0 16
16675: PUSH
16676: CALL_OW 45
16680: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16681: LD_VAR 0 16
16685: PPUSH
16686: LD_VAR 0 1
16690: PPUSH
16691: LD_INT 0
16693: PPUSH
16694: CALL_OW 49
// if vc_control = 1 then
16698: LD_OWVAR 38
16702: PUSH
16703: LD_INT 1
16705: EQUAL
16706: IFFALSE 16763
// begin hc_gallery =  ;
16708: LD_ADDR_OWVAR 33
16712: PUSH
16713: LD_STRING 
16715: ST_TO_ADDR
// hc_name =  ;
16716: LD_ADDR_OWVAR 26
16720: PUSH
16721: LD_STRING 
16723: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16724: LD_INT 0
16726: PPUSH
16727: LD_INT 3
16729: PPUSH
16730: LD_VAR 0 4
16734: PPUSH
16735: CALL_OW 380
// un = CreateHuman ;
16739: LD_ADDR_VAR 0 15
16743: PUSH
16744: CALL_OW 44
16748: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16749: LD_VAR 0 15
16753: PPUSH
16754: LD_VAR 0 16
16758: PPUSH
16759: CALL_OW 52
// end ; i = i + 1 ;
16763: LD_ADDR_VAR 0 13
16767: PUSH
16768: LD_VAR 0 13
16772: PUSH
16773: LD_INT 1
16775: PLUS
16776: ST_TO_ADDR
// end ; if nation = 3 then
16777: LD_VAR 0 5
16781: PUSH
16782: LD_INT 3
16784: EQUAL
16785: IFFALSE 17191
// begin uc_side = side ;
16787: LD_ADDR_OWVAR 20
16791: PUSH
16792: LD_VAR 0 2
16796: ST_TO_ADDR
// uc_nation = nation ;
16797: LD_ADDR_OWVAR 21
16801: PUSH
16802: LD_VAR 0 5
16806: ST_TO_ADDR
// vc_engine = vehengine ;
16807: LD_ADDR_OWVAR 39
16811: PUSH
16812: LD_VAR 0 6
16816: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16817: LD_ADDR_OWVAR 38
16821: PUSH
16822: LD_VAR 0 7
16826: PUSH
16827: LD_INT 1
16829: PPUSH
16830: LD_VAR 0 7
16834: PPUSH
16835: CALL_OW 12
16839: ARRAY
16840: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
16841: LD_ADDR_OWVAR 40
16845: PUSH
16846: LD_VAR 0 8
16850: PUSH
16851: LD_INT 1
16853: PPUSH
16854: LD_VAR 0 8
16858: PPUSH
16859: CALL_OW 12
16863: ARRAY
16864: ST_TO_ADDR
// for j = 1 to RuWeapons do
16865: LD_ADDR_VAR 0 14
16869: PUSH
16870: DOUBLE
16871: LD_INT 1
16873: DEC
16874: ST_TO_ADDR
16875: LD_VAR 0 8
16879: PUSH
16880: FOR_TO
16881: IFFALSE 17083
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
16883: LD_VAR 0 8
16887: PUSH
16888: LD_VAR 0 14
16892: ARRAY
16893: PUSH
16894: LD_INT 42
16896: EQUAL
16897: PUSH
16898: LD_VAR 0 8
16902: PUSH
16903: LD_VAR 0 14
16907: ARRAY
16908: PUSH
16909: LD_INT 43
16911: EQUAL
16912: OR
16913: PUSH
16914: LD_VAR 0 8
16918: PUSH
16919: LD_VAR 0 14
16923: ARRAY
16924: PUSH
16925: LD_INT 44
16927: EQUAL
16928: OR
16929: PUSH
16930: LD_VAR 0 8
16934: PUSH
16935: LD_VAR 0 14
16939: ARRAY
16940: PUSH
16941: LD_INT 45
16943: EQUAL
16944: OR
16945: PUSH
16946: LD_VAR 0 8
16950: PUSH
16951: LD_VAR 0 14
16955: ARRAY
16956: PUSH
16957: LD_INT 49
16959: EQUAL
16960: OR
16961: IFFALSE 17010
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16963: LD_ADDR_VAR 0 17
16967: PUSH
16968: LD_INT 21
16970: PUSH
16971: LD_INT 22
16973: PUSH
16974: LD_INT 23
16976: PUSH
16977: LD_INT 24
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16986: LD_ADDR_OWVAR 37
16990: PUSH
16991: LD_VAR 0 17
16995: PUSH
16996: LD_INT 1
16998: PPUSH
16999: LD_VAR 0 17
17003: PPUSH
17004: CALL_OW 12
17008: ARRAY
17009: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
17010: LD_VAR 0 8
17014: PUSH
17015: LD_VAR 0 14
17019: ARRAY
17020: PUSH
17021: LD_INT 46
17023: EQUAL
17024: PUSH
17025: LD_VAR 0 8
17029: PUSH
17030: LD_VAR 0 14
17034: ARRAY
17035: PUSH
17036: LD_INT 47
17038: EQUAL
17039: OR
17040: IFFALSE 17081
// begin ruChassisTab = [ 23 , 24 ] ;
17042: LD_ADDR_VAR 0 17
17046: PUSH
17047: LD_INT 23
17049: PUSH
17050: LD_INT 24
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
17057: LD_ADDR_OWVAR 37
17061: PUSH
17062: LD_VAR 0 17
17066: PUSH
17067: LD_INT 1
17069: PPUSH
17070: LD_VAR 0 17
17074: PPUSH
17075: CALL_OW 12
17079: ARRAY
17080: ST_TO_ADDR
// end ; end ;
17081: GO 16880
17083: POP
17084: POP
// veh = CreateVehicle ;
17085: LD_ADDR_VAR 0 16
17089: PUSH
17090: CALL_OW 45
17094: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17095: LD_VAR 0 16
17099: PPUSH
17100: LD_VAR 0 1
17104: PPUSH
17105: LD_INT 0
17107: PPUSH
17108: CALL_OW 49
// if vc_control = 1 then
17112: LD_OWVAR 38
17116: PUSH
17117: LD_INT 1
17119: EQUAL
17120: IFFALSE 17177
// begin hc_gallery =  ;
17122: LD_ADDR_OWVAR 33
17126: PUSH
17127: LD_STRING 
17129: ST_TO_ADDR
// hc_name =  ;
17130: LD_ADDR_OWVAR 26
17134: PUSH
17135: LD_STRING 
17137: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17138: LD_INT 0
17140: PPUSH
17141: LD_INT 3
17143: PPUSH
17144: LD_VAR 0 4
17148: PPUSH
17149: CALL_OW 380
// un = CreateHuman ;
17153: LD_ADDR_VAR 0 15
17157: PUSH
17158: CALL_OW 44
17162: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17163: LD_VAR 0 15
17167: PPUSH
17168: LD_VAR 0 16
17172: PPUSH
17173: CALL_OW 52
// end ; i = i + 1 ;
17177: LD_ADDR_VAR 0 13
17181: PUSH
17182: LD_VAR 0 13
17186: PUSH
17187: LD_INT 1
17189: PLUS
17190: ST_TO_ADDR
// end ; until i = vehCount ;
17191: LD_VAR 0 13
17195: PUSH
17196: LD_VAR 0 3
17200: EQUAL
17201: IFFALSE 15827
// repeat wait ( 0 0$1 ) ;
17203: LD_INT 35
17205: PPUSH
17206: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
17210: LD_ADDR_VAR 0 20
17214: PUSH
17215: LD_INT 22
17217: PUSH
17218: LD_VAR 0 2
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 21
17229: PUSH
17230: LD_INT 2
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 24
17239: PUSH
17240: LD_INT 650
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: LIST
17251: PPUSH
17252: CALL_OW 69
17256: ST_TO_ADDR
// if vehicleOK_list > 0 then
17257: LD_VAR 0 20
17261: PUSH
17262: LD_INT 0
17264: GREATER
17265: IFFALSE 17456
// begin for i in vehicleOK_list do
17267: LD_ADDR_VAR 0 13
17271: PUSH
17272: LD_VAR 0 20
17276: PUSH
17277: FOR_IN
17278: IFFALSE 17454
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
17280: LD_ADDR_VAR 0 21
17284: PUSH
17285: LD_INT 22
17287: PUSH
17288: LD_VAR 0 11
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PPUSH
17297: CALL_OW 69
17301: PPUSH
17302: LD_VAR 0 13
17306: PPUSH
17307: CALL_OW 74
17311: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
17312: LD_ADDR_VAR 0 22
17316: PUSH
17317: LD_INT 22
17319: PUSH
17320: LD_VAR 0 11
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: LD_INT 2
17331: PUSH
17332: LD_INT 59
17334: PUSH
17335: EMPTY
17336: LIST
17337: PUSH
17338: LD_INT 21
17340: PUSH
17341: LD_INT 1
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: LD_INT 21
17350: PUSH
17351: LD_INT 2
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: EMPTY
17369: LIST
17370: PPUSH
17371: CALL_OW 69
17375: PPUSH
17376: LD_VAR 0 13
17380: PPUSH
17381: CALL_OW 74
17385: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17386: LD_VAR 0 13
17390: PPUSH
17391: LD_VAR 0 21
17395: PPUSH
17396: CALL_OW 296
17400: PUSH
17401: LD_INT 8
17403: PLUS
17404: PUSH
17405: LD_VAR 0 13
17409: PPUSH
17410: LD_VAR 0 22
17414: PPUSH
17415: CALL_OW 296
17419: LESS
17420: IFFALSE 17438
// begin ComAttackUnit ( i , target1 ) ;
17422: LD_VAR 0 13
17426: PPUSH
17427: LD_VAR 0 21
17431: PPUSH
17432: CALL_OW 115
// end else
17436: GO 17452
// begin ComAttackUnit ( i , target2 ) ;
17438: LD_VAR 0 13
17442: PPUSH
17443: LD_VAR 0 22
17447: PPUSH
17448: CALL_OW 115
// end ; end ;
17452: GO 17277
17454: POP
17455: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
17456: LD_INT 22
17458: PUSH
17459: LD_VAR 0 2
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: LD_INT 21
17470: PUSH
17471: LD_INT 2
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PPUSH
17482: CALL_OW 69
17486: PUSH
17487: LD_INT 0
17489: EQUAL
17490: IFFALSE 17203
// end ;
17492: LD_VAR 0 12
17496: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
17497: LD_INT 0
17499: PPUSH
17500: PPUSH
17501: PPUSH
17502: PPUSH
17503: PPUSH
17504: PPUSH
17505: PPUSH
17506: PPUSH
17507: PPUSH
17508: PPUSH
17509: PPUSH
// for i = 1 to soldierCount do
17510: LD_ADDR_VAR 0 13
17514: PUSH
17515: DOUBLE
17516: LD_INT 1
17518: DEC
17519: ST_TO_ADDR
17520: LD_VAR 0 3
17524: PUSH
17525: FOR_TO
17526: IFFALSE 17608
// begin uc_side = side ;
17528: LD_ADDR_OWVAR 20
17532: PUSH
17533: LD_VAR 0 1
17537: ST_TO_ADDR
// uc_nation = nation ;
17538: LD_ADDR_OWVAR 21
17542: PUSH
17543: LD_VAR 0 2
17547: ST_TO_ADDR
// hc_name =  ;
17548: LD_ADDR_OWVAR 26
17552: PUSH
17553: LD_STRING 
17555: ST_TO_ADDR
// hc_gallery =  ;
17556: LD_ADDR_OWVAR 33
17560: PUSH
17561: LD_STRING 
17563: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
17564: LD_INT 0
17566: PPUSH
17567: LD_INT 1
17569: PPUSH
17570: LD_VAR 0 8
17574: PPUSH
17575: CALL_OW 380
// un = CreateHuman ;
17579: LD_ADDR_VAR 0 15
17583: PUSH
17584: CALL_OW 44
17588: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17589: LD_VAR 0 15
17593: PPUSH
17594: LD_VAR 0 9
17598: PPUSH
17599: LD_INT 0
17601: PPUSH
17602: CALL_OW 49
// end ;
17606: GO 17525
17608: POP
17609: POP
// for i = 1 to sniperCount do
17610: LD_ADDR_VAR 0 13
17614: PUSH
17615: DOUBLE
17616: LD_INT 1
17618: DEC
17619: ST_TO_ADDR
17620: LD_VAR 0 4
17624: PUSH
17625: FOR_TO
17626: IFFALSE 17708
// begin uc_side = side ;
17628: LD_ADDR_OWVAR 20
17632: PUSH
17633: LD_VAR 0 1
17637: ST_TO_ADDR
// uc_nation = nation ;
17638: LD_ADDR_OWVAR 21
17642: PUSH
17643: LD_VAR 0 2
17647: ST_TO_ADDR
// hc_name =  ;
17648: LD_ADDR_OWVAR 26
17652: PUSH
17653: LD_STRING 
17655: ST_TO_ADDR
// hc_gallery =  ;
17656: LD_ADDR_OWVAR 33
17660: PUSH
17661: LD_STRING 
17663: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
17664: LD_INT 0
17666: PPUSH
17667: LD_INT 5
17669: PPUSH
17670: LD_VAR 0 8
17674: PPUSH
17675: CALL_OW 380
// un = CreateHuman ;
17679: LD_ADDR_VAR 0 15
17683: PUSH
17684: CALL_OW 44
17688: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17689: LD_VAR 0 15
17693: PPUSH
17694: LD_VAR 0 9
17698: PPUSH
17699: LD_INT 0
17701: PPUSH
17702: CALL_OW 49
// end ;
17706: GO 17625
17708: POP
17709: POP
// for i = 1 to bazookCount do
17710: LD_ADDR_VAR 0 13
17714: PUSH
17715: DOUBLE
17716: LD_INT 1
17718: DEC
17719: ST_TO_ADDR
17720: LD_VAR 0 5
17724: PUSH
17725: FOR_TO
17726: IFFALSE 17808
// begin uc_side = side ;
17728: LD_ADDR_OWVAR 20
17732: PUSH
17733: LD_VAR 0 1
17737: ST_TO_ADDR
// uc_nation = nation ;
17738: LD_ADDR_OWVAR 21
17742: PUSH
17743: LD_VAR 0 2
17747: ST_TO_ADDR
// hc_name =  ;
17748: LD_ADDR_OWVAR 26
17752: PUSH
17753: LD_STRING 
17755: ST_TO_ADDR
// hc_gallery =  ;
17756: LD_ADDR_OWVAR 33
17760: PUSH
17761: LD_STRING 
17763: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
17764: LD_INT 0
17766: PPUSH
17767: LD_INT 9
17769: PPUSH
17770: LD_VAR 0 8
17774: PPUSH
17775: CALL_OW 380
// un = CreateHuman ;
17779: LD_ADDR_VAR 0 15
17783: PUSH
17784: CALL_OW 44
17788: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17789: LD_VAR 0 15
17793: PPUSH
17794: LD_VAR 0 9
17798: PPUSH
17799: LD_INT 0
17801: PPUSH
17802: CALL_OW 49
// end ;
17806: GO 17725
17808: POP
17809: POP
// for i = 1 to mortalCount do
17810: LD_ADDR_VAR 0 13
17814: PUSH
17815: DOUBLE
17816: LD_INT 1
17818: DEC
17819: ST_TO_ADDR
17820: LD_VAR 0 6
17824: PUSH
17825: FOR_TO
17826: IFFALSE 17908
// begin uc_side = side ;
17828: LD_ADDR_OWVAR 20
17832: PUSH
17833: LD_VAR 0 1
17837: ST_TO_ADDR
// uc_nation = nation ;
17838: LD_ADDR_OWVAR 21
17842: PUSH
17843: LD_VAR 0 2
17847: ST_TO_ADDR
// hc_name =  ;
17848: LD_ADDR_OWVAR 26
17852: PUSH
17853: LD_STRING 
17855: ST_TO_ADDR
// hc_gallery =  ;
17856: LD_ADDR_OWVAR 33
17860: PUSH
17861: LD_STRING 
17863: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
17864: LD_INT 0
17866: PPUSH
17867: LD_INT 8
17869: PPUSH
17870: LD_VAR 0 8
17874: PPUSH
17875: CALL_OW 380
// un = CreateHuman ;
17879: LD_ADDR_VAR 0 15
17883: PUSH
17884: CALL_OW 44
17888: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17889: LD_VAR 0 15
17893: PPUSH
17894: LD_VAR 0 9
17898: PPUSH
17899: LD_INT 0
17901: PPUSH
17902: CALL_OW 49
// end ;
17906: GO 17825
17908: POP
17909: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
17910: LD_ADDR_VAR 0 18
17914: PUSH
17915: LD_INT 22
17917: PUSH
17918: LD_VAR 0 1
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 2
17929: PUSH
17930: LD_INT 25
17932: PUSH
17933: LD_INT 1
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 25
17942: PUSH
17943: LD_INT 5
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 25
17952: PUSH
17953: LD_INT 8
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 25
17962: PUSH
17963: LD_INT 9
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PPUSH
17981: CALL_OW 69
17985: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
17986: LD_ADDR_VAR 0 17
17990: PUSH
17991: LD_INT 22
17993: PUSH
17994: LD_VAR 0 1
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 25
18005: PUSH
18006: LD_INT 4
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PPUSH
18017: CALL_OW 69
18021: ST_TO_ADDR
// for i in medic_list do
18022: LD_ADDR_VAR 0 13
18026: PUSH
18027: LD_VAR 0 17
18031: PUSH
18032: FOR_IN
18033: IFFALSE 18051
// ComMoveToArea ( i , healArea ) ;
18035: LD_VAR 0 13
18039: PPUSH
18040: LD_VAR 0 10
18044: PPUSH
18045: CALL_OW 113
18049: GO 18032
18051: POP
18052: POP
// repeat wait ( 0 0$1 ) ;
18053: LD_INT 35
18055: PPUSH
18056: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
18060: LD_ADDR_VAR 0 16
18064: PUSH
18065: LD_INT 22
18067: PUSH
18068: LD_VAR 0 1
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: PUSH
18077: LD_INT 1
18079: PUSH
18080: LD_INT 3
18082: PUSH
18083: LD_INT 24
18085: PUSH
18086: LD_INT 550
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: LD_INT 24
18099: PUSH
18100: LD_INT 250
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: LIST
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PPUSH
18116: CALL_OW 69
18120: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
18121: LD_ADDR_VAR 0 18
18125: PUSH
18126: LD_INT 22
18128: PUSH
18129: LD_VAR 0 1
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: LD_INT 2
18140: PUSH
18141: LD_INT 25
18143: PUSH
18144: LD_INT 1
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: LD_INT 25
18153: PUSH
18154: LD_INT 5
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PUSH
18161: LD_INT 25
18163: PUSH
18164: LD_INT 8
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 25
18173: PUSH
18174: LD_INT 9
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 24
18190: PUSH
18191: LD_INT 1000
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: LIST
18202: PPUSH
18203: CALL_OW 69
18207: ST_TO_ADDR
// if medicCount > 0 then
18208: LD_VAR 0 7
18212: PUSH
18213: LD_INT 0
18215: GREATER
18216: IFFALSE 18290
// begin if damageUnit_list > 0 then
18218: LD_VAR 0 16
18222: PUSH
18223: LD_INT 0
18225: GREATER
18226: IFFALSE 18290
// begin for i in damageUnit_list do
18228: LD_ADDR_VAR 0 13
18232: PUSH
18233: LD_VAR 0 16
18237: PUSH
18238: FOR_IN
18239: IFFALSE 18288
// begin ComMoveToArea ( i , healArea ) ;
18241: LD_VAR 0 13
18245: PPUSH
18246: LD_VAR 0 10
18250: PPUSH
18251: CALL_OW 113
// for j in medic_list do
18255: LD_ADDR_VAR 0 14
18259: PUSH
18260: LD_VAR 0 17
18264: PUSH
18265: FOR_IN
18266: IFFALSE 18284
// AddComHeal ( j , i ) ;
18268: LD_VAR 0 14
18272: PPUSH
18273: LD_VAR 0 13
18277: PPUSH
18278: CALL_OW 188
18282: GO 18265
18284: POP
18285: POP
// end ;
18286: GO 18238
18288: POP
18289: POP
// end ; end ; for i in soldiersOK_list do
18290: LD_ADDR_VAR 0 13
18294: PUSH
18295: LD_VAR 0 18
18299: PUSH
18300: FOR_IN
18301: IFFALSE 18477
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18303: LD_ADDR_VAR 0 21
18307: PUSH
18308: LD_INT 22
18310: PUSH
18311: LD_VAR 0 11
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PPUSH
18320: CALL_OW 69
18324: PPUSH
18325: LD_VAR 0 13
18329: PPUSH
18330: CALL_OW 74
18334: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18335: LD_ADDR_VAR 0 22
18339: PUSH
18340: LD_INT 22
18342: PUSH
18343: LD_VAR 0 11
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PUSH
18352: LD_INT 2
18354: PUSH
18355: LD_INT 59
18357: PUSH
18358: EMPTY
18359: LIST
18360: PUSH
18361: LD_INT 21
18363: PUSH
18364: LD_INT 1
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: LD_INT 21
18373: PUSH
18374: LD_INT 2
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: EMPTY
18392: LIST
18393: PPUSH
18394: CALL_OW 69
18398: PPUSH
18399: LD_VAR 0 13
18403: PPUSH
18404: CALL_OW 74
18408: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18409: LD_VAR 0 13
18413: PPUSH
18414: LD_VAR 0 21
18418: PPUSH
18419: CALL_OW 296
18423: PUSH
18424: LD_INT 8
18426: PLUS
18427: PUSH
18428: LD_VAR 0 13
18432: PPUSH
18433: LD_VAR 0 22
18437: PPUSH
18438: CALL_OW 296
18442: LESS
18443: IFFALSE 18461
// begin ComAttackUnit ( i , target1 ) ;
18445: LD_VAR 0 13
18449: PPUSH
18450: LD_VAR 0 21
18454: PPUSH
18455: CALL_OW 115
// end else
18459: GO 18475
// begin ComAttackUnit ( i , target2 ) ;
18461: LD_VAR 0 13
18465: PPUSH
18466: LD_VAR 0 22
18470: PPUSH
18471: CALL_OW 115
// end ; end ;
18475: GO 18300
18477: POP
18478: POP
// for i in soldiersOK_list do
18479: LD_ADDR_VAR 0 13
18483: PUSH
18484: LD_VAR 0 18
18488: PUSH
18489: FOR_IN
18490: IFFALSE 18666
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18492: LD_ADDR_VAR 0 21
18496: PUSH
18497: LD_INT 22
18499: PUSH
18500: LD_VAR 0 11
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PPUSH
18509: CALL_OW 69
18513: PPUSH
18514: LD_VAR 0 13
18518: PPUSH
18519: CALL_OW 74
18523: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18524: LD_ADDR_VAR 0 22
18528: PUSH
18529: LD_INT 22
18531: PUSH
18532: LD_VAR 0 11
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 2
18543: PUSH
18544: LD_INT 59
18546: PUSH
18547: EMPTY
18548: LIST
18549: PUSH
18550: LD_INT 21
18552: PUSH
18553: LD_INT 1
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 21
18562: PUSH
18563: LD_INT 2
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: EMPTY
18581: LIST
18582: PPUSH
18583: CALL_OW 69
18587: PPUSH
18588: LD_VAR 0 13
18592: PPUSH
18593: CALL_OW 74
18597: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18598: LD_VAR 0 13
18602: PPUSH
18603: LD_VAR 0 21
18607: PPUSH
18608: CALL_OW 296
18612: PUSH
18613: LD_INT 8
18615: PLUS
18616: PUSH
18617: LD_VAR 0 13
18621: PPUSH
18622: LD_VAR 0 22
18626: PPUSH
18627: CALL_OW 296
18631: LESS
18632: IFFALSE 18650
// begin ComAttackUnit ( i , target1 ) ;
18634: LD_VAR 0 13
18638: PPUSH
18639: LD_VAR 0 21
18643: PPUSH
18644: CALL_OW 115
// end else
18648: GO 18664
// begin ComAttackUnit ( i , target2 ) ;
18650: LD_VAR 0 13
18654: PPUSH
18655: LD_VAR 0 22
18659: PPUSH
18660: CALL_OW 115
// end ; end ;
18664: GO 18489
18666: POP
18667: POP
// until soldiersOK_list = [ ] ;
18668: LD_VAR 0 18
18672: PUSH
18673: EMPTY
18674: EQUAL
18675: IFFALSE 18053
// end ;
18677: LD_VAR 0 12
18681: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
18682: LD_INT 0
18684: PPUSH
18685: PPUSH
18686: PPUSH
18687: PPUSH
18688: PPUSH
18689: PPUSH
18690: PPUSH
// repeat wait ( 0 0$1 ) ;
18691: LD_INT 35
18693: PPUSH
18694: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
18698: LD_ADDR_VAR 0 7
18702: PUSH
18703: LD_INT 22
18705: PUSH
18706: LD_INT 2
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: LD_INT 25
18715: PUSH
18716: LD_INT 4
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: LD_INT 3
18725: PUSH
18726: LD_INT 60
18728: PUSH
18729: EMPTY
18730: LIST
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: LIST
18740: PPUSH
18741: CALL_OW 69
18745: ST_TO_ADDR
// if not tmp then
18746: LD_VAR 0 7
18750: NOT
18751: IFFALSE 18755
// continue ;
18753: GO 18691
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18755: LD_ADDR_VAR 0 3
18759: PUSH
18760: LD_INT 5
18762: PPUSH
18763: LD_INT 22
18765: PUSH
18766: LD_INT 0
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 25
18775: PUSH
18776: LD_INT 12
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PPUSH
18787: CALL_OW 70
18791: PUSH
18792: FOR_IN
18793: IFFALSE 18826
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
18795: LD_VAR 0 7
18799: PPUSH
18800: LD_VAR 0 3
18804: PPUSH
18805: CALL_OW 250
18809: PPUSH
18810: LD_VAR 0 3
18814: PPUSH
18815: CALL_OW 251
18819: PPUSH
18820: CALL_OW 131
18824: GO 18792
18826: POP
18827: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
18828: LD_INT 22
18830: PUSH
18831: LD_INT 2
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 25
18840: PUSH
18841: LD_INT 4
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PPUSH
18852: CALL_OW 69
18856: PUSH
18857: LD_INT 0
18859: EQUAL
18860: PUSH
18861: LD_INT 5
18863: PPUSH
18864: LD_INT 22
18866: PUSH
18867: LD_INT 0
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 25
18876: PUSH
18877: LD_INT 12
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PPUSH
18888: CALL_OW 70
18892: PUSH
18893: LD_INT 2
18895: LESS
18896: OR
18897: PUSH
18898: LD_OWVAR 1
18902: PUSH
18903: LD_INT 7000
18905: GREATEREQUAL
18906: OR
18907: IFFALSE 18691
// repeat wait ( 0 0$1 ) ;
18909: LD_INT 35
18911: PPUSH
18912: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
18916: LD_ADDR_VAR 0 5
18920: PUSH
18921: LD_INT 22
18923: PUSH
18924: LD_INT 2
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 30
18933: PUSH
18934: LD_INT 5
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PPUSH
18945: CALL_OW 69
18949: ST_TO_ADDR
// until arm ;
18950: LD_VAR 0 5
18954: IFFALSE 18909
// wait ( 0 0$25 ) ;
18956: LD_INT 875
18958: PPUSH
18959: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18963: LD_ADDR_VAR 0 6
18967: PUSH
18968: LD_INT 22
18970: PUSH
18971: LD_INT 2
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 2
18980: PUSH
18981: LD_INT 30
18983: PUSH
18984: LD_INT 0
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 30
18993: PUSH
18994: LD_INT 1
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: LIST
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PPUSH
19010: CALL_OW 69
19014: ST_TO_ADDR
// j := 0 ;
19015: LD_ADDR_VAR 0 3
19019: PUSH
19020: LD_INT 0
19022: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
19023: LD_ADDR_VAR 0 2
19027: PUSH
19028: LD_INT 22
19030: PUSH
19031: LD_INT 2
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 25
19040: PUSH
19041: LD_INT 12
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PPUSH
19052: CALL_OW 69
19056: PUSH
19057: FOR_IN
19058: IFFALSE 19145
// begin ComMoveXY ( i , 63 , 16 ) ;
19060: LD_VAR 0 2
19064: PPUSH
19065: LD_INT 63
19067: PPUSH
19068: LD_INT 16
19070: PPUSH
19071: CALL_OW 111
// j := j + 1 ;
19075: LD_ADDR_VAR 0 3
19079: PUSH
19080: LD_VAR 0 3
19084: PUSH
19085: LD_INT 1
19087: PLUS
19088: ST_TO_ADDR
// if j < 5 then
19089: LD_VAR 0 3
19093: PUSH
19094: LD_INT 5
19096: LESS
19097: IFFALSE 19115
// b := arm [ 1 ] else
19099: LD_ADDR_VAR 0 4
19103: PUSH
19104: LD_VAR 0 5
19108: PUSH
19109: LD_INT 1
19111: ARRAY
19112: ST_TO_ADDR
19113: GO 19129
// b := dep [ 1 ] ;
19115: LD_ADDR_VAR 0 4
19119: PUSH
19120: LD_VAR 0 6
19124: PUSH
19125: LD_INT 1
19127: ARRAY
19128: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
19129: LD_VAR 0 2
19133: PPUSH
19134: LD_VAR 0 4
19138: PPUSH
19139: CALL_OW 180
// end ;
19143: GO 19057
19145: POP
19146: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
19147: LD_ADDR_VAR 0 2
19151: PUSH
19152: LD_INT 22
19154: PUSH
19155: LD_INT 2
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 25
19164: PUSH
19165: LD_INT 4
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PPUSH
19176: CALL_OW 69
19180: PUSH
19181: FOR_IN
19182: IFFALSE 19228
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
19184: LD_VAR 0 2
19188: PPUSH
19189: LD_INT 22
19191: PUSH
19192: LD_INT 2
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 30
19201: PUSH
19202: LD_INT 8
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PPUSH
19213: CALL_OW 69
19217: PUSH
19218: LD_INT 1
19220: ARRAY
19221: PPUSH
19222: CALL_OW 120
19226: GO 19181
19228: POP
19229: POP
// end ;
19230: LD_VAR 0 1
19234: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
19235: LD_INT 0
19237: PPUSH
19238: PPUSH
19239: PPUSH
19240: PPUSH
19241: PPUSH
19242: PPUSH
19243: PPUSH
19244: PPUSH
19245: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
19246: LD_INT 22
19248: PUSH
19249: LD_VAR 0 1
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 21
19260: PUSH
19261: LD_INT 2
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PPUSH
19272: CALL_OW 69
19276: PUSH
19277: LD_VAR 0 3
19281: LESSEQUAL
19282: IFFALSE 19426
// for i = 1 to vehCount do
19284: LD_ADDR_VAR 0 10
19288: PUSH
19289: DOUBLE
19290: LD_INT 1
19292: DEC
19293: ST_TO_ADDR
19294: LD_VAR 0 3
19298: PUSH
19299: FOR_TO
19300: IFFALSE 19424
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
19302: LD_ADDR_VAR 0 12
19306: PUSH
19307: LD_VAR 0 5
19311: PUSH
19312: LD_INT 1
19314: PPUSH
19315: LD_VAR 0 5
19319: PPUSH
19320: CALL_OW 12
19324: ARRAY
19325: ST_TO_ADDR
// if randWeapon = 46 then
19326: LD_VAR 0 12
19330: PUSH
19331: LD_INT 46
19333: EQUAL
19334: IFFALSE 19379
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
19336: LD_VAR 0 2
19340: PPUSH
19341: LD_INT 24
19343: PPUSH
19344: LD_VAR 0 6
19348: PPUSH
19349: LD_VAR 0 7
19353: PUSH
19354: LD_INT 1
19356: PPUSH
19357: LD_VAR 0 7
19361: PPUSH
19362: CALL_OW 12
19366: ARRAY
19367: PPUSH
19368: LD_VAR 0 12
19372: PPUSH
19373: CALL_OW 185
19377: GO 19422
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
19379: LD_VAR 0 2
19383: PPUSH
19384: LD_VAR 0 8
19388: PPUSH
19389: LD_VAR 0 6
19393: PPUSH
19394: LD_VAR 0 7
19398: PUSH
19399: LD_INT 1
19401: PPUSH
19402: LD_VAR 0 7
19406: PPUSH
19407: CALL_OW 12
19411: ARRAY
19412: PPUSH
19413: LD_VAR 0 12
19417: PPUSH
19418: CALL_OW 185
// end ;
19422: GO 19299
19424: POP
19425: POP
// repeat wait ( 0 0$1 ) ;
19426: LD_INT 35
19428: PPUSH
19429: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
19433: LD_INT 22
19435: PUSH
19436: LD_VAR 0 1
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 21
19447: PUSH
19448: LD_INT 2
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 24
19457: PUSH
19458: LD_INT 250
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: LIST
19469: PPUSH
19470: CALL_OW 69
19474: PUSH
19475: LD_VAR 0 3
19479: GREATEREQUAL
19480: IFFALSE 19426
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
19482: LD_INT 22
19484: PUSH
19485: LD_VAR 0 1
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 21
19496: PUSH
19497: LD_INT 2
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 24
19506: PUSH
19507: LD_INT 250
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: LIST
19518: PPUSH
19519: CALL_OW 69
19523: PUSH
19524: LD_VAR 0 3
19528: GREATEREQUAL
19529: IFFALSE 19872
// begin repeat begin wait ( 0 0$1 ) ;
19531: LD_INT 35
19533: PPUSH
19534: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
19538: LD_INT 22
19540: PUSH
19541: LD_VAR 0 1
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: LD_INT 21
19552: PUSH
19553: LD_INT 2
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 24
19562: PUSH
19563: LD_INT 651
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: LIST
19574: PPUSH
19575: CALL_OW 69
19579: PUSH
19580: LD_INT 0
19582: GREATER
19583: IFFALSE 19811
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
19585: LD_ADDR_VAR 0 10
19589: PUSH
19590: LD_INT 22
19592: PUSH
19593: LD_VAR 0 1
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 21
19604: PUSH
19605: LD_INT 2
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 24
19614: PUSH
19615: LD_INT 651
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: LIST
19626: PPUSH
19627: CALL_OW 69
19631: PUSH
19632: FOR_IN
19633: IFFALSE 19809
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19635: LD_ADDR_VAR 0 16
19639: PUSH
19640: LD_INT 22
19642: PUSH
19643: LD_VAR 0 4
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PPUSH
19652: CALL_OW 69
19656: PPUSH
19657: LD_VAR 0 10
19661: PPUSH
19662: CALL_OW 74
19666: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19667: LD_ADDR_VAR 0 17
19671: PUSH
19672: LD_INT 22
19674: PUSH
19675: LD_VAR 0 4
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 2
19686: PUSH
19687: LD_INT 59
19689: PUSH
19690: EMPTY
19691: LIST
19692: PUSH
19693: LD_INT 21
19695: PUSH
19696: LD_INT 1
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 21
19705: PUSH
19706: LD_INT 2
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: EMPTY
19724: LIST
19725: PPUSH
19726: CALL_OW 69
19730: PPUSH
19731: LD_VAR 0 10
19735: PPUSH
19736: CALL_OW 74
19740: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19741: LD_VAR 0 10
19745: PPUSH
19746: LD_VAR 0 16
19750: PPUSH
19751: CALL_OW 296
19755: PUSH
19756: LD_INT 8
19758: PLUS
19759: PUSH
19760: LD_VAR 0 10
19764: PPUSH
19765: LD_VAR 0 17
19769: PPUSH
19770: CALL_OW 296
19774: LESS
19775: IFFALSE 19793
// begin ComAttackUnit ( i , target1 ) ;
19777: LD_VAR 0 10
19781: PPUSH
19782: LD_VAR 0 16
19786: PPUSH
19787: CALL_OW 115
// end else
19791: GO 19807
// begin ComAttackUnit ( i , target2 ) ;
19793: LD_VAR 0 10
19797: PPUSH
19798: LD_VAR 0 17
19802: PPUSH
19803: CALL_OW 115
// end ; end ;
19807: GO 19632
19809: POP
19810: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
19811: LD_INT 22
19813: PUSH
19814: LD_VAR 0 1
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 21
19825: PUSH
19826: LD_INT 2
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PPUSH
19837: CALL_OW 69
19841: PUSH
19842: LD_INT 0
19844: EQUAL
19845: PUSH
19846: LD_INT 22
19848: PUSH
19849: LD_VAR 0 4
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: EMPTY
19859: LIST
19860: PPUSH
19861: CALL_OW 69
19865: PUSH
19866: LD_INT 0
19868: EQUAL
19869: OR
19870: IFFALSE 19531
// end ; end ;
19872: LD_VAR 0 9
19876: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
19877: LD_INT 0
19879: PPUSH
19880: PPUSH
19881: PPUSH
19882: PPUSH
// r := 100 ;
19883: LD_ADDR_VAR 0 5
19887: PUSH
19888: LD_INT 100
19890: ST_TO_ADDR
// x := 0 ;
19891: LD_ADDR_VAR 0 6
19895: PUSH
19896: LD_INT 0
19898: ST_TO_ADDR
// while ( x < n ) do
19899: LD_VAR 0 6
19903: PUSH
19904: LD_VAR 0 2
19908: LESS
19909: IFFALSE 20196
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
19911: LD_ADDR_VAR 0 4
19915: PUSH
19916: DOUBLE
19917: LD_INT 1
19919: DEC
19920: ST_TO_ADDR
19921: LD_VAR 0 1
19925: PPUSH
19926: LD_INT 0
19928: PPUSH
19929: CALL_OW 517
19933: PUSH
19934: LD_INT 1
19936: ARRAY
19937: PUSH
19938: FOR_TO
19939: IFFALSE 20192
// begin if r > 50 then
19941: LD_VAR 0 5
19945: PUSH
19946: LD_INT 50
19948: GREATER
19949: IFFALSE 20168
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
19951: LD_VAR 0 1
19955: PPUSH
19956: LD_INT 0
19958: PPUSH
19959: CALL_OW 517
19963: PUSH
19964: LD_INT 1
19966: ARRAY
19967: PUSH
19968: LD_VAR 0 4
19972: ARRAY
19973: PPUSH
19974: LD_VAR 0 1
19978: PPUSH
19979: LD_INT 0
19981: PPUSH
19982: CALL_OW 517
19986: PUSH
19987: LD_INT 2
19989: ARRAY
19990: PUSH
19991: LD_VAR 0 4
19995: ARRAY
19996: PPUSH
19997: CALL_OW 458
20001: NOT
20002: IFFALSE 20152
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
20004: LD_VAR 0 1
20008: PPUSH
20009: LD_INT 0
20011: PPUSH
20012: CALL_OW 517
20016: PUSH
20017: LD_INT 1
20019: ARRAY
20020: PUSH
20021: LD_VAR 0 4
20025: ARRAY
20026: PPUSH
20027: LD_VAR 0 1
20031: PPUSH
20032: LD_INT 0
20034: PPUSH
20035: CALL_OW 517
20039: PUSH
20040: LD_INT 2
20042: ARRAY
20043: PUSH
20044: LD_VAR 0 4
20048: ARRAY
20049: PPUSH
20050: LD_INT 5
20052: PPUSH
20053: LD_INT 0
20055: PPUSH
20056: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
20060: LD_ADDR_EXP 50
20064: PUSH
20065: LD_EXP 50
20069: PPUSH
20070: LD_INT 1
20072: PPUSH
20073: LD_VAR 0 1
20077: PPUSH
20078: LD_INT 0
20080: PPUSH
20081: CALL_OW 517
20085: PUSH
20086: LD_INT 1
20088: ARRAY
20089: PUSH
20090: LD_VAR 0 4
20094: ARRAY
20095: PUSH
20096: LD_VAR 0 1
20100: PPUSH
20101: LD_INT 0
20103: PPUSH
20104: CALL_OW 517
20108: PUSH
20109: LD_INT 2
20111: ARRAY
20112: PUSH
20113: LD_VAR 0 4
20117: ARRAY
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PPUSH
20123: CALL_OW 2
20127: ST_TO_ADDR
// r := 0 ;
20128: LD_ADDR_VAR 0 5
20132: PUSH
20133: LD_INT 0
20135: ST_TO_ADDR
// x := x + 1 ;
20136: LD_ADDR_VAR 0 6
20140: PUSH
20141: LD_VAR 0 6
20145: PUSH
20146: LD_INT 1
20148: PLUS
20149: ST_TO_ADDR
// end else
20150: GO 20166
// r := r + 35 ;
20152: LD_ADDR_VAR 0 5
20156: PUSH
20157: LD_VAR 0 5
20161: PUSH
20162: LD_INT 35
20164: PLUS
20165: ST_TO_ADDR
// end else
20166: GO 20190
// r := r + rand ( 10 , 25 ) ;
20168: LD_ADDR_VAR 0 5
20172: PUSH
20173: LD_VAR 0 5
20177: PUSH
20178: LD_INT 10
20180: PPUSH
20181: LD_INT 25
20183: PPUSH
20184: CALL_OW 12
20188: PLUS
20189: ST_TO_ADDR
// end ;
20190: GO 19938
20192: POP
20193: POP
20194: GO 19899
// end ; end_of_file
20196: LD_VAR 0 3
20200: RET
// every 0 0$1 trigger russianAI = 1 do
20201: LD_EXP 39
20205: PUSH
20206: LD_INT 1
20208: EQUAL
20209: IFFALSE 20428
20211: GO 20213
20213: DISABLE
// begin enable ;
20214: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
20215: LD_INT 3
20217: PPUSH
20218: LD_EXP 30
20222: PPUSH
20223: CALL 14679 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
20227: LD_INT 3
20229: PPUSH
20230: LD_EXP 42
20234: PPUSH
20235: CALL 15039 0 2
// if ruPossition = 1 then
20239: LD_EXP 41
20243: PUSH
20244: LD_INT 1
20246: EQUAL
20247: IFFALSE 20302
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20249: LD_INT 3
20251: PPUSH
20252: LD_INT 13
20254: PPUSH
20255: LD_INT 10
20257: PPUSH
20258: LD_INT 22
20260: PUSH
20261: LD_INT 3
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 21
20270: PUSH
20271: LD_INT 3
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 30
20280: PUSH
20281: LD_INT 8
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: LIST
20292: PPUSH
20293: CALL_OW 69
20297: PPUSH
20298: CALL 15245 0 4
// if ruPossition = 2 then
20302: LD_EXP 41
20306: PUSH
20307: LD_INT 2
20309: EQUAL
20310: IFFALSE 20365
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20312: LD_INT 3
20314: PPUSH
20315: LD_INT 14
20317: PPUSH
20318: LD_INT 11
20320: PPUSH
20321: LD_INT 22
20323: PUSH
20324: LD_INT 3
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 21
20333: PUSH
20334: LD_INT 3
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: LD_INT 30
20343: PUSH
20344: LD_INT 8
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: LIST
20355: PPUSH
20356: CALL_OW 69
20360: PPUSH
20361: CALL 15245 0 4
// if ruPossition = 3 then
20365: LD_EXP 41
20369: PUSH
20370: LD_INT 3
20372: EQUAL
20373: IFFALSE 20428
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20375: LD_INT 3
20377: PPUSH
20378: LD_INT 15
20380: PPUSH
20381: LD_INT 12
20383: PPUSH
20384: LD_INT 22
20386: PUSH
20387: LD_INT 3
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: LD_INT 21
20396: PUSH
20397: LD_INT 3
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PUSH
20404: LD_INT 30
20406: PUSH
20407: LD_INT 8
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: LIST
20418: PPUSH
20419: CALL_OW 69
20423: PPUSH
20424: CALL 15245 0 4
// end ;
20428: END
// every 0 0$1 do
20429: GO 20431
20431: DISABLE
// begin enable ;
20432: ENABLE
// if ruPossition = 1 then
20433: LD_EXP 41
20437: PUSH
20438: LD_INT 1
20440: EQUAL
20441: IFFALSE 20453
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
20443: LD_INT 3
20445: PPUSH
20446: LD_INT 10
20448: PPUSH
20449: CALL 14316 0 2
// if ruPossition = 2 then
20453: LD_EXP 41
20457: PUSH
20458: LD_INT 2
20460: EQUAL
20461: IFFALSE 20473
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
20463: LD_INT 3
20465: PPUSH
20466: LD_INT 11
20468: PPUSH
20469: CALL 14316 0 2
// if ruPossition = 3 then
20473: LD_EXP 41
20477: PUSH
20478: LD_INT 3
20480: EQUAL
20481: IFFALSE 20493
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
20483: LD_INT 3
20485: PPUSH
20486: LD_INT 12
20488: PPUSH
20489: CALL 14316 0 2
// IntBazooka ( 3 , 1 ) ;
20493: LD_INT 3
20495: PPUSH
20496: LD_INT 1
20498: PPUSH
20499: CALL 13115 0 2
// IntBazooka ( 6 , 1 ) ;
20503: LD_INT 6
20505: PPUSH
20506: LD_INT 1
20508: PPUSH
20509: CALL 13115 0 2
// end ;
20513: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
20514: LD_EXP 39
20518: PUSH
20519: LD_INT 1
20521: EQUAL
20522: PUSH
20523: LD_EXP 35
20527: PPUSH
20528: CALL_OW 302
20532: AND
20533: PUSH
20534: LD_EXP 35
20538: PPUSH
20539: CALL_OW 255
20543: PUSH
20544: LD_INT 3
20546: EQUAL
20547: AND
20548: PUSH
20549: LD_INT 22
20551: PUSH
20552: LD_INT 3
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: LD_INT 21
20561: PUSH
20562: LD_INT 2
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 33
20571: PUSH
20572: LD_INT 3
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: LIST
20583: PPUSH
20584: CALL_OW 69
20588: PUSH
20589: LD_INT 0
20591: EQUAL
20592: AND
20593: IFFALSE 20801
20595: GO 20597
20597: DISABLE
// begin enable ;
20598: ENABLE
// if Difficulty = 1 then
20599: LD_OWVAR 67
20603: PUSH
20604: LD_INT 1
20606: EQUAL
20607: IFFALSE 20669
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
20609: LD_INT 3
20611: PPUSH
20612: LD_EXP 35
20616: PPUSH
20617: LD_INT 5
20619: PPUSH
20620: LD_INT 8
20622: PPUSH
20623: CALL_OW 12
20627: PPUSH
20628: LD_INT 1
20630: PPUSH
20631: LD_INT 43
20633: PUSH
20634: LD_INT 44
20636: PUSH
20637: LD_INT 45
20639: PUSH
20640: LD_INT 46
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: PPUSH
20649: LD_INT 1
20651: PPUSH
20652: LD_INT 3
20654: PUSH
20655: LD_INT 3
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PPUSH
20662: LD_INT 22
20664: PPUSH
20665: CALL 19235 0 8
// if Difficulty = 2 then
20669: LD_OWVAR 67
20673: PUSH
20674: LD_INT 2
20676: EQUAL
20677: IFFALSE 20735
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
20679: LD_INT 3
20681: PPUSH
20682: LD_EXP 35
20686: PPUSH
20687: LD_INT 6
20689: PPUSH
20690: LD_INT 8
20692: PPUSH
20693: CALL_OW 12
20697: PPUSH
20698: LD_INT 1
20700: PPUSH
20701: LD_INT 44
20703: PUSH
20704: LD_INT 45
20706: PUSH
20707: LD_INT 46
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: LIST
20714: PPUSH
20715: LD_INT 1
20717: PPUSH
20718: LD_INT 3
20720: PUSH
20721: LD_INT 3
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PPUSH
20728: LD_INT 22
20730: PPUSH
20731: CALL 19235 0 8
// if Difficulty = 3 then
20735: LD_OWVAR 67
20739: PUSH
20740: LD_INT 3
20742: EQUAL
20743: IFFALSE 20801
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
20745: LD_INT 3
20747: PPUSH
20748: LD_EXP 35
20752: PPUSH
20753: LD_INT 7
20755: PPUSH
20756: LD_INT 8
20758: PPUSH
20759: CALL_OW 12
20763: PPUSH
20764: LD_INT 1
20766: PPUSH
20767: LD_INT 44
20769: PUSH
20770: LD_INT 45
20772: PUSH
20773: LD_INT 46
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: LIST
20780: PPUSH
20781: LD_INT 1
20783: PPUSH
20784: LD_INT 3
20786: PUSH
20787: LD_INT 3
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PPUSH
20794: LD_INT 22
20796: PPUSH
20797: CALL 19235 0 8
// end ;
20801: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
20802: LD_EXP 50
20806: PUSH
20807: LD_EXP 49
20811: AND
20812: IFFALSE 20933
20814: GO 20816
20816: DISABLE
20817: LD_INT 0
20819: PPUSH
// begin enable ;
20820: ENABLE
// for i in arabianMines do
20821: LD_ADDR_VAR 0 1
20825: PUSH
20826: LD_EXP 50
20830: PUSH
20831: FOR_IN
20832: IFFALSE 20931
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
20834: LD_INT 22
20836: PUSH
20837: LD_INT 1
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PUSH
20844: LD_INT 92
20846: PUSH
20847: LD_VAR 0 1
20851: PUSH
20852: LD_INT 1
20854: ARRAY
20855: PUSH
20856: LD_VAR 0 1
20860: PUSH
20861: LD_INT 2
20863: ARRAY
20864: PUSH
20865: LD_INT 3
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PPUSH
20878: CALL_OW 69
20882: IFFALSE 20929
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
20884: LD_VAR 0 1
20888: PUSH
20889: LD_INT 1
20891: ARRAY
20892: PPUSH
20893: LD_VAR 0 1
20897: PUSH
20898: LD_INT 2
20900: ARRAY
20901: PPUSH
20902: LD_INT 5
20904: PPUSH
20905: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
20909: LD_ADDR_EXP 50
20913: PUSH
20914: LD_EXP 50
20918: PPUSH
20919: LD_VAR 0 1
20923: PPUSH
20924: CALL_OW 3
20928: ST_TO_ADDR
// end ; end ;
20929: GO 20831
20931: POP
20932: POP
// end ; end_of_file
20933: PPOPN 1
20935: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
20936: LD_VAR 0 1
20940: PPUSH
20941: CALL_OW 255
20945: PUSH
20946: LD_INT 4
20948: EQUAL
20949: IFFALSE 20963
// SetBName ( building , epsilon ) ;
20951: LD_VAR 0 1
20955: PPUSH
20956: LD_STRING epsilon
20958: PPUSH
20959: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
20963: LD_VAR 0 1
20967: PPUSH
20968: CALL_OW 255
20972: PUSH
20973: LD_INT 1
20975: EQUAL
20976: PUSH
20977: LD_VAR 0 1
20981: PPUSH
20982: CALL_OW 266
20986: PUSH
20987: LD_INT 0
20989: EQUAL
20990: AND
20991: IFFALSE 21005
// SetBName ( building , epsilon ) ;
20993: LD_VAR 0 1
20997: PPUSH
20998: LD_STRING epsilon
21000: PPUSH
21001: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
21005: LD_VAR 0 1
21009: PPUSH
21010: CALL_OW 255
21014: PUSH
21015: LD_INT 3
21017: EQUAL
21018: PUSH
21019: LD_VAR 0 1
21023: PPUSH
21024: CALL_OW 266
21028: PUSH
21029: LD_INT 0
21031: EQUAL
21032: AND
21033: IFFALSE 21047
// SetBName ( building , chuikov ) ;
21035: LD_VAR 0 1
21039: PPUSH
21040: LD_STRING chuikov
21042: PPUSH
21043: CALL_OW 500
// if GetSide ( building ) = 2 then
21047: LD_VAR 0 1
21051: PPUSH
21052: CALL_OW 255
21056: PUSH
21057: LD_INT 2
21059: EQUAL
21060: IFFALSE 21116
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
21062: LD_VAR 0 1
21066: PPUSH
21067: CALL_OW 266
21071: PUSH
21072: LD_INT 6
21074: EQUAL
21075: PUSH
21076: LD_VAR 0 1
21080: PPUSH
21081: CALL_OW 266
21085: PUSH
21086: LD_INT 9
21088: EQUAL
21089: OR
21090: IFFALSE 21116
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21092: LD_VAR 0 1
21096: PPUSH
21097: LD_INT 10
21099: PPUSH
21100: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
21104: LD_VAR 0 1
21108: PPUSH
21109: LD_INT 11
21111: PPUSH
21112: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
21116: LD_VAR 0 1
21120: PPUSH
21121: CALL_OW 255
21125: PUSH
21126: LD_INT 3
21128: EQUAL
21129: IFFALSE 21155
// begin if GetBType ( building ) = 2 then
21131: LD_VAR 0 1
21135: PPUSH
21136: CALL_OW 266
21140: PUSH
21141: LD_INT 2
21143: EQUAL
21144: IFFALSE 21155
// AddComUpgrade ( building ) ;
21146: LD_VAR 0 1
21150: PPUSH
21151: CALL_OW 206
// end ; end ;
21155: PPOPN 2
21157: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
21158: LD_INT 0
21160: PPUSH
21161: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
21162: LD_VAR 0 1
21166: PUSH
21167: LD_INT 22
21169: PUSH
21170: LD_INT 3
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 23
21179: PUSH
21180: LD_INT 3
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 21
21189: PUSH
21190: LD_INT 2
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: LIST
21201: PPUSH
21202: CALL_OW 69
21206: IN
21207: PUSH
21208: LD_EXP 58
21212: NOT
21213: AND
21214: IFFALSE 21245
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
21216: LD_ADDR_EXP 58
21220: PUSH
21221: LD_VAR 0 1
21225: PPUSH
21226: CALL_OW 250
21230: PUSH
21231: LD_VAR 0 1
21235: PPUSH
21236: CALL_OW 251
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: ST_TO_ADDR
// end ;
21245: PPOPN 3
21247: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
21248: LD_VAR 0 2
21252: PPUSH
21253: CALL_OW 255
21257: PUSH
21258: LD_INT 3
21260: EQUAL
21261: PUSH
21262: LD_EXP 35
21266: PPUSH
21267: CALL_OW 255
21271: PUSH
21272: LD_INT 3
21274: EQUAL
21275: AND
21276: PUSH
21277: LD_EXP 35
21281: PPUSH
21282: CALL_OW 302
21286: AND
21287: IFFALSE 21303
// ComEnterUnit ( human , ruFab ) ;
21289: LD_VAR 0 2
21293: PPUSH
21294: LD_EXP 35
21298: PPUSH
21299: CALL_OW 120
// end ;
21303: PPOPN 2
21305: END
// on BuildingComplete ( building ) do var i , sol , tmp ;
21306: LD_INT 0
21308: PPUSH
21309: PPUSH
21310: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
21311: LD_VAR 0 1
21315: PPUSH
21316: CALL_OW 255
21320: PUSH
21321: LD_INT 1
21323: EQUAL
21324: PUSH
21325: LD_EXP 61
21329: PUSH
21330: LD_INT 0
21332: EQUAL
21333: AND
21334: IFFALSE 21536
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
21336: LD_VAR 0 1
21340: PPUSH
21341: CALL_OW 266
21345: PUSH
21346: LD_INT 26
21348: EQUAL
21349: PUSH
21350: LD_VAR 0 1
21354: PPUSH
21355: CALL_OW 266
21359: PUSH
21360: LD_INT 27
21362: EQUAL
21363: OR
21364: PUSH
21365: LD_VAR 0 1
21369: PPUSH
21370: CALL_OW 266
21374: PUSH
21375: LD_INT 28
21377: EQUAL
21378: OR
21379: IFFALSE 21536
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
21381: LD_INT 22
21383: PUSH
21384: LD_INT 1
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: LD_INT 2
21393: PUSH
21394: LD_INT 30
21396: PUSH
21397: LD_INT 7
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 30
21406: PUSH
21407: LD_INT 8
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: LIST
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PPUSH
21423: CALL_OW 69
21427: PUSH
21428: LD_INT 0
21430: GREATER
21431: IFFALSE 21536
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21433: LD_ADDR_VAR 0 2
21437: PUSH
21438: LD_INT 22
21440: PUSH
21441: LD_INT 1
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 2
21450: PUSH
21451: LD_INT 30
21453: PUSH
21454: LD_INT 7
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 30
21463: PUSH
21464: LD_INT 8
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: LIST
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PPUSH
21480: CALL_OW 69
21484: PUSH
21485: FOR_IN
21486: IFFALSE 21534
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
21488: LD_VAR 0 2
21492: PPUSH
21493: LD_INT 1
21495: PPUSH
21496: CALL_OW 268
21500: PUSH
21501: LD_INT 11
21503: EQUAL
21504: PUSH
21505: LD_VAR 0 2
21509: PPUSH
21510: LD_INT 2
21512: PPUSH
21513: CALL_OW 268
21517: PUSH
21518: LD_INT 11
21520: EQUAL
21521: OR
21522: IFFALSE 21532
// eventVar1 = 1 ;
21524: LD_ADDR_EXP 61
21528: PUSH
21529: LD_INT 1
21531: ST_TO_ADDR
21532: GO 21485
21534: POP
21535: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
21536: LD_VAR 0 1
21540: PPUSH
21541: CALL_OW 255
21545: PUSH
21546: LD_INT 3
21548: EQUAL
21549: IFFALSE 22029
// begin if GetBType ( building ) = b_depot then
21551: LD_VAR 0 1
21555: PPUSH
21556: CALL_OW 266
21560: PUSH
21561: LD_INT 0
21563: EQUAL
21564: IFFALSE 21636
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
21566: LD_VAR 0 1
21570: PPUSH
21571: CALL_OW 274
21575: PPUSH
21576: LD_INT 1
21578: PPUSH
21579: LD_INT 5000
21581: PPUSH
21582: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
21586: LD_VAR 0 1
21590: PPUSH
21591: CALL_OW 274
21595: PPUSH
21596: LD_INT 2
21598: PPUSH
21599: LD_INT 300
21601: PPUSH
21602: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
21606: LD_VAR 0 1
21610: PPUSH
21611: CALL_OW 274
21615: PPUSH
21616: LD_INT 3
21618: PPUSH
21619: LD_INT 100
21621: PPUSH
21622: CALL_OW 277
// ruDepot = building ;
21626: LD_ADDR_EXP 30
21630: PUSH
21631: LD_VAR 0 1
21635: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21636: LD_VAR 0 1
21640: PPUSH
21641: CALL_OW 266
21645: PUSH
21646: LD_INT 0
21648: EQUAL
21649: PUSH
21650: LD_VAR 0 1
21654: PPUSH
21655: CALL_OW 266
21659: PUSH
21660: LD_INT 2
21662: EQUAL
21663: OR
21664: PUSH
21665: LD_VAR 0 1
21669: PPUSH
21670: CALL_OW 266
21674: PUSH
21675: LD_INT 4
21677: EQUAL
21678: OR
21679: IFFALSE 21690
// ComUpgrade ( building ) ;
21681: LD_VAR 0 1
21685: PPUSH
21686: CALL_OW 146
// if GetBType ( building ) = b_lab then
21690: LD_VAR 0 1
21694: PPUSH
21695: CALL_OW 266
21699: PUSH
21700: LD_INT 6
21702: EQUAL
21703: IFFALSE 21906
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
21705: LD_INT 22
21707: PUSH
21708: LD_INT 3
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: LD_INT 30
21717: PUSH
21718: LD_INT 8
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PPUSH
21729: CALL_OW 69
21733: PUSH
21734: LD_INT 0
21736: EQUAL
21737: IFFALSE 21775
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21739: LD_VAR 0 1
21743: PPUSH
21744: LD_INT 10
21746: PPUSH
21747: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
21751: LD_VAR 0 1
21755: PPUSH
21756: LD_INT 12
21758: PPUSH
21759: CALL_OW 207
// ruLab1 = building ;
21763: LD_ADDR_EXP 31
21767: PUSH
21768: LD_VAR 0 1
21772: ST_TO_ADDR
// end else
21773: GO 21809
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
21775: LD_VAR 0 1
21779: PPUSH
21780: LD_INT 11
21782: PPUSH
21783: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
21787: LD_VAR 0 1
21791: PPUSH
21792: LD_INT 14
21794: PPUSH
21795: CALL_OW 207
// ruLab2 = building ;
21799: LD_ADDR_EXP 32
21803: PUSH
21804: LD_VAR 0 1
21808: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
21809: LD_INT 3
21811: PPUSH
21812: LD_VAR 0 1
21816: PPUSH
21817: LD_INT 3
21819: PPUSH
21820: CALL 14231 0 3
// if ruDestroyedBuildings > 0 then
21824: LD_EXP 42
21828: PUSH
21829: LD_INT 0
21831: GREATER
21832: IFFALSE 21906
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21834: LD_ADDR_EXP 42
21838: PUSH
21839: LD_EXP 42
21843: PPUSH
21844: LD_INT 1
21846: PPUSH
21847: CALL_OW 3
21851: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21852: LD_ADDR_EXP 42
21856: PUSH
21857: LD_EXP 42
21861: PPUSH
21862: LD_INT 1
21864: PPUSH
21865: CALL_OW 3
21869: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21870: LD_ADDR_EXP 42
21874: PUSH
21875: LD_EXP 42
21879: PPUSH
21880: LD_INT 1
21882: PPUSH
21883: CALL_OW 3
21887: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21888: LD_ADDR_EXP 42
21892: PUSH
21893: LD_EXP 42
21897: PPUSH
21898: LD_INT 1
21900: PPUSH
21901: CALL_OW 3
21905: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
21906: LD_VAR 0 1
21910: PPUSH
21911: CALL_OW 266
21915: PUSH
21916: LD_INT 32
21918: EQUAL
21919: IFFALSE 21956
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21921: LD_VAR 0 1
21925: PPUSH
21926: LD_INT 44
21928: PUSH
21929: LD_INT 45
21931: PUSH
21932: LD_INT 46
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: LIST
21939: PUSH
21940: LD_INT 1
21942: PPUSH
21943: LD_INT 3
21945: PPUSH
21946: CALL_OW 12
21950: ARRAY
21951: PPUSH
21952: CALL_OW 208
// if GetBType ( building ) = b_turret then
21956: LD_VAR 0 1
21960: PPUSH
21961: CALL_OW 266
21965: PUSH
21966: LD_INT 33
21968: EQUAL
21969: IFFALSE 22006
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21971: LD_VAR 0 1
21975: PPUSH
21976: LD_INT 44
21978: PUSH
21979: LD_INT 45
21981: PUSH
21982: LD_INT 46
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 1
21992: PPUSH
21993: LD_INT 3
21995: PPUSH
21996: CALL_OW 12
22000: ARRAY
22001: PPUSH
22002: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
22006: LD_VAR 0 1
22010: PPUSH
22011: CALL_OW 266
22015: PUSH
22016: LD_INT 24
22018: EQUAL
22019: IFFALSE 22029
// russianAI = 1 ;
22021: LD_ADDR_EXP 39
22025: PUSH
22026: LD_INT 1
22028: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
22029: LD_VAR 0 1
22033: PPUSH
22034: CALL_OW 255
22038: PUSH
22039: LD_INT 2
22041: EQUAL
22042: IFFALSE 22666
// begin if GetBType ( building ) = b_breastwork then
22044: LD_VAR 0 1
22048: PPUSH
22049: CALL_OW 266
22053: PUSH
22054: LD_INT 31
22056: EQUAL
22057: IFFALSE 22203
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
22059: LD_ADDR_VAR 0 3
22063: PUSH
22064: LD_INT 22
22066: PUSH
22067: LD_INT 2
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: LD_INT 2
22076: PUSH
22077: LD_INT 25
22079: PUSH
22080: LD_INT 1
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 25
22089: PUSH
22090: LD_INT 8
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: LIST
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PPUSH
22106: CALL_OW 69
22110: PUSH
22111: LD_EXP 26
22115: DIFF
22116: ST_TO_ADDR
// if not sol then
22117: LD_VAR 0 3
22121: NOT
22122: IFFALSE 22126
// exit ;
22124: GO 22666
// for i in sol do
22126: LD_ADDR_VAR 0 2
22130: PUSH
22131: LD_VAR 0 3
22135: PUSH
22136: FOR_IN
22137: IFFALSE 22201
// if not GetTag ( i ) then
22139: LD_VAR 0 2
22143: PPUSH
22144: CALL_OW 110
22148: NOT
22149: IFFALSE 22199
// begin if IsInUnit ( i ) then
22151: LD_VAR 0 2
22155: PPUSH
22156: CALL_OW 310
22160: IFFALSE 22171
// ComExitBuilding ( i ) ;
22162: LD_VAR 0 2
22166: PPUSH
22167: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
22171: LD_VAR 0 2
22175: PPUSH
22176: LD_VAR 0 1
22180: PPUSH
22181: CALL_OW 180
// SetTag ( i , 11 ) ;
22185: LD_VAR 0 2
22189: PPUSH
22190: LD_INT 11
22192: PPUSH
22193: CALL_OW 109
// break ;
22197: GO 22201
// end ;
22199: GO 22136
22201: POP
22202: POP
// end ; if GetBType ( building ) = b_depot then
22203: LD_VAR 0 1
22207: PPUSH
22208: CALL_OW 266
22212: PUSH
22213: LD_INT 0
22215: EQUAL
22216: IFFALSE 22302
// begin arDepot = building ;
22218: LD_ADDR_EXP 43
22222: PUSH
22223: LD_VAR 0 1
22227: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
22228: LD_INT 38
22230: PUSH
22231: LD_INT 47
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PPUSH
22238: LD_INT 71
22240: PPUSH
22241: LD_INT 19
22243: PPUSH
22244: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
22248: LD_VAR 0 1
22252: PPUSH
22253: CALL_OW 274
22257: PPUSH
22258: LD_INT 1
22260: PPUSH
22261: LD_INT 500
22263: PPUSH
22264: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
22268: LD_VAR 0 1
22272: PPUSH
22273: CALL_OW 274
22277: PPUSH
22278: LD_INT 3
22280: PPUSH
22281: LD_INT 30
22283: PPUSH
22284: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
22288: LD_EXP 26
22292: PPUSH
22293: LD_EXP 43
22297: PPUSH
22298: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22302: LD_VAR 0 1
22306: PPUSH
22307: CALL_OW 266
22311: PUSH
22312: LD_INT 6
22314: EQUAL
22315: PUSH
22316: LD_VAR 0 1
22320: PPUSH
22321: CALL_OW 266
22325: PUSH
22326: LD_INT 9
22328: EQUAL
22329: OR
22330: IFFALSE 22381
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22332: LD_VAR 0 1
22336: PPUSH
22337: LD_INT 10
22339: PPUSH
22340: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22344: LD_VAR 0 1
22348: PPUSH
22349: LD_INT 11
22351: PPUSH
22352: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
22356: LD_INT 2
22358: PPUSH
22359: LD_VAR 0 1
22363: PPUSH
22364: LD_INT 2
22366: PPUSH
22367: CALL 14231 0 3
// arLab = building ;
22371: LD_ADDR_EXP 44
22375: PUSH
22376: LD_VAR 0 1
22380: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
22381: LD_VAR 0 1
22385: PPUSH
22386: CALL_OW 266
22390: PUSH
22391: LD_INT 2
22393: EQUAL
22394: PUSH
22395: LD_VAR 0 1
22399: PPUSH
22400: CALL_OW 266
22404: PUSH
22405: LD_INT 4
22407: EQUAL
22408: OR
22409: IFFALSE 22474
// begin ComUpgrade ( building ) ;
22411: LD_VAR 0 1
22415: PPUSH
22416: CALL_OW 146
// if GetBType ( building ) = b_armoury then
22420: LD_VAR 0 1
22424: PPUSH
22425: CALL_OW 266
22429: PUSH
22430: LD_INT 4
22432: EQUAL
22433: IFFALSE 22474
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , 75 , 21 ) ;
22435: LD_INT 22
22437: PUSH
22438: LD_INT 2
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 25
22447: PUSH
22448: LD_INT 1
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PPUSH
22459: CALL_OW 69
22463: PPUSH
22464: LD_INT 75
22466: PPUSH
22467: LD_INT 21
22469: PPUSH
22470: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
22474: LD_VAR 0 1
22478: PPUSH
22479: CALL_OW 266
22483: PUSH
22484: LD_INT 27
22486: EQUAL
22487: IFFALSE 22666
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
22489: LD_INT 22
22491: PUSH
22492: LD_INT 2
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 30
22501: PUSH
22502: LD_INT 27
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PPUSH
22513: CALL_OW 69
22517: PUSH
22518: LD_INT 2
22520: EQUAL
22521: IFFALSE 22666
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
22523: LD_ADDR_VAR 0 2
22527: PUSH
22528: LD_INT 22
22530: PUSH
22531: LD_INT 2
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 21
22540: PUSH
22541: LD_INT 1
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 25
22550: PUSH
22551: LD_INT 2
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: LIST
22562: PPUSH
22563: CALL_OW 69
22567: PUSH
22568: LD_INT 1
22570: ARRAY
22571: ST_TO_ADDR
// AddComMoveXY ( i , 92 , 34 ) ;
22572: LD_VAR 0 2
22576: PPUSH
22577: LD_INT 92
22579: PPUSH
22580: LD_INT 34
22582: PPUSH
22583: CALL_OW 171
// AddComMoveXY ( i , 82 , 57 ) ;
22587: LD_VAR 0 2
22591: PPUSH
22592: LD_INT 82
22594: PPUSH
22595: LD_INT 57
22597: PPUSH
22598: CALL_OW 171
// AddComMoveXY ( i , 36 , 28 ) ;
22602: LD_VAR 0 2
22606: PPUSH
22607: LD_INT 36
22609: PPUSH
22610: LD_INT 28
22612: PPUSH
22613: CALL_OW 171
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
22617: LD_INT 22
22619: PUSH
22620: LD_INT 2
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 21
22629: PUSH
22630: LD_INT 1
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 25
22639: PUSH
22640: LD_INT 2
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: LIST
22651: PPUSH
22652: CALL_OW 69
22656: PPUSH
22657: LD_EXP 43
22661: PPUSH
22662: CALL_OW 180
// end ; end ; end ;
22666: PPOPN 4
22668: END
// on UpgradeComplete ( building ) do var i ;
22669: LD_INT 0
22671: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22672: LD_VAR 0 1
22676: PPUSH
22677: CALL_OW 255
22681: PUSH
22682: LD_INT 1
22684: EQUAL
22685: PUSH
22686: LD_EXP 61
22690: PUSH
22691: LD_INT 0
22693: EQUAL
22694: AND
22695: IFFALSE 22893
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
22697: LD_VAR 0 1
22701: PPUSH
22702: CALL_OW 266
22706: PUSH
22707: LD_INT 7
22709: EQUAL
22710: PUSH
22711: LD_VAR 0 1
22715: PPUSH
22716: CALL_OW 266
22720: PUSH
22721: LD_INT 8
22723: EQUAL
22724: OR
22725: IFFALSE 22893
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
22727: LD_INT 22
22729: PUSH
22730: LD_INT 1
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 2
22739: PUSH
22740: LD_INT 30
22742: PUSH
22743: LD_INT 26
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 30
22752: PUSH
22753: LD_INT 27
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 30
22762: PUSH
22763: LD_INT 28
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PPUSH
22780: CALL_OW 69
22784: PUSH
22785: LD_INT 0
22787: GREATER
22788: IFFALSE 22893
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22790: LD_ADDR_VAR 0 2
22794: PUSH
22795: LD_INT 22
22797: PUSH
22798: LD_INT 1
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 2
22807: PUSH
22808: LD_INT 30
22810: PUSH
22811: LD_INT 7
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 30
22820: PUSH
22821: LD_INT 8
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: LIST
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PPUSH
22837: CALL_OW 69
22841: PUSH
22842: FOR_IN
22843: IFFALSE 22891
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22845: LD_VAR 0 2
22849: PPUSH
22850: LD_INT 1
22852: PPUSH
22853: CALL_OW 268
22857: PUSH
22858: LD_INT 11
22860: EQUAL
22861: PUSH
22862: LD_VAR 0 2
22866: PPUSH
22867: LD_INT 2
22869: PPUSH
22870: CALL_OW 268
22874: PUSH
22875: LD_INT 11
22877: EQUAL
22878: OR
22879: IFFALSE 22889
// eventVar1 = 1 ;
22881: LD_ADDR_EXP 61
22885: PUSH
22886: LD_INT 1
22888: ST_TO_ADDR
22889: GO 22842
22891: POP
22892: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
22893: LD_VAR 0 1
22897: PPUSH
22898: CALL_OW 255
22902: PUSH
22903: LD_INT 2
22905: EQUAL
22906: IFFALSE 23011
// begin if GetBType ( building ) = b_barracks then
22908: LD_VAR 0 1
22912: PPUSH
22913: CALL_OW 266
22917: PUSH
22918: LD_INT 5
22920: EQUAL
22921: IFFALSE 23011
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
22923: LD_ADDR_VAR 0 2
22927: PUSH
22928: LD_INT 22
22930: PUSH
22931: LD_INT 2
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 25
22940: PUSH
22941: LD_INT 1
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 3
22950: PUSH
22951: LD_INT 54
22953: PUSH
22954: EMPTY
22955: LIST
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: LIST
22965: PPUSH
22966: CALL_OW 69
22970: PUSH
22971: LD_EXP 26
22975: PUSH
22976: EMPTY
22977: LIST
22978: DIFF
22979: PUSH
22980: FOR_IN
22981: IFFALSE 22999
// ComEnterUnit ( i , building ) ;
22983: LD_VAR 0 2
22987: PPUSH
22988: LD_VAR 0 1
22992: PPUSH
22993: CALL_OW 120
22997: GO 22980
22999: POP
23000: POP
// arArm = building ;
23001: LD_ADDR_EXP 45
23005: PUSH
23006: LD_VAR 0 1
23010: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
23011: LD_VAR 0 1
23015: PPUSH
23016: CALL_OW 255
23020: PUSH
23021: LD_INT 3
23023: EQUAL
23024: IFFALSE 23497
// begin if GetBType ( building ) = b_factory then
23026: LD_VAR 0 1
23030: PPUSH
23031: CALL_OW 266
23035: PUSH
23036: LD_INT 3
23038: EQUAL
23039: IFFALSE 23106
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
23041: LD_ADDR_VAR 0 2
23045: PUSH
23046: LD_INT 22
23048: PUSH
23049: LD_INT 3
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 25
23058: PUSH
23059: LD_INT 3
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PPUSH
23070: CALL_OW 69
23074: PUSH
23075: FOR_IN
23076: IFFALSE 23094
// ComEnterUnit ( i , building ) ;
23078: LD_VAR 0 2
23082: PPUSH
23083: LD_VAR 0 1
23087: PPUSH
23088: CALL_OW 120
23092: GO 23075
23094: POP
23095: POP
// ruFab = building ;
23096: LD_ADDR_EXP 35
23100: PUSH
23101: LD_VAR 0 1
23105: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
23106: LD_INT 22
23108: PUSH
23109: LD_INT 3
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 21
23118: PUSH
23119: LD_INT 3
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 30
23128: PUSH
23129: LD_INT 8
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: LIST
23140: PPUSH
23141: CALL_OW 69
23145: PUSH
23146: LD_INT 2
23148: EQUAL
23149: IFFALSE 23357
// begin for i = 1 to 2 do
23151: LD_ADDR_VAR 0 2
23155: PUSH
23156: DOUBLE
23157: LD_INT 1
23159: DEC
23160: ST_TO_ADDR
23161: LD_INT 2
23163: PUSH
23164: FOR_TO
23165: IFFALSE 23252
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
23167: LD_INT 22
23169: PUSH
23170: LD_INT 3
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 25
23179: PUSH
23180: LD_INT 4
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PPUSH
23191: CALL_OW 69
23195: PUSH
23196: LD_VAR 0 2
23200: ARRAY
23201: PPUSH
23202: LD_INT 22
23204: PUSH
23205: LD_INT 3
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 21
23214: PUSH
23215: LD_INT 3
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: LD_INT 30
23224: PUSH
23225: LD_INT 8
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: LIST
23236: PPUSH
23237: CALL_OW 69
23241: PUSH
23242: LD_INT 1
23244: ARRAY
23245: PPUSH
23246: CALL_OW 120
23250: GO 23164
23252: POP
23253: POP
// for i = 3 to 4 do
23254: LD_ADDR_VAR 0 2
23258: PUSH
23259: DOUBLE
23260: LD_INT 3
23262: DEC
23263: ST_TO_ADDR
23264: LD_INT 4
23266: PUSH
23267: FOR_TO
23268: IFFALSE 23355
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
23270: LD_INT 22
23272: PUSH
23273: LD_INT 3
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 25
23282: PUSH
23283: LD_INT 4
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PPUSH
23294: CALL_OW 69
23298: PUSH
23299: LD_VAR 0 2
23303: ARRAY
23304: PPUSH
23305: LD_INT 22
23307: PUSH
23308: LD_INT 3
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 21
23317: PUSH
23318: LD_INT 3
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 30
23327: PUSH
23328: LD_INT 8
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: LIST
23339: PPUSH
23340: CALL_OW 69
23344: PUSH
23345: LD_INT 2
23347: ARRAY
23348: PPUSH
23349: CALL_OW 120
23353: GO 23267
23355: POP
23356: POP
// end ; if GetBType ( building ) = b_barracks then
23357: LD_VAR 0 1
23361: PPUSH
23362: CALL_OW 266
23366: PUSH
23367: LD_INT 5
23369: EQUAL
23370: IFFALSE 23497
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
23372: LD_ADDR_VAR 0 2
23376: PUSH
23377: LD_INT 22
23379: PUSH
23380: LD_INT 3
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 25
23389: PUSH
23390: LD_INT 1
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 3
23399: PUSH
23400: LD_INT 54
23402: PUSH
23403: EMPTY
23404: LIST
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: LIST
23414: PPUSH
23415: CALL_OW 69
23419: PUSH
23420: FOR_IN
23421: IFFALSE 23439
// ComEnterUnit ( i , building ) ;
23423: LD_VAR 0 2
23427: PPUSH
23428: LD_VAR 0 1
23432: PPUSH
23433: CALL_OW 120
23437: GO 23420
23439: POP
23440: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
23441: LD_INT 22
23443: PUSH
23444: LD_INT 3
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 30
23453: PUSH
23454: LD_INT 5
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PPUSH
23465: CALL_OW 69
23469: PUSH
23470: LD_INT 0
23472: EQUAL
23473: IFFALSE 23487
// ruArm1 = building else
23475: LD_ADDR_EXP 33
23479: PUSH
23480: LD_VAR 0 1
23484: ST_TO_ADDR
23485: GO 23497
// ruArm2 = building ;
23487: LD_ADDR_EXP 34
23491: PUSH
23492: LD_VAR 0 1
23496: ST_TO_ADDR
// end ; end ; end ;
23497: PPOPN 2
23499: END
// on EnterBuilding ( building , human ) do var rnd ;
23500: LD_INT 0
23502: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
23503: LD_VAR 0 2
23507: PPUSH
23508: CALL_OW 255
23512: PUSH
23513: LD_INT 2
23515: EQUAL
23516: PUSH
23517: LD_VAR 0 2
23521: PPUSH
23522: CALL_OW 257
23526: PUSH
23527: LD_INT 1
23529: EQUAL
23530: AND
23531: PUSH
23532: LD_VAR 0 1
23536: PUSH
23537: LD_EXP 45
23541: EQUAL
23542: AND
23543: IFFALSE 23590
// begin wait ( 0 0$1 ) ;
23545: LD_INT 35
23547: PPUSH
23548: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
23552: LD_ADDR_VAR 0 3
23556: PUSH
23557: LD_INT 1
23559: PPUSH
23560: LD_INT 100
23562: PPUSH
23563: CALL_OW 12
23567: ST_TO_ADDR
// if rnd > 50 then
23568: LD_VAR 0 3
23572: PUSH
23573: LD_INT 50
23575: GREATER
23576: IFFALSE 23590
// SetClass ( human , class_mortar ) ;
23578: LD_VAR 0 2
23582: PPUSH
23583: LD_INT 8
23585: PPUSH
23586: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
23590: LD_VAR 0 2
23594: PUSH
23595: LD_INT 22
23597: PUSH
23598: LD_INT 2
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 25
23607: PUSH
23608: LD_INT 12
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PPUSH
23619: CALL_OW 69
23623: IN
23624: IFFALSE 23674
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
23626: LD_VAR 0 1
23630: PPUSH
23631: CALL_OW 266
23635: PUSH
23636: LD_INT 0
23638: PUSH
23639: LD_INT 1
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: IN
23646: IFFALSE 23662
// SetClass ( human , class_apeman_engineer ) else
23648: LD_VAR 0 2
23652: PPUSH
23653: LD_INT 16
23655: PPUSH
23656: CALL_OW 336
23660: GO 23674
// SetClass ( human , class_apeman_soldier ) ;
23662: LD_VAR 0 2
23666: PPUSH
23667: LD_INT 15
23669: PPUSH
23670: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
23674: LD_VAR 0 2
23678: PPUSH
23679: CALL_OW 255
23683: PUSH
23684: LD_INT 3
23686: EQUAL
23687: PUSH
23688: LD_VAR 0 2
23692: PPUSH
23693: CALL_OW 257
23697: PUSH
23698: LD_INT 1
23700: EQUAL
23701: AND
23702: PUSH
23703: LD_VAR 0 1
23707: PUSH
23708: LD_EXP 33
23712: EQUAL
23713: PUSH
23714: LD_VAR 0 1
23718: PUSH
23719: LD_EXP 34
23723: EQUAL
23724: OR
23725: PUSH
23726: EMPTY
23727: LIST
23728: AND
23729: IFFALSE 23750
// begin wait ( 0 0$1 ) ;
23731: LD_INT 35
23733: PPUSH
23734: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
23738: LD_VAR 0 2
23742: PPUSH
23743: LD_INT 9
23745: PPUSH
23746: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
23750: LD_VAR 0 2
23754: PPUSH
23755: CALL_OW 255
23759: PUSH
23760: LD_INT 3
23762: EQUAL
23763: PUSH
23764: LD_VAR 0 2
23768: PPUSH
23769: CALL_OW 257
23773: PUSH
23774: LD_INT 9
23776: EQUAL
23777: AND
23778: PUSH
23779: LD_VAR 0 1
23783: PPUSH
23784: CALL_OW 266
23788: PUSH
23789: LD_INT 32
23791: EQUAL
23792: AND
23793: IFFALSE 23814
// begin wait ( 0 0$1 ) ;
23795: LD_INT 35
23797: PPUSH
23798: CALL_OW 67
// SetClass ( human , 1 ) ;
23802: LD_VAR 0 2
23806: PPUSH
23807: LD_INT 1
23809: PPUSH
23810: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
23814: LD_VAR 0 2
23818: PPUSH
23819: CALL_OW 255
23823: PUSH
23824: LD_INT 3
23826: EQUAL
23827: PUSH
23828: LD_VAR 0 2
23832: PPUSH
23833: CALL_OW 257
23837: PUSH
23838: LD_INT 3
23840: EQUAL
23841: AND
23842: PUSH
23843: LD_VAR 0 1
23847: PUSH
23848: LD_EXP 35
23852: EQUAL
23853: AND
23854: IFFALSE 23868
// SetLives ( human , 1000 ) ;
23856: LD_VAR 0 2
23860: PPUSH
23861: LD_INT 1000
23863: PPUSH
23864: CALL_OW 234
// end ;
23868: PPOPN 3
23870: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
23871: LD_VAR 0 1
23875: PUSH
23876: LD_INT 1
23878: EQUAL
23879: PUSH
23880: LD_VAR 0 2
23884: PUSH
23885: LD_INT 2
23887: EQUAL
23888: AND
23889: PUSH
23890: LD_INT 1
23892: PPUSH
23893: LD_INT 2
23895: PPUSH
23896: CALL_OW 81
23900: PUSH
23901: LD_INT 1
23903: EQUAL
23904: AND
23905: IFFALSE 23926
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23907: LD_EXP 24
23911: PPUSH
23912: LD_STRING D6b-Pow-1
23914: PPUSH
23915: CALL_OW 94
// YouLost ( Powell ) ;
23919: LD_STRING Powell
23921: PPUSH
23922: CALL_OW 104
// end ; end ;
23926: PPOPN 2
23928: END
// every 0 0$3 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
23929: LD_INT 23
23931: PPUSH
23932: LD_INT 22
23934: PUSH
23935: LD_INT 1
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 21
23944: PUSH
23945: LD_INT 3
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PPUSH
23956: CALL_OW 70
23960: PUSH
23961: LD_INT 23
23963: PPUSH
23964: LD_INT 22
23966: PUSH
23967: LD_INT 1
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 21
23976: PUSH
23977: LD_INT 2
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PPUSH
23988: CALL_OW 70
23992: OR
23993: PUSH
23994: LD_INT 1
23996: PPUSH
23997: LD_INT 2
23999: PPUSH
24000: CALL_OW 81
24004: PUSH
24005: LD_INT 1
24007: EQUAL
24008: AND
24009: IFFALSE 24033
24011: GO 24013
24013: DISABLE
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
24014: LD_EXP 24
24018: PPUSH
24019: LD_STRING D6b-Pow-1
24021: PPUSH
24022: CALL_OW 94
// YouLost ( Powell ) ;
24026: LD_STRING Powell
24028: PPUSH
24029: CALL_OW 104
// end ;
24033: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
24034: LD_VAR 0 1
24038: PUSH
24039: LD_EXP 1
24043: EQUAL
24044: IFFALSE 24053
// YouLost ( JMM ) ;
24046: LD_STRING JMM
24048: PPUSH
24049: CALL_OW 104
// if unit = Khatam then
24053: LD_VAR 0 1
24057: PUSH
24058: LD_EXP 14
24062: EQUAL
24063: IFFALSE 24073
// KhatamStatus = 0 ;
24065: LD_ADDR_EXP 52
24069: PUSH
24070: LD_INT 0
24072: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
24073: LD_VAR 0 1
24077: PPUSH
24078: CALL_OW 255
24082: PUSH
24083: LD_INT 3
24085: EQUAL
24086: PUSH
24087: LD_VAR 0 1
24091: PPUSH
24092: CALL_OW 247
24096: PUSH
24097: LD_INT 3
24099: EQUAL
24100: AND
24101: IFFALSE 24793
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
24103: LD_VAR 0 1
24107: PPUSH
24108: CALL_OW 266
24112: PUSH
24113: LD_INT 31
24115: EQUAL
24116: PUSH
24117: LD_VAR 0 1
24121: PPUSH
24122: CALL_OW 266
24126: PUSH
24127: LD_INT 32
24129: EQUAL
24130: OR
24131: PUSH
24132: LD_VAR 0 1
24136: PPUSH
24137: CALL_OW 266
24141: PUSH
24142: LD_INT 36
24144: EQUAL
24145: OR
24146: PUSH
24147: LD_VAR 0 1
24151: PPUSH
24152: CALL_OW 266
24156: PUSH
24157: LD_INT 0
24159: EQUAL
24160: OR
24161: PUSH
24162: LD_VAR 0 1
24166: PPUSH
24167: CALL_OW 266
24171: PUSH
24172: LD_INT 24
24174: EQUAL
24175: OR
24176: PUSH
24177: LD_VAR 0 1
24181: PPUSH
24182: CALL_OW 266
24186: PUSH
24187: LD_INT 17
24189: EQUAL
24190: OR
24191: PUSH
24192: LD_VAR 0 1
24196: PPUSH
24197: CALL_OW 266
24201: PUSH
24202: LD_INT 25
24204: EQUAL
24205: OR
24206: PUSH
24207: LD_VAR 0 1
24211: PPUSH
24212: CALL_OW 266
24216: PUSH
24217: LD_INT 19
24219: EQUAL
24220: OR
24221: PUSH
24222: LD_VAR 0 1
24226: PPUSH
24227: CALL_OW 266
24231: PUSH
24232: LD_INT 20
24234: EQUAL
24235: OR
24236: PUSH
24237: LD_VAR 0 1
24241: PPUSH
24242: CALL_OW 266
24246: PUSH
24247: LD_INT 18
24249: EQUAL
24250: OR
24251: PUSH
24252: LD_VAR 0 1
24256: PPUSH
24257: CALL_OW 266
24261: PUSH
24262: LD_INT 21
24264: EQUAL
24265: OR
24266: PUSH
24267: LD_VAR 0 1
24271: PPUSH
24272: CALL_OW 266
24276: PUSH
24277: LD_INT 23
24279: EQUAL
24280: OR
24281: PUSH
24282: LD_VAR 0 1
24286: PPUSH
24287: CALL_OW 266
24291: PUSH
24292: LD_INT 16
24294: EQUAL
24295: OR
24296: PUSH
24297: LD_VAR 0 1
24301: PPUSH
24302: CALL_OW 266
24306: PUSH
24307: LD_INT 6
24309: EQUAL
24310: OR
24311: PUSH
24312: LD_VAR 0 1
24316: PPUSH
24317: CALL_OW 266
24321: PUSH
24322: LD_INT 29
24324: EQUAL
24325: OR
24326: PUSH
24327: LD_VAR 0 1
24331: PPUSH
24332: CALL_OW 266
24336: PUSH
24337: LD_INT 26
24339: EQUAL
24340: OR
24341: PUSH
24342: LD_VAR 0 1
24346: PPUSH
24347: CALL_OW 266
24351: PUSH
24352: LD_INT 30
24354: EQUAL
24355: OR
24356: PUSH
24357: LD_VAR 0 1
24361: PPUSH
24362: CALL_OW 266
24366: PUSH
24367: LD_INT 28
24369: EQUAL
24370: OR
24371: PUSH
24372: LD_VAR 0 1
24376: PPUSH
24377: CALL_OW 266
24381: PUSH
24382: LD_INT 27
24384: EQUAL
24385: OR
24386: PUSH
24387: LD_VAR 0 1
24391: PPUSH
24392: CALL_OW 266
24396: PUSH
24397: LD_INT 33
24399: EQUAL
24400: OR
24401: PUSH
24402: LD_VAR 0 1
24406: PPUSH
24407: CALL_OW 266
24411: PUSH
24412: LD_INT 2
24414: EQUAL
24415: OR
24416: PUSH
24417: LD_VAR 0 1
24421: PPUSH
24422: CALL_OW 266
24426: PUSH
24427: LD_INT 4
24429: EQUAL
24430: OR
24431: IFFALSE 24517
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
24433: LD_ADDR_EXP 42
24437: PUSH
24438: LD_EXP 42
24442: PUSH
24443: LD_VAR 0 1
24447: PPUSH
24448: CALL_OW 266
24452: ADD
24453: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24454: LD_ADDR_EXP 42
24458: PUSH
24459: LD_EXP 42
24463: PUSH
24464: LD_VAR 0 1
24468: PPUSH
24469: CALL_OW 250
24473: ADD
24474: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24475: LD_ADDR_EXP 42
24479: PUSH
24480: LD_EXP 42
24484: PUSH
24485: LD_VAR 0 1
24489: PPUSH
24490: CALL_OW 251
24494: ADD
24495: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24496: LD_ADDR_EXP 42
24500: PUSH
24501: LD_EXP 42
24505: PUSH
24506: LD_VAR 0 1
24510: PPUSH
24511: CALL_OW 254
24515: ADD
24516: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
24517: LD_VAR 0 1
24521: PPUSH
24522: CALL_OW 266
24526: PUSH
24527: LD_INT 1
24529: EQUAL
24530: IFFALSE 24609
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
24532: LD_ADDR_EXP 42
24536: PUSH
24537: LD_EXP 42
24541: PUSH
24542: LD_INT 0
24544: ADD
24545: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24546: LD_ADDR_EXP 42
24550: PUSH
24551: LD_EXP 42
24555: PUSH
24556: LD_VAR 0 1
24560: PPUSH
24561: CALL_OW 250
24565: ADD
24566: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24567: LD_ADDR_EXP 42
24571: PUSH
24572: LD_EXP 42
24576: PUSH
24577: LD_VAR 0 1
24581: PPUSH
24582: CALL_OW 251
24586: ADD
24587: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24588: LD_ADDR_EXP 42
24592: PUSH
24593: LD_EXP 42
24597: PUSH
24598: LD_VAR 0 1
24602: PPUSH
24603: CALL_OW 254
24607: ADD
24608: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
24609: LD_VAR 0 1
24613: PPUSH
24614: CALL_OW 266
24618: PUSH
24619: LD_INT 3
24621: EQUAL
24622: IFFALSE 24701
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
24624: LD_ADDR_EXP 42
24628: PUSH
24629: LD_EXP 42
24633: PUSH
24634: LD_INT 2
24636: ADD
24637: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24638: LD_ADDR_EXP 42
24642: PUSH
24643: LD_EXP 42
24647: PUSH
24648: LD_VAR 0 1
24652: PPUSH
24653: CALL_OW 250
24657: ADD
24658: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24659: LD_ADDR_EXP 42
24663: PUSH
24664: LD_EXP 42
24668: PUSH
24669: LD_VAR 0 1
24673: PPUSH
24674: CALL_OW 251
24678: ADD
24679: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24680: LD_ADDR_EXP 42
24684: PUSH
24685: LD_EXP 42
24689: PUSH
24690: LD_VAR 0 1
24694: PPUSH
24695: CALL_OW 254
24699: ADD
24700: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
24701: LD_VAR 0 1
24705: PPUSH
24706: CALL_OW 266
24710: PUSH
24711: LD_INT 5
24713: EQUAL
24714: IFFALSE 24793
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
24716: LD_ADDR_EXP 42
24720: PUSH
24721: LD_EXP 42
24725: PUSH
24726: LD_INT 4
24728: ADD
24729: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24730: LD_ADDR_EXP 42
24734: PUSH
24735: LD_EXP 42
24739: PUSH
24740: LD_VAR 0 1
24744: PPUSH
24745: CALL_OW 250
24749: ADD
24750: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24751: LD_ADDR_EXP 42
24755: PUSH
24756: LD_EXP 42
24760: PUSH
24761: LD_VAR 0 1
24765: PPUSH
24766: CALL_OW 251
24770: ADD
24771: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24772: LD_ADDR_EXP 42
24776: PUSH
24777: LD_EXP 42
24781: PUSH
24782: LD_VAR 0 1
24786: PPUSH
24787: CALL_OW 254
24791: ADD
24792: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
24793: LD_VAR 0 1
24797: PPUSH
24798: CALL_OW 257
24802: PUSH
24803: LD_INT 3
24805: EQUAL
24806: PUSH
24807: LD_VAR 0 1
24811: PPUSH
24812: CALL_OW 255
24816: PUSH
24817: LD_INT 3
24819: EQUAL
24820: AND
24821: PUSH
24822: LD_EXP 35
24826: PPUSH
24827: CALL_OW 302
24831: AND
24832: PUSH
24833: LD_EXP 35
24837: PPUSH
24838: CALL_OW 255
24842: PUSH
24843: LD_INT 3
24845: EQUAL
24846: AND
24847: IFFALSE 24917
// begin uc_side = 3 ;
24849: LD_ADDR_OWVAR 20
24853: PUSH
24854: LD_INT 3
24856: ST_TO_ADDR
// uc_nation = 3 ;
24857: LD_ADDR_OWVAR 21
24861: PUSH
24862: LD_INT 3
24864: ST_TO_ADDR
// hc_gallery :=  ;
24865: LD_ADDR_OWVAR 33
24869: PUSH
24870: LD_STRING 
24872: ST_TO_ADDR
// hc_name :=  ;
24873: LD_ADDR_OWVAR 26
24877: PUSH
24878: LD_STRING 
24880: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
24881: LD_INT 0
24883: PPUSH
24884: LD_EXP 36
24888: PPUSH
24889: LD_EXP 37
24893: PPUSH
24894: CALL_OW 12
24898: PPUSH
24899: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
24903: CALL_OW 44
24907: PPUSH
24908: LD_EXP 35
24912: PPUSH
24913: CALL_OW 52
// end ; end ;
24917: PPOPN 1
24919: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
24920: LD_ADDR_OWVAR 57
24924: PUSH
24925: LD_INT 0
24927: ST_TO_ADDR
// fastEnd = 1 ;
24928: LD_ADDR_EXP 59
24932: PUSH
24933: LD_INT 1
24935: ST_TO_ADDR
// FinishMission ;
24936: CALL 26040 0 0
// end ; end_of_file
24940: PPOPN 1
24942: END
// export function PrepareNature ; var i , un ; begin
24943: LD_INT 0
24945: PPUSH
24946: PPUSH
24947: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
24948: LD_ADDR_VAR 0 2
24952: PUSH
24953: DOUBLE
24954: LD_INT 1
24956: DEC
24957: ST_TO_ADDR
24958: LD_OWVAR 67
24962: PUSH
24963: LD_INT 1
24965: PPUSH
24966: LD_INT 5
24968: PPUSH
24969: CALL_OW 12
24973: PLUS
24974: PUSH
24975: FOR_TO
24976: IFFALSE 25121
// begin hc_sex = sex_male ;
24978: LD_ADDR_OWVAR 27
24982: PUSH
24983: LD_INT 1
24985: ST_TO_ADDR
// uc_side = 0 ;
24986: LD_ADDR_OWVAR 20
24990: PUSH
24991: LD_INT 0
24993: ST_TO_ADDR
// uc_nation = nation_nature ;
24994: LD_ADDR_OWVAR 21
24998: PUSH
24999: LD_INT 0
25001: ST_TO_ADDR
// hc_class = class_apeman ;
25002: LD_ADDR_OWVAR 28
25006: PUSH
25007: LD_INT 12
25009: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
25010: LD_ADDR_OWVAR 31
25014: PUSH
25015: LD_INT 2
25017: PPUSH
25018: LD_INT 7
25020: PPUSH
25021: CALL_OW 12
25025: PUSH
25026: LD_OWVAR 67
25030: PLUS
25031: PUSH
25032: LD_INT 2
25034: PPUSH
25035: LD_INT 10
25037: PPUSH
25038: CALL_OW 12
25042: PUSH
25043: LD_INT 2
25045: PPUSH
25046: LD_INT 10
25048: PPUSH
25049: CALL_OW 12
25053: PUSH
25054: LD_INT 2
25056: PPUSH
25057: LD_INT 10
25059: PPUSH
25060: CALL_OW 12
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
25071: LD_ADDR_OWVAR 35
25075: PUSH
25076: LD_INT 5
25078: NEG
25079: PPUSH
25080: LD_INT 5
25082: PPUSH
25083: CALL_OW 12
25087: PUSH
25088: LD_OWVAR 67
25092: MUL
25093: ST_TO_ADDR
// un = CreateHuman ;
25094: LD_ADDR_VAR 0 3
25098: PUSH
25099: CALL_OW 44
25103: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
25104: LD_VAR 0 3
25108: PPUSH
25109: LD_INT 5
25111: PPUSH
25112: LD_INT 0
25114: PPUSH
25115: CALL_OW 49
// end ;
25119: GO 24975
25121: POP
25122: POP
// for i = 1 to Difficulty + 2 do
25123: LD_ADDR_VAR 0 2
25127: PUSH
25128: DOUBLE
25129: LD_INT 1
25131: DEC
25132: ST_TO_ADDR
25133: LD_OWVAR 67
25137: PUSH
25138: LD_INT 2
25140: PLUS
25141: PUSH
25142: FOR_TO
25143: IFFALSE 25252
// begin hc_sex = sex_male ;
25145: LD_ADDR_OWVAR 27
25149: PUSH
25150: LD_INT 1
25152: ST_TO_ADDR
// uc_side = 0 ;
25153: LD_ADDR_OWVAR 20
25157: PUSH
25158: LD_INT 0
25160: ST_TO_ADDR
// uc_nation = nation_nature ;
25161: LD_ADDR_OWVAR 21
25165: PUSH
25166: LD_INT 0
25168: ST_TO_ADDR
// hc_class = class_tiger ;
25169: LD_ADDR_OWVAR 28
25173: PUSH
25174: LD_INT 14
25176: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
25177: LD_ADDR_OWVAR 31
25181: PUSH
25182: LD_EXP 37
25186: PUSH
25187: LD_INT 0
25189: PUSH
25190: LD_INT 0
25192: PUSH
25193: LD_INT 0
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
25202: LD_ADDR_OWVAR 35
25206: PUSH
25207: LD_INT 5
25209: NEG
25210: PPUSH
25211: LD_INT 5
25213: PPUSH
25214: CALL_OW 12
25218: PUSH
25219: LD_OWVAR 67
25223: MUL
25224: ST_TO_ADDR
// un = CreateHuman ;
25225: LD_ADDR_VAR 0 3
25229: PUSH
25230: CALL_OW 44
25234: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
25235: LD_VAR 0 3
25239: PPUSH
25240: LD_INT 6
25242: PPUSH
25243: LD_INT 0
25245: PPUSH
25246: CALL_OW 49
// end ;
25250: GO 25142
25252: POP
25253: POP
// for i = 1 to rand ( 3 , 4 ) do
25254: LD_ADDR_VAR 0 2
25258: PUSH
25259: DOUBLE
25260: LD_INT 1
25262: DEC
25263: ST_TO_ADDR
25264: LD_INT 3
25266: PPUSH
25267: LD_INT 4
25269: PPUSH
25270: CALL_OW 12
25274: PUSH
25275: FOR_TO
25276: IFFALSE 25370
// begin hc_sex = sex_male ;
25278: LD_ADDR_OWVAR 27
25282: PUSH
25283: LD_INT 1
25285: ST_TO_ADDR
// uc_side = 0 ;
25286: LD_ADDR_OWVAR 20
25290: PUSH
25291: LD_INT 0
25293: ST_TO_ADDR
// uc_nation = nation_nature ;
25294: LD_ADDR_OWVAR 21
25298: PUSH
25299: LD_INT 0
25301: ST_TO_ADDR
// hc_class = 18 ;
25302: LD_ADDR_OWVAR 28
25306: PUSH
25307: LD_INT 18
25309: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
25310: LD_ADDR_OWVAR 31
25314: PUSH
25315: LD_EXP 37
25319: PUSH
25320: LD_INT 0
25322: PUSH
25323: LD_INT 0
25325: PUSH
25326: LD_INT 0
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: ST_TO_ADDR
// hc_agressivity = 0 ;
25335: LD_ADDR_OWVAR 35
25339: PUSH
25340: LD_INT 0
25342: ST_TO_ADDR
// un = CreateHuman ;
25343: LD_ADDR_VAR 0 3
25347: PUSH
25348: CALL_OW 44
25352: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
25353: LD_VAR 0 3
25357: PPUSH
25358: LD_INT 6
25360: PPUSH
25361: LD_INT 0
25363: PPUSH
25364: CALL_OW 49
// end ;
25368: GO 25275
25370: POP
25371: POP
// end ; end_of_file
25372: LD_VAR 0 1
25376: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
25377: LD_EXP 46
25381: PUSH
25382: LD_INT 1
25384: EQUAL
25385: IFFALSE 25469
25387: GO 25389
25389: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
25390: LD_INT 7
25392: PPUSH
25393: LD_INT 5
25395: PPUSH
25396: LD_INT 4
25398: PUSH
25399: LD_INT 5
25401: PUSH
25402: LD_INT 6
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: LIST
25409: PUSH
25410: LD_OWVAR 67
25414: ARRAY
25415: PPUSH
25416: LD_EXP 36
25420: PPUSH
25421: LD_EXP 37
25425: PPUSH
25426: CALL_OW 12
25430: PPUSH
25431: LD_INT 2
25433: PPUSH
25434: LD_INT 1
25436: PPUSH
25437: LD_INT 1
25439: PPUSH
25440: EMPTY
25441: PPUSH
25442: LD_INT 25
25444: PUSH
25445: LD_INT 26
25447: PUSH
25448: LD_INT 27
25450: PUSH
25451: LD_INT 28
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: PPUSH
25460: EMPTY
25461: PPUSH
25462: LD_INT 1
25464: PPUSH
25465: CALL 15793 0 11
25469: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25470: LD_EXP 46
25474: PUSH
25475: LD_INT 1
25477: EQUAL
25478: IFFALSE 25566
25480: GO 25482
25482: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 6 , 7 , 8 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
25483: LD_INT 5
25485: PPUSH
25486: LD_INT 2
25488: PPUSH
25489: LD_INT 6
25491: PUSH
25492: LD_INT 7
25494: PUSH
25495: LD_INT 8
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: LIST
25502: PUSH
25503: LD_OWVAR 67
25507: ARRAY
25508: PPUSH
25509: LD_INT 0
25511: PPUSH
25512: LD_INT 0
25514: PPUSH
25515: LD_INT 2
25517: PUSH
25518: LD_INT 4
25520: PUSH
25521: LD_INT 5
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: LIST
25528: PUSH
25529: LD_OWVAR 67
25533: ARRAY
25534: PPUSH
25535: LD_INT 0
25537: PPUSH
25538: LD_EXP 36
25542: PPUSH
25543: LD_EXP 37
25547: PPUSH
25548: CALL_OW 12
25552: PPUSH
25553: LD_INT 7
25555: PPUSH
25556: LD_INT 9
25558: PPUSH
25559: LD_INT 1
25561: PPUSH
25562: CALL 17497 0 11
25566: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25567: LD_EXP 46
25571: PUSH
25572: LD_INT 1
25574: EQUAL
25575: IFFALSE 25584
25577: GO 25579
25579: DISABLE
// PrepareArabianSheik ;
25580: CALL 3812 0 0
25584: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25585: LD_EXP 29
25589: PUSH
25590: LD_EXP 60
25594: PUSH
25595: LD_INT 1
25597: EQUAL
25598: AND
25599: IFFALSE 25668
25601: GO 25603
25603: DISABLE
// begin enable ;
25604: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
25605: LD_INT 6
25607: PPUSH
25608: LD_INT 3
25610: PPUSH
25611: LD_EXP 57
25615: PPUSH
25616: LD_INT 0
25618: PPUSH
25619: LD_OWVAR 67
25623: PPUSH
25624: LD_INT 0
25626: PPUSH
25627: LD_EXP 57
25631: PUSH
25632: LD_INT 3
25634: DIV
25635: PUSH
25636: LD_INT 1
25638: PLUS
25639: PPUSH
25640: LD_EXP 36
25644: PPUSH
25645: LD_EXP 37
25649: PPUSH
25650: CALL_OW 12
25654: PPUSH
25655: LD_INT 17
25657: PPUSH
25658: LD_INT 18
25660: PPUSH
25661: LD_INT 1
25663: PPUSH
25664: CALL 17497 0 11
// end ;
25668: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25669: LD_EXP 29
25673: PUSH
25674: LD_EXP 60
25678: PUSH
25679: LD_INT 1
25681: EQUAL
25682: AND
25683: IFFALSE 25760
25685: GO 25687
25687: DISABLE
// begin enable ;
25688: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
25689: LD_INT 17
25691: PPUSH
25692: LD_INT 6
25694: PPUSH
25695: LD_EXP 56
25699: PPUSH
25700: LD_EXP 36
25704: PPUSH
25705: LD_EXP 37
25709: PPUSH
25710: CALL_OW 12
25714: PPUSH
25715: LD_INT 3
25717: PPUSH
25718: LD_INT 1
25720: PPUSH
25721: LD_INT 3
25723: PUSH
25724: LD_INT 3
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PPUSH
25731: LD_INT 43
25733: PUSH
25734: LD_INT 44
25736: PUSH
25737: LD_INT 45
25739: PUSH
25740: LD_INT 46
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: PPUSH
25749: EMPTY
25750: PPUSH
25751: EMPTY
25752: PPUSH
25753: LD_INT 1
25755: PPUSH
25756: CALL 15793 0 11
// end ;
25760: END
// every 10 10$00 trigger joinEpsilon do
25761: LD_EXP 29
25765: IFFALSE 25819
25767: GO 25769
25769: DISABLE
// begin enable ;
25770: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
25771: LD_ADDR_EXP 56
25775: PUSH
25776: LD_EXP 56
25780: PUSH
25781: LD_INT 1
25783: PPUSH
25784: LD_OWVAR 67
25788: PPUSH
25789: CALL_OW 12
25793: PLUS
25794: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
25795: LD_ADDR_EXP 57
25799: PUSH
25800: LD_EXP 57
25804: PUSH
25805: LD_INT 1
25807: PPUSH
25808: LD_OWVAR 67
25812: PPUSH
25813: CALL_OW 12
25817: PLUS
25818: ST_TO_ADDR
// end ;
25819: END
// every 21 21$0 trigger attackAvalaible = 1 do
25820: LD_EXP 60
25824: PUSH
25825: LD_INT 1
25827: EQUAL
25828: IFFALSE 25841
25830: GO 25832
25832: DISABLE
// attackAvalaible = 0 ; end_of_file
25833: LD_ADDR_EXP 60
25837: PUSH
25838: LD_INT 0
25840: ST_TO_ADDR
25841: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25842: LD_INT 54
25844: PPUSH
25845: LD_INT 1
25847: PPUSH
25848: CALL_OW 321
25852: PUSH
25853: LD_INT 2
25855: EQUAL
25856: PUSH
25857: LD_INT 55
25859: PPUSH
25860: LD_INT 1
25862: PPUSH
25863: CALL_OW 321
25867: PUSH
25868: LD_INT 2
25870: EQUAL
25871: AND
25872: PUSH
25873: LD_INT 21
25875: PPUSH
25876: LD_INT 1
25878: PPUSH
25879: CALL_OW 321
25883: PUSH
25884: LD_INT 2
25886: EQUAL
25887: AND
25888: PUSH
25889: LD_INT 22
25891: PPUSH
25892: LD_INT 1
25894: PPUSH
25895: CALL_OW 321
25899: PUSH
25900: LD_INT 2
25902: EQUAL
25903: AND
25904: PUSH
25905: LD_INT 12
25907: PPUSH
25908: LD_INT 1
25910: PPUSH
25911: CALL_OW 321
25915: PUSH
25916: LD_INT 1
25918: EQUAL
25919: PUSH
25920: LD_INT 32
25922: PPUSH
25923: LD_INT 1
25925: PPUSH
25926: CALL_OW 321
25930: PUSH
25931: LD_INT 1
25933: EQUAL
25934: OR
25935: PUSH
25936: EMPTY
25937: LIST
25938: AND
25939: PUSH
25940: LD_EXP 48
25944: PUSH
25945: LD_INT 1
25947: EQUAL
25948: AND
25949: PUSH
25950: LD_INT 22
25952: PUSH
25953: LD_INT 3
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 21
25962: PUSH
25963: LD_INT 1
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PPUSH
25974: CALL_OW 69
25978: PUSH
25979: LD_INT 0
25981: EQUAL
25982: AND
25983: IFFALSE 26039
25985: GO 25987
25987: DISABLE
// begin case query ( QEndMission ) of 1 :
25988: LD_STRING QEndMission
25990: PPUSH
25991: CALL_OW 97
25995: PUSH
25996: LD_INT 1
25998: DOUBLE
25999: EQUAL
26000: IFTRUE 26004
26002: GO 26015
26004: POP
// begin end_the_mission_allowed = true ;
26005: LD_ADDR_OWVAR 57
26009: PUSH
26010: LD_INT 1
26012: ST_TO_ADDR
// end ; 2 :
26013: GO 26039
26015: LD_INT 2
26017: DOUBLE
26018: EQUAL
26019: IFTRUE 26023
26021: GO 26038
26023: POP
// begin fastEnd = 1 ;
26024: LD_ADDR_EXP 59
26028: PUSH
26029: LD_INT 1
26031: ST_TO_ADDR
// FinishMission ;
26032: CALL 26040 0 0
// end ; end ;
26036: GO 26039
26038: POP
// end ;
26039: END
// export function FinishMission ; begin
26040: LD_INT 0
26042: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
26043: LD_EXP 52
26047: PPUSH
26048: LD_STRING 10_KhatamStatus_1
26050: PPUSH
26051: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
26055: LD_EXP 51
26059: PPUSH
26060: LD_STRING 10_GensherEscape_1
26062: PPUSH
26063: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
26067: LD_INT 12
26069: PPUSH
26070: LD_INT 1
26072: PPUSH
26073: CALL_OW 321
26077: PUSH
26078: LD_INT 2
26080: EQUAL
26081: IFFALSE 26095
// begin AddMedal ( sights , 1 ) ;
26083: LD_STRING sights
26085: PPUSH
26086: LD_INT 1
26088: PPUSH
26089: CALL_OW 101
// end else
26093: GO 26106
// begin AddMedal ( sights , - 1 ) ;
26095: LD_STRING sights
26097: PPUSH
26098: LD_INT 1
26100: NEG
26101: PPUSH
26102: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
26106: LD_INT 32
26108: PPUSH
26109: LD_INT 1
26111: PPUSH
26112: CALL_OW 321
26116: PUSH
26117: LD_INT 2
26119: EQUAL
26120: IFFALSE 26134
// begin AddMedal ( computers , 1 ) ;
26122: LD_STRING computers
26124: PPUSH
26125: LD_INT 1
26127: PPUSH
26128: CALL_OW 101
// end else
26132: GO 26145
// begin AddMedal ( computers , - 1 ) ;
26134: LD_STRING computers
26136: PPUSH
26137: LD_INT 1
26139: NEG
26140: PPUSH
26141: CALL_OW 101
// end ; if arabianEscape = 0 then
26145: LD_EXP 47
26149: PUSH
26150: LD_INT 0
26152: EQUAL
26153: IFFALSE 26177
// begin AddMedal ( renegades , 2 ) ;
26155: LD_STRING renegades
26157: PPUSH
26158: LD_INT 2
26160: PPUSH
26161: CALL_OW 101
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
26165: LD_INT 0
26167: PPUSH
26168: LD_STRING 10_ScientistsEscape_1
26170: PPUSH
26171: CALL_OW 39
// end else
26175: GO 26188
// begin AddMedal ( renegades , - 1 ) ;
26177: LD_STRING renegades
26179: PPUSH
26180: LD_INT 1
26182: NEG
26183: PPUSH
26184: CALL_OW 101
// end ; SaveEpsilonBase ;
26188: CALL 26912 0 0
// GiveMedals ( Main ) ;
26192: LD_STRING Main
26194: PPUSH
26195: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
26199: LD_INT 22
26201: PUSH
26202: LD_INT 1
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 23
26211: PUSH
26212: LD_INT 1
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 21
26221: PUSH
26222: LD_INT 1
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 2
26231: PUSH
26232: LD_INT 25
26234: PUSH
26235: LD_INT 1
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 25
26244: PUSH
26245: LD_INT 2
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 25
26254: PUSH
26255: LD_INT 3
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 25
26264: PUSH
26265: LD_INT 4
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 25
26274: PUSH
26275: LD_INT 5
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 25
26284: PUSH
26285: LD_INT 8
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: PPUSH
26307: CALL_OW 69
26311: PPUSH
26312: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
26316: LD_EXP 1
26320: PPUSH
26321: LD_EXP 53
26325: PUSH
26326: LD_STRING JMM
26328: STR
26329: PPUSH
26330: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
26334: LD_EXP 2
26338: PPUSH
26339: LD_EXP 53
26343: PUSH
26344: LD_STRING Brown
26346: STR
26347: PPUSH
26348: CALL 9963 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
26352: LD_EXP 3
26356: PPUSH
26357: LD_EXP 53
26361: PUSH
26362: LD_STRING Donaldson
26364: STR
26365: PPUSH
26366: CALL 9963 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
26370: LD_EXP 4
26374: PPUSH
26375: LD_EXP 53
26379: PUSH
26380: LD_STRING Bobby
26382: STR
26383: PPUSH
26384: CALL 9963 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26388: LD_EXP 5
26392: PPUSH
26393: LD_EXP 53
26397: PUSH
26398: LD_STRING Cyrus
26400: STR
26401: PPUSH
26402: CALL 9963 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26406: LD_EXP 6
26410: PPUSH
26411: LD_EXP 53
26415: PUSH
26416: LD_STRING Lisa
26418: STR
26419: PPUSH
26420: CALL 9963 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26424: LD_EXP 7
26428: PPUSH
26429: LD_EXP 53
26433: PUSH
26434: LD_STRING Frank
26436: STR
26437: PPUSH
26438: CALL 9963 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26442: LD_EXP 8
26446: PPUSH
26447: LD_EXP 53
26451: PUSH
26452: LD_STRING Kikuchi
26454: STR
26455: PPUSH
26456: CALL 9963 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26460: LD_EXP 9
26464: PPUSH
26465: LD_EXP 53
26469: PUSH
26470: LD_STRING Houten
26472: STR
26473: PPUSH
26474: CALL 9963 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
26478: LD_EXP 10
26482: PPUSH
26483: LD_EXP 53
26487: PUSH
26488: LD_STRING Gary
26490: STR
26491: PPUSH
26492: CALL 9963 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
26496: LD_EXP 19
26500: PPUSH
26501: LD_EXP 53
26505: PUSH
26506: LD_STRING Cornell
26508: STR
26509: PPUSH
26510: CALL 9963 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
26514: LD_EXP 11
26518: PPUSH
26519: LD_EXP 53
26523: PUSH
26524: LD_STRING Simms
26526: STR
26527: PPUSH
26528: CALL 9963 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26532: LD_EXP 12
26536: PPUSH
26537: LD_EXP 53
26541: PUSH
26542: LD_STRING Denis
26544: STR
26545: PPUSH
26546: CALL 9963 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26550: LD_EXP 13
26554: PPUSH
26555: LD_EXP 53
26559: PUSH
26560: LD_STRING Joan
26562: STR
26563: PPUSH
26564: CALL 9963 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26568: LD_EXP 15
26572: PPUSH
26573: LD_EXP 53
26577: PUSH
26578: LD_STRING Gladstone
26580: STR
26581: PPUSH
26582: CALL 9963 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
26586: LD_EXP 17
26590: PPUSH
26591: LD_EXP 53
26595: PUSH
26596: LD_STRING DeltaDoctor
26598: STR
26599: PPUSH
26600: CALL 9963 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
26604: LD_EXP 22
26608: PPUSH
26609: LD_STRING 10c_lock
26611: PPUSH
26612: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
26616: LD_INT 50
26618: PUSH
26619: EMPTY
26620: LIST
26621: PUSH
26622: LD_INT 22
26624: PUSH
26625: LD_INT 1
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 21
26634: PUSH
26635: LD_INT 1
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 2
26644: PUSH
26645: LD_INT 25
26647: PUSH
26648: LD_INT 1
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 25
26657: PUSH
26658: LD_INT 2
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 25
26667: PUSH
26668: LD_INT 3
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 25
26677: PUSH
26678: LD_INT 4
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 25
26687: PUSH
26688: LD_INT 5
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 25
26697: PUSH
26698: LD_INT 8
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: PPUSH
26720: CALL_OW 69
26724: PUSH
26725: LD_EXP 1
26729: PUSH
26730: LD_EXP 2
26734: PUSH
26735: LD_EXP 3
26739: PUSH
26740: LD_EXP 4
26744: PUSH
26745: LD_EXP 5
26749: PUSH
26750: LD_EXP 6
26754: PUSH
26755: LD_EXP 7
26759: PUSH
26760: LD_EXP 15
26764: PUSH
26765: LD_EXP 8
26769: PUSH
26770: LD_EXP 12
26774: PUSH
26775: LD_EXP 13
26779: PUSH
26780: LD_EXP 9
26784: PUSH
26785: LD_EXP 11
26789: PUSH
26790: LD_EXP 10
26794: PUSH
26795: LD_EXP 17
26799: PUSH
26800: LD_EXP 19
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: DIFF
26823: PPUSH
26824: LD_STRING 10_other_survivors
26826: PPUSH
26827: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
26831: LD_INT 50
26833: PUSH
26834: EMPTY
26835: LIST
26836: PUSH
26837: LD_INT 22
26839: PUSH
26840: LD_INT 1
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 21
26849: PUSH
26850: LD_INT 1
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 2
26859: PUSH
26860: LD_INT 25
26862: PUSH
26863: LD_INT 16
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 25
26872: PUSH
26873: LD_INT 12
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: LIST
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: PPUSH
26891: CALL_OW 69
26895: PPUSH
26896: LD_STRING 10_ape
26898: PPUSH
26899: CALL_OW 38
// YouWin ;
26903: CALL_OW 103
// end ;
26907: LD_VAR 0 1
26911: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
26912: LD_INT 0
26914: PPUSH
26915: PPUSH
26916: PPUSH
26917: PPUSH
// epsilonBase = [ ] ;
26918: LD_ADDR_VAR 0 2
26922: PUSH
26923: EMPTY
26924: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26925: LD_ADDR_VAR 0 3
26929: PUSH
26930: LD_INT 22
26932: PUSH
26933: LD_INT 1
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 23
26942: PUSH
26943: LD_INT 1
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 21
26952: PUSH
26953: LD_INT 3
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 50
26962: PUSH
26963: EMPTY
26964: LIST
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: PPUSH
26972: CALL_OW 69
26976: ST_TO_ADDR
// for i in buildings do
26977: LD_ADDR_VAR 0 4
26981: PUSH
26982: LD_VAR 0 3
26986: PUSH
26987: FOR_IN
26988: IFFALSE 27440
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26990: LD_VAR 0 4
26994: PPUSH
26995: CALL_OW 266
26999: PUSH
27000: LD_INT 6
27002: PUSH
27003: LD_INT 7
27005: PUSH
27006: LD_INT 8
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: LIST
27013: IN
27014: IFFALSE 27128
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
27016: LD_ADDR_VAR 0 2
27020: PUSH
27021: LD_VAR 0 2
27025: PUSH
27026: LD_VAR 0 4
27030: PPUSH
27031: CALL_OW 266
27035: PUSH
27036: LD_VAR 0 4
27040: PPUSH
27041: CALL_OW 250
27045: PUSH
27046: LD_VAR 0 4
27050: PPUSH
27051: CALL_OW 251
27055: PUSH
27056: LD_VAR 0 4
27060: PPUSH
27061: CALL_OW 254
27065: PUSH
27066: LD_VAR 0 4
27070: PPUSH
27071: CALL_OW 267
27075: PUSH
27076: LD_VAR 0 4
27080: PPUSH
27081: CALL_OW 248
27085: PUSH
27086: LD_VAR 0 4
27090: PPUSH
27091: LD_INT 1
27093: PPUSH
27094: CALL_OW 268
27098: PUSH
27099: LD_VAR 0 4
27103: PPUSH
27104: LD_INT 2
27106: PPUSH
27107: CALL_OW 268
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: PUSH
27122: EMPTY
27123: LIST
27124: ADD
27125: ST_TO_ADDR
27126: GO 27438
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
27128: LD_VAR 0 4
27132: PPUSH
27133: CALL_OW 266
27137: PUSH
27138: LD_INT 32
27140: EQUAL
27141: PUSH
27142: LD_VAR 0 4
27146: PPUSH
27147: CALL_OW 266
27151: PUSH
27152: LD_INT 33
27154: EQUAL
27155: OR
27156: IFFALSE 27253
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
27158: LD_ADDR_VAR 0 2
27162: PUSH
27163: LD_VAR 0 2
27167: PUSH
27168: LD_VAR 0 4
27172: PPUSH
27173: CALL_OW 266
27177: PUSH
27178: LD_VAR 0 4
27182: PPUSH
27183: CALL_OW 250
27187: PUSH
27188: LD_VAR 0 4
27192: PPUSH
27193: CALL_OW 251
27197: PUSH
27198: LD_VAR 0 4
27202: PPUSH
27203: CALL_OW 254
27207: PUSH
27208: LD_VAR 0 4
27212: PPUSH
27213: CALL_OW 267
27217: PUSH
27218: LD_VAR 0 4
27222: PPUSH
27223: CALL_OW 248
27227: PUSH
27228: LD_VAR 0 4
27232: PPUSH
27233: CALL_OW 269
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: PUSH
27247: EMPTY
27248: LIST
27249: ADD
27250: ST_TO_ADDR
27251: GO 27438
// if GetBType ( i ) = b_factory then
27253: LD_VAR 0 4
27257: PPUSH
27258: CALL_OW 266
27262: PUSH
27263: LD_INT 3
27265: EQUAL
27266: IFFALSE 27356
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
27268: LD_ADDR_VAR 0 2
27272: PUSH
27273: LD_VAR 0 2
27277: PPUSH
27278: LD_INT 1
27280: PPUSH
27281: LD_VAR 0 4
27285: PPUSH
27286: CALL_OW 266
27290: PUSH
27291: LD_VAR 0 4
27295: PPUSH
27296: CALL_OW 250
27300: PUSH
27301: LD_VAR 0 4
27305: PPUSH
27306: CALL_OW 251
27310: PUSH
27311: LD_VAR 0 4
27315: PPUSH
27316: CALL_OW 254
27320: PUSH
27321: LD_VAR 0 4
27325: PPUSH
27326: CALL_OW 267
27330: PUSH
27331: LD_VAR 0 4
27335: PPUSH
27336: CALL_OW 248
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: PPUSH
27349: CALL_OW 2
27353: ST_TO_ADDR
27354: GO 27438
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
27356: LD_ADDR_VAR 0 2
27360: PUSH
27361: LD_VAR 0 2
27365: PUSH
27366: LD_VAR 0 4
27370: PPUSH
27371: CALL_OW 266
27375: PUSH
27376: LD_VAR 0 4
27380: PPUSH
27381: CALL_OW 250
27385: PUSH
27386: LD_VAR 0 4
27390: PPUSH
27391: CALL_OW 251
27395: PUSH
27396: LD_VAR 0 4
27400: PPUSH
27401: CALL_OW 254
27405: PUSH
27406: LD_VAR 0 4
27410: PPUSH
27411: CALL_OW 267
27415: PUSH
27416: LD_VAR 0 4
27420: PPUSH
27421: CALL_OW 248
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: PUSH
27434: EMPTY
27435: LIST
27436: ADD
27437: ST_TO_ADDR
// end ;
27438: GO 26987
27440: POP
27441: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
27442: LD_VAR 0 2
27446: PPUSH
27447: LD_STRING 10_EpsilonBase
27449: PPUSH
27450: CALL_OW 39
// end ; end_of_file
27454: LD_VAR 0 1
27458: RET
// every 0 0$01 do var timer ;
27459: GO 27461
27461: DISABLE
27462: LD_INT 0
27464: PPUSH
// begin timer := 0 0$30 ;
27465: LD_ADDR_VAR 0 1
27469: PUSH
27470: LD_INT 1050
27472: ST_TO_ADDR
// repeat wait ( timer ) ;
27473: LD_VAR 0 1
27477: PPUSH
27478: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
27482: LD_EXP 55
27486: PUSH
27487: LD_INT 6
27489: GREATEREQUAL
27490: PUSH
27491: LD_EXP 55
27495: PUSH
27496: LD_INT 12
27498: LESS
27499: AND
27500: IFFALSE 27516
// timer := timer + 0 0$3 ;
27502: LD_ADDR_VAR 0 1
27506: PUSH
27507: LD_VAR 0 1
27511: PUSH
27512: LD_INT 105
27514: PLUS
27515: ST_TO_ADDR
// if cratesSpawned >= 12 then
27516: LD_EXP 55
27520: PUSH
27521: LD_INT 12
27523: GREATEREQUAL
27524: IFFALSE 27540
// timer := timer + 0 0$9 ;
27526: LD_ADDR_VAR 0 1
27530: PUSH
27531: LD_VAR 0 1
27535: PUSH
27536: LD_INT 315
27538: PLUS
27539: ST_TO_ADDR
// if timer > 3 3$00 then
27540: LD_VAR 0 1
27544: PUSH
27545: LD_INT 6300
27547: GREATER
27548: IFFALSE 27558
// timer := 0 0$50 ;
27550: LD_ADDR_VAR 0 1
27554: PUSH
27555: LD_INT 1750
27557: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
27558: LD_INT 1
27560: PPUSH
27561: LD_INT 5
27563: PPUSH
27564: CALL_OW 12
27568: PPUSH
27569: LD_INT 16
27571: PPUSH
27572: LD_INT 1
27574: PPUSH
27575: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27579: LD_ADDR_EXP 55
27583: PUSH
27584: LD_EXP 55
27588: PUSH
27589: LD_INT 1
27591: PLUS
27592: ST_TO_ADDR
// until false ;
27593: LD_INT 0
27595: IFFALSE 27473
// end ;
27597: PPOPN 1
27599: END
