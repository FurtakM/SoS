// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 115 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 33
// Difficulty := 3 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 3
  32: ST_TO_ADDR
// PrepareArabian ;
  33: CALL 3425 0 0
// PrepareAmerican ;
  37: CALL 1057 0 0
// PrepareRussian ;
  41: CALL 8776 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  45: LD_INT 4
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 4
  53: PUSH
  54: LD_INT 5
  56: PUSH
  57: LD_INT 5
  59: PUSH
  60: LD_INT 5
  62: PUSH
  63: EMPTY
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: PUSH
  69: LD_OWVAR 67
  73: ARRAY
  74: PPUSH
  75: LD_INT 2
  77: PPUSH
  78: LD_INT 1
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 2
  86: PPUSH
  87: LD_INT 1
  89: PPUSH
  90: LD_INT 2
  92: PPUSH
  93: CALL 90498 0 9
// Action ;
  97: CALL 25541 0 0
// if debug then
 101: LD_EXP 1
 105: IFFALSE 114
// FogOff ( 1 ) ;
 107: LD_INT 1
 109: PPUSH
 110: CALL_OW 344
// end ;
 114: END
// export debug , mission_prefix , arBaseActive , arabianAttack , khatamStatus , seenRussianTeleport , joinedToEpsilon , arabianDefeated , hasBase , epsilon , escapeKhatam , arabianAttackSpawned , gensherEscaped , ruScriptActive , ruScriptActive2 , firstAttack , dialogRussianSpaceAmmo , russianWaveAttack , spawnedRussians , hasSniper , arabianEscapedCounter , ruActiveAttacks ; function Init ; begin
 115: LD_INT 0
 117: PPUSH
// debug := false ;
 118: LD_ADDR_EXP 1
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// mission_prefix := 08c_ ;
 126: LD_ADDR_EXP 2
 130: PUSH
 131: LD_STRING 08c_
 133: ST_TO_ADDR
// arBaseActive := true ;
 134: LD_ADDR_EXP 3
 138: PUSH
 139: LD_INT 1
 141: ST_TO_ADDR
// arabianAttack := false ;
 142: LD_ADDR_EXP 4
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// khatamStatus := false ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// seenRussianTeleport := false ;
 158: LD_ADDR_EXP 6
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// joinedToEpsilon := false ;
 166: LD_ADDR_EXP 7
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// arabianDefeated := false ;
 174: LD_ADDR_EXP 8
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// arabianAttackSpawned := false ;
 182: LD_ADDR_EXP 12
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// gensherEscaped := false ;
 190: LD_ADDR_EXP 13
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// hasBase := false ;
 198: LD_ADDR_EXP 9
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// epsilon := 0 ;
 206: LD_ADDR_EXP 10
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// escapeKhatam := false ;
 214: LD_ADDR_EXP 11
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// ruScriptActive := false ;
 222: LD_ADDR_EXP 14
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// ruScriptActive2 := false ;
 230: LD_ADDR_EXP 15
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// firstAttack := false ;
 238: LD_ADDR_EXP 16
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// dialogRussianSpaceAmmo := false ;
 246: LD_ADDR_EXP 17
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// russianWaveAttack := 0 ;
 254: LD_ADDR_EXP 18
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// spawnedRussians := false ;
 262: LD_ADDR_EXP 19
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// hasSniper := false ;
 270: LD_ADDR_EXP 20
 274: PUSH
 275: LD_INT 0
 277: ST_TO_ADDR
// arabianEscapedCounter := 0 ;
 278: LD_ADDR_EXP 21
 282: PUSH
 283: LD_INT 0
 285: ST_TO_ADDR
// ruActiveAttacks := false ;
 286: LD_ADDR_EXP 22
 290: PUSH
 291: LD_INT 0
 293: ST_TO_ADDR
// ruTransportDestroyed := false ;
 294: LD_ADDR_EXP 78
 298: PUSH
 299: LD_INT 0
 301: ST_TO_ADDR
// end ;
 302: LD_VAR 0 1
 306: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) do
 307: LD_INT 22
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 25
 319: PUSH
 320: LD_INT 5
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PPUSH
 331: CALL_OW 69
 335: IFFALSE 348
 337: GO 339
 339: DISABLE
// hasSniper := true ;
 340: LD_ADDR_EXP 20
 344: PUSH
 345: LD_INT 1
 347: ST_TO_ADDR
 348: END
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and not arabianAttack and spawnedRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 349: LD_INT 1
 351: PPUSH
 352: LD_INT 2
 354: PPUSH
 355: CALL_OW 81
 359: PUSH
 360: LD_INT 1
 362: EQUAL
 363: IFFALSE 372
 365: PUSH
 366: LD_EXP 4
 370: NOT
 371: AND
 372: IFFALSE 380
 374: PUSH
 375: LD_EXP 19
 379: AND
 380: IFFALSE 402
 382: PUSH
 383: LD_INT 22
 385: PUSH
 386: LD_INT 3
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PPUSH
 393: CALL_OW 69
 397: PUSH
 398: LD_INT 0
 400: EQUAL
 401: AND
 402: IFFALSE 414
 404: GO 406
 406: DISABLE
// SetAchievement ( ACH_POWER ) ;
 407: LD_STRING ACH_POWER
 409: PPUSH
 410: CALL_OW 543
 414: END
// every 0 0$1 trigger spawnedRussians and not ruBase and not ruBase2 and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 415: LD_EXP 19
 419: IFFALSE 428
 421: PUSH
 422: LD_EXP 68
 426: NOT
 427: AND
 428: IFFALSE 437
 430: PUSH
 431: LD_EXP 69
 435: NOT
 436: AND
 437: IFFALSE 459
 439: PUSH
 440: LD_INT 22
 442: PUSH
 443: LD_INT 3
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: LD_INT 0
 457: EQUAL
 458: AND
 459: IFFALSE 471
 461: GO 463
 463: DISABLE
// SetAchievement ( ACH_TACT ) ;
 464: LD_STRING ACH_TACT
 466: PPUSH
 467: CALL_OW 543
 471: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 472: LD_INT 22
 474: PUSH
 475: LD_INT 1
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: PUSH
 482: LD_INT 30
 484: PUSH
 485: LD_INT 1
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: PPUSH
 496: CALL_OW 69
 500: IFFALSE 532
 502: PUSH
 503: LD_INT 22
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: LD_INT 30
 515: PUSH
 516: LD_INT 32
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: EMPTY
 524: LIST
 525: LIST
 526: PPUSH
 527: CALL_OW 69
 531: AND
 532: IFFALSE 564
 534: PUSH
 535: LD_INT 22
 537: PUSH
 538: LD_INT 1
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: PUSH
 545: LD_INT 30
 547: PUSH
 548: LD_INT 33
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PPUSH
 559: CALL_OW 69
 563: AND
 564: IFFALSE 596
 566: PUSH
 567: LD_INT 22
 569: PUSH
 570: LD_INT 1
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: PUSH
 577: LD_INT 30
 579: PUSH
 580: LD_INT 5
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PPUSH
 591: CALL_OW 69
 595: AND
 596: IFFALSE 628
 598: PUSH
 599: LD_INT 22
 601: PUSH
 602: LD_INT 1
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: PUSH
 609: LD_INT 30
 611: PUSH
 612: LD_INT 3
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: PPUSH
 623: CALL_OW 69
 627: AND
 628: IFFALSE 660
 630: PUSH
 631: LD_INT 22
 633: PUSH
 634: LD_INT 1
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: PUSH
 641: LD_INT 30
 643: PUSH
 644: LD_INT 36
 646: PUSH
 647: EMPTY
 648: LIST
 649: LIST
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: PPUSH
 655: CALL_OW 69
 659: AND
 660: IFFALSE 692
 662: PUSH
 663: LD_INT 22
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: PUSH
 673: LD_INT 30
 675: PUSH
 676: LD_INT 31
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: PPUSH
 687: CALL_OW 69
 691: AND
 692: IFFALSE 724
 694: PUSH
 695: LD_INT 22
 697: PUSH
 698: LD_INT 1
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: PUSH
 705: LD_INT 30
 707: PUSH
 708: LD_INT 22
 710: PUSH
 711: EMPTY
 712: LIST
 713: LIST
 714: PUSH
 715: EMPTY
 716: LIST
 717: LIST
 718: PPUSH
 719: CALL_OW 69
 723: AND
 724: IFFALSE 756
 726: PUSH
 727: LD_INT 22
 729: PUSH
 730: LD_INT 1
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: LD_INT 30
 739: PUSH
 740: LD_INT 20
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: PPUSH
 751: CALL_OW 69
 755: AND
 756: IFFALSE 788
 758: PUSH
 759: LD_INT 22
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: PUSH
 769: LD_INT 30
 771: PUSH
 772: LD_INT 19
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PPUSH
 783: CALL_OW 69
 787: AND
 788: IFFALSE 820
 790: PUSH
 791: LD_INT 22
 793: PUSH
 794: LD_INT 1
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: PUSH
 801: LD_INT 30
 803: PUSH
 804: LD_INT 16
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: EMPTY
 812: LIST
 813: LIST
 814: PPUSH
 815: CALL_OW 69
 819: AND
 820: IFFALSE 852
 822: PUSH
 823: LD_INT 22
 825: PUSH
 826: LD_INT 1
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 30
 835: PUSH
 836: LD_INT 17
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: PPUSH
 847: CALL_OW 69
 851: AND
 852: IFFALSE 884
 854: PUSH
 855: LD_INT 22
 857: PUSH
 858: LD_INT 1
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 30
 867: PUSH
 868: LD_INT 21
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: PPUSH
 879: CALL_OW 69
 883: AND
 884: IFFALSE 916
 886: PUSH
 887: LD_INT 22
 889: PUSH
 890: LD_INT 1
 892: PUSH
 893: EMPTY
 894: LIST
 895: LIST
 896: PUSH
 897: LD_INT 30
 899: PUSH
 900: LD_INT 29
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: PPUSH
 911: CALL_OW 69
 915: AND
 916: IFFALSE 948
 918: PUSH
 919: LD_INT 22
 921: PUSH
 922: LD_INT 1
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 30
 931: PUSH
 932: LD_INT 30
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: EMPTY
 940: LIST
 941: LIST
 942: PPUSH
 943: CALL_OW 69
 947: AND
 948: IFFALSE 980
 950: PUSH
 951: LD_INT 22
 953: PUSH
 954: LD_INT 1
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_INT 30
 963: PUSH
 964: LD_INT 27
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PPUSH
 975: CALL_OW 69
 979: AND
 980: IFFALSE 1012
 982: PUSH
 983: LD_INT 22
 985: PUSH
 986: LD_INT 1
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 30
 995: PUSH
 996: LD_INT 26
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: PPUSH
1007: CALL_OW 69
1011: AND
1012: IFFALSE 1044
1014: PUSH
1015: LD_INT 22
1017: PUSH
1018: LD_INT 1
1020: PUSH
1021: EMPTY
1022: LIST
1023: LIST
1024: PUSH
1025: LD_INT 30
1027: PUSH
1028: LD_INT 28
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: PPUSH
1039: CALL_OW 69
1043: AND
1044: IFFALSE 1056
1046: GO 1048
1048: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1049: LD_STRING ACH_ARCH
1051: PPUSH
1052: CALL_OW 543
1056: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Mike ; export Cornell , Truman , Powell ; export JMMSquad , others , others09 , ape09 ; export function PrepareAmerican ; var i , j , veh , vehs , sibRes , tmp , amount ; begin
1057: LD_INT 0
1059: PPUSH
1060: PPUSH
1061: PPUSH
1062: PPUSH
1063: PPUSH
1064: PPUSH
1065: PPUSH
1066: PPUSH
// uc_nation := nation_american ;
1067: LD_ADDR_OWVAR 21
1071: PUSH
1072: LD_INT 1
1074: ST_TO_ADDR
// uc_side := 4 ;
1075: LD_ADDR_OWVAR 20
1079: PUSH
1080: LD_INT 4
1082: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1083: LD_ADDR_EXP 44
1087: PUSH
1088: LD_STRING Powell
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: LD_STRING 
1096: PPUSH
1097: CALL 55715 0 3
1101: ST_TO_ADDR
// uc_side := 1 ;
1102: LD_ADDR_OWVAR 20
1106: PUSH
1107: LD_INT 1
1109: ST_TO_ADDR
// JMMSquad := [ ] ;
1110: LD_ADDR_EXP 45
1114: PUSH
1115: EMPTY
1116: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 10_ ) ;
1117: LD_ADDR_EXP 23
1121: PUSH
1122: LD_STRING JMM
1124: PPUSH
1125: LD_EXP 1
1129: NOT
1130: PPUSH
1131: LD_STRING 10_
1133: PPUSH
1134: CALL 55715 0 3
1138: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 10_ ) ;
1139: LD_ADDR_EXP 32
1143: PUSH
1144: LD_STRING Gary
1146: PPUSH
1147: LD_EXP 1
1151: NOT
1152: PPUSH
1153: LD_STRING 10_
1155: PPUSH
1156: CALL 55715 0 3
1160: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 10_ ) ;
1161: LD_ADDR_EXP 27
1165: PUSH
1166: LD_STRING Cyrus
1168: PPUSH
1169: LD_EXP 1
1173: NOT
1174: PPUSH
1175: LD_STRING 10_
1177: PPUSH
1178: CALL 55715 0 3
1182: ST_TO_ADDR
// if Cyrus then
1183: LD_EXP 27
1187: IFFALSE 1205
// JMMSquad := JMMSquad ^ Cyrus ;
1189: LD_ADDR_EXP 45
1193: PUSH
1194: LD_EXP 45
1198: PUSH
1199: LD_EXP 27
1203: ADD
1204: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 10_ ) ;
1205: LD_ADDR_EXP 26
1209: PUSH
1210: LD_STRING Bobby
1212: PPUSH
1213: LD_EXP 1
1217: NOT
1218: PPUSH
1219: LD_STRING 10_
1221: PPUSH
1222: CALL 55715 0 3
1226: ST_TO_ADDR
// if Bobby then
1227: LD_EXP 26
1231: IFFALSE 1249
// JMMSquad := JMMSquad ^ Bobby ;
1233: LD_ADDR_EXP 45
1237: PUSH
1238: LD_EXP 45
1242: PUSH
1243: LD_EXP 26
1247: ADD
1248: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 10_ ) ;
1249: LD_ADDR_EXP 28
1253: PUSH
1254: LD_STRING Lisa
1256: PPUSH
1257: LD_EXP 1
1261: NOT
1262: PPUSH
1263: LD_STRING 10_
1265: PPUSH
1266: CALL 55715 0 3
1270: ST_TO_ADDR
// if Lisa then
1271: LD_EXP 28
1275: IFFALSE 1293
// JMMSquad := JMMSquad ^ Lisa ;
1277: LD_ADDR_EXP 45
1281: PUSH
1282: LD_EXP 45
1286: PUSH
1287: LD_EXP 28
1291: ADD
1292: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 10_ ) ;
1293: LD_ADDR_EXP 24
1297: PUSH
1298: LD_STRING Brown
1300: PPUSH
1301: LD_EXP 1
1305: NOT
1306: PPUSH
1307: LD_STRING 10_
1309: PPUSH
1310: CALL 55715 0 3
1314: ST_TO_ADDR
// if Brown then
1315: LD_EXP 24
1319: IFFALSE 1337
// JMMSquad := JMMSquad ^ Brown ;
1321: LD_ADDR_EXP 45
1325: PUSH
1326: LD_EXP 45
1330: PUSH
1331: LD_EXP 24
1335: ADD
1336: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 10_ ) ;
1337: LD_ADDR_EXP 25
1341: PUSH
1342: LD_STRING Donaldson
1344: PPUSH
1345: LD_EXP 1
1349: NOT
1350: PPUSH
1351: LD_STRING 10_
1353: PPUSH
1354: CALL 55715 0 3
1358: ST_TO_ADDR
// if Donaldson then
1359: LD_EXP 25
1363: IFFALSE 1381
// JMMSquad := JMMSquad ^ Donaldson ;
1365: LD_ADDR_EXP 45
1369: PUSH
1370: LD_EXP 45
1374: PUSH
1375: LD_EXP 25
1379: ADD
1380: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 10_ ) ;
1381: LD_ADDR_EXP 29
1385: PUSH
1386: LD_STRING Frank
1388: PPUSH
1389: LD_EXP 1
1393: NOT
1394: PPUSH
1395: LD_STRING 10_
1397: PPUSH
1398: CALL 55715 0 3
1402: ST_TO_ADDR
// if Frank then
1403: LD_EXP 29
1407: IFFALSE 1425
// JMMSquad := JMMSquad ^ Frank ;
1409: LD_ADDR_EXP 45
1413: PUSH
1414: LD_EXP 45
1418: PUSH
1419: LD_EXP 29
1423: ADD
1424: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 10_ ) ;
1425: LD_ADDR_EXP 31
1429: PUSH
1430: LD_STRING Houten
1432: PPUSH
1433: LD_EXP 1
1437: NOT
1438: PPUSH
1439: LD_STRING 10_
1441: PPUSH
1442: CALL 55715 0 3
1446: ST_TO_ADDR
// if Houten then
1447: LD_EXP 31
1451: IFFALSE 1469
// JMMSquad := JMMSquad ^ Houten ;
1453: LD_ADDR_EXP 45
1457: PUSH
1458: LD_EXP 45
1462: PUSH
1463: LD_EXP 31
1467: ADD
1468: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn10 ) ;
1469: LD_ADDR_EXP 46
1473: PUSH
1474: LD_STRING OthersIn10
1476: PPUSH
1477: CALL_OW 31
1481: ST_TO_ADDR
// if Count ( JMMSquad ) + Count ( others ) < 9 then
1482: LD_EXP 45
1486: PPUSH
1487: CALL 57915 0 1
1491: PUSH
1492: LD_EXP 46
1496: PPUSH
1497: CALL 57915 0 1
1501: PLUS
1502: PUSH
1503: LD_INT 9
1505: LESS
1506: IFFALSE 1593
// begin InitHC_All ( ) ;
1508: CALL_OW 584
// for i := 9 downto Count ( JMMSquad ) + Count ( others ) do
1512: LD_ADDR_VAR 0 2
1516: PUSH
1517: DOUBLE
1518: LD_INT 9
1520: INC
1521: ST_TO_ADDR
1522: LD_EXP 45
1526: PPUSH
1527: CALL 57915 0 1
1531: PUSH
1532: LD_EXP 46
1536: PPUSH
1537: CALL 57915 0 1
1541: PLUS
1542: PUSH
1543: FOR_DOWNTO
1544: IFFALSE 1591
// begin PrepareHuman ( false , i mod 4 + 1 , 5 ) ;
1546: LD_INT 0
1548: PPUSH
1549: LD_VAR 0 2
1553: PUSH
1554: LD_INT 4
1556: MOD
1557: PUSH
1558: LD_INT 1
1560: PLUS
1561: PPUSH
1562: LD_INT 5
1564: PPUSH
1565: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1569: LD_ADDR_EXP 46
1573: PUSH
1574: LD_EXP 46
1578: PPUSH
1579: CALL_OW 44
1583: PPUSH
1584: CALL 93847 0 2
1588: ST_TO_ADDR
// end ;
1589: GO 1543
1591: POP
1592: POP
// end ; if debug then
1593: LD_EXP 1
1597: IFFALSE 1638
// result := [ Cyrus , Bobby , Lisa , Donaldson , Brown ] else
1599: LD_ADDR_VAR 0 1
1603: PUSH
1604: LD_EXP 27
1608: PUSH
1609: LD_EXP 26
1613: PUSH
1614: LD_EXP 28
1618: PUSH
1619: LD_EXP 25
1623: PUSH
1624: LD_EXP 24
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: ST_TO_ADDR
1636: GO 1801
// result := CharacterSelection ( 1 , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ sel_not_changeable , sel_hired , sel_change_class ] ^ JMM ^ Gary ^ [ sel_not_hired , sel_changeable , sel_change_class ] ^ JMMSquad ^ others ^ [ sel_not_changeable , sel_not_hired ] ^ Powell , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , class_scientistic ] ) ;
1638: LD_ADDR_VAR 0 1
1642: PUSH
1643: LD_STRING 1
1645: PPUSH
1646: LD_INT 6
1648: PUSH
1649: LD_INT 5
1651: PUSH
1652: LD_INT 4
1654: PUSH
1655: LD_INT 4
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: PUSH
1664: LD_OWVAR 67
1668: ARRAY
1669: PPUSH
1670: LD_INT 6
1672: PUSH
1673: LD_INT 5
1675: PUSH
1676: LD_INT 4
1678: PUSH
1679: LD_INT 4
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: PUSH
1688: LD_OWVAR 67
1692: ARRAY
1693: PPUSH
1694: LD_INT -4
1696: PUSH
1697: LD_INT -1
1699: PUSH
1700: LD_INT -5
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: LIST
1707: PUSH
1708: LD_EXP 23
1712: ADD
1713: PUSH
1714: LD_EXP 32
1718: ADD
1719: PUSH
1720: LD_INT -2
1722: PUSH
1723: LD_INT -3
1725: PUSH
1726: LD_INT -5
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: ADD
1734: PUSH
1735: LD_EXP 45
1739: ADD
1740: PUSH
1741: LD_EXP 46
1745: ADD
1746: PUSH
1747: LD_INT -4
1749: PUSH
1750: LD_INT -2
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: ADD
1757: PUSH
1758: LD_EXP 44
1762: ADD
1763: PPUSH
1764: LD_INT 1
1766: PUSH
1767: LD_INT 3
1769: PUSH
1770: LD_INT 1
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: PUSH
1777: LD_INT 2
1779: PUSH
1780: LD_INT 1
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 4
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: PPUSH
1796: CALL_OW 42
1800: ST_TO_ADDR
// result := JoinUnion ( result , JMM ) ;
1801: LD_ADDR_VAR 0 1
1805: PUSH
1806: LD_VAR 0 1
1810: PPUSH
1811: LD_EXP 23
1815: PPUSH
1816: CALL 93884 0 2
1820: ST_TO_ADDR
// if Gary then
1821: LD_EXP 32
1825: IFFALSE 1847
// result := JoinUnion ( result , Gary ) ;
1827: LD_ADDR_VAR 0 1
1831: PUSH
1832: LD_VAR 0 1
1836: PPUSH
1837: LD_EXP 32
1841: PPUSH
1842: CALL 93884 0 2
1846: ST_TO_ADDR
// if Count ( others ) then
1847: LD_EXP 46
1851: PPUSH
1852: CALL 57915 0 1
1856: IFFALSE 1874
// others := others diff result ;
1858: LD_ADDR_EXP 46
1862: PUSH
1863: LD_EXP 46
1867: PUSH
1868: LD_VAR 0 1
1872: DIFF
1873: ST_TO_ADDR
// vehs := [ ] ;
1874: LD_ADDR_VAR 0 5
1878: PUSH
1879: EMPTY
1880: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1881: LD_INT 2
1883: PPUSH
1884: LD_INT 1
1886: PPUSH
1887: LD_INT 1
1889: PPUSH
1890: LD_INT 12
1892: PPUSH
1893: LD_INT 50
1895: PPUSH
1896: CALL 60677 0 5
// veh := CreateVehicle ;
1900: LD_ADDR_VAR 0 4
1904: PUSH
1905: CALL_OW 45
1909: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1910: LD_ADDR_VAR 0 5
1914: PUSH
1915: LD_VAR 0 5
1919: PPUSH
1920: LD_VAR 0 4
1924: PPUSH
1925: CALL 93847 0 2
1929: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1930: LD_VAR 0 4
1934: PPUSH
1935: LD_INT 1
1937: PPUSH
1938: CALL_OW 233
// sibRes := LoadVariable ( 09_sibRes , 100 ) - 20 ;
1942: LD_ADDR_VAR 0 6
1946: PUSH
1947: LD_STRING 09_sibRes
1949: PPUSH
1950: LD_INT 100
1952: PPUSH
1953: CALL_OW 30
1957: PUSH
1958: LD_INT 20
1960: MINUS
1961: ST_TO_ADDR
// if sibRes >= 100 then
1962: LD_VAR 0 6
1966: PUSH
1967: LD_INT 100
1969: GREATEREQUAL
1970: IFFALSE 1989
// SetCargo ( veh , mat_siberit , 100 ) else
1972: LD_VAR 0 4
1976: PPUSH
1977: LD_INT 3
1979: PPUSH
1980: LD_INT 100
1982: PPUSH
1983: CALL_OW 290
1987: GO 2006
// SetCargo ( veh , mat_siberit , sibRes ) ;
1989: LD_VAR 0 4
1993: PPUSH
1994: LD_INT 3
1996: PPUSH
1997: LD_VAR 0 6
2001: PPUSH
2002: CALL_OW 290
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
2006: LD_INT 2
2008: PPUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_INT 1
2014: PPUSH
2015: LD_INT 12
2017: PPUSH
2018: LD_INT 50
2020: PPUSH
2021: CALL 60677 0 5
// veh := CreateVehicle ;
2025: LD_ADDR_VAR 0 4
2029: PUSH
2030: CALL_OW 45
2034: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
2035: LD_ADDR_VAR 0 5
2039: PUSH
2040: LD_VAR 0 5
2044: PPUSH
2045: LD_VAR 0 4
2049: PPUSH
2050: CALL 93847 0 2
2054: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2055: LD_VAR 0 4
2059: PPUSH
2060: LD_INT 1
2062: PPUSH
2063: CALL_OW 233
// SetCargo ( veh , mat_cans , 100 ) ;
2067: LD_VAR 0 4
2071: PPUSH
2072: LD_INT 1
2074: PPUSH
2075: LD_INT 100
2077: PPUSH
2078: CALL_OW 290
// for i := 1 to Count ( result ) - 2 do
2082: LD_ADDR_VAR 0 2
2086: PUSH
2087: DOUBLE
2088: LD_INT 1
2090: DEC
2091: ST_TO_ADDR
2092: LD_VAR 0 1
2096: PPUSH
2097: CALL 57915 0 1
2101: PUSH
2102: LD_INT 2
2104: MINUS
2105: PUSH
2106: FOR_TO
2107: IFFALSE 2213
// begin PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , [ us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun ] [ i mod 5 + 1 ] , rand ( 45 , 55 ) ) ;
2109: LD_INT 2
2111: PPUSH
2112: LD_INT 1
2114: PPUSH
2115: LD_INT 1
2117: PPUSH
2118: LD_INT 3
2120: PUSH
2121: LD_INT 4
2123: PUSH
2124: LD_INT 5
2126: PUSH
2127: LD_INT 11
2129: PUSH
2130: LD_INT 3
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: PUSH
2140: LD_VAR 0 2
2144: PUSH
2145: LD_INT 5
2147: MOD
2148: PUSH
2149: LD_INT 1
2151: PLUS
2152: ARRAY
2153: PPUSH
2154: LD_INT 45
2156: PPUSH
2157: LD_INT 55
2159: PPUSH
2160: CALL_OW 12
2164: PPUSH
2165: CALL 60677 0 5
// veh := CreateVehicle ;
2169: LD_ADDR_VAR 0 4
2173: PUSH
2174: CALL_OW 45
2178: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
2179: LD_ADDR_VAR 0 5
2183: PUSH
2184: LD_VAR 0 5
2188: PPUSH
2189: LD_VAR 0 4
2193: PPUSH
2194: CALL 93847 0 2
2198: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2199: LD_VAR 0 4
2203: PPUSH
2204: LD_INT 1
2206: PPUSH
2207: CALL_OW 233
// end ;
2211: GO 2106
2213: POP
2214: POP
// for i in vehs do
2215: LD_ADDR_VAR 0 2
2219: PUSH
2220: LD_VAR 0 5
2224: PUSH
2225: FOR_IN
2226: IFFALSE 2281
// begin PlaceUnitArea ( i , startArea , false ) ;
2228: LD_VAR 0 2
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: LD_INT 0
2238: PPUSH
2239: CALL_OW 49
// PlaceHumanInUnit ( result [ 1 ] , i ) ;
2243: LD_VAR 0 1
2247: PUSH
2248: LD_INT 1
2250: ARRAY
2251: PPUSH
2252: LD_VAR 0 2
2256: PPUSH
2257: CALL_OW 52
// result := Delete ( result , 1 ) ;
2261: LD_ADDR_VAR 0 1
2265: PUSH
2266: LD_VAR 0 1
2270: PPUSH
2271: LD_INT 1
2273: PPUSH
2274: CALL_OW 3
2278: ST_TO_ADDR
// end ;
2279: GO 2225
2281: POP
2282: POP
// uc_side := 4 ;
2283: LD_ADDR_OWVAR 20
2287: PUSH
2288: LD_INT 4
2290: ST_TO_ADDR
// if LoadVariable ( 08_SikorskiStatus , debug ) then
2291: LD_STRING 08_SikorskiStatus
2293: PPUSH
2294: LD_EXP 1
2298: PPUSH
2299: CALL_OW 30
2303: IFFALSE 2324
// Truman := PrepareUnit ( Truman , false ,  ) ;
2305: LD_ADDR_EXP 43
2309: PUSH
2310: LD_STRING Truman
2312: PPUSH
2313: LD_INT 0
2315: PPUSH
2316: LD_STRING 
2318: PPUSH
2319: CALL 55715 0 3
2323: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , false ,  ) ;
2324: LD_ADDR_EXP 33
2328: PUSH
2329: LD_STRING Simms
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: LD_STRING 
2337: PPUSH
2338: CALL 55715 0 3
2342: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 08_ ) ;
2343: LD_ADDR_EXP 34
2347: PUSH
2348: LD_STRING Denis
2350: PPUSH
2351: LD_EXP 1
2355: NOT
2356: PPUSH
2357: LD_STRING 08_
2359: PPUSH
2360: CALL 55715 0 3
2364: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 08_ ) ;
2365: LD_ADDR_EXP 35
2369: PUSH
2370: LD_STRING Joan
2372: PPUSH
2373: LD_EXP 1
2377: NOT
2378: PPUSH
2379: LD_STRING 08_
2381: PPUSH
2382: CALL 55715 0 3
2386: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 08_ ) ;
2387: LD_ADDR_EXP 41
2391: PUSH
2392: LD_STRING Mike
2394: PPUSH
2395: LD_EXP 1
2399: NOT
2400: PPUSH
2401: LD_STRING 08_
2403: PPUSH
2404: CALL 55715 0 3
2408: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2409: LD_STRING 08_Khatam
2411: PPUSH
2412: CALL_OW 28
2416: IFFALSE 2439
// Khatam := PrepareUnit ( Khatam , true , 08_ ) else
2418: LD_ADDR_EXP 36
2422: PUSH
2423: LD_STRING Khatam
2425: PPUSH
2426: LD_INT 1
2428: PPUSH
2429: LD_STRING 08_
2431: PPUSH
2432: CALL 55715 0 3
2436: ST_TO_ADDR
2437: GO 2467
// if TestCharacters ( 03_Khatam ) then
2439: LD_STRING 03_Khatam
2441: PPUSH
2442: CALL_OW 28
2446: IFFALSE 2467
// Khatam := PrepareUnit ( Khatam , true , 03_ ) ;
2448: LD_ADDR_EXP 36
2452: PUSH
2453: LD_STRING Khatam
2455: PPUSH
2456: LD_INT 1
2458: PPUSH
2459: LD_STRING 03_
2461: PPUSH
2462: CALL 55715 0 3
2466: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 08_ ) ;
2467: LD_ADDR_EXP 37
2471: PUSH
2472: LD_STRING Gladstone
2474: PPUSH
2475: LD_EXP 1
2479: NOT
2480: PPUSH
2481: LD_STRING 08_
2483: PPUSH
2484: CALL 55715 0 3
2488: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) ,  ) ;
2489: LD_ADDR_EXP 39
2493: PUSH
2494: LD_STRING DeltaDoctor
2496: PPUSH
2497: LD_EXP 1
2501: NOT
2502: PPUSH
2503: LD_STRING 
2505: PPUSH
2506: CALL 55715 0 3
2510: ST_TO_ADDR
// if Frank then
2511: LD_EXP 29
2515: IFFALSE 2538
// Kikuchi := PrepareUnit ( Yamoko , false ,  ) else
2517: LD_ADDR_EXP 30
2521: PUSH
2522: LD_STRING Yamoko
2524: PPUSH
2525: LD_INT 0
2527: PPUSH
2528: LD_STRING 
2530: PPUSH
2531: CALL 55715 0 3
2535: ST_TO_ADDR
2536: GO 2560
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 08_ ) ;
2538: LD_ADDR_EXP 30
2542: PUSH
2543: LD_STRING Kikuchi
2545: PPUSH
2546: LD_EXP 1
2550: NOT
2551: PPUSH
2552: LD_STRING 08_
2554: PPUSH
2555: CALL 55715 0 3
2559: ST_TO_ADDR
// others09 := CreateCharacterSet ( 09_others ) ;
2560: LD_ADDR_EXP 47
2564: PUSH
2565: LD_STRING 09_others
2567: PPUSH
2568: CALL_OW 31
2572: ST_TO_ADDR
// ape09 := CreateCharacterSet ( 09_apes ) ;
2573: LD_ADDR_EXP 48
2577: PUSH
2578: LD_STRING 09_apes
2580: PPUSH
2581: CALL_OW 31
2585: ST_TO_ADDR
// if Truman then
2586: LD_EXP 43
2590: IFFALSE 2607
// PlaceUnitArea ( Truman , epsilonSpawnArea , false ) ;
2592: LD_EXP 43
2596: PPUSH
2597: LD_INT 4
2599: PPUSH
2600: LD_INT 0
2602: PPUSH
2603: CALL_OW 49
// if Mike then
2607: LD_EXP 41
2611: IFFALSE 2628
// PlaceUnitArea ( Mike , epsilonSpawnArea , false ) ;
2613: LD_EXP 41
2617: PPUSH
2618: LD_INT 4
2620: PPUSH
2621: LD_INT 0
2623: PPUSH
2624: CALL_OW 49
// if Simms then
2628: LD_EXP 33
2632: IFFALSE 2649
// PlaceUnitArea ( Simms , epsilonSpawnArea , false ) ;
2634: LD_EXP 33
2638: PPUSH
2639: LD_INT 4
2641: PPUSH
2642: LD_INT 0
2644: PPUSH
2645: CALL_OW 49
// if Denis then
2649: LD_EXP 34
2653: IFFALSE 2670
// PlaceUnitArea ( Denis , epsilonSpawnArea , false ) ;
2655: LD_EXP 34
2659: PPUSH
2660: LD_INT 4
2662: PPUSH
2663: LD_INT 0
2665: PPUSH
2666: CALL_OW 49
// if Joan then
2670: LD_EXP 35
2674: IFFALSE 2691
// PlaceUnitArea ( Joan , epsilonSpawnArea , false ) ;
2676: LD_EXP 35
2680: PPUSH
2681: LD_INT 4
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 49
// if Khatam then
2691: LD_EXP 36
2695: IFFALSE 2712
// PlaceUnitArea ( Khatam , epsilonSpawnArea , false ) ;
2697: LD_EXP 36
2701: PPUSH
2702: LD_INT 4
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// if Gladstone then
2712: LD_EXP 37
2716: IFFALSE 2733
// PlaceUnitArea ( Gladstone , epsilonSpawnArea , false ) ;
2718: LD_EXP 37
2722: PPUSH
2723: LD_INT 4
2725: PPUSH
2726: LD_INT 0
2728: PPUSH
2729: CALL_OW 49
// if DeltaDoctor then
2733: LD_EXP 39
2737: IFFALSE 2754
// PlaceUnitArea ( DeltaDoctor , epsilonSpawnArea , false ) ;
2739: LD_EXP 39
2743: PPUSH
2744: LD_INT 4
2746: PPUSH
2747: LD_INT 0
2749: PPUSH
2750: CALL_OW 49
// if Kikuchi then
2754: LD_EXP 30
2758: IFFALSE 2775
// PlaceUnitArea ( Kikuchi , epsilonSpawnArea , false ) ;
2760: LD_EXP 30
2764: PPUSH
2765: LD_INT 4
2767: PPUSH
2768: LD_INT 0
2770: PPUSH
2771: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , class_scientistic ) ;
2775: LD_EXP 33
2779: PUSH
2780: LD_EXP 36
2784: PUSH
2785: LD_EXP 34
2789: PUSH
2790: LD_EXP 37
2794: PUSH
2795: LD_EXP 39
2799: PUSH
2800: LD_EXP 35
2804: PUSH
2805: EMPTY
2806: LIST
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: PPUSH
2813: LD_INT 4
2815: PPUSH
2816: CALL_OW 336
// amount := Count ( others09 ) ;
2820: LD_ADDR_VAR 0 8
2824: PUSH
2825: LD_EXP 47
2829: PPUSH
2830: CALL 57915 0 1
2834: ST_TO_ADDR
// if amount then
2835: LD_VAR 0 8
2839: IFFALSE 2987
// begin if amount > [ 6 , 5 , 4 , 4 ] [ Difficulty ] then
2841: LD_VAR 0 8
2845: PUSH
2846: LD_INT 6
2848: PUSH
2849: LD_INT 5
2851: PUSH
2852: LD_INT 4
2854: PUSH
2855: LD_INT 4
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: PUSH
2864: LD_OWVAR 67
2868: ARRAY
2869: GREATER
2870: IFFALSE 2901
// amount := [ 6 , 5 , 4 , 4 ] [ Difficulty ] ;
2872: LD_ADDR_VAR 0 8
2876: PUSH
2877: LD_INT 6
2879: PUSH
2880: LD_INT 5
2882: PUSH
2883: LD_INT 4
2885: PUSH
2886: LD_INT 4
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: LIST
2893: LIST
2894: PUSH
2895: LD_OWVAR 67
2899: ARRAY
2900: ST_TO_ADDR
// for i := 1 to amount do
2901: LD_ADDR_VAR 0 2
2905: PUSH
2906: DOUBLE
2907: LD_INT 1
2909: DEC
2910: ST_TO_ADDR
2911: LD_VAR 0 8
2915: PUSH
2916: FOR_TO
2917: IFFALSE 2958
// begin PlaceUnitArea ( others09 [ 1 ] , epsilonSpawnArea , false ) ;
2919: LD_EXP 47
2923: PUSH
2924: LD_INT 1
2926: ARRAY
2927: PPUSH
2928: LD_INT 4
2930: PPUSH
2931: LD_INT 0
2933: PPUSH
2934: CALL_OW 49
// others09 := Delete ( others09 , 1 ) ;
2938: LD_ADDR_EXP 47
2942: PUSH
2943: LD_EXP 47
2947: PPUSH
2948: LD_INT 1
2950: PPUSH
2951: CALL_OW 3
2955: ST_TO_ADDR
// end ;
2956: GO 2916
2958: POP
2959: POP
// if Count ( others09 ) then
2960: LD_EXP 47
2964: PPUSH
2965: CALL 57915 0 1
2969: IFFALSE 2987
// others := others union others09 ;
2971: LD_ADDR_EXP 46
2975: PUSH
2976: LD_EXP 46
2980: PUSH
2981: LD_EXP 47
2985: UNION
2986: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) = 0 then
2987: LD_INT 22
2989: PUSH
2990: LD_INT 4
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: PUSH
2997: LD_INT 50
2999: PUSH
3000: EMPTY
3001: LIST
3002: PUSH
3003: LD_INT 25
3005: PUSH
3006: LD_INT 2
3008: PUSH
3009: EMPTY
3010: LIST
3011: LIST
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: LIST
3017: PPUSH
3018: CALL_OW 69
3022: PUSH
3023: LD_INT 0
3025: EQUAL
3026: IFFALSE 3165
// begin tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3028: LD_ADDR_VAR 0 7
3032: PUSH
3033: LD_INT 22
3035: PUSH
3036: LD_INT 4
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: PUSH
3043: LD_INT 50
3045: PUSH
3046: EMPTY
3047: LIST
3048: PUSH
3049: LD_INT 25
3051: PUSH
3052: LD_INT 2
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: LIST
3063: PPUSH
3064: CALL_OW 69
3068: PUSH
3069: LD_EXP 33
3073: PUSH
3074: LD_EXP 36
3078: PUSH
3079: LD_EXP 34
3083: PUSH
3084: LD_EXP 37
3088: PUSH
3089: LD_EXP 39
3093: PUSH
3094: LD_EXP 35
3098: PUSH
3099: EMPTY
3100: LIST
3101: LIST
3102: LIST
3103: LIST
3104: LIST
3105: LIST
3106: DIFF
3107: ST_TO_ADDR
// if not tmp then
3108: LD_VAR 0 7
3112: NOT
3113: IFFALSE 3149
// begin if Denis then
3115: LD_EXP 34
3119: IFFALSE 3135
// SetClass ( Denis , class_engineer ) else
3121: LD_EXP 34
3125: PPUSH
3126: LD_INT 2
3128: PPUSH
3129: CALL_OW 336
3133: GO 3147
// SetClass ( DeltaDoctor , class_engineer ) ;
3135: LD_EXP 39
3139: PPUSH
3140: LD_INT 2
3142: PPUSH
3143: CALL_OW 336
// end else
3147: GO 3165
// SetClass ( tmp [ 1 ] , class_engineer ) ;
3149: LD_VAR 0 7
3153: PUSH
3154: LD_INT 1
3156: ARRAY
3157: PPUSH
3158: LD_INT 2
3160: PPUSH
3161: CALL_OW 336
// end ; for i in ape09 do
3165: LD_ADDR_VAR 0 2
3169: PUSH
3170: LD_EXP 48
3174: PUSH
3175: FOR_IN
3176: IFFALSE 3195
// PlaceUnitArea ( i , epsilonSpawnArea , false ) ;
3178: LD_VAR 0 2
3182: PPUSH
3183: LD_INT 4
3185: PPUSH
3186: LD_INT 0
3188: PPUSH
3189: CALL_OW 49
3193: GO 3175
3195: POP
3196: POP
// PrepareSoldier ( sex_female , 6 ) ;
3197: LD_INT 2
3199: PPUSH
3200: LD_INT 6
3202: PPUSH
3203: CALL_OW 381
// AmScout := CreateHuman ;
3207: LD_ADDR_EXP 40
3211: PUSH
3212: CALL_OW 44
3216: ST_TO_ADDR
// end ;
3217: LD_VAR 0 1
3221: RET
// export function PrepareCornell ; begin
3222: LD_INT 0
3224: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3225: LD_INT 4
3227: PPUSH
3228: LD_INT 4
3230: PPUSH
3231: CALL_OW 343
// uc_side := 4 ;
3235: LD_ADDR_OWVAR 20
3239: PUSH
3240: LD_INT 4
3242: ST_TO_ADDR
// uc_nation := nation_american ;
3243: LD_ADDR_OWVAR 21
3247: PUSH
3248: LD_INT 1
3250: ST_TO_ADDR
// Cornell := PrepareUnit ( Cornel , ( not debug ) , 03_ ) ;
3251: LD_ADDR_EXP 42
3255: PUSH
3256: LD_STRING Cornel
3258: PPUSH
3259: LD_EXP 1
3263: NOT
3264: PPUSH
3265: LD_STRING 03_
3267: PPUSH
3268: CALL 55715 0 3
3272: ST_TO_ADDR
// if not Cornell then
3273: LD_EXP 42
3277: NOT
3278: IFFALSE 3282
// exit ;
3280: GO 3420
// PlaceUnitArea ( Cornell , cornelSpawnArea , false ) ;
3282: LD_EXP 42
3286: PPUSH
3287: LD_INT 12
3289: PPUSH
3290: LD_INT 0
3292: PPUSH
3293: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3297: LD_EXP 42
3301: PPUSH
3302: LD_INT 350
3304: PPUSH
3305: CALL_OW 234
// ComMoveXY ( Cornell , 125 , 17 ) ;
3309: LD_EXP 42
3313: PPUSH
3314: LD_INT 125
3316: PPUSH
3317: LD_INT 17
3319: PPUSH
3320: CALL_OW 111
// AddComMoveXY ( Cornell , 112 , 19 ) ;
3324: LD_EXP 42
3328: PPUSH
3329: LD_INT 112
3331: PPUSH
3332: LD_INT 19
3334: PPUSH
3335: CALL_OW 171
// if IsInUnit ( JMM ) then
3339: LD_EXP 23
3343: PPUSH
3344: CALL_OW 310
3348: IFFALSE 3391
// AddComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3350: LD_EXP 42
3354: PPUSH
3355: LD_EXP 23
3359: PPUSH
3360: CALL_OW 310
3364: PPUSH
3365: CALL_OW 250
3369: PPUSH
3370: LD_EXP 23
3374: PPUSH
3375: CALL_OW 310
3379: PPUSH
3380: CALL_OW 251
3384: PPUSH
3385: CALL_OW 171
3389: GO 3420
// AddComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3391: LD_EXP 42
3395: PPUSH
3396: LD_EXP 23
3400: PPUSH
3401: CALL_OW 250
3405: PPUSH
3406: LD_EXP 23
3410: PPUSH
3411: CALL_OW 251
3415: PPUSH
3416: CALL_OW 171
// end ; end_of_file
3420: LD_VAR 0 1
3424: RET
// export arForces , Dietrich , Ahmed ; export arTech , arBuildings , arMines , arCameras , arEscapist ; export function PrepareArabian ; var i , j , un , tmp , skill ; begin
3425: LD_INT 0
3427: PPUSH
3428: PPUSH
3429: PPUSH
3430: PPUSH
3431: PPUSH
3432: PPUSH
// uc_side := 2 ;
3433: LD_ADDR_OWVAR 20
3437: PUSH
3438: LD_INT 2
3440: ST_TO_ADDR
// uc_nation := nation_arabian ;
3441: LD_ADDR_OWVAR 21
3445: PUSH
3446: LD_INT 2
3448: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
3449: LD_ADDR_VAR 0 6
3453: PUSH
3454: LD_INT 4
3456: PUSH
3457: LD_INT 5
3459: PUSH
3460: LD_INT 6
3462: PUSH
3463: LD_INT 7
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: PUSH
3472: LD_OWVAR 67
3476: ARRAY
3477: ST_TO_ADDR
// arForces := [ ] ;
3478: LD_ADDR_EXP 49
3482: PUSH
3483: EMPTY
3484: ST_TO_ADDR
// arTech := [ ] ;
3485: LD_ADDR_EXP 52
3489: PUSH
3490: EMPTY
3491: ST_TO_ADDR
// arBuildings := [ ] ;
3492: LD_ADDR_EXP 53
3496: PUSH
3497: EMPTY
3498: ST_TO_ADDR
// arCameras := [ [ 94 , 19 ] , [ 92 , 34 ] , [ 109 , 67 ] , [ 120 , 38 ] , [ 116 , 30 ] , [ 102 , 20 ] ] ;
3499: LD_ADDR_EXP 55
3503: PUSH
3504: LD_INT 94
3506: PUSH
3507: LD_INT 19
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PUSH
3514: LD_INT 92
3516: PUSH
3517: LD_INT 34
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: PUSH
3524: LD_INT 109
3526: PUSH
3527: LD_INT 67
3529: PUSH
3530: EMPTY
3531: LIST
3532: LIST
3533: PUSH
3534: LD_INT 120
3536: PUSH
3537: LD_INT 38
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: PUSH
3544: LD_INT 116
3546: PUSH
3547: LD_INT 30
3549: PUSH
3550: EMPTY
3551: LIST
3552: LIST
3553: PUSH
3554: LD_INT 102
3556: PUSH
3557: LD_INT 20
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PUSH
3564: EMPTY
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: ST_TO_ADDR
// arMines := [ [ 73 , 36 ] , [ 76 , 38 ] , [ 79 , 39 ] ] ;
3572: LD_ADDR_EXP 54
3576: PUSH
3577: LD_INT 73
3579: PUSH
3580: LD_INT 36
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: PUSH
3587: LD_INT 76
3589: PUSH
3590: LD_INT 38
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: PUSH
3597: LD_INT 79
3599: PUSH
3600: LD_INT 39
3602: PUSH
3603: EMPTY
3604: LIST
3605: LIST
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: LIST
3611: ST_TO_ADDR
// arEscapist := [ ] ;
3612: LD_ADDR_EXP 56
3616: PUSH
3617: EMPTY
3618: ST_TO_ADDR
// SetResourceType ( GetBase ( arDep ) , mat_cans , 150 ) ;
3619: LD_INT 35
3621: PPUSH
3622: CALL_OW 274
3626: PPUSH
3627: LD_INT 1
3629: PPUSH
3630: LD_INT 150
3632: PPUSH
3633: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_oil , 60 ) ;
3637: LD_INT 35
3639: PPUSH
3640: CALL_OW 274
3644: PPUSH
3645: LD_INT 2
3647: PPUSH
3648: LD_INT 60
3650: PPUSH
3651: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_siberit , 10 ) ;
3655: LD_INT 35
3657: PPUSH
3658: CALL_OW 274
3662: PPUSH
3663: LD_INT 3
3665: PPUSH
3666: LD_INT 10
3668: PPUSH
3669: CALL_OW 277
// HiddenCamera ( 36 , 22 , 2 ) ;
3673: LD_INT 36
3675: PPUSH
3676: LD_INT 22
3678: PPUSH
3679: LD_INT 2
3681: PPUSH
3682: CALL_OW 244
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
3686: LD_ADDR_VAR 0 2
3690: PUSH
3691: LD_INT 22
3693: PUSH
3694: LD_INT 2
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: PUSH
3701: LD_INT 21
3703: PUSH
3704: LD_INT 3
3706: PUSH
3707: EMPTY
3708: LIST
3709: LIST
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PPUSH
3715: CALL_OW 69
3719: PUSH
3720: FOR_IN
3721: IFFALSE 3737
// SetBLevel ( i , 6 ) ;
3723: LD_VAR 0 2
3727: PPUSH
3728: LD_INT 6
3730: PPUSH
3731: CALL_OW 241
3735: GO 3720
3737: POP
3738: POP
// Dietrich := NewCharacter ( Dietrich ) ;
3739: LD_ADDR_EXP 50
3743: PUSH
3744: LD_STRING Dietrich
3746: PPUSH
3747: CALL_OW 25
3751: ST_TO_ADDR
// PlaceHumanInUnit ( Dietrich , arDep ) ;
3752: LD_EXP 50
3756: PPUSH
3757: LD_INT 35
3759: PPUSH
3760: CALL_OW 52
// InitHC_All ( ) ;
3764: CALL_OW 584
// for i := 1 to 3 do
3768: LD_ADDR_VAR 0 2
3772: PUSH
3773: DOUBLE
3774: LD_INT 1
3776: DEC
3777: ST_TO_ADDR
3778: LD_INT 3
3780: PUSH
3781: FOR_TO
3782: IFFALSE 3888
// begin PrepareEngineer ( sex_male , skill ) ;
3784: LD_INT 1
3786: PPUSH
3787: LD_VAR 0 6
3791: PPUSH
3792: CALL_OW 382
// if i = 1 then
3796: LD_VAR 0 2
3800: PUSH
3801: LD_INT 1
3803: EQUAL
3804: IFFALSE 3816
// hc_name := Ahmed Abbasid else
3806: LD_ADDR_OWVAR 26
3810: PUSH
3811: LD_STRING Ahmed Abbasid
3813: ST_TO_ADDR
3814: GO 3824
// hc_name :=  ;
3816: LD_ADDR_OWVAR 26
3820: PUSH
3821: LD_STRING 
3823: ST_TO_ADDR
// un := CreateHuman ;
3824: LD_ADDR_VAR 0 4
3828: PUSH
3829: CALL_OW 44
3833: ST_TO_ADDR
// if i = 1 then
3834: LD_VAR 0 2
3838: PUSH
3839: LD_INT 1
3841: EQUAL
3842: IFFALSE 3854
// Ahmed := un ;
3844: LD_ADDR_EXP 51
3848: PUSH
3849: LD_VAR 0 4
3853: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
3854: LD_ADDR_EXP 49
3858: PUSH
3859: LD_EXP 49
3863: PPUSH
3864: LD_VAR 0 4
3868: PPUSH
3869: CALL 93847 0 2
3873: ST_TO_ADDR
// PlaceHumanInUnit ( un , arDep ) ;
3874: LD_VAR 0 4
3878: PPUSH
3879: LD_INT 35
3881: PPUSH
3882: CALL_OW 52
// end ;
3886: GO 3781
3888: POP
3889: POP
// for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
3890: LD_ADDR_VAR 0 2
3894: PUSH
3895: DOUBLE
3896: LD_INT 1
3898: DEC
3899: ST_TO_ADDR
3900: LD_INT 2
3902: PUSH
3903: LD_INT 3
3905: PUSH
3906: LD_INT 4
3908: PUSH
3909: LD_INT 5
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: PUSH
3918: LD_OWVAR 67
3922: ARRAY
3923: PUSH
3924: FOR_TO
3925: IFFALSE 4000
// begin PrepareScientist ( false , skill ) ;
3927: LD_INT 0
3929: PPUSH
3930: LD_VAR 0 6
3934: PPUSH
3935: CALL_OW 384
// un := CreateHuman ;
3939: LD_ADDR_VAR 0 4
3943: PUSH
3944: CALL_OW 44
3948: ST_TO_ADDR
// SetSkill ( un , skill_combat , skill ) ;
3949: LD_VAR 0 4
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: LD_VAR 0 6
3961: PPUSH
3962: CALL_OW 237
// arForces := Join ( arForces , un ) ;
3966: LD_ADDR_EXP 49
3970: PUSH
3971: LD_EXP 49
3975: PPUSH
3976: LD_VAR 0 4
3980: PPUSH
3981: CALL 93847 0 2
3985: ST_TO_ADDR
// PlaceHumanInUnit ( un , arLab ) ;
3986: LD_VAR 0 4
3990: PPUSH
3991: LD_INT 36
3993: PPUSH
3994: CALL_OW 52
// end ;
3998: GO 3924
4000: POP
4001: POP
// for j in [ arBar1 , arBar2 ] do
4002: LD_ADDR_VAR 0 3
4006: PUSH
4007: LD_INT 37
4009: PUSH
4010: LD_INT 38
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PUSH
4017: FOR_IN
4018: IFFALSE 4098
// for i := 1 to 4 do
4020: LD_ADDR_VAR 0 2
4024: PUSH
4025: DOUBLE
4026: LD_INT 1
4028: DEC
4029: ST_TO_ADDR
4030: LD_INT 4
4032: PUSH
4033: FOR_TO
4034: IFFALSE 4094
// begin PrepareSoldier ( false , skill ) ;
4036: LD_INT 0
4038: PPUSH
4039: LD_VAR 0 6
4043: PPUSH
4044: CALL_OW 381
// un := CreateHuman ;
4048: LD_ADDR_VAR 0 4
4052: PUSH
4053: CALL_OW 44
4057: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
4058: LD_ADDR_EXP 49
4062: PUSH
4063: LD_EXP 49
4067: PPUSH
4068: LD_VAR 0 4
4072: PPUSH
4073: CALL 93847 0 2
4077: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
4078: LD_VAR 0 4
4082: PPUSH
4083: LD_VAR 0 3
4087: PPUSH
4088: CALL_OW 52
// end ;
4092: GO 4033
4094: POP
4095: POP
4096: GO 4017
4098: POP
4099: POP
// for i := 1 to 3 do
4100: LD_ADDR_VAR 0 2
4104: PUSH
4105: DOUBLE
4106: LD_INT 1
4108: DEC
4109: ST_TO_ADDR
4110: LD_INT 3
4112: PUSH
4113: FOR_TO
4114: IFFALSE 4193
// begin un := arForces [ arForces - i ] ;
4116: LD_ADDR_VAR 0 4
4120: PUSH
4121: LD_EXP 49
4125: PUSH
4126: LD_EXP 49
4130: PUSH
4131: LD_VAR 0 2
4135: MINUS
4136: ARRAY
4137: ST_TO_ADDR
// ComExitBuilding ( un ) ;
4138: LD_VAR 0 4
4142: PPUSH
4143: CALL_OW 122
// AddComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4147: LD_VAR 0 4
4151: PPUSH
4152: LD_INT 22
4154: PUSH
4155: LD_INT 2
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 30
4164: PUSH
4165: LD_INT 31
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PPUSH
4176: CALL_OW 69
4180: PUSH
4181: LD_VAR 0 2
4185: ARRAY
4186: PPUSH
4187: CALL_OW 180
// end ;
4191: GO 4113
4193: POP
4194: POP
// for i := 1 to 3 do
4195: LD_ADDR_VAR 0 2
4199: PUSH
4200: DOUBLE
4201: LD_INT 1
4203: DEC
4204: ST_TO_ADDR
4205: LD_INT 3
4207: PUSH
4208: FOR_TO
4209: IFFALSE 4294
// begin tmp := UnitFilter ( arForces , [ [ f_class , class_soldier ] , [ f_not , [ f_tag , tMine ] ] ] ) ;
4211: LD_ADDR_VAR 0 5
4215: PUSH
4216: LD_EXP 49
4220: PPUSH
4221: LD_INT 25
4223: PUSH
4224: LD_INT 1
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: LD_INT 3
4233: PUSH
4234: LD_INT 120
4236: PUSH
4237: LD_INT 6
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: PPUSH
4252: CALL_OW 72
4256: ST_TO_ADDR
// if not tmp then
4257: LD_VAR 0 5
4261: NOT
4262: IFFALSE 4266
// continue ;
4264: GO 4208
// un := tmp [ 1 ] ;
4266: LD_ADDR_VAR 0 4
4270: PUSH
4271: LD_VAR 0 5
4275: PUSH
4276: LD_INT 1
4278: ARRAY
4279: ST_TO_ADDR
// SetTag ( un , tMine ) ;
4280: LD_VAR 0 4
4284: PPUSH
4285: LD_INT 6
4287: PPUSH
4288: CALL_OW 109
// end ;
4292: GO 4208
4294: POP
4295: POP
// for i in UnitsInside ( arBar2 ) do
4296: LD_ADDR_VAR 0 2
4300: PUSH
4301: LD_INT 38
4303: PPUSH
4304: CALL_OW 313
4308: PUSH
4309: FOR_IN
4310: IFFALSE 4326
// SetClass ( i , class_mortar ) ;
4312: LD_VAR 0 2
4316: PPUSH
4317: LD_INT 8
4319: PPUSH
4320: CALL_OW 336
4324: GO 4309
4326: POP
4327: POP
// end ;
4328: LD_VAR 0 1
4332: RET
// every 0 0$2 trigger joinedToEpsilon do var i , eng ;
4333: LD_EXP 7
4337: IFFALSE 4754
4339: GO 4341
4341: DISABLE
4342: LD_INT 0
4344: PPUSH
4345: PPUSH
// begin ComUpgradeLab ( arLab , b_lab_siberium ) ;
4346: LD_INT 36
4348: PPUSH
4349: LD_INT 11
4351: PPUSH
4352: CALL_OW 147
// wait ( 0 0$10 ) ;
4356: LD_INT 350
4358: PPUSH
4359: CALL_OW 67
// arBuildings := [ [ b_solar_power , 69 , 4 , 2 ] , [ b_solar_power , 67 , 6 , 3 ] ] ;
4363: LD_ADDR_EXP 53
4367: PUSH
4368: LD_INT 27
4370: PUSH
4371: LD_INT 69
4373: PUSH
4374: LD_INT 4
4376: PUSH
4377: LD_INT 2
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: PUSH
4386: LD_INT 27
4388: PUSH
4389: LD_INT 67
4391: PUSH
4392: LD_INT 6
4394: PUSH
4395: LD_INT 3
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4408: LD_INT 35
4410: PPUSH
4411: CALL_OW 67
// until not arBuildings ;
4415: LD_EXP 53
4419: NOT
4420: IFFALSE 4408
// eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
4422: LD_ADDR_VAR 0 2
4426: PUSH
4427: LD_EXP 49
4431: PPUSH
4432: LD_INT 25
4434: PUSH
4435: LD_INT 2
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: PPUSH
4442: CALL_OW 72
4446: ST_TO_ADDR
// if eng then
4447: LD_VAR 0 2
4451: IFFALSE 4590
// begin eng := eng [ 1 ] ;
4453: LD_ADDR_VAR 0 2
4457: PUSH
4458: LD_VAR 0 2
4462: PUSH
4463: LD_INT 1
4465: ARRAY
4466: ST_TO_ADDR
// SetTag ( eng , tCamera ) ;
4467: LD_VAR 0 2
4471: PPUSH
4472: LD_INT 4
4474: PPUSH
4475: CALL_OW 109
// for i in arCameras do
4479: LD_ADDR_VAR 0 1
4483: PUSH
4484: LD_EXP 55
4488: PUSH
4489: FOR_IN
4490: IFFALSE 4521
// AddComHiddenCamera ( eng , i [ 1 ] , i [ 2 ] ) ;
4492: LD_VAR 0 2
4496: PPUSH
4497: LD_VAR 0 1
4501: PUSH
4502: LD_INT 1
4504: ARRAY
4505: PPUSH
4506: LD_VAR 0 1
4510: PUSH
4511: LD_INT 2
4513: ARRAY
4514: PPUSH
4515: CALL_OW 217
4519: GO 4489
4521: POP
4522: POP
// repeat wait ( 0 0$1 ) ;
4523: LD_INT 35
4525: PPUSH
4526: CALL_OW 67
// until not HasTask ( eng ) or IsDead ( eng ) ;
4530: LD_VAR 0 2
4534: PPUSH
4535: CALL_OW 314
4539: NOT
4540: IFTRUE 4553
4542: PUSH
4543: LD_VAR 0 2
4547: PPUSH
4548: CALL_OW 301
4552: OR
4553: IFFALSE 4523
// if IsOk ( eng ) then
4555: LD_VAR 0 2
4559: PPUSH
4560: CALL_OW 302
4564: IFFALSE 4590
// begin SetTag ( eng , 0 ) ;
4566: LD_VAR 0 2
4570: PPUSH
4571: LD_INT 0
4573: PPUSH
4574: CALL_OW 109
// ComEnterUnit ( eng , arDep ) ;
4578: LD_VAR 0 2
4582: PPUSH
4583: LD_INT 35
4585: PPUSH
4586: CALL_OW 120
// end ; end ; repeat wait ( 0 0$1 ) ;
4590: LD_INT 35
4592: PPUSH
4593: CALL_OW 67
// if tick mod 4200 = 0 and GetListOfCratesInArea ( arCratesArea ) < 3 then
4597: LD_OWVAR 1
4601: PUSH
4602: LD_INT 4200
4604: MOD
4605: PUSH
4606: LD_INT 0
4608: EQUAL
4609: IFFALSE 4624
4611: PUSH
4612: LD_INT 9
4614: PPUSH
4615: CALL_OW 435
4619: PUSH
4620: LD_INT 3
4622: LESS
4623: AND
4624: IFFALSE 4647
// CreateCratesArea ( rand ( 1 , 5 ) , arCratesArea , true ) ;
4626: LD_INT 1
4628: PPUSH
4629: LD_INT 5
4631: PPUSH
4632: CALL_OW 12
4636: PPUSH
4637: LD_INT 9
4639: PPUSH
4640: LD_INT 1
4642: PPUSH
4643: CALL_OW 55
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) ;
4647: LD_INT 22
4649: PUSH
4650: LD_INT 1
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: LD_INT 3
4659: PUSH
4660: LD_INT 57
4662: PUSH
4663: EMPTY
4664: LIST
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PUSH
4670: LD_INT 63
4672: PUSH
4673: LD_INT 11
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: LIST
4684: PPUSH
4685: CALL_OW 69
4689: IFFALSE 4590
// wait ( 0 0$10 ) ;
4691: LD_INT 350
4693: PPUSH
4694: CALL_OW 67
// arTech := [ tech_sibPow , tech_sibEng , tech_sib1 ] ;
4698: LD_ADDR_EXP 52
4702: PUSH
4703: LD_INT 21
4705: PUSH
4706: LD_INT 22
4708: PUSH
4709: LD_INT 54
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: LIST
4716: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4717: LD_INT 35
4719: PPUSH
4720: CALL_OW 67
// until not arTech ;
4724: LD_EXP 52
4728: NOT
4729: IFFALSE 4717
// wait ( 0 0$30 ) ;
4731: LD_INT 1050
4733: PPUSH
4734: CALL_OW 67
// arabianAttack := true ;
4738: LD_ADDR_EXP 4
4742: PUSH
4743: LD_INT 1
4745: ST_TO_ADDR
// arBaseActive := false ;
4746: LD_ADDR_EXP 3
4750: PUSH
4751: LD_INT 0
4753: ST_TO_ADDR
// end ;
4754: PPOPN 2
4756: END
// every 3 trigger arBaseActive and arMines and FilterUnitsInArea ( arMinesArea , [ f_enemy , 2 ] ) do var i , e ;
4757: LD_EXP 3
4761: IFFALSE 4769
4763: PUSH
4764: LD_EXP 54
4768: AND
4769: IFFALSE 4790
4771: PUSH
4772: LD_INT 8
4774: PPUSH
4775: LD_INT 81
4777: PUSH
4778: LD_INT 2
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PPUSH
4785: CALL_OW 70
4789: AND
4790: IFFALSE 4901
4792: GO 4794
4794: DISABLE
4795: LD_INT 0
4797: PPUSH
4798: PPUSH
// begin enable ;
4799: ENABLE
// for i in arMines do
4800: LD_ADDR_VAR 0 1
4804: PUSH
4805: LD_EXP 54
4809: PUSH
4810: FOR_IN
4811: IFFALSE 4899
// begin e := HexInfo ( i [ 1 ] , i [ 2 ] ) ;
4813: LD_ADDR_VAR 0 2
4817: PUSH
4818: LD_VAR 0 1
4822: PUSH
4823: LD_INT 1
4825: ARRAY
4826: PPUSH
4827: LD_VAR 0 1
4831: PUSH
4832: LD_INT 2
4834: ARRAY
4835: PPUSH
4836: CALL_OW 428
4840: ST_TO_ADDR
// if not e then
4841: LD_VAR 0 2
4845: NOT
4846: IFFALSE 4850
// continue ;
4848: GO 4810
// if GetSide ( e ) in [ 3 , 6 ] then
4850: LD_VAR 0 2
4854: PPUSH
4855: CALL_OW 255
4859: PUSH
4860: LD_INT 3
4862: PUSH
4863: LD_INT 6
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: IN
4870: IFFALSE 4897
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 2 ) ;
4872: LD_VAR 0 1
4876: PUSH
4877: LD_INT 1
4879: ARRAY
4880: PPUSH
4881: LD_VAR 0 1
4885: PUSH
4886: LD_INT 2
4888: ARRAY
4889: PPUSH
4890: LD_INT 2
4892: PPUSH
4893: CALL_OW 456
// end ;
4897: GO 4810
4899: POP
4900: POP
// end ;
4901: PPOPN 2
4903: END
// every 0 0$2 trigger arBaseActive do var i , un , b , side , tmp , lab , eng , tag , cr , tw , sci , sol , hurtUnits , enemyInBase , empty , fac ;
4904: LD_EXP 3
4908: IFFALSE 7126
4910: GO 4912
4912: DISABLE
4913: LD_INT 0
4915: PPUSH
4916: PPUSH
4917: PPUSH
4918: PPUSH
4919: PPUSH
4920: PPUSH
4921: PPUSH
4922: PPUSH
4923: PPUSH
4924: PPUSH
4925: PPUSH
4926: PPUSH
4927: PPUSH
4928: PPUSH
4929: PPUSH
4930: PPUSH
// begin enable ;
4931: ENABLE
// side := 2 ;
4932: LD_ADDR_VAR 0 4
4936: PUSH
4937: LD_INT 2
4939: ST_TO_ADDR
// if arTech then
4940: LD_EXP 52
4944: IFFALSE 5100
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4946: LD_ADDR_VAR 0 6
4950: PUSH
4951: LD_INT 22
4953: PUSH
4954: LD_VAR 0 4
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: PUSH
4963: LD_INT 50
4965: PUSH
4966: EMPTY
4967: LIST
4968: PUSH
4969: LD_INT 2
4971: PUSH
4972: LD_INT 30
4974: PUSH
4975: LD_INT 6
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PUSH
4982: LD_INT 30
4984: PUSH
4985: LD_INT 7
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: LD_INT 30
4994: PUSH
4995: LD_INT 8
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: LIST
5012: PPUSH
5013: CALL_OW 69
5017: ST_TO_ADDR
// if lab then
5018: LD_VAR 0 6
5022: IFFALSE 5100
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
5024: LD_VAR 0 6
5028: PUSH
5029: LD_INT 1
5031: ARRAY
5032: PPUSH
5033: CALL_OW 461
5037: PUSH
5038: LD_INT 2
5040: EQUAL
5041: IFFALSE 5100
// begin for i in arTech do
5043: LD_ADDR_VAR 0 1
5047: PUSH
5048: LD_EXP 52
5052: PUSH
5053: FOR_IN
5054: IFFALSE 5098
// if CanBeResearched ( lab [ 1 ] , i ) then
5056: LD_VAR 0 6
5060: PUSH
5061: LD_INT 1
5063: ARRAY
5064: PPUSH
5065: LD_VAR 0 1
5069: PPUSH
5070: CALL_OW 430
5074: IFFALSE 5096
// begin ComResearch ( lab [ 1 ] , i ) ;
5076: LD_VAR 0 6
5080: PUSH
5081: LD_INT 1
5083: ARRAY
5084: PPUSH
5085: LD_VAR 0 1
5089: PPUSH
5090: CALL_OW 124
// break ;
5094: GO 5098
// end ;
5096: GO 5053
5098: POP
5099: POP
// end ; end ; end ; tmp := FilterUnitsInArea ( arBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5100: LD_ADDR_VAR 0 5
5104: PUSH
5105: LD_INT 5
5107: PPUSH
5108: LD_INT 21
5110: PUSH
5111: LD_INT 3
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PUSH
5118: LD_INT 3
5120: PUSH
5121: LD_INT 24
5123: PUSH
5124: LD_INT 1000
5126: PUSH
5127: EMPTY
5128: LIST
5129: LIST
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: PPUSH
5139: CALL_OW 70
5143: ST_TO_ADDR
// cr := GetListOfCratesInArea ( arCratesArea ) ;
5144: LD_ADDR_VAR 0 9
5148: PUSH
5149: LD_INT 9
5151: PPUSH
5152: CALL_OW 435
5156: ST_TO_ADDR
// sci := UnitFilter ( arForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
5157: LD_ADDR_VAR 0 11
5161: PUSH
5162: LD_EXP 49
5166: PPUSH
5167: LD_INT 25
5169: PUSH
5170: LD_INT 4
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: LD_INT 50
5179: PUSH
5180: EMPTY
5181: LIST
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PPUSH
5187: CALL_OW 72
5191: ST_TO_ADDR
// if sci then
5192: LD_VAR 0 11
5196: IFFALSE 5566
// begin hurtUnits := UnitFilter ( arForces , [ [ f_inarea , arBaseArea ] , [ f_not , [ f_inside ] ] , [ f_tag , tHeal ] ] ) ;
5198: LD_ADDR_VAR 0 13
5202: PUSH
5203: LD_EXP 49
5207: PPUSH
5208: LD_INT 95
5210: PUSH
5211: LD_INT 5
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PUSH
5218: LD_INT 3
5220: PUSH
5221: LD_INT 54
5223: PUSH
5224: EMPTY
5225: LIST
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: PUSH
5231: LD_INT 120
5233: PUSH
5234: LD_INT 1
5236: PUSH
5237: EMPTY
5238: LIST
5239: LIST
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: LIST
5245: PPUSH
5246: CALL_OW 72
5250: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5251: LD_ADDR_VAR 0 6
5255: PUSH
5256: LD_INT 22
5258: PUSH
5259: LD_VAR 0 4
5263: PUSH
5264: EMPTY
5265: LIST
5266: LIST
5267: PUSH
5268: LD_INT 50
5270: PUSH
5271: EMPTY
5272: LIST
5273: PUSH
5274: LD_INT 2
5276: PUSH
5277: LD_INT 30
5279: PUSH
5280: LD_INT 6
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PUSH
5287: LD_INT 30
5289: PUSH
5290: LD_INT 7
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: PUSH
5297: LD_INT 30
5299: PUSH
5300: LD_INT 8
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: LIST
5317: PPUSH
5318: CALL_OW 69
5322: ST_TO_ADDR
// tag := GetTag ( i ) ;
5323: LD_ADDR_VAR 0 8
5327: PUSH
5328: LD_VAR 0 1
5332: PPUSH
5333: CALL_OW 110
5337: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
5338: LD_VAR 0 1
5342: PPUSH
5343: CALL_OW 256
5347: PUSH
5348: LD_INT 800
5350: LESS
5351: IFFALSE 5363
5353: PUSH
5354: LD_VAR 0 8
5358: PUSH
5359: LD_INT 1
5361: NONEQUAL
5362: AND
5363: IFFALSE 5392
// begin ComMoveXY ( i , 72 , 15 ) ;
5365: LD_VAR 0 1
5369: PPUSH
5370: LD_INT 72
5372: PPUSH
5373: LD_INT 15
5375: PPUSH
5376: CALL_OW 111
// SetTag ( i , tHeal ) ;
5380: LD_VAR 0 1
5384: PPUSH
5385: LD_INT 1
5387: PPUSH
5388: CALL_OW 109
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
5392: LD_VAR 0 1
5396: PPUSH
5397: CALL_OW 256
5401: PUSH
5402: LD_INT 1000
5404: EQUAL
5405: IFFALSE 5417
5407: PUSH
5408: LD_VAR 0 8
5412: PUSH
5413: LD_INT 1
5415: EQUAL
5416: AND
5417: IFFALSE 5431
// begin SetTag ( i , 0 ) ;
5419: LD_VAR 0 1
5423: PPUSH
5424: LD_INT 0
5426: PPUSH
5427: CALL_OW 109
// end ; if hurtUnits then
5431: LD_VAR 0 13
5435: IFFALSE 5496
// begin for i in sci do
5437: LD_ADDR_VAR 0 1
5441: PUSH
5442: LD_VAR 0 11
5446: PUSH
5447: FOR_IN
5448: IFFALSE 5492
// if IsInUnit ( i ) then
5450: LD_VAR 0 1
5454: PPUSH
5455: CALL_OW 310
5459: IFFALSE 5472
// ComExitBuilding ( i ) else
5461: LD_VAR 0 1
5465: PPUSH
5466: CALL_OW 122
5470: GO 5490
// ComHeal ( i , hurtUnits [ 1 ] ) ;
5472: LD_VAR 0 1
5476: PPUSH
5477: LD_VAR 0 13
5481: PUSH
5482: LD_INT 1
5484: ARRAY
5485: PPUSH
5486: CALL_OW 128
5490: GO 5447
5492: POP
5493: POP
// end else
5494: GO 5566
// if lab then
5496: LD_VAR 0 6
5500: IFFALSE 5566
// begin for i in sci do
5502: LD_ADDR_VAR 0 1
5506: PUSH
5507: LD_VAR 0 11
5511: PUSH
5512: FOR_IN
5513: IFFALSE 5564
// if not IsInUnit ( i ) and GetTag ( i ) <> tHeal then
5515: LD_VAR 0 1
5519: PPUSH
5520: CALL_OW 310
5524: NOT
5525: IFFALSE 5542
5527: PUSH
5528: LD_VAR 0 1
5532: PPUSH
5533: CALL_OW 110
5537: PUSH
5538: LD_INT 1
5540: NONEQUAL
5541: AND
5542: IFFALSE 5562
// ComEnterUnit ( i , lab [ 1 ] ) ;
5544: LD_VAR 0 1
5548: PPUSH
5549: LD_VAR 0 6
5553: PUSH
5554: LD_INT 1
5556: ARRAY
5557: PPUSH
5558: CALL_OW 120
5562: GO 5512
5564: POP
5565: POP
// end ; end ; eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
5566: LD_ADDR_VAR 0 7
5570: PUSH
5571: LD_EXP 49
5575: PPUSH
5576: LD_INT 25
5578: PUSH
5579: LD_INT 2
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: PPUSH
5586: CALL_OW 72
5590: ST_TO_ADDR
// if eng then
5591: LD_VAR 0 7
5595: IFFALSE 6274
// begin for i in eng do
5597: LD_ADDR_VAR 0 1
5601: PUSH
5602: LD_VAR 0 7
5606: PUSH
5607: FOR_IN
5608: IFFALSE 6272
// begin tag := GetTag ( i ) ;
5610: LD_ADDR_VAR 0 8
5614: PUSH
5615: LD_VAR 0 1
5619: PPUSH
5620: CALL_OW 110
5624: ST_TO_ADDR
// if tag = tCamera then
5625: LD_VAR 0 8
5629: PUSH
5630: LD_INT 4
5632: EQUAL
5633: IFFALSE 5637
// continue ;
5635: GO 5607
// if GetLives ( i ) < 600 and tag <> tHeal then
5637: LD_VAR 0 1
5641: PPUSH
5642: CALL_OW 256
5646: PUSH
5647: LD_INT 600
5649: LESS
5650: IFFALSE 5662
5652: PUSH
5653: LD_VAR 0 8
5657: PUSH
5658: LD_INT 1
5660: NONEQUAL
5661: AND
5662: IFFALSE 5700
// begin SetTag ( i , tHeal ) ;
5664: LD_VAR 0 1
5668: PPUSH
5669: LD_INT 1
5671: PPUSH
5672: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
5676: LD_VAR 0 1
5680: PPUSH
5681: LD_INT 72
5683: PPUSH
5684: LD_INT 15
5686: PPUSH
5687: CALL_OW 111
// AddComHold ( i ) ;
5691: LD_VAR 0 1
5695: PPUSH
5696: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
5700: LD_VAR 0 8
5704: PUSH
5705: LD_INT 1
5707: EQUAL
5708: IFFALSE 5725
5710: PUSH
5711: LD_VAR 0 1
5715: PPUSH
5716: CALL_OW 256
5720: PUSH
5721: LD_INT 1000
5723: EQUAL
5724: AND
5725: IFFALSE 5739
// SetTag ( i , 0 ) ;
5727: LD_VAR 0 1
5731: PPUSH
5732: LD_INT 0
5734: PPUSH
5735: CALL_OW 109
// if not tag then
5739: LD_VAR 0 8
5743: NOT
5744: IFFALSE 5894
// begin if cr or tmp or Count ( arBuildings ) then
5746: LD_VAR 0 9
5750: IFTRUE 5758
5752: PUSH
5753: LD_VAR 0 5
5757: OR
5758: IFTRUE 5771
5760: PUSH
5761: LD_EXP 53
5765: PPUSH
5766: CALL 57915 0 1
5770: OR
5771: IFFALSE 5858
// begin if IsInUnit ( i ) then
5773: LD_VAR 0 1
5777: PPUSH
5778: CALL_OW 310
5782: IFFALSE 5793
// ComExitBuilding ( i ) ;
5784: LD_VAR 0 1
5788: PPUSH
5789: CALL_OW 122
// if tmp then
5793: LD_VAR 0 5
5797: IFFALSE 5813
// SetTag ( i , tRepair ) else
5799: LD_VAR 0 1
5803: PPUSH
5804: LD_INT 3
5806: PPUSH
5807: CALL_OW 109
5811: GO 5856
// if cr then
5813: LD_VAR 0 9
5817: IFFALSE 5833
// SetTag ( i , tCrates ) else
5819: LD_VAR 0 1
5823: PPUSH
5824: LD_INT 2
5826: PPUSH
5827: CALL_OW 109
5831: GO 5856
// if Count ( arBuildings ) then
5833: LD_EXP 53
5837: PPUSH
5838: CALL 57915 0 1
5842: IFFALSE 5856
// SetTag ( i , tBuild ) ;
5844: LD_VAR 0 1
5848: PPUSH
5849: LD_INT 5
5851: PPUSH
5852: CALL_OW 109
// end else
5856: GO 5894
// if not IsInUnit ( i ) then
5858: LD_VAR 0 1
5862: PPUSH
5863: CALL_OW 310
5867: NOT
5868: IFFALSE 5894
// begin SetTag ( i , 0 ) ;
5870: LD_VAR 0 1
5874: PPUSH
5875: LD_INT 0
5877: PPUSH
5878: CALL_OW 109
// ComEnterUnit ( i , arDep ) ;
5882: LD_VAR 0 1
5886: PPUSH
5887: LD_INT 35
5889: PPUSH
5890: CALL_OW 120
// end ; end ; if tag = tRepair then
5894: LD_VAR 0 8
5898: PUSH
5899: LD_INT 3
5901: EQUAL
5902: IFFALSE 6004
// begin if IsInUnit ( i ) then
5904: LD_VAR 0 1
5908: PPUSH
5909: CALL_OW 310
5913: IFFALSE 5926
// begin ComExitBuilding ( i ) ;
5915: LD_VAR 0 1
5919: PPUSH
5920: CALL_OW 122
// continue ;
5924: GO 5607
// end ; if not tmp then
5926: LD_VAR 0 5
5930: NOT
5931: IFFALSE 5947
// begin SetTag ( i , 0 ) ;
5933: LD_VAR 0 1
5937: PPUSH
5938: LD_INT 0
5940: PPUSH
5941: CALL_OW 109
// continue ;
5945: GO 5607
// end ; if not HasTask ( i ) then
5947: LD_VAR 0 1
5951: PPUSH
5952: CALL_OW 314
5956: NOT
5957: IFFALSE 5977
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
5959: LD_VAR 0 1
5963: PPUSH
5964: LD_VAR 0 5
5968: PUSH
5969: LD_INT 1
5971: ARRAY
5972: PPUSH
5973: CALL_OW 130
// if not IsInArea ( i , arBaseArea ) then
5977: LD_VAR 0 1
5981: PPUSH
5982: LD_INT 5
5984: PPUSH
5985: CALL_OW 308
5989: NOT
5990: IFFALSE 6004
// ComMoveToArea ( i , arBaseArea ) ;
5992: LD_VAR 0 1
5996: PPUSH
5997: LD_INT 5
5999: PPUSH
6000: CALL_OW 113
// end ; if tag = tBuild then
6004: LD_VAR 0 8
6008: PUSH
6009: LD_INT 5
6011: EQUAL
6012: IFFALSE 6123
// begin if IsInUnit ( i ) then
6014: LD_VAR 0 1
6018: PPUSH
6019: CALL_OW 310
6023: IFFALSE 6036
// begin ComExitBuilding ( i ) ;
6025: LD_VAR 0 1
6029: PPUSH
6030: CALL_OW 122
// continue ;
6034: GO 5607
// end ; if not Count ( arBuildings ) then
6036: LD_EXP 53
6040: PPUSH
6041: CALL 57915 0 1
6045: NOT
6046: IFFALSE 6062
// begin SetTag ( i , 0 ) ;
6048: LD_VAR 0 1
6052: PPUSH
6053: LD_INT 0
6055: PPUSH
6056: CALL_OW 109
// continue ;
6060: GO 5607
// end ; ComBuild ( i , arBuildings [ 1 ] [ 1 ] , arBuildings [ 1 ] [ 2 ] , arBuildings [ 1 ] [ 3 ] , arBuildings [ 1 ] [ 4 ] ) ;
6062: LD_VAR 0 1
6066: PPUSH
6067: LD_EXP 53
6071: PUSH
6072: LD_INT 1
6074: ARRAY
6075: PUSH
6076: LD_INT 1
6078: ARRAY
6079: PPUSH
6080: LD_EXP 53
6084: PUSH
6085: LD_INT 1
6087: ARRAY
6088: PUSH
6089: LD_INT 2
6091: ARRAY
6092: PPUSH
6093: LD_EXP 53
6097: PUSH
6098: LD_INT 1
6100: ARRAY
6101: PUSH
6102: LD_INT 3
6104: ARRAY
6105: PPUSH
6106: LD_EXP 53
6110: PUSH
6111: LD_INT 1
6113: ARRAY
6114: PUSH
6115: LD_INT 4
6117: ARRAY
6118: PPUSH
6119: CALL_OW 145
// end ; if tag = tCrates then
6123: LD_VAR 0 8
6127: PUSH
6128: LD_INT 2
6130: EQUAL
6131: IFFALSE 6270
// begin if IsInUnit ( i ) then
6133: LD_VAR 0 1
6137: PPUSH
6138: CALL_OW 310
6142: IFFALSE 6155
// begin ComExitBuilding ( i ) ;
6144: LD_VAR 0 1
6148: PPUSH
6149: CALL_OW 122
// continue ;
6153: GO 5607
// end ; if not cr then
6155: LD_VAR 0 9
6159: NOT
6160: IFFALSE 6176
// begin SetTag ( i , 0 ) ;
6162: LD_VAR 0 1
6166: PPUSH
6167: LD_INT 0
6169: PPUSH
6170: CALL_OW 109
// continue ;
6174: GO 5607
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
6176: LD_VAR 0 1
6180: PPUSH
6181: CALL_OW 314
6185: NOT
6186: IFFALSE 6241
6188: PUSH
6189: LD_INT 81
6191: PUSH
6192: LD_VAR 0 4
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: LD_INT 92
6203: PUSH
6204: LD_VAR 0 9
6208: PUSH
6209: LD_INT 1
6211: ARRAY
6212: PUSH
6213: LD_VAR 0 9
6217: PUSH
6218: LD_INT 2
6220: ARRAY
6221: PUSH
6222: LD_INT 12
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PPUSH
6235: CALL_OW 69
6239: NOT
6240: AND
6241: IFFALSE 6270
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
6243: LD_VAR 0 1
6247: PPUSH
6248: LD_VAR 0 9
6252: PUSH
6253: LD_INT 1
6255: ARRAY
6256: PPUSH
6257: LD_VAR 0 9
6261: PUSH
6262: LD_INT 2
6264: ARRAY
6265: PPUSH
6266: CALL_OW 117
// end ; end ;
6270: GO 5607
6272: POP
6273: POP
// end ; sol := UnitFilter ( arForces , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6274: LD_ADDR_VAR 0 12
6278: PUSH
6279: LD_EXP 49
6283: PPUSH
6284: LD_INT 25
6286: PUSH
6287: LD_INT 1
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: PUSH
6294: LD_INT 50
6296: PUSH
6297: EMPTY
6298: LIST
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: PPUSH
6304: CALL_OW 72
6308: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( arBaseArea , [ f_enemy , side ] ) ;
6309: LD_ADDR_VAR 0 14
6313: PUSH
6314: LD_INT 5
6316: PPUSH
6317: LD_INT 81
6319: PUSH
6320: LD_VAR 0 4
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PPUSH
6329: CALL_OW 70
6333: ST_TO_ADDR
// if sol then
6334: LD_VAR 0 12
6338: IFFALSE 7126
// begin tmp := UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ;
6340: LD_ADDR_VAR 0 5
6344: PUSH
6345: LD_VAR 0 12
6349: PPUSH
6350: LD_INT 50
6352: PUSH
6353: EMPTY
6354: LIST
6355: PUSH
6356: LD_INT 120
6358: PUSH
6359: LD_INT 6
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PPUSH
6370: CALL_OW 72
6374: ST_TO_ADDR
// if tmp and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , 76 , 38 , 12 ] ] ) then
6375: LD_VAR 0 5
6379: IFFALSE 6422
6381: PUSH
6382: LD_INT 81
6384: PUSH
6385: LD_VAR 0 4
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PUSH
6394: LD_INT 92
6396: PUSH
6397: LD_INT 76
6399: PUSH
6400: LD_INT 38
6402: PUSH
6403: LD_INT 12
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: PPUSH
6416: CALL_OW 69
6420: NOT
6421: AND
6422: IFFALSE 6594
// for i := 1 to Count ( tmp ) do
6424: LD_ADDR_VAR 0 1
6428: PUSH
6429: DOUBLE
6430: LD_INT 1
6432: DEC
6433: ST_TO_ADDR
6434: LD_VAR 0 5
6438: PPUSH
6439: CALL 57915 0 1
6443: PUSH
6444: FOR_TO
6445: IFFALSE 6592
// begin un := tmp [ i ] ;
6447: LD_ADDR_VAR 0 2
6451: PUSH
6452: LD_VAR 0 5
6456: PUSH
6457: LD_VAR 0 1
6461: ARRAY
6462: ST_TO_ADDR
// b := IsInUnit ( un ) ;
6463: LD_ADDR_VAR 0 3
6467: PUSH
6468: LD_VAR 0 2
6472: PPUSH
6473: CALL_OW 310
6477: ST_TO_ADDR
// if not MineOfUnit ( un ) then
6478: LD_VAR 0 2
6482: PPUSH
6483: CALL_OW 459
6487: NOT
6488: IFFALSE 6557
// begin ComExitBuilding ( un ) ;
6490: LD_VAR 0 2
6494: PPUSH
6495: CALL_OW 122
// AddComPlaceRemoteCharge ( un , arMines [ i ] [ 1 ] , arMines [ i ] [ 2 ] , 0 ) ;
6499: LD_VAR 0 2
6503: PPUSH
6504: LD_EXP 54
6508: PUSH
6509: LD_VAR 0 1
6513: ARRAY
6514: PUSH
6515: LD_INT 1
6517: ARRAY
6518: PPUSH
6519: LD_EXP 54
6523: PUSH
6524: LD_VAR 0 1
6528: ARRAY
6529: PUSH
6530: LD_INT 2
6532: ARRAY
6533: PPUSH
6534: LD_INT 0
6536: PPUSH
6537: CALL_OW 193
// AddComEnterUnit ( un , b ) ;
6541: LD_VAR 0 2
6545: PPUSH
6546: LD_VAR 0 3
6550: PPUSH
6551: CALL_OW 180
// end else
6555: GO 6590
// if not b and not HasTask ( un ) then
6557: LD_VAR 0 3
6561: NOT
6562: IFFALSE 6576
6564: PUSH
6565: LD_VAR 0 2
6569: PPUSH
6570: CALL_OW 314
6574: NOT
6575: AND
6576: IFFALSE 6590
// ComEnterUnit ( un , arBar1 ) ;
6578: LD_VAR 0 2
6582: PPUSH
6583: LD_INT 37
6585: PPUSH
6586: CALL_OW 120
// end ;
6590: GO 6444
6592: POP
6593: POP
// if enemyInBase then
6594: LD_VAR 0 14
6598: IFFALSE 6743
// begin for i in sol do
6600: LD_ADDR_VAR 0 1
6604: PUSH
6605: LD_VAR 0 12
6609: PUSH
6610: FOR_IN
6611: IFFALSE 6739
// begin tw := IsInUnit ( i ) ;
6613: LD_ADDR_VAR 0 10
6617: PUSH
6618: LD_VAR 0 1
6622: PPUSH
6623: CALL_OW 310
6627: ST_TO_ADDR
// if tw then
6628: LD_VAR 0 10
6632: IFFALSE 6713
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
6634: LD_VAR 0 10
6638: PUSH
6639: LD_INT 22
6641: PUSH
6642: LD_VAR 0 4
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PUSH
6651: LD_INT 101
6653: PUSH
6654: LD_INT 2
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: PUSH
6661: LD_INT 2
6663: PUSH
6664: LD_INT 30
6666: PUSH
6667: LD_INT 32
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: PUSH
6674: LD_INT 30
6676: PUSH
6677: LD_INT 31
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: LIST
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: LIST
6693: PPUSH
6694: CALL_OW 69
6698: IN
6699: NOT
6700: IFFALSE 6711
// ComExitBuilding ( i ) ;
6702: LD_VAR 0 1
6706: PPUSH
6707: CALL_OW 122
// end else
6711: GO 6737
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
6713: LD_VAR 0 1
6717: PPUSH
6718: LD_VAR 0 14
6722: PPUSH
6723: LD_VAR 0 1
6727: PPUSH
6728: CALL_OW 74
6732: PPUSH
6733: CALL_OW 115
// end ;
6737: GO 6610
6739: POP
6740: POP
// end else
6741: GO 7126
// begin empty := FilterUnitsInArea ( arBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
6743: LD_ADDR_VAR 0 15
6747: PUSH
6748: LD_INT 5
6750: PPUSH
6751: LD_INT 3
6753: PUSH
6754: LD_INT 62
6756: PUSH
6757: EMPTY
6758: LIST
6759: PUSH
6760: EMPTY
6761: LIST
6762: LIST
6763: PUSH
6764: LD_INT 2
6766: PUSH
6767: LD_INT 30
6769: PUSH
6770: LD_INT 32
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: LD_INT 30
6779: PUSH
6780: LD_INT 4
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: PUSH
6787: LD_INT 30
6789: PUSH
6790: LD_INT 5
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PUSH
6797: LD_INT 30
6799: PUSH
6800: LD_INT 31
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: PPUSH
6818: CALL_OW 70
6822: ST_TO_ADDR
// if empty then
6823: LD_VAR 0 15
6827: IFFALSE 6844
// empty := ReverseArray ( empty ) ;
6829: LD_ADDR_VAR 0 15
6833: PUSH
6834: LD_VAR 0 15
6838: PPUSH
6839: CALL 88937 0 1
6843: ST_TO_ADDR
// for i in sol do
6844: LD_ADDR_VAR 0 1
6848: PUSH
6849: LD_VAR 0 12
6853: PUSH
6854: FOR_IN
6855: IFFALSE 7124
// begin tag := GetTag ( i ) ;
6857: LD_ADDR_VAR 0 8
6861: PUSH
6862: LD_VAR 0 1
6866: PPUSH
6867: CALL_OW 110
6871: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
6872: LD_VAR 0 1
6876: PPUSH
6877: CALL_OW 256
6881: PUSH
6882: LD_INT 1000
6884: LESS
6885: IFFALSE 6897
6887: PUSH
6888: LD_VAR 0 8
6892: PUSH
6893: LD_INT 1
6895: NONEQUAL
6896: AND
6897: IFFALSE 6937
// begin SetTag ( i , tHeal ) ;
6899: LD_VAR 0 1
6903: PPUSH
6904: LD_INT 1
6906: PPUSH
6907: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
6911: LD_VAR 0 1
6915: PPUSH
6916: LD_INT 72
6918: PPUSH
6919: LD_INT 15
6921: PPUSH
6922: CALL_OW 111
// AddComHold ( i ) ;
6926: LD_VAR 0 1
6930: PPUSH
6931: CALL_OW 200
// continue ;
6935: GO 6854
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
6937: LD_VAR 0 1
6941: PPUSH
6942: CALL_OW 256
6946: PUSH
6947: LD_INT 1000
6949: EQUAL
6950: IFFALSE 6962
6952: PUSH
6953: LD_VAR 0 8
6957: PUSH
6958: LD_INT 1
6960: EQUAL
6961: AND
6962: IFFALSE 7045
// begin if MineOfUnit ( i ) or Count ( UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ) < 3 then
6964: LD_VAR 0 1
6968: PPUSH
6969: CALL_OW 459
6973: IFTRUE 7015
6975: PUSH
6976: LD_VAR 0 12
6980: PPUSH
6981: LD_INT 50
6983: PUSH
6984: EMPTY
6985: LIST
6986: PUSH
6987: LD_INT 120
6989: PUSH
6990: LD_INT 6
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PPUSH
7001: CALL_OW 72
7005: PPUSH
7006: CALL 57915 0 1
7010: PUSH
7011: LD_INT 3
7013: LESS
7014: OR
7015: IFFALSE 7031
// SetTag ( i , tMine ) else
7017: LD_VAR 0 1
7021: PPUSH
7022: LD_INT 6
7024: PPUSH
7025: CALL_OW 109
7029: GO 7043
// SetTag ( i , 0 ) ;
7031: LD_VAR 0 1
7035: PPUSH
7036: LD_INT 0
7038: PPUSH
7039: CALL_OW 109
// continue ;
7043: GO 6854
// end ; if tag = tMine then
7045: LD_VAR 0 8
7049: PUSH
7050: LD_INT 6
7052: EQUAL
7053: IFFALSE 7057
// continue ;
7055: GO 6854
// if not IsInUnit ( i ) and not tag and empty then
7057: LD_VAR 0 1
7061: PPUSH
7062: CALL_OW 310
7066: NOT
7067: IFFALSE 7076
7069: PUSH
7070: LD_VAR 0 8
7074: NOT
7075: AND
7076: IFFALSE 7084
7078: PUSH
7079: LD_VAR 0 15
7083: AND
7084: IFFALSE 7122
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
7086: LD_VAR 0 1
7090: PPUSH
7091: LD_VAR 0 15
7095: PUSH
7096: LD_INT 1
7098: ARRAY
7099: PPUSH
7100: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
7104: LD_ADDR_VAR 0 15
7108: PUSH
7109: LD_VAR 0 15
7113: PPUSH
7114: LD_INT 1
7116: PPUSH
7117: CALL_OW 3
7121: ST_TO_ADDR
// end ; end ;
7122: GO 6854
7124: POP
7125: POP
// end ; end ; end ;
7126: PPOPN 16
7128: END
// every 0 0$1 trigger Count ( arEscapist ) do var i ;
7129: LD_EXP 56
7133: PPUSH
7134: CALL 57915 0 1
7138: IFFALSE 7283
7140: GO 7142
7142: DISABLE
7143: LD_INT 0
7145: PPUSH
// begin enable ;
7146: ENABLE
// for i in UnitFilter ( arEscapist , [ f_ok ] ) do
7147: LD_ADDR_VAR 0 1
7151: PUSH
7152: LD_EXP 56
7156: PPUSH
7157: LD_INT 50
7159: PUSH
7160: EMPTY
7161: LIST
7162: PPUSH
7163: CALL_OW 72
7167: PUSH
7168: FOR_IN
7169: IFFALSE 7281
// begin if not HasTask ( i ) then
7171: LD_VAR 0 1
7175: PPUSH
7176: CALL_OW 314
7180: NOT
7181: IFFALSE 7195
// AddComMoveToArea ( i , khatamArea ) ;
7183: LD_VAR 0 1
7187: PPUSH
7188: LD_INT 11
7190: PPUSH
7191: CALL_OW 173
// if IsInArea ( i , khatamArea ) then
7195: LD_VAR 0 1
7199: PPUSH
7200: LD_INT 11
7202: PPUSH
7203: CALL_OW 308
7207: IFFALSE 7279
// begin RemoveUnit ( i ) ;
7209: LD_VAR 0 1
7213: PPUSH
7214: CALL_OW 64
// arEscapist := arEscapist diff i ;
7218: LD_ADDR_EXP 56
7222: PUSH
7223: LD_EXP 56
7227: PUSH
7228: LD_VAR 0 1
7232: DIFF
7233: ST_TO_ADDR
// arabianEscapedCounter := Inc ( arabianEscapedCounter ) ;
7234: LD_ADDR_EXP 21
7238: PUSH
7239: LD_EXP 21
7243: PPUSH
7244: CALL 95220 0 1
7248: ST_TO_ADDR
// if i = Dietrich then
7249: LD_VAR 0 1
7253: PUSH
7254: LD_EXP 50
7258: EQUAL
7259: IFFALSE 7279
// begin gensherEscaped := true ;
7261: LD_ADDR_EXP 13
7265: PUSH
7266: LD_INT 1
7268: ST_TO_ADDR
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
7269: LD_INT 1
7271: PPUSH
7272: LD_STRING 10_GensherEscape_1
7274: PPUSH
7275: CALL_OW 39
// end ; end ; end ;
7279: GO 7168
7281: POP
7282: POP
// end ;
7283: PPOPN 1
7285: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ; var i , skill , un , veh ; begin
7286: LD_INT 0
7288: PPUSH
7289: PPUSH
7290: PPUSH
7291: PPUSH
7292: PPUSH
// uc_side := 5 ;
7293: LD_ADDR_OWVAR 20
7297: PUSH
7298: LD_INT 5
7300: ST_TO_ADDR
// uc_nation := nation_arabian ;
7301: LD_ADDR_OWVAR 21
7305: PUSH
7306: LD_INT 2
7308: ST_TO_ADDR
// skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
7309: LD_ADDR_VAR 0 3
7313: PUSH
7314: LD_INT 5
7316: PUSH
7317: LD_INT 6
7319: PUSH
7320: LD_INT 7
7322: PUSH
7323: LD_INT 8
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: PUSH
7332: LD_OWVAR 67
7336: ARRAY
7337: ST_TO_ADDR
// arAttackersInf := [ ] ;
7338: LD_ADDR_EXP 57
7342: PUSH
7343: EMPTY
7344: ST_TO_ADDR
// arAttackersVeh := [ ] ;
7345: LD_ADDR_EXP 58
7349: PUSH
7350: EMPTY
7351: ST_TO_ADDR
// InitHC_All ( ) ;
7352: CALL_OW 584
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
7356: LD_ADDR_VAR 0 2
7360: PUSH
7361: DOUBLE
7362: LD_INT 1
7364: DEC
7365: ST_TO_ADDR
7366: LD_INT 3
7368: PUSH
7369: LD_INT 4
7371: PUSH
7372: LD_INT 5
7374: PUSH
7375: LD_INT 6
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: PUSH
7384: LD_OWVAR 67
7388: ARRAY
7389: PUSH
7390: FOR_TO
7391: IFFALSE 7493
// begin PrepareSoldier ( false , skill ) ;
7393: LD_INT 0
7395: PPUSH
7396: LD_VAR 0 3
7400: PPUSH
7401: CALL_OW 381
// un := CreateHuman ;
7405: LD_ADDR_VAR 0 4
7409: PUSH
7410: CALL_OW 44
7414: ST_TO_ADDR
// if i mod 2 = 0 then
7415: LD_VAR 0 2
7419: PUSH
7420: LD_INT 2
7422: MOD
7423: PUSH
7424: LD_INT 0
7426: EQUAL
7427: IFFALSE 7441
// SetClass ( un , class_mortar ) ;
7429: LD_VAR 0 4
7433: PPUSH
7434: LD_INT 8
7436: PPUSH
7437: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
7441: LD_VAR 0 4
7445: PPUSH
7446: LD_INT 19
7448: PPUSH
7449: LD_INT 0
7451: PPUSH
7452: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
7456: LD_ADDR_EXP 57
7460: PUSH
7461: LD_EXP 57
7465: PPUSH
7466: LD_VAR 0 4
7470: PPUSH
7471: CALL 93847 0 2
7475: ST_TO_ADDR
// ComAgressiveMove ( un , 104 , 60 ) ;
7476: LD_VAR 0 4
7480: PPUSH
7481: LD_INT 104
7483: PPUSH
7484: LD_INT 60
7486: PPUSH
7487: CALL_OW 114
// end ;
7491: GO 7390
7493: POP
7494: POP
// for i := 1 to 3 do
7495: LD_ADDR_VAR 0 2
7499: PUSH
7500: DOUBLE
7501: LD_INT 1
7503: DEC
7504: ST_TO_ADDR
7505: LD_INT 3
7507: PUSH
7508: FOR_TO
7509: IFFALSE 7661
// begin PrepareMechanic ( false , skill ) ;
7511: LD_INT 0
7513: PPUSH
7514: LD_VAR 0 3
7518: PPUSH
7519: CALL_OW 383
// un := CreateHuman ;
7523: LD_ADDR_VAR 0 4
7527: PUSH
7528: CALL_OW 44
7532: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
7533: LD_INT 14
7535: PPUSH
7536: LD_INT 1
7538: PPUSH
7539: LD_INT 1
7541: PPUSH
7542: LD_INT 27
7544: PUSH
7545: LD_INT 25
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PUSH
7552: LD_VAR 0 2
7556: PUSH
7557: LD_INT 2
7559: MOD
7560: PUSH
7561: LD_INT 1
7563: PLUS
7564: ARRAY
7565: PPUSH
7566: LD_INT 80
7568: PPUSH
7569: CALL 60677 0 5
// veh := CreateVehicle ;
7573: LD_ADDR_VAR 0 5
7577: PUSH
7578: CALL_OW 45
7582: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7583: LD_VAR 0 5
7587: PPUSH
7588: LD_INT 4
7590: PPUSH
7591: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7595: LD_VAR 0 5
7599: PPUSH
7600: LD_INT 18
7602: PPUSH
7603: LD_INT 0
7605: PPUSH
7606: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7610: LD_VAR 0 4
7614: PPUSH
7615: LD_VAR 0 5
7619: PPUSH
7620: CALL_OW 52
// ComMoveXY ( un , 129 , 20 ) ;
7624: LD_VAR 0 4
7628: PPUSH
7629: LD_INT 129
7631: PPUSH
7632: LD_INT 20
7634: PPUSH
7635: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7639: LD_ADDR_EXP 58
7643: PUSH
7644: LD_EXP 58
7648: PPUSH
7649: LD_VAR 0 5
7653: PPUSH
7654: CALL 93847 0 2
7658: ST_TO_ADDR
// end ;
7659: GO 7508
7661: POP
7662: POP
// wait ( 0 0$2 ) ;
7663: LD_INT 70
7665: PPUSH
7666: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
7670: LD_ADDR_VAR 0 2
7674: PUSH
7675: DOUBLE
7676: LD_INT 1
7678: DEC
7679: ST_TO_ADDR
7680: LD_INT 1
7682: PUSH
7683: LD_INT 2
7685: PUSH
7686: LD_INT 2
7688: PUSH
7689: LD_INT 3
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: PUSH
7698: LD_OWVAR 67
7702: ARRAY
7703: PUSH
7704: FOR_TO
7705: IFFALSE 7836
// begin PrepareMechanic ( false , skill ) ;
7707: LD_INT 0
7709: PPUSH
7710: LD_VAR 0 3
7714: PPUSH
7715: CALL_OW 383
// un := CreateHuman ;
7719: LD_ADDR_VAR 0 4
7723: PUSH
7724: CALL_OW 44
7728: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
7729: LD_INT 14
7731: PPUSH
7732: LD_INT 1
7734: PPUSH
7735: LD_INT 1
7737: PPUSH
7738: LD_INT 26
7740: PPUSH
7741: LD_INT 80
7743: PPUSH
7744: CALL 60677 0 5
// veh := CreateVehicle ;
7748: LD_ADDR_VAR 0 5
7752: PUSH
7753: CALL_OW 45
7757: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7758: LD_VAR 0 5
7762: PPUSH
7763: LD_INT 4
7765: PPUSH
7766: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7770: LD_VAR 0 5
7774: PPUSH
7775: LD_INT 18
7777: PPUSH
7778: LD_INT 0
7780: PPUSH
7781: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7785: LD_VAR 0 4
7789: PPUSH
7790: LD_VAR 0 5
7794: PPUSH
7795: CALL_OW 52
// ComMoveXY ( un , 133 , 40 ) ;
7799: LD_VAR 0 4
7803: PPUSH
7804: LD_INT 133
7806: PPUSH
7807: LD_INT 40
7809: PPUSH
7810: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7814: LD_ADDR_EXP 58
7818: PUSH
7819: LD_EXP 58
7823: PPUSH
7824: LD_VAR 0 5
7828: PPUSH
7829: CALL 93847 0 2
7833: ST_TO_ADDR
// end ;
7834: GO 7704
7836: POP
7837: POP
// wait ( 0 0$2 ) ;
7838: LD_INT 70
7840: PPUSH
7841: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
7845: LD_ADDR_VAR 0 2
7849: PUSH
7850: DOUBLE
7851: LD_INT 1
7853: DEC
7854: ST_TO_ADDR
7855: LD_INT 1
7857: PUSH
7858: LD_INT 2
7860: PUSH
7861: LD_INT 3
7863: PUSH
7864: LD_INT 4
7866: PUSH
7867: EMPTY
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: PUSH
7873: LD_OWVAR 67
7877: ARRAY
7878: PUSH
7879: FOR_TO
7880: IFFALSE 8042
// begin PrepareMechanic ( false , skill ) ;
7882: LD_INT 0
7884: PPUSH
7885: LD_VAR 0 3
7889: PPUSH
7890: CALL_OW 383
// un := CreateHuman ;
7894: LD_ADDR_VAR 0 4
7898: PUSH
7899: CALL_OW 44
7903: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
7904: LD_INT 14
7906: PPUSH
7907: LD_INT 1
7909: PPUSH
7910: LD_INT 1
7912: PPUSH
7913: LD_INT 28
7915: PPUSH
7916: LD_INT 80
7918: PPUSH
7919: CALL 60677 0 5
// veh := CreateVehicle ;
7923: LD_ADDR_VAR 0 5
7927: PUSH
7928: CALL_OW 45
7932: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7933: LD_VAR 0 5
7937: PPUSH
7938: LD_INT 4
7940: PPUSH
7941: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7945: LD_VAR 0 5
7949: PPUSH
7950: LD_INT 18
7952: PPUSH
7953: LD_INT 0
7955: PPUSH
7956: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7960: LD_VAR 0 4
7964: PPUSH
7965: LD_VAR 0 5
7969: PPUSH
7970: CALL_OW 52
// if i mod 2 = 0 then
7974: LD_VAR 0 2
7978: PUSH
7979: LD_INT 2
7981: MOD
7982: PUSH
7983: LD_INT 0
7985: EQUAL
7986: IFFALSE 8005
// ComMoveXY ( un , 136 , 61 ) else
7988: LD_VAR 0 4
7992: PPUSH
7993: LD_INT 136
7995: PPUSH
7996: LD_INT 61
7998: PPUSH
7999: CALL_OW 111
8003: GO 8020
// ComMoveXY ( un , 137 , 41 ) ;
8005: LD_VAR 0 4
8009: PPUSH
8010: LD_INT 137
8012: PPUSH
8013: LD_INT 41
8015: PPUSH
8016: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
8020: LD_ADDR_EXP 58
8024: PUSH
8025: LD_EXP 58
8029: PPUSH
8030: LD_VAR 0 5
8034: PPUSH
8035: CALL 93847 0 2
8039: ST_TO_ADDR
// end ;
8040: GO 7879
8042: POP
8043: POP
// arabianAttackSpawned := true ;
8044: LD_ADDR_EXP 12
8048: PUSH
8049: LD_INT 1
8051: ST_TO_ADDR
// end ;
8052: LD_VAR 0 1
8056: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest ;
8057: LD_EXP 57
8061: IFFALSE 8478
8063: GO 8065
8065: DISABLE
8066: LD_INT 0
8068: PPUSH
8069: PPUSH
8070: PPUSH
// begin wait ( 0 0$10 ) ;
8071: LD_INT 350
8073: PPUSH
8074: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
8078: LD_ADDR_VAR 0 2
8082: PUSH
8083: LD_EXP 57
8087: PPUSH
8088: LD_INT 25
8090: PUSH
8091: LD_INT 1
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: PUSH
8098: LD_INT 50
8100: PUSH
8101: EMPTY
8102: LIST
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: PPUSH
8108: CALL_OW 72
8112: ST_TO_ADDR
// for i in tmp do
8113: LD_ADDR_VAR 0 1
8117: PUSH
8118: LD_VAR 0 2
8122: PUSH
8123: FOR_IN
8124: IFFALSE 8249
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
8126: LD_ADDR_VAR 0 3
8130: PUSH
8131: LD_INT 22
8133: PUSH
8134: LD_INT 1
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: PUSH
8141: LD_INT 3
8143: PUSH
8144: LD_INT 120
8146: PUSH
8147: LD_INT 11
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 2
8160: PUSH
8161: LD_INT 21
8163: PUSH
8164: LD_INT 2
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: PUSH
8171: LD_INT 21
8173: PUSH
8174: LD_INT 3
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: LIST
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: LIST
8190: PPUSH
8191: CALL_OW 69
8195: PPUSH
8196: LD_VAR 0 1
8200: PPUSH
8201: CALL_OW 74
8205: ST_TO_ADDR
// if not nearest then
8206: LD_VAR 0 3
8210: NOT
8211: IFFALSE 8215
// break ;
8213: GO 8249
// SetTag ( nearest , tMined ) ;
8215: LD_VAR 0 3
8219: PPUSH
8220: LD_INT 11
8222: PPUSH
8223: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
8227: LD_VAR 0 1
8231: PPUSH
8232: LD_INT 0
8234: PPUSH
8235: LD_INT 0
8237: PPUSH
8238: LD_VAR 0 3
8242: PPUSH
8243: CALL_OW 132
// end ;
8247: GO 8123
8249: POP
8250: POP
// if hasBase and epsilon then
8251: LD_EXP 9
8255: IFFALSE 8263
8257: PUSH
8258: LD_EXP 10
8262: AND
8263: IFFALSE 8287
// AddComPlaceDelayedCharge ( tmp , 0 , 0 , epsilon ) else
8265: LD_VAR 0 2
8269: PPUSH
8270: LD_INT 0
8272: PPUSH
8273: LD_INT 0
8275: PPUSH
8276: LD_EXP 10
8280: PPUSH
8281: CALL_OW 192
8285: GO 8302
// AddComMoveXY ( tmp , 107 , 59 ) ;
8287: LD_VAR 0 2
8291: PPUSH
8292: LD_INT 107
8294: PPUSH
8295: LD_INT 59
8297: PPUSH
8298: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8302: LD_INT 35
8304: PPUSH
8305: CALL_OW 67
// until IsDead ( Dietrich ) or gensherEscaped ;
8309: LD_EXP 50
8313: PPUSH
8314: CALL_OW 301
8318: IFTRUE 8326
8320: PUSH
8321: LD_EXP 13
8325: OR
8326: IFFALSE 8302
// if not gensherEscaped then
8328: LD_EXP 13
8332: NOT
8333: IFFALSE 8342
// wait ( 1 1$20 ) ;
8335: LD_INT 2800
8337: PPUSH
8338: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
8342: LD_ADDR_VAR 0 2
8346: PUSH
8347: LD_EXP 57
8351: PPUSH
8352: LD_INT 50
8354: PUSH
8355: EMPTY
8356: LIST
8357: PPUSH
8358: CALL_OW 72
8362: ST_TO_ADDR
// ComMoveXY ( tmp , 143 , 117 ) ;
8363: LD_VAR 0 2
8367: PPUSH
8368: LD_INT 143
8370: PPUSH
8371: LD_INT 117
8373: PPUSH
8374: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8378: LD_INT 35
8380: PPUSH
8381: CALL_OW 67
// for i in tmp do
8385: LD_ADDR_VAR 0 1
8389: PUSH
8390: LD_VAR 0 2
8394: PUSH
8395: FOR_IN
8396: IFFALSE 8469
// if IsInArea ( i , arAttackSpawn2Area ) then
8398: LD_VAR 0 1
8402: PPUSH
8403: LD_INT 19
8405: PPUSH
8406: CALL_OW 308
8410: IFFALSE 8455
// begin tmp := tmp diff i ;
8412: LD_ADDR_VAR 0 2
8416: PUSH
8417: LD_VAR 0 2
8421: PUSH
8422: LD_VAR 0 1
8426: DIFF
8427: ST_TO_ADDR
// arAttackersInf := arAttackersInf diff i ;
8428: LD_ADDR_EXP 57
8432: PUSH
8433: LD_EXP 57
8437: PUSH
8438: LD_VAR 0 1
8442: DIFF
8443: ST_TO_ADDR
// RemoveUnit ( i ) ;
8444: LD_VAR 0 1
8448: PPUSH
8449: CALL_OW 64
// end else
8453: GO 8467
// ComMoveToArea ( i , arAttackSpawn2Area ) ;
8455: LD_VAR 0 1
8459: PPUSH
8460: LD_INT 19
8462: PPUSH
8463: CALL_OW 113
8467: GO 8395
8469: POP
8470: POP
// until not tmp ;
8471: LD_VAR 0 2
8475: NOT
8476: IFFALSE 8378
// end ;
8478: PPOPN 3
8480: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp , p ;
8481: LD_EXP 58
8485: IFFALSE 8773
8487: GO 8489
8489: DISABLE
8490: LD_INT 0
8492: PPUSH
8493: PPUSH
8494: PPUSH
// begin p := 0 ;
8495: LD_ADDR_VAR 0 3
8499: PUSH
8500: LD_INT 0
8502: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8503: LD_INT 35
8505: PPUSH
8506: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8510: LD_ADDR_VAR 0 2
8514: PUSH
8515: LD_EXP 58
8519: PPUSH
8520: LD_INT 50
8522: PUSH
8523: EMPTY
8524: LIST
8525: PPUSH
8526: CALL_OW 72
8530: ST_TO_ADDR
// for i in tmp do
8531: LD_ADDR_VAR 0 1
8535: PUSH
8536: LD_VAR 0 2
8540: PUSH
8541: FOR_IN
8542: IFFALSE 8579
// AgressiveMove ( i , [ [ 143 , 38 ] , [ 111 , 31 ] ] ) ;
8544: LD_VAR 0 1
8548: PPUSH
8549: LD_INT 143
8551: PUSH
8552: LD_INT 38
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: PUSH
8559: LD_INT 111
8561: PUSH
8562: LD_INT 31
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: PPUSH
8573: CALL 96613 0 2
8577: GO 8541
8579: POP
8580: POP
// if IsDead ( Dietrich ) then
8581: LD_EXP 50
8585: PPUSH
8586: CALL_OW 301
8590: IFFALSE 8607
// p := Inc ( p ) ;
8592: LD_ADDR_VAR 0 3
8596: PUSH
8597: LD_VAR 0 3
8601: PPUSH
8602: CALL 95220 0 1
8606: ST_TO_ADDR
// until not tmp or gensherEscaped or p > 40 ;
8607: LD_VAR 0 2
8611: NOT
8612: IFTRUE 8620
8614: PUSH
8615: LD_EXP 13
8619: OR
8620: IFTRUE 8632
8622: PUSH
8623: LD_VAR 0 3
8627: PUSH
8628: LD_INT 40
8630: GREATER
8631: OR
8632: IFFALSE 8503
// if not arAttackersVeh then
8634: LD_EXP 58
8638: NOT
8639: IFFALSE 8643
// exit ;
8641: GO 8773
// repeat wait ( 0 0$1 ) ;
8643: LD_INT 35
8645: PPUSH
8646: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8650: LD_ADDR_VAR 0 2
8654: PUSH
8655: LD_EXP 58
8659: PPUSH
8660: LD_INT 50
8662: PUSH
8663: EMPTY
8664: LIST
8665: PPUSH
8666: CALL_OW 72
8670: ST_TO_ADDR
// for i in tmp do
8671: LD_ADDR_VAR 0 1
8675: PUSH
8676: LD_VAR 0 2
8680: PUSH
8681: FOR_IN
8682: IFFALSE 8764
// if IsInArea ( i , arAttackSpawnArea ) then
8684: LD_VAR 0 1
8688: PPUSH
8689: LD_INT 18
8691: PPUSH
8692: CALL_OW 308
8696: IFFALSE 8750
// begin if IsInUnit ( i ) then
8698: LD_VAR 0 1
8702: PPUSH
8703: CALL_OW 310
8707: IFFALSE 8723
// RemoveUnit ( IsInUnit ( i ) ) ;
8709: LD_VAR 0 1
8713: PPUSH
8714: CALL_OW 310
8718: PPUSH
8719: CALL_OW 64
// RemoveUnit ( i ) ;
8723: LD_VAR 0 1
8727: PPUSH
8728: CALL_OW 64
// arAttackersVeh := arAttackersVeh diff i ;
8732: LD_ADDR_EXP 58
8736: PUSH
8737: LD_EXP 58
8741: PUSH
8742: LD_VAR 0 1
8746: DIFF
8747: ST_TO_ADDR
// end else
8748: GO 8762
// ComMoveToArea ( i , arAttackSpawnArea ) ;
8750: LD_VAR 0 1
8754: PPUSH
8755: LD_INT 18
8757: PPUSH
8758: CALL_OW 113
8762: GO 8681
8764: POP
8765: POP
// until not tmp ;
8766: LD_VAR 0 2
8770: NOT
8771: IFFALSE 8643
// end ; end_of_file
8773: PPOPN 3
8775: END
// export ruForces , ruForces2 , ruCommander , ruCommander2 , ruMech , ruMech2 ; export ruTech , ruBaseArea , ruBaseArea2 , ruBase , ruBase2 , ruConstructList , ruConstructList2 , ruCratesArea , ruCratesArea2 , ruHealPoint , ruHealPoint2 , ruBuildings , ruBuildings2 , ruTransportDestroyed , ruTanks , ruTanks2 , ruExtraTanks , ruParkingArea , ruParkingArea2 , ruCratesSpawnArea , ruCratesSpawnArea2 ; export function PrepareRussian ; var i , j , un , c , skill , sources ; begin
8776: LD_INT 0
8778: PPUSH
8779: PPUSH
8780: PPUSH
8781: PPUSH
8782: PPUSH
8783: PPUSH
8784: PPUSH
// uc_side := 3 ;
8785: LD_ADDR_OWVAR 20
8789: PUSH
8790: LD_INT 3
8792: ST_TO_ADDR
// uc_nation := nation_russian ;
8793: LD_ADDR_OWVAR 21
8797: PUSH
8798: LD_INT 3
8800: ST_TO_ADDR
// ruForces := [ ] ;
8801: LD_ADDR_EXP 59
8805: PUSH
8806: EMPTY
8807: ST_TO_ADDR
// ruForces2 := [ ] ;
8808: LD_ADDR_EXP 60
8812: PUSH
8813: EMPTY
8814: ST_TO_ADDR
// ruMech := [ ] ;
8815: LD_ADDR_EXP 63
8819: PUSH
8820: EMPTY
8821: ST_TO_ADDR
// ruMech2 := [ ] ;
8822: LD_ADDR_EXP 64
8826: PUSH
8827: EMPTY
8828: ST_TO_ADDR
// ruTech := [ tech_LimTeleport , tech_ST1 , tech_Weap2 , tech_Sib1 ] ;
8829: LD_ADDR_EXP 65
8833: PUSH
8834: LD_INT 37
8836: PUSH
8837: LD_INT 63
8839: PUSH
8840: LD_INT 52
8842: PUSH
8843: LD_INT 54
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: ST_TO_ADDR
// ruBaseArea := 0 ;
8852: LD_ADDR_EXP 66
8856: PUSH
8857: LD_INT 0
8859: ST_TO_ADDR
// ruBaseArea2 := 0 ;
8860: LD_ADDR_EXP 67
8864: PUSH
8865: LD_INT 0
8867: ST_TO_ADDR
// ruBase := 0 ;
8868: LD_ADDR_EXP 68
8872: PUSH
8873: LD_INT 0
8875: ST_TO_ADDR
// ruBase2 := 0 ;
8876: LD_ADDR_EXP 69
8880: PUSH
8881: LD_INT 0
8883: ST_TO_ADDR
// ruConstructList := [ ] ;
8884: LD_ADDR_EXP 70
8888: PUSH
8889: EMPTY
8890: ST_TO_ADDR
// ruConstructList2 := [ [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ] ;
8891: LD_ADDR_EXP 71
8895: PUSH
8896: LD_INT 22
8898: PUSH
8899: LD_INT 3
8901: PUSH
8902: LD_INT 1
8904: PUSH
8905: LD_INT 43
8907: PUSH
8908: LD_INT 44
8910: PUSH
8911: LD_INT 45
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: LIST
8918: PUSH
8919: LD_INT 1
8921: PPUSH
8922: LD_INT 3
8924: PPUSH
8925: CALL_OW 12
8929: ARRAY
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: PUSH
8937: LD_INT 22
8939: PUSH
8940: LD_INT 3
8942: PUSH
8943: LD_INT 1
8945: PUSH
8946: LD_INT 43
8948: PUSH
8949: LD_INT 44
8951: PUSH
8952: LD_INT 45
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: LIST
8959: PUSH
8960: LD_INT 1
8962: PPUSH
8963: LD_INT 3
8965: PPUSH
8966: CALL_OW 12
8970: ARRAY
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: PUSH
8978: LD_INT 22
8980: PUSH
8981: LD_INT 3
8983: PUSH
8984: LD_INT 1
8986: PUSH
8987: LD_INT 43
8989: PUSH
8990: LD_INT 44
8992: PUSH
8993: LD_INT 45
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: LIST
9000: PUSH
9001: LD_INT 1
9003: PPUSH
9004: LD_INT 3
9006: PPUSH
9007: CALL_OW 12
9011: ARRAY
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: LIST
9023: ST_TO_ADDR
// ruCratesArea := 0 ;
9024: LD_ADDR_EXP 72
9028: PUSH
9029: LD_INT 0
9031: ST_TO_ADDR
// ruCratesArea2 := 0 ;
9032: LD_ADDR_EXP 73
9036: PUSH
9037: LD_INT 0
9039: ST_TO_ADDR
// ruHealPoint := [ ] ;
9040: LD_ADDR_EXP 74
9044: PUSH
9045: EMPTY
9046: ST_TO_ADDR
// ruHealPoint2 := [ ] ;
9047: LD_ADDR_EXP 75
9051: PUSH
9052: EMPTY
9053: ST_TO_ADDR
// ruBuildings := [ ] ;
9054: LD_ADDR_EXP 76
9058: PUSH
9059: EMPTY
9060: ST_TO_ADDR
// ruBuildings2 := [ ] ;
9061: LD_ADDR_EXP 77
9065: PUSH
9066: EMPTY
9067: ST_TO_ADDR
// ruTanks := [ ] ;
9068: LD_ADDR_EXP 79
9072: PUSH
9073: EMPTY
9074: ST_TO_ADDR
// ruTanks2 := [ ] ;
9075: LD_ADDR_EXP 80
9079: PUSH
9080: EMPTY
9081: ST_TO_ADDR
// ruParkingArea := 0 ;
9082: LD_ADDR_EXP 82
9086: PUSH
9087: LD_INT 0
9089: ST_TO_ADDR
// ruParkingArea2 := 0 ;
9090: LD_ADDR_EXP 83
9094: PUSH
9095: LD_INT 0
9097: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
9098: LD_ADDR_VAR 0 2
9102: PUSH
9103: DOUBLE
9104: LD_INT 1
9106: DEC
9107: ST_TO_ADDR
9108: LD_INT 2
9110: PUSH
9111: LD_INT 3
9113: PUSH
9114: LD_INT 4
9116: PUSH
9117: LD_INT 4
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: PUSH
9126: LD_OWVAR 67
9130: ARRAY
9131: PUSH
9132: FOR_TO
9133: IFFALSE 9193
// ruConstructList := Join ( ruConstructList , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
9135: LD_ADDR_EXP 70
9139: PUSH
9140: LD_EXP 70
9144: PPUSH
9145: LD_INT 22
9147: PUSH
9148: LD_INT 3
9150: PUSH
9151: LD_INT 1
9153: PUSH
9154: LD_INT 43
9156: PUSH
9157: LD_INT 44
9159: PUSH
9160: LD_INT 45
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: LIST
9167: PUSH
9168: LD_INT 1
9170: PPUSH
9171: LD_INT 3
9173: PPUSH
9174: CALL_OW 12
9178: ARRAY
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: PPUSH
9186: CALL 93847 0 2
9190: ST_TO_ADDR
9191: GO 9132
9193: POP
9194: POP
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
9195: LD_ADDR_VAR 0 7
9199: PUSH
9200: LD_INT 43
9202: PUSH
9203: LD_INT 68
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PUSH
9210: LD_INT 43
9212: PUSH
9213: LD_INT 79
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 99
9222: PUSH
9223: LD_INT 114
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: LD_INT 103
9232: PUSH
9233: LD_INT 114
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: PUSH
9240: LD_INT 156
9242: PUSH
9243: LD_INT 92
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PUSH
9250: LD_INT 152
9252: PUSH
9253: LD_INT 85
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: ST_TO_ADDR
// for i in sources do
9268: LD_ADDR_VAR 0 2
9272: PUSH
9273: LD_VAR 0 7
9277: PUSH
9278: FOR_IN
9279: IFFALSE 9308
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
9281: LD_VAR 0 2
9285: PUSH
9286: LD_INT 1
9288: ARRAY
9289: PPUSH
9290: LD_VAR 0 2
9294: PUSH
9295: LD_INT 2
9297: ARRAY
9298: PPUSH
9299: LD_INT 3
9301: PPUSH
9302: CALL_OW 441
9306: GO 9278
9308: POP
9309: POP
// if Difficulty > 2 then
9310: LD_OWVAR 67
9314: PUSH
9315: LD_INT 2
9317: GREATER
9318: IFFALSE 9346
// begin SetTech ( tech_weap2 , 6 , state_researched ) ;
9320: LD_INT 52
9322: PPUSH
9323: LD_INT 6
9325: PPUSH
9326: LD_INT 2
9328: PPUSH
9329: CALL_OW 322
// SetTech ( tech_comp2 , 6 , state_researched ) ;
9333: LD_INT 58
9335: PPUSH
9336: LD_INT 6
9338: PPUSH
9339: LD_INT 2
9341: PPUSH
9342: CALL_OW 322
// end ; skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
9346: LD_ADDR_VAR 0 6
9350: PUSH
9351: LD_INT 5
9353: PUSH
9354: LD_INT 6
9356: PUSH
9357: LD_INT 7
9359: PUSH
9360: LD_INT 8
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: PUSH
9369: LD_OWVAR 67
9373: ARRAY
9374: ST_TO_ADDR
// ruCommander := PrepareUnit ( Tsaritsyn , false ,  ) ;
9375: LD_ADDR_EXP 61
9379: PUSH
9380: LD_STRING Tsaritsyn
9382: PPUSH
9383: LD_INT 0
9385: PPUSH
9386: LD_STRING 
9388: PPUSH
9389: CALL 55715 0 3
9393: ST_TO_ADDR
// c := 0 ;
9394: LD_ADDR_VAR 0 5
9398: PUSH
9399: LD_INT 0
9401: ST_TO_ADDR
// for i := 1 to 4 do
9402: LD_ADDR_VAR 0 2
9406: PUSH
9407: DOUBLE
9408: LD_INT 1
9410: DEC
9411: ST_TO_ADDR
9412: LD_INT 4
9414: PUSH
9415: FOR_TO
9416: IFFALSE 9649
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9418: LD_ADDR_VAR 0 3
9422: PUSH
9423: DOUBLE
9424: LD_INT 1
9426: DEC
9427: ST_TO_ADDR
9428: LD_INT 5
9430: PUSH
9431: LD_INT 6
9433: PUSH
9434: LD_INT 8
9436: PUSH
9437: LD_INT 9
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: PUSH
9446: LD_OWVAR 67
9450: ARRAY
9451: PUSH
9452: LD_INT 3
9454: PUSH
9455: LD_INT 4
9457: PUSH
9458: LD_INT 5
9460: PUSH
9461: LD_INT 6
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: PUSH
9470: LD_OWVAR 67
9474: ARRAY
9475: PUSH
9476: LD_INT 3
9478: PUSH
9479: LD_INT 4
9481: PUSH
9482: LD_INT 5
9484: PUSH
9485: LD_INT 6
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: PUSH
9494: LD_OWVAR 67
9498: ARRAY
9499: PUSH
9500: LD_INT 2
9502: PUSH
9503: LD_INT 3
9505: PUSH
9506: LD_INT 3
9508: PUSH
9509: LD_INT 3
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: PUSH
9518: LD_OWVAR 67
9522: ARRAY
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: PUSH
9530: LD_VAR 0 2
9534: ARRAY
9535: PUSH
9536: FOR_TO
9537: IFFALSE 9645
// begin c := Inc ( c ) ;
9539: LD_ADDR_VAR 0 5
9543: PUSH
9544: LD_VAR 0 5
9548: PPUSH
9549: CALL 95220 0 1
9553: ST_TO_ADDR
// PrepareHuman ( false , i , skill ) ;
9554: LD_INT 0
9556: PPUSH
9557: LD_VAR 0 2
9561: PPUSH
9562: LD_VAR 0 6
9566: PPUSH
9567: CALL_OW 380
// un := CreateHuman ;
9571: LD_ADDR_VAR 0 4
9575: PUSH
9576: CALL_OW 44
9580: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
9581: LD_ADDR_EXP 59
9585: PUSH
9586: LD_EXP 59
9590: PPUSH
9591: LD_VAR 0 4
9595: PPUSH
9596: CALL 93847 0 2
9600: ST_TO_ADDR
// if i = 3 then
9601: LD_VAR 0 2
9605: PUSH
9606: LD_INT 3
9608: EQUAL
9609: IFFALSE 9643
// begin ruMech := Join ( ruMech , un ) ;
9611: LD_ADDR_EXP 63
9615: PUSH
9616: LD_EXP 63
9620: PPUSH
9621: LD_VAR 0 4
9625: PPUSH
9626: CALL 93847 0 2
9630: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9631: LD_VAR 0 4
9635: PPUSH
9636: LD_INT 1
9638: PPUSH
9639: CALL_OW 336
// end ; end ;
9643: GO 9536
9645: POP
9646: POP
9647: GO 9415
9649: POP
9650: POP
// debug_strings := c ;
9651: LD_ADDR_OWVAR 48
9655: PUSH
9656: LD_VAR 0 5
9660: ST_TO_ADDR
// if Difficulty < 4 then
9661: LD_OWVAR 67
9665: PUSH
9666: LD_INT 4
9668: LESS
9669: IFFALSE 9673
// exit ;
9671: GO 9945
// PrepareSoldier ( sex_male , skill + 1 ) ;
9673: LD_INT 1
9675: PPUSH
9676: LD_VAR 0 6
9680: PUSH
9681: LD_INT 1
9683: PLUS
9684: PPUSH
9685: CALL_OW 381
// hc_importance := 100 ;
9689: LD_ADDR_OWVAR 32
9693: PUSH
9694: LD_INT 100
9696: ST_TO_ADDR
// ruCommander2 := CreateHuman ;
9697: LD_ADDR_EXP 62
9701: PUSH
9702: CALL_OW 44
9706: ST_TO_ADDR
// InitHc_All ( ) ;
9707: CALL_OW 584
// for i := 1 to 4 do
9711: LD_ADDR_VAR 0 2
9715: PUSH
9716: DOUBLE
9717: LD_INT 1
9719: DEC
9720: ST_TO_ADDR
9721: LD_INT 4
9723: PUSH
9724: FOR_TO
9725: IFFALSE 9943
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9727: LD_ADDR_VAR 0 3
9731: PUSH
9732: DOUBLE
9733: LD_INT 1
9735: DEC
9736: ST_TO_ADDR
9737: LD_INT 5
9739: PUSH
9740: LD_INT 6
9742: PUSH
9743: LD_INT 8
9745: PUSH
9746: LD_INT 9
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: PUSH
9755: LD_OWVAR 67
9759: ARRAY
9760: PUSH
9761: LD_INT 3
9763: PUSH
9764: LD_INT 4
9766: PUSH
9767: LD_INT 5
9769: PUSH
9770: LD_INT 6
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: PUSH
9779: LD_OWVAR 67
9783: ARRAY
9784: PUSH
9785: LD_INT 3
9787: PUSH
9788: LD_INT 4
9790: PUSH
9791: LD_INT 5
9793: PUSH
9794: LD_INT 6
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: PUSH
9803: LD_OWVAR 67
9807: ARRAY
9808: PUSH
9809: LD_INT 2
9811: PUSH
9812: LD_INT 3
9814: PUSH
9815: LD_INT 3
9817: PUSH
9818: LD_INT 3
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: PUSH
9827: LD_OWVAR 67
9831: ARRAY
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: PUSH
9839: LD_VAR 0 2
9843: ARRAY
9844: PUSH
9845: FOR_TO
9846: IFFALSE 9939
// begin PrepareHuman ( false , i , skill ) ;
9848: LD_INT 0
9850: PPUSH
9851: LD_VAR 0 2
9855: PPUSH
9856: LD_VAR 0 6
9860: PPUSH
9861: CALL_OW 380
// un := CreateHuman ;
9865: LD_ADDR_VAR 0 4
9869: PUSH
9870: CALL_OW 44
9874: ST_TO_ADDR
// ruForces2 := Join ( ruForces2 , un ) ;
9875: LD_ADDR_EXP 60
9879: PUSH
9880: LD_EXP 60
9884: PPUSH
9885: LD_VAR 0 4
9889: PPUSH
9890: CALL 93847 0 2
9894: ST_TO_ADDR
// if i = 3 then
9895: LD_VAR 0 2
9899: PUSH
9900: LD_INT 3
9902: EQUAL
9903: IFFALSE 9937
// begin ruMech2 := Join ( ruMech2 , un ) ;
9905: LD_ADDR_EXP 64
9909: PUSH
9910: LD_EXP 64
9914: PPUSH
9915: LD_VAR 0 4
9919: PPUSH
9920: CALL 93847 0 2
9924: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9925: LD_VAR 0 4
9929: PPUSH
9930: LD_INT 1
9932: PPUSH
9933: CALL_OW 336
// end ; end ;
9937: GO 9845
9939: POP
9940: POP
9941: GO 9724
9943: POP
9944: POP
// end ;
9945: LD_VAR 0 1
9949: RET
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings ) < 3 do var i ;
9950: LD_EXP 66
9954: PPUSH
9955: LD_INT 30
9957: PUSH
9958: LD_INT 3
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: PUSH
9965: LD_INT 50
9967: PUSH
9968: EMPTY
9969: LIST
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PPUSH
9975: CALL_OW 70
9979: IFFALSE 9996
9981: PUSH
9982: LD_EXP 76
9986: PPUSH
9987: CALL 57915 0 1
9991: PUSH
9992: LD_INT 3
9994: LESS
9995: AND
9996: IFFALSE 10260
9998: GO 10000
10000: DISABLE
10001: LD_INT 0
10003: PPUSH
// begin enable ;
10004: ENABLE
// ruConstructList := ruConstructList ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
10005: LD_ADDR_EXP 70
10009: PUSH
10010: LD_EXP 70
10014: PUSH
10015: LD_INT 22
10017: PUSH
10018: LD_INT 22
10020: PUSH
10021: LD_INT 24
10023: PUSH
10024: LD_INT 24
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: PUSH
10033: LD_OWVAR 67
10037: ARRAY
10038: PUSH
10039: LD_INT 1
10041: PUSH
10042: LD_INT 3
10044: PUSH
10045: LD_INT 44
10047: PUSH
10048: LD_INT 45
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 1
10057: PPUSH
10058: LD_INT 2
10060: PPUSH
10061: CALL_OW 12
10065: ARRAY
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: PUSH
10073: LD_INT 22
10075: PUSH
10076: LD_INT 22
10078: PUSH
10079: LD_INT 24
10081: PUSH
10082: LD_INT 24
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: PUSH
10091: LD_OWVAR 67
10095: ARRAY
10096: PUSH
10097: LD_INT 1
10099: PUSH
10100: LD_INT 3
10102: PUSH
10103: LD_INT 45
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: PUSH
10112: LD_INT 22
10114: PUSH
10115: LD_INT 22
10117: PUSH
10118: LD_INT 24
10120: PUSH
10121: LD_INT 24
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: PUSH
10130: LD_OWVAR 67
10134: ARRAY
10135: PUSH
10136: LD_INT 1
10138: PUSH
10139: LD_INT 3
10141: PUSH
10142: LD_INT 45
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: LIST
10155: ADD
10156: ST_TO_ADDR
// for i := Difficulty downto 1 do
10157: LD_ADDR_VAR 0 1
10161: PUSH
10162: DOUBLE
10163: LD_OWVAR 67
10167: INC
10168: ST_TO_ADDR
10169: LD_INT 1
10171: PUSH
10172: FOR_DOWNTO
10173: IFFALSE 10258
// ruConstructList := Join ( ruConstructList , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 4 ) ] ] ) ;
10175: LD_ADDR_EXP 70
10179: PUSH
10180: LD_EXP 70
10184: PPUSH
10185: LD_INT 22
10187: PUSH
10188: LD_INT 22
10190: PUSH
10191: LD_INT 24
10193: PUSH
10194: LD_INT 24
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: PUSH
10203: LD_OWVAR 67
10207: ARRAY
10208: PUSH
10209: LD_INT 1
10211: PUSH
10212: LD_INT 3
10214: PUSH
10215: LD_INT 44
10217: PUSH
10218: LD_INT 45
10220: PUSH
10221: LD_INT 45
10223: PUSH
10224: LD_INT 43
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: PUSH
10233: LD_INT 1
10235: PPUSH
10236: LD_INT 4
10238: PPUSH
10239: CALL_OW 12
10243: ARRAY
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: PPUSH
10251: CALL 93847 0 2
10255: ST_TO_ADDR
10256: GO 10172
10258: POP
10259: POP
// end ;
10260: PPOPN 1
10262: END
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea2 , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings2 ) < 3 do
10263: LD_EXP 67
10267: PPUSH
10268: LD_INT 30
10270: PUSH
10271: LD_INT 3
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PUSH
10278: LD_INT 50
10280: PUSH
10281: EMPTY
10282: LIST
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PPUSH
10288: CALL_OW 70
10292: IFFALSE 10309
10294: PUSH
10295: LD_EXP 77
10299: PPUSH
10300: CALL 57915 0 1
10304: PUSH
10305: LD_INT 3
10307: LESS
10308: AND
10309: IFFALSE 10504
10311: GO 10313
10313: DISABLE
// begin enable ;
10314: ENABLE
// ruConstructList2 := ruConstructList2 ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] ] ;
10315: LD_ADDR_EXP 71
10319: PUSH
10320: LD_EXP 71
10324: PUSH
10325: LD_INT 22
10327: PUSH
10328: LD_INT 22
10330: PUSH
10331: LD_INT 24
10333: PUSH
10334: LD_INT 24
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: PUSH
10343: LD_INT 1
10345: PPUSH
10346: LD_INT 4
10348: PPUSH
10349: CALL_OW 12
10353: ARRAY
10354: PUSH
10355: LD_INT 1
10357: PUSH
10358: LD_INT 3
10360: PUSH
10361: LD_INT 44
10363: PUSH
10364: LD_INT 45
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: LD_INT 1
10373: PPUSH
10374: LD_INT 2
10376: PPUSH
10377: CALL_OW 12
10381: ARRAY
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: PUSH
10389: LD_INT 22
10391: PUSH
10392: LD_INT 22
10394: PUSH
10395: LD_INT 24
10397: PUSH
10398: LD_INT 24
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 1
10409: PPUSH
10410: LD_INT 4
10412: PPUSH
10413: CALL_OW 12
10417: ARRAY
10418: PUSH
10419: LD_INT 1
10421: PUSH
10422: LD_INT 3
10424: PUSH
10425: LD_INT 45
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: PUSH
10434: LD_INT 22
10436: PUSH
10437: LD_INT 22
10439: PUSH
10440: LD_INT 24
10442: PUSH
10443: LD_INT 24
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: PUSH
10452: LD_INT 1
10454: PPUSH
10455: LD_INT 4
10457: PPUSH
10458: CALL_OW 12
10462: ARRAY
10463: PUSH
10464: LD_INT 1
10466: PUSH
10467: LD_INT 3
10469: PUSH
10470: LD_INT 45
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: PUSH
10479: LD_INT 22
10481: PUSH
10482: LD_INT 1
10484: PUSH
10485: LD_INT 3
10487: PUSH
10488: LD_INT 43
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: ADD
10503: ST_TO_ADDR
// end ;
10504: END
// export function SpawnConvoy ; var i , tmp , spawn , area , path , place , point ; begin
10505: LD_INT 0
10507: PPUSH
10508: PPUSH
10509: PPUSH
10510: PPUSH
10511: PPUSH
10512: PPUSH
10513: PPUSH
10514: PPUSH
// case Difficulty of 1 :
10515: LD_OWVAR 67
10519: PUSH
10520: LD_INT 1
10522: DOUBLE
10523: EQUAL
10524: IFTRUE 10528
10526: GO 10547
10528: POP
// spawn := rand ( 1 , 2 ) ; 2 :
10529: LD_ADDR_VAR 0 4
10533: PUSH
10534: LD_INT 1
10536: PPUSH
10537: LD_INT 2
10539: PPUSH
10540: CALL_OW 12
10544: ST_TO_ADDR
10545: GO 10621
10547: LD_INT 2
10549: DOUBLE
10550: EQUAL
10551: IFTRUE 10555
10553: GO 10574
10555: POP
// spawn := rand ( 1 , 3 ) ; 3 :
10556: LD_ADDR_VAR 0 4
10560: PUSH
10561: LD_INT 1
10563: PPUSH
10564: LD_INT 3
10566: PPUSH
10567: CALL_OW 12
10571: ST_TO_ADDR
10572: GO 10621
10574: LD_INT 3
10576: DOUBLE
10577: EQUAL
10578: IFTRUE 10582
10580: GO 10601
10582: POP
// spawn := rand ( 2 , 3 ) ; 4 :
10583: LD_ADDR_VAR 0 4
10587: PUSH
10588: LD_INT 2
10590: PPUSH
10591: LD_INT 3
10593: PPUSH
10594: CALL_OW 12
10598: ST_TO_ADDR
10599: GO 10621
10601: LD_INT 4
10603: DOUBLE
10604: EQUAL
10605: IFTRUE 10609
10607: GO 10620
10609: POP
// spawn := 3 ; end ;
10610: LD_ADDR_VAR 0 4
10614: PUSH
10615: LD_INT 3
10617: ST_TO_ADDR
10618: GO 10621
10620: POP
// path := [ centerPathArea , westPathArea , eastPathArea ] [ spawn ] ;
10621: LD_ADDR_VAR 0 6
10625: PUSH
10626: LD_INT 24
10628: PUSH
10629: LD_INT 25
10631: PUSH
10632: LD_INT 23
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: LIST
10639: PUSH
10640: LD_VAR 0 4
10644: ARRAY
10645: ST_TO_ADDR
// area := [ ruSpawnCenterArea , ruSpawnWestArea , ruSpawnEastArea ] [ spawn ] ;
10646: LD_ADDR_VAR 0 5
10650: PUSH
10651: LD_INT 21
10653: PUSH
10654: LD_INT 22
10656: PUSH
10657: LD_INT 20
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: LIST
10664: PUSH
10665: LD_VAR 0 4
10669: ARRAY
10670: ST_TO_ADDR
// point := [ [ 96 , 102 ] , [ 54 , 85 ] , [ 146 , 67 ] ] [ spawn ] ;
10671: LD_ADDR_VAR 0 8
10675: PUSH
10676: LD_INT 96
10678: PUSH
10679: LD_INT 102
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: PUSH
10686: LD_INT 54
10688: PUSH
10689: LD_INT 85
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: LD_INT 146
10698: PUSH
10699: LD_INT 67
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: LIST
10710: PUSH
10711: LD_VAR 0 4
10715: ARRAY
10716: ST_TO_ADDR
// for i in ruForces union ruCommander do
10717: LD_ADDR_VAR 0 2
10721: PUSH
10722: LD_EXP 59
10726: PUSH
10727: LD_EXP 61
10731: UNION
10732: PUSH
10733: FOR_IN
10734: IFFALSE 10798
// begin repeat wait ( 0 0$1 ) ;
10736: LD_INT 35
10738: PPUSH
10739: CALL_OW 67
// until PlaceUnitArea ( i , area , false ) ;
10743: LD_VAR 0 2
10747: PPUSH
10748: LD_VAR 0 5
10752: PPUSH
10753: LD_INT 0
10755: PPUSH
10756: CALL_OW 49
10760: IFFALSE 10736
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
10762: LD_VAR 0 2
10766: PPUSH
10767: LD_VAR 0 8
10771: PUSH
10772: LD_INT 1
10774: ARRAY
10775: PPUSH
10776: LD_VAR 0 8
10780: PUSH
10781: LD_INT 2
10783: ARRAY
10784: PPUSH
10785: CALL_OW 111
// wait ( 0 0$0.4 ) ;
10789: LD_INT 14
10791: PPUSH
10792: CALL_OW 67
// end ;
10796: GO 10733
10798: POP
10799: POP
// DRussianConvoy ;
10800: CALL 28762 0 0
// spawnedRussians := true ;
10804: LD_ADDR_EXP 19
10808: PUSH
10809: LD_INT 1
10811: ST_TO_ADDR
// RevealFogArea ( 1 , path ) ;
10812: LD_INT 1
10814: PPUSH
10815: LD_VAR 0 6
10819: PPUSH
10820: CALL_OW 332
// case spawn of 1 :
10824: LD_VAR 0 4
10828: PUSH
10829: LD_INT 1
10831: DOUBLE
10832: EQUAL
10833: IFTRUE 10837
10835: GO 10847
10837: POP
// RaiseSailEvent ( ERussianBaseC ) ; 2 :
10838: LD_INT 102
10840: PPUSH
10841: CALL_OW 427
10845: GO 10884
10847: LD_INT 2
10849: DOUBLE
10850: EQUAL
10851: IFTRUE 10855
10853: GO 10865
10855: POP
// RaiseSailEvent ( ERussianBaseW ) ; 3 :
10856: LD_INT 103
10858: PPUSH
10859: CALL_OW 427
10863: GO 10884
10865: LD_INT 3
10867: DOUBLE
10868: EQUAL
10869: IFTRUE 10873
10871: GO 10883
10873: POP
// RaiseSailEvent ( ERussianBaseE ) ; end ;
10874: LD_INT 104
10876: PPUSH
10877: CALL_OW 427
10881: GO 10884
10883: POP
// if Difficulty < 4 then
10884: LD_OWVAR 67
10888: PUSH
10889: LD_INT 4
10891: LESS
10892: IFFALSE 10896
// exit ;
10894: GO 10982
// RevealFogArea ( 1 , ruSpawnWestArea ) ;
10896: LD_INT 1
10898: PPUSH
10899: LD_INT 22
10901: PPUSH
10902: CALL_OW 332
// for i in ruForces2 union ruCommander2 do
10906: LD_ADDR_VAR 0 2
10910: PUSH
10911: LD_EXP 60
10915: PUSH
10916: LD_EXP 62
10920: UNION
10921: PUSH
10922: FOR_IN
10923: IFFALSE 10973
// begin repeat wait ( 0 0$1 ) ;
10925: LD_INT 35
10927: PPUSH
10928: CALL_OW 67
// until PlaceUnitArea ( i , ruSpawnWestArea , false ) ;
10932: LD_VAR 0 2
10936: PPUSH
10937: LD_INT 22
10939: PPUSH
10940: LD_INT 0
10942: PPUSH
10943: CALL_OW 49
10947: IFFALSE 10925
// ComAgressiveMove ( i , 54 , 85 ) ;
10949: LD_VAR 0 2
10953: PPUSH
10954: LD_INT 54
10956: PPUSH
10957: LD_INT 85
10959: PPUSH
10960: CALL_OW 114
// wait ( 0 0$0.8 ) ;
10964: LD_INT 28
10966: PPUSH
10967: CALL_OW 67
// end ;
10971: GO 10922
10973: POP
10974: POP
// RaiseSailEvent ( ERussianBaseW2 ) ;
10975: LD_INT 105
10977: PPUSH
10978: CALL_OW 427
// end ;
10982: LD_VAR 0 1
10986: RET
// export function RussianBase ( group , option ) ; begin
10987: LD_INT 0
10989: PPUSH
// case option of 1 :
10990: LD_VAR 0 2
10994: PUSH
10995: LD_INT 1
10997: DOUBLE
10998: EQUAL
10999: IFTRUE 11003
11001: GO 11459
11003: POP
// begin ruBaseArea := ruBaseCenterArea ;
11004: LD_ADDR_EXP 66
11008: PUSH
11009: LD_INT 26
11011: ST_TO_ADDR
// ruCratesArea := ruBaseCenterArea ;
11012: LD_ADDR_EXP 72
11016: PUSH
11017: LD_INT 26
11019: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
11020: LD_ADDR_EXP 76
11024: PUSH
11025: LD_INT 0
11027: PUSH
11028: LD_INT 104
11030: PUSH
11031: LD_INT 110
11033: PUSH
11034: LD_INT 5
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 4
11045: PUSH
11046: LD_INT 98
11048: PUSH
11049: LD_INT 90
11051: PUSH
11052: LD_INT 3
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: PUSH
11061: LD_INT 29
11063: PUSH
11064: LD_INT 103
11066: PUSH
11067: LD_INT 114
11069: PUSH
11070: LD_INT 2
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: PUSH
11079: LD_INT 30
11081: PUSH
11082: LD_INT 99
11084: PUSH
11085: LD_INT 114
11087: PUSH
11088: LD_INT 3
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: PUSH
11097: LD_INT 28
11099: PUSH
11100: LD_INT 100
11102: PUSH
11103: LD_INT 112
11105: PUSH
11106: LD_INT 1
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: PUSH
11115: LD_INT 2
11117: PUSH
11118: LD_INT 92
11120: PUSH
11121: LD_INT 101
11123: PUSH
11124: LD_INT 0
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: PUSH
11133: LD_INT 26
11135: PUSH
11136: LD_INT 97
11138: PUSH
11139: LD_INT 116
11141: PUSH
11142: LD_INT 5
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 17
11153: PUSH
11154: LD_INT 96
11156: PUSH
11157: LD_INT 101
11159: PUSH
11160: LD_INT 4
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 18
11171: PUSH
11172: LD_INT 88
11174: PUSH
11175: LD_INT 97
11177: PUSH
11178: LD_INT 2
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 26
11189: PUSH
11190: LD_INT 106
11192: PUSH
11193: LD_INT 92
11195: PUSH
11196: LD_INT 2
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: PUSH
11205: LD_INT 6
11207: PUSH
11208: LD_INT 93
11210: PUSH
11211: LD_INT 110
11213: PUSH
11214: LD_INT 0
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: PUSH
11223: LD_INT 21
11225: PUSH
11226: LD_INT 89
11228: PUSH
11229: LD_INT 101
11231: PUSH
11232: LD_INT 1
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 16
11243: PUSH
11244: LD_INT 95
11246: PUSH
11247: LD_INT 104
11249: PUSH
11250: LD_INT 4
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: PUSH
11259: LD_INT 24
11261: PUSH
11262: LD_INT 92
11264: PUSH
11265: LD_INT 105
11267: PUSH
11268: LD_INT 0
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: PUSH
11277: LD_INT 33
11279: PUSH
11280: LD_INT 88
11282: PUSH
11283: LD_INT 89
11285: PUSH
11286: LD_INT 2
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: PUSH
11295: LD_INT 33
11297: PUSH
11298: LD_INT 86
11300: PUSH
11301: LD_INT 90
11303: PUSH
11304: LD_INT 2
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: PUSH
11313: LD_INT 33
11315: PUSH
11316: LD_INT 85
11318: PUSH
11319: LD_INT 99
11321: PUSH
11322: LD_INT 2
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: PUSH
11331: LD_INT 33
11333: PUSH
11334: LD_INT 85
11336: PUSH
11337: LD_INT 107
11339: PUSH
11340: LD_INT 1
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: PUSH
11349: LD_INT 33
11351: PUSH
11352: LD_INT 105
11354: PUSH
11355: LD_INT 99
11357: PUSH
11358: LD_INT 1
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: PUSH
11367: LD_INT 33
11369: PUSH
11370: LD_INT 102
11372: PUSH
11373: LD_INT 92
11375: PUSH
11376: LD_INT 3
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: PUSH
11385: LD_INT 33
11387: PUSH
11388: LD_INT 105
11390: PUSH
11391: LD_INT 92
11393: PUSH
11394: LD_INT 2
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: ST_TO_ADDR
// ruHealPoint := [ 98 , 107 ] ;
11426: LD_ADDR_EXP 74
11430: PUSH
11431: LD_INT 98
11433: PUSH
11434: LD_INT 107
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: ST_TO_ADDR
// ruParkingArea := ruParkingCenterArea ;
11441: LD_ADDR_EXP 82
11445: PUSH
11446: LD_INT 30
11448: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnCenterArea ;
11449: LD_ADDR_EXP 84
11453: PUSH
11454: LD_INT 36
11456: ST_TO_ADDR
// end ; 2 :
11457: GO 12483
11459: LD_INT 2
11461: DOUBLE
11462: EQUAL
11463: IFTRUE 11467
11465: GO 11961
11467: POP
// begin ruBaseArea := ruBaseWestArea ;
11468: LD_ADDR_EXP 66
11472: PUSH
11473: LD_INT 28
11475: ST_TO_ADDR
// ruCratesArea := ruBaseWestArea ;
11476: LD_ADDR_EXP 72
11480: PUSH
11481: LD_INT 28
11483: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
11484: LD_ADDR_EXP 76
11488: PUSH
11489: LD_INT 0
11491: PUSH
11492: LD_INT 49
11494: PUSH
11495: LD_INT 74
11497: PUSH
11498: LD_INT 3
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 4
11509: PUSH
11510: LD_INT 73
11512: PUSH
11513: LD_INT 88
11515: PUSH
11516: LD_INT 5
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: PUSH
11525: LD_INT 4
11527: PUSH
11528: LD_INT 56
11530: PUSH
11531: LD_INT 62
11533: PUSH
11534: LD_INT 3
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 29
11545: PUSH
11546: LD_INT 43
11548: PUSH
11549: LD_INT 68
11551: PUSH
11552: LD_INT 2
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 30
11563: PUSH
11564: LD_INT 43
11566: PUSH
11567: LD_INT 79
11569: PUSH
11570: LD_INT 5
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 28
11581: PUSH
11582: LD_INT 60
11584: PUSH
11585: LD_INT 75
11587: PUSH
11588: LD_INT 1
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 2
11599: PUSH
11600: LD_INT 50
11602: PUSH
11603: LD_INT 87
11605: PUSH
11606: LD_INT 1
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 26
11617: PUSH
11618: LD_INT 45
11620: PUSH
11621: LD_INT 67
11623: PUSH
11624: LD_INT 2
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: PUSH
11633: LD_INT 17
11635: PUSH
11636: LD_INT 47
11638: PUSH
11639: LD_INT 84
11641: PUSH
11642: LD_INT 2
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 18
11653: PUSH
11654: LD_INT 46
11656: PUSH
11657: LD_INT 87
11659: PUSH
11660: LD_INT 1
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 26
11671: PUSH
11672: LD_INT 41
11674: PUSH
11675: LD_INT 64
11677: PUSH
11678: LD_INT 5
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 6
11689: PUSH
11690: LD_INT 42
11692: PUSH
11693: LD_INT 74
11695: PUSH
11696: LD_INT 1
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: PUSH
11705: LD_INT 21
11707: PUSH
11708: LD_INT 54
11710: PUSH
11711: LD_INT 91
11713: PUSH
11714: LD_INT 5
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 16
11725: PUSH
11726: LD_INT 50
11728: PUSH
11729: LD_INT 83
11731: PUSH
11732: LD_INT 3
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 24
11743: PUSH
11744: LD_INT 50
11746: PUSH
11747: LD_INT 90
11749: PUSH
11750: LD_INT 0
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: PUSH
11759: LD_INT 33
11761: PUSH
11762: LD_INT 51
11764: PUSH
11765: LD_INT 61
11767: PUSH
11768: LD_INT 3
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: PUSH
11777: LD_INT 33
11779: PUSH
11780: LD_INT 42
11782: PUSH
11783: LD_INT 60
11785: PUSH
11786: LD_INT 3
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: PUSH
11795: LD_INT 33
11797: PUSH
11798: LD_INT 36
11800: PUSH
11801: LD_INT 58
11803: PUSH
11804: LD_INT 3
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: PUSH
11813: LD_INT 33
11815: PUSH
11816: LD_INT 39
11818: PUSH
11819: LD_INT 59
11821: PUSH
11822: LD_INT 3
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: PUSH
11831: LD_INT 33
11833: PUSH
11834: LD_INT 61
11836: PUSH
11837: LD_INT 64
11839: PUSH
11840: LD_INT 3
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: PUSH
11849: LD_INT 33
11851: PUSH
11852: LD_INT 63
11854: PUSH
11855: LD_INT 90
11857: PUSH
11858: LD_INT 5
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: PUSH
11867: LD_INT 33
11869: PUSH
11870: LD_INT 64
11872: PUSH
11873: LD_INT 88
11875: PUSH
11876: LD_INT 5
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 33
11887: PUSH
11888: LD_INT 72
11890: PUSH
11891: LD_INT 82
11893: PUSH
11894: LD_INT 5
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
11928: LD_ADDR_EXP 74
11932: PUSH
11933: LD_INT 45
11935: PUSH
11936: LD_INT 75
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: ST_TO_ADDR
// ruParkingArea := ruParkingWestArea ;
11943: LD_ADDR_EXP 82
11947: PUSH
11948: LD_INT 31
11950: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnWestArea ;
11951: LD_ADDR_EXP 84
11955: PUSH
11956: LD_INT 37
11958: ST_TO_ADDR
// end ; 3 :
11959: GO 12483
11961: LD_INT 3
11963: DOUBLE
11964: EQUAL
11965: IFTRUE 11969
11967: GO 12482
11969: POP
// begin ruBaseArea := ruBaseEastArea ;
11970: LD_ADDR_EXP 66
11974: PUSH
11975: LD_INT 27
11977: ST_TO_ADDR
// ruCratesArea := ruBaseEastArea ;
11978: LD_ADDR_EXP 72
11982: PUSH
11983: LD_INT 27
11985: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] , [ b_turret , 158 , 65 , 3 ] , [ b_turret , 144 , 53 , 2 ] , [ b_turret , 150 , 81 , 1 ] ] ;
11986: LD_ADDR_EXP 76
11990: PUSH
11991: LD_INT 0
11993: PUSH
11994: LD_INT 152
11996: PUSH
11997: LD_INT 72
11999: PUSH
12000: LD_INT 4
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 4
12011: PUSH
12012: LD_INT 139
12014: PUSH
12015: LD_INT 69
12017: PUSH
12018: LD_INT 1
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: PUSH
12027: LD_INT 4
12029: PUSH
12030: LD_INT 142
12032: PUSH
12033: LD_INT 56
12035: PUSH
12036: LD_INT 2
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 29
12047: PUSH
12048: LD_INT 152
12050: PUSH
12051: LD_INT 85
12053: PUSH
12054: LD_INT 3
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 30
12065: PUSH
12066: LD_INT 156
12068: PUSH
12069: LD_INT 92
12071: PUSH
12072: LD_INT 3
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 28
12083: PUSH
12084: LD_INT 157
12086: PUSH
12087: LD_INT 96
12089: PUSH
12090: LD_INT 4
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: PUSH
12099: LD_INT 2
12101: PUSH
12102: LD_INT 161
12104: PUSH
12105: LD_INT 74
12107: PUSH
12108: LD_INT 5
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: PUSH
12117: LD_INT 21
12119: PUSH
12120: LD_INT 157
12122: PUSH
12123: LD_INT 74
12125: PUSH
12126: LD_INT 1
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: PUSH
12135: LD_INT 16
12137: PUSH
12138: LD_INT 161
12140: PUSH
12141: LD_INT 77
12143: PUSH
12144: LD_INT 0
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 24
12155: PUSH
12156: LD_INT 165
12158: PUSH
12159: LD_INT 78
12161: PUSH
12162: LD_INT 5
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 17
12173: PUSH
12174: LD_INT 164
12176: PUSH
12177: LD_INT 74
12179: PUSH
12180: LD_INT 4
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 6
12191: PUSH
12192: LD_INT 164
12194: PUSH
12195: LD_INT 95
12197: PUSH
12198: LD_INT 5
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: PUSH
12207: LD_INT 18
12209: PUSH
12210: LD_INT 161
12212: PUSH
12213: LD_INT 70
12215: PUSH
12216: LD_INT 3
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: PUSH
12225: LD_INT 26
12227: PUSH
12228: LD_INT 155
12230: PUSH
12231: LD_INT 87
12233: PUSH
12234: LD_INT 0
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 26
12245: PUSH
12246: LD_INT 159
12248: PUSH
12249: LD_INT 95
12251: PUSH
12252: LD_INT 3
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: PUSH
12261: LD_INT 26
12263: PUSH
12264: LD_INT 167
12266: PUSH
12267: LD_INT 98
12269: PUSH
12270: LD_INT 1
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: PUSH
12279: LD_INT 33
12281: PUSH
12282: LD_INT 152
12284: PUSH
12285: LD_INT 89
12287: PUSH
12288: LD_INT 1
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: PUSH
12297: LD_INT 33
12299: PUSH
12300: LD_INT 134
12302: PUSH
12303: LD_INT 61
12305: PUSH
12306: LD_INT 2
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: PUSH
12315: LD_INT 33
12317: PUSH
12318: LD_INT 156
12320: PUSH
12321: LD_INT 62
12323: PUSH
12324: LD_INT 3
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 33
12335: PUSH
12336: LD_INT 171
12338: PUSH
12339: LD_INT 97
12341: PUSH
12342: LD_INT 5
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: PUSH
12351: LD_INT 33
12353: PUSH
12354: LD_INT 169
12356: PUSH
12357: LD_INT 103
12359: PUSH
12360: LD_INT 5
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: PUSH
12369: LD_INT 33
12371: PUSH
12372: LD_INT 158
12374: PUSH
12375: LD_INT 65
12377: PUSH
12378: LD_INT 3
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: PUSH
12387: LD_INT 33
12389: PUSH
12390: LD_INT 144
12392: PUSH
12393: LD_INT 53
12395: PUSH
12396: LD_INT 2
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: PUSH
12405: LD_INT 33
12407: PUSH
12408: LD_INT 150
12410: PUSH
12411: LD_INT 81
12413: PUSH
12414: LD_INT 1
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: ST_TO_ADDR
// ruHealPoint := [ 145 , 71 ] ;
12449: LD_ADDR_EXP 74
12453: PUSH
12454: LD_INT 145
12456: PUSH
12457: LD_INT 71
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: ST_TO_ADDR
// ruParkingArea := ruParkingEastArea ;
12464: LD_ADDR_EXP 82
12468: PUSH
12469: LD_INT 29
12471: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnEastArea ;
12472: LD_ADDR_EXP 84
12476: PUSH
12477: LD_INT 35
12479: ST_TO_ADDR
// end ; end ;
12480: GO 12483
12482: POP
// ruScriptActive := true ;
12483: LD_ADDR_EXP 14
12487: PUSH
12488: LD_INT 1
12490: ST_TO_ADDR
// end ;
12491: LD_VAR 0 3
12495: RET
// export function RussianBase2 ( group , option ) ; begin
12496: LD_INT 0
12498: PPUSH
// case option of 1 :
12499: LD_VAR 0 2
12503: PUSH
12504: LD_INT 1
12506: DOUBLE
12507: EQUAL
12508: IFTRUE 12512
12510: GO 12968
12512: POP
// begin ruBaseArea2 := ruBaseCenterArea ;
12513: LD_ADDR_EXP 67
12517: PUSH
12518: LD_INT 26
12520: ST_TO_ADDR
// ruCratesArea2 := ruBaseCenterArea ;
12521: LD_ADDR_EXP 73
12525: PUSH
12526: LD_INT 26
12528: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
12529: LD_ADDR_EXP 77
12533: PUSH
12534: LD_INT 0
12536: PUSH
12537: LD_INT 104
12539: PUSH
12540: LD_INT 110
12542: PUSH
12543: LD_INT 5
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: PUSH
12552: LD_INT 4
12554: PUSH
12555: LD_INT 98
12557: PUSH
12558: LD_INT 90
12560: PUSH
12561: LD_INT 3
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: PUSH
12570: LD_INT 29
12572: PUSH
12573: LD_INT 103
12575: PUSH
12576: LD_INT 114
12578: PUSH
12579: LD_INT 2
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: PUSH
12588: LD_INT 30
12590: PUSH
12591: LD_INT 99
12593: PUSH
12594: LD_INT 114
12596: PUSH
12597: LD_INT 3
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: PUSH
12606: LD_INT 28
12608: PUSH
12609: LD_INT 100
12611: PUSH
12612: LD_INT 112
12614: PUSH
12615: LD_INT 1
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: PUSH
12624: LD_INT 2
12626: PUSH
12627: LD_INT 92
12629: PUSH
12630: LD_INT 101
12632: PUSH
12633: LD_INT 0
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 26
12644: PUSH
12645: LD_INT 97
12647: PUSH
12648: LD_INT 116
12650: PUSH
12651: LD_INT 5
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: PUSH
12660: LD_INT 17
12662: PUSH
12663: LD_INT 96
12665: PUSH
12666: LD_INT 101
12668: PUSH
12669: LD_INT 4
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: PUSH
12678: LD_INT 18
12680: PUSH
12681: LD_INT 88
12683: PUSH
12684: LD_INT 97
12686: PUSH
12687: LD_INT 2
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: PUSH
12696: LD_INT 26
12698: PUSH
12699: LD_INT 106
12701: PUSH
12702: LD_INT 92
12704: PUSH
12705: LD_INT 2
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: PUSH
12714: LD_INT 6
12716: PUSH
12717: LD_INT 93
12719: PUSH
12720: LD_INT 110
12722: PUSH
12723: LD_INT 0
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: PUSH
12732: LD_INT 21
12734: PUSH
12735: LD_INT 89
12737: PUSH
12738: LD_INT 101
12740: PUSH
12741: LD_INT 1
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: PUSH
12750: LD_INT 16
12752: PUSH
12753: LD_INT 95
12755: PUSH
12756: LD_INT 104
12758: PUSH
12759: LD_INT 4
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: PUSH
12768: LD_INT 24
12770: PUSH
12771: LD_INT 92
12773: PUSH
12774: LD_INT 105
12776: PUSH
12777: LD_INT 0
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: PUSH
12786: LD_INT 33
12788: PUSH
12789: LD_INT 88
12791: PUSH
12792: LD_INT 89
12794: PUSH
12795: LD_INT 2
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: PUSH
12804: LD_INT 33
12806: PUSH
12807: LD_INT 86
12809: PUSH
12810: LD_INT 90
12812: PUSH
12813: LD_INT 2
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: PUSH
12822: LD_INT 33
12824: PUSH
12825: LD_INT 85
12827: PUSH
12828: LD_INT 99
12830: PUSH
12831: LD_INT 2
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: PUSH
12840: LD_INT 33
12842: PUSH
12843: LD_INT 85
12845: PUSH
12846: LD_INT 107
12848: PUSH
12849: LD_INT 1
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: PUSH
12858: LD_INT 33
12860: PUSH
12861: LD_INT 105
12863: PUSH
12864: LD_INT 99
12866: PUSH
12867: LD_INT 1
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: PUSH
12876: LD_INT 33
12878: PUSH
12879: LD_INT 102
12881: PUSH
12882: LD_INT 92
12884: PUSH
12885: LD_INT 3
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: PUSH
12894: LD_INT 33
12896: PUSH
12897: LD_INT 105
12899: PUSH
12900: LD_INT 92
12902: PUSH
12903: LD_INT 2
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: ST_TO_ADDR
// ruHealPoint2 := [ 98 , 107 ] ;
12935: LD_ADDR_EXP 75
12939: PUSH
12940: LD_INT 98
12942: PUSH
12943: LD_INT 107
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: ST_TO_ADDR
// ruParkingArea2 := ruParkingCenterArea ;
12950: LD_ADDR_EXP 83
12954: PUSH
12955: LD_INT 30
12957: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnCenterArea ;
12958: LD_ADDR_EXP 85
12962: PUSH
12963: LD_INT 36
12965: ST_TO_ADDR
// end ; 2 :
12966: GO 13935
12968: LD_INT 2
12970: DOUBLE
12971: EQUAL
12972: IFTRUE 12976
12974: GO 13470
12976: POP
// begin ruBaseArea2 := ruBaseWestArea ;
12977: LD_ADDR_EXP 67
12981: PUSH
12982: LD_INT 28
12984: ST_TO_ADDR
// ruCratesArea2 := ruBaseWestArea ;
12985: LD_ADDR_EXP 73
12989: PUSH
12990: LD_INT 28
12992: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
12993: LD_ADDR_EXP 77
12997: PUSH
12998: LD_INT 0
13000: PUSH
13001: LD_INT 49
13003: PUSH
13004: LD_INT 74
13006: PUSH
13007: LD_INT 3
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 4
13018: PUSH
13019: LD_INT 73
13021: PUSH
13022: LD_INT 88
13024: PUSH
13025: LD_INT 5
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: PUSH
13034: LD_INT 4
13036: PUSH
13037: LD_INT 56
13039: PUSH
13040: LD_INT 62
13042: PUSH
13043: LD_INT 3
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 29
13054: PUSH
13055: LD_INT 43
13057: PUSH
13058: LD_INT 68
13060: PUSH
13061: LD_INT 2
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 30
13072: PUSH
13073: LD_INT 43
13075: PUSH
13076: LD_INT 79
13078: PUSH
13079: LD_INT 5
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: PUSH
13088: LD_INT 28
13090: PUSH
13091: LD_INT 60
13093: PUSH
13094: LD_INT 75
13096: PUSH
13097: LD_INT 1
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: PUSH
13106: LD_INT 2
13108: PUSH
13109: LD_INT 50
13111: PUSH
13112: LD_INT 87
13114: PUSH
13115: LD_INT 1
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 26
13126: PUSH
13127: LD_INT 45
13129: PUSH
13130: LD_INT 67
13132: PUSH
13133: LD_INT 2
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: PUSH
13142: LD_INT 17
13144: PUSH
13145: LD_INT 47
13147: PUSH
13148: LD_INT 84
13150: PUSH
13151: LD_INT 2
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 18
13162: PUSH
13163: LD_INT 46
13165: PUSH
13166: LD_INT 87
13168: PUSH
13169: LD_INT 1
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 26
13180: PUSH
13181: LD_INT 41
13183: PUSH
13184: LD_INT 64
13186: PUSH
13187: LD_INT 5
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 6
13198: PUSH
13199: LD_INT 42
13201: PUSH
13202: LD_INT 74
13204: PUSH
13205: LD_INT 1
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 21
13216: PUSH
13217: LD_INT 54
13219: PUSH
13220: LD_INT 91
13222: PUSH
13223: LD_INT 5
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: PUSH
13232: LD_INT 16
13234: PUSH
13235: LD_INT 50
13237: PUSH
13238: LD_INT 83
13240: PUSH
13241: LD_INT 3
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 24
13252: PUSH
13253: LD_INT 50
13255: PUSH
13256: LD_INT 90
13258: PUSH
13259: LD_INT 0
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 33
13270: PUSH
13271: LD_INT 51
13273: PUSH
13274: LD_INT 61
13276: PUSH
13277: LD_INT 3
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: PUSH
13286: LD_INT 33
13288: PUSH
13289: LD_INT 42
13291: PUSH
13292: LD_INT 60
13294: PUSH
13295: LD_INT 3
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: PUSH
13304: LD_INT 33
13306: PUSH
13307: LD_INT 36
13309: PUSH
13310: LD_INT 58
13312: PUSH
13313: LD_INT 3
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 33
13324: PUSH
13325: LD_INT 39
13327: PUSH
13328: LD_INT 59
13330: PUSH
13331: LD_INT 3
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: PUSH
13340: LD_INT 33
13342: PUSH
13343: LD_INT 61
13345: PUSH
13346: LD_INT 64
13348: PUSH
13349: LD_INT 3
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: PUSH
13358: LD_INT 33
13360: PUSH
13361: LD_INT 63
13363: PUSH
13364: LD_INT 90
13366: PUSH
13367: LD_INT 5
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 33
13378: PUSH
13379: LD_INT 64
13381: PUSH
13382: LD_INT 88
13384: PUSH
13385: LD_INT 5
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 33
13396: PUSH
13397: LD_INT 72
13399: PUSH
13400: LD_INT 82
13402: PUSH
13403: LD_INT 5
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
13437: LD_ADDR_EXP 74
13441: PUSH
13442: LD_INT 45
13444: PUSH
13445: LD_INT 75
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: ST_TO_ADDR
// ruParkingArea2 := ruParkingWestArea ;
13452: LD_ADDR_EXP 83
13456: PUSH
13457: LD_INT 31
13459: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnWestArea ;
13460: LD_ADDR_EXP 85
13464: PUSH
13465: LD_INT 37
13467: ST_TO_ADDR
// end ; 3 :
13468: GO 13935
13470: LD_INT 3
13472: DOUBLE
13473: EQUAL
13474: IFTRUE 13478
13476: GO 13934
13478: POP
// begin ruBaseArea2 := ruBaseEastArea ;
13479: LD_ADDR_EXP 67
13483: PUSH
13484: LD_INT 27
13486: ST_TO_ADDR
// ruCratesArea2 := ruBaseEastArea ;
13487: LD_ADDR_EXP 73
13491: PUSH
13492: LD_INT 27
13494: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] ] ;
13495: LD_ADDR_EXP 77
13499: PUSH
13500: LD_INT 0
13502: PUSH
13503: LD_INT 152
13505: PUSH
13506: LD_INT 72
13508: PUSH
13509: LD_INT 4
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 4
13520: PUSH
13521: LD_INT 139
13523: PUSH
13524: LD_INT 69
13526: PUSH
13527: LD_INT 1
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: PUSH
13536: LD_INT 4
13538: PUSH
13539: LD_INT 142
13541: PUSH
13542: LD_INT 56
13544: PUSH
13545: LD_INT 2
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 29
13556: PUSH
13557: LD_INT 152
13559: PUSH
13560: LD_INT 85
13562: PUSH
13563: LD_INT 3
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: PUSH
13572: LD_INT 30
13574: PUSH
13575: LD_INT 156
13577: PUSH
13578: LD_INT 92
13580: PUSH
13581: LD_INT 3
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 28
13592: PUSH
13593: LD_INT 157
13595: PUSH
13596: LD_INT 96
13598: PUSH
13599: LD_INT 4
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: PUSH
13608: LD_INT 2
13610: PUSH
13611: LD_INT 161
13613: PUSH
13614: LD_INT 74
13616: PUSH
13617: LD_INT 5
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 21
13628: PUSH
13629: LD_INT 157
13631: PUSH
13632: LD_INT 74
13634: PUSH
13635: LD_INT 1
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: PUSH
13644: LD_INT 16
13646: PUSH
13647: LD_INT 161
13649: PUSH
13650: LD_INT 77
13652: PUSH
13653: LD_INT 0
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 24
13664: PUSH
13665: LD_INT 165
13667: PUSH
13668: LD_INT 78
13670: PUSH
13671: LD_INT 5
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: PUSH
13680: LD_INT 17
13682: PUSH
13683: LD_INT 164
13685: PUSH
13686: LD_INT 74
13688: PUSH
13689: LD_INT 4
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: PUSH
13698: LD_INT 6
13700: PUSH
13701: LD_INT 164
13703: PUSH
13704: LD_INT 95
13706: PUSH
13707: LD_INT 5
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 18
13718: PUSH
13719: LD_INT 161
13721: PUSH
13722: LD_INT 70
13724: PUSH
13725: LD_INT 3
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: PUSH
13734: LD_INT 26
13736: PUSH
13737: LD_INT 155
13739: PUSH
13740: LD_INT 87
13742: PUSH
13743: LD_INT 0
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: PUSH
13752: LD_INT 26
13754: PUSH
13755: LD_INT 159
13757: PUSH
13758: LD_INT 95
13760: PUSH
13761: LD_INT 3
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: PUSH
13770: LD_INT 26
13772: PUSH
13773: LD_INT 167
13775: PUSH
13776: LD_INT 98
13778: PUSH
13779: LD_INT 1
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: PUSH
13788: LD_INT 33
13790: PUSH
13791: LD_INT 152
13793: PUSH
13794: LD_INT 89
13796: PUSH
13797: LD_INT 1
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: PUSH
13806: LD_INT 33
13808: PUSH
13809: LD_INT 134
13811: PUSH
13812: LD_INT 61
13814: PUSH
13815: LD_INT 2
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 33
13826: PUSH
13827: LD_INT 156
13829: PUSH
13830: LD_INT 62
13832: PUSH
13833: LD_INT 3
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: PUSH
13842: LD_INT 33
13844: PUSH
13845: LD_INT 171
13847: PUSH
13848: LD_INT 97
13850: PUSH
13851: LD_INT 5
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: PUSH
13860: LD_INT 33
13862: PUSH
13863: LD_INT 169
13865: PUSH
13866: LD_INT 103
13868: PUSH
13869: LD_INT 5
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: ST_TO_ADDR
// ruHealPoint2 := [ 145 , 71 ] ;
13901: LD_ADDR_EXP 75
13905: PUSH
13906: LD_INT 145
13908: PUSH
13909: LD_INT 71
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: ST_TO_ADDR
// ruParkingArea2 := ruParkingEastArea ;
13916: LD_ADDR_EXP 83
13920: PUSH
13921: LD_INT 29
13923: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnEastArea ;
13924: LD_ADDR_EXP 85
13928: PUSH
13929: LD_INT 35
13931: ST_TO_ADDR
// end ; end ;
13932: GO 13935
13934: POP
// ruScriptActive2 := true ;
13935: LD_ADDR_EXP 15
13939: PUSH
13940: LD_INT 1
13942: ST_TO_ADDR
// end ;
13943: LD_VAR 0 3
13947: RET
// every 0 0$2 trigger ruScriptActive and Count ( ruForces ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
13948: LD_EXP 14
13952: IFFALSE 13965
13954: PUSH
13955: LD_EXP 59
13959: PPUSH
13960: CALL 57915 0 1
13964: AND
13965: IFFALSE 16569
13967: GO 13969
13969: DISABLE
13970: LD_INT 0
13972: PPUSH
13973: PPUSH
13974: PPUSH
13975: PPUSH
13976: PPUSH
13977: PPUSH
13978: PPUSH
13979: PPUSH
13980: PPUSH
13981: PPUSH
13982: PPUSH
13983: PPUSH
13984: PPUSH
13985: PPUSH
13986: PPUSH
13987: PPUSH
// begin enable ;
13988: ENABLE
// if ruTech then
13989: LD_EXP 65
13993: IFFALSE 14147
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
13995: LD_ADDR_VAR 0 4
13999: PUSH
14000: LD_INT 22
14002: PUSH
14003: LD_INT 3
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: LD_INT 50
14012: PUSH
14013: EMPTY
14014: LIST
14015: PUSH
14016: LD_INT 2
14018: PUSH
14019: LD_INT 30
14021: PUSH
14022: LD_INT 6
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 30
14031: PUSH
14032: LD_INT 7
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: LD_INT 30
14041: PUSH
14042: LD_INT 8
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: LIST
14059: PPUSH
14060: CALL_OW 69
14064: ST_TO_ADDR
// if lab then
14065: LD_VAR 0 4
14069: IFFALSE 14147
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
14071: LD_VAR 0 4
14075: PUSH
14076: LD_INT 1
14078: ARRAY
14079: PPUSH
14080: CALL_OW 461
14084: PUSH
14085: LD_INT 2
14087: EQUAL
14088: IFFALSE 14147
// begin for i in ruTech do
14090: LD_ADDR_VAR 0 1
14094: PUSH
14095: LD_EXP 65
14099: PUSH
14100: FOR_IN
14101: IFFALSE 14145
// if CanBeResearched ( lab [ 1 ] , i ) then
14103: LD_VAR 0 4
14107: PUSH
14108: LD_INT 1
14110: ARRAY
14111: PPUSH
14112: LD_VAR 0 1
14116: PPUSH
14117: CALL_OW 430
14121: IFFALSE 14143
// begin ComResearch ( lab [ 1 ] , i ) ;
14123: LD_VAR 0 4
14127: PUSH
14128: LD_INT 1
14130: ARRAY
14131: PPUSH
14132: LD_VAR 0 1
14136: PPUSH
14137: CALL_OW 124
// break ;
14141: GO 14145
// end ;
14143: GO 14100
14145: POP
14146: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
14147: LD_ADDR_VAR 0 14
14151: PUSH
14152: LD_EXP 66
14156: PPUSH
14157: LD_INT 22
14159: PUSH
14160: LD_INT 3
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PUSH
14167: LD_INT 30
14169: PUSH
14170: LD_INT 3
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: PUSH
14177: LD_INT 50
14179: PUSH
14180: EMPTY
14181: LIST
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: LIST
14187: PPUSH
14188: CALL_OW 70
14192: ST_TO_ADDR
// if fac then
14193: LD_VAR 0 14
14197: IFFALSE 14794
// begin if UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
14199: LD_EXP 63
14203: PPUSH
14204: LD_INT 3
14206: PUSH
14207: LD_INT 60
14209: PUSH
14210: EMPTY
14211: LIST
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: LD_INT 3
14219: PUSH
14220: LD_INT 25
14222: PUSH
14223: LD_INT 3
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: PPUSH
14238: CALL_OW 72
14242: IFFALSE 14385
// begin for i in UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
14244: LD_ADDR_VAR 0 1
14248: PUSH
14249: LD_EXP 63
14253: PPUSH
14254: LD_INT 3
14256: PUSH
14257: LD_INT 60
14259: PUSH
14260: EMPTY
14261: LIST
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PUSH
14267: LD_INT 3
14269: PUSH
14270: LD_INT 25
14272: PUSH
14273: LD_INT 3
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: PPUSH
14288: CALL_OW 72
14292: PUSH
14293: FOR_IN
14294: IFFALSE 14383
// begin SetTag ( i , tMech ) ;
14296: LD_VAR 0 1
14300: PPUSH
14301: LD_INT 7
14303: PPUSH
14304: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
14308: LD_VAR 0 1
14312: PPUSH
14313: CALL_OW 310
14317: IFFALSE 14340
14319: PUSH
14320: LD_VAR 0 1
14324: PPUSH
14325: CALL_OW 310
14329: PUSH
14330: LD_VAR 0 14
14334: PUSH
14335: LD_INT 1
14337: ARRAY
14338: NONEQUAL
14339: AND
14340: IFFALSE 14351
// ComExitBuilding ( i ) ;
14342: LD_VAR 0 1
14346: PPUSH
14347: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
14351: LD_VAR 0 1
14355: PPUSH
14356: LD_VAR 0 14
14360: PUSH
14361: LD_INT 1
14363: ARRAY
14364: PPUSH
14365: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
14369: LD_VAR 0 1
14373: PPUSH
14374: LD_INT 3
14376: PPUSH
14377: CALL_OW 183
// end ;
14381: GO 14293
14383: POP
14384: POP
// end ; if UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
14385: LD_EXP 63
14389: PPUSH
14390: LD_INT 25
14392: PUSH
14393: LD_INT 3
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: LD_INT 3
14402: PUSH
14403: LD_INT 54
14405: PUSH
14406: EMPTY
14407: LIST
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: PUSH
14413: LD_INT 120
14415: PUSH
14416: LD_INT 7
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: PUSH
14423: LD_INT 50
14425: PUSH
14426: EMPTY
14427: LIST
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: PPUSH
14435: CALL_OW 72
14439: IFFALSE 14526
// begin for i in UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
14441: LD_ADDR_VAR 0 1
14445: PUSH
14446: LD_EXP 63
14450: PPUSH
14451: LD_INT 25
14453: PUSH
14454: LD_INT 3
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 3
14463: PUSH
14464: LD_INT 54
14466: PUSH
14467: EMPTY
14468: LIST
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: LD_INT 120
14476: PUSH
14477: LD_INT 7
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: LD_INT 50
14486: PUSH
14487: EMPTY
14488: LIST
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: PPUSH
14496: CALL_OW 72
14500: PUSH
14501: FOR_IN
14502: IFFALSE 14524
// ComEnterUnit ( i , fac [ 1 ] ) ;
14504: LD_VAR 0 1
14508: PPUSH
14509: LD_VAR 0 14
14513: PUSH
14514: LD_INT 1
14516: ARRAY
14517: PPUSH
14518: CALL_OW 120
14522: GO 14501
14524: POP
14525: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
14526: LD_VAR 0 14
14530: PUSH
14531: LD_INT 1
14533: ARRAY
14534: PPUSH
14535: CALL_OW 461
14539: PUSH
14540: LD_INT 2
14542: EQUAL
14543: IFFALSE 14794
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
14545: LD_ADDR_VAR 0 15
14549: PUSH
14550: LD_EXP 66
14554: PPUSH
14555: LD_INT 2
14557: PUSH
14558: LD_INT 30
14560: PUSH
14561: LD_INT 32
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: PUSH
14568: LD_INT 30
14570: PUSH
14571: LD_INT 33
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: LIST
14582: PUSH
14583: LD_INT 35
14585: PUSH
14586: LD_INT 0
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: PPUSH
14597: CALL_OW 70
14601: ST_TO_ADDR
// if emptyTowers then
14602: LD_VAR 0 15
14606: IFFALSE 14656
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea ) ;
14608: LD_ADDR_VAR 0 16
14612: PUSH
14613: LD_VAR 0 15
14617: PUSH
14618: LD_INT 1
14620: ARRAY
14621: PPUSH
14622: LD_EXP 66
14626: PPUSH
14627: CALL 66206 0 2
14631: ST_TO_ADDR
// if weapon then
14632: LD_VAR 0 16
14636: IFFALSE 14656
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
14638: LD_VAR 0 15
14642: PUSH
14643: LD_INT 1
14645: ARRAY
14646: PPUSH
14647: LD_VAR 0 16
14651: PPUSH
14652: CALL_OW 148
// end ; if ruConstructList then
14656: LD_EXP 70
14660: IFFALSE 14794
// if CanBeConstructed ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) then
14662: LD_VAR 0 14
14666: PUSH
14667: LD_INT 1
14669: ARRAY
14670: PPUSH
14671: LD_EXP 70
14675: PUSH
14676: LD_INT 1
14678: ARRAY
14679: PUSH
14680: LD_INT 1
14682: ARRAY
14683: PPUSH
14684: LD_EXP 70
14688: PUSH
14689: LD_INT 1
14691: ARRAY
14692: PUSH
14693: LD_INT 2
14695: ARRAY
14696: PPUSH
14697: LD_EXP 70
14701: PUSH
14702: LD_INT 1
14704: ARRAY
14705: PUSH
14706: LD_INT 3
14708: ARRAY
14709: PPUSH
14710: LD_EXP 70
14714: PUSH
14715: LD_INT 1
14717: ARRAY
14718: PUSH
14719: LD_INT 4
14721: ARRAY
14722: PPUSH
14723: CALL_OW 448
14727: IFFALSE 14794
// ComConstruct ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) ;
14729: LD_VAR 0 14
14733: PUSH
14734: LD_INT 1
14736: ARRAY
14737: PPUSH
14738: LD_EXP 70
14742: PUSH
14743: LD_INT 1
14745: ARRAY
14746: PUSH
14747: LD_INT 1
14749: ARRAY
14750: PPUSH
14751: LD_EXP 70
14755: PUSH
14756: LD_INT 1
14758: ARRAY
14759: PUSH
14760: LD_INT 2
14762: ARRAY
14763: PPUSH
14764: LD_EXP 70
14768: PUSH
14769: LD_INT 1
14771: ARRAY
14772: PUSH
14773: LD_INT 3
14775: ARRAY
14776: PPUSH
14777: LD_EXP 70
14781: PUSH
14782: LD_INT 1
14784: ARRAY
14785: PUSH
14786: LD_INT 4
14788: ARRAY
14789: PPUSH
14790: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14794: LD_ADDR_VAR 0 2
14798: PUSH
14799: LD_EXP 66
14803: PPUSH
14804: LD_INT 21
14806: PUSH
14807: LD_INT 3
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PUSH
14814: LD_INT 3
14816: PUSH
14817: LD_INT 57
14819: PUSH
14820: EMPTY
14821: LIST
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: LD_INT 3
14829: PUSH
14830: LD_INT 24
14832: PUSH
14833: LD_INT 1000
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: LIST
14848: PPUSH
14849: CALL_OW 70
14853: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea ) ;
14854: LD_ADDR_VAR 0 8
14858: PUSH
14859: LD_EXP 72
14863: PPUSH
14864: CALL_OW 435
14868: ST_TO_ADDR
// sci := UnitFilter ( ruForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
14869: LD_ADDR_VAR 0 9
14873: PUSH
14874: LD_EXP 59
14878: PPUSH
14879: LD_INT 25
14881: PUSH
14882: LD_INT 4
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 50
14891: PUSH
14892: EMPTY
14893: LIST
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PPUSH
14899: CALL_OW 72
14903: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
14904: LD_ADDR_VAR 0 4
14908: PUSH
14909: LD_EXP 66
14913: PPUSH
14914: LD_INT 2
14916: PUSH
14917: LD_INT 30
14919: PUSH
14920: LD_INT 6
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PUSH
14927: LD_INT 30
14929: PUSH
14930: LD_INT 7
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT 30
14939: PUSH
14940: LD_INT 8
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: PPUSH
14953: CALL_OW 70
14957: ST_TO_ADDR
// if sci then
14958: LD_VAR 0 9
14962: IFFALSE 15123
// begin hurtUnits := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_tag , tHeal ] ] ) ;
14964: LD_ADDR_VAR 0 11
14968: PUSH
14969: LD_EXP 59
14973: PPUSH
14974: LD_INT 95
14976: PUSH
14977: LD_EXP 66
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: LD_INT 120
14988: PUSH
14989: LD_INT 1
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: PPUSH
15000: CALL_OW 72
15004: ST_TO_ADDR
// if hurtUnits then
15005: LD_VAR 0 11
15009: IFFALSE 15070
// begin for i in sci do
15011: LD_ADDR_VAR 0 1
15015: PUSH
15016: LD_VAR 0 9
15020: PUSH
15021: FOR_IN
15022: IFFALSE 15066
// if IsInUnit ( i ) then
15024: LD_VAR 0 1
15028: PPUSH
15029: CALL_OW 310
15033: IFFALSE 15046
// ComExitBuilding ( i ) else
15035: LD_VAR 0 1
15039: PPUSH
15040: CALL_OW 122
15044: GO 15064
// ComHeal ( i , hurtUnits [ 1 ] ) ;
15046: LD_VAR 0 1
15050: PPUSH
15051: LD_VAR 0 11
15055: PUSH
15056: LD_INT 1
15058: ARRAY
15059: PPUSH
15060: CALL_OW 128
15064: GO 15021
15066: POP
15067: POP
// end else
15068: GO 15123
// if lab then
15070: LD_VAR 0 4
15074: IFFALSE 15123
// begin for i in sci do
15076: LD_ADDR_VAR 0 1
15080: PUSH
15081: LD_VAR 0 9
15085: PUSH
15086: FOR_IN
15087: IFFALSE 15121
// if not IsInUnit ( i ) then
15089: LD_VAR 0 1
15093: PPUSH
15094: CALL_OW 310
15098: NOT
15099: IFFALSE 15119
// ComEnterUnit ( i , lab [ 1 ] ) ;
15101: LD_VAR 0 1
15105: PPUSH
15106: LD_VAR 0 4
15110: PUSH
15111: LD_INT 1
15113: ARRAY
15114: PPUSH
15115: CALL_OW 120
15119: GO 15086
15121: POP
15122: POP
// end ; end ; eng := UnitFilter ( ruForces , [ f_class , 2 ] ) ;
15123: LD_ADDR_VAR 0 5
15127: PUSH
15128: LD_EXP 59
15132: PPUSH
15133: LD_INT 25
15135: PUSH
15136: LD_INT 2
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PPUSH
15143: CALL_OW 72
15147: ST_TO_ADDR
// if eng then
15148: LD_VAR 0 5
15152: IFFALSE 15947
// begin for i in eng do
15154: LD_ADDR_VAR 0 1
15158: PUSH
15159: LD_VAR 0 5
15163: PUSH
15164: FOR_IN
15165: IFFALSE 15945
// begin tag := GetTag ( i ) ;
15167: LD_ADDR_VAR 0 6
15171: PUSH
15172: LD_VAR 0 1
15176: PPUSH
15177: CALL_OW 110
15181: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
15182: LD_VAR 0 1
15186: PPUSH
15187: CALL_OW 256
15191: PUSH
15192: LD_INT 800
15194: LESS
15195: IFFALSE 15207
15197: PUSH
15198: LD_VAR 0 6
15202: PUSH
15203: LD_INT 1
15205: NONEQUAL
15206: AND
15207: IFFALSE 15257
// begin SetTag ( i , tHeal ) ;
15209: LD_VAR 0 1
15213: PPUSH
15214: LD_INT 1
15216: PPUSH
15217: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
15221: LD_VAR 0 1
15225: PPUSH
15226: LD_EXP 74
15230: PUSH
15231: LD_INT 1
15233: ARRAY
15234: PPUSH
15235: LD_EXP 74
15239: PUSH
15240: LD_INT 2
15242: ARRAY
15243: PPUSH
15244: CALL_OW 111
// AddComHold ( i ) ;
15248: LD_VAR 0 1
15252: PPUSH
15253: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
15257: LD_VAR 0 6
15261: PUSH
15262: LD_INT 1
15264: EQUAL
15265: IFFALSE 15282
15267: PUSH
15268: LD_VAR 0 1
15272: PPUSH
15273: CALL_OW 256
15277: PUSH
15278: LD_INT 1000
15280: EQUAL
15281: AND
15282: IFFALSE 15296
// SetTag ( i , 0 ) ;
15284: LD_VAR 0 1
15288: PPUSH
15289: LD_INT 0
15291: PPUSH
15292: CALL_OW 109
// if not tag then
15296: LD_VAR 0 6
15300: NOT
15301: IFFALSE 15477
// begin undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15303: LD_ADDR_VAR 0 3
15307: PUSH
15308: LD_EXP 66
15312: PPUSH
15313: LD_INT 57
15315: PUSH
15316: EMPTY
15317: LIST
15318: PPUSH
15319: CALL_OW 70
15323: ST_TO_ADDR
// if undone then
15324: LD_VAR 0 3
15328: IFFALSE 15350
// begin ComComplete ( i , undone [ 1 ] ) ;
15330: LD_VAR 0 1
15334: PPUSH
15335: LD_VAR 0 3
15339: PUSH
15340: LD_INT 1
15342: ARRAY
15343: PPUSH
15344: CALL 64051 0 2
// continue ;
15348: GO 15164
// end ; if cr or tmp or Count ( ruBuildings ) then
15350: LD_VAR 0 8
15354: IFTRUE 15362
15356: PUSH
15357: LD_VAR 0 2
15361: OR
15362: IFTRUE 15375
15364: PUSH
15365: LD_EXP 76
15369: PPUSH
15370: CALL 57915 0 1
15374: OR
15375: IFFALSE 15451
// begin if IsInUnit ( i ) then
15377: LD_VAR 0 1
15381: PPUSH
15382: CALL_OW 310
15386: IFFALSE 15397
// ComExitBuilding ( i ) ;
15388: LD_VAR 0 1
15392: PPUSH
15393: CALL_OW 122
// if tmp then
15397: LD_VAR 0 2
15401: IFFALSE 15417
// SetTag ( i , tRepair ) else
15403: LD_VAR 0 1
15407: PPUSH
15408: LD_INT 3
15410: PPUSH
15411: CALL_OW 109
15415: GO 15449
// if cr then
15417: LD_VAR 0 8
15421: IFFALSE 15437
// SetTag ( i , tCrates ) else
15423: LD_VAR 0 1
15427: PPUSH
15428: LD_INT 2
15430: PPUSH
15431: CALL_OW 109
15435: GO 15449
// SetTag ( i , tBuild ) ;
15437: LD_VAR 0 1
15441: PPUSH
15442: LD_INT 5
15444: PPUSH
15445: CALL_OW 109
// end else
15449: GO 15477
// if not IsInUnit ( i ) then
15451: LD_VAR 0 1
15455: PPUSH
15456: CALL_OW 310
15460: NOT
15461: IFFALSE 15477
// ComEnterUnit ( i , ruBase ) ;
15463: LD_VAR 0 1
15467: PPUSH
15468: LD_EXP 68
15472: PPUSH
15473: CALL_OW 120
// end ; if tag = tRepair then
15477: LD_VAR 0 6
15481: PUSH
15482: LD_INT 3
15484: EQUAL
15485: IFFALSE 15591
// begin if IsInUnit ( i ) then
15487: LD_VAR 0 1
15491: PPUSH
15492: CALL_OW 310
15496: IFFALSE 15509
// begin ComExitBuilding ( i ) ;
15498: LD_VAR 0 1
15502: PPUSH
15503: CALL_OW 122
// continue ;
15507: GO 15164
// end ; if not tmp then
15509: LD_VAR 0 2
15513: NOT
15514: IFFALSE 15530
// begin SetTag ( i , 0 ) ;
15516: LD_VAR 0 1
15520: PPUSH
15521: LD_INT 0
15523: PPUSH
15524: CALL_OW 109
// continue ;
15528: GO 15164
// end ; if not HasTask ( i ) then
15530: LD_VAR 0 1
15534: PPUSH
15535: CALL_OW 314
15539: NOT
15540: IFFALSE 15560
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
15542: LD_VAR 0 1
15546: PPUSH
15547: LD_VAR 0 2
15551: PUSH
15552: LD_INT 1
15554: ARRAY
15555: PPUSH
15556: CALL_OW 130
// if not IsInArea ( i , ruBaseArea ) then
15560: LD_VAR 0 1
15564: PPUSH
15565: LD_EXP 66
15569: PPUSH
15570: CALL_OW 308
15574: NOT
15575: IFFALSE 15591
// ComMoveToArea ( i , ruBaseArea ) ;
15577: LD_VAR 0 1
15581: PPUSH
15582: LD_EXP 66
15586: PPUSH
15587: CALL_OW 113
// end ; if tag = tBuild then
15591: LD_VAR 0 6
15595: PUSH
15596: LD_INT 5
15598: EQUAL
15599: IFFALSE 15798
// begin if IsInUnit ( i ) then
15601: LD_VAR 0 1
15605: PPUSH
15606: CALL_OW 310
15610: IFFALSE 15623
// begin ComExitBuilding ( i ) ;
15612: LD_VAR 0 1
15616: PPUSH
15617: CALL_OW 122
// continue ;
15621: GO 15164
// end ; if not Count ( ruBuildings ) then
15623: LD_EXP 76
15627: PPUSH
15628: CALL 57915 0 1
15632: NOT
15633: IFFALSE 15651
// begin SetTag ( i , 0 ) ;
15635: LD_VAR 0 1
15639: PPUSH
15640: LD_INT 0
15642: PPUSH
15643: CALL_OW 109
// continue ;
15647: GO 15164
// end else
15649: GO 15690
// if not CanBeBuiltOnlyResources ( ruBase , ruBuildings [ 1 ] [ 1 ] ) then
15651: LD_EXP 68
15655: PPUSH
15656: LD_EXP 76
15660: PUSH
15661: LD_INT 1
15663: ARRAY
15664: PUSH
15665: LD_INT 1
15667: ARRAY
15668: PPUSH
15669: CALL 97942 0 2
15673: NOT
15674: IFFALSE 15690
// begin SetTag ( i , 0 ) ;
15676: LD_VAR 0 1
15680: PPUSH
15681: LD_INT 0
15683: PPUSH
15684: CALL_OW 109
// continue ;
15688: GO 15164
// end ; undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15690: LD_ADDR_VAR 0 3
15694: PUSH
15695: LD_EXP 66
15699: PPUSH
15700: LD_INT 57
15702: PUSH
15703: EMPTY
15704: LIST
15705: PPUSH
15706: CALL_OW 70
15710: ST_TO_ADDR
// if undone then
15711: LD_VAR 0 3
15715: IFFALSE 15737
// begin ComComplete ( i , undone [ 1 ] ) ;
15717: LD_VAR 0 1
15721: PPUSH
15722: LD_VAR 0 3
15726: PUSH
15727: LD_INT 1
15729: ARRAY
15730: PPUSH
15731: CALL 64051 0 2
// continue ;
15735: GO 15164
// end ; ComBuild ( i , ruBuildings [ 1 ] [ 1 ] , ruBuildings [ 1 ] [ 2 ] , ruBuildings [ 1 ] [ 3 ] , ruBuildings [ 1 ] [ 4 ] ) ;
15737: LD_VAR 0 1
15741: PPUSH
15742: LD_EXP 76
15746: PUSH
15747: LD_INT 1
15749: ARRAY
15750: PUSH
15751: LD_INT 1
15753: ARRAY
15754: PPUSH
15755: LD_EXP 76
15759: PUSH
15760: LD_INT 1
15762: ARRAY
15763: PUSH
15764: LD_INT 2
15766: ARRAY
15767: PPUSH
15768: LD_EXP 76
15772: PUSH
15773: LD_INT 1
15775: ARRAY
15776: PUSH
15777: LD_INT 3
15779: ARRAY
15780: PPUSH
15781: LD_EXP 76
15785: PUSH
15786: LD_INT 1
15788: ARRAY
15789: PUSH
15790: LD_INT 4
15792: ARRAY
15793: PPUSH
15794: CALL_OW 145
// end ; if tag = tCrates then
15798: LD_VAR 0 6
15802: PUSH
15803: LD_INT 2
15805: EQUAL
15806: IFFALSE 15943
// begin if IsInUnit ( i ) then
15808: LD_VAR 0 1
15812: PPUSH
15813: CALL_OW 310
15817: IFFALSE 15830
// begin ComExitBuilding ( i ) ;
15819: LD_VAR 0 1
15823: PPUSH
15824: CALL_OW 122
// continue ;
15828: GO 15164
// end ; if not cr then
15830: LD_VAR 0 8
15834: NOT
15835: IFFALSE 15851
// begin SetTag ( i , 0 ) ;
15837: LD_VAR 0 1
15841: PPUSH
15842: LD_INT 0
15844: PPUSH
15845: CALL_OW 109
// continue ;
15849: GO 15164
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
15851: LD_VAR 0 1
15855: PPUSH
15856: CALL_OW 314
15860: NOT
15861: IFFALSE 15914
15863: PUSH
15864: LD_INT 81
15866: PUSH
15867: LD_INT 3
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: PUSH
15874: LD_INT 92
15876: PUSH
15877: LD_VAR 0 8
15881: PUSH
15882: LD_INT 1
15884: ARRAY
15885: PUSH
15886: LD_VAR 0 8
15890: PUSH
15891: LD_INT 2
15893: ARRAY
15894: PUSH
15895: LD_INT 12
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PPUSH
15908: CALL_OW 69
15912: NOT
15913: AND
15914: IFFALSE 15943
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
15916: LD_VAR 0 1
15920: PPUSH
15921: LD_VAR 0 8
15925: PUSH
15926: LD_INT 1
15928: ARRAY
15929: PPUSH
15930: LD_VAR 0 8
15934: PUSH
15935: LD_INT 2
15937: ARRAY
15938: PPUSH
15939: CALL_OW 117
// end ; end ;
15943: GO 15164
15945: POP
15946: POP
// end ; sol := UnitFilter ( ruForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander ;
15947: LD_ADDR_VAR 0 10
15951: PUSH
15952: LD_EXP 59
15956: PPUSH
15957: LD_INT 2
15959: PUSH
15960: LD_INT 25
15962: PUSH
15963: LD_INT 1
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: LD_INT 25
15972: PUSH
15973: LD_INT 9
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: LIST
15984: PUSH
15985: LD_INT 50
15987: PUSH
15988: EMPTY
15989: LIST
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PPUSH
15995: CALL_OW 72
15999: PUSH
16000: LD_EXP 61
16004: UNION
16005: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
16006: LD_ADDR_VAR 0 12
16010: PUSH
16011: LD_EXP 66
16015: PPUSH
16016: LD_INT 81
16018: PUSH
16019: LD_INT 3
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: PPUSH
16026: CALL_OW 70
16030: ST_TO_ADDR
// if sol then
16031: LD_VAR 0 10
16035: IFFALSE 16569
// begin if enemyInBase then
16037: LD_VAR 0 12
16041: IFFALSE 16184
// begin for i in sol do
16043: LD_ADDR_VAR 0 1
16047: PUSH
16048: LD_VAR 0 10
16052: PUSH
16053: FOR_IN
16054: IFFALSE 16180
// begin tw := IsInUnit ( i ) ;
16056: LD_ADDR_VAR 0 7
16060: PUSH
16061: LD_VAR 0 1
16065: PPUSH
16066: CALL_OW 310
16070: ST_TO_ADDR
// if tw then
16071: LD_VAR 0 7
16075: IFFALSE 16154
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
16077: LD_VAR 0 7
16081: PUSH
16082: LD_INT 22
16084: PUSH
16085: LD_INT 3
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: LD_INT 101
16094: PUSH
16095: LD_INT 1
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PUSH
16102: LD_INT 2
16104: PUSH
16105: LD_INT 30
16107: PUSH
16108: LD_INT 32
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: PUSH
16115: LD_INT 30
16117: PUSH
16118: LD_INT 31
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: LIST
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: LIST
16134: PPUSH
16135: CALL_OW 69
16139: IN
16140: NOT
16141: IFFALSE 16152
// ComExitBuilding ( i ) ;
16143: LD_VAR 0 1
16147: PPUSH
16148: CALL_OW 122
// end else
16152: GO 16178
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
16154: LD_VAR 0 1
16158: PPUSH
16159: LD_VAR 0 12
16163: PPUSH
16164: LD_VAR 0 1
16168: PPUSH
16169: CALL_OW 74
16173: PPUSH
16174: CALL_OW 115
// end ;
16178: GO 16053
16180: POP
16181: POP
// end else
16182: GO 16569
// begin empty := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
16184: LD_ADDR_VAR 0 13
16188: PUSH
16189: LD_EXP 66
16193: PPUSH
16194: LD_INT 3
16196: PUSH
16197: LD_INT 62
16199: PUSH
16200: EMPTY
16201: LIST
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PUSH
16207: LD_INT 2
16209: PUSH
16210: LD_INT 30
16212: PUSH
16213: LD_INT 32
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 30
16222: PUSH
16223: LD_INT 4
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 30
16232: PUSH
16233: LD_INT 5
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: LD_INT 30
16242: PUSH
16243: LD_INT 31
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: PPUSH
16261: CALL_OW 70
16265: ST_TO_ADDR
// if empty then
16266: LD_VAR 0 13
16270: IFFALSE 16287
// empty := ReverseArray ( empty ) ;
16272: LD_ADDR_VAR 0 13
16276: PUSH
16277: LD_VAR 0 13
16281: PPUSH
16282: CALL 88937 0 1
16286: ST_TO_ADDR
// for i in sol do
16287: LD_ADDR_VAR 0 1
16291: PUSH
16292: LD_VAR 0 10
16296: PUSH
16297: FOR_IN
16298: IFFALSE 16567
// begin tag := GetTag ( i ) ;
16300: LD_ADDR_VAR 0 6
16304: PUSH
16305: LD_VAR 0 1
16309: PPUSH
16310: CALL_OW 110
16314: ST_TO_ADDR
// if tag = tMech then
16315: LD_VAR 0 6
16319: PUSH
16320: LD_INT 7
16322: EQUAL
16323: IFFALSE 16327
// continue ;
16325: GO 16297
// if GetLives ( i ) < 1000 and tag <> tHeal then
16327: LD_VAR 0 1
16331: PPUSH
16332: CALL_OW 256
16336: PUSH
16337: LD_INT 1000
16339: LESS
16340: IFFALSE 16352
16342: PUSH
16343: LD_VAR 0 6
16347: PUSH
16348: LD_INT 1
16350: NONEQUAL
16351: AND
16352: IFFALSE 16404
// begin SetTag ( i , tHeal ) ;
16354: LD_VAR 0 1
16358: PPUSH
16359: LD_INT 1
16361: PPUSH
16362: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
16366: LD_VAR 0 1
16370: PPUSH
16371: LD_EXP 74
16375: PUSH
16376: LD_INT 1
16378: ARRAY
16379: PPUSH
16380: LD_EXP 74
16384: PUSH
16385: LD_INT 2
16387: ARRAY
16388: PPUSH
16389: CALL_OW 111
// AddComHold ( i ) ;
16393: LD_VAR 0 1
16397: PPUSH
16398: CALL_OW 200
// continue ;
16402: GO 16297
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
16404: LD_VAR 0 1
16408: PPUSH
16409: CALL_OW 256
16413: PUSH
16414: LD_INT 1000
16416: EQUAL
16417: IFFALSE 16429
16419: PUSH
16420: LD_VAR 0 6
16424: PUSH
16425: LD_INT 1
16427: EQUAL
16428: AND
16429: IFFALSE 16445
// begin SetTag ( i , 0 ) ;
16431: LD_VAR 0 1
16435: PPUSH
16436: LD_INT 0
16438: PPUSH
16439: CALL_OW 109
// continue ;
16443: GO 16297
// end ; if HasTask ( i ) then
16445: LD_VAR 0 1
16449: PPUSH
16450: CALL_OW 314
16454: IFFALSE 16458
// continue ;
16456: GO 16297
// if not IsInUnit ( i ) and not tag and empty then
16458: LD_VAR 0 1
16462: PPUSH
16463: CALL_OW 310
16467: NOT
16468: IFFALSE 16477
16470: PUSH
16471: LD_VAR 0 6
16475: NOT
16476: AND
16477: IFFALSE 16485
16479: PUSH
16480: LD_VAR 0 13
16484: AND
16485: IFFALSE 16565
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
16487: LD_VAR 0 1
16491: PPUSH
16492: LD_VAR 0 13
16496: PUSH
16497: LD_INT 1
16499: ARRAY
16500: PPUSH
16501: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
16505: LD_VAR 0 13
16509: PUSH
16510: LD_INT 1
16512: ARRAY
16513: PPUSH
16514: CALL_OW 266
16518: PUSH
16519: LD_INT 5
16521: EQUAL
16522: IFFALSE 16533
16524: PUSH
16525: LD_INT 50
16527: PPUSH
16528: CALL_OW 13
16532: AND
16533: IFFALSE 16547
// AddComChangeProfession ( i , class_bazooker ) ;
16535: LD_VAR 0 1
16539: PPUSH
16540: LD_INT 9
16542: PPUSH
16543: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
16547: LD_ADDR_VAR 0 13
16551: PUSH
16552: LD_VAR 0 13
16556: PPUSH
16557: LD_INT 1
16559: PPUSH
16560: CALL_OW 3
16564: ST_TO_ADDR
// end ; end ;
16565: GO 16297
16567: POP
16568: POP
// end ; end ; end ;
16569: PPOPN 16
16571: END
// every 0 0$2 trigger ruScriptActive2 and Count ( ruForces2 ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
16572: LD_EXP 15
16576: IFFALSE 16589
16578: PUSH
16579: LD_EXP 60
16583: PPUSH
16584: CALL 57915 0 1
16588: AND
16589: IFFALSE 19193
16591: GO 16593
16593: DISABLE
16594: LD_INT 0
16596: PPUSH
16597: PPUSH
16598: PPUSH
16599: PPUSH
16600: PPUSH
16601: PPUSH
16602: PPUSH
16603: PPUSH
16604: PPUSH
16605: PPUSH
16606: PPUSH
16607: PPUSH
16608: PPUSH
16609: PPUSH
16610: PPUSH
16611: PPUSH
// begin enable ;
16612: ENABLE
// if ruTech then
16613: LD_EXP 65
16617: IFFALSE 16771
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
16619: LD_ADDR_VAR 0 4
16623: PUSH
16624: LD_INT 22
16626: PUSH
16627: LD_INT 3
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 50
16636: PUSH
16637: EMPTY
16638: LIST
16639: PUSH
16640: LD_INT 2
16642: PUSH
16643: LD_INT 30
16645: PUSH
16646: LD_INT 6
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: LD_INT 30
16655: PUSH
16656: LD_INT 7
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: LD_INT 30
16665: PUSH
16666: LD_INT 8
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: LIST
16683: PPUSH
16684: CALL_OW 69
16688: ST_TO_ADDR
// if lab then
16689: LD_VAR 0 4
16693: IFFALSE 16771
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
16695: LD_VAR 0 4
16699: PUSH
16700: LD_INT 1
16702: ARRAY
16703: PPUSH
16704: CALL_OW 461
16708: PUSH
16709: LD_INT 2
16711: EQUAL
16712: IFFALSE 16771
// begin for i in ruTech do
16714: LD_ADDR_VAR 0 1
16718: PUSH
16719: LD_EXP 65
16723: PUSH
16724: FOR_IN
16725: IFFALSE 16769
// if CanBeResearched ( lab [ 1 ] , i ) then
16727: LD_VAR 0 4
16731: PUSH
16732: LD_INT 1
16734: ARRAY
16735: PPUSH
16736: LD_VAR 0 1
16740: PPUSH
16741: CALL_OW 430
16745: IFFALSE 16767
// begin ComResearch ( lab [ 1 ] , i ) ;
16747: LD_VAR 0 4
16751: PUSH
16752: LD_INT 1
16754: ARRAY
16755: PPUSH
16756: LD_VAR 0 1
16760: PPUSH
16761: CALL_OW 124
// break ;
16765: GO 16769
// end ;
16767: GO 16724
16769: POP
16770: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
16771: LD_ADDR_VAR 0 14
16775: PUSH
16776: LD_EXP 67
16780: PPUSH
16781: LD_INT 22
16783: PUSH
16784: LD_INT 3
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 30
16793: PUSH
16794: LD_INT 3
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 50
16803: PUSH
16804: EMPTY
16805: LIST
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: LIST
16811: PPUSH
16812: CALL_OW 70
16816: ST_TO_ADDR
// if fac then
16817: LD_VAR 0 14
16821: IFFALSE 17418
// begin if UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
16823: LD_EXP 64
16827: PPUSH
16828: LD_INT 3
16830: PUSH
16831: LD_INT 60
16833: PUSH
16834: EMPTY
16835: LIST
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 3
16843: PUSH
16844: LD_INT 25
16846: PUSH
16847: LD_INT 3
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PPUSH
16862: CALL_OW 72
16866: IFFALSE 17009
// begin for i in UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
16868: LD_ADDR_VAR 0 1
16872: PUSH
16873: LD_EXP 64
16877: PPUSH
16878: LD_INT 3
16880: PUSH
16881: LD_INT 60
16883: PUSH
16884: EMPTY
16885: LIST
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 3
16893: PUSH
16894: LD_INT 25
16896: PUSH
16897: LD_INT 3
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PPUSH
16912: CALL_OW 72
16916: PUSH
16917: FOR_IN
16918: IFFALSE 17007
// begin SetTag ( i , tMech ) ;
16920: LD_VAR 0 1
16924: PPUSH
16925: LD_INT 7
16927: PPUSH
16928: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
16932: LD_VAR 0 1
16936: PPUSH
16937: CALL_OW 310
16941: IFFALSE 16964
16943: PUSH
16944: LD_VAR 0 1
16948: PPUSH
16949: CALL_OW 310
16953: PUSH
16954: LD_VAR 0 14
16958: PUSH
16959: LD_INT 1
16961: ARRAY
16962: NONEQUAL
16963: AND
16964: IFFALSE 16975
// ComExitBuilding ( i ) ;
16966: LD_VAR 0 1
16970: PPUSH
16971: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
16975: LD_VAR 0 1
16979: PPUSH
16980: LD_VAR 0 14
16984: PUSH
16985: LD_INT 1
16987: ARRAY
16988: PPUSH
16989: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
16993: LD_VAR 0 1
16997: PPUSH
16998: LD_INT 3
17000: PPUSH
17001: CALL_OW 183
// end ;
17005: GO 16917
17007: POP
17008: POP
// end ; if UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
17009: LD_EXP 64
17013: PPUSH
17014: LD_INT 25
17016: PUSH
17017: LD_INT 3
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 3
17026: PUSH
17027: LD_INT 54
17029: PUSH
17030: EMPTY
17031: LIST
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 120
17039: PUSH
17040: LD_INT 7
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: LD_INT 50
17049: PUSH
17050: EMPTY
17051: LIST
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: PPUSH
17059: CALL_OW 72
17063: IFFALSE 17150
// begin for i in UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
17065: LD_ADDR_VAR 0 1
17069: PUSH
17070: LD_EXP 64
17074: PPUSH
17075: LD_INT 25
17077: PUSH
17078: LD_INT 3
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: LD_INT 3
17087: PUSH
17088: LD_INT 54
17090: PUSH
17091: EMPTY
17092: LIST
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PUSH
17098: LD_INT 120
17100: PUSH
17101: LD_INT 7
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PUSH
17108: LD_INT 50
17110: PUSH
17111: EMPTY
17112: LIST
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: PPUSH
17120: CALL_OW 72
17124: PUSH
17125: FOR_IN
17126: IFFALSE 17148
// ComEnterUnit ( i , fac [ 1 ] ) ;
17128: LD_VAR 0 1
17132: PPUSH
17133: LD_VAR 0 14
17137: PUSH
17138: LD_INT 1
17140: ARRAY
17141: PPUSH
17142: CALL_OW 120
17146: GO 17125
17148: POP
17149: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
17150: LD_VAR 0 14
17154: PUSH
17155: LD_INT 1
17157: ARRAY
17158: PPUSH
17159: CALL_OW 461
17163: PUSH
17164: LD_INT 2
17166: EQUAL
17167: IFFALSE 17418
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea2 , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
17169: LD_ADDR_VAR 0 15
17173: PUSH
17174: LD_EXP 67
17178: PPUSH
17179: LD_INT 2
17181: PUSH
17182: LD_INT 30
17184: PUSH
17185: LD_INT 32
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 30
17194: PUSH
17195: LD_INT 33
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: LIST
17206: PUSH
17207: LD_INT 35
17209: PUSH
17210: LD_INT 0
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PPUSH
17221: CALL_OW 70
17225: ST_TO_ADDR
// if emptyTowers then
17226: LD_VAR 0 15
17230: IFFALSE 17280
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea2 ) ;
17232: LD_ADDR_VAR 0 16
17236: PUSH
17237: LD_VAR 0 15
17241: PUSH
17242: LD_INT 1
17244: ARRAY
17245: PPUSH
17246: LD_EXP 67
17250: PPUSH
17251: CALL 66206 0 2
17255: ST_TO_ADDR
// if weapon then
17256: LD_VAR 0 16
17260: IFFALSE 17280
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
17262: LD_VAR 0 15
17266: PUSH
17267: LD_INT 1
17269: ARRAY
17270: PPUSH
17271: LD_VAR 0 16
17275: PPUSH
17276: CALL_OW 148
// end ; if ruConstructList2 then
17280: LD_EXP 71
17284: IFFALSE 17418
// if CanBeConstructed ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) then
17286: LD_VAR 0 14
17290: PUSH
17291: LD_INT 1
17293: ARRAY
17294: PPUSH
17295: LD_EXP 71
17299: PUSH
17300: LD_INT 1
17302: ARRAY
17303: PUSH
17304: LD_INT 1
17306: ARRAY
17307: PPUSH
17308: LD_EXP 71
17312: PUSH
17313: LD_INT 1
17315: ARRAY
17316: PUSH
17317: LD_INT 2
17319: ARRAY
17320: PPUSH
17321: LD_EXP 71
17325: PUSH
17326: LD_INT 1
17328: ARRAY
17329: PUSH
17330: LD_INT 3
17332: ARRAY
17333: PPUSH
17334: LD_EXP 71
17338: PUSH
17339: LD_INT 1
17341: ARRAY
17342: PUSH
17343: LD_INT 4
17345: ARRAY
17346: PPUSH
17347: CALL_OW 448
17351: IFFALSE 17418
// ComConstruct ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) ;
17353: LD_VAR 0 14
17357: PUSH
17358: LD_INT 1
17360: ARRAY
17361: PPUSH
17362: LD_EXP 71
17366: PUSH
17367: LD_INT 1
17369: ARRAY
17370: PUSH
17371: LD_INT 1
17373: ARRAY
17374: PPUSH
17375: LD_EXP 71
17379: PUSH
17380: LD_INT 1
17382: ARRAY
17383: PUSH
17384: LD_INT 2
17386: ARRAY
17387: PPUSH
17388: LD_EXP 71
17392: PUSH
17393: LD_INT 1
17395: ARRAY
17396: PUSH
17397: LD_INT 3
17399: ARRAY
17400: PPUSH
17401: LD_EXP 71
17405: PUSH
17406: LD_INT 1
17408: ARRAY
17409: PUSH
17410: LD_INT 4
17412: ARRAY
17413: PPUSH
17414: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea2 , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17418: LD_ADDR_VAR 0 2
17422: PUSH
17423: LD_EXP 67
17427: PPUSH
17428: LD_INT 21
17430: PUSH
17431: LD_INT 3
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: PUSH
17438: LD_INT 3
17440: PUSH
17441: LD_INT 57
17443: PUSH
17444: EMPTY
17445: LIST
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 3
17453: PUSH
17454: LD_INT 24
17456: PUSH
17457: LD_INT 1000
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: LIST
17472: PPUSH
17473: CALL_OW 70
17477: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea2 ) ;
17478: LD_ADDR_VAR 0 8
17482: PUSH
17483: LD_EXP 73
17487: PPUSH
17488: CALL_OW 435
17492: ST_TO_ADDR
// sci := UnitFilter ( ruForces2 , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
17493: LD_ADDR_VAR 0 9
17497: PUSH
17498: LD_EXP 60
17502: PPUSH
17503: LD_INT 25
17505: PUSH
17506: LD_INT 4
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: LD_INT 50
17515: PUSH
17516: EMPTY
17517: LIST
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PPUSH
17523: CALL_OW 72
17527: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea2 , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
17528: LD_ADDR_VAR 0 4
17532: PUSH
17533: LD_EXP 67
17537: PPUSH
17538: LD_INT 2
17540: PUSH
17541: LD_INT 30
17543: PUSH
17544: LD_INT 6
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: LD_INT 30
17553: PUSH
17554: LD_INT 7
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: LD_INT 30
17563: PUSH
17564: LD_INT 8
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: PPUSH
17577: CALL_OW 70
17581: ST_TO_ADDR
// if sci then
17582: LD_VAR 0 9
17586: IFFALSE 17747
// begin hurtUnits := UnitFilter ( ruForces2 , [ [ f_inarea , ruBaseArea2 ] , [ f_tag , tHeal ] ] ) ;
17588: LD_ADDR_VAR 0 11
17592: PUSH
17593: LD_EXP 60
17597: PPUSH
17598: LD_INT 95
17600: PUSH
17601: LD_EXP 67
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 120
17612: PUSH
17613: LD_INT 1
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PPUSH
17624: CALL_OW 72
17628: ST_TO_ADDR
// if hurtUnits then
17629: LD_VAR 0 11
17633: IFFALSE 17694
// begin for i in sci do
17635: LD_ADDR_VAR 0 1
17639: PUSH
17640: LD_VAR 0 9
17644: PUSH
17645: FOR_IN
17646: IFFALSE 17690
// if IsInUnit ( i ) then
17648: LD_VAR 0 1
17652: PPUSH
17653: CALL_OW 310
17657: IFFALSE 17670
// ComExitBuilding ( i ) else
17659: LD_VAR 0 1
17663: PPUSH
17664: CALL_OW 122
17668: GO 17688
// ComHeal ( i , hurtUnits [ 1 ] ) ;
17670: LD_VAR 0 1
17674: PPUSH
17675: LD_VAR 0 11
17679: PUSH
17680: LD_INT 1
17682: ARRAY
17683: PPUSH
17684: CALL_OW 128
17688: GO 17645
17690: POP
17691: POP
// end else
17692: GO 17747
// if lab then
17694: LD_VAR 0 4
17698: IFFALSE 17747
// begin for i in sci do
17700: LD_ADDR_VAR 0 1
17704: PUSH
17705: LD_VAR 0 9
17709: PUSH
17710: FOR_IN
17711: IFFALSE 17745
// if not IsInUnit ( i ) then
17713: LD_VAR 0 1
17717: PPUSH
17718: CALL_OW 310
17722: NOT
17723: IFFALSE 17743
// ComEnterUnit ( i , lab [ 1 ] ) ;
17725: LD_VAR 0 1
17729: PPUSH
17730: LD_VAR 0 4
17734: PUSH
17735: LD_INT 1
17737: ARRAY
17738: PPUSH
17739: CALL_OW 120
17743: GO 17710
17745: POP
17746: POP
// end ; end ; eng := UnitFilter ( ruForces2 , [ f_class , 2 ] ) ;
17747: LD_ADDR_VAR 0 5
17751: PUSH
17752: LD_EXP 60
17756: PPUSH
17757: LD_INT 25
17759: PUSH
17760: LD_INT 2
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PPUSH
17767: CALL_OW 72
17771: ST_TO_ADDR
// if eng then
17772: LD_VAR 0 5
17776: IFFALSE 18571
// begin for i in eng do
17778: LD_ADDR_VAR 0 1
17782: PUSH
17783: LD_VAR 0 5
17787: PUSH
17788: FOR_IN
17789: IFFALSE 18569
// begin tag := GetTag ( i ) ;
17791: LD_ADDR_VAR 0 6
17795: PUSH
17796: LD_VAR 0 1
17800: PPUSH
17801: CALL_OW 110
17805: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
17806: LD_VAR 0 1
17810: PPUSH
17811: CALL_OW 256
17815: PUSH
17816: LD_INT 800
17818: LESS
17819: IFFALSE 17831
17821: PUSH
17822: LD_VAR 0 6
17826: PUSH
17827: LD_INT 1
17829: NONEQUAL
17830: AND
17831: IFFALSE 17881
// begin SetTag ( i , tHeal ) ;
17833: LD_VAR 0 1
17837: PPUSH
17838: LD_INT 1
17840: PPUSH
17841: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
17845: LD_VAR 0 1
17849: PPUSH
17850: LD_EXP 75
17854: PUSH
17855: LD_INT 1
17857: ARRAY
17858: PPUSH
17859: LD_EXP 75
17863: PUSH
17864: LD_INT 2
17866: ARRAY
17867: PPUSH
17868: CALL_OW 111
// AddComHold ( i ) ;
17872: LD_VAR 0 1
17876: PPUSH
17877: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
17881: LD_VAR 0 6
17885: PUSH
17886: LD_INT 1
17888: EQUAL
17889: IFFALSE 17906
17891: PUSH
17892: LD_VAR 0 1
17896: PPUSH
17897: CALL_OW 256
17901: PUSH
17902: LD_INT 1000
17904: EQUAL
17905: AND
17906: IFFALSE 17920
// SetTag ( i , 0 ) ;
17908: LD_VAR 0 1
17912: PPUSH
17913: LD_INT 0
17915: PPUSH
17916: CALL_OW 109
// if not tag then
17920: LD_VAR 0 6
17924: NOT
17925: IFFALSE 18101
// begin undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
17927: LD_ADDR_VAR 0 3
17931: PUSH
17932: LD_EXP 67
17936: PPUSH
17937: LD_INT 57
17939: PUSH
17940: EMPTY
17941: LIST
17942: PPUSH
17943: CALL_OW 70
17947: ST_TO_ADDR
// if undone then
17948: LD_VAR 0 3
17952: IFFALSE 17974
// begin ComComplete ( i , undone [ 1 ] ) ;
17954: LD_VAR 0 1
17958: PPUSH
17959: LD_VAR 0 3
17963: PUSH
17964: LD_INT 1
17966: ARRAY
17967: PPUSH
17968: CALL 64051 0 2
// continue ;
17972: GO 17788
// end ; if cr or tmp or Count ( ruBuildings2 ) then
17974: LD_VAR 0 8
17978: IFTRUE 17986
17980: PUSH
17981: LD_VAR 0 2
17985: OR
17986: IFTRUE 17999
17988: PUSH
17989: LD_EXP 77
17993: PPUSH
17994: CALL 57915 0 1
17998: OR
17999: IFFALSE 18075
// begin if IsInUnit ( i ) then
18001: LD_VAR 0 1
18005: PPUSH
18006: CALL_OW 310
18010: IFFALSE 18021
// ComExitBuilding ( i ) ;
18012: LD_VAR 0 1
18016: PPUSH
18017: CALL_OW 122
// if tmp then
18021: LD_VAR 0 2
18025: IFFALSE 18041
// SetTag ( i , tRepair ) else
18027: LD_VAR 0 1
18031: PPUSH
18032: LD_INT 3
18034: PPUSH
18035: CALL_OW 109
18039: GO 18073
// if cr then
18041: LD_VAR 0 8
18045: IFFALSE 18061
// SetTag ( i , tCrates ) else
18047: LD_VAR 0 1
18051: PPUSH
18052: LD_INT 2
18054: PPUSH
18055: CALL_OW 109
18059: GO 18073
// SetTag ( i , tBuild ) ;
18061: LD_VAR 0 1
18065: PPUSH
18066: LD_INT 5
18068: PPUSH
18069: CALL_OW 109
// end else
18073: GO 18101
// if not IsInUnit ( i ) then
18075: LD_VAR 0 1
18079: PPUSH
18080: CALL_OW 310
18084: NOT
18085: IFFALSE 18101
// ComEnterUnit ( i , ruBase2 ) ;
18087: LD_VAR 0 1
18091: PPUSH
18092: LD_EXP 69
18096: PPUSH
18097: CALL_OW 120
// end ; if tag = tRepair then
18101: LD_VAR 0 6
18105: PUSH
18106: LD_INT 3
18108: EQUAL
18109: IFFALSE 18215
// begin if IsInUnit ( i ) then
18111: LD_VAR 0 1
18115: PPUSH
18116: CALL_OW 310
18120: IFFALSE 18133
// begin ComExitBuilding ( i ) ;
18122: LD_VAR 0 1
18126: PPUSH
18127: CALL_OW 122
// continue ;
18131: GO 17788
// end ; if not tmp then
18133: LD_VAR 0 2
18137: NOT
18138: IFFALSE 18154
// begin SetTag ( i , 0 ) ;
18140: LD_VAR 0 1
18144: PPUSH
18145: LD_INT 0
18147: PPUSH
18148: CALL_OW 109
// continue ;
18152: GO 17788
// end ; if not HasTask ( i ) then
18154: LD_VAR 0 1
18158: PPUSH
18159: CALL_OW 314
18163: NOT
18164: IFFALSE 18184
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
18166: LD_VAR 0 1
18170: PPUSH
18171: LD_VAR 0 2
18175: PUSH
18176: LD_INT 1
18178: ARRAY
18179: PPUSH
18180: CALL_OW 130
// if not IsInArea ( i , ruBaseArea2 ) then
18184: LD_VAR 0 1
18188: PPUSH
18189: LD_EXP 67
18193: PPUSH
18194: CALL_OW 308
18198: NOT
18199: IFFALSE 18215
// ComMoveToArea ( i , ruBaseArea2 ) ;
18201: LD_VAR 0 1
18205: PPUSH
18206: LD_EXP 67
18210: PPUSH
18211: CALL_OW 113
// end ; if tag = tBuild then
18215: LD_VAR 0 6
18219: PUSH
18220: LD_INT 5
18222: EQUAL
18223: IFFALSE 18422
// begin if IsInUnit ( i ) then
18225: LD_VAR 0 1
18229: PPUSH
18230: CALL_OW 310
18234: IFFALSE 18247
// begin ComExitBuilding ( i ) ;
18236: LD_VAR 0 1
18240: PPUSH
18241: CALL_OW 122
// continue ;
18245: GO 17788
// end ; if not Count ( ruBuildings2 ) then
18247: LD_EXP 77
18251: PPUSH
18252: CALL 57915 0 1
18256: NOT
18257: IFFALSE 18275
// begin SetTag ( i , 0 ) ;
18259: LD_VAR 0 1
18263: PPUSH
18264: LD_INT 0
18266: PPUSH
18267: CALL_OW 109
// continue ;
18271: GO 17788
// end else
18273: GO 18314
// if not CanBeBuiltOnlyResources ( ruBase2 , ruBuildings2 [ 1 ] [ 1 ] ) then
18275: LD_EXP 69
18279: PPUSH
18280: LD_EXP 77
18284: PUSH
18285: LD_INT 1
18287: ARRAY
18288: PUSH
18289: LD_INT 1
18291: ARRAY
18292: PPUSH
18293: CALL 97942 0 2
18297: NOT
18298: IFFALSE 18314
// begin SetTag ( i , 0 ) ;
18300: LD_VAR 0 1
18304: PPUSH
18305: LD_INT 0
18307: PPUSH
18308: CALL_OW 109
// continue ;
18312: GO 17788
// end ; undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
18314: LD_ADDR_VAR 0 3
18318: PUSH
18319: LD_EXP 67
18323: PPUSH
18324: LD_INT 57
18326: PUSH
18327: EMPTY
18328: LIST
18329: PPUSH
18330: CALL_OW 70
18334: ST_TO_ADDR
// if undone then
18335: LD_VAR 0 3
18339: IFFALSE 18361
// begin ComComplete ( i , undone [ 1 ] ) ;
18341: LD_VAR 0 1
18345: PPUSH
18346: LD_VAR 0 3
18350: PUSH
18351: LD_INT 1
18353: ARRAY
18354: PPUSH
18355: CALL 64051 0 2
// continue ;
18359: GO 17788
// end ; ComBuild ( i , ruBuildings2 [ 1 ] [ 1 ] , ruBuildings2 [ 1 ] [ 2 ] , ruBuildings2 [ 1 ] [ 3 ] , ruBuildings2 [ 1 ] [ 4 ] ) ;
18361: LD_VAR 0 1
18365: PPUSH
18366: LD_EXP 77
18370: PUSH
18371: LD_INT 1
18373: ARRAY
18374: PUSH
18375: LD_INT 1
18377: ARRAY
18378: PPUSH
18379: LD_EXP 77
18383: PUSH
18384: LD_INT 1
18386: ARRAY
18387: PUSH
18388: LD_INT 2
18390: ARRAY
18391: PPUSH
18392: LD_EXP 77
18396: PUSH
18397: LD_INT 1
18399: ARRAY
18400: PUSH
18401: LD_INT 3
18403: ARRAY
18404: PPUSH
18405: LD_EXP 77
18409: PUSH
18410: LD_INT 1
18412: ARRAY
18413: PUSH
18414: LD_INT 4
18416: ARRAY
18417: PPUSH
18418: CALL_OW 145
// end ; if tag = tCrates then
18422: LD_VAR 0 6
18426: PUSH
18427: LD_INT 2
18429: EQUAL
18430: IFFALSE 18567
// begin if IsInUnit ( i ) then
18432: LD_VAR 0 1
18436: PPUSH
18437: CALL_OW 310
18441: IFFALSE 18454
// begin ComExitBuilding ( i ) ;
18443: LD_VAR 0 1
18447: PPUSH
18448: CALL_OW 122
// continue ;
18452: GO 17788
// end ; if not cr then
18454: LD_VAR 0 8
18458: NOT
18459: IFFALSE 18475
// begin SetTag ( i , 0 ) ;
18461: LD_VAR 0 1
18465: PPUSH
18466: LD_INT 0
18468: PPUSH
18469: CALL_OW 109
// continue ;
18473: GO 17788
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
18475: LD_VAR 0 1
18479: PPUSH
18480: CALL_OW 314
18484: NOT
18485: IFFALSE 18538
18487: PUSH
18488: LD_INT 81
18490: PUSH
18491: LD_INT 3
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 92
18500: PUSH
18501: LD_VAR 0 8
18505: PUSH
18506: LD_INT 1
18508: ARRAY
18509: PUSH
18510: LD_VAR 0 8
18514: PUSH
18515: LD_INT 2
18517: ARRAY
18518: PUSH
18519: LD_INT 12
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PPUSH
18532: CALL_OW 69
18536: NOT
18537: AND
18538: IFFALSE 18567
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
18540: LD_VAR 0 1
18544: PPUSH
18545: LD_VAR 0 8
18549: PUSH
18550: LD_INT 1
18552: ARRAY
18553: PPUSH
18554: LD_VAR 0 8
18558: PUSH
18559: LD_INT 2
18561: ARRAY
18562: PPUSH
18563: CALL_OW 117
// end ; end ;
18567: GO 17788
18569: POP
18570: POP
// end ; sol := UnitFilter ( ruForces2 , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander2 ;
18571: LD_ADDR_VAR 0 10
18575: PUSH
18576: LD_EXP 60
18580: PPUSH
18581: LD_INT 2
18583: PUSH
18584: LD_INT 25
18586: PUSH
18587: LD_INT 1
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 25
18596: PUSH
18597: LD_INT 9
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 50
18611: PUSH
18612: EMPTY
18613: LIST
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PPUSH
18619: CALL_OW 72
18623: PUSH
18624: LD_EXP 62
18628: UNION
18629: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
18630: LD_ADDR_VAR 0 12
18634: PUSH
18635: LD_EXP 67
18639: PPUSH
18640: LD_INT 81
18642: PUSH
18643: LD_INT 3
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PPUSH
18650: CALL_OW 70
18654: ST_TO_ADDR
// if sol then
18655: LD_VAR 0 10
18659: IFFALSE 19193
// begin if enemyInBase then
18661: LD_VAR 0 12
18665: IFFALSE 18808
// begin for i in sol do
18667: LD_ADDR_VAR 0 1
18671: PUSH
18672: LD_VAR 0 10
18676: PUSH
18677: FOR_IN
18678: IFFALSE 18804
// begin tw := IsInUnit ( i ) ;
18680: LD_ADDR_VAR 0 7
18684: PUSH
18685: LD_VAR 0 1
18689: PPUSH
18690: CALL_OW 310
18694: ST_TO_ADDR
// if tw then
18695: LD_VAR 0 7
18699: IFFALSE 18778
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
18701: LD_VAR 0 7
18705: PUSH
18706: LD_INT 22
18708: PUSH
18709: LD_INT 3
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 101
18718: PUSH
18719: LD_INT 1
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 2
18728: PUSH
18729: LD_INT 30
18731: PUSH
18732: LD_INT 32
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 30
18741: PUSH
18742: LD_INT 31
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: LIST
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: LIST
18758: PPUSH
18759: CALL_OW 69
18763: IN
18764: NOT
18765: IFFALSE 18776
// ComExitBuilding ( i ) ;
18767: LD_VAR 0 1
18771: PPUSH
18772: CALL_OW 122
// end else
18776: GO 18802
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
18778: LD_VAR 0 1
18782: PPUSH
18783: LD_VAR 0 12
18787: PPUSH
18788: LD_VAR 0 1
18792: PPUSH
18793: CALL_OW 74
18797: PPUSH
18798: CALL_OW 115
// end ;
18802: GO 18677
18804: POP
18805: POP
// end else
18806: GO 19193
// begin empty := FilterUnitsInArea ( ruBaseArea2 , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
18808: LD_ADDR_VAR 0 13
18812: PUSH
18813: LD_EXP 67
18817: PPUSH
18818: LD_INT 3
18820: PUSH
18821: LD_INT 62
18823: PUSH
18824: EMPTY
18825: LIST
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 2
18833: PUSH
18834: LD_INT 30
18836: PUSH
18837: LD_INT 32
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 30
18846: PUSH
18847: LD_INT 4
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: LD_INT 30
18856: PUSH
18857: LD_INT 5
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 30
18866: PUSH
18867: LD_INT 31
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PPUSH
18885: CALL_OW 70
18889: ST_TO_ADDR
// if empty then
18890: LD_VAR 0 13
18894: IFFALSE 18911
// empty := ReverseArray ( empty ) ;
18896: LD_ADDR_VAR 0 13
18900: PUSH
18901: LD_VAR 0 13
18905: PPUSH
18906: CALL 88937 0 1
18910: ST_TO_ADDR
// for i in sol do
18911: LD_ADDR_VAR 0 1
18915: PUSH
18916: LD_VAR 0 10
18920: PUSH
18921: FOR_IN
18922: IFFALSE 19191
// begin tag := GetTag ( i ) ;
18924: LD_ADDR_VAR 0 6
18928: PUSH
18929: LD_VAR 0 1
18933: PPUSH
18934: CALL_OW 110
18938: ST_TO_ADDR
// if tag = tMech then
18939: LD_VAR 0 6
18943: PUSH
18944: LD_INT 7
18946: EQUAL
18947: IFFALSE 18951
// continue ;
18949: GO 18921
// if GetLives ( i ) < 1000 and tag <> tHeal then
18951: LD_VAR 0 1
18955: PPUSH
18956: CALL_OW 256
18960: PUSH
18961: LD_INT 1000
18963: LESS
18964: IFFALSE 18976
18966: PUSH
18967: LD_VAR 0 6
18971: PUSH
18972: LD_INT 1
18974: NONEQUAL
18975: AND
18976: IFFALSE 19028
// begin SetTag ( i , tHeal ) ;
18978: LD_VAR 0 1
18982: PPUSH
18983: LD_INT 1
18985: PPUSH
18986: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
18990: LD_VAR 0 1
18994: PPUSH
18995: LD_EXP 75
18999: PUSH
19000: LD_INT 1
19002: ARRAY
19003: PPUSH
19004: LD_EXP 75
19008: PUSH
19009: LD_INT 2
19011: ARRAY
19012: PPUSH
19013: CALL_OW 111
// AddComHold ( i ) ;
19017: LD_VAR 0 1
19021: PPUSH
19022: CALL_OW 200
// continue ;
19026: GO 18921
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
19028: LD_VAR 0 1
19032: PPUSH
19033: CALL_OW 256
19037: PUSH
19038: LD_INT 1000
19040: EQUAL
19041: IFFALSE 19053
19043: PUSH
19044: LD_VAR 0 6
19048: PUSH
19049: LD_INT 1
19051: EQUAL
19052: AND
19053: IFFALSE 19069
// begin SetTag ( i , 0 ) ;
19055: LD_VAR 0 1
19059: PPUSH
19060: LD_INT 0
19062: PPUSH
19063: CALL_OW 109
// continue ;
19067: GO 18921
// end ; if HasTask ( i ) then
19069: LD_VAR 0 1
19073: PPUSH
19074: CALL_OW 314
19078: IFFALSE 19082
// continue ;
19080: GO 18921
// if not IsInUnit ( i ) and not tag and empty then
19082: LD_VAR 0 1
19086: PPUSH
19087: CALL_OW 310
19091: NOT
19092: IFFALSE 19101
19094: PUSH
19095: LD_VAR 0 6
19099: NOT
19100: AND
19101: IFFALSE 19109
19103: PUSH
19104: LD_VAR 0 13
19108: AND
19109: IFFALSE 19189
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
19111: LD_VAR 0 1
19115: PPUSH
19116: LD_VAR 0 13
19120: PUSH
19121: LD_INT 1
19123: ARRAY
19124: PPUSH
19125: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
19129: LD_VAR 0 13
19133: PUSH
19134: LD_INT 1
19136: ARRAY
19137: PPUSH
19138: CALL_OW 266
19142: PUSH
19143: LD_INT 5
19145: EQUAL
19146: IFFALSE 19157
19148: PUSH
19149: LD_INT 50
19151: PPUSH
19152: CALL_OW 13
19156: AND
19157: IFFALSE 19171
// AddComChangeProfession ( i , class_bazooker ) ;
19159: LD_VAR 0 1
19163: PPUSH
19164: LD_INT 9
19166: PPUSH
19167: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
19171: LD_ADDR_VAR 0 13
19175: PUSH
19176: LD_VAR 0 13
19180: PPUSH
19181: LD_INT 1
19183: PPUSH
19184: CALL_OW 3
19188: ST_TO_ADDR
// end ; end ;
19189: GO 18921
19191: POP
19192: POP
// end ; end ; end ;
19193: PPOPN 16
19195: END
// every 0 0$1 trigger ruTanks and ruActiveAttacks do var i , mech , enemy ;
19196: LD_EXP 79
19200: IFFALSE 19208
19202: PUSH
19203: LD_EXP 22
19207: AND
19208: IFFALSE 19783
19210: GO 19212
19212: DISABLE
19213: LD_INT 0
19215: PPUSH
19216: PPUSH
19217: PPUSH
// begin enable ;
19218: ENABLE
// if not ruTanks then
19219: LD_EXP 79
19223: NOT
19224: IFFALSE 19228
// exit ;
19226: GO 19783
// for i in ruTanks do
19228: LD_ADDR_VAR 0 1
19232: PUSH
19233: LD_EXP 79
19237: PUSH
19238: FOR_IN
19239: IFFALSE 19781
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19241: LD_VAR 0 1
19245: PPUSH
19246: CALL_OW 302
19250: NOT
19251: IFTRUE 19268
19253: PUSH
19254: LD_VAR 0 1
19258: PPUSH
19259: CALL_OW 255
19263: PUSH
19264: LD_INT 3
19266: NONEQUAL
19267: OR
19268: IFFALSE 19288
// begin ruTanks := ruTanks diff i ;
19270: LD_ADDR_EXP 79
19274: PUSH
19275: LD_EXP 79
19279: PUSH
19280: LD_VAR 0 1
19284: DIFF
19285: ST_TO_ADDR
// continue ;
19286: GO 19238
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19288: LD_VAR 0 1
19292: PPUSH
19293: CALL_OW 110
19297: NOT
19298: IFTRUE 19315
19300: PUSH
19301: LD_VAR 0 1
19305: PPUSH
19306: CALL_OW 110
19310: PUSH
19311: LD_INT 0
19313: EQUAL
19314: OR
19315: IFFALSE 19492
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase ) then
19317: LD_VAR 0 1
19321: PPUSH
19322: CALL_OW 262
19326: PUSH
19327: LD_INT 1
19329: EQUAL
19330: IFFALSE 19347
19332: PUSH
19333: LD_VAR 0 1
19337: PPUSH
19338: CALL_OW 261
19342: PUSH
19343: LD_INT 50
19345: LESS
19346: AND
19347: IFFALSE 19360
19349: PUSH
19350: LD_EXP 68
19354: PPUSH
19355: CALL_OW 302
19359: AND
19360: IFFALSE 19447
// begin ComMoveXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) ;
19362: LD_VAR 0 1
19366: PPUSH
19367: LD_EXP 68
19371: PPUSH
19372: CALL_OW 250
19376: PPUSH
19377: LD_EXP 68
19381: PPUSH
19382: CALL_OW 251
19386: PPUSH
19387: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19391: LD_INT 35
19393: PPUSH
19394: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) < 6 ;
19398: LD_VAR 0 1
19402: PPUSH
19403: LD_EXP 68
19407: PPUSH
19408: CALL_OW 250
19412: PPUSH
19413: LD_EXP 68
19417: PPUSH
19418: CALL_OW 251
19422: PPUSH
19423: CALL_OW 297
19427: PUSH
19428: LD_INT 6
19430: LESS
19431: IFFALSE 19391
// SetFuel ( i , 100 ) ;
19433: LD_VAR 0 1
19437: PPUSH
19438: LD_INT 100
19440: PPUSH
19441: CALL_OW 240
// end else
19445: GO 19492
// if not IsInArea ( i , ruParkingArea ) then
19447: LD_VAR 0 1
19451: PPUSH
19452: LD_EXP 82
19456: PPUSH
19457: CALL_OW 308
19461: NOT
19462: IFFALSE 19480
// ComMoveToArea ( i , ruParkingArea ) else
19464: LD_VAR 0 1
19468: PPUSH
19469: LD_EXP 82
19473: PPUSH
19474: CALL_OW 113
19478: GO 19492
// SetTag ( i , tParking ) ;
19480: LD_VAR 0 1
19484: PPUSH
19485: LD_INT 12
19487: PPUSH
19488: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
19492: LD_VAR 0 1
19496: PPUSH
19497: CALL_OW 110
19501: PUSH
19502: LD_INT 12
19504: EQUAL
19505: IFFALSE 19635
// begin if GetLives ( i ) < 650 then
19507: LD_VAR 0 1
19511: PPUSH
19512: CALL_OW 256
19516: PUSH
19517: LD_INT 650
19519: LESS
19520: IFFALSE 19612
// begin if not IsDrivenBy ( i ) then
19522: LD_VAR 0 1
19526: PPUSH
19527: CALL_OW 311
19531: NOT
19532: IFFALSE 19536
// continue ;
19534: GO 19238
// mech := IsDrivenBy ( i ) ;
19536: LD_ADDR_VAR 0 2
19540: PUSH
19541: LD_VAR 0 1
19545: PPUSH
19546: CALL_OW 311
19550: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19551: LD_VAR 0 2
19555: PPUSH
19556: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19560: LD_VAR 0 2
19564: PPUSH
19565: LD_VAR 0 1
19569: PPUSH
19570: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19574: LD_INT 35
19576: PPUSH
19577: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19581: LD_VAR 0 1
19585: PPUSH
19586: CALL_OW 256
19590: PUSH
19591: LD_INT 1000
19593: EQUAL
19594: IFFALSE 19574
// ComEnterUnit ( mech , i ) ;
19596: LD_VAR 0 2
19600: PPUSH
19601: LD_VAR 0 1
19605: PPUSH
19606: CALL_OW 120
// end else
19610: GO 19635
// if IsDrivenBy ( i ) then
19612: LD_VAR 0 1
19616: PPUSH
19617: CALL_OW 311
19621: IFFALSE 19635
// SetTag ( i , tAttack ) ;
19623: LD_VAR 0 1
19627: PPUSH
19628: LD_INT 13
19630: PPUSH
19631: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
19635: LD_VAR 0 1
19639: PPUSH
19640: CALL_OW 110
19644: PUSH
19645: LD_INT 13
19647: EQUAL
19648: IFFALSE 19779
// begin enemy := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
19650: LD_ADDR_VAR 0 3
19654: PUSH
19655: LD_EXP 66
19659: PPUSH
19660: LD_INT 81
19662: PUSH
19663: LD_INT 3
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PPUSH
19670: CALL_OW 70
19674: ST_TO_ADDR
// if GetLives ( i ) < 650 then
19675: LD_VAR 0 1
19679: PPUSH
19680: CALL_OW 256
19684: PUSH
19685: LD_INT 650
19687: LESS
19688: IFFALSE 19713
// begin ComStop ( i ) ;
19690: LD_VAR 0 1
19694: PPUSH
19695: CALL_OW 141
// SetTag ( i , 0 ) ;
19699: LD_VAR 0 1
19703: PPUSH
19704: LD_INT 0
19706: PPUSH
19707: CALL_OW 109
// continue ;
19711: GO 19238
// end ; if enemy then
19713: LD_VAR 0 3
19717: IFFALSE 19757
// begin if not HasTask ( i ) then
19719: LD_VAR 0 1
19723: PPUSH
19724: CALL_OW 314
19728: NOT
19729: IFFALSE 19755
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
19731: LD_VAR 0 1
19735: PPUSH
19736: LD_VAR 0 3
19740: PPUSH
19741: LD_VAR 0 1
19745: PPUSH
19746: CALL_OW 74
19750: PPUSH
19751: CALL_OW 115
// end else
19755: GO 19779
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
19757: LD_VAR 0 1
19761: PPUSH
19762: LD_INT 105
19764: PUSH
19765: LD_INT 35
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: EMPTY
19773: LIST
19774: PPUSH
19775: CALL 96613 0 2
// end ; end ;
19779: GO 19238
19781: POP
19782: POP
// end ;
19783: PPOPN 3
19785: END
// every 0 0$1 trigger ruTanks2 and ruActiveAttacks do var i , mech , enemy ;
19786: LD_EXP 80
19790: IFFALSE 19798
19792: PUSH
19793: LD_EXP 22
19797: AND
19798: IFFALSE 20373
19800: GO 19802
19802: DISABLE
19803: LD_INT 0
19805: PPUSH
19806: PPUSH
19807: PPUSH
// begin enable ;
19808: ENABLE
// if not ruTanks2 then
19809: LD_EXP 80
19813: NOT
19814: IFFALSE 19818
// exit ;
19816: GO 20373
// for i in ruTanks2 do
19818: LD_ADDR_VAR 0 1
19822: PUSH
19823: LD_EXP 80
19827: PUSH
19828: FOR_IN
19829: IFFALSE 20371
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19831: LD_VAR 0 1
19835: PPUSH
19836: CALL_OW 302
19840: NOT
19841: IFTRUE 19858
19843: PUSH
19844: LD_VAR 0 1
19848: PPUSH
19849: CALL_OW 255
19853: PUSH
19854: LD_INT 3
19856: NONEQUAL
19857: OR
19858: IFFALSE 19878
// begin ruTanks := ruTanks diff i ;
19860: LD_ADDR_EXP 79
19864: PUSH
19865: LD_EXP 79
19869: PUSH
19870: LD_VAR 0 1
19874: DIFF
19875: ST_TO_ADDR
// continue ;
19876: GO 19828
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19878: LD_VAR 0 1
19882: PPUSH
19883: CALL_OW 110
19887: NOT
19888: IFTRUE 19905
19890: PUSH
19891: LD_VAR 0 1
19895: PPUSH
19896: CALL_OW 110
19900: PUSH
19901: LD_INT 0
19903: EQUAL
19904: OR
19905: IFFALSE 20082
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase2 ) then
19907: LD_VAR 0 1
19911: PPUSH
19912: CALL_OW 262
19916: PUSH
19917: LD_INT 1
19919: EQUAL
19920: IFFALSE 19937
19922: PUSH
19923: LD_VAR 0 1
19927: PPUSH
19928: CALL_OW 261
19932: PUSH
19933: LD_INT 50
19935: LESS
19936: AND
19937: IFFALSE 19950
19939: PUSH
19940: LD_EXP 69
19944: PPUSH
19945: CALL_OW 302
19949: AND
19950: IFFALSE 20037
// begin ComMoveXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) ;
19952: LD_VAR 0 1
19956: PPUSH
19957: LD_EXP 69
19961: PPUSH
19962: CALL_OW 250
19966: PPUSH
19967: LD_EXP 69
19971: PPUSH
19972: CALL_OW 251
19976: PPUSH
19977: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19981: LD_INT 35
19983: PPUSH
19984: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) < 6 ;
19988: LD_VAR 0 1
19992: PPUSH
19993: LD_EXP 69
19997: PPUSH
19998: CALL_OW 250
20002: PPUSH
20003: LD_EXP 69
20007: PPUSH
20008: CALL_OW 251
20012: PPUSH
20013: CALL_OW 297
20017: PUSH
20018: LD_INT 6
20020: LESS
20021: IFFALSE 19981
// SetFuel ( i , 100 ) ;
20023: LD_VAR 0 1
20027: PPUSH
20028: LD_INT 100
20030: PPUSH
20031: CALL_OW 240
// end else
20035: GO 20082
// if not IsInArea ( i , ruParkingArea2 ) then
20037: LD_VAR 0 1
20041: PPUSH
20042: LD_EXP 83
20046: PPUSH
20047: CALL_OW 308
20051: NOT
20052: IFFALSE 20070
// ComMoveToArea ( i , ruParkingArea2 ) else
20054: LD_VAR 0 1
20058: PPUSH
20059: LD_EXP 83
20063: PPUSH
20064: CALL_OW 113
20068: GO 20082
// SetTag ( i , tParking ) ;
20070: LD_VAR 0 1
20074: PPUSH
20075: LD_INT 12
20077: PPUSH
20078: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
20082: LD_VAR 0 1
20086: PPUSH
20087: CALL_OW 110
20091: PUSH
20092: LD_INT 12
20094: EQUAL
20095: IFFALSE 20225
// begin if GetLives ( i ) < 650 then
20097: LD_VAR 0 1
20101: PPUSH
20102: CALL_OW 256
20106: PUSH
20107: LD_INT 650
20109: LESS
20110: IFFALSE 20202
// begin if not IsDrivenBy ( i ) then
20112: LD_VAR 0 1
20116: PPUSH
20117: CALL_OW 311
20121: NOT
20122: IFFALSE 20126
// continue ;
20124: GO 19828
// mech := IsDrivenBy ( i ) ;
20126: LD_ADDR_VAR 0 2
20130: PUSH
20131: LD_VAR 0 1
20135: PPUSH
20136: CALL_OW 311
20140: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
20141: LD_VAR 0 2
20145: PPUSH
20146: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
20150: LD_VAR 0 2
20154: PPUSH
20155: LD_VAR 0 1
20159: PPUSH
20160: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
20164: LD_INT 35
20166: PPUSH
20167: CALL_OW 67
// until GetLives ( i ) = 1000 ;
20171: LD_VAR 0 1
20175: PPUSH
20176: CALL_OW 256
20180: PUSH
20181: LD_INT 1000
20183: EQUAL
20184: IFFALSE 20164
// ComEnterUnit ( mech , i ) ;
20186: LD_VAR 0 2
20190: PPUSH
20191: LD_VAR 0 1
20195: PPUSH
20196: CALL_OW 120
// end else
20200: GO 20225
// if IsDrivenBy ( i ) then
20202: LD_VAR 0 1
20206: PPUSH
20207: CALL_OW 311
20211: IFFALSE 20225
// SetTag ( i , tAttack ) ;
20213: LD_VAR 0 1
20217: PPUSH
20218: LD_INT 13
20220: PPUSH
20221: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
20225: LD_VAR 0 1
20229: PPUSH
20230: CALL_OW 110
20234: PUSH
20235: LD_INT 13
20237: EQUAL
20238: IFFALSE 20369
// begin enemy := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
20240: LD_ADDR_VAR 0 3
20244: PUSH
20245: LD_EXP 67
20249: PPUSH
20250: LD_INT 81
20252: PUSH
20253: LD_INT 3
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PPUSH
20260: CALL_OW 70
20264: ST_TO_ADDR
// if GetLives ( i ) < 650 then
20265: LD_VAR 0 1
20269: PPUSH
20270: CALL_OW 256
20274: PUSH
20275: LD_INT 650
20277: LESS
20278: IFFALSE 20303
// begin ComStop ( i ) ;
20280: LD_VAR 0 1
20284: PPUSH
20285: CALL_OW 141
// SetTag ( i , 0 ) ;
20289: LD_VAR 0 1
20293: PPUSH
20294: LD_INT 0
20296: PPUSH
20297: CALL_OW 109
// continue ;
20301: GO 19828
// end ; if enemy then
20303: LD_VAR 0 3
20307: IFFALSE 20347
// begin if not HasTask ( i ) then
20309: LD_VAR 0 1
20313: PPUSH
20314: CALL_OW 314
20318: NOT
20319: IFFALSE 20345
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
20321: LD_VAR 0 1
20325: PPUSH
20326: LD_VAR 0 3
20330: PPUSH
20331: LD_VAR 0 1
20335: PPUSH
20336: CALL_OW 74
20340: PPUSH
20341: CALL_OW 115
// end else
20345: GO 20369
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20347: LD_VAR 0 1
20351: PPUSH
20352: LD_INT 105
20354: PUSH
20355: LD_INT 35
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: EMPTY
20363: LIST
20364: PPUSH
20365: CALL 96613 0 2
// end ; end ;
20369: GO 19828
20371: POP
20372: POP
// end ;
20373: PPOPN 3
20375: END
// every 5 5$00 trigger Count ( ruExtraTanks ) do
20376: LD_EXP 81
20380: PPUSH
20381: CALL 57915 0 1
20385: IFFALSE 20398
20387: GO 20389
20389: DISABLE
// begin enable ;
20390: ENABLE
// RaiseSailEvent ( EExtraAttack ) ;
20391: LD_INT 106
20393: PPUSH
20394: CALL_OW 427
// end ;
20398: END
// export function RussianExtraAttack ; var i , tmp ; begin
20399: LD_INT 0
20401: PPUSH
20402: PPUSH
20403: PPUSH
// tmp := UnitFilter ( ruExtraTanks , [ f_ok ] ) ;
20404: LD_ADDR_VAR 0 3
20408: PUSH
20409: LD_EXP 81
20413: PPUSH
20414: LD_INT 50
20416: PUSH
20417: EMPTY
20418: LIST
20419: PPUSH
20420: CALL_OW 72
20424: ST_TO_ADDR
// ruExtraTanks := ruExtraTanks diff tmp ;
20425: LD_ADDR_EXP 81
20429: PUSH
20430: LD_EXP 81
20434: PUSH
20435: LD_VAR 0 3
20439: DIFF
20440: ST_TO_ADDR
// ComAgressiveMove ( tmp , 105 , 35 ) ;
20441: LD_VAR 0 3
20445: PPUSH
20446: LD_INT 105
20448: PPUSH
20449: LD_INT 35
20451: PPUSH
20452: CALL_OW 114
// wait ( 0 0$5 ) ;
20456: LD_INT 175
20458: PPUSH
20459: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20463: LD_INT 35
20465: PPUSH
20466: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20470: LD_ADDR_VAR 0 3
20474: PUSH
20475: LD_VAR 0 3
20479: PPUSH
20480: LD_INT 50
20482: PUSH
20483: EMPTY
20484: LIST
20485: PPUSH
20486: CALL_OW 72
20490: ST_TO_ADDR
// for i in tmp do
20491: LD_ADDR_VAR 0 2
20495: PUSH
20496: LD_VAR 0 3
20500: PUSH
20501: FOR_IN
20502: IFFALSE 20528
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20504: LD_VAR 0 2
20508: PPUSH
20509: LD_INT 105
20511: PUSH
20512: LD_INT 35
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: EMPTY
20520: LIST
20521: PPUSH
20522: CALL 96613 0 2
20526: GO 20501
20528: POP
20529: POP
// until not tmp ;
20530: LD_VAR 0 3
20534: NOT
20535: IFFALSE 20463
// end ;
20537: LD_VAR 0 1
20541: RET
// export function PrepareRussianAttack ( strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
20542: LD_INT 0
20544: PPUSH
20545: PPUSH
20546: PPUSH
20547: PPUSH
20548: PPUSH
20549: PPUSH
20550: PPUSH
20551: PPUSH
20552: PPUSH
20553: PPUSH
// result := [ ] ;
20554: LD_ADDR_VAR 0 2
20558: PUSH
20559: EMPTY
20560: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
20561: LD_ADDR_VAR 0 7
20565: PUSH
20566: LD_INT 4
20568: PUSH
20569: LD_INT 5
20571: PUSH
20572: LD_INT 6
20574: PUSH
20575: LD_INT 7
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: PUSH
20584: LD_OWVAR 67
20588: ARRAY
20589: ST_TO_ADDR
// area := arAttackSpawn2Area ;
20590: LD_ADDR_VAR 0 8
20594: PUSH
20595: LD_INT 19
20597: ST_TO_ADDR
// parking := ruGatPointArea ;
20598: LD_ADDR_VAR 0 9
20602: PUSH
20603: LD_INT 32
20605: ST_TO_ADDR
// dir := 5 ;
20606: LD_ADDR_VAR 0 10
20610: PUSH
20611: LD_INT 5
20613: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) then
20614: LD_VAR 0 8
20618: PPUSH
20619: LD_INT 2
20621: PUSH
20622: LD_INT 22
20624: PUSH
20625: LD_INT 0
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 22
20634: PUSH
20635: LD_INT 6
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: LIST
20646: PPUSH
20647: CALL_OW 70
20651: IFFALSE 20712
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) do
20653: LD_ADDR_VAR 0 3
20657: PUSH
20658: LD_VAR 0 8
20662: PPUSH
20663: LD_INT 2
20665: PUSH
20666: LD_INT 22
20668: PUSH
20669: LD_INT 0
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 22
20678: PUSH
20679: LD_INT 6
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: LIST
20690: PPUSH
20691: CALL_OW 70
20695: PUSH
20696: FOR_IN
20697: IFFALSE 20710
// RemoveUnit ( i ) ;
20699: LD_VAR 0 3
20703: PPUSH
20704: CALL_OW 64
20708: GO 20696
20710: POP
20711: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) then
20712: LD_VAR 0 8
20716: PPUSH
20717: LD_INT 3
20719: PUSH
20720: LD_INT 21
20722: PUSH
20723: LD_INT 1
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 22
20736: PUSH
20737: LD_INT 1
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PPUSH
20748: CALL_OW 70
20752: IFFALSE 20816
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) do
20754: LD_ADDR_VAR 0 3
20758: PUSH
20759: LD_VAR 0 8
20763: PPUSH
20764: LD_INT 3
20766: PUSH
20767: LD_INT 21
20769: PUSH
20770: LD_INT 1
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 22
20783: PUSH
20784: LD_INT 1
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PPUSH
20795: CALL_OW 70
20799: PUSH
20800: FOR_IN
20801: IFFALSE 20814
// KillUnit ( i ) ;
20803: LD_VAR 0 3
20807: PPUSH
20808: CALL_OW 66
20812: GO 20800
20814: POP
20815: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) then
20816: LD_VAR 0 8
20820: PPUSH
20821: LD_INT 21
20823: PUSH
20824: LD_INT 1
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 22
20833: PUSH
20834: LD_INT 1
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PPUSH
20845: CALL_OW 70
20849: IFFALSE 20912
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) do
20851: LD_ADDR_VAR 0 3
20855: PUSH
20856: LD_VAR 0 8
20860: PPUSH
20861: LD_INT 21
20863: PUSH
20864: LD_INT 1
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 22
20873: PUSH
20874: LD_INT 1
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PPUSH
20885: CALL_OW 70
20889: PUSH
20890: FOR_IN
20891: IFFALSE 20910
// ComMoveXY ( i , 92 , 92 ) ;
20893: LD_VAR 0 3
20897: PPUSH
20898: LD_INT 92
20900: PPUSH
20901: LD_INT 92
20903: PPUSH
20904: CALL_OW 111
20908: GO 20890
20910: POP
20911: POP
// repeat wait ( 0 0$1 ) ;
20912: LD_INT 35
20914: PPUSH
20915: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
20919: LD_VAR 0 8
20923: PPUSH
20924: LD_INT 50
20926: PUSH
20927: EMPTY
20928: LIST
20929: PPUSH
20930: CALL_OW 70
20934: NOT
20935: IFFALSE 20912
// InitHC_All ( ) ;
20937: CALL_OW 584
// InitVc ;
20941: CALL_OW 20
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + strength do
20945: LD_ADDR_VAR 0 3
20949: PUSH
20950: DOUBLE
20951: LD_INT 1
20953: DEC
20954: ST_TO_ADDR
20955: LD_INT 3
20957: PUSH
20958: LD_INT 4
20960: PUSH
20961: LD_INT 4
20963: PUSH
20964: LD_INT 5
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: PUSH
20973: LD_OWVAR 67
20977: ARRAY
20978: PUSH
20979: LD_VAR 0 1
20983: PLUS
20984: PUSH
20985: FOR_TO
20986: IFFALSE 21293
// begin uc_side := 6 ;
20988: LD_ADDR_OWVAR 20
20992: PUSH
20993: LD_INT 6
20995: ST_TO_ADDR
// uc_nation := nation_russian ;
20996: LD_ADDR_OWVAR 21
21000: PUSH
21001: LD_INT 3
21003: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer , control_computer ] [ rand ( 1 , 4 ) ] ;
21004: LD_ADDR_VAR 0 11
21008: PUSH
21009: LD_INT 1
21011: PUSH
21012: LD_INT 3
21014: PUSH
21015: LD_INT 3
21017: PUSH
21018: LD_INT 3
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 1
21029: PPUSH
21030: LD_INT 4
21032: PPUSH
21033: CALL_OW 12
21037: ARRAY
21038: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
21039: LD_INT 22
21041: PUSH
21042: LD_INT 24
21044: PUSH
21045: LD_INT 23
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: LIST
21052: PUSH
21053: LD_VAR 0 3
21057: PUSH
21058: LD_INT 3
21060: MOD
21061: PUSH
21062: LD_INT 1
21064: PLUS
21065: ARRAY
21066: PPUSH
21067: LD_INT 3
21069: PUSH
21070: LD_INT 1
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PUSH
21077: LD_INT 1
21079: PPUSH
21080: LD_INT 2
21082: PPUSH
21083: CALL_OW 12
21087: ARRAY
21088: PPUSH
21089: LD_VAR 0 11
21093: PPUSH
21094: LD_INT 45
21096: PUSH
21097: LD_INT 46
21099: PUSH
21100: LD_INT 43
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: LIST
21107: PUSH
21108: LD_VAR 0 3
21112: PUSH
21113: LD_INT 3
21115: MOD
21116: PUSH
21117: LD_INT 1
21119: PLUS
21120: ARRAY
21121: PPUSH
21122: LD_INT 100
21124: PPUSH
21125: CALL 60677 0 5
// veh := CreateVehicle ;
21129: LD_ADDR_VAR 0 6
21133: PUSH
21134: CALL_OW 45
21138: ST_TO_ADDR
// SetDir ( veh , dir ) ;
21139: LD_VAR 0 6
21143: PPUSH
21144: LD_VAR 0 10
21148: PPUSH
21149: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
21153: LD_VAR 0 6
21157: PPUSH
21158: LD_VAR 0 8
21162: PPUSH
21163: LD_INT 0
21165: PPUSH
21166: CALL_OW 49
// if control = control_manual then
21170: LD_VAR 0 11
21174: PUSH
21175: LD_INT 1
21177: EQUAL
21178: IFFALSE 21232
// begin uc_side := 6 ;
21180: LD_ADDR_OWVAR 20
21184: PUSH
21185: LD_INT 6
21187: ST_TO_ADDR
// uc_nation := nation_russian ;
21188: LD_ADDR_OWVAR 21
21192: PUSH
21193: LD_INT 3
21195: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
21196: LD_INT 0
21198: PPUSH
21199: LD_VAR 0 7
21203: PPUSH
21204: CALL_OW 383
// un := CreateHuman ;
21208: LD_ADDR_VAR 0 5
21212: PUSH
21213: CALL_OW 44
21217: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
21218: LD_VAR 0 5
21222: PPUSH
21223: LD_VAR 0 6
21227: PPUSH
21228: CALL_OW 52
// end ; repeat ComMoveToArea ( veh , parking ) ;
21232: LD_VAR 0 6
21236: PPUSH
21237: LD_VAR 0 9
21241: PPUSH
21242: CALL_OW 113
// wait ( 0 0$3 ) ;
21246: LD_INT 105
21248: PPUSH
21249: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
21253: LD_VAR 0 8
21257: PPUSH
21258: LD_INT 50
21260: PUSH
21261: EMPTY
21262: LIST
21263: PPUSH
21264: CALL_OW 70
21268: NOT
21269: IFFALSE 21232
// result := Join ( result , veh ) ;
21271: LD_ADDR_VAR 0 2
21275: PUSH
21276: LD_VAR 0 2
21280: PPUSH
21281: LD_VAR 0 6
21285: PPUSH
21286: CALL 93847 0 2
21290: ST_TO_ADDR
// end ;
21291: GO 20985
21293: POP
21294: POP
// for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
21295: LD_ADDR_VAR 0 3
21299: PUSH
21300: DOUBLE
21301: LD_INT 1
21303: DEC
21304: ST_TO_ADDR
21305: LD_INT 2
21307: PUSH
21308: LD_INT 2
21310: PUSH
21311: LD_INT 3
21313: PUSH
21314: LD_INT 4
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: PUSH
21323: LD_OWVAR 67
21327: ARRAY
21328: PUSH
21329: FOR_TO
21330: IFFALSE 21486
// begin uc_side := 6 ;
21332: LD_ADDR_OWVAR 20
21336: PUSH
21337: LD_INT 6
21339: ST_TO_ADDR
// uc_nation := nation_russian ;
21340: LD_ADDR_OWVAR 21
21344: PUSH
21345: LD_INT 3
21347: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
21348: LD_INT 0
21350: PPUSH
21351: LD_VAR 0 7
21355: PPUSH
21356: CALL_OW 381
// un := CreateHuman ;
21360: LD_ADDR_VAR 0 5
21364: PUSH
21365: CALL_OW 44
21369: ST_TO_ADDR
// if Prob ( [ 35 , 60 , 70 , 80 ] [ Difficulty ] ) then
21370: LD_INT 35
21372: PUSH
21373: LD_INT 60
21375: PUSH
21376: LD_INT 70
21378: PUSH
21379: LD_INT 80
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: PUSH
21388: LD_OWVAR 67
21392: ARRAY
21393: PPUSH
21394: CALL_OW 13
21398: IFFALSE 21412
// SetClass ( un , class_bazooker ) ;
21400: LD_VAR 0 5
21404: PPUSH
21405: LD_INT 9
21407: PPUSH
21408: CALL_OW 336
// SetDir ( un , dir ) ;
21412: LD_VAR 0 5
21416: PPUSH
21417: LD_VAR 0 10
21421: PPUSH
21422: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
21426: LD_VAR 0 5
21430: PPUSH
21431: LD_VAR 0 8
21435: PPUSH
21436: LD_INT 0
21438: PPUSH
21439: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
21443: LD_VAR 0 5
21447: PPUSH
21448: LD_VAR 0 9
21452: PPUSH
21453: CALL_OW 113
// wait ( 0 0$1 ) ;
21457: LD_INT 35
21459: PPUSH
21460: CALL_OW 67
// result := Join ( result , un ) ;
21464: LD_ADDR_VAR 0 2
21468: PUSH
21469: LD_VAR 0 2
21473: PPUSH
21474: LD_VAR 0 5
21478: PPUSH
21479: CALL 93847 0 2
21483: ST_TO_ADDR
// end ;
21484: GO 21329
21486: POP
21487: POP
// end ;
21488: LD_VAR 0 2
21492: RET
// export function SendRussianAttack ( wave ) ; var path , attackers , e , i , enemy ; begin
21493: LD_INT 0
21495: PPUSH
21496: PPUSH
21497: PPUSH
21498: PPUSH
21499: PPUSH
21500: PPUSH
// russianWaveAttack := Inc ( russianWaveAttack ) ;
21501: LD_ADDR_EXP 18
21505: PUSH
21506: LD_EXP 18
21510: PPUSH
21511: CALL 95220 0 1
21515: ST_TO_ADDR
// path := [ [ 99 , 91 ] , [ 78 , 50 ] , [ 91 , 45 ] ] ;
21516: LD_ADDR_VAR 0 3
21520: PUSH
21521: LD_INT 99
21523: PUSH
21524: LD_INT 91
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 78
21533: PUSH
21534: LD_INT 50
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 91
21543: PUSH
21544: LD_INT 45
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: LIST
21555: ST_TO_ADDR
// attackers := PrepareRussianAttack ( wave ) ;
21556: LD_ADDR_VAR 0 4
21560: PUSH
21561: LD_VAR 0 1
21565: PPUSH
21566: CALL 20542 0 1
21570: ST_TO_ADDR
// ComAgressiveMove ( UnitFilter ( attackers , [ f_type , unit_human ] ) , 108 , 60 ) ;
21571: LD_VAR 0 4
21575: PPUSH
21576: LD_INT 21
21578: PUSH
21579: LD_INT 1
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PPUSH
21586: CALL_OW 72
21590: PPUSH
21591: LD_INT 108
21593: PPUSH
21594: LD_INT 60
21596: PPUSH
21597: CALL_OW 114
// DRussianNextAttack ;
21601: CALL 28742 0 0
// repeat wait ( 0 0$2 ) ;
21605: LD_INT 70
21607: PPUSH
21608: CALL_OW 67
// enemy := FilterAllUnits ( [ f_enemy , 6 ] ) ;
21612: LD_ADDR_VAR 0 7
21616: PUSH
21617: LD_INT 81
21619: PUSH
21620: LD_INT 6
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PPUSH
21627: CALL_OW 69
21631: ST_TO_ADDR
// attackers := UnitFilter ( attackers , [ f_ok ] ) ;
21632: LD_ADDR_VAR 0 4
21636: PUSH
21637: LD_VAR 0 4
21641: PPUSH
21642: LD_INT 50
21644: PUSH
21645: EMPTY
21646: LIST
21647: PPUSH
21648: CALL_OW 72
21652: ST_TO_ADDR
// for i in attackers do
21653: LD_ADDR_VAR 0 6
21657: PUSH
21658: LD_VAR 0 4
21662: PUSH
21663: FOR_IN
21664: IFFALSE 22042
// begin if not IsOk ( i ) then
21666: LD_VAR 0 6
21670: PPUSH
21671: CALL_OW 302
21675: NOT
21676: IFFALSE 21696
// begin attackers := attackers diff i ;
21678: LD_ADDR_VAR 0 4
21682: PUSH
21683: LD_VAR 0 4
21687: PUSH
21688: LD_VAR 0 6
21692: DIFF
21693: ST_TO_ADDR
// continue ;
21694: GO 21663
// end ; if GetType ( i ) = unit_vehicle then
21696: LD_VAR 0 6
21700: PPUSH
21701: CALL_OW 247
21705: PUSH
21706: LD_INT 2
21708: EQUAL
21709: IFFALSE 21727
// AgressiveMove ( i , path ) else
21711: LD_VAR 0 6
21715: PPUSH
21716: LD_VAR 0 3
21720: PPUSH
21721: CALL 96613 0 2
21725: GO 22040
// begin if GetClass ( i ) = class_bazooker then
21727: LD_VAR 0 6
21731: PPUSH
21732: CALL_OW 257
21736: PUSH
21737: LD_INT 9
21739: EQUAL
21740: IFFALSE 22016
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
21742: LD_VAR 0 6
21746: PPUSH
21747: LD_VAR 0 7
21751: PPUSH
21752: LD_VAR 0 6
21756: PPUSH
21757: CALL_OW 74
21761: PPUSH
21762: CALL_OW 296
21766: PUSH
21767: LD_INT 12
21769: GREATER
21770: IFFALSE 21798
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21772: LD_VAR 0 6
21776: PPUSH
21777: LD_VAR 0 7
21781: PPUSH
21782: LD_VAR 0 6
21786: PPUSH
21787: CALL_OW 74
21791: PPUSH
21792: CALL 98245 0 2
21796: GO 22014
// begin e := NearestUnitToUnit ( enemy , i ) ;
21798: LD_ADDR_VAR 0 5
21802: PUSH
21803: LD_VAR 0 7
21807: PPUSH
21808: LD_VAR 0 6
21812: PPUSH
21813: CALL_OW 74
21817: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
21818: LD_INT 1
21820: PPUSH
21821: LD_INT 3
21823: PPUSH
21824: CALL_OW 12
21828: PUSH
21829: LD_INT 1
21831: DOUBLE
21832: EQUAL
21833: IFTRUE 21837
21835: GO 21854
21837: POP
// ComAttackUnit ( i , e ) ; 2 :
21838: LD_VAR 0 6
21842: PPUSH
21843: LD_VAR 0 5
21847: PPUSH
21848: CALL_OW 115
21852: GO 22014
21854: LD_INT 2
21856: DOUBLE
21857: EQUAL
21858: IFTRUE 21862
21860: GO 21942
21862: POP
// begin ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ;
21863: LD_VAR 0 6
21867: PPUSH
21868: LD_VAR 0 5
21872: PPUSH
21873: CALL_OW 250
21877: PPUSH
21878: LD_VAR 0 5
21882: PPUSH
21883: CALL_OW 251
21887: PPUSH
21888: CALL_OW 153
// if GetType ( e ) <> unit_building and not dialogRussianSpaceAmmo then
21892: LD_VAR 0 5
21896: PPUSH
21897: CALL_OW 247
21901: PUSH
21902: LD_INT 3
21904: NONEQUAL
21905: IFFALSE 21914
21907: PUSH
21908: LD_EXP 17
21912: NOT
21913: AND
21914: IFFALSE 21940
// begin dialogRussianSpaceAmmo := true ;
21916: LD_ADDR_EXP 17
21920: PUSH
21921: LD_INT 1
21923: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21924: LD_INT 210
21926: PPUSH
21927: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21931: LD_VAR 0 5
21935: PPUSH
21936: CALL 28789 0 1
// end ; end ; 3 :
21940: GO 22014
21942: LD_INT 3
21944: DOUBLE
21945: EQUAL
21946: IFTRUE 21950
21948: GO 22013
21950: POP
// begin ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ;
21951: LD_VAR 0 6
21955: PPUSH
21956: LD_VAR 0 5
21960: PPUSH
21961: CALL_OW 250
21965: PPUSH
21966: LD_VAR 0 5
21970: PPUSH
21971: CALL_OW 251
21975: PPUSH
21976: CALL_OW 154
// if not dialogRussianSpaceAmmo then
21980: LD_EXP 17
21984: NOT
21985: IFFALSE 22011
// begin dialogRussianSpaceAmmo := true ;
21987: LD_ADDR_EXP 17
21991: PUSH
21992: LD_INT 1
21994: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21995: LD_INT 210
21997: PPUSH
21998: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
22002: LD_VAR 0 5
22006: PPUSH
22007: CALL 28789 0 1
// end ; end ; end ;
22011: GO 22014
22013: POP
// end ; end else
22014: GO 22040
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
22016: LD_VAR 0 6
22020: PPUSH
22021: LD_VAR 0 7
22025: PPUSH
22026: LD_VAR 0 6
22030: PPUSH
22031: CALL_OW 74
22035: PPUSH
22036: CALL 98245 0 2
// end ; end ;
22040: GO 21663
22042: POP
22043: POP
// until not attackers ;
22044: LD_VAR 0 4
22048: NOT
22049: IFFALSE 21605
// end ;
22051: LD_VAR 0 2
22055: RET
// every 6 6$30 trigger epsilon and firstAttack do var i , un , tmp ;
22056: LD_EXP 10
22060: IFFALSE 22068
22062: PUSH
22063: LD_EXP 16
22067: AND
22068: IFFALSE 22180
22070: GO 22072
22072: DISABLE
22073: LD_INT 0
22075: PPUSH
22076: PPUSH
22077: PPUSH
// begin InitHC_All ( ) ;
22078: CALL_OW 584
// for i := 1 to 3 do
22082: LD_ADDR_VAR 0 1
22086: PUSH
22087: DOUBLE
22088: LD_INT 1
22090: DEC
22091: ST_TO_ADDR
22092: LD_INT 3
22094: PUSH
22095: FOR_TO
22096: IFFALSE 22178
// begin uc_side := 6 ;
22098: LD_ADDR_OWVAR 20
22102: PUSH
22103: LD_INT 6
22105: ST_TO_ADDR
// uc_nation := nation_russian ;
22106: LD_ADDR_OWVAR 21
22110: PUSH
22111: LD_INT 3
22113: ST_TO_ADDR
// PrepareSoldier ( false , 3 ) ;
22114: LD_INT 0
22116: PPUSH
22117: LD_INT 3
22119: PPUSH
22120: CALL_OW 381
// un := CreateHuman ;
22124: LD_ADDR_VAR 0 2
22128: PUSH
22129: CALL_OW 44
22133: ST_TO_ADDR
// SetDir ( un , 2 ) ;
22134: LD_VAR 0 2
22138: PPUSH
22139: LD_INT 2
22141: PPUSH
22142: CALL_OW 233
// PlaceUnitArea ( un , ruNorthSpawnArea , false ) ;
22146: LD_VAR 0 2
22150: PPUSH
22151: LD_INT 33
22153: PPUSH
22154: LD_INT 0
22156: PPUSH
22157: CALL_OW 49
// ComAgressiveMove ( un , 52 , 16 ) ;
22161: LD_VAR 0 2
22165: PPUSH
22166: LD_INT 52
22168: PPUSH
22169: LD_INT 16
22171: PPUSH
22172: CALL_OW 114
// end ;
22176: GO 22095
22178: POP
22179: POP
// end ;
22180: PPOPN 3
22182: END
// every 5 5$00 trigger IsOk ( ruBase ) and not ruTransportDestroyed do var cargo ;
22183: LD_EXP 68
22187: PPUSH
22188: CALL_OW 302
22192: IFFALSE 22201
22194: PUSH
22195: LD_EXP 78
22199: NOT
22200: AND
22201: IFFALSE 22440
22203: GO 22205
22205: DISABLE
22206: LD_INT 0
22208: PPUSH
// begin enable ;
22209: ENABLE
// uc_side := 3 ;
22210: LD_ADDR_OWVAR 20
22214: PUSH
22215: LD_INT 3
22217: ST_TO_ADDR
// uc_nation := nation_russian ;
22218: LD_ADDR_OWVAR 21
22222: PUSH
22223: LD_INT 3
22225: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
22226: LD_INT 22
22228: PPUSH
22229: LD_INT 3
22231: PPUSH
22232: LD_INT 3
22234: PPUSH
22235: LD_INT 51
22237: PPUSH
22238: LD_INT 100
22240: PPUSH
22241: CALL 60677 0 5
// cargo := CreateVehicle ;
22245: LD_ADDR_VAR 0 1
22249: PUSH
22250: CALL_OW 45
22254: ST_TO_ADDR
// SetDir ( cargo , 5 ) ;
22255: LD_VAR 0 1
22259: PPUSH
22260: LD_INT 5
22262: PPUSH
22263: CALL_OW 233
// PlaceUnitXY ( cargo , 187 , 117 , false ) ;
22267: LD_VAR 0 1
22271: PPUSH
22272: LD_INT 187
22274: PPUSH
22275: LD_INT 117
22277: PPUSH
22278: LD_INT 0
22280: PPUSH
22281: CALL_OW 48
// SetCargo ( cargo , mat_cans , 100 ) ;
22285: LD_VAR 0 1
22289: PPUSH
22290: LD_INT 1
22292: PPUSH
22293: LD_INT 100
22295: PPUSH
22296: CALL_OW 290
// ComMoveUnit ( cargo , ruBase ) ;
22300: LD_VAR 0 1
22304: PPUSH
22305: LD_EXP 68
22309: PPUSH
22310: CALL_OW 112
// AddComGive ( cargo , ruBase ) ;
22314: LD_VAR 0 1
22318: PPUSH
22319: LD_EXP 68
22323: PPUSH
22324: CALL_OW 221
// AddComMoveXY ( cargo , 187 , 117 ) ;
22328: LD_VAR 0 1
22332: PPUSH
22333: LD_INT 187
22335: PPUSH
22336: LD_INT 117
22338: PPUSH
22339: CALL_OW 171
// wait ( 0 0$10 ) ;
22343: LD_INT 350
22345: PPUSH
22346: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22350: LD_INT 35
22352: PPUSH
22353: CALL_OW 67
// if not HasTask ( cargo ) then
22357: LD_VAR 0 1
22361: PPUSH
22362: CALL_OW 314
22366: NOT
22367: IFFALSE 22384
// ComMoveXY ( cargo , 187 , 117 ) ;
22369: LD_VAR 0 1
22373: PPUSH
22374: LD_INT 187
22376: PPUSH
22377: LD_INT 117
22379: PPUSH
22380: CALL_OW 111
// until IsDead ( cargo ) or IsAt ( cargo , 187 , 117 ) ;
22384: LD_VAR 0 1
22388: PPUSH
22389: CALL_OW 301
22393: IFTRUE 22412
22395: PUSH
22396: LD_VAR 0 1
22400: PPUSH
22401: LD_INT 187
22403: PPUSH
22404: LD_INT 117
22406: PPUSH
22407: CALL_OW 307
22411: OR
22412: IFFALSE 22350
// if IsAt ( cargo , 187 , 117 ) then
22414: LD_VAR 0 1
22418: PPUSH
22419: LD_INT 187
22421: PPUSH
22422: LD_INT 117
22424: PPUSH
22425: CALL_OW 307
22429: IFFALSE 22440
// RemoveUnit ( cargo ) ;
22431: LD_VAR 0 1
22435: PPUSH
22436: CALL_OW 64
// end ; end_of_file
22440: PPOPN 1
22442: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
22443: LD_VAR 0 1
22447: PPUSH
22448: CALL 50289 0 1
// if unit = Dietrich and not arabianAttack then
22452: LD_VAR 0 1
22456: PUSH
22457: LD_EXP 50
22461: EQUAL
22462: IFFALSE 22471
22464: PUSH
22465: LD_EXP 4
22469: NOT
22470: AND
22471: IFFALSE 22480
// YouLost ( ArabDefeated ) ;
22473: LD_STRING ArabDefeated
22475: PPUSH
22476: CALL_OW 104
// if unit in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) and not arabianAttack then
22480: LD_VAR 0 1
22484: PUSH
22485: LD_INT 22
22487: PUSH
22488: LD_INT 2
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 25
22497: PUSH
22498: LD_INT 4
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PPUSH
22509: CALL_OW 69
22513: IN
22514: IFFALSE 22523
22516: PUSH
22517: LD_EXP 4
22521: NOT
22522: AND
22523: IFFALSE 22532
// YouLost ( ArabDefeated ) ;
22525: LD_STRING ArabDefeated
22527: PPUSH
22528: CALL_OW 104
// if unit in JMMSquad then
22532: LD_VAR 0 1
22536: PUSH
22537: LD_EXP 45
22541: IN
22542: IFFALSE 22560
// JMMSquad := JMMSquad diff unit ;
22544: LD_ADDR_EXP 45
22548: PUSH
22549: LD_EXP 45
22553: PUSH
22554: LD_VAR 0 1
22558: DIFF
22559: ST_TO_ADDR
// if unit = Truman then
22560: LD_VAR 0 1
22564: PUSH
22565: LD_EXP 43
22569: EQUAL
22570: IFFALSE 22579
// YouLost ( Powell ) ;
22572: LD_STRING Powell
22574: PPUSH
22575: CALL_OW 104
// if unit = JMM then
22579: LD_VAR 0 1
22583: PUSH
22584: LD_EXP 23
22588: EQUAL
22589: IFFALSE 22598
// YouLost ( JMM ) ;
22591: LD_STRING JMM
22593: PPUSH
22594: CALL_OW 104
// if unit in arEscapist then
22598: LD_VAR 0 1
22602: PUSH
22603: LD_EXP 56
22607: IN
22608: IFFALSE 22626
// arEscapist := arEscapist diff unit ;
22610: LD_ADDR_EXP 56
22614: PUSH
22615: LD_EXP 56
22619: PUSH
22620: LD_VAR 0 1
22624: DIFF
22625: ST_TO_ADDR
// if unit in arAttackersInf then
22626: LD_VAR 0 1
22630: PUSH
22631: LD_EXP 57
22635: IN
22636: IFFALSE 22654
// arAttackersInf := arAttackersInf diff unit ;
22638: LD_ADDR_EXP 57
22642: PUSH
22643: LD_EXP 57
22647: PUSH
22648: LD_VAR 0 1
22652: DIFF
22653: ST_TO_ADDR
// if unit in arAttackersVeh then
22654: LD_VAR 0 1
22658: PUSH
22659: LD_EXP 58
22663: IN
22664: IFFALSE 22682
// arAttackersVeh := arAttackersVeh diff unit ;
22666: LD_ADDR_EXP 58
22670: PUSH
22671: LD_EXP 58
22675: PUSH
22676: LD_VAR 0 1
22680: DIFF
22681: ST_TO_ADDR
// if unit = Khatam then
22682: LD_VAR 0 1
22686: PUSH
22687: LD_EXP 36
22691: EQUAL
22692: IFFALSE 22702
// khatamStatus := false ;
22694: LD_ADDR_EXP 5
22698: PUSH
22699: LD_INT 0
22701: ST_TO_ADDR
// if unit = epsilon then
22702: LD_VAR 0 1
22706: PUSH
22707: LD_EXP 10
22711: EQUAL
22712: IFFALSE 22743
// begin hasBase := false ;
22714: LD_ADDR_EXP 9
22718: PUSH
22719: LD_INT 0
22721: ST_TO_ADDR
// epsilon := 0 ;
22722: LD_ADDR_EXP 10
22726: PUSH
22727: LD_INT 0
22729: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
22730: LD_INT 0
22732: PPUSH
22733: LD_INT 1
22735: PPUSH
22736: LD_INT 1
22738: PPUSH
22739: CALL_OW 324
// end ; if unit = Khatam then
22743: LD_VAR 0 1
22747: PUSH
22748: LD_EXP 36
22752: EQUAL
22753: IFFALSE 22765
// SaveVariable ( 0 , 10_KhatamStatus_1 ) ;
22755: LD_INT 0
22757: PPUSH
22758: LD_STRING 10_KhatamStatus_1
22760: PPUSH
22761: CALL_OW 39
// if unit in ruForces then
22765: LD_VAR 0 1
22769: PUSH
22770: LD_EXP 59
22774: IN
22775: IFFALSE 22793
// ruForces := ruForces diff unit ;
22777: LD_ADDR_EXP 59
22781: PUSH
22782: LD_EXP 59
22786: PUSH
22787: LD_VAR 0 1
22791: DIFF
22792: ST_TO_ADDR
// if unit in ruForces2 then
22793: LD_VAR 0 1
22797: PUSH
22798: LD_EXP 60
22802: IN
22803: IFFALSE 22821
// ruForces2 := ruForces2 diff unit ;
22805: LD_ADDR_EXP 60
22809: PUSH
22810: LD_EXP 60
22814: PUSH
22815: LD_VAR 0 1
22819: DIFF
22820: ST_TO_ADDR
// if unit in ruTanks then
22821: LD_VAR 0 1
22825: PUSH
22826: LD_EXP 79
22830: IN
22831: IFFALSE 22849
// ruTanks := ruTanks diff unit ;
22833: LD_ADDR_EXP 79
22837: PUSH
22838: LD_EXP 79
22842: PUSH
22843: LD_VAR 0 1
22847: DIFF
22848: ST_TO_ADDR
// if unit in ruTanks2 then
22849: LD_VAR 0 1
22853: PUSH
22854: LD_EXP 80
22858: IN
22859: IFFALSE 22877
// ruTanks2 := ruTanks2 diff unit ;
22861: LD_ADDR_EXP 80
22865: PUSH
22866: LD_EXP 80
22870: PUSH
22871: LD_VAR 0 1
22875: DIFF
22876: ST_TO_ADDR
// if unit in ruExtraTanks then
22877: LD_VAR 0 1
22881: PUSH
22882: LD_EXP 81
22886: IN
22887: IFFALSE 22905
// ruExtraTanks := ruExtraTanks diff unit ;
22889: LD_ADDR_EXP 81
22893: PUSH
22894: LD_EXP 81
22898: PUSH
22899: LD_VAR 0 1
22903: DIFF
22904: ST_TO_ADDR
// if unit in ruMech then
22905: LD_VAR 0 1
22909: PUSH
22910: LD_EXP 63
22914: IN
22915: IFFALSE 22933
// ruMech := ruMech diff unit ;
22917: LD_ADDR_EXP 63
22921: PUSH
22922: LD_EXP 63
22926: PUSH
22927: LD_VAR 0 1
22931: DIFF
22932: ST_TO_ADDR
// if unit in ruMech2 then
22933: LD_VAR 0 1
22937: PUSH
22938: LD_EXP 64
22942: IN
22943: IFFALSE 22961
// ruMech2 := ruMech2 diff unit ;
22945: LD_ADDR_EXP 64
22949: PUSH
22950: LD_EXP 64
22954: PUSH
22955: LD_VAR 0 1
22959: DIFF
22960: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 3 then
22961: LD_VAR 0 1
22965: PPUSH
22966: CALL_OW 266
22970: PUSH
22971: LD_INT 32
22973: PUSH
22974: LD_INT 33
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: IN
22981: IFFALSE 22998
22983: PUSH
22984: LD_VAR 0 1
22988: PPUSH
22989: CALL_OW 255
22993: PUSH
22994: LD_INT 3
22996: EQUAL
22997: AND
22998: IFFALSE 23154
// begin if IsInArea ( unit , ruBaseArea ) then
23000: LD_VAR 0 1
23004: PPUSH
23005: LD_EXP 66
23009: PPUSH
23010: CALL_OW 308
23014: IFFALSE 23077
// ruBuildings := Join ( ruBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
23016: LD_ADDR_EXP 76
23020: PUSH
23021: LD_EXP 76
23025: PPUSH
23026: LD_VAR 0 1
23030: PPUSH
23031: CALL_OW 266
23035: PUSH
23036: LD_VAR 0 1
23040: PPUSH
23041: CALL_OW 250
23045: PUSH
23046: LD_VAR 0 1
23050: PPUSH
23051: CALL_OW 251
23055: PUSH
23056: LD_VAR 0 1
23060: PPUSH
23061: CALL_OW 254
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: PPUSH
23072: CALL 93847 0 2
23076: ST_TO_ADDR
// if IsInArea ( unit , ruBaseArea2 ) then
23077: LD_VAR 0 1
23081: PPUSH
23082: LD_EXP 67
23086: PPUSH
23087: CALL_OW 308
23091: IFFALSE 23154
// ruBuildings2 := Join ( ruBuildings2 , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
23093: LD_ADDR_EXP 77
23097: PUSH
23098: LD_EXP 77
23102: PPUSH
23103: LD_VAR 0 1
23107: PPUSH
23108: CALL_OW 266
23112: PUSH
23113: LD_VAR 0 1
23117: PPUSH
23118: CALL_OW 250
23122: PUSH
23123: LD_VAR 0 1
23127: PPUSH
23128: CALL_OW 251
23132: PUSH
23133: LD_VAR 0 1
23137: PPUSH
23138: CALL_OW 254
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: PPUSH
23149: CALL 93847 0 2
23153: ST_TO_ADDR
// end ; if unit in FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) then
23154: LD_VAR 0 1
23158: PUSH
23159: LD_INT 22
23161: PUSH
23162: LD_INT 6
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 34
23171: PUSH
23172: LD_INT 51
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PPUSH
23183: CALL_OW 69
23187: IN
23188: IFFALSE 23198
// ruTransportDestroyed := true ;
23190: LD_ADDR_EXP 78
23194: PUSH
23195: LD_INT 1
23197: ST_TO_ADDR
// end ;
23198: PPOPN 1
23200: END
// on ClassChanged ( un , oldClass , newClass ) do begin if GetTag ( un ) = tMech then
23201: LD_VAR 0 1
23205: PPUSH
23206: CALL_OW 110
23210: PUSH
23211: LD_INT 7
23213: EQUAL
23214: IFFALSE 23228
// SetTag ( un , 0 ) ;
23216: LD_VAR 0 1
23220: PPUSH
23221: LD_INT 0
23223: PPUSH
23224: CALL_OW 109
// end ;
23228: PPOPN 3
23230: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
23231: LD_VAR 0 2
23235: PUSH
23236: LD_INT 22
23238: PUSH
23239: LD_INT 3
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 25
23248: PUSH
23249: LD_INT 3
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PPUSH
23260: CALL_OW 69
23264: IN
23265: IFFALSE 23282
23267: PUSH
23268: LD_VAR 0 1
23272: PPUSH
23273: CALL_OW 266
23277: PUSH
23278: LD_INT 3
23280: EQUAL
23281: AND
23282: IFFALSE 23299
23284: PUSH
23285: LD_VAR 0 2
23289: PPUSH
23290: CALL_OW 256
23294: PUSH
23295: LD_INT 1000
23297: LESS
23298: AND
23299: IFFALSE 23325
// begin SetTag ( un , 0 ) ;
23301: LD_VAR 0 2
23305: PPUSH
23306: LD_INT 0
23308: PPUSH
23309: CALL_OW 109
// SetLives ( un , 1000 ) ;
23313: LD_VAR 0 2
23317: PPUSH
23318: LD_INT 1000
23320: PPUSH
23321: CALL_OW 234
// end ; end ;
23325: PPOPN 2
23327: END
// on UnitGoesToRed ( un ) do var i ;
23328: LD_INT 0
23330: PPUSH
// begin if un = Khatam and GetSide ( Khatam ) = 8 then
23331: LD_VAR 0 1
23335: PUSH
23336: LD_EXP 36
23340: EQUAL
23341: IFFALSE 23358
23343: PUSH
23344: LD_EXP 36
23348: PPUSH
23349: CALL_OW 255
23353: PUSH
23354: LD_INT 8
23356: EQUAL
23357: AND
23358: IFFALSE 23369
// KillUnit ( Khatam ) ;
23360: LD_EXP 36
23364: PPUSH
23365: CALL_OW 66
// end ;
23369: PPOPN 2
23371: END
// on SpontaneousTeleported ( un ) do begin if not seenRussianTeleport then
23372: LD_EXP 6
23376: NOT
23377: IFFALSE 23411
// begin seenRussianTeleport := true ;
23379: LD_ADDR_EXP 6
23383: PUSH
23384: LD_INT 1
23386: ST_TO_ADDR
// DTankTeleport ( GetX ( un ) , GetY ( un ) ) ;
23387: LD_VAR 0 1
23391: PPUSH
23392: CALL_OW 250
23396: PPUSH
23397: LD_VAR 0 1
23401: PPUSH
23402: CALL_OW 251
23406: PPUSH
23407: CALL 26765 0 2
// end ; end ;
23411: PPOPN 1
23413: END
// on BuildingCaptured ( captured , oldSide , unit ) do var i , x , y ;
23414: LD_INT 0
23416: PPUSH
23417: PPUSH
23418: PPUSH
// begin if oldSide = 2 and GetBType ( captured ) in [ b_lab_half , b_lab , b_depot , b_barracks ] then
23419: LD_VAR 0 2
23423: PUSH
23424: LD_INT 2
23426: EQUAL
23427: IFFALSE 23459
23429: PUSH
23430: LD_VAR 0 1
23434: PPUSH
23435: CALL_OW 266
23439: PUSH
23440: LD_INT 7
23442: PUSH
23443: LD_INT 6
23445: PUSH
23446: LD_INT 0
23448: PUSH
23449: LD_INT 5
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: IN
23458: AND
23459: IFFALSE 23578
// begin for i := 1 to rand ( 2 , 4 ) do
23461: LD_ADDR_VAR 0 4
23465: PUSH
23466: DOUBLE
23467: LD_INT 1
23469: DEC
23470: ST_TO_ADDR
23471: LD_INT 2
23473: PPUSH
23474: LD_INT 4
23476: PPUSH
23477: CALL_OW 12
23481: PUSH
23482: FOR_TO
23483: IFFALSE 23576
// begin x := GetX ( captured ) - rand ( - 2 , 2 ) ;
23485: LD_ADDR_VAR 0 5
23489: PUSH
23490: LD_VAR 0 1
23494: PPUSH
23495: CALL_OW 250
23499: PUSH
23500: LD_INT 2
23502: NEG
23503: PPUSH
23504: LD_INT 2
23506: PPUSH
23507: CALL_OW 12
23511: MINUS
23512: ST_TO_ADDR
// y := GetY ( captured ) + rand ( - 2 , 2 ) ;
23513: LD_ADDR_VAR 0 6
23517: PUSH
23518: LD_VAR 0 1
23522: PPUSH
23523: CALL_OW 251
23527: PUSH
23528: LD_INT 2
23530: NEG
23531: PPUSH
23532: LD_INT 2
23534: PPUSH
23535: CALL_OW 12
23539: PLUS
23540: ST_TO_ADDR
// if ValidHex ( x , y ) then
23541: LD_VAR 0 5
23545: PPUSH
23546: LD_VAR 0 6
23550: PPUSH
23551: CALL_OW 488
23555: IFFALSE 23574
// MineExplosion ( x , y , 10 ) ;
23557: LD_VAR 0 5
23561: PPUSH
23562: LD_VAR 0 6
23566: PPUSH
23567: LD_INT 10
23569: PPUSH
23570: CALL_OW 453
// end ;
23574: GO 23482
23576: POP
23577: POP
// end ; end ;
23578: PPOPN 6
23580: END
// on VehicleConstructed ( veh , fac ) do var side ;
23581: LD_INT 0
23583: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
23584: LD_VAR 0 1
23588: PPUSH
23589: LD_VAR 0 2
23593: PPUSH
23594: CALL 50347 0 2
// side := GetSide ( fac ) ;
23598: LD_ADDR_VAR 0 3
23602: PUSH
23603: LD_VAR 0 2
23607: PPUSH
23608: CALL_OW 255
23612: ST_TO_ADDR
// if side = 3 then
23613: LD_VAR 0 3
23617: PUSH
23618: LD_INT 3
23620: EQUAL
23621: IFFALSE 23805
// begin if IsInArea ( fac , ruBaseArea ) then
23623: LD_VAR 0 2
23627: PPUSH
23628: LD_EXP 66
23632: PPUSH
23633: CALL_OW 308
23637: IFFALSE 23714
// begin ruConstructList := Delete ( ruConstructList , 1 ) ;
23639: LD_ADDR_EXP 70
23643: PUSH
23644: LD_EXP 70
23648: PPUSH
23649: LD_INT 1
23651: PPUSH
23652: CALL_OW 3
23656: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23657: LD_VAR 0 1
23661: PPUSH
23662: CALL_OW 263
23666: PUSH
23667: LD_INT 1
23669: EQUAL
23670: IFFALSE 23694
// ruTanks := Join ( ruTanks , veh ) else
23672: LD_ADDR_EXP 79
23676: PUSH
23677: LD_EXP 79
23681: PPUSH
23682: LD_VAR 0 1
23686: PPUSH
23687: CALL 93847 0 2
23691: ST_TO_ADDR
23692: GO 23714
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23694: LD_ADDR_EXP 81
23698: PUSH
23699: LD_EXP 81
23703: PPUSH
23704: LD_VAR 0 1
23708: PPUSH
23709: CALL 93847 0 2
23713: ST_TO_ADDR
// end ; if IsInArea ( fac , ruBaseArea2 ) then
23714: LD_VAR 0 2
23718: PPUSH
23719: LD_EXP 67
23723: PPUSH
23724: CALL_OW 308
23728: IFFALSE 23805
// begin ruConstructList2 := Delete ( ruConstructList2 , 1 ) ;
23730: LD_ADDR_EXP 71
23734: PUSH
23735: LD_EXP 71
23739: PPUSH
23740: LD_INT 1
23742: PPUSH
23743: CALL_OW 3
23747: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23748: LD_VAR 0 1
23752: PPUSH
23753: CALL_OW 263
23757: PUSH
23758: LD_INT 1
23760: EQUAL
23761: IFFALSE 23785
// ruTanks2 := Join ( ruTanks2 , veh ) else
23763: LD_ADDR_EXP 80
23767: PUSH
23768: LD_EXP 80
23772: PPUSH
23773: LD_VAR 0 1
23777: PPUSH
23778: CALL 93847 0 2
23782: ST_TO_ADDR
23783: GO 23805
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23785: LD_ADDR_EXP 81
23789: PUSH
23790: LD_EXP 81
23794: PPUSH
23795: LD_VAR 0 1
23799: PPUSH
23800: CALL 93847 0 2
23804: ST_TO_ADDR
// end ; end ; end ;
23805: PPOPN 3
23807: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
23808: LD_INT 0
23810: PPUSH
23811: PPUSH
23812: PPUSH
// begin side := GetSide ( driver ) ;
23813: LD_ADDR_VAR 0 7
23817: PUSH
23818: LD_VAR 0 1
23822: PPUSH
23823: CALL_OW 255
23827: ST_TO_ADDR
// if side = 5 then
23828: LD_VAR 0 7
23832: PUSH
23833: LD_INT 5
23835: EQUAL
23836: IFFALSE 23916
// begin arAttackersVeh := arAttackersVeh diff driver ;
23838: LD_ADDR_EXP 58
23842: PUSH
23843: LD_EXP 58
23847: PUSH
23848: LD_VAR 0 1
23852: DIFF
23853: ST_TO_ADDR
// ComMoveXY ( driver , 189 , 80 ) ;
23854: LD_VAR 0 1
23858: PPUSH
23859: LD_INT 189
23861: PPUSH
23862: LD_INT 80
23864: PPUSH
23865: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23869: LD_INT 35
23871: PPUSH
23872: CALL_OW 67
// if not IsOk ( driver ) then
23876: LD_VAR 0 1
23880: PPUSH
23881: CALL_OW 302
23885: NOT
23886: IFFALSE 23890
// exit ;
23888: GO 24440
// until IsAt ( driver , 189 , 80 ) ;
23890: LD_VAR 0 1
23894: PPUSH
23895: LD_INT 189
23897: PPUSH
23898: LD_INT 80
23900: PPUSH
23901: CALL_OW 307
23905: IFFALSE 23869
// RemoveUnit ( driver ) ;
23907: LD_VAR 0 1
23911: PPUSH
23912: CALL_OW 64
// end ; if side = 6 then
23916: LD_VAR 0 7
23920: PUSH
23921: LD_INT 6
23923: EQUAL
23924: IFFALSE 23982
// begin repeat ComMoveToArea ( driver , arAttackSpawn2Area ) ;
23926: LD_VAR 0 1
23930: PPUSH
23931: LD_INT 19
23933: PPUSH
23934: CALL_OW 113
// wait ( 0 0$3 ) ;
23938: LD_INT 105
23940: PPUSH
23941: CALL_OW 67
// if not IsOk ( driver ) then
23945: LD_VAR 0 1
23949: PPUSH
23950: CALL_OW 302
23954: NOT
23955: IFFALSE 23959
// exit ;
23957: GO 24440
// until IsInArea ( driver , arAttackSpawn2Area ) ;
23959: LD_VAR 0 1
23963: PPUSH
23964: LD_INT 19
23966: PPUSH
23967: CALL_OW 308
23971: IFFALSE 23926
// RemoveUnit ( driver ) ;
23973: LD_VAR 0 1
23977: PPUSH
23978: CALL_OW 64
// end ; if side = 3 then
23982: LD_VAR 0 7
23986: PUSH
23987: LD_INT 3
23989: EQUAL
23990: IFFALSE 24440
// begin if driver in ruMech then
23992: LD_VAR 0 1
23996: PUSH
23997: LD_EXP 63
24001: IN
24002: IFFALSE 24216
// begin ComMoveToArea ( driver , ruBaseArea ) ;
24004: LD_VAR 0 1
24008: PPUSH
24009: LD_EXP 66
24013: PPUSH
24014: CALL_OW 113
// SetTag ( driver , tMech ) ;
24018: LD_VAR 0 1
24022: PPUSH
24023: LD_INT 7
24025: PPUSH
24026: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
24030: LD_ADDR_VAR 0 6
24034: PUSH
24035: LD_EXP 66
24039: PPUSH
24040: LD_INT 22
24042: PUSH
24043: LD_INT 3
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 30
24052: PUSH
24053: LD_INT 3
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 50
24062: PUSH
24063: EMPTY
24064: LIST
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: LIST
24070: PPUSH
24071: CALL_OW 70
24075: ST_TO_ADDR
// if fac then
24076: LD_VAR 0 6
24080: IFFALSE 24102
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
24082: LD_VAR 0 1
24086: PPUSH
24087: LD_VAR 0 6
24091: PUSH
24092: LD_INT 1
24094: ARRAY
24095: PPUSH
24096: CALL_OW 180
// exit ;
24100: GO 24440
// end ; arm := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
24102: LD_ADDR_VAR 0 5
24106: PUSH
24107: LD_EXP 66
24111: PPUSH
24112: LD_INT 22
24114: PUSH
24115: LD_INT 3
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 2
24124: PUSH
24125: LD_INT 30
24127: PUSH
24128: LD_INT 4
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 30
24137: PUSH
24138: LD_INT 5
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 3
24152: PUSH
24153: LD_INT 62
24155: PUSH
24156: EMPTY
24157: LIST
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: LD_INT 50
24165: PUSH
24166: EMPTY
24167: LIST
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: PPUSH
24175: CALL_OW 70
24179: ST_TO_ADDR
// if arm then
24180: LD_VAR 0 5
24184: IFFALSE 24216
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
24186: LD_VAR 0 1
24190: PPUSH
24191: LD_VAR 0 5
24195: PUSH
24196: LD_INT 1
24198: ARRAY
24199: PPUSH
24200: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
24204: LD_VAR 0 1
24208: PPUSH
24209: LD_INT 1
24211: PPUSH
24212: CALL_OW 183
// end ; end ; if driver in ruMech2 then
24216: LD_VAR 0 1
24220: PUSH
24221: LD_EXP 64
24225: IN
24226: IFFALSE 24440
// begin ComMoveToArea ( driver , ruBaseArea2 ) ;
24228: LD_VAR 0 1
24232: PPUSH
24233: LD_EXP 67
24237: PPUSH
24238: CALL_OW 113
// SetTag ( driver , tMech ) ;
24242: LD_VAR 0 1
24246: PPUSH
24247: LD_INT 7
24249: PPUSH
24250: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
24254: LD_ADDR_VAR 0 6
24258: PUSH
24259: LD_EXP 67
24263: PPUSH
24264: LD_INT 22
24266: PUSH
24267: LD_INT 3
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 30
24276: PUSH
24277: LD_INT 3
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 50
24286: PUSH
24287: EMPTY
24288: LIST
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: LIST
24294: PPUSH
24295: CALL_OW 70
24299: ST_TO_ADDR
// if fac then
24300: LD_VAR 0 6
24304: IFFALSE 24326
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
24306: LD_VAR 0 1
24310: PPUSH
24311: LD_VAR 0 6
24315: PUSH
24316: LD_INT 1
24318: ARRAY
24319: PPUSH
24320: CALL_OW 180
// exit ;
24324: GO 24440
// end ; arm := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
24326: LD_ADDR_VAR 0 5
24330: PUSH
24331: LD_EXP 67
24335: PPUSH
24336: LD_INT 22
24338: PUSH
24339: LD_INT 3
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 2
24348: PUSH
24349: LD_INT 30
24351: PUSH
24352: LD_INT 4
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 30
24361: PUSH
24362: LD_INT 5
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 3
24376: PUSH
24377: LD_INT 62
24379: PUSH
24380: EMPTY
24381: LIST
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 50
24389: PUSH
24390: EMPTY
24391: LIST
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: PPUSH
24399: CALL_OW 70
24403: ST_TO_ADDR
// if arm then
24404: LD_VAR 0 5
24408: IFFALSE 24440
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
24410: LD_VAR 0 1
24414: PPUSH
24415: LD_VAR 0 5
24419: PUSH
24420: LD_INT 1
24422: ARRAY
24423: PPUSH
24424: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
24428: LD_VAR 0 1
24432: PPUSH
24433: LD_INT 1
24435: PPUSH
24436: CALL_OW 183
// end ; end ; end ; end ;
24440: PPOPN 7
24442: END
// on EndTheMissionRaised ( ev ) do begin if end_the_mission_allowed then
24443: LD_OWVAR 57
24447: IFFALSE 24461
// begin end_the_mission_allowed := false ;
24449: LD_ADDR_OWVAR 57
24453: PUSH
24454: LD_INT 0
24456: ST_TO_ADDR
// FinishMission ;
24457: CALL 32281 0 0
// end ; end ;
24461: PPOPN 1
24463: END
// on BuildingComplete ( b ) do var side , type ;
24464: LD_INT 0
24466: PPUSH
24467: PPUSH
// begin side := GetSide ( b ) ;
24468: LD_ADDR_VAR 0 2
24472: PUSH
24473: LD_VAR 0 1
24477: PPUSH
24478: CALL_OW 255
24482: ST_TO_ADDR
// type := GetBType ( b ) ;
24483: LD_ADDR_VAR 0 3
24487: PUSH
24488: LD_VAR 0 1
24492: PPUSH
24493: CALL_OW 266
24497: ST_TO_ADDR
// if side = 2 then
24498: LD_VAR 0 2
24502: PUSH
24503: LD_INT 2
24505: EQUAL
24506: IFFALSE 24526
// arBuildings := Delete ( arBuildings , 1 ) ;
24508: LD_ADDR_EXP 53
24512: PUSH
24513: LD_EXP 53
24517: PPUSH
24518: LD_INT 1
24520: PPUSH
24521: CALL_OW 3
24525: ST_TO_ADDR
// if side = 1 then
24526: LD_VAR 0 2
24530: PUSH
24531: LD_INT 1
24533: EQUAL
24534: IFFALSE 24598
// if type = b_depot and not hasBase then
24536: LD_VAR 0 3
24540: PUSH
24541: LD_INT 0
24543: EQUAL
24544: IFFALSE 24553
24546: PUSH
24547: LD_EXP 9
24551: NOT
24552: AND
24553: IFFALSE 24598
// begin hasBase := true ;
24555: LD_ADDR_EXP 9
24559: PUSH
24560: LD_INT 1
24562: ST_TO_ADDR
// epsilon := b ;
24563: LD_ADDR_EXP 10
24567: PUSH
24568: LD_VAR 0 1
24572: ST_TO_ADDR
// SetBName ( b , epsilon ) ;
24573: LD_VAR 0 1
24577: PPUSH
24578: LD_STRING epsilon
24580: PPUSH
24581: CALL_OW 500
// SetRestrict ( b_depot , 1 , false ) ;
24585: LD_INT 0
24587: PPUSH
24588: LD_INT 1
24590: PPUSH
24591: LD_INT 0
24593: PPUSH
24594: CALL_OW 324
// end ; if side = 3 then
24598: LD_VAR 0 2
24602: PUSH
24603: LD_INT 3
24605: EQUAL
24606: IFFALSE 24892
// begin if IsInArea ( b , ruBaseArea ) then
24608: LD_VAR 0 1
24612: PPUSH
24613: LD_EXP 66
24617: PPUSH
24618: CALL_OW 308
24622: IFFALSE 24642
// ruBuildings := Delete ( ruBuildings , 1 ) ;
24624: LD_ADDR_EXP 76
24628: PUSH
24629: LD_EXP 76
24633: PPUSH
24634: LD_INT 1
24636: PPUSH
24637: CALL_OW 3
24641: ST_TO_ADDR
// if IsInArea ( b , ruBaseArea2 ) then
24642: LD_VAR 0 1
24646: PPUSH
24647: LD_EXP 67
24651: PPUSH
24652: CALL_OW 308
24656: IFFALSE 24676
// ruBuildings2 := Delete ( ruBuildings2 , 1 ) ;
24658: LD_ADDR_EXP 77
24662: PUSH
24663: LD_EXP 77
24667: PPUSH
24668: LD_INT 1
24670: PPUSH
24671: CALL_OW 3
24675: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
24676: LD_VAR 0 3
24680: PUSH
24681: LD_INT 0
24683: PUSH
24684: LD_INT 4
24686: PUSH
24687: LD_INT 2
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: LIST
24694: IN
24695: IFFALSE 24706
// ComUpgrade ( b ) ;
24697: LD_VAR 0 1
24701: PPUSH
24702: CALL_OW 146
// if type = b_lab then
24706: LD_VAR 0 3
24710: PUSH
24711: LD_INT 6
24713: EQUAL
24714: IFFALSE 24758
// if IsInArea ( b , ruBaseArea ) then
24716: LD_VAR 0 1
24720: PPUSH
24721: LD_EXP 66
24725: PPUSH
24726: CALL_OW 308
24730: IFFALSE 24746
// ComUpgradeLab ( b , b_lab_weapon ) else
24732: LD_VAR 0 1
24736: PPUSH
24737: LD_INT 10
24739: PPUSH
24740: CALL_OW 147
24744: GO 24758
// ComUpgradeLab ( b , b_lab_computer ) ;
24746: LD_VAR 0 1
24750: PPUSH
24751: LD_INT 12
24753: PPUSH
24754: CALL_OW 147
// if type = b_depot then
24758: LD_VAR 0 3
24762: PUSH
24763: LD_INT 0
24765: EQUAL
24766: IFFALSE 24892
// begin SetResourceType ( GetBase ( b ) , mat_cans , 2550 ) ;
24768: LD_VAR 0 1
24772: PPUSH
24773: CALL_OW 274
24777: PPUSH
24778: LD_INT 1
24780: PPUSH
24781: LD_INT 2550
24783: PPUSH
24784: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
24788: LD_VAR 0 1
24792: PPUSH
24793: CALL_OW 274
24797: PPUSH
24798: LD_INT 2
24800: PPUSH
24801: LD_INT 250
24803: PPUSH
24804: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 200 ) ;
24808: LD_VAR 0 1
24812: PPUSH
24813: CALL_OW 274
24817: PPUSH
24818: LD_INT 3
24820: PPUSH
24821: LD_INT 200
24823: PPUSH
24824: CALL_OW 277
// if IsInArea ( b , ruBaseArea ) then
24828: LD_VAR 0 1
24832: PPUSH
24833: LD_EXP 66
24837: PPUSH
24838: CALL_OW 308
24842: IFFALSE 24866
// begin ruBase := b ;
24844: LD_ADDR_EXP 68
24848: PUSH
24849: LD_VAR 0 1
24853: ST_TO_ADDR
// SetBName ( b , chuikov ) ;
24854: LD_VAR 0 1
24858: PPUSH
24859: LD_STRING chuikov
24861: PPUSH
24862: CALL_OW 500
// end ; if IsInArea ( b , ruBaseArea2 ) then
24866: LD_VAR 0 1
24870: PPUSH
24871: LD_EXP 67
24875: PPUSH
24876: CALL_OW 308
24880: IFFALSE 24892
// begin ruBase2 := b ;
24882: LD_ADDR_EXP 69
24886: PUSH
24887: LD_VAR 0 1
24891: ST_TO_ADDR
// end ; end ; end ; end ;
24892: PPOPN 3
24894: END
// on UpgradeComplete ( b ) do var side , type ;
24895: LD_INT 0
24897: PPUSH
24898: PPUSH
// begin side := GetSide ( b ) ;
24899: LD_ADDR_VAR 0 2
24903: PUSH
24904: LD_VAR 0 1
24908: PPUSH
24909: CALL_OW 255
24913: ST_TO_ADDR
// type := GetBType ( b ) ;
24914: LD_ADDR_VAR 0 3
24918: PUSH
24919: LD_VAR 0 1
24923: PPUSH
24924: CALL_OW 266
24928: ST_TO_ADDR
// if side = 3 then
24929: LD_VAR 0 2
24933: PUSH
24934: LD_INT 3
24936: EQUAL
24937: IFFALSE 24991
// if type = b_lab_half then
24939: LD_VAR 0 3
24943: PUSH
24944: LD_INT 7
24946: EQUAL
24947: IFFALSE 24991
// if IsInArea ( b , ruBaseArea ) then
24949: LD_VAR 0 1
24953: PPUSH
24954: LD_EXP 66
24958: PPUSH
24959: CALL_OW 308
24963: IFFALSE 24979
// ComUpgradeLab ( b , b_lab_spacetime ) else
24965: LD_VAR 0 1
24969: PPUSH
24970: LD_INT 14
24972: PPUSH
24973: CALL_OW 147
24977: GO 24991
// ComUpgradeLab ( b , b_lab_siberium ) ;
24979: LD_VAR 0 1
24983: PPUSH
24984: LD_INT 11
24986: PPUSH
24987: CALL_OW 147
// end ;
24991: PPOPN 3
24993: END
// on ResearchComplete ( tech , lab ) do var side ;
24994: LD_INT 0
24996: PPUSH
// begin side := GetSide ( lab ) ;
24997: LD_ADDR_VAR 0 3
25001: PUSH
25002: LD_VAR 0 2
25006: PPUSH
25007: CALL_OW 255
25011: ST_TO_ADDR
// if side = 2 then
25012: LD_VAR 0 3
25016: PUSH
25017: LD_INT 2
25019: EQUAL
25020: IFFALSE 25068
// begin arTech := Delete ( arTech , 1 ) ;
25022: LD_ADDR_EXP 52
25026: PUSH
25027: LD_EXP 52
25031: PPUSH
25032: LD_INT 1
25034: PPUSH
25035: CALL_OW 3
25039: ST_TO_ADDR
// if tech = tech_sibPow then
25040: LD_VAR 0 1
25044: PUSH
25045: LD_INT 21
25047: EQUAL
25048: IFFALSE 25054
// DArabTrait1 ;
25050: CALL 29161 0 0
// if tech = tech_sibEng then
25054: LD_VAR 0 1
25058: PUSH
25059: LD_INT 22
25061: EQUAL
25062: IFFALSE 25068
// DArabTrait2 ;
25064: CALL 29492 0 0
// end ; end ;
25068: PPOPN 3
25070: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
25071: LD_VAR 0 1
25075: PPUSH
25076: CALL 50331 0 1
// end ;
25080: PPOPN 1
25082: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25083: LD_VAR 0 1
25087: PUSH
25088: LD_INT 1
25090: EQUAL
25091: IFFALSE 25103
25093: PUSH
25094: LD_VAR 0 2
25098: PUSH
25099: LD_INT 2
25101: EQUAL
25102: AND
25103: IFFALSE 25121
25105: PUSH
25106: LD_INT 1
25108: PPUSH
25109: LD_INT 2
25111: PPUSH
25112: CALL_OW 81
25116: PUSH
25117: LD_INT 1
25119: EQUAL
25120: AND
25121: IFFALSE 25127
// DAttackOnAlly ;
25123: CALL 26843 0 0
// end ;
25127: PPOPN 2
25129: END
// on SailEvent ( event ) do begin case event of EArabAttack :
25130: LD_VAR 0 1
25134: PUSH
25135: LD_INT 101
25137: DOUBLE
25138: EQUAL
25139: IFTRUE 25143
25141: GO 25150
25143: POP
// ArabAttack ; ERussianBaseC :
25144: CALL 7286 0 0
25148: GO 25302
25150: LD_INT 102
25152: DOUBLE
25153: EQUAL
25154: IFTRUE 25158
25156: GO 25179
25158: POP
// RussianBase ( ruForces union ruCommander , 1 ) ; ERussianBaseW :
25159: LD_EXP 59
25163: PUSH
25164: LD_EXP 61
25168: UNION
25169: PPUSH
25170: LD_INT 1
25172: PPUSH
25173: CALL 10987 0 2
25177: GO 25302
25179: LD_INT 103
25181: DOUBLE
25182: EQUAL
25183: IFTRUE 25187
25185: GO 25208
25187: POP
// RussianBase ( ruForces union ruCommander , 2 ) ; ERussianBaseE :
25188: LD_EXP 59
25192: PUSH
25193: LD_EXP 61
25197: UNION
25198: PPUSH
25199: LD_INT 2
25201: PPUSH
25202: CALL 10987 0 2
25206: GO 25302
25208: LD_INT 104
25210: DOUBLE
25211: EQUAL
25212: IFTRUE 25216
25214: GO 25237
25216: POP
// RussianBase ( ruForces union ruCommander , 3 ) ; ERussianBaseW2 :
25217: LD_EXP 59
25221: PUSH
25222: LD_EXP 61
25226: UNION
25227: PPUSH
25228: LD_INT 3
25230: PPUSH
25231: CALL 10987 0 2
25235: GO 25302
25237: LD_INT 105
25239: DOUBLE
25240: EQUAL
25241: IFTRUE 25245
25243: GO 25266
25245: POP
// RussianBase2 ( ruForces2 union ruCommander2 , 2 ) ; EExtraAttack :
25246: LD_EXP 60
25250: PUSH
25251: LD_EXP 62
25255: UNION
25256: PPUSH
25257: LD_INT 2
25259: PPUSH
25260: CALL 12496 0 2
25264: GO 25302
25266: LD_INT 106
25268: DOUBLE
25269: EQUAL
25270: IFTRUE 25274
25272: GO 25281
25274: POP
// RussianExtraAttack ; ESendRussianAttack :
25275: CALL 20399 0 0
25279: GO 25302
25281: LD_INT 107
25283: DOUBLE
25284: EQUAL
25285: IFTRUE 25289
25287: GO 25301
25289: POP
// SendRussianAttack ( russianWaveAttack ) ; end ;
25290: LD_EXP 18
25294: PPUSH
25295: CALL 21493 0 1
25299: GO 25302
25301: POP
// end ; end_of_file
25302: PPOPN 1
25304: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
25305: LD_INT 0
25307: PPUSH
25308: PPUSH
25309: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
25310: LD_ADDR_VAR 0 1
25314: PUSH
25315: LD_VAR 0 1
25319: PUSH
25320: LD_EXP 23
25324: PUSH
25325: LD_EXP 24
25329: PUSH
25330: LD_EXP 25
25334: PUSH
25335: LD_EXP 26
25339: PUSH
25340: LD_EXP 27
25344: PUSH
25345: LD_EXP 28
25349: PUSH
25350: LD_EXP 29
25354: PUSH
25355: LD_EXP 30
25359: PUSH
25360: LD_EXP 31
25364: PUSH
25365: LD_EXP 32
25369: PUSH
25370: LD_EXP 33
25374: PUSH
25375: LD_EXP 34
25379: PUSH
25380: LD_EXP 35
25384: PUSH
25385: LD_EXP 36
25389: PUSH
25390: LD_EXP 37
25394: PUSH
25395: LD_EXP 38
25399: PUSH
25400: LD_EXP 39
25404: PUSH
25405: LD_EXP 40
25409: PUSH
25410: LD_EXP 42
25414: PUSH
25415: LD_EXP 44
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: DIFF
25442: ST_TO_ADDR
// if not characters then
25443: LD_VAR 0 1
25447: NOT
25448: IFFALSE 25452
// exit ;
25450: GO 25536
// speaker := characters [ rand ( 1 , Count ( characters ) ) ] ;
25452: LD_ADDR_VAR 0 6
25456: PUSH
25457: LD_VAR 0 1
25461: PUSH
25462: LD_INT 1
25464: PPUSH
25465: LD_VAR 0 1
25469: PPUSH
25470: CALL 57915 0 1
25474: PPUSH
25475: CALL_OW 12
25479: ARRAY
25480: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
25481: LD_VAR 0 6
25485: PPUSH
25486: CALL_OW 258
25490: PUSH
25491: LD_INT 1
25493: EQUAL
25494: IFFALSE 25512
// Say ( speaker , dialogMID ) else
25496: LD_VAR 0 6
25500: PPUSH
25501: LD_VAR 0 2
25505: PPUSH
25506: CALL_OW 88
25510: GO 25526
// Say ( speaker , dialogFID ) ;
25512: LD_VAR 0 6
25516: PPUSH
25517: LD_VAR 0 3
25521: PPUSH
25522: CALL_OW 88
// result := speaker ;
25526: LD_ADDR_VAR 0 4
25530: PUSH
25531: LD_VAR 0 6
25535: ST_TO_ADDR
// end ; end_of_file
25536: LD_VAR 0 4
25540: RET
// export function Action ; begin
25541: LD_INT 0
25543: PPUSH
// InGameOn ;
25544: CALL_OW 8
// CenterNowOnXY ( 25 , 35 ) ;
25548: LD_INT 25
25550: PPUSH
25551: LD_INT 35
25553: PPUSH
25554: CALL_OW 86
// RevealFogArea ( 1 , arBaseArea ) ;
25558: LD_INT 1
25560: PPUSH
25561: LD_INT 5
25563: PPUSH
25564: CALL_OW 332
// RevealFogArea ( 1 , epsilonSpawnArea ) ;
25568: LD_INT 1
25570: PPUSH
25571: LD_INT 4
25573: PPUSH
25574: CALL_OW 332
// wait ( 0 0$1.5 ) ;
25578: LD_INT 52
25580: PPUSH
25581: CALL_OW 67
// CenterNowOnUnits ( Simms ) ;
25585: LD_EXP 33
25589: PPUSH
25590: CALL_OW 87
// wait ( 0 0$3 ) ;
25594: LD_INT 105
25596: PPUSH
25597: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
25601: LD_EXP 23
25605: PPUSH
25606: CALL_OW 310
25610: PPUSH
25611: CALL_OW 85
// wait ( 0 0$1 ) ;
25615: LD_INT 35
25617: PPUSH
25618: CALL_OW 67
// if IsOk ( Gary ) then
25622: LD_EXP 32
25626: PPUSH
25627: CALL_OW 302
25631: IFFALSE 25669
// begin Say ( Gary , D2-Gary-1 ) ;
25633: LD_EXP 32
25637: PPUSH
25638: LD_STRING D2-Gary-1
25640: PPUSH
25641: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
25645: LD_EXP 23
25649: PPUSH
25650: LD_STRING D2-JMM-1
25652: PPUSH
25653: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
25657: LD_EXP 32
25661: PPUSH
25662: LD_STRING D2-Gary-2
25664: PPUSH
25665: CALL_OW 88
// end ; InGameOff ;
25669: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
25673: LD_STRING M1
25675: PPUSH
25676: CALL_OW 337
// SaveForQuickRestart ;
25680: CALL_OW 22
// end ;
25684: LD_VAR 0 1
25688: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var i , p ;
25689: LD_EXP 23
25693: PPUSH
25694: LD_EXP 33
25698: PPUSH
25699: CALL_OW 296
25703: PUSH
25704: LD_INT 15
25706: LESS
25707: IFFALSE 26671
25709: GO 25711
25711: DISABLE
25712: LD_INT 0
25714: PPUSH
25715: PPUSH
// begin wait ( 0 0$3 ) ;
25716: LD_INT 105
25718: PPUSH
25719: CALL_OW 67
// Video ( true ) ;
25723: LD_INT 1
25725: PPUSH
25726: CALL 93819 0 1
// ComExitVehicle ( JMM ) ;
25730: LD_EXP 23
25734: PPUSH
25735: CALL_OW 121
// AddComMoveUnit ( JMM , Simms ) ;
25739: LD_EXP 23
25743: PPUSH
25744: LD_EXP 33
25748: PPUSH
25749: CALL_OW 172
// CenterNowOnUnits ( JMM ) ;
25753: LD_EXP 23
25757: PPUSH
25758: CALL_OW 87
// if Truman then
25762: LD_EXP 43
25766: IFFALSE 25903
// begin ComMoveUnit ( Truman , JMM ) ;
25768: LD_EXP 43
25772: PPUSH
25773: LD_EXP 23
25777: PPUSH
25778: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
25782: LD_INT 35
25784: PPUSH
25785: CALL_OW 67
// until GetDistUnits ( Truman , JMM ) < 6 ;
25789: LD_EXP 43
25793: PPUSH
25794: LD_EXP 23
25798: PPUSH
25799: CALL_OW 296
25803: PUSH
25804: LD_INT 6
25806: LESS
25807: IFFALSE 25782
// ComTurnUnit ( Truman , JMM ) ;
25809: LD_EXP 43
25813: PPUSH
25814: LD_EXP 23
25818: PPUSH
25819: CALL_OW 119
// ComTurnUnit ( JMM , Truman ) ;
25823: LD_EXP 23
25827: PPUSH
25828: LD_EXP 43
25832: PPUSH
25833: CALL_OW 119
// Say ( Truman , D2-Tru-1 ) ;
25837: LD_EXP 43
25841: PPUSH
25842: LD_STRING D2-Tru-1
25844: PPUSH
25845: CALL_OW 88
// Say ( JMM , D2-JMM-Tru-1 ) ;
25849: LD_EXP 23
25853: PPUSH
25854: LD_STRING D2-JMM-Tru-1
25856: PPUSH
25857: CALL_OW 88
// Say ( Truman , D2-Tru-2 ) ;
25861: LD_EXP 43
25865: PPUSH
25866: LD_STRING D2-Tru-2
25868: PPUSH
25869: CALL_OW 88
// ComMoveXY ( Truman , 79 , 41 ) ;
25873: LD_EXP 43
25877: PPUSH
25878: LD_INT 79
25880: PPUSH
25881: LD_INT 41
25883: PPUSH
25884: CALL_OW 111
// AddComMoveXY ( Truman , 17 , 31 ) ;
25888: LD_EXP 43
25892: PPUSH
25893: LD_INT 17
25895: PPUSH
25896: LD_INT 31
25898: PPUSH
25899: CALL_OW 171
// end ; AddComTurnUnit ( JMM , Simms ) ;
25903: LD_EXP 23
25907: PPUSH
25908: LD_EXP 33
25912: PPUSH
25913: CALL_OW 179
// p := 15 ;
25917: LD_ADDR_VAR 0 2
25921: PUSH
25922: LD_INT 15
25924: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25925: LD_INT 35
25927: PPUSH
25928: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
25932: LD_EXP 33
25936: PUSH
25937: LD_EXP 35
25941: PUSH
25942: LD_EXP 34
25946: PUSH
25947: LD_EXP 36
25951: PUSH
25952: LD_EXP 30
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: PPUSH
25964: LD_EXP 23
25968: PPUSH
25969: CALL_OW 112
// p := p - 1 ;
25973: LD_ADDR_VAR 0 2
25977: PUSH
25978: LD_VAR 0 2
25982: PUSH
25983: LD_INT 1
25985: MINUS
25986: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
25987: LD_EXP 23
25991: PPUSH
25992: LD_EXP 33
25996: PPUSH
25997: CALL_OW 296
26001: PUSH
26002: LD_INT 5
26004: LESS
26005: IFTRUE 26017
26007: PUSH
26008: LD_VAR 0 2
26012: PUSH
26013: LD_INT 0
26015: LESSEQUAL
26016: OR
26017: IFFALSE 25925
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
26019: LD_EXP 33
26023: PUSH
26024: LD_EXP 35
26028: PUSH
26029: LD_EXP 34
26033: PUSH
26034: LD_EXP 36
26038: PUSH
26039: LD_EXP 30
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: PPUSH
26051: LD_EXP 23
26055: PPUSH
26056: CALL_OW 119
// if not IsInUnit ( JMM ) then
26060: LD_EXP 23
26064: PPUSH
26065: CALL_OW 310
26069: NOT
26070: IFFALSE 26086
// ComTurnUnit ( JMM , Simms ) ;
26072: LD_EXP 23
26076: PPUSH
26077: LD_EXP 33
26081: PPUSH
26082: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
26086: LD_EXP 33
26090: PUSH
26091: LD_EXP 35
26095: PUSH
26096: LD_EXP 34
26100: PUSH
26101: LD_EXP 36
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: PPUSH
26112: LD_EXP 23
26116: PPUSH
26117: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
26121: LD_EXP 23
26125: PUSH
26126: LD_EXP 33
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PPUSH
26135: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
26139: LD_EXP 33
26143: PPUSH
26144: LD_STRING D2a-Sim-1
26146: PPUSH
26147: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
26151: LD_EXP 23
26155: PPUSH
26156: LD_STRING D2a-JMM-1
26158: PPUSH
26159: CALL_OW 88
// if IsOk ( Joan ) then
26163: LD_EXP 35
26167: PPUSH
26168: CALL_OW 302
26172: IFFALSE 26250
// begin if not IsInUnit ( JMM ) then
26174: LD_EXP 23
26178: PPUSH
26179: CALL_OW 310
26183: NOT
26184: IFFALSE 26200
// ComTurnUnit ( JMM , Joan ) ;
26186: LD_EXP 23
26190: PPUSH
26191: LD_EXP 35
26195: PPUSH
26196: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
26200: LD_EXP 35
26204: PPUSH
26205: LD_EXP 23
26209: PPUSH
26210: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
26214: LD_EXP 35
26218: PPUSH
26219: LD_STRING D2b-Joan-1
26221: PPUSH
26222: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
26226: LD_EXP 23
26230: PPUSH
26231: LD_STRING D2b-JMM-1
26233: PPUSH
26234: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
26238: LD_EXP 35
26242: PPUSH
26243: LD_STRING D2b-Joan-2
26245: PPUSH
26246: CALL_OW 88
// end ; if IsOk ( Denis ) then
26250: LD_EXP 34
26254: PPUSH
26255: CALL_OW 302
26259: IFFALSE 26313
// begin if not IsInUnit ( JMM ) then
26261: LD_EXP 23
26265: PPUSH
26266: CALL_OW 310
26270: NOT
26271: IFFALSE 26287
// ComTurnUnit ( JMM , Denis ) ;
26273: LD_EXP 23
26277: PPUSH
26278: LD_EXP 34
26282: PPUSH
26283: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
26287: LD_EXP 34
26291: PPUSH
26292: LD_EXP 23
26296: PPUSH
26297: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
26301: LD_EXP 34
26305: PPUSH
26306: LD_STRING D2c-Den-1
26308: PPUSH
26309: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
26313: LD_EXP 30
26317: PPUSH
26318: CALL_OW 302
26322: IFFALSE 26334
26324: PUSH
26325: LD_STRING 08_Kikuchi
26327: PPUSH
26328: CALL_OW 28
26332: NOT
26333: AND
26334: IFFALSE 26429
// begin repeat wait ( 0 0$1 ) ;
26336: LD_INT 35
26338: PPUSH
26339: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
26343: LD_EXP 30
26347: PPUSH
26348: LD_EXP 23
26352: PPUSH
26353: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
26357: LD_EXP 23
26361: PPUSH
26362: LD_EXP 30
26366: PPUSH
26367: CALL_OW 296
26371: PUSH
26372: LD_INT 5
26374: LESS
26375: IFFALSE 26336
// ComTurnUnit ( Kikuchi , JMM ) ;
26377: LD_EXP 30
26381: PPUSH
26382: LD_EXP 23
26386: PPUSH
26387: CALL_OW 119
// if not IsInUnit ( JMM ) then
26391: LD_EXP 23
26395: PPUSH
26396: CALL_OW 310
26400: NOT
26401: IFFALSE 26417
// ComTurnUnit ( JMM , Kikuchi ) ;
26403: LD_EXP 23
26407: PPUSH
26408: LD_EXP 30
26412: PPUSH
26413: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
26417: LD_EXP 30
26421: PPUSH
26422: LD_STRING D3b-Yam-1
26424: PPUSH
26425: CALL_OW 88
// end ; if IsOk ( Khatam ) then
26429: LD_EXP 36
26433: PPUSH
26434: CALL_OW 302
26438: IFFALSE 26504
// begin if not IsInUnit ( JMM ) then
26440: LD_EXP 23
26444: PPUSH
26445: CALL_OW 310
26449: NOT
26450: IFFALSE 26466
// ComTurnUnit ( JMM , Khatam ) ;
26452: LD_EXP 23
26456: PPUSH
26457: LD_EXP 36
26461: PPUSH
26462: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
26466: LD_EXP 36
26470: PPUSH
26471: LD_EXP 23
26475: PPUSH
26476: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
26480: LD_EXP 23
26484: PPUSH
26485: LD_STRING D2c-JMM-1
26487: PPUSH
26488: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
26492: LD_EXP 36
26496: PPUSH
26497: LD_STRING D2c-Khat-1
26499: PPUSH
26500: CALL_OW 88
// end ; Video ( false ) ;
26504: LD_INT 0
26506: PPUSH
26507: CALL 93819 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff Truman , 1 ) ;
26511: LD_INT 22
26513: PUSH
26514: LD_INT 4
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PPUSH
26521: CALL_OW 69
26525: PUSH
26526: LD_EXP 43
26530: DIFF
26531: PPUSH
26532: LD_INT 1
26534: PPUSH
26535: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
26539: LD_STRING M1a
26541: PPUSH
26542: CALL_OW 337
// SetRestrict ( b_depot , 1 , true ) ;
26546: LD_INT 0
26548: PPUSH
26549: LD_INT 1
26551: PPUSH
26552: LD_INT 1
26554: PPUSH
26555: CALL_OW 324
// joinedToEpsilon := true ;
26559: LD_ADDR_EXP 7
26563: PUSH
26564: LD_INT 1
26566: ST_TO_ADDR
// wait ( 0 0$30 ) ;
26567: LD_INT 1050
26569: PPUSH
26570: CALL_OW 67
// SpawnConvoy ;
26574: CALL 10505 0 0
// wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26578: LD_INT 25200
26580: PUSH
26581: LD_INT 2100
26583: PUSH
26584: LD_OWVAR 67
26588: MUL
26589: MINUS
26590: PPUSH
26591: CALL_OW 67
// firstAttack := true ;
26595: LD_ADDR_EXP 16
26599: PUSH
26600: LD_INT 1
26602: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26603: LD_INT 107
26605: PPUSH
26606: CALL_OW 427
// for i := 1 to Difficulty do
26610: LD_ADDR_VAR 0 1
26614: PUSH
26615: DOUBLE
26616: LD_INT 1
26618: DEC
26619: ST_TO_ADDR
26620: LD_OWVAR 67
26624: PUSH
26625: FOR_TO
26626: IFFALSE 26669
// begin wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26628: LD_INT 25200
26630: PUSH
26631: LD_INT 2100
26633: PUSH
26634: LD_OWVAR 67
26638: MUL
26639: MINUS
26640: PPUSH
26641: CALL_OW 67
// if not ruActiveAttacks then
26645: LD_EXP 22
26649: NOT
26650: IFFALSE 26660
// ruActiveAttacks := true ;
26652: LD_ADDR_EXP 22
26656: PUSH
26657: LD_INT 1
26659: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26660: LD_INT 107
26662: PPUSH
26663: CALL_OW 427
// end ;
26667: GO 26625
26669: POP
26670: POP
// end ;
26671: PPOPN 2
26673: END
// every 0 0$1 trigger IsOk ( Truman ) and joinedToEpsilon do
26674: LD_EXP 43
26678: PPUSH
26679: CALL_OW 302
26683: IFFALSE 26691
26685: PUSH
26686: LD_EXP 7
26690: AND
26691: IFFALSE 26764
26693: GO 26695
26695: DISABLE
// begin enable ;
26696: ENABLE
// if not HasTask ( Truman ) then
26697: LD_EXP 43
26701: PPUSH
26702: CALL_OW 314
26706: NOT
26707: IFFALSE 26721
// ComMoveToArea ( Truman , removeArea ) ;
26709: LD_EXP 43
26713: PPUSH
26714: LD_INT 10
26716: PPUSH
26717: CALL_OW 113
// if IsAt ( Truman , 17 , 32 ) or IsInArea ( Truman , removeArea ) then
26721: LD_EXP 43
26725: PPUSH
26726: LD_INT 17
26728: PPUSH
26729: LD_INT 32
26731: PPUSH
26732: CALL_OW 307
26736: IFTRUE 26752
26738: PUSH
26739: LD_EXP 43
26743: PPUSH
26744: LD_INT 10
26746: PPUSH
26747: CALL_OW 308
26751: OR
26752: IFFALSE 26764
// begin RemoveUnit ( Truman ) ;
26754: LD_EXP 43
26758: PPUSH
26759: CALL_OW 64
// disable ;
26763: DISABLE
// end ; end ;
26764: END
// export function DTankTeleport ( x , y ) ; begin
26765: LD_INT 0
26767: PPUSH
// DialogueOn ;
26768: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
26772: LD_VAR 0 1
26776: PPUSH
26777: LD_VAR 0 2
26781: PPUSH
26782: CALL_OW 86
// if IsOk ( Cyrus ) then
26786: LD_EXP 27
26790: PPUSH
26791: CALL_OW 302
26795: IFFALSE 26811
// Say ( Cyrus , D10-Cyrus-1 ) else
26797: LD_EXP 27
26801: PPUSH
26802: LD_STRING D10-Cyrus-1
26804: PPUSH
26805: CALL_OW 88
26809: GO 26834
// if IsOk ( JMM ) then
26811: LD_EXP 23
26815: PPUSH
26816: CALL_OW 302
26820: IFFALSE 26834
// Say ( JMM , D10-JMM-1 ) ;
26822: LD_EXP 23
26826: PPUSH
26827: LD_STRING D10-JMM-1
26829: PPUSH
26830: CALL_OW 88
// DialogueOff ;
26834: CALL_OW 7
// end ;
26838: LD_VAR 0 3
26842: RET
// export function DAttackOnAlly ; begin
26843: LD_INT 0
26845: PPUSH
// DialogueOn ;
26846: CALL_OW 6
// dwait ( 0 0$0.3 ) ;
26850: LD_INT 10
26852: PPUSH
26853: CALL_OW 68
// SayRadio ( Powell , D6b-Pow-1 ) ;
26857: LD_EXP 44
26861: PPUSH
26862: LD_STRING D6b-Pow-1
26864: PPUSH
26865: CALL_OW 94
// YouLost ( Powell ) ;
26869: LD_STRING Powell
26871: PPUSH
26872: CALL_OW 104
// DialogueOff ;
26876: CALL_OW 7
// end ;
26880: LD_VAR 0 1
26884: RET
// every 0 0$5 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
26885: LD_INT 5
26887: PPUSH
26888: LD_INT 22
26890: PUSH
26891: LD_INT 1
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 21
26900: PUSH
26901: LD_INT 3
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PPUSH
26912: CALL_OW 70
26916: IFTRUE 26951
26918: PUSH
26919: LD_INT 5
26921: PPUSH
26922: LD_INT 22
26924: PUSH
26925: LD_INT 1
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 21
26934: PUSH
26935: LD_INT 2
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PPUSH
26946: CALL_OW 70
26950: OR
26951: IFFALSE 26969
26953: PUSH
26954: LD_INT 1
26956: PPUSH
26957: LD_INT 2
26959: PPUSH
26960: CALL_OW 81
26964: PUSH
26965: LD_INT 1
26967: EQUAL
26968: AND
26969: IFFALSE 27212
26971: GO 26973
26973: DISABLE
// begin if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
26974: LD_INT 5
26976: PPUSH
26977: LD_INT 22
26979: PUSH
26980: LD_INT 1
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 21
26989: PUSH
26990: LD_INT 3
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PPUSH
27001: CALL_OW 70
27005: IFTRUE 27040
27007: PUSH
27008: LD_INT 5
27010: PPUSH
27011: LD_INT 22
27013: PUSH
27014: LD_INT 1
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 21
27023: PUSH
27024: LD_INT 2
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PPUSH
27035: CALL_OW 70
27039: OR
27040: IFFALSE 27058
27042: PUSH
27043: LD_INT 1
27045: PPUSH
27046: LD_INT 2
27048: PPUSH
27049: CALL_OW 81
27053: PUSH
27054: LD_INT 1
27056: EQUAL
27057: AND
27058: IFFALSE 27067
// Query ( QAttack ) ;
27060: LD_STRING QAttack
27062: PPUSH
27063: CALL_OW 97
// wait ( 0 0$20 ) ;
27067: LD_INT 700
27069: PPUSH
27070: CALL_OW 67
// repeat wait ( 0 0$10 ) ;
27074: LD_INT 350
27076: PPUSH
27077: CALL_OW 67
// if arabianAttack then
27081: LD_EXP 4
27085: IFFALSE 27089
// exit ;
27087: GO 27212
// until ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend ;
27089: LD_INT 5
27091: PPUSH
27092: LD_INT 22
27094: PUSH
27095: LD_INT 1
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 21
27104: PUSH
27105: LD_INT 3
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PPUSH
27116: CALL_OW 70
27120: IFTRUE 27155
27122: PUSH
27123: LD_INT 5
27125: PPUSH
27126: LD_INT 22
27128: PUSH
27129: LD_INT 1
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 21
27138: PUSH
27139: LD_INT 2
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PPUSH
27150: CALL_OW 70
27154: OR
27155: IFFALSE 27173
27157: PUSH
27158: LD_INT 1
27160: PPUSH
27161: LD_INT 2
27163: PPUSH
27164: CALL_OW 81
27168: PUSH
27169: LD_INT 1
27171: EQUAL
27172: AND
27173: IFFALSE 27074
// InGameOn ;
27175: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
27179: LD_INT 73
27181: PPUSH
27182: LD_INT 18
27184: PPUSH
27185: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
27189: LD_EXP 44
27193: PPUSH
27194: LD_STRING D6b-Pow-1
27196: PPUSH
27197: CALL_OW 94
// YouLost ( Powell ) ;
27201: LD_STRING Powell
27203: PPUSH
27204: CALL_OW 104
// InGameOff ;
27208: CALL_OW 9
// end ;
27212: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
27213: LD_INT 12
27215: PPUSH
27216: LD_INT 1
27218: PPUSH
27219: CALL_OW 321
27223: PUSH
27224: LD_INT 2
27226: EQUAL
27227: IFFALSE 27239
27229: GO 27231
27231: DISABLE
// ChangeMissionObjectives ( M2b ) ;
27232: LD_STRING M2b
27234: PPUSH
27235: CALL_OW 337
27239: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
27240: LD_INT 32
27242: PPUSH
27243: LD_INT 1
27245: PPUSH
27246: CALL_OW 321
27250: PUSH
27251: LD_INT 2
27253: EQUAL
27254: IFFALSE 27266
27256: GO 27258
27258: DISABLE
// ChangeMissionObjectives ( M2c ) ;
27259: LD_STRING M2c
27261: PPUSH
27262: CALL_OW 337
27266: END
// every 0 0$1 trigger arabianAttack and arabianAttackSpawned and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and UnitFilter ( arAttackersVeh , [ f_ok ] ) = 0 and UnitFilter ( arAttackersInf , [ f_ok ] ) = 0 do
27267: LD_EXP 4
27271: IFFALSE 27279
27273: PUSH
27274: LD_EXP 12
27278: AND
27279: IFFALSE 27315
27281: PUSH
27282: LD_INT 22
27284: PUSH
27285: LD_INT 2
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 21
27294: PUSH
27295: LD_INT 1
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PPUSH
27306: CALL_OW 69
27310: PUSH
27311: LD_INT 0
27313: EQUAL
27314: AND
27315: IFFALSE 27338
27317: PUSH
27318: LD_EXP 58
27322: PPUSH
27323: LD_INT 50
27325: PUSH
27326: EMPTY
27327: LIST
27328: PPUSH
27329: CALL_OW 72
27333: PUSH
27334: LD_INT 0
27336: EQUAL
27337: AND
27338: IFFALSE 27361
27340: PUSH
27341: LD_EXP 57
27345: PPUSH
27346: LD_INT 50
27348: PUSH
27349: EMPTY
27350: LIST
27351: PPUSH
27352: CALL_OW 72
27356: PUSH
27357: LD_INT 0
27359: EQUAL
27360: AND
27361: IFFALSE 27381
27363: GO 27365
27365: DISABLE
// begin arabianDefeated := true ;
27366: LD_ADDR_EXP 8
27370: PUSH
27371: LD_INT 1
27373: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
27374: LD_STRING M4a
27376: PPUSH
27377: CALL_OW 337
// end ;
27381: END
// every 0 0$1 trigger GetTech ( tech_Sib1 , 1 ) = state_researched and GetTech ( tech_Sib2 , 1 ) = state_researched and GetTech ( tech_SibPow , 1 ) = state_researched and GetTech ( tech_SibEng , 1 ) = state_researched do
27382: LD_INT 54
27384: PPUSH
27385: LD_INT 1
27387: PPUSH
27388: CALL_OW 321
27392: PUSH
27393: LD_INT 2
27395: EQUAL
27396: IFFALSE 27414
27398: PUSH
27399: LD_INT 55
27401: PPUSH
27402: LD_INT 1
27404: PPUSH
27405: CALL_OW 321
27409: PUSH
27410: LD_INT 2
27412: EQUAL
27413: AND
27414: IFFALSE 27432
27416: PUSH
27417: LD_INT 21
27419: PPUSH
27420: LD_INT 1
27422: PPUSH
27423: CALL_OW 321
27427: PUSH
27428: LD_INT 2
27430: EQUAL
27431: AND
27432: IFFALSE 27450
27434: PUSH
27435: LD_INT 22
27437: PPUSH
27438: LD_INT 1
27440: PPUSH
27441: CALL_OW 321
27445: PUSH
27446: LD_INT 2
27448: EQUAL
27449: AND
27450: IFFALSE 27462
27452: GO 27454
27454: DISABLE
// ChangeMissionObjectives ( M2a ) ;
27455: LD_STRING M2a
27457: PPUSH
27458: CALL_OW 337
27462: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) do var garySpeaker , deltaSpeaker , tmp1 , tmp2 , tmp3 ;
27463: LD_INT 22
27465: PUSH
27466: LD_INT 1
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 3
27475: PUSH
27476: LD_INT 57
27478: PUSH
27479: EMPTY
27480: LIST
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 63
27488: PUSH
27489: LD_INT 11
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: LIST
27500: PPUSH
27501: CALL_OW 69
27505: IFFALSE 28739
27507: GO 27509
27509: DISABLE
27510: LD_INT 0
27512: PPUSH
27513: PPUSH
27514: PPUSH
27515: PPUSH
27516: PPUSH
// begin garySpeaker := IsOk ( Gary ) ;
27517: LD_ADDR_VAR 0 1
27521: PUSH
27522: LD_EXP 32
27526: PPUSH
27527: CALL_OW 302
27531: ST_TO_ADDR
// deltaSpeaker := IsOk ( DeltaDoctor ) ;
27532: LD_ADDR_VAR 0 2
27536: PUSH
27537: LD_EXP 39
27541: PPUSH
27542: CALL_OW 302
27546: ST_TO_ADDR
// tmp1 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27547: LD_ADDR_VAR 0 3
27551: PUSH
27552: LD_INT 22
27554: PUSH
27555: LD_INT 1
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 50
27564: PUSH
27565: EMPTY
27566: LIST
27567: PUSH
27568: LD_INT 25
27570: PUSH
27571: LD_INT 4
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 26
27580: PUSH
27581: LD_INT 1
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: PPUSH
27594: CALL_OW 69
27598: PUSH
27599: LD_EXP 23
27603: PUSH
27604: LD_EXP 24
27608: PUSH
27609: LD_EXP 25
27613: PUSH
27614: LD_EXP 26
27618: PUSH
27619: LD_EXP 27
27623: PUSH
27624: LD_EXP 28
27628: PUSH
27629: LD_EXP 29
27633: PUSH
27634: LD_EXP 30
27638: PUSH
27639: LD_EXP 31
27643: PUSH
27644: LD_EXP 32
27648: PUSH
27649: LD_EXP 33
27653: PUSH
27654: LD_EXP 34
27658: PUSH
27659: LD_EXP 35
27663: PUSH
27664: LD_EXP 36
27668: PUSH
27669: LD_EXP 37
27673: PUSH
27674: LD_EXP 38
27678: PUSH
27679: LD_EXP 39
27683: PUSH
27684: LD_EXP 40
27688: PUSH
27689: LD_EXP 42
27693: PUSH
27694: LD_EXP 44
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: DIFF
27721: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27722: LD_ADDR_VAR 0 4
27726: PUSH
27727: LD_INT 22
27729: PUSH
27730: LD_INT 1
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 50
27739: PUSH
27740: EMPTY
27741: LIST
27742: PUSH
27743: LD_INT 26
27745: PUSH
27746: LD_INT 1
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 2
27755: PUSH
27756: LD_INT 25
27758: PUSH
27759: LD_INT 1
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 25
27768: PUSH
27769: LD_INT 2
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 25
27778: PUSH
27779: LD_INT 3
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: PPUSH
27798: CALL_OW 69
27802: PUSH
27803: LD_EXP 23
27807: PUSH
27808: LD_EXP 24
27812: PUSH
27813: LD_EXP 25
27817: PUSH
27818: LD_EXP 26
27822: PUSH
27823: LD_EXP 27
27827: PUSH
27828: LD_EXP 28
27832: PUSH
27833: LD_EXP 29
27837: PUSH
27838: LD_EXP 30
27842: PUSH
27843: LD_EXP 31
27847: PUSH
27848: LD_EXP 32
27852: PUSH
27853: LD_EXP 33
27857: PUSH
27858: LD_EXP 34
27862: PUSH
27863: LD_EXP 35
27867: PUSH
27868: LD_EXP 36
27872: PUSH
27873: LD_EXP 37
27877: PUSH
27878: LD_EXP 38
27882: PUSH
27883: LD_EXP 39
27887: PUSH
27888: LD_EXP 40
27892: PUSH
27893: LD_EXP 42
27897: PUSH
27898: LD_EXP 44
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: DIFF
27925: ST_TO_ADDR
// if tmp1 then
27926: LD_VAR 0 3
27930: IFFALSE 27946
// tmp1 := tmp1 [ 1 ] ;
27932: LD_ADDR_VAR 0 3
27936: PUSH
27937: LD_VAR 0 3
27941: PUSH
27942: LD_INT 1
27944: ARRAY
27945: ST_TO_ADDR
// if tmp2 then
27946: LD_VAR 0 4
27950: IFFALSE 27966
// tmp2 := tmp2 [ 1 ] ;
27952: LD_ADDR_VAR 0 4
27956: PUSH
27957: LD_VAR 0 4
27961: PUSH
27962: LD_INT 1
27964: ARRAY
27965: ST_TO_ADDR
// if ( garySpeaker or tmp2 ) and ( deltaSpeaker or tmp1 ) then
27966: LD_VAR 0 1
27970: IFTRUE 27978
27972: PUSH
27973: LD_VAR 0 4
27977: OR
27978: IFFALSE 27994
27980: PUSH
27981: LD_VAR 0 2
27985: IFTRUE 27993
27987: PUSH
27988: LD_VAR 0 3
27992: OR
27993: AND
27994: IFFALSE 28188
// begin DialogueOn ;
27996: CALL_OW 6
// if deltaSpeaker then
28000: LD_VAR 0 2
28004: IFFALSE 28020
// Say ( DeltaDoctor , D3-Sci1-1 ) else
28006: LD_EXP 39
28010: PPUSH
28011: LD_STRING D3-Sci1-1
28013: PPUSH
28014: CALL_OW 88
28018: GO 28032
// Say ( tmp1 , D3-Sci1-1 ) ;
28020: LD_VAR 0 3
28024: PPUSH
28025: LD_STRING D3-Sci1-1
28027: PPUSH
28028: CALL_OW 88
// if garySpeaker then
28032: LD_VAR 0 1
28036: IFFALSE 28052
// Say ( Gary , D3-Gary-1 ) else
28038: LD_EXP 32
28042: PPUSH
28043: LD_STRING D3-Gary-1
28045: PPUSH
28046: CALL_OW 88
28050: GO 28064
// Say ( tmp2 , D3-Gary-1 ) ;
28052: LD_VAR 0 4
28056: PPUSH
28057: LD_STRING D3-Gary-1
28059: PPUSH
28060: CALL_OW 88
// if deltaSpeaker then
28064: LD_VAR 0 2
28068: IFFALSE 28084
// Say ( DeltaDoctor , D3-Sci1-2 ) else
28070: LD_EXP 39
28074: PPUSH
28075: LD_STRING D3-Sci1-2
28077: PPUSH
28078: CALL_OW 88
28082: GO 28096
// Say ( tmp1 , D3-Sci1-2 ) ;
28084: LD_VAR 0 3
28088: PPUSH
28089: LD_STRING D3-Sci1-2
28091: PPUSH
28092: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
28096: LD_EXP 23
28100: PPUSH
28101: LD_STRING D3-JMM-2
28103: PPUSH
28104: CALL_OW 88
// if deltaSpeaker then
28108: LD_VAR 0 2
28112: IFFALSE 28128
// Say ( DeltaDoctor , D3-Sci1-3 ) else
28114: LD_EXP 39
28118: PPUSH
28119: LD_STRING D3-Sci1-3
28121: PPUSH
28122: CALL_OW 88
28126: GO 28140
// Say ( tmp1 , D3-Sci1-3 ) ;
28128: LD_VAR 0 3
28132: PPUSH
28133: LD_STRING D3-Sci1-3
28135: PPUSH
28136: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
28140: LD_EXP 23
28144: PPUSH
28145: LD_STRING D3-JMM-3
28147: PPUSH
28148: CALL_OW 88
// if deltaSpeaker then
28152: LD_VAR 0 2
28156: IFFALSE 28172
// Say ( DeltaDoctor , D3-Sci1-4 ) else
28158: LD_EXP 39
28162: PPUSH
28163: LD_STRING D3-Sci1-4
28165: PPUSH
28166: CALL_OW 88
28170: GO 28184
// Say ( tmp1 , D3-Sci1-4 ) ;
28172: LD_VAR 0 3
28176: PPUSH
28177: LD_STRING D3-Sci1-4
28179: PPUSH
28180: CALL_OW 88
// DialogueOff ;
28184: CALL_OW 7
// end ; SetTech ( tech_LasSight , 1 , state_enabled ) ;
28188: LD_INT 12
28190: PPUSH
28191: LD_INT 1
28193: PPUSH
28194: LD_INT 1
28196: PPUSH
28197: CALL_OW 322
// SetTech ( tech_Rocket , 1 , state_enabled ) ;
28201: LD_INT 40
28203: PPUSH
28204: LD_INT 1
28206: PPUSH
28207: LD_INT 1
28209: PPUSH
28210: CALL_OW 322
// SetTech ( tech_AI , 1 , state_enabled ) ;
28214: LD_INT 32
28216: PPUSH
28217: LD_INT 1
28219: PPUSH
28220: LD_INT 1
28222: PPUSH
28223: CALL_OW 322
// SetRestrict ( b_turret , 1 , true ) ;
28227: LD_INT 33
28229: PPUSH
28230: LD_INT 1
28232: PPUSH
28233: LD_INT 1
28235: PPUSH
28236: CALL_OW 324
// SetRestrict ( b_lab_computer , 1 , true ) ;
28240: LD_INT 12
28242: PPUSH
28243: LD_INT 1
28245: PPUSH
28246: LD_INT 1
28248: PPUSH
28249: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
28253: LD_STRING M2
28255: PPUSH
28256: CALL_OW 337
// wait ( 3 3$0 ) ;
28260: LD_INT 6300
28262: PPUSH
28263: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
28267: LD_INT 35
28269: PPUSH
28270: CALL_OW 67
// until not InBattle ( 1 ) ;
28274: LD_INT 1
28276: PPUSH
28277: CALL_OW 463
28281: NOT
28282: IFFALSE 28267
// if IsOk ( Simms ) and deltaSpeaker then
28284: LD_EXP 33
28288: PPUSH
28289: CALL_OW 302
28293: IFFALSE 28301
28295: PUSH
28296: LD_VAR 0 2
28300: AND
28301: IFFALSE 28470
// begin DialogueOn ;
28303: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28307: LD_EXP 33
28311: PPUSH
28312: LD_STRING D3a-Sim-1
28314: PPUSH
28315: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
28319: LD_EXP 39
28323: PPUSH
28324: LD_STRING D3a-Sci1-1
28326: PPUSH
28327: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28331: LD_EXP 33
28335: PPUSH
28336: LD_STRING D3a-Sim-2
28338: PPUSH
28339: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
28343: LD_EXP 39
28347: PPUSH
28348: LD_STRING D3a-Sci1-2
28350: PPUSH
28351: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28355: LD_EXP 33
28359: PPUSH
28360: LD_STRING D3a-Sim-3
28362: PPUSH
28363: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
28367: LD_EXP 39
28371: PPUSH
28372: LD_STRING D3a-Sci1-3
28374: PPUSH
28375: CALL_OW 88
// if IsOK ( Joan ) then
28379: LD_EXP 35
28383: PPUSH
28384: CALL_OW 302
28388: IFFALSE 28404
// Say ( Simms , D3a-Sim-4 ) else
28390: LD_EXP 33
28394: PPUSH
28395: LD_STRING D3a-Sim-4
28397: PPUSH
28398: CALL_OW 88
28402: GO 28416
// Say ( Simms , D3a-Sim-4a ) ;
28404: LD_EXP 33
28408: PPUSH
28409: LD_STRING D3a-Sim-4a
28411: PPUSH
28412: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
28416: LD_EXP 39
28420: PPUSH
28421: LD_STRING D3a-Sci1-4
28423: PPUSH
28424: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28428: LD_EXP 33
28432: PPUSH
28433: LD_STRING D3a-Sim-5
28435: PPUSH
28436: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
28440: LD_EXP 39
28444: PPUSH
28445: LD_STRING D3a-Sci1-5
28447: PPUSH
28448: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28452: LD_EXP 33
28456: PPUSH
28457: LD_STRING D3a-Sim-6
28459: PPUSH
28460: CALL_OW 88
// DialogueOff ;
28464: CALL_OW 7
// end else
28468: GO 28739
// begin tmp3 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_class , 4 ] ] ) diff [ JMM , Frank , Lisa , Simms , Khatam ] ;
28470: LD_ADDR_VAR 0 5
28474: PUSH
28475: LD_INT 22
28477: PUSH
28478: LD_INT 1
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 26
28487: PUSH
28488: LD_INT 1
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: LD_INT 25
28497: PUSH
28498: LD_INT 4
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: LIST
28509: PPUSH
28510: CALL_OW 69
28514: PUSH
28515: LD_EXP 23
28519: PUSH
28520: LD_EXP 29
28524: PUSH
28525: LD_EXP 28
28529: PUSH
28530: LD_EXP 33
28534: PUSH
28535: LD_EXP 36
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: DIFF
28547: ST_TO_ADDR
// if tmp3 then
28548: LD_VAR 0 5
28552: IFFALSE 28739
// begin DialogueOn ;
28554: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28558: LD_EXP 33
28562: PPUSH
28563: LD_STRING D3a-Sim-1
28565: PPUSH
28566: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
28570: LD_VAR 0 5
28574: PUSH
28575: LD_INT 1
28577: ARRAY
28578: PPUSH
28579: LD_STRING D3a-Sci1-1
28581: PPUSH
28582: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28586: LD_EXP 33
28590: PPUSH
28591: LD_STRING D3a-Sim-2
28593: PPUSH
28594: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
28598: LD_VAR 0 5
28602: PUSH
28603: LD_INT 1
28605: ARRAY
28606: PPUSH
28607: LD_STRING D3a-Sci1-2
28609: PPUSH
28610: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28614: LD_EXP 33
28618: PPUSH
28619: LD_STRING D3a-Sim-3
28621: PPUSH
28622: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
28626: LD_VAR 0 5
28630: PUSH
28631: LD_INT 1
28633: ARRAY
28634: PPUSH
28635: LD_STRING D3a-Sci1-3
28637: PPUSH
28638: CALL_OW 88
// if IsOK ( Joan ) then
28642: LD_EXP 35
28646: PPUSH
28647: CALL_OW 302
28651: IFFALSE 28667
// Say ( Simms , D3a-Sim-4 ) else
28653: LD_EXP 33
28657: PPUSH
28658: LD_STRING D3a-Sim-4
28660: PPUSH
28661: CALL_OW 88
28665: GO 28679
// Say ( Simms , D3a-Sim-4a ) ;
28667: LD_EXP 33
28671: PPUSH
28672: LD_STRING D3a-Sim-4a
28674: PPUSH
28675: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
28679: LD_VAR 0 5
28683: PUSH
28684: LD_INT 1
28686: ARRAY
28687: PPUSH
28688: LD_STRING D3a-Sci1-4
28690: PPUSH
28691: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28695: LD_EXP 33
28699: PPUSH
28700: LD_STRING D3a-Sim-5
28702: PPUSH
28703: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
28707: LD_VAR 0 5
28711: PUSH
28712: LD_INT 1
28714: ARRAY
28715: PPUSH
28716: LD_STRING D3a-Sci1-5
28718: PPUSH
28719: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28723: LD_EXP 33
28727: PPUSH
28728: LD_STRING D3a-Sim-6
28730: PPUSH
28731: CALL_OW 88
// DialogueOff ;
28735: CALL_OW 7
// end ; end ; end ;
28739: PPOPN 5
28741: END
// export function DRussianNextAttack ; begin
28742: LD_INT 0
28744: PPUSH
// SayRadio ( AmScout , D4-FSol1-2 ) ;
28745: LD_EXP 40
28749: PPUSH
28750: LD_STRING D4-FSol1-2
28752: PPUSH
28753: CALL_OW 94
// end ;
28757: LD_VAR 0 1
28761: RET
// export function DRussianConvoy ; begin
28762: LD_INT 0
28764: PPUSH
// SayRadio ( AmScout , D4-FSol1-1 ) ;
28765: LD_EXP 40
28769: PPUSH
28770: LD_STRING D4-FSol1-1
28772: PPUSH
28773: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
28777: LD_STRING M3
28779: PPUSH
28780: CALL_OW 337
// end ;
28784: LD_VAR 0 1
28788: RET
// export function DRussianSpaceAmmo ( unit ) ; begin
28789: LD_INT 0
28791: PPUSH
// CenterNowOnUnits ( unit ) ;
28792: LD_VAR 0 1
28796: PPUSH
28797: CALL_OW 87
// DialogueOn ;
28801: CALL_OW 6
// if IsOK ( Cyrus ) then
28805: LD_EXP 27
28809: PPUSH
28810: CALL_OW 302
28814: IFFALSE 28830
// Say ( Cyrus , D9a-Cyrus-1 ) else
28816: LD_EXP 27
28820: PPUSH
28821: LD_STRING D9a-Cyrus-1
28823: PPUSH
28824: CALL_OW 88
28828: GO 28952
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
28830: LD_INT 22
28832: PUSH
28833: LD_INT 1
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 26
28842: PUSH
28843: LD_INT 1
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 2
28852: PUSH
28853: LD_INT 25
28855: PUSH
28856: LD_INT 1
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 25
28865: PUSH
28866: LD_INT 2
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 25
28875: PUSH
28876: LD_INT 3
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 25
28885: PUSH
28886: LD_INT 4
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 25
28895: PUSH
28896: LD_INT 5
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: LIST
28915: PPUSH
28916: CALL_OW 69
28920: PUSH
28921: LD_EXP 23
28925: PUSH
28926: LD_EXP 36
28930: PUSH
28931: LD_EXP 27
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: LIST
28940: DIFF
28941: PPUSH
28942: LD_STRING D9a-Sol1-1
28944: PPUSH
28945: LD_STRING D9a-Sol1-1
28947: PPUSH
28948: CALL 25305 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
28952: LD_INT 22
28954: PUSH
28955: LD_INT 1
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 26
28964: PUSH
28965: LD_INT 1
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 2
28974: PUSH
28975: LD_INT 25
28977: PUSH
28978: LD_INT 1
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 25
28987: PUSH
28988: LD_INT 2
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 25
28997: PUSH
28998: LD_INT 3
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 25
29007: PUSH
29008: LD_INT 4
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 25
29017: PUSH
29018: LD_INT 5
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: LIST
29037: PPUSH
29038: CALL_OW 69
29042: PUSH
29043: LD_EXP 23
29047: PUSH
29048: LD_EXP 36
29052: PUSH
29053: LD_EXP 27
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: LIST
29062: DIFF
29063: PPUSH
29064: LD_STRING D9b-Sol1-1
29066: PPUSH
29067: LD_STRING D9b-Sol1-1
29069: PPUSH
29070: CALL 25305 0 3
// if LoadVariable ( 09_arInfo , 0 ) then
29074: LD_STRING 09_arInfo
29076: PPUSH
29077: LD_INT 0
29079: PPUSH
29080: CALL_OW 30
29084: IFFALSE 29098
// Say ( JMM , D9a-JMM-1 ) ;
29086: LD_EXP 23
29090: PPUSH
29091: LD_STRING D9a-JMM-1
29093: PPUSH
29094: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
29098: LD_EXP 23
29102: PPUSH
29103: LD_STRING D9c-JMM-1
29105: PPUSH
29106: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) then
29110: LD_INT 22
29112: PUSH
29113: LD_INT 1
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 25
29122: PUSH
29123: LD_INT 5
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PPUSH
29134: CALL_OW 69
29138: IFFALSE 29152
// Say ( JMM , D9c-JMM-1a ) ;
29140: LD_EXP 23
29144: PPUSH
29145: LD_STRING D9c-JMM-1a
29147: PPUSH
29148: CALL_OW 88
// DialogueOff ;
29152: CALL_OW 7
// end ;
29156: LD_VAR 0 2
29160: RET
// export function DArabTrait1 ; var tmp ; begin
29161: LD_INT 0
29163: PPUSH
29164: PPUSH
// if IsOk ( DeltaDoctor ) then
29165: LD_EXP 39
29169: PPUSH
29170: CALL_OW 302
29174: IFFALSE 29188
// tmp := DeltaDoctor else
29176: LD_ADDR_VAR 0 2
29180: PUSH
29181: LD_EXP 39
29185: ST_TO_ADDR
29186: GO 29386
// if IsOk ( Denis ) then
29188: LD_EXP 34
29192: PPUSH
29193: CALL_OW 302
29197: IFFALSE 29211
// tmp := Denis else
29199: LD_ADDR_VAR 0 2
29203: PUSH
29204: LD_EXP 34
29208: ST_TO_ADDR
29209: GO 29386
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
29211: LD_ADDR_VAR 0 2
29215: PUSH
29216: LD_INT 22
29218: PUSH
29219: LD_INT 1
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 50
29228: PUSH
29229: EMPTY
29230: LIST
29231: PUSH
29232: LD_INT 25
29234: PUSH
29235: LD_INT 4
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 26
29244: PUSH
29245: LD_INT 1
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: PPUSH
29258: CALL_OW 69
29262: PUSH
29263: LD_EXP 23
29267: PUSH
29268: LD_EXP 24
29272: PUSH
29273: LD_EXP 25
29277: PUSH
29278: LD_EXP 26
29282: PUSH
29283: LD_EXP 27
29287: PUSH
29288: LD_EXP 28
29292: PUSH
29293: LD_EXP 29
29297: PUSH
29298: LD_EXP 30
29302: PUSH
29303: LD_EXP 31
29307: PUSH
29308: LD_EXP 32
29312: PUSH
29313: LD_EXP 33
29317: PUSH
29318: LD_EXP 34
29322: PUSH
29323: LD_EXP 35
29327: PUSH
29328: LD_EXP 36
29332: PUSH
29333: LD_EXP 37
29337: PUSH
29338: LD_EXP 38
29342: PUSH
29343: LD_EXP 39
29347: PUSH
29348: LD_EXP 40
29352: PUSH
29353: LD_EXP 42
29357: PUSH
29358: LD_EXP 44
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: DIFF
29385: ST_TO_ADDR
// if not tmp then
29386: LD_VAR 0 2
29390: NOT
29391: IFFALSE 29395
// exit ;
29393: GO 29487
// DialogueOn ;
29395: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
29399: LD_EXP 23
29403: PPUSH
29404: LD_STRING D6-JMM-1
29406: PPUSH
29407: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
29411: LD_VAR 0 2
29415: PPUSH
29416: LD_STRING D6-Sci1-1
29418: PPUSH
29419: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
29423: LD_EXP 23
29427: PPUSH
29428: LD_STRING D6-JMM-2
29430: PPUSH
29431: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
29435: LD_VAR 0 2
29439: PPUSH
29440: LD_STRING D6-Sci1-2
29442: PPUSH
29443: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
29447: LD_EXP 23
29451: PPUSH
29452: LD_STRING D6-JMM-3
29454: PPUSH
29455: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
29459: LD_VAR 0 2
29463: PPUSH
29464: LD_STRING D6-Sci1-3
29466: PPUSH
29467: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
29471: LD_EXP 23
29475: PPUSH
29476: LD_STRING D6-JMM-4
29478: PPUSH
29479: CALL_OW 88
// DialogueOff ;
29483: CALL_OW 7
// end ;
29487: LD_VAR 0 1
29491: RET
// export function DArabTrait2 ; begin
29492: LD_INT 0
29494: PPUSH
// if not IsPlaced ( Khatam ) or not IsOk ( Ahmed ) or not IsOk ( Dietrich ) then
29495: LD_EXP 36
29499: PPUSH
29500: CALL_OW 305
29504: NOT
29505: IFTRUE 29519
29507: PUSH
29508: LD_EXP 51
29512: PPUSH
29513: CALL_OW 302
29517: NOT
29518: OR
29519: IFTRUE 29533
29521: PUSH
29522: LD_EXP 50
29526: PPUSH
29527: CALL_OW 302
29531: NOT
29532: OR
29533: IFFALSE 29537
// exit ;
29535: GO 29593
// DialogueOn ;
29537: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
29541: LD_EXP 51
29545: PPUSH
29546: LD_STRING D5-Ar1-1
29548: PPUSH
29549: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
29553: LD_EXP 50
29557: PPUSH
29558: LD_STRING D5-Diet-1
29560: PPUSH
29561: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
29565: LD_EXP 51
29569: PPUSH
29570: LD_STRING D5-Ar1-2
29572: PPUSH
29573: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
29577: LD_EXP 50
29581: PPUSH
29582: LD_STRING D5-Diet-2
29584: PPUSH
29585: CALL_OW 88
// DialogueOff ;
29589: CALL_OW 7
// end ;
29593: LD_VAR 0 1
29597: RET
// every 0 0$2 trigger arabianAttack do var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding , speaker ;
29598: LD_EXP 4
29602: IFFALSE 31315
29604: GO 29606
29606: DISABLE
29607: LD_INT 0
29609: PPUSH
29610: PPUSH
29611: PPUSH
29612: PPUSH
29613: PPUSH
29614: PPUSH
29615: PPUSH
29616: PPUSH
// begin SetAttitude ( 2 , 3 , att_friend , true ) ;
29617: LD_INT 2
29619: PPUSH
29620: LD_INT 3
29622: PPUSH
29623: LD_INT 1
29625: PPUSH
29626: LD_INT 1
29628: PPUSH
29629: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
29633: LD_INT 2
29635: PPUSH
29636: LD_INT 6
29638: PPUSH
29639: LD_INT 1
29641: PPUSH
29642: LD_INT 1
29644: PPUSH
29645: CALL_OW 80
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
29649: LD_ADDR_VAR 0 5
29653: PUSH
29654: LD_INT 22
29656: PUSH
29657: LD_INT 2
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 2
29666: PUSH
29667: LD_INT 25
29669: PUSH
29670: LD_INT 4
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 25
29679: PUSH
29680: LD_INT 2
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 25
29689: PUSH
29690: LD_INT 3
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PPUSH
29707: CALL_OW 69
29711: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff Dietrich ;
29712: LD_ADDR_VAR 0 4
29716: PUSH
29717: LD_INT 22
29719: PUSH
29720: LD_INT 2
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 21
29729: PUSH
29730: LD_INT 1
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 2
29739: PUSH
29740: LD_INT 25
29742: PUSH
29743: LD_INT 1
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 25
29752: PUSH
29753: LD_INT 8
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 25
29762: PUSH
29763: LD_INT 15
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: LIST
29780: PPUSH
29781: CALL_OW 69
29785: PUSH
29786: LD_EXP 50
29790: DIFF
29791: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
29792: LD_ADDR_VAR 0 6
29796: PUSH
29797: LD_INT 22
29799: PUSH
29800: LD_INT 2
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 30
29809: PUSH
29810: LD_INT 5
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PPUSH
29821: CALL_OW 69
29825: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
29826: LD_VAR 0 5
29830: PPUSH
29831: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
29835: LD_VAR 0 4
29839: PPUSH
29840: CALL_OW 122
// RaiseSailEvent ( EArabAttack ) ;
29844: LD_INT 101
29846: PPUSH
29847: CALL_OW 427
// SayRadio ( AmScout , D4-FSol1-3 ) ;
29851: LD_EXP 40
29855: PPUSH
29856: LD_STRING D4-FSol1-3
29858: PPUSH
29859: CALL_OW 94
// for i in arCivilian do
29863: LD_ADDR_VAR 0 1
29867: PUSH
29868: LD_VAR 0 5
29872: PUSH
29873: FOR_IN
29874: IFFALSE 29953
// begin AddComEnterUnit ( i , barracks [ i mod 2 + 1 ] ) ;
29876: LD_VAR 0 1
29880: PPUSH
29881: LD_VAR 0 6
29885: PUSH
29886: LD_VAR 0 1
29890: PUSH
29891: LD_INT 2
29893: MOD
29894: PUSH
29895: LD_INT 1
29897: PLUS
29898: ARRAY
29899: PPUSH
29900: CALL_OW 180
// AddComChangeProfession ( i , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
29904: LD_VAR 0 1
29908: PPUSH
29909: LD_INT 1
29911: PUSH
29912: LD_INT 8
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 1
29921: PPUSH
29922: LD_INT 2
29924: PPUSH
29925: CALL_OW 12
29929: ARRAY
29930: PPUSH
29931: CALL_OW 183
// AddComExitBuilding ( i ) ;
29935: LD_VAR 0 1
29939: PPUSH
29940: CALL_OW 182
// wait ( 0 0$0.5 ) ;
29944: LD_INT 18
29946: PPUSH
29947: CALL_OW 67
// end ;
29951: GO 29873
29953: POP
29954: POP
// wait ( 0 0$5 ) ;
29955: LD_INT 175
29957: PPUSH
29958: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
29962: LD_INT 76
29964: PPUSH
29965: LD_INT 19
29967: PPUSH
29968: CALL_OW 84
// DialogueOn ;
29972: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
29976: LD_INT 22
29978: PUSH
29979: LD_INT 1
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 26
29988: PUSH
29989: LD_INT 1
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 2
29998: PUSH
29999: LD_INT 25
30001: PUSH
30002: LD_INT 1
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 25
30011: PUSH
30012: LD_INT 2
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 25
30021: PUSH
30022: LD_INT 3
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 25
30031: PUSH
30032: LD_INT 4
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 25
30041: PUSH
30042: LD_INT 5
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: LIST
30061: PPUSH
30062: CALL_OW 69
30066: PPUSH
30067: LD_STRING D8-Sol1-1
30069: PPUSH
30070: LD_STRING D8-Sol1-1
30072: PPUSH
30073: CALL 25305 0 3
// if IsOk ( DeltaDoctor ) then
30077: LD_EXP 39
30081: PPUSH
30082: CALL_OW 302
30086: IFFALSE 30102
// Say ( DeltaDoctor , D8-Sci1-1 ) else
30088: LD_EXP 39
30092: PPUSH
30093: LD_STRING D8-Sci1-1
30095: PPUSH
30096: CALL_OW 88
30100: GO 30203
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
30102: LD_INT 22
30104: PUSH
30105: LD_INT 1
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 26
30114: PUSH
30115: LD_INT 1
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 2
30124: PUSH
30125: LD_INT 25
30127: PUSH
30128: LD_INT 1
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 25
30137: PUSH
30138: LD_INT 2
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 25
30147: PUSH
30148: LD_INT 3
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 25
30157: PUSH
30158: LD_INT 4
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 25
30167: PUSH
30168: LD_INT 5
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: LIST
30187: PPUSH
30188: CALL_OW 69
30192: PPUSH
30193: LD_STRING D8-Sol1-1
30195: PPUSH
30196: LD_STRING D8-Sol1-1
30198: PPUSH
30199: CALL 25305 0 3
// Say ( JMM , D8-JMM-1 ) ;
30203: LD_EXP 23
30207: PPUSH
30208: LD_STRING D8-JMM-1
30210: PPUSH
30211: CALL_OW 88
// DialogueOff ;
30215: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
30219: LD_INT 2
30221: PPUSH
30222: LD_INT 2
30224: PPUSH
30225: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
30229: LD_INT 1
30231: PPUSH
30232: LD_INT 2
30234: PPUSH
30235: LD_INT 2
30237: PPUSH
30238: LD_INT 1
30240: PPUSH
30241: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
30245: LD_INT 3
30247: PPUSH
30248: LD_INT 2
30250: PPUSH
30251: LD_INT 1
30253: PPUSH
30254: LD_INT 1
30256: PPUSH
30257: CALL_OW 80
// SetAttitude ( 6 , 2 , att_friend , true ) ;
30261: LD_INT 6
30263: PPUSH
30264: LD_INT 2
30266: PPUSH
30267: LD_INT 1
30269: PPUSH
30270: LD_INT 1
30272: PPUSH
30273: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
30277: LD_STRING M4
30279: PPUSH
30280: CALL_OW 337
// wait ( 0 0$1 ) ;
30284: LD_INT 35
30286: PPUSH
30287: CALL_OW 67
// if IsLive ( Khatam ) then
30291: LD_EXP 36
30295: PPUSH
30296: CALL_OW 300
30300: IFFALSE 30314
// DoNotAttack ( 2 , Khatam ) ;
30302: LD_INT 2
30304: PPUSH
30305: LD_EXP 36
30309: PPUSH
30310: CALL_OW 471
// wait ( 0 0$1 ) ;
30314: LD_INT 35
30316: PPUSH
30317: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
30321: LD_ADDR_VAR 0 7
30325: PUSH
30326: LD_INT 22
30328: PUSH
30329: LD_INT 1
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 21
30338: PUSH
30339: LD_INT 3
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PPUSH
30350: CALL_OW 69
30354: PPUSH
30355: LD_VAR 0 4
30359: PUSH
30360: LD_INT 1
30362: ARRAY
30363: PPUSH
30364: CALL_OW 74
30368: ST_TO_ADDR
// for i := 1 to 3 do
30369: LD_ADDR_VAR 0 1
30373: PUSH
30374: DOUBLE
30375: LD_INT 1
30377: DEC
30378: ST_TO_ADDR
30379: LD_INT 3
30381: PUSH
30382: FOR_TO
30383: IFFALSE 30442
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ i ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
30385: LD_VAR 0 4
30389: PPUSH
30390: LD_INT 25
30392: PUSH
30393: LD_INT 1
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PPUSH
30400: CALL_OW 72
30404: PUSH
30405: LD_VAR 0 1
30409: ARRAY
30410: PPUSH
30411: LD_VAR 0 7
30415: PPUSH
30416: CALL_OW 250
30420: PPUSH
30421: LD_VAR 0 7
30425: PPUSH
30426: CALL_OW 251
30430: PPUSH
30431: LD_VAR 0 7
30435: PPUSH
30436: CALL_OW 192
30440: GO 30382
30442: POP
30443: POP
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
30444: LD_VAR 0 4
30448: PPUSH
30449: LD_INT 84
30451: PPUSH
30452: LD_INT 22
30454: PPUSH
30455: CALL_OW 174
// AddComMoveXY ( arSoldiers , 95 , 12 ) ;
30459: LD_VAR 0 4
30463: PPUSH
30464: LD_INT 95
30466: PPUSH
30467: LD_INT 12
30469: PPUSH
30470: CALL_OW 171
// AddComMoveXY ( arSoldiers , 102 , 11 ) ;
30474: LD_VAR 0 4
30478: PPUSH
30479: LD_INT 102
30481: PPUSH
30482: LD_INT 11
30484: PPUSH
30485: CALL_OW 171
// AddComMoveXY ( arSoldiers , 116 , 15 ) ;
30489: LD_VAR 0 4
30493: PPUSH
30494: LD_INT 116
30496: PPUSH
30497: LD_INT 15
30499: PPUSH
30500: CALL_OW 171
// AddComMoveXY ( arSoldiers , 140 , 25 ) ;
30504: LD_VAR 0 4
30508: PPUSH
30509: LD_INT 140
30511: PPUSH
30512: LD_INT 25
30514: PPUSH
30515: CALL_OW 171
// arSoldiers := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff Dietrich ;
30519: LD_ADDR_VAR 0 4
30523: PUSH
30524: LD_INT 22
30526: PUSH
30527: LD_INT 2
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 21
30536: PUSH
30537: LD_INT 1
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 2
30546: PUSH
30547: LD_INT 25
30549: PUSH
30550: LD_INT 1
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 25
30559: PUSH
30560: LD_INT 8
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 25
30569: PUSH
30570: LD_INT 15
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: LIST
30587: PPUSH
30588: CALL_OW 69
30592: PUSH
30593: LD_EXP 50
30597: DIFF
30598: ST_TO_ADDR
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
30599: LD_ADDR_VAR 0 5
30603: PUSH
30604: LD_INT 22
30606: PUSH
30607: LD_INT 2
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 21
30616: PUSH
30617: LD_INT 1
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 2
30626: PUSH
30627: LD_INT 25
30629: PUSH
30630: LD_INT 2
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 25
30639: PUSH
30640: LD_INT 3
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 25
30649: PUSH
30650: LD_INT 4
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 25
30659: PUSH
30660: LD_INT 12
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 25
30669: PUSH
30670: LD_INT 16
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: LIST
30689: PPUSH
30690: CALL_OW 69
30694: ST_TO_ADDR
// arCivilian := arCivilian ^ Dietrich ;
30695: LD_ADDR_VAR 0 5
30699: PUSH
30700: LD_VAR 0 5
30704: PUSH
30705: LD_EXP 50
30709: ADD
30710: ST_TO_ADDR
// AddComMoveXY ( arCivilian , 81 , 12 ) ;
30711: LD_VAR 0 5
30715: PPUSH
30716: LD_INT 81
30718: PPUSH
30719: LD_INT 12
30721: PPUSH
30722: CALL_OW 171
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
30726: LD_VAR 0 5
30730: PPUSH
30731: LD_INT 88
30733: PPUSH
30734: LD_INT 8
30736: PPUSH
30737: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
30741: LD_VAR 0 5
30745: PPUSH
30746: LD_INT 102
30748: PPUSH
30749: LD_INT 10
30751: PPUSH
30752: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
30756: LD_VAR 0 5
30760: PPUSH
30761: LD_INT 116
30763: PPUSH
30764: LD_INT 15
30766: PPUSH
30767: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
30771: LD_VAR 0 5
30775: PPUSH
30776: LD_INT 140
30778: PPUSH
30779: LD_INT 25
30781: PPUSH
30782: CALL_OW 171
// wait ( 3 ) ;
30786: LD_INT 3
30788: PPUSH
30789: CALL_OW 67
// arEscapist := arCivilian union arSoldiers ;
30793: LD_ADDR_EXP 56
30797: PUSH
30798: LD_VAR 0 5
30802: PUSH
30803: LD_VAR 0 4
30807: UNION
30808: ST_TO_ADDR
// if IsOk ( Gary ) then
30809: LD_EXP 32
30813: PPUSH
30814: CALL_OW 302
30818: IFFALSE 30832
// Say ( Gary , D8a-Gary-1 ) ;
30820: LD_EXP 32
30824: PPUSH
30825: LD_STRING D8a-Gary-1
30827: PPUSH
30828: CALL_OW 88
// wait ( 0 0$5 ) ;
30832: LD_INT 175
30834: PPUSH
30835: CALL_OW 67
// if IsOK ( Khatam ) then
30839: LD_EXP 36
30843: PPUSH
30844: CALL_OW 302
30848: IFFALSE 31315
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
30850: LD_ADDR_VAR 0 2
30854: PUSH
30855: LD_INT 22
30857: PUSH
30858: LD_INT 1
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 2
30867: PUSH
30868: LD_INT 25
30870: PUSH
30871: LD_INT 1
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 25
30880: PUSH
30881: LD_INT 2
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 25
30890: PUSH
30891: LD_INT 3
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 25
30900: PUSH
30901: LD_INT 4
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 25
30910: PUSH
30911: LD_INT 5
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 25
30920: PUSH
30921: LD_INT 8
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PPUSH
30941: CALL_OW 69
30945: PUSH
30946: LD_EXP 23
30950: PUSH
30951: LD_EXP 24
30955: PUSH
30956: LD_EXP 25
30960: PUSH
30961: LD_EXP 26
30965: PUSH
30966: LD_EXP 27
30970: PUSH
30971: LD_EXP 28
30975: PUSH
30976: LD_EXP 29
30980: PUSH
30981: LD_EXP 30
30985: PUSH
30986: LD_EXP 31
30990: PUSH
30991: LD_EXP 32
30995: PUSH
30996: LD_EXP 33
31000: PUSH
31001: LD_EXP 34
31005: PUSH
31006: LD_EXP 35
31010: PUSH
31011: LD_EXP 36
31015: PUSH
31016: LD_EXP 37
31020: PUSH
31021: LD_EXP 38
31025: PUSH
31026: LD_EXP 39
31030: PUSH
31031: LD_EXP 42
31035: PUSH
31036: LD_EXP 44
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: DIFF
31062: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
31063: LD_EXP 36
31067: PPUSH
31068: LD_INT 8
31070: PPUSH
31071: CALL_OW 235
// ComExit ( Khatam ) ;
31075: LD_EXP 36
31079: PPUSH
31080: CALL 94245 0 1
// wait ( 0 0$1 ) ;
31084: LD_INT 35
31086: PPUSH
31087: CALL_OW 67
// ComMoveToArea ( Khatam , khatamArea ) ;
31091: LD_EXP 36
31095: PPUSH
31096: LD_INT 11
31098: PPUSH
31099: CALL_OW 113
// escapeKhatam := true ;
31103: LD_ADDR_EXP 11
31107: PUSH
31108: LD_INT 1
31110: ST_TO_ADDR
// if not tmp then
31111: LD_VAR 0 2
31115: NOT
31116: IFFALSE 31120
// exit ;
31118: GO 31315
// wait ( 0 0$2 ) ;
31120: LD_INT 70
31122: PPUSH
31123: CALL_OW 67
// DialogueOn ;
31127: CALL_OW 6
// speaker := DialogRandom ( tmp , D8b-Sol1-1 , D8b-FSol1-1 ) ;
31131: LD_ADDR_VAR 0 8
31135: PUSH
31136: LD_VAR 0 2
31140: PPUSH
31141: LD_STRING D8b-Sol1-1
31143: PPUSH
31144: LD_STRING D8b-FSol1-1
31146: PPUSH
31147: CALL 25305 0 3
31151: ST_TO_ADDR
// Say ( Khatam , D8b-Khat-1 ) ;
31152: LD_EXP 36
31156: PPUSH
31157: LD_STRING D8b-Khat-1
31159: PPUSH
31160: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31164: LD_VAR 0 8
31168: PPUSH
31169: CALL_OW 258
31173: PUSH
31174: LD_INT 1
31176: EQUAL
31177: IFFALSE 31193
// Say ( speaker , D8b-Sol1-2 ) else
31179: LD_VAR 0 8
31183: PPUSH
31184: LD_STRING D8b-Sol1-2
31186: PPUSH
31187: CALL_OW 88
31191: GO 31205
// Say ( speaker , D8b-FSol1-2 ) ;
31193: LD_VAR 0 8
31197: PPUSH
31198: LD_STRING D8b-FSol1-2
31200: PPUSH
31201: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
31205: LD_EXP 36
31209: PPUSH
31210: LD_STRING D8b-Khat-2
31212: PPUSH
31213: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31217: LD_VAR 0 8
31221: PPUSH
31222: CALL_OW 258
31226: PUSH
31227: LD_INT 1
31229: EQUAL
31230: IFFALSE 31246
// Say ( speaker , D8b-Sol1-3 ) else
31232: LD_VAR 0 8
31236: PPUSH
31237: LD_STRING D8b-Sol1-3
31239: PPUSH
31240: CALL_OW 88
31244: GO 31258
// Say ( speaker , D8b-FSol1-3 ) ;
31246: LD_VAR 0 8
31250: PPUSH
31251: LD_STRING D8b-FSol1-3
31253: PPUSH
31254: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
31258: LD_EXP 36
31262: PPUSH
31263: LD_STRING D8b-Khat-3
31265: PPUSH
31266: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31270: LD_VAR 0 8
31274: PPUSH
31275: CALL_OW 258
31279: PUSH
31280: LD_INT 1
31282: EQUAL
31283: IFFALSE 31299
// Say ( speaker , D8b-Sol1-4 ) else
31285: LD_VAR 0 8
31289: PPUSH
31290: LD_STRING D8b-Sol1-4
31292: PPUSH
31293: CALL_OW 88
31297: GO 31311
// Say ( speaker , D8b-FSol1-4 ) ;
31299: LD_VAR 0 8
31303: PPUSH
31304: LD_STRING D8b-FSol1-4
31306: PPUSH
31307: CALL_OW 88
// DialogueOff ;
31311: CALL_OW 7
// end ; end ;
31315: PPOPN 8
31317: END
// every 0 0$1 trigger escapeKhatam and IsOk ( Khatam ) do
31318: LD_EXP 11
31322: IFFALSE 31335
31324: PUSH
31325: LD_EXP 36
31329: PPUSH
31330: CALL_OW 302
31334: AND
31335: IFFALSE 31412
31337: GO 31339
31339: DISABLE
// begin enable ;
31340: ENABLE
// if IsOk ( Khatam ) and not HasTask ( Khatam ) then
31341: LD_EXP 36
31345: PPUSH
31346: CALL_OW 302
31350: IFFALSE 31364
31352: PUSH
31353: LD_EXP 36
31357: PPUSH
31358: CALL_OW 314
31362: NOT
31363: AND
31364: IFFALSE 31378
// ComMoveToArea ( Khatam , khatamArea ) ;
31366: LD_EXP 36
31370: PPUSH
31371: LD_INT 11
31373: PPUSH
31374: CALL_OW 113
// if IsInArea ( Khatam , khatamArea ) then
31378: LD_EXP 36
31382: PPUSH
31383: LD_INT 11
31385: PPUSH
31386: CALL_OW 308
31390: IFFALSE 31412
// begin SaveVariable ( 1 , 10_KhatamStatus_1 ) ;
31392: LD_INT 1
31394: PPUSH
31395: LD_STRING 10_KhatamStatus_1
31397: PPUSH
31398: CALL_OW 39
// RemoveUnit ( Khatam ) ;
31402: LD_EXP 36
31406: PPUSH
31407: CALL_OW 64
// disable ;
31411: DISABLE
// end ; end ;
31412: END
// every 0 0$30 trigger joinedToEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) = 0 or not arabianAttack ) do
31413: LD_EXP 7
31417: IFFALSE 31431
31419: PUSH
31420: LD_STRING 02_mikhailStatus_1
31422: PPUSH
31423: LD_INT 0
31425: PPUSH
31426: CALL_OW 30
31430: AND
31431: IFFALSE 31463
31433: PUSH
31434: LD_INT 22
31436: PUSH
31437: LD_INT 5
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 50
31446: PUSH
31447: EMPTY
31448: LIST
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PPUSH
31454: CALL_OW 69
31458: PUSH
31459: LD_INT 0
31461: EQUAL
31462: AND
31463: IFFALSE 31515
31465: PUSH
31466: LD_INT 22
31468: PUSH
31469: LD_INT 2
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 50
31478: PUSH
31479: EMPTY
31480: LIST
31481: PUSH
31482: LD_INT 21
31484: PUSH
31485: LD_INT 1
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: LIST
31496: PPUSH
31497: CALL_OW 69
31501: PUSH
31502: LD_INT 0
31504: EQUAL
31505: IFTRUE 31514
31507: PUSH
31508: LD_EXP 4
31512: NOT
31513: OR
31514: AND
31515: IFFALSE 31537
31517: GO 31519
31519: DISABLE
// begin wait ( 2 2$00 * Difficulty ) ;
31520: LD_INT 4200
31522: PUSH
31523: LD_OWVAR 67
31527: MUL
31528: PPUSH
31529: CALL_OW 67
// PrepareCornell ;
31533: CALL 3222 0 0
// end ;
31537: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 and IsOk ( Cornell ) do
31538: LD_INT 22
31540: PUSH
31541: LD_INT 1
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PPUSH
31548: CALL_OW 69
31552: PPUSH
31553: LD_EXP 42
31557: PPUSH
31558: CALL_OW 74
31562: PPUSH
31563: LD_EXP 42
31567: PPUSH
31568: CALL_OW 296
31572: PUSH
31573: LD_INT 9
31575: LESS
31576: IFFALSE 31589
31578: PUSH
31579: LD_EXP 42
31583: PPUSH
31584: CALL_OW 302
31588: AND
31589: IFFALSE 32033
31591: GO 31593
31593: DISABLE
// begin InGameOn ;
31594: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
31598: LD_EXP 42
31602: PPUSH
31603: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
31607: LD_EXP 42
31611: PPUSH
31612: LD_STRING D7-Corn-1
31614: PPUSH
31615: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
31619: LD_INT 22
31621: PUSH
31622: LD_INT 1
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 2
31631: PUSH
31632: LD_INT 25
31634: PUSH
31635: LD_INT 1
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 25
31644: PUSH
31645: LD_INT 2
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 25
31654: PUSH
31655: LD_INT 3
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 25
31664: PUSH
31665: LD_INT 4
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 25
31674: PUSH
31675: LD_INT 5
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PPUSH
31694: CALL_OW 69
31698: PPUSH
31699: LD_STRING D7-Sol1-1
31701: PPUSH
31702: LD_STRING D7-FSol1-1
31704: PPUSH
31705: CALL 25305 0 3
// CenterNowOnUnits ( Cornell ) ;
31709: LD_EXP 42
31713: PPUSH
31714: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
31718: LD_EXP 42
31722: PPUSH
31723: LD_STRING D7-Corn-2
31725: PPUSH
31726: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
31730: LD_EXP 23
31734: PPUSH
31735: LD_STRING D7-JMM-2
31737: PPUSH
31738: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
31742: LD_EXP 42
31746: PPUSH
31747: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
31751: LD_EXP 42
31755: PPUSH
31756: LD_STRING D7-Corn-3
31758: PPUSH
31759: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
31763: LD_EXP 42
31767: PPUSH
31768: LD_INT 250
31770: PPUSH
31771: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
31775: LD_EXP 42
31779: PPUSH
31780: LD_INT 1
31782: PPUSH
31783: CALL_OW 235
// wait ( 0 0$1 ) ;
31787: LD_INT 35
31789: PPUSH
31790: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
31794: LD_EXP 23
31798: PPUSH
31799: LD_STRING D7-JMM-3
31801: PPUSH
31802: CALL_OW 88
// InGameOff ;
31806: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
31810: LD_INT 35
31812: PPUSH
31813: CALL_OW 67
// if IsDead ( Cornell ) then
31817: LD_EXP 42
31821: PPUSH
31822: CALL_OW 301
31826: IFFALSE 31830
// exit ;
31828: GO 32033
// until GetLives ( Cornell ) > 350 ;
31830: LD_EXP 42
31834: PPUSH
31835: CALL_OW 256
31839: PUSH
31840: LD_INT 350
31842: GREATER
31843: IFFALSE 31810
// DialogueOn ;
31845: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
31849: LD_EXP 23
31853: PPUSH
31854: LD_STRING D7a-JMM-1
31856: PPUSH
31857: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
31861: LD_EXP 42
31865: PPUSH
31866: LD_STRING D7a-Corn-1
31868: PPUSH
31869: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
31873: LD_EXP 23
31877: PPUSH
31878: LD_STRING D7a-JMM-2
31880: PPUSH
31881: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
31885: LD_EXP 42
31889: PPUSH
31890: LD_STRING D7a-Corn-2
31892: PPUSH
31893: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
31897: LD_EXP 23
31901: PPUSH
31902: LD_STRING D7a-JMM-3
31904: PPUSH
31905: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
31909: LD_EXP 42
31913: PPUSH
31914: LD_STRING D7a-Corn-3
31916: PPUSH
31917: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
31921: LD_EXP 23
31925: PPUSH
31926: LD_STRING D7a-JMM-4
31928: PPUSH
31929: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
31933: LD_EXP 42
31937: PPUSH
31938: LD_STRING D7a-Corn-4
31940: PPUSH
31941: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
31945: LD_EXP 23
31949: PPUSH
31950: LD_STRING D7a-JMM-5
31952: PPUSH
31953: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
31957: LD_EXP 42
31961: PPUSH
31962: LD_STRING D7a-Corn-5
31964: PPUSH
31965: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
31969: LD_EXP 23
31973: PPUSH
31974: LD_STRING D7a-JMM-6
31976: PPUSH
31977: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
31981: LD_EXP 42
31985: PPUSH
31986: LD_STRING D7a-Corn-6
31988: PPUSH
31989: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
31993: LD_EXP 23
31997: PPUSH
31998: LD_STRING D7a-JMM-7
32000: PPUSH
32001: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
32005: LD_EXP 42
32009: PPUSH
32010: LD_STRING D7a-Corn-7
32012: PPUSH
32013: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
32017: LD_EXP 23
32021: PPUSH
32022: LD_STRING D7a-JMM-8
32024: PPUSH
32025: CALL_OW 88
// DialogueOff ;
32029: CALL_OW 7
// end ;
32033: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
32034: LD_INT 54
32036: PPUSH
32037: LD_INT 1
32039: PPUSH
32040: CALL_OW 321
32044: PUSH
32045: LD_INT 2
32047: EQUAL
32048: IFFALSE 32066
32050: PUSH
32051: LD_INT 55
32053: PPUSH
32054: LD_INT 1
32056: PPUSH
32057: CALL_OW 321
32061: PUSH
32062: LD_INT 2
32064: EQUAL
32065: AND
32066: IFFALSE 32084
32068: PUSH
32069: LD_INT 21
32071: PPUSH
32072: LD_INT 1
32074: PPUSH
32075: CALL_OW 321
32079: PUSH
32080: LD_INT 2
32082: EQUAL
32083: AND
32084: IFFALSE 32102
32086: PUSH
32087: LD_INT 22
32089: PPUSH
32090: LD_INT 1
32092: PPUSH
32093: CALL_OW 321
32097: PUSH
32098: LD_INT 2
32100: EQUAL
32101: AND
32102: IFFALSE 32141
32104: PUSH
32105: LD_INT 12
32107: PPUSH
32108: LD_INT 1
32110: PPUSH
32111: CALL_OW 321
32115: PUSH
32116: LD_INT 1
32118: EQUAL
32119: IFTRUE 32137
32121: PUSH
32122: LD_INT 32
32124: PPUSH
32125: LD_INT 1
32127: PPUSH
32128: CALL_OW 321
32132: PUSH
32133: LD_INT 1
32135: EQUAL
32136: OR
32137: PUSH
32138: EMPTY
32139: LIST
32140: AND
32141: IFFALSE 32149
32143: PUSH
32144: LD_EXP 8
32148: AND
32149: IFFALSE 32185
32151: PUSH
32152: LD_INT 22
32154: PUSH
32155: LD_INT 3
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 21
32164: PUSH
32165: LD_INT 1
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PPUSH
32176: CALL_OW 69
32180: PUSH
32181: LD_INT 0
32183: EQUAL
32184: AND
32185: IFFALSE 32233
32187: GO 32189
32189: DISABLE
// begin case Query ( QEndMission ) of 1 :
32190: LD_STRING QEndMission
32192: PPUSH
32193: CALL_OW 97
32197: PUSH
32198: LD_INT 1
32200: DOUBLE
32201: EQUAL
32202: IFTRUE 32206
32204: GO 32217
32206: POP
// end_the_mission_allowed = true ; 2 :
32207: LD_ADDR_OWVAR 57
32211: PUSH
32212: LD_INT 1
32214: ST_TO_ADDR
32215: GO 32233
32217: LD_INT 2
32219: DOUBLE
32220: EQUAL
32221: IFTRUE 32225
32223: GO 32232
32225: POP
// FinishMission ; end ;
32226: CALL 32281 0 0
32230: GO 32233
32232: POP
// end ;
32233: END
// function EnchancedSaveCharacters ( unit , id ) ; begin
32234: LD_INT 0
32236: PPUSH
// if IsLive ( unit ) or unit in JMMSquad then
32237: LD_VAR 0 1
32241: PPUSH
32242: CALL_OW 300
32246: IFTRUE 32260
32248: PUSH
32249: LD_VAR 0 1
32253: PUSH
32254: LD_EXP 45
32258: IN
32259: OR
32260: IFFALSE 32276
// SaveCharacters ( unit , id ) ;
32262: LD_VAR 0 1
32266: PPUSH
32267: LD_VAR 0 2
32271: PPUSH
32272: CALL_OW 38
// end ;
32276: LD_VAR 0 3
32280: RET
// export function FinishMission ; var m1 , m2 , m3 , prefix ; begin
32281: LD_INT 0
32283: PPUSH
32284: PPUSH
32285: PPUSH
32286: PPUSH
32287: PPUSH
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
32288: LD_INT 22
32290: PUSH
32291: LD_INT 1
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 21
32300: PUSH
32301: LD_INT 1
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 23
32310: PUSH
32311: LD_INT 1
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 50
32320: PUSH
32321: EMPTY
32322: LIST
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: PPUSH
32330: CALL_OW 69
32334: PPUSH
32335: CALL 57915 0 1
32339: PUSH
32340: LD_INT 5
32342: LESS
32343: IFFALSE 32354
// begin YouLost ( Troops ) ;
32345: LD_STRING Troops
32347: PPUSH
32348: CALL_OW 104
// exit ;
32352: GO 33380
// end ; if not hasSniper then
32354: LD_EXP 20
32358: NOT
32359: IFFALSE 32368
// SetAchievement ( ACH_SNIPER ) ;
32361: LD_STRING ACH_SNIPER
32363: PPUSH
32364: CALL_OW 543
// m1 := false ;
32368: LD_ADDR_VAR 0 2
32372: PUSH
32373: LD_INT 0
32375: ST_TO_ADDR
// m2 := false ;
32376: LD_ADDR_VAR 0 3
32380: PUSH
32381: LD_INT 0
32383: ST_TO_ADDR
// m3 := false ;
32384: LD_ADDR_VAR 0 4
32388: PUSH
32389: LD_INT 0
32391: ST_TO_ADDR
// if GetTech ( tech_LasSight , 1 ) = state_researched then
32392: LD_INT 12
32394: PPUSH
32395: LD_INT 1
32397: PPUSH
32398: CALL_OW 321
32402: PUSH
32403: LD_INT 2
32405: EQUAL
32406: IFFALSE 32428
// begin AddMedal ( sights , 1 ) ;
32408: LD_STRING sights
32410: PPUSH
32411: LD_INT 1
32413: PPUSH
32414: CALL_OW 101
// m1 := true ;
32418: LD_ADDR_VAR 0 2
32422: PUSH
32423: LD_INT 1
32425: ST_TO_ADDR
// end else
32426: GO 32439
// AddMedal ( sights , - 1 ) ;
32428: LD_STRING sights
32430: PPUSH
32431: LD_INT 1
32433: NEG
32434: PPUSH
32435: CALL_OW 101
// if GetTech ( tech_AI , 1 ) = state_researched then
32439: LD_INT 32
32441: PPUSH
32442: LD_INT 1
32444: PPUSH
32445: CALL_OW 321
32449: PUSH
32450: LD_INT 2
32452: EQUAL
32453: IFFALSE 32475
// begin AddMedal ( computers , 1 ) ;
32455: LD_STRING computers
32457: PPUSH
32458: LD_INT 1
32460: PPUSH
32461: CALL_OW 101
// m2 := true ;
32465: LD_ADDR_VAR 0 3
32469: PUSH
32470: LD_INT 1
32472: ST_TO_ADDR
// end else
32473: GO 32486
// AddMedal ( computers , - 1 ) ;
32475: LD_STRING computers
32477: PPUSH
32478: LD_INT 1
32480: NEG
32481: PPUSH
32482: CALL_OW 101
// if arabianEscapedCounter = 0 then
32486: LD_EXP 21
32490: PUSH
32491: LD_INT 0
32493: EQUAL
32494: IFFALSE 32526
// begin AddMedal ( renegades , 2 ) ;
32496: LD_STRING renegades
32498: PPUSH
32499: LD_INT 2
32501: PPUSH
32502: CALL_OW 101
// m3 := true ;
32506: LD_ADDR_VAR 0 4
32510: PUSH
32511: LD_INT 1
32513: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
32514: LD_INT 0
32516: PPUSH
32517: LD_STRING 10_ScientistsEscape_1
32519: PPUSH
32520: CALL_OW 39
// end else
32524: GO 32537
// AddMedal ( renegades , - 1 ) ;
32526: LD_STRING renegades
32528: PPUSH
32529: LD_INT 1
32531: NEG
32532: PPUSH
32533: CALL_OW 101
// SaveEpsilonBase ;
32537: CALL 33385 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
32541: LD_VAR 0 2
32545: IFFALSE 32553
32547: PUSH
32548: LD_VAR 0 3
32552: AND
32553: IFFALSE 32561
32555: PUSH
32556: LD_VAR 0 4
32560: AND
32561: IFFALSE 32573
32563: PUSH
32564: LD_OWVAR 67
32568: PUSH
32569: LD_INT 3
32571: GREATEREQUAL
32572: AND
32573: IFFALSE 32585
// SetAchievementEX ( ACH_AMER , 10 ) ;
32575: LD_STRING ACH_AMER
32577: PPUSH
32578: LD_INT 10
32580: PPUSH
32581: CALL_OW 564
// if tick <= 40 40$00 then
32585: LD_OWVAR 1
32589: PUSH
32590: LD_INT 84000
32592: LESSEQUAL
32593: IFFALSE 32609
// begin wait ( 3 ) ;
32595: LD_INT 3
32597: PPUSH
32598: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
32602: LD_STRING ACH_ASPEED_10
32604: PPUSH
32605: CALL_OW 543
// end ; GiveMedals ( Main ) ;
32609: LD_STRING Main
32611: PPUSH
32612: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
32616: LD_INT 22
32618: PUSH
32619: LD_INT 1
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 23
32628: PUSH
32629: LD_INT 1
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 21
32638: PUSH
32639: LD_INT 1
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 2
32648: PUSH
32649: LD_INT 25
32651: PUSH
32652: LD_INT 1
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 25
32661: PUSH
32662: LD_INT 2
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 25
32671: PUSH
32672: LD_INT 3
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 25
32681: PUSH
32682: LD_INT 4
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 25
32691: PUSH
32692: LD_INT 5
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 25
32701: PUSH
32702: LD_INT 8
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: PPUSH
32724: CALL_OW 69
32728: PPUSH
32729: CALL_OW 43
// prefix := 10c_ ;
32733: LD_ADDR_VAR 0 5
32737: PUSH
32738: LD_STRING 10c_
32740: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
32741: LD_EXP 23
32745: PPUSH
32746: LD_VAR 0 5
32750: PUSH
32751: LD_STRING JMM
32753: STR
32754: PPUSH
32755: CALL_OW 38
// EnchancedSaveCharacters ( Brown , prefix & Brown ) ;
32759: LD_EXP 24
32763: PPUSH
32764: LD_VAR 0 5
32768: PUSH
32769: LD_STRING Brown
32771: STR
32772: PPUSH
32773: CALL 32234 0 2
// EnchancedSaveCharacters ( Donaldson , prefix & Donaldson ) ;
32777: LD_EXP 25
32781: PPUSH
32782: LD_VAR 0 5
32786: PUSH
32787: LD_STRING Donaldson
32789: STR
32790: PPUSH
32791: CALL 32234 0 2
// EnchancedSaveCharacters ( Bobby , prefix & Bobby ) ;
32795: LD_EXP 26
32799: PPUSH
32800: LD_VAR 0 5
32804: PUSH
32805: LD_STRING Bobby
32807: STR
32808: PPUSH
32809: CALL 32234 0 2
// EnchancedSaveCharacters ( Cyrus , prefix & Cyrus ) ;
32813: LD_EXP 27
32817: PPUSH
32818: LD_VAR 0 5
32822: PUSH
32823: LD_STRING Cyrus
32825: STR
32826: PPUSH
32827: CALL 32234 0 2
// EnchancedSaveCharacters ( Lisa , prefix & Lisa ) ;
32831: LD_EXP 28
32835: PPUSH
32836: LD_VAR 0 5
32840: PUSH
32841: LD_STRING Lisa
32843: STR
32844: PPUSH
32845: CALL 32234 0 2
// EnchancedSaveCharacters ( Frank , prefix & Frank ) ;
32849: LD_EXP 29
32853: PPUSH
32854: LD_VAR 0 5
32858: PUSH
32859: LD_STRING Frank
32861: STR
32862: PPUSH
32863: CALL 32234 0 2
// if Kikuchi then
32867: LD_EXP 30
32871: IFFALSE 32898
// begin ToLua ( enableBioCharacter(BIO_YAMO) ) ;
32873: LD_STRING enableBioCharacter(BIO_YAMO)
32875: PPUSH
32876: CALL_OW 559
// EnchancedSaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
32880: LD_EXP 30
32884: PPUSH
32885: LD_VAR 0 5
32889: PUSH
32890: LD_STRING Kikuchi
32892: STR
32893: PPUSH
32894: CALL 32234 0 2
// end ; EnchancedSaveCharacters ( Houten , prefix & Houten ) ;
32898: LD_EXP 31
32902: PPUSH
32903: LD_VAR 0 5
32907: PUSH
32908: LD_STRING Houten
32910: STR
32911: PPUSH
32912: CALL 32234 0 2
// EnchancedSaveCharacters ( Gary , prefix & Gary ) ;
32916: LD_EXP 32
32920: PPUSH
32921: LD_VAR 0 5
32925: PUSH
32926: LD_STRING Gary
32928: STR
32929: PPUSH
32930: CALL 32234 0 2
// EnchancedSaveCharacters ( Cornell , prefix & Cornell ) ;
32934: LD_EXP 42
32938: PPUSH
32939: LD_VAR 0 5
32943: PUSH
32944: LD_STRING Cornell
32946: STR
32947: PPUSH
32948: CALL 32234 0 2
// EnchancedSaveCharacters ( Simms , prefix & Simms ) ;
32952: LD_EXP 33
32956: PPUSH
32957: LD_VAR 0 5
32961: PUSH
32962: LD_STRING Simms
32964: STR
32965: PPUSH
32966: CALL 32234 0 2
// EnchancedSaveCharacters ( Denis , prefix & Denis ) ;
32970: LD_EXP 34
32974: PPUSH
32975: LD_VAR 0 5
32979: PUSH
32980: LD_STRING Denis
32982: STR
32983: PPUSH
32984: CALL 32234 0 2
// EnchancedSaveCharacters ( Joan , prefix & Joan ) ;
32988: LD_EXP 35
32992: PPUSH
32993: LD_VAR 0 5
32997: PUSH
32998: LD_STRING Joan
33000: STR
33001: PPUSH
33002: CALL 32234 0 2
// EnchancedSaveCharacters ( Gladstone , prefix & Gladstone ) ;
33006: LD_EXP 37
33010: PPUSH
33011: LD_VAR 0 5
33015: PUSH
33016: LD_STRING Gladstone
33018: STR
33019: PPUSH
33020: CALL 32234 0 2
// EnchancedSaveCharacters ( DeltaDoctor , prefix & DeltaDoctor ) ;
33024: LD_EXP 39
33028: PPUSH
33029: LD_VAR 0 5
33033: PUSH
33034: LD_STRING DeltaDoctor
33036: STR
33037: PPUSH
33038: CALL 32234 0 2
// if IsLive ( Mike ) then
33042: LD_EXP 41
33046: PPUSH
33047: CALL_OW 300
33051: IFFALSE 33071
// SaveCharacters ( Mike , prefix & Mike ) ;
33053: LD_EXP 41
33057: PPUSH
33058: LD_VAR 0 5
33062: PUSH
33063: LD_STRING Mike
33065: STR
33066: PPUSH
33067: CALL_OW 38
// SaveCharacters ( others , 10c_lock ) ;
33071: LD_EXP 46
33075: PPUSH
33076: LD_STRING 10c_lock
33078: PPUSH
33079: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
33083: LD_INT 50
33085: PUSH
33086: EMPTY
33087: LIST
33088: PUSH
33089: LD_INT 22
33091: PUSH
33092: LD_INT 1
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 21
33101: PUSH
33102: LD_INT 1
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 2
33111: PUSH
33112: LD_INT 25
33114: PUSH
33115: LD_INT 1
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 25
33124: PUSH
33125: LD_INT 2
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 25
33134: PUSH
33135: LD_INT 3
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 25
33144: PUSH
33145: LD_INT 4
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 25
33154: PUSH
33155: LD_INT 5
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 25
33164: PUSH
33165: LD_INT 8
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: PPUSH
33187: CALL_OW 69
33191: PUSH
33192: LD_EXP 23
33196: PUSH
33197: LD_EXP 24
33201: PUSH
33202: LD_EXP 25
33206: PUSH
33207: LD_EXP 26
33211: PUSH
33212: LD_EXP 27
33216: PUSH
33217: LD_EXP 28
33221: PUSH
33222: LD_EXP 29
33226: PUSH
33227: LD_EXP 37
33231: PUSH
33232: LD_EXP 30
33236: PUSH
33237: LD_EXP 34
33241: PUSH
33242: LD_EXP 35
33246: PUSH
33247: LD_EXP 31
33251: PUSH
33252: LD_EXP 33
33256: PUSH
33257: LD_EXP 32
33261: PUSH
33262: LD_EXP 39
33266: PUSH
33267: LD_EXP 42
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: DIFF
33290: PPUSH
33291: LD_STRING 10_other_survivors
33293: PPUSH
33294: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) diff Mike , 10_ape ) ;
33298: LD_INT 50
33300: PUSH
33301: EMPTY
33302: LIST
33303: PUSH
33304: LD_INT 22
33306: PUSH
33307: LD_INT 1
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 21
33316: PUSH
33317: LD_INT 1
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 2
33326: PUSH
33327: LD_INT 25
33329: PUSH
33330: LD_INT 16
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 25
33339: PUSH
33340: LD_INT 12
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: LIST
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: PPUSH
33358: CALL_OW 69
33362: PUSH
33363: LD_EXP 41
33367: DIFF
33368: PPUSH
33369: LD_STRING 10_ape
33371: PPUSH
33372: CALL_OW 38
// YouWin ;
33376: CALL_OW 103
// end ;
33380: LD_VAR 0 1
33384: RET
// function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
33385: LD_INT 0
33387: PPUSH
33388: PPUSH
33389: PPUSH
33390: PPUSH
// epsilonBase := [ ] ;
33391: LD_ADDR_VAR 0 2
33395: PUSH
33396: EMPTY
33397: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
33398: LD_ADDR_VAR 0 3
33402: PUSH
33403: LD_INT 22
33405: PUSH
33406: LD_INT 1
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 21
33415: PUSH
33416: LD_INT 3
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 50
33425: PUSH
33426: EMPTY
33427: LIST
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: LIST
33433: PPUSH
33434: CALL_OW 69
33438: ST_TO_ADDR
// for i in buildings do
33439: LD_ADDR_VAR 0 4
33443: PUSH
33444: LD_VAR 0 3
33448: PUSH
33449: FOR_IN
33450: IFFALSE 33904
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
33452: LD_VAR 0 4
33456: PPUSH
33457: CALL_OW 266
33461: PUSH
33462: LD_INT 6
33464: PUSH
33465: LD_INT 7
33467: PUSH
33468: LD_INT 8
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: LIST
33475: IN
33476: IFFALSE 33590
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
33478: LD_ADDR_VAR 0 2
33482: PUSH
33483: LD_VAR 0 2
33487: PUSH
33488: LD_VAR 0 4
33492: PPUSH
33493: CALL_OW 266
33497: PUSH
33498: LD_VAR 0 4
33502: PPUSH
33503: CALL_OW 250
33507: PUSH
33508: LD_VAR 0 4
33512: PPUSH
33513: CALL_OW 251
33517: PUSH
33518: LD_VAR 0 4
33522: PPUSH
33523: CALL_OW 254
33527: PUSH
33528: LD_VAR 0 4
33532: PPUSH
33533: CALL_OW 267
33537: PUSH
33538: LD_VAR 0 4
33542: PPUSH
33543: CALL_OW 248
33547: PUSH
33548: LD_VAR 0 4
33552: PPUSH
33553: LD_INT 1
33555: PPUSH
33556: CALL_OW 268
33560: PUSH
33561: LD_VAR 0 4
33565: PPUSH
33566: LD_INT 2
33568: PPUSH
33569: CALL_OW 268
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: PUSH
33584: EMPTY
33585: LIST
33586: ADD
33587: ST_TO_ADDR
33588: GO 33902
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
33590: LD_VAR 0 4
33594: PPUSH
33595: CALL_OW 266
33599: PUSH
33600: LD_INT 32
33602: EQUAL
33603: IFTRUE 33620
33605: PUSH
33606: LD_VAR 0 4
33610: PPUSH
33611: CALL_OW 266
33615: PUSH
33616: LD_INT 33
33618: EQUAL
33619: OR
33620: IFFALSE 33717
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
33622: LD_ADDR_VAR 0 2
33626: PUSH
33627: LD_VAR 0 2
33631: PUSH
33632: LD_VAR 0 4
33636: PPUSH
33637: CALL_OW 266
33641: PUSH
33642: LD_VAR 0 4
33646: PPUSH
33647: CALL_OW 250
33651: PUSH
33652: LD_VAR 0 4
33656: PPUSH
33657: CALL_OW 251
33661: PUSH
33662: LD_VAR 0 4
33666: PPUSH
33667: CALL_OW 254
33671: PUSH
33672: LD_VAR 0 4
33676: PPUSH
33677: CALL_OW 267
33681: PUSH
33682: LD_VAR 0 4
33686: PPUSH
33687: CALL_OW 248
33691: PUSH
33692: LD_VAR 0 4
33696: PPUSH
33697: CALL_OW 269
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: PUSH
33711: EMPTY
33712: LIST
33713: ADD
33714: ST_TO_ADDR
33715: GO 33902
// if GetBType ( i ) = b_factory then
33717: LD_VAR 0 4
33721: PPUSH
33722: CALL_OW 266
33726: PUSH
33727: LD_INT 3
33729: EQUAL
33730: IFFALSE 33820
// epsilonBase := Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
33732: LD_ADDR_VAR 0 2
33736: PUSH
33737: LD_VAR 0 2
33741: PPUSH
33742: LD_INT 1
33744: PPUSH
33745: LD_VAR 0 4
33749: PPUSH
33750: CALL_OW 266
33754: PUSH
33755: LD_VAR 0 4
33759: PPUSH
33760: CALL_OW 250
33764: PUSH
33765: LD_VAR 0 4
33769: PPUSH
33770: CALL_OW 251
33774: PUSH
33775: LD_VAR 0 4
33779: PPUSH
33780: CALL_OW 254
33784: PUSH
33785: LD_VAR 0 4
33789: PPUSH
33790: CALL_OW 267
33794: PUSH
33795: LD_VAR 0 4
33799: PPUSH
33800: CALL_OW 248
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: PPUSH
33813: CALL_OW 2
33817: ST_TO_ADDR
33818: GO 33902
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
33820: LD_ADDR_VAR 0 2
33824: PUSH
33825: LD_VAR 0 2
33829: PUSH
33830: LD_VAR 0 4
33834: PPUSH
33835: CALL_OW 266
33839: PUSH
33840: LD_VAR 0 4
33844: PPUSH
33845: CALL_OW 250
33849: PUSH
33850: LD_VAR 0 4
33854: PPUSH
33855: CALL_OW 251
33859: PUSH
33860: LD_VAR 0 4
33864: PPUSH
33865: CALL_OW 254
33869: PUSH
33870: LD_VAR 0 4
33874: PPUSH
33875: CALL_OW 267
33879: PUSH
33880: LD_VAR 0 4
33884: PPUSH
33885: CALL_OW 248
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: PUSH
33898: EMPTY
33899: LIST
33900: ADD
33901: ST_TO_ADDR
// end ;
33902: GO 33449
33904: POP
33905: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
33906: LD_VAR 0 2
33910: PPUSH
33911: LD_STRING 10_EpsilonBase
33913: PPUSH
33914: CALL_OW 39
// SaveVariable ( ListEnvironmentArea ( epsilonBaseArea ) , 10_EpsilonEnv ) ;
33918: LD_INT 34
33920: PPUSH
33921: CALL_OW 353
33925: PPUSH
33926: LD_STRING 10_EpsilonEnv
33928: PPUSH
33929: CALL_OW 39
// end ; end_of_file
33933: LD_VAR 0 1
33937: RET
// every 1 1$05 + 0 0$20 trigger joinedToEpsilon do var i , tmp ;
33938: LD_EXP 7
33942: IFFALSE 34065
33944: GO 33946
33946: DISABLE
33947: LD_INT 0
33949: PPUSH
33950: PPUSH
// begin enable ;
33951: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
33952: LD_INT 35
33954: PPUSH
33955: LD_INT 385
33957: PPUSH
33958: CALL_OW 12
33962: PPUSH
33963: CALL_OW 67
// tmp := [ cratesSpawn1Area , cratesSpawn2Area , cratesSpawn3Area , cratesSpawn4Area , cratesSpawn5Area , cratesSpawn6Area ] ;
33967: LD_ADDR_VAR 0 2
33971: PUSH
33972: LD_INT 13
33974: PUSH
33975: LD_INT 14
33977: PUSH
33978: LD_INT 15
33980: PUSH
33981: LD_INT 16
33983: PUSH
33984: LD_INT 17
33986: PUSH
33987: LD_INT 38
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
33998: LD_ADDR_VAR 0 1
34002: PUSH
34003: LD_VAR 0 2
34007: PUSH
34008: LD_INT 1
34010: PPUSH
34011: LD_VAR 0 2
34015: PPUSH
34016: CALL 57915 0 1
34020: PPUSH
34021: CALL_OW 12
34025: ARRAY
34026: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 8 then
34027: LD_VAR 0 1
34031: PPUSH
34032: CALL_OW 435
34036: PUSH
34037: LD_INT 8
34039: LESS
34040: IFFALSE 34065
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
34042: LD_INT 1
34044: PPUSH
34045: LD_INT 5
34047: PPUSH
34048: CALL_OW 12
34052: PPUSH
34053: LD_VAR 0 1
34057: PPUSH
34058: LD_INT 1
34060: PPUSH
34061: CALL_OW 55
// end ;
34065: PPOPN 2
34067: END
// every 0 0$20 trigger tick < 5 5$00 and hasBase do
34068: LD_OWVAR 1
34072: PUSH
34073: LD_INT 10500
34075: LESS
34076: IFFALSE 34084
34078: PUSH
34079: LD_EXP 9
34083: AND
34084: IFFALSE 34111
34086: GO 34088
34088: DISABLE
// begin enable ;
34089: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSpawn3Area , true ) ;
34090: LD_INT 1
34092: PPUSH
34093: LD_INT 5
34095: PPUSH
34096: CALL_OW 12
34100: PPUSH
34101: LD_INT 15
34103: PPUSH
34104: LD_INT 1
34106: PPUSH
34107: CALL_OW 55
// end ;
34111: END
// every 0 0$55 trigger ruBase do
34112: LD_EXP 68
34116: IFFALSE 34160
34118: GO 34120
34120: DISABLE
// begin enable ;
34121: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea ) < 3 then
34122: LD_EXP 84
34126: PPUSH
34127: CALL_OW 435
34131: PUSH
34132: LD_INT 3
34134: LESS
34135: IFFALSE 34160
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea , true ) ;
34137: LD_INT 1
34139: PPUSH
34140: LD_INT 5
34142: PPUSH
34143: CALL_OW 12
34147: PPUSH
34148: LD_EXP 84
34152: PPUSH
34153: LD_INT 1
34155: PPUSH
34156: CALL_OW 55
// end ;
34160: END
// every 1 1$05 trigger ruBase2 do
34161: LD_EXP 69
34165: IFFALSE 34209
34167: GO 34169
34169: DISABLE
// begin enable ;
34170: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea2 ) < 3 then
34171: LD_EXP 85
34175: PPUSH
34176: CALL_OW 435
34180: PUSH
34181: LD_INT 3
34183: LESS
34184: IFFALSE 34209
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea2 , true ) ;
34186: LD_INT 1
34188: PPUSH
34189: LD_INT 5
34191: PPUSH
34192: CALL_OW 12
34196: PPUSH
34197: LD_EXP 85
34201: PPUSH
34202: LD_INT 1
34204: PPUSH
34205: CALL_OW 55
// end ; end_of_file end_of_file
34209: END
// export globalGameSaveCounter ; every 0 0$1 do
34210: GO 34212
34212: DISABLE
// begin enable ;
34213: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
34214: LD_STRING updateTimer(
34216: PUSH
34217: LD_OWVAR 1
34221: STR
34222: PUSH
34223: LD_STRING );
34225: STR
34226: PPUSH
34227: CALL_OW 559
// end ;
34231: END
// every 0 0$1 do
34232: GO 34234
34234: DISABLE
// begin globalGameSaveCounter := 0 ;
34235: LD_ADDR_EXP 86
34239: PUSH
34240: LD_INT 0
34242: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
34243: LD_STRING setGameSaveCounter(0)
34245: PPUSH
34246: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
34250: LD_STRING initStreamRollete();
34252: PPUSH
34253: CALL_OW 559
// InitStreamMode ;
34257: CALL 35602 0 0
// DefineStreamItems ( false ) ;
34261: LD_INT 0
34263: PPUSH
34264: CALL 36066 0 1
// end ;
34268: END
// export function SOS_MapStart ( ) ; begin
34269: LD_INT 0
34271: PPUSH
// if streamModeActive then
34272: LD_EXP 87
34276: IFFALSE 34285
// DefineStreamItems ( true ) ;
34278: LD_INT 1
34280: PPUSH
34281: CALL 36066 0 1
// UpdateLuaVariables ( ) ;
34285: CALL 34302 0 0
// UpdateFactoryWaypoints ( ) ;
34289: CALL 49188 0 0
// UpdateWarehouseGatheringPoints ( ) ;
34293: CALL 49440 0 0
// end ;
34297: LD_VAR 0 1
34301: RET
// function UpdateLuaVariables ( ) ; begin
34302: LD_INT 0
34304: PPUSH
// if globalGameSaveCounter then
34305: LD_EXP 86
34309: IFFALSE 34343
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
34311: LD_ADDR_EXP 86
34315: PUSH
34316: LD_EXP 86
34320: PPUSH
34321: CALL 95220 0 1
34325: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
34326: LD_STRING setGameSaveCounter(
34328: PUSH
34329: LD_EXP 86
34333: STR
34334: PUSH
34335: LD_STRING )
34337: STR
34338: PPUSH
34339: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
34343: LD_STRING setGameDifficulty(
34345: PUSH
34346: LD_OWVAR 67
34350: STR
34351: PUSH
34352: LD_STRING )
34354: STR
34355: PPUSH
34356: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
34360: LD_STRING displayDifficulty(
34362: PUSH
34363: LD_OWVAR 67
34367: STR
34368: PUSH
34369: LD_STRING )
34371: STR
34372: PPUSH
34373: CALL_OW 559
// end ;
34377: LD_VAR 0 1
34381: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34382: LD_INT 0
34384: PPUSH
// if p2 = stream_mode then
34385: LD_VAR 0 2
34389: PUSH
34390: LD_INT 100
34392: EQUAL
34393: IFFALSE 35396
// begin if not StreamModeActive then
34395: LD_EXP 87
34399: NOT
34400: IFFALSE 34410
// StreamModeActive := true ;
34402: LD_ADDR_EXP 87
34406: PUSH
34407: LD_INT 1
34409: ST_TO_ADDR
// if p3 = 0 then
34410: LD_VAR 0 3
34414: PUSH
34415: LD_INT 0
34417: EQUAL
34418: IFFALSE 34424
// InitStreamMode ;
34420: CALL 35602 0 0
// if p3 = 1 then
34424: LD_VAR 0 3
34428: PUSH
34429: LD_INT 1
34431: EQUAL
34432: IFFALSE 34442
// sRocket := true ;
34434: LD_ADDR_EXP 92
34438: PUSH
34439: LD_INT 1
34441: ST_TO_ADDR
// if p3 = 2 then
34442: LD_VAR 0 3
34446: PUSH
34447: LD_INT 2
34449: EQUAL
34450: IFFALSE 34460
// sSpeed := true ;
34452: LD_ADDR_EXP 91
34456: PUSH
34457: LD_INT 1
34459: ST_TO_ADDR
// if p3 = 3 then
34460: LD_VAR 0 3
34464: PUSH
34465: LD_INT 3
34467: EQUAL
34468: IFFALSE 34478
// sEngine := true ;
34470: LD_ADDR_EXP 93
34474: PUSH
34475: LD_INT 1
34477: ST_TO_ADDR
// if p3 = 4 then
34478: LD_VAR 0 3
34482: PUSH
34483: LD_INT 4
34485: EQUAL
34486: IFFALSE 34496
// sSpec := true ;
34488: LD_ADDR_EXP 90
34492: PUSH
34493: LD_INT 1
34495: ST_TO_ADDR
// if p3 = 5 then
34496: LD_VAR 0 3
34500: PUSH
34501: LD_INT 5
34503: EQUAL
34504: IFFALSE 34514
// sLevel := true ;
34506: LD_ADDR_EXP 94
34510: PUSH
34511: LD_INT 1
34513: ST_TO_ADDR
// if p3 = 6 then
34514: LD_VAR 0 3
34518: PUSH
34519: LD_INT 6
34521: EQUAL
34522: IFFALSE 34532
// sArmoury := true ;
34524: LD_ADDR_EXP 95
34528: PUSH
34529: LD_INT 1
34531: ST_TO_ADDR
// if p3 = 7 then
34532: LD_VAR 0 3
34536: PUSH
34537: LD_INT 7
34539: EQUAL
34540: IFFALSE 34550
// sRadar := true ;
34542: LD_ADDR_EXP 96
34546: PUSH
34547: LD_INT 1
34549: ST_TO_ADDR
// if p3 = 8 then
34550: LD_VAR 0 3
34554: PUSH
34555: LD_INT 8
34557: EQUAL
34558: IFFALSE 34568
// sBunker := true ;
34560: LD_ADDR_EXP 97
34564: PUSH
34565: LD_INT 1
34567: ST_TO_ADDR
// if p3 = 9 then
34568: LD_VAR 0 3
34572: PUSH
34573: LD_INT 9
34575: EQUAL
34576: IFFALSE 34586
// sHack := true ;
34578: LD_ADDR_EXP 98
34582: PUSH
34583: LD_INT 1
34585: ST_TO_ADDR
// if p3 = 10 then
34586: LD_VAR 0 3
34590: PUSH
34591: LD_INT 10
34593: EQUAL
34594: IFFALSE 34604
// sFire := true ;
34596: LD_ADDR_EXP 99
34600: PUSH
34601: LD_INT 1
34603: ST_TO_ADDR
// if p3 = 11 then
34604: LD_VAR 0 3
34608: PUSH
34609: LD_INT 11
34611: EQUAL
34612: IFFALSE 34622
// sRefresh := true ;
34614: LD_ADDR_EXP 100
34618: PUSH
34619: LD_INT 1
34621: ST_TO_ADDR
// if p3 = 12 then
34622: LD_VAR 0 3
34626: PUSH
34627: LD_INT 12
34629: EQUAL
34630: IFFALSE 34640
// sExp := true ;
34632: LD_ADDR_EXP 101
34636: PUSH
34637: LD_INT 1
34639: ST_TO_ADDR
// if p3 = 13 then
34640: LD_VAR 0 3
34644: PUSH
34645: LD_INT 13
34647: EQUAL
34648: IFFALSE 34658
// sDepot := true ;
34650: LD_ADDR_EXP 102
34654: PUSH
34655: LD_INT 1
34657: ST_TO_ADDR
// if p3 = 14 then
34658: LD_VAR 0 3
34662: PUSH
34663: LD_INT 14
34665: EQUAL
34666: IFFALSE 34676
// sFlag := true ;
34668: LD_ADDR_EXP 103
34672: PUSH
34673: LD_INT 1
34675: ST_TO_ADDR
// if p3 = 15 then
34676: LD_VAR 0 3
34680: PUSH
34681: LD_INT 15
34683: EQUAL
34684: IFFALSE 34694
// sKamikadze := true ;
34686: LD_ADDR_EXP 111
34690: PUSH
34691: LD_INT 1
34693: ST_TO_ADDR
// if p3 = 16 then
34694: LD_VAR 0 3
34698: PUSH
34699: LD_INT 16
34701: EQUAL
34702: IFFALSE 34712
// sTroll := true ;
34704: LD_ADDR_EXP 112
34708: PUSH
34709: LD_INT 1
34711: ST_TO_ADDR
// if p3 = 17 then
34712: LD_VAR 0 3
34716: PUSH
34717: LD_INT 17
34719: EQUAL
34720: IFFALSE 34730
// sSlow := true ;
34722: LD_ADDR_EXP 113
34726: PUSH
34727: LD_INT 1
34729: ST_TO_ADDR
// if p3 = 18 then
34730: LD_VAR 0 3
34734: PUSH
34735: LD_INT 18
34737: EQUAL
34738: IFFALSE 34748
// sLack := true ;
34740: LD_ADDR_EXP 114
34744: PUSH
34745: LD_INT 1
34747: ST_TO_ADDR
// if p3 = 19 then
34748: LD_VAR 0 3
34752: PUSH
34753: LD_INT 19
34755: EQUAL
34756: IFFALSE 34766
// sTank := true ;
34758: LD_ADDR_EXP 116
34762: PUSH
34763: LD_INT 1
34765: ST_TO_ADDR
// if p3 = 20 then
34766: LD_VAR 0 3
34770: PUSH
34771: LD_INT 20
34773: EQUAL
34774: IFFALSE 34784
// sRemote := true ;
34776: LD_ADDR_EXP 117
34780: PUSH
34781: LD_INT 1
34783: ST_TO_ADDR
// if p3 = 21 then
34784: LD_VAR 0 3
34788: PUSH
34789: LD_INT 21
34791: EQUAL
34792: IFFALSE 34802
// sPowell := true ;
34794: LD_ADDR_EXP 118
34798: PUSH
34799: LD_INT 1
34801: ST_TO_ADDR
// if p3 = 22 then
34802: LD_VAR 0 3
34806: PUSH
34807: LD_INT 22
34809: EQUAL
34810: IFFALSE 34820
// sTeleport := true ;
34812: LD_ADDR_EXP 121
34816: PUSH
34817: LD_INT 1
34819: ST_TO_ADDR
// if p3 = 23 then
34820: LD_VAR 0 3
34824: PUSH
34825: LD_INT 23
34827: EQUAL
34828: IFFALSE 34838
// sOilTower := true ;
34830: LD_ADDR_EXP 123
34834: PUSH
34835: LD_INT 1
34837: ST_TO_ADDR
// if p3 = 24 then
34838: LD_VAR 0 3
34842: PUSH
34843: LD_INT 24
34845: EQUAL
34846: IFFALSE 34856
// sShovel := true ;
34848: LD_ADDR_EXP 124
34852: PUSH
34853: LD_INT 1
34855: ST_TO_ADDR
// if p3 = 25 then
34856: LD_VAR 0 3
34860: PUSH
34861: LD_INT 25
34863: EQUAL
34864: IFFALSE 34874
// sSheik := true ;
34866: LD_ADDR_EXP 125
34870: PUSH
34871: LD_INT 1
34873: ST_TO_ADDR
// if p3 = 26 then
34874: LD_VAR 0 3
34878: PUSH
34879: LD_INT 26
34881: EQUAL
34882: IFFALSE 34892
// sEarthquake := true ;
34884: LD_ADDR_EXP 127
34888: PUSH
34889: LD_INT 1
34891: ST_TO_ADDR
// if p3 = 27 then
34892: LD_VAR 0 3
34896: PUSH
34897: LD_INT 27
34899: EQUAL
34900: IFFALSE 34910
// sAI := true ;
34902: LD_ADDR_EXP 128
34906: PUSH
34907: LD_INT 1
34909: ST_TO_ADDR
// if p3 = 28 then
34910: LD_VAR 0 3
34914: PUSH
34915: LD_INT 28
34917: EQUAL
34918: IFFALSE 34928
// sCargo := true ;
34920: LD_ADDR_EXP 131
34924: PUSH
34925: LD_INT 1
34927: ST_TO_ADDR
// if p3 = 29 then
34928: LD_VAR 0 3
34932: PUSH
34933: LD_INT 29
34935: EQUAL
34936: IFFALSE 34946
// sDLaser := true ;
34938: LD_ADDR_EXP 132
34942: PUSH
34943: LD_INT 1
34945: ST_TO_ADDR
// if p3 = 30 then
34946: LD_VAR 0 3
34950: PUSH
34951: LD_INT 30
34953: EQUAL
34954: IFFALSE 34964
// sExchange := true ;
34956: LD_ADDR_EXP 133
34960: PUSH
34961: LD_INT 1
34963: ST_TO_ADDR
// if p3 = 31 then
34964: LD_VAR 0 3
34968: PUSH
34969: LD_INT 31
34971: EQUAL
34972: IFFALSE 34982
// sFac := true ;
34974: LD_ADDR_EXP 134
34978: PUSH
34979: LD_INT 1
34981: ST_TO_ADDR
// if p3 = 32 then
34982: LD_VAR 0 3
34986: PUSH
34987: LD_INT 32
34989: EQUAL
34990: IFFALSE 35000
// sPower := true ;
34992: LD_ADDR_EXP 135
34996: PUSH
34997: LD_INT 1
34999: ST_TO_ADDR
// if p3 = 33 then
35000: LD_VAR 0 3
35004: PUSH
35005: LD_INT 33
35007: EQUAL
35008: IFFALSE 35018
// sRandom := true ;
35010: LD_ADDR_EXP 136
35014: PUSH
35015: LD_INT 1
35017: ST_TO_ADDR
// if p3 = 34 then
35018: LD_VAR 0 3
35022: PUSH
35023: LD_INT 34
35025: EQUAL
35026: IFFALSE 35036
// sShield := true ;
35028: LD_ADDR_EXP 137
35032: PUSH
35033: LD_INT 1
35035: ST_TO_ADDR
// if p3 = 35 then
35036: LD_VAR 0 3
35040: PUSH
35041: LD_INT 35
35043: EQUAL
35044: IFFALSE 35054
// sTime := true ;
35046: LD_ADDR_EXP 138
35050: PUSH
35051: LD_INT 1
35053: ST_TO_ADDR
// if p3 = 36 then
35054: LD_VAR 0 3
35058: PUSH
35059: LD_INT 36
35061: EQUAL
35062: IFFALSE 35072
// sTools := true ;
35064: LD_ADDR_EXP 139
35068: PUSH
35069: LD_INT 1
35071: ST_TO_ADDR
// if p3 = 101 then
35072: LD_VAR 0 3
35076: PUSH
35077: LD_INT 101
35079: EQUAL
35080: IFFALSE 35090
// sSold := true ;
35082: LD_ADDR_EXP 104
35086: PUSH
35087: LD_INT 1
35089: ST_TO_ADDR
// if p3 = 102 then
35090: LD_VAR 0 3
35094: PUSH
35095: LD_INT 102
35097: EQUAL
35098: IFFALSE 35108
// sDiff := true ;
35100: LD_ADDR_EXP 105
35104: PUSH
35105: LD_INT 1
35107: ST_TO_ADDR
// if p3 = 103 then
35108: LD_VAR 0 3
35112: PUSH
35113: LD_INT 103
35115: EQUAL
35116: IFFALSE 35126
// sFog := true ;
35118: LD_ADDR_EXP 108
35122: PUSH
35123: LD_INT 1
35125: ST_TO_ADDR
// if p3 = 104 then
35126: LD_VAR 0 3
35130: PUSH
35131: LD_INT 104
35133: EQUAL
35134: IFFALSE 35144
// sReset := true ;
35136: LD_ADDR_EXP 109
35140: PUSH
35141: LD_INT 1
35143: ST_TO_ADDR
// if p3 = 105 then
35144: LD_VAR 0 3
35148: PUSH
35149: LD_INT 105
35151: EQUAL
35152: IFFALSE 35162
// sSun := true ;
35154: LD_ADDR_EXP 110
35158: PUSH
35159: LD_INT 1
35161: ST_TO_ADDR
// if p3 = 106 then
35162: LD_VAR 0 3
35166: PUSH
35167: LD_INT 106
35169: EQUAL
35170: IFFALSE 35180
// sTiger := true ;
35172: LD_ADDR_EXP 106
35176: PUSH
35177: LD_INT 1
35179: ST_TO_ADDR
// if p3 = 107 then
35180: LD_VAR 0 3
35184: PUSH
35185: LD_INT 107
35187: EQUAL
35188: IFFALSE 35198
// sBomb := true ;
35190: LD_ADDR_EXP 107
35194: PUSH
35195: LD_INT 1
35197: ST_TO_ADDR
// if p3 = 108 then
35198: LD_VAR 0 3
35202: PUSH
35203: LD_INT 108
35205: EQUAL
35206: IFFALSE 35216
// sWound := true ;
35208: LD_ADDR_EXP 115
35212: PUSH
35213: LD_INT 1
35215: ST_TO_ADDR
// if p3 = 109 then
35216: LD_VAR 0 3
35220: PUSH
35221: LD_INT 109
35223: EQUAL
35224: IFFALSE 35234
// sBetray := true ;
35226: LD_ADDR_EXP 119
35230: PUSH
35231: LD_INT 1
35233: ST_TO_ADDR
// if p3 = 110 then
35234: LD_VAR 0 3
35238: PUSH
35239: LD_INT 110
35241: EQUAL
35242: IFFALSE 35252
// sContamin := true ;
35244: LD_ADDR_EXP 120
35248: PUSH
35249: LD_INT 1
35251: ST_TO_ADDR
// if p3 = 111 then
35252: LD_VAR 0 3
35256: PUSH
35257: LD_INT 111
35259: EQUAL
35260: IFFALSE 35270
// sOil := true ;
35262: LD_ADDR_EXP 122
35266: PUSH
35267: LD_INT 1
35269: ST_TO_ADDR
// if p3 = 112 then
35270: LD_VAR 0 3
35274: PUSH
35275: LD_INT 112
35277: EQUAL
35278: IFFALSE 35288
// sStu := true ;
35280: LD_ADDR_EXP 126
35284: PUSH
35285: LD_INT 1
35287: ST_TO_ADDR
// if p3 = 113 then
35288: LD_VAR 0 3
35292: PUSH
35293: LD_INT 113
35295: EQUAL
35296: IFFALSE 35306
// sBazooka := true ;
35298: LD_ADDR_EXP 129
35302: PUSH
35303: LD_INT 1
35305: ST_TO_ADDR
// if p3 = 114 then
35306: LD_VAR 0 3
35310: PUSH
35311: LD_INT 114
35313: EQUAL
35314: IFFALSE 35324
// sMortar := true ;
35316: LD_ADDR_EXP 130
35320: PUSH
35321: LD_INT 1
35323: ST_TO_ADDR
// if p3 = 115 then
35324: LD_VAR 0 3
35328: PUSH
35329: LD_INT 115
35331: EQUAL
35332: IFFALSE 35342
// sRanger := true ;
35334: LD_ADDR_EXP 140
35338: PUSH
35339: LD_INT 1
35341: ST_TO_ADDR
// if p3 = 116 then
35342: LD_VAR 0 3
35346: PUSH
35347: LD_INT 116
35349: EQUAL
35350: IFFALSE 35360
// sComputer := true ;
35352: LD_ADDR_EXP 141
35356: PUSH
35357: LD_INT 1
35359: ST_TO_ADDR
// if p3 = 117 then
35360: LD_VAR 0 3
35364: PUSH
35365: LD_INT 117
35367: EQUAL
35368: IFFALSE 35378
// s30 := true ;
35370: LD_ADDR_EXP 142
35374: PUSH
35375: LD_INT 1
35377: ST_TO_ADDR
// if p3 = 118 then
35378: LD_VAR 0 3
35382: PUSH
35383: LD_INT 118
35385: EQUAL
35386: IFFALSE 35396
// s60 := true ;
35388: LD_ADDR_EXP 143
35392: PUSH
35393: LD_INT 1
35395: ST_TO_ADDR
// end ; if p2 = hack_mode then
35396: LD_VAR 0 2
35400: PUSH
35401: LD_INT 101
35403: EQUAL
35404: IFFALSE 35532
// begin case p3 of 1 :
35406: LD_VAR 0 3
35410: PUSH
35411: LD_INT 1
35413: DOUBLE
35414: EQUAL
35415: IFTRUE 35419
35417: GO 35426
35419: POP
// hHackUnlimitedResources ; 2 :
35420: CALL 47795 0 0
35424: GO 35532
35426: LD_INT 2
35428: DOUBLE
35429: EQUAL
35430: IFTRUE 35434
35432: GO 35441
35434: POP
// hHackSetLevel10 ; 3 :
35435: CALL 47928 0 0
35439: GO 35532
35441: LD_INT 3
35443: DOUBLE
35444: EQUAL
35445: IFTRUE 35449
35447: GO 35456
35449: POP
// hHackSetLevel10YourUnits ; 4 :
35450: CALL 48013 0 0
35454: GO 35532
35456: LD_INT 4
35458: DOUBLE
35459: EQUAL
35460: IFTRUE 35464
35462: GO 35471
35464: POP
// hHackInvincible ; 5 :
35465: CALL 48461 0 0
35469: GO 35532
35471: LD_INT 5
35473: DOUBLE
35474: EQUAL
35475: IFTRUE 35479
35477: GO 35486
35479: POP
// hHackInvisible ; 6 :
35480: CALL 48572 0 0
35484: GO 35532
35486: LD_INT 6
35488: DOUBLE
35489: EQUAL
35490: IFTRUE 35494
35492: GO 35501
35494: POP
// hHackChangeYourSide ; 7 :
35495: CALL 48629 0 0
35499: GO 35532
35501: LD_INT 7
35503: DOUBLE
35504: EQUAL
35505: IFTRUE 35509
35507: GO 35516
35509: POP
// hHackChangeUnitSide ; 8 :
35510: CALL 48671 0 0
35514: GO 35532
35516: LD_INT 8
35518: DOUBLE
35519: EQUAL
35520: IFTRUE 35524
35522: GO 35531
35524: POP
// hHackFog ; end ;
35525: CALL 48772 0 0
35529: GO 35532
35531: POP
// end ; if p2 = game_save_mode then
35532: LD_VAR 0 2
35536: PUSH
35537: LD_INT 102
35539: EQUAL
35540: IFFALSE 35597
// begin if p3 = 1 then
35542: LD_VAR 0 3
35546: PUSH
35547: LD_INT 1
35549: EQUAL
35550: IFFALSE 35562
// globalGameSaveCounter := p4 ;
35552: LD_ADDR_EXP 86
35556: PUSH
35557: LD_VAR 0 4
35561: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
35562: LD_VAR 0 3
35566: PUSH
35567: LD_INT 2
35569: EQUAL
35570: IFFALSE 35578
35572: PUSH
35573: LD_EXP 86
35577: AND
35578: IFFALSE 35597
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
35580: LD_STRING setGameSaveCounter(
35582: PUSH
35583: LD_EXP 86
35587: STR
35588: PUSH
35589: LD_STRING )
35591: STR
35592: PPUSH
35593: CALL_OW 559
// end ; end ;
35597: LD_VAR 0 7
35601: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
35602: LD_INT 0
35604: PPUSH
// streamModeActive := false ;
35605: LD_ADDR_EXP 87
35609: PUSH
35610: LD_INT 0
35612: ST_TO_ADDR
// normalCounter := 36 ;
35613: LD_ADDR_EXP 88
35617: PUSH
35618: LD_INT 36
35620: ST_TO_ADDR
// hardcoreCounter := 18 ;
35621: LD_ADDR_EXP 89
35625: PUSH
35626: LD_INT 18
35628: ST_TO_ADDR
// sRocket := false ;
35629: LD_ADDR_EXP 92
35633: PUSH
35634: LD_INT 0
35636: ST_TO_ADDR
// sSpeed := false ;
35637: LD_ADDR_EXP 91
35641: PUSH
35642: LD_INT 0
35644: ST_TO_ADDR
// sEngine := false ;
35645: LD_ADDR_EXP 93
35649: PUSH
35650: LD_INT 0
35652: ST_TO_ADDR
// sSpec := false ;
35653: LD_ADDR_EXP 90
35657: PUSH
35658: LD_INT 0
35660: ST_TO_ADDR
// sLevel := false ;
35661: LD_ADDR_EXP 94
35665: PUSH
35666: LD_INT 0
35668: ST_TO_ADDR
// sArmoury := false ;
35669: LD_ADDR_EXP 95
35673: PUSH
35674: LD_INT 0
35676: ST_TO_ADDR
// sRadar := false ;
35677: LD_ADDR_EXP 96
35681: PUSH
35682: LD_INT 0
35684: ST_TO_ADDR
// sBunker := false ;
35685: LD_ADDR_EXP 97
35689: PUSH
35690: LD_INT 0
35692: ST_TO_ADDR
// sHack := false ;
35693: LD_ADDR_EXP 98
35697: PUSH
35698: LD_INT 0
35700: ST_TO_ADDR
// sFire := false ;
35701: LD_ADDR_EXP 99
35705: PUSH
35706: LD_INT 0
35708: ST_TO_ADDR
// sRefresh := false ;
35709: LD_ADDR_EXP 100
35713: PUSH
35714: LD_INT 0
35716: ST_TO_ADDR
// sExp := false ;
35717: LD_ADDR_EXP 101
35721: PUSH
35722: LD_INT 0
35724: ST_TO_ADDR
// sDepot := false ;
35725: LD_ADDR_EXP 102
35729: PUSH
35730: LD_INT 0
35732: ST_TO_ADDR
// sFlag := false ;
35733: LD_ADDR_EXP 103
35737: PUSH
35738: LD_INT 0
35740: ST_TO_ADDR
// sKamikadze := false ;
35741: LD_ADDR_EXP 111
35745: PUSH
35746: LD_INT 0
35748: ST_TO_ADDR
// sTroll := false ;
35749: LD_ADDR_EXP 112
35753: PUSH
35754: LD_INT 0
35756: ST_TO_ADDR
// sSlow := false ;
35757: LD_ADDR_EXP 113
35761: PUSH
35762: LD_INT 0
35764: ST_TO_ADDR
// sLack := false ;
35765: LD_ADDR_EXP 114
35769: PUSH
35770: LD_INT 0
35772: ST_TO_ADDR
// sTank := false ;
35773: LD_ADDR_EXP 116
35777: PUSH
35778: LD_INT 0
35780: ST_TO_ADDR
// sRemote := false ;
35781: LD_ADDR_EXP 117
35785: PUSH
35786: LD_INT 0
35788: ST_TO_ADDR
// sPowell := false ;
35789: LD_ADDR_EXP 118
35793: PUSH
35794: LD_INT 0
35796: ST_TO_ADDR
// sTeleport := false ;
35797: LD_ADDR_EXP 121
35801: PUSH
35802: LD_INT 0
35804: ST_TO_ADDR
// sOilTower := false ;
35805: LD_ADDR_EXP 123
35809: PUSH
35810: LD_INT 0
35812: ST_TO_ADDR
// sShovel := false ;
35813: LD_ADDR_EXP 124
35817: PUSH
35818: LD_INT 0
35820: ST_TO_ADDR
// sSheik := false ;
35821: LD_ADDR_EXP 125
35825: PUSH
35826: LD_INT 0
35828: ST_TO_ADDR
// sEarthquake := false ;
35829: LD_ADDR_EXP 127
35833: PUSH
35834: LD_INT 0
35836: ST_TO_ADDR
// sAI := false ;
35837: LD_ADDR_EXP 128
35841: PUSH
35842: LD_INT 0
35844: ST_TO_ADDR
// sCargo := false ;
35845: LD_ADDR_EXP 131
35849: PUSH
35850: LD_INT 0
35852: ST_TO_ADDR
// sDLaser := false ;
35853: LD_ADDR_EXP 132
35857: PUSH
35858: LD_INT 0
35860: ST_TO_ADDR
// sExchange := false ;
35861: LD_ADDR_EXP 133
35865: PUSH
35866: LD_INT 0
35868: ST_TO_ADDR
// sFac := false ;
35869: LD_ADDR_EXP 134
35873: PUSH
35874: LD_INT 0
35876: ST_TO_ADDR
// sPower := false ;
35877: LD_ADDR_EXP 135
35881: PUSH
35882: LD_INT 0
35884: ST_TO_ADDR
// sRandom := false ;
35885: LD_ADDR_EXP 136
35889: PUSH
35890: LD_INT 0
35892: ST_TO_ADDR
// sShield := false ;
35893: LD_ADDR_EXP 137
35897: PUSH
35898: LD_INT 0
35900: ST_TO_ADDR
// sTime := false ;
35901: LD_ADDR_EXP 138
35905: PUSH
35906: LD_INT 0
35908: ST_TO_ADDR
// sTools := false ;
35909: LD_ADDR_EXP 139
35913: PUSH
35914: LD_INT 0
35916: ST_TO_ADDR
// sSold := false ;
35917: LD_ADDR_EXP 104
35921: PUSH
35922: LD_INT 0
35924: ST_TO_ADDR
// sDiff := false ;
35925: LD_ADDR_EXP 105
35929: PUSH
35930: LD_INT 0
35932: ST_TO_ADDR
// sFog := false ;
35933: LD_ADDR_EXP 108
35937: PUSH
35938: LD_INT 0
35940: ST_TO_ADDR
// sReset := false ;
35941: LD_ADDR_EXP 109
35945: PUSH
35946: LD_INT 0
35948: ST_TO_ADDR
// sSun := false ;
35949: LD_ADDR_EXP 110
35953: PUSH
35954: LD_INT 0
35956: ST_TO_ADDR
// sTiger := false ;
35957: LD_ADDR_EXP 106
35961: PUSH
35962: LD_INT 0
35964: ST_TO_ADDR
// sBomb := false ;
35965: LD_ADDR_EXP 107
35969: PUSH
35970: LD_INT 0
35972: ST_TO_ADDR
// sWound := false ;
35973: LD_ADDR_EXP 115
35977: PUSH
35978: LD_INT 0
35980: ST_TO_ADDR
// sBetray := false ;
35981: LD_ADDR_EXP 119
35985: PUSH
35986: LD_INT 0
35988: ST_TO_ADDR
// sContamin := false ;
35989: LD_ADDR_EXP 120
35993: PUSH
35994: LD_INT 0
35996: ST_TO_ADDR
// sOil := false ;
35997: LD_ADDR_EXP 122
36001: PUSH
36002: LD_INT 0
36004: ST_TO_ADDR
// sStu := false ;
36005: LD_ADDR_EXP 126
36009: PUSH
36010: LD_INT 0
36012: ST_TO_ADDR
// sBazooka := false ;
36013: LD_ADDR_EXP 129
36017: PUSH
36018: LD_INT 0
36020: ST_TO_ADDR
// sMortar := false ;
36021: LD_ADDR_EXP 130
36025: PUSH
36026: LD_INT 0
36028: ST_TO_ADDR
// sRanger := false ;
36029: LD_ADDR_EXP 140
36033: PUSH
36034: LD_INT 0
36036: ST_TO_ADDR
// sComputer := false ;
36037: LD_ADDR_EXP 141
36041: PUSH
36042: LD_INT 0
36044: ST_TO_ADDR
// s30 := false ;
36045: LD_ADDR_EXP 142
36049: PUSH
36050: LD_INT 0
36052: ST_TO_ADDR
// s60 := false ;
36053: LD_ADDR_EXP 143
36057: PUSH
36058: LD_INT 0
36060: ST_TO_ADDR
// end ;
36061: LD_VAR 0 1
36065: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
36066: LD_INT 0
36068: PPUSH
36069: PPUSH
36070: PPUSH
36071: PPUSH
36072: PPUSH
36073: PPUSH
36074: PPUSH
// result := [ ] ;
36075: LD_ADDR_VAR 0 2
36079: PUSH
36080: EMPTY
36081: ST_TO_ADDR
// if campaign_id = 1 then
36082: LD_OWVAR 69
36086: PUSH
36087: LD_INT 1
36089: EQUAL
36090: IFFALSE 39256
// begin case mission_number of 1 :
36092: LD_OWVAR 70
36096: PUSH
36097: LD_INT 1
36099: DOUBLE
36100: EQUAL
36101: IFTRUE 36105
36103: GO 36181
36105: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
36106: LD_ADDR_VAR 0 2
36110: PUSH
36111: LD_INT 2
36113: PUSH
36114: LD_INT 4
36116: PUSH
36117: LD_INT 11
36119: PUSH
36120: LD_INT 12
36122: PUSH
36123: LD_INT 15
36125: PUSH
36126: LD_INT 16
36128: PUSH
36129: LD_INT 22
36131: PUSH
36132: LD_INT 23
36134: PUSH
36135: LD_INT 26
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 101
36151: PUSH
36152: LD_INT 102
36154: PUSH
36155: LD_INT 106
36157: PUSH
36158: LD_INT 116
36160: PUSH
36161: LD_INT 117
36163: PUSH
36164: LD_INT 118
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: ST_TO_ADDR
36179: GO 39254
36181: LD_INT 2
36183: DOUBLE
36184: EQUAL
36185: IFTRUE 36189
36187: GO 36273
36189: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
36190: LD_ADDR_VAR 0 2
36194: PUSH
36195: LD_INT 2
36197: PUSH
36198: LD_INT 4
36200: PUSH
36201: LD_INT 11
36203: PUSH
36204: LD_INT 12
36206: PUSH
36207: LD_INT 15
36209: PUSH
36210: LD_INT 16
36212: PUSH
36213: LD_INT 22
36215: PUSH
36216: LD_INT 23
36218: PUSH
36219: LD_INT 26
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 101
36235: PUSH
36236: LD_INT 102
36238: PUSH
36239: LD_INT 105
36241: PUSH
36242: LD_INT 106
36244: PUSH
36245: LD_INT 108
36247: PUSH
36248: LD_INT 116
36250: PUSH
36251: LD_INT 117
36253: PUSH
36254: LD_INT 118
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: ST_TO_ADDR
36271: GO 39254
36273: LD_INT 3
36275: DOUBLE
36276: EQUAL
36277: IFTRUE 36281
36279: GO 36369
36281: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
36282: LD_ADDR_VAR 0 2
36286: PUSH
36287: LD_INT 2
36289: PUSH
36290: LD_INT 4
36292: PUSH
36293: LD_INT 5
36295: PUSH
36296: LD_INT 11
36298: PUSH
36299: LD_INT 12
36301: PUSH
36302: LD_INT 15
36304: PUSH
36305: LD_INT 16
36307: PUSH
36308: LD_INT 22
36310: PUSH
36311: LD_INT 26
36313: PUSH
36314: LD_INT 36
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 101
36331: PUSH
36332: LD_INT 102
36334: PUSH
36335: LD_INT 105
36337: PUSH
36338: LD_INT 106
36340: PUSH
36341: LD_INT 108
36343: PUSH
36344: LD_INT 116
36346: PUSH
36347: LD_INT 117
36349: PUSH
36350: LD_INT 118
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: ST_TO_ADDR
36367: GO 39254
36369: LD_INT 4
36371: DOUBLE
36372: EQUAL
36373: IFTRUE 36377
36375: GO 36473
36377: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
36378: LD_ADDR_VAR 0 2
36382: PUSH
36383: LD_INT 2
36385: PUSH
36386: LD_INT 4
36388: PUSH
36389: LD_INT 5
36391: PUSH
36392: LD_INT 8
36394: PUSH
36395: LD_INT 11
36397: PUSH
36398: LD_INT 12
36400: PUSH
36401: LD_INT 15
36403: PUSH
36404: LD_INT 16
36406: PUSH
36407: LD_INT 22
36409: PUSH
36410: LD_INT 23
36412: PUSH
36413: LD_INT 26
36415: PUSH
36416: LD_INT 36
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 101
36435: PUSH
36436: LD_INT 102
36438: PUSH
36439: LD_INT 105
36441: PUSH
36442: LD_INT 106
36444: PUSH
36445: LD_INT 108
36447: PUSH
36448: LD_INT 116
36450: PUSH
36451: LD_INT 117
36453: PUSH
36454: LD_INT 118
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: ST_TO_ADDR
36471: GO 39254
36473: LD_INT 5
36475: DOUBLE
36476: EQUAL
36477: IFTRUE 36481
36479: GO 36593
36481: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
36482: LD_ADDR_VAR 0 2
36486: PUSH
36487: LD_INT 2
36489: PUSH
36490: LD_INT 4
36492: PUSH
36493: LD_INT 5
36495: PUSH
36496: LD_INT 6
36498: PUSH
36499: LD_INT 8
36501: PUSH
36502: LD_INT 11
36504: PUSH
36505: LD_INT 12
36507: PUSH
36508: LD_INT 15
36510: PUSH
36511: LD_INT 16
36513: PUSH
36514: LD_INT 22
36516: PUSH
36517: LD_INT 23
36519: PUSH
36520: LD_INT 25
36522: PUSH
36523: LD_INT 26
36525: PUSH
36526: LD_INT 36
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 101
36547: PUSH
36548: LD_INT 102
36550: PUSH
36551: LD_INT 105
36553: PUSH
36554: LD_INT 106
36556: PUSH
36557: LD_INT 108
36559: PUSH
36560: LD_INT 109
36562: PUSH
36563: LD_INT 112
36565: PUSH
36566: LD_INT 116
36568: PUSH
36569: LD_INT 117
36571: PUSH
36572: LD_INT 118
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: ST_TO_ADDR
36591: GO 39254
36593: LD_INT 6
36595: DOUBLE
36596: EQUAL
36597: IFTRUE 36601
36599: GO 36733
36601: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
36602: LD_ADDR_VAR 0 2
36606: PUSH
36607: LD_INT 2
36609: PUSH
36610: LD_INT 4
36612: PUSH
36613: LD_INT 5
36615: PUSH
36616: LD_INT 6
36618: PUSH
36619: LD_INT 8
36621: PUSH
36622: LD_INT 11
36624: PUSH
36625: LD_INT 12
36627: PUSH
36628: LD_INT 15
36630: PUSH
36631: LD_INT 16
36633: PUSH
36634: LD_INT 20
36636: PUSH
36637: LD_INT 21
36639: PUSH
36640: LD_INT 22
36642: PUSH
36643: LD_INT 23
36645: PUSH
36646: LD_INT 25
36648: PUSH
36649: LD_INT 26
36651: PUSH
36652: LD_INT 30
36654: PUSH
36655: LD_INT 31
36657: PUSH
36658: LD_INT 32
36660: PUSH
36661: LD_INT 36
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 101
36687: PUSH
36688: LD_INT 102
36690: PUSH
36691: LD_INT 105
36693: PUSH
36694: LD_INT 106
36696: PUSH
36697: LD_INT 108
36699: PUSH
36700: LD_INT 109
36702: PUSH
36703: LD_INT 112
36705: PUSH
36706: LD_INT 116
36708: PUSH
36709: LD_INT 117
36711: PUSH
36712: LD_INT 118
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: ST_TO_ADDR
36731: GO 39254
36733: LD_INT 7
36735: DOUBLE
36736: EQUAL
36737: IFTRUE 36741
36739: GO 36853
36741: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
36742: LD_ADDR_VAR 0 2
36746: PUSH
36747: LD_INT 2
36749: PUSH
36750: LD_INT 4
36752: PUSH
36753: LD_INT 5
36755: PUSH
36756: LD_INT 7
36758: PUSH
36759: LD_INT 11
36761: PUSH
36762: LD_INT 12
36764: PUSH
36765: LD_INT 15
36767: PUSH
36768: LD_INT 16
36770: PUSH
36771: LD_INT 20
36773: PUSH
36774: LD_INT 21
36776: PUSH
36777: LD_INT 22
36779: PUSH
36780: LD_INT 23
36782: PUSH
36783: LD_INT 25
36785: PUSH
36786: LD_INT 26
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 101
36807: PUSH
36808: LD_INT 102
36810: PUSH
36811: LD_INT 103
36813: PUSH
36814: LD_INT 105
36816: PUSH
36817: LD_INT 106
36819: PUSH
36820: LD_INT 108
36822: PUSH
36823: LD_INT 112
36825: PUSH
36826: LD_INT 116
36828: PUSH
36829: LD_INT 117
36831: PUSH
36832: LD_INT 118
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: ST_TO_ADDR
36851: GO 39254
36853: LD_INT 8
36855: DOUBLE
36856: EQUAL
36857: IFTRUE 36861
36859: GO 37001
36861: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
36862: LD_ADDR_VAR 0 2
36866: PUSH
36867: LD_INT 2
36869: PUSH
36870: LD_INT 4
36872: PUSH
36873: LD_INT 5
36875: PUSH
36876: LD_INT 6
36878: PUSH
36879: LD_INT 7
36881: PUSH
36882: LD_INT 8
36884: PUSH
36885: LD_INT 11
36887: PUSH
36888: LD_INT 12
36890: PUSH
36891: LD_INT 15
36893: PUSH
36894: LD_INT 16
36896: PUSH
36897: LD_INT 20
36899: PUSH
36900: LD_INT 21
36902: PUSH
36903: LD_INT 22
36905: PUSH
36906: LD_INT 23
36908: PUSH
36909: LD_INT 25
36911: PUSH
36912: LD_INT 26
36914: PUSH
36915: LD_INT 30
36917: PUSH
36918: LD_INT 31
36920: PUSH
36921: LD_INT 32
36923: PUSH
36924: LD_INT 36
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 101
36951: PUSH
36952: LD_INT 102
36954: PUSH
36955: LD_INT 103
36957: PUSH
36958: LD_INT 105
36960: PUSH
36961: LD_INT 106
36963: PUSH
36964: LD_INT 108
36966: PUSH
36967: LD_INT 109
36969: PUSH
36970: LD_INT 112
36972: PUSH
36973: LD_INT 116
36975: PUSH
36976: LD_INT 117
36978: PUSH
36979: LD_INT 118
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: ST_TO_ADDR
36999: GO 39254
37001: LD_INT 9
37003: DOUBLE
37004: EQUAL
37005: IFTRUE 37009
37007: GO 37157
37009: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
37010: LD_ADDR_VAR 0 2
37014: PUSH
37015: LD_INT 2
37017: PUSH
37018: LD_INT 4
37020: PUSH
37021: LD_INT 5
37023: PUSH
37024: LD_INT 6
37026: PUSH
37027: LD_INT 7
37029: PUSH
37030: LD_INT 8
37032: PUSH
37033: LD_INT 11
37035: PUSH
37036: LD_INT 12
37038: PUSH
37039: LD_INT 15
37041: PUSH
37042: LD_INT 16
37044: PUSH
37045: LD_INT 20
37047: PUSH
37048: LD_INT 21
37050: PUSH
37051: LD_INT 22
37053: PUSH
37054: LD_INT 23
37056: PUSH
37057: LD_INT 25
37059: PUSH
37060: LD_INT 26
37062: PUSH
37063: LD_INT 28
37065: PUSH
37066: LD_INT 30
37068: PUSH
37069: LD_INT 31
37071: PUSH
37072: LD_INT 32
37074: PUSH
37075: LD_INT 36
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 101
37103: PUSH
37104: LD_INT 102
37106: PUSH
37107: LD_INT 103
37109: PUSH
37110: LD_INT 105
37112: PUSH
37113: LD_INT 106
37115: PUSH
37116: LD_INT 108
37118: PUSH
37119: LD_INT 109
37121: PUSH
37122: LD_INT 112
37124: PUSH
37125: LD_INT 114
37127: PUSH
37128: LD_INT 116
37130: PUSH
37131: LD_INT 117
37133: PUSH
37134: LD_INT 118
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: ST_TO_ADDR
37155: GO 39254
37157: LD_INT 10
37159: DOUBLE
37160: EQUAL
37161: IFTRUE 37165
37163: GO 37361
37165: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
37166: LD_ADDR_VAR 0 2
37170: PUSH
37171: LD_INT 2
37173: PUSH
37174: LD_INT 4
37176: PUSH
37177: LD_INT 5
37179: PUSH
37180: LD_INT 6
37182: PUSH
37183: LD_INT 7
37185: PUSH
37186: LD_INT 8
37188: PUSH
37189: LD_INT 9
37191: PUSH
37192: LD_INT 10
37194: PUSH
37195: LD_INT 11
37197: PUSH
37198: LD_INT 12
37200: PUSH
37201: LD_INT 13
37203: PUSH
37204: LD_INT 14
37206: PUSH
37207: LD_INT 15
37209: PUSH
37210: LD_INT 16
37212: PUSH
37213: LD_INT 17
37215: PUSH
37216: LD_INT 18
37218: PUSH
37219: LD_INT 19
37221: PUSH
37222: LD_INT 20
37224: PUSH
37225: LD_INT 21
37227: PUSH
37228: LD_INT 22
37230: PUSH
37231: LD_INT 23
37233: PUSH
37234: LD_INT 24
37236: PUSH
37237: LD_INT 25
37239: PUSH
37240: LD_INT 26
37242: PUSH
37243: LD_INT 28
37245: PUSH
37246: LD_INT 30
37248: PUSH
37249: LD_INT 31
37251: PUSH
37252: LD_INT 32
37254: PUSH
37255: LD_INT 36
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 101
37291: PUSH
37292: LD_INT 102
37294: PUSH
37295: LD_INT 103
37297: PUSH
37298: LD_INT 104
37300: PUSH
37301: LD_INT 105
37303: PUSH
37304: LD_INT 106
37306: PUSH
37307: LD_INT 107
37309: PUSH
37310: LD_INT 108
37312: PUSH
37313: LD_INT 109
37315: PUSH
37316: LD_INT 110
37318: PUSH
37319: LD_INT 111
37321: PUSH
37322: LD_INT 112
37324: PUSH
37325: LD_INT 114
37327: PUSH
37328: LD_INT 116
37330: PUSH
37331: LD_INT 117
37333: PUSH
37334: LD_INT 118
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: ST_TO_ADDR
37359: GO 39254
37361: LD_INT 11
37363: DOUBLE
37364: EQUAL
37365: IFTRUE 37369
37367: GO 37573
37369: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
37370: LD_ADDR_VAR 0 2
37374: PUSH
37375: LD_INT 2
37377: PUSH
37378: LD_INT 3
37380: PUSH
37381: LD_INT 4
37383: PUSH
37384: LD_INT 5
37386: PUSH
37387: LD_INT 6
37389: PUSH
37390: LD_INT 7
37392: PUSH
37393: LD_INT 8
37395: PUSH
37396: LD_INT 9
37398: PUSH
37399: LD_INT 10
37401: PUSH
37402: LD_INT 11
37404: PUSH
37405: LD_INT 12
37407: PUSH
37408: LD_INT 13
37410: PUSH
37411: LD_INT 14
37413: PUSH
37414: LD_INT 15
37416: PUSH
37417: LD_INT 16
37419: PUSH
37420: LD_INT 17
37422: PUSH
37423: LD_INT 18
37425: PUSH
37426: LD_INT 19
37428: PUSH
37429: LD_INT 20
37431: PUSH
37432: LD_INT 21
37434: PUSH
37435: LD_INT 22
37437: PUSH
37438: LD_INT 23
37440: PUSH
37441: LD_INT 24
37443: PUSH
37444: LD_INT 25
37446: PUSH
37447: LD_INT 26
37449: PUSH
37450: LD_INT 28
37452: PUSH
37453: LD_INT 30
37455: PUSH
37456: LD_INT 31
37458: PUSH
37459: LD_INT 32
37461: PUSH
37462: LD_INT 34
37464: PUSH
37465: LD_INT 36
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 101
37503: PUSH
37504: LD_INT 102
37506: PUSH
37507: LD_INT 103
37509: PUSH
37510: LD_INT 104
37512: PUSH
37513: LD_INT 105
37515: PUSH
37516: LD_INT 106
37518: PUSH
37519: LD_INT 107
37521: PUSH
37522: LD_INT 108
37524: PUSH
37525: LD_INT 109
37527: PUSH
37528: LD_INT 110
37530: PUSH
37531: LD_INT 111
37533: PUSH
37534: LD_INT 112
37536: PUSH
37537: LD_INT 114
37539: PUSH
37540: LD_INT 116
37542: PUSH
37543: LD_INT 117
37545: PUSH
37546: LD_INT 118
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: ST_TO_ADDR
37571: GO 39254
37573: LD_INT 12
37575: DOUBLE
37576: EQUAL
37577: IFTRUE 37581
37579: GO 37801
37581: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
37582: LD_ADDR_VAR 0 2
37586: PUSH
37587: LD_INT 1
37589: PUSH
37590: LD_INT 2
37592: PUSH
37593: LD_INT 3
37595: PUSH
37596: LD_INT 4
37598: PUSH
37599: LD_INT 5
37601: PUSH
37602: LD_INT 6
37604: PUSH
37605: LD_INT 7
37607: PUSH
37608: LD_INT 8
37610: PUSH
37611: LD_INT 9
37613: PUSH
37614: LD_INT 10
37616: PUSH
37617: LD_INT 11
37619: PUSH
37620: LD_INT 12
37622: PUSH
37623: LD_INT 13
37625: PUSH
37626: LD_INT 14
37628: PUSH
37629: LD_INT 15
37631: PUSH
37632: LD_INT 16
37634: PUSH
37635: LD_INT 17
37637: PUSH
37638: LD_INT 18
37640: PUSH
37641: LD_INT 19
37643: PUSH
37644: LD_INT 20
37646: PUSH
37647: LD_INT 21
37649: PUSH
37650: LD_INT 22
37652: PUSH
37653: LD_INT 23
37655: PUSH
37656: LD_INT 24
37658: PUSH
37659: LD_INT 25
37661: PUSH
37662: LD_INT 26
37664: PUSH
37665: LD_INT 27
37667: PUSH
37668: LD_INT 28
37670: PUSH
37671: LD_INT 30
37673: PUSH
37674: LD_INT 31
37676: PUSH
37677: LD_INT 32
37679: PUSH
37680: LD_INT 33
37682: PUSH
37683: LD_INT 34
37685: PUSH
37686: LD_INT 36
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 101
37727: PUSH
37728: LD_INT 102
37730: PUSH
37731: LD_INT 103
37733: PUSH
37734: LD_INT 104
37736: PUSH
37737: LD_INT 105
37739: PUSH
37740: LD_INT 106
37742: PUSH
37743: LD_INT 107
37745: PUSH
37746: LD_INT 108
37748: PUSH
37749: LD_INT 109
37751: PUSH
37752: LD_INT 110
37754: PUSH
37755: LD_INT 111
37757: PUSH
37758: LD_INT 112
37760: PUSH
37761: LD_INT 113
37763: PUSH
37764: LD_INT 114
37766: PUSH
37767: LD_INT 116
37769: PUSH
37770: LD_INT 117
37772: PUSH
37773: LD_INT 118
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: ST_TO_ADDR
37799: GO 39254
37801: LD_INT 13
37803: DOUBLE
37804: EQUAL
37805: IFTRUE 37809
37807: GO 38017
37809: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
37810: LD_ADDR_VAR 0 2
37814: PUSH
37815: LD_INT 1
37817: PUSH
37818: LD_INT 2
37820: PUSH
37821: LD_INT 3
37823: PUSH
37824: LD_INT 4
37826: PUSH
37827: LD_INT 5
37829: PUSH
37830: LD_INT 8
37832: PUSH
37833: LD_INT 9
37835: PUSH
37836: LD_INT 10
37838: PUSH
37839: LD_INT 11
37841: PUSH
37842: LD_INT 12
37844: PUSH
37845: LD_INT 14
37847: PUSH
37848: LD_INT 15
37850: PUSH
37851: LD_INT 16
37853: PUSH
37854: LD_INT 17
37856: PUSH
37857: LD_INT 18
37859: PUSH
37860: LD_INT 19
37862: PUSH
37863: LD_INT 20
37865: PUSH
37866: LD_INT 21
37868: PUSH
37869: LD_INT 22
37871: PUSH
37872: LD_INT 23
37874: PUSH
37875: LD_INT 24
37877: PUSH
37878: LD_INT 25
37880: PUSH
37881: LD_INT 26
37883: PUSH
37884: LD_INT 27
37886: PUSH
37887: LD_INT 28
37889: PUSH
37890: LD_INT 30
37892: PUSH
37893: LD_INT 31
37895: PUSH
37896: LD_INT 32
37898: PUSH
37899: LD_INT 33
37901: PUSH
37902: LD_INT 34
37904: PUSH
37905: LD_INT 36
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 101
37943: PUSH
37944: LD_INT 102
37946: PUSH
37947: LD_INT 103
37949: PUSH
37950: LD_INT 104
37952: PUSH
37953: LD_INT 105
37955: PUSH
37956: LD_INT 106
37958: PUSH
37959: LD_INT 107
37961: PUSH
37962: LD_INT 108
37964: PUSH
37965: LD_INT 109
37967: PUSH
37968: LD_INT 110
37970: PUSH
37971: LD_INT 111
37973: PUSH
37974: LD_INT 112
37976: PUSH
37977: LD_INT 113
37979: PUSH
37980: LD_INT 114
37982: PUSH
37983: LD_INT 116
37985: PUSH
37986: LD_INT 117
37988: PUSH
37989: LD_INT 118
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: ST_TO_ADDR
38015: GO 39254
38017: LD_INT 14
38019: DOUBLE
38020: EQUAL
38021: IFTRUE 38025
38023: GO 38249
38025: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
38026: LD_ADDR_VAR 0 2
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: LD_INT 2
38036: PUSH
38037: LD_INT 3
38039: PUSH
38040: LD_INT 4
38042: PUSH
38043: LD_INT 5
38045: PUSH
38046: LD_INT 6
38048: PUSH
38049: LD_INT 7
38051: PUSH
38052: LD_INT 8
38054: PUSH
38055: LD_INT 9
38057: PUSH
38058: LD_INT 10
38060: PUSH
38061: LD_INT 11
38063: PUSH
38064: LD_INT 12
38066: PUSH
38067: LD_INT 13
38069: PUSH
38070: LD_INT 14
38072: PUSH
38073: LD_INT 15
38075: PUSH
38076: LD_INT 16
38078: PUSH
38079: LD_INT 17
38081: PUSH
38082: LD_INT 18
38084: PUSH
38085: LD_INT 19
38087: PUSH
38088: LD_INT 20
38090: PUSH
38091: LD_INT 21
38093: PUSH
38094: LD_INT 22
38096: PUSH
38097: LD_INT 23
38099: PUSH
38100: LD_INT 24
38102: PUSH
38103: LD_INT 25
38105: PUSH
38106: LD_INT 26
38108: PUSH
38109: LD_INT 27
38111: PUSH
38112: LD_INT 28
38114: PUSH
38115: LD_INT 29
38117: PUSH
38118: LD_INT 30
38120: PUSH
38121: LD_INT 31
38123: PUSH
38124: LD_INT 32
38126: PUSH
38127: LD_INT 33
38129: PUSH
38130: LD_INT 34
38132: PUSH
38133: LD_INT 36
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 101
38175: PUSH
38176: LD_INT 102
38178: PUSH
38179: LD_INT 103
38181: PUSH
38182: LD_INT 104
38184: PUSH
38185: LD_INT 105
38187: PUSH
38188: LD_INT 106
38190: PUSH
38191: LD_INT 107
38193: PUSH
38194: LD_INT 108
38196: PUSH
38197: LD_INT 109
38199: PUSH
38200: LD_INT 110
38202: PUSH
38203: LD_INT 111
38205: PUSH
38206: LD_INT 112
38208: PUSH
38209: LD_INT 113
38211: PUSH
38212: LD_INT 114
38214: PUSH
38215: LD_INT 116
38217: PUSH
38218: LD_INT 117
38220: PUSH
38221: LD_INT 118
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: ST_TO_ADDR
38247: GO 39254
38249: LD_INT 15
38251: DOUBLE
38252: EQUAL
38253: IFTRUE 38257
38255: GO 38481
38257: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
38258: LD_ADDR_VAR 0 2
38262: PUSH
38263: LD_INT 1
38265: PUSH
38266: LD_INT 2
38268: PUSH
38269: LD_INT 3
38271: PUSH
38272: LD_INT 4
38274: PUSH
38275: LD_INT 5
38277: PUSH
38278: LD_INT 6
38280: PUSH
38281: LD_INT 7
38283: PUSH
38284: LD_INT 8
38286: PUSH
38287: LD_INT 9
38289: PUSH
38290: LD_INT 10
38292: PUSH
38293: LD_INT 11
38295: PUSH
38296: LD_INT 12
38298: PUSH
38299: LD_INT 13
38301: PUSH
38302: LD_INT 14
38304: PUSH
38305: LD_INT 15
38307: PUSH
38308: LD_INT 16
38310: PUSH
38311: LD_INT 17
38313: PUSH
38314: LD_INT 18
38316: PUSH
38317: LD_INT 19
38319: PUSH
38320: LD_INT 20
38322: PUSH
38323: LD_INT 21
38325: PUSH
38326: LD_INT 22
38328: PUSH
38329: LD_INT 23
38331: PUSH
38332: LD_INT 24
38334: PUSH
38335: LD_INT 25
38337: PUSH
38338: LD_INT 26
38340: PUSH
38341: LD_INT 27
38343: PUSH
38344: LD_INT 28
38346: PUSH
38347: LD_INT 29
38349: PUSH
38350: LD_INT 30
38352: PUSH
38353: LD_INT 31
38355: PUSH
38356: LD_INT 32
38358: PUSH
38359: LD_INT 33
38361: PUSH
38362: LD_INT 34
38364: PUSH
38365: LD_INT 36
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 101
38407: PUSH
38408: LD_INT 102
38410: PUSH
38411: LD_INT 103
38413: PUSH
38414: LD_INT 104
38416: PUSH
38417: LD_INT 105
38419: PUSH
38420: LD_INT 106
38422: PUSH
38423: LD_INT 107
38425: PUSH
38426: LD_INT 108
38428: PUSH
38429: LD_INT 109
38431: PUSH
38432: LD_INT 110
38434: PUSH
38435: LD_INT 111
38437: PUSH
38438: LD_INT 112
38440: PUSH
38441: LD_INT 113
38443: PUSH
38444: LD_INT 114
38446: PUSH
38447: LD_INT 116
38449: PUSH
38450: LD_INT 117
38452: PUSH
38453: LD_INT 118
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: ST_TO_ADDR
38479: GO 39254
38481: LD_INT 16
38483: DOUBLE
38484: EQUAL
38485: IFTRUE 38489
38487: GO 38625
38489: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
38490: LD_ADDR_VAR 0 2
38494: PUSH
38495: LD_INT 2
38497: PUSH
38498: LD_INT 4
38500: PUSH
38501: LD_INT 5
38503: PUSH
38504: LD_INT 7
38506: PUSH
38507: LD_INT 11
38509: PUSH
38510: LD_INT 12
38512: PUSH
38513: LD_INT 15
38515: PUSH
38516: LD_INT 16
38518: PUSH
38519: LD_INT 20
38521: PUSH
38522: LD_INT 21
38524: PUSH
38525: LD_INT 22
38527: PUSH
38528: LD_INT 23
38530: PUSH
38531: LD_INT 25
38533: PUSH
38534: LD_INT 26
38536: PUSH
38537: LD_INT 30
38539: PUSH
38540: LD_INT 31
38542: PUSH
38543: LD_INT 32
38545: PUSH
38546: LD_INT 33
38548: PUSH
38549: LD_INT 34
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 101
38575: PUSH
38576: LD_INT 102
38578: PUSH
38579: LD_INT 103
38581: PUSH
38582: LD_INT 106
38584: PUSH
38585: LD_INT 108
38587: PUSH
38588: LD_INT 112
38590: PUSH
38591: LD_INT 113
38593: PUSH
38594: LD_INT 114
38596: PUSH
38597: LD_INT 116
38599: PUSH
38600: LD_INT 117
38602: PUSH
38603: LD_INT 118
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: ST_TO_ADDR
38623: GO 39254
38625: LD_INT 17
38627: DOUBLE
38628: EQUAL
38629: IFTRUE 38633
38631: GO 38857
38633: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
38634: LD_ADDR_VAR 0 2
38638: PUSH
38639: LD_INT 1
38641: PUSH
38642: LD_INT 2
38644: PUSH
38645: LD_INT 3
38647: PUSH
38648: LD_INT 4
38650: PUSH
38651: LD_INT 5
38653: PUSH
38654: LD_INT 6
38656: PUSH
38657: LD_INT 7
38659: PUSH
38660: LD_INT 8
38662: PUSH
38663: LD_INT 9
38665: PUSH
38666: LD_INT 10
38668: PUSH
38669: LD_INT 11
38671: PUSH
38672: LD_INT 12
38674: PUSH
38675: LD_INT 13
38677: PUSH
38678: LD_INT 14
38680: PUSH
38681: LD_INT 15
38683: PUSH
38684: LD_INT 16
38686: PUSH
38687: LD_INT 17
38689: PUSH
38690: LD_INT 18
38692: PUSH
38693: LD_INT 19
38695: PUSH
38696: LD_INT 20
38698: PUSH
38699: LD_INT 21
38701: PUSH
38702: LD_INT 22
38704: PUSH
38705: LD_INT 23
38707: PUSH
38708: LD_INT 24
38710: PUSH
38711: LD_INT 25
38713: PUSH
38714: LD_INT 26
38716: PUSH
38717: LD_INT 27
38719: PUSH
38720: LD_INT 28
38722: PUSH
38723: LD_INT 29
38725: PUSH
38726: LD_INT 30
38728: PUSH
38729: LD_INT 31
38731: PUSH
38732: LD_INT 32
38734: PUSH
38735: LD_INT 33
38737: PUSH
38738: LD_INT 34
38740: PUSH
38741: LD_INT 36
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 101
38783: PUSH
38784: LD_INT 102
38786: PUSH
38787: LD_INT 103
38789: PUSH
38790: LD_INT 104
38792: PUSH
38793: LD_INT 105
38795: PUSH
38796: LD_INT 106
38798: PUSH
38799: LD_INT 107
38801: PUSH
38802: LD_INT 108
38804: PUSH
38805: LD_INT 109
38807: PUSH
38808: LD_INT 110
38810: PUSH
38811: LD_INT 111
38813: PUSH
38814: LD_INT 112
38816: PUSH
38817: LD_INT 113
38819: PUSH
38820: LD_INT 114
38822: PUSH
38823: LD_INT 116
38825: PUSH
38826: LD_INT 117
38828: PUSH
38829: LD_INT 118
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: ST_TO_ADDR
38855: GO 39254
38857: LD_INT 18
38859: DOUBLE
38860: EQUAL
38861: IFTRUE 38865
38863: GO 39013
38865: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
38866: LD_ADDR_VAR 0 2
38870: PUSH
38871: LD_INT 2
38873: PUSH
38874: LD_INT 4
38876: PUSH
38877: LD_INT 5
38879: PUSH
38880: LD_INT 7
38882: PUSH
38883: LD_INT 11
38885: PUSH
38886: LD_INT 12
38888: PUSH
38889: LD_INT 15
38891: PUSH
38892: LD_INT 16
38894: PUSH
38895: LD_INT 20
38897: PUSH
38898: LD_INT 21
38900: PUSH
38901: LD_INT 22
38903: PUSH
38904: LD_INT 23
38906: PUSH
38907: LD_INT 25
38909: PUSH
38910: LD_INT 26
38912: PUSH
38913: LD_INT 30
38915: PUSH
38916: LD_INT 31
38918: PUSH
38919: LD_INT 32
38921: PUSH
38922: LD_INT 33
38924: PUSH
38925: LD_INT 34
38927: PUSH
38928: LD_INT 35
38930: PUSH
38931: LD_INT 36
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 101
38959: PUSH
38960: LD_INT 102
38962: PUSH
38963: LD_INT 103
38965: PUSH
38966: LD_INT 106
38968: PUSH
38969: LD_INT 108
38971: PUSH
38972: LD_INT 112
38974: PUSH
38975: LD_INT 113
38977: PUSH
38978: LD_INT 114
38980: PUSH
38981: LD_INT 115
38983: PUSH
38984: LD_INT 116
38986: PUSH
38987: LD_INT 117
38989: PUSH
38990: LD_INT 118
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: ST_TO_ADDR
39011: GO 39254
39013: LD_INT 19
39015: DOUBLE
39016: EQUAL
39017: IFTRUE 39021
39019: GO 39253
39021: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
39022: LD_ADDR_VAR 0 2
39026: PUSH
39027: LD_INT 1
39029: PUSH
39030: LD_INT 2
39032: PUSH
39033: LD_INT 3
39035: PUSH
39036: LD_INT 4
39038: PUSH
39039: LD_INT 5
39041: PUSH
39042: LD_INT 6
39044: PUSH
39045: LD_INT 7
39047: PUSH
39048: LD_INT 8
39050: PUSH
39051: LD_INT 9
39053: PUSH
39054: LD_INT 10
39056: PUSH
39057: LD_INT 11
39059: PUSH
39060: LD_INT 12
39062: PUSH
39063: LD_INT 13
39065: PUSH
39066: LD_INT 14
39068: PUSH
39069: LD_INT 15
39071: PUSH
39072: LD_INT 16
39074: PUSH
39075: LD_INT 17
39077: PUSH
39078: LD_INT 18
39080: PUSH
39081: LD_INT 19
39083: PUSH
39084: LD_INT 20
39086: PUSH
39087: LD_INT 21
39089: PUSH
39090: LD_INT 22
39092: PUSH
39093: LD_INT 23
39095: PUSH
39096: LD_INT 24
39098: PUSH
39099: LD_INT 25
39101: PUSH
39102: LD_INT 26
39104: PUSH
39105: LD_INT 27
39107: PUSH
39108: LD_INT 28
39110: PUSH
39111: LD_INT 29
39113: PUSH
39114: LD_INT 30
39116: PUSH
39117: LD_INT 31
39119: PUSH
39120: LD_INT 32
39122: PUSH
39123: LD_INT 33
39125: PUSH
39126: LD_INT 34
39128: PUSH
39129: LD_INT 35
39131: PUSH
39132: LD_INT 36
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 101
39175: PUSH
39176: LD_INT 102
39178: PUSH
39179: LD_INT 103
39181: PUSH
39182: LD_INT 104
39184: PUSH
39185: LD_INT 105
39187: PUSH
39188: LD_INT 106
39190: PUSH
39191: LD_INT 107
39193: PUSH
39194: LD_INT 108
39196: PUSH
39197: LD_INT 109
39199: PUSH
39200: LD_INT 110
39202: PUSH
39203: LD_INT 111
39205: PUSH
39206: LD_INT 112
39208: PUSH
39209: LD_INT 113
39211: PUSH
39212: LD_INT 114
39214: PUSH
39215: LD_INT 115
39217: PUSH
39218: LD_INT 116
39220: PUSH
39221: LD_INT 117
39223: PUSH
39224: LD_INT 118
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: ST_TO_ADDR
39251: GO 39254
39253: POP
// end else
39254: GO 39485
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
39256: LD_ADDR_VAR 0 2
39260: PUSH
39261: LD_INT 1
39263: PUSH
39264: LD_INT 2
39266: PUSH
39267: LD_INT 3
39269: PUSH
39270: LD_INT 4
39272: PUSH
39273: LD_INT 5
39275: PUSH
39276: LD_INT 6
39278: PUSH
39279: LD_INT 7
39281: PUSH
39282: LD_INT 8
39284: PUSH
39285: LD_INT 9
39287: PUSH
39288: LD_INT 10
39290: PUSH
39291: LD_INT 11
39293: PUSH
39294: LD_INT 12
39296: PUSH
39297: LD_INT 13
39299: PUSH
39300: LD_INT 14
39302: PUSH
39303: LD_INT 15
39305: PUSH
39306: LD_INT 16
39308: PUSH
39309: LD_INT 17
39311: PUSH
39312: LD_INT 18
39314: PUSH
39315: LD_INT 19
39317: PUSH
39318: LD_INT 20
39320: PUSH
39321: LD_INT 21
39323: PUSH
39324: LD_INT 22
39326: PUSH
39327: LD_INT 23
39329: PUSH
39330: LD_INT 24
39332: PUSH
39333: LD_INT 25
39335: PUSH
39336: LD_INT 26
39338: PUSH
39339: LD_INT 27
39341: PUSH
39342: LD_INT 28
39344: PUSH
39345: LD_INT 29
39347: PUSH
39348: LD_INT 30
39350: PUSH
39351: LD_INT 31
39353: PUSH
39354: LD_INT 32
39356: PUSH
39357: LD_INT 33
39359: PUSH
39360: LD_INT 34
39362: PUSH
39363: LD_INT 35
39365: PUSH
39366: LD_INT 36
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 101
39409: PUSH
39410: LD_INT 102
39412: PUSH
39413: LD_INT 103
39415: PUSH
39416: LD_INT 104
39418: PUSH
39419: LD_INT 105
39421: PUSH
39422: LD_INT 106
39424: PUSH
39425: LD_INT 107
39427: PUSH
39428: LD_INT 108
39430: PUSH
39431: LD_INT 109
39433: PUSH
39434: LD_INT 110
39436: PUSH
39437: LD_INT 111
39439: PUSH
39440: LD_INT 112
39442: PUSH
39443: LD_INT 113
39445: PUSH
39446: LD_INT 114
39448: PUSH
39449: LD_INT 115
39451: PUSH
39452: LD_INT 116
39454: PUSH
39455: LD_INT 117
39457: PUSH
39458: LD_INT 118
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: ST_TO_ADDR
// if result then
39485: LD_VAR 0 2
39489: IFFALSE 40275
// begin normal :=  ;
39491: LD_ADDR_VAR 0 5
39495: PUSH
39496: LD_STRING 
39498: ST_TO_ADDR
// hardcore :=  ;
39499: LD_ADDR_VAR 0 6
39503: PUSH
39504: LD_STRING 
39506: ST_TO_ADDR
// active :=  ;
39507: LD_ADDR_VAR 0 7
39511: PUSH
39512: LD_STRING 
39514: ST_TO_ADDR
// for i = 1 to normalCounter do
39515: LD_ADDR_VAR 0 8
39519: PUSH
39520: DOUBLE
39521: LD_INT 1
39523: DEC
39524: ST_TO_ADDR
39525: LD_EXP 88
39529: PUSH
39530: FOR_TO
39531: IFFALSE 39632
// begin tmp := 0 ;
39533: LD_ADDR_VAR 0 3
39537: PUSH
39538: LD_STRING 0
39540: ST_TO_ADDR
// if result [ 1 ] then
39541: LD_VAR 0 2
39545: PUSH
39546: LD_INT 1
39548: ARRAY
39549: IFFALSE 39614
// if result [ 1 ] [ 1 ] = i then
39551: LD_VAR 0 2
39555: PUSH
39556: LD_INT 1
39558: ARRAY
39559: PUSH
39560: LD_INT 1
39562: ARRAY
39563: PUSH
39564: LD_VAR 0 8
39568: EQUAL
39569: IFFALSE 39614
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
39571: LD_ADDR_VAR 0 2
39575: PUSH
39576: LD_VAR 0 2
39580: PPUSH
39581: LD_INT 1
39583: PPUSH
39584: LD_VAR 0 2
39588: PUSH
39589: LD_INT 1
39591: ARRAY
39592: PPUSH
39593: LD_INT 1
39595: PPUSH
39596: CALL_OW 3
39600: PPUSH
39601: CALL_OW 1
39605: ST_TO_ADDR
// tmp := 1 ;
39606: LD_ADDR_VAR 0 3
39610: PUSH
39611: LD_STRING 1
39613: ST_TO_ADDR
// end ; normal := normal & tmp ;
39614: LD_ADDR_VAR 0 5
39618: PUSH
39619: LD_VAR 0 5
39623: PUSH
39624: LD_VAR 0 3
39628: STR
39629: ST_TO_ADDR
// end ;
39630: GO 39530
39632: POP
39633: POP
// for i = 1 to hardcoreCounter do
39634: LD_ADDR_VAR 0 8
39638: PUSH
39639: DOUBLE
39640: LD_INT 1
39642: DEC
39643: ST_TO_ADDR
39644: LD_EXP 89
39648: PUSH
39649: FOR_TO
39650: IFFALSE 39755
// begin tmp := 0 ;
39652: LD_ADDR_VAR 0 3
39656: PUSH
39657: LD_STRING 0
39659: ST_TO_ADDR
// if result [ 2 ] then
39660: LD_VAR 0 2
39664: PUSH
39665: LD_INT 2
39667: ARRAY
39668: IFFALSE 39737
// if result [ 2 ] [ 1 ] = 100 + i then
39670: LD_VAR 0 2
39674: PUSH
39675: LD_INT 2
39677: ARRAY
39678: PUSH
39679: LD_INT 1
39681: ARRAY
39682: PUSH
39683: LD_INT 100
39685: PUSH
39686: LD_VAR 0 8
39690: PLUS
39691: EQUAL
39692: IFFALSE 39737
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
39694: LD_ADDR_VAR 0 2
39698: PUSH
39699: LD_VAR 0 2
39703: PPUSH
39704: LD_INT 2
39706: PPUSH
39707: LD_VAR 0 2
39711: PUSH
39712: LD_INT 2
39714: ARRAY
39715: PPUSH
39716: LD_INT 1
39718: PPUSH
39719: CALL_OW 3
39723: PPUSH
39724: CALL_OW 1
39728: ST_TO_ADDR
// tmp := 1 ;
39729: LD_ADDR_VAR 0 3
39733: PUSH
39734: LD_STRING 1
39736: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
39737: LD_ADDR_VAR 0 6
39741: PUSH
39742: LD_VAR 0 6
39746: PUSH
39747: LD_VAR 0 3
39751: STR
39752: ST_TO_ADDR
// end ;
39753: GO 39649
39755: POP
39756: POP
// if isGameLoad then
39757: LD_VAR 0 1
39761: IFFALSE 40236
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
39763: LD_ADDR_VAR 0 4
39767: PUSH
39768: LD_EXP 92
39772: PUSH
39773: LD_EXP 91
39777: PUSH
39778: LD_EXP 93
39782: PUSH
39783: LD_EXP 90
39787: PUSH
39788: LD_EXP 94
39792: PUSH
39793: LD_EXP 95
39797: PUSH
39798: LD_EXP 96
39802: PUSH
39803: LD_EXP 97
39807: PUSH
39808: LD_EXP 98
39812: PUSH
39813: LD_EXP 99
39817: PUSH
39818: LD_EXP 100
39822: PUSH
39823: LD_EXP 101
39827: PUSH
39828: LD_EXP 102
39832: PUSH
39833: LD_EXP 103
39837: PUSH
39838: LD_EXP 111
39842: PUSH
39843: LD_EXP 112
39847: PUSH
39848: LD_EXP 113
39852: PUSH
39853: LD_EXP 114
39857: PUSH
39858: LD_EXP 116
39862: PUSH
39863: LD_EXP 117
39867: PUSH
39868: LD_EXP 118
39872: PUSH
39873: LD_EXP 121
39877: PUSH
39878: LD_EXP 123
39882: PUSH
39883: LD_EXP 124
39887: PUSH
39888: LD_EXP 125
39892: PUSH
39893: LD_EXP 127
39897: PUSH
39898: LD_EXP 128
39902: PUSH
39903: LD_EXP 131
39907: PUSH
39908: LD_EXP 132
39912: PUSH
39913: LD_EXP 133
39917: PUSH
39918: LD_EXP 134
39922: PUSH
39923: LD_EXP 135
39927: PUSH
39928: LD_EXP 136
39932: PUSH
39933: LD_EXP 137
39937: PUSH
39938: LD_EXP 138
39942: PUSH
39943: LD_EXP 139
39947: PUSH
39948: LD_EXP 104
39952: PUSH
39953: LD_EXP 105
39957: PUSH
39958: LD_EXP 108
39962: PUSH
39963: LD_EXP 109
39967: PUSH
39968: LD_EXP 110
39972: PUSH
39973: LD_EXP 106
39977: PUSH
39978: LD_EXP 107
39982: PUSH
39983: LD_EXP 115
39987: PUSH
39988: LD_EXP 119
39992: PUSH
39993: LD_EXP 120
39997: PUSH
39998: LD_EXP 122
40002: PUSH
40003: LD_EXP 126
40007: PUSH
40008: LD_EXP 129
40012: PUSH
40013: LD_EXP 130
40017: PUSH
40018: LD_EXP 140
40022: PUSH
40023: LD_EXP 141
40027: PUSH
40028: LD_EXP 142
40032: PUSH
40033: LD_EXP 143
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: ST_TO_ADDR
// tmp :=  ;
40094: LD_ADDR_VAR 0 3
40098: PUSH
40099: LD_STRING 
40101: ST_TO_ADDR
// for i = 1 to normalCounter do
40102: LD_ADDR_VAR 0 8
40106: PUSH
40107: DOUBLE
40108: LD_INT 1
40110: DEC
40111: ST_TO_ADDR
40112: LD_EXP 88
40116: PUSH
40117: FOR_TO
40118: IFFALSE 40154
// begin if flags [ i ] then
40120: LD_VAR 0 4
40124: PUSH
40125: LD_VAR 0 8
40129: ARRAY
40130: IFFALSE 40152
// tmp := tmp & i & ; ;
40132: LD_ADDR_VAR 0 3
40136: PUSH
40137: LD_VAR 0 3
40141: PUSH
40142: LD_VAR 0 8
40146: STR
40147: PUSH
40148: LD_STRING ;
40150: STR
40151: ST_TO_ADDR
// end ;
40152: GO 40117
40154: POP
40155: POP
// for i = 1 to hardcoreCounter do
40156: LD_ADDR_VAR 0 8
40160: PUSH
40161: DOUBLE
40162: LD_INT 1
40164: DEC
40165: ST_TO_ADDR
40166: LD_EXP 89
40170: PUSH
40171: FOR_TO
40172: IFFALSE 40218
// begin if flags [ normalCounter + i ] then
40174: LD_VAR 0 4
40178: PUSH
40179: LD_EXP 88
40183: PUSH
40184: LD_VAR 0 8
40188: PLUS
40189: ARRAY
40190: IFFALSE 40216
// tmp := tmp & ( 100 + i ) & ; ;
40192: LD_ADDR_VAR 0 3
40196: PUSH
40197: LD_VAR 0 3
40201: PUSH
40202: LD_INT 100
40204: PUSH
40205: LD_VAR 0 8
40209: PLUS
40210: STR
40211: PUSH
40212: LD_STRING ;
40214: STR
40215: ST_TO_ADDR
// end ;
40216: GO 40171
40218: POP
40219: POP
// if tmp then
40220: LD_VAR 0 3
40224: IFFALSE 40236
// active := tmp ;
40226: LD_ADDR_VAR 0 7
40230: PUSH
40231: LD_VAR 0 3
40235: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
40236: LD_STRING getStreamItemsFromMission("
40238: PUSH
40239: LD_VAR 0 5
40243: STR
40244: PUSH
40245: LD_STRING ","
40247: STR
40248: PUSH
40249: LD_VAR 0 6
40253: STR
40254: PUSH
40255: LD_STRING ","
40257: STR
40258: PUSH
40259: LD_VAR 0 7
40263: STR
40264: PUSH
40265: LD_STRING ")
40267: STR
40268: PPUSH
40269: CALL_OW 559
// end else
40273: GO 40282
// ToLua ( getStreamItemsFromMission("","","") ) ;
40275: LD_STRING getStreamItemsFromMission("","","")
40277: PPUSH
40278: CALL_OW 559
// end ;
40282: LD_VAR 0 2
40286: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
40287: LD_EXP 87
40291: IFFALSE 40299
40293: PUSH
40294: LD_EXP 92
40298: AND
40299: IFFALSE 40423
40301: GO 40303
40303: DISABLE
40304: LD_INT 0
40306: PPUSH
40307: PPUSH
// begin enable ;
40308: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
40309: LD_ADDR_VAR 0 2
40313: PUSH
40314: LD_INT 22
40316: PUSH
40317: LD_OWVAR 2
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 2
40328: PUSH
40329: LD_INT 34
40331: PUSH
40332: LD_INT 7
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 34
40341: PUSH
40342: LD_INT 45
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 34
40351: PUSH
40352: LD_INT 28
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 34
40361: PUSH
40362: LD_INT 47
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PPUSH
40380: CALL_OW 69
40384: ST_TO_ADDR
// if not tmp then
40385: LD_VAR 0 2
40389: NOT
40390: IFFALSE 40394
// exit ;
40392: GO 40423
// for i in tmp do
40394: LD_ADDR_VAR 0 1
40398: PUSH
40399: LD_VAR 0 2
40403: PUSH
40404: FOR_IN
40405: IFFALSE 40421
// begin SetLives ( i , 0 ) ;
40407: LD_VAR 0 1
40411: PPUSH
40412: LD_INT 0
40414: PPUSH
40415: CALL_OW 234
// end ;
40419: GO 40404
40421: POP
40422: POP
// end ;
40423: PPOPN 2
40425: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
40426: LD_EXP 87
40430: IFFALSE 40438
40432: PUSH
40433: LD_EXP 93
40437: AND
40438: IFFALSE 40522
40440: GO 40442
40442: DISABLE
40443: LD_INT 0
40445: PPUSH
40446: PPUSH
// begin enable ;
40447: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
40448: LD_ADDR_VAR 0 2
40452: PUSH
40453: LD_INT 22
40455: PUSH
40456: LD_OWVAR 2
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 32
40467: PUSH
40468: LD_INT 3
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PPUSH
40479: CALL_OW 69
40483: ST_TO_ADDR
// if not tmp then
40484: LD_VAR 0 2
40488: NOT
40489: IFFALSE 40493
// exit ;
40491: GO 40522
// for i in tmp do
40493: LD_ADDR_VAR 0 1
40497: PUSH
40498: LD_VAR 0 2
40502: PUSH
40503: FOR_IN
40504: IFFALSE 40520
// begin SetLives ( i , 0 ) ;
40506: LD_VAR 0 1
40510: PPUSH
40511: LD_INT 0
40513: PPUSH
40514: CALL_OW 234
// end ;
40518: GO 40503
40520: POP
40521: POP
// end ;
40522: PPOPN 2
40524: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
40525: LD_EXP 87
40529: IFFALSE 40537
40531: PUSH
40532: LD_EXP 90
40536: AND
40537: IFFALSE 40630
40539: GO 40541
40541: DISABLE
40542: LD_INT 0
40544: PPUSH
// begin enable ;
40545: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
40546: LD_ADDR_VAR 0 1
40550: PUSH
40551: LD_INT 22
40553: PUSH
40554: LD_OWVAR 2
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 2
40565: PUSH
40566: LD_INT 25
40568: PUSH
40569: LD_INT 5
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 25
40578: PUSH
40579: LD_INT 9
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 25
40588: PUSH
40589: LD_INT 8
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PPUSH
40606: CALL_OW 69
40610: PUSH
40611: FOR_IN
40612: IFFALSE 40628
// begin SetClass ( i , 1 ) ;
40614: LD_VAR 0 1
40618: PPUSH
40619: LD_INT 1
40621: PPUSH
40622: CALL_OW 336
// end ;
40626: GO 40611
40628: POP
40629: POP
// end ;
40630: PPOPN 1
40632: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
40633: LD_EXP 87
40637: IFFALSE 40645
40639: PUSH
40640: LD_EXP 91
40644: AND
40645: IFFALSE 40657
40647: PUSH
40648: LD_OWVAR 65
40652: PUSH
40653: LD_INT 7
40655: LESS
40656: AND
40657: IFFALSE 40671
40659: GO 40661
40661: DISABLE
// begin enable ;
40662: ENABLE
// game_speed := 7 ;
40663: LD_ADDR_OWVAR 65
40667: PUSH
40668: LD_INT 7
40670: ST_TO_ADDR
// end ;
40671: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
40672: LD_EXP 87
40676: IFFALSE 40684
40678: PUSH
40679: LD_EXP 94
40683: AND
40684: IFFALSE 40886
40686: GO 40688
40688: DISABLE
40689: LD_INT 0
40691: PPUSH
40692: PPUSH
40693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
40694: LD_ADDR_VAR 0 3
40698: PUSH
40699: LD_INT 81
40701: PUSH
40702: LD_OWVAR 2
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 21
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PPUSH
40725: CALL_OW 69
40729: ST_TO_ADDR
// if not tmp then
40730: LD_VAR 0 3
40734: NOT
40735: IFFALSE 40739
// exit ;
40737: GO 40886
// if tmp > 5 then
40739: LD_VAR 0 3
40743: PUSH
40744: LD_INT 5
40746: GREATER
40747: IFFALSE 40759
// k := 5 else
40749: LD_ADDR_VAR 0 2
40753: PUSH
40754: LD_INT 5
40756: ST_TO_ADDR
40757: GO 40769
// k := tmp ;
40759: LD_ADDR_VAR 0 2
40763: PUSH
40764: LD_VAR 0 3
40768: ST_TO_ADDR
// for i := 1 to k do
40769: LD_ADDR_VAR 0 1
40773: PUSH
40774: DOUBLE
40775: LD_INT 1
40777: DEC
40778: ST_TO_ADDR
40779: LD_VAR 0 2
40783: PUSH
40784: FOR_TO
40785: IFFALSE 40884
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
40787: LD_VAR 0 3
40791: PUSH
40792: LD_VAR 0 1
40796: ARRAY
40797: PPUSH
40798: LD_VAR 0 1
40802: PUSH
40803: LD_INT 4
40805: MOD
40806: PUSH
40807: LD_INT 1
40809: PLUS
40810: PPUSH
40811: CALL_OW 259
40815: PUSH
40816: LD_INT 10
40818: LESS
40819: IFFALSE 40882
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
40821: LD_VAR 0 3
40825: PUSH
40826: LD_VAR 0 1
40830: ARRAY
40831: PPUSH
40832: LD_VAR 0 1
40836: PUSH
40837: LD_INT 4
40839: MOD
40840: PUSH
40841: LD_INT 1
40843: PLUS
40844: PPUSH
40845: LD_VAR 0 3
40849: PUSH
40850: LD_VAR 0 1
40854: ARRAY
40855: PPUSH
40856: LD_VAR 0 1
40860: PUSH
40861: LD_INT 4
40863: MOD
40864: PUSH
40865: LD_INT 1
40867: PLUS
40868: PPUSH
40869: CALL_OW 259
40873: PUSH
40874: LD_INT 1
40876: PLUS
40877: PPUSH
40878: CALL_OW 237
40882: GO 40784
40884: POP
40885: POP
// end ;
40886: PPOPN 3
40888: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
40889: LD_EXP 87
40893: IFFALSE 40901
40895: PUSH
40896: LD_EXP 95
40900: AND
40901: IFFALSE 40921
40903: GO 40905
40905: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
40906: LD_INT 4
40908: PPUSH
40909: LD_OWVAR 2
40913: PPUSH
40914: LD_INT 0
40916: PPUSH
40917: CALL_OW 324
40921: END
// every 0 0$1 trigger StreamModeActive and sShovel do
40922: LD_EXP 87
40926: IFFALSE 40934
40928: PUSH
40929: LD_EXP 124
40933: AND
40934: IFFALSE 40954
40936: GO 40938
40938: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
40939: LD_INT 19
40941: PPUSH
40942: LD_OWVAR 2
40946: PPUSH
40947: LD_INT 0
40949: PPUSH
40950: CALL_OW 324
40954: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
40955: LD_EXP 87
40959: IFFALSE 40967
40961: PUSH
40962: LD_EXP 96
40966: AND
40967: IFFALSE 41069
40969: GO 40971
40971: DISABLE
40972: LD_INT 0
40974: PPUSH
40975: PPUSH
// begin enable ;
40976: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
40977: LD_ADDR_VAR 0 2
40981: PUSH
40982: LD_INT 22
40984: PUSH
40985: LD_OWVAR 2
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 2
40996: PUSH
40997: LD_INT 34
40999: PUSH
41000: LD_INT 11
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 34
41009: PUSH
41010: LD_INT 30
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: LIST
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PPUSH
41026: CALL_OW 69
41030: ST_TO_ADDR
// if not tmp then
41031: LD_VAR 0 2
41035: NOT
41036: IFFALSE 41040
// exit ;
41038: GO 41069
// for i in tmp do
41040: LD_ADDR_VAR 0 1
41044: PUSH
41045: LD_VAR 0 2
41049: PUSH
41050: FOR_IN
41051: IFFALSE 41067
// begin SetLives ( i , 0 ) ;
41053: LD_VAR 0 1
41057: PPUSH
41058: LD_INT 0
41060: PPUSH
41061: CALL_OW 234
// end ;
41065: GO 41050
41067: POP
41068: POP
// end ;
41069: PPOPN 2
41071: END
// every 0 0$1 trigger StreamModeActive and sBunker do
41072: LD_EXP 87
41076: IFFALSE 41084
41078: PUSH
41079: LD_EXP 97
41083: AND
41084: IFFALSE 41104
41086: GO 41088
41088: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
41089: LD_INT 32
41091: PPUSH
41092: LD_OWVAR 2
41096: PPUSH
41097: LD_INT 0
41099: PPUSH
41100: CALL_OW 324
41104: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
41105: LD_EXP 87
41109: IFFALSE 41117
41111: PUSH
41112: LD_EXP 98
41116: AND
41117: IFFALSE 41300
41119: GO 41121
41121: DISABLE
41122: LD_INT 0
41124: PPUSH
41125: PPUSH
41126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
41127: LD_ADDR_VAR 0 2
41131: PUSH
41132: LD_INT 22
41134: PUSH
41135: LD_OWVAR 2
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 33
41146: PUSH
41147: LD_INT 3
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PPUSH
41158: CALL_OW 69
41162: ST_TO_ADDR
// if not tmp then
41163: LD_VAR 0 2
41167: NOT
41168: IFFALSE 41172
// exit ;
41170: GO 41300
// side := 0 ;
41172: LD_ADDR_VAR 0 3
41176: PUSH
41177: LD_INT 0
41179: ST_TO_ADDR
// for i := 1 to 8 do
41180: LD_ADDR_VAR 0 1
41184: PUSH
41185: DOUBLE
41186: LD_INT 1
41188: DEC
41189: ST_TO_ADDR
41190: LD_INT 8
41192: PUSH
41193: FOR_TO
41194: IFFALSE 41244
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
41196: LD_OWVAR 2
41200: PUSH
41201: LD_VAR 0 1
41205: NONEQUAL
41206: IFFALSE 41228
41208: PUSH
41209: LD_OWVAR 2
41213: PPUSH
41214: LD_VAR 0 1
41218: PPUSH
41219: CALL_OW 81
41223: PUSH
41224: LD_INT 2
41226: EQUAL
41227: AND
41228: IFFALSE 41242
// begin side := i ;
41230: LD_ADDR_VAR 0 3
41234: PUSH
41235: LD_VAR 0 1
41239: ST_TO_ADDR
// break ;
41240: GO 41244
// end ;
41242: GO 41193
41244: POP
41245: POP
// if not side then
41246: LD_VAR 0 3
41250: NOT
41251: IFFALSE 41255
// exit ;
41253: GO 41300
// for i := 1 to tmp do
41255: LD_ADDR_VAR 0 1
41259: PUSH
41260: DOUBLE
41261: LD_INT 1
41263: DEC
41264: ST_TO_ADDR
41265: LD_VAR 0 2
41269: PUSH
41270: FOR_TO
41271: IFFALSE 41298
// if Prob ( 60 ) then
41273: LD_INT 60
41275: PPUSH
41276: CALL_OW 13
41280: IFFALSE 41296
// SetSide ( i , side ) ;
41282: LD_VAR 0 1
41286: PPUSH
41287: LD_VAR 0 3
41291: PPUSH
41292: CALL_OW 235
41296: GO 41270
41298: POP
41299: POP
// end ;
41300: PPOPN 3
41302: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
41303: LD_EXP 87
41307: IFFALSE 41315
41309: PUSH
41310: LD_EXP 100
41314: AND
41315: IFFALSE 41434
41317: GO 41319
41319: DISABLE
41320: LD_INT 0
41322: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
41323: LD_ADDR_VAR 0 1
41327: PUSH
41328: LD_INT 22
41330: PUSH
41331: LD_OWVAR 2
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 21
41342: PUSH
41343: LD_INT 1
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 3
41352: PUSH
41353: LD_INT 23
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: LIST
41371: PPUSH
41372: CALL_OW 69
41376: PUSH
41377: FOR_IN
41378: IFFALSE 41432
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
41380: LD_VAR 0 1
41384: PPUSH
41385: CALL_OW 257
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: LD_INT 2
41395: PUSH
41396: LD_INT 3
41398: PUSH
41399: LD_INT 4
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: IN
41408: IFFALSE 41430
// SetClass ( un , rand ( 1 , 4 ) ) ;
41410: LD_VAR 0 1
41414: PPUSH
41415: LD_INT 1
41417: PPUSH
41418: LD_INT 4
41420: PPUSH
41421: CALL_OW 12
41425: PPUSH
41426: CALL_OW 336
41430: GO 41377
41432: POP
41433: POP
// end ;
41434: PPOPN 1
41436: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
41437: LD_EXP 87
41441: IFFALSE 41449
41443: PUSH
41444: LD_EXP 99
41448: AND
41449: IFFALSE 41528
41451: GO 41453
41453: DISABLE
41454: LD_INT 0
41456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41457: LD_ADDR_VAR 0 1
41461: PUSH
41462: LD_INT 22
41464: PUSH
41465: LD_OWVAR 2
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 21
41476: PUSH
41477: LD_INT 3
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PPUSH
41488: CALL_OW 69
41492: ST_TO_ADDR
// if not tmp then
41493: LD_VAR 0 1
41497: NOT
41498: IFFALSE 41502
// exit ;
41500: GO 41528
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
41502: LD_VAR 0 1
41506: PUSH
41507: LD_INT 1
41509: PPUSH
41510: LD_VAR 0 1
41514: PPUSH
41515: CALL_OW 12
41519: ARRAY
41520: PPUSH
41521: LD_INT 100
41523: PPUSH
41524: CALL_OW 234
// end ;
41528: PPOPN 1
41530: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
41531: LD_EXP 87
41535: IFFALSE 41543
41537: PUSH
41538: LD_EXP 101
41542: AND
41543: IFFALSE 41641
41545: GO 41547
41547: DISABLE
41548: LD_INT 0
41550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
41551: LD_ADDR_VAR 0 1
41555: PUSH
41556: LD_INT 22
41558: PUSH
41559: LD_OWVAR 2
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 21
41570: PUSH
41571: LD_INT 1
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PPUSH
41582: CALL_OW 69
41586: ST_TO_ADDR
// if not tmp then
41587: LD_VAR 0 1
41591: NOT
41592: IFFALSE 41596
// exit ;
41594: GO 41641
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
41596: LD_VAR 0 1
41600: PUSH
41601: LD_INT 1
41603: PPUSH
41604: LD_VAR 0 1
41608: PPUSH
41609: CALL_OW 12
41613: ARRAY
41614: PPUSH
41615: LD_INT 1
41617: PPUSH
41618: LD_INT 4
41620: PPUSH
41621: CALL_OW 12
41625: PPUSH
41626: LD_INT 3000
41628: PPUSH
41629: LD_INT 9000
41631: PPUSH
41632: CALL_OW 12
41636: PPUSH
41637: CALL_OW 492
// end ;
41641: PPOPN 1
41643: END
// every 0 0$1 trigger StreamModeActive and sDepot do
41644: LD_EXP 87
41648: IFFALSE 41656
41650: PUSH
41651: LD_EXP 102
41655: AND
41656: IFFALSE 41676
41658: GO 41660
41660: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
41661: LD_INT 1
41663: PPUSH
41664: LD_OWVAR 2
41668: PPUSH
41669: LD_INT 0
41671: PPUSH
41672: CALL_OW 324
41676: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
41677: LD_EXP 87
41681: IFFALSE 41689
41683: PUSH
41684: LD_EXP 103
41688: AND
41689: IFFALSE 41772
41691: GO 41693
41693: DISABLE
41694: LD_INT 0
41696: PPUSH
41697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41698: LD_ADDR_VAR 0 2
41702: PUSH
41703: LD_INT 22
41705: PUSH
41706: LD_OWVAR 2
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 21
41717: PUSH
41718: LD_INT 3
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PPUSH
41729: CALL_OW 69
41733: ST_TO_ADDR
// if not tmp then
41734: LD_VAR 0 2
41738: NOT
41739: IFFALSE 41743
// exit ;
41741: GO 41772
// for i in tmp do
41743: LD_ADDR_VAR 0 1
41747: PUSH
41748: LD_VAR 0 2
41752: PUSH
41753: FOR_IN
41754: IFFALSE 41770
// SetBLevel ( i , 10 ) ;
41756: LD_VAR 0 1
41760: PPUSH
41761: LD_INT 10
41763: PPUSH
41764: CALL_OW 241
41768: GO 41753
41770: POP
41771: POP
// end ;
41772: PPOPN 2
41774: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
41775: LD_EXP 87
41779: IFFALSE 41787
41781: PUSH
41782: LD_EXP 104
41786: AND
41787: IFFALSE 41898
41789: GO 41791
41791: DISABLE
41792: LD_INT 0
41794: PPUSH
41795: PPUSH
41796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41797: LD_ADDR_VAR 0 3
41801: PUSH
41802: LD_INT 22
41804: PUSH
41805: LD_OWVAR 2
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 25
41816: PUSH
41817: LD_INT 1
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PPUSH
41828: CALL_OW 69
41832: ST_TO_ADDR
// if not tmp then
41833: LD_VAR 0 3
41837: NOT
41838: IFFALSE 41842
// exit ;
41840: GO 41898
// un := tmp [ rand ( 1 , tmp ) ] ;
41842: LD_ADDR_VAR 0 2
41846: PUSH
41847: LD_VAR 0 3
41851: PUSH
41852: LD_INT 1
41854: PPUSH
41855: LD_VAR 0 3
41859: PPUSH
41860: CALL_OW 12
41864: ARRAY
41865: ST_TO_ADDR
// if Crawls ( un ) then
41866: LD_VAR 0 2
41870: PPUSH
41871: CALL_OW 318
41875: IFFALSE 41886
// ComWalk ( un ) ;
41877: LD_VAR 0 2
41881: PPUSH
41882: CALL_OW 138
// SetClass ( un , class_sniper ) ;
41886: LD_VAR 0 2
41890: PPUSH
41891: LD_INT 5
41893: PPUSH
41894: CALL_OW 336
// end ;
41898: PPOPN 3
41900: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
41901: LD_EXP 87
41905: IFFALSE 41913
41907: PUSH
41908: LD_EXP 105
41912: AND
41913: IFFALSE 41925
41915: PUSH
41916: LD_OWVAR 67
41920: PUSH
41921: LD_INT 4
41923: LESS
41924: AND
41925: IFFALSE 41944
41927: GO 41929
41929: DISABLE
// begin Difficulty := Difficulty + 1 ;
41930: LD_ADDR_OWVAR 67
41934: PUSH
41935: LD_OWVAR 67
41939: PUSH
41940: LD_INT 1
41942: PLUS
41943: ST_TO_ADDR
// end ;
41944: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
41945: LD_EXP 87
41949: IFFALSE 41957
41951: PUSH
41952: LD_EXP 106
41956: AND
41957: IFFALSE 42060
41959: GO 41961
41961: DISABLE
41962: LD_INT 0
41964: PPUSH
// begin for i := 1 to 5 do
41965: LD_ADDR_VAR 0 1
41969: PUSH
41970: DOUBLE
41971: LD_INT 1
41973: DEC
41974: ST_TO_ADDR
41975: LD_INT 5
41977: PUSH
41978: FOR_TO
41979: IFFALSE 42058
// begin uc_nation := nation_nature ;
41981: LD_ADDR_OWVAR 21
41985: PUSH
41986: LD_INT 0
41988: ST_TO_ADDR
// uc_side := 0 ;
41989: LD_ADDR_OWVAR 20
41993: PUSH
41994: LD_INT 0
41996: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
41997: LD_ADDR_OWVAR 29
42001: PUSH
42002: LD_INT 12
42004: PUSH
42005: LD_INT 12
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: ST_TO_ADDR
// hc_agressivity := 20 ;
42012: LD_ADDR_OWVAR 35
42016: PUSH
42017: LD_INT 20
42019: ST_TO_ADDR
// hc_class := class_tiger ;
42020: LD_ADDR_OWVAR 28
42024: PUSH
42025: LD_INT 14
42027: ST_TO_ADDR
// hc_gallery :=  ;
42028: LD_ADDR_OWVAR 33
42032: PUSH
42033: LD_STRING 
42035: ST_TO_ADDR
// hc_name :=  ;
42036: LD_ADDR_OWVAR 26
42040: PUSH
42041: LD_STRING 
42043: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
42044: CALL_OW 44
42048: PPUSH
42049: LD_INT 0
42051: PPUSH
42052: CALL_OW 51
// end ;
42056: GO 41978
42058: POP
42059: POP
// end ;
42060: PPOPN 1
42062: END
// every 0 0$1 trigger StreamModeActive and sBomb do
42063: LD_EXP 87
42067: IFFALSE 42075
42069: PUSH
42070: LD_EXP 107
42074: AND
42075: IFFALSE 42084
42077: GO 42079
42079: DISABLE
// StreamSibBomb ;
42080: CALL 42085 0 0
42084: END
// export function StreamSibBomb ; var i , x , y ; begin
42085: LD_INT 0
42087: PPUSH
42088: PPUSH
42089: PPUSH
42090: PPUSH
// result := false ;
42091: LD_ADDR_VAR 0 1
42095: PUSH
42096: LD_INT 0
42098: ST_TO_ADDR
// for i := 1 to 16 do
42099: LD_ADDR_VAR 0 2
42103: PUSH
42104: DOUBLE
42105: LD_INT 1
42107: DEC
42108: ST_TO_ADDR
42109: LD_INT 16
42111: PUSH
42112: FOR_TO
42113: IFFALSE 42312
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
42115: LD_ADDR_VAR 0 3
42119: PUSH
42120: LD_INT 10
42122: PUSH
42123: LD_INT 20
42125: PUSH
42126: LD_INT 30
42128: PUSH
42129: LD_INT 40
42131: PUSH
42132: LD_INT 50
42134: PUSH
42135: LD_INT 60
42137: PUSH
42138: LD_INT 70
42140: PUSH
42141: LD_INT 80
42143: PUSH
42144: LD_INT 90
42146: PUSH
42147: LD_INT 100
42149: PUSH
42150: LD_INT 110
42152: PUSH
42153: LD_INT 120
42155: PUSH
42156: LD_INT 130
42158: PUSH
42159: LD_INT 140
42161: PUSH
42162: LD_INT 150
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 1
42184: PPUSH
42185: LD_INT 15
42187: PPUSH
42188: CALL_OW 12
42192: ARRAY
42193: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
42194: LD_ADDR_VAR 0 4
42198: PUSH
42199: LD_INT 10
42201: PUSH
42202: LD_INT 20
42204: PUSH
42205: LD_INT 30
42207: PUSH
42208: LD_INT 40
42210: PUSH
42211: LD_INT 50
42213: PUSH
42214: LD_INT 60
42216: PUSH
42217: LD_INT 70
42219: PUSH
42220: LD_INT 80
42222: PUSH
42223: LD_INT 90
42225: PUSH
42226: LD_INT 100
42228: PUSH
42229: LD_INT 110
42231: PUSH
42232: LD_INT 120
42234: PUSH
42235: LD_INT 130
42237: PUSH
42238: LD_INT 140
42240: PUSH
42241: LD_INT 150
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 1
42263: PPUSH
42264: LD_INT 15
42266: PPUSH
42267: CALL_OW 12
42271: ARRAY
42272: ST_TO_ADDR
// if ValidHex ( x , y ) then
42273: LD_VAR 0 3
42277: PPUSH
42278: LD_VAR 0 4
42282: PPUSH
42283: CALL_OW 488
42287: IFFALSE 42310
// begin result := [ x , y ] ;
42289: LD_ADDR_VAR 0 1
42293: PUSH
42294: LD_VAR 0 3
42298: PUSH
42299: LD_VAR 0 4
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: ST_TO_ADDR
// break ;
42308: GO 42312
// end ; end ;
42310: GO 42112
42312: POP
42313: POP
// if result then
42314: LD_VAR 0 1
42318: IFFALSE 42378
// begin ToLua ( playSibBomb() ) ;
42320: LD_STRING playSibBomb()
42322: PPUSH
42323: CALL_OW 559
// wait ( 0 0$14 ) ;
42327: LD_INT 490
42329: PPUSH
42330: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
42334: LD_VAR 0 1
42338: PUSH
42339: LD_INT 1
42341: ARRAY
42342: PPUSH
42343: LD_VAR 0 1
42347: PUSH
42348: LD_INT 2
42350: ARRAY
42351: PPUSH
42352: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
42356: LD_VAR 0 1
42360: PUSH
42361: LD_INT 1
42363: ARRAY
42364: PPUSH
42365: LD_VAR 0 1
42369: PUSH
42370: LD_INT 2
42372: ARRAY
42373: PPUSH
42374: CALL_OW 429
// end ; end ;
42378: LD_VAR 0 1
42382: RET
// every 0 0$1 trigger StreamModeActive and sReset do
42383: LD_EXP 87
42387: IFFALSE 42395
42389: PUSH
42390: LD_EXP 109
42394: AND
42395: IFFALSE 42407
42397: GO 42399
42399: DISABLE
// YouLost (  ) ;
42400: LD_STRING 
42402: PPUSH
42403: CALL_OW 104
42407: END
// every 0 0$1 trigger StreamModeActive and sFog do
42408: LD_EXP 87
42412: IFFALSE 42420
42414: PUSH
42415: LD_EXP 108
42419: AND
42420: IFFALSE 42434
42422: GO 42424
42424: DISABLE
// FogOff ( your_side ) ;
42425: LD_OWVAR 2
42429: PPUSH
42430: CALL_OW 344
42434: END
// every 0 0$1 trigger StreamModeActive and sSun do
42435: LD_EXP 87
42439: IFFALSE 42447
42441: PUSH
42442: LD_EXP 110
42446: AND
42447: IFFALSE 42475
42449: GO 42451
42451: DISABLE
// begin solar_recharge_percent := 0 ;
42452: LD_ADDR_OWVAR 79
42456: PUSH
42457: LD_INT 0
42459: ST_TO_ADDR
// wait ( 5 5$00 ) ;
42460: LD_INT 10500
42462: PPUSH
42463: CALL_OW 67
// solar_recharge_percent := 100 ;
42467: LD_ADDR_OWVAR 79
42471: PUSH
42472: LD_INT 100
42474: ST_TO_ADDR
// end ;
42475: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
42476: LD_EXP 87
42480: IFFALSE 42488
42482: PUSH
42483: LD_EXP 111
42487: AND
42488: IFFALSE 42727
42490: GO 42492
42492: DISABLE
42493: LD_INT 0
42495: PPUSH
42496: PPUSH
42497: PPUSH
// begin tmp := [ ] ;
42498: LD_ADDR_VAR 0 3
42502: PUSH
42503: EMPTY
42504: ST_TO_ADDR
// for i := 1 to 6 do
42505: LD_ADDR_VAR 0 1
42509: PUSH
42510: DOUBLE
42511: LD_INT 1
42513: DEC
42514: ST_TO_ADDR
42515: LD_INT 6
42517: PUSH
42518: FOR_TO
42519: IFFALSE 42624
// begin uc_nation := nation_nature ;
42521: LD_ADDR_OWVAR 21
42525: PUSH
42526: LD_INT 0
42528: ST_TO_ADDR
// uc_side := 0 ;
42529: LD_ADDR_OWVAR 20
42533: PUSH
42534: LD_INT 0
42536: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
42537: LD_ADDR_OWVAR 29
42541: PUSH
42542: LD_INT 12
42544: PUSH
42545: LD_INT 12
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: ST_TO_ADDR
// hc_agressivity := 20 ;
42552: LD_ADDR_OWVAR 35
42556: PUSH
42557: LD_INT 20
42559: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
42560: LD_ADDR_OWVAR 28
42564: PUSH
42565: LD_INT 17
42567: ST_TO_ADDR
// hc_gallery :=  ;
42568: LD_ADDR_OWVAR 33
42572: PUSH
42573: LD_STRING 
42575: ST_TO_ADDR
// hc_name :=  ;
42576: LD_ADDR_OWVAR 26
42580: PUSH
42581: LD_STRING 
42583: ST_TO_ADDR
// un := CreateHuman ;
42584: LD_ADDR_VAR 0 2
42588: PUSH
42589: CALL_OW 44
42593: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
42594: LD_VAR 0 2
42598: PPUSH
42599: LD_INT 1
42601: PPUSH
42602: CALL_OW 51
// tmp := tmp ^ un ;
42606: LD_ADDR_VAR 0 3
42610: PUSH
42611: LD_VAR 0 3
42615: PUSH
42616: LD_VAR 0 2
42620: ADD
42621: ST_TO_ADDR
// end ;
42622: GO 42518
42624: POP
42625: POP
// repeat wait ( 0 0$1 ) ;
42626: LD_INT 35
42628: PPUSH
42629: CALL_OW 67
// for un in tmp do
42633: LD_ADDR_VAR 0 2
42637: PUSH
42638: LD_VAR 0 3
42642: PUSH
42643: FOR_IN
42644: IFFALSE 42718
// begin if IsDead ( un ) then
42646: LD_VAR 0 2
42650: PPUSH
42651: CALL_OW 301
42655: IFFALSE 42675
// begin tmp := tmp diff un ;
42657: LD_ADDR_VAR 0 3
42661: PUSH
42662: LD_VAR 0 3
42666: PUSH
42667: LD_VAR 0 2
42671: DIFF
42672: ST_TO_ADDR
// continue ;
42673: GO 42643
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
42675: LD_VAR 0 2
42679: PPUSH
42680: LD_INT 3
42682: PUSH
42683: LD_INT 22
42685: PUSH
42686: LD_INT 0
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PPUSH
42697: CALL_OW 69
42701: PPUSH
42702: LD_VAR 0 2
42706: PPUSH
42707: CALL_OW 74
42711: PPUSH
42712: CALL_OW 115
// end ;
42716: GO 42643
42718: POP
42719: POP
// until not tmp ;
42720: LD_VAR 0 3
42724: NOT
42725: IFFALSE 42626
// end ;
42727: PPOPN 3
42729: END
// every 0 0$1 trigger StreamModeActive and sTroll do
42730: LD_EXP 87
42734: IFFALSE 42742
42736: PUSH
42737: LD_EXP 112
42741: AND
42742: IFFALSE 42796
42744: GO 42746
42746: DISABLE
// begin ToLua ( displayTroll(); ) ;
42747: LD_STRING displayTroll();
42749: PPUSH
42750: CALL_OW 559
// wait ( 3 3$00 ) ;
42754: LD_INT 6300
42756: PPUSH
42757: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42761: LD_STRING hideTroll();
42763: PPUSH
42764: CALL_OW 559
// wait ( 1 1$00 ) ;
42768: LD_INT 2100
42770: PPUSH
42771: CALL_OW 67
// ToLua ( displayTroll(); ) ;
42775: LD_STRING displayTroll();
42777: PPUSH
42778: CALL_OW 559
// wait ( 1 1$00 ) ;
42782: LD_INT 2100
42784: PPUSH
42785: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42789: LD_STRING hideTroll();
42791: PPUSH
42792: CALL_OW 559
// end ;
42796: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
42797: LD_EXP 87
42801: IFFALSE 42809
42803: PUSH
42804: LD_EXP 113
42808: AND
42809: IFFALSE 42872
42811: GO 42813
42813: DISABLE
42814: LD_INT 0
42816: PPUSH
// begin p := 0 ;
42817: LD_ADDR_VAR 0 1
42821: PUSH
42822: LD_INT 0
42824: ST_TO_ADDR
// repeat game_speed := 1 ;
42825: LD_ADDR_OWVAR 65
42829: PUSH
42830: LD_INT 1
42832: ST_TO_ADDR
// wait ( 0 0$1 ) ;
42833: LD_INT 35
42835: PPUSH
42836: CALL_OW 67
// p := p + 1 ;
42840: LD_ADDR_VAR 0 1
42844: PUSH
42845: LD_VAR 0 1
42849: PUSH
42850: LD_INT 1
42852: PLUS
42853: ST_TO_ADDR
// until p >= 60 ;
42854: LD_VAR 0 1
42858: PUSH
42859: LD_INT 60
42861: GREATEREQUAL
42862: IFFALSE 42825
// game_speed := 4 ;
42864: LD_ADDR_OWVAR 65
42868: PUSH
42869: LD_INT 4
42871: ST_TO_ADDR
// end ;
42872: PPOPN 1
42874: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
42875: LD_EXP 87
42879: IFFALSE 42887
42881: PUSH
42882: LD_EXP 114
42886: AND
42887: IFFALSE 43033
42889: GO 42891
42891: DISABLE
42892: LD_INT 0
42894: PPUSH
42895: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42896: LD_ADDR_VAR 0 1
42900: PUSH
42901: LD_INT 22
42903: PUSH
42904: LD_OWVAR 2
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 2
42915: PUSH
42916: LD_INT 30
42918: PUSH
42919: LD_INT 0
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 30
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: LIST
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PPUSH
42945: CALL_OW 69
42949: ST_TO_ADDR
// if not depot then
42950: LD_VAR 0 1
42954: NOT
42955: IFFALSE 42959
// exit ;
42957: GO 43033
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
42959: LD_ADDR_VAR 0 2
42963: PUSH
42964: LD_VAR 0 1
42968: PUSH
42969: LD_INT 1
42971: PPUSH
42972: LD_VAR 0 1
42976: PPUSH
42977: CALL_OW 12
42981: ARRAY
42982: PPUSH
42983: CALL_OW 274
42987: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
42988: LD_VAR 0 2
42992: PPUSH
42993: LD_INT 1
42995: PPUSH
42996: LD_INT 0
42998: PPUSH
42999: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
43003: LD_VAR 0 2
43007: PPUSH
43008: LD_INT 2
43010: PPUSH
43011: LD_INT 0
43013: PPUSH
43014: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
43018: LD_VAR 0 2
43022: PPUSH
43023: LD_INT 3
43025: PPUSH
43026: LD_INT 0
43028: PPUSH
43029: CALL_OW 277
// end ;
43033: PPOPN 2
43035: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
43036: LD_EXP 87
43040: IFFALSE 43048
43042: PUSH
43043: LD_EXP 115
43047: AND
43048: IFFALSE 43145
43050: GO 43052
43052: DISABLE
43053: LD_INT 0
43055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
43056: LD_ADDR_VAR 0 1
43060: PUSH
43061: LD_INT 22
43063: PUSH
43064: LD_OWVAR 2
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 21
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 3
43085: PUSH
43086: LD_INT 23
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: LIST
43104: PPUSH
43105: CALL_OW 69
43109: ST_TO_ADDR
// if not tmp then
43110: LD_VAR 0 1
43114: NOT
43115: IFFALSE 43119
// exit ;
43117: GO 43145
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
43119: LD_VAR 0 1
43123: PUSH
43124: LD_INT 1
43126: PPUSH
43127: LD_VAR 0 1
43131: PPUSH
43132: CALL_OW 12
43136: ARRAY
43137: PPUSH
43138: LD_INT 200
43140: PPUSH
43141: CALL_OW 234
// end ;
43145: PPOPN 1
43147: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
43148: LD_EXP 87
43152: IFFALSE 43160
43154: PUSH
43155: LD_EXP 116
43159: AND
43160: IFFALSE 43239
43162: GO 43164
43164: DISABLE
43165: LD_INT 0
43167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
43168: LD_ADDR_VAR 0 1
43172: PUSH
43173: LD_INT 22
43175: PUSH
43176: LD_OWVAR 2
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 21
43187: PUSH
43188: LD_INT 2
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PPUSH
43199: CALL_OW 69
43203: ST_TO_ADDR
// if not tmp then
43204: LD_VAR 0 1
43208: NOT
43209: IFFALSE 43213
// exit ;
43211: GO 43239
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
43213: LD_VAR 0 1
43217: PUSH
43218: LD_INT 1
43220: PPUSH
43221: LD_VAR 0 1
43225: PPUSH
43226: CALL_OW 12
43230: ARRAY
43231: PPUSH
43232: LD_INT 60
43234: PPUSH
43235: CALL_OW 234
// end ;
43239: PPOPN 1
43241: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
43242: LD_EXP 87
43246: IFFALSE 43254
43248: PUSH
43249: LD_EXP 117
43253: AND
43254: IFFALSE 43353
43256: GO 43258
43258: DISABLE
43259: LD_INT 0
43261: PPUSH
43262: PPUSH
// begin enable ;
43263: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
43264: LD_ADDR_VAR 0 1
43268: PUSH
43269: LD_INT 22
43271: PUSH
43272: LD_OWVAR 2
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 61
43283: PUSH
43284: EMPTY
43285: LIST
43286: PUSH
43287: LD_INT 33
43289: PUSH
43290: LD_INT 2
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: LIST
43301: PPUSH
43302: CALL_OW 69
43306: ST_TO_ADDR
// if not tmp then
43307: LD_VAR 0 1
43311: NOT
43312: IFFALSE 43316
// exit ;
43314: GO 43353
// for i in tmp do
43316: LD_ADDR_VAR 0 2
43320: PUSH
43321: LD_VAR 0 1
43325: PUSH
43326: FOR_IN
43327: IFFALSE 43351
// if IsControledBy ( i ) then
43329: LD_VAR 0 2
43333: PPUSH
43334: CALL_OW 312
43338: IFFALSE 43349
// ComUnlink ( i ) ;
43340: LD_VAR 0 2
43344: PPUSH
43345: CALL_OW 136
43349: GO 43326
43351: POP
43352: POP
// end ;
43353: PPOPN 2
43355: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
43356: LD_EXP 87
43360: IFFALSE 43368
43362: PUSH
43363: LD_EXP 118
43367: AND
43368: IFFALSE 43508
43370: GO 43372
43372: DISABLE
43373: LD_INT 0
43375: PPUSH
43376: PPUSH
// begin ToLua ( displayPowell(); ) ;
43377: LD_STRING displayPowell();
43379: PPUSH
43380: CALL_OW 559
// uc_side := 0 ;
43384: LD_ADDR_OWVAR 20
43388: PUSH
43389: LD_INT 0
43391: ST_TO_ADDR
// uc_nation := 2 ;
43392: LD_ADDR_OWVAR 21
43396: PUSH
43397: LD_INT 2
43399: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
43400: LD_ADDR_OWVAR 37
43404: PUSH
43405: LD_INT 14
43407: ST_TO_ADDR
// vc_engine := engine_siberite ;
43408: LD_ADDR_OWVAR 39
43412: PUSH
43413: LD_INT 3
43415: ST_TO_ADDR
// vc_control := control_apeman ;
43416: LD_ADDR_OWVAR 38
43420: PUSH
43421: LD_INT 5
43423: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
43424: LD_ADDR_OWVAR 40
43428: PUSH
43429: LD_INT 29
43431: ST_TO_ADDR
// un := CreateVehicle ;
43432: LD_ADDR_VAR 0 2
43436: PUSH
43437: CALL_OW 45
43441: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
43442: LD_VAR 0 2
43446: PPUSH
43447: LD_INT 1
43449: PPUSH
43450: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
43454: LD_INT 35
43456: PPUSH
43457: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
43461: LD_VAR 0 2
43465: PPUSH
43466: LD_INT 22
43468: PUSH
43469: LD_OWVAR 2
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PPUSH
43478: CALL_OW 69
43482: PPUSH
43483: LD_VAR 0 2
43487: PPUSH
43488: CALL_OW 74
43492: PPUSH
43493: CALL_OW 115
// until IsDead ( un ) ;
43497: LD_VAR 0 2
43501: PPUSH
43502: CALL_OW 301
43506: IFFALSE 43454
// end ;
43508: PPOPN 2
43510: END
// every 0 0$1 trigger StreamModeActive and sStu do
43511: LD_EXP 87
43515: IFFALSE 43523
43517: PUSH
43518: LD_EXP 126
43522: AND
43523: IFFALSE 43539
43525: GO 43527
43527: DISABLE
// begin ToLua ( displayStucuk(); ) ;
43528: LD_STRING displayStucuk();
43530: PPUSH
43531: CALL_OW 559
// ResetFog ;
43535: CALL_OW 335
// end ;
43539: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
43540: LD_EXP 87
43544: IFFALSE 43552
43546: PUSH
43547: LD_EXP 119
43551: AND
43552: IFFALSE 43693
43554: GO 43556
43556: DISABLE
43557: LD_INT 0
43559: PPUSH
43560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43561: LD_ADDR_VAR 0 2
43565: PUSH
43566: LD_INT 22
43568: PUSH
43569: LD_OWVAR 2
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 21
43580: PUSH
43581: LD_INT 1
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PPUSH
43592: CALL_OW 69
43596: ST_TO_ADDR
// if not tmp then
43597: LD_VAR 0 2
43601: NOT
43602: IFFALSE 43606
// exit ;
43604: GO 43693
// un := tmp [ rand ( 1 , tmp ) ] ;
43606: LD_ADDR_VAR 0 1
43610: PUSH
43611: LD_VAR 0 2
43615: PUSH
43616: LD_INT 1
43618: PPUSH
43619: LD_VAR 0 2
43623: PPUSH
43624: CALL_OW 12
43628: ARRAY
43629: ST_TO_ADDR
// SetSide ( un , 0 ) ;
43630: LD_VAR 0 1
43634: PPUSH
43635: LD_INT 0
43637: PPUSH
43638: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
43642: LD_VAR 0 1
43646: PPUSH
43647: LD_OWVAR 3
43651: PUSH
43652: LD_VAR 0 1
43656: DIFF
43657: PPUSH
43658: LD_VAR 0 1
43662: PPUSH
43663: CALL_OW 74
43667: PPUSH
43668: CALL_OW 115
// wait ( 0 0$20 ) ;
43672: LD_INT 700
43674: PPUSH
43675: CALL_OW 67
// SetSide ( un , your_side ) ;
43679: LD_VAR 0 1
43683: PPUSH
43684: LD_OWVAR 2
43688: PPUSH
43689: CALL_OW 235
// end ;
43693: PPOPN 2
43695: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
43696: LD_EXP 87
43700: IFFALSE 43708
43702: PUSH
43703: LD_EXP 120
43707: AND
43708: IFFALSE 43814
43710: GO 43712
43712: DISABLE
43713: LD_INT 0
43715: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43716: LD_ADDR_VAR 0 1
43720: PUSH
43721: LD_INT 22
43723: PUSH
43724: LD_OWVAR 2
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 2
43735: PUSH
43736: LD_INT 30
43738: PUSH
43739: LD_INT 0
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 30
43748: PUSH
43749: LD_INT 1
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: LIST
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PPUSH
43765: CALL_OW 69
43769: ST_TO_ADDR
// if not depot then
43770: LD_VAR 0 1
43774: NOT
43775: IFFALSE 43779
// exit ;
43777: GO 43814
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
43779: LD_VAR 0 1
43783: PUSH
43784: LD_INT 1
43786: ARRAY
43787: PPUSH
43788: CALL_OW 250
43792: PPUSH
43793: LD_VAR 0 1
43797: PUSH
43798: LD_INT 1
43800: ARRAY
43801: PPUSH
43802: CALL_OW 251
43806: PPUSH
43807: LD_INT 70
43809: PPUSH
43810: CALL_OW 495
// end ;
43814: PPOPN 1
43816: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
43817: LD_EXP 87
43821: IFFALSE 43829
43823: PUSH
43824: LD_EXP 121
43828: AND
43829: IFFALSE 44040
43831: GO 43833
43833: DISABLE
43834: LD_INT 0
43836: PPUSH
43837: PPUSH
43838: PPUSH
43839: PPUSH
43840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43841: LD_ADDR_VAR 0 5
43845: PUSH
43846: LD_INT 22
43848: PUSH
43849: LD_OWVAR 2
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 21
43860: PUSH
43861: LD_INT 1
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PPUSH
43872: CALL_OW 69
43876: ST_TO_ADDR
// if not tmp then
43877: LD_VAR 0 5
43881: NOT
43882: IFFALSE 43886
// exit ;
43884: GO 44040
// for i in tmp do
43886: LD_ADDR_VAR 0 1
43890: PUSH
43891: LD_VAR 0 5
43895: PUSH
43896: FOR_IN
43897: IFFALSE 44038
// begin d := rand ( 0 , 5 ) ;
43899: LD_ADDR_VAR 0 4
43903: PUSH
43904: LD_INT 0
43906: PPUSH
43907: LD_INT 5
43909: PPUSH
43910: CALL_OW 12
43914: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
43915: LD_ADDR_VAR 0 2
43919: PUSH
43920: LD_VAR 0 1
43924: PPUSH
43925: CALL_OW 250
43929: PPUSH
43930: LD_VAR 0 4
43934: PPUSH
43935: LD_INT 3
43937: PPUSH
43938: LD_INT 12
43940: PPUSH
43941: CALL_OW 12
43945: PPUSH
43946: CALL_OW 272
43950: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
43951: LD_ADDR_VAR 0 3
43955: PUSH
43956: LD_VAR 0 1
43960: PPUSH
43961: CALL_OW 251
43965: PPUSH
43966: LD_VAR 0 4
43970: PPUSH
43971: LD_INT 3
43973: PPUSH
43974: LD_INT 12
43976: PPUSH
43977: CALL_OW 12
43981: PPUSH
43982: CALL_OW 273
43986: ST_TO_ADDR
// if ValidHex ( x , y ) then
43987: LD_VAR 0 2
43991: PPUSH
43992: LD_VAR 0 3
43996: PPUSH
43997: CALL_OW 488
44001: IFFALSE 44036
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
44003: LD_VAR 0 1
44007: PPUSH
44008: LD_VAR 0 2
44012: PPUSH
44013: LD_VAR 0 3
44017: PPUSH
44018: LD_INT 3
44020: PPUSH
44021: LD_INT 6
44023: PPUSH
44024: CALL_OW 12
44028: PPUSH
44029: LD_INT 1
44031: PPUSH
44032: CALL_OW 483
// end ;
44036: GO 43896
44038: POP
44039: POP
// end ;
44040: PPOPN 5
44042: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
44043: LD_EXP 87
44047: IFFALSE 44055
44049: PUSH
44050: LD_EXP 122
44054: AND
44055: IFFALSE 44149
44057: GO 44059
44059: DISABLE
44060: LD_INT 0
44062: PPUSH
44063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
44064: LD_ADDR_VAR 0 2
44068: PUSH
44069: LD_INT 22
44071: PUSH
44072: LD_OWVAR 2
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 32
44083: PUSH
44084: LD_INT 1
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 21
44093: PUSH
44094: LD_INT 2
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: LIST
44105: PPUSH
44106: CALL_OW 69
44110: ST_TO_ADDR
// if not tmp then
44111: LD_VAR 0 2
44115: NOT
44116: IFFALSE 44120
// exit ;
44118: GO 44149
// for i in tmp do
44120: LD_ADDR_VAR 0 1
44124: PUSH
44125: LD_VAR 0 2
44129: PUSH
44130: FOR_IN
44131: IFFALSE 44147
// SetFuel ( i , 0 ) ;
44133: LD_VAR 0 1
44137: PPUSH
44138: LD_INT 0
44140: PPUSH
44141: CALL_OW 240
44145: GO 44130
44147: POP
44148: POP
// end ;
44149: PPOPN 2
44151: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
44152: LD_EXP 87
44156: IFFALSE 44164
44158: PUSH
44159: LD_EXP 123
44163: AND
44164: IFFALSE 44230
44166: GO 44168
44168: DISABLE
44169: LD_INT 0
44171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
44172: LD_ADDR_VAR 0 1
44176: PUSH
44177: LD_INT 22
44179: PUSH
44180: LD_OWVAR 2
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 30
44191: PUSH
44192: LD_INT 29
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PPUSH
44203: CALL_OW 69
44207: ST_TO_ADDR
// if not tmp then
44208: LD_VAR 0 1
44212: NOT
44213: IFFALSE 44217
// exit ;
44215: GO 44230
// DestroyUnit ( tmp [ 1 ] ) ;
44217: LD_VAR 0 1
44221: PUSH
44222: LD_INT 1
44224: ARRAY
44225: PPUSH
44226: CALL_OW 65
// end ;
44230: PPOPN 1
44232: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
44233: LD_EXP 87
44237: IFFALSE 44245
44239: PUSH
44240: LD_EXP 125
44244: AND
44245: IFFALSE 44374
44247: GO 44249
44249: DISABLE
44250: LD_INT 0
44252: PPUSH
// begin uc_side := 0 ;
44253: LD_ADDR_OWVAR 20
44257: PUSH
44258: LD_INT 0
44260: ST_TO_ADDR
// uc_nation := nation_arabian ;
44261: LD_ADDR_OWVAR 21
44265: PUSH
44266: LD_INT 2
44268: ST_TO_ADDR
// hc_gallery :=  ;
44269: LD_ADDR_OWVAR 33
44273: PUSH
44274: LD_STRING 
44276: ST_TO_ADDR
// hc_name :=  ;
44277: LD_ADDR_OWVAR 26
44281: PUSH
44282: LD_STRING 
44284: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
44285: LD_INT 1
44287: PPUSH
44288: LD_INT 11
44290: PPUSH
44291: LD_INT 10
44293: PPUSH
44294: CALL_OW 380
// un := CreateHuman ;
44298: LD_ADDR_VAR 0 1
44302: PUSH
44303: CALL_OW 44
44307: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
44308: LD_VAR 0 1
44312: PPUSH
44313: LD_INT 1
44315: PPUSH
44316: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
44320: LD_INT 35
44322: PPUSH
44323: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
44327: LD_VAR 0 1
44331: PPUSH
44332: LD_INT 22
44334: PUSH
44335: LD_OWVAR 2
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PPUSH
44344: CALL_OW 69
44348: PPUSH
44349: LD_VAR 0 1
44353: PPUSH
44354: CALL_OW 74
44358: PPUSH
44359: CALL_OW 115
// until IsDead ( un ) ;
44363: LD_VAR 0 1
44367: PPUSH
44368: CALL_OW 301
44372: IFFALSE 44320
// end ;
44374: PPOPN 1
44376: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
44377: LD_EXP 87
44381: IFFALSE 44389
44383: PUSH
44384: LD_EXP 127
44388: AND
44389: IFFALSE 44401
44391: GO 44393
44393: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
44394: LD_STRING earthquake(getX(game), 0, 32)
44396: PPUSH
44397: CALL_OW 559
44401: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
44402: LD_EXP 87
44406: IFFALSE 44414
44408: PUSH
44409: LD_EXP 128
44413: AND
44414: IFFALSE 44505
44416: GO 44418
44418: DISABLE
44419: LD_INT 0
44421: PPUSH
// begin enable ;
44422: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
44423: LD_ADDR_VAR 0 1
44427: PUSH
44428: LD_INT 22
44430: PUSH
44431: LD_OWVAR 2
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 21
44442: PUSH
44443: LD_INT 2
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 33
44452: PUSH
44453: LD_INT 3
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: LIST
44464: PPUSH
44465: CALL_OW 69
44469: ST_TO_ADDR
// if not tmp then
44470: LD_VAR 0 1
44474: NOT
44475: IFFALSE 44479
// exit ;
44477: GO 44505
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
44479: LD_VAR 0 1
44483: PUSH
44484: LD_INT 1
44486: PPUSH
44487: LD_VAR 0 1
44491: PPUSH
44492: CALL_OW 12
44496: ARRAY
44497: PPUSH
44498: LD_INT 1
44500: PPUSH
44501: CALL_OW 234
// end ;
44505: PPOPN 1
44507: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
44508: LD_EXP 87
44512: IFFALSE 44520
44514: PUSH
44515: LD_EXP 129
44519: AND
44520: IFFALSE 44661
44522: GO 44524
44524: DISABLE
44525: LD_INT 0
44527: PPUSH
44528: PPUSH
44529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44530: LD_ADDR_VAR 0 3
44534: PUSH
44535: LD_INT 22
44537: PUSH
44538: LD_OWVAR 2
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 25
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PPUSH
44561: CALL_OW 69
44565: ST_TO_ADDR
// if not tmp then
44566: LD_VAR 0 3
44570: NOT
44571: IFFALSE 44575
// exit ;
44573: GO 44661
// un := tmp [ rand ( 1 , tmp ) ] ;
44575: LD_ADDR_VAR 0 2
44579: PUSH
44580: LD_VAR 0 3
44584: PUSH
44585: LD_INT 1
44587: PPUSH
44588: LD_VAR 0 3
44592: PPUSH
44593: CALL_OW 12
44597: ARRAY
44598: ST_TO_ADDR
// if Crawls ( un ) then
44599: LD_VAR 0 2
44603: PPUSH
44604: CALL_OW 318
44608: IFFALSE 44619
// ComWalk ( un ) ;
44610: LD_VAR 0 2
44614: PPUSH
44615: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
44619: LD_VAR 0 2
44623: PPUSH
44624: LD_INT 9
44626: PPUSH
44627: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
44631: LD_INT 28
44633: PPUSH
44634: LD_OWVAR 2
44638: PPUSH
44639: LD_INT 2
44641: PPUSH
44642: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
44646: LD_INT 29
44648: PPUSH
44649: LD_OWVAR 2
44653: PPUSH
44654: LD_INT 2
44656: PPUSH
44657: CALL_OW 322
// end ;
44661: PPOPN 3
44663: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
44664: LD_EXP 87
44668: IFFALSE 44676
44670: PUSH
44671: LD_EXP 130
44675: AND
44676: IFFALSE 44787
44678: GO 44680
44680: DISABLE
44681: LD_INT 0
44683: PPUSH
44684: PPUSH
44685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44686: LD_ADDR_VAR 0 3
44690: PUSH
44691: LD_INT 22
44693: PUSH
44694: LD_OWVAR 2
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 25
44705: PUSH
44706: LD_INT 1
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PPUSH
44717: CALL_OW 69
44721: ST_TO_ADDR
// if not tmp then
44722: LD_VAR 0 3
44726: NOT
44727: IFFALSE 44731
// exit ;
44729: GO 44787
// un := tmp [ rand ( 1 , tmp ) ] ;
44731: LD_ADDR_VAR 0 2
44735: PUSH
44736: LD_VAR 0 3
44740: PUSH
44741: LD_INT 1
44743: PPUSH
44744: LD_VAR 0 3
44748: PPUSH
44749: CALL_OW 12
44753: ARRAY
44754: ST_TO_ADDR
// if Crawls ( un ) then
44755: LD_VAR 0 2
44759: PPUSH
44760: CALL_OW 318
44764: IFFALSE 44775
// ComWalk ( un ) ;
44766: LD_VAR 0 2
44770: PPUSH
44771: CALL_OW 138
// SetClass ( un , class_mortar ) ;
44775: LD_VAR 0 2
44779: PPUSH
44780: LD_INT 8
44782: PPUSH
44783: CALL_OW 336
// end ;
44787: PPOPN 3
44789: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
44790: LD_EXP 87
44794: IFFALSE 44802
44796: PUSH
44797: LD_EXP 131
44801: AND
44802: IFFALSE 44946
44804: GO 44806
44806: DISABLE
44807: LD_INT 0
44809: PPUSH
44810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
44811: LD_ADDR_VAR 0 2
44815: PUSH
44816: LD_INT 22
44818: PUSH
44819: LD_OWVAR 2
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 21
44830: PUSH
44831: LD_INT 2
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 2
44840: PUSH
44841: LD_INT 34
44843: PUSH
44844: LD_INT 12
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 34
44853: PUSH
44854: LD_INT 51
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 34
44863: PUSH
44864: LD_INT 32
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: LIST
44881: PPUSH
44882: CALL_OW 69
44886: ST_TO_ADDR
// if not tmp then
44887: LD_VAR 0 2
44891: NOT
44892: IFFALSE 44896
// exit ;
44894: GO 44946
// for i in tmp do
44896: LD_ADDR_VAR 0 1
44900: PUSH
44901: LD_VAR 0 2
44905: PUSH
44906: FOR_IN
44907: IFFALSE 44944
// if GetCargo ( i , mat_artifact ) = 0 then
44909: LD_VAR 0 1
44913: PPUSH
44914: LD_INT 4
44916: PPUSH
44917: CALL_OW 289
44921: PUSH
44922: LD_INT 0
44924: EQUAL
44925: IFFALSE 44942
// SetCargo ( i , mat_siberit , 100 ) ;
44927: LD_VAR 0 1
44931: PPUSH
44932: LD_INT 3
44934: PPUSH
44935: LD_INT 100
44937: PPUSH
44938: CALL_OW 290
44942: GO 44906
44944: POP
44945: POP
// end ;
44946: PPOPN 2
44948: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
44949: LD_EXP 87
44953: IFFALSE 44961
44955: PUSH
44956: LD_EXP 132
44960: AND
44961: IFFALSE 45144
44963: GO 44965
44965: DISABLE
44966: LD_INT 0
44968: PPUSH
44969: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
44970: LD_ADDR_VAR 0 2
44974: PUSH
44975: LD_INT 22
44977: PUSH
44978: LD_OWVAR 2
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PPUSH
44987: CALL_OW 69
44991: ST_TO_ADDR
// if not tmp then
44992: LD_VAR 0 2
44996: NOT
44997: IFFALSE 45001
// exit ;
44999: GO 45144
// for i := 1 to 2 do
45001: LD_ADDR_VAR 0 1
45005: PUSH
45006: DOUBLE
45007: LD_INT 1
45009: DEC
45010: ST_TO_ADDR
45011: LD_INT 2
45013: PUSH
45014: FOR_TO
45015: IFFALSE 45142
// begin uc_side := your_side ;
45017: LD_ADDR_OWVAR 20
45021: PUSH
45022: LD_OWVAR 2
45026: ST_TO_ADDR
// uc_nation := nation_american ;
45027: LD_ADDR_OWVAR 21
45031: PUSH
45032: LD_INT 1
45034: ST_TO_ADDR
// vc_chassis := us_morphling ;
45035: LD_ADDR_OWVAR 37
45039: PUSH
45040: LD_INT 5
45042: ST_TO_ADDR
// vc_engine := engine_siberite ;
45043: LD_ADDR_OWVAR 39
45047: PUSH
45048: LD_INT 3
45050: ST_TO_ADDR
// vc_control := control_computer ;
45051: LD_ADDR_OWVAR 38
45055: PUSH
45056: LD_INT 3
45058: ST_TO_ADDR
// vc_weapon := us_double_laser ;
45059: LD_ADDR_OWVAR 40
45063: PUSH
45064: LD_INT 10
45066: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
45067: LD_VAR 0 2
45071: PUSH
45072: LD_INT 1
45074: ARRAY
45075: PPUSH
45076: CALL_OW 310
45080: NOT
45081: IFFALSE 45128
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
45083: CALL_OW 45
45087: PPUSH
45088: LD_VAR 0 2
45092: PUSH
45093: LD_INT 1
45095: ARRAY
45096: PPUSH
45097: CALL_OW 250
45101: PPUSH
45102: LD_VAR 0 2
45106: PUSH
45107: LD_INT 1
45109: ARRAY
45110: PPUSH
45111: CALL_OW 251
45115: PPUSH
45116: LD_INT 12
45118: PPUSH
45119: LD_INT 1
45121: PPUSH
45122: CALL_OW 50
45126: GO 45140
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
45128: CALL_OW 45
45132: PPUSH
45133: LD_INT 1
45135: PPUSH
45136: CALL_OW 51
// end ;
45140: GO 45014
45142: POP
45143: POP
// end ;
45144: PPOPN 2
45146: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
45147: LD_EXP 87
45151: IFFALSE 45159
45153: PUSH
45154: LD_EXP 133
45158: AND
45159: IFFALSE 45381
45161: GO 45163
45163: DISABLE
45164: LD_INT 0
45166: PPUSH
45167: PPUSH
45168: PPUSH
45169: PPUSH
45170: PPUSH
45171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
45172: LD_ADDR_VAR 0 6
45176: PUSH
45177: LD_INT 22
45179: PUSH
45180: LD_OWVAR 2
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 21
45191: PUSH
45192: LD_INT 1
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 3
45201: PUSH
45202: LD_INT 23
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: LIST
45220: PPUSH
45221: CALL_OW 69
45225: ST_TO_ADDR
// if not tmp then
45226: LD_VAR 0 6
45230: NOT
45231: IFFALSE 45235
// exit ;
45233: GO 45381
// s1 := rand ( 1 , 4 ) ;
45235: LD_ADDR_VAR 0 2
45239: PUSH
45240: LD_INT 1
45242: PPUSH
45243: LD_INT 4
45245: PPUSH
45246: CALL_OW 12
45250: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
45251: LD_ADDR_VAR 0 4
45255: PUSH
45256: LD_VAR 0 6
45260: PUSH
45261: LD_INT 1
45263: ARRAY
45264: PPUSH
45265: LD_VAR 0 2
45269: PPUSH
45270: CALL_OW 259
45274: ST_TO_ADDR
// if s1 = 1 then
45275: LD_VAR 0 2
45279: PUSH
45280: LD_INT 1
45282: EQUAL
45283: IFFALSE 45303
// s2 := rand ( 2 , 4 ) else
45285: LD_ADDR_VAR 0 3
45289: PUSH
45290: LD_INT 2
45292: PPUSH
45293: LD_INT 4
45295: PPUSH
45296: CALL_OW 12
45300: ST_TO_ADDR
45301: GO 45311
// s2 := 1 ;
45303: LD_ADDR_VAR 0 3
45307: PUSH
45308: LD_INT 1
45310: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
45311: LD_ADDR_VAR 0 5
45315: PUSH
45316: LD_VAR 0 6
45320: PUSH
45321: LD_INT 1
45323: ARRAY
45324: PPUSH
45325: LD_VAR 0 3
45329: PPUSH
45330: CALL_OW 259
45334: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
45335: LD_VAR 0 6
45339: PUSH
45340: LD_INT 1
45342: ARRAY
45343: PPUSH
45344: LD_VAR 0 2
45348: PPUSH
45349: LD_VAR 0 5
45353: PPUSH
45354: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
45358: LD_VAR 0 6
45362: PUSH
45363: LD_INT 1
45365: ARRAY
45366: PPUSH
45367: LD_VAR 0 3
45371: PPUSH
45372: LD_VAR 0 4
45376: PPUSH
45377: CALL_OW 237
// end ;
45381: PPOPN 6
45383: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
45384: LD_EXP 87
45388: IFFALSE 45396
45390: PUSH
45391: LD_EXP 134
45395: AND
45396: IFFALSE 45475
45398: GO 45400
45400: DISABLE
45401: LD_INT 0
45403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
45404: LD_ADDR_VAR 0 1
45408: PUSH
45409: LD_INT 22
45411: PUSH
45412: LD_OWVAR 2
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 30
45423: PUSH
45424: LD_INT 3
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PPUSH
45435: CALL_OW 69
45439: ST_TO_ADDR
// if not tmp then
45440: LD_VAR 0 1
45444: NOT
45445: IFFALSE 45449
// exit ;
45447: GO 45475
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
45449: LD_VAR 0 1
45453: PUSH
45454: LD_INT 1
45456: PPUSH
45457: LD_VAR 0 1
45461: PPUSH
45462: CALL_OW 12
45466: ARRAY
45467: PPUSH
45468: LD_INT 1
45470: PPUSH
45471: CALL_OW 234
// end ;
45475: PPOPN 1
45477: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
45478: LD_EXP 87
45482: IFFALSE 45490
45484: PUSH
45485: LD_EXP 135
45489: AND
45490: IFFALSE 45602
45492: GO 45494
45494: DISABLE
45495: LD_INT 0
45497: PPUSH
45498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
45499: LD_ADDR_VAR 0 2
45503: PUSH
45504: LD_INT 22
45506: PUSH
45507: LD_OWVAR 2
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 2
45518: PUSH
45519: LD_INT 30
45521: PUSH
45522: LD_INT 27
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 30
45531: PUSH
45532: LD_INT 26
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 30
45541: PUSH
45542: LD_INT 28
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PPUSH
45559: CALL_OW 69
45563: ST_TO_ADDR
// if not tmp then
45564: LD_VAR 0 2
45568: NOT
45569: IFFALSE 45573
// exit ;
45571: GO 45602
// for i in tmp do
45573: LD_ADDR_VAR 0 1
45577: PUSH
45578: LD_VAR 0 2
45582: PUSH
45583: FOR_IN
45584: IFFALSE 45600
// SetLives ( i , 1 ) ;
45586: LD_VAR 0 1
45590: PPUSH
45591: LD_INT 1
45593: PPUSH
45594: CALL_OW 234
45598: GO 45583
45600: POP
45601: POP
// end ;
45602: PPOPN 2
45604: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
45605: LD_EXP 87
45609: IFFALSE 45617
45611: PUSH
45612: LD_EXP 136
45616: AND
45617: IFFALSE 45904
45619: GO 45621
45621: DISABLE
45622: LD_INT 0
45624: PPUSH
45625: PPUSH
45626: PPUSH
// begin i := rand ( 1 , 7 ) ;
45627: LD_ADDR_VAR 0 1
45631: PUSH
45632: LD_INT 1
45634: PPUSH
45635: LD_INT 7
45637: PPUSH
45638: CALL_OW 12
45642: ST_TO_ADDR
// case i of 1 :
45643: LD_VAR 0 1
45647: PUSH
45648: LD_INT 1
45650: DOUBLE
45651: EQUAL
45652: IFTRUE 45656
45654: GO 45666
45656: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
45657: LD_STRING earthquake(getX(game), 0, 32)
45659: PPUSH
45660: CALL_OW 559
45664: GO 45904
45666: LD_INT 2
45668: DOUBLE
45669: EQUAL
45670: IFTRUE 45674
45672: GO 45688
45674: POP
// begin ToLua ( displayStucuk(); ) ;
45675: LD_STRING displayStucuk();
45677: PPUSH
45678: CALL_OW 559
// ResetFog ;
45682: CALL_OW 335
// end ; 3 :
45686: GO 45904
45688: LD_INT 3
45690: DOUBLE
45691: EQUAL
45692: IFTRUE 45696
45694: GO 45800
45696: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
45697: LD_ADDR_VAR 0 2
45701: PUSH
45702: LD_INT 22
45704: PUSH
45705: LD_OWVAR 2
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 25
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PPUSH
45728: CALL_OW 69
45732: ST_TO_ADDR
// if not tmp then
45733: LD_VAR 0 2
45737: NOT
45738: IFFALSE 45742
// exit ;
45740: GO 45904
// un := tmp [ rand ( 1 , tmp ) ] ;
45742: LD_ADDR_VAR 0 3
45746: PUSH
45747: LD_VAR 0 2
45751: PUSH
45752: LD_INT 1
45754: PPUSH
45755: LD_VAR 0 2
45759: PPUSH
45760: CALL_OW 12
45764: ARRAY
45765: ST_TO_ADDR
// if Crawls ( un ) then
45766: LD_VAR 0 3
45770: PPUSH
45771: CALL_OW 318
45775: IFFALSE 45786
// ComWalk ( un ) ;
45777: LD_VAR 0 3
45781: PPUSH
45782: CALL_OW 138
// SetClass ( un , class_mortar ) ;
45786: LD_VAR 0 3
45790: PPUSH
45791: LD_INT 8
45793: PPUSH
45794: CALL_OW 336
// end ; 4 :
45798: GO 45904
45800: LD_INT 4
45802: DOUBLE
45803: EQUAL
45804: IFTRUE 45808
45806: GO 45882
45808: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
45809: LD_ADDR_VAR 0 2
45813: PUSH
45814: LD_INT 22
45816: PUSH
45817: LD_OWVAR 2
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 30
45828: PUSH
45829: LD_INT 29
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PPUSH
45840: CALL_OW 69
45844: ST_TO_ADDR
// if not tmp then
45845: LD_VAR 0 2
45849: NOT
45850: IFFALSE 45854
// exit ;
45852: GO 45904
// CenterNowOnUnits ( tmp [ 1 ] ) ;
45854: LD_VAR 0 2
45858: PUSH
45859: LD_INT 1
45861: ARRAY
45862: PPUSH
45863: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
45867: LD_VAR 0 2
45871: PUSH
45872: LD_INT 1
45874: ARRAY
45875: PPUSH
45876: CALL_OW 65
// end ; 5 .. 7 :
45880: GO 45904
45882: LD_INT 5
45884: DOUBLE
45885: GREATEREQUAL
45886: IFFALSE 45894
45888: LD_INT 7
45890: DOUBLE
45891: LESSEQUAL
45892: IFTRUE 45896
45894: GO 45903
45896: POP
// StreamSibBomb ; end ;
45897: CALL 42085 0 0
45901: GO 45904
45903: POP
// end ;
45904: PPOPN 3
45906: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
45907: LD_EXP 87
45911: IFFALSE 45919
45913: PUSH
45914: LD_EXP 137
45918: AND
45919: IFFALSE 46075
45921: GO 45923
45923: DISABLE
45924: LD_INT 0
45926: PPUSH
45927: PPUSH
45928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
45929: LD_ADDR_VAR 0 2
45933: PUSH
45934: LD_INT 81
45936: PUSH
45937: LD_OWVAR 2
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 2
45948: PUSH
45949: LD_INT 21
45951: PUSH
45952: LD_INT 1
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 21
45961: PUSH
45962: LD_INT 2
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: LIST
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PPUSH
45978: CALL_OW 69
45982: ST_TO_ADDR
// if not tmp then
45983: LD_VAR 0 2
45987: NOT
45988: IFFALSE 45992
// exit ;
45990: GO 46075
// p := 0 ;
45992: LD_ADDR_VAR 0 3
45996: PUSH
45997: LD_INT 0
45999: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
46000: LD_INT 35
46002: PPUSH
46003: CALL_OW 67
// p := p + 1 ;
46007: LD_ADDR_VAR 0 3
46011: PUSH
46012: LD_VAR 0 3
46016: PUSH
46017: LD_INT 1
46019: PLUS
46020: ST_TO_ADDR
// for i in tmp do
46021: LD_ADDR_VAR 0 1
46025: PUSH
46026: LD_VAR 0 2
46030: PUSH
46031: FOR_IN
46032: IFFALSE 46063
// if GetLives ( i ) < 1000 then
46034: LD_VAR 0 1
46038: PPUSH
46039: CALL_OW 256
46043: PUSH
46044: LD_INT 1000
46046: LESS
46047: IFFALSE 46061
// SetLives ( i , 1000 ) ;
46049: LD_VAR 0 1
46053: PPUSH
46054: LD_INT 1000
46056: PPUSH
46057: CALL_OW 234
46061: GO 46031
46063: POP
46064: POP
// until p > 20 ;
46065: LD_VAR 0 3
46069: PUSH
46070: LD_INT 20
46072: GREATER
46073: IFFALSE 46000
// end ;
46075: PPOPN 3
46077: END
// every 0 0$1 trigger StreamModeActive and sTime do
46078: LD_EXP 87
46082: IFFALSE 46090
46084: PUSH
46085: LD_EXP 138
46089: AND
46090: IFFALSE 46125
46092: GO 46094
46094: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
46095: LD_INT 28
46097: PPUSH
46098: LD_OWVAR 2
46102: PPUSH
46103: LD_INT 2
46105: PPUSH
46106: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
46110: LD_INT 30
46112: PPUSH
46113: LD_OWVAR 2
46117: PPUSH
46118: LD_INT 2
46120: PPUSH
46121: CALL_OW 322
// end ;
46125: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
46126: LD_EXP 87
46130: IFFALSE 46138
46132: PUSH
46133: LD_EXP 139
46137: AND
46138: IFFALSE 46259
46140: GO 46142
46142: DISABLE
46143: LD_INT 0
46145: PPUSH
46146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
46147: LD_ADDR_VAR 0 2
46151: PUSH
46152: LD_INT 22
46154: PUSH
46155: LD_OWVAR 2
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 21
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 3
46176: PUSH
46177: LD_INT 23
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: LIST
46195: PPUSH
46196: CALL_OW 69
46200: ST_TO_ADDR
// if not tmp then
46201: LD_VAR 0 2
46205: NOT
46206: IFFALSE 46210
// exit ;
46208: GO 46259
// for i in tmp do
46210: LD_ADDR_VAR 0 1
46214: PUSH
46215: LD_VAR 0 2
46219: PUSH
46220: FOR_IN
46221: IFFALSE 46257
// begin if Crawls ( i ) then
46223: LD_VAR 0 1
46227: PPUSH
46228: CALL_OW 318
46232: IFFALSE 46243
// ComWalk ( i ) ;
46234: LD_VAR 0 1
46238: PPUSH
46239: CALL_OW 138
// SetClass ( i , 2 ) ;
46243: LD_VAR 0 1
46247: PPUSH
46248: LD_INT 2
46250: PPUSH
46251: CALL_OW 336
// end ;
46255: GO 46220
46257: POP
46258: POP
// end ;
46259: PPOPN 2
46261: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
46262: LD_EXP 87
46266: IFFALSE 46274
46268: PUSH
46269: LD_EXP 140
46273: AND
46274: IFFALSE 46564
46276: GO 46278
46278: DISABLE
46279: LD_INT 0
46281: PPUSH
46282: PPUSH
46283: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
46284: LD_OWVAR 2
46288: PPUSH
46289: LD_INT 9
46291: PPUSH
46292: LD_INT 1
46294: PPUSH
46295: LD_INT 1
46297: PPUSH
46298: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
46302: LD_INT 9
46304: PPUSH
46305: LD_OWVAR 2
46309: PPUSH
46310: CALL_OW 343
// uc_side := 9 ;
46314: LD_ADDR_OWVAR 20
46318: PUSH
46319: LD_INT 9
46321: ST_TO_ADDR
// uc_nation := 2 ;
46322: LD_ADDR_OWVAR 21
46326: PUSH
46327: LD_INT 2
46329: ST_TO_ADDR
// hc_name := Dark Warrior ;
46330: LD_ADDR_OWVAR 26
46334: PUSH
46335: LD_STRING Dark Warrior
46337: ST_TO_ADDR
// hc_gallery :=  ;
46338: LD_ADDR_OWVAR 33
46342: PUSH
46343: LD_STRING 
46345: ST_TO_ADDR
// hc_noskilllimit := true ;
46346: LD_ADDR_OWVAR 76
46350: PUSH
46351: LD_INT 1
46353: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
46354: LD_ADDR_OWVAR 31
46358: PUSH
46359: LD_INT 30
46361: PUSH
46362: LD_INT 30
46364: PUSH
46365: LD_INT 30
46367: PUSH
46368: LD_INT 30
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: ST_TO_ADDR
// un := CreateHuman ;
46377: LD_ADDR_VAR 0 3
46381: PUSH
46382: CALL_OW 44
46386: ST_TO_ADDR
// hc_noskilllimit := false ;
46387: LD_ADDR_OWVAR 76
46391: PUSH
46392: LD_INT 0
46394: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
46395: LD_VAR 0 3
46399: PPUSH
46400: LD_INT 1
46402: PPUSH
46403: CALL_OW 51
// ToLua ( playRanger() ) ;
46407: LD_STRING playRanger()
46409: PPUSH
46410: CALL_OW 559
// p := 0 ;
46414: LD_ADDR_VAR 0 2
46418: PUSH
46419: LD_INT 0
46421: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
46422: LD_INT 35
46424: PPUSH
46425: CALL_OW 67
// p := p + 1 ;
46429: LD_ADDR_VAR 0 2
46433: PUSH
46434: LD_VAR 0 2
46438: PUSH
46439: LD_INT 1
46441: PLUS
46442: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
46443: LD_VAR 0 3
46447: PPUSH
46448: CALL_OW 256
46452: PUSH
46453: LD_INT 1000
46455: LESS
46456: IFFALSE 46470
// SetLives ( un , 1000 ) ;
46458: LD_VAR 0 3
46462: PPUSH
46463: LD_INT 1000
46465: PPUSH
46466: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
46470: LD_VAR 0 3
46474: PPUSH
46475: LD_INT 81
46477: PUSH
46478: LD_OWVAR 2
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 91
46489: PUSH
46490: LD_VAR 0 3
46494: PUSH
46495: LD_INT 30
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: LIST
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PPUSH
46507: CALL_OW 69
46511: PPUSH
46512: LD_VAR 0 3
46516: PPUSH
46517: CALL_OW 74
46521: PPUSH
46522: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
46526: LD_VAR 0 2
46530: PUSH
46531: LD_INT 80
46533: GREATER
46534: IFTRUE 46547
46536: PUSH
46537: LD_VAR 0 3
46541: PPUSH
46542: CALL_OW 301
46546: OR
46547: IFFALSE 46422
// if un then
46549: LD_VAR 0 3
46553: IFFALSE 46564
// RemoveUnit ( un ) ;
46555: LD_VAR 0 3
46559: PPUSH
46560: CALL_OW 64
// end ;
46564: PPOPN 3
46566: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
46567: LD_EXP 141
46571: IFFALSE 46687
46573: GO 46575
46575: DISABLE
46576: LD_INT 0
46578: PPUSH
46579: PPUSH
46580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
46581: LD_ADDR_VAR 0 2
46585: PUSH
46586: LD_INT 81
46588: PUSH
46589: LD_OWVAR 2
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 21
46600: PUSH
46601: LD_INT 1
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PPUSH
46612: CALL_OW 69
46616: ST_TO_ADDR
// ToLua ( playComputer() ) ;
46617: LD_STRING playComputer()
46619: PPUSH
46620: CALL_OW 559
// if not tmp then
46624: LD_VAR 0 2
46628: NOT
46629: IFFALSE 46633
// exit ;
46631: GO 46687
// for i in tmp do
46633: LD_ADDR_VAR 0 1
46637: PUSH
46638: LD_VAR 0 2
46642: PUSH
46643: FOR_IN
46644: IFFALSE 46685
// for j := 1 to 4 do
46646: LD_ADDR_VAR 0 3
46650: PUSH
46651: DOUBLE
46652: LD_INT 1
46654: DEC
46655: ST_TO_ADDR
46656: LD_INT 4
46658: PUSH
46659: FOR_TO
46660: IFFALSE 46681
// SetSkill ( i , j , 10 ) ;
46662: LD_VAR 0 1
46666: PPUSH
46667: LD_VAR 0 3
46671: PPUSH
46672: LD_INT 10
46674: PPUSH
46675: CALL_OW 237
46679: GO 46659
46681: POP
46682: POP
46683: GO 46643
46685: POP
46686: POP
// end ;
46687: PPOPN 3
46689: END
// every 0 0$1 trigger s30 do var i , tmp ;
46690: LD_EXP 142
46694: IFFALSE 46763
46696: GO 46698
46698: DISABLE
46699: LD_INT 0
46701: PPUSH
46702: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46703: LD_ADDR_VAR 0 2
46707: PUSH
46708: LD_INT 22
46710: PUSH
46711: LD_OWVAR 2
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PPUSH
46720: CALL_OW 69
46724: ST_TO_ADDR
// if not tmp then
46725: LD_VAR 0 2
46729: NOT
46730: IFFALSE 46734
// exit ;
46732: GO 46763
// for i in tmp do
46734: LD_ADDR_VAR 0 1
46738: PUSH
46739: LD_VAR 0 2
46743: PUSH
46744: FOR_IN
46745: IFFALSE 46761
// SetLives ( i , 300 ) ;
46747: LD_VAR 0 1
46751: PPUSH
46752: LD_INT 300
46754: PPUSH
46755: CALL_OW 234
46759: GO 46744
46761: POP
46762: POP
// end ;
46763: PPOPN 2
46765: END
// every 0 0$1 trigger s60 do var i , tmp ;
46766: LD_EXP 143
46770: IFFALSE 46839
46772: GO 46774
46774: DISABLE
46775: LD_INT 0
46777: PPUSH
46778: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46779: LD_ADDR_VAR 0 2
46783: PUSH
46784: LD_INT 22
46786: PUSH
46787: LD_OWVAR 2
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PPUSH
46796: CALL_OW 69
46800: ST_TO_ADDR
// if not tmp then
46801: LD_VAR 0 2
46805: NOT
46806: IFFALSE 46810
// exit ;
46808: GO 46839
// for i in tmp do
46810: LD_ADDR_VAR 0 1
46814: PUSH
46815: LD_VAR 0 2
46819: PUSH
46820: FOR_IN
46821: IFFALSE 46837
// SetLives ( i , 600 ) ;
46823: LD_VAR 0 1
46827: PPUSH
46828: LD_INT 600
46830: PPUSH
46831: CALL_OW 234
46835: GO 46820
46837: POP
46838: POP
// end ;
46839: PPOPN 2
46841: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46842: LD_INT 0
46844: PPUSH
// case cmd of 301 :
46845: LD_VAR 0 1
46849: PUSH
46850: LD_INT 301
46852: DOUBLE
46853: EQUAL
46854: IFTRUE 46858
46856: GO 46890
46858: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
46859: LD_VAR 0 6
46863: PPUSH
46864: LD_VAR 0 7
46868: PPUSH
46869: LD_VAR 0 8
46873: PPUSH
46874: LD_VAR 0 4
46878: PPUSH
46879: LD_VAR 0 5
46883: PPUSH
46884: CALL 48103 0 5
46888: GO 47011
46890: LD_INT 302
46892: DOUBLE
46893: EQUAL
46894: IFTRUE 46898
46896: GO 46935
46898: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
46899: LD_VAR 0 6
46903: PPUSH
46904: LD_VAR 0 7
46908: PPUSH
46909: LD_VAR 0 8
46913: PPUSH
46914: LD_VAR 0 9
46918: PPUSH
46919: LD_VAR 0 4
46923: PPUSH
46924: LD_VAR 0 5
46928: PPUSH
46929: CALL 48194 0 6
46933: GO 47011
46935: LD_INT 303
46937: DOUBLE
46938: EQUAL
46939: IFTRUE 46943
46941: GO 46980
46943: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
46944: LD_VAR 0 6
46948: PPUSH
46949: LD_VAR 0 7
46953: PPUSH
46954: LD_VAR 0 8
46958: PPUSH
46959: LD_VAR 0 9
46963: PPUSH
46964: LD_VAR 0 4
46968: PPUSH
46969: LD_VAR 0 5
46973: PPUSH
46974: CALL 47016 0 6
46978: GO 47011
46980: LD_INT 304
46982: DOUBLE
46983: EQUAL
46984: IFTRUE 46988
46986: GO 47010
46988: POP
// hHackTeleport ( unit , x , y ) ; end ;
46989: LD_VAR 0 2
46993: PPUSH
46994: LD_VAR 0 4
46998: PPUSH
46999: LD_VAR 0 5
47003: PPUSH
47004: CALL 48787 0 3
47008: GO 47011
47010: POP
// end ;
47011: LD_VAR 0 12
47015: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
47016: LD_INT 0
47018: PPUSH
47019: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
47020: LD_VAR 0 1
47024: PUSH
47025: LD_INT 1
47027: LESS
47028: IFTRUE 47040
47030: PUSH
47031: LD_VAR 0 1
47035: PUSH
47036: LD_INT 3
47038: GREATER
47039: OR
47040: IFTRUE 47058
47042: PUSH
47043: LD_VAR 0 5
47047: PPUSH
47048: LD_VAR 0 6
47052: PPUSH
47053: CALL_OW 428
47057: OR
47058: IFFALSE 47062
// exit ;
47060: GO 47790
// uc_side := your_side ;
47062: LD_ADDR_OWVAR 20
47066: PUSH
47067: LD_OWVAR 2
47071: ST_TO_ADDR
// uc_nation := nation ;
47072: LD_ADDR_OWVAR 21
47076: PUSH
47077: LD_VAR 0 1
47081: ST_TO_ADDR
// bc_level = 1 ;
47082: LD_ADDR_OWVAR 43
47086: PUSH
47087: LD_INT 1
47089: ST_TO_ADDR
// case btype of 1 :
47090: LD_VAR 0 2
47094: PUSH
47095: LD_INT 1
47097: DOUBLE
47098: EQUAL
47099: IFTRUE 47103
47101: GO 47114
47103: POP
// bc_type := b_depot ; 2 :
47104: LD_ADDR_OWVAR 42
47108: PUSH
47109: LD_INT 0
47111: ST_TO_ADDR
47112: GO 47734
47114: LD_INT 2
47116: DOUBLE
47117: EQUAL
47118: IFTRUE 47122
47120: GO 47133
47122: POP
// bc_type := b_warehouse ; 3 :
47123: LD_ADDR_OWVAR 42
47127: PUSH
47128: LD_INT 1
47130: ST_TO_ADDR
47131: GO 47734
47133: LD_INT 3
47135: DOUBLE
47136: EQUAL
47137: IFTRUE 47141
47139: GO 47152
47141: POP
// bc_type := b_lab ; 4 .. 9 :
47142: LD_ADDR_OWVAR 42
47146: PUSH
47147: LD_INT 6
47149: ST_TO_ADDR
47150: GO 47734
47152: LD_INT 4
47154: DOUBLE
47155: GREATEREQUAL
47156: IFFALSE 47164
47158: LD_INT 9
47160: DOUBLE
47161: LESSEQUAL
47162: IFTRUE 47166
47164: GO 47226
47166: POP
// begin bc_type := b_lab_half ;
47167: LD_ADDR_OWVAR 42
47171: PUSH
47172: LD_INT 7
47174: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
47175: LD_ADDR_OWVAR 44
47179: PUSH
47180: LD_INT 10
47182: PUSH
47183: LD_INT 11
47185: PUSH
47186: LD_INT 12
47188: PUSH
47189: LD_INT 15
47191: PUSH
47192: LD_INT 14
47194: PUSH
47195: LD_INT 13
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: PUSH
47206: LD_VAR 0 2
47210: PUSH
47211: LD_INT 3
47213: MINUS
47214: ARRAY
47215: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
47216: LD_ADDR_OWVAR 45
47220: PUSH
47221: LD_INT 9
47223: ST_TO_ADDR
// end ; 10 .. 13 :
47224: GO 47734
47226: LD_INT 10
47228: DOUBLE
47229: GREATEREQUAL
47230: IFFALSE 47238
47232: LD_INT 13
47234: DOUBLE
47235: LESSEQUAL
47236: IFTRUE 47240
47238: GO 47317
47240: POP
// begin bc_type := b_lab_full ;
47241: LD_ADDR_OWVAR 42
47245: PUSH
47246: LD_INT 8
47248: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
47249: LD_ADDR_OWVAR 44
47253: PUSH
47254: LD_INT 10
47256: PUSH
47257: LD_INT 12
47259: PUSH
47260: LD_INT 14
47262: PUSH
47263: LD_INT 13
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: PUSH
47272: LD_VAR 0 2
47276: PUSH
47277: LD_INT 9
47279: MINUS
47280: ARRAY
47281: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
47282: LD_ADDR_OWVAR 45
47286: PUSH
47287: LD_INT 11
47289: PUSH
47290: LD_INT 15
47292: PUSH
47293: LD_INT 12
47295: PUSH
47296: LD_INT 15
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: PUSH
47305: LD_VAR 0 2
47309: PUSH
47310: LD_INT 9
47312: MINUS
47313: ARRAY
47314: ST_TO_ADDR
// end ; 14 :
47315: GO 47734
47317: LD_INT 14
47319: DOUBLE
47320: EQUAL
47321: IFTRUE 47325
47323: GO 47336
47325: POP
// bc_type := b_workshop ; 15 :
47326: LD_ADDR_OWVAR 42
47330: PUSH
47331: LD_INT 2
47333: ST_TO_ADDR
47334: GO 47734
47336: LD_INT 15
47338: DOUBLE
47339: EQUAL
47340: IFTRUE 47344
47342: GO 47355
47344: POP
// bc_type := b_factory ; 16 :
47345: LD_ADDR_OWVAR 42
47349: PUSH
47350: LD_INT 3
47352: ST_TO_ADDR
47353: GO 47734
47355: LD_INT 16
47357: DOUBLE
47358: EQUAL
47359: IFTRUE 47363
47361: GO 47374
47363: POP
// bc_type := b_ext_gun ; 17 :
47364: LD_ADDR_OWVAR 42
47368: PUSH
47369: LD_INT 17
47371: ST_TO_ADDR
47372: GO 47734
47374: LD_INT 17
47376: DOUBLE
47377: EQUAL
47378: IFTRUE 47382
47380: GO 47410
47382: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
47383: LD_ADDR_OWVAR 42
47387: PUSH
47388: LD_INT 19
47390: PUSH
47391: LD_INT 23
47393: PUSH
47394: LD_INT 19
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: LIST
47401: PUSH
47402: LD_VAR 0 1
47406: ARRAY
47407: ST_TO_ADDR
47408: GO 47734
47410: LD_INT 18
47412: DOUBLE
47413: EQUAL
47414: IFTRUE 47418
47416: GO 47429
47418: POP
// bc_type := b_ext_radar ; 19 :
47419: LD_ADDR_OWVAR 42
47423: PUSH
47424: LD_INT 20
47426: ST_TO_ADDR
47427: GO 47734
47429: LD_INT 19
47431: DOUBLE
47432: EQUAL
47433: IFTRUE 47437
47435: GO 47448
47437: POP
// bc_type := b_ext_radio ; 20 :
47438: LD_ADDR_OWVAR 42
47442: PUSH
47443: LD_INT 22
47445: ST_TO_ADDR
47446: GO 47734
47448: LD_INT 20
47450: DOUBLE
47451: EQUAL
47452: IFTRUE 47456
47454: GO 47467
47456: POP
// bc_type := b_ext_siberium ; 21 :
47457: LD_ADDR_OWVAR 42
47461: PUSH
47462: LD_INT 21
47464: ST_TO_ADDR
47465: GO 47734
47467: LD_INT 21
47469: DOUBLE
47470: EQUAL
47471: IFTRUE 47475
47473: GO 47486
47475: POP
// bc_type := b_ext_computer ; 22 :
47476: LD_ADDR_OWVAR 42
47480: PUSH
47481: LD_INT 24
47483: ST_TO_ADDR
47484: GO 47734
47486: LD_INT 22
47488: DOUBLE
47489: EQUAL
47490: IFTRUE 47494
47492: GO 47505
47494: POP
// bc_type := b_ext_track ; 23 :
47495: LD_ADDR_OWVAR 42
47499: PUSH
47500: LD_INT 16
47502: ST_TO_ADDR
47503: GO 47734
47505: LD_INT 23
47507: DOUBLE
47508: EQUAL
47509: IFTRUE 47513
47511: GO 47524
47513: POP
// bc_type := b_ext_laser ; 24 :
47514: LD_ADDR_OWVAR 42
47518: PUSH
47519: LD_INT 25
47521: ST_TO_ADDR
47522: GO 47734
47524: LD_INT 24
47526: DOUBLE
47527: EQUAL
47528: IFTRUE 47532
47530: GO 47543
47532: POP
// bc_type := b_control_tower ; 25 :
47533: LD_ADDR_OWVAR 42
47537: PUSH
47538: LD_INT 36
47540: ST_TO_ADDR
47541: GO 47734
47543: LD_INT 25
47545: DOUBLE
47546: EQUAL
47547: IFTRUE 47551
47549: GO 47562
47551: POP
// bc_type := b_breastwork ; 26 :
47552: LD_ADDR_OWVAR 42
47556: PUSH
47557: LD_INT 31
47559: ST_TO_ADDR
47560: GO 47734
47562: LD_INT 26
47564: DOUBLE
47565: EQUAL
47566: IFTRUE 47570
47568: GO 47581
47570: POP
// bc_type := b_bunker ; 27 :
47571: LD_ADDR_OWVAR 42
47575: PUSH
47576: LD_INT 32
47578: ST_TO_ADDR
47579: GO 47734
47581: LD_INT 27
47583: DOUBLE
47584: EQUAL
47585: IFTRUE 47589
47587: GO 47600
47589: POP
// bc_type := b_turret ; 28 :
47590: LD_ADDR_OWVAR 42
47594: PUSH
47595: LD_INT 33
47597: ST_TO_ADDR
47598: GO 47734
47600: LD_INT 28
47602: DOUBLE
47603: EQUAL
47604: IFTRUE 47608
47606: GO 47619
47608: POP
// bc_type := b_armoury ; 29 :
47609: LD_ADDR_OWVAR 42
47613: PUSH
47614: LD_INT 4
47616: ST_TO_ADDR
47617: GO 47734
47619: LD_INT 29
47621: DOUBLE
47622: EQUAL
47623: IFTRUE 47627
47625: GO 47638
47627: POP
// bc_type := b_barracks ; 30 :
47628: LD_ADDR_OWVAR 42
47632: PUSH
47633: LD_INT 5
47635: ST_TO_ADDR
47636: GO 47734
47638: LD_INT 30
47640: DOUBLE
47641: EQUAL
47642: IFTRUE 47646
47644: GO 47657
47646: POP
// bc_type := b_solar_power ; 31 :
47647: LD_ADDR_OWVAR 42
47651: PUSH
47652: LD_INT 27
47654: ST_TO_ADDR
47655: GO 47734
47657: LD_INT 31
47659: DOUBLE
47660: EQUAL
47661: IFTRUE 47665
47663: GO 47676
47665: POP
// bc_type := b_oil_power ; 32 :
47666: LD_ADDR_OWVAR 42
47670: PUSH
47671: LD_INT 26
47673: ST_TO_ADDR
47674: GO 47734
47676: LD_INT 32
47678: DOUBLE
47679: EQUAL
47680: IFTRUE 47684
47682: GO 47695
47684: POP
// bc_type := b_siberite_power ; 33 :
47685: LD_ADDR_OWVAR 42
47689: PUSH
47690: LD_INT 28
47692: ST_TO_ADDR
47693: GO 47734
47695: LD_INT 33
47697: DOUBLE
47698: EQUAL
47699: IFTRUE 47703
47701: GO 47714
47703: POP
// bc_type := b_oil_mine ; 34 :
47704: LD_ADDR_OWVAR 42
47708: PUSH
47709: LD_INT 29
47711: ST_TO_ADDR
47712: GO 47734
47714: LD_INT 34
47716: DOUBLE
47717: EQUAL
47718: IFTRUE 47722
47720: GO 47733
47722: POP
// bc_type := b_siberite_mine ; end ;
47723: LD_ADDR_OWVAR 42
47727: PUSH
47728: LD_INT 30
47730: ST_TO_ADDR
47731: GO 47734
47733: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
47734: LD_ADDR_VAR 0 8
47738: PUSH
47739: LD_VAR 0 5
47743: PPUSH
47744: LD_VAR 0 6
47748: PPUSH
47749: LD_VAR 0 3
47753: PPUSH
47754: CALL_OW 47
47758: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
47759: LD_OWVAR 42
47763: PUSH
47764: LD_INT 32
47766: PUSH
47767: LD_INT 33
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: IN
47774: IFFALSE 47790
// PlaceWeaponTurret ( b , weapon ) ;
47776: LD_VAR 0 8
47780: PPUSH
47781: LD_VAR 0 4
47785: PPUSH
47786: CALL_OW 431
// end ;
47790: LD_VAR 0 7
47794: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
47795: LD_INT 0
47797: PPUSH
47798: PPUSH
47799: PPUSH
47800: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47801: LD_ADDR_VAR 0 4
47805: PUSH
47806: LD_INT 22
47808: PUSH
47809: LD_OWVAR 2
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 2
47820: PUSH
47821: LD_INT 30
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 30
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: LIST
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PPUSH
47850: CALL_OW 69
47854: ST_TO_ADDR
// if not tmp then
47855: LD_VAR 0 4
47859: NOT
47860: IFFALSE 47864
// exit ;
47862: GO 47923
// for i in tmp do
47864: LD_ADDR_VAR 0 2
47868: PUSH
47869: LD_VAR 0 4
47873: PUSH
47874: FOR_IN
47875: IFFALSE 47921
// for j = 1 to 3 do
47877: LD_ADDR_VAR 0 3
47881: PUSH
47882: DOUBLE
47883: LD_INT 1
47885: DEC
47886: ST_TO_ADDR
47887: LD_INT 3
47889: PUSH
47890: FOR_TO
47891: IFFALSE 47917
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
47893: LD_VAR 0 2
47897: PPUSH
47898: CALL_OW 274
47902: PPUSH
47903: LD_VAR 0 3
47907: PPUSH
47908: LD_INT 99999
47910: PPUSH
47911: CALL_OW 277
47915: GO 47890
47917: POP
47918: POP
47919: GO 47874
47921: POP
47922: POP
// end ;
47923: LD_VAR 0 1
47927: RET
// export function hHackSetLevel10 ; var i , j ; begin
47928: LD_INT 0
47930: PPUSH
47931: PPUSH
47932: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
47933: LD_ADDR_VAR 0 2
47937: PUSH
47938: LD_INT 21
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PPUSH
47948: CALL_OW 69
47952: PUSH
47953: FOR_IN
47954: IFFALSE 48006
// if IsSelected ( i ) then
47956: LD_VAR 0 2
47960: PPUSH
47961: CALL_OW 306
47965: IFFALSE 48004
// begin for j := 1 to 4 do
47967: LD_ADDR_VAR 0 3
47971: PUSH
47972: DOUBLE
47973: LD_INT 1
47975: DEC
47976: ST_TO_ADDR
47977: LD_INT 4
47979: PUSH
47980: FOR_TO
47981: IFFALSE 48002
// SetSkill ( i , j , 10 ) ;
47983: LD_VAR 0 2
47987: PPUSH
47988: LD_VAR 0 3
47992: PPUSH
47993: LD_INT 10
47995: PPUSH
47996: CALL_OW 237
48000: GO 47980
48002: POP
48003: POP
// end ;
48004: GO 47953
48006: POP
48007: POP
// end ;
48008: LD_VAR 0 1
48012: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
48013: LD_INT 0
48015: PPUSH
48016: PPUSH
48017: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
48018: LD_ADDR_VAR 0 2
48022: PUSH
48023: LD_INT 22
48025: PUSH
48026: LD_OWVAR 2
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 21
48037: PUSH
48038: LD_INT 1
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PPUSH
48049: CALL_OW 69
48053: PUSH
48054: FOR_IN
48055: IFFALSE 48096
// begin for j := 1 to 4 do
48057: LD_ADDR_VAR 0 3
48061: PUSH
48062: DOUBLE
48063: LD_INT 1
48065: DEC
48066: ST_TO_ADDR
48067: LD_INT 4
48069: PUSH
48070: FOR_TO
48071: IFFALSE 48092
// SetSkill ( i , j , 10 ) ;
48073: LD_VAR 0 2
48077: PPUSH
48078: LD_VAR 0 3
48082: PPUSH
48083: LD_INT 10
48085: PPUSH
48086: CALL_OW 237
48090: GO 48070
48092: POP
48093: POP
// end ;
48094: GO 48054
48096: POP
48097: POP
// end ;
48098: LD_VAR 0 1
48102: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
48103: LD_INT 0
48105: PPUSH
// uc_side := your_side ;
48106: LD_ADDR_OWVAR 20
48110: PUSH
48111: LD_OWVAR 2
48115: ST_TO_ADDR
// uc_nation := nation ;
48116: LD_ADDR_OWVAR 21
48120: PUSH
48121: LD_VAR 0 1
48125: ST_TO_ADDR
// InitHc ;
48126: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
48130: LD_INT 0
48132: PPUSH
48133: LD_VAR 0 2
48137: PPUSH
48138: LD_VAR 0 3
48142: PPUSH
48143: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
48147: LD_VAR 0 4
48151: PPUSH
48152: LD_VAR 0 5
48156: PPUSH
48157: CALL_OW 428
48161: PUSH
48162: LD_INT 0
48164: EQUAL
48165: IFFALSE 48189
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
48167: CALL_OW 44
48171: PPUSH
48172: LD_VAR 0 4
48176: PPUSH
48177: LD_VAR 0 5
48181: PPUSH
48182: LD_INT 1
48184: PPUSH
48185: CALL_OW 48
// end ;
48189: LD_VAR 0 6
48193: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
48194: LD_INT 0
48196: PPUSH
48197: PPUSH
// uc_side := your_side ;
48198: LD_ADDR_OWVAR 20
48202: PUSH
48203: LD_OWVAR 2
48207: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
48208: LD_VAR 0 1
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: LD_INT 2
48218: PUSH
48219: LD_INT 3
48221: PUSH
48222: LD_INT 4
48224: PUSH
48225: LD_INT 5
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: IN
48235: IFFALSE 48247
// uc_nation := nation_american else
48237: LD_ADDR_OWVAR 21
48241: PUSH
48242: LD_INT 1
48244: ST_TO_ADDR
48245: GO 48290
// if chassis in [ 11 , 12 , 13 , 14 ] then
48247: LD_VAR 0 1
48251: PUSH
48252: LD_INT 11
48254: PUSH
48255: LD_INT 12
48257: PUSH
48258: LD_INT 13
48260: PUSH
48261: LD_INT 14
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: IN
48270: IFFALSE 48282
// uc_nation := nation_arabian else
48272: LD_ADDR_OWVAR 21
48276: PUSH
48277: LD_INT 2
48279: ST_TO_ADDR
48280: GO 48290
// uc_nation := nation_russian ;
48282: LD_ADDR_OWVAR 21
48286: PUSH
48287: LD_INT 3
48289: ST_TO_ADDR
// vc_chassis := chassis ;
48290: LD_ADDR_OWVAR 37
48294: PUSH
48295: LD_VAR 0 1
48299: ST_TO_ADDR
// vc_engine := engine ;
48300: LD_ADDR_OWVAR 39
48304: PUSH
48305: LD_VAR 0 2
48309: ST_TO_ADDR
// vc_control := control ;
48310: LD_ADDR_OWVAR 38
48314: PUSH
48315: LD_VAR 0 3
48319: ST_TO_ADDR
// vc_weapon := weapon ;
48320: LD_ADDR_OWVAR 40
48324: PUSH
48325: LD_VAR 0 4
48329: ST_TO_ADDR
// un := CreateVehicle ;
48330: LD_ADDR_VAR 0 8
48334: PUSH
48335: CALL_OW 45
48339: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
48340: LD_VAR 0 8
48344: PPUSH
48345: LD_INT 0
48347: PPUSH
48348: LD_INT 5
48350: PPUSH
48351: CALL_OW 12
48355: PPUSH
48356: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
48360: LD_VAR 0 8
48364: PPUSH
48365: LD_VAR 0 5
48369: PPUSH
48370: LD_VAR 0 6
48374: PPUSH
48375: LD_INT 1
48377: PPUSH
48378: CALL_OW 48
// end ;
48382: LD_VAR 0 7
48386: RET
// export hInvincible ; every 1 do
48387: GO 48389
48389: DISABLE
// hInvincible := [ ] ;
48390: LD_ADDR_EXP 144
48394: PUSH
48395: EMPTY
48396: ST_TO_ADDR
48397: END
// every 10 do var i ;
48398: GO 48400
48400: DISABLE
48401: LD_INT 0
48403: PPUSH
// begin enable ;
48404: ENABLE
// if not hInvincible then
48405: LD_EXP 144
48409: NOT
48410: IFFALSE 48414
// exit ;
48412: GO 48458
// for i in hInvincible do
48414: LD_ADDR_VAR 0 1
48418: PUSH
48419: LD_EXP 144
48423: PUSH
48424: FOR_IN
48425: IFFALSE 48456
// if GetLives ( i ) < 1000 then
48427: LD_VAR 0 1
48431: PPUSH
48432: CALL_OW 256
48436: PUSH
48437: LD_INT 1000
48439: LESS
48440: IFFALSE 48454
// SetLives ( i , 1000 ) ;
48442: LD_VAR 0 1
48446: PPUSH
48447: LD_INT 1000
48449: PPUSH
48450: CALL_OW 234
48454: GO 48424
48456: POP
48457: POP
// end ;
48458: PPOPN 1
48460: END
// export function hHackInvincible ; var i ; begin
48461: LD_INT 0
48463: PPUSH
48464: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
48465: LD_ADDR_VAR 0 2
48469: PUSH
48470: LD_INT 2
48472: PUSH
48473: LD_INT 21
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 21
48485: PUSH
48486: LD_INT 2
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: LIST
48497: PPUSH
48498: CALL_OW 69
48502: PUSH
48503: FOR_IN
48504: IFFALSE 48565
// if IsSelected ( i ) then
48506: LD_VAR 0 2
48510: PPUSH
48511: CALL_OW 306
48515: IFFALSE 48563
// begin if i in hInvincible then
48517: LD_VAR 0 2
48521: PUSH
48522: LD_EXP 144
48526: IN
48527: IFFALSE 48547
// hInvincible := hInvincible diff i else
48529: LD_ADDR_EXP 144
48533: PUSH
48534: LD_EXP 144
48538: PUSH
48539: LD_VAR 0 2
48543: DIFF
48544: ST_TO_ADDR
48545: GO 48563
// hInvincible := hInvincible union i ;
48547: LD_ADDR_EXP 144
48551: PUSH
48552: LD_EXP 144
48556: PUSH
48557: LD_VAR 0 2
48561: UNION
48562: ST_TO_ADDR
// end ;
48563: GO 48503
48565: POP
48566: POP
// end ;
48567: LD_VAR 0 1
48571: RET
// export function hHackInvisible ; var i , j ; begin
48572: LD_INT 0
48574: PPUSH
48575: PPUSH
48576: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
48577: LD_ADDR_VAR 0 2
48581: PUSH
48582: LD_INT 21
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PPUSH
48592: CALL_OW 69
48596: PUSH
48597: FOR_IN
48598: IFFALSE 48622
// if IsSelected ( i ) then
48600: LD_VAR 0 2
48604: PPUSH
48605: CALL_OW 306
48609: IFFALSE 48620
// ComForceInvisible ( i ) ;
48611: LD_VAR 0 2
48615: PPUSH
48616: CALL_OW 496
48620: GO 48597
48622: POP
48623: POP
// end ;
48624: LD_VAR 0 1
48628: RET
// export function hHackChangeYourSide ; begin
48629: LD_INT 0
48631: PPUSH
// if your_side = 8 then
48632: LD_OWVAR 2
48636: PUSH
48637: LD_INT 8
48639: EQUAL
48640: IFFALSE 48652
// your_side := 0 else
48642: LD_ADDR_OWVAR 2
48646: PUSH
48647: LD_INT 0
48649: ST_TO_ADDR
48650: GO 48666
// your_side := your_side + 1 ;
48652: LD_ADDR_OWVAR 2
48656: PUSH
48657: LD_OWVAR 2
48661: PUSH
48662: LD_INT 1
48664: PLUS
48665: ST_TO_ADDR
// end ;
48666: LD_VAR 0 1
48670: RET
// export function hHackChangeUnitSide ; var i , j ; begin
48671: LD_INT 0
48673: PPUSH
48674: PPUSH
48675: PPUSH
// for i in all_units do
48676: LD_ADDR_VAR 0 2
48680: PUSH
48681: LD_OWVAR 3
48685: PUSH
48686: FOR_IN
48687: IFFALSE 48765
// if IsSelected ( i ) then
48689: LD_VAR 0 2
48693: PPUSH
48694: CALL_OW 306
48698: IFFALSE 48763
// begin j := GetSide ( i ) ;
48700: LD_ADDR_VAR 0 3
48704: PUSH
48705: LD_VAR 0 2
48709: PPUSH
48710: CALL_OW 255
48714: ST_TO_ADDR
// if j = 8 then
48715: LD_VAR 0 3
48719: PUSH
48720: LD_INT 8
48722: EQUAL
48723: IFFALSE 48735
// j := 0 else
48725: LD_ADDR_VAR 0 3
48729: PUSH
48730: LD_INT 0
48732: ST_TO_ADDR
48733: GO 48749
// j := j + 1 ;
48735: LD_ADDR_VAR 0 3
48739: PUSH
48740: LD_VAR 0 3
48744: PUSH
48745: LD_INT 1
48747: PLUS
48748: ST_TO_ADDR
// SetSide ( i , j ) ;
48749: LD_VAR 0 2
48753: PPUSH
48754: LD_VAR 0 3
48758: PPUSH
48759: CALL_OW 235
// end ;
48763: GO 48686
48765: POP
48766: POP
// end ;
48767: LD_VAR 0 1
48771: RET
// export function hHackFog ; begin
48772: LD_INT 0
48774: PPUSH
// FogOff ( true ) ;
48775: LD_INT 1
48777: PPUSH
48778: CALL_OW 344
// end ;
48782: LD_VAR 0 1
48786: RET
// export function hHackTeleport ( unit , x , y ) ; begin
48787: LD_INT 0
48789: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
48790: LD_VAR 0 1
48794: PPUSH
48795: LD_VAR 0 2
48799: PPUSH
48800: LD_VAR 0 3
48804: PPUSH
48805: LD_INT 1
48807: PPUSH
48808: LD_INT 1
48810: PPUSH
48811: CALL_OW 483
// CenterOnXY ( x , y ) ;
48815: LD_VAR 0 2
48819: PPUSH
48820: LD_VAR 0 3
48824: PPUSH
48825: CALL_OW 84
// end ;
48829: LD_VAR 0 4
48833: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
48834: LD_INT 0
48836: PPUSH
48837: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
48838: LD_VAR 0 1
48842: NOT
48843: IFTRUE 48862
48845: PUSH
48846: LD_VAR 0 2
48850: PPUSH
48851: LD_VAR 0 3
48855: PPUSH
48856: CALL_OW 488
48860: NOT
48861: OR
48862: IFTRUE 48897
48864: PUSH
48865: LD_VAR 0 1
48869: PPUSH
48870: CALL_OW 266
48874: PUSH
48875: LD_INT 3
48877: NONEQUAL
48878: IFFALSE 48896
48880: PUSH
48881: LD_VAR 0 1
48885: PPUSH
48886: CALL_OW 247
48890: PUSH
48891: LD_INT 1
48893: EQUAL
48894: NOT
48895: AND
48896: OR
48897: IFFALSE 48901
// exit ;
48899: GO 49183
// if GetType ( factory ) = unit_human then
48901: LD_VAR 0 1
48905: PPUSH
48906: CALL_OW 247
48910: PUSH
48911: LD_INT 1
48913: EQUAL
48914: IFFALSE 48931
// factory := IsInUnit ( factory ) ;
48916: LD_ADDR_VAR 0 1
48920: PUSH
48921: LD_VAR 0 1
48925: PPUSH
48926: CALL_OW 310
48930: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
48931: LD_VAR 0 1
48935: PPUSH
48936: CALL_OW 266
48940: PUSH
48941: LD_INT 3
48943: NONEQUAL
48944: IFFALSE 48948
// exit ;
48946: GO 49183
// for i := 1 to Count ( factoryWaypoints ) do
48948: LD_ADDR_VAR 0 5
48952: PUSH
48953: DOUBLE
48954: LD_INT 1
48956: DEC
48957: ST_TO_ADDR
48958: LD_EXP 145
48962: PPUSH
48963: CALL 57915 0 1
48967: PUSH
48968: FOR_TO
48969: IFFALSE 49131
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
48971: LD_VAR 0 2
48975: PPUSH
48976: LD_VAR 0 3
48980: PPUSH
48981: CALL_OW 428
48985: PUSH
48986: LD_EXP 145
48990: PUSH
48991: LD_VAR 0 5
48995: ARRAY
48996: PUSH
48997: LD_INT 2
48999: ARRAY
49000: EQUAL
49001: IFFALSE 49033
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
49003: LD_ADDR_EXP 145
49007: PUSH
49008: LD_EXP 145
49012: PPUSH
49013: LD_VAR 0 5
49017: PPUSH
49018: CALL_OW 3
49022: ST_TO_ADDR
// UpdateFactoryWaypoints ;
49023: CALL 49188 0 0
// exit ;
49027: POP
49028: POP
49029: GO 49183
// end else
49031: GO 49129
// if factory = factoryWaypoints [ i ] [ 2 ] then
49033: LD_VAR 0 1
49037: PUSH
49038: LD_EXP 145
49042: PUSH
49043: LD_VAR 0 5
49047: ARRAY
49048: PUSH
49049: LD_INT 2
49051: ARRAY
49052: EQUAL
49053: IFFALSE 49129
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
49055: LD_ADDR_EXP 145
49059: PUSH
49060: LD_EXP 145
49064: PPUSH
49065: LD_VAR 0 5
49069: PPUSH
49070: CALL_OW 3
49074: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
49075: LD_ADDR_EXP 145
49079: PUSH
49080: LD_EXP 145
49084: PPUSH
49085: LD_VAR 0 1
49089: PPUSH
49090: CALL_OW 255
49094: PUSH
49095: LD_VAR 0 1
49099: PUSH
49100: LD_VAR 0 2
49104: PUSH
49105: LD_VAR 0 3
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: PPUSH
49116: CALL 93847 0 2
49120: ST_TO_ADDR
// UpdateFactoryWaypoints ;
49121: CALL 49188 0 0
// exit ;
49125: POP
49126: POP
49127: GO 49183
// end ; end ;
49129: GO 48968
49131: POP
49132: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
49133: LD_ADDR_EXP 145
49137: PUSH
49138: LD_EXP 145
49142: PPUSH
49143: LD_VAR 0 1
49147: PPUSH
49148: CALL_OW 255
49152: PUSH
49153: LD_VAR 0 1
49157: PUSH
49158: LD_VAR 0 2
49162: PUSH
49163: LD_VAR 0 3
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: PPUSH
49174: CALL 93847 0 2
49178: ST_TO_ADDR
// UpdateFactoryWaypoints ;
49179: CALL 49188 0 0
// end ;
49183: LD_VAR 0 4
49187: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
49188: LD_INT 0
49190: PPUSH
49191: PPUSH
49192: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
49193: LD_STRING resetFactoryWaypoint();
49195: PPUSH
49196: CALL_OW 559
// if factoryWaypoints then
49200: LD_EXP 145
49204: IFFALSE 49325
// begin list := factoryWaypoints ;
49206: LD_ADDR_VAR 0 3
49210: PUSH
49211: LD_EXP 145
49215: ST_TO_ADDR
// for i := 1 to list do
49216: LD_ADDR_VAR 0 2
49220: PUSH
49221: DOUBLE
49222: LD_INT 1
49224: DEC
49225: ST_TO_ADDR
49226: LD_VAR 0 3
49230: PUSH
49231: FOR_TO
49232: IFFALSE 49323
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
49234: LD_STRING setFactoryWaypointXY(
49236: PUSH
49237: LD_VAR 0 3
49241: PUSH
49242: LD_VAR 0 2
49246: ARRAY
49247: PUSH
49248: LD_INT 1
49250: ARRAY
49251: STR
49252: PUSH
49253: LD_STRING ,
49255: STR
49256: PUSH
49257: LD_VAR 0 3
49261: PUSH
49262: LD_VAR 0 2
49266: ARRAY
49267: PUSH
49268: LD_INT 2
49270: ARRAY
49271: STR
49272: PUSH
49273: LD_STRING ,
49275: STR
49276: PUSH
49277: LD_VAR 0 3
49281: PUSH
49282: LD_VAR 0 2
49286: ARRAY
49287: PUSH
49288: LD_INT 3
49290: ARRAY
49291: STR
49292: PUSH
49293: LD_STRING ,
49295: STR
49296: PUSH
49297: LD_VAR 0 3
49301: PUSH
49302: LD_VAR 0 2
49306: ARRAY
49307: PUSH
49308: LD_INT 4
49310: ARRAY
49311: STR
49312: PUSH
49313: LD_STRING )
49315: STR
49316: PPUSH
49317: CALL_OW 559
49321: GO 49231
49323: POP
49324: POP
// end ; end ;
49325: LD_VAR 0 1
49329: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
49330: LD_INT 0
49332: PPUSH
// if HexInfo ( x , y ) = warehouse then
49333: LD_VAR 0 2
49337: PPUSH
49338: LD_VAR 0 3
49342: PPUSH
49343: CALL_OW 428
49347: PUSH
49348: LD_VAR 0 1
49352: EQUAL
49353: IFFALSE 49380
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
49355: LD_ADDR_EXP 147
49359: PUSH
49360: LD_EXP 147
49364: PPUSH
49365: LD_VAR 0 1
49369: PPUSH
49370: LD_INT 0
49372: PPUSH
49373: CALL_OW 1
49377: ST_TO_ADDR
49378: GO 49431
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
49380: LD_ADDR_EXP 147
49384: PUSH
49385: LD_EXP 147
49389: PPUSH
49390: LD_VAR 0 1
49394: PPUSH
49395: LD_VAR 0 1
49399: PPUSH
49400: CALL_OW 255
49404: PUSH
49405: LD_VAR 0 1
49409: PUSH
49410: LD_VAR 0 2
49414: PUSH
49415: LD_VAR 0 3
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: PPUSH
49426: CALL_OW 1
49430: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
49431: CALL 49440 0 0
// end ;
49435: LD_VAR 0 4
49439: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
49440: LD_INT 0
49442: PPUSH
49443: PPUSH
49444: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
49445: LD_STRING resetWarehouseGatheringPoints();
49447: PPUSH
49448: CALL_OW 559
// if warehouseGatheringPoints then
49452: LD_EXP 147
49456: IFFALSE 49582
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
49458: LD_ADDR_VAR 0 3
49462: PUSH
49463: LD_EXP 147
49467: PPUSH
49468: CALL 97781 0 1
49472: ST_TO_ADDR
// for i := 1 to list do
49473: LD_ADDR_VAR 0 2
49477: PUSH
49478: DOUBLE
49479: LD_INT 1
49481: DEC
49482: ST_TO_ADDR
49483: LD_VAR 0 3
49487: PUSH
49488: FOR_TO
49489: IFFALSE 49580
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
49491: LD_STRING setWarehouseGatheringPointXY(
49493: PUSH
49494: LD_VAR 0 3
49498: PUSH
49499: LD_VAR 0 2
49503: ARRAY
49504: PUSH
49505: LD_INT 1
49507: ARRAY
49508: STR
49509: PUSH
49510: LD_STRING ,
49512: STR
49513: PUSH
49514: LD_VAR 0 3
49518: PUSH
49519: LD_VAR 0 2
49523: ARRAY
49524: PUSH
49525: LD_INT 2
49527: ARRAY
49528: STR
49529: PUSH
49530: LD_STRING ,
49532: STR
49533: PUSH
49534: LD_VAR 0 3
49538: PUSH
49539: LD_VAR 0 2
49543: ARRAY
49544: PUSH
49545: LD_INT 3
49547: ARRAY
49548: STR
49549: PUSH
49550: LD_STRING ,
49552: STR
49553: PUSH
49554: LD_VAR 0 3
49558: PUSH
49559: LD_VAR 0 2
49563: ARRAY
49564: PUSH
49565: LD_INT 4
49567: ARRAY
49568: STR
49569: PUSH
49570: LD_STRING )
49572: STR
49573: PPUSH
49574: CALL_OW 559
49578: GO 49488
49580: POP
49581: POP
// end ; end ;
49582: LD_VAR 0 1
49586: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
49587: LD_EXP 147
49591: IFFALSE 50286
49593: GO 49595
49595: DISABLE
49596: LD_INT 0
49598: PPUSH
49599: PPUSH
49600: PPUSH
49601: PPUSH
49602: PPUSH
49603: PPUSH
49604: PPUSH
49605: PPUSH
49606: PPUSH
// begin enable ;
49607: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
49608: LD_ADDR_VAR 0 3
49612: PUSH
49613: LD_EXP 147
49617: PPUSH
49618: CALL 97781 0 1
49622: ST_TO_ADDR
// if not list then
49623: LD_VAR 0 3
49627: NOT
49628: IFFALSE 49632
// exit ;
49630: GO 50286
// for i := 1 to list do
49632: LD_ADDR_VAR 0 1
49636: PUSH
49637: DOUBLE
49638: LD_INT 1
49640: DEC
49641: ST_TO_ADDR
49642: LD_VAR 0 3
49646: PUSH
49647: FOR_TO
49648: IFFALSE 50284
// begin depot := list [ i ] [ 2 ] ;
49650: LD_ADDR_VAR 0 8
49654: PUSH
49655: LD_VAR 0 3
49659: PUSH
49660: LD_VAR 0 1
49664: ARRAY
49665: PUSH
49666: LD_INT 2
49668: ARRAY
49669: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
49670: LD_ADDR_VAR 0 5
49674: PUSH
49675: LD_VAR 0 3
49679: PUSH
49680: LD_VAR 0 1
49684: ARRAY
49685: PUSH
49686: LD_INT 1
49688: ARRAY
49689: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
49690: LD_VAR 0 8
49694: PPUSH
49695: CALL_OW 301
49699: IFTRUE 49718
49701: PUSH
49702: LD_VAR 0 5
49706: PUSH
49707: LD_VAR 0 8
49711: PPUSH
49712: CALL_OW 255
49716: NONEQUAL
49717: OR
49718: IFFALSE 49747
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
49720: LD_ADDR_EXP 147
49724: PUSH
49725: LD_EXP 147
49729: PPUSH
49730: LD_VAR 0 8
49734: PPUSH
49735: LD_INT 0
49737: PPUSH
49738: CALL_OW 1
49742: ST_TO_ADDR
// exit ;
49743: POP
49744: POP
49745: GO 50286
// end ; x := list [ i ] [ 3 ] ;
49747: LD_ADDR_VAR 0 6
49751: PUSH
49752: LD_VAR 0 3
49756: PUSH
49757: LD_VAR 0 1
49761: ARRAY
49762: PUSH
49763: LD_INT 3
49765: ARRAY
49766: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
49767: LD_ADDR_VAR 0 7
49771: PUSH
49772: LD_VAR 0 3
49776: PUSH
49777: LD_VAR 0 1
49781: ARRAY
49782: PUSH
49783: LD_INT 4
49785: ARRAY
49786: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
49787: LD_ADDR_VAR 0 9
49791: PUSH
49792: LD_VAR 0 6
49796: PPUSH
49797: LD_VAR 0 7
49801: PPUSH
49802: LD_INT 16
49804: PPUSH
49805: CALL 96355 0 3
49809: ST_TO_ADDR
// if not cratesNearbyPoint then
49810: LD_VAR 0 9
49814: NOT
49815: IFFALSE 49821
// exit ;
49817: POP
49818: POP
49819: GO 50286
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
49821: LD_ADDR_VAR 0 4
49825: PUSH
49826: LD_INT 22
49828: PUSH
49829: LD_VAR 0 5
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 3
49840: PUSH
49841: LD_INT 60
49843: PUSH
49844: EMPTY
49845: LIST
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 91
49853: PUSH
49854: LD_VAR 0 8
49858: PUSH
49859: LD_INT 6
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 2
49869: PUSH
49870: LD_INT 25
49872: PUSH
49873: LD_INT 2
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 25
49882: PUSH
49883: LD_INT 16
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: LIST
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: PPUSH
49901: CALL_OW 69
49905: PUSH
49906: LD_VAR 0 8
49910: PPUSH
49911: CALL_OW 313
49915: PPUSH
49916: LD_INT 3
49918: PUSH
49919: LD_INT 60
49921: PUSH
49922: EMPTY
49923: LIST
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 2
49931: PUSH
49932: LD_INT 25
49934: PUSH
49935: LD_INT 2
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 25
49944: PUSH
49945: LD_INT 16
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: LIST
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PPUSH
49961: CALL_OW 72
49965: UNION
49966: ST_TO_ADDR
// if tmp then
49967: LD_VAR 0 4
49971: IFFALSE 50051
// begin tmp := ShrinkArray ( tmp , 3 ) ;
49973: LD_ADDR_VAR 0 4
49977: PUSH
49978: LD_VAR 0 4
49982: PPUSH
49983: LD_INT 3
49985: PPUSH
49986: CALL 94162 0 2
49990: ST_TO_ADDR
// for j in tmp do
49991: LD_ADDR_VAR 0 2
49995: PUSH
49996: LD_VAR 0 4
50000: PUSH
50001: FOR_IN
50002: IFFALSE 50045
// begin if IsInUnit ( j ) then
50004: LD_VAR 0 2
50008: PPUSH
50009: CALL_OW 310
50013: IFFALSE 50024
// ComExit ( j ) ;
50015: LD_VAR 0 2
50019: PPUSH
50020: CALL 94245 0 1
// AddComCollect ( j , x , y ) ;
50024: LD_VAR 0 2
50028: PPUSH
50029: LD_VAR 0 6
50033: PPUSH
50034: LD_VAR 0 7
50038: PPUSH
50039: CALL_OW 177
// end ;
50043: GO 50001
50045: POP
50046: POP
// exit ;
50047: POP
50048: POP
50049: GO 50286
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
50051: LD_ADDR_VAR 0 4
50055: PUSH
50056: LD_INT 22
50058: PUSH
50059: LD_VAR 0 5
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 91
50070: PUSH
50071: LD_VAR 0 8
50075: PUSH
50076: LD_INT 8
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 2
50086: PUSH
50087: LD_INT 34
50089: PUSH
50090: LD_INT 12
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 34
50099: PUSH
50100: LD_INT 51
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 34
50109: PUSH
50110: LD_INT 32
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 34
50119: PUSH
50120: LD_INT 89
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: LIST
50138: PPUSH
50139: CALL_OW 69
50143: ST_TO_ADDR
// if tmp then
50144: LD_VAR 0 4
50148: IFFALSE 50282
// begin for j in tmp do
50150: LD_ADDR_VAR 0 2
50154: PUSH
50155: LD_VAR 0 4
50159: PUSH
50160: FOR_IN
50161: IFFALSE 50280
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
50163: LD_VAR 0 2
50167: PPUSH
50168: CALL_OW 262
50172: PUSH
50173: LD_INT 3
50175: EQUAL
50176: IFTRUE 50193
50178: PUSH
50179: LD_VAR 0 2
50183: PPUSH
50184: CALL_OW 261
50188: PUSH
50189: LD_INT 20
50191: GREATER
50192: OR
50193: IFFALSE 50207
50195: PUSH
50196: LD_VAR 0 2
50200: PPUSH
50201: CALL_OW 314
50205: NOT
50206: AND
50207: IFFALSE 50237
50209: PUSH
50210: LD_VAR 0 2
50214: PPUSH
50215: CALL_OW 263
50219: PUSH
50220: LD_INT 1
50222: NONEQUAL
50223: IFTRUE 50236
50225: PUSH
50226: LD_VAR 0 2
50230: PPUSH
50231: CALL_OW 311
50235: OR
50236: AND
50237: IFFALSE 50278
// begin ComCollect ( j , x , y ) ;
50239: LD_VAR 0 2
50243: PPUSH
50244: LD_VAR 0 6
50248: PPUSH
50249: LD_VAR 0 7
50253: PPUSH
50254: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
50258: LD_VAR 0 2
50262: PPUSH
50263: LD_VAR 0 8
50267: PPUSH
50268: CALL_OW 172
// exit ;
50272: POP
50273: POP
50274: POP
50275: POP
50276: GO 50286
// end ;
50278: GO 50160
50280: POP
50281: POP
// end ; end ;
50282: GO 49647
50284: POP
50285: POP
// end ; end_of_file
50286: PPOPN 9
50288: END
// export function SOS_UnitDestroyed ( un ) ; begin
50289: LD_INT 0
50291: PPUSH
// ComRadiation ( un ) ;
50292: LD_VAR 0 1
50296: PPUSH
50297: CALL 51378 0 1
// end ;
50301: LD_VAR 0 2
50305: RET
// export function SOS_UnitKamikazed ( un ) ; begin
50306: LD_INT 0
50308: PPUSH
// ComRadiation ( un ) ;
50309: LD_VAR 0 1
50313: PPUSH
50314: CALL 51378 0 1
// end ;
50318: LD_VAR 0 2
50322: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
50323: LD_INT 0
50325: PPUSH
// end ;
50326: LD_VAR 0 4
50330: RET
// export function SOS_Command ( cmd ) ; begin
50331: LD_INT 0
50333: PPUSH
// end ;
50334: LD_VAR 0 2
50338: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
50339: LD_INT 0
50341: PPUSH
// end ;
50342: LD_VAR 0 6
50346: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
50347: LD_INT 0
50349: PPUSH
50350: PPUSH
50351: PPUSH
50352: PPUSH
// if not vehicle or not factory then
50353: LD_VAR 0 1
50357: NOT
50358: IFTRUE 50367
50360: PUSH
50361: LD_VAR 0 2
50365: NOT
50366: OR
50367: IFFALSE 50371
// exit ;
50369: GO 50953
// if not factoryWaypoints then
50371: LD_EXP 145
50375: NOT
50376: IFFALSE 50380
// exit ;
50378: GO 50953
// for i := 1 to Count ( factoryWaypoints ) do
50380: LD_ADDR_VAR 0 4
50384: PUSH
50385: DOUBLE
50386: LD_INT 1
50388: DEC
50389: ST_TO_ADDR
50390: LD_EXP 145
50394: PPUSH
50395: CALL 57915 0 1
50399: PUSH
50400: FOR_TO
50401: IFFALSE 50951
// if factoryWaypoints [ i ] [ 2 ] = factory then
50403: LD_EXP 145
50407: PUSH
50408: LD_VAR 0 4
50412: ARRAY
50413: PUSH
50414: LD_INT 2
50416: ARRAY
50417: PUSH
50418: LD_VAR 0 2
50422: EQUAL
50423: IFFALSE 50949
// begin if GetControl ( vehicle ) = control_manual then
50425: LD_VAR 0 1
50429: PPUSH
50430: CALL_OW 263
50434: PUSH
50435: LD_INT 1
50437: EQUAL
50438: IFFALSE 50802
// begin driver := IsDrivenBy ( vehicle ) ;
50440: LD_ADDR_VAR 0 5
50444: PUSH
50445: LD_VAR 0 1
50449: PPUSH
50450: CALL_OW 311
50454: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
50455: LD_VAR 0 5
50459: PUSH
50460: LD_EXP 146
50464: IN
50465: IFTRUE 50479
50467: PUSH
50468: LD_VAR 0 1
50472: PUSH
50473: LD_EXP 146
50477: IN
50478: OR
50479: IFFALSE 50485
// exit ;
50481: POP
50482: POP
50483: GO 50953
// if not HasTask ( driver ) then
50485: LD_VAR 0 5
50489: PPUSH
50490: CALL_OW 314
50494: NOT
50495: IFFALSE 50800
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
50497: LD_ADDR_EXP 146
50501: PUSH
50502: LD_EXP 146
50506: PPUSH
50507: LD_VAR 0 5
50511: PPUSH
50512: CALL 93847 0 2
50516: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
50517: LD_ADDR_EXP 146
50521: PUSH
50522: LD_EXP 146
50526: PPUSH
50527: LD_VAR 0 1
50531: PPUSH
50532: CALL 93847 0 2
50536: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50537: LD_ADDR_VAR 0 6
50541: PUSH
50542: LD_EXP 145
50546: PUSH
50547: LD_VAR 0 4
50551: ARRAY
50552: PUSH
50553: LD_INT 3
50555: ARRAY
50556: PPUSH
50557: LD_EXP 145
50561: PUSH
50562: LD_VAR 0 4
50566: ARRAY
50567: PUSH
50568: LD_INT 4
50570: ARRAY
50571: PPUSH
50572: CALL_OW 428
50576: ST_TO_ADDR
// if hex then
50577: LD_VAR 0 6
50581: IFFALSE 50599
// ComMoveUnit ( driver , hex ) else
50583: LD_VAR 0 5
50587: PPUSH
50588: LD_VAR 0 6
50592: PPUSH
50593: CALL_OW 112
50597: GO 50683
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
50599: LD_VAR 0 1
50603: PPUSH
50604: LD_EXP 145
50608: PUSH
50609: LD_VAR 0 4
50613: ARRAY
50614: PUSH
50615: LD_INT 3
50617: ARRAY
50618: PPUSH
50619: LD_EXP 145
50623: PUSH
50624: LD_VAR 0 4
50628: ARRAY
50629: PUSH
50630: LD_INT 4
50632: ARRAY
50633: PPUSH
50634: CALL_OW 297
50638: PUSH
50639: LD_INT 0
50641: GREATER
50642: IFFALSE 50683
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50644: LD_VAR 0 5
50648: PPUSH
50649: LD_EXP 145
50653: PUSH
50654: LD_VAR 0 4
50658: ARRAY
50659: PUSH
50660: LD_INT 3
50662: ARRAY
50663: PPUSH
50664: LD_EXP 145
50668: PUSH
50669: LD_VAR 0 4
50673: ARRAY
50674: PUSH
50675: LD_INT 4
50677: ARRAY
50678: PPUSH
50679: CALL_OW 111
// AddComExitVehicle ( driver ) ;
50683: LD_VAR 0 5
50687: PPUSH
50688: CALL_OW 181
// if Multiplayer then
50692: LD_OWVAR 4
50696: IFFALSE 50745
// begin repeat wait ( 10 ) ;
50698: LD_INT 10
50700: PPUSH
50701: CALL_OW 67
// until not IsInUnit ( driver ) ;
50705: LD_VAR 0 5
50709: PPUSH
50710: CALL_OW 310
50714: NOT
50715: IFFALSE 50698
// if not HasTask ( driver ) then
50717: LD_VAR 0 5
50721: PPUSH
50722: CALL_OW 314
50726: NOT
50727: IFFALSE 50743
// ComEnterUnit ( driver , factory ) ;
50729: LD_VAR 0 5
50733: PPUSH
50734: LD_VAR 0 2
50738: PPUSH
50739: CALL_OW 120
// end else
50743: GO 50759
// AddComEnterUnit ( driver , factory ) ;
50745: LD_VAR 0 5
50749: PPUSH
50750: LD_VAR 0 2
50754: PPUSH
50755: CALL_OW 180
// wait ( 0 0$1 ) ;
50759: LD_INT 35
50761: PPUSH
50762: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
50766: LD_ADDR_EXP 146
50770: PUSH
50771: LD_EXP 146
50775: PUSH
50776: LD_VAR 0 5
50780: DIFF
50781: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
50782: LD_ADDR_EXP 146
50786: PUSH
50787: LD_EXP 146
50791: PUSH
50792: LD_VAR 0 1
50796: DIFF
50797: ST_TO_ADDR
// break ;
50798: GO 50951
// end ; end else
50800: GO 50949
// if GetControl ( vehicle ) = control_remote then
50802: LD_VAR 0 1
50806: PPUSH
50807: CALL_OW 263
50811: PUSH
50812: LD_INT 2
50814: EQUAL
50815: IFFALSE 50901
// begin wait ( 0 0$2 ) ;
50817: LD_INT 70
50819: PPUSH
50820: CALL_OW 67
// repeat wait ( 10 ) ;
50824: LD_INT 10
50826: PPUSH
50827: CALL_OW 67
// Connect ( vehicle ) ;
50831: LD_VAR 0 1
50835: PPUSH
50836: CALL 64159 0 1
// until IsControledBy ( vehicle ) ;
50840: LD_VAR 0 1
50844: PPUSH
50845: CALL_OW 312
50849: IFFALSE 50824
// wait ( 10 ) ;
50851: LD_INT 10
50853: PPUSH
50854: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50858: LD_VAR 0 1
50862: PPUSH
50863: LD_EXP 145
50867: PUSH
50868: LD_VAR 0 4
50872: ARRAY
50873: PUSH
50874: LD_INT 3
50876: ARRAY
50877: PPUSH
50878: LD_EXP 145
50882: PUSH
50883: LD_VAR 0 4
50887: ARRAY
50888: PUSH
50889: LD_INT 4
50891: ARRAY
50892: PPUSH
50893: CALL_OW 111
// break ;
50897: GO 50951
// end else
50899: GO 50949
// begin wait ( 0 0$3 ) ;
50901: LD_INT 105
50903: PPUSH
50904: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50908: LD_VAR 0 1
50912: PPUSH
50913: LD_EXP 145
50917: PUSH
50918: LD_VAR 0 4
50922: ARRAY
50923: PUSH
50924: LD_INT 3
50926: ARRAY
50927: PPUSH
50928: LD_EXP 145
50932: PUSH
50933: LD_VAR 0 4
50937: ARRAY
50938: PUSH
50939: LD_INT 4
50941: ARRAY
50942: PPUSH
50943: CALL_OW 111
// break ;
50947: GO 50951
// end ; end ;
50949: GO 50400
50951: POP
50952: POP
// end ;
50953: LD_VAR 0 3
50957: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
50958: LD_INT 0
50960: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
50961: LD_VAR 0 1
50965: PUSH
50966: LD_INT 250
50968: EQUAL
50969: IFFALSE 50986
50971: PUSH
50972: LD_VAR 0 2
50976: PPUSH
50977: CALL_OW 264
50981: PUSH
50982: LD_INT 81
50984: EQUAL
50985: AND
50986: IFFALSE 51007
// MinerPlaceMine ( unit , x , y ) ;
50988: LD_VAR 0 2
50992: PPUSH
50993: LD_VAR 0 4
50997: PPUSH
50998: LD_VAR 0 5
51002: PPUSH
51003: CALL 54139 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
51007: LD_VAR 0 1
51011: PUSH
51012: LD_INT 251
51014: EQUAL
51015: IFFALSE 51032
51017: PUSH
51018: LD_VAR 0 2
51022: PPUSH
51023: CALL_OW 264
51027: PUSH
51028: LD_INT 81
51030: EQUAL
51031: AND
51032: IFFALSE 51053
// MinerDetonateMine ( unit , x , y ) ;
51034: LD_VAR 0 2
51038: PPUSH
51039: LD_VAR 0 4
51043: PPUSH
51044: LD_VAR 0 5
51048: PPUSH
51049: CALL 54418 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
51053: LD_VAR 0 1
51057: PUSH
51058: LD_INT 252
51060: EQUAL
51061: IFFALSE 51078
51063: PUSH
51064: LD_VAR 0 2
51068: PPUSH
51069: CALL_OW 264
51073: PUSH
51074: LD_INT 81
51076: EQUAL
51077: AND
51078: IFFALSE 51099
// MinerCreateMinefield ( unit , x , y ) ;
51080: LD_VAR 0 2
51084: PPUSH
51085: LD_VAR 0 4
51089: PPUSH
51090: LD_VAR 0 5
51094: PPUSH
51095: CALL 54837 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
51099: LD_VAR 0 1
51103: PUSH
51104: LD_INT 253
51106: EQUAL
51107: IFFALSE 51124
51109: PUSH
51110: LD_VAR 0 2
51114: PPUSH
51115: CALL_OW 257
51119: PUSH
51120: LD_INT 5
51122: EQUAL
51123: AND
51124: IFFALSE 51145
// ComBinocular ( unit , x , y ) ;
51126: LD_VAR 0 2
51130: PPUSH
51131: LD_VAR 0 4
51135: PPUSH
51136: LD_VAR 0 5
51140: PPUSH
51141: CALL 55212 0 3
// if selectedUnit then
51145: LD_VAR 0 3
51149: IFFALSE 51209
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
51151: LD_VAR 0 1
51155: PUSH
51156: LD_INT 254
51158: EQUAL
51159: IFFALSE 51176
51161: PUSH
51162: LD_VAR 0 2
51166: PPUSH
51167: CALL_OW 264
51171: PUSH
51172: LD_INT 99
51174: EQUAL
51175: AND
51176: IFFALSE 51193
51178: PUSH
51179: LD_VAR 0 3
51183: PPUSH
51184: CALL_OW 263
51188: PUSH
51189: LD_INT 3
51191: EQUAL
51192: AND
51193: IFFALSE 51209
// HackDestroyVehicle ( unit , selectedUnit ) ;
51195: LD_VAR 0 2
51199: PPUSH
51200: LD_VAR 0 3
51204: PPUSH
51205: CALL 53499 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
51209: LD_VAR 0 1
51213: PUSH
51214: LD_INT 255
51216: EQUAL
51217: IFFALSE 51241
51219: PUSH
51220: LD_VAR 0 2
51224: PPUSH
51225: CALL_OW 264
51229: PUSH
51230: LD_INT 14
51232: PUSH
51233: LD_INT 53
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: IN
51240: AND
51241: IFFALSE 51259
51243: PUSH
51244: LD_VAR 0 4
51248: PPUSH
51249: LD_VAR 0 5
51253: PPUSH
51254: CALL_OW 488
51258: AND
51259: IFFALSE 51283
// CutTreeXYR ( unit , x , y , 12 ) ;
51261: LD_VAR 0 2
51265: PPUSH
51266: LD_VAR 0 4
51270: PPUSH
51271: LD_VAR 0 5
51275: PPUSH
51276: LD_INT 12
51278: PPUSH
51279: CALL 51474 0 4
// if cmd = 256 then
51283: LD_VAR 0 1
51287: PUSH
51288: LD_INT 256
51290: EQUAL
51291: IFFALSE 51312
// SetFactoryWaypoint ( unit , x , y ) ;
51293: LD_VAR 0 2
51297: PPUSH
51298: LD_VAR 0 4
51302: PPUSH
51303: LD_VAR 0 5
51307: PPUSH
51308: CALL 48834 0 3
// if cmd = 257 then
51312: LD_VAR 0 1
51316: PUSH
51317: LD_INT 257
51319: EQUAL
51320: IFFALSE 51341
// SetWarehouseGatheringPoint ( unit , x , y ) ;
51322: LD_VAR 0 2
51326: PPUSH
51327: LD_VAR 0 4
51331: PPUSH
51332: LD_VAR 0 5
51336: PPUSH
51337: CALL 49330 0 3
// if cmd = 258 then
51341: LD_VAR 0 1
51345: PUSH
51346: LD_INT 258
51348: EQUAL
51349: IFFALSE 51373
// BurnTreeXYR ( unit , x , y , 8 ) ;
51351: LD_VAR 0 2
51355: PPUSH
51356: LD_VAR 0 4
51360: PPUSH
51361: LD_VAR 0 5
51365: PPUSH
51366: LD_INT 8
51368: PPUSH
51369: CALL 51874 0 4
// end ;
51373: LD_VAR 0 6
51377: RET
// export function ComRadiation ( un ) ; var eff ; begin
51378: LD_INT 0
51380: PPUSH
51381: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
51382: LD_VAR 0 1
51386: PPUSH
51387: CALL_OW 264
51391: PUSH
51392: LD_INT 91
51394: NONEQUAL
51395: IFFALSE 51399
// exit ;
51397: GO 51469
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
51399: LD_INT 68
51401: PPUSH
51402: LD_VAR 0 1
51406: PPUSH
51407: CALL_OW 255
51411: PPUSH
51412: CALL_OW 321
51416: PUSH
51417: LD_INT 2
51419: EQUAL
51420: IFFALSE 51432
// eff := 50 else
51422: LD_ADDR_VAR 0 3
51426: PUSH
51427: LD_INT 50
51429: ST_TO_ADDR
51430: GO 51440
// eff := 25 ;
51432: LD_ADDR_VAR 0 3
51436: PUSH
51437: LD_INT 25
51439: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
51440: LD_VAR 0 1
51444: PPUSH
51445: CALL_OW 250
51449: PPUSH
51450: LD_VAR 0 1
51454: PPUSH
51455: CALL_OW 251
51459: PPUSH
51460: LD_VAR 0 3
51464: PPUSH
51465: CALL_OW 495
// end ;
51469: LD_VAR 0 2
51473: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
51474: LD_INT 0
51476: PPUSH
51477: PPUSH
51478: PPUSH
51479: PPUSH
51480: PPUSH
51481: PPUSH
51482: PPUSH
51483: PPUSH
51484: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
51485: LD_VAR 0 1
51489: PPUSH
51490: CALL_OW 302
51494: NOT
51495: IFTRUE 51514
51497: PUSH
51498: LD_VAR 0 2
51502: PPUSH
51503: LD_VAR 0 3
51507: PPUSH
51508: CALL_OW 488
51512: NOT
51513: OR
51514: IFTRUE 51523
51516: PUSH
51517: LD_VAR 0 4
51521: NOT
51522: OR
51523: IFFALSE 51527
// exit ;
51525: GO 51869
// list := [ ] ;
51527: LD_ADDR_VAR 0 13
51531: PUSH
51532: EMPTY
51533: ST_TO_ADDR
// if x - r < 0 then
51534: LD_VAR 0 2
51538: PUSH
51539: LD_VAR 0 4
51543: MINUS
51544: PUSH
51545: LD_INT 0
51547: LESS
51548: IFFALSE 51560
// min_x := 0 else
51550: LD_ADDR_VAR 0 7
51554: PUSH
51555: LD_INT 0
51557: ST_TO_ADDR
51558: GO 51576
// min_x := x - r ;
51560: LD_ADDR_VAR 0 7
51564: PUSH
51565: LD_VAR 0 2
51569: PUSH
51570: LD_VAR 0 4
51574: MINUS
51575: ST_TO_ADDR
// if y - r < 0 then
51576: LD_VAR 0 3
51580: PUSH
51581: LD_VAR 0 4
51585: MINUS
51586: PUSH
51587: LD_INT 0
51589: LESS
51590: IFFALSE 51602
// min_y := 0 else
51592: LD_ADDR_VAR 0 8
51596: PUSH
51597: LD_INT 0
51599: ST_TO_ADDR
51600: GO 51618
// min_y := y - r ;
51602: LD_ADDR_VAR 0 8
51606: PUSH
51607: LD_VAR 0 3
51611: PUSH
51612: LD_VAR 0 4
51616: MINUS
51617: ST_TO_ADDR
// max_x := x + r ;
51618: LD_ADDR_VAR 0 9
51622: PUSH
51623: LD_VAR 0 2
51627: PUSH
51628: LD_VAR 0 4
51632: PLUS
51633: ST_TO_ADDR
// max_y := y + r ;
51634: LD_ADDR_VAR 0 10
51638: PUSH
51639: LD_VAR 0 3
51643: PUSH
51644: LD_VAR 0 4
51648: PLUS
51649: ST_TO_ADDR
// for _x = min_x to max_x do
51650: LD_ADDR_VAR 0 11
51654: PUSH
51655: DOUBLE
51656: LD_VAR 0 7
51660: DEC
51661: ST_TO_ADDR
51662: LD_VAR 0 9
51666: PUSH
51667: FOR_TO
51668: IFFALSE 51787
// for _y = min_y to max_y do
51670: LD_ADDR_VAR 0 12
51674: PUSH
51675: DOUBLE
51676: LD_VAR 0 8
51680: DEC
51681: ST_TO_ADDR
51682: LD_VAR 0 10
51686: PUSH
51687: FOR_TO
51688: IFFALSE 51783
// begin if not ValidHex ( _x , _y ) then
51690: LD_VAR 0 11
51694: PPUSH
51695: LD_VAR 0 12
51699: PPUSH
51700: CALL_OW 488
51704: NOT
51705: IFFALSE 51709
// continue ;
51707: GO 51687
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
51709: LD_VAR 0 11
51713: PPUSH
51714: LD_VAR 0 12
51718: PPUSH
51719: CALL_OW 351
51723: IFFALSE 51741
51725: PUSH
51726: LD_VAR 0 11
51730: PPUSH
51731: LD_VAR 0 12
51735: PPUSH
51736: CALL_OW 554
51740: AND
51741: IFFALSE 51781
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
51743: LD_ADDR_VAR 0 13
51747: PUSH
51748: LD_VAR 0 13
51752: PPUSH
51753: LD_VAR 0 13
51757: PUSH
51758: LD_INT 1
51760: PLUS
51761: PPUSH
51762: LD_VAR 0 11
51766: PUSH
51767: LD_VAR 0 12
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PPUSH
51776: CALL_OW 2
51780: ST_TO_ADDR
// end ;
51781: GO 51687
51783: POP
51784: POP
51785: GO 51667
51787: POP
51788: POP
// if not list then
51789: LD_VAR 0 13
51793: NOT
51794: IFFALSE 51798
// exit ;
51796: GO 51869
// for i in list do
51798: LD_ADDR_VAR 0 6
51802: PUSH
51803: LD_VAR 0 13
51807: PUSH
51808: FOR_IN
51809: IFFALSE 51867
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
51811: LD_VAR 0 1
51815: PPUSH
51816: LD_STRING M
51818: PUSH
51819: LD_VAR 0 6
51823: PUSH
51824: LD_INT 1
51826: ARRAY
51827: PUSH
51828: LD_VAR 0 6
51832: PUSH
51833: LD_INT 2
51835: ARRAY
51836: PUSH
51837: LD_INT 0
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: PUSH
51858: EMPTY
51859: LIST
51860: PPUSH
51861: CALL_OW 447
51865: GO 51808
51867: POP
51868: POP
// end ;
51869: LD_VAR 0 5
51873: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
51874: LD_INT 0
51876: PPUSH
51877: PPUSH
51878: PPUSH
51879: PPUSH
51880: PPUSH
51881: PPUSH
51882: PPUSH
51883: PPUSH
51884: PPUSH
51885: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
51886: LD_VAR 0 1
51890: PPUSH
51891: CALL_OW 302
51895: NOT
51896: IFTRUE 51915
51898: PUSH
51899: LD_VAR 0 2
51903: PPUSH
51904: LD_VAR 0 3
51908: PPUSH
51909: CALL_OW 488
51913: NOT
51914: OR
51915: IFTRUE 51924
51917: PUSH
51918: LD_VAR 0 4
51922: NOT
51923: OR
51924: IFFALSE 51928
// exit ;
51926: GO 52445
// list := [ ] ;
51928: LD_ADDR_VAR 0 13
51932: PUSH
51933: EMPTY
51934: ST_TO_ADDR
// if x - r < 0 then
51935: LD_VAR 0 2
51939: PUSH
51940: LD_VAR 0 4
51944: MINUS
51945: PUSH
51946: LD_INT 0
51948: LESS
51949: IFFALSE 51961
// min_x := 0 else
51951: LD_ADDR_VAR 0 7
51955: PUSH
51956: LD_INT 0
51958: ST_TO_ADDR
51959: GO 51977
// min_x := x - r ;
51961: LD_ADDR_VAR 0 7
51965: PUSH
51966: LD_VAR 0 2
51970: PUSH
51971: LD_VAR 0 4
51975: MINUS
51976: ST_TO_ADDR
// if y - r < 0 then
51977: LD_VAR 0 3
51981: PUSH
51982: LD_VAR 0 4
51986: MINUS
51987: PUSH
51988: LD_INT 0
51990: LESS
51991: IFFALSE 52003
// min_y := 0 else
51993: LD_ADDR_VAR 0 8
51997: PUSH
51998: LD_INT 0
52000: ST_TO_ADDR
52001: GO 52019
// min_y := y - r ;
52003: LD_ADDR_VAR 0 8
52007: PUSH
52008: LD_VAR 0 3
52012: PUSH
52013: LD_VAR 0 4
52017: MINUS
52018: ST_TO_ADDR
// max_x := x + r ;
52019: LD_ADDR_VAR 0 9
52023: PUSH
52024: LD_VAR 0 2
52028: PUSH
52029: LD_VAR 0 4
52033: PLUS
52034: ST_TO_ADDR
// max_y := y + r ;
52035: LD_ADDR_VAR 0 10
52039: PUSH
52040: LD_VAR 0 3
52044: PUSH
52045: LD_VAR 0 4
52049: PLUS
52050: ST_TO_ADDR
// for _x = min_x to max_x do
52051: LD_ADDR_VAR 0 11
52055: PUSH
52056: DOUBLE
52057: LD_VAR 0 7
52061: DEC
52062: ST_TO_ADDR
52063: LD_VAR 0 9
52067: PUSH
52068: FOR_TO
52069: IFFALSE 52188
// for _y = min_y to max_y do
52071: LD_ADDR_VAR 0 12
52075: PUSH
52076: DOUBLE
52077: LD_VAR 0 8
52081: DEC
52082: ST_TO_ADDR
52083: LD_VAR 0 10
52087: PUSH
52088: FOR_TO
52089: IFFALSE 52184
// begin if not ValidHex ( _x , _y ) then
52091: LD_VAR 0 11
52095: PPUSH
52096: LD_VAR 0 12
52100: PPUSH
52101: CALL_OW 488
52105: NOT
52106: IFFALSE 52110
// continue ;
52108: GO 52088
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
52110: LD_VAR 0 11
52114: PPUSH
52115: LD_VAR 0 12
52119: PPUSH
52120: CALL_OW 351
52124: IFFALSE 52142
52126: PUSH
52127: LD_VAR 0 11
52131: PPUSH
52132: LD_VAR 0 12
52136: PPUSH
52137: CALL_OW 554
52141: AND
52142: IFFALSE 52182
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
52144: LD_ADDR_VAR 0 13
52148: PUSH
52149: LD_VAR 0 13
52153: PPUSH
52154: LD_VAR 0 13
52158: PUSH
52159: LD_INT 1
52161: PLUS
52162: PPUSH
52163: LD_VAR 0 11
52167: PUSH
52168: LD_VAR 0 12
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PPUSH
52177: CALL_OW 2
52181: ST_TO_ADDR
// end ;
52182: GO 52088
52184: POP
52185: POP
52186: GO 52068
52188: POP
52189: POP
// if not list then
52190: LD_VAR 0 13
52194: NOT
52195: IFFALSE 52199
// exit ;
52197: GO 52445
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
52199: LD_ADDR_VAR 0 13
52203: PUSH
52204: LD_VAR 0 1
52208: PPUSH
52209: LD_VAR 0 13
52213: PPUSH
52214: LD_INT 1
52216: PPUSH
52217: LD_INT 1
52219: PPUSH
52220: CALL 61287 0 4
52224: ST_TO_ADDR
// ComStop ( flame ) ;
52225: LD_VAR 0 1
52229: PPUSH
52230: CALL_OW 141
// for i in list do
52234: LD_ADDR_VAR 0 6
52238: PUSH
52239: LD_VAR 0 13
52243: PUSH
52244: FOR_IN
52245: IFFALSE 52276
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
52247: LD_VAR 0 1
52251: PPUSH
52252: LD_VAR 0 6
52256: PUSH
52257: LD_INT 1
52259: ARRAY
52260: PPUSH
52261: LD_VAR 0 6
52265: PUSH
52266: LD_INT 2
52268: ARRAY
52269: PPUSH
52270: CALL_OW 176
52274: GO 52244
52276: POP
52277: POP
// repeat wait ( 0 0$1 ) ;
52278: LD_INT 35
52280: PPUSH
52281: CALL_OW 67
// task := GetTaskList ( flame ) ;
52285: LD_ADDR_VAR 0 14
52289: PUSH
52290: LD_VAR 0 1
52294: PPUSH
52295: CALL_OW 437
52299: ST_TO_ADDR
// if not task then
52300: LD_VAR 0 14
52304: NOT
52305: IFFALSE 52309
// exit ;
52307: GO 52445
// if task [ 1 ] [ 1 ] <> | then
52309: LD_VAR 0 14
52313: PUSH
52314: LD_INT 1
52316: ARRAY
52317: PUSH
52318: LD_INT 1
52320: ARRAY
52321: PUSH
52322: LD_STRING |
52324: NONEQUAL
52325: IFFALSE 52329
// exit ;
52327: GO 52445
// _x := task [ 1 ] [ 2 ] ;
52329: LD_ADDR_VAR 0 11
52333: PUSH
52334: LD_VAR 0 14
52338: PUSH
52339: LD_INT 1
52341: ARRAY
52342: PUSH
52343: LD_INT 2
52345: ARRAY
52346: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
52347: LD_ADDR_VAR 0 12
52351: PUSH
52352: LD_VAR 0 14
52356: PUSH
52357: LD_INT 1
52359: ARRAY
52360: PUSH
52361: LD_INT 3
52363: ARRAY
52364: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
52365: LD_VAR 0 11
52369: PPUSH
52370: LD_VAR 0 12
52374: PPUSH
52375: CALL_OW 351
52379: NOT
52380: IFTRUE 52399
52382: PUSH
52383: LD_VAR 0 11
52387: PPUSH
52388: LD_VAR 0 12
52392: PPUSH
52393: CALL_OW 554
52397: NOT
52398: OR
52399: IFFALSE 52433
// begin task := Delete ( task , 1 ) ;
52401: LD_ADDR_VAR 0 14
52405: PUSH
52406: LD_VAR 0 14
52410: PPUSH
52411: LD_INT 1
52413: PPUSH
52414: CALL_OW 3
52418: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
52419: LD_VAR 0 1
52423: PPUSH
52424: LD_VAR 0 14
52428: PPUSH
52429: CALL_OW 446
// end ; until not HasTask ( flame ) ;
52433: LD_VAR 0 1
52437: PPUSH
52438: CALL_OW 314
52442: NOT
52443: IFFALSE 52278
// end ;
52445: LD_VAR 0 5
52449: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
52450: LD_EXP 149
52454: NOT
52455: IFFALSE 52505
52457: GO 52459
52459: DISABLE
// begin initHack := true ;
52460: LD_ADDR_EXP 149
52464: PUSH
52465: LD_INT 1
52467: ST_TO_ADDR
// hackTanks := [ ] ;
52468: LD_ADDR_EXP 150
52472: PUSH
52473: EMPTY
52474: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
52475: LD_ADDR_EXP 151
52479: PUSH
52480: EMPTY
52481: ST_TO_ADDR
// hackLimit := 3 ;
52482: LD_ADDR_EXP 152
52486: PUSH
52487: LD_INT 3
52489: ST_TO_ADDR
// hackDist := 12 ;
52490: LD_ADDR_EXP 153
52494: PUSH
52495: LD_INT 12
52497: ST_TO_ADDR
// hackCounter := [ ] ;
52498: LD_ADDR_EXP 154
52502: PUSH
52503: EMPTY
52504: ST_TO_ADDR
// end ;
52505: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
52506: LD_EXP 149
52510: IFFALSE 52528
52512: PUSH
52513: LD_INT 34
52515: PUSH
52516: LD_INT 99
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PPUSH
52523: CALL_OW 69
52527: AND
52528: IFFALSE 52781
52530: GO 52532
52532: DISABLE
52533: LD_INT 0
52535: PPUSH
52536: PPUSH
// begin enable ;
52537: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
52538: LD_ADDR_VAR 0 1
52542: PUSH
52543: LD_INT 34
52545: PUSH
52546: LD_INT 99
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PPUSH
52553: CALL_OW 69
52557: PUSH
52558: FOR_IN
52559: IFFALSE 52779
// begin if not i in hackTanks then
52561: LD_VAR 0 1
52565: PUSH
52566: LD_EXP 150
52570: IN
52571: NOT
52572: IFFALSE 52655
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
52574: LD_ADDR_EXP 150
52578: PUSH
52579: LD_EXP 150
52583: PPUSH
52584: LD_EXP 150
52588: PUSH
52589: LD_INT 1
52591: PLUS
52592: PPUSH
52593: LD_VAR 0 1
52597: PPUSH
52598: CALL_OW 1
52602: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
52603: LD_ADDR_EXP 151
52607: PUSH
52608: LD_EXP 151
52612: PPUSH
52613: LD_EXP 151
52617: PUSH
52618: LD_INT 1
52620: PLUS
52621: PPUSH
52622: EMPTY
52623: PPUSH
52624: CALL_OW 1
52628: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
52629: LD_ADDR_EXP 154
52633: PUSH
52634: LD_EXP 154
52638: PPUSH
52639: LD_EXP 154
52643: PUSH
52644: LD_INT 1
52646: PLUS
52647: PPUSH
52648: EMPTY
52649: PPUSH
52650: CALL_OW 1
52654: ST_TO_ADDR
// end ; if not IsOk ( i ) then
52655: LD_VAR 0 1
52659: PPUSH
52660: CALL_OW 302
52664: NOT
52665: IFFALSE 52678
// begin HackUnlinkAll ( i ) ;
52667: LD_VAR 0 1
52671: PPUSH
52672: CALL 52784 0 1
// continue ;
52676: GO 52558
// end ; HackCheckCapturedStatus ( i ) ;
52678: LD_VAR 0 1
52682: PPUSH
52683: CALL 53229 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
52687: LD_ADDR_VAR 0 2
52691: PUSH
52692: LD_INT 81
52694: PUSH
52695: LD_VAR 0 1
52699: PPUSH
52700: CALL_OW 255
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 33
52711: PUSH
52712: LD_INT 3
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 91
52721: PUSH
52722: LD_VAR 0 1
52726: PUSH
52727: LD_EXP 153
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 50
52739: PUSH
52740: EMPTY
52741: LIST
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: PPUSH
52749: CALL_OW 69
52753: ST_TO_ADDR
// if not tmp then
52754: LD_VAR 0 2
52758: NOT
52759: IFFALSE 52763
// continue ;
52761: GO 52558
// HackLink ( i , tmp ) ;
52763: LD_VAR 0 1
52767: PPUSH
52768: LD_VAR 0 2
52772: PPUSH
52773: CALL 52920 0 2
// end ;
52777: GO 52558
52779: POP
52780: POP
// end ;
52781: PPOPN 2
52783: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
52784: LD_INT 0
52786: PPUSH
52787: PPUSH
52788: PPUSH
// if not hack in hackTanks then
52789: LD_VAR 0 1
52793: PUSH
52794: LD_EXP 150
52798: IN
52799: NOT
52800: IFFALSE 52804
// exit ;
52802: GO 52915
// index := GetElementIndex ( hackTanks , hack ) ;
52804: LD_ADDR_VAR 0 4
52808: PUSH
52809: LD_EXP 150
52813: PPUSH
52814: LD_VAR 0 1
52818: PPUSH
52819: CALL 60582 0 2
52823: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
52824: LD_EXP 151
52828: PUSH
52829: LD_VAR 0 4
52833: ARRAY
52834: IFFALSE 52915
// begin for i in hackTanksCaptured [ index ] do
52836: LD_ADDR_VAR 0 3
52840: PUSH
52841: LD_EXP 151
52845: PUSH
52846: LD_VAR 0 4
52850: ARRAY
52851: PUSH
52852: FOR_IN
52853: IFFALSE 52879
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
52855: LD_VAR 0 3
52859: PUSH
52860: LD_INT 1
52862: ARRAY
52863: PPUSH
52864: LD_VAR 0 3
52868: PUSH
52869: LD_INT 2
52871: ARRAY
52872: PPUSH
52873: CALL_OW 235
52877: GO 52852
52879: POP
52880: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
52881: LD_ADDR_EXP 151
52885: PUSH
52886: LD_EXP 151
52890: PPUSH
52891: LD_VAR 0 4
52895: PPUSH
52896: EMPTY
52897: PPUSH
52898: CALL_OW 1
52902: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
52903: LD_VAR 0 1
52907: PPUSH
52908: LD_INT 0
52910: PPUSH
52911: CALL_OW 505
// end ; end ;
52915: LD_VAR 0 2
52919: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
52920: LD_INT 0
52922: PPUSH
52923: PPUSH
52924: PPUSH
// if not hack in hackTanks or not vehicles then
52925: LD_VAR 0 1
52929: PUSH
52930: LD_EXP 150
52934: IN
52935: NOT
52936: IFTRUE 52945
52938: PUSH
52939: LD_VAR 0 2
52943: NOT
52944: OR
52945: IFFALSE 52949
// exit ;
52947: GO 53224
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
52949: LD_ADDR_VAR 0 2
52953: PUSH
52954: LD_VAR 0 1
52958: PPUSH
52959: LD_VAR 0 2
52963: PPUSH
52964: LD_INT 1
52966: PPUSH
52967: LD_INT 1
52969: PPUSH
52970: CALL 61234 0 4
52974: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
52975: LD_ADDR_VAR 0 5
52979: PUSH
52980: LD_EXP 150
52984: PPUSH
52985: LD_VAR 0 1
52989: PPUSH
52990: CALL 60582 0 2
52994: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
52995: LD_EXP 151
52999: PUSH
53000: LD_VAR 0 5
53004: ARRAY
53005: PUSH
53006: LD_EXP 152
53010: LESS
53011: IFFALSE 53200
// begin for i := 1 to vehicles do
53013: LD_ADDR_VAR 0 4
53017: PUSH
53018: DOUBLE
53019: LD_INT 1
53021: DEC
53022: ST_TO_ADDR
53023: LD_VAR 0 2
53027: PUSH
53028: FOR_TO
53029: IFFALSE 53198
// begin if hackTanksCaptured [ index ] = hackLimit then
53031: LD_EXP 151
53035: PUSH
53036: LD_VAR 0 5
53040: ARRAY
53041: PUSH
53042: LD_EXP 152
53046: EQUAL
53047: IFFALSE 53051
// break ;
53049: GO 53198
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
53051: LD_ADDR_EXP 154
53055: PUSH
53056: LD_EXP 154
53060: PPUSH
53061: LD_VAR 0 5
53065: PPUSH
53066: LD_EXP 154
53070: PUSH
53071: LD_VAR 0 5
53075: ARRAY
53076: PUSH
53077: LD_INT 1
53079: PLUS
53080: PPUSH
53081: CALL_OW 1
53085: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
53086: LD_ADDR_EXP 151
53090: PUSH
53091: LD_EXP 151
53095: PPUSH
53096: LD_VAR 0 5
53100: PUSH
53101: LD_EXP 151
53105: PUSH
53106: LD_VAR 0 5
53110: ARRAY
53111: PUSH
53112: LD_INT 1
53114: PLUS
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PPUSH
53120: LD_VAR 0 2
53124: PUSH
53125: LD_VAR 0 4
53129: ARRAY
53130: PUSH
53131: LD_VAR 0 2
53135: PUSH
53136: LD_VAR 0 4
53140: ARRAY
53141: PPUSH
53142: CALL_OW 255
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PPUSH
53151: CALL 60799 0 3
53155: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
53156: LD_VAR 0 2
53160: PUSH
53161: LD_VAR 0 4
53165: ARRAY
53166: PPUSH
53167: LD_VAR 0 1
53171: PPUSH
53172: CALL_OW 255
53176: PPUSH
53177: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
53181: LD_VAR 0 2
53185: PUSH
53186: LD_VAR 0 4
53190: ARRAY
53191: PPUSH
53192: CALL_OW 141
// end ;
53196: GO 53028
53198: POP
53199: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
53200: LD_VAR 0 1
53204: PPUSH
53205: LD_EXP 151
53209: PUSH
53210: LD_VAR 0 5
53214: ARRAY
53215: PUSH
53216: LD_INT 0
53218: PLUS
53219: PPUSH
53220: CALL_OW 505
// end ;
53224: LD_VAR 0 3
53228: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
53229: LD_INT 0
53231: PPUSH
53232: PPUSH
53233: PPUSH
53234: PPUSH
// if not hack in hackTanks then
53235: LD_VAR 0 1
53239: PUSH
53240: LD_EXP 150
53244: IN
53245: NOT
53246: IFFALSE 53250
// exit ;
53248: GO 53494
// index := GetElementIndex ( hackTanks , hack ) ;
53250: LD_ADDR_VAR 0 4
53254: PUSH
53255: LD_EXP 150
53259: PPUSH
53260: LD_VAR 0 1
53264: PPUSH
53265: CALL 60582 0 2
53269: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
53270: LD_ADDR_VAR 0 3
53274: PUSH
53275: DOUBLE
53276: LD_EXP 151
53280: PUSH
53281: LD_VAR 0 4
53285: ARRAY
53286: INC
53287: ST_TO_ADDR
53288: LD_INT 1
53290: PUSH
53291: FOR_DOWNTO
53292: IFFALSE 53468
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
53294: LD_ADDR_VAR 0 5
53298: PUSH
53299: LD_EXP 151
53303: PUSH
53304: LD_VAR 0 4
53308: ARRAY
53309: PUSH
53310: LD_VAR 0 3
53314: ARRAY
53315: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
53316: LD_VAR 0 5
53320: PUSH
53321: LD_INT 1
53323: ARRAY
53324: PPUSH
53325: CALL_OW 302
53329: NOT
53330: IFTRUE 53358
53332: PUSH
53333: LD_VAR 0 5
53337: PUSH
53338: LD_INT 1
53340: ARRAY
53341: PPUSH
53342: CALL_OW 255
53346: PUSH
53347: LD_VAR 0 1
53351: PPUSH
53352: CALL_OW 255
53356: NONEQUAL
53357: OR
53358: IFFALSE 53466
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
53360: LD_VAR 0 5
53364: PUSH
53365: LD_INT 1
53367: ARRAY
53368: PPUSH
53369: CALL_OW 305
53373: IFFALSE 53401
53375: PUSH
53376: LD_VAR 0 5
53380: PUSH
53381: LD_INT 1
53383: ARRAY
53384: PPUSH
53385: CALL_OW 255
53389: PUSH
53390: LD_VAR 0 1
53394: PPUSH
53395: CALL_OW 255
53399: EQUAL
53400: AND
53401: IFFALSE 53425
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
53403: LD_VAR 0 5
53407: PUSH
53408: LD_INT 1
53410: ARRAY
53411: PPUSH
53412: LD_VAR 0 5
53416: PUSH
53417: LD_INT 2
53419: ARRAY
53420: PPUSH
53421: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
53425: LD_ADDR_EXP 151
53429: PUSH
53430: LD_EXP 151
53434: PPUSH
53435: LD_VAR 0 4
53439: PPUSH
53440: LD_EXP 151
53444: PUSH
53445: LD_VAR 0 4
53449: ARRAY
53450: PPUSH
53451: LD_VAR 0 3
53455: PPUSH
53456: CALL_OW 3
53460: PPUSH
53461: CALL_OW 1
53465: ST_TO_ADDR
// end ; end ;
53466: GO 53291
53468: POP
53469: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
53470: LD_VAR 0 1
53474: PPUSH
53475: LD_EXP 151
53479: PUSH
53480: LD_VAR 0 4
53484: ARRAY
53485: PUSH
53486: LD_INT 0
53488: PLUS
53489: PPUSH
53490: CALL_OW 505
// end ;
53494: LD_VAR 0 2
53498: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
53499: LD_INT 0
53501: PPUSH
53502: PPUSH
53503: PPUSH
53504: PPUSH
// if not hack in hackTanks then
53505: LD_VAR 0 1
53509: PUSH
53510: LD_EXP 150
53514: IN
53515: NOT
53516: IFFALSE 53520
// exit ;
53518: GO 53605
// index := GetElementIndex ( hackTanks , hack ) ;
53520: LD_ADDR_VAR 0 5
53524: PUSH
53525: LD_EXP 150
53529: PPUSH
53530: LD_VAR 0 1
53534: PPUSH
53535: CALL 60582 0 2
53539: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
53540: LD_ADDR_VAR 0 4
53544: PUSH
53545: DOUBLE
53546: LD_INT 1
53548: DEC
53549: ST_TO_ADDR
53550: LD_EXP 151
53554: PUSH
53555: LD_VAR 0 5
53559: ARRAY
53560: PUSH
53561: FOR_TO
53562: IFFALSE 53603
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
53564: LD_EXP 151
53568: PUSH
53569: LD_VAR 0 5
53573: ARRAY
53574: PUSH
53575: LD_VAR 0 4
53579: ARRAY
53580: PUSH
53581: LD_INT 1
53583: ARRAY
53584: PUSH
53585: LD_VAR 0 2
53589: EQUAL
53590: IFFALSE 53601
// KillUnit ( vehicle ) ;
53592: LD_VAR 0 2
53596: PPUSH
53597: CALL_OW 66
53601: GO 53561
53603: POP
53604: POP
// end ;
53605: LD_VAR 0 3
53609: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
53610: LD_EXP 155
53614: NOT
53615: IFFALSE 53650
53617: GO 53619
53619: DISABLE
// begin initMiner := true ;
53620: LD_ADDR_EXP 155
53624: PUSH
53625: LD_INT 1
53627: ST_TO_ADDR
// minersList := [ ] ;
53628: LD_ADDR_EXP 156
53632: PUSH
53633: EMPTY
53634: ST_TO_ADDR
// minerMinesList := [ ] ;
53635: LD_ADDR_EXP 157
53639: PUSH
53640: EMPTY
53641: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
53642: LD_ADDR_EXP 158
53646: PUSH
53647: LD_INT 5
53649: ST_TO_ADDR
// end ;
53650: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
53651: LD_EXP 155
53655: IFFALSE 53673
53657: PUSH
53658: LD_INT 34
53660: PUSH
53661: LD_INT 81
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PPUSH
53668: CALL_OW 69
53672: AND
53673: IFFALSE 54136
53675: GO 53677
53677: DISABLE
53678: LD_INT 0
53680: PPUSH
53681: PPUSH
53682: PPUSH
53683: PPUSH
// begin enable ;
53684: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
53685: LD_ADDR_VAR 0 1
53689: PUSH
53690: LD_INT 34
53692: PUSH
53693: LD_INT 81
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PPUSH
53700: CALL_OW 69
53704: PUSH
53705: FOR_IN
53706: IFFALSE 53778
// begin if not i in minersList then
53708: LD_VAR 0 1
53712: PUSH
53713: LD_EXP 156
53717: IN
53718: NOT
53719: IFFALSE 53776
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
53721: LD_ADDR_EXP 156
53725: PUSH
53726: LD_EXP 156
53730: PPUSH
53731: LD_EXP 156
53735: PUSH
53736: LD_INT 1
53738: PLUS
53739: PPUSH
53740: LD_VAR 0 1
53744: PPUSH
53745: CALL_OW 1
53749: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
53750: LD_ADDR_EXP 157
53754: PUSH
53755: LD_EXP 157
53759: PPUSH
53760: LD_EXP 157
53764: PUSH
53765: LD_INT 1
53767: PLUS
53768: PPUSH
53769: EMPTY
53770: PPUSH
53771: CALL_OW 1
53775: ST_TO_ADDR
// end end ;
53776: GO 53705
53778: POP
53779: POP
// for i := minerMinesList downto 1 do
53780: LD_ADDR_VAR 0 1
53784: PUSH
53785: DOUBLE
53786: LD_EXP 157
53790: INC
53791: ST_TO_ADDR
53792: LD_INT 1
53794: PUSH
53795: FOR_DOWNTO
53796: IFFALSE 54134
// begin if IsLive ( minersList [ i ] ) then
53798: LD_EXP 156
53802: PUSH
53803: LD_VAR 0 1
53807: ARRAY
53808: PPUSH
53809: CALL_OW 300
53813: IFFALSE 53841
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
53815: LD_EXP 156
53819: PUSH
53820: LD_VAR 0 1
53824: ARRAY
53825: PPUSH
53826: LD_EXP 157
53830: PUSH
53831: LD_VAR 0 1
53835: ARRAY
53836: PPUSH
53837: CALL_OW 505
// if not minerMinesList [ i ] then
53841: LD_EXP 157
53845: PUSH
53846: LD_VAR 0 1
53850: ARRAY
53851: NOT
53852: IFFALSE 53856
// continue ;
53854: GO 53795
// for j := minerMinesList [ i ] downto 1 do
53856: LD_ADDR_VAR 0 2
53860: PUSH
53861: DOUBLE
53862: LD_EXP 157
53866: PUSH
53867: LD_VAR 0 1
53871: ARRAY
53872: INC
53873: ST_TO_ADDR
53874: LD_INT 1
53876: PUSH
53877: FOR_DOWNTO
53878: IFFALSE 54130
// begin side := GetSide ( minersList [ i ] ) ;
53880: LD_ADDR_VAR 0 3
53884: PUSH
53885: LD_EXP 156
53889: PUSH
53890: LD_VAR 0 1
53894: ARRAY
53895: PPUSH
53896: CALL_OW 255
53900: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
53901: LD_ADDR_VAR 0 4
53905: PUSH
53906: LD_EXP 157
53910: PUSH
53911: LD_VAR 0 1
53915: ARRAY
53916: PUSH
53917: LD_VAR 0 2
53921: ARRAY
53922: PUSH
53923: LD_INT 1
53925: ARRAY
53926: PPUSH
53927: LD_EXP 157
53931: PUSH
53932: LD_VAR 0 1
53936: ARRAY
53937: PUSH
53938: LD_VAR 0 2
53942: ARRAY
53943: PUSH
53944: LD_INT 2
53946: ARRAY
53947: PPUSH
53948: CALL_OW 428
53952: ST_TO_ADDR
// if not tmp then
53953: LD_VAR 0 4
53957: NOT
53958: IFFALSE 53962
// continue ;
53960: GO 53877
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
53962: LD_VAR 0 4
53966: PUSH
53967: LD_INT 81
53969: PUSH
53970: LD_VAR 0 3
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PPUSH
53979: CALL_OW 69
53983: IN
53984: IFFALSE 54034
53986: PUSH
53987: LD_EXP 157
53991: PUSH
53992: LD_VAR 0 1
53996: ARRAY
53997: PUSH
53998: LD_VAR 0 2
54002: ARRAY
54003: PUSH
54004: LD_INT 1
54006: ARRAY
54007: PPUSH
54008: LD_EXP 157
54012: PUSH
54013: LD_VAR 0 1
54017: ARRAY
54018: PUSH
54019: LD_VAR 0 2
54023: ARRAY
54024: PUSH
54025: LD_INT 2
54027: ARRAY
54028: PPUSH
54029: CALL_OW 458
54033: AND
54034: IFFALSE 54128
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
54036: LD_EXP 157
54040: PUSH
54041: LD_VAR 0 1
54045: ARRAY
54046: PUSH
54047: LD_VAR 0 2
54051: ARRAY
54052: PUSH
54053: LD_INT 1
54055: ARRAY
54056: PPUSH
54057: LD_EXP 157
54061: PUSH
54062: LD_VAR 0 1
54066: ARRAY
54067: PUSH
54068: LD_VAR 0 2
54072: ARRAY
54073: PUSH
54074: LD_INT 2
54076: ARRAY
54077: PPUSH
54078: LD_VAR 0 3
54082: PPUSH
54083: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
54087: LD_ADDR_EXP 157
54091: PUSH
54092: LD_EXP 157
54096: PPUSH
54097: LD_VAR 0 1
54101: PPUSH
54102: LD_EXP 157
54106: PUSH
54107: LD_VAR 0 1
54111: ARRAY
54112: PPUSH
54113: LD_VAR 0 2
54117: PPUSH
54118: CALL_OW 3
54122: PPUSH
54123: CALL_OW 1
54127: ST_TO_ADDR
// end ; end ;
54128: GO 53877
54130: POP
54131: POP
// end ;
54132: GO 53795
54134: POP
54135: POP
// end ;
54136: PPOPN 4
54138: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
54139: LD_INT 0
54141: PPUSH
54142: PPUSH
// result := false ;
54143: LD_ADDR_VAR 0 4
54147: PUSH
54148: LD_INT 0
54150: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
54151: LD_VAR 0 1
54155: PPUSH
54156: CALL_OW 264
54160: PUSH
54161: LD_INT 81
54163: EQUAL
54164: NOT
54165: IFFALSE 54169
// exit ;
54167: GO 54413
// index := GetElementIndex ( minersList , unit ) ;
54169: LD_ADDR_VAR 0 5
54173: PUSH
54174: LD_EXP 156
54178: PPUSH
54179: LD_VAR 0 1
54183: PPUSH
54184: CALL 60582 0 2
54188: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
54189: LD_EXP 157
54193: PUSH
54194: LD_VAR 0 5
54198: ARRAY
54199: PUSH
54200: LD_EXP 158
54204: GREATEREQUAL
54205: IFFALSE 54209
// exit ;
54207: GO 54413
// ComMoveXY ( unit , x , y ) ;
54209: LD_VAR 0 1
54213: PPUSH
54214: LD_VAR 0 2
54218: PPUSH
54219: LD_VAR 0 3
54223: PPUSH
54224: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
54228: LD_INT 35
54230: PPUSH
54231: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
54235: LD_VAR 0 1
54239: PPUSH
54240: LD_VAR 0 2
54244: PPUSH
54245: LD_VAR 0 3
54249: PPUSH
54250: CALL 92628 0 3
54254: NOT
54255: IFFALSE 54268
54257: PUSH
54258: LD_VAR 0 1
54262: PPUSH
54263: CALL_OW 314
54267: AND
54268: IFFALSE 54272
// exit ;
54270: GO 54413
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
54272: LD_VAR 0 2
54276: PPUSH
54277: LD_VAR 0 3
54281: PPUSH
54282: CALL_OW 428
54286: PUSH
54287: LD_VAR 0 1
54291: EQUAL
54292: IFFALSE 54306
54294: PUSH
54295: LD_VAR 0 1
54299: PPUSH
54300: CALL_OW 314
54304: NOT
54305: AND
54306: IFFALSE 54228
// PlaySoundXY ( x , y , PlantMine ) ;
54308: LD_VAR 0 2
54312: PPUSH
54313: LD_VAR 0 3
54317: PPUSH
54318: LD_STRING PlantMine
54320: PPUSH
54321: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
54325: LD_VAR 0 2
54329: PPUSH
54330: LD_VAR 0 3
54334: PPUSH
54335: LD_VAR 0 1
54339: PPUSH
54340: CALL_OW 255
54344: PPUSH
54345: LD_INT 0
54347: PPUSH
54348: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
54352: LD_ADDR_EXP 157
54356: PUSH
54357: LD_EXP 157
54361: PPUSH
54362: LD_VAR 0 5
54366: PUSH
54367: LD_EXP 157
54371: PUSH
54372: LD_VAR 0 5
54376: ARRAY
54377: PUSH
54378: LD_INT 1
54380: PLUS
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PPUSH
54386: LD_VAR 0 2
54390: PUSH
54391: LD_VAR 0 3
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PPUSH
54400: CALL 60799 0 3
54404: ST_TO_ADDR
// result := true ;
54405: LD_ADDR_VAR 0 4
54409: PUSH
54410: LD_INT 1
54412: ST_TO_ADDR
// end ;
54413: LD_VAR 0 4
54417: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
54418: LD_INT 0
54420: PPUSH
54421: PPUSH
54422: PPUSH
// if not unit in minersList then
54423: LD_VAR 0 1
54427: PUSH
54428: LD_EXP 156
54432: IN
54433: NOT
54434: IFFALSE 54438
// exit ;
54436: GO 54832
// index := GetElementIndex ( minersList , unit ) ;
54438: LD_ADDR_VAR 0 6
54442: PUSH
54443: LD_EXP 156
54447: PPUSH
54448: LD_VAR 0 1
54452: PPUSH
54453: CALL 60582 0 2
54457: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
54458: LD_ADDR_VAR 0 5
54462: PUSH
54463: DOUBLE
54464: LD_EXP 157
54468: PUSH
54469: LD_VAR 0 6
54473: ARRAY
54474: INC
54475: ST_TO_ADDR
54476: LD_INT 1
54478: PUSH
54479: FOR_DOWNTO
54480: IFFALSE 54643
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
54482: LD_EXP 157
54486: PUSH
54487: LD_VAR 0 6
54491: ARRAY
54492: PUSH
54493: LD_VAR 0 5
54497: ARRAY
54498: PUSH
54499: LD_INT 1
54501: ARRAY
54502: PUSH
54503: LD_VAR 0 2
54507: EQUAL
54508: IFFALSE 54538
54510: PUSH
54511: LD_EXP 157
54515: PUSH
54516: LD_VAR 0 6
54520: ARRAY
54521: PUSH
54522: LD_VAR 0 5
54526: ARRAY
54527: PUSH
54528: LD_INT 2
54530: ARRAY
54531: PUSH
54532: LD_VAR 0 3
54536: EQUAL
54537: AND
54538: IFFALSE 54641
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
54540: LD_EXP 157
54544: PUSH
54545: LD_VAR 0 6
54549: ARRAY
54550: PUSH
54551: LD_VAR 0 5
54555: ARRAY
54556: PUSH
54557: LD_INT 1
54559: ARRAY
54560: PPUSH
54561: LD_EXP 157
54565: PUSH
54566: LD_VAR 0 6
54570: ARRAY
54571: PUSH
54572: LD_VAR 0 5
54576: ARRAY
54577: PUSH
54578: LD_INT 2
54580: ARRAY
54581: PPUSH
54582: LD_VAR 0 1
54586: PPUSH
54587: CALL_OW 255
54591: PPUSH
54592: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
54596: LD_ADDR_EXP 157
54600: PUSH
54601: LD_EXP 157
54605: PPUSH
54606: LD_VAR 0 6
54610: PPUSH
54611: LD_EXP 157
54615: PUSH
54616: LD_VAR 0 6
54620: ARRAY
54621: PPUSH
54622: LD_VAR 0 5
54626: PPUSH
54627: CALL_OW 3
54631: PPUSH
54632: CALL_OW 1
54636: ST_TO_ADDR
// exit ;
54637: POP
54638: POP
54639: GO 54832
// end ; end ;
54641: GO 54479
54643: POP
54644: POP
// for i := minerMinesList [ index ] downto 1 do
54645: LD_ADDR_VAR 0 5
54649: PUSH
54650: DOUBLE
54651: LD_EXP 157
54655: PUSH
54656: LD_VAR 0 6
54660: ARRAY
54661: INC
54662: ST_TO_ADDR
54663: LD_INT 1
54665: PUSH
54666: FOR_DOWNTO
54667: IFFALSE 54830
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
54669: LD_EXP 157
54673: PUSH
54674: LD_VAR 0 6
54678: ARRAY
54679: PUSH
54680: LD_VAR 0 5
54684: ARRAY
54685: PUSH
54686: LD_INT 1
54688: ARRAY
54689: PPUSH
54690: LD_EXP 157
54694: PUSH
54695: LD_VAR 0 6
54699: ARRAY
54700: PUSH
54701: LD_VAR 0 5
54705: ARRAY
54706: PUSH
54707: LD_INT 2
54709: ARRAY
54710: PPUSH
54711: LD_VAR 0 2
54715: PPUSH
54716: LD_VAR 0 3
54720: PPUSH
54721: CALL_OW 298
54725: PUSH
54726: LD_INT 6
54728: LESS
54729: IFFALSE 54828
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
54731: LD_EXP 157
54735: PUSH
54736: LD_VAR 0 6
54740: ARRAY
54741: PUSH
54742: LD_VAR 0 5
54746: ARRAY
54747: PUSH
54748: LD_INT 1
54750: ARRAY
54751: PPUSH
54752: LD_EXP 157
54756: PUSH
54757: LD_VAR 0 6
54761: ARRAY
54762: PUSH
54763: LD_VAR 0 5
54767: ARRAY
54768: PUSH
54769: LD_INT 2
54771: ARRAY
54772: PPUSH
54773: LD_VAR 0 1
54777: PPUSH
54778: CALL_OW 255
54782: PPUSH
54783: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
54787: LD_ADDR_EXP 157
54791: PUSH
54792: LD_EXP 157
54796: PPUSH
54797: LD_VAR 0 6
54801: PPUSH
54802: LD_EXP 157
54806: PUSH
54807: LD_VAR 0 6
54811: ARRAY
54812: PPUSH
54813: LD_VAR 0 5
54817: PPUSH
54818: CALL_OW 3
54822: PPUSH
54823: CALL_OW 1
54827: ST_TO_ADDR
// end ; end ;
54828: GO 54666
54830: POP
54831: POP
// end ;
54832: LD_VAR 0 4
54836: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
54837: LD_INT 0
54839: PPUSH
54840: PPUSH
54841: PPUSH
54842: PPUSH
54843: PPUSH
54844: PPUSH
54845: PPUSH
54846: PPUSH
54847: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
54848: LD_VAR 0 1
54852: PPUSH
54853: CALL_OW 264
54857: PUSH
54858: LD_INT 81
54860: EQUAL
54861: NOT
54862: IFTRUE 54877
54864: PUSH
54865: LD_VAR 0 1
54869: PUSH
54870: LD_EXP 156
54874: IN
54875: NOT
54876: OR
54877: IFFALSE 54881
// exit ;
54879: GO 55207
// index := GetElementIndex ( minersList , unit ) ;
54881: LD_ADDR_VAR 0 6
54885: PUSH
54886: LD_EXP 156
54890: PPUSH
54891: LD_VAR 0 1
54895: PPUSH
54896: CALL 60582 0 2
54900: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
54901: LD_ADDR_VAR 0 8
54905: PUSH
54906: LD_EXP 158
54910: PUSH
54911: LD_EXP 157
54915: PUSH
54916: LD_VAR 0 6
54920: ARRAY
54921: MINUS
54922: ST_TO_ADDR
// if not minesFreeAmount then
54923: LD_VAR 0 8
54927: NOT
54928: IFFALSE 54932
// exit ;
54930: GO 55207
// tmp := [ ] ;
54932: LD_ADDR_VAR 0 7
54936: PUSH
54937: EMPTY
54938: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
54939: LD_ADDR_VAR 0 5
54943: PUSH
54944: DOUBLE
54945: LD_INT 1
54947: DEC
54948: ST_TO_ADDR
54949: LD_VAR 0 8
54953: PUSH
54954: FOR_TO
54955: IFFALSE 55154
// begin _d := rand ( 0 , 5 ) ;
54957: LD_ADDR_VAR 0 11
54961: PUSH
54962: LD_INT 0
54964: PPUSH
54965: LD_INT 5
54967: PPUSH
54968: CALL_OW 12
54972: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
54973: LD_ADDR_VAR 0 12
54977: PUSH
54978: LD_INT 2
54980: PPUSH
54981: LD_INT 6
54983: PPUSH
54984: CALL_OW 12
54988: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
54989: LD_ADDR_VAR 0 9
54993: PUSH
54994: LD_VAR 0 2
54998: PPUSH
54999: LD_VAR 0 11
55003: PPUSH
55004: LD_VAR 0 12
55008: PPUSH
55009: CALL_OW 272
55013: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
55014: LD_ADDR_VAR 0 10
55018: PUSH
55019: LD_VAR 0 3
55023: PPUSH
55024: LD_VAR 0 11
55028: PPUSH
55029: LD_VAR 0 12
55033: PPUSH
55034: CALL_OW 273
55038: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
55039: LD_VAR 0 9
55043: PPUSH
55044: LD_VAR 0 10
55048: PPUSH
55049: CALL_OW 488
55053: IFFALSE 55077
55055: PUSH
55056: LD_VAR 0 9
55060: PUSH
55061: LD_VAR 0 10
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_VAR 0 7
55074: IN
55075: NOT
55076: AND
55077: IFFALSE 55096
55079: PUSH
55080: LD_VAR 0 9
55084: PPUSH
55085: LD_VAR 0 10
55089: PPUSH
55090: CALL_OW 458
55094: NOT
55095: AND
55096: IFFALSE 55138
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
55098: LD_ADDR_VAR 0 7
55102: PUSH
55103: LD_VAR 0 7
55107: PPUSH
55108: LD_VAR 0 7
55112: PUSH
55113: LD_INT 1
55115: PLUS
55116: PPUSH
55117: LD_VAR 0 9
55121: PUSH
55122: LD_VAR 0 10
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PPUSH
55131: CALL_OW 1
55135: ST_TO_ADDR
55136: GO 55152
// i := i - 1 ;
55138: LD_ADDR_VAR 0 5
55142: PUSH
55143: LD_VAR 0 5
55147: PUSH
55148: LD_INT 1
55150: MINUS
55151: ST_TO_ADDR
// end ;
55152: GO 54954
55154: POP
55155: POP
// for i in tmp do
55156: LD_ADDR_VAR 0 5
55160: PUSH
55161: LD_VAR 0 7
55165: PUSH
55166: FOR_IN
55167: IFFALSE 55205
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
55169: LD_VAR 0 1
55173: PPUSH
55174: LD_VAR 0 5
55178: PUSH
55179: LD_INT 1
55181: ARRAY
55182: PPUSH
55183: LD_VAR 0 5
55187: PUSH
55188: LD_INT 2
55190: ARRAY
55191: PPUSH
55192: CALL 54139 0 3
55196: NOT
55197: IFFALSE 55203
// exit ;
55199: POP
55200: POP
55201: GO 55207
55203: GO 55166
55205: POP
55206: POP
// end ;
55207: LD_VAR 0 4
55211: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
55212: LD_INT 0
55214: PPUSH
55215: PPUSH
55216: PPUSH
55217: PPUSH
55218: PPUSH
55219: PPUSH
55220: PPUSH
55221: PPUSH
55222: PPUSH
// if GetClass ( unit ) <> class_sniper then
55223: LD_VAR 0 1
55227: PPUSH
55228: CALL_OW 257
55232: PUSH
55233: LD_INT 5
55235: NONEQUAL
55236: IFFALSE 55240
// exit ;
55238: GO 55710
// dist := 8 ;
55240: LD_ADDR_VAR 0 5
55244: PUSH
55245: LD_INT 8
55247: ST_TO_ADDR
// viewRange := 12 ;
55248: LD_ADDR_VAR 0 8
55252: PUSH
55253: LD_INT 12
55255: ST_TO_ADDR
// side := GetSide ( unit ) ;
55256: LD_ADDR_VAR 0 6
55260: PUSH
55261: LD_VAR 0 1
55265: PPUSH
55266: CALL_OW 255
55270: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
55271: LD_INT 61
55273: PPUSH
55274: LD_VAR 0 6
55278: PPUSH
55279: CALL_OW 321
55283: PUSH
55284: LD_INT 2
55286: EQUAL
55287: IFFALSE 55297
// viewRange := 16 ;
55289: LD_ADDR_VAR 0 8
55293: PUSH
55294: LD_INT 16
55296: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
55297: LD_VAR 0 1
55301: PPUSH
55302: LD_VAR 0 2
55306: PPUSH
55307: LD_VAR 0 3
55311: PPUSH
55312: CALL_OW 297
55316: PUSH
55317: LD_VAR 0 5
55321: GREATER
55322: IFFALSE 55401
// begin ComMoveXY ( unit , x , y ) ;
55324: LD_VAR 0 1
55328: PPUSH
55329: LD_VAR 0 2
55333: PPUSH
55334: LD_VAR 0 3
55338: PPUSH
55339: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
55343: LD_INT 35
55345: PPUSH
55346: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
55350: LD_VAR 0 1
55354: PPUSH
55355: LD_VAR 0 2
55359: PPUSH
55360: LD_VAR 0 3
55364: PPUSH
55365: CALL 92628 0 3
55369: NOT
55370: IFFALSE 55374
// exit ;
55372: GO 55710
// until GetDistUnitXY ( unit , x , y ) < dist ;
55374: LD_VAR 0 1
55378: PPUSH
55379: LD_VAR 0 2
55383: PPUSH
55384: LD_VAR 0 3
55388: PPUSH
55389: CALL_OW 297
55393: PUSH
55394: LD_VAR 0 5
55398: LESS
55399: IFFALSE 55343
// end ; ComTurnXY ( unit , x , y ) ;
55401: LD_VAR 0 1
55405: PPUSH
55406: LD_VAR 0 2
55410: PPUSH
55411: LD_VAR 0 3
55415: PPUSH
55416: CALL_OW 118
// repeat if Multiplayer then
55420: LD_OWVAR 4
55424: IFFALSE 55435
// wait ( 35 ) else
55426: LD_INT 35
55428: PPUSH
55429: CALL_OW 67
55433: GO 55442
// wait ( 5 ) ;
55435: LD_INT 5
55437: PPUSH
55438: CALL_OW 67
// _d := GetDir ( unit ) ;
55442: LD_ADDR_VAR 0 11
55446: PUSH
55447: LD_VAR 0 1
55451: PPUSH
55452: CALL_OW 254
55456: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
55457: LD_ADDR_VAR 0 7
55461: PUSH
55462: LD_VAR 0 1
55466: PPUSH
55467: CALL_OW 250
55471: PPUSH
55472: LD_VAR 0 1
55476: PPUSH
55477: CALL_OW 251
55481: PPUSH
55482: LD_VAR 0 2
55486: PPUSH
55487: LD_VAR 0 3
55491: PPUSH
55492: CALL 95264 0 4
55496: ST_TO_ADDR
// until dir = _d ;
55497: LD_VAR 0 7
55501: PUSH
55502: LD_VAR 0 11
55506: EQUAL
55507: IFFALSE 55420
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
55509: LD_ADDR_VAR 0 9
55513: PUSH
55514: LD_VAR 0 1
55518: PPUSH
55519: CALL_OW 250
55523: PPUSH
55524: LD_VAR 0 7
55528: PPUSH
55529: LD_VAR 0 5
55533: PPUSH
55534: CALL_OW 272
55538: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
55539: LD_ADDR_VAR 0 10
55543: PUSH
55544: LD_VAR 0 1
55548: PPUSH
55549: CALL_OW 251
55553: PPUSH
55554: LD_VAR 0 7
55558: PPUSH
55559: LD_VAR 0 5
55563: PPUSH
55564: CALL_OW 273
55568: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55569: LD_VAR 0 9
55573: PPUSH
55574: LD_VAR 0 10
55578: PPUSH
55579: CALL_OW 488
55583: NOT
55584: IFFALSE 55588
// exit ;
55586: GO 55710
// ComAnimCustom ( unit , 1 ) ;
55588: LD_VAR 0 1
55592: PPUSH
55593: LD_INT 1
55595: PPUSH
55596: CALL_OW 592
// p := 0 ;
55600: LD_ADDR_VAR 0 12
55604: PUSH
55605: LD_INT 0
55607: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
55608: LD_VAR 0 9
55612: PPUSH
55613: LD_VAR 0 10
55617: PPUSH
55618: LD_VAR 0 6
55622: PPUSH
55623: LD_VAR 0 8
55627: PPUSH
55628: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
55632: LD_INT 35
55634: PPUSH
55635: CALL_OW 67
// p := Inc ( p ) ;
55639: LD_ADDR_VAR 0 12
55643: PUSH
55644: LD_VAR 0 12
55648: PPUSH
55649: CALL 95220 0 1
55653: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
55654: LD_VAR 0 12
55658: PUSH
55659: LD_INT 3
55661: EQUAL
55662: IFTRUE 55676
55664: PUSH
55665: LD_VAR 0 1
55669: PPUSH
55670: CALL_OW 302
55674: NOT
55675: OR
55676: IFTRUE 55689
55678: PUSH
55679: LD_VAR 0 1
55683: PPUSH
55684: CALL_OW 301
55688: OR
55689: IFFALSE 55632
// RemoveSeeing ( _x , _y , side ) ;
55691: LD_VAR 0 9
55695: PPUSH
55696: LD_VAR 0 10
55700: PPUSH
55701: LD_VAR 0 6
55705: PPUSH
55706: CALL_OW 331
// end ; end_of_file
55710: LD_VAR 0 4
55714: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
55715: LD_INT 0
55717: PPUSH
55718: PPUSH
// if exist_mode then
55719: LD_VAR 0 2
55723: IFFALSE 55769
// begin unit := CreateCharacter ( prefix & ident ) ;
55725: LD_ADDR_VAR 0 5
55729: PUSH
55730: LD_VAR 0 3
55734: PUSH
55735: LD_VAR 0 1
55739: STR
55740: PPUSH
55741: CALL_OW 34
55745: ST_TO_ADDR
// if unit then
55746: LD_VAR 0 5
55750: IFFALSE 55767
// DeleteCharacters ( prefix & ident ) ;
55752: LD_VAR 0 3
55756: PUSH
55757: LD_VAR 0 1
55761: STR
55762: PPUSH
55763: CALL_OW 40
// end else
55767: GO 55784
// unit := NewCharacter ( ident ) ;
55769: LD_ADDR_VAR 0 5
55773: PUSH
55774: LD_VAR 0 1
55778: PPUSH
55779: CALL_OW 25
55783: ST_TO_ADDR
// result := unit ;
55784: LD_ADDR_VAR 0 4
55788: PUSH
55789: LD_VAR 0 5
55793: ST_TO_ADDR
// end ;
55794: LD_VAR 0 4
55798: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
55799: LD_INT 0
55801: PPUSH
55802: PPUSH
// if exist_mode then
55803: LD_VAR 0 2
55807: IFFALSE 55832
// unit := CreateCharacter ( prefix & ident ) else
55809: LD_ADDR_VAR 0 5
55813: PUSH
55814: LD_VAR 0 3
55818: PUSH
55819: LD_VAR 0 1
55823: STR
55824: PPUSH
55825: CALL_OW 34
55829: ST_TO_ADDR
55830: GO 55847
// unit := NewCharacter ( ident ) ;
55832: LD_ADDR_VAR 0 5
55836: PUSH
55837: LD_VAR 0 1
55841: PPUSH
55842: CALL_OW 25
55846: ST_TO_ADDR
// result := unit ;
55847: LD_ADDR_VAR 0 4
55851: PUSH
55852: LD_VAR 0 5
55856: ST_TO_ADDR
// end ;
55857: LD_VAR 0 4
55861: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
55862: LD_INT 0
55864: PPUSH
55865: PPUSH
// if not side or not nation then
55866: LD_VAR 0 1
55870: NOT
55871: IFTRUE 55880
55873: PUSH
55874: LD_VAR 0 2
55878: NOT
55879: OR
55880: IFFALSE 55884
// exit ;
55882: GO 56654
// case nation of nation_american :
55884: LD_VAR 0 2
55888: PUSH
55889: LD_INT 1
55891: DOUBLE
55892: EQUAL
55893: IFTRUE 55897
55895: GO 56111
55897: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
55898: LD_ADDR_VAR 0 4
55902: PUSH
55903: LD_INT 35
55905: PUSH
55906: LD_INT 45
55908: PUSH
55909: LD_INT 46
55911: PUSH
55912: LD_INT 47
55914: PUSH
55915: LD_INT 82
55917: PUSH
55918: LD_INT 83
55920: PUSH
55921: LD_INT 84
55923: PUSH
55924: LD_INT 85
55926: PUSH
55927: LD_INT 86
55929: PUSH
55930: LD_INT 1
55932: PUSH
55933: LD_INT 2
55935: PUSH
55936: LD_INT 6
55938: PUSH
55939: LD_INT 15
55941: PUSH
55942: LD_INT 16
55944: PUSH
55945: LD_INT 7
55947: PUSH
55948: LD_INT 12
55950: PUSH
55951: LD_INT 13
55953: PUSH
55954: LD_INT 10
55956: PUSH
55957: LD_INT 14
55959: PUSH
55960: LD_INT 20
55962: PUSH
55963: LD_INT 21
55965: PUSH
55966: LD_INT 22
55968: PUSH
55969: LD_INT 25
55971: PUSH
55972: LD_INT 32
55974: PUSH
55975: LD_INT 27
55977: PUSH
55978: LD_INT 36
55980: PUSH
55981: LD_INT 69
55983: PUSH
55984: LD_INT 39
55986: PUSH
55987: LD_INT 34
55989: PUSH
55990: LD_INT 40
55992: PUSH
55993: LD_INT 48
55995: PUSH
55996: LD_INT 49
55998: PUSH
55999: LD_INT 50
56001: PUSH
56002: LD_INT 51
56004: PUSH
56005: LD_INT 52
56007: PUSH
56008: LD_INT 53
56010: PUSH
56011: LD_INT 54
56013: PUSH
56014: LD_INT 55
56016: PUSH
56017: LD_INT 56
56019: PUSH
56020: LD_INT 57
56022: PUSH
56023: LD_INT 58
56025: PUSH
56026: LD_INT 59
56028: PUSH
56029: LD_INT 60
56031: PUSH
56032: LD_INT 61
56034: PUSH
56035: LD_INT 62
56037: PUSH
56038: LD_INT 80
56040: PUSH
56041: LD_INT 82
56043: PUSH
56044: LD_INT 83
56046: PUSH
56047: LD_INT 84
56049: PUSH
56050: LD_INT 85
56052: PUSH
56053: LD_INT 86
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: ST_TO_ADDR
56109: GO 56576
56111: LD_INT 2
56113: DOUBLE
56114: EQUAL
56115: IFTRUE 56119
56117: GO 56345
56119: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
56120: LD_ADDR_VAR 0 4
56124: PUSH
56125: LD_INT 35
56127: PUSH
56128: LD_INT 45
56130: PUSH
56131: LD_INT 46
56133: PUSH
56134: LD_INT 47
56136: PUSH
56137: LD_INT 82
56139: PUSH
56140: LD_INT 83
56142: PUSH
56143: LD_INT 84
56145: PUSH
56146: LD_INT 85
56148: PUSH
56149: LD_INT 87
56151: PUSH
56152: LD_INT 70
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: LD_INT 11
56160: PUSH
56161: LD_INT 3
56163: PUSH
56164: LD_INT 4
56166: PUSH
56167: LD_INT 5
56169: PUSH
56170: LD_INT 6
56172: PUSH
56173: LD_INT 15
56175: PUSH
56176: LD_INT 18
56178: PUSH
56179: LD_INT 7
56181: PUSH
56182: LD_INT 17
56184: PUSH
56185: LD_INT 8
56187: PUSH
56188: LD_INT 20
56190: PUSH
56191: LD_INT 21
56193: PUSH
56194: LD_INT 22
56196: PUSH
56197: LD_INT 72
56199: PUSH
56200: LD_INT 26
56202: PUSH
56203: LD_INT 69
56205: PUSH
56206: LD_INT 39
56208: PUSH
56209: LD_INT 40
56211: PUSH
56212: LD_INT 41
56214: PUSH
56215: LD_INT 42
56217: PUSH
56218: LD_INT 43
56220: PUSH
56221: LD_INT 48
56223: PUSH
56224: LD_INT 49
56226: PUSH
56227: LD_INT 50
56229: PUSH
56230: LD_INT 51
56232: PUSH
56233: LD_INT 52
56235: PUSH
56236: LD_INT 53
56238: PUSH
56239: LD_INT 54
56241: PUSH
56242: LD_INT 55
56244: PUSH
56245: LD_INT 56
56247: PUSH
56248: LD_INT 60
56250: PUSH
56251: LD_INT 61
56253: PUSH
56254: LD_INT 62
56256: PUSH
56257: LD_INT 66
56259: PUSH
56260: LD_INT 67
56262: PUSH
56263: LD_INT 68
56265: PUSH
56266: LD_INT 81
56268: PUSH
56269: LD_INT 82
56271: PUSH
56272: LD_INT 83
56274: PUSH
56275: LD_INT 84
56277: PUSH
56278: LD_INT 85
56280: PUSH
56281: LD_INT 87
56283: PUSH
56284: LD_INT 88
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: ST_TO_ADDR
56343: GO 56576
56345: LD_INT 3
56347: DOUBLE
56348: EQUAL
56349: IFTRUE 56353
56351: GO 56575
56353: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
56354: LD_ADDR_VAR 0 4
56358: PUSH
56359: LD_INT 46
56361: PUSH
56362: LD_INT 47
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: LD_INT 2
56370: PUSH
56371: LD_INT 82
56373: PUSH
56374: LD_INT 83
56376: PUSH
56377: LD_INT 84
56379: PUSH
56380: LD_INT 85
56382: PUSH
56383: LD_INT 86
56385: PUSH
56386: LD_INT 11
56388: PUSH
56389: LD_INT 9
56391: PUSH
56392: LD_INT 20
56394: PUSH
56395: LD_INT 19
56397: PUSH
56398: LD_INT 21
56400: PUSH
56401: LD_INT 24
56403: PUSH
56404: LD_INT 22
56406: PUSH
56407: LD_INT 25
56409: PUSH
56410: LD_INT 28
56412: PUSH
56413: LD_INT 29
56415: PUSH
56416: LD_INT 30
56418: PUSH
56419: LD_INT 31
56421: PUSH
56422: LD_INT 37
56424: PUSH
56425: LD_INT 38
56427: PUSH
56428: LD_INT 32
56430: PUSH
56431: LD_INT 27
56433: PUSH
56434: LD_INT 33
56436: PUSH
56437: LD_INT 69
56439: PUSH
56440: LD_INT 39
56442: PUSH
56443: LD_INT 34
56445: PUSH
56446: LD_INT 40
56448: PUSH
56449: LD_INT 71
56451: PUSH
56452: LD_INT 23
56454: PUSH
56455: LD_INT 44
56457: PUSH
56458: LD_INT 48
56460: PUSH
56461: LD_INT 49
56463: PUSH
56464: LD_INT 50
56466: PUSH
56467: LD_INT 51
56469: PUSH
56470: LD_INT 52
56472: PUSH
56473: LD_INT 53
56475: PUSH
56476: LD_INT 54
56478: PUSH
56479: LD_INT 55
56481: PUSH
56482: LD_INT 56
56484: PUSH
56485: LD_INT 57
56487: PUSH
56488: LD_INT 58
56490: PUSH
56491: LD_INT 59
56493: PUSH
56494: LD_INT 63
56496: PUSH
56497: LD_INT 64
56499: PUSH
56500: LD_INT 65
56502: PUSH
56503: LD_INT 82
56505: PUSH
56506: LD_INT 83
56508: PUSH
56509: LD_INT 84
56511: PUSH
56512: LD_INT 85
56514: PUSH
56515: LD_INT 86
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: ST_TO_ADDR
56573: GO 56576
56575: POP
// if state > - 1 and state < 3 then
56576: LD_VAR 0 3
56580: PUSH
56581: LD_INT 1
56583: NEG
56584: GREATER
56585: IFFALSE 56597
56587: PUSH
56588: LD_VAR 0 3
56592: PUSH
56593: LD_INT 3
56595: LESS
56596: AND
56597: IFFALSE 56654
// for i in result do
56599: LD_ADDR_VAR 0 5
56603: PUSH
56604: LD_VAR 0 4
56608: PUSH
56609: FOR_IN
56610: IFFALSE 56652
// if GetTech ( i , side ) <> state then
56612: LD_VAR 0 5
56616: PPUSH
56617: LD_VAR 0 1
56621: PPUSH
56622: CALL_OW 321
56626: PUSH
56627: LD_VAR 0 3
56631: NONEQUAL
56632: IFFALSE 56650
// result := result diff i ;
56634: LD_ADDR_VAR 0 4
56638: PUSH
56639: LD_VAR 0 4
56643: PUSH
56644: LD_VAR 0 5
56648: DIFF
56649: ST_TO_ADDR
56650: GO 56609
56652: POP
56653: POP
// end ;
56654: LD_VAR 0 4
56658: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
56659: LD_INT 0
56661: PPUSH
56662: PPUSH
56663: PPUSH
// result := true ;
56664: LD_ADDR_VAR 0 3
56668: PUSH
56669: LD_INT 1
56671: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
56672: LD_ADDR_VAR 0 5
56676: PUSH
56677: LD_VAR 0 2
56681: PPUSH
56682: CALL_OW 480
56686: ST_TO_ADDR
// if not tmp then
56687: LD_VAR 0 5
56691: NOT
56692: IFFALSE 56696
// exit ;
56694: GO 56745
// for i in tmp do
56696: LD_ADDR_VAR 0 4
56700: PUSH
56701: LD_VAR 0 5
56705: PUSH
56706: FOR_IN
56707: IFFALSE 56743
// if GetTech ( i , side ) <> state_researched then
56709: LD_VAR 0 4
56713: PPUSH
56714: LD_VAR 0 1
56718: PPUSH
56719: CALL_OW 321
56723: PUSH
56724: LD_INT 2
56726: NONEQUAL
56727: IFFALSE 56741
// begin result := false ;
56729: LD_ADDR_VAR 0 3
56733: PUSH
56734: LD_INT 0
56736: ST_TO_ADDR
// exit ;
56737: POP
56738: POP
56739: GO 56745
// end ;
56741: GO 56706
56743: POP
56744: POP
// end ;
56745: LD_VAR 0 3
56749: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
56750: LD_INT 0
56752: PPUSH
56753: PPUSH
56754: PPUSH
56755: PPUSH
56756: PPUSH
56757: PPUSH
56758: PPUSH
56759: PPUSH
56760: PPUSH
56761: PPUSH
56762: PPUSH
56763: PPUSH
56764: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
56765: LD_VAR 0 1
56769: NOT
56770: IFTRUE 56787
56772: PUSH
56773: LD_VAR 0 1
56777: PPUSH
56778: CALL_OW 257
56782: PUSH
56783: LD_INT 9
56785: NONEQUAL
56786: OR
56787: IFFALSE 56791
// exit ;
56789: GO 57370
// side := GetSide ( unit ) ;
56791: LD_ADDR_VAR 0 9
56795: PUSH
56796: LD_VAR 0 1
56800: PPUSH
56801: CALL_OW 255
56805: ST_TO_ADDR
// tech_space := tech_spacanom ;
56806: LD_ADDR_VAR 0 12
56810: PUSH
56811: LD_INT 29
56813: ST_TO_ADDR
// tech_time := tech_taurad ;
56814: LD_ADDR_VAR 0 13
56818: PUSH
56819: LD_INT 28
56821: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
56822: LD_ADDR_VAR 0 11
56826: PUSH
56827: LD_VAR 0 1
56831: PPUSH
56832: CALL_OW 310
56836: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
56837: LD_VAR 0 11
56841: PPUSH
56842: CALL_OW 247
56846: PUSH
56847: LD_INT 2
56849: EQUAL
56850: IFFALSE 56854
// exit ;
56852: GO 57370
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
56854: LD_ADDR_VAR 0 8
56858: PUSH
56859: LD_INT 81
56861: PUSH
56862: LD_VAR 0 9
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 3
56873: PUSH
56874: LD_INT 21
56876: PUSH
56877: LD_INT 3
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PPUSH
56892: CALL_OW 69
56896: ST_TO_ADDR
// if not tmp then
56897: LD_VAR 0 8
56901: NOT
56902: IFFALSE 56906
// exit ;
56904: GO 57370
// if in_unit then
56906: LD_VAR 0 11
56910: IFFALSE 56934
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
56912: LD_ADDR_VAR 0 10
56916: PUSH
56917: LD_VAR 0 8
56921: PPUSH
56922: LD_VAR 0 11
56926: PPUSH
56927: CALL_OW 74
56931: ST_TO_ADDR
56932: GO 56954
// enemy := NearestUnitToUnit ( tmp , unit ) ;
56934: LD_ADDR_VAR 0 10
56938: PUSH
56939: LD_VAR 0 8
56943: PPUSH
56944: LD_VAR 0 1
56948: PPUSH
56949: CALL_OW 74
56953: ST_TO_ADDR
// if not enemy then
56954: LD_VAR 0 10
56958: NOT
56959: IFFALSE 56963
// exit ;
56961: GO 57370
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
56963: LD_VAR 0 11
56967: IFFALSE 56989
56969: PUSH
56970: LD_VAR 0 11
56974: PPUSH
56975: LD_VAR 0 10
56979: PPUSH
56980: CALL_OW 296
56984: PUSH
56985: LD_INT 13
56987: GREATER
56988: AND
56989: IFTRUE 57011
56991: PUSH
56992: LD_VAR 0 1
56996: PPUSH
56997: LD_VAR 0 10
57001: PPUSH
57002: CALL_OW 296
57006: PUSH
57007: LD_INT 12
57009: GREATER
57010: OR
57011: IFFALSE 57015
// exit ;
57013: GO 57370
// missile := [ 1 ] ;
57015: LD_ADDR_VAR 0 14
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: EMPTY
57024: LIST
57025: ST_TO_ADDR
// if Researched ( side , tech_space ) then
57026: LD_VAR 0 9
57030: PPUSH
57031: LD_VAR 0 12
57035: PPUSH
57036: CALL_OW 325
57040: IFFALSE 57069
// missile := Replace ( missile , missile + 1 , 2 ) ;
57042: LD_ADDR_VAR 0 14
57046: PUSH
57047: LD_VAR 0 14
57051: PPUSH
57052: LD_VAR 0 14
57056: PUSH
57057: LD_INT 1
57059: PLUS
57060: PPUSH
57061: LD_INT 2
57063: PPUSH
57064: CALL_OW 1
57068: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
57069: LD_VAR 0 9
57073: PPUSH
57074: LD_VAR 0 13
57078: PPUSH
57079: CALL_OW 325
57083: IFFALSE 57107
57085: PUSH
57086: LD_VAR 0 10
57090: PPUSH
57091: CALL_OW 255
57095: PPUSH
57096: LD_VAR 0 13
57100: PPUSH
57101: CALL_OW 325
57105: NOT
57106: AND
57107: IFFALSE 57136
// missile := Replace ( missile , missile + 1 , 3 ) ;
57109: LD_ADDR_VAR 0 14
57113: PUSH
57114: LD_VAR 0 14
57118: PPUSH
57119: LD_VAR 0 14
57123: PUSH
57124: LD_INT 1
57126: PLUS
57127: PPUSH
57128: LD_INT 3
57130: PPUSH
57131: CALL_OW 1
57135: ST_TO_ADDR
// if missile < 2 then
57136: LD_VAR 0 14
57140: PUSH
57141: LD_INT 2
57143: LESS
57144: IFFALSE 57148
// exit ;
57146: GO 57370
// x := GetX ( enemy ) ;
57148: LD_ADDR_VAR 0 4
57152: PUSH
57153: LD_VAR 0 10
57157: PPUSH
57158: CALL_OW 250
57162: ST_TO_ADDR
// y := GetY ( enemy ) ;
57163: LD_ADDR_VAR 0 5
57167: PUSH
57168: LD_VAR 0 10
57172: PPUSH
57173: CALL_OW 251
57177: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
57178: LD_ADDR_VAR 0 6
57182: PUSH
57183: LD_VAR 0 4
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PPUSH
57192: LD_INT 1
57194: PPUSH
57195: CALL_OW 12
57199: PLUS
57200: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
57201: LD_ADDR_VAR 0 7
57205: PUSH
57206: LD_VAR 0 5
57210: PUSH
57211: LD_INT 1
57213: NEG
57214: PPUSH
57215: LD_INT 1
57217: PPUSH
57218: CALL_OW 12
57222: PLUS
57223: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57224: LD_VAR 0 6
57228: PPUSH
57229: LD_VAR 0 7
57233: PPUSH
57234: CALL_OW 488
57238: NOT
57239: IFFALSE 57261
// begin _x := x ;
57241: LD_ADDR_VAR 0 6
57245: PUSH
57246: LD_VAR 0 4
57250: ST_TO_ADDR
// _y := y ;
57251: LD_ADDR_VAR 0 7
57255: PUSH
57256: LD_VAR 0 5
57260: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
57261: LD_ADDR_VAR 0 3
57265: PUSH
57266: LD_INT 1
57268: PPUSH
57269: LD_VAR 0 14
57273: PPUSH
57274: CALL_OW 12
57278: ST_TO_ADDR
// case i of 1 :
57279: LD_VAR 0 3
57283: PUSH
57284: LD_INT 1
57286: DOUBLE
57287: EQUAL
57288: IFTRUE 57292
57290: GO 57309
57292: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
57293: LD_VAR 0 1
57297: PPUSH
57298: LD_VAR 0 10
57302: PPUSH
57303: CALL_OW 115
57307: GO 57370
57309: LD_INT 2
57311: DOUBLE
57312: EQUAL
57313: IFTRUE 57317
57315: GO 57339
57317: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
57318: LD_VAR 0 1
57322: PPUSH
57323: LD_VAR 0 6
57327: PPUSH
57328: LD_VAR 0 7
57332: PPUSH
57333: CALL_OW 153
57337: GO 57370
57339: LD_INT 3
57341: DOUBLE
57342: EQUAL
57343: IFTRUE 57347
57345: GO 57369
57347: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
57348: LD_VAR 0 1
57352: PPUSH
57353: LD_VAR 0 6
57357: PPUSH
57358: LD_VAR 0 7
57362: PPUSH
57363: CALL_OW 154
57367: GO 57370
57369: POP
// end ;
57370: LD_VAR 0 2
57374: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
57375: LD_INT 0
57377: PPUSH
57378: PPUSH
57379: PPUSH
57380: PPUSH
57381: PPUSH
57382: PPUSH
// if not unit or not building then
57383: LD_VAR 0 1
57387: NOT
57388: IFTRUE 57397
57390: PUSH
57391: LD_VAR 0 2
57395: NOT
57396: OR
57397: IFFALSE 57401
// exit ;
57399: GO 57559
// x := GetX ( building ) ;
57401: LD_ADDR_VAR 0 5
57405: PUSH
57406: LD_VAR 0 2
57410: PPUSH
57411: CALL_OW 250
57415: ST_TO_ADDR
// y := GetY ( building ) ;
57416: LD_ADDR_VAR 0 6
57420: PUSH
57421: LD_VAR 0 2
57425: PPUSH
57426: CALL_OW 251
57430: ST_TO_ADDR
// for i := 0 to 5 do
57431: LD_ADDR_VAR 0 4
57435: PUSH
57436: DOUBLE
57437: LD_INT 0
57439: DEC
57440: ST_TO_ADDR
57441: LD_INT 5
57443: PUSH
57444: FOR_TO
57445: IFFALSE 57557
// begin _x := ShiftX ( x , i , 3 ) ;
57447: LD_ADDR_VAR 0 7
57451: PUSH
57452: LD_VAR 0 5
57456: PPUSH
57457: LD_VAR 0 4
57461: PPUSH
57462: LD_INT 3
57464: PPUSH
57465: CALL_OW 272
57469: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
57470: LD_ADDR_VAR 0 8
57474: PUSH
57475: LD_VAR 0 6
57479: PPUSH
57480: LD_VAR 0 4
57484: PPUSH
57485: LD_INT 3
57487: PPUSH
57488: CALL_OW 273
57492: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57493: LD_VAR 0 7
57497: PPUSH
57498: LD_VAR 0 8
57502: PPUSH
57503: CALL_OW 488
57507: NOT
57508: IFFALSE 57512
// continue ;
57510: GO 57444
// if HexInfo ( _x , _y ) = 0 then
57512: LD_VAR 0 7
57516: PPUSH
57517: LD_VAR 0 8
57521: PPUSH
57522: CALL_OW 428
57526: PUSH
57527: LD_INT 0
57529: EQUAL
57530: IFFALSE 57555
// begin ComMoveXY ( unit , _x , _y ) ;
57532: LD_VAR 0 1
57536: PPUSH
57537: LD_VAR 0 7
57541: PPUSH
57542: LD_VAR 0 8
57546: PPUSH
57547: CALL_OW 111
// exit ;
57551: POP
57552: POP
57553: GO 57559
// end ; end ;
57555: GO 57444
57557: POP
57558: POP
// end ;
57559: LD_VAR 0 3
57563: RET
// export function ScanBase ( side , base_area ) ; begin
57564: LD_INT 0
57566: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
57567: LD_ADDR_VAR 0 3
57571: PUSH
57572: LD_VAR 0 2
57576: PPUSH
57577: LD_INT 81
57579: PUSH
57580: LD_VAR 0 1
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PPUSH
57589: CALL_OW 70
57593: ST_TO_ADDR
// end ;
57594: LD_VAR 0 3
57598: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
57599: LD_INT 0
57601: PPUSH
57602: PPUSH
57603: PPUSH
57604: PPUSH
// result := false ;
57605: LD_ADDR_VAR 0 2
57609: PUSH
57610: LD_INT 0
57612: ST_TO_ADDR
// side := GetSide ( unit ) ;
57613: LD_ADDR_VAR 0 3
57617: PUSH
57618: LD_VAR 0 1
57622: PPUSH
57623: CALL_OW 255
57627: ST_TO_ADDR
// nat := GetNation ( unit ) ;
57628: LD_ADDR_VAR 0 4
57632: PUSH
57633: LD_VAR 0 1
57637: PPUSH
57638: CALL_OW 248
57642: ST_TO_ADDR
// case nat of 1 :
57643: LD_VAR 0 4
57647: PUSH
57648: LD_INT 1
57650: DOUBLE
57651: EQUAL
57652: IFTRUE 57656
57654: GO 57667
57656: POP
// tech := tech_lassight ; 2 :
57657: LD_ADDR_VAR 0 5
57661: PUSH
57662: LD_INT 12
57664: ST_TO_ADDR
57665: GO 57706
57667: LD_INT 2
57669: DOUBLE
57670: EQUAL
57671: IFTRUE 57675
57673: GO 57686
57675: POP
// tech := tech_mortar ; 3 :
57676: LD_ADDR_VAR 0 5
57680: PUSH
57681: LD_INT 41
57683: ST_TO_ADDR
57684: GO 57706
57686: LD_INT 3
57688: DOUBLE
57689: EQUAL
57690: IFTRUE 57694
57692: GO 57705
57694: POP
// tech := tech_bazooka ; end ;
57695: LD_ADDR_VAR 0 5
57699: PUSH
57700: LD_INT 44
57702: ST_TO_ADDR
57703: GO 57706
57705: POP
// if Researched ( side , tech ) then
57706: LD_VAR 0 3
57710: PPUSH
57711: LD_VAR 0 5
57715: PPUSH
57716: CALL_OW 325
57720: IFFALSE 57747
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
57722: LD_ADDR_VAR 0 2
57726: PUSH
57727: LD_INT 5
57729: PUSH
57730: LD_INT 8
57732: PUSH
57733: LD_INT 9
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: LIST
57740: PUSH
57741: LD_VAR 0 4
57745: ARRAY
57746: ST_TO_ADDR
// end ;
57747: LD_VAR 0 2
57751: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
57752: LD_INT 0
57754: PPUSH
57755: PPUSH
57756: PPUSH
// if not mines then
57757: LD_VAR 0 2
57761: NOT
57762: IFFALSE 57766
// exit ;
57764: GO 57910
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
57766: LD_ADDR_VAR 0 5
57770: PUSH
57771: LD_INT 81
57773: PUSH
57774: LD_VAR 0 1
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 3
57785: PUSH
57786: LD_INT 21
57788: PUSH
57789: LD_INT 3
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PPUSH
57804: CALL_OW 69
57808: ST_TO_ADDR
// for i in mines do
57809: LD_ADDR_VAR 0 4
57813: PUSH
57814: LD_VAR 0 2
57818: PUSH
57819: FOR_IN
57820: IFFALSE 57908
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
57822: LD_VAR 0 4
57826: PUSH
57827: LD_INT 1
57829: ARRAY
57830: PPUSH
57831: LD_VAR 0 4
57835: PUSH
57836: LD_INT 2
57838: ARRAY
57839: PPUSH
57840: CALL_OW 458
57844: NOT
57845: IFFALSE 57849
// continue ;
57847: GO 57819
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
57849: LD_VAR 0 4
57853: PUSH
57854: LD_INT 1
57856: ARRAY
57857: PPUSH
57858: LD_VAR 0 4
57862: PUSH
57863: LD_INT 2
57865: ARRAY
57866: PPUSH
57867: CALL_OW 428
57871: PUSH
57872: LD_VAR 0 5
57876: IN
57877: IFFALSE 57906
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
57879: LD_VAR 0 4
57883: PUSH
57884: LD_INT 1
57886: ARRAY
57887: PPUSH
57888: LD_VAR 0 4
57892: PUSH
57893: LD_INT 2
57895: ARRAY
57896: PPUSH
57897: LD_VAR 0 1
57901: PPUSH
57902: CALL_OW 456
// end ;
57906: GO 57819
57908: POP
57909: POP
// end ;
57910: LD_VAR 0 3
57914: RET
// export function Count ( array ) ; begin
57915: LD_INT 0
57917: PPUSH
// result := array + 0 ;
57918: LD_ADDR_VAR 0 2
57922: PUSH
57923: LD_VAR 0 1
57927: PUSH
57928: LD_INT 0
57930: PLUS
57931: ST_TO_ADDR
// end ;
57932: LD_VAR 0 2
57936: RET
// export function IsEmpty ( building ) ; begin
57937: LD_INT 0
57939: PPUSH
// if not building then
57940: LD_VAR 0 1
57944: NOT
57945: IFFALSE 57949
// exit ;
57947: GO 57992
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
57949: LD_ADDR_VAR 0 2
57953: PUSH
57954: LD_VAR 0 1
57958: PUSH
57959: LD_INT 22
57961: PUSH
57962: LD_VAR 0 1
57966: PPUSH
57967: CALL_OW 255
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 58
57978: PUSH
57979: EMPTY
57980: LIST
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PPUSH
57986: CALL_OW 69
57990: IN
57991: ST_TO_ADDR
// end ;
57992: LD_VAR 0 2
57996: RET
// export function IsNotFull ( building ) ; var places ; begin
57997: LD_INT 0
57999: PPUSH
58000: PPUSH
// if not building then
58001: LD_VAR 0 1
58005: NOT
58006: IFFALSE 58010
// exit ;
58008: GO 58038
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
58010: LD_ADDR_VAR 0 2
58014: PUSH
58015: LD_VAR 0 1
58019: PPUSH
58020: LD_INT 3
58022: PUSH
58023: LD_INT 62
58025: PUSH
58026: EMPTY
58027: LIST
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PPUSH
58033: CALL_OW 72
58037: ST_TO_ADDR
// end ;
58038: LD_VAR 0 2
58042: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
58043: LD_INT 0
58045: PPUSH
58046: PPUSH
58047: PPUSH
58048: PPUSH
// tmp := [ ] ;
58049: LD_ADDR_VAR 0 3
58053: PUSH
58054: EMPTY
58055: ST_TO_ADDR
// list := [ ] ;
58056: LD_ADDR_VAR 0 5
58060: PUSH
58061: EMPTY
58062: ST_TO_ADDR
// for i = 16 to 25 do
58063: LD_ADDR_VAR 0 4
58067: PUSH
58068: DOUBLE
58069: LD_INT 16
58071: DEC
58072: ST_TO_ADDR
58073: LD_INT 25
58075: PUSH
58076: FOR_TO
58077: IFFALSE 58150
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
58079: LD_ADDR_VAR 0 3
58083: PUSH
58084: LD_VAR 0 3
58088: PUSH
58089: LD_INT 22
58091: PUSH
58092: LD_VAR 0 1
58096: PPUSH
58097: CALL_OW 255
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 91
58108: PUSH
58109: LD_VAR 0 1
58113: PUSH
58114: LD_INT 6
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 30
58124: PUSH
58125: LD_VAR 0 4
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: LIST
58138: PUSH
58139: EMPTY
58140: LIST
58141: PPUSH
58142: CALL_OW 69
58146: ADD
58147: ST_TO_ADDR
58148: GO 58076
58150: POP
58151: POP
// for i = 1 to tmp do
58152: LD_ADDR_VAR 0 4
58156: PUSH
58157: DOUBLE
58158: LD_INT 1
58160: DEC
58161: ST_TO_ADDR
58162: LD_VAR 0 3
58166: PUSH
58167: FOR_TO
58168: IFFALSE 58256
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
58170: LD_ADDR_VAR 0 5
58174: PUSH
58175: LD_VAR 0 5
58179: PUSH
58180: LD_VAR 0 3
58184: PUSH
58185: LD_VAR 0 4
58189: ARRAY
58190: PPUSH
58191: CALL_OW 266
58195: PUSH
58196: LD_VAR 0 3
58200: PUSH
58201: LD_VAR 0 4
58205: ARRAY
58206: PPUSH
58207: CALL_OW 250
58211: PUSH
58212: LD_VAR 0 3
58216: PUSH
58217: LD_VAR 0 4
58221: ARRAY
58222: PPUSH
58223: CALL_OW 251
58227: PUSH
58228: LD_VAR 0 3
58232: PUSH
58233: LD_VAR 0 4
58237: ARRAY
58238: PPUSH
58239: CALL_OW 254
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: PUSH
58250: EMPTY
58251: LIST
58252: ADD
58253: ST_TO_ADDR
58254: GO 58167
58256: POP
58257: POP
// result := list ;
58258: LD_ADDR_VAR 0 2
58262: PUSH
58263: LD_VAR 0 5
58267: ST_TO_ADDR
// end ;
58268: LD_VAR 0 2
58272: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
58273: LD_INT 0
58275: PPUSH
58276: PPUSH
58277: PPUSH
58278: PPUSH
58279: PPUSH
58280: PPUSH
58281: PPUSH
// if not factory then
58282: LD_VAR 0 1
58286: NOT
58287: IFFALSE 58291
// exit ;
58289: GO 58894
// if control = control_apeman then
58291: LD_VAR 0 4
58295: PUSH
58296: LD_INT 5
58298: EQUAL
58299: IFFALSE 58408
// begin tmp := UnitsInside ( factory ) ;
58301: LD_ADDR_VAR 0 8
58305: PUSH
58306: LD_VAR 0 1
58310: PPUSH
58311: CALL_OW 313
58315: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
58316: LD_VAR 0 8
58320: PPUSH
58321: LD_INT 25
58323: PUSH
58324: LD_INT 12
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PPUSH
58331: CALL_OW 72
58335: NOT
58336: IFFALSE 58346
// control := control_manual ;
58338: LD_ADDR_VAR 0 4
58342: PUSH
58343: LD_INT 1
58345: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
58346: LD_ADDR_VAR 0 8
58350: PUSH
58351: LD_VAR 0 1
58355: PPUSH
58356: CALL 58043 0 1
58360: ST_TO_ADDR
// if tmp then
58361: LD_VAR 0 8
58365: IFFALSE 58408
// begin for i in tmp do
58367: LD_ADDR_VAR 0 7
58371: PUSH
58372: LD_VAR 0 8
58376: PUSH
58377: FOR_IN
58378: IFFALSE 58406
// if i [ 1 ] = b_ext_radio then
58380: LD_VAR 0 7
58384: PUSH
58385: LD_INT 1
58387: ARRAY
58388: PUSH
58389: LD_INT 22
58391: EQUAL
58392: IFFALSE 58404
// begin control := control_remote ;
58394: LD_ADDR_VAR 0 4
58398: PUSH
58399: LD_INT 2
58401: ST_TO_ADDR
// break ;
58402: GO 58406
// end ;
58404: GO 58377
58406: POP
58407: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
58408: LD_VAR 0 1
58412: PPUSH
58413: LD_VAR 0 2
58417: PPUSH
58418: LD_VAR 0 3
58422: PPUSH
58423: LD_VAR 0 4
58427: PPUSH
58428: LD_VAR 0 5
58432: PPUSH
58433: CALL_OW 448
58437: IFFALSE 58472
// begin result := [ chassis , engine , control , weapon ] ;
58439: LD_ADDR_VAR 0 6
58443: PUSH
58444: LD_VAR 0 2
58448: PUSH
58449: LD_VAR 0 3
58453: PUSH
58454: LD_VAR 0 4
58458: PUSH
58459: LD_VAR 0 5
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: ST_TO_ADDR
// exit ;
58470: GO 58894
// end ; _chassis := AvailableChassisList ( factory ) ;
58472: LD_ADDR_VAR 0 9
58476: PUSH
58477: LD_VAR 0 1
58481: PPUSH
58482: CALL_OW 475
58486: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
58487: LD_ADDR_VAR 0 11
58491: PUSH
58492: LD_VAR 0 1
58496: PPUSH
58497: CALL_OW 476
58501: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
58502: LD_ADDR_VAR 0 12
58506: PUSH
58507: LD_VAR 0 1
58511: PPUSH
58512: CALL_OW 477
58516: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
58517: LD_ADDR_VAR 0 10
58521: PUSH
58522: LD_VAR 0 1
58526: PPUSH
58527: CALL_OW 478
58531: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
58532: LD_VAR 0 9
58536: NOT
58537: IFTRUE 58546
58539: PUSH
58540: LD_VAR 0 11
58544: NOT
58545: OR
58546: IFTRUE 58555
58548: PUSH
58549: LD_VAR 0 12
58553: NOT
58554: OR
58555: IFTRUE 58564
58557: PUSH
58558: LD_VAR 0 10
58562: NOT
58563: OR
58564: IFFALSE 58599
// begin result := [ chassis , engine , control , weapon ] ;
58566: LD_ADDR_VAR 0 6
58570: PUSH
58571: LD_VAR 0 2
58575: PUSH
58576: LD_VAR 0 3
58580: PUSH
58581: LD_VAR 0 4
58585: PUSH
58586: LD_VAR 0 5
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: ST_TO_ADDR
// exit ;
58597: GO 58894
// end ; if not chassis in _chassis then
58599: LD_VAR 0 2
58603: PUSH
58604: LD_VAR 0 9
58608: IN
58609: NOT
58610: IFFALSE 58636
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
58612: LD_ADDR_VAR 0 2
58616: PUSH
58617: LD_VAR 0 9
58621: PUSH
58622: LD_INT 1
58624: PPUSH
58625: LD_VAR 0 9
58629: PPUSH
58630: CALL_OW 12
58634: ARRAY
58635: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
58636: LD_VAR 0 2
58640: PPUSH
58641: LD_VAR 0 3
58645: PPUSH
58646: CALL 58899 0 2
58650: NOT
58651: IFFALSE 58712
// repeat engine := _engine [ 1 ] ;
58653: LD_ADDR_VAR 0 3
58657: PUSH
58658: LD_VAR 0 11
58662: PUSH
58663: LD_INT 1
58665: ARRAY
58666: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
58667: LD_ADDR_VAR 0 11
58671: PUSH
58672: LD_VAR 0 11
58676: PPUSH
58677: LD_INT 1
58679: PPUSH
58680: CALL_OW 3
58684: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
58685: LD_VAR 0 2
58689: PPUSH
58690: LD_VAR 0 3
58694: PPUSH
58695: CALL 58899 0 2
58699: IFTRUE 58710
58701: PUSH
58702: LD_VAR 0 11
58706: PUSH
58707: EMPTY
58708: EQUAL
58709: OR
58710: IFFALSE 58653
// if not control in _control then
58712: LD_VAR 0 4
58716: PUSH
58717: LD_VAR 0 12
58721: IN
58722: NOT
58723: IFFALSE 58749
// control := _control [ rand ( 1 , _control ) ] ;
58725: LD_ADDR_VAR 0 4
58729: PUSH
58730: LD_VAR 0 12
58734: PUSH
58735: LD_INT 1
58737: PPUSH
58738: LD_VAR 0 12
58742: PPUSH
58743: CALL_OW 12
58747: ARRAY
58748: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
58749: LD_VAR 0 2
58753: PPUSH
58754: LD_VAR 0 5
58758: PPUSH
58759: CALL 59121 0 2
58763: NOT
58764: IFFALSE 58825
// repeat weapon := _weapon [ 1 ] ;
58766: LD_ADDR_VAR 0 5
58770: PUSH
58771: LD_VAR 0 10
58775: PUSH
58776: LD_INT 1
58778: ARRAY
58779: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
58780: LD_ADDR_VAR 0 10
58784: PUSH
58785: LD_VAR 0 10
58789: PPUSH
58790: LD_INT 1
58792: PPUSH
58793: CALL_OW 3
58797: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
58798: LD_VAR 0 2
58802: PPUSH
58803: LD_VAR 0 5
58807: PPUSH
58808: CALL 59121 0 2
58812: IFTRUE 58823
58814: PUSH
58815: LD_VAR 0 10
58819: PUSH
58820: EMPTY
58821: EQUAL
58822: OR
58823: IFFALSE 58766
// result := [ ] ;
58825: LD_ADDR_VAR 0 6
58829: PUSH
58830: EMPTY
58831: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
58832: LD_VAR 0 1
58836: PPUSH
58837: LD_VAR 0 2
58841: PPUSH
58842: LD_VAR 0 3
58846: PPUSH
58847: LD_VAR 0 4
58851: PPUSH
58852: LD_VAR 0 5
58856: PPUSH
58857: CALL_OW 448
58861: IFFALSE 58894
// result := [ chassis , engine , control , weapon ] ;
58863: LD_ADDR_VAR 0 6
58867: PUSH
58868: LD_VAR 0 2
58872: PUSH
58873: LD_VAR 0 3
58877: PUSH
58878: LD_VAR 0 4
58882: PUSH
58883: LD_VAR 0 5
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: ST_TO_ADDR
// end ;
58894: LD_VAR 0 6
58898: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
58899: LD_INT 0
58901: PPUSH
// if not chassis or not engine then
58902: LD_VAR 0 1
58906: NOT
58907: IFTRUE 58916
58909: PUSH
58910: LD_VAR 0 2
58914: NOT
58915: OR
58916: IFFALSE 58920
// exit ;
58918: GO 59116
// case engine of engine_solar :
58920: LD_VAR 0 2
58924: PUSH
58925: LD_INT 2
58927: DOUBLE
58928: EQUAL
58929: IFTRUE 58933
58931: GO 58971
58933: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
58934: LD_ADDR_VAR 0 3
58938: PUSH
58939: LD_INT 11
58941: PUSH
58942: LD_INT 12
58944: PUSH
58945: LD_INT 13
58947: PUSH
58948: LD_INT 14
58950: PUSH
58951: LD_INT 1
58953: PUSH
58954: LD_INT 2
58956: PUSH
58957: LD_INT 3
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: ST_TO_ADDR
58969: GO 59100
58971: LD_INT 1
58973: DOUBLE
58974: EQUAL
58975: IFTRUE 58979
58977: GO 59041
58979: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
58980: LD_ADDR_VAR 0 3
58984: PUSH
58985: LD_INT 11
58987: PUSH
58988: LD_INT 12
58990: PUSH
58991: LD_INT 13
58993: PUSH
58994: LD_INT 14
58996: PUSH
58997: LD_INT 1
58999: PUSH
59000: LD_INT 2
59002: PUSH
59003: LD_INT 3
59005: PUSH
59006: LD_INT 4
59008: PUSH
59009: LD_INT 5
59011: PUSH
59012: LD_INT 21
59014: PUSH
59015: LD_INT 23
59017: PUSH
59018: LD_INT 22
59020: PUSH
59021: LD_INT 24
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: ST_TO_ADDR
59039: GO 59100
59041: LD_INT 3
59043: DOUBLE
59044: EQUAL
59045: IFTRUE 59049
59047: GO 59099
59049: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
59050: LD_ADDR_VAR 0 3
59054: PUSH
59055: LD_INT 13
59057: PUSH
59058: LD_INT 14
59060: PUSH
59061: LD_INT 2
59063: PUSH
59064: LD_INT 3
59066: PUSH
59067: LD_INT 4
59069: PUSH
59070: LD_INT 5
59072: PUSH
59073: LD_INT 21
59075: PUSH
59076: LD_INT 22
59078: PUSH
59079: LD_INT 23
59081: PUSH
59082: LD_INT 24
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: ST_TO_ADDR
59097: GO 59100
59099: POP
// result := ( chassis in result ) ;
59100: LD_ADDR_VAR 0 3
59104: PUSH
59105: LD_VAR 0 1
59109: PUSH
59110: LD_VAR 0 3
59114: IN
59115: ST_TO_ADDR
// end ;
59116: LD_VAR 0 3
59120: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
59121: LD_INT 0
59123: PPUSH
// if not chassis or not weapon then
59124: LD_VAR 0 1
59128: NOT
59129: IFTRUE 59138
59131: PUSH
59132: LD_VAR 0 2
59136: NOT
59137: OR
59138: IFFALSE 59142
// exit ;
59140: GO 60202
// case weapon of us_machine_gun :
59142: LD_VAR 0 2
59146: PUSH
59147: LD_INT 2
59149: DOUBLE
59150: EQUAL
59151: IFTRUE 59155
59153: GO 59185
59155: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
59156: LD_ADDR_VAR 0 3
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: LD_INT 2
59166: PUSH
59167: LD_INT 3
59169: PUSH
59170: LD_INT 4
59172: PUSH
59173: LD_INT 5
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: ST_TO_ADDR
59183: GO 60186
59185: LD_INT 3
59187: DOUBLE
59188: EQUAL
59189: IFTRUE 59193
59191: GO 59223
59193: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
59194: LD_ADDR_VAR 0 3
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: LD_INT 2
59204: PUSH
59205: LD_INT 3
59207: PUSH
59208: LD_INT 4
59210: PUSH
59211: LD_INT 5
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: ST_TO_ADDR
59221: GO 60186
59223: LD_INT 11
59225: DOUBLE
59226: EQUAL
59227: IFTRUE 59231
59229: GO 59261
59231: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
59232: LD_ADDR_VAR 0 3
59236: PUSH
59237: LD_INT 1
59239: PUSH
59240: LD_INT 2
59242: PUSH
59243: LD_INT 3
59245: PUSH
59246: LD_INT 4
59248: PUSH
59249: LD_INT 5
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: ST_TO_ADDR
59259: GO 60186
59261: LD_INT 4
59263: DOUBLE
59264: EQUAL
59265: IFTRUE 59269
59267: GO 59295
59269: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
59270: LD_ADDR_VAR 0 3
59274: PUSH
59275: LD_INT 2
59277: PUSH
59278: LD_INT 3
59280: PUSH
59281: LD_INT 4
59283: PUSH
59284: LD_INT 5
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: ST_TO_ADDR
59293: GO 60186
59295: LD_INT 5
59297: DOUBLE
59298: EQUAL
59299: IFTRUE 59303
59301: GO 59329
59303: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
59304: LD_ADDR_VAR 0 3
59308: PUSH
59309: LD_INT 2
59311: PUSH
59312: LD_INT 3
59314: PUSH
59315: LD_INT 4
59317: PUSH
59318: LD_INT 5
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: ST_TO_ADDR
59327: GO 60186
59329: LD_INT 9
59331: DOUBLE
59332: EQUAL
59333: IFTRUE 59337
59335: GO 59363
59337: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
59338: LD_ADDR_VAR 0 3
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: LD_INT 3
59348: PUSH
59349: LD_INT 4
59351: PUSH
59352: LD_INT 5
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: ST_TO_ADDR
59361: GO 60186
59363: LD_INT 7
59365: DOUBLE
59366: EQUAL
59367: IFTRUE 59371
59369: GO 59397
59371: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
59372: LD_ADDR_VAR 0 3
59376: PUSH
59377: LD_INT 2
59379: PUSH
59380: LD_INT 3
59382: PUSH
59383: LD_INT 4
59385: PUSH
59386: LD_INT 5
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: ST_TO_ADDR
59395: GO 60186
59397: LD_INT 12
59399: DOUBLE
59400: EQUAL
59401: IFTRUE 59405
59403: GO 59431
59405: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
59406: LD_ADDR_VAR 0 3
59410: PUSH
59411: LD_INT 2
59413: PUSH
59414: LD_INT 3
59416: PUSH
59417: LD_INT 4
59419: PUSH
59420: LD_INT 5
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: ST_TO_ADDR
59429: GO 60186
59431: LD_INT 13
59433: DOUBLE
59434: EQUAL
59435: IFTRUE 59439
59437: GO 59465
59439: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
59440: LD_ADDR_VAR 0 3
59444: PUSH
59445: LD_INT 2
59447: PUSH
59448: LD_INT 3
59450: PUSH
59451: LD_INT 4
59453: PUSH
59454: LD_INT 5
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: ST_TO_ADDR
59463: GO 60186
59465: LD_INT 14
59467: DOUBLE
59468: EQUAL
59469: IFTRUE 59473
59471: GO 59491
59473: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
59474: LD_ADDR_VAR 0 3
59478: PUSH
59479: LD_INT 4
59481: PUSH
59482: LD_INT 5
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: ST_TO_ADDR
59489: GO 60186
59491: LD_INT 6
59493: DOUBLE
59494: EQUAL
59495: IFTRUE 59499
59497: GO 59517
59499: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
59500: LD_ADDR_VAR 0 3
59504: PUSH
59505: LD_INT 4
59507: PUSH
59508: LD_INT 5
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: ST_TO_ADDR
59515: GO 60186
59517: LD_INT 10
59519: DOUBLE
59520: EQUAL
59521: IFTRUE 59525
59523: GO 59543
59525: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
59526: LD_ADDR_VAR 0 3
59530: PUSH
59531: LD_INT 4
59533: PUSH
59534: LD_INT 5
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: ST_TO_ADDR
59541: GO 60186
59543: LD_INT 22
59545: DOUBLE
59546: EQUAL
59547: IFTRUE 59551
59549: GO 59577
59551: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
59552: LD_ADDR_VAR 0 3
59556: PUSH
59557: LD_INT 11
59559: PUSH
59560: LD_INT 12
59562: PUSH
59563: LD_INT 13
59565: PUSH
59566: LD_INT 14
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: ST_TO_ADDR
59575: GO 60186
59577: LD_INT 23
59579: DOUBLE
59580: EQUAL
59581: IFTRUE 59585
59583: GO 59611
59585: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
59586: LD_ADDR_VAR 0 3
59590: PUSH
59591: LD_INT 11
59593: PUSH
59594: LD_INT 12
59596: PUSH
59597: LD_INT 13
59599: PUSH
59600: LD_INT 14
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: ST_TO_ADDR
59609: GO 60186
59611: LD_INT 24
59613: DOUBLE
59614: EQUAL
59615: IFTRUE 59619
59617: GO 59645
59619: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
59620: LD_ADDR_VAR 0 3
59624: PUSH
59625: LD_INT 11
59627: PUSH
59628: LD_INT 12
59630: PUSH
59631: LD_INT 13
59633: PUSH
59634: LD_INT 14
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: ST_TO_ADDR
59643: GO 60186
59645: LD_INT 30
59647: DOUBLE
59648: EQUAL
59649: IFTRUE 59653
59651: GO 59679
59653: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
59654: LD_ADDR_VAR 0 3
59658: PUSH
59659: LD_INT 11
59661: PUSH
59662: LD_INT 12
59664: PUSH
59665: LD_INT 13
59667: PUSH
59668: LD_INT 14
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: ST_TO_ADDR
59677: GO 60186
59679: LD_INT 25
59681: DOUBLE
59682: EQUAL
59683: IFTRUE 59687
59685: GO 59705
59687: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
59688: LD_ADDR_VAR 0 3
59692: PUSH
59693: LD_INT 13
59695: PUSH
59696: LD_INT 14
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: ST_TO_ADDR
59703: GO 60186
59705: LD_INT 27
59707: DOUBLE
59708: EQUAL
59709: IFTRUE 59713
59711: GO 59731
59713: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
59714: LD_ADDR_VAR 0 3
59718: PUSH
59719: LD_INT 13
59721: PUSH
59722: LD_INT 14
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: ST_TO_ADDR
59729: GO 60186
59731: LD_INT 92
59733: DOUBLE
59734: EQUAL
59735: IFTRUE 59739
59737: GO 59765
59739: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
59740: LD_ADDR_VAR 0 3
59744: PUSH
59745: LD_INT 11
59747: PUSH
59748: LD_INT 12
59750: PUSH
59751: LD_INT 13
59753: PUSH
59754: LD_INT 14
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: ST_TO_ADDR
59763: GO 60186
59765: LD_INT 28
59767: DOUBLE
59768: EQUAL
59769: IFTRUE 59773
59771: GO 59791
59773: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
59774: LD_ADDR_VAR 0 3
59778: PUSH
59779: LD_INT 13
59781: PUSH
59782: LD_INT 14
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: ST_TO_ADDR
59789: GO 60186
59791: LD_INT 29
59793: DOUBLE
59794: EQUAL
59795: IFTRUE 59799
59797: GO 59817
59799: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
59800: LD_ADDR_VAR 0 3
59804: PUSH
59805: LD_INT 13
59807: PUSH
59808: LD_INT 14
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: ST_TO_ADDR
59815: GO 60186
59817: LD_INT 31
59819: DOUBLE
59820: EQUAL
59821: IFTRUE 59825
59823: GO 59843
59825: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
59826: LD_ADDR_VAR 0 3
59830: PUSH
59831: LD_INT 13
59833: PUSH
59834: LD_INT 14
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: ST_TO_ADDR
59841: GO 60186
59843: LD_INT 26
59845: DOUBLE
59846: EQUAL
59847: IFTRUE 59851
59849: GO 59869
59851: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
59852: LD_ADDR_VAR 0 3
59856: PUSH
59857: LD_INT 13
59859: PUSH
59860: LD_INT 14
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: ST_TO_ADDR
59867: GO 60186
59869: LD_INT 42
59871: DOUBLE
59872: EQUAL
59873: IFTRUE 59877
59875: GO 59903
59877: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
59878: LD_ADDR_VAR 0 3
59882: PUSH
59883: LD_INT 21
59885: PUSH
59886: LD_INT 22
59888: PUSH
59889: LD_INT 23
59891: PUSH
59892: LD_INT 24
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: ST_TO_ADDR
59901: GO 60186
59903: LD_INT 43
59905: DOUBLE
59906: EQUAL
59907: IFTRUE 59911
59909: GO 59937
59911: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
59912: LD_ADDR_VAR 0 3
59916: PUSH
59917: LD_INT 21
59919: PUSH
59920: LD_INT 22
59922: PUSH
59923: LD_INT 23
59925: PUSH
59926: LD_INT 24
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: ST_TO_ADDR
59935: GO 60186
59937: LD_INT 44
59939: DOUBLE
59940: EQUAL
59941: IFTRUE 59945
59943: GO 59971
59945: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
59946: LD_ADDR_VAR 0 3
59950: PUSH
59951: LD_INT 21
59953: PUSH
59954: LD_INT 22
59956: PUSH
59957: LD_INT 23
59959: PUSH
59960: LD_INT 24
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: ST_TO_ADDR
59969: GO 60186
59971: LD_INT 45
59973: DOUBLE
59974: EQUAL
59975: IFTRUE 59979
59977: GO 60005
59979: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
59980: LD_ADDR_VAR 0 3
59984: PUSH
59985: LD_INT 21
59987: PUSH
59988: LD_INT 22
59990: PUSH
59991: LD_INT 23
59993: PUSH
59994: LD_INT 24
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: ST_TO_ADDR
60003: GO 60186
60005: LD_INT 49
60007: DOUBLE
60008: EQUAL
60009: IFTRUE 60013
60011: GO 60039
60013: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
60014: LD_ADDR_VAR 0 3
60018: PUSH
60019: LD_INT 21
60021: PUSH
60022: LD_INT 22
60024: PUSH
60025: LD_INT 23
60027: PUSH
60028: LD_INT 24
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: ST_TO_ADDR
60037: GO 60186
60039: LD_INT 51
60041: DOUBLE
60042: EQUAL
60043: IFTRUE 60047
60045: GO 60073
60047: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
60048: LD_ADDR_VAR 0 3
60052: PUSH
60053: LD_INT 21
60055: PUSH
60056: LD_INT 22
60058: PUSH
60059: LD_INT 23
60061: PUSH
60062: LD_INT 24
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: ST_TO_ADDR
60071: GO 60186
60073: LD_INT 52
60075: DOUBLE
60076: EQUAL
60077: IFTRUE 60081
60079: GO 60107
60081: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
60082: LD_ADDR_VAR 0 3
60086: PUSH
60087: LD_INT 21
60089: PUSH
60090: LD_INT 22
60092: PUSH
60093: LD_INT 23
60095: PUSH
60096: LD_INT 24
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: ST_TO_ADDR
60105: GO 60186
60107: LD_INT 53
60109: DOUBLE
60110: EQUAL
60111: IFTRUE 60115
60113: GO 60133
60115: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
60116: LD_ADDR_VAR 0 3
60120: PUSH
60121: LD_INT 23
60123: PUSH
60124: LD_INT 24
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: ST_TO_ADDR
60131: GO 60186
60133: LD_INT 46
60135: DOUBLE
60136: EQUAL
60137: IFTRUE 60141
60139: GO 60159
60141: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
60142: LD_ADDR_VAR 0 3
60146: PUSH
60147: LD_INT 23
60149: PUSH
60150: LD_INT 24
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: ST_TO_ADDR
60157: GO 60186
60159: LD_INT 47
60161: DOUBLE
60162: EQUAL
60163: IFTRUE 60167
60165: GO 60185
60167: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
60168: LD_ADDR_VAR 0 3
60172: PUSH
60173: LD_INT 23
60175: PUSH
60176: LD_INT 24
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: ST_TO_ADDR
60183: GO 60186
60185: POP
// result := ( chassis in result ) ;
60186: LD_ADDR_VAR 0 3
60190: PUSH
60191: LD_VAR 0 1
60195: PUSH
60196: LD_VAR 0 3
60200: IN
60201: ST_TO_ADDR
// end ;
60202: LD_VAR 0 3
60206: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
60207: LD_INT 0
60209: PPUSH
60210: PPUSH
60211: PPUSH
60212: PPUSH
60213: PPUSH
60214: PPUSH
60215: PPUSH
// result := array ;
60216: LD_ADDR_VAR 0 5
60220: PUSH
60221: LD_VAR 0 1
60225: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
60226: LD_VAR 0 1
60230: NOT
60231: IFTRUE 60240
60233: PUSH
60234: LD_VAR 0 2
60238: NOT
60239: OR
60240: IFTRUE 60249
60242: PUSH
60243: LD_VAR 0 3
60247: NOT
60248: OR
60249: IFTRUE 60263
60251: PUSH
60252: LD_VAR 0 2
60256: PUSH
60257: LD_VAR 0 1
60261: GREATER
60262: OR
60263: IFTRUE 60277
60265: PUSH
60266: LD_VAR 0 3
60270: PUSH
60271: LD_VAR 0 1
60275: GREATER
60276: OR
60277: IFFALSE 60281
// exit ;
60279: GO 60577
// if direction then
60281: LD_VAR 0 4
60285: IFFALSE 60349
// begin d := 1 ;
60287: LD_ADDR_VAR 0 9
60291: PUSH
60292: LD_INT 1
60294: ST_TO_ADDR
// if i_from > i_to then
60295: LD_VAR 0 2
60299: PUSH
60300: LD_VAR 0 3
60304: GREATER
60305: IFFALSE 60331
// length := ( array - i_from ) + i_to else
60307: LD_ADDR_VAR 0 11
60311: PUSH
60312: LD_VAR 0 1
60316: PUSH
60317: LD_VAR 0 2
60321: MINUS
60322: PUSH
60323: LD_VAR 0 3
60327: PLUS
60328: ST_TO_ADDR
60329: GO 60347
// length := i_to - i_from ;
60331: LD_ADDR_VAR 0 11
60335: PUSH
60336: LD_VAR 0 3
60340: PUSH
60341: LD_VAR 0 2
60345: MINUS
60346: ST_TO_ADDR
// end else
60347: GO 60410
// begin d := - 1 ;
60349: LD_ADDR_VAR 0 9
60353: PUSH
60354: LD_INT 1
60356: NEG
60357: ST_TO_ADDR
// if i_from > i_to then
60358: LD_VAR 0 2
60362: PUSH
60363: LD_VAR 0 3
60367: GREATER
60368: IFFALSE 60388
// length := i_from - i_to else
60370: LD_ADDR_VAR 0 11
60374: PUSH
60375: LD_VAR 0 2
60379: PUSH
60380: LD_VAR 0 3
60384: MINUS
60385: ST_TO_ADDR
60386: GO 60410
// length := ( array - i_to ) + i_from ;
60388: LD_ADDR_VAR 0 11
60392: PUSH
60393: LD_VAR 0 1
60397: PUSH
60398: LD_VAR 0 3
60402: MINUS
60403: PUSH
60404: LD_VAR 0 2
60408: PLUS
60409: ST_TO_ADDR
// end ; if not length then
60410: LD_VAR 0 11
60414: NOT
60415: IFFALSE 60419
// exit ;
60417: GO 60577
// tmp := array ;
60419: LD_ADDR_VAR 0 10
60423: PUSH
60424: LD_VAR 0 1
60428: ST_TO_ADDR
// for i = 1 to length do
60429: LD_ADDR_VAR 0 6
60433: PUSH
60434: DOUBLE
60435: LD_INT 1
60437: DEC
60438: ST_TO_ADDR
60439: LD_VAR 0 11
60443: PUSH
60444: FOR_TO
60445: IFFALSE 60565
// begin for j = 1 to array do
60447: LD_ADDR_VAR 0 7
60451: PUSH
60452: DOUBLE
60453: LD_INT 1
60455: DEC
60456: ST_TO_ADDR
60457: LD_VAR 0 1
60461: PUSH
60462: FOR_TO
60463: IFFALSE 60551
// begin k := j + d ;
60465: LD_ADDR_VAR 0 8
60469: PUSH
60470: LD_VAR 0 7
60474: PUSH
60475: LD_VAR 0 9
60479: PLUS
60480: ST_TO_ADDR
// if k > array then
60481: LD_VAR 0 8
60485: PUSH
60486: LD_VAR 0 1
60490: GREATER
60491: IFFALSE 60501
// k := 1 ;
60493: LD_ADDR_VAR 0 8
60497: PUSH
60498: LD_INT 1
60500: ST_TO_ADDR
// if not k then
60501: LD_VAR 0 8
60505: NOT
60506: IFFALSE 60518
// k := array ;
60508: LD_ADDR_VAR 0 8
60512: PUSH
60513: LD_VAR 0 1
60517: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
60518: LD_ADDR_VAR 0 10
60522: PUSH
60523: LD_VAR 0 10
60527: PPUSH
60528: LD_VAR 0 8
60532: PPUSH
60533: LD_VAR 0 1
60537: PUSH
60538: LD_VAR 0 7
60542: ARRAY
60543: PPUSH
60544: CALL_OW 1
60548: ST_TO_ADDR
// end ;
60549: GO 60462
60551: POP
60552: POP
// array := tmp ;
60553: LD_ADDR_VAR 0 1
60557: PUSH
60558: LD_VAR 0 10
60562: ST_TO_ADDR
// end ;
60563: GO 60444
60565: POP
60566: POP
// result := array ;
60567: LD_ADDR_VAR 0 5
60571: PUSH
60572: LD_VAR 0 1
60576: ST_TO_ADDR
// end ;
60577: LD_VAR 0 5
60581: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
60582: LD_INT 0
60584: PPUSH
60585: PPUSH
// result := 0 ;
60586: LD_ADDR_VAR 0 3
60590: PUSH
60591: LD_INT 0
60593: ST_TO_ADDR
// if not array or not value in array then
60594: LD_VAR 0 1
60598: NOT
60599: IFTRUE 60614
60601: PUSH
60602: LD_VAR 0 2
60606: PUSH
60607: LD_VAR 0 1
60611: IN
60612: NOT
60613: OR
60614: IFFALSE 60618
// exit ;
60616: GO 60672
// for i = 1 to array do
60618: LD_ADDR_VAR 0 4
60622: PUSH
60623: DOUBLE
60624: LD_INT 1
60626: DEC
60627: ST_TO_ADDR
60628: LD_VAR 0 1
60632: PUSH
60633: FOR_TO
60634: IFFALSE 60670
// if value = array [ i ] then
60636: LD_VAR 0 2
60640: PUSH
60641: LD_VAR 0 1
60645: PUSH
60646: LD_VAR 0 4
60650: ARRAY
60651: EQUAL
60652: IFFALSE 60668
// begin result := i ;
60654: LD_ADDR_VAR 0 3
60658: PUSH
60659: LD_VAR 0 4
60663: ST_TO_ADDR
// exit ;
60664: POP
60665: POP
60666: GO 60672
// end ;
60668: GO 60633
60670: POP
60671: POP
// end ;
60672: LD_VAR 0 3
60676: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
60677: LD_INT 0
60679: PPUSH
// vc_chassis := chassis ;
60680: LD_ADDR_OWVAR 37
60684: PUSH
60685: LD_VAR 0 1
60689: ST_TO_ADDR
// vc_engine := engine ;
60690: LD_ADDR_OWVAR 39
60694: PUSH
60695: LD_VAR 0 2
60699: ST_TO_ADDR
// vc_control := control ;
60700: LD_ADDR_OWVAR 38
60704: PUSH
60705: LD_VAR 0 3
60709: ST_TO_ADDR
// vc_weapon := weapon ;
60710: LD_ADDR_OWVAR 40
60714: PUSH
60715: LD_VAR 0 4
60719: ST_TO_ADDR
// vc_fuel_battery := fuel ;
60720: LD_ADDR_OWVAR 41
60724: PUSH
60725: LD_VAR 0 5
60729: ST_TO_ADDR
// end ;
60730: LD_VAR 0 6
60734: RET
// export function WantPlant ( unit ) ; var task ; begin
60735: LD_INT 0
60737: PPUSH
60738: PPUSH
// result := false ;
60739: LD_ADDR_VAR 0 2
60743: PUSH
60744: LD_INT 0
60746: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
60747: LD_ADDR_VAR 0 3
60751: PUSH
60752: LD_VAR 0 1
60756: PPUSH
60757: CALL_OW 437
60761: ST_TO_ADDR
// if task then
60762: LD_VAR 0 3
60766: IFFALSE 60794
// if task [ 1 ] [ 1 ] = p then
60768: LD_VAR 0 3
60772: PUSH
60773: LD_INT 1
60775: ARRAY
60776: PUSH
60777: LD_INT 1
60779: ARRAY
60780: PUSH
60781: LD_STRING p
60783: EQUAL
60784: IFFALSE 60794
// result := true ;
60786: LD_ADDR_VAR 0 2
60790: PUSH
60791: LD_INT 1
60793: ST_TO_ADDR
// end ;
60794: LD_VAR 0 2
60798: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
60799: LD_INT 0
60801: PPUSH
60802: PPUSH
60803: PPUSH
60804: PPUSH
// if pos < 1 then
60805: LD_VAR 0 2
60809: PUSH
60810: LD_INT 1
60812: LESS
60813: IFFALSE 60817
// exit ;
60815: GO 61120
// if pos = 1 then
60817: LD_VAR 0 2
60821: PUSH
60822: LD_INT 1
60824: EQUAL
60825: IFFALSE 60858
// result := Replace ( arr , pos [ 1 ] , value ) else
60827: LD_ADDR_VAR 0 4
60831: PUSH
60832: LD_VAR 0 1
60836: PPUSH
60837: LD_VAR 0 2
60841: PUSH
60842: LD_INT 1
60844: ARRAY
60845: PPUSH
60846: LD_VAR 0 3
60850: PPUSH
60851: CALL_OW 1
60855: ST_TO_ADDR
60856: GO 61120
// begin tmp := arr ;
60858: LD_ADDR_VAR 0 6
60862: PUSH
60863: LD_VAR 0 1
60867: ST_TO_ADDR
// s_arr := [ tmp ] ;
60868: LD_ADDR_VAR 0 7
60872: PUSH
60873: LD_VAR 0 6
60877: PUSH
60878: EMPTY
60879: LIST
60880: ST_TO_ADDR
// for i = 1 to pos - 1 do
60881: LD_ADDR_VAR 0 5
60885: PUSH
60886: DOUBLE
60887: LD_INT 1
60889: DEC
60890: ST_TO_ADDR
60891: LD_VAR 0 2
60895: PUSH
60896: LD_INT 1
60898: MINUS
60899: PUSH
60900: FOR_TO
60901: IFFALSE 60946
// begin tmp := tmp [ pos [ i ] ] ;
60903: LD_ADDR_VAR 0 6
60907: PUSH
60908: LD_VAR 0 6
60912: PUSH
60913: LD_VAR 0 2
60917: PUSH
60918: LD_VAR 0 5
60922: ARRAY
60923: ARRAY
60924: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
60925: LD_ADDR_VAR 0 7
60929: PUSH
60930: LD_VAR 0 7
60934: PUSH
60935: LD_VAR 0 6
60939: PUSH
60940: EMPTY
60941: LIST
60942: ADD
60943: ST_TO_ADDR
// end ;
60944: GO 60900
60946: POP
60947: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
60948: LD_ADDR_VAR 0 6
60952: PUSH
60953: LD_VAR 0 6
60957: PPUSH
60958: LD_VAR 0 2
60962: PUSH
60963: LD_VAR 0 2
60967: ARRAY
60968: PPUSH
60969: LD_VAR 0 3
60973: PPUSH
60974: CALL_OW 1
60978: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
60979: LD_ADDR_VAR 0 7
60983: PUSH
60984: LD_VAR 0 7
60988: PPUSH
60989: LD_VAR 0 7
60993: PPUSH
60994: LD_VAR 0 6
60998: PPUSH
60999: CALL_OW 1
61003: ST_TO_ADDR
// for i = s_arr downto 2 do
61004: LD_ADDR_VAR 0 5
61008: PUSH
61009: DOUBLE
61010: LD_VAR 0 7
61014: INC
61015: ST_TO_ADDR
61016: LD_INT 2
61018: PUSH
61019: FOR_DOWNTO
61020: IFFALSE 61104
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
61022: LD_ADDR_VAR 0 6
61026: PUSH
61027: LD_VAR 0 7
61031: PUSH
61032: LD_VAR 0 5
61036: PUSH
61037: LD_INT 1
61039: MINUS
61040: ARRAY
61041: PPUSH
61042: LD_VAR 0 2
61046: PUSH
61047: LD_VAR 0 5
61051: PUSH
61052: LD_INT 1
61054: MINUS
61055: ARRAY
61056: PPUSH
61057: LD_VAR 0 7
61061: PUSH
61062: LD_VAR 0 5
61066: ARRAY
61067: PPUSH
61068: CALL_OW 1
61072: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
61073: LD_ADDR_VAR 0 7
61077: PUSH
61078: LD_VAR 0 7
61082: PPUSH
61083: LD_VAR 0 5
61087: PUSH
61088: LD_INT 1
61090: MINUS
61091: PPUSH
61092: LD_VAR 0 6
61096: PPUSH
61097: CALL_OW 1
61101: ST_TO_ADDR
// end ;
61102: GO 61019
61104: POP
61105: POP
// result := s_arr [ 1 ] ;
61106: LD_ADDR_VAR 0 4
61110: PUSH
61111: LD_VAR 0 7
61115: PUSH
61116: LD_INT 1
61118: ARRAY
61119: ST_TO_ADDR
// end ; end ;
61120: LD_VAR 0 4
61124: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
61125: LD_INT 0
61127: PPUSH
61128: PPUSH
// if not list then
61129: LD_VAR 0 1
61133: NOT
61134: IFFALSE 61138
// exit ;
61136: GO 61229
// i := list [ pos1 ] ;
61138: LD_ADDR_VAR 0 5
61142: PUSH
61143: LD_VAR 0 1
61147: PUSH
61148: LD_VAR 0 2
61152: ARRAY
61153: ST_TO_ADDR
// if not i then
61154: LD_VAR 0 5
61158: NOT
61159: IFFALSE 61163
// exit ;
61161: GO 61229
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
61163: LD_ADDR_VAR 0 1
61167: PUSH
61168: LD_VAR 0 1
61172: PPUSH
61173: LD_VAR 0 2
61177: PPUSH
61178: LD_VAR 0 1
61182: PUSH
61183: LD_VAR 0 3
61187: ARRAY
61188: PPUSH
61189: CALL_OW 1
61193: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
61194: LD_ADDR_VAR 0 1
61198: PUSH
61199: LD_VAR 0 1
61203: PPUSH
61204: LD_VAR 0 3
61208: PPUSH
61209: LD_VAR 0 5
61213: PPUSH
61214: CALL_OW 1
61218: ST_TO_ADDR
// result := list ;
61219: LD_ADDR_VAR 0 4
61223: PUSH
61224: LD_VAR 0 1
61228: ST_TO_ADDR
// end ;
61229: LD_VAR 0 4
61233: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
61234: LD_INT 0
61236: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
61237: LD_ADDR_VAR 0 5
61241: PUSH
61242: LD_VAR 0 1
61246: PPUSH
61247: CALL_OW 250
61251: PPUSH
61252: LD_VAR 0 1
61256: PPUSH
61257: CALL_OW 251
61261: PPUSH
61262: LD_VAR 0 2
61266: PPUSH
61267: LD_VAR 0 3
61271: PPUSH
61272: LD_VAR 0 4
61276: PPUSH
61277: CALL 61659 0 5
61281: ST_TO_ADDR
// end ;
61282: LD_VAR 0 5
61286: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
61287: LD_INT 0
61289: PPUSH
61290: PPUSH
61291: PPUSH
61292: PPUSH
// if not list or not unit then
61293: LD_VAR 0 2
61297: NOT
61298: IFTRUE 61307
61300: PUSH
61301: LD_VAR 0 1
61305: NOT
61306: OR
61307: IFFALSE 61311
// exit ;
61309: GO 61654
// result := [ ] ;
61311: LD_ADDR_VAR 0 5
61315: PUSH
61316: EMPTY
61317: ST_TO_ADDR
// for i in list do
61318: LD_ADDR_VAR 0 6
61322: PUSH
61323: LD_VAR 0 2
61327: PUSH
61328: FOR_IN
61329: IFFALSE 61547
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
61331: LD_ADDR_VAR 0 8
61335: PUSH
61336: LD_VAR 0 1
61340: PPUSH
61341: LD_VAR 0 6
61345: PUSH
61346: LD_INT 1
61348: ARRAY
61349: PPUSH
61350: LD_VAR 0 6
61354: PUSH
61355: LD_INT 2
61357: ARRAY
61358: PPUSH
61359: CALL_OW 297
61363: ST_TO_ADDR
// if not Count ( result ) then
61364: LD_VAR 0 5
61368: PPUSH
61369: CALL 57915 0 1
61373: NOT
61374: IFFALSE 61407
// begin result := Join ( result , [ i , tmp ] ) ;
61376: LD_ADDR_VAR 0 5
61380: PUSH
61381: LD_VAR 0 5
61385: PPUSH
61386: LD_VAR 0 6
61390: PUSH
61391: LD_VAR 0 8
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PPUSH
61400: CALL 93847 0 2
61404: ST_TO_ADDR
// continue ;
61405: GO 61328
// end ; if result [ result ] [ 2 ] <= tmp then
61407: LD_VAR 0 5
61411: PUSH
61412: LD_VAR 0 5
61416: ARRAY
61417: PUSH
61418: LD_INT 2
61420: ARRAY
61421: PUSH
61422: LD_VAR 0 8
61426: LESSEQUAL
61427: IFFALSE 61460
// result := Join ( result , [ i , tmp ] ) else
61429: LD_ADDR_VAR 0 5
61433: PUSH
61434: LD_VAR 0 5
61438: PPUSH
61439: LD_VAR 0 6
61443: PUSH
61444: LD_VAR 0 8
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PPUSH
61453: CALL 93847 0 2
61457: ST_TO_ADDR
61458: GO 61545
// begin for j := 1 to Count ( result ) do
61460: LD_ADDR_VAR 0 7
61464: PUSH
61465: DOUBLE
61466: LD_INT 1
61468: DEC
61469: ST_TO_ADDR
61470: LD_VAR 0 5
61474: PPUSH
61475: CALL 57915 0 1
61479: PUSH
61480: FOR_TO
61481: IFFALSE 61543
// begin if tmp < result [ j ] [ 2 ] then
61483: LD_VAR 0 8
61487: PUSH
61488: LD_VAR 0 5
61492: PUSH
61493: LD_VAR 0 7
61497: ARRAY
61498: PUSH
61499: LD_INT 2
61501: ARRAY
61502: LESS
61503: IFFALSE 61541
// begin result := Insert ( result , j , [ i , tmp ] ) ;
61505: LD_ADDR_VAR 0 5
61509: PUSH
61510: LD_VAR 0 5
61514: PPUSH
61515: LD_VAR 0 7
61519: PPUSH
61520: LD_VAR 0 6
61524: PUSH
61525: LD_VAR 0 8
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PPUSH
61534: CALL_OW 2
61538: ST_TO_ADDR
// break ;
61539: GO 61543
// end ; end ;
61541: GO 61480
61543: POP
61544: POP
// end ; end ;
61545: GO 61328
61547: POP
61548: POP
// if result and not asc then
61549: LD_VAR 0 5
61553: IFFALSE 61562
61555: PUSH
61556: LD_VAR 0 3
61560: NOT
61561: AND
61562: IFFALSE 61579
// result := ReverseArray ( result ) ;
61564: LD_ADDR_VAR 0 5
61568: PUSH
61569: LD_VAR 0 5
61573: PPUSH
61574: CALL 88937 0 1
61578: ST_TO_ADDR
// tmp := [ ] ;
61579: LD_ADDR_VAR 0 8
61583: PUSH
61584: EMPTY
61585: ST_TO_ADDR
// if mode then
61586: LD_VAR 0 4
61590: IFFALSE 61654
// begin for i := 1 to result do
61592: LD_ADDR_VAR 0 6
61596: PUSH
61597: DOUBLE
61598: LD_INT 1
61600: DEC
61601: ST_TO_ADDR
61602: LD_VAR 0 5
61606: PUSH
61607: FOR_TO
61608: IFFALSE 61642
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
61610: LD_ADDR_VAR 0 8
61614: PUSH
61615: LD_VAR 0 8
61619: PPUSH
61620: LD_VAR 0 5
61624: PUSH
61625: LD_VAR 0 6
61629: ARRAY
61630: PUSH
61631: LD_INT 1
61633: ARRAY
61634: PPUSH
61635: CALL 93847 0 2
61639: ST_TO_ADDR
61640: GO 61607
61642: POP
61643: POP
// result := tmp ;
61644: LD_ADDR_VAR 0 5
61648: PUSH
61649: LD_VAR 0 8
61653: ST_TO_ADDR
// end ; end ;
61654: LD_VAR 0 5
61658: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
61659: LD_INT 0
61661: PPUSH
61662: PPUSH
61663: PPUSH
61664: PPUSH
// if not list then
61665: LD_VAR 0 3
61669: NOT
61670: IFFALSE 61674
// exit ;
61672: GO 62064
// result := [ ] ;
61674: LD_ADDR_VAR 0 6
61678: PUSH
61679: EMPTY
61680: ST_TO_ADDR
// for i in list do
61681: LD_ADDR_VAR 0 7
61685: PUSH
61686: LD_VAR 0 3
61690: PUSH
61691: FOR_IN
61692: IFFALSE 61894
// begin tmp := GetDistUnitXY ( i , x , y ) ;
61694: LD_ADDR_VAR 0 9
61698: PUSH
61699: LD_VAR 0 7
61703: PPUSH
61704: LD_VAR 0 1
61708: PPUSH
61709: LD_VAR 0 2
61713: PPUSH
61714: CALL_OW 297
61718: ST_TO_ADDR
// if not result then
61719: LD_VAR 0 6
61723: NOT
61724: IFFALSE 61750
// result := [ [ i , tmp ] ] else
61726: LD_ADDR_VAR 0 6
61730: PUSH
61731: LD_VAR 0 7
61735: PUSH
61736: LD_VAR 0 9
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: EMPTY
61746: LIST
61747: ST_TO_ADDR
61748: GO 61892
// begin if result [ result ] [ 2 ] <= tmp then
61750: LD_VAR 0 6
61754: PUSH
61755: LD_VAR 0 6
61759: ARRAY
61760: PUSH
61761: LD_INT 2
61763: ARRAY
61764: PUSH
61765: LD_VAR 0 9
61769: LESSEQUAL
61770: IFFALSE 61812
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
61772: LD_ADDR_VAR 0 6
61776: PUSH
61777: LD_VAR 0 6
61781: PPUSH
61782: LD_VAR 0 6
61786: PUSH
61787: LD_INT 1
61789: PLUS
61790: PPUSH
61791: LD_VAR 0 7
61795: PUSH
61796: LD_VAR 0 9
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PPUSH
61805: CALL_OW 2
61809: ST_TO_ADDR
61810: GO 61892
// for j := 1 to result do
61812: LD_ADDR_VAR 0 8
61816: PUSH
61817: DOUBLE
61818: LD_INT 1
61820: DEC
61821: ST_TO_ADDR
61822: LD_VAR 0 6
61826: PUSH
61827: FOR_TO
61828: IFFALSE 61890
// begin if tmp < result [ j ] [ 2 ] then
61830: LD_VAR 0 9
61834: PUSH
61835: LD_VAR 0 6
61839: PUSH
61840: LD_VAR 0 8
61844: ARRAY
61845: PUSH
61846: LD_INT 2
61848: ARRAY
61849: LESS
61850: IFFALSE 61888
// begin result := Insert ( result , j , [ i , tmp ] ) ;
61852: LD_ADDR_VAR 0 6
61856: PUSH
61857: LD_VAR 0 6
61861: PPUSH
61862: LD_VAR 0 8
61866: PPUSH
61867: LD_VAR 0 7
61871: PUSH
61872: LD_VAR 0 9
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PPUSH
61881: CALL_OW 2
61885: ST_TO_ADDR
// break ;
61886: GO 61890
// end ; end ;
61888: GO 61827
61890: POP
61891: POP
// end ; end ;
61892: GO 61691
61894: POP
61895: POP
// if result and not asc then
61896: LD_VAR 0 6
61900: IFFALSE 61909
61902: PUSH
61903: LD_VAR 0 4
61907: NOT
61908: AND
61909: IFFALSE 61984
// begin tmp := result ;
61911: LD_ADDR_VAR 0 9
61915: PUSH
61916: LD_VAR 0 6
61920: ST_TO_ADDR
// for i = tmp downto 1 do
61921: LD_ADDR_VAR 0 7
61925: PUSH
61926: DOUBLE
61927: LD_VAR 0 9
61931: INC
61932: ST_TO_ADDR
61933: LD_INT 1
61935: PUSH
61936: FOR_DOWNTO
61937: IFFALSE 61982
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
61939: LD_ADDR_VAR 0 6
61943: PUSH
61944: LD_VAR 0 6
61948: PPUSH
61949: LD_VAR 0 9
61953: PUSH
61954: LD_VAR 0 7
61958: MINUS
61959: PUSH
61960: LD_INT 1
61962: PLUS
61963: PPUSH
61964: LD_VAR 0 9
61968: PUSH
61969: LD_VAR 0 7
61973: ARRAY
61974: PPUSH
61975: CALL_OW 1
61979: ST_TO_ADDR
61980: GO 61936
61982: POP
61983: POP
// end ; tmp := [ ] ;
61984: LD_ADDR_VAR 0 9
61988: PUSH
61989: EMPTY
61990: ST_TO_ADDR
// if mode then
61991: LD_VAR 0 5
61995: IFFALSE 62064
// begin for i = 1 to result do
61997: LD_ADDR_VAR 0 7
62001: PUSH
62002: DOUBLE
62003: LD_INT 1
62005: DEC
62006: ST_TO_ADDR
62007: LD_VAR 0 6
62011: PUSH
62012: FOR_TO
62013: IFFALSE 62052
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
62015: LD_ADDR_VAR 0 9
62019: PUSH
62020: LD_VAR 0 9
62024: PPUSH
62025: LD_VAR 0 7
62029: PPUSH
62030: LD_VAR 0 6
62034: PUSH
62035: LD_VAR 0 7
62039: ARRAY
62040: PUSH
62041: LD_INT 1
62043: ARRAY
62044: PPUSH
62045: CALL_OW 1
62049: ST_TO_ADDR
62050: GO 62012
62052: POP
62053: POP
// result := tmp ;
62054: LD_ADDR_VAR 0 6
62058: PUSH
62059: LD_VAR 0 9
62063: ST_TO_ADDR
// end ; end ;
62064: LD_VAR 0 6
62068: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
62069: LD_INT 0
62071: PPUSH
62072: PPUSH
62073: PPUSH
62074: PPUSH
62075: PPUSH
62076: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
62077: LD_ADDR_VAR 0 5
62081: PUSH
62082: LD_INT 0
62084: PUSH
62085: LD_INT 0
62087: PUSH
62088: LD_INT 0
62090: PUSH
62091: EMPTY
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: ST_TO_ADDR
// if not x or not y then
62099: LD_VAR 0 2
62103: NOT
62104: IFTRUE 62113
62106: PUSH
62107: LD_VAR 0 3
62111: NOT
62112: OR
62113: IFFALSE 62117
// exit ;
62115: GO 63773
// if not range then
62117: LD_VAR 0 4
62121: NOT
62122: IFFALSE 62132
// range := 10 ;
62124: LD_ADDR_VAR 0 4
62128: PUSH
62129: LD_INT 10
62131: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
62132: LD_ADDR_VAR 0 8
62136: PUSH
62137: LD_INT 81
62139: PUSH
62140: LD_VAR 0 1
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 92
62151: PUSH
62152: LD_VAR 0 2
62156: PUSH
62157: LD_VAR 0 3
62161: PUSH
62162: LD_VAR 0 4
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 3
62175: PUSH
62176: LD_INT 21
62178: PUSH
62179: LD_INT 3
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: LIST
62194: PPUSH
62195: CALL_OW 69
62199: ST_TO_ADDR
// if not tmp then
62200: LD_VAR 0 8
62204: NOT
62205: IFFALSE 62209
// exit ;
62207: GO 63773
// for i in tmp do
62209: LD_ADDR_VAR 0 6
62213: PUSH
62214: LD_VAR 0 8
62218: PUSH
62219: FOR_IN
62220: IFFALSE 63748
// begin points := [ 0 , 0 , 0 ] ;
62222: LD_ADDR_VAR 0 9
62226: PUSH
62227: LD_INT 0
62229: PUSH
62230: LD_INT 0
62232: PUSH
62233: LD_INT 0
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: LIST
62240: ST_TO_ADDR
// bpoints := 1 ;
62241: LD_ADDR_VAR 0 10
62245: PUSH
62246: LD_INT 1
62248: ST_TO_ADDR
// case GetType ( i ) of unit_human :
62249: LD_VAR 0 6
62253: PPUSH
62254: CALL_OW 247
62258: PUSH
62259: LD_INT 1
62261: DOUBLE
62262: EQUAL
62263: IFTRUE 62267
62265: GO 62849
62267: POP
// begin if GetClass ( i ) = 1 then
62268: LD_VAR 0 6
62272: PPUSH
62273: CALL_OW 257
62277: PUSH
62278: LD_INT 1
62280: EQUAL
62281: IFFALSE 62302
// points := [ 10 , 5 , 3 ] ;
62283: LD_ADDR_VAR 0 9
62287: PUSH
62288: LD_INT 10
62290: PUSH
62291: LD_INT 5
62293: PUSH
62294: LD_INT 3
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: LIST
62301: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
62302: LD_VAR 0 6
62306: PPUSH
62307: CALL_OW 257
62311: PUSH
62312: LD_INT 2
62314: PUSH
62315: LD_INT 3
62317: PUSH
62318: LD_INT 4
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: LIST
62325: IN
62326: IFFALSE 62347
// points := [ 3 , 2 , 1 ] ;
62328: LD_ADDR_VAR 0 9
62332: PUSH
62333: LD_INT 3
62335: PUSH
62336: LD_INT 2
62338: PUSH
62339: LD_INT 1
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: LIST
62346: ST_TO_ADDR
// if GetClass ( i ) = 5 then
62347: LD_VAR 0 6
62351: PPUSH
62352: CALL_OW 257
62356: PUSH
62357: LD_INT 5
62359: EQUAL
62360: IFFALSE 62381
// points := [ 130 , 5 , 2 ] ;
62362: LD_ADDR_VAR 0 9
62366: PUSH
62367: LD_INT 130
62369: PUSH
62370: LD_INT 5
62372: PUSH
62373: LD_INT 2
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: LIST
62380: ST_TO_ADDR
// if GetClass ( i ) = 8 then
62381: LD_VAR 0 6
62385: PPUSH
62386: CALL_OW 257
62390: PUSH
62391: LD_INT 8
62393: EQUAL
62394: IFFALSE 62415
// points := [ 35 , 35 , 30 ] ;
62396: LD_ADDR_VAR 0 9
62400: PUSH
62401: LD_INT 35
62403: PUSH
62404: LD_INT 35
62406: PUSH
62407: LD_INT 30
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: LIST
62414: ST_TO_ADDR
// if GetClass ( i ) = 9 then
62415: LD_VAR 0 6
62419: PPUSH
62420: CALL_OW 257
62424: PUSH
62425: LD_INT 9
62427: EQUAL
62428: IFFALSE 62449
// points := [ 20 , 55 , 40 ] ;
62430: LD_ADDR_VAR 0 9
62434: PUSH
62435: LD_INT 20
62437: PUSH
62438: LD_INT 55
62440: PUSH
62441: LD_INT 40
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: LIST
62448: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
62449: LD_VAR 0 6
62453: PPUSH
62454: CALL_OW 257
62458: PUSH
62459: LD_INT 12
62461: PUSH
62462: LD_INT 16
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: IN
62469: IFFALSE 62490
// points := [ 5 , 3 , 2 ] ;
62471: LD_ADDR_VAR 0 9
62475: PUSH
62476: LD_INT 5
62478: PUSH
62479: LD_INT 3
62481: PUSH
62482: LD_INT 2
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: LIST
62489: ST_TO_ADDR
// if GetClass ( i ) = 17 then
62490: LD_VAR 0 6
62494: PPUSH
62495: CALL_OW 257
62499: PUSH
62500: LD_INT 17
62502: EQUAL
62503: IFFALSE 62524
// points := [ 100 , 50 , 75 ] ;
62505: LD_ADDR_VAR 0 9
62509: PUSH
62510: LD_INT 100
62512: PUSH
62513: LD_INT 50
62515: PUSH
62516: LD_INT 75
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: LIST
62523: ST_TO_ADDR
// if GetClass ( i ) = 15 then
62524: LD_VAR 0 6
62528: PPUSH
62529: CALL_OW 257
62533: PUSH
62534: LD_INT 15
62536: EQUAL
62537: IFFALSE 62558
// points := [ 10 , 5 , 3 ] ;
62539: LD_ADDR_VAR 0 9
62543: PUSH
62544: LD_INT 10
62546: PUSH
62547: LD_INT 5
62549: PUSH
62550: LD_INT 3
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: LIST
62557: ST_TO_ADDR
// if GetClass ( i ) = 14 then
62558: LD_VAR 0 6
62562: PPUSH
62563: CALL_OW 257
62567: PUSH
62568: LD_INT 14
62570: EQUAL
62571: IFFALSE 62592
// points := [ 10 , 0 , 0 ] ;
62573: LD_ADDR_VAR 0 9
62577: PUSH
62578: LD_INT 10
62580: PUSH
62581: LD_INT 0
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: LIST
62591: ST_TO_ADDR
// if GetClass ( i ) = 11 then
62592: LD_VAR 0 6
62596: PPUSH
62597: CALL_OW 257
62601: PUSH
62602: LD_INT 11
62604: EQUAL
62605: IFFALSE 62626
// points := [ 30 , 10 , 5 ] ;
62607: LD_ADDR_VAR 0 9
62611: PUSH
62612: LD_INT 30
62614: PUSH
62615: LD_INT 10
62617: PUSH
62618: LD_INT 5
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: LIST
62625: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
62626: LD_VAR 0 1
62630: PPUSH
62631: LD_INT 5
62633: PPUSH
62634: CALL_OW 321
62638: PUSH
62639: LD_INT 2
62641: EQUAL
62642: IFFALSE 62659
// bpoints := bpoints * 1.8 ;
62644: LD_ADDR_VAR 0 10
62648: PUSH
62649: LD_VAR 0 10
62653: PUSH
62654: LD_REAL  1.80000000000000E+0000
62657: MUL
62658: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
62659: LD_VAR 0 6
62663: PPUSH
62664: CALL_OW 257
62668: PUSH
62669: LD_INT 1
62671: PUSH
62672: LD_INT 2
62674: PUSH
62675: LD_INT 3
62677: PUSH
62678: LD_INT 4
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: IN
62687: IFFALSE 62707
62689: PUSH
62690: LD_VAR 0 1
62694: PPUSH
62695: LD_INT 51
62697: PPUSH
62698: CALL_OW 321
62702: PUSH
62703: LD_INT 2
62705: EQUAL
62706: AND
62707: IFFALSE 62724
// bpoints := bpoints * 1.2 ;
62709: LD_ADDR_VAR 0 10
62713: PUSH
62714: LD_VAR 0 10
62718: PUSH
62719: LD_REAL  1.20000000000000E+0000
62722: MUL
62723: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
62724: LD_VAR 0 6
62728: PPUSH
62729: CALL_OW 257
62733: PUSH
62734: LD_INT 5
62736: PUSH
62737: LD_INT 7
62739: PUSH
62740: LD_INT 9
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: LIST
62747: IN
62748: IFFALSE 62768
62750: PUSH
62751: LD_VAR 0 1
62755: PPUSH
62756: LD_INT 52
62758: PPUSH
62759: CALL_OW 321
62763: PUSH
62764: LD_INT 2
62766: EQUAL
62767: AND
62768: IFFALSE 62785
// bpoints := bpoints * 1.5 ;
62770: LD_ADDR_VAR 0 10
62774: PUSH
62775: LD_VAR 0 10
62779: PUSH
62780: LD_REAL  1.50000000000000E+0000
62783: MUL
62784: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
62785: LD_VAR 0 1
62789: PPUSH
62790: LD_INT 66
62792: PPUSH
62793: CALL_OW 321
62797: PUSH
62798: LD_INT 2
62800: EQUAL
62801: IFFALSE 62818
// bpoints := bpoints * 1.1 ;
62803: LD_ADDR_VAR 0 10
62807: PUSH
62808: LD_VAR 0 10
62812: PUSH
62813: LD_REAL  1.10000000000000E+0000
62816: MUL
62817: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
62818: LD_ADDR_VAR 0 10
62822: PUSH
62823: LD_VAR 0 10
62827: PUSH
62828: LD_VAR 0 6
62832: PPUSH
62833: LD_INT 1
62835: PPUSH
62836: CALL_OW 259
62840: PUSH
62841: LD_REAL  1.15000000000000E+0000
62844: MUL
62845: MUL
62846: ST_TO_ADDR
// end ; unit_vehicle :
62847: GO 63677
62849: LD_INT 2
62851: DOUBLE
62852: EQUAL
62853: IFTRUE 62857
62855: GO 63665
62857: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
62858: LD_VAR 0 6
62862: PPUSH
62863: CALL_OW 264
62867: PUSH
62868: LD_INT 2
62870: PUSH
62871: LD_INT 42
62873: PUSH
62874: LD_INT 24
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: LIST
62881: IN
62882: IFFALSE 62903
// points := [ 25 , 5 , 3 ] ;
62884: LD_ADDR_VAR 0 9
62888: PUSH
62889: LD_INT 25
62891: PUSH
62892: LD_INT 5
62894: PUSH
62895: LD_INT 3
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: LIST
62902: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
62903: LD_VAR 0 6
62907: PPUSH
62908: CALL_OW 264
62912: PUSH
62913: LD_INT 4
62915: PUSH
62916: LD_INT 43
62918: PUSH
62919: LD_INT 25
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: LIST
62926: IN
62927: IFFALSE 62948
// points := [ 40 , 15 , 5 ] ;
62929: LD_ADDR_VAR 0 9
62933: PUSH
62934: LD_INT 40
62936: PUSH
62937: LD_INT 15
62939: PUSH
62940: LD_INT 5
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: LIST
62947: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
62948: LD_VAR 0 6
62952: PPUSH
62953: CALL_OW 264
62957: PUSH
62958: LD_INT 3
62960: PUSH
62961: LD_INT 23
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: IN
62968: IFFALSE 62989
// points := [ 7 , 25 , 8 ] ;
62970: LD_ADDR_VAR 0 9
62974: PUSH
62975: LD_INT 7
62977: PUSH
62978: LD_INT 25
62980: PUSH
62981: LD_INT 8
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: LIST
62988: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
62989: LD_VAR 0 6
62993: PPUSH
62994: CALL_OW 264
62998: PUSH
62999: LD_INT 5
63001: PUSH
63002: LD_INT 27
63004: PUSH
63005: LD_INT 44
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: LIST
63012: IN
63013: IFFALSE 63034
// points := [ 14 , 50 , 16 ] ;
63015: LD_ADDR_VAR 0 9
63019: PUSH
63020: LD_INT 14
63022: PUSH
63023: LD_INT 50
63025: PUSH
63026: LD_INT 16
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: LIST
63033: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
63034: LD_VAR 0 6
63038: PPUSH
63039: CALL_OW 264
63043: PUSH
63044: LD_INT 6
63046: PUSH
63047: LD_INT 46
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: IN
63054: IFFALSE 63075
// points := [ 32 , 120 , 70 ] ;
63056: LD_ADDR_VAR 0 9
63060: PUSH
63061: LD_INT 32
63063: PUSH
63064: LD_INT 120
63066: PUSH
63067: LD_INT 70
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: LIST
63074: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
63075: LD_VAR 0 6
63079: PPUSH
63080: CALL_OW 264
63084: PUSH
63085: LD_INT 7
63087: PUSH
63088: LD_INT 28
63090: PUSH
63091: LD_INT 45
63093: PUSH
63094: LD_INT 92
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: IN
63103: IFFALSE 63124
// points := [ 35 , 20 , 45 ] ;
63105: LD_ADDR_VAR 0 9
63109: PUSH
63110: LD_INT 35
63112: PUSH
63113: LD_INT 20
63115: PUSH
63116: LD_INT 45
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: LIST
63123: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
63124: LD_VAR 0 6
63128: PPUSH
63129: CALL_OW 264
63133: PUSH
63134: LD_INT 47
63136: PUSH
63137: EMPTY
63138: LIST
63139: IN
63140: IFFALSE 63161
// points := [ 67 , 45 , 75 ] ;
63142: LD_ADDR_VAR 0 9
63146: PUSH
63147: LD_INT 67
63149: PUSH
63150: LD_INT 45
63152: PUSH
63153: LD_INT 75
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: LIST
63160: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
63161: LD_VAR 0 6
63165: PPUSH
63166: CALL_OW 264
63170: PUSH
63171: LD_INT 26
63173: PUSH
63174: EMPTY
63175: LIST
63176: IN
63177: IFFALSE 63198
// points := [ 120 , 30 , 80 ] ;
63179: LD_ADDR_VAR 0 9
63183: PUSH
63184: LD_INT 120
63186: PUSH
63187: LD_INT 30
63189: PUSH
63190: LD_INT 80
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: LIST
63197: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
63198: LD_VAR 0 6
63202: PPUSH
63203: CALL_OW 264
63207: PUSH
63208: LD_INT 22
63210: PUSH
63211: EMPTY
63212: LIST
63213: IN
63214: IFFALSE 63235
// points := [ 40 , 1 , 1 ] ;
63216: LD_ADDR_VAR 0 9
63220: PUSH
63221: LD_INT 40
63223: PUSH
63224: LD_INT 1
63226: PUSH
63227: LD_INT 1
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: LIST
63234: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
63235: LD_VAR 0 6
63239: PPUSH
63240: CALL_OW 264
63244: PUSH
63245: LD_INT 29
63247: PUSH
63248: EMPTY
63249: LIST
63250: IN
63251: IFFALSE 63272
// points := [ 70 , 200 , 400 ] ;
63253: LD_ADDR_VAR 0 9
63257: PUSH
63258: LD_INT 70
63260: PUSH
63261: LD_INT 200
63263: PUSH
63264: LD_INT 400
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: LIST
63271: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
63272: LD_VAR 0 6
63276: PPUSH
63277: CALL_OW 264
63281: PUSH
63282: LD_INT 14
63284: PUSH
63285: LD_INT 53
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: IN
63292: IFFALSE 63313
// points := [ 40 , 10 , 20 ] ;
63294: LD_ADDR_VAR 0 9
63298: PUSH
63299: LD_INT 40
63301: PUSH
63302: LD_INT 10
63304: PUSH
63305: LD_INT 20
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: LIST
63312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
63313: LD_VAR 0 6
63317: PPUSH
63318: CALL_OW 264
63322: PUSH
63323: LD_INT 9
63325: PUSH
63326: EMPTY
63327: LIST
63328: IN
63329: IFFALSE 63350
// points := [ 5 , 70 , 20 ] ;
63331: LD_ADDR_VAR 0 9
63335: PUSH
63336: LD_INT 5
63338: PUSH
63339: LD_INT 70
63341: PUSH
63342: LD_INT 20
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: LIST
63349: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
63350: LD_VAR 0 6
63354: PPUSH
63355: CALL_OW 264
63359: PUSH
63360: LD_INT 10
63362: PUSH
63363: EMPTY
63364: LIST
63365: IN
63366: IFFALSE 63387
// points := [ 35 , 110 , 70 ] ;
63368: LD_ADDR_VAR 0 9
63372: PUSH
63373: LD_INT 35
63375: PUSH
63376: LD_INT 110
63378: PUSH
63379: LD_INT 70
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: LIST
63386: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
63387: LD_VAR 0 6
63391: PPUSH
63392: CALL_OW 265
63396: PUSH
63397: LD_INT 25
63399: EQUAL
63400: IFFALSE 63421
// points := [ 80 , 65 , 100 ] ;
63402: LD_ADDR_VAR 0 9
63406: PUSH
63407: LD_INT 80
63409: PUSH
63410: LD_INT 65
63412: PUSH
63413: LD_INT 100
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: LIST
63420: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
63421: LD_VAR 0 6
63425: PPUSH
63426: CALL_OW 263
63430: PUSH
63431: LD_INT 1
63433: EQUAL
63434: IFFALSE 63469
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
63436: LD_ADDR_VAR 0 10
63440: PUSH
63441: LD_VAR 0 10
63445: PUSH
63446: LD_VAR 0 6
63450: PPUSH
63451: CALL_OW 311
63455: PPUSH
63456: LD_INT 3
63458: PPUSH
63459: CALL_OW 259
63463: PUSH
63464: LD_INT 4
63466: MUL
63467: MUL
63468: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
63469: LD_VAR 0 6
63473: PPUSH
63474: CALL_OW 263
63478: PUSH
63479: LD_INT 2
63481: EQUAL
63482: IFFALSE 63533
// begin j := IsControledBy ( i ) ;
63484: LD_ADDR_VAR 0 7
63488: PUSH
63489: LD_VAR 0 6
63493: PPUSH
63494: CALL_OW 312
63498: ST_TO_ADDR
// if j then
63499: LD_VAR 0 7
63503: IFFALSE 63533
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
63505: LD_ADDR_VAR 0 10
63509: PUSH
63510: LD_VAR 0 10
63514: PUSH
63515: LD_VAR 0 7
63519: PPUSH
63520: LD_INT 3
63522: PPUSH
63523: CALL_OW 259
63527: PUSH
63528: LD_INT 3
63530: MUL
63531: MUL
63532: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
63533: LD_VAR 0 6
63537: PPUSH
63538: CALL_OW 264
63542: PUSH
63543: LD_INT 5
63545: PUSH
63546: LD_INT 6
63548: PUSH
63549: LD_INT 46
63551: PUSH
63552: LD_INT 44
63554: PUSH
63555: LD_INT 47
63557: PUSH
63558: LD_INT 45
63560: PUSH
63561: LD_INT 28
63563: PUSH
63564: LD_INT 7
63566: PUSH
63567: LD_INT 27
63569: PUSH
63570: LD_INT 29
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: IN
63585: IFFALSE 63605
63587: PUSH
63588: LD_VAR 0 1
63592: PPUSH
63593: LD_INT 52
63595: PPUSH
63596: CALL_OW 321
63600: PUSH
63601: LD_INT 2
63603: EQUAL
63604: AND
63605: IFFALSE 63622
// bpoints := bpoints * 1.2 ;
63607: LD_ADDR_VAR 0 10
63611: PUSH
63612: LD_VAR 0 10
63616: PUSH
63617: LD_REAL  1.20000000000000E+0000
63620: MUL
63621: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
63622: LD_VAR 0 6
63626: PPUSH
63627: CALL_OW 264
63631: PUSH
63632: LD_INT 6
63634: PUSH
63635: LD_INT 46
63637: PUSH
63638: LD_INT 47
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: LIST
63645: IN
63646: IFFALSE 63663
// bpoints := bpoints * 1.2 ;
63648: LD_ADDR_VAR 0 10
63652: PUSH
63653: LD_VAR 0 10
63657: PUSH
63658: LD_REAL  1.20000000000000E+0000
63661: MUL
63662: ST_TO_ADDR
// end ; unit_building :
63663: GO 63677
63665: LD_INT 3
63667: DOUBLE
63668: EQUAL
63669: IFTRUE 63673
63671: GO 63676
63673: POP
// ; end ;
63674: GO 63677
63676: POP
// for j = 1 to 3 do
63677: LD_ADDR_VAR 0 7
63681: PUSH
63682: DOUBLE
63683: LD_INT 1
63685: DEC
63686: ST_TO_ADDR
63687: LD_INT 3
63689: PUSH
63690: FOR_TO
63691: IFFALSE 63744
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
63693: LD_ADDR_VAR 0 5
63697: PUSH
63698: LD_VAR 0 5
63702: PPUSH
63703: LD_VAR 0 7
63707: PPUSH
63708: LD_VAR 0 5
63712: PUSH
63713: LD_VAR 0 7
63717: ARRAY
63718: PUSH
63719: LD_VAR 0 9
63723: PUSH
63724: LD_VAR 0 7
63728: ARRAY
63729: PUSH
63730: LD_VAR 0 10
63734: MUL
63735: PLUS
63736: PPUSH
63737: CALL_OW 1
63741: ST_TO_ADDR
63742: GO 63690
63744: POP
63745: POP
// end ;
63746: GO 62219
63748: POP
63749: POP
// result := Replace ( result , 4 , tmp ) ;
63750: LD_ADDR_VAR 0 5
63754: PUSH
63755: LD_VAR 0 5
63759: PPUSH
63760: LD_INT 4
63762: PPUSH
63763: LD_VAR 0 8
63767: PPUSH
63768: CALL_OW 1
63772: ST_TO_ADDR
// end ;
63773: LD_VAR 0 5
63777: RET
// export function DangerAtRange ( unit , range ) ; begin
63778: LD_INT 0
63780: PPUSH
// if not unit then
63781: LD_VAR 0 1
63785: NOT
63786: IFFALSE 63790
// exit ;
63788: GO 63835
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
63790: LD_ADDR_VAR 0 3
63794: PUSH
63795: LD_VAR 0 1
63799: PPUSH
63800: CALL_OW 255
63804: PPUSH
63805: LD_VAR 0 1
63809: PPUSH
63810: CALL_OW 250
63814: PPUSH
63815: LD_VAR 0 1
63819: PPUSH
63820: CALL_OW 251
63824: PPUSH
63825: LD_VAR 0 2
63829: PPUSH
63830: CALL 62069 0 4
63834: ST_TO_ADDR
// end ;
63835: LD_VAR 0 3
63839: RET
// export function DangerInArea ( side , area ) ; begin
63840: LD_INT 0
63842: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
63843: LD_ADDR_VAR 0 3
63847: PUSH
63848: LD_VAR 0 2
63852: PPUSH
63853: LD_INT 81
63855: PUSH
63856: LD_VAR 0 1
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PPUSH
63865: CALL_OW 70
63869: ST_TO_ADDR
// end ;
63870: LD_VAR 0 3
63874: RET
// export function IsExtension ( b ) ; begin
63875: LD_INT 0
63877: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
63878: LD_ADDR_VAR 0 2
63882: PUSH
63883: LD_VAR 0 1
63887: PUSH
63888: LD_INT 23
63890: PUSH
63891: LD_INT 20
63893: PUSH
63894: LD_INT 22
63896: PUSH
63897: LD_INT 17
63899: PUSH
63900: LD_INT 24
63902: PUSH
63903: LD_INT 21
63905: PUSH
63906: LD_INT 19
63908: PUSH
63909: LD_INT 16
63911: PUSH
63912: LD_INT 25
63914: PUSH
63915: LD_INT 18
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: IN
63930: ST_TO_ADDR
// end ;
63931: LD_VAR 0 2
63935: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
63936: LD_INT 0
63938: PPUSH
63939: PPUSH
63940: PPUSH
// result := [ ] ;
63941: LD_ADDR_VAR 0 4
63945: PUSH
63946: EMPTY
63947: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
63948: LD_ADDR_VAR 0 5
63952: PUSH
63953: LD_VAR 0 2
63957: PPUSH
63958: LD_INT 21
63960: PUSH
63961: LD_INT 3
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PPUSH
63968: CALL_OW 70
63972: ST_TO_ADDR
// if not tmp then
63973: LD_VAR 0 5
63977: NOT
63978: IFFALSE 63982
// exit ;
63980: GO 64046
// if checkLink then
63982: LD_VAR 0 3
63986: IFFALSE 64036
// begin for i in tmp do
63988: LD_ADDR_VAR 0 6
63992: PUSH
63993: LD_VAR 0 5
63997: PUSH
63998: FOR_IN
63999: IFFALSE 64034
// if GetBase ( i ) <> base then
64001: LD_VAR 0 6
64005: PPUSH
64006: CALL_OW 274
64010: PUSH
64011: LD_VAR 0 1
64015: NONEQUAL
64016: IFFALSE 64032
// ComLinkToBase ( base , i ) ;
64018: LD_VAR 0 1
64022: PPUSH
64023: LD_VAR 0 6
64027: PPUSH
64028: CALL_OW 169
64032: GO 63998
64034: POP
64035: POP
// end ; result := tmp ;
64036: LD_ADDR_VAR 0 4
64040: PUSH
64041: LD_VAR 0 5
64045: ST_TO_ADDR
// end ;
64046: LD_VAR 0 4
64050: RET
// export function ComComplete ( units , b ) ; var i ; begin
64051: LD_INT 0
64053: PPUSH
64054: PPUSH
// if not units then
64055: LD_VAR 0 1
64059: NOT
64060: IFFALSE 64064
// exit ;
64062: GO 64154
// for i in units do
64064: LD_ADDR_VAR 0 4
64068: PUSH
64069: LD_VAR 0 1
64073: PUSH
64074: FOR_IN
64075: IFFALSE 64152
// if BuildingStatus ( b ) = bs_build then
64077: LD_VAR 0 2
64081: PPUSH
64082: CALL_OW 461
64086: PUSH
64087: LD_INT 1
64089: EQUAL
64090: IFFALSE 64150
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
64092: LD_VAR 0 4
64096: PPUSH
64097: LD_STRING h
64099: PUSH
64100: LD_VAR 0 2
64104: PPUSH
64105: CALL_OW 250
64109: PUSH
64110: LD_VAR 0 2
64114: PPUSH
64115: CALL_OW 251
64119: PUSH
64120: LD_VAR 0 2
64124: PUSH
64125: LD_INT 0
64127: PUSH
64128: LD_INT 0
64130: PUSH
64131: LD_INT 0
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: PUSH
64143: EMPTY
64144: LIST
64145: PPUSH
64146: CALL_OW 446
64150: GO 64074
64152: POP
64153: POP
// end ;
64154: LD_VAR 0 3
64158: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
64159: LD_INT 0
64161: PPUSH
64162: PPUSH
64163: PPUSH
64164: PPUSH
64165: PPUSH
64166: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
64167: LD_VAR 0 1
64171: NOT
64172: IFTRUE 64189
64174: PUSH
64175: LD_VAR 0 1
64179: PPUSH
64180: CALL_OW 263
64184: PUSH
64185: LD_INT 2
64187: NONEQUAL
64188: OR
64189: IFFALSE 64193
// exit ;
64191: GO 64509
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
64193: LD_ADDR_VAR 0 6
64197: PUSH
64198: LD_INT 22
64200: PUSH
64201: LD_VAR 0 1
64205: PPUSH
64206: CALL_OW 255
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 2
64217: PUSH
64218: LD_INT 30
64220: PUSH
64221: LD_INT 36
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 34
64230: PUSH
64231: LD_INT 31
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: LIST
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PPUSH
64247: CALL_OW 69
64251: ST_TO_ADDR
// if not tmp then
64252: LD_VAR 0 6
64256: NOT
64257: IFFALSE 64261
// exit ;
64259: GO 64509
// result := [ ] ;
64261: LD_ADDR_VAR 0 2
64265: PUSH
64266: EMPTY
64267: ST_TO_ADDR
// for i in tmp do
64268: LD_ADDR_VAR 0 3
64272: PUSH
64273: LD_VAR 0 6
64277: PUSH
64278: FOR_IN
64279: IFFALSE 64350
// begin t := UnitsInside ( i ) ;
64281: LD_ADDR_VAR 0 4
64285: PUSH
64286: LD_VAR 0 3
64290: PPUSH
64291: CALL_OW 313
64295: ST_TO_ADDR
// if t then
64296: LD_VAR 0 4
64300: IFFALSE 64348
// for j in t do
64302: LD_ADDR_VAR 0 7
64306: PUSH
64307: LD_VAR 0 4
64311: PUSH
64312: FOR_IN
64313: IFFALSE 64346
// result := Replace ( result , result + 1 , j ) ;
64315: LD_ADDR_VAR 0 2
64319: PUSH
64320: LD_VAR 0 2
64324: PPUSH
64325: LD_VAR 0 2
64329: PUSH
64330: LD_INT 1
64332: PLUS
64333: PPUSH
64334: LD_VAR 0 7
64338: PPUSH
64339: CALL_OW 1
64343: ST_TO_ADDR
64344: GO 64312
64346: POP
64347: POP
// end ;
64348: GO 64278
64350: POP
64351: POP
// if not result then
64352: LD_VAR 0 2
64356: NOT
64357: IFFALSE 64361
// exit ;
64359: GO 64509
// mech := result [ 1 ] ;
64361: LD_ADDR_VAR 0 5
64365: PUSH
64366: LD_VAR 0 2
64370: PUSH
64371: LD_INT 1
64373: ARRAY
64374: ST_TO_ADDR
// if result > 1 then
64375: LD_VAR 0 2
64379: PUSH
64380: LD_INT 1
64382: GREATER
64383: IFFALSE 64495
// begin for i = 2 to result do
64385: LD_ADDR_VAR 0 3
64389: PUSH
64390: DOUBLE
64391: LD_INT 2
64393: DEC
64394: ST_TO_ADDR
64395: LD_VAR 0 2
64399: PUSH
64400: FOR_TO
64401: IFFALSE 64493
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
64403: LD_ADDR_VAR 0 4
64407: PUSH
64408: LD_VAR 0 2
64412: PUSH
64413: LD_VAR 0 3
64417: ARRAY
64418: PPUSH
64419: LD_INT 3
64421: PPUSH
64422: CALL_OW 259
64426: PUSH
64427: LD_VAR 0 2
64431: PUSH
64432: LD_VAR 0 3
64436: ARRAY
64437: PPUSH
64438: CALL_OW 432
64442: MINUS
64443: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
64444: LD_VAR 0 4
64448: PUSH
64449: LD_VAR 0 5
64453: PPUSH
64454: LD_INT 3
64456: PPUSH
64457: CALL_OW 259
64461: PUSH
64462: LD_VAR 0 5
64466: PPUSH
64467: CALL_OW 432
64471: MINUS
64472: GREATEREQUAL
64473: IFFALSE 64491
// mech := result [ i ] ;
64475: LD_ADDR_VAR 0 5
64479: PUSH
64480: LD_VAR 0 2
64484: PUSH
64485: LD_VAR 0 3
64489: ARRAY
64490: ST_TO_ADDR
// end ;
64491: GO 64400
64493: POP
64494: POP
// end ; ComLinkTo ( vehicle , mech ) ;
64495: LD_VAR 0 1
64499: PPUSH
64500: LD_VAR 0 5
64504: PPUSH
64505: CALL_OW 135
// end ;
64509: LD_VAR 0 2
64513: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
64514: LD_INT 0
64516: PPUSH
64517: PPUSH
64518: PPUSH
64519: PPUSH
64520: PPUSH
64521: PPUSH
64522: PPUSH
64523: PPUSH
64524: PPUSH
64525: PPUSH
64526: PPUSH
64527: PPUSH
64528: PPUSH
// result := [ ] ;
64529: LD_ADDR_VAR 0 7
64533: PUSH
64534: EMPTY
64535: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
64536: LD_VAR 0 1
64540: PPUSH
64541: CALL_OW 266
64545: PUSH
64546: LD_INT 0
64548: PUSH
64549: LD_INT 1
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: IN
64556: NOT
64557: IFFALSE 64561
// exit ;
64559: GO 66201
// if name then
64561: LD_VAR 0 3
64565: IFFALSE 64581
// SetBName ( base_dep , name ) ;
64567: LD_VAR 0 1
64571: PPUSH
64572: LD_VAR 0 3
64576: PPUSH
64577: CALL_OW 500
// base := GetBase ( base_dep ) ;
64581: LD_ADDR_VAR 0 15
64585: PUSH
64586: LD_VAR 0 1
64590: PPUSH
64591: CALL_OW 274
64595: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
64596: LD_ADDR_VAR 0 16
64600: PUSH
64601: LD_VAR 0 1
64605: PPUSH
64606: CALL_OW 255
64610: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
64611: LD_ADDR_VAR 0 17
64615: PUSH
64616: LD_VAR 0 1
64620: PPUSH
64621: CALL_OW 248
64625: ST_TO_ADDR
// if sources then
64626: LD_VAR 0 5
64630: IFFALSE 64677
// for i = 1 to 3 do
64632: LD_ADDR_VAR 0 8
64636: PUSH
64637: DOUBLE
64638: LD_INT 1
64640: DEC
64641: ST_TO_ADDR
64642: LD_INT 3
64644: PUSH
64645: FOR_TO
64646: IFFALSE 64675
// AddResourceType ( base , i , sources [ i ] ) ;
64648: LD_VAR 0 15
64652: PPUSH
64653: LD_VAR 0 8
64657: PPUSH
64658: LD_VAR 0 5
64662: PUSH
64663: LD_VAR 0 8
64667: ARRAY
64668: PPUSH
64669: CALL_OW 276
64673: GO 64645
64675: POP
64676: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
64677: LD_ADDR_VAR 0 18
64681: PUSH
64682: LD_VAR 0 15
64686: PPUSH
64687: LD_VAR 0 2
64691: PPUSH
64692: LD_INT 1
64694: PPUSH
64695: CALL 63936 0 3
64699: ST_TO_ADDR
// InitHc ;
64700: CALL_OW 19
// InitUc ;
64704: CALL_OW 18
// uc_side := side ;
64708: LD_ADDR_OWVAR 20
64712: PUSH
64713: LD_VAR 0 16
64717: ST_TO_ADDR
// uc_nation := nation ;
64718: LD_ADDR_OWVAR 21
64722: PUSH
64723: LD_VAR 0 17
64727: ST_TO_ADDR
// if buildings then
64728: LD_VAR 0 18
64732: IFFALSE 66060
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
64734: LD_ADDR_VAR 0 19
64738: PUSH
64739: LD_VAR 0 18
64743: PPUSH
64744: LD_INT 2
64746: PUSH
64747: LD_INT 30
64749: PUSH
64750: LD_INT 29
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 30
64759: PUSH
64760: LD_INT 30
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: LIST
64771: PPUSH
64772: CALL_OW 72
64776: ST_TO_ADDR
// if tmp then
64777: LD_VAR 0 19
64781: IFFALSE 64829
// for i in tmp do
64783: LD_ADDR_VAR 0 8
64787: PUSH
64788: LD_VAR 0 19
64792: PUSH
64793: FOR_IN
64794: IFFALSE 64827
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
64796: LD_VAR 0 8
64800: PPUSH
64801: CALL_OW 250
64805: PPUSH
64806: LD_VAR 0 8
64810: PPUSH
64811: CALL_OW 251
64815: PPUSH
64816: LD_VAR 0 16
64820: PPUSH
64821: CALL_OW 441
64825: GO 64793
64827: POP
64828: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
64829: LD_VAR 0 18
64833: PPUSH
64834: LD_INT 2
64836: PUSH
64837: LD_INT 30
64839: PUSH
64840: LD_INT 32
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 30
64849: PUSH
64850: LD_INT 33
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: LIST
64861: PPUSH
64862: CALL_OW 72
64866: IFFALSE 64954
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
64868: LD_ADDR_VAR 0 8
64872: PUSH
64873: LD_VAR 0 18
64877: PPUSH
64878: LD_INT 2
64880: PUSH
64881: LD_INT 30
64883: PUSH
64884: LD_INT 32
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 30
64893: PUSH
64894: LD_INT 33
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: LIST
64905: PPUSH
64906: CALL_OW 72
64910: PUSH
64911: FOR_IN
64912: IFFALSE 64952
// begin if not GetBWeapon ( i ) then
64914: LD_VAR 0 8
64918: PPUSH
64919: CALL_OW 269
64923: NOT
64924: IFFALSE 64950
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
64926: LD_VAR 0 8
64930: PPUSH
64931: LD_VAR 0 8
64935: PPUSH
64936: LD_VAR 0 2
64940: PPUSH
64941: CALL 66206 0 2
64945: PPUSH
64946: CALL_OW 431
// end ;
64950: GO 64911
64952: POP
64953: POP
// end ; for i = 1 to personel do
64954: LD_ADDR_VAR 0 8
64958: PUSH
64959: DOUBLE
64960: LD_INT 1
64962: DEC
64963: ST_TO_ADDR
64964: LD_VAR 0 6
64968: PUSH
64969: FOR_TO
64970: IFFALSE 66040
// begin if i > 4 then
64972: LD_VAR 0 8
64976: PUSH
64977: LD_INT 4
64979: GREATER
64980: IFFALSE 64984
// break ;
64982: GO 66040
// case i of 1 :
64984: LD_VAR 0 8
64988: PUSH
64989: LD_INT 1
64991: DOUBLE
64992: EQUAL
64993: IFTRUE 64997
64995: GO 65077
64997: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
64998: LD_ADDR_VAR 0 12
65002: PUSH
65003: LD_VAR 0 18
65007: PPUSH
65008: LD_INT 22
65010: PUSH
65011: LD_VAR 0 16
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 58
65022: PUSH
65023: EMPTY
65024: LIST
65025: PUSH
65026: LD_INT 2
65028: PUSH
65029: LD_INT 30
65031: PUSH
65032: LD_INT 32
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 30
65041: PUSH
65042: LD_INT 4
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 30
65051: PUSH
65052: LD_INT 5
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: LIST
65069: PPUSH
65070: CALL_OW 72
65074: ST_TO_ADDR
65075: GO 65299
65077: LD_INT 2
65079: DOUBLE
65080: EQUAL
65081: IFTRUE 65085
65083: GO 65147
65085: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
65086: LD_ADDR_VAR 0 12
65090: PUSH
65091: LD_VAR 0 18
65095: PPUSH
65096: LD_INT 22
65098: PUSH
65099: LD_VAR 0 16
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 2
65110: PUSH
65111: LD_INT 30
65113: PUSH
65114: LD_INT 0
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 30
65123: PUSH
65124: LD_INT 1
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: LIST
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PPUSH
65140: CALL_OW 72
65144: ST_TO_ADDR
65145: GO 65299
65147: LD_INT 3
65149: DOUBLE
65150: EQUAL
65151: IFTRUE 65155
65153: GO 65217
65155: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
65156: LD_ADDR_VAR 0 12
65160: PUSH
65161: LD_VAR 0 18
65165: PPUSH
65166: LD_INT 22
65168: PUSH
65169: LD_VAR 0 16
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 2
65180: PUSH
65181: LD_INT 30
65183: PUSH
65184: LD_INT 2
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 30
65193: PUSH
65194: LD_INT 3
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: LIST
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PPUSH
65210: CALL_OW 72
65214: ST_TO_ADDR
65215: GO 65299
65217: LD_INT 4
65219: DOUBLE
65220: EQUAL
65221: IFTRUE 65225
65223: GO 65298
65225: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
65226: LD_ADDR_VAR 0 12
65230: PUSH
65231: LD_VAR 0 18
65235: PPUSH
65236: LD_INT 22
65238: PUSH
65239: LD_VAR 0 16
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 2
65250: PUSH
65251: LD_INT 30
65253: PUSH
65254: LD_INT 6
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 30
65263: PUSH
65264: LD_INT 7
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 30
65273: PUSH
65274: LD_INT 8
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PPUSH
65291: CALL_OW 72
65295: ST_TO_ADDR
65296: GO 65299
65298: POP
// if i = 1 then
65299: LD_VAR 0 8
65303: PUSH
65304: LD_INT 1
65306: EQUAL
65307: IFFALSE 65418
// begin tmp := [ ] ;
65309: LD_ADDR_VAR 0 19
65313: PUSH
65314: EMPTY
65315: ST_TO_ADDR
// for j in f do
65316: LD_ADDR_VAR 0 9
65320: PUSH
65321: LD_VAR 0 12
65325: PUSH
65326: FOR_IN
65327: IFFALSE 65400
// if GetBType ( j ) = b_bunker then
65329: LD_VAR 0 9
65333: PPUSH
65334: CALL_OW 266
65338: PUSH
65339: LD_INT 32
65341: EQUAL
65342: IFFALSE 65369
// tmp := Insert ( tmp , 1 , j ) else
65344: LD_ADDR_VAR 0 19
65348: PUSH
65349: LD_VAR 0 19
65353: PPUSH
65354: LD_INT 1
65356: PPUSH
65357: LD_VAR 0 9
65361: PPUSH
65362: CALL_OW 2
65366: ST_TO_ADDR
65367: GO 65398
// tmp := Insert ( tmp , tmp + 1 , j ) ;
65369: LD_ADDR_VAR 0 19
65373: PUSH
65374: LD_VAR 0 19
65378: PPUSH
65379: LD_VAR 0 19
65383: PUSH
65384: LD_INT 1
65386: PLUS
65387: PPUSH
65388: LD_VAR 0 9
65392: PPUSH
65393: CALL_OW 2
65397: ST_TO_ADDR
65398: GO 65326
65400: POP
65401: POP
// if tmp then
65402: LD_VAR 0 19
65406: IFFALSE 65418
// f := tmp ;
65408: LD_ADDR_VAR 0 12
65412: PUSH
65413: LD_VAR 0 19
65417: ST_TO_ADDR
// end ; x := personel [ i ] ;
65418: LD_ADDR_VAR 0 13
65422: PUSH
65423: LD_VAR 0 6
65427: PUSH
65428: LD_VAR 0 8
65432: ARRAY
65433: ST_TO_ADDR
// if x = - 1 then
65434: LD_VAR 0 13
65438: PUSH
65439: LD_INT 1
65441: NEG
65442: EQUAL
65443: IFFALSE 65654
// begin for j in f do
65445: LD_ADDR_VAR 0 9
65449: PUSH
65450: LD_VAR 0 12
65454: PUSH
65455: FOR_IN
65456: IFFALSE 65650
// repeat InitHc ;
65458: CALL_OW 19
// if GetBType ( j ) = b_barracks then
65462: LD_VAR 0 9
65466: PPUSH
65467: CALL_OW 266
65471: PUSH
65472: LD_INT 5
65474: EQUAL
65475: IFFALSE 65545
// begin if UnitsInside ( j ) < 3 then
65477: LD_VAR 0 9
65481: PPUSH
65482: CALL_OW 313
65486: PUSH
65487: LD_INT 3
65489: LESS
65490: IFFALSE 65526
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
65492: LD_INT 0
65494: PPUSH
65495: LD_INT 5
65497: PUSH
65498: LD_INT 8
65500: PUSH
65501: LD_INT 9
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: LIST
65508: PUSH
65509: LD_VAR 0 17
65513: ARRAY
65514: PPUSH
65515: LD_VAR 0 4
65519: PPUSH
65520: CALL_OW 380
65524: GO 65543
// PrepareHuman ( false , i , skill ) ;
65526: LD_INT 0
65528: PPUSH
65529: LD_VAR 0 8
65533: PPUSH
65534: LD_VAR 0 4
65538: PPUSH
65539: CALL_OW 380
// end else
65543: GO 65562
// PrepareHuman ( false , i , skill ) ;
65545: LD_INT 0
65547: PPUSH
65548: LD_VAR 0 8
65552: PPUSH
65553: LD_VAR 0 4
65557: PPUSH
65558: CALL_OW 380
// un := CreateHuman ;
65562: LD_ADDR_VAR 0 14
65566: PUSH
65567: CALL_OW 44
65571: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
65572: LD_ADDR_VAR 0 7
65576: PUSH
65577: LD_VAR 0 7
65581: PPUSH
65582: LD_INT 1
65584: PPUSH
65585: LD_VAR 0 14
65589: PPUSH
65590: CALL_OW 2
65594: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
65595: LD_VAR 0 14
65599: PPUSH
65600: LD_VAR 0 9
65604: PPUSH
65605: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
65609: LD_VAR 0 9
65613: PPUSH
65614: CALL_OW 313
65618: PUSH
65619: LD_INT 6
65621: EQUAL
65622: IFTRUE 65646
65624: PUSH
65625: LD_VAR 0 9
65629: PPUSH
65630: CALL_OW 266
65634: PUSH
65635: LD_INT 32
65637: PUSH
65638: LD_INT 31
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: IN
65645: OR
65646: IFFALSE 65458
65648: GO 65455
65650: POP
65651: POP
// end else
65652: GO 66038
// for j = 1 to x do
65654: LD_ADDR_VAR 0 9
65658: PUSH
65659: DOUBLE
65660: LD_INT 1
65662: DEC
65663: ST_TO_ADDR
65664: LD_VAR 0 13
65668: PUSH
65669: FOR_TO
65670: IFFALSE 66036
// begin InitHc ;
65672: CALL_OW 19
// if not f then
65676: LD_VAR 0 12
65680: NOT
65681: IFFALSE 65770
// begin PrepareHuman ( false , i , skill ) ;
65683: LD_INT 0
65685: PPUSH
65686: LD_VAR 0 8
65690: PPUSH
65691: LD_VAR 0 4
65695: PPUSH
65696: CALL_OW 380
// un := CreateHuman ;
65700: LD_ADDR_VAR 0 14
65704: PUSH
65705: CALL_OW 44
65709: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
65710: LD_ADDR_VAR 0 7
65714: PUSH
65715: LD_VAR 0 7
65719: PPUSH
65720: LD_INT 1
65722: PPUSH
65723: LD_VAR 0 14
65727: PPUSH
65728: CALL_OW 2
65732: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
65733: LD_VAR 0 14
65737: PPUSH
65738: LD_VAR 0 1
65742: PPUSH
65743: CALL_OW 250
65747: PPUSH
65748: LD_VAR 0 1
65752: PPUSH
65753: CALL_OW 251
65757: PPUSH
65758: LD_INT 10
65760: PPUSH
65761: LD_INT 0
65763: PPUSH
65764: CALL_OW 50
// continue ;
65768: GO 65669
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
65770: LD_VAR 0 12
65774: PUSH
65775: LD_INT 1
65777: ARRAY
65778: PPUSH
65779: CALL_OW 313
65783: IFFALSE 65811
65785: PUSH
65786: LD_VAR 0 12
65790: PUSH
65791: LD_INT 1
65793: ARRAY
65794: PPUSH
65795: CALL_OW 266
65799: PUSH
65800: LD_INT 32
65802: PUSH
65803: LD_INT 31
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: IN
65810: AND
65811: IFTRUE 65832
65813: PUSH
65814: LD_VAR 0 12
65818: PUSH
65819: LD_INT 1
65821: ARRAY
65822: PPUSH
65823: CALL_OW 313
65827: PUSH
65828: LD_INT 6
65830: EQUAL
65831: OR
65832: IFFALSE 65852
// f := Delete ( f , 1 ) ;
65834: LD_ADDR_VAR 0 12
65838: PUSH
65839: LD_VAR 0 12
65843: PPUSH
65844: LD_INT 1
65846: PPUSH
65847: CALL_OW 3
65851: ST_TO_ADDR
// if not f then
65852: LD_VAR 0 12
65856: NOT
65857: IFFALSE 65875
// begin x := x + 2 ;
65859: LD_ADDR_VAR 0 13
65863: PUSH
65864: LD_VAR 0 13
65868: PUSH
65869: LD_INT 2
65871: PLUS
65872: ST_TO_ADDR
// continue ;
65873: GO 65669
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
65875: LD_VAR 0 12
65879: PUSH
65880: LD_INT 1
65882: ARRAY
65883: PPUSH
65884: CALL_OW 266
65888: PUSH
65889: LD_INT 5
65891: EQUAL
65892: IFFALSE 65966
// begin if UnitsInside ( f [ 1 ] ) < 3 then
65894: LD_VAR 0 12
65898: PUSH
65899: LD_INT 1
65901: ARRAY
65902: PPUSH
65903: CALL_OW 313
65907: PUSH
65908: LD_INT 3
65910: LESS
65911: IFFALSE 65947
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
65913: LD_INT 0
65915: PPUSH
65916: LD_INT 5
65918: PUSH
65919: LD_INT 8
65921: PUSH
65922: LD_INT 9
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: LIST
65929: PUSH
65930: LD_VAR 0 17
65934: ARRAY
65935: PPUSH
65936: LD_VAR 0 4
65940: PPUSH
65941: CALL_OW 380
65945: GO 65964
// PrepareHuman ( false , i , skill ) ;
65947: LD_INT 0
65949: PPUSH
65950: LD_VAR 0 8
65954: PPUSH
65955: LD_VAR 0 4
65959: PPUSH
65960: CALL_OW 380
// end else
65964: GO 65983
// PrepareHuman ( false , i , skill ) ;
65966: LD_INT 0
65968: PPUSH
65969: LD_VAR 0 8
65973: PPUSH
65974: LD_VAR 0 4
65978: PPUSH
65979: CALL_OW 380
// un := CreateHuman ;
65983: LD_ADDR_VAR 0 14
65987: PUSH
65988: CALL_OW 44
65992: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
65993: LD_ADDR_VAR 0 7
65997: PUSH
65998: LD_VAR 0 7
66002: PPUSH
66003: LD_INT 1
66005: PPUSH
66006: LD_VAR 0 14
66010: PPUSH
66011: CALL_OW 2
66015: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
66016: LD_VAR 0 14
66020: PPUSH
66021: LD_VAR 0 12
66025: PUSH
66026: LD_INT 1
66028: ARRAY
66029: PPUSH
66030: CALL_OW 52
// end ;
66034: GO 65669
66036: POP
66037: POP
// end ;
66038: GO 64969
66040: POP
66041: POP
// result := result ^ buildings ;
66042: LD_ADDR_VAR 0 7
66046: PUSH
66047: LD_VAR 0 7
66051: PUSH
66052: LD_VAR 0 18
66056: ADD
66057: ST_TO_ADDR
// end else
66058: GO 66201
// begin for i = 1 to personel do
66060: LD_ADDR_VAR 0 8
66064: PUSH
66065: DOUBLE
66066: LD_INT 1
66068: DEC
66069: ST_TO_ADDR
66070: LD_VAR 0 6
66074: PUSH
66075: FOR_TO
66076: IFFALSE 66199
// begin if i > 4 then
66078: LD_VAR 0 8
66082: PUSH
66083: LD_INT 4
66085: GREATER
66086: IFFALSE 66090
// break ;
66088: GO 66199
// x := personel [ i ] ;
66090: LD_ADDR_VAR 0 13
66094: PUSH
66095: LD_VAR 0 6
66099: PUSH
66100: LD_VAR 0 8
66104: ARRAY
66105: ST_TO_ADDR
// if x = - 1 then
66106: LD_VAR 0 13
66110: PUSH
66111: LD_INT 1
66113: NEG
66114: EQUAL
66115: IFFALSE 66119
// continue ;
66117: GO 66075
// PrepareHuman ( false , i , skill ) ;
66119: LD_INT 0
66121: PPUSH
66122: LD_VAR 0 8
66126: PPUSH
66127: LD_VAR 0 4
66131: PPUSH
66132: CALL_OW 380
// un := CreateHuman ;
66136: LD_ADDR_VAR 0 14
66140: PUSH
66141: CALL_OW 44
66145: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
66146: LD_VAR 0 14
66150: PPUSH
66151: LD_VAR 0 1
66155: PPUSH
66156: CALL_OW 250
66160: PPUSH
66161: LD_VAR 0 1
66165: PPUSH
66166: CALL_OW 251
66170: PPUSH
66171: LD_INT 10
66173: PPUSH
66174: LD_INT 0
66176: PPUSH
66177: CALL_OW 50
// result := result ^ un ;
66181: LD_ADDR_VAR 0 7
66185: PUSH
66186: LD_VAR 0 7
66190: PUSH
66191: LD_VAR 0 14
66195: ADD
66196: ST_TO_ADDR
// end ;
66197: GO 66075
66199: POP
66200: POP
// end ; end ;
66201: LD_VAR 0 7
66205: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
66206: LD_INT 0
66208: PPUSH
66209: PPUSH
66210: PPUSH
66211: PPUSH
66212: PPUSH
66213: PPUSH
66214: PPUSH
66215: PPUSH
66216: PPUSH
66217: PPUSH
66218: PPUSH
66219: PPUSH
66220: PPUSH
66221: PPUSH
66222: PPUSH
66223: PPUSH
// result := false ;
66224: LD_ADDR_VAR 0 3
66228: PUSH
66229: LD_INT 0
66231: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
66232: LD_VAR 0 1
66236: NOT
66237: IFTRUE 66262
66239: PUSH
66240: LD_VAR 0 1
66244: PPUSH
66245: CALL_OW 266
66249: PUSH
66250: LD_INT 32
66252: PUSH
66253: LD_INT 33
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: IN
66260: NOT
66261: OR
66262: IFFALSE 66266
// exit ;
66264: GO 67401
// nat := GetNation ( tower ) ;
66266: LD_ADDR_VAR 0 12
66270: PUSH
66271: LD_VAR 0 1
66275: PPUSH
66276: CALL_OW 248
66280: ST_TO_ADDR
// side := GetSide ( tower ) ;
66281: LD_ADDR_VAR 0 16
66285: PUSH
66286: LD_VAR 0 1
66290: PPUSH
66291: CALL_OW 255
66295: ST_TO_ADDR
// x := GetX ( tower ) ;
66296: LD_ADDR_VAR 0 10
66300: PUSH
66301: LD_VAR 0 1
66305: PPUSH
66306: CALL_OW 250
66310: ST_TO_ADDR
// y := GetY ( tower ) ;
66311: LD_ADDR_VAR 0 11
66315: PUSH
66316: LD_VAR 0 1
66320: PPUSH
66321: CALL_OW 251
66325: ST_TO_ADDR
// if not x or not y then
66326: LD_VAR 0 10
66330: NOT
66331: IFTRUE 66340
66333: PUSH
66334: LD_VAR 0 11
66338: NOT
66339: OR
66340: IFFALSE 66344
// exit ;
66342: GO 67401
// weapon := 0 ;
66344: LD_ADDR_VAR 0 18
66348: PUSH
66349: LD_INT 0
66351: ST_TO_ADDR
// fac_list := [ ] ;
66352: LD_ADDR_VAR 0 17
66356: PUSH
66357: EMPTY
66358: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
66359: LD_ADDR_VAR 0 6
66363: PUSH
66364: LD_VAR 0 1
66368: PPUSH
66369: CALL_OW 274
66373: PPUSH
66374: LD_VAR 0 2
66378: PPUSH
66379: LD_INT 0
66381: PPUSH
66382: CALL 63936 0 3
66386: PPUSH
66387: LD_INT 30
66389: PUSH
66390: LD_INT 3
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PPUSH
66397: CALL_OW 72
66401: ST_TO_ADDR
// if not factories then
66402: LD_VAR 0 6
66406: NOT
66407: IFFALSE 66411
// exit ;
66409: GO 67401
// for i in factories do
66411: LD_ADDR_VAR 0 8
66415: PUSH
66416: LD_VAR 0 6
66420: PUSH
66421: FOR_IN
66422: IFFALSE 66447
// fac_list := fac_list union AvailableWeaponList ( i ) ;
66424: LD_ADDR_VAR 0 17
66428: PUSH
66429: LD_VAR 0 17
66433: PUSH
66434: LD_VAR 0 8
66438: PPUSH
66439: CALL_OW 478
66443: UNION
66444: ST_TO_ADDR
66445: GO 66421
66447: POP
66448: POP
// if not fac_list then
66449: LD_VAR 0 17
66453: NOT
66454: IFFALSE 66458
// exit ;
66456: GO 67401
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
66458: LD_ADDR_VAR 0 5
66462: PUSH
66463: LD_INT 4
66465: PUSH
66466: LD_INT 5
66468: PUSH
66469: LD_INT 9
66471: PUSH
66472: LD_INT 10
66474: PUSH
66475: LD_INT 6
66477: PUSH
66478: LD_INT 7
66480: PUSH
66481: LD_INT 11
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 27
66495: PUSH
66496: LD_INT 28
66498: PUSH
66499: LD_INT 26
66501: PUSH
66502: LD_INT 30
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 43
66513: PUSH
66514: LD_INT 44
66516: PUSH
66517: LD_INT 46
66519: PUSH
66520: LD_INT 45
66522: PUSH
66523: LD_INT 47
66525: PUSH
66526: LD_INT 49
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: LIST
66541: PUSH
66542: LD_VAR 0 12
66546: ARRAY
66547: ST_TO_ADDR
// list := list isect fac_list ;
66548: LD_ADDR_VAR 0 5
66552: PUSH
66553: LD_VAR 0 5
66557: PUSH
66558: LD_VAR 0 17
66562: ISECT
66563: ST_TO_ADDR
// if not list then
66564: LD_VAR 0 5
66568: NOT
66569: IFFALSE 66573
// exit ;
66571: GO 67401
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
66573: LD_VAR 0 12
66577: PUSH
66578: LD_INT 3
66580: EQUAL
66581: IFFALSE 66593
66583: PUSH
66584: LD_INT 49
66586: PUSH
66587: LD_VAR 0 5
66591: IN
66592: AND
66593: IFFALSE 66613
66595: PUSH
66596: LD_INT 31
66598: PPUSH
66599: LD_VAR 0 16
66603: PPUSH
66604: CALL_OW 321
66608: PUSH
66609: LD_INT 2
66611: EQUAL
66612: AND
66613: IFFALSE 66673
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
66615: LD_INT 22
66617: PUSH
66618: LD_VAR 0 16
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 35
66629: PUSH
66630: LD_INT 49
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 91
66639: PUSH
66640: LD_VAR 0 1
66644: PUSH
66645: LD_INT 10
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: LIST
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: LIST
66657: PPUSH
66658: CALL_OW 69
66662: NOT
66663: IFFALSE 66673
// weapon := ru_time_lapser ;
66665: LD_ADDR_VAR 0 18
66669: PUSH
66670: LD_INT 49
66672: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
66673: LD_VAR 0 12
66677: PUSH
66678: LD_INT 1
66680: PUSH
66681: LD_INT 2
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: IN
66688: IFFALSE 66712
66690: PUSH
66691: LD_INT 11
66693: PUSH
66694: LD_VAR 0 5
66698: IN
66699: IFTRUE 66711
66701: PUSH
66702: LD_INT 30
66704: PUSH
66705: LD_VAR 0 5
66709: IN
66710: OR
66711: AND
66712: IFFALSE 66732
66714: PUSH
66715: LD_INT 6
66717: PPUSH
66718: LD_VAR 0 16
66722: PPUSH
66723: CALL_OW 321
66727: PUSH
66728: LD_INT 2
66730: EQUAL
66731: AND
66732: IFFALSE 66899
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
66734: LD_INT 22
66736: PUSH
66737: LD_VAR 0 16
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 2
66748: PUSH
66749: LD_INT 35
66751: PUSH
66752: LD_INT 11
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 35
66761: PUSH
66762: LD_INT 30
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 91
66776: PUSH
66777: LD_VAR 0 1
66781: PUSH
66782: LD_INT 18
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: LIST
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: LIST
66794: PPUSH
66795: CALL_OW 69
66799: NOT
66800: IFFALSE 66876
66802: PUSH
66803: LD_INT 22
66805: PUSH
66806: LD_VAR 0 16
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: LD_INT 2
66817: PUSH
66818: LD_INT 30
66820: PUSH
66821: LD_INT 32
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: LD_INT 30
66830: PUSH
66831: LD_INT 33
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 91
66845: PUSH
66846: LD_VAR 0 1
66850: PUSH
66851: LD_INT 12
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: LIST
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: LIST
66863: PUSH
66864: EMPTY
66865: LIST
66866: PPUSH
66867: CALL_OW 69
66871: PUSH
66872: LD_INT 2
66874: GREATER
66875: AND
66876: IFFALSE 66899
// weapon := [ us_radar , ar_radar ] [ nat ] ;
66878: LD_ADDR_VAR 0 18
66882: PUSH
66883: LD_INT 11
66885: PUSH
66886: LD_INT 30
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_VAR 0 12
66897: ARRAY
66898: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
66899: LD_VAR 0 18
66903: NOT
66904: IFFALSE 66924
66906: PUSH
66907: LD_INT 40
66909: PPUSH
66910: LD_VAR 0 16
66914: PPUSH
66915: CALL_OW 321
66919: PUSH
66920: LD_INT 2
66922: EQUAL
66923: AND
66924: IFFALSE 66960
66926: PUSH
66927: LD_INT 7
66929: PUSH
66930: LD_VAR 0 5
66934: IN
66935: IFTRUE 66947
66937: PUSH
66938: LD_INT 28
66940: PUSH
66941: LD_VAR 0 5
66945: IN
66946: OR
66947: IFTRUE 66959
66949: PUSH
66950: LD_INT 45
66952: PUSH
66953: LD_VAR 0 5
66957: IN
66958: OR
66959: AND
66960: IFFALSE 67214
// begin hex := GetHexInfo ( x , y ) ;
66962: LD_ADDR_VAR 0 4
66966: PUSH
66967: LD_VAR 0 10
66971: PPUSH
66972: LD_VAR 0 11
66976: PPUSH
66977: CALL_OW 546
66981: ST_TO_ADDR
// if hex [ 1 ] then
66982: LD_VAR 0 4
66986: PUSH
66987: LD_INT 1
66989: ARRAY
66990: IFFALSE 66994
// exit ;
66992: GO 67401
// height := hex [ 2 ] ;
66994: LD_ADDR_VAR 0 15
66998: PUSH
66999: LD_VAR 0 4
67003: PUSH
67004: LD_INT 2
67006: ARRAY
67007: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
67008: LD_ADDR_VAR 0 14
67012: PUSH
67013: LD_INT 0
67015: PUSH
67016: LD_INT 2
67018: PUSH
67019: LD_INT 3
67021: PUSH
67022: LD_INT 5
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: ST_TO_ADDR
// for i in tmp do
67031: LD_ADDR_VAR 0 8
67035: PUSH
67036: LD_VAR 0 14
67040: PUSH
67041: FOR_IN
67042: IFFALSE 67212
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
67044: LD_ADDR_VAR 0 9
67048: PUSH
67049: LD_VAR 0 10
67053: PPUSH
67054: LD_VAR 0 8
67058: PPUSH
67059: LD_INT 5
67061: PPUSH
67062: CALL_OW 272
67066: PUSH
67067: LD_VAR 0 11
67071: PPUSH
67072: LD_VAR 0 8
67076: PPUSH
67077: LD_INT 5
67079: PPUSH
67080: CALL_OW 273
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
67089: LD_VAR 0 9
67093: PUSH
67094: LD_INT 1
67096: ARRAY
67097: PPUSH
67098: LD_VAR 0 9
67102: PUSH
67103: LD_INT 2
67105: ARRAY
67106: PPUSH
67107: CALL_OW 488
67111: IFFALSE 67210
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
67113: LD_ADDR_VAR 0 4
67117: PUSH
67118: LD_VAR 0 9
67122: PUSH
67123: LD_INT 1
67125: ARRAY
67126: PPUSH
67127: LD_VAR 0 9
67131: PUSH
67132: LD_INT 2
67134: ARRAY
67135: PPUSH
67136: CALL_OW 546
67140: ST_TO_ADDR
// if hex [ 1 ] then
67141: LD_VAR 0 4
67145: PUSH
67146: LD_INT 1
67148: ARRAY
67149: IFFALSE 67153
// continue ;
67151: GO 67041
// h := hex [ 2 ] ;
67153: LD_ADDR_VAR 0 13
67157: PUSH
67158: LD_VAR 0 4
67162: PUSH
67163: LD_INT 2
67165: ARRAY
67166: ST_TO_ADDR
// if h + 7 < height then
67167: LD_VAR 0 13
67171: PUSH
67172: LD_INT 7
67174: PLUS
67175: PUSH
67176: LD_VAR 0 15
67180: LESS
67181: IFFALSE 67210
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
67183: LD_ADDR_VAR 0 18
67187: PUSH
67188: LD_INT 7
67190: PUSH
67191: LD_INT 28
67193: PUSH
67194: LD_INT 45
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: LIST
67201: PUSH
67202: LD_VAR 0 12
67206: ARRAY
67207: ST_TO_ADDR
// break ;
67208: GO 67212
// end ; end ; end ;
67210: GO 67041
67212: POP
67213: POP
// end ; if not weapon then
67214: LD_VAR 0 18
67218: NOT
67219: IFFALSE 67279
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
67221: LD_ADDR_VAR 0 5
67225: PUSH
67226: LD_VAR 0 5
67230: PUSH
67231: LD_INT 11
67233: PUSH
67234: LD_INT 30
67236: PUSH
67237: LD_INT 49
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: LIST
67244: DIFF
67245: ST_TO_ADDR
// if not list then
67246: LD_VAR 0 5
67250: NOT
67251: IFFALSE 67255
// exit ;
67253: GO 67401
// weapon := list [ rand ( 1 , list ) ] ;
67255: LD_ADDR_VAR 0 18
67259: PUSH
67260: LD_VAR 0 5
67264: PUSH
67265: LD_INT 1
67267: PPUSH
67268: LD_VAR 0 5
67272: PPUSH
67273: CALL_OW 12
67277: ARRAY
67278: ST_TO_ADDR
// end ; if weapon then
67279: LD_VAR 0 18
67283: IFFALSE 67401
// begin tmp := CostOfWeapon ( weapon ) ;
67285: LD_ADDR_VAR 0 14
67289: PUSH
67290: LD_VAR 0 18
67294: PPUSH
67295: CALL_OW 451
67299: ST_TO_ADDR
// j := GetBase ( tower ) ;
67300: LD_ADDR_VAR 0 9
67304: PUSH
67305: LD_VAR 0 1
67309: PPUSH
67310: CALL_OW 274
67314: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
67315: LD_VAR 0 9
67319: PPUSH
67320: LD_INT 1
67322: PPUSH
67323: CALL_OW 275
67327: PUSH
67328: LD_VAR 0 14
67332: PUSH
67333: LD_INT 1
67335: ARRAY
67336: GREATEREQUAL
67337: IFFALSE 67363
67339: PUSH
67340: LD_VAR 0 9
67344: PPUSH
67345: LD_INT 2
67347: PPUSH
67348: CALL_OW 275
67352: PUSH
67353: LD_VAR 0 14
67357: PUSH
67358: LD_INT 2
67360: ARRAY
67361: GREATEREQUAL
67362: AND
67363: IFFALSE 67389
67365: PUSH
67366: LD_VAR 0 9
67370: PPUSH
67371: LD_INT 3
67373: PPUSH
67374: CALL_OW 275
67378: PUSH
67379: LD_VAR 0 14
67383: PUSH
67384: LD_INT 3
67386: ARRAY
67387: GREATEREQUAL
67388: AND
67389: IFFALSE 67401
// result := weapon ;
67391: LD_ADDR_VAR 0 3
67395: PUSH
67396: LD_VAR 0 18
67400: ST_TO_ADDR
// end ; end ;
67401: LD_VAR 0 3
67405: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
67406: LD_INT 0
67408: PPUSH
67409: PPUSH
// result := true ;
67410: LD_ADDR_VAR 0 3
67414: PUSH
67415: LD_INT 1
67417: ST_TO_ADDR
// if array1 = array2 then
67418: LD_VAR 0 1
67422: PUSH
67423: LD_VAR 0 2
67427: EQUAL
67428: IFFALSE 67488
// begin for i = 1 to array1 do
67430: LD_ADDR_VAR 0 4
67434: PUSH
67435: DOUBLE
67436: LD_INT 1
67438: DEC
67439: ST_TO_ADDR
67440: LD_VAR 0 1
67444: PUSH
67445: FOR_TO
67446: IFFALSE 67484
// if array1 [ i ] <> array2 [ i ] then
67448: LD_VAR 0 1
67452: PUSH
67453: LD_VAR 0 4
67457: ARRAY
67458: PUSH
67459: LD_VAR 0 2
67463: PUSH
67464: LD_VAR 0 4
67468: ARRAY
67469: NONEQUAL
67470: IFFALSE 67482
// begin result := false ;
67472: LD_ADDR_VAR 0 3
67476: PUSH
67477: LD_INT 0
67479: ST_TO_ADDR
// break ;
67480: GO 67484
// end ;
67482: GO 67445
67484: POP
67485: POP
// end else
67486: GO 67496
// result := false ;
67488: LD_ADDR_VAR 0 3
67492: PUSH
67493: LD_INT 0
67495: ST_TO_ADDR
// end ;
67496: LD_VAR 0 3
67500: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
67501: LD_INT 0
67503: PPUSH
67504: PPUSH
// if not array1 or not array2 then
67505: LD_VAR 0 1
67509: NOT
67510: IFTRUE 67519
67512: PUSH
67513: LD_VAR 0 2
67517: NOT
67518: OR
67519: IFFALSE 67523
// exit ;
67521: GO 67587
// result := true ;
67523: LD_ADDR_VAR 0 3
67527: PUSH
67528: LD_INT 1
67530: ST_TO_ADDR
// for i = 1 to array1 do
67531: LD_ADDR_VAR 0 4
67535: PUSH
67536: DOUBLE
67537: LD_INT 1
67539: DEC
67540: ST_TO_ADDR
67541: LD_VAR 0 1
67545: PUSH
67546: FOR_TO
67547: IFFALSE 67585
// if array1 [ i ] <> array2 [ i ] then
67549: LD_VAR 0 1
67553: PUSH
67554: LD_VAR 0 4
67558: ARRAY
67559: PUSH
67560: LD_VAR 0 2
67564: PUSH
67565: LD_VAR 0 4
67569: ARRAY
67570: NONEQUAL
67571: IFFALSE 67583
// begin result := false ;
67573: LD_ADDR_VAR 0 3
67577: PUSH
67578: LD_INT 0
67580: ST_TO_ADDR
// break ;
67581: GO 67585
// end ;
67583: GO 67546
67585: POP
67586: POP
// end ;
67587: LD_VAR 0 3
67591: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
67592: LD_INT 0
67594: PPUSH
67595: PPUSH
67596: PPUSH
// pom := GetBase ( fac ) ;
67597: LD_ADDR_VAR 0 5
67601: PUSH
67602: LD_VAR 0 1
67606: PPUSH
67607: CALL_OW 274
67611: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
67612: LD_ADDR_VAR 0 4
67616: PUSH
67617: LD_VAR 0 2
67621: PUSH
67622: LD_INT 1
67624: ARRAY
67625: PPUSH
67626: LD_VAR 0 2
67630: PUSH
67631: LD_INT 2
67633: ARRAY
67634: PPUSH
67635: LD_VAR 0 2
67639: PUSH
67640: LD_INT 3
67642: ARRAY
67643: PPUSH
67644: LD_VAR 0 2
67648: PUSH
67649: LD_INT 4
67651: ARRAY
67652: PPUSH
67653: CALL_OW 449
67657: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
67658: LD_ADDR_VAR 0 3
67662: PUSH
67663: LD_VAR 0 5
67667: PPUSH
67668: LD_INT 1
67670: PPUSH
67671: CALL_OW 275
67675: PUSH
67676: LD_VAR 0 4
67680: PUSH
67681: LD_INT 1
67683: ARRAY
67684: GREATEREQUAL
67685: IFFALSE 67711
67687: PUSH
67688: LD_VAR 0 5
67692: PPUSH
67693: LD_INT 2
67695: PPUSH
67696: CALL_OW 275
67700: PUSH
67701: LD_VAR 0 4
67705: PUSH
67706: LD_INT 2
67708: ARRAY
67709: GREATEREQUAL
67710: AND
67711: IFFALSE 67737
67713: PUSH
67714: LD_VAR 0 5
67718: PPUSH
67719: LD_INT 3
67721: PPUSH
67722: CALL_OW 275
67726: PUSH
67727: LD_VAR 0 4
67731: PUSH
67732: LD_INT 3
67734: ARRAY
67735: GREATEREQUAL
67736: AND
67737: ST_TO_ADDR
// end ;
67738: LD_VAR 0 3
67742: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
67743: LD_INT 0
67745: PPUSH
67746: PPUSH
67747: PPUSH
67748: PPUSH
// pom := GetBase ( building ) ;
67749: LD_ADDR_VAR 0 3
67753: PUSH
67754: LD_VAR 0 1
67758: PPUSH
67759: CALL_OW 274
67763: ST_TO_ADDR
// if not pom then
67764: LD_VAR 0 3
67768: NOT
67769: IFFALSE 67773
// exit ;
67771: GO 67947
// btype := GetBType ( building ) ;
67773: LD_ADDR_VAR 0 5
67777: PUSH
67778: LD_VAR 0 1
67782: PPUSH
67783: CALL_OW 266
67787: ST_TO_ADDR
// if btype = b_armoury then
67788: LD_VAR 0 5
67792: PUSH
67793: LD_INT 4
67795: EQUAL
67796: IFFALSE 67806
// btype := b_barracks ;
67798: LD_ADDR_VAR 0 5
67802: PUSH
67803: LD_INT 5
67805: ST_TO_ADDR
// if btype = b_depot then
67806: LD_VAR 0 5
67810: PUSH
67811: LD_INT 0
67813: EQUAL
67814: IFFALSE 67824
// btype := b_warehouse ;
67816: LD_ADDR_VAR 0 5
67820: PUSH
67821: LD_INT 1
67823: ST_TO_ADDR
// if btype = b_workshop then
67824: LD_VAR 0 5
67828: PUSH
67829: LD_INT 2
67831: EQUAL
67832: IFFALSE 67842
// btype := b_factory ;
67834: LD_ADDR_VAR 0 5
67838: PUSH
67839: LD_INT 3
67841: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
67842: LD_ADDR_VAR 0 4
67846: PUSH
67847: LD_VAR 0 5
67851: PPUSH
67852: LD_VAR 0 1
67856: PPUSH
67857: CALL_OW 248
67861: PPUSH
67862: CALL_OW 450
67866: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
67867: LD_ADDR_VAR 0 2
67871: PUSH
67872: LD_VAR 0 3
67876: PPUSH
67877: LD_INT 1
67879: PPUSH
67880: CALL_OW 275
67884: PUSH
67885: LD_VAR 0 4
67889: PUSH
67890: LD_INT 1
67892: ARRAY
67893: GREATEREQUAL
67894: IFFALSE 67920
67896: PUSH
67897: LD_VAR 0 3
67901: PPUSH
67902: LD_INT 2
67904: PPUSH
67905: CALL_OW 275
67909: PUSH
67910: LD_VAR 0 4
67914: PUSH
67915: LD_INT 2
67917: ARRAY
67918: GREATEREQUAL
67919: AND
67920: IFFALSE 67946
67922: PUSH
67923: LD_VAR 0 3
67927: PPUSH
67928: LD_INT 3
67930: PPUSH
67931: CALL_OW 275
67935: PUSH
67936: LD_VAR 0 4
67940: PUSH
67941: LD_INT 3
67943: ARRAY
67944: GREATEREQUAL
67945: AND
67946: ST_TO_ADDR
// end ;
67947: LD_VAR 0 2
67951: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
67952: LD_INT 0
67954: PPUSH
67955: PPUSH
67956: PPUSH
// pom := GetBase ( building ) ;
67957: LD_ADDR_VAR 0 4
67961: PUSH
67962: LD_VAR 0 1
67966: PPUSH
67967: CALL_OW 274
67971: ST_TO_ADDR
// if not pom then
67972: LD_VAR 0 4
67976: NOT
67977: IFFALSE 67981
// exit ;
67979: GO 68086
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
67981: LD_ADDR_VAR 0 5
67985: PUSH
67986: LD_VAR 0 2
67990: PPUSH
67991: LD_VAR 0 1
67995: PPUSH
67996: CALL_OW 248
68000: PPUSH
68001: CALL_OW 450
68005: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
68006: LD_ADDR_VAR 0 3
68010: PUSH
68011: LD_VAR 0 4
68015: PPUSH
68016: LD_INT 1
68018: PPUSH
68019: CALL_OW 275
68023: PUSH
68024: LD_VAR 0 5
68028: PUSH
68029: LD_INT 1
68031: ARRAY
68032: GREATEREQUAL
68033: IFFALSE 68059
68035: PUSH
68036: LD_VAR 0 4
68040: PPUSH
68041: LD_INT 2
68043: PPUSH
68044: CALL_OW 275
68048: PUSH
68049: LD_VAR 0 5
68053: PUSH
68054: LD_INT 2
68056: ARRAY
68057: GREATEREQUAL
68058: AND
68059: IFFALSE 68085
68061: PUSH
68062: LD_VAR 0 4
68066: PPUSH
68067: LD_INT 3
68069: PPUSH
68070: CALL_OW 275
68074: PUSH
68075: LD_VAR 0 5
68079: PUSH
68080: LD_INT 3
68082: ARRAY
68083: GREATEREQUAL
68084: AND
68085: ST_TO_ADDR
// end ;
68086: LD_VAR 0 3
68090: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
68091: LD_INT 0
68093: PPUSH
68094: PPUSH
68095: PPUSH
68096: PPUSH
68097: PPUSH
68098: PPUSH
68099: PPUSH
68100: PPUSH
68101: PPUSH
68102: PPUSH
68103: PPUSH
// result := false ;
68104: LD_ADDR_VAR 0 8
68108: PUSH
68109: LD_INT 0
68111: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
68112: LD_VAR 0 5
68116: NOT
68117: IFTRUE 68126
68119: PUSH
68120: LD_VAR 0 1
68124: NOT
68125: OR
68126: IFTRUE 68135
68128: PUSH
68129: LD_VAR 0 2
68133: NOT
68134: OR
68135: IFTRUE 68144
68137: PUSH
68138: LD_VAR 0 3
68142: NOT
68143: OR
68144: IFFALSE 68148
// exit ;
68146: GO 68974
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
68148: LD_ADDR_VAR 0 14
68152: PUSH
68153: LD_VAR 0 1
68157: PPUSH
68158: LD_VAR 0 2
68162: PPUSH
68163: LD_VAR 0 3
68167: PPUSH
68168: LD_VAR 0 4
68172: PPUSH
68173: LD_VAR 0 5
68177: PUSH
68178: LD_INT 1
68180: ARRAY
68181: PPUSH
68182: CALL_OW 248
68186: PPUSH
68187: LD_INT 0
68189: PPUSH
68190: CALL 70255 0 6
68194: ST_TO_ADDR
// if not hexes then
68195: LD_VAR 0 14
68199: NOT
68200: IFFALSE 68204
// exit ;
68202: GO 68974
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
68204: LD_ADDR_VAR 0 17
68208: PUSH
68209: LD_VAR 0 5
68213: PPUSH
68214: LD_INT 22
68216: PUSH
68217: LD_VAR 0 13
68221: PPUSH
68222: CALL_OW 255
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 2
68233: PUSH
68234: LD_INT 30
68236: PUSH
68237: LD_INT 0
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 30
68246: PUSH
68247: LD_INT 1
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: LIST
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PPUSH
68263: CALL_OW 72
68267: ST_TO_ADDR
// for i = 1 to hexes do
68268: LD_ADDR_VAR 0 9
68272: PUSH
68273: DOUBLE
68274: LD_INT 1
68276: DEC
68277: ST_TO_ADDR
68278: LD_VAR 0 14
68282: PUSH
68283: FOR_TO
68284: IFFALSE 68972
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68286: LD_ADDR_VAR 0 13
68290: PUSH
68291: LD_VAR 0 14
68295: PUSH
68296: LD_VAR 0 9
68300: ARRAY
68301: PUSH
68302: LD_INT 1
68304: ARRAY
68305: PPUSH
68306: LD_VAR 0 14
68310: PUSH
68311: LD_VAR 0 9
68315: ARRAY
68316: PUSH
68317: LD_INT 2
68319: ARRAY
68320: PPUSH
68321: CALL_OW 428
68325: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
68326: LD_VAR 0 14
68330: PUSH
68331: LD_VAR 0 9
68335: ARRAY
68336: PUSH
68337: LD_INT 1
68339: ARRAY
68340: PPUSH
68341: LD_VAR 0 14
68345: PUSH
68346: LD_VAR 0 9
68350: ARRAY
68351: PUSH
68352: LD_INT 2
68354: ARRAY
68355: PPUSH
68356: CALL_OW 351
68360: IFTRUE 68399
68362: PUSH
68363: LD_VAR 0 14
68367: PUSH
68368: LD_VAR 0 9
68372: ARRAY
68373: PUSH
68374: LD_INT 1
68376: ARRAY
68377: PPUSH
68378: LD_VAR 0 14
68382: PUSH
68383: LD_VAR 0 9
68387: ARRAY
68388: PUSH
68389: LD_INT 2
68391: ARRAY
68392: PPUSH
68393: CALL_OW 488
68397: NOT
68398: OR
68399: IFTRUE 68416
68401: PUSH
68402: LD_VAR 0 13
68406: PPUSH
68407: CALL_OW 247
68411: PUSH
68412: LD_INT 3
68414: EQUAL
68415: OR
68416: IFFALSE 68422
// exit ;
68418: POP
68419: POP
68420: GO 68974
// if not tmp then
68422: LD_VAR 0 13
68426: NOT
68427: IFFALSE 68431
// continue ;
68429: GO 68283
// result := true ;
68431: LD_ADDR_VAR 0 8
68435: PUSH
68436: LD_INT 1
68438: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
68439: LD_VAR 0 6
68443: IFFALSE 68460
68445: PUSH
68446: LD_VAR 0 13
68450: PPUSH
68451: CALL_OW 247
68455: PUSH
68456: LD_INT 2
68458: EQUAL
68459: AND
68460: IFFALSE 68477
68462: PUSH
68463: LD_VAR 0 13
68467: PPUSH
68468: CALL_OW 263
68472: PUSH
68473: LD_INT 1
68475: EQUAL
68476: AND
68477: IFFALSE 68641
// begin if IsDrivenBy ( tmp ) then
68479: LD_VAR 0 13
68483: PPUSH
68484: CALL_OW 311
68488: IFFALSE 68492
// continue ;
68490: GO 68283
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
68492: LD_VAR 0 6
68496: PPUSH
68497: LD_INT 3
68499: PUSH
68500: LD_INT 60
68502: PUSH
68503: EMPTY
68504: LIST
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: PUSH
68510: LD_INT 3
68512: PUSH
68513: LD_INT 55
68515: PUSH
68516: EMPTY
68517: LIST
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PPUSH
68527: CALL_OW 72
68531: IFFALSE 68639
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
68533: LD_ADDR_VAR 0 18
68537: PUSH
68538: LD_VAR 0 6
68542: PPUSH
68543: LD_INT 3
68545: PUSH
68546: LD_INT 60
68548: PUSH
68549: EMPTY
68550: LIST
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 3
68558: PUSH
68559: LD_INT 55
68561: PUSH
68562: EMPTY
68563: LIST
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: PPUSH
68573: CALL_OW 72
68577: PUSH
68578: LD_INT 1
68580: ARRAY
68581: ST_TO_ADDR
// if IsInUnit ( driver ) then
68582: LD_VAR 0 18
68586: PPUSH
68587: CALL_OW 310
68591: IFFALSE 68602
// ComExit ( driver ) ;
68593: LD_VAR 0 18
68597: PPUSH
68598: CALL 94245 0 1
// AddComEnterUnit ( driver , tmp ) ;
68602: LD_VAR 0 18
68606: PPUSH
68607: LD_VAR 0 13
68611: PPUSH
68612: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
68616: LD_VAR 0 18
68620: PPUSH
68621: LD_VAR 0 7
68625: PPUSH
68626: CALL_OW 173
// AddComExitVehicle ( driver ) ;
68630: LD_VAR 0 18
68634: PPUSH
68635: CALL_OW 181
// end ; continue ;
68639: GO 68283
// end ; if not cleaners or not tmp in cleaners then
68641: LD_VAR 0 6
68645: NOT
68646: IFTRUE 68661
68648: PUSH
68649: LD_VAR 0 13
68653: PUSH
68654: LD_VAR 0 6
68658: IN
68659: NOT
68660: OR
68661: IFFALSE 68970
// begin if dep then
68663: LD_VAR 0 17
68667: IFFALSE 68803
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
68669: LD_ADDR_VAR 0 16
68673: PUSH
68674: LD_VAR 0 17
68678: PUSH
68679: LD_INT 1
68681: ARRAY
68682: PPUSH
68683: CALL_OW 250
68687: PPUSH
68688: LD_VAR 0 17
68692: PUSH
68693: LD_INT 1
68695: ARRAY
68696: PPUSH
68697: CALL_OW 254
68701: PPUSH
68702: LD_INT 5
68704: PPUSH
68705: CALL_OW 272
68709: PUSH
68710: LD_VAR 0 17
68714: PUSH
68715: LD_INT 1
68717: ARRAY
68718: PPUSH
68719: CALL_OW 251
68723: PPUSH
68724: LD_VAR 0 17
68728: PUSH
68729: LD_INT 1
68731: ARRAY
68732: PPUSH
68733: CALL_OW 254
68737: PPUSH
68738: LD_INT 5
68740: PPUSH
68741: CALL_OW 273
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
68750: LD_VAR 0 16
68754: PUSH
68755: LD_INT 1
68757: ARRAY
68758: PPUSH
68759: LD_VAR 0 16
68763: PUSH
68764: LD_INT 2
68766: ARRAY
68767: PPUSH
68768: CALL_OW 488
68772: IFFALSE 68803
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
68774: LD_VAR 0 13
68778: PPUSH
68779: LD_VAR 0 16
68783: PUSH
68784: LD_INT 1
68786: ARRAY
68787: PPUSH
68788: LD_VAR 0 16
68792: PUSH
68793: LD_INT 2
68795: ARRAY
68796: PPUSH
68797: CALL_OW 111
// continue ;
68801: GO 68283
// end ; end ; r := GetDir ( tmp ) ;
68803: LD_ADDR_VAR 0 15
68807: PUSH
68808: LD_VAR 0 13
68812: PPUSH
68813: CALL_OW 254
68817: ST_TO_ADDR
// if r = 5 then
68818: LD_VAR 0 15
68822: PUSH
68823: LD_INT 5
68825: EQUAL
68826: IFFALSE 68836
// r := 0 ;
68828: LD_ADDR_VAR 0 15
68832: PUSH
68833: LD_INT 0
68835: ST_TO_ADDR
// for j = r to 5 do
68836: LD_ADDR_VAR 0 10
68840: PUSH
68841: DOUBLE
68842: LD_VAR 0 15
68846: DEC
68847: ST_TO_ADDR
68848: LD_INT 5
68850: PUSH
68851: FOR_TO
68852: IFFALSE 68968
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
68854: LD_ADDR_VAR 0 11
68858: PUSH
68859: LD_VAR 0 13
68863: PPUSH
68864: CALL_OW 250
68868: PPUSH
68869: LD_VAR 0 10
68873: PPUSH
68874: LD_INT 2
68876: PPUSH
68877: CALL_OW 272
68881: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
68882: LD_ADDR_VAR 0 12
68886: PUSH
68887: LD_VAR 0 13
68891: PPUSH
68892: CALL_OW 251
68896: PPUSH
68897: LD_VAR 0 10
68901: PPUSH
68902: LD_INT 2
68904: PPUSH
68905: CALL_OW 273
68909: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
68910: LD_VAR 0 11
68914: PPUSH
68915: LD_VAR 0 12
68919: PPUSH
68920: CALL_OW 488
68924: IFFALSE 68943
68926: PUSH
68927: LD_VAR 0 11
68931: PPUSH
68932: LD_VAR 0 12
68936: PPUSH
68937: CALL_OW 428
68941: NOT
68942: AND
68943: IFFALSE 68966
// begin ComMoveXY ( tmp , _x , _y ) ;
68945: LD_VAR 0 13
68949: PPUSH
68950: LD_VAR 0 11
68954: PPUSH
68955: LD_VAR 0 12
68959: PPUSH
68960: CALL_OW 111
// break ;
68964: GO 68968
// end ; end ;
68966: GO 68851
68968: POP
68969: POP
// end ; end ;
68970: GO 68283
68972: POP
68973: POP
// end ;
68974: LD_VAR 0 8
68978: RET
// export function BuildingTechInvented ( side , btype ) ; begin
68979: LD_INT 0
68981: PPUSH
// result := true ;
68982: LD_ADDR_VAR 0 3
68986: PUSH
68987: LD_INT 1
68989: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
68990: LD_VAR 0 2
68994: PUSH
68995: LD_INT 24
68997: DOUBLE
68998: EQUAL
68999: IFTRUE 69009
69001: LD_INT 33
69003: DOUBLE
69004: EQUAL
69005: IFTRUE 69009
69007: GO 69034
69009: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
69010: LD_ADDR_VAR 0 3
69014: PUSH
69015: LD_INT 32
69017: PPUSH
69018: LD_VAR 0 1
69022: PPUSH
69023: CALL_OW 321
69027: PUSH
69028: LD_INT 2
69030: EQUAL
69031: ST_TO_ADDR
69032: GO 69350
69034: LD_INT 20
69036: DOUBLE
69037: EQUAL
69038: IFTRUE 69042
69040: GO 69067
69042: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
69043: LD_ADDR_VAR 0 3
69047: PUSH
69048: LD_INT 6
69050: PPUSH
69051: LD_VAR 0 1
69055: PPUSH
69056: CALL_OW 321
69060: PUSH
69061: LD_INT 2
69063: EQUAL
69064: ST_TO_ADDR
69065: GO 69350
69067: LD_INT 22
69069: DOUBLE
69070: EQUAL
69071: IFTRUE 69081
69073: LD_INT 36
69075: DOUBLE
69076: EQUAL
69077: IFTRUE 69081
69079: GO 69106
69081: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
69082: LD_ADDR_VAR 0 3
69086: PUSH
69087: LD_INT 15
69089: PPUSH
69090: LD_VAR 0 1
69094: PPUSH
69095: CALL_OW 321
69099: PUSH
69100: LD_INT 2
69102: EQUAL
69103: ST_TO_ADDR
69104: GO 69350
69106: LD_INT 30
69108: DOUBLE
69109: EQUAL
69110: IFTRUE 69114
69112: GO 69139
69114: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
69115: LD_ADDR_VAR 0 3
69119: PUSH
69120: LD_INT 20
69122: PPUSH
69123: LD_VAR 0 1
69127: PPUSH
69128: CALL_OW 321
69132: PUSH
69133: LD_INT 2
69135: EQUAL
69136: ST_TO_ADDR
69137: GO 69350
69139: LD_INT 28
69141: DOUBLE
69142: EQUAL
69143: IFTRUE 69153
69145: LD_INT 21
69147: DOUBLE
69148: EQUAL
69149: IFTRUE 69153
69151: GO 69178
69153: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
69154: LD_ADDR_VAR 0 3
69158: PUSH
69159: LD_INT 21
69161: PPUSH
69162: LD_VAR 0 1
69166: PPUSH
69167: CALL_OW 321
69171: PUSH
69172: LD_INT 2
69174: EQUAL
69175: ST_TO_ADDR
69176: GO 69350
69178: LD_INT 16
69180: DOUBLE
69181: EQUAL
69182: IFTRUE 69186
69184: GO 69211
69186: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
69187: LD_ADDR_VAR 0 3
69191: PUSH
69192: LD_INT 84
69194: PPUSH
69195: LD_VAR 0 1
69199: PPUSH
69200: CALL_OW 321
69204: PUSH
69205: LD_INT 2
69207: EQUAL
69208: ST_TO_ADDR
69209: GO 69350
69211: LD_INT 19
69213: DOUBLE
69214: EQUAL
69215: IFTRUE 69225
69217: LD_INT 23
69219: DOUBLE
69220: EQUAL
69221: IFTRUE 69225
69223: GO 69250
69225: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
69226: LD_ADDR_VAR 0 3
69230: PUSH
69231: LD_INT 83
69233: PPUSH
69234: LD_VAR 0 1
69238: PPUSH
69239: CALL_OW 321
69243: PUSH
69244: LD_INT 2
69246: EQUAL
69247: ST_TO_ADDR
69248: GO 69350
69250: LD_INT 17
69252: DOUBLE
69253: EQUAL
69254: IFTRUE 69258
69256: GO 69283
69258: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
69259: LD_ADDR_VAR 0 3
69263: PUSH
69264: LD_INT 39
69266: PPUSH
69267: LD_VAR 0 1
69271: PPUSH
69272: CALL_OW 321
69276: PUSH
69277: LD_INT 2
69279: EQUAL
69280: ST_TO_ADDR
69281: GO 69350
69283: LD_INT 18
69285: DOUBLE
69286: EQUAL
69287: IFTRUE 69291
69289: GO 69316
69291: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
69292: LD_ADDR_VAR 0 3
69296: PUSH
69297: LD_INT 40
69299: PPUSH
69300: LD_VAR 0 1
69304: PPUSH
69305: CALL_OW 321
69309: PUSH
69310: LD_INT 2
69312: EQUAL
69313: ST_TO_ADDR
69314: GO 69350
69316: LD_INT 27
69318: DOUBLE
69319: EQUAL
69320: IFTRUE 69324
69322: GO 69349
69324: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
69325: LD_ADDR_VAR 0 3
69329: PUSH
69330: LD_INT 35
69332: PPUSH
69333: LD_VAR 0 1
69337: PPUSH
69338: CALL_OW 321
69342: PUSH
69343: LD_INT 2
69345: EQUAL
69346: ST_TO_ADDR
69347: GO 69350
69349: POP
// end ;
69350: LD_VAR 0 3
69354: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
69355: LD_INT 0
69357: PPUSH
69358: PPUSH
69359: PPUSH
69360: PPUSH
69361: PPUSH
69362: PPUSH
69363: PPUSH
69364: PPUSH
69365: PPUSH
69366: PPUSH
69367: PPUSH
// result := false ;
69368: LD_ADDR_VAR 0 6
69372: PUSH
69373: LD_INT 0
69375: ST_TO_ADDR
// if btype = b_depot then
69376: LD_VAR 0 2
69380: PUSH
69381: LD_INT 0
69383: EQUAL
69384: IFFALSE 69396
// begin result := true ;
69386: LD_ADDR_VAR 0 6
69390: PUSH
69391: LD_INT 1
69393: ST_TO_ADDR
// exit ;
69394: GO 70250
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
69396: LD_VAR 0 1
69400: NOT
69401: IFTRUE 69426
69403: PUSH
69404: LD_VAR 0 1
69408: PPUSH
69409: CALL_OW 266
69413: PUSH
69414: LD_INT 0
69416: PUSH
69417: LD_INT 1
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: IN
69424: NOT
69425: OR
69426: IFTRUE 69435
69428: PUSH
69429: LD_VAR 0 2
69433: NOT
69434: OR
69435: IFTRUE 69471
69437: PUSH
69438: LD_VAR 0 5
69442: PUSH
69443: LD_INT 0
69445: PUSH
69446: LD_INT 1
69448: PUSH
69449: LD_INT 2
69451: PUSH
69452: LD_INT 3
69454: PUSH
69455: LD_INT 4
69457: PUSH
69458: LD_INT 5
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: IN
69469: NOT
69470: OR
69471: IFTRUE 69490
69473: PUSH
69474: LD_VAR 0 3
69478: PPUSH
69479: LD_VAR 0 4
69483: PPUSH
69484: CALL_OW 488
69488: NOT
69489: OR
69490: IFFALSE 69494
// exit ;
69492: GO 70250
// side := GetSide ( depot ) ;
69494: LD_ADDR_VAR 0 9
69498: PUSH
69499: LD_VAR 0 1
69503: PPUSH
69504: CALL_OW 255
69508: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
69509: LD_VAR 0 9
69513: PPUSH
69514: LD_VAR 0 2
69518: PPUSH
69519: CALL 68979 0 2
69523: NOT
69524: IFFALSE 69528
// exit ;
69526: GO 70250
// pom := GetBase ( depot ) ;
69528: LD_ADDR_VAR 0 10
69532: PUSH
69533: LD_VAR 0 1
69537: PPUSH
69538: CALL_OW 274
69542: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
69543: LD_ADDR_VAR 0 11
69547: PUSH
69548: LD_VAR 0 2
69552: PPUSH
69553: LD_VAR 0 1
69557: PPUSH
69558: CALL_OW 248
69562: PPUSH
69563: CALL_OW 450
69567: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
69568: LD_VAR 0 10
69572: PPUSH
69573: LD_INT 1
69575: PPUSH
69576: CALL_OW 275
69580: PUSH
69581: LD_VAR 0 11
69585: PUSH
69586: LD_INT 1
69588: ARRAY
69589: GREATEREQUAL
69590: IFFALSE 69616
69592: PUSH
69593: LD_VAR 0 10
69597: PPUSH
69598: LD_INT 2
69600: PPUSH
69601: CALL_OW 275
69605: PUSH
69606: LD_VAR 0 11
69610: PUSH
69611: LD_INT 2
69613: ARRAY
69614: GREATEREQUAL
69615: AND
69616: IFFALSE 69642
69618: PUSH
69619: LD_VAR 0 10
69623: PPUSH
69624: LD_INT 3
69626: PPUSH
69627: CALL_OW 275
69631: PUSH
69632: LD_VAR 0 11
69636: PUSH
69637: LD_INT 3
69639: ARRAY
69640: GREATEREQUAL
69641: AND
69642: NOT
69643: IFFALSE 69647
// exit ;
69645: GO 70250
// if GetBType ( depot ) = b_depot then
69647: LD_VAR 0 1
69651: PPUSH
69652: CALL_OW 266
69656: PUSH
69657: LD_INT 0
69659: EQUAL
69660: IFFALSE 69672
// dist := 28 else
69662: LD_ADDR_VAR 0 14
69666: PUSH
69667: LD_INT 28
69669: ST_TO_ADDR
69670: GO 69680
// dist := 36 ;
69672: LD_ADDR_VAR 0 14
69676: PUSH
69677: LD_INT 36
69679: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
69680: LD_VAR 0 1
69684: PPUSH
69685: LD_VAR 0 3
69689: PPUSH
69690: LD_VAR 0 4
69694: PPUSH
69695: CALL_OW 297
69699: PUSH
69700: LD_VAR 0 14
69704: GREATER
69705: IFFALSE 69709
// exit ;
69707: GO 70250
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
69709: LD_ADDR_VAR 0 12
69713: PUSH
69714: LD_VAR 0 2
69718: PPUSH
69719: LD_VAR 0 3
69723: PPUSH
69724: LD_VAR 0 4
69728: PPUSH
69729: LD_VAR 0 5
69733: PPUSH
69734: LD_VAR 0 1
69738: PPUSH
69739: CALL_OW 248
69743: PPUSH
69744: LD_INT 0
69746: PPUSH
69747: CALL 70255 0 6
69751: ST_TO_ADDR
// if not hexes then
69752: LD_VAR 0 12
69756: NOT
69757: IFFALSE 69761
// exit ;
69759: GO 70250
// hex := GetHexInfo ( x , y ) ;
69761: LD_ADDR_VAR 0 15
69765: PUSH
69766: LD_VAR 0 3
69770: PPUSH
69771: LD_VAR 0 4
69775: PPUSH
69776: CALL_OW 546
69780: ST_TO_ADDR
// if hex [ 1 ] then
69781: LD_VAR 0 15
69785: PUSH
69786: LD_INT 1
69788: ARRAY
69789: IFFALSE 69793
// exit ;
69791: GO 70250
// height := hex [ 2 ] ;
69793: LD_ADDR_VAR 0 13
69797: PUSH
69798: LD_VAR 0 15
69802: PUSH
69803: LD_INT 2
69805: ARRAY
69806: ST_TO_ADDR
// for i = 1 to hexes do
69807: LD_ADDR_VAR 0 7
69811: PUSH
69812: DOUBLE
69813: LD_INT 1
69815: DEC
69816: ST_TO_ADDR
69817: LD_VAR 0 12
69821: PUSH
69822: FOR_TO
69823: IFFALSE 70167
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
69825: LD_VAR 0 12
69829: PUSH
69830: LD_VAR 0 7
69834: ARRAY
69835: PUSH
69836: LD_INT 1
69838: ARRAY
69839: PPUSH
69840: LD_VAR 0 12
69844: PUSH
69845: LD_VAR 0 7
69849: ARRAY
69850: PUSH
69851: LD_INT 2
69853: ARRAY
69854: PPUSH
69855: CALL_OW 488
69859: NOT
69860: IFTRUE 69902
69862: PUSH
69863: LD_VAR 0 12
69867: PUSH
69868: LD_VAR 0 7
69872: ARRAY
69873: PUSH
69874: LD_INT 1
69876: ARRAY
69877: PPUSH
69878: LD_VAR 0 12
69882: PUSH
69883: LD_VAR 0 7
69887: ARRAY
69888: PUSH
69889: LD_INT 2
69891: ARRAY
69892: PPUSH
69893: CALL_OW 428
69897: PUSH
69898: LD_INT 0
69900: GREATER
69901: OR
69902: IFTRUE 69940
69904: PUSH
69905: LD_VAR 0 12
69909: PUSH
69910: LD_VAR 0 7
69914: ARRAY
69915: PUSH
69916: LD_INT 1
69918: ARRAY
69919: PPUSH
69920: LD_VAR 0 12
69924: PUSH
69925: LD_VAR 0 7
69929: ARRAY
69930: PUSH
69931: LD_INT 2
69933: ARRAY
69934: PPUSH
69935: CALL_OW 351
69939: OR
69940: IFFALSE 69946
// exit ;
69942: POP
69943: POP
69944: GO 70250
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69946: LD_ADDR_VAR 0 8
69950: PUSH
69951: LD_VAR 0 12
69955: PUSH
69956: LD_VAR 0 7
69960: ARRAY
69961: PUSH
69962: LD_INT 1
69964: ARRAY
69965: PPUSH
69966: LD_VAR 0 12
69970: PUSH
69971: LD_VAR 0 7
69975: ARRAY
69976: PUSH
69977: LD_INT 2
69979: ARRAY
69980: PPUSH
69981: CALL_OW 546
69985: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
69986: LD_VAR 0 8
69990: PUSH
69991: LD_INT 1
69993: ARRAY
69994: IFTRUE 70016
69996: PUSH
69997: LD_VAR 0 8
70001: PUSH
70002: LD_INT 2
70004: ARRAY
70005: PUSH
70006: LD_VAR 0 13
70010: PUSH
70011: LD_INT 2
70013: PLUS
70014: GREATER
70015: OR
70016: IFTRUE 70038
70018: PUSH
70019: LD_VAR 0 8
70023: PUSH
70024: LD_INT 2
70026: ARRAY
70027: PUSH
70028: LD_VAR 0 13
70032: PUSH
70033: LD_INT 2
70035: MINUS
70036: LESS
70037: OR
70038: IFTRUE 70106
70040: PUSH
70041: LD_VAR 0 8
70045: PUSH
70046: LD_INT 3
70048: ARRAY
70049: PUSH
70050: LD_INT 0
70052: PUSH
70053: LD_INT 8
70055: PUSH
70056: LD_INT 9
70058: PUSH
70059: LD_INT 10
70061: PUSH
70062: LD_INT 11
70064: PUSH
70065: LD_INT 12
70067: PUSH
70068: LD_INT 13
70070: PUSH
70071: LD_INT 16
70073: PUSH
70074: LD_INT 17
70076: PUSH
70077: LD_INT 18
70079: PUSH
70080: LD_INT 19
70082: PUSH
70083: LD_INT 20
70085: PUSH
70086: LD_INT 21
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: IN
70104: NOT
70105: OR
70106: IFTRUE 70119
70108: PUSH
70109: LD_VAR 0 8
70113: PUSH
70114: LD_INT 5
70116: ARRAY
70117: NOT
70118: OR
70119: IFTRUE 70159
70121: PUSH
70122: LD_VAR 0 8
70126: PUSH
70127: LD_INT 6
70129: ARRAY
70130: PUSH
70131: LD_INT 1
70133: PUSH
70134: LD_INT 2
70136: PUSH
70137: LD_INT 7
70139: PUSH
70140: LD_INT 9
70142: PUSH
70143: LD_INT 10
70145: PUSH
70146: LD_INT 11
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: LIST
70156: IN
70157: NOT
70158: OR
70159: IFFALSE 70165
// exit ;
70161: POP
70162: POP
70163: GO 70250
// end ;
70165: GO 69822
70167: POP
70168: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
70169: LD_VAR 0 9
70173: PPUSH
70174: LD_VAR 0 3
70178: PPUSH
70179: LD_VAR 0 4
70183: PPUSH
70184: LD_INT 20
70186: PPUSH
70187: CALL 62069 0 4
70191: PUSH
70192: LD_INT 4
70194: ARRAY
70195: IFFALSE 70199
// exit ;
70197: GO 70250
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
70199: LD_VAR 0 2
70203: PUSH
70204: LD_INT 29
70206: PUSH
70207: LD_INT 30
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: IN
70214: IFFALSE 70238
70216: PUSH
70217: LD_VAR 0 3
70221: PPUSH
70222: LD_VAR 0 4
70226: PPUSH
70227: LD_VAR 0 9
70231: PPUSH
70232: CALL_OW 440
70236: NOT
70237: AND
70238: IFFALSE 70242
// exit ;
70240: GO 70250
// result := true ;
70242: LD_ADDR_VAR 0 6
70246: PUSH
70247: LD_INT 1
70249: ST_TO_ADDR
// end ;
70250: LD_VAR 0 6
70254: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
70255: LD_INT 0
70257: PPUSH
70258: PPUSH
70259: PPUSH
70260: PPUSH
70261: PPUSH
70262: PPUSH
70263: PPUSH
70264: PPUSH
70265: PPUSH
70266: PPUSH
70267: PPUSH
70268: PPUSH
70269: PPUSH
70270: PPUSH
70271: PPUSH
70272: PPUSH
70273: PPUSH
70274: PPUSH
70275: PPUSH
70276: PPUSH
70277: PPUSH
70278: PPUSH
70279: PPUSH
70280: PPUSH
70281: PPUSH
70282: PPUSH
70283: PPUSH
70284: PPUSH
70285: PPUSH
70286: PPUSH
70287: PPUSH
70288: PPUSH
70289: PPUSH
70290: PPUSH
70291: PPUSH
70292: PPUSH
70293: PPUSH
70294: PPUSH
70295: PPUSH
70296: PPUSH
70297: PPUSH
70298: PPUSH
70299: PPUSH
70300: PPUSH
70301: PPUSH
70302: PPUSH
70303: PPUSH
70304: PPUSH
70305: PPUSH
70306: PPUSH
70307: PPUSH
70308: PPUSH
70309: PPUSH
70310: PPUSH
70311: PPUSH
70312: PPUSH
70313: PPUSH
70314: PPUSH
// result = [ ] ;
70315: LD_ADDR_VAR 0 7
70319: PUSH
70320: EMPTY
70321: ST_TO_ADDR
// temp_list = [ ] ;
70322: LD_ADDR_VAR 0 9
70326: PUSH
70327: EMPTY
70328: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
70329: LD_VAR 0 4
70333: PUSH
70334: LD_INT 0
70336: PUSH
70337: LD_INT 1
70339: PUSH
70340: LD_INT 2
70342: PUSH
70343: LD_INT 3
70345: PUSH
70346: LD_INT 4
70348: PUSH
70349: LD_INT 5
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: IN
70360: NOT
70361: IFTRUE 70404
70363: PUSH
70364: LD_VAR 0 1
70368: PUSH
70369: LD_INT 0
70371: PUSH
70372: LD_INT 1
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: IN
70379: IFFALSE 70403
70381: PUSH
70382: LD_VAR 0 5
70386: PUSH
70387: LD_INT 1
70389: PUSH
70390: LD_INT 2
70392: PUSH
70393: LD_INT 3
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: LIST
70400: IN
70401: NOT
70402: AND
70403: OR
70404: IFFALSE 70408
// exit ;
70406: GO 88807
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
70408: LD_VAR 0 1
70412: PUSH
70413: LD_INT 6
70415: PUSH
70416: LD_INT 7
70418: PUSH
70419: LD_INT 8
70421: PUSH
70422: LD_INT 13
70424: PUSH
70425: LD_INT 12
70427: PUSH
70428: LD_INT 15
70430: PUSH
70431: LD_INT 11
70433: PUSH
70434: LD_INT 14
70436: PUSH
70437: LD_INT 10
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: LIST
70449: LIST
70450: IN
70451: IFFALSE 70461
// btype = b_lab ;
70453: LD_ADDR_VAR 0 1
70457: PUSH
70458: LD_INT 6
70460: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
70461: LD_VAR 0 6
70465: PUSH
70466: LD_INT 0
70468: PUSH
70469: LD_INT 1
70471: PUSH
70472: LD_INT 2
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: LIST
70479: IN
70480: NOT
70481: IFTRUE 70549
70483: PUSH
70484: LD_VAR 0 1
70488: PUSH
70489: LD_INT 0
70491: PUSH
70492: LD_INT 1
70494: PUSH
70495: LD_INT 2
70497: PUSH
70498: LD_INT 3
70500: PUSH
70501: LD_INT 6
70503: PUSH
70504: LD_INT 36
70506: PUSH
70507: LD_INT 4
70509: PUSH
70510: LD_INT 5
70512: PUSH
70513: LD_INT 31
70515: PUSH
70516: LD_INT 32
70518: PUSH
70519: LD_INT 33
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: IN
70535: NOT
70536: IFFALSE 70548
70538: PUSH
70539: LD_VAR 0 6
70543: PUSH
70544: LD_INT 1
70546: EQUAL
70547: AND
70548: OR
70549: IFTRUE 70581
70551: PUSH
70552: LD_VAR 0 1
70556: PUSH
70557: LD_INT 2
70559: PUSH
70560: LD_INT 3
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: IN
70567: NOT
70568: IFFALSE 70580
70570: PUSH
70571: LD_VAR 0 6
70575: PUSH
70576: LD_INT 2
70578: EQUAL
70579: AND
70580: OR
70581: IFFALSE 70591
// mode = 0 ;
70583: LD_ADDR_VAR 0 6
70587: PUSH
70588: LD_INT 0
70590: ST_TO_ADDR
// case mode of 0 :
70591: LD_VAR 0 6
70595: PUSH
70596: LD_INT 0
70598: DOUBLE
70599: EQUAL
70600: IFTRUE 70604
70602: GO 82057
70604: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70605: LD_ADDR_VAR 0 11
70609: PUSH
70610: LD_INT 0
70612: PUSH
70613: LD_INT 0
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 0
70622: PUSH
70623: LD_INT 1
70625: NEG
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 1
70633: PUSH
70634: LD_INT 0
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 1
70643: PUSH
70644: LD_INT 1
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 0
70653: PUSH
70654: LD_INT 1
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 1
70663: NEG
70664: PUSH
70665: LD_INT 0
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: PUSH
70672: LD_INT 1
70674: NEG
70675: PUSH
70676: LD_INT 1
70678: NEG
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: PUSH
70684: LD_INT 1
70686: NEG
70687: PUSH
70688: LD_INT 2
70690: NEG
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: PUSH
70696: LD_INT 0
70698: PUSH
70699: LD_INT 2
70701: NEG
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: PUSH
70707: LD_INT 1
70709: PUSH
70710: LD_INT 1
70712: NEG
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: LD_INT 1
70720: PUSH
70721: LD_INT 2
70723: PUSH
70724: EMPTY
70725: LIST
70726: LIST
70727: PUSH
70728: LD_INT 0
70730: PUSH
70731: LD_INT 2
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PUSH
70738: LD_INT 1
70740: NEG
70741: PUSH
70742: LD_INT 1
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: LD_INT 1
70751: PUSH
70752: LD_INT 3
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: PUSH
70759: LD_INT 0
70761: PUSH
70762: LD_INT 3
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: PUSH
70769: LD_INT 1
70771: NEG
70772: PUSH
70773: LD_INT 2
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: LIST
70784: LIST
70785: LIST
70786: LIST
70787: LIST
70788: LIST
70789: LIST
70790: LIST
70791: LIST
70792: LIST
70793: LIST
70794: LIST
70795: LIST
70796: LIST
70797: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70798: LD_ADDR_VAR 0 12
70802: PUSH
70803: LD_INT 0
70805: PUSH
70806: LD_INT 0
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: LD_INT 0
70815: PUSH
70816: LD_INT 1
70818: NEG
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: PUSH
70824: LD_INT 1
70826: PUSH
70827: LD_INT 0
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: PUSH
70834: LD_INT 1
70836: PUSH
70837: LD_INT 1
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: LD_INT 0
70846: PUSH
70847: LD_INT 1
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: PUSH
70854: LD_INT 1
70856: NEG
70857: PUSH
70858: LD_INT 0
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: PUSH
70865: LD_INT 1
70867: NEG
70868: PUSH
70869: LD_INT 1
70871: NEG
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: PUSH
70877: LD_INT 1
70879: PUSH
70880: LD_INT 1
70882: NEG
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: PUSH
70888: LD_INT 2
70890: PUSH
70891: LD_INT 0
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: PUSH
70898: LD_INT 2
70900: PUSH
70901: LD_INT 1
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: LD_INT 1
70910: NEG
70911: PUSH
70912: LD_INT 1
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: PUSH
70919: LD_INT 2
70921: NEG
70922: PUSH
70923: LD_INT 0
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: PUSH
70930: LD_INT 2
70932: NEG
70933: PUSH
70934: LD_INT 1
70936: NEG
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 2
70944: NEG
70945: PUSH
70946: LD_INT 1
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: LD_INT 3
70955: NEG
70956: PUSH
70957: LD_INT 0
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: PUSH
70964: LD_INT 3
70966: NEG
70967: PUSH
70968: LD_INT 1
70970: NEG
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: EMPTY
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: LIST
70982: LIST
70983: LIST
70984: LIST
70985: LIST
70986: LIST
70987: LIST
70988: LIST
70989: LIST
70990: LIST
70991: LIST
70992: LIST
70993: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70994: LD_ADDR_VAR 0 13
70998: PUSH
70999: LD_INT 0
71001: PUSH
71002: LD_INT 0
71004: PUSH
71005: EMPTY
71006: LIST
71007: LIST
71008: PUSH
71009: LD_INT 0
71011: PUSH
71012: LD_INT 1
71014: NEG
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: PUSH
71020: LD_INT 1
71022: PUSH
71023: LD_INT 0
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: PUSH
71030: LD_INT 1
71032: PUSH
71033: LD_INT 1
71035: PUSH
71036: EMPTY
71037: LIST
71038: LIST
71039: PUSH
71040: LD_INT 0
71042: PUSH
71043: LD_INT 1
71045: PUSH
71046: EMPTY
71047: LIST
71048: LIST
71049: PUSH
71050: LD_INT 1
71052: NEG
71053: PUSH
71054: LD_INT 0
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: PUSH
71061: LD_INT 1
71063: NEG
71064: PUSH
71065: LD_INT 1
71067: NEG
71068: PUSH
71069: EMPTY
71070: LIST
71071: LIST
71072: PUSH
71073: LD_INT 1
71075: NEG
71076: PUSH
71077: LD_INT 2
71079: NEG
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: PUSH
71085: LD_INT 2
71087: PUSH
71088: LD_INT 1
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: LD_INT 2
71097: PUSH
71098: LD_INT 2
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: PUSH
71105: LD_INT 1
71107: PUSH
71108: LD_INT 2
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: PUSH
71115: LD_INT 2
71117: NEG
71118: PUSH
71119: LD_INT 1
71121: NEG
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PUSH
71127: LD_INT 2
71129: NEG
71130: PUSH
71131: LD_INT 2
71133: NEG
71134: PUSH
71135: EMPTY
71136: LIST
71137: LIST
71138: PUSH
71139: LD_INT 2
71141: NEG
71142: PUSH
71143: LD_INT 3
71145: NEG
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: LD_INT 3
71153: NEG
71154: PUSH
71155: LD_INT 2
71157: NEG
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: PUSH
71163: LD_INT 3
71165: NEG
71166: PUSH
71167: LD_INT 3
71169: NEG
71170: PUSH
71171: EMPTY
71172: LIST
71173: LIST
71174: PUSH
71175: EMPTY
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71193: LD_ADDR_VAR 0 14
71197: PUSH
71198: LD_INT 0
71200: PUSH
71201: LD_INT 0
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: PUSH
71208: LD_INT 0
71210: PUSH
71211: LD_INT 1
71213: NEG
71214: PUSH
71215: EMPTY
71216: LIST
71217: LIST
71218: PUSH
71219: LD_INT 1
71221: PUSH
71222: LD_INT 0
71224: PUSH
71225: EMPTY
71226: LIST
71227: LIST
71228: PUSH
71229: LD_INT 1
71231: PUSH
71232: LD_INT 1
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: PUSH
71239: LD_INT 0
71241: PUSH
71242: LD_INT 1
71244: PUSH
71245: EMPTY
71246: LIST
71247: LIST
71248: PUSH
71249: LD_INT 1
71251: NEG
71252: PUSH
71253: LD_INT 0
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: PUSH
71260: LD_INT 1
71262: NEG
71263: PUSH
71264: LD_INT 1
71266: NEG
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: PUSH
71272: LD_INT 1
71274: NEG
71275: PUSH
71276: LD_INT 2
71278: NEG
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: PUSH
71284: LD_INT 0
71286: PUSH
71287: LD_INT 2
71289: NEG
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PUSH
71295: LD_INT 1
71297: PUSH
71298: LD_INT 1
71300: NEG
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PUSH
71306: LD_INT 1
71308: PUSH
71309: LD_INT 2
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: PUSH
71316: LD_INT 0
71318: PUSH
71319: LD_INT 2
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: PUSH
71326: LD_INT 1
71328: NEG
71329: PUSH
71330: LD_INT 1
71332: PUSH
71333: EMPTY
71334: LIST
71335: LIST
71336: PUSH
71337: LD_INT 1
71339: NEG
71340: PUSH
71341: LD_INT 3
71343: NEG
71344: PUSH
71345: EMPTY
71346: LIST
71347: LIST
71348: PUSH
71349: LD_INT 0
71351: PUSH
71352: LD_INT 3
71354: NEG
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: PUSH
71360: LD_INT 1
71362: PUSH
71363: LD_INT 2
71365: NEG
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: PUSH
71371: EMPTY
71372: LIST
71373: LIST
71374: LIST
71375: LIST
71376: LIST
71377: LIST
71378: LIST
71379: LIST
71380: LIST
71381: LIST
71382: LIST
71383: LIST
71384: LIST
71385: LIST
71386: LIST
71387: LIST
71388: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71389: LD_ADDR_VAR 0 15
71393: PUSH
71394: LD_INT 0
71396: PUSH
71397: LD_INT 0
71399: PUSH
71400: EMPTY
71401: LIST
71402: LIST
71403: PUSH
71404: LD_INT 0
71406: PUSH
71407: LD_INT 1
71409: NEG
71410: PUSH
71411: EMPTY
71412: LIST
71413: LIST
71414: PUSH
71415: LD_INT 1
71417: PUSH
71418: LD_INT 0
71420: PUSH
71421: EMPTY
71422: LIST
71423: LIST
71424: PUSH
71425: LD_INT 1
71427: PUSH
71428: LD_INT 1
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: PUSH
71435: LD_INT 0
71437: PUSH
71438: LD_INT 1
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: PUSH
71445: LD_INT 1
71447: NEG
71448: PUSH
71449: LD_INT 0
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: PUSH
71456: LD_INT 1
71458: NEG
71459: PUSH
71460: LD_INT 1
71462: NEG
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: PUSH
71468: LD_INT 1
71470: PUSH
71471: LD_INT 1
71473: NEG
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: PUSH
71479: LD_INT 2
71481: PUSH
71482: LD_INT 0
71484: PUSH
71485: EMPTY
71486: LIST
71487: LIST
71488: PUSH
71489: LD_INT 2
71491: PUSH
71492: LD_INT 1
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: PUSH
71499: LD_INT 1
71501: NEG
71502: PUSH
71503: LD_INT 1
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PUSH
71510: LD_INT 2
71512: NEG
71513: PUSH
71514: LD_INT 0
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: PUSH
71521: LD_INT 2
71523: NEG
71524: PUSH
71525: LD_INT 1
71527: NEG
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: PUSH
71533: LD_INT 2
71535: PUSH
71536: LD_INT 1
71538: NEG
71539: PUSH
71540: EMPTY
71541: LIST
71542: LIST
71543: PUSH
71544: LD_INT 3
71546: PUSH
71547: LD_INT 0
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: PUSH
71554: LD_INT 3
71556: PUSH
71557: LD_INT 1
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: PUSH
71564: EMPTY
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71582: LD_ADDR_VAR 0 16
71586: PUSH
71587: LD_INT 0
71589: PUSH
71590: LD_INT 0
71592: PUSH
71593: EMPTY
71594: LIST
71595: LIST
71596: PUSH
71597: LD_INT 0
71599: PUSH
71600: LD_INT 1
71602: NEG
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: PUSH
71608: LD_INT 1
71610: PUSH
71611: LD_INT 0
71613: PUSH
71614: EMPTY
71615: LIST
71616: LIST
71617: PUSH
71618: LD_INT 1
71620: PUSH
71621: LD_INT 1
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: PUSH
71628: LD_INT 0
71630: PUSH
71631: LD_INT 1
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: PUSH
71638: LD_INT 1
71640: NEG
71641: PUSH
71642: LD_INT 0
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: PUSH
71649: LD_INT 1
71651: NEG
71652: PUSH
71653: LD_INT 1
71655: NEG
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PUSH
71661: LD_INT 1
71663: NEG
71664: PUSH
71665: LD_INT 2
71667: NEG
71668: PUSH
71669: EMPTY
71670: LIST
71671: LIST
71672: PUSH
71673: LD_INT 2
71675: PUSH
71676: LD_INT 1
71678: PUSH
71679: EMPTY
71680: LIST
71681: LIST
71682: PUSH
71683: LD_INT 2
71685: PUSH
71686: LD_INT 2
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: PUSH
71693: LD_INT 1
71695: PUSH
71696: LD_INT 2
71698: PUSH
71699: EMPTY
71700: LIST
71701: LIST
71702: PUSH
71703: LD_INT 2
71705: NEG
71706: PUSH
71707: LD_INT 1
71709: NEG
71710: PUSH
71711: EMPTY
71712: LIST
71713: LIST
71714: PUSH
71715: LD_INT 2
71717: NEG
71718: PUSH
71719: LD_INT 2
71721: NEG
71722: PUSH
71723: EMPTY
71724: LIST
71725: LIST
71726: PUSH
71727: LD_INT 3
71729: PUSH
71730: LD_INT 2
71732: PUSH
71733: EMPTY
71734: LIST
71735: LIST
71736: PUSH
71737: LD_INT 3
71739: PUSH
71740: LD_INT 3
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PUSH
71747: LD_INT 2
71749: PUSH
71750: LD_INT 3
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: LIST
71761: LIST
71762: LIST
71763: LIST
71764: LIST
71765: LIST
71766: LIST
71767: LIST
71768: LIST
71769: LIST
71770: LIST
71771: LIST
71772: LIST
71773: LIST
71774: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71775: LD_ADDR_VAR 0 17
71779: PUSH
71780: LD_INT 0
71782: PUSH
71783: LD_INT 0
71785: PUSH
71786: EMPTY
71787: LIST
71788: LIST
71789: PUSH
71790: LD_INT 0
71792: PUSH
71793: LD_INT 1
71795: NEG
71796: PUSH
71797: EMPTY
71798: LIST
71799: LIST
71800: PUSH
71801: LD_INT 1
71803: PUSH
71804: LD_INT 0
71806: PUSH
71807: EMPTY
71808: LIST
71809: LIST
71810: PUSH
71811: LD_INT 1
71813: PUSH
71814: LD_INT 1
71816: PUSH
71817: EMPTY
71818: LIST
71819: LIST
71820: PUSH
71821: LD_INT 0
71823: PUSH
71824: LD_INT 1
71826: PUSH
71827: EMPTY
71828: LIST
71829: LIST
71830: PUSH
71831: LD_INT 1
71833: NEG
71834: PUSH
71835: LD_INT 0
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: PUSH
71842: LD_INT 1
71844: NEG
71845: PUSH
71846: LD_INT 1
71848: NEG
71849: PUSH
71850: EMPTY
71851: LIST
71852: LIST
71853: PUSH
71854: LD_INT 1
71856: NEG
71857: PUSH
71858: LD_INT 2
71860: NEG
71861: PUSH
71862: EMPTY
71863: LIST
71864: LIST
71865: PUSH
71866: LD_INT 0
71868: PUSH
71869: LD_INT 2
71871: NEG
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: PUSH
71877: LD_INT 1
71879: PUSH
71880: LD_INT 1
71882: NEG
71883: PUSH
71884: EMPTY
71885: LIST
71886: LIST
71887: PUSH
71888: LD_INT 2
71890: PUSH
71891: LD_INT 0
71893: PUSH
71894: EMPTY
71895: LIST
71896: LIST
71897: PUSH
71898: LD_INT 2
71900: PUSH
71901: LD_INT 1
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: PUSH
71908: LD_INT 2
71910: PUSH
71911: LD_INT 2
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: PUSH
71918: LD_INT 1
71920: PUSH
71921: LD_INT 2
71923: PUSH
71924: EMPTY
71925: LIST
71926: LIST
71927: PUSH
71928: LD_INT 0
71930: PUSH
71931: LD_INT 2
71933: PUSH
71934: EMPTY
71935: LIST
71936: LIST
71937: PUSH
71938: LD_INT 1
71940: NEG
71941: PUSH
71942: LD_INT 1
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: PUSH
71949: LD_INT 2
71951: NEG
71952: PUSH
71953: LD_INT 0
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: PUSH
71960: LD_INT 2
71962: NEG
71963: PUSH
71964: LD_INT 1
71966: NEG
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: PUSH
71972: LD_INT 2
71974: NEG
71975: PUSH
71976: LD_INT 2
71978: NEG
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: PUSH
71984: EMPTY
71985: LIST
71986: LIST
71987: LIST
71988: LIST
71989: LIST
71990: LIST
71991: LIST
71992: LIST
71993: LIST
71994: LIST
71995: LIST
71996: LIST
71997: LIST
71998: LIST
71999: LIST
72000: LIST
72001: LIST
72002: LIST
72003: LIST
72004: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72005: LD_ADDR_VAR 0 18
72009: PUSH
72010: LD_INT 0
72012: PUSH
72013: LD_INT 0
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PUSH
72020: LD_INT 0
72022: PUSH
72023: LD_INT 1
72025: NEG
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: PUSH
72031: LD_INT 1
72033: PUSH
72034: LD_INT 0
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: PUSH
72041: LD_INT 1
72043: PUSH
72044: LD_INT 1
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: PUSH
72051: LD_INT 0
72053: PUSH
72054: LD_INT 1
72056: PUSH
72057: EMPTY
72058: LIST
72059: LIST
72060: PUSH
72061: LD_INT 1
72063: NEG
72064: PUSH
72065: LD_INT 0
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: PUSH
72072: LD_INT 1
72074: NEG
72075: PUSH
72076: LD_INT 1
72078: NEG
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: PUSH
72084: LD_INT 1
72086: NEG
72087: PUSH
72088: LD_INT 2
72090: NEG
72091: PUSH
72092: EMPTY
72093: LIST
72094: LIST
72095: PUSH
72096: LD_INT 0
72098: PUSH
72099: LD_INT 2
72101: NEG
72102: PUSH
72103: EMPTY
72104: LIST
72105: LIST
72106: PUSH
72107: LD_INT 1
72109: PUSH
72110: LD_INT 1
72112: NEG
72113: PUSH
72114: EMPTY
72115: LIST
72116: LIST
72117: PUSH
72118: LD_INT 2
72120: PUSH
72121: LD_INT 0
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: PUSH
72128: LD_INT 2
72130: PUSH
72131: LD_INT 1
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: PUSH
72138: LD_INT 2
72140: PUSH
72141: LD_INT 2
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: PUSH
72148: LD_INT 1
72150: PUSH
72151: LD_INT 2
72153: PUSH
72154: EMPTY
72155: LIST
72156: LIST
72157: PUSH
72158: LD_INT 0
72160: PUSH
72161: LD_INT 2
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: PUSH
72168: LD_INT 1
72170: NEG
72171: PUSH
72172: LD_INT 1
72174: PUSH
72175: EMPTY
72176: LIST
72177: LIST
72178: PUSH
72179: LD_INT 2
72181: NEG
72182: PUSH
72183: LD_INT 0
72185: PUSH
72186: EMPTY
72187: LIST
72188: LIST
72189: PUSH
72190: LD_INT 2
72192: NEG
72193: PUSH
72194: LD_INT 1
72196: NEG
72197: PUSH
72198: EMPTY
72199: LIST
72200: LIST
72201: PUSH
72202: LD_INT 2
72204: NEG
72205: PUSH
72206: LD_INT 2
72208: NEG
72209: PUSH
72210: EMPTY
72211: LIST
72212: LIST
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: LIST
72218: LIST
72219: LIST
72220: LIST
72221: LIST
72222: LIST
72223: LIST
72224: LIST
72225: LIST
72226: LIST
72227: LIST
72228: LIST
72229: LIST
72230: LIST
72231: LIST
72232: LIST
72233: LIST
72234: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72235: LD_ADDR_VAR 0 19
72239: PUSH
72240: LD_INT 0
72242: PUSH
72243: LD_INT 0
72245: PUSH
72246: EMPTY
72247: LIST
72248: LIST
72249: PUSH
72250: LD_INT 0
72252: PUSH
72253: LD_INT 1
72255: NEG
72256: PUSH
72257: EMPTY
72258: LIST
72259: LIST
72260: PUSH
72261: LD_INT 1
72263: PUSH
72264: LD_INT 0
72266: PUSH
72267: EMPTY
72268: LIST
72269: LIST
72270: PUSH
72271: LD_INT 1
72273: PUSH
72274: LD_INT 1
72276: PUSH
72277: EMPTY
72278: LIST
72279: LIST
72280: PUSH
72281: LD_INT 0
72283: PUSH
72284: LD_INT 1
72286: PUSH
72287: EMPTY
72288: LIST
72289: LIST
72290: PUSH
72291: LD_INT 1
72293: NEG
72294: PUSH
72295: LD_INT 0
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: PUSH
72302: LD_INT 1
72304: NEG
72305: PUSH
72306: LD_INT 1
72308: NEG
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: LD_INT 1
72316: NEG
72317: PUSH
72318: LD_INT 2
72320: NEG
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: PUSH
72326: LD_INT 0
72328: PUSH
72329: LD_INT 2
72331: NEG
72332: PUSH
72333: EMPTY
72334: LIST
72335: LIST
72336: PUSH
72337: LD_INT 1
72339: PUSH
72340: LD_INT 1
72342: NEG
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: PUSH
72348: LD_INT 2
72350: PUSH
72351: LD_INT 0
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: PUSH
72358: LD_INT 2
72360: PUSH
72361: LD_INT 1
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 2
72370: PUSH
72371: LD_INT 2
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: PUSH
72378: LD_INT 1
72380: PUSH
72381: LD_INT 2
72383: PUSH
72384: EMPTY
72385: LIST
72386: LIST
72387: PUSH
72388: LD_INT 0
72390: PUSH
72391: LD_INT 2
72393: PUSH
72394: EMPTY
72395: LIST
72396: LIST
72397: PUSH
72398: LD_INT 1
72400: NEG
72401: PUSH
72402: LD_INT 1
72404: PUSH
72405: EMPTY
72406: LIST
72407: LIST
72408: PUSH
72409: LD_INT 2
72411: NEG
72412: PUSH
72413: LD_INT 0
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: PUSH
72420: LD_INT 2
72422: NEG
72423: PUSH
72424: LD_INT 1
72426: NEG
72427: PUSH
72428: EMPTY
72429: LIST
72430: LIST
72431: PUSH
72432: LD_INT 2
72434: NEG
72435: PUSH
72436: LD_INT 2
72438: NEG
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: PUSH
72444: EMPTY
72445: LIST
72446: LIST
72447: LIST
72448: LIST
72449: LIST
72450: LIST
72451: LIST
72452: LIST
72453: LIST
72454: LIST
72455: LIST
72456: LIST
72457: LIST
72458: LIST
72459: LIST
72460: LIST
72461: LIST
72462: LIST
72463: LIST
72464: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72465: LD_ADDR_VAR 0 20
72469: PUSH
72470: LD_INT 0
72472: PUSH
72473: LD_INT 0
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: PUSH
72480: LD_INT 0
72482: PUSH
72483: LD_INT 1
72485: NEG
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: PUSH
72491: LD_INT 1
72493: PUSH
72494: LD_INT 0
72496: PUSH
72497: EMPTY
72498: LIST
72499: LIST
72500: PUSH
72501: LD_INT 1
72503: PUSH
72504: LD_INT 1
72506: PUSH
72507: EMPTY
72508: LIST
72509: LIST
72510: PUSH
72511: LD_INT 0
72513: PUSH
72514: LD_INT 1
72516: PUSH
72517: EMPTY
72518: LIST
72519: LIST
72520: PUSH
72521: LD_INT 1
72523: NEG
72524: PUSH
72525: LD_INT 0
72527: PUSH
72528: EMPTY
72529: LIST
72530: LIST
72531: PUSH
72532: LD_INT 1
72534: NEG
72535: PUSH
72536: LD_INT 1
72538: NEG
72539: PUSH
72540: EMPTY
72541: LIST
72542: LIST
72543: PUSH
72544: LD_INT 1
72546: NEG
72547: PUSH
72548: LD_INT 2
72550: NEG
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: PUSH
72556: LD_INT 0
72558: PUSH
72559: LD_INT 2
72561: NEG
72562: PUSH
72563: EMPTY
72564: LIST
72565: LIST
72566: PUSH
72567: LD_INT 1
72569: PUSH
72570: LD_INT 1
72572: NEG
72573: PUSH
72574: EMPTY
72575: LIST
72576: LIST
72577: PUSH
72578: LD_INT 2
72580: PUSH
72581: LD_INT 0
72583: PUSH
72584: EMPTY
72585: LIST
72586: LIST
72587: PUSH
72588: LD_INT 2
72590: PUSH
72591: LD_INT 1
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: PUSH
72598: LD_INT 2
72600: PUSH
72601: LD_INT 2
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: PUSH
72608: LD_INT 1
72610: PUSH
72611: LD_INT 2
72613: PUSH
72614: EMPTY
72615: LIST
72616: LIST
72617: PUSH
72618: LD_INT 0
72620: PUSH
72621: LD_INT 2
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: PUSH
72628: LD_INT 1
72630: NEG
72631: PUSH
72632: LD_INT 1
72634: PUSH
72635: EMPTY
72636: LIST
72637: LIST
72638: PUSH
72639: LD_INT 2
72641: NEG
72642: PUSH
72643: LD_INT 0
72645: PUSH
72646: EMPTY
72647: LIST
72648: LIST
72649: PUSH
72650: LD_INT 2
72652: NEG
72653: PUSH
72654: LD_INT 1
72656: NEG
72657: PUSH
72658: EMPTY
72659: LIST
72660: LIST
72661: PUSH
72662: LD_INT 2
72664: NEG
72665: PUSH
72666: LD_INT 2
72668: NEG
72669: PUSH
72670: EMPTY
72671: LIST
72672: LIST
72673: PUSH
72674: EMPTY
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: LIST
72684: LIST
72685: LIST
72686: LIST
72687: LIST
72688: LIST
72689: LIST
72690: LIST
72691: LIST
72692: LIST
72693: LIST
72694: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72695: LD_ADDR_VAR 0 21
72699: PUSH
72700: LD_INT 0
72702: PUSH
72703: LD_INT 0
72705: PUSH
72706: EMPTY
72707: LIST
72708: LIST
72709: PUSH
72710: LD_INT 0
72712: PUSH
72713: LD_INT 1
72715: NEG
72716: PUSH
72717: EMPTY
72718: LIST
72719: LIST
72720: PUSH
72721: LD_INT 1
72723: PUSH
72724: LD_INT 0
72726: PUSH
72727: EMPTY
72728: LIST
72729: LIST
72730: PUSH
72731: LD_INT 1
72733: PUSH
72734: LD_INT 1
72736: PUSH
72737: EMPTY
72738: LIST
72739: LIST
72740: PUSH
72741: LD_INT 0
72743: PUSH
72744: LD_INT 1
72746: PUSH
72747: EMPTY
72748: LIST
72749: LIST
72750: PUSH
72751: LD_INT 1
72753: NEG
72754: PUSH
72755: LD_INT 0
72757: PUSH
72758: EMPTY
72759: LIST
72760: LIST
72761: PUSH
72762: LD_INT 1
72764: NEG
72765: PUSH
72766: LD_INT 1
72768: NEG
72769: PUSH
72770: EMPTY
72771: LIST
72772: LIST
72773: PUSH
72774: LD_INT 1
72776: NEG
72777: PUSH
72778: LD_INT 2
72780: NEG
72781: PUSH
72782: EMPTY
72783: LIST
72784: LIST
72785: PUSH
72786: LD_INT 0
72788: PUSH
72789: LD_INT 2
72791: NEG
72792: PUSH
72793: EMPTY
72794: LIST
72795: LIST
72796: PUSH
72797: LD_INT 1
72799: PUSH
72800: LD_INT 1
72802: NEG
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: PUSH
72808: LD_INT 2
72810: PUSH
72811: LD_INT 0
72813: PUSH
72814: EMPTY
72815: LIST
72816: LIST
72817: PUSH
72818: LD_INT 2
72820: PUSH
72821: LD_INT 1
72823: PUSH
72824: EMPTY
72825: LIST
72826: LIST
72827: PUSH
72828: LD_INT 2
72830: PUSH
72831: LD_INT 2
72833: PUSH
72834: EMPTY
72835: LIST
72836: LIST
72837: PUSH
72838: LD_INT 1
72840: PUSH
72841: LD_INT 2
72843: PUSH
72844: EMPTY
72845: LIST
72846: LIST
72847: PUSH
72848: LD_INT 0
72850: PUSH
72851: LD_INT 2
72853: PUSH
72854: EMPTY
72855: LIST
72856: LIST
72857: PUSH
72858: LD_INT 1
72860: NEG
72861: PUSH
72862: LD_INT 1
72864: PUSH
72865: EMPTY
72866: LIST
72867: LIST
72868: PUSH
72869: LD_INT 2
72871: NEG
72872: PUSH
72873: LD_INT 0
72875: PUSH
72876: EMPTY
72877: LIST
72878: LIST
72879: PUSH
72880: LD_INT 2
72882: NEG
72883: PUSH
72884: LD_INT 1
72886: NEG
72887: PUSH
72888: EMPTY
72889: LIST
72890: LIST
72891: PUSH
72892: LD_INT 2
72894: NEG
72895: PUSH
72896: LD_INT 2
72898: NEG
72899: PUSH
72900: EMPTY
72901: LIST
72902: LIST
72903: PUSH
72904: EMPTY
72905: LIST
72906: LIST
72907: LIST
72908: LIST
72909: LIST
72910: LIST
72911: LIST
72912: LIST
72913: LIST
72914: LIST
72915: LIST
72916: LIST
72917: LIST
72918: LIST
72919: LIST
72920: LIST
72921: LIST
72922: LIST
72923: LIST
72924: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72925: LD_ADDR_VAR 0 22
72929: PUSH
72930: LD_INT 0
72932: PUSH
72933: LD_INT 0
72935: PUSH
72936: EMPTY
72937: LIST
72938: LIST
72939: PUSH
72940: LD_INT 0
72942: PUSH
72943: LD_INT 1
72945: NEG
72946: PUSH
72947: EMPTY
72948: LIST
72949: LIST
72950: PUSH
72951: LD_INT 1
72953: PUSH
72954: LD_INT 0
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: LD_INT 1
72963: PUSH
72964: LD_INT 1
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: PUSH
72971: LD_INT 0
72973: PUSH
72974: LD_INT 1
72976: PUSH
72977: EMPTY
72978: LIST
72979: LIST
72980: PUSH
72981: LD_INT 1
72983: NEG
72984: PUSH
72985: LD_INT 0
72987: PUSH
72988: EMPTY
72989: LIST
72990: LIST
72991: PUSH
72992: LD_INT 1
72994: NEG
72995: PUSH
72996: LD_INT 1
72998: NEG
72999: PUSH
73000: EMPTY
73001: LIST
73002: LIST
73003: PUSH
73004: LD_INT 1
73006: NEG
73007: PUSH
73008: LD_INT 2
73010: NEG
73011: PUSH
73012: EMPTY
73013: LIST
73014: LIST
73015: PUSH
73016: LD_INT 0
73018: PUSH
73019: LD_INT 2
73021: NEG
73022: PUSH
73023: EMPTY
73024: LIST
73025: LIST
73026: PUSH
73027: LD_INT 1
73029: PUSH
73030: LD_INT 1
73032: NEG
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: PUSH
73038: LD_INT 2
73040: PUSH
73041: LD_INT 0
73043: PUSH
73044: EMPTY
73045: LIST
73046: LIST
73047: PUSH
73048: LD_INT 2
73050: PUSH
73051: LD_INT 1
73053: PUSH
73054: EMPTY
73055: LIST
73056: LIST
73057: PUSH
73058: LD_INT 2
73060: PUSH
73061: LD_INT 2
73063: PUSH
73064: EMPTY
73065: LIST
73066: LIST
73067: PUSH
73068: LD_INT 1
73070: PUSH
73071: LD_INT 2
73073: PUSH
73074: EMPTY
73075: LIST
73076: LIST
73077: PUSH
73078: LD_INT 0
73080: PUSH
73081: LD_INT 2
73083: PUSH
73084: EMPTY
73085: LIST
73086: LIST
73087: PUSH
73088: LD_INT 1
73090: NEG
73091: PUSH
73092: LD_INT 1
73094: PUSH
73095: EMPTY
73096: LIST
73097: LIST
73098: PUSH
73099: LD_INT 2
73101: NEG
73102: PUSH
73103: LD_INT 0
73105: PUSH
73106: EMPTY
73107: LIST
73108: LIST
73109: PUSH
73110: LD_INT 2
73112: NEG
73113: PUSH
73114: LD_INT 1
73116: NEG
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: PUSH
73122: LD_INT 2
73124: NEG
73125: PUSH
73126: LD_INT 2
73128: NEG
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: PUSH
73134: EMPTY
73135: LIST
73136: LIST
73137: LIST
73138: LIST
73139: LIST
73140: LIST
73141: LIST
73142: LIST
73143: LIST
73144: LIST
73145: LIST
73146: LIST
73147: LIST
73148: LIST
73149: LIST
73150: LIST
73151: LIST
73152: LIST
73153: LIST
73154: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
73155: LD_ADDR_VAR 0 23
73159: PUSH
73160: LD_INT 0
73162: PUSH
73163: LD_INT 0
73165: PUSH
73166: EMPTY
73167: LIST
73168: LIST
73169: PUSH
73170: LD_INT 0
73172: PUSH
73173: LD_INT 1
73175: NEG
73176: PUSH
73177: EMPTY
73178: LIST
73179: LIST
73180: PUSH
73181: LD_INT 1
73183: PUSH
73184: LD_INT 0
73186: PUSH
73187: EMPTY
73188: LIST
73189: LIST
73190: PUSH
73191: LD_INT 1
73193: PUSH
73194: LD_INT 1
73196: PUSH
73197: EMPTY
73198: LIST
73199: LIST
73200: PUSH
73201: LD_INT 0
73203: PUSH
73204: LD_INT 1
73206: PUSH
73207: EMPTY
73208: LIST
73209: LIST
73210: PUSH
73211: LD_INT 1
73213: NEG
73214: PUSH
73215: LD_INT 0
73217: PUSH
73218: EMPTY
73219: LIST
73220: LIST
73221: PUSH
73222: LD_INT 1
73224: NEG
73225: PUSH
73226: LD_INT 1
73228: NEG
73229: PUSH
73230: EMPTY
73231: LIST
73232: LIST
73233: PUSH
73234: LD_INT 1
73236: NEG
73237: PUSH
73238: LD_INT 2
73240: NEG
73241: PUSH
73242: EMPTY
73243: LIST
73244: LIST
73245: PUSH
73246: LD_INT 0
73248: PUSH
73249: LD_INT 2
73251: NEG
73252: PUSH
73253: EMPTY
73254: LIST
73255: LIST
73256: PUSH
73257: LD_INT 1
73259: PUSH
73260: LD_INT 1
73262: NEG
73263: PUSH
73264: EMPTY
73265: LIST
73266: LIST
73267: PUSH
73268: LD_INT 2
73270: PUSH
73271: LD_INT 0
73273: PUSH
73274: EMPTY
73275: LIST
73276: LIST
73277: PUSH
73278: LD_INT 2
73280: PUSH
73281: LD_INT 1
73283: PUSH
73284: EMPTY
73285: LIST
73286: LIST
73287: PUSH
73288: LD_INT 2
73290: PUSH
73291: LD_INT 2
73293: PUSH
73294: EMPTY
73295: LIST
73296: LIST
73297: PUSH
73298: LD_INT 1
73300: PUSH
73301: LD_INT 2
73303: PUSH
73304: EMPTY
73305: LIST
73306: LIST
73307: PUSH
73308: LD_INT 0
73310: PUSH
73311: LD_INT 2
73313: PUSH
73314: EMPTY
73315: LIST
73316: LIST
73317: PUSH
73318: LD_INT 1
73320: NEG
73321: PUSH
73322: LD_INT 1
73324: PUSH
73325: EMPTY
73326: LIST
73327: LIST
73328: PUSH
73329: LD_INT 2
73331: NEG
73332: PUSH
73333: LD_INT 0
73335: PUSH
73336: EMPTY
73337: LIST
73338: LIST
73339: PUSH
73340: LD_INT 2
73342: NEG
73343: PUSH
73344: LD_INT 1
73346: NEG
73347: PUSH
73348: EMPTY
73349: LIST
73350: LIST
73351: PUSH
73352: LD_INT 2
73354: NEG
73355: PUSH
73356: LD_INT 2
73358: NEG
73359: PUSH
73360: EMPTY
73361: LIST
73362: LIST
73363: PUSH
73364: LD_INT 2
73366: NEG
73367: PUSH
73368: LD_INT 3
73370: NEG
73371: PUSH
73372: EMPTY
73373: LIST
73374: LIST
73375: PUSH
73376: LD_INT 1
73378: NEG
73379: PUSH
73380: LD_INT 3
73382: NEG
73383: PUSH
73384: EMPTY
73385: LIST
73386: LIST
73387: PUSH
73388: LD_INT 1
73390: PUSH
73391: LD_INT 2
73393: NEG
73394: PUSH
73395: EMPTY
73396: LIST
73397: LIST
73398: PUSH
73399: LD_INT 2
73401: PUSH
73402: LD_INT 1
73404: NEG
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: LIST
73416: LIST
73417: LIST
73418: LIST
73419: LIST
73420: LIST
73421: LIST
73422: LIST
73423: LIST
73424: LIST
73425: LIST
73426: LIST
73427: LIST
73428: LIST
73429: LIST
73430: LIST
73431: LIST
73432: LIST
73433: LIST
73434: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
73435: LD_ADDR_VAR 0 24
73439: PUSH
73440: LD_INT 0
73442: PUSH
73443: LD_INT 0
73445: PUSH
73446: EMPTY
73447: LIST
73448: LIST
73449: PUSH
73450: LD_INT 0
73452: PUSH
73453: LD_INT 1
73455: NEG
73456: PUSH
73457: EMPTY
73458: LIST
73459: LIST
73460: PUSH
73461: LD_INT 1
73463: PUSH
73464: LD_INT 0
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: PUSH
73471: LD_INT 1
73473: PUSH
73474: LD_INT 1
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: PUSH
73481: LD_INT 0
73483: PUSH
73484: LD_INT 1
73486: PUSH
73487: EMPTY
73488: LIST
73489: LIST
73490: PUSH
73491: LD_INT 1
73493: NEG
73494: PUSH
73495: LD_INT 0
73497: PUSH
73498: EMPTY
73499: LIST
73500: LIST
73501: PUSH
73502: LD_INT 1
73504: NEG
73505: PUSH
73506: LD_INT 1
73508: NEG
73509: PUSH
73510: EMPTY
73511: LIST
73512: LIST
73513: PUSH
73514: LD_INT 1
73516: NEG
73517: PUSH
73518: LD_INT 2
73520: NEG
73521: PUSH
73522: EMPTY
73523: LIST
73524: LIST
73525: PUSH
73526: LD_INT 0
73528: PUSH
73529: LD_INT 2
73531: NEG
73532: PUSH
73533: EMPTY
73534: LIST
73535: LIST
73536: PUSH
73537: LD_INT 1
73539: PUSH
73540: LD_INT 1
73542: NEG
73543: PUSH
73544: EMPTY
73545: LIST
73546: LIST
73547: PUSH
73548: LD_INT 2
73550: PUSH
73551: LD_INT 0
73553: PUSH
73554: EMPTY
73555: LIST
73556: LIST
73557: PUSH
73558: LD_INT 2
73560: PUSH
73561: LD_INT 1
73563: PUSH
73564: EMPTY
73565: LIST
73566: LIST
73567: PUSH
73568: LD_INT 2
73570: PUSH
73571: LD_INT 2
73573: PUSH
73574: EMPTY
73575: LIST
73576: LIST
73577: PUSH
73578: LD_INT 1
73580: PUSH
73581: LD_INT 2
73583: PUSH
73584: EMPTY
73585: LIST
73586: LIST
73587: PUSH
73588: LD_INT 0
73590: PUSH
73591: LD_INT 2
73593: PUSH
73594: EMPTY
73595: LIST
73596: LIST
73597: PUSH
73598: LD_INT 1
73600: NEG
73601: PUSH
73602: LD_INT 1
73604: PUSH
73605: EMPTY
73606: LIST
73607: LIST
73608: PUSH
73609: LD_INT 2
73611: NEG
73612: PUSH
73613: LD_INT 0
73615: PUSH
73616: EMPTY
73617: LIST
73618: LIST
73619: PUSH
73620: LD_INT 2
73622: NEG
73623: PUSH
73624: LD_INT 1
73626: NEG
73627: PUSH
73628: EMPTY
73629: LIST
73630: LIST
73631: PUSH
73632: LD_INT 2
73634: NEG
73635: PUSH
73636: LD_INT 2
73638: NEG
73639: PUSH
73640: EMPTY
73641: LIST
73642: LIST
73643: PUSH
73644: LD_INT 1
73646: PUSH
73647: LD_INT 2
73649: NEG
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: PUSH
73655: LD_INT 2
73657: PUSH
73658: LD_INT 1
73660: NEG
73661: PUSH
73662: EMPTY
73663: LIST
73664: LIST
73665: PUSH
73666: LD_INT 3
73668: PUSH
73669: LD_INT 1
73671: PUSH
73672: EMPTY
73673: LIST
73674: LIST
73675: PUSH
73676: LD_INT 3
73678: PUSH
73679: LD_INT 2
73681: PUSH
73682: EMPTY
73683: LIST
73684: LIST
73685: PUSH
73686: EMPTY
73687: LIST
73688: LIST
73689: LIST
73690: LIST
73691: LIST
73692: LIST
73693: LIST
73694: LIST
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: LIST
73700: LIST
73701: LIST
73702: LIST
73703: LIST
73704: LIST
73705: LIST
73706: LIST
73707: LIST
73708: LIST
73709: LIST
73710: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
73711: LD_ADDR_VAR 0 25
73715: PUSH
73716: LD_INT 0
73718: PUSH
73719: LD_INT 0
73721: PUSH
73722: EMPTY
73723: LIST
73724: LIST
73725: PUSH
73726: LD_INT 0
73728: PUSH
73729: LD_INT 1
73731: NEG
73732: PUSH
73733: EMPTY
73734: LIST
73735: LIST
73736: PUSH
73737: LD_INT 1
73739: PUSH
73740: LD_INT 0
73742: PUSH
73743: EMPTY
73744: LIST
73745: LIST
73746: PUSH
73747: LD_INT 1
73749: PUSH
73750: LD_INT 1
73752: PUSH
73753: EMPTY
73754: LIST
73755: LIST
73756: PUSH
73757: LD_INT 0
73759: PUSH
73760: LD_INT 1
73762: PUSH
73763: EMPTY
73764: LIST
73765: LIST
73766: PUSH
73767: LD_INT 1
73769: NEG
73770: PUSH
73771: LD_INT 0
73773: PUSH
73774: EMPTY
73775: LIST
73776: LIST
73777: PUSH
73778: LD_INT 1
73780: NEG
73781: PUSH
73782: LD_INT 1
73784: NEG
73785: PUSH
73786: EMPTY
73787: LIST
73788: LIST
73789: PUSH
73790: LD_INT 1
73792: NEG
73793: PUSH
73794: LD_INT 2
73796: NEG
73797: PUSH
73798: EMPTY
73799: LIST
73800: LIST
73801: PUSH
73802: LD_INT 0
73804: PUSH
73805: LD_INT 2
73807: NEG
73808: PUSH
73809: EMPTY
73810: LIST
73811: LIST
73812: PUSH
73813: LD_INT 1
73815: PUSH
73816: LD_INT 1
73818: NEG
73819: PUSH
73820: EMPTY
73821: LIST
73822: LIST
73823: PUSH
73824: LD_INT 2
73826: PUSH
73827: LD_INT 0
73829: PUSH
73830: EMPTY
73831: LIST
73832: LIST
73833: PUSH
73834: LD_INT 2
73836: PUSH
73837: LD_INT 1
73839: PUSH
73840: EMPTY
73841: LIST
73842: LIST
73843: PUSH
73844: LD_INT 2
73846: PUSH
73847: LD_INT 2
73849: PUSH
73850: EMPTY
73851: LIST
73852: LIST
73853: PUSH
73854: LD_INT 1
73856: PUSH
73857: LD_INT 2
73859: PUSH
73860: EMPTY
73861: LIST
73862: LIST
73863: PUSH
73864: LD_INT 0
73866: PUSH
73867: LD_INT 2
73869: PUSH
73870: EMPTY
73871: LIST
73872: LIST
73873: PUSH
73874: LD_INT 1
73876: NEG
73877: PUSH
73878: LD_INT 1
73880: PUSH
73881: EMPTY
73882: LIST
73883: LIST
73884: PUSH
73885: LD_INT 2
73887: NEG
73888: PUSH
73889: LD_INT 0
73891: PUSH
73892: EMPTY
73893: LIST
73894: LIST
73895: PUSH
73896: LD_INT 2
73898: NEG
73899: PUSH
73900: LD_INT 1
73902: NEG
73903: PUSH
73904: EMPTY
73905: LIST
73906: LIST
73907: PUSH
73908: LD_INT 2
73910: NEG
73911: PUSH
73912: LD_INT 2
73914: NEG
73915: PUSH
73916: EMPTY
73917: LIST
73918: LIST
73919: PUSH
73920: LD_INT 3
73922: PUSH
73923: LD_INT 1
73925: PUSH
73926: EMPTY
73927: LIST
73928: LIST
73929: PUSH
73930: LD_INT 3
73932: PUSH
73933: LD_INT 2
73935: PUSH
73936: EMPTY
73937: LIST
73938: LIST
73939: PUSH
73940: LD_INT 2
73942: PUSH
73943: LD_INT 3
73945: PUSH
73946: EMPTY
73947: LIST
73948: LIST
73949: PUSH
73950: LD_INT 1
73952: PUSH
73953: LD_INT 3
73955: PUSH
73956: EMPTY
73957: LIST
73958: LIST
73959: PUSH
73960: EMPTY
73961: LIST
73962: LIST
73963: LIST
73964: LIST
73965: LIST
73966: LIST
73967: LIST
73968: LIST
73969: LIST
73970: LIST
73971: LIST
73972: LIST
73973: LIST
73974: LIST
73975: LIST
73976: LIST
73977: LIST
73978: LIST
73979: LIST
73980: LIST
73981: LIST
73982: LIST
73983: LIST
73984: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
73985: LD_ADDR_VAR 0 26
73989: PUSH
73990: LD_INT 0
73992: PUSH
73993: LD_INT 0
73995: PUSH
73996: EMPTY
73997: LIST
73998: LIST
73999: PUSH
74000: LD_INT 0
74002: PUSH
74003: LD_INT 1
74005: NEG
74006: PUSH
74007: EMPTY
74008: LIST
74009: LIST
74010: PUSH
74011: LD_INT 1
74013: PUSH
74014: LD_INT 0
74016: PUSH
74017: EMPTY
74018: LIST
74019: LIST
74020: PUSH
74021: LD_INT 1
74023: PUSH
74024: LD_INT 1
74026: PUSH
74027: EMPTY
74028: LIST
74029: LIST
74030: PUSH
74031: LD_INT 0
74033: PUSH
74034: LD_INT 1
74036: PUSH
74037: EMPTY
74038: LIST
74039: LIST
74040: PUSH
74041: LD_INT 1
74043: NEG
74044: PUSH
74045: LD_INT 0
74047: PUSH
74048: EMPTY
74049: LIST
74050: LIST
74051: PUSH
74052: LD_INT 1
74054: NEG
74055: PUSH
74056: LD_INT 1
74058: NEG
74059: PUSH
74060: EMPTY
74061: LIST
74062: LIST
74063: PUSH
74064: LD_INT 1
74066: NEG
74067: PUSH
74068: LD_INT 2
74070: NEG
74071: PUSH
74072: EMPTY
74073: LIST
74074: LIST
74075: PUSH
74076: LD_INT 0
74078: PUSH
74079: LD_INT 2
74081: NEG
74082: PUSH
74083: EMPTY
74084: LIST
74085: LIST
74086: PUSH
74087: LD_INT 1
74089: PUSH
74090: LD_INT 1
74092: NEG
74093: PUSH
74094: EMPTY
74095: LIST
74096: LIST
74097: PUSH
74098: LD_INT 2
74100: PUSH
74101: LD_INT 0
74103: PUSH
74104: EMPTY
74105: LIST
74106: LIST
74107: PUSH
74108: LD_INT 2
74110: PUSH
74111: LD_INT 1
74113: PUSH
74114: EMPTY
74115: LIST
74116: LIST
74117: PUSH
74118: LD_INT 2
74120: PUSH
74121: LD_INT 2
74123: PUSH
74124: EMPTY
74125: LIST
74126: LIST
74127: PUSH
74128: LD_INT 1
74130: PUSH
74131: LD_INT 2
74133: PUSH
74134: EMPTY
74135: LIST
74136: LIST
74137: PUSH
74138: LD_INT 0
74140: PUSH
74141: LD_INT 2
74143: PUSH
74144: EMPTY
74145: LIST
74146: LIST
74147: PUSH
74148: LD_INT 1
74150: NEG
74151: PUSH
74152: LD_INT 1
74154: PUSH
74155: EMPTY
74156: LIST
74157: LIST
74158: PUSH
74159: LD_INT 2
74161: NEG
74162: PUSH
74163: LD_INT 0
74165: PUSH
74166: EMPTY
74167: LIST
74168: LIST
74169: PUSH
74170: LD_INT 2
74172: NEG
74173: PUSH
74174: LD_INT 1
74176: NEG
74177: PUSH
74178: EMPTY
74179: LIST
74180: LIST
74181: PUSH
74182: LD_INT 2
74184: NEG
74185: PUSH
74186: LD_INT 2
74188: NEG
74189: PUSH
74190: EMPTY
74191: LIST
74192: LIST
74193: PUSH
74194: LD_INT 2
74196: PUSH
74197: LD_INT 3
74199: PUSH
74200: EMPTY
74201: LIST
74202: LIST
74203: PUSH
74204: LD_INT 1
74206: PUSH
74207: LD_INT 3
74209: PUSH
74210: EMPTY
74211: LIST
74212: LIST
74213: PUSH
74214: LD_INT 1
74216: NEG
74217: PUSH
74218: LD_INT 2
74220: PUSH
74221: EMPTY
74222: LIST
74223: LIST
74224: PUSH
74225: LD_INT 2
74227: NEG
74228: PUSH
74229: LD_INT 1
74231: PUSH
74232: EMPTY
74233: LIST
74234: LIST
74235: PUSH
74236: EMPTY
74237: LIST
74238: LIST
74239: LIST
74240: LIST
74241: LIST
74242: LIST
74243: LIST
74244: LIST
74245: LIST
74246: LIST
74247: LIST
74248: LIST
74249: LIST
74250: LIST
74251: LIST
74252: LIST
74253: LIST
74254: LIST
74255: LIST
74256: LIST
74257: LIST
74258: LIST
74259: LIST
74260: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
74261: LD_ADDR_VAR 0 27
74265: PUSH
74266: LD_INT 0
74268: PUSH
74269: LD_INT 0
74271: PUSH
74272: EMPTY
74273: LIST
74274: LIST
74275: PUSH
74276: LD_INT 0
74278: PUSH
74279: LD_INT 1
74281: NEG
74282: PUSH
74283: EMPTY
74284: LIST
74285: LIST
74286: PUSH
74287: LD_INT 1
74289: PUSH
74290: LD_INT 0
74292: PUSH
74293: EMPTY
74294: LIST
74295: LIST
74296: PUSH
74297: LD_INT 1
74299: PUSH
74300: LD_INT 1
74302: PUSH
74303: EMPTY
74304: LIST
74305: LIST
74306: PUSH
74307: LD_INT 0
74309: PUSH
74310: LD_INT 1
74312: PUSH
74313: EMPTY
74314: LIST
74315: LIST
74316: PUSH
74317: LD_INT 1
74319: NEG
74320: PUSH
74321: LD_INT 0
74323: PUSH
74324: EMPTY
74325: LIST
74326: LIST
74327: PUSH
74328: LD_INT 1
74330: NEG
74331: PUSH
74332: LD_INT 1
74334: NEG
74335: PUSH
74336: EMPTY
74337: LIST
74338: LIST
74339: PUSH
74340: LD_INT 1
74342: NEG
74343: PUSH
74344: LD_INT 2
74346: NEG
74347: PUSH
74348: EMPTY
74349: LIST
74350: LIST
74351: PUSH
74352: LD_INT 0
74354: PUSH
74355: LD_INT 2
74357: NEG
74358: PUSH
74359: EMPTY
74360: LIST
74361: LIST
74362: PUSH
74363: LD_INT 1
74365: PUSH
74366: LD_INT 1
74368: NEG
74369: PUSH
74370: EMPTY
74371: LIST
74372: LIST
74373: PUSH
74374: LD_INT 2
74376: PUSH
74377: LD_INT 0
74379: PUSH
74380: EMPTY
74381: LIST
74382: LIST
74383: PUSH
74384: LD_INT 2
74386: PUSH
74387: LD_INT 1
74389: PUSH
74390: EMPTY
74391: LIST
74392: LIST
74393: PUSH
74394: LD_INT 2
74396: PUSH
74397: LD_INT 2
74399: PUSH
74400: EMPTY
74401: LIST
74402: LIST
74403: PUSH
74404: LD_INT 1
74406: PUSH
74407: LD_INT 2
74409: PUSH
74410: EMPTY
74411: LIST
74412: LIST
74413: PUSH
74414: LD_INT 0
74416: PUSH
74417: LD_INT 2
74419: PUSH
74420: EMPTY
74421: LIST
74422: LIST
74423: PUSH
74424: LD_INT 1
74426: NEG
74427: PUSH
74428: LD_INT 1
74430: PUSH
74431: EMPTY
74432: LIST
74433: LIST
74434: PUSH
74435: LD_INT 2
74437: NEG
74438: PUSH
74439: LD_INT 0
74441: PUSH
74442: EMPTY
74443: LIST
74444: LIST
74445: PUSH
74446: LD_INT 2
74448: NEG
74449: PUSH
74450: LD_INT 1
74452: NEG
74453: PUSH
74454: EMPTY
74455: LIST
74456: LIST
74457: PUSH
74458: LD_INT 2
74460: NEG
74461: PUSH
74462: LD_INT 2
74464: NEG
74465: PUSH
74466: EMPTY
74467: LIST
74468: LIST
74469: PUSH
74470: LD_INT 1
74472: NEG
74473: PUSH
74474: LD_INT 2
74476: PUSH
74477: EMPTY
74478: LIST
74479: LIST
74480: PUSH
74481: LD_INT 2
74483: NEG
74484: PUSH
74485: LD_INT 1
74487: PUSH
74488: EMPTY
74489: LIST
74490: LIST
74491: PUSH
74492: LD_INT 3
74494: NEG
74495: PUSH
74496: LD_INT 1
74498: NEG
74499: PUSH
74500: EMPTY
74501: LIST
74502: LIST
74503: PUSH
74504: LD_INT 3
74506: NEG
74507: PUSH
74508: LD_INT 2
74510: NEG
74511: PUSH
74512: EMPTY
74513: LIST
74514: LIST
74515: PUSH
74516: EMPTY
74517: LIST
74518: LIST
74519: LIST
74520: LIST
74521: LIST
74522: LIST
74523: LIST
74524: LIST
74525: LIST
74526: LIST
74527: LIST
74528: LIST
74529: LIST
74530: LIST
74531: LIST
74532: LIST
74533: LIST
74534: LIST
74535: LIST
74536: LIST
74537: LIST
74538: LIST
74539: LIST
74540: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
74541: LD_ADDR_VAR 0 28
74545: PUSH
74546: LD_INT 0
74548: PUSH
74549: LD_INT 0
74551: PUSH
74552: EMPTY
74553: LIST
74554: LIST
74555: PUSH
74556: LD_INT 0
74558: PUSH
74559: LD_INT 1
74561: NEG
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: PUSH
74567: LD_INT 1
74569: PUSH
74570: LD_INT 0
74572: PUSH
74573: EMPTY
74574: LIST
74575: LIST
74576: PUSH
74577: LD_INT 1
74579: PUSH
74580: LD_INT 1
74582: PUSH
74583: EMPTY
74584: LIST
74585: LIST
74586: PUSH
74587: LD_INT 0
74589: PUSH
74590: LD_INT 1
74592: PUSH
74593: EMPTY
74594: LIST
74595: LIST
74596: PUSH
74597: LD_INT 1
74599: NEG
74600: PUSH
74601: LD_INT 0
74603: PUSH
74604: EMPTY
74605: LIST
74606: LIST
74607: PUSH
74608: LD_INT 1
74610: NEG
74611: PUSH
74612: LD_INT 1
74614: NEG
74615: PUSH
74616: EMPTY
74617: LIST
74618: LIST
74619: PUSH
74620: LD_INT 1
74622: NEG
74623: PUSH
74624: LD_INT 2
74626: NEG
74627: PUSH
74628: EMPTY
74629: LIST
74630: LIST
74631: PUSH
74632: LD_INT 0
74634: PUSH
74635: LD_INT 2
74637: NEG
74638: PUSH
74639: EMPTY
74640: LIST
74641: LIST
74642: PUSH
74643: LD_INT 1
74645: PUSH
74646: LD_INT 1
74648: NEG
74649: PUSH
74650: EMPTY
74651: LIST
74652: LIST
74653: PUSH
74654: LD_INT 2
74656: PUSH
74657: LD_INT 0
74659: PUSH
74660: EMPTY
74661: LIST
74662: LIST
74663: PUSH
74664: LD_INT 2
74666: PUSH
74667: LD_INT 1
74669: PUSH
74670: EMPTY
74671: LIST
74672: LIST
74673: PUSH
74674: LD_INT 2
74676: PUSH
74677: LD_INT 2
74679: PUSH
74680: EMPTY
74681: LIST
74682: LIST
74683: PUSH
74684: LD_INT 1
74686: PUSH
74687: LD_INT 2
74689: PUSH
74690: EMPTY
74691: LIST
74692: LIST
74693: PUSH
74694: LD_INT 0
74696: PUSH
74697: LD_INT 2
74699: PUSH
74700: EMPTY
74701: LIST
74702: LIST
74703: PUSH
74704: LD_INT 1
74706: NEG
74707: PUSH
74708: LD_INT 1
74710: PUSH
74711: EMPTY
74712: LIST
74713: LIST
74714: PUSH
74715: LD_INT 2
74717: NEG
74718: PUSH
74719: LD_INT 0
74721: PUSH
74722: EMPTY
74723: LIST
74724: LIST
74725: PUSH
74726: LD_INT 2
74728: NEG
74729: PUSH
74730: LD_INT 1
74732: NEG
74733: PUSH
74734: EMPTY
74735: LIST
74736: LIST
74737: PUSH
74738: LD_INT 2
74740: NEG
74741: PUSH
74742: LD_INT 2
74744: NEG
74745: PUSH
74746: EMPTY
74747: LIST
74748: LIST
74749: PUSH
74750: LD_INT 2
74752: NEG
74753: PUSH
74754: LD_INT 3
74756: NEG
74757: PUSH
74758: EMPTY
74759: LIST
74760: LIST
74761: PUSH
74762: LD_INT 1
74764: NEG
74765: PUSH
74766: LD_INT 3
74768: NEG
74769: PUSH
74770: EMPTY
74771: LIST
74772: LIST
74773: PUSH
74774: LD_INT 3
74776: NEG
74777: PUSH
74778: LD_INT 1
74780: NEG
74781: PUSH
74782: EMPTY
74783: LIST
74784: LIST
74785: PUSH
74786: LD_INT 3
74788: NEG
74789: PUSH
74790: LD_INT 2
74792: NEG
74793: PUSH
74794: EMPTY
74795: LIST
74796: LIST
74797: PUSH
74798: EMPTY
74799: LIST
74800: LIST
74801: LIST
74802: LIST
74803: LIST
74804: LIST
74805: LIST
74806: LIST
74807: LIST
74808: LIST
74809: LIST
74810: LIST
74811: LIST
74812: LIST
74813: LIST
74814: LIST
74815: LIST
74816: LIST
74817: LIST
74818: LIST
74819: LIST
74820: LIST
74821: LIST
74822: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
74823: LD_ADDR_VAR 0 29
74827: PUSH
74828: LD_INT 0
74830: PUSH
74831: LD_INT 0
74833: PUSH
74834: EMPTY
74835: LIST
74836: LIST
74837: PUSH
74838: LD_INT 0
74840: PUSH
74841: LD_INT 1
74843: NEG
74844: PUSH
74845: EMPTY
74846: LIST
74847: LIST
74848: PUSH
74849: LD_INT 1
74851: PUSH
74852: LD_INT 0
74854: PUSH
74855: EMPTY
74856: LIST
74857: LIST
74858: PUSH
74859: LD_INT 1
74861: PUSH
74862: LD_INT 1
74864: PUSH
74865: EMPTY
74866: LIST
74867: LIST
74868: PUSH
74869: LD_INT 0
74871: PUSH
74872: LD_INT 1
74874: PUSH
74875: EMPTY
74876: LIST
74877: LIST
74878: PUSH
74879: LD_INT 1
74881: NEG
74882: PUSH
74883: LD_INT 0
74885: PUSH
74886: EMPTY
74887: LIST
74888: LIST
74889: PUSH
74890: LD_INT 1
74892: NEG
74893: PUSH
74894: LD_INT 1
74896: NEG
74897: PUSH
74898: EMPTY
74899: LIST
74900: LIST
74901: PUSH
74902: LD_INT 1
74904: NEG
74905: PUSH
74906: LD_INT 2
74908: NEG
74909: PUSH
74910: EMPTY
74911: LIST
74912: LIST
74913: PUSH
74914: LD_INT 0
74916: PUSH
74917: LD_INT 2
74919: NEG
74920: PUSH
74921: EMPTY
74922: LIST
74923: LIST
74924: PUSH
74925: LD_INT 1
74927: PUSH
74928: LD_INT 1
74930: NEG
74931: PUSH
74932: EMPTY
74933: LIST
74934: LIST
74935: PUSH
74936: LD_INT 2
74938: PUSH
74939: LD_INT 0
74941: PUSH
74942: EMPTY
74943: LIST
74944: LIST
74945: PUSH
74946: LD_INT 2
74948: PUSH
74949: LD_INT 1
74951: PUSH
74952: EMPTY
74953: LIST
74954: LIST
74955: PUSH
74956: LD_INT 1
74958: PUSH
74959: LD_INT 2
74961: PUSH
74962: EMPTY
74963: LIST
74964: LIST
74965: PUSH
74966: LD_INT 0
74968: PUSH
74969: LD_INT 2
74971: PUSH
74972: EMPTY
74973: LIST
74974: LIST
74975: PUSH
74976: LD_INT 1
74978: NEG
74979: PUSH
74980: LD_INT 1
74982: PUSH
74983: EMPTY
74984: LIST
74985: LIST
74986: PUSH
74987: LD_INT 2
74989: NEG
74990: PUSH
74991: LD_INT 1
74993: NEG
74994: PUSH
74995: EMPTY
74996: LIST
74997: LIST
74998: PUSH
74999: LD_INT 2
75001: NEG
75002: PUSH
75003: LD_INT 2
75005: NEG
75006: PUSH
75007: EMPTY
75008: LIST
75009: LIST
75010: PUSH
75011: LD_INT 2
75013: NEG
75014: PUSH
75015: LD_INT 3
75017: NEG
75018: PUSH
75019: EMPTY
75020: LIST
75021: LIST
75022: PUSH
75023: LD_INT 2
75025: PUSH
75026: LD_INT 1
75028: NEG
75029: PUSH
75030: EMPTY
75031: LIST
75032: LIST
75033: PUSH
75034: LD_INT 3
75036: PUSH
75037: LD_INT 1
75039: PUSH
75040: EMPTY
75041: LIST
75042: LIST
75043: PUSH
75044: LD_INT 1
75046: PUSH
75047: LD_INT 3
75049: PUSH
75050: EMPTY
75051: LIST
75052: LIST
75053: PUSH
75054: LD_INT 1
75056: NEG
75057: PUSH
75058: LD_INT 2
75060: PUSH
75061: EMPTY
75062: LIST
75063: LIST
75064: PUSH
75065: LD_INT 3
75067: NEG
75068: PUSH
75069: LD_INT 2
75071: NEG
75072: PUSH
75073: EMPTY
75074: LIST
75075: LIST
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: LIST
75081: LIST
75082: LIST
75083: LIST
75084: LIST
75085: LIST
75086: LIST
75087: LIST
75088: LIST
75089: LIST
75090: LIST
75091: LIST
75092: LIST
75093: LIST
75094: LIST
75095: LIST
75096: LIST
75097: LIST
75098: LIST
75099: LIST
75100: LIST
75101: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
75102: LD_ADDR_VAR 0 30
75106: PUSH
75107: LD_INT 0
75109: PUSH
75110: LD_INT 0
75112: PUSH
75113: EMPTY
75114: LIST
75115: LIST
75116: PUSH
75117: LD_INT 0
75119: PUSH
75120: LD_INT 1
75122: NEG
75123: PUSH
75124: EMPTY
75125: LIST
75126: LIST
75127: PUSH
75128: LD_INT 1
75130: PUSH
75131: LD_INT 0
75133: PUSH
75134: EMPTY
75135: LIST
75136: LIST
75137: PUSH
75138: LD_INT 1
75140: PUSH
75141: LD_INT 1
75143: PUSH
75144: EMPTY
75145: LIST
75146: LIST
75147: PUSH
75148: LD_INT 0
75150: PUSH
75151: LD_INT 1
75153: PUSH
75154: EMPTY
75155: LIST
75156: LIST
75157: PUSH
75158: LD_INT 1
75160: NEG
75161: PUSH
75162: LD_INT 0
75164: PUSH
75165: EMPTY
75166: LIST
75167: LIST
75168: PUSH
75169: LD_INT 1
75171: NEG
75172: PUSH
75173: LD_INT 1
75175: NEG
75176: PUSH
75177: EMPTY
75178: LIST
75179: LIST
75180: PUSH
75181: LD_INT 1
75183: NEG
75184: PUSH
75185: LD_INT 2
75187: NEG
75188: PUSH
75189: EMPTY
75190: LIST
75191: LIST
75192: PUSH
75193: LD_INT 0
75195: PUSH
75196: LD_INT 2
75198: NEG
75199: PUSH
75200: EMPTY
75201: LIST
75202: LIST
75203: PUSH
75204: LD_INT 1
75206: PUSH
75207: LD_INT 1
75209: NEG
75210: PUSH
75211: EMPTY
75212: LIST
75213: LIST
75214: PUSH
75215: LD_INT 2
75217: PUSH
75218: LD_INT 0
75220: PUSH
75221: EMPTY
75222: LIST
75223: LIST
75224: PUSH
75225: LD_INT 2
75227: PUSH
75228: LD_INT 1
75230: PUSH
75231: EMPTY
75232: LIST
75233: LIST
75234: PUSH
75235: LD_INT 2
75237: PUSH
75238: LD_INT 2
75240: PUSH
75241: EMPTY
75242: LIST
75243: LIST
75244: PUSH
75245: LD_INT 1
75247: PUSH
75248: LD_INT 2
75250: PUSH
75251: EMPTY
75252: LIST
75253: LIST
75254: PUSH
75255: LD_INT 1
75257: NEG
75258: PUSH
75259: LD_INT 1
75261: PUSH
75262: EMPTY
75263: LIST
75264: LIST
75265: PUSH
75266: LD_INT 2
75268: NEG
75269: PUSH
75270: LD_INT 0
75272: PUSH
75273: EMPTY
75274: LIST
75275: LIST
75276: PUSH
75277: LD_INT 2
75279: NEG
75280: PUSH
75281: LD_INT 1
75283: NEG
75284: PUSH
75285: EMPTY
75286: LIST
75287: LIST
75288: PUSH
75289: LD_INT 1
75291: NEG
75292: PUSH
75293: LD_INT 3
75295: NEG
75296: PUSH
75297: EMPTY
75298: LIST
75299: LIST
75300: PUSH
75301: LD_INT 1
75303: PUSH
75304: LD_INT 2
75306: NEG
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: PUSH
75312: LD_INT 3
75314: PUSH
75315: LD_INT 2
75317: PUSH
75318: EMPTY
75319: LIST
75320: LIST
75321: PUSH
75322: LD_INT 2
75324: PUSH
75325: LD_INT 3
75327: PUSH
75328: EMPTY
75329: LIST
75330: LIST
75331: PUSH
75332: LD_INT 2
75334: NEG
75335: PUSH
75336: LD_INT 1
75338: PUSH
75339: EMPTY
75340: LIST
75341: LIST
75342: PUSH
75343: LD_INT 3
75345: NEG
75346: PUSH
75347: LD_INT 1
75349: NEG
75350: PUSH
75351: EMPTY
75352: LIST
75353: LIST
75354: PUSH
75355: EMPTY
75356: LIST
75357: LIST
75358: LIST
75359: LIST
75360: LIST
75361: LIST
75362: LIST
75363: LIST
75364: LIST
75365: LIST
75366: LIST
75367: LIST
75368: LIST
75369: LIST
75370: LIST
75371: LIST
75372: LIST
75373: LIST
75374: LIST
75375: LIST
75376: LIST
75377: LIST
75378: LIST
75379: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
75380: LD_ADDR_VAR 0 31
75384: PUSH
75385: LD_INT 0
75387: PUSH
75388: LD_INT 0
75390: PUSH
75391: EMPTY
75392: LIST
75393: LIST
75394: PUSH
75395: LD_INT 0
75397: PUSH
75398: LD_INT 1
75400: NEG
75401: PUSH
75402: EMPTY
75403: LIST
75404: LIST
75405: PUSH
75406: LD_INT 1
75408: PUSH
75409: LD_INT 0
75411: PUSH
75412: EMPTY
75413: LIST
75414: LIST
75415: PUSH
75416: LD_INT 1
75418: PUSH
75419: LD_INT 1
75421: PUSH
75422: EMPTY
75423: LIST
75424: LIST
75425: PUSH
75426: LD_INT 0
75428: PUSH
75429: LD_INT 1
75431: PUSH
75432: EMPTY
75433: LIST
75434: LIST
75435: PUSH
75436: LD_INT 1
75438: NEG
75439: PUSH
75440: LD_INT 0
75442: PUSH
75443: EMPTY
75444: LIST
75445: LIST
75446: PUSH
75447: LD_INT 1
75449: NEG
75450: PUSH
75451: LD_INT 1
75453: NEG
75454: PUSH
75455: EMPTY
75456: LIST
75457: LIST
75458: PUSH
75459: LD_INT 1
75461: NEG
75462: PUSH
75463: LD_INT 2
75465: NEG
75466: PUSH
75467: EMPTY
75468: LIST
75469: LIST
75470: PUSH
75471: LD_INT 1
75473: PUSH
75474: LD_INT 1
75476: NEG
75477: PUSH
75478: EMPTY
75479: LIST
75480: LIST
75481: PUSH
75482: LD_INT 2
75484: PUSH
75485: LD_INT 0
75487: PUSH
75488: EMPTY
75489: LIST
75490: LIST
75491: PUSH
75492: LD_INT 2
75494: PUSH
75495: LD_INT 1
75497: PUSH
75498: EMPTY
75499: LIST
75500: LIST
75501: PUSH
75502: LD_INT 2
75504: PUSH
75505: LD_INT 2
75507: PUSH
75508: EMPTY
75509: LIST
75510: LIST
75511: PUSH
75512: LD_INT 1
75514: PUSH
75515: LD_INT 2
75517: PUSH
75518: EMPTY
75519: LIST
75520: LIST
75521: PUSH
75522: LD_INT 0
75524: PUSH
75525: LD_INT 2
75527: PUSH
75528: EMPTY
75529: LIST
75530: LIST
75531: PUSH
75532: LD_INT 1
75534: NEG
75535: PUSH
75536: LD_INT 1
75538: PUSH
75539: EMPTY
75540: LIST
75541: LIST
75542: PUSH
75543: LD_INT 2
75545: NEG
75546: PUSH
75547: LD_INT 1
75549: NEG
75550: PUSH
75551: EMPTY
75552: LIST
75553: LIST
75554: PUSH
75555: LD_INT 2
75557: NEG
75558: PUSH
75559: LD_INT 2
75561: NEG
75562: PUSH
75563: EMPTY
75564: LIST
75565: LIST
75566: PUSH
75567: LD_INT 2
75569: NEG
75570: PUSH
75571: LD_INT 3
75573: NEG
75574: PUSH
75575: EMPTY
75576: LIST
75577: LIST
75578: PUSH
75579: LD_INT 2
75581: PUSH
75582: LD_INT 1
75584: NEG
75585: PUSH
75586: EMPTY
75587: LIST
75588: LIST
75589: PUSH
75590: LD_INT 3
75592: PUSH
75593: LD_INT 1
75595: PUSH
75596: EMPTY
75597: LIST
75598: LIST
75599: PUSH
75600: LD_INT 1
75602: PUSH
75603: LD_INT 3
75605: PUSH
75606: EMPTY
75607: LIST
75608: LIST
75609: PUSH
75610: LD_INT 1
75612: NEG
75613: PUSH
75614: LD_INT 2
75616: PUSH
75617: EMPTY
75618: LIST
75619: LIST
75620: PUSH
75621: LD_INT 3
75623: NEG
75624: PUSH
75625: LD_INT 2
75627: NEG
75628: PUSH
75629: EMPTY
75630: LIST
75631: LIST
75632: PUSH
75633: EMPTY
75634: LIST
75635: LIST
75636: LIST
75637: LIST
75638: LIST
75639: LIST
75640: LIST
75641: LIST
75642: LIST
75643: LIST
75644: LIST
75645: LIST
75646: LIST
75647: LIST
75648: LIST
75649: LIST
75650: LIST
75651: LIST
75652: LIST
75653: LIST
75654: LIST
75655: LIST
75656: LIST
75657: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
75658: LD_ADDR_VAR 0 32
75662: PUSH
75663: LD_INT 0
75665: PUSH
75666: LD_INT 0
75668: PUSH
75669: EMPTY
75670: LIST
75671: LIST
75672: PUSH
75673: LD_INT 0
75675: PUSH
75676: LD_INT 1
75678: NEG
75679: PUSH
75680: EMPTY
75681: LIST
75682: LIST
75683: PUSH
75684: LD_INT 1
75686: PUSH
75687: LD_INT 0
75689: PUSH
75690: EMPTY
75691: LIST
75692: LIST
75693: PUSH
75694: LD_INT 1
75696: PUSH
75697: LD_INT 1
75699: PUSH
75700: EMPTY
75701: LIST
75702: LIST
75703: PUSH
75704: LD_INT 0
75706: PUSH
75707: LD_INT 1
75709: PUSH
75710: EMPTY
75711: LIST
75712: LIST
75713: PUSH
75714: LD_INT 1
75716: NEG
75717: PUSH
75718: LD_INT 0
75720: PUSH
75721: EMPTY
75722: LIST
75723: LIST
75724: PUSH
75725: LD_INT 1
75727: NEG
75728: PUSH
75729: LD_INT 1
75731: NEG
75732: PUSH
75733: EMPTY
75734: LIST
75735: LIST
75736: PUSH
75737: LD_INT 1
75739: NEG
75740: PUSH
75741: LD_INT 2
75743: NEG
75744: PUSH
75745: EMPTY
75746: LIST
75747: LIST
75748: PUSH
75749: LD_INT 0
75751: PUSH
75752: LD_INT 2
75754: NEG
75755: PUSH
75756: EMPTY
75757: LIST
75758: LIST
75759: PUSH
75760: LD_INT 1
75762: PUSH
75763: LD_INT 1
75765: NEG
75766: PUSH
75767: EMPTY
75768: LIST
75769: LIST
75770: PUSH
75771: LD_INT 2
75773: PUSH
75774: LD_INT 1
75776: PUSH
75777: EMPTY
75778: LIST
75779: LIST
75780: PUSH
75781: LD_INT 2
75783: PUSH
75784: LD_INT 2
75786: PUSH
75787: EMPTY
75788: LIST
75789: LIST
75790: PUSH
75791: LD_INT 1
75793: PUSH
75794: LD_INT 2
75796: PUSH
75797: EMPTY
75798: LIST
75799: LIST
75800: PUSH
75801: LD_INT 0
75803: PUSH
75804: LD_INT 2
75806: PUSH
75807: EMPTY
75808: LIST
75809: LIST
75810: PUSH
75811: LD_INT 1
75813: NEG
75814: PUSH
75815: LD_INT 1
75817: PUSH
75818: EMPTY
75819: LIST
75820: LIST
75821: PUSH
75822: LD_INT 2
75824: NEG
75825: PUSH
75826: LD_INT 0
75828: PUSH
75829: EMPTY
75830: LIST
75831: LIST
75832: PUSH
75833: LD_INT 2
75835: NEG
75836: PUSH
75837: LD_INT 1
75839: NEG
75840: PUSH
75841: EMPTY
75842: LIST
75843: LIST
75844: PUSH
75845: LD_INT 1
75847: NEG
75848: PUSH
75849: LD_INT 3
75851: NEG
75852: PUSH
75853: EMPTY
75854: LIST
75855: LIST
75856: PUSH
75857: LD_INT 1
75859: PUSH
75860: LD_INT 2
75862: NEG
75863: PUSH
75864: EMPTY
75865: LIST
75866: LIST
75867: PUSH
75868: LD_INT 3
75870: PUSH
75871: LD_INT 2
75873: PUSH
75874: EMPTY
75875: LIST
75876: LIST
75877: PUSH
75878: LD_INT 2
75880: PUSH
75881: LD_INT 3
75883: PUSH
75884: EMPTY
75885: LIST
75886: LIST
75887: PUSH
75888: LD_INT 2
75890: NEG
75891: PUSH
75892: LD_INT 1
75894: PUSH
75895: EMPTY
75896: LIST
75897: LIST
75898: PUSH
75899: LD_INT 3
75901: NEG
75902: PUSH
75903: LD_INT 1
75905: NEG
75906: PUSH
75907: EMPTY
75908: LIST
75909: LIST
75910: PUSH
75911: EMPTY
75912: LIST
75913: LIST
75914: LIST
75915: LIST
75916: LIST
75917: LIST
75918: LIST
75919: LIST
75920: LIST
75921: LIST
75922: LIST
75923: LIST
75924: LIST
75925: LIST
75926: LIST
75927: LIST
75928: LIST
75929: LIST
75930: LIST
75931: LIST
75932: LIST
75933: LIST
75934: LIST
75935: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
75936: LD_ADDR_VAR 0 33
75940: PUSH
75941: LD_INT 0
75943: PUSH
75944: LD_INT 0
75946: PUSH
75947: EMPTY
75948: LIST
75949: LIST
75950: PUSH
75951: LD_INT 0
75953: PUSH
75954: LD_INT 1
75956: NEG
75957: PUSH
75958: EMPTY
75959: LIST
75960: LIST
75961: PUSH
75962: LD_INT 1
75964: PUSH
75965: LD_INT 0
75967: PUSH
75968: EMPTY
75969: LIST
75970: LIST
75971: PUSH
75972: LD_INT 1
75974: PUSH
75975: LD_INT 1
75977: PUSH
75978: EMPTY
75979: LIST
75980: LIST
75981: PUSH
75982: LD_INT 0
75984: PUSH
75985: LD_INT 1
75987: PUSH
75988: EMPTY
75989: LIST
75990: LIST
75991: PUSH
75992: LD_INT 1
75994: NEG
75995: PUSH
75996: LD_INT 0
75998: PUSH
75999: EMPTY
76000: LIST
76001: LIST
76002: PUSH
76003: LD_INT 1
76005: NEG
76006: PUSH
76007: LD_INT 1
76009: NEG
76010: PUSH
76011: EMPTY
76012: LIST
76013: LIST
76014: PUSH
76015: LD_INT 1
76017: NEG
76018: PUSH
76019: LD_INT 2
76021: NEG
76022: PUSH
76023: EMPTY
76024: LIST
76025: LIST
76026: PUSH
76027: LD_INT 1
76029: PUSH
76030: LD_INT 1
76032: NEG
76033: PUSH
76034: EMPTY
76035: LIST
76036: LIST
76037: PUSH
76038: LD_INT 2
76040: PUSH
76041: LD_INT 0
76043: PUSH
76044: EMPTY
76045: LIST
76046: LIST
76047: PUSH
76048: LD_INT 2
76050: PUSH
76051: LD_INT 1
76053: PUSH
76054: EMPTY
76055: LIST
76056: LIST
76057: PUSH
76058: LD_INT 1
76060: PUSH
76061: LD_INT 2
76063: PUSH
76064: EMPTY
76065: LIST
76066: LIST
76067: PUSH
76068: LD_INT 0
76070: PUSH
76071: LD_INT 2
76073: PUSH
76074: EMPTY
76075: LIST
76076: LIST
76077: PUSH
76078: LD_INT 1
76080: NEG
76081: PUSH
76082: LD_INT 1
76084: PUSH
76085: EMPTY
76086: LIST
76087: LIST
76088: PUSH
76089: LD_INT 2
76091: NEG
76092: PUSH
76093: LD_INT 0
76095: PUSH
76096: EMPTY
76097: LIST
76098: LIST
76099: PUSH
76100: LD_INT 2
76102: NEG
76103: PUSH
76104: LD_INT 1
76106: NEG
76107: PUSH
76108: EMPTY
76109: LIST
76110: LIST
76111: PUSH
76112: LD_INT 2
76114: NEG
76115: PUSH
76116: LD_INT 2
76118: NEG
76119: PUSH
76120: EMPTY
76121: LIST
76122: LIST
76123: PUSH
76124: LD_INT 2
76126: NEG
76127: PUSH
76128: LD_INT 3
76130: NEG
76131: PUSH
76132: EMPTY
76133: LIST
76134: LIST
76135: PUSH
76136: LD_INT 2
76138: PUSH
76139: LD_INT 1
76141: NEG
76142: PUSH
76143: EMPTY
76144: LIST
76145: LIST
76146: PUSH
76147: LD_INT 3
76149: PUSH
76150: LD_INT 1
76152: PUSH
76153: EMPTY
76154: LIST
76155: LIST
76156: PUSH
76157: LD_INT 1
76159: PUSH
76160: LD_INT 3
76162: PUSH
76163: EMPTY
76164: LIST
76165: LIST
76166: PUSH
76167: LD_INT 1
76169: NEG
76170: PUSH
76171: LD_INT 2
76173: PUSH
76174: EMPTY
76175: LIST
76176: LIST
76177: PUSH
76178: LD_INT 3
76180: NEG
76181: PUSH
76182: LD_INT 2
76184: NEG
76185: PUSH
76186: EMPTY
76187: LIST
76188: LIST
76189: PUSH
76190: EMPTY
76191: LIST
76192: LIST
76193: LIST
76194: LIST
76195: LIST
76196: LIST
76197: LIST
76198: LIST
76199: LIST
76200: LIST
76201: LIST
76202: LIST
76203: LIST
76204: LIST
76205: LIST
76206: LIST
76207: LIST
76208: LIST
76209: LIST
76210: LIST
76211: LIST
76212: LIST
76213: LIST
76214: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
76215: LD_ADDR_VAR 0 34
76219: PUSH
76220: LD_INT 0
76222: PUSH
76223: LD_INT 0
76225: PUSH
76226: EMPTY
76227: LIST
76228: LIST
76229: PUSH
76230: LD_INT 0
76232: PUSH
76233: LD_INT 1
76235: NEG
76236: PUSH
76237: EMPTY
76238: LIST
76239: LIST
76240: PUSH
76241: LD_INT 1
76243: PUSH
76244: LD_INT 0
76246: PUSH
76247: EMPTY
76248: LIST
76249: LIST
76250: PUSH
76251: LD_INT 1
76253: PUSH
76254: LD_INT 1
76256: PUSH
76257: EMPTY
76258: LIST
76259: LIST
76260: PUSH
76261: LD_INT 0
76263: PUSH
76264: LD_INT 1
76266: PUSH
76267: EMPTY
76268: LIST
76269: LIST
76270: PUSH
76271: LD_INT 1
76273: NEG
76274: PUSH
76275: LD_INT 0
76277: PUSH
76278: EMPTY
76279: LIST
76280: LIST
76281: PUSH
76282: LD_INT 1
76284: NEG
76285: PUSH
76286: LD_INT 1
76288: NEG
76289: PUSH
76290: EMPTY
76291: LIST
76292: LIST
76293: PUSH
76294: LD_INT 1
76296: NEG
76297: PUSH
76298: LD_INT 2
76300: NEG
76301: PUSH
76302: EMPTY
76303: LIST
76304: LIST
76305: PUSH
76306: LD_INT 0
76308: PUSH
76309: LD_INT 2
76311: NEG
76312: PUSH
76313: EMPTY
76314: LIST
76315: LIST
76316: PUSH
76317: LD_INT 1
76319: PUSH
76320: LD_INT 1
76322: NEG
76323: PUSH
76324: EMPTY
76325: LIST
76326: LIST
76327: PUSH
76328: LD_INT 2
76330: PUSH
76331: LD_INT 1
76333: PUSH
76334: EMPTY
76335: LIST
76336: LIST
76337: PUSH
76338: LD_INT 2
76340: PUSH
76341: LD_INT 2
76343: PUSH
76344: EMPTY
76345: LIST
76346: LIST
76347: PUSH
76348: LD_INT 1
76350: PUSH
76351: LD_INT 2
76353: PUSH
76354: EMPTY
76355: LIST
76356: LIST
76357: PUSH
76358: LD_INT 1
76360: NEG
76361: PUSH
76362: LD_INT 1
76364: PUSH
76365: EMPTY
76366: LIST
76367: LIST
76368: PUSH
76369: LD_INT 2
76371: NEG
76372: PUSH
76373: LD_INT 0
76375: PUSH
76376: EMPTY
76377: LIST
76378: LIST
76379: PUSH
76380: LD_INT 2
76382: NEG
76383: PUSH
76384: LD_INT 1
76386: NEG
76387: PUSH
76388: EMPTY
76389: LIST
76390: LIST
76391: PUSH
76392: LD_INT 2
76394: NEG
76395: PUSH
76396: LD_INT 2
76398: NEG
76399: PUSH
76400: EMPTY
76401: LIST
76402: LIST
76403: PUSH
76404: LD_INT 1
76406: NEG
76407: PUSH
76408: LD_INT 3
76410: NEG
76411: PUSH
76412: EMPTY
76413: LIST
76414: LIST
76415: PUSH
76416: LD_INT 1
76418: PUSH
76419: LD_INT 2
76421: NEG
76422: PUSH
76423: EMPTY
76424: LIST
76425: LIST
76426: PUSH
76427: LD_INT 3
76429: PUSH
76430: LD_INT 2
76432: PUSH
76433: EMPTY
76434: LIST
76435: LIST
76436: PUSH
76437: LD_INT 2
76439: PUSH
76440: LD_INT 3
76442: PUSH
76443: EMPTY
76444: LIST
76445: LIST
76446: PUSH
76447: LD_INT 2
76449: NEG
76450: PUSH
76451: LD_INT 1
76453: PUSH
76454: EMPTY
76455: LIST
76456: LIST
76457: PUSH
76458: LD_INT 3
76460: NEG
76461: PUSH
76462: LD_INT 1
76464: NEG
76465: PUSH
76466: EMPTY
76467: LIST
76468: LIST
76469: PUSH
76470: EMPTY
76471: LIST
76472: LIST
76473: LIST
76474: LIST
76475: LIST
76476: LIST
76477: LIST
76478: LIST
76479: LIST
76480: LIST
76481: LIST
76482: LIST
76483: LIST
76484: LIST
76485: LIST
76486: LIST
76487: LIST
76488: LIST
76489: LIST
76490: LIST
76491: LIST
76492: LIST
76493: LIST
76494: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
76495: LD_ADDR_VAR 0 35
76499: PUSH
76500: LD_INT 0
76502: PUSH
76503: LD_INT 0
76505: PUSH
76506: EMPTY
76507: LIST
76508: LIST
76509: PUSH
76510: LD_INT 0
76512: PUSH
76513: LD_INT 1
76515: NEG
76516: PUSH
76517: EMPTY
76518: LIST
76519: LIST
76520: PUSH
76521: LD_INT 1
76523: PUSH
76524: LD_INT 0
76526: PUSH
76527: EMPTY
76528: LIST
76529: LIST
76530: PUSH
76531: LD_INT 1
76533: PUSH
76534: LD_INT 1
76536: PUSH
76537: EMPTY
76538: LIST
76539: LIST
76540: PUSH
76541: LD_INT 0
76543: PUSH
76544: LD_INT 1
76546: PUSH
76547: EMPTY
76548: LIST
76549: LIST
76550: PUSH
76551: LD_INT 1
76553: NEG
76554: PUSH
76555: LD_INT 0
76557: PUSH
76558: EMPTY
76559: LIST
76560: LIST
76561: PUSH
76562: LD_INT 1
76564: NEG
76565: PUSH
76566: LD_INT 1
76568: NEG
76569: PUSH
76570: EMPTY
76571: LIST
76572: LIST
76573: PUSH
76574: LD_INT 2
76576: PUSH
76577: LD_INT 1
76579: PUSH
76580: EMPTY
76581: LIST
76582: LIST
76583: PUSH
76584: LD_INT 2
76586: NEG
76587: PUSH
76588: LD_INT 1
76590: NEG
76591: PUSH
76592: EMPTY
76593: LIST
76594: LIST
76595: PUSH
76596: EMPTY
76597: LIST
76598: LIST
76599: LIST
76600: LIST
76601: LIST
76602: LIST
76603: LIST
76604: LIST
76605: LIST
76606: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
76607: LD_ADDR_VAR 0 36
76611: PUSH
76612: LD_INT 0
76614: PUSH
76615: LD_INT 0
76617: PUSH
76618: EMPTY
76619: LIST
76620: LIST
76621: PUSH
76622: LD_INT 0
76624: PUSH
76625: LD_INT 1
76627: NEG
76628: PUSH
76629: EMPTY
76630: LIST
76631: LIST
76632: PUSH
76633: LD_INT 1
76635: PUSH
76636: LD_INT 0
76638: PUSH
76639: EMPTY
76640: LIST
76641: LIST
76642: PUSH
76643: LD_INT 1
76645: PUSH
76646: LD_INT 1
76648: PUSH
76649: EMPTY
76650: LIST
76651: LIST
76652: PUSH
76653: LD_INT 0
76655: PUSH
76656: LD_INT 1
76658: PUSH
76659: EMPTY
76660: LIST
76661: LIST
76662: PUSH
76663: LD_INT 1
76665: NEG
76666: PUSH
76667: LD_INT 0
76669: PUSH
76670: EMPTY
76671: LIST
76672: LIST
76673: PUSH
76674: LD_INT 1
76676: NEG
76677: PUSH
76678: LD_INT 1
76680: NEG
76681: PUSH
76682: EMPTY
76683: LIST
76684: LIST
76685: PUSH
76686: LD_INT 1
76688: NEG
76689: PUSH
76690: LD_INT 2
76692: NEG
76693: PUSH
76694: EMPTY
76695: LIST
76696: LIST
76697: PUSH
76698: LD_INT 1
76700: PUSH
76701: LD_INT 2
76703: PUSH
76704: EMPTY
76705: LIST
76706: LIST
76707: PUSH
76708: EMPTY
76709: LIST
76710: LIST
76711: LIST
76712: LIST
76713: LIST
76714: LIST
76715: LIST
76716: LIST
76717: LIST
76718: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
76719: LD_ADDR_VAR 0 37
76723: PUSH
76724: LD_INT 0
76726: PUSH
76727: LD_INT 0
76729: PUSH
76730: EMPTY
76731: LIST
76732: LIST
76733: PUSH
76734: LD_INT 0
76736: PUSH
76737: LD_INT 1
76739: NEG
76740: PUSH
76741: EMPTY
76742: LIST
76743: LIST
76744: PUSH
76745: LD_INT 1
76747: PUSH
76748: LD_INT 0
76750: PUSH
76751: EMPTY
76752: LIST
76753: LIST
76754: PUSH
76755: LD_INT 1
76757: PUSH
76758: LD_INT 1
76760: PUSH
76761: EMPTY
76762: LIST
76763: LIST
76764: PUSH
76765: LD_INT 0
76767: PUSH
76768: LD_INT 1
76770: PUSH
76771: EMPTY
76772: LIST
76773: LIST
76774: PUSH
76775: LD_INT 1
76777: NEG
76778: PUSH
76779: LD_INT 0
76781: PUSH
76782: EMPTY
76783: LIST
76784: LIST
76785: PUSH
76786: LD_INT 1
76788: NEG
76789: PUSH
76790: LD_INT 1
76792: NEG
76793: PUSH
76794: EMPTY
76795: LIST
76796: LIST
76797: PUSH
76798: LD_INT 1
76800: PUSH
76801: LD_INT 1
76803: NEG
76804: PUSH
76805: EMPTY
76806: LIST
76807: LIST
76808: PUSH
76809: LD_INT 1
76811: NEG
76812: PUSH
76813: LD_INT 1
76815: PUSH
76816: EMPTY
76817: LIST
76818: LIST
76819: PUSH
76820: EMPTY
76821: LIST
76822: LIST
76823: LIST
76824: LIST
76825: LIST
76826: LIST
76827: LIST
76828: LIST
76829: LIST
76830: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
76831: LD_ADDR_VAR 0 38
76835: PUSH
76836: LD_INT 0
76838: PUSH
76839: LD_INT 0
76841: PUSH
76842: EMPTY
76843: LIST
76844: LIST
76845: PUSH
76846: LD_INT 0
76848: PUSH
76849: LD_INT 1
76851: NEG
76852: PUSH
76853: EMPTY
76854: LIST
76855: LIST
76856: PUSH
76857: LD_INT 1
76859: PUSH
76860: LD_INT 0
76862: PUSH
76863: EMPTY
76864: LIST
76865: LIST
76866: PUSH
76867: LD_INT 1
76869: PUSH
76870: LD_INT 1
76872: PUSH
76873: EMPTY
76874: LIST
76875: LIST
76876: PUSH
76877: LD_INT 0
76879: PUSH
76880: LD_INT 1
76882: PUSH
76883: EMPTY
76884: LIST
76885: LIST
76886: PUSH
76887: LD_INT 1
76889: NEG
76890: PUSH
76891: LD_INT 0
76893: PUSH
76894: EMPTY
76895: LIST
76896: LIST
76897: PUSH
76898: LD_INT 1
76900: NEG
76901: PUSH
76902: LD_INT 1
76904: NEG
76905: PUSH
76906: EMPTY
76907: LIST
76908: LIST
76909: PUSH
76910: LD_INT 2
76912: PUSH
76913: LD_INT 1
76915: PUSH
76916: EMPTY
76917: LIST
76918: LIST
76919: PUSH
76920: LD_INT 2
76922: NEG
76923: PUSH
76924: LD_INT 1
76926: NEG
76927: PUSH
76928: EMPTY
76929: LIST
76930: LIST
76931: PUSH
76932: EMPTY
76933: LIST
76934: LIST
76935: LIST
76936: LIST
76937: LIST
76938: LIST
76939: LIST
76940: LIST
76941: LIST
76942: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
76943: LD_ADDR_VAR 0 39
76947: PUSH
76948: LD_INT 0
76950: PUSH
76951: LD_INT 0
76953: PUSH
76954: EMPTY
76955: LIST
76956: LIST
76957: PUSH
76958: LD_INT 0
76960: PUSH
76961: LD_INT 1
76963: NEG
76964: PUSH
76965: EMPTY
76966: LIST
76967: LIST
76968: PUSH
76969: LD_INT 1
76971: PUSH
76972: LD_INT 0
76974: PUSH
76975: EMPTY
76976: LIST
76977: LIST
76978: PUSH
76979: LD_INT 1
76981: PUSH
76982: LD_INT 1
76984: PUSH
76985: EMPTY
76986: LIST
76987: LIST
76988: PUSH
76989: LD_INT 0
76991: PUSH
76992: LD_INT 1
76994: PUSH
76995: EMPTY
76996: LIST
76997: LIST
76998: PUSH
76999: LD_INT 1
77001: NEG
77002: PUSH
77003: LD_INT 0
77005: PUSH
77006: EMPTY
77007: LIST
77008: LIST
77009: PUSH
77010: LD_INT 1
77012: NEG
77013: PUSH
77014: LD_INT 1
77016: NEG
77017: PUSH
77018: EMPTY
77019: LIST
77020: LIST
77021: PUSH
77022: LD_INT 1
77024: NEG
77025: PUSH
77026: LD_INT 2
77028: NEG
77029: PUSH
77030: EMPTY
77031: LIST
77032: LIST
77033: PUSH
77034: LD_INT 1
77036: PUSH
77037: LD_INT 2
77039: PUSH
77040: EMPTY
77041: LIST
77042: LIST
77043: PUSH
77044: EMPTY
77045: LIST
77046: LIST
77047: LIST
77048: LIST
77049: LIST
77050: LIST
77051: LIST
77052: LIST
77053: LIST
77054: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
77055: LD_ADDR_VAR 0 40
77059: PUSH
77060: LD_INT 0
77062: PUSH
77063: LD_INT 0
77065: PUSH
77066: EMPTY
77067: LIST
77068: LIST
77069: PUSH
77070: LD_INT 0
77072: PUSH
77073: LD_INT 1
77075: NEG
77076: PUSH
77077: EMPTY
77078: LIST
77079: LIST
77080: PUSH
77081: LD_INT 1
77083: PUSH
77084: LD_INT 0
77086: PUSH
77087: EMPTY
77088: LIST
77089: LIST
77090: PUSH
77091: LD_INT 1
77093: PUSH
77094: LD_INT 1
77096: PUSH
77097: EMPTY
77098: LIST
77099: LIST
77100: PUSH
77101: LD_INT 0
77103: PUSH
77104: LD_INT 1
77106: PUSH
77107: EMPTY
77108: LIST
77109: LIST
77110: PUSH
77111: LD_INT 1
77113: NEG
77114: PUSH
77115: LD_INT 0
77117: PUSH
77118: EMPTY
77119: LIST
77120: LIST
77121: PUSH
77122: LD_INT 1
77124: NEG
77125: PUSH
77126: LD_INT 1
77128: NEG
77129: PUSH
77130: EMPTY
77131: LIST
77132: LIST
77133: PUSH
77134: LD_INT 1
77136: PUSH
77137: LD_INT 1
77139: NEG
77140: PUSH
77141: EMPTY
77142: LIST
77143: LIST
77144: PUSH
77145: LD_INT 1
77147: NEG
77148: PUSH
77149: LD_INT 1
77151: PUSH
77152: EMPTY
77153: LIST
77154: LIST
77155: PUSH
77156: EMPTY
77157: LIST
77158: LIST
77159: LIST
77160: LIST
77161: LIST
77162: LIST
77163: LIST
77164: LIST
77165: LIST
77166: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
77167: LD_ADDR_VAR 0 41
77171: PUSH
77172: LD_INT 0
77174: PUSH
77175: LD_INT 0
77177: PUSH
77178: EMPTY
77179: LIST
77180: LIST
77181: PUSH
77182: LD_INT 0
77184: PUSH
77185: LD_INT 1
77187: NEG
77188: PUSH
77189: EMPTY
77190: LIST
77191: LIST
77192: PUSH
77193: LD_INT 1
77195: PUSH
77196: LD_INT 0
77198: PUSH
77199: EMPTY
77200: LIST
77201: LIST
77202: PUSH
77203: LD_INT 1
77205: PUSH
77206: LD_INT 1
77208: PUSH
77209: EMPTY
77210: LIST
77211: LIST
77212: PUSH
77213: LD_INT 0
77215: PUSH
77216: LD_INT 1
77218: PUSH
77219: EMPTY
77220: LIST
77221: LIST
77222: PUSH
77223: LD_INT 1
77225: NEG
77226: PUSH
77227: LD_INT 0
77229: PUSH
77230: EMPTY
77231: LIST
77232: LIST
77233: PUSH
77234: LD_INT 1
77236: NEG
77237: PUSH
77238: LD_INT 1
77240: NEG
77241: PUSH
77242: EMPTY
77243: LIST
77244: LIST
77245: PUSH
77246: LD_INT 1
77248: NEG
77249: PUSH
77250: LD_INT 2
77252: NEG
77253: PUSH
77254: EMPTY
77255: LIST
77256: LIST
77257: PUSH
77258: LD_INT 1
77260: PUSH
77261: LD_INT 1
77263: NEG
77264: PUSH
77265: EMPTY
77266: LIST
77267: LIST
77268: PUSH
77269: LD_INT 2
77271: PUSH
77272: LD_INT 0
77274: PUSH
77275: EMPTY
77276: LIST
77277: LIST
77278: PUSH
77279: LD_INT 2
77281: PUSH
77282: LD_INT 1
77284: PUSH
77285: EMPTY
77286: LIST
77287: LIST
77288: PUSH
77289: LD_INT 2
77291: PUSH
77292: LD_INT 2
77294: PUSH
77295: EMPTY
77296: LIST
77297: LIST
77298: PUSH
77299: LD_INT 1
77301: PUSH
77302: LD_INT 2
77304: PUSH
77305: EMPTY
77306: LIST
77307: LIST
77308: PUSH
77309: LD_INT 1
77311: NEG
77312: PUSH
77313: LD_INT 1
77315: PUSH
77316: EMPTY
77317: LIST
77318: LIST
77319: PUSH
77320: LD_INT 2
77322: NEG
77323: PUSH
77324: LD_INT 0
77326: PUSH
77327: EMPTY
77328: LIST
77329: LIST
77330: PUSH
77331: LD_INT 2
77333: NEG
77334: PUSH
77335: LD_INT 1
77337: NEG
77338: PUSH
77339: EMPTY
77340: LIST
77341: LIST
77342: PUSH
77343: LD_INT 2
77345: NEG
77346: PUSH
77347: LD_INT 2
77349: NEG
77350: PUSH
77351: EMPTY
77352: LIST
77353: LIST
77354: PUSH
77355: LD_INT 2
77357: NEG
77358: PUSH
77359: LD_INT 3
77361: NEG
77362: PUSH
77363: EMPTY
77364: LIST
77365: LIST
77366: PUSH
77367: LD_INT 2
77369: PUSH
77370: LD_INT 1
77372: NEG
77373: PUSH
77374: EMPTY
77375: LIST
77376: LIST
77377: PUSH
77378: LD_INT 3
77380: PUSH
77381: LD_INT 0
77383: PUSH
77384: EMPTY
77385: LIST
77386: LIST
77387: PUSH
77388: LD_INT 3
77390: PUSH
77391: LD_INT 1
77393: PUSH
77394: EMPTY
77395: LIST
77396: LIST
77397: PUSH
77398: LD_INT 3
77400: PUSH
77401: LD_INT 2
77403: PUSH
77404: EMPTY
77405: LIST
77406: LIST
77407: PUSH
77408: LD_INT 3
77410: PUSH
77411: LD_INT 3
77413: PUSH
77414: EMPTY
77415: LIST
77416: LIST
77417: PUSH
77418: LD_INT 2
77420: PUSH
77421: LD_INT 3
77423: PUSH
77424: EMPTY
77425: LIST
77426: LIST
77427: PUSH
77428: LD_INT 2
77430: NEG
77431: PUSH
77432: LD_INT 1
77434: PUSH
77435: EMPTY
77436: LIST
77437: LIST
77438: PUSH
77439: LD_INT 3
77441: NEG
77442: PUSH
77443: LD_INT 0
77445: PUSH
77446: EMPTY
77447: LIST
77448: LIST
77449: PUSH
77450: LD_INT 3
77452: NEG
77453: PUSH
77454: LD_INT 1
77456: NEG
77457: PUSH
77458: EMPTY
77459: LIST
77460: LIST
77461: PUSH
77462: LD_INT 3
77464: NEG
77465: PUSH
77466: LD_INT 2
77468: NEG
77469: PUSH
77470: EMPTY
77471: LIST
77472: LIST
77473: PUSH
77474: LD_INT 3
77476: NEG
77477: PUSH
77478: LD_INT 3
77480: NEG
77481: PUSH
77482: EMPTY
77483: LIST
77484: LIST
77485: PUSH
77486: EMPTY
77487: LIST
77488: LIST
77489: LIST
77490: LIST
77491: LIST
77492: LIST
77493: LIST
77494: LIST
77495: LIST
77496: LIST
77497: LIST
77498: LIST
77499: LIST
77500: LIST
77501: LIST
77502: LIST
77503: LIST
77504: LIST
77505: LIST
77506: LIST
77507: LIST
77508: LIST
77509: LIST
77510: LIST
77511: LIST
77512: LIST
77513: LIST
77514: LIST
77515: LIST
77516: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
77517: LD_ADDR_VAR 0 42
77521: PUSH
77522: LD_INT 0
77524: PUSH
77525: LD_INT 0
77527: PUSH
77528: EMPTY
77529: LIST
77530: LIST
77531: PUSH
77532: LD_INT 0
77534: PUSH
77535: LD_INT 1
77537: NEG
77538: PUSH
77539: EMPTY
77540: LIST
77541: LIST
77542: PUSH
77543: LD_INT 1
77545: PUSH
77546: LD_INT 0
77548: PUSH
77549: EMPTY
77550: LIST
77551: LIST
77552: PUSH
77553: LD_INT 1
77555: PUSH
77556: LD_INT 1
77558: PUSH
77559: EMPTY
77560: LIST
77561: LIST
77562: PUSH
77563: LD_INT 0
77565: PUSH
77566: LD_INT 1
77568: PUSH
77569: EMPTY
77570: LIST
77571: LIST
77572: PUSH
77573: LD_INT 1
77575: NEG
77576: PUSH
77577: LD_INT 0
77579: PUSH
77580: EMPTY
77581: LIST
77582: LIST
77583: PUSH
77584: LD_INT 1
77586: NEG
77587: PUSH
77588: LD_INT 1
77590: NEG
77591: PUSH
77592: EMPTY
77593: LIST
77594: LIST
77595: PUSH
77596: LD_INT 1
77598: NEG
77599: PUSH
77600: LD_INT 2
77602: NEG
77603: PUSH
77604: EMPTY
77605: LIST
77606: LIST
77607: PUSH
77608: LD_INT 0
77610: PUSH
77611: LD_INT 2
77613: NEG
77614: PUSH
77615: EMPTY
77616: LIST
77617: LIST
77618: PUSH
77619: LD_INT 1
77621: PUSH
77622: LD_INT 1
77624: NEG
77625: PUSH
77626: EMPTY
77627: LIST
77628: LIST
77629: PUSH
77630: LD_INT 2
77632: PUSH
77633: LD_INT 1
77635: PUSH
77636: EMPTY
77637: LIST
77638: LIST
77639: PUSH
77640: LD_INT 2
77642: PUSH
77643: LD_INT 2
77645: PUSH
77646: EMPTY
77647: LIST
77648: LIST
77649: PUSH
77650: LD_INT 1
77652: PUSH
77653: LD_INT 2
77655: PUSH
77656: EMPTY
77657: LIST
77658: LIST
77659: PUSH
77660: LD_INT 0
77662: PUSH
77663: LD_INT 2
77665: PUSH
77666: EMPTY
77667: LIST
77668: LIST
77669: PUSH
77670: LD_INT 1
77672: NEG
77673: PUSH
77674: LD_INT 1
77676: PUSH
77677: EMPTY
77678: LIST
77679: LIST
77680: PUSH
77681: LD_INT 2
77683: NEG
77684: PUSH
77685: LD_INT 1
77687: NEG
77688: PUSH
77689: EMPTY
77690: LIST
77691: LIST
77692: PUSH
77693: LD_INT 2
77695: NEG
77696: PUSH
77697: LD_INT 2
77699: NEG
77700: PUSH
77701: EMPTY
77702: LIST
77703: LIST
77704: PUSH
77705: LD_INT 2
77707: NEG
77708: PUSH
77709: LD_INT 3
77711: NEG
77712: PUSH
77713: EMPTY
77714: LIST
77715: LIST
77716: PUSH
77717: LD_INT 1
77719: NEG
77720: PUSH
77721: LD_INT 3
77723: NEG
77724: PUSH
77725: EMPTY
77726: LIST
77727: LIST
77728: PUSH
77729: LD_INT 0
77731: PUSH
77732: LD_INT 3
77734: NEG
77735: PUSH
77736: EMPTY
77737: LIST
77738: LIST
77739: PUSH
77740: LD_INT 1
77742: PUSH
77743: LD_INT 2
77745: NEG
77746: PUSH
77747: EMPTY
77748: LIST
77749: LIST
77750: PUSH
77751: LD_INT 3
77753: PUSH
77754: LD_INT 2
77756: PUSH
77757: EMPTY
77758: LIST
77759: LIST
77760: PUSH
77761: LD_INT 3
77763: PUSH
77764: LD_INT 3
77766: PUSH
77767: EMPTY
77768: LIST
77769: LIST
77770: PUSH
77771: LD_INT 2
77773: PUSH
77774: LD_INT 3
77776: PUSH
77777: EMPTY
77778: LIST
77779: LIST
77780: PUSH
77781: LD_INT 1
77783: PUSH
77784: LD_INT 3
77786: PUSH
77787: EMPTY
77788: LIST
77789: LIST
77790: PUSH
77791: LD_INT 0
77793: PUSH
77794: LD_INT 3
77796: PUSH
77797: EMPTY
77798: LIST
77799: LIST
77800: PUSH
77801: LD_INT 1
77803: NEG
77804: PUSH
77805: LD_INT 2
77807: PUSH
77808: EMPTY
77809: LIST
77810: LIST
77811: PUSH
77812: LD_INT 3
77814: NEG
77815: PUSH
77816: LD_INT 2
77818: NEG
77819: PUSH
77820: EMPTY
77821: LIST
77822: LIST
77823: PUSH
77824: LD_INT 3
77826: NEG
77827: PUSH
77828: LD_INT 3
77830: NEG
77831: PUSH
77832: EMPTY
77833: LIST
77834: LIST
77835: PUSH
77836: EMPTY
77837: LIST
77838: LIST
77839: LIST
77840: LIST
77841: LIST
77842: LIST
77843: LIST
77844: LIST
77845: LIST
77846: LIST
77847: LIST
77848: LIST
77849: LIST
77850: LIST
77851: LIST
77852: LIST
77853: LIST
77854: LIST
77855: LIST
77856: LIST
77857: LIST
77858: LIST
77859: LIST
77860: LIST
77861: LIST
77862: LIST
77863: LIST
77864: LIST
77865: LIST
77866: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
77867: LD_ADDR_VAR 0 43
77871: PUSH
77872: LD_INT 0
77874: PUSH
77875: LD_INT 0
77877: PUSH
77878: EMPTY
77879: LIST
77880: LIST
77881: PUSH
77882: LD_INT 0
77884: PUSH
77885: LD_INT 1
77887: NEG
77888: PUSH
77889: EMPTY
77890: LIST
77891: LIST
77892: PUSH
77893: LD_INT 1
77895: PUSH
77896: LD_INT 0
77898: PUSH
77899: EMPTY
77900: LIST
77901: LIST
77902: PUSH
77903: LD_INT 1
77905: PUSH
77906: LD_INT 1
77908: PUSH
77909: EMPTY
77910: LIST
77911: LIST
77912: PUSH
77913: LD_INT 0
77915: PUSH
77916: LD_INT 1
77918: PUSH
77919: EMPTY
77920: LIST
77921: LIST
77922: PUSH
77923: LD_INT 1
77925: NEG
77926: PUSH
77927: LD_INT 0
77929: PUSH
77930: EMPTY
77931: LIST
77932: LIST
77933: PUSH
77934: LD_INT 1
77936: NEG
77937: PUSH
77938: LD_INT 1
77940: NEG
77941: PUSH
77942: EMPTY
77943: LIST
77944: LIST
77945: PUSH
77946: LD_INT 1
77948: NEG
77949: PUSH
77950: LD_INT 2
77952: NEG
77953: PUSH
77954: EMPTY
77955: LIST
77956: LIST
77957: PUSH
77958: LD_INT 0
77960: PUSH
77961: LD_INT 2
77963: NEG
77964: PUSH
77965: EMPTY
77966: LIST
77967: LIST
77968: PUSH
77969: LD_INT 1
77971: PUSH
77972: LD_INT 1
77974: NEG
77975: PUSH
77976: EMPTY
77977: LIST
77978: LIST
77979: PUSH
77980: LD_INT 2
77982: PUSH
77983: LD_INT 0
77985: PUSH
77986: EMPTY
77987: LIST
77988: LIST
77989: PUSH
77990: LD_INT 2
77992: PUSH
77993: LD_INT 1
77995: PUSH
77996: EMPTY
77997: LIST
77998: LIST
77999: PUSH
78000: LD_INT 1
78002: PUSH
78003: LD_INT 2
78005: PUSH
78006: EMPTY
78007: LIST
78008: LIST
78009: PUSH
78010: LD_INT 0
78012: PUSH
78013: LD_INT 2
78015: PUSH
78016: EMPTY
78017: LIST
78018: LIST
78019: PUSH
78020: LD_INT 1
78022: NEG
78023: PUSH
78024: LD_INT 1
78026: PUSH
78027: EMPTY
78028: LIST
78029: LIST
78030: PUSH
78031: LD_INT 2
78033: NEG
78034: PUSH
78035: LD_INT 0
78037: PUSH
78038: EMPTY
78039: LIST
78040: LIST
78041: PUSH
78042: LD_INT 2
78044: NEG
78045: PUSH
78046: LD_INT 1
78048: NEG
78049: PUSH
78050: EMPTY
78051: LIST
78052: LIST
78053: PUSH
78054: LD_INT 1
78056: NEG
78057: PUSH
78058: LD_INT 3
78060: NEG
78061: PUSH
78062: EMPTY
78063: LIST
78064: LIST
78065: PUSH
78066: LD_INT 0
78068: PUSH
78069: LD_INT 3
78071: NEG
78072: PUSH
78073: EMPTY
78074: LIST
78075: LIST
78076: PUSH
78077: LD_INT 1
78079: PUSH
78080: LD_INT 2
78082: NEG
78083: PUSH
78084: EMPTY
78085: LIST
78086: LIST
78087: PUSH
78088: LD_INT 2
78090: PUSH
78091: LD_INT 1
78093: NEG
78094: PUSH
78095: EMPTY
78096: LIST
78097: LIST
78098: PUSH
78099: LD_INT 3
78101: PUSH
78102: LD_INT 0
78104: PUSH
78105: EMPTY
78106: LIST
78107: LIST
78108: PUSH
78109: LD_INT 3
78111: PUSH
78112: LD_INT 1
78114: PUSH
78115: EMPTY
78116: LIST
78117: LIST
78118: PUSH
78119: LD_INT 1
78121: PUSH
78122: LD_INT 3
78124: PUSH
78125: EMPTY
78126: LIST
78127: LIST
78128: PUSH
78129: LD_INT 0
78131: PUSH
78132: LD_INT 3
78134: PUSH
78135: EMPTY
78136: LIST
78137: LIST
78138: PUSH
78139: LD_INT 1
78141: NEG
78142: PUSH
78143: LD_INT 2
78145: PUSH
78146: EMPTY
78147: LIST
78148: LIST
78149: PUSH
78150: LD_INT 2
78152: NEG
78153: PUSH
78154: LD_INT 1
78156: PUSH
78157: EMPTY
78158: LIST
78159: LIST
78160: PUSH
78161: LD_INT 3
78163: NEG
78164: PUSH
78165: LD_INT 0
78167: PUSH
78168: EMPTY
78169: LIST
78170: LIST
78171: PUSH
78172: LD_INT 3
78174: NEG
78175: PUSH
78176: LD_INT 1
78178: NEG
78179: PUSH
78180: EMPTY
78181: LIST
78182: LIST
78183: PUSH
78184: EMPTY
78185: LIST
78186: LIST
78187: LIST
78188: LIST
78189: LIST
78190: LIST
78191: LIST
78192: LIST
78193: LIST
78194: LIST
78195: LIST
78196: LIST
78197: LIST
78198: LIST
78199: LIST
78200: LIST
78201: LIST
78202: LIST
78203: LIST
78204: LIST
78205: LIST
78206: LIST
78207: LIST
78208: LIST
78209: LIST
78210: LIST
78211: LIST
78212: LIST
78213: LIST
78214: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
78215: LD_ADDR_VAR 0 44
78219: PUSH
78220: LD_INT 0
78222: PUSH
78223: LD_INT 0
78225: PUSH
78226: EMPTY
78227: LIST
78228: LIST
78229: PUSH
78230: LD_INT 0
78232: PUSH
78233: LD_INT 1
78235: NEG
78236: PUSH
78237: EMPTY
78238: LIST
78239: LIST
78240: PUSH
78241: LD_INT 1
78243: PUSH
78244: LD_INT 0
78246: PUSH
78247: EMPTY
78248: LIST
78249: LIST
78250: PUSH
78251: LD_INT 1
78253: PUSH
78254: LD_INT 1
78256: PUSH
78257: EMPTY
78258: LIST
78259: LIST
78260: PUSH
78261: LD_INT 0
78263: PUSH
78264: LD_INT 1
78266: PUSH
78267: EMPTY
78268: LIST
78269: LIST
78270: PUSH
78271: LD_INT 1
78273: NEG
78274: PUSH
78275: LD_INT 0
78277: PUSH
78278: EMPTY
78279: LIST
78280: LIST
78281: PUSH
78282: LD_INT 1
78284: NEG
78285: PUSH
78286: LD_INT 1
78288: NEG
78289: PUSH
78290: EMPTY
78291: LIST
78292: LIST
78293: PUSH
78294: LD_INT 1
78296: NEG
78297: PUSH
78298: LD_INT 2
78300: NEG
78301: PUSH
78302: EMPTY
78303: LIST
78304: LIST
78305: PUSH
78306: LD_INT 1
78308: PUSH
78309: LD_INT 1
78311: NEG
78312: PUSH
78313: EMPTY
78314: LIST
78315: LIST
78316: PUSH
78317: LD_INT 2
78319: PUSH
78320: LD_INT 0
78322: PUSH
78323: EMPTY
78324: LIST
78325: LIST
78326: PUSH
78327: LD_INT 2
78329: PUSH
78330: LD_INT 1
78332: PUSH
78333: EMPTY
78334: LIST
78335: LIST
78336: PUSH
78337: LD_INT 2
78339: PUSH
78340: LD_INT 2
78342: PUSH
78343: EMPTY
78344: LIST
78345: LIST
78346: PUSH
78347: LD_INT 1
78349: PUSH
78350: LD_INT 2
78352: PUSH
78353: EMPTY
78354: LIST
78355: LIST
78356: PUSH
78357: LD_INT 1
78359: NEG
78360: PUSH
78361: LD_INT 1
78363: PUSH
78364: EMPTY
78365: LIST
78366: LIST
78367: PUSH
78368: LD_INT 2
78370: NEG
78371: PUSH
78372: LD_INT 0
78374: PUSH
78375: EMPTY
78376: LIST
78377: LIST
78378: PUSH
78379: LD_INT 2
78381: NEG
78382: PUSH
78383: LD_INT 1
78385: NEG
78386: PUSH
78387: EMPTY
78388: LIST
78389: LIST
78390: PUSH
78391: LD_INT 2
78393: NEG
78394: PUSH
78395: LD_INT 2
78397: NEG
78398: PUSH
78399: EMPTY
78400: LIST
78401: LIST
78402: PUSH
78403: LD_INT 2
78405: NEG
78406: PUSH
78407: LD_INT 3
78409: NEG
78410: PUSH
78411: EMPTY
78412: LIST
78413: LIST
78414: PUSH
78415: LD_INT 2
78417: PUSH
78418: LD_INT 1
78420: NEG
78421: PUSH
78422: EMPTY
78423: LIST
78424: LIST
78425: PUSH
78426: LD_INT 3
78428: PUSH
78429: LD_INT 0
78431: PUSH
78432: EMPTY
78433: LIST
78434: LIST
78435: PUSH
78436: LD_INT 3
78438: PUSH
78439: LD_INT 1
78441: PUSH
78442: EMPTY
78443: LIST
78444: LIST
78445: PUSH
78446: LD_INT 3
78448: PUSH
78449: LD_INT 2
78451: PUSH
78452: EMPTY
78453: LIST
78454: LIST
78455: PUSH
78456: LD_INT 3
78458: PUSH
78459: LD_INT 3
78461: PUSH
78462: EMPTY
78463: LIST
78464: LIST
78465: PUSH
78466: LD_INT 2
78468: PUSH
78469: LD_INT 3
78471: PUSH
78472: EMPTY
78473: LIST
78474: LIST
78475: PUSH
78476: LD_INT 2
78478: NEG
78479: PUSH
78480: LD_INT 1
78482: PUSH
78483: EMPTY
78484: LIST
78485: LIST
78486: PUSH
78487: LD_INT 3
78489: NEG
78490: PUSH
78491: LD_INT 0
78493: PUSH
78494: EMPTY
78495: LIST
78496: LIST
78497: PUSH
78498: LD_INT 3
78500: NEG
78501: PUSH
78502: LD_INT 1
78504: NEG
78505: PUSH
78506: EMPTY
78507: LIST
78508: LIST
78509: PUSH
78510: LD_INT 3
78512: NEG
78513: PUSH
78514: LD_INT 2
78516: NEG
78517: PUSH
78518: EMPTY
78519: LIST
78520: LIST
78521: PUSH
78522: LD_INT 3
78524: NEG
78525: PUSH
78526: LD_INT 3
78528: NEG
78529: PUSH
78530: EMPTY
78531: LIST
78532: LIST
78533: PUSH
78534: EMPTY
78535: LIST
78536: LIST
78537: LIST
78538: LIST
78539: LIST
78540: LIST
78541: LIST
78542: LIST
78543: LIST
78544: LIST
78545: LIST
78546: LIST
78547: LIST
78548: LIST
78549: LIST
78550: LIST
78551: LIST
78552: LIST
78553: LIST
78554: LIST
78555: LIST
78556: LIST
78557: LIST
78558: LIST
78559: LIST
78560: LIST
78561: LIST
78562: LIST
78563: LIST
78564: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
78565: LD_ADDR_VAR 0 45
78569: PUSH
78570: LD_INT 0
78572: PUSH
78573: LD_INT 0
78575: PUSH
78576: EMPTY
78577: LIST
78578: LIST
78579: PUSH
78580: LD_INT 0
78582: PUSH
78583: LD_INT 1
78585: NEG
78586: PUSH
78587: EMPTY
78588: LIST
78589: LIST
78590: PUSH
78591: LD_INT 1
78593: PUSH
78594: LD_INT 0
78596: PUSH
78597: EMPTY
78598: LIST
78599: LIST
78600: PUSH
78601: LD_INT 1
78603: PUSH
78604: LD_INT 1
78606: PUSH
78607: EMPTY
78608: LIST
78609: LIST
78610: PUSH
78611: LD_INT 0
78613: PUSH
78614: LD_INT 1
78616: PUSH
78617: EMPTY
78618: LIST
78619: LIST
78620: PUSH
78621: LD_INT 1
78623: NEG
78624: PUSH
78625: LD_INT 0
78627: PUSH
78628: EMPTY
78629: LIST
78630: LIST
78631: PUSH
78632: LD_INT 1
78634: NEG
78635: PUSH
78636: LD_INT 1
78638: NEG
78639: PUSH
78640: EMPTY
78641: LIST
78642: LIST
78643: PUSH
78644: LD_INT 1
78646: NEG
78647: PUSH
78648: LD_INT 2
78650: NEG
78651: PUSH
78652: EMPTY
78653: LIST
78654: LIST
78655: PUSH
78656: LD_INT 0
78658: PUSH
78659: LD_INT 2
78661: NEG
78662: PUSH
78663: EMPTY
78664: LIST
78665: LIST
78666: PUSH
78667: LD_INT 1
78669: PUSH
78670: LD_INT 1
78672: NEG
78673: PUSH
78674: EMPTY
78675: LIST
78676: LIST
78677: PUSH
78678: LD_INT 2
78680: PUSH
78681: LD_INT 1
78683: PUSH
78684: EMPTY
78685: LIST
78686: LIST
78687: PUSH
78688: LD_INT 2
78690: PUSH
78691: LD_INT 2
78693: PUSH
78694: EMPTY
78695: LIST
78696: LIST
78697: PUSH
78698: LD_INT 1
78700: PUSH
78701: LD_INT 2
78703: PUSH
78704: EMPTY
78705: LIST
78706: LIST
78707: PUSH
78708: LD_INT 0
78710: PUSH
78711: LD_INT 2
78713: PUSH
78714: EMPTY
78715: LIST
78716: LIST
78717: PUSH
78718: LD_INT 1
78720: NEG
78721: PUSH
78722: LD_INT 1
78724: PUSH
78725: EMPTY
78726: LIST
78727: LIST
78728: PUSH
78729: LD_INT 2
78731: NEG
78732: PUSH
78733: LD_INT 1
78735: NEG
78736: PUSH
78737: EMPTY
78738: LIST
78739: LIST
78740: PUSH
78741: LD_INT 2
78743: NEG
78744: PUSH
78745: LD_INT 2
78747: NEG
78748: PUSH
78749: EMPTY
78750: LIST
78751: LIST
78752: PUSH
78753: LD_INT 2
78755: NEG
78756: PUSH
78757: LD_INT 3
78759: NEG
78760: PUSH
78761: EMPTY
78762: LIST
78763: LIST
78764: PUSH
78765: LD_INT 1
78767: NEG
78768: PUSH
78769: LD_INT 3
78771: NEG
78772: PUSH
78773: EMPTY
78774: LIST
78775: LIST
78776: PUSH
78777: LD_INT 0
78779: PUSH
78780: LD_INT 3
78782: NEG
78783: PUSH
78784: EMPTY
78785: LIST
78786: LIST
78787: PUSH
78788: LD_INT 1
78790: PUSH
78791: LD_INT 2
78793: NEG
78794: PUSH
78795: EMPTY
78796: LIST
78797: LIST
78798: PUSH
78799: LD_INT 3
78801: PUSH
78802: LD_INT 2
78804: PUSH
78805: EMPTY
78806: LIST
78807: LIST
78808: PUSH
78809: LD_INT 3
78811: PUSH
78812: LD_INT 3
78814: PUSH
78815: EMPTY
78816: LIST
78817: LIST
78818: PUSH
78819: LD_INT 2
78821: PUSH
78822: LD_INT 3
78824: PUSH
78825: EMPTY
78826: LIST
78827: LIST
78828: PUSH
78829: LD_INT 1
78831: PUSH
78832: LD_INT 3
78834: PUSH
78835: EMPTY
78836: LIST
78837: LIST
78838: PUSH
78839: LD_INT 0
78841: PUSH
78842: LD_INT 3
78844: PUSH
78845: EMPTY
78846: LIST
78847: LIST
78848: PUSH
78849: LD_INT 1
78851: NEG
78852: PUSH
78853: LD_INT 2
78855: PUSH
78856: EMPTY
78857: LIST
78858: LIST
78859: PUSH
78860: LD_INT 3
78862: NEG
78863: PUSH
78864: LD_INT 2
78866: NEG
78867: PUSH
78868: EMPTY
78869: LIST
78870: LIST
78871: PUSH
78872: LD_INT 3
78874: NEG
78875: PUSH
78876: LD_INT 3
78878: NEG
78879: PUSH
78880: EMPTY
78881: LIST
78882: LIST
78883: PUSH
78884: EMPTY
78885: LIST
78886: LIST
78887: LIST
78888: LIST
78889: LIST
78890: LIST
78891: LIST
78892: LIST
78893: LIST
78894: LIST
78895: LIST
78896: LIST
78897: LIST
78898: LIST
78899: LIST
78900: LIST
78901: LIST
78902: LIST
78903: LIST
78904: LIST
78905: LIST
78906: LIST
78907: LIST
78908: LIST
78909: LIST
78910: LIST
78911: LIST
78912: LIST
78913: LIST
78914: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
78915: LD_ADDR_VAR 0 46
78919: PUSH
78920: LD_INT 0
78922: PUSH
78923: LD_INT 0
78925: PUSH
78926: EMPTY
78927: LIST
78928: LIST
78929: PUSH
78930: LD_INT 0
78932: PUSH
78933: LD_INT 1
78935: NEG
78936: PUSH
78937: EMPTY
78938: LIST
78939: LIST
78940: PUSH
78941: LD_INT 1
78943: PUSH
78944: LD_INT 0
78946: PUSH
78947: EMPTY
78948: LIST
78949: LIST
78950: PUSH
78951: LD_INT 1
78953: PUSH
78954: LD_INT 1
78956: PUSH
78957: EMPTY
78958: LIST
78959: LIST
78960: PUSH
78961: LD_INT 0
78963: PUSH
78964: LD_INT 1
78966: PUSH
78967: EMPTY
78968: LIST
78969: LIST
78970: PUSH
78971: LD_INT 1
78973: NEG
78974: PUSH
78975: LD_INT 0
78977: PUSH
78978: EMPTY
78979: LIST
78980: LIST
78981: PUSH
78982: LD_INT 1
78984: NEG
78985: PUSH
78986: LD_INT 1
78988: NEG
78989: PUSH
78990: EMPTY
78991: LIST
78992: LIST
78993: PUSH
78994: LD_INT 1
78996: NEG
78997: PUSH
78998: LD_INT 2
79000: NEG
79001: PUSH
79002: EMPTY
79003: LIST
79004: LIST
79005: PUSH
79006: LD_INT 0
79008: PUSH
79009: LD_INT 2
79011: NEG
79012: PUSH
79013: EMPTY
79014: LIST
79015: LIST
79016: PUSH
79017: LD_INT 1
79019: PUSH
79020: LD_INT 1
79022: NEG
79023: PUSH
79024: EMPTY
79025: LIST
79026: LIST
79027: PUSH
79028: LD_INT 2
79030: PUSH
79031: LD_INT 0
79033: PUSH
79034: EMPTY
79035: LIST
79036: LIST
79037: PUSH
79038: LD_INT 2
79040: PUSH
79041: LD_INT 1
79043: PUSH
79044: EMPTY
79045: LIST
79046: LIST
79047: PUSH
79048: LD_INT 1
79050: PUSH
79051: LD_INT 2
79053: PUSH
79054: EMPTY
79055: LIST
79056: LIST
79057: PUSH
79058: LD_INT 0
79060: PUSH
79061: LD_INT 2
79063: PUSH
79064: EMPTY
79065: LIST
79066: LIST
79067: PUSH
79068: LD_INT 1
79070: NEG
79071: PUSH
79072: LD_INT 1
79074: PUSH
79075: EMPTY
79076: LIST
79077: LIST
79078: PUSH
79079: LD_INT 2
79081: NEG
79082: PUSH
79083: LD_INT 0
79085: PUSH
79086: EMPTY
79087: LIST
79088: LIST
79089: PUSH
79090: LD_INT 2
79092: NEG
79093: PUSH
79094: LD_INT 1
79096: NEG
79097: PUSH
79098: EMPTY
79099: LIST
79100: LIST
79101: PUSH
79102: LD_INT 1
79104: NEG
79105: PUSH
79106: LD_INT 3
79108: NEG
79109: PUSH
79110: EMPTY
79111: LIST
79112: LIST
79113: PUSH
79114: LD_INT 0
79116: PUSH
79117: LD_INT 3
79119: NEG
79120: PUSH
79121: EMPTY
79122: LIST
79123: LIST
79124: PUSH
79125: LD_INT 1
79127: PUSH
79128: LD_INT 2
79130: NEG
79131: PUSH
79132: EMPTY
79133: LIST
79134: LIST
79135: PUSH
79136: LD_INT 2
79138: PUSH
79139: LD_INT 1
79141: NEG
79142: PUSH
79143: EMPTY
79144: LIST
79145: LIST
79146: PUSH
79147: LD_INT 3
79149: PUSH
79150: LD_INT 0
79152: PUSH
79153: EMPTY
79154: LIST
79155: LIST
79156: PUSH
79157: LD_INT 3
79159: PUSH
79160: LD_INT 1
79162: PUSH
79163: EMPTY
79164: LIST
79165: LIST
79166: PUSH
79167: LD_INT 1
79169: PUSH
79170: LD_INT 3
79172: PUSH
79173: EMPTY
79174: LIST
79175: LIST
79176: PUSH
79177: LD_INT 0
79179: PUSH
79180: LD_INT 3
79182: PUSH
79183: EMPTY
79184: LIST
79185: LIST
79186: PUSH
79187: LD_INT 1
79189: NEG
79190: PUSH
79191: LD_INT 2
79193: PUSH
79194: EMPTY
79195: LIST
79196: LIST
79197: PUSH
79198: LD_INT 2
79200: NEG
79201: PUSH
79202: LD_INT 1
79204: PUSH
79205: EMPTY
79206: LIST
79207: LIST
79208: PUSH
79209: LD_INT 3
79211: NEG
79212: PUSH
79213: LD_INT 0
79215: PUSH
79216: EMPTY
79217: LIST
79218: LIST
79219: PUSH
79220: LD_INT 3
79222: NEG
79223: PUSH
79224: LD_INT 1
79226: NEG
79227: PUSH
79228: EMPTY
79229: LIST
79230: LIST
79231: PUSH
79232: EMPTY
79233: LIST
79234: LIST
79235: LIST
79236: LIST
79237: LIST
79238: LIST
79239: LIST
79240: LIST
79241: LIST
79242: LIST
79243: LIST
79244: LIST
79245: LIST
79246: LIST
79247: LIST
79248: LIST
79249: LIST
79250: LIST
79251: LIST
79252: LIST
79253: LIST
79254: LIST
79255: LIST
79256: LIST
79257: LIST
79258: LIST
79259: LIST
79260: LIST
79261: LIST
79262: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79263: LD_ADDR_VAR 0 47
79267: PUSH
79268: LD_INT 0
79270: PUSH
79271: LD_INT 0
79273: PUSH
79274: EMPTY
79275: LIST
79276: LIST
79277: PUSH
79278: LD_INT 0
79280: PUSH
79281: LD_INT 1
79283: NEG
79284: PUSH
79285: EMPTY
79286: LIST
79287: LIST
79288: PUSH
79289: LD_INT 1
79291: PUSH
79292: LD_INT 0
79294: PUSH
79295: EMPTY
79296: LIST
79297: LIST
79298: PUSH
79299: LD_INT 1
79301: PUSH
79302: LD_INT 1
79304: PUSH
79305: EMPTY
79306: LIST
79307: LIST
79308: PUSH
79309: LD_INT 0
79311: PUSH
79312: LD_INT 1
79314: PUSH
79315: EMPTY
79316: LIST
79317: LIST
79318: PUSH
79319: LD_INT 1
79321: NEG
79322: PUSH
79323: LD_INT 0
79325: PUSH
79326: EMPTY
79327: LIST
79328: LIST
79329: PUSH
79330: LD_INT 1
79332: NEG
79333: PUSH
79334: LD_INT 1
79336: NEG
79337: PUSH
79338: EMPTY
79339: LIST
79340: LIST
79341: PUSH
79342: LD_INT 1
79344: NEG
79345: PUSH
79346: LD_INT 2
79348: NEG
79349: PUSH
79350: EMPTY
79351: LIST
79352: LIST
79353: PUSH
79354: LD_INT 0
79356: PUSH
79357: LD_INT 2
79359: NEG
79360: PUSH
79361: EMPTY
79362: LIST
79363: LIST
79364: PUSH
79365: LD_INT 1
79367: PUSH
79368: LD_INT 1
79370: NEG
79371: PUSH
79372: EMPTY
79373: LIST
79374: LIST
79375: PUSH
79376: LD_INT 2
79378: NEG
79379: PUSH
79380: LD_INT 1
79382: NEG
79383: PUSH
79384: EMPTY
79385: LIST
79386: LIST
79387: PUSH
79388: LD_INT 2
79390: NEG
79391: PUSH
79392: LD_INT 2
79394: NEG
79395: PUSH
79396: EMPTY
79397: LIST
79398: LIST
79399: PUSH
79400: EMPTY
79401: LIST
79402: LIST
79403: LIST
79404: LIST
79405: LIST
79406: LIST
79407: LIST
79408: LIST
79409: LIST
79410: LIST
79411: LIST
79412: LIST
79413: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
79414: LD_ADDR_VAR 0 48
79418: PUSH
79419: LD_INT 0
79421: PUSH
79422: LD_INT 0
79424: PUSH
79425: EMPTY
79426: LIST
79427: LIST
79428: PUSH
79429: LD_INT 0
79431: PUSH
79432: LD_INT 1
79434: NEG
79435: PUSH
79436: EMPTY
79437: LIST
79438: LIST
79439: PUSH
79440: LD_INT 1
79442: PUSH
79443: LD_INT 0
79445: PUSH
79446: EMPTY
79447: LIST
79448: LIST
79449: PUSH
79450: LD_INT 1
79452: PUSH
79453: LD_INT 1
79455: PUSH
79456: EMPTY
79457: LIST
79458: LIST
79459: PUSH
79460: LD_INT 0
79462: PUSH
79463: LD_INT 1
79465: PUSH
79466: EMPTY
79467: LIST
79468: LIST
79469: PUSH
79470: LD_INT 1
79472: NEG
79473: PUSH
79474: LD_INT 0
79476: PUSH
79477: EMPTY
79478: LIST
79479: LIST
79480: PUSH
79481: LD_INT 1
79483: NEG
79484: PUSH
79485: LD_INT 1
79487: NEG
79488: PUSH
79489: EMPTY
79490: LIST
79491: LIST
79492: PUSH
79493: LD_INT 1
79495: NEG
79496: PUSH
79497: LD_INT 2
79499: NEG
79500: PUSH
79501: EMPTY
79502: LIST
79503: LIST
79504: PUSH
79505: LD_INT 0
79507: PUSH
79508: LD_INT 2
79510: NEG
79511: PUSH
79512: EMPTY
79513: LIST
79514: LIST
79515: PUSH
79516: LD_INT 1
79518: PUSH
79519: LD_INT 1
79521: NEG
79522: PUSH
79523: EMPTY
79524: LIST
79525: LIST
79526: PUSH
79527: LD_INT 2
79529: PUSH
79530: LD_INT 0
79532: PUSH
79533: EMPTY
79534: LIST
79535: LIST
79536: PUSH
79537: LD_INT 2
79539: PUSH
79540: LD_INT 1
79542: PUSH
79543: EMPTY
79544: LIST
79545: LIST
79546: PUSH
79547: EMPTY
79548: LIST
79549: LIST
79550: LIST
79551: LIST
79552: LIST
79553: LIST
79554: LIST
79555: LIST
79556: LIST
79557: LIST
79558: LIST
79559: LIST
79560: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
79561: LD_ADDR_VAR 0 49
79565: PUSH
79566: LD_INT 0
79568: PUSH
79569: LD_INT 0
79571: PUSH
79572: EMPTY
79573: LIST
79574: LIST
79575: PUSH
79576: LD_INT 0
79578: PUSH
79579: LD_INT 1
79581: NEG
79582: PUSH
79583: EMPTY
79584: LIST
79585: LIST
79586: PUSH
79587: LD_INT 1
79589: PUSH
79590: LD_INT 0
79592: PUSH
79593: EMPTY
79594: LIST
79595: LIST
79596: PUSH
79597: LD_INT 1
79599: PUSH
79600: LD_INT 1
79602: PUSH
79603: EMPTY
79604: LIST
79605: LIST
79606: PUSH
79607: LD_INT 0
79609: PUSH
79610: LD_INT 1
79612: PUSH
79613: EMPTY
79614: LIST
79615: LIST
79616: PUSH
79617: LD_INT 1
79619: NEG
79620: PUSH
79621: LD_INT 0
79623: PUSH
79624: EMPTY
79625: LIST
79626: LIST
79627: PUSH
79628: LD_INT 1
79630: NEG
79631: PUSH
79632: LD_INT 1
79634: NEG
79635: PUSH
79636: EMPTY
79637: LIST
79638: LIST
79639: PUSH
79640: LD_INT 1
79642: PUSH
79643: LD_INT 1
79645: NEG
79646: PUSH
79647: EMPTY
79648: LIST
79649: LIST
79650: PUSH
79651: LD_INT 2
79653: PUSH
79654: LD_INT 0
79656: PUSH
79657: EMPTY
79658: LIST
79659: LIST
79660: PUSH
79661: LD_INT 2
79663: PUSH
79664: LD_INT 1
79666: PUSH
79667: EMPTY
79668: LIST
79669: LIST
79670: PUSH
79671: LD_INT 2
79673: PUSH
79674: LD_INT 2
79676: PUSH
79677: EMPTY
79678: LIST
79679: LIST
79680: PUSH
79681: LD_INT 1
79683: PUSH
79684: LD_INT 2
79686: PUSH
79687: EMPTY
79688: LIST
79689: LIST
79690: PUSH
79691: EMPTY
79692: LIST
79693: LIST
79694: LIST
79695: LIST
79696: LIST
79697: LIST
79698: LIST
79699: LIST
79700: LIST
79701: LIST
79702: LIST
79703: LIST
79704: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
79705: LD_ADDR_VAR 0 50
79709: PUSH
79710: LD_INT 0
79712: PUSH
79713: LD_INT 0
79715: PUSH
79716: EMPTY
79717: LIST
79718: LIST
79719: PUSH
79720: LD_INT 0
79722: PUSH
79723: LD_INT 1
79725: NEG
79726: PUSH
79727: EMPTY
79728: LIST
79729: LIST
79730: PUSH
79731: LD_INT 1
79733: PUSH
79734: LD_INT 0
79736: PUSH
79737: EMPTY
79738: LIST
79739: LIST
79740: PUSH
79741: LD_INT 1
79743: PUSH
79744: LD_INT 1
79746: PUSH
79747: EMPTY
79748: LIST
79749: LIST
79750: PUSH
79751: LD_INT 0
79753: PUSH
79754: LD_INT 1
79756: PUSH
79757: EMPTY
79758: LIST
79759: LIST
79760: PUSH
79761: LD_INT 1
79763: NEG
79764: PUSH
79765: LD_INT 0
79767: PUSH
79768: EMPTY
79769: LIST
79770: LIST
79771: PUSH
79772: LD_INT 1
79774: NEG
79775: PUSH
79776: LD_INT 1
79778: NEG
79779: PUSH
79780: EMPTY
79781: LIST
79782: LIST
79783: PUSH
79784: LD_INT 2
79786: PUSH
79787: LD_INT 1
79789: PUSH
79790: EMPTY
79791: LIST
79792: LIST
79793: PUSH
79794: LD_INT 2
79796: PUSH
79797: LD_INT 2
79799: PUSH
79800: EMPTY
79801: LIST
79802: LIST
79803: PUSH
79804: LD_INT 1
79806: PUSH
79807: LD_INT 2
79809: PUSH
79810: EMPTY
79811: LIST
79812: LIST
79813: PUSH
79814: LD_INT 0
79816: PUSH
79817: LD_INT 2
79819: PUSH
79820: EMPTY
79821: LIST
79822: LIST
79823: PUSH
79824: LD_INT 1
79826: NEG
79827: PUSH
79828: LD_INT 1
79830: PUSH
79831: EMPTY
79832: LIST
79833: LIST
79834: PUSH
79835: EMPTY
79836: LIST
79837: LIST
79838: LIST
79839: LIST
79840: LIST
79841: LIST
79842: LIST
79843: LIST
79844: LIST
79845: LIST
79846: LIST
79847: LIST
79848: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
79849: LD_ADDR_VAR 0 51
79853: PUSH
79854: LD_INT 0
79856: PUSH
79857: LD_INT 0
79859: PUSH
79860: EMPTY
79861: LIST
79862: LIST
79863: PUSH
79864: LD_INT 0
79866: PUSH
79867: LD_INT 1
79869: NEG
79870: PUSH
79871: EMPTY
79872: LIST
79873: LIST
79874: PUSH
79875: LD_INT 1
79877: PUSH
79878: LD_INT 0
79880: PUSH
79881: EMPTY
79882: LIST
79883: LIST
79884: PUSH
79885: LD_INT 1
79887: PUSH
79888: LD_INT 1
79890: PUSH
79891: EMPTY
79892: LIST
79893: LIST
79894: PUSH
79895: LD_INT 0
79897: PUSH
79898: LD_INT 1
79900: PUSH
79901: EMPTY
79902: LIST
79903: LIST
79904: PUSH
79905: LD_INT 1
79907: NEG
79908: PUSH
79909: LD_INT 0
79911: PUSH
79912: EMPTY
79913: LIST
79914: LIST
79915: PUSH
79916: LD_INT 1
79918: NEG
79919: PUSH
79920: LD_INT 1
79922: NEG
79923: PUSH
79924: EMPTY
79925: LIST
79926: LIST
79927: PUSH
79928: LD_INT 1
79930: PUSH
79931: LD_INT 2
79933: PUSH
79934: EMPTY
79935: LIST
79936: LIST
79937: PUSH
79938: LD_INT 0
79940: PUSH
79941: LD_INT 2
79943: PUSH
79944: EMPTY
79945: LIST
79946: LIST
79947: PUSH
79948: LD_INT 1
79950: NEG
79951: PUSH
79952: LD_INT 1
79954: PUSH
79955: EMPTY
79956: LIST
79957: LIST
79958: PUSH
79959: LD_INT 2
79961: NEG
79962: PUSH
79963: LD_INT 0
79965: PUSH
79966: EMPTY
79967: LIST
79968: LIST
79969: PUSH
79970: LD_INT 2
79972: NEG
79973: PUSH
79974: LD_INT 1
79976: NEG
79977: PUSH
79978: EMPTY
79979: LIST
79980: LIST
79981: PUSH
79982: EMPTY
79983: LIST
79984: LIST
79985: LIST
79986: LIST
79987: LIST
79988: LIST
79989: LIST
79990: LIST
79991: LIST
79992: LIST
79993: LIST
79994: LIST
79995: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79996: LD_ADDR_VAR 0 52
80000: PUSH
80001: LD_INT 0
80003: PUSH
80004: LD_INT 0
80006: PUSH
80007: EMPTY
80008: LIST
80009: LIST
80010: PUSH
80011: LD_INT 0
80013: PUSH
80014: LD_INT 1
80016: NEG
80017: PUSH
80018: EMPTY
80019: LIST
80020: LIST
80021: PUSH
80022: LD_INT 1
80024: PUSH
80025: LD_INT 0
80027: PUSH
80028: EMPTY
80029: LIST
80030: LIST
80031: PUSH
80032: LD_INT 1
80034: PUSH
80035: LD_INT 1
80037: PUSH
80038: EMPTY
80039: LIST
80040: LIST
80041: PUSH
80042: LD_INT 0
80044: PUSH
80045: LD_INT 1
80047: PUSH
80048: EMPTY
80049: LIST
80050: LIST
80051: PUSH
80052: LD_INT 1
80054: NEG
80055: PUSH
80056: LD_INT 0
80058: PUSH
80059: EMPTY
80060: LIST
80061: LIST
80062: PUSH
80063: LD_INT 1
80065: NEG
80066: PUSH
80067: LD_INT 1
80069: NEG
80070: PUSH
80071: EMPTY
80072: LIST
80073: LIST
80074: PUSH
80075: LD_INT 1
80077: NEG
80078: PUSH
80079: LD_INT 2
80081: NEG
80082: PUSH
80083: EMPTY
80084: LIST
80085: LIST
80086: PUSH
80087: LD_INT 1
80089: NEG
80090: PUSH
80091: LD_INT 1
80093: PUSH
80094: EMPTY
80095: LIST
80096: LIST
80097: PUSH
80098: LD_INT 2
80100: NEG
80101: PUSH
80102: LD_INT 0
80104: PUSH
80105: EMPTY
80106: LIST
80107: LIST
80108: PUSH
80109: LD_INT 2
80111: NEG
80112: PUSH
80113: LD_INT 1
80115: NEG
80116: PUSH
80117: EMPTY
80118: LIST
80119: LIST
80120: PUSH
80121: LD_INT 2
80123: NEG
80124: PUSH
80125: LD_INT 2
80127: NEG
80128: PUSH
80129: EMPTY
80130: LIST
80131: LIST
80132: PUSH
80133: EMPTY
80134: LIST
80135: LIST
80136: LIST
80137: LIST
80138: LIST
80139: LIST
80140: LIST
80141: LIST
80142: LIST
80143: LIST
80144: LIST
80145: LIST
80146: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
80147: LD_ADDR_VAR 0 53
80151: PUSH
80152: LD_INT 0
80154: PUSH
80155: LD_INT 0
80157: PUSH
80158: EMPTY
80159: LIST
80160: LIST
80161: PUSH
80162: LD_INT 0
80164: PUSH
80165: LD_INT 1
80167: NEG
80168: PUSH
80169: EMPTY
80170: LIST
80171: LIST
80172: PUSH
80173: LD_INT 1
80175: PUSH
80176: LD_INT 0
80178: PUSH
80179: EMPTY
80180: LIST
80181: LIST
80182: PUSH
80183: LD_INT 1
80185: PUSH
80186: LD_INT 1
80188: PUSH
80189: EMPTY
80190: LIST
80191: LIST
80192: PUSH
80193: LD_INT 0
80195: PUSH
80196: LD_INT 1
80198: PUSH
80199: EMPTY
80200: LIST
80201: LIST
80202: PUSH
80203: LD_INT 1
80205: NEG
80206: PUSH
80207: LD_INT 0
80209: PUSH
80210: EMPTY
80211: LIST
80212: LIST
80213: PUSH
80214: LD_INT 1
80216: NEG
80217: PUSH
80218: LD_INT 1
80220: NEG
80221: PUSH
80222: EMPTY
80223: LIST
80224: LIST
80225: PUSH
80226: LD_INT 1
80228: NEG
80229: PUSH
80230: LD_INT 2
80232: NEG
80233: PUSH
80234: EMPTY
80235: LIST
80236: LIST
80237: PUSH
80238: LD_INT 0
80240: PUSH
80241: LD_INT 2
80243: NEG
80244: PUSH
80245: EMPTY
80246: LIST
80247: LIST
80248: PUSH
80249: LD_INT 1
80251: PUSH
80252: LD_INT 1
80254: NEG
80255: PUSH
80256: EMPTY
80257: LIST
80258: LIST
80259: PUSH
80260: LD_INT 2
80262: PUSH
80263: LD_INT 0
80265: PUSH
80266: EMPTY
80267: LIST
80268: LIST
80269: PUSH
80270: LD_INT 2
80272: PUSH
80273: LD_INT 1
80275: PUSH
80276: EMPTY
80277: LIST
80278: LIST
80279: PUSH
80280: LD_INT 2
80282: PUSH
80283: LD_INT 2
80285: PUSH
80286: EMPTY
80287: LIST
80288: LIST
80289: PUSH
80290: LD_INT 1
80292: PUSH
80293: LD_INT 2
80295: PUSH
80296: EMPTY
80297: LIST
80298: LIST
80299: PUSH
80300: LD_INT 0
80302: PUSH
80303: LD_INT 2
80305: PUSH
80306: EMPTY
80307: LIST
80308: LIST
80309: PUSH
80310: LD_INT 1
80312: NEG
80313: PUSH
80314: LD_INT 1
80316: PUSH
80317: EMPTY
80318: LIST
80319: LIST
80320: PUSH
80321: LD_INT 2
80323: NEG
80324: PUSH
80325: LD_INT 0
80327: PUSH
80328: EMPTY
80329: LIST
80330: LIST
80331: PUSH
80332: LD_INT 2
80334: NEG
80335: PUSH
80336: LD_INT 1
80338: NEG
80339: PUSH
80340: EMPTY
80341: LIST
80342: LIST
80343: PUSH
80344: LD_INT 2
80346: NEG
80347: PUSH
80348: LD_INT 2
80350: NEG
80351: PUSH
80352: EMPTY
80353: LIST
80354: LIST
80355: PUSH
80356: EMPTY
80357: LIST
80358: LIST
80359: LIST
80360: LIST
80361: LIST
80362: LIST
80363: LIST
80364: LIST
80365: LIST
80366: LIST
80367: LIST
80368: LIST
80369: LIST
80370: LIST
80371: LIST
80372: LIST
80373: LIST
80374: LIST
80375: LIST
80376: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
80377: LD_ADDR_VAR 0 54
80381: PUSH
80382: LD_INT 0
80384: PUSH
80385: LD_INT 0
80387: PUSH
80388: EMPTY
80389: LIST
80390: LIST
80391: PUSH
80392: LD_INT 0
80394: PUSH
80395: LD_INT 1
80397: NEG
80398: PUSH
80399: EMPTY
80400: LIST
80401: LIST
80402: PUSH
80403: LD_INT 1
80405: PUSH
80406: LD_INT 0
80408: PUSH
80409: EMPTY
80410: LIST
80411: LIST
80412: PUSH
80413: LD_INT 1
80415: PUSH
80416: LD_INT 1
80418: PUSH
80419: EMPTY
80420: LIST
80421: LIST
80422: PUSH
80423: LD_INT 0
80425: PUSH
80426: LD_INT 1
80428: PUSH
80429: EMPTY
80430: LIST
80431: LIST
80432: PUSH
80433: LD_INT 1
80435: NEG
80436: PUSH
80437: LD_INT 0
80439: PUSH
80440: EMPTY
80441: LIST
80442: LIST
80443: PUSH
80444: LD_INT 1
80446: NEG
80447: PUSH
80448: LD_INT 1
80450: NEG
80451: PUSH
80452: EMPTY
80453: LIST
80454: LIST
80455: PUSH
80456: LD_INT 1
80458: NEG
80459: PUSH
80460: LD_INT 2
80462: NEG
80463: PUSH
80464: EMPTY
80465: LIST
80466: LIST
80467: PUSH
80468: LD_INT 0
80470: PUSH
80471: LD_INT 2
80473: NEG
80474: PUSH
80475: EMPTY
80476: LIST
80477: LIST
80478: PUSH
80479: LD_INT 1
80481: PUSH
80482: LD_INT 1
80484: NEG
80485: PUSH
80486: EMPTY
80487: LIST
80488: LIST
80489: PUSH
80490: LD_INT 2
80492: PUSH
80493: LD_INT 0
80495: PUSH
80496: EMPTY
80497: LIST
80498: LIST
80499: PUSH
80500: LD_INT 2
80502: PUSH
80503: LD_INT 1
80505: PUSH
80506: EMPTY
80507: LIST
80508: LIST
80509: PUSH
80510: LD_INT 2
80512: PUSH
80513: LD_INT 2
80515: PUSH
80516: EMPTY
80517: LIST
80518: LIST
80519: PUSH
80520: LD_INT 1
80522: PUSH
80523: LD_INT 2
80525: PUSH
80526: EMPTY
80527: LIST
80528: LIST
80529: PUSH
80530: LD_INT 0
80532: PUSH
80533: LD_INT 2
80535: PUSH
80536: EMPTY
80537: LIST
80538: LIST
80539: PUSH
80540: LD_INT 1
80542: NEG
80543: PUSH
80544: LD_INT 1
80546: PUSH
80547: EMPTY
80548: LIST
80549: LIST
80550: PUSH
80551: LD_INT 2
80553: NEG
80554: PUSH
80555: LD_INT 0
80557: PUSH
80558: EMPTY
80559: LIST
80560: LIST
80561: PUSH
80562: LD_INT 2
80564: NEG
80565: PUSH
80566: LD_INT 1
80568: NEG
80569: PUSH
80570: EMPTY
80571: LIST
80572: LIST
80573: PUSH
80574: LD_INT 2
80576: NEG
80577: PUSH
80578: LD_INT 2
80580: NEG
80581: PUSH
80582: EMPTY
80583: LIST
80584: LIST
80585: PUSH
80586: EMPTY
80587: LIST
80588: LIST
80589: LIST
80590: LIST
80591: LIST
80592: LIST
80593: LIST
80594: LIST
80595: LIST
80596: LIST
80597: LIST
80598: LIST
80599: LIST
80600: LIST
80601: LIST
80602: LIST
80603: LIST
80604: LIST
80605: LIST
80606: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
80607: LD_ADDR_VAR 0 55
80611: PUSH
80612: LD_INT 0
80614: PUSH
80615: LD_INT 0
80617: PUSH
80618: EMPTY
80619: LIST
80620: LIST
80621: PUSH
80622: LD_INT 0
80624: PUSH
80625: LD_INT 1
80627: NEG
80628: PUSH
80629: EMPTY
80630: LIST
80631: LIST
80632: PUSH
80633: LD_INT 1
80635: PUSH
80636: LD_INT 0
80638: PUSH
80639: EMPTY
80640: LIST
80641: LIST
80642: PUSH
80643: LD_INT 1
80645: PUSH
80646: LD_INT 1
80648: PUSH
80649: EMPTY
80650: LIST
80651: LIST
80652: PUSH
80653: LD_INT 0
80655: PUSH
80656: LD_INT 1
80658: PUSH
80659: EMPTY
80660: LIST
80661: LIST
80662: PUSH
80663: LD_INT 1
80665: NEG
80666: PUSH
80667: LD_INT 0
80669: PUSH
80670: EMPTY
80671: LIST
80672: LIST
80673: PUSH
80674: LD_INT 1
80676: NEG
80677: PUSH
80678: LD_INT 1
80680: NEG
80681: PUSH
80682: EMPTY
80683: LIST
80684: LIST
80685: PUSH
80686: LD_INT 1
80688: NEG
80689: PUSH
80690: LD_INT 2
80692: NEG
80693: PUSH
80694: EMPTY
80695: LIST
80696: LIST
80697: PUSH
80698: LD_INT 0
80700: PUSH
80701: LD_INT 2
80703: NEG
80704: PUSH
80705: EMPTY
80706: LIST
80707: LIST
80708: PUSH
80709: LD_INT 1
80711: PUSH
80712: LD_INT 1
80714: NEG
80715: PUSH
80716: EMPTY
80717: LIST
80718: LIST
80719: PUSH
80720: LD_INT 2
80722: PUSH
80723: LD_INT 0
80725: PUSH
80726: EMPTY
80727: LIST
80728: LIST
80729: PUSH
80730: LD_INT 2
80732: PUSH
80733: LD_INT 1
80735: PUSH
80736: EMPTY
80737: LIST
80738: LIST
80739: PUSH
80740: LD_INT 2
80742: PUSH
80743: LD_INT 2
80745: PUSH
80746: EMPTY
80747: LIST
80748: LIST
80749: PUSH
80750: LD_INT 1
80752: PUSH
80753: LD_INT 2
80755: PUSH
80756: EMPTY
80757: LIST
80758: LIST
80759: PUSH
80760: LD_INT 0
80762: PUSH
80763: LD_INT 2
80765: PUSH
80766: EMPTY
80767: LIST
80768: LIST
80769: PUSH
80770: LD_INT 1
80772: NEG
80773: PUSH
80774: LD_INT 1
80776: PUSH
80777: EMPTY
80778: LIST
80779: LIST
80780: PUSH
80781: LD_INT 2
80783: NEG
80784: PUSH
80785: LD_INT 0
80787: PUSH
80788: EMPTY
80789: LIST
80790: LIST
80791: PUSH
80792: LD_INT 2
80794: NEG
80795: PUSH
80796: LD_INT 1
80798: NEG
80799: PUSH
80800: EMPTY
80801: LIST
80802: LIST
80803: PUSH
80804: LD_INT 2
80806: NEG
80807: PUSH
80808: LD_INT 2
80810: NEG
80811: PUSH
80812: EMPTY
80813: LIST
80814: LIST
80815: PUSH
80816: EMPTY
80817: LIST
80818: LIST
80819: LIST
80820: LIST
80821: LIST
80822: LIST
80823: LIST
80824: LIST
80825: LIST
80826: LIST
80827: LIST
80828: LIST
80829: LIST
80830: LIST
80831: LIST
80832: LIST
80833: LIST
80834: LIST
80835: LIST
80836: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
80837: LD_ADDR_VAR 0 56
80841: PUSH
80842: LD_INT 0
80844: PUSH
80845: LD_INT 0
80847: PUSH
80848: EMPTY
80849: LIST
80850: LIST
80851: PUSH
80852: LD_INT 0
80854: PUSH
80855: LD_INT 1
80857: NEG
80858: PUSH
80859: EMPTY
80860: LIST
80861: LIST
80862: PUSH
80863: LD_INT 1
80865: PUSH
80866: LD_INT 0
80868: PUSH
80869: EMPTY
80870: LIST
80871: LIST
80872: PUSH
80873: LD_INT 1
80875: PUSH
80876: LD_INT 1
80878: PUSH
80879: EMPTY
80880: LIST
80881: LIST
80882: PUSH
80883: LD_INT 0
80885: PUSH
80886: LD_INT 1
80888: PUSH
80889: EMPTY
80890: LIST
80891: LIST
80892: PUSH
80893: LD_INT 1
80895: NEG
80896: PUSH
80897: LD_INT 0
80899: PUSH
80900: EMPTY
80901: LIST
80902: LIST
80903: PUSH
80904: LD_INT 1
80906: NEG
80907: PUSH
80908: LD_INT 1
80910: NEG
80911: PUSH
80912: EMPTY
80913: LIST
80914: LIST
80915: PUSH
80916: LD_INT 1
80918: NEG
80919: PUSH
80920: LD_INT 2
80922: NEG
80923: PUSH
80924: EMPTY
80925: LIST
80926: LIST
80927: PUSH
80928: LD_INT 0
80930: PUSH
80931: LD_INT 2
80933: NEG
80934: PUSH
80935: EMPTY
80936: LIST
80937: LIST
80938: PUSH
80939: LD_INT 1
80941: PUSH
80942: LD_INT 1
80944: NEG
80945: PUSH
80946: EMPTY
80947: LIST
80948: LIST
80949: PUSH
80950: LD_INT 2
80952: PUSH
80953: LD_INT 0
80955: PUSH
80956: EMPTY
80957: LIST
80958: LIST
80959: PUSH
80960: LD_INT 2
80962: PUSH
80963: LD_INT 1
80965: PUSH
80966: EMPTY
80967: LIST
80968: LIST
80969: PUSH
80970: LD_INT 2
80972: PUSH
80973: LD_INT 2
80975: PUSH
80976: EMPTY
80977: LIST
80978: LIST
80979: PUSH
80980: LD_INT 1
80982: PUSH
80983: LD_INT 2
80985: PUSH
80986: EMPTY
80987: LIST
80988: LIST
80989: PUSH
80990: LD_INT 0
80992: PUSH
80993: LD_INT 2
80995: PUSH
80996: EMPTY
80997: LIST
80998: LIST
80999: PUSH
81000: LD_INT 1
81002: NEG
81003: PUSH
81004: LD_INT 1
81006: PUSH
81007: EMPTY
81008: LIST
81009: LIST
81010: PUSH
81011: LD_INT 2
81013: NEG
81014: PUSH
81015: LD_INT 0
81017: PUSH
81018: EMPTY
81019: LIST
81020: LIST
81021: PUSH
81022: LD_INT 2
81024: NEG
81025: PUSH
81026: LD_INT 1
81028: NEG
81029: PUSH
81030: EMPTY
81031: LIST
81032: LIST
81033: PUSH
81034: LD_INT 2
81036: NEG
81037: PUSH
81038: LD_INT 2
81040: NEG
81041: PUSH
81042: EMPTY
81043: LIST
81044: LIST
81045: PUSH
81046: EMPTY
81047: LIST
81048: LIST
81049: LIST
81050: LIST
81051: LIST
81052: LIST
81053: LIST
81054: LIST
81055: LIST
81056: LIST
81057: LIST
81058: LIST
81059: LIST
81060: LIST
81061: LIST
81062: LIST
81063: LIST
81064: LIST
81065: LIST
81066: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
81067: LD_ADDR_VAR 0 57
81071: PUSH
81072: LD_INT 0
81074: PUSH
81075: LD_INT 0
81077: PUSH
81078: EMPTY
81079: LIST
81080: LIST
81081: PUSH
81082: LD_INT 0
81084: PUSH
81085: LD_INT 1
81087: NEG
81088: PUSH
81089: EMPTY
81090: LIST
81091: LIST
81092: PUSH
81093: LD_INT 1
81095: PUSH
81096: LD_INT 0
81098: PUSH
81099: EMPTY
81100: LIST
81101: LIST
81102: PUSH
81103: LD_INT 1
81105: PUSH
81106: LD_INT 1
81108: PUSH
81109: EMPTY
81110: LIST
81111: LIST
81112: PUSH
81113: LD_INT 0
81115: PUSH
81116: LD_INT 1
81118: PUSH
81119: EMPTY
81120: LIST
81121: LIST
81122: PUSH
81123: LD_INT 1
81125: NEG
81126: PUSH
81127: LD_INT 0
81129: PUSH
81130: EMPTY
81131: LIST
81132: LIST
81133: PUSH
81134: LD_INT 1
81136: NEG
81137: PUSH
81138: LD_INT 1
81140: NEG
81141: PUSH
81142: EMPTY
81143: LIST
81144: LIST
81145: PUSH
81146: LD_INT 1
81148: NEG
81149: PUSH
81150: LD_INT 2
81152: NEG
81153: PUSH
81154: EMPTY
81155: LIST
81156: LIST
81157: PUSH
81158: LD_INT 0
81160: PUSH
81161: LD_INT 2
81163: NEG
81164: PUSH
81165: EMPTY
81166: LIST
81167: LIST
81168: PUSH
81169: LD_INT 1
81171: PUSH
81172: LD_INT 1
81174: NEG
81175: PUSH
81176: EMPTY
81177: LIST
81178: LIST
81179: PUSH
81180: LD_INT 2
81182: PUSH
81183: LD_INT 0
81185: PUSH
81186: EMPTY
81187: LIST
81188: LIST
81189: PUSH
81190: LD_INT 2
81192: PUSH
81193: LD_INT 1
81195: PUSH
81196: EMPTY
81197: LIST
81198: LIST
81199: PUSH
81200: LD_INT 2
81202: PUSH
81203: LD_INT 2
81205: PUSH
81206: EMPTY
81207: LIST
81208: LIST
81209: PUSH
81210: LD_INT 1
81212: PUSH
81213: LD_INT 2
81215: PUSH
81216: EMPTY
81217: LIST
81218: LIST
81219: PUSH
81220: LD_INT 0
81222: PUSH
81223: LD_INT 2
81225: PUSH
81226: EMPTY
81227: LIST
81228: LIST
81229: PUSH
81230: LD_INT 1
81232: NEG
81233: PUSH
81234: LD_INT 1
81236: PUSH
81237: EMPTY
81238: LIST
81239: LIST
81240: PUSH
81241: LD_INT 2
81243: NEG
81244: PUSH
81245: LD_INT 0
81247: PUSH
81248: EMPTY
81249: LIST
81250: LIST
81251: PUSH
81252: LD_INT 2
81254: NEG
81255: PUSH
81256: LD_INT 1
81258: NEG
81259: PUSH
81260: EMPTY
81261: LIST
81262: LIST
81263: PUSH
81264: LD_INT 2
81266: NEG
81267: PUSH
81268: LD_INT 2
81270: NEG
81271: PUSH
81272: EMPTY
81273: LIST
81274: LIST
81275: PUSH
81276: EMPTY
81277: LIST
81278: LIST
81279: LIST
81280: LIST
81281: LIST
81282: LIST
81283: LIST
81284: LIST
81285: LIST
81286: LIST
81287: LIST
81288: LIST
81289: LIST
81290: LIST
81291: LIST
81292: LIST
81293: LIST
81294: LIST
81295: LIST
81296: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
81297: LD_ADDR_VAR 0 58
81301: PUSH
81302: LD_INT 0
81304: PUSH
81305: LD_INT 0
81307: PUSH
81308: EMPTY
81309: LIST
81310: LIST
81311: PUSH
81312: LD_INT 0
81314: PUSH
81315: LD_INT 1
81317: NEG
81318: PUSH
81319: EMPTY
81320: LIST
81321: LIST
81322: PUSH
81323: LD_INT 1
81325: PUSH
81326: LD_INT 0
81328: PUSH
81329: EMPTY
81330: LIST
81331: LIST
81332: PUSH
81333: LD_INT 1
81335: PUSH
81336: LD_INT 1
81338: PUSH
81339: EMPTY
81340: LIST
81341: LIST
81342: PUSH
81343: LD_INT 0
81345: PUSH
81346: LD_INT 1
81348: PUSH
81349: EMPTY
81350: LIST
81351: LIST
81352: PUSH
81353: LD_INT 1
81355: NEG
81356: PUSH
81357: LD_INT 0
81359: PUSH
81360: EMPTY
81361: LIST
81362: LIST
81363: PUSH
81364: LD_INT 1
81366: NEG
81367: PUSH
81368: LD_INT 1
81370: NEG
81371: PUSH
81372: EMPTY
81373: LIST
81374: LIST
81375: PUSH
81376: LD_INT 1
81378: NEG
81379: PUSH
81380: LD_INT 2
81382: NEG
81383: PUSH
81384: EMPTY
81385: LIST
81386: LIST
81387: PUSH
81388: LD_INT 0
81390: PUSH
81391: LD_INT 2
81393: NEG
81394: PUSH
81395: EMPTY
81396: LIST
81397: LIST
81398: PUSH
81399: LD_INT 1
81401: PUSH
81402: LD_INT 1
81404: NEG
81405: PUSH
81406: EMPTY
81407: LIST
81408: LIST
81409: PUSH
81410: LD_INT 2
81412: PUSH
81413: LD_INT 0
81415: PUSH
81416: EMPTY
81417: LIST
81418: LIST
81419: PUSH
81420: LD_INT 2
81422: PUSH
81423: LD_INT 1
81425: PUSH
81426: EMPTY
81427: LIST
81428: LIST
81429: PUSH
81430: LD_INT 2
81432: PUSH
81433: LD_INT 2
81435: PUSH
81436: EMPTY
81437: LIST
81438: LIST
81439: PUSH
81440: LD_INT 1
81442: PUSH
81443: LD_INT 2
81445: PUSH
81446: EMPTY
81447: LIST
81448: LIST
81449: PUSH
81450: LD_INT 0
81452: PUSH
81453: LD_INT 2
81455: PUSH
81456: EMPTY
81457: LIST
81458: LIST
81459: PUSH
81460: LD_INT 1
81462: NEG
81463: PUSH
81464: LD_INT 1
81466: PUSH
81467: EMPTY
81468: LIST
81469: LIST
81470: PUSH
81471: LD_INT 2
81473: NEG
81474: PUSH
81475: LD_INT 0
81477: PUSH
81478: EMPTY
81479: LIST
81480: LIST
81481: PUSH
81482: LD_INT 2
81484: NEG
81485: PUSH
81486: LD_INT 1
81488: NEG
81489: PUSH
81490: EMPTY
81491: LIST
81492: LIST
81493: PUSH
81494: LD_INT 2
81496: NEG
81497: PUSH
81498: LD_INT 2
81500: NEG
81501: PUSH
81502: EMPTY
81503: LIST
81504: LIST
81505: PUSH
81506: EMPTY
81507: LIST
81508: LIST
81509: LIST
81510: LIST
81511: LIST
81512: LIST
81513: LIST
81514: LIST
81515: LIST
81516: LIST
81517: LIST
81518: LIST
81519: LIST
81520: LIST
81521: LIST
81522: LIST
81523: LIST
81524: LIST
81525: LIST
81526: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
81527: LD_ADDR_VAR 0 59
81531: PUSH
81532: LD_INT 0
81534: PUSH
81535: LD_INT 0
81537: PUSH
81538: EMPTY
81539: LIST
81540: LIST
81541: PUSH
81542: LD_INT 0
81544: PUSH
81545: LD_INT 1
81547: NEG
81548: PUSH
81549: EMPTY
81550: LIST
81551: LIST
81552: PUSH
81553: LD_INT 1
81555: PUSH
81556: LD_INT 0
81558: PUSH
81559: EMPTY
81560: LIST
81561: LIST
81562: PUSH
81563: LD_INT 1
81565: PUSH
81566: LD_INT 1
81568: PUSH
81569: EMPTY
81570: LIST
81571: LIST
81572: PUSH
81573: LD_INT 0
81575: PUSH
81576: LD_INT 1
81578: PUSH
81579: EMPTY
81580: LIST
81581: LIST
81582: PUSH
81583: LD_INT 1
81585: NEG
81586: PUSH
81587: LD_INT 0
81589: PUSH
81590: EMPTY
81591: LIST
81592: LIST
81593: PUSH
81594: LD_INT 1
81596: NEG
81597: PUSH
81598: LD_INT 1
81600: NEG
81601: PUSH
81602: EMPTY
81603: LIST
81604: LIST
81605: PUSH
81606: EMPTY
81607: LIST
81608: LIST
81609: LIST
81610: LIST
81611: LIST
81612: LIST
81613: LIST
81614: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
81615: LD_ADDR_VAR 0 60
81619: PUSH
81620: LD_INT 0
81622: PUSH
81623: LD_INT 0
81625: PUSH
81626: EMPTY
81627: LIST
81628: LIST
81629: PUSH
81630: LD_INT 0
81632: PUSH
81633: LD_INT 1
81635: NEG
81636: PUSH
81637: EMPTY
81638: LIST
81639: LIST
81640: PUSH
81641: LD_INT 1
81643: PUSH
81644: LD_INT 0
81646: PUSH
81647: EMPTY
81648: LIST
81649: LIST
81650: PUSH
81651: LD_INT 1
81653: PUSH
81654: LD_INT 1
81656: PUSH
81657: EMPTY
81658: LIST
81659: LIST
81660: PUSH
81661: LD_INT 0
81663: PUSH
81664: LD_INT 1
81666: PUSH
81667: EMPTY
81668: LIST
81669: LIST
81670: PUSH
81671: LD_INT 1
81673: NEG
81674: PUSH
81675: LD_INT 0
81677: PUSH
81678: EMPTY
81679: LIST
81680: LIST
81681: PUSH
81682: LD_INT 1
81684: NEG
81685: PUSH
81686: LD_INT 1
81688: NEG
81689: PUSH
81690: EMPTY
81691: LIST
81692: LIST
81693: PUSH
81694: EMPTY
81695: LIST
81696: LIST
81697: LIST
81698: LIST
81699: LIST
81700: LIST
81701: LIST
81702: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
81703: LD_ADDR_VAR 0 61
81707: PUSH
81708: LD_INT 0
81710: PUSH
81711: LD_INT 0
81713: PUSH
81714: EMPTY
81715: LIST
81716: LIST
81717: PUSH
81718: LD_INT 0
81720: PUSH
81721: LD_INT 1
81723: NEG
81724: PUSH
81725: EMPTY
81726: LIST
81727: LIST
81728: PUSH
81729: LD_INT 1
81731: PUSH
81732: LD_INT 0
81734: PUSH
81735: EMPTY
81736: LIST
81737: LIST
81738: PUSH
81739: LD_INT 1
81741: PUSH
81742: LD_INT 1
81744: PUSH
81745: EMPTY
81746: LIST
81747: LIST
81748: PUSH
81749: LD_INT 0
81751: PUSH
81752: LD_INT 1
81754: PUSH
81755: EMPTY
81756: LIST
81757: LIST
81758: PUSH
81759: LD_INT 1
81761: NEG
81762: PUSH
81763: LD_INT 0
81765: PUSH
81766: EMPTY
81767: LIST
81768: LIST
81769: PUSH
81770: LD_INT 1
81772: NEG
81773: PUSH
81774: LD_INT 1
81776: NEG
81777: PUSH
81778: EMPTY
81779: LIST
81780: LIST
81781: PUSH
81782: EMPTY
81783: LIST
81784: LIST
81785: LIST
81786: LIST
81787: LIST
81788: LIST
81789: LIST
81790: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
81791: LD_ADDR_VAR 0 62
81795: PUSH
81796: LD_INT 0
81798: PUSH
81799: LD_INT 0
81801: PUSH
81802: EMPTY
81803: LIST
81804: LIST
81805: PUSH
81806: LD_INT 0
81808: PUSH
81809: LD_INT 1
81811: NEG
81812: PUSH
81813: EMPTY
81814: LIST
81815: LIST
81816: PUSH
81817: LD_INT 1
81819: PUSH
81820: LD_INT 0
81822: PUSH
81823: EMPTY
81824: LIST
81825: LIST
81826: PUSH
81827: LD_INT 1
81829: PUSH
81830: LD_INT 1
81832: PUSH
81833: EMPTY
81834: LIST
81835: LIST
81836: PUSH
81837: LD_INT 0
81839: PUSH
81840: LD_INT 1
81842: PUSH
81843: EMPTY
81844: LIST
81845: LIST
81846: PUSH
81847: LD_INT 1
81849: NEG
81850: PUSH
81851: LD_INT 0
81853: PUSH
81854: EMPTY
81855: LIST
81856: LIST
81857: PUSH
81858: LD_INT 1
81860: NEG
81861: PUSH
81862: LD_INT 1
81864: NEG
81865: PUSH
81866: EMPTY
81867: LIST
81868: LIST
81869: PUSH
81870: EMPTY
81871: LIST
81872: LIST
81873: LIST
81874: LIST
81875: LIST
81876: LIST
81877: LIST
81878: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
81879: LD_ADDR_VAR 0 63
81883: PUSH
81884: LD_INT 0
81886: PUSH
81887: LD_INT 0
81889: PUSH
81890: EMPTY
81891: LIST
81892: LIST
81893: PUSH
81894: LD_INT 0
81896: PUSH
81897: LD_INT 1
81899: NEG
81900: PUSH
81901: EMPTY
81902: LIST
81903: LIST
81904: PUSH
81905: LD_INT 1
81907: PUSH
81908: LD_INT 0
81910: PUSH
81911: EMPTY
81912: LIST
81913: LIST
81914: PUSH
81915: LD_INT 1
81917: PUSH
81918: LD_INT 1
81920: PUSH
81921: EMPTY
81922: LIST
81923: LIST
81924: PUSH
81925: LD_INT 0
81927: PUSH
81928: LD_INT 1
81930: PUSH
81931: EMPTY
81932: LIST
81933: LIST
81934: PUSH
81935: LD_INT 1
81937: NEG
81938: PUSH
81939: LD_INT 0
81941: PUSH
81942: EMPTY
81943: LIST
81944: LIST
81945: PUSH
81946: LD_INT 1
81948: NEG
81949: PUSH
81950: LD_INT 1
81952: NEG
81953: PUSH
81954: EMPTY
81955: LIST
81956: LIST
81957: PUSH
81958: EMPTY
81959: LIST
81960: LIST
81961: LIST
81962: LIST
81963: LIST
81964: LIST
81965: LIST
81966: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
81967: LD_ADDR_VAR 0 64
81971: PUSH
81972: LD_INT 0
81974: PUSH
81975: LD_INT 0
81977: PUSH
81978: EMPTY
81979: LIST
81980: LIST
81981: PUSH
81982: LD_INT 0
81984: PUSH
81985: LD_INT 1
81987: NEG
81988: PUSH
81989: EMPTY
81990: LIST
81991: LIST
81992: PUSH
81993: LD_INT 1
81995: PUSH
81996: LD_INT 0
81998: PUSH
81999: EMPTY
82000: LIST
82001: LIST
82002: PUSH
82003: LD_INT 1
82005: PUSH
82006: LD_INT 1
82008: PUSH
82009: EMPTY
82010: LIST
82011: LIST
82012: PUSH
82013: LD_INT 0
82015: PUSH
82016: LD_INT 1
82018: PUSH
82019: EMPTY
82020: LIST
82021: LIST
82022: PUSH
82023: LD_INT 1
82025: NEG
82026: PUSH
82027: LD_INT 0
82029: PUSH
82030: EMPTY
82031: LIST
82032: LIST
82033: PUSH
82034: LD_INT 1
82036: NEG
82037: PUSH
82038: LD_INT 1
82040: NEG
82041: PUSH
82042: EMPTY
82043: LIST
82044: LIST
82045: PUSH
82046: EMPTY
82047: LIST
82048: LIST
82049: LIST
82050: LIST
82051: LIST
82052: LIST
82053: LIST
82054: ST_TO_ADDR
// end ; 1 :
82055: GO 87952
82057: LD_INT 1
82059: DOUBLE
82060: EQUAL
82061: IFTRUE 82065
82063: GO 84688
82065: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
82066: LD_ADDR_VAR 0 11
82070: PUSH
82071: LD_INT 1
82073: NEG
82074: PUSH
82075: LD_INT 3
82077: NEG
82078: PUSH
82079: EMPTY
82080: LIST
82081: LIST
82082: PUSH
82083: LD_INT 0
82085: PUSH
82086: LD_INT 3
82088: NEG
82089: PUSH
82090: EMPTY
82091: LIST
82092: LIST
82093: PUSH
82094: LD_INT 1
82096: PUSH
82097: LD_INT 2
82099: NEG
82100: PUSH
82101: EMPTY
82102: LIST
82103: LIST
82104: PUSH
82105: EMPTY
82106: LIST
82107: LIST
82108: LIST
82109: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
82110: LD_ADDR_VAR 0 12
82114: PUSH
82115: LD_INT 2
82117: PUSH
82118: LD_INT 1
82120: NEG
82121: PUSH
82122: EMPTY
82123: LIST
82124: LIST
82125: PUSH
82126: LD_INT 3
82128: PUSH
82129: LD_INT 0
82131: PUSH
82132: EMPTY
82133: LIST
82134: LIST
82135: PUSH
82136: LD_INT 3
82138: PUSH
82139: LD_INT 1
82141: PUSH
82142: EMPTY
82143: LIST
82144: LIST
82145: PUSH
82146: EMPTY
82147: LIST
82148: LIST
82149: LIST
82150: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
82151: LD_ADDR_VAR 0 13
82155: PUSH
82156: LD_INT 3
82158: PUSH
82159: LD_INT 2
82161: PUSH
82162: EMPTY
82163: LIST
82164: LIST
82165: PUSH
82166: LD_INT 3
82168: PUSH
82169: LD_INT 3
82171: PUSH
82172: EMPTY
82173: LIST
82174: LIST
82175: PUSH
82176: LD_INT 2
82178: PUSH
82179: LD_INT 3
82181: PUSH
82182: EMPTY
82183: LIST
82184: LIST
82185: PUSH
82186: EMPTY
82187: LIST
82188: LIST
82189: LIST
82190: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
82191: LD_ADDR_VAR 0 14
82195: PUSH
82196: LD_INT 1
82198: PUSH
82199: LD_INT 3
82201: PUSH
82202: EMPTY
82203: LIST
82204: LIST
82205: PUSH
82206: LD_INT 0
82208: PUSH
82209: LD_INT 3
82211: PUSH
82212: EMPTY
82213: LIST
82214: LIST
82215: PUSH
82216: LD_INT 1
82218: NEG
82219: PUSH
82220: LD_INT 2
82222: PUSH
82223: EMPTY
82224: LIST
82225: LIST
82226: PUSH
82227: EMPTY
82228: LIST
82229: LIST
82230: LIST
82231: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
82232: LD_ADDR_VAR 0 15
82236: PUSH
82237: LD_INT 2
82239: NEG
82240: PUSH
82241: LD_INT 1
82243: PUSH
82244: EMPTY
82245: LIST
82246: LIST
82247: PUSH
82248: LD_INT 3
82250: NEG
82251: PUSH
82252: LD_INT 0
82254: PUSH
82255: EMPTY
82256: LIST
82257: LIST
82258: PUSH
82259: LD_INT 3
82261: NEG
82262: PUSH
82263: LD_INT 1
82265: NEG
82266: PUSH
82267: EMPTY
82268: LIST
82269: LIST
82270: PUSH
82271: EMPTY
82272: LIST
82273: LIST
82274: LIST
82275: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
82276: LD_ADDR_VAR 0 16
82280: PUSH
82281: LD_INT 2
82283: NEG
82284: PUSH
82285: LD_INT 3
82287: NEG
82288: PUSH
82289: EMPTY
82290: LIST
82291: LIST
82292: PUSH
82293: LD_INT 3
82295: NEG
82296: PUSH
82297: LD_INT 2
82299: NEG
82300: PUSH
82301: EMPTY
82302: LIST
82303: LIST
82304: PUSH
82305: LD_INT 3
82307: NEG
82308: PUSH
82309: LD_INT 3
82311: NEG
82312: PUSH
82313: EMPTY
82314: LIST
82315: LIST
82316: PUSH
82317: EMPTY
82318: LIST
82319: LIST
82320: LIST
82321: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
82322: LD_ADDR_VAR 0 17
82326: PUSH
82327: LD_INT 1
82329: NEG
82330: PUSH
82331: LD_INT 3
82333: NEG
82334: PUSH
82335: EMPTY
82336: LIST
82337: LIST
82338: PUSH
82339: LD_INT 0
82341: PUSH
82342: LD_INT 3
82344: NEG
82345: PUSH
82346: EMPTY
82347: LIST
82348: LIST
82349: PUSH
82350: LD_INT 1
82352: PUSH
82353: LD_INT 2
82355: NEG
82356: PUSH
82357: EMPTY
82358: LIST
82359: LIST
82360: PUSH
82361: EMPTY
82362: LIST
82363: LIST
82364: LIST
82365: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
82366: LD_ADDR_VAR 0 18
82370: PUSH
82371: LD_INT 2
82373: PUSH
82374: LD_INT 1
82376: NEG
82377: PUSH
82378: EMPTY
82379: LIST
82380: LIST
82381: PUSH
82382: LD_INT 3
82384: PUSH
82385: LD_INT 0
82387: PUSH
82388: EMPTY
82389: LIST
82390: LIST
82391: PUSH
82392: LD_INT 3
82394: PUSH
82395: LD_INT 1
82397: PUSH
82398: EMPTY
82399: LIST
82400: LIST
82401: PUSH
82402: EMPTY
82403: LIST
82404: LIST
82405: LIST
82406: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
82407: LD_ADDR_VAR 0 19
82411: PUSH
82412: LD_INT 3
82414: PUSH
82415: LD_INT 2
82417: PUSH
82418: EMPTY
82419: LIST
82420: LIST
82421: PUSH
82422: LD_INT 3
82424: PUSH
82425: LD_INT 3
82427: PUSH
82428: EMPTY
82429: LIST
82430: LIST
82431: PUSH
82432: LD_INT 2
82434: PUSH
82435: LD_INT 3
82437: PUSH
82438: EMPTY
82439: LIST
82440: LIST
82441: PUSH
82442: EMPTY
82443: LIST
82444: LIST
82445: LIST
82446: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
82447: LD_ADDR_VAR 0 20
82451: PUSH
82452: LD_INT 1
82454: PUSH
82455: LD_INT 3
82457: PUSH
82458: EMPTY
82459: LIST
82460: LIST
82461: PUSH
82462: LD_INT 0
82464: PUSH
82465: LD_INT 3
82467: PUSH
82468: EMPTY
82469: LIST
82470: LIST
82471: PUSH
82472: LD_INT 1
82474: NEG
82475: PUSH
82476: LD_INT 2
82478: PUSH
82479: EMPTY
82480: LIST
82481: LIST
82482: PUSH
82483: EMPTY
82484: LIST
82485: LIST
82486: LIST
82487: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
82488: LD_ADDR_VAR 0 21
82492: PUSH
82493: LD_INT 2
82495: NEG
82496: PUSH
82497: LD_INT 1
82499: PUSH
82500: EMPTY
82501: LIST
82502: LIST
82503: PUSH
82504: LD_INT 3
82506: NEG
82507: PUSH
82508: LD_INT 0
82510: PUSH
82511: EMPTY
82512: LIST
82513: LIST
82514: PUSH
82515: LD_INT 3
82517: NEG
82518: PUSH
82519: LD_INT 1
82521: NEG
82522: PUSH
82523: EMPTY
82524: LIST
82525: LIST
82526: PUSH
82527: EMPTY
82528: LIST
82529: LIST
82530: LIST
82531: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
82532: LD_ADDR_VAR 0 22
82536: PUSH
82537: LD_INT 2
82539: NEG
82540: PUSH
82541: LD_INT 3
82543: NEG
82544: PUSH
82545: EMPTY
82546: LIST
82547: LIST
82548: PUSH
82549: LD_INT 3
82551: NEG
82552: PUSH
82553: LD_INT 2
82555: NEG
82556: PUSH
82557: EMPTY
82558: LIST
82559: LIST
82560: PUSH
82561: LD_INT 3
82563: NEG
82564: PUSH
82565: LD_INT 3
82567: NEG
82568: PUSH
82569: EMPTY
82570: LIST
82571: LIST
82572: PUSH
82573: EMPTY
82574: LIST
82575: LIST
82576: LIST
82577: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
82578: LD_ADDR_VAR 0 23
82582: PUSH
82583: LD_INT 0
82585: PUSH
82586: LD_INT 3
82588: NEG
82589: PUSH
82590: EMPTY
82591: LIST
82592: LIST
82593: PUSH
82594: LD_INT 1
82596: NEG
82597: PUSH
82598: LD_INT 4
82600: NEG
82601: PUSH
82602: EMPTY
82603: LIST
82604: LIST
82605: PUSH
82606: LD_INT 1
82608: PUSH
82609: LD_INT 3
82611: NEG
82612: PUSH
82613: EMPTY
82614: LIST
82615: LIST
82616: PUSH
82617: EMPTY
82618: LIST
82619: LIST
82620: LIST
82621: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
82622: LD_ADDR_VAR 0 24
82626: PUSH
82627: LD_INT 3
82629: PUSH
82630: LD_INT 0
82632: PUSH
82633: EMPTY
82634: LIST
82635: LIST
82636: PUSH
82637: LD_INT 3
82639: PUSH
82640: LD_INT 1
82642: NEG
82643: PUSH
82644: EMPTY
82645: LIST
82646: LIST
82647: PUSH
82648: LD_INT 4
82650: PUSH
82651: LD_INT 1
82653: PUSH
82654: EMPTY
82655: LIST
82656: LIST
82657: PUSH
82658: EMPTY
82659: LIST
82660: LIST
82661: LIST
82662: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
82663: LD_ADDR_VAR 0 25
82667: PUSH
82668: LD_INT 3
82670: PUSH
82671: LD_INT 3
82673: PUSH
82674: EMPTY
82675: LIST
82676: LIST
82677: PUSH
82678: LD_INT 4
82680: PUSH
82681: LD_INT 3
82683: PUSH
82684: EMPTY
82685: LIST
82686: LIST
82687: PUSH
82688: LD_INT 3
82690: PUSH
82691: LD_INT 4
82693: PUSH
82694: EMPTY
82695: LIST
82696: LIST
82697: PUSH
82698: EMPTY
82699: LIST
82700: LIST
82701: LIST
82702: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
82703: LD_ADDR_VAR 0 26
82707: PUSH
82708: LD_INT 0
82710: PUSH
82711: LD_INT 3
82713: PUSH
82714: EMPTY
82715: LIST
82716: LIST
82717: PUSH
82718: LD_INT 1
82720: PUSH
82721: LD_INT 4
82723: PUSH
82724: EMPTY
82725: LIST
82726: LIST
82727: PUSH
82728: LD_INT 1
82730: NEG
82731: PUSH
82732: LD_INT 3
82734: PUSH
82735: EMPTY
82736: LIST
82737: LIST
82738: PUSH
82739: EMPTY
82740: LIST
82741: LIST
82742: LIST
82743: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
82744: LD_ADDR_VAR 0 27
82748: PUSH
82749: LD_INT 3
82751: NEG
82752: PUSH
82753: LD_INT 0
82755: PUSH
82756: EMPTY
82757: LIST
82758: LIST
82759: PUSH
82760: LD_INT 3
82762: NEG
82763: PUSH
82764: LD_INT 1
82766: PUSH
82767: EMPTY
82768: LIST
82769: LIST
82770: PUSH
82771: LD_INT 4
82773: NEG
82774: PUSH
82775: LD_INT 1
82777: NEG
82778: PUSH
82779: EMPTY
82780: LIST
82781: LIST
82782: PUSH
82783: EMPTY
82784: LIST
82785: LIST
82786: LIST
82787: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
82788: LD_ADDR_VAR 0 28
82792: PUSH
82793: LD_INT 3
82795: NEG
82796: PUSH
82797: LD_INT 3
82799: NEG
82800: PUSH
82801: EMPTY
82802: LIST
82803: LIST
82804: PUSH
82805: LD_INT 3
82807: NEG
82808: PUSH
82809: LD_INT 4
82811: NEG
82812: PUSH
82813: EMPTY
82814: LIST
82815: LIST
82816: PUSH
82817: LD_INT 4
82819: NEG
82820: PUSH
82821: LD_INT 3
82823: NEG
82824: PUSH
82825: EMPTY
82826: LIST
82827: LIST
82828: PUSH
82829: EMPTY
82830: LIST
82831: LIST
82832: LIST
82833: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
82834: LD_ADDR_VAR 0 29
82838: PUSH
82839: LD_INT 1
82841: NEG
82842: PUSH
82843: LD_INT 3
82845: NEG
82846: PUSH
82847: EMPTY
82848: LIST
82849: LIST
82850: PUSH
82851: LD_INT 0
82853: PUSH
82854: LD_INT 3
82856: NEG
82857: PUSH
82858: EMPTY
82859: LIST
82860: LIST
82861: PUSH
82862: LD_INT 1
82864: PUSH
82865: LD_INT 2
82867: NEG
82868: PUSH
82869: EMPTY
82870: LIST
82871: LIST
82872: PUSH
82873: LD_INT 1
82875: NEG
82876: PUSH
82877: LD_INT 4
82879: NEG
82880: PUSH
82881: EMPTY
82882: LIST
82883: LIST
82884: PUSH
82885: LD_INT 0
82887: PUSH
82888: LD_INT 4
82890: NEG
82891: PUSH
82892: EMPTY
82893: LIST
82894: LIST
82895: PUSH
82896: LD_INT 1
82898: PUSH
82899: LD_INT 3
82901: NEG
82902: PUSH
82903: EMPTY
82904: LIST
82905: LIST
82906: PUSH
82907: LD_INT 1
82909: NEG
82910: PUSH
82911: LD_INT 5
82913: NEG
82914: PUSH
82915: EMPTY
82916: LIST
82917: LIST
82918: PUSH
82919: LD_INT 0
82921: PUSH
82922: LD_INT 5
82924: NEG
82925: PUSH
82926: EMPTY
82927: LIST
82928: LIST
82929: PUSH
82930: LD_INT 1
82932: PUSH
82933: LD_INT 4
82935: NEG
82936: PUSH
82937: EMPTY
82938: LIST
82939: LIST
82940: PUSH
82941: LD_INT 1
82943: NEG
82944: PUSH
82945: LD_INT 6
82947: NEG
82948: PUSH
82949: EMPTY
82950: LIST
82951: LIST
82952: PUSH
82953: LD_INT 0
82955: PUSH
82956: LD_INT 6
82958: NEG
82959: PUSH
82960: EMPTY
82961: LIST
82962: LIST
82963: PUSH
82964: LD_INT 1
82966: PUSH
82967: LD_INT 5
82969: NEG
82970: PUSH
82971: EMPTY
82972: LIST
82973: LIST
82974: PUSH
82975: EMPTY
82976: LIST
82977: LIST
82978: LIST
82979: LIST
82980: LIST
82981: LIST
82982: LIST
82983: LIST
82984: LIST
82985: LIST
82986: LIST
82987: LIST
82988: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
82989: LD_ADDR_VAR 0 30
82993: PUSH
82994: LD_INT 2
82996: PUSH
82997: LD_INT 1
82999: NEG
83000: PUSH
83001: EMPTY
83002: LIST
83003: LIST
83004: PUSH
83005: LD_INT 3
83007: PUSH
83008: LD_INT 0
83010: PUSH
83011: EMPTY
83012: LIST
83013: LIST
83014: PUSH
83015: LD_INT 3
83017: PUSH
83018: LD_INT 1
83020: PUSH
83021: EMPTY
83022: LIST
83023: LIST
83024: PUSH
83025: LD_INT 3
83027: PUSH
83028: LD_INT 1
83030: NEG
83031: PUSH
83032: EMPTY
83033: LIST
83034: LIST
83035: PUSH
83036: LD_INT 4
83038: PUSH
83039: LD_INT 0
83041: PUSH
83042: EMPTY
83043: LIST
83044: LIST
83045: PUSH
83046: LD_INT 4
83048: PUSH
83049: LD_INT 1
83051: PUSH
83052: EMPTY
83053: LIST
83054: LIST
83055: PUSH
83056: LD_INT 4
83058: PUSH
83059: LD_INT 1
83061: NEG
83062: PUSH
83063: EMPTY
83064: LIST
83065: LIST
83066: PUSH
83067: LD_INT 5
83069: PUSH
83070: LD_INT 0
83072: PUSH
83073: EMPTY
83074: LIST
83075: LIST
83076: PUSH
83077: LD_INT 5
83079: PUSH
83080: LD_INT 1
83082: PUSH
83083: EMPTY
83084: LIST
83085: LIST
83086: PUSH
83087: LD_INT 5
83089: PUSH
83090: LD_INT 1
83092: NEG
83093: PUSH
83094: EMPTY
83095: LIST
83096: LIST
83097: PUSH
83098: LD_INT 6
83100: PUSH
83101: LD_INT 0
83103: PUSH
83104: EMPTY
83105: LIST
83106: LIST
83107: PUSH
83108: LD_INT 6
83110: PUSH
83111: LD_INT 1
83113: PUSH
83114: EMPTY
83115: LIST
83116: LIST
83117: PUSH
83118: EMPTY
83119: LIST
83120: LIST
83121: LIST
83122: LIST
83123: LIST
83124: LIST
83125: LIST
83126: LIST
83127: LIST
83128: LIST
83129: LIST
83130: LIST
83131: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
83132: LD_ADDR_VAR 0 31
83136: PUSH
83137: LD_INT 3
83139: PUSH
83140: LD_INT 2
83142: PUSH
83143: EMPTY
83144: LIST
83145: LIST
83146: PUSH
83147: LD_INT 3
83149: PUSH
83150: LD_INT 3
83152: PUSH
83153: EMPTY
83154: LIST
83155: LIST
83156: PUSH
83157: LD_INT 2
83159: PUSH
83160: LD_INT 3
83162: PUSH
83163: EMPTY
83164: LIST
83165: LIST
83166: PUSH
83167: LD_INT 4
83169: PUSH
83170: LD_INT 3
83172: PUSH
83173: EMPTY
83174: LIST
83175: LIST
83176: PUSH
83177: LD_INT 4
83179: PUSH
83180: LD_INT 4
83182: PUSH
83183: EMPTY
83184: LIST
83185: LIST
83186: PUSH
83187: LD_INT 3
83189: PUSH
83190: LD_INT 4
83192: PUSH
83193: EMPTY
83194: LIST
83195: LIST
83196: PUSH
83197: LD_INT 5
83199: PUSH
83200: LD_INT 4
83202: PUSH
83203: EMPTY
83204: LIST
83205: LIST
83206: PUSH
83207: LD_INT 5
83209: PUSH
83210: LD_INT 5
83212: PUSH
83213: EMPTY
83214: LIST
83215: LIST
83216: PUSH
83217: LD_INT 4
83219: PUSH
83220: LD_INT 5
83222: PUSH
83223: EMPTY
83224: LIST
83225: LIST
83226: PUSH
83227: LD_INT 6
83229: PUSH
83230: LD_INT 5
83232: PUSH
83233: EMPTY
83234: LIST
83235: LIST
83236: PUSH
83237: LD_INT 6
83239: PUSH
83240: LD_INT 6
83242: PUSH
83243: EMPTY
83244: LIST
83245: LIST
83246: PUSH
83247: LD_INT 5
83249: PUSH
83250: LD_INT 6
83252: PUSH
83253: EMPTY
83254: LIST
83255: LIST
83256: PUSH
83257: EMPTY
83258: LIST
83259: LIST
83260: LIST
83261: LIST
83262: LIST
83263: LIST
83264: LIST
83265: LIST
83266: LIST
83267: LIST
83268: LIST
83269: LIST
83270: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
83271: LD_ADDR_VAR 0 32
83275: PUSH
83276: LD_INT 1
83278: PUSH
83279: LD_INT 3
83281: PUSH
83282: EMPTY
83283: LIST
83284: LIST
83285: PUSH
83286: LD_INT 0
83288: PUSH
83289: LD_INT 3
83291: PUSH
83292: EMPTY
83293: LIST
83294: LIST
83295: PUSH
83296: LD_INT 1
83298: NEG
83299: PUSH
83300: LD_INT 2
83302: PUSH
83303: EMPTY
83304: LIST
83305: LIST
83306: PUSH
83307: LD_INT 1
83309: PUSH
83310: LD_INT 4
83312: PUSH
83313: EMPTY
83314: LIST
83315: LIST
83316: PUSH
83317: LD_INT 0
83319: PUSH
83320: LD_INT 4
83322: PUSH
83323: EMPTY
83324: LIST
83325: LIST
83326: PUSH
83327: LD_INT 1
83329: NEG
83330: PUSH
83331: LD_INT 3
83333: PUSH
83334: EMPTY
83335: LIST
83336: LIST
83337: PUSH
83338: LD_INT 1
83340: PUSH
83341: LD_INT 5
83343: PUSH
83344: EMPTY
83345: LIST
83346: LIST
83347: PUSH
83348: LD_INT 0
83350: PUSH
83351: LD_INT 5
83353: PUSH
83354: EMPTY
83355: LIST
83356: LIST
83357: PUSH
83358: LD_INT 1
83360: NEG
83361: PUSH
83362: LD_INT 4
83364: PUSH
83365: EMPTY
83366: LIST
83367: LIST
83368: PUSH
83369: LD_INT 1
83371: PUSH
83372: LD_INT 6
83374: PUSH
83375: EMPTY
83376: LIST
83377: LIST
83378: PUSH
83379: LD_INT 0
83381: PUSH
83382: LD_INT 6
83384: PUSH
83385: EMPTY
83386: LIST
83387: LIST
83388: PUSH
83389: LD_INT 1
83391: NEG
83392: PUSH
83393: LD_INT 5
83395: PUSH
83396: EMPTY
83397: LIST
83398: LIST
83399: PUSH
83400: EMPTY
83401: LIST
83402: LIST
83403: LIST
83404: LIST
83405: LIST
83406: LIST
83407: LIST
83408: LIST
83409: LIST
83410: LIST
83411: LIST
83412: LIST
83413: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
83414: LD_ADDR_VAR 0 33
83418: PUSH
83419: LD_INT 2
83421: NEG
83422: PUSH
83423: LD_INT 1
83425: PUSH
83426: EMPTY
83427: LIST
83428: LIST
83429: PUSH
83430: LD_INT 3
83432: NEG
83433: PUSH
83434: LD_INT 0
83436: PUSH
83437: EMPTY
83438: LIST
83439: LIST
83440: PUSH
83441: LD_INT 3
83443: NEG
83444: PUSH
83445: LD_INT 1
83447: NEG
83448: PUSH
83449: EMPTY
83450: LIST
83451: LIST
83452: PUSH
83453: LD_INT 3
83455: NEG
83456: PUSH
83457: LD_INT 1
83459: PUSH
83460: EMPTY
83461: LIST
83462: LIST
83463: PUSH
83464: LD_INT 4
83466: NEG
83467: PUSH
83468: LD_INT 0
83470: PUSH
83471: EMPTY
83472: LIST
83473: LIST
83474: PUSH
83475: LD_INT 4
83477: NEG
83478: PUSH
83479: LD_INT 1
83481: NEG
83482: PUSH
83483: EMPTY
83484: LIST
83485: LIST
83486: PUSH
83487: LD_INT 4
83489: NEG
83490: PUSH
83491: LD_INT 1
83493: PUSH
83494: EMPTY
83495: LIST
83496: LIST
83497: PUSH
83498: LD_INT 5
83500: NEG
83501: PUSH
83502: LD_INT 0
83504: PUSH
83505: EMPTY
83506: LIST
83507: LIST
83508: PUSH
83509: LD_INT 5
83511: NEG
83512: PUSH
83513: LD_INT 1
83515: NEG
83516: PUSH
83517: EMPTY
83518: LIST
83519: LIST
83520: PUSH
83521: LD_INT 5
83523: NEG
83524: PUSH
83525: LD_INT 1
83527: PUSH
83528: EMPTY
83529: LIST
83530: LIST
83531: PUSH
83532: LD_INT 6
83534: NEG
83535: PUSH
83536: LD_INT 0
83538: PUSH
83539: EMPTY
83540: LIST
83541: LIST
83542: PUSH
83543: LD_INT 6
83545: NEG
83546: PUSH
83547: LD_INT 1
83549: NEG
83550: PUSH
83551: EMPTY
83552: LIST
83553: LIST
83554: PUSH
83555: EMPTY
83556: LIST
83557: LIST
83558: LIST
83559: LIST
83560: LIST
83561: LIST
83562: LIST
83563: LIST
83564: LIST
83565: LIST
83566: LIST
83567: LIST
83568: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
83569: LD_ADDR_VAR 0 34
83573: PUSH
83574: LD_INT 2
83576: NEG
83577: PUSH
83578: LD_INT 3
83580: NEG
83581: PUSH
83582: EMPTY
83583: LIST
83584: LIST
83585: PUSH
83586: LD_INT 3
83588: NEG
83589: PUSH
83590: LD_INT 2
83592: NEG
83593: PUSH
83594: EMPTY
83595: LIST
83596: LIST
83597: PUSH
83598: LD_INT 3
83600: NEG
83601: PUSH
83602: LD_INT 3
83604: NEG
83605: PUSH
83606: EMPTY
83607: LIST
83608: LIST
83609: PUSH
83610: LD_INT 3
83612: NEG
83613: PUSH
83614: LD_INT 4
83616: NEG
83617: PUSH
83618: EMPTY
83619: LIST
83620: LIST
83621: PUSH
83622: LD_INT 4
83624: NEG
83625: PUSH
83626: LD_INT 3
83628: NEG
83629: PUSH
83630: EMPTY
83631: LIST
83632: LIST
83633: PUSH
83634: LD_INT 4
83636: NEG
83637: PUSH
83638: LD_INT 4
83640: NEG
83641: PUSH
83642: EMPTY
83643: LIST
83644: LIST
83645: PUSH
83646: LD_INT 4
83648: NEG
83649: PUSH
83650: LD_INT 5
83652: NEG
83653: PUSH
83654: EMPTY
83655: LIST
83656: LIST
83657: PUSH
83658: LD_INT 5
83660: NEG
83661: PUSH
83662: LD_INT 4
83664: NEG
83665: PUSH
83666: EMPTY
83667: LIST
83668: LIST
83669: PUSH
83670: LD_INT 5
83672: NEG
83673: PUSH
83674: LD_INT 5
83676: NEG
83677: PUSH
83678: EMPTY
83679: LIST
83680: LIST
83681: PUSH
83682: LD_INT 5
83684: NEG
83685: PUSH
83686: LD_INT 6
83688: NEG
83689: PUSH
83690: EMPTY
83691: LIST
83692: LIST
83693: PUSH
83694: LD_INT 6
83696: NEG
83697: PUSH
83698: LD_INT 5
83700: NEG
83701: PUSH
83702: EMPTY
83703: LIST
83704: LIST
83705: PUSH
83706: LD_INT 6
83708: NEG
83709: PUSH
83710: LD_INT 6
83712: NEG
83713: PUSH
83714: EMPTY
83715: LIST
83716: LIST
83717: PUSH
83718: EMPTY
83719: LIST
83720: LIST
83721: LIST
83722: LIST
83723: LIST
83724: LIST
83725: LIST
83726: LIST
83727: LIST
83728: LIST
83729: LIST
83730: LIST
83731: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
83732: LD_ADDR_VAR 0 41
83736: PUSH
83737: LD_INT 0
83739: PUSH
83740: LD_INT 2
83742: NEG
83743: PUSH
83744: EMPTY
83745: LIST
83746: LIST
83747: PUSH
83748: LD_INT 1
83750: NEG
83751: PUSH
83752: LD_INT 3
83754: NEG
83755: PUSH
83756: EMPTY
83757: LIST
83758: LIST
83759: PUSH
83760: LD_INT 1
83762: PUSH
83763: LD_INT 2
83765: NEG
83766: PUSH
83767: EMPTY
83768: LIST
83769: LIST
83770: PUSH
83771: EMPTY
83772: LIST
83773: LIST
83774: LIST
83775: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
83776: LD_ADDR_VAR 0 42
83780: PUSH
83781: LD_INT 2
83783: PUSH
83784: LD_INT 0
83786: PUSH
83787: EMPTY
83788: LIST
83789: LIST
83790: PUSH
83791: LD_INT 2
83793: PUSH
83794: LD_INT 1
83796: NEG
83797: PUSH
83798: EMPTY
83799: LIST
83800: LIST
83801: PUSH
83802: LD_INT 3
83804: PUSH
83805: LD_INT 1
83807: PUSH
83808: EMPTY
83809: LIST
83810: LIST
83811: PUSH
83812: EMPTY
83813: LIST
83814: LIST
83815: LIST
83816: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
83817: LD_ADDR_VAR 0 43
83821: PUSH
83822: LD_INT 2
83824: PUSH
83825: LD_INT 2
83827: PUSH
83828: EMPTY
83829: LIST
83830: LIST
83831: PUSH
83832: LD_INT 3
83834: PUSH
83835: LD_INT 2
83837: PUSH
83838: EMPTY
83839: LIST
83840: LIST
83841: PUSH
83842: LD_INT 2
83844: PUSH
83845: LD_INT 3
83847: PUSH
83848: EMPTY
83849: LIST
83850: LIST
83851: PUSH
83852: EMPTY
83853: LIST
83854: LIST
83855: LIST
83856: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
83857: LD_ADDR_VAR 0 44
83861: PUSH
83862: LD_INT 0
83864: PUSH
83865: LD_INT 2
83867: PUSH
83868: EMPTY
83869: LIST
83870: LIST
83871: PUSH
83872: LD_INT 1
83874: PUSH
83875: LD_INT 3
83877: PUSH
83878: EMPTY
83879: LIST
83880: LIST
83881: PUSH
83882: LD_INT 1
83884: NEG
83885: PUSH
83886: LD_INT 2
83888: PUSH
83889: EMPTY
83890: LIST
83891: LIST
83892: PUSH
83893: EMPTY
83894: LIST
83895: LIST
83896: LIST
83897: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
83898: LD_ADDR_VAR 0 45
83902: PUSH
83903: LD_INT 2
83905: NEG
83906: PUSH
83907: LD_INT 0
83909: PUSH
83910: EMPTY
83911: LIST
83912: LIST
83913: PUSH
83914: LD_INT 2
83916: NEG
83917: PUSH
83918: LD_INT 1
83920: PUSH
83921: EMPTY
83922: LIST
83923: LIST
83924: PUSH
83925: LD_INT 3
83927: NEG
83928: PUSH
83929: LD_INT 1
83931: NEG
83932: PUSH
83933: EMPTY
83934: LIST
83935: LIST
83936: PUSH
83937: EMPTY
83938: LIST
83939: LIST
83940: LIST
83941: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
83942: LD_ADDR_VAR 0 46
83946: PUSH
83947: LD_INT 2
83949: NEG
83950: PUSH
83951: LD_INT 2
83953: NEG
83954: PUSH
83955: EMPTY
83956: LIST
83957: LIST
83958: PUSH
83959: LD_INT 2
83961: NEG
83962: PUSH
83963: LD_INT 3
83965: NEG
83966: PUSH
83967: EMPTY
83968: LIST
83969: LIST
83970: PUSH
83971: LD_INT 3
83973: NEG
83974: PUSH
83975: LD_INT 2
83977: NEG
83978: PUSH
83979: EMPTY
83980: LIST
83981: LIST
83982: PUSH
83983: EMPTY
83984: LIST
83985: LIST
83986: LIST
83987: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
83988: LD_ADDR_VAR 0 47
83992: PUSH
83993: LD_INT 2
83995: NEG
83996: PUSH
83997: LD_INT 3
83999: NEG
84000: PUSH
84001: EMPTY
84002: LIST
84003: LIST
84004: PUSH
84005: LD_INT 1
84007: NEG
84008: PUSH
84009: LD_INT 3
84011: NEG
84012: PUSH
84013: EMPTY
84014: LIST
84015: LIST
84016: PUSH
84017: EMPTY
84018: LIST
84019: LIST
84020: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
84021: LD_ADDR_VAR 0 48
84025: PUSH
84026: LD_INT 1
84028: PUSH
84029: LD_INT 2
84031: NEG
84032: PUSH
84033: EMPTY
84034: LIST
84035: LIST
84036: PUSH
84037: LD_INT 2
84039: PUSH
84040: LD_INT 1
84042: NEG
84043: PUSH
84044: EMPTY
84045: LIST
84046: LIST
84047: PUSH
84048: EMPTY
84049: LIST
84050: LIST
84051: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
84052: LD_ADDR_VAR 0 49
84056: PUSH
84057: LD_INT 3
84059: PUSH
84060: LD_INT 1
84062: PUSH
84063: EMPTY
84064: LIST
84065: LIST
84066: PUSH
84067: LD_INT 3
84069: PUSH
84070: LD_INT 2
84072: PUSH
84073: EMPTY
84074: LIST
84075: LIST
84076: PUSH
84077: EMPTY
84078: LIST
84079: LIST
84080: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
84081: LD_ADDR_VAR 0 50
84085: PUSH
84086: LD_INT 2
84088: PUSH
84089: LD_INT 3
84091: PUSH
84092: EMPTY
84093: LIST
84094: LIST
84095: PUSH
84096: LD_INT 1
84098: PUSH
84099: LD_INT 3
84101: PUSH
84102: EMPTY
84103: LIST
84104: LIST
84105: PUSH
84106: EMPTY
84107: LIST
84108: LIST
84109: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
84110: LD_ADDR_VAR 0 51
84114: PUSH
84115: LD_INT 1
84117: NEG
84118: PUSH
84119: LD_INT 2
84121: PUSH
84122: EMPTY
84123: LIST
84124: LIST
84125: PUSH
84126: LD_INT 2
84128: NEG
84129: PUSH
84130: LD_INT 1
84132: PUSH
84133: EMPTY
84134: LIST
84135: LIST
84136: PUSH
84137: EMPTY
84138: LIST
84139: LIST
84140: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
84141: LD_ADDR_VAR 0 52
84145: PUSH
84146: LD_INT 3
84148: NEG
84149: PUSH
84150: LD_INT 1
84152: NEG
84153: PUSH
84154: EMPTY
84155: LIST
84156: LIST
84157: PUSH
84158: LD_INT 3
84160: NEG
84161: PUSH
84162: LD_INT 2
84164: NEG
84165: PUSH
84166: EMPTY
84167: LIST
84168: LIST
84169: PUSH
84170: EMPTY
84171: LIST
84172: LIST
84173: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
84174: LD_ADDR_VAR 0 53
84178: PUSH
84179: LD_INT 1
84181: NEG
84182: PUSH
84183: LD_INT 3
84185: NEG
84186: PUSH
84187: EMPTY
84188: LIST
84189: LIST
84190: PUSH
84191: LD_INT 0
84193: PUSH
84194: LD_INT 3
84196: NEG
84197: PUSH
84198: EMPTY
84199: LIST
84200: LIST
84201: PUSH
84202: LD_INT 1
84204: PUSH
84205: LD_INT 2
84207: NEG
84208: PUSH
84209: EMPTY
84210: LIST
84211: LIST
84212: PUSH
84213: EMPTY
84214: LIST
84215: LIST
84216: LIST
84217: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
84218: LD_ADDR_VAR 0 54
84222: PUSH
84223: LD_INT 2
84225: PUSH
84226: LD_INT 1
84228: NEG
84229: PUSH
84230: EMPTY
84231: LIST
84232: LIST
84233: PUSH
84234: LD_INT 3
84236: PUSH
84237: LD_INT 0
84239: PUSH
84240: EMPTY
84241: LIST
84242: LIST
84243: PUSH
84244: LD_INT 3
84246: PUSH
84247: LD_INT 1
84249: PUSH
84250: EMPTY
84251: LIST
84252: LIST
84253: PUSH
84254: EMPTY
84255: LIST
84256: LIST
84257: LIST
84258: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
84259: LD_ADDR_VAR 0 55
84263: PUSH
84264: LD_INT 3
84266: PUSH
84267: LD_INT 2
84269: PUSH
84270: EMPTY
84271: LIST
84272: LIST
84273: PUSH
84274: LD_INT 3
84276: PUSH
84277: LD_INT 3
84279: PUSH
84280: EMPTY
84281: LIST
84282: LIST
84283: PUSH
84284: LD_INT 2
84286: PUSH
84287: LD_INT 3
84289: PUSH
84290: EMPTY
84291: LIST
84292: LIST
84293: PUSH
84294: EMPTY
84295: LIST
84296: LIST
84297: LIST
84298: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
84299: LD_ADDR_VAR 0 56
84303: PUSH
84304: LD_INT 1
84306: PUSH
84307: LD_INT 3
84309: PUSH
84310: EMPTY
84311: LIST
84312: LIST
84313: PUSH
84314: LD_INT 0
84316: PUSH
84317: LD_INT 3
84319: PUSH
84320: EMPTY
84321: LIST
84322: LIST
84323: PUSH
84324: LD_INT 1
84326: NEG
84327: PUSH
84328: LD_INT 2
84330: PUSH
84331: EMPTY
84332: LIST
84333: LIST
84334: PUSH
84335: EMPTY
84336: LIST
84337: LIST
84338: LIST
84339: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
84340: LD_ADDR_VAR 0 57
84344: PUSH
84345: LD_INT 2
84347: NEG
84348: PUSH
84349: LD_INT 1
84351: PUSH
84352: EMPTY
84353: LIST
84354: LIST
84355: PUSH
84356: LD_INT 3
84358: NEG
84359: PUSH
84360: LD_INT 0
84362: PUSH
84363: EMPTY
84364: LIST
84365: LIST
84366: PUSH
84367: LD_INT 3
84369: NEG
84370: PUSH
84371: LD_INT 1
84373: NEG
84374: PUSH
84375: EMPTY
84376: LIST
84377: LIST
84378: PUSH
84379: EMPTY
84380: LIST
84381: LIST
84382: LIST
84383: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
84384: LD_ADDR_VAR 0 58
84388: PUSH
84389: LD_INT 2
84391: NEG
84392: PUSH
84393: LD_INT 3
84395: NEG
84396: PUSH
84397: EMPTY
84398: LIST
84399: LIST
84400: PUSH
84401: LD_INT 3
84403: NEG
84404: PUSH
84405: LD_INT 2
84407: NEG
84408: PUSH
84409: EMPTY
84410: LIST
84411: LIST
84412: PUSH
84413: LD_INT 3
84415: NEG
84416: PUSH
84417: LD_INT 3
84419: NEG
84420: PUSH
84421: EMPTY
84422: LIST
84423: LIST
84424: PUSH
84425: EMPTY
84426: LIST
84427: LIST
84428: LIST
84429: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
84430: LD_ADDR_VAR 0 59
84434: PUSH
84435: LD_INT 1
84437: NEG
84438: PUSH
84439: LD_INT 2
84441: NEG
84442: PUSH
84443: EMPTY
84444: LIST
84445: LIST
84446: PUSH
84447: LD_INT 0
84449: PUSH
84450: LD_INT 2
84452: NEG
84453: PUSH
84454: EMPTY
84455: LIST
84456: LIST
84457: PUSH
84458: LD_INT 1
84460: PUSH
84461: LD_INT 1
84463: NEG
84464: PUSH
84465: EMPTY
84466: LIST
84467: LIST
84468: PUSH
84469: EMPTY
84470: LIST
84471: LIST
84472: LIST
84473: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
84474: LD_ADDR_VAR 0 60
84478: PUSH
84479: LD_INT 1
84481: PUSH
84482: LD_INT 1
84484: NEG
84485: PUSH
84486: EMPTY
84487: LIST
84488: LIST
84489: PUSH
84490: LD_INT 2
84492: PUSH
84493: LD_INT 0
84495: PUSH
84496: EMPTY
84497: LIST
84498: LIST
84499: PUSH
84500: LD_INT 2
84502: PUSH
84503: LD_INT 1
84505: PUSH
84506: EMPTY
84507: LIST
84508: LIST
84509: PUSH
84510: EMPTY
84511: LIST
84512: LIST
84513: LIST
84514: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
84515: LD_ADDR_VAR 0 61
84519: PUSH
84520: LD_INT 2
84522: PUSH
84523: LD_INT 1
84525: PUSH
84526: EMPTY
84527: LIST
84528: LIST
84529: PUSH
84530: LD_INT 2
84532: PUSH
84533: LD_INT 2
84535: PUSH
84536: EMPTY
84537: LIST
84538: LIST
84539: PUSH
84540: LD_INT 1
84542: PUSH
84543: LD_INT 2
84545: PUSH
84546: EMPTY
84547: LIST
84548: LIST
84549: PUSH
84550: EMPTY
84551: LIST
84552: LIST
84553: LIST
84554: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
84555: LD_ADDR_VAR 0 62
84559: PUSH
84560: LD_INT 1
84562: PUSH
84563: LD_INT 2
84565: PUSH
84566: EMPTY
84567: LIST
84568: LIST
84569: PUSH
84570: LD_INT 0
84572: PUSH
84573: LD_INT 2
84575: PUSH
84576: EMPTY
84577: LIST
84578: LIST
84579: PUSH
84580: LD_INT 1
84582: NEG
84583: PUSH
84584: LD_INT 1
84586: PUSH
84587: EMPTY
84588: LIST
84589: LIST
84590: PUSH
84591: EMPTY
84592: LIST
84593: LIST
84594: LIST
84595: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
84596: LD_ADDR_VAR 0 63
84600: PUSH
84601: LD_INT 1
84603: NEG
84604: PUSH
84605: LD_INT 1
84607: PUSH
84608: EMPTY
84609: LIST
84610: LIST
84611: PUSH
84612: LD_INT 2
84614: NEG
84615: PUSH
84616: LD_INT 0
84618: PUSH
84619: EMPTY
84620: LIST
84621: LIST
84622: PUSH
84623: LD_INT 2
84625: NEG
84626: PUSH
84627: LD_INT 1
84629: NEG
84630: PUSH
84631: EMPTY
84632: LIST
84633: LIST
84634: PUSH
84635: EMPTY
84636: LIST
84637: LIST
84638: LIST
84639: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
84640: LD_ADDR_VAR 0 64
84644: PUSH
84645: LD_INT 1
84647: NEG
84648: PUSH
84649: LD_INT 2
84651: NEG
84652: PUSH
84653: EMPTY
84654: LIST
84655: LIST
84656: PUSH
84657: LD_INT 2
84659: NEG
84660: PUSH
84661: LD_INT 1
84663: NEG
84664: PUSH
84665: EMPTY
84666: LIST
84667: LIST
84668: PUSH
84669: LD_INT 2
84671: NEG
84672: PUSH
84673: LD_INT 2
84675: NEG
84676: PUSH
84677: EMPTY
84678: LIST
84679: LIST
84680: PUSH
84681: EMPTY
84682: LIST
84683: LIST
84684: LIST
84685: ST_TO_ADDR
// end ; 2 :
84686: GO 87952
84688: LD_INT 2
84690: DOUBLE
84691: EQUAL
84692: IFTRUE 84696
84694: GO 87951
84696: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
84697: LD_ADDR_VAR 0 29
84701: PUSH
84702: LD_INT 4
84704: PUSH
84705: LD_INT 0
84707: PUSH
84708: EMPTY
84709: LIST
84710: LIST
84711: PUSH
84712: LD_INT 4
84714: PUSH
84715: LD_INT 1
84717: NEG
84718: PUSH
84719: EMPTY
84720: LIST
84721: LIST
84722: PUSH
84723: LD_INT 5
84725: PUSH
84726: LD_INT 0
84728: PUSH
84729: EMPTY
84730: LIST
84731: LIST
84732: PUSH
84733: LD_INT 5
84735: PUSH
84736: LD_INT 1
84738: PUSH
84739: EMPTY
84740: LIST
84741: LIST
84742: PUSH
84743: LD_INT 4
84745: PUSH
84746: LD_INT 1
84748: PUSH
84749: EMPTY
84750: LIST
84751: LIST
84752: PUSH
84753: LD_INT 3
84755: PUSH
84756: LD_INT 0
84758: PUSH
84759: EMPTY
84760: LIST
84761: LIST
84762: PUSH
84763: LD_INT 3
84765: PUSH
84766: LD_INT 1
84768: NEG
84769: PUSH
84770: EMPTY
84771: LIST
84772: LIST
84773: PUSH
84774: LD_INT 3
84776: PUSH
84777: LD_INT 2
84779: NEG
84780: PUSH
84781: EMPTY
84782: LIST
84783: LIST
84784: PUSH
84785: LD_INT 5
84787: PUSH
84788: LD_INT 2
84790: PUSH
84791: EMPTY
84792: LIST
84793: LIST
84794: PUSH
84795: LD_INT 3
84797: PUSH
84798: LD_INT 3
84800: PUSH
84801: EMPTY
84802: LIST
84803: LIST
84804: PUSH
84805: LD_INT 3
84807: PUSH
84808: LD_INT 2
84810: PUSH
84811: EMPTY
84812: LIST
84813: LIST
84814: PUSH
84815: LD_INT 4
84817: PUSH
84818: LD_INT 3
84820: PUSH
84821: EMPTY
84822: LIST
84823: LIST
84824: PUSH
84825: LD_INT 4
84827: PUSH
84828: LD_INT 4
84830: PUSH
84831: EMPTY
84832: LIST
84833: LIST
84834: PUSH
84835: LD_INT 3
84837: PUSH
84838: LD_INT 4
84840: PUSH
84841: EMPTY
84842: LIST
84843: LIST
84844: PUSH
84845: LD_INT 2
84847: PUSH
84848: LD_INT 3
84850: PUSH
84851: EMPTY
84852: LIST
84853: LIST
84854: PUSH
84855: LD_INT 2
84857: PUSH
84858: LD_INT 2
84860: PUSH
84861: EMPTY
84862: LIST
84863: LIST
84864: PUSH
84865: LD_INT 4
84867: PUSH
84868: LD_INT 2
84870: PUSH
84871: EMPTY
84872: LIST
84873: LIST
84874: PUSH
84875: LD_INT 2
84877: PUSH
84878: LD_INT 4
84880: PUSH
84881: EMPTY
84882: LIST
84883: LIST
84884: PUSH
84885: LD_INT 0
84887: PUSH
84888: LD_INT 4
84890: PUSH
84891: EMPTY
84892: LIST
84893: LIST
84894: PUSH
84895: LD_INT 0
84897: PUSH
84898: LD_INT 3
84900: PUSH
84901: EMPTY
84902: LIST
84903: LIST
84904: PUSH
84905: LD_INT 1
84907: PUSH
84908: LD_INT 4
84910: PUSH
84911: EMPTY
84912: LIST
84913: LIST
84914: PUSH
84915: LD_INT 1
84917: PUSH
84918: LD_INT 5
84920: PUSH
84921: EMPTY
84922: LIST
84923: LIST
84924: PUSH
84925: LD_INT 0
84927: PUSH
84928: LD_INT 5
84930: PUSH
84931: EMPTY
84932: LIST
84933: LIST
84934: PUSH
84935: LD_INT 1
84937: NEG
84938: PUSH
84939: LD_INT 4
84941: PUSH
84942: EMPTY
84943: LIST
84944: LIST
84945: PUSH
84946: LD_INT 1
84948: NEG
84949: PUSH
84950: LD_INT 3
84952: PUSH
84953: EMPTY
84954: LIST
84955: LIST
84956: PUSH
84957: LD_INT 2
84959: PUSH
84960: LD_INT 5
84962: PUSH
84963: EMPTY
84964: LIST
84965: LIST
84966: PUSH
84967: LD_INT 2
84969: NEG
84970: PUSH
84971: LD_INT 3
84973: PUSH
84974: EMPTY
84975: LIST
84976: LIST
84977: PUSH
84978: LD_INT 3
84980: NEG
84981: PUSH
84982: LD_INT 0
84984: PUSH
84985: EMPTY
84986: LIST
84987: LIST
84988: PUSH
84989: LD_INT 3
84991: NEG
84992: PUSH
84993: LD_INT 1
84995: NEG
84996: PUSH
84997: EMPTY
84998: LIST
84999: LIST
85000: PUSH
85001: LD_INT 2
85003: NEG
85004: PUSH
85005: LD_INT 0
85007: PUSH
85008: EMPTY
85009: LIST
85010: LIST
85011: PUSH
85012: LD_INT 2
85014: NEG
85015: PUSH
85016: LD_INT 1
85018: PUSH
85019: EMPTY
85020: LIST
85021: LIST
85022: PUSH
85023: LD_INT 3
85025: NEG
85026: PUSH
85027: LD_INT 1
85029: PUSH
85030: EMPTY
85031: LIST
85032: LIST
85033: PUSH
85034: LD_INT 4
85036: NEG
85037: PUSH
85038: LD_INT 0
85040: PUSH
85041: EMPTY
85042: LIST
85043: LIST
85044: PUSH
85045: LD_INT 4
85047: NEG
85048: PUSH
85049: LD_INT 1
85051: NEG
85052: PUSH
85053: EMPTY
85054: LIST
85055: LIST
85056: PUSH
85057: LD_INT 4
85059: NEG
85060: PUSH
85061: LD_INT 2
85063: NEG
85064: PUSH
85065: EMPTY
85066: LIST
85067: LIST
85068: PUSH
85069: LD_INT 2
85071: NEG
85072: PUSH
85073: LD_INT 2
85075: PUSH
85076: EMPTY
85077: LIST
85078: LIST
85079: PUSH
85080: LD_INT 4
85082: NEG
85083: PUSH
85084: LD_INT 4
85086: NEG
85087: PUSH
85088: EMPTY
85089: LIST
85090: LIST
85091: PUSH
85092: LD_INT 4
85094: NEG
85095: PUSH
85096: LD_INT 5
85098: NEG
85099: PUSH
85100: EMPTY
85101: LIST
85102: LIST
85103: PUSH
85104: LD_INT 3
85106: NEG
85107: PUSH
85108: LD_INT 4
85110: NEG
85111: PUSH
85112: EMPTY
85113: LIST
85114: LIST
85115: PUSH
85116: LD_INT 3
85118: NEG
85119: PUSH
85120: LD_INT 3
85122: NEG
85123: PUSH
85124: EMPTY
85125: LIST
85126: LIST
85127: PUSH
85128: LD_INT 4
85130: NEG
85131: PUSH
85132: LD_INT 3
85134: NEG
85135: PUSH
85136: EMPTY
85137: LIST
85138: LIST
85139: PUSH
85140: LD_INT 5
85142: NEG
85143: PUSH
85144: LD_INT 4
85146: NEG
85147: PUSH
85148: EMPTY
85149: LIST
85150: LIST
85151: PUSH
85152: LD_INT 5
85154: NEG
85155: PUSH
85156: LD_INT 5
85158: NEG
85159: PUSH
85160: EMPTY
85161: LIST
85162: LIST
85163: PUSH
85164: LD_INT 3
85166: NEG
85167: PUSH
85168: LD_INT 5
85170: NEG
85171: PUSH
85172: EMPTY
85173: LIST
85174: LIST
85175: PUSH
85176: LD_INT 5
85178: NEG
85179: PUSH
85180: LD_INT 3
85182: NEG
85183: PUSH
85184: EMPTY
85185: LIST
85186: LIST
85187: PUSH
85188: EMPTY
85189: LIST
85190: LIST
85191: LIST
85192: LIST
85193: LIST
85194: LIST
85195: LIST
85196: LIST
85197: LIST
85198: LIST
85199: LIST
85200: LIST
85201: LIST
85202: LIST
85203: LIST
85204: LIST
85205: LIST
85206: LIST
85207: LIST
85208: LIST
85209: LIST
85210: LIST
85211: LIST
85212: LIST
85213: LIST
85214: LIST
85215: LIST
85216: LIST
85217: LIST
85218: LIST
85219: LIST
85220: LIST
85221: LIST
85222: LIST
85223: LIST
85224: LIST
85225: LIST
85226: LIST
85227: LIST
85228: LIST
85229: LIST
85230: LIST
85231: LIST
85232: LIST
85233: LIST
85234: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
85235: LD_ADDR_VAR 0 30
85239: PUSH
85240: LD_INT 4
85242: PUSH
85243: LD_INT 4
85245: PUSH
85246: EMPTY
85247: LIST
85248: LIST
85249: PUSH
85250: LD_INT 4
85252: PUSH
85253: LD_INT 3
85255: PUSH
85256: EMPTY
85257: LIST
85258: LIST
85259: PUSH
85260: LD_INT 5
85262: PUSH
85263: LD_INT 4
85265: PUSH
85266: EMPTY
85267: LIST
85268: LIST
85269: PUSH
85270: LD_INT 5
85272: PUSH
85273: LD_INT 5
85275: PUSH
85276: EMPTY
85277: LIST
85278: LIST
85279: PUSH
85280: LD_INT 4
85282: PUSH
85283: LD_INT 5
85285: PUSH
85286: EMPTY
85287: LIST
85288: LIST
85289: PUSH
85290: LD_INT 3
85292: PUSH
85293: LD_INT 4
85295: PUSH
85296: EMPTY
85297: LIST
85298: LIST
85299: PUSH
85300: LD_INT 3
85302: PUSH
85303: LD_INT 3
85305: PUSH
85306: EMPTY
85307: LIST
85308: LIST
85309: PUSH
85310: LD_INT 5
85312: PUSH
85313: LD_INT 3
85315: PUSH
85316: EMPTY
85317: LIST
85318: LIST
85319: PUSH
85320: LD_INT 3
85322: PUSH
85323: LD_INT 5
85325: PUSH
85326: EMPTY
85327: LIST
85328: LIST
85329: PUSH
85330: LD_INT 0
85332: PUSH
85333: LD_INT 3
85335: PUSH
85336: EMPTY
85337: LIST
85338: LIST
85339: PUSH
85340: LD_INT 0
85342: PUSH
85343: LD_INT 2
85345: PUSH
85346: EMPTY
85347: LIST
85348: LIST
85349: PUSH
85350: LD_INT 1
85352: PUSH
85353: LD_INT 3
85355: PUSH
85356: EMPTY
85357: LIST
85358: LIST
85359: PUSH
85360: LD_INT 1
85362: PUSH
85363: LD_INT 4
85365: PUSH
85366: EMPTY
85367: LIST
85368: LIST
85369: PUSH
85370: LD_INT 0
85372: PUSH
85373: LD_INT 4
85375: PUSH
85376: EMPTY
85377: LIST
85378: LIST
85379: PUSH
85380: LD_INT 1
85382: NEG
85383: PUSH
85384: LD_INT 3
85386: PUSH
85387: EMPTY
85388: LIST
85389: LIST
85390: PUSH
85391: LD_INT 1
85393: NEG
85394: PUSH
85395: LD_INT 2
85397: PUSH
85398: EMPTY
85399: LIST
85400: LIST
85401: PUSH
85402: LD_INT 2
85404: PUSH
85405: LD_INT 4
85407: PUSH
85408: EMPTY
85409: LIST
85410: LIST
85411: PUSH
85412: LD_INT 2
85414: NEG
85415: PUSH
85416: LD_INT 2
85418: PUSH
85419: EMPTY
85420: LIST
85421: LIST
85422: PUSH
85423: LD_INT 4
85425: NEG
85426: PUSH
85427: LD_INT 0
85429: PUSH
85430: EMPTY
85431: LIST
85432: LIST
85433: PUSH
85434: LD_INT 4
85436: NEG
85437: PUSH
85438: LD_INT 1
85440: NEG
85441: PUSH
85442: EMPTY
85443: LIST
85444: LIST
85445: PUSH
85446: LD_INT 3
85448: NEG
85449: PUSH
85450: LD_INT 0
85452: PUSH
85453: EMPTY
85454: LIST
85455: LIST
85456: PUSH
85457: LD_INT 3
85459: NEG
85460: PUSH
85461: LD_INT 1
85463: PUSH
85464: EMPTY
85465: LIST
85466: LIST
85467: PUSH
85468: LD_INT 4
85470: NEG
85471: PUSH
85472: LD_INT 1
85474: PUSH
85475: EMPTY
85476: LIST
85477: LIST
85478: PUSH
85479: LD_INT 5
85481: NEG
85482: PUSH
85483: LD_INT 0
85485: PUSH
85486: EMPTY
85487: LIST
85488: LIST
85489: PUSH
85490: LD_INT 5
85492: NEG
85493: PUSH
85494: LD_INT 1
85496: NEG
85497: PUSH
85498: EMPTY
85499: LIST
85500: LIST
85501: PUSH
85502: LD_INT 5
85504: NEG
85505: PUSH
85506: LD_INT 2
85508: NEG
85509: PUSH
85510: EMPTY
85511: LIST
85512: LIST
85513: PUSH
85514: LD_INT 3
85516: NEG
85517: PUSH
85518: LD_INT 2
85520: PUSH
85521: EMPTY
85522: LIST
85523: LIST
85524: PUSH
85525: LD_INT 3
85527: NEG
85528: PUSH
85529: LD_INT 3
85531: NEG
85532: PUSH
85533: EMPTY
85534: LIST
85535: LIST
85536: PUSH
85537: LD_INT 3
85539: NEG
85540: PUSH
85541: LD_INT 4
85543: NEG
85544: PUSH
85545: EMPTY
85546: LIST
85547: LIST
85548: PUSH
85549: LD_INT 2
85551: NEG
85552: PUSH
85553: LD_INT 3
85555: NEG
85556: PUSH
85557: EMPTY
85558: LIST
85559: LIST
85560: PUSH
85561: LD_INT 2
85563: NEG
85564: PUSH
85565: LD_INT 2
85567: NEG
85568: PUSH
85569: EMPTY
85570: LIST
85571: LIST
85572: PUSH
85573: LD_INT 3
85575: NEG
85576: PUSH
85577: LD_INT 2
85579: NEG
85580: PUSH
85581: EMPTY
85582: LIST
85583: LIST
85584: PUSH
85585: LD_INT 4
85587: NEG
85588: PUSH
85589: LD_INT 3
85591: NEG
85592: PUSH
85593: EMPTY
85594: LIST
85595: LIST
85596: PUSH
85597: LD_INT 4
85599: NEG
85600: PUSH
85601: LD_INT 4
85603: NEG
85604: PUSH
85605: EMPTY
85606: LIST
85607: LIST
85608: PUSH
85609: LD_INT 2
85611: NEG
85612: PUSH
85613: LD_INT 4
85615: NEG
85616: PUSH
85617: EMPTY
85618: LIST
85619: LIST
85620: PUSH
85621: LD_INT 4
85623: NEG
85624: PUSH
85625: LD_INT 2
85627: NEG
85628: PUSH
85629: EMPTY
85630: LIST
85631: LIST
85632: PUSH
85633: LD_INT 0
85635: PUSH
85636: LD_INT 4
85638: NEG
85639: PUSH
85640: EMPTY
85641: LIST
85642: LIST
85643: PUSH
85644: LD_INT 0
85646: PUSH
85647: LD_INT 5
85649: NEG
85650: PUSH
85651: EMPTY
85652: LIST
85653: LIST
85654: PUSH
85655: LD_INT 1
85657: PUSH
85658: LD_INT 4
85660: NEG
85661: PUSH
85662: EMPTY
85663: LIST
85664: LIST
85665: PUSH
85666: LD_INT 1
85668: PUSH
85669: LD_INT 3
85671: NEG
85672: PUSH
85673: EMPTY
85674: LIST
85675: LIST
85676: PUSH
85677: LD_INT 0
85679: PUSH
85680: LD_INT 3
85682: NEG
85683: PUSH
85684: EMPTY
85685: LIST
85686: LIST
85687: PUSH
85688: LD_INT 1
85690: NEG
85691: PUSH
85692: LD_INT 4
85694: NEG
85695: PUSH
85696: EMPTY
85697: LIST
85698: LIST
85699: PUSH
85700: LD_INT 1
85702: NEG
85703: PUSH
85704: LD_INT 5
85706: NEG
85707: PUSH
85708: EMPTY
85709: LIST
85710: LIST
85711: PUSH
85712: LD_INT 2
85714: PUSH
85715: LD_INT 3
85717: NEG
85718: PUSH
85719: EMPTY
85720: LIST
85721: LIST
85722: PUSH
85723: LD_INT 2
85725: NEG
85726: PUSH
85727: LD_INT 5
85729: NEG
85730: PUSH
85731: EMPTY
85732: LIST
85733: LIST
85734: PUSH
85735: EMPTY
85736: LIST
85737: LIST
85738: LIST
85739: LIST
85740: LIST
85741: LIST
85742: LIST
85743: LIST
85744: LIST
85745: LIST
85746: LIST
85747: LIST
85748: LIST
85749: LIST
85750: LIST
85751: LIST
85752: LIST
85753: LIST
85754: LIST
85755: LIST
85756: LIST
85757: LIST
85758: LIST
85759: LIST
85760: LIST
85761: LIST
85762: LIST
85763: LIST
85764: LIST
85765: LIST
85766: LIST
85767: LIST
85768: LIST
85769: LIST
85770: LIST
85771: LIST
85772: LIST
85773: LIST
85774: LIST
85775: LIST
85776: LIST
85777: LIST
85778: LIST
85779: LIST
85780: LIST
85781: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
85782: LD_ADDR_VAR 0 31
85786: PUSH
85787: LD_INT 0
85789: PUSH
85790: LD_INT 4
85792: PUSH
85793: EMPTY
85794: LIST
85795: LIST
85796: PUSH
85797: LD_INT 0
85799: PUSH
85800: LD_INT 3
85802: PUSH
85803: EMPTY
85804: LIST
85805: LIST
85806: PUSH
85807: LD_INT 1
85809: PUSH
85810: LD_INT 4
85812: PUSH
85813: EMPTY
85814: LIST
85815: LIST
85816: PUSH
85817: LD_INT 1
85819: PUSH
85820: LD_INT 5
85822: PUSH
85823: EMPTY
85824: LIST
85825: LIST
85826: PUSH
85827: LD_INT 0
85829: PUSH
85830: LD_INT 5
85832: PUSH
85833: EMPTY
85834: LIST
85835: LIST
85836: PUSH
85837: LD_INT 1
85839: NEG
85840: PUSH
85841: LD_INT 4
85843: PUSH
85844: EMPTY
85845: LIST
85846: LIST
85847: PUSH
85848: LD_INT 1
85850: NEG
85851: PUSH
85852: LD_INT 3
85854: PUSH
85855: EMPTY
85856: LIST
85857: LIST
85858: PUSH
85859: LD_INT 2
85861: PUSH
85862: LD_INT 5
85864: PUSH
85865: EMPTY
85866: LIST
85867: LIST
85868: PUSH
85869: LD_INT 2
85871: NEG
85872: PUSH
85873: LD_INT 3
85875: PUSH
85876: EMPTY
85877: LIST
85878: LIST
85879: PUSH
85880: LD_INT 3
85882: NEG
85883: PUSH
85884: LD_INT 0
85886: PUSH
85887: EMPTY
85888: LIST
85889: LIST
85890: PUSH
85891: LD_INT 3
85893: NEG
85894: PUSH
85895: LD_INT 1
85897: NEG
85898: PUSH
85899: EMPTY
85900: LIST
85901: LIST
85902: PUSH
85903: LD_INT 2
85905: NEG
85906: PUSH
85907: LD_INT 0
85909: PUSH
85910: EMPTY
85911: LIST
85912: LIST
85913: PUSH
85914: LD_INT 2
85916: NEG
85917: PUSH
85918: LD_INT 1
85920: PUSH
85921: EMPTY
85922: LIST
85923: LIST
85924: PUSH
85925: LD_INT 3
85927: NEG
85928: PUSH
85929: LD_INT 1
85931: PUSH
85932: EMPTY
85933: LIST
85934: LIST
85935: PUSH
85936: LD_INT 4
85938: NEG
85939: PUSH
85940: LD_INT 0
85942: PUSH
85943: EMPTY
85944: LIST
85945: LIST
85946: PUSH
85947: LD_INT 4
85949: NEG
85950: PUSH
85951: LD_INT 1
85953: NEG
85954: PUSH
85955: EMPTY
85956: LIST
85957: LIST
85958: PUSH
85959: LD_INT 4
85961: NEG
85962: PUSH
85963: LD_INT 2
85965: NEG
85966: PUSH
85967: EMPTY
85968: LIST
85969: LIST
85970: PUSH
85971: LD_INT 2
85973: NEG
85974: PUSH
85975: LD_INT 2
85977: PUSH
85978: EMPTY
85979: LIST
85980: LIST
85981: PUSH
85982: LD_INT 4
85984: NEG
85985: PUSH
85986: LD_INT 4
85988: NEG
85989: PUSH
85990: EMPTY
85991: LIST
85992: LIST
85993: PUSH
85994: LD_INT 4
85996: NEG
85997: PUSH
85998: LD_INT 5
86000: NEG
86001: PUSH
86002: EMPTY
86003: LIST
86004: LIST
86005: PUSH
86006: LD_INT 3
86008: NEG
86009: PUSH
86010: LD_INT 4
86012: NEG
86013: PUSH
86014: EMPTY
86015: LIST
86016: LIST
86017: PUSH
86018: LD_INT 3
86020: NEG
86021: PUSH
86022: LD_INT 3
86024: NEG
86025: PUSH
86026: EMPTY
86027: LIST
86028: LIST
86029: PUSH
86030: LD_INT 4
86032: NEG
86033: PUSH
86034: LD_INT 3
86036: NEG
86037: PUSH
86038: EMPTY
86039: LIST
86040: LIST
86041: PUSH
86042: LD_INT 5
86044: NEG
86045: PUSH
86046: LD_INT 4
86048: NEG
86049: PUSH
86050: EMPTY
86051: LIST
86052: LIST
86053: PUSH
86054: LD_INT 5
86056: NEG
86057: PUSH
86058: LD_INT 5
86060: NEG
86061: PUSH
86062: EMPTY
86063: LIST
86064: LIST
86065: PUSH
86066: LD_INT 3
86068: NEG
86069: PUSH
86070: LD_INT 5
86072: NEG
86073: PUSH
86074: EMPTY
86075: LIST
86076: LIST
86077: PUSH
86078: LD_INT 5
86080: NEG
86081: PUSH
86082: LD_INT 3
86084: NEG
86085: PUSH
86086: EMPTY
86087: LIST
86088: LIST
86089: PUSH
86090: LD_INT 0
86092: PUSH
86093: LD_INT 3
86095: NEG
86096: PUSH
86097: EMPTY
86098: LIST
86099: LIST
86100: PUSH
86101: LD_INT 0
86103: PUSH
86104: LD_INT 4
86106: NEG
86107: PUSH
86108: EMPTY
86109: LIST
86110: LIST
86111: PUSH
86112: LD_INT 1
86114: PUSH
86115: LD_INT 3
86117: NEG
86118: PUSH
86119: EMPTY
86120: LIST
86121: LIST
86122: PUSH
86123: LD_INT 1
86125: PUSH
86126: LD_INT 2
86128: NEG
86129: PUSH
86130: EMPTY
86131: LIST
86132: LIST
86133: PUSH
86134: LD_INT 0
86136: PUSH
86137: LD_INT 2
86139: NEG
86140: PUSH
86141: EMPTY
86142: LIST
86143: LIST
86144: PUSH
86145: LD_INT 1
86147: NEG
86148: PUSH
86149: LD_INT 3
86151: NEG
86152: PUSH
86153: EMPTY
86154: LIST
86155: LIST
86156: PUSH
86157: LD_INT 1
86159: NEG
86160: PUSH
86161: LD_INT 4
86163: NEG
86164: PUSH
86165: EMPTY
86166: LIST
86167: LIST
86168: PUSH
86169: LD_INT 2
86171: PUSH
86172: LD_INT 2
86174: NEG
86175: PUSH
86176: EMPTY
86177: LIST
86178: LIST
86179: PUSH
86180: LD_INT 2
86182: NEG
86183: PUSH
86184: LD_INT 4
86186: NEG
86187: PUSH
86188: EMPTY
86189: LIST
86190: LIST
86191: PUSH
86192: LD_INT 4
86194: PUSH
86195: LD_INT 0
86197: PUSH
86198: EMPTY
86199: LIST
86200: LIST
86201: PUSH
86202: LD_INT 4
86204: PUSH
86205: LD_INT 1
86207: NEG
86208: PUSH
86209: EMPTY
86210: LIST
86211: LIST
86212: PUSH
86213: LD_INT 5
86215: PUSH
86216: LD_INT 0
86218: PUSH
86219: EMPTY
86220: LIST
86221: LIST
86222: PUSH
86223: LD_INT 5
86225: PUSH
86226: LD_INT 1
86228: PUSH
86229: EMPTY
86230: LIST
86231: LIST
86232: PUSH
86233: LD_INT 4
86235: PUSH
86236: LD_INT 1
86238: PUSH
86239: EMPTY
86240: LIST
86241: LIST
86242: PUSH
86243: LD_INT 3
86245: PUSH
86246: LD_INT 0
86248: PUSH
86249: EMPTY
86250: LIST
86251: LIST
86252: PUSH
86253: LD_INT 3
86255: PUSH
86256: LD_INT 1
86258: NEG
86259: PUSH
86260: EMPTY
86261: LIST
86262: LIST
86263: PUSH
86264: LD_INT 3
86266: PUSH
86267: LD_INT 2
86269: NEG
86270: PUSH
86271: EMPTY
86272: LIST
86273: LIST
86274: PUSH
86275: LD_INT 5
86277: PUSH
86278: LD_INT 2
86280: PUSH
86281: EMPTY
86282: LIST
86283: LIST
86284: PUSH
86285: EMPTY
86286: LIST
86287: LIST
86288: LIST
86289: LIST
86290: LIST
86291: LIST
86292: LIST
86293: LIST
86294: LIST
86295: LIST
86296: LIST
86297: LIST
86298: LIST
86299: LIST
86300: LIST
86301: LIST
86302: LIST
86303: LIST
86304: LIST
86305: LIST
86306: LIST
86307: LIST
86308: LIST
86309: LIST
86310: LIST
86311: LIST
86312: LIST
86313: LIST
86314: LIST
86315: LIST
86316: LIST
86317: LIST
86318: LIST
86319: LIST
86320: LIST
86321: LIST
86322: LIST
86323: LIST
86324: LIST
86325: LIST
86326: LIST
86327: LIST
86328: LIST
86329: LIST
86330: LIST
86331: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
86332: LD_ADDR_VAR 0 32
86336: PUSH
86337: LD_INT 4
86339: NEG
86340: PUSH
86341: LD_INT 0
86343: PUSH
86344: EMPTY
86345: LIST
86346: LIST
86347: PUSH
86348: LD_INT 4
86350: NEG
86351: PUSH
86352: LD_INT 1
86354: NEG
86355: PUSH
86356: EMPTY
86357: LIST
86358: LIST
86359: PUSH
86360: LD_INT 3
86362: NEG
86363: PUSH
86364: LD_INT 0
86366: PUSH
86367: EMPTY
86368: LIST
86369: LIST
86370: PUSH
86371: LD_INT 3
86373: NEG
86374: PUSH
86375: LD_INT 1
86377: PUSH
86378: EMPTY
86379: LIST
86380: LIST
86381: PUSH
86382: LD_INT 4
86384: NEG
86385: PUSH
86386: LD_INT 1
86388: PUSH
86389: EMPTY
86390: LIST
86391: LIST
86392: PUSH
86393: LD_INT 5
86395: NEG
86396: PUSH
86397: LD_INT 0
86399: PUSH
86400: EMPTY
86401: LIST
86402: LIST
86403: PUSH
86404: LD_INT 5
86406: NEG
86407: PUSH
86408: LD_INT 1
86410: NEG
86411: PUSH
86412: EMPTY
86413: LIST
86414: LIST
86415: PUSH
86416: LD_INT 5
86418: NEG
86419: PUSH
86420: LD_INT 2
86422: NEG
86423: PUSH
86424: EMPTY
86425: LIST
86426: LIST
86427: PUSH
86428: LD_INT 3
86430: NEG
86431: PUSH
86432: LD_INT 2
86434: PUSH
86435: EMPTY
86436: LIST
86437: LIST
86438: PUSH
86439: LD_INT 3
86441: NEG
86442: PUSH
86443: LD_INT 3
86445: NEG
86446: PUSH
86447: EMPTY
86448: LIST
86449: LIST
86450: PUSH
86451: LD_INT 3
86453: NEG
86454: PUSH
86455: LD_INT 4
86457: NEG
86458: PUSH
86459: EMPTY
86460: LIST
86461: LIST
86462: PUSH
86463: LD_INT 2
86465: NEG
86466: PUSH
86467: LD_INT 3
86469: NEG
86470: PUSH
86471: EMPTY
86472: LIST
86473: LIST
86474: PUSH
86475: LD_INT 2
86477: NEG
86478: PUSH
86479: LD_INT 2
86481: NEG
86482: PUSH
86483: EMPTY
86484: LIST
86485: LIST
86486: PUSH
86487: LD_INT 3
86489: NEG
86490: PUSH
86491: LD_INT 2
86493: NEG
86494: PUSH
86495: EMPTY
86496: LIST
86497: LIST
86498: PUSH
86499: LD_INT 4
86501: NEG
86502: PUSH
86503: LD_INT 3
86505: NEG
86506: PUSH
86507: EMPTY
86508: LIST
86509: LIST
86510: PUSH
86511: LD_INT 4
86513: NEG
86514: PUSH
86515: LD_INT 4
86517: NEG
86518: PUSH
86519: EMPTY
86520: LIST
86521: LIST
86522: PUSH
86523: LD_INT 2
86525: NEG
86526: PUSH
86527: LD_INT 4
86529: NEG
86530: PUSH
86531: EMPTY
86532: LIST
86533: LIST
86534: PUSH
86535: LD_INT 4
86537: NEG
86538: PUSH
86539: LD_INT 2
86541: NEG
86542: PUSH
86543: EMPTY
86544: LIST
86545: LIST
86546: PUSH
86547: LD_INT 0
86549: PUSH
86550: LD_INT 4
86552: NEG
86553: PUSH
86554: EMPTY
86555: LIST
86556: LIST
86557: PUSH
86558: LD_INT 0
86560: PUSH
86561: LD_INT 5
86563: NEG
86564: PUSH
86565: EMPTY
86566: LIST
86567: LIST
86568: PUSH
86569: LD_INT 1
86571: PUSH
86572: LD_INT 4
86574: NEG
86575: PUSH
86576: EMPTY
86577: LIST
86578: LIST
86579: PUSH
86580: LD_INT 1
86582: PUSH
86583: LD_INT 3
86585: NEG
86586: PUSH
86587: EMPTY
86588: LIST
86589: LIST
86590: PUSH
86591: LD_INT 0
86593: PUSH
86594: LD_INT 3
86596: NEG
86597: PUSH
86598: EMPTY
86599: LIST
86600: LIST
86601: PUSH
86602: LD_INT 1
86604: NEG
86605: PUSH
86606: LD_INT 4
86608: NEG
86609: PUSH
86610: EMPTY
86611: LIST
86612: LIST
86613: PUSH
86614: LD_INT 1
86616: NEG
86617: PUSH
86618: LD_INT 5
86620: NEG
86621: PUSH
86622: EMPTY
86623: LIST
86624: LIST
86625: PUSH
86626: LD_INT 2
86628: PUSH
86629: LD_INT 3
86631: NEG
86632: PUSH
86633: EMPTY
86634: LIST
86635: LIST
86636: PUSH
86637: LD_INT 2
86639: NEG
86640: PUSH
86641: LD_INT 5
86643: NEG
86644: PUSH
86645: EMPTY
86646: LIST
86647: LIST
86648: PUSH
86649: LD_INT 3
86651: PUSH
86652: LD_INT 0
86654: PUSH
86655: EMPTY
86656: LIST
86657: LIST
86658: PUSH
86659: LD_INT 3
86661: PUSH
86662: LD_INT 1
86664: NEG
86665: PUSH
86666: EMPTY
86667: LIST
86668: LIST
86669: PUSH
86670: LD_INT 4
86672: PUSH
86673: LD_INT 0
86675: PUSH
86676: EMPTY
86677: LIST
86678: LIST
86679: PUSH
86680: LD_INT 4
86682: PUSH
86683: LD_INT 1
86685: PUSH
86686: EMPTY
86687: LIST
86688: LIST
86689: PUSH
86690: LD_INT 3
86692: PUSH
86693: LD_INT 1
86695: PUSH
86696: EMPTY
86697: LIST
86698: LIST
86699: PUSH
86700: LD_INT 2
86702: PUSH
86703: LD_INT 0
86705: PUSH
86706: EMPTY
86707: LIST
86708: LIST
86709: PUSH
86710: LD_INT 2
86712: PUSH
86713: LD_INT 1
86715: NEG
86716: PUSH
86717: EMPTY
86718: LIST
86719: LIST
86720: PUSH
86721: LD_INT 2
86723: PUSH
86724: LD_INT 2
86726: NEG
86727: PUSH
86728: EMPTY
86729: LIST
86730: LIST
86731: PUSH
86732: LD_INT 4
86734: PUSH
86735: LD_INT 2
86737: PUSH
86738: EMPTY
86739: LIST
86740: LIST
86741: PUSH
86742: LD_INT 4
86744: PUSH
86745: LD_INT 4
86747: PUSH
86748: EMPTY
86749: LIST
86750: LIST
86751: PUSH
86752: LD_INT 4
86754: PUSH
86755: LD_INT 3
86757: PUSH
86758: EMPTY
86759: LIST
86760: LIST
86761: PUSH
86762: LD_INT 5
86764: PUSH
86765: LD_INT 4
86767: PUSH
86768: EMPTY
86769: LIST
86770: LIST
86771: PUSH
86772: LD_INT 5
86774: PUSH
86775: LD_INT 5
86777: PUSH
86778: EMPTY
86779: LIST
86780: LIST
86781: PUSH
86782: LD_INT 4
86784: PUSH
86785: LD_INT 5
86787: PUSH
86788: EMPTY
86789: LIST
86790: LIST
86791: PUSH
86792: LD_INT 3
86794: PUSH
86795: LD_INT 4
86797: PUSH
86798: EMPTY
86799: LIST
86800: LIST
86801: PUSH
86802: LD_INT 3
86804: PUSH
86805: LD_INT 3
86807: PUSH
86808: EMPTY
86809: LIST
86810: LIST
86811: PUSH
86812: LD_INT 5
86814: PUSH
86815: LD_INT 3
86817: PUSH
86818: EMPTY
86819: LIST
86820: LIST
86821: PUSH
86822: LD_INT 3
86824: PUSH
86825: LD_INT 5
86827: PUSH
86828: EMPTY
86829: LIST
86830: LIST
86831: PUSH
86832: EMPTY
86833: LIST
86834: LIST
86835: LIST
86836: LIST
86837: LIST
86838: LIST
86839: LIST
86840: LIST
86841: LIST
86842: LIST
86843: LIST
86844: LIST
86845: LIST
86846: LIST
86847: LIST
86848: LIST
86849: LIST
86850: LIST
86851: LIST
86852: LIST
86853: LIST
86854: LIST
86855: LIST
86856: LIST
86857: LIST
86858: LIST
86859: LIST
86860: LIST
86861: LIST
86862: LIST
86863: LIST
86864: LIST
86865: LIST
86866: LIST
86867: LIST
86868: LIST
86869: LIST
86870: LIST
86871: LIST
86872: LIST
86873: LIST
86874: LIST
86875: LIST
86876: LIST
86877: LIST
86878: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
86879: LD_ADDR_VAR 0 33
86883: PUSH
86884: LD_INT 4
86886: NEG
86887: PUSH
86888: LD_INT 4
86890: NEG
86891: PUSH
86892: EMPTY
86893: LIST
86894: LIST
86895: PUSH
86896: LD_INT 4
86898: NEG
86899: PUSH
86900: LD_INT 5
86902: NEG
86903: PUSH
86904: EMPTY
86905: LIST
86906: LIST
86907: PUSH
86908: LD_INT 3
86910: NEG
86911: PUSH
86912: LD_INT 4
86914: NEG
86915: PUSH
86916: EMPTY
86917: LIST
86918: LIST
86919: PUSH
86920: LD_INT 3
86922: NEG
86923: PUSH
86924: LD_INT 3
86926: NEG
86927: PUSH
86928: EMPTY
86929: LIST
86930: LIST
86931: PUSH
86932: LD_INT 4
86934: NEG
86935: PUSH
86936: LD_INT 3
86938: NEG
86939: PUSH
86940: EMPTY
86941: LIST
86942: LIST
86943: PUSH
86944: LD_INT 5
86946: NEG
86947: PUSH
86948: LD_INT 4
86950: NEG
86951: PUSH
86952: EMPTY
86953: LIST
86954: LIST
86955: PUSH
86956: LD_INT 5
86958: NEG
86959: PUSH
86960: LD_INT 5
86962: NEG
86963: PUSH
86964: EMPTY
86965: LIST
86966: LIST
86967: PUSH
86968: LD_INT 3
86970: NEG
86971: PUSH
86972: LD_INT 5
86974: NEG
86975: PUSH
86976: EMPTY
86977: LIST
86978: LIST
86979: PUSH
86980: LD_INT 5
86982: NEG
86983: PUSH
86984: LD_INT 3
86986: NEG
86987: PUSH
86988: EMPTY
86989: LIST
86990: LIST
86991: PUSH
86992: LD_INT 0
86994: PUSH
86995: LD_INT 3
86997: NEG
86998: PUSH
86999: EMPTY
87000: LIST
87001: LIST
87002: PUSH
87003: LD_INT 0
87005: PUSH
87006: LD_INT 4
87008: NEG
87009: PUSH
87010: EMPTY
87011: LIST
87012: LIST
87013: PUSH
87014: LD_INT 1
87016: PUSH
87017: LD_INT 3
87019: NEG
87020: PUSH
87021: EMPTY
87022: LIST
87023: LIST
87024: PUSH
87025: LD_INT 1
87027: PUSH
87028: LD_INT 2
87030: NEG
87031: PUSH
87032: EMPTY
87033: LIST
87034: LIST
87035: PUSH
87036: LD_INT 0
87038: PUSH
87039: LD_INT 2
87041: NEG
87042: PUSH
87043: EMPTY
87044: LIST
87045: LIST
87046: PUSH
87047: LD_INT 1
87049: NEG
87050: PUSH
87051: LD_INT 3
87053: NEG
87054: PUSH
87055: EMPTY
87056: LIST
87057: LIST
87058: PUSH
87059: LD_INT 1
87061: NEG
87062: PUSH
87063: LD_INT 4
87065: NEG
87066: PUSH
87067: EMPTY
87068: LIST
87069: LIST
87070: PUSH
87071: LD_INT 2
87073: PUSH
87074: LD_INT 2
87076: NEG
87077: PUSH
87078: EMPTY
87079: LIST
87080: LIST
87081: PUSH
87082: LD_INT 2
87084: NEG
87085: PUSH
87086: LD_INT 4
87088: NEG
87089: PUSH
87090: EMPTY
87091: LIST
87092: LIST
87093: PUSH
87094: LD_INT 4
87096: PUSH
87097: LD_INT 0
87099: PUSH
87100: EMPTY
87101: LIST
87102: LIST
87103: PUSH
87104: LD_INT 4
87106: PUSH
87107: LD_INT 1
87109: NEG
87110: PUSH
87111: EMPTY
87112: LIST
87113: LIST
87114: PUSH
87115: LD_INT 5
87117: PUSH
87118: LD_INT 0
87120: PUSH
87121: EMPTY
87122: LIST
87123: LIST
87124: PUSH
87125: LD_INT 5
87127: PUSH
87128: LD_INT 1
87130: PUSH
87131: EMPTY
87132: LIST
87133: LIST
87134: PUSH
87135: LD_INT 4
87137: PUSH
87138: LD_INT 1
87140: PUSH
87141: EMPTY
87142: LIST
87143: LIST
87144: PUSH
87145: LD_INT 3
87147: PUSH
87148: LD_INT 0
87150: PUSH
87151: EMPTY
87152: LIST
87153: LIST
87154: PUSH
87155: LD_INT 3
87157: PUSH
87158: LD_INT 1
87160: NEG
87161: PUSH
87162: EMPTY
87163: LIST
87164: LIST
87165: PUSH
87166: LD_INT 3
87168: PUSH
87169: LD_INT 2
87171: NEG
87172: PUSH
87173: EMPTY
87174: LIST
87175: LIST
87176: PUSH
87177: LD_INT 5
87179: PUSH
87180: LD_INT 2
87182: PUSH
87183: EMPTY
87184: LIST
87185: LIST
87186: PUSH
87187: LD_INT 3
87189: PUSH
87190: LD_INT 3
87192: PUSH
87193: EMPTY
87194: LIST
87195: LIST
87196: PUSH
87197: LD_INT 3
87199: PUSH
87200: LD_INT 2
87202: PUSH
87203: EMPTY
87204: LIST
87205: LIST
87206: PUSH
87207: LD_INT 4
87209: PUSH
87210: LD_INT 3
87212: PUSH
87213: EMPTY
87214: LIST
87215: LIST
87216: PUSH
87217: LD_INT 4
87219: PUSH
87220: LD_INT 4
87222: PUSH
87223: EMPTY
87224: LIST
87225: LIST
87226: PUSH
87227: LD_INT 3
87229: PUSH
87230: LD_INT 4
87232: PUSH
87233: EMPTY
87234: LIST
87235: LIST
87236: PUSH
87237: LD_INT 2
87239: PUSH
87240: LD_INT 3
87242: PUSH
87243: EMPTY
87244: LIST
87245: LIST
87246: PUSH
87247: LD_INT 2
87249: PUSH
87250: LD_INT 2
87252: PUSH
87253: EMPTY
87254: LIST
87255: LIST
87256: PUSH
87257: LD_INT 4
87259: PUSH
87260: LD_INT 2
87262: PUSH
87263: EMPTY
87264: LIST
87265: LIST
87266: PUSH
87267: LD_INT 2
87269: PUSH
87270: LD_INT 4
87272: PUSH
87273: EMPTY
87274: LIST
87275: LIST
87276: PUSH
87277: LD_INT 0
87279: PUSH
87280: LD_INT 4
87282: PUSH
87283: EMPTY
87284: LIST
87285: LIST
87286: PUSH
87287: LD_INT 0
87289: PUSH
87290: LD_INT 3
87292: PUSH
87293: EMPTY
87294: LIST
87295: LIST
87296: PUSH
87297: LD_INT 1
87299: PUSH
87300: LD_INT 4
87302: PUSH
87303: EMPTY
87304: LIST
87305: LIST
87306: PUSH
87307: LD_INT 1
87309: PUSH
87310: LD_INT 5
87312: PUSH
87313: EMPTY
87314: LIST
87315: LIST
87316: PUSH
87317: LD_INT 0
87319: PUSH
87320: LD_INT 5
87322: PUSH
87323: EMPTY
87324: LIST
87325: LIST
87326: PUSH
87327: LD_INT 1
87329: NEG
87330: PUSH
87331: LD_INT 4
87333: PUSH
87334: EMPTY
87335: LIST
87336: LIST
87337: PUSH
87338: LD_INT 1
87340: NEG
87341: PUSH
87342: LD_INT 3
87344: PUSH
87345: EMPTY
87346: LIST
87347: LIST
87348: PUSH
87349: LD_INT 2
87351: PUSH
87352: LD_INT 5
87354: PUSH
87355: EMPTY
87356: LIST
87357: LIST
87358: PUSH
87359: LD_INT 2
87361: NEG
87362: PUSH
87363: LD_INT 3
87365: PUSH
87366: EMPTY
87367: LIST
87368: LIST
87369: PUSH
87370: EMPTY
87371: LIST
87372: LIST
87373: LIST
87374: LIST
87375: LIST
87376: LIST
87377: LIST
87378: LIST
87379: LIST
87380: LIST
87381: LIST
87382: LIST
87383: LIST
87384: LIST
87385: LIST
87386: LIST
87387: LIST
87388: LIST
87389: LIST
87390: LIST
87391: LIST
87392: LIST
87393: LIST
87394: LIST
87395: LIST
87396: LIST
87397: LIST
87398: LIST
87399: LIST
87400: LIST
87401: LIST
87402: LIST
87403: LIST
87404: LIST
87405: LIST
87406: LIST
87407: LIST
87408: LIST
87409: LIST
87410: LIST
87411: LIST
87412: LIST
87413: LIST
87414: LIST
87415: LIST
87416: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
87417: LD_ADDR_VAR 0 34
87421: PUSH
87422: LD_INT 0
87424: PUSH
87425: LD_INT 4
87427: NEG
87428: PUSH
87429: EMPTY
87430: LIST
87431: LIST
87432: PUSH
87433: LD_INT 0
87435: PUSH
87436: LD_INT 5
87438: NEG
87439: PUSH
87440: EMPTY
87441: LIST
87442: LIST
87443: PUSH
87444: LD_INT 1
87446: PUSH
87447: LD_INT 4
87449: NEG
87450: PUSH
87451: EMPTY
87452: LIST
87453: LIST
87454: PUSH
87455: LD_INT 1
87457: PUSH
87458: LD_INT 3
87460: NEG
87461: PUSH
87462: EMPTY
87463: LIST
87464: LIST
87465: PUSH
87466: LD_INT 0
87468: PUSH
87469: LD_INT 3
87471: NEG
87472: PUSH
87473: EMPTY
87474: LIST
87475: LIST
87476: PUSH
87477: LD_INT 1
87479: NEG
87480: PUSH
87481: LD_INT 4
87483: NEG
87484: PUSH
87485: EMPTY
87486: LIST
87487: LIST
87488: PUSH
87489: LD_INT 1
87491: NEG
87492: PUSH
87493: LD_INT 5
87495: NEG
87496: PUSH
87497: EMPTY
87498: LIST
87499: LIST
87500: PUSH
87501: LD_INT 2
87503: PUSH
87504: LD_INT 3
87506: NEG
87507: PUSH
87508: EMPTY
87509: LIST
87510: LIST
87511: PUSH
87512: LD_INT 2
87514: NEG
87515: PUSH
87516: LD_INT 5
87518: NEG
87519: PUSH
87520: EMPTY
87521: LIST
87522: LIST
87523: PUSH
87524: LD_INT 3
87526: PUSH
87527: LD_INT 0
87529: PUSH
87530: EMPTY
87531: LIST
87532: LIST
87533: PUSH
87534: LD_INT 3
87536: PUSH
87537: LD_INT 1
87539: NEG
87540: PUSH
87541: EMPTY
87542: LIST
87543: LIST
87544: PUSH
87545: LD_INT 4
87547: PUSH
87548: LD_INT 0
87550: PUSH
87551: EMPTY
87552: LIST
87553: LIST
87554: PUSH
87555: LD_INT 4
87557: PUSH
87558: LD_INT 1
87560: PUSH
87561: EMPTY
87562: LIST
87563: LIST
87564: PUSH
87565: LD_INT 3
87567: PUSH
87568: LD_INT 1
87570: PUSH
87571: EMPTY
87572: LIST
87573: LIST
87574: PUSH
87575: LD_INT 2
87577: PUSH
87578: LD_INT 0
87580: PUSH
87581: EMPTY
87582: LIST
87583: LIST
87584: PUSH
87585: LD_INT 2
87587: PUSH
87588: LD_INT 1
87590: NEG
87591: PUSH
87592: EMPTY
87593: LIST
87594: LIST
87595: PUSH
87596: LD_INT 2
87598: PUSH
87599: LD_INT 2
87601: NEG
87602: PUSH
87603: EMPTY
87604: LIST
87605: LIST
87606: PUSH
87607: LD_INT 4
87609: PUSH
87610: LD_INT 2
87612: PUSH
87613: EMPTY
87614: LIST
87615: LIST
87616: PUSH
87617: LD_INT 4
87619: PUSH
87620: LD_INT 4
87622: PUSH
87623: EMPTY
87624: LIST
87625: LIST
87626: PUSH
87627: LD_INT 4
87629: PUSH
87630: LD_INT 3
87632: PUSH
87633: EMPTY
87634: LIST
87635: LIST
87636: PUSH
87637: LD_INT 5
87639: PUSH
87640: LD_INT 4
87642: PUSH
87643: EMPTY
87644: LIST
87645: LIST
87646: PUSH
87647: LD_INT 5
87649: PUSH
87650: LD_INT 5
87652: PUSH
87653: EMPTY
87654: LIST
87655: LIST
87656: PUSH
87657: LD_INT 4
87659: PUSH
87660: LD_INT 5
87662: PUSH
87663: EMPTY
87664: LIST
87665: LIST
87666: PUSH
87667: LD_INT 3
87669: PUSH
87670: LD_INT 4
87672: PUSH
87673: EMPTY
87674: LIST
87675: LIST
87676: PUSH
87677: LD_INT 3
87679: PUSH
87680: LD_INT 3
87682: PUSH
87683: EMPTY
87684: LIST
87685: LIST
87686: PUSH
87687: LD_INT 5
87689: PUSH
87690: LD_INT 3
87692: PUSH
87693: EMPTY
87694: LIST
87695: LIST
87696: PUSH
87697: LD_INT 3
87699: PUSH
87700: LD_INT 5
87702: PUSH
87703: EMPTY
87704: LIST
87705: LIST
87706: PUSH
87707: LD_INT 0
87709: PUSH
87710: LD_INT 3
87712: PUSH
87713: EMPTY
87714: LIST
87715: LIST
87716: PUSH
87717: LD_INT 0
87719: PUSH
87720: LD_INT 2
87722: PUSH
87723: EMPTY
87724: LIST
87725: LIST
87726: PUSH
87727: LD_INT 1
87729: PUSH
87730: LD_INT 3
87732: PUSH
87733: EMPTY
87734: LIST
87735: LIST
87736: PUSH
87737: LD_INT 1
87739: PUSH
87740: LD_INT 4
87742: PUSH
87743: EMPTY
87744: LIST
87745: LIST
87746: PUSH
87747: LD_INT 0
87749: PUSH
87750: LD_INT 4
87752: PUSH
87753: EMPTY
87754: LIST
87755: LIST
87756: PUSH
87757: LD_INT 1
87759: NEG
87760: PUSH
87761: LD_INT 3
87763: PUSH
87764: EMPTY
87765: LIST
87766: LIST
87767: PUSH
87768: LD_INT 1
87770: NEG
87771: PUSH
87772: LD_INT 2
87774: PUSH
87775: EMPTY
87776: LIST
87777: LIST
87778: PUSH
87779: LD_INT 2
87781: PUSH
87782: LD_INT 4
87784: PUSH
87785: EMPTY
87786: LIST
87787: LIST
87788: PUSH
87789: LD_INT 2
87791: NEG
87792: PUSH
87793: LD_INT 2
87795: PUSH
87796: EMPTY
87797: LIST
87798: LIST
87799: PUSH
87800: LD_INT 4
87802: NEG
87803: PUSH
87804: LD_INT 0
87806: PUSH
87807: EMPTY
87808: LIST
87809: LIST
87810: PUSH
87811: LD_INT 4
87813: NEG
87814: PUSH
87815: LD_INT 1
87817: NEG
87818: PUSH
87819: EMPTY
87820: LIST
87821: LIST
87822: PUSH
87823: LD_INT 3
87825: NEG
87826: PUSH
87827: LD_INT 0
87829: PUSH
87830: EMPTY
87831: LIST
87832: LIST
87833: PUSH
87834: LD_INT 3
87836: NEG
87837: PUSH
87838: LD_INT 1
87840: PUSH
87841: EMPTY
87842: LIST
87843: LIST
87844: PUSH
87845: LD_INT 4
87847: NEG
87848: PUSH
87849: LD_INT 1
87851: PUSH
87852: EMPTY
87853: LIST
87854: LIST
87855: PUSH
87856: LD_INT 5
87858: NEG
87859: PUSH
87860: LD_INT 0
87862: PUSH
87863: EMPTY
87864: LIST
87865: LIST
87866: PUSH
87867: LD_INT 5
87869: NEG
87870: PUSH
87871: LD_INT 1
87873: NEG
87874: PUSH
87875: EMPTY
87876: LIST
87877: LIST
87878: PUSH
87879: LD_INT 5
87881: NEG
87882: PUSH
87883: LD_INT 2
87885: NEG
87886: PUSH
87887: EMPTY
87888: LIST
87889: LIST
87890: PUSH
87891: LD_INT 3
87893: NEG
87894: PUSH
87895: LD_INT 2
87897: PUSH
87898: EMPTY
87899: LIST
87900: LIST
87901: PUSH
87902: EMPTY
87903: LIST
87904: LIST
87905: LIST
87906: LIST
87907: LIST
87908: LIST
87909: LIST
87910: LIST
87911: LIST
87912: LIST
87913: LIST
87914: LIST
87915: LIST
87916: LIST
87917: LIST
87918: LIST
87919: LIST
87920: LIST
87921: LIST
87922: LIST
87923: LIST
87924: LIST
87925: LIST
87926: LIST
87927: LIST
87928: LIST
87929: LIST
87930: LIST
87931: LIST
87932: LIST
87933: LIST
87934: LIST
87935: LIST
87936: LIST
87937: LIST
87938: LIST
87939: LIST
87940: LIST
87941: LIST
87942: LIST
87943: LIST
87944: LIST
87945: LIST
87946: LIST
87947: LIST
87948: ST_TO_ADDR
// end ; end ;
87949: GO 87952
87951: POP
// case btype of b_depot , b_warehouse :
87952: LD_VAR 0 1
87956: PUSH
87957: LD_INT 0
87959: DOUBLE
87960: EQUAL
87961: IFTRUE 87971
87963: LD_INT 1
87965: DOUBLE
87966: EQUAL
87967: IFTRUE 87971
87969: GO 88172
87971: POP
// case nation of nation_american :
87972: LD_VAR 0 5
87976: PUSH
87977: LD_INT 1
87979: DOUBLE
87980: EQUAL
87981: IFTRUE 87985
87983: GO 88041
87985: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
87986: LD_ADDR_VAR 0 9
87990: PUSH
87991: LD_VAR 0 11
87995: PUSH
87996: LD_VAR 0 12
88000: PUSH
88001: LD_VAR 0 13
88005: PUSH
88006: LD_VAR 0 14
88010: PUSH
88011: LD_VAR 0 15
88015: PUSH
88016: LD_VAR 0 16
88020: PUSH
88021: EMPTY
88022: LIST
88023: LIST
88024: LIST
88025: LIST
88026: LIST
88027: LIST
88028: PUSH
88029: LD_VAR 0 4
88033: PUSH
88034: LD_INT 1
88036: PLUS
88037: ARRAY
88038: ST_TO_ADDR
88039: GO 88170
88041: LD_INT 2
88043: DOUBLE
88044: EQUAL
88045: IFTRUE 88049
88047: GO 88105
88049: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
88050: LD_ADDR_VAR 0 9
88054: PUSH
88055: LD_VAR 0 17
88059: PUSH
88060: LD_VAR 0 18
88064: PUSH
88065: LD_VAR 0 19
88069: PUSH
88070: LD_VAR 0 20
88074: PUSH
88075: LD_VAR 0 21
88079: PUSH
88080: LD_VAR 0 22
88084: PUSH
88085: EMPTY
88086: LIST
88087: LIST
88088: LIST
88089: LIST
88090: LIST
88091: LIST
88092: PUSH
88093: LD_VAR 0 4
88097: PUSH
88098: LD_INT 1
88100: PLUS
88101: ARRAY
88102: ST_TO_ADDR
88103: GO 88170
88105: LD_INT 3
88107: DOUBLE
88108: EQUAL
88109: IFTRUE 88113
88111: GO 88169
88113: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
88114: LD_ADDR_VAR 0 9
88118: PUSH
88119: LD_VAR 0 23
88123: PUSH
88124: LD_VAR 0 24
88128: PUSH
88129: LD_VAR 0 25
88133: PUSH
88134: LD_VAR 0 26
88138: PUSH
88139: LD_VAR 0 27
88143: PUSH
88144: LD_VAR 0 28
88148: PUSH
88149: EMPTY
88150: LIST
88151: LIST
88152: LIST
88153: LIST
88154: LIST
88155: LIST
88156: PUSH
88157: LD_VAR 0 4
88161: PUSH
88162: LD_INT 1
88164: PLUS
88165: ARRAY
88166: ST_TO_ADDR
88167: GO 88170
88169: POP
88170: GO 88725
88172: LD_INT 2
88174: DOUBLE
88175: EQUAL
88176: IFTRUE 88186
88178: LD_INT 3
88180: DOUBLE
88181: EQUAL
88182: IFTRUE 88186
88184: GO 88242
88186: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
88187: LD_ADDR_VAR 0 9
88191: PUSH
88192: LD_VAR 0 29
88196: PUSH
88197: LD_VAR 0 30
88201: PUSH
88202: LD_VAR 0 31
88206: PUSH
88207: LD_VAR 0 32
88211: PUSH
88212: LD_VAR 0 33
88216: PUSH
88217: LD_VAR 0 34
88221: PUSH
88222: EMPTY
88223: LIST
88224: LIST
88225: LIST
88226: LIST
88227: LIST
88228: LIST
88229: PUSH
88230: LD_VAR 0 4
88234: PUSH
88235: LD_INT 1
88237: PLUS
88238: ARRAY
88239: ST_TO_ADDR
88240: GO 88725
88242: LD_INT 16
88244: DOUBLE
88245: EQUAL
88246: IFTRUE 88304
88248: LD_INT 17
88250: DOUBLE
88251: EQUAL
88252: IFTRUE 88304
88254: LD_INT 18
88256: DOUBLE
88257: EQUAL
88258: IFTRUE 88304
88260: LD_INT 19
88262: DOUBLE
88263: EQUAL
88264: IFTRUE 88304
88266: LD_INT 22
88268: DOUBLE
88269: EQUAL
88270: IFTRUE 88304
88272: LD_INT 20
88274: DOUBLE
88275: EQUAL
88276: IFTRUE 88304
88278: LD_INT 21
88280: DOUBLE
88281: EQUAL
88282: IFTRUE 88304
88284: LD_INT 23
88286: DOUBLE
88287: EQUAL
88288: IFTRUE 88304
88290: LD_INT 24
88292: DOUBLE
88293: EQUAL
88294: IFTRUE 88304
88296: LD_INT 25
88298: DOUBLE
88299: EQUAL
88300: IFTRUE 88304
88302: GO 88360
88304: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
88305: LD_ADDR_VAR 0 9
88309: PUSH
88310: LD_VAR 0 35
88314: PUSH
88315: LD_VAR 0 36
88319: PUSH
88320: LD_VAR 0 37
88324: PUSH
88325: LD_VAR 0 38
88329: PUSH
88330: LD_VAR 0 39
88334: PUSH
88335: LD_VAR 0 40
88339: PUSH
88340: EMPTY
88341: LIST
88342: LIST
88343: LIST
88344: LIST
88345: LIST
88346: LIST
88347: PUSH
88348: LD_VAR 0 4
88352: PUSH
88353: LD_INT 1
88355: PLUS
88356: ARRAY
88357: ST_TO_ADDR
88358: GO 88725
88360: LD_INT 6
88362: DOUBLE
88363: EQUAL
88364: IFTRUE 88416
88366: LD_INT 7
88368: DOUBLE
88369: EQUAL
88370: IFTRUE 88416
88372: LD_INT 8
88374: DOUBLE
88375: EQUAL
88376: IFTRUE 88416
88378: LD_INT 13
88380: DOUBLE
88381: EQUAL
88382: IFTRUE 88416
88384: LD_INT 12
88386: DOUBLE
88387: EQUAL
88388: IFTRUE 88416
88390: LD_INT 15
88392: DOUBLE
88393: EQUAL
88394: IFTRUE 88416
88396: LD_INT 11
88398: DOUBLE
88399: EQUAL
88400: IFTRUE 88416
88402: LD_INT 14
88404: DOUBLE
88405: EQUAL
88406: IFTRUE 88416
88408: LD_INT 10
88410: DOUBLE
88411: EQUAL
88412: IFTRUE 88416
88414: GO 88472
88416: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
88417: LD_ADDR_VAR 0 9
88421: PUSH
88422: LD_VAR 0 41
88426: PUSH
88427: LD_VAR 0 42
88431: PUSH
88432: LD_VAR 0 43
88436: PUSH
88437: LD_VAR 0 44
88441: PUSH
88442: LD_VAR 0 45
88446: PUSH
88447: LD_VAR 0 46
88451: PUSH
88452: EMPTY
88453: LIST
88454: LIST
88455: LIST
88456: LIST
88457: LIST
88458: LIST
88459: PUSH
88460: LD_VAR 0 4
88464: PUSH
88465: LD_INT 1
88467: PLUS
88468: ARRAY
88469: ST_TO_ADDR
88470: GO 88725
88472: LD_INT 36
88474: DOUBLE
88475: EQUAL
88476: IFTRUE 88480
88478: GO 88536
88480: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
88481: LD_ADDR_VAR 0 9
88485: PUSH
88486: LD_VAR 0 47
88490: PUSH
88491: LD_VAR 0 48
88495: PUSH
88496: LD_VAR 0 49
88500: PUSH
88501: LD_VAR 0 50
88505: PUSH
88506: LD_VAR 0 51
88510: PUSH
88511: LD_VAR 0 52
88515: PUSH
88516: EMPTY
88517: LIST
88518: LIST
88519: LIST
88520: LIST
88521: LIST
88522: LIST
88523: PUSH
88524: LD_VAR 0 4
88528: PUSH
88529: LD_INT 1
88531: PLUS
88532: ARRAY
88533: ST_TO_ADDR
88534: GO 88725
88536: LD_INT 4
88538: DOUBLE
88539: EQUAL
88540: IFTRUE 88562
88542: LD_INT 5
88544: DOUBLE
88545: EQUAL
88546: IFTRUE 88562
88548: LD_INT 34
88550: DOUBLE
88551: EQUAL
88552: IFTRUE 88562
88554: LD_INT 37
88556: DOUBLE
88557: EQUAL
88558: IFTRUE 88562
88560: GO 88618
88562: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
88563: LD_ADDR_VAR 0 9
88567: PUSH
88568: LD_VAR 0 53
88572: PUSH
88573: LD_VAR 0 54
88577: PUSH
88578: LD_VAR 0 55
88582: PUSH
88583: LD_VAR 0 56
88587: PUSH
88588: LD_VAR 0 57
88592: PUSH
88593: LD_VAR 0 58
88597: PUSH
88598: EMPTY
88599: LIST
88600: LIST
88601: LIST
88602: LIST
88603: LIST
88604: LIST
88605: PUSH
88606: LD_VAR 0 4
88610: PUSH
88611: LD_INT 1
88613: PLUS
88614: ARRAY
88615: ST_TO_ADDR
88616: GO 88725
88618: LD_INT 31
88620: DOUBLE
88621: EQUAL
88622: IFTRUE 88668
88624: LD_INT 32
88626: DOUBLE
88627: EQUAL
88628: IFTRUE 88668
88630: LD_INT 33
88632: DOUBLE
88633: EQUAL
88634: IFTRUE 88668
88636: LD_INT 27
88638: DOUBLE
88639: EQUAL
88640: IFTRUE 88668
88642: LD_INT 26
88644: DOUBLE
88645: EQUAL
88646: IFTRUE 88668
88648: LD_INT 28
88650: DOUBLE
88651: EQUAL
88652: IFTRUE 88668
88654: LD_INT 29
88656: DOUBLE
88657: EQUAL
88658: IFTRUE 88668
88660: LD_INT 30
88662: DOUBLE
88663: EQUAL
88664: IFTRUE 88668
88666: GO 88724
88668: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
88669: LD_ADDR_VAR 0 9
88673: PUSH
88674: LD_VAR 0 59
88678: PUSH
88679: LD_VAR 0 60
88683: PUSH
88684: LD_VAR 0 61
88688: PUSH
88689: LD_VAR 0 62
88693: PUSH
88694: LD_VAR 0 63
88698: PUSH
88699: LD_VAR 0 64
88703: PUSH
88704: EMPTY
88705: LIST
88706: LIST
88707: LIST
88708: LIST
88709: LIST
88710: LIST
88711: PUSH
88712: LD_VAR 0 4
88716: PUSH
88717: LD_INT 1
88719: PLUS
88720: ARRAY
88721: ST_TO_ADDR
88722: GO 88725
88724: POP
// temp_list2 = [ ] ;
88725: LD_ADDR_VAR 0 10
88729: PUSH
88730: EMPTY
88731: ST_TO_ADDR
// for i in temp_list do
88732: LD_ADDR_VAR 0 8
88736: PUSH
88737: LD_VAR 0 9
88741: PUSH
88742: FOR_IN
88743: IFFALSE 88795
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
88745: LD_ADDR_VAR 0 10
88749: PUSH
88750: LD_VAR 0 10
88754: PUSH
88755: LD_VAR 0 8
88759: PUSH
88760: LD_INT 1
88762: ARRAY
88763: PUSH
88764: LD_VAR 0 2
88768: PLUS
88769: PUSH
88770: LD_VAR 0 8
88774: PUSH
88775: LD_INT 2
88777: ARRAY
88778: PUSH
88779: LD_VAR 0 3
88783: PLUS
88784: PUSH
88785: EMPTY
88786: LIST
88787: LIST
88788: PUSH
88789: EMPTY
88790: LIST
88791: ADD
88792: ST_TO_ADDR
88793: GO 88742
88795: POP
88796: POP
// result = temp_list2 ;
88797: LD_ADDR_VAR 0 7
88801: PUSH
88802: LD_VAR 0 10
88806: ST_TO_ADDR
// end ;
88807: LD_VAR 0 7
88811: RET
// export function EnemyInRange ( unit , dist ) ; begin
88812: LD_INT 0
88814: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
88815: LD_ADDR_VAR 0 3
88819: PUSH
88820: LD_VAR 0 1
88824: PPUSH
88825: CALL_OW 255
88829: PPUSH
88830: LD_VAR 0 1
88834: PPUSH
88835: CALL_OW 250
88839: PPUSH
88840: LD_VAR 0 1
88844: PPUSH
88845: CALL_OW 251
88849: PPUSH
88850: LD_VAR 0 2
88854: PPUSH
88855: CALL 62069 0 4
88859: PUSH
88860: LD_INT 4
88862: ARRAY
88863: ST_TO_ADDR
// end ;
88864: LD_VAR 0 3
88868: RET
// export function PlayerSeeMe ( unit ) ; begin
88869: LD_INT 0
88871: PPUSH
// result := See ( your_side , unit ) ;
88872: LD_ADDR_VAR 0 2
88876: PUSH
88877: LD_OWVAR 2
88881: PPUSH
88882: LD_VAR 0 1
88886: PPUSH
88887: CALL_OW 292
88891: ST_TO_ADDR
// end ;
88892: LD_VAR 0 2
88896: RET
// export function ReverseDir ( unit ) ; begin
88897: LD_INT 0
88899: PPUSH
// if not unit then
88900: LD_VAR 0 1
88904: NOT
88905: IFFALSE 88909
// exit ;
88907: GO 88932
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
88909: LD_ADDR_VAR 0 2
88913: PUSH
88914: LD_VAR 0 1
88918: PPUSH
88919: CALL_OW 254
88923: PUSH
88924: LD_INT 3
88926: PLUS
88927: PUSH
88928: LD_INT 6
88930: MOD
88931: ST_TO_ADDR
// end ;
88932: LD_VAR 0 2
88936: RET
// export function ReverseArray ( array ) ; var i ; begin
88937: LD_INT 0
88939: PPUSH
88940: PPUSH
// if not array then
88941: LD_VAR 0 1
88945: NOT
88946: IFFALSE 88950
// exit ;
88948: GO 89005
// result := [ ] ;
88950: LD_ADDR_VAR 0 2
88954: PUSH
88955: EMPTY
88956: ST_TO_ADDR
// for i := array downto 1 do
88957: LD_ADDR_VAR 0 3
88961: PUSH
88962: DOUBLE
88963: LD_VAR 0 1
88967: INC
88968: ST_TO_ADDR
88969: LD_INT 1
88971: PUSH
88972: FOR_DOWNTO
88973: IFFALSE 89003
// result := Join ( result , array [ i ] ) ;
88975: LD_ADDR_VAR 0 2
88979: PUSH
88980: LD_VAR 0 2
88984: PPUSH
88985: LD_VAR 0 1
88989: PUSH
88990: LD_VAR 0 3
88994: ARRAY
88995: PPUSH
88996: CALL 93847 0 2
89000: ST_TO_ADDR
89001: GO 88972
89003: POP
89004: POP
// end ;
89005: LD_VAR 0 2
89009: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
89010: LD_INT 0
89012: PPUSH
89013: PPUSH
89014: PPUSH
89015: PPUSH
89016: PPUSH
89017: PPUSH
// if not unit or not hexes then
89018: LD_VAR 0 1
89022: NOT
89023: IFTRUE 89032
89025: PUSH
89026: LD_VAR 0 2
89030: NOT
89031: OR
89032: IFFALSE 89036
// exit ;
89034: GO 89159
// dist := 9999 ;
89036: LD_ADDR_VAR 0 5
89040: PUSH
89041: LD_INT 9999
89043: ST_TO_ADDR
// for i = 1 to hexes do
89044: LD_ADDR_VAR 0 4
89048: PUSH
89049: DOUBLE
89050: LD_INT 1
89052: DEC
89053: ST_TO_ADDR
89054: LD_VAR 0 2
89058: PUSH
89059: FOR_TO
89060: IFFALSE 89147
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
89062: LD_ADDR_VAR 0 6
89066: PUSH
89067: LD_VAR 0 1
89071: PPUSH
89072: LD_VAR 0 2
89076: PUSH
89077: LD_VAR 0 4
89081: ARRAY
89082: PUSH
89083: LD_INT 1
89085: ARRAY
89086: PPUSH
89087: LD_VAR 0 2
89091: PUSH
89092: LD_VAR 0 4
89096: ARRAY
89097: PUSH
89098: LD_INT 2
89100: ARRAY
89101: PPUSH
89102: CALL_OW 297
89106: ST_TO_ADDR
// if tdist < dist then
89107: LD_VAR 0 6
89111: PUSH
89112: LD_VAR 0 5
89116: LESS
89117: IFFALSE 89145
// begin hex := hexes [ i ] ;
89119: LD_ADDR_VAR 0 8
89123: PUSH
89124: LD_VAR 0 2
89128: PUSH
89129: LD_VAR 0 4
89133: ARRAY
89134: ST_TO_ADDR
// dist := tdist ;
89135: LD_ADDR_VAR 0 5
89139: PUSH
89140: LD_VAR 0 6
89144: ST_TO_ADDR
// end ; end ;
89145: GO 89059
89147: POP
89148: POP
// result := hex ;
89149: LD_ADDR_VAR 0 3
89153: PUSH
89154: LD_VAR 0 8
89158: ST_TO_ADDR
// end ;
89159: LD_VAR 0 3
89163: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
89164: LD_INT 0
89166: PPUSH
89167: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
89168: LD_VAR 0 1
89172: NOT
89173: IFTRUE 89212
89175: PUSH
89176: LD_VAR 0 1
89180: PUSH
89181: LD_INT 21
89183: PUSH
89184: LD_INT 2
89186: PUSH
89187: EMPTY
89188: LIST
89189: LIST
89190: PUSH
89191: LD_INT 23
89193: PUSH
89194: LD_INT 2
89196: PUSH
89197: EMPTY
89198: LIST
89199: LIST
89200: PUSH
89201: EMPTY
89202: LIST
89203: LIST
89204: PPUSH
89205: CALL_OW 69
89209: IN
89210: NOT
89211: OR
89212: IFFALSE 89216
// exit ;
89214: GO 89263
// for i = 1 to 3 do
89216: LD_ADDR_VAR 0 3
89220: PUSH
89221: DOUBLE
89222: LD_INT 1
89224: DEC
89225: ST_TO_ADDR
89226: LD_INT 3
89228: PUSH
89229: FOR_TO
89230: IFFALSE 89261
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
89232: LD_VAR 0 1
89236: PPUSH
89237: CALL_OW 250
89241: PPUSH
89242: LD_VAR 0 1
89246: PPUSH
89247: CALL_OW 251
89251: PPUSH
89252: LD_INT 1
89254: PPUSH
89255: CALL_OW 453
89259: GO 89229
89261: POP
89262: POP
// end ;
89263: LD_VAR 0 2
89267: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
89268: LD_INT 0
89270: PPUSH
89271: PPUSH
89272: PPUSH
89273: PPUSH
89274: PPUSH
89275: PPUSH
// if not unit or not enemy_unit then
89276: LD_VAR 0 1
89280: NOT
89281: IFTRUE 89290
89283: PUSH
89284: LD_VAR 0 2
89288: NOT
89289: OR
89290: IFFALSE 89294
// exit ;
89292: GO 89765
// if GetLives ( i ) < 250 then
89294: LD_VAR 0 4
89298: PPUSH
89299: CALL_OW 256
89303: PUSH
89304: LD_INT 250
89306: LESS
89307: IFFALSE 89320
// begin ComAutodestruct ( i ) ;
89309: LD_VAR 0 4
89313: PPUSH
89314: CALL 89164 0 1
// exit ;
89318: GO 89765
// end ; x := GetX ( enemy_unit ) ;
89320: LD_ADDR_VAR 0 7
89324: PUSH
89325: LD_VAR 0 2
89329: PPUSH
89330: CALL_OW 250
89334: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
89335: LD_ADDR_VAR 0 8
89339: PUSH
89340: LD_VAR 0 2
89344: PPUSH
89345: CALL_OW 251
89349: ST_TO_ADDR
// if not x or not y then
89350: LD_VAR 0 7
89354: NOT
89355: IFTRUE 89364
89357: PUSH
89358: LD_VAR 0 8
89362: NOT
89363: OR
89364: IFFALSE 89368
// exit ;
89366: GO 89765
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
89368: LD_ADDR_VAR 0 6
89372: PUSH
89373: LD_VAR 0 7
89377: PPUSH
89378: LD_INT 0
89380: PPUSH
89381: LD_INT 4
89383: PPUSH
89384: CALL_OW 272
89388: PUSH
89389: LD_VAR 0 8
89393: PPUSH
89394: LD_INT 0
89396: PPUSH
89397: LD_INT 4
89399: PPUSH
89400: CALL_OW 273
89404: PUSH
89405: EMPTY
89406: LIST
89407: LIST
89408: PUSH
89409: LD_VAR 0 7
89413: PPUSH
89414: LD_INT 1
89416: PPUSH
89417: LD_INT 4
89419: PPUSH
89420: CALL_OW 272
89424: PUSH
89425: LD_VAR 0 8
89429: PPUSH
89430: LD_INT 1
89432: PPUSH
89433: LD_INT 4
89435: PPUSH
89436: CALL_OW 273
89440: PUSH
89441: EMPTY
89442: LIST
89443: LIST
89444: PUSH
89445: LD_VAR 0 7
89449: PPUSH
89450: LD_INT 2
89452: PPUSH
89453: LD_INT 4
89455: PPUSH
89456: CALL_OW 272
89460: PUSH
89461: LD_VAR 0 8
89465: PPUSH
89466: LD_INT 2
89468: PPUSH
89469: LD_INT 4
89471: PPUSH
89472: CALL_OW 273
89476: PUSH
89477: EMPTY
89478: LIST
89479: LIST
89480: PUSH
89481: LD_VAR 0 7
89485: PPUSH
89486: LD_INT 3
89488: PPUSH
89489: LD_INT 4
89491: PPUSH
89492: CALL_OW 272
89496: PUSH
89497: LD_VAR 0 8
89501: PPUSH
89502: LD_INT 3
89504: PPUSH
89505: LD_INT 4
89507: PPUSH
89508: CALL_OW 273
89512: PUSH
89513: EMPTY
89514: LIST
89515: LIST
89516: PUSH
89517: LD_VAR 0 7
89521: PPUSH
89522: LD_INT 4
89524: PPUSH
89525: LD_INT 4
89527: PPUSH
89528: CALL_OW 272
89532: PUSH
89533: LD_VAR 0 8
89537: PPUSH
89538: LD_INT 4
89540: PPUSH
89541: LD_INT 4
89543: PPUSH
89544: CALL_OW 273
89548: PUSH
89549: EMPTY
89550: LIST
89551: LIST
89552: PUSH
89553: LD_VAR 0 7
89557: PPUSH
89558: LD_INT 5
89560: PPUSH
89561: LD_INT 4
89563: PPUSH
89564: CALL_OW 272
89568: PUSH
89569: LD_VAR 0 8
89573: PPUSH
89574: LD_INT 5
89576: PPUSH
89577: LD_INT 4
89579: PPUSH
89580: CALL_OW 273
89584: PUSH
89585: EMPTY
89586: LIST
89587: LIST
89588: PUSH
89589: EMPTY
89590: LIST
89591: LIST
89592: LIST
89593: LIST
89594: LIST
89595: LIST
89596: ST_TO_ADDR
// for i = tmp downto 1 do
89597: LD_ADDR_VAR 0 4
89601: PUSH
89602: DOUBLE
89603: LD_VAR 0 6
89607: INC
89608: ST_TO_ADDR
89609: LD_INT 1
89611: PUSH
89612: FOR_DOWNTO
89613: IFFALSE 89716
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
89615: LD_VAR 0 6
89619: PUSH
89620: LD_VAR 0 4
89624: ARRAY
89625: PUSH
89626: LD_INT 1
89628: ARRAY
89629: PPUSH
89630: LD_VAR 0 6
89634: PUSH
89635: LD_VAR 0 4
89639: ARRAY
89640: PUSH
89641: LD_INT 2
89643: ARRAY
89644: PPUSH
89645: CALL_OW 488
89649: NOT
89650: IFTRUE 89692
89652: PUSH
89653: LD_VAR 0 6
89657: PUSH
89658: LD_VAR 0 4
89662: ARRAY
89663: PUSH
89664: LD_INT 1
89666: ARRAY
89667: PPUSH
89668: LD_VAR 0 6
89672: PUSH
89673: LD_VAR 0 4
89677: ARRAY
89678: PUSH
89679: LD_INT 2
89681: ARRAY
89682: PPUSH
89683: CALL_OW 428
89687: PUSH
89688: LD_INT 0
89690: NONEQUAL
89691: OR
89692: IFFALSE 89714
// tmp := Delete ( tmp , i ) ;
89694: LD_ADDR_VAR 0 6
89698: PUSH
89699: LD_VAR 0 6
89703: PPUSH
89704: LD_VAR 0 4
89708: PPUSH
89709: CALL_OW 3
89713: ST_TO_ADDR
89714: GO 89612
89716: POP
89717: POP
// j := GetClosestHex ( unit , tmp ) ;
89718: LD_ADDR_VAR 0 5
89722: PUSH
89723: LD_VAR 0 1
89727: PPUSH
89728: LD_VAR 0 6
89732: PPUSH
89733: CALL 89010 0 2
89737: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
89738: LD_VAR 0 1
89742: PPUSH
89743: LD_VAR 0 5
89747: PUSH
89748: LD_INT 1
89750: ARRAY
89751: PPUSH
89752: LD_VAR 0 5
89756: PUSH
89757: LD_INT 2
89759: ARRAY
89760: PPUSH
89761: CALL_OW 111
// end ;
89765: LD_VAR 0 3
89769: RET
// export function PrepareApemanSoldier ( ) ; begin
89770: LD_INT 0
89772: PPUSH
// uc_nation := 0 ;
89773: LD_ADDR_OWVAR 21
89777: PUSH
89778: LD_INT 0
89780: ST_TO_ADDR
// hc_sex := sex_male ;
89781: LD_ADDR_OWVAR 27
89785: PUSH
89786: LD_INT 1
89788: ST_TO_ADDR
// hc_name :=  ;
89789: LD_ADDR_OWVAR 26
89793: PUSH
89794: LD_STRING 
89796: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
89797: LD_ADDR_OWVAR 28
89801: PUSH
89802: LD_INT 15
89804: ST_TO_ADDR
// hc_gallery :=  ;
89805: LD_ADDR_OWVAR 33
89809: PUSH
89810: LD_STRING 
89812: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
89813: LD_ADDR_OWVAR 31
89817: PUSH
89818: LD_INT 0
89820: PPUSH
89821: LD_INT 3
89823: PPUSH
89824: CALL_OW 12
89828: PUSH
89829: LD_INT 0
89831: PPUSH
89832: LD_INT 3
89834: PPUSH
89835: CALL_OW 12
89839: PUSH
89840: LD_INT 0
89842: PUSH
89843: LD_INT 0
89845: PUSH
89846: EMPTY
89847: LIST
89848: LIST
89849: LIST
89850: LIST
89851: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
89852: LD_ADDR_OWVAR 29
89856: PUSH
89857: LD_INT 12
89859: PUSH
89860: LD_INT 12
89862: PUSH
89863: EMPTY
89864: LIST
89865: LIST
89866: ST_TO_ADDR
// end ;
89867: LD_VAR 0 1
89871: RET
// export function PrepareApemanEngineer ( ) ; begin
89872: LD_INT 0
89874: PPUSH
// uc_nation := 0 ;
89875: LD_ADDR_OWVAR 21
89879: PUSH
89880: LD_INT 0
89882: ST_TO_ADDR
// hc_sex := sex_male ;
89883: LD_ADDR_OWVAR 27
89887: PUSH
89888: LD_INT 1
89890: ST_TO_ADDR
// hc_name :=  ;
89891: LD_ADDR_OWVAR 26
89895: PUSH
89896: LD_STRING 
89898: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
89899: LD_ADDR_OWVAR 28
89903: PUSH
89904: LD_INT 16
89906: ST_TO_ADDR
// hc_gallery :=  ;
89907: LD_ADDR_OWVAR 33
89911: PUSH
89912: LD_STRING 
89914: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
89915: LD_ADDR_OWVAR 31
89919: PUSH
89920: LD_INT 0
89922: PPUSH
89923: LD_INT 3
89925: PPUSH
89926: CALL_OW 12
89930: PUSH
89931: LD_INT 0
89933: PPUSH
89934: LD_INT 3
89936: PPUSH
89937: CALL_OW 12
89941: PUSH
89942: LD_INT 0
89944: PUSH
89945: LD_INT 0
89947: PUSH
89948: EMPTY
89949: LIST
89950: LIST
89951: LIST
89952: LIST
89953: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
89954: LD_ADDR_OWVAR 29
89958: PUSH
89959: LD_INT 12
89961: PUSH
89962: LD_INT 12
89964: PUSH
89965: EMPTY
89966: LIST
89967: LIST
89968: ST_TO_ADDR
// end ;
89969: LD_VAR 0 1
89973: RET
// export function PrepareApeman ( agressivity ) ; begin
89974: LD_INT 0
89976: PPUSH
// uc_side := 0 ;
89977: LD_ADDR_OWVAR 20
89981: PUSH
89982: LD_INT 0
89984: ST_TO_ADDR
// uc_nation := 0 ;
89985: LD_ADDR_OWVAR 21
89989: PUSH
89990: LD_INT 0
89992: ST_TO_ADDR
// hc_sex := sex_male ;
89993: LD_ADDR_OWVAR 27
89997: PUSH
89998: LD_INT 1
90000: ST_TO_ADDR
// hc_class := class_apeman ;
90001: LD_ADDR_OWVAR 28
90005: PUSH
90006: LD_INT 12
90008: ST_TO_ADDR
// hc_gallery :=  ;
90009: LD_ADDR_OWVAR 33
90013: PUSH
90014: LD_STRING 
90016: ST_TO_ADDR
// hc_name :=  ;
90017: LD_ADDR_OWVAR 26
90021: PUSH
90022: LD_STRING 
90024: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
90025: LD_ADDR_OWVAR 29
90029: PUSH
90030: LD_INT 12
90032: PUSH
90033: LD_INT 12
90035: PUSH
90036: EMPTY
90037: LIST
90038: LIST
90039: ST_TO_ADDR
// if agressivity = 0 then
90040: LD_VAR 0 1
90044: PUSH
90045: LD_INT 0
90047: EQUAL
90048: IFFALSE 90060
// hc_agressivity := 0 else
90050: LD_ADDR_OWVAR 35
90054: PUSH
90055: LD_INT 0
90057: ST_TO_ADDR
90058: GO 90081
// hc_agressivity := rand ( - agressivity , agressivity ) ;
90060: LD_ADDR_OWVAR 35
90064: PUSH
90065: LD_VAR 0 1
90069: NEG
90070: PPUSH
90071: LD_VAR 0 1
90075: PPUSH
90076: CALL_OW 12
90080: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
90081: LD_ADDR_OWVAR 31
90085: PUSH
90086: LD_INT 0
90088: PPUSH
90089: LD_INT 3
90091: PPUSH
90092: CALL_OW 12
90096: PUSH
90097: LD_INT 0
90099: PPUSH
90100: LD_INT 3
90102: PPUSH
90103: CALL_OW 12
90107: PUSH
90108: LD_INT 0
90110: PUSH
90111: LD_INT 0
90113: PUSH
90114: EMPTY
90115: LIST
90116: LIST
90117: LIST
90118: LIST
90119: ST_TO_ADDR
// end ;
90120: LD_VAR 0 2
90124: RET
// export function PrepareTiger ( agressivity ) ; begin
90125: LD_INT 0
90127: PPUSH
// uc_side := 0 ;
90128: LD_ADDR_OWVAR 20
90132: PUSH
90133: LD_INT 0
90135: ST_TO_ADDR
// uc_nation := 0 ;
90136: LD_ADDR_OWVAR 21
90140: PUSH
90141: LD_INT 0
90143: ST_TO_ADDR
// InitHc ;
90144: CALL_OW 19
// hc_class := class_tiger ;
90148: LD_ADDR_OWVAR 28
90152: PUSH
90153: LD_INT 14
90155: ST_TO_ADDR
// hc_gallery :=  ;
90156: LD_ADDR_OWVAR 33
90160: PUSH
90161: LD_STRING 
90163: ST_TO_ADDR
// hc_name :=  ;
90164: LD_ADDR_OWVAR 26
90168: PUSH
90169: LD_STRING 
90171: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
90172: LD_ADDR_OWVAR 35
90176: PUSH
90177: LD_VAR 0 1
90181: NEG
90182: PPUSH
90183: LD_VAR 0 1
90187: PPUSH
90188: CALL_OW 12
90192: ST_TO_ADDR
// end ;
90193: LD_VAR 0 2
90197: RET
// export function PrepareEnchidna ( ) ; begin
90198: LD_INT 0
90200: PPUSH
// uc_side := 0 ;
90201: LD_ADDR_OWVAR 20
90205: PUSH
90206: LD_INT 0
90208: ST_TO_ADDR
// uc_nation := 0 ;
90209: LD_ADDR_OWVAR 21
90213: PUSH
90214: LD_INT 0
90216: ST_TO_ADDR
// InitHc ;
90217: CALL_OW 19
// hc_class := class_baggie ;
90221: LD_ADDR_OWVAR 28
90225: PUSH
90226: LD_INT 13
90228: ST_TO_ADDR
// hc_gallery :=  ;
90229: LD_ADDR_OWVAR 33
90233: PUSH
90234: LD_STRING 
90236: ST_TO_ADDR
// hc_name :=  ;
90237: LD_ADDR_OWVAR 26
90241: PUSH
90242: LD_STRING 
90244: ST_TO_ADDR
// end ;
90245: LD_VAR 0 1
90249: RET
// export function PrepareFrog ( ) ; begin
90250: LD_INT 0
90252: PPUSH
// uc_side := 0 ;
90253: LD_ADDR_OWVAR 20
90257: PUSH
90258: LD_INT 0
90260: ST_TO_ADDR
// uc_nation := 0 ;
90261: LD_ADDR_OWVAR 21
90265: PUSH
90266: LD_INT 0
90268: ST_TO_ADDR
// InitHc ;
90269: CALL_OW 19
// hc_class := class_frog ;
90273: LD_ADDR_OWVAR 28
90277: PUSH
90278: LD_INT 19
90280: ST_TO_ADDR
// hc_gallery :=  ;
90281: LD_ADDR_OWVAR 33
90285: PUSH
90286: LD_STRING 
90288: ST_TO_ADDR
// hc_name :=  ;
90289: LD_ADDR_OWVAR 26
90293: PUSH
90294: LD_STRING 
90296: ST_TO_ADDR
// end ;
90297: LD_VAR 0 1
90301: RET
// export function PrepareFish ( ) ; begin
90302: LD_INT 0
90304: PPUSH
// uc_side := 0 ;
90305: LD_ADDR_OWVAR 20
90309: PUSH
90310: LD_INT 0
90312: ST_TO_ADDR
// uc_nation := 0 ;
90313: LD_ADDR_OWVAR 21
90317: PUSH
90318: LD_INT 0
90320: ST_TO_ADDR
// InitHc ;
90321: CALL_OW 19
// hc_class := class_fish ;
90325: LD_ADDR_OWVAR 28
90329: PUSH
90330: LD_INT 20
90332: ST_TO_ADDR
// hc_gallery :=  ;
90333: LD_ADDR_OWVAR 33
90337: PUSH
90338: LD_STRING 
90340: ST_TO_ADDR
// hc_name :=  ;
90341: LD_ADDR_OWVAR 26
90345: PUSH
90346: LD_STRING 
90348: ST_TO_ADDR
// end ;
90349: LD_VAR 0 1
90353: RET
// export function PrepareBird ( ) ; begin
90354: LD_INT 0
90356: PPUSH
// uc_side := 0 ;
90357: LD_ADDR_OWVAR 20
90361: PUSH
90362: LD_INT 0
90364: ST_TO_ADDR
// uc_nation := 0 ;
90365: LD_ADDR_OWVAR 21
90369: PUSH
90370: LD_INT 0
90372: ST_TO_ADDR
// InitHc ;
90373: CALL_OW 19
// hc_class := class_phororhacos ;
90377: LD_ADDR_OWVAR 28
90381: PUSH
90382: LD_INT 18
90384: ST_TO_ADDR
// hc_gallery :=  ;
90385: LD_ADDR_OWVAR 33
90389: PUSH
90390: LD_STRING 
90392: ST_TO_ADDR
// hc_name :=  ;
90393: LD_ADDR_OWVAR 26
90397: PUSH
90398: LD_STRING 
90400: ST_TO_ADDR
// end ;
90401: LD_VAR 0 1
90405: RET
// export function PrepareHorse ( ) ; begin
90406: LD_INT 0
90408: PPUSH
// uc_side := 0 ;
90409: LD_ADDR_OWVAR 20
90413: PUSH
90414: LD_INT 0
90416: ST_TO_ADDR
// uc_nation := 0 ;
90417: LD_ADDR_OWVAR 21
90421: PUSH
90422: LD_INT 0
90424: ST_TO_ADDR
// InitHc ;
90425: CALL_OW 19
// hc_class := class_horse ;
90429: LD_ADDR_OWVAR 28
90433: PUSH
90434: LD_INT 21
90436: ST_TO_ADDR
// hc_gallery :=  ;
90437: LD_ADDR_OWVAR 33
90441: PUSH
90442: LD_STRING 
90444: ST_TO_ADDR
// hc_name :=  ;
90445: LD_ADDR_OWVAR 26
90449: PUSH
90450: LD_STRING 
90452: ST_TO_ADDR
// end ;
90453: LD_VAR 0 1
90457: RET
// export function PrepareMastodont ( ) ; begin
90458: LD_INT 0
90460: PPUSH
// uc_side := 0 ;
90461: LD_ADDR_OWVAR 20
90465: PUSH
90466: LD_INT 0
90468: ST_TO_ADDR
// uc_nation := 0 ;
90469: LD_ADDR_OWVAR 21
90473: PUSH
90474: LD_INT 0
90476: ST_TO_ADDR
// vc_chassis := class_mastodont ;
90477: LD_ADDR_OWVAR 37
90481: PUSH
90482: LD_INT 31
90484: ST_TO_ADDR
// vc_control := control_rider ;
90485: LD_ADDR_OWVAR 38
90489: PUSH
90490: LD_INT 4
90492: ST_TO_ADDR
// end ;
90493: LD_VAR 0 1
90497: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
90498: LD_INT 0
90500: PPUSH
90501: PPUSH
90502: PPUSH
// uc_side = 0 ;
90503: LD_ADDR_OWVAR 20
90507: PUSH
90508: LD_INT 0
90510: ST_TO_ADDR
// uc_nation = 0 ;
90511: LD_ADDR_OWVAR 21
90515: PUSH
90516: LD_INT 0
90518: ST_TO_ADDR
// InitHc_All ( ) ;
90519: CALL_OW 584
// InitVc ;
90523: CALL_OW 20
// if mastodonts then
90527: LD_VAR 0 6
90531: IFFALSE 90598
// for i = 1 to mastodonts do
90533: LD_ADDR_VAR 0 11
90537: PUSH
90538: DOUBLE
90539: LD_INT 1
90541: DEC
90542: ST_TO_ADDR
90543: LD_VAR 0 6
90547: PUSH
90548: FOR_TO
90549: IFFALSE 90596
// begin vc_chassis := 31 ;
90551: LD_ADDR_OWVAR 37
90555: PUSH
90556: LD_INT 31
90558: ST_TO_ADDR
// vc_control := control_rider ;
90559: LD_ADDR_OWVAR 38
90563: PUSH
90564: LD_INT 4
90566: ST_TO_ADDR
// animal := CreateVehicle ;
90567: LD_ADDR_VAR 0 12
90571: PUSH
90572: CALL_OW 45
90576: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
90577: LD_VAR 0 12
90581: PPUSH
90582: LD_VAR 0 8
90586: PPUSH
90587: LD_INT 0
90589: PPUSH
90590: CALL 92740 0 3
// end ;
90594: GO 90548
90596: POP
90597: POP
// if horses then
90598: LD_VAR 0 5
90602: IFFALSE 90669
// for i = 1 to horses do
90604: LD_ADDR_VAR 0 11
90608: PUSH
90609: DOUBLE
90610: LD_INT 1
90612: DEC
90613: ST_TO_ADDR
90614: LD_VAR 0 5
90618: PUSH
90619: FOR_TO
90620: IFFALSE 90667
// begin hc_class := 21 ;
90622: LD_ADDR_OWVAR 28
90626: PUSH
90627: LD_INT 21
90629: ST_TO_ADDR
// hc_gallery :=  ;
90630: LD_ADDR_OWVAR 33
90634: PUSH
90635: LD_STRING 
90637: ST_TO_ADDR
// animal := CreateHuman ;
90638: LD_ADDR_VAR 0 12
90642: PUSH
90643: CALL_OW 44
90647: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
90648: LD_VAR 0 12
90652: PPUSH
90653: LD_VAR 0 8
90657: PPUSH
90658: LD_INT 0
90660: PPUSH
90661: CALL 92740 0 3
// end ;
90665: GO 90619
90667: POP
90668: POP
// if birds then
90669: LD_VAR 0 1
90673: IFFALSE 90740
// for i = 1 to birds do
90675: LD_ADDR_VAR 0 11
90679: PUSH
90680: DOUBLE
90681: LD_INT 1
90683: DEC
90684: ST_TO_ADDR
90685: LD_VAR 0 1
90689: PUSH
90690: FOR_TO
90691: IFFALSE 90738
// begin hc_class := 18 ;
90693: LD_ADDR_OWVAR 28
90697: PUSH
90698: LD_INT 18
90700: ST_TO_ADDR
// hc_gallery =  ;
90701: LD_ADDR_OWVAR 33
90705: PUSH
90706: LD_STRING 
90708: ST_TO_ADDR
// animal := CreateHuman ;
90709: LD_ADDR_VAR 0 12
90713: PUSH
90714: CALL_OW 44
90718: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
90719: LD_VAR 0 12
90723: PPUSH
90724: LD_VAR 0 8
90728: PPUSH
90729: LD_INT 0
90731: PPUSH
90732: CALL 92740 0 3
// end ;
90736: GO 90690
90738: POP
90739: POP
// if tigers then
90740: LD_VAR 0 2
90744: IFFALSE 90828
// for i = 1 to tigers do
90746: LD_ADDR_VAR 0 11
90750: PUSH
90751: DOUBLE
90752: LD_INT 1
90754: DEC
90755: ST_TO_ADDR
90756: LD_VAR 0 2
90760: PUSH
90761: FOR_TO
90762: IFFALSE 90826
// begin hc_class = class_tiger ;
90764: LD_ADDR_OWVAR 28
90768: PUSH
90769: LD_INT 14
90771: ST_TO_ADDR
// hc_gallery =  ;
90772: LD_ADDR_OWVAR 33
90776: PUSH
90777: LD_STRING 
90779: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
90780: LD_ADDR_OWVAR 35
90784: PUSH
90785: LD_INT 7
90787: NEG
90788: PPUSH
90789: LD_INT 7
90791: PPUSH
90792: CALL_OW 12
90796: ST_TO_ADDR
// animal := CreateHuman ;
90797: LD_ADDR_VAR 0 12
90801: PUSH
90802: CALL_OW 44
90806: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
90807: LD_VAR 0 12
90811: PPUSH
90812: LD_VAR 0 8
90816: PPUSH
90817: LD_INT 0
90819: PPUSH
90820: CALL 92740 0 3
// end ;
90824: GO 90761
90826: POP
90827: POP
// if apemans then
90828: LD_VAR 0 3
90832: IFFALSE 90955
// for i = 1 to apemans do
90834: LD_ADDR_VAR 0 11
90838: PUSH
90839: DOUBLE
90840: LD_INT 1
90842: DEC
90843: ST_TO_ADDR
90844: LD_VAR 0 3
90848: PUSH
90849: FOR_TO
90850: IFFALSE 90953
// begin hc_class = class_apeman ;
90852: LD_ADDR_OWVAR 28
90856: PUSH
90857: LD_INT 12
90859: ST_TO_ADDR
// hc_gallery =  ;
90860: LD_ADDR_OWVAR 33
90864: PUSH
90865: LD_STRING 
90867: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
90868: LD_ADDR_OWVAR 35
90872: PUSH
90873: LD_INT 2
90875: NEG
90876: PPUSH
90877: LD_INT 2
90879: PPUSH
90880: CALL_OW 12
90884: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
90885: LD_ADDR_OWVAR 31
90889: PUSH
90890: LD_INT 1
90892: PPUSH
90893: LD_INT 3
90895: PPUSH
90896: CALL_OW 12
90900: PUSH
90901: LD_INT 1
90903: PPUSH
90904: LD_INT 3
90906: PPUSH
90907: CALL_OW 12
90911: PUSH
90912: LD_INT 0
90914: PUSH
90915: LD_INT 0
90917: PUSH
90918: EMPTY
90919: LIST
90920: LIST
90921: LIST
90922: LIST
90923: ST_TO_ADDR
// animal := CreateHuman ;
90924: LD_ADDR_VAR 0 12
90928: PUSH
90929: CALL_OW 44
90933: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
90934: LD_VAR 0 12
90938: PPUSH
90939: LD_VAR 0 8
90943: PPUSH
90944: LD_INT 0
90946: PPUSH
90947: CALL 92740 0 3
// end ;
90951: GO 90849
90953: POP
90954: POP
// if enchidnas then
90955: LD_VAR 0 4
90959: IFFALSE 91026
// for i = 1 to enchidnas do
90961: LD_ADDR_VAR 0 11
90965: PUSH
90966: DOUBLE
90967: LD_INT 1
90969: DEC
90970: ST_TO_ADDR
90971: LD_VAR 0 4
90975: PUSH
90976: FOR_TO
90977: IFFALSE 91024
// begin hc_class = 13 ;
90979: LD_ADDR_OWVAR 28
90983: PUSH
90984: LD_INT 13
90986: ST_TO_ADDR
// hc_gallery =  ;
90987: LD_ADDR_OWVAR 33
90991: PUSH
90992: LD_STRING 
90994: ST_TO_ADDR
// animal := CreateHuman ;
90995: LD_ADDR_VAR 0 12
90999: PUSH
91000: CALL_OW 44
91004: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
91005: LD_VAR 0 12
91009: PPUSH
91010: LD_VAR 0 8
91014: PPUSH
91015: LD_INT 0
91017: PPUSH
91018: CALL 92740 0 3
// end ;
91022: GO 90976
91024: POP
91025: POP
// if fishes then
91026: LD_VAR 0 7
91030: IFFALSE 91097
// for i = 1 to fishes do
91032: LD_ADDR_VAR 0 11
91036: PUSH
91037: DOUBLE
91038: LD_INT 1
91040: DEC
91041: ST_TO_ADDR
91042: LD_VAR 0 7
91046: PUSH
91047: FOR_TO
91048: IFFALSE 91095
// begin hc_class = 20 ;
91050: LD_ADDR_OWVAR 28
91054: PUSH
91055: LD_INT 20
91057: ST_TO_ADDR
// hc_gallery =  ;
91058: LD_ADDR_OWVAR 33
91062: PUSH
91063: LD_STRING 
91065: ST_TO_ADDR
// animal := CreateHuman ;
91066: LD_ADDR_VAR 0 12
91070: PUSH
91071: CALL_OW 44
91075: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
91076: LD_VAR 0 12
91080: PPUSH
91081: LD_VAR 0 9
91085: PPUSH
91086: LD_INT 0
91088: PPUSH
91089: CALL 92740 0 3
// end ;
91093: GO 91047
91095: POP
91096: POP
// end ;
91097: LD_VAR 0 10
91101: RET
// export function WantHeal ( sci , unit ) ; begin
91102: LD_INT 0
91104: PPUSH
// if GetTaskList ( sci ) > 0 then
91105: LD_VAR 0 1
91109: PPUSH
91110: CALL_OW 437
91114: PUSH
91115: LD_INT 0
91117: GREATER
91118: IFFALSE 91190
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
91120: LD_VAR 0 1
91124: PPUSH
91125: CALL_OW 437
91129: PUSH
91130: LD_INT 1
91132: ARRAY
91133: PUSH
91134: LD_INT 1
91136: ARRAY
91137: PUSH
91138: LD_STRING l
91140: EQUAL
91141: IFFALSE 91168
91143: PUSH
91144: LD_VAR 0 1
91148: PPUSH
91149: CALL_OW 437
91153: PUSH
91154: LD_INT 1
91156: ARRAY
91157: PUSH
91158: LD_INT 4
91160: ARRAY
91161: PUSH
91162: LD_VAR 0 2
91166: EQUAL
91167: AND
91168: IFFALSE 91180
// result := true else
91170: LD_ADDR_VAR 0 3
91174: PUSH
91175: LD_INT 1
91177: ST_TO_ADDR
91178: GO 91188
// result := false ;
91180: LD_ADDR_VAR 0 3
91184: PUSH
91185: LD_INT 0
91187: ST_TO_ADDR
// end else
91188: GO 91198
// result := false ;
91190: LD_ADDR_VAR 0 3
91194: PUSH
91195: LD_INT 0
91197: ST_TO_ADDR
// end ;
91198: LD_VAR 0 3
91202: RET
// export function HealTarget ( sci ) ; begin
91203: LD_INT 0
91205: PPUSH
// if not sci then
91206: LD_VAR 0 1
91210: NOT
91211: IFFALSE 91215
// exit ;
91213: GO 91280
// result := 0 ;
91215: LD_ADDR_VAR 0 2
91219: PUSH
91220: LD_INT 0
91222: ST_TO_ADDR
// if GetTaskList ( sci ) then
91223: LD_VAR 0 1
91227: PPUSH
91228: CALL_OW 437
91232: IFFALSE 91280
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
91234: LD_VAR 0 1
91238: PPUSH
91239: CALL_OW 437
91243: PUSH
91244: LD_INT 1
91246: ARRAY
91247: PUSH
91248: LD_INT 1
91250: ARRAY
91251: PUSH
91252: LD_STRING l
91254: EQUAL
91255: IFFALSE 91280
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
91257: LD_ADDR_VAR 0 2
91261: PUSH
91262: LD_VAR 0 1
91266: PPUSH
91267: CALL_OW 437
91271: PUSH
91272: LD_INT 1
91274: ARRAY
91275: PUSH
91276: LD_INT 4
91278: ARRAY
91279: ST_TO_ADDR
// end ;
91280: LD_VAR 0 2
91284: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
91285: LD_INT 0
91287: PPUSH
91288: PPUSH
91289: PPUSH
91290: PPUSH
// if not base_units then
91291: LD_VAR 0 1
91295: NOT
91296: IFFALSE 91300
// exit ;
91298: GO 91387
// result := false ;
91300: LD_ADDR_VAR 0 2
91304: PUSH
91305: LD_INT 0
91307: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
91308: LD_ADDR_VAR 0 5
91312: PUSH
91313: LD_VAR 0 1
91317: PPUSH
91318: LD_INT 21
91320: PUSH
91321: LD_INT 3
91323: PUSH
91324: EMPTY
91325: LIST
91326: LIST
91327: PPUSH
91328: CALL_OW 72
91332: ST_TO_ADDR
// if not tmp then
91333: LD_VAR 0 5
91337: NOT
91338: IFFALSE 91342
// exit ;
91340: GO 91387
// for i in tmp do
91342: LD_ADDR_VAR 0 3
91346: PUSH
91347: LD_VAR 0 5
91351: PUSH
91352: FOR_IN
91353: IFFALSE 91385
// begin result := EnemyInRange ( i , 22 ) ;
91355: LD_ADDR_VAR 0 2
91359: PUSH
91360: LD_VAR 0 3
91364: PPUSH
91365: LD_INT 22
91367: PPUSH
91368: CALL 88812 0 2
91372: ST_TO_ADDR
// if result then
91373: LD_VAR 0 2
91377: IFFALSE 91383
// exit ;
91379: POP
91380: POP
91381: GO 91387
// end ;
91383: GO 91352
91385: POP
91386: POP
// end ;
91387: LD_VAR 0 2
91391: RET
// export function FilterByTag ( units , tag ) ; begin
91392: LD_INT 0
91394: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
91395: LD_ADDR_VAR 0 3
91399: PUSH
91400: LD_VAR 0 1
91404: PPUSH
91405: LD_INT 120
91407: PUSH
91408: LD_VAR 0 2
91412: PUSH
91413: EMPTY
91414: LIST
91415: LIST
91416: PPUSH
91417: CALL_OW 72
91421: ST_TO_ADDR
// end ;
91422: LD_VAR 0 3
91426: RET
// export function IsDriver ( un ) ; begin
91427: LD_INT 0
91429: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
91430: LD_ADDR_VAR 0 2
91434: PUSH
91435: LD_VAR 0 1
91439: PUSH
91440: LD_INT 55
91442: PUSH
91443: EMPTY
91444: LIST
91445: PPUSH
91446: CALL_OW 69
91450: IN
91451: ST_TO_ADDR
// end ;
91452: LD_VAR 0 2
91456: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
91457: LD_INT 0
91459: PPUSH
91460: PPUSH
// list := [ ] ;
91461: LD_ADDR_VAR 0 5
91465: PUSH
91466: EMPTY
91467: ST_TO_ADDR
// case d of 0 :
91468: LD_VAR 0 3
91472: PUSH
91473: LD_INT 0
91475: DOUBLE
91476: EQUAL
91477: IFTRUE 91481
91479: GO 91614
91481: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
91482: LD_ADDR_VAR 0 5
91486: PUSH
91487: LD_VAR 0 1
91491: PUSH
91492: LD_INT 4
91494: MINUS
91495: PUSH
91496: LD_VAR 0 2
91500: PUSH
91501: LD_INT 4
91503: MINUS
91504: PUSH
91505: LD_INT 2
91507: PUSH
91508: EMPTY
91509: LIST
91510: LIST
91511: LIST
91512: PUSH
91513: LD_VAR 0 1
91517: PUSH
91518: LD_INT 3
91520: MINUS
91521: PUSH
91522: LD_VAR 0 2
91526: PUSH
91527: LD_INT 1
91529: PUSH
91530: EMPTY
91531: LIST
91532: LIST
91533: LIST
91534: PUSH
91535: LD_VAR 0 1
91539: PUSH
91540: LD_INT 4
91542: PLUS
91543: PUSH
91544: LD_VAR 0 2
91548: PUSH
91549: LD_INT 4
91551: PUSH
91552: EMPTY
91553: LIST
91554: LIST
91555: LIST
91556: PUSH
91557: LD_VAR 0 1
91561: PUSH
91562: LD_INT 3
91564: PLUS
91565: PUSH
91566: LD_VAR 0 2
91570: PUSH
91571: LD_INT 3
91573: PLUS
91574: PUSH
91575: LD_INT 5
91577: PUSH
91578: EMPTY
91579: LIST
91580: LIST
91581: LIST
91582: PUSH
91583: LD_VAR 0 1
91587: PUSH
91588: LD_VAR 0 2
91592: PUSH
91593: LD_INT 4
91595: PLUS
91596: PUSH
91597: LD_INT 0
91599: PUSH
91600: EMPTY
91601: LIST
91602: LIST
91603: LIST
91604: PUSH
91605: EMPTY
91606: LIST
91607: LIST
91608: LIST
91609: LIST
91610: LIST
91611: ST_TO_ADDR
// end ; 1 :
91612: GO 92312
91614: LD_INT 1
91616: DOUBLE
91617: EQUAL
91618: IFTRUE 91622
91620: GO 91755
91622: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
91623: LD_ADDR_VAR 0 5
91627: PUSH
91628: LD_VAR 0 1
91632: PUSH
91633: LD_VAR 0 2
91637: PUSH
91638: LD_INT 4
91640: MINUS
91641: PUSH
91642: LD_INT 3
91644: PUSH
91645: EMPTY
91646: LIST
91647: LIST
91648: LIST
91649: PUSH
91650: LD_VAR 0 1
91654: PUSH
91655: LD_INT 3
91657: MINUS
91658: PUSH
91659: LD_VAR 0 2
91663: PUSH
91664: LD_INT 3
91666: MINUS
91667: PUSH
91668: LD_INT 2
91670: PUSH
91671: EMPTY
91672: LIST
91673: LIST
91674: LIST
91675: PUSH
91676: LD_VAR 0 1
91680: PUSH
91681: LD_INT 4
91683: MINUS
91684: PUSH
91685: LD_VAR 0 2
91689: PUSH
91690: LD_INT 1
91692: PUSH
91693: EMPTY
91694: LIST
91695: LIST
91696: LIST
91697: PUSH
91698: LD_VAR 0 1
91702: PUSH
91703: LD_VAR 0 2
91707: PUSH
91708: LD_INT 3
91710: PLUS
91711: PUSH
91712: LD_INT 0
91714: PUSH
91715: EMPTY
91716: LIST
91717: LIST
91718: LIST
91719: PUSH
91720: LD_VAR 0 1
91724: PUSH
91725: LD_INT 4
91727: PLUS
91728: PUSH
91729: LD_VAR 0 2
91733: PUSH
91734: LD_INT 4
91736: PLUS
91737: PUSH
91738: LD_INT 5
91740: PUSH
91741: EMPTY
91742: LIST
91743: LIST
91744: LIST
91745: PUSH
91746: EMPTY
91747: LIST
91748: LIST
91749: LIST
91750: LIST
91751: LIST
91752: ST_TO_ADDR
// end ; 2 :
91753: GO 92312
91755: LD_INT 2
91757: DOUBLE
91758: EQUAL
91759: IFTRUE 91763
91761: GO 91892
91763: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
91764: LD_ADDR_VAR 0 5
91768: PUSH
91769: LD_VAR 0 1
91773: PUSH
91774: LD_VAR 0 2
91778: PUSH
91779: LD_INT 3
91781: MINUS
91782: PUSH
91783: LD_INT 3
91785: PUSH
91786: EMPTY
91787: LIST
91788: LIST
91789: LIST
91790: PUSH
91791: LD_VAR 0 1
91795: PUSH
91796: LD_INT 4
91798: PLUS
91799: PUSH
91800: LD_VAR 0 2
91804: PUSH
91805: LD_INT 4
91807: PUSH
91808: EMPTY
91809: LIST
91810: LIST
91811: LIST
91812: PUSH
91813: LD_VAR 0 1
91817: PUSH
91818: LD_VAR 0 2
91822: PUSH
91823: LD_INT 4
91825: PLUS
91826: PUSH
91827: LD_INT 0
91829: PUSH
91830: EMPTY
91831: LIST
91832: LIST
91833: LIST
91834: PUSH
91835: LD_VAR 0 1
91839: PUSH
91840: LD_INT 3
91842: MINUS
91843: PUSH
91844: LD_VAR 0 2
91848: PUSH
91849: LD_INT 1
91851: PUSH
91852: EMPTY
91853: LIST
91854: LIST
91855: LIST
91856: PUSH
91857: LD_VAR 0 1
91861: PUSH
91862: LD_INT 4
91864: MINUS
91865: PUSH
91866: LD_VAR 0 2
91870: PUSH
91871: LD_INT 4
91873: MINUS
91874: PUSH
91875: LD_INT 2
91877: PUSH
91878: EMPTY
91879: LIST
91880: LIST
91881: LIST
91882: PUSH
91883: EMPTY
91884: LIST
91885: LIST
91886: LIST
91887: LIST
91888: LIST
91889: ST_TO_ADDR
// end ; 3 :
91890: GO 92312
91892: LD_INT 3
91894: DOUBLE
91895: EQUAL
91896: IFTRUE 91900
91898: GO 92033
91900: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
91901: LD_ADDR_VAR 0 5
91905: PUSH
91906: LD_VAR 0 1
91910: PUSH
91911: LD_INT 3
91913: PLUS
91914: PUSH
91915: LD_VAR 0 2
91919: PUSH
91920: LD_INT 4
91922: PUSH
91923: EMPTY
91924: LIST
91925: LIST
91926: LIST
91927: PUSH
91928: LD_VAR 0 1
91932: PUSH
91933: LD_INT 4
91935: PLUS
91936: PUSH
91937: LD_VAR 0 2
91941: PUSH
91942: LD_INT 4
91944: PLUS
91945: PUSH
91946: LD_INT 5
91948: PUSH
91949: EMPTY
91950: LIST
91951: LIST
91952: LIST
91953: PUSH
91954: LD_VAR 0 1
91958: PUSH
91959: LD_INT 4
91961: MINUS
91962: PUSH
91963: LD_VAR 0 2
91967: PUSH
91968: LD_INT 1
91970: PUSH
91971: EMPTY
91972: LIST
91973: LIST
91974: LIST
91975: PUSH
91976: LD_VAR 0 1
91980: PUSH
91981: LD_VAR 0 2
91985: PUSH
91986: LD_INT 4
91988: MINUS
91989: PUSH
91990: LD_INT 3
91992: PUSH
91993: EMPTY
91994: LIST
91995: LIST
91996: LIST
91997: PUSH
91998: LD_VAR 0 1
92002: PUSH
92003: LD_INT 3
92005: MINUS
92006: PUSH
92007: LD_VAR 0 2
92011: PUSH
92012: LD_INT 3
92014: MINUS
92015: PUSH
92016: LD_INT 2
92018: PUSH
92019: EMPTY
92020: LIST
92021: LIST
92022: LIST
92023: PUSH
92024: EMPTY
92025: LIST
92026: LIST
92027: LIST
92028: LIST
92029: LIST
92030: ST_TO_ADDR
// end ; 4 :
92031: GO 92312
92033: LD_INT 4
92035: DOUBLE
92036: EQUAL
92037: IFTRUE 92041
92039: GO 92174
92041: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
92042: LD_ADDR_VAR 0 5
92046: PUSH
92047: LD_VAR 0 1
92051: PUSH
92052: LD_VAR 0 2
92056: PUSH
92057: LD_INT 4
92059: PLUS
92060: PUSH
92061: LD_INT 0
92063: PUSH
92064: EMPTY
92065: LIST
92066: LIST
92067: LIST
92068: PUSH
92069: LD_VAR 0 1
92073: PUSH
92074: LD_INT 3
92076: PLUS
92077: PUSH
92078: LD_VAR 0 2
92082: PUSH
92083: LD_INT 3
92085: PLUS
92086: PUSH
92087: LD_INT 5
92089: PUSH
92090: EMPTY
92091: LIST
92092: LIST
92093: LIST
92094: PUSH
92095: LD_VAR 0 1
92099: PUSH
92100: LD_INT 4
92102: PLUS
92103: PUSH
92104: LD_VAR 0 2
92108: PUSH
92109: LD_INT 4
92111: PUSH
92112: EMPTY
92113: LIST
92114: LIST
92115: LIST
92116: PUSH
92117: LD_VAR 0 1
92121: PUSH
92122: LD_VAR 0 2
92126: PUSH
92127: LD_INT 3
92129: MINUS
92130: PUSH
92131: LD_INT 3
92133: PUSH
92134: EMPTY
92135: LIST
92136: LIST
92137: LIST
92138: PUSH
92139: LD_VAR 0 1
92143: PUSH
92144: LD_INT 4
92146: MINUS
92147: PUSH
92148: LD_VAR 0 2
92152: PUSH
92153: LD_INT 4
92155: MINUS
92156: PUSH
92157: LD_INT 2
92159: PUSH
92160: EMPTY
92161: LIST
92162: LIST
92163: LIST
92164: PUSH
92165: EMPTY
92166: LIST
92167: LIST
92168: LIST
92169: LIST
92170: LIST
92171: ST_TO_ADDR
// end ; 5 :
92172: GO 92312
92174: LD_INT 5
92176: DOUBLE
92177: EQUAL
92178: IFTRUE 92182
92180: GO 92311
92182: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
92183: LD_ADDR_VAR 0 5
92187: PUSH
92188: LD_VAR 0 1
92192: PUSH
92193: LD_INT 4
92195: MINUS
92196: PUSH
92197: LD_VAR 0 2
92201: PUSH
92202: LD_INT 1
92204: PUSH
92205: EMPTY
92206: LIST
92207: LIST
92208: LIST
92209: PUSH
92210: LD_VAR 0 1
92214: PUSH
92215: LD_VAR 0 2
92219: PUSH
92220: LD_INT 4
92222: MINUS
92223: PUSH
92224: LD_INT 3
92226: PUSH
92227: EMPTY
92228: LIST
92229: LIST
92230: LIST
92231: PUSH
92232: LD_VAR 0 1
92236: PUSH
92237: LD_INT 4
92239: PLUS
92240: PUSH
92241: LD_VAR 0 2
92245: PUSH
92246: LD_INT 4
92248: PLUS
92249: PUSH
92250: LD_INT 5
92252: PUSH
92253: EMPTY
92254: LIST
92255: LIST
92256: LIST
92257: PUSH
92258: LD_VAR 0 1
92262: PUSH
92263: LD_INT 3
92265: PLUS
92266: PUSH
92267: LD_VAR 0 2
92271: PUSH
92272: LD_INT 4
92274: PUSH
92275: EMPTY
92276: LIST
92277: LIST
92278: LIST
92279: PUSH
92280: LD_VAR 0 1
92284: PUSH
92285: LD_VAR 0 2
92289: PUSH
92290: LD_INT 3
92292: PLUS
92293: PUSH
92294: LD_INT 0
92296: PUSH
92297: EMPTY
92298: LIST
92299: LIST
92300: LIST
92301: PUSH
92302: EMPTY
92303: LIST
92304: LIST
92305: LIST
92306: LIST
92307: LIST
92308: ST_TO_ADDR
// end ; end ;
92309: GO 92312
92311: POP
// result := list ;
92312: LD_ADDR_VAR 0 4
92316: PUSH
92317: LD_VAR 0 5
92321: ST_TO_ADDR
// end ;
92322: LD_VAR 0 4
92326: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
92327: LD_INT 0
92329: PPUSH
92330: PPUSH
92331: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
92332: LD_VAR 0 1
92336: NOT
92337: IFTRUE 92365
92339: PUSH
92340: LD_VAR 0 2
92344: PUSH
92345: LD_INT 1
92347: PUSH
92348: LD_INT 2
92350: PUSH
92351: LD_INT 3
92353: PUSH
92354: LD_INT 4
92356: PUSH
92357: EMPTY
92358: LIST
92359: LIST
92360: LIST
92361: LIST
92362: IN
92363: NOT
92364: OR
92365: IFFALSE 92369
// exit ;
92367: GO 92452
// tmp := [ ] ;
92369: LD_ADDR_VAR 0 5
92373: PUSH
92374: EMPTY
92375: ST_TO_ADDR
// for i in units do
92376: LD_ADDR_VAR 0 4
92380: PUSH
92381: LD_VAR 0 1
92385: PUSH
92386: FOR_IN
92387: IFFALSE 92421
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
92389: LD_ADDR_VAR 0 5
92393: PUSH
92394: LD_VAR 0 5
92398: PPUSH
92399: LD_VAR 0 4
92403: PPUSH
92404: LD_VAR 0 2
92408: PPUSH
92409: CALL_OW 259
92413: PPUSH
92414: CALL 93847 0 2
92418: ST_TO_ADDR
92419: GO 92386
92421: POP
92422: POP
// if not tmp then
92423: LD_VAR 0 5
92427: NOT
92428: IFFALSE 92432
// exit ;
92430: GO 92452
// result := SortListByListDesc ( units , tmp ) ;
92432: LD_ADDR_VAR 0 3
92436: PUSH
92437: LD_VAR 0 1
92441: PPUSH
92442: LD_VAR 0 5
92446: PPUSH
92447: CALL_OW 77
92451: ST_TO_ADDR
// end ;
92452: LD_VAR 0 3
92456: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
92457: LD_INT 0
92459: PPUSH
92460: PPUSH
92461: PPUSH
// result := false ;
92462: LD_ADDR_VAR 0 3
92466: PUSH
92467: LD_INT 0
92469: ST_TO_ADDR
// if not building then
92470: LD_VAR 0 2
92474: NOT
92475: IFFALSE 92479
// exit ;
92477: GO 92623
// x := GetX ( building ) ;
92479: LD_ADDR_VAR 0 4
92483: PUSH
92484: LD_VAR 0 2
92488: PPUSH
92489: CALL_OW 250
92493: ST_TO_ADDR
// y := GetY ( building ) ;
92494: LD_ADDR_VAR 0 5
92498: PUSH
92499: LD_VAR 0 2
92503: PPUSH
92504: CALL_OW 251
92508: ST_TO_ADDR
// if not x or not y then
92509: LD_VAR 0 4
92513: NOT
92514: IFTRUE 92523
92516: PUSH
92517: LD_VAR 0 5
92521: NOT
92522: OR
92523: IFFALSE 92527
// exit ;
92525: GO 92623
// if GetTaskList ( unit ) then
92527: LD_VAR 0 1
92531: PPUSH
92532: CALL_OW 437
92536: IFFALSE 92623
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
92538: LD_STRING e
92540: PUSH
92541: LD_VAR 0 1
92545: PPUSH
92546: CALL_OW 437
92550: PUSH
92551: LD_INT 1
92553: ARRAY
92554: PUSH
92555: LD_INT 1
92557: ARRAY
92558: EQUAL
92559: IFFALSE 92586
92561: PUSH
92562: LD_VAR 0 4
92566: PUSH
92567: LD_VAR 0 1
92571: PPUSH
92572: CALL_OW 437
92576: PUSH
92577: LD_INT 1
92579: ARRAY
92580: PUSH
92581: LD_INT 2
92583: ARRAY
92584: EQUAL
92585: AND
92586: IFFALSE 92613
92588: PUSH
92589: LD_VAR 0 5
92593: PUSH
92594: LD_VAR 0 1
92598: PPUSH
92599: CALL_OW 437
92603: PUSH
92604: LD_INT 1
92606: ARRAY
92607: PUSH
92608: LD_INT 3
92610: ARRAY
92611: EQUAL
92612: AND
92613: IFFALSE 92623
// result := true end ;
92615: LD_ADDR_VAR 0 3
92619: PUSH
92620: LD_INT 1
92622: ST_TO_ADDR
// end ;
92623: LD_VAR 0 3
92627: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
92628: LD_INT 0
92630: PPUSH
// result := false ;
92631: LD_ADDR_VAR 0 4
92635: PUSH
92636: LD_INT 0
92638: ST_TO_ADDR
// if GetTaskList ( unit ) then
92639: LD_VAR 0 1
92643: PPUSH
92644: CALL_OW 437
92648: IFFALSE 92735
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
92650: LD_STRING M
92652: PUSH
92653: LD_VAR 0 1
92657: PPUSH
92658: CALL_OW 437
92662: PUSH
92663: LD_INT 1
92665: ARRAY
92666: PUSH
92667: LD_INT 1
92669: ARRAY
92670: EQUAL
92671: IFFALSE 92698
92673: PUSH
92674: LD_VAR 0 2
92678: PUSH
92679: LD_VAR 0 1
92683: PPUSH
92684: CALL_OW 437
92688: PUSH
92689: LD_INT 1
92691: ARRAY
92692: PUSH
92693: LD_INT 2
92695: ARRAY
92696: EQUAL
92697: AND
92698: IFFALSE 92725
92700: PUSH
92701: LD_VAR 0 3
92705: PUSH
92706: LD_VAR 0 1
92710: PPUSH
92711: CALL_OW 437
92715: PUSH
92716: LD_INT 1
92718: ARRAY
92719: PUSH
92720: LD_INT 3
92722: ARRAY
92723: EQUAL
92724: AND
92725: IFFALSE 92735
// result := true ;
92727: LD_ADDR_VAR 0 4
92731: PUSH
92732: LD_INT 1
92734: ST_TO_ADDR
// end ; end ;
92735: LD_VAR 0 4
92739: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
92740: LD_INT 0
92742: PPUSH
92743: PPUSH
92744: PPUSH
92745: PPUSH
// if not unit or not area then
92746: LD_VAR 0 1
92750: NOT
92751: IFTRUE 92760
92753: PUSH
92754: LD_VAR 0 2
92758: NOT
92759: OR
92760: IFFALSE 92764
// exit ;
92762: GO 92940
// tmp := AreaToList ( area , i ) ;
92764: LD_ADDR_VAR 0 6
92768: PUSH
92769: LD_VAR 0 2
92773: PPUSH
92774: LD_VAR 0 5
92778: PPUSH
92779: CALL_OW 517
92783: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
92784: LD_ADDR_VAR 0 5
92788: PUSH
92789: DOUBLE
92790: LD_INT 1
92792: DEC
92793: ST_TO_ADDR
92794: LD_VAR 0 6
92798: PUSH
92799: LD_INT 1
92801: ARRAY
92802: PUSH
92803: FOR_TO
92804: IFFALSE 92938
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
92806: LD_ADDR_VAR 0 7
92810: PUSH
92811: LD_VAR 0 6
92815: PUSH
92816: LD_INT 1
92818: ARRAY
92819: PUSH
92820: LD_VAR 0 5
92824: ARRAY
92825: PUSH
92826: LD_VAR 0 6
92830: PUSH
92831: LD_INT 2
92833: ARRAY
92834: PUSH
92835: LD_VAR 0 5
92839: ARRAY
92840: PUSH
92841: EMPTY
92842: LIST
92843: LIST
92844: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
92845: LD_INT 92
92847: PUSH
92848: LD_VAR 0 7
92852: PUSH
92853: LD_INT 1
92855: ARRAY
92856: PUSH
92857: LD_VAR 0 7
92861: PUSH
92862: LD_INT 2
92864: ARRAY
92865: PUSH
92866: LD_INT 2
92868: PUSH
92869: EMPTY
92870: LIST
92871: LIST
92872: LIST
92873: LIST
92874: PPUSH
92875: CALL_OW 69
92879: PUSH
92880: LD_INT 0
92882: EQUAL
92883: IFFALSE 92936
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
92885: LD_VAR 0 1
92889: PPUSH
92890: LD_VAR 0 7
92894: PUSH
92895: LD_INT 1
92897: ARRAY
92898: PPUSH
92899: LD_VAR 0 7
92903: PUSH
92904: LD_INT 2
92906: ARRAY
92907: PPUSH
92908: LD_VAR 0 3
92912: PPUSH
92913: CALL_OW 48
// result := IsPlaced ( unit ) ;
92917: LD_ADDR_VAR 0 4
92921: PUSH
92922: LD_VAR 0 1
92926: PPUSH
92927: CALL_OW 305
92931: ST_TO_ADDR
// exit ;
92932: POP
92933: POP
92934: GO 92940
// end ; end ;
92936: GO 92803
92938: POP
92939: POP
// end ;
92940: LD_VAR 0 4
92944: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
92945: LD_INT 0
92947: PPUSH
92948: PPUSH
92949: PPUSH
// if not side or side > 8 then
92950: LD_VAR 0 1
92954: NOT
92955: IFTRUE 92967
92957: PUSH
92958: LD_VAR 0 1
92962: PUSH
92963: LD_INT 8
92965: GREATER
92966: OR
92967: IFFALSE 92971
// exit ;
92969: GO 93158
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
92971: LD_ADDR_VAR 0 4
92975: PUSH
92976: LD_INT 22
92978: PUSH
92979: LD_VAR 0 1
92983: PUSH
92984: EMPTY
92985: LIST
92986: LIST
92987: PUSH
92988: LD_INT 21
92990: PUSH
92991: LD_INT 3
92993: PUSH
92994: EMPTY
92995: LIST
92996: LIST
92997: PUSH
92998: EMPTY
92999: LIST
93000: LIST
93001: PPUSH
93002: CALL_OW 69
93006: ST_TO_ADDR
// if not tmp then
93007: LD_VAR 0 4
93011: NOT
93012: IFFALSE 93016
// exit ;
93014: GO 93158
// enable_addtolog := true ;
93016: LD_ADDR_OWVAR 81
93020: PUSH
93021: LD_INT 1
93023: ST_TO_ADDR
// AddToLog ( [ ) ;
93024: LD_STRING [
93026: PPUSH
93027: CALL_OW 561
// for i in tmp do
93031: LD_ADDR_VAR 0 3
93035: PUSH
93036: LD_VAR 0 4
93040: PUSH
93041: FOR_IN
93042: IFFALSE 93149
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
93044: LD_STRING [
93046: PUSH
93047: LD_VAR 0 3
93051: PPUSH
93052: CALL_OW 266
93056: STR
93057: PUSH
93058: LD_STRING , 
93060: STR
93061: PUSH
93062: LD_VAR 0 3
93066: PPUSH
93067: CALL_OW 250
93071: STR
93072: PUSH
93073: LD_STRING , 
93075: STR
93076: PUSH
93077: LD_VAR 0 3
93081: PPUSH
93082: CALL_OW 251
93086: STR
93087: PUSH
93088: LD_STRING , 
93090: STR
93091: PUSH
93092: LD_VAR 0 3
93096: PPUSH
93097: CALL_OW 254
93101: STR
93102: PUSH
93103: LD_STRING , 
93105: STR
93106: PUSH
93107: LD_VAR 0 3
93111: PPUSH
93112: LD_INT 1
93114: PPUSH
93115: CALL_OW 268
93119: STR
93120: PUSH
93121: LD_STRING , 
93123: STR
93124: PUSH
93125: LD_VAR 0 3
93129: PPUSH
93130: LD_INT 2
93132: PPUSH
93133: CALL_OW 268
93137: STR
93138: PUSH
93139: LD_STRING ],
93141: STR
93142: PPUSH
93143: CALL_OW 561
// end ;
93147: GO 93041
93149: POP
93150: POP
// AddToLog ( ]; ) ;
93151: LD_STRING ];
93153: PPUSH
93154: CALL_OW 561
// end ;
93158: LD_VAR 0 2
93162: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
93163: LD_INT 0
93165: PPUSH
93166: PPUSH
93167: PPUSH
93168: PPUSH
93169: PPUSH
// if not area or not rate or not max then
93170: LD_VAR 0 1
93174: NOT
93175: IFTRUE 93184
93177: PUSH
93178: LD_VAR 0 2
93182: NOT
93183: OR
93184: IFTRUE 93193
93186: PUSH
93187: LD_VAR 0 4
93191: NOT
93192: OR
93193: IFFALSE 93197
// exit ;
93195: GO 93386
// while 1 do
93197: LD_INT 1
93199: IFFALSE 93386
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
93201: LD_ADDR_VAR 0 9
93205: PUSH
93206: LD_VAR 0 1
93210: PPUSH
93211: LD_INT 1
93213: PPUSH
93214: CALL_OW 287
93218: PUSH
93219: LD_INT 10
93221: MUL
93222: ST_TO_ADDR
// r := rate / 10 ;
93223: LD_ADDR_VAR 0 7
93227: PUSH
93228: LD_VAR 0 2
93232: PUSH
93233: LD_INT 10
93235: DIVREAL
93236: ST_TO_ADDR
// time := 1 1$00 ;
93237: LD_ADDR_VAR 0 8
93241: PUSH
93242: LD_INT 2100
93244: ST_TO_ADDR
// if amount < min then
93245: LD_VAR 0 9
93249: PUSH
93250: LD_VAR 0 3
93254: LESS
93255: IFFALSE 93273
// r := r * 2 else
93257: LD_ADDR_VAR 0 7
93261: PUSH
93262: LD_VAR 0 7
93266: PUSH
93267: LD_INT 2
93269: MUL
93270: ST_TO_ADDR
93271: GO 93299
// if amount > max then
93273: LD_VAR 0 9
93277: PUSH
93278: LD_VAR 0 4
93282: GREATER
93283: IFFALSE 93299
// r := r / 2 ;
93285: LD_ADDR_VAR 0 7
93289: PUSH
93290: LD_VAR 0 7
93294: PUSH
93295: LD_INT 2
93297: DIVREAL
93298: ST_TO_ADDR
// time := time / r ;
93299: LD_ADDR_VAR 0 8
93303: PUSH
93304: LD_VAR 0 8
93308: PUSH
93309: LD_VAR 0 7
93313: DIVREAL
93314: ST_TO_ADDR
// if time < 0 then
93315: LD_VAR 0 8
93319: PUSH
93320: LD_INT 0
93322: LESS
93323: IFFALSE 93340
// time := time * - 1 ;
93325: LD_ADDR_VAR 0 8
93329: PUSH
93330: LD_VAR 0 8
93334: PUSH
93335: LD_INT 1
93337: NEG
93338: MUL
93339: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
93340: LD_VAR 0 8
93344: PUSH
93345: LD_INT 35
93347: PPUSH
93348: LD_INT 875
93350: PPUSH
93351: CALL_OW 12
93355: PLUS
93356: PPUSH
93357: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
93361: LD_INT 1
93363: PPUSH
93364: LD_INT 5
93366: PPUSH
93367: CALL_OW 12
93371: PPUSH
93372: LD_VAR 0 1
93376: PPUSH
93377: LD_INT 1
93379: PPUSH
93380: CALL_OW 55
// end ;
93384: GO 93197
// end ;
93386: LD_VAR 0 5
93390: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
93391: LD_INT 0
93393: PPUSH
93394: PPUSH
93395: PPUSH
93396: PPUSH
93397: PPUSH
93398: PPUSH
93399: PPUSH
93400: PPUSH
// if not turrets or not factories then
93401: LD_VAR 0 1
93405: NOT
93406: IFTRUE 93415
93408: PUSH
93409: LD_VAR 0 2
93413: NOT
93414: OR
93415: IFFALSE 93419
// exit ;
93417: GO 93726
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
93419: LD_ADDR_VAR 0 10
93423: PUSH
93424: LD_INT 5
93426: PUSH
93427: LD_INT 6
93429: PUSH
93430: EMPTY
93431: LIST
93432: LIST
93433: PUSH
93434: LD_INT 2
93436: PUSH
93437: LD_INT 4
93439: PUSH
93440: EMPTY
93441: LIST
93442: LIST
93443: PUSH
93444: LD_INT 3
93446: PUSH
93447: LD_INT 5
93449: PUSH
93450: EMPTY
93451: LIST
93452: LIST
93453: PUSH
93454: EMPTY
93455: LIST
93456: LIST
93457: LIST
93458: PUSH
93459: LD_INT 24
93461: PUSH
93462: LD_INT 25
93464: PUSH
93465: EMPTY
93466: LIST
93467: LIST
93468: PUSH
93469: LD_INT 23
93471: PUSH
93472: LD_INT 27
93474: PUSH
93475: EMPTY
93476: LIST
93477: LIST
93478: PUSH
93479: EMPTY
93480: LIST
93481: LIST
93482: PUSH
93483: LD_INT 42
93485: PUSH
93486: LD_INT 43
93488: PUSH
93489: EMPTY
93490: LIST
93491: LIST
93492: PUSH
93493: LD_INT 44
93495: PUSH
93496: LD_INT 46
93498: PUSH
93499: EMPTY
93500: LIST
93501: LIST
93502: PUSH
93503: LD_INT 45
93505: PUSH
93506: LD_INT 47
93508: PUSH
93509: EMPTY
93510: LIST
93511: LIST
93512: PUSH
93513: EMPTY
93514: LIST
93515: LIST
93516: LIST
93517: PUSH
93518: EMPTY
93519: LIST
93520: LIST
93521: LIST
93522: ST_TO_ADDR
// result := [ ] ;
93523: LD_ADDR_VAR 0 3
93527: PUSH
93528: EMPTY
93529: ST_TO_ADDR
// for i in turrets do
93530: LD_ADDR_VAR 0 4
93534: PUSH
93535: LD_VAR 0 1
93539: PUSH
93540: FOR_IN
93541: IFFALSE 93724
// begin nat := GetNation ( i ) ;
93543: LD_ADDR_VAR 0 7
93547: PUSH
93548: LD_VAR 0 4
93552: PPUSH
93553: CALL_OW 248
93557: ST_TO_ADDR
// weapon := 0 ;
93558: LD_ADDR_VAR 0 8
93562: PUSH
93563: LD_INT 0
93565: ST_TO_ADDR
// if not nat then
93566: LD_VAR 0 7
93570: NOT
93571: IFFALSE 93575
// continue ;
93573: GO 93540
// for j in list [ nat ] do
93575: LD_ADDR_VAR 0 5
93579: PUSH
93580: LD_VAR 0 10
93584: PUSH
93585: LD_VAR 0 7
93589: ARRAY
93590: PUSH
93591: FOR_IN
93592: IFFALSE 93633
// if GetBWeapon ( i ) = j [ 1 ] then
93594: LD_VAR 0 4
93598: PPUSH
93599: CALL_OW 269
93603: PUSH
93604: LD_VAR 0 5
93608: PUSH
93609: LD_INT 1
93611: ARRAY
93612: EQUAL
93613: IFFALSE 93631
// begin weapon := j [ 2 ] ;
93615: LD_ADDR_VAR 0 8
93619: PUSH
93620: LD_VAR 0 5
93624: PUSH
93625: LD_INT 2
93627: ARRAY
93628: ST_TO_ADDR
// break ;
93629: GO 93633
// end ;
93631: GO 93591
93633: POP
93634: POP
// if not weapon then
93635: LD_VAR 0 8
93639: NOT
93640: IFFALSE 93644
// continue ;
93642: GO 93540
// for k in factories do
93644: LD_ADDR_VAR 0 6
93648: PUSH
93649: LD_VAR 0 2
93653: PUSH
93654: FOR_IN
93655: IFFALSE 93720
// begin weapons := AvailableWeaponList ( k ) ;
93657: LD_ADDR_VAR 0 9
93661: PUSH
93662: LD_VAR 0 6
93666: PPUSH
93667: CALL_OW 478
93671: ST_TO_ADDR
// if not weapons then
93672: LD_VAR 0 9
93676: NOT
93677: IFFALSE 93681
// continue ;
93679: GO 93654
// if weapon in weapons then
93681: LD_VAR 0 8
93685: PUSH
93686: LD_VAR 0 9
93690: IN
93691: IFFALSE 93718
// begin result := [ i , weapon ] ;
93693: LD_ADDR_VAR 0 3
93697: PUSH
93698: LD_VAR 0 4
93702: PUSH
93703: LD_VAR 0 8
93707: PUSH
93708: EMPTY
93709: LIST
93710: LIST
93711: ST_TO_ADDR
// exit ;
93712: POP
93713: POP
93714: POP
93715: POP
93716: GO 93726
// end ; end ;
93718: GO 93654
93720: POP
93721: POP
// end ;
93722: GO 93540
93724: POP
93725: POP
// end ;
93726: LD_VAR 0 3
93730: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
93731: LD_INT 0
93733: PPUSH
// if not side or side > 8 then
93734: LD_VAR 0 3
93738: NOT
93739: IFTRUE 93751
93741: PUSH
93742: LD_VAR 0 3
93746: PUSH
93747: LD_INT 8
93749: GREATER
93750: OR
93751: IFFALSE 93755
// exit ;
93753: GO 93814
// if not range then
93755: LD_VAR 0 4
93759: NOT
93760: IFFALSE 93771
// range := - 12 ;
93762: LD_ADDR_VAR 0 4
93766: PUSH
93767: LD_INT 12
93769: NEG
93770: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
93771: LD_VAR 0 1
93775: PPUSH
93776: LD_VAR 0 2
93780: PPUSH
93781: LD_VAR 0 3
93785: PPUSH
93786: LD_VAR 0 4
93790: PPUSH
93791: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
93795: LD_VAR 0 1
93799: PPUSH
93800: LD_VAR 0 2
93804: PPUSH
93805: LD_VAR 0 3
93809: PPUSH
93810: CALL_OW 331
// end ;
93814: LD_VAR 0 5
93818: RET
// export function Video ( mode ) ; begin
93819: LD_INT 0
93821: PPUSH
// ingame_video = mode ;
93822: LD_ADDR_OWVAR 52
93826: PUSH
93827: LD_VAR 0 1
93831: ST_TO_ADDR
// interface_hidden = mode ;
93832: LD_ADDR_OWVAR 54
93836: PUSH
93837: LD_VAR 0 1
93841: ST_TO_ADDR
// end ;
93842: LD_VAR 0 2
93846: RET
// export function Join ( array , element ) ; begin
93847: LD_INT 0
93849: PPUSH
// result := Replace ( array , array + 1 , element ) ;
93850: LD_ADDR_VAR 0 3
93854: PUSH
93855: LD_VAR 0 1
93859: PPUSH
93860: LD_VAR 0 1
93864: PUSH
93865: LD_INT 1
93867: PLUS
93868: PPUSH
93869: LD_VAR 0 2
93873: PPUSH
93874: CALL_OW 1
93878: ST_TO_ADDR
// end ;
93879: LD_VAR 0 3
93883: RET
// export function JoinUnion ( array , element ) ; begin
93884: LD_INT 0
93886: PPUSH
// result := array union element ;
93887: LD_ADDR_VAR 0 3
93891: PUSH
93892: LD_VAR 0 1
93896: PUSH
93897: LD_VAR 0 2
93901: UNION
93902: ST_TO_ADDR
// end ;
93903: LD_VAR 0 3
93907: RET
// export function GetBehemoths ( side ) ; begin
93908: LD_INT 0
93910: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
93911: LD_ADDR_VAR 0 2
93915: PUSH
93916: LD_INT 22
93918: PUSH
93919: LD_VAR 0 1
93923: PUSH
93924: EMPTY
93925: LIST
93926: LIST
93927: PUSH
93928: LD_INT 31
93930: PUSH
93931: LD_INT 25
93933: PUSH
93934: EMPTY
93935: LIST
93936: LIST
93937: PUSH
93938: EMPTY
93939: LIST
93940: LIST
93941: PPUSH
93942: CALL_OW 69
93946: ST_TO_ADDR
// end ;
93947: LD_VAR 0 2
93951: RET
// export function Shuffle ( array ) ; var i , index ; begin
93952: LD_INT 0
93954: PPUSH
93955: PPUSH
93956: PPUSH
// result := [ ] ;
93957: LD_ADDR_VAR 0 2
93961: PUSH
93962: EMPTY
93963: ST_TO_ADDR
// if not array then
93964: LD_VAR 0 1
93968: NOT
93969: IFFALSE 93973
// exit ;
93971: GO 94072
// Randomize ;
93973: CALL_OW 10
// for i = array downto 1 do
93977: LD_ADDR_VAR 0 3
93981: PUSH
93982: DOUBLE
93983: LD_VAR 0 1
93987: INC
93988: ST_TO_ADDR
93989: LD_INT 1
93991: PUSH
93992: FOR_DOWNTO
93993: IFFALSE 94070
// begin index := rand ( 1 , array ) ;
93995: LD_ADDR_VAR 0 4
93999: PUSH
94000: LD_INT 1
94002: PPUSH
94003: LD_VAR 0 1
94007: PPUSH
94008: CALL_OW 12
94012: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
94013: LD_ADDR_VAR 0 2
94017: PUSH
94018: LD_VAR 0 2
94022: PPUSH
94023: LD_VAR 0 2
94027: PUSH
94028: LD_INT 1
94030: PLUS
94031: PPUSH
94032: LD_VAR 0 1
94036: PUSH
94037: LD_VAR 0 4
94041: ARRAY
94042: PPUSH
94043: CALL_OW 2
94047: ST_TO_ADDR
// array := Delete ( array , index ) ;
94048: LD_ADDR_VAR 0 1
94052: PUSH
94053: LD_VAR 0 1
94057: PPUSH
94058: LD_VAR 0 4
94062: PPUSH
94063: CALL_OW 3
94067: ST_TO_ADDR
// end ;
94068: GO 93992
94070: POP
94071: POP
// end ;
94072: LD_VAR 0 2
94076: RET
// export function GetBaseMaterials ( base ) ; begin
94077: LD_INT 0
94079: PPUSH
// result := [ 0 , 0 , 0 ] ;
94080: LD_ADDR_VAR 0 2
94084: PUSH
94085: LD_INT 0
94087: PUSH
94088: LD_INT 0
94090: PUSH
94091: LD_INT 0
94093: PUSH
94094: EMPTY
94095: LIST
94096: LIST
94097: LIST
94098: ST_TO_ADDR
// if not base then
94099: LD_VAR 0 1
94103: NOT
94104: IFFALSE 94108
// exit ;
94106: GO 94157
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
94108: LD_ADDR_VAR 0 2
94112: PUSH
94113: LD_VAR 0 1
94117: PPUSH
94118: LD_INT 1
94120: PPUSH
94121: CALL_OW 275
94125: PUSH
94126: LD_VAR 0 1
94130: PPUSH
94131: LD_INT 2
94133: PPUSH
94134: CALL_OW 275
94138: PUSH
94139: LD_VAR 0 1
94143: PPUSH
94144: LD_INT 3
94146: PPUSH
94147: CALL_OW 275
94151: PUSH
94152: EMPTY
94153: LIST
94154: LIST
94155: LIST
94156: ST_TO_ADDR
// end ;
94157: LD_VAR 0 2
94161: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
94162: LD_INT 0
94164: PPUSH
94165: PPUSH
// result := array ;
94166: LD_ADDR_VAR 0 3
94170: PUSH
94171: LD_VAR 0 1
94175: ST_TO_ADDR
// if size >= result then
94176: LD_VAR 0 2
94180: PUSH
94181: LD_VAR 0 3
94185: GREATEREQUAL
94186: IFFALSE 94190
// exit ;
94188: GO 94240
// if size then
94190: LD_VAR 0 2
94194: IFFALSE 94240
// for i := array downto size do
94196: LD_ADDR_VAR 0 4
94200: PUSH
94201: DOUBLE
94202: LD_VAR 0 1
94206: INC
94207: ST_TO_ADDR
94208: LD_VAR 0 2
94212: PUSH
94213: FOR_DOWNTO
94214: IFFALSE 94238
// result := Delete ( result , result ) ;
94216: LD_ADDR_VAR 0 3
94220: PUSH
94221: LD_VAR 0 3
94225: PPUSH
94226: LD_VAR 0 3
94230: PPUSH
94231: CALL_OW 3
94235: ST_TO_ADDR
94236: GO 94213
94238: POP
94239: POP
// end ;
94240: LD_VAR 0 3
94244: RET
// export function ComExit ( unit ) ; var tmp ; begin
94245: LD_INT 0
94247: PPUSH
94248: PPUSH
// if not IsInUnit ( unit ) then
94249: LD_VAR 0 1
94253: PPUSH
94254: CALL_OW 310
94258: NOT
94259: IFFALSE 94263
// exit ;
94261: GO 94323
// tmp := IsInUnit ( unit ) ;
94263: LD_ADDR_VAR 0 3
94267: PUSH
94268: LD_VAR 0 1
94272: PPUSH
94273: CALL_OW 310
94277: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
94278: LD_VAR 0 3
94282: PPUSH
94283: CALL_OW 247
94287: PUSH
94288: LD_INT 2
94290: EQUAL
94291: IFFALSE 94304
// ComExitVehicle ( unit ) else
94293: LD_VAR 0 1
94297: PPUSH
94298: CALL_OW 121
94302: GO 94313
// ComExitBuilding ( unit ) ;
94304: LD_VAR 0 1
94308: PPUSH
94309: CALL_OW 122
// result := tmp ;
94313: LD_ADDR_VAR 0 2
94317: PUSH
94318: LD_VAR 0 3
94322: ST_TO_ADDR
// end ;
94323: LD_VAR 0 2
94327: RET
// export function ComExitAll ( units ) ; var i ; begin
94328: LD_INT 0
94330: PPUSH
94331: PPUSH
// if not units then
94332: LD_VAR 0 1
94336: NOT
94337: IFFALSE 94341
// exit ;
94339: GO 94367
// for i in units do
94341: LD_ADDR_VAR 0 3
94345: PUSH
94346: LD_VAR 0 1
94350: PUSH
94351: FOR_IN
94352: IFFALSE 94365
// ComExit ( i ) ;
94354: LD_VAR 0 3
94358: PPUSH
94359: CALL 94245 0 1
94363: GO 94351
94365: POP
94366: POP
// end ;
94367: LD_VAR 0 2
94371: RET
// export function ResetHc ; begin
94372: LD_INT 0
94374: PPUSH
// InitHc ;
94375: CALL_OW 19
// hc_importance := 0 ;
94379: LD_ADDR_OWVAR 32
94383: PUSH
94384: LD_INT 0
94386: ST_TO_ADDR
// end ;
94387: LD_VAR 0 1
94391: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
94392: LD_INT 0
94394: PPUSH
94395: PPUSH
94396: PPUSH
// _x := ( x1 + x2 ) div 2 ;
94397: LD_ADDR_VAR 0 6
94401: PUSH
94402: LD_VAR 0 1
94406: PUSH
94407: LD_VAR 0 3
94411: PLUS
94412: PUSH
94413: LD_INT 2
94415: DIV
94416: ST_TO_ADDR
// if _x < 0 then
94417: LD_VAR 0 6
94421: PUSH
94422: LD_INT 0
94424: LESS
94425: IFFALSE 94442
// _x := _x * - 1 ;
94427: LD_ADDR_VAR 0 6
94431: PUSH
94432: LD_VAR 0 6
94436: PUSH
94437: LD_INT 1
94439: NEG
94440: MUL
94441: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
94442: LD_ADDR_VAR 0 7
94446: PUSH
94447: LD_VAR 0 2
94451: PUSH
94452: LD_VAR 0 4
94456: PLUS
94457: PUSH
94458: LD_INT 2
94460: DIV
94461: ST_TO_ADDR
// if _y < 0 then
94462: LD_VAR 0 7
94466: PUSH
94467: LD_INT 0
94469: LESS
94470: IFFALSE 94487
// _y := _y * - 1 ;
94472: LD_ADDR_VAR 0 7
94476: PUSH
94477: LD_VAR 0 7
94481: PUSH
94482: LD_INT 1
94484: NEG
94485: MUL
94486: ST_TO_ADDR
// result := [ _x , _y ] ;
94487: LD_ADDR_VAR 0 5
94491: PUSH
94492: LD_VAR 0 6
94496: PUSH
94497: LD_VAR 0 7
94501: PUSH
94502: EMPTY
94503: LIST
94504: LIST
94505: ST_TO_ADDR
// end ;
94506: LD_VAR 0 5
94510: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
94511: LD_INT 0
94513: PPUSH
94514: PPUSH
94515: PPUSH
94516: PPUSH
// task := GetTaskList ( unit ) ;
94517: LD_ADDR_VAR 0 7
94521: PUSH
94522: LD_VAR 0 1
94526: PPUSH
94527: CALL_OW 437
94531: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
94532: LD_VAR 0 7
94536: NOT
94537: IFFALSE 94556
94539: PUSH
94540: LD_VAR 0 1
94544: PPUSH
94545: LD_VAR 0 2
94549: PPUSH
94550: CALL_OW 308
94554: NOT
94555: AND
94556: IFFALSE 94560
// exit ;
94558: GO 94678
// if IsInArea ( unit , area ) then
94560: LD_VAR 0 1
94564: PPUSH
94565: LD_VAR 0 2
94569: PPUSH
94570: CALL_OW 308
94574: IFFALSE 94592
// begin ComMoveToArea ( unit , goAway ) ;
94576: LD_VAR 0 1
94580: PPUSH
94581: LD_VAR 0 3
94585: PPUSH
94586: CALL_OW 113
// exit ;
94590: GO 94678
// end ; if task [ 1 ] [ 1 ] <> M then
94592: LD_VAR 0 7
94596: PUSH
94597: LD_INT 1
94599: ARRAY
94600: PUSH
94601: LD_INT 1
94603: ARRAY
94604: PUSH
94605: LD_STRING M
94607: NONEQUAL
94608: IFFALSE 94612
// exit ;
94610: GO 94678
// x := task [ 1 ] [ 2 ] ;
94612: LD_ADDR_VAR 0 5
94616: PUSH
94617: LD_VAR 0 7
94621: PUSH
94622: LD_INT 1
94624: ARRAY
94625: PUSH
94626: LD_INT 2
94628: ARRAY
94629: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
94630: LD_ADDR_VAR 0 6
94634: PUSH
94635: LD_VAR 0 7
94639: PUSH
94640: LD_INT 1
94642: ARRAY
94643: PUSH
94644: LD_INT 3
94646: ARRAY
94647: ST_TO_ADDR
// if InArea ( x , y , area ) then
94648: LD_VAR 0 5
94652: PPUSH
94653: LD_VAR 0 6
94657: PPUSH
94658: LD_VAR 0 2
94662: PPUSH
94663: CALL_OW 309
94667: IFFALSE 94678
// ComStop ( unit ) ;
94669: LD_VAR 0 1
94673: PPUSH
94674: CALL_OW 141
// end ;
94678: LD_VAR 0 4
94682: RET
// export function Abs ( value ) ; begin
94683: LD_INT 0
94685: PPUSH
// result := value ;
94686: LD_ADDR_VAR 0 2
94690: PUSH
94691: LD_VAR 0 1
94695: ST_TO_ADDR
// if value < 0 then
94696: LD_VAR 0 1
94700: PUSH
94701: LD_INT 0
94703: LESS
94704: IFFALSE 94721
// result := value * - 1 ;
94706: LD_ADDR_VAR 0 2
94710: PUSH
94711: LD_VAR 0 1
94715: PUSH
94716: LD_INT 1
94718: NEG
94719: MUL
94720: ST_TO_ADDR
// end ;
94721: LD_VAR 0 2
94725: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
94726: LD_INT 0
94728: PPUSH
94729: PPUSH
94730: PPUSH
94731: PPUSH
94732: PPUSH
94733: PPUSH
94734: PPUSH
94735: PPUSH
// if not unit or not building then
94736: LD_VAR 0 1
94740: NOT
94741: IFTRUE 94750
94743: PUSH
94744: LD_VAR 0 2
94748: NOT
94749: OR
94750: IFFALSE 94754
// exit ;
94752: GO 94982
// x := GetX ( building ) ;
94754: LD_ADDR_VAR 0 4
94758: PUSH
94759: LD_VAR 0 2
94763: PPUSH
94764: CALL_OW 250
94768: ST_TO_ADDR
// y := GetY ( building ) ;
94769: LD_ADDR_VAR 0 6
94773: PUSH
94774: LD_VAR 0 2
94778: PPUSH
94779: CALL_OW 251
94783: ST_TO_ADDR
// d := GetDir ( building ) ;
94784: LD_ADDR_VAR 0 8
94788: PUSH
94789: LD_VAR 0 2
94793: PPUSH
94794: CALL_OW 254
94798: ST_TO_ADDR
// r := 4 ;
94799: LD_ADDR_VAR 0 9
94803: PUSH
94804: LD_INT 4
94806: ST_TO_ADDR
// for i := 1 to 5 do
94807: LD_ADDR_VAR 0 10
94811: PUSH
94812: DOUBLE
94813: LD_INT 1
94815: DEC
94816: ST_TO_ADDR
94817: LD_INT 5
94819: PUSH
94820: FOR_TO
94821: IFFALSE 94980
// begin _x := ShiftX ( x , d , r + i ) ;
94823: LD_ADDR_VAR 0 5
94827: PUSH
94828: LD_VAR 0 4
94832: PPUSH
94833: LD_VAR 0 8
94837: PPUSH
94838: LD_VAR 0 9
94842: PUSH
94843: LD_VAR 0 10
94847: PLUS
94848: PPUSH
94849: CALL_OW 272
94853: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
94854: LD_ADDR_VAR 0 7
94858: PUSH
94859: LD_VAR 0 6
94863: PPUSH
94864: LD_VAR 0 8
94868: PPUSH
94869: LD_VAR 0 9
94873: PUSH
94874: LD_VAR 0 10
94878: PLUS
94879: PPUSH
94880: CALL_OW 273
94884: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
94885: LD_VAR 0 5
94889: PPUSH
94890: LD_VAR 0 7
94894: PPUSH
94895: CALL_OW 488
94899: IFFALSE 94934
94901: PUSH
94902: LD_VAR 0 5
94906: PPUSH
94907: LD_VAR 0 7
94911: PPUSH
94912: CALL_OW 428
94916: PPUSH
94917: CALL_OW 247
94921: PUSH
94922: LD_INT 3
94924: PUSH
94925: LD_INT 2
94927: PUSH
94928: EMPTY
94929: LIST
94930: LIST
94931: IN
94932: NOT
94933: AND
94934: IFFALSE 94978
// begin ComMoveXY ( unit , _x , _y ) ;
94936: LD_VAR 0 1
94940: PPUSH
94941: LD_VAR 0 5
94945: PPUSH
94946: LD_VAR 0 7
94950: PPUSH
94951: CALL_OW 111
// result := [ _x , _y ] ;
94955: LD_ADDR_VAR 0 3
94959: PUSH
94960: LD_VAR 0 5
94964: PUSH
94965: LD_VAR 0 7
94969: PUSH
94970: EMPTY
94971: LIST
94972: LIST
94973: ST_TO_ADDR
// exit ;
94974: POP
94975: POP
94976: GO 94982
// end ; end ;
94978: GO 94820
94980: POP
94981: POP
// end ;
94982: LD_VAR 0 3
94986: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
94987: LD_INT 0
94989: PPUSH
94990: PPUSH
94991: PPUSH
// result := 0 ;
94992: LD_ADDR_VAR 0 3
94996: PUSH
94997: LD_INT 0
94999: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
95000: LD_VAR 0 1
95004: PUSH
95005: LD_INT 0
95007: LESS
95008: IFTRUE 95020
95010: PUSH
95011: LD_VAR 0 1
95015: PUSH
95016: LD_INT 8
95018: GREATER
95019: OR
95020: IFTRUE 95032
95022: PUSH
95023: LD_VAR 0 2
95027: PUSH
95028: LD_INT 0
95030: LESS
95031: OR
95032: IFTRUE 95044
95034: PUSH
95035: LD_VAR 0 2
95039: PUSH
95040: LD_INT 8
95042: GREATER
95043: OR
95044: IFFALSE 95048
// exit ;
95046: GO 95123
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
95048: LD_ADDR_VAR 0 4
95052: PUSH
95053: LD_INT 22
95055: PUSH
95056: LD_VAR 0 2
95060: PUSH
95061: EMPTY
95062: LIST
95063: LIST
95064: PPUSH
95065: CALL_OW 69
95069: PUSH
95070: FOR_IN
95071: IFFALSE 95121
// begin un := UnitShoot ( i ) ;
95073: LD_ADDR_VAR 0 5
95077: PUSH
95078: LD_VAR 0 4
95082: PPUSH
95083: CALL_OW 504
95087: ST_TO_ADDR
// if GetSide ( un ) = side1 then
95088: LD_VAR 0 5
95092: PPUSH
95093: CALL_OW 255
95097: PUSH
95098: LD_VAR 0 1
95102: EQUAL
95103: IFFALSE 95119
// begin result := un ;
95105: LD_ADDR_VAR 0 3
95109: PUSH
95110: LD_VAR 0 5
95114: ST_TO_ADDR
// exit ;
95115: POP
95116: POP
95117: GO 95123
// end ; end ;
95119: GO 95070
95121: POP
95122: POP
// end ;
95123: LD_VAR 0 3
95127: RET
// export function GetCargoBay ( units ) ; begin
95128: LD_INT 0
95130: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
95131: LD_ADDR_VAR 0 2
95135: PUSH
95136: LD_VAR 0 1
95140: PPUSH
95141: LD_INT 2
95143: PUSH
95144: LD_INT 34
95146: PUSH
95147: LD_INT 12
95149: PUSH
95150: EMPTY
95151: LIST
95152: LIST
95153: PUSH
95154: LD_INT 34
95156: PUSH
95157: LD_INT 51
95159: PUSH
95160: EMPTY
95161: LIST
95162: LIST
95163: PUSH
95164: LD_INT 34
95166: PUSH
95167: LD_INT 32
95169: PUSH
95170: EMPTY
95171: LIST
95172: LIST
95173: PUSH
95174: LD_INT 34
95176: PUSH
95177: LD_INT 89
95179: PUSH
95180: EMPTY
95181: LIST
95182: LIST
95183: PUSH
95184: EMPTY
95185: LIST
95186: LIST
95187: LIST
95188: LIST
95189: LIST
95190: PPUSH
95191: CALL_OW 72
95195: ST_TO_ADDR
// end ;
95196: LD_VAR 0 2
95200: RET
// export function Negate ( value ) ; begin
95201: LD_INT 0
95203: PPUSH
// result := not value ;
95204: LD_ADDR_VAR 0 2
95208: PUSH
95209: LD_VAR 0 1
95213: NOT
95214: ST_TO_ADDR
// end ;
95215: LD_VAR 0 2
95219: RET
// export function Inc ( value ) ; begin
95220: LD_INT 0
95222: PPUSH
// result := value + 1 ;
95223: LD_ADDR_VAR 0 2
95227: PUSH
95228: LD_VAR 0 1
95232: PUSH
95233: LD_INT 1
95235: PLUS
95236: ST_TO_ADDR
// end ;
95237: LD_VAR 0 2
95241: RET
// export function Dec ( value ) ; begin
95242: LD_INT 0
95244: PPUSH
// result := value - 1 ;
95245: LD_ADDR_VAR 0 2
95249: PUSH
95250: LD_VAR 0 1
95254: PUSH
95255: LD_INT 1
95257: MINUS
95258: ST_TO_ADDR
// end ;
95259: LD_VAR 0 2
95263: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
95264: LD_INT 0
95266: PPUSH
95267: PPUSH
95268: PPUSH
95269: PPUSH
95270: PPUSH
95271: PPUSH
95272: PPUSH
95273: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
95274: LD_VAR 0 1
95278: PPUSH
95279: LD_VAR 0 2
95283: PPUSH
95284: CALL_OW 488
95288: NOT
95289: IFTRUE 95308
95291: PUSH
95292: LD_VAR 0 3
95296: PPUSH
95297: LD_VAR 0 4
95301: PPUSH
95302: CALL_OW 488
95306: NOT
95307: OR
95308: IFFALSE 95321
// begin result := - 1 ;
95310: LD_ADDR_VAR 0 5
95314: PUSH
95315: LD_INT 1
95317: NEG
95318: ST_TO_ADDR
// exit ;
95319: GO 95556
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
95321: LD_ADDR_VAR 0 12
95325: PUSH
95326: LD_VAR 0 1
95330: PPUSH
95331: LD_VAR 0 2
95335: PPUSH
95336: LD_VAR 0 3
95340: PPUSH
95341: LD_VAR 0 4
95345: PPUSH
95346: CALL 94392 0 4
95350: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
95351: LD_ADDR_VAR 0 11
95355: PUSH
95356: LD_VAR 0 1
95360: PPUSH
95361: LD_VAR 0 2
95365: PPUSH
95366: LD_VAR 0 12
95370: PUSH
95371: LD_INT 1
95373: ARRAY
95374: PPUSH
95375: LD_VAR 0 12
95379: PUSH
95380: LD_INT 2
95382: ARRAY
95383: PPUSH
95384: CALL_OW 298
95388: ST_TO_ADDR
// distance := 9999 ;
95389: LD_ADDR_VAR 0 10
95393: PUSH
95394: LD_INT 9999
95396: ST_TO_ADDR
// for i := 0 to 5 do
95397: LD_ADDR_VAR 0 6
95401: PUSH
95402: DOUBLE
95403: LD_INT 0
95405: DEC
95406: ST_TO_ADDR
95407: LD_INT 5
95409: PUSH
95410: FOR_TO
95411: IFFALSE 95554
// begin _x := ShiftX ( x1 , i , centerDist ) ;
95413: LD_ADDR_VAR 0 7
95417: PUSH
95418: LD_VAR 0 1
95422: PPUSH
95423: LD_VAR 0 6
95427: PPUSH
95428: LD_VAR 0 11
95432: PPUSH
95433: CALL_OW 272
95437: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
95438: LD_ADDR_VAR 0 8
95442: PUSH
95443: LD_VAR 0 2
95447: PPUSH
95448: LD_VAR 0 6
95452: PPUSH
95453: LD_VAR 0 11
95457: PPUSH
95458: CALL_OW 273
95462: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
95463: LD_VAR 0 7
95467: PPUSH
95468: LD_VAR 0 8
95472: PPUSH
95473: CALL_OW 488
95477: NOT
95478: IFFALSE 95482
// continue ;
95480: GO 95410
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
95482: LD_ADDR_VAR 0 9
95486: PUSH
95487: LD_VAR 0 12
95491: PUSH
95492: LD_INT 1
95494: ARRAY
95495: PPUSH
95496: LD_VAR 0 12
95500: PUSH
95501: LD_INT 2
95503: ARRAY
95504: PPUSH
95505: LD_VAR 0 7
95509: PPUSH
95510: LD_VAR 0 8
95514: PPUSH
95515: CALL_OW 298
95519: ST_TO_ADDR
// if tmp < distance then
95520: LD_VAR 0 9
95524: PUSH
95525: LD_VAR 0 10
95529: LESS
95530: IFFALSE 95552
// begin result := i ;
95532: LD_ADDR_VAR 0 5
95536: PUSH
95537: LD_VAR 0 6
95541: ST_TO_ADDR
// distance := tmp ;
95542: LD_ADDR_VAR 0 10
95546: PUSH
95547: LD_VAR 0 9
95551: ST_TO_ADDR
// end ; end ;
95552: GO 95410
95554: POP
95555: POP
// end ;
95556: LD_VAR 0 5
95560: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
95561: LD_INT 0
95563: PPUSH
95564: PPUSH
// if not driver or not IsInUnit ( driver ) then
95565: LD_VAR 0 1
95569: NOT
95570: IFTRUE 95584
95572: PUSH
95573: LD_VAR 0 1
95577: PPUSH
95578: CALL_OW 310
95582: NOT
95583: OR
95584: IFFALSE 95588
// exit ;
95586: GO 95678
// vehicle := IsInUnit ( driver ) ;
95588: LD_ADDR_VAR 0 3
95592: PUSH
95593: LD_VAR 0 1
95597: PPUSH
95598: CALL_OW 310
95602: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
95603: LD_VAR 0 1
95607: PPUSH
95608: LD_STRING \
95610: PUSH
95611: LD_INT 0
95613: PUSH
95614: LD_INT 0
95616: PUSH
95617: LD_INT 0
95619: PUSH
95620: LD_INT 0
95622: PUSH
95623: LD_INT 0
95625: PUSH
95626: LD_INT 0
95628: PUSH
95629: EMPTY
95630: LIST
95631: LIST
95632: LIST
95633: LIST
95634: LIST
95635: LIST
95636: LIST
95637: PUSH
95638: LD_STRING E
95640: PUSH
95641: LD_INT 0
95643: PUSH
95644: LD_INT 0
95646: PUSH
95647: LD_VAR 0 3
95651: PUSH
95652: LD_INT 0
95654: PUSH
95655: LD_INT 0
95657: PUSH
95658: LD_INT 0
95660: PUSH
95661: EMPTY
95662: LIST
95663: LIST
95664: LIST
95665: LIST
95666: LIST
95667: LIST
95668: LIST
95669: PUSH
95670: EMPTY
95671: LIST
95672: LIST
95673: PPUSH
95674: CALL_OW 446
// end ;
95678: LD_VAR 0 2
95682: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
95683: LD_INT 0
95685: PPUSH
95686: PPUSH
// if not driver or not IsInUnit ( driver ) then
95687: LD_VAR 0 1
95691: NOT
95692: IFTRUE 95706
95694: PUSH
95695: LD_VAR 0 1
95699: PPUSH
95700: CALL_OW 310
95704: NOT
95705: OR
95706: IFFALSE 95710
// exit ;
95708: GO 95800
// vehicle := IsInUnit ( driver ) ;
95710: LD_ADDR_VAR 0 3
95714: PUSH
95715: LD_VAR 0 1
95719: PPUSH
95720: CALL_OW 310
95724: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
95725: LD_VAR 0 1
95729: PPUSH
95730: LD_STRING \
95732: PUSH
95733: LD_INT 0
95735: PUSH
95736: LD_INT 0
95738: PUSH
95739: LD_INT 0
95741: PUSH
95742: LD_INT 0
95744: PUSH
95745: LD_INT 0
95747: PUSH
95748: LD_INT 0
95750: PUSH
95751: EMPTY
95752: LIST
95753: LIST
95754: LIST
95755: LIST
95756: LIST
95757: LIST
95758: LIST
95759: PUSH
95760: LD_STRING E
95762: PUSH
95763: LD_INT 0
95765: PUSH
95766: LD_INT 0
95768: PUSH
95769: LD_VAR 0 3
95773: PUSH
95774: LD_INT 0
95776: PUSH
95777: LD_INT 0
95779: PUSH
95780: LD_INT 0
95782: PUSH
95783: EMPTY
95784: LIST
95785: LIST
95786: LIST
95787: LIST
95788: LIST
95789: LIST
95790: LIST
95791: PUSH
95792: EMPTY
95793: LIST
95794: LIST
95795: PPUSH
95796: CALL_OW 447
// end ;
95800: LD_VAR 0 2
95804: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
95805: LD_INT 0
95807: PPUSH
95808: PPUSH
95809: PPUSH
// tmp := [ ] ;
95810: LD_ADDR_VAR 0 5
95814: PUSH
95815: EMPTY
95816: ST_TO_ADDR
// for i in units do
95817: LD_ADDR_VAR 0 4
95821: PUSH
95822: LD_VAR 0 1
95826: PUSH
95827: FOR_IN
95828: IFFALSE 95866
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
95830: LD_ADDR_VAR 0 5
95834: PUSH
95835: LD_VAR 0 5
95839: PPUSH
95840: LD_VAR 0 5
95844: PUSH
95845: LD_INT 1
95847: PLUS
95848: PPUSH
95849: LD_VAR 0 4
95853: PPUSH
95854: CALL_OW 256
95858: PPUSH
95859: CALL_OW 2
95863: ST_TO_ADDR
95864: GO 95827
95866: POP
95867: POP
// if not tmp then
95868: LD_VAR 0 5
95872: NOT
95873: IFFALSE 95877
// exit ;
95875: GO 95925
// if asc then
95877: LD_VAR 0 2
95881: IFFALSE 95905
// result := SortListByListAsc ( units , tmp ) else
95883: LD_ADDR_VAR 0 3
95887: PUSH
95888: LD_VAR 0 1
95892: PPUSH
95893: LD_VAR 0 5
95897: PPUSH
95898: CALL_OW 76
95902: ST_TO_ADDR
95903: GO 95925
// result := SortListByListDesc ( units , tmp ) ;
95905: LD_ADDR_VAR 0 3
95909: PUSH
95910: LD_VAR 0 1
95914: PPUSH
95915: LD_VAR 0 5
95919: PPUSH
95920: CALL_OW 77
95924: ST_TO_ADDR
// end ;
95925: LD_VAR 0 3
95929: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
95930: LD_INT 0
95932: PPUSH
95933: PPUSH
// task := GetTaskList ( mech ) ;
95934: LD_ADDR_VAR 0 4
95938: PUSH
95939: LD_VAR 0 1
95943: PPUSH
95944: CALL_OW 437
95948: ST_TO_ADDR
// if not task then
95949: LD_VAR 0 4
95953: NOT
95954: IFFALSE 95958
// exit ;
95956: GO 96002
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
95958: LD_ADDR_VAR 0 3
95962: PUSH
95963: LD_VAR 0 4
95967: PUSH
95968: LD_INT 1
95970: ARRAY
95971: PUSH
95972: LD_INT 1
95974: ARRAY
95975: PUSH
95976: LD_STRING r
95978: EQUAL
95979: IFFALSE 96001
95981: PUSH
95982: LD_VAR 0 4
95986: PUSH
95987: LD_INT 1
95989: ARRAY
95990: PUSH
95991: LD_INT 4
95993: ARRAY
95994: PUSH
95995: LD_VAR 0 2
95999: EQUAL
96000: AND
96001: ST_TO_ADDR
// end ;
96002: LD_VAR 0 3
96006: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
96007: LD_INT 0
96009: PPUSH
// SetDir ( unit , d ) ;
96010: LD_VAR 0 1
96014: PPUSH
96015: LD_VAR 0 4
96019: PPUSH
96020: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
96024: LD_ADDR_VAR 0 6
96028: PUSH
96029: LD_VAR 0 1
96033: PPUSH
96034: LD_VAR 0 2
96038: PPUSH
96039: LD_VAR 0 3
96043: PPUSH
96044: LD_VAR 0 5
96048: PPUSH
96049: CALL_OW 48
96053: ST_TO_ADDR
// end ;
96054: LD_VAR 0 6
96058: RET
// export function ToNaturalNumber ( number ) ; begin
96059: LD_INT 0
96061: PPUSH
// result := number div 1 ;
96062: LD_ADDR_VAR 0 2
96066: PUSH
96067: LD_VAR 0 1
96071: PUSH
96072: LD_INT 1
96074: DIV
96075: ST_TO_ADDR
// if number < 0 then
96076: LD_VAR 0 1
96080: PUSH
96081: LD_INT 0
96083: LESS
96084: IFFALSE 96094
// result := 0 ;
96086: LD_ADDR_VAR 0 2
96090: PUSH
96091: LD_INT 0
96093: ST_TO_ADDR
// end ;
96094: LD_VAR 0 2
96098: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
96099: LD_INT 0
96101: PPUSH
96102: PPUSH
96103: PPUSH
// if not buildings then
96104: LD_VAR 0 1
96108: NOT
96109: IFFALSE 96113
// exit ;
96111: GO 96228
// tmp := [ ] ;
96113: LD_ADDR_VAR 0 5
96117: PUSH
96118: EMPTY
96119: ST_TO_ADDR
// for b in buildings do
96120: LD_ADDR_VAR 0 4
96124: PUSH
96125: LD_VAR 0 1
96129: PUSH
96130: FOR_IN
96131: IFFALSE 96169
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
96133: LD_ADDR_VAR 0 5
96137: PUSH
96138: LD_VAR 0 5
96142: PPUSH
96143: LD_VAR 0 5
96147: PUSH
96148: LD_INT 1
96150: PLUS
96151: PPUSH
96152: LD_VAR 0 4
96156: PPUSH
96157: CALL_OW 266
96161: PPUSH
96162: CALL_OW 1
96166: ST_TO_ADDR
96167: GO 96130
96169: POP
96170: POP
// if not tmp then
96171: LD_VAR 0 5
96175: NOT
96176: IFFALSE 96180
// exit ;
96178: GO 96228
// if asc then
96180: LD_VAR 0 2
96184: IFFALSE 96208
// result := SortListByListAsc ( buildings , tmp ) else
96186: LD_ADDR_VAR 0 3
96190: PUSH
96191: LD_VAR 0 1
96195: PPUSH
96196: LD_VAR 0 5
96200: PPUSH
96201: CALL_OW 76
96205: ST_TO_ADDR
96206: GO 96228
// result := SortListByListDesc ( buildings , tmp ) ;
96208: LD_ADDR_VAR 0 3
96212: PUSH
96213: LD_VAR 0 1
96217: PPUSH
96218: LD_VAR 0 5
96222: PPUSH
96223: CALL_OW 77
96227: ST_TO_ADDR
// end ;
96228: LD_VAR 0 3
96232: RET
// export function SortByClass ( units , class ) ; var un ; begin
96233: LD_INT 0
96235: PPUSH
96236: PPUSH
// if not units or not class then
96237: LD_VAR 0 1
96241: NOT
96242: IFTRUE 96251
96244: PUSH
96245: LD_VAR 0 2
96249: NOT
96250: OR
96251: IFFALSE 96255
// exit ;
96253: GO 96350
// result := [ ] ;
96255: LD_ADDR_VAR 0 3
96259: PUSH
96260: EMPTY
96261: ST_TO_ADDR
// for un in units do
96262: LD_ADDR_VAR 0 4
96266: PUSH
96267: LD_VAR 0 1
96271: PUSH
96272: FOR_IN
96273: IFFALSE 96348
// if GetClass ( un ) = class then
96275: LD_VAR 0 4
96279: PPUSH
96280: CALL_OW 257
96284: PUSH
96285: LD_VAR 0 2
96289: EQUAL
96290: IFFALSE 96317
// result := Insert ( result , 1 , un ) else
96292: LD_ADDR_VAR 0 3
96296: PUSH
96297: LD_VAR 0 3
96301: PPUSH
96302: LD_INT 1
96304: PPUSH
96305: LD_VAR 0 4
96309: PPUSH
96310: CALL_OW 2
96314: ST_TO_ADDR
96315: GO 96346
// result := Replace ( result , result + 1 , un ) ;
96317: LD_ADDR_VAR 0 3
96321: PUSH
96322: LD_VAR 0 3
96326: PPUSH
96327: LD_VAR 0 3
96331: PUSH
96332: LD_INT 1
96334: PLUS
96335: PPUSH
96336: LD_VAR 0 4
96340: PPUSH
96341: CALL_OW 1
96345: ST_TO_ADDR
96346: GO 96272
96348: POP
96349: POP
// end ;
96350: LD_VAR 0 3
96354: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
96355: LD_INT 0
96357: PPUSH
96358: PPUSH
96359: PPUSH
96360: PPUSH
96361: PPUSH
96362: PPUSH
96363: PPUSH
// result := [ ] ;
96364: LD_ADDR_VAR 0 4
96368: PUSH
96369: EMPTY
96370: ST_TO_ADDR
// if x - r < 0 then
96371: LD_VAR 0 1
96375: PUSH
96376: LD_VAR 0 3
96380: MINUS
96381: PUSH
96382: LD_INT 0
96384: LESS
96385: IFFALSE 96397
// min_x := 0 else
96387: LD_ADDR_VAR 0 8
96391: PUSH
96392: LD_INT 0
96394: ST_TO_ADDR
96395: GO 96413
// min_x := x - r ;
96397: LD_ADDR_VAR 0 8
96401: PUSH
96402: LD_VAR 0 1
96406: PUSH
96407: LD_VAR 0 3
96411: MINUS
96412: ST_TO_ADDR
// if y - r < 0 then
96413: LD_VAR 0 2
96417: PUSH
96418: LD_VAR 0 3
96422: MINUS
96423: PUSH
96424: LD_INT 0
96426: LESS
96427: IFFALSE 96439
// min_y := 0 else
96429: LD_ADDR_VAR 0 7
96433: PUSH
96434: LD_INT 0
96436: ST_TO_ADDR
96437: GO 96455
// min_y := y - r ;
96439: LD_ADDR_VAR 0 7
96443: PUSH
96444: LD_VAR 0 2
96448: PUSH
96449: LD_VAR 0 3
96453: MINUS
96454: ST_TO_ADDR
// max_x := x + r ;
96455: LD_ADDR_VAR 0 9
96459: PUSH
96460: LD_VAR 0 1
96464: PUSH
96465: LD_VAR 0 3
96469: PLUS
96470: ST_TO_ADDR
// max_y := y + r ;
96471: LD_ADDR_VAR 0 10
96475: PUSH
96476: LD_VAR 0 2
96480: PUSH
96481: LD_VAR 0 3
96485: PLUS
96486: ST_TO_ADDR
// for _x = min_x to max_x do
96487: LD_ADDR_VAR 0 5
96491: PUSH
96492: DOUBLE
96493: LD_VAR 0 8
96497: DEC
96498: ST_TO_ADDR
96499: LD_VAR 0 9
96503: PUSH
96504: FOR_TO
96505: IFFALSE 96606
// for _y = min_y to max_y do
96507: LD_ADDR_VAR 0 6
96511: PUSH
96512: DOUBLE
96513: LD_VAR 0 7
96517: DEC
96518: ST_TO_ADDR
96519: LD_VAR 0 10
96523: PUSH
96524: FOR_TO
96525: IFFALSE 96602
// begin if not ValidHex ( _x , _y ) then
96527: LD_VAR 0 5
96531: PPUSH
96532: LD_VAR 0 6
96536: PPUSH
96537: CALL_OW 488
96541: NOT
96542: IFFALSE 96546
// continue ;
96544: GO 96524
// if GetResourceTypeXY ( _x , _y ) then
96546: LD_VAR 0 5
96550: PPUSH
96551: LD_VAR 0 6
96555: PPUSH
96556: CALL_OW 283
96560: IFFALSE 96600
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
96562: LD_ADDR_VAR 0 4
96566: PUSH
96567: LD_VAR 0 4
96571: PPUSH
96572: LD_VAR 0 4
96576: PUSH
96577: LD_INT 1
96579: PLUS
96580: PPUSH
96581: LD_VAR 0 5
96585: PUSH
96586: LD_VAR 0 6
96590: PUSH
96591: EMPTY
96592: LIST
96593: LIST
96594: PPUSH
96595: CALL_OW 1
96599: ST_TO_ADDR
// end ;
96600: GO 96524
96602: POP
96603: POP
96604: GO 96504
96606: POP
96607: POP
// end ;
96608: LD_VAR 0 4
96612: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
96613: LD_INT 0
96615: PPUSH
96616: PPUSH
96617: PPUSH
96618: PPUSH
96619: PPUSH
96620: PPUSH
96621: PPUSH
96622: PPUSH
// if not units then
96623: LD_VAR 0 1
96627: NOT
96628: IFFALSE 96632
// exit ;
96630: GO 97164
// result := UnitFilter ( units , [ f_ok ] ) ;
96632: LD_ADDR_VAR 0 3
96636: PUSH
96637: LD_VAR 0 1
96641: PPUSH
96642: LD_INT 50
96644: PUSH
96645: EMPTY
96646: LIST
96647: PPUSH
96648: CALL_OW 72
96652: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
96653: LD_ADDR_VAR 0 8
96657: PUSH
96658: LD_VAR 0 1
96662: PUSH
96663: LD_INT 1
96665: ARRAY
96666: PPUSH
96667: CALL_OW 255
96671: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
96672: LD_ADDR_VAR 0 10
96676: PUSH
96677: LD_INT 29
96679: PUSH
96680: LD_INT 91
96682: PUSH
96683: LD_INT 49
96685: PUSH
96686: EMPTY
96687: LIST
96688: LIST
96689: LIST
96690: ST_TO_ADDR
// if not result then
96691: LD_VAR 0 3
96695: NOT
96696: IFFALSE 96700
// exit ;
96698: GO 97164
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
96700: LD_ADDR_VAR 0 5
96704: PUSH
96705: LD_INT 81
96707: PUSH
96708: LD_VAR 0 8
96712: PUSH
96713: EMPTY
96714: LIST
96715: LIST
96716: PPUSH
96717: CALL_OW 69
96721: ST_TO_ADDR
// for i in result do
96722: LD_ADDR_VAR 0 4
96726: PUSH
96727: LD_VAR 0 3
96731: PUSH
96732: FOR_IN
96733: IFFALSE 97162
// begin tag := GetTag ( i ) + 1 ;
96735: LD_ADDR_VAR 0 9
96739: PUSH
96740: LD_VAR 0 4
96744: PPUSH
96745: CALL_OW 110
96749: PUSH
96750: LD_INT 1
96752: PLUS
96753: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
96754: LD_ADDR_VAR 0 7
96758: PUSH
96759: LD_VAR 0 4
96763: PPUSH
96764: CALL_OW 250
96768: PPUSH
96769: LD_VAR 0 4
96773: PPUSH
96774: CALL_OW 251
96778: PPUSH
96779: LD_INT 4
96781: PPUSH
96782: CALL 96355 0 3
96786: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
96787: LD_VAR 0 4
96791: PPUSH
96792: CALL_OW 247
96796: PUSH
96797: LD_INT 2
96799: EQUAL
96800: IFFALSE 96812
96802: PUSH
96803: LD_VAR 0 7
96807: PUSH
96808: LD_INT 2
96810: GREATER
96811: AND
96812: IFFALSE 96832
96814: PUSH
96815: LD_VAR 0 4
96819: PPUSH
96820: CALL_OW 264
96824: PUSH
96825: LD_VAR 0 10
96829: IN
96830: NOT
96831: AND
96832: IFFALSE 96871
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
96834: LD_VAR 0 4
96838: PPUSH
96839: LD_VAR 0 7
96843: PUSH
96844: LD_INT 1
96846: ARRAY
96847: PUSH
96848: LD_INT 1
96850: ARRAY
96851: PPUSH
96852: LD_VAR 0 7
96856: PUSH
96857: LD_INT 1
96859: ARRAY
96860: PUSH
96861: LD_INT 2
96863: ARRAY
96864: PPUSH
96865: CALL_OW 116
96869: GO 97160
// if path > tag then
96871: LD_VAR 0 2
96875: PUSH
96876: LD_VAR 0 9
96880: GREATER
96881: IFFALSE 97089
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
96883: LD_ADDR_VAR 0 6
96887: PUSH
96888: LD_VAR 0 5
96892: PPUSH
96893: LD_INT 91
96895: PUSH
96896: LD_VAR 0 4
96900: PUSH
96901: LD_INT 8
96903: PUSH
96904: EMPTY
96905: LIST
96906: LIST
96907: LIST
96908: PPUSH
96909: CALL_OW 72
96913: ST_TO_ADDR
// if nearEnemy then
96914: LD_VAR 0 6
96918: IFFALSE 96987
// begin if GetWeapon ( i ) = ru_time_lapser then
96920: LD_VAR 0 4
96924: PPUSH
96925: CALL_OW 264
96929: PUSH
96930: LD_INT 49
96932: EQUAL
96933: IFFALSE 96961
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
96935: LD_VAR 0 4
96939: PPUSH
96940: LD_VAR 0 6
96944: PPUSH
96945: LD_VAR 0 4
96949: PPUSH
96950: CALL_OW 74
96954: PPUSH
96955: CALL_OW 112
96959: GO 96985
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
96961: LD_VAR 0 4
96965: PPUSH
96966: LD_VAR 0 6
96970: PPUSH
96971: LD_VAR 0 4
96975: PPUSH
96976: CALL_OW 74
96980: PPUSH
96981: CALL 98245 0 2
// end else
96985: GO 97087
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
96987: LD_VAR 0 4
96991: PPUSH
96992: LD_VAR 0 2
96996: PUSH
96997: LD_VAR 0 9
97001: ARRAY
97002: PUSH
97003: LD_INT 1
97005: ARRAY
97006: PPUSH
97007: LD_VAR 0 2
97011: PUSH
97012: LD_VAR 0 9
97016: ARRAY
97017: PUSH
97018: LD_INT 2
97020: ARRAY
97021: PPUSH
97022: CALL_OW 297
97026: PUSH
97027: LD_INT 6
97029: GREATER
97030: IFFALSE 97073
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
97032: LD_VAR 0 4
97036: PPUSH
97037: LD_VAR 0 2
97041: PUSH
97042: LD_VAR 0 9
97046: ARRAY
97047: PUSH
97048: LD_INT 1
97050: ARRAY
97051: PPUSH
97052: LD_VAR 0 2
97056: PUSH
97057: LD_VAR 0 9
97061: ARRAY
97062: PUSH
97063: LD_INT 2
97065: ARRAY
97066: PPUSH
97067: CALL_OW 114
97071: GO 97087
// SetTag ( i , tag ) ;
97073: LD_VAR 0 4
97077: PPUSH
97078: LD_VAR 0 9
97082: PPUSH
97083: CALL_OW 109
// end else
97087: GO 97160
// if enemy then
97089: LD_VAR 0 5
97093: IFFALSE 97160
// begin if GetWeapon ( i ) = ru_time_lapser then
97095: LD_VAR 0 4
97099: PPUSH
97100: CALL_OW 264
97104: PUSH
97105: LD_INT 49
97107: EQUAL
97108: IFFALSE 97136
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
97110: LD_VAR 0 4
97114: PPUSH
97115: LD_VAR 0 5
97119: PPUSH
97120: LD_VAR 0 4
97124: PPUSH
97125: CALL_OW 74
97129: PPUSH
97130: CALL_OW 112
97134: GO 97160
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
97136: LD_VAR 0 4
97140: PPUSH
97141: LD_VAR 0 5
97145: PPUSH
97146: LD_VAR 0 4
97150: PPUSH
97151: CALL_OW 74
97155: PPUSH
97156: CALL 98245 0 2
// end ; end ;
97160: GO 96732
97162: POP
97163: POP
// end ;
97164: LD_VAR 0 3
97168: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
97169: LD_INT 0
97171: PPUSH
97172: PPUSH
97173: PPUSH
// if not unit or IsInUnit ( unit ) then
97174: LD_VAR 0 1
97178: NOT
97179: IFTRUE 97192
97181: PUSH
97182: LD_VAR 0 1
97186: PPUSH
97187: CALL_OW 310
97191: OR
97192: IFFALSE 97196
// exit ;
97194: GO 97287
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
97196: LD_ADDR_VAR 0 4
97200: PUSH
97201: LD_VAR 0 1
97205: PPUSH
97206: CALL_OW 250
97210: PPUSH
97211: LD_VAR 0 2
97215: PPUSH
97216: LD_INT 1
97218: PPUSH
97219: CALL_OW 272
97223: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
97224: LD_ADDR_VAR 0 5
97228: PUSH
97229: LD_VAR 0 1
97233: PPUSH
97234: CALL_OW 251
97238: PPUSH
97239: LD_VAR 0 2
97243: PPUSH
97244: LD_INT 1
97246: PPUSH
97247: CALL_OW 273
97251: ST_TO_ADDR
// if ValidHex ( x , y ) then
97252: LD_VAR 0 4
97256: PPUSH
97257: LD_VAR 0 5
97261: PPUSH
97262: CALL_OW 488
97266: IFFALSE 97287
// ComTurnXY ( unit , x , y ) ;
97268: LD_VAR 0 1
97272: PPUSH
97273: LD_VAR 0 4
97277: PPUSH
97278: LD_VAR 0 5
97282: PPUSH
97283: CALL_OW 118
// end ;
97287: LD_VAR 0 3
97291: RET
// export function SeeUnits ( side , units ) ; var i ; begin
97292: LD_INT 0
97294: PPUSH
97295: PPUSH
// result := false ;
97296: LD_ADDR_VAR 0 3
97300: PUSH
97301: LD_INT 0
97303: ST_TO_ADDR
// if not units then
97304: LD_VAR 0 2
97308: NOT
97309: IFFALSE 97313
// exit ;
97311: GO 97358
// for i in units do
97313: LD_ADDR_VAR 0 4
97317: PUSH
97318: LD_VAR 0 2
97322: PUSH
97323: FOR_IN
97324: IFFALSE 97356
// if See ( side , i ) then
97326: LD_VAR 0 1
97330: PPUSH
97331: LD_VAR 0 4
97335: PPUSH
97336: CALL_OW 292
97340: IFFALSE 97354
// begin result := true ;
97342: LD_ADDR_VAR 0 3
97346: PUSH
97347: LD_INT 1
97349: ST_TO_ADDR
// exit ;
97350: POP
97351: POP
97352: GO 97358
// end ;
97354: GO 97323
97356: POP
97357: POP
// end ;
97358: LD_VAR 0 3
97362: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
97363: LD_INT 0
97365: PPUSH
97366: PPUSH
97367: PPUSH
97368: PPUSH
// if not unit or not points then
97369: LD_VAR 0 1
97373: NOT
97374: IFTRUE 97383
97376: PUSH
97377: LD_VAR 0 2
97381: NOT
97382: OR
97383: IFFALSE 97387
// exit ;
97385: GO 97477
// dist := 99999 ;
97387: LD_ADDR_VAR 0 5
97391: PUSH
97392: LD_INT 99999
97394: ST_TO_ADDR
// for i in points do
97395: LD_ADDR_VAR 0 4
97399: PUSH
97400: LD_VAR 0 2
97404: PUSH
97405: FOR_IN
97406: IFFALSE 97475
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
97408: LD_ADDR_VAR 0 6
97412: PUSH
97413: LD_VAR 0 1
97417: PPUSH
97418: LD_VAR 0 4
97422: PUSH
97423: LD_INT 1
97425: ARRAY
97426: PPUSH
97427: LD_VAR 0 4
97431: PUSH
97432: LD_INT 2
97434: ARRAY
97435: PPUSH
97436: CALL_OW 297
97440: ST_TO_ADDR
// if tmpDist < dist then
97441: LD_VAR 0 6
97445: PUSH
97446: LD_VAR 0 5
97450: LESS
97451: IFFALSE 97473
// begin result := i ;
97453: LD_ADDR_VAR 0 3
97457: PUSH
97458: LD_VAR 0 4
97462: ST_TO_ADDR
// dist := tmpDist ;
97463: LD_ADDR_VAR 0 5
97467: PUSH
97468: LD_VAR 0 6
97472: ST_TO_ADDR
// end ; end ;
97473: GO 97405
97475: POP
97476: POP
// end ;
97477: LD_VAR 0 3
97481: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
97482: LD_INT 0
97484: PPUSH
// uc_side := side ;
97485: LD_ADDR_OWVAR 20
97489: PUSH
97490: LD_VAR 0 1
97494: ST_TO_ADDR
// uc_nation := 3 ;
97495: LD_ADDR_OWVAR 21
97499: PUSH
97500: LD_INT 3
97502: ST_TO_ADDR
// vc_chassis := 25 ;
97503: LD_ADDR_OWVAR 37
97507: PUSH
97508: LD_INT 25
97510: ST_TO_ADDR
// vc_engine := engine_siberite ;
97511: LD_ADDR_OWVAR 39
97515: PUSH
97516: LD_INT 3
97518: ST_TO_ADDR
// vc_control := control_computer ;
97519: LD_ADDR_OWVAR 38
97523: PUSH
97524: LD_INT 3
97526: ST_TO_ADDR
// vc_weapon := 59 ;
97527: LD_ADDR_OWVAR 40
97531: PUSH
97532: LD_INT 59
97534: ST_TO_ADDR
// result := CreateVehicle ;
97535: LD_ADDR_VAR 0 5
97539: PUSH
97540: CALL_OW 45
97544: ST_TO_ADDR
// SetDir ( result , d ) ;
97545: LD_VAR 0 5
97549: PPUSH
97550: LD_VAR 0 4
97554: PPUSH
97555: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
97559: LD_VAR 0 5
97563: PPUSH
97564: LD_VAR 0 2
97568: PPUSH
97569: LD_VAR 0 3
97573: PPUSH
97574: LD_INT 0
97576: PPUSH
97577: CALL_OW 48
// end ;
97581: LD_VAR 0 5
97585: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
97586: LD_INT 0
97588: PPUSH
97589: PPUSH
97590: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
97591: LD_ADDR_VAR 0 2
97595: PUSH
97596: LD_INT 0
97598: PUSH
97599: LD_INT 0
97601: PUSH
97602: LD_INT 0
97604: PUSH
97605: LD_INT 0
97607: PUSH
97608: EMPTY
97609: LIST
97610: LIST
97611: LIST
97612: LIST
97613: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
97614: LD_VAR 0 1
97618: NOT
97619: IFTRUE 97652
97621: PUSH
97622: LD_VAR 0 1
97626: PPUSH
97627: CALL_OW 264
97631: PUSH
97632: LD_INT 12
97634: PUSH
97635: LD_INT 51
97637: PUSH
97638: LD_INT 32
97640: PUSH
97641: LD_INT 89
97643: PUSH
97644: EMPTY
97645: LIST
97646: LIST
97647: LIST
97648: LIST
97649: IN
97650: NOT
97651: OR
97652: IFFALSE 97656
// exit ;
97654: GO 97754
// for i := 1 to 3 do
97656: LD_ADDR_VAR 0 3
97660: PUSH
97661: DOUBLE
97662: LD_INT 1
97664: DEC
97665: ST_TO_ADDR
97666: LD_INT 3
97668: PUSH
97669: FOR_TO
97670: IFFALSE 97752
// begin tmp := GetCargo ( cargo , i ) ;
97672: LD_ADDR_VAR 0 4
97676: PUSH
97677: LD_VAR 0 1
97681: PPUSH
97682: LD_VAR 0 3
97686: PPUSH
97687: CALL_OW 289
97691: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
97692: LD_ADDR_VAR 0 2
97696: PUSH
97697: LD_VAR 0 2
97701: PPUSH
97702: LD_VAR 0 3
97706: PPUSH
97707: LD_VAR 0 4
97711: PPUSH
97712: CALL_OW 1
97716: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
97717: LD_ADDR_VAR 0 2
97721: PUSH
97722: LD_VAR 0 2
97726: PPUSH
97727: LD_INT 4
97729: PPUSH
97730: LD_VAR 0 2
97734: PUSH
97735: LD_INT 4
97737: ARRAY
97738: PUSH
97739: LD_VAR 0 4
97743: PLUS
97744: PPUSH
97745: CALL_OW 1
97749: ST_TO_ADDR
// end ;
97750: GO 97669
97752: POP
97753: POP
// end ;
97754: LD_VAR 0 2
97758: RET
// export function Length ( array ) ; begin
97759: LD_INT 0
97761: PPUSH
// result := array + 0 ;
97762: LD_ADDR_VAR 0 2
97766: PUSH
97767: LD_VAR 0 1
97771: PUSH
97772: LD_INT 0
97774: PLUS
97775: ST_TO_ADDR
// end ;
97776: LD_VAR 0 2
97780: RET
// export function PrepareArray ( array ) ; begin
97781: LD_INT 0
97783: PPUSH
// result := array diff 0 ;
97784: LD_ADDR_VAR 0 2
97788: PUSH
97789: LD_VAR 0 1
97793: PUSH
97794: LD_INT 0
97796: DIFF
97797: ST_TO_ADDR
// if not result [ 1 ] then
97798: LD_VAR 0 2
97802: PUSH
97803: LD_INT 1
97805: ARRAY
97806: NOT
97807: IFFALSE 97827
// result := Delete ( result , 1 ) ;
97809: LD_ADDR_VAR 0 2
97813: PUSH
97814: LD_VAR 0 2
97818: PPUSH
97819: LD_INT 1
97821: PPUSH
97822: CALL_OW 3
97826: ST_TO_ADDR
// end ;
97827: LD_VAR 0 2
97831: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
97832: LD_INT 0
97834: PPUSH
97835: PPUSH
97836: PPUSH
97837: PPUSH
// sibRocketRange := 25 ;
97838: LD_ADDR_VAR 0 6
97842: PUSH
97843: LD_INT 25
97845: ST_TO_ADDR
// result := false ;
97846: LD_ADDR_VAR 0 4
97850: PUSH
97851: LD_INT 0
97853: ST_TO_ADDR
// for i := 0 to 5 do
97854: LD_ADDR_VAR 0 5
97858: PUSH
97859: DOUBLE
97860: LD_INT 0
97862: DEC
97863: ST_TO_ADDR
97864: LD_INT 5
97866: PUSH
97867: FOR_TO
97868: IFFALSE 97935
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
97870: LD_VAR 0 1
97874: PPUSH
97875: LD_VAR 0 5
97879: PPUSH
97880: LD_VAR 0 6
97884: PPUSH
97885: CALL_OW 272
97889: PPUSH
97890: LD_VAR 0 2
97894: PPUSH
97895: LD_VAR 0 5
97899: PPUSH
97900: LD_VAR 0 6
97904: PPUSH
97905: CALL_OW 273
97909: PPUSH
97910: LD_VAR 0 3
97914: PPUSH
97915: CALL_OW 309
97919: IFFALSE 97933
// begin result := true ;
97921: LD_ADDR_VAR 0 4
97925: PUSH
97926: LD_INT 1
97928: ST_TO_ADDR
// exit ;
97929: POP
97930: POP
97931: GO 97937
// end ;
97933: GO 97867
97935: POP
97936: POP
// end ;
97937: LD_VAR 0 4
97941: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
97942: LD_INT 0
97944: PPUSH
97945: PPUSH
97946: PPUSH
// if btype = b_depot then
97947: LD_VAR 0 2
97951: PUSH
97952: LD_INT 0
97954: EQUAL
97955: IFFALSE 97967
// begin result := true ;
97957: LD_ADDR_VAR 0 3
97961: PUSH
97962: LD_INT 1
97964: ST_TO_ADDR
// exit ;
97965: GO 98087
// end ; pom := GetBase ( depot ) ;
97967: LD_ADDR_VAR 0 4
97971: PUSH
97972: LD_VAR 0 1
97976: PPUSH
97977: CALL_OW 274
97981: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
97982: LD_ADDR_VAR 0 5
97986: PUSH
97987: LD_VAR 0 2
97991: PPUSH
97992: LD_VAR 0 1
97996: PPUSH
97997: CALL_OW 248
98001: PPUSH
98002: CALL_OW 450
98006: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
98007: LD_ADDR_VAR 0 3
98011: PUSH
98012: LD_VAR 0 4
98016: PPUSH
98017: LD_INT 1
98019: PPUSH
98020: CALL_OW 275
98024: PUSH
98025: LD_VAR 0 5
98029: PUSH
98030: LD_INT 1
98032: ARRAY
98033: GREATEREQUAL
98034: IFFALSE 98060
98036: PUSH
98037: LD_VAR 0 4
98041: PPUSH
98042: LD_INT 2
98044: PPUSH
98045: CALL_OW 275
98049: PUSH
98050: LD_VAR 0 5
98054: PUSH
98055: LD_INT 2
98057: ARRAY
98058: GREATEREQUAL
98059: AND
98060: IFFALSE 98086
98062: PUSH
98063: LD_VAR 0 4
98067: PPUSH
98068: LD_INT 3
98070: PPUSH
98071: CALL_OW 275
98075: PUSH
98076: LD_VAR 0 5
98080: PUSH
98081: LD_INT 3
98083: ARRAY
98084: GREATEREQUAL
98085: AND
98086: ST_TO_ADDR
// end ;
98087: LD_VAR 0 3
98091: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
98092: LD_INT 0
98094: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
98095: LD_VAR 0 1
98099: PPUSH
98100: LD_VAR 0 2
98104: PPUSH
98105: LD_INT 0
98107: PPUSH
98108: LD_INT 0
98110: PPUSH
98111: LD_INT 1
98113: PPUSH
98114: LD_INT 0
98116: PPUSH
98117: CALL_OW 587
// end ;
98121: LD_VAR 0 3
98125: RET
// export function CenterOnNow ( unit ) ; begin
98126: LD_INT 0
98128: PPUSH
// result := IsInUnit ( unit ) ;
98129: LD_ADDR_VAR 0 2
98133: PUSH
98134: LD_VAR 0 1
98138: PPUSH
98139: CALL_OW 310
98143: ST_TO_ADDR
// if not result then
98144: LD_VAR 0 2
98148: NOT
98149: IFFALSE 98161
// result := unit ;
98151: LD_ADDR_VAR 0 2
98155: PUSH
98156: LD_VAR 0 1
98160: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
98161: LD_VAR 0 1
98165: PPUSH
98166: CALL_OW 87
// end ;
98170: LD_VAR 0 2
98174: RET
// export function ComMoveHex ( unit , hex ) ; begin
98175: LD_INT 0
98177: PPUSH
// if not hex then
98178: LD_VAR 0 2
98182: NOT
98183: IFFALSE 98187
// exit ;
98185: GO 98240
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
98187: LD_VAR 0 2
98191: PUSH
98192: LD_INT 1
98194: ARRAY
98195: PPUSH
98196: LD_VAR 0 2
98200: PUSH
98201: LD_INT 2
98203: ARRAY
98204: PPUSH
98205: CALL_OW 428
98209: IFFALSE 98213
// exit ;
98211: GO 98240
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
98213: LD_VAR 0 1
98217: PPUSH
98218: LD_VAR 0 2
98222: PUSH
98223: LD_INT 1
98225: ARRAY
98226: PPUSH
98227: LD_VAR 0 2
98231: PUSH
98232: LD_INT 2
98234: ARRAY
98235: PPUSH
98236: CALL_OW 111
// end ;
98240: LD_VAR 0 3
98244: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
98245: LD_INT 0
98247: PPUSH
98248: PPUSH
98249: PPUSH
// if not unit or not enemy then
98250: LD_VAR 0 1
98254: NOT
98255: IFTRUE 98264
98257: PUSH
98258: LD_VAR 0 2
98262: NOT
98263: OR
98264: IFFALSE 98268
// exit ;
98266: GO 98394
// x := GetX ( enemy ) ;
98268: LD_ADDR_VAR 0 4
98272: PUSH
98273: LD_VAR 0 2
98277: PPUSH
98278: CALL_OW 250
98282: ST_TO_ADDR
// y := GetY ( enemy ) ;
98283: LD_ADDR_VAR 0 5
98287: PUSH
98288: LD_VAR 0 2
98292: PPUSH
98293: CALL_OW 251
98297: ST_TO_ADDR
// if ValidHex ( x , y ) then
98298: LD_VAR 0 4
98302: PPUSH
98303: LD_VAR 0 5
98307: PPUSH
98308: CALL_OW 488
98312: IFFALSE 98394
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
98314: LD_VAR 0 2
98318: PPUSH
98319: CALL_OW 247
98323: PUSH
98324: LD_INT 3
98326: PUSH
98327: LD_INT 2
98329: PUSH
98330: EMPTY
98331: LIST
98332: LIST
98333: IN
98334: IFTRUE 98357
98336: PUSH
98337: LD_VAR 0 1
98341: PPUSH
98342: CALL_OW 255
98346: PPUSH
98347: LD_VAR 0 2
98351: PPUSH
98352: CALL_OW 292
98356: OR
98357: IFFALSE 98375
// ComAttackUnit ( unit , enemy ) else
98359: LD_VAR 0 1
98363: PPUSH
98364: LD_VAR 0 2
98368: PPUSH
98369: CALL_OW 115
98373: GO 98394
// ComAgressiveMove ( unit , x , y ) ;
98375: LD_VAR 0 1
98379: PPUSH
98380: LD_VAR 0 4
98384: PPUSH
98385: LD_VAR 0 5
98389: PPUSH
98390: CALL_OW 114
// end ;
98394: LD_VAR 0 3
98398: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
98399: LD_INT 0
98401: PPUSH
98402: PPUSH
98403: PPUSH
// list := AreaToList ( area , 0 ) ;
98404: LD_ADDR_VAR 0 5
98408: PUSH
98409: LD_VAR 0 1
98413: PPUSH
98414: LD_INT 0
98416: PPUSH
98417: CALL_OW 517
98421: ST_TO_ADDR
// if not list then
98422: LD_VAR 0 5
98426: NOT
98427: IFFALSE 98431
// exit ;
98429: GO 98561
// if all then
98431: LD_VAR 0 2
98435: IFFALSE 98523
// begin for i := 1 to list [ 1 ] do
98437: LD_ADDR_VAR 0 4
98441: PUSH
98442: DOUBLE
98443: LD_INT 1
98445: DEC
98446: ST_TO_ADDR
98447: LD_VAR 0 5
98451: PUSH
98452: LD_INT 1
98454: ARRAY
98455: PUSH
98456: FOR_TO
98457: IFFALSE 98519
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
98459: LD_ADDR_VAR 0 3
98463: PUSH
98464: LD_VAR 0 3
98468: PPUSH
98469: LD_VAR 0 3
98473: PUSH
98474: LD_INT 1
98476: PLUS
98477: PPUSH
98478: LD_VAR 0 5
98482: PUSH
98483: LD_INT 1
98485: ARRAY
98486: PUSH
98487: LD_VAR 0 4
98491: ARRAY
98492: PUSH
98493: LD_VAR 0 5
98497: PUSH
98498: LD_INT 2
98500: ARRAY
98501: PUSH
98502: LD_VAR 0 4
98506: ARRAY
98507: PUSH
98508: EMPTY
98509: LIST
98510: LIST
98511: PPUSH
98512: CALL_OW 1
98516: ST_TO_ADDR
98517: GO 98456
98519: POP
98520: POP
// exit ;
98521: GO 98561
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
98523: LD_ADDR_VAR 0 3
98527: PUSH
98528: LD_VAR 0 5
98532: PUSH
98533: LD_INT 1
98535: ARRAY
98536: PUSH
98537: LD_INT 1
98539: ARRAY
98540: PUSH
98541: LD_VAR 0 5
98545: PUSH
98546: LD_INT 2
98548: ARRAY
98549: PUSH
98550: LD_INT 1
98552: ARRAY
98553: PUSH
98554: EMPTY
98555: LIST
98556: LIST
98557: PUSH
98558: EMPTY
98559: LIST
98560: ST_TO_ADDR
// end ;
98561: LD_VAR 0 3
98565: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
98566: LD_INT 0
98568: PPUSH
98569: PPUSH
// list := AreaToList ( area , 0 ) ;
98570: LD_ADDR_VAR 0 4
98574: PUSH
98575: LD_VAR 0 1
98579: PPUSH
98580: LD_INT 0
98582: PPUSH
98583: CALL_OW 517
98587: ST_TO_ADDR
// if not list then
98588: LD_VAR 0 4
98592: NOT
98593: IFFALSE 98597
// exit ;
98595: GO 98638
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
98597: LD_ADDR_VAR 0 3
98601: PUSH
98602: LD_VAR 0 4
98606: PUSH
98607: LD_INT 1
98609: ARRAY
98610: PUSH
98611: LD_INT 1
98613: ARRAY
98614: PUSH
98615: LD_VAR 0 4
98619: PUSH
98620: LD_INT 2
98622: ARRAY
98623: PUSH
98624: LD_INT 1
98626: ARRAY
98627: PUSH
98628: LD_VAR 0 2
98632: PUSH
98633: EMPTY
98634: LIST
98635: LIST
98636: LIST
98637: ST_TO_ADDR
// end ;
98638: LD_VAR 0 3
98642: RET
// export function First ( array ) ; begin
98643: LD_INT 0
98645: PPUSH
// if not array then
98646: LD_VAR 0 1
98650: NOT
98651: IFFALSE 98655
// exit ;
98653: GO 98669
// result := array [ 1 ] ;
98655: LD_ADDR_VAR 0 2
98659: PUSH
98660: LD_VAR 0 1
98664: PUSH
98665: LD_INT 1
98667: ARRAY
98668: ST_TO_ADDR
// end ;
98669: LD_VAR 0 2
98673: RET
// export function Last ( array ) ; begin
98674: LD_INT 0
98676: PPUSH
// if not array then
98677: LD_VAR 0 1
98681: NOT
98682: IFFALSE 98686
// exit ;
98684: GO 98702
// result := array [ array ] ;
98686: LD_ADDR_VAR 0 2
98690: PUSH
98691: LD_VAR 0 1
98695: PUSH
98696: LD_VAR 0 1
98700: ARRAY
98701: ST_TO_ADDR
// end ;
98702: LD_VAR 0 2
98706: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
98707: LD_INT 0
98709: PPUSH
98710: PPUSH
// result := [ ] ;
98711: LD_ADDR_VAR 0 5
98715: PUSH
98716: EMPTY
98717: ST_TO_ADDR
// if not array then
98718: LD_VAR 0 1
98722: NOT
98723: IFFALSE 98727
// exit ;
98725: GO 98839
// for i := 1 to array do
98727: LD_ADDR_VAR 0 6
98731: PUSH
98732: DOUBLE
98733: LD_INT 1
98735: DEC
98736: ST_TO_ADDR
98737: LD_VAR 0 1
98741: PUSH
98742: FOR_TO
98743: IFFALSE 98837
// if array [ i ] [ index ] = value then
98745: LD_VAR 0 1
98749: PUSH
98750: LD_VAR 0 6
98754: ARRAY
98755: PUSH
98756: LD_VAR 0 2
98760: ARRAY
98761: PUSH
98762: LD_VAR 0 3
98766: EQUAL
98767: IFFALSE 98835
// begin if indexColumn then
98769: LD_VAR 0 4
98773: IFFALSE 98809
// result := Join ( result , array [ i ] [ indexColumn ] ) else
98775: LD_ADDR_VAR 0 5
98779: PUSH
98780: LD_VAR 0 5
98784: PPUSH
98785: LD_VAR 0 1
98789: PUSH
98790: LD_VAR 0 6
98794: ARRAY
98795: PUSH
98796: LD_VAR 0 4
98800: ARRAY
98801: PPUSH
98802: CALL 93847 0 2
98806: ST_TO_ADDR
98807: GO 98835
// result := Join ( result , array [ i ] ) ;
98809: LD_ADDR_VAR 0 5
98813: PUSH
98814: LD_VAR 0 5
98818: PPUSH
98819: LD_VAR 0 1
98823: PUSH
98824: LD_VAR 0 6
98828: ARRAY
98829: PPUSH
98830: CALL 93847 0 2
98834: ST_TO_ADDR
// end ;
98835: GO 98742
98837: POP
98838: POP
// end ;
98839: LD_VAR 0 5
98843: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
98844: LD_INT 0
98846: PPUSH
// if not vehicles or not parkingPoint then
98847: LD_VAR 0 1
98851: NOT
98852: IFTRUE 98861
98854: PUSH
98855: LD_VAR 0 2
98859: NOT
98860: OR
98861: IFFALSE 98865
// exit ;
98863: GO 98963
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
98865: LD_ADDR_VAR 0 1
98869: PUSH
98870: LD_VAR 0 1
98874: PPUSH
98875: LD_INT 50
98877: PUSH
98878: EMPTY
98879: LIST
98880: PUSH
98881: LD_INT 3
98883: PUSH
98884: LD_INT 92
98886: PUSH
98887: LD_VAR 0 2
98891: PUSH
98892: LD_INT 1
98894: ARRAY
98895: PUSH
98896: LD_VAR 0 2
98900: PUSH
98901: LD_INT 2
98903: ARRAY
98904: PUSH
98905: LD_INT 8
98907: PUSH
98908: EMPTY
98909: LIST
98910: LIST
98911: LIST
98912: LIST
98913: PUSH
98914: EMPTY
98915: LIST
98916: LIST
98917: PUSH
98918: EMPTY
98919: LIST
98920: LIST
98921: PPUSH
98922: CALL_OW 72
98926: ST_TO_ADDR
// if not vehicles then
98927: LD_VAR 0 1
98931: NOT
98932: IFFALSE 98936
// exit ;
98934: GO 98963
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
98936: LD_VAR 0 1
98940: PPUSH
98941: LD_VAR 0 2
98945: PUSH
98946: LD_INT 1
98948: ARRAY
98949: PPUSH
98950: LD_VAR 0 2
98954: PUSH
98955: LD_INT 2
98957: ARRAY
98958: PPUSH
98959: CALL_OW 111
// end ;
98963: LD_VAR 0 3
98967: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
98968: LD_INT 0
98970: PPUSH
98971: PPUSH
98972: PPUSH
// if not side or not area then
98973: LD_VAR 0 1
98977: NOT
98978: IFTRUE 98987
98980: PUSH
98981: LD_VAR 0 2
98985: NOT
98986: OR
98987: IFFALSE 98991
// exit ;
98989: GO 99110
// tmp := AreaToList ( area , 0 ) ;
98991: LD_ADDR_VAR 0 5
98995: PUSH
98996: LD_VAR 0 2
99000: PPUSH
99001: LD_INT 0
99003: PPUSH
99004: CALL_OW 517
99008: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
99009: LD_ADDR_VAR 0 4
99013: PUSH
99014: DOUBLE
99015: LD_INT 1
99017: DEC
99018: ST_TO_ADDR
99019: LD_VAR 0 5
99023: PUSH
99024: LD_INT 1
99026: ARRAY
99027: PUSH
99028: FOR_TO
99029: IFFALSE 99108
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
99031: LD_VAR 0 5
99035: PUSH
99036: LD_INT 1
99038: ARRAY
99039: PUSH
99040: LD_VAR 0 4
99044: ARRAY
99045: PPUSH
99046: LD_VAR 0 5
99050: PUSH
99051: LD_INT 2
99053: ARRAY
99054: PUSH
99055: LD_VAR 0 4
99059: ARRAY
99060: PPUSH
99061: CALL_OW 351
99065: IFFALSE 99106
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
99067: LD_VAR 0 5
99071: PUSH
99072: LD_INT 1
99074: ARRAY
99075: PUSH
99076: LD_VAR 0 4
99080: ARRAY
99081: PPUSH
99082: LD_VAR 0 5
99086: PUSH
99087: LD_INT 2
99089: ARRAY
99090: PUSH
99091: LD_VAR 0 4
99095: ARRAY
99096: PPUSH
99097: LD_VAR 0 1
99101: PPUSH
99102: CALL_OW 244
// end ;
99106: GO 99028
99108: POP
99109: POP
// end ; end_of_file
99110: LD_VAR 0 3
99114: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
99115: LD_VAR 0 1
99119: PUSH
99120: LD_INT 200
99122: DOUBLE
99123: GREATEREQUAL
99124: IFFALSE 99132
99126: LD_INT 299
99128: DOUBLE
99129: LESSEQUAL
99130: IFTRUE 99134
99132: GO 99166
99134: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
99135: LD_VAR 0 1
99139: PPUSH
99140: LD_VAR 0 2
99144: PPUSH
99145: LD_VAR 0 3
99149: PPUSH
99150: LD_VAR 0 4
99154: PPUSH
99155: LD_VAR 0 5
99159: PPUSH
99160: CALL 50958 0 5
99164: GO 99243
99166: LD_INT 300
99168: DOUBLE
99169: GREATEREQUAL
99170: IFFALSE 99178
99172: LD_INT 399
99174: DOUBLE
99175: LESSEQUAL
99176: IFTRUE 99180
99178: GO 99242
99180: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
99181: LD_VAR 0 1
99185: PPUSH
99186: LD_VAR 0 2
99190: PPUSH
99191: LD_VAR 0 3
99195: PPUSH
99196: LD_VAR 0 4
99200: PPUSH
99201: LD_VAR 0 5
99205: PPUSH
99206: LD_VAR 0 6
99210: PPUSH
99211: LD_VAR 0 7
99215: PPUSH
99216: LD_VAR 0 8
99220: PPUSH
99221: LD_VAR 0 9
99225: PPUSH
99226: LD_VAR 0 10
99230: PPUSH
99231: LD_VAR 0 11
99235: PPUSH
99236: CALL 46842 0 11
99240: GO 99243
99242: POP
// end ;
99243: PPOPN 11
99245: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
99246: LD_VAR 0 1
99250: PPUSH
99251: LD_VAR 0 2
99255: PPUSH
99256: LD_VAR 0 3
99260: PPUSH
99261: LD_VAR 0 4
99265: PPUSH
99266: LD_VAR 0 5
99270: PPUSH
99271: CALL 50339 0 5
// end ; end_of_file
99275: PPOPN 5
99277: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
99278: LD_VAR 0 1
99282: PPUSH
99283: LD_VAR 0 2
99287: PPUSH
99288: LD_VAR 0 3
99292: PPUSH
99293: LD_VAR 0 4
99297: PPUSH
99298: LD_VAR 0 5
99302: PPUSH
99303: LD_VAR 0 6
99307: PPUSH
99308: CALL 34382 0 6
// end ;
99312: PPOPN 6
99314: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
99315: LD_INT 0
99317: PPUSH
// begin if not units then
99318: LD_VAR 0 1
99322: NOT
99323: IFFALSE 99327
// exit ;
99325: GO 99327
// end ;
99327: PPOPN 7
99329: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
99330: CALL 34269 0 0
// end ;
99334: PPOPN 1
99336: END
