// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export ruMech ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned , ruDepotConstructed , spawnRussians ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog , snipersTrained ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 28
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 20
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 29
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 38
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 39
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 40
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 41
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 42
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 50
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 47
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 46
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 48
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 49
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 61
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// ruMech := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 123: LD_ADDR_EXP 51
 127: PUSH
 128: LD_INT 4
 130: PUSH
 131: LD_INT 5
 133: PUSH
 134: LD_INT 6
 136: PUSH
 137: LD_INT 6
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: PUSH
 146: LD_OWVAR 67
 150: ARRAY
 151: ST_TO_ADDR
// eventVar1 = 0 ;
 152: LD_ADDR_EXP 65
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// eventVar2 = 0 ;
 160: LD_ADDR_EXP 66
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// fastEnd = 0 ;
 168: LD_ADDR_EXP 63
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// KhatamStatus = 0 ;
 176: LD_ADDR_EXP 53
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// GensherStatus = 0 ;
 184: LD_ADDR_EXP 52
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// cratesSpawned = 0 ;
 192: LD_ADDR_EXP 56
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 , 2 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 59
 204: PUSH
 205: LD_INT 1
 207: PUSH
 208: LD_INT 2
 210: PUSH
 211: LD_INT 2
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 , 4 ] [ Difficulty ] ;
 229: LD_ADDR_EXP 60
 233: PUSH
 234: LD_INT 2
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: LD_INT 4
 242: PUSH
 243: LD_INT 4
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: PUSH
 252: LD_OWVAR 67
 256: ARRAY
 257: ST_TO_ADDR
// snipersTrained := false ;
 258: LD_ADDR_EXP 62
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// ruDepotConstructed := false ;
 266: LD_ADDR_EXP 57
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// spawnRussians := false ;
 274: LD_ADDR_EXP 58
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// attackAvalaible = 1 ;
 282: LD_ADDR_EXP 64
 286: PUSH
 287: LD_INT 1
 289: ST_TO_ADDR
// mission_prefix := 10c_ ;
 290: LD_ADDR_EXP 54
 294: PUSH
 295: LD_STRING 10c_
 297: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 298: LD_ADDR_EXP 55
 302: PUSH
 303: LD_STRING 10_
 305: ST_TO_ADDR
// debugMode = 0 ;
 306: LD_ADDR_EXP 67
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// CreateNature ;
 314: CALL 26779 0 0
// PrepareDifficulty ;
 318: CALL 11448 0 0
// PrepareJMMTeam ;
 322: CALL 1370 0 0
// PrepareCathyTeam ;
 326: CALL 2606 0 0
// PlaceMines ( MineField1 , 1 + Difficulty ) ;
 330: LD_INT 24
 332: PPUSH
 333: LD_INT 1
 335: PUSH
 336: LD_OWVAR 67
 340: PLUS
 341: PPUSH
 342: CALL 21308 0 2
// if Difficulty > 1 then
 346: LD_OWVAR 67
 350: PUSH
 351: LD_INT 1
 353: GREATER
 354: IFFALSE 368
// PlaceMines ( MineField2 , Difficulty ) ;
 356: LD_INT 25
 358: PPUSH
 359: LD_OWVAR 67
 363: PPUSH
 364: CALL 21308 0 2
// if Difficulty > 2 then
 368: LD_OWVAR 67
 372: PUSH
 373: LD_INT 2
 375: GREATER
 376: IFFALSE 390
// PlaceMines ( MineField3 , Difficulty ) ;
 378: LD_INT 26
 380: PPUSH
 381: LD_OWVAR 67
 385: PPUSH
 386: CALL 21308 0 2
// PrepareArabianCommander ;
 390: CALL 4088 0 0
// PrepareArabian ;
 394: CALL 4140 0 0
// BuildArabianBase ;
 398: CALL 14263 0 0
// TameApemans ;
 402: CALL 20113 0 0
// end ;
 406: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 407: LD_EXP 67
 411: PUSH
 412: LD_INT 1
 414: EQUAL
 415: IFFALSE 721
 417: GO 419
 419: DISABLE
 420: LD_INT 0
 422: PPUSH
// begin enable ;
 423: ENABLE
// fogoff ( true ) ;
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 431: LD_ADDR_VAR 0 1
 435: PUSH
 436: LD_INT 22
 438: PUSH
 439: LD_INT 1
 441: PUSH
 442: EMPTY
 443: LIST
 444: LIST
 445: PUSH
 446: LD_INT 21
 448: PUSH
 449: LD_INT 1
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: PPUSH
 460: CALL_OW 69
 464: PUSH
 465: FOR_IN
 466: IFFALSE 482
// SetLives ( i , 1000 ) ;
 468: LD_VAR 0 1
 472: PPUSH
 473: LD_INT 1000
 475: PPUSH
 476: CALL_OW 234
 480: GO 465
 482: POP
 483: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 484: LD_ADDR_VAR 0 1
 488: PUSH
 489: LD_INT 22
 491: PUSH
 492: LD_INT 1
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 2
 501: PUSH
 502: LD_INT 30
 504: PUSH
 505: LD_INT 0
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: PUSH
 512: LD_INT 30
 514: PUSH
 515: LD_INT 1
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PUSH
 522: EMPTY
 523: LIST
 524: LIST
 525: LIST
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PPUSH
 531: CALL_OW 69
 535: PUSH
 536: FOR_IN
 537: IFFALSE 561
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 539: LD_VAR 0 1
 543: PPUSH
 544: CALL_OW 274
 548: PPUSH
 549: LD_INT 1
 551: PPUSH
 552: LD_INT 9999
 554: PPUSH
 555: CALL_OW 277
 559: GO 536
 561: POP
 562: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 563: LD_ADDR_VAR 0 1
 567: PUSH
 568: LD_INT 22
 570: PUSH
 571: LD_INT 1
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: LD_INT 2
 580: PUSH
 581: LD_INT 30
 583: PUSH
 584: LD_INT 0
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PUSH
 591: LD_INT 30
 593: PUSH
 594: LD_INT 1
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PPUSH
 610: CALL_OW 69
 614: PUSH
 615: FOR_IN
 616: IFFALSE 640
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 618: LD_VAR 0 1
 622: PPUSH
 623: CALL_OW 274
 627: PPUSH
 628: LD_INT 2
 630: PPUSH
 631: LD_INT 9999
 633: PPUSH
 634: CALL_OW 277
 638: GO 615
 640: POP
 641: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 642: LD_ADDR_VAR 0 1
 646: PUSH
 647: LD_INT 22
 649: PUSH
 650: LD_INT 1
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: PUSH
 657: LD_INT 2
 659: PUSH
 660: LD_INT 30
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 30
 672: PUSH
 673: LD_INT 1
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: LIST
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PPUSH
 689: CALL_OW 69
 693: PUSH
 694: FOR_IN
 695: IFFALSE 719
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 697: LD_VAR 0 1
 701: PPUSH
 702: CALL_OW 274
 706: PPUSH
 707: LD_INT 3
 709: PPUSH
 710: LD_INT 9999
 712: PPUSH
 713: CALL_OW 277
 717: GO 694
 719: POP
 720: POP
// end ;
 721: PPOPN 1
 723: END
// every 0 0$1 trigger FilterAllUnits ( [ f_class , class_sniper ] ) do
 724: LD_INT 25
 726: PUSH
 727: LD_INT 5
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PPUSH
 734: CALL_OW 69
 738: IFFALSE 751
 740: GO 742
 742: DISABLE
// snipersTrained := true ;
 743: LD_ADDR_EXP 62
 747: PUSH
 748: LD_INT 1
 750: ST_TO_ADDR
 751: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_friend and ruDestroyedBuildings and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do
 752: LD_INT 1
 754: PPUSH
 755: LD_INT 2
 757: PPUSH
 758: CALL_OW 81
 762: PUSH
 763: LD_INT 1
 765: EQUAL
 766: PUSH
 767: LD_EXP 42
 771: AND
 772: PUSH
 773: LD_INT 22
 775: PUSH
 776: LD_INT 3
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PUSH
 783: LD_INT 21
 785: PUSH
 786: LD_INT 3
 788: PUSH
 789: EMPTY
 790: LIST
 791: LIST
 792: PUSH
 793: EMPTY
 794: LIST
 795: LIST
 796: PPUSH
 797: CALL_OW 69
 801: PUSH
 802: LD_INT 0
 804: EQUAL
 805: AND
 806: IFFALSE 818
 808: GO 810
 810: DISABLE
// SetAchievement ( ACH_POWER ) ;
 811: LD_STRING ACH_POWER
 813: PPUSH
 814: CALL_OW 543
 818: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 819: LD_INT 22
 821: PUSH
 822: LD_INT 1
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: LD_INT 30
 831: PUSH
 832: LD_INT 1
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PPUSH
 843: CALL_OW 69
 847: PUSH
 848: LD_INT 22
 850: PUSH
 851: LD_INT 1
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: PUSH
 858: LD_INT 30
 860: PUSH
 861: LD_INT 32
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: PUSH
 868: EMPTY
 869: LIST
 870: LIST
 871: PPUSH
 872: CALL_OW 69
 876: AND
 877: PUSH
 878: LD_INT 22
 880: PUSH
 881: LD_INT 1
 883: PUSH
 884: EMPTY
 885: LIST
 886: LIST
 887: PUSH
 888: LD_INT 30
 890: PUSH
 891: LD_INT 33
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: EMPTY
 899: LIST
 900: LIST
 901: PPUSH
 902: CALL_OW 69
 906: AND
 907: PUSH
 908: LD_INT 22
 910: PUSH
 911: LD_INT 1
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: PUSH
 918: LD_INT 30
 920: PUSH
 921: LD_INT 5
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: PUSH
 928: EMPTY
 929: LIST
 930: LIST
 931: PPUSH
 932: CALL_OW 69
 936: AND
 937: PUSH
 938: LD_INT 22
 940: PUSH
 941: LD_INT 1
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PUSH
 948: LD_INT 30
 950: PUSH
 951: LD_INT 3
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: EMPTY
 959: LIST
 960: LIST
 961: PPUSH
 962: CALL_OW 69
 966: AND
 967: PUSH
 968: LD_INT 22
 970: PUSH
 971: LD_INT 1
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: PUSH
 978: LD_INT 30
 980: PUSH
 981: LD_INT 36
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PPUSH
 992: CALL_OW 69
 996: AND
 997: PUSH
 998: LD_INT 22
1000: PUSH
1001: LD_INT 1
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: PUSH
1008: LD_INT 30
1010: PUSH
1011: LD_INT 31
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: PPUSH
1022: CALL_OW 69
1026: AND
1027: PUSH
1028: LD_INT 22
1030: PUSH
1031: LD_INT 1
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: PUSH
1038: LD_INT 30
1040: PUSH
1041: LD_INT 22
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: PPUSH
1052: CALL_OW 69
1056: AND
1057: PUSH
1058: LD_INT 22
1060: PUSH
1061: LD_INT 1
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: LD_INT 30
1070: PUSH
1071: LD_INT 20
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PPUSH
1082: CALL_OW 69
1086: AND
1087: PUSH
1088: LD_INT 22
1090: PUSH
1091: LD_INT 1
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: PUSH
1098: LD_INT 30
1100: PUSH
1101: LD_INT 19
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: PPUSH
1112: CALL_OW 69
1116: AND
1117: PUSH
1118: LD_INT 22
1120: PUSH
1121: LD_INT 1
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: PUSH
1128: LD_INT 30
1130: PUSH
1131: LD_INT 16
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: PPUSH
1142: CALL_OW 69
1146: AND
1147: PUSH
1148: LD_INT 22
1150: PUSH
1151: LD_INT 1
1153: PUSH
1154: EMPTY
1155: LIST
1156: LIST
1157: PUSH
1158: LD_INT 30
1160: PUSH
1161: LD_INT 17
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: PPUSH
1172: CALL_OW 69
1176: AND
1177: PUSH
1178: LD_INT 22
1180: PUSH
1181: LD_INT 1
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: LD_INT 30
1190: PUSH
1191: LD_INT 21
1193: PUSH
1194: EMPTY
1195: LIST
1196: LIST
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: PPUSH
1202: CALL_OW 69
1206: AND
1207: PUSH
1208: LD_INT 22
1210: PUSH
1211: LD_INT 1
1213: PUSH
1214: EMPTY
1215: LIST
1216: LIST
1217: PUSH
1218: LD_INT 30
1220: PUSH
1221: LD_INT 29
1223: PUSH
1224: EMPTY
1225: LIST
1226: LIST
1227: PUSH
1228: EMPTY
1229: LIST
1230: LIST
1231: PPUSH
1232: CALL_OW 69
1236: AND
1237: PUSH
1238: LD_INT 22
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 30
1250: PUSH
1251: LD_INT 30
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: PPUSH
1262: CALL_OW 69
1266: AND
1267: PUSH
1268: LD_INT 22
1270: PUSH
1271: LD_INT 1
1273: PUSH
1274: EMPTY
1275: LIST
1276: LIST
1277: PUSH
1278: LD_INT 30
1280: PUSH
1281: LD_INT 27
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PPUSH
1292: CALL_OW 69
1296: AND
1297: PUSH
1298: LD_INT 22
1300: PUSH
1301: LD_INT 1
1303: PUSH
1304: EMPTY
1305: LIST
1306: LIST
1307: PUSH
1308: LD_INT 30
1310: PUSH
1311: LD_INT 26
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PPUSH
1322: CALL_OW 69
1326: AND
1327: PUSH
1328: LD_INT 22
1330: PUSH
1331: LD_INT 1
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PUSH
1338: LD_INT 30
1340: PUSH
1341: LD_INT 28
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PPUSH
1352: CALL_OW 69
1356: AND
1357: IFFALSE 1369
1359: GO 1361
1361: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1362: LD_STRING ACH_ARCH
1364: PPUSH
1365: CALL_OW 543
1369: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
1370: LD_INT 0
1372: PPUSH
1373: PPUSH
1374: PPUSH
1375: PPUSH
1376: PPUSH
1377: PPUSH
// uc_side = 1 ;
1378: LD_ADDR_OWVAR 20
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// uc_nation = 1 ;
1386: LD_ADDR_OWVAR 21
1390: PUSH
1391: LD_INT 1
1393: ST_TO_ADDR
// count = 0 ;
1394: LD_ADDR_VAR 0 6
1398: PUSH
1399: LD_INT 0
1401: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 10_ ) ;
1402: LD_ADDR_EXP 1
1406: PUSH
1407: LD_STRING JMM
1409: PPUSH
1410: LD_INT 1
1412: PPUSH
1413: LD_STRING 10_
1415: PPUSH
1416: CALL 47631 0 3
1420: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
1421: LD_ADDR_EXP 20
1425: PUSH
1426: LD_EXP 20
1430: PUSH
1431: LD_EXP 1
1435: ADD
1436: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 10_ ) ;
1437: LD_ADDR_EXP 10
1441: PUSH
1442: LD_STRING Gary
1444: PPUSH
1445: LD_INT 1
1447: PPUSH
1448: LD_STRING 10_
1450: PPUSH
1451: CALL 47631 0 3
1455: ST_TO_ADDR
// if Gary then
1456: LD_EXP 10
1460: IFFALSE 1478
// JMMSquad = JMMSquad ^ Gary ;
1462: LD_ADDR_EXP 20
1466: PUSH
1467: LD_EXP 20
1471: PUSH
1472: LD_EXP 10
1476: ADD
1477: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , 10_ ) ;
1478: LD_ADDR_EXP 5
1482: PUSH
1483: LD_STRING Cyrus
1485: PPUSH
1486: LD_INT 1
1488: PPUSH
1489: LD_STRING 10_
1491: PPUSH
1492: CALL 47631 0 3
1496: ST_TO_ADDR
// if Cyrus then
1497: LD_EXP 5
1501: IFFALSE 1519
// JMMSquad = JMMSquad ^ Cyrus ;
1503: LD_ADDR_EXP 20
1507: PUSH
1508: LD_EXP 20
1512: PUSH
1513: LD_EXP 5
1517: ADD
1518: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , 10_ ) ;
1519: LD_ADDR_EXP 4
1523: PUSH
1524: LD_STRING Bobby
1526: PPUSH
1527: LD_INT 1
1529: PPUSH
1530: LD_STRING 10_
1532: PPUSH
1533: CALL 47631 0 3
1537: ST_TO_ADDR
// if Bobby then
1538: LD_EXP 4
1542: IFFALSE 1560
// JMMSquad = JMMSquad ^ Bobby ;
1544: LD_ADDR_EXP 20
1548: PUSH
1549: LD_EXP 20
1553: PUSH
1554: LD_EXP 4
1558: ADD
1559: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , 10_ ) ;
1560: LD_ADDR_EXP 6
1564: PUSH
1565: LD_STRING Lisa
1567: PPUSH
1568: LD_INT 1
1570: PPUSH
1571: LD_STRING 10_
1573: PPUSH
1574: CALL 47631 0 3
1578: ST_TO_ADDR
// if Lisa then
1579: LD_EXP 6
1583: IFFALSE 1601
// JMMSquad = JMMSquad ^ Lisa ;
1585: LD_ADDR_EXP 20
1589: PUSH
1590: LD_EXP 20
1594: PUSH
1595: LD_EXP 6
1599: ADD
1600: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , 10_ ) ;
1601: LD_ADDR_EXP 2
1605: PUSH
1606: LD_STRING Brown
1608: PPUSH
1609: LD_INT 1
1611: PPUSH
1612: LD_STRING 10_
1614: PPUSH
1615: CALL 47631 0 3
1619: ST_TO_ADDR
// if Brown then
1620: LD_EXP 2
1624: IFFALSE 1642
// JMMSquad = JMMSquad ^ Brown ;
1626: LD_ADDR_EXP 20
1630: PUSH
1631: LD_EXP 20
1635: PUSH
1636: LD_EXP 2
1640: ADD
1641: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , 10_ ) ;
1642: LD_ADDR_EXP 3
1646: PUSH
1647: LD_STRING Donaldson
1649: PPUSH
1650: LD_INT 1
1652: PPUSH
1653: LD_STRING 10_
1655: PPUSH
1656: CALL 47631 0 3
1660: ST_TO_ADDR
// if Donaldson then
1661: LD_EXP 3
1665: IFFALSE 1683
// JMMSquad = JMMSquad ^ Donaldson ;
1667: LD_ADDR_EXP 20
1671: PUSH
1672: LD_EXP 20
1676: PUSH
1677: LD_EXP 3
1681: ADD
1682: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 10_ ) ;
1683: LD_ADDR_EXP 7
1687: PUSH
1688: LD_STRING Frank
1690: PPUSH
1691: LD_INT 1
1693: PPUSH
1694: LD_STRING 10_
1696: PPUSH
1697: CALL 47631 0 3
1701: ST_TO_ADDR
// if Frank then
1702: LD_EXP 7
1706: IFFALSE 1724
// JMMSquad = JMMSquad ^ Frank ;
1708: LD_ADDR_EXP 20
1712: PUSH
1713: LD_EXP 20
1717: PUSH
1718: LD_EXP 7
1722: ADD
1723: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 10_ ) ;
1724: LD_ADDR_EXP 9
1728: PUSH
1729: LD_STRING Houten
1731: PPUSH
1732: LD_INT 1
1734: PPUSH
1735: LD_STRING 10_
1737: PPUSH
1738: CALL 47631 0 3
1742: ST_TO_ADDR
// if Houten then
1743: LD_EXP 9
1747: IFFALSE 1765
// JMMSquad = JMMSquad ^ Houten ;
1749: LD_ADDR_EXP 20
1753: PUSH
1754: LD_EXP 20
1758: PUSH
1759: LD_EXP 9
1763: ADD
1764: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1765: LD_ADDR_EXP 21
1769: PUSH
1770: LD_STRING OthersIn10
1772: PPUSH
1773: CALL_OW 31
1777: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
1778: LD_ADDR_EXP 24
1782: PUSH
1783: LD_STRING Powell
1785: PPUSH
1786: LD_INT 0
1788: PPUSH
1789: LD_STRING 
1791: PPUSH
1792: CALL 47631 0 3
1796: ST_TO_ADDR
// for i in JMMSquad do
1797: LD_ADDR_VAR 0 2
1801: PUSH
1802: LD_EXP 20
1806: PUSH
1807: FOR_IN
1808: IFFALSE 2088
// begin if count < 3 then
1810: LD_VAR 0 6
1814: PUSH
1815: LD_INT 3
1817: LESS
1818: IFFALSE 1935
// begin vc_engine = 1 ;
1820: LD_ADDR_OWVAR 39
1824: PUSH
1825: LD_INT 1
1827: ST_TO_ADDR
// vc_control = 1 ;
1828: LD_ADDR_OWVAR 38
1832: PUSH
1833: LD_INT 1
1835: ST_TO_ADDR
// vc_weapon = 12 ;
1836: LD_ADDR_OWVAR 40
1840: PUSH
1841: LD_INT 12
1843: ST_TO_ADDR
// vc_chassis = 3 ;
1844: LD_ADDR_OWVAR 37
1848: PUSH
1849: LD_INT 3
1851: ST_TO_ADDR
// veh = CreateVehicle ;
1852: LD_ADDR_VAR 0 4
1856: PUSH
1857: CALL_OW 45
1861: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1862: LD_VAR 0 4
1866: PPUSH
1867: LD_INT 1
1869: PPUSH
1870: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1874: LD_VAR 0 4
1878: PPUSH
1879: LD_INT 2
1881: PPUSH
1882: LD_INT 0
1884: PPUSH
1885: CALL_OW 49
// if count mod 2 = 0 then
1889: LD_VAR 0 6
1893: PUSH
1894: LD_INT 2
1896: MOD
1897: PUSH
1898: LD_INT 0
1900: EQUAL
1901: IFFALSE 1920
// AddCargo ( veh , 1 , 100 ) else
1903: LD_VAR 0 4
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: LD_INT 100
1913: PPUSH
1914: CALL_OW 291
1918: GO 1935
// AddCargo ( veh , 3 , 100 ) end ;
1920: LD_VAR 0 4
1924: PPUSH
1925: LD_INT 3
1927: PPUSH
1928: LD_INT 100
1930: PPUSH
1931: CALL_OW 291
// if count >= 3 then
1935: LD_VAR 0 6
1939: PUSH
1940: LD_INT 3
1942: GREATEREQUAL
1943: IFFALSE 2058
// begin vc_engine = 1 ;
1945: LD_ADDR_OWVAR 39
1949: PUSH
1950: LD_INT 1
1952: ST_TO_ADDR
// vc_control = 1 ;
1953: LD_ADDR_OWVAR 38
1957: PUSH
1958: LD_INT 1
1960: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1961: LD_ADDR_OWVAR 40
1965: PUSH
1966: LD_INT 3
1968: PUSH
1969: LD_INT 4
1971: PUSH
1972: LD_INT 5
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: LIST
1979: PUSH
1980: LD_INT 1
1982: PPUSH
1983: LD_INT 3
1985: PPUSH
1986: CALL_OW 12
1990: ARRAY
1991: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
1992: LD_ADDR_OWVAR 37
1996: PUSH
1997: LD_INT 2
1999: PUSH
2000: LD_INT 3
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: LD_VAR 0 2
2011: PUSH
2012: LD_INT 2
2014: MOD
2015: PUSH
2016: LD_INT 1
2018: PLUS
2019: ARRAY
2020: ST_TO_ADDR
// veh = CreateVehicle ;
2021: LD_ADDR_VAR 0 4
2025: PUSH
2026: CALL_OW 45
2030: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2031: LD_VAR 0 4
2035: PPUSH
2036: LD_INT 1
2038: PPUSH
2039: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2043: LD_VAR 0 4
2047: PPUSH
2048: LD_INT 2
2050: PPUSH
2051: LD_INT 0
2053: PPUSH
2054: CALL_OW 49
// end ; count = count + 1 ;
2058: LD_ADDR_VAR 0 6
2062: PUSH
2063: LD_VAR 0 6
2067: PUSH
2068: LD_INT 1
2070: PLUS
2071: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2072: LD_VAR 0 2
2076: PPUSH
2077: LD_VAR 0 4
2081: PPUSH
2082: CALL_OW 52
// end ;
2086: GO 1807
2088: POP
2089: POP
// for i := 1 to others10 do
2090: LD_ADDR_VAR 0 2
2094: PUSH
2095: DOUBLE
2096: LD_INT 1
2098: DEC
2099: ST_TO_ADDR
2100: LD_EXP 21
2104: PUSH
2105: FOR_TO
2106: IFFALSE 2337
// begin if i < [ 5 , 4 , 3 , 3 ] [ Difficulty ] then
2108: LD_VAR 0 2
2112: PUSH
2113: LD_INT 5
2115: PUSH
2116: LD_INT 4
2118: PUSH
2119: LD_INT 3
2121: PUSH
2122: LD_INT 3
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: PUSH
2131: LD_OWVAR 67
2135: ARRAY
2136: LESS
2137: IFFALSE 2290
// begin vc_engine = 1 ;
2139: LD_ADDR_OWVAR 39
2143: PUSH
2144: LD_INT 1
2146: ST_TO_ADDR
// vc_control = 1 ;
2147: LD_ADDR_OWVAR 38
2151: PUSH
2152: LD_INT 1
2154: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2155: LD_ADDR_OWVAR 40
2159: PUSH
2160: LD_INT 3
2162: PUSH
2163: LD_INT 4
2165: PUSH
2166: LD_INT 5
2168: PUSH
2169: EMPTY
2170: LIST
2171: LIST
2172: LIST
2173: PUSH
2174: LD_INT 1
2176: PPUSH
2177: LD_INT 3
2179: PPUSH
2180: CALL_OW 12
2184: ARRAY
2185: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
2186: LD_ADDR_OWVAR 37
2190: PUSH
2191: LD_INT 2
2193: PUSH
2194: LD_INT 3
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_VAR 0 2
2205: PUSH
2206: LD_INT 2
2208: MOD
2209: PUSH
2210: LD_INT 1
2212: PLUS
2213: ARRAY
2214: ST_TO_ADDR
// veh = CreateVehicle ;
2215: LD_ADDR_VAR 0 4
2219: PUSH
2220: CALL_OW 45
2224: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2225: LD_VAR 0 4
2229: PPUSH
2230: LD_INT 1
2232: PPUSH
2233: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2237: LD_VAR 0 4
2241: PPUSH
2242: LD_INT 2
2244: PPUSH
2245: LD_INT 0
2247: PPUSH
2248: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2252: LD_ADDR_EXP 28
2256: PUSH
2257: LD_EXP 28
2261: PUSH
2262: LD_VAR 0 4
2266: ADD
2267: ST_TO_ADDR
// PlaceHumanInUnit ( others10 [ i ] , veh ) ;
2268: LD_EXP 21
2272: PUSH
2273: LD_VAR 0 2
2277: ARRAY
2278: PPUSH
2279: LD_VAR 0 4
2283: PPUSH
2284: CALL_OW 52
// end else
2288: GO 2335
// begin PlaceUnitXYR ( others10 [ i ] , 106 , 33 , 6 , false ) ;
2290: LD_EXP 21
2294: PUSH
2295: LD_VAR 0 2
2299: ARRAY
2300: PPUSH
2301: LD_INT 106
2303: PPUSH
2304: LD_INT 33
2306: PPUSH
2307: LD_INT 6
2309: PPUSH
2310: LD_INT 0
2312: PPUSH
2313: CALL_OW 50
// SetSide ( others10 [ i ] , 4 ) ;
2317: LD_EXP 21
2321: PUSH
2322: LD_VAR 0 2
2326: ARRAY
2327: PPUSH
2328: LD_INT 4
2330: PPUSH
2331: CALL_OW 235
// end ; end ;
2335: GO 2105
2337: POP
2338: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
2339: LD_INT 22
2341: PUSH
2342: LD_INT 1
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PUSH
2349: LD_INT 21
2351: PUSH
2352: LD_INT 1
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: PPUSH
2363: CALL_OW 69
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: CALL_OW 336
// end ;
2375: LD_VAR 0 1
2379: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
2380: LD_INT 0
2382: PPUSH
2383: PPUSH
2384: PPUSH
2385: PPUSH
2386: PPUSH
// uc_side = 1 ;
2387: LD_ADDR_OWVAR 20
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// uc_nation = 1 ;
2395: LD_ADDR_OWVAR 21
2399: PUSH
2400: LD_INT 1
2402: ST_TO_ADDR
// for i := 1 to 10 do
2403: LD_ADDR_VAR 0 2
2407: PUSH
2408: DOUBLE
2409: LD_INT 1
2411: DEC
2412: ST_TO_ADDR
2413: LD_INT 10
2415: PUSH
2416: FOR_TO
2417: IFFALSE 2599
// begin vc_engine = 1 ;
2419: LD_ADDR_OWVAR 39
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// vc_control = 1 ;
2427: LD_ADDR_OWVAR 38
2431: PUSH
2432: LD_INT 1
2434: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2435: LD_ADDR_OWVAR 40
2439: PUSH
2440: LD_INT 3
2442: PUSH
2443: LD_INT 4
2445: PUSH
2446: LD_INT 5
2448: PUSH
2449: LD_INT 12
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 1
2460: PPUSH
2461: LD_INT 4
2463: PPUSH
2464: CALL_OW 12
2468: ARRAY
2469: ST_TO_ADDR
// vc_chassis = 3 ;
2470: LD_ADDR_OWVAR 37
2474: PUSH
2475: LD_INT 3
2477: ST_TO_ADDR
// veh = CreateVehicle ;
2478: LD_ADDR_VAR 0 3
2482: PUSH
2483: CALL_OW 45
2487: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2488: LD_VAR 0 3
2492: PPUSH
2493: LD_INT 1
2495: PPUSH
2496: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2500: LD_VAR 0 3
2504: PPUSH
2505: LD_INT 2
2507: PPUSH
2508: LD_INT 0
2510: PPUSH
2511: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2515: LD_ADDR_EXP 28
2519: PUSH
2520: LD_EXP 28
2524: PUSH
2525: LD_VAR 0 3
2529: ADD
2530: ST_TO_ADDR
// if vc_weapon = 12 then
2531: LD_OWVAR 40
2535: PUSH
2536: LD_INT 12
2538: EQUAL
2539: IFFALSE 2597
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2541: LD_ADDR_VAR 0 4
2545: PUSH
2546: LD_INT 5
2548: PPUSH
2549: LD_INT 10
2551: PPUSH
2552: CALL_OW 12
2556: PUSH
2557: LD_INT 10
2559: MUL
2560: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2561: LD_VAR 0 3
2565: PPUSH
2566: LD_INT 1
2568: PUSH
2569: LD_INT 3
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: LD_INT 1
2578: PPUSH
2579: LD_INT 2
2581: PPUSH
2582: CALL_OW 12
2586: ARRAY
2587: PPUSH
2588: LD_VAR 0 4
2592: PPUSH
2593: CALL_OW 291
// end ; end ;
2597: GO 2416
2599: POP
2600: POP
// end ;
2601: LD_VAR 0 1
2605: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2606: LD_INT 0
2608: PPUSH
2609: PPUSH
2610: PPUSH
// uc_side = 4 ;
2611: LD_ADDR_OWVAR 20
2615: PUSH
2616: LD_INT 4
2618: ST_TO_ADDR
// uc_nation = 1 ;
2619: LD_ADDR_OWVAR 21
2623: PUSH
2624: LD_INT 1
2626: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ,  ) ;
2627: LD_ADDR_EXP 11
2631: PUSH
2632: LD_STRING Simms
2634: PPUSH
2635: LD_INT 0
2637: PPUSH
2638: LD_STRING 
2640: PPUSH
2641: CALL 47631 0 3
2645: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 08_ ) ;
2646: LD_ADDR_EXP 12
2650: PUSH
2651: LD_STRING Denis
2653: PPUSH
2654: LD_INT 1
2656: PPUSH
2657: LD_STRING 08_
2659: PPUSH
2660: CALL 47631 0 3
2664: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 08_ ) ;
2665: LD_ADDR_EXP 13
2669: PUSH
2670: LD_STRING Joan
2672: PPUSH
2673: LD_INT 1
2675: PPUSH
2676: LD_STRING 08_
2678: PPUSH
2679: CALL 47631 0 3
2683: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2684: LD_STRING 08_Khatam
2686: PPUSH
2687: CALL_OW 28
2691: IFFALSE 2714
// Khatam = PrepareUnit ( Khatam , true , 08_ ) else
2693: LD_ADDR_EXP 14
2697: PUSH
2698: LD_STRING Khatam
2700: PPUSH
2701: LD_INT 1
2703: PPUSH
2704: LD_STRING 08_
2706: PPUSH
2707: CALL 47631 0 3
2711: ST_TO_ADDR
2712: GO 2742
// if TestCharacters ( 03_Khatam ) then
2714: LD_STRING 03_Khatam
2716: PPUSH
2717: CALL_OW 28
2721: IFFALSE 2742
// Khatam = PrepareUnit ( Khatam , true , 03_ ) ;
2723: LD_ADDR_EXP 14
2727: PUSH
2728: LD_STRING Khatam
2730: PPUSH
2731: LD_INT 1
2733: PPUSH
2734: LD_STRING 03_
2736: PPUSH
2737: CALL 47631 0 3
2741: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 08_ ) ;
2742: LD_ADDR_EXP 15
2746: PUSH
2747: LD_STRING Gladstone
2749: PPUSH
2750: LD_INT 1
2752: PPUSH
2753: LD_STRING 08_
2755: PPUSH
2756: CALL 47631 0 3
2760: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ,  ) ;
2761: LD_ADDR_EXP 17
2765: PUSH
2766: LD_STRING DeltaDoctor
2768: PPUSH
2769: LD_INT 1
2771: PPUSH
2772: LD_STRING 
2774: PPUSH
2775: CALL 47631 0 3
2779: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 08_ ) ;
2780: LD_ADDR_EXP 7
2784: PUSH
2785: LD_STRING Frank
2787: PPUSH
2788: LD_INT 1
2790: PPUSH
2791: LD_STRING 08_
2793: PPUSH
2794: CALL 47631 0 3
2798: ST_TO_ADDR
// if Frank then
2799: LD_EXP 7
2803: IFFALSE 2826
// Kikuchi = PrepareUnit ( Yamoko , false ,  ) else
2805: LD_ADDR_EXP 8
2809: PUSH
2810: LD_STRING Yamoko
2812: PPUSH
2813: LD_INT 0
2815: PPUSH
2816: LD_STRING 
2818: PPUSH
2819: CALL 47631 0 3
2823: ST_TO_ADDR
2824: GO 2845
// Kikuchi = PrepareUnit ( Kikuchi , true , 08_ ) ;
2826: LD_ADDR_EXP 8
2830: PUSH
2831: LD_STRING Kikuchi
2833: PPUSH
2834: LD_INT 1
2836: PPUSH
2837: LD_STRING 08_
2839: PPUSH
2840: CALL 47631 0 3
2844: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
2845: LD_ADDR_EXP 22
2849: PUSH
2850: LD_STRING 09_others
2852: PPUSH
2853: CALL_OW 31
2857: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
2858: LD_ADDR_EXP 23
2862: PUSH
2863: LD_STRING 09_apes
2865: PPUSH
2866: CALL_OW 31
2870: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2871: LD_EXP 11
2875: PPUSH
2876: LD_INT 1
2878: PPUSH
2879: LD_INT 0
2881: PPUSH
2882: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2886: LD_EXP 12
2890: PPUSH
2891: LD_INT 1
2893: PPUSH
2894: LD_INT 0
2896: PPUSH
2897: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2901: LD_EXP 13
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: LD_INT 0
2911: PPUSH
2912: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2916: LD_EXP 14
2920: PPUSH
2921: LD_INT 1
2923: PPUSH
2924: LD_INT 0
2926: PPUSH
2927: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2931: LD_EXP 15
2935: PPUSH
2936: LD_INT 1
2938: PPUSH
2939: LD_INT 0
2941: PPUSH
2942: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2946: LD_EXP 17
2950: PPUSH
2951: LD_INT 1
2953: PPUSH
2954: LD_INT 0
2956: PPUSH
2957: CALL_OW 49
// if Kikuchi then
2961: LD_EXP 8
2965: IFFALSE 2982
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2967: LD_EXP 8
2971: PPUSH
2972: LD_INT 1
2974: PPUSH
2975: LD_INT 0
2977: PPUSH
2978: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2982: LD_EXP 11
2986: PUSH
2987: LD_EXP 14
2991: PUSH
2992: LD_EXP 12
2996: PUSH
2997: LD_EXP 15
3001: PUSH
3002: LD_EXP 17
3006: PUSH
3007: LD_EXP 13
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: PPUSH
3020: LD_INT 4
3022: PPUSH
3023: CALL_OW 336
// if others09 > 2 then
3027: LD_EXP 22
3031: PUSH
3032: LD_INT 2
3034: GREATER
3035: IFFALSE 3116
// begin for i := 1 to 3 do
3037: LD_ADDR_VAR 0 2
3041: PUSH
3042: DOUBLE
3043: LD_INT 1
3045: DEC
3046: ST_TO_ADDR
3047: LD_INT 3
3049: PUSH
3050: FOR_TO
3051: IFFALSE 3112
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
3053: LD_EXP 22
3057: PUSH
3058: LD_VAR 0 2
3062: ARRAY
3063: PPUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 0
3069: PPUSH
3070: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
3074: LD_ADDR_EXP 22
3078: PUSH
3079: LD_EXP 22
3083: PPUSH
3084: LD_INT 1
3086: PPUSH
3087: CALL_OW 3
3091: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
3092: LD_EXP 22
3096: PUSH
3097: LD_VAR 0 2
3101: ARRAY
3102: PPUSH
3103: LD_INT 2
3105: PPUSH
3106: CALL_OW 336
// end ;
3110: GO 3050
3112: POP
3113: POP
// end else
3114: GO 3176
// begin for i in others09 do
3116: LD_ADDR_VAR 0 2
3120: PUSH
3121: LD_EXP 22
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3174
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3129: LD_VAR 0 2
3133: PPUSH
3134: LD_INT 1
3136: PPUSH
3137: LD_INT 0
3139: PPUSH
3140: CALL_OW 49
// others09 = others09 diff i ;
3144: LD_ADDR_EXP 22
3148: PUSH
3149: LD_EXP 22
3153: PUSH
3154: LD_VAR 0 2
3158: DIFF
3159: ST_TO_ADDR
// SetClass ( i , 2 ) ;
3160: LD_VAR 0 2
3164: PPUSH
3165: LD_INT 2
3167: PPUSH
3168: CALL_OW 336
// end ;
3172: GO 3126
3174: POP
3175: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
3176: LD_INT 22
3178: PUSH
3179: LD_INT 4
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: PUSH
3186: LD_INT 25
3188: PUSH
3189: LD_INT 2
3191: PUSH
3192: EMPTY
3193: LIST
3194: LIST
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: PPUSH
3200: CALL_OW 69
3204: PUSH
3205: LD_INT 0
3207: EQUAL
3208: IFFALSE 3340
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3210: LD_ADDR_VAR 0 3
3214: PUSH
3215: LD_INT 22
3217: PUSH
3218: LD_INT 4
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PUSH
3225: LD_INT 25
3227: PUSH
3228: LD_INT 2
3230: PUSH
3231: EMPTY
3232: LIST
3233: LIST
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: PPUSH
3239: CALL_OW 69
3243: PUSH
3244: LD_EXP 11
3248: PUSH
3249: LD_EXP 14
3253: PUSH
3254: LD_EXP 12
3258: PUSH
3259: LD_EXP 15
3263: PUSH
3264: LD_EXP 17
3268: PUSH
3269: LD_EXP 13
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: DIFF
3282: ST_TO_ADDR
// if not tmp then
3283: LD_VAR 0 3
3287: NOT
3288: IFFALSE 3324
// begin if Denis then
3290: LD_EXP 12
3294: IFFALSE 3310
// SetClass ( Denis , 2 ) else
3296: LD_EXP 12
3300: PPUSH
3301: LD_INT 2
3303: PPUSH
3304: CALL_OW 336
3308: GO 3322
// SetClass ( DeltaDoctor , 2 ) ;
3310: LD_EXP 17
3314: PPUSH
3315: LD_INT 2
3317: PPUSH
3318: CALL_OW 336
// end else
3322: GO 3340
// begin SetClass ( tmp [ 1 ] , 2 ) ;
3324: LD_VAR 0 3
3328: PUSH
3329: LD_INT 1
3331: ARRAY
3332: PPUSH
3333: LD_INT 2
3335: PPUSH
3336: CALL_OW 336
// end ; end ; for i in ape09 do
3340: LD_ADDR_VAR 0 2
3344: PUSH
3345: LD_EXP 23
3349: PUSH
3350: FOR_IN
3351: IFFALSE 3370
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3353: LD_VAR 0 2
3357: PPUSH
3358: LD_INT 1
3360: PPUSH
3361: LD_INT 0
3363: PPUSH
3364: CALL_OW 49
3368: GO 3350
3370: POP
3371: POP
// uc_side = 4 ;
3372: LD_ADDR_OWVAR 20
3376: PUSH
3377: LD_INT 4
3379: ST_TO_ADDR
// hc_class := 1 ;
3380: LD_ADDR_OWVAR 28
3384: PUSH
3385: LD_INT 1
3387: ST_TO_ADDR
// hc_sex := sex_female ;
3388: LD_ADDR_OWVAR 27
3392: PUSH
3393: LD_INT 2
3395: ST_TO_ADDR
// hc_gallery :=  ;
3396: LD_ADDR_OWVAR 33
3400: PUSH
3401: LD_STRING 
3403: ST_TO_ADDR
// hc_name :=  ;
3404: LD_ADDR_OWVAR 26
3408: PUSH
3409: LD_STRING 
3411: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3412: LD_ADDR_OWVAR 31
3416: PUSH
3417: LD_INT 1
3419: PUSH
3420: LD_INT 7
3422: PUSH
3423: LD_INT 1
3425: PUSH
3426: LD_INT 0
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: ST_TO_ADDR
// AmScout = CreateHuman ;
3435: LD_ADDR_EXP 18
3439: PUSH
3440: CALL_OW 44
3444: ST_TO_ADDR
// end ;
3445: LD_VAR 0 1
3449: RET
// export function PrepareCornell ; begin
3450: LD_INT 0
3452: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3453: LD_INT 4
3455: PPUSH
3456: LD_INT 4
3458: PPUSH
3459: CALL_OW 343
// uc_side = 4 ;
3463: LD_ADDR_OWVAR 20
3467: PUSH
3468: LD_INT 4
3470: ST_TO_ADDR
// uc_nation = 1 ;
3471: LD_ADDR_OWVAR 21
3475: PUSH
3476: LD_INT 1
3478: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornel , true , 03_ ) ;
3479: LD_ADDR_EXP 19
3483: PUSH
3484: LD_STRING Cornel
3486: PPUSH
3487: LD_INT 1
3489: PPUSH
3490: LD_STRING 03_
3492: PPUSH
3493: CALL 47631 0 3
3497: ST_TO_ADDR
// if not Cornell then
3498: LD_EXP 19
3502: NOT
3503: IFFALSE 3507
// exit ;
3505: GO 3615
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3507: LD_EXP 19
3511: PPUSH
3512: LD_INT 8
3514: PPUSH
3515: LD_INT 0
3517: PPUSH
3518: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3522: LD_EXP 19
3526: PPUSH
3527: LD_INT 350
3529: PPUSH
3530: CALL_OW 234
// if IsInUnit ( JMM ) then
3534: LD_EXP 1
3538: PPUSH
3539: CALL_OW 310
3543: IFFALSE 3586
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3545: LD_EXP 19
3549: PPUSH
3550: LD_EXP 1
3554: PPUSH
3555: CALL_OW 310
3559: PPUSH
3560: CALL_OW 250
3564: PPUSH
3565: LD_EXP 1
3569: PPUSH
3570: CALL_OW 310
3574: PPUSH
3575: CALL_OW 251
3579: PPUSH
3580: CALL_OW 111
3584: GO 3615
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3586: LD_EXP 19
3590: PPUSH
3591: LD_EXP 1
3595: PPUSH
3596: CALL_OW 250
3600: PPUSH
3601: LD_EXP 1
3605: PPUSH
3606: CALL_OW 251
3610: PPUSH
3611: CALL_OW 111
// end ; end_of_file
3615: LD_VAR 0 1
3619: RET
// export function PrepareRussians ; var i , un ; begin
3620: LD_INT 0
3622: PPUSH
3623: PPUSH
3624: PPUSH
// uc_side = 3 ;
3625: LD_ADDR_OWVAR 20
3629: PUSH
3630: LD_INT 3
3632: ST_TO_ADDR
// uc_nation = 3 ;
3633: LD_ADDR_OWVAR 21
3637: PUSH
3638: LD_INT 3
3640: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ,  ) ;
3641: LD_ADDR_EXP 25
3645: PUSH
3646: LD_STRING Tsaritsyn
3648: PPUSH
3649: LD_INT 0
3651: PPUSH
3652: LD_STRING 
3654: PPUSH
3655: CALL 47631 0 3
3659: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3660: LD_EXP 25
3664: PPUSH
3665: LD_INT 3
3667: PPUSH
3668: LD_INT 0
3670: PPUSH
3671: CALL_OW 49
// for i = 1 to 14 do
3675: LD_ADDR_VAR 0 2
3679: PUSH
3680: DOUBLE
3681: LD_INT 1
3683: DEC
3684: ST_TO_ADDR
3685: LD_INT 14
3687: PUSH
3688: FOR_TO
3689: IFFALSE 3775
// begin uc_side = 3 ;
3691: LD_ADDR_OWVAR 20
3695: PUSH
3696: LD_INT 3
3698: ST_TO_ADDR
// uc_nation = 3 ;
3699: LD_ADDR_OWVAR 21
3703: PUSH
3704: LD_INT 3
3706: ST_TO_ADDR
// hc_gallery =  ;
3707: LD_ADDR_OWVAR 33
3711: PUSH
3712: LD_STRING 
3714: ST_TO_ADDR
// hc_name =  ;
3715: LD_ADDR_OWVAR 26
3719: PUSH
3720: LD_STRING 
3722: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3723: LD_INT 0
3725: PPUSH
3726: LD_INT 1
3728: PPUSH
3729: LD_EXP 36
3733: PPUSH
3734: LD_EXP 37
3738: PPUSH
3739: CALL_OW 12
3743: PPUSH
3744: CALL_OW 380
// un = CreateHuman ;
3748: LD_ADDR_VAR 0 3
3752: PUSH
3753: CALL_OW 44
3757: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3758: LD_VAR 0 3
3762: PPUSH
3763: LD_INT 3
3765: PPUSH
3766: LD_INT 0
3768: PPUSH
3769: CALL_OW 49
// end ;
3773: GO 3688
3775: POP
3776: POP
// for i = 1 to 6 do
3777: LD_ADDR_VAR 0 2
3781: PUSH
3782: DOUBLE
3783: LD_INT 1
3785: DEC
3786: ST_TO_ADDR
3787: LD_INT 6
3789: PUSH
3790: FOR_TO
3791: IFFALSE 3877
// begin uc_side = 3 ;
3793: LD_ADDR_OWVAR 20
3797: PUSH
3798: LD_INT 3
3800: ST_TO_ADDR
// uc_nation = 3 ;
3801: LD_ADDR_OWVAR 21
3805: PUSH
3806: LD_INT 3
3808: ST_TO_ADDR
// hc_gallery =  ;
3809: LD_ADDR_OWVAR 33
3813: PUSH
3814: LD_STRING 
3816: ST_TO_ADDR
// hc_name =  ;
3817: LD_ADDR_OWVAR 26
3821: PUSH
3822: LD_STRING 
3824: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3825: LD_INT 0
3827: PPUSH
3828: LD_INT 2
3830: PPUSH
3831: LD_EXP 36
3835: PPUSH
3836: LD_EXP 37
3840: PPUSH
3841: CALL_OW 12
3845: PPUSH
3846: CALL_OW 380
// un = CreateHuman ;
3850: LD_ADDR_VAR 0 3
3854: PUSH
3855: CALL_OW 44
3859: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3860: LD_VAR 0 3
3864: PPUSH
3865: LD_INT 3
3867: PPUSH
3868: LD_INT 0
3870: PPUSH
3871: CALL_OW 49
// end ;
3875: GO 3790
3877: POP
3878: POP
// for i = 1 to 6 do
3879: LD_ADDR_VAR 0 2
3883: PUSH
3884: DOUBLE
3885: LD_INT 1
3887: DEC
3888: ST_TO_ADDR
3889: LD_INT 6
3891: PUSH
3892: FOR_TO
3893: IFFALSE 3979
// begin uc_side = 3 ;
3895: LD_ADDR_OWVAR 20
3899: PUSH
3900: LD_INT 3
3902: ST_TO_ADDR
// uc_nation = 3 ;
3903: LD_ADDR_OWVAR 21
3907: PUSH
3908: LD_INT 3
3910: ST_TO_ADDR
// hc_gallery =  ;
3911: LD_ADDR_OWVAR 33
3915: PUSH
3916: LD_STRING 
3918: ST_TO_ADDR
// hc_name =  ;
3919: LD_ADDR_OWVAR 26
3923: PUSH
3924: LD_STRING 
3926: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3927: LD_INT 0
3929: PPUSH
3930: LD_INT 3
3932: PPUSH
3933: LD_EXP 36
3937: PPUSH
3938: LD_EXP 37
3942: PPUSH
3943: CALL_OW 12
3947: PPUSH
3948: CALL_OW 380
// un = CreateHuman ;
3952: LD_ADDR_VAR 0 3
3956: PUSH
3957: CALL_OW 44
3961: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3962: LD_VAR 0 3
3966: PPUSH
3967: LD_INT 3
3969: PPUSH
3970: LD_INT 0
3972: PPUSH
3973: CALL_OW 49
// end ;
3977: GO 3892
3979: POP
3980: POP
// for i = 1 to 4 do
3981: LD_ADDR_VAR 0 2
3985: PUSH
3986: DOUBLE
3987: LD_INT 1
3989: DEC
3990: ST_TO_ADDR
3991: LD_INT 4
3993: PUSH
3994: FOR_TO
3995: IFFALSE 4081
// begin uc_side = 3 ;
3997: LD_ADDR_OWVAR 20
4001: PUSH
4002: LD_INT 3
4004: ST_TO_ADDR
// uc_nation = 3 ;
4005: LD_ADDR_OWVAR 21
4009: PUSH
4010: LD_INT 3
4012: ST_TO_ADDR
// hc_gallery =  ;
4013: LD_ADDR_OWVAR 33
4017: PUSH
4018: LD_STRING 
4020: ST_TO_ADDR
// hc_name =  ;
4021: LD_ADDR_OWVAR 26
4025: PUSH
4026: LD_STRING 
4028: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4029: LD_INT 0
4031: PPUSH
4032: LD_INT 4
4034: PPUSH
4035: LD_EXP 36
4039: PPUSH
4040: LD_EXP 37
4044: PPUSH
4045: CALL_OW 12
4049: PPUSH
4050: CALL_OW 380
// un = CreateHuman ;
4054: LD_ADDR_VAR 0 3
4058: PUSH
4059: CALL_OW 44
4063: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4064: LD_VAR 0 3
4068: PPUSH
4069: LD_INT 3
4071: PPUSH
4072: LD_INT 0
4074: PPUSH
4075: CALL_OW 49
// end ;
4079: GO 3994
4081: POP
4082: POP
// end ; end_of_file
4083: LD_VAR 0 1
4087: RET
// export function PrepareArabianCommander ; begin
4088: LD_INT 0
4090: PPUSH
// uc_side = 2 ;
4091: LD_ADDR_OWVAR 20
4095: PUSH
4096: LD_INT 2
4098: ST_TO_ADDR
// uc_nation = 2 ;
4099: LD_ADDR_OWVAR 21
4103: PUSH
4104: LD_INT 2
4106: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
4107: LD_ADDR_EXP 26
4111: PUSH
4112: LD_STRING Dietrich
4114: PPUSH
4115: CALL_OW 25
4119: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
4120: LD_EXP 26
4124: PPUSH
4125: LD_INT 4
4127: PPUSH
4128: LD_INT 0
4130: PPUSH
4131: CALL_OW 49
// end ;
4135: LD_VAR 0 1
4139: RET
// export function PrepareArabian ; var i , un , veh ; begin
4140: LD_INT 0
4142: PPUSH
4143: PPUSH
4144: PPUSH
4145: PPUSH
// uc_side := 2 ;
4146: LD_ADDR_OWVAR 20
4150: PUSH
4151: LD_INT 2
4153: ST_TO_ADDR
// uc_nation := 2 ;
4154: LD_ADDR_OWVAR 21
4158: PUSH
4159: LD_INT 2
4161: ST_TO_ADDR
// if not Ahmed then
4162: LD_EXP 27
4166: NOT
4167: IFFALSE 4235
// begin InitHc ;
4169: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
4173: LD_INT 1
4175: PPUSH
4176: LD_INT 1
4178: PPUSH
4179: LD_EXP 36
4183: PPUSH
4184: LD_EXP 37
4188: PUSH
4189: LD_INT 1
4191: PLUS
4192: PPUSH
4193: CALL_OW 12
4197: PPUSH
4198: CALL_OW 380
// hc_name := Ahmed Abbasid ;
4202: LD_ADDR_OWVAR 26
4206: PUSH
4207: LD_STRING Ahmed Abbasid
4209: ST_TO_ADDR
// Ahmed := CreateHuman ;
4210: LD_ADDR_EXP 27
4214: PUSH
4215: CALL_OW 44
4219: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
4220: LD_EXP 27
4224: PPUSH
4225: LD_INT 4
4227: PPUSH
4228: LD_INT 0
4230: PPUSH
4231: CALL_OW 49
// end ; for i = 1 to 4 do
4235: LD_ADDR_VAR 0 2
4239: PUSH
4240: DOUBLE
4241: LD_INT 1
4243: DEC
4244: ST_TO_ADDR
4245: LD_INT 4
4247: PUSH
4248: FOR_TO
4249: IFFALSE 4335
// begin uc_side = 2 ;
4251: LD_ADDR_OWVAR 20
4255: PUSH
4256: LD_INT 2
4258: ST_TO_ADDR
// uc_nation = 2 ;
4259: LD_ADDR_OWVAR 21
4263: PUSH
4264: LD_INT 2
4266: ST_TO_ADDR
// hc_gallery =  ;
4267: LD_ADDR_OWVAR 33
4271: PUSH
4272: LD_STRING 
4274: ST_TO_ADDR
// hc_name =  ;
4275: LD_ADDR_OWVAR 26
4279: PUSH
4280: LD_STRING 
4282: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4283: LD_INT 0
4285: PPUSH
4286: LD_INT 2
4288: PPUSH
4289: LD_EXP 36
4293: PPUSH
4294: LD_EXP 37
4298: PPUSH
4299: CALL_OW 12
4303: PPUSH
4304: CALL_OW 380
// un = CreateHuman ;
4308: LD_ADDR_VAR 0 3
4312: PUSH
4313: CALL_OW 44
4317: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4318: LD_VAR 0 3
4322: PPUSH
4323: LD_INT 4
4325: PPUSH
4326: LD_INT 0
4328: PPUSH
4329: CALL_OW 49
// end ;
4333: GO 4248
4335: POP
4336: POP
// for i = 1 to 5 do
4337: LD_ADDR_VAR 0 2
4341: PUSH
4342: DOUBLE
4343: LD_INT 1
4345: DEC
4346: ST_TO_ADDR
4347: LD_INT 5
4349: PUSH
4350: FOR_TO
4351: IFFALSE 4437
// begin uc_side = 2 ;
4353: LD_ADDR_OWVAR 20
4357: PUSH
4358: LD_INT 2
4360: ST_TO_ADDR
// uc_nation = 2 ;
4361: LD_ADDR_OWVAR 21
4365: PUSH
4366: LD_INT 2
4368: ST_TO_ADDR
// hc_gallery =  ;
4369: LD_ADDR_OWVAR 33
4373: PUSH
4374: LD_STRING 
4376: ST_TO_ADDR
// hc_name =  ;
4377: LD_ADDR_OWVAR 26
4381: PUSH
4382: LD_STRING 
4384: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4385: LD_INT 0
4387: PPUSH
4388: LD_INT 1
4390: PPUSH
4391: LD_EXP 36
4395: PPUSH
4396: LD_EXP 37
4400: PPUSH
4401: CALL_OW 12
4405: PPUSH
4406: CALL_OW 380
// un = CreateHuman ;
4410: LD_ADDR_VAR 0 3
4414: PUSH
4415: CALL_OW 44
4419: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4420: LD_VAR 0 3
4424: PPUSH
4425: LD_INT 4
4427: PPUSH
4428: LD_INT 0
4430: PPUSH
4431: CALL_OW 49
// end ;
4435: GO 4350
4437: POP
4438: POP
// for i = 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
4439: LD_ADDR_VAR 0 2
4443: PUSH
4444: DOUBLE
4445: LD_INT 1
4447: DEC
4448: ST_TO_ADDR
4449: LD_INT 3
4451: PUSH
4452: LD_INT 4
4454: PUSH
4455: LD_INT 4
4457: PUSH
4458: LD_INT 4
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: PUSH
4467: LD_OWVAR 67
4471: ARRAY
4472: PUSH
4473: FOR_TO
4474: IFFALSE 4560
// begin uc_side = 2 ;
4476: LD_ADDR_OWVAR 20
4480: PUSH
4481: LD_INT 2
4483: ST_TO_ADDR
// uc_nation = 2 ;
4484: LD_ADDR_OWVAR 21
4488: PUSH
4489: LD_INT 2
4491: ST_TO_ADDR
// hc_gallery =  ;
4492: LD_ADDR_OWVAR 33
4496: PUSH
4497: LD_STRING 
4499: ST_TO_ADDR
// hc_name =  ;
4500: LD_ADDR_OWVAR 26
4504: PUSH
4505: LD_STRING 
4507: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4508: LD_INT 0
4510: PPUSH
4511: LD_INT 4
4513: PPUSH
4514: LD_EXP 36
4518: PPUSH
4519: LD_EXP 37
4523: PPUSH
4524: CALL_OW 12
4528: PPUSH
4529: CALL_OW 380
// un = CreateHuman ;
4533: LD_ADDR_VAR 0 3
4537: PUSH
4538: CALL_OW 44
4542: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4543: LD_VAR 0 3
4547: PPUSH
4548: LD_INT 4
4550: PPUSH
4551: LD_INT 0
4553: PPUSH
4554: CALL_OW 49
// end ;
4558: GO 4473
4560: POP
4561: POP
// for i = 1 to 2 do
4562: LD_ADDR_VAR 0 2
4566: PUSH
4567: DOUBLE
4568: LD_INT 1
4570: DEC
4571: ST_TO_ADDR
4572: LD_INT 2
4574: PUSH
4575: FOR_TO
4576: IFFALSE 4706
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4578: LD_ADDR_VAR 0 4
4582: PUSH
4583: LD_INT 22
4585: PUSH
4586: LD_INT 2
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: PUSH
4593: LD_INT 21
4595: PUSH
4596: LD_INT 2
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: PUSH
4603: LD_INT 58
4605: PUSH
4606: EMPTY
4607: LIST
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: LIST
4613: PPUSH
4614: CALL_OW 69
4618: ST_TO_ADDR
// uc_side = 2 ;
4619: LD_ADDR_OWVAR 20
4623: PUSH
4624: LD_INT 2
4626: ST_TO_ADDR
// uc_nation = 2 ;
4627: LD_ADDR_OWVAR 21
4631: PUSH
4632: LD_INT 2
4634: ST_TO_ADDR
// hc_gallery =  ;
4635: LD_ADDR_OWVAR 33
4639: PUSH
4640: LD_STRING 
4642: ST_TO_ADDR
// hc_name =  ;
4643: LD_ADDR_OWVAR 26
4647: PUSH
4648: LD_STRING 
4650: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4651: LD_INT 0
4653: PPUSH
4654: LD_INT 3
4656: PPUSH
4657: LD_EXP 36
4661: PPUSH
4662: LD_EXP 37
4666: PPUSH
4667: CALL_OW 12
4671: PPUSH
4672: CALL_OW 380
// un = CreateHuman ;
4676: LD_ADDR_VAR 0 3
4680: PUSH
4681: CALL_OW 44
4685: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4686: LD_VAR 0 3
4690: PPUSH
4691: LD_VAR 0 4
4695: PUSH
4696: LD_INT 1
4698: ARRAY
4699: PPUSH
4700: CALL_OW 52
// end ;
4704: GO 4575
4706: POP
4707: POP
// end ;
4708: LD_VAR 0 1
4712: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
4713: LD_INT 0
4715: PPUSH
4716: PPUSH
4717: PPUSH
4718: PPUSH
4719: PPUSH
4720: PPUSH
// for i := 1 to 2 do
4721: LD_ADDR_VAR 0 2
4725: PUSH
4726: DOUBLE
4727: LD_INT 1
4729: DEC
4730: ST_TO_ADDR
4731: LD_INT 2
4733: PUSH
4734: FOR_TO
4735: IFFALSE 4861
// begin uc_side = 5 ;
4737: LD_ADDR_OWVAR 20
4741: PUSH
4742: LD_INT 5
4744: ST_TO_ADDR
// uc_nation = 2 ;
4745: LD_ADDR_OWVAR 21
4749: PUSH
4750: LD_INT 2
4752: ST_TO_ADDR
// vc_chassis := 31 ;
4753: LD_ADDR_OWVAR 37
4757: PUSH
4758: LD_INT 31
4760: ST_TO_ADDR
// vc_control := control_rider ;
4761: LD_ADDR_OWVAR 38
4765: PUSH
4766: LD_INT 4
4768: ST_TO_ADDR
// animal := CreateVehicle ;
4769: LD_ADDR_VAR 0 3
4773: PUSH
4774: CALL_OW 45
4778: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
4779: LD_VAR 0 3
4783: PPUSH
4784: LD_INT 7
4786: PPUSH
4787: LD_INT 0
4789: PPUSH
4790: CALL_OW 49
// hc_gallery =  ;
4794: LD_ADDR_OWVAR 33
4798: PUSH
4799: LD_STRING 
4801: ST_TO_ADDR
// hc_name =  ;
4802: LD_ADDR_OWVAR 26
4806: PUSH
4807: LD_STRING 
4809: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4810: LD_INT 0
4812: PPUSH
4813: LD_INT 11
4815: PPUSH
4816: LD_EXP 36
4820: PPUSH
4821: LD_EXP 37
4825: PPUSH
4826: CALL_OW 12
4830: PPUSH
4831: CALL_OW 380
// un = CreateHuman ;
4835: LD_ADDR_VAR 0 4
4839: PUSH
4840: CALL_OW 44
4844: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
4845: LD_VAR 0 4
4849: PPUSH
4850: LD_VAR 0 3
4854: PPUSH
4855: CALL_OW 52
// end ;
4859: GO 4734
4861: POP
4862: POP
// repeat wait ( 0 0$1 ) ;
4863: LD_INT 35
4865: PPUSH
4866: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
4870: LD_ADDR_VAR 0 5
4874: PUSH
4875: LD_INT 22
4877: PUSH
4878: LD_INT 1
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PPUSH
4885: CALL_OW 69
4889: PPUSH
4890: LD_VAR 0 2
4894: PPUSH
4895: CALL_OW 74
4899: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4900: LD_ADDR_VAR 0 6
4904: PUSH
4905: LD_INT 22
4907: PUSH
4908: LD_INT 1
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: LD_INT 2
4917: PUSH
4918: LD_INT 59
4920: PUSH
4921: EMPTY
4922: LIST
4923: PUSH
4924: LD_INT 21
4926: PUSH
4927: LD_INT 1
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: LD_INT 21
4936: PUSH
4937: LD_INT 2
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: LIST
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: EMPTY
4955: LIST
4956: PPUSH
4957: CALL_OW 69
4961: PPUSH
4962: LD_VAR 0 2
4966: PPUSH
4967: CALL_OW 74
4971: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4972: LD_ADDR_VAR 0 2
4976: PUSH
4977: LD_INT 22
4979: PUSH
4980: LD_INT 5
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PUSH
4987: LD_INT 25
4989: PUSH
4990: LD_INT 11
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PPUSH
5001: CALL_OW 69
5005: PUSH
5006: FOR_IN
5007: IFFALSE 5077
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5009: LD_VAR 0 2
5013: PPUSH
5014: LD_VAR 0 5
5018: PPUSH
5019: CALL_OW 296
5023: PUSH
5024: LD_INT 8
5026: PLUS
5027: PUSH
5028: LD_VAR 0 2
5032: PPUSH
5033: LD_VAR 0 6
5037: PPUSH
5038: CALL_OW 296
5042: LESS
5043: IFFALSE 5061
// ComAttackUnit ( i , target1 ) else
5045: LD_VAR 0 2
5049: PPUSH
5050: LD_VAR 0 5
5054: PPUSH
5055: CALL_OW 115
5059: GO 5075
// ComAttackUnit ( i , target2 ) ;
5061: LD_VAR 0 2
5065: PPUSH
5066: LD_VAR 0 6
5070: PPUSH
5071: CALL_OW 115
// end ;
5075: GO 5006
5077: POP
5078: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
5079: LD_INT 22
5081: PUSH
5082: LD_INT 5
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PUSH
5089: LD_INT 25
5091: PUSH
5092: LD_INT 11
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PPUSH
5103: CALL_OW 69
5107: PUSH
5108: LD_INT 0
5110: EQUAL
5111: PUSH
5112: LD_INT 22
5114: PUSH
5115: LD_INT 1
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: PPUSH
5122: CALL_OW 69
5126: PUSH
5127: LD_INT 0
5129: EQUAL
5130: OR
5131: IFFALSE 4863
// end ; end_of_file
5133: LD_VAR 0 1
5137: RET
// every 1 do
5138: GO 5140
5140: DISABLE
// begin Video ( true ) ;
5141: LD_INT 1
5143: PPUSH
5144: CALL 84340 0 1
// RevealFogArea ( 1 , EpsilonTerrain ) ;
5148: LD_INT 1
5150: PPUSH
5151: LD_INT 19
5153: PPUSH
5154: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
5158: LD_EXP 11
5162: PPUSH
5163: CALL_OW 87
// wait ( 0 0$3 ) ;
5167: LD_INT 105
5169: PPUSH
5170: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
5174: LD_EXP 1
5178: PPUSH
5179: CALL_OW 310
5183: PPUSH
5184: CALL_OW 85
// Wait ( 0 0$1 ) ;
5188: LD_INT 35
5190: PPUSH
5191: CALL_OW 67
// if IsOk ( Gary ) then
5195: LD_EXP 10
5199: PPUSH
5200: CALL_OW 302
5204: IFFALSE 5242
// begin Say ( Gary , D2-Gary-1 ) ;
5206: LD_EXP 10
5210: PPUSH
5211: LD_STRING D2-Gary-1
5213: PPUSH
5214: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
5218: LD_EXP 1
5222: PPUSH
5223: LD_STRING D2-JMM-1
5225: PPUSH
5226: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
5230: LD_EXP 10
5234: PPUSH
5235: LD_STRING D2-Gary-2
5237: PPUSH
5238: CALL_OW 88
// end ; Video ( false ) ;
5242: LD_INT 0
5244: PPUSH
5245: CALL 84340 0 1
// ChangeMissionObjectives ( M1 ) ;
5249: LD_STRING M1
5251: PPUSH
5252: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
5256: LD_INT 38
5258: PPUSH
5259: LD_INT 1
5261: PPUSH
5262: LD_INT 100
5264: PPUSH
5265: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
5269: LD_INT 47
5271: PPUSH
5272: LD_INT 1
5274: PPUSH
5275: LD_INT 50
5277: PPUSH
5278: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5282: LD_INT 47
5284: PPUSH
5285: LD_INT 3
5287: PPUSH
5288: LD_INT 50
5290: PPUSH
5291: CALL_OW 291
// SaveForQuickRestart ;
5295: CALL_OW 22
// end ;
5299: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var p ;
5300: LD_EXP 1
5304: PPUSH
5305: LD_EXP 11
5309: PPUSH
5310: CALL_OW 296
5314: PUSH
5315: LD_INT 15
5317: LESS
5318: IFFALSE 5999
5320: GO 5322
5322: DISABLE
5323: LD_INT 0
5325: PPUSH
// begin wait ( 0 0$3 ) ;
5326: LD_INT 105
5328: PPUSH
5329: CALL_OW 67
// Video ( true ) ;
5333: LD_INT 1
5335: PPUSH
5336: CALL 84340 0 1
// ComExitVehicle ( JMM ) ;
5340: LD_EXP 1
5344: PPUSH
5345: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5349: LD_EXP 1
5353: PPUSH
5354: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
5358: LD_EXP 1
5362: PPUSH
5363: LD_EXP 11
5367: PPUSH
5368: CALL_OW 179
// p := 15 ;
5372: LD_ADDR_VAR 0 1
5376: PUSH
5377: LD_INT 15
5379: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5380: LD_INT 35
5382: PPUSH
5383: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5387: LD_EXP 11
5391: PUSH
5392: LD_EXP 13
5396: PUSH
5397: LD_EXP 12
5401: PUSH
5402: LD_EXP 14
5406: PUSH
5407: LD_EXP 8
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: PPUSH
5419: LD_EXP 1
5423: PPUSH
5424: CALL_OW 112
// p := p - 1 ;
5428: LD_ADDR_VAR 0 1
5432: PUSH
5433: LD_VAR 0 1
5437: PUSH
5438: LD_INT 1
5440: MINUS
5441: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
5442: LD_EXP 1
5446: PPUSH
5447: LD_EXP 11
5451: PPUSH
5452: CALL_OW 296
5456: PUSH
5457: LD_INT 5
5459: LESS
5460: PUSH
5461: LD_VAR 0 1
5465: PUSH
5466: LD_INT 0
5468: LESSEQUAL
5469: OR
5470: IFFALSE 5380
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5472: LD_EXP 11
5476: PUSH
5477: LD_EXP 13
5481: PUSH
5482: LD_EXP 12
5486: PUSH
5487: LD_EXP 14
5491: PUSH
5492: LD_EXP 8
5496: PUSH
5497: EMPTY
5498: LIST
5499: LIST
5500: LIST
5501: LIST
5502: LIST
5503: PPUSH
5504: LD_EXP 1
5508: PPUSH
5509: CALL_OW 119
// if not IsInUnit ( JMM ) then
5513: LD_EXP 1
5517: PPUSH
5518: CALL_OW 310
5522: NOT
5523: IFFALSE 5539
// ComTurnUnit ( JMM , Simms ) ;
5525: LD_EXP 1
5529: PPUSH
5530: LD_EXP 11
5534: PPUSH
5535: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5539: LD_EXP 11
5543: PUSH
5544: LD_EXP 13
5548: PUSH
5549: LD_EXP 12
5553: PUSH
5554: LD_EXP 14
5558: PUSH
5559: EMPTY
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: PPUSH
5565: LD_EXP 1
5569: PPUSH
5570: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5574: LD_EXP 1
5578: PUSH
5579: LD_EXP 11
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: PPUSH
5588: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5592: LD_EXP 11
5596: PPUSH
5597: LD_STRING D2a-Sim-1
5599: PPUSH
5600: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5604: LD_EXP 1
5608: PPUSH
5609: LD_STRING D2a-JMM-1
5611: PPUSH
5612: CALL_OW 88
// if IsOk ( Joan ) then
5616: LD_EXP 13
5620: PPUSH
5621: CALL_OW 302
5625: IFFALSE 5703
// begin if not IsInUnit ( JMM ) then
5627: LD_EXP 1
5631: PPUSH
5632: CALL_OW 310
5636: NOT
5637: IFFALSE 5653
// ComTurnUnit ( JMM , Joan ) ;
5639: LD_EXP 1
5643: PPUSH
5644: LD_EXP 13
5648: PPUSH
5649: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
5653: LD_EXP 13
5657: PPUSH
5658: LD_EXP 1
5662: PPUSH
5663: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5667: LD_EXP 13
5671: PPUSH
5672: LD_STRING D2b-Joan-1
5674: PPUSH
5675: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5679: LD_EXP 1
5683: PPUSH
5684: LD_STRING D2b-JMM-1
5686: PPUSH
5687: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5691: LD_EXP 13
5695: PPUSH
5696: LD_STRING D2b-Joan-2
5698: PPUSH
5699: CALL_OW 88
// end ; if IsOk ( Denis ) then
5703: LD_EXP 12
5707: PPUSH
5708: CALL_OW 302
5712: IFFALSE 5766
// begin if not IsInUnit ( JMM ) then
5714: LD_EXP 1
5718: PPUSH
5719: CALL_OW 310
5723: NOT
5724: IFFALSE 5740
// ComTurnUnit ( JMM , Denis ) ;
5726: LD_EXP 1
5730: PPUSH
5731: LD_EXP 12
5735: PPUSH
5736: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
5740: LD_EXP 12
5744: PPUSH
5745: LD_EXP 1
5749: PPUSH
5750: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
5754: LD_EXP 12
5758: PPUSH
5759: LD_STRING D2c-Den-1
5761: PPUSH
5762: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
5766: LD_EXP 8
5770: PPUSH
5771: CALL_OW 302
5775: PUSH
5776: LD_STRING 08_Kikuchi
5778: PPUSH
5779: CALL_OW 28
5783: NOT
5784: AND
5785: IFFALSE 5880
// begin repeat wait ( 0 0$1 ) ;
5787: LD_INT 35
5789: PPUSH
5790: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
5794: LD_EXP 8
5798: PPUSH
5799: LD_EXP 1
5803: PPUSH
5804: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
5808: LD_EXP 1
5812: PPUSH
5813: LD_EXP 8
5817: PPUSH
5818: CALL_OW 296
5822: PUSH
5823: LD_INT 5
5825: LESS
5826: IFFALSE 5787
// ComTurnUnit ( Kikuchi , JMM ) ;
5828: LD_EXP 8
5832: PPUSH
5833: LD_EXP 1
5837: PPUSH
5838: CALL_OW 119
// if not IsInUnit ( JMM ) then
5842: LD_EXP 1
5846: PPUSH
5847: CALL_OW 310
5851: NOT
5852: IFFALSE 5868
// ComTurnUnit ( JMM , Kikuchi ) ;
5854: LD_EXP 1
5858: PPUSH
5859: LD_EXP 8
5863: PPUSH
5864: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
5868: LD_EXP 8
5872: PPUSH
5873: LD_STRING D3b-Yam-1
5875: PPUSH
5876: CALL_OW 88
// end ; if IsOk ( Khatam ) then
5880: LD_EXP 14
5884: PPUSH
5885: CALL_OW 302
5889: IFFALSE 5955
// begin if not IsInUnit ( JMM ) then
5891: LD_EXP 1
5895: PPUSH
5896: CALL_OW 310
5900: NOT
5901: IFFALSE 5917
// ComTurnUnit ( JMM , Khatam ) ;
5903: LD_EXP 1
5907: PPUSH
5908: LD_EXP 14
5912: PPUSH
5913: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
5917: LD_EXP 14
5921: PPUSH
5922: LD_EXP 1
5926: PPUSH
5927: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
5931: LD_EXP 1
5935: PPUSH
5936: LD_STRING D2c-JMM-1
5938: PPUSH
5939: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
5943: LD_EXP 14
5947: PPUSH
5948: LD_STRING D2c-Khat-1
5950: PPUSH
5951: CALL_OW 88
// end ; Video ( false ) ;
5955: LD_INT 0
5957: PPUSH
5958: CALL 84340 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5962: LD_INT 22
5964: PUSH
5965: LD_INT 4
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: PPUSH
5972: CALL_OW 69
5976: PPUSH
5977: LD_INT 1
5979: PPUSH
5980: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
5984: LD_STRING M1a
5986: PPUSH
5987: CALL_OW 337
// joinEpsilon = 1 ;
5991: LD_ADDR_EXP 29
5995: PUSH
5996: LD_INT 1
5998: ST_TO_ADDR
// end ;
5999: PPOPN 1
6001: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do var p ;
6002: LD_INT 38
6004: PPUSH
6005: LD_INT 1
6007: PPUSH
6008: CALL_OW 289
6012: PUSH
6013: LD_INT 0
6015: EQUAL
6016: PUSH
6017: LD_INT 47
6019: PPUSH
6020: LD_INT 1
6022: PPUSH
6023: CALL_OW 289
6027: PUSH
6028: LD_INT 0
6030: EQUAL
6031: AND
6032: PUSH
6033: LD_INT 47
6035: PPUSH
6036: LD_INT 2
6038: PPUSH
6039: CALL_OW 289
6043: PUSH
6044: LD_INT 0
6046: EQUAL
6047: AND
6048: IFFALSE 6173
6050: GO 6052
6052: DISABLE
6053: LD_INT 0
6055: PPUSH
// begin p := 0 ;
6056: LD_ADDR_VAR 0 1
6060: PUSH
6061: LD_INT 0
6063: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6064: LD_INT 38
6066: PUSH
6067: LD_INT 47
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PPUSH
6074: LD_INT 56
6076: PPUSH
6077: LD_INT 0
6079: PPUSH
6080: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6084: LD_INT 35
6086: PPUSH
6087: CALL_OW 67
// p := p + 1 ;
6091: LD_ADDR_VAR 0 1
6095: PUSH
6096: LD_VAR 0 1
6100: PUSH
6101: LD_INT 1
6103: PLUS
6104: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6105: LD_INT 38
6107: PUSH
6108: LD_INT 47
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PPUSH
6115: LD_INT 56
6117: PPUSH
6118: LD_INT 0
6120: PPUSH
6121: CALL_OW 111
// if IsInArea ( cargo1 , RemArea ) then
6125: LD_INT 38
6127: PPUSH
6128: LD_INT 27
6130: PPUSH
6131: CALL_OW 308
6135: IFFALSE 6144
// RemoveUnit ( cargo1 ) ;
6137: LD_INT 38
6139: PPUSH
6140: CALL_OW 64
// if IsInArea ( cargo2 , RemArea ) then
6144: LD_INT 47
6146: PPUSH
6147: LD_INT 27
6149: PPUSH
6150: CALL_OW 308
6154: IFFALSE 6163
// RemoveUnit ( cargo2 ) ;
6156: LD_INT 47
6158: PPUSH
6159: CALL_OW 64
// until p > 30 ;
6163: LD_VAR 0 1
6167: PUSH
6168: LD_INT 30
6170: GREATER
6171: IFFALSE 6084
// end ;
6173: PPOPN 1
6175: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
6176: LD_EXP 65
6180: PUSH
6181: LD_INT 1
6183: EQUAL
6184: IFFALSE 7316
6186: GO 6188
6188: DISABLE
6189: LD_INT 0
6191: PPUSH
6192: PPUSH
6193: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6194: LD_ADDR_VAR 0 1
6198: PUSH
6199: LD_INT 22
6201: PUSH
6202: LD_INT 1
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 25
6211: PUSH
6212: LD_INT 4
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 26
6221: PUSH
6222: LD_INT 1
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: LIST
6233: PPUSH
6234: CALL_OW 69
6238: PUSH
6239: LD_EXP 1
6243: PUSH
6244: LD_EXP 2
6248: PUSH
6249: LD_EXP 3
6253: PUSH
6254: LD_EXP 4
6258: PUSH
6259: LD_EXP 5
6263: PUSH
6264: LD_EXP 6
6268: PUSH
6269: LD_EXP 7
6273: PUSH
6274: LD_EXP 8
6278: PUSH
6279: LD_EXP 9
6283: PUSH
6284: LD_EXP 10
6288: PUSH
6289: LD_EXP 11
6293: PUSH
6294: LD_EXP 12
6298: PUSH
6299: LD_EXP 13
6303: PUSH
6304: LD_EXP 14
6308: PUSH
6309: LD_EXP 15
6313: PUSH
6314: LD_EXP 16
6318: PUSH
6319: LD_EXP 17
6323: PUSH
6324: LD_EXP 18
6328: PUSH
6329: LD_EXP 19
6333: PUSH
6334: LD_EXP 24
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: DIFF
6361: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6362: LD_ADDR_VAR 0 2
6366: PUSH
6367: LD_INT 22
6369: PUSH
6370: LD_INT 1
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PUSH
6377: LD_INT 26
6379: PUSH
6380: LD_INT 1
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: PUSH
6387: LD_INT 2
6389: PUSH
6390: LD_INT 25
6392: PUSH
6393: LD_INT 1
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: PUSH
6400: LD_INT 25
6402: PUSH
6403: LD_INT 2
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: LD_INT 25
6412: PUSH
6413: LD_INT 3
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: LIST
6430: PPUSH
6431: CALL_OW 69
6435: PUSH
6436: LD_EXP 1
6440: PUSH
6441: LD_EXP 2
6445: PUSH
6446: LD_EXP 3
6450: PUSH
6451: LD_EXP 4
6455: PUSH
6456: LD_EXP 5
6460: PUSH
6461: LD_EXP 6
6465: PUSH
6466: LD_EXP 7
6470: PUSH
6471: LD_EXP 8
6475: PUSH
6476: LD_EXP 9
6480: PUSH
6481: LD_EXP 10
6485: PUSH
6486: LD_EXP 11
6490: PUSH
6491: LD_EXP 12
6495: PUSH
6496: LD_EXP 13
6500: PUSH
6501: LD_EXP 14
6505: PUSH
6506: LD_EXP 15
6510: PUSH
6511: LD_EXP 16
6515: PUSH
6516: LD_EXP 17
6520: PUSH
6521: LD_EXP 18
6525: PUSH
6526: LD_EXP 19
6530: PUSH
6531: LD_EXP 24
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: DIFF
6558: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
6559: LD_EXP 10
6563: PUSH
6564: LD_VAR 0 2
6568: OR
6569: PUSH
6570: LD_EXP 17
6574: PUSH
6575: LD_VAR 0 1
6579: OR
6580: AND
6581: IFFALSE 6800
// begin DialogueOn ;
6583: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
6587: LD_EXP 17
6591: PPUSH
6592: CALL_OW 302
6596: IFFALSE 6612
// Say ( DeltaDoctor , D3-Sci1-1 ) else
6598: LD_EXP 17
6602: PPUSH
6603: LD_STRING D3-Sci1-1
6605: PPUSH
6606: CALL_OW 88
6610: GO 6624
// Say ( tmp1 , D3-Sci1-1 ) ;
6612: LD_VAR 0 1
6616: PPUSH
6617: LD_STRING D3-Sci1-1
6619: PPUSH
6620: CALL_OW 88
// if IsOk ( Gary ) then
6624: LD_EXP 10
6628: PPUSH
6629: CALL_OW 302
6633: IFFALSE 6649
// Say ( Gary , D3-Gary-1 ) else
6635: LD_EXP 10
6639: PPUSH
6640: LD_STRING D3-Gary-1
6642: PPUSH
6643: CALL_OW 88
6647: GO 6661
// Say ( tmp2 , D3-Gary-1 ) ;
6649: LD_VAR 0 2
6653: PPUSH
6654: LD_STRING D3-Gary-1
6656: PPUSH
6657: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6661: LD_EXP 17
6665: PPUSH
6666: CALL_OW 302
6670: IFFALSE 6686
// Say ( DeltaDoctor , D3-Sci1-2 ) else
6672: LD_EXP 17
6676: PPUSH
6677: LD_STRING D3-Sci1-2
6679: PPUSH
6680: CALL_OW 88
6684: GO 6698
// Say ( tmp1 , D3-Sci1-2 ) ;
6686: LD_VAR 0 1
6690: PPUSH
6691: LD_STRING D3-Sci1-2
6693: PPUSH
6694: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6698: LD_EXP 1
6702: PPUSH
6703: LD_STRING D3-JMM-2
6705: PPUSH
6706: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6710: LD_EXP 17
6714: PPUSH
6715: CALL_OW 302
6719: IFFALSE 6735
// Say ( DeltaDoctor , D3-Sci1-3 ) else
6721: LD_EXP 17
6725: PPUSH
6726: LD_STRING D3-Sci1-3
6728: PPUSH
6729: CALL_OW 88
6733: GO 6747
// Say ( tmp1 , D3-Sci1-3 ) ;
6735: LD_VAR 0 1
6739: PPUSH
6740: LD_STRING D3-Sci1-3
6742: PPUSH
6743: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
6747: LD_EXP 1
6751: PPUSH
6752: LD_STRING D3-JMM-3
6754: PPUSH
6755: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6759: LD_EXP 17
6763: PPUSH
6764: CALL_OW 302
6768: IFFALSE 6784
// Say ( DeltaDoctor , D3-Sci1-4 ) else
6770: LD_EXP 17
6774: PPUSH
6775: LD_STRING D3-Sci1-4
6777: PPUSH
6778: CALL_OW 88
6782: GO 6796
// Say ( tmp1 , D3-Sci1-4 ) ;
6784: LD_VAR 0 1
6788: PPUSH
6789: LD_STRING D3-Sci1-4
6791: PPUSH
6792: CALL_OW 88
// DialogueOff ;
6796: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
6800: LD_INT 12
6802: PPUSH
6803: LD_INT 1
6805: PPUSH
6806: LD_INT 1
6808: PPUSH
6809: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
6813: LD_INT 32
6815: PPUSH
6816: LD_INT 1
6818: PPUSH
6819: LD_INT 1
6821: PPUSH
6822: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
6826: LD_INT 12
6828: PPUSH
6829: LD_INT 1
6831: PPUSH
6832: LD_INT 1
6834: PPUSH
6835: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
6839: LD_INT 33
6841: PPUSH
6842: LD_INT 1
6844: PPUSH
6845: LD_INT 1
6847: PPUSH
6848: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
6852: LD_STRING M2
6854: PPUSH
6855: CALL_OW 337
// wait ( 3 3$0 ) ;
6859: LD_INT 6300
6861: PPUSH
6862: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6866: LD_INT 35
6868: PPUSH
6869: CALL_OW 67
// until not InBattle ( 1 ) ;
6873: LD_INT 1
6875: PPUSH
6876: CALL_OW 463
6880: NOT
6881: IFFALSE 6866
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
6883: LD_EXP 11
6887: PPUSH
6888: CALL_OW 302
6892: PUSH
6893: LD_EXP 17
6897: PPUSH
6898: CALL_OW 302
6902: AND
6903: IFFALSE 7072
// begin DialogueOn ;
6905: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6909: LD_EXP 11
6913: PPUSH
6914: LD_STRING D3a-Sim-1
6916: PPUSH
6917: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
6921: LD_EXP 17
6925: PPUSH
6926: LD_STRING D3a-Sci1-1
6928: PPUSH
6929: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6933: LD_EXP 11
6937: PPUSH
6938: LD_STRING D3a-Sim-2
6940: PPUSH
6941: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
6945: LD_EXP 17
6949: PPUSH
6950: LD_STRING D3a-Sci1-2
6952: PPUSH
6953: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6957: LD_EXP 11
6961: PPUSH
6962: LD_STRING D3a-Sim-3
6964: PPUSH
6965: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
6969: LD_EXP 17
6973: PPUSH
6974: LD_STRING D3a-Sci1-3
6976: PPUSH
6977: CALL_OW 88
// if IsOK ( Joan ) then
6981: LD_EXP 13
6985: PPUSH
6986: CALL_OW 302
6990: IFFALSE 7006
// Say ( Simms , D3a-Sim-4 ) else
6992: LD_EXP 11
6996: PPUSH
6997: LD_STRING D3a-Sim-4
6999: PPUSH
7000: CALL_OW 88
7004: GO 7018
// Say ( Simms , D3a-Sim-4a ) ;
7006: LD_EXP 11
7010: PPUSH
7011: LD_STRING D3a-Sim-4a
7013: PPUSH
7014: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
7018: LD_EXP 17
7022: PPUSH
7023: LD_STRING D3a-Sci1-4
7025: PPUSH
7026: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7030: LD_EXP 11
7034: PPUSH
7035: LD_STRING D3a-Sim-5
7037: PPUSH
7038: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
7042: LD_EXP 17
7046: PPUSH
7047: LD_STRING D3a-Sci1-5
7049: PPUSH
7050: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7054: LD_EXP 11
7058: PPUSH
7059: LD_STRING D3a-Sim-6
7061: PPUSH
7062: CALL_OW 88
// DialogueOff ;
7066: CALL_OW 7
// end else
7070: GO 7316
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
7072: LD_ADDR_VAR 0 3
7076: PUSH
7077: LD_INT 22
7079: PUSH
7080: LD_INT 1
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PUSH
7087: LD_INT 25
7089: PUSH
7090: LD_INT 4
7092: PUSH
7093: EMPTY
7094: LIST
7095: LIST
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PPUSH
7101: CALL_OW 69
7105: PUSH
7106: LD_EXP 11
7110: PUSH
7111: LD_EXP 14
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: DIFF
7120: ST_TO_ADDR
// if tmp3 > 0 then
7121: LD_VAR 0 3
7125: PUSH
7126: LD_INT 0
7128: GREATER
7129: IFFALSE 7316
// begin DialogueOn ;
7131: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7135: LD_EXP 11
7139: PPUSH
7140: LD_STRING D3a-Sim-1
7142: PPUSH
7143: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
7147: LD_VAR 0 3
7151: PUSH
7152: LD_INT 1
7154: ARRAY
7155: PPUSH
7156: LD_STRING D3a-Sci1-1
7158: PPUSH
7159: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7163: LD_EXP 11
7167: PPUSH
7168: LD_STRING D3a-Sim-2
7170: PPUSH
7171: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
7175: LD_VAR 0 3
7179: PUSH
7180: LD_INT 1
7182: ARRAY
7183: PPUSH
7184: LD_STRING D3a-Sci1-2
7186: PPUSH
7187: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7191: LD_EXP 11
7195: PPUSH
7196: LD_STRING D3a-Sim-3
7198: PPUSH
7199: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
7203: LD_VAR 0 3
7207: PUSH
7208: LD_INT 1
7210: ARRAY
7211: PPUSH
7212: LD_STRING D3a-Sci1-3
7214: PPUSH
7215: CALL_OW 88
// if IsOK ( Joan ) then
7219: LD_EXP 13
7223: PPUSH
7224: CALL_OW 302
7228: IFFALSE 7244
// Say ( Simms , D3a-Sim-4 ) else
7230: LD_EXP 11
7234: PPUSH
7235: LD_STRING D3a-Sim-4
7237: PPUSH
7238: CALL_OW 88
7242: GO 7256
// Say ( Simms , D3a-Sim-4a ) ;
7244: LD_EXP 11
7248: PPUSH
7249: LD_STRING D3a-Sim-4a
7251: PPUSH
7252: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
7256: LD_VAR 0 3
7260: PUSH
7261: LD_INT 1
7263: ARRAY
7264: PPUSH
7265: LD_STRING D3a-Sci1-4
7267: PPUSH
7268: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7272: LD_EXP 11
7276: PPUSH
7277: LD_STRING D3a-Sim-5
7279: PPUSH
7280: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
7284: LD_VAR 0 3
7288: PUSH
7289: LD_INT 1
7291: ARRAY
7292: PPUSH
7293: LD_STRING D3a-Sci1-5
7295: PPUSH
7296: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7300: LD_EXP 11
7304: PPUSH
7305: LD_STRING D3a-Sim-6
7307: PPUSH
7308: CALL_OW 88
// DialogueOff ;
7312: CALL_OW 7
// end ; end ; end ;
7316: PPOPN 3
7318: END
// every 0 0$2 trigger joinEpsilon = 1 do var rnd ;
7319: LD_EXP 29
7323: PUSH
7324: LD_INT 1
7326: EQUAL
7327: IFFALSE 7662
7329: GO 7331
7331: DISABLE
7332: LD_INT 0
7334: PPUSH
// begin wait ( 2 2$00 ) ;
7335: LD_INT 4200
7337: PPUSH
7338: CALL_OW 67
// SayRadio ( AmScout , D4-FSol1-1 ) ;
7342: LD_EXP 18
7346: PPUSH
7347: LD_STRING D4-FSol1-1
7349: PPUSH
7350: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
7354: LD_STRING M3
7356: PPUSH
7357: CALL_OW 337
// PrepareRussians ;
7361: CALL 3620 0 0
// spawnRussians := true ;
7365: LD_ADDR_EXP 58
7369: PUSH
7370: LD_INT 1
7372: ST_TO_ADDR
// rnd = Rand ( 1 , 100 ) ;
7373: LD_ADDR_VAR 0 1
7377: PUSH
7378: LD_INT 1
7380: PPUSH
7381: LD_INT 100
7383: PPUSH
7384: CALL_OW 12
7388: ST_TO_ADDR
// if difficulty = 1 then
7389: LD_OWVAR 67
7393: PUSH
7394: LD_INT 1
7396: EQUAL
7397: IFFALSE 7480
// begin if rnd > 0 and rnd < 51 then
7399: LD_VAR 0 1
7403: PUSH
7404: LD_INT 0
7406: GREATER
7407: PUSH
7408: LD_VAR 0 1
7412: PUSH
7413: LD_INT 51
7415: LESS
7416: AND
7417: IFFALSE 7426
// BuildRussianBase ( 2 ) ;
7419: LD_INT 2
7421: PPUSH
7422: CALL 11768 0 1
// if rnd > 50 and rnd < 81 then
7426: LD_VAR 0 1
7430: PUSH
7431: LD_INT 50
7433: GREATER
7434: PUSH
7435: LD_VAR 0 1
7439: PUSH
7440: LD_INT 81
7442: LESS
7443: AND
7444: IFFALSE 7453
// BuildRussianBase ( 1 ) ;
7446: LD_INT 1
7448: PPUSH
7449: CALL 11768 0 1
// if rnd > 80 and rnd < 101 then
7453: LD_VAR 0 1
7457: PUSH
7458: LD_INT 80
7460: GREATER
7461: PUSH
7462: LD_VAR 0 1
7466: PUSH
7467: LD_INT 101
7469: LESS
7470: AND
7471: IFFALSE 7480
// BuildRussianBase ( 3 ) ;
7473: LD_INT 3
7475: PPUSH
7476: CALL 11768 0 1
// end ; if difficulty = 2 then
7480: LD_OWVAR 67
7484: PUSH
7485: LD_INT 2
7487: EQUAL
7488: IFFALSE 7571
// begin if rnd > 0 and rnd < 61 then
7490: LD_VAR 0 1
7494: PUSH
7495: LD_INT 0
7497: GREATER
7498: PUSH
7499: LD_VAR 0 1
7503: PUSH
7504: LD_INT 61
7506: LESS
7507: AND
7508: IFFALSE 7517
// BuildRussianBase ( 2 ) ;
7510: LD_INT 2
7512: PPUSH
7513: CALL 11768 0 1
// if rnd > 60 and rnd < 81 then
7517: LD_VAR 0 1
7521: PUSH
7522: LD_INT 60
7524: GREATER
7525: PUSH
7526: LD_VAR 0 1
7530: PUSH
7531: LD_INT 81
7533: LESS
7534: AND
7535: IFFALSE 7544
// BuildRussianBase ( 1 ) ;
7537: LD_INT 1
7539: PPUSH
7540: CALL 11768 0 1
// if rnd > 80 and rnd < 101 then
7544: LD_VAR 0 1
7548: PUSH
7549: LD_INT 80
7551: GREATER
7552: PUSH
7553: LD_VAR 0 1
7557: PUSH
7558: LD_INT 101
7560: LESS
7561: AND
7562: IFFALSE 7571
// BuildRussianBase ( 3 ) ;
7564: LD_INT 3
7566: PPUSH
7567: CALL 11768 0 1
// end ; if difficulty >= 3 then
7571: LD_OWVAR 67
7575: PUSH
7576: LD_INT 3
7578: GREATEREQUAL
7579: IFFALSE 7662
// begin if rnd > 0 and rnd < 71 then
7581: LD_VAR 0 1
7585: PUSH
7586: LD_INT 0
7588: GREATER
7589: PUSH
7590: LD_VAR 0 1
7594: PUSH
7595: LD_INT 71
7597: LESS
7598: AND
7599: IFFALSE 7608
// BuildRussianBase ( 3 ) ;
7601: LD_INT 3
7603: PPUSH
7604: CALL 11768 0 1
// if rnd > 70 and rnd < 81 then
7608: LD_VAR 0 1
7612: PUSH
7613: LD_INT 70
7615: GREATER
7616: PUSH
7617: LD_VAR 0 1
7621: PUSH
7622: LD_INT 81
7624: LESS
7625: AND
7626: IFFALSE 7635
// BuildRussianBase ( 2 ) ;
7628: LD_INT 2
7630: PPUSH
7631: CALL 11768 0 1
// if rnd > 80 and rnd < 101 then
7635: LD_VAR 0 1
7639: PUSH
7640: LD_INT 80
7642: GREATER
7643: PUSH
7644: LD_VAR 0 1
7648: PUSH
7649: LD_INT 101
7651: LESS
7652: AND
7653: IFFALSE 7662
// BuildRussianBase ( 1 ) ;
7655: LD_INT 1
7657: PPUSH
7658: CALL 11768 0 1
// end ; end ;
7662: PPOPN 1
7664: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
7665: LD_INT 54
7667: PPUSH
7668: LD_INT 1
7670: PPUSH
7671: CALL_OW 321
7675: PUSH
7676: LD_INT 2
7678: EQUAL
7679: PUSH
7680: LD_INT 21
7682: PPUSH
7683: LD_INT 1
7685: PPUSH
7686: CALL_OW 321
7690: PUSH
7691: LD_INT 2
7693: EQUAL
7694: OR
7695: PUSH
7696: LD_INT 22
7698: PPUSH
7699: LD_INT 1
7701: PPUSH
7702: CALL_OW 321
7706: PUSH
7707: LD_INT 2
7709: EQUAL
7710: OR
7711: IFFALSE 8013
7713: GO 7715
7715: DISABLE
7716: LD_INT 0
7718: PPUSH
7719: PPUSH
// begin if IsOk ( DeltaDoctor ) then
7720: LD_EXP 17
7724: PPUSH
7725: CALL_OW 302
7729: IFFALSE 7743
// tmp := DeltaDoctor else
7731: LD_ADDR_VAR 0 2
7735: PUSH
7736: LD_EXP 17
7740: ST_TO_ADDR
7741: GO 7753
// tmp := Denis ;
7743: LD_ADDR_VAR 0 2
7747: PUSH
7748: LD_EXP 12
7752: ST_TO_ADDR
// if tmp then
7753: LD_VAR 0 2
7757: IFFALSE 7851
// begin DialogueOn ;
7759: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
7763: LD_EXP 1
7767: PPUSH
7768: LD_STRING D6-JMM-1
7770: PPUSH
7771: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
7775: LD_VAR 0 2
7779: PPUSH
7780: LD_STRING D6-Sci1-1
7782: PPUSH
7783: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
7787: LD_EXP 1
7791: PPUSH
7792: LD_STRING D6-JMM-2
7794: PPUSH
7795: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
7799: LD_VAR 0 2
7803: PPUSH
7804: LD_STRING D6-Sci1-2
7806: PPUSH
7807: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
7811: LD_EXP 1
7815: PPUSH
7816: LD_STRING D6-JMM-3
7818: PPUSH
7819: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
7823: LD_VAR 0 2
7827: PPUSH
7828: LD_STRING D6-Sci1-3
7830: PPUSH
7831: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
7835: LD_EXP 1
7839: PPUSH
7840: LD_STRING D6-JMM-4
7842: PPUSH
7843: CALL_OW 88
// DialogueOff ;
7847: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
7851: LD_INT 1050
7853: PPUSH
7854: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
7858: LD_EXP 49
7862: PUSH
7863: LD_INT 0
7865: EQUAL
7866: PUSH
7867: LD_EXP 14
7871: PPUSH
7872: CALL_OW 302
7876: AND
7877: IFFALSE 7935
// begin DialogueOn ;
7879: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
7883: LD_EXP 27
7887: PPUSH
7888: LD_STRING D5-Ar1-1
7890: PPUSH
7891: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
7895: LD_EXP 26
7899: PPUSH
7900: LD_STRING D5-Diet-1
7902: PPUSH
7903: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
7907: LD_EXP 27
7911: PPUSH
7912: LD_STRING D5-Ar1-2
7914: PPUSH
7915: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
7919: LD_EXP 26
7923: PPUSH
7924: LD_STRING D5-Diet-2
7926: PPUSH
7927: CALL_OW 88
// DialogueOff ;
7931: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
7935: LD_INT 35
7937: PPUSH
7938: CALL_OW 67
// until tick > 10 10$00 ;
7942: LD_OWVAR 1
7946: PUSH
7947: LD_INT 21000
7949: GREATER
7950: IFFALSE 7935
// wait ( 1 1$30 ) ;
7952: LD_INT 3150
7954: PPUSH
7955: CALL_OW 67
// if arabianTrait = 0 then
7959: LD_EXP 49
7963: PUSH
7964: LD_INT 0
7966: EQUAL
7967: IFFALSE 8013
// begin arabianTrait = 1 ;
7969: LD_ADDR_EXP 49
7973: PUSH
7974: LD_INT 1
7976: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
7977: LD_INT 2
7979: PPUSH
7980: LD_INT 3
7982: PPUSH
7983: LD_INT 1
7985: PPUSH
7986: LD_INT 1
7988: PPUSH
7989: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
7993: LD_INT 2
7995: PPUSH
7996: LD_INT 6
7998: PPUSH
7999: LD_INT 1
8001: PPUSH
8002: LD_INT 1
8004: PPUSH
8005: CALL_OW 80
// PrepareArabianTrait ;
8009: CALL 8016 0 0
// end ; end ;
8013: PPOPN 2
8015: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding ; begin
8016: LD_INT 0
8018: PPUSH
8019: PPUSH
8020: PPUSH
8021: PPUSH
8022: PPUSH
8023: PPUSH
8024: PPUSH
8025: PPUSH
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
8026: LD_ADDR_VAR 0 6
8030: PUSH
8031: LD_INT 22
8033: PUSH
8034: LD_INT 2
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PUSH
8041: LD_INT 2
8043: PUSH
8044: LD_INT 25
8046: PUSH
8047: LD_INT 4
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: LD_INT 25
8056: PUSH
8057: LD_INT 2
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: PUSH
8064: LD_INT 25
8066: PUSH
8067: LD_INT 3
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: PPUSH
8084: CALL_OW 69
8088: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8089: LD_ADDR_VAR 0 5
8093: PUSH
8094: LD_INT 22
8096: PUSH
8097: LD_INT 2
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: PUSH
8104: LD_INT 21
8106: PUSH
8107: LD_INT 1
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: PUSH
8114: LD_INT 2
8116: PUSH
8117: LD_INT 25
8119: PUSH
8120: LD_INT 1
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: PUSH
8127: LD_INT 25
8129: PUSH
8130: LD_INT 8
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PUSH
8137: LD_INT 25
8139: PUSH
8140: LD_INT 15
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: LIST
8157: PPUSH
8158: CALL_OW 69
8162: PUSH
8163: LD_EXP 26
8167: PUSH
8168: EMPTY
8169: LIST
8170: DIFF
8171: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
8172: LD_ADDR_VAR 0 7
8176: PUSH
8177: LD_INT 22
8179: PUSH
8180: LD_INT 2
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PUSH
8187: LD_INT 30
8189: PUSH
8190: LD_INT 5
8192: PUSH
8193: EMPTY
8194: LIST
8195: LIST
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 69
8205: PUSH
8206: LD_INT 1
8208: ARRAY
8209: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
8210: LD_VAR 0 6
8214: PPUSH
8215: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
8219: LD_VAR 0 5
8223: PPUSH
8224: CALL_OW 122
// wait ( 0 0$3 ) ;
8228: LD_INT 105
8230: PPUSH
8231: CALL_OW 67
// AddComEnterUnit ( arCivilian , barracks ) ;
8235: LD_VAR 0 6
8239: PPUSH
8240: LD_VAR 0 7
8244: PPUSH
8245: CALL_OW 180
// AddComChangeProfession ( arCivilian , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
8249: LD_VAR 0 6
8253: PPUSH
8254: LD_INT 1
8256: PUSH
8257: LD_INT 8
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: PUSH
8264: LD_INT 1
8266: PPUSH
8267: LD_INT 2
8269: PPUSH
8270: CALL_OW 12
8274: ARRAY
8275: PPUSH
8276: CALL_OW 183
// AddComExitBuilding ( arCivilian ) ;
8280: LD_VAR 0 6
8284: PPUSH
8285: CALL_OW 182
// wait ( 0 0$1 ) ;
8289: LD_INT 35
8291: PPUSH
8292: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
8296: LD_INT 76
8298: PPUSH
8299: LD_INT 19
8301: PPUSH
8302: CALL_OW 84
// DialogueOn ;
8306: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8310: LD_INT 22
8312: PUSH
8313: LD_INT 1
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: LD_INT 26
8322: PUSH
8323: LD_INT 1
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: LD_INT 2
8332: PUSH
8333: LD_INT 25
8335: PUSH
8336: LD_INT 1
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: LD_INT 25
8345: PUSH
8346: LD_INT 2
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 25
8355: PUSH
8356: LD_INT 3
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: LD_INT 25
8365: PUSH
8366: LD_INT 4
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PUSH
8373: LD_INT 25
8375: PUSH
8376: LD_INT 5
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: LIST
8395: PPUSH
8396: CALL_OW 69
8400: PPUSH
8401: LD_STRING D8-Sol1-1
8403: PPUSH
8404: LD_STRING D8-Sol1-1
8406: PPUSH
8407: CALL 11110 0 3
// if IsOK ( DeltaDoctor ) then
8411: LD_EXP 17
8415: PPUSH
8416: CALL_OW 302
8420: IFFALSE 8436
// Say ( DeltaDoctor , D8-Sci1-1 ) else
8422: LD_EXP 17
8426: PPUSH
8427: LD_STRING D8-Sci1-1
8429: PPUSH
8430: CALL_OW 88
8434: GO 8537
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8436: LD_INT 22
8438: PUSH
8439: LD_INT 1
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PUSH
8446: LD_INT 26
8448: PUSH
8449: LD_INT 1
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PUSH
8456: LD_INT 2
8458: PUSH
8459: LD_INT 25
8461: PUSH
8462: LD_INT 1
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 25
8471: PUSH
8472: LD_INT 2
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: LD_INT 25
8481: PUSH
8482: LD_INT 3
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PUSH
8489: LD_INT 25
8491: PUSH
8492: LD_INT 4
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: PUSH
8499: LD_INT 25
8501: PUSH
8502: LD_INT 5
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: PPUSH
8522: CALL_OW 69
8526: PPUSH
8527: LD_STRING D8-Sol1-1
8529: PPUSH
8530: LD_STRING D8-Sol1-1
8532: PPUSH
8533: CALL 11110 0 3
// Say ( JMM , D8-JMM-1 ) ;
8537: LD_EXP 1
8541: PPUSH
8542: LD_STRING D8-JMM-1
8544: PPUSH
8545: CALL_OW 88
// DialogueOff ;
8549: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
8553: LD_INT 2
8555: PPUSH
8556: LD_INT 2
8558: PPUSH
8559: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
8563: LD_INT 1
8565: PPUSH
8566: LD_INT 2
8568: PPUSH
8569: LD_INT 2
8571: PPUSH
8572: LD_INT 1
8574: PPUSH
8575: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
8579: LD_INT 3
8581: PPUSH
8582: LD_INT 2
8584: PPUSH
8585: LD_INT 1
8587: PPUSH
8588: LD_INT 1
8590: PPUSH
8591: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
8595: LD_STRING M4
8597: PPUSH
8598: CALL_OW 337
// wait ( 0 0$1 ) ;
8602: LD_INT 35
8604: PPUSH
8605: CALL_OW 67
// if IsLive ( Khatam ) then
8609: LD_EXP 14
8613: PPUSH
8614: CALL_OW 300
8618: IFFALSE 8632
// DoNotAttack ( 2 , Khatam ) ;
8620: LD_INT 2
8622: PPUSH
8623: LD_EXP 14
8627: PPUSH
8628: CALL_OW 471
// wait ( 0 0$1 ) ;
8632: LD_INT 35
8634: PPUSH
8635: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
8639: LD_ADDR_VAR 0 8
8643: PUSH
8644: LD_INT 22
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 21
8656: PUSH
8657: LD_INT 3
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PPUSH
8668: CALL_OW 69
8672: PPUSH
8673: LD_VAR 0 5
8677: PUSH
8678: LD_INT 1
8680: ARRAY
8681: PPUSH
8682: CALL_OW 74
8686: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
8687: LD_VAR 0 5
8691: PPUSH
8692: LD_INT 25
8694: PUSH
8695: LD_INT 1
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PPUSH
8702: CALL_OW 72
8706: PUSH
8707: LD_INT 1
8709: ARRAY
8710: PPUSH
8711: LD_VAR 0 8
8715: PPUSH
8716: CALL_OW 250
8720: PPUSH
8721: LD_VAR 0 8
8725: PPUSH
8726: CALL_OW 251
8730: PPUSH
8731: LD_VAR 0 8
8735: PPUSH
8736: CALL_OW 192
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
8740: LD_VAR 0 5
8744: PPUSH
8745: LD_INT 84
8747: PPUSH
8748: LD_INT 22
8750: PPUSH
8751: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
8755: LD_VAR 0 5
8759: PPUSH
8760: LD_INT 82
8762: PPUSH
8763: LD_INT 5
8765: PPUSH
8766: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
8770: LD_VAR 0 5
8774: PPUSH
8775: LD_INT 95
8777: PPUSH
8778: LD_INT 12
8780: PPUSH
8781: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
8785: LD_VAR 0 5
8789: PPUSH
8790: LD_INT 102
8792: PPUSH
8793: LD_INT 11
8795: PPUSH
8796: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
8800: LD_VAR 0 5
8804: PPUSH
8805: LD_INT 116
8807: PPUSH
8808: LD_INT 15
8810: PPUSH
8811: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
8815: LD_VAR 0 5
8819: PPUSH
8820: LD_INT 140
8822: PPUSH
8823: LD_INT 25
8825: PPUSH
8826: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
8830: LD_VAR 0 5
8834: PPUSH
8835: LD_INT 160
8837: PPUSH
8838: LD_INT 56
8840: PPUSH
8841: CALL_OW 174
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8845: LD_ADDR_VAR 0 5
8849: PUSH
8850: LD_INT 22
8852: PUSH
8853: LD_INT 2
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: PUSH
8860: LD_INT 21
8862: PUSH
8863: LD_INT 1
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PUSH
8870: LD_INT 2
8872: PUSH
8873: LD_INT 25
8875: PUSH
8876: LD_INT 1
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PUSH
8883: LD_INT 25
8885: PUSH
8886: LD_INT 8
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PUSH
8893: LD_INT 25
8895: PUSH
8896: LD_INT 15
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: LIST
8913: PPUSH
8914: CALL_OW 69
8918: PUSH
8919: LD_EXP 26
8923: PUSH
8924: EMPTY
8925: LIST
8926: DIFF
8927: ST_TO_ADDR
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
8928: LD_ADDR_VAR 0 6
8932: PUSH
8933: LD_INT 22
8935: PUSH
8936: LD_INT 2
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 21
8945: PUSH
8946: LD_INT 1
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: LD_INT 2
8955: PUSH
8956: LD_INT 25
8958: PUSH
8959: LD_INT 2
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: LD_INT 25
8968: PUSH
8969: LD_INT 3
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: PUSH
8976: LD_INT 25
8978: PUSH
8979: LD_INT 4
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PUSH
8986: LD_INT 25
8988: PUSH
8989: LD_INT 12
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PUSH
8996: LD_INT 25
8998: PUSH
8999: LD_INT 16
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: LIST
9018: PPUSH
9019: CALL_OW 69
9023: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
9024: LD_ADDR_VAR 0 6
9028: PUSH
9029: LD_VAR 0 6
9033: PUSH
9034: LD_EXP 26
9038: ADD
9039: ST_TO_ADDR
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
9040: LD_VAR 0 5
9044: PPUSH
9045: LD_INT 189
9047: PPUSH
9048: LD_INT 79
9050: PPUSH
9051: CALL_OW 174
// if UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) then
9055: LD_VAR 0 5
9059: PPUSH
9060: LD_INT 25
9062: PUSH
9063: LD_INT 15
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: PPUSH
9070: CALL_OW 72
9074: IFFALSE 9115
// ComEnterUnit ( UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) [ 1 ] , HexInfo ( 84 , 21 ) ) ;
9076: LD_VAR 0 5
9080: PPUSH
9081: LD_INT 25
9083: PUSH
9084: LD_INT 15
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PPUSH
9091: CALL_OW 72
9095: PUSH
9096: LD_INT 1
9098: ARRAY
9099: PPUSH
9100: LD_INT 84
9102: PPUSH
9103: LD_INT 21
9105: PPUSH
9106: CALL_OW 428
9110: PPUSH
9111: CALL_OW 120
// wait ( 0 0$4 ) ;
9115: LD_INT 140
9117: PPUSH
9118: CALL_OW 67
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
9122: LD_VAR 0 6
9126: PPUSH
9127: LD_INT 88
9129: PPUSH
9130: LD_INT 8
9132: PPUSH
9133: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
9137: LD_VAR 0 6
9141: PPUSH
9142: LD_INT 102
9144: PPUSH
9145: LD_INT 10
9147: PPUSH
9148: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
9152: LD_VAR 0 6
9156: PPUSH
9157: LD_INT 116
9159: PPUSH
9160: LD_INT 15
9162: PPUSH
9163: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
9167: LD_VAR 0 6
9171: PPUSH
9172: LD_INT 140
9174: PPUSH
9175: LD_INT 25
9177: PPUSH
9178: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
9182: LD_VAR 0 6
9186: PPUSH
9187: LD_INT 160
9189: PPUSH
9190: LD_INT 56
9192: PPUSH
9193: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
9197: LD_VAR 0 6
9201: PPUSH
9202: LD_INT 189
9204: PPUSH
9205: LD_INT 79
9207: PPUSH
9208: CALL_OW 171
// arabianAttackersAI = 1 ;
9212: LD_ADDR_EXP 46
9216: PUSH
9217: LD_INT 1
9219: ST_TO_ADDR
// if IsOk ( Gary ) then
9220: LD_EXP 10
9224: PPUSH
9225: CALL_OW 302
9229: IFFALSE 9243
// Say ( Gary , D8a-Gary-1 ) ;
9231: LD_EXP 10
9235: PPUSH
9236: LD_STRING D8a-Gary-1
9238: PPUSH
9239: CALL_OW 88
// wait ( 0 0$5 ) ;
9243: LD_INT 175
9245: PPUSH
9246: CALL_OW 67
// if IsOK ( Khatam ) then
9250: LD_EXP 14
9254: PPUSH
9255: CALL_OW 302
9259: IFFALSE 9795
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
9261: LD_ADDR_VAR 0 3
9265: PUSH
9266: LD_INT 22
9268: PUSH
9269: LD_INT 1
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 2
9278: PUSH
9279: LD_INT 25
9281: PUSH
9282: LD_INT 1
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PUSH
9289: LD_INT 25
9291: PUSH
9292: LD_INT 2
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: LD_INT 25
9301: PUSH
9302: LD_INT 3
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: PUSH
9309: LD_INT 25
9311: PUSH
9312: LD_INT 4
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: LD_INT 25
9321: PUSH
9322: LD_INT 5
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 25
9331: PUSH
9332: LD_INT 8
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PPUSH
9352: CALL_OW 69
9356: PUSH
9357: LD_EXP 1
9361: PUSH
9362: LD_EXP 2
9366: PUSH
9367: LD_EXP 3
9371: PUSH
9372: LD_EXP 4
9376: PUSH
9377: LD_EXP 5
9381: PUSH
9382: LD_EXP 6
9386: PUSH
9387: LD_EXP 7
9391: PUSH
9392: LD_EXP 8
9396: PUSH
9397: LD_EXP 9
9401: PUSH
9402: LD_EXP 10
9406: PUSH
9407: LD_EXP 11
9411: PUSH
9412: LD_EXP 12
9416: PUSH
9417: LD_EXP 13
9421: PUSH
9422: LD_EXP 14
9426: PUSH
9427: LD_EXP 15
9431: PUSH
9432: LD_EXP 16
9436: PUSH
9437: LD_EXP 17
9441: PUSH
9442: LD_EXP 19
9446: PUSH
9447: LD_EXP 24
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: DIFF
9473: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
9474: LD_EXP 14
9478: PPUSH
9479: LD_INT 8
9481: PPUSH
9482: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
9486: LD_EXP 14
9490: PPUSH
9491: CALL_OW 122
// wait ( 0 0$1 ) ;
9495: LD_INT 35
9497: PPUSH
9498: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
9502: LD_EXP 14
9506: PPUSH
9507: CALL_OW 121
// wait ( 0 0$1 ) ;
9511: LD_INT 35
9513: PPUSH
9514: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
9518: LD_EXP 14
9522: PPUSH
9523: LD_INT 7
9525: PPUSH
9526: CALL_OW 113
// if not tmp then
9530: LD_VAR 0 3
9534: NOT
9535: IFFALSE 9539
// exit ;
9537: GO 9795
// DialogueOn ;
9539: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
9543: LD_VAR 0 3
9547: PUSH
9548: LD_INT 1
9550: ARRAY
9551: PPUSH
9552: CALL_OW 258
9556: PUSH
9557: LD_INT 1
9559: EQUAL
9560: IFFALSE 9580
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
9562: LD_VAR 0 3
9566: PUSH
9567: LD_INT 1
9569: ARRAY
9570: PPUSH
9571: LD_STRING D8b-Sol1-1
9573: PPUSH
9574: CALL_OW 88
9578: GO 9596
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
9580: LD_VAR 0 3
9584: PUSH
9585: LD_INT 1
9587: ARRAY
9588: PPUSH
9589: LD_STRING D8b-FSol1-1
9591: PPUSH
9592: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
9596: LD_EXP 14
9600: PPUSH
9601: LD_STRING D8b-Khat-1
9603: PPUSH
9604: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9608: LD_VAR 0 3
9612: PUSH
9613: LD_INT 1
9615: ARRAY
9616: PPUSH
9617: CALL_OW 258
9621: PUSH
9622: LD_INT 1
9624: EQUAL
9625: IFFALSE 9645
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
9627: LD_VAR 0 3
9631: PUSH
9632: LD_INT 1
9634: ARRAY
9635: PPUSH
9636: LD_STRING D8b-Sol1-2
9638: PPUSH
9639: CALL_OW 88
9643: GO 9661
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
9645: LD_VAR 0 3
9649: PUSH
9650: LD_INT 1
9652: ARRAY
9653: PPUSH
9654: LD_STRING D8b-FSol1-2
9656: PPUSH
9657: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
9661: LD_EXP 14
9665: PPUSH
9666: LD_STRING D8b-Khat-2
9668: PPUSH
9669: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9673: LD_VAR 0 3
9677: PUSH
9678: LD_INT 1
9680: ARRAY
9681: PPUSH
9682: CALL_OW 258
9686: PUSH
9687: LD_INT 1
9689: EQUAL
9690: IFFALSE 9710
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
9692: LD_VAR 0 3
9696: PUSH
9697: LD_INT 1
9699: ARRAY
9700: PPUSH
9701: LD_STRING D8b-Sol1-3
9703: PPUSH
9704: CALL_OW 88
9708: GO 9726
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
9710: LD_VAR 0 3
9714: PUSH
9715: LD_INT 1
9717: ARRAY
9718: PPUSH
9719: LD_STRING D8b-FSol1-3
9721: PPUSH
9722: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
9726: LD_EXP 14
9730: PPUSH
9731: LD_STRING D8b-Khat-3
9733: PPUSH
9734: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9738: LD_VAR 0 3
9742: PUSH
9743: LD_INT 1
9745: ARRAY
9746: PPUSH
9747: CALL_OW 258
9751: PUSH
9752: LD_INT 1
9754: EQUAL
9755: IFFALSE 9775
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
9757: LD_VAR 0 3
9761: PUSH
9762: LD_INT 1
9764: ARRAY
9765: PPUSH
9766: LD_STRING D8b-Sol1-4
9768: PPUSH
9769: CALL_OW 88
9773: GO 9791
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
9775: LD_VAR 0 3
9779: PUSH
9780: LD_INT 1
9782: ARRAY
9783: PPUSH
9784: LD_STRING D8b-FSol1-4
9786: PPUSH
9787: CALL_OW 88
// DialogueOff ;
9791: CALL_OW 7
// end ; end ;
9795: LD_VAR 0 1
9799: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
9800: LD_INT 7
9802: PPUSH
9803: LD_INT 22
9805: PUSH
9806: LD_INT 2
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PPUSH
9813: CALL_OW 70
9817: PUSH
9818: LD_INT 0
9820: GREATER
9821: PUSH
9822: LD_EXP 14
9826: PPUSH
9827: LD_INT 7
9829: PPUSH
9830: CALL_OW 308
9834: OR
9835: IFFALSE 10042
9837: GO 9839
9839: DISABLE
9840: LD_INT 0
9842: PPUSH
// begin enable ;
9843: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
9844: LD_ADDR_VAR 0 1
9848: PUSH
9849: LD_INT 7
9851: PPUSH
9852: LD_INT 22
9854: PUSH
9855: LD_INT 2
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PPUSH
9862: CALL_OW 70
9866: PUSH
9867: FOR_IN
9868: IFFALSE 10009
// begin if GetClass ( i ) = 4 then
9870: LD_VAR 0 1
9874: PPUSH
9875: CALL_OW 257
9879: PUSH
9880: LD_INT 4
9882: EQUAL
9883: IFFALSE 9895
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
9885: LD_INT 1
9887: PPUSH
9888: LD_STRING 10_ScientistsEscape_1
9890: PPUSH
9891: CALL_OW 39
// if i = Dietrich then
9895: LD_VAR 0 1
9899: PUSH
9900: LD_EXP 26
9904: EQUAL
9905: IFFALSE 9915
// GensherStatus = 1 ;
9907: LD_ADDR_EXP 52
9911: PUSH
9912: LD_INT 1
9914: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
9915: LD_VAR 0 1
9919: PPUSH
9920: CALL_OW 257
9924: PUSH
9925: LD_INT 1
9927: EQUAL
9928: PUSH
9929: LD_VAR 0 1
9933: PPUSH
9934: CALL_OW 257
9938: PUSH
9939: LD_INT 2
9941: EQUAL
9942: OR
9943: PUSH
9944: LD_VAR 0 1
9948: PPUSH
9949: CALL_OW 257
9953: PUSH
9954: LD_INT 3
9956: EQUAL
9957: OR
9958: PUSH
9959: LD_VAR 0 1
9963: PPUSH
9964: CALL_OW 257
9968: PUSH
9969: LD_INT 4
9971: EQUAL
9972: OR
9973: PUSH
9974: LD_VAR 0 1
9978: PPUSH
9979: CALL_OW 257
9983: PUSH
9984: LD_INT 8
9986: EQUAL
9987: OR
9988: IFFALSE 9998
// arabianEscape = 1 ;
9990: LD_ADDR_EXP 47
9994: PUSH
9995: LD_INT 1
9997: ST_TO_ADDR
// RemoveUnit ( i ) ;
9998: LD_VAR 0 1
10002: PPUSH
10003: CALL_OW 64
// end ;
10007: GO 9867
10009: POP
10010: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
10011: LD_EXP 14
10015: PPUSH
10016: LD_INT 7
10018: PPUSH
10019: CALL_OW 308
10023: IFFALSE 10042
// begin KhatamStatus = 1 ;
10025: LD_ADDR_EXP 53
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
10033: LD_EXP 14
10037: PPUSH
10038: CALL_OW 64
// end ; end ;
10042: PPOPN 1
10044: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
10045: LD_INT 22
10047: PUSH
10048: LD_INT 2
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 21
10057: PUSH
10058: LD_INT 1
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PPUSH
10069: CALL_OW 69
10073: PUSH
10074: LD_INT 0
10076: EQUAL
10077: PUSH
10078: LD_INT 22
10080: PUSH
10081: LD_INT 4
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: PUSH
10088: LD_INT 21
10090: PUSH
10091: LD_INT 1
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PPUSH
10102: CALL_OW 69
10106: PUSH
10107: LD_INT 0
10109: EQUAL
10110: AND
10111: IFFALSE 10124
10113: GO 10115
10115: DISABLE
// arabianDefeated = 1 ;
10116: LD_ADDR_EXP 48
10120: PUSH
10121: LD_INT 1
10123: ST_TO_ADDR
10124: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
10125: LD_INT 54
10127: PPUSH
10128: LD_INT 1
10130: PPUSH
10131: CALL_OW 321
10135: PUSH
10136: LD_INT 2
10138: EQUAL
10139: PUSH
10140: LD_INT 55
10142: PPUSH
10143: LD_INT 1
10145: PPUSH
10146: CALL_OW 321
10150: PUSH
10151: LD_INT 2
10153: EQUAL
10154: AND
10155: PUSH
10156: LD_INT 21
10158: PPUSH
10159: LD_INT 1
10161: PPUSH
10162: CALL_OW 321
10166: PUSH
10167: LD_INT 2
10169: EQUAL
10170: AND
10171: PUSH
10172: LD_INT 22
10174: PPUSH
10175: LD_INT 1
10177: PPUSH
10178: CALL_OW 321
10182: PUSH
10183: LD_INT 2
10185: EQUAL
10186: AND
10187: PUSH
10188: LD_INT 12
10190: PPUSH
10191: LD_INT 1
10193: PPUSH
10194: CALL_OW 321
10198: PUSH
10199: LD_INT 2
10201: EQUAL
10202: AND
10203: PUSH
10204: LD_INT 32
10206: PPUSH
10207: LD_INT 1
10209: PPUSH
10210: CALL_OW 321
10214: PUSH
10215: LD_INT 2
10217: EQUAL
10218: AND
10219: PUSH
10220: LD_EXP 63
10224: PUSH
10225: LD_INT 0
10227: EQUAL
10228: AND
10229: PUSH
10230: LD_EXP 49
10234: PUSH
10235: LD_INT 0
10237: EQUAL
10238: AND
10239: PUSH
10240: LD_OWVAR 1
10244: PUSH
10245: LD_INT 31500
10247: GREATEREQUAL
10248: AND
10249: IFFALSE 10266
10251: GO 10253
10253: DISABLE
// begin arabianTrait = 1 ;
10254: LD_ADDR_EXP 49
10258: PUSH
10259: LD_INT 1
10261: ST_TO_ADDR
// PrepareArabianTrait ;
10262: CALL 8016 0 0
// end ;
10266: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
10267: LD_EXP 29
10271: PUSH
10272: LD_STRING 02_mikhailStatus_1
10274: PPUSH
10275: LD_INT 0
10277: PPUSH
10278: CALL_OW 30
10282: PUSH
10283: LD_INT 1
10285: EQUAL
10286: AND
10287: PUSH
10288: LD_INT 22
10290: PUSH
10291: LD_INT 5
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 69
10302: PUSH
10303: LD_INT 0
10305: EQUAL
10306: AND
10307: PUSH
10308: LD_INT 22
10310: PUSH
10311: LD_INT 2
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: LD_INT 21
10320: PUSH
10321: LD_INT 1
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PPUSH
10332: CALL_OW 69
10336: PUSH
10337: LD_INT 0
10339: EQUAL
10340: PUSH
10341: LD_EXP 49
10345: PUSH
10346: LD_INT 0
10348: EQUAL
10349: OR
10350: AND
10351: IFFALSE 10360
10353: GO 10355
10355: DISABLE
// PrepareCornell ;
10356: CALL 3450 0 0
10360: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
10361: LD_INT 22
10363: PUSH
10364: LD_INT 1
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PPUSH
10371: CALL_OW 69
10375: PPUSH
10376: LD_EXP 19
10380: PPUSH
10381: CALL_OW 74
10385: PPUSH
10386: LD_EXP 19
10390: PPUSH
10391: CALL_OW 296
10395: PUSH
10396: LD_INT 9
10398: LESS
10399: IFFALSE 10620
10401: GO 10403
10403: DISABLE
// begin InGameOn ;
10404: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
10408: LD_EXP 19
10412: PPUSH
10413: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
10417: LD_EXP 19
10421: PPUSH
10422: LD_STRING D7-Corn-1
10424: PPUSH
10425: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
10429: LD_INT 22
10431: PUSH
10432: LD_INT 1
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: PUSH
10439: LD_INT 2
10441: PUSH
10442: LD_INT 25
10444: PUSH
10445: LD_INT 1
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: PUSH
10452: LD_INT 25
10454: PUSH
10455: LD_INT 2
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PUSH
10462: LD_INT 25
10464: PUSH
10465: LD_INT 3
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 25
10474: PUSH
10475: LD_INT 4
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 25
10484: PUSH
10485: LD_INT 5
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PPUSH
10504: CALL_OW 69
10508: PPUSH
10509: LD_STRING D7-Sol1-1
10511: PPUSH
10512: LD_STRING D7-FSol1-1
10514: PPUSH
10515: CALL 11110 0 3
// CenterNowOnUnits ( Cornell ) ;
10519: LD_EXP 19
10523: PPUSH
10524: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
10528: LD_EXP 19
10532: PPUSH
10533: LD_STRING D7-Corn-2
10535: PPUSH
10536: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
10540: LD_EXP 1
10544: PPUSH
10545: LD_STRING D7-JMM-2
10547: PPUSH
10548: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
10552: LD_EXP 19
10556: PPUSH
10557: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
10561: LD_EXP 19
10565: PPUSH
10566: LD_STRING D7-Corn-3
10568: PPUSH
10569: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
10573: LD_EXP 19
10577: PPUSH
10578: LD_INT 250
10580: PPUSH
10581: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
10585: LD_EXP 19
10589: PPUSH
10590: LD_INT 1
10592: PPUSH
10593: CALL_OW 235
// wait ( 0 0$1 ) ;
10597: LD_INT 35
10599: PPUSH
10600: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
10604: LD_EXP 1
10608: PPUSH
10609: LD_STRING D7-JMM-3
10611: PPUSH
10612: CALL_OW 88
// InGameOff ;
10616: CALL_OW 9
// end ;
10620: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
10621: LD_EXP 19
10625: PPUSH
10626: CALL_OW 255
10630: PUSH
10631: LD_INT 1
10633: EQUAL
10634: PUSH
10635: LD_EXP 19
10639: PPUSH
10640: CALL_OW 256
10644: PUSH
10645: LD_INT 350
10647: GREATER
10648: AND
10649: IFFALSE 10842
10651: GO 10653
10653: DISABLE
// begin DialogueOn ;
10654: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
10658: LD_EXP 1
10662: PPUSH
10663: LD_STRING D7a-JMM-1
10665: PPUSH
10666: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
10670: LD_EXP 19
10674: PPUSH
10675: LD_STRING D7a-Corn-1
10677: PPUSH
10678: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
10682: LD_EXP 1
10686: PPUSH
10687: LD_STRING D7a-JMM-2
10689: PPUSH
10690: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
10694: LD_EXP 19
10698: PPUSH
10699: LD_STRING D7a-Corn-2
10701: PPUSH
10702: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
10706: LD_EXP 1
10710: PPUSH
10711: LD_STRING D7a-JMM-3
10713: PPUSH
10714: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
10718: LD_EXP 19
10722: PPUSH
10723: LD_STRING D7a-Corn-3
10725: PPUSH
10726: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
10730: LD_EXP 1
10734: PPUSH
10735: LD_STRING D7a-JMM-4
10737: PPUSH
10738: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
10742: LD_EXP 19
10746: PPUSH
10747: LD_STRING D7a-Corn-4
10749: PPUSH
10750: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
10754: LD_EXP 1
10758: PPUSH
10759: LD_STRING D7a-JMM-5
10761: PPUSH
10762: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
10766: LD_EXP 19
10770: PPUSH
10771: LD_STRING D7a-Corn-5
10773: PPUSH
10774: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
10778: LD_EXP 1
10782: PPUSH
10783: LD_STRING D7a-JMM-6
10785: PPUSH
10786: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
10790: LD_EXP 19
10794: PPUSH
10795: LD_STRING D7a-Corn-6
10797: PPUSH
10798: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
10802: LD_EXP 1
10806: PPUSH
10807: LD_STRING D7a-JMM-7
10809: PPUSH
10810: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
10814: LD_EXP 19
10818: PPUSH
10819: LD_STRING D7a-Corn-7
10821: PPUSH
10822: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
10826: LD_EXP 1
10830: PPUSH
10831: LD_STRING D7a-JMM-8
10833: PPUSH
10834: CALL_OW 88
// DialogueOff ;
10838: CALL_OW 7
// end ;
10842: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
10843: LD_EXP 61
10847: PUSH
10848: LD_EXP 1
10852: PPUSH
10853: CALL_OW 302
10857: PUSH
10858: LD_EXP 5
10862: PPUSH
10863: CALL_OW 302
10867: OR
10868: AND
10869: IFFALSE 10959
10871: GO 10873
10873: DISABLE
// begin Wait ( 0 0$2 ) ;
10874: LD_INT 70
10876: PPUSH
10877: CALL_OW 67
// DialogueOn ;
10881: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
10885: LD_EXP 61
10889: PUSH
10890: LD_INT 1
10892: ARRAY
10893: PPUSH
10894: LD_EXP 61
10898: PUSH
10899: LD_INT 2
10901: ARRAY
10902: PPUSH
10903: CALL_OW 86
// if IsOk ( Cyrus ) then
10907: LD_EXP 5
10911: PPUSH
10912: CALL_OW 302
10916: IFFALSE 10932
// Say ( Cyrus , D10-Cyrus-1 ) else
10918: LD_EXP 5
10922: PPUSH
10923: LD_STRING D10-Cyrus-1
10925: PPUSH
10926: CALL_OW 88
10930: GO 10955
// if IsOk ( JMM ) then
10932: LD_EXP 1
10936: PPUSH
10937: CALL_OW 302
10941: IFFALSE 10955
// Say ( JMM , D10-JMM-1 ) ;
10943: LD_EXP 1
10947: PPUSH
10948: LD_STRING D10-JMM-1
10950: PPUSH
10951: CALL_OW 88
// DialogueOff ;
10955: CALL_OW 7
// end ;
10959: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
10960: LD_INT 12
10962: PPUSH
10963: LD_INT 1
10965: PPUSH
10966: CALL_OW 321
10970: PUSH
10971: LD_INT 2
10973: EQUAL
10974: IFFALSE 10986
10976: GO 10978
10978: DISABLE
// ChangeMissionObjectives ( M2b ) ;
10979: LD_STRING M2b
10981: PPUSH
10982: CALL_OW 337
10986: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
10987: LD_INT 32
10989: PPUSH
10990: LD_INT 1
10992: PPUSH
10993: CALL_OW 321
10997: PUSH
10998: LD_INT 2
11000: EQUAL
11001: IFFALSE 11013
11003: GO 11005
11005: DISABLE
// ChangeMissionObjectives ( M2c ) ;
11006: LD_STRING M2c
11008: PPUSH
11009: CALL_OW 337
11013: END
// every 0 0$1 trigger arabianDefeated = 1 do
11014: LD_EXP 48
11018: PUSH
11019: LD_INT 1
11021: EQUAL
11022: IFFALSE 11034
11024: GO 11026
11026: DISABLE
// ChangeMissionObjectives ( M4a ) ;
11027: LD_STRING M4a
11029: PPUSH
11030: CALL_OW 337
11034: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
11035: LD_INT 54
11037: PPUSH
11038: LD_INT 1
11040: PPUSH
11041: CALL_OW 321
11045: PUSH
11046: LD_INT 2
11048: EQUAL
11049: PUSH
11050: LD_INT 55
11052: PPUSH
11053: LD_INT 1
11055: PPUSH
11056: CALL_OW 321
11060: PUSH
11061: LD_INT 2
11063: EQUAL
11064: AND
11065: PUSH
11066: LD_INT 21
11068: PPUSH
11069: LD_INT 1
11071: PPUSH
11072: CALL_OW 321
11076: PUSH
11077: LD_INT 2
11079: EQUAL
11080: AND
11081: PUSH
11082: LD_INT 22
11084: PPUSH
11085: LD_INT 1
11087: PPUSH
11088: CALL_OW 321
11092: PUSH
11093: LD_INT 2
11095: EQUAL
11096: AND
11097: IFFALSE 11109
11099: GO 11101
11101: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
11102: LD_STRING M2a
11104: PPUSH
11105: CALL_OW 337
11109: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
11110: LD_INT 0
11112: PPUSH
11113: PPUSH
11114: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
11115: LD_ADDR_VAR 0 1
11119: PUSH
11120: LD_VAR 0 1
11124: PUSH
11125: LD_EXP 1
11129: PUSH
11130: LD_EXP 2
11134: PUSH
11135: LD_EXP 3
11139: PUSH
11140: LD_EXP 4
11144: PUSH
11145: LD_EXP 5
11149: PUSH
11150: LD_EXP 6
11154: PUSH
11155: LD_EXP 7
11159: PUSH
11160: LD_EXP 8
11164: PUSH
11165: LD_EXP 9
11169: PUSH
11170: LD_EXP 10
11174: PUSH
11175: LD_EXP 11
11179: PUSH
11180: LD_EXP 12
11184: PUSH
11185: LD_EXP 13
11189: PUSH
11190: LD_EXP 14
11194: PUSH
11195: LD_EXP 15
11199: PUSH
11200: LD_EXP 16
11204: PUSH
11205: LD_EXP 17
11209: PUSH
11210: LD_EXP 18
11214: PUSH
11215: LD_EXP 19
11219: PUSH
11220: LD_EXP 24
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: DIFF
11247: ST_TO_ADDR
// if not characters then
11248: LD_VAR 0 1
11252: NOT
11253: IFFALSE 11257
// exit ;
11255: GO 11403
// rnd = rand ( 1 , characters ) ;
11257: LD_ADDR_VAR 0 6
11261: PUSH
11262: LD_INT 1
11264: PPUSH
11265: LD_VAR 0 1
11269: PPUSH
11270: CALL_OW 12
11274: ST_TO_ADDR
// for i = 1 to characters do
11275: LD_ADDR_VAR 0 5
11279: PUSH
11280: DOUBLE
11281: LD_INT 1
11283: DEC
11284: ST_TO_ADDR
11285: LD_VAR 0 1
11289: PUSH
11290: FOR_TO
11291: IFFALSE 11401
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
11293: LD_VAR 0 5
11297: PUSH
11298: LD_VAR 0 6
11302: EQUAL
11303: PUSH
11304: LD_VAR 0 1
11308: PUSH
11309: LD_VAR 0 5
11313: ARRAY
11314: PPUSH
11315: CALL_OW 258
11319: PUSH
11320: LD_INT 1
11322: EQUAL
11323: AND
11324: IFFALSE 11346
// Say ( characters [ i ] , dialogMID ) ;
11326: LD_VAR 0 1
11330: PUSH
11331: LD_VAR 0 5
11335: ARRAY
11336: PPUSH
11337: LD_VAR 0 2
11341: PPUSH
11342: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
11346: LD_VAR 0 5
11350: PUSH
11351: LD_VAR 0 6
11355: EQUAL
11356: PUSH
11357: LD_VAR 0 1
11361: PUSH
11362: LD_VAR 0 5
11366: ARRAY
11367: PPUSH
11368: CALL_OW 258
11372: PUSH
11373: LD_INT 2
11375: EQUAL
11376: AND
11377: IFFALSE 11399
// Say ( characters [ i ] , dialogFID ) ;
11379: LD_VAR 0 1
11383: PUSH
11384: LD_VAR 0 5
11388: ARRAY
11389: PPUSH
11390: LD_VAR 0 3
11394: PPUSH
11395: CALL_OW 88
// end ;
11399: GO 11290
11401: POP
11402: POP
// end ;
11403: LD_VAR 0 4
11407: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
11408: LD_INT 0
11410: PPUSH
11411: PPUSH
// for i in charactersList do
11412: LD_ADDR_VAR 0 4
11416: PUSH
11417: LD_VAR 0 1
11421: PUSH
11422: FOR_IN
11423: IFFALSE 11441
// SaveCharacters ( i , ident ) ;
11425: LD_VAR 0 4
11429: PPUSH
11430: LD_VAR 0 2
11434: PPUSH
11435: CALL_OW 38
11439: GO 11422
11441: POP
11442: POP
// end ;
11443: LD_VAR 0 3
11447: RET
// export function PrepareDifficulty ; begin
11448: LD_INT 0
11450: PPUSH
// if difficulty = 1 then
11451: LD_OWVAR 67
11455: PUSH
11456: LD_INT 1
11458: EQUAL
11459: IFFALSE 11503
// begin RuSolMinLevel = 3 ;
11461: LD_ADDR_EXP 36
11465: PUSH
11466: LD_INT 3
11468: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
11469: LD_ADDR_EXP 37
11473: PUSH
11474: LD_INT 5
11476: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11477: LD_INT 51
11479: PPUSH
11480: LD_INT 6
11482: PPUSH
11483: LD_INT 2
11485: PPUSH
11486: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11490: LD_INT 51
11492: PPUSH
11493: LD_INT 5
11495: PPUSH
11496: LD_INT 2
11498: PPUSH
11499: CALL_OW 322
// end ; if difficulty = 2 then
11503: LD_OWVAR 67
11507: PUSH
11508: LD_INT 2
11510: EQUAL
11511: IFFALSE 11607
// begin RuSolMinLevel = 5 ;
11513: LD_ADDR_EXP 36
11517: PUSH
11518: LD_INT 5
11520: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
11521: LD_ADDR_EXP 37
11525: PUSH
11526: LD_INT 7
11528: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11529: LD_INT 51
11531: PPUSH
11532: LD_INT 6
11534: PPUSH
11535: LD_INT 2
11537: PPUSH
11538: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11542: LD_INT 57
11544: PPUSH
11545: LD_INT 6
11547: PPUSH
11548: LD_INT 2
11550: PPUSH
11551: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11555: LD_INT 63
11557: PPUSH
11558: LD_INT 6
11560: PPUSH
11561: LD_INT 2
11563: PPUSH
11564: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11568: LD_INT 51
11570: PPUSH
11571: LD_INT 5
11573: PPUSH
11574: LD_INT 2
11576: PPUSH
11577: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
11581: LD_INT 5
11583: PPUSH
11584: LD_INT 2
11586: PPUSH
11587: LD_INT 2
11589: PPUSH
11590: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
11594: LD_INT 5
11596: PPUSH
11597: LD_INT 5
11599: PPUSH
11600: LD_INT 2
11602: PPUSH
11603: CALL_OW 322
// end ; if difficulty >= 3 then
11607: LD_OWVAR 67
11611: PUSH
11612: LD_INT 3
11614: GREATEREQUAL
11615: IFFALSE 11763
// begin RuSolMinLevel = 6 ;
11617: LD_ADDR_EXP 36
11621: PUSH
11622: LD_INT 6
11624: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
11625: LD_ADDR_EXP 37
11629: PUSH
11630: LD_INT 8
11632: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11633: LD_INT 51
11635: PPUSH
11636: LD_INT 6
11638: PPUSH
11639: LD_INT 2
11641: PPUSH
11642: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11646: LD_INT 57
11648: PPUSH
11649: LD_INT 6
11651: PPUSH
11652: LD_INT 2
11654: PPUSH
11655: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
11659: LD_INT 52
11661: PPUSH
11662: LD_INT 6
11664: PPUSH
11665: LD_INT 2
11667: PPUSH
11668: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
11672: LD_INT 58
11674: PPUSH
11675: LD_INT 6
11677: PPUSH
11678: LD_INT 2
11680: PPUSH
11681: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11685: LD_INT 63
11687: PPUSH
11688: LD_INT 6
11690: PPUSH
11691: LD_INT 2
11693: PPUSH
11694: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
11698: LD_INT 64
11700: PPUSH
11701: LD_INT 6
11703: PPUSH
11704: LD_INT 2
11706: PPUSH
11707: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11711: LD_INT 51
11713: PPUSH
11714: LD_INT 5
11716: PPUSH
11717: LD_INT 2
11719: PPUSH
11720: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
11724: LD_INT 52
11726: PPUSH
11727: LD_INT 5
11729: PPUSH
11730: LD_INT 2
11732: PPUSH
11733: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
11737: LD_INT 66
11739: PPUSH
11740: LD_INT 2
11742: PPUSH
11743: LD_INT 2
11745: PPUSH
11746: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
11750: LD_INT 66
11752: PPUSH
11753: LD_INT 5
11755: PPUSH
11756: LD_INT 2
11758: PPUSH
11759: CALL_OW 322
// end ; end ;
11763: LD_VAR 0 1
11767: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
11768: LD_INT 0
11770: PPUSH
11771: PPUSH
11772: PPUSH
11773: PPUSH
11774: PPUSH
11775: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
11776: LD_ADDR_VAR 0 7
11780: PUSH
11781: LD_INT 43
11783: PUSH
11784: LD_INT 68
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 43
11793: PUSH
11794: LD_INT 79
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: LD_INT 99
11803: PUSH
11804: LD_INT 114
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 103
11813: PUSH
11814: LD_INT 114
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 156
11823: PUSH
11824: LD_INT 92
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: LD_INT 152
11833: PUSH
11834: LD_INT 85
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: ST_TO_ADDR
// for i in sources do
11849: LD_ADDR_VAR 0 3
11853: PUSH
11854: LD_VAR 0 7
11858: PUSH
11859: FOR_IN
11860: IFFALSE 11889
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
11862: LD_VAR 0 3
11866: PUSH
11867: LD_INT 1
11869: ARRAY
11870: PPUSH
11871: LD_VAR 0 3
11875: PUSH
11876: LD_INT 2
11878: ARRAY
11879: PPUSH
11880: LD_INT 3
11882: PPUSH
11883: CALL_OW 441
11887: GO 11859
11889: POP
11890: POP
// case position of 1 :
11891: LD_VAR 0 1
11895: PUSH
11896: LD_INT 1
11898: DOUBLE
11899: EQUAL
11900: IFTRUE 11904
11902: GO 11915
11904: POP
// area := westConv ; 2 :
11905: LD_ADDR_VAR 0 6
11909: PUSH
11910: LD_INT 20
11912: ST_TO_ADDR
11913: GO 11954
11915: LD_INT 2
11917: DOUBLE
11918: EQUAL
11919: IFTRUE 11923
11921: GO 11934
11923: POP
// area := midConv ; 3 :
11924: LD_ADDR_VAR 0 6
11928: PUSH
11929: LD_INT 21
11931: ST_TO_ADDR
11932: GO 11954
11934: LD_INT 3
11936: DOUBLE
11937: EQUAL
11938: IFTRUE 11942
11940: GO 11953
11942: POP
// area := eastConv ; end ;
11943: LD_ADDR_VAR 0 6
11947: PUSH
11948: LD_INT 22
11950: ST_TO_ADDR
11951: GO 11954
11953: POP
// area := AreaToList ( area , 0 ) ;
11954: LD_ADDR_VAR 0 6
11958: PUSH
11959: LD_VAR 0 6
11963: PPUSH
11964: LD_INT 0
11966: PPUSH
11967: CALL_OW 517
11971: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
11972: LD_ADDR_VAR 0 3
11976: PUSH
11977: DOUBLE
11978: LD_INT 1
11980: DEC
11981: ST_TO_ADDR
11982: LD_VAR 0 6
11986: PUSH
11987: LD_INT 1
11989: ARRAY
11990: PUSH
11991: FOR_TO
11992: IFFALSE 12073
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
11994: LD_VAR 0 6
11998: PUSH
11999: LD_INT 1
12001: ARRAY
12002: PUSH
12003: LD_VAR 0 3
12007: ARRAY
12008: PPUSH
12009: LD_VAR 0 6
12013: PUSH
12014: LD_INT 2
12016: ARRAY
12017: PUSH
12018: LD_VAR 0 3
12022: ARRAY
12023: PPUSH
12024: LD_INT 1
12026: PPUSH
12027: LD_INT 1
12029: PPUSH
12030: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
12034: LD_VAR 0 6
12038: PUSH
12039: LD_INT 1
12041: ARRAY
12042: PUSH
12043: LD_VAR 0 3
12047: ARRAY
12048: PPUSH
12049: LD_VAR 0 6
12053: PUSH
12054: LD_INT 2
12056: ARRAY
12057: PUSH
12058: LD_VAR 0 3
12062: ARRAY
12063: PPUSH
12064: LD_INT 1
12066: PPUSH
12067: CALL_OW 331
// end ;
12071: GO 11991
12073: POP
12074: POP
// ruPossition = position ;
12075: LD_ADDR_EXP 41
12079: PUSH
12080: LD_VAR 0 1
12084: ST_TO_ADDR
// if position = 1 then
12085: LD_VAR 0 1
12089: PUSH
12090: LD_INT 1
12092: EQUAL
12093: IFFALSE 12841
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12095: LD_ADDR_VAR 0 4
12099: PUSH
12100: LD_INT 22
12102: PUSH
12103: LD_INT 3
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 25
12112: PUSH
12113: LD_INT 2
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PPUSH
12124: CALL_OW 69
12128: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
12129: LD_ADDR_VAR 0 5
12133: PUSH
12134: LD_INT 0
12136: PUSH
12137: LD_INT 49
12139: PUSH
12140: LD_INT 74
12142: PUSH
12143: LD_INT 3
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 4
12154: PUSH
12155: LD_INT 73
12157: PUSH
12158: LD_INT 88
12160: PUSH
12161: LD_INT 5
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: PUSH
12170: LD_INT 4
12172: PUSH
12173: LD_INT 56
12175: PUSH
12176: LD_INT 62
12178: PUSH
12179: LD_INT 3
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: PUSH
12188: LD_INT 29
12190: PUSH
12191: LD_INT 43
12193: PUSH
12194: LD_INT 68
12196: PUSH
12197: LD_INT 2
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: PUSH
12206: LD_INT 30
12208: PUSH
12209: LD_INT 43
12211: PUSH
12212: LD_INT 79
12214: PUSH
12215: LD_INT 5
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 28
12226: PUSH
12227: LD_INT 60
12229: PUSH
12230: LD_INT 75
12232: PUSH
12233: LD_INT 1
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: PUSH
12242: LD_INT 2
12244: PUSH
12245: LD_INT 50
12247: PUSH
12248: LD_INT 87
12250: PUSH
12251: LD_INT 1
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: PUSH
12260: LD_INT 28
12262: PUSH
12263: LD_INT 45
12265: PUSH
12266: LD_INT 67
12268: PUSH
12269: LD_INT 2
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: PUSH
12278: LD_INT 17
12280: PUSH
12281: LD_INT 47
12283: PUSH
12284: LD_INT 84
12286: PUSH
12287: LD_INT 2
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: PUSH
12296: LD_INT 18
12298: PUSH
12299: LD_INT 46
12301: PUSH
12302: LD_INT 87
12304: PUSH
12305: LD_INT 1
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: PUSH
12314: LD_INT 28
12316: PUSH
12317: LD_INT 41
12319: PUSH
12320: LD_INT 64
12322: PUSH
12323: LD_INT 5
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: PUSH
12332: LD_INT 32
12334: PUSH
12335: LD_INT 75
12337: PUSH
12338: LD_INT 76
12340: PUSH
12341: LD_INT 5
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: PUSH
12350: LD_INT 32
12352: PUSH
12353: LD_INT 77
12355: PUSH
12356: LD_INT 75
12358: PUSH
12359: LD_INT 5
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: PUSH
12368: LD_INT 32
12370: PUSH
12371: LD_INT 69
12373: PUSH
12374: LD_INT 68
12376: PUSH
12377: LD_INT 3
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: PUSH
12386: LD_INT 32
12388: PUSH
12389: LD_INT 59
12391: PUSH
12392: LD_INT 96
12394: PUSH
12395: LD_INT 5
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: PUSH
12404: LD_INT 32
12406: PUSH
12407: LD_INT 56
12409: PUSH
12410: LD_INT 96
12412: PUSH
12413: LD_INT 0
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: PUSH
12422: LD_INT 32
12424: PUSH
12425: LD_INT 51
12427: PUSH
12428: LD_INT 61
12430: PUSH
12431: LD_INT 3
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 32
12442: PUSH
12443: LD_INT 42
12445: PUSH
12446: LD_INT 60
12448: PUSH
12449: LD_INT 3
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: PUSH
12458: LD_INT 32
12460: PUSH
12461: LD_INT 36
12463: PUSH
12464: LD_INT 58
12466: PUSH
12467: LD_INT 3
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: PUSH
12476: LD_INT 32
12478: PUSH
12479: LD_INT 39
12481: PUSH
12482: LD_INT 59
12484: PUSH
12485: LD_INT 3
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 32
12496: PUSH
12497: LD_INT 61
12499: PUSH
12500: LD_INT 64
12502: PUSH
12503: LD_INT 3
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: PUSH
12512: LD_INT 33
12514: PUSH
12515: LD_INT 63
12517: PUSH
12518: LD_INT 90
12520: PUSH
12521: LD_INT 5
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 33
12532: PUSH
12533: LD_INT 64
12535: PUSH
12536: LD_INT 88
12538: PUSH
12539: LD_INT 5
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: PUSH
12548: LD_INT 33
12550: PUSH
12551: LD_INT 72
12553: PUSH
12554: LD_INT 82
12556: PUSH
12557: LD_INT 5
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: PUSH
12566: LD_INT 6
12568: PUSH
12569: LD_INT 42
12571: PUSH
12572: LD_INT 74
12574: PUSH
12575: LD_INT 1
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: PUSH
12584: LD_INT 6
12586: PUSH
12587: LD_INT 56
12589: PUSH
12590: LD_INT 77
12592: PUSH
12593: LD_INT 2
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: PUSH
12602: LD_INT 21
12604: PUSH
12605: LD_INT 54
12607: PUSH
12608: LD_INT 91
12610: PUSH
12611: LD_INT 5
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 16
12622: PUSH
12623: LD_INT 50
12625: PUSH
12626: LD_INT 83
12628: PUSH
12629: LD_INT 3
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: PUSH
12638: LD_INT 24
12640: PUSH
12641: LD_INT 50
12643: PUSH
12644: LD_INT 90
12646: PUSH
12647: LD_INT 0
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12687: LD_ADDR_VAR 0 3
12691: PUSH
12692: LD_INT 22
12694: PUSH
12695: LD_INT 3
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: LD_INT 3
12704: PUSH
12705: LD_INT 25
12707: PUSH
12708: LD_INT 2
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: PPUSH
12723: CALL_OW 69
12727: PUSH
12728: FOR_IN
12729: IFFALSE 12748
// AddComAgressiveMove ( i , 53 , 82 ) ;
12731: LD_VAR 0 3
12735: PPUSH
12736: LD_INT 53
12738: PPUSH
12739: LD_INT 82
12741: PPUSH
12742: CALL_OW 174
12746: GO 12728
12748: POP
12749: POP
// for i := 1 to buildingsTab do
12750: LD_ADDR_VAR 0 3
12754: PUSH
12755: DOUBLE
12756: LD_INT 1
12758: DEC
12759: ST_TO_ADDR
12760: LD_VAR 0 5
12764: PUSH
12765: FOR_TO
12766: IFFALSE 12839
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12768: LD_VAR 0 4
12772: PPUSH
12773: LD_VAR 0 5
12777: PUSH
12778: LD_VAR 0 3
12782: ARRAY
12783: PUSH
12784: LD_INT 1
12786: ARRAY
12787: PPUSH
12788: LD_VAR 0 5
12792: PUSH
12793: LD_VAR 0 3
12797: ARRAY
12798: PUSH
12799: LD_INT 2
12801: ARRAY
12802: PPUSH
12803: LD_VAR 0 5
12807: PUSH
12808: LD_VAR 0 3
12812: ARRAY
12813: PUSH
12814: LD_INT 3
12816: ARRAY
12817: PPUSH
12818: LD_VAR 0 5
12822: PUSH
12823: LD_VAR 0 3
12827: ARRAY
12828: PUSH
12829: LD_INT 4
12831: ARRAY
12832: PPUSH
12833: CALL_OW 205
12837: GO 12765
12839: POP
12840: POP
// end ; if position = 2 then
12841: LD_VAR 0 1
12845: PUSH
12846: LD_INT 2
12848: EQUAL
12849: IFFALSE 13464
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12851: LD_ADDR_VAR 0 4
12855: PUSH
12856: LD_INT 22
12858: PUSH
12859: LD_INT 3
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 25
12868: PUSH
12869: LD_INT 2
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PPUSH
12880: CALL_OW 69
12884: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
12885: LD_ADDR_VAR 0 5
12889: PUSH
12890: LD_INT 0
12892: PUSH
12893: LD_INT 104
12895: PUSH
12896: LD_INT 110
12898: PUSH
12899: LD_INT 5
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 4
12910: PUSH
12911: LD_INT 98
12913: PUSH
12914: LD_INT 90
12916: PUSH
12917: LD_INT 3
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 29
12928: PUSH
12929: LD_INT 103
12931: PUSH
12932: LD_INT 114
12934: PUSH
12935: LD_INT 2
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 30
12946: PUSH
12947: LD_INT 99
12949: PUSH
12950: LD_INT 114
12952: PUSH
12953: LD_INT 3
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 28
12964: PUSH
12965: LD_INT 100
12967: PUSH
12968: LD_INT 112
12970: PUSH
12971: LD_INT 1
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: PUSH
12980: LD_INT 2
12982: PUSH
12983: LD_INT 92
12985: PUSH
12986: LD_INT 101
12988: PUSH
12989: LD_INT 0
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 28
13000: PUSH
13001: LD_INT 97
13003: PUSH
13004: LD_INT 116
13006: PUSH
13007: LD_INT 5
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 17
13018: PUSH
13019: LD_INT 96
13021: PUSH
13022: LD_INT 101
13024: PUSH
13025: LD_INT 4
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: PUSH
13034: LD_INT 18
13036: PUSH
13037: LD_INT 88
13039: PUSH
13040: LD_INT 97
13042: PUSH
13043: LD_INT 2
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 28
13054: PUSH
13055: LD_INT 106
13057: PUSH
13058: LD_INT 92
13060: PUSH
13061: LD_INT 2
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 32
13072: PUSH
13073: LD_INT 88
13075: PUSH
13076: LD_INT 89
13078: PUSH
13079: LD_INT 2
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: PUSH
13088: LD_INT 32
13090: PUSH
13091: LD_INT 86
13093: PUSH
13094: LD_INT 90
13096: PUSH
13097: LD_INT 2
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: PUSH
13106: LD_INT 32
13108: PUSH
13109: LD_INT 85
13111: PUSH
13112: LD_INT 99
13114: PUSH
13115: LD_INT 2
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 32
13126: PUSH
13127: LD_INT 85
13129: PUSH
13130: LD_INT 107
13132: PUSH
13133: LD_INT 1
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: PUSH
13142: LD_INT 33
13144: PUSH
13145: LD_INT 105
13147: PUSH
13148: LD_INT 99
13150: PUSH
13151: LD_INT 1
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 33
13162: PUSH
13163: LD_INT 102
13165: PUSH
13166: LD_INT 92
13168: PUSH
13169: LD_INT 3
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 33
13180: PUSH
13181: LD_INT 105
13183: PUSH
13184: LD_INT 92
13186: PUSH
13187: LD_INT 2
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 6
13198: PUSH
13199: LD_INT 92
13201: PUSH
13202: LD_INT 110
13204: PUSH
13205: LD_INT 0
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 6
13216: PUSH
13217: LD_INT 103
13219: PUSH
13220: LD_INT 103
13222: PUSH
13223: LD_INT 5
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: PUSH
13232: LD_INT 21
13234: PUSH
13235: LD_INT 89
13237: PUSH
13238: LD_INT 101
13240: PUSH
13241: LD_INT 1
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 16
13252: PUSH
13253: LD_INT 95
13255: PUSH
13256: LD_INT 104
13258: PUSH
13259: LD_INT 4
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 24
13270: PUSH
13271: LD_INT 92
13273: PUSH
13274: LD_INT 105
13276: PUSH
13277: LD_INT 0
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13310: LD_ADDR_VAR 0 3
13314: PUSH
13315: LD_INT 22
13317: PUSH
13318: LD_INT 3
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: PUSH
13325: LD_INT 3
13327: PUSH
13328: LD_INT 25
13330: PUSH
13331: LD_INT 2
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PPUSH
13346: CALL_OW 69
13350: PUSH
13351: FOR_IN
13352: IFFALSE 13371
// AddComAgressiveMove ( i , 96 , 99 ) ;
13354: LD_VAR 0 3
13358: PPUSH
13359: LD_INT 96
13361: PPUSH
13362: LD_INT 99
13364: PPUSH
13365: CALL_OW 174
13369: GO 13351
13371: POP
13372: POP
// for i := 1 to buildingsTab do
13373: LD_ADDR_VAR 0 3
13377: PUSH
13378: DOUBLE
13379: LD_INT 1
13381: DEC
13382: ST_TO_ADDR
13383: LD_VAR 0 5
13387: PUSH
13388: FOR_TO
13389: IFFALSE 13462
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13391: LD_VAR 0 4
13395: PPUSH
13396: LD_VAR 0 5
13400: PUSH
13401: LD_VAR 0 3
13405: ARRAY
13406: PUSH
13407: LD_INT 1
13409: ARRAY
13410: PPUSH
13411: LD_VAR 0 5
13415: PUSH
13416: LD_VAR 0 3
13420: ARRAY
13421: PUSH
13422: LD_INT 2
13424: ARRAY
13425: PPUSH
13426: LD_VAR 0 5
13430: PUSH
13431: LD_VAR 0 3
13435: ARRAY
13436: PUSH
13437: LD_INT 3
13439: ARRAY
13440: PPUSH
13441: LD_VAR 0 5
13445: PUSH
13446: LD_VAR 0 3
13450: ARRAY
13451: PUSH
13452: LD_INT 4
13454: ARRAY
13455: PPUSH
13456: CALL_OW 205
13460: GO 13388
13462: POP
13463: POP
// end ; if position = 3 then
13464: LD_VAR 0 1
13468: PUSH
13469: LD_INT 3
13471: EQUAL
13472: IFFALSE 14258
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13474: LD_ADDR_VAR 0 4
13478: PUSH
13479: LD_INT 22
13481: PUSH
13482: LD_INT 3
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: PUSH
13489: LD_INT 25
13491: PUSH
13492: LD_INT 2
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PPUSH
13503: CALL_OW 69
13507: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
13508: LD_ADDR_VAR 0 5
13512: PUSH
13513: LD_INT 0
13515: PUSH
13516: LD_INT 151
13518: PUSH
13519: LD_INT 71
13521: PUSH
13522: LD_INT 4
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 4
13533: PUSH
13534: LD_INT 145
13536: PUSH
13537: LD_INT 53
13539: PUSH
13540: LD_INT 3
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: PUSH
13549: LD_INT 4
13551: PUSH
13552: LD_INT 172
13554: PUSH
13555: LD_INT 102
13557: PUSH
13558: LD_INT 5
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 29
13569: PUSH
13570: LD_INT 152
13572: PUSH
13573: LD_INT 85
13575: PUSH
13576: LD_INT 3
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: PUSH
13585: LD_INT 30
13587: PUSH
13588: LD_INT 156
13590: PUSH
13591: LD_INT 92
13593: PUSH
13594: LD_INT 3
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: PUSH
13603: LD_INT 28
13605: PUSH
13606: LD_INT 151
13608: PUSH
13609: LD_INT 66
13611: PUSH
13612: LD_INT 4
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: PUSH
13621: LD_INT 2
13623: PUSH
13624: LD_INT 163
13626: PUSH
13627: LD_INT 95
13629: PUSH
13630: LD_INT 5
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: PUSH
13639: LD_INT 28
13641: PUSH
13642: LD_INT 149
13644: PUSH
13645: LD_INT 63
13647: PUSH
13648: LD_INT 4
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: PUSH
13657: LD_INT 17
13659: PUSH
13660: LD_INT 167
13662: PUSH
13663: LD_INT 99
13665: PUSH
13666: LD_INT 5
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 18
13677: PUSH
13678: LD_INT 163
13680: PUSH
13681: LD_INT 98
13683: PUSH
13684: LD_INT 0
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: PUSH
13693: LD_INT 28
13695: PUSH
13696: LD_INT 154
13698: PUSH
13699: LD_INT 70
13701: PUSH
13702: LD_INT 4
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: PUSH
13711: LD_INT 32
13713: PUSH
13714: LD_INT 155
13716: PUSH
13717: LD_INT 62
13719: PUSH
13720: LD_INT 4
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: PUSH
13729: LD_INT 32
13731: PUSH
13732: LD_INT 161
13734: PUSH
13735: LD_INT 69
13737: PUSH
13738: LD_INT 4
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: PUSH
13747: LD_INT 32
13749: PUSH
13750: LD_INT 168
13752: PUSH
13753: LD_INT 78
13755: PUSH
13756: LD_INT 4
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 32
13767: PUSH
13768: LD_INT 163
13770: PUSH
13771: LD_INT 80
13773: PUSH
13774: LD_INT 5
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: PUSH
13783: LD_INT 32
13785: PUSH
13786: LD_INT 136
13788: PUSH
13789: LD_INT 73
13791: PUSH
13792: LD_INT 0
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: PUSH
13801: LD_INT 32
13803: PUSH
13804: LD_INT 157
13806: PUSH
13807: LD_INT 98
13809: PUSH
13810: LD_INT 0
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: PUSH
13819: LD_INT 32
13821: PUSH
13822: LD_INT 150
13824: PUSH
13825: LD_INT 87
13827: PUSH
13828: LD_INT 1
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: PUSH
13837: LD_INT 33
13839: PUSH
13840: LD_INT 171
13842: PUSH
13843: LD_INT 97
13845: PUSH
13846: LD_INT 4
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: PUSH
13855: LD_INT 33
13857: PUSH
13858: LD_INT 168
13860: PUSH
13861: LD_INT 92
13863: PUSH
13864: LD_INT 4
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: PUSH
13873: LD_INT 33
13875: PUSH
13876: LD_INT 166
13878: PUSH
13879: LD_INT 80
13881: PUSH
13882: LD_INT 5
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 33
13893: PUSH
13894: LD_INT 141
13896: PUSH
13897: LD_INT 54
13899: PUSH
13900: LD_INT 2
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: PUSH
13909: LD_INT 33
13911: PUSH
13912: LD_INT 133
13914: PUSH
13915: LD_INT 57
13917: PUSH
13918: LD_INT 2
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: PUSH
13927: LD_INT 33
13929: PUSH
13930: LD_INT 132
13932: PUSH
13933: LD_INT 61
13935: PUSH
13936: LD_INT 2
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: PUSH
13945: LD_INT 33
13947: PUSH
13948: LD_INT 150
13950: PUSH
13951: LD_INT 82
13953: PUSH
13954: LD_INT 0
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: PUSH
13963: LD_INT 33
13965: PUSH
13966: LD_INT 132
13968: PUSH
13969: LD_INT 72
13971: PUSH
13972: LD_INT 0
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: PUSH
13981: LD_INT 6
13983: PUSH
13984: LD_INT 146
13986: PUSH
13987: LD_INT 64
13989: PUSH
13990: LD_INT 4
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 6
14001: PUSH
14002: LD_INT 159
14004: PUSH
14005: LD_INT 85
14007: PUSH
14008: LD_INT 4
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: PUSH
14017: LD_INT 21
14019: PUSH
14020: LD_INT 163
14022: PUSH
14023: LD_INT 91
14025: PUSH
14026: LD_INT 3
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: PUSH
14035: LD_INT 16
14037: PUSH
14038: LD_INT 166
14040: PUSH
14041: LD_INT 95
14043: PUSH
14044: LD_INT 4
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: PUSH
14053: LD_INT 24
14055: PUSH
14056: LD_INT 159
14058: PUSH
14059: LD_INT 95
14061: PUSH
14062: LD_INT 1
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
14104: LD_ADDR_VAR 0 3
14108: PUSH
14109: LD_INT 22
14111: PUSH
14112: LD_INT 3
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PUSH
14119: LD_INT 3
14121: PUSH
14122: LD_INT 25
14124: PUSH
14125: LD_INT 2
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PPUSH
14140: CALL_OW 69
14144: PUSH
14145: FOR_IN
14146: IFFALSE 14165
// AddComAgressiveMove ( i , 141 , 65 ) ;
14148: LD_VAR 0 3
14152: PPUSH
14153: LD_INT 141
14155: PPUSH
14156: LD_INT 65
14158: PPUSH
14159: CALL_OW 174
14163: GO 14145
14165: POP
14166: POP
// for i := 1 to buildingsTab do
14167: LD_ADDR_VAR 0 3
14171: PUSH
14172: DOUBLE
14173: LD_INT 1
14175: DEC
14176: ST_TO_ADDR
14177: LD_VAR 0 5
14181: PUSH
14182: FOR_TO
14183: IFFALSE 14256
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
14185: LD_VAR 0 4
14189: PPUSH
14190: LD_VAR 0 5
14194: PUSH
14195: LD_VAR 0 3
14199: ARRAY
14200: PUSH
14201: LD_INT 1
14203: ARRAY
14204: PPUSH
14205: LD_VAR 0 5
14209: PUSH
14210: LD_VAR 0 3
14214: ARRAY
14215: PUSH
14216: LD_INT 2
14218: ARRAY
14219: PPUSH
14220: LD_VAR 0 5
14224: PUSH
14225: LD_VAR 0 3
14229: ARRAY
14230: PUSH
14231: LD_INT 3
14233: ARRAY
14234: PPUSH
14235: LD_VAR 0 5
14239: PUSH
14240: LD_VAR 0 3
14244: ARRAY
14245: PUSH
14246: LD_INT 4
14248: ARRAY
14249: PPUSH
14250: CALL_OW 205
14254: GO 14182
14256: POP
14257: POP
// end ; end ;
14258: LD_VAR 0 2
14262: RET
// export arBuildingsTab ; export function BuildArabianBase ; var i , engineers ; begin
14263: LD_INT 0
14265: PPUSH
14266: PPUSH
14267: PPUSH
// arBuildingsTab = [ [ b_depot , 71 , 15 , 3 ] , [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 72 , 24 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
14268: LD_ADDR_EXP 68
14272: PUSH
14273: LD_INT 0
14275: PUSH
14276: LD_INT 71
14278: PUSH
14279: LD_INT 15
14281: PUSH
14282: LD_INT 3
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: PUSH
14291: LD_INT 6
14293: PUSH
14294: LD_INT 77
14296: PUSH
14297: LD_INT 18
14299: PUSH
14300: LD_INT 3
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 4
14311: PUSH
14312: LD_INT 77
14314: PUSH
14315: LD_INT 26
14317: PUSH
14318: LD_INT 0
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: PUSH
14327: LD_INT 31
14329: PUSH
14330: LD_INT 72
14332: PUSH
14333: LD_INT 24
14335: PUSH
14336: LD_INT 0
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: PUSH
14345: LD_INT 31
14347: PUSH
14348: LD_INT 82
14350: PUSH
14351: LD_INT 28
14353: PUSH
14354: LD_INT 0
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: PUSH
14363: LD_INT 31
14365: PUSH
14366: LD_INT 84
14368: PUSH
14369: LD_INT 21
14371: PUSH
14372: LD_INT 3
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: PUSH
14381: LD_INT 31
14383: PUSH
14384: LD_INT 66
14386: PUSH
14387: LD_INT 14
14389: PUSH
14390: LD_INT 2
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 27
14401: PUSH
14402: LD_INT 67
14404: PUSH
14405: LD_INT 18
14407: PUSH
14408: LD_INT 5
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: PUSH
14417: LD_INT 27
14419: PUSH
14420: LD_INT 69
14422: PUSH
14423: LD_INT 23
14425: PUSH
14426: LD_INT 2
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: ST_TO_ADDR
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
14446: LD_ADDR_VAR 0 3
14450: PUSH
14451: LD_INT 22
14453: PUSH
14454: LD_INT 2
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 25
14463: PUSH
14464: LD_INT 2
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PPUSH
14475: CALL_OW 69
14479: ST_TO_ADDR
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
14480: LD_VAR 0 3
14484: PPUSH
14485: LD_EXP 68
14489: PUSH
14490: LD_INT 1
14492: ARRAY
14493: PUSH
14494: LD_INT 1
14496: ARRAY
14497: PPUSH
14498: LD_EXP 68
14502: PUSH
14503: LD_INT 1
14505: ARRAY
14506: PUSH
14507: LD_INT 2
14509: ARRAY
14510: PPUSH
14511: LD_EXP 68
14515: PUSH
14516: LD_INT 1
14518: ARRAY
14519: PUSH
14520: LD_INT 3
14522: ARRAY
14523: PPUSH
14524: LD_EXP 68
14528: PUSH
14529: LD_INT 1
14531: ARRAY
14532: PUSH
14533: LD_INT 4
14535: ARRAY
14536: PPUSH
14537: CALL_OW 205
// end ;
14541: LD_VAR 0 1
14545: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
14546: LD_INT 0
14548: PPUSH
14549: PPUSH
14550: PPUSH
14551: PPUSH
14552: PPUSH
14553: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14554: LD_ADDR_VAR 0 7
14558: PUSH
14559: LD_INT 22
14561: PUSH
14562: LD_VAR 0 1
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PUSH
14571: LD_INT 25
14573: PUSH
14574: LD_INT 9
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PPUSH
14585: CALL_OW 69
14589: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14590: LD_ADDR_VAR 0 8
14594: PUSH
14595: LD_INT 22
14597: PUSH
14598: LD_VAR 0 2
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: PUSH
14607: LD_INT 3
14609: PUSH
14610: LD_INT 21
14612: PUSH
14613: LD_INT 3
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PPUSH
14628: CALL_OW 69
14632: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14633: LD_ADDR_VAR 0 5
14637: PUSH
14638: LD_INT 1
14640: PPUSH
14641: LD_INT 3
14643: PPUSH
14644: CALL_OW 12
14648: ST_TO_ADDR
// for i = 1 to list do
14649: LD_ADDR_VAR 0 6
14653: PUSH
14654: DOUBLE
14655: LD_INT 1
14657: DEC
14658: ST_TO_ADDR
14659: LD_VAR 0 7
14663: PUSH
14664: FOR_TO
14665: IFFALSE 15655
// for ta in filter do
14667: LD_ADDR_VAR 0 4
14671: PUSH
14672: LD_VAR 0 8
14676: PUSH
14677: FOR_IN
14678: IFFALSE 15651
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14680: LD_VAR 0 7
14684: PUSH
14685: LD_VAR 0 6
14689: ARRAY
14690: PPUSH
14691: LD_VAR 0 4
14695: PPUSH
14696: CALL_OW 296
14700: PUSH
14701: LD_INT 15
14703: LESSEQUAL
14704: IFFALSE 15649
// begin case c of 1 :
14706: LD_VAR 0 5
14710: PUSH
14711: LD_INT 1
14713: DOUBLE
14714: EQUAL
14715: IFTRUE 14719
14717: GO 15151
14719: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
14720: LD_VAR 0 7
14724: PUSH
14725: LD_VAR 0 6
14729: ARRAY
14730: PPUSH
14731: LD_VAR 0 4
14735: PPUSH
14736: CALL_OW 250
14740: PPUSH
14741: LD_VAR 0 4
14745: PPUSH
14746: CALL_OW 251
14750: PPUSH
14751: CALL_OW 154
// if eventVar2 = 0 then
14755: LD_EXP 66
14759: PUSH
14760: LD_INT 0
14762: EQUAL
14763: IFFALSE 15149
// begin eventVar2 = 1 ;
14765: LD_ADDR_EXP 66
14769: PUSH
14770: LD_INT 1
14772: ST_TO_ADDR
// wait ( 0 0$7 ) ;
14773: LD_INT 245
14775: PPUSH
14776: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
14780: LD_VAR 0 4
14784: PPUSH
14785: CALL_OW 250
14789: PPUSH
14790: LD_VAR 0 4
14794: PPUSH
14795: CALL_OW 251
14799: PPUSH
14800: CALL_OW 84
// DialogueOn ;
14804: CALL_OW 6
// if IsOK ( Cyrus ) then
14808: LD_EXP 5
14812: PPUSH
14813: CALL_OW 302
14817: IFFALSE 14833
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
14819: LD_EXP 5
14823: PPUSH
14824: LD_STRING D9a-Cyrus-1
14826: PPUSH
14827: CALL_OW 88
// end else
14831: GO 14955
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
14833: LD_INT 22
14835: PUSH
14836: LD_INT 1
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PUSH
14843: LD_INT 26
14845: PUSH
14846: LD_INT 1
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PUSH
14853: LD_INT 2
14855: PUSH
14856: LD_INT 25
14858: PUSH
14859: LD_INT 1
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: LD_INT 25
14868: PUSH
14869: LD_INT 2
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: LD_INT 25
14878: PUSH
14879: LD_INT 3
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PUSH
14886: LD_INT 25
14888: PUSH
14889: LD_INT 4
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: PUSH
14896: LD_INT 25
14898: PUSH
14899: LD_INT 5
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: LIST
14918: PPUSH
14919: CALL_OW 69
14923: PUSH
14924: LD_EXP 1
14928: PUSH
14929: LD_EXP 14
14933: PUSH
14934: LD_EXP 5
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: LIST
14943: DIFF
14944: PPUSH
14945: LD_STRING D9a-Sol1-1
14947: PPUSH
14948: LD_STRING D9a-Sol1-1
14950: PPUSH
14951: CALL 11110 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
14955: LD_INT 22
14957: PUSH
14958: LD_INT 1
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PUSH
14965: LD_INT 26
14967: PUSH
14968: LD_INT 1
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: PUSH
14975: LD_INT 2
14977: PUSH
14978: LD_INT 25
14980: PUSH
14981: LD_INT 1
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 25
14990: PUSH
14991: LD_INT 2
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: LD_INT 25
15000: PUSH
15001: LD_INT 3
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PUSH
15008: LD_INT 25
15010: PUSH
15011: LD_INT 4
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: PUSH
15018: LD_INT 25
15020: PUSH
15021: LD_INT 5
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: LIST
15040: PPUSH
15041: CALL_OW 69
15045: PUSH
15046: LD_EXP 1
15050: PUSH
15051: LD_EXP 14
15055: PUSH
15056: LD_EXP 5
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: LIST
15065: DIFF
15066: PPUSH
15067: LD_STRING D9b-Sol1-1
15069: PPUSH
15070: LD_STRING D9b-Sol1-1
15072: PPUSH
15073: CALL 11110 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15077: LD_STRING 09_arInfo
15079: PPUSH
15080: LD_INT 0
15082: PPUSH
15083: CALL_OW 30
15087: PUSH
15088: LD_INT 1
15090: EQUAL
15091: IFFALSE 15105
// Say ( JMM , D9a-JMM-1 ) ;
15093: LD_EXP 1
15097: PPUSH
15098: LD_STRING D9a-JMM-1
15100: PPUSH
15101: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15105: LD_EXP 1
15109: PPUSH
15110: LD_STRING D9c-JMM-1
15112: PPUSH
15113: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15117: LD_INT 12
15119: PPUSH
15120: LD_INT 1
15122: PPUSH
15123: CALL_OW 321
15127: PUSH
15128: LD_INT 2
15130: EQUAL
15131: IFFALSE 15145
// Say ( JMM , D9c-JMM-1a ) ;
15133: LD_EXP 1
15137: PPUSH
15138: LD_STRING D9c-JMM-1a
15140: PPUSH
15141: CALL_OW 88
// DialogueOff ;
15145: CALL_OW 7
// end ; end ; 2 :
15149: GO 15649
15151: LD_INT 2
15153: DOUBLE
15154: EQUAL
15155: IFTRUE 15159
15157: GO 15617
15159: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
15160: LD_VAR 0 7
15164: PUSH
15165: LD_VAR 0 6
15169: ARRAY
15170: PPUSH
15171: LD_VAR 0 4
15175: PPUSH
15176: CALL_OW 250
15180: PUSH
15181: LD_INT 1
15183: NEG
15184: PPUSH
15185: LD_INT 1
15187: PPUSH
15188: CALL_OW 12
15192: PLUS
15193: PPUSH
15194: LD_VAR 0 4
15198: PPUSH
15199: CALL_OW 251
15203: PUSH
15204: LD_INT 1
15206: NEG
15207: PPUSH
15208: LD_INT 1
15210: PPUSH
15211: CALL_OW 12
15215: PLUS
15216: PPUSH
15217: CALL_OW 153
// if eventVar2 = 0 then
15221: LD_EXP 66
15225: PUSH
15226: LD_INT 0
15228: EQUAL
15229: IFFALSE 15615
// begin eventVar2 = 1 ;
15231: LD_ADDR_EXP 66
15235: PUSH
15236: LD_INT 1
15238: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15239: LD_INT 245
15241: PPUSH
15242: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15246: LD_VAR 0 4
15250: PPUSH
15251: CALL_OW 250
15255: PPUSH
15256: LD_VAR 0 4
15260: PPUSH
15261: CALL_OW 251
15265: PPUSH
15266: CALL_OW 84
// DialogueOn ;
15270: CALL_OW 6
// if IsOK ( Cyrus ) then
15274: LD_EXP 5
15278: PPUSH
15279: CALL_OW 302
15283: IFFALSE 15299
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15285: LD_EXP 5
15289: PPUSH
15290: LD_STRING D9a-Cyrus-1
15292: PPUSH
15293: CALL_OW 88
// end else
15297: GO 15421
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15299: LD_INT 22
15301: PUSH
15302: LD_INT 1
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PUSH
15309: LD_INT 26
15311: PUSH
15312: LD_INT 1
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PUSH
15319: LD_INT 2
15321: PUSH
15322: LD_INT 25
15324: PUSH
15325: LD_INT 1
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: LD_INT 25
15334: PUSH
15335: LD_INT 2
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: LD_INT 25
15344: PUSH
15345: LD_INT 3
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PUSH
15352: LD_INT 25
15354: PUSH
15355: LD_INT 4
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PUSH
15362: LD_INT 25
15364: PUSH
15365: LD_INT 5
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: LIST
15384: PPUSH
15385: CALL_OW 69
15389: PUSH
15390: LD_EXP 1
15394: PUSH
15395: LD_EXP 14
15399: PUSH
15400: LD_EXP 5
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: LIST
15409: DIFF
15410: PPUSH
15411: LD_STRING D9a-Sol1-1
15413: PPUSH
15414: LD_STRING D9a-Sol1-1
15416: PPUSH
15417: CALL 11110 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15421: LD_INT 22
15423: PUSH
15424: LD_INT 1
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PUSH
15431: LD_INT 26
15433: PUSH
15434: LD_INT 1
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PUSH
15441: LD_INT 2
15443: PUSH
15444: LD_INT 25
15446: PUSH
15447: LD_INT 1
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: LD_INT 25
15456: PUSH
15457: LD_INT 2
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: LD_INT 25
15466: PUSH
15467: LD_INT 3
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PUSH
15474: LD_INT 25
15476: PUSH
15477: LD_INT 4
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PUSH
15484: LD_INT 25
15486: PUSH
15487: LD_INT 5
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: LIST
15506: PPUSH
15507: CALL_OW 69
15511: PUSH
15512: LD_EXP 1
15516: PUSH
15517: LD_EXP 14
15521: PUSH
15522: LD_EXP 5
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: DIFF
15532: PPUSH
15533: LD_STRING D9b-Sol1-1
15535: PPUSH
15536: LD_STRING D9b-Sol1-1
15538: PPUSH
15539: CALL 11110 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15543: LD_STRING 09_arInfo
15545: PPUSH
15546: LD_INT 0
15548: PPUSH
15549: CALL_OW 30
15553: PUSH
15554: LD_INT 1
15556: EQUAL
15557: IFFALSE 15571
// Say ( JMM , D9a-JMM-1 ) ;
15559: LD_EXP 1
15563: PPUSH
15564: LD_STRING D9a-JMM-1
15566: PPUSH
15567: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15571: LD_EXP 1
15575: PPUSH
15576: LD_STRING D9c-JMM-1
15578: PPUSH
15579: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15583: LD_INT 12
15585: PPUSH
15586: LD_INT 1
15588: PPUSH
15589: CALL_OW 321
15593: PUSH
15594: LD_INT 2
15596: EQUAL
15597: IFFALSE 15611
// Say ( JMM , D9c-JMM-1a ) ;
15599: LD_EXP 1
15603: PPUSH
15604: LD_STRING D9c-JMM-1a
15606: PPUSH
15607: CALL_OW 88
// DialogueOff ;
15611: CALL_OW 7
// end ; end ; 3 :
15615: GO 15649
15617: LD_INT 3
15619: DOUBLE
15620: EQUAL
15621: IFTRUE 15625
15623: GO 15648
15625: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15626: LD_VAR 0 7
15630: PUSH
15631: LD_VAR 0 6
15635: ARRAY
15636: PPUSH
15637: LD_VAR 0 4
15641: PPUSH
15642: CALL_OW 115
15646: GO 15649
15648: POP
// end ; end ;
15649: GO 14677
15651: POP
15652: POP
15653: GO 14664
15655: POP
15656: POP
// end ;
15657: LD_VAR 0 3
15661: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
15662: LD_INT 0
15664: PPUSH
15665: PPUSH
15666: PPUSH
15667: PPUSH
// for i = 1 to 72 do
15668: LD_ADDR_VAR 0 5
15672: PUSH
15673: DOUBLE
15674: LD_INT 1
15676: DEC
15677: ST_TO_ADDR
15678: LD_INT 72
15680: PUSH
15681: FOR_TO
15682: IFFALSE 15740
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
15684: LD_VAR 0 5
15688: PPUSH
15689: LD_VAR 0 1
15693: PPUSH
15694: CALL_OW 321
15698: PUSH
15699: LD_INT 1
15701: EQUAL
15702: PUSH
15703: LD_VAR 0 5
15707: PPUSH
15708: LD_VAR 0 3
15712: PPUSH
15713: CALL_OW 482
15717: PUSH
15718: LD_INT 1
15720: EQUAL
15721: AND
15722: IFFALSE 15738
// AddComResearch ( lab , i ) ;
15724: LD_VAR 0 2
15728: PPUSH
15729: LD_VAR 0 5
15733: PPUSH
15734: CALL_OW 184
15738: GO 15681
15740: POP
15741: POP
// end ;
15742: LD_VAR 0 4
15746: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
15747: LD_INT 0
15749: PPUSH
15750: PPUSH
15751: PPUSH
15752: PPUSH
15753: PPUSH
15754: PPUSH
15755: PPUSH
15756: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
15757: LD_ADDR_VAR 0 6
15761: PUSH
15762: LD_INT 22
15764: PUSH
15765: LD_VAR 0 1
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: PUSH
15774: LD_INT 56
15776: PUSH
15777: EMPTY
15778: LIST
15779: PUSH
15780: LD_INT 24
15782: PUSH
15783: LD_INT 700
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: LD_INT 3
15792: PUSH
15793: LD_INT 60
15795: PUSH
15796: EMPTY
15797: LIST
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: LD_INT 2
15805: PUSH
15806: LD_INT 25
15808: PUSH
15809: LD_INT 1
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 25
15818: PUSH
15819: LD_INT 9
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: LIST
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: PPUSH
15838: CALL_OW 69
15842: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
15843: LD_ADDR_VAR 0 7
15847: PUSH
15848: LD_INT 22
15850: PUSH
15851: LD_VAR 0 1
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: LD_INT 30
15862: PUSH
15863: LD_INT 32
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: LD_INT 58
15872: PUSH
15873: EMPTY
15874: LIST
15875: PUSH
15876: LD_INT 24
15878: PUSH
15879: LD_INT 251
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: PPUSH
15892: CALL_OW 69
15896: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
15897: LD_ADDR_VAR 0 9
15901: PUSH
15902: LD_INT 22
15904: PUSH
15905: LD_VAR 0 1
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 2
15916: PUSH
15917: LD_INT 30
15919: PUSH
15920: LD_INT 4
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PUSH
15927: LD_INT 30
15929: PUSH
15930: LD_INT 5
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: LIST
15941: PUSH
15942: LD_INT 24
15944: PUSH
15945: LD_INT 251
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: LIST
15956: PPUSH
15957: CALL_OW 69
15961: ST_TO_ADDR
// if barrackList > 0 then
15962: LD_VAR 0 9
15966: PUSH
15967: LD_INT 0
15969: GREATER
15970: IFFALSE 16105
// begin if turretList = 0 then
15972: LD_VAR 0 7
15976: PUSH
15977: LD_INT 0
15979: EQUAL
15980: IFFALSE 16029
// begin for i in soldiers_list do
15982: LD_ADDR_VAR 0 4
15986: PUSH
15987: LD_VAR 0 6
15991: PUSH
15992: FOR_IN
15993: IFFALSE 16025
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
15995: LD_VAR 0 4
15999: PPUSH
16000: LD_VAR 0 9
16004: PUSH
16005: LD_INT 1
16007: PPUSH
16008: LD_VAR 0 9
16012: PPUSH
16013: CALL_OW 12
16017: ARRAY
16018: PPUSH
16019: CALL_OW 120
16023: GO 15992
16025: POP
16026: POP
// end else
16027: GO 16105
// begin for i in barrackList do
16029: LD_ADDR_VAR 0 4
16033: PUSH
16034: LD_VAR 0 9
16038: PUSH
16039: FOR_IN
16040: IFFALSE 16103
// begin insideUnits = UnitsInside ( i ) ;
16042: LD_ADDR_VAR 0 10
16046: PUSH
16047: LD_VAR 0 4
16051: PPUSH
16052: CALL_OW 313
16056: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
16057: LD_VAR 0 10
16061: PUSH
16062: LD_INT 1
16064: ARRAY
16065: PPUSH
16066: LD_VAR 0 7
16070: PUSH
16071: LD_INT 1
16073: ARRAY
16074: PPUSH
16075: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
16079: LD_VAR 0 6
16083: PUSH
16084: LD_INT 1
16086: ARRAY
16087: PPUSH
16088: LD_VAR 0 7
16092: PUSH
16093: LD_INT 1
16095: ARRAY
16096: PPUSH
16097: CALL_OW 120
// end ;
16101: GO 16039
16103: POP
16104: POP
// end ; end ; end ;
16105: LD_VAR 0 3
16109: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
16110: LD_INT 0
16112: PPUSH
16113: PPUSH
16114: PPUSH
16115: PPUSH
16116: PPUSH
16117: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
16118: LD_ADDR_VAR 0 6
16122: PUSH
16123: LD_VAR 0 2
16127: PPUSH
16128: CALL_OW 313
16132: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
16133: LD_ADDR_VAR 0 7
16137: PUSH
16138: LD_INT 22
16140: PUSH
16141: LD_VAR 0 1
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: LD_INT 25
16152: PUSH
16153: LD_INT 2
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: PUSH
16160: LD_INT 24
16162: PUSH
16163: LD_INT 1000
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: LD_INT 3
16172: PUSH
16173: LD_INT 54
16175: PUSH
16176: EMPTY
16177: LIST
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: PPUSH
16189: CALL_OW 69
16193: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
16194: LD_ADDR_VAR 0 4
16198: PUSH
16199: LD_INT 22
16201: PUSH
16202: LD_VAR 0 1
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: LD_INT 21
16213: PUSH
16214: LD_INT 3
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PUSH
16221: LD_INT 3
16223: PUSH
16224: LD_INT 24
16226: PUSH
16227: LD_INT 1000
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: LIST
16242: PUSH
16243: EMPTY
16244: LIST
16245: PPUSH
16246: CALL_OW 69
16250: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
16251: LD_VAR 0 4
16255: NOT
16256: PUSH
16257: LD_VAR 0 7
16261: NOT
16262: AND
16263: PUSH
16264: LD_EXP 42
16268: NOT
16269: AND
16270: IFFALSE 16274
// exit ;
16272: GO 16465
// if buildings_list > 0 and engineerOkInside then
16274: LD_VAR 0 4
16278: PUSH
16279: LD_INT 0
16281: GREATER
16282: PUSH
16283: LD_VAR 0 6
16287: AND
16288: IFFALSE 16342
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16290: LD_ADDR_VAR 0 5
16294: PUSH
16295: LD_INT 22
16297: PUSH
16298: LD_VAR 0 1
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PUSH
16307: LD_INT 25
16309: PUSH
16310: LD_INT 2
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PPUSH
16321: CALL_OW 69
16325: PUSH
16326: FOR_IN
16327: IFFALSE 16340
// ComExitBuilding ( i ) ;
16329: LD_VAR 0 5
16333: PPUSH
16334: CALL_OW 122
16338: GO 16326
16340: POP
16341: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
16342: LD_VAR 0 4
16346: PUSH
16347: LD_INT 0
16349: GREATER
16350: PUSH
16351: LD_VAR 0 7
16355: PUSH
16356: LD_INT 0
16358: GREATER
16359: AND
16360: IFFALSE 16414
// begin for i in engineerOkOutside do
16362: LD_ADDR_VAR 0 5
16366: PUSH
16367: LD_VAR 0 7
16371: PUSH
16372: FOR_IN
16373: IFFALSE 16412
// for j in buildings_list do
16375: LD_ADDR_VAR 0 8
16379: PUSH
16380: LD_VAR 0 4
16384: PUSH
16385: FOR_IN
16386: IFFALSE 16408
// ComRepairBuilding ( i , j [ 1 ] ) ;
16388: LD_VAR 0 5
16392: PPUSH
16393: LD_VAR 0 8
16397: PUSH
16398: LD_INT 1
16400: ARRAY
16401: PPUSH
16402: CALL_OW 130
16406: GO 16385
16408: POP
16409: POP
16410: GO 16372
16412: POP
16413: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
16414: LD_VAR 0 4
16418: PUSH
16419: LD_INT 0
16421: EQUAL
16422: PUSH
16423: LD_VAR 0 7
16427: PUSH
16428: LD_INT 0
16430: GREATER
16431: AND
16432: IFFALSE 16465
// for i in engineerOkOutside do
16434: LD_ADDR_VAR 0 5
16438: PUSH
16439: LD_VAR 0 7
16443: PUSH
16444: FOR_IN
16445: IFFALSE 16463
// ComEnterUnit ( i , building ) ;
16447: LD_VAR 0 5
16451: PPUSH
16452: LD_VAR 0 2
16456: PPUSH
16457: CALL_OW 120
16461: GO 16444
16463: POP
16464: POP
// end ;
16465: LD_VAR 0 3
16469: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
16470: LD_INT 0
16472: PPUSH
16473: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
16474: LD_INT 22
16476: PUSH
16477: LD_VAR 0 1
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 25
16488: PUSH
16489: LD_INT 2
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PPUSH
16500: CALL_OW 69
16504: PUSH
16505: LD_INT 0
16507: GREATER
16508: PUSH
16509: LD_INT 22
16511: PUSH
16512: LD_VAR 0 1
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 21
16523: PUSH
16524: LD_INT 3
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 3
16533: PUSH
16534: LD_INT 24
16536: PUSH
16537: LD_INT 1000
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: LIST
16552: PPUSH
16553: CALL_OW 69
16557: PUSH
16558: LD_INT 0
16560: EQUAL
16561: AND
16562: PUSH
16563: LD_VAR 0 2
16567: PUSH
16568: LD_INT 0
16570: GREATER
16571: AND
16572: IFFALSE 16671
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16574: LD_ADDR_VAR 0 4
16578: PUSH
16579: LD_INT 22
16581: PUSH
16582: LD_VAR 0 1
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 25
16593: PUSH
16594: LD_INT 2
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PPUSH
16605: CALL_OW 69
16609: PUSH
16610: FOR_IN
16611: IFFALSE 16669
// begin AddComExitBuilding ( i ) ;
16613: LD_VAR 0 4
16617: PPUSH
16618: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
16622: LD_VAR 0 4
16626: PPUSH
16627: LD_VAR 0 2
16631: PUSH
16632: LD_INT 1
16634: ARRAY
16635: PPUSH
16636: LD_VAR 0 2
16640: PUSH
16641: LD_INT 2
16643: ARRAY
16644: PPUSH
16645: LD_VAR 0 2
16649: PUSH
16650: LD_INT 3
16652: ARRAY
16653: PPUSH
16654: LD_VAR 0 2
16658: PUSH
16659: LD_INT 4
16661: ARRAY
16662: PPUSH
16663: CALL_OW 205
// end ;
16667: GO 16610
16669: POP
16670: POP
// end ; end ;
16671: LD_VAR 0 3
16675: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
16676: LD_INT 0
16678: PPUSH
16679: PPUSH
16680: PPUSH
16681: PPUSH
16682: PPUSH
16683: PPUSH
16684: PPUSH
16685: PPUSH
16686: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
16687: LD_ADDR_VAR 0 6
16691: PUSH
16692: LD_INT 22
16694: PUSH
16695: LD_VAR 0 1
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: LD_INT 25
16706: PUSH
16707: LD_INT 4
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 24
16716: PUSH
16717: LD_INT 251
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: LIST
16728: PPUSH
16729: CALL_OW 69
16733: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
16734: LD_ADDR_VAR 0 7
16738: PUSH
16739: LD_VAR 0 3
16743: PPUSH
16744: LD_INT 22
16746: PUSH
16747: LD_VAR 0 1
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: LD_INT 25
16758: PUSH
16759: LD_INT 4
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PUSH
16766: LD_INT 50
16768: PUSH
16769: EMPTY
16770: LIST
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: LIST
16776: PPUSH
16777: CALL_OW 70
16781: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
16782: LD_ADDR_VAR 0 10
16786: PUSH
16787: LD_VAR 0 3
16791: PPUSH
16792: LD_INT 22
16794: PUSH
16795: LD_VAR 0 1
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PUSH
16804: LD_INT 21
16806: PUSH
16807: LD_INT 1
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 3
16816: PUSH
16817: LD_INT 25
16819: PUSH
16820: LD_INT 3
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 3
16833: PUSH
16834: LD_INT 24
16836: PUSH
16837: LD_INT 750
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: PPUSH
16854: CALL_OW 70
16858: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16859: LD_ADDR_VAR 0 11
16863: PUSH
16864: LD_VAR 0 2
16868: PPUSH
16869: LD_INT 22
16871: PUSH
16872: LD_VAR 0 1
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 21
16883: PUSH
16884: LD_INT 1
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 3
16893: PUSH
16894: LD_INT 25
16896: PUSH
16897: LD_INT 3
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 3
16910: PUSH
16911: LD_INT 24
16913: PUSH
16914: LD_INT 1000
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: PPUSH
16931: CALL_OW 70
16935: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
16936: LD_VAR 0 10
16940: NOT
16941: PUSH
16942: LD_VAR 0 7
16946: NOT
16947: AND
16948: PUSH
16949: LD_VAR 0 11
16953: NOT
16954: AND
16955: IFFALSE 16959
// exit ;
16957: GO 17219
// if damageUnits > 0 and sci_list > 0 then
16959: LD_VAR 0 10
16963: PUSH
16964: LD_INT 0
16966: GREATER
16967: PUSH
16968: LD_VAR 0 6
16972: PUSH
16973: LD_INT 0
16975: GREATER
16976: AND
16977: IFFALSE 17010
// for i in damageUnits do
16979: LD_ADDR_VAR 0 8
16983: PUSH
16984: LD_VAR 0 10
16988: PUSH
16989: FOR_IN
16990: IFFALSE 17008
// ComMoveToArea ( i , healArea ) ;
16992: LD_VAR 0 8
16996: PPUSH
16997: LD_VAR 0 2
17001: PPUSH
17002: CALL_OW 113
17006: GO 16989
17008: POP
17009: POP
// if unitsToHeal > 0 and sci_list > 0 then
17010: LD_VAR 0 11
17014: PUSH
17015: LD_INT 0
17017: GREATER
17018: PUSH
17019: LD_VAR 0 6
17023: PUSH
17024: LD_INT 0
17026: GREATER
17027: AND
17028: IFFALSE 17087
// begin for i in sci_list do
17030: LD_ADDR_VAR 0 8
17034: PUSH
17035: LD_VAR 0 6
17039: PUSH
17040: FOR_IN
17041: IFFALSE 17085
// begin ComExitBuilding ( i ) ;
17043: LD_VAR 0 8
17047: PPUSH
17048: CALL_OW 122
// for j in unitsToHeal do
17052: LD_ADDR_VAR 0 9
17056: PUSH
17057: LD_VAR 0 11
17061: PUSH
17062: FOR_IN
17063: IFFALSE 17081
// AddComHeal ( i , j ) ;
17065: LD_VAR 0 8
17069: PPUSH
17070: LD_VAR 0 9
17074: PPUSH
17075: CALL_OW 188
17079: GO 17062
17081: POP
17082: POP
// end ;
17083: GO 17040
17085: POP
17086: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
17087: LD_VAR 0 10
17091: PUSH
17092: LD_INT 0
17094: EQUAL
17095: PUSH
17096: LD_VAR 0 11
17100: PUSH
17101: LD_INT 0
17103: EQUAL
17104: AND
17105: PUSH
17106: LD_VAR 0 7
17110: PUSH
17111: LD_INT 0
17113: GREATER
17114: AND
17115: IFFALSE 17219
// for i in sci_listOutside do
17117: LD_ADDR_VAR 0 8
17121: PUSH
17122: LD_VAR 0 7
17126: PUSH
17127: FOR_IN
17128: IFFALSE 17217
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
17130: LD_ADDR_VAR 0 12
17134: PUSH
17135: LD_INT 22
17137: PUSH
17138: LD_VAR 0 1
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: LD_INT 21
17149: PUSH
17150: LD_INT 3
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PUSH
17157: LD_INT 30
17159: PUSH
17160: LD_INT 8
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: LIST
17171: PPUSH
17172: CALL_OW 69
17176: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
17177: LD_ADDR_VAR 0 13
17181: PUSH
17182: LD_INT 1
17184: PPUSH
17185: LD_VAR 0 12
17189: PPUSH
17190: CALL_OW 12
17194: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
17195: LD_VAR 0 8
17199: PPUSH
17200: LD_VAR 0 12
17204: PUSH
17205: LD_VAR 0 13
17209: ARRAY
17210: PPUSH
17211: CALL_OW 120
// end ;
17215: GO 17127
17217: POP
17218: POP
// end ;
17219: LD_VAR 0 5
17223: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
17224: LD_INT 0
17226: PPUSH
17227: PPUSH
17228: PPUSH
17229: PPUSH
17230: PPUSH
17231: PPUSH
17232: PPUSH
17233: PPUSH
17234: PPUSH
17235: PPUSH
17236: PPUSH
// amChassisTab = [ ] ;
17237: LD_ADDR_VAR 0 19
17241: PUSH
17242: EMPTY
17243: ST_TO_ADDR
// arChassisTab = [ ] ;
17244: LD_ADDR_VAR 0 18
17248: PUSH
17249: EMPTY
17250: ST_TO_ADDR
// ruChassisTab = [ ] ;
17251: LD_ADDR_VAR 0 17
17255: PUSH
17256: EMPTY
17257: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
17258: LD_INT 35
17260: PPUSH
17261: CALL_OW 67
// if nation = 1 then
17265: LD_VAR 0 5
17269: PUSH
17270: LD_INT 1
17272: EQUAL
17273: IFFALSE 17778
// begin uc_side = side ;
17275: LD_ADDR_OWVAR 20
17279: PUSH
17280: LD_VAR 0 2
17284: ST_TO_ADDR
// uc_nation = nation ;
17285: LD_ADDR_OWVAR 21
17289: PUSH
17290: LD_VAR 0 5
17294: ST_TO_ADDR
// vc_engine = vehengine ;
17295: LD_ADDR_OWVAR 39
17299: PUSH
17300: LD_VAR 0 6
17304: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17305: LD_ADDR_OWVAR 38
17309: PUSH
17310: LD_VAR 0 7
17314: PUSH
17315: LD_INT 1
17317: PPUSH
17318: LD_VAR 0 7
17322: PPUSH
17323: CALL_OW 12
17327: ARRAY
17328: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
17329: LD_ADDR_OWVAR 40
17333: PUSH
17334: LD_VAR 0 10
17338: PUSH
17339: LD_INT 1
17341: PPUSH
17342: LD_VAR 0 10
17346: PPUSH
17347: CALL_OW 12
17351: ARRAY
17352: ST_TO_ADDR
// for j = 1 to AMWeapon do
17353: LD_ADDR_VAR 0 14
17357: PUSH
17358: DOUBLE
17359: LD_INT 1
17361: DEC
17362: ST_TO_ADDR
17363: LD_VAR 0 10
17367: PUSH
17368: FOR_TO
17369: IFFALSE 17670
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
17371: LD_VAR 0 10
17375: PUSH
17376: LD_VAR 0 14
17380: ARRAY
17381: PUSH
17382: LD_INT 2
17384: EQUAL
17385: PUSH
17386: LD_VAR 0 10
17390: PUSH
17391: LD_VAR 0 14
17395: ARRAY
17396: PUSH
17397: LD_INT 3
17399: EQUAL
17400: OR
17401: IFFALSE 17454
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
17403: LD_ADDR_VAR 0 19
17407: PUSH
17408: LD_INT 1
17410: PUSH
17411: LD_INT 2
17413: PUSH
17414: LD_INT 3
17416: PUSH
17417: LD_INT 4
17419: PUSH
17420: LD_INT 5
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17430: LD_ADDR_OWVAR 37
17434: PUSH
17435: LD_VAR 0 19
17439: PUSH
17440: LD_INT 1
17442: PPUSH
17443: LD_VAR 0 19
17447: PPUSH
17448: CALL_OW 12
17452: ARRAY
17453: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
17454: LD_VAR 0 10
17458: PUSH
17459: LD_VAR 0 14
17463: ARRAY
17464: PUSH
17465: LD_INT 4
17467: EQUAL
17468: PUSH
17469: LD_VAR 0 10
17473: PUSH
17474: LD_VAR 0 14
17478: ARRAY
17479: PUSH
17480: LD_INT 5
17482: EQUAL
17483: OR
17484: PUSH
17485: LD_VAR 0 10
17489: PUSH
17490: LD_VAR 0 14
17494: ARRAY
17495: PUSH
17496: LD_INT 9
17498: EQUAL
17499: OR
17500: PUSH
17501: LD_VAR 0 10
17505: PUSH
17506: LD_VAR 0 14
17510: ARRAY
17511: PUSH
17512: LD_INT 11
17514: EQUAL
17515: OR
17516: PUSH
17517: LD_VAR 0 10
17521: PUSH
17522: LD_VAR 0 14
17526: ARRAY
17527: PUSH
17528: LD_INT 7
17530: EQUAL
17531: OR
17532: IFFALSE 17581
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
17534: LD_ADDR_VAR 0 19
17538: PUSH
17539: LD_INT 2
17541: PUSH
17542: LD_INT 3
17544: PUSH
17545: LD_INT 4
17547: PUSH
17548: LD_INT 5
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17557: LD_ADDR_OWVAR 37
17561: PUSH
17562: LD_VAR 0 19
17566: PUSH
17567: LD_INT 1
17569: PPUSH
17570: LD_VAR 0 19
17574: PPUSH
17575: CALL_OW 12
17579: ARRAY
17580: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
17581: LD_VAR 0 10
17585: PUSH
17586: LD_VAR 0 14
17590: ARRAY
17591: PUSH
17592: LD_INT 8
17594: EQUAL
17595: PUSH
17596: LD_VAR 0 10
17600: PUSH
17601: LD_VAR 0 14
17605: ARRAY
17606: PUSH
17607: LD_INT 6
17609: EQUAL
17610: OR
17611: PUSH
17612: LD_VAR 0 10
17616: PUSH
17617: LD_VAR 0 14
17621: ARRAY
17622: PUSH
17623: LD_INT 10
17625: EQUAL
17626: OR
17627: IFFALSE 17668
// begin amChassisTab = [ 4 , 5 ] ;
17629: LD_ADDR_VAR 0 19
17633: PUSH
17634: LD_INT 4
17636: PUSH
17637: LD_INT 5
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17644: LD_ADDR_OWVAR 37
17648: PUSH
17649: LD_VAR 0 19
17653: PUSH
17654: LD_INT 1
17656: PPUSH
17657: LD_VAR 0 19
17661: PPUSH
17662: CALL_OW 12
17666: ARRAY
17667: ST_TO_ADDR
// end ; end ;
17668: GO 17368
17670: POP
17671: POP
// veh = CreateVehicle ;
17672: LD_ADDR_VAR 0 16
17676: PUSH
17677: CALL_OW 45
17681: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17682: LD_VAR 0 16
17686: PPUSH
17687: LD_VAR 0 1
17691: PPUSH
17692: LD_INT 0
17694: PPUSH
17695: CALL_OW 49
// if vc_control = 1 then
17699: LD_OWVAR 38
17703: PUSH
17704: LD_INT 1
17706: EQUAL
17707: IFFALSE 17764
// begin hc_gallery =  ;
17709: LD_ADDR_OWVAR 33
17713: PUSH
17714: LD_STRING 
17716: ST_TO_ADDR
// hc_name =  ;
17717: LD_ADDR_OWVAR 26
17721: PUSH
17722: LD_STRING 
17724: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17725: LD_INT 0
17727: PPUSH
17728: LD_INT 3
17730: PPUSH
17731: LD_VAR 0 4
17735: PPUSH
17736: CALL_OW 380
// un = CreateHuman ;
17740: LD_ADDR_VAR 0 15
17744: PUSH
17745: CALL_OW 44
17749: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17750: LD_VAR 0 15
17754: PPUSH
17755: LD_VAR 0 16
17759: PPUSH
17760: CALL_OW 52
// end ; i = i + 1 ;
17764: LD_ADDR_VAR 0 13
17768: PUSH
17769: LD_VAR 0 13
17773: PUSH
17774: LD_INT 1
17776: PLUS
17777: ST_TO_ADDR
// end ; if nation = 2 then
17778: LD_VAR 0 5
17782: PUSH
17783: LD_INT 2
17785: EQUAL
17786: IFFALSE 18208
// begin uc_side = side ;
17788: LD_ADDR_OWVAR 20
17792: PUSH
17793: LD_VAR 0 2
17797: ST_TO_ADDR
// uc_nation = nation ;
17798: LD_ADDR_OWVAR 21
17802: PUSH
17803: LD_VAR 0 5
17807: ST_TO_ADDR
// vc_engine = vehengine ;
17808: LD_ADDR_OWVAR 39
17812: PUSH
17813: LD_VAR 0 6
17817: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17818: LD_ADDR_OWVAR 38
17822: PUSH
17823: LD_VAR 0 7
17827: PUSH
17828: LD_INT 1
17830: PPUSH
17831: LD_VAR 0 7
17835: PPUSH
17836: CALL_OW 12
17840: ARRAY
17841: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
17842: LD_ADDR_OWVAR 40
17846: PUSH
17847: LD_VAR 0 9
17851: PUSH
17852: LD_INT 1
17854: PPUSH
17855: LD_VAR 0 9
17859: PPUSH
17860: CALL_OW 12
17864: ARRAY
17865: ST_TO_ADDR
// for j = 1 to ARWeapons do
17866: LD_ADDR_VAR 0 14
17870: PUSH
17871: DOUBLE
17872: LD_INT 1
17874: DEC
17875: ST_TO_ADDR
17876: LD_VAR 0 9
17880: PUSH
17881: FOR_TO
17882: IFFALSE 18100
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
17884: LD_VAR 0 9
17888: PUSH
17889: LD_VAR 0 14
17893: ARRAY
17894: PUSH
17895: LD_INT 24
17897: EQUAL
17898: PUSH
17899: LD_VAR 0 9
17903: PUSH
17904: LD_VAR 0 14
17908: ARRAY
17909: PUSH
17910: LD_INT 22
17912: EQUAL
17913: OR
17914: PUSH
17915: LD_VAR 0 9
17919: PUSH
17920: LD_VAR 0 14
17924: ARRAY
17925: PUSH
17926: LD_INT 23
17928: EQUAL
17929: OR
17930: PUSH
17931: LD_VAR 0 9
17935: PUSH
17936: LD_VAR 0 14
17940: ARRAY
17941: PUSH
17942: LD_INT 30
17944: EQUAL
17945: OR
17946: IFFALSE 17983
// begin arChassisTab = [ 14 ] ;
17948: LD_ADDR_VAR 0 18
17952: PUSH
17953: LD_INT 14
17955: PUSH
17956: EMPTY
17957: LIST
17958: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
17959: LD_ADDR_OWVAR 37
17963: PUSH
17964: LD_VAR 0 18
17968: PUSH
17969: LD_INT 1
17971: PPUSH
17972: LD_VAR 0 18
17976: PPUSH
17977: CALL_OW 12
17981: ARRAY
17982: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
17983: LD_VAR 0 9
17987: PUSH
17988: LD_VAR 0 14
17992: ARRAY
17993: PUSH
17994: LD_INT 29
17996: EQUAL
17997: PUSH
17998: LD_VAR 0 9
18002: PUSH
18003: LD_VAR 0 14
18007: ARRAY
18008: PUSH
18009: LD_INT 28
18011: EQUAL
18012: OR
18013: PUSH
18014: LD_VAR 0 9
18018: PUSH
18019: LD_VAR 0 14
18023: ARRAY
18024: PUSH
18025: LD_INT 27
18027: EQUAL
18028: OR
18029: PUSH
18030: LD_VAR 0 9
18034: PUSH
18035: LD_VAR 0 14
18039: ARRAY
18040: PUSH
18041: LD_INT 26
18043: EQUAL
18044: OR
18045: PUSH
18046: LD_VAR 0 9
18050: PUSH
18051: LD_VAR 0 14
18055: ARRAY
18056: PUSH
18057: LD_INT 25
18059: EQUAL
18060: OR
18061: IFFALSE 18098
// begin arChassisTab = [ 14 ] ;
18063: LD_ADDR_VAR 0 18
18067: PUSH
18068: LD_INT 14
18070: PUSH
18071: EMPTY
18072: LIST
18073: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18074: LD_ADDR_OWVAR 37
18078: PUSH
18079: LD_VAR 0 18
18083: PUSH
18084: LD_INT 1
18086: PPUSH
18087: LD_VAR 0 18
18091: PPUSH
18092: CALL_OW 12
18096: ARRAY
18097: ST_TO_ADDR
// end ; end ;
18098: GO 17881
18100: POP
18101: POP
// veh = CreateVehicle ;
18102: LD_ADDR_VAR 0 16
18106: PUSH
18107: CALL_OW 45
18111: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18112: LD_VAR 0 16
18116: PPUSH
18117: LD_VAR 0 1
18121: PPUSH
18122: LD_INT 0
18124: PPUSH
18125: CALL_OW 49
// if vc_control = 1 then
18129: LD_OWVAR 38
18133: PUSH
18134: LD_INT 1
18136: EQUAL
18137: IFFALSE 18194
// begin hc_gallery =  ;
18139: LD_ADDR_OWVAR 33
18143: PUSH
18144: LD_STRING 
18146: ST_TO_ADDR
// hc_name =  ;
18147: LD_ADDR_OWVAR 26
18151: PUSH
18152: LD_STRING 
18154: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18155: LD_INT 0
18157: PPUSH
18158: LD_INT 3
18160: PPUSH
18161: LD_VAR 0 4
18165: PPUSH
18166: CALL_OW 380
// un = CreateHuman ;
18170: LD_ADDR_VAR 0 15
18174: PUSH
18175: CALL_OW 44
18179: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18180: LD_VAR 0 15
18184: PPUSH
18185: LD_VAR 0 16
18189: PPUSH
18190: CALL_OW 52
// end ; i = i + 1 ;
18194: LD_ADDR_VAR 0 13
18198: PUSH
18199: LD_VAR 0 13
18203: PUSH
18204: LD_INT 1
18206: PLUS
18207: ST_TO_ADDR
// end ; if nation = 3 then
18208: LD_VAR 0 5
18212: PUSH
18213: LD_INT 3
18215: EQUAL
18216: IFFALSE 18622
// begin uc_side = side ;
18218: LD_ADDR_OWVAR 20
18222: PUSH
18223: LD_VAR 0 2
18227: ST_TO_ADDR
// uc_nation = nation ;
18228: LD_ADDR_OWVAR 21
18232: PUSH
18233: LD_VAR 0 5
18237: ST_TO_ADDR
// vc_engine = vehengine ;
18238: LD_ADDR_OWVAR 39
18242: PUSH
18243: LD_VAR 0 6
18247: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18248: LD_ADDR_OWVAR 38
18252: PUSH
18253: LD_VAR 0 7
18257: PUSH
18258: LD_INT 1
18260: PPUSH
18261: LD_VAR 0 7
18265: PPUSH
18266: CALL_OW 12
18270: ARRAY
18271: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
18272: LD_ADDR_OWVAR 40
18276: PUSH
18277: LD_VAR 0 8
18281: PUSH
18282: LD_INT 1
18284: PPUSH
18285: LD_VAR 0 8
18289: PPUSH
18290: CALL_OW 12
18294: ARRAY
18295: ST_TO_ADDR
// for j = 1 to RuWeapons do
18296: LD_ADDR_VAR 0 14
18300: PUSH
18301: DOUBLE
18302: LD_INT 1
18304: DEC
18305: ST_TO_ADDR
18306: LD_VAR 0 8
18310: PUSH
18311: FOR_TO
18312: IFFALSE 18514
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
18314: LD_VAR 0 8
18318: PUSH
18319: LD_VAR 0 14
18323: ARRAY
18324: PUSH
18325: LD_INT 42
18327: EQUAL
18328: PUSH
18329: LD_VAR 0 8
18333: PUSH
18334: LD_VAR 0 14
18338: ARRAY
18339: PUSH
18340: LD_INT 43
18342: EQUAL
18343: OR
18344: PUSH
18345: LD_VAR 0 8
18349: PUSH
18350: LD_VAR 0 14
18354: ARRAY
18355: PUSH
18356: LD_INT 44
18358: EQUAL
18359: OR
18360: PUSH
18361: LD_VAR 0 8
18365: PUSH
18366: LD_VAR 0 14
18370: ARRAY
18371: PUSH
18372: LD_INT 45
18374: EQUAL
18375: OR
18376: PUSH
18377: LD_VAR 0 8
18381: PUSH
18382: LD_VAR 0 14
18386: ARRAY
18387: PUSH
18388: LD_INT 49
18390: EQUAL
18391: OR
18392: IFFALSE 18441
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
18394: LD_ADDR_VAR 0 17
18398: PUSH
18399: LD_INT 21
18401: PUSH
18402: LD_INT 22
18404: PUSH
18405: LD_INT 23
18407: PUSH
18408: LD_INT 24
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18417: LD_ADDR_OWVAR 37
18421: PUSH
18422: LD_VAR 0 17
18426: PUSH
18427: LD_INT 1
18429: PPUSH
18430: LD_VAR 0 17
18434: PPUSH
18435: CALL_OW 12
18439: ARRAY
18440: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
18441: LD_VAR 0 8
18445: PUSH
18446: LD_VAR 0 14
18450: ARRAY
18451: PUSH
18452: LD_INT 46
18454: EQUAL
18455: PUSH
18456: LD_VAR 0 8
18460: PUSH
18461: LD_VAR 0 14
18465: ARRAY
18466: PUSH
18467: LD_INT 47
18469: EQUAL
18470: OR
18471: IFFALSE 18512
// begin ruChassisTab = [ 23 , 24 ] ;
18473: LD_ADDR_VAR 0 17
18477: PUSH
18478: LD_INT 23
18480: PUSH
18481: LD_INT 24
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18488: LD_ADDR_OWVAR 37
18492: PUSH
18493: LD_VAR 0 17
18497: PUSH
18498: LD_INT 1
18500: PPUSH
18501: LD_VAR 0 17
18505: PPUSH
18506: CALL_OW 12
18510: ARRAY
18511: ST_TO_ADDR
// end ; end ;
18512: GO 18311
18514: POP
18515: POP
// veh = CreateVehicle ;
18516: LD_ADDR_VAR 0 16
18520: PUSH
18521: CALL_OW 45
18525: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18526: LD_VAR 0 16
18530: PPUSH
18531: LD_VAR 0 1
18535: PPUSH
18536: LD_INT 0
18538: PPUSH
18539: CALL_OW 49
// if vc_control = 1 then
18543: LD_OWVAR 38
18547: PUSH
18548: LD_INT 1
18550: EQUAL
18551: IFFALSE 18608
// begin hc_gallery =  ;
18553: LD_ADDR_OWVAR 33
18557: PUSH
18558: LD_STRING 
18560: ST_TO_ADDR
// hc_name =  ;
18561: LD_ADDR_OWVAR 26
18565: PUSH
18566: LD_STRING 
18568: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18569: LD_INT 0
18571: PPUSH
18572: LD_INT 3
18574: PPUSH
18575: LD_VAR 0 4
18579: PPUSH
18580: CALL_OW 380
// un = CreateHuman ;
18584: LD_ADDR_VAR 0 15
18588: PUSH
18589: CALL_OW 44
18593: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18594: LD_VAR 0 15
18598: PPUSH
18599: LD_VAR 0 16
18603: PPUSH
18604: CALL_OW 52
// end ; i = i + 1 ;
18608: LD_ADDR_VAR 0 13
18612: PUSH
18613: LD_VAR 0 13
18617: PUSH
18618: LD_INT 1
18620: PLUS
18621: ST_TO_ADDR
// end ; until i = vehCount ;
18622: LD_VAR 0 13
18626: PUSH
18627: LD_VAR 0 3
18631: EQUAL
18632: IFFALSE 17258
// repeat wait ( 0 0$1 ) ;
18634: LD_INT 35
18636: PPUSH
18637: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
18641: LD_ADDR_VAR 0 20
18645: PUSH
18646: LD_INT 22
18648: PUSH
18649: LD_VAR 0 2
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 21
18660: PUSH
18661: LD_INT 2
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 24
18670: PUSH
18671: LD_INT 650
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: LIST
18682: PPUSH
18683: CALL_OW 69
18687: ST_TO_ADDR
// if vehicleOK_list > 0 then
18688: LD_VAR 0 20
18692: PUSH
18693: LD_INT 0
18695: GREATER
18696: IFFALSE 18887
// begin for i in vehicleOK_list do
18698: LD_ADDR_VAR 0 13
18702: PUSH
18703: LD_VAR 0 20
18707: PUSH
18708: FOR_IN
18709: IFFALSE 18885
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18711: LD_ADDR_VAR 0 21
18715: PUSH
18716: LD_INT 22
18718: PUSH
18719: LD_VAR 0 11
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PPUSH
18728: CALL_OW 69
18732: PPUSH
18733: LD_VAR 0 13
18737: PPUSH
18738: CALL_OW 74
18742: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18743: LD_ADDR_VAR 0 22
18747: PUSH
18748: LD_INT 22
18750: PUSH
18751: LD_VAR 0 11
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 2
18762: PUSH
18763: LD_INT 59
18765: PUSH
18766: EMPTY
18767: LIST
18768: PUSH
18769: LD_INT 21
18771: PUSH
18772: LD_INT 1
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: LD_INT 21
18781: PUSH
18782: LD_INT 2
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: EMPTY
18800: LIST
18801: PPUSH
18802: CALL_OW 69
18806: PPUSH
18807: LD_VAR 0 13
18811: PPUSH
18812: CALL_OW 74
18816: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18817: LD_VAR 0 13
18821: PPUSH
18822: LD_VAR 0 21
18826: PPUSH
18827: CALL_OW 296
18831: PUSH
18832: LD_INT 8
18834: PLUS
18835: PUSH
18836: LD_VAR 0 13
18840: PPUSH
18841: LD_VAR 0 22
18845: PPUSH
18846: CALL_OW 296
18850: LESS
18851: IFFALSE 18869
// begin ComAttackUnit ( i , target1 ) ;
18853: LD_VAR 0 13
18857: PPUSH
18858: LD_VAR 0 21
18862: PPUSH
18863: CALL_OW 115
// end else
18867: GO 18883
// begin ComAttackUnit ( i , target2 ) ;
18869: LD_VAR 0 13
18873: PPUSH
18874: LD_VAR 0 22
18878: PPUSH
18879: CALL_OW 115
// end ; end ;
18883: GO 18708
18885: POP
18886: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
18887: LD_INT 22
18889: PUSH
18890: LD_VAR 0 2
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 21
18901: PUSH
18902: LD_INT 2
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PPUSH
18913: CALL_OW 69
18917: PUSH
18918: LD_INT 0
18920: EQUAL
18921: IFFALSE 18634
// end ;
18923: LD_VAR 0 12
18927: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
18928: LD_INT 0
18930: PPUSH
18931: PPUSH
18932: PPUSH
18933: PPUSH
18934: PPUSH
18935: PPUSH
18936: PPUSH
18937: PPUSH
18938: PPUSH
18939: PPUSH
18940: PPUSH
// for i = 1 to soldierCount do
18941: LD_ADDR_VAR 0 13
18945: PUSH
18946: DOUBLE
18947: LD_INT 1
18949: DEC
18950: ST_TO_ADDR
18951: LD_VAR 0 3
18955: PUSH
18956: FOR_TO
18957: IFFALSE 19039
// begin uc_side = side ;
18959: LD_ADDR_OWVAR 20
18963: PUSH
18964: LD_VAR 0 1
18968: ST_TO_ADDR
// uc_nation = nation ;
18969: LD_ADDR_OWVAR 21
18973: PUSH
18974: LD_VAR 0 2
18978: ST_TO_ADDR
// hc_name =  ;
18979: LD_ADDR_OWVAR 26
18983: PUSH
18984: LD_STRING 
18986: ST_TO_ADDR
// hc_gallery =  ;
18987: LD_ADDR_OWVAR 33
18991: PUSH
18992: LD_STRING 
18994: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
18995: LD_INT 0
18997: PPUSH
18998: LD_INT 1
19000: PPUSH
19001: LD_VAR 0 8
19005: PPUSH
19006: CALL_OW 380
// un = CreateHuman ;
19010: LD_ADDR_VAR 0 15
19014: PUSH
19015: CALL_OW 44
19019: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19020: LD_VAR 0 15
19024: PPUSH
19025: LD_VAR 0 9
19029: PPUSH
19030: LD_INT 0
19032: PPUSH
19033: CALL_OW 49
// end ;
19037: GO 18956
19039: POP
19040: POP
// for i = 1 to sniperCount do
19041: LD_ADDR_VAR 0 13
19045: PUSH
19046: DOUBLE
19047: LD_INT 1
19049: DEC
19050: ST_TO_ADDR
19051: LD_VAR 0 4
19055: PUSH
19056: FOR_TO
19057: IFFALSE 19139
// begin uc_side = side ;
19059: LD_ADDR_OWVAR 20
19063: PUSH
19064: LD_VAR 0 1
19068: ST_TO_ADDR
// uc_nation = nation ;
19069: LD_ADDR_OWVAR 21
19073: PUSH
19074: LD_VAR 0 2
19078: ST_TO_ADDR
// hc_name =  ;
19079: LD_ADDR_OWVAR 26
19083: PUSH
19084: LD_STRING 
19086: ST_TO_ADDR
// hc_gallery =  ;
19087: LD_ADDR_OWVAR 33
19091: PUSH
19092: LD_STRING 
19094: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
19095: LD_INT 0
19097: PPUSH
19098: LD_INT 5
19100: PPUSH
19101: LD_VAR 0 8
19105: PPUSH
19106: CALL_OW 380
// un = CreateHuman ;
19110: LD_ADDR_VAR 0 15
19114: PUSH
19115: CALL_OW 44
19119: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19120: LD_VAR 0 15
19124: PPUSH
19125: LD_VAR 0 9
19129: PPUSH
19130: LD_INT 0
19132: PPUSH
19133: CALL_OW 49
// end ;
19137: GO 19056
19139: POP
19140: POP
// for i = 1 to bazookCount do
19141: LD_ADDR_VAR 0 13
19145: PUSH
19146: DOUBLE
19147: LD_INT 1
19149: DEC
19150: ST_TO_ADDR
19151: LD_VAR 0 5
19155: PUSH
19156: FOR_TO
19157: IFFALSE 19239
// begin uc_side = side ;
19159: LD_ADDR_OWVAR 20
19163: PUSH
19164: LD_VAR 0 1
19168: ST_TO_ADDR
// uc_nation = nation ;
19169: LD_ADDR_OWVAR 21
19173: PUSH
19174: LD_VAR 0 2
19178: ST_TO_ADDR
// hc_name =  ;
19179: LD_ADDR_OWVAR 26
19183: PUSH
19184: LD_STRING 
19186: ST_TO_ADDR
// hc_gallery =  ;
19187: LD_ADDR_OWVAR 33
19191: PUSH
19192: LD_STRING 
19194: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
19195: LD_INT 0
19197: PPUSH
19198: LD_INT 9
19200: PPUSH
19201: LD_VAR 0 8
19205: PPUSH
19206: CALL_OW 380
// un = CreateHuman ;
19210: LD_ADDR_VAR 0 15
19214: PUSH
19215: CALL_OW 44
19219: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19220: LD_VAR 0 15
19224: PPUSH
19225: LD_VAR 0 9
19229: PPUSH
19230: LD_INT 0
19232: PPUSH
19233: CALL_OW 49
// end ;
19237: GO 19156
19239: POP
19240: POP
// for i = 1 to mortalCount do
19241: LD_ADDR_VAR 0 13
19245: PUSH
19246: DOUBLE
19247: LD_INT 1
19249: DEC
19250: ST_TO_ADDR
19251: LD_VAR 0 6
19255: PUSH
19256: FOR_TO
19257: IFFALSE 19339
// begin uc_side = side ;
19259: LD_ADDR_OWVAR 20
19263: PUSH
19264: LD_VAR 0 1
19268: ST_TO_ADDR
// uc_nation = nation ;
19269: LD_ADDR_OWVAR 21
19273: PUSH
19274: LD_VAR 0 2
19278: ST_TO_ADDR
// hc_name =  ;
19279: LD_ADDR_OWVAR 26
19283: PUSH
19284: LD_STRING 
19286: ST_TO_ADDR
// hc_gallery =  ;
19287: LD_ADDR_OWVAR 33
19291: PUSH
19292: LD_STRING 
19294: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
19295: LD_INT 0
19297: PPUSH
19298: LD_INT 8
19300: PPUSH
19301: LD_VAR 0 8
19305: PPUSH
19306: CALL_OW 380
// un = CreateHuman ;
19310: LD_ADDR_VAR 0 15
19314: PUSH
19315: CALL_OW 44
19319: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19320: LD_VAR 0 15
19324: PPUSH
19325: LD_VAR 0 9
19329: PPUSH
19330: LD_INT 0
19332: PPUSH
19333: CALL_OW 49
// end ;
19337: GO 19256
19339: POP
19340: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
19341: LD_ADDR_VAR 0 18
19345: PUSH
19346: LD_INT 22
19348: PUSH
19349: LD_VAR 0 1
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 2
19360: PUSH
19361: LD_INT 25
19363: PUSH
19364: LD_INT 1
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 25
19373: PUSH
19374: LD_INT 5
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 25
19383: PUSH
19384: LD_INT 8
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 25
19393: PUSH
19394: LD_INT 9
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PPUSH
19412: CALL_OW 69
19416: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
19417: LD_ADDR_VAR 0 17
19421: PUSH
19422: LD_INT 22
19424: PUSH
19425: LD_VAR 0 1
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 25
19436: PUSH
19437: LD_INT 4
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PPUSH
19448: CALL_OW 69
19452: ST_TO_ADDR
// for i in medic_list do
19453: LD_ADDR_VAR 0 13
19457: PUSH
19458: LD_VAR 0 17
19462: PUSH
19463: FOR_IN
19464: IFFALSE 19482
// ComMoveToArea ( i , healArea ) ;
19466: LD_VAR 0 13
19470: PPUSH
19471: LD_VAR 0 10
19475: PPUSH
19476: CALL_OW 113
19480: GO 19463
19482: POP
19483: POP
// repeat wait ( 0 0$1 ) ;
19484: LD_INT 35
19486: PPUSH
19487: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
19491: LD_ADDR_VAR 0 16
19495: PUSH
19496: LD_INT 22
19498: PUSH
19499: LD_VAR 0 1
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 1
19510: PUSH
19511: LD_INT 3
19513: PUSH
19514: LD_INT 24
19516: PUSH
19517: LD_INT 550
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 24
19530: PUSH
19531: LD_INT 250
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: LIST
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PPUSH
19547: CALL_OW 69
19551: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
19552: LD_ADDR_VAR 0 18
19556: PUSH
19557: LD_INT 22
19559: PUSH
19560: LD_VAR 0 1
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 2
19571: PUSH
19572: LD_INT 25
19574: PUSH
19575: LD_INT 1
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 25
19584: PUSH
19585: LD_INT 5
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 25
19594: PUSH
19595: LD_INT 8
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 25
19604: PUSH
19605: LD_INT 9
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 24
19621: PUSH
19622: LD_INT 1000
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: LIST
19633: PPUSH
19634: CALL_OW 69
19638: ST_TO_ADDR
// if medicCount > 0 then
19639: LD_VAR 0 7
19643: PUSH
19644: LD_INT 0
19646: GREATER
19647: IFFALSE 19721
// begin if damageUnit_list > 0 then
19649: LD_VAR 0 16
19653: PUSH
19654: LD_INT 0
19656: GREATER
19657: IFFALSE 19721
// begin for i in damageUnit_list do
19659: LD_ADDR_VAR 0 13
19663: PUSH
19664: LD_VAR 0 16
19668: PUSH
19669: FOR_IN
19670: IFFALSE 19719
// begin ComMoveToArea ( i , healArea ) ;
19672: LD_VAR 0 13
19676: PPUSH
19677: LD_VAR 0 10
19681: PPUSH
19682: CALL_OW 113
// for j in medic_list do
19686: LD_ADDR_VAR 0 14
19690: PUSH
19691: LD_VAR 0 17
19695: PUSH
19696: FOR_IN
19697: IFFALSE 19715
// AddComHeal ( j , i ) ;
19699: LD_VAR 0 14
19703: PPUSH
19704: LD_VAR 0 13
19708: PPUSH
19709: CALL_OW 188
19713: GO 19696
19715: POP
19716: POP
// end ;
19717: GO 19669
19719: POP
19720: POP
// end ; end ; for i in soldiersOK_list do
19721: LD_ADDR_VAR 0 13
19725: PUSH
19726: LD_VAR 0 18
19730: PUSH
19731: FOR_IN
19732: IFFALSE 19908
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19734: LD_ADDR_VAR 0 21
19738: PUSH
19739: LD_INT 22
19741: PUSH
19742: LD_VAR 0 11
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PPUSH
19751: CALL_OW 69
19755: PPUSH
19756: LD_VAR 0 13
19760: PPUSH
19761: CALL_OW 74
19765: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19766: LD_ADDR_VAR 0 22
19770: PUSH
19771: LD_INT 22
19773: PUSH
19774: LD_VAR 0 11
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 2
19785: PUSH
19786: LD_INT 59
19788: PUSH
19789: EMPTY
19790: LIST
19791: PUSH
19792: LD_INT 21
19794: PUSH
19795: LD_INT 1
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 21
19804: PUSH
19805: LD_INT 2
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: EMPTY
19823: LIST
19824: PPUSH
19825: CALL_OW 69
19829: PPUSH
19830: LD_VAR 0 13
19834: PPUSH
19835: CALL_OW 74
19839: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19840: LD_VAR 0 13
19844: PPUSH
19845: LD_VAR 0 21
19849: PPUSH
19850: CALL_OW 296
19854: PUSH
19855: LD_INT 8
19857: PLUS
19858: PUSH
19859: LD_VAR 0 13
19863: PPUSH
19864: LD_VAR 0 22
19868: PPUSH
19869: CALL_OW 296
19873: LESS
19874: IFFALSE 19892
// begin ComAttackUnit ( i , target1 ) ;
19876: LD_VAR 0 13
19880: PPUSH
19881: LD_VAR 0 21
19885: PPUSH
19886: CALL_OW 115
// end else
19890: GO 19906
// begin ComAttackUnit ( i , target2 ) ;
19892: LD_VAR 0 13
19896: PPUSH
19897: LD_VAR 0 22
19901: PPUSH
19902: CALL_OW 115
// end ; end ;
19906: GO 19731
19908: POP
19909: POP
// for i in soldiersOK_list do
19910: LD_ADDR_VAR 0 13
19914: PUSH
19915: LD_VAR 0 18
19919: PUSH
19920: FOR_IN
19921: IFFALSE 20097
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19923: LD_ADDR_VAR 0 21
19927: PUSH
19928: LD_INT 22
19930: PUSH
19931: LD_VAR 0 11
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PPUSH
19940: CALL_OW 69
19944: PPUSH
19945: LD_VAR 0 13
19949: PPUSH
19950: CALL_OW 74
19954: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19955: LD_ADDR_VAR 0 22
19959: PUSH
19960: LD_INT 22
19962: PUSH
19963: LD_VAR 0 11
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 2
19974: PUSH
19975: LD_INT 59
19977: PUSH
19978: EMPTY
19979: LIST
19980: PUSH
19981: LD_INT 21
19983: PUSH
19984: LD_INT 1
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 21
19993: PUSH
19994: LD_INT 2
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: EMPTY
20012: LIST
20013: PPUSH
20014: CALL_OW 69
20018: PPUSH
20019: LD_VAR 0 13
20023: PPUSH
20024: CALL_OW 74
20028: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20029: LD_VAR 0 13
20033: PPUSH
20034: LD_VAR 0 21
20038: PPUSH
20039: CALL_OW 296
20043: PUSH
20044: LD_INT 8
20046: PLUS
20047: PUSH
20048: LD_VAR 0 13
20052: PPUSH
20053: LD_VAR 0 22
20057: PPUSH
20058: CALL_OW 296
20062: LESS
20063: IFFALSE 20081
// begin ComAttackUnit ( i , target1 ) ;
20065: LD_VAR 0 13
20069: PPUSH
20070: LD_VAR 0 21
20074: PPUSH
20075: CALL_OW 115
// end else
20079: GO 20095
// begin ComAttackUnit ( i , target2 ) ;
20081: LD_VAR 0 13
20085: PPUSH
20086: LD_VAR 0 22
20090: PPUSH
20091: CALL_OW 115
// end ; end ;
20095: GO 19920
20097: POP
20098: POP
// until soldiersOK_list = [ ] ;
20099: LD_VAR 0 18
20103: PUSH
20104: EMPTY
20105: EQUAL
20106: IFFALSE 19484
// end ;
20108: LD_VAR 0 12
20112: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
20113: LD_INT 0
20115: PPUSH
20116: PPUSH
20117: PPUSH
20118: PPUSH
20119: PPUSH
20120: PPUSH
20121: PPUSH
// repeat wait ( 0 0$1 ) ;
20122: LD_INT 35
20124: PPUSH
20125: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
20129: LD_ADDR_VAR 0 7
20133: PUSH
20134: LD_INT 22
20136: PUSH
20137: LD_INT 2
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 25
20146: PUSH
20147: LD_INT 4
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: LD_INT 3
20156: PUSH
20157: LD_INT 60
20159: PUSH
20160: EMPTY
20161: LIST
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: LIST
20171: PPUSH
20172: CALL_OW 69
20176: ST_TO_ADDR
// if not tmp then
20177: LD_VAR 0 7
20181: NOT
20182: IFFALSE 20186
// continue ;
20184: GO 20122
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
20186: LD_ADDR_VAR 0 3
20190: PUSH
20191: LD_INT 5
20193: PPUSH
20194: LD_INT 22
20196: PUSH
20197: LD_INT 0
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 25
20206: PUSH
20207: LD_INT 12
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PPUSH
20218: CALL_OW 70
20222: PUSH
20223: FOR_IN
20224: IFFALSE 20257
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
20226: LD_VAR 0 7
20230: PPUSH
20231: LD_VAR 0 3
20235: PPUSH
20236: CALL_OW 250
20240: PPUSH
20241: LD_VAR 0 3
20245: PPUSH
20246: CALL_OW 251
20250: PPUSH
20251: CALL_OW 131
20255: GO 20223
20257: POP
20258: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
20259: LD_INT 22
20261: PUSH
20262: LD_INT 2
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 25
20271: PUSH
20272: LD_INT 4
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PPUSH
20283: CALL_OW 69
20287: PUSH
20288: LD_INT 0
20290: EQUAL
20291: PUSH
20292: LD_INT 5
20294: PPUSH
20295: LD_INT 22
20297: PUSH
20298: LD_INT 0
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 25
20307: PUSH
20308: LD_INT 12
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PPUSH
20319: CALL_OW 70
20323: PUSH
20324: LD_INT 2
20326: LESS
20327: OR
20328: PUSH
20329: LD_OWVAR 1
20333: PUSH
20334: LD_INT 7000
20336: GREATEREQUAL
20337: OR
20338: IFFALSE 20122
// repeat wait ( 0 0$1 ) ;
20340: LD_INT 35
20342: PPUSH
20343: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
20347: LD_ADDR_VAR 0 5
20351: PUSH
20352: LD_INT 22
20354: PUSH
20355: LD_INT 2
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 30
20364: PUSH
20365: LD_INT 5
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PPUSH
20376: CALL_OW 69
20380: ST_TO_ADDR
// until arm ;
20381: LD_VAR 0 5
20385: IFFALSE 20340
// wait ( 0 0$25 ) ;
20387: LD_INT 875
20389: PPUSH
20390: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20394: LD_ADDR_VAR 0 6
20398: PUSH
20399: LD_INT 22
20401: PUSH
20402: LD_INT 2
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 2
20411: PUSH
20412: LD_INT 30
20414: PUSH
20415: LD_INT 0
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 30
20424: PUSH
20425: LD_INT 1
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: LIST
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PPUSH
20441: CALL_OW 69
20445: ST_TO_ADDR
// j := 0 ;
20446: LD_ADDR_VAR 0 3
20450: PUSH
20451: LD_INT 0
20453: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
20454: LD_ADDR_VAR 0 2
20458: PUSH
20459: LD_INT 22
20461: PUSH
20462: LD_INT 2
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 25
20471: PUSH
20472: LD_INT 12
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PPUSH
20483: CALL_OW 69
20487: PUSH
20488: FOR_IN
20489: IFFALSE 20576
// begin ComMoveXY ( i , 63 , 16 ) ;
20491: LD_VAR 0 2
20495: PPUSH
20496: LD_INT 63
20498: PPUSH
20499: LD_INT 16
20501: PPUSH
20502: CALL_OW 111
// j := j + 1 ;
20506: LD_ADDR_VAR 0 3
20510: PUSH
20511: LD_VAR 0 3
20515: PUSH
20516: LD_INT 1
20518: PLUS
20519: ST_TO_ADDR
// if j < 5 then
20520: LD_VAR 0 3
20524: PUSH
20525: LD_INT 5
20527: LESS
20528: IFFALSE 20546
// b := arm [ 1 ] else
20530: LD_ADDR_VAR 0 4
20534: PUSH
20535: LD_VAR 0 5
20539: PUSH
20540: LD_INT 1
20542: ARRAY
20543: ST_TO_ADDR
20544: GO 20560
// b := dep [ 1 ] ;
20546: LD_ADDR_VAR 0 4
20550: PUSH
20551: LD_VAR 0 6
20555: PUSH
20556: LD_INT 1
20558: ARRAY
20559: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
20560: LD_VAR 0 2
20564: PPUSH
20565: LD_VAR 0 4
20569: PPUSH
20570: CALL_OW 180
// end ;
20574: GO 20488
20576: POP
20577: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
20578: LD_ADDR_VAR 0 2
20582: PUSH
20583: LD_INT 22
20585: PUSH
20586: LD_INT 2
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 25
20595: PUSH
20596: LD_INT 4
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PPUSH
20607: CALL_OW 69
20611: PUSH
20612: FOR_IN
20613: IFFALSE 20659
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
20615: LD_VAR 0 2
20619: PPUSH
20620: LD_INT 22
20622: PUSH
20623: LD_INT 2
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: LD_INT 30
20632: PUSH
20633: LD_INT 8
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PPUSH
20644: CALL_OW 69
20648: PUSH
20649: LD_INT 1
20651: ARRAY
20652: PPUSH
20653: CALL_OW 120
20657: GO 20612
20659: POP
20660: POP
// end ;
20661: LD_VAR 0 1
20665: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
20666: LD_INT 0
20668: PPUSH
20669: PPUSH
20670: PPUSH
20671: PPUSH
20672: PPUSH
20673: PPUSH
20674: PPUSH
20675: PPUSH
20676: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
20677: LD_INT 22
20679: PUSH
20680: LD_VAR 0 1
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PUSH
20689: LD_INT 21
20691: PUSH
20692: LD_INT 2
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PPUSH
20703: CALL_OW 69
20707: PUSH
20708: LD_VAR 0 3
20712: LESSEQUAL
20713: IFFALSE 20857
// for i = 1 to vehCount do
20715: LD_ADDR_VAR 0 10
20719: PUSH
20720: DOUBLE
20721: LD_INT 1
20723: DEC
20724: ST_TO_ADDR
20725: LD_VAR 0 3
20729: PUSH
20730: FOR_TO
20731: IFFALSE 20855
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
20733: LD_ADDR_VAR 0 12
20737: PUSH
20738: LD_VAR 0 5
20742: PUSH
20743: LD_INT 1
20745: PPUSH
20746: LD_VAR 0 5
20750: PPUSH
20751: CALL_OW 12
20755: ARRAY
20756: ST_TO_ADDR
// if randWeapon = 46 then
20757: LD_VAR 0 12
20761: PUSH
20762: LD_INT 46
20764: EQUAL
20765: IFFALSE 20810
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
20767: LD_VAR 0 2
20771: PPUSH
20772: LD_INT 24
20774: PPUSH
20775: LD_VAR 0 6
20779: PPUSH
20780: LD_VAR 0 7
20784: PUSH
20785: LD_INT 1
20787: PPUSH
20788: LD_VAR 0 7
20792: PPUSH
20793: CALL_OW 12
20797: ARRAY
20798: PPUSH
20799: LD_VAR 0 12
20803: PPUSH
20804: CALL_OW 185
20808: GO 20853
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
20810: LD_VAR 0 2
20814: PPUSH
20815: LD_VAR 0 8
20819: PPUSH
20820: LD_VAR 0 6
20824: PPUSH
20825: LD_VAR 0 7
20829: PUSH
20830: LD_INT 1
20832: PPUSH
20833: LD_VAR 0 7
20837: PPUSH
20838: CALL_OW 12
20842: ARRAY
20843: PPUSH
20844: LD_VAR 0 12
20848: PPUSH
20849: CALL_OW 185
// end ;
20853: GO 20730
20855: POP
20856: POP
// repeat wait ( 0 0$1 ) ;
20857: LD_INT 35
20859: PPUSH
20860: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
20864: LD_INT 22
20866: PUSH
20867: LD_VAR 0 1
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 21
20878: PUSH
20879: LD_INT 2
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 24
20888: PUSH
20889: LD_INT 250
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: LIST
20900: PPUSH
20901: CALL_OW 69
20905: PUSH
20906: LD_VAR 0 3
20910: GREATEREQUAL
20911: IFFALSE 20857
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
20913: LD_INT 22
20915: PUSH
20916: LD_VAR 0 1
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 21
20927: PUSH
20928: LD_INT 2
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 24
20937: PUSH
20938: LD_INT 250
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: LIST
20949: PPUSH
20950: CALL_OW 69
20954: PUSH
20955: LD_VAR 0 3
20959: GREATEREQUAL
20960: IFFALSE 21303
// begin repeat begin wait ( 0 0$1 ) ;
20962: LD_INT 35
20964: PPUSH
20965: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
20969: LD_INT 22
20971: PUSH
20972: LD_VAR 0 1
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 21
20983: PUSH
20984: LD_INT 2
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 24
20993: PUSH
20994: LD_INT 651
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: LIST
21005: PPUSH
21006: CALL_OW 69
21010: PUSH
21011: LD_INT 0
21013: GREATER
21014: IFFALSE 21242
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
21016: LD_ADDR_VAR 0 10
21020: PUSH
21021: LD_INT 22
21023: PUSH
21024: LD_VAR 0 1
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 21
21035: PUSH
21036: LD_INT 2
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 24
21045: PUSH
21046: LD_INT 651
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: LIST
21057: PPUSH
21058: CALL_OW 69
21062: PUSH
21063: FOR_IN
21064: IFFALSE 21240
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
21066: LD_ADDR_VAR 0 16
21070: PUSH
21071: LD_INT 22
21073: PUSH
21074: LD_VAR 0 4
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PPUSH
21083: CALL_OW 69
21087: PPUSH
21088: LD_VAR 0 10
21092: PPUSH
21093: CALL_OW 74
21097: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
21098: LD_ADDR_VAR 0 17
21102: PUSH
21103: LD_INT 22
21105: PUSH
21106: LD_VAR 0 4
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 2
21117: PUSH
21118: LD_INT 59
21120: PUSH
21121: EMPTY
21122: LIST
21123: PUSH
21124: LD_INT 21
21126: PUSH
21127: LD_INT 1
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: LD_INT 21
21136: PUSH
21137: LD_INT 2
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: EMPTY
21155: LIST
21156: PPUSH
21157: CALL_OW 69
21161: PPUSH
21162: LD_VAR 0 10
21166: PPUSH
21167: CALL_OW 74
21171: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
21172: LD_VAR 0 10
21176: PPUSH
21177: LD_VAR 0 16
21181: PPUSH
21182: CALL_OW 296
21186: PUSH
21187: LD_INT 8
21189: PLUS
21190: PUSH
21191: LD_VAR 0 10
21195: PPUSH
21196: LD_VAR 0 17
21200: PPUSH
21201: CALL_OW 296
21205: LESS
21206: IFFALSE 21224
// begin ComAttackUnit ( i , target1 ) ;
21208: LD_VAR 0 10
21212: PPUSH
21213: LD_VAR 0 16
21217: PPUSH
21218: CALL_OW 115
// end else
21222: GO 21238
// begin ComAttackUnit ( i , target2 ) ;
21224: LD_VAR 0 10
21228: PPUSH
21229: LD_VAR 0 17
21233: PPUSH
21234: CALL_OW 115
// end ; end ;
21238: GO 21063
21240: POP
21241: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
21242: LD_INT 22
21244: PUSH
21245: LD_VAR 0 1
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 21
21256: PUSH
21257: LD_INT 2
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PPUSH
21268: CALL_OW 69
21272: PUSH
21273: LD_INT 0
21275: EQUAL
21276: PUSH
21277: LD_INT 22
21279: PUSH
21280: LD_VAR 0 4
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: EMPTY
21290: LIST
21291: PPUSH
21292: CALL_OW 69
21296: PUSH
21297: LD_INT 0
21299: EQUAL
21300: OR
21301: IFFALSE 20962
// end ; end ;
21303: LD_VAR 0 9
21307: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
21308: LD_INT 0
21310: PPUSH
21311: PPUSH
21312: PPUSH
21313: PPUSH
// r := 100 ;
21314: LD_ADDR_VAR 0 5
21318: PUSH
21319: LD_INT 100
21321: ST_TO_ADDR
// x := 0 ;
21322: LD_ADDR_VAR 0 6
21326: PUSH
21327: LD_INT 0
21329: ST_TO_ADDR
// while ( x < n ) do
21330: LD_VAR 0 6
21334: PUSH
21335: LD_VAR 0 2
21339: LESS
21340: IFFALSE 21627
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
21342: LD_ADDR_VAR 0 4
21346: PUSH
21347: DOUBLE
21348: LD_INT 1
21350: DEC
21351: ST_TO_ADDR
21352: LD_VAR 0 1
21356: PPUSH
21357: LD_INT 0
21359: PPUSH
21360: CALL_OW 517
21364: PUSH
21365: LD_INT 1
21367: ARRAY
21368: PUSH
21369: FOR_TO
21370: IFFALSE 21623
// begin if r > 50 then
21372: LD_VAR 0 5
21376: PUSH
21377: LD_INT 50
21379: GREATER
21380: IFFALSE 21599
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
21382: LD_VAR 0 1
21386: PPUSH
21387: LD_INT 0
21389: PPUSH
21390: CALL_OW 517
21394: PUSH
21395: LD_INT 1
21397: ARRAY
21398: PUSH
21399: LD_VAR 0 4
21403: ARRAY
21404: PPUSH
21405: LD_VAR 0 1
21409: PPUSH
21410: LD_INT 0
21412: PPUSH
21413: CALL_OW 517
21417: PUSH
21418: LD_INT 2
21420: ARRAY
21421: PUSH
21422: LD_VAR 0 4
21426: ARRAY
21427: PPUSH
21428: CALL_OW 458
21432: NOT
21433: IFFALSE 21583
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
21435: LD_VAR 0 1
21439: PPUSH
21440: LD_INT 0
21442: PPUSH
21443: CALL_OW 517
21447: PUSH
21448: LD_INT 1
21450: ARRAY
21451: PUSH
21452: LD_VAR 0 4
21456: ARRAY
21457: PPUSH
21458: LD_VAR 0 1
21462: PPUSH
21463: LD_INT 0
21465: PPUSH
21466: CALL_OW 517
21470: PUSH
21471: LD_INT 2
21473: ARRAY
21474: PUSH
21475: LD_VAR 0 4
21479: ARRAY
21480: PPUSH
21481: LD_INT 5
21483: PPUSH
21484: LD_INT 0
21486: PPUSH
21487: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
21491: LD_ADDR_EXP 50
21495: PUSH
21496: LD_EXP 50
21500: PPUSH
21501: LD_INT 1
21503: PPUSH
21504: LD_VAR 0 1
21508: PPUSH
21509: LD_INT 0
21511: PPUSH
21512: CALL_OW 517
21516: PUSH
21517: LD_INT 1
21519: ARRAY
21520: PUSH
21521: LD_VAR 0 4
21525: ARRAY
21526: PUSH
21527: LD_VAR 0 1
21531: PPUSH
21532: LD_INT 0
21534: PPUSH
21535: CALL_OW 517
21539: PUSH
21540: LD_INT 2
21542: ARRAY
21543: PUSH
21544: LD_VAR 0 4
21548: ARRAY
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PPUSH
21554: CALL_OW 2
21558: ST_TO_ADDR
// r := 0 ;
21559: LD_ADDR_VAR 0 5
21563: PUSH
21564: LD_INT 0
21566: ST_TO_ADDR
// x := x + 1 ;
21567: LD_ADDR_VAR 0 6
21571: PUSH
21572: LD_VAR 0 6
21576: PUSH
21577: LD_INT 1
21579: PLUS
21580: ST_TO_ADDR
// end else
21581: GO 21597
// r := r + 35 ;
21583: LD_ADDR_VAR 0 5
21587: PUSH
21588: LD_VAR 0 5
21592: PUSH
21593: LD_INT 35
21595: PLUS
21596: ST_TO_ADDR
// end else
21597: GO 21621
// r := r + rand ( 10 , 25 ) ;
21599: LD_ADDR_VAR 0 5
21603: PUSH
21604: LD_VAR 0 5
21608: PUSH
21609: LD_INT 10
21611: PPUSH
21612: LD_INT 25
21614: PPUSH
21615: CALL_OW 12
21619: PLUS
21620: ST_TO_ADDR
// end ;
21621: GO 21369
21623: POP
21624: POP
21625: GO 21330
// end ; end_of_file
21627: LD_VAR 0 3
21631: RET
// every 0 0$1 trigger russianAI = 1 do
21632: LD_EXP 39
21636: PUSH
21637: LD_INT 1
21639: EQUAL
21640: IFFALSE 21859
21642: GO 21644
21644: DISABLE
// begin enable ;
21645: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
21646: LD_INT 3
21648: PPUSH
21649: LD_EXP 30
21653: PPUSH
21654: CALL 16110 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
21658: LD_INT 3
21660: PPUSH
21661: LD_EXP 42
21665: PPUSH
21666: CALL 16470 0 2
// if ruPossition = 1 then
21670: LD_EXP 41
21674: PUSH
21675: LD_INT 1
21677: EQUAL
21678: IFFALSE 21733
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21680: LD_INT 3
21682: PPUSH
21683: LD_INT 13
21685: PPUSH
21686: LD_INT 10
21688: PPUSH
21689: LD_INT 22
21691: PUSH
21692: LD_INT 3
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 21
21701: PUSH
21702: LD_INT 3
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 30
21711: PUSH
21712: LD_INT 8
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: LIST
21723: PPUSH
21724: CALL_OW 69
21728: PPUSH
21729: CALL 16676 0 4
// if ruPossition = 2 then
21733: LD_EXP 41
21737: PUSH
21738: LD_INT 2
21740: EQUAL
21741: IFFALSE 21796
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21743: LD_INT 3
21745: PPUSH
21746: LD_INT 14
21748: PPUSH
21749: LD_INT 11
21751: PPUSH
21752: LD_INT 22
21754: PUSH
21755: LD_INT 3
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 21
21764: PUSH
21765: LD_INT 3
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 30
21774: PUSH
21775: LD_INT 8
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: LIST
21786: PPUSH
21787: CALL_OW 69
21791: PPUSH
21792: CALL 16676 0 4
// if ruPossition = 3 then
21796: LD_EXP 41
21800: PUSH
21801: LD_INT 3
21803: EQUAL
21804: IFFALSE 21859
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21806: LD_INT 3
21808: PPUSH
21809: LD_INT 15
21811: PPUSH
21812: LD_INT 12
21814: PPUSH
21815: LD_INT 22
21817: PUSH
21818: LD_INT 3
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 21
21827: PUSH
21828: LD_INT 3
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 30
21837: PUSH
21838: LD_INT 8
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: LIST
21849: PPUSH
21850: CALL_OW 69
21854: PPUSH
21855: CALL 16676 0 4
// end ;
21859: END
// every 0 0$1 do
21860: GO 21862
21862: DISABLE
// begin enable ;
21863: ENABLE
// if ruPossition = 1 then
21864: LD_EXP 41
21868: PUSH
21869: LD_INT 1
21871: EQUAL
21872: IFFALSE 21884
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
21874: LD_INT 3
21876: PPUSH
21877: LD_INT 10
21879: PPUSH
21880: CALL 15747 0 2
// if ruPossition = 2 then
21884: LD_EXP 41
21888: PUSH
21889: LD_INT 2
21891: EQUAL
21892: IFFALSE 21904
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
21894: LD_INT 3
21896: PPUSH
21897: LD_INT 11
21899: PPUSH
21900: CALL 15747 0 2
// if ruPossition = 3 then
21904: LD_EXP 41
21908: PUSH
21909: LD_INT 3
21911: EQUAL
21912: IFFALSE 21924
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
21914: LD_INT 3
21916: PPUSH
21917: LD_INT 12
21919: PPUSH
21920: CALL 15747 0 2
// IntBazooka ( 3 , 1 ) ;
21924: LD_INT 3
21926: PPUSH
21927: LD_INT 1
21929: PPUSH
21930: CALL 14546 0 2
// IntBazooka ( 6 , 1 ) ;
21934: LD_INT 6
21936: PPUSH
21937: LD_INT 1
21939: PPUSH
21940: CALL 14546 0 2
// end ;
21944: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
21945: LD_EXP 39
21949: PUSH
21950: LD_INT 1
21952: EQUAL
21953: PUSH
21954: LD_EXP 35
21958: PPUSH
21959: CALL_OW 302
21963: AND
21964: PUSH
21965: LD_EXP 35
21969: PPUSH
21970: CALL_OW 255
21974: PUSH
21975: LD_INT 3
21977: EQUAL
21978: AND
21979: PUSH
21980: LD_INT 22
21982: PUSH
21983: LD_INT 3
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 21
21992: PUSH
21993: LD_INT 2
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 33
22002: PUSH
22003: LD_INT 3
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: LIST
22014: PPUSH
22015: CALL_OW 69
22019: PUSH
22020: LD_INT 0
22022: EQUAL
22023: AND
22024: IFFALSE 22232
22026: GO 22028
22028: DISABLE
// begin enable ;
22029: ENABLE
// if Difficulty = 1 then
22030: LD_OWVAR 67
22034: PUSH
22035: LD_INT 1
22037: EQUAL
22038: IFFALSE 22100
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22040: LD_INT 3
22042: PPUSH
22043: LD_EXP 35
22047: PPUSH
22048: LD_INT 5
22050: PPUSH
22051: LD_INT 8
22053: PPUSH
22054: CALL_OW 12
22058: PPUSH
22059: LD_INT 1
22061: PPUSH
22062: LD_INT 43
22064: PUSH
22065: LD_INT 44
22067: PUSH
22068: LD_INT 45
22070: PUSH
22071: LD_INT 46
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: PPUSH
22080: LD_INT 1
22082: PPUSH
22083: LD_INT 3
22085: PUSH
22086: LD_INT 3
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PPUSH
22093: LD_INT 22
22095: PPUSH
22096: CALL 20666 0 8
// if Difficulty = 2 then
22100: LD_OWVAR 67
22104: PUSH
22105: LD_INT 2
22107: EQUAL
22108: IFFALSE 22166
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22110: LD_INT 3
22112: PPUSH
22113: LD_EXP 35
22117: PPUSH
22118: LD_INT 6
22120: PPUSH
22121: LD_INT 8
22123: PPUSH
22124: CALL_OW 12
22128: PPUSH
22129: LD_INT 1
22131: PPUSH
22132: LD_INT 44
22134: PUSH
22135: LD_INT 45
22137: PUSH
22138: LD_INT 46
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: LIST
22145: PPUSH
22146: LD_INT 1
22148: PPUSH
22149: LD_INT 3
22151: PUSH
22152: LD_INT 3
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PPUSH
22159: LD_INT 22
22161: PPUSH
22162: CALL 20666 0 8
// if Difficulty >= 3 then
22166: LD_OWVAR 67
22170: PUSH
22171: LD_INT 3
22173: GREATEREQUAL
22174: IFFALSE 22232
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22176: LD_INT 3
22178: PPUSH
22179: LD_EXP 35
22183: PPUSH
22184: LD_INT 7
22186: PPUSH
22187: LD_INT 8
22189: PPUSH
22190: CALL_OW 12
22194: PPUSH
22195: LD_INT 1
22197: PPUSH
22198: LD_INT 44
22200: PUSH
22201: LD_INT 45
22203: PUSH
22204: LD_INT 46
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: LIST
22211: PPUSH
22212: LD_INT 1
22214: PPUSH
22215: LD_INT 3
22217: PUSH
22218: LD_INT 3
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PPUSH
22225: LD_INT 22
22227: PPUSH
22228: CALL 20666 0 8
// end ;
22232: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
22233: LD_EXP 50
22237: PUSH
22238: LD_EXP 49
22242: AND
22243: IFFALSE 22364
22245: GO 22247
22247: DISABLE
22248: LD_INT 0
22250: PPUSH
// begin enable ;
22251: ENABLE
// for i in arabianMines do
22252: LD_ADDR_VAR 0 1
22256: PUSH
22257: LD_EXP 50
22261: PUSH
22262: FOR_IN
22263: IFFALSE 22362
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
22265: LD_INT 22
22267: PUSH
22268: LD_INT 1
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 92
22277: PUSH
22278: LD_VAR 0 1
22282: PUSH
22283: LD_INT 1
22285: ARRAY
22286: PUSH
22287: LD_VAR 0 1
22291: PUSH
22292: LD_INT 2
22294: ARRAY
22295: PUSH
22296: LD_INT 3
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PPUSH
22309: CALL_OW 69
22313: IFFALSE 22360
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
22315: LD_VAR 0 1
22319: PUSH
22320: LD_INT 1
22322: ARRAY
22323: PPUSH
22324: LD_VAR 0 1
22328: PUSH
22329: LD_INT 2
22331: ARRAY
22332: PPUSH
22333: LD_INT 5
22335: PPUSH
22336: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
22340: LD_ADDR_EXP 50
22344: PUSH
22345: LD_EXP 50
22349: PPUSH
22350: LD_VAR 0 1
22354: PPUSH
22355: CALL_OW 3
22359: ST_TO_ADDR
// end ; end ;
22360: GO 22262
22362: POP
22363: POP
// end ; end_of_file
22364: PPOPN 1
22366: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
22367: LD_VAR 0 1
22371: PPUSH
22372: CALL_OW 255
22376: PUSH
22377: LD_INT 4
22379: EQUAL
22380: IFFALSE 22394
// SetBName ( building , epsilon ) ;
22382: LD_VAR 0 1
22386: PPUSH
22387: LD_STRING epsilon
22389: PPUSH
22390: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
22394: LD_VAR 0 1
22398: PPUSH
22399: CALL_OW 255
22403: PUSH
22404: LD_INT 1
22406: EQUAL
22407: PUSH
22408: LD_VAR 0 1
22412: PPUSH
22413: CALL_OW 266
22417: PUSH
22418: LD_INT 0
22420: EQUAL
22421: AND
22422: IFFALSE 22436
// SetBName ( building , epsilon ) ;
22424: LD_VAR 0 1
22428: PPUSH
22429: LD_STRING epsilon
22431: PPUSH
22432: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
22436: LD_VAR 0 1
22440: PPUSH
22441: CALL_OW 255
22445: PUSH
22446: LD_INT 3
22448: EQUAL
22449: PUSH
22450: LD_VAR 0 1
22454: PPUSH
22455: CALL_OW 266
22459: PUSH
22460: LD_INT 0
22462: EQUAL
22463: AND
22464: IFFALSE 22478
// SetBName ( building , chuikov ) ;
22466: LD_VAR 0 1
22470: PPUSH
22471: LD_STRING chuikov
22473: PPUSH
22474: CALL_OW 500
// if GetSide ( building ) = 2 then
22478: LD_VAR 0 1
22482: PPUSH
22483: CALL_OW 255
22487: PUSH
22488: LD_INT 2
22490: EQUAL
22491: IFFALSE 22547
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22493: LD_VAR 0 1
22497: PPUSH
22498: CALL_OW 266
22502: PUSH
22503: LD_INT 6
22505: EQUAL
22506: PUSH
22507: LD_VAR 0 1
22511: PPUSH
22512: CALL_OW 266
22516: PUSH
22517: LD_INT 9
22519: EQUAL
22520: OR
22521: IFFALSE 22547
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22523: LD_VAR 0 1
22527: PPUSH
22528: LD_INT 10
22530: PPUSH
22531: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22535: LD_VAR 0 1
22539: PPUSH
22540: LD_INT 11
22542: PPUSH
22543: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
22547: LD_VAR 0 1
22551: PPUSH
22552: CALL_OW 255
22556: PUSH
22557: LD_INT 3
22559: EQUAL
22560: IFFALSE 22594
// begin ruDepotConstructed := true ;
22562: LD_ADDR_EXP 57
22566: PUSH
22567: LD_INT 1
22569: ST_TO_ADDR
// if GetBType ( building ) = 2 then
22570: LD_VAR 0 1
22574: PPUSH
22575: CALL_OW 266
22579: PUSH
22580: LD_INT 2
22582: EQUAL
22583: IFFALSE 22594
// AddComUpgrade ( building ) ;
22585: LD_VAR 0 1
22589: PPUSH
22590: CALL_OW 206
// end ; end ;
22594: PPOPN 2
22596: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
22597: LD_INT 0
22599: PPUSH
22600: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
22601: LD_VAR 0 1
22605: PUSH
22606: LD_INT 22
22608: PUSH
22609: LD_INT 3
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 23
22618: PUSH
22619: LD_INT 3
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 21
22628: PUSH
22629: LD_INT 2
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: LIST
22640: PPUSH
22641: CALL_OW 69
22645: IN
22646: PUSH
22647: LD_EXP 61
22651: NOT
22652: AND
22653: IFFALSE 22684
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
22655: LD_ADDR_EXP 61
22659: PUSH
22660: LD_VAR 0 1
22664: PPUSH
22665: CALL_OW 250
22669: PUSH
22670: LD_VAR 0 1
22674: PPUSH
22675: CALL_OW 251
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: ST_TO_ADDR
// end ;
22684: PPOPN 3
22686: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
22687: LD_VAR 0 2
22691: PPUSH
22692: CALL_OW 255
22696: PUSH
22697: LD_INT 3
22699: EQUAL
22700: PUSH
22701: LD_EXP 35
22705: PPUSH
22706: CALL_OW 255
22710: PUSH
22711: LD_INT 3
22713: EQUAL
22714: AND
22715: PUSH
22716: LD_EXP 35
22720: PPUSH
22721: CALL_OW 302
22725: AND
22726: IFFALSE 22742
// ComEnterUnit ( human , ruFab ) ;
22728: LD_VAR 0 2
22732: PPUSH
22733: LD_EXP 35
22737: PPUSH
22738: CALL_OW 120
// end ;
22742: PPOPN 2
22744: END
// on BuildingComplete ( building ) do var i , engineers , sol , tmp ;
22745: LD_INT 0
22747: PPUSH
22748: PPUSH
22749: PPUSH
22750: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22751: LD_VAR 0 1
22755: PPUSH
22756: CALL_OW 255
22760: PUSH
22761: LD_INT 1
22763: EQUAL
22764: PUSH
22765: LD_EXP 65
22769: PUSH
22770: LD_INT 0
22772: EQUAL
22773: AND
22774: IFFALSE 22976
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
22776: LD_VAR 0 1
22780: PPUSH
22781: CALL_OW 266
22785: PUSH
22786: LD_INT 26
22788: EQUAL
22789: PUSH
22790: LD_VAR 0 1
22794: PPUSH
22795: CALL_OW 266
22799: PUSH
22800: LD_INT 27
22802: EQUAL
22803: OR
22804: PUSH
22805: LD_VAR 0 1
22809: PPUSH
22810: CALL_OW 266
22814: PUSH
22815: LD_INT 28
22817: EQUAL
22818: OR
22819: IFFALSE 22976
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
22821: LD_INT 22
22823: PUSH
22824: LD_INT 1
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 2
22833: PUSH
22834: LD_INT 30
22836: PUSH
22837: LD_INT 7
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 30
22846: PUSH
22847: LD_INT 8
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: LIST
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PPUSH
22863: CALL_OW 69
22867: PUSH
22868: LD_INT 0
22870: GREATER
22871: IFFALSE 22976
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22873: LD_ADDR_VAR 0 2
22877: PUSH
22878: LD_INT 22
22880: PUSH
22881: LD_INT 1
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 2
22890: PUSH
22891: LD_INT 30
22893: PUSH
22894: LD_INT 7
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 30
22903: PUSH
22904: LD_INT 8
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: LIST
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PPUSH
22920: CALL_OW 69
22924: PUSH
22925: FOR_IN
22926: IFFALSE 22974
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22928: LD_VAR 0 2
22932: PPUSH
22933: LD_INT 1
22935: PPUSH
22936: CALL_OW 268
22940: PUSH
22941: LD_INT 11
22943: EQUAL
22944: PUSH
22945: LD_VAR 0 2
22949: PPUSH
22950: LD_INT 2
22952: PPUSH
22953: CALL_OW 268
22957: PUSH
22958: LD_INT 11
22960: EQUAL
22961: OR
22962: IFFALSE 22972
// eventVar1 = 1 ;
22964: LD_ADDR_EXP 65
22968: PUSH
22969: LD_INT 1
22971: ST_TO_ADDR
22972: GO 22925
22974: POP
22975: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
22976: LD_VAR 0 1
22980: PPUSH
22981: CALL_OW 255
22985: PUSH
22986: LD_INT 3
22988: EQUAL
22989: IFFALSE 23469
// begin if GetBType ( building ) = b_depot then
22991: LD_VAR 0 1
22995: PPUSH
22996: CALL_OW 266
23000: PUSH
23001: LD_INT 0
23003: EQUAL
23004: IFFALSE 23076
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
23006: LD_VAR 0 1
23010: PPUSH
23011: CALL_OW 274
23015: PPUSH
23016: LD_INT 1
23018: PPUSH
23019: LD_INT 5000
23021: PPUSH
23022: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
23026: LD_VAR 0 1
23030: PPUSH
23031: CALL_OW 274
23035: PPUSH
23036: LD_INT 2
23038: PPUSH
23039: LD_INT 300
23041: PPUSH
23042: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
23046: LD_VAR 0 1
23050: PPUSH
23051: CALL_OW 274
23055: PPUSH
23056: LD_INT 3
23058: PPUSH
23059: LD_INT 100
23061: PPUSH
23062: CALL_OW 277
// ruDepot = building ;
23066: LD_ADDR_EXP 30
23070: PUSH
23071: LD_VAR 0 1
23075: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23076: LD_VAR 0 1
23080: PPUSH
23081: CALL_OW 266
23085: PUSH
23086: LD_INT 0
23088: EQUAL
23089: PUSH
23090: LD_VAR 0 1
23094: PPUSH
23095: CALL_OW 266
23099: PUSH
23100: LD_INT 2
23102: EQUAL
23103: OR
23104: PUSH
23105: LD_VAR 0 1
23109: PPUSH
23110: CALL_OW 266
23114: PUSH
23115: LD_INT 4
23117: EQUAL
23118: OR
23119: IFFALSE 23130
// ComUpgrade ( building ) ;
23121: LD_VAR 0 1
23125: PPUSH
23126: CALL_OW 146
// if GetBType ( building ) = b_lab then
23130: LD_VAR 0 1
23134: PPUSH
23135: CALL_OW 266
23139: PUSH
23140: LD_INT 6
23142: EQUAL
23143: IFFALSE 23346
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
23145: LD_INT 22
23147: PUSH
23148: LD_INT 3
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 30
23157: PUSH
23158: LD_INT 8
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PPUSH
23169: CALL_OW 69
23173: PUSH
23174: LD_INT 0
23176: EQUAL
23177: IFFALSE 23215
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23179: LD_VAR 0 1
23183: PPUSH
23184: LD_INT 10
23186: PPUSH
23187: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
23191: LD_VAR 0 1
23195: PPUSH
23196: LD_INT 12
23198: PPUSH
23199: CALL_OW 207
// ruLab1 = building ;
23203: LD_ADDR_EXP 31
23207: PUSH
23208: LD_VAR 0 1
23212: ST_TO_ADDR
// end else
23213: GO 23249
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
23215: LD_VAR 0 1
23219: PPUSH
23220: LD_INT 11
23222: PPUSH
23223: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
23227: LD_VAR 0 1
23231: PPUSH
23232: LD_INT 14
23234: PPUSH
23235: CALL_OW 207
// ruLab2 = building ;
23239: LD_ADDR_EXP 32
23243: PUSH
23244: LD_VAR 0 1
23248: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
23249: LD_INT 3
23251: PPUSH
23252: LD_VAR 0 1
23256: PPUSH
23257: LD_INT 3
23259: PPUSH
23260: CALL 15662 0 3
// if ruDestroyedBuildings > 0 then
23264: LD_EXP 42
23268: PUSH
23269: LD_INT 0
23271: GREATER
23272: IFFALSE 23346
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23274: LD_ADDR_EXP 42
23278: PUSH
23279: LD_EXP 42
23283: PPUSH
23284: LD_INT 1
23286: PPUSH
23287: CALL_OW 3
23291: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23292: LD_ADDR_EXP 42
23296: PUSH
23297: LD_EXP 42
23301: PPUSH
23302: LD_INT 1
23304: PPUSH
23305: CALL_OW 3
23309: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23310: LD_ADDR_EXP 42
23314: PUSH
23315: LD_EXP 42
23319: PPUSH
23320: LD_INT 1
23322: PPUSH
23323: CALL_OW 3
23327: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23328: LD_ADDR_EXP 42
23332: PUSH
23333: LD_EXP 42
23337: PPUSH
23338: LD_INT 1
23340: PPUSH
23341: CALL_OW 3
23345: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
23346: LD_VAR 0 1
23350: PPUSH
23351: CALL_OW 266
23355: PUSH
23356: LD_INT 32
23358: EQUAL
23359: IFFALSE 23396
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23361: LD_VAR 0 1
23365: PPUSH
23366: LD_INT 44
23368: PUSH
23369: LD_INT 45
23371: PUSH
23372: LD_INT 46
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 1
23382: PPUSH
23383: LD_INT 3
23385: PPUSH
23386: CALL_OW 12
23390: ARRAY
23391: PPUSH
23392: CALL_OW 208
// if GetBType ( building ) = b_turret then
23396: LD_VAR 0 1
23400: PPUSH
23401: CALL_OW 266
23405: PUSH
23406: LD_INT 33
23408: EQUAL
23409: IFFALSE 23446
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23411: LD_VAR 0 1
23415: PPUSH
23416: LD_INT 44
23418: PUSH
23419: LD_INT 45
23421: PUSH
23422: LD_INT 46
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 1
23432: PPUSH
23433: LD_INT 3
23435: PPUSH
23436: CALL_OW 12
23440: ARRAY
23441: PPUSH
23442: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
23446: LD_VAR 0 1
23450: PPUSH
23451: CALL_OW 266
23455: PUSH
23456: LD_INT 24
23458: EQUAL
23459: IFFALSE 23469
// russianAI = 1 ;
23461: LD_ADDR_EXP 39
23465: PUSH
23466: LD_INT 1
23468: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
23469: LD_VAR 0 1
23473: PPUSH
23474: CALL_OW 255
23478: PUSH
23479: LD_INT 2
23481: EQUAL
23482: IFFALSE 24361
// begin if GetBType ( building ) = arBuildingsTab [ 1 ] [ 1 ] then
23484: LD_VAR 0 1
23488: PPUSH
23489: CALL_OW 266
23493: PUSH
23494: LD_EXP 68
23498: PUSH
23499: LD_INT 1
23501: ARRAY
23502: PUSH
23503: LD_INT 1
23505: ARRAY
23506: EQUAL
23507: IFFALSE 23634
// begin arBuildingsTab := Delete ( arBuildingsTab , 1 ) ;
23509: LD_ADDR_EXP 68
23513: PUSH
23514: LD_EXP 68
23518: PPUSH
23519: LD_INT 1
23521: PPUSH
23522: CALL_OW 3
23526: ST_TO_ADDR
// if arBuildingsTab then
23527: LD_EXP 68
23531: IFFALSE 23634
// begin engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
23533: LD_ADDR_VAR 0 3
23537: PUSH
23538: LD_INT 22
23540: PUSH
23541: LD_INT 2
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 25
23550: PUSH
23551: LD_INT 2
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PPUSH
23562: CALL_OW 69
23566: ST_TO_ADDR
// if engineers then
23567: LD_VAR 0 3
23571: IFFALSE 23634
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
23573: LD_VAR 0 3
23577: PPUSH
23578: LD_EXP 68
23582: PUSH
23583: LD_INT 1
23585: ARRAY
23586: PUSH
23587: LD_INT 1
23589: ARRAY
23590: PPUSH
23591: LD_EXP 68
23595: PUSH
23596: LD_INT 1
23598: ARRAY
23599: PUSH
23600: LD_INT 2
23602: ARRAY
23603: PPUSH
23604: LD_EXP 68
23608: PUSH
23609: LD_INT 1
23611: ARRAY
23612: PUSH
23613: LD_INT 3
23615: ARRAY
23616: PPUSH
23617: LD_EXP 68
23621: PUSH
23622: LD_INT 1
23624: ARRAY
23625: PUSH
23626: LD_INT 4
23628: ARRAY
23629: PPUSH
23630: CALL_OW 205
// end ; end ; if GetBType ( building ) = b_breastwork then
23634: LD_VAR 0 1
23638: PPUSH
23639: CALL_OW 266
23643: PUSH
23644: LD_INT 31
23646: EQUAL
23647: IFFALSE 23793
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
23649: LD_ADDR_VAR 0 4
23653: PUSH
23654: LD_INT 22
23656: PUSH
23657: LD_INT 2
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 2
23666: PUSH
23667: LD_INT 25
23669: PUSH
23670: LD_INT 1
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 25
23679: PUSH
23680: LD_INT 8
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: LIST
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PPUSH
23696: CALL_OW 69
23700: PUSH
23701: LD_EXP 26
23705: DIFF
23706: ST_TO_ADDR
// if not sol then
23707: LD_VAR 0 4
23711: NOT
23712: IFFALSE 23716
// exit ;
23714: GO 24361
// for i in sol do
23716: LD_ADDR_VAR 0 2
23720: PUSH
23721: LD_VAR 0 4
23725: PUSH
23726: FOR_IN
23727: IFFALSE 23791
// if not GetTag ( i ) then
23729: LD_VAR 0 2
23733: PPUSH
23734: CALL_OW 110
23738: NOT
23739: IFFALSE 23789
// begin if IsInUnit ( i ) then
23741: LD_VAR 0 2
23745: PPUSH
23746: CALL_OW 310
23750: IFFALSE 23761
// ComExitBuilding ( i ) ;
23752: LD_VAR 0 2
23756: PPUSH
23757: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
23761: LD_VAR 0 2
23765: PPUSH
23766: LD_VAR 0 1
23770: PPUSH
23771: CALL_OW 180
// SetTag ( i , 11 ) ;
23775: LD_VAR 0 2
23779: PPUSH
23780: LD_INT 11
23782: PPUSH
23783: CALL_OW 109
// break ;
23787: GO 23791
// end ;
23789: GO 23726
23791: POP
23792: POP
// end ; if GetBType ( building ) = b_depot then
23793: LD_VAR 0 1
23797: PPUSH
23798: CALL_OW 266
23802: PUSH
23803: LD_INT 0
23805: EQUAL
23806: IFFALSE 23892
// begin arDepot = building ;
23808: LD_ADDR_EXP 43
23812: PUSH
23813: LD_VAR 0 1
23817: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
23818: LD_INT 38
23820: PUSH
23821: LD_INT 47
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PPUSH
23828: LD_INT 71
23830: PPUSH
23831: LD_INT 19
23833: PPUSH
23834: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
23838: LD_VAR 0 1
23842: PPUSH
23843: CALL_OW 274
23847: PPUSH
23848: LD_INT 1
23850: PPUSH
23851: LD_INT 500
23853: PPUSH
23854: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
23858: LD_VAR 0 1
23862: PPUSH
23863: CALL_OW 274
23867: PPUSH
23868: LD_INT 3
23870: PPUSH
23871: LD_INT 30
23873: PPUSH
23874: CALL_OW 277
// ComEnterUnit ( Dietrich , building ) ;
23878: LD_EXP 26
23882: PPUSH
23883: LD_VAR 0 1
23887: PPUSH
23888: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
23892: LD_VAR 0 1
23896: PPUSH
23897: CALL_OW 266
23901: PUSH
23902: LD_INT 6
23904: EQUAL
23905: PUSH
23906: LD_VAR 0 1
23910: PPUSH
23911: CALL_OW 266
23915: PUSH
23916: LD_INT 9
23918: EQUAL
23919: OR
23920: IFFALSE 23971
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23922: LD_VAR 0 1
23926: PPUSH
23927: LD_INT 10
23929: PPUSH
23930: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
23934: LD_VAR 0 1
23938: PPUSH
23939: LD_INT 11
23941: PPUSH
23942: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
23946: LD_INT 2
23948: PPUSH
23949: LD_VAR 0 1
23953: PPUSH
23954: LD_INT 2
23956: PPUSH
23957: CALL 15662 0 3
// arLab = building ;
23961: LD_ADDR_EXP 44
23965: PUSH
23966: LD_VAR 0 1
23970: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23971: LD_VAR 0 1
23975: PPUSH
23976: CALL_OW 266
23980: PUSH
23981: LD_INT 2
23983: EQUAL
23984: PUSH
23985: LD_VAR 0 1
23989: PPUSH
23990: CALL_OW 266
23994: PUSH
23995: LD_INT 4
23997: EQUAL
23998: OR
23999: IFFALSE 24070
// begin ComUpgrade ( building ) ;
24001: LD_VAR 0 1
24005: PPUSH
24006: CALL_OW 146
// if GetBType ( building ) = b_armoury then
24010: LD_VAR 0 1
24014: PPUSH
24015: CALL_OW 266
24019: PUSH
24020: LD_INT 4
24022: EQUAL
24023: IFFALSE 24070
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) diff Dietrich , 75 , 21 ) ;
24025: LD_INT 22
24027: PUSH
24028: LD_INT 2
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 25
24037: PUSH
24038: LD_INT 1
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PPUSH
24049: CALL_OW 69
24053: PUSH
24054: LD_EXP 26
24058: DIFF
24059: PPUSH
24060: LD_INT 75
24062: PPUSH
24063: LD_INT 21
24065: PPUSH
24066: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
24070: LD_VAR 0 1
24074: PPUSH
24075: CALL_OW 266
24079: PUSH
24080: LD_INT 27
24082: EQUAL
24083: IFFALSE 24361
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
24085: LD_INT 22
24087: PUSH
24088: LD_INT 2
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 30
24097: PUSH
24098: LD_INT 27
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PPUSH
24109: CALL_OW 69
24113: PUSH
24114: LD_INT 2
24116: EQUAL
24117: IFFALSE 24361
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
24119: LD_ADDR_VAR 0 2
24123: PUSH
24124: LD_INT 22
24126: PUSH
24127: LD_INT 2
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 21
24136: PUSH
24137: LD_INT 1
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 25
24146: PUSH
24147: LD_INT 2
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: LIST
24158: PPUSH
24159: CALL_OW 69
24163: PUSH
24164: LD_INT 1
24166: ARRAY
24167: ST_TO_ADDR
// if not i then
24168: LD_VAR 0 2
24172: NOT
24173: IFFALSE 24177
// exit ;
24175: GO 24361
// AddComMoveXY ( i , 92 , 34 ) ;
24177: LD_VAR 0 2
24181: PPUSH
24182: LD_INT 92
24184: PPUSH
24185: LD_INT 34
24187: PPUSH
24188: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24192: LD_VAR 0 2
24196: PPUSH
24197: LD_INT 35
24199: PPUSH
24200: CALL_OW 202
// AddComMoveXY ( i , 101 , 20 ) ;
24204: LD_VAR 0 2
24208: PPUSH
24209: LD_INT 101
24211: PPUSH
24212: LD_INT 20
24214: PPUSH
24215: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24219: LD_VAR 0 2
24223: PPUSH
24224: LD_INT 35
24226: PPUSH
24227: CALL_OW 202
// AddComMoveXY ( i , 115 , 30 ) ;
24231: LD_VAR 0 2
24235: PPUSH
24236: LD_INT 115
24238: PPUSH
24239: LD_INT 30
24241: PPUSH
24242: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24246: LD_VAR 0 2
24250: PPUSH
24251: LD_INT 35
24253: PPUSH
24254: CALL_OW 202
// AddComMoveXY ( i , 82 , 57 ) ;
24258: LD_VAR 0 2
24262: PPUSH
24263: LD_INT 82
24265: PPUSH
24266: LD_INT 57
24268: PPUSH
24269: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24273: LD_VAR 0 2
24277: PPUSH
24278: LD_INT 35
24280: PPUSH
24281: CALL_OW 202
// AddComMoveXY ( i , 36 , 28 ) ;
24285: LD_VAR 0 2
24289: PPUSH
24290: LD_INT 36
24292: PPUSH
24293: LD_INT 28
24295: PPUSH
24296: CALL_OW 171
// AddComWait ( i , 0 0$2 ) ;
24300: LD_VAR 0 2
24304: PPUSH
24305: LD_INT 70
24307: PPUSH
24308: CALL_OW 202
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
24312: LD_INT 22
24314: PUSH
24315: LD_INT 2
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 21
24324: PUSH
24325: LD_INT 1
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 25
24334: PUSH
24335: LD_INT 2
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: LIST
24346: PPUSH
24347: CALL_OW 69
24351: PPUSH
24352: LD_EXP 43
24356: PPUSH
24357: CALL_OW 180
// end ; end ; end ;
24361: PPOPN 5
24363: END
// on UpgradeComplete ( building ) do var i ;
24364: LD_INT 0
24366: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
24367: LD_VAR 0 1
24371: PPUSH
24372: CALL_OW 255
24376: PUSH
24377: LD_INT 1
24379: EQUAL
24380: PUSH
24381: LD_EXP 65
24385: PUSH
24386: LD_INT 0
24388: EQUAL
24389: AND
24390: IFFALSE 24588
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
24392: LD_VAR 0 1
24396: PPUSH
24397: CALL_OW 266
24401: PUSH
24402: LD_INT 7
24404: EQUAL
24405: PUSH
24406: LD_VAR 0 1
24410: PPUSH
24411: CALL_OW 266
24415: PUSH
24416: LD_INT 8
24418: EQUAL
24419: OR
24420: IFFALSE 24588
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
24422: LD_INT 22
24424: PUSH
24425: LD_INT 1
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 2
24434: PUSH
24435: LD_INT 30
24437: PUSH
24438: LD_INT 26
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 30
24447: PUSH
24448: LD_INT 27
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 30
24457: PUSH
24458: LD_INT 28
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PPUSH
24475: CALL_OW 69
24479: PUSH
24480: LD_INT 0
24482: GREATER
24483: IFFALSE 24588
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
24485: LD_ADDR_VAR 0 2
24489: PUSH
24490: LD_INT 22
24492: PUSH
24493: LD_INT 1
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 2
24502: PUSH
24503: LD_INT 30
24505: PUSH
24506: LD_INT 7
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 30
24515: PUSH
24516: LD_INT 8
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: LIST
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PPUSH
24532: CALL_OW 69
24536: PUSH
24537: FOR_IN
24538: IFFALSE 24586
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
24540: LD_VAR 0 2
24544: PPUSH
24545: LD_INT 1
24547: PPUSH
24548: CALL_OW 268
24552: PUSH
24553: LD_INT 11
24555: EQUAL
24556: PUSH
24557: LD_VAR 0 2
24561: PPUSH
24562: LD_INT 2
24564: PPUSH
24565: CALL_OW 268
24569: PUSH
24570: LD_INT 11
24572: EQUAL
24573: OR
24574: IFFALSE 24584
// eventVar1 = 1 ;
24576: LD_ADDR_EXP 65
24580: PUSH
24581: LD_INT 1
24583: ST_TO_ADDR
24584: GO 24537
24586: POP
24587: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
24588: LD_VAR 0 1
24592: PPUSH
24593: CALL_OW 255
24597: PUSH
24598: LD_INT 2
24600: EQUAL
24601: IFFALSE 24706
// begin if GetBType ( building ) = b_barracks then
24603: LD_VAR 0 1
24607: PPUSH
24608: CALL_OW 266
24612: PUSH
24613: LD_INT 5
24615: EQUAL
24616: IFFALSE 24706
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
24618: LD_ADDR_VAR 0 2
24622: PUSH
24623: LD_INT 22
24625: PUSH
24626: LD_INT 2
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 25
24635: PUSH
24636: LD_INT 1
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 3
24645: PUSH
24646: LD_INT 54
24648: PUSH
24649: EMPTY
24650: LIST
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: LIST
24660: PPUSH
24661: CALL_OW 69
24665: PUSH
24666: LD_EXP 26
24670: PUSH
24671: EMPTY
24672: LIST
24673: DIFF
24674: PUSH
24675: FOR_IN
24676: IFFALSE 24694
// ComEnterUnit ( i , building ) ;
24678: LD_VAR 0 2
24682: PPUSH
24683: LD_VAR 0 1
24687: PPUSH
24688: CALL_OW 120
24692: GO 24675
24694: POP
24695: POP
// arArm = building ;
24696: LD_ADDR_EXP 45
24700: PUSH
24701: LD_VAR 0 1
24705: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
24706: LD_VAR 0 1
24710: PPUSH
24711: CALL_OW 255
24715: PUSH
24716: LD_INT 3
24718: EQUAL
24719: IFFALSE 25192
// begin if GetBType ( building ) = b_factory then
24721: LD_VAR 0 1
24725: PPUSH
24726: CALL_OW 266
24730: PUSH
24731: LD_INT 3
24733: EQUAL
24734: IFFALSE 24801
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
24736: LD_ADDR_VAR 0 2
24740: PUSH
24741: LD_INT 22
24743: PUSH
24744: LD_INT 3
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 25
24753: PUSH
24754: LD_INT 3
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PPUSH
24765: CALL_OW 69
24769: PUSH
24770: FOR_IN
24771: IFFALSE 24789
// ComEnterUnit ( i , building ) ;
24773: LD_VAR 0 2
24777: PPUSH
24778: LD_VAR 0 1
24782: PPUSH
24783: CALL_OW 120
24787: GO 24770
24789: POP
24790: POP
// ruFab = building ;
24791: LD_ADDR_EXP 35
24795: PUSH
24796: LD_VAR 0 1
24800: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
24801: LD_INT 22
24803: PUSH
24804: LD_INT 3
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 21
24813: PUSH
24814: LD_INT 3
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 30
24823: PUSH
24824: LD_INT 8
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: LIST
24835: PPUSH
24836: CALL_OW 69
24840: PUSH
24841: LD_INT 2
24843: EQUAL
24844: IFFALSE 25052
// begin for i = 1 to 2 do
24846: LD_ADDR_VAR 0 2
24850: PUSH
24851: DOUBLE
24852: LD_INT 1
24854: DEC
24855: ST_TO_ADDR
24856: LD_INT 2
24858: PUSH
24859: FOR_TO
24860: IFFALSE 24947
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
24862: LD_INT 22
24864: PUSH
24865: LD_INT 3
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 25
24874: PUSH
24875: LD_INT 4
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PPUSH
24886: CALL_OW 69
24890: PUSH
24891: LD_VAR 0 2
24895: ARRAY
24896: PPUSH
24897: LD_INT 22
24899: PUSH
24900: LD_INT 3
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 21
24909: PUSH
24910: LD_INT 3
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 30
24919: PUSH
24920: LD_INT 8
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: LIST
24931: PPUSH
24932: CALL_OW 69
24936: PUSH
24937: LD_INT 1
24939: ARRAY
24940: PPUSH
24941: CALL_OW 120
24945: GO 24859
24947: POP
24948: POP
// for i = 3 to 4 do
24949: LD_ADDR_VAR 0 2
24953: PUSH
24954: DOUBLE
24955: LD_INT 3
24957: DEC
24958: ST_TO_ADDR
24959: LD_INT 4
24961: PUSH
24962: FOR_TO
24963: IFFALSE 25050
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
24965: LD_INT 22
24967: PUSH
24968: LD_INT 3
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 25
24977: PUSH
24978: LD_INT 4
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PPUSH
24989: CALL_OW 69
24993: PUSH
24994: LD_VAR 0 2
24998: ARRAY
24999: PPUSH
25000: LD_INT 22
25002: PUSH
25003: LD_INT 3
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 21
25012: PUSH
25013: LD_INT 3
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 30
25022: PUSH
25023: LD_INT 8
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: LIST
25034: PPUSH
25035: CALL_OW 69
25039: PUSH
25040: LD_INT 2
25042: ARRAY
25043: PPUSH
25044: CALL_OW 120
25048: GO 24962
25050: POP
25051: POP
// end ; if GetBType ( building ) = b_barracks then
25052: LD_VAR 0 1
25056: PPUSH
25057: CALL_OW 266
25061: PUSH
25062: LD_INT 5
25064: EQUAL
25065: IFFALSE 25192
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
25067: LD_ADDR_VAR 0 2
25071: PUSH
25072: LD_INT 22
25074: PUSH
25075: LD_INT 3
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 25
25084: PUSH
25085: LD_INT 1
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 3
25094: PUSH
25095: LD_INT 54
25097: PUSH
25098: EMPTY
25099: LIST
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: LIST
25109: PPUSH
25110: CALL_OW 69
25114: PUSH
25115: FOR_IN
25116: IFFALSE 25134
// ComEnterUnit ( i , building ) ;
25118: LD_VAR 0 2
25122: PPUSH
25123: LD_VAR 0 1
25127: PPUSH
25128: CALL_OW 120
25132: GO 25115
25134: POP
25135: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
25136: LD_INT 22
25138: PUSH
25139: LD_INT 3
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 30
25148: PUSH
25149: LD_INT 5
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PPUSH
25160: CALL_OW 69
25164: PUSH
25165: LD_INT 0
25167: EQUAL
25168: IFFALSE 25182
// ruArm1 = building else
25170: LD_ADDR_EXP 33
25174: PUSH
25175: LD_VAR 0 1
25179: ST_TO_ADDR
25180: GO 25192
// ruArm2 = building ;
25182: LD_ADDR_EXP 34
25186: PUSH
25187: LD_VAR 0 1
25191: ST_TO_ADDR
// end ; end ; end ;
25192: PPOPN 2
25194: END
// on EnterBuilding ( building , human ) do var rnd ;
25195: LD_INT 0
25197: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
25198: LD_VAR 0 2
25202: PPUSH
25203: CALL_OW 255
25207: PUSH
25208: LD_INT 2
25210: EQUAL
25211: PUSH
25212: LD_VAR 0 2
25216: PPUSH
25217: CALL_OW 257
25221: PUSH
25222: LD_INT 1
25224: EQUAL
25225: AND
25226: PUSH
25227: LD_VAR 0 1
25231: PUSH
25232: LD_EXP 45
25236: EQUAL
25237: AND
25238: IFFALSE 25285
// begin wait ( 0 0$1 ) ;
25240: LD_INT 35
25242: PPUSH
25243: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
25247: LD_ADDR_VAR 0 3
25251: PUSH
25252: LD_INT 1
25254: PPUSH
25255: LD_INT 100
25257: PPUSH
25258: CALL_OW 12
25262: ST_TO_ADDR
// if rnd > 50 then
25263: LD_VAR 0 3
25267: PUSH
25268: LD_INT 50
25270: GREATER
25271: IFFALSE 25285
// SetClass ( human , class_mortar ) ;
25273: LD_VAR 0 2
25277: PPUSH
25278: LD_INT 8
25280: PPUSH
25281: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
25285: LD_VAR 0 2
25289: PUSH
25290: LD_INT 22
25292: PUSH
25293: LD_INT 2
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 25
25302: PUSH
25303: LD_INT 12
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PPUSH
25314: CALL_OW 69
25318: IN
25319: IFFALSE 25369
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
25321: LD_VAR 0 1
25325: PPUSH
25326: CALL_OW 266
25330: PUSH
25331: LD_INT 0
25333: PUSH
25334: LD_INT 1
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: IN
25341: IFFALSE 25357
// SetClass ( human , class_apeman_engineer ) else
25343: LD_VAR 0 2
25347: PPUSH
25348: LD_INT 16
25350: PPUSH
25351: CALL_OW 336
25355: GO 25369
// SetClass ( human , class_apeman_soldier ) ;
25357: LD_VAR 0 2
25361: PPUSH
25362: LD_INT 15
25364: PPUSH
25365: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
25369: LD_VAR 0 2
25373: PPUSH
25374: CALL_OW 255
25378: PUSH
25379: LD_INT 3
25381: EQUAL
25382: PUSH
25383: LD_VAR 0 2
25387: PPUSH
25388: CALL_OW 257
25392: PUSH
25393: LD_INT 1
25395: EQUAL
25396: AND
25397: PUSH
25398: LD_VAR 0 1
25402: PUSH
25403: LD_EXP 33
25407: EQUAL
25408: PUSH
25409: LD_VAR 0 1
25413: PUSH
25414: LD_EXP 34
25418: EQUAL
25419: OR
25420: PUSH
25421: EMPTY
25422: LIST
25423: AND
25424: IFFALSE 25445
// begin wait ( 0 0$1 ) ;
25426: LD_INT 35
25428: PPUSH
25429: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
25433: LD_VAR 0 2
25437: PPUSH
25438: LD_INT 9
25440: PPUSH
25441: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
25445: LD_VAR 0 2
25449: PPUSH
25450: CALL_OW 255
25454: PUSH
25455: LD_INT 3
25457: EQUAL
25458: PUSH
25459: LD_VAR 0 2
25463: PPUSH
25464: CALL_OW 257
25468: PUSH
25469: LD_INT 9
25471: EQUAL
25472: AND
25473: PUSH
25474: LD_VAR 0 1
25478: PPUSH
25479: CALL_OW 266
25483: PUSH
25484: LD_INT 32
25486: EQUAL
25487: AND
25488: IFFALSE 25509
// begin wait ( 0 0$1 ) ;
25490: LD_INT 35
25492: PPUSH
25493: CALL_OW 67
// SetClass ( human , 1 ) ;
25497: LD_VAR 0 2
25501: PPUSH
25502: LD_INT 1
25504: PPUSH
25505: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
25509: LD_VAR 0 2
25513: PPUSH
25514: CALL_OW 255
25518: PUSH
25519: LD_INT 3
25521: EQUAL
25522: PUSH
25523: LD_VAR 0 2
25527: PPUSH
25528: CALL_OW 257
25532: PUSH
25533: LD_INT 3
25535: EQUAL
25536: AND
25537: PUSH
25538: LD_VAR 0 1
25542: PUSH
25543: LD_EXP 35
25547: EQUAL
25548: AND
25549: IFFALSE 25563
// SetLives ( human , 1000 ) ;
25551: LD_VAR 0 2
25555: PPUSH
25556: LD_INT 1000
25558: PPUSH
25559: CALL_OW 234
// end ;
25563: PPOPN 3
25565: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25566: LD_VAR 0 1
25570: PUSH
25571: LD_INT 1
25573: EQUAL
25574: PUSH
25575: LD_VAR 0 2
25579: PUSH
25580: LD_INT 2
25582: EQUAL
25583: AND
25584: PUSH
25585: LD_INT 1
25587: PPUSH
25588: LD_INT 2
25590: PPUSH
25591: CALL_OW 81
25595: PUSH
25596: LD_INT 1
25598: EQUAL
25599: AND
25600: IFFALSE 25621
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
25602: LD_EXP 24
25606: PPUSH
25607: LD_STRING D6b-Pow-1
25609: PPUSH
25610: CALL_OW 94
// YouLost ( Powell ) ;
25614: LD_STRING Powell
25616: PPUSH
25617: CALL_OW 104
// end ; end ;
25621: PPOPN 2
25623: END
// every 0 0$10 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
25624: LD_INT 23
25626: PPUSH
25627: LD_INT 22
25629: PUSH
25630: LD_INT 1
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 21
25639: PUSH
25640: LD_INT 3
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PPUSH
25651: CALL_OW 70
25655: PUSH
25656: LD_INT 23
25658: PPUSH
25659: LD_INT 22
25661: PUSH
25662: LD_INT 1
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 21
25671: PUSH
25672: LD_INT 2
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PPUSH
25683: CALL_OW 70
25687: OR
25688: PUSH
25689: LD_INT 1
25691: PPUSH
25692: LD_INT 2
25694: PPUSH
25695: CALL_OW 81
25699: PUSH
25700: LD_INT 1
25702: EQUAL
25703: AND
25704: IFFALSE 25837
25706: GO 25708
25708: DISABLE
// begin enable ;
25709: ENABLE
// wait ( 0 0$10 ) ;
25710: LD_INT 350
25712: PPUSH
25713: CALL_OW 67
// if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
25717: LD_INT 23
25719: PPUSH
25720: LD_INT 22
25722: PUSH
25723: LD_INT 1
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 21
25732: PUSH
25733: LD_INT 3
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PPUSH
25744: CALL_OW 70
25748: PUSH
25749: LD_INT 23
25751: PPUSH
25752: LD_INT 22
25754: PUSH
25755: LD_INT 1
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 21
25764: PUSH
25765: LD_INT 2
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PPUSH
25776: CALL_OW 70
25780: OR
25781: PUSH
25782: LD_INT 1
25784: PPUSH
25785: LD_INT 2
25787: PPUSH
25788: CALL_OW 81
25792: PUSH
25793: LD_INT 1
25795: EQUAL
25796: AND
25797: IFFALSE 25837
// begin disable ;
25799: DISABLE
// InGameOn ;
25800: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
25804: LD_INT 73
25806: PPUSH
25807: LD_INT 18
25809: PPUSH
25810: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
25814: LD_EXP 24
25818: PPUSH
25819: LD_STRING D6b-Pow-1
25821: PPUSH
25822: CALL_OW 94
// YouLost ( Powell ) ;
25826: LD_STRING Powell
25828: PPUSH
25829: CALL_OW 104
// InGameOff ;
25833: CALL_OW 9
// end ; end ;
25837: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
25838: LD_VAR 0 1
25842: PUSH
25843: LD_EXP 1
25847: EQUAL
25848: IFFALSE 25857
// YouLost ( JMM ) ;
25850: LD_STRING JMM
25852: PPUSH
25853: CALL_OW 104
// if unit = Khatam then
25857: LD_VAR 0 1
25861: PUSH
25862: LD_EXP 14
25866: EQUAL
25867: IFFALSE 25877
// KhatamStatus = 0 ;
25869: LD_ADDR_EXP 53
25873: PUSH
25874: LD_INT 0
25876: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
25877: LD_VAR 0 1
25881: PPUSH
25882: CALL_OW 255
25886: PUSH
25887: LD_INT 3
25889: EQUAL
25890: PUSH
25891: LD_VAR 0 1
25895: PPUSH
25896: CALL_OW 247
25900: PUSH
25901: LD_INT 3
25903: EQUAL
25904: AND
25905: IFFALSE 26597
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
25907: LD_VAR 0 1
25911: PPUSH
25912: CALL_OW 266
25916: PUSH
25917: LD_INT 31
25919: EQUAL
25920: PUSH
25921: LD_VAR 0 1
25925: PPUSH
25926: CALL_OW 266
25930: PUSH
25931: LD_INT 32
25933: EQUAL
25934: OR
25935: PUSH
25936: LD_VAR 0 1
25940: PPUSH
25941: CALL_OW 266
25945: PUSH
25946: LD_INT 36
25948: EQUAL
25949: OR
25950: PUSH
25951: LD_VAR 0 1
25955: PPUSH
25956: CALL_OW 266
25960: PUSH
25961: LD_INT 0
25963: EQUAL
25964: OR
25965: PUSH
25966: LD_VAR 0 1
25970: PPUSH
25971: CALL_OW 266
25975: PUSH
25976: LD_INT 24
25978: EQUAL
25979: OR
25980: PUSH
25981: LD_VAR 0 1
25985: PPUSH
25986: CALL_OW 266
25990: PUSH
25991: LD_INT 17
25993: EQUAL
25994: OR
25995: PUSH
25996: LD_VAR 0 1
26000: PPUSH
26001: CALL_OW 266
26005: PUSH
26006: LD_INT 25
26008: EQUAL
26009: OR
26010: PUSH
26011: LD_VAR 0 1
26015: PPUSH
26016: CALL_OW 266
26020: PUSH
26021: LD_INT 19
26023: EQUAL
26024: OR
26025: PUSH
26026: LD_VAR 0 1
26030: PPUSH
26031: CALL_OW 266
26035: PUSH
26036: LD_INT 20
26038: EQUAL
26039: OR
26040: PUSH
26041: LD_VAR 0 1
26045: PPUSH
26046: CALL_OW 266
26050: PUSH
26051: LD_INT 18
26053: EQUAL
26054: OR
26055: PUSH
26056: LD_VAR 0 1
26060: PPUSH
26061: CALL_OW 266
26065: PUSH
26066: LD_INT 21
26068: EQUAL
26069: OR
26070: PUSH
26071: LD_VAR 0 1
26075: PPUSH
26076: CALL_OW 266
26080: PUSH
26081: LD_INT 23
26083: EQUAL
26084: OR
26085: PUSH
26086: LD_VAR 0 1
26090: PPUSH
26091: CALL_OW 266
26095: PUSH
26096: LD_INT 16
26098: EQUAL
26099: OR
26100: PUSH
26101: LD_VAR 0 1
26105: PPUSH
26106: CALL_OW 266
26110: PUSH
26111: LD_INT 6
26113: EQUAL
26114: OR
26115: PUSH
26116: LD_VAR 0 1
26120: PPUSH
26121: CALL_OW 266
26125: PUSH
26126: LD_INT 29
26128: EQUAL
26129: OR
26130: PUSH
26131: LD_VAR 0 1
26135: PPUSH
26136: CALL_OW 266
26140: PUSH
26141: LD_INT 26
26143: EQUAL
26144: OR
26145: PUSH
26146: LD_VAR 0 1
26150: PPUSH
26151: CALL_OW 266
26155: PUSH
26156: LD_INT 30
26158: EQUAL
26159: OR
26160: PUSH
26161: LD_VAR 0 1
26165: PPUSH
26166: CALL_OW 266
26170: PUSH
26171: LD_INT 28
26173: EQUAL
26174: OR
26175: PUSH
26176: LD_VAR 0 1
26180: PPUSH
26181: CALL_OW 266
26185: PUSH
26186: LD_INT 27
26188: EQUAL
26189: OR
26190: PUSH
26191: LD_VAR 0 1
26195: PPUSH
26196: CALL_OW 266
26200: PUSH
26201: LD_INT 33
26203: EQUAL
26204: OR
26205: PUSH
26206: LD_VAR 0 1
26210: PPUSH
26211: CALL_OW 266
26215: PUSH
26216: LD_INT 2
26218: EQUAL
26219: OR
26220: PUSH
26221: LD_VAR 0 1
26225: PPUSH
26226: CALL_OW 266
26230: PUSH
26231: LD_INT 4
26233: EQUAL
26234: OR
26235: IFFALSE 26321
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
26237: LD_ADDR_EXP 42
26241: PUSH
26242: LD_EXP 42
26246: PUSH
26247: LD_VAR 0 1
26251: PPUSH
26252: CALL_OW 266
26256: ADD
26257: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26258: LD_ADDR_EXP 42
26262: PUSH
26263: LD_EXP 42
26267: PUSH
26268: LD_VAR 0 1
26272: PPUSH
26273: CALL_OW 250
26277: ADD
26278: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26279: LD_ADDR_EXP 42
26283: PUSH
26284: LD_EXP 42
26288: PUSH
26289: LD_VAR 0 1
26293: PPUSH
26294: CALL_OW 251
26298: ADD
26299: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26300: LD_ADDR_EXP 42
26304: PUSH
26305: LD_EXP 42
26309: PUSH
26310: LD_VAR 0 1
26314: PPUSH
26315: CALL_OW 254
26319: ADD
26320: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
26321: LD_VAR 0 1
26325: PPUSH
26326: CALL_OW 266
26330: PUSH
26331: LD_INT 1
26333: EQUAL
26334: IFFALSE 26413
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
26336: LD_ADDR_EXP 42
26340: PUSH
26341: LD_EXP 42
26345: PUSH
26346: LD_INT 0
26348: ADD
26349: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26350: LD_ADDR_EXP 42
26354: PUSH
26355: LD_EXP 42
26359: PUSH
26360: LD_VAR 0 1
26364: PPUSH
26365: CALL_OW 250
26369: ADD
26370: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26371: LD_ADDR_EXP 42
26375: PUSH
26376: LD_EXP 42
26380: PUSH
26381: LD_VAR 0 1
26385: PPUSH
26386: CALL_OW 251
26390: ADD
26391: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26392: LD_ADDR_EXP 42
26396: PUSH
26397: LD_EXP 42
26401: PUSH
26402: LD_VAR 0 1
26406: PPUSH
26407: CALL_OW 254
26411: ADD
26412: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
26413: LD_VAR 0 1
26417: PPUSH
26418: CALL_OW 266
26422: PUSH
26423: LD_INT 3
26425: EQUAL
26426: IFFALSE 26505
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
26428: LD_ADDR_EXP 42
26432: PUSH
26433: LD_EXP 42
26437: PUSH
26438: LD_INT 2
26440: ADD
26441: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26442: LD_ADDR_EXP 42
26446: PUSH
26447: LD_EXP 42
26451: PUSH
26452: LD_VAR 0 1
26456: PPUSH
26457: CALL_OW 250
26461: ADD
26462: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26463: LD_ADDR_EXP 42
26467: PUSH
26468: LD_EXP 42
26472: PUSH
26473: LD_VAR 0 1
26477: PPUSH
26478: CALL_OW 251
26482: ADD
26483: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26484: LD_ADDR_EXP 42
26488: PUSH
26489: LD_EXP 42
26493: PUSH
26494: LD_VAR 0 1
26498: PPUSH
26499: CALL_OW 254
26503: ADD
26504: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
26505: LD_VAR 0 1
26509: PPUSH
26510: CALL_OW 266
26514: PUSH
26515: LD_INT 5
26517: EQUAL
26518: IFFALSE 26597
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
26520: LD_ADDR_EXP 42
26524: PUSH
26525: LD_EXP 42
26529: PUSH
26530: LD_INT 4
26532: ADD
26533: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26534: LD_ADDR_EXP 42
26538: PUSH
26539: LD_EXP 42
26543: PUSH
26544: LD_VAR 0 1
26548: PPUSH
26549: CALL_OW 250
26553: ADD
26554: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26555: LD_ADDR_EXP 42
26559: PUSH
26560: LD_EXP 42
26564: PUSH
26565: LD_VAR 0 1
26569: PPUSH
26570: CALL_OW 251
26574: ADD
26575: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26576: LD_ADDR_EXP 42
26580: PUSH
26581: LD_EXP 42
26585: PUSH
26586: LD_VAR 0 1
26590: PPUSH
26591: CALL_OW 254
26595: ADD
26596: ST_TO_ADDR
// end ; end ; if ruMech and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
26597: LD_EXP 51
26601: PUSH
26602: LD_VAR 0 1
26606: PPUSH
26607: CALL_OW 257
26611: PUSH
26612: LD_INT 3
26614: EQUAL
26615: AND
26616: PUSH
26617: LD_VAR 0 1
26621: PPUSH
26622: CALL_OW 255
26626: PUSH
26627: LD_INT 3
26629: EQUAL
26630: AND
26631: PUSH
26632: LD_EXP 35
26636: PPUSH
26637: CALL_OW 302
26641: AND
26642: PUSH
26643: LD_EXP 35
26647: PPUSH
26648: CALL_OW 255
26652: PUSH
26653: LD_INT 3
26655: EQUAL
26656: AND
26657: IFFALSE 26741
// begin ruMech := ruMech - 1 ;
26659: LD_ADDR_EXP 51
26663: PUSH
26664: LD_EXP 51
26668: PUSH
26669: LD_INT 1
26671: MINUS
26672: ST_TO_ADDR
// uc_side = 3 ;
26673: LD_ADDR_OWVAR 20
26677: PUSH
26678: LD_INT 3
26680: ST_TO_ADDR
// uc_nation = 3 ;
26681: LD_ADDR_OWVAR 21
26685: PUSH
26686: LD_INT 3
26688: ST_TO_ADDR
// hc_gallery :=  ;
26689: LD_ADDR_OWVAR 33
26693: PUSH
26694: LD_STRING 
26696: ST_TO_ADDR
// hc_name :=  ;
26697: LD_ADDR_OWVAR 26
26701: PUSH
26702: LD_STRING 
26704: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
26705: LD_INT 0
26707: PPUSH
26708: LD_EXP 36
26712: PPUSH
26713: LD_EXP 37
26717: PPUSH
26718: CALL_OW 12
26722: PPUSH
26723: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
26727: CALL_OW 44
26731: PPUSH
26732: LD_EXP 35
26736: PPUSH
26737: CALL_OW 52
// end ; end ;
26741: PPOPN 1
26743: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
26744: LD_ADDR_OWVAR 57
26748: PUSH
26749: LD_INT 0
26751: ST_TO_ADDR
// fastEnd = 1 ;
26752: LD_ADDR_EXP 63
26756: PUSH
26757: LD_INT 1
26759: ST_TO_ADDR
// FinishMission ;
26760: CALL 27928 0 0
// end ;
26764: PPOPN 1
26766: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
26767: LD_VAR 0 1
26771: PPUSH
26772: CALL 43732 0 1
// end ; end_of_file
26776: PPOPN 1
26778: END
// export function CreateNature ; var i , un ; begin
26779: LD_INT 0
26781: PPUSH
26782: PPUSH
26783: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
26784: LD_ADDR_VAR 0 2
26788: PUSH
26789: DOUBLE
26790: LD_INT 1
26792: DEC
26793: ST_TO_ADDR
26794: LD_OWVAR 67
26798: PUSH
26799: LD_INT 1
26801: PPUSH
26802: LD_INT 5
26804: PPUSH
26805: CALL_OW 12
26809: PLUS
26810: PUSH
26811: FOR_TO
26812: IFFALSE 26957
// begin hc_sex = sex_male ;
26814: LD_ADDR_OWVAR 27
26818: PUSH
26819: LD_INT 1
26821: ST_TO_ADDR
// uc_side = 0 ;
26822: LD_ADDR_OWVAR 20
26826: PUSH
26827: LD_INT 0
26829: ST_TO_ADDR
// uc_nation = nation_nature ;
26830: LD_ADDR_OWVAR 21
26834: PUSH
26835: LD_INT 0
26837: ST_TO_ADDR
// hc_class = class_apeman ;
26838: LD_ADDR_OWVAR 28
26842: PUSH
26843: LD_INT 12
26845: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
26846: LD_ADDR_OWVAR 31
26850: PUSH
26851: LD_INT 2
26853: PPUSH
26854: LD_INT 7
26856: PPUSH
26857: CALL_OW 12
26861: PUSH
26862: LD_OWVAR 67
26866: PLUS
26867: PUSH
26868: LD_INT 2
26870: PPUSH
26871: LD_INT 10
26873: PPUSH
26874: CALL_OW 12
26878: PUSH
26879: LD_INT 2
26881: PPUSH
26882: LD_INT 10
26884: PPUSH
26885: CALL_OW 12
26889: PUSH
26890: LD_INT 2
26892: PPUSH
26893: LD_INT 10
26895: PPUSH
26896: CALL_OW 12
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
26907: LD_ADDR_OWVAR 35
26911: PUSH
26912: LD_INT 5
26914: NEG
26915: PPUSH
26916: LD_INT 5
26918: PPUSH
26919: CALL_OW 12
26923: PUSH
26924: LD_OWVAR 67
26928: MUL
26929: ST_TO_ADDR
// un = CreateHuman ;
26930: LD_ADDR_VAR 0 3
26934: PUSH
26935: CALL_OW 44
26939: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
26940: LD_VAR 0 3
26944: PPUSH
26945: LD_INT 5
26947: PPUSH
26948: LD_INT 0
26950: PPUSH
26951: CALL_OW 49
// end ;
26955: GO 26811
26957: POP
26958: POP
// for i = 1 to Difficulty + 2 do
26959: LD_ADDR_VAR 0 2
26963: PUSH
26964: DOUBLE
26965: LD_INT 1
26967: DEC
26968: ST_TO_ADDR
26969: LD_OWVAR 67
26973: PUSH
26974: LD_INT 2
26976: PLUS
26977: PUSH
26978: FOR_TO
26979: IFFALSE 27088
// begin hc_sex = sex_male ;
26981: LD_ADDR_OWVAR 27
26985: PUSH
26986: LD_INT 1
26988: ST_TO_ADDR
// uc_side = 0 ;
26989: LD_ADDR_OWVAR 20
26993: PUSH
26994: LD_INT 0
26996: ST_TO_ADDR
// uc_nation = nation_nature ;
26997: LD_ADDR_OWVAR 21
27001: PUSH
27002: LD_INT 0
27004: ST_TO_ADDR
// hc_class = class_tiger ;
27005: LD_ADDR_OWVAR 28
27009: PUSH
27010: LD_INT 14
27012: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27013: LD_ADDR_OWVAR 31
27017: PUSH
27018: LD_EXP 37
27022: PUSH
27023: LD_INT 0
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: LD_INT 0
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27038: LD_ADDR_OWVAR 35
27042: PUSH
27043: LD_INT 5
27045: NEG
27046: PPUSH
27047: LD_INT 5
27049: PPUSH
27050: CALL_OW 12
27054: PUSH
27055: LD_OWVAR 67
27059: MUL
27060: ST_TO_ADDR
// un = CreateHuman ;
27061: LD_ADDR_VAR 0 3
27065: PUSH
27066: CALL_OW 44
27070: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27071: LD_VAR 0 3
27075: PPUSH
27076: LD_INT 6
27078: PPUSH
27079: LD_INT 0
27081: PPUSH
27082: CALL_OW 49
// end ;
27086: GO 26978
27088: POP
27089: POP
// for i = 1 to rand ( 3 , 4 ) do
27090: LD_ADDR_VAR 0 2
27094: PUSH
27095: DOUBLE
27096: LD_INT 1
27098: DEC
27099: ST_TO_ADDR
27100: LD_INT 3
27102: PPUSH
27103: LD_INT 4
27105: PPUSH
27106: CALL_OW 12
27110: PUSH
27111: FOR_TO
27112: IFFALSE 27206
// begin hc_sex = sex_male ;
27114: LD_ADDR_OWVAR 27
27118: PUSH
27119: LD_INT 1
27121: ST_TO_ADDR
// uc_side = 0 ;
27122: LD_ADDR_OWVAR 20
27126: PUSH
27127: LD_INT 0
27129: ST_TO_ADDR
// uc_nation = nation_nature ;
27130: LD_ADDR_OWVAR 21
27134: PUSH
27135: LD_INT 0
27137: ST_TO_ADDR
// hc_class = 18 ;
27138: LD_ADDR_OWVAR 28
27142: PUSH
27143: LD_INT 18
27145: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27146: LD_ADDR_OWVAR 31
27150: PUSH
27151: LD_EXP 37
27155: PUSH
27156: LD_INT 0
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: LD_INT 0
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: ST_TO_ADDR
// hc_agressivity = 0 ;
27171: LD_ADDR_OWVAR 35
27175: PUSH
27176: LD_INT 0
27178: ST_TO_ADDR
// un = CreateHuman ;
27179: LD_ADDR_VAR 0 3
27183: PUSH
27184: CALL_OW 44
27188: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27189: LD_VAR 0 3
27193: PPUSH
27194: LD_INT 6
27196: PPUSH
27197: LD_INT 0
27199: PPUSH
27200: CALL_OW 49
// end ;
27204: GO 27111
27206: POP
27207: POP
// end ; end_of_file
27208: LD_VAR 0 1
27212: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
27213: LD_EXP 46
27217: PUSH
27218: LD_INT 1
27220: EQUAL
27221: IFFALSE 27309
27223: GO 27225
27225: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
27226: LD_INT 7
27228: PPUSH
27229: LD_INT 5
27231: PPUSH
27232: LD_INT 4
27234: PUSH
27235: LD_INT 5
27237: PUSH
27238: LD_INT 6
27240: PUSH
27241: LD_INT 6
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: PUSH
27250: LD_OWVAR 67
27254: ARRAY
27255: PPUSH
27256: LD_EXP 36
27260: PPUSH
27261: LD_EXP 37
27265: PPUSH
27266: CALL_OW 12
27270: PPUSH
27271: LD_INT 2
27273: PPUSH
27274: LD_INT 1
27276: PPUSH
27277: LD_INT 1
27279: PPUSH
27280: EMPTY
27281: PPUSH
27282: LD_INT 25
27284: PUSH
27285: LD_INT 26
27287: PUSH
27288: LD_INT 27
27290: PUSH
27291: LD_INT 28
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: PPUSH
27300: EMPTY
27301: PPUSH
27302: LD_INT 1
27304: PPUSH
27305: CALL 17224 0 11
27309: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27310: LD_EXP 46
27314: PUSH
27315: LD_INT 1
27317: EQUAL
27318: IFFALSE 27410
27320: GO 27322
27322: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 , 9 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
27323: LD_INT 5
27325: PPUSH
27326: LD_INT 2
27328: PPUSH
27329: LD_INT 5
27331: PUSH
27332: LD_INT 6
27334: PUSH
27335: LD_INT 8
27337: PUSH
27338: LD_INT 9
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: PUSH
27347: LD_OWVAR 67
27351: ARRAY
27352: PPUSH
27353: LD_INT 0
27355: PPUSH
27356: LD_INT 0
27358: PPUSH
27359: LD_INT 2
27361: PUSH
27362: LD_INT 4
27364: PUSH
27365: LD_INT 5
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: LIST
27372: PUSH
27373: LD_OWVAR 67
27377: ARRAY
27378: PPUSH
27379: LD_INT 0
27381: PPUSH
27382: LD_EXP 36
27386: PPUSH
27387: LD_EXP 37
27391: PPUSH
27392: CALL_OW 12
27396: PPUSH
27397: LD_INT 7
27399: PPUSH
27400: LD_INT 9
27402: PPUSH
27403: LD_INT 1
27405: PPUSH
27406: CALL 18928 0 11
27410: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27411: LD_EXP 46
27415: PUSH
27416: LD_INT 1
27418: EQUAL
27419: IFFALSE 27428
27421: GO 27423
27423: DISABLE
// PrepareArabianSheik ;
27424: CALL 4713 0 0
27428: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27429: LD_EXP 29
27433: PUSH
27434: LD_EXP 64
27438: PUSH
27439: LD_INT 1
27441: EQUAL
27442: AND
27443: IFFALSE 27512
27445: GO 27447
27447: DISABLE
// begin enable ;
27448: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
27449: LD_INT 6
27451: PPUSH
27452: LD_INT 3
27454: PPUSH
27455: LD_EXP 60
27459: PPUSH
27460: LD_INT 0
27462: PPUSH
27463: LD_OWVAR 67
27467: PPUSH
27468: LD_INT 0
27470: PPUSH
27471: LD_EXP 60
27475: PUSH
27476: LD_INT 3
27478: DIV
27479: PUSH
27480: LD_INT 1
27482: PLUS
27483: PPUSH
27484: LD_EXP 36
27488: PPUSH
27489: LD_EXP 37
27493: PPUSH
27494: CALL_OW 12
27498: PPUSH
27499: LD_INT 17
27501: PPUSH
27502: LD_INT 18
27504: PPUSH
27505: LD_INT 1
27507: PPUSH
27508: CALL 18928 0 11
// end ;
27512: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27513: LD_EXP 29
27517: PUSH
27518: LD_EXP 64
27522: PUSH
27523: LD_INT 1
27525: EQUAL
27526: AND
27527: IFFALSE 27604
27529: GO 27531
27531: DISABLE
// begin enable ;
27532: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
27533: LD_INT 17
27535: PPUSH
27536: LD_INT 6
27538: PPUSH
27539: LD_EXP 59
27543: PPUSH
27544: LD_EXP 36
27548: PPUSH
27549: LD_EXP 37
27553: PPUSH
27554: CALL_OW 12
27558: PPUSH
27559: LD_INT 3
27561: PPUSH
27562: LD_INT 1
27564: PPUSH
27565: LD_INT 3
27567: PUSH
27568: LD_INT 3
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PPUSH
27575: LD_INT 43
27577: PUSH
27578: LD_INT 44
27580: PUSH
27581: LD_INT 45
27583: PUSH
27584: LD_INT 46
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: PPUSH
27593: EMPTY
27594: PPUSH
27595: EMPTY
27596: PPUSH
27597: LD_INT 1
27599: PPUSH
27600: CALL 17224 0 11
// end ;
27604: END
// every 10 10$00 trigger joinEpsilon do
27605: LD_EXP 29
27609: IFFALSE 27663
27611: GO 27613
27613: DISABLE
// begin enable ;
27614: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
27615: LD_ADDR_EXP 59
27619: PUSH
27620: LD_EXP 59
27624: PUSH
27625: LD_INT 1
27627: PPUSH
27628: LD_OWVAR 67
27632: PPUSH
27633: CALL_OW 12
27637: PLUS
27638: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
27639: LD_ADDR_EXP 60
27643: PUSH
27644: LD_EXP 60
27648: PUSH
27649: LD_INT 1
27651: PPUSH
27652: LD_OWVAR 67
27656: PPUSH
27657: CALL_OW 12
27661: PLUS
27662: ST_TO_ADDR
// end ;
27663: END
// every 21 21$0 trigger attackAvalaible = 1 do
27664: LD_EXP 64
27668: PUSH
27669: LD_INT 1
27671: EQUAL
27672: IFFALSE 27685
27674: GO 27676
27676: DISABLE
// attackAvalaible = 0 ; end_of_file
27677: LD_ADDR_EXP 64
27681: PUSH
27682: LD_INT 0
27684: ST_TO_ADDR
27685: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
27686: LD_INT 54
27688: PPUSH
27689: LD_INT 1
27691: PPUSH
27692: CALL_OW 321
27696: PUSH
27697: LD_INT 2
27699: EQUAL
27700: PUSH
27701: LD_INT 55
27703: PPUSH
27704: LD_INT 1
27706: PPUSH
27707: CALL_OW 321
27711: PUSH
27712: LD_INT 2
27714: EQUAL
27715: AND
27716: PUSH
27717: LD_INT 21
27719: PPUSH
27720: LD_INT 1
27722: PPUSH
27723: CALL_OW 321
27727: PUSH
27728: LD_INT 2
27730: EQUAL
27731: AND
27732: PUSH
27733: LD_INT 22
27735: PPUSH
27736: LD_INT 1
27738: PPUSH
27739: CALL_OW 321
27743: PUSH
27744: LD_INT 2
27746: EQUAL
27747: AND
27748: PUSH
27749: LD_INT 12
27751: PPUSH
27752: LD_INT 1
27754: PPUSH
27755: CALL_OW 321
27759: PUSH
27760: LD_INT 1
27762: EQUAL
27763: PUSH
27764: LD_INT 32
27766: PPUSH
27767: LD_INT 1
27769: PPUSH
27770: CALL_OW 321
27774: PUSH
27775: LD_INT 1
27777: EQUAL
27778: OR
27779: PUSH
27780: EMPTY
27781: LIST
27782: AND
27783: PUSH
27784: LD_EXP 48
27788: PUSH
27789: LD_INT 1
27791: EQUAL
27792: AND
27793: PUSH
27794: LD_INT 22
27796: PUSH
27797: LD_INT 3
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 21
27806: PUSH
27807: LD_INT 1
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PPUSH
27818: CALL_OW 69
27822: PUSH
27823: LD_INT 0
27825: EQUAL
27826: AND
27827: IFFALSE 27883
27829: GO 27831
27831: DISABLE
// begin case query ( QEndMission ) of 1 :
27832: LD_STRING QEndMission
27834: PPUSH
27835: CALL_OW 97
27839: PUSH
27840: LD_INT 1
27842: DOUBLE
27843: EQUAL
27844: IFTRUE 27848
27846: GO 27859
27848: POP
// begin end_the_mission_allowed = true ;
27849: LD_ADDR_OWVAR 57
27853: PUSH
27854: LD_INT 1
27856: ST_TO_ADDR
// end ; 2 :
27857: GO 27883
27859: LD_INT 2
27861: DOUBLE
27862: EQUAL
27863: IFTRUE 27867
27865: GO 27882
27867: POP
// begin fastEnd = 1 ;
27868: LD_ADDR_EXP 63
27872: PUSH
27873: LD_INT 1
27875: ST_TO_ADDR
// FinishMission ;
27876: CALL 27928 0 0
// end ; end ;
27880: GO 27883
27882: POP
// end ;
27883: END
// every 0 0$1 trigger spawnRussians and not ruDepotConstructed and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
27884: LD_EXP 58
27888: PUSH
27889: LD_EXP 57
27893: NOT
27894: AND
27895: PUSH
27896: LD_INT 22
27898: PUSH
27899: LD_INT 3
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PPUSH
27906: CALL_OW 69
27910: PUSH
27911: LD_INT 0
27913: EQUAL
27914: AND
27915: IFFALSE 27927
27917: GO 27919
27919: DISABLE
// SetAchievement ( ACH_TACT ) ;
27920: LD_STRING ACH_TACT
27922: PPUSH
27923: CALL_OW 543
27927: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
27928: LD_INT 0
27930: PPUSH
27931: PPUSH
27932: PPUSH
27933: PPUSH
// if not snipersTrained then
27934: LD_EXP 62
27938: NOT
27939: IFFALSE 27948
// SetAchievement ( ACH_SNIPER ) ;
27941: LD_STRING ACH_SNIPER
27943: PPUSH
27944: CALL_OW 543
// m1 := false ;
27948: LD_ADDR_VAR 0 2
27952: PUSH
27953: LD_INT 0
27955: ST_TO_ADDR
// m2 := false ;
27956: LD_ADDR_VAR 0 3
27960: PUSH
27961: LD_INT 0
27963: ST_TO_ADDR
// m3 := false ;
27964: LD_ADDR_VAR 0 4
27968: PUSH
27969: LD_INT 0
27971: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
27972: LD_EXP 53
27976: PPUSH
27977: LD_STRING 10_KhatamStatus_1
27979: PPUSH
27980: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
27984: LD_EXP 52
27988: PPUSH
27989: LD_STRING 10_GensherEscape_1
27991: PPUSH
27992: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
27996: LD_INT 12
27998: PPUSH
27999: LD_INT 1
28001: PPUSH
28002: CALL_OW 321
28006: PUSH
28007: LD_INT 2
28009: EQUAL
28010: IFFALSE 28032
// begin AddMedal ( sights , 1 ) ;
28012: LD_STRING sights
28014: PPUSH
28015: LD_INT 1
28017: PPUSH
28018: CALL_OW 101
// m1 := true ;
28022: LD_ADDR_VAR 0 2
28026: PUSH
28027: LD_INT 1
28029: ST_TO_ADDR
// end else
28030: GO 28043
// begin AddMedal ( sights , - 1 ) ;
28032: LD_STRING sights
28034: PPUSH
28035: LD_INT 1
28037: NEG
28038: PPUSH
28039: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
28043: LD_INT 32
28045: PPUSH
28046: LD_INT 1
28048: PPUSH
28049: CALL_OW 321
28053: PUSH
28054: LD_INT 2
28056: EQUAL
28057: IFFALSE 28079
// begin AddMedal ( computers , 1 ) ;
28059: LD_STRING computers
28061: PPUSH
28062: LD_INT 1
28064: PPUSH
28065: CALL_OW 101
// m2 := true ;
28069: LD_ADDR_VAR 0 3
28073: PUSH
28074: LD_INT 1
28076: ST_TO_ADDR
// end else
28077: GO 28090
// begin AddMedal ( computers , - 1 ) ;
28079: LD_STRING computers
28081: PPUSH
28082: LD_INT 1
28084: NEG
28085: PPUSH
28086: CALL_OW 101
// end ; if arabianEscape = 0 then
28090: LD_EXP 47
28094: PUSH
28095: LD_INT 0
28097: EQUAL
28098: IFFALSE 28130
// begin AddMedal ( renegades , 2 ) ;
28100: LD_STRING renegades
28102: PPUSH
28103: LD_INT 2
28105: PPUSH
28106: CALL_OW 101
// m3 := true ;
28110: LD_ADDR_VAR 0 4
28114: PUSH
28115: LD_INT 1
28117: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
28118: LD_INT 0
28120: PPUSH
28121: LD_STRING 10_ScientistsEscape_1
28123: PPUSH
28124: CALL_OW 39
// end else
28128: GO 28141
// begin AddMedal ( renegades , - 1 ) ;
28130: LD_STRING renegades
28132: PPUSH
28133: LD_INT 1
28135: NEG
28136: PPUSH
28137: CALL_OW 101
// end ; SaveEpsilonBase ;
28141: CALL 28927 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
28145: LD_VAR 0 2
28149: PUSH
28150: LD_VAR 0 3
28154: AND
28155: PUSH
28156: LD_VAR 0 4
28160: AND
28161: PUSH
28162: LD_OWVAR 67
28166: PUSH
28167: LD_INT 3
28169: GREATEREQUAL
28170: AND
28171: IFFALSE 28183
// SetAchievementEX ( ACH_AMER , 10 ) ;
28173: LD_STRING ACH_AMER
28175: PPUSH
28176: LD_INT 10
28178: PPUSH
28179: CALL_OW 564
// if tick <= 40 40$00 then
28183: LD_OWVAR 1
28187: PUSH
28188: LD_INT 84000
28190: LESSEQUAL
28191: IFFALSE 28207
// begin wait ( 3 ) ;
28193: LD_INT 3
28195: PPUSH
28196: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
28200: LD_STRING ACH_ASPEED_10
28202: PPUSH
28203: CALL_OW 543
// end ; GiveMedals ( Main ) ;
28207: LD_STRING Main
28209: PPUSH
28210: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
28214: LD_INT 22
28216: PUSH
28217: LD_INT 1
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 23
28226: PUSH
28227: LD_INT 1
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 21
28236: PUSH
28237: LD_INT 1
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 2
28246: PUSH
28247: LD_INT 25
28249: PUSH
28250: LD_INT 1
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 25
28259: PUSH
28260: LD_INT 2
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 25
28269: PUSH
28270: LD_INT 3
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 25
28279: PUSH
28280: LD_INT 4
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 25
28289: PUSH
28290: LD_INT 5
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 25
28299: PUSH
28300: LD_INT 8
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: PPUSH
28322: CALL_OW 69
28326: PPUSH
28327: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
28331: LD_EXP 1
28335: PPUSH
28336: LD_EXP 54
28340: PUSH
28341: LD_STRING JMM
28343: STR
28344: PPUSH
28345: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
28349: LD_EXP 2
28353: PPUSH
28354: LD_EXP 54
28358: PUSH
28359: LD_STRING Brown
28361: STR
28362: PPUSH
28363: CALL 11408 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
28367: LD_EXP 3
28371: PPUSH
28372: LD_EXP 54
28376: PUSH
28377: LD_STRING Donaldson
28379: STR
28380: PPUSH
28381: CALL 11408 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
28385: LD_EXP 4
28389: PPUSH
28390: LD_EXP 54
28394: PUSH
28395: LD_STRING Bobby
28397: STR
28398: PPUSH
28399: CALL 11408 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
28403: LD_EXP 5
28407: PPUSH
28408: LD_EXP 54
28412: PUSH
28413: LD_STRING Cyrus
28415: STR
28416: PPUSH
28417: CALL 11408 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
28421: LD_EXP 6
28425: PPUSH
28426: LD_EXP 54
28430: PUSH
28431: LD_STRING Lisa
28433: STR
28434: PPUSH
28435: CALL 11408 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
28439: LD_EXP 7
28443: PPUSH
28444: LD_EXP 54
28448: PUSH
28449: LD_STRING Frank
28451: STR
28452: PPUSH
28453: CALL 11408 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
28457: LD_EXP 8
28461: PPUSH
28462: LD_EXP 54
28466: PUSH
28467: LD_STRING Kikuchi
28469: STR
28470: PPUSH
28471: CALL 11408 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
28475: LD_EXP 9
28479: PPUSH
28480: LD_EXP 54
28484: PUSH
28485: LD_STRING Houten
28487: STR
28488: PPUSH
28489: CALL 11408 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
28493: LD_EXP 10
28497: PPUSH
28498: LD_EXP 54
28502: PUSH
28503: LD_STRING Gary
28505: STR
28506: PPUSH
28507: CALL 11408 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
28511: LD_EXP 19
28515: PPUSH
28516: LD_EXP 54
28520: PUSH
28521: LD_STRING Cornell
28523: STR
28524: PPUSH
28525: CALL 11408 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
28529: LD_EXP 11
28533: PPUSH
28534: LD_EXP 54
28538: PUSH
28539: LD_STRING Simms
28541: STR
28542: PPUSH
28543: CALL 11408 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
28547: LD_EXP 12
28551: PPUSH
28552: LD_EXP 54
28556: PUSH
28557: LD_STRING Denis
28559: STR
28560: PPUSH
28561: CALL 11408 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
28565: LD_EXP 13
28569: PPUSH
28570: LD_EXP 54
28574: PUSH
28575: LD_STRING Joan
28577: STR
28578: PPUSH
28579: CALL 11408 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
28583: LD_EXP 15
28587: PPUSH
28588: LD_EXP 54
28592: PUSH
28593: LD_STRING Gladstone
28595: STR
28596: PPUSH
28597: CALL 11408 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
28601: LD_EXP 17
28605: PPUSH
28606: LD_EXP 54
28610: PUSH
28611: LD_STRING DeltaDoctor
28613: STR
28614: PPUSH
28615: CALL 11408 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
28619: LD_EXP 22
28623: PPUSH
28624: LD_STRING 10c_lock
28626: PPUSH
28627: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
28631: LD_INT 50
28633: PUSH
28634: EMPTY
28635: LIST
28636: PUSH
28637: LD_INT 22
28639: PUSH
28640: LD_INT 1
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 21
28649: PUSH
28650: LD_INT 1
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 2
28659: PUSH
28660: LD_INT 25
28662: PUSH
28663: LD_INT 1
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 25
28672: PUSH
28673: LD_INT 2
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 25
28682: PUSH
28683: LD_INT 3
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 25
28692: PUSH
28693: LD_INT 4
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 25
28702: PUSH
28703: LD_INT 5
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 25
28712: PUSH
28713: LD_INT 8
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: PPUSH
28735: CALL_OW 69
28739: PUSH
28740: LD_EXP 1
28744: PUSH
28745: LD_EXP 2
28749: PUSH
28750: LD_EXP 3
28754: PUSH
28755: LD_EXP 4
28759: PUSH
28760: LD_EXP 5
28764: PUSH
28765: LD_EXP 6
28769: PUSH
28770: LD_EXP 7
28774: PUSH
28775: LD_EXP 15
28779: PUSH
28780: LD_EXP 8
28784: PUSH
28785: LD_EXP 12
28789: PUSH
28790: LD_EXP 13
28794: PUSH
28795: LD_EXP 9
28799: PUSH
28800: LD_EXP 11
28804: PUSH
28805: LD_EXP 10
28809: PUSH
28810: LD_EXP 17
28814: PUSH
28815: LD_EXP 19
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: DIFF
28838: PPUSH
28839: LD_STRING 10_other_survivors
28841: PPUSH
28842: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
28846: LD_INT 50
28848: PUSH
28849: EMPTY
28850: LIST
28851: PUSH
28852: LD_INT 22
28854: PUSH
28855: LD_INT 1
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 21
28864: PUSH
28865: LD_INT 1
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 2
28874: PUSH
28875: LD_INT 25
28877: PUSH
28878: LD_INT 16
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 25
28887: PUSH
28888: LD_INT 12
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: LIST
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: PPUSH
28906: CALL_OW 69
28910: PPUSH
28911: LD_STRING 10_ape
28913: PPUSH
28914: CALL_OW 38
// YouWin ;
28918: CALL_OW 103
// end ;
28922: LD_VAR 0 1
28926: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
28927: LD_INT 0
28929: PPUSH
28930: PPUSH
28931: PPUSH
28932: PPUSH
// epsilonBase = [ ] ;
28933: LD_ADDR_VAR 0 2
28937: PUSH
28938: EMPTY
28939: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
28940: LD_ADDR_VAR 0 3
28944: PUSH
28945: LD_INT 22
28947: PUSH
28948: LD_INT 1
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 21
28957: PUSH
28958: LD_INT 3
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 50
28967: PUSH
28968: EMPTY
28969: LIST
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: LIST
28975: PPUSH
28976: CALL_OW 69
28980: ST_TO_ADDR
// for i in buildings do
28981: LD_ADDR_VAR 0 4
28985: PUSH
28986: LD_VAR 0 3
28990: PUSH
28991: FOR_IN
28992: IFFALSE 29444
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
28994: LD_VAR 0 4
28998: PPUSH
28999: CALL_OW 266
29003: PUSH
29004: LD_INT 6
29006: PUSH
29007: LD_INT 7
29009: PUSH
29010: LD_INT 8
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: LIST
29017: IN
29018: IFFALSE 29132
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
29020: LD_ADDR_VAR 0 2
29024: PUSH
29025: LD_VAR 0 2
29029: PUSH
29030: LD_VAR 0 4
29034: PPUSH
29035: CALL_OW 266
29039: PUSH
29040: LD_VAR 0 4
29044: PPUSH
29045: CALL_OW 250
29049: PUSH
29050: LD_VAR 0 4
29054: PPUSH
29055: CALL_OW 251
29059: PUSH
29060: LD_VAR 0 4
29064: PPUSH
29065: CALL_OW 254
29069: PUSH
29070: LD_VAR 0 4
29074: PPUSH
29075: CALL_OW 267
29079: PUSH
29080: LD_VAR 0 4
29084: PPUSH
29085: CALL_OW 248
29089: PUSH
29090: LD_VAR 0 4
29094: PPUSH
29095: LD_INT 1
29097: PPUSH
29098: CALL_OW 268
29102: PUSH
29103: LD_VAR 0 4
29107: PPUSH
29108: LD_INT 2
29110: PPUSH
29111: CALL_OW 268
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: PUSH
29126: EMPTY
29127: LIST
29128: ADD
29129: ST_TO_ADDR
29130: GO 29442
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
29132: LD_VAR 0 4
29136: PPUSH
29137: CALL_OW 266
29141: PUSH
29142: LD_INT 32
29144: EQUAL
29145: PUSH
29146: LD_VAR 0 4
29150: PPUSH
29151: CALL_OW 266
29155: PUSH
29156: LD_INT 33
29158: EQUAL
29159: OR
29160: IFFALSE 29257
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
29162: LD_ADDR_VAR 0 2
29166: PUSH
29167: LD_VAR 0 2
29171: PUSH
29172: LD_VAR 0 4
29176: PPUSH
29177: CALL_OW 266
29181: PUSH
29182: LD_VAR 0 4
29186: PPUSH
29187: CALL_OW 250
29191: PUSH
29192: LD_VAR 0 4
29196: PPUSH
29197: CALL_OW 251
29201: PUSH
29202: LD_VAR 0 4
29206: PPUSH
29207: CALL_OW 254
29211: PUSH
29212: LD_VAR 0 4
29216: PPUSH
29217: CALL_OW 267
29221: PUSH
29222: LD_VAR 0 4
29226: PPUSH
29227: CALL_OW 248
29231: PUSH
29232: LD_VAR 0 4
29236: PPUSH
29237: CALL_OW 269
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: PUSH
29251: EMPTY
29252: LIST
29253: ADD
29254: ST_TO_ADDR
29255: GO 29442
// if GetBType ( i ) = b_factory then
29257: LD_VAR 0 4
29261: PPUSH
29262: CALL_OW 266
29266: PUSH
29267: LD_INT 3
29269: EQUAL
29270: IFFALSE 29360
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
29272: LD_ADDR_VAR 0 2
29276: PUSH
29277: LD_VAR 0 2
29281: PPUSH
29282: LD_INT 1
29284: PPUSH
29285: LD_VAR 0 4
29289: PPUSH
29290: CALL_OW 266
29294: PUSH
29295: LD_VAR 0 4
29299: PPUSH
29300: CALL_OW 250
29304: PUSH
29305: LD_VAR 0 4
29309: PPUSH
29310: CALL_OW 251
29314: PUSH
29315: LD_VAR 0 4
29319: PPUSH
29320: CALL_OW 254
29324: PUSH
29325: LD_VAR 0 4
29329: PPUSH
29330: CALL_OW 267
29334: PUSH
29335: LD_VAR 0 4
29339: PPUSH
29340: CALL_OW 248
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: PPUSH
29353: CALL_OW 2
29357: ST_TO_ADDR
29358: GO 29442
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
29360: LD_ADDR_VAR 0 2
29364: PUSH
29365: LD_VAR 0 2
29369: PUSH
29370: LD_VAR 0 4
29374: PPUSH
29375: CALL_OW 266
29379: PUSH
29380: LD_VAR 0 4
29384: PPUSH
29385: CALL_OW 250
29389: PUSH
29390: LD_VAR 0 4
29394: PPUSH
29395: CALL_OW 251
29399: PUSH
29400: LD_VAR 0 4
29404: PPUSH
29405: CALL_OW 254
29409: PUSH
29410: LD_VAR 0 4
29414: PPUSH
29415: CALL_OW 267
29419: PUSH
29420: LD_VAR 0 4
29424: PPUSH
29425: CALL_OW 248
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: PUSH
29438: EMPTY
29439: LIST
29440: ADD
29441: ST_TO_ADDR
// end ;
29442: GO 28991
29444: POP
29445: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
29446: LD_VAR 0 2
29450: PPUSH
29451: LD_STRING 10_EpsilonBase
29453: PPUSH
29454: CALL_OW 39
// SaveEnvironment ( epsilonTerrain , 10_EpsilonEnv ) ;
29458: LD_INT 19
29460: PPUSH
29461: LD_STRING 10_EpsilonEnv
29463: PPUSH
29464: CALL 29473 0 2
// end ;
29468: LD_VAR 0 1
29472: RET
// export function SaveEnvironment ( area , saveId ) ; begin
29473: LD_INT 0
29475: PPUSH
// result := ListEnvironmentArea ( area ) ;
29476: LD_ADDR_VAR 0 3
29480: PUSH
29481: LD_VAR 0 1
29485: PPUSH
29486: CALL_OW 353
29490: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
29491: LD_VAR 0 3
29495: PPUSH
29496: LD_VAR 0 2
29500: PPUSH
29501: CALL_OW 39
// end ; end_of_file
29505: LD_VAR 0 3
29509: RET
// every 0 0$01 do var timer ;
29510: GO 29512
29512: DISABLE
29513: LD_INT 0
29515: PPUSH
// begin timer := 0 0$20 ;
29516: LD_ADDR_VAR 0 1
29520: PUSH
29521: LD_INT 700
29523: ST_TO_ADDR
// repeat wait ( timer ) ;
29524: LD_VAR 0 1
29528: PPUSH
29529: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 14 then
29533: LD_EXP 56
29537: PUSH
29538: LD_INT 6
29540: GREATEREQUAL
29541: PUSH
29542: LD_EXP 56
29546: PUSH
29547: LD_INT 14
29549: LESS
29550: AND
29551: IFFALSE 29567
// timer := timer + 0 0$3 ;
29553: LD_ADDR_VAR 0 1
29557: PUSH
29558: LD_VAR 0 1
29562: PUSH
29563: LD_INT 105
29565: PLUS
29566: ST_TO_ADDR
// if cratesSpawned >= 14 then
29567: LD_EXP 56
29571: PUSH
29572: LD_INT 14
29574: GREATEREQUAL
29575: IFFALSE 29591
// timer := timer + 0 0$6 ;
29577: LD_ADDR_VAR 0 1
29581: PUSH
29582: LD_VAR 0 1
29586: PUSH
29587: LD_INT 210
29589: PLUS
29590: ST_TO_ADDR
// if timer > 2 2$00 then
29591: LD_VAR 0 1
29595: PUSH
29596: LD_INT 4200
29598: GREATER
29599: IFFALSE 29609
// timer := 0 0$45 ;
29601: LD_ADDR_VAR 0 1
29605: PUSH
29606: LD_INT 1575
29608: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
29609: LD_INT 1
29611: PPUSH
29612: LD_INT 5
29614: PPUSH
29615: CALL_OW 12
29619: PPUSH
29620: LD_INT 16
29622: PPUSH
29623: LD_INT 1
29625: PPUSH
29626: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
29630: LD_ADDR_EXP 56
29634: PUSH
29635: LD_EXP 56
29639: PUSH
29640: LD_INT 1
29642: PLUS
29643: ST_TO_ADDR
// until false ;
29644: LD_INT 0
29646: IFFALSE 29524
// end ; end_of_file
29648: PPOPN 1
29650: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
29651: LD_INT 0
29653: PPUSH
// ar_miner := 81 ;
29654: LD_ADDR_EXP 76
29658: PUSH
29659: LD_INT 81
29661: ST_TO_ADDR
// ar_crane := 88 ;
29662: LD_ADDR_EXP 75
29666: PUSH
29667: LD_INT 88
29669: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
29670: LD_ADDR_EXP 70
29674: PUSH
29675: LD_INT 89
29677: ST_TO_ADDR
// us_hack := 99 ;
29678: LD_ADDR_EXP 71
29682: PUSH
29683: LD_INT 99
29685: ST_TO_ADDR
// us_artillery := 97 ;
29686: LD_ADDR_EXP 72
29690: PUSH
29691: LD_INT 97
29693: ST_TO_ADDR
// ar_bio_bomb := 91 ;
29694: LD_ADDR_EXP 73
29698: PUSH
29699: LD_INT 91
29701: ST_TO_ADDR
// ar_mortar := 92 ;
29702: LD_ADDR_EXP 74
29706: PUSH
29707: LD_INT 92
29709: ST_TO_ADDR
// ru_radar := 98 ;
29710: LD_ADDR_EXP 69
29714: PUSH
29715: LD_INT 98
29717: ST_TO_ADDR
// tech_Artillery := 80 ;
29718: LD_ADDR_EXP 77
29722: PUSH
29723: LD_INT 80
29725: ST_TO_ADDR
// tech_RadMat := 81 ;
29726: LD_ADDR_EXP 78
29730: PUSH
29731: LD_INT 81
29733: ST_TO_ADDR
// tech_BasicTools := 82 ;
29734: LD_ADDR_EXP 79
29738: PUSH
29739: LD_INT 82
29741: ST_TO_ADDR
// tech_Cargo := 83 ;
29742: LD_ADDR_EXP 80
29746: PUSH
29747: LD_INT 83
29749: ST_TO_ADDR
// tech_Track := 84 ;
29750: LD_ADDR_EXP 81
29754: PUSH
29755: LD_INT 84
29757: ST_TO_ADDR
// tech_Crane := 85 ;
29758: LD_ADDR_EXP 82
29762: PUSH
29763: LD_INT 85
29765: ST_TO_ADDR
// tech_Bulldozer := 86 ;
29766: LD_ADDR_EXP 83
29770: PUSH
29771: LD_INT 86
29773: ST_TO_ADDR
// tech_Hovercraft := 87 ;
29774: LD_ADDR_EXP 84
29778: PUSH
29779: LD_INT 87
29781: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
29782: LD_ADDR_EXP 85
29786: PUSH
29787: LD_INT 88
29789: ST_TO_ADDR
// class_mastodont := 31 ;
29790: LD_ADDR_EXP 86
29794: PUSH
29795: LD_INT 31
29797: ST_TO_ADDR
// class_horse := 21 ;
29798: LD_ADDR_EXP 87
29802: PUSH
29803: LD_INT 21
29805: ST_TO_ADDR
// end ;
29806: LD_VAR 0 1
29810: RET
// every 1 do
29811: GO 29813
29813: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
29814: CALL 29651 0 0
29818: END
// every 0 0$1 do
29819: GO 29821
29821: DISABLE
// begin enable ;
29822: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
29823: LD_STRING updateTimer(
29825: PUSH
29826: LD_OWVAR 1
29830: STR
29831: PUSH
29832: LD_STRING );
29834: STR
29835: PPUSH
29836: CALL_OW 559
// end ;
29840: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29841: LD_INT 0
29843: PPUSH
// if p2 = 100 then
29844: LD_VAR 0 2
29848: PUSH
29849: LD_INT 100
29851: EQUAL
29852: IFFALSE 30855
// begin if not StreamModeActive then
29854: LD_EXP 88
29858: NOT
29859: IFFALSE 29869
// StreamModeActive := true ;
29861: LD_ADDR_EXP 88
29865: PUSH
29866: LD_INT 1
29868: ST_TO_ADDR
// if p3 = 0 then
29869: LD_VAR 0 3
29873: PUSH
29874: LD_INT 0
29876: EQUAL
29877: IFFALSE 29883
// InitStreamMode ;
29879: CALL 31015 0 0
// if p3 = 1 then
29883: LD_VAR 0 3
29887: PUSH
29888: LD_INT 1
29890: EQUAL
29891: IFFALSE 29901
// sRocket := true ;
29893: LD_ADDR_EXP 93
29897: PUSH
29898: LD_INT 1
29900: ST_TO_ADDR
// if p3 = 2 then
29901: LD_VAR 0 3
29905: PUSH
29906: LD_INT 2
29908: EQUAL
29909: IFFALSE 29919
// sSpeed := true ;
29911: LD_ADDR_EXP 92
29915: PUSH
29916: LD_INT 1
29918: ST_TO_ADDR
// if p3 = 3 then
29919: LD_VAR 0 3
29923: PUSH
29924: LD_INT 3
29926: EQUAL
29927: IFFALSE 29937
// sEngine := true ;
29929: LD_ADDR_EXP 94
29933: PUSH
29934: LD_INT 1
29936: ST_TO_ADDR
// if p3 = 4 then
29937: LD_VAR 0 3
29941: PUSH
29942: LD_INT 4
29944: EQUAL
29945: IFFALSE 29955
// sSpec := true ;
29947: LD_ADDR_EXP 91
29951: PUSH
29952: LD_INT 1
29954: ST_TO_ADDR
// if p3 = 5 then
29955: LD_VAR 0 3
29959: PUSH
29960: LD_INT 5
29962: EQUAL
29963: IFFALSE 29973
// sLevel := true ;
29965: LD_ADDR_EXP 95
29969: PUSH
29970: LD_INT 1
29972: ST_TO_ADDR
// if p3 = 6 then
29973: LD_VAR 0 3
29977: PUSH
29978: LD_INT 6
29980: EQUAL
29981: IFFALSE 29991
// sArmoury := true ;
29983: LD_ADDR_EXP 96
29987: PUSH
29988: LD_INT 1
29990: ST_TO_ADDR
// if p3 = 7 then
29991: LD_VAR 0 3
29995: PUSH
29996: LD_INT 7
29998: EQUAL
29999: IFFALSE 30009
// sRadar := true ;
30001: LD_ADDR_EXP 97
30005: PUSH
30006: LD_INT 1
30008: ST_TO_ADDR
// if p3 = 8 then
30009: LD_VAR 0 3
30013: PUSH
30014: LD_INT 8
30016: EQUAL
30017: IFFALSE 30027
// sBunker := true ;
30019: LD_ADDR_EXP 98
30023: PUSH
30024: LD_INT 1
30026: ST_TO_ADDR
// if p3 = 9 then
30027: LD_VAR 0 3
30031: PUSH
30032: LD_INT 9
30034: EQUAL
30035: IFFALSE 30045
// sHack := true ;
30037: LD_ADDR_EXP 99
30041: PUSH
30042: LD_INT 1
30044: ST_TO_ADDR
// if p3 = 10 then
30045: LD_VAR 0 3
30049: PUSH
30050: LD_INT 10
30052: EQUAL
30053: IFFALSE 30063
// sFire := true ;
30055: LD_ADDR_EXP 100
30059: PUSH
30060: LD_INT 1
30062: ST_TO_ADDR
// if p3 = 11 then
30063: LD_VAR 0 3
30067: PUSH
30068: LD_INT 11
30070: EQUAL
30071: IFFALSE 30081
// sRefresh := true ;
30073: LD_ADDR_EXP 101
30077: PUSH
30078: LD_INT 1
30080: ST_TO_ADDR
// if p3 = 12 then
30081: LD_VAR 0 3
30085: PUSH
30086: LD_INT 12
30088: EQUAL
30089: IFFALSE 30099
// sExp := true ;
30091: LD_ADDR_EXP 102
30095: PUSH
30096: LD_INT 1
30098: ST_TO_ADDR
// if p3 = 13 then
30099: LD_VAR 0 3
30103: PUSH
30104: LD_INT 13
30106: EQUAL
30107: IFFALSE 30117
// sDepot := true ;
30109: LD_ADDR_EXP 103
30113: PUSH
30114: LD_INT 1
30116: ST_TO_ADDR
// if p3 = 14 then
30117: LD_VAR 0 3
30121: PUSH
30122: LD_INT 14
30124: EQUAL
30125: IFFALSE 30135
// sFlag := true ;
30127: LD_ADDR_EXP 104
30131: PUSH
30132: LD_INT 1
30134: ST_TO_ADDR
// if p3 = 15 then
30135: LD_VAR 0 3
30139: PUSH
30140: LD_INT 15
30142: EQUAL
30143: IFFALSE 30153
// sKamikadze := true ;
30145: LD_ADDR_EXP 112
30149: PUSH
30150: LD_INT 1
30152: ST_TO_ADDR
// if p3 = 16 then
30153: LD_VAR 0 3
30157: PUSH
30158: LD_INT 16
30160: EQUAL
30161: IFFALSE 30171
// sTroll := true ;
30163: LD_ADDR_EXP 113
30167: PUSH
30168: LD_INT 1
30170: ST_TO_ADDR
// if p3 = 17 then
30171: LD_VAR 0 3
30175: PUSH
30176: LD_INT 17
30178: EQUAL
30179: IFFALSE 30189
// sSlow := true ;
30181: LD_ADDR_EXP 114
30185: PUSH
30186: LD_INT 1
30188: ST_TO_ADDR
// if p3 = 18 then
30189: LD_VAR 0 3
30193: PUSH
30194: LD_INT 18
30196: EQUAL
30197: IFFALSE 30207
// sLack := true ;
30199: LD_ADDR_EXP 115
30203: PUSH
30204: LD_INT 1
30206: ST_TO_ADDR
// if p3 = 19 then
30207: LD_VAR 0 3
30211: PUSH
30212: LD_INT 19
30214: EQUAL
30215: IFFALSE 30225
// sTank := true ;
30217: LD_ADDR_EXP 117
30221: PUSH
30222: LD_INT 1
30224: ST_TO_ADDR
// if p3 = 20 then
30225: LD_VAR 0 3
30229: PUSH
30230: LD_INT 20
30232: EQUAL
30233: IFFALSE 30243
// sRemote := true ;
30235: LD_ADDR_EXP 118
30239: PUSH
30240: LD_INT 1
30242: ST_TO_ADDR
// if p3 = 21 then
30243: LD_VAR 0 3
30247: PUSH
30248: LD_INT 21
30250: EQUAL
30251: IFFALSE 30261
// sPowell := true ;
30253: LD_ADDR_EXP 119
30257: PUSH
30258: LD_INT 1
30260: ST_TO_ADDR
// if p3 = 22 then
30261: LD_VAR 0 3
30265: PUSH
30266: LD_INT 22
30268: EQUAL
30269: IFFALSE 30279
// sTeleport := true ;
30271: LD_ADDR_EXP 122
30275: PUSH
30276: LD_INT 1
30278: ST_TO_ADDR
// if p3 = 23 then
30279: LD_VAR 0 3
30283: PUSH
30284: LD_INT 23
30286: EQUAL
30287: IFFALSE 30297
// sOilTower := true ;
30289: LD_ADDR_EXP 124
30293: PUSH
30294: LD_INT 1
30296: ST_TO_ADDR
// if p3 = 24 then
30297: LD_VAR 0 3
30301: PUSH
30302: LD_INT 24
30304: EQUAL
30305: IFFALSE 30315
// sShovel := true ;
30307: LD_ADDR_EXP 125
30311: PUSH
30312: LD_INT 1
30314: ST_TO_ADDR
// if p3 = 25 then
30315: LD_VAR 0 3
30319: PUSH
30320: LD_INT 25
30322: EQUAL
30323: IFFALSE 30333
// sSheik := true ;
30325: LD_ADDR_EXP 126
30329: PUSH
30330: LD_INT 1
30332: ST_TO_ADDR
// if p3 = 26 then
30333: LD_VAR 0 3
30337: PUSH
30338: LD_INT 26
30340: EQUAL
30341: IFFALSE 30351
// sEarthquake := true ;
30343: LD_ADDR_EXP 128
30347: PUSH
30348: LD_INT 1
30350: ST_TO_ADDR
// if p3 = 27 then
30351: LD_VAR 0 3
30355: PUSH
30356: LD_INT 27
30358: EQUAL
30359: IFFALSE 30369
// sAI := true ;
30361: LD_ADDR_EXP 129
30365: PUSH
30366: LD_INT 1
30368: ST_TO_ADDR
// if p3 = 28 then
30369: LD_VAR 0 3
30373: PUSH
30374: LD_INT 28
30376: EQUAL
30377: IFFALSE 30387
// sCargo := true ;
30379: LD_ADDR_EXP 132
30383: PUSH
30384: LD_INT 1
30386: ST_TO_ADDR
// if p3 = 29 then
30387: LD_VAR 0 3
30391: PUSH
30392: LD_INT 29
30394: EQUAL
30395: IFFALSE 30405
// sDLaser := true ;
30397: LD_ADDR_EXP 133
30401: PUSH
30402: LD_INT 1
30404: ST_TO_ADDR
// if p3 = 30 then
30405: LD_VAR 0 3
30409: PUSH
30410: LD_INT 30
30412: EQUAL
30413: IFFALSE 30423
// sExchange := true ;
30415: LD_ADDR_EXP 134
30419: PUSH
30420: LD_INT 1
30422: ST_TO_ADDR
// if p3 = 31 then
30423: LD_VAR 0 3
30427: PUSH
30428: LD_INT 31
30430: EQUAL
30431: IFFALSE 30441
// sFac := true ;
30433: LD_ADDR_EXP 135
30437: PUSH
30438: LD_INT 1
30440: ST_TO_ADDR
// if p3 = 32 then
30441: LD_VAR 0 3
30445: PUSH
30446: LD_INT 32
30448: EQUAL
30449: IFFALSE 30459
// sPower := true ;
30451: LD_ADDR_EXP 136
30455: PUSH
30456: LD_INT 1
30458: ST_TO_ADDR
// if p3 = 33 then
30459: LD_VAR 0 3
30463: PUSH
30464: LD_INT 33
30466: EQUAL
30467: IFFALSE 30477
// sRandom := true ;
30469: LD_ADDR_EXP 137
30473: PUSH
30474: LD_INT 1
30476: ST_TO_ADDR
// if p3 = 34 then
30477: LD_VAR 0 3
30481: PUSH
30482: LD_INT 34
30484: EQUAL
30485: IFFALSE 30495
// sShield := true ;
30487: LD_ADDR_EXP 138
30491: PUSH
30492: LD_INT 1
30494: ST_TO_ADDR
// if p3 = 35 then
30495: LD_VAR 0 3
30499: PUSH
30500: LD_INT 35
30502: EQUAL
30503: IFFALSE 30513
// sTime := true ;
30505: LD_ADDR_EXP 139
30509: PUSH
30510: LD_INT 1
30512: ST_TO_ADDR
// if p3 = 36 then
30513: LD_VAR 0 3
30517: PUSH
30518: LD_INT 36
30520: EQUAL
30521: IFFALSE 30531
// sTools := true ;
30523: LD_ADDR_EXP 140
30527: PUSH
30528: LD_INT 1
30530: ST_TO_ADDR
// if p3 = 101 then
30531: LD_VAR 0 3
30535: PUSH
30536: LD_INT 101
30538: EQUAL
30539: IFFALSE 30549
// sSold := true ;
30541: LD_ADDR_EXP 105
30545: PUSH
30546: LD_INT 1
30548: ST_TO_ADDR
// if p3 = 102 then
30549: LD_VAR 0 3
30553: PUSH
30554: LD_INT 102
30556: EQUAL
30557: IFFALSE 30567
// sDiff := true ;
30559: LD_ADDR_EXP 106
30563: PUSH
30564: LD_INT 1
30566: ST_TO_ADDR
// if p3 = 103 then
30567: LD_VAR 0 3
30571: PUSH
30572: LD_INT 103
30574: EQUAL
30575: IFFALSE 30585
// sFog := true ;
30577: LD_ADDR_EXP 109
30581: PUSH
30582: LD_INT 1
30584: ST_TO_ADDR
// if p3 = 104 then
30585: LD_VAR 0 3
30589: PUSH
30590: LD_INT 104
30592: EQUAL
30593: IFFALSE 30603
// sReset := true ;
30595: LD_ADDR_EXP 110
30599: PUSH
30600: LD_INT 1
30602: ST_TO_ADDR
// if p3 = 105 then
30603: LD_VAR 0 3
30607: PUSH
30608: LD_INT 105
30610: EQUAL
30611: IFFALSE 30621
// sSun := true ;
30613: LD_ADDR_EXP 111
30617: PUSH
30618: LD_INT 1
30620: ST_TO_ADDR
// if p3 = 106 then
30621: LD_VAR 0 3
30625: PUSH
30626: LD_INT 106
30628: EQUAL
30629: IFFALSE 30639
// sTiger := true ;
30631: LD_ADDR_EXP 107
30635: PUSH
30636: LD_INT 1
30638: ST_TO_ADDR
// if p3 = 107 then
30639: LD_VAR 0 3
30643: PUSH
30644: LD_INT 107
30646: EQUAL
30647: IFFALSE 30657
// sBomb := true ;
30649: LD_ADDR_EXP 108
30653: PUSH
30654: LD_INT 1
30656: ST_TO_ADDR
// if p3 = 108 then
30657: LD_VAR 0 3
30661: PUSH
30662: LD_INT 108
30664: EQUAL
30665: IFFALSE 30675
// sWound := true ;
30667: LD_ADDR_EXP 116
30671: PUSH
30672: LD_INT 1
30674: ST_TO_ADDR
// if p3 = 109 then
30675: LD_VAR 0 3
30679: PUSH
30680: LD_INT 109
30682: EQUAL
30683: IFFALSE 30693
// sBetray := true ;
30685: LD_ADDR_EXP 120
30689: PUSH
30690: LD_INT 1
30692: ST_TO_ADDR
// if p3 = 110 then
30693: LD_VAR 0 3
30697: PUSH
30698: LD_INT 110
30700: EQUAL
30701: IFFALSE 30711
// sContamin := true ;
30703: LD_ADDR_EXP 121
30707: PUSH
30708: LD_INT 1
30710: ST_TO_ADDR
// if p3 = 111 then
30711: LD_VAR 0 3
30715: PUSH
30716: LD_INT 111
30718: EQUAL
30719: IFFALSE 30729
// sOil := true ;
30721: LD_ADDR_EXP 123
30725: PUSH
30726: LD_INT 1
30728: ST_TO_ADDR
// if p3 = 112 then
30729: LD_VAR 0 3
30733: PUSH
30734: LD_INT 112
30736: EQUAL
30737: IFFALSE 30747
// sStu := true ;
30739: LD_ADDR_EXP 127
30743: PUSH
30744: LD_INT 1
30746: ST_TO_ADDR
// if p3 = 113 then
30747: LD_VAR 0 3
30751: PUSH
30752: LD_INT 113
30754: EQUAL
30755: IFFALSE 30765
// sBazooka := true ;
30757: LD_ADDR_EXP 130
30761: PUSH
30762: LD_INT 1
30764: ST_TO_ADDR
// if p3 = 114 then
30765: LD_VAR 0 3
30769: PUSH
30770: LD_INT 114
30772: EQUAL
30773: IFFALSE 30783
// sMortar := true ;
30775: LD_ADDR_EXP 131
30779: PUSH
30780: LD_INT 1
30782: ST_TO_ADDR
// if p3 = 115 then
30783: LD_VAR 0 3
30787: PUSH
30788: LD_INT 115
30790: EQUAL
30791: IFFALSE 30801
// sRanger := true ;
30793: LD_ADDR_EXP 141
30797: PUSH
30798: LD_INT 1
30800: ST_TO_ADDR
// if p3 = 116 then
30801: LD_VAR 0 3
30805: PUSH
30806: LD_INT 116
30808: EQUAL
30809: IFFALSE 30819
// sComputer := true ;
30811: LD_ADDR_EXP 142
30815: PUSH
30816: LD_INT 1
30818: ST_TO_ADDR
// if p3 = 117 then
30819: LD_VAR 0 3
30823: PUSH
30824: LD_INT 117
30826: EQUAL
30827: IFFALSE 30837
// s30 := true ;
30829: LD_ADDR_EXP 143
30833: PUSH
30834: LD_INT 1
30836: ST_TO_ADDR
// if p3 = 118 then
30837: LD_VAR 0 3
30841: PUSH
30842: LD_INT 118
30844: EQUAL
30845: IFFALSE 30855
// s60 := true ;
30847: LD_ADDR_EXP 144
30851: PUSH
30852: LD_INT 1
30854: ST_TO_ADDR
// end ; if p2 = 101 then
30855: LD_VAR 0 2
30859: PUSH
30860: LD_INT 101
30862: EQUAL
30863: IFFALSE 30991
// begin case p3 of 1 :
30865: LD_VAR 0 3
30869: PUSH
30870: LD_INT 1
30872: DOUBLE
30873: EQUAL
30874: IFTRUE 30878
30876: GO 30885
30878: POP
// hHackUnlimitedResources ; 2 :
30879: CALL 42587 0 0
30883: GO 30991
30885: LD_INT 2
30887: DOUBLE
30888: EQUAL
30889: IFTRUE 30893
30891: GO 30900
30893: POP
// hHackSetLevel10 ; 3 :
30894: CALL 42720 0 0
30898: GO 30991
30900: LD_INT 3
30902: DOUBLE
30903: EQUAL
30904: IFTRUE 30908
30906: GO 30915
30908: POP
// hHackSetLevel10YourUnits ; 4 :
30909: CALL 42805 0 0
30913: GO 30991
30915: LD_INT 4
30917: DOUBLE
30918: EQUAL
30919: IFTRUE 30923
30921: GO 30930
30923: POP
// hHackInvincible ; 5 :
30924: CALL 43253 0 0
30928: GO 30991
30930: LD_INT 5
30932: DOUBLE
30933: EQUAL
30934: IFTRUE 30938
30936: GO 30945
30938: POP
// hHackInvisible ; 6 :
30939: CALL 43364 0 0
30943: GO 30991
30945: LD_INT 6
30947: DOUBLE
30948: EQUAL
30949: IFTRUE 30953
30951: GO 30960
30953: POP
// hHackChangeYourSide ; 7 :
30954: CALL 43421 0 0
30958: GO 30991
30960: LD_INT 7
30962: DOUBLE
30963: EQUAL
30964: IFTRUE 30968
30966: GO 30975
30968: POP
// hHackChangeUnitSide ; 8 :
30969: CALL 43463 0 0
30973: GO 30991
30975: LD_INT 8
30977: DOUBLE
30978: EQUAL
30979: IFTRUE 30983
30981: GO 30990
30983: POP
// hHackFog ; end ;
30984: CALL 43564 0 0
30988: GO 30991
30990: POP
// end ; end ;
30991: LD_VAR 0 7
30995: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
30996: GO 30998
30998: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
30999: LD_STRING initStreamRollete();
31001: PPUSH
31002: CALL_OW 559
// InitStreamMode ;
31006: CALL 31015 0 0
// DefineStreamItems ( ) ;
31010: CALL 31479 0 0
// end ;
31014: END
// function InitStreamMode ; begin
31015: LD_INT 0
31017: PPUSH
// streamModeActive := false ;
31018: LD_ADDR_EXP 88
31022: PUSH
31023: LD_INT 0
31025: ST_TO_ADDR
// normalCounter := 36 ;
31026: LD_ADDR_EXP 89
31030: PUSH
31031: LD_INT 36
31033: ST_TO_ADDR
// hardcoreCounter := 16 ;
31034: LD_ADDR_EXP 90
31038: PUSH
31039: LD_INT 16
31041: ST_TO_ADDR
// sRocket := false ;
31042: LD_ADDR_EXP 93
31046: PUSH
31047: LD_INT 0
31049: ST_TO_ADDR
// sSpeed := false ;
31050: LD_ADDR_EXP 92
31054: PUSH
31055: LD_INT 0
31057: ST_TO_ADDR
// sEngine := false ;
31058: LD_ADDR_EXP 94
31062: PUSH
31063: LD_INT 0
31065: ST_TO_ADDR
// sSpec := false ;
31066: LD_ADDR_EXP 91
31070: PUSH
31071: LD_INT 0
31073: ST_TO_ADDR
// sLevel := false ;
31074: LD_ADDR_EXP 95
31078: PUSH
31079: LD_INT 0
31081: ST_TO_ADDR
// sArmoury := false ;
31082: LD_ADDR_EXP 96
31086: PUSH
31087: LD_INT 0
31089: ST_TO_ADDR
// sRadar := false ;
31090: LD_ADDR_EXP 97
31094: PUSH
31095: LD_INT 0
31097: ST_TO_ADDR
// sBunker := false ;
31098: LD_ADDR_EXP 98
31102: PUSH
31103: LD_INT 0
31105: ST_TO_ADDR
// sHack := false ;
31106: LD_ADDR_EXP 99
31110: PUSH
31111: LD_INT 0
31113: ST_TO_ADDR
// sFire := false ;
31114: LD_ADDR_EXP 100
31118: PUSH
31119: LD_INT 0
31121: ST_TO_ADDR
// sRefresh := false ;
31122: LD_ADDR_EXP 101
31126: PUSH
31127: LD_INT 0
31129: ST_TO_ADDR
// sExp := false ;
31130: LD_ADDR_EXP 102
31134: PUSH
31135: LD_INT 0
31137: ST_TO_ADDR
// sDepot := false ;
31138: LD_ADDR_EXP 103
31142: PUSH
31143: LD_INT 0
31145: ST_TO_ADDR
// sFlag := false ;
31146: LD_ADDR_EXP 104
31150: PUSH
31151: LD_INT 0
31153: ST_TO_ADDR
// sKamikadze := false ;
31154: LD_ADDR_EXP 112
31158: PUSH
31159: LD_INT 0
31161: ST_TO_ADDR
// sTroll := false ;
31162: LD_ADDR_EXP 113
31166: PUSH
31167: LD_INT 0
31169: ST_TO_ADDR
// sSlow := false ;
31170: LD_ADDR_EXP 114
31174: PUSH
31175: LD_INT 0
31177: ST_TO_ADDR
// sLack := false ;
31178: LD_ADDR_EXP 115
31182: PUSH
31183: LD_INT 0
31185: ST_TO_ADDR
// sTank := false ;
31186: LD_ADDR_EXP 117
31190: PUSH
31191: LD_INT 0
31193: ST_TO_ADDR
// sRemote := false ;
31194: LD_ADDR_EXP 118
31198: PUSH
31199: LD_INT 0
31201: ST_TO_ADDR
// sPowell := false ;
31202: LD_ADDR_EXP 119
31206: PUSH
31207: LD_INT 0
31209: ST_TO_ADDR
// sTeleport := false ;
31210: LD_ADDR_EXP 122
31214: PUSH
31215: LD_INT 0
31217: ST_TO_ADDR
// sOilTower := false ;
31218: LD_ADDR_EXP 124
31222: PUSH
31223: LD_INT 0
31225: ST_TO_ADDR
// sShovel := false ;
31226: LD_ADDR_EXP 125
31230: PUSH
31231: LD_INT 0
31233: ST_TO_ADDR
// sSheik := false ;
31234: LD_ADDR_EXP 126
31238: PUSH
31239: LD_INT 0
31241: ST_TO_ADDR
// sEarthquake := false ;
31242: LD_ADDR_EXP 128
31246: PUSH
31247: LD_INT 0
31249: ST_TO_ADDR
// sAI := false ;
31250: LD_ADDR_EXP 129
31254: PUSH
31255: LD_INT 0
31257: ST_TO_ADDR
// sCargo := false ;
31258: LD_ADDR_EXP 132
31262: PUSH
31263: LD_INT 0
31265: ST_TO_ADDR
// sDLaser := false ;
31266: LD_ADDR_EXP 133
31270: PUSH
31271: LD_INT 0
31273: ST_TO_ADDR
// sExchange := false ;
31274: LD_ADDR_EXP 134
31278: PUSH
31279: LD_INT 0
31281: ST_TO_ADDR
// sFac := false ;
31282: LD_ADDR_EXP 135
31286: PUSH
31287: LD_INT 0
31289: ST_TO_ADDR
// sPower := false ;
31290: LD_ADDR_EXP 136
31294: PUSH
31295: LD_INT 0
31297: ST_TO_ADDR
// sRandom := false ;
31298: LD_ADDR_EXP 137
31302: PUSH
31303: LD_INT 0
31305: ST_TO_ADDR
// sShield := false ;
31306: LD_ADDR_EXP 138
31310: PUSH
31311: LD_INT 0
31313: ST_TO_ADDR
// sTime := false ;
31314: LD_ADDR_EXP 139
31318: PUSH
31319: LD_INT 0
31321: ST_TO_ADDR
// sTools := false ;
31322: LD_ADDR_EXP 140
31326: PUSH
31327: LD_INT 0
31329: ST_TO_ADDR
// sSold := false ;
31330: LD_ADDR_EXP 105
31334: PUSH
31335: LD_INT 0
31337: ST_TO_ADDR
// sDiff := false ;
31338: LD_ADDR_EXP 106
31342: PUSH
31343: LD_INT 0
31345: ST_TO_ADDR
// sFog := false ;
31346: LD_ADDR_EXP 109
31350: PUSH
31351: LD_INT 0
31353: ST_TO_ADDR
// sReset := false ;
31354: LD_ADDR_EXP 110
31358: PUSH
31359: LD_INT 0
31361: ST_TO_ADDR
// sSun := false ;
31362: LD_ADDR_EXP 111
31366: PUSH
31367: LD_INT 0
31369: ST_TO_ADDR
// sTiger := false ;
31370: LD_ADDR_EXP 107
31374: PUSH
31375: LD_INT 0
31377: ST_TO_ADDR
// sBomb := false ;
31378: LD_ADDR_EXP 108
31382: PUSH
31383: LD_INT 0
31385: ST_TO_ADDR
// sWound := false ;
31386: LD_ADDR_EXP 116
31390: PUSH
31391: LD_INT 0
31393: ST_TO_ADDR
// sBetray := false ;
31394: LD_ADDR_EXP 120
31398: PUSH
31399: LD_INT 0
31401: ST_TO_ADDR
// sContamin := false ;
31402: LD_ADDR_EXP 121
31406: PUSH
31407: LD_INT 0
31409: ST_TO_ADDR
// sOil := false ;
31410: LD_ADDR_EXP 123
31414: PUSH
31415: LD_INT 0
31417: ST_TO_ADDR
// sStu := false ;
31418: LD_ADDR_EXP 127
31422: PUSH
31423: LD_INT 0
31425: ST_TO_ADDR
// sBazooka := false ;
31426: LD_ADDR_EXP 130
31430: PUSH
31431: LD_INT 0
31433: ST_TO_ADDR
// sMortar := false ;
31434: LD_ADDR_EXP 131
31438: PUSH
31439: LD_INT 0
31441: ST_TO_ADDR
// sRanger := false ;
31442: LD_ADDR_EXP 141
31446: PUSH
31447: LD_INT 0
31449: ST_TO_ADDR
// sComputer := false ;
31450: LD_ADDR_EXP 142
31454: PUSH
31455: LD_INT 0
31457: ST_TO_ADDR
// s30 := false ;
31458: LD_ADDR_EXP 143
31462: PUSH
31463: LD_INT 0
31465: ST_TO_ADDR
// s60 := false ;
31466: LD_ADDR_EXP 144
31470: PUSH
31471: LD_INT 0
31473: ST_TO_ADDR
// end ;
31474: LD_VAR 0 1
31478: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
31479: LD_INT 0
31481: PPUSH
31482: PPUSH
31483: PPUSH
31484: PPUSH
31485: PPUSH
// result := [ ] ;
31486: LD_ADDR_VAR 0 1
31490: PUSH
31491: EMPTY
31492: ST_TO_ADDR
// if campaign_id = 1 then
31493: LD_OWVAR 69
31497: PUSH
31498: LD_INT 1
31500: EQUAL
31501: IFFALSE 34667
// begin case mission_number of 1 :
31503: LD_OWVAR 70
31507: PUSH
31508: LD_INT 1
31510: DOUBLE
31511: EQUAL
31512: IFTRUE 31516
31514: GO 31592
31516: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
31517: LD_ADDR_VAR 0 1
31521: PUSH
31522: LD_INT 2
31524: PUSH
31525: LD_INT 4
31527: PUSH
31528: LD_INT 11
31530: PUSH
31531: LD_INT 12
31533: PUSH
31534: LD_INT 15
31536: PUSH
31537: LD_INT 16
31539: PUSH
31540: LD_INT 22
31542: PUSH
31543: LD_INT 23
31545: PUSH
31546: LD_INT 26
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 101
31562: PUSH
31563: LD_INT 102
31565: PUSH
31566: LD_INT 106
31568: PUSH
31569: LD_INT 116
31571: PUSH
31572: LD_INT 117
31574: PUSH
31575: LD_INT 118
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: ST_TO_ADDR
31590: GO 34665
31592: LD_INT 2
31594: DOUBLE
31595: EQUAL
31596: IFTRUE 31600
31598: GO 31684
31600: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
31601: LD_ADDR_VAR 0 1
31605: PUSH
31606: LD_INT 2
31608: PUSH
31609: LD_INT 4
31611: PUSH
31612: LD_INT 11
31614: PUSH
31615: LD_INT 12
31617: PUSH
31618: LD_INT 15
31620: PUSH
31621: LD_INT 16
31623: PUSH
31624: LD_INT 22
31626: PUSH
31627: LD_INT 23
31629: PUSH
31630: LD_INT 26
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 101
31646: PUSH
31647: LD_INT 102
31649: PUSH
31650: LD_INT 105
31652: PUSH
31653: LD_INT 106
31655: PUSH
31656: LD_INT 108
31658: PUSH
31659: LD_INT 116
31661: PUSH
31662: LD_INT 117
31664: PUSH
31665: LD_INT 118
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: ST_TO_ADDR
31682: GO 34665
31684: LD_INT 3
31686: DOUBLE
31687: EQUAL
31688: IFTRUE 31692
31690: GO 31780
31692: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
31693: LD_ADDR_VAR 0 1
31697: PUSH
31698: LD_INT 2
31700: PUSH
31701: LD_INT 4
31703: PUSH
31704: LD_INT 5
31706: PUSH
31707: LD_INT 11
31709: PUSH
31710: LD_INT 12
31712: PUSH
31713: LD_INT 15
31715: PUSH
31716: LD_INT 16
31718: PUSH
31719: LD_INT 22
31721: PUSH
31722: LD_INT 26
31724: PUSH
31725: LD_INT 36
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 101
31742: PUSH
31743: LD_INT 102
31745: PUSH
31746: LD_INT 105
31748: PUSH
31749: LD_INT 106
31751: PUSH
31752: LD_INT 108
31754: PUSH
31755: LD_INT 116
31757: PUSH
31758: LD_INT 117
31760: PUSH
31761: LD_INT 118
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: ST_TO_ADDR
31778: GO 34665
31780: LD_INT 4
31782: DOUBLE
31783: EQUAL
31784: IFTRUE 31788
31786: GO 31884
31788: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
31789: LD_ADDR_VAR 0 1
31793: PUSH
31794: LD_INT 2
31796: PUSH
31797: LD_INT 4
31799: PUSH
31800: LD_INT 5
31802: PUSH
31803: LD_INT 8
31805: PUSH
31806: LD_INT 11
31808: PUSH
31809: LD_INT 12
31811: PUSH
31812: LD_INT 15
31814: PUSH
31815: LD_INT 16
31817: PUSH
31818: LD_INT 22
31820: PUSH
31821: LD_INT 23
31823: PUSH
31824: LD_INT 26
31826: PUSH
31827: LD_INT 36
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 101
31846: PUSH
31847: LD_INT 102
31849: PUSH
31850: LD_INT 105
31852: PUSH
31853: LD_INT 106
31855: PUSH
31856: LD_INT 108
31858: PUSH
31859: LD_INT 116
31861: PUSH
31862: LD_INT 117
31864: PUSH
31865: LD_INT 118
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: ST_TO_ADDR
31882: GO 34665
31884: LD_INT 5
31886: DOUBLE
31887: EQUAL
31888: IFTRUE 31892
31890: GO 32004
31892: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
31893: LD_ADDR_VAR 0 1
31897: PUSH
31898: LD_INT 2
31900: PUSH
31901: LD_INT 4
31903: PUSH
31904: LD_INT 5
31906: PUSH
31907: LD_INT 6
31909: PUSH
31910: LD_INT 8
31912: PUSH
31913: LD_INT 11
31915: PUSH
31916: LD_INT 12
31918: PUSH
31919: LD_INT 15
31921: PUSH
31922: LD_INT 16
31924: PUSH
31925: LD_INT 22
31927: PUSH
31928: LD_INT 23
31930: PUSH
31931: LD_INT 25
31933: PUSH
31934: LD_INT 26
31936: PUSH
31937: LD_INT 36
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 101
31958: PUSH
31959: LD_INT 102
31961: PUSH
31962: LD_INT 105
31964: PUSH
31965: LD_INT 106
31967: PUSH
31968: LD_INT 108
31970: PUSH
31971: LD_INT 109
31973: PUSH
31974: LD_INT 112
31976: PUSH
31977: LD_INT 116
31979: PUSH
31980: LD_INT 117
31982: PUSH
31983: LD_INT 118
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: ST_TO_ADDR
32002: GO 34665
32004: LD_INT 6
32006: DOUBLE
32007: EQUAL
32008: IFTRUE 32012
32010: GO 32144
32012: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
32013: LD_ADDR_VAR 0 1
32017: PUSH
32018: LD_INT 2
32020: PUSH
32021: LD_INT 4
32023: PUSH
32024: LD_INT 5
32026: PUSH
32027: LD_INT 6
32029: PUSH
32030: LD_INT 8
32032: PUSH
32033: LD_INT 11
32035: PUSH
32036: LD_INT 12
32038: PUSH
32039: LD_INT 15
32041: PUSH
32042: LD_INT 16
32044: PUSH
32045: LD_INT 20
32047: PUSH
32048: LD_INT 21
32050: PUSH
32051: LD_INT 22
32053: PUSH
32054: LD_INT 23
32056: PUSH
32057: LD_INT 25
32059: PUSH
32060: LD_INT 26
32062: PUSH
32063: LD_INT 30
32065: PUSH
32066: LD_INT 31
32068: PUSH
32069: LD_INT 32
32071: PUSH
32072: LD_INT 36
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 101
32098: PUSH
32099: LD_INT 102
32101: PUSH
32102: LD_INT 105
32104: PUSH
32105: LD_INT 106
32107: PUSH
32108: LD_INT 108
32110: PUSH
32111: LD_INT 109
32113: PUSH
32114: LD_INT 112
32116: PUSH
32117: LD_INT 116
32119: PUSH
32120: LD_INT 117
32122: PUSH
32123: LD_INT 118
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: ST_TO_ADDR
32142: GO 34665
32144: LD_INT 7
32146: DOUBLE
32147: EQUAL
32148: IFTRUE 32152
32150: GO 32264
32152: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
32153: LD_ADDR_VAR 0 1
32157: PUSH
32158: LD_INT 2
32160: PUSH
32161: LD_INT 4
32163: PUSH
32164: LD_INT 5
32166: PUSH
32167: LD_INT 7
32169: PUSH
32170: LD_INT 11
32172: PUSH
32173: LD_INT 12
32175: PUSH
32176: LD_INT 15
32178: PUSH
32179: LD_INT 16
32181: PUSH
32182: LD_INT 20
32184: PUSH
32185: LD_INT 21
32187: PUSH
32188: LD_INT 22
32190: PUSH
32191: LD_INT 23
32193: PUSH
32194: LD_INT 25
32196: PUSH
32197: LD_INT 26
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 101
32218: PUSH
32219: LD_INT 102
32221: PUSH
32222: LD_INT 103
32224: PUSH
32225: LD_INT 105
32227: PUSH
32228: LD_INT 106
32230: PUSH
32231: LD_INT 108
32233: PUSH
32234: LD_INT 112
32236: PUSH
32237: LD_INT 116
32239: PUSH
32240: LD_INT 117
32242: PUSH
32243: LD_INT 118
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: ST_TO_ADDR
32262: GO 34665
32264: LD_INT 8
32266: DOUBLE
32267: EQUAL
32268: IFTRUE 32272
32270: GO 32412
32272: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
32273: LD_ADDR_VAR 0 1
32277: PUSH
32278: LD_INT 2
32280: PUSH
32281: LD_INT 4
32283: PUSH
32284: LD_INT 5
32286: PUSH
32287: LD_INT 6
32289: PUSH
32290: LD_INT 7
32292: PUSH
32293: LD_INT 8
32295: PUSH
32296: LD_INT 11
32298: PUSH
32299: LD_INT 12
32301: PUSH
32302: LD_INT 15
32304: PUSH
32305: LD_INT 16
32307: PUSH
32308: LD_INT 20
32310: PUSH
32311: LD_INT 21
32313: PUSH
32314: LD_INT 22
32316: PUSH
32317: LD_INT 23
32319: PUSH
32320: LD_INT 25
32322: PUSH
32323: LD_INT 26
32325: PUSH
32326: LD_INT 30
32328: PUSH
32329: LD_INT 31
32331: PUSH
32332: LD_INT 32
32334: PUSH
32335: LD_INT 36
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 101
32362: PUSH
32363: LD_INT 102
32365: PUSH
32366: LD_INT 103
32368: PUSH
32369: LD_INT 105
32371: PUSH
32372: LD_INT 106
32374: PUSH
32375: LD_INT 108
32377: PUSH
32378: LD_INT 109
32380: PUSH
32381: LD_INT 112
32383: PUSH
32384: LD_INT 116
32386: PUSH
32387: LD_INT 117
32389: PUSH
32390: LD_INT 118
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: ST_TO_ADDR
32410: GO 34665
32412: LD_INT 9
32414: DOUBLE
32415: EQUAL
32416: IFTRUE 32420
32418: GO 32568
32420: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
32421: LD_ADDR_VAR 0 1
32425: PUSH
32426: LD_INT 2
32428: PUSH
32429: LD_INT 4
32431: PUSH
32432: LD_INT 5
32434: PUSH
32435: LD_INT 6
32437: PUSH
32438: LD_INT 7
32440: PUSH
32441: LD_INT 8
32443: PUSH
32444: LD_INT 11
32446: PUSH
32447: LD_INT 12
32449: PUSH
32450: LD_INT 15
32452: PUSH
32453: LD_INT 16
32455: PUSH
32456: LD_INT 20
32458: PUSH
32459: LD_INT 21
32461: PUSH
32462: LD_INT 22
32464: PUSH
32465: LD_INT 23
32467: PUSH
32468: LD_INT 25
32470: PUSH
32471: LD_INT 26
32473: PUSH
32474: LD_INT 28
32476: PUSH
32477: LD_INT 30
32479: PUSH
32480: LD_INT 31
32482: PUSH
32483: LD_INT 32
32485: PUSH
32486: LD_INT 36
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 101
32514: PUSH
32515: LD_INT 102
32517: PUSH
32518: LD_INT 103
32520: PUSH
32521: LD_INT 105
32523: PUSH
32524: LD_INT 106
32526: PUSH
32527: LD_INT 108
32529: PUSH
32530: LD_INT 109
32532: PUSH
32533: LD_INT 112
32535: PUSH
32536: LD_INT 114
32538: PUSH
32539: LD_INT 116
32541: PUSH
32542: LD_INT 117
32544: PUSH
32545: LD_INT 118
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: ST_TO_ADDR
32566: GO 34665
32568: LD_INT 10
32570: DOUBLE
32571: EQUAL
32572: IFTRUE 32576
32574: GO 32772
32576: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
32577: LD_ADDR_VAR 0 1
32581: PUSH
32582: LD_INT 2
32584: PUSH
32585: LD_INT 4
32587: PUSH
32588: LD_INT 5
32590: PUSH
32591: LD_INT 6
32593: PUSH
32594: LD_INT 7
32596: PUSH
32597: LD_INT 8
32599: PUSH
32600: LD_INT 9
32602: PUSH
32603: LD_INT 10
32605: PUSH
32606: LD_INT 11
32608: PUSH
32609: LD_INT 12
32611: PUSH
32612: LD_INT 13
32614: PUSH
32615: LD_INT 14
32617: PUSH
32618: LD_INT 15
32620: PUSH
32621: LD_INT 16
32623: PUSH
32624: LD_INT 17
32626: PUSH
32627: LD_INT 18
32629: PUSH
32630: LD_INT 19
32632: PUSH
32633: LD_INT 20
32635: PUSH
32636: LD_INT 21
32638: PUSH
32639: LD_INT 22
32641: PUSH
32642: LD_INT 23
32644: PUSH
32645: LD_INT 24
32647: PUSH
32648: LD_INT 25
32650: PUSH
32651: LD_INT 26
32653: PUSH
32654: LD_INT 28
32656: PUSH
32657: LD_INT 30
32659: PUSH
32660: LD_INT 31
32662: PUSH
32663: LD_INT 32
32665: PUSH
32666: LD_INT 36
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 101
32702: PUSH
32703: LD_INT 102
32705: PUSH
32706: LD_INT 103
32708: PUSH
32709: LD_INT 104
32711: PUSH
32712: LD_INT 105
32714: PUSH
32715: LD_INT 106
32717: PUSH
32718: LD_INT 107
32720: PUSH
32721: LD_INT 108
32723: PUSH
32724: LD_INT 109
32726: PUSH
32727: LD_INT 110
32729: PUSH
32730: LD_INT 111
32732: PUSH
32733: LD_INT 112
32735: PUSH
32736: LD_INT 114
32738: PUSH
32739: LD_INT 116
32741: PUSH
32742: LD_INT 117
32744: PUSH
32745: LD_INT 118
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: ST_TO_ADDR
32770: GO 34665
32772: LD_INT 11
32774: DOUBLE
32775: EQUAL
32776: IFTRUE 32780
32778: GO 32984
32780: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
32781: LD_ADDR_VAR 0 1
32785: PUSH
32786: LD_INT 2
32788: PUSH
32789: LD_INT 3
32791: PUSH
32792: LD_INT 4
32794: PUSH
32795: LD_INT 5
32797: PUSH
32798: LD_INT 6
32800: PUSH
32801: LD_INT 7
32803: PUSH
32804: LD_INT 8
32806: PUSH
32807: LD_INT 9
32809: PUSH
32810: LD_INT 10
32812: PUSH
32813: LD_INT 11
32815: PUSH
32816: LD_INT 12
32818: PUSH
32819: LD_INT 13
32821: PUSH
32822: LD_INT 14
32824: PUSH
32825: LD_INT 15
32827: PUSH
32828: LD_INT 16
32830: PUSH
32831: LD_INT 17
32833: PUSH
32834: LD_INT 18
32836: PUSH
32837: LD_INT 19
32839: PUSH
32840: LD_INT 20
32842: PUSH
32843: LD_INT 21
32845: PUSH
32846: LD_INT 22
32848: PUSH
32849: LD_INT 23
32851: PUSH
32852: LD_INT 24
32854: PUSH
32855: LD_INT 25
32857: PUSH
32858: LD_INT 26
32860: PUSH
32861: LD_INT 28
32863: PUSH
32864: LD_INT 30
32866: PUSH
32867: LD_INT 31
32869: PUSH
32870: LD_INT 32
32872: PUSH
32873: LD_INT 34
32875: PUSH
32876: LD_INT 36
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 101
32914: PUSH
32915: LD_INT 102
32917: PUSH
32918: LD_INT 103
32920: PUSH
32921: LD_INT 104
32923: PUSH
32924: LD_INT 105
32926: PUSH
32927: LD_INT 106
32929: PUSH
32930: LD_INT 107
32932: PUSH
32933: LD_INT 108
32935: PUSH
32936: LD_INT 109
32938: PUSH
32939: LD_INT 110
32941: PUSH
32942: LD_INT 111
32944: PUSH
32945: LD_INT 112
32947: PUSH
32948: LD_INT 114
32950: PUSH
32951: LD_INT 116
32953: PUSH
32954: LD_INT 117
32956: PUSH
32957: LD_INT 118
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: ST_TO_ADDR
32982: GO 34665
32984: LD_INT 12
32986: DOUBLE
32987: EQUAL
32988: IFTRUE 32992
32990: GO 33212
32992: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
32993: LD_ADDR_VAR 0 1
32997: PUSH
32998: LD_INT 1
33000: PUSH
33001: LD_INT 2
33003: PUSH
33004: LD_INT 3
33006: PUSH
33007: LD_INT 4
33009: PUSH
33010: LD_INT 5
33012: PUSH
33013: LD_INT 6
33015: PUSH
33016: LD_INT 7
33018: PUSH
33019: LD_INT 8
33021: PUSH
33022: LD_INT 9
33024: PUSH
33025: LD_INT 10
33027: PUSH
33028: LD_INT 11
33030: PUSH
33031: LD_INT 12
33033: PUSH
33034: LD_INT 13
33036: PUSH
33037: LD_INT 14
33039: PUSH
33040: LD_INT 15
33042: PUSH
33043: LD_INT 16
33045: PUSH
33046: LD_INT 17
33048: PUSH
33049: LD_INT 18
33051: PUSH
33052: LD_INT 19
33054: PUSH
33055: LD_INT 20
33057: PUSH
33058: LD_INT 21
33060: PUSH
33061: LD_INT 22
33063: PUSH
33064: LD_INT 23
33066: PUSH
33067: LD_INT 24
33069: PUSH
33070: LD_INT 25
33072: PUSH
33073: LD_INT 26
33075: PUSH
33076: LD_INT 27
33078: PUSH
33079: LD_INT 28
33081: PUSH
33082: LD_INT 30
33084: PUSH
33085: LD_INT 31
33087: PUSH
33088: LD_INT 32
33090: PUSH
33091: LD_INT 33
33093: PUSH
33094: LD_INT 34
33096: PUSH
33097: LD_INT 36
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 101
33138: PUSH
33139: LD_INT 102
33141: PUSH
33142: LD_INT 103
33144: PUSH
33145: LD_INT 104
33147: PUSH
33148: LD_INT 105
33150: PUSH
33151: LD_INT 106
33153: PUSH
33154: LD_INT 107
33156: PUSH
33157: LD_INT 108
33159: PUSH
33160: LD_INT 109
33162: PUSH
33163: LD_INT 110
33165: PUSH
33166: LD_INT 111
33168: PUSH
33169: LD_INT 112
33171: PUSH
33172: LD_INT 113
33174: PUSH
33175: LD_INT 114
33177: PUSH
33178: LD_INT 116
33180: PUSH
33181: LD_INT 117
33183: PUSH
33184: LD_INT 118
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: ST_TO_ADDR
33210: GO 34665
33212: LD_INT 13
33214: DOUBLE
33215: EQUAL
33216: IFTRUE 33220
33218: GO 33428
33220: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
33221: LD_ADDR_VAR 0 1
33225: PUSH
33226: LD_INT 1
33228: PUSH
33229: LD_INT 2
33231: PUSH
33232: LD_INT 3
33234: PUSH
33235: LD_INT 4
33237: PUSH
33238: LD_INT 5
33240: PUSH
33241: LD_INT 8
33243: PUSH
33244: LD_INT 9
33246: PUSH
33247: LD_INT 10
33249: PUSH
33250: LD_INT 11
33252: PUSH
33253: LD_INT 12
33255: PUSH
33256: LD_INT 14
33258: PUSH
33259: LD_INT 15
33261: PUSH
33262: LD_INT 16
33264: PUSH
33265: LD_INT 17
33267: PUSH
33268: LD_INT 18
33270: PUSH
33271: LD_INT 19
33273: PUSH
33274: LD_INT 20
33276: PUSH
33277: LD_INT 21
33279: PUSH
33280: LD_INT 22
33282: PUSH
33283: LD_INT 23
33285: PUSH
33286: LD_INT 24
33288: PUSH
33289: LD_INT 25
33291: PUSH
33292: LD_INT 26
33294: PUSH
33295: LD_INT 27
33297: PUSH
33298: LD_INT 28
33300: PUSH
33301: LD_INT 30
33303: PUSH
33304: LD_INT 31
33306: PUSH
33307: LD_INT 32
33309: PUSH
33310: LD_INT 33
33312: PUSH
33313: LD_INT 34
33315: PUSH
33316: LD_INT 36
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 101
33354: PUSH
33355: LD_INT 102
33357: PUSH
33358: LD_INT 103
33360: PUSH
33361: LD_INT 104
33363: PUSH
33364: LD_INT 105
33366: PUSH
33367: LD_INT 106
33369: PUSH
33370: LD_INT 107
33372: PUSH
33373: LD_INT 108
33375: PUSH
33376: LD_INT 109
33378: PUSH
33379: LD_INT 110
33381: PUSH
33382: LD_INT 111
33384: PUSH
33385: LD_INT 112
33387: PUSH
33388: LD_INT 113
33390: PUSH
33391: LD_INT 114
33393: PUSH
33394: LD_INT 116
33396: PUSH
33397: LD_INT 117
33399: PUSH
33400: LD_INT 118
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: ST_TO_ADDR
33426: GO 34665
33428: LD_INT 14
33430: DOUBLE
33431: EQUAL
33432: IFTRUE 33436
33434: GO 33660
33436: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
33437: LD_ADDR_VAR 0 1
33441: PUSH
33442: LD_INT 1
33444: PUSH
33445: LD_INT 2
33447: PUSH
33448: LD_INT 3
33450: PUSH
33451: LD_INT 4
33453: PUSH
33454: LD_INT 5
33456: PUSH
33457: LD_INT 6
33459: PUSH
33460: LD_INT 7
33462: PUSH
33463: LD_INT 8
33465: PUSH
33466: LD_INT 9
33468: PUSH
33469: LD_INT 10
33471: PUSH
33472: LD_INT 11
33474: PUSH
33475: LD_INT 12
33477: PUSH
33478: LD_INT 13
33480: PUSH
33481: LD_INT 14
33483: PUSH
33484: LD_INT 15
33486: PUSH
33487: LD_INT 16
33489: PUSH
33490: LD_INT 17
33492: PUSH
33493: LD_INT 18
33495: PUSH
33496: LD_INT 19
33498: PUSH
33499: LD_INT 20
33501: PUSH
33502: LD_INT 21
33504: PUSH
33505: LD_INT 22
33507: PUSH
33508: LD_INT 23
33510: PUSH
33511: LD_INT 24
33513: PUSH
33514: LD_INT 25
33516: PUSH
33517: LD_INT 26
33519: PUSH
33520: LD_INT 27
33522: PUSH
33523: LD_INT 28
33525: PUSH
33526: LD_INT 29
33528: PUSH
33529: LD_INT 30
33531: PUSH
33532: LD_INT 31
33534: PUSH
33535: LD_INT 32
33537: PUSH
33538: LD_INT 33
33540: PUSH
33541: LD_INT 34
33543: PUSH
33544: LD_INT 36
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 101
33586: PUSH
33587: LD_INT 102
33589: PUSH
33590: LD_INT 103
33592: PUSH
33593: LD_INT 104
33595: PUSH
33596: LD_INT 105
33598: PUSH
33599: LD_INT 106
33601: PUSH
33602: LD_INT 107
33604: PUSH
33605: LD_INT 108
33607: PUSH
33608: LD_INT 109
33610: PUSH
33611: LD_INT 110
33613: PUSH
33614: LD_INT 111
33616: PUSH
33617: LD_INT 112
33619: PUSH
33620: LD_INT 113
33622: PUSH
33623: LD_INT 114
33625: PUSH
33626: LD_INT 116
33628: PUSH
33629: LD_INT 117
33631: PUSH
33632: LD_INT 118
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: ST_TO_ADDR
33658: GO 34665
33660: LD_INT 15
33662: DOUBLE
33663: EQUAL
33664: IFTRUE 33668
33666: GO 33892
33668: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
33669: LD_ADDR_VAR 0 1
33673: PUSH
33674: LD_INT 1
33676: PUSH
33677: LD_INT 2
33679: PUSH
33680: LD_INT 3
33682: PUSH
33683: LD_INT 4
33685: PUSH
33686: LD_INT 5
33688: PUSH
33689: LD_INT 6
33691: PUSH
33692: LD_INT 7
33694: PUSH
33695: LD_INT 8
33697: PUSH
33698: LD_INT 9
33700: PUSH
33701: LD_INT 10
33703: PUSH
33704: LD_INT 11
33706: PUSH
33707: LD_INT 12
33709: PUSH
33710: LD_INT 13
33712: PUSH
33713: LD_INT 14
33715: PUSH
33716: LD_INT 15
33718: PUSH
33719: LD_INT 16
33721: PUSH
33722: LD_INT 17
33724: PUSH
33725: LD_INT 18
33727: PUSH
33728: LD_INT 19
33730: PUSH
33731: LD_INT 20
33733: PUSH
33734: LD_INT 21
33736: PUSH
33737: LD_INT 22
33739: PUSH
33740: LD_INT 23
33742: PUSH
33743: LD_INT 24
33745: PUSH
33746: LD_INT 25
33748: PUSH
33749: LD_INT 26
33751: PUSH
33752: LD_INT 27
33754: PUSH
33755: LD_INT 28
33757: PUSH
33758: LD_INT 29
33760: PUSH
33761: LD_INT 30
33763: PUSH
33764: LD_INT 31
33766: PUSH
33767: LD_INT 32
33769: PUSH
33770: LD_INT 33
33772: PUSH
33773: LD_INT 34
33775: PUSH
33776: LD_INT 36
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 101
33818: PUSH
33819: LD_INT 102
33821: PUSH
33822: LD_INT 103
33824: PUSH
33825: LD_INT 104
33827: PUSH
33828: LD_INT 105
33830: PUSH
33831: LD_INT 106
33833: PUSH
33834: LD_INT 107
33836: PUSH
33837: LD_INT 108
33839: PUSH
33840: LD_INT 109
33842: PUSH
33843: LD_INT 110
33845: PUSH
33846: LD_INT 111
33848: PUSH
33849: LD_INT 112
33851: PUSH
33852: LD_INT 113
33854: PUSH
33855: LD_INT 114
33857: PUSH
33858: LD_INT 116
33860: PUSH
33861: LD_INT 117
33863: PUSH
33864: LD_INT 118
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: ST_TO_ADDR
33890: GO 34665
33892: LD_INT 16
33894: DOUBLE
33895: EQUAL
33896: IFTRUE 33900
33898: GO 34036
33900: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
33901: LD_ADDR_VAR 0 1
33905: PUSH
33906: LD_INT 2
33908: PUSH
33909: LD_INT 4
33911: PUSH
33912: LD_INT 5
33914: PUSH
33915: LD_INT 7
33917: PUSH
33918: LD_INT 11
33920: PUSH
33921: LD_INT 12
33923: PUSH
33924: LD_INT 15
33926: PUSH
33927: LD_INT 16
33929: PUSH
33930: LD_INT 20
33932: PUSH
33933: LD_INT 21
33935: PUSH
33936: LD_INT 22
33938: PUSH
33939: LD_INT 23
33941: PUSH
33942: LD_INT 25
33944: PUSH
33945: LD_INT 26
33947: PUSH
33948: LD_INT 30
33950: PUSH
33951: LD_INT 31
33953: PUSH
33954: LD_INT 32
33956: PUSH
33957: LD_INT 33
33959: PUSH
33960: LD_INT 34
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 101
33986: PUSH
33987: LD_INT 102
33989: PUSH
33990: LD_INT 103
33992: PUSH
33993: LD_INT 106
33995: PUSH
33996: LD_INT 108
33998: PUSH
33999: LD_INT 112
34001: PUSH
34002: LD_INT 113
34004: PUSH
34005: LD_INT 114
34007: PUSH
34008: LD_INT 116
34010: PUSH
34011: LD_INT 117
34013: PUSH
34014: LD_INT 118
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: ST_TO_ADDR
34034: GO 34665
34036: LD_INT 17
34038: DOUBLE
34039: EQUAL
34040: IFTRUE 34044
34042: GO 34268
34044: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
34045: LD_ADDR_VAR 0 1
34049: PUSH
34050: LD_INT 1
34052: PUSH
34053: LD_INT 2
34055: PUSH
34056: LD_INT 3
34058: PUSH
34059: LD_INT 4
34061: PUSH
34062: LD_INT 5
34064: PUSH
34065: LD_INT 6
34067: PUSH
34068: LD_INT 7
34070: PUSH
34071: LD_INT 8
34073: PUSH
34074: LD_INT 9
34076: PUSH
34077: LD_INT 10
34079: PUSH
34080: LD_INT 11
34082: PUSH
34083: LD_INT 12
34085: PUSH
34086: LD_INT 13
34088: PUSH
34089: LD_INT 14
34091: PUSH
34092: LD_INT 15
34094: PUSH
34095: LD_INT 16
34097: PUSH
34098: LD_INT 17
34100: PUSH
34101: LD_INT 18
34103: PUSH
34104: LD_INT 19
34106: PUSH
34107: LD_INT 20
34109: PUSH
34110: LD_INT 21
34112: PUSH
34113: LD_INT 22
34115: PUSH
34116: LD_INT 23
34118: PUSH
34119: LD_INT 24
34121: PUSH
34122: LD_INT 25
34124: PUSH
34125: LD_INT 26
34127: PUSH
34128: LD_INT 27
34130: PUSH
34131: LD_INT 28
34133: PUSH
34134: LD_INT 29
34136: PUSH
34137: LD_INT 30
34139: PUSH
34140: LD_INT 31
34142: PUSH
34143: LD_INT 32
34145: PUSH
34146: LD_INT 33
34148: PUSH
34149: LD_INT 34
34151: PUSH
34152: LD_INT 36
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 101
34194: PUSH
34195: LD_INT 102
34197: PUSH
34198: LD_INT 103
34200: PUSH
34201: LD_INT 104
34203: PUSH
34204: LD_INT 105
34206: PUSH
34207: LD_INT 106
34209: PUSH
34210: LD_INT 107
34212: PUSH
34213: LD_INT 108
34215: PUSH
34216: LD_INT 109
34218: PUSH
34219: LD_INT 110
34221: PUSH
34222: LD_INT 111
34224: PUSH
34225: LD_INT 112
34227: PUSH
34228: LD_INT 113
34230: PUSH
34231: LD_INT 114
34233: PUSH
34234: LD_INT 116
34236: PUSH
34237: LD_INT 117
34239: PUSH
34240: LD_INT 118
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: ST_TO_ADDR
34266: GO 34665
34268: LD_INT 18
34270: DOUBLE
34271: EQUAL
34272: IFTRUE 34276
34274: GO 34424
34276: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
34277: LD_ADDR_VAR 0 1
34281: PUSH
34282: LD_INT 2
34284: PUSH
34285: LD_INT 4
34287: PUSH
34288: LD_INT 5
34290: PUSH
34291: LD_INT 7
34293: PUSH
34294: LD_INT 11
34296: PUSH
34297: LD_INT 12
34299: PUSH
34300: LD_INT 15
34302: PUSH
34303: LD_INT 16
34305: PUSH
34306: LD_INT 20
34308: PUSH
34309: LD_INT 21
34311: PUSH
34312: LD_INT 22
34314: PUSH
34315: LD_INT 23
34317: PUSH
34318: LD_INT 25
34320: PUSH
34321: LD_INT 26
34323: PUSH
34324: LD_INT 30
34326: PUSH
34327: LD_INT 31
34329: PUSH
34330: LD_INT 32
34332: PUSH
34333: LD_INT 33
34335: PUSH
34336: LD_INT 34
34338: PUSH
34339: LD_INT 35
34341: PUSH
34342: LD_INT 36
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 101
34370: PUSH
34371: LD_INT 102
34373: PUSH
34374: LD_INT 103
34376: PUSH
34377: LD_INT 106
34379: PUSH
34380: LD_INT 108
34382: PUSH
34383: LD_INT 112
34385: PUSH
34386: LD_INT 113
34388: PUSH
34389: LD_INT 114
34391: PUSH
34392: LD_INT 115
34394: PUSH
34395: LD_INT 116
34397: PUSH
34398: LD_INT 117
34400: PUSH
34401: LD_INT 118
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: ST_TO_ADDR
34422: GO 34665
34424: LD_INT 19
34426: DOUBLE
34427: EQUAL
34428: IFTRUE 34432
34430: GO 34664
34432: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
34433: LD_ADDR_VAR 0 1
34437: PUSH
34438: LD_INT 1
34440: PUSH
34441: LD_INT 2
34443: PUSH
34444: LD_INT 3
34446: PUSH
34447: LD_INT 4
34449: PUSH
34450: LD_INT 5
34452: PUSH
34453: LD_INT 6
34455: PUSH
34456: LD_INT 7
34458: PUSH
34459: LD_INT 8
34461: PUSH
34462: LD_INT 9
34464: PUSH
34465: LD_INT 10
34467: PUSH
34468: LD_INT 11
34470: PUSH
34471: LD_INT 12
34473: PUSH
34474: LD_INT 13
34476: PUSH
34477: LD_INT 14
34479: PUSH
34480: LD_INT 15
34482: PUSH
34483: LD_INT 16
34485: PUSH
34486: LD_INT 17
34488: PUSH
34489: LD_INT 18
34491: PUSH
34492: LD_INT 19
34494: PUSH
34495: LD_INT 20
34497: PUSH
34498: LD_INT 21
34500: PUSH
34501: LD_INT 22
34503: PUSH
34504: LD_INT 23
34506: PUSH
34507: LD_INT 24
34509: PUSH
34510: LD_INT 25
34512: PUSH
34513: LD_INT 26
34515: PUSH
34516: LD_INT 27
34518: PUSH
34519: LD_INT 28
34521: PUSH
34522: LD_INT 29
34524: PUSH
34525: LD_INT 30
34527: PUSH
34528: LD_INT 31
34530: PUSH
34531: LD_INT 32
34533: PUSH
34534: LD_INT 33
34536: PUSH
34537: LD_INT 34
34539: PUSH
34540: LD_INT 35
34542: PUSH
34543: LD_INT 36
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 101
34586: PUSH
34587: LD_INT 102
34589: PUSH
34590: LD_INT 103
34592: PUSH
34593: LD_INT 104
34595: PUSH
34596: LD_INT 105
34598: PUSH
34599: LD_INT 106
34601: PUSH
34602: LD_INT 107
34604: PUSH
34605: LD_INT 108
34607: PUSH
34608: LD_INT 109
34610: PUSH
34611: LD_INT 110
34613: PUSH
34614: LD_INT 111
34616: PUSH
34617: LD_INT 112
34619: PUSH
34620: LD_INT 113
34622: PUSH
34623: LD_INT 114
34625: PUSH
34626: LD_INT 115
34628: PUSH
34629: LD_INT 116
34631: PUSH
34632: LD_INT 117
34634: PUSH
34635: LD_INT 118
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: ST_TO_ADDR
34662: GO 34665
34664: POP
// end else
34665: GO 34896
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
34667: LD_ADDR_VAR 0 1
34671: PUSH
34672: LD_INT 1
34674: PUSH
34675: LD_INT 2
34677: PUSH
34678: LD_INT 3
34680: PUSH
34681: LD_INT 4
34683: PUSH
34684: LD_INT 5
34686: PUSH
34687: LD_INT 6
34689: PUSH
34690: LD_INT 7
34692: PUSH
34693: LD_INT 8
34695: PUSH
34696: LD_INT 9
34698: PUSH
34699: LD_INT 10
34701: PUSH
34702: LD_INT 11
34704: PUSH
34705: LD_INT 12
34707: PUSH
34708: LD_INT 13
34710: PUSH
34711: LD_INT 14
34713: PUSH
34714: LD_INT 15
34716: PUSH
34717: LD_INT 16
34719: PUSH
34720: LD_INT 17
34722: PUSH
34723: LD_INT 18
34725: PUSH
34726: LD_INT 19
34728: PUSH
34729: LD_INT 20
34731: PUSH
34732: LD_INT 21
34734: PUSH
34735: LD_INT 22
34737: PUSH
34738: LD_INT 23
34740: PUSH
34741: LD_INT 24
34743: PUSH
34744: LD_INT 25
34746: PUSH
34747: LD_INT 26
34749: PUSH
34750: LD_INT 27
34752: PUSH
34753: LD_INT 28
34755: PUSH
34756: LD_INT 29
34758: PUSH
34759: LD_INT 30
34761: PUSH
34762: LD_INT 31
34764: PUSH
34765: LD_INT 32
34767: PUSH
34768: LD_INT 33
34770: PUSH
34771: LD_INT 34
34773: PUSH
34774: LD_INT 35
34776: PUSH
34777: LD_INT 36
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 101
34820: PUSH
34821: LD_INT 102
34823: PUSH
34824: LD_INT 103
34826: PUSH
34827: LD_INT 104
34829: PUSH
34830: LD_INT 105
34832: PUSH
34833: LD_INT 106
34835: PUSH
34836: LD_INT 107
34838: PUSH
34839: LD_INT 108
34841: PUSH
34842: LD_INT 109
34844: PUSH
34845: LD_INT 110
34847: PUSH
34848: LD_INT 111
34850: PUSH
34851: LD_INT 112
34853: PUSH
34854: LD_INT 113
34856: PUSH
34857: LD_INT 114
34859: PUSH
34860: LD_INT 115
34862: PUSH
34863: LD_INT 116
34865: PUSH
34866: LD_INT 117
34868: PUSH
34869: LD_INT 118
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: ST_TO_ADDR
// if result then
34896: LD_VAR 0 1
34900: IFFALSE 35189
// begin normal :=  ;
34902: LD_ADDR_VAR 0 3
34906: PUSH
34907: LD_STRING 
34909: ST_TO_ADDR
// hardcore :=  ;
34910: LD_ADDR_VAR 0 4
34914: PUSH
34915: LD_STRING 
34917: ST_TO_ADDR
// for i = 1 to normalCounter do
34918: LD_ADDR_VAR 0 5
34922: PUSH
34923: DOUBLE
34924: LD_INT 1
34926: DEC
34927: ST_TO_ADDR
34928: LD_EXP 89
34932: PUSH
34933: FOR_TO
34934: IFFALSE 35035
// begin tmp := 0 ;
34936: LD_ADDR_VAR 0 2
34940: PUSH
34941: LD_STRING 0
34943: ST_TO_ADDR
// if result [ 1 ] then
34944: LD_VAR 0 1
34948: PUSH
34949: LD_INT 1
34951: ARRAY
34952: IFFALSE 35017
// if result [ 1 ] [ 1 ] = i then
34954: LD_VAR 0 1
34958: PUSH
34959: LD_INT 1
34961: ARRAY
34962: PUSH
34963: LD_INT 1
34965: ARRAY
34966: PUSH
34967: LD_VAR 0 5
34971: EQUAL
34972: IFFALSE 35017
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
34974: LD_ADDR_VAR 0 1
34978: PUSH
34979: LD_VAR 0 1
34983: PPUSH
34984: LD_INT 1
34986: PPUSH
34987: LD_VAR 0 1
34991: PUSH
34992: LD_INT 1
34994: ARRAY
34995: PPUSH
34996: LD_INT 1
34998: PPUSH
34999: CALL_OW 3
35003: PPUSH
35004: CALL_OW 1
35008: ST_TO_ADDR
// tmp := 1 ;
35009: LD_ADDR_VAR 0 2
35013: PUSH
35014: LD_STRING 1
35016: ST_TO_ADDR
// end ; normal := normal & tmp ;
35017: LD_ADDR_VAR 0 3
35021: PUSH
35022: LD_VAR 0 3
35026: PUSH
35027: LD_VAR 0 2
35031: STR
35032: ST_TO_ADDR
// end ;
35033: GO 34933
35035: POP
35036: POP
// for i = 1 to hardcoreCounter do
35037: LD_ADDR_VAR 0 5
35041: PUSH
35042: DOUBLE
35043: LD_INT 1
35045: DEC
35046: ST_TO_ADDR
35047: LD_EXP 90
35051: PUSH
35052: FOR_TO
35053: IFFALSE 35158
// begin tmp := 0 ;
35055: LD_ADDR_VAR 0 2
35059: PUSH
35060: LD_STRING 0
35062: ST_TO_ADDR
// if result [ 2 ] then
35063: LD_VAR 0 1
35067: PUSH
35068: LD_INT 2
35070: ARRAY
35071: IFFALSE 35140
// if result [ 2 ] [ 1 ] = 100 + i then
35073: LD_VAR 0 1
35077: PUSH
35078: LD_INT 2
35080: ARRAY
35081: PUSH
35082: LD_INT 1
35084: ARRAY
35085: PUSH
35086: LD_INT 100
35088: PUSH
35089: LD_VAR 0 5
35093: PLUS
35094: EQUAL
35095: IFFALSE 35140
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
35097: LD_ADDR_VAR 0 1
35101: PUSH
35102: LD_VAR 0 1
35106: PPUSH
35107: LD_INT 2
35109: PPUSH
35110: LD_VAR 0 1
35114: PUSH
35115: LD_INT 2
35117: ARRAY
35118: PPUSH
35119: LD_INT 1
35121: PPUSH
35122: CALL_OW 3
35126: PPUSH
35127: CALL_OW 1
35131: ST_TO_ADDR
// tmp := 1 ;
35132: LD_ADDR_VAR 0 2
35136: PUSH
35137: LD_STRING 1
35139: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
35140: LD_ADDR_VAR 0 4
35144: PUSH
35145: LD_VAR 0 4
35149: PUSH
35150: LD_VAR 0 2
35154: STR
35155: ST_TO_ADDR
// end ;
35156: GO 35052
35158: POP
35159: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
35160: LD_STRING getStreamItemsFromMission("
35162: PUSH
35163: LD_VAR 0 3
35167: STR
35168: PUSH
35169: LD_STRING ","
35171: STR
35172: PUSH
35173: LD_VAR 0 4
35177: STR
35178: PUSH
35179: LD_STRING ")
35181: STR
35182: PPUSH
35183: CALL_OW 559
// end else
35187: GO 35196
// ToLua ( getStreamItemsFromMission("","") ) ;
35189: LD_STRING getStreamItemsFromMission("","")
35191: PPUSH
35192: CALL_OW 559
// end ;
35196: LD_VAR 0 1
35200: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
35201: LD_EXP 88
35205: PUSH
35206: LD_EXP 93
35210: AND
35211: IFFALSE 35335
35213: GO 35215
35215: DISABLE
35216: LD_INT 0
35218: PPUSH
35219: PPUSH
// begin enable ;
35220: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
35221: LD_ADDR_VAR 0 2
35225: PUSH
35226: LD_INT 22
35228: PUSH
35229: LD_OWVAR 2
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 2
35240: PUSH
35241: LD_INT 34
35243: PUSH
35244: LD_INT 7
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 34
35253: PUSH
35254: LD_INT 45
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 34
35263: PUSH
35264: LD_INT 28
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 34
35273: PUSH
35274: LD_INT 47
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PPUSH
35292: CALL_OW 69
35296: ST_TO_ADDR
// if not tmp then
35297: LD_VAR 0 2
35301: NOT
35302: IFFALSE 35306
// exit ;
35304: GO 35335
// for i in tmp do
35306: LD_ADDR_VAR 0 1
35310: PUSH
35311: LD_VAR 0 2
35315: PUSH
35316: FOR_IN
35317: IFFALSE 35333
// begin SetLives ( i , 0 ) ;
35319: LD_VAR 0 1
35323: PPUSH
35324: LD_INT 0
35326: PPUSH
35327: CALL_OW 234
// end ;
35331: GO 35316
35333: POP
35334: POP
// end ;
35335: PPOPN 2
35337: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
35338: LD_EXP 88
35342: PUSH
35343: LD_EXP 94
35347: AND
35348: IFFALSE 35432
35350: GO 35352
35352: DISABLE
35353: LD_INT 0
35355: PPUSH
35356: PPUSH
// begin enable ;
35357: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
35358: LD_ADDR_VAR 0 2
35362: PUSH
35363: LD_INT 22
35365: PUSH
35366: LD_OWVAR 2
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 32
35377: PUSH
35378: LD_INT 3
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PPUSH
35389: CALL_OW 69
35393: ST_TO_ADDR
// if not tmp then
35394: LD_VAR 0 2
35398: NOT
35399: IFFALSE 35403
// exit ;
35401: GO 35432
// for i in tmp do
35403: LD_ADDR_VAR 0 1
35407: PUSH
35408: LD_VAR 0 2
35412: PUSH
35413: FOR_IN
35414: IFFALSE 35430
// begin SetLives ( i , 0 ) ;
35416: LD_VAR 0 1
35420: PPUSH
35421: LD_INT 0
35423: PPUSH
35424: CALL_OW 234
// end ;
35428: GO 35413
35430: POP
35431: POP
// end ;
35432: PPOPN 2
35434: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
35435: LD_EXP 88
35439: PUSH
35440: LD_EXP 91
35444: AND
35445: IFFALSE 35538
35447: GO 35449
35449: DISABLE
35450: LD_INT 0
35452: PPUSH
// begin enable ;
35453: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
35454: LD_ADDR_VAR 0 1
35458: PUSH
35459: LD_INT 22
35461: PUSH
35462: LD_OWVAR 2
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 2
35473: PUSH
35474: LD_INT 25
35476: PUSH
35477: LD_INT 5
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 25
35486: PUSH
35487: LD_INT 9
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 25
35496: PUSH
35497: LD_INT 8
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PPUSH
35514: CALL_OW 69
35518: PUSH
35519: FOR_IN
35520: IFFALSE 35536
// begin SetClass ( i , 1 ) ;
35522: LD_VAR 0 1
35526: PPUSH
35527: LD_INT 1
35529: PPUSH
35530: CALL_OW 336
// end ;
35534: GO 35519
35536: POP
35537: POP
// end ;
35538: PPOPN 1
35540: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
35541: LD_EXP 88
35545: PUSH
35546: LD_EXP 92
35550: AND
35551: PUSH
35552: LD_OWVAR 65
35556: PUSH
35557: LD_INT 7
35559: LESS
35560: AND
35561: IFFALSE 35575
35563: GO 35565
35565: DISABLE
// begin enable ;
35566: ENABLE
// game_speed := 7 ;
35567: LD_ADDR_OWVAR 65
35571: PUSH
35572: LD_INT 7
35574: ST_TO_ADDR
// end ;
35575: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
35576: LD_EXP 88
35580: PUSH
35581: LD_EXP 95
35585: AND
35586: IFFALSE 35788
35588: GO 35590
35590: DISABLE
35591: LD_INT 0
35593: PPUSH
35594: PPUSH
35595: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
35596: LD_ADDR_VAR 0 3
35600: PUSH
35601: LD_INT 81
35603: PUSH
35604: LD_OWVAR 2
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 21
35615: PUSH
35616: LD_INT 1
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PPUSH
35627: CALL_OW 69
35631: ST_TO_ADDR
// if not tmp then
35632: LD_VAR 0 3
35636: NOT
35637: IFFALSE 35641
// exit ;
35639: GO 35788
// if tmp > 5 then
35641: LD_VAR 0 3
35645: PUSH
35646: LD_INT 5
35648: GREATER
35649: IFFALSE 35661
// k := 5 else
35651: LD_ADDR_VAR 0 2
35655: PUSH
35656: LD_INT 5
35658: ST_TO_ADDR
35659: GO 35671
// k := tmp ;
35661: LD_ADDR_VAR 0 2
35665: PUSH
35666: LD_VAR 0 3
35670: ST_TO_ADDR
// for i := 1 to k do
35671: LD_ADDR_VAR 0 1
35675: PUSH
35676: DOUBLE
35677: LD_INT 1
35679: DEC
35680: ST_TO_ADDR
35681: LD_VAR 0 2
35685: PUSH
35686: FOR_TO
35687: IFFALSE 35786
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
35689: LD_VAR 0 3
35693: PUSH
35694: LD_VAR 0 1
35698: ARRAY
35699: PPUSH
35700: LD_VAR 0 1
35704: PUSH
35705: LD_INT 4
35707: MOD
35708: PUSH
35709: LD_INT 1
35711: PLUS
35712: PPUSH
35713: CALL_OW 259
35717: PUSH
35718: LD_INT 10
35720: LESS
35721: IFFALSE 35784
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
35723: LD_VAR 0 3
35727: PUSH
35728: LD_VAR 0 1
35732: ARRAY
35733: PPUSH
35734: LD_VAR 0 1
35738: PUSH
35739: LD_INT 4
35741: MOD
35742: PUSH
35743: LD_INT 1
35745: PLUS
35746: PPUSH
35747: LD_VAR 0 3
35751: PUSH
35752: LD_VAR 0 1
35756: ARRAY
35757: PPUSH
35758: LD_VAR 0 1
35762: PUSH
35763: LD_INT 4
35765: MOD
35766: PUSH
35767: LD_INT 1
35769: PLUS
35770: PPUSH
35771: CALL_OW 259
35775: PUSH
35776: LD_INT 1
35778: PLUS
35779: PPUSH
35780: CALL_OW 237
35784: GO 35686
35786: POP
35787: POP
// end ;
35788: PPOPN 3
35790: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
35791: LD_EXP 88
35795: PUSH
35796: LD_EXP 96
35800: AND
35801: IFFALSE 35821
35803: GO 35805
35805: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
35806: LD_INT 4
35808: PPUSH
35809: LD_OWVAR 2
35813: PPUSH
35814: LD_INT 0
35816: PPUSH
35817: CALL_OW 324
35821: END
// every 0 0$1 trigger StreamModeActive and sShovel do
35822: LD_EXP 88
35826: PUSH
35827: LD_EXP 125
35831: AND
35832: IFFALSE 35852
35834: GO 35836
35836: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
35837: LD_INT 19
35839: PPUSH
35840: LD_OWVAR 2
35844: PPUSH
35845: LD_INT 0
35847: PPUSH
35848: CALL_OW 324
35852: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
35853: LD_EXP 88
35857: PUSH
35858: LD_EXP 97
35862: AND
35863: IFFALSE 35965
35865: GO 35867
35867: DISABLE
35868: LD_INT 0
35870: PPUSH
35871: PPUSH
// begin enable ;
35872: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
35873: LD_ADDR_VAR 0 2
35877: PUSH
35878: LD_INT 22
35880: PUSH
35881: LD_OWVAR 2
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 2
35892: PUSH
35893: LD_INT 34
35895: PUSH
35896: LD_INT 11
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 34
35905: PUSH
35906: LD_INT 30
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: LIST
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PPUSH
35922: CALL_OW 69
35926: ST_TO_ADDR
// if not tmp then
35927: LD_VAR 0 2
35931: NOT
35932: IFFALSE 35936
// exit ;
35934: GO 35965
// for i in tmp do
35936: LD_ADDR_VAR 0 1
35940: PUSH
35941: LD_VAR 0 2
35945: PUSH
35946: FOR_IN
35947: IFFALSE 35963
// begin SetLives ( i , 0 ) ;
35949: LD_VAR 0 1
35953: PPUSH
35954: LD_INT 0
35956: PPUSH
35957: CALL_OW 234
// end ;
35961: GO 35946
35963: POP
35964: POP
// end ;
35965: PPOPN 2
35967: END
// every 0 0$1 trigger StreamModeActive and sBunker do
35968: LD_EXP 88
35972: PUSH
35973: LD_EXP 98
35977: AND
35978: IFFALSE 35998
35980: GO 35982
35982: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
35983: LD_INT 32
35985: PPUSH
35986: LD_OWVAR 2
35990: PPUSH
35991: LD_INT 0
35993: PPUSH
35994: CALL_OW 324
35998: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
35999: LD_EXP 88
36003: PUSH
36004: LD_EXP 99
36008: AND
36009: IFFALSE 36190
36011: GO 36013
36013: DISABLE
36014: LD_INT 0
36016: PPUSH
36017: PPUSH
36018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
36019: LD_ADDR_VAR 0 2
36023: PUSH
36024: LD_INT 22
36026: PUSH
36027: LD_OWVAR 2
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 33
36038: PUSH
36039: LD_INT 3
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PPUSH
36050: CALL_OW 69
36054: ST_TO_ADDR
// if not tmp then
36055: LD_VAR 0 2
36059: NOT
36060: IFFALSE 36064
// exit ;
36062: GO 36190
// side := 0 ;
36064: LD_ADDR_VAR 0 3
36068: PUSH
36069: LD_INT 0
36071: ST_TO_ADDR
// for i := 1 to 8 do
36072: LD_ADDR_VAR 0 1
36076: PUSH
36077: DOUBLE
36078: LD_INT 1
36080: DEC
36081: ST_TO_ADDR
36082: LD_INT 8
36084: PUSH
36085: FOR_TO
36086: IFFALSE 36134
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
36088: LD_OWVAR 2
36092: PUSH
36093: LD_VAR 0 1
36097: NONEQUAL
36098: PUSH
36099: LD_OWVAR 2
36103: PPUSH
36104: LD_VAR 0 1
36108: PPUSH
36109: CALL_OW 81
36113: PUSH
36114: LD_INT 2
36116: EQUAL
36117: AND
36118: IFFALSE 36132
// begin side := i ;
36120: LD_ADDR_VAR 0 3
36124: PUSH
36125: LD_VAR 0 1
36129: ST_TO_ADDR
// break ;
36130: GO 36134
// end ;
36132: GO 36085
36134: POP
36135: POP
// if not side then
36136: LD_VAR 0 3
36140: NOT
36141: IFFALSE 36145
// exit ;
36143: GO 36190
// for i := 1 to tmp do
36145: LD_ADDR_VAR 0 1
36149: PUSH
36150: DOUBLE
36151: LD_INT 1
36153: DEC
36154: ST_TO_ADDR
36155: LD_VAR 0 2
36159: PUSH
36160: FOR_TO
36161: IFFALSE 36188
// if Prob ( 60 ) then
36163: LD_INT 60
36165: PPUSH
36166: CALL_OW 13
36170: IFFALSE 36186
// SetSide ( i , side ) ;
36172: LD_VAR 0 1
36176: PPUSH
36177: LD_VAR 0 3
36181: PPUSH
36182: CALL_OW 235
36186: GO 36160
36188: POP
36189: POP
// end ;
36190: PPOPN 3
36192: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
36193: LD_EXP 88
36197: PUSH
36198: LD_EXP 101
36202: AND
36203: IFFALSE 36322
36205: GO 36207
36207: DISABLE
36208: LD_INT 0
36210: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
36211: LD_ADDR_VAR 0 1
36215: PUSH
36216: LD_INT 22
36218: PUSH
36219: LD_OWVAR 2
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 21
36230: PUSH
36231: LD_INT 1
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 3
36240: PUSH
36241: LD_INT 23
36243: PUSH
36244: LD_INT 0
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: LIST
36259: PPUSH
36260: CALL_OW 69
36264: PUSH
36265: FOR_IN
36266: IFFALSE 36320
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
36268: LD_VAR 0 1
36272: PPUSH
36273: CALL_OW 257
36277: PUSH
36278: LD_INT 1
36280: PUSH
36281: LD_INT 2
36283: PUSH
36284: LD_INT 3
36286: PUSH
36287: LD_INT 4
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: IN
36296: IFFALSE 36318
// SetClass ( un , rand ( 1 , 4 ) ) ;
36298: LD_VAR 0 1
36302: PPUSH
36303: LD_INT 1
36305: PPUSH
36306: LD_INT 4
36308: PPUSH
36309: CALL_OW 12
36313: PPUSH
36314: CALL_OW 336
36318: GO 36265
36320: POP
36321: POP
// end ;
36322: PPOPN 1
36324: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
36325: LD_EXP 88
36329: PUSH
36330: LD_EXP 100
36334: AND
36335: IFFALSE 36414
36337: GO 36339
36339: DISABLE
36340: LD_INT 0
36342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
36343: LD_ADDR_VAR 0 1
36347: PUSH
36348: LD_INT 22
36350: PUSH
36351: LD_OWVAR 2
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_INT 21
36362: PUSH
36363: LD_INT 3
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PPUSH
36374: CALL_OW 69
36378: ST_TO_ADDR
// if not tmp then
36379: LD_VAR 0 1
36383: NOT
36384: IFFALSE 36388
// exit ;
36386: GO 36414
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
36388: LD_VAR 0 1
36392: PUSH
36393: LD_INT 1
36395: PPUSH
36396: LD_VAR 0 1
36400: PPUSH
36401: CALL_OW 12
36405: ARRAY
36406: PPUSH
36407: LD_INT 100
36409: PPUSH
36410: CALL_OW 234
// end ;
36414: PPOPN 1
36416: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
36417: LD_EXP 88
36421: PUSH
36422: LD_EXP 102
36426: AND
36427: IFFALSE 36525
36429: GO 36431
36431: DISABLE
36432: LD_INT 0
36434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36435: LD_ADDR_VAR 0 1
36439: PUSH
36440: LD_INT 22
36442: PUSH
36443: LD_OWVAR 2
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 21
36454: PUSH
36455: LD_INT 1
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PPUSH
36466: CALL_OW 69
36470: ST_TO_ADDR
// if not tmp then
36471: LD_VAR 0 1
36475: NOT
36476: IFFALSE 36480
// exit ;
36478: GO 36525
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
36480: LD_VAR 0 1
36484: PUSH
36485: LD_INT 1
36487: PPUSH
36488: LD_VAR 0 1
36492: PPUSH
36493: CALL_OW 12
36497: ARRAY
36498: PPUSH
36499: LD_INT 1
36501: PPUSH
36502: LD_INT 4
36504: PPUSH
36505: CALL_OW 12
36509: PPUSH
36510: LD_INT 3000
36512: PPUSH
36513: LD_INT 9000
36515: PPUSH
36516: CALL_OW 12
36520: PPUSH
36521: CALL_OW 492
// end ;
36525: PPOPN 1
36527: END
// every 0 0$1 trigger StreamModeActive and sDepot do
36528: LD_EXP 88
36532: PUSH
36533: LD_EXP 103
36537: AND
36538: IFFALSE 36558
36540: GO 36542
36542: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
36543: LD_INT 1
36545: PPUSH
36546: LD_OWVAR 2
36550: PPUSH
36551: LD_INT 0
36553: PPUSH
36554: CALL_OW 324
36558: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
36559: LD_EXP 88
36563: PUSH
36564: LD_EXP 104
36568: AND
36569: IFFALSE 36652
36571: GO 36573
36573: DISABLE
36574: LD_INT 0
36576: PPUSH
36577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
36578: LD_ADDR_VAR 0 2
36582: PUSH
36583: LD_INT 22
36585: PUSH
36586: LD_OWVAR 2
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 21
36597: PUSH
36598: LD_INT 3
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PPUSH
36609: CALL_OW 69
36613: ST_TO_ADDR
// if not tmp then
36614: LD_VAR 0 2
36618: NOT
36619: IFFALSE 36623
// exit ;
36621: GO 36652
// for i in tmp do
36623: LD_ADDR_VAR 0 1
36627: PUSH
36628: LD_VAR 0 2
36632: PUSH
36633: FOR_IN
36634: IFFALSE 36650
// SetBLevel ( i , 10 ) ;
36636: LD_VAR 0 1
36640: PPUSH
36641: LD_INT 10
36643: PPUSH
36644: CALL_OW 241
36648: GO 36633
36650: POP
36651: POP
// end ;
36652: PPOPN 2
36654: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
36655: LD_EXP 88
36659: PUSH
36660: LD_EXP 105
36664: AND
36665: IFFALSE 36776
36667: GO 36669
36669: DISABLE
36670: LD_INT 0
36672: PPUSH
36673: PPUSH
36674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36675: LD_ADDR_VAR 0 3
36679: PUSH
36680: LD_INT 22
36682: PUSH
36683: LD_OWVAR 2
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 25
36694: PUSH
36695: LD_INT 1
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PPUSH
36706: CALL_OW 69
36710: ST_TO_ADDR
// if not tmp then
36711: LD_VAR 0 3
36715: NOT
36716: IFFALSE 36720
// exit ;
36718: GO 36776
// un := tmp [ rand ( 1 , tmp ) ] ;
36720: LD_ADDR_VAR 0 2
36724: PUSH
36725: LD_VAR 0 3
36729: PUSH
36730: LD_INT 1
36732: PPUSH
36733: LD_VAR 0 3
36737: PPUSH
36738: CALL_OW 12
36742: ARRAY
36743: ST_TO_ADDR
// if Crawls ( un ) then
36744: LD_VAR 0 2
36748: PPUSH
36749: CALL_OW 318
36753: IFFALSE 36764
// ComWalk ( un ) ;
36755: LD_VAR 0 2
36759: PPUSH
36760: CALL_OW 138
// SetClass ( un , class_sniper ) ;
36764: LD_VAR 0 2
36768: PPUSH
36769: LD_INT 5
36771: PPUSH
36772: CALL_OW 336
// end ;
36776: PPOPN 3
36778: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
36779: LD_EXP 88
36783: PUSH
36784: LD_EXP 106
36788: AND
36789: PUSH
36790: LD_OWVAR 67
36794: PUSH
36795: LD_INT 4
36797: LESS
36798: AND
36799: IFFALSE 36818
36801: GO 36803
36803: DISABLE
// begin Difficulty := Difficulty + 1 ;
36804: LD_ADDR_OWVAR 67
36808: PUSH
36809: LD_OWVAR 67
36813: PUSH
36814: LD_INT 1
36816: PLUS
36817: ST_TO_ADDR
// end ;
36818: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
36819: LD_EXP 88
36823: PUSH
36824: LD_EXP 107
36828: AND
36829: IFFALSE 36932
36831: GO 36833
36833: DISABLE
36834: LD_INT 0
36836: PPUSH
// begin for i := 1 to 5 do
36837: LD_ADDR_VAR 0 1
36841: PUSH
36842: DOUBLE
36843: LD_INT 1
36845: DEC
36846: ST_TO_ADDR
36847: LD_INT 5
36849: PUSH
36850: FOR_TO
36851: IFFALSE 36930
// begin uc_nation := nation_nature ;
36853: LD_ADDR_OWVAR 21
36857: PUSH
36858: LD_INT 0
36860: ST_TO_ADDR
// uc_side := 0 ;
36861: LD_ADDR_OWVAR 20
36865: PUSH
36866: LD_INT 0
36868: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36869: LD_ADDR_OWVAR 29
36873: PUSH
36874: LD_INT 12
36876: PUSH
36877: LD_INT 12
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: ST_TO_ADDR
// hc_agressivity := 20 ;
36884: LD_ADDR_OWVAR 35
36888: PUSH
36889: LD_INT 20
36891: ST_TO_ADDR
// hc_class := class_tiger ;
36892: LD_ADDR_OWVAR 28
36896: PUSH
36897: LD_INT 14
36899: ST_TO_ADDR
// hc_gallery :=  ;
36900: LD_ADDR_OWVAR 33
36904: PUSH
36905: LD_STRING 
36907: ST_TO_ADDR
// hc_name :=  ;
36908: LD_ADDR_OWVAR 26
36912: PUSH
36913: LD_STRING 
36915: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
36916: CALL_OW 44
36920: PPUSH
36921: LD_INT 0
36923: PPUSH
36924: CALL_OW 51
// end ;
36928: GO 36850
36930: POP
36931: POP
// end ;
36932: PPOPN 1
36934: END
// every 0 0$1 trigger StreamModeActive and sBomb do
36935: LD_EXP 88
36939: PUSH
36940: LD_EXP 108
36944: AND
36945: IFFALSE 36954
36947: GO 36949
36949: DISABLE
// StreamSibBomb ;
36950: CALL 36955 0 0
36954: END
// export function StreamSibBomb ; var i , x , y ; begin
36955: LD_INT 0
36957: PPUSH
36958: PPUSH
36959: PPUSH
36960: PPUSH
// result := false ;
36961: LD_ADDR_VAR 0 1
36965: PUSH
36966: LD_INT 0
36968: ST_TO_ADDR
// for i := 1 to 16 do
36969: LD_ADDR_VAR 0 2
36973: PUSH
36974: DOUBLE
36975: LD_INT 1
36977: DEC
36978: ST_TO_ADDR
36979: LD_INT 16
36981: PUSH
36982: FOR_TO
36983: IFFALSE 37182
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
36985: LD_ADDR_VAR 0 3
36989: PUSH
36990: LD_INT 10
36992: PUSH
36993: LD_INT 20
36995: PUSH
36996: LD_INT 30
36998: PUSH
36999: LD_INT 40
37001: PUSH
37002: LD_INT 50
37004: PUSH
37005: LD_INT 60
37007: PUSH
37008: LD_INT 70
37010: PUSH
37011: LD_INT 80
37013: PUSH
37014: LD_INT 90
37016: PUSH
37017: LD_INT 100
37019: PUSH
37020: LD_INT 110
37022: PUSH
37023: LD_INT 120
37025: PUSH
37026: LD_INT 130
37028: PUSH
37029: LD_INT 140
37031: PUSH
37032: LD_INT 150
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 1
37054: PPUSH
37055: LD_INT 15
37057: PPUSH
37058: CALL_OW 12
37062: ARRAY
37063: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
37064: LD_ADDR_VAR 0 4
37068: PUSH
37069: LD_INT 10
37071: PUSH
37072: LD_INT 20
37074: PUSH
37075: LD_INT 30
37077: PUSH
37078: LD_INT 40
37080: PUSH
37081: LD_INT 50
37083: PUSH
37084: LD_INT 60
37086: PUSH
37087: LD_INT 70
37089: PUSH
37090: LD_INT 80
37092: PUSH
37093: LD_INT 90
37095: PUSH
37096: LD_INT 100
37098: PUSH
37099: LD_INT 110
37101: PUSH
37102: LD_INT 120
37104: PUSH
37105: LD_INT 130
37107: PUSH
37108: LD_INT 140
37110: PUSH
37111: LD_INT 150
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 1
37133: PPUSH
37134: LD_INT 15
37136: PPUSH
37137: CALL_OW 12
37141: ARRAY
37142: ST_TO_ADDR
// if ValidHex ( x , y ) then
37143: LD_VAR 0 3
37147: PPUSH
37148: LD_VAR 0 4
37152: PPUSH
37153: CALL_OW 488
37157: IFFALSE 37180
// begin result := [ x , y ] ;
37159: LD_ADDR_VAR 0 1
37163: PUSH
37164: LD_VAR 0 3
37168: PUSH
37169: LD_VAR 0 4
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: ST_TO_ADDR
// break ;
37178: GO 37182
// end ; end ;
37180: GO 36982
37182: POP
37183: POP
// if result then
37184: LD_VAR 0 1
37188: IFFALSE 37248
// begin ToLua ( playSibBomb() ) ;
37190: LD_STRING playSibBomb()
37192: PPUSH
37193: CALL_OW 559
// wait ( 0 0$14 ) ;
37197: LD_INT 490
37199: PPUSH
37200: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
37204: LD_VAR 0 1
37208: PUSH
37209: LD_INT 1
37211: ARRAY
37212: PPUSH
37213: LD_VAR 0 1
37217: PUSH
37218: LD_INT 2
37220: ARRAY
37221: PPUSH
37222: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
37226: LD_VAR 0 1
37230: PUSH
37231: LD_INT 1
37233: ARRAY
37234: PPUSH
37235: LD_VAR 0 1
37239: PUSH
37240: LD_INT 2
37242: ARRAY
37243: PPUSH
37244: CALL_OW 429
// end ; end ;
37248: LD_VAR 0 1
37252: RET
// every 0 0$1 trigger StreamModeActive and sReset do
37253: LD_EXP 88
37257: PUSH
37258: LD_EXP 110
37262: AND
37263: IFFALSE 37275
37265: GO 37267
37267: DISABLE
// YouLost (  ) ;
37268: LD_STRING 
37270: PPUSH
37271: CALL_OW 104
37275: END
// every 0 0$1 trigger StreamModeActive and sFog do
37276: LD_EXP 88
37280: PUSH
37281: LD_EXP 109
37285: AND
37286: IFFALSE 37300
37288: GO 37290
37290: DISABLE
// FogOff ( your_side ) ;
37291: LD_OWVAR 2
37295: PPUSH
37296: CALL_OW 344
37300: END
// every 0 0$1 trigger StreamModeActive and sSun do
37301: LD_EXP 88
37305: PUSH
37306: LD_EXP 111
37310: AND
37311: IFFALSE 37339
37313: GO 37315
37315: DISABLE
// begin solar_recharge_percent := 0 ;
37316: LD_ADDR_OWVAR 79
37320: PUSH
37321: LD_INT 0
37323: ST_TO_ADDR
// wait ( 5 5$00 ) ;
37324: LD_INT 10500
37326: PPUSH
37327: CALL_OW 67
// solar_recharge_percent := 100 ;
37331: LD_ADDR_OWVAR 79
37335: PUSH
37336: LD_INT 100
37338: ST_TO_ADDR
// end ;
37339: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
37340: LD_EXP 88
37344: PUSH
37345: LD_EXP 112
37349: AND
37350: IFFALSE 37589
37352: GO 37354
37354: DISABLE
37355: LD_INT 0
37357: PPUSH
37358: PPUSH
37359: PPUSH
// begin tmp := [ ] ;
37360: LD_ADDR_VAR 0 3
37364: PUSH
37365: EMPTY
37366: ST_TO_ADDR
// for i := 1 to 6 do
37367: LD_ADDR_VAR 0 1
37371: PUSH
37372: DOUBLE
37373: LD_INT 1
37375: DEC
37376: ST_TO_ADDR
37377: LD_INT 6
37379: PUSH
37380: FOR_TO
37381: IFFALSE 37486
// begin uc_nation := nation_nature ;
37383: LD_ADDR_OWVAR 21
37387: PUSH
37388: LD_INT 0
37390: ST_TO_ADDR
// uc_side := 0 ;
37391: LD_ADDR_OWVAR 20
37395: PUSH
37396: LD_INT 0
37398: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37399: LD_ADDR_OWVAR 29
37403: PUSH
37404: LD_INT 12
37406: PUSH
37407: LD_INT 12
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: ST_TO_ADDR
// hc_agressivity := 20 ;
37414: LD_ADDR_OWVAR 35
37418: PUSH
37419: LD_INT 20
37421: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
37422: LD_ADDR_OWVAR 28
37426: PUSH
37427: LD_INT 17
37429: ST_TO_ADDR
// hc_gallery :=  ;
37430: LD_ADDR_OWVAR 33
37434: PUSH
37435: LD_STRING 
37437: ST_TO_ADDR
// hc_name :=  ;
37438: LD_ADDR_OWVAR 26
37442: PUSH
37443: LD_STRING 
37445: ST_TO_ADDR
// un := CreateHuman ;
37446: LD_ADDR_VAR 0 2
37450: PUSH
37451: CALL_OW 44
37455: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
37456: LD_VAR 0 2
37460: PPUSH
37461: LD_INT 1
37463: PPUSH
37464: CALL_OW 51
// tmp := tmp ^ un ;
37468: LD_ADDR_VAR 0 3
37472: PUSH
37473: LD_VAR 0 3
37477: PUSH
37478: LD_VAR 0 2
37482: ADD
37483: ST_TO_ADDR
// end ;
37484: GO 37380
37486: POP
37487: POP
// repeat wait ( 0 0$1 ) ;
37488: LD_INT 35
37490: PPUSH
37491: CALL_OW 67
// for un in tmp do
37495: LD_ADDR_VAR 0 2
37499: PUSH
37500: LD_VAR 0 3
37504: PUSH
37505: FOR_IN
37506: IFFALSE 37580
// begin if IsDead ( un ) then
37508: LD_VAR 0 2
37512: PPUSH
37513: CALL_OW 301
37517: IFFALSE 37537
// begin tmp := tmp diff un ;
37519: LD_ADDR_VAR 0 3
37523: PUSH
37524: LD_VAR 0 3
37528: PUSH
37529: LD_VAR 0 2
37533: DIFF
37534: ST_TO_ADDR
// continue ;
37535: GO 37505
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
37537: LD_VAR 0 2
37541: PPUSH
37542: LD_INT 3
37544: PUSH
37545: LD_INT 22
37547: PUSH
37548: LD_INT 0
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PPUSH
37559: CALL_OW 69
37563: PPUSH
37564: LD_VAR 0 2
37568: PPUSH
37569: CALL_OW 74
37573: PPUSH
37574: CALL_OW 115
// end ;
37578: GO 37505
37580: POP
37581: POP
// until not tmp ;
37582: LD_VAR 0 3
37586: NOT
37587: IFFALSE 37488
// end ;
37589: PPOPN 3
37591: END
// every 0 0$1 trigger StreamModeActive and sTroll do
37592: LD_EXP 88
37596: PUSH
37597: LD_EXP 113
37601: AND
37602: IFFALSE 37656
37604: GO 37606
37606: DISABLE
// begin ToLua ( displayTroll(); ) ;
37607: LD_STRING displayTroll();
37609: PPUSH
37610: CALL_OW 559
// wait ( 3 3$00 ) ;
37614: LD_INT 6300
37616: PPUSH
37617: CALL_OW 67
// ToLua ( hideTroll(); ) ;
37621: LD_STRING hideTroll();
37623: PPUSH
37624: CALL_OW 559
// wait ( 1 1$00 ) ;
37628: LD_INT 2100
37630: PPUSH
37631: CALL_OW 67
// ToLua ( displayTroll(); ) ;
37635: LD_STRING displayTroll();
37637: PPUSH
37638: CALL_OW 559
// wait ( 1 1$00 ) ;
37642: LD_INT 2100
37644: PPUSH
37645: CALL_OW 67
// ToLua ( hideTroll(); ) ;
37649: LD_STRING hideTroll();
37651: PPUSH
37652: CALL_OW 559
// end ;
37656: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
37657: LD_EXP 88
37661: PUSH
37662: LD_EXP 114
37666: AND
37667: IFFALSE 37730
37669: GO 37671
37671: DISABLE
37672: LD_INT 0
37674: PPUSH
// begin p := 0 ;
37675: LD_ADDR_VAR 0 1
37679: PUSH
37680: LD_INT 0
37682: ST_TO_ADDR
// repeat game_speed := 1 ;
37683: LD_ADDR_OWVAR 65
37687: PUSH
37688: LD_INT 1
37690: ST_TO_ADDR
// wait ( 0 0$1 ) ;
37691: LD_INT 35
37693: PPUSH
37694: CALL_OW 67
// p := p + 1 ;
37698: LD_ADDR_VAR 0 1
37702: PUSH
37703: LD_VAR 0 1
37707: PUSH
37708: LD_INT 1
37710: PLUS
37711: ST_TO_ADDR
// until p >= 60 ;
37712: LD_VAR 0 1
37716: PUSH
37717: LD_INT 60
37719: GREATEREQUAL
37720: IFFALSE 37683
// game_speed := 4 ;
37722: LD_ADDR_OWVAR 65
37726: PUSH
37727: LD_INT 4
37729: ST_TO_ADDR
// end ;
37730: PPOPN 1
37732: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
37733: LD_EXP 88
37737: PUSH
37738: LD_EXP 115
37742: AND
37743: IFFALSE 37889
37745: GO 37747
37747: DISABLE
37748: LD_INT 0
37750: PPUSH
37751: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37752: LD_ADDR_VAR 0 1
37756: PUSH
37757: LD_INT 22
37759: PUSH
37760: LD_OWVAR 2
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 2
37771: PUSH
37772: LD_INT 30
37774: PUSH
37775: LD_INT 0
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 30
37784: PUSH
37785: LD_INT 1
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: LIST
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PPUSH
37801: CALL_OW 69
37805: ST_TO_ADDR
// if not depot then
37806: LD_VAR 0 1
37810: NOT
37811: IFFALSE 37815
// exit ;
37813: GO 37889
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
37815: LD_ADDR_VAR 0 2
37819: PUSH
37820: LD_VAR 0 1
37824: PUSH
37825: LD_INT 1
37827: PPUSH
37828: LD_VAR 0 1
37832: PPUSH
37833: CALL_OW 12
37837: ARRAY
37838: PPUSH
37839: CALL_OW 274
37843: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
37844: LD_VAR 0 2
37848: PPUSH
37849: LD_INT 1
37851: PPUSH
37852: LD_INT 0
37854: PPUSH
37855: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
37859: LD_VAR 0 2
37863: PPUSH
37864: LD_INT 2
37866: PPUSH
37867: LD_INT 0
37869: PPUSH
37870: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
37874: LD_VAR 0 2
37878: PPUSH
37879: LD_INT 3
37881: PPUSH
37882: LD_INT 0
37884: PPUSH
37885: CALL_OW 277
// end ;
37889: PPOPN 2
37891: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
37892: LD_EXP 88
37896: PUSH
37897: LD_EXP 116
37901: AND
37902: IFFALSE 37999
37904: GO 37906
37906: DISABLE
37907: LD_INT 0
37909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37910: LD_ADDR_VAR 0 1
37914: PUSH
37915: LD_INT 22
37917: PUSH
37918: LD_OWVAR 2
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 21
37929: PUSH
37930: LD_INT 1
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 3
37939: PUSH
37940: LD_INT 23
37942: PUSH
37943: LD_INT 0
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: LIST
37958: PPUSH
37959: CALL_OW 69
37963: ST_TO_ADDR
// if not tmp then
37964: LD_VAR 0 1
37968: NOT
37969: IFFALSE 37973
// exit ;
37971: GO 37999
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
37973: LD_VAR 0 1
37977: PUSH
37978: LD_INT 1
37980: PPUSH
37981: LD_VAR 0 1
37985: PPUSH
37986: CALL_OW 12
37990: ARRAY
37991: PPUSH
37992: LD_INT 200
37994: PPUSH
37995: CALL_OW 234
// end ;
37999: PPOPN 1
38001: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
38002: LD_EXP 88
38006: PUSH
38007: LD_EXP 117
38011: AND
38012: IFFALSE 38091
38014: GO 38016
38016: DISABLE
38017: LD_INT 0
38019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
38020: LD_ADDR_VAR 0 1
38024: PUSH
38025: LD_INT 22
38027: PUSH
38028: LD_OWVAR 2
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 21
38039: PUSH
38040: LD_INT 2
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PPUSH
38051: CALL_OW 69
38055: ST_TO_ADDR
// if not tmp then
38056: LD_VAR 0 1
38060: NOT
38061: IFFALSE 38065
// exit ;
38063: GO 38091
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
38065: LD_VAR 0 1
38069: PUSH
38070: LD_INT 1
38072: PPUSH
38073: LD_VAR 0 1
38077: PPUSH
38078: CALL_OW 12
38082: ARRAY
38083: PPUSH
38084: LD_INT 60
38086: PPUSH
38087: CALL_OW 234
// end ;
38091: PPOPN 1
38093: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
38094: LD_EXP 88
38098: PUSH
38099: LD_EXP 118
38103: AND
38104: IFFALSE 38203
38106: GO 38108
38108: DISABLE
38109: LD_INT 0
38111: PPUSH
38112: PPUSH
// begin enable ;
38113: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
38114: LD_ADDR_VAR 0 1
38118: PUSH
38119: LD_INT 22
38121: PUSH
38122: LD_OWVAR 2
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 61
38133: PUSH
38134: EMPTY
38135: LIST
38136: PUSH
38137: LD_INT 33
38139: PUSH
38140: LD_INT 2
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: LIST
38151: PPUSH
38152: CALL_OW 69
38156: ST_TO_ADDR
// if not tmp then
38157: LD_VAR 0 1
38161: NOT
38162: IFFALSE 38166
// exit ;
38164: GO 38203
// for i in tmp do
38166: LD_ADDR_VAR 0 2
38170: PUSH
38171: LD_VAR 0 1
38175: PUSH
38176: FOR_IN
38177: IFFALSE 38201
// if IsControledBy ( i ) then
38179: LD_VAR 0 2
38183: PPUSH
38184: CALL_OW 312
38188: IFFALSE 38199
// ComUnlink ( i ) ;
38190: LD_VAR 0 2
38194: PPUSH
38195: CALL_OW 136
38199: GO 38176
38201: POP
38202: POP
// end ;
38203: PPOPN 2
38205: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
38206: LD_EXP 88
38210: PUSH
38211: LD_EXP 119
38215: AND
38216: IFFALSE 38356
38218: GO 38220
38220: DISABLE
38221: LD_INT 0
38223: PPUSH
38224: PPUSH
// begin ToLua ( displayPowell(); ) ;
38225: LD_STRING displayPowell();
38227: PPUSH
38228: CALL_OW 559
// uc_side := 0 ;
38232: LD_ADDR_OWVAR 20
38236: PUSH
38237: LD_INT 0
38239: ST_TO_ADDR
// uc_nation := 2 ;
38240: LD_ADDR_OWVAR 21
38244: PUSH
38245: LD_INT 2
38247: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
38248: LD_ADDR_OWVAR 37
38252: PUSH
38253: LD_INT 14
38255: ST_TO_ADDR
// vc_engine := engine_siberite ;
38256: LD_ADDR_OWVAR 39
38260: PUSH
38261: LD_INT 3
38263: ST_TO_ADDR
// vc_control := control_apeman ;
38264: LD_ADDR_OWVAR 38
38268: PUSH
38269: LD_INT 5
38271: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
38272: LD_ADDR_OWVAR 40
38276: PUSH
38277: LD_INT 29
38279: ST_TO_ADDR
// un := CreateVehicle ;
38280: LD_ADDR_VAR 0 2
38284: PUSH
38285: CALL_OW 45
38289: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
38290: LD_VAR 0 2
38294: PPUSH
38295: LD_INT 1
38297: PPUSH
38298: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
38302: LD_INT 35
38304: PPUSH
38305: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
38309: LD_VAR 0 2
38313: PPUSH
38314: LD_INT 22
38316: PUSH
38317: LD_OWVAR 2
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PPUSH
38326: CALL_OW 69
38330: PPUSH
38331: LD_VAR 0 2
38335: PPUSH
38336: CALL_OW 74
38340: PPUSH
38341: CALL_OW 115
// until IsDead ( un ) ;
38345: LD_VAR 0 2
38349: PPUSH
38350: CALL_OW 301
38354: IFFALSE 38302
// end ;
38356: PPOPN 2
38358: END
// every 0 0$1 trigger StreamModeActive and sStu do
38359: LD_EXP 88
38363: PUSH
38364: LD_EXP 127
38368: AND
38369: IFFALSE 38385
38371: GO 38373
38373: DISABLE
// begin ToLua ( displayStucuk(); ) ;
38374: LD_STRING displayStucuk();
38376: PPUSH
38377: CALL_OW 559
// ResetFog ;
38381: CALL_OW 335
// end ;
38385: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
38386: LD_EXP 88
38390: PUSH
38391: LD_EXP 120
38395: AND
38396: IFFALSE 38537
38398: GO 38400
38400: DISABLE
38401: LD_INT 0
38403: PPUSH
38404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
38405: LD_ADDR_VAR 0 2
38409: PUSH
38410: LD_INT 22
38412: PUSH
38413: LD_OWVAR 2
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 21
38424: PUSH
38425: LD_INT 1
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PPUSH
38436: CALL_OW 69
38440: ST_TO_ADDR
// if not tmp then
38441: LD_VAR 0 2
38445: NOT
38446: IFFALSE 38450
// exit ;
38448: GO 38537
// un := tmp [ rand ( 1 , tmp ) ] ;
38450: LD_ADDR_VAR 0 1
38454: PUSH
38455: LD_VAR 0 2
38459: PUSH
38460: LD_INT 1
38462: PPUSH
38463: LD_VAR 0 2
38467: PPUSH
38468: CALL_OW 12
38472: ARRAY
38473: ST_TO_ADDR
// SetSide ( un , 0 ) ;
38474: LD_VAR 0 1
38478: PPUSH
38479: LD_INT 0
38481: PPUSH
38482: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
38486: LD_VAR 0 1
38490: PPUSH
38491: LD_OWVAR 3
38495: PUSH
38496: LD_VAR 0 1
38500: DIFF
38501: PPUSH
38502: LD_VAR 0 1
38506: PPUSH
38507: CALL_OW 74
38511: PPUSH
38512: CALL_OW 115
// wait ( 0 0$20 ) ;
38516: LD_INT 700
38518: PPUSH
38519: CALL_OW 67
// SetSide ( un , your_side ) ;
38523: LD_VAR 0 1
38527: PPUSH
38528: LD_OWVAR 2
38532: PPUSH
38533: CALL_OW 235
// end ;
38537: PPOPN 2
38539: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
38540: LD_EXP 88
38544: PUSH
38545: LD_EXP 121
38549: AND
38550: IFFALSE 38656
38552: GO 38554
38554: DISABLE
38555: LD_INT 0
38557: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38558: LD_ADDR_VAR 0 1
38562: PUSH
38563: LD_INT 22
38565: PUSH
38566: LD_OWVAR 2
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 2
38577: PUSH
38578: LD_INT 30
38580: PUSH
38581: LD_INT 0
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 30
38590: PUSH
38591: LD_INT 1
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: LIST
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PPUSH
38607: CALL_OW 69
38611: ST_TO_ADDR
// if not depot then
38612: LD_VAR 0 1
38616: NOT
38617: IFFALSE 38621
// exit ;
38619: GO 38656
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
38621: LD_VAR 0 1
38625: PUSH
38626: LD_INT 1
38628: ARRAY
38629: PPUSH
38630: CALL_OW 250
38634: PPUSH
38635: LD_VAR 0 1
38639: PUSH
38640: LD_INT 1
38642: ARRAY
38643: PPUSH
38644: CALL_OW 251
38648: PPUSH
38649: LD_INT 70
38651: PPUSH
38652: CALL_OW 495
// end ;
38656: PPOPN 1
38658: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
38659: LD_EXP 88
38663: PUSH
38664: LD_EXP 122
38668: AND
38669: IFFALSE 38880
38671: GO 38673
38673: DISABLE
38674: LD_INT 0
38676: PPUSH
38677: PPUSH
38678: PPUSH
38679: PPUSH
38680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
38681: LD_ADDR_VAR 0 5
38685: PUSH
38686: LD_INT 22
38688: PUSH
38689: LD_OWVAR 2
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 21
38700: PUSH
38701: LD_INT 1
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PPUSH
38712: CALL_OW 69
38716: ST_TO_ADDR
// if not tmp then
38717: LD_VAR 0 5
38721: NOT
38722: IFFALSE 38726
// exit ;
38724: GO 38880
// for i in tmp do
38726: LD_ADDR_VAR 0 1
38730: PUSH
38731: LD_VAR 0 5
38735: PUSH
38736: FOR_IN
38737: IFFALSE 38878
// begin d := rand ( 0 , 5 ) ;
38739: LD_ADDR_VAR 0 4
38743: PUSH
38744: LD_INT 0
38746: PPUSH
38747: LD_INT 5
38749: PPUSH
38750: CALL_OW 12
38754: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
38755: LD_ADDR_VAR 0 2
38759: PUSH
38760: LD_VAR 0 1
38764: PPUSH
38765: CALL_OW 250
38769: PPUSH
38770: LD_VAR 0 4
38774: PPUSH
38775: LD_INT 3
38777: PPUSH
38778: LD_INT 12
38780: PPUSH
38781: CALL_OW 12
38785: PPUSH
38786: CALL_OW 272
38790: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
38791: LD_ADDR_VAR 0 3
38795: PUSH
38796: LD_VAR 0 1
38800: PPUSH
38801: CALL_OW 251
38805: PPUSH
38806: LD_VAR 0 4
38810: PPUSH
38811: LD_INT 3
38813: PPUSH
38814: LD_INT 12
38816: PPUSH
38817: CALL_OW 12
38821: PPUSH
38822: CALL_OW 273
38826: ST_TO_ADDR
// if ValidHex ( x , y ) then
38827: LD_VAR 0 2
38831: PPUSH
38832: LD_VAR 0 3
38836: PPUSH
38837: CALL_OW 488
38841: IFFALSE 38876
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
38843: LD_VAR 0 1
38847: PPUSH
38848: LD_VAR 0 2
38852: PPUSH
38853: LD_VAR 0 3
38857: PPUSH
38858: LD_INT 3
38860: PPUSH
38861: LD_INT 6
38863: PPUSH
38864: CALL_OW 12
38868: PPUSH
38869: LD_INT 1
38871: PPUSH
38872: CALL_OW 483
// end ;
38876: GO 38736
38878: POP
38879: POP
// end ;
38880: PPOPN 5
38882: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
38883: LD_EXP 88
38887: PUSH
38888: LD_EXP 123
38892: AND
38893: IFFALSE 38987
38895: GO 38897
38897: DISABLE
38898: LD_INT 0
38900: PPUSH
38901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
38902: LD_ADDR_VAR 0 2
38906: PUSH
38907: LD_INT 22
38909: PUSH
38910: LD_OWVAR 2
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 32
38921: PUSH
38922: LD_INT 1
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 21
38931: PUSH
38932: LD_INT 2
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: LIST
38943: PPUSH
38944: CALL_OW 69
38948: ST_TO_ADDR
// if not tmp then
38949: LD_VAR 0 2
38953: NOT
38954: IFFALSE 38958
// exit ;
38956: GO 38987
// for i in tmp do
38958: LD_ADDR_VAR 0 1
38962: PUSH
38963: LD_VAR 0 2
38967: PUSH
38968: FOR_IN
38969: IFFALSE 38985
// SetFuel ( i , 0 ) ;
38971: LD_VAR 0 1
38975: PPUSH
38976: LD_INT 0
38978: PPUSH
38979: CALL_OW 240
38983: GO 38968
38985: POP
38986: POP
// end ;
38987: PPOPN 2
38989: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
38990: LD_EXP 88
38994: PUSH
38995: LD_EXP 124
38999: AND
39000: IFFALSE 39066
39002: GO 39004
39004: DISABLE
39005: LD_INT 0
39007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
39008: LD_ADDR_VAR 0 1
39012: PUSH
39013: LD_INT 22
39015: PUSH
39016: LD_OWVAR 2
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 30
39027: PUSH
39028: LD_INT 29
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PPUSH
39039: CALL_OW 69
39043: ST_TO_ADDR
// if not tmp then
39044: LD_VAR 0 1
39048: NOT
39049: IFFALSE 39053
// exit ;
39051: GO 39066
// DestroyUnit ( tmp [ 1 ] ) ;
39053: LD_VAR 0 1
39057: PUSH
39058: LD_INT 1
39060: ARRAY
39061: PPUSH
39062: CALL_OW 65
// end ;
39066: PPOPN 1
39068: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
39069: LD_EXP 88
39073: PUSH
39074: LD_EXP 126
39078: AND
39079: IFFALSE 39208
39081: GO 39083
39083: DISABLE
39084: LD_INT 0
39086: PPUSH
// begin uc_side := 0 ;
39087: LD_ADDR_OWVAR 20
39091: PUSH
39092: LD_INT 0
39094: ST_TO_ADDR
// uc_nation := nation_arabian ;
39095: LD_ADDR_OWVAR 21
39099: PUSH
39100: LD_INT 2
39102: ST_TO_ADDR
// hc_gallery :=  ;
39103: LD_ADDR_OWVAR 33
39107: PUSH
39108: LD_STRING 
39110: ST_TO_ADDR
// hc_name :=  ;
39111: LD_ADDR_OWVAR 26
39115: PUSH
39116: LD_STRING 
39118: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
39119: LD_INT 1
39121: PPUSH
39122: LD_INT 11
39124: PPUSH
39125: LD_INT 10
39127: PPUSH
39128: CALL_OW 380
// un := CreateHuman ;
39132: LD_ADDR_VAR 0 1
39136: PUSH
39137: CALL_OW 44
39141: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
39142: LD_VAR 0 1
39146: PPUSH
39147: LD_INT 1
39149: PPUSH
39150: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
39154: LD_INT 35
39156: PPUSH
39157: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
39161: LD_VAR 0 1
39165: PPUSH
39166: LD_INT 22
39168: PUSH
39169: LD_OWVAR 2
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PPUSH
39178: CALL_OW 69
39182: PPUSH
39183: LD_VAR 0 1
39187: PPUSH
39188: CALL_OW 74
39192: PPUSH
39193: CALL_OW 115
// until IsDead ( un ) ;
39197: LD_VAR 0 1
39201: PPUSH
39202: CALL_OW 301
39206: IFFALSE 39154
// end ;
39208: PPOPN 1
39210: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
39211: LD_EXP 88
39215: PUSH
39216: LD_EXP 128
39220: AND
39221: IFFALSE 39233
39223: GO 39225
39225: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
39226: LD_STRING earthquake(getX(game), 0, 32)
39228: PPUSH
39229: CALL_OW 559
39233: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
39234: LD_EXP 88
39238: PUSH
39239: LD_EXP 129
39243: AND
39244: IFFALSE 39335
39246: GO 39248
39248: DISABLE
39249: LD_INT 0
39251: PPUSH
// begin enable ;
39252: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
39253: LD_ADDR_VAR 0 1
39257: PUSH
39258: LD_INT 22
39260: PUSH
39261: LD_OWVAR 2
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 21
39272: PUSH
39273: LD_INT 2
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 33
39282: PUSH
39283: LD_INT 3
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: LIST
39294: PPUSH
39295: CALL_OW 69
39299: ST_TO_ADDR
// if not tmp then
39300: LD_VAR 0 1
39304: NOT
39305: IFFALSE 39309
// exit ;
39307: GO 39335
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
39309: LD_VAR 0 1
39313: PUSH
39314: LD_INT 1
39316: PPUSH
39317: LD_VAR 0 1
39321: PPUSH
39322: CALL_OW 12
39326: ARRAY
39327: PPUSH
39328: LD_INT 1
39330: PPUSH
39331: CALL_OW 234
// end ;
39335: PPOPN 1
39337: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
39338: LD_EXP 88
39342: PUSH
39343: LD_EXP 130
39347: AND
39348: IFFALSE 39489
39350: GO 39352
39352: DISABLE
39353: LD_INT 0
39355: PPUSH
39356: PPUSH
39357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
39358: LD_ADDR_VAR 0 3
39362: PUSH
39363: LD_INT 22
39365: PUSH
39366: LD_OWVAR 2
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 25
39377: PUSH
39378: LD_INT 1
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PPUSH
39389: CALL_OW 69
39393: ST_TO_ADDR
// if not tmp then
39394: LD_VAR 0 3
39398: NOT
39399: IFFALSE 39403
// exit ;
39401: GO 39489
// un := tmp [ rand ( 1 , tmp ) ] ;
39403: LD_ADDR_VAR 0 2
39407: PUSH
39408: LD_VAR 0 3
39412: PUSH
39413: LD_INT 1
39415: PPUSH
39416: LD_VAR 0 3
39420: PPUSH
39421: CALL_OW 12
39425: ARRAY
39426: ST_TO_ADDR
// if Crawls ( un ) then
39427: LD_VAR 0 2
39431: PPUSH
39432: CALL_OW 318
39436: IFFALSE 39447
// ComWalk ( un ) ;
39438: LD_VAR 0 2
39442: PPUSH
39443: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
39447: LD_VAR 0 2
39451: PPUSH
39452: LD_INT 9
39454: PPUSH
39455: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
39459: LD_INT 28
39461: PPUSH
39462: LD_OWVAR 2
39466: PPUSH
39467: LD_INT 2
39469: PPUSH
39470: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
39474: LD_INT 29
39476: PPUSH
39477: LD_OWVAR 2
39481: PPUSH
39482: LD_INT 2
39484: PPUSH
39485: CALL_OW 322
// end ;
39489: PPOPN 3
39491: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
39492: LD_EXP 88
39496: PUSH
39497: LD_EXP 131
39501: AND
39502: IFFALSE 39613
39504: GO 39506
39506: DISABLE
39507: LD_INT 0
39509: PPUSH
39510: PPUSH
39511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
39512: LD_ADDR_VAR 0 3
39516: PUSH
39517: LD_INT 22
39519: PUSH
39520: LD_OWVAR 2
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 25
39531: PUSH
39532: LD_INT 1
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PPUSH
39543: CALL_OW 69
39547: ST_TO_ADDR
// if not tmp then
39548: LD_VAR 0 3
39552: NOT
39553: IFFALSE 39557
// exit ;
39555: GO 39613
// un := tmp [ rand ( 1 , tmp ) ] ;
39557: LD_ADDR_VAR 0 2
39561: PUSH
39562: LD_VAR 0 3
39566: PUSH
39567: LD_INT 1
39569: PPUSH
39570: LD_VAR 0 3
39574: PPUSH
39575: CALL_OW 12
39579: ARRAY
39580: ST_TO_ADDR
// if Crawls ( un ) then
39581: LD_VAR 0 2
39585: PPUSH
39586: CALL_OW 318
39590: IFFALSE 39601
// ComWalk ( un ) ;
39592: LD_VAR 0 2
39596: PPUSH
39597: CALL_OW 138
// SetClass ( un , class_mortar ) ;
39601: LD_VAR 0 2
39605: PPUSH
39606: LD_INT 8
39608: PPUSH
39609: CALL_OW 336
// end ;
39613: PPOPN 3
39615: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
39616: LD_EXP 88
39620: PUSH
39621: LD_EXP 132
39625: AND
39626: IFFALSE 39770
39628: GO 39630
39630: DISABLE
39631: LD_INT 0
39633: PPUSH
39634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
39635: LD_ADDR_VAR 0 2
39639: PUSH
39640: LD_INT 22
39642: PUSH
39643: LD_OWVAR 2
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 21
39654: PUSH
39655: LD_INT 2
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 2
39664: PUSH
39665: LD_INT 34
39667: PUSH
39668: LD_INT 12
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 34
39677: PUSH
39678: LD_INT 51
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 34
39687: PUSH
39688: LD_INT 32
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: LIST
39705: PPUSH
39706: CALL_OW 69
39710: ST_TO_ADDR
// if not tmp then
39711: LD_VAR 0 2
39715: NOT
39716: IFFALSE 39720
// exit ;
39718: GO 39770
// for i in tmp do
39720: LD_ADDR_VAR 0 1
39724: PUSH
39725: LD_VAR 0 2
39729: PUSH
39730: FOR_IN
39731: IFFALSE 39768
// if GetCargo ( i , mat_artifact ) = 0 then
39733: LD_VAR 0 1
39737: PPUSH
39738: LD_INT 4
39740: PPUSH
39741: CALL_OW 289
39745: PUSH
39746: LD_INT 0
39748: EQUAL
39749: IFFALSE 39766
// SetCargo ( i , mat_siberit , 100 ) ;
39751: LD_VAR 0 1
39755: PPUSH
39756: LD_INT 3
39758: PPUSH
39759: LD_INT 100
39761: PPUSH
39762: CALL_OW 290
39766: GO 39730
39768: POP
39769: POP
// end ;
39770: PPOPN 2
39772: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
39773: LD_EXP 88
39777: PUSH
39778: LD_EXP 133
39782: AND
39783: IFFALSE 39966
39785: GO 39787
39787: DISABLE
39788: LD_INT 0
39790: PPUSH
39791: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
39792: LD_ADDR_VAR 0 2
39796: PUSH
39797: LD_INT 22
39799: PUSH
39800: LD_OWVAR 2
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PPUSH
39809: CALL_OW 69
39813: ST_TO_ADDR
// if not tmp then
39814: LD_VAR 0 2
39818: NOT
39819: IFFALSE 39823
// exit ;
39821: GO 39966
// for i := 1 to 2 do
39823: LD_ADDR_VAR 0 1
39827: PUSH
39828: DOUBLE
39829: LD_INT 1
39831: DEC
39832: ST_TO_ADDR
39833: LD_INT 2
39835: PUSH
39836: FOR_TO
39837: IFFALSE 39964
// begin uc_side := your_side ;
39839: LD_ADDR_OWVAR 20
39843: PUSH
39844: LD_OWVAR 2
39848: ST_TO_ADDR
// uc_nation := nation_american ;
39849: LD_ADDR_OWVAR 21
39853: PUSH
39854: LD_INT 1
39856: ST_TO_ADDR
// vc_chassis := us_morphling ;
39857: LD_ADDR_OWVAR 37
39861: PUSH
39862: LD_INT 5
39864: ST_TO_ADDR
// vc_engine := engine_siberite ;
39865: LD_ADDR_OWVAR 39
39869: PUSH
39870: LD_INT 3
39872: ST_TO_ADDR
// vc_control := control_computer ;
39873: LD_ADDR_OWVAR 38
39877: PUSH
39878: LD_INT 3
39880: ST_TO_ADDR
// vc_weapon := us_double_laser ;
39881: LD_ADDR_OWVAR 40
39885: PUSH
39886: LD_INT 10
39888: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
39889: LD_VAR 0 2
39893: PUSH
39894: LD_INT 1
39896: ARRAY
39897: PPUSH
39898: CALL_OW 310
39902: NOT
39903: IFFALSE 39950
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
39905: CALL_OW 45
39909: PPUSH
39910: LD_VAR 0 2
39914: PUSH
39915: LD_INT 1
39917: ARRAY
39918: PPUSH
39919: CALL_OW 250
39923: PPUSH
39924: LD_VAR 0 2
39928: PUSH
39929: LD_INT 1
39931: ARRAY
39932: PPUSH
39933: CALL_OW 251
39937: PPUSH
39938: LD_INT 12
39940: PPUSH
39941: LD_INT 1
39943: PPUSH
39944: CALL_OW 50
39948: GO 39962
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
39950: CALL_OW 45
39954: PPUSH
39955: LD_INT 1
39957: PPUSH
39958: CALL_OW 51
// end ;
39962: GO 39836
39964: POP
39965: POP
// end ;
39966: PPOPN 2
39968: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
39969: LD_EXP 88
39973: PUSH
39974: LD_EXP 134
39978: AND
39979: IFFALSE 40201
39981: GO 39983
39983: DISABLE
39984: LD_INT 0
39986: PPUSH
39987: PPUSH
39988: PPUSH
39989: PPUSH
39990: PPUSH
39991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
39992: LD_ADDR_VAR 0 6
39996: PUSH
39997: LD_INT 22
39999: PUSH
40000: LD_OWVAR 2
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 21
40011: PUSH
40012: LD_INT 1
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 3
40021: PUSH
40022: LD_INT 23
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: LIST
40040: PPUSH
40041: CALL_OW 69
40045: ST_TO_ADDR
// if not tmp then
40046: LD_VAR 0 6
40050: NOT
40051: IFFALSE 40055
// exit ;
40053: GO 40201
// s1 := rand ( 1 , 4 ) ;
40055: LD_ADDR_VAR 0 2
40059: PUSH
40060: LD_INT 1
40062: PPUSH
40063: LD_INT 4
40065: PPUSH
40066: CALL_OW 12
40070: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
40071: LD_ADDR_VAR 0 4
40075: PUSH
40076: LD_VAR 0 6
40080: PUSH
40081: LD_INT 1
40083: ARRAY
40084: PPUSH
40085: LD_VAR 0 2
40089: PPUSH
40090: CALL_OW 259
40094: ST_TO_ADDR
// if s1 = 1 then
40095: LD_VAR 0 2
40099: PUSH
40100: LD_INT 1
40102: EQUAL
40103: IFFALSE 40123
// s2 := rand ( 2 , 4 ) else
40105: LD_ADDR_VAR 0 3
40109: PUSH
40110: LD_INT 2
40112: PPUSH
40113: LD_INT 4
40115: PPUSH
40116: CALL_OW 12
40120: ST_TO_ADDR
40121: GO 40131
// s2 := 1 ;
40123: LD_ADDR_VAR 0 3
40127: PUSH
40128: LD_INT 1
40130: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
40131: LD_ADDR_VAR 0 5
40135: PUSH
40136: LD_VAR 0 6
40140: PUSH
40141: LD_INT 1
40143: ARRAY
40144: PPUSH
40145: LD_VAR 0 3
40149: PPUSH
40150: CALL_OW 259
40154: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
40155: LD_VAR 0 6
40159: PUSH
40160: LD_INT 1
40162: ARRAY
40163: PPUSH
40164: LD_VAR 0 2
40168: PPUSH
40169: LD_VAR 0 5
40173: PPUSH
40174: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
40178: LD_VAR 0 6
40182: PUSH
40183: LD_INT 1
40185: ARRAY
40186: PPUSH
40187: LD_VAR 0 3
40191: PPUSH
40192: LD_VAR 0 4
40196: PPUSH
40197: CALL_OW 237
// end ;
40201: PPOPN 6
40203: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
40204: LD_EXP 88
40208: PUSH
40209: LD_EXP 135
40213: AND
40214: IFFALSE 40293
40216: GO 40218
40218: DISABLE
40219: LD_INT 0
40221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
40222: LD_ADDR_VAR 0 1
40226: PUSH
40227: LD_INT 22
40229: PUSH
40230: LD_OWVAR 2
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 30
40241: PUSH
40242: LD_INT 3
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PPUSH
40253: CALL_OW 69
40257: ST_TO_ADDR
// if not tmp then
40258: LD_VAR 0 1
40262: NOT
40263: IFFALSE 40267
// exit ;
40265: GO 40293
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
40267: LD_VAR 0 1
40271: PUSH
40272: LD_INT 1
40274: PPUSH
40275: LD_VAR 0 1
40279: PPUSH
40280: CALL_OW 12
40284: ARRAY
40285: PPUSH
40286: LD_INT 1
40288: PPUSH
40289: CALL_OW 234
// end ;
40293: PPOPN 1
40295: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
40296: LD_EXP 88
40300: PUSH
40301: LD_EXP 136
40305: AND
40306: IFFALSE 40418
40308: GO 40310
40310: DISABLE
40311: LD_INT 0
40313: PPUSH
40314: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
40315: LD_ADDR_VAR 0 2
40319: PUSH
40320: LD_INT 22
40322: PUSH
40323: LD_OWVAR 2
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 2
40334: PUSH
40335: LD_INT 30
40337: PUSH
40338: LD_INT 27
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 30
40347: PUSH
40348: LD_INT 26
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 30
40357: PUSH
40358: LD_INT 28
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PPUSH
40375: CALL_OW 69
40379: ST_TO_ADDR
// if not tmp then
40380: LD_VAR 0 2
40384: NOT
40385: IFFALSE 40389
// exit ;
40387: GO 40418
// for i in tmp do
40389: LD_ADDR_VAR 0 1
40393: PUSH
40394: LD_VAR 0 2
40398: PUSH
40399: FOR_IN
40400: IFFALSE 40416
// SetLives ( i , 1 ) ;
40402: LD_VAR 0 1
40406: PPUSH
40407: LD_INT 1
40409: PPUSH
40410: CALL_OW 234
40414: GO 40399
40416: POP
40417: POP
// end ;
40418: PPOPN 2
40420: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
40421: LD_EXP 88
40425: PUSH
40426: LD_EXP 137
40430: AND
40431: IFFALSE 40718
40433: GO 40435
40435: DISABLE
40436: LD_INT 0
40438: PPUSH
40439: PPUSH
40440: PPUSH
// begin i := rand ( 1 , 7 ) ;
40441: LD_ADDR_VAR 0 1
40445: PUSH
40446: LD_INT 1
40448: PPUSH
40449: LD_INT 7
40451: PPUSH
40452: CALL_OW 12
40456: ST_TO_ADDR
// case i of 1 :
40457: LD_VAR 0 1
40461: PUSH
40462: LD_INT 1
40464: DOUBLE
40465: EQUAL
40466: IFTRUE 40470
40468: GO 40480
40470: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
40471: LD_STRING earthquake(getX(game), 0, 32)
40473: PPUSH
40474: CALL_OW 559
40478: GO 40718
40480: LD_INT 2
40482: DOUBLE
40483: EQUAL
40484: IFTRUE 40488
40486: GO 40502
40488: POP
// begin ToLua ( displayStucuk(); ) ;
40489: LD_STRING displayStucuk();
40491: PPUSH
40492: CALL_OW 559
// ResetFog ;
40496: CALL_OW 335
// end ; 3 :
40500: GO 40718
40502: LD_INT 3
40504: DOUBLE
40505: EQUAL
40506: IFTRUE 40510
40508: GO 40614
40510: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40511: LD_ADDR_VAR 0 2
40515: PUSH
40516: LD_INT 22
40518: PUSH
40519: LD_OWVAR 2
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 25
40530: PUSH
40531: LD_INT 1
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PPUSH
40542: CALL_OW 69
40546: ST_TO_ADDR
// if not tmp then
40547: LD_VAR 0 2
40551: NOT
40552: IFFALSE 40556
// exit ;
40554: GO 40718
// un := tmp [ rand ( 1 , tmp ) ] ;
40556: LD_ADDR_VAR 0 3
40560: PUSH
40561: LD_VAR 0 2
40565: PUSH
40566: LD_INT 1
40568: PPUSH
40569: LD_VAR 0 2
40573: PPUSH
40574: CALL_OW 12
40578: ARRAY
40579: ST_TO_ADDR
// if Crawls ( un ) then
40580: LD_VAR 0 3
40584: PPUSH
40585: CALL_OW 318
40589: IFFALSE 40600
// ComWalk ( un ) ;
40591: LD_VAR 0 3
40595: PPUSH
40596: CALL_OW 138
// SetClass ( un , class_mortar ) ;
40600: LD_VAR 0 3
40604: PPUSH
40605: LD_INT 8
40607: PPUSH
40608: CALL_OW 336
// end ; 4 :
40612: GO 40718
40614: LD_INT 4
40616: DOUBLE
40617: EQUAL
40618: IFTRUE 40622
40620: GO 40696
40622: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
40623: LD_ADDR_VAR 0 2
40627: PUSH
40628: LD_INT 22
40630: PUSH
40631: LD_OWVAR 2
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 30
40642: PUSH
40643: LD_INT 29
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PPUSH
40654: CALL_OW 69
40658: ST_TO_ADDR
// if not tmp then
40659: LD_VAR 0 2
40663: NOT
40664: IFFALSE 40668
// exit ;
40666: GO 40718
// CenterNowOnUnits ( tmp [ 1 ] ) ;
40668: LD_VAR 0 2
40672: PUSH
40673: LD_INT 1
40675: ARRAY
40676: PPUSH
40677: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
40681: LD_VAR 0 2
40685: PUSH
40686: LD_INT 1
40688: ARRAY
40689: PPUSH
40690: CALL_OW 65
// end ; 5 .. 7 :
40694: GO 40718
40696: LD_INT 5
40698: DOUBLE
40699: GREATEREQUAL
40700: IFFALSE 40708
40702: LD_INT 7
40704: DOUBLE
40705: LESSEQUAL
40706: IFTRUE 40710
40708: GO 40717
40710: POP
// StreamSibBomb ; end ;
40711: CALL 36955 0 0
40715: GO 40718
40717: POP
// end ;
40718: PPOPN 3
40720: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
40721: LD_EXP 88
40725: PUSH
40726: LD_EXP 138
40730: AND
40731: IFFALSE 40887
40733: GO 40735
40735: DISABLE
40736: LD_INT 0
40738: PPUSH
40739: PPUSH
40740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
40741: LD_ADDR_VAR 0 2
40745: PUSH
40746: LD_INT 81
40748: PUSH
40749: LD_OWVAR 2
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 2
40760: PUSH
40761: LD_INT 21
40763: PUSH
40764: LD_INT 1
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 21
40773: PUSH
40774: LD_INT 2
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: LIST
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PPUSH
40790: CALL_OW 69
40794: ST_TO_ADDR
// if not tmp then
40795: LD_VAR 0 2
40799: NOT
40800: IFFALSE 40804
// exit ;
40802: GO 40887
// p := 0 ;
40804: LD_ADDR_VAR 0 3
40808: PUSH
40809: LD_INT 0
40811: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40812: LD_INT 35
40814: PPUSH
40815: CALL_OW 67
// p := p + 1 ;
40819: LD_ADDR_VAR 0 3
40823: PUSH
40824: LD_VAR 0 3
40828: PUSH
40829: LD_INT 1
40831: PLUS
40832: ST_TO_ADDR
// for i in tmp do
40833: LD_ADDR_VAR 0 1
40837: PUSH
40838: LD_VAR 0 2
40842: PUSH
40843: FOR_IN
40844: IFFALSE 40875
// if GetLives ( i ) < 1000 then
40846: LD_VAR 0 1
40850: PPUSH
40851: CALL_OW 256
40855: PUSH
40856: LD_INT 1000
40858: LESS
40859: IFFALSE 40873
// SetLives ( i , 1000 ) ;
40861: LD_VAR 0 1
40865: PPUSH
40866: LD_INT 1000
40868: PPUSH
40869: CALL_OW 234
40873: GO 40843
40875: POP
40876: POP
// until p > 20 ;
40877: LD_VAR 0 3
40881: PUSH
40882: LD_INT 20
40884: GREATER
40885: IFFALSE 40812
// end ;
40887: PPOPN 3
40889: END
// every 0 0$1 trigger StreamModeActive and sTime do
40890: LD_EXP 88
40894: PUSH
40895: LD_EXP 139
40899: AND
40900: IFFALSE 40935
40902: GO 40904
40904: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
40905: LD_INT 28
40907: PPUSH
40908: LD_OWVAR 2
40912: PPUSH
40913: LD_INT 2
40915: PPUSH
40916: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
40920: LD_INT 30
40922: PPUSH
40923: LD_OWVAR 2
40927: PPUSH
40928: LD_INT 2
40930: PPUSH
40931: CALL_OW 322
// end ;
40935: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
40936: LD_EXP 88
40940: PUSH
40941: LD_EXP 140
40945: AND
40946: IFFALSE 41067
40948: GO 40950
40950: DISABLE
40951: LD_INT 0
40953: PPUSH
40954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
40955: LD_ADDR_VAR 0 2
40959: PUSH
40960: LD_INT 22
40962: PUSH
40963: LD_OWVAR 2
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 21
40974: PUSH
40975: LD_INT 1
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 3
40984: PUSH
40985: LD_INT 23
40987: PUSH
40988: LD_INT 0
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: LIST
41003: PPUSH
41004: CALL_OW 69
41008: ST_TO_ADDR
// if not tmp then
41009: LD_VAR 0 2
41013: NOT
41014: IFFALSE 41018
// exit ;
41016: GO 41067
// for i in tmp do
41018: LD_ADDR_VAR 0 1
41022: PUSH
41023: LD_VAR 0 2
41027: PUSH
41028: FOR_IN
41029: IFFALSE 41065
// begin if Crawls ( i ) then
41031: LD_VAR 0 1
41035: PPUSH
41036: CALL_OW 318
41040: IFFALSE 41051
// ComWalk ( i ) ;
41042: LD_VAR 0 1
41046: PPUSH
41047: CALL_OW 138
// SetClass ( i , 2 ) ;
41051: LD_VAR 0 1
41055: PPUSH
41056: LD_INT 2
41058: PPUSH
41059: CALL_OW 336
// end ;
41063: GO 41028
41065: POP
41066: POP
// end ;
41067: PPOPN 2
41069: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
41070: LD_EXP 88
41074: PUSH
41075: LD_EXP 141
41079: AND
41080: IFFALSE 41368
41082: GO 41084
41084: DISABLE
41085: LD_INT 0
41087: PPUSH
41088: PPUSH
41089: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
41090: LD_OWVAR 2
41094: PPUSH
41095: LD_INT 9
41097: PPUSH
41098: LD_INT 1
41100: PPUSH
41101: LD_INT 1
41103: PPUSH
41104: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
41108: LD_INT 9
41110: PPUSH
41111: LD_OWVAR 2
41115: PPUSH
41116: CALL_OW 343
// uc_side := 9 ;
41120: LD_ADDR_OWVAR 20
41124: PUSH
41125: LD_INT 9
41127: ST_TO_ADDR
// uc_nation := 2 ;
41128: LD_ADDR_OWVAR 21
41132: PUSH
41133: LD_INT 2
41135: ST_TO_ADDR
// hc_name := Dark Warrior ;
41136: LD_ADDR_OWVAR 26
41140: PUSH
41141: LD_STRING Dark Warrior
41143: ST_TO_ADDR
// hc_gallery :=  ;
41144: LD_ADDR_OWVAR 33
41148: PUSH
41149: LD_STRING 
41151: ST_TO_ADDR
// hc_noskilllimit := true ;
41152: LD_ADDR_OWVAR 76
41156: PUSH
41157: LD_INT 1
41159: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
41160: LD_ADDR_OWVAR 31
41164: PUSH
41165: LD_INT 30
41167: PUSH
41168: LD_INT 30
41170: PUSH
41171: LD_INT 30
41173: PUSH
41174: LD_INT 30
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: ST_TO_ADDR
// un := CreateHuman ;
41183: LD_ADDR_VAR 0 3
41187: PUSH
41188: CALL_OW 44
41192: ST_TO_ADDR
// hc_noskilllimit := false ;
41193: LD_ADDR_OWVAR 76
41197: PUSH
41198: LD_INT 0
41200: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
41201: LD_VAR 0 3
41205: PPUSH
41206: LD_INT 1
41208: PPUSH
41209: CALL_OW 51
// ToLua ( playRanger() ) ;
41213: LD_STRING playRanger()
41215: PPUSH
41216: CALL_OW 559
// p := 0 ;
41220: LD_ADDR_VAR 0 2
41224: PUSH
41225: LD_INT 0
41227: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
41228: LD_INT 35
41230: PPUSH
41231: CALL_OW 67
// p := p + 1 ;
41235: LD_ADDR_VAR 0 2
41239: PUSH
41240: LD_VAR 0 2
41244: PUSH
41245: LD_INT 1
41247: PLUS
41248: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
41249: LD_VAR 0 3
41253: PPUSH
41254: CALL_OW 256
41258: PUSH
41259: LD_INT 1000
41261: LESS
41262: IFFALSE 41276
// SetLives ( un , 1000 ) ;
41264: LD_VAR 0 3
41268: PPUSH
41269: LD_INT 1000
41271: PPUSH
41272: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
41276: LD_VAR 0 3
41280: PPUSH
41281: LD_INT 81
41283: PUSH
41284: LD_OWVAR 2
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 91
41295: PUSH
41296: LD_VAR 0 3
41300: PUSH
41301: LD_INT 30
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: LIST
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PPUSH
41313: CALL_OW 69
41317: PPUSH
41318: LD_VAR 0 3
41322: PPUSH
41323: CALL_OW 74
41327: PPUSH
41328: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
41332: LD_VAR 0 2
41336: PUSH
41337: LD_INT 80
41339: GREATER
41340: PUSH
41341: LD_VAR 0 3
41345: PPUSH
41346: CALL_OW 301
41350: OR
41351: IFFALSE 41228
// if un then
41353: LD_VAR 0 3
41357: IFFALSE 41368
// RemoveUnit ( un ) ;
41359: LD_VAR 0 3
41363: PPUSH
41364: CALL_OW 64
// end ;
41368: PPOPN 3
41370: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
41371: LD_EXP 142
41375: IFFALSE 41491
41377: GO 41379
41379: DISABLE
41380: LD_INT 0
41382: PPUSH
41383: PPUSH
41384: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
41385: LD_ADDR_VAR 0 2
41389: PUSH
41390: LD_INT 81
41392: PUSH
41393: LD_OWVAR 2
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 21
41404: PUSH
41405: LD_INT 1
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PPUSH
41416: CALL_OW 69
41420: ST_TO_ADDR
// ToLua ( playComputer() ) ;
41421: LD_STRING playComputer()
41423: PPUSH
41424: CALL_OW 559
// if not tmp then
41428: LD_VAR 0 2
41432: NOT
41433: IFFALSE 41437
// exit ;
41435: GO 41491
// for i in tmp do
41437: LD_ADDR_VAR 0 1
41441: PUSH
41442: LD_VAR 0 2
41446: PUSH
41447: FOR_IN
41448: IFFALSE 41489
// for j := 1 to 4 do
41450: LD_ADDR_VAR 0 3
41454: PUSH
41455: DOUBLE
41456: LD_INT 1
41458: DEC
41459: ST_TO_ADDR
41460: LD_INT 4
41462: PUSH
41463: FOR_TO
41464: IFFALSE 41485
// SetSkill ( i , j , 10 ) ;
41466: LD_VAR 0 1
41470: PPUSH
41471: LD_VAR 0 3
41475: PPUSH
41476: LD_INT 10
41478: PPUSH
41479: CALL_OW 237
41483: GO 41463
41485: POP
41486: POP
41487: GO 41447
41489: POP
41490: POP
// end ;
41491: PPOPN 3
41493: END
// every 0 0$1 trigger s30 do var i , tmp ;
41494: LD_EXP 143
41498: IFFALSE 41567
41500: GO 41502
41502: DISABLE
41503: LD_INT 0
41505: PPUSH
41506: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
41507: LD_ADDR_VAR 0 2
41511: PUSH
41512: LD_INT 22
41514: PUSH
41515: LD_OWVAR 2
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PPUSH
41524: CALL_OW 69
41528: ST_TO_ADDR
// if not tmp then
41529: LD_VAR 0 2
41533: NOT
41534: IFFALSE 41538
// exit ;
41536: GO 41567
// for i in tmp do
41538: LD_ADDR_VAR 0 1
41542: PUSH
41543: LD_VAR 0 2
41547: PUSH
41548: FOR_IN
41549: IFFALSE 41565
// SetLives ( i , 300 ) ;
41551: LD_VAR 0 1
41555: PPUSH
41556: LD_INT 300
41558: PPUSH
41559: CALL_OW 234
41563: GO 41548
41565: POP
41566: POP
// end ;
41567: PPOPN 2
41569: END
// every 0 0$1 trigger s60 do var i , tmp ;
41570: LD_EXP 144
41574: IFFALSE 41643
41576: GO 41578
41578: DISABLE
41579: LD_INT 0
41581: PPUSH
41582: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
41583: LD_ADDR_VAR 0 2
41587: PUSH
41588: LD_INT 22
41590: PUSH
41591: LD_OWVAR 2
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PPUSH
41600: CALL_OW 69
41604: ST_TO_ADDR
// if not tmp then
41605: LD_VAR 0 2
41609: NOT
41610: IFFALSE 41614
// exit ;
41612: GO 41643
// for i in tmp do
41614: LD_ADDR_VAR 0 1
41618: PUSH
41619: LD_VAR 0 2
41623: PUSH
41624: FOR_IN
41625: IFFALSE 41641
// SetLives ( i , 600 ) ;
41627: LD_VAR 0 1
41631: PPUSH
41632: LD_INT 600
41634: PPUSH
41635: CALL_OW 234
41639: GO 41624
41641: POP
41642: POP
// end ;
41643: PPOPN 2
41645: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
41646: LD_INT 0
41648: PPUSH
// case cmd of 301 :
41649: LD_VAR 0 1
41653: PUSH
41654: LD_INT 301
41656: DOUBLE
41657: EQUAL
41658: IFTRUE 41662
41660: GO 41694
41662: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
41663: LD_VAR 0 6
41667: PPUSH
41668: LD_VAR 0 7
41672: PPUSH
41673: LD_VAR 0 8
41677: PPUSH
41678: LD_VAR 0 4
41682: PPUSH
41683: LD_VAR 0 5
41687: PPUSH
41688: CALL 42895 0 5
41692: GO 41815
41694: LD_INT 302
41696: DOUBLE
41697: EQUAL
41698: IFTRUE 41702
41700: GO 41739
41702: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
41703: LD_VAR 0 6
41707: PPUSH
41708: LD_VAR 0 7
41712: PPUSH
41713: LD_VAR 0 8
41717: PPUSH
41718: LD_VAR 0 9
41722: PPUSH
41723: LD_VAR 0 4
41727: PPUSH
41728: LD_VAR 0 5
41732: PPUSH
41733: CALL 42986 0 6
41737: GO 41815
41739: LD_INT 303
41741: DOUBLE
41742: EQUAL
41743: IFTRUE 41747
41745: GO 41784
41747: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
41748: LD_VAR 0 6
41752: PPUSH
41753: LD_VAR 0 7
41757: PPUSH
41758: LD_VAR 0 8
41762: PPUSH
41763: LD_VAR 0 9
41767: PPUSH
41768: LD_VAR 0 4
41772: PPUSH
41773: LD_VAR 0 5
41777: PPUSH
41778: CALL 41820 0 6
41782: GO 41815
41784: LD_INT 304
41786: DOUBLE
41787: EQUAL
41788: IFTRUE 41792
41790: GO 41814
41792: POP
// hHackTeleport ( unit , x , y ) ; end ;
41793: LD_VAR 0 2
41797: PPUSH
41798: LD_VAR 0 4
41802: PPUSH
41803: LD_VAR 0 5
41807: PPUSH
41808: CALL 43579 0 3
41812: GO 41815
41814: POP
// end ;
41815: LD_VAR 0 12
41819: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
41820: LD_INT 0
41822: PPUSH
41823: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
41824: LD_VAR 0 1
41828: PUSH
41829: LD_INT 1
41831: LESS
41832: PUSH
41833: LD_VAR 0 1
41837: PUSH
41838: LD_INT 3
41840: GREATER
41841: OR
41842: PUSH
41843: LD_VAR 0 5
41847: PPUSH
41848: LD_VAR 0 6
41852: PPUSH
41853: CALL_OW 428
41857: OR
41858: IFFALSE 41862
// exit ;
41860: GO 42582
// uc_side := your_side ;
41862: LD_ADDR_OWVAR 20
41866: PUSH
41867: LD_OWVAR 2
41871: ST_TO_ADDR
// uc_nation := nation ;
41872: LD_ADDR_OWVAR 21
41876: PUSH
41877: LD_VAR 0 1
41881: ST_TO_ADDR
// bc_level = 1 ;
41882: LD_ADDR_OWVAR 43
41886: PUSH
41887: LD_INT 1
41889: ST_TO_ADDR
// case btype of 1 :
41890: LD_VAR 0 2
41894: PUSH
41895: LD_INT 1
41897: DOUBLE
41898: EQUAL
41899: IFTRUE 41903
41901: GO 41914
41903: POP
// bc_type := b_depot ; 2 :
41904: LD_ADDR_OWVAR 42
41908: PUSH
41909: LD_INT 0
41911: ST_TO_ADDR
41912: GO 42526
41914: LD_INT 2
41916: DOUBLE
41917: EQUAL
41918: IFTRUE 41922
41920: GO 41933
41922: POP
// bc_type := b_warehouse ; 3 :
41923: LD_ADDR_OWVAR 42
41927: PUSH
41928: LD_INT 1
41930: ST_TO_ADDR
41931: GO 42526
41933: LD_INT 3
41935: DOUBLE
41936: EQUAL
41937: IFTRUE 41941
41939: GO 41952
41941: POP
// bc_type := b_lab ; 4 .. 9 :
41942: LD_ADDR_OWVAR 42
41946: PUSH
41947: LD_INT 6
41949: ST_TO_ADDR
41950: GO 42526
41952: LD_INT 4
41954: DOUBLE
41955: GREATEREQUAL
41956: IFFALSE 41964
41958: LD_INT 9
41960: DOUBLE
41961: LESSEQUAL
41962: IFTRUE 41966
41964: GO 42018
41966: POP
// begin bc_type := b_lab_half ;
41967: LD_ADDR_OWVAR 42
41971: PUSH
41972: LD_INT 7
41974: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
41975: LD_ADDR_OWVAR 44
41979: PUSH
41980: LD_INT 10
41982: PUSH
41983: LD_INT 11
41985: PUSH
41986: LD_INT 12
41988: PUSH
41989: LD_INT 15
41991: PUSH
41992: LD_INT 14
41994: PUSH
41995: LD_INT 13
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: PUSH
42006: LD_VAR 0 2
42010: PUSH
42011: LD_INT 3
42013: MINUS
42014: ARRAY
42015: ST_TO_ADDR
// end ; 10 .. 13 :
42016: GO 42526
42018: LD_INT 10
42020: DOUBLE
42021: GREATEREQUAL
42022: IFFALSE 42030
42024: LD_INT 13
42026: DOUBLE
42027: LESSEQUAL
42028: IFTRUE 42032
42030: GO 42109
42032: POP
// begin bc_type := b_lab_full ;
42033: LD_ADDR_OWVAR 42
42037: PUSH
42038: LD_INT 8
42040: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
42041: LD_ADDR_OWVAR 44
42045: PUSH
42046: LD_INT 10
42048: PUSH
42049: LD_INT 12
42051: PUSH
42052: LD_INT 14
42054: PUSH
42055: LD_INT 13
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: PUSH
42064: LD_VAR 0 2
42068: PUSH
42069: LD_INT 9
42071: MINUS
42072: ARRAY
42073: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
42074: LD_ADDR_OWVAR 45
42078: PUSH
42079: LD_INT 11
42081: PUSH
42082: LD_INT 15
42084: PUSH
42085: LD_INT 12
42087: PUSH
42088: LD_INT 15
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: PUSH
42097: LD_VAR 0 2
42101: PUSH
42102: LD_INT 9
42104: MINUS
42105: ARRAY
42106: ST_TO_ADDR
// end ; 14 :
42107: GO 42526
42109: LD_INT 14
42111: DOUBLE
42112: EQUAL
42113: IFTRUE 42117
42115: GO 42128
42117: POP
// bc_type := b_workshop ; 15 :
42118: LD_ADDR_OWVAR 42
42122: PUSH
42123: LD_INT 2
42125: ST_TO_ADDR
42126: GO 42526
42128: LD_INT 15
42130: DOUBLE
42131: EQUAL
42132: IFTRUE 42136
42134: GO 42147
42136: POP
// bc_type := b_factory ; 16 :
42137: LD_ADDR_OWVAR 42
42141: PUSH
42142: LD_INT 3
42144: ST_TO_ADDR
42145: GO 42526
42147: LD_INT 16
42149: DOUBLE
42150: EQUAL
42151: IFTRUE 42155
42153: GO 42166
42155: POP
// bc_type := b_ext_gun ; 17 :
42156: LD_ADDR_OWVAR 42
42160: PUSH
42161: LD_INT 17
42163: ST_TO_ADDR
42164: GO 42526
42166: LD_INT 17
42168: DOUBLE
42169: EQUAL
42170: IFTRUE 42174
42172: GO 42202
42174: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
42175: LD_ADDR_OWVAR 42
42179: PUSH
42180: LD_INT 19
42182: PUSH
42183: LD_INT 23
42185: PUSH
42186: LD_INT 19
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: LIST
42193: PUSH
42194: LD_VAR 0 1
42198: ARRAY
42199: ST_TO_ADDR
42200: GO 42526
42202: LD_INT 18
42204: DOUBLE
42205: EQUAL
42206: IFTRUE 42210
42208: GO 42221
42210: POP
// bc_type := b_ext_radar ; 19 :
42211: LD_ADDR_OWVAR 42
42215: PUSH
42216: LD_INT 20
42218: ST_TO_ADDR
42219: GO 42526
42221: LD_INT 19
42223: DOUBLE
42224: EQUAL
42225: IFTRUE 42229
42227: GO 42240
42229: POP
// bc_type := b_ext_radio ; 20 :
42230: LD_ADDR_OWVAR 42
42234: PUSH
42235: LD_INT 22
42237: ST_TO_ADDR
42238: GO 42526
42240: LD_INT 20
42242: DOUBLE
42243: EQUAL
42244: IFTRUE 42248
42246: GO 42259
42248: POP
// bc_type := b_ext_siberium ; 21 :
42249: LD_ADDR_OWVAR 42
42253: PUSH
42254: LD_INT 21
42256: ST_TO_ADDR
42257: GO 42526
42259: LD_INT 21
42261: DOUBLE
42262: EQUAL
42263: IFTRUE 42267
42265: GO 42278
42267: POP
// bc_type := b_ext_computer ; 22 :
42268: LD_ADDR_OWVAR 42
42272: PUSH
42273: LD_INT 24
42275: ST_TO_ADDR
42276: GO 42526
42278: LD_INT 22
42280: DOUBLE
42281: EQUAL
42282: IFTRUE 42286
42284: GO 42297
42286: POP
// bc_type := b_ext_track ; 23 :
42287: LD_ADDR_OWVAR 42
42291: PUSH
42292: LD_INT 16
42294: ST_TO_ADDR
42295: GO 42526
42297: LD_INT 23
42299: DOUBLE
42300: EQUAL
42301: IFTRUE 42305
42303: GO 42316
42305: POP
// bc_type := b_ext_laser ; 24 :
42306: LD_ADDR_OWVAR 42
42310: PUSH
42311: LD_INT 25
42313: ST_TO_ADDR
42314: GO 42526
42316: LD_INT 24
42318: DOUBLE
42319: EQUAL
42320: IFTRUE 42324
42322: GO 42335
42324: POP
// bc_type := b_control_tower ; 25 :
42325: LD_ADDR_OWVAR 42
42329: PUSH
42330: LD_INT 36
42332: ST_TO_ADDR
42333: GO 42526
42335: LD_INT 25
42337: DOUBLE
42338: EQUAL
42339: IFTRUE 42343
42341: GO 42354
42343: POP
// bc_type := b_breastwork ; 26 :
42344: LD_ADDR_OWVAR 42
42348: PUSH
42349: LD_INT 31
42351: ST_TO_ADDR
42352: GO 42526
42354: LD_INT 26
42356: DOUBLE
42357: EQUAL
42358: IFTRUE 42362
42360: GO 42373
42362: POP
// bc_type := b_bunker ; 27 :
42363: LD_ADDR_OWVAR 42
42367: PUSH
42368: LD_INT 32
42370: ST_TO_ADDR
42371: GO 42526
42373: LD_INT 27
42375: DOUBLE
42376: EQUAL
42377: IFTRUE 42381
42379: GO 42392
42381: POP
// bc_type := b_turret ; 28 :
42382: LD_ADDR_OWVAR 42
42386: PUSH
42387: LD_INT 33
42389: ST_TO_ADDR
42390: GO 42526
42392: LD_INT 28
42394: DOUBLE
42395: EQUAL
42396: IFTRUE 42400
42398: GO 42411
42400: POP
// bc_type := b_armoury ; 29 :
42401: LD_ADDR_OWVAR 42
42405: PUSH
42406: LD_INT 4
42408: ST_TO_ADDR
42409: GO 42526
42411: LD_INT 29
42413: DOUBLE
42414: EQUAL
42415: IFTRUE 42419
42417: GO 42430
42419: POP
// bc_type := b_barracks ; 30 :
42420: LD_ADDR_OWVAR 42
42424: PUSH
42425: LD_INT 5
42427: ST_TO_ADDR
42428: GO 42526
42430: LD_INT 30
42432: DOUBLE
42433: EQUAL
42434: IFTRUE 42438
42436: GO 42449
42438: POP
// bc_type := b_solar_power ; 31 :
42439: LD_ADDR_OWVAR 42
42443: PUSH
42444: LD_INT 27
42446: ST_TO_ADDR
42447: GO 42526
42449: LD_INT 31
42451: DOUBLE
42452: EQUAL
42453: IFTRUE 42457
42455: GO 42468
42457: POP
// bc_type := b_oil_power ; 32 :
42458: LD_ADDR_OWVAR 42
42462: PUSH
42463: LD_INT 26
42465: ST_TO_ADDR
42466: GO 42526
42468: LD_INT 32
42470: DOUBLE
42471: EQUAL
42472: IFTRUE 42476
42474: GO 42487
42476: POP
// bc_type := b_siberite_power ; 33 :
42477: LD_ADDR_OWVAR 42
42481: PUSH
42482: LD_INT 28
42484: ST_TO_ADDR
42485: GO 42526
42487: LD_INT 33
42489: DOUBLE
42490: EQUAL
42491: IFTRUE 42495
42493: GO 42506
42495: POP
// bc_type := b_oil_mine ; 34 :
42496: LD_ADDR_OWVAR 42
42500: PUSH
42501: LD_INT 29
42503: ST_TO_ADDR
42504: GO 42526
42506: LD_INT 34
42508: DOUBLE
42509: EQUAL
42510: IFTRUE 42514
42512: GO 42525
42514: POP
// bc_type := b_siberite_mine ; end ;
42515: LD_ADDR_OWVAR 42
42519: PUSH
42520: LD_INT 30
42522: ST_TO_ADDR
42523: GO 42526
42525: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
42526: LD_ADDR_VAR 0 8
42530: PUSH
42531: LD_VAR 0 5
42535: PPUSH
42536: LD_VAR 0 6
42540: PPUSH
42541: LD_VAR 0 3
42545: PPUSH
42546: CALL_OW 47
42550: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
42551: LD_OWVAR 42
42555: PUSH
42556: LD_INT 32
42558: PUSH
42559: LD_INT 33
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: IN
42566: IFFALSE 42582
// PlaceWeaponTurret ( b , weapon ) ;
42568: LD_VAR 0 8
42572: PPUSH
42573: LD_VAR 0 4
42577: PPUSH
42578: CALL_OW 431
// end ;
42582: LD_VAR 0 7
42586: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
42587: LD_INT 0
42589: PPUSH
42590: PPUSH
42591: PPUSH
42592: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42593: LD_ADDR_VAR 0 4
42597: PUSH
42598: LD_INT 22
42600: PUSH
42601: LD_OWVAR 2
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 2
42612: PUSH
42613: LD_INT 30
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 30
42625: PUSH
42626: LD_INT 1
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: LIST
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PPUSH
42642: CALL_OW 69
42646: ST_TO_ADDR
// if not tmp then
42647: LD_VAR 0 4
42651: NOT
42652: IFFALSE 42656
// exit ;
42654: GO 42715
// for i in tmp do
42656: LD_ADDR_VAR 0 2
42660: PUSH
42661: LD_VAR 0 4
42665: PUSH
42666: FOR_IN
42667: IFFALSE 42713
// for j = 1 to 3 do
42669: LD_ADDR_VAR 0 3
42673: PUSH
42674: DOUBLE
42675: LD_INT 1
42677: DEC
42678: ST_TO_ADDR
42679: LD_INT 3
42681: PUSH
42682: FOR_TO
42683: IFFALSE 42709
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
42685: LD_VAR 0 2
42689: PPUSH
42690: CALL_OW 274
42694: PPUSH
42695: LD_VAR 0 3
42699: PPUSH
42700: LD_INT 99999
42702: PPUSH
42703: CALL_OW 277
42707: GO 42682
42709: POP
42710: POP
42711: GO 42666
42713: POP
42714: POP
// end ;
42715: LD_VAR 0 1
42719: RET
// export function hHackSetLevel10 ; var i , j ; begin
42720: LD_INT 0
42722: PPUSH
42723: PPUSH
42724: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
42725: LD_ADDR_VAR 0 2
42729: PUSH
42730: LD_INT 21
42732: PUSH
42733: LD_INT 1
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PPUSH
42740: CALL_OW 69
42744: PUSH
42745: FOR_IN
42746: IFFALSE 42798
// if IsSelected ( i ) then
42748: LD_VAR 0 2
42752: PPUSH
42753: CALL_OW 306
42757: IFFALSE 42796
// begin for j := 1 to 4 do
42759: LD_ADDR_VAR 0 3
42763: PUSH
42764: DOUBLE
42765: LD_INT 1
42767: DEC
42768: ST_TO_ADDR
42769: LD_INT 4
42771: PUSH
42772: FOR_TO
42773: IFFALSE 42794
// SetSkill ( i , j , 10 ) ;
42775: LD_VAR 0 2
42779: PPUSH
42780: LD_VAR 0 3
42784: PPUSH
42785: LD_INT 10
42787: PPUSH
42788: CALL_OW 237
42792: GO 42772
42794: POP
42795: POP
// end ;
42796: GO 42745
42798: POP
42799: POP
// end ;
42800: LD_VAR 0 1
42804: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
42805: LD_INT 0
42807: PPUSH
42808: PPUSH
42809: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
42810: LD_ADDR_VAR 0 2
42814: PUSH
42815: LD_INT 22
42817: PUSH
42818: LD_OWVAR 2
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 21
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PPUSH
42841: CALL_OW 69
42845: PUSH
42846: FOR_IN
42847: IFFALSE 42888
// begin for j := 1 to 4 do
42849: LD_ADDR_VAR 0 3
42853: PUSH
42854: DOUBLE
42855: LD_INT 1
42857: DEC
42858: ST_TO_ADDR
42859: LD_INT 4
42861: PUSH
42862: FOR_TO
42863: IFFALSE 42884
// SetSkill ( i , j , 10 ) ;
42865: LD_VAR 0 2
42869: PPUSH
42870: LD_VAR 0 3
42874: PPUSH
42875: LD_INT 10
42877: PPUSH
42878: CALL_OW 237
42882: GO 42862
42884: POP
42885: POP
// end ;
42886: GO 42846
42888: POP
42889: POP
// end ;
42890: LD_VAR 0 1
42894: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
42895: LD_INT 0
42897: PPUSH
// uc_side := your_side ;
42898: LD_ADDR_OWVAR 20
42902: PUSH
42903: LD_OWVAR 2
42907: ST_TO_ADDR
// uc_nation := nation ;
42908: LD_ADDR_OWVAR 21
42912: PUSH
42913: LD_VAR 0 1
42917: ST_TO_ADDR
// InitHc ;
42918: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
42922: LD_INT 0
42924: PPUSH
42925: LD_VAR 0 2
42929: PPUSH
42930: LD_VAR 0 3
42934: PPUSH
42935: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
42939: LD_VAR 0 4
42943: PPUSH
42944: LD_VAR 0 5
42948: PPUSH
42949: CALL_OW 428
42953: PUSH
42954: LD_INT 0
42956: EQUAL
42957: IFFALSE 42981
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
42959: CALL_OW 44
42963: PPUSH
42964: LD_VAR 0 4
42968: PPUSH
42969: LD_VAR 0 5
42973: PPUSH
42974: LD_INT 1
42976: PPUSH
42977: CALL_OW 48
// end ;
42981: LD_VAR 0 6
42985: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
42986: LD_INT 0
42988: PPUSH
42989: PPUSH
// uc_side := your_side ;
42990: LD_ADDR_OWVAR 20
42994: PUSH
42995: LD_OWVAR 2
42999: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
43000: LD_VAR 0 1
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: LD_INT 2
43010: PUSH
43011: LD_INT 3
43013: PUSH
43014: LD_INT 4
43016: PUSH
43017: LD_INT 5
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: IN
43027: IFFALSE 43039
// uc_nation := nation_american else
43029: LD_ADDR_OWVAR 21
43033: PUSH
43034: LD_INT 1
43036: ST_TO_ADDR
43037: GO 43082
// if chassis in [ 11 , 12 , 13 , 14 ] then
43039: LD_VAR 0 1
43043: PUSH
43044: LD_INT 11
43046: PUSH
43047: LD_INT 12
43049: PUSH
43050: LD_INT 13
43052: PUSH
43053: LD_INT 14
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: IN
43062: IFFALSE 43074
// uc_nation := nation_arabian else
43064: LD_ADDR_OWVAR 21
43068: PUSH
43069: LD_INT 2
43071: ST_TO_ADDR
43072: GO 43082
// uc_nation := nation_russian ;
43074: LD_ADDR_OWVAR 21
43078: PUSH
43079: LD_INT 3
43081: ST_TO_ADDR
// vc_chassis := chassis ;
43082: LD_ADDR_OWVAR 37
43086: PUSH
43087: LD_VAR 0 1
43091: ST_TO_ADDR
// vc_engine := engine ;
43092: LD_ADDR_OWVAR 39
43096: PUSH
43097: LD_VAR 0 2
43101: ST_TO_ADDR
// vc_control := control ;
43102: LD_ADDR_OWVAR 38
43106: PUSH
43107: LD_VAR 0 3
43111: ST_TO_ADDR
// vc_weapon := weapon ;
43112: LD_ADDR_OWVAR 40
43116: PUSH
43117: LD_VAR 0 4
43121: ST_TO_ADDR
// un := CreateVehicle ;
43122: LD_ADDR_VAR 0 8
43126: PUSH
43127: CALL_OW 45
43131: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
43132: LD_VAR 0 8
43136: PPUSH
43137: LD_INT 0
43139: PPUSH
43140: LD_INT 5
43142: PPUSH
43143: CALL_OW 12
43147: PPUSH
43148: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
43152: LD_VAR 0 8
43156: PPUSH
43157: LD_VAR 0 5
43161: PPUSH
43162: LD_VAR 0 6
43166: PPUSH
43167: LD_INT 1
43169: PPUSH
43170: CALL_OW 48
// end ;
43174: LD_VAR 0 7
43178: RET
// export hInvincible ; every 1 do
43179: GO 43181
43181: DISABLE
// hInvincible := [ ] ;
43182: LD_ADDR_EXP 145
43186: PUSH
43187: EMPTY
43188: ST_TO_ADDR
43189: END
// every 10 do var i ;
43190: GO 43192
43192: DISABLE
43193: LD_INT 0
43195: PPUSH
// begin enable ;
43196: ENABLE
// if not hInvincible then
43197: LD_EXP 145
43201: NOT
43202: IFFALSE 43206
// exit ;
43204: GO 43250
// for i in hInvincible do
43206: LD_ADDR_VAR 0 1
43210: PUSH
43211: LD_EXP 145
43215: PUSH
43216: FOR_IN
43217: IFFALSE 43248
// if GetLives ( i ) < 1000 then
43219: LD_VAR 0 1
43223: PPUSH
43224: CALL_OW 256
43228: PUSH
43229: LD_INT 1000
43231: LESS
43232: IFFALSE 43246
// SetLives ( i , 1000 ) ;
43234: LD_VAR 0 1
43238: PPUSH
43239: LD_INT 1000
43241: PPUSH
43242: CALL_OW 234
43246: GO 43216
43248: POP
43249: POP
// end ;
43250: PPOPN 1
43252: END
// export function hHackInvincible ; var i ; begin
43253: LD_INT 0
43255: PPUSH
43256: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
43257: LD_ADDR_VAR 0 2
43261: PUSH
43262: LD_INT 2
43264: PUSH
43265: LD_INT 21
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 21
43277: PUSH
43278: LD_INT 2
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: LIST
43289: PPUSH
43290: CALL_OW 69
43294: PUSH
43295: FOR_IN
43296: IFFALSE 43357
// if IsSelected ( i ) then
43298: LD_VAR 0 2
43302: PPUSH
43303: CALL_OW 306
43307: IFFALSE 43355
// begin if i in hInvincible then
43309: LD_VAR 0 2
43313: PUSH
43314: LD_EXP 145
43318: IN
43319: IFFALSE 43339
// hInvincible := hInvincible diff i else
43321: LD_ADDR_EXP 145
43325: PUSH
43326: LD_EXP 145
43330: PUSH
43331: LD_VAR 0 2
43335: DIFF
43336: ST_TO_ADDR
43337: GO 43355
// hInvincible := hInvincible union i ;
43339: LD_ADDR_EXP 145
43343: PUSH
43344: LD_EXP 145
43348: PUSH
43349: LD_VAR 0 2
43353: UNION
43354: ST_TO_ADDR
// end ;
43355: GO 43295
43357: POP
43358: POP
// end ;
43359: LD_VAR 0 1
43363: RET
// export function hHackInvisible ; var i , j ; begin
43364: LD_INT 0
43366: PPUSH
43367: PPUSH
43368: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
43369: LD_ADDR_VAR 0 2
43373: PUSH
43374: LD_INT 21
43376: PUSH
43377: LD_INT 1
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PPUSH
43384: CALL_OW 69
43388: PUSH
43389: FOR_IN
43390: IFFALSE 43414
// if IsSelected ( i ) then
43392: LD_VAR 0 2
43396: PPUSH
43397: CALL_OW 306
43401: IFFALSE 43412
// ComForceInvisible ( i ) ;
43403: LD_VAR 0 2
43407: PPUSH
43408: CALL_OW 496
43412: GO 43389
43414: POP
43415: POP
// end ;
43416: LD_VAR 0 1
43420: RET
// export function hHackChangeYourSide ; begin
43421: LD_INT 0
43423: PPUSH
// if your_side = 8 then
43424: LD_OWVAR 2
43428: PUSH
43429: LD_INT 8
43431: EQUAL
43432: IFFALSE 43444
// your_side := 0 else
43434: LD_ADDR_OWVAR 2
43438: PUSH
43439: LD_INT 0
43441: ST_TO_ADDR
43442: GO 43458
// your_side := your_side + 1 ;
43444: LD_ADDR_OWVAR 2
43448: PUSH
43449: LD_OWVAR 2
43453: PUSH
43454: LD_INT 1
43456: PLUS
43457: ST_TO_ADDR
// end ;
43458: LD_VAR 0 1
43462: RET
// export function hHackChangeUnitSide ; var i , j ; begin
43463: LD_INT 0
43465: PPUSH
43466: PPUSH
43467: PPUSH
// for i in all_units do
43468: LD_ADDR_VAR 0 2
43472: PUSH
43473: LD_OWVAR 3
43477: PUSH
43478: FOR_IN
43479: IFFALSE 43557
// if IsSelected ( i ) then
43481: LD_VAR 0 2
43485: PPUSH
43486: CALL_OW 306
43490: IFFALSE 43555
// begin j := GetSide ( i ) ;
43492: LD_ADDR_VAR 0 3
43496: PUSH
43497: LD_VAR 0 2
43501: PPUSH
43502: CALL_OW 255
43506: ST_TO_ADDR
// if j = 8 then
43507: LD_VAR 0 3
43511: PUSH
43512: LD_INT 8
43514: EQUAL
43515: IFFALSE 43527
// j := 0 else
43517: LD_ADDR_VAR 0 3
43521: PUSH
43522: LD_INT 0
43524: ST_TO_ADDR
43525: GO 43541
// j := j + 1 ;
43527: LD_ADDR_VAR 0 3
43531: PUSH
43532: LD_VAR 0 3
43536: PUSH
43537: LD_INT 1
43539: PLUS
43540: ST_TO_ADDR
// SetSide ( i , j ) ;
43541: LD_VAR 0 2
43545: PPUSH
43546: LD_VAR 0 3
43550: PPUSH
43551: CALL_OW 235
// end ;
43555: GO 43478
43557: POP
43558: POP
// end ;
43559: LD_VAR 0 1
43563: RET
// export function hHackFog ; begin
43564: LD_INT 0
43566: PPUSH
// FogOff ( true ) ;
43567: LD_INT 1
43569: PPUSH
43570: CALL_OW 344
// end ;
43574: LD_VAR 0 1
43578: RET
// export function hHackTeleport ( unit , x , y ) ; begin
43579: LD_INT 0
43581: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
43582: LD_VAR 0 1
43586: PPUSH
43587: LD_VAR 0 2
43591: PPUSH
43592: LD_VAR 0 3
43596: PPUSH
43597: LD_INT 1
43599: PPUSH
43600: LD_INT 1
43602: PPUSH
43603: CALL_OW 483
// CenterOnXY ( x , y ) ;
43607: LD_VAR 0 2
43611: PPUSH
43612: LD_VAR 0 3
43616: PPUSH
43617: CALL_OW 84
// end ; end_of_file
43621: LD_VAR 0 4
43625: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
43626: LD_INT 0
43628: PPUSH
43629: PPUSH
43630: PPUSH
43631: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
43632: LD_VAR 0 1
43636: PPUSH
43637: CALL_OW 264
43641: PUSH
43642: LD_EXP 73
43646: EQUAL
43647: IFFALSE 43719
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
43649: LD_INT 68
43651: PPUSH
43652: LD_VAR 0 1
43656: PPUSH
43657: CALL_OW 255
43661: PPUSH
43662: CALL_OW 321
43666: PUSH
43667: LD_INT 2
43669: EQUAL
43670: IFFALSE 43682
// eff := 70 else
43672: LD_ADDR_VAR 0 4
43676: PUSH
43677: LD_INT 70
43679: ST_TO_ADDR
43680: GO 43690
// eff := 30 ;
43682: LD_ADDR_VAR 0 4
43686: PUSH
43687: LD_INT 30
43689: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
43690: LD_VAR 0 1
43694: PPUSH
43695: CALL_OW 250
43699: PPUSH
43700: LD_VAR 0 1
43704: PPUSH
43705: CALL_OW 251
43709: PPUSH
43710: LD_VAR 0 4
43714: PPUSH
43715: CALL_OW 495
// end ; end ;
43719: LD_VAR 0 2
43723: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
43724: LD_INT 0
43726: PPUSH
// end ;
43727: LD_VAR 0 4
43731: RET
// export function SOS_Command ( cmd ) ; begin
43732: LD_INT 0
43734: PPUSH
// end ;
43735: LD_VAR 0 2
43739: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
43740: LD_INT 0
43742: PPUSH
// end ;
43743: LD_VAR 0 6
43747: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
43748: LD_INT 0
43750: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
43751: LD_VAR 0 1
43755: PUSH
43756: LD_INT 250
43758: EQUAL
43759: PUSH
43760: LD_VAR 0 2
43764: PPUSH
43765: CALL_OW 264
43769: PUSH
43770: LD_EXP 76
43774: EQUAL
43775: AND
43776: IFFALSE 43797
// MinerPlaceMine ( unit , x , y ) ;
43778: LD_VAR 0 2
43782: PPUSH
43783: LD_VAR 0 4
43787: PPUSH
43788: LD_VAR 0 5
43792: PPUSH
43793: CALL 46146 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
43797: LD_VAR 0 1
43801: PUSH
43802: LD_INT 251
43804: EQUAL
43805: PUSH
43806: LD_VAR 0 2
43810: PPUSH
43811: CALL_OW 264
43815: PUSH
43816: LD_EXP 76
43820: EQUAL
43821: AND
43822: IFFALSE 43843
// MinerDetonateMine ( unit , x , y ) ;
43824: LD_VAR 0 2
43828: PPUSH
43829: LD_VAR 0 4
43833: PPUSH
43834: LD_VAR 0 5
43838: PPUSH
43839: CALL 46423 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
43843: LD_VAR 0 1
43847: PUSH
43848: LD_INT 252
43850: EQUAL
43851: PUSH
43852: LD_VAR 0 2
43856: PPUSH
43857: CALL_OW 264
43861: PUSH
43862: LD_EXP 76
43866: EQUAL
43867: AND
43868: IFFALSE 43889
// MinerCreateMinefield ( unit , x , y ) ;
43870: LD_VAR 0 2
43874: PPUSH
43875: LD_VAR 0 4
43879: PPUSH
43880: LD_VAR 0 5
43884: PPUSH
43885: CALL 46840 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
43889: LD_VAR 0 1
43893: PUSH
43894: LD_INT 253
43896: EQUAL
43897: PUSH
43898: LD_VAR 0 2
43902: PPUSH
43903: CALL_OW 257
43907: PUSH
43908: LD_INT 5
43910: EQUAL
43911: AND
43912: IFFALSE 43933
// ComBinocular ( unit , x , y ) ;
43914: LD_VAR 0 2
43918: PPUSH
43919: LD_VAR 0 4
43923: PPUSH
43924: LD_VAR 0 5
43928: PPUSH
43929: CALL 47211 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
43933: LD_VAR 0 1
43937: PUSH
43938: LD_INT 254
43940: EQUAL
43941: PUSH
43942: LD_VAR 0 2
43946: PPUSH
43947: CALL_OW 264
43951: PUSH
43952: LD_EXP 71
43956: EQUAL
43957: AND
43958: PUSH
43959: LD_VAR 0 3
43963: PPUSH
43964: CALL_OW 263
43968: PUSH
43969: LD_INT 3
43971: EQUAL
43972: AND
43973: IFFALSE 43989
// HackDestroyVehicle ( unit , selectedUnit ) ;
43975: LD_VAR 0 2
43979: PPUSH
43980: LD_VAR 0 3
43984: PPUSH
43985: CALL 45506 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
43989: LD_VAR 0 1
43993: PUSH
43994: LD_INT 255
43996: EQUAL
43997: PUSH
43998: LD_VAR 0 2
44002: PPUSH
44003: CALL_OW 264
44007: PUSH
44008: LD_INT 14
44010: PUSH
44011: LD_INT 53
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: IN
44018: AND
44019: PUSH
44020: LD_VAR 0 4
44024: PPUSH
44025: LD_VAR 0 5
44029: PPUSH
44030: CALL_OW 488
44034: AND
44035: IFFALSE 44059
// CutTreeXYR ( unit , x , y , 12 ) ;
44037: LD_VAR 0 2
44041: PPUSH
44042: LD_VAR 0 4
44046: PPUSH
44047: LD_VAR 0 5
44051: PPUSH
44052: LD_INT 12
44054: PPUSH
44055: CALL 44072 0 4
// end ;
44059: LD_VAR 0 6
44063: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
44064: LD_INT 0
44066: PPUSH
// end ;
44067: LD_VAR 0 4
44071: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
44072: LD_INT 0
44074: PPUSH
44075: PPUSH
44076: PPUSH
44077: PPUSH
44078: PPUSH
44079: PPUSH
44080: PPUSH
44081: PPUSH
44082: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
44083: LD_VAR 0 1
44087: NOT
44088: PUSH
44089: LD_VAR 0 2
44093: PPUSH
44094: LD_VAR 0 3
44098: PPUSH
44099: CALL_OW 488
44103: NOT
44104: OR
44105: PUSH
44106: LD_VAR 0 4
44110: NOT
44111: OR
44112: IFFALSE 44116
// exit ;
44114: GO 44456
// list := [ ] ;
44116: LD_ADDR_VAR 0 13
44120: PUSH
44121: EMPTY
44122: ST_TO_ADDR
// if x - r < 0 then
44123: LD_VAR 0 2
44127: PUSH
44128: LD_VAR 0 4
44132: MINUS
44133: PUSH
44134: LD_INT 0
44136: LESS
44137: IFFALSE 44149
// min_x := 0 else
44139: LD_ADDR_VAR 0 7
44143: PUSH
44144: LD_INT 0
44146: ST_TO_ADDR
44147: GO 44165
// min_x := x - r ;
44149: LD_ADDR_VAR 0 7
44153: PUSH
44154: LD_VAR 0 2
44158: PUSH
44159: LD_VAR 0 4
44163: MINUS
44164: ST_TO_ADDR
// if y - r < 0 then
44165: LD_VAR 0 3
44169: PUSH
44170: LD_VAR 0 4
44174: MINUS
44175: PUSH
44176: LD_INT 0
44178: LESS
44179: IFFALSE 44191
// min_y := 0 else
44181: LD_ADDR_VAR 0 8
44185: PUSH
44186: LD_INT 0
44188: ST_TO_ADDR
44189: GO 44207
// min_y := y - r ;
44191: LD_ADDR_VAR 0 8
44195: PUSH
44196: LD_VAR 0 3
44200: PUSH
44201: LD_VAR 0 4
44205: MINUS
44206: ST_TO_ADDR
// max_x := x + r ;
44207: LD_ADDR_VAR 0 9
44211: PUSH
44212: LD_VAR 0 2
44216: PUSH
44217: LD_VAR 0 4
44221: PLUS
44222: ST_TO_ADDR
// max_y := y + r ;
44223: LD_ADDR_VAR 0 10
44227: PUSH
44228: LD_VAR 0 3
44232: PUSH
44233: LD_VAR 0 4
44237: PLUS
44238: ST_TO_ADDR
// for _x = min_x to max_x do
44239: LD_ADDR_VAR 0 11
44243: PUSH
44244: DOUBLE
44245: LD_VAR 0 7
44249: DEC
44250: ST_TO_ADDR
44251: LD_VAR 0 9
44255: PUSH
44256: FOR_TO
44257: IFFALSE 44374
// for _y = min_y to max_y do
44259: LD_ADDR_VAR 0 12
44263: PUSH
44264: DOUBLE
44265: LD_VAR 0 8
44269: DEC
44270: ST_TO_ADDR
44271: LD_VAR 0 10
44275: PUSH
44276: FOR_TO
44277: IFFALSE 44370
// begin if not ValidHex ( _x , _y ) then
44279: LD_VAR 0 11
44283: PPUSH
44284: LD_VAR 0 12
44288: PPUSH
44289: CALL_OW 488
44293: NOT
44294: IFFALSE 44298
// continue ;
44296: GO 44276
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
44298: LD_VAR 0 11
44302: PPUSH
44303: LD_VAR 0 12
44307: PPUSH
44308: CALL_OW 351
44312: PUSH
44313: LD_VAR 0 11
44317: PPUSH
44318: LD_VAR 0 12
44322: PPUSH
44323: CALL_OW 554
44327: AND
44328: IFFALSE 44368
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
44330: LD_ADDR_VAR 0 13
44334: PUSH
44335: LD_VAR 0 13
44339: PPUSH
44340: LD_VAR 0 13
44344: PUSH
44345: LD_INT 1
44347: PLUS
44348: PPUSH
44349: LD_VAR 0 11
44353: PUSH
44354: LD_VAR 0 12
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PPUSH
44363: CALL_OW 2
44367: ST_TO_ADDR
// end ;
44368: GO 44276
44370: POP
44371: POP
44372: GO 44256
44374: POP
44375: POP
// if not list then
44376: LD_VAR 0 13
44380: NOT
44381: IFFALSE 44385
// exit ;
44383: GO 44456
// for i in list do
44385: LD_ADDR_VAR 0 6
44389: PUSH
44390: LD_VAR 0 13
44394: PUSH
44395: FOR_IN
44396: IFFALSE 44454
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
44398: LD_VAR 0 1
44402: PPUSH
44403: LD_STRING M
44405: PUSH
44406: LD_VAR 0 6
44410: PUSH
44411: LD_INT 1
44413: ARRAY
44414: PUSH
44415: LD_VAR 0 6
44419: PUSH
44420: LD_INT 2
44422: ARRAY
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: PUSH
44445: EMPTY
44446: LIST
44447: PPUSH
44448: CALL_OW 447
44452: GO 44395
44454: POP
44455: POP
// end ;
44456: LD_VAR 0 5
44460: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
44461: LD_EXP 148
44465: NOT
44466: IFFALSE 44516
44468: GO 44470
44470: DISABLE
// begin initHack := true ;
44471: LD_ADDR_EXP 148
44475: PUSH
44476: LD_INT 1
44478: ST_TO_ADDR
// hackTanks := [ ] ;
44479: LD_ADDR_EXP 149
44483: PUSH
44484: EMPTY
44485: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
44486: LD_ADDR_EXP 150
44490: PUSH
44491: EMPTY
44492: ST_TO_ADDR
// hackLimit := 3 ;
44493: LD_ADDR_EXP 151
44497: PUSH
44498: LD_INT 3
44500: ST_TO_ADDR
// hackDist := 12 ;
44501: LD_ADDR_EXP 152
44505: PUSH
44506: LD_INT 12
44508: ST_TO_ADDR
// hackCounter := [ ] ;
44509: LD_ADDR_EXP 153
44513: PUSH
44514: EMPTY
44515: ST_TO_ADDR
// end ;
44516: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
44517: LD_EXP 148
44521: PUSH
44522: LD_INT 34
44524: PUSH
44525: LD_EXP 71
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PPUSH
44534: CALL_OW 69
44538: AND
44539: IFFALSE 44794
44541: GO 44543
44543: DISABLE
44544: LD_INT 0
44546: PPUSH
44547: PPUSH
// begin enable ;
44548: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
44549: LD_ADDR_VAR 0 1
44553: PUSH
44554: LD_INT 34
44556: PUSH
44557: LD_EXP 71
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PPUSH
44566: CALL_OW 69
44570: PUSH
44571: FOR_IN
44572: IFFALSE 44792
// begin if not i in hackTanks then
44574: LD_VAR 0 1
44578: PUSH
44579: LD_EXP 149
44583: IN
44584: NOT
44585: IFFALSE 44668
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
44587: LD_ADDR_EXP 149
44591: PUSH
44592: LD_EXP 149
44596: PPUSH
44597: LD_EXP 149
44601: PUSH
44602: LD_INT 1
44604: PLUS
44605: PPUSH
44606: LD_VAR 0 1
44610: PPUSH
44611: CALL_OW 1
44615: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
44616: LD_ADDR_EXP 150
44620: PUSH
44621: LD_EXP 150
44625: PPUSH
44626: LD_EXP 150
44630: PUSH
44631: LD_INT 1
44633: PLUS
44634: PPUSH
44635: EMPTY
44636: PPUSH
44637: CALL_OW 1
44641: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
44642: LD_ADDR_EXP 153
44646: PUSH
44647: LD_EXP 153
44651: PPUSH
44652: LD_EXP 153
44656: PUSH
44657: LD_INT 1
44659: PLUS
44660: PPUSH
44661: EMPTY
44662: PPUSH
44663: CALL_OW 1
44667: ST_TO_ADDR
// end ; if not IsOk ( i ) then
44668: LD_VAR 0 1
44672: PPUSH
44673: CALL_OW 302
44677: NOT
44678: IFFALSE 44691
// begin HackUnlinkAll ( i ) ;
44680: LD_VAR 0 1
44684: PPUSH
44685: CALL 44797 0 1
// continue ;
44689: GO 44571
// end ; HackCheckCapturedStatus ( i ) ;
44691: LD_VAR 0 1
44695: PPUSH
44696: CALL 45240 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
44700: LD_ADDR_VAR 0 2
44704: PUSH
44705: LD_INT 81
44707: PUSH
44708: LD_VAR 0 1
44712: PPUSH
44713: CALL_OW 255
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 33
44724: PUSH
44725: LD_INT 3
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 91
44734: PUSH
44735: LD_VAR 0 1
44739: PUSH
44740: LD_EXP 152
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 50
44752: PUSH
44753: EMPTY
44754: LIST
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: PPUSH
44762: CALL_OW 69
44766: ST_TO_ADDR
// if not tmp then
44767: LD_VAR 0 2
44771: NOT
44772: IFFALSE 44776
// continue ;
44774: GO 44571
// HackLink ( i , tmp ) ;
44776: LD_VAR 0 1
44780: PPUSH
44781: LD_VAR 0 2
44785: PPUSH
44786: CALL 44933 0 2
// end ;
44790: GO 44571
44792: POP
44793: POP
// end ;
44794: PPOPN 2
44796: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
44797: LD_INT 0
44799: PPUSH
44800: PPUSH
44801: PPUSH
// if not hack in hackTanks then
44802: LD_VAR 0 1
44806: PUSH
44807: LD_EXP 149
44811: IN
44812: NOT
44813: IFFALSE 44817
// exit ;
44815: GO 44928
// index := GetElementIndex ( hackTanks , hack ) ;
44817: LD_ADDR_VAR 0 4
44821: PUSH
44822: LD_EXP 149
44826: PPUSH
44827: LD_VAR 0 1
44831: PPUSH
44832: CALL 52402 0 2
44836: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
44837: LD_EXP 150
44841: PUSH
44842: LD_VAR 0 4
44846: ARRAY
44847: IFFALSE 44928
// begin for i in hackTanksCaptured [ index ] do
44849: LD_ADDR_VAR 0 3
44853: PUSH
44854: LD_EXP 150
44858: PUSH
44859: LD_VAR 0 4
44863: ARRAY
44864: PUSH
44865: FOR_IN
44866: IFFALSE 44892
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
44868: LD_VAR 0 3
44872: PUSH
44873: LD_INT 1
44875: ARRAY
44876: PPUSH
44877: LD_VAR 0 3
44881: PUSH
44882: LD_INT 2
44884: ARRAY
44885: PPUSH
44886: CALL_OW 235
44890: GO 44865
44892: POP
44893: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
44894: LD_ADDR_EXP 150
44898: PUSH
44899: LD_EXP 150
44903: PPUSH
44904: LD_VAR 0 4
44908: PPUSH
44909: EMPTY
44910: PPUSH
44911: CALL_OW 1
44915: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
44916: LD_VAR 0 1
44920: PPUSH
44921: LD_INT 0
44923: PPUSH
44924: CALL_OW 505
// end ; end ;
44928: LD_VAR 0 2
44932: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
44933: LD_INT 0
44935: PPUSH
44936: PPUSH
44937: PPUSH
// if not hack in hackTanks or not vehicles then
44938: LD_VAR 0 1
44942: PUSH
44943: LD_EXP 149
44947: IN
44948: NOT
44949: PUSH
44950: LD_VAR 0 2
44954: NOT
44955: OR
44956: IFFALSE 44960
// exit ;
44958: GO 45235
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
44960: LD_ADDR_VAR 0 2
44964: PUSH
44965: LD_VAR 0 1
44969: PPUSH
44970: LD_VAR 0 2
44974: PPUSH
44975: LD_INT 1
44977: PPUSH
44978: LD_INT 1
44980: PPUSH
44981: CALL 53052 0 4
44985: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
44986: LD_ADDR_VAR 0 5
44990: PUSH
44991: LD_EXP 149
44995: PPUSH
44996: LD_VAR 0 1
45000: PPUSH
45001: CALL 52402 0 2
45005: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
45006: LD_EXP 150
45010: PUSH
45011: LD_VAR 0 5
45015: ARRAY
45016: PUSH
45017: LD_EXP 151
45021: LESS
45022: IFFALSE 45211
// begin for i := 1 to vehicles do
45024: LD_ADDR_VAR 0 4
45028: PUSH
45029: DOUBLE
45030: LD_INT 1
45032: DEC
45033: ST_TO_ADDR
45034: LD_VAR 0 2
45038: PUSH
45039: FOR_TO
45040: IFFALSE 45209
// begin if hackTanksCaptured [ index ] = hackLimit then
45042: LD_EXP 150
45046: PUSH
45047: LD_VAR 0 5
45051: ARRAY
45052: PUSH
45053: LD_EXP 151
45057: EQUAL
45058: IFFALSE 45062
// break ;
45060: GO 45209
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
45062: LD_ADDR_EXP 153
45066: PUSH
45067: LD_EXP 153
45071: PPUSH
45072: LD_VAR 0 5
45076: PPUSH
45077: LD_EXP 153
45081: PUSH
45082: LD_VAR 0 5
45086: ARRAY
45087: PUSH
45088: LD_INT 1
45090: PLUS
45091: PPUSH
45092: CALL_OW 1
45096: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
45097: LD_ADDR_EXP 150
45101: PUSH
45102: LD_EXP 150
45106: PPUSH
45107: LD_VAR 0 5
45111: PUSH
45112: LD_EXP 150
45116: PUSH
45117: LD_VAR 0 5
45121: ARRAY
45122: PUSH
45123: LD_INT 1
45125: PLUS
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PPUSH
45131: LD_VAR 0 2
45135: PUSH
45136: LD_VAR 0 4
45140: ARRAY
45141: PUSH
45142: LD_VAR 0 2
45146: PUSH
45147: LD_VAR 0 4
45151: ARRAY
45152: PPUSH
45153: CALL_OW 255
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PPUSH
45162: CALL 52617 0 3
45166: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
45167: LD_VAR 0 2
45171: PUSH
45172: LD_VAR 0 4
45176: ARRAY
45177: PPUSH
45178: LD_VAR 0 1
45182: PPUSH
45183: CALL_OW 255
45187: PPUSH
45188: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
45192: LD_VAR 0 2
45196: PUSH
45197: LD_VAR 0 4
45201: ARRAY
45202: PPUSH
45203: CALL_OW 141
// end ;
45207: GO 45039
45209: POP
45210: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
45211: LD_VAR 0 1
45215: PPUSH
45216: LD_EXP 150
45220: PUSH
45221: LD_VAR 0 5
45225: ARRAY
45226: PUSH
45227: LD_INT 0
45229: PLUS
45230: PPUSH
45231: CALL_OW 505
// end ;
45235: LD_VAR 0 3
45239: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
45240: LD_INT 0
45242: PPUSH
45243: PPUSH
45244: PPUSH
45245: PPUSH
// if not hack in hackTanks then
45246: LD_VAR 0 1
45250: PUSH
45251: LD_EXP 149
45255: IN
45256: NOT
45257: IFFALSE 45261
// exit ;
45259: GO 45501
// index := GetElementIndex ( hackTanks , hack ) ;
45261: LD_ADDR_VAR 0 4
45265: PUSH
45266: LD_EXP 149
45270: PPUSH
45271: LD_VAR 0 1
45275: PPUSH
45276: CALL 52402 0 2
45280: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
45281: LD_ADDR_VAR 0 3
45285: PUSH
45286: DOUBLE
45287: LD_EXP 150
45291: PUSH
45292: LD_VAR 0 4
45296: ARRAY
45297: INC
45298: ST_TO_ADDR
45299: LD_INT 1
45301: PUSH
45302: FOR_DOWNTO
45303: IFFALSE 45475
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
45305: LD_ADDR_VAR 0 5
45309: PUSH
45310: LD_EXP 150
45314: PUSH
45315: LD_VAR 0 4
45319: ARRAY
45320: PUSH
45321: LD_VAR 0 3
45325: ARRAY
45326: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
45327: LD_VAR 0 5
45331: PUSH
45332: LD_INT 1
45334: ARRAY
45335: PPUSH
45336: CALL_OW 302
45340: NOT
45341: PUSH
45342: LD_VAR 0 5
45346: PUSH
45347: LD_INT 1
45349: ARRAY
45350: PPUSH
45351: CALL_OW 255
45355: PUSH
45356: LD_VAR 0 1
45360: PPUSH
45361: CALL_OW 255
45365: NONEQUAL
45366: OR
45367: IFFALSE 45473
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
45369: LD_VAR 0 5
45373: PUSH
45374: LD_INT 1
45376: ARRAY
45377: PPUSH
45378: CALL_OW 305
45382: PUSH
45383: LD_VAR 0 5
45387: PUSH
45388: LD_INT 1
45390: ARRAY
45391: PPUSH
45392: CALL_OW 255
45396: PUSH
45397: LD_VAR 0 1
45401: PPUSH
45402: CALL_OW 255
45406: EQUAL
45407: AND
45408: IFFALSE 45432
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
45410: LD_VAR 0 5
45414: PUSH
45415: LD_INT 1
45417: ARRAY
45418: PPUSH
45419: LD_VAR 0 5
45423: PUSH
45424: LD_INT 2
45426: ARRAY
45427: PPUSH
45428: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
45432: LD_ADDR_EXP 150
45436: PUSH
45437: LD_EXP 150
45441: PPUSH
45442: LD_VAR 0 4
45446: PPUSH
45447: LD_EXP 150
45451: PUSH
45452: LD_VAR 0 4
45456: ARRAY
45457: PPUSH
45458: LD_VAR 0 3
45462: PPUSH
45463: CALL_OW 3
45467: PPUSH
45468: CALL_OW 1
45472: ST_TO_ADDR
// end ; end ;
45473: GO 45302
45475: POP
45476: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
45477: LD_VAR 0 1
45481: PPUSH
45482: LD_EXP 150
45486: PUSH
45487: LD_VAR 0 4
45491: ARRAY
45492: PUSH
45493: LD_INT 0
45495: PLUS
45496: PPUSH
45497: CALL_OW 505
// end ;
45501: LD_VAR 0 2
45505: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
45506: LD_INT 0
45508: PPUSH
45509: PPUSH
45510: PPUSH
45511: PPUSH
// if not hack in hackTanks then
45512: LD_VAR 0 1
45516: PUSH
45517: LD_EXP 149
45521: IN
45522: NOT
45523: IFFALSE 45527
// exit ;
45525: GO 45612
// index := GetElementIndex ( hackTanks , hack ) ;
45527: LD_ADDR_VAR 0 5
45531: PUSH
45532: LD_EXP 149
45536: PPUSH
45537: LD_VAR 0 1
45541: PPUSH
45542: CALL 52402 0 2
45546: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
45547: LD_ADDR_VAR 0 4
45551: PUSH
45552: DOUBLE
45553: LD_INT 1
45555: DEC
45556: ST_TO_ADDR
45557: LD_EXP 150
45561: PUSH
45562: LD_VAR 0 5
45566: ARRAY
45567: PUSH
45568: FOR_TO
45569: IFFALSE 45610
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
45571: LD_EXP 150
45575: PUSH
45576: LD_VAR 0 5
45580: ARRAY
45581: PUSH
45582: LD_VAR 0 4
45586: ARRAY
45587: PUSH
45588: LD_INT 1
45590: ARRAY
45591: PUSH
45592: LD_VAR 0 2
45596: EQUAL
45597: IFFALSE 45608
// KillUnit ( vehicle ) ;
45599: LD_VAR 0 2
45603: PPUSH
45604: CALL_OW 66
45608: GO 45568
45610: POP
45611: POP
// end ;
45612: LD_VAR 0 3
45616: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
45617: LD_EXP 154
45621: NOT
45622: IFFALSE 45657
45624: GO 45626
45626: DISABLE
// begin initMiner := true ;
45627: LD_ADDR_EXP 154
45631: PUSH
45632: LD_INT 1
45634: ST_TO_ADDR
// minersList := [ ] ;
45635: LD_ADDR_EXP 155
45639: PUSH
45640: EMPTY
45641: ST_TO_ADDR
// minerMinesList := [ ] ;
45642: LD_ADDR_EXP 156
45646: PUSH
45647: EMPTY
45648: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
45649: LD_ADDR_EXP 157
45653: PUSH
45654: LD_INT 5
45656: ST_TO_ADDR
// end ;
45657: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
45658: LD_EXP 154
45662: PUSH
45663: LD_INT 34
45665: PUSH
45666: LD_EXP 76
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PPUSH
45675: CALL_OW 69
45679: AND
45680: IFFALSE 46143
45682: GO 45684
45684: DISABLE
45685: LD_INT 0
45687: PPUSH
45688: PPUSH
45689: PPUSH
45690: PPUSH
// begin enable ;
45691: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
45692: LD_ADDR_VAR 0 1
45696: PUSH
45697: LD_INT 34
45699: PUSH
45700: LD_EXP 76
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PPUSH
45709: CALL_OW 69
45713: PUSH
45714: FOR_IN
45715: IFFALSE 45787
// begin if not i in minersList then
45717: LD_VAR 0 1
45721: PUSH
45722: LD_EXP 155
45726: IN
45727: NOT
45728: IFFALSE 45785
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
45730: LD_ADDR_EXP 155
45734: PUSH
45735: LD_EXP 155
45739: PPUSH
45740: LD_EXP 155
45744: PUSH
45745: LD_INT 1
45747: PLUS
45748: PPUSH
45749: LD_VAR 0 1
45753: PPUSH
45754: CALL_OW 1
45758: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
45759: LD_ADDR_EXP 156
45763: PUSH
45764: LD_EXP 156
45768: PPUSH
45769: LD_EXP 156
45773: PUSH
45774: LD_INT 1
45776: PLUS
45777: PPUSH
45778: EMPTY
45779: PPUSH
45780: CALL_OW 1
45784: ST_TO_ADDR
// end end ;
45785: GO 45714
45787: POP
45788: POP
// for i := minerMinesList downto 1 do
45789: LD_ADDR_VAR 0 1
45793: PUSH
45794: DOUBLE
45795: LD_EXP 156
45799: INC
45800: ST_TO_ADDR
45801: LD_INT 1
45803: PUSH
45804: FOR_DOWNTO
45805: IFFALSE 46141
// begin if IsLive ( minersList [ i ] ) then
45807: LD_EXP 155
45811: PUSH
45812: LD_VAR 0 1
45816: ARRAY
45817: PPUSH
45818: CALL_OW 300
45822: IFFALSE 45850
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
45824: LD_EXP 155
45828: PUSH
45829: LD_VAR 0 1
45833: ARRAY
45834: PPUSH
45835: LD_EXP 156
45839: PUSH
45840: LD_VAR 0 1
45844: ARRAY
45845: PPUSH
45846: CALL_OW 505
// if not minerMinesList [ i ] then
45850: LD_EXP 156
45854: PUSH
45855: LD_VAR 0 1
45859: ARRAY
45860: NOT
45861: IFFALSE 45865
// continue ;
45863: GO 45804
// for j := minerMinesList [ i ] downto 1 do
45865: LD_ADDR_VAR 0 2
45869: PUSH
45870: DOUBLE
45871: LD_EXP 156
45875: PUSH
45876: LD_VAR 0 1
45880: ARRAY
45881: INC
45882: ST_TO_ADDR
45883: LD_INT 1
45885: PUSH
45886: FOR_DOWNTO
45887: IFFALSE 46137
// begin side := GetSide ( minersList [ i ] ) ;
45889: LD_ADDR_VAR 0 3
45893: PUSH
45894: LD_EXP 155
45898: PUSH
45899: LD_VAR 0 1
45903: ARRAY
45904: PPUSH
45905: CALL_OW 255
45909: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
45910: LD_ADDR_VAR 0 4
45914: PUSH
45915: LD_EXP 156
45919: PUSH
45920: LD_VAR 0 1
45924: ARRAY
45925: PUSH
45926: LD_VAR 0 2
45930: ARRAY
45931: PUSH
45932: LD_INT 1
45934: ARRAY
45935: PPUSH
45936: LD_EXP 156
45940: PUSH
45941: LD_VAR 0 1
45945: ARRAY
45946: PUSH
45947: LD_VAR 0 2
45951: ARRAY
45952: PUSH
45953: LD_INT 2
45955: ARRAY
45956: PPUSH
45957: CALL_OW 428
45961: ST_TO_ADDR
// if not tmp then
45962: LD_VAR 0 4
45966: NOT
45967: IFFALSE 45971
// continue ;
45969: GO 45886
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
45971: LD_VAR 0 4
45975: PUSH
45976: LD_INT 81
45978: PUSH
45979: LD_VAR 0 3
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PPUSH
45988: CALL_OW 69
45992: IN
45993: PUSH
45994: LD_EXP 156
45998: PUSH
45999: LD_VAR 0 1
46003: ARRAY
46004: PUSH
46005: LD_VAR 0 2
46009: ARRAY
46010: PUSH
46011: LD_INT 1
46013: ARRAY
46014: PPUSH
46015: LD_EXP 156
46019: PUSH
46020: LD_VAR 0 1
46024: ARRAY
46025: PUSH
46026: LD_VAR 0 2
46030: ARRAY
46031: PUSH
46032: LD_INT 2
46034: ARRAY
46035: PPUSH
46036: CALL_OW 458
46040: AND
46041: IFFALSE 46135
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
46043: LD_EXP 156
46047: PUSH
46048: LD_VAR 0 1
46052: ARRAY
46053: PUSH
46054: LD_VAR 0 2
46058: ARRAY
46059: PUSH
46060: LD_INT 1
46062: ARRAY
46063: PPUSH
46064: LD_EXP 156
46068: PUSH
46069: LD_VAR 0 1
46073: ARRAY
46074: PUSH
46075: LD_VAR 0 2
46079: ARRAY
46080: PUSH
46081: LD_INT 2
46083: ARRAY
46084: PPUSH
46085: LD_VAR 0 3
46089: PPUSH
46090: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
46094: LD_ADDR_EXP 156
46098: PUSH
46099: LD_EXP 156
46103: PPUSH
46104: LD_VAR 0 1
46108: PPUSH
46109: LD_EXP 156
46113: PUSH
46114: LD_VAR 0 1
46118: ARRAY
46119: PPUSH
46120: LD_VAR 0 2
46124: PPUSH
46125: CALL_OW 3
46129: PPUSH
46130: CALL_OW 1
46134: ST_TO_ADDR
// end ; end ;
46135: GO 45886
46137: POP
46138: POP
// end ;
46139: GO 45804
46141: POP
46142: POP
// end ;
46143: PPOPN 4
46145: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
46146: LD_INT 0
46148: PPUSH
46149: PPUSH
// result := false ;
46150: LD_ADDR_VAR 0 4
46154: PUSH
46155: LD_INT 0
46157: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
46158: LD_VAR 0 1
46162: PPUSH
46163: CALL_OW 264
46167: PUSH
46168: LD_EXP 76
46172: EQUAL
46173: NOT
46174: IFFALSE 46178
// exit ;
46176: GO 46418
// index := GetElementIndex ( minersList , unit ) ;
46178: LD_ADDR_VAR 0 5
46182: PUSH
46183: LD_EXP 155
46187: PPUSH
46188: LD_VAR 0 1
46192: PPUSH
46193: CALL 52402 0 2
46197: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
46198: LD_EXP 156
46202: PUSH
46203: LD_VAR 0 5
46207: ARRAY
46208: PUSH
46209: LD_EXP 157
46213: GREATEREQUAL
46214: IFFALSE 46218
// exit ;
46216: GO 46418
// ComMoveXY ( unit , x , y ) ;
46218: LD_VAR 0 1
46222: PPUSH
46223: LD_VAR 0 2
46227: PPUSH
46228: LD_VAR 0 3
46232: PPUSH
46233: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
46237: LD_INT 35
46239: PPUSH
46240: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
46244: LD_VAR 0 1
46248: PPUSH
46249: LD_VAR 0 2
46253: PPUSH
46254: LD_VAR 0 3
46258: PPUSH
46259: CALL 83174 0 3
46263: NOT
46264: PUSH
46265: LD_VAR 0 1
46269: PPUSH
46270: CALL_OW 314
46274: AND
46275: IFFALSE 46279
// exit ;
46277: GO 46418
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
46279: LD_VAR 0 2
46283: PPUSH
46284: LD_VAR 0 3
46288: PPUSH
46289: CALL_OW 428
46293: PUSH
46294: LD_VAR 0 1
46298: EQUAL
46299: PUSH
46300: LD_VAR 0 1
46304: PPUSH
46305: CALL_OW 314
46309: NOT
46310: AND
46311: IFFALSE 46237
// PlaySoundXY ( x , y , PlantMine ) ;
46313: LD_VAR 0 2
46317: PPUSH
46318: LD_VAR 0 3
46322: PPUSH
46323: LD_STRING PlantMine
46325: PPUSH
46326: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
46330: LD_VAR 0 2
46334: PPUSH
46335: LD_VAR 0 3
46339: PPUSH
46340: LD_VAR 0 1
46344: PPUSH
46345: CALL_OW 255
46349: PPUSH
46350: LD_INT 0
46352: PPUSH
46353: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
46357: LD_ADDR_EXP 156
46361: PUSH
46362: LD_EXP 156
46366: PPUSH
46367: LD_VAR 0 5
46371: PUSH
46372: LD_EXP 156
46376: PUSH
46377: LD_VAR 0 5
46381: ARRAY
46382: PUSH
46383: LD_INT 1
46385: PLUS
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PPUSH
46391: LD_VAR 0 2
46395: PUSH
46396: LD_VAR 0 3
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PPUSH
46405: CALL 52617 0 3
46409: ST_TO_ADDR
// result := true ;
46410: LD_ADDR_VAR 0 4
46414: PUSH
46415: LD_INT 1
46417: ST_TO_ADDR
// end ;
46418: LD_VAR 0 4
46422: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
46423: LD_INT 0
46425: PPUSH
46426: PPUSH
46427: PPUSH
// if not unit in minersList then
46428: LD_VAR 0 1
46432: PUSH
46433: LD_EXP 155
46437: IN
46438: NOT
46439: IFFALSE 46443
// exit ;
46441: GO 46835
// index := GetElementIndex ( minersList , unit ) ;
46443: LD_ADDR_VAR 0 6
46447: PUSH
46448: LD_EXP 155
46452: PPUSH
46453: LD_VAR 0 1
46457: PPUSH
46458: CALL 52402 0 2
46462: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
46463: LD_ADDR_VAR 0 5
46467: PUSH
46468: DOUBLE
46469: LD_EXP 156
46473: PUSH
46474: LD_VAR 0 6
46478: ARRAY
46479: INC
46480: ST_TO_ADDR
46481: LD_INT 1
46483: PUSH
46484: FOR_DOWNTO
46485: IFFALSE 46646
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
46487: LD_EXP 156
46491: PUSH
46492: LD_VAR 0 6
46496: ARRAY
46497: PUSH
46498: LD_VAR 0 5
46502: ARRAY
46503: PUSH
46504: LD_INT 1
46506: ARRAY
46507: PUSH
46508: LD_VAR 0 2
46512: EQUAL
46513: PUSH
46514: LD_EXP 156
46518: PUSH
46519: LD_VAR 0 6
46523: ARRAY
46524: PUSH
46525: LD_VAR 0 5
46529: ARRAY
46530: PUSH
46531: LD_INT 2
46533: ARRAY
46534: PUSH
46535: LD_VAR 0 3
46539: EQUAL
46540: AND
46541: IFFALSE 46644
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
46543: LD_EXP 156
46547: PUSH
46548: LD_VAR 0 6
46552: ARRAY
46553: PUSH
46554: LD_VAR 0 5
46558: ARRAY
46559: PUSH
46560: LD_INT 1
46562: ARRAY
46563: PPUSH
46564: LD_EXP 156
46568: PUSH
46569: LD_VAR 0 6
46573: ARRAY
46574: PUSH
46575: LD_VAR 0 5
46579: ARRAY
46580: PUSH
46581: LD_INT 2
46583: ARRAY
46584: PPUSH
46585: LD_VAR 0 1
46589: PPUSH
46590: CALL_OW 255
46594: PPUSH
46595: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
46599: LD_ADDR_EXP 156
46603: PUSH
46604: LD_EXP 156
46608: PPUSH
46609: LD_VAR 0 6
46613: PPUSH
46614: LD_EXP 156
46618: PUSH
46619: LD_VAR 0 6
46623: ARRAY
46624: PPUSH
46625: LD_VAR 0 5
46629: PPUSH
46630: CALL_OW 3
46634: PPUSH
46635: CALL_OW 1
46639: ST_TO_ADDR
// exit ;
46640: POP
46641: POP
46642: GO 46835
// end ; end ;
46644: GO 46484
46646: POP
46647: POP
// for i := minerMinesList [ index ] downto 1 do
46648: LD_ADDR_VAR 0 5
46652: PUSH
46653: DOUBLE
46654: LD_EXP 156
46658: PUSH
46659: LD_VAR 0 6
46663: ARRAY
46664: INC
46665: ST_TO_ADDR
46666: LD_INT 1
46668: PUSH
46669: FOR_DOWNTO
46670: IFFALSE 46833
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
46672: LD_EXP 156
46676: PUSH
46677: LD_VAR 0 6
46681: ARRAY
46682: PUSH
46683: LD_VAR 0 5
46687: ARRAY
46688: PUSH
46689: LD_INT 1
46691: ARRAY
46692: PPUSH
46693: LD_EXP 156
46697: PUSH
46698: LD_VAR 0 6
46702: ARRAY
46703: PUSH
46704: LD_VAR 0 5
46708: ARRAY
46709: PUSH
46710: LD_INT 2
46712: ARRAY
46713: PPUSH
46714: LD_VAR 0 2
46718: PPUSH
46719: LD_VAR 0 3
46723: PPUSH
46724: CALL_OW 298
46728: PUSH
46729: LD_INT 6
46731: LESS
46732: IFFALSE 46831
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
46734: LD_EXP 156
46738: PUSH
46739: LD_VAR 0 6
46743: ARRAY
46744: PUSH
46745: LD_VAR 0 5
46749: ARRAY
46750: PUSH
46751: LD_INT 1
46753: ARRAY
46754: PPUSH
46755: LD_EXP 156
46759: PUSH
46760: LD_VAR 0 6
46764: ARRAY
46765: PUSH
46766: LD_VAR 0 5
46770: ARRAY
46771: PUSH
46772: LD_INT 2
46774: ARRAY
46775: PPUSH
46776: LD_VAR 0 1
46780: PPUSH
46781: CALL_OW 255
46785: PPUSH
46786: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
46790: LD_ADDR_EXP 156
46794: PUSH
46795: LD_EXP 156
46799: PPUSH
46800: LD_VAR 0 6
46804: PPUSH
46805: LD_EXP 156
46809: PUSH
46810: LD_VAR 0 6
46814: ARRAY
46815: PPUSH
46816: LD_VAR 0 5
46820: PPUSH
46821: CALL_OW 3
46825: PPUSH
46826: CALL_OW 1
46830: ST_TO_ADDR
// end ; end ;
46831: GO 46669
46833: POP
46834: POP
// end ;
46835: LD_VAR 0 4
46839: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
46840: LD_INT 0
46842: PPUSH
46843: PPUSH
46844: PPUSH
46845: PPUSH
46846: PPUSH
46847: PPUSH
46848: PPUSH
46849: PPUSH
46850: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
46851: LD_VAR 0 1
46855: PPUSH
46856: CALL_OW 264
46860: PUSH
46861: LD_EXP 76
46865: EQUAL
46866: NOT
46867: PUSH
46868: LD_VAR 0 1
46872: PUSH
46873: LD_EXP 155
46877: IN
46878: NOT
46879: OR
46880: IFFALSE 46884
// exit ;
46882: GO 47206
// index := GetElementIndex ( minersList , unit ) ;
46884: LD_ADDR_VAR 0 6
46888: PUSH
46889: LD_EXP 155
46893: PPUSH
46894: LD_VAR 0 1
46898: PPUSH
46899: CALL 52402 0 2
46903: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
46904: LD_ADDR_VAR 0 8
46908: PUSH
46909: LD_EXP 157
46913: PUSH
46914: LD_EXP 156
46918: PUSH
46919: LD_VAR 0 6
46923: ARRAY
46924: MINUS
46925: ST_TO_ADDR
// if not minesFreeAmount then
46926: LD_VAR 0 8
46930: NOT
46931: IFFALSE 46935
// exit ;
46933: GO 47206
// tmp := [ ] ;
46935: LD_ADDR_VAR 0 7
46939: PUSH
46940: EMPTY
46941: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
46942: LD_ADDR_VAR 0 5
46946: PUSH
46947: DOUBLE
46948: LD_INT 1
46950: DEC
46951: ST_TO_ADDR
46952: LD_VAR 0 8
46956: PUSH
46957: FOR_TO
46958: IFFALSE 47153
// begin _d := rand ( 0 , 5 ) ;
46960: LD_ADDR_VAR 0 11
46964: PUSH
46965: LD_INT 0
46967: PPUSH
46968: LD_INT 5
46970: PPUSH
46971: CALL_OW 12
46975: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
46976: LD_ADDR_VAR 0 12
46980: PUSH
46981: LD_INT 2
46983: PPUSH
46984: LD_INT 6
46986: PPUSH
46987: CALL_OW 12
46991: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
46992: LD_ADDR_VAR 0 9
46996: PUSH
46997: LD_VAR 0 2
47001: PPUSH
47002: LD_VAR 0 11
47006: PPUSH
47007: LD_VAR 0 12
47011: PPUSH
47012: CALL_OW 272
47016: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
47017: LD_ADDR_VAR 0 10
47021: PUSH
47022: LD_VAR 0 3
47026: PPUSH
47027: LD_VAR 0 11
47031: PPUSH
47032: LD_VAR 0 12
47036: PPUSH
47037: CALL_OW 273
47041: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
47042: LD_VAR 0 9
47046: PPUSH
47047: LD_VAR 0 10
47051: PPUSH
47052: CALL_OW 488
47056: PUSH
47057: LD_VAR 0 9
47061: PUSH
47062: LD_VAR 0 10
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_VAR 0 7
47075: IN
47076: NOT
47077: AND
47078: PUSH
47079: LD_VAR 0 9
47083: PPUSH
47084: LD_VAR 0 10
47088: PPUSH
47089: CALL_OW 458
47093: NOT
47094: AND
47095: IFFALSE 47137
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
47097: LD_ADDR_VAR 0 7
47101: PUSH
47102: LD_VAR 0 7
47106: PPUSH
47107: LD_VAR 0 7
47111: PUSH
47112: LD_INT 1
47114: PLUS
47115: PPUSH
47116: LD_VAR 0 9
47120: PUSH
47121: LD_VAR 0 10
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PPUSH
47130: CALL_OW 1
47134: ST_TO_ADDR
47135: GO 47151
// i := i - 1 ;
47137: LD_ADDR_VAR 0 5
47141: PUSH
47142: LD_VAR 0 5
47146: PUSH
47147: LD_INT 1
47149: MINUS
47150: ST_TO_ADDR
// end ;
47151: GO 46957
47153: POP
47154: POP
// for i in tmp do
47155: LD_ADDR_VAR 0 5
47159: PUSH
47160: LD_VAR 0 7
47164: PUSH
47165: FOR_IN
47166: IFFALSE 47204
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
47168: LD_VAR 0 1
47172: PPUSH
47173: LD_VAR 0 5
47177: PUSH
47178: LD_INT 1
47180: ARRAY
47181: PPUSH
47182: LD_VAR 0 5
47186: PUSH
47187: LD_INT 2
47189: ARRAY
47190: PPUSH
47191: CALL 46146 0 3
47195: NOT
47196: IFFALSE 47202
// exit ;
47198: POP
47199: POP
47200: GO 47206
47202: GO 47165
47204: POP
47205: POP
// end ;
47206: LD_VAR 0 4
47210: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
47211: LD_INT 0
47213: PPUSH
47214: PPUSH
47215: PPUSH
47216: PPUSH
47217: PPUSH
47218: PPUSH
47219: PPUSH
// if not GetClass ( unit ) = class_sniper then
47220: LD_VAR 0 1
47224: PPUSH
47225: CALL_OW 257
47229: PUSH
47230: LD_INT 5
47232: EQUAL
47233: NOT
47234: IFFALSE 47238
// exit ;
47236: GO 47626
// dist := 8 ;
47238: LD_ADDR_VAR 0 5
47242: PUSH
47243: LD_INT 8
47245: ST_TO_ADDR
// viewRange := 12 ;
47246: LD_ADDR_VAR 0 7
47250: PUSH
47251: LD_INT 12
47253: ST_TO_ADDR
// side := GetSide ( unit ) ;
47254: LD_ADDR_VAR 0 6
47258: PUSH
47259: LD_VAR 0 1
47263: PPUSH
47264: CALL_OW 255
47268: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
47269: LD_INT 61
47271: PPUSH
47272: LD_VAR 0 6
47276: PPUSH
47277: CALL_OW 321
47281: PUSH
47282: LD_INT 2
47284: EQUAL
47285: IFFALSE 47295
// viewRange := 16 ;
47287: LD_ADDR_VAR 0 7
47291: PUSH
47292: LD_INT 16
47294: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
47295: LD_VAR 0 1
47299: PPUSH
47300: LD_VAR 0 2
47304: PPUSH
47305: LD_VAR 0 3
47309: PPUSH
47310: CALL_OW 297
47314: PUSH
47315: LD_VAR 0 5
47319: GREATER
47320: IFFALSE 47399
// begin ComMoveXY ( unit , x , y ) ;
47322: LD_VAR 0 1
47326: PPUSH
47327: LD_VAR 0 2
47331: PPUSH
47332: LD_VAR 0 3
47336: PPUSH
47337: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
47341: LD_INT 35
47343: PPUSH
47344: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
47348: LD_VAR 0 1
47352: PPUSH
47353: LD_VAR 0 2
47357: PPUSH
47358: LD_VAR 0 3
47362: PPUSH
47363: CALL 83174 0 3
47367: NOT
47368: IFFALSE 47372
// exit ;
47370: GO 47626
// until GetDistUnitXY ( unit , x , y ) < dist ;
47372: LD_VAR 0 1
47376: PPUSH
47377: LD_VAR 0 2
47381: PPUSH
47382: LD_VAR 0 3
47386: PPUSH
47387: CALL_OW 297
47391: PUSH
47392: LD_VAR 0 5
47396: LESS
47397: IFFALSE 47341
// end ; ComTurnXY ( unit , x , y ) ;
47399: LD_VAR 0 1
47403: PPUSH
47404: LD_VAR 0 2
47408: PPUSH
47409: LD_VAR 0 3
47413: PPUSH
47414: CALL_OW 118
// wait ( 5 ) ;
47418: LD_INT 5
47420: PPUSH
47421: CALL_OW 67
// _d := GetDir ( unit ) ;
47425: LD_ADDR_VAR 0 10
47429: PUSH
47430: LD_VAR 0 1
47434: PPUSH
47435: CALL_OW 254
47439: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
47440: LD_ADDR_VAR 0 8
47444: PUSH
47445: LD_VAR 0 1
47449: PPUSH
47450: CALL_OW 250
47454: PPUSH
47455: LD_VAR 0 10
47459: PPUSH
47460: LD_VAR 0 5
47464: PPUSH
47465: CALL_OW 272
47469: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
47470: LD_ADDR_VAR 0 9
47474: PUSH
47475: LD_VAR 0 1
47479: PPUSH
47480: CALL_OW 251
47484: PPUSH
47485: LD_VAR 0 10
47489: PPUSH
47490: LD_VAR 0 5
47494: PPUSH
47495: CALL_OW 273
47499: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47500: LD_VAR 0 8
47504: PPUSH
47505: LD_VAR 0 9
47509: PPUSH
47510: CALL_OW 488
47514: NOT
47515: IFFALSE 47519
// exit ;
47517: GO 47626
// ComAnimCustom ( unit , 1 ) ;
47519: LD_VAR 0 1
47523: PPUSH
47524: LD_INT 1
47526: PPUSH
47527: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
47531: LD_VAR 0 8
47535: PPUSH
47536: LD_VAR 0 9
47540: PPUSH
47541: LD_VAR 0 6
47545: PPUSH
47546: LD_VAR 0 7
47550: PPUSH
47551: CALL_OW 330
// repeat wait ( 1 ) ;
47555: LD_INT 1
47557: PPUSH
47558: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
47562: LD_VAR 0 1
47566: PPUSH
47567: CALL_OW 316
47571: PUSH
47572: LD_VAR 0 1
47576: PPUSH
47577: CALL_OW 314
47581: OR
47582: PUSH
47583: LD_VAR 0 1
47587: PPUSH
47588: CALL_OW 302
47592: NOT
47593: OR
47594: PUSH
47595: LD_VAR 0 1
47599: PPUSH
47600: CALL_OW 301
47604: OR
47605: IFFALSE 47555
// RemoveSeeing ( _x , _y , side ) ;
47607: LD_VAR 0 8
47611: PPUSH
47612: LD_VAR 0 9
47616: PPUSH
47617: LD_VAR 0 6
47621: PPUSH
47622: CALL_OW 331
// end ; end_of_file
47626: LD_VAR 0 4
47630: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
47631: LD_INT 0
47633: PPUSH
47634: PPUSH
// if exist_mode then
47635: LD_VAR 0 2
47639: IFFALSE 47664
// unit := CreateCharacter ( prefix & ident ) else
47641: LD_ADDR_VAR 0 5
47645: PUSH
47646: LD_VAR 0 3
47650: PUSH
47651: LD_VAR 0 1
47655: STR
47656: PPUSH
47657: CALL_OW 34
47661: ST_TO_ADDR
47662: GO 47679
// unit := NewCharacter ( ident ) ;
47664: LD_ADDR_VAR 0 5
47668: PUSH
47669: LD_VAR 0 1
47673: PPUSH
47674: CALL_OW 25
47678: ST_TO_ADDR
// result := unit ;
47679: LD_ADDR_VAR 0 4
47683: PUSH
47684: LD_VAR 0 5
47688: ST_TO_ADDR
// end ;
47689: LD_VAR 0 4
47693: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
47694: LD_INT 0
47696: PPUSH
47697: PPUSH
// if not side or not nation then
47698: LD_VAR 0 1
47702: NOT
47703: PUSH
47704: LD_VAR 0 2
47708: NOT
47709: OR
47710: IFFALSE 47714
// exit ;
47712: GO 48482
// case nation of nation_american :
47714: LD_VAR 0 2
47718: PUSH
47719: LD_INT 1
47721: DOUBLE
47722: EQUAL
47723: IFTRUE 47727
47725: GO 47941
47727: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
47728: LD_ADDR_VAR 0 4
47732: PUSH
47733: LD_INT 35
47735: PUSH
47736: LD_INT 45
47738: PUSH
47739: LD_INT 46
47741: PUSH
47742: LD_INT 47
47744: PUSH
47745: LD_INT 82
47747: PUSH
47748: LD_INT 83
47750: PUSH
47751: LD_INT 84
47753: PUSH
47754: LD_INT 85
47756: PUSH
47757: LD_INT 86
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: LD_INT 2
47765: PUSH
47766: LD_INT 6
47768: PUSH
47769: LD_INT 15
47771: PUSH
47772: LD_INT 16
47774: PUSH
47775: LD_INT 7
47777: PUSH
47778: LD_INT 12
47780: PUSH
47781: LD_INT 13
47783: PUSH
47784: LD_INT 10
47786: PUSH
47787: LD_INT 14
47789: PUSH
47790: LD_INT 20
47792: PUSH
47793: LD_INT 21
47795: PUSH
47796: LD_INT 22
47798: PUSH
47799: LD_INT 25
47801: PUSH
47802: LD_INT 32
47804: PUSH
47805: LD_INT 27
47807: PUSH
47808: LD_INT 36
47810: PUSH
47811: LD_INT 69
47813: PUSH
47814: LD_INT 39
47816: PUSH
47817: LD_INT 34
47819: PUSH
47820: LD_INT 40
47822: PUSH
47823: LD_INT 48
47825: PUSH
47826: LD_INT 49
47828: PUSH
47829: LD_INT 50
47831: PUSH
47832: LD_INT 51
47834: PUSH
47835: LD_INT 52
47837: PUSH
47838: LD_INT 53
47840: PUSH
47841: LD_INT 54
47843: PUSH
47844: LD_INT 55
47846: PUSH
47847: LD_INT 56
47849: PUSH
47850: LD_INT 57
47852: PUSH
47853: LD_INT 58
47855: PUSH
47856: LD_INT 59
47858: PUSH
47859: LD_INT 60
47861: PUSH
47862: LD_INT 61
47864: PUSH
47865: LD_INT 62
47867: PUSH
47868: LD_INT 80
47870: PUSH
47871: LD_INT 82
47873: PUSH
47874: LD_INT 83
47876: PUSH
47877: LD_INT 84
47879: PUSH
47880: LD_INT 85
47882: PUSH
47883: LD_INT 86
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: ST_TO_ADDR
47939: GO 48406
47941: LD_INT 2
47943: DOUBLE
47944: EQUAL
47945: IFTRUE 47949
47947: GO 48175
47949: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
47950: LD_ADDR_VAR 0 4
47954: PUSH
47955: LD_INT 35
47957: PUSH
47958: LD_INT 45
47960: PUSH
47961: LD_INT 46
47963: PUSH
47964: LD_INT 47
47966: PUSH
47967: LD_INT 82
47969: PUSH
47970: LD_INT 83
47972: PUSH
47973: LD_INT 84
47975: PUSH
47976: LD_INT 85
47978: PUSH
47979: LD_INT 87
47981: PUSH
47982: LD_INT 70
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 11
47990: PUSH
47991: LD_INT 3
47993: PUSH
47994: LD_INT 4
47996: PUSH
47997: LD_INT 5
47999: PUSH
48000: LD_INT 6
48002: PUSH
48003: LD_INT 15
48005: PUSH
48006: LD_INT 18
48008: PUSH
48009: LD_INT 7
48011: PUSH
48012: LD_INT 17
48014: PUSH
48015: LD_INT 8
48017: PUSH
48018: LD_INT 20
48020: PUSH
48021: LD_INT 21
48023: PUSH
48024: LD_INT 22
48026: PUSH
48027: LD_INT 72
48029: PUSH
48030: LD_INT 26
48032: PUSH
48033: LD_INT 69
48035: PUSH
48036: LD_INT 39
48038: PUSH
48039: LD_INT 40
48041: PUSH
48042: LD_INT 41
48044: PUSH
48045: LD_INT 42
48047: PUSH
48048: LD_INT 43
48050: PUSH
48051: LD_INT 48
48053: PUSH
48054: LD_INT 49
48056: PUSH
48057: LD_INT 50
48059: PUSH
48060: LD_INT 51
48062: PUSH
48063: LD_INT 52
48065: PUSH
48066: LD_INT 53
48068: PUSH
48069: LD_INT 54
48071: PUSH
48072: LD_INT 55
48074: PUSH
48075: LD_INT 56
48077: PUSH
48078: LD_INT 60
48080: PUSH
48081: LD_INT 61
48083: PUSH
48084: LD_INT 62
48086: PUSH
48087: LD_INT 66
48089: PUSH
48090: LD_INT 67
48092: PUSH
48093: LD_INT 68
48095: PUSH
48096: LD_INT 81
48098: PUSH
48099: LD_INT 82
48101: PUSH
48102: LD_INT 83
48104: PUSH
48105: LD_INT 84
48107: PUSH
48108: LD_INT 85
48110: PUSH
48111: LD_INT 87
48113: PUSH
48114: LD_INT 88
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: ST_TO_ADDR
48173: GO 48406
48175: LD_INT 3
48177: DOUBLE
48178: EQUAL
48179: IFTRUE 48183
48181: GO 48405
48183: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
48184: LD_ADDR_VAR 0 4
48188: PUSH
48189: LD_INT 46
48191: PUSH
48192: LD_INT 47
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: LD_INT 2
48200: PUSH
48201: LD_INT 82
48203: PUSH
48204: LD_INT 83
48206: PUSH
48207: LD_INT 84
48209: PUSH
48210: LD_INT 85
48212: PUSH
48213: LD_INT 86
48215: PUSH
48216: LD_INT 11
48218: PUSH
48219: LD_INT 9
48221: PUSH
48222: LD_INT 20
48224: PUSH
48225: LD_INT 19
48227: PUSH
48228: LD_INT 21
48230: PUSH
48231: LD_INT 24
48233: PUSH
48234: LD_INT 22
48236: PUSH
48237: LD_INT 25
48239: PUSH
48240: LD_INT 28
48242: PUSH
48243: LD_INT 29
48245: PUSH
48246: LD_INT 30
48248: PUSH
48249: LD_INT 31
48251: PUSH
48252: LD_INT 37
48254: PUSH
48255: LD_INT 38
48257: PUSH
48258: LD_INT 32
48260: PUSH
48261: LD_INT 27
48263: PUSH
48264: LD_INT 33
48266: PUSH
48267: LD_INT 69
48269: PUSH
48270: LD_INT 39
48272: PUSH
48273: LD_INT 34
48275: PUSH
48276: LD_INT 40
48278: PUSH
48279: LD_INT 71
48281: PUSH
48282: LD_INT 23
48284: PUSH
48285: LD_INT 44
48287: PUSH
48288: LD_INT 48
48290: PUSH
48291: LD_INT 49
48293: PUSH
48294: LD_INT 50
48296: PUSH
48297: LD_INT 51
48299: PUSH
48300: LD_INT 52
48302: PUSH
48303: LD_INT 53
48305: PUSH
48306: LD_INT 54
48308: PUSH
48309: LD_INT 55
48311: PUSH
48312: LD_INT 56
48314: PUSH
48315: LD_INT 57
48317: PUSH
48318: LD_INT 58
48320: PUSH
48321: LD_INT 59
48323: PUSH
48324: LD_INT 63
48326: PUSH
48327: LD_INT 64
48329: PUSH
48330: LD_INT 65
48332: PUSH
48333: LD_INT 82
48335: PUSH
48336: LD_INT 83
48338: PUSH
48339: LD_INT 84
48341: PUSH
48342: LD_INT 85
48344: PUSH
48345: LD_INT 86
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: ST_TO_ADDR
48403: GO 48406
48405: POP
// if state > - 1 and state < 3 then
48406: LD_VAR 0 3
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: GREATER
48415: PUSH
48416: LD_VAR 0 3
48420: PUSH
48421: LD_INT 3
48423: LESS
48424: AND
48425: IFFALSE 48482
// for i in result do
48427: LD_ADDR_VAR 0 5
48431: PUSH
48432: LD_VAR 0 4
48436: PUSH
48437: FOR_IN
48438: IFFALSE 48480
// if GetTech ( i , side ) <> state then
48440: LD_VAR 0 5
48444: PPUSH
48445: LD_VAR 0 1
48449: PPUSH
48450: CALL_OW 321
48454: PUSH
48455: LD_VAR 0 3
48459: NONEQUAL
48460: IFFALSE 48478
// result := result diff i ;
48462: LD_ADDR_VAR 0 4
48466: PUSH
48467: LD_VAR 0 4
48471: PUSH
48472: LD_VAR 0 5
48476: DIFF
48477: ST_TO_ADDR
48478: GO 48437
48480: POP
48481: POP
// end ;
48482: LD_VAR 0 4
48486: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
48487: LD_INT 0
48489: PPUSH
48490: PPUSH
48491: PPUSH
// result := true ;
48492: LD_ADDR_VAR 0 3
48496: PUSH
48497: LD_INT 1
48499: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
48500: LD_ADDR_VAR 0 5
48504: PUSH
48505: LD_VAR 0 2
48509: PPUSH
48510: CALL_OW 480
48514: ST_TO_ADDR
// if not tmp then
48515: LD_VAR 0 5
48519: NOT
48520: IFFALSE 48524
// exit ;
48522: GO 48573
// for i in tmp do
48524: LD_ADDR_VAR 0 4
48528: PUSH
48529: LD_VAR 0 5
48533: PUSH
48534: FOR_IN
48535: IFFALSE 48571
// if GetTech ( i , side ) <> state_researched then
48537: LD_VAR 0 4
48541: PPUSH
48542: LD_VAR 0 1
48546: PPUSH
48547: CALL_OW 321
48551: PUSH
48552: LD_INT 2
48554: NONEQUAL
48555: IFFALSE 48569
// begin result := false ;
48557: LD_ADDR_VAR 0 3
48561: PUSH
48562: LD_INT 0
48564: ST_TO_ADDR
// exit ;
48565: POP
48566: POP
48567: GO 48573
// end ;
48569: GO 48534
48571: POP
48572: POP
// end ;
48573: LD_VAR 0 3
48577: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
48578: LD_INT 0
48580: PPUSH
48581: PPUSH
48582: PPUSH
48583: PPUSH
48584: PPUSH
48585: PPUSH
48586: PPUSH
48587: PPUSH
48588: PPUSH
48589: PPUSH
48590: PPUSH
48591: PPUSH
48592: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
48593: LD_VAR 0 1
48597: NOT
48598: PUSH
48599: LD_VAR 0 1
48603: PPUSH
48604: CALL_OW 257
48608: PUSH
48609: LD_INT 9
48611: NONEQUAL
48612: OR
48613: IFFALSE 48617
// exit ;
48615: GO 49190
// side := GetSide ( unit ) ;
48617: LD_ADDR_VAR 0 9
48621: PUSH
48622: LD_VAR 0 1
48626: PPUSH
48627: CALL_OW 255
48631: ST_TO_ADDR
// tech_space := tech_spacanom ;
48632: LD_ADDR_VAR 0 12
48636: PUSH
48637: LD_INT 29
48639: ST_TO_ADDR
// tech_time := tech_taurad ;
48640: LD_ADDR_VAR 0 13
48644: PUSH
48645: LD_INT 28
48647: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
48648: LD_ADDR_VAR 0 11
48652: PUSH
48653: LD_VAR 0 1
48657: PPUSH
48658: CALL_OW 310
48662: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
48663: LD_VAR 0 11
48667: PPUSH
48668: CALL_OW 247
48672: PUSH
48673: LD_INT 2
48675: EQUAL
48676: IFFALSE 48680
// exit ;
48678: GO 49190
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48680: LD_ADDR_VAR 0 8
48684: PUSH
48685: LD_INT 81
48687: PUSH
48688: LD_VAR 0 9
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 3
48699: PUSH
48700: LD_INT 21
48702: PUSH
48703: LD_INT 3
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PPUSH
48718: CALL_OW 69
48722: ST_TO_ADDR
// if not tmp then
48723: LD_VAR 0 8
48727: NOT
48728: IFFALSE 48732
// exit ;
48730: GO 49190
// if in_unit then
48732: LD_VAR 0 11
48736: IFFALSE 48760
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
48738: LD_ADDR_VAR 0 10
48742: PUSH
48743: LD_VAR 0 8
48747: PPUSH
48748: LD_VAR 0 11
48752: PPUSH
48753: CALL_OW 74
48757: ST_TO_ADDR
48758: GO 48780
// enemy := NearestUnitToUnit ( tmp , unit ) ;
48760: LD_ADDR_VAR 0 10
48764: PUSH
48765: LD_VAR 0 8
48769: PPUSH
48770: LD_VAR 0 1
48774: PPUSH
48775: CALL_OW 74
48779: ST_TO_ADDR
// if not enemy then
48780: LD_VAR 0 10
48784: NOT
48785: IFFALSE 48789
// exit ;
48787: GO 49190
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
48789: LD_VAR 0 11
48793: PUSH
48794: LD_VAR 0 11
48798: PPUSH
48799: LD_VAR 0 10
48803: PPUSH
48804: CALL_OW 296
48808: PUSH
48809: LD_INT 13
48811: GREATER
48812: AND
48813: PUSH
48814: LD_VAR 0 1
48818: PPUSH
48819: LD_VAR 0 10
48823: PPUSH
48824: CALL_OW 296
48828: PUSH
48829: LD_INT 12
48831: GREATER
48832: OR
48833: IFFALSE 48837
// exit ;
48835: GO 49190
// missile := [ 1 ] ;
48837: LD_ADDR_VAR 0 14
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: EMPTY
48846: LIST
48847: ST_TO_ADDR
// if Researched ( side , tech_space ) then
48848: LD_VAR 0 9
48852: PPUSH
48853: LD_VAR 0 12
48857: PPUSH
48858: CALL_OW 325
48862: IFFALSE 48891
// missile := Insert ( missile , missile + 1 , 2 ) ;
48864: LD_ADDR_VAR 0 14
48868: PUSH
48869: LD_VAR 0 14
48873: PPUSH
48874: LD_VAR 0 14
48878: PUSH
48879: LD_INT 1
48881: PLUS
48882: PPUSH
48883: LD_INT 2
48885: PPUSH
48886: CALL_OW 2
48890: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
48891: LD_VAR 0 9
48895: PPUSH
48896: LD_VAR 0 13
48900: PPUSH
48901: CALL_OW 325
48905: PUSH
48906: LD_VAR 0 10
48910: PPUSH
48911: CALL_OW 255
48915: PPUSH
48916: LD_VAR 0 13
48920: PPUSH
48921: CALL_OW 325
48925: NOT
48926: AND
48927: IFFALSE 48956
// missile := Insert ( missile , missile + 1 , 3 ) ;
48929: LD_ADDR_VAR 0 14
48933: PUSH
48934: LD_VAR 0 14
48938: PPUSH
48939: LD_VAR 0 14
48943: PUSH
48944: LD_INT 1
48946: PLUS
48947: PPUSH
48948: LD_INT 3
48950: PPUSH
48951: CALL_OW 2
48955: ST_TO_ADDR
// if missile < 2 then
48956: LD_VAR 0 14
48960: PUSH
48961: LD_INT 2
48963: LESS
48964: IFFALSE 48968
// exit ;
48966: GO 49190
// x := GetX ( enemy ) ;
48968: LD_ADDR_VAR 0 4
48972: PUSH
48973: LD_VAR 0 10
48977: PPUSH
48978: CALL_OW 250
48982: ST_TO_ADDR
// y := GetY ( enemy ) ;
48983: LD_ADDR_VAR 0 5
48987: PUSH
48988: LD_VAR 0 10
48992: PPUSH
48993: CALL_OW 251
48997: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
48998: LD_ADDR_VAR 0 6
49002: PUSH
49003: LD_VAR 0 4
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PPUSH
49012: LD_INT 1
49014: PPUSH
49015: CALL_OW 12
49019: PLUS
49020: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
49021: LD_ADDR_VAR 0 7
49025: PUSH
49026: LD_VAR 0 5
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PPUSH
49035: LD_INT 1
49037: PPUSH
49038: CALL_OW 12
49042: PLUS
49043: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49044: LD_VAR 0 6
49048: PPUSH
49049: LD_VAR 0 7
49053: PPUSH
49054: CALL_OW 488
49058: NOT
49059: IFFALSE 49081
// begin _x := x ;
49061: LD_ADDR_VAR 0 6
49065: PUSH
49066: LD_VAR 0 4
49070: ST_TO_ADDR
// _y := y ;
49071: LD_ADDR_VAR 0 7
49075: PUSH
49076: LD_VAR 0 5
49080: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
49081: LD_ADDR_VAR 0 3
49085: PUSH
49086: LD_INT 1
49088: PPUSH
49089: LD_VAR 0 14
49093: PPUSH
49094: CALL_OW 12
49098: ST_TO_ADDR
// case i of 1 :
49099: LD_VAR 0 3
49103: PUSH
49104: LD_INT 1
49106: DOUBLE
49107: EQUAL
49108: IFTRUE 49112
49110: GO 49129
49112: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
49113: LD_VAR 0 1
49117: PPUSH
49118: LD_VAR 0 10
49122: PPUSH
49123: CALL_OW 115
49127: GO 49190
49129: LD_INT 2
49131: DOUBLE
49132: EQUAL
49133: IFTRUE 49137
49135: GO 49159
49137: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
49138: LD_VAR 0 1
49142: PPUSH
49143: LD_VAR 0 6
49147: PPUSH
49148: LD_VAR 0 7
49152: PPUSH
49153: CALL_OW 153
49157: GO 49190
49159: LD_INT 3
49161: DOUBLE
49162: EQUAL
49163: IFTRUE 49167
49165: GO 49189
49167: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
49168: LD_VAR 0 1
49172: PPUSH
49173: LD_VAR 0 6
49177: PPUSH
49178: LD_VAR 0 7
49182: PPUSH
49183: CALL_OW 154
49187: GO 49190
49189: POP
// end ;
49190: LD_VAR 0 2
49194: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
49195: LD_INT 0
49197: PPUSH
49198: PPUSH
49199: PPUSH
49200: PPUSH
49201: PPUSH
49202: PPUSH
// if not unit or not building then
49203: LD_VAR 0 1
49207: NOT
49208: PUSH
49209: LD_VAR 0 2
49213: NOT
49214: OR
49215: IFFALSE 49219
// exit ;
49217: GO 49377
// x := GetX ( building ) ;
49219: LD_ADDR_VAR 0 5
49223: PUSH
49224: LD_VAR 0 2
49228: PPUSH
49229: CALL_OW 250
49233: ST_TO_ADDR
// y := GetY ( building ) ;
49234: LD_ADDR_VAR 0 6
49238: PUSH
49239: LD_VAR 0 2
49243: PPUSH
49244: CALL_OW 251
49248: ST_TO_ADDR
// for i = 0 to 5 do
49249: LD_ADDR_VAR 0 4
49253: PUSH
49254: DOUBLE
49255: LD_INT 0
49257: DEC
49258: ST_TO_ADDR
49259: LD_INT 5
49261: PUSH
49262: FOR_TO
49263: IFFALSE 49375
// begin _x := ShiftX ( x , i , 3 ) ;
49265: LD_ADDR_VAR 0 7
49269: PUSH
49270: LD_VAR 0 5
49274: PPUSH
49275: LD_VAR 0 4
49279: PPUSH
49280: LD_INT 3
49282: PPUSH
49283: CALL_OW 272
49287: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
49288: LD_ADDR_VAR 0 8
49292: PUSH
49293: LD_VAR 0 6
49297: PPUSH
49298: LD_VAR 0 4
49302: PPUSH
49303: LD_INT 3
49305: PPUSH
49306: CALL_OW 273
49310: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49311: LD_VAR 0 7
49315: PPUSH
49316: LD_VAR 0 8
49320: PPUSH
49321: CALL_OW 488
49325: NOT
49326: IFFALSE 49330
// continue ;
49328: GO 49262
// if HexInfo ( _x , _y ) = 0 then
49330: LD_VAR 0 7
49334: PPUSH
49335: LD_VAR 0 8
49339: PPUSH
49340: CALL_OW 428
49344: PUSH
49345: LD_INT 0
49347: EQUAL
49348: IFFALSE 49373
// begin ComMoveXY ( unit , _x , _y ) ;
49350: LD_VAR 0 1
49354: PPUSH
49355: LD_VAR 0 7
49359: PPUSH
49360: LD_VAR 0 8
49364: PPUSH
49365: CALL_OW 111
// exit ;
49369: POP
49370: POP
49371: GO 49377
// end ; end ;
49373: GO 49262
49375: POP
49376: POP
// end ;
49377: LD_VAR 0 3
49381: RET
// export function ScanBase ( side , base_area ) ; begin
49382: LD_INT 0
49384: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
49385: LD_ADDR_VAR 0 3
49389: PUSH
49390: LD_VAR 0 2
49394: PPUSH
49395: LD_INT 81
49397: PUSH
49398: LD_VAR 0 1
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PPUSH
49407: CALL_OW 70
49411: ST_TO_ADDR
// end ;
49412: LD_VAR 0 3
49416: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
49417: LD_INT 0
49419: PPUSH
49420: PPUSH
49421: PPUSH
49422: PPUSH
// result := false ;
49423: LD_ADDR_VAR 0 2
49427: PUSH
49428: LD_INT 0
49430: ST_TO_ADDR
// side := GetSide ( unit ) ;
49431: LD_ADDR_VAR 0 3
49435: PUSH
49436: LD_VAR 0 1
49440: PPUSH
49441: CALL_OW 255
49445: ST_TO_ADDR
// nat := GetNation ( unit ) ;
49446: LD_ADDR_VAR 0 4
49450: PUSH
49451: LD_VAR 0 1
49455: PPUSH
49456: CALL_OW 248
49460: ST_TO_ADDR
// case nat of 1 :
49461: LD_VAR 0 4
49465: PUSH
49466: LD_INT 1
49468: DOUBLE
49469: EQUAL
49470: IFTRUE 49474
49472: GO 49485
49474: POP
// tech := tech_lassight ; 2 :
49475: LD_ADDR_VAR 0 5
49479: PUSH
49480: LD_INT 12
49482: ST_TO_ADDR
49483: GO 49524
49485: LD_INT 2
49487: DOUBLE
49488: EQUAL
49489: IFTRUE 49493
49491: GO 49504
49493: POP
// tech := tech_mortar ; 3 :
49494: LD_ADDR_VAR 0 5
49498: PUSH
49499: LD_INT 41
49501: ST_TO_ADDR
49502: GO 49524
49504: LD_INT 3
49506: DOUBLE
49507: EQUAL
49508: IFTRUE 49512
49510: GO 49523
49512: POP
// tech := tech_bazooka ; end ;
49513: LD_ADDR_VAR 0 5
49517: PUSH
49518: LD_INT 44
49520: ST_TO_ADDR
49521: GO 49524
49523: POP
// if Researched ( side , tech ) then
49524: LD_VAR 0 3
49528: PPUSH
49529: LD_VAR 0 5
49533: PPUSH
49534: CALL_OW 325
49538: IFFALSE 49565
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
49540: LD_ADDR_VAR 0 2
49544: PUSH
49545: LD_INT 5
49547: PUSH
49548: LD_INT 8
49550: PUSH
49551: LD_INT 9
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: LIST
49558: PUSH
49559: LD_VAR 0 4
49563: ARRAY
49564: ST_TO_ADDR
// end ;
49565: LD_VAR 0 2
49569: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
49570: LD_INT 0
49572: PPUSH
49573: PPUSH
49574: PPUSH
// if not mines then
49575: LD_VAR 0 2
49579: NOT
49580: IFFALSE 49584
// exit ;
49582: GO 49728
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
49584: LD_ADDR_VAR 0 5
49588: PUSH
49589: LD_INT 81
49591: PUSH
49592: LD_VAR 0 1
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 3
49603: PUSH
49604: LD_INT 21
49606: PUSH
49607: LD_INT 3
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PPUSH
49622: CALL_OW 69
49626: ST_TO_ADDR
// for i in mines do
49627: LD_ADDR_VAR 0 4
49631: PUSH
49632: LD_VAR 0 2
49636: PUSH
49637: FOR_IN
49638: IFFALSE 49726
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
49640: LD_VAR 0 4
49644: PUSH
49645: LD_INT 1
49647: ARRAY
49648: PPUSH
49649: LD_VAR 0 4
49653: PUSH
49654: LD_INT 2
49656: ARRAY
49657: PPUSH
49658: CALL_OW 458
49662: NOT
49663: IFFALSE 49667
// continue ;
49665: GO 49637
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
49667: LD_VAR 0 4
49671: PUSH
49672: LD_INT 1
49674: ARRAY
49675: PPUSH
49676: LD_VAR 0 4
49680: PUSH
49681: LD_INT 2
49683: ARRAY
49684: PPUSH
49685: CALL_OW 428
49689: PUSH
49690: LD_VAR 0 5
49694: IN
49695: IFFALSE 49724
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
49697: LD_VAR 0 4
49701: PUSH
49702: LD_INT 1
49704: ARRAY
49705: PPUSH
49706: LD_VAR 0 4
49710: PUSH
49711: LD_INT 2
49713: ARRAY
49714: PPUSH
49715: LD_VAR 0 1
49719: PPUSH
49720: CALL_OW 456
// end ;
49724: GO 49637
49726: POP
49727: POP
// end ;
49728: LD_VAR 0 3
49732: RET
// export function Count ( array ) ; var i ; begin
49733: LD_INT 0
49735: PPUSH
49736: PPUSH
// result := 0 ;
49737: LD_ADDR_VAR 0 2
49741: PUSH
49742: LD_INT 0
49744: ST_TO_ADDR
// for i in array do
49745: LD_ADDR_VAR 0 3
49749: PUSH
49750: LD_VAR 0 1
49754: PUSH
49755: FOR_IN
49756: IFFALSE 49780
// if i then
49758: LD_VAR 0 3
49762: IFFALSE 49778
// result := result + 1 ;
49764: LD_ADDR_VAR 0 2
49768: PUSH
49769: LD_VAR 0 2
49773: PUSH
49774: LD_INT 1
49776: PLUS
49777: ST_TO_ADDR
49778: GO 49755
49780: POP
49781: POP
// end ;
49782: LD_VAR 0 2
49786: RET
// export function IsEmpty ( building ) ; begin
49787: LD_INT 0
49789: PPUSH
// if not building then
49790: LD_VAR 0 1
49794: NOT
49795: IFFALSE 49799
// exit ;
49797: GO 49842
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
49799: LD_ADDR_VAR 0 2
49803: PUSH
49804: LD_VAR 0 1
49808: PUSH
49809: LD_INT 22
49811: PUSH
49812: LD_VAR 0 1
49816: PPUSH
49817: CALL_OW 255
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 58
49828: PUSH
49829: EMPTY
49830: LIST
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PPUSH
49836: CALL_OW 69
49840: IN
49841: ST_TO_ADDR
// end ;
49842: LD_VAR 0 2
49846: RET
// export function IsNotFull ( building ) ; begin
49847: LD_INT 0
49849: PPUSH
// if not building then
49850: LD_VAR 0 1
49854: NOT
49855: IFFALSE 49859
// exit ;
49857: GO 49878
// result := UnitsInside ( building ) < 6 ;
49859: LD_ADDR_VAR 0 2
49863: PUSH
49864: LD_VAR 0 1
49868: PPUSH
49869: CALL_OW 313
49873: PUSH
49874: LD_INT 6
49876: LESS
49877: ST_TO_ADDR
// end ;
49878: LD_VAR 0 2
49882: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
49883: LD_INT 0
49885: PPUSH
49886: PPUSH
49887: PPUSH
49888: PPUSH
// tmp := [ ] ;
49889: LD_ADDR_VAR 0 3
49893: PUSH
49894: EMPTY
49895: ST_TO_ADDR
// list := [ ] ;
49896: LD_ADDR_VAR 0 5
49900: PUSH
49901: EMPTY
49902: ST_TO_ADDR
// for i = 16 to 25 do
49903: LD_ADDR_VAR 0 4
49907: PUSH
49908: DOUBLE
49909: LD_INT 16
49911: DEC
49912: ST_TO_ADDR
49913: LD_INT 25
49915: PUSH
49916: FOR_TO
49917: IFFALSE 49990
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
49919: LD_ADDR_VAR 0 3
49923: PUSH
49924: LD_VAR 0 3
49928: PUSH
49929: LD_INT 22
49931: PUSH
49932: LD_VAR 0 1
49936: PPUSH
49937: CALL_OW 255
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 91
49948: PUSH
49949: LD_VAR 0 1
49953: PUSH
49954: LD_INT 6
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 30
49964: PUSH
49965: LD_VAR 0 4
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: LIST
49978: PUSH
49979: EMPTY
49980: LIST
49981: PPUSH
49982: CALL_OW 69
49986: ADD
49987: ST_TO_ADDR
49988: GO 49916
49990: POP
49991: POP
// for i = 1 to tmp do
49992: LD_ADDR_VAR 0 4
49996: PUSH
49997: DOUBLE
49998: LD_INT 1
50000: DEC
50001: ST_TO_ADDR
50002: LD_VAR 0 3
50006: PUSH
50007: FOR_TO
50008: IFFALSE 50096
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
50010: LD_ADDR_VAR 0 5
50014: PUSH
50015: LD_VAR 0 5
50019: PUSH
50020: LD_VAR 0 3
50024: PUSH
50025: LD_VAR 0 4
50029: ARRAY
50030: PPUSH
50031: CALL_OW 266
50035: PUSH
50036: LD_VAR 0 3
50040: PUSH
50041: LD_VAR 0 4
50045: ARRAY
50046: PPUSH
50047: CALL_OW 250
50051: PUSH
50052: LD_VAR 0 3
50056: PUSH
50057: LD_VAR 0 4
50061: ARRAY
50062: PPUSH
50063: CALL_OW 251
50067: PUSH
50068: LD_VAR 0 3
50072: PUSH
50073: LD_VAR 0 4
50077: ARRAY
50078: PPUSH
50079: CALL_OW 254
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: PUSH
50090: EMPTY
50091: LIST
50092: ADD
50093: ST_TO_ADDR
50094: GO 50007
50096: POP
50097: POP
// result := list ;
50098: LD_ADDR_VAR 0 2
50102: PUSH
50103: LD_VAR 0 5
50107: ST_TO_ADDR
// end ;
50108: LD_VAR 0 2
50112: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
50113: LD_INT 0
50115: PPUSH
50116: PPUSH
50117: PPUSH
50118: PPUSH
50119: PPUSH
50120: PPUSH
50121: PPUSH
// if not factory then
50122: LD_VAR 0 1
50126: NOT
50127: IFFALSE 50131
// exit ;
50129: GO 50724
// if control = control_apeman then
50131: LD_VAR 0 4
50135: PUSH
50136: LD_INT 5
50138: EQUAL
50139: IFFALSE 50248
// begin tmp := UnitsInside ( factory ) ;
50141: LD_ADDR_VAR 0 8
50145: PUSH
50146: LD_VAR 0 1
50150: PPUSH
50151: CALL_OW 313
50155: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
50156: LD_VAR 0 8
50160: PPUSH
50161: LD_INT 25
50163: PUSH
50164: LD_INT 12
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PPUSH
50171: CALL_OW 72
50175: NOT
50176: IFFALSE 50186
// control := control_manual ;
50178: LD_ADDR_VAR 0 4
50182: PUSH
50183: LD_INT 1
50185: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
50186: LD_ADDR_VAR 0 8
50190: PUSH
50191: LD_VAR 0 1
50195: PPUSH
50196: CALL 49883 0 1
50200: ST_TO_ADDR
// if tmp then
50201: LD_VAR 0 8
50205: IFFALSE 50248
// begin for i in tmp do
50207: LD_ADDR_VAR 0 7
50211: PUSH
50212: LD_VAR 0 8
50216: PUSH
50217: FOR_IN
50218: IFFALSE 50246
// if i [ 1 ] = b_ext_radio then
50220: LD_VAR 0 7
50224: PUSH
50225: LD_INT 1
50227: ARRAY
50228: PUSH
50229: LD_INT 22
50231: EQUAL
50232: IFFALSE 50244
// begin control := control_remote ;
50234: LD_ADDR_VAR 0 4
50238: PUSH
50239: LD_INT 2
50241: ST_TO_ADDR
// break ;
50242: GO 50246
// end ;
50244: GO 50217
50246: POP
50247: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
50248: LD_VAR 0 1
50252: PPUSH
50253: LD_VAR 0 2
50257: PPUSH
50258: LD_VAR 0 3
50262: PPUSH
50263: LD_VAR 0 4
50267: PPUSH
50268: LD_VAR 0 5
50272: PPUSH
50273: CALL_OW 448
50277: IFFALSE 50312
// begin result := [ chassis , engine , control , weapon ] ;
50279: LD_ADDR_VAR 0 6
50283: PUSH
50284: LD_VAR 0 2
50288: PUSH
50289: LD_VAR 0 3
50293: PUSH
50294: LD_VAR 0 4
50298: PUSH
50299: LD_VAR 0 5
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: ST_TO_ADDR
// exit ;
50310: GO 50724
// end ; _chassis := AvailableChassisList ( factory ) ;
50312: LD_ADDR_VAR 0 9
50316: PUSH
50317: LD_VAR 0 1
50321: PPUSH
50322: CALL_OW 475
50326: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
50327: LD_ADDR_VAR 0 11
50331: PUSH
50332: LD_VAR 0 1
50336: PPUSH
50337: CALL_OW 476
50341: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
50342: LD_ADDR_VAR 0 12
50346: PUSH
50347: LD_VAR 0 1
50351: PPUSH
50352: CALL_OW 477
50356: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
50357: LD_ADDR_VAR 0 10
50361: PUSH
50362: LD_VAR 0 1
50366: PPUSH
50367: CALL_OW 478
50371: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
50372: LD_VAR 0 9
50376: NOT
50377: PUSH
50378: LD_VAR 0 11
50382: NOT
50383: OR
50384: PUSH
50385: LD_VAR 0 12
50389: NOT
50390: OR
50391: PUSH
50392: LD_VAR 0 10
50396: NOT
50397: OR
50398: IFFALSE 50433
// begin result := [ chassis , engine , control , weapon ] ;
50400: LD_ADDR_VAR 0 6
50404: PUSH
50405: LD_VAR 0 2
50409: PUSH
50410: LD_VAR 0 3
50414: PUSH
50415: LD_VAR 0 4
50419: PUSH
50420: LD_VAR 0 5
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: ST_TO_ADDR
// exit ;
50431: GO 50724
// end ; if not chassis in _chassis then
50433: LD_VAR 0 2
50437: PUSH
50438: LD_VAR 0 9
50442: IN
50443: NOT
50444: IFFALSE 50470
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
50446: LD_ADDR_VAR 0 2
50450: PUSH
50451: LD_VAR 0 9
50455: PUSH
50456: LD_INT 1
50458: PPUSH
50459: LD_VAR 0 9
50463: PPUSH
50464: CALL_OW 12
50468: ARRAY
50469: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
50470: LD_VAR 0 2
50474: PPUSH
50475: LD_VAR 0 3
50479: PPUSH
50480: CALL 50729 0 2
50484: NOT
50485: IFFALSE 50544
// repeat engine := _engine [ 1 ] ;
50487: LD_ADDR_VAR 0 3
50491: PUSH
50492: LD_VAR 0 11
50496: PUSH
50497: LD_INT 1
50499: ARRAY
50500: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
50501: LD_ADDR_VAR 0 11
50505: PUSH
50506: LD_VAR 0 11
50510: PPUSH
50511: LD_INT 1
50513: PPUSH
50514: CALL_OW 3
50518: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
50519: LD_VAR 0 2
50523: PPUSH
50524: LD_VAR 0 3
50528: PPUSH
50529: CALL 50729 0 2
50533: PUSH
50534: LD_VAR 0 11
50538: PUSH
50539: EMPTY
50540: EQUAL
50541: OR
50542: IFFALSE 50487
// if not control in _control then
50544: LD_VAR 0 4
50548: PUSH
50549: LD_VAR 0 12
50553: IN
50554: NOT
50555: IFFALSE 50581
// control := _control [ rand ( 1 , _control ) ] ;
50557: LD_ADDR_VAR 0 4
50561: PUSH
50562: LD_VAR 0 12
50566: PUSH
50567: LD_INT 1
50569: PPUSH
50570: LD_VAR 0 12
50574: PPUSH
50575: CALL_OW 12
50579: ARRAY
50580: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
50581: LD_VAR 0 2
50585: PPUSH
50586: LD_VAR 0 5
50590: PPUSH
50591: CALL 50949 0 2
50595: NOT
50596: IFFALSE 50655
// repeat weapon := _weapon [ 1 ] ;
50598: LD_ADDR_VAR 0 5
50602: PUSH
50603: LD_VAR 0 10
50607: PUSH
50608: LD_INT 1
50610: ARRAY
50611: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
50612: LD_ADDR_VAR 0 10
50616: PUSH
50617: LD_VAR 0 10
50621: PPUSH
50622: LD_INT 1
50624: PPUSH
50625: CALL_OW 3
50629: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
50630: LD_VAR 0 2
50634: PPUSH
50635: LD_VAR 0 5
50639: PPUSH
50640: CALL 50949 0 2
50644: PUSH
50645: LD_VAR 0 10
50649: PUSH
50650: EMPTY
50651: EQUAL
50652: OR
50653: IFFALSE 50598
// result := [ ] ;
50655: LD_ADDR_VAR 0 6
50659: PUSH
50660: EMPTY
50661: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
50662: LD_VAR 0 1
50666: PPUSH
50667: LD_VAR 0 2
50671: PPUSH
50672: LD_VAR 0 3
50676: PPUSH
50677: LD_VAR 0 4
50681: PPUSH
50682: LD_VAR 0 5
50686: PPUSH
50687: CALL_OW 448
50691: IFFALSE 50724
// result := [ chassis , engine , control , weapon ] ;
50693: LD_ADDR_VAR 0 6
50697: PUSH
50698: LD_VAR 0 2
50702: PUSH
50703: LD_VAR 0 3
50707: PUSH
50708: LD_VAR 0 4
50712: PUSH
50713: LD_VAR 0 5
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: ST_TO_ADDR
// end ;
50724: LD_VAR 0 6
50728: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
50729: LD_INT 0
50731: PPUSH
// if not chassis or not engine then
50732: LD_VAR 0 1
50736: NOT
50737: PUSH
50738: LD_VAR 0 2
50742: NOT
50743: OR
50744: IFFALSE 50748
// exit ;
50746: GO 50944
// case engine of engine_solar :
50748: LD_VAR 0 2
50752: PUSH
50753: LD_INT 2
50755: DOUBLE
50756: EQUAL
50757: IFTRUE 50761
50759: GO 50799
50761: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
50762: LD_ADDR_VAR 0 3
50766: PUSH
50767: LD_INT 11
50769: PUSH
50770: LD_INT 12
50772: PUSH
50773: LD_INT 13
50775: PUSH
50776: LD_INT 14
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: LD_INT 2
50784: PUSH
50785: LD_INT 3
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: ST_TO_ADDR
50797: GO 50928
50799: LD_INT 1
50801: DOUBLE
50802: EQUAL
50803: IFTRUE 50807
50805: GO 50869
50807: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
50808: LD_ADDR_VAR 0 3
50812: PUSH
50813: LD_INT 11
50815: PUSH
50816: LD_INT 12
50818: PUSH
50819: LD_INT 13
50821: PUSH
50822: LD_INT 14
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: LD_INT 2
50830: PUSH
50831: LD_INT 3
50833: PUSH
50834: LD_INT 4
50836: PUSH
50837: LD_INT 5
50839: PUSH
50840: LD_INT 21
50842: PUSH
50843: LD_INT 23
50845: PUSH
50846: LD_INT 22
50848: PUSH
50849: LD_INT 24
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: ST_TO_ADDR
50867: GO 50928
50869: LD_INT 3
50871: DOUBLE
50872: EQUAL
50873: IFTRUE 50877
50875: GO 50927
50877: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
50878: LD_ADDR_VAR 0 3
50882: PUSH
50883: LD_INT 13
50885: PUSH
50886: LD_INT 14
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: LD_INT 3
50894: PUSH
50895: LD_INT 4
50897: PUSH
50898: LD_INT 5
50900: PUSH
50901: LD_INT 21
50903: PUSH
50904: LD_INT 22
50906: PUSH
50907: LD_INT 23
50909: PUSH
50910: LD_INT 24
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: ST_TO_ADDR
50925: GO 50928
50927: POP
// result := ( chassis in result ) ;
50928: LD_ADDR_VAR 0 3
50932: PUSH
50933: LD_VAR 0 1
50937: PUSH
50938: LD_VAR 0 3
50942: IN
50943: ST_TO_ADDR
// end ;
50944: LD_VAR 0 3
50948: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
50949: LD_INT 0
50951: PPUSH
// if not chassis or not weapon then
50952: LD_VAR 0 1
50956: NOT
50957: PUSH
50958: LD_VAR 0 2
50962: NOT
50963: OR
50964: IFFALSE 50968
// exit ;
50966: GO 52030
// case weapon of us_machine_gun :
50968: LD_VAR 0 2
50972: PUSH
50973: LD_INT 2
50975: DOUBLE
50976: EQUAL
50977: IFTRUE 50981
50979: GO 51011
50981: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
50982: LD_ADDR_VAR 0 3
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: LD_INT 2
50992: PUSH
50993: LD_INT 3
50995: PUSH
50996: LD_INT 4
50998: PUSH
50999: LD_INT 5
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: ST_TO_ADDR
51009: GO 52014
51011: LD_INT 3
51013: DOUBLE
51014: EQUAL
51015: IFTRUE 51019
51017: GO 51049
51019: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
51020: LD_ADDR_VAR 0 3
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: LD_INT 2
51030: PUSH
51031: LD_INT 3
51033: PUSH
51034: LD_INT 4
51036: PUSH
51037: LD_INT 5
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: ST_TO_ADDR
51047: GO 52014
51049: LD_INT 11
51051: DOUBLE
51052: EQUAL
51053: IFTRUE 51057
51055: GO 51087
51057: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
51058: LD_ADDR_VAR 0 3
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: LD_INT 2
51068: PUSH
51069: LD_INT 3
51071: PUSH
51072: LD_INT 4
51074: PUSH
51075: LD_INT 5
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: ST_TO_ADDR
51085: GO 52014
51087: LD_INT 4
51089: DOUBLE
51090: EQUAL
51091: IFTRUE 51095
51093: GO 51121
51095: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
51096: LD_ADDR_VAR 0 3
51100: PUSH
51101: LD_INT 2
51103: PUSH
51104: LD_INT 3
51106: PUSH
51107: LD_INT 4
51109: PUSH
51110: LD_INT 5
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: ST_TO_ADDR
51119: GO 52014
51121: LD_INT 5
51123: DOUBLE
51124: EQUAL
51125: IFTRUE 51129
51127: GO 51155
51129: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
51130: LD_ADDR_VAR 0 3
51134: PUSH
51135: LD_INT 2
51137: PUSH
51138: LD_INT 3
51140: PUSH
51141: LD_INT 4
51143: PUSH
51144: LD_INT 5
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: ST_TO_ADDR
51153: GO 52014
51155: LD_INT 9
51157: DOUBLE
51158: EQUAL
51159: IFTRUE 51163
51161: GO 51189
51163: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
51164: LD_ADDR_VAR 0 3
51168: PUSH
51169: LD_INT 2
51171: PUSH
51172: LD_INT 3
51174: PUSH
51175: LD_INT 4
51177: PUSH
51178: LD_INT 5
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: ST_TO_ADDR
51187: GO 52014
51189: LD_INT 7
51191: DOUBLE
51192: EQUAL
51193: IFTRUE 51197
51195: GO 51223
51197: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
51198: LD_ADDR_VAR 0 3
51202: PUSH
51203: LD_INT 2
51205: PUSH
51206: LD_INT 3
51208: PUSH
51209: LD_INT 4
51211: PUSH
51212: LD_INT 5
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: ST_TO_ADDR
51221: GO 52014
51223: LD_INT 12
51225: DOUBLE
51226: EQUAL
51227: IFTRUE 51231
51229: GO 51257
51231: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
51232: LD_ADDR_VAR 0 3
51236: PUSH
51237: LD_INT 2
51239: PUSH
51240: LD_INT 3
51242: PUSH
51243: LD_INT 4
51245: PUSH
51246: LD_INT 5
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: ST_TO_ADDR
51255: GO 52014
51257: LD_INT 13
51259: DOUBLE
51260: EQUAL
51261: IFTRUE 51265
51263: GO 51291
51265: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
51266: LD_ADDR_VAR 0 3
51270: PUSH
51271: LD_INT 2
51273: PUSH
51274: LD_INT 3
51276: PUSH
51277: LD_INT 4
51279: PUSH
51280: LD_INT 5
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: ST_TO_ADDR
51289: GO 52014
51291: LD_INT 14
51293: DOUBLE
51294: EQUAL
51295: IFTRUE 51299
51297: GO 51317
51299: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
51300: LD_ADDR_VAR 0 3
51304: PUSH
51305: LD_INT 4
51307: PUSH
51308: LD_INT 5
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: ST_TO_ADDR
51315: GO 52014
51317: LD_INT 6
51319: DOUBLE
51320: EQUAL
51321: IFTRUE 51325
51323: GO 51343
51325: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
51326: LD_ADDR_VAR 0 3
51330: PUSH
51331: LD_INT 4
51333: PUSH
51334: LD_INT 5
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: ST_TO_ADDR
51341: GO 52014
51343: LD_INT 10
51345: DOUBLE
51346: EQUAL
51347: IFTRUE 51351
51349: GO 51369
51351: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
51352: LD_ADDR_VAR 0 3
51356: PUSH
51357: LD_INT 4
51359: PUSH
51360: LD_INT 5
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: ST_TO_ADDR
51367: GO 52014
51369: LD_INT 22
51371: DOUBLE
51372: EQUAL
51373: IFTRUE 51377
51375: GO 51403
51377: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
51378: LD_ADDR_VAR 0 3
51382: PUSH
51383: LD_INT 11
51385: PUSH
51386: LD_INT 12
51388: PUSH
51389: LD_INT 13
51391: PUSH
51392: LD_INT 14
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: ST_TO_ADDR
51401: GO 52014
51403: LD_INT 23
51405: DOUBLE
51406: EQUAL
51407: IFTRUE 51411
51409: GO 51437
51411: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
51412: LD_ADDR_VAR 0 3
51416: PUSH
51417: LD_INT 11
51419: PUSH
51420: LD_INT 12
51422: PUSH
51423: LD_INT 13
51425: PUSH
51426: LD_INT 14
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: ST_TO_ADDR
51435: GO 52014
51437: LD_INT 24
51439: DOUBLE
51440: EQUAL
51441: IFTRUE 51445
51443: GO 51471
51445: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
51446: LD_ADDR_VAR 0 3
51450: PUSH
51451: LD_INT 11
51453: PUSH
51454: LD_INT 12
51456: PUSH
51457: LD_INT 13
51459: PUSH
51460: LD_INT 14
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: ST_TO_ADDR
51469: GO 52014
51471: LD_INT 30
51473: DOUBLE
51474: EQUAL
51475: IFTRUE 51479
51477: GO 51505
51479: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
51480: LD_ADDR_VAR 0 3
51484: PUSH
51485: LD_INT 11
51487: PUSH
51488: LD_INT 12
51490: PUSH
51491: LD_INT 13
51493: PUSH
51494: LD_INT 14
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: ST_TO_ADDR
51503: GO 52014
51505: LD_INT 25
51507: DOUBLE
51508: EQUAL
51509: IFTRUE 51513
51511: GO 51531
51513: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
51514: LD_ADDR_VAR 0 3
51518: PUSH
51519: LD_INT 13
51521: PUSH
51522: LD_INT 14
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: ST_TO_ADDR
51529: GO 52014
51531: LD_INT 27
51533: DOUBLE
51534: EQUAL
51535: IFTRUE 51539
51537: GO 51557
51539: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
51540: LD_ADDR_VAR 0 3
51544: PUSH
51545: LD_INT 13
51547: PUSH
51548: LD_INT 14
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: ST_TO_ADDR
51555: GO 52014
51557: LD_EXP 74
51561: DOUBLE
51562: EQUAL
51563: IFTRUE 51567
51565: GO 51593
51567: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
51568: LD_ADDR_VAR 0 3
51572: PUSH
51573: LD_INT 11
51575: PUSH
51576: LD_INT 12
51578: PUSH
51579: LD_INT 13
51581: PUSH
51582: LD_INT 14
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: ST_TO_ADDR
51591: GO 52014
51593: LD_INT 28
51595: DOUBLE
51596: EQUAL
51597: IFTRUE 51601
51599: GO 51619
51601: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
51602: LD_ADDR_VAR 0 3
51606: PUSH
51607: LD_INT 13
51609: PUSH
51610: LD_INT 14
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: ST_TO_ADDR
51617: GO 52014
51619: LD_INT 29
51621: DOUBLE
51622: EQUAL
51623: IFTRUE 51627
51625: GO 51645
51627: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
51628: LD_ADDR_VAR 0 3
51632: PUSH
51633: LD_INT 13
51635: PUSH
51636: LD_INT 14
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: ST_TO_ADDR
51643: GO 52014
51645: LD_INT 31
51647: DOUBLE
51648: EQUAL
51649: IFTRUE 51653
51651: GO 51671
51653: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
51654: LD_ADDR_VAR 0 3
51658: PUSH
51659: LD_INT 13
51661: PUSH
51662: LD_INT 14
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: ST_TO_ADDR
51669: GO 52014
51671: LD_INT 26
51673: DOUBLE
51674: EQUAL
51675: IFTRUE 51679
51677: GO 51697
51679: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
51680: LD_ADDR_VAR 0 3
51684: PUSH
51685: LD_INT 13
51687: PUSH
51688: LD_INT 14
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: ST_TO_ADDR
51695: GO 52014
51697: LD_INT 42
51699: DOUBLE
51700: EQUAL
51701: IFTRUE 51705
51703: GO 51731
51705: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
51706: LD_ADDR_VAR 0 3
51710: PUSH
51711: LD_INT 21
51713: PUSH
51714: LD_INT 22
51716: PUSH
51717: LD_INT 23
51719: PUSH
51720: LD_INT 24
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: ST_TO_ADDR
51729: GO 52014
51731: LD_INT 43
51733: DOUBLE
51734: EQUAL
51735: IFTRUE 51739
51737: GO 51765
51739: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
51740: LD_ADDR_VAR 0 3
51744: PUSH
51745: LD_INT 21
51747: PUSH
51748: LD_INT 22
51750: PUSH
51751: LD_INT 23
51753: PUSH
51754: LD_INT 24
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: ST_TO_ADDR
51763: GO 52014
51765: LD_INT 44
51767: DOUBLE
51768: EQUAL
51769: IFTRUE 51773
51771: GO 51799
51773: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
51774: LD_ADDR_VAR 0 3
51778: PUSH
51779: LD_INT 21
51781: PUSH
51782: LD_INT 22
51784: PUSH
51785: LD_INT 23
51787: PUSH
51788: LD_INT 24
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: ST_TO_ADDR
51797: GO 52014
51799: LD_INT 45
51801: DOUBLE
51802: EQUAL
51803: IFTRUE 51807
51805: GO 51833
51807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
51808: LD_ADDR_VAR 0 3
51812: PUSH
51813: LD_INT 21
51815: PUSH
51816: LD_INT 22
51818: PUSH
51819: LD_INT 23
51821: PUSH
51822: LD_INT 24
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: ST_TO_ADDR
51831: GO 52014
51833: LD_INT 49
51835: DOUBLE
51836: EQUAL
51837: IFTRUE 51841
51839: GO 51867
51841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
51842: LD_ADDR_VAR 0 3
51846: PUSH
51847: LD_INT 21
51849: PUSH
51850: LD_INT 22
51852: PUSH
51853: LD_INT 23
51855: PUSH
51856: LD_INT 24
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: ST_TO_ADDR
51865: GO 52014
51867: LD_INT 51
51869: DOUBLE
51870: EQUAL
51871: IFTRUE 51875
51873: GO 51901
51875: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
51876: LD_ADDR_VAR 0 3
51880: PUSH
51881: LD_INT 21
51883: PUSH
51884: LD_INT 22
51886: PUSH
51887: LD_INT 23
51889: PUSH
51890: LD_INT 24
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: ST_TO_ADDR
51899: GO 52014
51901: LD_INT 52
51903: DOUBLE
51904: EQUAL
51905: IFTRUE 51909
51907: GO 51935
51909: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
51910: LD_ADDR_VAR 0 3
51914: PUSH
51915: LD_INT 21
51917: PUSH
51918: LD_INT 22
51920: PUSH
51921: LD_INT 23
51923: PUSH
51924: LD_INT 24
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: ST_TO_ADDR
51933: GO 52014
51935: LD_INT 53
51937: DOUBLE
51938: EQUAL
51939: IFTRUE 51943
51941: GO 51961
51943: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
51944: LD_ADDR_VAR 0 3
51948: PUSH
51949: LD_INT 23
51951: PUSH
51952: LD_INT 24
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: ST_TO_ADDR
51959: GO 52014
51961: LD_INT 46
51963: DOUBLE
51964: EQUAL
51965: IFTRUE 51969
51967: GO 51987
51969: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
51970: LD_ADDR_VAR 0 3
51974: PUSH
51975: LD_INT 23
51977: PUSH
51978: LD_INT 24
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: ST_TO_ADDR
51985: GO 52014
51987: LD_INT 47
51989: DOUBLE
51990: EQUAL
51991: IFTRUE 51995
51993: GO 52013
51995: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
51996: LD_ADDR_VAR 0 3
52000: PUSH
52001: LD_INT 23
52003: PUSH
52004: LD_INT 24
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: ST_TO_ADDR
52011: GO 52014
52013: POP
// result := ( chassis in result ) ;
52014: LD_ADDR_VAR 0 3
52018: PUSH
52019: LD_VAR 0 1
52023: PUSH
52024: LD_VAR 0 3
52028: IN
52029: ST_TO_ADDR
// end ;
52030: LD_VAR 0 3
52034: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
52035: LD_INT 0
52037: PPUSH
52038: PPUSH
52039: PPUSH
52040: PPUSH
52041: PPUSH
52042: PPUSH
52043: PPUSH
// result := array ;
52044: LD_ADDR_VAR 0 5
52048: PUSH
52049: LD_VAR 0 1
52053: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
52054: LD_VAR 0 1
52058: NOT
52059: PUSH
52060: LD_VAR 0 2
52064: NOT
52065: OR
52066: PUSH
52067: LD_VAR 0 3
52071: NOT
52072: OR
52073: PUSH
52074: LD_VAR 0 2
52078: PUSH
52079: LD_VAR 0 1
52083: GREATER
52084: OR
52085: PUSH
52086: LD_VAR 0 3
52090: PUSH
52091: LD_VAR 0 1
52095: GREATER
52096: OR
52097: IFFALSE 52101
// exit ;
52099: GO 52397
// if direction then
52101: LD_VAR 0 4
52105: IFFALSE 52169
// begin d := 1 ;
52107: LD_ADDR_VAR 0 9
52111: PUSH
52112: LD_INT 1
52114: ST_TO_ADDR
// if i_from > i_to then
52115: LD_VAR 0 2
52119: PUSH
52120: LD_VAR 0 3
52124: GREATER
52125: IFFALSE 52151
// length := ( array - i_from ) + i_to else
52127: LD_ADDR_VAR 0 11
52131: PUSH
52132: LD_VAR 0 1
52136: PUSH
52137: LD_VAR 0 2
52141: MINUS
52142: PUSH
52143: LD_VAR 0 3
52147: PLUS
52148: ST_TO_ADDR
52149: GO 52167
// length := i_to - i_from ;
52151: LD_ADDR_VAR 0 11
52155: PUSH
52156: LD_VAR 0 3
52160: PUSH
52161: LD_VAR 0 2
52165: MINUS
52166: ST_TO_ADDR
// end else
52167: GO 52230
// begin d := - 1 ;
52169: LD_ADDR_VAR 0 9
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: ST_TO_ADDR
// if i_from > i_to then
52178: LD_VAR 0 2
52182: PUSH
52183: LD_VAR 0 3
52187: GREATER
52188: IFFALSE 52208
// length := i_from - i_to else
52190: LD_ADDR_VAR 0 11
52194: PUSH
52195: LD_VAR 0 2
52199: PUSH
52200: LD_VAR 0 3
52204: MINUS
52205: ST_TO_ADDR
52206: GO 52230
// length := ( array - i_to ) + i_from ;
52208: LD_ADDR_VAR 0 11
52212: PUSH
52213: LD_VAR 0 1
52217: PUSH
52218: LD_VAR 0 3
52222: MINUS
52223: PUSH
52224: LD_VAR 0 2
52228: PLUS
52229: ST_TO_ADDR
// end ; if not length then
52230: LD_VAR 0 11
52234: NOT
52235: IFFALSE 52239
// exit ;
52237: GO 52397
// tmp := array ;
52239: LD_ADDR_VAR 0 10
52243: PUSH
52244: LD_VAR 0 1
52248: ST_TO_ADDR
// for i = 1 to length do
52249: LD_ADDR_VAR 0 6
52253: PUSH
52254: DOUBLE
52255: LD_INT 1
52257: DEC
52258: ST_TO_ADDR
52259: LD_VAR 0 11
52263: PUSH
52264: FOR_TO
52265: IFFALSE 52385
// begin for j = 1 to array do
52267: LD_ADDR_VAR 0 7
52271: PUSH
52272: DOUBLE
52273: LD_INT 1
52275: DEC
52276: ST_TO_ADDR
52277: LD_VAR 0 1
52281: PUSH
52282: FOR_TO
52283: IFFALSE 52371
// begin k := j + d ;
52285: LD_ADDR_VAR 0 8
52289: PUSH
52290: LD_VAR 0 7
52294: PUSH
52295: LD_VAR 0 9
52299: PLUS
52300: ST_TO_ADDR
// if k > array then
52301: LD_VAR 0 8
52305: PUSH
52306: LD_VAR 0 1
52310: GREATER
52311: IFFALSE 52321
// k := 1 ;
52313: LD_ADDR_VAR 0 8
52317: PUSH
52318: LD_INT 1
52320: ST_TO_ADDR
// if not k then
52321: LD_VAR 0 8
52325: NOT
52326: IFFALSE 52338
// k := array ;
52328: LD_ADDR_VAR 0 8
52332: PUSH
52333: LD_VAR 0 1
52337: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
52338: LD_ADDR_VAR 0 10
52342: PUSH
52343: LD_VAR 0 10
52347: PPUSH
52348: LD_VAR 0 8
52352: PPUSH
52353: LD_VAR 0 1
52357: PUSH
52358: LD_VAR 0 7
52362: ARRAY
52363: PPUSH
52364: CALL_OW 1
52368: ST_TO_ADDR
// end ;
52369: GO 52282
52371: POP
52372: POP
// array := tmp ;
52373: LD_ADDR_VAR 0 1
52377: PUSH
52378: LD_VAR 0 10
52382: ST_TO_ADDR
// end ;
52383: GO 52264
52385: POP
52386: POP
// result := array ;
52387: LD_ADDR_VAR 0 5
52391: PUSH
52392: LD_VAR 0 1
52396: ST_TO_ADDR
// end ;
52397: LD_VAR 0 5
52401: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
52402: LD_INT 0
52404: PPUSH
52405: PPUSH
// result := 0 ;
52406: LD_ADDR_VAR 0 3
52410: PUSH
52411: LD_INT 0
52413: ST_TO_ADDR
// if not array or not value in array then
52414: LD_VAR 0 1
52418: NOT
52419: PUSH
52420: LD_VAR 0 2
52424: PUSH
52425: LD_VAR 0 1
52429: IN
52430: NOT
52431: OR
52432: IFFALSE 52436
// exit ;
52434: GO 52490
// for i = 1 to array do
52436: LD_ADDR_VAR 0 4
52440: PUSH
52441: DOUBLE
52442: LD_INT 1
52444: DEC
52445: ST_TO_ADDR
52446: LD_VAR 0 1
52450: PUSH
52451: FOR_TO
52452: IFFALSE 52488
// if value = array [ i ] then
52454: LD_VAR 0 2
52458: PUSH
52459: LD_VAR 0 1
52463: PUSH
52464: LD_VAR 0 4
52468: ARRAY
52469: EQUAL
52470: IFFALSE 52486
// begin result := i ;
52472: LD_ADDR_VAR 0 3
52476: PUSH
52477: LD_VAR 0 4
52481: ST_TO_ADDR
// exit ;
52482: POP
52483: POP
52484: GO 52490
// end ;
52486: GO 52451
52488: POP
52489: POP
// end ;
52490: LD_VAR 0 3
52494: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
52495: LD_INT 0
52497: PPUSH
// vc_chassis := chassis ;
52498: LD_ADDR_OWVAR 37
52502: PUSH
52503: LD_VAR 0 1
52507: ST_TO_ADDR
// vc_engine := engine ;
52508: LD_ADDR_OWVAR 39
52512: PUSH
52513: LD_VAR 0 2
52517: ST_TO_ADDR
// vc_control := control ;
52518: LD_ADDR_OWVAR 38
52522: PUSH
52523: LD_VAR 0 3
52527: ST_TO_ADDR
// vc_weapon := weapon ;
52528: LD_ADDR_OWVAR 40
52532: PUSH
52533: LD_VAR 0 4
52537: ST_TO_ADDR
// vc_fuel_battery := fuel ;
52538: LD_ADDR_OWVAR 41
52542: PUSH
52543: LD_VAR 0 5
52547: ST_TO_ADDR
// end ;
52548: LD_VAR 0 6
52552: RET
// export function WantPlant ( unit ) ; var task ; begin
52553: LD_INT 0
52555: PPUSH
52556: PPUSH
// result := false ;
52557: LD_ADDR_VAR 0 2
52561: PUSH
52562: LD_INT 0
52564: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
52565: LD_ADDR_VAR 0 3
52569: PUSH
52570: LD_VAR 0 1
52574: PPUSH
52575: CALL_OW 437
52579: ST_TO_ADDR
// if task then
52580: LD_VAR 0 3
52584: IFFALSE 52612
// if task [ 1 ] [ 1 ] = p then
52586: LD_VAR 0 3
52590: PUSH
52591: LD_INT 1
52593: ARRAY
52594: PUSH
52595: LD_INT 1
52597: ARRAY
52598: PUSH
52599: LD_STRING p
52601: EQUAL
52602: IFFALSE 52612
// result := true ;
52604: LD_ADDR_VAR 0 2
52608: PUSH
52609: LD_INT 1
52611: ST_TO_ADDR
// end ;
52612: LD_VAR 0 2
52616: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
52617: LD_INT 0
52619: PPUSH
52620: PPUSH
52621: PPUSH
52622: PPUSH
// if pos < 1 then
52623: LD_VAR 0 2
52627: PUSH
52628: LD_INT 1
52630: LESS
52631: IFFALSE 52635
// exit ;
52633: GO 52938
// if pos = 1 then
52635: LD_VAR 0 2
52639: PUSH
52640: LD_INT 1
52642: EQUAL
52643: IFFALSE 52676
// result := Replace ( arr , pos [ 1 ] , value ) else
52645: LD_ADDR_VAR 0 4
52649: PUSH
52650: LD_VAR 0 1
52654: PPUSH
52655: LD_VAR 0 2
52659: PUSH
52660: LD_INT 1
52662: ARRAY
52663: PPUSH
52664: LD_VAR 0 3
52668: PPUSH
52669: CALL_OW 1
52673: ST_TO_ADDR
52674: GO 52938
// begin tmp := arr ;
52676: LD_ADDR_VAR 0 6
52680: PUSH
52681: LD_VAR 0 1
52685: ST_TO_ADDR
// s_arr := [ tmp ] ;
52686: LD_ADDR_VAR 0 7
52690: PUSH
52691: LD_VAR 0 6
52695: PUSH
52696: EMPTY
52697: LIST
52698: ST_TO_ADDR
// for i = 1 to pos - 1 do
52699: LD_ADDR_VAR 0 5
52703: PUSH
52704: DOUBLE
52705: LD_INT 1
52707: DEC
52708: ST_TO_ADDR
52709: LD_VAR 0 2
52713: PUSH
52714: LD_INT 1
52716: MINUS
52717: PUSH
52718: FOR_TO
52719: IFFALSE 52764
// begin tmp := tmp [ pos [ i ] ] ;
52721: LD_ADDR_VAR 0 6
52725: PUSH
52726: LD_VAR 0 6
52730: PUSH
52731: LD_VAR 0 2
52735: PUSH
52736: LD_VAR 0 5
52740: ARRAY
52741: ARRAY
52742: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
52743: LD_ADDR_VAR 0 7
52747: PUSH
52748: LD_VAR 0 7
52752: PUSH
52753: LD_VAR 0 6
52757: PUSH
52758: EMPTY
52759: LIST
52760: ADD
52761: ST_TO_ADDR
// end ;
52762: GO 52718
52764: POP
52765: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
52766: LD_ADDR_VAR 0 6
52770: PUSH
52771: LD_VAR 0 6
52775: PPUSH
52776: LD_VAR 0 2
52780: PUSH
52781: LD_VAR 0 2
52785: ARRAY
52786: PPUSH
52787: LD_VAR 0 3
52791: PPUSH
52792: CALL_OW 1
52796: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
52797: LD_ADDR_VAR 0 7
52801: PUSH
52802: LD_VAR 0 7
52806: PPUSH
52807: LD_VAR 0 7
52811: PPUSH
52812: LD_VAR 0 6
52816: PPUSH
52817: CALL_OW 1
52821: ST_TO_ADDR
// for i = s_arr downto 2 do
52822: LD_ADDR_VAR 0 5
52826: PUSH
52827: DOUBLE
52828: LD_VAR 0 7
52832: INC
52833: ST_TO_ADDR
52834: LD_INT 2
52836: PUSH
52837: FOR_DOWNTO
52838: IFFALSE 52922
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
52840: LD_ADDR_VAR 0 6
52844: PUSH
52845: LD_VAR 0 7
52849: PUSH
52850: LD_VAR 0 5
52854: PUSH
52855: LD_INT 1
52857: MINUS
52858: ARRAY
52859: PPUSH
52860: LD_VAR 0 2
52864: PUSH
52865: LD_VAR 0 5
52869: PUSH
52870: LD_INT 1
52872: MINUS
52873: ARRAY
52874: PPUSH
52875: LD_VAR 0 7
52879: PUSH
52880: LD_VAR 0 5
52884: ARRAY
52885: PPUSH
52886: CALL_OW 1
52890: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
52891: LD_ADDR_VAR 0 7
52895: PUSH
52896: LD_VAR 0 7
52900: PPUSH
52901: LD_VAR 0 5
52905: PUSH
52906: LD_INT 1
52908: MINUS
52909: PPUSH
52910: LD_VAR 0 6
52914: PPUSH
52915: CALL_OW 1
52919: ST_TO_ADDR
// end ;
52920: GO 52837
52922: POP
52923: POP
// result := s_arr [ 1 ] ;
52924: LD_ADDR_VAR 0 4
52928: PUSH
52929: LD_VAR 0 7
52933: PUSH
52934: LD_INT 1
52936: ARRAY
52937: ST_TO_ADDR
// end ; end ;
52938: LD_VAR 0 4
52942: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
52943: LD_INT 0
52945: PPUSH
52946: PPUSH
// if not list then
52947: LD_VAR 0 1
52951: NOT
52952: IFFALSE 52956
// exit ;
52954: GO 53047
// i := list [ pos1 ] ;
52956: LD_ADDR_VAR 0 5
52960: PUSH
52961: LD_VAR 0 1
52965: PUSH
52966: LD_VAR 0 2
52970: ARRAY
52971: ST_TO_ADDR
// if not i then
52972: LD_VAR 0 5
52976: NOT
52977: IFFALSE 52981
// exit ;
52979: GO 53047
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
52981: LD_ADDR_VAR 0 1
52985: PUSH
52986: LD_VAR 0 1
52990: PPUSH
52991: LD_VAR 0 2
52995: PPUSH
52996: LD_VAR 0 1
53000: PUSH
53001: LD_VAR 0 3
53005: ARRAY
53006: PPUSH
53007: CALL_OW 1
53011: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
53012: LD_ADDR_VAR 0 1
53016: PUSH
53017: LD_VAR 0 1
53021: PPUSH
53022: LD_VAR 0 3
53026: PPUSH
53027: LD_VAR 0 5
53031: PPUSH
53032: CALL_OW 1
53036: ST_TO_ADDR
// result := list ;
53037: LD_ADDR_VAR 0 4
53041: PUSH
53042: LD_VAR 0 1
53046: ST_TO_ADDR
// end ;
53047: LD_VAR 0 4
53051: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
53052: LD_INT 0
53054: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
53055: LD_ADDR_VAR 0 5
53059: PUSH
53060: LD_VAR 0 1
53064: PPUSH
53065: CALL_OW 250
53069: PPUSH
53070: LD_VAR 0 1
53074: PPUSH
53075: CALL_OW 251
53079: PPUSH
53080: LD_VAR 0 2
53084: PPUSH
53085: LD_VAR 0 3
53089: PPUSH
53090: LD_VAR 0 4
53094: PPUSH
53095: CALL 53105 0 5
53099: ST_TO_ADDR
// end ;
53100: LD_VAR 0 5
53104: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
53105: LD_INT 0
53107: PPUSH
53108: PPUSH
53109: PPUSH
53110: PPUSH
// if not list then
53111: LD_VAR 0 3
53115: NOT
53116: IFFALSE 53120
// exit ;
53118: GO 53508
// result := [ ] ;
53120: LD_ADDR_VAR 0 6
53124: PUSH
53125: EMPTY
53126: ST_TO_ADDR
// for i in list do
53127: LD_ADDR_VAR 0 7
53131: PUSH
53132: LD_VAR 0 3
53136: PUSH
53137: FOR_IN
53138: IFFALSE 53340
// begin tmp := GetDistUnitXY ( i , x , y ) ;
53140: LD_ADDR_VAR 0 9
53144: PUSH
53145: LD_VAR 0 7
53149: PPUSH
53150: LD_VAR 0 1
53154: PPUSH
53155: LD_VAR 0 2
53159: PPUSH
53160: CALL_OW 297
53164: ST_TO_ADDR
// if not result then
53165: LD_VAR 0 6
53169: NOT
53170: IFFALSE 53196
// result := [ [ i , tmp ] ] else
53172: LD_ADDR_VAR 0 6
53176: PUSH
53177: LD_VAR 0 7
53181: PUSH
53182: LD_VAR 0 9
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: EMPTY
53192: LIST
53193: ST_TO_ADDR
53194: GO 53338
// begin if result [ result ] [ 2 ] < tmp then
53196: LD_VAR 0 6
53200: PUSH
53201: LD_VAR 0 6
53205: ARRAY
53206: PUSH
53207: LD_INT 2
53209: ARRAY
53210: PUSH
53211: LD_VAR 0 9
53215: LESS
53216: IFFALSE 53258
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
53218: LD_ADDR_VAR 0 6
53222: PUSH
53223: LD_VAR 0 6
53227: PPUSH
53228: LD_VAR 0 6
53232: PUSH
53233: LD_INT 1
53235: PLUS
53236: PPUSH
53237: LD_VAR 0 7
53241: PUSH
53242: LD_VAR 0 9
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PPUSH
53251: CALL_OW 2
53255: ST_TO_ADDR
53256: GO 53338
// for j = 1 to result do
53258: LD_ADDR_VAR 0 8
53262: PUSH
53263: DOUBLE
53264: LD_INT 1
53266: DEC
53267: ST_TO_ADDR
53268: LD_VAR 0 6
53272: PUSH
53273: FOR_TO
53274: IFFALSE 53336
// begin if tmp < result [ j ] [ 2 ] then
53276: LD_VAR 0 9
53280: PUSH
53281: LD_VAR 0 6
53285: PUSH
53286: LD_VAR 0 8
53290: ARRAY
53291: PUSH
53292: LD_INT 2
53294: ARRAY
53295: LESS
53296: IFFALSE 53334
// begin result := Insert ( result , j , [ i , tmp ] ) ;
53298: LD_ADDR_VAR 0 6
53302: PUSH
53303: LD_VAR 0 6
53307: PPUSH
53308: LD_VAR 0 8
53312: PPUSH
53313: LD_VAR 0 7
53317: PUSH
53318: LD_VAR 0 9
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PPUSH
53327: CALL_OW 2
53331: ST_TO_ADDR
// break ;
53332: GO 53336
// end ; end ;
53334: GO 53273
53336: POP
53337: POP
// end ; end ;
53338: GO 53137
53340: POP
53341: POP
// if result and not asc then
53342: LD_VAR 0 6
53346: PUSH
53347: LD_VAR 0 4
53351: NOT
53352: AND
53353: IFFALSE 53428
// begin tmp := result ;
53355: LD_ADDR_VAR 0 9
53359: PUSH
53360: LD_VAR 0 6
53364: ST_TO_ADDR
// for i = tmp downto 1 do
53365: LD_ADDR_VAR 0 7
53369: PUSH
53370: DOUBLE
53371: LD_VAR 0 9
53375: INC
53376: ST_TO_ADDR
53377: LD_INT 1
53379: PUSH
53380: FOR_DOWNTO
53381: IFFALSE 53426
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
53383: LD_ADDR_VAR 0 6
53387: PUSH
53388: LD_VAR 0 6
53392: PPUSH
53393: LD_VAR 0 9
53397: PUSH
53398: LD_VAR 0 7
53402: MINUS
53403: PUSH
53404: LD_INT 1
53406: PLUS
53407: PPUSH
53408: LD_VAR 0 9
53412: PUSH
53413: LD_VAR 0 7
53417: ARRAY
53418: PPUSH
53419: CALL_OW 1
53423: ST_TO_ADDR
53424: GO 53380
53426: POP
53427: POP
// end ; tmp := [ ] ;
53428: LD_ADDR_VAR 0 9
53432: PUSH
53433: EMPTY
53434: ST_TO_ADDR
// if mode then
53435: LD_VAR 0 5
53439: IFFALSE 53508
// begin for i = 1 to result do
53441: LD_ADDR_VAR 0 7
53445: PUSH
53446: DOUBLE
53447: LD_INT 1
53449: DEC
53450: ST_TO_ADDR
53451: LD_VAR 0 6
53455: PUSH
53456: FOR_TO
53457: IFFALSE 53496
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
53459: LD_ADDR_VAR 0 9
53463: PUSH
53464: LD_VAR 0 9
53468: PPUSH
53469: LD_VAR 0 7
53473: PPUSH
53474: LD_VAR 0 6
53478: PUSH
53479: LD_VAR 0 7
53483: ARRAY
53484: PUSH
53485: LD_INT 1
53487: ARRAY
53488: PPUSH
53489: CALL_OW 1
53493: ST_TO_ADDR
53494: GO 53456
53496: POP
53497: POP
// result := tmp ;
53498: LD_ADDR_VAR 0 6
53502: PUSH
53503: LD_VAR 0 9
53507: ST_TO_ADDR
// end ; end ;
53508: LD_VAR 0 6
53512: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
53513: LD_INT 0
53515: PPUSH
53516: PPUSH
53517: PPUSH
53518: PPUSH
53519: PPUSH
53520: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
53521: LD_ADDR_VAR 0 5
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: EMPTY
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: ST_TO_ADDR
// if not x or not y then
53543: LD_VAR 0 2
53547: NOT
53548: PUSH
53549: LD_VAR 0 3
53553: NOT
53554: OR
53555: IFFALSE 53559
// exit ;
53557: GO 55211
// if not range then
53559: LD_VAR 0 4
53563: NOT
53564: IFFALSE 53574
// range := 10 ;
53566: LD_ADDR_VAR 0 4
53570: PUSH
53571: LD_INT 10
53573: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
53574: LD_ADDR_VAR 0 8
53578: PUSH
53579: LD_INT 81
53581: PUSH
53582: LD_VAR 0 1
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 92
53593: PUSH
53594: LD_VAR 0 2
53598: PUSH
53599: LD_VAR 0 3
53603: PUSH
53604: LD_VAR 0 4
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 3
53617: PUSH
53618: LD_INT 21
53620: PUSH
53621: LD_INT 3
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: LIST
53636: PPUSH
53637: CALL_OW 69
53641: ST_TO_ADDR
// if not tmp then
53642: LD_VAR 0 8
53646: NOT
53647: IFFALSE 53651
// exit ;
53649: GO 55211
// for i in tmp do
53651: LD_ADDR_VAR 0 6
53655: PUSH
53656: LD_VAR 0 8
53660: PUSH
53661: FOR_IN
53662: IFFALSE 55186
// begin points := [ 0 , 0 , 0 ] ;
53664: LD_ADDR_VAR 0 9
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: LIST
53682: ST_TO_ADDR
// bpoints := 1 ;
53683: LD_ADDR_VAR 0 10
53687: PUSH
53688: LD_INT 1
53690: ST_TO_ADDR
// case GetType ( i ) of unit_human :
53691: LD_VAR 0 6
53695: PPUSH
53696: CALL_OW 247
53700: PUSH
53701: LD_INT 1
53703: DOUBLE
53704: EQUAL
53705: IFTRUE 53709
53707: GO 54287
53709: POP
// begin if GetClass ( i ) = 1 then
53710: LD_VAR 0 6
53714: PPUSH
53715: CALL_OW 257
53719: PUSH
53720: LD_INT 1
53722: EQUAL
53723: IFFALSE 53744
// points := [ 10 , 5 , 3 ] ;
53725: LD_ADDR_VAR 0 9
53729: PUSH
53730: LD_INT 10
53732: PUSH
53733: LD_INT 5
53735: PUSH
53736: LD_INT 3
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: LIST
53743: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
53744: LD_VAR 0 6
53748: PPUSH
53749: CALL_OW 257
53753: PUSH
53754: LD_INT 2
53756: PUSH
53757: LD_INT 3
53759: PUSH
53760: LD_INT 4
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: LIST
53767: IN
53768: IFFALSE 53789
// points := [ 3 , 2 , 1 ] ;
53770: LD_ADDR_VAR 0 9
53774: PUSH
53775: LD_INT 3
53777: PUSH
53778: LD_INT 2
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: LIST
53788: ST_TO_ADDR
// if GetClass ( i ) = 5 then
53789: LD_VAR 0 6
53793: PPUSH
53794: CALL_OW 257
53798: PUSH
53799: LD_INT 5
53801: EQUAL
53802: IFFALSE 53823
// points := [ 130 , 5 , 2 ] ;
53804: LD_ADDR_VAR 0 9
53808: PUSH
53809: LD_INT 130
53811: PUSH
53812: LD_INT 5
53814: PUSH
53815: LD_INT 2
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: LIST
53822: ST_TO_ADDR
// if GetClass ( i ) = 8 then
53823: LD_VAR 0 6
53827: PPUSH
53828: CALL_OW 257
53832: PUSH
53833: LD_INT 8
53835: EQUAL
53836: IFFALSE 53857
// points := [ 35 , 35 , 30 ] ;
53838: LD_ADDR_VAR 0 9
53842: PUSH
53843: LD_INT 35
53845: PUSH
53846: LD_INT 35
53848: PUSH
53849: LD_INT 30
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: LIST
53856: ST_TO_ADDR
// if GetClass ( i ) = 9 then
53857: LD_VAR 0 6
53861: PPUSH
53862: CALL_OW 257
53866: PUSH
53867: LD_INT 9
53869: EQUAL
53870: IFFALSE 53891
// points := [ 20 , 55 , 40 ] ;
53872: LD_ADDR_VAR 0 9
53876: PUSH
53877: LD_INT 20
53879: PUSH
53880: LD_INT 55
53882: PUSH
53883: LD_INT 40
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: LIST
53890: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
53891: LD_VAR 0 6
53895: PPUSH
53896: CALL_OW 257
53900: PUSH
53901: LD_INT 12
53903: PUSH
53904: LD_INT 16
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: IN
53911: IFFALSE 53932
// points := [ 5 , 3 , 2 ] ;
53913: LD_ADDR_VAR 0 9
53917: PUSH
53918: LD_INT 5
53920: PUSH
53921: LD_INT 3
53923: PUSH
53924: LD_INT 2
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: LIST
53931: ST_TO_ADDR
// if GetClass ( i ) = 17 then
53932: LD_VAR 0 6
53936: PPUSH
53937: CALL_OW 257
53941: PUSH
53942: LD_INT 17
53944: EQUAL
53945: IFFALSE 53966
// points := [ 100 , 50 , 75 ] ;
53947: LD_ADDR_VAR 0 9
53951: PUSH
53952: LD_INT 100
53954: PUSH
53955: LD_INT 50
53957: PUSH
53958: LD_INT 75
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: LIST
53965: ST_TO_ADDR
// if GetClass ( i ) = 15 then
53966: LD_VAR 0 6
53970: PPUSH
53971: CALL_OW 257
53975: PUSH
53976: LD_INT 15
53978: EQUAL
53979: IFFALSE 54000
// points := [ 10 , 5 , 3 ] ;
53981: LD_ADDR_VAR 0 9
53985: PUSH
53986: LD_INT 10
53988: PUSH
53989: LD_INT 5
53991: PUSH
53992: LD_INT 3
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: LIST
53999: ST_TO_ADDR
// if GetClass ( i ) = 14 then
54000: LD_VAR 0 6
54004: PPUSH
54005: CALL_OW 257
54009: PUSH
54010: LD_INT 14
54012: EQUAL
54013: IFFALSE 54034
// points := [ 10 , 0 , 0 ] ;
54015: LD_ADDR_VAR 0 9
54019: PUSH
54020: LD_INT 10
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: LIST
54033: ST_TO_ADDR
// if GetClass ( i ) = 11 then
54034: LD_VAR 0 6
54038: PPUSH
54039: CALL_OW 257
54043: PUSH
54044: LD_INT 11
54046: EQUAL
54047: IFFALSE 54068
// points := [ 30 , 10 , 5 ] ;
54049: LD_ADDR_VAR 0 9
54053: PUSH
54054: LD_INT 30
54056: PUSH
54057: LD_INT 10
54059: PUSH
54060: LD_INT 5
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: LIST
54067: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
54068: LD_VAR 0 1
54072: PPUSH
54073: LD_INT 5
54075: PPUSH
54076: CALL_OW 321
54080: PUSH
54081: LD_INT 2
54083: EQUAL
54084: IFFALSE 54101
// bpoints := bpoints * 1.8 ;
54086: LD_ADDR_VAR 0 10
54090: PUSH
54091: LD_VAR 0 10
54095: PUSH
54096: LD_REAL  1.80000000000000E+0000
54099: MUL
54100: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
54101: LD_VAR 0 6
54105: PPUSH
54106: CALL_OW 257
54110: PUSH
54111: LD_INT 1
54113: PUSH
54114: LD_INT 2
54116: PUSH
54117: LD_INT 3
54119: PUSH
54120: LD_INT 4
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: IN
54129: PUSH
54130: LD_VAR 0 1
54134: PPUSH
54135: LD_INT 51
54137: PPUSH
54138: CALL_OW 321
54142: PUSH
54143: LD_INT 2
54145: EQUAL
54146: AND
54147: IFFALSE 54164
// bpoints := bpoints * 1.2 ;
54149: LD_ADDR_VAR 0 10
54153: PUSH
54154: LD_VAR 0 10
54158: PUSH
54159: LD_REAL  1.20000000000000E+0000
54162: MUL
54163: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
54164: LD_VAR 0 6
54168: PPUSH
54169: CALL_OW 257
54173: PUSH
54174: LD_INT 5
54176: PUSH
54177: LD_INT 7
54179: PUSH
54180: LD_INT 9
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: LIST
54187: IN
54188: PUSH
54189: LD_VAR 0 1
54193: PPUSH
54194: LD_INT 52
54196: PPUSH
54197: CALL_OW 321
54201: PUSH
54202: LD_INT 2
54204: EQUAL
54205: AND
54206: IFFALSE 54223
// bpoints := bpoints * 1.5 ;
54208: LD_ADDR_VAR 0 10
54212: PUSH
54213: LD_VAR 0 10
54217: PUSH
54218: LD_REAL  1.50000000000000E+0000
54221: MUL
54222: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
54223: LD_VAR 0 1
54227: PPUSH
54228: LD_INT 66
54230: PPUSH
54231: CALL_OW 321
54235: PUSH
54236: LD_INT 2
54238: EQUAL
54239: IFFALSE 54256
// bpoints := bpoints * 1.1 ;
54241: LD_ADDR_VAR 0 10
54245: PUSH
54246: LD_VAR 0 10
54250: PUSH
54251: LD_REAL  1.10000000000000E+0000
54254: MUL
54255: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
54256: LD_ADDR_VAR 0 10
54260: PUSH
54261: LD_VAR 0 10
54265: PUSH
54266: LD_VAR 0 6
54270: PPUSH
54271: LD_INT 1
54273: PPUSH
54274: CALL_OW 259
54278: PUSH
54279: LD_REAL  1.15000000000000E+0000
54282: MUL
54283: MUL
54284: ST_TO_ADDR
// end ; unit_vehicle :
54285: GO 55115
54287: LD_INT 2
54289: DOUBLE
54290: EQUAL
54291: IFTRUE 54295
54293: GO 55103
54295: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
54296: LD_VAR 0 6
54300: PPUSH
54301: CALL_OW 264
54305: PUSH
54306: LD_INT 2
54308: PUSH
54309: LD_INT 42
54311: PUSH
54312: LD_INT 24
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: LIST
54319: IN
54320: IFFALSE 54341
// points := [ 25 , 5 , 3 ] ;
54322: LD_ADDR_VAR 0 9
54326: PUSH
54327: LD_INT 25
54329: PUSH
54330: LD_INT 5
54332: PUSH
54333: LD_INT 3
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: LIST
54340: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
54341: LD_VAR 0 6
54345: PPUSH
54346: CALL_OW 264
54350: PUSH
54351: LD_INT 4
54353: PUSH
54354: LD_INT 43
54356: PUSH
54357: LD_INT 25
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: LIST
54364: IN
54365: IFFALSE 54386
// points := [ 40 , 15 , 5 ] ;
54367: LD_ADDR_VAR 0 9
54371: PUSH
54372: LD_INT 40
54374: PUSH
54375: LD_INT 15
54377: PUSH
54378: LD_INT 5
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: LIST
54385: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
54386: LD_VAR 0 6
54390: PPUSH
54391: CALL_OW 264
54395: PUSH
54396: LD_INT 3
54398: PUSH
54399: LD_INT 23
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: IN
54406: IFFALSE 54427
// points := [ 7 , 25 , 8 ] ;
54408: LD_ADDR_VAR 0 9
54412: PUSH
54413: LD_INT 7
54415: PUSH
54416: LD_INT 25
54418: PUSH
54419: LD_INT 8
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: LIST
54426: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
54427: LD_VAR 0 6
54431: PPUSH
54432: CALL_OW 264
54436: PUSH
54437: LD_INT 5
54439: PUSH
54440: LD_INT 27
54442: PUSH
54443: LD_INT 44
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: LIST
54450: IN
54451: IFFALSE 54472
// points := [ 14 , 50 , 16 ] ;
54453: LD_ADDR_VAR 0 9
54457: PUSH
54458: LD_INT 14
54460: PUSH
54461: LD_INT 50
54463: PUSH
54464: LD_INT 16
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: LIST
54471: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
54472: LD_VAR 0 6
54476: PPUSH
54477: CALL_OW 264
54481: PUSH
54482: LD_INT 6
54484: PUSH
54485: LD_INT 46
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: IN
54492: IFFALSE 54513
// points := [ 32 , 120 , 70 ] ;
54494: LD_ADDR_VAR 0 9
54498: PUSH
54499: LD_INT 32
54501: PUSH
54502: LD_INT 120
54504: PUSH
54505: LD_INT 70
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: LIST
54512: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
54513: LD_VAR 0 6
54517: PPUSH
54518: CALL_OW 264
54522: PUSH
54523: LD_INT 7
54525: PUSH
54526: LD_INT 28
54528: PUSH
54529: LD_INT 45
54531: PUSH
54532: LD_EXP 74
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: IN
54543: IFFALSE 54564
// points := [ 35 , 20 , 45 ] ;
54545: LD_ADDR_VAR 0 9
54549: PUSH
54550: LD_INT 35
54552: PUSH
54553: LD_INT 20
54555: PUSH
54556: LD_INT 45
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: LIST
54563: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
54564: LD_VAR 0 6
54568: PPUSH
54569: CALL_OW 264
54573: PUSH
54574: LD_INT 47
54576: PUSH
54577: EMPTY
54578: LIST
54579: IN
54580: IFFALSE 54601
// points := [ 67 , 45 , 75 ] ;
54582: LD_ADDR_VAR 0 9
54586: PUSH
54587: LD_INT 67
54589: PUSH
54590: LD_INT 45
54592: PUSH
54593: LD_INT 75
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: LIST
54600: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
54601: LD_VAR 0 6
54605: PPUSH
54606: CALL_OW 264
54610: PUSH
54611: LD_INT 26
54613: PUSH
54614: EMPTY
54615: LIST
54616: IN
54617: IFFALSE 54638
// points := [ 120 , 30 , 80 ] ;
54619: LD_ADDR_VAR 0 9
54623: PUSH
54624: LD_INT 120
54626: PUSH
54627: LD_INT 30
54629: PUSH
54630: LD_INT 80
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: LIST
54637: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
54638: LD_VAR 0 6
54642: PPUSH
54643: CALL_OW 264
54647: PUSH
54648: LD_INT 22
54650: PUSH
54651: EMPTY
54652: LIST
54653: IN
54654: IFFALSE 54675
// points := [ 40 , 1 , 1 ] ;
54656: LD_ADDR_VAR 0 9
54660: PUSH
54661: LD_INT 40
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: LD_INT 1
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: LIST
54674: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
54675: LD_VAR 0 6
54679: PPUSH
54680: CALL_OW 264
54684: PUSH
54685: LD_INT 29
54687: PUSH
54688: EMPTY
54689: LIST
54690: IN
54691: IFFALSE 54712
// points := [ 70 , 200 , 400 ] ;
54693: LD_ADDR_VAR 0 9
54697: PUSH
54698: LD_INT 70
54700: PUSH
54701: LD_INT 200
54703: PUSH
54704: LD_INT 400
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: LIST
54711: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
54712: LD_VAR 0 6
54716: PPUSH
54717: CALL_OW 264
54721: PUSH
54722: LD_INT 14
54724: PUSH
54725: LD_INT 53
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: IN
54732: IFFALSE 54753
// points := [ 40 , 10 , 20 ] ;
54734: LD_ADDR_VAR 0 9
54738: PUSH
54739: LD_INT 40
54741: PUSH
54742: LD_INT 10
54744: PUSH
54745: LD_INT 20
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: LIST
54752: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
54753: LD_VAR 0 6
54757: PPUSH
54758: CALL_OW 264
54762: PUSH
54763: LD_INT 9
54765: PUSH
54766: EMPTY
54767: LIST
54768: IN
54769: IFFALSE 54790
// points := [ 5 , 70 , 20 ] ;
54771: LD_ADDR_VAR 0 9
54775: PUSH
54776: LD_INT 5
54778: PUSH
54779: LD_INT 70
54781: PUSH
54782: LD_INT 20
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: LIST
54789: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
54790: LD_VAR 0 6
54794: PPUSH
54795: CALL_OW 264
54799: PUSH
54800: LD_INT 10
54802: PUSH
54803: EMPTY
54804: LIST
54805: IN
54806: IFFALSE 54827
// points := [ 35 , 110 , 70 ] ;
54808: LD_ADDR_VAR 0 9
54812: PUSH
54813: LD_INT 35
54815: PUSH
54816: LD_INT 110
54818: PUSH
54819: LD_INT 70
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: LIST
54826: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
54827: LD_VAR 0 6
54831: PPUSH
54832: CALL_OW 265
54836: PUSH
54837: LD_INT 25
54839: EQUAL
54840: IFFALSE 54861
// points := [ 80 , 65 , 100 ] ;
54842: LD_ADDR_VAR 0 9
54846: PUSH
54847: LD_INT 80
54849: PUSH
54850: LD_INT 65
54852: PUSH
54853: LD_INT 100
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: LIST
54860: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
54861: LD_VAR 0 6
54865: PPUSH
54866: CALL_OW 263
54870: PUSH
54871: LD_INT 1
54873: EQUAL
54874: IFFALSE 54909
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
54876: LD_ADDR_VAR 0 10
54880: PUSH
54881: LD_VAR 0 10
54885: PUSH
54886: LD_VAR 0 6
54890: PPUSH
54891: CALL_OW 311
54895: PPUSH
54896: LD_INT 3
54898: PPUSH
54899: CALL_OW 259
54903: PUSH
54904: LD_INT 4
54906: MUL
54907: MUL
54908: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
54909: LD_VAR 0 6
54913: PPUSH
54914: CALL_OW 263
54918: PUSH
54919: LD_INT 2
54921: EQUAL
54922: IFFALSE 54973
// begin j := IsControledBy ( i ) ;
54924: LD_ADDR_VAR 0 7
54928: PUSH
54929: LD_VAR 0 6
54933: PPUSH
54934: CALL_OW 312
54938: ST_TO_ADDR
// if j then
54939: LD_VAR 0 7
54943: IFFALSE 54973
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
54945: LD_ADDR_VAR 0 10
54949: PUSH
54950: LD_VAR 0 10
54954: PUSH
54955: LD_VAR 0 7
54959: PPUSH
54960: LD_INT 3
54962: PPUSH
54963: CALL_OW 259
54967: PUSH
54968: LD_INT 3
54970: MUL
54971: MUL
54972: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
54973: LD_VAR 0 6
54977: PPUSH
54978: CALL_OW 264
54982: PUSH
54983: LD_INT 5
54985: PUSH
54986: LD_INT 6
54988: PUSH
54989: LD_INT 46
54991: PUSH
54992: LD_INT 44
54994: PUSH
54995: LD_INT 47
54997: PUSH
54998: LD_INT 45
55000: PUSH
55001: LD_INT 28
55003: PUSH
55004: LD_INT 7
55006: PUSH
55007: LD_INT 27
55009: PUSH
55010: LD_INT 29
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: IN
55025: PUSH
55026: LD_VAR 0 1
55030: PPUSH
55031: LD_INT 52
55033: PPUSH
55034: CALL_OW 321
55038: PUSH
55039: LD_INT 2
55041: EQUAL
55042: AND
55043: IFFALSE 55060
// bpoints := bpoints * 1.2 ;
55045: LD_ADDR_VAR 0 10
55049: PUSH
55050: LD_VAR 0 10
55054: PUSH
55055: LD_REAL  1.20000000000000E+0000
55058: MUL
55059: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
55060: LD_VAR 0 6
55064: PPUSH
55065: CALL_OW 264
55069: PUSH
55070: LD_INT 6
55072: PUSH
55073: LD_INT 46
55075: PUSH
55076: LD_INT 47
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: LIST
55083: IN
55084: IFFALSE 55101
// bpoints := bpoints * 1.2 ;
55086: LD_ADDR_VAR 0 10
55090: PUSH
55091: LD_VAR 0 10
55095: PUSH
55096: LD_REAL  1.20000000000000E+0000
55099: MUL
55100: ST_TO_ADDR
// end ; unit_building :
55101: GO 55115
55103: LD_INT 3
55105: DOUBLE
55106: EQUAL
55107: IFTRUE 55111
55109: GO 55114
55111: POP
// ; end ;
55112: GO 55115
55114: POP
// for j = 1 to 3 do
55115: LD_ADDR_VAR 0 7
55119: PUSH
55120: DOUBLE
55121: LD_INT 1
55123: DEC
55124: ST_TO_ADDR
55125: LD_INT 3
55127: PUSH
55128: FOR_TO
55129: IFFALSE 55182
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
55131: LD_ADDR_VAR 0 5
55135: PUSH
55136: LD_VAR 0 5
55140: PPUSH
55141: LD_VAR 0 7
55145: PPUSH
55146: LD_VAR 0 5
55150: PUSH
55151: LD_VAR 0 7
55155: ARRAY
55156: PUSH
55157: LD_VAR 0 9
55161: PUSH
55162: LD_VAR 0 7
55166: ARRAY
55167: PUSH
55168: LD_VAR 0 10
55172: MUL
55173: PLUS
55174: PPUSH
55175: CALL_OW 1
55179: ST_TO_ADDR
55180: GO 55128
55182: POP
55183: POP
// end ;
55184: GO 53661
55186: POP
55187: POP
// result := Replace ( result , 4 , tmp ) ;
55188: LD_ADDR_VAR 0 5
55192: PUSH
55193: LD_VAR 0 5
55197: PPUSH
55198: LD_INT 4
55200: PPUSH
55201: LD_VAR 0 8
55205: PPUSH
55206: CALL_OW 1
55210: ST_TO_ADDR
// end ;
55211: LD_VAR 0 5
55215: RET
// export function DangerAtRange ( unit , range ) ; begin
55216: LD_INT 0
55218: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
55219: LD_ADDR_VAR 0 3
55223: PUSH
55224: LD_VAR 0 1
55228: PPUSH
55229: CALL_OW 255
55233: PPUSH
55234: LD_VAR 0 1
55238: PPUSH
55239: CALL_OW 250
55243: PPUSH
55244: LD_VAR 0 1
55248: PPUSH
55249: CALL_OW 251
55253: PPUSH
55254: LD_VAR 0 2
55258: PPUSH
55259: CALL 53513 0 4
55263: ST_TO_ADDR
// end ;
55264: LD_VAR 0 3
55268: RET
// export function DangerInArea ( side , area ) ; begin
55269: LD_INT 0
55271: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
55272: LD_ADDR_VAR 0 3
55276: PUSH
55277: LD_VAR 0 2
55281: PPUSH
55282: LD_INT 81
55284: PUSH
55285: LD_VAR 0 1
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PPUSH
55294: CALL_OW 70
55298: ST_TO_ADDR
// end ;
55299: LD_VAR 0 3
55303: RET
// export function IsExtension ( b ) ; begin
55304: LD_INT 0
55306: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
55307: LD_ADDR_VAR 0 2
55311: PUSH
55312: LD_VAR 0 1
55316: PUSH
55317: LD_INT 23
55319: PUSH
55320: LD_INT 20
55322: PUSH
55323: LD_INT 22
55325: PUSH
55326: LD_INT 17
55328: PUSH
55329: LD_INT 24
55331: PUSH
55332: LD_INT 21
55334: PUSH
55335: LD_INT 19
55337: PUSH
55338: LD_INT 16
55340: PUSH
55341: LD_INT 25
55343: PUSH
55344: LD_INT 18
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: IN
55359: ST_TO_ADDR
// end ;
55360: LD_VAR 0 2
55364: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
55365: LD_INT 0
55367: PPUSH
55368: PPUSH
55369: PPUSH
// result := [ ] ;
55370: LD_ADDR_VAR 0 4
55374: PUSH
55375: EMPTY
55376: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
55377: LD_ADDR_VAR 0 5
55381: PUSH
55382: LD_VAR 0 2
55386: PPUSH
55387: LD_INT 21
55389: PUSH
55390: LD_INT 3
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PPUSH
55397: CALL_OW 70
55401: ST_TO_ADDR
// if not tmp then
55402: LD_VAR 0 5
55406: NOT
55407: IFFALSE 55411
// exit ;
55409: GO 55475
// if checkLink then
55411: LD_VAR 0 3
55415: IFFALSE 55465
// begin for i in tmp do
55417: LD_ADDR_VAR 0 6
55421: PUSH
55422: LD_VAR 0 5
55426: PUSH
55427: FOR_IN
55428: IFFALSE 55463
// if GetBase ( i ) <> base then
55430: LD_VAR 0 6
55434: PPUSH
55435: CALL_OW 274
55439: PUSH
55440: LD_VAR 0 1
55444: NONEQUAL
55445: IFFALSE 55461
// ComLinkToBase ( base , i ) ;
55447: LD_VAR 0 1
55451: PPUSH
55452: LD_VAR 0 6
55456: PPUSH
55457: CALL_OW 169
55461: GO 55427
55463: POP
55464: POP
// end ; result := tmp ;
55465: LD_ADDR_VAR 0 4
55469: PUSH
55470: LD_VAR 0 5
55474: ST_TO_ADDR
// end ;
55475: LD_VAR 0 4
55479: RET
// export function ComComplete ( units , b ) ; var i ; begin
55480: LD_INT 0
55482: PPUSH
55483: PPUSH
// if not units then
55484: LD_VAR 0 1
55488: NOT
55489: IFFALSE 55493
// exit ;
55491: GO 55583
// for i in units do
55493: LD_ADDR_VAR 0 4
55497: PUSH
55498: LD_VAR 0 1
55502: PUSH
55503: FOR_IN
55504: IFFALSE 55581
// if BuildingStatus ( b ) = bs_build then
55506: LD_VAR 0 2
55510: PPUSH
55511: CALL_OW 461
55515: PUSH
55516: LD_INT 1
55518: EQUAL
55519: IFFALSE 55579
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
55521: LD_VAR 0 4
55525: PPUSH
55526: LD_STRING h
55528: PUSH
55529: LD_VAR 0 2
55533: PPUSH
55534: CALL_OW 250
55538: PUSH
55539: LD_VAR 0 2
55543: PPUSH
55544: CALL_OW 251
55548: PUSH
55549: LD_VAR 0 2
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: PUSH
55572: EMPTY
55573: LIST
55574: PPUSH
55575: CALL_OW 446
55579: GO 55503
55581: POP
55582: POP
// end ;
55583: LD_VAR 0 3
55587: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
55588: LD_INT 0
55590: PPUSH
55591: PPUSH
55592: PPUSH
55593: PPUSH
55594: PPUSH
55595: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
55596: LD_VAR 0 1
55600: NOT
55601: PUSH
55602: LD_VAR 0 1
55606: PPUSH
55607: CALL_OW 263
55611: PUSH
55612: LD_INT 2
55614: NONEQUAL
55615: OR
55616: IFFALSE 55620
// exit ;
55618: GO 55936
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
55620: LD_ADDR_VAR 0 6
55624: PUSH
55625: LD_INT 22
55627: PUSH
55628: LD_VAR 0 1
55632: PPUSH
55633: CALL_OW 255
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 2
55644: PUSH
55645: LD_INT 30
55647: PUSH
55648: LD_INT 36
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 34
55657: PUSH
55658: LD_INT 31
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: LIST
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PPUSH
55674: CALL_OW 69
55678: ST_TO_ADDR
// if not tmp then
55679: LD_VAR 0 6
55683: NOT
55684: IFFALSE 55688
// exit ;
55686: GO 55936
// result := [ ] ;
55688: LD_ADDR_VAR 0 2
55692: PUSH
55693: EMPTY
55694: ST_TO_ADDR
// for i in tmp do
55695: LD_ADDR_VAR 0 3
55699: PUSH
55700: LD_VAR 0 6
55704: PUSH
55705: FOR_IN
55706: IFFALSE 55777
// begin t := UnitsInside ( i ) ;
55708: LD_ADDR_VAR 0 4
55712: PUSH
55713: LD_VAR 0 3
55717: PPUSH
55718: CALL_OW 313
55722: ST_TO_ADDR
// if t then
55723: LD_VAR 0 4
55727: IFFALSE 55775
// for j in t do
55729: LD_ADDR_VAR 0 7
55733: PUSH
55734: LD_VAR 0 4
55738: PUSH
55739: FOR_IN
55740: IFFALSE 55773
// result := Replace ( result , result + 1 , j ) ;
55742: LD_ADDR_VAR 0 2
55746: PUSH
55747: LD_VAR 0 2
55751: PPUSH
55752: LD_VAR 0 2
55756: PUSH
55757: LD_INT 1
55759: PLUS
55760: PPUSH
55761: LD_VAR 0 7
55765: PPUSH
55766: CALL_OW 1
55770: ST_TO_ADDR
55771: GO 55739
55773: POP
55774: POP
// end ;
55775: GO 55705
55777: POP
55778: POP
// if not result then
55779: LD_VAR 0 2
55783: NOT
55784: IFFALSE 55788
// exit ;
55786: GO 55936
// mech := result [ 1 ] ;
55788: LD_ADDR_VAR 0 5
55792: PUSH
55793: LD_VAR 0 2
55797: PUSH
55798: LD_INT 1
55800: ARRAY
55801: ST_TO_ADDR
// if result > 1 then
55802: LD_VAR 0 2
55806: PUSH
55807: LD_INT 1
55809: GREATER
55810: IFFALSE 55922
// begin for i = 2 to result do
55812: LD_ADDR_VAR 0 3
55816: PUSH
55817: DOUBLE
55818: LD_INT 2
55820: DEC
55821: ST_TO_ADDR
55822: LD_VAR 0 2
55826: PUSH
55827: FOR_TO
55828: IFFALSE 55920
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
55830: LD_ADDR_VAR 0 4
55834: PUSH
55835: LD_VAR 0 2
55839: PUSH
55840: LD_VAR 0 3
55844: ARRAY
55845: PPUSH
55846: LD_INT 3
55848: PPUSH
55849: CALL_OW 259
55853: PUSH
55854: LD_VAR 0 2
55858: PUSH
55859: LD_VAR 0 3
55863: ARRAY
55864: PPUSH
55865: CALL_OW 432
55869: MINUS
55870: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
55871: LD_VAR 0 4
55875: PUSH
55876: LD_VAR 0 5
55880: PPUSH
55881: LD_INT 3
55883: PPUSH
55884: CALL_OW 259
55888: PUSH
55889: LD_VAR 0 5
55893: PPUSH
55894: CALL_OW 432
55898: MINUS
55899: GREATEREQUAL
55900: IFFALSE 55918
// mech := result [ i ] ;
55902: LD_ADDR_VAR 0 5
55906: PUSH
55907: LD_VAR 0 2
55911: PUSH
55912: LD_VAR 0 3
55916: ARRAY
55917: ST_TO_ADDR
// end ;
55918: GO 55827
55920: POP
55921: POP
// end ; ComLinkTo ( vehicle , mech ) ;
55922: LD_VAR 0 1
55926: PPUSH
55927: LD_VAR 0 5
55931: PPUSH
55932: CALL_OW 135
// end ;
55936: LD_VAR 0 2
55940: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
55941: LD_INT 0
55943: PPUSH
55944: PPUSH
55945: PPUSH
55946: PPUSH
55947: PPUSH
55948: PPUSH
55949: PPUSH
55950: PPUSH
55951: PPUSH
55952: PPUSH
55953: PPUSH
55954: PPUSH
55955: PPUSH
// result := [ ] ;
55956: LD_ADDR_VAR 0 7
55960: PUSH
55961: EMPTY
55962: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
55963: LD_VAR 0 1
55967: PPUSH
55968: CALL_OW 266
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: IN
55983: NOT
55984: IFFALSE 55988
// exit ;
55986: GO 57622
// if name then
55988: LD_VAR 0 3
55992: IFFALSE 56008
// SetBName ( base_dep , name ) ;
55994: LD_VAR 0 1
55998: PPUSH
55999: LD_VAR 0 3
56003: PPUSH
56004: CALL_OW 500
// base := GetBase ( base_dep ) ;
56008: LD_ADDR_VAR 0 15
56012: PUSH
56013: LD_VAR 0 1
56017: PPUSH
56018: CALL_OW 274
56022: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
56023: LD_ADDR_VAR 0 16
56027: PUSH
56028: LD_VAR 0 1
56032: PPUSH
56033: CALL_OW 255
56037: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
56038: LD_ADDR_VAR 0 17
56042: PUSH
56043: LD_VAR 0 1
56047: PPUSH
56048: CALL_OW 248
56052: ST_TO_ADDR
// if sources then
56053: LD_VAR 0 5
56057: IFFALSE 56104
// for i = 1 to 3 do
56059: LD_ADDR_VAR 0 8
56063: PUSH
56064: DOUBLE
56065: LD_INT 1
56067: DEC
56068: ST_TO_ADDR
56069: LD_INT 3
56071: PUSH
56072: FOR_TO
56073: IFFALSE 56102
// AddResourceType ( base , i , sources [ i ] ) ;
56075: LD_VAR 0 15
56079: PPUSH
56080: LD_VAR 0 8
56084: PPUSH
56085: LD_VAR 0 5
56089: PUSH
56090: LD_VAR 0 8
56094: ARRAY
56095: PPUSH
56096: CALL_OW 276
56100: GO 56072
56102: POP
56103: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
56104: LD_ADDR_VAR 0 18
56108: PUSH
56109: LD_VAR 0 15
56113: PPUSH
56114: LD_VAR 0 2
56118: PPUSH
56119: LD_INT 1
56121: PPUSH
56122: CALL 55365 0 3
56126: ST_TO_ADDR
// InitHc ;
56127: CALL_OW 19
// InitUc ;
56131: CALL_OW 18
// uc_side := side ;
56135: LD_ADDR_OWVAR 20
56139: PUSH
56140: LD_VAR 0 16
56144: ST_TO_ADDR
// uc_nation := nation ;
56145: LD_ADDR_OWVAR 21
56149: PUSH
56150: LD_VAR 0 17
56154: ST_TO_ADDR
// if buildings then
56155: LD_VAR 0 18
56159: IFFALSE 57481
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
56161: LD_ADDR_VAR 0 19
56165: PUSH
56166: LD_VAR 0 18
56170: PPUSH
56171: LD_INT 2
56173: PUSH
56174: LD_INT 30
56176: PUSH
56177: LD_INT 29
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 30
56186: PUSH
56187: LD_INT 30
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: LIST
56198: PPUSH
56199: CALL_OW 72
56203: ST_TO_ADDR
// if tmp then
56204: LD_VAR 0 19
56208: IFFALSE 56256
// for i in tmp do
56210: LD_ADDR_VAR 0 8
56214: PUSH
56215: LD_VAR 0 19
56219: PUSH
56220: FOR_IN
56221: IFFALSE 56254
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
56223: LD_VAR 0 8
56227: PPUSH
56228: CALL_OW 250
56232: PPUSH
56233: LD_VAR 0 8
56237: PPUSH
56238: CALL_OW 251
56242: PPUSH
56243: LD_VAR 0 16
56247: PPUSH
56248: CALL_OW 441
56252: GO 56220
56254: POP
56255: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
56256: LD_VAR 0 18
56260: PPUSH
56261: LD_INT 2
56263: PUSH
56264: LD_INT 30
56266: PUSH
56267: LD_INT 32
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 30
56276: PUSH
56277: LD_INT 33
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: LIST
56288: PPUSH
56289: CALL_OW 72
56293: IFFALSE 56381
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
56295: LD_ADDR_VAR 0 8
56299: PUSH
56300: LD_VAR 0 18
56304: PPUSH
56305: LD_INT 2
56307: PUSH
56308: LD_INT 30
56310: PUSH
56311: LD_INT 32
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 30
56320: PUSH
56321: LD_INT 33
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: LIST
56332: PPUSH
56333: CALL_OW 72
56337: PUSH
56338: FOR_IN
56339: IFFALSE 56379
// begin if not GetBWeapon ( i ) then
56341: LD_VAR 0 8
56345: PPUSH
56346: CALL_OW 269
56350: NOT
56351: IFFALSE 56377
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
56353: LD_VAR 0 8
56357: PPUSH
56358: LD_VAR 0 8
56362: PPUSH
56363: LD_VAR 0 2
56367: PPUSH
56368: CALL 57627 0 2
56372: PPUSH
56373: CALL_OW 431
// end ;
56377: GO 56338
56379: POP
56380: POP
// end ; for i = 1 to personel do
56381: LD_ADDR_VAR 0 8
56385: PUSH
56386: DOUBLE
56387: LD_INT 1
56389: DEC
56390: ST_TO_ADDR
56391: LD_VAR 0 6
56395: PUSH
56396: FOR_TO
56397: IFFALSE 57461
// begin if i > 4 then
56399: LD_VAR 0 8
56403: PUSH
56404: LD_INT 4
56406: GREATER
56407: IFFALSE 56411
// break ;
56409: GO 57461
// case i of 1 :
56411: LD_VAR 0 8
56415: PUSH
56416: LD_INT 1
56418: DOUBLE
56419: EQUAL
56420: IFTRUE 56424
56422: GO 56504
56424: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
56425: LD_ADDR_VAR 0 12
56429: PUSH
56430: LD_VAR 0 18
56434: PPUSH
56435: LD_INT 22
56437: PUSH
56438: LD_VAR 0 16
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 58
56449: PUSH
56450: EMPTY
56451: LIST
56452: PUSH
56453: LD_INT 2
56455: PUSH
56456: LD_INT 30
56458: PUSH
56459: LD_INT 32
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 30
56468: PUSH
56469: LD_INT 4
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 30
56478: PUSH
56479: LD_INT 5
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: LIST
56496: PPUSH
56497: CALL_OW 72
56501: ST_TO_ADDR
56502: GO 56726
56504: LD_INT 2
56506: DOUBLE
56507: EQUAL
56508: IFTRUE 56512
56510: GO 56574
56512: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
56513: LD_ADDR_VAR 0 12
56517: PUSH
56518: LD_VAR 0 18
56522: PPUSH
56523: LD_INT 22
56525: PUSH
56526: LD_VAR 0 16
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 2
56537: PUSH
56538: LD_INT 30
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 30
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: LIST
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PPUSH
56567: CALL_OW 72
56571: ST_TO_ADDR
56572: GO 56726
56574: LD_INT 3
56576: DOUBLE
56577: EQUAL
56578: IFTRUE 56582
56580: GO 56644
56582: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
56583: LD_ADDR_VAR 0 12
56587: PUSH
56588: LD_VAR 0 18
56592: PPUSH
56593: LD_INT 22
56595: PUSH
56596: LD_VAR 0 16
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 2
56607: PUSH
56608: LD_INT 30
56610: PUSH
56611: LD_INT 2
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 30
56620: PUSH
56621: LD_INT 3
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: LIST
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PPUSH
56637: CALL_OW 72
56641: ST_TO_ADDR
56642: GO 56726
56644: LD_INT 4
56646: DOUBLE
56647: EQUAL
56648: IFTRUE 56652
56650: GO 56725
56652: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
56653: LD_ADDR_VAR 0 12
56657: PUSH
56658: LD_VAR 0 18
56662: PPUSH
56663: LD_INT 22
56665: PUSH
56666: LD_VAR 0 16
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 2
56677: PUSH
56678: LD_INT 30
56680: PUSH
56681: LD_INT 6
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 30
56690: PUSH
56691: LD_INT 7
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 30
56700: PUSH
56701: LD_INT 8
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PPUSH
56718: CALL_OW 72
56722: ST_TO_ADDR
56723: GO 56726
56725: POP
// if i = 1 then
56726: LD_VAR 0 8
56730: PUSH
56731: LD_INT 1
56733: EQUAL
56734: IFFALSE 56845
// begin tmp := [ ] ;
56736: LD_ADDR_VAR 0 19
56740: PUSH
56741: EMPTY
56742: ST_TO_ADDR
// for j in f do
56743: LD_ADDR_VAR 0 9
56747: PUSH
56748: LD_VAR 0 12
56752: PUSH
56753: FOR_IN
56754: IFFALSE 56827
// if GetBType ( j ) = b_bunker then
56756: LD_VAR 0 9
56760: PPUSH
56761: CALL_OW 266
56765: PUSH
56766: LD_INT 32
56768: EQUAL
56769: IFFALSE 56796
// tmp := Insert ( tmp , 1 , j ) else
56771: LD_ADDR_VAR 0 19
56775: PUSH
56776: LD_VAR 0 19
56780: PPUSH
56781: LD_INT 1
56783: PPUSH
56784: LD_VAR 0 9
56788: PPUSH
56789: CALL_OW 2
56793: ST_TO_ADDR
56794: GO 56825
// tmp := Insert ( tmp , tmp + 1 , j ) ;
56796: LD_ADDR_VAR 0 19
56800: PUSH
56801: LD_VAR 0 19
56805: PPUSH
56806: LD_VAR 0 19
56810: PUSH
56811: LD_INT 1
56813: PLUS
56814: PPUSH
56815: LD_VAR 0 9
56819: PPUSH
56820: CALL_OW 2
56824: ST_TO_ADDR
56825: GO 56753
56827: POP
56828: POP
// if tmp then
56829: LD_VAR 0 19
56833: IFFALSE 56845
// f := tmp ;
56835: LD_ADDR_VAR 0 12
56839: PUSH
56840: LD_VAR 0 19
56844: ST_TO_ADDR
// end ; x := personel [ i ] ;
56845: LD_ADDR_VAR 0 13
56849: PUSH
56850: LD_VAR 0 6
56854: PUSH
56855: LD_VAR 0 8
56859: ARRAY
56860: ST_TO_ADDR
// if x = - 1 then
56861: LD_VAR 0 13
56865: PUSH
56866: LD_INT 1
56868: NEG
56869: EQUAL
56870: IFFALSE 57079
// begin for j in f do
56872: LD_ADDR_VAR 0 9
56876: PUSH
56877: LD_VAR 0 12
56881: PUSH
56882: FOR_IN
56883: IFFALSE 57075
// repeat InitHc ;
56885: CALL_OW 19
// if GetBType ( j ) = b_barracks then
56889: LD_VAR 0 9
56893: PPUSH
56894: CALL_OW 266
56898: PUSH
56899: LD_INT 5
56901: EQUAL
56902: IFFALSE 56972
// begin if UnitsInside ( j ) < 3 then
56904: LD_VAR 0 9
56908: PPUSH
56909: CALL_OW 313
56913: PUSH
56914: LD_INT 3
56916: LESS
56917: IFFALSE 56953
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
56919: LD_INT 0
56921: PPUSH
56922: LD_INT 5
56924: PUSH
56925: LD_INT 8
56927: PUSH
56928: LD_INT 9
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: LIST
56935: PUSH
56936: LD_VAR 0 17
56940: ARRAY
56941: PPUSH
56942: LD_VAR 0 4
56946: PPUSH
56947: CALL_OW 380
56951: GO 56970
// PrepareHuman ( false , i , skill ) ;
56953: LD_INT 0
56955: PPUSH
56956: LD_VAR 0 8
56960: PPUSH
56961: LD_VAR 0 4
56965: PPUSH
56966: CALL_OW 380
// end else
56970: GO 56989
// PrepareHuman ( false , i , skill ) ;
56972: LD_INT 0
56974: PPUSH
56975: LD_VAR 0 8
56979: PPUSH
56980: LD_VAR 0 4
56984: PPUSH
56985: CALL_OW 380
// un := CreateHuman ;
56989: LD_ADDR_VAR 0 14
56993: PUSH
56994: CALL_OW 44
56998: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
56999: LD_ADDR_VAR 0 7
57003: PUSH
57004: LD_VAR 0 7
57008: PPUSH
57009: LD_INT 1
57011: PPUSH
57012: LD_VAR 0 14
57016: PPUSH
57017: CALL_OW 2
57021: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
57022: LD_VAR 0 14
57026: PPUSH
57027: LD_VAR 0 9
57031: PPUSH
57032: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
57036: LD_VAR 0 9
57040: PPUSH
57041: CALL_OW 313
57045: PUSH
57046: LD_INT 6
57048: EQUAL
57049: PUSH
57050: LD_VAR 0 9
57054: PPUSH
57055: CALL_OW 266
57059: PUSH
57060: LD_INT 32
57062: PUSH
57063: LD_INT 31
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: IN
57070: OR
57071: IFFALSE 56885
57073: GO 56882
57075: POP
57076: POP
// end else
57077: GO 57459
// for j = 1 to x do
57079: LD_ADDR_VAR 0 9
57083: PUSH
57084: DOUBLE
57085: LD_INT 1
57087: DEC
57088: ST_TO_ADDR
57089: LD_VAR 0 13
57093: PUSH
57094: FOR_TO
57095: IFFALSE 57457
// begin InitHc ;
57097: CALL_OW 19
// if not f then
57101: LD_VAR 0 12
57105: NOT
57106: IFFALSE 57195
// begin PrepareHuman ( false , i , skill ) ;
57108: LD_INT 0
57110: PPUSH
57111: LD_VAR 0 8
57115: PPUSH
57116: LD_VAR 0 4
57120: PPUSH
57121: CALL_OW 380
// un := CreateHuman ;
57125: LD_ADDR_VAR 0 14
57129: PUSH
57130: CALL_OW 44
57134: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
57135: LD_ADDR_VAR 0 7
57139: PUSH
57140: LD_VAR 0 7
57144: PPUSH
57145: LD_INT 1
57147: PPUSH
57148: LD_VAR 0 14
57152: PPUSH
57153: CALL_OW 2
57157: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
57158: LD_VAR 0 14
57162: PPUSH
57163: LD_VAR 0 1
57167: PPUSH
57168: CALL_OW 250
57172: PPUSH
57173: LD_VAR 0 1
57177: PPUSH
57178: CALL_OW 251
57182: PPUSH
57183: LD_INT 10
57185: PPUSH
57186: LD_INT 0
57188: PPUSH
57189: CALL_OW 50
// continue ;
57193: GO 57094
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
57195: LD_VAR 0 12
57199: PUSH
57200: LD_INT 1
57202: ARRAY
57203: PPUSH
57204: CALL_OW 313
57208: PUSH
57209: LD_VAR 0 12
57213: PUSH
57214: LD_INT 1
57216: ARRAY
57217: PPUSH
57218: CALL_OW 266
57222: PUSH
57223: LD_INT 32
57225: PUSH
57226: LD_INT 31
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: IN
57233: AND
57234: PUSH
57235: LD_VAR 0 12
57239: PUSH
57240: LD_INT 1
57242: ARRAY
57243: PPUSH
57244: CALL_OW 313
57248: PUSH
57249: LD_INT 6
57251: EQUAL
57252: OR
57253: IFFALSE 57273
// f := Delete ( f , 1 ) ;
57255: LD_ADDR_VAR 0 12
57259: PUSH
57260: LD_VAR 0 12
57264: PPUSH
57265: LD_INT 1
57267: PPUSH
57268: CALL_OW 3
57272: ST_TO_ADDR
// if not f then
57273: LD_VAR 0 12
57277: NOT
57278: IFFALSE 57296
// begin x := x + 2 ;
57280: LD_ADDR_VAR 0 13
57284: PUSH
57285: LD_VAR 0 13
57289: PUSH
57290: LD_INT 2
57292: PLUS
57293: ST_TO_ADDR
// continue ;
57294: GO 57094
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
57296: LD_VAR 0 12
57300: PUSH
57301: LD_INT 1
57303: ARRAY
57304: PPUSH
57305: CALL_OW 266
57309: PUSH
57310: LD_INT 5
57312: EQUAL
57313: IFFALSE 57387
// begin if UnitsInside ( f [ 1 ] ) < 3 then
57315: LD_VAR 0 12
57319: PUSH
57320: LD_INT 1
57322: ARRAY
57323: PPUSH
57324: CALL_OW 313
57328: PUSH
57329: LD_INT 3
57331: LESS
57332: IFFALSE 57368
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
57334: LD_INT 0
57336: PPUSH
57337: LD_INT 5
57339: PUSH
57340: LD_INT 8
57342: PUSH
57343: LD_INT 9
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: LIST
57350: PUSH
57351: LD_VAR 0 17
57355: ARRAY
57356: PPUSH
57357: LD_VAR 0 4
57361: PPUSH
57362: CALL_OW 380
57366: GO 57385
// PrepareHuman ( false , i , skill ) ;
57368: LD_INT 0
57370: PPUSH
57371: LD_VAR 0 8
57375: PPUSH
57376: LD_VAR 0 4
57380: PPUSH
57381: CALL_OW 380
// end else
57385: GO 57404
// PrepareHuman ( false , i , skill ) ;
57387: LD_INT 0
57389: PPUSH
57390: LD_VAR 0 8
57394: PPUSH
57395: LD_VAR 0 4
57399: PPUSH
57400: CALL_OW 380
// un := CreateHuman ;
57404: LD_ADDR_VAR 0 14
57408: PUSH
57409: CALL_OW 44
57413: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
57414: LD_ADDR_VAR 0 7
57418: PUSH
57419: LD_VAR 0 7
57423: PPUSH
57424: LD_INT 1
57426: PPUSH
57427: LD_VAR 0 14
57431: PPUSH
57432: CALL_OW 2
57436: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
57437: LD_VAR 0 14
57441: PPUSH
57442: LD_VAR 0 12
57446: PUSH
57447: LD_INT 1
57449: ARRAY
57450: PPUSH
57451: CALL_OW 52
// end ;
57455: GO 57094
57457: POP
57458: POP
// end ;
57459: GO 56396
57461: POP
57462: POP
// result := result ^ buildings ;
57463: LD_ADDR_VAR 0 7
57467: PUSH
57468: LD_VAR 0 7
57472: PUSH
57473: LD_VAR 0 18
57477: ADD
57478: ST_TO_ADDR
// end else
57479: GO 57622
// begin for i = 1 to personel do
57481: LD_ADDR_VAR 0 8
57485: PUSH
57486: DOUBLE
57487: LD_INT 1
57489: DEC
57490: ST_TO_ADDR
57491: LD_VAR 0 6
57495: PUSH
57496: FOR_TO
57497: IFFALSE 57620
// begin if i > 4 then
57499: LD_VAR 0 8
57503: PUSH
57504: LD_INT 4
57506: GREATER
57507: IFFALSE 57511
// break ;
57509: GO 57620
// x := personel [ i ] ;
57511: LD_ADDR_VAR 0 13
57515: PUSH
57516: LD_VAR 0 6
57520: PUSH
57521: LD_VAR 0 8
57525: ARRAY
57526: ST_TO_ADDR
// if x = - 1 then
57527: LD_VAR 0 13
57531: PUSH
57532: LD_INT 1
57534: NEG
57535: EQUAL
57536: IFFALSE 57540
// continue ;
57538: GO 57496
// PrepareHuman ( false , i , skill ) ;
57540: LD_INT 0
57542: PPUSH
57543: LD_VAR 0 8
57547: PPUSH
57548: LD_VAR 0 4
57552: PPUSH
57553: CALL_OW 380
// un := CreateHuman ;
57557: LD_ADDR_VAR 0 14
57561: PUSH
57562: CALL_OW 44
57566: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
57567: LD_VAR 0 14
57571: PPUSH
57572: LD_VAR 0 1
57576: PPUSH
57577: CALL_OW 250
57581: PPUSH
57582: LD_VAR 0 1
57586: PPUSH
57587: CALL_OW 251
57591: PPUSH
57592: LD_INT 10
57594: PPUSH
57595: LD_INT 0
57597: PPUSH
57598: CALL_OW 50
// result := result ^ un ;
57602: LD_ADDR_VAR 0 7
57606: PUSH
57607: LD_VAR 0 7
57611: PUSH
57612: LD_VAR 0 14
57616: ADD
57617: ST_TO_ADDR
// end ;
57618: GO 57496
57620: POP
57621: POP
// end ; end ;
57622: LD_VAR 0 7
57626: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
57627: LD_INT 0
57629: PPUSH
57630: PPUSH
57631: PPUSH
57632: PPUSH
57633: PPUSH
57634: PPUSH
57635: PPUSH
57636: PPUSH
57637: PPUSH
57638: PPUSH
57639: PPUSH
57640: PPUSH
57641: PPUSH
57642: PPUSH
57643: PPUSH
57644: PPUSH
// result := false ;
57645: LD_ADDR_VAR 0 3
57649: PUSH
57650: LD_INT 0
57652: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
57653: LD_VAR 0 1
57657: NOT
57658: PUSH
57659: LD_VAR 0 1
57663: PPUSH
57664: CALL_OW 266
57668: PUSH
57669: LD_INT 32
57671: PUSH
57672: LD_INT 33
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: IN
57679: NOT
57680: OR
57681: IFFALSE 57685
// exit ;
57683: GO 58794
// nat := GetNation ( tower ) ;
57685: LD_ADDR_VAR 0 12
57689: PUSH
57690: LD_VAR 0 1
57694: PPUSH
57695: CALL_OW 248
57699: ST_TO_ADDR
// side := GetSide ( tower ) ;
57700: LD_ADDR_VAR 0 16
57704: PUSH
57705: LD_VAR 0 1
57709: PPUSH
57710: CALL_OW 255
57714: ST_TO_ADDR
// x := GetX ( tower ) ;
57715: LD_ADDR_VAR 0 10
57719: PUSH
57720: LD_VAR 0 1
57724: PPUSH
57725: CALL_OW 250
57729: ST_TO_ADDR
// y := GetY ( tower ) ;
57730: LD_ADDR_VAR 0 11
57734: PUSH
57735: LD_VAR 0 1
57739: PPUSH
57740: CALL_OW 251
57744: ST_TO_ADDR
// if not x or not y then
57745: LD_VAR 0 10
57749: NOT
57750: PUSH
57751: LD_VAR 0 11
57755: NOT
57756: OR
57757: IFFALSE 57761
// exit ;
57759: GO 58794
// weapon := 0 ;
57761: LD_ADDR_VAR 0 18
57765: PUSH
57766: LD_INT 0
57768: ST_TO_ADDR
// fac_list := [ ] ;
57769: LD_ADDR_VAR 0 17
57773: PUSH
57774: EMPTY
57775: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
57776: LD_ADDR_VAR 0 6
57780: PUSH
57781: LD_VAR 0 1
57785: PPUSH
57786: CALL_OW 274
57790: PPUSH
57791: LD_VAR 0 2
57795: PPUSH
57796: LD_INT 0
57798: PPUSH
57799: CALL 55365 0 3
57803: PPUSH
57804: LD_INT 30
57806: PUSH
57807: LD_INT 3
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PPUSH
57814: CALL_OW 72
57818: ST_TO_ADDR
// if not factories then
57819: LD_VAR 0 6
57823: NOT
57824: IFFALSE 57828
// exit ;
57826: GO 58794
// for i in factories do
57828: LD_ADDR_VAR 0 8
57832: PUSH
57833: LD_VAR 0 6
57837: PUSH
57838: FOR_IN
57839: IFFALSE 57864
// fac_list := fac_list union AvailableWeaponList ( i ) ;
57841: LD_ADDR_VAR 0 17
57845: PUSH
57846: LD_VAR 0 17
57850: PUSH
57851: LD_VAR 0 8
57855: PPUSH
57856: CALL_OW 478
57860: UNION
57861: ST_TO_ADDR
57862: GO 57838
57864: POP
57865: POP
// if not fac_list then
57866: LD_VAR 0 17
57870: NOT
57871: IFFALSE 57875
// exit ;
57873: GO 58794
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
57875: LD_ADDR_VAR 0 5
57879: PUSH
57880: LD_INT 4
57882: PUSH
57883: LD_INT 5
57885: PUSH
57886: LD_INT 9
57888: PUSH
57889: LD_INT 10
57891: PUSH
57892: LD_INT 6
57894: PUSH
57895: LD_INT 7
57897: PUSH
57898: LD_INT 11
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 27
57912: PUSH
57913: LD_INT 28
57915: PUSH
57916: LD_INT 26
57918: PUSH
57919: LD_INT 30
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 43
57930: PUSH
57931: LD_INT 44
57933: PUSH
57934: LD_INT 46
57936: PUSH
57937: LD_INT 45
57939: PUSH
57940: LD_INT 47
57942: PUSH
57943: LD_INT 49
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: LIST
57958: PUSH
57959: LD_VAR 0 12
57963: ARRAY
57964: ST_TO_ADDR
// list := list isect fac_list ;
57965: LD_ADDR_VAR 0 5
57969: PUSH
57970: LD_VAR 0 5
57974: PUSH
57975: LD_VAR 0 17
57979: ISECT
57980: ST_TO_ADDR
// if not list then
57981: LD_VAR 0 5
57985: NOT
57986: IFFALSE 57990
// exit ;
57988: GO 58794
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
57990: LD_VAR 0 12
57994: PUSH
57995: LD_INT 3
57997: EQUAL
57998: PUSH
57999: LD_INT 49
58001: PUSH
58002: LD_VAR 0 5
58006: IN
58007: AND
58008: PUSH
58009: LD_INT 31
58011: PPUSH
58012: LD_VAR 0 16
58016: PPUSH
58017: CALL_OW 321
58021: PUSH
58022: LD_INT 2
58024: EQUAL
58025: AND
58026: IFFALSE 58086
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
58028: LD_INT 22
58030: PUSH
58031: LD_VAR 0 16
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 35
58042: PUSH
58043: LD_INT 49
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 91
58052: PUSH
58053: LD_VAR 0 1
58057: PUSH
58058: LD_INT 10
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: LIST
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: LIST
58070: PPUSH
58071: CALL_OW 69
58075: NOT
58076: IFFALSE 58086
// weapon := ru_time_lapser ;
58078: LD_ADDR_VAR 0 18
58082: PUSH
58083: LD_INT 49
58085: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
58086: LD_VAR 0 12
58090: PUSH
58091: LD_INT 1
58093: PUSH
58094: LD_INT 2
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: IN
58101: PUSH
58102: LD_INT 11
58104: PUSH
58105: LD_VAR 0 5
58109: IN
58110: PUSH
58111: LD_INT 30
58113: PUSH
58114: LD_VAR 0 5
58118: IN
58119: OR
58120: AND
58121: PUSH
58122: LD_INT 6
58124: PPUSH
58125: LD_VAR 0 16
58129: PPUSH
58130: CALL_OW 321
58134: PUSH
58135: LD_INT 2
58137: EQUAL
58138: AND
58139: IFFALSE 58304
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
58141: LD_INT 22
58143: PUSH
58144: LD_VAR 0 16
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 2
58155: PUSH
58156: LD_INT 35
58158: PUSH
58159: LD_INT 11
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 35
58168: PUSH
58169: LD_INT 30
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 91
58183: PUSH
58184: LD_VAR 0 1
58188: PUSH
58189: LD_INT 18
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: LIST
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: LIST
58201: PPUSH
58202: CALL_OW 69
58206: NOT
58207: PUSH
58208: LD_INT 22
58210: PUSH
58211: LD_VAR 0 16
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 2
58222: PUSH
58223: LD_INT 30
58225: PUSH
58226: LD_INT 32
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 30
58235: PUSH
58236: LD_INT 33
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 91
58250: PUSH
58251: LD_VAR 0 1
58255: PUSH
58256: LD_INT 12
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: LIST
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: LIST
58268: PUSH
58269: EMPTY
58270: LIST
58271: PPUSH
58272: CALL_OW 69
58276: PUSH
58277: LD_INT 2
58279: GREATER
58280: AND
58281: IFFALSE 58304
// weapon := [ us_radar , ar_radar ] [ nat ] ;
58283: LD_ADDR_VAR 0 18
58287: PUSH
58288: LD_INT 11
58290: PUSH
58291: LD_INT 30
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_VAR 0 12
58302: ARRAY
58303: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
58304: LD_VAR 0 18
58308: NOT
58309: PUSH
58310: LD_INT 40
58312: PPUSH
58313: LD_VAR 0 16
58317: PPUSH
58318: CALL_OW 321
58322: PUSH
58323: LD_INT 2
58325: EQUAL
58326: AND
58327: PUSH
58328: LD_INT 7
58330: PUSH
58331: LD_VAR 0 5
58335: IN
58336: PUSH
58337: LD_INT 28
58339: PUSH
58340: LD_VAR 0 5
58344: IN
58345: OR
58346: PUSH
58347: LD_INT 45
58349: PUSH
58350: LD_VAR 0 5
58354: IN
58355: OR
58356: AND
58357: IFFALSE 58611
// begin hex := GetHexInfo ( x , y ) ;
58359: LD_ADDR_VAR 0 4
58363: PUSH
58364: LD_VAR 0 10
58368: PPUSH
58369: LD_VAR 0 11
58373: PPUSH
58374: CALL_OW 546
58378: ST_TO_ADDR
// if hex [ 1 ] then
58379: LD_VAR 0 4
58383: PUSH
58384: LD_INT 1
58386: ARRAY
58387: IFFALSE 58391
// exit ;
58389: GO 58794
// height := hex [ 2 ] ;
58391: LD_ADDR_VAR 0 15
58395: PUSH
58396: LD_VAR 0 4
58400: PUSH
58401: LD_INT 2
58403: ARRAY
58404: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
58405: LD_ADDR_VAR 0 14
58409: PUSH
58410: LD_INT 0
58412: PUSH
58413: LD_INT 2
58415: PUSH
58416: LD_INT 3
58418: PUSH
58419: LD_INT 5
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: ST_TO_ADDR
// for i in tmp do
58428: LD_ADDR_VAR 0 8
58432: PUSH
58433: LD_VAR 0 14
58437: PUSH
58438: FOR_IN
58439: IFFALSE 58609
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
58441: LD_ADDR_VAR 0 9
58445: PUSH
58446: LD_VAR 0 10
58450: PPUSH
58451: LD_VAR 0 8
58455: PPUSH
58456: LD_INT 5
58458: PPUSH
58459: CALL_OW 272
58463: PUSH
58464: LD_VAR 0 11
58468: PPUSH
58469: LD_VAR 0 8
58473: PPUSH
58474: LD_INT 5
58476: PPUSH
58477: CALL_OW 273
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
58486: LD_VAR 0 9
58490: PUSH
58491: LD_INT 1
58493: ARRAY
58494: PPUSH
58495: LD_VAR 0 9
58499: PUSH
58500: LD_INT 2
58502: ARRAY
58503: PPUSH
58504: CALL_OW 488
58508: IFFALSE 58607
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
58510: LD_ADDR_VAR 0 4
58514: PUSH
58515: LD_VAR 0 9
58519: PUSH
58520: LD_INT 1
58522: ARRAY
58523: PPUSH
58524: LD_VAR 0 9
58528: PUSH
58529: LD_INT 2
58531: ARRAY
58532: PPUSH
58533: CALL_OW 546
58537: ST_TO_ADDR
// if hex [ 1 ] then
58538: LD_VAR 0 4
58542: PUSH
58543: LD_INT 1
58545: ARRAY
58546: IFFALSE 58550
// continue ;
58548: GO 58438
// h := hex [ 2 ] ;
58550: LD_ADDR_VAR 0 13
58554: PUSH
58555: LD_VAR 0 4
58559: PUSH
58560: LD_INT 2
58562: ARRAY
58563: ST_TO_ADDR
// if h + 7 < height then
58564: LD_VAR 0 13
58568: PUSH
58569: LD_INT 7
58571: PLUS
58572: PUSH
58573: LD_VAR 0 15
58577: LESS
58578: IFFALSE 58607
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
58580: LD_ADDR_VAR 0 18
58584: PUSH
58585: LD_INT 7
58587: PUSH
58588: LD_INT 28
58590: PUSH
58591: LD_INT 45
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: LIST
58598: PUSH
58599: LD_VAR 0 12
58603: ARRAY
58604: ST_TO_ADDR
// break ;
58605: GO 58609
// end ; end ; end ;
58607: GO 58438
58609: POP
58610: POP
// end ; if not weapon then
58611: LD_VAR 0 18
58615: NOT
58616: IFFALSE 58676
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
58618: LD_ADDR_VAR 0 5
58622: PUSH
58623: LD_VAR 0 5
58627: PUSH
58628: LD_INT 11
58630: PUSH
58631: LD_INT 30
58633: PUSH
58634: LD_INT 49
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: LIST
58641: DIFF
58642: ST_TO_ADDR
// if not list then
58643: LD_VAR 0 5
58647: NOT
58648: IFFALSE 58652
// exit ;
58650: GO 58794
// weapon := list [ rand ( 1 , list ) ] ;
58652: LD_ADDR_VAR 0 18
58656: PUSH
58657: LD_VAR 0 5
58661: PUSH
58662: LD_INT 1
58664: PPUSH
58665: LD_VAR 0 5
58669: PPUSH
58670: CALL_OW 12
58674: ARRAY
58675: ST_TO_ADDR
// end ; if weapon then
58676: LD_VAR 0 18
58680: IFFALSE 58794
// begin tmp := CostOfWeapon ( weapon ) ;
58682: LD_ADDR_VAR 0 14
58686: PUSH
58687: LD_VAR 0 18
58691: PPUSH
58692: CALL_OW 451
58696: ST_TO_ADDR
// j := GetBase ( tower ) ;
58697: LD_ADDR_VAR 0 9
58701: PUSH
58702: LD_VAR 0 1
58706: PPUSH
58707: CALL_OW 274
58711: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
58712: LD_VAR 0 9
58716: PPUSH
58717: LD_INT 1
58719: PPUSH
58720: CALL_OW 275
58724: PUSH
58725: LD_VAR 0 14
58729: PUSH
58730: LD_INT 1
58732: ARRAY
58733: GREATEREQUAL
58734: PUSH
58735: LD_VAR 0 9
58739: PPUSH
58740: LD_INT 2
58742: PPUSH
58743: CALL_OW 275
58747: PUSH
58748: LD_VAR 0 14
58752: PUSH
58753: LD_INT 2
58755: ARRAY
58756: GREATEREQUAL
58757: AND
58758: PUSH
58759: LD_VAR 0 9
58763: PPUSH
58764: LD_INT 3
58766: PPUSH
58767: CALL_OW 275
58771: PUSH
58772: LD_VAR 0 14
58776: PUSH
58777: LD_INT 3
58779: ARRAY
58780: GREATEREQUAL
58781: AND
58782: IFFALSE 58794
// result := weapon ;
58784: LD_ADDR_VAR 0 3
58788: PUSH
58789: LD_VAR 0 18
58793: ST_TO_ADDR
// end ; end ;
58794: LD_VAR 0 3
58798: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
58799: LD_INT 0
58801: PPUSH
58802: PPUSH
// result := true ;
58803: LD_ADDR_VAR 0 3
58807: PUSH
58808: LD_INT 1
58810: ST_TO_ADDR
// if array1 = array2 then
58811: LD_VAR 0 1
58815: PUSH
58816: LD_VAR 0 2
58820: EQUAL
58821: IFFALSE 58881
// begin for i = 1 to array1 do
58823: LD_ADDR_VAR 0 4
58827: PUSH
58828: DOUBLE
58829: LD_INT 1
58831: DEC
58832: ST_TO_ADDR
58833: LD_VAR 0 1
58837: PUSH
58838: FOR_TO
58839: IFFALSE 58877
// if array1 [ i ] <> array2 [ i ] then
58841: LD_VAR 0 1
58845: PUSH
58846: LD_VAR 0 4
58850: ARRAY
58851: PUSH
58852: LD_VAR 0 2
58856: PUSH
58857: LD_VAR 0 4
58861: ARRAY
58862: NONEQUAL
58863: IFFALSE 58875
// begin result := false ;
58865: LD_ADDR_VAR 0 3
58869: PUSH
58870: LD_INT 0
58872: ST_TO_ADDR
// break ;
58873: GO 58877
// end ;
58875: GO 58838
58877: POP
58878: POP
// end else
58879: GO 58889
// result := false ;
58881: LD_ADDR_VAR 0 3
58885: PUSH
58886: LD_INT 0
58888: ST_TO_ADDR
// end ;
58889: LD_VAR 0 3
58893: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
58894: LD_INT 0
58896: PPUSH
58897: PPUSH
// if not array1 or not array2 then
58898: LD_VAR 0 1
58902: NOT
58903: PUSH
58904: LD_VAR 0 2
58908: NOT
58909: OR
58910: IFFALSE 58914
// exit ;
58912: GO 58978
// result := true ;
58914: LD_ADDR_VAR 0 3
58918: PUSH
58919: LD_INT 1
58921: ST_TO_ADDR
// for i = 1 to array1 do
58922: LD_ADDR_VAR 0 4
58926: PUSH
58927: DOUBLE
58928: LD_INT 1
58930: DEC
58931: ST_TO_ADDR
58932: LD_VAR 0 1
58936: PUSH
58937: FOR_TO
58938: IFFALSE 58976
// if array1 [ i ] <> array2 [ i ] then
58940: LD_VAR 0 1
58944: PUSH
58945: LD_VAR 0 4
58949: ARRAY
58950: PUSH
58951: LD_VAR 0 2
58955: PUSH
58956: LD_VAR 0 4
58960: ARRAY
58961: NONEQUAL
58962: IFFALSE 58974
// begin result := false ;
58964: LD_ADDR_VAR 0 3
58968: PUSH
58969: LD_INT 0
58971: ST_TO_ADDR
// break ;
58972: GO 58976
// end ;
58974: GO 58937
58976: POP
58977: POP
// end ;
58978: LD_VAR 0 3
58982: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
58983: LD_INT 0
58985: PPUSH
58986: PPUSH
58987: PPUSH
// pom := GetBase ( fac ) ;
58988: LD_ADDR_VAR 0 5
58992: PUSH
58993: LD_VAR 0 1
58997: PPUSH
58998: CALL_OW 274
59002: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
59003: LD_ADDR_VAR 0 4
59007: PUSH
59008: LD_VAR 0 2
59012: PUSH
59013: LD_INT 1
59015: ARRAY
59016: PPUSH
59017: LD_VAR 0 2
59021: PUSH
59022: LD_INT 2
59024: ARRAY
59025: PPUSH
59026: LD_VAR 0 2
59030: PUSH
59031: LD_INT 3
59033: ARRAY
59034: PPUSH
59035: LD_VAR 0 2
59039: PUSH
59040: LD_INT 4
59042: ARRAY
59043: PPUSH
59044: CALL_OW 449
59048: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
59049: LD_ADDR_VAR 0 3
59053: PUSH
59054: LD_VAR 0 5
59058: PPUSH
59059: LD_INT 1
59061: PPUSH
59062: CALL_OW 275
59066: PUSH
59067: LD_VAR 0 4
59071: PUSH
59072: LD_INT 1
59074: ARRAY
59075: GREATEREQUAL
59076: PUSH
59077: LD_VAR 0 5
59081: PPUSH
59082: LD_INT 2
59084: PPUSH
59085: CALL_OW 275
59089: PUSH
59090: LD_VAR 0 4
59094: PUSH
59095: LD_INT 2
59097: ARRAY
59098: GREATEREQUAL
59099: AND
59100: PUSH
59101: LD_VAR 0 5
59105: PPUSH
59106: LD_INT 3
59108: PPUSH
59109: CALL_OW 275
59113: PUSH
59114: LD_VAR 0 4
59118: PUSH
59119: LD_INT 3
59121: ARRAY
59122: GREATEREQUAL
59123: AND
59124: ST_TO_ADDR
// end ;
59125: LD_VAR 0 3
59129: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
59130: LD_INT 0
59132: PPUSH
59133: PPUSH
59134: PPUSH
59135: PPUSH
// pom := GetBase ( building ) ;
59136: LD_ADDR_VAR 0 3
59140: PUSH
59141: LD_VAR 0 1
59145: PPUSH
59146: CALL_OW 274
59150: ST_TO_ADDR
// if not pom then
59151: LD_VAR 0 3
59155: NOT
59156: IFFALSE 59160
// exit ;
59158: GO 59330
// btype := GetBType ( building ) ;
59160: LD_ADDR_VAR 0 5
59164: PUSH
59165: LD_VAR 0 1
59169: PPUSH
59170: CALL_OW 266
59174: ST_TO_ADDR
// if btype = b_armoury then
59175: LD_VAR 0 5
59179: PUSH
59180: LD_INT 4
59182: EQUAL
59183: IFFALSE 59193
// btype := b_barracks ;
59185: LD_ADDR_VAR 0 5
59189: PUSH
59190: LD_INT 5
59192: ST_TO_ADDR
// if btype = b_depot then
59193: LD_VAR 0 5
59197: PUSH
59198: LD_INT 0
59200: EQUAL
59201: IFFALSE 59211
// btype := b_warehouse ;
59203: LD_ADDR_VAR 0 5
59207: PUSH
59208: LD_INT 1
59210: ST_TO_ADDR
// if btype = b_workshop then
59211: LD_VAR 0 5
59215: PUSH
59216: LD_INT 2
59218: EQUAL
59219: IFFALSE 59229
// btype := b_factory ;
59221: LD_ADDR_VAR 0 5
59225: PUSH
59226: LD_INT 3
59228: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
59229: LD_ADDR_VAR 0 4
59233: PUSH
59234: LD_VAR 0 5
59238: PPUSH
59239: LD_VAR 0 1
59243: PPUSH
59244: CALL_OW 248
59248: PPUSH
59249: CALL_OW 450
59253: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
59254: LD_ADDR_VAR 0 2
59258: PUSH
59259: LD_VAR 0 3
59263: PPUSH
59264: LD_INT 1
59266: PPUSH
59267: CALL_OW 275
59271: PUSH
59272: LD_VAR 0 4
59276: PUSH
59277: LD_INT 1
59279: ARRAY
59280: GREATEREQUAL
59281: PUSH
59282: LD_VAR 0 3
59286: PPUSH
59287: LD_INT 2
59289: PPUSH
59290: CALL_OW 275
59294: PUSH
59295: LD_VAR 0 4
59299: PUSH
59300: LD_INT 2
59302: ARRAY
59303: GREATEREQUAL
59304: AND
59305: PUSH
59306: LD_VAR 0 3
59310: PPUSH
59311: LD_INT 3
59313: PPUSH
59314: CALL_OW 275
59318: PUSH
59319: LD_VAR 0 4
59323: PUSH
59324: LD_INT 3
59326: ARRAY
59327: GREATEREQUAL
59328: AND
59329: ST_TO_ADDR
// end ;
59330: LD_VAR 0 2
59334: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
59335: LD_INT 0
59337: PPUSH
59338: PPUSH
59339: PPUSH
// pom := GetBase ( building ) ;
59340: LD_ADDR_VAR 0 4
59344: PUSH
59345: LD_VAR 0 1
59349: PPUSH
59350: CALL_OW 274
59354: ST_TO_ADDR
// if not pom then
59355: LD_VAR 0 4
59359: NOT
59360: IFFALSE 59364
// exit ;
59362: GO 59465
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
59364: LD_ADDR_VAR 0 5
59368: PUSH
59369: LD_VAR 0 2
59373: PPUSH
59374: LD_VAR 0 1
59378: PPUSH
59379: CALL_OW 248
59383: PPUSH
59384: CALL_OW 450
59388: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
59389: LD_ADDR_VAR 0 3
59393: PUSH
59394: LD_VAR 0 4
59398: PPUSH
59399: LD_INT 1
59401: PPUSH
59402: CALL_OW 275
59406: PUSH
59407: LD_VAR 0 5
59411: PUSH
59412: LD_INT 1
59414: ARRAY
59415: GREATEREQUAL
59416: PUSH
59417: LD_VAR 0 4
59421: PPUSH
59422: LD_INT 2
59424: PPUSH
59425: CALL_OW 275
59429: PUSH
59430: LD_VAR 0 5
59434: PUSH
59435: LD_INT 2
59437: ARRAY
59438: GREATEREQUAL
59439: AND
59440: PUSH
59441: LD_VAR 0 4
59445: PPUSH
59446: LD_INT 3
59448: PPUSH
59449: CALL_OW 275
59453: PUSH
59454: LD_VAR 0 5
59458: PUSH
59459: LD_INT 3
59461: ARRAY
59462: GREATEREQUAL
59463: AND
59464: ST_TO_ADDR
// end ;
59465: LD_VAR 0 3
59469: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
59470: LD_INT 0
59472: PPUSH
59473: PPUSH
59474: PPUSH
59475: PPUSH
59476: PPUSH
59477: PPUSH
59478: PPUSH
59479: PPUSH
59480: PPUSH
59481: PPUSH
59482: PPUSH
// result := false ;
59483: LD_ADDR_VAR 0 8
59487: PUSH
59488: LD_INT 0
59490: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
59491: LD_VAR 0 5
59495: NOT
59496: PUSH
59497: LD_VAR 0 1
59501: NOT
59502: OR
59503: PUSH
59504: LD_VAR 0 2
59508: NOT
59509: OR
59510: PUSH
59511: LD_VAR 0 3
59515: NOT
59516: OR
59517: IFFALSE 59521
// exit ;
59519: GO 60335
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
59521: LD_ADDR_VAR 0 14
59525: PUSH
59526: LD_VAR 0 1
59530: PPUSH
59531: LD_VAR 0 2
59535: PPUSH
59536: LD_VAR 0 3
59540: PPUSH
59541: LD_VAR 0 4
59545: PPUSH
59546: LD_VAR 0 5
59550: PUSH
59551: LD_INT 1
59553: ARRAY
59554: PPUSH
59555: CALL_OW 248
59559: PPUSH
59560: LD_INT 0
59562: PPUSH
59563: CALL 61572 0 6
59567: ST_TO_ADDR
// if not hexes then
59568: LD_VAR 0 14
59572: NOT
59573: IFFALSE 59577
// exit ;
59575: GO 60335
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59577: LD_ADDR_VAR 0 17
59581: PUSH
59582: LD_VAR 0 5
59586: PPUSH
59587: LD_INT 22
59589: PUSH
59590: LD_VAR 0 13
59594: PPUSH
59595: CALL_OW 255
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 2
59606: PUSH
59607: LD_INT 30
59609: PUSH
59610: LD_INT 0
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 30
59619: PUSH
59620: LD_INT 1
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: LIST
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PPUSH
59636: CALL_OW 72
59640: ST_TO_ADDR
// for i = 1 to hexes do
59641: LD_ADDR_VAR 0 9
59645: PUSH
59646: DOUBLE
59647: LD_INT 1
59649: DEC
59650: ST_TO_ADDR
59651: LD_VAR 0 14
59655: PUSH
59656: FOR_TO
59657: IFFALSE 60333
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59659: LD_ADDR_VAR 0 13
59663: PUSH
59664: LD_VAR 0 14
59668: PUSH
59669: LD_VAR 0 9
59673: ARRAY
59674: PUSH
59675: LD_INT 1
59677: ARRAY
59678: PPUSH
59679: LD_VAR 0 14
59683: PUSH
59684: LD_VAR 0 9
59688: ARRAY
59689: PUSH
59690: LD_INT 2
59692: ARRAY
59693: PPUSH
59694: CALL_OW 428
59698: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
59699: LD_VAR 0 14
59703: PUSH
59704: LD_VAR 0 9
59708: ARRAY
59709: PUSH
59710: LD_INT 1
59712: ARRAY
59713: PPUSH
59714: LD_VAR 0 14
59718: PUSH
59719: LD_VAR 0 9
59723: ARRAY
59724: PUSH
59725: LD_INT 2
59727: ARRAY
59728: PPUSH
59729: CALL_OW 351
59733: PUSH
59734: LD_VAR 0 14
59738: PUSH
59739: LD_VAR 0 9
59743: ARRAY
59744: PUSH
59745: LD_INT 1
59747: ARRAY
59748: PPUSH
59749: LD_VAR 0 14
59753: PUSH
59754: LD_VAR 0 9
59758: ARRAY
59759: PUSH
59760: LD_INT 2
59762: ARRAY
59763: PPUSH
59764: CALL_OW 488
59768: NOT
59769: OR
59770: PUSH
59771: LD_VAR 0 13
59775: PPUSH
59776: CALL_OW 247
59780: PUSH
59781: LD_INT 3
59783: EQUAL
59784: OR
59785: IFFALSE 59791
// exit ;
59787: POP
59788: POP
59789: GO 60335
// if not tmp then
59791: LD_VAR 0 13
59795: NOT
59796: IFFALSE 59800
// continue ;
59798: GO 59656
// result := true ;
59800: LD_ADDR_VAR 0 8
59804: PUSH
59805: LD_INT 1
59807: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
59808: LD_VAR 0 6
59812: PUSH
59813: LD_VAR 0 13
59817: PPUSH
59818: CALL_OW 247
59822: PUSH
59823: LD_INT 2
59825: EQUAL
59826: AND
59827: PUSH
59828: LD_VAR 0 13
59832: PPUSH
59833: CALL_OW 263
59837: PUSH
59838: LD_INT 1
59840: EQUAL
59841: AND
59842: IFFALSE 60006
// begin if IsDrivenBy ( tmp ) then
59844: LD_VAR 0 13
59848: PPUSH
59849: CALL_OW 311
59853: IFFALSE 59857
// continue ;
59855: GO 59656
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
59857: LD_VAR 0 6
59861: PPUSH
59862: LD_INT 3
59864: PUSH
59865: LD_INT 60
59867: PUSH
59868: EMPTY
59869: LIST
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 3
59877: PUSH
59878: LD_INT 55
59880: PUSH
59881: EMPTY
59882: LIST
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PPUSH
59892: CALL_OW 72
59896: IFFALSE 60004
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
59898: LD_ADDR_VAR 0 18
59902: PUSH
59903: LD_VAR 0 6
59907: PPUSH
59908: LD_INT 3
59910: PUSH
59911: LD_INT 60
59913: PUSH
59914: EMPTY
59915: LIST
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 3
59923: PUSH
59924: LD_INT 55
59926: PUSH
59927: EMPTY
59928: LIST
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PPUSH
59938: CALL_OW 72
59942: PUSH
59943: LD_INT 1
59945: ARRAY
59946: ST_TO_ADDR
// if IsInUnit ( driver ) then
59947: LD_VAR 0 18
59951: PPUSH
59952: CALL_OW 310
59956: IFFALSE 59967
// ComExit ( driver ) ;
59958: LD_VAR 0 18
59962: PPUSH
59963: CALL 84756 0 1
// AddComEnterUnit ( driver , tmp ) ;
59967: LD_VAR 0 18
59971: PPUSH
59972: LD_VAR 0 13
59976: PPUSH
59977: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
59981: LD_VAR 0 18
59985: PPUSH
59986: LD_VAR 0 7
59990: PPUSH
59991: CALL_OW 173
// AddComExitVehicle ( driver ) ;
59995: LD_VAR 0 18
59999: PPUSH
60000: CALL_OW 181
// end ; continue ;
60004: GO 59656
// end ; if not cleaners or not tmp in cleaners then
60006: LD_VAR 0 6
60010: NOT
60011: PUSH
60012: LD_VAR 0 13
60016: PUSH
60017: LD_VAR 0 6
60021: IN
60022: NOT
60023: OR
60024: IFFALSE 60331
// begin if dep then
60026: LD_VAR 0 17
60030: IFFALSE 60166
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
60032: LD_ADDR_VAR 0 16
60036: PUSH
60037: LD_VAR 0 17
60041: PUSH
60042: LD_INT 1
60044: ARRAY
60045: PPUSH
60046: CALL_OW 250
60050: PPUSH
60051: LD_VAR 0 17
60055: PUSH
60056: LD_INT 1
60058: ARRAY
60059: PPUSH
60060: CALL_OW 254
60064: PPUSH
60065: LD_INT 5
60067: PPUSH
60068: CALL_OW 272
60072: PUSH
60073: LD_VAR 0 17
60077: PUSH
60078: LD_INT 1
60080: ARRAY
60081: PPUSH
60082: CALL_OW 251
60086: PPUSH
60087: LD_VAR 0 17
60091: PUSH
60092: LD_INT 1
60094: ARRAY
60095: PPUSH
60096: CALL_OW 254
60100: PPUSH
60101: LD_INT 5
60103: PPUSH
60104: CALL_OW 273
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
60113: LD_VAR 0 16
60117: PUSH
60118: LD_INT 1
60120: ARRAY
60121: PPUSH
60122: LD_VAR 0 16
60126: PUSH
60127: LD_INT 2
60129: ARRAY
60130: PPUSH
60131: CALL_OW 488
60135: IFFALSE 60166
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
60137: LD_VAR 0 13
60141: PPUSH
60142: LD_VAR 0 16
60146: PUSH
60147: LD_INT 1
60149: ARRAY
60150: PPUSH
60151: LD_VAR 0 16
60155: PUSH
60156: LD_INT 2
60158: ARRAY
60159: PPUSH
60160: CALL_OW 111
// continue ;
60164: GO 59656
// end ; end ; r := GetDir ( tmp ) ;
60166: LD_ADDR_VAR 0 15
60170: PUSH
60171: LD_VAR 0 13
60175: PPUSH
60176: CALL_OW 254
60180: ST_TO_ADDR
// if r = 5 then
60181: LD_VAR 0 15
60185: PUSH
60186: LD_INT 5
60188: EQUAL
60189: IFFALSE 60199
// r := 0 ;
60191: LD_ADDR_VAR 0 15
60195: PUSH
60196: LD_INT 0
60198: ST_TO_ADDR
// for j = r to 5 do
60199: LD_ADDR_VAR 0 10
60203: PUSH
60204: DOUBLE
60205: LD_VAR 0 15
60209: DEC
60210: ST_TO_ADDR
60211: LD_INT 5
60213: PUSH
60214: FOR_TO
60215: IFFALSE 60329
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
60217: LD_ADDR_VAR 0 11
60221: PUSH
60222: LD_VAR 0 13
60226: PPUSH
60227: CALL_OW 250
60231: PPUSH
60232: LD_VAR 0 10
60236: PPUSH
60237: LD_INT 2
60239: PPUSH
60240: CALL_OW 272
60244: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
60245: LD_ADDR_VAR 0 12
60249: PUSH
60250: LD_VAR 0 13
60254: PPUSH
60255: CALL_OW 251
60259: PPUSH
60260: LD_VAR 0 10
60264: PPUSH
60265: LD_INT 2
60267: PPUSH
60268: CALL_OW 273
60272: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
60273: LD_VAR 0 11
60277: PPUSH
60278: LD_VAR 0 12
60282: PPUSH
60283: CALL_OW 488
60287: PUSH
60288: LD_VAR 0 11
60292: PPUSH
60293: LD_VAR 0 12
60297: PPUSH
60298: CALL_OW 428
60302: NOT
60303: AND
60304: IFFALSE 60327
// begin ComMoveXY ( tmp , _x , _y ) ;
60306: LD_VAR 0 13
60310: PPUSH
60311: LD_VAR 0 11
60315: PPUSH
60316: LD_VAR 0 12
60320: PPUSH
60321: CALL_OW 111
// break ;
60325: GO 60329
// end ; end ;
60327: GO 60214
60329: POP
60330: POP
// end ; end ;
60331: GO 59656
60333: POP
60334: POP
// end ;
60335: LD_VAR 0 8
60339: RET
// export function BuildingTechInvented ( side , btype ) ; begin
60340: LD_INT 0
60342: PPUSH
// result := true ;
60343: LD_ADDR_VAR 0 3
60347: PUSH
60348: LD_INT 1
60350: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
60351: LD_VAR 0 2
60355: PUSH
60356: LD_INT 24
60358: DOUBLE
60359: EQUAL
60360: IFTRUE 60370
60362: LD_INT 33
60364: DOUBLE
60365: EQUAL
60366: IFTRUE 60370
60368: GO 60395
60370: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
60371: LD_ADDR_VAR 0 3
60375: PUSH
60376: LD_INT 32
60378: PPUSH
60379: LD_VAR 0 1
60383: PPUSH
60384: CALL_OW 321
60388: PUSH
60389: LD_INT 2
60391: EQUAL
60392: ST_TO_ADDR
60393: GO 60715
60395: LD_INT 20
60397: DOUBLE
60398: EQUAL
60399: IFTRUE 60403
60401: GO 60428
60403: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
60404: LD_ADDR_VAR 0 3
60408: PUSH
60409: LD_INT 6
60411: PPUSH
60412: LD_VAR 0 1
60416: PPUSH
60417: CALL_OW 321
60421: PUSH
60422: LD_INT 2
60424: EQUAL
60425: ST_TO_ADDR
60426: GO 60715
60428: LD_INT 22
60430: DOUBLE
60431: EQUAL
60432: IFTRUE 60442
60434: LD_INT 36
60436: DOUBLE
60437: EQUAL
60438: IFTRUE 60442
60440: GO 60467
60442: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
60443: LD_ADDR_VAR 0 3
60447: PUSH
60448: LD_INT 15
60450: PPUSH
60451: LD_VAR 0 1
60455: PPUSH
60456: CALL_OW 321
60460: PUSH
60461: LD_INT 2
60463: EQUAL
60464: ST_TO_ADDR
60465: GO 60715
60467: LD_INT 30
60469: DOUBLE
60470: EQUAL
60471: IFTRUE 60475
60473: GO 60500
60475: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
60476: LD_ADDR_VAR 0 3
60480: PUSH
60481: LD_INT 20
60483: PPUSH
60484: LD_VAR 0 1
60488: PPUSH
60489: CALL_OW 321
60493: PUSH
60494: LD_INT 2
60496: EQUAL
60497: ST_TO_ADDR
60498: GO 60715
60500: LD_INT 28
60502: DOUBLE
60503: EQUAL
60504: IFTRUE 60514
60506: LD_INT 21
60508: DOUBLE
60509: EQUAL
60510: IFTRUE 60514
60512: GO 60539
60514: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
60515: LD_ADDR_VAR 0 3
60519: PUSH
60520: LD_INT 21
60522: PPUSH
60523: LD_VAR 0 1
60527: PPUSH
60528: CALL_OW 321
60532: PUSH
60533: LD_INT 2
60535: EQUAL
60536: ST_TO_ADDR
60537: GO 60715
60539: LD_INT 16
60541: DOUBLE
60542: EQUAL
60543: IFTRUE 60547
60545: GO 60574
60547: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
60548: LD_ADDR_VAR 0 3
60552: PUSH
60553: LD_EXP 81
60557: PPUSH
60558: LD_VAR 0 1
60562: PPUSH
60563: CALL_OW 321
60567: PUSH
60568: LD_INT 2
60570: EQUAL
60571: ST_TO_ADDR
60572: GO 60715
60574: LD_INT 19
60576: DOUBLE
60577: EQUAL
60578: IFTRUE 60588
60580: LD_INT 23
60582: DOUBLE
60583: EQUAL
60584: IFTRUE 60588
60586: GO 60615
60588: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
60589: LD_ADDR_VAR 0 3
60593: PUSH
60594: LD_EXP 80
60598: PPUSH
60599: LD_VAR 0 1
60603: PPUSH
60604: CALL_OW 321
60608: PUSH
60609: LD_INT 2
60611: EQUAL
60612: ST_TO_ADDR
60613: GO 60715
60615: LD_INT 17
60617: DOUBLE
60618: EQUAL
60619: IFTRUE 60623
60621: GO 60648
60623: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
60624: LD_ADDR_VAR 0 3
60628: PUSH
60629: LD_INT 39
60631: PPUSH
60632: LD_VAR 0 1
60636: PPUSH
60637: CALL_OW 321
60641: PUSH
60642: LD_INT 2
60644: EQUAL
60645: ST_TO_ADDR
60646: GO 60715
60648: LD_INT 18
60650: DOUBLE
60651: EQUAL
60652: IFTRUE 60656
60654: GO 60681
60656: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
60657: LD_ADDR_VAR 0 3
60661: PUSH
60662: LD_INT 40
60664: PPUSH
60665: LD_VAR 0 1
60669: PPUSH
60670: CALL_OW 321
60674: PUSH
60675: LD_INT 2
60677: EQUAL
60678: ST_TO_ADDR
60679: GO 60715
60681: LD_INT 27
60683: DOUBLE
60684: EQUAL
60685: IFTRUE 60689
60687: GO 60714
60689: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
60690: LD_ADDR_VAR 0 3
60694: PUSH
60695: LD_INT 35
60697: PPUSH
60698: LD_VAR 0 1
60702: PPUSH
60703: CALL_OW 321
60707: PUSH
60708: LD_INT 2
60710: EQUAL
60711: ST_TO_ADDR
60712: GO 60715
60714: POP
// end ;
60715: LD_VAR 0 3
60719: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
60720: LD_INT 0
60722: PPUSH
60723: PPUSH
60724: PPUSH
60725: PPUSH
60726: PPUSH
60727: PPUSH
60728: PPUSH
60729: PPUSH
60730: PPUSH
60731: PPUSH
60732: PPUSH
// result := false ;
60733: LD_ADDR_VAR 0 6
60737: PUSH
60738: LD_INT 0
60740: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
60741: LD_VAR 0 1
60745: NOT
60746: PUSH
60747: LD_VAR 0 1
60751: PPUSH
60752: CALL_OW 266
60756: PUSH
60757: LD_INT 0
60759: PUSH
60760: LD_INT 1
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: IN
60767: NOT
60768: OR
60769: PUSH
60770: LD_VAR 0 2
60774: NOT
60775: OR
60776: PUSH
60777: LD_VAR 0 5
60781: PUSH
60782: LD_INT 0
60784: PUSH
60785: LD_INT 1
60787: PUSH
60788: LD_INT 2
60790: PUSH
60791: LD_INT 3
60793: PUSH
60794: LD_INT 4
60796: PUSH
60797: LD_INT 5
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: IN
60808: NOT
60809: OR
60810: PUSH
60811: LD_VAR 0 3
60815: PPUSH
60816: LD_VAR 0 4
60820: PPUSH
60821: CALL_OW 488
60825: NOT
60826: OR
60827: IFFALSE 60831
// exit ;
60829: GO 61567
// side := GetSide ( depot ) ;
60831: LD_ADDR_VAR 0 9
60835: PUSH
60836: LD_VAR 0 1
60840: PPUSH
60841: CALL_OW 255
60845: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
60846: LD_VAR 0 9
60850: PPUSH
60851: LD_VAR 0 2
60855: PPUSH
60856: CALL 60340 0 2
60860: NOT
60861: IFFALSE 60865
// exit ;
60863: GO 61567
// pom := GetBase ( depot ) ;
60865: LD_ADDR_VAR 0 10
60869: PUSH
60870: LD_VAR 0 1
60874: PPUSH
60875: CALL_OW 274
60879: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
60880: LD_ADDR_VAR 0 11
60884: PUSH
60885: LD_VAR 0 2
60889: PPUSH
60890: LD_VAR 0 1
60894: PPUSH
60895: CALL_OW 248
60899: PPUSH
60900: CALL_OW 450
60904: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
60905: LD_VAR 0 10
60909: PPUSH
60910: LD_INT 1
60912: PPUSH
60913: CALL_OW 275
60917: PUSH
60918: LD_VAR 0 11
60922: PUSH
60923: LD_INT 1
60925: ARRAY
60926: GREATEREQUAL
60927: PUSH
60928: LD_VAR 0 10
60932: PPUSH
60933: LD_INT 2
60935: PPUSH
60936: CALL_OW 275
60940: PUSH
60941: LD_VAR 0 11
60945: PUSH
60946: LD_INT 2
60948: ARRAY
60949: GREATEREQUAL
60950: AND
60951: PUSH
60952: LD_VAR 0 10
60956: PPUSH
60957: LD_INT 3
60959: PPUSH
60960: CALL_OW 275
60964: PUSH
60965: LD_VAR 0 11
60969: PUSH
60970: LD_INT 3
60972: ARRAY
60973: GREATEREQUAL
60974: AND
60975: NOT
60976: IFFALSE 60980
// exit ;
60978: GO 61567
// if GetBType ( depot ) = b_depot then
60980: LD_VAR 0 1
60984: PPUSH
60985: CALL_OW 266
60989: PUSH
60990: LD_INT 0
60992: EQUAL
60993: IFFALSE 61005
// dist := 28 else
60995: LD_ADDR_VAR 0 14
60999: PUSH
61000: LD_INT 28
61002: ST_TO_ADDR
61003: GO 61013
// dist := 36 ;
61005: LD_ADDR_VAR 0 14
61009: PUSH
61010: LD_INT 36
61012: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
61013: LD_VAR 0 1
61017: PPUSH
61018: LD_VAR 0 3
61022: PPUSH
61023: LD_VAR 0 4
61027: PPUSH
61028: CALL_OW 297
61032: PUSH
61033: LD_VAR 0 14
61037: GREATER
61038: IFFALSE 61042
// exit ;
61040: GO 61567
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
61042: LD_ADDR_VAR 0 12
61046: PUSH
61047: LD_VAR 0 2
61051: PPUSH
61052: LD_VAR 0 3
61056: PPUSH
61057: LD_VAR 0 4
61061: PPUSH
61062: LD_VAR 0 5
61066: PPUSH
61067: LD_VAR 0 1
61071: PPUSH
61072: CALL_OW 248
61076: PPUSH
61077: LD_INT 0
61079: PPUSH
61080: CALL 61572 0 6
61084: ST_TO_ADDR
// if not hexes then
61085: LD_VAR 0 12
61089: NOT
61090: IFFALSE 61094
// exit ;
61092: GO 61567
// hex := GetHexInfo ( x , y ) ;
61094: LD_ADDR_VAR 0 15
61098: PUSH
61099: LD_VAR 0 3
61103: PPUSH
61104: LD_VAR 0 4
61108: PPUSH
61109: CALL_OW 546
61113: ST_TO_ADDR
// if hex [ 1 ] then
61114: LD_VAR 0 15
61118: PUSH
61119: LD_INT 1
61121: ARRAY
61122: IFFALSE 61126
// exit ;
61124: GO 61567
// height := hex [ 2 ] ;
61126: LD_ADDR_VAR 0 13
61130: PUSH
61131: LD_VAR 0 15
61135: PUSH
61136: LD_INT 2
61138: ARRAY
61139: ST_TO_ADDR
// for i = 1 to hexes do
61140: LD_ADDR_VAR 0 7
61144: PUSH
61145: DOUBLE
61146: LD_INT 1
61148: DEC
61149: ST_TO_ADDR
61150: LD_VAR 0 12
61154: PUSH
61155: FOR_TO
61156: IFFALSE 61486
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
61158: LD_VAR 0 12
61162: PUSH
61163: LD_VAR 0 7
61167: ARRAY
61168: PUSH
61169: LD_INT 1
61171: ARRAY
61172: PPUSH
61173: LD_VAR 0 12
61177: PUSH
61178: LD_VAR 0 7
61182: ARRAY
61183: PUSH
61184: LD_INT 2
61186: ARRAY
61187: PPUSH
61188: CALL_OW 488
61192: NOT
61193: PUSH
61194: LD_VAR 0 12
61198: PUSH
61199: LD_VAR 0 7
61203: ARRAY
61204: PUSH
61205: LD_INT 1
61207: ARRAY
61208: PPUSH
61209: LD_VAR 0 12
61213: PUSH
61214: LD_VAR 0 7
61218: ARRAY
61219: PUSH
61220: LD_INT 2
61222: ARRAY
61223: PPUSH
61224: CALL_OW 428
61228: PUSH
61229: LD_INT 0
61231: GREATER
61232: OR
61233: PUSH
61234: LD_VAR 0 12
61238: PUSH
61239: LD_VAR 0 7
61243: ARRAY
61244: PUSH
61245: LD_INT 1
61247: ARRAY
61248: PPUSH
61249: LD_VAR 0 12
61253: PUSH
61254: LD_VAR 0 7
61258: ARRAY
61259: PUSH
61260: LD_INT 2
61262: ARRAY
61263: PPUSH
61264: CALL_OW 351
61268: OR
61269: IFFALSE 61275
// exit ;
61271: POP
61272: POP
61273: GO 61567
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61275: LD_ADDR_VAR 0 8
61279: PUSH
61280: LD_VAR 0 12
61284: PUSH
61285: LD_VAR 0 7
61289: ARRAY
61290: PUSH
61291: LD_INT 1
61293: ARRAY
61294: PPUSH
61295: LD_VAR 0 12
61299: PUSH
61300: LD_VAR 0 7
61304: ARRAY
61305: PUSH
61306: LD_INT 2
61308: ARRAY
61309: PPUSH
61310: CALL_OW 546
61314: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
61315: LD_VAR 0 8
61319: PUSH
61320: LD_INT 1
61322: ARRAY
61323: PUSH
61324: LD_VAR 0 8
61328: PUSH
61329: LD_INT 2
61331: ARRAY
61332: PUSH
61333: LD_VAR 0 13
61337: PUSH
61338: LD_INT 2
61340: PLUS
61341: GREATER
61342: OR
61343: PUSH
61344: LD_VAR 0 8
61348: PUSH
61349: LD_INT 2
61351: ARRAY
61352: PUSH
61353: LD_VAR 0 13
61357: PUSH
61358: LD_INT 2
61360: MINUS
61361: LESS
61362: OR
61363: PUSH
61364: LD_VAR 0 8
61368: PUSH
61369: LD_INT 3
61371: ARRAY
61372: PUSH
61373: LD_INT 0
61375: PUSH
61376: LD_INT 8
61378: PUSH
61379: LD_INT 9
61381: PUSH
61382: LD_INT 10
61384: PUSH
61385: LD_INT 11
61387: PUSH
61388: LD_INT 12
61390: PUSH
61391: LD_INT 13
61393: PUSH
61394: LD_INT 16
61396: PUSH
61397: LD_INT 17
61399: PUSH
61400: LD_INT 18
61402: PUSH
61403: LD_INT 19
61405: PUSH
61406: LD_INT 20
61408: PUSH
61409: LD_INT 21
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: IN
61427: NOT
61428: OR
61429: PUSH
61430: LD_VAR 0 8
61434: PUSH
61435: LD_INT 5
61437: ARRAY
61438: NOT
61439: OR
61440: PUSH
61441: LD_VAR 0 8
61445: PUSH
61446: LD_INT 6
61448: ARRAY
61449: PUSH
61450: LD_INT 1
61452: PUSH
61453: LD_INT 2
61455: PUSH
61456: LD_INT 7
61458: PUSH
61459: LD_INT 9
61461: PUSH
61462: LD_INT 10
61464: PUSH
61465: LD_INT 11
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: IN
61476: NOT
61477: OR
61478: IFFALSE 61484
// exit ;
61480: POP
61481: POP
61482: GO 61567
// end ;
61484: GO 61155
61486: POP
61487: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
61488: LD_VAR 0 9
61492: PPUSH
61493: LD_VAR 0 3
61497: PPUSH
61498: LD_VAR 0 4
61502: PPUSH
61503: LD_INT 20
61505: PPUSH
61506: CALL 53513 0 4
61510: PUSH
61511: LD_INT 4
61513: ARRAY
61514: IFFALSE 61518
// exit ;
61516: GO 61567
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
61518: LD_VAR 0 2
61522: PUSH
61523: LD_INT 29
61525: PUSH
61526: LD_INT 30
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: IN
61533: PUSH
61534: LD_VAR 0 3
61538: PPUSH
61539: LD_VAR 0 4
61543: PPUSH
61544: LD_VAR 0 9
61548: PPUSH
61549: CALL_OW 440
61553: NOT
61554: AND
61555: IFFALSE 61559
// exit ;
61557: GO 61567
// result := true ;
61559: LD_ADDR_VAR 0 6
61563: PUSH
61564: LD_INT 1
61566: ST_TO_ADDR
// end ;
61567: LD_VAR 0 6
61571: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
61572: LD_INT 0
61574: PPUSH
61575: PPUSH
61576: PPUSH
61577: PPUSH
61578: PPUSH
61579: PPUSH
61580: PPUSH
61581: PPUSH
61582: PPUSH
61583: PPUSH
61584: PPUSH
61585: PPUSH
61586: PPUSH
61587: PPUSH
61588: PPUSH
61589: PPUSH
61590: PPUSH
61591: PPUSH
61592: PPUSH
61593: PPUSH
61594: PPUSH
61595: PPUSH
61596: PPUSH
61597: PPUSH
61598: PPUSH
61599: PPUSH
61600: PPUSH
61601: PPUSH
61602: PPUSH
61603: PPUSH
61604: PPUSH
61605: PPUSH
61606: PPUSH
61607: PPUSH
61608: PPUSH
61609: PPUSH
61610: PPUSH
61611: PPUSH
61612: PPUSH
61613: PPUSH
61614: PPUSH
61615: PPUSH
61616: PPUSH
61617: PPUSH
61618: PPUSH
61619: PPUSH
61620: PPUSH
61621: PPUSH
61622: PPUSH
61623: PPUSH
61624: PPUSH
61625: PPUSH
61626: PPUSH
61627: PPUSH
61628: PPUSH
61629: PPUSH
61630: PPUSH
61631: PPUSH
// result = [ ] ;
61632: LD_ADDR_VAR 0 7
61636: PUSH
61637: EMPTY
61638: ST_TO_ADDR
// temp_list = [ ] ;
61639: LD_ADDR_VAR 0 9
61643: PUSH
61644: EMPTY
61645: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
61646: LD_VAR 0 4
61650: PUSH
61651: LD_INT 0
61653: PUSH
61654: LD_INT 1
61656: PUSH
61657: LD_INT 2
61659: PUSH
61660: LD_INT 3
61662: PUSH
61663: LD_INT 4
61665: PUSH
61666: LD_INT 5
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: IN
61677: NOT
61678: PUSH
61679: LD_VAR 0 1
61683: PUSH
61684: LD_INT 0
61686: PUSH
61687: LD_INT 1
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: IN
61694: PUSH
61695: LD_VAR 0 5
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: LD_INT 2
61705: PUSH
61706: LD_INT 3
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: LIST
61713: IN
61714: NOT
61715: AND
61716: OR
61717: IFFALSE 61721
// exit ;
61719: GO 80112
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
61721: LD_VAR 0 1
61725: PUSH
61726: LD_INT 6
61728: PUSH
61729: LD_INT 7
61731: PUSH
61732: LD_INT 8
61734: PUSH
61735: LD_INT 13
61737: PUSH
61738: LD_INT 12
61740: PUSH
61741: LD_INT 15
61743: PUSH
61744: LD_INT 11
61746: PUSH
61747: LD_INT 14
61749: PUSH
61750: LD_INT 10
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: IN
61764: IFFALSE 61774
// btype = b_lab ;
61766: LD_ADDR_VAR 0 1
61770: PUSH
61771: LD_INT 6
61773: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
61774: LD_VAR 0 6
61778: PUSH
61779: LD_INT 0
61781: PUSH
61782: LD_INT 1
61784: PUSH
61785: LD_INT 2
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: LIST
61792: IN
61793: NOT
61794: PUSH
61795: LD_VAR 0 1
61799: PUSH
61800: LD_INT 0
61802: PUSH
61803: LD_INT 1
61805: PUSH
61806: LD_INT 2
61808: PUSH
61809: LD_INT 3
61811: PUSH
61812: LD_INT 6
61814: PUSH
61815: LD_INT 36
61817: PUSH
61818: LD_INT 4
61820: PUSH
61821: LD_INT 5
61823: PUSH
61824: LD_INT 31
61826: PUSH
61827: LD_INT 32
61829: PUSH
61830: LD_INT 33
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: IN
61846: NOT
61847: PUSH
61848: LD_VAR 0 6
61852: PUSH
61853: LD_INT 1
61855: EQUAL
61856: AND
61857: OR
61858: PUSH
61859: LD_VAR 0 1
61863: PUSH
61864: LD_INT 2
61866: PUSH
61867: LD_INT 3
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: IN
61874: NOT
61875: PUSH
61876: LD_VAR 0 6
61880: PUSH
61881: LD_INT 2
61883: EQUAL
61884: AND
61885: OR
61886: IFFALSE 61896
// mode = 0 ;
61888: LD_ADDR_VAR 0 6
61892: PUSH
61893: LD_INT 0
61895: ST_TO_ADDR
// case mode of 0 :
61896: LD_VAR 0 6
61900: PUSH
61901: LD_INT 0
61903: DOUBLE
61904: EQUAL
61905: IFTRUE 61909
61907: GO 73362
61909: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61910: LD_ADDR_VAR 0 11
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: LD_INT 0
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: LD_INT 1
61930: NEG
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 1
61938: PUSH
61939: LD_INT 0
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 1
61948: PUSH
61949: LD_INT 1
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 0
61958: PUSH
61959: LD_INT 1
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 1
61968: NEG
61969: PUSH
61970: LD_INT 0
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 1
61979: NEG
61980: PUSH
61981: LD_INT 1
61983: NEG
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: LD_INT 2
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 0
62003: PUSH
62004: LD_INT 2
62006: NEG
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 1
62014: PUSH
62015: LD_INT 1
62017: NEG
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 1
62025: PUSH
62026: LD_INT 2
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 0
62035: PUSH
62036: LD_INT 2
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 1
62045: NEG
62046: PUSH
62047: LD_INT 1
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 1
62056: PUSH
62057: LD_INT 3
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 0
62066: PUSH
62067: LD_INT 3
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 1
62076: NEG
62077: PUSH
62078: LD_INT 2
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62103: LD_ADDR_VAR 0 12
62107: PUSH
62108: LD_INT 0
62110: PUSH
62111: LD_INT 0
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 0
62120: PUSH
62121: LD_INT 1
62123: NEG
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 1
62131: PUSH
62132: LD_INT 0
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 1
62141: PUSH
62142: LD_INT 1
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 0
62151: PUSH
62152: LD_INT 1
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 1
62161: NEG
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 1
62172: NEG
62173: PUSH
62174: LD_INT 1
62176: NEG
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 1
62184: PUSH
62185: LD_INT 1
62187: NEG
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 2
62195: PUSH
62196: LD_INT 0
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 2
62205: PUSH
62206: LD_INT 1
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 1
62215: NEG
62216: PUSH
62217: LD_INT 1
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 2
62226: NEG
62227: PUSH
62228: LD_INT 0
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 2
62237: NEG
62238: PUSH
62239: LD_INT 1
62241: NEG
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 2
62249: NEG
62250: PUSH
62251: LD_INT 1
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 3
62260: NEG
62261: PUSH
62262: LD_INT 0
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 3
62271: NEG
62272: PUSH
62273: LD_INT 1
62275: NEG
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62299: LD_ADDR_VAR 0 13
62303: PUSH
62304: LD_INT 0
62306: PUSH
62307: LD_INT 0
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 0
62316: PUSH
62317: LD_INT 1
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 1
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 1
62337: PUSH
62338: LD_INT 1
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 0
62347: PUSH
62348: LD_INT 1
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 1
62357: NEG
62358: PUSH
62359: LD_INT 0
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 1
62368: NEG
62369: PUSH
62370: LD_INT 1
62372: NEG
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 1
62380: NEG
62381: PUSH
62382: LD_INT 2
62384: NEG
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 2
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 2
62402: PUSH
62403: LD_INT 2
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 1
62412: PUSH
62413: LD_INT 2
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 2
62422: NEG
62423: PUSH
62424: LD_INT 1
62426: NEG
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 2
62434: NEG
62435: PUSH
62436: LD_INT 2
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 2
62446: NEG
62447: PUSH
62448: LD_INT 3
62450: NEG
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 3
62458: NEG
62459: PUSH
62460: LD_INT 2
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 3
62470: NEG
62471: PUSH
62472: LD_INT 3
62474: NEG
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62498: LD_ADDR_VAR 0 14
62502: PUSH
62503: LD_INT 0
62505: PUSH
62506: LD_INT 0
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: LD_INT 1
62518: NEG
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 1
62526: PUSH
62527: LD_INT 0
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 1
62536: PUSH
62537: LD_INT 1
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 0
62546: PUSH
62547: LD_INT 1
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 1
62556: NEG
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 1
62567: NEG
62568: PUSH
62569: LD_INT 1
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 1
62579: NEG
62580: PUSH
62581: LD_INT 2
62583: NEG
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 0
62591: PUSH
62592: LD_INT 2
62594: NEG
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 1
62602: PUSH
62603: LD_INT 1
62605: NEG
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 1
62613: PUSH
62614: LD_INT 2
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 0
62623: PUSH
62624: LD_INT 2
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 1
62633: NEG
62634: PUSH
62635: LD_INT 1
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 1
62644: NEG
62645: PUSH
62646: LD_INT 3
62648: NEG
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: LD_INT 3
62659: NEG
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 1
62667: PUSH
62668: LD_INT 2
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62694: LD_ADDR_VAR 0 15
62698: PUSH
62699: LD_INT 0
62701: PUSH
62702: LD_INT 0
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 0
62711: PUSH
62712: LD_INT 1
62714: NEG
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 1
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 1
62732: PUSH
62733: LD_INT 1
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 1
62752: NEG
62753: PUSH
62754: LD_INT 0
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 1
62763: NEG
62764: PUSH
62765: LD_INT 1
62767: NEG
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 1
62775: PUSH
62776: LD_INT 1
62778: NEG
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 2
62786: PUSH
62787: LD_INT 0
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 2
62796: PUSH
62797: LD_INT 1
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 1
62806: NEG
62807: PUSH
62808: LD_INT 1
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 2
62817: NEG
62818: PUSH
62819: LD_INT 0
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 2
62828: NEG
62829: PUSH
62830: LD_INT 1
62832: NEG
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 2
62840: PUSH
62841: LD_INT 1
62843: NEG
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 3
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 3
62861: PUSH
62862: LD_INT 1
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62887: LD_ADDR_VAR 0 16
62891: PUSH
62892: LD_INT 0
62894: PUSH
62895: LD_INT 0
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 0
62904: PUSH
62905: LD_INT 1
62907: NEG
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 1
62915: PUSH
62916: LD_INT 0
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 1
62925: PUSH
62926: LD_INT 1
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 0
62935: PUSH
62936: LD_INT 1
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 1
62945: NEG
62946: PUSH
62947: LD_INT 0
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 1
62956: NEG
62957: PUSH
62958: LD_INT 1
62960: NEG
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 1
62968: NEG
62969: PUSH
62970: LD_INT 2
62972: NEG
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 2
62980: PUSH
62981: LD_INT 1
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 2
62990: PUSH
62991: LD_INT 2
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 1
63000: PUSH
63001: LD_INT 2
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 2
63010: NEG
63011: PUSH
63012: LD_INT 1
63014: NEG
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 2
63022: NEG
63023: PUSH
63024: LD_INT 2
63026: NEG
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 3
63034: PUSH
63035: LD_INT 2
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 3
63044: PUSH
63045: LD_INT 3
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 2
63054: PUSH
63055: LD_INT 3
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63080: LD_ADDR_VAR 0 17
63084: PUSH
63085: LD_INT 0
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 0
63097: PUSH
63098: LD_INT 1
63100: NEG
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 1
63108: PUSH
63109: LD_INT 0
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 1
63118: PUSH
63119: LD_INT 1
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 0
63128: PUSH
63129: LD_INT 1
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 1
63138: NEG
63139: PUSH
63140: LD_INT 0
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 1
63149: NEG
63150: PUSH
63151: LD_INT 1
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 1
63161: NEG
63162: PUSH
63163: LD_INT 2
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 0
63173: PUSH
63174: LD_INT 2
63176: NEG
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 1
63184: PUSH
63185: LD_INT 1
63187: NEG
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 2
63195: PUSH
63196: LD_INT 0
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 2
63205: PUSH
63206: LD_INT 1
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 2
63215: PUSH
63216: LD_INT 2
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 1
63225: PUSH
63226: LD_INT 2
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 0
63235: PUSH
63236: LD_INT 2
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 1
63245: NEG
63246: PUSH
63247: LD_INT 1
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 2
63256: NEG
63257: PUSH
63258: LD_INT 0
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 2
63267: NEG
63268: PUSH
63269: LD_INT 1
63271: NEG
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 2
63279: NEG
63280: PUSH
63281: LD_INT 2
63283: NEG
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63310: LD_ADDR_VAR 0 18
63314: PUSH
63315: LD_INT 0
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 0
63327: PUSH
63328: LD_INT 1
63330: NEG
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 1
63338: PUSH
63339: LD_INT 0
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 1
63348: PUSH
63349: LD_INT 1
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 0
63358: PUSH
63359: LD_INT 1
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 1
63368: NEG
63369: PUSH
63370: LD_INT 0
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 1
63379: NEG
63380: PUSH
63381: LD_INT 1
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 1
63391: NEG
63392: PUSH
63393: LD_INT 2
63395: NEG
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 0
63403: PUSH
63404: LD_INT 2
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 1
63414: PUSH
63415: LD_INT 1
63417: NEG
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 2
63425: PUSH
63426: LD_INT 0
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 2
63435: PUSH
63436: LD_INT 1
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 2
63445: PUSH
63446: LD_INT 2
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 1
63455: PUSH
63456: LD_INT 2
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 0
63465: PUSH
63466: LD_INT 2
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 1
63475: NEG
63476: PUSH
63477: LD_INT 1
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 2
63486: NEG
63487: PUSH
63488: LD_INT 0
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 2
63497: NEG
63498: PUSH
63499: LD_INT 1
63501: NEG
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 2
63509: NEG
63510: PUSH
63511: LD_INT 2
63513: NEG
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63540: LD_ADDR_VAR 0 19
63544: PUSH
63545: LD_INT 0
63547: PUSH
63548: LD_INT 0
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 0
63557: PUSH
63558: LD_INT 1
63560: NEG
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 1
63568: PUSH
63569: LD_INT 0
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 1
63578: PUSH
63579: LD_INT 1
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 0
63588: PUSH
63589: LD_INT 1
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 1
63598: NEG
63599: PUSH
63600: LD_INT 0
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 1
63609: NEG
63610: PUSH
63611: LD_INT 1
63613: NEG
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 1
63621: NEG
63622: PUSH
63623: LD_INT 2
63625: NEG
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 0
63633: PUSH
63634: LD_INT 2
63636: NEG
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 1
63644: PUSH
63645: LD_INT 1
63647: NEG
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 2
63655: PUSH
63656: LD_INT 0
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 2
63665: PUSH
63666: LD_INT 1
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 2
63675: PUSH
63676: LD_INT 2
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 1
63685: PUSH
63686: LD_INT 2
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 0
63695: PUSH
63696: LD_INT 2
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 1
63705: NEG
63706: PUSH
63707: LD_INT 1
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 2
63716: NEG
63717: PUSH
63718: LD_INT 0
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 2
63727: NEG
63728: PUSH
63729: LD_INT 1
63731: NEG
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 2
63739: NEG
63740: PUSH
63741: LD_INT 2
63743: NEG
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63770: LD_ADDR_VAR 0 20
63774: PUSH
63775: LD_INT 0
63777: PUSH
63778: LD_INT 0
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 0
63787: PUSH
63788: LD_INT 1
63790: NEG
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 1
63798: PUSH
63799: LD_INT 0
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 1
63808: PUSH
63809: LD_INT 1
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 0
63818: PUSH
63819: LD_INT 1
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 1
63828: NEG
63829: PUSH
63830: LD_INT 0
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 1
63839: NEG
63840: PUSH
63841: LD_INT 1
63843: NEG
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 1
63851: NEG
63852: PUSH
63853: LD_INT 2
63855: NEG
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 0
63863: PUSH
63864: LD_INT 2
63866: NEG
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 1
63874: PUSH
63875: LD_INT 1
63877: NEG
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 2
63885: PUSH
63886: LD_INT 0
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 2
63895: PUSH
63896: LD_INT 1
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 2
63905: PUSH
63906: LD_INT 2
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 1
63915: PUSH
63916: LD_INT 2
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 0
63925: PUSH
63926: LD_INT 2
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 1
63935: NEG
63936: PUSH
63937: LD_INT 1
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 2
63946: NEG
63947: PUSH
63948: LD_INT 0
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 2
63957: NEG
63958: PUSH
63959: LD_INT 1
63961: NEG
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 2
63969: NEG
63970: PUSH
63971: LD_INT 2
63973: NEG
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64000: LD_ADDR_VAR 0 21
64004: PUSH
64005: LD_INT 0
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 0
64017: PUSH
64018: LD_INT 1
64020: NEG
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 1
64028: PUSH
64029: LD_INT 0
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 1
64038: PUSH
64039: LD_INT 1
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: LD_INT 1
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 1
64058: NEG
64059: PUSH
64060: LD_INT 0
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 1
64069: NEG
64070: PUSH
64071: LD_INT 1
64073: NEG
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 1
64081: NEG
64082: PUSH
64083: LD_INT 2
64085: NEG
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 0
64093: PUSH
64094: LD_INT 2
64096: NEG
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 1
64104: PUSH
64105: LD_INT 1
64107: NEG
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 2
64115: PUSH
64116: LD_INT 0
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 2
64125: PUSH
64126: LD_INT 1
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 2
64135: PUSH
64136: LD_INT 2
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 1
64145: PUSH
64146: LD_INT 2
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: LD_INT 2
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 1
64165: NEG
64166: PUSH
64167: LD_INT 1
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 2
64176: NEG
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 2
64187: NEG
64188: PUSH
64189: LD_INT 1
64191: NEG
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 2
64199: NEG
64200: PUSH
64201: LD_INT 2
64203: NEG
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64230: LD_ADDR_VAR 0 22
64234: PUSH
64235: LD_INT 0
64237: PUSH
64238: LD_INT 0
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 0
64247: PUSH
64248: LD_INT 1
64250: NEG
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 1
64258: PUSH
64259: LD_INT 0
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 1
64268: PUSH
64269: LD_INT 1
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 0
64278: PUSH
64279: LD_INT 1
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 1
64288: NEG
64289: PUSH
64290: LD_INT 0
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 1
64299: NEG
64300: PUSH
64301: LD_INT 1
64303: NEG
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 1
64311: NEG
64312: PUSH
64313: LD_INT 2
64315: NEG
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 0
64323: PUSH
64324: LD_INT 2
64326: NEG
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 1
64334: PUSH
64335: LD_INT 1
64337: NEG
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 2
64345: PUSH
64346: LD_INT 0
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 2
64355: PUSH
64356: LD_INT 1
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 2
64365: PUSH
64366: LD_INT 2
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 1
64375: PUSH
64376: LD_INT 2
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 0
64385: PUSH
64386: LD_INT 2
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 1
64395: NEG
64396: PUSH
64397: LD_INT 1
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 2
64406: NEG
64407: PUSH
64408: LD_INT 0
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 2
64417: NEG
64418: PUSH
64419: LD_INT 1
64421: NEG
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 2
64429: NEG
64430: PUSH
64431: LD_INT 2
64433: NEG
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64460: LD_ADDR_VAR 0 23
64464: PUSH
64465: LD_INT 0
64467: PUSH
64468: LD_INT 0
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PUSH
64475: LD_INT 0
64477: PUSH
64478: LD_INT 1
64480: NEG
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: LD_INT 1
64488: PUSH
64489: LD_INT 0
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 1
64498: PUSH
64499: LD_INT 1
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 0
64508: PUSH
64509: LD_INT 1
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: LD_INT 1
64518: NEG
64519: PUSH
64520: LD_INT 0
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 1
64529: NEG
64530: PUSH
64531: LD_INT 1
64533: NEG
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 1
64541: NEG
64542: PUSH
64543: LD_INT 2
64545: NEG
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 0
64553: PUSH
64554: LD_INT 2
64556: NEG
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 1
64564: PUSH
64565: LD_INT 1
64567: NEG
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 2
64575: PUSH
64576: LD_INT 0
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 2
64585: PUSH
64586: LD_INT 1
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 2
64595: PUSH
64596: LD_INT 2
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: LD_INT 2
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 0
64615: PUSH
64616: LD_INT 2
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 1
64625: NEG
64626: PUSH
64627: LD_INT 1
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 2
64636: NEG
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 2
64647: NEG
64648: PUSH
64649: LD_INT 1
64651: NEG
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 2
64659: NEG
64660: PUSH
64661: LD_INT 2
64663: NEG
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 2
64671: NEG
64672: PUSH
64673: LD_INT 3
64675: NEG
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 1
64683: NEG
64684: PUSH
64685: LD_INT 3
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 1
64695: PUSH
64696: LD_INT 2
64698: NEG
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 2
64706: PUSH
64707: LD_INT 1
64709: NEG
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
64740: LD_ADDR_VAR 0 24
64744: PUSH
64745: LD_INT 0
64747: PUSH
64748: LD_INT 0
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 0
64757: PUSH
64758: LD_INT 1
64760: NEG
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 1
64768: PUSH
64769: LD_INT 0
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 1
64778: PUSH
64779: LD_INT 1
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 0
64788: PUSH
64789: LD_INT 1
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 1
64798: NEG
64799: PUSH
64800: LD_INT 0
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: LD_INT 1
64809: NEG
64810: PUSH
64811: LD_INT 1
64813: NEG
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 1
64821: NEG
64822: PUSH
64823: LD_INT 2
64825: NEG
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 0
64833: PUSH
64834: LD_INT 2
64836: NEG
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 1
64844: PUSH
64845: LD_INT 1
64847: NEG
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 2
64855: PUSH
64856: LD_INT 0
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 2
64865: PUSH
64866: LD_INT 1
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 2
64875: PUSH
64876: LD_INT 2
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 1
64885: PUSH
64886: LD_INT 2
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 0
64895: PUSH
64896: LD_INT 2
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 1
64905: NEG
64906: PUSH
64907: LD_INT 1
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 2
64916: NEG
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 2
64927: NEG
64928: PUSH
64929: LD_INT 1
64931: NEG
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 2
64939: NEG
64940: PUSH
64941: LD_INT 2
64943: NEG
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 1
64951: PUSH
64952: LD_INT 2
64954: NEG
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 2
64962: PUSH
64963: LD_INT 1
64965: NEG
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 3
64973: PUSH
64974: LD_INT 1
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 3
64983: PUSH
64984: LD_INT 2
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
65016: LD_ADDR_VAR 0 25
65020: PUSH
65021: LD_INT 0
65023: PUSH
65024: LD_INT 0
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 0
65033: PUSH
65034: LD_INT 1
65036: NEG
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 1
65044: PUSH
65045: LD_INT 0
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 1
65054: PUSH
65055: LD_INT 1
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 0
65064: PUSH
65065: LD_INT 1
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 1
65074: NEG
65075: PUSH
65076: LD_INT 0
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 1
65085: NEG
65086: PUSH
65087: LD_INT 1
65089: NEG
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 1
65097: NEG
65098: PUSH
65099: LD_INT 2
65101: NEG
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 0
65109: PUSH
65110: LD_INT 2
65112: NEG
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 1
65120: PUSH
65121: LD_INT 1
65123: NEG
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 2
65131: PUSH
65132: LD_INT 0
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 2
65141: PUSH
65142: LD_INT 1
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 2
65151: PUSH
65152: LD_INT 2
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 1
65161: PUSH
65162: LD_INT 2
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 0
65171: PUSH
65172: LD_INT 2
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 1
65181: NEG
65182: PUSH
65183: LD_INT 1
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 2
65192: NEG
65193: PUSH
65194: LD_INT 0
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 2
65203: NEG
65204: PUSH
65205: LD_INT 1
65207: NEG
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 2
65215: NEG
65216: PUSH
65217: LD_INT 2
65219: NEG
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 3
65227: PUSH
65228: LD_INT 1
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 3
65237: PUSH
65238: LD_INT 2
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 2
65247: PUSH
65248: LD_INT 3
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 1
65257: PUSH
65258: LD_INT 3
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65290: LD_ADDR_VAR 0 26
65294: PUSH
65295: LD_INT 0
65297: PUSH
65298: LD_INT 0
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 0
65307: PUSH
65308: LD_INT 1
65310: NEG
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 1
65318: PUSH
65319: LD_INT 0
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 1
65328: PUSH
65329: LD_INT 1
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 0
65338: PUSH
65339: LD_INT 1
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 1
65348: NEG
65349: PUSH
65350: LD_INT 0
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 1
65359: NEG
65360: PUSH
65361: LD_INT 1
65363: NEG
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 1
65371: NEG
65372: PUSH
65373: LD_INT 2
65375: NEG
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 0
65383: PUSH
65384: LD_INT 2
65386: NEG
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 1
65394: PUSH
65395: LD_INT 1
65397: NEG
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 2
65405: PUSH
65406: LD_INT 0
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 2
65415: PUSH
65416: LD_INT 1
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 2
65425: PUSH
65426: LD_INT 2
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 1
65435: PUSH
65436: LD_INT 2
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 0
65445: PUSH
65446: LD_INT 2
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 1
65455: NEG
65456: PUSH
65457: LD_INT 1
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 2
65466: NEG
65467: PUSH
65468: LD_INT 0
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 2
65477: NEG
65478: PUSH
65479: LD_INT 1
65481: NEG
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 2
65489: NEG
65490: PUSH
65491: LD_INT 2
65493: NEG
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 2
65501: PUSH
65502: LD_INT 3
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 1
65511: PUSH
65512: LD_INT 3
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 1
65521: NEG
65522: PUSH
65523: LD_INT 2
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 2
65532: NEG
65533: PUSH
65534: LD_INT 1
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65566: LD_ADDR_VAR 0 27
65570: PUSH
65571: LD_INT 0
65573: PUSH
65574: LD_INT 0
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 0
65583: PUSH
65584: LD_INT 1
65586: NEG
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 1
65594: PUSH
65595: LD_INT 0
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 1
65604: PUSH
65605: LD_INT 1
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 0
65614: PUSH
65615: LD_INT 1
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 1
65624: NEG
65625: PUSH
65626: LD_INT 0
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 1
65635: NEG
65636: PUSH
65637: LD_INT 1
65639: NEG
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 1
65647: NEG
65648: PUSH
65649: LD_INT 2
65651: NEG
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 0
65659: PUSH
65660: LD_INT 2
65662: NEG
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 1
65670: PUSH
65671: LD_INT 1
65673: NEG
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 2
65681: PUSH
65682: LD_INT 0
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 2
65691: PUSH
65692: LD_INT 1
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 2
65701: PUSH
65702: LD_INT 2
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 1
65711: PUSH
65712: LD_INT 2
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 0
65721: PUSH
65722: LD_INT 2
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 1
65731: NEG
65732: PUSH
65733: LD_INT 1
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 2
65742: NEG
65743: PUSH
65744: LD_INT 0
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 2
65753: NEG
65754: PUSH
65755: LD_INT 1
65757: NEG
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 2
65765: NEG
65766: PUSH
65767: LD_INT 2
65769: NEG
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 1
65777: NEG
65778: PUSH
65779: LD_INT 2
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 2
65788: NEG
65789: PUSH
65790: LD_INT 1
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 3
65799: NEG
65800: PUSH
65801: LD_INT 1
65803: NEG
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 3
65811: NEG
65812: PUSH
65813: LD_INT 2
65815: NEG
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65846: LD_ADDR_VAR 0 28
65850: PUSH
65851: LD_INT 0
65853: PUSH
65854: LD_INT 0
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 0
65863: PUSH
65864: LD_INT 1
65866: NEG
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 1
65874: PUSH
65875: LD_INT 0
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 1
65884: PUSH
65885: LD_INT 1
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: LD_INT 1
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 1
65904: NEG
65905: PUSH
65906: LD_INT 0
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 1
65915: NEG
65916: PUSH
65917: LD_INT 1
65919: NEG
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 1
65927: NEG
65928: PUSH
65929: LD_INT 2
65931: NEG
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 0
65939: PUSH
65940: LD_INT 2
65942: NEG
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 1
65950: PUSH
65951: LD_INT 1
65953: NEG
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 2
65961: PUSH
65962: LD_INT 0
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 2
65971: PUSH
65972: LD_INT 1
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 2
65981: PUSH
65982: LD_INT 2
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 1
65991: PUSH
65992: LD_INT 2
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 0
66001: PUSH
66002: LD_INT 2
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 1
66011: NEG
66012: PUSH
66013: LD_INT 1
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 2
66022: NEG
66023: PUSH
66024: LD_INT 0
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 2
66033: NEG
66034: PUSH
66035: LD_INT 1
66037: NEG
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 2
66045: NEG
66046: PUSH
66047: LD_INT 2
66049: NEG
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 2
66057: NEG
66058: PUSH
66059: LD_INT 3
66061: NEG
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 1
66069: NEG
66070: PUSH
66071: LD_INT 3
66073: NEG
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: LD_INT 3
66081: NEG
66082: PUSH
66083: LD_INT 1
66085: NEG
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 3
66093: NEG
66094: PUSH
66095: LD_INT 2
66097: NEG
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
66128: LD_ADDR_VAR 0 29
66132: PUSH
66133: LD_INT 0
66135: PUSH
66136: LD_INT 0
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 0
66145: PUSH
66146: LD_INT 1
66148: NEG
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 1
66156: PUSH
66157: LD_INT 0
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 1
66166: PUSH
66167: LD_INT 1
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 0
66176: PUSH
66177: LD_INT 1
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 1
66186: NEG
66187: PUSH
66188: LD_INT 0
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 1
66197: NEG
66198: PUSH
66199: LD_INT 1
66201: NEG
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 1
66209: NEG
66210: PUSH
66211: LD_INT 2
66213: NEG
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 0
66221: PUSH
66222: LD_INT 2
66224: NEG
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 1
66232: PUSH
66233: LD_INT 1
66235: NEG
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 2
66243: PUSH
66244: LD_INT 0
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: LD_INT 2
66253: PUSH
66254: LD_INT 1
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 1
66263: PUSH
66264: LD_INT 2
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 0
66273: PUSH
66274: LD_INT 2
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 1
66283: NEG
66284: PUSH
66285: LD_INT 1
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 2
66294: NEG
66295: PUSH
66296: LD_INT 1
66298: NEG
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 2
66306: NEG
66307: PUSH
66308: LD_INT 2
66310: NEG
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 2
66318: NEG
66319: PUSH
66320: LD_INT 3
66322: NEG
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 2
66330: PUSH
66331: LD_INT 1
66333: NEG
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 3
66341: PUSH
66342: LD_INT 1
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 1
66351: PUSH
66352: LD_INT 3
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 1
66361: NEG
66362: PUSH
66363: LD_INT 2
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 3
66372: NEG
66373: PUSH
66374: LD_INT 2
66376: NEG
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66407: LD_ADDR_VAR 0 30
66411: PUSH
66412: LD_INT 0
66414: PUSH
66415: LD_INT 0
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 0
66424: PUSH
66425: LD_INT 1
66427: NEG
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 1
66435: PUSH
66436: LD_INT 0
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 1
66445: PUSH
66446: LD_INT 1
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 0
66455: PUSH
66456: LD_INT 1
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 1
66465: NEG
66466: PUSH
66467: LD_INT 0
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 1
66476: NEG
66477: PUSH
66478: LD_INT 1
66480: NEG
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 1
66488: NEG
66489: PUSH
66490: LD_INT 2
66492: NEG
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 0
66500: PUSH
66501: LD_INT 2
66503: NEG
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 1
66511: PUSH
66512: LD_INT 1
66514: NEG
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 2
66522: PUSH
66523: LD_INT 0
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 2
66532: PUSH
66533: LD_INT 1
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 2
66542: PUSH
66543: LD_INT 2
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 1
66552: PUSH
66553: LD_INT 2
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 1
66562: NEG
66563: PUSH
66564: LD_INT 1
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 2
66573: NEG
66574: PUSH
66575: LD_INT 0
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 2
66584: NEG
66585: PUSH
66586: LD_INT 1
66588: NEG
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 1
66596: NEG
66597: PUSH
66598: LD_INT 3
66600: NEG
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 1
66608: PUSH
66609: LD_INT 2
66611: NEG
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 3
66619: PUSH
66620: LD_INT 2
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 2
66629: PUSH
66630: LD_INT 3
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 2
66639: NEG
66640: PUSH
66641: LD_INT 1
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 3
66650: NEG
66651: PUSH
66652: LD_INT 1
66654: NEG
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
66685: LD_ADDR_VAR 0 31
66689: PUSH
66690: LD_INT 0
66692: PUSH
66693: LD_INT 0
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 0
66702: PUSH
66703: LD_INT 1
66705: NEG
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 1
66713: PUSH
66714: LD_INT 0
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 1
66723: PUSH
66724: LD_INT 1
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 0
66733: PUSH
66734: LD_INT 1
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 1
66743: NEG
66744: PUSH
66745: LD_INT 0
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 1
66754: NEG
66755: PUSH
66756: LD_INT 1
66758: NEG
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 1
66766: NEG
66767: PUSH
66768: LD_INT 2
66770: NEG
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 1
66778: PUSH
66779: LD_INT 1
66781: NEG
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 2
66789: PUSH
66790: LD_INT 0
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 2
66799: PUSH
66800: LD_INT 1
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 2
66809: PUSH
66810: LD_INT 2
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 1
66819: PUSH
66820: LD_INT 2
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 0
66829: PUSH
66830: LD_INT 2
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 1
66839: NEG
66840: PUSH
66841: LD_INT 1
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 2
66850: NEG
66851: PUSH
66852: LD_INT 1
66854: NEG
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 2
66862: NEG
66863: PUSH
66864: LD_INT 2
66866: NEG
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 2
66874: NEG
66875: PUSH
66876: LD_INT 3
66878: NEG
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 2
66886: PUSH
66887: LD_INT 1
66889: NEG
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 3
66897: PUSH
66898: LD_INT 1
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 1
66907: PUSH
66908: LD_INT 3
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 1
66917: NEG
66918: PUSH
66919: LD_INT 2
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 3
66928: NEG
66929: PUSH
66930: LD_INT 2
66932: NEG
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66963: LD_ADDR_VAR 0 32
66967: PUSH
66968: LD_INT 0
66970: PUSH
66971: LD_INT 0
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 0
66980: PUSH
66981: LD_INT 1
66983: NEG
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 1
66991: PUSH
66992: LD_INT 0
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 1
67001: PUSH
67002: LD_INT 1
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 0
67011: PUSH
67012: LD_INT 1
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 1
67021: NEG
67022: PUSH
67023: LD_INT 0
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: LD_INT 1
67032: NEG
67033: PUSH
67034: LD_INT 1
67036: NEG
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 1
67044: NEG
67045: PUSH
67046: LD_INT 2
67048: NEG
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: PUSH
67054: LD_INT 0
67056: PUSH
67057: LD_INT 2
67059: NEG
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 1
67067: PUSH
67068: LD_INT 1
67070: NEG
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 2
67078: PUSH
67079: LD_INT 1
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 2
67088: PUSH
67089: LD_INT 2
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 1
67098: PUSH
67099: LD_INT 2
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 0
67108: PUSH
67109: LD_INT 2
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 1
67118: NEG
67119: PUSH
67120: LD_INT 1
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 2
67129: NEG
67130: PUSH
67131: LD_INT 0
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PUSH
67138: LD_INT 2
67140: NEG
67141: PUSH
67142: LD_INT 1
67144: NEG
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 1
67152: NEG
67153: PUSH
67154: LD_INT 3
67156: NEG
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 1
67164: PUSH
67165: LD_INT 2
67167: NEG
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_INT 3
67175: PUSH
67176: LD_INT 2
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 2
67185: PUSH
67186: LD_INT 3
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 2
67195: NEG
67196: PUSH
67197: LD_INT 1
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 3
67206: NEG
67207: PUSH
67208: LD_INT 1
67210: NEG
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
67241: LD_ADDR_VAR 0 33
67245: PUSH
67246: LD_INT 0
67248: PUSH
67249: LD_INT 0
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 0
67258: PUSH
67259: LD_INT 1
67261: NEG
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: LD_INT 1
67269: PUSH
67270: LD_INT 0
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: LD_INT 1
67279: PUSH
67280: LD_INT 1
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 0
67289: PUSH
67290: LD_INT 1
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 1
67299: NEG
67300: PUSH
67301: LD_INT 0
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 1
67310: NEG
67311: PUSH
67312: LD_INT 1
67314: NEG
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 1
67322: NEG
67323: PUSH
67324: LD_INT 2
67326: NEG
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 1
67334: PUSH
67335: LD_INT 1
67337: NEG
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 2
67345: PUSH
67346: LD_INT 0
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 2
67355: PUSH
67356: LD_INT 1
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 1
67365: PUSH
67366: LD_INT 2
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: LD_INT 0
67375: PUSH
67376: LD_INT 2
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 1
67385: NEG
67386: PUSH
67387: LD_INT 1
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_INT 2
67396: NEG
67397: PUSH
67398: LD_INT 0
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: LD_INT 2
67407: NEG
67408: PUSH
67409: LD_INT 1
67411: NEG
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 2
67419: NEG
67420: PUSH
67421: LD_INT 2
67423: NEG
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PUSH
67429: LD_INT 2
67431: NEG
67432: PUSH
67433: LD_INT 3
67435: NEG
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 2
67443: PUSH
67444: LD_INT 1
67446: NEG
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 3
67454: PUSH
67455: LD_INT 1
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 1
67464: PUSH
67465: LD_INT 3
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 1
67474: NEG
67475: PUSH
67476: LD_INT 2
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 3
67485: NEG
67486: PUSH
67487: LD_INT 2
67489: NEG
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67520: LD_ADDR_VAR 0 34
67524: PUSH
67525: LD_INT 0
67527: PUSH
67528: LD_INT 0
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: LD_INT 0
67537: PUSH
67538: LD_INT 1
67540: NEG
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 1
67548: PUSH
67549: LD_INT 0
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 1
67558: PUSH
67559: LD_INT 1
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 0
67568: PUSH
67569: LD_INT 1
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 1
67578: NEG
67579: PUSH
67580: LD_INT 0
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: LD_INT 1
67589: NEG
67590: PUSH
67591: LD_INT 1
67593: NEG
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 1
67601: NEG
67602: PUSH
67603: LD_INT 2
67605: NEG
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 0
67613: PUSH
67614: LD_INT 2
67616: NEG
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 1
67624: PUSH
67625: LD_INT 1
67627: NEG
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 2
67635: PUSH
67636: LD_INT 1
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 2
67645: PUSH
67646: LD_INT 2
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 1
67655: PUSH
67656: LD_INT 2
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 1
67665: NEG
67666: PUSH
67667: LD_INT 1
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 2
67676: NEG
67677: PUSH
67678: LD_INT 0
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 2
67687: NEG
67688: PUSH
67689: LD_INT 1
67691: NEG
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: LD_INT 2
67699: NEG
67700: PUSH
67701: LD_INT 2
67703: NEG
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 1
67711: NEG
67712: PUSH
67713: LD_INT 3
67715: NEG
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 1
67723: PUSH
67724: LD_INT 2
67726: NEG
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 3
67734: PUSH
67735: LD_INT 2
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 2
67744: PUSH
67745: LD_INT 3
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 2
67754: NEG
67755: PUSH
67756: LD_INT 1
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 3
67765: NEG
67766: PUSH
67767: LD_INT 1
67769: NEG
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
67800: LD_ADDR_VAR 0 35
67804: PUSH
67805: LD_INT 0
67807: PUSH
67808: LD_INT 0
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 0
67817: PUSH
67818: LD_INT 1
67820: NEG
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: LD_INT 1
67828: PUSH
67829: LD_INT 0
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: LD_INT 1
67838: PUSH
67839: LD_INT 1
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 0
67848: PUSH
67849: LD_INT 1
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 1
67858: NEG
67859: PUSH
67860: LD_INT 0
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 1
67869: NEG
67870: PUSH
67871: LD_INT 1
67873: NEG
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 2
67881: PUSH
67882: LD_INT 1
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PUSH
67889: LD_INT 2
67891: NEG
67892: PUSH
67893: LD_INT 1
67895: NEG
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
67912: LD_ADDR_VAR 0 36
67916: PUSH
67917: LD_INT 0
67919: PUSH
67920: LD_INT 0
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 0
67929: PUSH
67930: LD_INT 1
67932: NEG
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 1
67940: PUSH
67941: LD_INT 0
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PUSH
67948: LD_INT 1
67950: PUSH
67951: LD_INT 1
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: LD_INT 0
67960: PUSH
67961: LD_INT 1
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: LD_INT 1
67970: NEG
67971: PUSH
67972: LD_INT 0
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 1
67981: NEG
67982: PUSH
67983: LD_INT 1
67985: NEG
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 1
67993: NEG
67994: PUSH
67995: LD_INT 2
67997: NEG
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 1
68005: PUSH
68006: LD_INT 2
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
68024: LD_ADDR_VAR 0 37
68028: PUSH
68029: LD_INT 0
68031: PUSH
68032: LD_INT 0
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 0
68041: PUSH
68042: LD_INT 1
68044: NEG
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 1
68052: PUSH
68053: LD_INT 0
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 1
68062: PUSH
68063: LD_INT 1
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 0
68072: PUSH
68073: LD_INT 1
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 1
68082: NEG
68083: PUSH
68084: LD_INT 0
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 1
68093: NEG
68094: PUSH
68095: LD_INT 1
68097: NEG
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 1
68105: PUSH
68106: LD_INT 1
68108: NEG
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: LD_INT 1
68116: NEG
68117: PUSH
68118: LD_INT 1
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
68136: LD_ADDR_VAR 0 38
68140: PUSH
68141: LD_INT 0
68143: PUSH
68144: LD_INT 0
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 0
68153: PUSH
68154: LD_INT 1
68156: NEG
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 1
68164: PUSH
68165: LD_INT 0
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 1
68174: PUSH
68175: LD_INT 1
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 0
68184: PUSH
68185: LD_INT 1
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: PUSH
68192: LD_INT 1
68194: NEG
68195: PUSH
68196: LD_INT 0
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 1
68205: NEG
68206: PUSH
68207: LD_INT 1
68209: NEG
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: LD_INT 2
68217: PUSH
68218: LD_INT 1
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: LD_INT 2
68227: NEG
68228: PUSH
68229: LD_INT 1
68231: NEG
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
68248: LD_ADDR_VAR 0 39
68252: PUSH
68253: LD_INT 0
68255: PUSH
68256: LD_INT 0
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 0
68265: PUSH
68266: LD_INT 1
68268: NEG
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 1
68276: PUSH
68277: LD_INT 0
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 1
68286: PUSH
68287: LD_INT 1
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: LD_INT 0
68296: PUSH
68297: LD_INT 1
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 1
68306: NEG
68307: PUSH
68308: LD_INT 0
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 1
68317: NEG
68318: PUSH
68319: LD_INT 1
68321: NEG
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 1
68329: NEG
68330: PUSH
68331: LD_INT 2
68333: NEG
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: LD_INT 1
68341: PUSH
68342: LD_INT 2
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
68360: LD_ADDR_VAR 0 40
68364: PUSH
68365: LD_INT 0
68367: PUSH
68368: LD_INT 0
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 0
68377: PUSH
68378: LD_INT 1
68380: NEG
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 1
68388: PUSH
68389: LD_INT 0
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_INT 1
68398: PUSH
68399: LD_INT 1
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: LD_INT 0
68408: PUSH
68409: LD_INT 1
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 1
68418: NEG
68419: PUSH
68420: LD_INT 0
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: PUSH
68427: LD_INT 1
68429: NEG
68430: PUSH
68431: LD_INT 1
68433: NEG
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: LD_INT 1
68441: PUSH
68442: LD_INT 1
68444: NEG
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_INT 1
68452: NEG
68453: PUSH
68454: LD_INT 1
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68472: LD_ADDR_VAR 0 41
68476: PUSH
68477: LD_INT 0
68479: PUSH
68480: LD_INT 0
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: PUSH
68487: LD_INT 0
68489: PUSH
68490: LD_INT 1
68492: NEG
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: PUSH
68498: LD_INT 1
68500: PUSH
68501: LD_INT 0
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 1
68510: PUSH
68511: LD_INT 1
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: LD_INT 0
68520: PUSH
68521: LD_INT 1
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 1
68530: NEG
68531: PUSH
68532: LD_INT 0
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 1
68541: NEG
68542: PUSH
68543: LD_INT 1
68545: NEG
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 1
68553: NEG
68554: PUSH
68555: LD_INT 2
68557: NEG
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 1
68565: PUSH
68566: LD_INT 1
68568: NEG
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 2
68576: PUSH
68577: LD_INT 0
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 2
68586: PUSH
68587: LD_INT 1
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 2
68596: PUSH
68597: LD_INT 2
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 1
68606: PUSH
68607: LD_INT 2
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 1
68616: NEG
68617: PUSH
68618: LD_INT 1
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PUSH
68625: LD_INT 2
68627: NEG
68628: PUSH
68629: LD_INT 0
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 2
68638: NEG
68639: PUSH
68640: LD_INT 1
68642: NEG
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 2
68650: NEG
68651: PUSH
68652: LD_INT 2
68654: NEG
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 2
68662: NEG
68663: PUSH
68664: LD_INT 3
68666: NEG
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: LD_INT 2
68674: PUSH
68675: LD_INT 1
68677: NEG
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: PUSH
68683: LD_INT 3
68685: PUSH
68686: LD_INT 0
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: LD_INT 3
68695: PUSH
68696: LD_INT 1
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: LD_INT 3
68705: PUSH
68706: LD_INT 2
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 3
68715: PUSH
68716: LD_INT 3
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 2
68725: PUSH
68726: LD_INT 3
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 2
68735: NEG
68736: PUSH
68737: LD_INT 1
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: LD_INT 3
68746: NEG
68747: PUSH
68748: LD_INT 0
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 3
68757: NEG
68758: PUSH
68759: LD_INT 1
68761: NEG
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PUSH
68767: LD_INT 3
68769: NEG
68770: PUSH
68771: LD_INT 2
68773: NEG
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: LD_INT 3
68781: NEG
68782: PUSH
68783: LD_INT 3
68785: NEG
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68822: LD_ADDR_VAR 0 42
68826: PUSH
68827: LD_INT 0
68829: PUSH
68830: LD_INT 0
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: LD_INT 0
68839: PUSH
68840: LD_INT 1
68842: NEG
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: PUSH
68848: LD_INT 1
68850: PUSH
68851: LD_INT 0
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: LD_INT 1
68860: PUSH
68861: LD_INT 1
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_INT 0
68870: PUSH
68871: LD_INT 1
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 1
68880: NEG
68881: PUSH
68882: LD_INT 0
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 1
68891: NEG
68892: PUSH
68893: LD_INT 1
68895: NEG
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: PUSH
68901: LD_INT 1
68903: NEG
68904: PUSH
68905: LD_INT 2
68907: NEG
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 0
68915: PUSH
68916: LD_INT 2
68918: NEG
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 1
68926: PUSH
68927: LD_INT 1
68929: NEG
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: PUSH
68935: LD_INT 2
68937: PUSH
68938: LD_INT 1
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 2
68947: PUSH
68948: LD_INT 2
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: PUSH
68955: LD_INT 1
68957: PUSH
68958: LD_INT 2
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: LD_INT 0
68967: PUSH
68968: LD_INT 2
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 1
68977: NEG
68978: PUSH
68979: LD_INT 1
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 2
68988: NEG
68989: PUSH
68990: LD_INT 1
68992: NEG
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 2
69000: NEG
69001: PUSH
69002: LD_INT 2
69004: NEG
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 2
69012: NEG
69013: PUSH
69014: LD_INT 3
69016: NEG
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: PUSH
69022: LD_INT 1
69024: NEG
69025: PUSH
69026: LD_INT 3
69028: NEG
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: PUSH
69034: LD_INT 0
69036: PUSH
69037: LD_INT 3
69039: NEG
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: PUSH
69045: LD_INT 1
69047: PUSH
69048: LD_INT 2
69050: NEG
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: PUSH
69056: LD_INT 3
69058: PUSH
69059: LD_INT 2
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: LD_INT 3
69068: PUSH
69069: LD_INT 3
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 2
69078: PUSH
69079: LD_INT 3
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: LD_INT 1
69088: PUSH
69089: LD_INT 3
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PUSH
69096: LD_INT 0
69098: PUSH
69099: LD_INT 3
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 1
69108: NEG
69109: PUSH
69110: LD_INT 2
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 3
69119: NEG
69120: PUSH
69121: LD_INT 2
69123: NEG
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PUSH
69129: LD_INT 3
69131: NEG
69132: PUSH
69133: LD_INT 3
69135: NEG
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: LIST
69145: LIST
69146: LIST
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69172: LD_ADDR_VAR 0 43
69176: PUSH
69177: LD_INT 0
69179: PUSH
69180: LD_INT 0
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: LD_INT 0
69189: PUSH
69190: LD_INT 1
69192: NEG
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: PUSH
69198: LD_INT 1
69200: PUSH
69201: LD_INT 0
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 1
69210: PUSH
69211: LD_INT 1
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: LD_INT 0
69220: PUSH
69221: LD_INT 1
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 1
69230: NEG
69231: PUSH
69232: LD_INT 0
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: LD_INT 1
69241: NEG
69242: PUSH
69243: LD_INT 1
69245: NEG
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: PUSH
69251: LD_INT 1
69253: NEG
69254: PUSH
69255: LD_INT 2
69257: NEG
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 0
69265: PUSH
69266: LD_INT 2
69268: NEG
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 1
69276: PUSH
69277: LD_INT 1
69279: NEG
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 2
69287: PUSH
69288: LD_INT 0
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 2
69297: PUSH
69298: LD_INT 1
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: PUSH
69305: LD_INT 1
69307: PUSH
69308: LD_INT 2
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PUSH
69315: LD_INT 0
69317: PUSH
69318: LD_INT 2
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 1
69327: NEG
69328: PUSH
69329: LD_INT 1
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: LD_INT 2
69338: NEG
69339: PUSH
69340: LD_INT 0
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 2
69349: NEG
69350: PUSH
69351: LD_INT 1
69353: NEG
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: LD_INT 1
69361: NEG
69362: PUSH
69363: LD_INT 3
69365: NEG
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 0
69373: PUSH
69374: LD_INT 3
69376: NEG
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 1
69384: PUSH
69385: LD_INT 2
69387: NEG
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: LD_INT 2
69395: PUSH
69396: LD_INT 1
69398: NEG
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 3
69406: PUSH
69407: LD_INT 0
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 3
69416: PUSH
69417: LD_INT 1
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 1
69426: PUSH
69427: LD_INT 3
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: LD_INT 0
69436: PUSH
69437: LD_INT 3
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: LD_INT 1
69446: NEG
69447: PUSH
69448: LD_INT 2
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PUSH
69455: LD_INT 2
69457: NEG
69458: PUSH
69459: LD_INT 1
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 3
69468: NEG
69469: PUSH
69470: LD_INT 0
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: LD_INT 3
69479: NEG
69480: PUSH
69481: LD_INT 1
69483: NEG
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69520: LD_ADDR_VAR 0 44
69524: PUSH
69525: LD_INT 0
69527: PUSH
69528: LD_INT 0
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: PUSH
69535: LD_INT 0
69537: PUSH
69538: LD_INT 1
69540: NEG
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 1
69548: PUSH
69549: LD_INT 0
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 1
69558: PUSH
69559: LD_INT 1
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: LD_INT 0
69568: PUSH
69569: LD_INT 1
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 1
69578: NEG
69579: PUSH
69580: LD_INT 0
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: LD_INT 1
69589: NEG
69590: PUSH
69591: LD_INT 1
69593: NEG
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: LD_INT 1
69601: NEG
69602: PUSH
69603: LD_INT 2
69605: NEG
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: PUSH
69611: LD_INT 1
69613: PUSH
69614: LD_INT 1
69616: NEG
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: LD_INT 2
69624: PUSH
69625: LD_INT 0
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 2
69634: PUSH
69635: LD_INT 1
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 2
69644: PUSH
69645: LD_INT 2
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: LD_INT 1
69654: PUSH
69655: LD_INT 2
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 1
69664: NEG
69665: PUSH
69666: LD_INT 1
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 2
69675: NEG
69676: PUSH
69677: LD_INT 0
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: PUSH
69684: LD_INT 2
69686: NEG
69687: PUSH
69688: LD_INT 1
69690: NEG
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 2
69698: NEG
69699: PUSH
69700: LD_INT 2
69702: NEG
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 2
69710: NEG
69711: PUSH
69712: LD_INT 3
69714: NEG
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: LD_INT 2
69722: PUSH
69723: LD_INT 1
69725: NEG
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: LD_INT 3
69733: PUSH
69734: LD_INT 0
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 3
69743: PUSH
69744: LD_INT 1
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: LD_INT 3
69753: PUSH
69754: LD_INT 2
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: PUSH
69761: LD_INT 3
69763: PUSH
69764: LD_INT 3
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: PUSH
69771: LD_INT 2
69773: PUSH
69774: LD_INT 3
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: PUSH
69781: LD_INT 2
69783: NEG
69784: PUSH
69785: LD_INT 1
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: PUSH
69792: LD_INT 3
69794: NEG
69795: PUSH
69796: LD_INT 0
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 3
69805: NEG
69806: PUSH
69807: LD_INT 1
69809: NEG
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: LD_INT 3
69817: NEG
69818: PUSH
69819: LD_INT 2
69821: NEG
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: LD_INT 3
69829: NEG
69830: PUSH
69831: LD_INT 3
69833: NEG
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: LIST
69843: LIST
69844: LIST
69845: LIST
69846: LIST
69847: LIST
69848: LIST
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: LIST
69861: LIST
69862: LIST
69863: LIST
69864: LIST
69865: LIST
69866: LIST
69867: LIST
69868: LIST
69869: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69870: LD_ADDR_VAR 0 45
69874: PUSH
69875: LD_INT 0
69877: PUSH
69878: LD_INT 0
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 0
69887: PUSH
69888: LD_INT 1
69890: NEG
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: LD_INT 1
69898: PUSH
69899: LD_INT 0
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 1
69908: PUSH
69909: LD_INT 1
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: PUSH
69916: LD_INT 0
69918: PUSH
69919: LD_INT 1
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PUSH
69926: LD_INT 1
69928: NEG
69929: PUSH
69930: LD_INT 0
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: PUSH
69937: LD_INT 1
69939: NEG
69940: PUSH
69941: LD_INT 1
69943: NEG
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: LD_INT 1
69951: NEG
69952: PUSH
69953: LD_INT 2
69955: NEG
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 0
69963: PUSH
69964: LD_INT 2
69966: NEG
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: PUSH
69972: LD_INT 1
69974: PUSH
69975: LD_INT 1
69977: NEG
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: LD_INT 2
69985: PUSH
69986: LD_INT 1
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: LD_INT 2
69995: PUSH
69996: LD_INT 2
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 1
70005: PUSH
70006: LD_INT 2
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 0
70015: PUSH
70016: LD_INT 2
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: LD_INT 1
70025: NEG
70026: PUSH
70027: LD_INT 1
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PUSH
70034: LD_INT 2
70036: NEG
70037: PUSH
70038: LD_INT 1
70040: NEG
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: LD_INT 2
70048: NEG
70049: PUSH
70050: LD_INT 2
70052: NEG
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 2
70060: NEG
70061: PUSH
70062: LD_INT 3
70064: NEG
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: PUSH
70070: LD_INT 1
70072: NEG
70073: PUSH
70074: LD_INT 3
70076: NEG
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: PUSH
70082: LD_INT 0
70084: PUSH
70085: LD_INT 3
70087: NEG
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: PUSH
70093: LD_INT 1
70095: PUSH
70096: LD_INT 2
70098: NEG
70099: PUSH
70100: EMPTY
70101: LIST
70102: LIST
70103: PUSH
70104: LD_INT 3
70106: PUSH
70107: LD_INT 2
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: PUSH
70114: LD_INT 3
70116: PUSH
70117: LD_INT 3
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: LD_INT 2
70126: PUSH
70127: LD_INT 3
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PUSH
70134: LD_INT 1
70136: PUSH
70137: LD_INT 3
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 0
70146: PUSH
70147: LD_INT 3
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: PUSH
70154: LD_INT 1
70156: NEG
70157: PUSH
70158: LD_INT 2
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: PUSH
70165: LD_INT 3
70167: NEG
70168: PUSH
70169: LD_INT 2
70171: NEG
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 3
70179: NEG
70180: PUSH
70181: LD_INT 3
70183: NEG
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: LIST
70193: LIST
70194: LIST
70195: LIST
70196: LIST
70197: LIST
70198: LIST
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: LIST
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: LIST
70219: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70220: LD_ADDR_VAR 0 46
70224: PUSH
70225: LD_INT 0
70227: PUSH
70228: LD_INT 0
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 0
70237: PUSH
70238: LD_INT 1
70240: NEG
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 1
70248: PUSH
70249: LD_INT 0
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PUSH
70256: LD_INT 1
70258: PUSH
70259: LD_INT 1
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: PUSH
70266: LD_INT 0
70268: PUSH
70269: LD_INT 1
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: PUSH
70276: LD_INT 1
70278: NEG
70279: PUSH
70280: LD_INT 0
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: LD_INT 1
70289: NEG
70290: PUSH
70291: LD_INT 1
70293: NEG
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: PUSH
70299: LD_INT 1
70301: NEG
70302: PUSH
70303: LD_INT 2
70305: NEG
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 0
70313: PUSH
70314: LD_INT 2
70316: NEG
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: PUSH
70322: LD_INT 1
70324: PUSH
70325: LD_INT 1
70327: NEG
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: PUSH
70333: LD_INT 2
70335: PUSH
70336: LD_INT 0
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: PUSH
70343: LD_INT 2
70345: PUSH
70346: LD_INT 1
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: PUSH
70353: LD_INT 1
70355: PUSH
70356: LD_INT 2
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 0
70365: PUSH
70366: LD_INT 2
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PUSH
70373: LD_INT 1
70375: NEG
70376: PUSH
70377: LD_INT 1
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: PUSH
70384: LD_INT 2
70386: NEG
70387: PUSH
70388: LD_INT 0
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: LD_INT 2
70397: NEG
70398: PUSH
70399: LD_INT 1
70401: NEG
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_INT 1
70409: NEG
70410: PUSH
70411: LD_INT 3
70413: NEG
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: LD_INT 0
70421: PUSH
70422: LD_INT 3
70424: NEG
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: PUSH
70430: LD_INT 1
70432: PUSH
70433: LD_INT 2
70435: NEG
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: PUSH
70441: LD_INT 2
70443: PUSH
70444: LD_INT 1
70446: NEG
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: PUSH
70452: LD_INT 3
70454: PUSH
70455: LD_INT 0
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: LD_INT 3
70464: PUSH
70465: LD_INT 1
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: PUSH
70472: LD_INT 1
70474: PUSH
70475: LD_INT 3
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: PUSH
70482: LD_INT 0
70484: PUSH
70485: LD_INT 3
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PUSH
70492: LD_INT 1
70494: NEG
70495: PUSH
70496: LD_INT 2
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: PUSH
70503: LD_INT 2
70505: NEG
70506: PUSH
70507: LD_INT 1
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: PUSH
70514: LD_INT 3
70516: NEG
70517: PUSH
70518: LD_INT 0
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: PUSH
70525: LD_INT 3
70527: NEG
70528: PUSH
70529: LD_INT 1
70531: NEG
70532: PUSH
70533: EMPTY
70534: LIST
70535: LIST
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: LIST
70541: LIST
70542: LIST
70543: LIST
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: LIST
70551: LIST
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: LIST
70566: LIST
70567: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70568: LD_ADDR_VAR 0 47
70572: PUSH
70573: LD_INT 0
70575: PUSH
70576: LD_INT 0
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: PUSH
70583: LD_INT 0
70585: PUSH
70586: LD_INT 1
70588: NEG
70589: PUSH
70590: EMPTY
70591: LIST
70592: LIST
70593: PUSH
70594: LD_INT 1
70596: PUSH
70597: LD_INT 0
70599: PUSH
70600: EMPTY
70601: LIST
70602: LIST
70603: PUSH
70604: LD_INT 1
70606: PUSH
70607: LD_INT 1
70609: PUSH
70610: EMPTY
70611: LIST
70612: LIST
70613: PUSH
70614: LD_INT 0
70616: PUSH
70617: LD_INT 1
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: PUSH
70624: LD_INT 1
70626: NEG
70627: PUSH
70628: LD_INT 0
70630: PUSH
70631: EMPTY
70632: LIST
70633: LIST
70634: PUSH
70635: LD_INT 1
70637: NEG
70638: PUSH
70639: LD_INT 1
70641: NEG
70642: PUSH
70643: EMPTY
70644: LIST
70645: LIST
70646: PUSH
70647: LD_INT 1
70649: NEG
70650: PUSH
70651: LD_INT 2
70653: NEG
70654: PUSH
70655: EMPTY
70656: LIST
70657: LIST
70658: PUSH
70659: LD_INT 0
70661: PUSH
70662: LD_INT 2
70664: NEG
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: PUSH
70670: LD_INT 1
70672: PUSH
70673: LD_INT 1
70675: NEG
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PUSH
70681: LD_INT 2
70683: NEG
70684: PUSH
70685: LD_INT 1
70687: NEG
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: PUSH
70693: LD_INT 2
70695: NEG
70696: PUSH
70697: LD_INT 2
70699: NEG
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70719: LD_ADDR_VAR 0 48
70723: PUSH
70724: LD_INT 0
70726: PUSH
70727: LD_INT 0
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: LD_INT 0
70736: PUSH
70737: LD_INT 1
70739: NEG
70740: PUSH
70741: EMPTY
70742: LIST
70743: LIST
70744: PUSH
70745: LD_INT 1
70747: PUSH
70748: LD_INT 0
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: PUSH
70755: LD_INT 1
70757: PUSH
70758: LD_INT 1
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_INT 0
70767: PUSH
70768: LD_INT 1
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 1
70777: NEG
70778: PUSH
70779: LD_INT 0
70781: PUSH
70782: EMPTY
70783: LIST
70784: LIST
70785: PUSH
70786: LD_INT 1
70788: NEG
70789: PUSH
70790: LD_INT 1
70792: NEG
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: PUSH
70798: LD_INT 1
70800: NEG
70801: PUSH
70802: LD_INT 2
70804: NEG
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: PUSH
70810: LD_INT 0
70812: PUSH
70813: LD_INT 2
70815: NEG
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: PUSH
70821: LD_INT 1
70823: PUSH
70824: LD_INT 1
70826: NEG
70827: PUSH
70828: EMPTY
70829: LIST
70830: LIST
70831: PUSH
70832: LD_INT 2
70834: PUSH
70835: LD_INT 0
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: LD_INT 2
70844: PUSH
70845: LD_INT 1
70847: PUSH
70848: EMPTY
70849: LIST
70850: LIST
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70866: LD_ADDR_VAR 0 49
70870: PUSH
70871: LD_INT 0
70873: PUSH
70874: LD_INT 0
70876: PUSH
70877: EMPTY
70878: LIST
70879: LIST
70880: PUSH
70881: LD_INT 0
70883: PUSH
70884: LD_INT 1
70886: NEG
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PUSH
70892: LD_INT 1
70894: PUSH
70895: LD_INT 0
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PUSH
70902: LD_INT 1
70904: PUSH
70905: LD_INT 1
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PUSH
70912: LD_INT 0
70914: PUSH
70915: LD_INT 1
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: PUSH
70922: LD_INT 1
70924: NEG
70925: PUSH
70926: LD_INT 0
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PUSH
70933: LD_INT 1
70935: NEG
70936: PUSH
70937: LD_INT 1
70939: NEG
70940: PUSH
70941: EMPTY
70942: LIST
70943: LIST
70944: PUSH
70945: LD_INT 1
70947: PUSH
70948: LD_INT 1
70950: NEG
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: LD_INT 2
70958: PUSH
70959: LD_INT 0
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: LD_INT 2
70968: PUSH
70969: LD_INT 1
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 2
70978: PUSH
70979: LD_INT 2
70981: PUSH
70982: EMPTY
70983: LIST
70984: LIST
70985: PUSH
70986: LD_INT 1
70988: PUSH
70989: LD_INT 2
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: LIST
71000: LIST
71001: LIST
71002: LIST
71003: LIST
71004: LIST
71005: LIST
71006: LIST
71007: LIST
71008: LIST
71009: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
71010: LD_ADDR_VAR 0 50
71014: PUSH
71015: LD_INT 0
71017: PUSH
71018: LD_INT 0
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: PUSH
71025: LD_INT 0
71027: PUSH
71028: LD_INT 1
71030: NEG
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PUSH
71036: LD_INT 1
71038: PUSH
71039: LD_INT 0
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 1
71048: PUSH
71049: LD_INT 1
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PUSH
71056: LD_INT 0
71058: PUSH
71059: LD_INT 1
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PUSH
71066: LD_INT 1
71068: NEG
71069: PUSH
71070: LD_INT 0
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: PUSH
71077: LD_INT 1
71079: NEG
71080: PUSH
71081: LD_INT 1
71083: NEG
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: PUSH
71089: LD_INT 2
71091: PUSH
71092: LD_INT 1
71094: PUSH
71095: EMPTY
71096: LIST
71097: LIST
71098: PUSH
71099: LD_INT 2
71101: PUSH
71102: LD_INT 2
71104: PUSH
71105: EMPTY
71106: LIST
71107: LIST
71108: PUSH
71109: LD_INT 1
71111: PUSH
71112: LD_INT 2
71114: PUSH
71115: EMPTY
71116: LIST
71117: LIST
71118: PUSH
71119: LD_INT 0
71121: PUSH
71122: LD_INT 2
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: PUSH
71129: LD_INT 1
71131: NEG
71132: PUSH
71133: LD_INT 1
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: LIST
71144: LIST
71145: LIST
71146: LIST
71147: LIST
71148: LIST
71149: LIST
71150: LIST
71151: LIST
71152: LIST
71153: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
71154: LD_ADDR_VAR 0 51
71158: PUSH
71159: LD_INT 0
71161: PUSH
71162: LD_INT 0
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: PUSH
71169: LD_INT 0
71171: PUSH
71172: LD_INT 1
71174: NEG
71175: PUSH
71176: EMPTY
71177: LIST
71178: LIST
71179: PUSH
71180: LD_INT 1
71182: PUSH
71183: LD_INT 0
71185: PUSH
71186: EMPTY
71187: LIST
71188: LIST
71189: PUSH
71190: LD_INT 1
71192: PUSH
71193: LD_INT 1
71195: PUSH
71196: EMPTY
71197: LIST
71198: LIST
71199: PUSH
71200: LD_INT 0
71202: PUSH
71203: LD_INT 1
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: LD_INT 1
71212: NEG
71213: PUSH
71214: LD_INT 0
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PUSH
71221: LD_INT 1
71223: NEG
71224: PUSH
71225: LD_INT 1
71227: NEG
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: PUSH
71233: LD_INT 1
71235: PUSH
71236: LD_INT 2
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: PUSH
71243: LD_INT 0
71245: PUSH
71246: LD_INT 2
71248: PUSH
71249: EMPTY
71250: LIST
71251: LIST
71252: PUSH
71253: LD_INT 1
71255: NEG
71256: PUSH
71257: LD_INT 1
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PUSH
71264: LD_INT 2
71266: NEG
71267: PUSH
71268: LD_INT 0
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: PUSH
71275: LD_INT 2
71277: NEG
71278: PUSH
71279: LD_INT 1
71281: NEG
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: EMPTY
71288: LIST
71289: LIST
71290: LIST
71291: LIST
71292: LIST
71293: LIST
71294: LIST
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: LIST
71300: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71301: LD_ADDR_VAR 0 52
71305: PUSH
71306: LD_INT 0
71308: PUSH
71309: LD_INT 0
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: PUSH
71316: LD_INT 0
71318: PUSH
71319: LD_INT 1
71321: NEG
71322: PUSH
71323: EMPTY
71324: LIST
71325: LIST
71326: PUSH
71327: LD_INT 1
71329: PUSH
71330: LD_INT 0
71332: PUSH
71333: EMPTY
71334: LIST
71335: LIST
71336: PUSH
71337: LD_INT 1
71339: PUSH
71340: LD_INT 1
71342: PUSH
71343: EMPTY
71344: LIST
71345: LIST
71346: PUSH
71347: LD_INT 0
71349: PUSH
71350: LD_INT 1
71352: PUSH
71353: EMPTY
71354: LIST
71355: LIST
71356: PUSH
71357: LD_INT 1
71359: NEG
71360: PUSH
71361: LD_INT 0
71363: PUSH
71364: EMPTY
71365: LIST
71366: LIST
71367: PUSH
71368: LD_INT 1
71370: NEG
71371: PUSH
71372: LD_INT 1
71374: NEG
71375: PUSH
71376: EMPTY
71377: LIST
71378: LIST
71379: PUSH
71380: LD_INT 1
71382: NEG
71383: PUSH
71384: LD_INT 2
71386: NEG
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: PUSH
71392: LD_INT 1
71394: NEG
71395: PUSH
71396: LD_INT 1
71398: PUSH
71399: EMPTY
71400: LIST
71401: LIST
71402: PUSH
71403: LD_INT 2
71405: NEG
71406: PUSH
71407: LD_INT 0
71409: PUSH
71410: EMPTY
71411: LIST
71412: LIST
71413: PUSH
71414: LD_INT 2
71416: NEG
71417: PUSH
71418: LD_INT 1
71420: NEG
71421: PUSH
71422: EMPTY
71423: LIST
71424: LIST
71425: PUSH
71426: LD_INT 2
71428: NEG
71429: PUSH
71430: LD_INT 2
71432: NEG
71433: PUSH
71434: EMPTY
71435: LIST
71436: LIST
71437: PUSH
71438: EMPTY
71439: LIST
71440: LIST
71441: LIST
71442: LIST
71443: LIST
71444: LIST
71445: LIST
71446: LIST
71447: LIST
71448: LIST
71449: LIST
71450: LIST
71451: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71452: LD_ADDR_VAR 0 53
71456: PUSH
71457: LD_INT 0
71459: PUSH
71460: LD_INT 0
71462: PUSH
71463: EMPTY
71464: LIST
71465: LIST
71466: PUSH
71467: LD_INT 0
71469: PUSH
71470: LD_INT 1
71472: NEG
71473: PUSH
71474: EMPTY
71475: LIST
71476: LIST
71477: PUSH
71478: LD_INT 1
71480: PUSH
71481: LD_INT 0
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: PUSH
71488: LD_INT 1
71490: PUSH
71491: LD_INT 1
71493: PUSH
71494: EMPTY
71495: LIST
71496: LIST
71497: PUSH
71498: LD_INT 0
71500: PUSH
71501: LD_INT 1
71503: PUSH
71504: EMPTY
71505: LIST
71506: LIST
71507: PUSH
71508: LD_INT 1
71510: NEG
71511: PUSH
71512: LD_INT 0
71514: PUSH
71515: EMPTY
71516: LIST
71517: LIST
71518: PUSH
71519: LD_INT 1
71521: NEG
71522: PUSH
71523: LD_INT 1
71525: NEG
71526: PUSH
71527: EMPTY
71528: LIST
71529: LIST
71530: PUSH
71531: LD_INT 1
71533: NEG
71534: PUSH
71535: LD_INT 2
71537: NEG
71538: PUSH
71539: EMPTY
71540: LIST
71541: LIST
71542: PUSH
71543: LD_INT 0
71545: PUSH
71546: LD_INT 2
71548: NEG
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: PUSH
71554: LD_INT 1
71556: PUSH
71557: LD_INT 1
71559: NEG
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: LD_INT 2
71567: PUSH
71568: LD_INT 0
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PUSH
71575: LD_INT 2
71577: PUSH
71578: LD_INT 1
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: PUSH
71585: LD_INT 2
71587: PUSH
71588: LD_INT 2
71590: PUSH
71591: EMPTY
71592: LIST
71593: LIST
71594: PUSH
71595: LD_INT 1
71597: PUSH
71598: LD_INT 2
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: PUSH
71605: LD_INT 0
71607: PUSH
71608: LD_INT 2
71610: PUSH
71611: EMPTY
71612: LIST
71613: LIST
71614: PUSH
71615: LD_INT 1
71617: NEG
71618: PUSH
71619: LD_INT 1
71621: PUSH
71622: EMPTY
71623: LIST
71624: LIST
71625: PUSH
71626: LD_INT 2
71628: NEG
71629: PUSH
71630: LD_INT 0
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PUSH
71637: LD_INT 2
71639: NEG
71640: PUSH
71641: LD_INT 1
71643: NEG
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: PUSH
71649: LD_INT 2
71651: NEG
71652: PUSH
71653: LD_INT 2
71655: NEG
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: LIST
71674: LIST
71675: LIST
71676: LIST
71677: LIST
71678: LIST
71679: LIST
71680: LIST
71681: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71682: LD_ADDR_VAR 0 54
71686: PUSH
71687: LD_INT 0
71689: PUSH
71690: LD_INT 0
71692: PUSH
71693: EMPTY
71694: LIST
71695: LIST
71696: PUSH
71697: LD_INT 0
71699: PUSH
71700: LD_INT 1
71702: NEG
71703: PUSH
71704: EMPTY
71705: LIST
71706: LIST
71707: PUSH
71708: LD_INT 1
71710: PUSH
71711: LD_INT 0
71713: PUSH
71714: EMPTY
71715: LIST
71716: LIST
71717: PUSH
71718: LD_INT 1
71720: PUSH
71721: LD_INT 1
71723: PUSH
71724: EMPTY
71725: LIST
71726: LIST
71727: PUSH
71728: LD_INT 0
71730: PUSH
71731: LD_INT 1
71733: PUSH
71734: EMPTY
71735: LIST
71736: LIST
71737: PUSH
71738: LD_INT 1
71740: NEG
71741: PUSH
71742: LD_INT 0
71744: PUSH
71745: EMPTY
71746: LIST
71747: LIST
71748: PUSH
71749: LD_INT 1
71751: NEG
71752: PUSH
71753: LD_INT 1
71755: NEG
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: PUSH
71761: LD_INT 1
71763: NEG
71764: PUSH
71765: LD_INT 2
71767: NEG
71768: PUSH
71769: EMPTY
71770: LIST
71771: LIST
71772: PUSH
71773: LD_INT 0
71775: PUSH
71776: LD_INT 2
71778: NEG
71779: PUSH
71780: EMPTY
71781: LIST
71782: LIST
71783: PUSH
71784: LD_INT 1
71786: PUSH
71787: LD_INT 1
71789: NEG
71790: PUSH
71791: EMPTY
71792: LIST
71793: LIST
71794: PUSH
71795: LD_INT 2
71797: PUSH
71798: LD_INT 0
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: PUSH
71805: LD_INT 2
71807: PUSH
71808: LD_INT 1
71810: PUSH
71811: EMPTY
71812: LIST
71813: LIST
71814: PUSH
71815: LD_INT 2
71817: PUSH
71818: LD_INT 2
71820: PUSH
71821: EMPTY
71822: LIST
71823: LIST
71824: PUSH
71825: LD_INT 1
71827: PUSH
71828: LD_INT 2
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: PUSH
71835: LD_INT 0
71837: PUSH
71838: LD_INT 2
71840: PUSH
71841: EMPTY
71842: LIST
71843: LIST
71844: PUSH
71845: LD_INT 1
71847: NEG
71848: PUSH
71849: LD_INT 1
71851: PUSH
71852: EMPTY
71853: LIST
71854: LIST
71855: PUSH
71856: LD_INT 2
71858: NEG
71859: PUSH
71860: LD_INT 0
71862: PUSH
71863: EMPTY
71864: LIST
71865: LIST
71866: PUSH
71867: LD_INT 2
71869: NEG
71870: PUSH
71871: LD_INT 1
71873: NEG
71874: PUSH
71875: EMPTY
71876: LIST
71877: LIST
71878: PUSH
71879: LD_INT 2
71881: NEG
71882: PUSH
71883: LD_INT 2
71885: NEG
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: PUSH
71891: EMPTY
71892: LIST
71893: LIST
71894: LIST
71895: LIST
71896: LIST
71897: LIST
71898: LIST
71899: LIST
71900: LIST
71901: LIST
71902: LIST
71903: LIST
71904: LIST
71905: LIST
71906: LIST
71907: LIST
71908: LIST
71909: LIST
71910: LIST
71911: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71912: LD_ADDR_VAR 0 55
71916: PUSH
71917: LD_INT 0
71919: PUSH
71920: LD_INT 0
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: LD_INT 0
71929: PUSH
71930: LD_INT 1
71932: NEG
71933: PUSH
71934: EMPTY
71935: LIST
71936: LIST
71937: PUSH
71938: LD_INT 1
71940: PUSH
71941: LD_INT 0
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: PUSH
71948: LD_INT 1
71950: PUSH
71951: LD_INT 1
71953: PUSH
71954: EMPTY
71955: LIST
71956: LIST
71957: PUSH
71958: LD_INT 0
71960: PUSH
71961: LD_INT 1
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: PUSH
71968: LD_INT 1
71970: NEG
71971: PUSH
71972: LD_INT 0
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: PUSH
71979: LD_INT 1
71981: NEG
71982: PUSH
71983: LD_INT 1
71985: NEG
71986: PUSH
71987: EMPTY
71988: LIST
71989: LIST
71990: PUSH
71991: LD_INT 1
71993: NEG
71994: PUSH
71995: LD_INT 2
71997: NEG
71998: PUSH
71999: EMPTY
72000: LIST
72001: LIST
72002: PUSH
72003: LD_INT 0
72005: PUSH
72006: LD_INT 2
72008: NEG
72009: PUSH
72010: EMPTY
72011: LIST
72012: LIST
72013: PUSH
72014: LD_INT 1
72016: PUSH
72017: LD_INT 1
72019: NEG
72020: PUSH
72021: EMPTY
72022: LIST
72023: LIST
72024: PUSH
72025: LD_INT 2
72027: PUSH
72028: LD_INT 0
72030: PUSH
72031: EMPTY
72032: LIST
72033: LIST
72034: PUSH
72035: LD_INT 2
72037: PUSH
72038: LD_INT 1
72040: PUSH
72041: EMPTY
72042: LIST
72043: LIST
72044: PUSH
72045: LD_INT 2
72047: PUSH
72048: LD_INT 2
72050: PUSH
72051: EMPTY
72052: LIST
72053: LIST
72054: PUSH
72055: LD_INT 1
72057: PUSH
72058: LD_INT 2
72060: PUSH
72061: EMPTY
72062: LIST
72063: LIST
72064: PUSH
72065: LD_INT 0
72067: PUSH
72068: LD_INT 2
72070: PUSH
72071: EMPTY
72072: LIST
72073: LIST
72074: PUSH
72075: LD_INT 1
72077: NEG
72078: PUSH
72079: LD_INT 1
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: PUSH
72086: LD_INT 2
72088: NEG
72089: PUSH
72090: LD_INT 0
72092: PUSH
72093: EMPTY
72094: LIST
72095: LIST
72096: PUSH
72097: LD_INT 2
72099: NEG
72100: PUSH
72101: LD_INT 1
72103: NEG
72104: PUSH
72105: EMPTY
72106: LIST
72107: LIST
72108: PUSH
72109: LD_INT 2
72111: NEG
72112: PUSH
72113: LD_INT 2
72115: NEG
72116: PUSH
72117: EMPTY
72118: LIST
72119: LIST
72120: PUSH
72121: EMPTY
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72142: LD_ADDR_VAR 0 56
72146: PUSH
72147: LD_INT 0
72149: PUSH
72150: LD_INT 0
72152: PUSH
72153: EMPTY
72154: LIST
72155: LIST
72156: PUSH
72157: LD_INT 0
72159: PUSH
72160: LD_INT 1
72162: NEG
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: PUSH
72168: LD_INT 1
72170: PUSH
72171: LD_INT 0
72173: PUSH
72174: EMPTY
72175: LIST
72176: LIST
72177: PUSH
72178: LD_INT 1
72180: PUSH
72181: LD_INT 1
72183: PUSH
72184: EMPTY
72185: LIST
72186: LIST
72187: PUSH
72188: LD_INT 0
72190: PUSH
72191: LD_INT 1
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: PUSH
72198: LD_INT 1
72200: NEG
72201: PUSH
72202: LD_INT 0
72204: PUSH
72205: EMPTY
72206: LIST
72207: LIST
72208: PUSH
72209: LD_INT 1
72211: NEG
72212: PUSH
72213: LD_INT 1
72215: NEG
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: PUSH
72221: LD_INT 1
72223: NEG
72224: PUSH
72225: LD_INT 2
72227: NEG
72228: PUSH
72229: EMPTY
72230: LIST
72231: LIST
72232: PUSH
72233: LD_INT 0
72235: PUSH
72236: LD_INT 2
72238: NEG
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: PUSH
72244: LD_INT 1
72246: PUSH
72247: LD_INT 1
72249: NEG
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PUSH
72255: LD_INT 2
72257: PUSH
72258: LD_INT 0
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: PUSH
72265: LD_INT 2
72267: PUSH
72268: LD_INT 1
72270: PUSH
72271: EMPTY
72272: LIST
72273: LIST
72274: PUSH
72275: LD_INT 2
72277: PUSH
72278: LD_INT 2
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: PUSH
72285: LD_INT 1
72287: PUSH
72288: LD_INT 2
72290: PUSH
72291: EMPTY
72292: LIST
72293: LIST
72294: PUSH
72295: LD_INT 0
72297: PUSH
72298: LD_INT 2
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: PUSH
72305: LD_INT 1
72307: NEG
72308: PUSH
72309: LD_INT 1
72311: PUSH
72312: EMPTY
72313: LIST
72314: LIST
72315: PUSH
72316: LD_INT 2
72318: NEG
72319: PUSH
72320: LD_INT 0
72322: PUSH
72323: EMPTY
72324: LIST
72325: LIST
72326: PUSH
72327: LD_INT 2
72329: NEG
72330: PUSH
72331: LD_INT 1
72333: NEG
72334: PUSH
72335: EMPTY
72336: LIST
72337: LIST
72338: PUSH
72339: LD_INT 2
72341: NEG
72342: PUSH
72343: LD_INT 2
72345: NEG
72346: PUSH
72347: EMPTY
72348: LIST
72349: LIST
72350: PUSH
72351: EMPTY
72352: LIST
72353: LIST
72354: LIST
72355: LIST
72356: LIST
72357: LIST
72358: LIST
72359: LIST
72360: LIST
72361: LIST
72362: LIST
72363: LIST
72364: LIST
72365: LIST
72366: LIST
72367: LIST
72368: LIST
72369: LIST
72370: LIST
72371: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72372: LD_ADDR_VAR 0 57
72376: PUSH
72377: LD_INT 0
72379: PUSH
72380: LD_INT 0
72382: PUSH
72383: EMPTY
72384: LIST
72385: LIST
72386: PUSH
72387: LD_INT 0
72389: PUSH
72390: LD_INT 1
72392: NEG
72393: PUSH
72394: EMPTY
72395: LIST
72396: LIST
72397: PUSH
72398: LD_INT 1
72400: PUSH
72401: LD_INT 0
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: LD_INT 1
72410: PUSH
72411: LD_INT 1
72413: PUSH
72414: EMPTY
72415: LIST
72416: LIST
72417: PUSH
72418: LD_INT 0
72420: PUSH
72421: LD_INT 1
72423: PUSH
72424: EMPTY
72425: LIST
72426: LIST
72427: PUSH
72428: LD_INT 1
72430: NEG
72431: PUSH
72432: LD_INT 0
72434: PUSH
72435: EMPTY
72436: LIST
72437: LIST
72438: PUSH
72439: LD_INT 1
72441: NEG
72442: PUSH
72443: LD_INT 1
72445: NEG
72446: PUSH
72447: EMPTY
72448: LIST
72449: LIST
72450: PUSH
72451: LD_INT 1
72453: NEG
72454: PUSH
72455: LD_INT 2
72457: NEG
72458: PUSH
72459: EMPTY
72460: LIST
72461: LIST
72462: PUSH
72463: LD_INT 0
72465: PUSH
72466: LD_INT 2
72468: NEG
72469: PUSH
72470: EMPTY
72471: LIST
72472: LIST
72473: PUSH
72474: LD_INT 1
72476: PUSH
72477: LD_INT 1
72479: NEG
72480: PUSH
72481: EMPTY
72482: LIST
72483: LIST
72484: PUSH
72485: LD_INT 2
72487: PUSH
72488: LD_INT 0
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: PUSH
72495: LD_INT 2
72497: PUSH
72498: LD_INT 1
72500: PUSH
72501: EMPTY
72502: LIST
72503: LIST
72504: PUSH
72505: LD_INT 2
72507: PUSH
72508: LD_INT 2
72510: PUSH
72511: EMPTY
72512: LIST
72513: LIST
72514: PUSH
72515: LD_INT 1
72517: PUSH
72518: LD_INT 2
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: PUSH
72525: LD_INT 0
72527: PUSH
72528: LD_INT 2
72530: PUSH
72531: EMPTY
72532: LIST
72533: LIST
72534: PUSH
72535: LD_INT 1
72537: NEG
72538: PUSH
72539: LD_INT 1
72541: PUSH
72542: EMPTY
72543: LIST
72544: LIST
72545: PUSH
72546: LD_INT 2
72548: NEG
72549: PUSH
72550: LD_INT 0
72552: PUSH
72553: EMPTY
72554: LIST
72555: LIST
72556: PUSH
72557: LD_INT 2
72559: NEG
72560: PUSH
72561: LD_INT 1
72563: NEG
72564: PUSH
72565: EMPTY
72566: LIST
72567: LIST
72568: PUSH
72569: LD_INT 2
72571: NEG
72572: PUSH
72573: LD_INT 2
72575: NEG
72576: PUSH
72577: EMPTY
72578: LIST
72579: LIST
72580: PUSH
72581: EMPTY
72582: LIST
72583: LIST
72584: LIST
72585: LIST
72586: LIST
72587: LIST
72588: LIST
72589: LIST
72590: LIST
72591: LIST
72592: LIST
72593: LIST
72594: LIST
72595: LIST
72596: LIST
72597: LIST
72598: LIST
72599: LIST
72600: LIST
72601: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72602: LD_ADDR_VAR 0 58
72606: PUSH
72607: LD_INT 0
72609: PUSH
72610: LD_INT 0
72612: PUSH
72613: EMPTY
72614: LIST
72615: LIST
72616: PUSH
72617: LD_INT 0
72619: PUSH
72620: LD_INT 1
72622: NEG
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: PUSH
72628: LD_INT 1
72630: PUSH
72631: LD_INT 0
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: PUSH
72638: LD_INT 1
72640: PUSH
72641: LD_INT 1
72643: PUSH
72644: EMPTY
72645: LIST
72646: LIST
72647: PUSH
72648: LD_INT 0
72650: PUSH
72651: LD_INT 1
72653: PUSH
72654: EMPTY
72655: LIST
72656: LIST
72657: PUSH
72658: LD_INT 1
72660: NEG
72661: PUSH
72662: LD_INT 0
72664: PUSH
72665: EMPTY
72666: LIST
72667: LIST
72668: PUSH
72669: LD_INT 1
72671: NEG
72672: PUSH
72673: LD_INT 1
72675: NEG
72676: PUSH
72677: EMPTY
72678: LIST
72679: LIST
72680: PUSH
72681: LD_INT 1
72683: NEG
72684: PUSH
72685: LD_INT 2
72687: NEG
72688: PUSH
72689: EMPTY
72690: LIST
72691: LIST
72692: PUSH
72693: LD_INT 0
72695: PUSH
72696: LD_INT 2
72698: NEG
72699: PUSH
72700: EMPTY
72701: LIST
72702: LIST
72703: PUSH
72704: LD_INT 1
72706: PUSH
72707: LD_INT 1
72709: NEG
72710: PUSH
72711: EMPTY
72712: LIST
72713: LIST
72714: PUSH
72715: LD_INT 2
72717: PUSH
72718: LD_INT 0
72720: PUSH
72721: EMPTY
72722: LIST
72723: LIST
72724: PUSH
72725: LD_INT 2
72727: PUSH
72728: LD_INT 1
72730: PUSH
72731: EMPTY
72732: LIST
72733: LIST
72734: PUSH
72735: LD_INT 2
72737: PUSH
72738: LD_INT 2
72740: PUSH
72741: EMPTY
72742: LIST
72743: LIST
72744: PUSH
72745: LD_INT 1
72747: PUSH
72748: LD_INT 2
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: PUSH
72755: LD_INT 0
72757: PUSH
72758: LD_INT 2
72760: PUSH
72761: EMPTY
72762: LIST
72763: LIST
72764: PUSH
72765: LD_INT 1
72767: NEG
72768: PUSH
72769: LD_INT 1
72771: PUSH
72772: EMPTY
72773: LIST
72774: LIST
72775: PUSH
72776: LD_INT 2
72778: NEG
72779: PUSH
72780: LD_INT 0
72782: PUSH
72783: EMPTY
72784: LIST
72785: LIST
72786: PUSH
72787: LD_INT 2
72789: NEG
72790: PUSH
72791: LD_INT 1
72793: NEG
72794: PUSH
72795: EMPTY
72796: LIST
72797: LIST
72798: PUSH
72799: LD_INT 2
72801: NEG
72802: PUSH
72803: LD_INT 2
72805: NEG
72806: PUSH
72807: EMPTY
72808: LIST
72809: LIST
72810: PUSH
72811: EMPTY
72812: LIST
72813: LIST
72814: LIST
72815: LIST
72816: LIST
72817: LIST
72818: LIST
72819: LIST
72820: LIST
72821: LIST
72822: LIST
72823: LIST
72824: LIST
72825: LIST
72826: LIST
72827: LIST
72828: LIST
72829: LIST
72830: LIST
72831: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72832: LD_ADDR_VAR 0 59
72836: PUSH
72837: LD_INT 0
72839: PUSH
72840: LD_INT 0
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: PUSH
72847: LD_INT 0
72849: PUSH
72850: LD_INT 1
72852: NEG
72853: PUSH
72854: EMPTY
72855: LIST
72856: LIST
72857: PUSH
72858: LD_INT 1
72860: PUSH
72861: LD_INT 0
72863: PUSH
72864: EMPTY
72865: LIST
72866: LIST
72867: PUSH
72868: LD_INT 1
72870: PUSH
72871: LD_INT 1
72873: PUSH
72874: EMPTY
72875: LIST
72876: LIST
72877: PUSH
72878: LD_INT 0
72880: PUSH
72881: LD_INT 1
72883: PUSH
72884: EMPTY
72885: LIST
72886: LIST
72887: PUSH
72888: LD_INT 1
72890: NEG
72891: PUSH
72892: LD_INT 0
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: PUSH
72899: LD_INT 1
72901: NEG
72902: PUSH
72903: LD_INT 1
72905: NEG
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: PUSH
72911: EMPTY
72912: LIST
72913: LIST
72914: LIST
72915: LIST
72916: LIST
72917: LIST
72918: LIST
72919: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72920: LD_ADDR_VAR 0 60
72924: PUSH
72925: LD_INT 0
72927: PUSH
72928: LD_INT 0
72930: PUSH
72931: EMPTY
72932: LIST
72933: LIST
72934: PUSH
72935: LD_INT 0
72937: PUSH
72938: LD_INT 1
72940: NEG
72941: PUSH
72942: EMPTY
72943: LIST
72944: LIST
72945: PUSH
72946: LD_INT 1
72948: PUSH
72949: LD_INT 0
72951: PUSH
72952: EMPTY
72953: LIST
72954: LIST
72955: PUSH
72956: LD_INT 1
72958: PUSH
72959: LD_INT 1
72961: PUSH
72962: EMPTY
72963: LIST
72964: LIST
72965: PUSH
72966: LD_INT 0
72968: PUSH
72969: LD_INT 1
72971: PUSH
72972: EMPTY
72973: LIST
72974: LIST
72975: PUSH
72976: LD_INT 1
72978: NEG
72979: PUSH
72980: LD_INT 0
72982: PUSH
72983: EMPTY
72984: LIST
72985: LIST
72986: PUSH
72987: LD_INT 1
72989: NEG
72990: PUSH
72991: LD_INT 1
72993: NEG
72994: PUSH
72995: EMPTY
72996: LIST
72997: LIST
72998: PUSH
72999: EMPTY
73000: LIST
73001: LIST
73002: LIST
73003: LIST
73004: LIST
73005: LIST
73006: LIST
73007: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73008: LD_ADDR_VAR 0 61
73012: PUSH
73013: LD_INT 0
73015: PUSH
73016: LD_INT 0
73018: PUSH
73019: EMPTY
73020: LIST
73021: LIST
73022: PUSH
73023: LD_INT 0
73025: PUSH
73026: LD_INT 1
73028: NEG
73029: PUSH
73030: EMPTY
73031: LIST
73032: LIST
73033: PUSH
73034: LD_INT 1
73036: PUSH
73037: LD_INT 0
73039: PUSH
73040: EMPTY
73041: LIST
73042: LIST
73043: PUSH
73044: LD_INT 1
73046: PUSH
73047: LD_INT 1
73049: PUSH
73050: EMPTY
73051: LIST
73052: LIST
73053: PUSH
73054: LD_INT 0
73056: PUSH
73057: LD_INT 1
73059: PUSH
73060: EMPTY
73061: LIST
73062: LIST
73063: PUSH
73064: LD_INT 1
73066: NEG
73067: PUSH
73068: LD_INT 0
73070: PUSH
73071: EMPTY
73072: LIST
73073: LIST
73074: PUSH
73075: LD_INT 1
73077: NEG
73078: PUSH
73079: LD_INT 1
73081: NEG
73082: PUSH
73083: EMPTY
73084: LIST
73085: LIST
73086: PUSH
73087: EMPTY
73088: LIST
73089: LIST
73090: LIST
73091: LIST
73092: LIST
73093: LIST
73094: LIST
73095: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73096: LD_ADDR_VAR 0 62
73100: PUSH
73101: LD_INT 0
73103: PUSH
73104: LD_INT 0
73106: PUSH
73107: EMPTY
73108: LIST
73109: LIST
73110: PUSH
73111: LD_INT 0
73113: PUSH
73114: LD_INT 1
73116: NEG
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: PUSH
73122: LD_INT 1
73124: PUSH
73125: LD_INT 0
73127: PUSH
73128: EMPTY
73129: LIST
73130: LIST
73131: PUSH
73132: LD_INT 1
73134: PUSH
73135: LD_INT 1
73137: PUSH
73138: EMPTY
73139: LIST
73140: LIST
73141: PUSH
73142: LD_INT 0
73144: PUSH
73145: LD_INT 1
73147: PUSH
73148: EMPTY
73149: LIST
73150: LIST
73151: PUSH
73152: LD_INT 1
73154: NEG
73155: PUSH
73156: LD_INT 0
73158: PUSH
73159: EMPTY
73160: LIST
73161: LIST
73162: PUSH
73163: LD_INT 1
73165: NEG
73166: PUSH
73167: LD_INT 1
73169: NEG
73170: PUSH
73171: EMPTY
73172: LIST
73173: LIST
73174: PUSH
73175: EMPTY
73176: LIST
73177: LIST
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: LIST
73183: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73184: LD_ADDR_VAR 0 63
73188: PUSH
73189: LD_INT 0
73191: PUSH
73192: LD_INT 0
73194: PUSH
73195: EMPTY
73196: LIST
73197: LIST
73198: PUSH
73199: LD_INT 0
73201: PUSH
73202: LD_INT 1
73204: NEG
73205: PUSH
73206: EMPTY
73207: LIST
73208: LIST
73209: PUSH
73210: LD_INT 1
73212: PUSH
73213: LD_INT 0
73215: PUSH
73216: EMPTY
73217: LIST
73218: LIST
73219: PUSH
73220: LD_INT 1
73222: PUSH
73223: LD_INT 1
73225: PUSH
73226: EMPTY
73227: LIST
73228: LIST
73229: PUSH
73230: LD_INT 0
73232: PUSH
73233: LD_INT 1
73235: PUSH
73236: EMPTY
73237: LIST
73238: LIST
73239: PUSH
73240: LD_INT 1
73242: NEG
73243: PUSH
73244: LD_INT 0
73246: PUSH
73247: EMPTY
73248: LIST
73249: LIST
73250: PUSH
73251: LD_INT 1
73253: NEG
73254: PUSH
73255: LD_INT 1
73257: NEG
73258: PUSH
73259: EMPTY
73260: LIST
73261: LIST
73262: PUSH
73263: EMPTY
73264: LIST
73265: LIST
73266: LIST
73267: LIST
73268: LIST
73269: LIST
73270: LIST
73271: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73272: LD_ADDR_VAR 0 64
73276: PUSH
73277: LD_INT 0
73279: PUSH
73280: LD_INT 0
73282: PUSH
73283: EMPTY
73284: LIST
73285: LIST
73286: PUSH
73287: LD_INT 0
73289: PUSH
73290: LD_INT 1
73292: NEG
73293: PUSH
73294: EMPTY
73295: LIST
73296: LIST
73297: PUSH
73298: LD_INT 1
73300: PUSH
73301: LD_INT 0
73303: PUSH
73304: EMPTY
73305: LIST
73306: LIST
73307: PUSH
73308: LD_INT 1
73310: PUSH
73311: LD_INT 1
73313: PUSH
73314: EMPTY
73315: LIST
73316: LIST
73317: PUSH
73318: LD_INT 0
73320: PUSH
73321: LD_INT 1
73323: PUSH
73324: EMPTY
73325: LIST
73326: LIST
73327: PUSH
73328: LD_INT 1
73330: NEG
73331: PUSH
73332: LD_INT 0
73334: PUSH
73335: EMPTY
73336: LIST
73337: LIST
73338: PUSH
73339: LD_INT 1
73341: NEG
73342: PUSH
73343: LD_INT 1
73345: NEG
73346: PUSH
73347: EMPTY
73348: LIST
73349: LIST
73350: PUSH
73351: EMPTY
73352: LIST
73353: LIST
73354: LIST
73355: LIST
73356: LIST
73357: LIST
73358: LIST
73359: ST_TO_ADDR
// end ; 1 :
73360: GO 79257
73362: LD_INT 1
73364: DOUBLE
73365: EQUAL
73366: IFTRUE 73370
73368: GO 75993
73370: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
73371: LD_ADDR_VAR 0 11
73375: PUSH
73376: LD_INT 1
73378: NEG
73379: PUSH
73380: LD_INT 3
73382: NEG
73383: PUSH
73384: EMPTY
73385: LIST
73386: LIST
73387: PUSH
73388: LD_INT 0
73390: PUSH
73391: LD_INT 3
73393: NEG
73394: PUSH
73395: EMPTY
73396: LIST
73397: LIST
73398: PUSH
73399: LD_INT 1
73401: PUSH
73402: LD_INT 2
73404: NEG
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: LIST
73414: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
73415: LD_ADDR_VAR 0 12
73419: PUSH
73420: LD_INT 2
73422: PUSH
73423: LD_INT 1
73425: NEG
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: PUSH
73431: LD_INT 3
73433: PUSH
73434: LD_INT 0
73436: PUSH
73437: EMPTY
73438: LIST
73439: LIST
73440: PUSH
73441: LD_INT 3
73443: PUSH
73444: LD_INT 1
73446: PUSH
73447: EMPTY
73448: LIST
73449: LIST
73450: PUSH
73451: EMPTY
73452: LIST
73453: LIST
73454: LIST
73455: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
73456: LD_ADDR_VAR 0 13
73460: PUSH
73461: LD_INT 3
73463: PUSH
73464: LD_INT 2
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: PUSH
73471: LD_INT 3
73473: PUSH
73474: LD_INT 3
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: PUSH
73481: LD_INT 2
73483: PUSH
73484: LD_INT 3
73486: PUSH
73487: EMPTY
73488: LIST
73489: LIST
73490: PUSH
73491: EMPTY
73492: LIST
73493: LIST
73494: LIST
73495: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
73496: LD_ADDR_VAR 0 14
73500: PUSH
73501: LD_INT 1
73503: PUSH
73504: LD_INT 3
73506: PUSH
73507: EMPTY
73508: LIST
73509: LIST
73510: PUSH
73511: LD_INT 0
73513: PUSH
73514: LD_INT 3
73516: PUSH
73517: EMPTY
73518: LIST
73519: LIST
73520: PUSH
73521: LD_INT 1
73523: NEG
73524: PUSH
73525: LD_INT 2
73527: PUSH
73528: EMPTY
73529: LIST
73530: LIST
73531: PUSH
73532: EMPTY
73533: LIST
73534: LIST
73535: LIST
73536: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73537: LD_ADDR_VAR 0 15
73541: PUSH
73542: LD_INT 2
73544: NEG
73545: PUSH
73546: LD_INT 1
73548: PUSH
73549: EMPTY
73550: LIST
73551: LIST
73552: PUSH
73553: LD_INT 3
73555: NEG
73556: PUSH
73557: LD_INT 0
73559: PUSH
73560: EMPTY
73561: LIST
73562: LIST
73563: PUSH
73564: LD_INT 3
73566: NEG
73567: PUSH
73568: LD_INT 1
73570: NEG
73571: PUSH
73572: EMPTY
73573: LIST
73574: LIST
73575: PUSH
73576: EMPTY
73577: LIST
73578: LIST
73579: LIST
73580: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
73581: LD_ADDR_VAR 0 16
73585: PUSH
73586: LD_INT 2
73588: NEG
73589: PUSH
73590: LD_INT 3
73592: NEG
73593: PUSH
73594: EMPTY
73595: LIST
73596: LIST
73597: PUSH
73598: LD_INT 3
73600: NEG
73601: PUSH
73602: LD_INT 2
73604: NEG
73605: PUSH
73606: EMPTY
73607: LIST
73608: LIST
73609: PUSH
73610: LD_INT 3
73612: NEG
73613: PUSH
73614: LD_INT 3
73616: NEG
73617: PUSH
73618: EMPTY
73619: LIST
73620: LIST
73621: PUSH
73622: EMPTY
73623: LIST
73624: LIST
73625: LIST
73626: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
73627: LD_ADDR_VAR 0 17
73631: PUSH
73632: LD_INT 1
73634: NEG
73635: PUSH
73636: LD_INT 3
73638: NEG
73639: PUSH
73640: EMPTY
73641: LIST
73642: LIST
73643: PUSH
73644: LD_INT 0
73646: PUSH
73647: LD_INT 3
73649: NEG
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: PUSH
73655: LD_INT 1
73657: PUSH
73658: LD_INT 2
73660: NEG
73661: PUSH
73662: EMPTY
73663: LIST
73664: LIST
73665: PUSH
73666: EMPTY
73667: LIST
73668: LIST
73669: LIST
73670: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
73671: LD_ADDR_VAR 0 18
73675: PUSH
73676: LD_INT 2
73678: PUSH
73679: LD_INT 1
73681: NEG
73682: PUSH
73683: EMPTY
73684: LIST
73685: LIST
73686: PUSH
73687: LD_INT 3
73689: PUSH
73690: LD_INT 0
73692: PUSH
73693: EMPTY
73694: LIST
73695: LIST
73696: PUSH
73697: LD_INT 3
73699: PUSH
73700: LD_INT 1
73702: PUSH
73703: EMPTY
73704: LIST
73705: LIST
73706: PUSH
73707: EMPTY
73708: LIST
73709: LIST
73710: LIST
73711: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
73712: LD_ADDR_VAR 0 19
73716: PUSH
73717: LD_INT 3
73719: PUSH
73720: LD_INT 2
73722: PUSH
73723: EMPTY
73724: LIST
73725: LIST
73726: PUSH
73727: LD_INT 3
73729: PUSH
73730: LD_INT 3
73732: PUSH
73733: EMPTY
73734: LIST
73735: LIST
73736: PUSH
73737: LD_INT 2
73739: PUSH
73740: LD_INT 3
73742: PUSH
73743: EMPTY
73744: LIST
73745: LIST
73746: PUSH
73747: EMPTY
73748: LIST
73749: LIST
73750: LIST
73751: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
73752: LD_ADDR_VAR 0 20
73756: PUSH
73757: LD_INT 1
73759: PUSH
73760: LD_INT 3
73762: PUSH
73763: EMPTY
73764: LIST
73765: LIST
73766: PUSH
73767: LD_INT 0
73769: PUSH
73770: LD_INT 3
73772: PUSH
73773: EMPTY
73774: LIST
73775: LIST
73776: PUSH
73777: LD_INT 1
73779: NEG
73780: PUSH
73781: LD_INT 2
73783: PUSH
73784: EMPTY
73785: LIST
73786: LIST
73787: PUSH
73788: EMPTY
73789: LIST
73790: LIST
73791: LIST
73792: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73793: LD_ADDR_VAR 0 21
73797: PUSH
73798: LD_INT 2
73800: NEG
73801: PUSH
73802: LD_INT 1
73804: PUSH
73805: EMPTY
73806: LIST
73807: LIST
73808: PUSH
73809: LD_INT 3
73811: NEG
73812: PUSH
73813: LD_INT 0
73815: PUSH
73816: EMPTY
73817: LIST
73818: LIST
73819: PUSH
73820: LD_INT 3
73822: NEG
73823: PUSH
73824: LD_INT 1
73826: NEG
73827: PUSH
73828: EMPTY
73829: LIST
73830: LIST
73831: PUSH
73832: EMPTY
73833: LIST
73834: LIST
73835: LIST
73836: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
73837: LD_ADDR_VAR 0 22
73841: PUSH
73842: LD_INT 2
73844: NEG
73845: PUSH
73846: LD_INT 3
73848: NEG
73849: PUSH
73850: EMPTY
73851: LIST
73852: LIST
73853: PUSH
73854: LD_INT 3
73856: NEG
73857: PUSH
73858: LD_INT 2
73860: NEG
73861: PUSH
73862: EMPTY
73863: LIST
73864: LIST
73865: PUSH
73866: LD_INT 3
73868: NEG
73869: PUSH
73870: LD_INT 3
73872: NEG
73873: PUSH
73874: EMPTY
73875: LIST
73876: LIST
73877: PUSH
73878: EMPTY
73879: LIST
73880: LIST
73881: LIST
73882: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
73883: LD_ADDR_VAR 0 23
73887: PUSH
73888: LD_INT 0
73890: PUSH
73891: LD_INT 3
73893: NEG
73894: PUSH
73895: EMPTY
73896: LIST
73897: LIST
73898: PUSH
73899: LD_INT 1
73901: NEG
73902: PUSH
73903: LD_INT 4
73905: NEG
73906: PUSH
73907: EMPTY
73908: LIST
73909: LIST
73910: PUSH
73911: LD_INT 1
73913: PUSH
73914: LD_INT 3
73916: NEG
73917: PUSH
73918: EMPTY
73919: LIST
73920: LIST
73921: PUSH
73922: EMPTY
73923: LIST
73924: LIST
73925: LIST
73926: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
73927: LD_ADDR_VAR 0 24
73931: PUSH
73932: LD_INT 3
73934: PUSH
73935: LD_INT 0
73937: PUSH
73938: EMPTY
73939: LIST
73940: LIST
73941: PUSH
73942: LD_INT 3
73944: PUSH
73945: LD_INT 1
73947: NEG
73948: PUSH
73949: EMPTY
73950: LIST
73951: LIST
73952: PUSH
73953: LD_INT 4
73955: PUSH
73956: LD_INT 1
73958: PUSH
73959: EMPTY
73960: LIST
73961: LIST
73962: PUSH
73963: EMPTY
73964: LIST
73965: LIST
73966: LIST
73967: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
73968: LD_ADDR_VAR 0 25
73972: PUSH
73973: LD_INT 3
73975: PUSH
73976: LD_INT 3
73978: PUSH
73979: EMPTY
73980: LIST
73981: LIST
73982: PUSH
73983: LD_INT 4
73985: PUSH
73986: LD_INT 3
73988: PUSH
73989: EMPTY
73990: LIST
73991: LIST
73992: PUSH
73993: LD_INT 3
73995: PUSH
73996: LD_INT 4
73998: PUSH
73999: EMPTY
74000: LIST
74001: LIST
74002: PUSH
74003: EMPTY
74004: LIST
74005: LIST
74006: LIST
74007: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
74008: LD_ADDR_VAR 0 26
74012: PUSH
74013: LD_INT 0
74015: PUSH
74016: LD_INT 3
74018: PUSH
74019: EMPTY
74020: LIST
74021: LIST
74022: PUSH
74023: LD_INT 1
74025: PUSH
74026: LD_INT 4
74028: PUSH
74029: EMPTY
74030: LIST
74031: LIST
74032: PUSH
74033: LD_INT 1
74035: NEG
74036: PUSH
74037: LD_INT 3
74039: PUSH
74040: EMPTY
74041: LIST
74042: LIST
74043: PUSH
74044: EMPTY
74045: LIST
74046: LIST
74047: LIST
74048: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
74049: LD_ADDR_VAR 0 27
74053: PUSH
74054: LD_INT 3
74056: NEG
74057: PUSH
74058: LD_INT 0
74060: PUSH
74061: EMPTY
74062: LIST
74063: LIST
74064: PUSH
74065: LD_INT 3
74067: NEG
74068: PUSH
74069: LD_INT 1
74071: PUSH
74072: EMPTY
74073: LIST
74074: LIST
74075: PUSH
74076: LD_INT 4
74078: NEG
74079: PUSH
74080: LD_INT 1
74082: NEG
74083: PUSH
74084: EMPTY
74085: LIST
74086: LIST
74087: PUSH
74088: EMPTY
74089: LIST
74090: LIST
74091: LIST
74092: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
74093: LD_ADDR_VAR 0 28
74097: PUSH
74098: LD_INT 3
74100: NEG
74101: PUSH
74102: LD_INT 3
74104: NEG
74105: PUSH
74106: EMPTY
74107: LIST
74108: LIST
74109: PUSH
74110: LD_INT 3
74112: NEG
74113: PUSH
74114: LD_INT 4
74116: NEG
74117: PUSH
74118: EMPTY
74119: LIST
74120: LIST
74121: PUSH
74122: LD_INT 4
74124: NEG
74125: PUSH
74126: LD_INT 3
74128: NEG
74129: PUSH
74130: EMPTY
74131: LIST
74132: LIST
74133: PUSH
74134: EMPTY
74135: LIST
74136: LIST
74137: LIST
74138: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
74139: LD_ADDR_VAR 0 29
74143: PUSH
74144: LD_INT 1
74146: NEG
74147: PUSH
74148: LD_INT 3
74150: NEG
74151: PUSH
74152: EMPTY
74153: LIST
74154: LIST
74155: PUSH
74156: LD_INT 0
74158: PUSH
74159: LD_INT 3
74161: NEG
74162: PUSH
74163: EMPTY
74164: LIST
74165: LIST
74166: PUSH
74167: LD_INT 1
74169: PUSH
74170: LD_INT 2
74172: NEG
74173: PUSH
74174: EMPTY
74175: LIST
74176: LIST
74177: PUSH
74178: LD_INT 1
74180: NEG
74181: PUSH
74182: LD_INT 4
74184: NEG
74185: PUSH
74186: EMPTY
74187: LIST
74188: LIST
74189: PUSH
74190: LD_INT 0
74192: PUSH
74193: LD_INT 4
74195: NEG
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: PUSH
74201: LD_INT 1
74203: PUSH
74204: LD_INT 3
74206: NEG
74207: PUSH
74208: EMPTY
74209: LIST
74210: LIST
74211: PUSH
74212: LD_INT 1
74214: NEG
74215: PUSH
74216: LD_INT 5
74218: NEG
74219: PUSH
74220: EMPTY
74221: LIST
74222: LIST
74223: PUSH
74224: LD_INT 0
74226: PUSH
74227: LD_INT 5
74229: NEG
74230: PUSH
74231: EMPTY
74232: LIST
74233: LIST
74234: PUSH
74235: LD_INT 1
74237: PUSH
74238: LD_INT 4
74240: NEG
74241: PUSH
74242: EMPTY
74243: LIST
74244: LIST
74245: PUSH
74246: LD_INT 1
74248: NEG
74249: PUSH
74250: LD_INT 6
74252: NEG
74253: PUSH
74254: EMPTY
74255: LIST
74256: LIST
74257: PUSH
74258: LD_INT 0
74260: PUSH
74261: LD_INT 6
74263: NEG
74264: PUSH
74265: EMPTY
74266: LIST
74267: LIST
74268: PUSH
74269: LD_INT 1
74271: PUSH
74272: LD_INT 5
74274: NEG
74275: PUSH
74276: EMPTY
74277: LIST
74278: LIST
74279: PUSH
74280: EMPTY
74281: LIST
74282: LIST
74283: LIST
74284: LIST
74285: LIST
74286: LIST
74287: LIST
74288: LIST
74289: LIST
74290: LIST
74291: LIST
74292: LIST
74293: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
74294: LD_ADDR_VAR 0 30
74298: PUSH
74299: LD_INT 2
74301: PUSH
74302: LD_INT 1
74304: NEG
74305: PUSH
74306: EMPTY
74307: LIST
74308: LIST
74309: PUSH
74310: LD_INT 3
74312: PUSH
74313: LD_INT 0
74315: PUSH
74316: EMPTY
74317: LIST
74318: LIST
74319: PUSH
74320: LD_INT 3
74322: PUSH
74323: LD_INT 1
74325: PUSH
74326: EMPTY
74327: LIST
74328: LIST
74329: PUSH
74330: LD_INT 3
74332: PUSH
74333: LD_INT 1
74335: NEG
74336: PUSH
74337: EMPTY
74338: LIST
74339: LIST
74340: PUSH
74341: LD_INT 4
74343: PUSH
74344: LD_INT 0
74346: PUSH
74347: EMPTY
74348: LIST
74349: LIST
74350: PUSH
74351: LD_INT 4
74353: PUSH
74354: LD_INT 1
74356: PUSH
74357: EMPTY
74358: LIST
74359: LIST
74360: PUSH
74361: LD_INT 4
74363: PUSH
74364: LD_INT 1
74366: NEG
74367: PUSH
74368: EMPTY
74369: LIST
74370: LIST
74371: PUSH
74372: LD_INT 5
74374: PUSH
74375: LD_INT 0
74377: PUSH
74378: EMPTY
74379: LIST
74380: LIST
74381: PUSH
74382: LD_INT 5
74384: PUSH
74385: LD_INT 1
74387: PUSH
74388: EMPTY
74389: LIST
74390: LIST
74391: PUSH
74392: LD_INT 5
74394: PUSH
74395: LD_INT 1
74397: NEG
74398: PUSH
74399: EMPTY
74400: LIST
74401: LIST
74402: PUSH
74403: LD_INT 6
74405: PUSH
74406: LD_INT 0
74408: PUSH
74409: EMPTY
74410: LIST
74411: LIST
74412: PUSH
74413: LD_INT 6
74415: PUSH
74416: LD_INT 1
74418: PUSH
74419: EMPTY
74420: LIST
74421: LIST
74422: PUSH
74423: EMPTY
74424: LIST
74425: LIST
74426: LIST
74427: LIST
74428: LIST
74429: LIST
74430: LIST
74431: LIST
74432: LIST
74433: LIST
74434: LIST
74435: LIST
74436: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
74437: LD_ADDR_VAR 0 31
74441: PUSH
74442: LD_INT 3
74444: PUSH
74445: LD_INT 2
74447: PUSH
74448: EMPTY
74449: LIST
74450: LIST
74451: PUSH
74452: LD_INT 3
74454: PUSH
74455: LD_INT 3
74457: PUSH
74458: EMPTY
74459: LIST
74460: LIST
74461: PUSH
74462: LD_INT 2
74464: PUSH
74465: LD_INT 3
74467: PUSH
74468: EMPTY
74469: LIST
74470: LIST
74471: PUSH
74472: LD_INT 4
74474: PUSH
74475: LD_INT 3
74477: PUSH
74478: EMPTY
74479: LIST
74480: LIST
74481: PUSH
74482: LD_INT 4
74484: PUSH
74485: LD_INT 4
74487: PUSH
74488: EMPTY
74489: LIST
74490: LIST
74491: PUSH
74492: LD_INT 3
74494: PUSH
74495: LD_INT 4
74497: PUSH
74498: EMPTY
74499: LIST
74500: LIST
74501: PUSH
74502: LD_INT 5
74504: PUSH
74505: LD_INT 4
74507: PUSH
74508: EMPTY
74509: LIST
74510: LIST
74511: PUSH
74512: LD_INT 5
74514: PUSH
74515: LD_INT 5
74517: PUSH
74518: EMPTY
74519: LIST
74520: LIST
74521: PUSH
74522: LD_INT 4
74524: PUSH
74525: LD_INT 5
74527: PUSH
74528: EMPTY
74529: LIST
74530: LIST
74531: PUSH
74532: LD_INT 6
74534: PUSH
74535: LD_INT 5
74537: PUSH
74538: EMPTY
74539: LIST
74540: LIST
74541: PUSH
74542: LD_INT 6
74544: PUSH
74545: LD_INT 6
74547: PUSH
74548: EMPTY
74549: LIST
74550: LIST
74551: PUSH
74552: LD_INT 5
74554: PUSH
74555: LD_INT 6
74557: PUSH
74558: EMPTY
74559: LIST
74560: LIST
74561: PUSH
74562: EMPTY
74563: LIST
74564: LIST
74565: LIST
74566: LIST
74567: LIST
74568: LIST
74569: LIST
74570: LIST
74571: LIST
74572: LIST
74573: LIST
74574: LIST
74575: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
74576: LD_ADDR_VAR 0 32
74580: PUSH
74581: LD_INT 1
74583: PUSH
74584: LD_INT 3
74586: PUSH
74587: EMPTY
74588: LIST
74589: LIST
74590: PUSH
74591: LD_INT 0
74593: PUSH
74594: LD_INT 3
74596: PUSH
74597: EMPTY
74598: LIST
74599: LIST
74600: PUSH
74601: LD_INT 1
74603: NEG
74604: PUSH
74605: LD_INT 2
74607: PUSH
74608: EMPTY
74609: LIST
74610: LIST
74611: PUSH
74612: LD_INT 1
74614: PUSH
74615: LD_INT 4
74617: PUSH
74618: EMPTY
74619: LIST
74620: LIST
74621: PUSH
74622: LD_INT 0
74624: PUSH
74625: LD_INT 4
74627: PUSH
74628: EMPTY
74629: LIST
74630: LIST
74631: PUSH
74632: LD_INT 1
74634: NEG
74635: PUSH
74636: LD_INT 3
74638: PUSH
74639: EMPTY
74640: LIST
74641: LIST
74642: PUSH
74643: LD_INT 1
74645: PUSH
74646: LD_INT 5
74648: PUSH
74649: EMPTY
74650: LIST
74651: LIST
74652: PUSH
74653: LD_INT 0
74655: PUSH
74656: LD_INT 5
74658: PUSH
74659: EMPTY
74660: LIST
74661: LIST
74662: PUSH
74663: LD_INT 1
74665: NEG
74666: PUSH
74667: LD_INT 4
74669: PUSH
74670: EMPTY
74671: LIST
74672: LIST
74673: PUSH
74674: LD_INT 1
74676: PUSH
74677: LD_INT 6
74679: PUSH
74680: EMPTY
74681: LIST
74682: LIST
74683: PUSH
74684: LD_INT 0
74686: PUSH
74687: LD_INT 6
74689: PUSH
74690: EMPTY
74691: LIST
74692: LIST
74693: PUSH
74694: LD_INT 1
74696: NEG
74697: PUSH
74698: LD_INT 5
74700: PUSH
74701: EMPTY
74702: LIST
74703: LIST
74704: PUSH
74705: EMPTY
74706: LIST
74707: LIST
74708: LIST
74709: LIST
74710: LIST
74711: LIST
74712: LIST
74713: LIST
74714: LIST
74715: LIST
74716: LIST
74717: LIST
74718: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
74719: LD_ADDR_VAR 0 33
74723: PUSH
74724: LD_INT 2
74726: NEG
74727: PUSH
74728: LD_INT 1
74730: PUSH
74731: EMPTY
74732: LIST
74733: LIST
74734: PUSH
74735: LD_INT 3
74737: NEG
74738: PUSH
74739: LD_INT 0
74741: PUSH
74742: EMPTY
74743: LIST
74744: LIST
74745: PUSH
74746: LD_INT 3
74748: NEG
74749: PUSH
74750: LD_INT 1
74752: NEG
74753: PUSH
74754: EMPTY
74755: LIST
74756: LIST
74757: PUSH
74758: LD_INT 3
74760: NEG
74761: PUSH
74762: LD_INT 1
74764: PUSH
74765: EMPTY
74766: LIST
74767: LIST
74768: PUSH
74769: LD_INT 4
74771: NEG
74772: PUSH
74773: LD_INT 0
74775: PUSH
74776: EMPTY
74777: LIST
74778: LIST
74779: PUSH
74780: LD_INT 4
74782: NEG
74783: PUSH
74784: LD_INT 1
74786: NEG
74787: PUSH
74788: EMPTY
74789: LIST
74790: LIST
74791: PUSH
74792: LD_INT 4
74794: NEG
74795: PUSH
74796: LD_INT 1
74798: PUSH
74799: EMPTY
74800: LIST
74801: LIST
74802: PUSH
74803: LD_INT 5
74805: NEG
74806: PUSH
74807: LD_INT 0
74809: PUSH
74810: EMPTY
74811: LIST
74812: LIST
74813: PUSH
74814: LD_INT 5
74816: NEG
74817: PUSH
74818: LD_INT 1
74820: NEG
74821: PUSH
74822: EMPTY
74823: LIST
74824: LIST
74825: PUSH
74826: LD_INT 5
74828: NEG
74829: PUSH
74830: LD_INT 1
74832: PUSH
74833: EMPTY
74834: LIST
74835: LIST
74836: PUSH
74837: LD_INT 6
74839: NEG
74840: PUSH
74841: LD_INT 0
74843: PUSH
74844: EMPTY
74845: LIST
74846: LIST
74847: PUSH
74848: LD_INT 6
74850: NEG
74851: PUSH
74852: LD_INT 1
74854: NEG
74855: PUSH
74856: EMPTY
74857: LIST
74858: LIST
74859: PUSH
74860: EMPTY
74861: LIST
74862: LIST
74863: LIST
74864: LIST
74865: LIST
74866: LIST
74867: LIST
74868: LIST
74869: LIST
74870: LIST
74871: LIST
74872: LIST
74873: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
74874: LD_ADDR_VAR 0 34
74878: PUSH
74879: LD_INT 2
74881: NEG
74882: PUSH
74883: LD_INT 3
74885: NEG
74886: PUSH
74887: EMPTY
74888: LIST
74889: LIST
74890: PUSH
74891: LD_INT 3
74893: NEG
74894: PUSH
74895: LD_INT 2
74897: NEG
74898: PUSH
74899: EMPTY
74900: LIST
74901: LIST
74902: PUSH
74903: LD_INT 3
74905: NEG
74906: PUSH
74907: LD_INT 3
74909: NEG
74910: PUSH
74911: EMPTY
74912: LIST
74913: LIST
74914: PUSH
74915: LD_INT 3
74917: NEG
74918: PUSH
74919: LD_INT 4
74921: NEG
74922: PUSH
74923: EMPTY
74924: LIST
74925: LIST
74926: PUSH
74927: LD_INT 4
74929: NEG
74930: PUSH
74931: LD_INT 3
74933: NEG
74934: PUSH
74935: EMPTY
74936: LIST
74937: LIST
74938: PUSH
74939: LD_INT 4
74941: NEG
74942: PUSH
74943: LD_INT 4
74945: NEG
74946: PUSH
74947: EMPTY
74948: LIST
74949: LIST
74950: PUSH
74951: LD_INT 4
74953: NEG
74954: PUSH
74955: LD_INT 5
74957: NEG
74958: PUSH
74959: EMPTY
74960: LIST
74961: LIST
74962: PUSH
74963: LD_INT 5
74965: NEG
74966: PUSH
74967: LD_INT 4
74969: NEG
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: PUSH
74975: LD_INT 5
74977: NEG
74978: PUSH
74979: LD_INT 5
74981: NEG
74982: PUSH
74983: EMPTY
74984: LIST
74985: LIST
74986: PUSH
74987: LD_INT 5
74989: NEG
74990: PUSH
74991: LD_INT 6
74993: NEG
74994: PUSH
74995: EMPTY
74996: LIST
74997: LIST
74998: PUSH
74999: LD_INT 6
75001: NEG
75002: PUSH
75003: LD_INT 5
75005: NEG
75006: PUSH
75007: EMPTY
75008: LIST
75009: LIST
75010: PUSH
75011: LD_INT 6
75013: NEG
75014: PUSH
75015: LD_INT 6
75017: NEG
75018: PUSH
75019: EMPTY
75020: LIST
75021: LIST
75022: PUSH
75023: EMPTY
75024: LIST
75025: LIST
75026: LIST
75027: LIST
75028: LIST
75029: LIST
75030: LIST
75031: LIST
75032: LIST
75033: LIST
75034: LIST
75035: LIST
75036: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
75037: LD_ADDR_VAR 0 41
75041: PUSH
75042: LD_INT 0
75044: PUSH
75045: LD_INT 2
75047: NEG
75048: PUSH
75049: EMPTY
75050: LIST
75051: LIST
75052: PUSH
75053: LD_INT 1
75055: NEG
75056: PUSH
75057: LD_INT 3
75059: NEG
75060: PUSH
75061: EMPTY
75062: LIST
75063: LIST
75064: PUSH
75065: LD_INT 1
75067: PUSH
75068: LD_INT 2
75070: NEG
75071: PUSH
75072: EMPTY
75073: LIST
75074: LIST
75075: PUSH
75076: EMPTY
75077: LIST
75078: LIST
75079: LIST
75080: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
75081: LD_ADDR_VAR 0 42
75085: PUSH
75086: LD_INT 2
75088: PUSH
75089: LD_INT 0
75091: PUSH
75092: EMPTY
75093: LIST
75094: LIST
75095: PUSH
75096: LD_INT 2
75098: PUSH
75099: LD_INT 1
75101: NEG
75102: PUSH
75103: EMPTY
75104: LIST
75105: LIST
75106: PUSH
75107: LD_INT 3
75109: PUSH
75110: LD_INT 1
75112: PUSH
75113: EMPTY
75114: LIST
75115: LIST
75116: PUSH
75117: EMPTY
75118: LIST
75119: LIST
75120: LIST
75121: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
75122: LD_ADDR_VAR 0 43
75126: PUSH
75127: LD_INT 2
75129: PUSH
75130: LD_INT 2
75132: PUSH
75133: EMPTY
75134: LIST
75135: LIST
75136: PUSH
75137: LD_INT 3
75139: PUSH
75140: LD_INT 2
75142: PUSH
75143: EMPTY
75144: LIST
75145: LIST
75146: PUSH
75147: LD_INT 2
75149: PUSH
75150: LD_INT 3
75152: PUSH
75153: EMPTY
75154: LIST
75155: LIST
75156: PUSH
75157: EMPTY
75158: LIST
75159: LIST
75160: LIST
75161: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
75162: LD_ADDR_VAR 0 44
75166: PUSH
75167: LD_INT 0
75169: PUSH
75170: LD_INT 2
75172: PUSH
75173: EMPTY
75174: LIST
75175: LIST
75176: PUSH
75177: LD_INT 1
75179: PUSH
75180: LD_INT 3
75182: PUSH
75183: EMPTY
75184: LIST
75185: LIST
75186: PUSH
75187: LD_INT 1
75189: NEG
75190: PUSH
75191: LD_INT 2
75193: PUSH
75194: EMPTY
75195: LIST
75196: LIST
75197: PUSH
75198: EMPTY
75199: LIST
75200: LIST
75201: LIST
75202: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
75203: LD_ADDR_VAR 0 45
75207: PUSH
75208: LD_INT 2
75210: NEG
75211: PUSH
75212: LD_INT 0
75214: PUSH
75215: EMPTY
75216: LIST
75217: LIST
75218: PUSH
75219: LD_INT 2
75221: NEG
75222: PUSH
75223: LD_INT 1
75225: PUSH
75226: EMPTY
75227: LIST
75228: LIST
75229: PUSH
75230: LD_INT 3
75232: NEG
75233: PUSH
75234: LD_INT 1
75236: NEG
75237: PUSH
75238: EMPTY
75239: LIST
75240: LIST
75241: PUSH
75242: EMPTY
75243: LIST
75244: LIST
75245: LIST
75246: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
75247: LD_ADDR_VAR 0 46
75251: PUSH
75252: LD_INT 2
75254: NEG
75255: PUSH
75256: LD_INT 2
75258: NEG
75259: PUSH
75260: EMPTY
75261: LIST
75262: LIST
75263: PUSH
75264: LD_INT 2
75266: NEG
75267: PUSH
75268: LD_INT 3
75270: NEG
75271: PUSH
75272: EMPTY
75273: LIST
75274: LIST
75275: PUSH
75276: LD_INT 3
75278: NEG
75279: PUSH
75280: LD_INT 2
75282: NEG
75283: PUSH
75284: EMPTY
75285: LIST
75286: LIST
75287: PUSH
75288: EMPTY
75289: LIST
75290: LIST
75291: LIST
75292: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
75293: LD_ADDR_VAR 0 47
75297: PUSH
75298: LD_INT 2
75300: NEG
75301: PUSH
75302: LD_INT 3
75304: NEG
75305: PUSH
75306: EMPTY
75307: LIST
75308: LIST
75309: PUSH
75310: LD_INT 1
75312: NEG
75313: PUSH
75314: LD_INT 3
75316: NEG
75317: PUSH
75318: EMPTY
75319: LIST
75320: LIST
75321: PUSH
75322: EMPTY
75323: LIST
75324: LIST
75325: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
75326: LD_ADDR_VAR 0 48
75330: PUSH
75331: LD_INT 1
75333: PUSH
75334: LD_INT 2
75336: NEG
75337: PUSH
75338: EMPTY
75339: LIST
75340: LIST
75341: PUSH
75342: LD_INT 2
75344: PUSH
75345: LD_INT 1
75347: NEG
75348: PUSH
75349: EMPTY
75350: LIST
75351: LIST
75352: PUSH
75353: EMPTY
75354: LIST
75355: LIST
75356: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
75357: LD_ADDR_VAR 0 49
75361: PUSH
75362: LD_INT 3
75364: PUSH
75365: LD_INT 1
75367: PUSH
75368: EMPTY
75369: LIST
75370: LIST
75371: PUSH
75372: LD_INT 3
75374: PUSH
75375: LD_INT 2
75377: PUSH
75378: EMPTY
75379: LIST
75380: LIST
75381: PUSH
75382: EMPTY
75383: LIST
75384: LIST
75385: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
75386: LD_ADDR_VAR 0 50
75390: PUSH
75391: LD_INT 2
75393: PUSH
75394: LD_INT 3
75396: PUSH
75397: EMPTY
75398: LIST
75399: LIST
75400: PUSH
75401: LD_INT 1
75403: PUSH
75404: LD_INT 3
75406: PUSH
75407: EMPTY
75408: LIST
75409: LIST
75410: PUSH
75411: EMPTY
75412: LIST
75413: LIST
75414: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
75415: LD_ADDR_VAR 0 51
75419: PUSH
75420: LD_INT 1
75422: NEG
75423: PUSH
75424: LD_INT 2
75426: PUSH
75427: EMPTY
75428: LIST
75429: LIST
75430: PUSH
75431: LD_INT 2
75433: NEG
75434: PUSH
75435: LD_INT 1
75437: PUSH
75438: EMPTY
75439: LIST
75440: LIST
75441: PUSH
75442: EMPTY
75443: LIST
75444: LIST
75445: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
75446: LD_ADDR_VAR 0 52
75450: PUSH
75451: LD_INT 3
75453: NEG
75454: PUSH
75455: LD_INT 1
75457: NEG
75458: PUSH
75459: EMPTY
75460: LIST
75461: LIST
75462: PUSH
75463: LD_INT 3
75465: NEG
75466: PUSH
75467: LD_INT 2
75469: NEG
75470: PUSH
75471: EMPTY
75472: LIST
75473: LIST
75474: PUSH
75475: EMPTY
75476: LIST
75477: LIST
75478: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
75479: LD_ADDR_VAR 0 53
75483: PUSH
75484: LD_INT 1
75486: NEG
75487: PUSH
75488: LD_INT 3
75490: NEG
75491: PUSH
75492: EMPTY
75493: LIST
75494: LIST
75495: PUSH
75496: LD_INT 0
75498: PUSH
75499: LD_INT 3
75501: NEG
75502: PUSH
75503: EMPTY
75504: LIST
75505: LIST
75506: PUSH
75507: LD_INT 1
75509: PUSH
75510: LD_INT 2
75512: NEG
75513: PUSH
75514: EMPTY
75515: LIST
75516: LIST
75517: PUSH
75518: EMPTY
75519: LIST
75520: LIST
75521: LIST
75522: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
75523: LD_ADDR_VAR 0 54
75527: PUSH
75528: LD_INT 2
75530: PUSH
75531: LD_INT 1
75533: NEG
75534: PUSH
75535: EMPTY
75536: LIST
75537: LIST
75538: PUSH
75539: LD_INT 3
75541: PUSH
75542: LD_INT 0
75544: PUSH
75545: EMPTY
75546: LIST
75547: LIST
75548: PUSH
75549: LD_INT 3
75551: PUSH
75552: LD_INT 1
75554: PUSH
75555: EMPTY
75556: LIST
75557: LIST
75558: PUSH
75559: EMPTY
75560: LIST
75561: LIST
75562: LIST
75563: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
75564: LD_ADDR_VAR 0 55
75568: PUSH
75569: LD_INT 3
75571: PUSH
75572: LD_INT 2
75574: PUSH
75575: EMPTY
75576: LIST
75577: LIST
75578: PUSH
75579: LD_INT 3
75581: PUSH
75582: LD_INT 3
75584: PUSH
75585: EMPTY
75586: LIST
75587: LIST
75588: PUSH
75589: LD_INT 2
75591: PUSH
75592: LD_INT 3
75594: PUSH
75595: EMPTY
75596: LIST
75597: LIST
75598: PUSH
75599: EMPTY
75600: LIST
75601: LIST
75602: LIST
75603: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
75604: LD_ADDR_VAR 0 56
75608: PUSH
75609: LD_INT 1
75611: PUSH
75612: LD_INT 3
75614: PUSH
75615: EMPTY
75616: LIST
75617: LIST
75618: PUSH
75619: LD_INT 0
75621: PUSH
75622: LD_INT 3
75624: PUSH
75625: EMPTY
75626: LIST
75627: LIST
75628: PUSH
75629: LD_INT 1
75631: NEG
75632: PUSH
75633: LD_INT 2
75635: PUSH
75636: EMPTY
75637: LIST
75638: LIST
75639: PUSH
75640: EMPTY
75641: LIST
75642: LIST
75643: LIST
75644: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
75645: LD_ADDR_VAR 0 57
75649: PUSH
75650: LD_INT 2
75652: NEG
75653: PUSH
75654: LD_INT 1
75656: PUSH
75657: EMPTY
75658: LIST
75659: LIST
75660: PUSH
75661: LD_INT 3
75663: NEG
75664: PUSH
75665: LD_INT 0
75667: PUSH
75668: EMPTY
75669: LIST
75670: LIST
75671: PUSH
75672: LD_INT 3
75674: NEG
75675: PUSH
75676: LD_INT 1
75678: NEG
75679: PUSH
75680: EMPTY
75681: LIST
75682: LIST
75683: PUSH
75684: EMPTY
75685: LIST
75686: LIST
75687: LIST
75688: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75689: LD_ADDR_VAR 0 58
75693: PUSH
75694: LD_INT 2
75696: NEG
75697: PUSH
75698: LD_INT 3
75700: NEG
75701: PUSH
75702: EMPTY
75703: LIST
75704: LIST
75705: PUSH
75706: LD_INT 3
75708: NEG
75709: PUSH
75710: LD_INT 2
75712: NEG
75713: PUSH
75714: EMPTY
75715: LIST
75716: LIST
75717: PUSH
75718: LD_INT 3
75720: NEG
75721: PUSH
75722: LD_INT 3
75724: NEG
75725: PUSH
75726: EMPTY
75727: LIST
75728: LIST
75729: PUSH
75730: EMPTY
75731: LIST
75732: LIST
75733: LIST
75734: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
75735: LD_ADDR_VAR 0 59
75739: PUSH
75740: LD_INT 1
75742: NEG
75743: PUSH
75744: LD_INT 2
75746: NEG
75747: PUSH
75748: EMPTY
75749: LIST
75750: LIST
75751: PUSH
75752: LD_INT 0
75754: PUSH
75755: LD_INT 2
75757: NEG
75758: PUSH
75759: EMPTY
75760: LIST
75761: LIST
75762: PUSH
75763: LD_INT 1
75765: PUSH
75766: LD_INT 1
75768: NEG
75769: PUSH
75770: EMPTY
75771: LIST
75772: LIST
75773: PUSH
75774: EMPTY
75775: LIST
75776: LIST
75777: LIST
75778: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
75779: LD_ADDR_VAR 0 60
75783: PUSH
75784: LD_INT 1
75786: PUSH
75787: LD_INT 1
75789: NEG
75790: PUSH
75791: EMPTY
75792: LIST
75793: LIST
75794: PUSH
75795: LD_INT 2
75797: PUSH
75798: LD_INT 0
75800: PUSH
75801: EMPTY
75802: LIST
75803: LIST
75804: PUSH
75805: LD_INT 2
75807: PUSH
75808: LD_INT 1
75810: PUSH
75811: EMPTY
75812: LIST
75813: LIST
75814: PUSH
75815: EMPTY
75816: LIST
75817: LIST
75818: LIST
75819: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
75820: LD_ADDR_VAR 0 61
75824: PUSH
75825: LD_INT 2
75827: PUSH
75828: LD_INT 1
75830: PUSH
75831: EMPTY
75832: LIST
75833: LIST
75834: PUSH
75835: LD_INT 2
75837: PUSH
75838: LD_INT 2
75840: PUSH
75841: EMPTY
75842: LIST
75843: LIST
75844: PUSH
75845: LD_INT 1
75847: PUSH
75848: LD_INT 2
75850: PUSH
75851: EMPTY
75852: LIST
75853: LIST
75854: PUSH
75855: EMPTY
75856: LIST
75857: LIST
75858: LIST
75859: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
75860: LD_ADDR_VAR 0 62
75864: PUSH
75865: LD_INT 1
75867: PUSH
75868: LD_INT 2
75870: PUSH
75871: EMPTY
75872: LIST
75873: LIST
75874: PUSH
75875: LD_INT 0
75877: PUSH
75878: LD_INT 2
75880: PUSH
75881: EMPTY
75882: LIST
75883: LIST
75884: PUSH
75885: LD_INT 1
75887: NEG
75888: PUSH
75889: LD_INT 1
75891: PUSH
75892: EMPTY
75893: LIST
75894: LIST
75895: PUSH
75896: EMPTY
75897: LIST
75898: LIST
75899: LIST
75900: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
75901: LD_ADDR_VAR 0 63
75905: PUSH
75906: LD_INT 1
75908: NEG
75909: PUSH
75910: LD_INT 1
75912: PUSH
75913: EMPTY
75914: LIST
75915: LIST
75916: PUSH
75917: LD_INT 2
75919: NEG
75920: PUSH
75921: LD_INT 0
75923: PUSH
75924: EMPTY
75925: LIST
75926: LIST
75927: PUSH
75928: LD_INT 2
75930: NEG
75931: PUSH
75932: LD_INT 1
75934: NEG
75935: PUSH
75936: EMPTY
75937: LIST
75938: LIST
75939: PUSH
75940: EMPTY
75941: LIST
75942: LIST
75943: LIST
75944: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75945: LD_ADDR_VAR 0 64
75949: PUSH
75950: LD_INT 1
75952: NEG
75953: PUSH
75954: LD_INT 2
75956: NEG
75957: PUSH
75958: EMPTY
75959: LIST
75960: LIST
75961: PUSH
75962: LD_INT 2
75964: NEG
75965: PUSH
75966: LD_INT 1
75968: NEG
75969: PUSH
75970: EMPTY
75971: LIST
75972: LIST
75973: PUSH
75974: LD_INT 2
75976: NEG
75977: PUSH
75978: LD_INT 2
75980: NEG
75981: PUSH
75982: EMPTY
75983: LIST
75984: LIST
75985: PUSH
75986: EMPTY
75987: LIST
75988: LIST
75989: LIST
75990: ST_TO_ADDR
// end ; 2 :
75991: GO 79257
75993: LD_INT 2
75995: DOUBLE
75996: EQUAL
75997: IFTRUE 76001
75999: GO 79256
76001: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
76002: LD_ADDR_VAR 0 29
76006: PUSH
76007: LD_INT 4
76009: PUSH
76010: LD_INT 0
76012: PUSH
76013: EMPTY
76014: LIST
76015: LIST
76016: PUSH
76017: LD_INT 4
76019: PUSH
76020: LD_INT 1
76022: NEG
76023: PUSH
76024: EMPTY
76025: LIST
76026: LIST
76027: PUSH
76028: LD_INT 5
76030: PUSH
76031: LD_INT 0
76033: PUSH
76034: EMPTY
76035: LIST
76036: LIST
76037: PUSH
76038: LD_INT 5
76040: PUSH
76041: LD_INT 1
76043: PUSH
76044: EMPTY
76045: LIST
76046: LIST
76047: PUSH
76048: LD_INT 4
76050: PUSH
76051: LD_INT 1
76053: PUSH
76054: EMPTY
76055: LIST
76056: LIST
76057: PUSH
76058: LD_INT 3
76060: PUSH
76061: LD_INT 0
76063: PUSH
76064: EMPTY
76065: LIST
76066: LIST
76067: PUSH
76068: LD_INT 3
76070: PUSH
76071: LD_INT 1
76073: NEG
76074: PUSH
76075: EMPTY
76076: LIST
76077: LIST
76078: PUSH
76079: LD_INT 3
76081: PUSH
76082: LD_INT 2
76084: NEG
76085: PUSH
76086: EMPTY
76087: LIST
76088: LIST
76089: PUSH
76090: LD_INT 5
76092: PUSH
76093: LD_INT 2
76095: PUSH
76096: EMPTY
76097: LIST
76098: LIST
76099: PUSH
76100: LD_INT 3
76102: PUSH
76103: LD_INT 3
76105: PUSH
76106: EMPTY
76107: LIST
76108: LIST
76109: PUSH
76110: LD_INT 3
76112: PUSH
76113: LD_INT 2
76115: PUSH
76116: EMPTY
76117: LIST
76118: LIST
76119: PUSH
76120: LD_INT 4
76122: PUSH
76123: LD_INT 3
76125: PUSH
76126: EMPTY
76127: LIST
76128: LIST
76129: PUSH
76130: LD_INT 4
76132: PUSH
76133: LD_INT 4
76135: PUSH
76136: EMPTY
76137: LIST
76138: LIST
76139: PUSH
76140: LD_INT 3
76142: PUSH
76143: LD_INT 4
76145: PUSH
76146: EMPTY
76147: LIST
76148: LIST
76149: PUSH
76150: LD_INT 2
76152: PUSH
76153: LD_INT 3
76155: PUSH
76156: EMPTY
76157: LIST
76158: LIST
76159: PUSH
76160: LD_INT 2
76162: PUSH
76163: LD_INT 2
76165: PUSH
76166: EMPTY
76167: LIST
76168: LIST
76169: PUSH
76170: LD_INT 4
76172: PUSH
76173: LD_INT 2
76175: PUSH
76176: EMPTY
76177: LIST
76178: LIST
76179: PUSH
76180: LD_INT 2
76182: PUSH
76183: LD_INT 4
76185: PUSH
76186: EMPTY
76187: LIST
76188: LIST
76189: PUSH
76190: LD_INT 0
76192: PUSH
76193: LD_INT 4
76195: PUSH
76196: EMPTY
76197: LIST
76198: LIST
76199: PUSH
76200: LD_INT 0
76202: PUSH
76203: LD_INT 3
76205: PUSH
76206: EMPTY
76207: LIST
76208: LIST
76209: PUSH
76210: LD_INT 1
76212: PUSH
76213: LD_INT 4
76215: PUSH
76216: EMPTY
76217: LIST
76218: LIST
76219: PUSH
76220: LD_INT 1
76222: PUSH
76223: LD_INT 5
76225: PUSH
76226: EMPTY
76227: LIST
76228: LIST
76229: PUSH
76230: LD_INT 0
76232: PUSH
76233: LD_INT 5
76235: PUSH
76236: EMPTY
76237: LIST
76238: LIST
76239: PUSH
76240: LD_INT 1
76242: NEG
76243: PUSH
76244: LD_INT 4
76246: PUSH
76247: EMPTY
76248: LIST
76249: LIST
76250: PUSH
76251: LD_INT 1
76253: NEG
76254: PUSH
76255: LD_INT 3
76257: PUSH
76258: EMPTY
76259: LIST
76260: LIST
76261: PUSH
76262: LD_INT 2
76264: PUSH
76265: LD_INT 5
76267: PUSH
76268: EMPTY
76269: LIST
76270: LIST
76271: PUSH
76272: LD_INT 2
76274: NEG
76275: PUSH
76276: LD_INT 3
76278: PUSH
76279: EMPTY
76280: LIST
76281: LIST
76282: PUSH
76283: LD_INT 3
76285: NEG
76286: PUSH
76287: LD_INT 0
76289: PUSH
76290: EMPTY
76291: LIST
76292: LIST
76293: PUSH
76294: LD_INT 3
76296: NEG
76297: PUSH
76298: LD_INT 1
76300: NEG
76301: PUSH
76302: EMPTY
76303: LIST
76304: LIST
76305: PUSH
76306: LD_INT 2
76308: NEG
76309: PUSH
76310: LD_INT 0
76312: PUSH
76313: EMPTY
76314: LIST
76315: LIST
76316: PUSH
76317: LD_INT 2
76319: NEG
76320: PUSH
76321: LD_INT 1
76323: PUSH
76324: EMPTY
76325: LIST
76326: LIST
76327: PUSH
76328: LD_INT 3
76330: NEG
76331: PUSH
76332: LD_INT 1
76334: PUSH
76335: EMPTY
76336: LIST
76337: LIST
76338: PUSH
76339: LD_INT 4
76341: NEG
76342: PUSH
76343: LD_INT 0
76345: PUSH
76346: EMPTY
76347: LIST
76348: LIST
76349: PUSH
76350: LD_INT 4
76352: NEG
76353: PUSH
76354: LD_INT 1
76356: NEG
76357: PUSH
76358: EMPTY
76359: LIST
76360: LIST
76361: PUSH
76362: LD_INT 4
76364: NEG
76365: PUSH
76366: LD_INT 2
76368: NEG
76369: PUSH
76370: EMPTY
76371: LIST
76372: LIST
76373: PUSH
76374: LD_INT 2
76376: NEG
76377: PUSH
76378: LD_INT 2
76380: PUSH
76381: EMPTY
76382: LIST
76383: LIST
76384: PUSH
76385: LD_INT 4
76387: NEG
76388: PUSH
76389: LD_INT 4
76391: NEG
76392: PUSH
76393: EMPTY
76394: LIST
76395: LIST
76396: PUSH
76397: LD_INT 4
76399: NEG
76400: PUSH
76401: LD_INT 5
76403: NEG
76404: PUSH
76405: EMPTY
76406: LIST
76407: LIST
76408: PUSH
76409: LD_INT 3
76411: NEG
76412: PUSH
76413: LD_INT 4
76415: NEG
76416: PUSH
76417: EMPTY
76418: LIST
76419: LIST
76420: PUSH
76421: LD_INT 3
76423: NEG
76424: PUSH
76425: LD_INT 3
76427: NEG
76428: PUSH
76429: EMPTY
76430: LIST
76431: LIST
76432: PUSH
76433: LD_INT 4
76435: NEG
76436: PUSH
76437: LD_INT 3
76439: NEG
76440: PUSH
76441: EMPTY
76442: LIST
76443: LIST
76444: PUSH
76445: LD_INT 5
76447: NEG
76448: PUSH
76449: LD_INT 4
76451: NEG
76452: PUSH
76453: EMPTY
76454: LIST
76455: LIST
76456: PUSH
76457: LD_INT 5
76459: NEG
76460: PUSH
76461: LD_INT 5
76463: NEG
76464: PUSH
76465: EMPTY
76466: LIST
76467: LIST
76468: PUSH
76469: LD_INT 3
76471: NEG
76472: PUSH
76473: LD_INT 5
76475: NEG
76476: PUSH
76477: EMPTY
76478: LIST
76479: LIST
76480: PUSH
76481: LD_INT 5
76483: NEG
76484: PUSH
76485: LD_INT 3
76487: NEG
76488: PUSH
76489: EMPTY
76490: LIST
76491: LIST
76492: PUSH
76493: EMPTY
76494: LIST
76495: LIST
76496: LIST
76497: LIST
76498: LIST
76499: LIST
76500: LIST
76501: LIST
76502: LIST
76503: LIST
76504: LIST
76505: LIST
76506: LIST
76507: LIST
76508: LIST
76509: LIST
76510: LIST
76511: LIST
76512: LIST
76513: LIST
76514: LIST
76515: LIST
76516: LIST
76517: LIST
76518: LIST
76519: LIST
76520: LIST
76521: LIST
76522: LIST
76523: LIST
76524: LIST
76525: LIST
76526: LIST
76527: LIST
76528: LIST
76529: LIST
76530: LIST
76531: LIST
76532: LIST
76533: LIST
76534: LIST
76535: LIST
76536: LIST
76537: LIST
76538: LIST
76539: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
76540: LD_ADDR_VAR 0 30
76544: PUSH
76545: LD_INT 4
76547: PUSH
76548: LD_INT 4
76550: PUSH
76551: EMPTY
76552: LIST
76553: LIST
76554: PUSH
76555: LD_INT 4
76557: PUSH
76558: LD_INT 3
76560: PUSH
76561: EMPTY
76562: LIST
76563: LIST
76564: PUSH
76565: LD_INT 5
76567: PUSH
76568: LD_INT 4
76570: PUSH
76571: EMPTY
76572: LIST
76573: LIST
76574: PUSH
76575: LD_INT 5
76577: PUSH
76578: LD_INT 5
76580: PUSH
76581: EMPTY
76582: LIST
76583: LIST
76584: PUSH
76585: LD_INT 4
76587: PUSH
76588: LD_INT 5
76590: PUSH
76591: EMPTY
76592: LIST
76593: LIST
76594: PUSH
76595: LD_INT 3
76597: PUSH
76598: LD_INT 4
76600: PUSH
76601: EMPTY
76602: LIST
76603: LIST
76604: PUSH
76605: LD_INT 3
76607: PUSH
76608: LD_INT 3
76610: PUSH
76611: EMPTY
76612: LIST
76613: LIST
76614: PUSH
76615: LD_INT 5
76617: PUSH
76618: LD_INT 3
76620: PUSH
76621: EMPTY
76622: LIST
76623: LIST
76624: PUSH
76625: LD_INT 3
76627: PUSH
76628: LD_INT 5
76630: PUSH
76631: EMPTY
76632: LIST
76633: LIST
76634: PUSH
76635: LD_INT 0
76637: PUSH
76638: LD_INT 3
76640: PUSH
76641: EMPTY
76642: LIST
76643: LIST
76644: PUSH
76645: LD_INT 0
76647: PUSH
76648: LD_INT 2
76650: PUSH
76651: EMPTY
76652: LIST
76653: LIST
76654: PUSH
76655: LD_INT 1
76657: PUSH
76658: LD_INT 3
76660: PUSH
76661: EMPTY
76662: LIST
76663: LIST
76664: PUSH
76665: LD_INT 1
76667: PUSH
76668: LD_INT 4
76670: PUSH
76671: EMPTY
76672: LIST
76673: LIST
76674: PUSH
76675: LD_INT 0
76677: PUSH
76678: LD_INT 4
76680: PUSH
76681: EMPTY
76682: LIST
76683: LIST
76684: PUSH
76685: LD_INT 1
76687: NEG
76688: PUSH
76689: LD_INT 3
76691: PUSH
76692: EMPTY
76693: LIST
76694: LIST
76695: PUSH
76696: LD_INT 1
76698: NEG
76699: PUSH
76700: LD_INT 2
76702: PUSH
76703: EMPTY
76704: LIST
76705: LIST
76706: PUSH
76707: LD_INT 2
76709: PUSH
76710: LD_INT 4
76712: PUSH
76713: EMPTY
76714: LIST
76715: LIST
76716: PUSH
76717: LD_INT 2
76719: NEG
76720: PUSH
76721: LD_INT 2
76723: PUSH
76724: EMPTY
76725: LIST
76726: LIST
76727: PUSH
76728: LD_INT 4
76730: NEG
76731: PUSH
76732: LD_INT 0
76734: PUSH
76735: EMPTY
76736: LIST
76737: LIST
76738: PUSH
76739: LD_INT 4
76741: NEG
76742: PUSH
76743: LD_INT 1
76745: NEG
76746: PUSH
76747: EMPTY
76748: LIST
76749: LIST
76750: PUSH
76751: LD_INT 3
76753: NEG
76754: PUSH
76755: LD_INT 0
76757: PUSH
76758: EMPTY
76759: LIST
76760: LIST
76761: PUSH
76762: LD_INT 3
76764: NEG
76765: PUSH
76766: LD_INT 1
76768: PUSH
76769: EMPTY
76770: LIST
76771: LIST
76772: PUSH
76773: LD_INT 4
76775: NEG
76776: PUSH
76777: LD_INT 1
76779: PUSH
76780: EMPTY
76781: LIST
76782: LIST
76783: PUSH
76784: LD_INT 5
76786: NEG
76787: PUSH
76788: LD_INT 0
76790: PUSH
76791: EMPTY
76792: LIST
76793: LIST
76794: PUSH
76795: LD_INT 5
76797: NEG
76798: PUSH
76799: LD_INT 1
76801: NEG
76802: PUSH
76803: EMPTY
76804: LIST
76805: LIST
76806: PUSH
76807: LD_INT 5
76809: NEG
76810: PUSH
76811: LD_INT 2
76813: NEG
76814: PUSH
76815: EMPTY
76816: LIST
76817: LIST
76818: PUSH
76819: LD_INT 3
76821: NEG
76822: PUSH
76823: LD_INT 2
76825: PUSH
76826: EMPTY
76827: LIST
76828: LIST
76829: PUSH
76830: LD_INT 3
76832: NEG
76833: PUSH
76834: LD_INT 3
76836: NEG
76837: PUSH
76838: EMPTY
76839: LIST
76840: LIST
76841: PUSH
76842: LD_INT 3
76844: NEG
76845: PUSH
76846: LD_INT 4
76848: NEG
76849: PUSH
76850: EMPTY
76851: LIST
76852: LIST
76853: PUSH
76854: LD_INT 2
76856: NEG
76857: PUSH
76858: LD_INT 3
76860: NEG
76861: PUSH
76862: EMPTY
76863: LIST
76864: LIST
76865: PUSH
76866: LD_INT 2
76868: NEG
76869: PUSH
76870: LD_INT 2
76872: NEG
76873: PUSH
76874: EMPTY
76875: LIST
76876: LIST
76877: PUSH
76878: LD_INT 3
76880: NEG
76881: PUSH
76882: LD_INT 2
76884: NEG
76885: PUSH
76886: EMPTY
76887: LIST
76888: LIST
76889: PUSH
76890: LD_INT 4
76892: NEG
76893: PUSH
76894: LD_INT 3
76896: NEG
76897: PUSH
76898: EMPTY
76899: LIST
76900: LIST
76901: PUSH
76902: LD_INT 4
76904: NEG
76905: PUSH
76906: LD_INT 4
76908: NEG
76909: PUSH
76910: EMPTY
76911: LIST
76912: LIST
76913: PUSH
76914: LD_INT 2
76916: NEG
76917: PUSH
76918: LD_INT 4
76920: NEG
76921: PUSH
76922: EMPTY
76923: LIST
76924: LIST
76925: PUSH
76926: LD_INT 4
76928: NEG
76929: PUSH
76930: LD_INT 2
76932: NEG
76933: PUSH
76934: EMPTY
76935: LIST
76936: LIST
76937: PUSH
76938: LD_INT 0
76940: PUSH
76941: LD_INT 4
76943: NEG
76944: PUSH
76945: EMPTY
76946: LIST
76947: LIST
76948: PUSH
76949: LD_INT 0
76951: PUSH
76952: LD_INT 5
76954: NEG
76955: PUSH
76956: EMPTY
76957: LIST
76958: LIST
76959: PUSH
76960: LD_INT 1
76962: PUSH
76963: LD_INT 4
76965: NEG
76966: PUSH
76967: EMPTY
76968: LIST
76969: LIST
76970: PUSH
76971: LD_INT 1
76973: PUSH
76974: LD_INT 3
76976: NEG
76977: PUSH
76978: EMPTY
76979: LIST
76980: LIST
76981: PUSH
76982: LD_INT 0
76984: PUSH
76985: LD_INT 3
76987: NEG
76988: PUSH
76989: EMPTY
76990: LIST
76991: LIST
76992: PUSH
76993: LD_INT 1
76995: NEG
76996: PUSH
76997: LD_INT 4
76999: NEG
77000: PUSH
77001: EMPTY
77002: LIST
77003: LIST
77004: PUSH
77005: LD_INT 1
77007: NEG
77008: PUSH
77009: LD_INT 5
77011: NEG
77012: PUSH
77013: EMPTY
77014: LIST
77015: LIST
77016: PUSH
77017: LD_INT 2
77019: PUSH
77020: LD_INT 3
77022: NEG
77023: PUSH
77024: EMPTY
77025: LIST
77026: LIST
77027: PUSH
77028: LD_INT 2
77030: NEG
77031: PUSH
77032: LD_INT 5
77034: NEG
77035: PUSH
77036: EMPTY
77037: LIST
77038: LIST
77039: PUSH
77040: EMPTY
77041: LIST
77042: LIST
77043: LIST
77044: LIST
77045: LIST
77046: LIST
77047: LIST
77048: LIST
77049: LIST
77050: LIST
77051: LIST
77052: LIST
77053: LIST
77054: LIST
77055: LIST
77056: LIST
77057: LIST
77058: LIST
77059: LIST
77060: LIST
77061: LIST
77062: LIST
77063: LIST
77064: LIST
77065: LIST
77066: LIST
77067: LIST
77068: LIST
77069: LIST
77070: LIST
77071: LIST
77072: LIST
77073: LIST
77074: LIST
77075: LIST
77076: LIST
77077: LIST
77078: LIST
77079: LIST
77080: LIST
77081: LIST
77082: LIST
77083: LIST
77084: LIST
77085: LIST
77086: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
77087: LD_ADDR_VAR 0 31
77091: PUSH
77092: LD_INT 0
77094: PUSH
77095: LD_INT 4
77097: PUSH
77098: EMPTY
77099: LIST
77100: LIST
77101: PUSH
77102: LD_INT 0
77104: PUSH
77105: LD_INT 3
77107: PUSH
77108: EMPTY
77109: LIST
77110: LIST
77111: PUSH
77112: LD_INT 1
77114: PUSH
77115: LD_INT 4
77117: PUSH
77118: EMPTY
77119: LIST
77120: LIST
77121: PUSH
77122: LD_INT 1
77124: PUSH
77125: LD_INT 5
77127: PUSH
77128: EMPTY
77129: LIST
77130: LIST
77131: PUSH
77132: LD_INT 0
77134: PUSH
77135: LD_INT 5
77137: PUSH
77138: EMPTY
77139: LIST
77140: LIST
77141: PUSH
77142: LD_INT 1
77144: NEG
77145: PUSH
77146: LD_INT 4
77148: PUSH
77149: EMPTY
77150: LIST
77151: LIST
77152: PUSH
77153: LD_INT 1
77155: NEG
77156: PUSH
77157: LD_INT 3
77159: PUSH
77160: EMPTY
77161: LIST
77162: LIST
77163: PUSH
77164: LD_INT 2
77166: PUSH
77167: LD_INT 5
77169: PUSH
77170: EMPTY
77171: LIST
77172: LIST
77173: PUSH
77174: LD_INT 2
77176: NEG
77177: PUSH
77178: LD_INT 3
77180: PUSH
77181: EMPTY
77182: LIST
77183: LIST
77184: PUSH
77185: LD_INT 3
77187: NEG
77188: PUSH
77189: LD_INT 0
77191: PUSH
77192: EMPTY
77193: LIST
77194: LIST
77195: PUSH
77196: LD_INT 3
77198: NEG
77199: PUSH
77200: LD_INT 1
77202: NEG
77203: PUSH
77204: EMPTY
77205: LIST
77206: LIST
77207: PUSH
77208: LD_INT 2
77210: NEG
77211: PUSH
77212: LD_INT 0
77214: PUSH
77215: EMPTY
77216: LIST
77217: LIST
77218: PUSH
77219: LD_INT 2
77221: NEG
77222: PUSH
77223: LD_INT 1
77225: PUSH
77226: EMPTY
77227: LIST
77228: LIST
77229: PUSH
77230: LD_INT 3
77232: NEG
77233: PUSH
77234: LD_INT 1
77236: PUSH
77237: EMPTY
77238: LIST
77239: LIST
77240: PUSH
77241: LD_INT 4
77243: NEG
77244: PUSH
77245: LD_INT 0
77247: PUSH
77248: EMPTY
77249: LIST
77250: LIST
77251: PUSH
77252: LD_INT 4
77254: NEG
77255: PUSH
77256: LD_INT 1
77258: NEG
77259: PUSH
77260: EMPTY
77261: LIST
77262: LIST
77263: PUSH
77264: LD_INT 4
77266: NEG
77267: PUSH
77268: LD_INT 2
77270: NEG
77271: PUSH
77272: EMPTY
77273: LIST
77274: LIST
77275: PUSH
77276: LD_INT 2
77278: NEG
77279: PUSH
77280: LD_INT 2
77282: PUSH
77283: EMPTY
77284: LIST
77285: LIST
77286: PUSH
77287: LD_INT 4
77289: NEG
77290: PUSH
77291: LD_INT 4
77293: NEG
77294: PUSH
77295: EMPTY
77296: LIST
77297: LIST
77298: PUSH
77299: LD_INT 4
77301: NEG
77302: PUSH
77303: LD_INT 5
77305: NEG
77306: PUSH
77307: EMPTY
77308: LIST
77309: LIST
77310: PUSH
77311: LD_INT 3
77313: NEG
77314: PUSH
77315: LD_INT 4
77317: NEG
77318: PUSH
77319: EMPTY
77320: LIST
77321: LIST
77322: PUSH
77323: LD_INT 3
77325: NEG
77326: PUSH
77327: LD_INT 3
77329: NEG
77330: PUSH
77331: EMPTY
77332: LIST
77333: LIST
77334: PUSH
77335: LD_INT 4
77337: NEG
77338: PUSH
77339: LD_INT 3
77341: NEG
77342: PUSH
77343: EMPTY
77344: LIST
77345: LIST
77346: PUSH
77347: LD_INT 5
77349: NEG
77350: PUSH
77351: LD_INT 4
77353: NEG
77354: PUSH
77355: EMPTY
77356: LIST
77357: LIST
77358: PUSH
77359: LD_INT 5
77361: NEG
77362: PUSH
77363: LD_INT 5
77365: NEG
77366: PUSH
77367: EMPTY
77368: LIST
77369: LIST
77370: PUSH
77371: LD_INT 3
77373: NEG
77374: PUSH
77375: LD_INT 5
77377: NEG
77378: PUSH
77379: EMPTY
77380: LIST
77381: LIST
77382: PUSH
77383: LD_INT 5
77385: NEG
77386: PUSH
77387: LD_INT 3
77389: NEG
77390: PUSH
77391: EMPTY
77392: LIST
77393: LIST
77394: PUSH
77395: LD_INT 0
77397: PUSH
77398: LD_INT 3
77400: NEG
77401: PUSH
77402: EMPTY
77403: LIST
77404: LIST
77405: PUSH
77406: LD_INT 0
77408: PUSH
77409: LD_INT 4
77411: NEG
77412: PUSH
77413: EMPTY
77414: LIST
77415: LIST
77416: PUSH
77417: LD_INT 1
77419: PUSH
77420: LD_INT 3
77422: NEG
77423: PUSH
77424: EMPTY
77425: LIST
77426: LIST
77427: PUSH
77428: LD_INT 1
77430: PUSH
77431: LD_INT 2
77433: NEG
77434: PUSH
77435: EMPTY
77436: LIST
77437: LIST
77438: PUSH
77439: LD_INT 0
77441: PUSH
77442: LD_INT 2
77444: NEG
77445: PUSH
77446: EMPTY
77447: LIST
77448: LIST
77449: PUSH
77450: LD_INT 1
77452: NEG
77453: PUSH
77454: LD_INT 3
77456: NEG
77457: PUSH
77458: EMPTY
77459: LIST
77460: LIST
77461: PUSH
77462: LD_INT 1
77464: NEG
77465: PUSH
77466: LD_INT 4
77468: NEG
77469: PUSH
77470: EMPTY
77471: LIST
77472: LIST
77473: PUSH
77474: LD_INT 2
77476: PUSH
77477: LD_INT 2
77479: NEG
77480: PUSH
77481: EMPTY
77482: LIST
77483: LIST
77484: PUSH
77485: LD_INT 2
77487: NEG
77488: PUSH
77489: LD_INT 4
77491: NEG
77492: PUSH
77493: EMPTY
77494: LIST
77495: LIST
77496: PUSH
77497: LD_INT 4
77499: PUSH
77500: LD_INT 0
77502: PUSH
77503: EMPTY
77504: LIST
77505: LIST
77506: PUSH
77507: LD_INT 4
77509: PUSH
77510: LD_INT 1
77512: NEG
77513: PUSH
77514: EMPTY
77515: LIST
77516: LIST
77517: PUSH
77518: LD_INT 5
77520: PUSH
77521: LD_INT 0
77523: PUSH
77524: EMPTY
77525: LIST
77526: LIST
77527: PUSH
77528: LD_INT 5
77530: PUSH
77531: LD_INT 1
77533: PUSH
77534: EMPTY
77535: LIST
77536: LIST
77537: PUSH
77538: LD_INT 4
77540: PUSH
77541: LD_INT 1
77543: PUSH
77544: EMPTY
77545: LIST
77546: LIST
77547: PUSH
77548: LD_INT 3
77550: PUSH
77551: LD_INT 0
77553: PUSH
77554: EMPTY
77555: LIST
77556: LIST
77557: PUSH
77558: LD_INT 3
77560: PUSH
77561: LD_INT 1
77563: NEG
77564: PUSH
77565: EMPTY
77566: LIST
77567: LIST
77568: PUSH
77569: LD_INT 3
77571: PUSH
77572: LD_INT 2
77574: NEG
77575: PUSH
77576: EMPTY
77577: LIST
77578: LIST
77579: PUSH
77580: LD_INT 5
77582: PUSH
77583: LD_INT 2
77585: PUSH
77586: EMPTY
77587: LIST
77588: LIST
77589: PUSH
77590: EMPTY
77591: LIST
77592: LIST
77593: LIST
77594: LIST
77595: LIST
77596: LIST
77597: LIST
77598: LIST
77599: LIST
77600: LIST
77601: LIST
77602: LIST
77603: LIST
77604: LIST
77605: LIST
77606: LIST
77607: LIST
77608: LIST
77609: LIST
77610: LIST
77611: LIST
77612: LIST
77613: LIST
77614: LIST
77615: LIST
77616: LIST
77617: LIST
77618: LIST
77619: LIST
77620: LIST
77621: LIST
77622: LIST
77623: LIST
77624: LIST
77625: LIST
77626: LIST
77627: LIST
77628: LIST
77629: LIST
77630: LIST
77631: LIST
77632: LIST
77633: LIST
77634: LIST
77635: LIST
77636: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
77637: LD_ADDR_VAR 0 32
77641: PUSH
77642: LD_INT 4
77644: NEG
77645: PUSH
77646: LD_INT 0
77648: PUSH
77649: EMPTY
77650: LIST
77651: LIST
77652: PUSH
77653: LD_INT 4
77655: NEG
77656: PUSH
77657: LD_INT 1
77659: NEG
77660: PUSH
77661: EMPTY
77662: LIST
77663: LIST
77664: PUSH
77665: LD_INT 3
77667: NEG
77668: PUSH
77669: LD_INT 0
77671: PUSH
77672: EMPTY
77673: LIST
77674: LIST
77675: PUSH
77676: LD_INT 3
77678: NEG
77679: PUSH
77680: LD_INT 1
77682: PUSH
77683: EMPTY
77684: LIST
77685: LIST
77686: PUSH
77687: LD_INT 4
77689: NEG
77690: PUSH
77691: LD_INT 1
77693: PUSH
77694: EMPTY
77695: LIST
77696: LIST
77697: PUSH
77698: LD_INT 5
77700: NEG
77701: PUSH
77702: LD_INT 0
77704: PUSH
77705: EMPTY
77706: LIST
77707: LIST
77708: PUSH
77709: LD_INT 5
77711: NEG
77712: PUSH
77713: LD_INT 1
77715: NEG
77716: PUSH
77717: EMPTY
77718: LIST
77719: LIST
77720: PUSH
77721: LD_INT 5
77723: NEG
77724: PUSH
77725: LD_INT 2
77727: NEG
77728: PUSH
77729: EMPTY
77730: LIST
77731: LIST
77732: PUSH
77733: LD_INT 3
77735: NEG
77736: PUSH
77737: LD_INT 2
77739: PUSH
77740: EMPTY
77741: LIST
77742: LIST
77743: PUSH
77744: LD_INT 3
77746: NEG
77747: PUSH
77748: LD_INT 3
77750: NEG
77751: PUSH
77752: EMPTY
77753: LIST
77754: LIST
77755: PUSH
77756: LD_INT 3
77758: NEG
77759: PUSH
77760: LD_INT 4
77762: NEG
77763: PUSH
77764: EMPTY
77765: LIST
77766: LIST
77767: PUSH
77768: LD_INT 2
77770: NEG
77771: PUSH
77772: LD_INT 3
77774: NEG
77775: PUSH
77776: EMPTY
77777: LIST
77778: LIST
77779: PUSH
77780: LD_INT 2
77782: NEG
77783: PUSH
77784: LD_INT 2
77786: NEG
77787: PUSH
77788: EMPTY
77789: LIST
77790: LIST
77791: PUSH
77792: LD_INT 3
77794: NEG
77795: PUSH
77796: LD_INT 2
77798: NEG
77799: PUSH
77800: EMPTY
77801: LIST
77802: LIST
77803: PUSH
77804: LD_INT 4
77806: NEG
77807: PUSH
77808: LD_INT 3
77810: NEG
77811: PUSH
77812: EMPTY
77813: LIST
77814: LIST
77815: PUSH
77816: LD_INT 4
77818: NEG
77819: PUSH
77820: LD_INT 4
77822: NEG
77823: PUSH
77824: EMPTY
77825: LIST
77826: LIST
77827: PUSH
77828: LD_INT 2
77830: NEG
77831: PUSH
77832: LD_INT 4
77834: NEG
77835: PUSH
77836: EMPTY
77837: LIST
77838: LIST
77839: PUSH
77840: LD_INT 4
77842: NEG
77843: PUSH
77844: LD_INT 2
77846: NEG
77847: PUSH
77848: EMPTY
77849: LIST
77850: LIST
77851: PUSH
77852: LD_INT 0
77854: PUSH
77855: LD_INT 4
77857: NEG
77858: PUSH
77859: EMPTY
77860: LIST
77861: LIST
77862: PUSH
77863: LD_INT 0
77865: PUSH
77866: LD_INT 5
77868: NEG
77869: PUSH
77870: EMPTY
77871: LIST
77872: LIST
77873: PUSH
77874: LD_INT 1
77876: PUSH
77877: LD_INT 4
77879: NEG
77880: PUSH
77881: EMPTY
77882: LIST
77883: LIST
77884: PUSH
77885: LD_INT 1
77887: PUSH
77888: LD_INT 3
77890: NEG
77891: PUSH
77892: EMPTY
77893: LIST
77894: LIST
77895: PUSH
77896: LD_INT 0
77898: PUSH
77899: LD_INT 3
77901: NEG
77902: PUSH
77903: EMPTY
77904: LIST
77905: LIST
77906: PUSH
77907: LD_INT 1
77909: NEG
77910: PUSH
77911: LD_INT 4
77913: NEG
77914: PUSH
77915: EMPTY
77916: LIST
77917: LIST
77918: PUSH
77919: LD_INT 1
77921: NEG
77922: PUSH
77923: LD_INT 5
77925: NEG
77926: PUSH
77927: EMPTY
77928: LIST
77929: LIST
77930: PUSH
77931: LD_INT 2
77933: PUSH
77934: LD_INT 3
77936: NEG
77937: PUSH
77938: EMPTY
77939: LIST
77940: LIST
77941: PUSH
77942: LD_INT 2
77944: NEG
77945: PUSH
77946: LD_INT 5
77948: NEG
77949: PUSH
77950: EMPTY
77951: LIST
77952: LIST
77953: PUSH
77954: LD_INT 3
77956: PUSH
77957: LD_INT 0
77959: PUSH
77960: EMPTY
77961: LIST
77962: LIST
77963: PUSH
77964: LD_INT 3
77966: PUSH
77967: LD_INT 1
77969: NEG
77970: PUSH
77971: EMPTY
77972: LIST
77973: LIST
77974: PUSH
77975: LD_INT 4
77977: PUSH
77978: LD_INT 0
77980: PUSH
77981: EMPTY
77982: LIST
77983: LIST
77984: PUSH
77985: LD_INT 4
77987: PUSH
77988: LD_INT 1
77990: PUSH
77991: EMPTY
77992: LIST
77993: LIST
77994: PUSH
77995: LD_INT 3
77997: PUSH
77998: LD_INT 1
78000: PUSH
78001: EMPTY
78002: LIST
78003: LIST
78004: PUSH
78005: LD_INT 2
78007: PUSH
78008: LD_INT 0
78010: PUSH
78011: EMPTY
78012: LIST
78013: LIST
78014: PUSH
78015: LD_INT 2
78017: PUSH
78018: LD_INT 1
78020: NEG
78021: PUSH
78022: EMPTY
78023: LIST
78024: LIST
78025: PUSH
78026: LD_INT 2
78028: PUSH
78029: LD_INT 2
78031: NEG
78032: PUSH
78033: EMPTY
78034: LIST
78035: LIST
78036: PUSH
78037: LD_INT 4
78039: PUSH
78040: LD_INT 2
78042: PUSH
78043: EMPTY
78044: LIST
78045: LIST
78046: PUSH
78047: LD_INT 4
78049: PUSH
78050: LD_INT 4
78052: PUSH
78053: EMPTY
78054: LIST
78055: LIST
78056: PUSH
78057: LD_INT 4
78059: PUSH
78060: LD_INT 3
78062: PUSH
78063: EMPTY
78064: LIST
78065: LIST
78066: PUSH
78067: LD_INT 5
78069: PUSH
78070: LD_INT 4
78072: PUSH
78073: EMPTY
78074: LIST
78075: LIST
78076: PUSH
78077: LD_INT 5
78079: PUSH
78080: LD_INT 5
78082: PUSH
78083: EMPTY
78084: LIST
78085: LIST
78086: PUSH
78087: LD_INT 4
78089: PUSH
78090: LD_INT 5
78092: PUSH
78093: EMPTY
78094: LIST
78095: LIST
78096: PUSH
78097: LD_INT 3
78099: PUSH
78100: LD_INT 4
78102: PUSH
78103: EMPTY
78104: LIST
78105: LIST
78106: PUSH
78107: LD_INT 3
78109: PUSH
78110: LD_INT 3
78112: PUSH
78113: EMPTY
78114: LIST
78115: LIST
78116: PUSH
78117: LD_INT 5
78119: PUSH
78120: LD_INT 3
78122: PUSH
78123: EMPTY
78124: LIST
78125: LIST
78126: PUSH
78127: LD_INT 3
78129: PUSH
78130: LD_INT 5
78132: PUSH
78133: EMPTY
78134: LIST
78135: LIST
78136: PUSH
78137: EMPTY
78138: LIST
78139: LIST
78140: LIST
78141: LIST
78142: LIST
78143: LIST
78144: LIST
78145: LIST
78146: LIST
78147: LIST
78148: LIST
78149: LIST
78150: LIST
78151: LIST
78152: LIST
78153: LIST
78154: LIST
78155: LIST
78156: LIST
78157: LIST
78158: LIST
78159: LIST
78160: LIST
78161: LIST
78162: LIST
78163: LIST
78164: LIST
78165: LIST
78166: LIST
78167: LIST
78168: LIST
78169: LIST
78170: LIST
78171: LIST
78172: LIST
78173: LIST
78174: LIST
78175: LIST
78176: LIST
78177: LIST
78178: LIST
78179: LIST
78180: LIST
78181: LIST
78182: LIST
78183: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
78184: LD_ADDR_VAR 0 33
78188: PUSH
78189: LD_INT 4
78191: NEG
78192: PUSH
78193: LD_INT 4
78195: NEG
78196: PUSH
78197: EMPTY
78198: LIST
78199: LIST
78200: PUSH
78201: LD_INT 4
78203: NEG
78204: PUSH
78205: LD_INT 5
78207: NEG
78208: PUSH
78209: EMPTY
78210: LIST
78211: LIST
78212: PUSH
78213: LD_INT 3
78215: NEG
78216: PUSH
78217: LD_INT 4
78219: NEG
78220: PUSH
78221: EMPTY
78222: LIST
78223: LIST
78224: PUSH
78225: LD_INT 3
78227: NEG
78228: PUSH
78229: LD_INT 3
78231: NEG
78232: PUSH
78233: EMPTY
78234: LIST
78235: LIST
78236: PUSH
78237: LD_INT 4
78239: NEG
78240: PUSH
78241: LD_INT 3
78243: NEG
78244: PUSH
78245: EMPTY
78246: LIST
78247: LIST
78248: PUSH
78249: LD_INT 5
78251: NEG
78252: PUSH
78253: LD_INT 4
78255: NEG
78256: PUSH
78257: EMPTY
78258: LIST
78259: LIST
78260: PUSH
78261: LD_INT 5
78263: NEG
78264: PUSH
78265: LD_INT 5
78267: NEG
78268: PUSH
78269: EMPTY
78270: LIST
78271: LIST
78272: PUSH
78273: LD_INT 3
78275: NEG
78276: PUSH
78277: LD_INT 5
78279: NEG
78280: PUSH
78281: EMPTY
78282: LIST
78283: LIST
78284: PUSH
78285: LD_INT 5
78287: NEG
78288: PUSH
78289: LD_INT 3
78291: NEG
78292: PUSH
78293: EMPTY
78294: LIST
78295: LIST
78296: PUSH
78297: LD_INT 0
78299: PUSH
78300: LD_INT 3
78302: NEG
78303: PUSH
78304: EMPTY
78305: LIST
78306: LIST
78307: PUSH
78308: LD_INT 0
78310: PUSH
78311: LD_INT 4
78313: NEG
78314: PUSH
78315: EMPTY
78316: LIST
78317: LIST
78318: PUSH
78319: LD_INT 1
78321: PUSH
78322: LD_INT 3
78324: NEG
78325: PUSH
78326: EMPTY
78327: LIST
78328: LIST
78329: PUSH
78330: LD_INT 1
78332: PUSH
78333: LD_INT 2
78335: NEG
78336: PUSH
78337: EMPTY
78338: LIST
78339: LIST
78340: PUSH
78341: LD_INT 0
78343: PUSH
78344: LD_INT 2
78346: NEG
78347: PUSH
78348: EMPTY
78349: LIST
78350: LIST
78351: PUSH
78352: LD_INT 1
78354: NEG
78355: PUSH
78356: LD_INT 3
78358: NEG
78359: PUSH
78360: EMPTY
78361: LIST
78362: LIST
78363: PUSH
78364: LD_INT 1
78366: NEG
78367: PUSH
78368: LD_INT 4
78370: NEG
78371: PUSH
78372: EMPTY
78373: LIST
78374: LIST
78375: PUSH
78376: LD_INT 2
78378: PUSH
78379: LD_INT 2
78381: NEG
78382: PUSH
78383: EMPTY
78384: LIST
78385: LIST
78386: PUSH
78387: LD_INT 2
78389: NEG
78390: PUSH
78391: LD_INT 4
78393: NEG
78394: PUSH
78395: EMPTY
78396: LIST
78397: LIST
78398: PUSH
78399: LD_INT 4
78401: PUSH
78402: LD_INT 0
78404: PUSH
78405: EMPTY
78406: LIST
78407: LIST
78408: PUSH
78409: LD_INT 4
78411: PUSH
78412: LD_INT 1
78414: NEG
78415: PUSH
78416: EMPTY
78417: LIST
78418: LIST
78419: PUSH
78420: LD_INT 5
78422: PUSH
78423: LD_INT 0
78425: PUSH
78426: EMPTY
78427: LIST
78428: LIST
78429: PUSH
78430: LD_INT 5
78432: PUSH
78433: LD_INT 1
78435: PUSH
78436: EMPTY
78437: LIST
78438: LIST
78439: PUSH
78440: LD_INT 4
78442: PUSH
78443: LD_INT 1
78445: PUSH
78446: EMPTY
78447: LIST
78448: LIST
78449: PUSH
78450: LD_INT 3
78452: PUSH
78453: LD_INT 0
78455: PUSH
78456: EMPTY
78457: LIST
78458: LIST
78459: PUSH
78460: LD_INT 3
78462: PUSH
78463: LD_INT 1
78465: NEG
78466: PUSH
78467: EMPTY
78468: LIST
78469: LIST
78470: PUSH
78471: LD_INT 3
78473: PUSH
78474: LD_INT 2
78476: NEG
78477: PUSH
78478: EMPTY
78479: LIST
78480: LIST
78481: PUSH
78482: LD_INT 5
78484: PUSH
78485: LD_INT 2
78487: PUSH
78488: EMPTY
78489: LIST
78490: LIST
78491: PUSH
78492: LD_INT 3
78494: PUSH
78495: LD_INT 3
78497: PUSH
78498: EMPTY
78499: LIST
78500: LIST
78501: PUSH
78502: LD_INT 3
78504: PUSH
78505: LD_INT 2
78507: PUSH
78508: EMPTY
78509: LIST
78510: LIST
78511: PUSH
78512: LD_INT 4
78514: PUSH
78515: LD_INT 3
78517: PUSH
78518: EMPTY
78519: LIST
78520: LIST
78521: PUSH
78522: LD_INT 4
78524: PUSH
78525: LD_INT 4
78527: PUSH
78528: EMPTY
78529: LIST
78530: LIST
78531: PUSH
78532: LD_INT 3
78534: PUSH
78535: LD_INT 4
78537: PUSH
78538: EMPTY
78539: LIST
78540: LIST
78541: PUSH
78542: LD_INT 2
78544: PUSH
78545: LD_INT 3
78547: PUSH
78548: EMPTY
78549: LIST
78550: LIST
78551: PUSH
78552: LD_INT 2
78554: PUSH
78555: LD_INT 2
78557: PUSH
78558: EMPTY
78559: LIST
78560: LIST
78561: PUSH
78562: LD_INT 4
78564: PUSH
78565: LD_INT 2
78567: PUSH
78568: EMPTY
78569: LIST
78570: LIST
78571: PUSH
78572: LD_INT 2
78574: PUSH
78575: LD_INT 4
78577: PUSH
78578: EMPTY
78579: LIST
78580: LIST
78581: PUSH
78582: LD_INT 0
78584: PUSH
78585: LD_INT 4
78587: PUSH
78588: EMPTY
78589: LIST
78590: LIST
78591: PUSH
78592: LD_INT 0
78594: PUSH
78595: LD_INT 3
78597: PUSH
78598: EMPTY
78599: LIST
78600: LIST
78601: PUSH
78602: LD_INT 1
78604: PUSH
78605: LD_INT 4
78607: PUSH
78608: EMPTY
78609: LIST
78610: LIST
78611: PUSH
78612: LD_INT 1
78614: PUSH
78615: LD_INT 5
78617: PUSH
78618: EMPTY
78619: LIST
78620: LIST
78621: PUSH
78622: LD_INT 0
78624: PUSH
78625: LD_INT 5
78627: PUSH
78628: EMPTY
78629: LIST
78630: LIST
78631: PUSH
78632: LD_INT 1
78634: NEG
78635: PUSH
78636: LD_INT 4
78638: PUSH
78639: EMPTY
78640: LIST
78641: LIST
78642: PUSH
78643: LD_INT 1
78645: NEG
78646: PUSH
78647: LD_INT 3
78649: PUSH
78650: EMPTY
78651: LIST
78652: LIST
78653: PUSH
78654: LD_INT 2
78656: PUSH
78657: LD_INT 5
78659: PUSH
78660: EMPTY
78661: LIST
78662: LIST
78663: PUSH
78664: LD_INT 2
78666: NEG
78667: PUSH
78668: LD_INT 3
78670: PUSH
78671: EMPTY
78672: LIST
78673: LIST
78674: PUSH
78675: EMPTY
78676: LIST
78677: LIST
78678: LIST
78679: LIST
78680: LIST
78681: LIST
78682: LIST
78683: LIST
78684: LIST
78685: LIST
78686: LIST
78687: LIST
78688: LIST
78689: LIST
78690: LIST
78691: LIST
78692: LIST
78693: LIST
78694: LIST
78695: LIST
78696: LIST
78697: LIST
78698: LIST
78699: LIST
78700: LIST
78701: LIST
78702: LIST
78703: LIST
78704: LIST
78705: LIST
78706: LIST
78707: LIST
78708: LIST
78709: LIST
78710: LIST
78711: LIST
78712: LIST
78713: LIST
78714: LIST
78715: LIST
78716: LIST
78717: LIST
78718: LIST
78719: LIST
78720: LIST
78721: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
78722: LD_ADDR_VAR 0 34
78726: PUSH
78727: LD_INT 0
78729: PUSH
78730: LD_INT 4
78732: NEG
78733: PUSH
78734: EMPTY
78735: LIST
78736: LIST
78737: PUSH
78738: LD_INT 0
78740: PUSH
78741: LD_INT 5
78743: NEG
78744: PUSH
78745: EMPTY
78746: LIST
78747: LIST
78748: PUSH
78749: LD_INT 1
78751: PUSH
78752: LD_INT 4
78754: NEG
78755: PUSH
78756: EMPTY
78757: LIST
78758: LIST
78759: PUSH
78760: LD_INT 1
78762: PUSH
78763: LD_INT 3
78765: NEG
78766: PUSH
78767: EMPTY
78768: LIST
78769: LIST
78770: PUSH
78771: LD_INT 0
78773: PUSH
78774: LD_INT 3
78776: NEG
78777: PUSH
78778: EMPTY
78779: LIST
78780: LIST
78781: PUSH
78782: LD_INT 1
78784: NEG
78785: PUSH
78786: LD_INT 4
78788: NEG
78789: PUSH
78790: EMPTY
78791: LIST
78792: LIST
78793: PUSH
78794: LD_INT 1
78796: NEG
78797: PUSH
78798: LD_INT 5
78800: NEG
78801: PUSH
78802: EMPTY
78803: LIST
78804: LIST
78805: PUSH
78806: LD_INT 2
78808: PUSH
78809: LD_INT 3
78811: NEG
78812: PUSH
78813: EMPTY
78814: LIST
78815: LIST
78816: PUSH
78817: LD_INT 2
78819: NEG
78820: PUSH
78821: LD_INT 5
78823: NEG
78824: PUSH
78825: EMPTY
78826: LIST
78827: LIST
78828: PUSH
78829: LD_INT 3
78831: PUSH
78832: LD_INT 0
78834: PUSH
78835: EMPTY
78836: LIST
78837: LIST
78838: PUSH
78839: LD_INT 3
78841: PUSH
78842: LD_INT 1
78844: NEG
78845: PUSH
78846: EMPTY
78847: LIST
78848: LIST
78849: PUSH
78850: LD_INT 4
78852: PUSH
78853: LD_INT 0
78855: PUSH
78856: EMPTY
78857: LIST
78858: LIST
78859: PUSH
78860: LD_INT 4
78862: PUSH
78863: LD_INT 1
78865: PUSH
78866: EMPTY
78867: LIST
78868: LIST
78869: PUSH
78870: LD_INT 3
78872: PUSH
78873: LD_INT 1
78875: PUSH
78876: EMPTY
78877: LIST
78878: LIST
78879: PUSH
78880: LD_INT 2
78882: PUSH
78883: LD_INT 0
78885: PUSH
78886: EMPTY
78887: LIST
78888: LIST
78889: PUSH
78890: LD_INT 2
78892: PUSH
78893: LD_INT 1
78895: NEG
78896: PUSH
78897: EMPTY
78898: LIST
78899: LIST
78900: PUSH
78901: LD_INT 2
78903: PUSH
78904: LD_INT 2
78906: NEG
78907: PUSH
78908: EMPTY
78909: LIST
78910: LIST
78911: PUSH
78912: LD_INT 4
78914: PUSH
78915: LD_INT 2
78917: PUSH
78918: EMPTY
78919: LIST
78920: LIST
78921: PUSH
78922: LD_INT 4
78924: PUSH
78925: LD_INT 4
78927: PUSH
78928: EMPTY
78929: LIST
78930: LIST
78931: PUSH
78932: LD_INT 4
78934: PUSH
78935: LD_INT 3
78937: PUSH
78938: EMPTY
78939: LIST
78940: LIST
78941: PUSH
78942: LD_INT 5
78944: PUSH
78945: LD_INT 4
78947: PUSH
78948: EMPTY
78949: LIST
78950: LIST
78951: PUSH
78952: LD_INT 5
78954: PUSH
78955: LD_INT 5
78957: PUSH
78958: EMPTY
78959: LIST
78960: LIST
78961: PUSH
78962: LD_INT 4
78964: PUSH
78965: LD_INT 5
78967: PUSH
78968: EMPTY
78969: LIST
78970: LIST
78971: PUSH
78972: LD_INT 3
78974: PUSH
78975: LD_INT 4
78977: PUSH
78978: EMPTY
78979: LIST
78980: LIST
78981: PUSH
78982: LD_INT 3
78984: PUSH
78985: LD_INT 3
78987: PUSH
78988: EMPTY
78989: LIST
78990: LIST
78991: PUSH
78992: LD_INT 5
78994: PUSH
78995: LD_INT 3
78997: PUSH
78998: EMPTY
78999: LIST
79000: LIST
79001: PUSH
79002: LD_INT 3
79004: PUSH
79005: LD_INT 5
79007: PUSH
79008: EMPTY
79009: LIST
79010: LIST
79011: PUSH
79012: LD_INT 0
79014: PUSH
79015: LD_INT 3
79017: PUSH
79018: EMPTY
79019: LIST
79020: LIST
79021: PUSH
79022: LD_INT 0
79024: PUSH
79025: LD_INT 2
79027: PUSH
79028: EMPTY
79029: LIST
79030: LIST
79031: PUSH
79032: LD_INT 1
79034: PUSH
79035: LD_INT 3
79037: PUSH
79038: EMPTY
79039: LIST
79040: LIST
79041: PUSH
79042: LD_INT 1
79044: PUSH
79045: LD_INT 4
79047: PUSH
79048: EMPTY
79049: LIST
79050: LIST
79051: PUSH
79052: LD_INT 0
79054: PUSH
79055: LD_INT 4
79057: PUSH
79058: EMPTY
79059: LIST
79060: LIST
79061: PUSH
79062: LD_INT 1
79064: NEG
79065: PUSH
79066: LD_INT 3
79068: PUSH
79069: EMPTY
79070: LIST
79071: LIST
79072: PUSH
79073: LD_INT 1
79075: NEG
79076: PUSH
79077: LD_INT 2
79079: PUSH
79080: EMPTY
79081: LIST
79082: LIST
79083: PUSH
79084: LD_INT 2
79086: PUSH
79087: LD_INT 4
79089: PUSH
79090: EMPTY
79091: LIST
79092: LIST
79093: PUSH
79094: LD_INT 2
79096: NEG
79097: PUSH
79098: LD_INT 2
79100: PUSH
79101: EMPTY
79102: LIST
79103: LIST
79104: PUSH
79105: LD_INT 4
79107: NEG
79108: PUSH
79109: LD_INT 0
79111: PUSH
79112: EMPTY
79113: LIST
79114: LIST
79115: PUSH
79116: LD_INT 4
79118: NEG
79119: PUSH
79120: LD_INT 1
79122: NEG
79123: PUSH
79124: EMPTY
79125: LIST
79126: LIST
79127: PUSH
79128: LD_INT 3
79130: NEG
79131: PUSH
79132: LD_INT 0
79134: PUSH
79135: EMPTY
79136: LIST
79137: LIST
79138: PUSH
79139: LD_INT 3
79141: NEG
79142: PUSH
79143: LD_INT 1
79145: PUSH
79146: EMPTY
79147: LIST
79148: LIST
79149: PUSH
79150: LD_INT 4
79152: NEG
79153: PUSH
79154: LD_INT 1
79156: PUSH
79157: EMPTY
79158: LIST
79159: LIST
79160: PUSH
79161: LD_INT 5
79163: NEG
79164: PUSH
79165: LD_INT 0
79167: PUSH
79168: EMPTY
79169: LIST
79170: LIST
79171: PUSH
79172: LD_INT 5
79174: NEG
79175: PUSH
79176: LD_INT 1
79178: NEG
79179: PUSH
79180: EMPTY
79181: LIST
79182: LIST
79183: PUSH
79184: LD_INT 5
79186: NEG
79187: PUSH
79188: LD_INT 2
79190: NEG
79191: PUSH
79192: EMPTY
79193: LIST
79194: LIST
79195: PUSH
79196: LD_INT 3
79198: NEG
79199: PUSH
79200: LD_INT 2
79202: PUSH
79203: EMPTY
79204: LIST
79205: LIST
79206: PUSH
79207: EMPTY
79208: LIST
79209: LIST
79210: LIST
79211: LIST
79212: LIST
79213: LIST
79214: LIST
79215: LIST
79216: LIST
79217: LIST
79218: LIST
79219: LIST
79220: LIST
79221: LIST
79222: LIST
79223: LIST
79224: LIST
79225: LIST
79226: LIST
79227: LIST
79228: LIST
79229: LIST
79230: LIST
79231: LIST
79232: LIST
79233: LIST
79234: LIST
79235: LIST
79236: LIST
79237: LIST
79238: LIST
79239: LIST
79240: LIST
79241: LIST
79242: LIST
79243: LIST
79244: LIST
79245: LIST
79246: LIST
79247: LIST
79248: LIST
79249: LIST
79250: LIST
79251: LIST
79252: LIST
79253: ST_TO_ADDR
// end ; end ;
79254: GO 79257
79256: POP
// case btype of b_depot , b_warehouse :
79257: LD_VAR 0 1
79261: PUSH
79262: LD_INT 0
79264: DOUBLE
79265: EQUAL
79266: IFTRUE 79276
79268: LD_INT 1
79270: DOUBLE
79271: EQUAL
79272: IFTRUE 79276
79274: GO 79477
79276: POP
// case nation of nation_american :
79277: LD_VAR 0 5
79281: PUSH
79282: LD_INT 1
79284: DOUBLE
79285: EQUAL
79286: IFTRUE 79290
79288: GO 79346
79290: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
79291: LD_ADDR_VAR 0 9
79295: PUSH
79296: LD_VAR 0 11
79300: PUSH
79301: LD_VAR 0 12
79305: PUSH
79306: LD_VAR 0 13
79310: PUSH
79311: LD_VAR 0 14
79315: PUSH
79316: LD_VAR 0 15
79320: PUSH
79321: LD_VAR 0 16
79325: PUSH
79326: EMPTY
79327: LIST
79328: LIST
79329: LIST
79330: LIST
79331: LIST
79332: LIST
79333: PUSH
79334: LD_VAR 0 4
79338: PUSH
79339: LD_INT 1
79341: PLUS
79342: ARRAY
79343: ST_TO_ADDR
79344: GO 79475
79346: LD_INT 2
79348: DOUBLE
79349: EQUAL
79350: IFTRUE 79354
79352: GO 79410
79354: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
79355: LD_ADDR_VAR 0 9
79359: PUSH
79360: LD_VAR 0 17
79364: PUSH
79365: LD_VAR 0 18
79369: PUSH
79370: LD_VAR 0 19
79374: PUSH
79375: LD_VAR 0 20
79379: PUSH
79380: LD_VAR 0 21
79384: PUSH
79385: LD_VAR 0 22
79389: PUSH
79390: EMPTY
79391: LIST
79392: LIST
79393: LIST
79394: LIST
79395: LIST
79396: LIST
79397: PUSH
79398: LD_VAR 0 4
79402: PUSH
79403: LD_INT 1
79405: PLUS
79406: ARRAY
79407: ST_TO_ADDR
79408: GO 79475
79410: LD_INT 3
79412: DOUBLE
79413: EQUAL
79414: IFTRUE 79418
79416: GO 79474
79418: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
79419: LD_ADDR_VAR 0 9
79423: PUSH
79424: LD_VAR 0 23
79428: PUSH
79429: LD_VAR 0 24
79433: PUSH
79434: LD_VAR 0 25
79438: PUSH
79439: LD_VAR 0 26
79443: PUSH
79444: LD_VAR 0 27
79448: PUSH
79449: LD_VAR 0 28
79453: PUSH
79454: EMPTY
79455: LIST
79456: LIST
79457: LIST
79458: LIST
79459: LIST
79460: LIST
79461: PUSH
79462: LD_VAR 0 4
79466: PUSH
79467: LD_INT 1
79469: PLUS
79470: ARRAY
79471: ST_TO_ADDR
79472: GO 79475
79474: POP
79475: GO 80030
79477: LD_INT 2
79479: DOUBLE
79480: EQUAL
79481: IFTRUE 79491
79483: LD_INT 3
79485: DOUBLE
79486: EQUAL
79487: IFTRUE 79491
79489: GO 79547
79491: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
79492: LD_ADDR_VAR 0 9
79496: PUSH
79497: LD_VAR 0 29
79501: PUSH
79502: LD_VAR 0 30
79506: PUSH
79507: LD_VAR 0 31
79511: PUSH
79512: LD_VAR 0 32
79516: PUSH
79517: LD_VAR 0 33
79521: PUSH
79522: LD_VAR 0 34
79526: PUSH
79527: EMPTY
79528: LIST
79529: LIST
79530: LIST
79531: LIST
79532: LIST
79533: LIST
79534: PUSH
79535: LD_VAR 0 4
79539: PUSH
79540: LD_INT 1
79542: PLUS
79543: ARRAY
79544: ST_TO_ADDR
79545: GO 80030
79547: LD_INT 16
79549: DOUBLE
79550: EQUAL
79551: IFTRUE 79609
79553: LD_INT 17
79555: DOUBLE
79556: EQUAL
79557: IFTRUE 79609
79559: LD_INT 18
79561: DOUBLE
79562: EQUAL
79563: IFTRUE 79609
79565: LD_INT 19
79567: DOUBLE
79568: EQUAL
79569: IFTRUE 79609
79571: LD_INT 22
79573: DOUBLE
79574: EQUAL
79575: IFTRUE 79609
79577: LD_INT 20
79579: DOUBLE
79580: EQUAL
79581: IFTRUE 79609
79583: LD_INT 21
79585: DOUBLE
79586: EQUAL
79587: IFTRUE 79609
79589: LD_INT 23
79591: DOUBLE
79592: EQUAL
79593: IFTRUE 79609
79595: LD_INT 24
79597: DOUBLE
79598: EQUAL
79599: IFTRUE 79609
79601: LD_INT 25
79603: DOUBLE
79604: EQUAL
79605: IFTRUE 79609
79607: GO 79665
79609: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
79610: LD_ADDR_VAR 0 9
79614: PUSH
79615: LD_VAR 0 35
79619: PUSH
79620: LD_VAR 0 36
79624: PUSH
79625: LD_VAR 0 37
79629: PUSH
79630: LD_VAR 0 38
79634: PUSH
79635: LD_VAR 0 39
79639: PUSH
79640: LD_VAR 0 40
79644: PUSH
79645: EMPTY
79646: LIST
79647: LIST
79648: LIST
79649: LIST
79650: LIST
79651: LIST
79652: PUSH
79653: LD_VAR 0 4
79657: PUSH
79658: LD_INT 1
79660: PLUS
79661: ARRAY
79662: ST_TO_ADDR
79663: GO 80030
79665: LD_INT 6
79667: DOUBLE
79668: EQUAL
79669: IFTRUE 79721
79671: LD_INT 7
79673: DOUBLE
79674: EQUAL
79675: IFTRUE 79721
79677: LD_INT 8
79679: DOUBLE
79680: EQUAL
79681: IFTRUE 79721
79683: LD_INT 13
79685: DOUBLE
79686: EQUAL
79687: IFTRUE 79721
79689: LD_INT 12
79691: DOUBLE
79692: EQUAL
79693: IFTRUE 79721
79695: LD_INT 15
79697: DOUBLE
79698: EQUAL
79699: IFTRUE 79721
79701: LD_INT 11
79703: DOUBLE
79704: EQUAL
79705: IFTRUE 79721
79707: LD_INT 14
79709: DOUBLE
79710: EQUAL
79711: IFTRUE 79721
79713: LD_INT 10
79715: DOUBLE
79716: EQUAL
79717: IFTRUE 79721
79719: GO 79777
79721: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
79722: LD_ADDR_VAR 0 9
79726: PUSH
79727: LD_VAR 0 41
79731: PUSH
79732: LD_VAR 0 42
79736: PUSH
79737: LD_VAR 0 43
79741: PUSH
79742: LD_VAR 0 44
79746: PUSH
79747: LD_VAR 0 45
79751: PUSH
79752: LD_VAR 0 46
79756: PUSH
79757: EMPTY
79758: LIST
79759: LIST
79760: LIST
79761: LIST
79762: LIST
79763: LIST
79764: PUSH
79765: LD_VAR 0 4
79769: PUSH
79770: LD_INT 1
79772: PLUS
79773: ARRAY
79774: ST_TO_ADDR
79775: GO 80030
79777: LD_INT 36
79779: DOUBLE
79780: EQUAL
79781: IFTRUE 79785
79783: GO 79841
79785: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
79786: LD_ADDR_VAR 0 9
79790: PUSH
79791: LD_VAR 0 47
79795: PUSH
79796: LD_VAR 0 48
79800: PUSH
79801: LD_VAR 0 49
79805: PUSH
79806: LD_VAR 0 50
79810: PUSH
79811: LD_VAR 0 51
79815: PUSH
79816: LD_VAR 0 52
79820: PUSH
79821: EMPTY
79822: LIST
79823: LIST
79824: LIST
79825: LIST
79826: LIST
79827: LIST
79828: PUSH
79829: LD_VAR 0 4
79833: PUSH
79834: LD_INT 1
79836: PLUS
79837: ARRAY
79838: ST_TO_ADDR
79839: GO 80030
79841: LD_INT 4
79843: DOUBLE
79844: EQUAL
79845: IFTRUE 79867
79847: LD_INT 5
79849: DOUBLE
79850: EQUAL
79851: IFTRUE 79867
79853: LD_INT 34
79855: DOUBLE
79856: EQUAL
79857: IFTRUE 79867
79859: LD_INT 37
79861: DOUBLE
79862: EQUAL
79863: IFTRUE 79867
79865: GO 79923
79867: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
79868: LD_ADDR_VAR 0 9
79872: PUSH
79873: LD_VAR 0 53
79877: PUSH
79878: LD_VAR 0 54
79882: PUSH
79883: LD_VAR 0 55
79887: PUSH
79888: LD_VAR 0 56
79892: PUSH
79893: LD_VAR 0 57
79897: PUSH
79898: LD_VAR 0 58
79902: PUSH
79903: EMPTY
79904: LIST
79905: LIST
79906: LIST
79907: LIST
79908: LIST
79909: LIST
79910: PUSH
79911: LD_VAR 0 4
79915: PUSH
79916: LD_INT 1
79918: PLUS
79919: ARRAY
79920: ST_TO_ADDR
79921: GO 80030
79923: LD_INT 31
79925: DOUBLE
79926: EQUAL
79927: IFTRUE 79973
79929: LD_INT 32
79931: DOUBLE
79932: EQUAL
79933: IFTRUE 79973
79935: LD_INT 33
79937: DOUBLE
79938: EQUAL
79939: IFTRUE 79973
79941: LD_INT 27
79943: DOUBLE
79944: EQUAL
79945: IFTRUE 79973
79947: LD_INT 26
79949: DOUBLE
79950: EQUAL
79951: IFTRUE 79973
79953: LD_INT 28
79955: DOUBLE
79956: EQUAL
79957: IFTRUE 79973
79959: LD_INT 29
79961: DOUBLE
79962: EQUAL
79963: IFTRUE 79973
79965: LD_INT 30
79967: DOUBLE
79968: EQUAL
79969: IFTRUE 79973
79971: GO 80029
79973: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
79974: LD_ADDR_VAR 0 9
79978: PUSH
79979: LD_VAR 0 59
79983: PUSH
79984: LD_VAR 0 60
79988: PUSH
79989: LD_VAR 0 61
79993: PUSH
79994: LD_VAR 0 62
79998: PUSH
79999: LD_VAR 0 63
80003: PUSH
80004: LD_VAR 0 64
80008: PUSH
80009: EMPTY
80010: LIST
80011: LIST
80012: LIST
80013: LIST
80014: LIST
80015: LIST
80016: PUSH
80017: LD_VAR 0 4
80021: PUSH
80022: LD_INT 1
80024: PLUS
80025: ARRAY
80026: ST_TO_ADDR
80027: GO 80030
80029: POP
// temp_list2 = [ ] ;
80030: LD_ADDR_VAR 0 10
80034: PUSH
80035: EMPTY
80036: ST_TO_ADDR
// for i in temp_list do
80037: LD_ADDR_VAR 0 8
80041: PUSH
80042: LD_VAR 0 9
80046: PUSH
80047: FOR_IN
80048: IFFALSE 80100
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
80050: LD_ADDR_VAR 0 10
80054: PUSH
80055: LD_VAR 0 10
80059: PUSH
80060: LD_VAR 0 8
80064: PUSH
80065: LD_INT 1
80067: ARRAY
80068: PUSH
80069: LD_VAR 0 2
80073: PLUS
80074: PUSH
80075: LD_VAR 0 8
80079: PUSH
80080: LD_INT 2
80082: ARRAY
80083: PUSH
80084: LD_VAR 0 3
80088: PLUS
80089: PUSH
80090: EMPTY
80091: LIST
80092: LIST
80093: PUSH
80094: EMPTY
80095: LIST
80096: ADD
80097: ST_TO_ADDR
80098: GO 80047
80100: POP
80101: POP
// result = temp_list2 ;
80102: LD_ADDR_VAR 0 7
80106: PUSH
80107: LD_VAR 0 10
80111: ST_TO_ADDR
// end ;
80112: LD_VAR 0 7
80116: RET
// export function EnemyInRange ( unit , dist ) ; begin
80117: LD_INT 0
80119: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
80120: LD_ADDR_VAR 0 3
80124: PUSH
80125: LD_VAR 0 1
80129: PPUSH
80130: CALL_OW 255
80134: PPUSH
80135: LD_VAR 0 1
80139: PPUSH
80140: CALL_OW 250
80144: PPUSH
80145: LD_VAR 0 1
80149: PPUSH
80150: CALL_OW 251
80154: PPUSH
80155: LD_VAR 0 2
80159: PPUSH
80160: CALL 53513 0 4
80164: PUSH
80165: LD_INT 4
80167: ARRAY
80168: ST_TO_ADDR
// end ;
80169: LD_VAR 0 3
80173: RET
// export function PlayerSeeMe ( unit ) ; begin
80174: LD_INT 0
80176: PPUSH
// result := See ( your_side , unit ) ;
80177: LD_ADDR_VAR 0 2
80181: PUSH
80182: LD_OWVAR 2
80186: PPUSH
80187: LD_VAR 0 1
80191: PPUSH
80192: CALL_OW 292
80196: ST_TO_ADDR
// end ;
80197: LD_VAR 0 2
80201: RET
// export function ReverseDir ( unit ) ; begin
80202: LD_INT 0
80204: PPUSH
// if not unit then
80205: LD_VAR 0 1
80209: NOT
80210: IFFALSE 80214
// exit ;
80212: GO 80237
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
80214: LD_ADDR_VAR 0 2
80218: PUSH
80219: LD_VAR 0 1
80223: PPUSH
80224: CALL_OW 254
80228: PUSH
80229: LD_INT 3
80231: PLUS
80232: PUSH
80233: LD_INT 6
80235: MOD
80236: ST_TO_ADDR
// end ;
80237: LD_VAR 0 2
80241: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
80242: LD_INT 0
80244: PPUSH
80245: PPUSH
80246: PPUSH
80247: PPUSH
80248: PPUSH
// if not hexes then
80249: LD_VAR 0 2
80253: NOT
80254: IFFALSE 80258
// exit ;
80256: GO 80406
// dist := 9999 ;
80258: LD_ADDR_VAR 0 5
80262: PUSH
80263: LD_INT 9999
80265: ST_TO_ADDR
// for i = 1 to hexes do
80266: LD_ADDR_VAR 0 4
80270: PUSH
80271: DOUBLE
80272: LD_INT 1
80274: DEC
80275: ST_TO_ADDR
80276: LD_VAR 0 2
80280: PUSH
80281: FOR_TO
80282: IFFALSE 80394
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
80284: LD_VAR 0 1
80288: PPUSH
80289: LD_VAR 0 2
80293: PUSH
80294: LD_VAR 0 4
80298: ARRAY
80299: PUSH
80300: LD_INT 1
80302: ARRAY
80303: PPUSH
80304: LD_VAR 0 2
80308: PUSH
80309: LD_VAR 0 4
80313: ARRAY
80314: PUSH
80315: LD_INT 2
80317: ARRAY
80318: PPUSH
80319: CALL_OW 297
80323: PUSH
80324: LD_VAR 0 5
80328: LESS
80329: IFFALSE 80392
// begin hex := hexes [ i ] ;
80331: LD_ADDR_VAR 0 7
80335: PUSH
80336: LD_VAR 0 2
80340: PUSH
80341: LD_VAR 0 4
80345: ARRAY
80346: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
80347: LD_ADDR_VAR 0 5
80351: PUSH
80352: LD_VAR 0 1
80356: PPUSH
80357: LD_VAR 0 2
80361: PUSH
80362: LD_VAR 0 4
80366: ARRAY
80367: PUSH
80368: LD_INT 1
80370: ARRAY
80371: PPUSH
80372: LD_VAR 0 2
80376: PUSH
80377: LD_VAR 0 4
80381: ARRAY
80382: PUSH
80383: LD_INT 2
80385: ARRAY
80386: PPUSH
80387: CALL_OW 297
80391: ST_TO_ADDR
// end ; end ;
80392: GO 80281
80394: POP
80395: POP
// result := hex ;
80396: LD_ADDR_VAR 0 3
80400: PUSH
80401: LD_VAR 0 7
80405: ST_TO_ADDR
// end ;
80406: LD_VAR 0 3
80410: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
80411: LD_INT 0
80413: PPUSH
80414: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
80415: LD_VAR 0 1
80419: NOT
80420: PUSH
80421: LD_VAR 0 1
80425: PUSH
80426: LD_INT 21
80428: PUSH
80429: LD_INT 2
80431: PUSH
80432: EMPTY
80433: LIST
80434: LIST
80435: PUSH
80436: LD_INT 23
80438: PUSH
80439: LD_INT 2
80441: PUSH
80442: EMPTY
80443: LIST
80444: LIST
80445: PUSH
80446: EMPTY
80447: LIST
80448: LIST
80449: PPUSH
80450: CALL_OW 69
80454: IN
80455: NOT
80456: OR
80457: IFFALSE 80461
// exit ;
80459: GO 80508
// for i = 1 to 3 do
80461: LD_ADDR_VAR 0 3
80465: PUSH
80466: DOUBLE
80467: LD_INT 1
80469: DEC
80470: ST_TO_ADDR
80471: LD_INT 3
80473: PUSH
80474: FOR_TO
80475: IFFALSE 80506
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
80477: LD_VAR 0 1
80481: PPUSH
80482: CALL_OW 250
80486: PPUSH
80487: LD_VAR 0 1
80491: PPUSH
80492: CALL_OW 251
80496: PPUSH
80497: LD_INT 1
80499: PPUSH
80500: CALL_OW 453
80504: GO 80474
80506: POP
80507: POP
// end ;
80508: LD_VAR 0 2
80512: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
80513: LD_INT 0
80515: PPUSH
80516: PPUSH
80517: PPUSH
80518: PPUSH
80519: PPUSH
80520: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
80521: LD_VAR 0 1
80525: NOT
80526: PUSH
80527: LD_VAR 0 2
80531: NOT
80532: OR
80533: PUSH
80534: LD_VAR 0 1
80538: PPUSH
80539: CALL_OW 314
80543: OR
80544: IFFALSE 80548
// exit ;
80546: GO 80989
// x := GetX ( enemy_unit ) ;
80548: LD_ADDR_VAR 0 7
80552: PUSH
80553: LD_VAR 0 2
80557: PPUSH
80558: CALL_OW 250
80562: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
80563: LD_ADDR_VAR 0 8
80567: PUSH
80568: LD_VAR 0 2
80572: PPUSH
80573: CALL_OW 251
80577: ST_TO_ADDR
// if not x or not y then
80578: LD_VAR 0 7
80582: NOT
80583: PUSH
80584: LD_VAR 0 8
80588: NOT
80589: OR
80590: IFFALSE 80594
// exit ;
80592: GO 80989
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
80594: LD_ADDR_VAR 0 6
80598: PUSH
80599: LD_VAR 0 7
80603: PPUSH
80604: LD_INT 0
80606: PPUSH
80607: LD_INT 4
80609: PPUSH
80610: CALL_OW 272
80614: PUSH
80615: LD_VAR 0 8
80619: PPUSH
80620: LD_INT 0
80622: PPUSH
80623: LD_INT 4
80625: PPUSH
80626: CALL_OW 273
80630: PUSH
80631: EMPTY
80632: LIST
80633: LIST
80634: PUSH
80635: LD_VAR 0 7
80639: PPUSH
80640: LD_INT 1
80642: PPUSH
80643: LD_INT 4
80645: PPUSH
80646: CALL_OW 272
80650: PUSH
80651: LD_VAR 0 8
80655: PPUSH
80656: LD_INT 1
80658: PPUSH
80659: LD_INT 4
80661: PPUSH
80662: CALL_OW 273
80666: PUSH
80667: EMPTY
80668: LIST
80669: LIST
80670: PUSH
80671: LD_VAR 0 7
80675: PPUSH
80676: LD_INT 2
80678: PPUSH
80679: LD_INT 4
80681: PPUSH
80682: CALL_OW 272
80686: PUSH
80687: LD_VAR 0 8
80691: PPUSH
80692: LD_INT 2
80694: PPUSH
80695: LD_INT 4
80697: PPUSH
80698: CALL_OW 273
80702: PUSH
80703: EMPTY
80704: LIST
80705: LIST
80706: PUSH
80707: LD_VAR 0 7
80711: PPUSH
80712: LD_INT 3
80714: PPUSH
80715: LD_INT 4
80717: PPUSH
80718: CALL_OW 272
80722: PUSH
80723: LD_VAR 0 8
80727: PPUSH
80728: LD_INT 3
80730: PPUSH
80731: LD_INT 4
80733: PPUSH
80734: CALL_OW 273
80738: PUSH
80739: EMPTY
80740: LIST
80741: LIST
80742: PUSH
80743: LD_VAR 0 7
80747: PPUSH
80748: LD_INT 4
80750: PPUSH
80751: LD_INT 4
80753: PPUSH
80754: CALL_OW 272
80758: PUSH
80759: LD_VAR 0 8
80763: PPUSH
80764: LD_INT 4
80766: PPUSH
80767: LD_INT 4
80769: PPUSH
80770: CALL_OW 273
80774: PUSH
80775: EMPTY
80776: LIST
80777: LIST
80778: PUSH
80779: LD_VAR 0 7
80783: PPUSH
80784: LD_INT 5
80786: PPUSH
80787: LD_INT 4
80789: PPUSH
80790: CALL_OW 272
80794: PUSH
80795: LD_VAR 0 8
80799: PPUSH
80800: LD_INT 5
80802: PPUSH
80803: LD_INT 4
80805: PPUSH
80806: CALL_OW 273
80810: PUSH
80811: EMPTY
80812: LIST
80813: LIST
80814: PUSH
80815: EMPTY
80816: LIST
80817: LIST
80818: LIST
80819: LIST
80820: LIST
80821: LIST
80822: ST_TO_ADDR
// for i = tmp downto 1 do
80823: LD_ADDR_VAR 0 4
80827: PUSH
80828: DOUBLE
80829: LD_VAR 0 6
80833: INC
80834: ST_TO_ADDR
80835: LD_INT 1
80837: PUSH
80838: FOR_DOWNTO
80839: IFFALSE 80940
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
80841: LD_VAR 0 6
80845: PUSH
80846: LD_VAR 0 4
80850: ARRAY
80851: PUSH
80852: LD_INT 1
80854: ARRAY
80855: PPUSH
80856: LD_VAR 0 6
80860: PUSH
80861: LD_VAR 0 4
80865: ARRAY
80866: PUSH
80867: LD_INT 2
80869: ARRAY
80870: PPUSH
80871: CALL_OW 488
80875: NOT
80876: PUSH
80877: LD_VAR 0 6
80881: PUSH
80882: LD_VAR 0 4
80886: ARRAY
80887: PUSH
80888: LD_INT 1
80890: ARRAY
80891: PPUSH
80892: LD_VAR 0 6
80896: PUSH
80897: LD_VAR 0 4
80901: ARRAY
80902: PUSH
80903: LD_INT 2
80905: ARRAY
80906: PPUSH
80907: CALL_OW 428
80911: PUSH
80912: LD_INT 0
80914: NONEQUAL
80915: OR
80916: IFFALSE 80938
// tmp := Delete ( tmp , i ) ;
80918: LD_ADDR_VAR 0 6
80922: PUSH
80923: LD_VAR 0 6
80927: PPUSH
80928: LD_VAR 0 4
80932: PPUSH
80933: CALL_OW 3
80937: ST_TO_ADDR
80938: GO 80838
80940: POP
80941: POP
// j := GetClosestHex ( unit , tmp ) ;
80942: LD_ADDR_VAR 0 5
80946: PUSH
80947: LD_VAR 0 1
80951: PPUSH
80952: LD_VAR 0 6
80956: PPUSH
80957: CALL 80242 0 2
80961: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
80962: LD_VAR 0 1
80966: PPUSH
80967: LD_VAR 0 5
80971: PUSH
80972: LD_INT 1
80974: ARRAY
80975: PPUSH
80976: LD_VAR 0 5
80980: PUSH
80981: LD_INT 2
80983: ARRAY
80984: PPUSH
80985: CALL_OW 111
// end ;
80989: LD_VAR 0 3
80993: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
80994: LD_INT 0
80996: PPUSH
80997: PPUSH
80998: PPUSH
// uc_side = 0 ;
80999: LD_ADDR_OWVAR 20
81003: PUSH
81004: LD_INT 0
81006: ST_TO_ADDR
// uc_nation = 0 ;
81007: LD_ADDR_OWVAR 21
81011: PUSH
81012: LD_INT 0
81014: ST_TO_ADDR
// InitHc_All ( ) ;
81015: CALL_OW 584
// InitVc ;
81019: CALL_OW 20
// if mastodonts then
81023: LD_VAR 0 6
81027: IFFALSE 81094
// for i = 1 to mastodonts do
81029: LD_ADDR_VAR 0 11
81033: PUSH
81034: DOUBLE
81035: LD_INT 1
81037: DEC
81038: ST_TO_ADDR
81039: LD_VAR 0 6
81043: PUSH
81044: FOR_TO
81045: IFFALSE 81092
// begin vc_chassis := 31 ;
81047: LD_ADDR_OWVAR 37
81051: PUSH
81052: LD_INT 31
81054: ST_TO_ADDR
// vc_control := control_rider ;
81055: LD_ADDR_OWVAR 38
81059: PUSH
81060: LD_INT 4
81062: ST_TO_ADDR
// animal := CreateVehicle ;
81063: LD_ADDR_VAR 0 12
81067: PUSH
81068: CALL_OW 45
81072: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81073: LD_VAR 0 12
81077: PPUSH
81078: LD_VAR 0 8
81082: PPUSH
81083: LD_INT 0
81085: PPUSH
81086: CALL 83282 0 3
// end ;
81090: GO 81044
81092: POP
81093: POP
// if horses then
81094: LD_VAR 0 5
81098: IFFALSE 81165
// for i = 1 to horses do
81100: LD_ADDR_VAR 0 11
81104: PUSH
81105: DOUBLE
81106: LD_INT 1
81108: DEC
81109: ST_TO_ADDR
81110: LD_VAR 0 5
81114: PUSH
81115: FOR_TO
81116: IFFALSE 81163
// begin hc_class := 21 ;
81118: LD_ADDR_OWVAR 28
81122: PUSH
81123: LD_INT 21
81125: ST_TO_ADDR
// hc_gallery :=  ;
81126: LD_ADDR_OWVAR 33
81130: PUSH
81131: LD_STRING 
81133: ST_TO_ADDR
// animal := CreateHuman ;
81134: LD_ADDR_VAR 0 12
81138: PUSH
81139: CALL_OW 44
81143: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81144: LD_VAR 0 12
81148: PPUSH
81149: LD_VAR 0 8
81153: PPUSH
81154: LD_INT 0
81156: PPUSH
81157: CALL 83282 0 3
// end ;
81161: GO 81115
81163: POP
81164: POP
// if birds then
81165: LD_VAR 0 1
81169: IFFALSE 81236
// for i = 1 to birds do
81171: LD_ADDR_VAR 0 11
81175: PUSH
81176: DOUBLE
81177: LD_INT 1
81179: DEC
81180: ST_TO_ADDR
81181: LD_VAR 0 1
81185: PUSH
81186: FOR_TO
81187: IFFALSE 81234
// begin hc_class = 18 ;
81189: LD_ADDR_OWVAR 28
81193: PUSH
81194: LD_INT 18
81196: ST_TO_ADDR
// hc_gallery =  ;
81197: LD_ADDR_OWVAR 33
81201: PUSH
81202: LD_STRING 
81204: ST_TO_ADDR
// animal := CreateHuman ;
81205: LD_ADDR_VAR 0 12
81209: PUSH
81210: CALL_OW 44
81214: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81215: LD_VAR 0 12
81219: PPUSH
81220: LD_VAR 0 8
81224: PPUSH
81225: LD_INT 0
81227: PPUSH
81228: CALL 83282 0 3
// end ;
81232: GO 81186
81234: POP
81235: POP
// if tigers then
81236: LD_VAR 0 2
81240: IFFALSE 81324
// for i = 1 to tigers do
81242: LD_ADDR_VAR 0 11
81246: PUSH
81247: DOUBLE
81248: LD_INT 1
81250: DEC
81251: ST_TO_ADDR
81252: LD_VAR 0 2
81256: PUSH
81257: FOR_TO
81258: IFFALSE 81322
// begin hc_class = class_tiger ;
81260: LD_ADDR_OWVAR 28
81264: PUSH
81265: LD_INT 14
81267: ST_TO_ADDR
// hc_gallery =  ;
81268: LD_ADDR_OWVAR 33
81272: PUSH
81273: LD_STRING 
81275: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
81276: LD_ADDR_OWVAR 35
81280: PUSH
81281: LD_INT 7
81283: NEG
81284: PPUSH
81285: LD_INT 7
81287: PPUSH
81288: CALL_OW 12
81292: ST_TO_ADDR
// animal := CreateHuman ;
81293: LD_ADDR_VAR 0 12
81297: PUSH
81298: CALL_OW 44
81302: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81303: LD_VAR 0 12
81307: PPUSH
81308: LD_VAR 0 8
81312: PPUSH
81313: LD_INT 0
81315: PPUSH
81316: CALL 83282 0 3
// end ;
81320: GO 81257
81322: POP
81323: POP
// if apemans then
81324: LD_VAR 0 3
81328: IFFALSE 81451
// for i = 1 to apemans do
81330: LD_ADDR_VAR 0 11
81334: PUSH
81335: DOUBLE
81336: LD_INT 1
81338: DEC
81339: ST_TO_ADDR
81340: LD_VAR 0 3
81344: PUSH
81345: FOR_TO
81346: IFFALSE 81449
// begin hc_class = class_apeman ;
81348: LD_ADDR_OWVAR 28
81352: PUSH
81353: LD_INT 12
81355: ST_TO_ADDR
// hc_gallery =  ;
81356: LD_ADDR_OWVAR 33
81360: PUSH
81361: LD_STRING 
81363: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
81364: LD_ADDR_OWVAR 35
81368: PUSH
81369: LD_INT 2
81371: NEG
81372: PPUSH
81373: LD_INT 2
81375: PPUSH
81376: CALL_OW 12
81380: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
81381: LD_ADDR_OWVAR 31
81385: PUSH
81386: LD_INT 1
81388: PPUSH
81389: LD_INT 3
81391: PPUSH
81392: CALL_OW 12
81396: PUSH
81397: LD_INT 1
81399: PPUSH
81400: LD_INT 3
81402: PPUSH
81403: CALL_OW 12
81407: PUSH
81408: LD_INT 0
81410: PUSH
81411: LD_INT 0
81413: PUSH
81414: EMPTY
81415: LIST
81416: LIST
81417: LIST
81418: LIST
81419: ST_TO_ADDR
// animal := CreateHuman ;
81420: LD_ADDR_VAR 0 12
81424: PUSH
81425: CALL_OW 44
81429: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81430: LD_VAR 0 12
81434: PPUSH
81435: LD_VAR 0 8
81439: PPUSH
81440: LD_INT 0
81442: PPUSH
81443: CALL 83282 0 3
// end ;
81447: GO 81345
81449: POP
81450: POP
// if enchidnas then
81451: LD_VAR 0 4
81455: IFFALSE 81522
// for i = 1 to enchidnas do
81457: LD_ADDR_VAR 0 11
81461: PUSH
81462: DOUBLE
81463: LD_INT 1
81465: DEC
81466: ST_TO_ADDR
81467: LD_VAR 0 4
81471: PUSH
81472: FOR_TO
81473: IFFALSE 81520
// begin hc_class = 13 ;
81475: LD_ADDR_OWVAR 28
81479: PUSH
81480: LD_INT 13
81482: ST_TO_ADDR
// hc_gallery =  ;
81483: LD_ADDR_OWVAR 33
81487: PUSH
81488: LD_STRING 
81490: ST_TO_ADDR
// animal := CreateHuman ;
81491: LD_ADDR_VAR 0 12
81495: PUSH
81496: CALL_OW 44
81500: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81501: LD_VAR 0 12
81505: PPUSH
81506: LD_VAR 0 8
81510: PPUSH
81511: LD_INT 0
81513: PPUSH
81514: CALL 83282 0 3
// end ;
81518: GO 81472
81520: POP
81521: POP
// if fishes then
81522: LD_VAR 0 7
81526: IFFALSE 81593
// for i = 1 to fishes do
81528: LD_ADDR_VAR 0 11
81532: PUSH
81533: DOUBLE
81534: LD_INT 1
81536: DEC
81537: ST_TO_ADDR
81538: LD_VAR 0 7
81542: PUSH
81543: FOR_TO
81544: IFFALSE 81591
// begin hc_class = 20 ;
81546: LD_ADDR_OWVAR 28
81550: PUSH
81551: LD_INT 20
81553: ST_TO_ADDR
// hc_gallery =  ;
81554: LD_ADDR_OWVAR 33
81558: PUSH
81559: LD_STRING 
81561: ST_TO_ADDR
// animal := CreateHuman ;
81562: LD_ADDR_VAR 0 12
81566: PUSH
81567: CALL_OW 44
81571: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
81572: LD_VAR 0 12
81576: PPUSH
81577: LD_VAR 0 9
81581: PPUSH
81582: LD_INT 0
81584: PPUSH
81585: CALL 83282 0 3
// end ;
81589: GO 81543
81591: POP
81592: POP
// end ;
81593: LD_VAR 0 10
81597: RET
// export function WantHeal ( sci , unit ) ; begin
81598: LD_INT 0
81600: PPUSH
// if GetTaskList ( sci ) > 0 then
81601: LD_VAR 0 1
81605: PPUSH
81606: CALL_OW 437
81610: PUSH
81611: LD_INT 0
81613: GREATER
81614: IFFALSE 81684
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
81616: LD_VAR 0 1
81620: PPUSH
81621: CALL_OW 437
81625: PUSH
81626: LD_INT 1
81628: ARRAY
81629: PUSH
81630: LD_INT 1
81632: ARRAY
81633: PUSH
81634: LD_STRING l
81636: EQUAL
81637: PUSH
81638: LD_VAR 0 1
81642: PPUSH
81643: CALL_OW 437
81647: PUSH
81648: LD_INT 1
81650: ARRAY
81651: PUSH
81652: LD_INT 4
81654: ARRAY
81655: PUSH
81656: LD_VAR 0 2
81660: EQUAL
81661: AND
81662: IFFALSE 81674
// result := true else
81664: LD_ADDR_VAR 0 3
81668: PUSH
81669: LD_INT 1
81671: ST_TO_ADDR
81672: GO 81682
// result := false ;
81674: LD_ADDR_VAR 0 3
81678: PUSH
81679: LD_INT 0
81681: ST_TO_ADDR
// end else
81682: GO 81692
// result := false ;
81684: LD_ADDR_VAR 0 3
81688: PUSH
81689: LD_INT 0
81691: ST_TO_ADDR
// end ;
81692: LD_VAR 0 3
81696: RET
// export function HealTarget ( sci ) ; begin
81697: LD_INT 0
81699: PPUSH
// if not sci then
81700: LD_VAR 0 1
81704: NOT
81705: IFFALSE 81709
// exit ;
81707: GO 81774
// result := 0 ;
81709: LD_ADDR_VAR 0 2
81713: PUSH
81714: LD_INT 0
81716: ST_TO_ADDR
// if GetTaskList ( sci ) then
81717: LD_VAR 0 1
81721: PPUSH
81722: CALL_OW 437
81726: IFFALSE 81774
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
81728: LD_VAR 0 1
81732: PPUSH
81733: CALL_OW 437
81737: PUSH
81738: LD_INT 1
81740: ARRAY
81741: PUSH
81742: LD_INT 1
81744: ARRAY
81745: PUSH
81746: LD_STRING l
81748: EQUAL
81749: IFFALSE 81774
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
81751: LD_ADDR_VAR 0 2
81755: PUSH
81756: LD_VAR 0 1
81760: PPUSH
81761: CALL_OW 437
81765: PUSH
81766: LD_INT 1
81768: ARRAY
81769: PUSH
81770: LD_INT 4
81772: ARRAY
81773: ST_TO_ADDR
// end ;
81774: LD_VAR 0 2
81778: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
81779: LD_INT 0
81781: PPUSH
81782: PPUSH
81783: PPUSH
81784: PPUSH
// if not base_units then
81785: LD_VAR 0 1
81789: NOT
81790: IFFALSE 81794
// exit ;
81792: GO 81881
// result := false ;
81794: LD_ADDR_VAR 0 2
81798: PUSH
81799: LD_INT 0
81801: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
81802: LD_ADDR_VAR 0 5
81806: PUSH
81807: LD_VAR 0 1
81811: PPUSH
81812: LD_INT 21
81814: PUSH
81815: LD_INT 3
81817: PUSH
81818: EMPTY
81819: LIST
81820: LIST
81821: PPUSH
81822: CALL_OW 72
81826: ST_TO_ADDR
// if not tmp then
81827: LD_VAR 0 5
81831: NOT
81832: IFFALSE 81836
// exit ;
81834: GO 81881
// for i in tmp do
81836: LD_ADDR_VAR 0 3
81840: PUSH
81841: LD_VAR 0 5
81845: PUSH
81846: FOR_IN
81847: IFFALSE 81879
// begin result := EnemyInRange ( i , 22 ) ;
81849: LD_ADDR_VAR 0 2
81853: PUSH
81854: LD_VAR 0 3
81858: PPUSH
81859: LD_INT 22
81861: PPUSH
81862: CALL 80117 0 2
81866: ST_TO_ADDR
// if result then
81867: LD_VAR 0 2
81871: IFFALSE 81877
// exit ;
81873: POP
81874: POP
81875: GO 81881
// end ;
81877: GO 81846
81879: POP
81880: POP
// end ;
81881: LD_VAR 0 2
81885: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
81886: LD_INT 0
81888: PPUSH
81889: PPUSH
// if not units then
81890: LD_VAR 0 1
81894: NOT
81895: IFFALSE 81899
// exit ;
81897: GO 81969
// result := [ ] ;
81899: LD_ADDR_VAR 0 3
81903: PUSH
81904: EMPTY
81905: ST_TO_ADDR
// for i in units do
81906: LD_ADDR_VAR 0 4
81910: PUSH
81911: LD_VAR 0 1
81915: PUSH
81916: FOR_IN
81917: IFFALSE 81967
// if GetTag ( i ) = tag then
81919: LD_VAR 0 4
81923: PPUSH
81924: CALL_OW 110
81928: PUSH
81929: LD_VAR 0 2
81933: EQUAL
81934: IFFALSE 81965
// result := Replace ( result , result + 1 , i ) ;
81936: LD_ADDR_VAR 0 3
81940: PUSH
81941: LD_VAR 0 3
81945: PPUSH
81946: LD_VAR 0 3
81950: PUSH
81951: LD_INT 1
81953: PLUS
81954: PPUSH
81955: LD_VAR 0 4
81959: PPUSH
81960: CALL_OW 1
81964: ST_TO_ADDR
81965: GO 81916
81967: POP
81968: POP
// end ;
81969: LD_VAR 0 3
81973: RET
// export function IsDriver ( un ) ; begin
81974: LD_INT 0
81976: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
81977: LD_ADDR_VAR 0 2
81981: PUSH
81982: LD_VAR 0 1
81986: PUSH
81987: LD_INT 55
81989: PUSH
81990: EMPTY
81991: LIST
81992: PPUSH
81993: CALL_OW 69
81997: IN
81998: ST_TO_ADDR
// end ;
81999: LD_VAR 0 2
82003: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
82004: LD_INT 0
82006: PPUSH
82007: PPUSH
// list := [ ] ;
82008: LD_ADDR_VAR 0 5
82012: PUSH
82013: EMPTY
82014: ST_TO_ADDR
// case d of 0 :
82015: LD_VAR 0 3
82019: PUSH
82020: LD_INT 0
82022: DOUBLE
82023: EQUAL
82024: IFTRUE 82028
82026: GO 82161
82028: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
82029: LD_ADDR_VAR 0 5
82033: PUSH
82034: LD_VAR 0 1
82038: PUSH
82039: LD_INT 4
82041: MINUS
82042: PUSH
82043: LD_VAR 0 2
82047: PUSH
82048: LD_INT 4
82050: MINUS
82051: PUSH
82052: LD_INT 2
82054: PUSH
82055: EMPTY
82056: LIST
82057: LIST
82058: LIST
82059: PUSH
82060: LD_VAR 0 1
82064: PUSH
82065: LD_INT 3
82067: MINUS
82068: PUSH
82069: LD_VAR 0 2
82073: PUSH
82074: LD_INT 1
82076: PUSH
82077: EMPTY
82078: LIST
82079: LIST
82080: LIST
82081: PUSH
82082: LD_VAR 0 1
82086: PUSH
82087: LD_INT 4
82089: PLUS
82090: PUSH
82091: LD_VAR 0 2
82095: PUSH
82096: LD_INT 4
82098: PUSH
82099: EMPTY
82100: LIST
82101: LIST
82102: LIST
82103: PUSH
82104: LD_VAR 0 1
82108: PUSH
82109: LD_INT 3
82111: PLUS
82112: PUSH
82113: LD_VAR 0 2
82117: PUSH
82118: LD_INT 3
82120: PLUS
82121: PUSH
82122: LD_INT 5
82124: PUSH
82125: EMPTY
82126: LIST
82127: LIST
82128: LIST
82129: PUSH
82130: LD_VAR 0 1
82134: PUSH
82135: LD_VAR 0 2
82139: PUSH
82140: LD_INT 4
82142: PLUS
82143: PUSH
82144: LD_INT 0
82146: PUSH
82147: EMPTY
82148: LIST
82149: LIST
82150: LIST
82151: PUSH
82152: EMPTY
82153: LIST
82154: LIST
82155: LIST
82156: LIST
82157: LIST
82158: ST_TO_ADDR
// end ; 1 :
82159: GO 82859
82161: LD_INT 1
82163: DOUBLE
82164: EQUAL
82165: IFTRUE 82169
82167: GO 82302
82169: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
82170: LD_ADDR_VAR 0 5
82174: PUSH
82175: LD_VAR 0 1
82179: PUSH
82180: LD_VAR 0 2
82184: PUSH
82185: LD_INT 4
82187: MINUS
82188: PUSH
82189: LD_INT 3
82191: PUSH
82192: EMPTY
82193: LIST
82194: LIST
82195: LIST
82196: PUSH
82197: LD_VAR 0 1
82201: PUSH
82202: LD_INT 3
82204: MINUS
82205: PUSH
82206: LD_VAR 0 2
82210: PUSH
82211: LD_INT 3
82213: MINUS
82214: PUSH
82215: LD_INT 2
82217: PUSH
82218: EMPTY
82219: LIST
82220: LIST
82221: LIST
82222: PUSH
82223: LD_VAR 0 1
82227: PUSH
82228: LD_INT 4
82230: MINUS
82231: PUSH
82232: LD_VAR 0 2
82236: PUSH
82237: LD_INT 1
82239: PUSH
82240: EMPTY
82241: LIST
82242: LIST
82243: LIST
82244: PUSH
82245: LD_VAR 0 1
82249: PUSH
82250: LD_VAR 0 2
82254: PUSH
82255: LD_INT 3
82257: PLUS
82258: PUSH
82259: LD_INT 0
82261: PUSH
82262: EMPTY
82263: LIST
82264: LIST
82265: LIST
82266: PUSH
82267: LD_VAR 0 1
82271: PUSH
82272: LD_INT 4
82274: PLUS
82275: PUSH
82276: LD_VAR 0 2
82280: PUSH
82281: LD_INT 4
82283: PLUS
82284: PUSH
82285: LD_INT 5
82287: PUSH
82288: EMPTY
82289: LIST
82290: LIST
82291: LIST
82292: PUSH
82293: EMPTY
82294: LIST
82295: LIST
82296: LIST
82297: LIST
82298: LIST
82299: ST_TO_ADDR
// end ; 2 :
82300: GO 82859
82302: LD_INT 2
82304: DOUBLE
82305: EQUAL
82306: IFTRUE 82310
82308: GO 82439
82310: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
82311: LD_ADDR_VAR 0 5
82315: PUSH
82316: LD_VAR 0 1
82320: PUSH
82321: LD_VAR 0 2
82325: PUSH
82326: LD_INT 3
82328: MINUS
82329: PUSH
82330: LD_INT 3
82332: PUSH
82333: EMPTY
82334: LIST
82335: LIST
82336: LIST
82337: PUSH
82338: LD_VAR 0 1
82342: PUSH
82343: LD_INT 4
82345: PLUS
82346: PUSH
82347: LD_VAR 0 2
82351: PUSH
82352: LD_INT 4
82354: PUSH
82355: EMPTY
82356: LIST
82357: LIST
82358: LIST
82359: PUSH
82360: LD_VAR 0 1
82364: PUSH
82365: LD_VAR 0 2
82369: PUSH
82370: LD_INT 4
82372: PLUS
82373: PUSH
82374: LD_INT 0
82376: PUSH
82377: EMPTY
82378: LIST
82379: LIST
82380: LIST
82381: PUSH
82382: LD_VAR 0 1
82386: PUSH
82387: LD_INT 3
82389: MINUS
82390: PUSH
82391: LD_VAR 0 2
82395: PUSH
82396: LD_INT 1
82398: PUSH
82399: EMPTY
82400: LIST
82401: LIST
82402: LIST
82403: PUSH
82404: LD_VAR 0 1
82408: PUSH
82409: LD_INT 4
82411: MINUS
82412: PUSH
82413: LD_VAR 0 2
82417: PUSH
82418: LD_INT 4
82420: MINUS
82421: PUSH
82422: LD_INT 2
82424: PUSH
82425: EMPTY
82426: LIST
82427: LIST
82428: LIST
82429: PUSH
82430: EMPTY
82431: LIST
82432: LIST
82433: LIST
82434: LIST
82435: LIST
82436: ST_TO_ADDR
// end ; 3 :
82437: GO 82859
82439: LD_INT 3
82441: DOUBLE
82442: EQUAL
82443: IFTRUE 82447
82445: GO 82580
82447: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
82448: LD_ADDR_VAR 0 5
82452: PUSH
82453: LD_VAR 0 1
82457: PUSH
82458: LD_INT 3
82460: PLUS
82461: PUSH
82462: LD_VAR 0 2
82466: PUSH
82467: LD_INT 4
82469: PUSH
82470: EMPTY
82471: LIST
82472: LIST
82473: LIST
82474: PUSH
82475: LD_VAR 0 1
82479: PUSH
82480: LD_INT 4
82482: PLUS
82483: PUSH
82484: LD_VAR 0 2
82488: PUSH
82489: LD_INT 4
82491: PLUS
82492: PUSH
82493: LD_INT 5
82495: PUSH
82496: EMPTY
82497: LIST
82498: LIST
82499: LIST
82500: PUSH
82501: LD_VAR 0 1
82505: PUSH
82506: LD_INT 4
82508: MINUS
82509: PUSH
82510: LD_VAR 0 2
82514: PUSH
82515: LD_INT 1
82517: PUSH
82518: EMPTY
82519: LIST
82520: LIST
82521: LIST
82522: PUSH
82523: LD_VAR 0 1
82527: PUSH
82528: LD_VAR 0 2
82532: PUSH
82533: LD_INT 4
82535: MINUS
82536: PUSH
82537: LD_INT 3
82539: PUSH
82540: EMPTY
82541: LIST
82542: LIST
82543: LIST
82544: PUSH
82545: LD_VAR 0 1
82549: PUSH
82550: LD_INT 3
82552: MINUS
82553: PUSH
82554: LD_VAR 0 2
82558: PUSH
82559: LD_INT 3
82561: MINUS
82562: PUSH
82563: LD_INT 2
82565: PUSH
82566: EMPTY
82567: LIST
82568: LIST
82569: LIST
82570: PUSH
82571: EMPTY
82572: LIST
82573: LIST
82574: LIST
82575: LIST
82576: LIST
82577: ST_TO_ADDR
// end ; 4 :
82578: GO 82859
82580: LD_INT 4
82582: DOUBLE
82583: EQUAL
82584: IFTRUE 82588
82586: GO 82721
82588: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
82589: LD_ADDR_VAR 0 5
82593: PUSH
82594: LD_VAR 0 1
82598: PUSH
82599: LD_VAR 0 2
82603: PUSH
82604: LD_INT 4
82606: PLUS
82607: PUSH
82608: LD_INT 0
82610: PUSH
82611: EMPTY
82612: LIST
82613: LIST
82614: LIST
82615: PUSH
82616: LD_VAR 0 1
82620: PUSH
82621: LD_INT 3
82623: PLUS
82624: PUSH
82625: LD_VAR 0 2
82629: PUSH
82630: LD_INT 3
82632: PLUS
82633: PUSH
82634: LD_INT 5
82636: PUSH
82637: EMPTY
82638: LIST
82639: LIST
82640: LIST
82641: PUSH
82642: LD_VAR 0 1
82646: PUSH
82647: LD_INT 4
82649: PLUS
82650: PUSH
82651: LD_VAR 0 2
82655: PUSH
82656: LD_INT 4
82658: PUSH
82659: EMPTY
82660: LIST
82661: LIST
82662: LIST
82663: PUSH
82664: LD_VAR 0 1
82668: PUSH
82669: LD_VAR 0 2
82673: PUSH
82674: LD_INT 3
82676: MINUS
82677: PUSH
82678: LD_INT 3
82680: PUSH
82681: EMPTY
82682: LIST
82683: LIST
82684: LIST
82685: PUSH
82686: LD_VAR 0 1
82690: PUSH
82691: LD_INT 4
82693: MINUS
82694: PUSH
82695: LD_VAR 0 2
82699: PUSH
82700: LD_INT 4
82702: MINUS
82703: PUSH
82704: LD_INT 2
82706: PUSH
82707: EMPTY
82708: LIST
82709: LIST
82710: LIST
82711: PUSH
82712: EMPTY
82713: LIST
82714: LIST
82715: LIST
82716: LIST
82717: LIST
82718: ST_TO_ADDR
// end ; 5 :
82719: GO 82859
82721: LD_INT 5
82723: DOUBLE
82724: EQUAL
82725: IFTRUE 82729
82727: GO 82858
82729: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
82730: LD_ADDR_VAR 0 5
82734: PUSH
82735: LD_VAR 0 1
82739: PUSH
82740: LD_INT 4
82742: MINUS
82743: PUSH
82744: LD_VAR 0 2
82748: PUSH
82749: LD_INT 1
82751: PUSH
82752: EMPTY
82753: LIST
82754: LIST
82755: LIST
82756: PUSH
82757: LD_VAR 0 1
82761: PUSH
82762: LD_VAR 0 2
82766: PUSH
82767: LD_INT 4
82769: MINUS
82770: PUSH
82771: LD_INT 3
82773: PUSH
82774: EMPTY
82775: LIST
82776: LIST
82777: LIST
82778: PUSH
82779: LD_VAR 0 1
82783: PUSH
82784: LD_INT 4
82786: PLUS
82787: PUSH
82788: LD_VAR 0 2
82792: PUSH
82793: LD_INT 4
82795: PLUS
82796: PUSH
82797: LD_INT 5
82799: PUSH
82800: EMPTY
82801: LIST
82802: LIST
82803: LIST
82804: PUSH
82805: LD_VAR 0 1
82809: PUSH
82810: LD_INT 3
82812: PLUS
82813: PUSH
82814: LD_VAR 0 2
82818: PUSH
82819: LD_INT 4
82821: PUSH
82822: EMPTY
82823: LIST
82824: LIST
82825: LIST
82826: PUSH
82827: LD_VAR 0 1
82831: PUSH
82832: LD_VAR 0 2
82836: PUSH
82837: LD_INT 3
82839: PLUS
82840: PUSH
82841: LD_INT 0
82843: PUSH
82844: EMPTY
82845: LIST
82846: LIST
82847: LIST
82848: PUSH
82849: EMPTY
82850: LIST
82851: LIST
82852: LIST
82853: LIST
82854: LIST
82855: ST_TO_ADDR
// end ; end ;
82856: GO 82859
82858: POP
// result := list ;
82859: LD_ADDR_VAR 0 4
82863: PUSH
82864: LD_VAR 0 5
82868: ST_TO_ADDR
// end ;
82869: LD_VAR 0 4
82873: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
82874: LD_INT 0
82876: PPUSH
82877: PPUSH
82878: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
82879: LD_VAR 0 1
82883: NOT
82884: PUSH
82885: LD_VAR 0 2
82889: PUSH
82890: LD_INT 1
82892: PUSH
82893: LD_INT 2
82895: PUSH
82896: LD_INT 3
82898: PUSH
82899: LD_INT 4
82901: PUSH
82902: EMPTY
82903: LIST
82904: LIST
82905: LIST
82906: LIST
82907: IN
82908: NOT
82909: OR
82910: IFFALSE 82914
// exit ;
82912: GO 83006
// tmp := [ ] ;
82914: LD_ADDR_VAR 0 5
82918: PUSH
82919: EMPTY
82920: ST_TO_ADDR
// for i in units do
82921: LD_ADDR_VAR 0 4
82925: PUSH
82926: LD_VAR 0 1
82930: PUSH
82931: FOR_IN
82932: IFFALSE 82975
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
82934: LD_ADDR_VAR 0 5
82938: PUSH
82939: LD_VAR 0 5
82943: PPUSH
82944: LD_VAR 0 5
82948: PUSH
82949: LD_INT 1
82951: PLUS
82952: PPUSH
82953: LD_VAR 0 4
82957: PPUSH
82958: LD_VAR 0 2
82962: PPUSH
82963: CALL_OW 259
82967: PPUSH
82968: CALL_OW 2
82972: ST_TO_ADDR
82973: GO 82931
82975: POP
82976: POP
// if not tmp then
82977: LD_VAR 0 5
82981: NOT
82982: IFFALSE 82986
// exit ;
82984: GO 83006
// result := SortListByListDesc ( units , tmp ) ;
82986: LD_ADDR_VAR 0 3
82990: PUSH
82991: LD_VAR 0 1
82995: PPUSH
82996: LD_VAR 0 5
83000: PPUSH
83001: CALL_OW 77
83005: ST_TO_ADDR
// end ;
83006: LD_VAR 0 3
83010: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
83011: LD_INT 0
83013: PPUSH
83014: PPUSH
83015: PPUSH
// result := false ;
83016: LD_ADDR_VAR 0 3
83020: PUSH
83021: LD_INT 0
83023: ST_TO_ADDR
// x := GetX ( building ) ;
83024: LD_ADDR_VAR 0 4
83028: PUSH
83029: LD_VAR 0 2
83033: PPUSH
83034: CALL_OW 250
83038: ST_TO_ADDR
// y := GetY ( building ) ;
83039: LD_ADDR_VAR 0 5
83043: PUSH
83044: LD_VAR 0 2
83048: PPUSH
83049: CALL_OW 251
83053: ST_TO_ADDR
// if not building or not x or not y then
83054: LD_VAR 0 2
83058: NOT
83059: PUSH
83060: LD_VAR 0 4
83064: NOT
83065: OR
83066: PUSH
83067: LD_VAR 0 5
83071: NOT
83072: OR
83073: IFFALSE 83077
// exit ;
83075: GO 83169
// if GetTaskList ( unit ) then
83077: LD_VAR 0 1
83081: PPUSH
83082: CALL_OW 437
83086: IFFALSE 83169
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
83088: LD_STRING e
83090: PUSH
83091: LD_VAR 0 1
83095: PPUSH
83096: CALL_OW 437
83100: PUSH
83101: LD_INT 1
83103: ARRAY
83104: PUSH
83105: LD_INT 1
83107: ARRAY
83108: EQUAL
83109: PUSH
83110: LD_VAR 0 4
83114: PUSH
83115: LD_VAR 0 1
83119: PPUSH
83120: CALL_OW 437
83124: PUSH
83125: LD_INT 1
83127: ARRAY
83128: PUSH
83129: LD_INT 2
83131: ARRAY
83132: EQUAL
83133: AND
83134: PUSH
83135: LD_VAR 0 5
83139: PUSH
83140: LD_VAR 0 1
83144: PPUSH
83145: CALL_OW 437
83149: PUSH
83150: LD_INT 1
83152: ARRAY
83153: PUSH
83154: LD_INT 3
83156: ARRAY
83157: EQUAL
83158: AND
83159: IFFALSE 83169
// result := true end ;
83161: LD_ADDR_VAR 0 3
83165: PUSH
83166: LD_INT 1
83168: ST_TO_ADDR
// end ;
83169: LD_VAR 0 3
83173: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
83174: LD_INT 0
83176: PPUSH
// result := false ;
83177: LD_ADDR_VAR 0 4
83181: PUSH
83182: LD_INT 0
83184: ST_TO_ADDR
// if GetTaskList ( unit ) then
83185: LD_VAR 0 1
83189: PPUSH
83190: CALL_OW 437
83194: IFFALSE 83277
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
83196: LD_STRING M
83198: PUSH
83199: LD_VAR 0 1
83203: PPUSH
83204: CALL_OW 437
83208: PUSH
83209: LD_INT 1
83211: ARRAY
83212: PUSH
83213: LD_INT 1
83215: ARRAY
83216: EQUAL
83217: PUSH
83218: LD_VAR 0 2
83222: PUSH
83223: LD_VAR 0 1
83227: PPUSH
83228: CALL_OW 437
83232: PUSH
83233: LD_INT 1
83235: ARRAY
83236: PUSH
83237: LD_INT 2
83239: ARRAY
83240: EQUAL
83241: AND
83242: PUSH
83243: LD_VAR 0 3
83247: PUSH
83248: LD_VAR 0 1
83252: PPUSH
83253: CALL_OW 437
83257: PUSH
83258: LD_INT 1
83260: ARRAY
83261: PUSH
83262: LD_INT 3
83264: ARRAY
83265: EQUAL
83266: AND
83267: IFFALSE 83277
// result := true ;
83269: LD_ADDR_VAR 0 4
83273: PUSH
83274: LD_INT 1
83276: ST_TO_ADDR
// end ; end ;
83277: LD_VAR 0 4
83281: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
83282: LD_INT 0
83284: PPUSH
83285: PPUSH
83286: PPUSH
83287: PPUSH
// if not unit or not area then
83288: LD_VAR 0 1
83292: NOT
83293: PUSH
83294: LD_VAR 0 2
83298: NOT
83299: OR
83300: IFFALSE 83304
// exit ;
83302: GO 83468
// tmp := AreaToList ( area , i ) ;
83304: LD_ADDR_VAR 0 6
83308: PUSH
83309: LD_VAR 0 2
83313: PPUSH
83314: LD_VAR 0 5
83318: PPUSH
83319: CALL_OW 517
83323: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
83324: LD_ADDR_VAR 0 5
83328: PUSH
83329: DOUBLE
83330: LD_INT 1
83332: DEC
83333: ST_TO_ADDR
83334: LD_VAR 0 6
83338: PUSH
83339: LD_INT 1
83341: ARRAY
83342: PUSH
83343: FOR_TO
83344: IFFALSE 83466
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
83346: LD_ADDR_VAR 0 7
83350: PUSH
83351: LD_VAR 0 6
83355: PUSH
83356: LD_INT 1
83358: ARRAY
83359: PUSH
83360: LD_VAR 0 5
83364: ARRAY
83365: PUSH
83366: LD_VAR 0 6
83370: PUSH
83371: LD_INT 2
83373: ARRAY
83374: PUSH
83375: LD_VAR 0 5
83379: ARRAY
83380: PUSH
83381: EMPTY
83382: LIST
83383: LIST
83384: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
83385: LD_VAR 0 7
83389: PUSH
83390: LD_INT 1
83392: ARRAY
83393: PPUSH
83394: LD_VAR 0 7
83398: PUSH
83399: LD_INT 2
83401: ARRAY
83402: PPUSH
83403: CALL_OW 428
83407: PUSH
83408: LD_INT 0
83410: EQUAL
83411: IFFALSE 83464
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
83413: LD_VAR 0 1
83417: PPUSH
83418: LD_VAR 0 7
83422: PUSH
83423: LD_INT 1
83425: ARRAY
83426: PPUSH
83427: LD_VAR 0 7
83431: PUSH
83432: LD_INT 2
83434: ARRAY
83435: PPUSH
83436: LD_VAR 0 3
83440: PPUSH
83441: CALL_OW 48
// result := IsPlaced ( unit ) ;
83445: LD_ADDR_VAR 0 4
83449: PUSH
83450: LD_VAR 0 1
83454: PPUSH
83455: CALL_OW 305
83459: ST_TO_ADDR
// exit ;
83460: POP
83461: POP
83462: GO 83468
// end ; end ;
83464: GO 83343
83466: POP
83467: POP
// end ;
83468: LD_VAR 0 4
83472: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
83473: LD_INT 0
83475: PPUSH
83476: PPUSH
83477: PPUSH
// if not side or side > 8 then
83478: LD_VAR 0 1
83482: NOT
83483: PUSH
83484: LD_VAR 0 1
83488: PUSH
83489: LD_INT 8
83491: GREATER
83492: OR
83493: IFFALSE 83497
// exit ;
83495: GO 83684
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
83497: LD_ADDR_VAR 0 4
83501: PUSH
83502: LD_INT 22
83504: PUSH
83505: LD_VAR 0 1
83509: PUSH
83510: EMPTY
83511: LIST
83512: LIST
83513: PUSH
83514: LD_INT 21
83516: PUSH
83517: LD_INT 3
83519: PUSH
83520: EMPTY
83521: LIST
83522: LIST
83523: PUSH
83524: EMPTY
83525: LIST
83526: LIST
83527: PPUSH
83528: CALL_OW 69
83532: ST_TO_ADDR
// if not tmp then
83533: LD_VAR 0 4
83537: NOT
83538: IFFALSE 83542
// exit ;
83540: GO 83684
// enable_addtolog := true ;
83542: LD_ADDR_OWVAR 81
83546: PUSH
83547: LD_INT 1
83549: ST_TO_ADDR
// AddToLog ( [ ) ;
83550: LD_STRING [
83552: PPUSH
83553: CALL_OW 561
// for i in tmp do
83557: LD_ADDR_VAR 0 3
83561: PUSH
83562: LD_VAR 0 4
83566: PUSH
83567: FOR_IN
83568: IFFALSE 83675
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
83570: LD_STRING [
83572: PUSH
83573: LD_VAR 0 3
83577: PPUSH
83578: CALL_OW 266
83582: STR
83583: PUSH
83584: LD_STRING , 
83586: STR
83587: PUSH
83588: LD_VAR 0 3
83592: PPUSH
83593: CALL_OW 250
83597: STR
83598: PUSH
83599: LD_STRING , 
83601: STR
83602: PUSH
83603: LD_VAR 0 3
83607: PPUSH
83608: CALL_OW 251
83612: STR
83613: PUSH
83614: LD_STRING , 
83616: STR
83617: PUSH
83618: LD_VAR 0 3
83622: PPUSH
83623: CALL_OW 254
83627: STR
83628: PUSH
83629: LD_STRING , 
83631: STR
83632: PUSH
83633: LD_VAR 0 3
83637: PPUSH
83638: LD_INT 1
83640: PPUSH
83641: CALL_OW 268
83645: STR
83646: PUSH
83647: LD_STRING , 
83649: STR
83650: PUSH
83651: LD_VAR 0 3
83655: PPUSH
83656: LD_INT 2
83658: PPUSH
83659: CALL_OW 268
83663: STR
83664: PUSH
83665: LD_STRING ],
83667: STR
83668: PPUSH
83669: CALL_OW 561
// end ;
83673: GO 83567
83675: POP
83676: POP
// AddToLog ( ]; ) ;
83677: LD_STRING ];
83679: PPUSH
83680: CALL_OW 561
// end ;
83684: LD_VAR 0 2
83688: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
83689: LD_INT 0
83691: PPUSH
83692: PPUSH
83693: PPUSH
83694: PPUSH
83695: PPUSH
// if not area or not rate or not max then
83696: LD_VAR 0 1
83700: NOT
83701: PUSH
83702: LD_VAR 0 2
83706: NOT
83707: OR
83708: PUSH
83709: LD_VAR 0 4
83713: NOT
83714: OR
83715: IFFALSE 83719
// exit ;
83717: GO 83911
// while 1 do
83719: LD_INT 1
83721: IFFALSE 83911
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
83723: LD_ADDR_VAR 0 9
83727: PUSH
83728: LD_VAR 0 1
83732: PPUSH
83733: LD_INT 1
83735: PPUSH
83736: CALL_OW 287
83740: PUSH
83741: LD_INT 10
83743: MUL
83744: ST_TO_ADDR
// r := rate / 10 ;
83745: LD_ADDR_VAR 0 7
83749: PUSH
83750: LD_VAR 0 2
83754: PUSH
83755: LD_INT 10
83757: DIVREAL
83758: ST_TO_ADDR
// time := 1 1$00 ;
83759: LD_ADDR_VAR 0 8
83763: PUSH
83764: LD_INT 2100
83766: ST_TO_ADDR
// if amount < min then
83767: LD_VAR 0 9
83771: PUSH
83772: LD_VAR 0 3
83776: LESS
83777: IFFALSE 83795
// r := r * 2 else
83779: LD_ADDR_VAR 0 7
83783: PUSH
83784: LD_VAR 0 7
83788: PUSH
83789: LD_INT 2
83791: MUL
83792: ST_TO_ADDR
83793: GO 83821
// if amount > max then
83795: LD_VAR 0 9
83799: PUSH
83800: LD_VAR 0 4
83804: GREATER
83805: IFFALSE 83821
// r := r / 2 ;
83807: LD_ADDR_VAR 0 7
83811: PUSH
83812: LD_VAR 0 7
83816: PUSH
83817: LD_INT 2
83819: DIVREAL
83820: ST_TO_ADDR
// time := time / r ;
83821: LD_ADDR_VAR 0 8
83825: PUSH
83826: LD_VAR 0 8
83830: PUSH
83831: LD_VAR 0 7
83835: DIVREAL
83836: ST_TO_ADDR
// if time < 0 then
83837: LD_VAR 0 8
83841: PUSH
83842: LD_INT 0
83844: LESS
83845: IFFALSE 83862
// time := time * - 1 ;
83847: LD_ADDR_VAR 0 8
83851: PUSH
83852: LD_VAR 0 8
83856: PUSH
83857: LD_INT 1
83859: NEG
83860: MUL
83861: ST_TO_ADDR
// wait ( time ) ;
83862: LD_VAR 0 8
83866: PPUSH
83867: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
83871: LD_INT 35
83873: PPUSH
83874: LD_INT 875
83876: PPUSH
83877: CALL_OW 12
83881: PPUSH
83882: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
83886: LD_INT 1
83888: PPUSH
83889: LD_INT 5
83891: PPUSH
83892: CALL_OW 12
83896: PPUSH
83897: LD_VAR 0 1
83901: PPUSH
83902: LD_INT 1
83904: PPUSH
83905: CALL_OW 55
// end ;
83909: GO 83719
// end ;
83911: LD_VAR 0 5
83915: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
83916: LD_INT 0
83918: PPUSH
83919: PPUSH
83920: PPUSH
83921: PPUSH
83922: PPUSH
83923: PPUSH
83924: PPUSH
83925: PPUSH
// if not turrets or not factories then
83926: LD_VAR 0 1
83930: NOT
83931: PUSH
83932: LD_VAR 0 2
83936: NOT
83937: OR
83938: IFFALSE 83942
// exit ;
83940: GO 84249
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
83942: LD_ADDR_VAR 0 10
83946: PUSH
83947: LD_INT 5
83949: PUSH
83950: LD_INT 6
83952: PUSH
83953: EMPTY
83954: LIST
83955: LIST
83956: PUSH
83957: LD_INT 2
83959: PUSH
83960: LD_INT 4
83962: PUSH
83963: EMPTY
83964: LIST
83965: LIST
83966: PUSH
83967: LD_INT 3
83969: PUSH
83970: LD_INT 5
83972: PUSH
83973: EMPTY
83974: LIST
83975: LIST
83976: PUSH
83977: EMPTY
83978: LIST
83979: LIST
83980: LIST
83981: PUSH
83982: LD_INT 24
83984: PUSH
83985: LD_INT 25
83987: PUSH
83988: EMPTY
83989: LIST
83990: LIST
83991: PUSH
83992: LD_INT 23
83994: PUSH
83995: LD_INT 27
83997: PUSH
83998: EMPTY
83999: LIST
84000: LIST
84001: PUSH
84002: EMPTY
84003: LIST
84004: LIST
84005: PUSH
84006: LD_INT 42
84008: PUSH
84009: LD_INT 43
84011: PUSH
84012: EMPTY
84013: LIST
84014: LIST
84015: PUSH
84016: LD_INT 44
84018: PUSH
84019: LD_INT 46
84021: PUSH
84022: EMPTY
84023: LIST
84024: LIST
84025: PUSH
84026: LD_INT 45
84028: PUSH
84029: LD_INT 47
84031: PUSH
84032: EMPTY
84033: LIST
84034: LIST
84035: PUSH
84036: EMPTY
84037: LIST
84038: LIST
84039: LIST
84040: PUSH
84041: EMPTY
84042: LIST
84043: LIST
84044: LIST
84045: ST_TO_ADDR
// result := [ ] ;
84046: LD_ADDR_VAR 0 3
84050: PUSH
84051: EMPTY
84052: ST_TO_ADDR
// for i in turrets do
84053: LD_ADDR_VAR 0 4
84057: PUSH
84058: LD_VAR 0 1
84062: PUSH
84063: FOR_IN
84064: IFFALSE 84247
// begin nat := GetNation ( i ) ;
84066: LD_ADDR_VAR 0 7
84070: PUSH
84071: LD_VAR 0 4
84075: PPUSH
84076: CALL_OW 248
84080: ST_TO_ADDR
// weapon := 0 ;
84081: LD_ADDR_VAR 0 8
84085: PUSH
84086: LD_INT 0
84088: ST_TO_ADDR
// if not nat then
84089: LD_VAR 0 7
84093: NOT
84094: IFFALSE 84098
// continue ;
84096: GO 84063
// for j in list [ nat ] do
84098: LD_ADDR_VAR 0 5
84102: PUSH
84103: LD_VAR 0 10
84107: PUSH
84108: LD_VAR 0 7
84112: ARRAY
84113: PUSH
84114: FOR_IN
84115: IFFALSE 84156
// if GetBWeapon ( i ) = j [ 1 ] then
84117: LD_VAR 0 4
84121: PPUSH
84122: CALL_OW 269
84126: PUSH
84127: LD_VAR 0 5
84131: PUSH
84132: LD_INT 1
84134: ARRAY
84135: EQUAL
84136: IFFALSE 84154
// begin weapon := j [ 2 ] ;
84138: LD_ADDR_VAR 0 8
84142: PUSH
84143: LD_VAR 0 5
84147: PUSH
84148: LD_INT 2
84150: ARRAY
84151: ST_TO_ADDR
// break ;
84152: GO 84156
// end ;
84154: GO 84114
84156: POP
84157: POP
// if not weapon then
84158: LD_VAR 0 8
84162: NOT
84163: IFFALSE 84167
// continue ;
84165: GO 84063
// for k in factories do
84167: LD_ADDR_VAR 0 6
84171: PUSH
84172: LD_VAR 0 2
84176: PUSH
84177: FOR_IN
84178: IFFALSE 84243
// begin weapons := AvailableWeaponList ( k ) ;
84180: LD_ADDR_VAR 0 9
84184: PUSH
84185: LD_VAR 0 6
84189: PPUSH
84190: CALL_OW 478
84194: ST_TO_ADDR
// if not weapons then
84195: LD_VAR 0 9
84199: NOT
84200: IFFALSE 84204
// continue ;
84202: GO 84177
// if weapon in weapons then
84204: LD_VAR 0 8
84208: PUSH
84209: LD_VAR 0 9
84213: IN
84214: IFFALSE 84241
// begin result := [ i , weapon ] ;
84216: LD_ADDR_VAR 0 3
84220: PUSH
84221: LD_VAR 0 4
84225: PUSH
84226: LD_VAR 0 8
84230: PUSH
84231: EMPTY
84232: LIST
84233: LIST
84234: ST_TO_ADDR
// exit ;
84235: POP
84236: POP
84237: POP
84238: POP
84239: GO 84249
// end ; end ;
84241: GO 84177
84243: POP
84244: POP
// end ;
84245: GO 84063
84247: POP
84248: POP
// end ;
84249: LD_VAR 0 3
84253: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
84254: LD_INT 0
84256: PPUSH
// if not side or side > 8 then
84257: LD_VAR 0 3
84261: NOT
84262: PUSH
84263: LD_VAR 0 3
84267: PUSH
84268: LD_INT 8
84270: GREATER
84271: OR
84272: IFFALSE 84276
// exit ;
84274: GO 84335
// if not range then
84276: LD_VAR 0 4
84280: NOT
84281: IFFALSE 84292
// range := - 12 ;
84283: LD_ADDR_VAR 0 4
84287: PUSH
84288: LD_INT 12
84290: NEG
84291: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
84292: LD_VAR 0 1
84296: PPUSH
84297: LD_VAR 0 2
84301: PPUSH
84302: LD_VAR 0 3
84306: PPUSH
84307: LD_VAR 0 4
84311: PPUSH
84312: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
84316: LD_VAR 0 1
84320: PPUSH
84321: LD_VAR 0 2
84325: PPUSH
84326: LD_VAR 0 3
84330: PPUSH
84331: CALL_OW 331
// end ;
84335: LD_VAR 0 5
84339: RET
// export function Video ( mode ) ; begin
84340: LD_INT 0
84342: PPUSH
// ingame_video = mode ;
84343: LD_ADDR_OWVAR 52
84347: PUSH
84348: LD_VAR 0 1
84352: ST_TO_ADDR
// interface_hidden = mode ;
84353: LD_ADDR_OWVAR 54
84357: PUSH
84358: LD_VAR 0 1
84362: ST_TO_ADDR
// end ;
84363: LD_VAR 0 2
84367: RET
// export function Join ( array , element ) ; begin
84368: LD_INT 0
84370: PPUSH
// result := Replace ( array , array + 1 , element ) ;
84371: LD_ADDR_VAR 0 3
84375: PUSH
84376: LD_VAR 0 1
84380: PPUSH
84381: LD_VAR 0 1
84385: PUSH
84386: LD_INT 1
84388: PLUS
84389: PPUSH
84390: LD_VAR 0 2
84394: PPUSH
84395: CALL_OW 1
84399: ST_TO_ADDR
// end ;
84400: LD_VAR 0 3
84404: RET
// export function JoinUnion ( array , element ) ; begin
84405: LD_INT 0
84407: PPUSH
// result := array union element ;
84408: LD_ADDR_VAR 0 3
84412: PUSH
84413: LD_VAR 0 1
84417: PUSH
84418: LD_VAR 0 2
84422: UNION
84423: ST_TO_ADDR
// end ;
84424: LD_VAR 0 3
84428: RET
// export function GetBehemoths ( side ) ; begin
84429: LD_INT 0
84431: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
84432: LD_ADDR_VAR 0 2
84436: PUSH
84437: LD_INT 22
84439: PUSH
84440: LD_VAR 0 1
84444: PUSH
84445: EMPTY
84446: LIST
84447: LIST
84448: PUSH
84449: LD_INT 31
84451: PUSH
84452: LD_INT 25
84454: PUSH
84455: EMPTY
84456: LIST
84457: LIST
84458: PUSH
84459: EMPTY
84460: LIST
84461: LIST
84462: PPUSH
84463: CALL_OW 69
84467: ST_TO_ADDR
// end ;
84468: LD_VAR 0 2
84472: RET
// export function Shuffle ( array ) ; var i , index ; begin
84473: LD_INT 0
84475: PPUSH
84476: PPUSH
84477: PPUSH
// result := [ ] ;
84478: LD_ADDR_VAR 0 2
84482: PUSH
84483: EMPTY
84484: ST_TO_ADDR
// if not array then
84485: LD_VAR 0 1
84489: NOT
84490: IFFALSE 84494
// exit ;
84492: GO 84593
// Randomize ;
84494: CALL_OW 10
// for i = array downto 1 do
84498: LD_ADDR_VAR 0 3
84502: PUSH
84503: DOUBLE
84504: LD_VAR 0 1
84508: INC
84509: ST_TO_ADDR
84510: LD_INT 1
84512: PUSH
84513: FOR_DOWNTO
84514: IFFALSE 84591
// begin index := rand ( 1 , array ) ;
84516: LD_ADDR_VAR 0 4
84520: PUSH
84521: LD_INT 1
84523: PPUSH
84524: LD_VAR 0 1
84528: PPUSH
84529: CALL_OW 12
84533: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
84534: LD_ADDR_VAR 0 2
84538: PUSH
84539: LD_VAR 0 2
84543: PPUSH
84544: LD_VAR 0 2
84548: PUSH
84549: LD_INT 1
84551: PLUS
84552: PPUSH
84553: LD_VAR 0 1
84557: PUSH
84558: LD_VAR 0 4
84562: ARRAY
84563: PPUSH
84564: CALL_OW 2
84568: ST_TO_ADDR
// array := Delete ( array , index ) ;
84569: LD_ADDR_VAR 0 1
84573: PUSH
84574: LD_VAR 0 1
84578: PPUSH
84579: LD_VAR 0 4
84583: PPUSH
84584: CALL_OW 3
84588: ST_TO_ADDR
// end ;
84589: GO 84513
84591: POP
84592: POP
// end ;
84593: LD_VAR 0 2
84597: RET
// export function GetBaseMaterials ( base ) ; begin
84598: LD_INT 0
84600: PPUSH
// result := [ 0 , 0 , 0 ] ;
84601: LD_ADDR_VAR 0 2
84605: PUSH
84606: LD_INT 0
84608: PUSH
84609: LD_INT 0
84611: PUSH
84612: LD_INT 0
84614: PUSH
84615: EMPTY
84616: LIST
84617: LIST
84618: LIST
84619: ST_TO_ADDR
// if not base then
84620: LD_VAR 0 1
84624: NOT
84625: IFFALSE 84629
// exit ;
84627: GO 84678
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
84629: LD_ADDR_VAR 0 2
84633: PUSH
84634: LD_VAR 0 1
84638: PPUSH
84639: LD_INT 1
84641: PPUSH
84642: CALL_OW 275
84646: PUSH
84647: LD_VAR 0 1
84651: PPUSH
84652: LD_INT 2
84654: PPUSH
84655: CALL_OW 275
84659: PUSH
84660: LD_VAR 0 1
84664: PPUSH
84665: LD_INT 3
84667: PPUSH
84668: CALL_OW 275
84672: PUSH
84673: EMPTY
84674: LIST
84675: LIST
84676: LIST
84677: ST_TO_ADDR
// end ;
84678: LD_VAR 0 2
84682: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
84683: LD_INT 0
84685: PPUSH
84686: PPUSH
// result := array ;
84687: LD_ADDR_VAR 0 3
84691: PUSH
84692: LD_VAR 0 1
84696: ST_TO_ADDR
// if size > 0 then
84697: LD_VAR 0 2
84701: PUSH
84702: LD_INT 0
84704: GREATER
84705: IFFALSE 84751
// for i := array downto size do
84707: LD_ADDR_VAR 0 4
84711: PUSH
84712: DOUBLE
84713: LD_VAR 0 1
84717: INC
84718: ST_TO_ADDR
84719: LD_VAR 0 2
84723: PUSH
84724: FOR_DOWNTO
84725: IFFALSE 84749
// result := Delete ( result , result ) ;
84727: LD_ADDR_VAR 0 3
84731: PUSH
84732: LD_VAR 0 3
84736: PPUSH
84737: LD_VAR 0 3
84741: PPUSH
84742: CALL_OW 3
84746: ST_TO_ADDR
84747: GO 84724
84749: POP
84750: POP
// end ;
84751: LD_VAR 0 3
84755: RET
// export function ComExit ( unit ) ; var tmp ; begin
84756: LD_INT 0
84758: PPUSH
84759: PPUSH
// if not IsInUnit ( unit ) then
84760: LD_VAR 0 1
84764: PPUSH
84765: CALL_OW 310
84769: NOT
84770: IFFALSE 84774
// exit ;
84772: GO 84834
// tmp := IsInUnit ( unit ) ;
84774: LD_ADDR_VAR 0 3
84778: PUSH
84779: LD_VAR 0 1
84783: PPUSH
84784: CALL_OW 310
84788: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
84789: LD_VAR 0 3
84793: PPUSH
84794: CALL_OW 247
84798: PUSH
84799: LD_INT 2
84801: EQUAL
84802: IFFALSE 84815
// ComExitVehicle ( unit ) else
84804: LD_VAR 0 1
84808: PPUSH
84809: CALL_OW 121
84813: GO 84824
// ComExitBuilding ( unit ) ;
84815: LD_VAR 0 1
84819: PPUSH
84820: CALL_OW 122
// result := tmp ;
84824: LD_ADDR_VAR 0 2
84828: PUSH
84829: LD_VAR 0 3
84833: ST_TO_ADDR
// end ;
84834: LD_VAR 0 2
84838: RET
// export function ComExitAll ( units ) ; var i ; begin
84839: LD_INT 0
84841: PPUSH
84842: PPUSH
// if not units then
84843: LD_VAR 0 1
84847: NOT
84848: IFFALSE 84852
// exit ;
84850: GO 84878
// for i in units do
84852: LD_ADDR_VAR 0 3
84856: PUSH
84857: LD_VAR 0 1
84861: PUSH
84862: FOR_IN
84863: IFFALSE 84876
// ComExit ( i ) ;
84865: LD_VAR 0 3
84869: PPUSH
84870: CALL 84756 0 1
84874: GO 84862
84876: POP
84877: POP
// end ;
84878: LD_VAR 0 2
84882: RET
// export function ResetHc ; begin
84883: LD_INT 0
84885: PPUSH
// InitHc ;
84886: CALL_OW 19
// hc_importance := 0 ;
84890: LD_ADDR_OWVAR 32
84894: PUSH
84895: LD_INT 0
84897: ST_TO_ADDR
// end ;
84898: LD_VAR 0 1
84902: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
84903: LD_INT 0
84905: PPUSH
84906: PPUSH
84907: PPUSH
// _x := ( x1 + x2 ) div 2 ;
84908: LD_ADDR_VAR 0 6
84912: PUSH
84913: LD_VAR 0 1
84917: PUSH
84918: LD_VAR 0 3
84922: PLUS
84923: PUSH
84924: LD_INT 2
84926: DIV
84927: ST_TO_ADDR
// if _x < 0 then
84928: LD_VAR 0 6
84932: PUSH
84933: LD_INT 0
84935: LESS
84936: IFFALSE 84953
// _x := _x * - 1 ;
84938: LD_ADDR_VAR 0 6
84942: PUSH
84943: LD_VAR 0 6
84947: PUSH
84948: LD_INT 1
84950: NEG
84951: MUL
84952: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
84953: LD_ADDR_VAR 0 7
84957: PUSH
84958: LD_VAR 0 2
84962: PUSH
84963: LD_VAR 0 4
84967: PLUS
84968: PUSH
84969: LD_INT 2
84971: DIV
84972: ST_TO_ADDR
// if _y < 0 then
84973: LD_VAR 0 7
84977: PUSH
84978: LD_INT 0
84980: LESS
84981: IFFALSE 84998
// _y := _y * - 1 ;
84983: LD_ADDR_VAR 0 7
84987: PUSH
84988: LD_VAR 0 7
84992: PUSH
84993: LD_INT 1
84995: NEG
84996: MUL
84997: ST_TO_ADDR
// result := [ _x , _y ] ;
84998: LD_ADDR_VAR 0 5
85002: PUSH
85003: LD_VAR 0 6
85007: PUSH
85008: LD_VAR 0 7
85012: PUSH
85013: EMPTY
85014: LIST
85015: LIST
85016: ST_TO_ADDR
// end ;
85017: LD_VAR 0 5
85021: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
85022: LD_INT 0
85024: PPUSH
85025: PPUSH
85026: PPUSH
85027: PPUSH
// task := GetTaskList ( unit ) ;
85028: LD_ADDR_VAR 0 7
85032: PUSH
85033: LD_VAR 0 1
85037: PPUSH
85038: CALL_OW 437
85042: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
85043: LD_VAR 0 7
85047: NOT
85048: PUSH
85049: LD_VAR 0 1
85053: PPUSH
85054: LD_VAR 0 2
85058: PPUSH
85059: CALL_OW 308
85063: NOT
85064: AND
85065: IFFALSE 85069
// exit ;
85067: GO 85187
// if IsInArea ( unit , area ) then
85069: LD_VAR 0 1
85073: PPUSH
85074: LD_VAR 0 2
85078: PPUSH
85079: CALL_OW 308
85083: IFFALSE 85101
// begin ComMoveToArea ( unit , goAway ) ;
85085: LD_VAR 0 1
85089: PPUSH
85090: LD_VAR 0 3
85094: PPUSH
85095: CALL_OW 113
// exit ;
85099: GO 85187
// end ; if task [ 1 ] [ 1 ] <> M then
85101: LD_VAR 0 7
85105: PUSH
85106: LD_INT 1
85108: ARRAY
85109: PUSH
85110: LD_INT 1
85112: ARRAY
85113: PUSH
85114: LD_STRING M
85116: NONEQUAL
85117: IFFALSE 85121
// exit ;
85119: GO 85187
// x := task [ 1 ] [ 2 ] ;
85121: LD_ADDR_VAR 0 5
85125: PUSH
85126: LD_VAR 0 7
85130: PUSH
85131: LD_INT 1
85133: ARRAY
85134: PUSH
85135: LD_INT 2
85137: ARRAY
85138: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
85139: LD_ADDR_VAR 0 6
85143: PUSH
85144: LD_VAR 0 7
85148: PUSH
85149: LD_INT 1
85151: ARRAY
85152: PUSH
85153: LD_INT 3
85155: ARRAY
85156: ST_TO_ADDR
// if InArea ( x , y , area ) then
85157: LD_VAR 0 5
85161: PPUSH
85162: LD_VAR 0 6
85166: PPUSH
85167: LD_VAR 0 2
85171: PPUSH
85172: CALL_OW 309
85176: IFFALSE 85187
// ComStop ( unit ) ;
85178: LD_VAR 0 1
85182: PPUSH
85183: CALL_OW 141
// end ;
85187: LD_VAR 0 4
85191: RET
// export function Abs ( value ) ; begin
85192: LD_INT 0
85194: PPUSH
// result := value ;
85195: LD_ADDR_VAR 0 2
85199: PUSH
85200: LD_VAR 0 1
85204: ST_TO_ADDR
// if value < 0 then
85205: LD_VAR 0 1
85209: PUSH
85210: LD_INT 0
85212: LESS
85213: IFFALSE 85230
// result := value * - 1 ;
85215: LD_ADDR_VAR 0 2
85219: PUSH
85220: LD_VAR 0 1
85224: PUSH
85225: LD_INT 1
85227: NEG
85228: MUL
85229: ST_TO_ADDR
// end ;
85230: LD_VAR 0 2
85234: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
85235: LD_INT 0
85237: PPUSH
85238: PPUSH
85239: PPUSH
85240: PPUSH
85241: PPUSH
85242: PPUSH
85243: PPUSH
85244: PPUSH
// if not unit or not building then
85245: LD_VAR 0 1
85249: NOT
85250: PUSH
85251: LD_VAR 0 2
85255: NOT
85256: OR
85257: IFFALSE 85261
// exit ;
85259: GO 85487
// x := GetX ( building ) ;
85261: LD_ADDR_VAR 0 4
85265: PUSH
85266: LD_VAR 0 2
85270: PPUSH
85271: CALL_OW 250
85275: ST_TO_ADDR
// y := GetY ( building ) ;
85276: LD_ADDR_VAR 0 6
85280: PUSH
85281: LD_VAR 0 2
85285: PPUSH
85286: CALL_OW 251
85290: ST_TO_ADDR
// d := GetDir ( building ) ;
85291: LD_ADDR_VAR 0 8
85295: PUSH
85296: LD_VAR 0 2
85300: PPUSH
85301: CALL_OW 254
85305: ST_TO_ADDR
// r := 4 ;
85306: LD_ADDR_VAR 0 9
85310: PUSH
85311: LD_INT 4
85313: ST_TO_ADDR
// for i := 1 to 5 do
85314: LD_ADDR_VAR 0 10
85318: PUSH
85319: DOUBLE
85320: LD_INT 1
85322: DEC
85323: ST_TO_ADDR
85324: LD_INT 5
85326: PUSH
85327: FOR_TO
85328: IFFALSE 85485
// begin _x := ShiftX ( x , d , r + i ) ;
85330: LD_ADDR_VAR 0 5
85334: PUSH
85335: LD_VAR 0 4
85339: PPUSH
85340: LD_VAR 0 8
85344: PPUSH
85345: LD_VAR 0 9
85349: PUSH
85350: LD_VAR 0 10
85354: PLUS
85355: PPUSH
85356: CALL_OW 272
85360: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
85361: LD_ADDR_VAR 0 7
85365: PUSH
85366: LD_VAR 0 6
85370: PPUSH
85371: LD_VAR 0 8
85375: PPUSH
85376: LD_VAR 0 9
85380: PUSH
85381: LD_VAR 0 10
85385: PLUS
85386: PPUSH
85387: CALL_OW 273
85391: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
85392: LD_VAR 0 5
85396: PPUSH
85397: LD_VAR 0 7
85401: PPUSH
85402: CALL_OW 488
85406: PUSH
85407: LD_VAR 0 5
85411: PPUSH
85412: LD_VAR 0 7
85416: PPUSH
85417: CALL_OW 428
85421: PPUSH
85422: CALL_OW 247
85426: PUSH
85427: LD_INT 3
85429: PUSH
85430: LD_INT 2
85432: PUSH
85433: EMPTY
85434: LIST
85435: LIST
85436: IN
85437: NOT
85438: AND
85439: IFFALSE 85483
// begin ComMoveXY ( unit , _x , _y ) ;
85441: LD_VAR 0 1
85445: PPUSH
85446: LD_VAR 0 5
85450: PPUSH
85451: LD_VAR 0 7
85455: PPUSH
85456: CALL_OW 111
// result := [ _x , _y ] ;
85460: LD_ADDR_VAR 0 3
85464: PUSH
85465: LD_VAR 0 5
85469: PUSH
85470: LD_VAR 0 7
85474: PUSH
85475: EMPTY
85476: LIST
85477: LIST
85478: ST_TO_ADDR
// exit ;
85479: POP
85480: POP
85481: GO 85487
// end ; end ;
85483: GO 85327
85485: POP
85486: POP
// end ;
85487: LD_VAR 0 3
85491: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
85492: LD_INT 0
85494: PPUSH
85495: PPUSH
85496: PPUSH
// result := 0 ;
85497: LD_ADDR_VAR 0 3
85501: PUSH
85502: LD_INT 0
85504: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
85505: LD_VAR 0 1
85509: PUSH
85510: LD_INT 0
85512: LESS
85513: PUSH
85514: LD_VAR 0 1
85518: PUSH
85519: LD_INT 8
85521: GREATER
85522: OR
85523: PUSH
85524: LD_VAR 0 2
85528: PUSH
85529: LD_INT 0
85531: LESS
85532: OR
85533: PUSH
85534: LD_VAR 0 2
85538: PUSH
85539: LD_INT 8
85541: GREATER
85542: OR
85543: IFFALSE 85547
// exit ;
85545: GO 85622
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
85547: LD_ADDR_VAR 0 4
85551: PUSH
85552: LD_INT 22
85554: PUSH
85555: LD_VAR 0 2
85559: PUSH
85560: EMPTY
85561: LIST
85562: LIST
85563: PPUSH
85564: CALL_OW 69
85568: PUSH
85569: FOR_IN
85570: IFFALSE 85620
// begin un := UnitShoot ( i ) ;
85572: LD_ADDR_VAR 0 5
85576: PUSH
85577: LD_VAR 0 4
85581: PPUSH
85582: CALL_OW 504
85586: ST_TO_ADDR
// if GetSide ( un ) = side1 then
85587: LD_VAR 0 5
85591: PPUSH
85592: CALL_OW 255
85596: PUSH
85597: LD_VAR 0 1
85601: EQUAL
85602: IFFALSE 85618
// begin result := un ;
85604: LD_ADDR_VAR 0 3
85608: PUSH
85609: LD_VAR 0 5
85613: ST_TO_ADDR
// exit ;
85614: POP
85615: POP
85616: GO 85622
// end ; end ;
85618: GO 85569
85620: POP
85621: POP
// end ;
85622: LD_VAR 0 3
85626: RET
// export function GetCargoBay ( units ) ; begin
85627: LD_INT 0
85629: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
85630: LD_ADDR_VAR 0 2
85634: PUSH
85635: LD_VAR 0 1
85639: PPUSH
85640: LD_INT 2
85642: PUSH
85643: LD_INT 34
85645: PUSH
85646: LD_INT 12
85648: PUSH
85649: EMPTY
85650: LIST
85651: LIST
85652: PUSH
85653: LD_INT 34
85655: PUSH
85656: LD_INT 51
85658: PUSH
85659: EMPTY
85660: LIST
85661: LIST
85662: PUSH
85663: LD_INT 34
85665: PUSH
85666: LD_INT 32
85668: PUSH
85669: EMPTY
85670: LIST
85671: LIST
85672: PUSH
85673: LD_INT 34
85675: PUSH
85676: LD_EXP 70
85680: PUSH
85681: EMPTY
85682: LIST
85683: LIST
85684: PUSH
85685: EMPTY
85686: LIST
85687: LIST
85688: LIST
85689: LIST
85690: LIST
85691: PPUSH
85692: CALL_OW 72
85696: ST_TO_ADDR
// end ;
85697: LD_VAR 0 2
85701: RET
// export function Negate ( value ) ; begin
85702: LD_INT 0
85704: PPUSH
// result := not value ;
85705: LD_ADDR_VAR 0 2
85709: PUSH
85710: LD_VAR 0 1
85714: NOT
85715: ST_TO_ADDR
// end ;
85716: LD_VAR 0 2
85720: RET
// export function Inc ( value ) ; begin
85721: LD_INT 0
85723: PPUSH
// result := value + 1 ;
85724: LD_ADDR_VAR 0 2
85728: PUSH
85729: LD_VAR 0 1
85733: PUSH
85734: LD_INT 1
85736: PLUS
85737: ST_TO_ADDR
// end ;
85738: LD_VAR 0 2
85742: RET
// export function Dec ( value ) ; begin
85743: LD_INT 0
85745: PPUSH
// result := value - 1 ;
85746: LD_ADDR_VAR 0 2
85750: PUSH
85751: LD_VAR 0 1
85755: PUSH
85756: LD_INT 1
85758: MINUS
85759: ST_TO_ADDR
// end ;
85760: LD_VAR 0 2
85764: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
85765: LD_INT 0
85767: PPUSH
85768: PPUSH
85769: PPUSH
85770: PPUSH
85771: PPUSH
85772: PPUSH
85773: PPUSH
85774: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
85775: LD_VAR 0 1
85779: PPUSH
85780: LD_VAR 0 2
85784: PPUSH
85785: CALL_OW 488
85789: NOT
85790: PUSH
85791: LD_VAR 0 3
85795: PPUSH
85796: LD_VAR 0 4
85800: PPUSH
85801: CALL_OW 488
85805: NOT
85806: OR
85807: IFFALSE 85820
// begin result := - 1 ;
85809: LD_ADDR_VAR 0 5
85813: PUSH
85814: LD_INT 1
85816: NEG
85817: ST_TO_ADDR
// exit ;
85818: GO 86055
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
85820: LD_ADDR_VAR 0 12
85824: PUSH
85825: LD_VAR 0 1
85829: PPUSH
85830: LD_VAR 0 2
85834: PPUSH
85835: LD_VAR 0 3
85839: PPUSH
85840: LD_VAR 0 4
85844: PPUSH
85845: CALL 84903 0 4
85849: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
85850: LD_ADDR_VAR 0 11
85854: PUSH
85855: LD_VAR 0 1
85859: PPUSH
85860: LD_VAR 0 2
85864: PPUSH
85865: LD_VAR 0 12
85869: PUSH
85870: LD_INT 1
85872: ARRAY
85873: PPUSH
85874: LD_VAR 0 12
85878: PUSH
85879: LD_INT 2
85881: ARRAY
85882: PPUSH
85883: CALL_OW 298
85887: ST_TO_ADDR
// distance := 9999 ;
85888: LD_ADDR_VAR 0 10
85892: PUSH
85893: LD_INT 9999
85895: ST_TO_ADDR
// for i := 0 to 5 do
85896: LD_ADDR_VAR 0 6
85900: PUSH
85901: DOUBLE
85902: LD_INT 0
85904: DEC
85905: ST_TO_ADDR
85906: LD_INT 5
85908: PUSH
85909: FOR_TO
85910: IFFALSE 86053
// begin _x := ShiftX ( x1 , i , centerDist ) ;
85912: LD_ADDR_VAR 0 7
85916: PUSH
85917: LD_VAR 0 1
85921: PPUSH
85922: LD_VAR 0 6
85926: PPUSH
85927: LD_VAR 0 11
85931: PPUSH
85932: CALL_OW 272
85936: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
85937: LD_ADDR_VAR 0 8
85941: PUSH
85942: LD_VAR 0 2
85946: PPUSH
85947: LD_VAR 0 6
85951: PPUSH
85952: LD_VAR 0 11
85956: PPUSH
85957: CALL_OW 273
85961: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
85962: LD_VAR 0 7
85966: PPUSH
85967: LD_VAR 0 8
85971: PPUSH
85972: CALL_OW 488
85976: NOT
85977: IFFALSE 85981
// continue ;
85979: GO 85909
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
85981: LD_ADDR_VAR 0 9
85985: PUSH
85986: LD_VAR 0 12
85990: PUSH
85991: LD_INT 1
85993: ARRAY
85994: PPUSH
85995: LD_VAR 0 12
85999: PUSH
86000: LD_INT 2
86002: ARRAY
86003: PPUSH
86004: LD_VAR 0 7
86008: PPUSH
86009: LD_VAR 0 8
86013: PPUSH
86014: CALL_OW 298
86018: ST_TO_ADDR
// if tmp < distance then
86019: LD_VAR 0 9
86023: PUSH
86024: LD_VAR 0 10
86028: LESS
86029: IFFALSE 86051
// begin result := i ;
86031: LD_ADDR_VAR 0 5
86035: PUSH
86036: LD_VAR 0 6
86040: ST_TO_ADDR
// distance := tmp ;
86041: LD_ADDR_VAR 0 10
86045: PUSH
86046: LD_VAR 0 9
86050: ST_TO_ADDR
// end ; end ;
86051: GO 85909
86053: POP
86054: POP
// end ;
86055: LD_VAR 0 5
86059: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
86060: LD_INT 0
86062: PPUSH
86063: PPUSH
// if not driver or not IsInUnit ( driver ) then
86064: LD_VAR 0 1
86068: NOT
86069: PUSH
86070: LD_VAR 0 1
86074: PPUSH
86075: CALL_OW 310
86079: NOT
86080: OR
86081: IFFALSE 86085
// exit ;
86083: GO 86175
// vehicle := IsInUnit ( driver ) ;
86085: LD_ADDR_VAR 0 3
86089: PUSH
86090: LD_VAR 0 1
86094: PPUSH
86095: CALL_OW 310
86099: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
86100: LD_VAR 0 1
86104: PPUSH
86105: LD_STRING \
86107: PUSH
86108: LD_INT 0
86110: PUSH
86111: LD_INT 0
86113: PUSH
86114: LD_INT 0
86116: PUSH
86117: LD_INT 0
86119: PUSH
86120: LD_INT 0
86122: PUSH
86123: LD_INT 0
86125: PUSH
86126: EMPTY
86127: LIST
86128: LIST
86129: LIST
86130: LIST
86131: LIST
86132: LIST
86133: LIST
86134: PUSH
86135: LD_STRING E
86137: PUSH
86138: LD_INT 0
86140: PUSH
86141: LD_INT 0
86143: PUSH
86144: LD_VAR 0 3
86148: PUSH
86149: LD_INT 0
86151: PUSH
86152: LD_INT 0
86154: PUSH
86155: LD_INT 0
86157: PUSH
86158: EMPTY
86159: LIST
86160: LIST
86161: LIST
86162: LIST
86163: LIST
86164: LIST
86165: LIST
86166: PUSH
86167: EMPTY
86168: LIST
86169: LIST
86170: PPUSH
86171: CALL_OW 446
// end ;
86175: LD_VAR 0 2
86179: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
86180: LD_INT 0
86182: PPUSH
86183: PPUSH
// if not driver or not IsInUnit ( driver ) then
86184: LD_VAR 0 1
86188: NOT
86189: PUSH
86190: LD_VAR 0 1
86194: PPUSH
86195: CALL_OW 310
86199: NOT
86200: OR
86201: IFFALSE 86205
// exit ;
86203: GO 86295
// vehicle := IsInUnit ( driver ) ;
86205: LD_ADDR_VAR 0 3
86209: PUSH
86210: LD_VAR 0 1
86214: PPUSH
86215: CALL_OW 310
86219: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
86220: LD_VAR 0 1
86224: PPUSH
86225: LD_STRING \
86227: PUSH
86228: LD_INT 0
86230: PUSH
86231: LD_INT 0
86233: PUSH
86234: LD_INT 0
86236: PUSH
86237: LD_INT 0
86239: PUSH
86240: LD_INT 0
86242: PUSH
86243: LD_INT 0
86245: PUSH
86246: EMPTY
86247: LIST
86248: LIST
86249: LIST
86250: LIST
86251: LIST
86252: LIST
86253: LIST
86254: PUSH
86255: LD_STRING E
86257: PUSH
86258: LD_INT 0
86260: PUSH
86261: LD_INT 0
86263: PUSH
86264: LD_VAR 0 3
86268: PUSH
86269: LD_INT 0
86271: PUSH
86272: LD_INT 0
86274: PUSH
86275: LD_INT 0
86277: PUSH
86278: EMPTY
86279: LIST
86280: LIST
86281: LIST
86282: LIST
86283: LIST
86284: LIST
86285: LIST
86286: PUSH
86287: EMPTY
86288: LIST
86289: LIST
86290: PPUSH
86291: CALL_OW 447
// end ;
86295: LD_VAR 0 2
86299: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
86300: LD_INT 0
86302: PPUSH
86303: PPUSH
86304: PPUSH
// tmp := [ ] ;
86305: LD_ADDR_VAR 0 5
86309: PUSH
86310: EMPTY
86311: ST_TO_ADDR
// for i in units do
86312: LD_ADDR_VAR 0 4
86316: PUSH
86317: LD_VAR 0 1
86321: PUSH
86322: FOR_IN
86323: IFFALSE 86361
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
86325: LD_ADDR_VAR 0 5
86329: PUSH
86330: LD_VAR 0 5
86334: PPUSH
86335: LD_VAR 0 5
86339: PUSH
86340: LD_INT 1
86342: PLUS
86343: PPUSH
86344: LD_VAR 0 4
86348: PPUSH
86349: CALL_OW 256
86353: PPUSH
86354: CALL_OW 2
86358: ST_TO_ADDR
86359: GO 86322
86361: POP
86362: POP
// if not tmp then
86363: LD_VAR 0 5
86367: NOT
86368: IFFALSE 86372
// exit ;
86370: GO 86420
// if asc then
86372: LD_VAR 0 2
86376: IFFALSE 86400
// result := SortListByListAsc ( units , tmp ) else
86378: LD_ADDR_VAR 0 3
86382: PUSH
86383: LD_VAR 0 1
86387: PPUSH
86388: LD_VAR 0 5
86392: PPUSH
86393: CALL_OW 76
86397: ST_TO_ADDR
86398: GO 86420
// result := SortListByListDesc ( units , tmp ) ;
86400: LD_ADDR_VAR 0 3
86404: PUSH
86405: LD_VAR 0 1
86409: PPUSH
86410: LD_VAR 0 5
86414: PPUSH
86415: CALL_OW 77
86419: ST_TO_ADDR
// end ;
86420: LD_VAR 0 3
86424: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
86425: LD_INT 0
86427: PPUSH
86428: PPUSH
// task := GetTaskList ( mech ) ;
86429: LD_ADDR_VAR 0 4
86433: PUSH
86434: LD_VAR 0 1
86438: PPUSH
86439: CALL_OW 437
86443: ST_TO_ADDR
// if not task then
86444: LD_VAR 0 4
86448: NOT
86449: IFFALSE 86453
// exit ;
86451: GO 86495
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
86453: LD_ADDR_VAR 0 3
86457: PUSH
86458: LD_VAR 0 4
86462: PUSH
86463: LD_INT 1
86465: ARRAY
86466: PUSH
86467: LD_INT 1
86469: ARRAY
86470: PUSH
86471: LD_STRING r
86473: EQUAL
86474: PUSH
86475: LD_VAR 0 4
86479: PUSH
86480: LD_INT 1
86482: ARRAY
86483: PUSH
86484: LD_INT 4
86486: ARRAY
86487: PUSH
86488: LD_VAR 0 2
86492: EQUAL
86493: AND
86494: ST_TO_ADDR
// end ;
86495: LD_VAR 0 3
86499: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
86500: LD_INT 0
86502: PPUSH
// SetDir ( unit , d ) ;
86503: LD_VAR 0 1
86507: PPUSH
86508: LD_VAR 0 4
86512: PPUSH
86513: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
86517: LD_VAR 0 1
86521: PPUSH
86522: LD_VAR 0 2
86526: PPUSH
86527: LD_VAR 0 3
86531: PPUSH
86532: LD_VAR 0 5
86536: PPUSH
86537: CALL_OW 48
// end ;
86541: LD_VAR 0 6
86545: RET
// export function ToNaturalNumber ( number ) ; begin
86546: LD_INT 0
86548: PPUSH
// result := number div 1 ;
86549: LD_ADDR_VAR 0 2
86553: PUSH
86554: LD_VAR 0 1
86558: PUSH
86559: LD_INT 1
86561: DIV
86562: ST_TO_ADDR
// if number < 0 then
86563: LD_VAR 0 1
86567: PUSH
86568: LD_INT 0
86570: LESS
86571: IFFALSE 86581
// result := 0 ;
86573: LD_ADDR_VAR 0 2
86577: PUSH
86578: LD_INT 0
86580: ST_TO_ADDR
// end ;
86581: LD_VAR 0 2
86585: RET
// export function SortByClass ( units , class ) ; var un ; begin
86586: LD_INT 0
86588: PPUSH
86589: PPUSH
// if not units or not class then
86590: LD_VAR 0 1
86594: NOT
86595: PUSH
86596: LD_VAR 0 2
86600: NOT
86601: OR
86602: IFFALSE 86606
// exit ;
86604: GO 86701
// result := [ ] ;
86606: LD_ADDR_VAR 0 3
86610: PUSH
86611: EMPTY
86612: ST_TO_ADDR
// for un in units do
86613: LD_ADDR_VAR 0 4
86617: PUSH
86618: LD_VAR 0 1
86622: PUSH
86623: FOR_IN
86624: IFFALSE 86699
// if GetClass ( un ) = class then
86626: LD_VAR 0 4
86630: PPUSH
86631: CALL_OW 257
86635: PUSH
86636: LD_VAR 0 2
86640: EQUAL
86641: IFFALSE 86668
// result := Insert ( result , 1 , un ) else
86643: LD_ADDR_VAR 0 3
86647: PUSH
86648: LD_VAR 0 3
86652: PPUSH
86653: LD_INT 1
86655: PPUSH
86656: LD_VAR 0 4
86660: PPUSH
86661: CALL_OW 2
86665: ST_TO_ADDR
86666: GO 86697
// result := Replace ( result , result + 1 , un ) ;
86668: LD_ADDR_VAR 0 3
86672: PUSH
86673: LD_VAR 0 3
86677: PPUSH
86678: LD_VAR 0 3
86682: PUSH
86683: LD_INT 1
86685: PLUS
86686: PPUSH
86687: LD_VAR 0 4
86691: PPUSH
86692: CALL_OW 1
86696: ST_TO_ADDR
86697: GO 86623
86699: POP
86700: POP
// end ;
86701: LD_VAR 0 3
86705: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
86706: LD_INT 0
86708: PPUSH
86709: PPUSH
86710: PPUSH
86711: PPUSH
86712: PPUSH
86713: PPUSH
86714: PPUSH
// result := [ ] ;
86715: LD_ADDR_VAR 0 4
86719: PUSH
86720: EMPTY
86721: ST_TO_ADDR
// if x - r < 0 then
86722: LD_VAR 0 1
86726: PUSH
86727: LD_VAR 0 3
86731: MINUS
86732: PUSH
86733: LD_INT 0
86735: LESS
86736: IFFALSE 86748
// min_x := 0 else
86738: LD_ADDR_VAR 0 8
86742: PUSH
86743: LD_INT 0
86745: ST_TO_ADDR
86746: GO 86764
// min_x := x - r ;
86748: LD_ADDR_VAR 0 8
86752: PUSH
86753: LD_VAR 0 1
86757: PUSH
86758: LD_VAR 0 3
86762: MINUS
86763: ST_TO_ADDR
// if y - r < 0 then
86764: LD_VAR 0 2
86768: PUSH
86769: LD_VAR 0 3
86773: MINUS
86774: PUSH
86775: LD_INT 0
86777: LESS
86778: IFFALSE 86790
// min_y := 0 else
86780: LD_ADDR_VAR 0 7
86784: PUSH
86785: LD_INT 0
86787: ST_TO_ADDR
86788: GO 86806
// min_y := y - r ;
86790: LD_ADDR_VAR 0 7
86794: PUSH
86795: LD_VAR 0 2
86799: PUSH
86800: LD_VAR 0 3
86804: MINUS
86805: ST_TO_ADDR
// max_x := x + r ;
86806: LD_ADDR_VAR 0 9
86810: PUSH
86811: LD_VAR 0 1
86815: PUSH
86816: LD_VAR 0 3
86820: PLUS
86821: ST_TO_ADDR
// max_y := y + r ;
86822: LD_ADDR_VAR 0 10
86826: PUSH
86827: LD_VAR 0 2
86831: PUSH
86832: LD_VAR 0 3
86836: PLUS
86837: ST_TO_ADDR
// for _x = min_x to max_x do
86838: LD_ADDR_VAR 0 5
86842: PUSH
86843: DOUBLE
86844: LD_VAR 0 8
86848: DEC
86849: ST_TO_ADDR
86850: LD_VAR 0 9
86854: PUSH
86855: FOR_TO
86856: IFFALSE 86957
// for _y = min_y to max_y do
86858: LD_ADDR_VAR 0 6
86862: PUSH
86863: DOUBLE
86864: LD_VAR 0 7
86868: DEC
86869: ST_TO_ADDR
86870: LD_VAR 0 10
86874: PUSH
86875: FOR_TO
86876: IFFALSE 86953
// begin if not ValidHex ( _x , _y ) then
86878: LD_VAR 0 5
86882: PPUSH
86883: LD_VAR 0 6
86887: PPUSH
86888: CALL_OW 488
86892: NOT
86893: IFFALSE 86897
// continue ;
86895: GO 86875
// if GetResourceTypeXY ( _x , _y ) then
86897: LD_VAR 0 5
86901: PPUSH
86902: LD_VAR 0 6
86906: PPUSH
86907: CALL_OW 283
86911: IFFALSE 86951
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
86913: LD_ADDR_VAR 0 4
86917: PUSH
86918: LD_VAR 0 4
86922: PPUSH
86923: LD_VAR 0 4
86927: PUSH
86928: LD_INT 1
86930: PLUS
86931: PPUSH
86932: LD_VAR 0 5
86936: PUSH
86937: LD_VAR 0 6
86941: PUSH
86942: EMPTY
86943: LIST
86944: LIST
86945: PPUSH
86946: CALL_OW 1
86950: ST_TO_ADDR
// end ;
86951: GO 86875
86953: POP
86954: POP
86955: GO 86855
86957: POP
86958: POP
// end ;
86959: LD_VAR 0 4
86963: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
86964: LD_INT 0
86966: PPUSH
86967: PPUSH
86968: PPUSH
86969: PPUSH
86970: PPUSH
86971: PPUSH
86972: PPUSH
86973: PPUSH
// if not units then
86974: LD_VAR 0 1
86978: NOT
86979: IFFALSE 86983
// exit ;
86981: GO 87408
// result := UnitFilter ( units , [ f_ok ] ) ;
86983: LD_ADDR_VAR 0 3
86987: PUSH
86988: LD_VAR 0 1
86992: PPUSH
86993: LD_INT 50
86995: PUSH
86996: EMPTY
86997: LIST
86998: PPUSH
86999: CALL_OW 72
87003: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
87004: LD_ADDR_VAR 0 8
87008: PUSH
87009: LD_VAR 0 1
87013: PUSH
87014: LD_INT 1
87016: ARRAY
87017: PPUSH
87018: CALL_OW 255
87022: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
87023: LD_ADDR_VAR 0 10
87027: PUSH
87028: LD_INT 29
87030: PUSH
87031: LD_EXP 73
87035: PUSH
87036: EMPTY
87037: LIST
87038: LIST
87039: ST_TO_ADDR
// if not result then
87040: LD_VAR 0 3
87044: NOT
87045: IFFALSE 87049
// exit ;
87047: GO 87408
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
87049: LD_ADDR_VAR 0 5
87053: PUSH
87054: LD_INT 81
87056: PUSH
87057: LD_VAR 0 8
87061: PUSH
87062: EMPTY
87063: LIST
87064: LIST
87065: PPUSH
87066: CALL_OW 69
87070: ST_TO_ADDR
// for i in result do
87071: LD_ADDR_VAR 0 4
87075: PUSH
87076: LD_VAR 0 3
87080: PUSH
87081: FOR_IN
87082: IFFALSE 87406
// begin tag := GetTag ( i ) + 1 ;
87084: LD_ADDR_VAR 0 9
87088: PUSH
87089: LD_VAR 0 4
87093: PPUSH
87094: CALL_OW 110
87098: PUSH
87099: LD_INT 1
87101: PLUS
87102: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
87103: LD_ADDR_VAR 0 7
87107: PUSH
87108: LD_VAR 0 4
87112: PPUSH
87113: CALL_OW 250
87117: PPUSH
87118: LD_VAR 0 4
87122: PPUSH
87123: CALL_OW 251
87127: PPUSH
87128: LD_INT 6
87130: PPUSH
87131: CALL 86706 0 3
87135: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
87136: LD_VAR 0 7
87140: PUSH
87141: LD_VAR 0 4
87145: PPUSH
87146: CALL_OW 264
87150: PUSH
87151: LD_VAR 0 10
87155: IN
87156: NOT
87157: AND
87158: IFFALSE 87197
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
87160: LD_VAR 0 4
87164: PPUSH
87165: LD_VAR 0 7
87169: PUSH
87170: LD_INT 1
87172: ARRAY
87173: PUSH
87174: LD_INT 1
87176: ARRAY
87177: PPUSH
87178: LD_VAR 0 7
87182: PUSH
87183: LD_INT 1
87185: ARRAY
87186: PUSH
87187: LD_INT 2
87189: ARRAY
87190: PPUSH
87191: CALL_OW 116
87195: GO 87404
// if path > tag then
87197: LD_VAR 0 2
87201: PUSH
87202: LD_VAR 0 9
87206: GREATER
87207: IFFALSE 87374
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
87209: LD_ADDR_VAR 0 6
87213: PUSH
87214: LD_VAR 0 5
87218: PPUSH
87219: LD_INT 91
87221: PUSH
87222: LD_VAR 0 4
87226: PUSH
87227: LD_INT 12
87229: PUSH
87230: EMPTY
87231: LIST
87232: LIST
87233: LIST
87234: PPUSH
87235: CALL_OW 72
87239: ST_TO_ADDR
// if nearEnemy then
87240: LD_VAR 0 6
87244: IFFALSE 87272
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
87246: LD_VAR 0 4
87250: PPUSH
87251: LD_VAR 0 6
87255: PPUSH
87256: LD_VAR 0 4
87260: PPUSH
87261: CALL_OW 74
87265: PPUSH
87266: CALL_OW 115
87270: GO 87372
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
87272: LD_VAR 0 4
87276: PPUSH
87277: LD_VAR 0 2
87281: PUSH
87282: LD_VAR 0 9
87286: ARRAY
87287: PUSH
87288: LD_INT 1
87290: ARRAY
87291: PPUSH
87292: LD_VAR 0 2
87296: PUSH
87297: LD_VAR 0 9
87301: ARRAY
87302: PUSH
87303: LD_INT 2
87305: ARRAY
87306: PPUSH
87307: CALL_OW 297
87311: PUSH
87312: LD_INT 6
87314: GREATER
87315: IFFALSE 87358
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
87317: LD_VAR 0 4
87321: PPUSH
87322: LD_VAR 0 2
87326: PUSH
87327: LD_VAR 0 9
87331: ARRAY
87332: PUSH
87333: LD_INT 1
87335: ARRAY
87336: PPUSH
87337: LD_VAR 0 2
87341: PUSH
87342: LD_VAR 0 9
87346: ARRAY
87347: PUSH
87348: LD_INT 2
87350: ARRAY
87351: PPUSH
87352: CALL_OW 114
87356: GO 87372
// SetTag ( i , tag ) ;
87358: LD_VAR 0 4
87362: PPUSH
87363: LD_VAR 0 9
87367: PPUSH
87368: CALL_OW 109
// end else
87372: GO 87404
// if enemy then
87374: LD_VAR 0 5
87378: IFFALSE 87404
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
87380: LD_VAR 0 4
87384: PPUSH
87385: LD_VAR 0 5
87389: PPUSH
87390: LD_VAR 0 4
87394: PPUSH
87395: CALL_OW 74
87399: PPUSH
87400: CALL_OW 115
// end ;
87404: GO 87081
87406: POP
87407: POP
// end ;
87408: LD_VAR 0 3
87412: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
87413: LD_INT 0
87415: PPUSH
87416: PPUSH
87417: PPUSH
// if not unit or IsInUnit ( unit ) then
87418: LD_VAR 0 1
87422: NOT
87423: PUSH
87424: LD_VAR 0 1
87428: PPUSH
87429: CALL_OW 310
87433: OR
87434: IFFALSE 87438
// exit ;
87436: GO 87529
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
87438: LD_ADDR_VAR 0 4
87442: PUSH
87443: LD_VAR 0 1
87447: PPUSH
87448: CALL_OW 250
87452: PPUSH
87453: LD_VAR 0 2
87457: PPUSH
87458: LD_INT 1
87460: PPUSH
87461: CALL_OW 272
87465: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
87466: LD_ADDR_VAR 0 5
87470: PUSH
87471: LD_VAR 0 1
87475: PPUSH
87476: CALL_OW 251
87480: PPUSH
87481: LD_VAR 0 2
87485: PPUSH
87486: LD_INT 1
87488: PPUSH
87489: CALL_OW 273
87493: ST_TO_ADDR
// if ValidHex ( x , y ) then
87494: LD_VAR 0 4
87498: PPUSH
87499: LD_VAR 0 5
87503: PPUSH
87504: CALL_OW 488
87508: IFFALSE 87529
// ComTurnXY ( unit , x , y ) ;
87510: LD_VAR 0 1
87514: PPUSH
87515: LD_VAR 0 4
87519: PPUSH
87520: LD_VAR 0 5
87524: PPUSH
87525: CALL_OW 118
// end ;
87529: LD_VAR 0 3
87533: RET
// export function SeeUnits ( side , units ) ; var i ; begin
87534: LD_INT 0
87536: PPUSH
87537: PPUSH
// result := false ;
87538: LD_ADDR_VAR 0 3
87542: PUSH
87543: LD_INT 0
87545: ST_TO_ADDR
// if not units then
87546: LD_VAR 0 2
87550: NOT
87551: IFFALSE 87555
// exit ;
87553: GO 87600
// for i in units do
87555: LD_ADDR_VAR 0 4
87559: PUSH
87560: LD_VAR 0 2
87564: PUSH
87565: FOR_IN
87566: IFFALSE 87598
// if See ( side , i ) then
87568: LD_VAR 0 1
87572: PPUSH
87573: LD_VAR 0 4
87577: PPUSH
87578: CALL_OW 292
87582: IFFALSE 87596
// begin result := true ;
87584: LD_ADDR_VAR 0 3
87588: PUSH
87589: LD_INT 1
87591: ST_TO_ADDR
// exit ;
87592: POP
87593: POP
87594: GO 87600
// end ;
87596: GO 87565
87598: POP
87599: POP
// end ;
87600: LD_VAR 0 3
87604: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
87605: LD_INT 0
87607: PPUSH
87608: PPUSH
87609: PPUSH
87610: PPUSH
// if not unit or not points then
87611: LD_VAR 0 1
87615: NOT
87616: PUSH
87617: LD_VAR 0 2
87621: NOT
87622: OR
87623: IFFALSE 87627
// exit ;
87625: GO 87717
// dist := 99999 ;
87627: LD_ADDR_VAR 0 5
87631: PUSH
87632: LD_INT 99999
87634: ST_TO_ADDR
// for i in points do
87635: LD_ADDR_VAR 0 4
87639: PUSH
87640: LD_VAR 0 2
87644: PUSH
87645: FOR_IN
87646: IFFALSE 87715
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
87648: LD_ADDR_VAR 0 6
87652: PUSH
87653: LD_VAR 0 1
87657: PPUSH
87658: LD_VAR 0 4
87662: PUSH
87663: LD_INT 1
87665: ARRAY
87666: PPUSH
87667: LD_VAR 0 4
87671: PUSH
87672: LD_INT 2
87674: ARRAY
87675: PPUSH
87676: CALL_OW 297
87680: ST_TO_ADDR
// if tmpDist < dist then
87681: LD_VAR 0 6
87685: PUSH
87686: LD_VAR 0 5
87690: LESS
87691: IFFALSE 87713
// begin result := i ;
87693: LD_ADDR_VAR 0 3
87697: PUSH
87698: LD_VAR 0 4
87702: ST_TO_ADDR
// dist := tmpDist ;
87703: LD_ADDR_VAR 0 5
87707: PUSH
87708: LD_VAR 0 6
87712: ST_TO_ADDR
// end ; end ;
87713: GO 87645
87715: POP
87716: POP
// end ; end_of_file
87717: LD_VAR 0 3
87721: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
87722: LD_VAR 0 1
87726: PUSH
87727: LD_INT 200
87729: DOUBLE
87730: GREATEREQUAL
87731: IFFALSE 87739
87733: LD_INT 299
87735: DOUBLE
87736: LESSEQUAL
87737: IFTRUE 87741
87739: GO 87773
87741: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
87742: LD_VAR 0 1
87746: PPUSH
87747: LD_VAR 0 2
87751: PPUSH
87752: LD_VAR 0 3
87756: PPUSH
87757: LD_VAR 0 4
87761: PPUSH
87762: LD_VAR 0 5
87766: PPUSH
87767: CALL 43748 0 5
87771: GO 87850
87773: LD_INT 300
87775: DOUBLE
87776: GREATEREQUAL
87777: IFFALSE 87785
87779: LD_INT 399
87781: DOUBLE
87782: LESSEQUAL
87783: IFTRUE 87787
87785: GO 87849
87787: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
87788: LD_VAR 0 1
87792: PPUSH
87793: LD_VAR 0 2
87797: PPUSH
87798: LD_VAR 0 3
87802: PPUSH
87803: LD_VAR 0 4
87807: PPUSH
87808: LD_VAR 0 5
87812: PPUSH
87813: LD_VAR 0 6
87817: PPUSH
87818: LD_VAR 0 7
87822: PPUSH
87823: LD_VAR 0 8
87827: PPUSH
87828: LD_VAR 0 9
87832: PPUSH
87833: LD_VAR 0 10
87837: PPUSH
87838: LD_VAR 0 11
87842: PPUSH
87843: CALL 41646 0 11
87847: GO 87850
87849: POP
// end ;
87850: PPOPN 11
87852: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
87853: LD_VAR 0 1
87857: PPUSH
87858: LD_VAR 0 2
87862: PPUSH
87863: LD_VAR 0 3
87867: PPUSH
87868: LD_VAR 0 4
87872: PPUSH
87873: LD_VAR 0 5
87877: PPUSH
87878: CALL 43740 0 5
// end ; end_of_file
87882: PPOPN 5
87884: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
87885: LD_VAR 0 1
87889: PPUSH
87890: LD_VAR 0 2
87894: PPUSH
87895: LD_VAR 0 3
87899: PPUSH
87900: LD_VAR 0 4
87904: PPUSH
87905: LD_VAR 0 5
87909: PPUSH
87910: LD_VAR 0 6
87914: PPUSH
87915: CALL 29841 0 6
// end ;
87919: PPOPN 6
87921: END
