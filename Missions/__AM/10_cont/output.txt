// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export ruMech ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog , snipersTrained ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 28
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 20
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 29
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 38
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 39
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 40
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 41
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 42
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 50
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 47
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 46
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 48
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 49
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 59
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// ruMech := [ 4 , 5 , 6 ] [ Difficulty ] ;
 123: LD_ADDR_EXP 51
 127: PUSH
 128: LD_INT 4
 130: PUSH
 131: LD_INT 5
 133: PUSH
 134: LD_INT 6
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: PUSH
 142: LD_OWVAR 67
 146: ARRAY
 147: ST_TO_ADDR
// eventVar1 = 0 ;
 148: LD_ADDR_EXP 63
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// eventVar2 = 0 ;
 156: LD_ADDR_EXP 64
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// fastEnd = 0 ;
 164: LD_ADDR_EXP 61
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// KhatamStatus = 0 ;
 172: LD_ADDR_EXP 53
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// GensherStatus = 0 ;
 180: LD_ADDR_EXP 52
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// cratesSpawned = 0 ;
 188: LD_ADDR_EXP 56
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 196: LD_ADDR_EXP 57
 200: PUSH
 201: LD_INT 1
 203: PUSH
 204: LD_INT 2
 206: PUSH
 207: LD_INT 2
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: LIST
 214: PUSH
 215: LD_OWVAR 67
 219: ARRAY
 220: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 ] [ Difficulty ] ;
 221: LD_ADDR_EXP 58
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 4
 231: PUSH
 232: LD_INT 4
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: PUSH
 240: LD_OWVAR 67
 244: ARRAY
 245: ST_TO_ADDR
// snipersTrained := false ;
 246: LD_ADDR_EXP 60
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// attackAvalaible = 1 ;
 254: LD_ADDR_EXP 62
 258: PUSH
 259: LD_INT 1
 261: ST_TO_ADDR
// mission_prefix := 10c_ ;
 262: LD_ADDR_EXP 54
 266: PUSH
 267: LD_STRING 10c_
 269: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 270: LD_ADDR_EXP 55
 274: PUSH
 275: LD_STRING 10_
 277: ST_TO_ADDR
// debugMode = 0 ;
 278: LD_ADDR_EXP 65
 282: PUSH
 283: LD_INT 0
 285: ST_TO_ADDR
// PrepareNature ;
 286: CALL 25888 0 0
// PrepareDifficulty ;
 290: CALL 10762 0 0
// PrepareJMMTeam ;
 294: CALL 1350 0 0
// PrepareCathyTeam ;
 298: CALL 2425 0 0
// PlaceMines ( MineField1 , 3 + Difficulty ) ;
 302: LD_INT 24
 304: PPUSH
 305: LD_INT 3
 307: PUSH
 308: LD_OWVAR 67
 312: PLUS
 313: PPUSH
 314: CALL 20636 0 2
// if Difficulty > 1 then
 318: LD_OWVAR 67
 322: PUSH
 323: LD_INT 1
 325: GREATER
 326: IFFALSE 344
// PlaceMines ( MineField2 , 3 + Difficulty ) ;
 328: LD_INT 25
 330: PPUSH
 331: LD_INT 3
 333: PUSH
 334: LD_OWVAR 67
 338: PLUS
 339: PPUSH
 340: CALL 20636 0 2
// if Difficulty > 2 then
 344: LD_OWVAR 67
 348: PUSH
 349: LD_INT 2
 351: GREATER
 352: IFFALSE 370
// PlaceMines ( MineField3 , 3 + Difficulty ) ;
 354: LD_INT 26
 356: PPUSH
 357: LD_INT 3
 359: PUSH
 360: LD_OWVAR 67
 364: PLUS
 365: PPUSH
 366: CALL 20636 0 2
// PrepareArabianCommander ;
 370: CALL 3863 0 0
// PrepareArabian ;
 374: CALL 3915 0 0
// BuildArabianBase ;
 378: CALL 13577 0 0
// TameApemans ;
 382: CALL 19441 0 0
// end ;
 386: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 387: LD_EXP 65
 391: PUSH
 392: LD_INT 1
 394: EQUAL
 395: IFFALSE 701
 397: GO 399
 399: DISABLE
 400: LD_INT 0
 402: PPUSH
// begin enable ;
 403: ENABLE
// fogoff ( true ) ;
 404: LD_INT 1
 406: PPUSH
 407: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 411: LD_ADDR_VAR 0 1
 415: PUSH
 416: LD_INT 22
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: PUSH
 426: LD_INT 21
 428: PUSH
 429: LD_INT 1
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: PUSH
 436: EMPTY
 437: LIST
 438: LIST
 439: PPUSH
 440: CALL_OW 69
 444: PUSH
 445: FOR_IN
 446: IFFALSE 462
// SetLives ( i , 1000 ) ;
 448: LD_VAR 0 1
 452: PPUSH
 453: LD_INT 1000
 455: PPUSH
 456: CALL_OW 234
 460: GO 445
 462: POP
 463: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 464: LD_ADDR_VAR 0 1
 468: PUSH
 469: LD_INT 22
 471: PUSH
 472: LD_INT 1
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 2
 481: PUSH
 482: LD_INT 30
 484: PUSH
 485: LD_INT 0
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: PUSH
 492: LD_INT 30
 494: PUSH
 495: LD_INT 1
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: LIST
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: PPUSH
 511: CALL_OW 69
 515: PUSH
 516: FOR_IN
 517: IFFALSE 541
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 519: LD_VAR 0 1
 523: PPUSH
 524: CALL_OW 274
 528: PPUSH
 529: LD_INT 1
 531: PPUSH
 532: LD_INT 9999
 534: PPUSH
 535: CALL_OW 277
 539: GO 516
 541: POP
 542: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 543: LD_ADDR_VAR 0 1
 547: PUSH
 548: LD_INT 22
 550: PUSH
 551: LD_INT 1
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PUSH
 558: LD_INT 2
 560: PUSH
 561: LD_INT 30
 563: PUSH
 564: LD_INT 0
 566: PUSH
 567: EMPTY
 568: LIST
 569: LIST
 570: PUSH
 571: LD_INT 30
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: PUSH
 581: EMPTY
 582: LIST
 583: LIST
 584: LIST
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PPUSH
 590: CALL_OW 69
 594: PUSH
 595: FOR_IN
 596: IFFALSE 620
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 598: LD_VAR 0 1
 602: PPUSH
 603: CALL_OW 274
 607: PPUSH
 608: LD_INT 2
 610: PPUSH
 611: LD_INT 9999
 613: PPUSH
 614: CALL_OW 277
 618: GO 595
 620: POP
 621: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 622: LD_ADDR_VAR 0 1
 626: PUSH
 627: LD_INT 22
 629: PUSH
 630: LD_INT 1
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: PUSH
 637: LD_INT 2
 639: PUSH
 640: LD_INT 30
 642: PUSH
 643: LD_INT 0
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: PUSH
 650: LD_INT 30
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PUSH
 660: EMPTY
 661: LIST
 662: LIST
 663: LIST
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: PPUSH
 669: CALL_OW 69
 673: PUSH
 674: FOR_IN
 675: IFFALSE 699
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 677: LD_VAR 0 1
 681: PPUSH
 682: CALL_OW 274
 686: PPUSH
 687: LD_INT 3
 689: PPUSH
 690: LD_INT 9999
 692: PPUSH
 693: CALL_OW 277
 697: GO 674
 699: POP
 700: POP
// end ;
 701: PPOPN 1
 703: END
// every 0 0$1 trigger FilterAllUnits ( [ f_class , class_sniper ] ) do
 704: LD_INT 25
 706: PUSH
 707: LD_INT 5
 709: PUSH
 710: EMPTY
 711: LIST
 712: LIST
 713: PPUSH
 714: CALL_OW 69
 718: IFFALSE 731
 720: GO 722
 722: DISABLE
// snipersTrained := true ;
 723: LD_ADDR_EXP 60
 727: PUSH
 728: LD_INT 1
 730: ST_TO_ADDR
 731: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_friend and ruDestroyedBuildings and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do
 732: LD_INT 1
 734: PPUSH
 735: LD_INT 2
 737: PPUSH
 738: CALL_OW 81
 742: PUSH
 743: LD_INT 1
 745: EQUAL
 746: PUSH
 747: LD_EXP 42
 751: AND
 752: PUSH
 753: LD_INT 22
 755: PUSH
 756: LD_INT 3
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: PUSH
 763: LD_INT 21
 765: PUSH
 766: LD_INT 3
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: PPUSH
 777: CALL_OW 69
 781: PUSH
 782: LD_INT 0
 784: EQUAL
 785: AND
 786: IFFALSE 798
 788: GO 790
 790: DISABLE
// SetAchievement ( ACH_POWER ) ;
 791: LD_STRING ACH_POWER
 793: PPUSH
 794: CALL_OW 543
 798: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 799: LD_INT 22
 801: PUSH
 802: LD_INT 1
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: PUSH
 809: LD_INT 30
 811: PUSH
 812: LD_INT 1
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: PPUSH
 823: CALL_OW 69
 827: PUSH
 828: LD_INT 22
 830: PUSH
 831: LD_INT 1
 833: PUSH
 834: EMPTY
 835: LIST
 836: LIST
 837: PUSH
 838: LD_INT 30
 840: PUSH
 841: LD_INT 32
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PPUSH
 852: CALL_OW 69
 856: AND
 857: PUSH
 858: LD_INT 22
 860: PUSH
 861: LD_INT 1
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: PUSH
 868: LD_INT 30
 870: PUSH
 871: LD_INT 33
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: PPUSH
 882: CALL_OW 69
 886: AND
 887: PUSH
 888: LD_INT 22
 890: PUSH
 891: LD_INT 1
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 30
 900: PUSH
 901: LD_INT 5
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PPUSH
 912: CALL_OW 69
 916: AND
 917: PUSH
 918: LD_INT 22
 920: PUSH
 921: LD_INT 1
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: PUSH
 928: LD_INT 30
 930: PUSH
 931: LD_INT 3
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: PPUSH
 942: CALL_OW 69
 946: AND
 947: PUSH
 948: LD_INT 22
 950: PUSH
 951: LD_INT 1
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: LD_INT 30
 960: PUSH
 961: LD_INT 36
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PPUSH
 972: CALL_OW 69
 976: AND
 977: PUSH
 978: LD_INT 22
 980: PUSH
 981: LD_INT 1
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: PUSH
 988: LD_INT 30
 990: PUSH
 991: LD_INT 31
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: PUSH
 998: EMPTY
 999: LIST
1000: LIST
1001: PPUSH
1002: CALL_OW 69
1006: AND
1007: PUSH
1008: LD_INT 22
1010: PUSH
1011: LD_INT 1
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 30
1020: PUSH
1021: LD_INT 22
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: PPUSH
1032: CALL_OW 69
1036: AND
1037: PUSH
1038: LD_INT 22
1040: PUSH
1041: LD_INT 1
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: PUSH
1048: LD_INT 30
1050: PUSH
1051: LD_INT 20
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: PPUSH
1062: CALL_OW 69
1066: AND
1067: PUSH
1068: LD_INT 22
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: PUSH
1078: LD_INT 30
1080: PUSH
1081: LD_INT 19
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: PPUSH
1092: CALL_OW 69
1096: AND
1097: PUSH
1098: LD_INT 22
1100: PUSH
1101: LD_INT 1
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 30
1110: PUSH
1111: LD_INT 16
1113: PUSH
1114: EMPTY
1115: LIST
1116: LIST
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: PPUSH
1122: CALL_OW 69
1126: AND
1127: PUSH
1128: LD_INT 22
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: LD_INT 30
1140: PUSH
1141: LD_INT 17
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 69
1156: AND
1157: PUSH
1158: LD_INT 22
1160: PUSH
1161: LD_INT 1
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: PUSH
1168: LD_INT 30
1170: PUSH
1171: LD_INT 21
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: PPUSH
1182: CALL_OW 69
1186: AND
1187: PUSH
1188: LD_INT 22
1190: PUSH
1191: LD_INT 1
1193: PUSH
1194: EMPTY
1195: LIST
1196: LIST
1197: PUSH
1198: LD_INT 30
1200: PUSH
1201: LD_INT 29
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PPUSH
1212: CALL_OW 69
1216: AND
1217: PUSH
1218: LD_INT 22
1220: PUSH
1221: LD_INT 1
1223: PUSH
1224: EMPTY
1225: LIST
1226: LIST
1227: PUSH
1228: LD_INT 30
1230: PUSH
1231: LD_INT 30
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: PUSH
1238: EMPTY
1239: LIST
1240: LIST
1241: PPUSH
1242: CALL_OW 69
1246: AND
1247: PUSH
1248: LD_INT 22
1250: PUSH
1251: LD_INT 1
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: PUSH
1258: LD_INT 30
1260: PUSH
1261: LD_INT 27
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: PUSH
1268: EMPTY
1269: LIST
1270: LIST
1271: PPUSH
1272: CALL_OW 69
1276: AND
1277: PUSH
1278: LD_INT 22
1280: PUSH
1281: LD_INT 1
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: PUSH
1288: LD_INT 30
1290: PUSH
1291: LD_INT 26
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PPUSH
1302: CALL_OW 69
1306: AND
1307: PUSH
1308: LD_INT 22
1310: PUSH
1311: LD_INT 1
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: PUSH
1318: LD_INT 30
1320: PUSH
1321: LD_INT 28
1323: PUSH
1324: EMPTY
1325: LIST
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PPUSH
1332: CALL_OW 69
1336: AND
1337: IFFALSE 1349
1339: GO 1341
1341: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1342: LD_STRING ACH_ARCH
1344: PPUSH
1345: CALL_OW 543
1349: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
1350: LD_INT 0
1352: PPUSH
1353: PPUSH
1354: PPUSH
1355: PPUSH
1356: PPUSH
1357: PPUSH
// uc_side = 1 ;
1358: LD_ADDR_OWVAR 20
1362: PUSH
1363: LD_INT 1
1365: ST_TO_ADDR
// uc_nation = 1 ;
1366: LD_ADDR_OWVAR 21
1370: PUSH
1371: LD_INT 1
1373: ST_TO_ADDR
// count = 0 ;
1374: LD_ADDR_VAR 0 6
1378: PUSH
1379: LD_INT 0
1381: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
1382: LD_ADDR_EXP 1
1386: PUSH
1387: LD_STRING 10_JMM
1389: PPUSH
1390: LD_INT 1
1392: PPUSH
1393: CALL 10367 0 2
1397: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
1398: LD_ADDR_EXP 20
1402: PUSH
1403: LD_EXP 20
1407: PUSH
1408: LD_EXP 1
1412: ADD
1413: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
1414: LD_ADDR_EXP 10
1418: PUSH
1419: LD_STRING 10_Gary
1421: PPUSH
1422: LD_INT 1
1424: PPUSH
1425: CALL 10367 0 2
1429: ST_TO_ADDR
// if Gary then
1430: LD_EXP 10
1434: IFFALSE 1452
// JMMSquad = JMMSquad ^ Gary ;
1436: LD_ADDR_EXP 20
1440: PUSH
1441: LD_EXP 20
1445: PUSH
1446: LD_EXP 10
1450: ADD
1451: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
1452: LD_ADDR_EXP 5
1456: PUSH
1457: LD_STRING 10_Cyrus
1459: PPUSH
1460: LD_INT 1
1462: PPUSH
1463: CALL 10367 0 2
1467: ST_TO_ADDR
// if Cyrus then
1468: LD_EXP 5
1472: IFFALSE 1490
// JMMSquad = JMMSquad ^ Cyrus ;
1474: LD_ADDR_EXP 20
1478: PUSH
1479: LD_EXP 20
1483: PUSH
1484: LD_EXP 5
1488: ADD
1489: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
1490: LD_ADDR_EXP 4
1494: PUSH
1495: LD_STRING 10_Bobby
1497: PPUSH
1498: LD_INT 1
1500: PPUSH
1501: CALL 10367 0 2
1505: ST_TO_ADDR
// if Bobby then
1506: LD_EXP 4
1510: IFFALSE 1528
// JMMSquad = JMMSquad ^ Bobby ;
1512: LD_ADDR_EXP 20
1516: PUSH
1517: LD_EXP 20
1521: PUSH
1522: LD_EXP 4
1526: ADD
1527: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
1528: LD_ADDR_EXP 6
1532: PUSH
1533: LD_STRING 10_Lisa
1535: PPUSH
1536: LD_INT 1
1538: PPUSH
1539: CALL 10367 0 2
1543: ST_TO_ADDR
// if Lisa then
1544: LD_EXP 6
1548: IFFALSE 1566
// JMMSquad = JMMSquad ^ Lisa ;
1550: LD_ADDR_EXP 20
1554: PUSH
1555: LD_EXP 20
1559: PUSH
1560: LD_EXP 6
1564: ADD
1565: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
1566: LD_ADDR_EXP 2
1570: PUSH
1571: LD_STRING 10_Brown
1573: PPUSH
1574: LD_INT 1
1576: PPUSH
1577: CALL 10367 0 2
1581: ST_TO_ADDR
// if Brown then
1582: LD_EXP 2
1586: IFFALSE 1604
// JMMSquad = JMMSquad ^ Brown ;
1588: LD_ADDR_EXP 20
1592: PUSH
1593: LD_EXP 20
1597: PUSH
1598: LD_EXP 2
1602: ADD
1603: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
1604: LD_ADDR_EXP 3
1608: PUSH
1609: LD_STRING 10_Donaldson
1611: PPUSH
1612: LD_INT 1
1614: PPUSH
1615: CALL 10367 0 2
1619: ST_TO_ADDR
// if Donaldson then
1620: LD_EXP 3
1624: IFFALSE 1642
// JMMSquad = JMMSquad ^ Donaldson ;
1626: LD_ADDR_EXP 20
1630: PUSH
1631: LD_EXP 20
1635: PUSH
1636: LD_EXP 3
1640: ADD
1641: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
1642: LD_ADDR_EXP 7
1646: PUSH
1647: LD_STRING 10_Frank
1649: PPUSH
1650: LD_INT 1
1652: PPUSH
1653: CALL 10367 0 2
1657: ST_TO_ADDR
// if Frank then
1658: LD_EXP 7
1662: IFFALSE 1680
// JMMSquad = JMMSquad ^ Frank ;
1664: LD_ADDR_EXP 20
1668: PUSH
1669: LD_EXP 20
1673: PUSH
1674: LD_EXP 7
1678: ADD
1679: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
1680: LD_ADDR_EXP 9
1684: PUSH
1685: LD_STRING 10_Houten
1687: PPUSH
1688: LD_INT 1
1690: PPUSH
1691: CALL 10367 0 2
1695: ST_TO_ADDR
// if Houten then
1696: LD_EXP 9
1700: IFFALSE 1718
// JMMSquad = JMMSquad ^ Houten ;
1702: LD_ADDR_EXP 20
1706: PUSH
1707: LD_EXP 20
1711: PUSH
1712: LD_EXP 9
1716: ADD
1717: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1718: LD_ADDR_EXP 21
1722: PUSH
1723: LD_STRING OthersIn10
1725: PPUSH
1726: CALL_OW 31
1730: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1731: LD_ADDR_EXP 24
1735: PUSH
1736: LD_STRING Powell
1738: PPUSH
1739: LD_INT 0
1741: PPUSH
1742: CALL 10367 0 2
1746: ST_TO_ADDR
// for i in JMMSquad do
1747: LD_ADDR_VAR 0 2
1751: PUSH
1752: LD_EXP 20
1756: PUSH
1757: FOR_IN
1758: IFFALSE 2017
// begin if count < 3 then
1760: LD_VAR 0 6
1764: PUSH
1765: LD_INT 3
1767: LESS
1768: IFFALSE 1885
// begin vc_engine = 1 ;
1770: LD_ADDR_OWVAR 39
1774: PUSH
1775: LD_INT 1
1777: ST_TO_ADDR
// vc_control = 1 ;
1778: LD_ADDR_OWVAR 38
1782: PUSH
1783: LD_INT 1
1785: ST_TO_ADDR
// vc_weapon = 12 ;
1786: LD_ADDR_OWVAR 40
1790: PUSH
1791: LD_INT 12
1793: ST_TO_ADDR
// vc_chassis = 3 ;
1794: LD_ADDR_OWVAR 37
1798: PUSH
1799: LD_INT 3
1801: ST_TO_ADDR
// veh = CreateVehicle ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: CALL_OW 45
1811: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1812: LD_VAR 0 4
1816: PPUSH
1817: LD_INT 1
1819: PPUSH
1820: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1824: LD_VAR 0 4
1828: PPUSH
1829: LD_INT 2
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// if count mod 2 = 0 then
1839: LD_VAR 0 6
1843: PUSH
1844: LD_INT 2
1846: MOD
1847: PUSH
1848: LD_INT 0
1850: EQUAL
1851: IFFALSE 1870
// AddCargo ( veh , 1 , 100 ) else
1853: LD_VAR 0 4
1857: PPUSH
1858: LD_INT 1
1860: PPUSH
1861: LD_INT 100
1863: PPUSH
1864: CALL_OW 291
1868: GO 1885
// AddCargo ( veh , 3 , 100 ) end ;
1870: LD_VAR 0 4
1874: PPUSH
1875: LD_INT 3
1877: PPUSH
1878: LD_INT 100
1880: PPUSH
1881: CALL_OW 291
// if count >= 3 then
1885: LD_VAR 0 6
1889: PUSH
1890: LD_INT 3
1892: GREATEREQUAL
1893: IFFALSE 1987
// begin vc_engine = 1 ;
1895: LD_ADDR_OWVAR 39
1899: PUSH
1900: LD_INT 1
1902: ST_TO_ADDR
// vc_control = 1 ;
1903: LD_ADDR_OWVAR 38
1907: PUSH
1908: LD_INT 1
1910: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1911: LD_ADDR_OWVAR 40
1915: PUSH
1916: LD_INT 3
1918: PUSH
1919: LD_INT 4
1921: PUSH
1922: LD_INT 5
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: LIST
1929: PUSH
1930: LD_INT 1
1932: PPUSH
1933: LD_INT 3
1935: PPUSH
1936: CALL_OW 12
1940: ARRAY
1941: ST_TO_ADDR
// vc_chassis = 3 ;
1942: LD_ADDR_OWVAR 37
1946: PUSH
1947: LD_INT 3
1949: ST_TO_ADDR
// veh = CreateVehicle ;
1950: LD_ADDR_VAR 0 4
1954: PUSH
1955: CALL_OW 45
1959: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1960: LD_VAR 0 4
1964: PPUSH
1965: LD_INT 1
1967: PPUSH
1968: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1972: LD_VAR 0 4
1976: PPUSH
1977: LD_INT 2
1979: PPUSH
1980: LD_INT 0
1982: PPUSH
1983: CALL_OW 49
// end ; count = count + 1 ;
1987: LD_ADDR_VAR 0 6
1991: PUSH
1992: LD_VAR 0 6
1996: PUSH
1997: LD_INT 1
1999: PLUS
2000: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2001: LD_VAR 0 2
2005: PPUSH
2006: LD_VAR 0 4
2010: PPUSH
2011: CALL_OW 52
// end ;
2015: GO 1757
2017: POP
2018: POP
// for i in others10 do
2019: LD_ADDR_VAR 0 2
2023: PUSH
2024: LD_EXP 21
2028: PUSH
2029: FOR_IN
2030: IFFALSE 2156
// begin vc_engine = 1 ;
2032: LD_ADDR_OWVAR 39
2036: PUSH
2037: LD_INT 1
2039: ST_TO_ADDR
// vc_control = 1 ;
2040: LD_ADDR_OWVAR 38
2044: PUSH
2045: LD_INT 1
2047: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2048: LD_ADDR_OWVAR 40
2052: PUSH
2053: LD_INT 3
2055: PUSH
2056: LD_INT 4
2058: PUSH
2059: LD_INT 5
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: LIST
2066: PUSH
2067: LD_INT 1
2069: PPUSH
2070: LD_INT 3
2072: PPUSH
2073: CALL_OW 12
2077: ARRAY
2078: ST_TO_ADDR
// vc_chassis = 3 ;
2079: LD_ADDR_OWVAR 37
2083: PUSH
2084: LD_INT 3
2086: ST_TO_ADDR
// veh = CreateVehicle ;
2087: LD_ADDR_VAR 0 4
2091: PUSH
2092: CALL_OW 45
2096: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2097: LD_VAR 0 4
2101: PPUSH
2102: LD_INT 1
2104: PPUSH
2105: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2109: LD_VAR 0 4
2113: PPUSH
2114: LD_INT 2
2116: PPUSH
2117: LD_INT 0
2119: PPUSH
2120: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2124: LD_ADDR_EXP 28
2128: PUSH
2129: LD_EXP 28
2133: PUSH
2134: LD_VAR 0 4
2138: ADD
2139: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2140: LD_VAR 0 2
2144: PPUSH
2145: LD_VAR 0 4
2149: PPUSH
2150: CALL_OW 52
// end ;
2154: GO 2029
2156: POP
2157: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
2158: LD_INT 22
2160: PUSH
2161: LD_INT 1
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: PUSH
2168: LD_INT 21
2170: PUSH
2171: LD_INT 1
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: PPUSH
2182: CALL_OW 69
2186: PPUSH
2187: LD_INT 1
2189: PPUSH
2190: CALL_OW 336
// end ;
2194: LD_VAR 0 1
2198: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
2199: LD_INT 0
2201: PPUSH
2202: PPUSH
2203: PPUSH
2204: PPUSH
2205: PPUSH
// uc_side = 1 ;
2206: LD_ADDR_OWVAR 20
2210: PUSH
2211: LD_INT 1
2213: ST_TO_ADDR
// uc_nation = 1 ;
2214: LD_ADDR_OWVAR 21
2218: PUSH
2219: LD_INT 1
2221: ST_TO_ADDR
// for i := 1 to 10 do
2222: LD_ADDR_VAR 0 2
2226: PUSH
2227: DOUBLE
2228: LD_INT 1
2230: DEC
2231: ST_TO_ADDR
2232: LD_INT 10
2234: PUSH
2235: FOR_TO
2236: IFFALSE 2418
// begin vc_engine = 1 ;
2238: LD_ADDR_OWVAR 39
2242: PUSH
2243: LD_INT 1
2245: ST_TO_ADDR
// vc_control = 1 ;
2246: LD_ADDR_OWVAR 38
2250: PUSH
2251: LD_INT 1
2253: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2254: LD_ADDR_OWVAR 40
2258: PUSH
2259: LD_INT 3
2261: PUSH
2262: LD_INT 4
2264: PUSH
2265: LD_INT 5
2267: PUSH
2268: LD_INT 12
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: PUSH
2277: LD_INT 1
2279: PPUSH
2280: LD_INT 4
2282: PPUSH
2283: CALL_OW 12
2287: ARRAY
2288: ST_TO_ADDR
// vc_chassis = 3 ;
2289: LD_ADDR_OWVAR 37
2293: PUSH
2294: LD_INT 3
2296: ST_TO_ADDR
// veh = CreateVehicle ;
2297: LD_ADDR_VAR 0 3
2301: PUSH
2302: CALL_OW 45
2306: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2307: LD_VAR 0 3
2311: PPUSH
2312: LD_INT 1
2314: PPUSH
2315: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2319: LD_VAR 0 3
2323: PPUSH
2324: LD_INT 2
2326: PPUSH
2327: LD_INT 0
2329: PPUSH
2330: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2334: LD_ADDR_EXP 28
2338: PUSH
2339: LD_EXP 28
2343: PUSH
2344: LD_VAR 0 3
2348: ADD
2349: ST_TO_ADDR
// if vc_weapon = 12 then
2350: LD_OWVAR 40
2354: PUSH
2355: LD_INT 12
2357: EQUAL
2358: IFFALSE 2416
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_INT 5
2367: PPUSH
2368: LD_INT 10
2370: PPUSH
2371: CALL_OW 12
2375: PUSH
2376: LD_INT 10
2378: MUL
2379: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2380: LD_VAR 0 3
2384: PPUSH
2385: LD_INT 1
2387: PUSH
2388: LD_INT 3
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: PUSH
2395: LD_INT 1
2397: PPUSH
2398: LD_INT 2
2400: PPUSH
2401: CALL_OW 12
2405: ARRAY
2406: PPUSH
2407: LD_VAR 0 4
2411: PPUSH
2412: CALL_OW 291
// end ; end ;
2416: GO 2235
2418: POP
2419: POP
// end ;
2420: LD_VAR 0 1
2424: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2425: LD_INT 0
2427: PPUSH
2428: PPUSH
2429: PPUSH
// uc_side = 4 ;
2430: LD_ADDR_OWVAR 20
2434: PUSH
2435: LD_INT 4
2437: ST_TO_ADDR
// uc_nation = 1 ;
2438: LD_ADDR_OWVAR 21
2442: PUSH
2443: LD_INT 1
2445: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
2446: LD_ADDR_EXP 11
2450: PUSH
2451: LD_STRING Simms
2453: PPUSH
2454: LD_INT 0
2456: PPUSH
2457: CALL 10367 0 2
2461: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
2462: LD_ADDR_EXP 12
2466: PUSH
2467: LD_STRING 08_Denis
2469: PPUSH
2470: LD_INT 1
2472: PPUSH
2473: CALL 10367 0 2
2477: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
2478: LD_ADDR_EXP 13
2482: PUSH
2483: LD_STRING 08_Joan
2485: PPUSH
2486: LD_INT 1
2488: PPUSH
2489: CALL 10367 0 2
2493: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2494: LD_STRING 08_Khatam
2496: PPUSH
2497: CALL_OW 28
2501: IFFALSE 2521
// Khatam = PrepareUnit ( 08_Khatam , true ) else
2503: LD_ADDR_EXP 14
2507: PUSH
2508: LD_STRING 08_Khatam
2510: PPUSH
2511: LD_INT 1
2513: PPUSH
2514: CALL 10367 0 2
2518: ST_TO_ADDR
2519: GO 2546
// if TestCharacters ( 03_Khatam ) then
2521: LD_STRING 03_Khatam
2523: PPUSH
2524: CALL_OW 28
2528: IFFALSE 2546
// Khatam = PrepareUnit ( 03_Khatam , true ) ;
2530: LD_ADDR_EXP 14
2534: PUSH
2535: LD_STRING 03_Khatam
2537: PPUSH
2538: LD_INT 1
2540: PPUSH
2541: CALL 10367 0 2
2545: ST_TO_ADDR
// Gladstone = PrepareUnit ( 08_Gladstone , true ) ;
2546: LD_ADDR_EXP 15
2550: PUSH
2551: LD_STRING 08_Gladstone
2553: PPUSH
2554: LD_INT 1
2556: PPUSH
2557: CALL 10367 0 2
2561: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
2562: LD_ADDR_EXP 17
2566: PUSH
2567: LD_STRING DeltaDoctor
2569: PPUSH
2570: LD_INT 1
2572: PPUSH
2573: CALL 10367 0 2
2577: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) = 1 then
2578: LD_STRING 08_Frank
2580: PPUSH
2581: CALL_OW 28
2585: PUSH
2586: LD_INT 1
2588: EQUAL
2589: IFFALSE 2607
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
2591: LD_ADDR_EXP 8
2595: PUSH
2596: LD_STRING Yamoko
2598: PPUSH
2599: LD_INT 1
2601: PPUSH
2602: CALL 10367 0 2
2606: ST_TO_ADDR
// if TestCharacters ( 08_Kikuchi ) then
2607: LD_STRING 08_Kikuchi
2609: PPUSH
2610: CALL_OW 28
2614: IFFALSE 2632
// Kikuchi = PrepareUnit ( 08_Kikuchi , true ) ;
2616: LD_ADDR_EXP 8
2620: PUSH
2621: LD_STRING 08_Kikuchi
2623: PPUSH
2624: LD_INT 1
2626: PPUSH
2627: CALL 10367 0 2
2631: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
2632: LD_ADDR_EXP 22
2636: PUSH
2637: LD_STRING 09_others
2639: PPUSH
2640: CALL_OW 31
2644: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
2645: LD_ADDR_EXP 23
2649: PUSH
2650: LD_STRING 09_apes
2652: PPUSH
2653: CALL_OW 31
2657: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2658: LD_EXP 11
2662: PPUSH
2663: LD_INT 1
2665: PPUSH
2666: LD_INT 0
2668: PPUSH
2669: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2673: LD_EXP 12
2677: PPUSH
2678: LD_INT 1
2680: PPUSH
2681: LD_INT 0
2683: PPUSH
2684: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2688: LD_EXP 13
2692: PPUSH
2693: LD_INT 1
2695: PPUSH
2696: LD_INT 0
2698: PPUSH
2699: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2703: LD_EXP 14
2707: PPUSH
2708: LD_INT 1
2710: PPUSH
2711: LD_INT 0
2713: PPUSH
2714: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2718: LD_EXP 15
2722: PPUSH
2723: LD_INT 1
2725: PPUSH
2726: LD_INT 0
2728: PPUSH
2729: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2733: LD_EXP 17
2737: PPUSH
2738: LD_INT 1
2740: PPUSH
2741: LD_INT 0
2743: PPUSH
2744: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2748: LD_EXP 8
2752: PPUSH
2753: LD_INT 1
2755: PPUSH
2756: LD_INT 0
2758: PPUSH
2759: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2763: LD_EXP 11
2767: PUSH
2768: LD_EXP 14
2772: PUSH
2773: LD_EXP 12
2777: PUSH
2778: LD_EXP 15
2782: PUSH
2783: LD_EXP 17
2787: PUSH
2788: LD_EXP 13
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: LIST
2797: LIST
2798: LIST
2799: LIST
2800: PPUSH
2801: LD_INT 4
2803: PPUSH
2804: CALL_OW 336
// if others09 > 2 then
2808: LD_EXP 22
2812: PUSH
2813: LD_INT 2
2815: GREATER
2816: IFFALSE 2897
// begin for i := 1 to 3 do
2818: LD_ADDR_VAR 0 2
2822: PUSH
2823: DOUBLE
2824: LD_INT 1
2826: DEC
2827: ST_TO_ADDR
2828: LD_INT 3
2830: PUSH
2831: FOR_TO
2832: IFFALSE 2893
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2834: LD_EXP 22
2838: PUSH
2839: LD_VAR 0 2
2843: ARRAY
2844: PPUSH
2845: LD_INT 1
2847: PPUSH
2848: LD_INT 0
2850: PPUSH
2851: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
2855: LD_ADDR_EXP 22
2859: PUSH
2860: LD_EXP 22
2864: PPUSH
2865: LD_INT 1
2867: PPUSH
2868: CALL_OW 3
2872: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
2873: LD_EXP 22
2877: PUSH
2878: LD_VAR 0 2
2882: ARRAY
2883: PPUSH
2884: LD_INT 2
2886: PPUSH
2887: CALL_OW 336
// end ;
2891: GO 2831
2893: POP
2894: POP
// end else
2895: GO 2957
// begin for i in others09 do
2897: LD_ADDR_VAR 0 2
2901: PUSH
2902: LD_EXP 22
2906: PUSH
2907: FOR_IN
2908: IFFALSE 2955
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2910: LD_VAR 0 2
2914: PPUSH
2915: LD_INT 1
2917: PPUSH
2918: LD_INT 0
2920: PPUSH
2921: CALL_OW 49
// others09 = others09 diff i ;
2925: LD_ADDR_EXP 22
2929: PUSH
2930: LD_EXP 22
2934: PUSH
2935: LD_VAR 0 2
2939: DIFF
2940: ST_TO_ADDR
// SetClass ( i , 2 ) ;
2941: LD_VAR 0 2
2945: PPUSH
2946: LD_INT 2
2948: PPUSH
2949: CALL_OW 336
// end ;
2953: GO 2907
2955: POP
2956: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
2957: LD_INT 22
2959: PUSH
2960: LD_INT 4
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PUSH
2967: LD_INT 25
2969: PUSH
2970: LD_INT 2
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: PPUSH
2981: CALL_OW 69
2985: PUSH
2986: LD_INT 0
2988: EQUAL
2989: IFFALSE 3121
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2991: LD_ADDR_VAR 0 3
2995: PUSH
2996: LD_INT 22
2998: PUSH
2999: LD_INT 4
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: LD_INT 25
3008: PUSH
3009: LD_INT 2
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PPUSH
3020: CALL_OW 69
3024: PUSH
3025: LD_EXP 11
3029: PUSH
3030: LD_EXP 14
3034: PUSH
3035: LD_EXP 12
3039: PUSH
3040: LD_EXP 15
3044: PUSH
3045: LD_EXP 17
3049: PUSH
3050: LD_EXP 13
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: LIST
3059: LIST
3060: LIST
3061: LIST
3062: DIFF
3063: ST_TO_ADDR
// if not tmp then
3064: LD_VAR 0 3
3068: NOT
3069: IFFALSE 3105
// begin if Denis then
3071: LD_EXP 12
3075: IFFALSE 3091
// SetClass ( Denis , 2 ) else
3077: LD_EXP 12
3081: PPUSH
3082: LD_INT 2
3084: PPUSH
3085: CALL_OW 336
3089: GO 3103
// SetClass ( DeltaDoctor , 2 ) ;
3091: LD_EXP 17
3095: PPUSH
3096: LD_INT 2
3098: PPUSH
3099: CALL_OW 336
// end else
3103: GO 3121
// begin SetClass ( tmp [ 1 ] , 2 ) ;
3105: LD_VAR 0 3
3109: PUSH
3110: LD_INT 1
3112: ARRAY
3113: PPUSH
3114: LD_INT 2
3116: PPUSH
3117: CALL_OW 336
// end ; end ; for i in ape09 do
3121: LD_ADDR_VAR 0 2
3125: PUSH
3126: LD_EXP 23
3130: PUSH
3131: FOR_IN
3132: IFFALSE 3151
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3134: LD_VAR 0 2
3138: PPUSH
3139: LD_INT 1
3141: PPUSH
3142: LD_INT 0
3144: PPUSH
3145: CALL_OW 49
3149: GO 3131
3151: POP
3152: POP
// uc_side = 4 ;
3153: LD_ADDR_OWVAR 20
3157: PUSH
3158: LD_INT 4
3160: ST_TO_ADDR
// hc_class := 1 ;
3161: LD_ADDR_OWVAR 28
3165: PUSH
3166: LD_INT 1
3168: ST_TO_ADDR
// hc_sex := sex_female ;
3169: LD_ADDR_OWVAR 27
3173: PUSH
3174: LD_INT 2
3176: ST_TO_ADDR
// hc_gallery :=  ;
3177: LD_ADDR_OWVAR 33
3181: PUSH
3182: LD_STRING 
3184: ST_TO_ADDR
// hc_name :=  ;
3185: LD_ADDR_OWVAR 26
3189: PUSH
3190: LD_STRING 
3192: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3193: LD_ADDR_OWVAR 31
3197: PUSH
3198: LD_INT 1
3200: PUSH
3201: LD_INT 7
3203: PUSH
3204: LD_INT 1
3206: PUSH
3207: LD_INT 0
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: ST_TO_ADDR
// AmScout = CreateHuman ;
3216: LD_ADDR_EXP 18
3220: PUSH
3221: CALL_OW 44
3225: ST_TO_ADDR
// end ;
3226: LD_VAR 0 1
3230: RET
// export function PrepareCornell ; begin
3231: LD_INT 0
3233: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3234: LD_INT 4
3236: PPUSH
3237: LD_INT 4
3239: PPUSH
3240: CALL_OW 343
// uc_side = 4 ;
3244: LD_ADDR_OWVAR 20
3248: PUSH
3249: LD_INT 4
3251: ST_TO_ADDR
// uc_nation = 1 ;
3252: LD_ADDR_OWVAR 21
3256: PUSH
3257: LD_INT 1
3259: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
3260: LD_ADDR_EXP 19
3264: PUSH
3265: LD_STRING 03_Cornel
3267: PPUSH
3268: LD_INT 1
3270: PPUSH
3271: CALL 10367 0 2
3275: ST_TO_ADDR
// if not Cornell then
3276: LD_EXP 19
3280: NOT
3281: IFFALSE 3285
// exit ;
3283: GO 3393
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3285: LD_EXP 19
3289: PPUSH
3290: LD_INT 8
3292: PPUSH
3293: LD_INT 0
3295: PPUSH
3296: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3300: LD_EXP 19
3304: PPUSH
3305: LD_INT 350
3307: PPUSH
3308: CALL_OW 234
// if IsInUnit ( JMM ) then
3312: LD_EXP 1
3316: PPUSH
3317: CALL_OW 310
3321: IFFALSE 3364
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3323: LD_EXP 19
3327: PPUSH
3328: LD_EXP 1
3332: PPUSH
3333: CALL_OW 310
3337: PPUSH
3338: CALL_OW 250
3342: PPUSH
3343: LD_EXP 1
3347: PPUSH
3348: CALL_OW 310
3352: PPUSH
3353: CALL_OW 251
3357: PPUSH
3358: CALL_OW 111
3362: GO 3393
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3364: LD_EXP 19
3368: PPUSH
3369: LD_EXP 1
3373: PPUSH
3374: CALL_OW 250
3378: PPUSH
3379: LD_EXP 1
3383: PPUSH
3384: CALL_OW 251
3388: PPUSH
3389: CALL_OW 111
// end ; end_of_file
3393: LD_VAR 0 1
3397: RET
// export function PrepareRussians ; var i , un ; begin
3398: LD_INT 0
3400: PPUSH
3401: PPUSH
3402: PPUSH
// uc_side = 3 ;
3403: LD_ADDR_OWVAR 20
3407: PUSH
3408: LD_INT 3
3410: ST_TO_ADDR
// uc_nation = 3 ;
3411: LD_ADDR_OWVAR 21
3415: PUSH
3416: LD_INT 3
3418: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
3419: LD_ADDR_EXP 25
3423: PUSH
3424: LD_STRING Tsaritsyn
3426: PPUSH
3427: LD_INT 0
3429: PPUSH
3430: CALL 10367 0 2
3434: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3435: LD_EXP 25
3439: PPUSH
3440: LD_INT 3
3442: PPUSH
3443: LD_INT 0
3445: PPUSH
3446: CALL_OW 49
// for i = 1 to 14 do
3450: LD_ADDR_VAR 0 2
3454: PUSH
3455: DOUBLE
3456: LD_INT 1
3458: DEC
3459: ST_TO_ADDR
3460: LD_INT 14
3462: PUSH
3463: FOR_TO
3464: IFFALSE 3550
// begin uc_side = 3 ;
3466: LD_ADDR_OWVAR 20
3470: PUSH
3471: LD_INT 3
3473: ST_TO_ADDR
// uc_nation = 3 ;
3474: LD_ADDR_OWVAR 21
3478: PUSH
3479: LD_INT 3
3481: ST_TO_ADDR
// hc_gallery =  ;
3482: LD_ADDR_OWVAR 33
3486: PUSH
3487: LD_STRING 
3489: ST_TO_ADDR
// hc_name =  ;
3490: LD_ADDR_OWVAR 26
3494: PUSH
3495: LD_STRING 
3497: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3498: LD_INT 0
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: LD_EXP 36
3508: PPUSH
3509: LD_EXP 37
3513: PPUSH
3514: CALL_OW 12
3518: PPUSH
3519: CALL_OW 380
// un = CreateHuman ;
3523: LD_ADDR_VAR 0 3
3527: PUSH
3528: CALL_OW 44
3532: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3533: LD_VAR 0 3
3537: PPUSH
3538: LD_INT 3
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL_OW 49
// end ;
3548: GO 3463
3550: POP
3551: POP
// for i = 1 to 6 do
3552: LD_ADDR_VAR 0 2
3556: PUSH
3557: DOUBLE
3558: LD_INT 1
3560: DEC
3561: ST_TO_ADDR
3562: LD_INT 6
3564: PUSH
3565: FOR_TO
3566: IFFALSE 3652
// begin uc_side = 3 ;
3568: LD_ADDR_OWVAR 20
3572: PUSH
3573: LD_INT 3
3575: ST_TO_ADDR
// uc_nation = 3 ;
3576: LD_ADDR_OWVAR 21
3580: PUSH
3581: LD_INT 3
3583: ST_TO_ADDR
// hc_gallery =  ;
3584: LD_ADDR_OWVAR 33
3588: PUSH
3589: LD_STRING 
3591: ST_TO_ADDR
// hc_name =  ;
3592: LD_ADDR_OWVAR 26
3596: PUSH
3597: LD_STRING 
3599: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3600: LD_INT 0
3602: PPUSH
3603: LD_INT 2
3605: PPUSH
3606: LD_EXP 36
3610: PPUSH
3611: LD_EXP 37
3615: PPUSH
3616: CALL_OW 12
3620: PPUSH
3621: CALL_OW 380
// un = CreateHuman ;
3625: LD_ADDR_VAR 0 3
3629: PUSH
3630: CALL_OW 44
3634: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3635: LD_VAR 0 3
3639: PPUSH
3640: LD_INT 3
3642: PPUSH
3643: LD_INT 0
3645: PPUSH
3646: CALL_OW 49
// end ;
3650: GO 3565
3652: POP
3653: POP
// for i = 1 to 6 do
3654: LD_ADDR_VAR 0 2
3658: PUSH
3659: DOUBLE
3660: LD_INT 1
3662: DEC
3663: ST_TO_ADDR
3664: LD_INT 6
3666: PUSH
3667: FOR_TO
3668: IFFALSE 3754
// begin uc_side = 3 ;
3670: LD_ADDR_OWVAR 20
3674: PUSH
3675: LD_INT 3
3677: ST_TO_ADDR
// uc_nation = 3 ;
3678: LD_ADDR_OWVAR 21
3682: PUSH
3683: LD_INT 3
3685: ST_TO_ADDR
// hc_gallery =  ;
3686: LD_ADDR_OWVAR 33
3690: PUSH
3691: LD_STRING 
3693: ST_TO_ADDR
// hc_name =  ;
3694: LD_ADDR_OWVAR 26
3698: PUSH
3699: LD_STRING 
3701: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3702: LD_INT 0
3704: PPUSH
3705: LD_INT 3
3707: PPUSH
3708: LD_EXP 36
3712: PPUSH
3713: LD_EXP 37
3717: PPUSH
3718: CALL_OW 12
3722: PPUSH
3723: CALL_OW 380
// un = CreateHuman ;
3727: LD_ADDR_VAR 0 3
3731: PUSH
3732: CALL_OW 44
3736: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3737: LD_VAR 0 3
3741: PPUSH
3742: LD_INT 3
3744: PPUSH
3745: LD_INT 0
3747: PPUSH
3748: CALL_OW 49
// end ;
3752: GO 3667
3754: POP
3755: POP
// for i = 1 to 4 do
3756: LD_ADDR_VAR 0 2
3760: PUSH
3761: DOUBLE
3762: LD_INT 1
3764: DEC
3765: ST_TO_ADDR
3766: LD_INT 4
3768: PUSH
3769: FOR_TO
3770: IFFALSE 3856
// begin uc_side = 3 ;
3772: LD_ADDR_OWVAR 20
3776: PUSH
3777: LD_INT 3
3779: ST_TO_ADDR
// uc_nation = 3 ;
3780: LD_ADDR_OWVAR 21
3784: PUSH
3785: LD_INT 3
3787: ST_TO_ADDR
// hc_gallery =  ;
3788: LD_ADDR_OWVAR 33
3792: PUSH
3793: LD_STRING 
3795: ST_TO_ADDR
// hc_name =  ;
3796: LD_ADDR_OWVAR 26
3800: PUSH
3801: LD_STRING 
3803: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3804: LD_INT 0
3806: PPUSH
3807: LD_INT 4
3809: PPUSH
3810: LD_EXP 36
3814: PPUSH
3815: LD_EXP 37
3819: PPUSH
3820: CALL_OW 12
3824: PPUSH
3825: CALL_OW 380
// un = CreateHuman ;
3829: LD_ADDR_VAR 0 3
3833: PUSH
3834: CALL_OW 44
3838: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3839: LD_VAR 0 3
3843: PPUSH
3844: LD_INT 3
3846: PPUSH
3847: LD_INT 0
3849: PPUSH
3850: CALL_OW 49
// end ;
3854: GO 3769
3856: POP
3857: POP
// end ; end_of_file
3858: LD_VAR 0 1
3862: RET
// export function PrepareArabianCommander ; begin
3863: LD_INT 0
3865: PPUSH
// uc_side = 2 ;
3866: LD_ADDR_OWVAR 20
3870: PUSH
3871: LD_INT 2
3873: ST_TO_ADDR
// uc_nation = 2 ;
3874: LD_ADDR_OWVAR 21
3878: PUSH
3879: LD_INT 2
3881: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3882: LD_ADDR_EXP 26
3886: PUSH
3887: LD_STRING Dietrich
3889: PPUSH
3890: CALL_OW 25
3894: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3895: LD_EXP 26
3899: PPUSH
3900: LD_INT 4
3902: PPUSH
3903: LD_INT 0
3905: PPUSH
3906: CALL_OW 49
// end ;
3910: LD_VAR 0 1
3914: RET
// export function PrepareArabian ; var i , un , veh ; begin
3915: LD_INT 0
3917: PPUSH
3918: PPUSH
3919: PPUSH
3920: PPUSH
// uc_side := 2 ;
3921: LD_ADDR_OWVAR 20
3925: PUSH
3926: LD_INT 2
3928: ST_TO_ADDR
// uc_nation := 2 ;
3929: LD_ADDR_OWVAR 21
3933: PUSH
3934: LD_INT 2
3936: ST_TO_ADDR
// if not Ahmed then
3937: LD_EXP 27
3941: NOT
3942: IFFALSE 4010
// begin InitHc ;
3944: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
3948: LD_INT 1
3950: PPUSH
3951: LD_INT 1
3953: PPUSH
3954: LD_EXP 36
3958: PPUSH
3959: LD_EXP 37
3963: PUSH
3964: LD_INT 1
3966: PLUS
3967: PPUSH
3968: CALL_OW 12
3972: PPUSH
3973: CALL_OW 380
// hc_name := Ahmed Abbasid ;
3977: LD_ADDR_OWVAR 26
3981: PUSH
3982: LD_STRING Ahmed Abbasid
3984: ST_TO_ADDR
// Ahmed := CreateHuman ;
3985: LD_ADDR_EXP 27
3989: PUSH
3990: CALL_OW 44
3994: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
3995: LD_EXP 27
3999: PPUSH
4000: LD_INT 4
4002: PPUSH
4003: LD_INT 0
4005: PPUSH
4006: CALL_OW 49
// end ; for i = 1 to 4 do
4010: LD_ADDR_VAR 0 2
4014: PUSH
4015: DOUBLE
4016: LD_INT 1
4018: DEC
4019: ST_TO_ADDR
4020: LD_INT 4
4022: PUSH
4023: FOR_TO
4024: IFFALSE 4110
// begin uc_side = 2 ;
4026: LD_ADDR_OWVAR 20
4030: PUSH
4031: LD_INT 2
4033: ST_TO_ADDR
// uc_nation = 2 ;
4034: LD_ADDR_OWVAR 21
4038: PUSH
4039: LD_INT 2
4041: ST_TO_ADDR
// hc_gallery =  ;
4042: LD_ADDR_OWVAR 33
4046: PUSH
4047: LD_STRING 
4049: ST_TO_ADDR
// hc_name =  ;
4050: LD_ADDR_OWVAR 26
4054: PUSH
4055: LD_STRING 
4057: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4058: LD_INT 0
4060: PPUSH
4061: LD_INT 2
4063: PPUSH
4064: LD_EXP 36
4068: PPUSH
4069: LD_EXP 37
4073: PPUSH
4074: CALL_OW 12
4078: PPUSH
4079: CALL_OW 380
// un = CreateHuman ;
4083: LD_ADDR_VAR 0 3
4087: PUSH
4088: CALL_OW 44
4092: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4093: LD_VAR 0 3
4097: PPUSH
4098: LD_INT 4
4100: PPUSH
4101: LD_INT 0
4103: PPUSH
4104: CALL_OW 49
// end ;
4108: GO 4023
4110: POP
4111: POP
// for i = 1 to 5 do
4112: LD_ADDR_VAR 0 2
4116: PUSH
4117: DOUBLE
4118: LD_INT 1
4120: DEC
4121: ST_TO_ADDR
4122: LD_INT 5
4124: PUSH
4125: FOR_TO
4126: IFFALSE 4212
// begin uc_side = 2 ;
4128: LD_ADDR_OWVAR 20
4132: PUSH
4133: LD_INT 2
4135: ST_TO_ADDR
// uc_nation = 2 ;
4136: LD_ADDR_OWVAR 21
4140: PUSH
4141: LD_INT 2
4143: ST_TO_ADDR
// hc_gallery =  ;
4144: LD_ADDR_OWVAR 33
4148: PUSH
4149: LD_STRING 
4151: ST_TO_ADDR
// hc_name =  ;
4152: LD_ADDR_OWVAR 26
4156: PUSH
4157: LD_STRING 
4159: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4160: LD_INT 0
4162: PPUSH
4163: LD_INT 1
4165: PPUSH
4166: LD_EXP 36
4170: PPUSH
4171: LD_EXP 37
4175: PPUSH
4176: CALL_OW 12
4180: PPUSH
4181: CALL_OW 380
// un = CreateHuman ;
4185: LD_ADDR_VAR 0 3
4189: PUSH
4190: CALL_OW 44
4194: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4195: LD_VAR 0 3
4199: PPUSH
4200: LD_INT 4
4202: PPUSH
4203: LD_INT 0
4205: PPUSH
4206: CALL_OW 49
// end ;
4210: GO 4125
4212: POP
4213: POP
// for i = 1 to 4 do
4214: LD_ADDR_VAR 0 2
4218: PUSH
4219: DOUBLE
4220: LD_INT 1
4222: DEC
4223: ST_TO_ADDR
4224: LD_INT 4
4226: PUSH
4227: FOR_TO
4228: IFFALSE 4314
// begin uc_side = 2 ;
4230: LD_ADDR_OWVAR 20
4234: PUSH
4235: LD_INT 2
4237: ST_TO_ADDR
// uc_nation = 2 ;
4238: LD_ADDR_OWVAR 21
4242: PUSH
4243: LD_INT 2
4245: ST_TO_ADDR
// hc_gallery =  ;
4246: LD_ADDR_OWVAR 33
4250: PUSH
4251: LD_STRING 
4253: ST_TO_ADDR
// hc_name =  ;
4254: LD_ADDR_OWVAR 26
4258: PUSH
4259: LD_STRING 
4261: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4262: LD_INT 0
4264: PPUSH
4265: LD_INT 4
4267: PPUSH
4268: LD_EXP 36
4272: PPUSH
4273: LD_EXP 37
4277: PPUSH
4278: CALL_OW 12
4282: PPUSH
4283: CALL_OW 380
// un = CreateHuman ;
4287: LD_ADDR_VAR 0 3
4291: PUSH
4292: CALL_OW 44
4296: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4297: LD_VAR 0 3
4301: PPUSH
4302: LD_INT 4
4304: PPUSH
4305: LD_INT 0
4307: PPUSH
4308: CALL_OW 49
// end ;
4312: GO 4227
4314: POP
4315: POP
// for i = 1 to 2 do
4316: LD_ADDR_VAR 0 2
4320: PUSH
4321: DOUBLE
4322: LD_INT 1
4324: DEC
4325: ST_TO_ADDR
4326: LD_INT 2
4328: PUSH
4329: FOR_TO
4330: IFFALSE 4460
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4332: LD_ADDR_VAR 0 4
4336: PUSH
4337: LD_INT 22
4339: PUSH
4340: LD_INT 2
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: PUSH
4347: LD_INT 21
4349: PUSH
4350: LD_INT 2
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PUSH
4357: LD_INT 58
4359: PUSH
4360: EMPTY
4361: LIST
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: LIST
4367: PPUSH
4368: CALL_OW 69
4372: ST_TO_ADDR
// uc_side = 2 ;
4373: LD_ADDR_OWVAR 20
4377: PUSH
4378: LD_INT 2
4380: ST_TO_ADDR
// uc_nation = 2 ;
4381: LD_ADDR_OWVAR 21
4385: PUSH
4386: LD_INT 2
4388: ST_TO_ADDR
// hc_gallery =  ;
4389: LD_ADDR_OWVAR 33
4393: PUSH
4394: LD_STRING 
4396: ST_TO_ADDR
// hc_name =  ;
4397: LD_ADDR_OWVAR 26
4401: PUSH
4402: LD_STRING 
4404: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4405: LD_INT 0
4407: PPUSH
4408: LD_INT 3
4410: PPUSH
4411: LD_EXP 36
4415: PPUSH
4416: LD_EXP 37
4420: PPUSH
4421: CALL_OW 12
4425: PPUSH
4426: CALL_OW 380
// un = CreateHuman ;
4430: LD_ADDR_VAR 0 3
4434: PUSH
4435: CALL_OW 44
4439: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4440: LD_VAR 0 3
4444: PPUSH
4445: LD_VAR 0 4
4449: PUSH
4450: LD_INT 1
4452: ARRAY
4453: PPUSH
4454: CALL_OW 52
// end ;
4458: GO 4329
4460: POP
4461: POP
// end ;
4462: LD_VAR 0 1
4466: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
4467: LD_INT 0
4469: PPUSH
4470: PPUSH
4471: PPUSH
4472: PPUSH
4473: PPUSH
4474: PPUSH
// for i := 1 to 2 do
4475: LD_ADDR_VAR 0 2
4479: PUSH
4480: DOUBLE
4481: LD_INT 1
4483: DEC
4484: ST_TO_ADDR
4485: LD_INT 2
4487: PUSH
4488: FOR_TO
4489: IFFALSE 4615
// begin uc_side = 5 ;
4491: LD_ADDR_OWVAR 20
4495: PUSH
4496: LD_INT 5
4498: ST_TO_ADDR
// uc_nation = 2 ;
4499: LD_ADDR_OWVAR 21
4503: PUSH
4504: LD_INT 2
4506: ST_TO_ADDR
// vc_chassis := 31 ;
4507: LD_ADDR_OWVAR 37
4511: PUSH
4512: LD_INT 31
4514: ST_TO_ADDR
// vc_control := control_rider ;
4515: LD_ADDR_OWVAR 38
4519: PUSH
4520: LD_INT 4
4522: ST_TO_ADDR
// animal := CreateVehicle ;
4523: LD_ADDR_VAR 0 3
4527: PUSH
4528: CALL_OW 45
4532: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
4533: LD_VAR 0 3
4537: PPUSH
4538: LD_INT 7
4540: PPUSH
4541: LD_INT 0
4543: PPUSH
4544: CALL_OW 49
// hc_gallery =  ;
4548: LD_ADDR_OWVAR 33
4552: PUSH
4553: LD_STRING 
4555: ST_TO_ADDR
// hc_name =  ;
4556: LD_ADDR_OWVAR 26
4560: PUSH
4561: LD_STRING 
4563: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4564: LD_INT 0
4566: PPUSH
4567: LD_INT 11
4569: PPUSH
4570: LD_EXP 36
4574: PPUSH
4575: LD_EXP 37
4579: PPUSH
4580: CALL_OW 12
4584: PPUSH
4585: CALL_OW 380
// un = CreateHuman ;
4589: LD_ADDR_VAR 0 4
4593: PUSH
4594: CALL_OW 44
4598: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
4599: LD_VAR 0 4
4603: PPUSH
4604: LD_VAR 0 3
4608: PPUSH
4609: CALL_OW 52
// end ;
4613: GO 4488
4615: POP
4616: POP
// repeat wait ( 0 0$1 ) ;
4617: LD_INT 35
4619: PPUSH
4620: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
4624: LD_ADDR_VAR 0 5
4628: PUSH
4629: LD_INT 22
4631: PUSH
4632: LD_INT 1
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: PPUSH
4639: CALL_OW 69
4643: PPUSH
4644: LD_VAR 0 2
4648: PPUSH
4649: CALL_OW 74
4653: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4654: LD_ADDR_VAR 0 6
4658: PUSH
4659: LD_INT 22
4661: PUSH
4662: LD_INT 1
4664: PUSH
4665: EMPTY
4666: LIST
4667: LIST
4668: PUSH
4669: LD_INT 2
4671: PUSH
4672: LD_INT 59
4674: PUSH
4675: EMPTY
4676: LIST
4677: PUSH
4678: LD_INT 21
4680: PUSH
4681: LD_INT 1
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: PUSH
4688: LD_INT 21
4690: PUSH
4691: LD_INT 2
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: PUSH
4708: EMPTY
4709: LIST
4710: PPUSH
4711: CALL_OW 69
4715: PPUSH
4716: LD_VAR 0 2
4720: PPUSH
4721: CALL_OW 74
4725: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4726: LD_ADDR_VAR 0 2
4730: PUSH
4731: LD_INT 22
4733: PUSH
4734: LD_INT 5
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: PUSH
4741: LD_INT 25
4743: PUSH
4744: LD_INT 11
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PPUSH
4755: CALL_OW 69
4759: PUSH
4760: FOR_IN
4761: IFFALSE 4831
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4763: LD_VAR 0 2
4767: PPUSH
4768: LD_VAR 0 5
4772: PPUSH
4773: CALL_OW 296
4777: PUSH
4778: LD_INT 8
4780: PLUS
4781: PUSH
4782: LD_VAR 0 2
4786: PPUSH
4787: LD_VAR 0 6
4791: PPUSH
4792: CALL_OW 296
4796: LESS
4797: IFFALSE 4815
// ComAttackUnit ( i , target1 ) else
4799: LD_VAR 0 2
4803: PPUSH
4804: LD_VAR 0 5
4808: PPUSH
4809: CALL_OW 115
4813: GO 4829
// ComAttackUnit ( i , target2 ) ;
4815: LD_VAR 0 2
4819: PPUSH
4820: LD_VAR 0 6
4824: PPUSH
4825: CALL_OW 115
// end ;
4829: GO 4760
4831: POP
4832: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
4833: LD_INT 22
4835: PUSH
4836: LD_INT 5
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PUSH
4843: LD_INT 25
4845: PUSH
4846: LD_INT 11
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PPUSH
4857: CALL_OW 69
4861: PUSH
4862: LD_INT 0
4864: EQUAL
4865: PUSH
4866: LD_INT 22
4868: PUSH
4869: LD_INT 1
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: PUSH
4881: LD_INT 0
4883: EQUAL
4884: OR
4885: IFFALSE 4617
// end ; end_of_file
4887: LD_VAR 0 1
4891: RET
// every 1 do
4892: GO 4894
4894: DISABLE
// begin InGameOn ;
4895: CALL_OW 8
// RevealFogArea ( 1 , EpsilonTerrain ) ;
4899: LD_INT 1
4901: PPUSH
4902: LD_INT 19
4904: PPUSH
4905: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
4909: LD_EXP 11
4913: PPUSH
4914: CALL_OW 87
// wait ( 0 0$3 ) ;
4918: LD_INT 105
4920: PPUSH
4921: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
4925: LD_EXP 1
4929: PPUSH
4930: CALL_OW 310
4934: PPUSH
4935: CALL_OW 85
// Wait ( 0 0$1 ) ;
4939: LD_INT 35
4941: PPUSH
4942: CALL_OW 67
// if IsOk ( Gary ) then
4946: LD_EXP 10
4950: PPUSH
4951: CALL_OW 302
4955: IFFALSE 4993
// begin Say ( Gary , D2-Gary-1 ) ;
4957: LD_EXP 10
4961: PPUSH
4962: LD_STRING D2-Gary-1
4964: PPUSH
4965: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
4969: LD_EXP 1
4973: PPUSH
4974: LD_STRING D2-JMM-1
4976: PPUSH
4977: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
4981: LD_EXP 10
4985: PPUSH
4986: LD_STRING D2-Gary-2
4988: PPUSH
4989: CALL_OW 88
// end ; InGameOff ;
4993: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
4997: LD_STRING M1
4999: PPUSH
5000: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
5004: LD_INT 38
5006: PPUSH
5007: LD_INT 1
5009: PPUSH
5010: LD_INT 100
5012: PPUSH
5013: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
5017: LD_INT 47
5019: PPUSH
5020: LD_INT 1
5022: PPUSH
5023: LD_INT 50
5025: PPUSH
5026: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5030: LD_INT 47
5032: PPUSH
5033: LD_INT 3
5035: PPUSH
5036: LD_INT 50
5038: PPUSH
5039: CALL_OW 291
// SaveForQuickRestart ;
5043: CALL_OW 22
// end ;
5047: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var p ;
5048: LD_EXP 1
5052: PPUSH
5053: LD_EXP 11
5057: PPUSH
5058: CALL_OW 296
5062: PUSH
5063: LD_INT 15
5065: LESS
5066: IFFALSE 5644
5068: GO 5070
5070: DISABLE
5071: LD_INT 0
5073: PPUSH
// begin wait ( 0 0$3 ) ;
5074: LD_INT 105
5076: PPUSH
5077: CALL_OW 67
// InGameOn ;
5081: CALL_OW 8
// ComExitVehicle ( JMM ) ;
5085: LD_EXP 1
5089: PPUSH
5090: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5094: LD_EXP 1
5098: PPUSH
5099: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
5103: LD_EXP 1
5107: PPUSH
5108: LD_EXP 11
5112: PPUSH
5113: CALL_OW 179
// p := 15 ;
5117: LD_ADDR_VAR 0 1
5121: PUSH
5122: LD_INT 15
5124: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5125: LD_INT 35
5127: PPUSH
5128: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5132: LD_EXP 11
5136: PUSH
5137: LD_EXP 13
5141: PUSH
5142: LD_EXP 12
5146: PUSH
5147: LD_EXP 14
5151: PUSH
5152: LD_EXP 8
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: LIST
5163: PPUSH
5164: LD_EXP 1
5168: PPUSH
5169: CALL_OW 112
// p := p - 1 ;
5173: LD_ADDR_VAR 0 1
5177: PUSH
5178: LD_VAR 0 1
5182: PUSH
5183: LD_INT 1
5185: MINUS
5186: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
5187: LD_EXP 1
5191: PPUSH
5192: LD_EXP 11
5196: PPUSH
5197: CALL_OW 296
5201: PUSH
5202: LD_INT 5
5204: LESS
5205: PUSH
5206: LD_VAR 0 1
5210: PUSH
5211: LD_INT 0
5213: LESSEQUAL
5214: OR
5215: IFFALSE 5125
// if not IsInUnit ( JMM ) then
5217: LD_EXP 1
5221: PPUSH
5222: CALL_OW 310
5226: NOT
5227: IFFALSE 5243
// ComTurnUnit ( JMM , Simms ) ;
5229: LD_EXP 1
5233: PPUSH
5234: LD_EXP 11
5238: PPUSH
5239: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5243: LD_EXP 11
5247: PUSH
5248: LD_EXP 13
5252: PUSH
5253: LD_EXP 12
5257: PUSH
5258: LD_EXP 14
5262: PUSH
5263: EMPTY
5264: LIST
5265: LIST
5266: LIST
5267: LIST
5268: PPUSH
5269: LD_EXP 1
5273: PPUSH
5274: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5278: LD_EXP 1
5282: PUSH
5283: LD_EXP 11
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: PPUSH
5292: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5296: LD_EXP 11
5300: PPUSH
5301: LD_STRING D2a-Sim-1
5303: PPUSH
5304: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5308: LD_EXP 1
5312: PPUSH
5313: LD_STRING D2a-JMM-1
5315: PPUSH
5316: CALL_OW 88
// if IsOk ( Joan ) then
5320: LD_EXP 13
5324: PPUSH
5325: CALL_OW 302
5329: IFFALSE 5393
// begin if not IsInUnit ( JMM ) then
5331: LD_EXP 1
5335: PPUSH
5336: CALL_OW 310
5340: NOT
5341: IFFALSE 5357
// ComTurnUnit ( JMM , Joan ) ;
5343: LD_EXP 1
5347: PPUSH
5348: LD_EXP 13
5352: PPUSH
5353: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5357: LD_EXP 13
5361: PPUSH
5362: LD_STRING D2b-Joan-1
5364: PPUSH
5365: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5369: LD_EXP 1
5373: PPUSH
5374: LD_STRING D2b-JMM-1
5376: PPUSH
5377: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5381: LD_EXP 13
5385: PPUSH
5386: LD_STRING D2b-Joan-2
5388: PPUSH
5389: CALL_OW 88
// end ; if IsOk ( Denis ) then
5393: LD_EXP 12
5397: PPUSH
5398: CALL_OW 302
5402: IFFALSE 5442
// begin if not IsInUnit ( JMM ) then
5404: LD_EXP 1
5408: PPUSH
5409: CALL_OW 310
5413: NOT
5414: IFFALSE 5430
// ComTurnUnit ( JMM , Denis ) ;
5416: LD_EXP 1
5420: PPUSH
5421: LD_EXP 12
5425: PPUSH
5426: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
5430: LD_EXP 12
5434: PPUSH
5435: LD_STRING D2c-Den-1
5437: PPUSH
5438: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
5442: LD_EXP 8
5446: PPUSH
5447: CALL_OW 302
5451: PUSH
5452: LD_STRING 08_Kikuchi
5454: PPUSH
5455: CALL_OW 28
5459: NOT
5460: AND
5461: IFFALSE 5542
// begin repeat wait ( 0 0$1 ) ;
5463: LD_INT 35
5465: PPUSH
5466: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
5470: LD_EXP 8
5474: PPUSH
5475: LD_EXP 1
5479: PPUSH
5480: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
5484: LD_EXP 1
5488: PPUSH
5489: LD_EXP 8
5493: PPUSH
5494: CALL_OW 296
5498: PUSH
5499: LD_INT 5
5501: LESS
5502: IFFALSE 5463
// if not IsInUnit ( JMM ) then
5504: LD_EXP 1
5508: PPUSH
5509: CALL_OW 310
5513: NOT
5514: IFFALSE 5530
// ComTurnUnit ( JMM , Kikuchi ) ;
5516: LD_EXP 1
5520: PPUSH
5521: LD_EXP 8
5525: PPUSH
5526: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
5530: LD_EXP 8
5534: PPUSH
5535: LD_STRING D3b-Yam-1
5537: PPUSH
5538: CALL_OW 88
// end ; if IsOk ( Khatam ) then
5542: LD_EXP 14
5546: PPUSH
5547: CALL_OW 302
5551: IFFALSE 5603
// begin if not IsInUnit ( JMM ) then
5553: LD_EXP 1
5557: PPUSH
5558: CALL_OW 310
5562: NOT
5563: IFFALSE 5579
// ComTurnUnit ( JMM , Khatam ) ;
5565: LD_EXP 1
5569: PPUSH
5570: LD_EXP 14
5574: PPUSH
5575: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
5579: LD_EXP 1
5583: PPUSH
5584: LD_STRING D2c-JMM-1
5586: PPUSH
5587: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
5591: LD_EXP 14
5595: PPUSH
5596: LD_STRING D2c-Khat-1
5598: PPUSH
5599: CALL_OW 88
// end ; InGameOff ;
5603: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5607: LD_INT 22
5609: PUSH
5610: LD_INT 4
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: PPUSH
5617: CALL_OW 69
5621: PPUSH
5622: LD_INT 1
5624: PPUSH
5625: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
5629: LD_STRING M1a
5631: PPUSH
5632: CALL_OW 337
// joinEpsilon = 1 ;
5636: LD_ADDR_EXP 29
5640: PUSH
5641: LD_INT 1
5643: ST_TO_ADDR
// end ;
5644: PPOPN 1
5646: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do
5647: LD_INT 38
5649: PPUSH
5650: LD_INT 1
5652: PPUSH
5653: CALL_OW 289
5657: PUSH
5658: LD_INT 0
5660: EQUAL
5661: PUSH
5662: LD_INT 47
5664: PPUSH
5665: LD_INT 1
5667: PPUSH
5668: CALL_OW 289
5672: PUSH
5673: LD_INT 0
5675: EQUAL
5676: AND
5677: PUSH
5678: LD_INT 47
5680: PPUSH
5681: LD_INT 2
5683: PPUSH
5684: CALL_OW 289
5688: PUSH
5689: LD_INT 0
5691: EQUAL
5692: AND
5693: IFFALSE 5718
5695: GO 5697
5697: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 62 , 6 ) ;
5698: LD_INT 38
5700: PUSH
5701: LD_INT 47
5703: PUSH
5704: EMPTY
5705: LIST
5706: LIST
5707: PPUSH
5708: LD_INT 62
5710: PPUSH
5711: LD_INT 6
5713: PPUSH
5714: CALL_OW 111
5718: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
5719: LD_EXP 63
5723: PUSH
5724: LD_INT 1
5726: EQUAL
5727: IFFALSE 6859
5729: GO 5731
5731: DISABLE
5732: LD_INT 0
5734: PPUSH
5735: PPUSH
5736: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5737: LD_ADDR_VAR 0 1
5741: PUSH
5742: LD_INT 22
5744: PUSH
5745: LD_INT 1
5747: PUSH
5748: EMPTY
5749: LIST
5750: LIST
5751: PUSH
5752: LD_INT 25
5754: PUSH
5755: LD_INT 4
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: PUSH
5762: LD_INT 26
5764: PUSH
5765: LD_INT 1
5767: PUSH
5768: EMPTY
5769: LIST
5770: LIST
5771: PUSH
5772: EMPTY
5773: LIST
5774: LIST
5775: LIST
5776: PPUSH
5777: CALL_OW 69
5781: PUSH
5782: LD_EXP 1
5786: PUSH
5787: LD_EXP 2
5791: PUSH
5792: LD_EXP 3
5796: PUSH
5797: LD_EXP 4
5801: PUSH
5802: LD_EXP 5
5806: PUSH
5807: LD_EXP 6
5811: PUSH
5812: LD_EXP 7
5816: PUSH
5817: LD_EXP 8
5821: PUSH
5822: LD_EXP 9
5826: PUSH
5827: LD_EXP 10
5831: PUSH
5832: LD_EXP 11
5836: PUSH
5837: LD_EXP 12
5841: PUSH
5842: LD_EXP 13
5846: PUSH
5847: LD_EXP 14
5851: PUSH
5852: LD_EXP 15
5856: PUSH
5857: LD_EXP 16
5861: PUSH
5862: LD_EXP 17
5866: PUSH
5867: LD_EXP 18
5871: PUSH
5872: LD_EXP 19
5876: PUSH
5877: LD_EXP 24
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: DIFF
5904: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5905: LD_ADDR_VAR 0 2
5909: PUSH
5910: LD_INT 22
5912: PUSH
5913: LD_INT 1
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PUSH
5920: LD_INT 26
5922: PUSH
5923: LD_INT 1
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: PUSH
5930: LD_INT 2
5932: PUSH
5933: LD_INT 25
5935: PUSH
5936: LD_INT 1
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: PUSH
5943: LD_INT 25
5945: PUSH
5946: LD_INT 2
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: PUSH
5953: LD_INT 25
5955: PUSH
5956: LD_INT 3
5958: PUSH
5959: EMPTY
5960: LIST
5961: LIST
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: LIST
5973: PPUSH
5974: CALL_OW 69
5978: PUSH
5979: LD_EXP 1
5983: PUSH
5984: LD_EXP 2
5988: PUSH
5989: LD_EXP 3
5993: PUSH
5994: LD_EXP 4
5998: PUSH
5999: LD_EXP 5
6003: PUSH
6004: LD_EXP 6
6008: PUSH
6009: LD_EXP 7
6013: PUSH
6014: LD_EXP 8
6018: PUSH
6019: LD_EXP 9
6023: PUSH
6024: LD_EXP 10
6028: PUSH
6029: LD_EXP 11
6033: PUSH
6034: LD_EXP 12
6038: PUSH
6039: LD_EXP 13
6043: PUSH
6044: LD_EXP 14
6048: PUSH
6049: LD_EXP 15
6053: PUSH
6054: LD_EXP 16
6058: PUSH
6059: LD_EXP 17
6063: PUSH
6064: LD_EXP 18
6068: PUSH
6069: LD_EXP 19
6073: PUSH
6074: LD_EXP 24
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: DIFF
6101: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
6102: LD_EXP 10
6106: PUSH
6107: LD_VAR 0 2
6111: OR
6112: PUSH
6113: LD_EXP 17
6117: PUSH
6118: LD_VAR 0 1
6122: OR
6123: AND
6124: IFFALSE 6343
// begin DialogueOn ;
6126: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
6130: LD_EXP 17
6134: PPUSH
6135: CALL_OW 302
6139: IFFALSE 6155
// Say ( DeltaDoctor , D3-Sci1-1 ) else
6141: LD_EXP 17
6145: PPUSH
6146: LD_STRING D3-Sci1-1
6148: PPUSH
6149: CALL_OW 88
6153: GO 6167
// Say ( tmp1 , D3-Sci1-1 ) ;
6155: LD_VAR 0 1
6159: PPUSH
6160: LD_STRING D3-Sci1-1
6162: PPUSH
6163: CALL_OW 88
// if IsOk ( Gary ) then
6167: LD_EXP 10
6171: PPUSH
6172: CALL_OW 302
6176: IFFALSE 6192
// Say ( Gary , D3-Gary-1 ) else
6178: LD_EXP 10
6182: PPUSH
6183: LD_STRING D3-Gary-1
6185: PPUSH
6186: CALL_OW 88
6190: GO 6204
// Say ( tmp2 , D3-Gary-1 ) ;
6192: LD_VAR 0 2
6196: PPUSH
6197: LD_STRING D3-Gary-1
6199: PPUSH
6200: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6204: LD_EXP 17
6208: PPUSH
6209: CALL_OW 302
6213: IFFALSE 6229
// Say ( DeltaDoctor , D3-Sci1-2 ) else
6215: LD_EXP 17
6219: PPUSH
6220: LD_STRING D3-Sci1-2
6222: PPUSH
6223: CALL_OW 88
6227: GO 6241
// Say ( tmp1 , D3-Sci1-2 ) ;
6229: LD_VAR 0 1
6233: PPUSH
6234: LD_STRING D3-Sci1-2
6236: PPUSH
6237: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6241: LD_EXP 1
6245: PPUSH
6246: LD_STRING D3-JMM-2
6248: PPUSH
6249: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6253: LD_EXP 17
6257: PPUSH
6258: CALL_OW 302
6262: IFFALSE 6278
// Say ( DeltaDoctor , D3-Sci1-3 ) else
6264: LD_EXP 17
6268: PPUSH
6269: LD_STRING D3-Sci1-3
6271: PPUSH
6272: CALL_OW 88
6276: GO 6290
// Say ( tmp1 , D3-Sci1-3 ) ;
6278: LD_VAR 0 1
6282: PPUSH
6283: LD_STRING D3-Sci1-3
6285: PPUSH
6286: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
6290: LD_EXP 1
6294: PPUSH
6295: LD_STRING D3-JMM-3
6297: PPUSH
6298: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6302: LD_EXP 17
6306: PPUSH
6307: CALL_OW 302
6311: IFFALSE 6327
// Say ( DeltaDoctor , D3-Sci1-4 ) else
6313: LD_EXP 17
6317: PPUSH
6318: LD_STRING D3-Sci1-4
6320: PPUSH
6321: CALL_OW 88
6325: GO 6339
// Say ( tmp1 , D3-Sci1-4 ) ;
6327: LD_VAR 0 1
6331: PPUSH
6332: LD_STRING D3-Sci1-4
6334: PPUSH
6335: CALL_OW 88
// DialogueOff ;
6339: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
6343: LD_INT 12
6345: PPUSH
6346: LD_INT 1
6348: PPUSH
6349: LD_INT 1
6351: PPUSH
6352: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
6356: LD_INT 32
6358: PPUSH
6359: LD_INT 1
6361: PPUSH
6362: LD_INT 1
6364: PPUSH
6365: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
6369: LD_INT 12
6371: PPUSH
6372: LD_INT 1
6374: PPUSH
6375: LD_INT 1
6377: PPUSH
6378: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
6382: LD_INT 33
6384: PPUSH
6385: LD_INT 1
6387: PPUSH
6388: LD_INT 1
6390: PPUSH
6391: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
6395: LD_STRING M2
6397: PPUSH
6398: CALL_OW 337
// wait ( 3 3$0 ) ;
6402: LD_INT 6300
6404: PPUSH
6405: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6409: LD_INT 35
6411: PPUSH
6412: CALL_OW 67
// until not InBattle ( 1 ) ;
6416: LD_INT 1
6418: PPUSH
6419: CALL_OW 463
6423: NOT
6424: IFFALSE 6409
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
6426: LD_EXP 11
6430: PPUSH
6431: CALL_OW 302
6435: PUSH
6436: LD_EXP 17
6440: PPUSH
6441: CALL_OW 302
6445: AND
6446: IFFALSE 6615
// begin DialogueOn ;
6448: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6452: LD_EXP 11
6456: PPUSH
6457: LD_STRING D3a-Sim-1
6459: PPUSH
6460: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
6464: LD_EXP 17
6468: PPUSH
6469: LD_STRING D3a-Sci1-1
6471: PPUSH
6472: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6476: LD_EXP 11
6480: PPUSH
6481: LD_STRING D3a-Sim-2
6483: PPUSH
6484: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
6488: LD_EXP 17
6492: PPUSH
6493: LD_STRING D3a-Sci1-2
6495: PPUSH
6496: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6500: LD_EXP 11
6504: PPUSH
6505: LD_STRING D3a-Sim-3
6507: PPUSH
6508: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
6512: LD_EXP 17
6516: PPUSH
6517: LD_STRING D3a-Sci1-3
6519: PPUSH
6520: CALL_OW 88
// if IsOK ( Joan ) then
6524: LD_EXP 13
6528: PPUSH
6529: CALL_OW 302
6533: IFFALSE 6549
// Say ( Simms , D3a-Sim-4 ) else
6535: LD_EXP 11
6539: PPUSH
6540: LD_STRING D3a-Sim-4
6542: PPUSH
6543: CALL_OW 88
6547: GO 6561
// Say ( Simms , D3a-Sim-4a ) ;
6549: LD_EXP 11
6553: PPUSH
6554: LD_STRING D3a-Sim-4a
6556: PPUSH
6557: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
6561: LD_EXP 17
6565: PPUSH
6566: LD_STRING D3a-Sci1-4
6568: PPUSH
6569: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6573: LD_EXP 11
6577: PPUSH
6578: LD_STRING D3a-Sim-5
6580: PPUSH
6581: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
6585: LD_EXP 17
6589: PPUSH
6590: LD_STRING D3a-Sci1-5
6592: PPUSH
6593: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6597: LD_EXP 11
6601: PPUSH
6602: LD_STRING D3a-Sim-6
6604: PPUSH
6605: CALL_OW 88
// DialogueOff ;
6609: CALL_OW 7
// end else
6613: GO 6859
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
6615: LD_ADDR_VAR 0 3
6619: PUSH
6620: LD_INT 22
6622: PUSH
6623: LD_INT 1
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: PUSH
6630: LD_INT 25
6632: PUSH
6633: LD_INT 4
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PPUSH
6644: CALL_OW 69
6648: PUSH
6649: LD_EXP 11
6653: PUSH
6654: LD_EXP 14
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: DIFF
6663: ST_TO_ADDR
// if tmp3 > 0 then
6664: LD_VAR 0 3
6668: PUSH
6669: LD_INT 0
6671: GREATER
6672: IFFALSE 6859
// begin DialogueOn ;
6674: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6678: LD_EXP 11
6682: PPUSH
6683: LD_STRING D3a-Sim-1
6685: PPUSH
6686: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
6690: LD_VAR 0 3
6694: PUSH
6695: LD_INT 1
6697: ARRAY
6698: PPUSH
6699: LD_STRING D3a-Sci1-1
6701: PPUSH
6702: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6706: LD_EXP 11
6710: PPUSH
6711: LD_STRING D3a-Sim-2
6713: PPUSH
6714: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
6718: LD_VAR 0 3
6722: PUSH
6723: LD_INT 1
6725: ARRAY
6726: PPUSH
6727: LD_STRING D3a-Sci1-2
6729: PPUSH
6730: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6734: LD_EXP 11
6738: PPUSH
6739: LD_STRING D3a-Sim-3
6741: PPUSH
6742: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
6746: LD_VAR 0 3
6750: PUSH
6751: LD_INT 1
6753: ARRAY
6754: PPUSH
6755: LD_STRING D3a-Sci1-3
6757: PPUSH
6758: CALL_OW 88
// if IsOK ( Joan ) then
6762: LD_EXP 13
6766: PPUSH
6767: CALL_OW 302
6771: IFFALSE 6787
// Say ( Simms , D3a-Sim-4 ) else
6773: LD_EXP 11
6777: PPUSH
6778: LD_STRING D3a-Sim-4
6780: PPUSH
6781: CALL_OW 88
6785: GO 6799
// Say ( Simms , D3a-Sim-4a ) ;
6787: LD_EXP 11
6791: PPUSH
6792: LD_STRING D3a-Sim-4a
6794: PPUSH
6795: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
6799: LD_VAR 0 3
6803: PUSH
6804: LD_INT 1
6806: ARRAY
6807: PPUSH
6808: LD_STRING D3a-Sci1-4
6810: PPUSH
6811: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6815: LD_EXP 11
6819: PPUSH
6820: LD_STRING D3a-Sim-5
6822: PPUSH
6823: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
6827: LD_VAR 0 3
6831: PUSH
6832: LD_INT 1
6834: ARRAY
6835: PPUSH
6836: LD_STRING D3a-Sci1-5
6838: PPUSH
6839: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6843: LD_EXP 11
6847: PPUSH
6848: LD_STRING D3a-Sim-6
6850: PPUSH
6851: CALL_OW 88
// DialogueOff ;
6855: CALL_OW 7
// end ; end ; end ;
6859: PPOPN 3
6861: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
6862: LD_EXP 29
6866: PUSH
6867: LD_INT 1
6869: EQUAL
6870: IFFALSE 7190
6872: GO 6874
6874: DISABLE
6875: LD_INT 0
6877: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
6878: LD_EXP 18
6882: PPUSH
6883: LD_STRING D4-FSol1-1
6885: PPUSH
6886: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
6890: LD_STRING M3
6892: PPUSH
6893: CALL_OW 337
// PrepareRussians ;
6897: CALL 3398 0 0
// rnd = Rand ( 1 , 100 ) ;
6901: LD_ADDR_VAR 0 1
6905: PUSH
6906: LD_INT 1
6908: PPUSH
6909: LD_INT 100
6911: PPUSH
6912: CALL_OW 12
6916: ST_TO_ADDR
// if difficulty = 1 then
6917: LD_OWVAR 67
6921: PUSH
6922: LD_INT 1
6924: EQUAL
6925: IFFALSE 7008
// begin if rnd > 0 and rnd < 51 then
6927: LD_VAR 0 1
6931: PUSH
6932: LD_INT 0
6934: GREATER
6935: PUSH
6936: LD_VAR 0 1
6940: PUSH
6941: LD_INT 51
6943: LESS
6944: AND
6945: IFFALSE 6954
// BuildRussianBase ( 2 ) ;
6947: LD_INT 2
6949: PPUSH
6950: CALL 11082 0 1
// if rnd > 50 and rnd < 81 then
6954: LD_VAR 0 1
6958: PUSH
6959: LD_INT 50
6961: GREATER
6962: PUSH
6963: LD_VAR 0 1
6967: PUSH
6968: LD_INT 81
6970: LESS
6971: AND
6972: IFFALSE 6981
// BuildRussianBase ( 1 ) ;
6974: LD_INT 1
6976: PPUSH
6977: CALL 11082 0 1
// if rnd > 80 and rnd < 101 then
6981: LD_VAR 0 1
6985: PUSH
6986: LD_INT 80
6988: GREATER
6989: PUSH
6990: LD_VAR 0 1
6994: PUSH
6995: LD_INT 101
6997: LESS
6998: AND
6999: IFFALSE 7008
// BuildRussianBase ( 3 ) ;
7001: LD_INT 3
7003: PPUSH
7004: CALL 11082 0 1
// end ; if difficulty = 2 then
7008: LD_OWVAR 67
7012: PUSH
7013: LD_INT 2
7015: EQUAL
7016: IFFALSE 7099
// begin if rnd > 0 and rnd < 61 then
7018: LD_VAR 0 1
7022: PUSH
7023: LD_INT 0
7025: GREATER
7026: PUSH
7027: LD_VAR 0 1
7031: PUSH
7032: LD_INT 61
7034: LESS
7035: AND
7036: IFFALSE 7045
// BuildRussianBase ( 2 ) ;
7038: LD_INT 2
7040: PPUSH
7041: CALL 11082 0 1
// if rnd > 60 and rnd < 81 then
7045: LD_VAR 0 1
7049: PUSH
7050: LD_INT 60
7052: GREATER
7053: PUSH
7054: LD_VAR 0 1
7058: PUSH
7059: LD_INT 81
7061: LESS
7062: AND
7063: IFFALSE 7072
// BuildRussianBase ( 1 ) ;
7065: LD_INT 1
7067: PPUSH
7068: CALL 11082 0 1
// if rnd > 80 and rnd < 101 then
7072: LD_VAR 0 1
7076: PUSH
7077: LD_INT 80
7079: GREATER
7080: PUSH
7081: LD_VAR 0 1
7085: PUSH
7086: LD_INT 101
7088: LESS
7089: AND
7090: IFFALSE 7099
// BuildRussianBase ( 3 ) ;
7092: LD_INT 3
7094: PPUSH
7095: CALL 11082 0 1
// end ; if difficulty = 3 then
7099: LD_OWVAR 67
7103: PUSH
7104: LD_INT 3
7106: EQUAL
7107: IFFALSE 7190
// begin if rnd > 0 and rnd < 71 then
7109: LD_VAR 0 1
7113: PUSH
7114: LD_INT 0
7116: GREATER
7117: PUSH
7118: LD_VAR 0 1
7122: PUSH
7123: LD_INT 71
7125: LESS
7126: AND
7127: IFFALSE 7136
// BuildRussianBase ( 3 ) ;
7129: LD_INT 3
7131: PPUSH
7132: CALL 11082 0 1
// if rnd > 70 and rnd < 81 then
7136: LD_VAR 0 1
7140: PUSH
7141: LD_INT 70
7143: GREATER
7144: PUSH
7145: LD_VAR 0 1
7149: PUSH
7150: LD_INT 81
7152: LESS
7153: AND
7154: IFFALSE 7163
// BuildRussianBase ( 2 ) ;
7156: LD_INT 2
7158: PPUSH
7159: CALL 11082 0 1
// if rnd > 80 and rnd < 101 then
7163: LD_VAR 0 1
7167: PUSH
7168: LD_INT 80
7170: GREATER
7171: PUSH
7172: LD_VAR 0 1
7176: PUSH
7177: LD_INT 101
7179: LESS
7180: AND
7181: IFFALSE 7190
// BuildRussianBase ( 1 ) ;
7183: LD_INT 1
7185: PPUSH
7186: CALL 11082 0 1
// end ; end ;
7190: PPOPN 1
7192: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
7193: LD_INT 54
7195: PPUSH
7196: LD_INT 1
7198: PPUSH
7199: CALL_OW 321
7203: PUSH
7204: LD_INT 2
7206: EQUAL
7207: PUSH
7208: LD_INT 21
7210: PPUSH
7211: LD_INT 1
7213: PPUSH
7214: CALL_OW 321
7218: PUSH
7219: LD_INT 2
7221: EQUAL
7222: OR
7223: PUSH
7224: LD_INT 22
7226: PPUSH
7227: LD_INT 1
7229: PPUSH
7230: CALL_OW 321
7234: PUSH
7235: LD_INT 2
7237: EQUAL
7238: OR
7239: IFFALSE 7551
7241: GO 7243
7243: DISABLE
7244: LD_INT 0
7246: PPUSH
7247: PPUSH
// begin if IsOk ( DeltaDoctor ) then
7248: LD_EXP 17
7252: PPUSH
7253: CALL_OW 302
7257: IFFALSE 7271
// tmp := DeltaDoctor else
7259: LD_ADDR_VAR 0 2
7263: PUSH
7264: LD_EXP 17
7268: ST_TO_ADDR
7269: GO 7281
// tmp := Denis ;
7271: LD_ADDR_VAR 0 2
7275: PUSH
7276: LD_EXP 12
7280: ST_TO_ADDR
// if tmp then
7281: LD_VAR 0 2
7285: IFFALSE 7379
// begin DialogueOn ;
7287: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
7291: LD_EXP 1
7295: PPUSH
7296: LD_STRING D6-JMM-1
7298: PPUSH
7299: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
7303: LD_VAR 0 2
7307: PPUSH
7308: LD_STRING D6-Sci1-1
7310: PPUSH
7311: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
7315: LD_EXP 1
7319: PPUSH
7320: LD_STRING D6-JMM-2
7322: PPUSH
7323: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
7327: LD_VAR 0 2
7331: PPUSH
7332: LD_STRING D6-Sci1-2
7334: PPUSH
7335: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
7339: LD_EXP 1
7343: PPUSH
7344: LD_STRING D6-JMM-3
7346: PPUSH
7347: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
7351: LD_VAR 0 2
7355: PPUSH
7356: LD_STRING D6-Sci1-3
7358: PPUSH
7359: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
7363: LD_EXP 1
7367: PPUSH
7368: LD_STRING D6-JMM-4
7370: PPUSH
7371: CALL_OW 88
// DialogueOff ;
7375: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
7379: LD_INT 1050
7381: PPUSH
7382: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
7386: LD_EXP 49
7390: PUSH
7391: LD_INT 0
7393: EQUAL
7394: PUSH
7395: LD_EXP 14
7399: PPUSH
7400: CALL_OW 302
7404: AND
7405: IFFALSE 7463
// begin DialogueOn ;
7407: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
7411: LD_EXP 27
7415: PPUSH
7416: LD_STRING D5-Ar1-1
7418: PPUSH
7419: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
7423: LD_EXP 26
7427: PPUSH
7428: LD_STRING D5-Diet-1
7430: PPUSH
7431: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
7435: LD_EXP 27
7439: PPUSH
7440: LD_STRING D5-Ar1-2
7442: PPUSH
7443: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
7447: LD_EXP 26
7451: PPUSH
7452: LD_STRING D5-Diet-2
7454: PPUSH
7455: CALL_OW 88
// DialogueOff ;
7459: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
7463: LD_INT 2100
7465: PUSH
7466: LD_INT 3150
7468: PUSH
7469: LD_INT 4200
7471: PUSH
7472: LD_INT 5250
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 1
7483: PPUSH
7484: LD_INT 4
7486: PPUSH
7487: CALL_OW 12
7491: ARRAY
7492: PPUSH
7493: CALL_OW 67
// if arabianTrait = 0 then
7497: LD_EXP 49
7501: PUSH
7502: LD_INT 0
7504: EQUAL
7505: IFFALSE 7551
// begin arabianTrait = 1 ;
7507: LD_ADDR_EXP 49
7511: PUSH
7512: LD_INT 1
7514: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
7515: LD_INT 2
7517: PPUSH
7518: LD_INT 3
7520: PPUSH
7521: LD_INT 1
7523: PPUSH
7524: LD_INT 1
7526: PPUSH
7527: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
7531: LD_INT 2
7533: PPUSH
7534: LD_INT 6
7536: PPUSH
7537: LD_INT 1
7539: PPUSH
7540: LD_INT 1
7542: PPUSH
7543: CALL_OW 80
// PrepareArabianTrait ;
7547: CALL 7554 0 0
// end ; end ;
7551: PPOPN 2
7553: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian ; begin
7554: LD_INT 0
7556: PPUSH
7557: PPUSH
7558: PPUSH
7559: PPUSH
7560: PPUSH
7561: PPUSH
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) ) ;
7562: LD_INT 22
7564: PUSH
7565: LD_INT 2
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PUSH
7572: LD_INT 25
7574: PUSH
7575: LD_INT 4
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PPUSH
7586: CALL_OW 69
7590: PPUSH
7591: CALL_OW 122
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) ) ;
7595: LD_INT 22
7597: PUSH
7598: LD_INT 2
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PUSH
7605: LD_INT 25
7607: PUSH
7608: LD_INT 3
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PPUSH
7619: CALL_OW 69
7623: PPUSH
7624: CALL_OW 121
// SetClass ( Dietrich , 8 ) ;
7628: LD_EXP 26
7632: PPUSH
7633: LD_INT 8
7635: PPUSH
7636: CALL_OW 336
// wait ( 0 0$3 ) ;
7640: LD_INT 105
7642: PPUSH
7643: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
7647: LD_INT 76
7649: PPUSH
7650: LD_INT 19
7652: PPUSH
7653: CALL_OW 84
// DialogueOn ;
7657: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7661: LD_INT 22
7663: PUSH
7664: LD_INT 1
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PUSH
7671: LD_INT 26
7673: PUSH
7674: LD_INT 1
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: LD_INT 2
7683: PUSH
7684: LD_INT 25
7686: PUSH
7687: LD_INT 1
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: PUSH
7694: LD_INT 25
7696: PUSH
7697: LD_INT 2
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PUSH
7704: LD_INT 25
7706: PUSH
7707: LD_INT 3
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PUSH
7714: LD_INT 25
7716: PUSH
7717: LD_INT 4
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PUSH
7724: LD_INT 25
7726: PUSH
7727: LD_INT 5
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: LIST
7746: PPUSH
7747: CALL_OW 69
7751: PPUSH
7752: LD_STRING D8-Sol1-1
7754: PPUSH
7755: LD_STRING D8-Sol1-1
7757: PPUSH
7758: CALL 10424 0 3
// if IsOK ( DeltaDoctor ) then
7762: LD_EXP 17
7766: PPUSH
7767: CALL_OW 302
7771: IFFALSE 7787
// Say ( DeltaDoctor , D8-Sci1-1 ) else
7773: LD_EXP 17
7777: PPUSH
7778: LD_STRING D8-Sci1-1
7780: PPUSH
7781: CALL_OW 88
7785: GO 7888
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7787: LD_INT 22
7789: PUSH
7790: LD_INT 1
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: PUSH
7797: LD_INT 26
7799: PUSH
7800: LD_INT 1
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: PUSH
7807: LD_INT 2
7809: PUSH
7810: LD_INT 25
7812: PUSH
7813: LD_INT 1
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: PUSH
7820: LD_INT 25
7822: PUSH
7823: LD_INT 2
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: PUSH
7830: LD_INT 25
7832: PUSH
7833: LD_INT 3
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PUSH
7840: LD_INT 25
7842: PUSH
7843: LD_INT 4
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: PUSH
7850: LD_INT 25
7852: PUSH
7853: LD_INT 5
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: PPUSH
7873: CALL_OW 69
7877: PPUSH
7878: LD_STRING D8-Sol1-1
7880: PPUSH
7881: LD_STRING D8-Sol1-1
7883: PPUSH
7884: CALL 10424 0 3
// Say ( JMM , D8-JMM-1 ) ;
7888: LD_EXP 1
7892: PPUSH
7893: LD_STRING D8-JMM-1
7895: PPUSH
7896: CALL_OW 88
// DialogueOff ;
7900: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
7904: LD_INT 2
7906: PPUSH
7907: LD_INT 2
7909: PPUSH
7910: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
7914: LD_INT 1
7916: PPUSH
7917: LD_INT 2
7919: PPUSH
7920: LD_INT 2
7922: PPUSH
7923: LD_INT 1
7925: PPUSH
7926: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7930: LD_INT 3
7932: PPUSH
7933: LD_INT 2
7935: PPUSH
7936: LD_INT 1
7938: PPUSH
7939: LD_INT 1
7941: PPUSH
7942: CALL_OW 80
// SetClass ( Dietrich , 1 ) ;
7946: LD_EXP 26
7950: PPUSH
7951: LD_INT 1
7953: PPUSH
7954: CALL_OW 336
// ChangeMissionObjectives ( M4 ) ;
7958: LD_STRING M4
7960: PPUSH
7961: CALL_OW 337
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
7965: LD_ADDR_VAR 0 5
7969: PUSH
7970: LD_INT 22
7972: PUSH
7973: LD_INT 2
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: PUSH
7980: LD_INT 21
7982: PUSH
7983: LD_INT 1
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PUSH
7990: LD_INT 2
7992: PUSH
7993: LD_INT 25
7995: PUSH
7996: LD_INT 1
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: PUSH
8003: LD_INT 25
8005: PUSH
8006: LD_INT 8
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: PUSH
8013: LD_INT 25
8015: PUSH
8016: LD_INT 15
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: PPUSH
8034: CALL_OW 69
8038: PUSH
8039: LD_EXP 26
8043: PUSH
8044: EMPTY
8045: LIST
8046: DIFF
8047: ST_TO_ADDR
// if IsLive ( Khatam ) then
8048: LD_EXP 14
8052: PPUSH
8053: CALL_OW 300
8057: IFFALSE 8071
// DoNotAttack ( 2 , Khatam ) ;
8059: LD_INT 2
8061: PPUSH
8062: LD_EXP 14
8066: PPUSH
8067: CALL_OW 471
// ComExitBuilding ( arSoldiers ) ;
8071: LD_VAR 0 5
8075: PPUSH
8076: CALL_OW 122
// wait ( 0 0$1 ) ;
8080: LD_INT 35
8082: PPUSH
8083: CALL_OW 67
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
8087: LD_VAR 0 5
8091: PPUSH
8092: LD_INT 84
8094: PPUSH
8095: LD_INT 22
8097: PPUSH
8098: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
8102: LD_VAR 0 5
8106: PPUSH
8107: LD_INT 82
8109: PPUSH
8110: LD_INT 5
8112: PPUSH
8113: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
8117: LD_VAR 0 5
8121: PPUSH
8122: LD_INT 95
8124: PPUSH
8125: LD_INT 12
8127: PPUSH
8128: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
8132: LD_VAR 0 5
8136: PPUSH
8137: LD_INT 102
8139: PPUSH
8140: LD_INT 11
8142: PPUSH
8143: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
8147: LD_VAR 0 5
8151: PPUSH
8152: LD_INT 116
8154: PPUSH
8155: LD_INT 15
8157: PPUSH
8158: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
8162: LD_VAR 0 5
8166: PPUSH
8167: LD_INT 140
8169: PPUSH
8170: LD_INT 25
8172: PPUSH
8173: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
8177: LD_VAR 0 5
8181: PPUSH
8182: LD_INT 160
8184: PPUSH
8185: LD_INT 56
8187: PPUSH
8188: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
8192: LD_VAR 0 5
8196: PPUSH
8197: LD_INT 189
8199: PPUSH
8200: LD_INT 79
8202: PPUSH
8203: CALL_OW 174
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
8207: LD_ADDR_VAR 0 6
8211: PUSH
8212: LD_INT 22
8214: PUSH
8215: LD_INT 2
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 21
8224: PUSH
8225: LD_INT 1
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: LD_INT 2
8234: PUSH
8235: LD_INT 25
8237: PUSH
8238: LD_INT 2
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PUSH
8245: LD_INT 25
8247: PUSH
8248: LD_INT 3
8250: PUSH
8251: EMPTY
8252: LIST
8253: LIST
8254: PUSH
8255: LD_INT 25
8257: PUSH
8258: LD_INT 4
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: PUSH
8265: LD_INT 25
8267: PUSH
8268: LD_INT 12
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PUSH
8275: LD_INT 25
8277: PUSH
8278: LD_INT 16
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: LIST
8297: PPUSH
8298: CALL_OW 69
8302: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
8303: LD_ADDR_VAR 0 6
8307: PUSH
8308: LD_VAR 0 6
8312: PUSH
8313: LD_EXP 26
8317: ADD
8318: ST_TO_ADDR
// wait ( 0 0$10 ) ;
8319: LD_INT 350
8321: PPUSH
8322: CALL_OW 67
// ComExitBuilding ( arCivilian ) ;
8326: LD_VAR 0 6
8330: PPUSH
8331: CALL_OW 122
// wait ( 0 0$1 ) ;
8335: LD_INT 35
8337: PPUSH
8338: CALL_OW 67
// AddComMoveXY ( arCivilian , 81 , 5 ) ;
8342: LD_VAR 0 6
8346: PPUSH
8347: LD_INT 81
8349: PPUSH
8350: LD_INT 5
8352: PPUSH
8353: CALL_OW 171
// AddComMoveXY ( arCivilian , 82 , 5 ) ;
8357: LD_VAR 0 6
8361: PPUSH
8362: LD_INT 82
8364: PPUSH
8365: LD_INT 5
8367: PPUSH
8368: CALL_OW 171
// AddComMoveXY ( arCivilian , 95 , 12 ) ;
8372: LD_VAR 0 6
8376: PPUSH
8377: LD_INT 95
8379: PPUSH
8380: LD_INT 12
8382: PPUSH
8383: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 11 ) ;
8387: LD_VAR 0 6
8391: PPUSH
8392: LD_INT 102
8394: PPUSH
8395: LD_INT 11
8397: PPUSH
8398: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
8402: LD_VAR 0 6
8406: PPUSH
8407: LD_INT 116
8409: PPUSH
8410: LD_INT 15
8412: PPUSH
8413: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
8417: LD_VAR 0 6
8421: PPUSH
8422: LD_INT 140
8424: PPUSH
8425: LD_INT 25
8427: PPUSH
8428: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
8432: LD_VAR 0 6
8436: PPUSH
8437: LD_INT 160
8439: PPUSH
8440: LD_INT 56
8442: PPUSH
8443: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
8447: LD_VAR 0 6
8451: PPUSH
8452: LD_INT 189
8454: PPUSH
8455: LD_INT 79
8457: PPUSH
8458: CALL_OW 171
// arabianAttackersAI = 1 ;
8462: LD_ADDR_EXP 46
8466: PUSH
8467: LD_INT 1
8469: ST_TO_ADDR
// wait ( 0 0$10 ) ;
8470: LD_INT 350
8472: PPUSH
8473: CALL_OW 67
// if IsOk ( Gary ) then
8477: LD_EXP 10
8481: PPUSH
8482: CALL_OW 302
8486: IFFALSE 8500
// Say ( Gary , D8a-Gary-1 ) ;
8488: LD_EXP 10
8492: PPUSH
8493: LD_STRING D8a-Gary-1
8495: PPUSH
8496: CALL_OW 88
// wait ( 0 0$5 ) ;
8500: LD_INT 175
8502: PPUSH
8503: CALL_OW 67
// if IsOK ( Khatam ) then
8507: LD_EXP 14
8511: PPUSH
8512: CALL_OW 302
8516: IFFALSE 9052
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
8518: LD_ADDR_VAR 0 3
8522: PUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 1
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 2
8535: PUSH
8536: LD_INT 25
8538: PUSH
8539: LD_INT 1
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PUSH
8546: LD_INT 25
8548: PUSH
8549: LD_INT 2
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PUSH
8556: LD_INT 25
8558: PUSH
8559: LD_INT 3
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PUSH
8566: LD_INT 25
8568: PUSH
8569: LD_INT 4
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: PUSH
8576: LD_INT 25
8578: PUSH
8579: LD_INT 5
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: LD_INT 25
8588: PUSH
8589: LD_INT 8
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PPUSH
8609: CALL_OW 69
8613: PUSH
8614: LD_EXP 1
8618: PUSH
8619: LD_EXP 2
8623: PUSH
8624: LD_EXP 3
8628: PUSH
8629: LD_EXP 4
8633: PUSH
8634: LD_EXP 5
8638: PUSH
8639: LD_EXP 6
8643: PUSH
8644: LD_EXP 7
8648: PUSH
8649: LD_EXP 8
8653: PUSH
8654: LD_EXP 9
8658: PUSH
8659: LD_EXP 10
8663: PUSH
8664: LD_EXP 11
8668: PUSH
8669: LD_EXP 12
8673: PUSH
8674: LD_EXP 13
8678: PUSH
8679: LD_EXP 14
8683: PUSH
8684: LD_EXP 15
8688: PUSH
8689: LD_EXP 16
8693: PUSH
8694: LD_EXP 17
8698: PUSH
8699: LD_EXP 19
8703: PUSH
8704: LD_EXP 24
8708: PUSH
8709: EMPTY
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: DIFF
8730: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
8731: LD_EXP 14
8735: PPUSH
8736: LD_INT 8
8738: PPUSH
8739: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
8743: LD_EXP 14
8747: PPUSH
8748: CALL_OW 122
// wait ( 0 0$1 ) ;
8752: LD_INT 35
8754: PPUSH
8755: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
8759: LD_EXP 14
8763: PPUSH
8764: CALL_OW 121
// wait ( 0 0$1 ) ;
8768: LD_INT 35
8770: PPUSH
8771: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
8775: LD_EXP 14
8779: PPUSH
8780: LD_INT 7
8782: PPUSH
8783: CALL_OW 113
// if not tmp then
8787: LD_VAR 0 3
8791: NOT
8792: IFFALSE 8796
// exit ;
8794: GO 9052
// DialogueOn ;
8796: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
8800: LD_VAR 0 3
8804: PUSH
8805: LD_INT 1
8807: ARRAY
8808: PPUSH
8809: CALL_OW 258
8813: PUSH
8814: LD_INT 1
8816: EQUAL
8817: IFFALSE 8837
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
8819: LD_VAR 0 3
8823: PUSH
8824: LD_INT 1
8826: ARRAY
8827: PPUSH
8828: LD_STRING D8b-Sol1-1
8830: PPUSH
8831: CALL_OW 88
8835: GO 8853
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
8837: LD_VAR 0 3
8841: PUSH
8842: LD_INT 1
8844: ARRAY
8845: PPUSH
8846: LD_STRING D8b-FSol1-1
8848: PPUSH
8849: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
8853: LD_EXP 14
8857: PPUSH
8858: LD_STRING D8b-Khat-1
8860: PPUSH
8861: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8865: LD_VAR 0 3
8869: PUSH
8870: LD_INT 1
8872: ARRAY
8873: PPUSH
8874: CALL_OW 258
8878: PUSH
8879: LD_INT 1
8881: EQUAL
8882: IFFALSE 8902
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
8884: LD_VAR 0 3
8888: PUSH
8889: LD_INT 1
8891: ARRAY
8892: PPUSH
8893: LD_STRING D8b-Sol1-2
8895: PPUSH
8896: CALL_OW 88
8900: GO 8918
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
8902: LD_VAR 0 3
8906: PUSH
8907: LD_INT 1
8909: ARRAY
8910: PPUSH
8911: LD_STRING D8b-FSol1-2
8913: PPUSH
8914: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
8918: LD_EXP 14
8922: PPUSH
8923: LD_STRING D8b-Khat-2
8925: PPUSH
8926: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8930: LD_VAR 0 3
8934: PUSH
8935: LD_INT 1
8937: ARRAY
8938: PPUSH
8939: CALL_OW 258
8943: PUSH
8944: LD_INT 1
8946: EQUAL
8947: IFFALSE 8967
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
8949: LD_VAR 0 3
8953: PUSH
8954: LD_INT 1
8956: ARRAY
8957: PPUSH
8958: LD_STRING D8b-Sol1-3
8960: PPUSH
8961: CALL_OW 88
8965: GO 8983
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
8967: LD_VAR 0 3
8971: PUSH
8972: LD_INT 1
8974: ARRAY
8975: PPUSH
8976: LD_STRING D8b-FSol1-3
8978: PPUSH
8979: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
8983: LD_EXP 14
8987: PPUSH
8988: LD_STRING D8b-Khat-3
8990: PPUSH
8991: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8995: LD_VAR 0 3
8999: PUSH
9000: LD_INT 1
9002: ARRAY
9003: PPUSH
9004: CALL_OW 258
9008: PUSH
9009: LD_INT 1
9011: EQUAL
9012: IFFALSE 9032
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
9014: LD_VAR 0 3
9018: PUSH
9019: LD_INT 1
9021: ARRAY
9022: PPUSH
9023: LD_STRING D8b-Sol1-4
9025: PPUSH
9026: CALL_OW 88
9030: GO 9048
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
9032: LD_VAR 0 3
9036: PUSH
9037: LD_INT 1
9039: ARRAY
9040: PPUSH
9041: LD_STRING D8b-FSol1-4
9043: PPUSH
9044: CALL_OW 88
// DialogueOff ;
9048: CALL_OW 7
// end ; end ;
9052: LD_VAR 0 1
9056: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
9057: LD_INT 7
9059: PPUSH
9060: LD_INT 22
9062: PUSH
9063: LD_INT 2
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: PPUSH
9070: CALL_OW 70
9074: PUSH
9075: LD_INT 0
9077: GREATER
9078: PUSH
9079: LD_EXP 14
9083: PPUSH
9084: LD_INT 7
9086: PPUSH
9087: CALL_OW 308
9091: OR
9092: IFFALSE 9299
9094: GO 9096
9096: DISABLE
9097: LD_INT 0
9099: PPUSH
// begin enable ;
9100: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
9101: LD_ADDR_VAR 0 1
9105: PUSH
9106: LD_INT 7
9108: PPUSH
9109: LD_INT 22
9111: PUSH
9112: LD_INT 2
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: PPUSH
9119: CALL_OW 70
9123: PUSH
9124: FOR_IN
9125: IFFALSE 9266
// begin if GetClass ( i ) = 4 then
9127: LD_VAR 0 1
9131: PPUSH
9132: CALL_OW 257
9136: PUSH
9137: LD_INT 4
9139: EQUAL
9140: IFFALSE 9152
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
9142: LD_INT 1
9144: PPUSH
9145: LD_STRING 10_ScientistsEscape_1
9147: PPUSH
9148: CALL_OW 39
// if i = Dietrich then
9152: LD_VAR 0 1
9156: PUSH
9157: LD_EXP 26
9161: EQUAL
9162: IFFALSE 9172
// GensherStatus = 1 ;
9164: LD_ADDR_EXP 52
9168: PUSH
9169: LD_INT 1
9171: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
9172: LD_VAR 0 1
9176: PPUSH
9177: CALL_OW 257
9181: PUSH
9182: LD_INT 1
9184: EQUAL
9185: PUSH
9186: LD_VAR 0 1
9190: PPUSH
9191: CALL_OW 257
9195: PUSH
9196: LD_INT 2
9198: EQUAL
9199: OR
9200: PUSH
9201: LD_VAR 0 1
9205: PPUSH
9206: CALL_OW 257
9210: PUSH
9211: LD_INT 3
9213: EQUAL
9214: OR
9215: PUSH
9216: LD_VAR 0 1
9220: PPUSH
9221: CALL_OW 257
9225: PUSH
9226: LD_INT 4
9228: EQUAL
9229: OR
9230: PUSH
9231: LD_VAR 0 1
9235: PPUSH
9236: CALL_OW 257
9240: PUSH
9241: LD_INT 8
9243: EQUAL
9244: OR
9245: IFFALSE 9255
// arabianEscape = 1 ;
9247: LD_ADDR_EXP 47
9251: PUSH
9252: LD_INT 1
9254: ST_TO_ADDR
// RemoveUnit ( i ) ;
9255: LD_VAR 0 1
9259: PPUSH
9260: CALL_OW 64
// end ;
9264: GO 9124
9266: POP
9267: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
9268: LD_EXP 14
9272: PPUSH
9273: LD_INT 7
9275: PPUSH
9276: CALL_OW 308
9280: IFFALSE 9299
// begin KhatamStatus = 1 ;
9282: LD_ADDR_EXP 53
9286: PUSH
9287: LD_INT 1
9289: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
9290: LD_EXP 14
9294: PPUSH
9295: CALL_OW 64
// end ; end ;
9299: PPOPN 1
9301: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
9302: LD_INT 22
9304: PUSH
9305: LD_INT 2
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: PUSH
9312: LD_INT 21
9314: PUSH
9315: LD_INT 1
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PPUSH
9326: CALL_OW 69
9330: PUSH
9331: LD_INT 0
9333: EQUAL
9334: PUSH
9335: LD_INT 22
9337: PUSH
9338: LD_INT 4
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: PUSH
9345: LD_INT 21
9347: PUSH
9348: LD_INT 1
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PPUSH
9359: CALL_OW 69
9363: PUSH
9364: LD_INT 0
9366: EQUAL
9367: AND
9368: IFFALSE 9381
9370: GO 9372
9372: DISABLE
// arabianDefeated = 1 ;
9373: LD_ADDR_EXP 48
9377: PUSH
9378: LD_INT 1
9380: ST_TO_ADDR
9381: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
9382: LD_INT 54
9384: PPUSH
9385: LD_INT 1
9387: PPUSH
9388: CALL_OW 321
9392: PUSH
9393: LD_INT 2
9395: EQUAL
9396: PUSH
9397: LD_INT 55
9399: PPUSH
9400: LD_INT 1
9402: PPUSH
9403: CALL_OW 321
9407: PUSH
9408: LD_INT 2
9410: EQUAL
9411: AND
9412: PUSH
9413: LD_INT 21
9415: PPUSH
9416: LD_INT 1
9418: PPUSH
9419: CALL_OW 321
9423: PUSH
9424: LD_INT 2
9426: EQUAL
9427: AND
9428: PUSH
9429: LD_INT 22
9431: PPUSH
9432: LD_INT 1
9434: PPUSH
9435: CALL_OW 321
9439: PUSH
9440: LD_INT 2
9442: EQUAL
9443: AND
9444: PUSH
9445: LD_INT 12
9447: PPUSH
9448: LD_INT 1
9450: PPUSH
9451: CALL_OW 321
9455: PUSH
9456: LD_INT 2
9458: EQUAL
9459: AND
9460: PUSH
9461: LD_INT 32
9463: PPUSH
9464: LD_INT 1
9466: PPUSH
9467: CALL_OW 321
9471: PUSH
9472: LD_INT 2
9474: EQUAL
9475: AND
9476: PUSH
9477: LD_EXP 61
9481: PUSH
9482: LD_INT 0
9484: EQUAL
9485: AND
9486: PUSH
9487: LD_EXP 49
9491: PUSH
9492: LD_INT 0
9494: EQUAL
9495: AND
9496: PUSH
9497: LD_OWVAR 1
9501: PUSH
9502: LD_INT 31500
9504: GREATEREQUAL
9505: AND
9506: IFFALSE 9523
9508: GO 9510
9510: DISABLE
// begin arabianTrait = 1 ;
9511: LD_ADDR_EXP 49
9515: PUSH
9516: LD_INT 1
9518: ST_TO_ADDR
// PrepareArabianTrait ;
9519: CALL 7554 0 0
// end ;
9523: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
9524: LD_EXP 29
9528: PUSH
9529: LD_STRING 02_mikhailStatus_1
9531: PPUSH
9532: LD_INT 0
9534: PPUSH
9535: CALL_OW 30
9539: PUSH
9540: LD_INT 1
9542: EQUAL
9543: AND
9544: PUSH
9545: LD_INT 22
9547: PUSH
9548: LD_INT 5
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: PPUSH
9555: CALL_OW 69
9559: PUSH
9560: LD_INT 0
9562: EQUAL
9563: AND
9564: PUSH
9565: LD_INT 22
9567: PUSH
9568: LD_INT 2
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: PUSH
9575: LD_INT 21
9577: PUSH
9578: LD_INT 1
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PPUSH
9589: CALL_OW 69
9593: PUSH
9594: LD_INT 0
9596: EQUAL
9597: PUSH
9598: LD_EXP 49
9602: PUSH
9603: LD_INT 0
9605: EQUAL
9606: OR
9607: AND
9608: IFFALSE 9617
9610: GO 9612
9612: DISABLE
// PrepareCornell ;
9613: CALL 3231 0 0
9617: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
9618: LD_INT 22
9620: PUSH
9621: LD_INT 1
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PPUSH
9628: CALL_OW 69
9632: PPUSH
9633: LD_EXP 19
9637: PPUSH
9638: CALL_OW 74
9642: PPUSH
9643: LD_EXP 19
9647: PPUSH
9648: CALL_OW 296
9652: PUSH
9653: LD_INT 9
9655: LESS
9656: IFFALSE 9877
9658: GO 9660
9660: DISABLE
// begin InGameOn ;
9661: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
9665: LD_EXP 19
9669: PPUSH
9670: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
9674: LD_EXP 19
9678: PPUSH
9679: LD_STRING D7-Corn-1
9681: PPUSH
9682: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
9686: LD_INT 22
9688: PUSH
9689: LD_INT 1
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 2
9698: PUSH
9699: LD_INT 25
9701: PUSH
9702: LD_INT 1
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: PUSH
9709: LD_INT 25
9711: PUSH
9712: LD_INT 2
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: PUSH
9719: LD_INT 25
9721: PUSH
9722: LD_INT 3
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: PUSH
9729: LD_INT 25
9731: PUSH
9732: LD_INT 4
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PUSH
9739: LD_INT 25
9741: PUSH
9742: LD_INT 5
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: PPUSH
9761: CALL_OW 69
9765: PPUSH
9766: LD_STRING D7-Sol1-1
9768: PPUSH
9769: LD_STRING D7-FSol1-1
9771: PPUSH
9772: CALL 10424 0 3
// CenterNowOnUnits ( Cornell ) ;
9776: LD_EXP 19
9780: PPUSH
9781: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
9785: LD_EXP 19
9789: PPUSH
9790: LD_STRING D7-Corn-2
9792: PPUSH
9793: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
9797: LD_EXP 1
9801: PPUSH
9802: LD_STRING D7-JMM-2
9804: PPUSH
9805: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
9809: LD_EXP 19
9813: PPUSH
9814: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
9818: LD_EXP 19
9822: PPUSH
9823: LD_STRING D7-Corn-3
9825: PPUSH
9826: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
9830: LD_EXP 19
9834: PPUSH
9835: LD_INT 250
9837: PPUSH
9838: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
9842: LD_EXP 19
9846: PPUSH
9847: LD_INT 1
9849: PPUSH
9850: CALL_OW 235
// wait ( 0 0$1 ) ;
9854: LD_INT 35
9856: PPUSH
9857: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
9861: LD_EXP 1
9865: PPUSH
9866: LD_STRING D7-JMM-3
9868: PPUSH
9869: CALL_OW 88
// InGameOff ;
9873: CALL_OW 9
// end ;
9877: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
9878: LD_EXP 19
9882: PPUSH
9883: CALL_OW 255
9887: PUSH
9888: LD_INT 1
9890: EQUAL
9891: PUSH
9892: LD_EXP 19
9896: PPUSH
9897: CALL_OW 256
9901: PUSH
9902: LD_INT 350
9904: GREATER
9905: AND
9906: IFFALSE 10099
9908: GO 9910
9910: DISABLE
// begin DialogueOn ;
9911: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
9915: LD_EXP 1
9919: PPUSH
9920: LD_STRING D7a-JMM-1
9922: PPUSH
9923: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
9927: LD_EXP 19
9931: PPUSH
9932: LD_STRING D7a-Corn-1
9934: PPUSH
9935: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
9939: LD_EXP 1
9943: PPUSH
9944: LD_STRING D7a-JMM-2
9946: PPUSH
9947: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
9951: LD_EXP 19
9955: PPUSH
9956: LD_STRING D7a-Corn-2
9958: PPUSH
9959: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
9963: LD_EXP 1
9967: PPUSH
9968: LD_STRING D7a-JMM-3
9970: PPUSH
9971: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
9975: LD_EXP 19
9979: PPUSH
9980: LD_STRING D7a-Corn-3
9982: PPUSH
9983: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
9987: LD_EXP 1
9991: PPUSH
9992: LD_STRING D7a-JMM-4
9994: PPUSH
9995: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
9999: LD_EXP 19
10003: PPUSH
10004: LD_STRING D7a-Corn-4
10006: PPUSH
10007: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
10011: LD_EXP 1
10015: PPUSH
10016: LD_STRING D7a-JMM-5
10018: PPUSH
10019: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
10023: LD_EXP 19
10027: PPUSH
10028: LD_STRING D7a-Corn-5
10030: PPUSH
10031: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
10035: LD_EXP 1
10039: PPUSH
10040: LD_STRING D7a-JMM-6
10042: PPUSH
10043: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
10047: LD_EXP 19
10051: PPUSH
10052: LD_STRING D7a-Corn-6
10054: PPUSH
10055: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
10059: LD_EXP 1
10063: PPUSH
10064: LD_STRING D7a-JMM-7
10066: PPUSH
10067: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
10071: LD_EXP 19
10075: PPUSH
10076: LD_STRING D7a-Corn-7
10078: PPUSH
10079: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
10083: LD_EXP 1
10087: PPUSH
10088: LD_STRING D7a-JMM-8
10090: PPUSH
10091: CALL_OW 88
// DialogueOff ;
10095: CALL_OW 7
// end ;
10099: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
10100: LD_EXP 59
10104: PUSH
10105: LD_EXP 1
10109: PPUSH
10110: CALL_OW 302
10114: PUSH
10115: LD_EXP 5
10119: PPUSH
10120: CALL_OW 302
10124: OR
10125: AND
10126: IFFALSE 10216
10128: GO 10130
10130: DISABLE
// begin Wait ( 0 0$2 ) ;
10131: LD_INT 70
10133: PPUSH
10134: CALL_OW 67
// DialogueOn ;
10138: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
10142: LD_EXP 59
10146: PUSH
10147: LD_INT 1
10149: ARRAY
10150: PPUSH
10151: LD_EXP 59
10155: PUSH
10156: LD_INT 2
10158: ARRAY
10159: PPUSH
10160: CALL_OW 86
// if IsOk ( Cyrus ) then
10164: LD_EXP 5
10168: PPUSH
10169: CALL_OW 302
10173: IFFALSE 10189
// Say ( Cyrus , D10-Cyrus-1 ) else
10175: LD_EXP 5
10179: PPUSH
10180: LD_STRING D10-Cyrus-1
10182: PPUSH
10183: CALL_OW 88
10187: GO 10212
// if IsOk ( JMM ) then
10189: LD_EXP 1
10193: PPUSH
10194: CALL_OW 302
10198: IFFALSE 10212
// Say ( JMM , D10-JMM-1 ) ;
10200: LD_EXP 1
10204: PPUSH
10205: LD_STRING D10-JMM-1
10207: PPUSH
10208: CALL_OW 88
// DialogueOff ;
10212: CALL_OW 7
// end ;
10216: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
10217: LD_INT 12
10219: PPUSH
10220: LD_INT 1
10222: PPUSH
10223: CALL_OW 321
10227: PUSH
10228: LD_INT 2
10230: EQUAL
10231: IFFALSE 10243
10233: GO 10235
10235: DISABLE
// ChangeMissionObjectives ( M2b ) ;
10236: LD_STRING M2b
10238: PPUSH
10239: CALL_OW 337
10243: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
10244: LD_INT 32
10246: PPUSH
10247: LD_INT 1
10249: PPUSH
10250: CALL_OW 321
10254: PUSH
10255: LD_INT 2
10257: EQUAL
10258: IFFALSE 10270
10260: GO 10262
10262: DISABLE
// ChangeMissionObjectives ( M2c ) ;
10263: LD_STRING M2c
10265: PPUSH
10266: CALL_OW 337
10270: END
// every 0 0$1 trigger arabianDefeated = 1 do
10271: LD_EXP 48
10275: PUSH
10276: LD_INT 1
10278: EQUAL
10279: IFFALSE 10291
10281: GO 10283
10283: DISABLE
// ChangeMissionObjectives ( M4a ) ;
10284: LD_STRING M4a
10286: PPUSH
10287: CALL_OW 337
10291: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
10292: LD_INT 54
10294: PPUSH
10295: LD_INT 1
10297: PPUSH
10298: CALL_OW 321
10302: PUSH
10303: LD_INT 2
10305: EQUAL
10306: PUSH
10307: LD_INT 55
10309: PPUSH
10310: LD_INT 1
10312: PPUSH
10313: CALL_OW 321
10317: PUSH
10318: LD_INT 2
10320: EQUAL
10321: AND
10322: PUSH
10323: LD_INT 21
10325: PPUSH
10326: LD_INT 1
10328: PPUSH
10329: CALL_OW 321
10333: PUSH
10334: LD_INT 2
10336: EQUAL
10337: AND
10338: PUSH
10339: LD_INT 22
10341: PPUSH
10342: LD_INT 1
10344: PPUSH
10345: CALL_OW 321
10349: PUSH
10350: LD_INT 2
10352: EQUAL
10353: AND
10354: IFFALSE 10366
10356: GO 10358
10358: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
10359: LD_STRING M2a
10361: PPUSH
10362: CALL_OW 337
10366: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
10367: LD_INT 0
10369: PPUSH
10370: PPUSH
// if exist_mode then
10371: LD_VAR 0 2
10375: IFFALSE 10394
// unit := CreateCharacter ( ident ) else
10377: LD_ADDR_VAR 0 4
10381: PUSH
10382: LD_VAR 0 1
10386: PPUSH
10387: CALL_OW 34
10391: ST_TO_ADDR
10392: GO 10409
// unit := NewCharacter ( ident ) ;
10394: LD_ADDR_VAR 0 4
10398: PUSH
10399: LD_VAR 0 1
10403: PPUSH
10404: CALL_OW 25
10408: ST_TO_ADDR
// result := unit ;
10409: LD_ADDR_VAR 0 3
10413: PUSH
10414: LD_VAR 0 4
10418: ST_TO_ADDR
// end ;
10419: LD_VAR 0 3
10423: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
10424: LD_INT 0
10426: PPUSH
10427: PPUSH
10428: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
10429: LD_ADDR_VAR 0 1
10433: PUSH
10434: LD_VAR 0 1
10438: PUSH
10439: LD_EXP 1
10443: PUSH
10444: LD_EXP 2
10448: PUSH
10449: LD_EXP 3
10453: PUSH
10454: LD_EXP 4
10458: PUSH
10459: LD_EXP 5
10463: PUSH
10464: LD_EXP 6
10468: PUSH
10469: LD_EXP 7
10473: PUSH
10474: LD_EXP 8
10478: PUSH
10479: LD_EXP 9
10483: PUSH
10484: LD_EXP 10
10488: PUSH
10489: LD_EXP 11
10493: PUSH
10494: LD_EXP 12
10498: PUSH
10499: LD_EXP 13
10503: PUSH
10504: LD_EXP 14
10508: PUSH
10509: LD_EXP 15
10513: PUSH
10514: LD_EXP 16
10518: PUSH
10519: LD_EXP 17
10523: PUSH
10524: LD_EXP 18
10528: PUSH
10529: LD_EXP 19
10533: PUSH
10534: LD_EXP 24
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: DIFF
10561: ST_TO_ADDR
// if not characters then
10562: LD_VAR 0 1
10566: NOT
10567: IFFALSE 10571
// exit ;
10569: GO 10717
// rnd = rand ( 1 , characters ) ;
10571: LD_ADDR_VAR 0 6
10575: PUSH
10576: LD_INT 1
10578: PPUSH
10579: LD_VAR 0 1
10583: PPUSH
10584: CALL_OW 12
10588: ST_TO_ADDR
// for i = 1 to characters do
10589: LD_ADDR_VAR 0 5
10593: PUSH
10594: DOUBLE
10595: LD_INT 1
10597: DEC
10598: ST_TO_ADDR
10599: LD_VAR 0 1
10603: PUSH
10604: FOR_TO
10605: IFFALSE 10715
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
10607: LD_VAR 0 5
10611: PUSH
10612: LD_VAR 0 6
10616: EQUAL
10617: PUSH
10618: LD_VAR 0 1
10622: PUSH
10623: LD_VAR 0 5
10627: ARRAY
10628: PPUSH
10629: CALL_OW 258
10633: PUSH
10634: LD_INT 1
10636: EQUAL
10637: AND
10638: IFFALSE 10660
// Say ( characters [ i ] , dialogMID ) ;
10640: LD_VAR 0 1
10644: PUSH
10645: LD_VAR 0 5
10649: ARRAY
10650: PPUSH
10651: LD_VAR 0 2
10655: PPUSH
10656: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
10660: LD_VAR 0 5
10664: PUSH
10665: LD_VAR 0 6
10669: EQUAL
10670: PUSH
10671: LD_VAR 0 1
10675: PUSH
10676: LD_VAR 0 5
10680: ARRAY
10681: PPUSH
10682: CALL_OW 258
10686: PUSH
10687: LD_INT 2
10689: EQUAL
10690: AND
10691: IFFALSE 10713
// Say ( characters [ i ] , dialogFID ) ;
10693: LD_VAR 0 1
10697: PUSH
10698: LD_VAR 0 5
10702: ARRAY
10703: PPUSH
10704: LD_VAR 0 3
10708: PPUSH
10709: CALL_OW 88
// end ;
10713: GO 10604
10715: POP
10716: POP
// end ;
10717: LD_VAR 0 4
10721: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
10722: LD_INT 0
10724: PPUSH
10725: PPUSH
// for i in charactersList do
10726: LD_ADDR_VAR 0 4
10730: PUSH
10731: LD_VAR 0 1
10735: PUSH
10736: FOR_IN
10737: IFFALSE 10755
// SaveCharacters ( i , ident ) ;
10739: LD_VAR 0 4
10743: PPUSH
10744: LD_VAR 0 2
10748: PPUSH
10749: CALL_OW 38
10753: GO 10736
10755: POP
10756: POP
// end ;
10757: LD_VAR 0 3
10761: RET
// export function PrepareDifficulty ; begin
10762: LD_INT 0
10764: PPUSH
// if difficulty = 1 then
10765: LD_OWVAR 67
10769: PUSH
10770: LD_INT 1
10772: EQUAL
10773: IFFALSE 10817
// begin RuSolMinLevel = 3 ;
10775: LD_ADDR_EXP 36
10779: PUSH
10780: LD_INT 3
10782: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
10783: LD_ADDR_EXP 37
10787: PUSH
10788: LD_INT 5
10790: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10791: LD_INT 51
10793: PPUSH
10794: LD_INT 6
10796: PPUSH
10797: LD_INT 2
10799: PPUSH
10800: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10804: LD_INT 51
10806: PPUSH
10807: LD_INT 5
10809: PPUSH
10810: LD_INT 2
10812: PPUSH
10813: CALL_OW 322
// end ; if difficulty = 2 then
10817: LD_OWVAR 67
10821: PUSH
10822: LD_INT 2
10824: EQUAL
10825: IFFALSE 10921
// begin RuSolMinLevel = 5 ;
10827: LD_ADDR_EXP 36
10831: PUSH
10832: LD_INT 5
10834: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
10835: LD_ADDR_EXP 37
10839: PUSH
10840: LD_INT 7
10842: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10843: LD_INT 51
10845: PPUSH
10846: LD_INT 6
10848: PPUSH
10849: LD_INT 2
10851: PPUSH
10852: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10856: LD_INT 57
10858: PPUSH
10859: LD_INT 6
10861: PPUSH
10862: LD_INT 2
10864: PPUSH
10865: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10869: LD_INT 63
10871: PPUSH
10872: LD_INT 6
10874: PPUSH
10875: LD_INT 2
10877: PPUSH
10878: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10882: LD_INT 51
10884: PPUSH
10885: LD_INT 5
10887: PPUSH
10888: LD_INT 2
10890: PPUSH
10891: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
10895: LD_INT 5
10897: PPUSH
10898: LD_INT 2
10900: PPUSH
10901: LD_INT 2
10903: PPUSH
10904: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
10908: LD_INT 5
10910: PPUSH
10911: LD_INT 5
10913: PPUSH
10914: LD_INT 2
10916: PPUSH
10917: CALL_OW 322
// end ; if difficulty = 3 then
10921: LD_OWVAR 67
10925: PUSH
10926: LD_INT 3
10928: EQUAL
10929: IFFALSE 11077
// begin RuSolMinLevel = 6 ;
10931: LD_ADDR_EXP 36
10935: PUSH
10936: LD_INT 6
10938: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
10939: LD_ADDR_EXP 37
10943: PUSH
10944: LD_INT 8
10946: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10947: LD_INT 51
10949: PPUSH
10950: LD_INT 6
10952: PPUSH
10953: LD_INT 2
10955: PPUSH
10956: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10960: LD_INT 57
10962: PPUSH
10963: LD_INT 6
10965: PPUSH
10966: LD_INT 2
10968: PPUSH
10969: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
10973: LD_INT 52
10975: PPUSH
10976: LD_INT 6
10978: PPUSH
10979: LD_INT 2
10981: PPUSH
10982: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
10986: LD_INT 58
10988: PPUSH
10989: LD_INT 6
10991: PPUSH
10992: LD_INT 2
10994: PPUSH
10995: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10999: LD_INT 63
11001: PPUSH
11002: LD_INT 6
11004: PPUSH
11005: LD_INT 2
11007: PPUSH
11008: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
11012: LD_INT 64
11014: PPUSH
11015: LD_INT 6
11017: PPUSH
11018: LD_INT 2
11020: PPUSH
11021: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11025: LD_INT 51
11027: PPUSH
11028: LD_INT 5
11030: PPUSH
11031: LD_INT 2
11033: PPUSH
11034: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
11038: LD_INT 52
11040: PPUSH
11041: LD_INT 5
11043: PPUSH
11044: LD_INT 2
11046: PPUSH
11047: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
11051: LD_INT 66
11053: PPUSH
11054: LD_INT 2
11056: PPUSH
11057: LD_INT 2
11059: PPUSH
11060: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
11064: LD_INT 66
11066: PPUSH
11067: LD_INT 5
11069: PPUSH
11070: LD_INT 2
11072: PPUSH
11073: CALL_OW 322
// end ; end ;
11077: LD_VAR 0 1
11081: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
11082: LD_INT 0
11084: PPUSH
11085: PPUSH
11086: PPUSH
11087: PPUSH
11088: PPUSH
11089: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
11090: LD_ADDR_VAR 0 7
11094: PUSH
11095: LD_INT 43
11097: PUSH
11098: LD_INT 68
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: PUSH
11105: LD_INT 43
11107: PUSH
11108: LD_INT 79
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: PUSH
11115: LD_INT 99
11117: PUSH
11118: LD_INT 114
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: PUSH
11125: LD_INT 103
11127: PUSH
11128: LD_INT 114
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: PUSH
11135: LD_INT 156
11137: PUSH
11138: LD_INT 92
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PUSH
11145: LD_INT 152
11147: PUSH
11148: LD_INT 85
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: ST_TO_ADDR
// for i in sources do
11163: LD_ADDR_VAR 0 3
11167: PUSH
11168: LD_VAR 0 7
11172: PUSH
11173: FOR_IN
11174: IFFALSE 11203
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
11176: LD_VAR 0 3
11180: PUSH
11181: LD_INT 1
11183: ARRAY
11184: PPUSH
11185: LD_VAR 0 3
11189: PUSH
11190: LD_INT 2
11192: ARRAY
11193: PPUSH
11194: LD_INT 3
11196: PPUSH
11197: CALL_OW 441
11201: GO 11173
11203: POP
11204: POP
// case position of 1 :
11205: LD_VAR 0 1
11209: PUSH
11210: LD_INT 1
11212: DOUBLE
11213: EQUAL
11214: IFTRUE 11218
11216: GO 11229
11218: POP
// area := westConv ; 2 :
11219: LD_ADDR_VAR 0 6
11223: PUSH
11224: LD_INT 20
11226: ST_TO_ADDR
11227: GO 11268
11229: LD_INT 2
11231: DOUBLE
11232: EQUAL
11233: IFTRUE 11237
11235: GO 11248
11237: POP
// area := midConv ; 3 :
11238: LD_ADDR_VAR 0 6
11242: PUSH
11243: LD_INT 21
11245: ST_TO_ADDR
11246: GO 11268
11248: LD_INT 3
11250: DOUBLE
11251: EQUAL
11252: IFTRUE 11256
11254: GO 11267
11256: POP
// area := eastConv ; end ;
11257: LD_ADDR_VAR 0 6
11261: PUSH
11262: LD_INT 22
11264: ST_TO_ADDR
11265: GO 11268
11267: POP
// area := AreaToList ( area , 0 ) ;
11268: LD_ADDR_VAR 0 6
11272: PUSH
11273: LD_VAR 0 6
11277: PPUSH
11278: LD_INT 0
11280: PPUSH
11281: CALL_OW 517
11285: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
11286: LD_ADDR_VAR 0 3
11290: PUSH
11291: DOUBLE
11292: LD_INT 1
11294: DEC
11295: ST_TO_ADDR
11296: LD_VAR 0 6
11300: PUSH
11301: LD_INT 1
11303: ARRAY
11304: PUSH
11305: FOR_TO
11306: IFFALSE 11387
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
11308: LD_VAR 0 6
11312: PUSH
11313: LD_INT 1
11315: ARRAY
11316: PUSH
11317: LD_VAR 0 3
11321: ARRAY
11322: PPUSH
11323: LD_VAR 0 6
11327: PUSH
11328: LD_INT 2
11330: ARRAY
11331: PUSH
11332: LD_VAR 0 3
11336: ARRAY
11337: PPUSH
11338: LD_INT 1
11340: PPUSH
11341: LD_INT 1
11343: PPUSH
11344: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
11348: LD_VAR 0 6
11352: PUSH
11353: LD_INT 1
11355: ARRAY
11356: PUSH
11357: LD_VAR 0 3
11361: ARRAY
11362: PPUSH
11363: LD_VAR 0 6
11367: PUSH
11368: LD_INT 2
11370: ARRAY
11371: PUSH
11372: LD_VAR 0 3
11376: ARRAY
11377: PPUSH
11378: LD_INT 1
11380: PPUSH
11381: CALL_OW 331
// end ;
11385: GO 11305
11387: POP
11388: POP
// ruPossition = position ;
11389: LD_ADDR_EXP 41
11393: PUSH
11394: LD_VAR 0 1
11398: ST_TO_ADDR
// if position = 1 then
11399: LD_VAR 0 1
11403: PUSH
11404: LD_INT 1
11406: EQUAL
11407: IFFALSE 12155
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11409: LD_ADDR_VAR 0 4
11413: PUSH
11414: LD_INT 22
11416: PUSH
11417: LD_INT 3
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PUSH
11424: LD_INT 25
11426: PUSH
11427: LD_INT 2
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: PPUSH
11438: CALL_OW 69
11442: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
11443: LD_ADDR_VAR 0 5
11447: PUSH
11448: LD_INT 0
11450: PUSH
11451: LD_INT 49
11453: PUSH
11454: LD_INT 74
11456: PUSH
11457: LD_INT 3
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: PUSH
11466: LD_INT 4
11468: PUSH
11469: LD_INT 73
11471: PUSH
11472: LD_INT 88
11474: PUSH
11475: LD_INT 5
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: PUSH
11484: LD_INT 4
11486: PUSH
11487: LD_INT 56
11489: PUSH
11490: LD_INT 62
11492: PUSH
11493: LD_INT 3
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: PUSH
11502: LD_INT 29
11504: PUSH
11505: LD_INT 43
11507: PUSH
11508: LD_INT 68
11510: PUSH
11511: LD_INT 2
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: PUSH
11520: LD_INT 30
11522: PUSH
11523: LD_INT 43
11525: PUSH
11526: LD_INT 79
11528: PUSH
11529: LD_INT 5
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: PUSH
11538: LD_INT 28
11540: PUSH
11541: LD_INT 60
11543: PUSH
11544: LD_INT 75
11546: PUSH
11547: LD_INT 1
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 2
11558: PUSH
11559: LD_INT 50
11561: PUSH
11562: LD_INT 87
11564: PUSH
11565: LD_INT 1
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: PUSH
11574: LD_INT 28
11576: PUSH
11577: LD_INT 45
11579: PUSH
11580: LD_INT 67
11582: PUSH
11583: LD_INT 2
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: PUSH
11592: LD_INT 17
11594: PUSH
11595: LD_INT 47
11597: PUSH
11598: LD_INT 84
11600: PUSH
11601: LD_INT 2
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 18
11612: PUSH
11613: LD_INT 46
11615: PUSH
11616: LD_INT 87
11618: PUSH
11619: LD_INT 1
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: PUSH
11628: LD_INT 28
11630: PUSH
11631: LD_INT 41
11633: PUSH
11634: LD_INT 64
11636: PUSH
11637: LD_INT 5
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: PUSH
11646: LD_INT 32
11648: PUSH
11649: LD_INT 75
11651: PUSH
11652: LD_INT 76
11654: PUSH
11655: LD_INT 5
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: PUSH
11664: LD_INT 32
11666: PUSH
11667: LD_INT 77
11669: PUSH
11670: LD_INT 75
11672: PUSH
11673: LD_INT 5
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: PUSH
11682: LD_INT 32
11684: PUSH
11685: LD_INT 69
11687: PUSH
11688: LD_INT 68
11690: PUSH
11691: LD_INT 3
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: PUSH
11700: LD_INT 32
11702: PUSH
11703: LD_INT 59
11705: PUSH
11706: LD_INT 96
11708: PUSH
11709: LD_INT 5
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: PUSH
11718: LD_INT 32
11720: PUSH
11721: LD_INT 56
11723: PUSH
11724: LD_INT 96
11726: PUSH
11727: LD_INT 0
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: PUSH
11736: LD_INT 32
11738: PUSH
11739: LD_INT 51
11741: PUSH
11742: LD_INT 61
11744: PUSH
11745: LD_INT 3
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: PUSH
11754: LD_INT 32
11756: PUSH
11757: LD_INT 42
11759: PUSH
11760: LD_INT 60
11762: PUSH
11763: LD_INT 3
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 32
11774: PUSH
11775: LD_INT 36
11777: PUSH
11778: LD_INT 58
11780: PUSH
11781: LD_INT 3
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: PUSH
11790: LD_INT 32
11792: PUSH
11793: LD_INT 39
11795: PUSH
11796: LD_INT 59
11798: PUSH
11799: LD_INT 3
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: PUSH
11808: LD_INT 32
11810: PUSH
11811: LD_INT 61
11813: PUSH
11814: LD_INT 64
11816: PUSH
11817: LD_INT 3
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: PUSH
11826: LD_INT 33
11828: PUSH
11829: LD_INT 63
11831: PUSH
11832: LD_INT 90
11834: PUSH
11835: LD_INT 5
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: PUSH
11844: LD_INT 33
11846: PUSH
11847: LD_INT 64
11849: PUSH
11850: LD_INT 88
11852: PUSH
11853: LD_INT 5
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: PUSH
11862: LD_INT 33
11864: PUSH
11865: LD_INT 72
11867: PUSH
11868: LD_INT 82
11870: PUSH
11871: LD_INT 5
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: PUSH
11880: LD_INT 6
11882: PUSH
11883: LD_INT 42
11885: PUSH
11886: LD_INT 74
11888: PUSH
11889: LD_INT 1
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: PUSH
11898: LD_INT 6
11900: PUSH
11901: LD_INT 56
11903: PUSH
11904: LD_INT 77
11906: PUSH
11907: LD_INT 2
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: PUSH
11916: LD_INT 21
11918: PUSH
11919: LD_INT 54
11921: PUSH
11922: LD_INT 91
11924: PUSH
11925: LD_INT 5
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: PUSH
11934: LD_INT 16
11936: PUSH
11937: LD_INT 50
11939: PUSH
11940: LD_INT 83
11942: PUSH
11943: LD_INT 3
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: PUSH
11952: LD_INT 24
11954: PUSH
11955: LD_INT 50
11957: PUSH
11958: LD_INT 90
11960: PUSH
11961: LD_INT 0
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12001: LD_ADDR_VAR 0 3
12005: PUSH
12006: LD_INT 22
12008: PUSH
12009: LD_INT 3
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: PUSH
12016: LD_INT 3
12018: PUSH
12019: LD_INT 25
12021: PUSH
12022: LD_INT 2
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PPUSH
12037: CALL_OW 69
12041: PUSH
12042: FOR_IN
12043: IFFALSE 12062
// AddComAgressiveMove ( i , 53 , 82 ) ;
12045: LD_VAR 0 3
12049: PPUSH
12050: LD_INT 53
12052: PPUSH
12053: LD_INT 82
12055: PPUSH
12056: CALL_OW 174
12060: GO 12042
12062: POP
12063: POP
// for i := 1 to buildingsTab do
12064: LD_ADDR_VAR 0 3
12068: PUSH
12069: DOUBLE
12070: LD_INT 1
12072: DEC
12073: ST_TO_ADDR
12074: LD_VAR 0 5
12078: PUSH
12079: FOR_TO
12080: IFFALSE 12153
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12082: LD_VAR 0 4
12086: PPUSH
12087: LD_VAR 0 5
12091: PUSH
12092: LD_VAR 0 3
12096: ARRAY
12097: PUSH
12098: LD_INT 1
12100: ARRAY
12101: PPUSH
12102: LD_VAR 0 5
12106: PUSH
12107: LD_VAR 0 3
12111: ARRAY
12112: PUSH
12113: LD_INT 2
12115: ARRAY
12116: PPUSH
12117: LD_VAR 0 5
12121: PUSH
12122: LD_VAR 0 3
12126: ARRAY
12127: PUSH
12128: LD_INT 3
12130: ARRAY
12131: PPUSH
12132: LD_VAR 0 5
12136: PUSH
12137: LD_VAR 0 3
12141: ARRAY
12142: PUSH
12143: LD_INT 4
12145: ARRAY
12146: PPUSH
12147: CALL_OW 205
12151: GO 12079
12153: POP
12154: POP
// end ; if position = 2 then
12155: LD_VAR 0 1
12159: PUSH
12160: LD_INT 2
12162: EQUAL
12163: IFFALSE 12778
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12165: LD_ADDR_VAR 0 4
12169: PUSH
12170: LD_INT 22
12172: PUSH
12173: LD_INT 3
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: PUSH
12180: LD_INT 25
12182: PUSH
12183: LD_INT 2
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: PPUSH
12194: CALL_OW 69
12198: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
12199: LD_ADDR_VAR 0 5
12203: PUSH
12204: LD_INT 0
12206: PUSH
12207: LD_INT 104
12209: PUSH
12210: LD_INT 110
12212: PUSH
12213: LD_INT 5
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: PUSH
12222: LD_INT 4
12224: PUSH
12225: LD_INT 98
12227: PUSH
12228: LD_INT 90
12230: PUSH
12231: LD_INT 3
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: PUSH
12240: LD_INT 29
12242: PUSH
12243: LD_INT 103
12245: PUSH
12246: LD_INT 114
12248: PUSH
12249: LD_INT 2
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 30
12260: PUSH
12261: LD_INT 99
12263: PUSH
12264: LD_INT 114
12266: PUSH
12267: LD_INT 3
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: PUSH
12276: LD_INT 28
12278: PUSH
12279: LD_INT 100
12281: PUSH
12282: LD_INT 112
12284: PUSH
12285: LD_INT 1
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: PUSH
12294: LD_INT 2
12296: PUSH
12297: LD_INT 92
12299: PUSH
12300: LD_INT 101
12302: PUSH
12303: LD_INT 0
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: PUSH
12312: LD_INT 28
12314: PUSH
12315: LD_INT 97
12317: PUSH
12318: LD_INT 116
12320: PUSH
12321: LD_INT 5
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: PUSH
12330: LD_INT 17
12332: PUSH
12333: LD_INT 96
12335: PUSH
12336: LD_INT 101
12338: PUSH
12339: LD_INT 4
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: PUSH
12348: LD_INT 18
12350: PUSH
12351: LD_INT 88
12353: PUSH
12354: LD_INT 97
12356: PUSH
12357: LD_INT 2
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: PUSH
12366: LD_INT 28
12368: PUSH
12369: LD_INT 106
12371: PUSH
12372: LD_INT 92
12374: PUSH
12375: LD_INT 2
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: PUSH
12384: LD_INT 32
12386: PUSH
12387: LD_INT 88
12389: PUSH
12390: LD_INT 89
12392: PUSH
12393: LD_INT 2
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: PUSH
12402: LD_INT 32
12404: PUSH
12405: LD_INT 86
12407: PUSH
12408: LD_INT 90
12410: PUSH
12411: LD_INT 2
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: PUSH
12420: LD_INT 32
12422: PUSH
12423: LD_INT 85
12425: PUSH
12426: LD_INT 99
12428: PUSH
12429: LD_INT 2
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: PUSH
12438: LD_INT 32
12440: PUSH
12441: LD_INT 85
12443: PUSH
12444: LD_INT 107
12446: PUSH
12447: LD_INT 1
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: PUSH
12456: LD_INT 33
12458: PUSH
12459: LD_INT 105
12461: PUSH
12462: LD_INT 99
12464: PUSH
12465: LD_INT 1
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: PUSH
12474: LD_INT 33
12476: PUSH
12477: LD_INT 102
12479: PUSH
12480: LD_INT 92
12482: PUSH
12483: LD_INT 3
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: PUSH
12492: LD_INT 33
12494: PUSH
12495: LD_INT 105
12497: PUSH
12498: LD_INT 92
12500: PUSH
12501: LD_INT 2
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: PUSH
12510: LD_INT 6
12512: PUSH
12513: LD_INT 92
12515: PUSH
12516: LD_INT 110
12518: PUSH
12519: LD_INT 0
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: PUSH
12528: LD_INT 6
12530: PUSH
12531: LD_INT 103
12533: PUSH
12534: LD_INT 103
12536: PUSH
12537: LD_INT 5
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: PUSH
12546: LD_INT 21
12548: PUSH
12549: LD_INT 89
12551: PUSH
12552: LD_INT 101
12554: PUSH
12555: LD_INT 1
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: PUSH
12564: LD_INT 16
12566: PUSH
12567: LD_INT 95
12569: PUSH
12570: LD_INT 104
12572: PUSH
12573: LD_INT 4
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: PUSH
12582: LD_INT 24
12584: PUSH
12585: LD_INT 92
12587: PUSH
12588: LD_INT 105
12590: PUSH
12591: LD_INT 0
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12624: LD_ADDR_VAR 0 3
12628: PUSH
12629: LD_INT 22
12631: PUSH
12632: LD_INT 3
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: PUSH
12639: LD_INT 3
12641: PUSH
12642: LD_INT 25
12644: PUSH
12645: LD_INT 2
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: PUSH
12652: EMPTY
12653: LIST
12654: LIST
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PPUSH
12660: CALL_OW 69
12664: PUSH
12665: FOR_IN
12666: IFFALSE 12685
// AddComAgressiveMove ( i , 96 , 99 ) ;
12668: LD_VAR 0 3
12672: PPUSH
12673: LD_INT 96
12675: PPUSH
12676: LD_INT 99
12678: PPUSH
12679: CALL_OW 174
12683: GO 12665
12685: POP
12686: POP
// for i := 1 to buildingsTab do
12687: LD_ADDR_VAR 0 3
12691: PUSH
12692: DOUBLE
12693: LD_INT 1
12695: DEC
12696: ST_TO_ADDR
12697: LD_VAR 0 5
12701: PUSH
12702: FOR_TO
12703: IFFALSE 12776
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12705: LD_VAR 0 4
12709: PPUSH
12710: LD_VAR 0 5
12714: PUSH
12715: LD_VAR 0 3
12719: ARRAY
12720: PUSH
12721: LD_INT 1
12723: ARRAY
12724: PPUSH
12725: LD_VAR 0 5
12729: PUSH
12730: LD_VAR 0 3
12734: ARRAY
12735: PUSH
12736: LD_INT 2
12738: ARRAY
12739: PPUSH
12740: LD_VAR 0 5
12744: PUSH
12745: LD_VAR 0 3
12749: ARRAY
12750: PUSH
12751: LD_INT 3
12753: ARRAY
12754: PPUSH
12755: LD_VAR 0 5
12759: PUSH
12760: LD_VAR 0 3
12764: ARRAY
12765: PUSH
12766: LD_INT 4
12768: ARRAY
12769: PPUSH
12770: CALL_OW 205
12774: GO 12702
12776: POP
12777: POP
// end ; if position = 3 then
12778: LD_VAR 0 1
12782: PUSH
12783: LD_INT 3
12785: EQUAL
12786: IFFALSE 13572
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12788: LD_ADDR_VAR 0 4
12792: PUSH
12793: LD_INT 22
12795: PUSH
12796: LD_INT 3
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PUSH
12803: LD_INT 25
12805: PUSH
12806: LD_INT 2
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PPUSH
12817: CALL_OW 69
12821: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
12822: LD_ADDR_VAR 0 5
12826: PUSH
12827: LD_INT 0
12829: PUSH
12830: LD_INT 151
12832: PUSH
12833: LD_INT 71
12835: PUSH
12836: LD_INT 4
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: PUSH
12845: LD_INT 4
12847: PUSH
12848: LD_INT 145
12850: PUSH
12851: LD_INT 53
12853: PUSH
12854: LD_INT 3
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: PUSH
12863: LD_INT 4
12865: PUSH
12866: LD_INT 172
12868: PUSH
12869: LD_INT 102
12871: PUSH
12872: LD_INT 5
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 29
12883: PUSH
12884: LD_INT 152
12886: PUSH
12887: LD_INT 85
12889: PUSH
12890: LD_INT 3
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: PUSH
12899: LD_INT 30
12901: PUSH
12902: LD_INT 156
12904: PUSH
12905: LD_INT 92
12907: PUSH
12908: LD_INT 3
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 28
12919: PUSH
12920: LD_INT 151
12922: PUSH
12923: LD_INT 66
12925: PUSH
12926: LD_INT 4
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: PUSH
12935: LD_INT 2
12937: PUSH
12938: LD_INT 163
12940: PUSH
12941: LD_INT 95
12943: PUSH
12944: LD_INT 5
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: PUSH
12953: LD_INT 28
12955: PUSH
12956: LD_INT 149
12958: PUSH
12959: LD_INT 63
12961: PUSH
12962: LD_INT 4
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: PUSH
12971: LD_INT 17
12973: PUSH
12974: LD_INT 167
12976: PUSH
12977: LD_INT 99
12979: PUSH
12980: LD_INT 5
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: PUSH
12989: LD_INT 18
12991: PUSH
12992: LD_INT 163
12994: PUSH
12995: LD_INT 98
12997: PUSH
12998: LD_INT 0
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: PUSH
13007: LD_INT 28
13009: PUSH
13010: LD_INT 154
13012: PUSH
13013: LD_INT 70
13015: PUSH
13016: LD_INT 4
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: PUSH
13025: LD_INT 32
13027: PUSH
13028: LD_INT 155
13030: PUSH
13031: LD_INT 62
13033: PUSH
13034: LD_INT 4
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: PUSH
13043: LD_INT 32
13045: PUSH
13046: LD_INT 161
13048: PUSH
13049: LD_INT 69
13051: PUSH
13052: LD_INT 4
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: PUSH
13061: LD_INT 32
13063: PUSH
13064: LD_INT 168
13066: PUSH
13067: LD_INT 78
13069: PUSH
13070: LD_INT 4
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: PUSH
13079: LD_INT 32
13081: PUSH
13082: LD_INT 163
13084: PUSH
13085: LD_INT 80
13087: PUSH
13088: LD_INT 5
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: PUSH
13097: LD_INT 32
13099: PUSH
13100: LD_INT 136
13102: PUSH
13103: LD_INT 73
13105: PUSH
13106: LD_INT 0
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: PUSH
13115: LD_INT 32
13117: PUSH
13118: LD_INT 157
13120: PUSH
13121: LD_INT 98
13123: PUSH
13124: LD_INT 0
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: PUSH
13133: LD_INT 32
13135: PUSH
13136: LD_INT 150
13138: PUSH
13139: LD_INT 87
13141: PUSH
13142: LD_INT 1
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: PUSH
13151: LD_INT 33
13153: PUSH
13154: LD_INT 171
13156: PUSH
13157: LD_INT 97
13159: PUSH
13160: LD_INT 4
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: PUSH
13169: LD_INT 33
13171: PUSH
13172: LD_INT 168
13174: PUSH
13175: LD_INT 92
13177: PUSH
13178: LD_INT 4
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: PUSH
13187: LD_INT 33
13189: PUSH
13190: LD_INT 166
13192: PUSH
13193: LD_INT 80
13195: PUSH
13196: LD_INT 5
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: PUSH
13205: LD_INT 33
13207: PUSH
13208: LD_INT 141
13210: PUSH
13211: LD_INT 54
13213: PUSH
13214: LD_INT 2
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 33
13225: PUSH
13226: LD_INT 133
13228: PUSH
13229: LD_INT 57
13231: PUSH
13232: LD_INT 2
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: PUSH
13241: LD_INT 33
13243: PUSH
13244: LD_INT 132
13246: PUSH
13247: LD_INT 61
13249: PUSH
13250: LD_INT 2
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: PUSH
13259: LD_INT 33
13261: PUSH
13262: LD_INT 150
13264: PUSH
13265: LD_INT 82
13267: PUSH
13268: LD_INT 0
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: PUSH
13277: LD_INT 33
13279: PUSH
13280: LD_INT 132
13282: PUSH
13283: LD_INT 72
13285: PUSH
13286: LD_INT 0
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: PUSH
13295: LD_INT 6
13297: PUSH
13298: LD_INT 146
13300: PUSH
13301: LD_INT 64
13303: PUSH
13304: LD_INT 4
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: PUSH
13313: LD_INT 6
13315: PUSH
13316: LD_INT 159
13318: PUSH
13319: LD_INT 85
13321: PUSH
13322: LD_INT 4
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: PUSH
13331: LD_INT 21
13333: PUSH
13334: LD_INT 163
13336: PUSH
13337: LD_INT 91
13339: PUSH
13340: LD_INT 3
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: PUSH
13349: LD_INT 16
13351: PUSH
13352: LD_INT 166
13354: PUSH
13355: LD_INT 95
13357: PUSH
13358: LD_INT 4
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: PUSH
13367: LD_INT 24
13369: PUSH
13370: LD_INT 159
13372: PUSH
13373: LD_INT 95
13375: PUSH
13376: LD_INT 1
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13418: LD_ADDR_VAR 0 3
13422: PUSH
13423: LD_INT 22
13425: PUSH
13426: LD_INT 3
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 3
13435: PUSH
13436: LD_INT 25
13438: PUSH
13439: LD_INT 2
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PPUSH
13454: CALL_OW 69
13458: PUSH
13459: FOR_IN
13460: IFFALSE 13479
// AddComAgressiveMove ( i , 141 , 65 ) ;
13462: LD_VAR 0 3
13466: PPUSH
13467: LD_INT 141
13469: PPUSH
13470: LD_INT 65
13472: PPUSH
13473: CALL_OW 174
13477: GO 13459
13479: POP
13480: POP
// for i := 1 to buildingsTab do
13481: LD_ADDR_VAR 0 3
13485: PUSH
13486: DOUBLE
13487: LD_INT 1
13489: DEC
13490: ST_TO_ADDR
13491: LD_VAR 0 5
13495: PUSH
13496: FOR_TO
13497: IFFALSE 13570
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13499: LD_VAR 0 4
13503: PPUSH
13504: LD_VAR 0 5
13508: PUSH
13509: LD_VAR 0 3
13513: ARRAY
13514: PUSH
13515: LD_INT 1
13517: ARRAY
13518: PPUSH
13519: LD_VAR 0 5
13523: PUSH
13524: LD_VAR 0 3
13528: ARRAY
13529: PUSH
13530: LD_INT 2
13532: ARRAY
13533: PPUSH
13534: LD_VAR 0 5
13538: PUSH
13539: LD_VAR 0 3
13543: ARRAY
13544: PUSH
13545: LD_INT 3
13547: ARRAY
13548: PPUSH
13549: LD_VAR 0 5
13553: PUSH
13554: LD_VAR 0 3
13558: ARRAY
13559: PUSH
13560: LD_INT 4
13562: ARRAY
13563: PPUSH
13564: CALL_OW 205
13568: GO 13496
13570: POP
13571: POP
// end ; end ;
13572: LD_VAR 0 2
13576: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
13577: LD_INT 0
13579: PPUSH
13580: PPUSH
13581: PPUSH
13582: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
13583: LD_ADDR_VAR 0 3
13587: PUSH
13588: LD_INT 22
13590: PUSH
13591: LD_INT 2
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 25
13600: PUSH
13601: LD_INT 2
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PPUSH
13612: CALL_OW 69
13616: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
13617: LD_VAR 0 3
13621: PPUSH
13622: LD_INT 0
13624: PPUSH
13625: LD_INT 71
13627: PPUSH
13628: LD_INT 15
13630: PPUSH
13631: LD_INT 3
13633: PPUSH
13634: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
13638: LD_ADDR_VAR 0 4
13642: PUSH
13643: LD_INT 6
13645: PUSH
13646: LD_INT 77
13648: PUSH
13649: LD_INT 18
13651: PUSH
13652: LD_INT 3
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: PUSH
13661: LD_INT 4
13663: PUSH
13664: LD_INT 77
13666: PUSH
13667: LD_INT 26
13669: PUSH
13670: LD_INT 0
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: PUSH
13679: LD_INT 31
13681: PUSH
13682: LD_INT 82
13684: PUSH
13685: LD_INT 28
13687: PUSH
13688: LD_INT 0
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: PUSH
13697: LD_INT 31
13699: PUSH
13700: LD_INT 84
13702: PUSH
13703: LD_INT 21
13705: PUSH
13706: LD_INT 3
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: PUSH
13715: LD_INT 31
13717: PUSH
13718: LD_INT 66
13720: PUSH
13721: LD_INT 14
13723: PUSH
13724: LD_INT 2
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: PUSH
13733: LD_INT 27
13735: PUSH
13736: LD_INT 67
13738: PUSH
13739: LD_INT 18
13741: PUSH
13742: LD_INT 5
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: PUSH
13751: LD_INT 27
13753: PUSH
13754: LD_INT 69
13756: PUSH
13757: LD_INT 23
13759: PUSH
13760: LD_INT 2
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: ST_TO_ADDR
// for i := 1 to buildingsTab do
13778: LD_ADDR_VAR 0 2
13782: PUSH
13783: DOUBLE
13784: LD_INT 1
13786: DEC
13787: ST_TO_ADDR
13788: LD_VAR 0 4
13792: PUSH
13793: FOR_TO
13794: IFFALSE 13867
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13796: LD_VAR 0 3
13800: PPUSH
13801: LD_VAR 0 4
13805: PUSH
13806: LD_VAR 0 2
13810: ARRAY
13811: PUSH
13812: LD_INT 1
13814: ARRAY
13815: PPUSH
13816: LD_VAR 0 4
13820: PUSH
13821: LD_VAR 0 2
13825: ARRAY
13826: PUSH
13827: LD_INT 2
13829: ARRAY
13830: PPUSH
13831: LD_VAR 0 4
13835: PUSH
13836: LD_VAR 0 2
13840: ARRAY
13841: PUSH
13842: LD_INT 3
13844: ARRAY
13845: PPUSH
13846: LD_VAR 0 4
13850: PUSH
13851: LD_VAR 0 2
13855: ARRAY
13856: PUSH
13857: LD_INT 4
13859: ARRAY
13860: PPUSH
13861: CALL_OW 205
13865: GO 13793
13867: POP
13868: POP
// end ;
13869: LD_VAR 0 1
13873: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
13874: LD_INT 0
13876: PPUSH
13877: PPUSH
13878: PPUSH
13879: PPUSH
13880: PPUSH
13881: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
13882: LD_ADDR_VAR 0 7
13886: PUSH
13887: LD_INT 22
13889: PUSH
13890: LD_VAR 0 1
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: PUSH
13899: LD_INT 25
13901: PUSH
13902: LD_INT 9
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PPUSH
13913: CALL_OW 69
13917: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13918: LD_ADDR_VAR 0 8
13922: PUSH
13923: LD_INT 22
13925: PUSH
13926: LD_VAR 0 2
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PUSH
13935: LD_INT 3
13937: PUSH
13938: LD_INT 21
13940: PUSH
13941: LD_INT 3
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: PPUSH
13956: CALL_OW 69
13960: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
13961: LD_ADDR_VAR 0 5
13965: PUSH
13966: LD_INT 1
13968: PPUSH
13969: LD_INT 3
13971: PPUSH
13972: CALL_OW 12
13976: ST_TO_ADDR
// for i = 1 to list do
13977: LD_ADDR_VAR 0 6
13981: PUSH
13982: DOUBLE
13983: LD_INT 1
13985: DEC
13986: ST_TO_ADDR
13987: LD_VAR 0 7
13991: PUSH
13992: FOR_TO
13993: IFFALSE 14983
// for ta in filter do
13995: LD_ADDR_VAR 0 4
13999: PUSH
14000: LD_VAR 0 8
14004: PUSH
14005: FOR_IN
14006: IFFALSE 14979
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14008: LD_VAR 0 7
14012: PUSH
14013: LD_VAR 0 6
14017: ARRAY
14018: PPUSH
14019: LD_VAR 0 4
14023: PPUSH
14024: CALL_OW 296
14028: PUSH
14029: LD_INT 15
14031: LESSEQUAL
14032: IFFALSE 14977
// begin case c of 1 :
14034: LD_VAR 0 5
14038: PUSH
14039: LD_INT 1
14041: DOUBLE
14042: EQUAL
14043: IFTRUE 14047
14045: GO 14479
14047: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
14048: LD_VAR 0 7
14052: PUSH
14053: LD_VAR 0 6
14057: ARRAY
14058: PPUSH
14059: LD_VAR 0 4
14063: PPUSH
14064: CALL_OW 250
14068: PPUSH
14069: LD_VAR 0 4
14073: PPUSH
14074: CALL_OW 251
14078: PPUSH
14079: CALL_OW 154
// if eventVar2 = 0 then
14083: LD_EXP 64
14087: PUSH
14088: LD_INT 0
14090: EQUAL
14091: IFFALSE 14477
// begin eventVar2 = 1 ;
14093: LD_ADDR_EXP 64
14097: PUSH
14098: LD_INT 1
14100: ST_TO_ADDR
// wait ( 0 0$7 ) ;
14101: LD_INT 245
14103: PPUSH
14104: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
14108: LD_VAR 0 4
14112: PPUSH
14113: CALL_OW 250
14117: PPUSH
14118: LD_VAR 0 4
14122: PPUSH
14123: CALL_OW 251
14127: PPUSH
14128: CALL_OW 84
// DialogueOn ;
14132: CALL_OW 6
// if IsOK ( Cyrus ) then
14136: LD_EXP 5
14140: PPUSH
14141: CALL_OW 302
14145: IFFALSE 14161
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
14147: LD_EXP 5
14151: PPUSH
14152: LD_STRING D9a-Cyrus-1
14154: PPUSH
14155: CALL_OW 88
// end else
14159: GO 14283
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
14161: LD_INT 22
14163: PUSH
14164: LD_INT 1
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: PUSH
14171: LD_INT 26
14173: PUSH
14174: LD_INT 1
14176: PUSH
14177: EMPTY
14178: LIST
14179: LIST
14180: PUSH
14181: LD_INT 2
14183: PUSH
14184: LD_INT 25
14186: PUSH
14187: LD_INT 1
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: PUSH
14194: LD_INT 25
14196: PUSH
14197: LD_INT 2
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: PUSH
14204: LD_INT 25
14206: PUSH
14207: LD_INT 3
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: PUSH
14214: LD_INT 25
14216: PUSH
14217: LD_INT 4
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PUSH
14224: LD_INT 25
14226: PUSH
14227: LD_INT 5
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: LIST
14246: PPUSH
14247: CALL_OW 69
14251: PUSH
14252: LD_EXP 1
14256: PUSH
14257: LD_EXP 14
14261: PUSH
14262: LD_EXP 5
14266: PUSH
14267: EMPTY
14268: LIST
14269: LIST
14270: LIST
14271: DIFF
14272: PPUSH
14273: LD_STRING D9a-Sol1-1
14275: PPUSH
14276: LD_STRING D9a-Sol1-1
14278: PPUSH
14279: CALL 10424 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
14283: LD_INT 22
14285: PUSH
14286: LD_INT 1
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PUSH
14293: LD_INT 26
14295: PUSH
14296: LD_INT 1
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: PUSH
14303: LD_INT 2
14305: PUSH
14306: LD_INT 25
14308: PUSH
14309: LD_INT 1
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: LD_INT 25
14318: PUSH
14319: LD_INT 2
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PUSH
14326: LD_INT 25
14328: PUSH
14329: LD_INT 3
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: LD_INT 25
14338: PUSH
14339: LD_INT 4
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PUSH
14346: LD_INT 25
14348: PUSH
14349: LD_INT 5
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: LIST
14368: PPUSH
14369: CALL_OW 69
14373: PUSH
14374: LD_EXP 1
14378: PUSH
14379: LD_EXP 14
14383: PUSH
14384: LD_EXP 5
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: LIST
14393: DIFF
14394: PPUSH
14395: LD_STRING D9b-Sol1-1
14397: PPUSH
14398: LD_STRING D9b-Sol1-1
14400: PPUSH
14401: CALL 10424 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
14405: LD_STRING 09_arInfo
14407: PPUSH
14408: LD_INT 0
14410: PPUSH
14411: CALL_OW 30
14415: PUSH
14416: LD_INT 1
14418: EQUAL
14419: IFFALSE 14433
// Say ( JMM , D9a-JMM-1 ) ;
14421: LD_EXP 1
14425: PPUSH
14426: LD_STRING D9a-JMM-1
14428: PPUSH
14429: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
14433: LD_EXP 1
14437: PPUSH
14438: LD_STRING D9c-JMM-1
14440: PPUSH
14441: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
14445: LD_INT 12
14447: PPUSH
14448: LD_INT 1
14450: PPUSH
14451: CALL_OW 321
14455: PUSH
14456: LD_INT 2
14458: EQUAL
14459: IFFALSE 14473
// Say ( JMM , D9c-JMM-1a ) ;
14461: LD_EXP 1
14465: PPUSH
14466: LD_STRING D9c-JMM-1a
14468: PPUSH
14469: CALL_OW 88
// DialogueOff ;
14473: CALL_OW 7
// end ; end ; 2 :
14477: GO 14977
14479: LD_INT 2
14481: DOUBLE
14482: EQUAL
14483: IFTRUE 14487
14485: GO 14945
14487: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
14488: LD_VAR 0 7
14492: PUSH
14493: LD_VAR 0 6
14497: ARRAY
14498: PPUSH
14499: LD_VAR 0 4
14503: PPUSH
14504: CALL_OW 250
14508: PUSH
14509: LD_INT 1
14511: NEG
14512: PPUSH
14513: LD_INT 1
14515: PPUSH
14516: CALL_OW 12
14520: PLUS
14521: PPUSH
14522: LD_VAR 0 4
14526: PPUSH
14527: CALL_OW 251
14531: PUSH
14532: LD_INT 1
14534: NEG
14535: PPUSH
14536: LD_INT 1
14538: PPUSH
14539: CALL_OW 12
14543: PLUS
14544: PPUSH
14545: CALL_OW 153
// if eventVar2 = 0 then
14549: LD_EXP 64
14553: PUSH
14554: LD_INT 0
14556: EQUAL
14557: IFFALSE 14943
// begin eventVar2 = 1 ;
14559: LD_ADDR_EXP 64
14563: PUSH
14564: LD_INT 1
14566: ST_TO_ADDR
// wait ( 0 0$7 ) ;
14567: LD_INT 245
14569: PPUSH
14570: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
14574: LD_VAR 0 4
14578: PPUSH
14579: CALL_OW 250
14583: PPUSH
14584: LD_VAR 0 4
14588: PPUSH
14589: CALL_OW 251
14593: PPUSH
14594: CALL_OW 84
// DialogueOn ;
14598: CALL_OW 6
// if IsOK ( Cyrus ) then
14602: LD_EXP 5
14606: PPUSH
14607: CALL_OW 302
14611: IFFALSE 14627
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
14613: LD_EXP 5
14617: PPUSH
14618: LD_STRING D9a-Cyrus-1
14620: PPUSH
14621: CALL_OW 88
// end else
14625: GO 14749
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
14627: LD_INT 22
14629: PUSH
14630: LD_INT 1
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PUSH
14637: LD_INT 26
14639: PUSH
14640: LD_INT 1
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: PUSH
14647: LD_INT 2
14649: PUSH
14650: LD_INT 25
14652: PUSH
14653: LD_INT 1
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: PUSH
14660: LD_INT 25
14662: PUSH
14663: LD_INT 2
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: PUSH
14670: LD_INT 25
14672: PUSH
14673: LD_INT 3
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 25
14682: PUSH
14683: LD_INT 4
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: LD_INT 25
14692: PUSH
14693: LD_INT 5
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: LIST
14712: PPUSH
14713: CALL_OW 69
14717: PUSH
14718: LD_EXP 1
14722: PUSH
14723: LD_EXP 14
14727: PUSH
14728: LD_EXP 5
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: LIST
14737: DIFF
14738: PPUSH
14739: LD_STRING D9a-Sol1-1
14741: PPUSH
14742: LD_STRING D9a-Sol1-1
14744: PPUSH
14745: CALL 10424 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
14749: LD_INT 22
14751: PUSH
14752: LD_INT 1
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 26
14761: PUSH
14762: LD_INT 1
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: LD_INT 2
14771: PUSH
14772: LD_INT 25
14774: PUSH
14775: LD_INT 1
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PUSH
14782: LD_INT 25
14784: PUSH
14785: LD_INT 2
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: PUSH
14792: LD_INT 25
14794: PUSH
14795: LD_INT 3
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: PUSH
14802: LD_INT 25
14804: PUSH
14805: LD_INT 4
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PUSH
14812: LD_INT 25
14814: PUSH
14815: LD_INT 5
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: LIST
14834: PPUSH
14835: CALL_OW 69
14839: PUSH
14840: LD_EXP 1
14844: PUSH
14845: LD_EXP 14
14849: PUSH
14850: LD_EXP 5
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: LIST
14859: DIFF
14860: PPUSH
14861: LD_STRING D9b-Sol1-1
14863: PPUSH
14864: LD_STRING D9b-Sol1-1
14866: PPUSH
14867: CALL 10424 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
14871: LD_STRING 09_arInfo
14873: PPUSH
14874: LD_INT 0
14876: PPUSH
14877: CALL_OW 30
14881: PUSH
14882: LD_INT 1
14884: EQUAL
14885: IFFALSE 14899
// Say ( JMM , D9a-JMM-1 ) ;
14887: LD_EXP 1
14891: PPUSH
14892: LD_STRING D9a-JMM-1
14894: PPUSH
14895: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
14899: LD_EXP 1
14903: PPUSH
14904: LD_STRING D9c-JMM-1
14906: PPUSH
14907: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
14911: LD_INT 12
14913: PPUSH
14914: LD_INT 1
14916: PPUSH
14917: CALL_OW 321
14921: PUSH
14922: LD_INT 2
14924: EQUAL
14925: IFFALSE 14939
// Say ( JMM , D9c-JMM-1a ) ;
14927: LD_EXP 1
14931: PPUSH
14932: LD_STRING D9c-JMM-1a
14934: PPUSH
14935: CALL_OW 88
// DialogueOff ;
14939: CALL_OW 7
// end ; end ; 3 :
14943: GO 14977
14945: LD_INT 3
14947: DOUBLE
14948: EQUAL
14949: IFTRUE 14953
14951: GO 14976
14953: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14954: LD_VAR 0 7
14958: PUSH
14959: LD_VAR 0 6
14963: ARRAY
14964: PPUSH
14965: LD_VAR 0 4
14969: PPUSH
14970: CALL_OW 115
14974: GO 14977
14976: POP
// end ; end ;
14977: GO 14005
14979: POP
14980: POP
14981: GO 13992
14983: POP
14984: POP
// end ;
14985: LD_VAR 0 3
14989: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
14990: LD_INT 0
14992: PPUSH
14993: PPUSH
14994: PPUSH
14995: PPUSH
// for i = 1 to 72 do
14996: LD_ADDR_VAR 0 5
15000: PUSH
15001: DOUBLE
15002: LD_INT 1
15004: DEC
15005: ST_TO_ADDR
15006: LD_INT 72
15008: PUSH
15009: FOR_TO
15010: IFFALSE 15068
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
15012: LD_VAR 0 5
15016: PPUSH
15017: LD_VAR 0 1
15021: PPUSH
15022: CALL_OW 321
15026: PUSH
15027: LD_INT 1
15029: EQUAL
15030: PUSH
15031: LD_VAR 0 5
15035: PPUSH
15036: LD_VAR 0 3
15040: PPUSH
15041: CALL_OW 482
15045: PUSH
15046: LD_INT 1
15048: EQUAL
15049: AND
15050: IFFALSE 15066
// AddComResearch ( lab , i ) ;
15052: LD_VAR 0 2
15056: PPUSH
15057: LD_VAR 0 5
15061: PPUSH
15062: CALL_OW 184
15066: GO 15009
15068: POP
15069: POP
// end ;
15070: LD_VAR 0 4
15074: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
15075: LD_INT 0
15077: PPUSH
15078: PPUSH
15079: PPUSH
15080: PPUSH
15081: PPUSH
15082: PPUSH
15083: PPUSH
15084: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
15085: LD_ADDR_VAR 0 6
15089: PUSH
15090: LD_INT 22
15092: PUSH
15093: LD_VAR 0 1
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: PUSH
15102: LD_INT 56
15104: PUSH
15105: EMPTY
15106: LIST
15107: PUSH
15108: LD_INT 24
15110: PUSH
15111: LD_INT 700
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: PUSH
15118: LD_INT 3
15120: PUSH
15121: LD_INT 60
15123: PUSH
15124: EMPTY
15125: LIST
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: LD_INT 2
15133: PUSH
15134: LD_INT 25
15136: PUSH
15137: LD_INT 1
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: PUSH
15144: LD_INT 25
15146: PUSH
15147: LD_INT 9
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: LIST
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: PPUSH
15166: CALL_OW 69
15170: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
15171: LD_ADDR_VAR 0 7
15175: PUSH
15176: LD_INT 22
15178: PUSH
15179: LD_VAR 0 1
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PUSH
15188: LD_INT 30
15190: PUSH
15191: LD_INT 32
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PUSH
15198: LD_INT 58
15200: PUSH
15201: EMPTY
15202: LIST
15203: PUSH
15204: LD_INT 24
15206: PUSH
15207: LD_INT 251
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: PPUSH
15220: CALL_OW 69
15224: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
15225: LD_ADDR_VAR 0 9
15229: PUSH
15230: LD_INT 22
15232: PUSH
15233: LD_VAR 0 1
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PUSH
15242: LD_INT 2
15244: PUSH
15245: LD_INT 30
15247: PUSH
15248: LD_INT 4
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: PUSH
15255: LD_INT 30
15257: PUSH
15258: LD_INT 5
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: LIST
15269: PUSH
15270: LD_INT 24
15272: PUSH
15273: LD_INT 251
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: LIST
15284: PPUSH
15285: CALL_OW 69
15289: ST_TO_ADDR
// if barrackList > 0 then
15290: LD_VAR 0 9
15294: PUSH
15295: LD_INT 0
15297: GREATER
15298: IFFALSE 15433
// begin if turretList = 0 then
15300: LD_VAR 0 7
15304: PUSH
15305: LD_INT 0
15307: EQUAL
15308: IFFALSE 15357
// begin for i in soldiers_list do
15310: LD_ADDR_VAR 0 4
15314: PUSH
15315: LD_VAR 0 6
15319: PUSH
15320: FOR_IN
15321: IFFALSE 15353
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
15323: LD_VAR 0 4
15327: PPUSH
15328: LD_VAR 0 9
15332: PUSH
15333: LD_INT 1
15335: PPUSH
15336: LD_VAR 0 9
15340: PPUSH
15341: CALL_OW 12
15345: ARRAY
15346: PPUSH
15347: CALL_OW 120
15351: GO 15320
15353: POP
15354: POP
// end else
15355: GO 15433
// begin for i in barrackList do
15357: LD_ADDR_VAR 0 4
15361: PUSH
15362: LD_VAR 0 9
15366: PUSH
15367: FOR_IN
15368: IFFALSE 15431
// begin insideUnits = UnitsInside ( i ) ;
15370: LD_ADDR_VAR 0 10
15374: PUSH
15375: LD_VAR 0 4
15379: PPUSH
15380: CALL_OW 313
15384: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
15385: LD_VAR 0 10
15389: PUSH
15390: LD_INT 1
15392: ARRAY
15393: PPUSH
15394: LD_VAR 0 7
15398: PUSH
15399: LD_INT 1
15401: ARRAY
15402: PPUSH
15403: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
15407: LD_VAR 0 6
15411: PUSH
15412: LD_INT 1
15414: ARRAY
15415: PPUSH
15416: LD_VAR 0 7
15420: PUSH
15421: LD_INT 1
15423: ARRAY
15424: PPUSH
15425: CALL_OW 120
// end ;
15429: GO 15367
15431: POP
15432: POP
// end ; end ; end ;
15433: LD_VAR 0 3
15437: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
15438: LD_INT 0
15440: PPUSH
15441: PPUSH
15442: PPUSH
15443: PPUSH
15444: PPUSH
15445: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
15446: LD_ADDR_VAR 0 6
15450: PUSH
15451: LD_VAR 0 2
15455: PPUSH
15456: CALL_OW 313
15460: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
15461: LD_ADDR_VAR 0 7
15465: PUSH
15466: LD_INT 22
15468: PUSH
15469: LD_VAR 0 1
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: PUSH
15478: LD_INT 25
15480: PUSH
15481: LD_INT 2
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: PUSH
15488: LD_INT 24
15490: PUSH
15491: LD_INT 1000
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PUSH
15498: LD_INT 3
15500: PUSH
15501: LD_INT 54
15503: PUSH
15504: EMPTY
15505: LIST
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: PPUSH
15517: CALL_OW 69
15521: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
15522: LD_ADDR_VAR 0 4
15526: PUSH
15527: LD_INT 22
15529: PUSH
15530: LD_VAR 0 1
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: LD_INT 21
15541: PUSH
15542: LD_INT 3
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PUSH
15549: LD_INT 3
15551: PUSH
15552: LD_INT 24
15554: PUSH
15555: LD_INT 1000
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: LIST
15570: PUSH
15571: EMPTY
15572: LIST
15573: PPUSH
15574: CALL_OW 69
15578: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
15579: LD_VAR 0 4
15583: NOT
15584: PUSH
15585: LD_VAR 0 7
15589: NOT
15590: AND
15591: PUSH
15592: LD_EXP 42
15596: NOT
15597: AND
15598: IFFALSE 15602
// exit ;
15600: GO 15793
// if buildings_list > 0 and engineerOkInside then
15602: LD_VAR 0 4
15606: PUSH
15607: LD_INT 0
15609: GREATER
15610: PUSH
15611: LD_VAR 0 6
15615: AND
15616: IFFALSE 15670
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
15618: LD_ADDR_VAR 0 5
15622: PUSH
15623: LD_INT 22
15625: PUSH
15626: LD_VAR 0 1
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: PUSH
15635: LD_INT 25
15637: PUSH
15638: LD_INT 2
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PPUSH
15649: CALL_OW 69
15653: PUSH
15654: FOR_IN
15655: IFFALSE 15668
// ComExitBuilding ( i ) ;
15657: LD_VAR 0 5
15661: PPUSH
15662: CALL_OW 122
15666: GO 15654
15668: POP
15669: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
15670: LD_VAR 0 4
15674: PUSH
15675: LD_INT 0
15677: GREATER
15678: PUSH
15679: LD_VAR 0 7
15683: PUSH
15684: LD_INT 0
15686: GREATER
15687: AND
15688: IFFALSE 15742
// begin for i in engineerOkOutside do
15690: LD_ADDR_VAR 0 5
15694: PUSH
15695: LD_VAR 0 7
15699: PUSH
15700: FOR_IN
15701: IFFALSE 15740
// for j in buildings_list do
15703: LD_ADDR_VAR 0 8
15707: PUSH
15708: LD_VAR 0 4
15712: PUSH
15713: FOR_IN
15714: IFFALSE 15736
// ComRepairBuilding ( i , j [ 1 ] ) ;
15716: LD_VAR 0 5
15720: PPUSH
15721: LD_VAR 0 8
15725: PUSH
15726: LD_INT 1
15728: ARRAY
15729: PPUSH
15730: CALL_OW 130
15734: GO 15713
15736: POP
15737: POP
15738: GO 15700
15740: POP
15741: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
15742: LD_VAR 0 4
15746: PUSH
15747: LD_INT 0
15749: EQUAL
15750: PUSH
15751: LD_VAR 0 7
15755: PUSH
15756: LD_INT 0
15758: GREATER
15759: AND
15760: IFFALSE 15793
// for i in engineerOkOutside do
15762: LD_ADDR_VAR 0 5
15766: PUSH
15767: LD_VAR 0 7
15771: PUSH
15772: FOR_IN
15773: IFFALSE 15791
// ComEnterUnit ( i , building ) ;
15775: LD_VAR 0 5
15779: PPUSH
15780: LD_VAR 0 2
15784: PPUSH
15785: CALL_OW 120
15789: GO 15772
15791: POP
15792: POP
// end ;
15793: LD_VAR 0 3
15797: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
15798: LD_INT 0
15800: PPUSH
15801: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
15802: LD_INT 22
15804: PUSH
15805: LD_VAR 0 1
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: LD_INT 25
15816: PUSH
15817: LD_INT 2
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PPUSH
15828: CALL_OW 69
15832: PUSH
15833: LD_INT 0
15835: GREATER
15836: PUSH
15837: LD_INT 22
15839: PUSH
15840: LD_VAR 0 1
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: PUSH
15849: LD_INT 21
15851: PUSH
15852: LD_INT 3
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: PUSH
15859: LD_INT 3
15861: PUSH
15862: LD_INT 24
15864: PUSH
15865: LD_INT 1000
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: PPUSH
15881: CALL_OW 69
15885: PUSH
15886: LD_INT 0
15888: EQUAL
15889: AND
15890: PUSH
15891: LD_VAR 0 2
15895: PUSH
15896: LD_INT 0
15898: GREATER
15899: AND
15900: IFFALSE 15999
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
15902: LD_ADDR_VAR 0 4
15906: PUSH
15907: LD_INT 22
15909: PUSH
15910: LD_VAR 0 1
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PUSH
15919: LD_INT 25
15921: PUSH
15922: LD_INT 2
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PPUSH
15933: CALL_OW 69
15937: PUSH
15938: FOR_IN
15939: IFFALSE 15997
// begin AddComExitBuilding ( i ) ;
15941: LD_VAR 0 4
15945: PPUSH
15946: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
15950: LD_VAR 0 4
15954: PPUSH
15955: LD_VAR 0 2
15959: PUSH
15960: LD_INT 1
15962: ARRAY
15963: PPUSH
15964: LD_VAR 0 2
15968: PUSH
15969: LD_INT 2
15971: ARRAY
15972: PPUSH
15973: LD_VAR 0 2
15977: PUSH
15978: LD_INT 3
15980: ARRAY
15981: PPUSH
15982: LD_VAR 0 2
15986: PUSH
15987: LD_INT 4
15989: ARRAY
15990: PPUSH
15991: CALL_OW 205
// end ;
15995: GO 15938
15997: POP
15998: POP
// end ; end ;
15999: LD_VAR 0 3
16003: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
16004: LD_INT 0
16006: PPUSH
16007: PPUSH
16008: PPUSH
16009: PPUSH
16010: PPUSH
16011: PPUSH
16012: PPUSH
16013: PPUSH
16014: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
16015: LD_ADDR_VAR 0 6
16019: PUSH
16020: LD_INT 22
16022: PUSH
16023: LD_VAR 0 1
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 25
16034: PUSH
16035: LD_INT 4
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: LD_INT 24
16044: PUSH
16045: LD_INT 251
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: LIST
16056: PPUSH
16057: CALL_OW 69
16061: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
16062: LD_ADDR_VAR 0 7
16066: PUSH
16067: LD_VAR 0 3
16071: PPUSH
16072: LD_INT 22
16074: PUSH
16075: LD_VAR 0 1
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: PUSH
16084: LD_INT 25
16086: PUSH
16087: LD_INT 4
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: PUSH
16094: LD_INT 50
16096: PUSH
16097: EMPTY
16098: LIST
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: LIST
16104: PPUSH
16105: CALL_OW 70
16109: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
16110: LD_ADDR_VAR 0 10
16114: PUSH
16115: LD_VAR 0 3
16119: PPUSH
16120: LD_INT 22
16122: PUSH
16123: LD_VAR 0 1
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PUSH
16132: LD_INT 21
16134: PUSH
16135: LD_INT 1
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: LD_INT 3
16144: PUSH
16145: LD_INT 25
16147: PUSH
16148: LD_INT 3
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: LD_INT 3
16161: PUSH
16162: LD_INT 24
16164: PUSH
16165: LD_INT 750
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: PPUSH
16182: CALL_OW 70
16186: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16187: LD_ADDR_VAR 0 11
16191: PUSH
16192: LD_VAR 0 2
16196: PPUSH
16197: LD_INT 22
16199: PUSH
16200: LD_VAR 0 1
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PUSH
16209: LD_INT 21
16211: PUSH
16212: LD_INT 1
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PUSH
16219: LD_INT 3
16221: PUSH
16222: LD_INT 25
16224: PUSH
16225: LD_INT 3
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PUSH
16236: LD_INT 3
16238: PUSH
16239: LD_INT 24
16241: PUSH
16242: LD_INT 1000
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: PPUSH
16259: CALL_OW 70
16263: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
16264: LD_VAR 0 10
16268: NOT
16269: PUSH
16270: LD_VAR 0 7
16274: NOT
16275: AND
16276: PUSH
16277: LD_VAR 0 11
16281: NOT
16282: AND
16283: IFFALSE 16287
// exit ;
16285: GO 16547
// if damageUnits > 0 and sci_list > 0 then
16287: LD_VAR 0 10
16291: PUSH
16292: LD_INT 0
16294: GREATER
16295: PUSH
16296: LD_VAR 0 6
16300: PUSH
16301: LD_INT 0
16303: GREATER
16304: AND
16305: IFFALSE 16338
// for i in damageUnits do
16307: LD_ADDR_VAR 0 8
16311: PUSH
16312: LD_VAR 0 10
16316: PUSH
16317: FOR_IN
16318: IFFALSE 16336
// ComMoveToArea ( i , healArea ) ;
16320: LD_VAR 0 8
16324: PPUSH
16325: LD_VAR 0 2
16329: PPUSH
16330: CALL_OW 113
16334: GO 16317
16336: POP
16337: POP
// if unitsToHeal > 0 and sci_list > 0 then
16338: LD_VAR 0 11
16342: PUSH
16343: LD_INT 0
16345: GREATER
16346: PUSH
16347: LD_VAR 0 6
16351: PUSH
16352: LD_INT 0
16354: GREATER
16355: AND
16356: IFFALSE 16415
// begin for i in sci_list do
16358: LD_ADDR_VAR 0 8
16362: PUSH
16363: LD_VAR 0 6
16367: PUSH
16368: FOR_IN
16369: IFFALSE 16413
// begin ComExitBuilding ( i ) ;
16371: LD_VAR 0 8
16375: PPUSH
16376: CALL_OW 122
// for j in unitsToHeal do
16380: LD_ADDR_VAR 0 9
16384: PUSH
16385: LD_VAR 0 11
16389: PUSH
16390: FOR_IN
16391: IFFALSE 16409
// AddComHeal ( i , j ) ;
16393: LD_VAR 0 8
16397: PPUSH
16398: LD_VAR 0 9
16402: PPUSH
16403: CALL_OW 188
16407: GO 16390
16409: POP
16410: POP
// end ;
16411: GO 16368
16413: POP
16414: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
16415: LD_VAR 0 10
16419: PUSH
16420: LD_INT 0
16422: EQUAL
16423: PUSH
16424: LD_VAR 0 11
16428: PUSH
16429: LD_INT 0
16431: EQUAL
16432: AND
16433: PUSH
16434: LD_VAR 0 7
16438: PUSH
16439: LD_INT 0
16441: GREATER
16442: AND
16443: IFFALSE 16547
// for i in sci_listOutside do
16445: LD_ADDR_VAR 0 8
16449: PUSH
16450: LD_VAR 0 7
16454: PUSH
16455: FOR_IN
16456: IFFALSE 16545
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
16458: LD_ADDR_VAR 0 12
16462: PUSH
16463: LD_INT 22
16465: PUSH
16466: LD_VAR 0 1
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 21
16477: PUSH
16478: LD_INT 3
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 30
16487: PUSH
16488: LD_INT 8
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: LIST
16499: PPUSH
16500: CALL_OW 69
16504: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
16505: LD_ADDR_VAR 0 13
16509: PUSH
16510: LD_INT 1
16512: PPUSH
16513: LD_VAR 0 12
16517: PPUSH
16518: CALL_OW 12
16522: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
16523: LD_VAR 0 8
16527: PPUSH
16528: LD_VAR 0 12
16532: PUSH
16533: LD_VAR 0 13
16537: ARRAY
16538: PPUSH
16539: CALL_OW 120
// end ;
16543: GO 16455
16545: POP
16546: POP
// end ;
16547: LD_VAR 0 5
16551: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
16552: LD_INT 0
16554: PPUSH
16555: PPUSH
16556: PPUSH
16557: PPUSH
16558: PPUSH
16559: PPUSH
16560: PPUSH
16561: PPUSH
16562: PPUSH
16563: PPUSH
16564: PPUSH
// amChassisTab = [ ] ;
16565: LD_ADDR_VAR 0 19
16569: PUSH
16570: EMPTY
16571: ST_TO_ADDR
// arChassisTab = [ ] ;
16572: LD_ADDR_VAR 0 18
16576: PUSH
16577: EMPTY
16578: ST_TO_ADDR
// ruChassisTab = [ ] ;
16579: LD_ADDR_VAR 0 17
16583: PUSH
16584: EMPTY
16585: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
16586: LD_INT 35
16588: PPUSH
16589: CALL_OW 67
// if nation = 1 then
16593: LD_VAR 0 5
16597: PUSH
16598: LD_INT 1
16600: EQUAL
16601: IFFALSE 17106
// begin uc_side = side ;
16603: LD_ADDR_OWVAR 20
16607: PUSH
16608: LD_VAR 0 2
16612: ST_TO_ADDR
// uc_nation = nation ;
16613: LD_ADDR_OWVAR 21
16617: PUSH
16618: LD_VAR 0 5
16622: ST_TO_ADDR
// vc_engine = vehengine ;
16623: LD_ADDR_OWVAR 39
16627: PUSH
16628: LD_VAR 0 6
16632: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16633: LD_ADDR_OWVAR 38
16637: PUSH
16638: LD_VAR 0 7
16642: PUSH
16643: LD_INT 1
16645: PPUSH
16646: LD_VAR 0 7
16650: PPUSH
16651: CALL_OW 12
16655: ARRAY
16656: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
16657: LD_ADDR_OWVAR 40
16661: PUSH
16662: LD_VAR 0 10
16666: PUSH
16667: LD_INT 1
16669: PPUSH
16670: LD_VAR 0 10
16674: PPUSH
16675: CALL_OW 12
16679: ARRAY
16680: ST_TO_ADDR
// for j = 1 to AMWeapon do
16681: LD_ADDR_VAR 0 14
16685: PUSH
16686: DOUBLE
16687: LD_INT 1
16689: DEC
16690: ST_TO_ADDR
16691: LD_VAR 0 10
16695: PUSH
16696: FOR_TO
16697: IFFALSE 16998
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
16699: LD_VAR 0 10
16703: PUSH
16704: LD_VAR 0 14
16708: ARRAY
16709: PUSH
16710: LD_INT 2
16712: EQUAL
16713: PUSH
16714: LD_VAR 0 10
16718: PUSH
16719: LD_VAR 0 14
16723: ARRAY
16724: PUSH
16725: LD_INT 3
16727: EQUAL
16728: OR
16729: IFFALSE 16782
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
16731: LD_ADDR_VAR 0 19
16735: PUSH
16736: LD_INT 1
16738: PUSH
16739: LD_INT 2
16741: PUSH
16742: LD_INT 3
16744: PUSH
16745: LD_INT 4
16747: PUSH
16748: LD_INT 5
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16758: LD_ADDR_OWVAR 37
16762: PUSH
16763: LD_VAR 0 19
16767: PUSH
16768: LD_INT 1
16770: PPUSH
16771: LD_VAR 0 19
16775: PPUSH
16776: CALL_OW 12
16780: ARRAY
16781: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
16782: LD_VAR 0 10
16786: PUSH
16787: LD_VAR 0 14
16791: ARRAY
16792: PUSH
16793: LD_INT 4
16795: EQUAL
16796: PUSH
16797: LD_VAR 0 10
16801: PUSH
16802: LD_VAR 0 14
16806: ARRAY
16807: PUSH
16808: LD_INT 5
16810: EQUAL
16811: OR
16812: PUSH
16813: LD_VAR 0 10
16817: PUSH
16818: LD_VAR 0 14
16822: ARRAY
16823: PUSH
16824: LD_INT 9
16826: EQUAL
16827: OR
16828: PUSH
16829: LD_VAR 0 10
16833: PUSH
16834: LD_VAR 0 14
16838: ARRAY
16839: PUSH
16840: LD_INT 11
16842: EQUAL
16843: OR
16844: PUSH
16845: LD_VAR 0 10
16849: PUSH
16850: LD_VAR 0 14
16854: ARRAY
16855: PUSH
16856: LD_INT 7
16858: EQUAL
16859: OR
16860: IFFALSE 16909
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
16862: LD_ADDR_VAR 0 19
16866: PUSH
16867: LD_INT 2
16869: PUSH
16870: LD_INT 3
16872: PUSH
16873: LD_INT 4
16875: PUSH
16876: LD_INT 5
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16885: LD_ADDR_OWVAR 37
16889: PUSH
16890: LD_VAR 0 19
16894: PUSH
16895: LD_INT 1
16897: PPUSH
16898: LD_VAR 0 19
16902: PPUSH
16903: CALL_OW 12
16907: ARRAY
16908: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
16909: LD_VAR 0 10
16913: PUSH
16914: LD_VAR 0 14
16918: ARRAY
16919: PUSH
16920: LD_INT 8
16922: EQUAL
16923: PUSH
16924: LD_VAR 0 10
16928: PUSH
16929: LD_VAR 0 14
16933: ARRAY
16934: PUSH
16935: LD_INT 6
16937: EQUAL
16938: OR
16939: PUSH
16940: LD_VAR 0 10
16944: PUSH
16945: LD_VAR 0 14
16949: ARRAY
16950: PUSH
16951: LD_INT 10
16953: EQUAL
16954: OR
16955: IFFALSE 16996
// begin amChassisTab = [ 4 , 5 ] ;
16957: LD_ADDR_VAR 0 19
16961: PUSH
16962: LD_INT 4
16964: PUSH
16965: LD_INT 5
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16972: LD_ADDR_OWVAR 37
16976: PUSH
16977: LD_VAR 0 19
16981: PUSH
16982: LD_INT 1
16984: PPUSH
16985: LD_VAR 0 19
16989: PPUSH
16990: CALL_OW 12
16994: ARRAY
16995: ST_TO_ADDR
// end ; end ;
16996: GO 16696
16998: POP
16999: POP
// veh = CreateVehicle ;
17000: LD_ADDR_VAR 0 16
17004: PUSH
17005: CALL_OW 45
17009: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17010: LD_VAR 0 16
17014: PPUSH
17015: LD_VAR 0 1
17019: PPUSH
17020: LD_INT 0
17022: PPUSH
17023: CALL_OW 49
// if vc_control = 1 then
17027: LD_OWVAR 38
17031: PUSH
17032: LD_INT 1
17034: EQUAL
17035: IFFALSE 17092
// begin hc_gallery =  ;
17037: LD_ADDR_OWVAR 33
17041: PUSH
17042: LD_STRING 
17044: ST_TO_ADDR
// hc_name =  ;
17045: LD_ADDR_OWVAR 26
17049: PUSH
17050: LD_STRING 
17052: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17053: LD_INT 0
17055: PPUSH
17056: LD_INT 3
17058: PPUSH
17059: LD_VAR 0 4
17063: PPUSH
17064: CALL_OW 380
// un = CreateHuman ;
17068: LD_ADDR_VAR 0 15
17072: PUSH
17073: CALL_OW 44
17077: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17078: LD_VAR 0 15
17082: PPUSH
17083: LD_VAR 0 16
17087: PPUSH
17088: CALL_OW 52
// end ; i = i + 1 ;
17092: LD_ADDR_VAR 0 13
17096: PUSH
17097: LD_VAR 0 13
17101: PUSH
17102: LD_INT 1
17104: PLUS
17105: ST_TO_ADDR
// end ; if nation = 2 then
17106: LD_VAR 0 5
17110: PUSH
17111: LD_INT 2
17113: EQUAL
17114: IFFALSE 17536
// begin uc_side = side ;
17116: LD_ADDR_OWVAR 20
17120: PUSH
17121: LD_VAR 0 2
17125: ST_TO_ADDR
// uc_nation = nation ;
17126: LD_ADDR_OWVAR 21
17130: PUSH
17131: LD_VAR 0 5
17135: ST_TO_ADDR
// vc_engine = vehengine ;
17136: LD_ADDR_OWVAR 39
17140: PUSH
17141: LD_VAR 0 6
17145: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17146: LD_ADDR_OWVAR 38
17150: PUSH
17151: LD_VAR 0 7
17155: PUSH
17156: LD_INT 1
17158: PPUSH
17159: LD_VAR 0 7
17163: PPUSH
17164: CALL_OW 12
17168: ARRAY
17169: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
17170: LD_ADDR_OWVAR 40
17174: PUSH
17175: LD_VAR 0 9
17179: PUSH
17180: LD_INT 1
17182: PPUSH
17183: LD_VAR 0 9
17187: PPUSH
17188: CALL_OW 12
17192: ARRAY
17193: ST_TO_ADDR
// for j = 1 to ARWeapons do
17194: LD_ADDR_VAR 0 14
17198: PUSH
17199: DOUBLE
17200: LD_INT 1
17202: DEC
17203: ST_TO_ADDR
17204: LD_VAR 0 9
17208: PUSH
17209: FOR_TO
17210: IFFALSE 17428
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
17212: LD_VAR 0 9
17216: PUSH
17217: LD_VAR 0 14
17221: ARRAY
17222: PUSH
17223: LD_INT 24
17225: EQUAL
17226: PUSH
17227: LD_VAR 0 9
17231: PUSH
17232: LD_VAR 0 14
17236: ARRAY
17237: PUSH
17238: LD_INT 22
17240: EQUAL
17241: OR
17242: PUSH
17243: LD_VAR 0 9
17247: PUSH
17248: LD_VAR 0 14
17252: ARRAY
17253: PUSH
17254: LD_INT 23
17256: EQUAL
17257: OR
17258: PUSH
17259: LD_VAR 0 9
17263: PUSH
17264: LD_VAR 0 14
17268: ARRAY
17269: PUSH
17270: LD_INT 30
17272: EQUAL
17273: OR
17274: IFFALSE 17311
// begin arChassisTab = [ 14 ] ;
17276: LD_ADDR_VAR 0 18
17280: PUSH
17281: LD_INT 14
17283: PUSH
17284: EMPTY
17285: LIST
17286: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
17287: LD_ADDR_OWVAR 37
17291: PUSH
17292: LD_VAR 0 18
17296: PUSH
17297: LD_INT 1
17299: PPUSH
17300: LD_VAR 0 18
17304: PPUSH
17305: CALL_OW 12
17309: ARRAY
17310: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
17311: LD_VAR 0 9
17315: PUSH
17316: LD_VAR 0 14
17320: ARRAY
17321: PUSH
17322: LD_INT 29
17324: EQUAL
17325: PUSH
17326: LD_VAR 0 9
17330: PUSH
17331: LD_VAR 0 14
17335: ARRAY
17336: PUSH
17337: LD_INT 28
17339: EQUAL
17340: OR
17341: PUSH
17342: LD_VAR 0 9
17346: PUSH
17347: LD_VAR 0 14
17351: ARRAY
17352: PUSH
17353: LD_INT 27
17355: EQUAL
17356: OR
17357: PUSH
17358: LD_VAR 0 9
17362: PUSH
17363: LD_VAR 0 14
17367: ARRAY
17368: PUSH
17369: LD_INT 26
17371: EQUAL
17372: OR
17373: PUSH
17374: LD_VAR 0 9
17378: PUSH
17379: LD_VAR 0 14
17383: ARRAY
17384: PUSH
17385: LD_INT 25
17387: EQUAL
17388: OR
17389: IFFALSE 17426
// begin arChassisTab = [ 14 ] ;
17391: LD_ADDR_VAR 0 18
17395: PUSH
17396: LD_INT 14
17398: PUSH
17399: EMPTY
17400: LIST
17401: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
17402: LD_ADDR_OWVAR 37
17406: PUSH
17407: LD_VAR 0 18
17411: PUSH
17412: LD_INT 1
17414: PPUSH
17415: LD_VAR 0 18
17419: PPUSH
17420: CALL_OW 12
17424: ARRAY
17425: ST_TO_ADDR
// end ; end ;
17426: GO 17209
17428: POP
17429: POP
// veh = CreateVehicle ;
17430: LD_ADDR_VAR 0 16
17434: PUSH
17435: CALL_OW 45
17439: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17440: LD_VAR 0 16
17444: PPUSH
17445: LD_VAR 0 1
17449: PPUSH
17450: LD_INT 0
17452: PPUSH
17453: CALL_OW 49
// if vc_control = 1 then
17457: LD_OWVAR 38
17461: PUSH
17462: LD_INT 1
17464: EQUAL
17465: IFFALSE 17522
// begin hc_gallery =  ;
17467: LD_ADDR_OWVAR 33
17471: PUSH
17472: LD_STRING 
17474: ST_TO_ADDR
// hc_name =  ;
17475: LD_ADDR_OWVAR 26
17479: PUSH
17480: LD_STRING 
17482: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17483: LD_INT 0
17485: PPUSH
17486: LD_INT 3
17488: PPUSH
17489: LD_VAR 0 4
17493: PPUSH
17494: CALL_OW 380
// un = CreateHuman ;
17498: LD_ADDR_VAR 0 15
17502: PUSH
17503: CALL_OW 44
17507: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17508: LD_VAR 0 15
17512: PPUSH
17513: LD_VAR 0 16
17517: PPUSH
17518: CALL_OW 52
// end ; i = i + 1 ;
17522: LD_ADDR_VAR 0 13
17526: PUSH
17527: LD_VAR 0 13
17531: PUSH
17532: LD_INT 1
17534: PLUS
17535: ST_TO_ADDR
// end ; if nation = 3 then
17536: LD_VAR 0 5
17540: PUSH
17541: LD_INT 3
17543: EQUAL
17544: IFFALSE 17950
// begin uc_side = side ;
17546: LD_ADDR_OWVAR 20
17550: PUSH
17551: LD_VAR 0 2
17555: ST_TO_ADDR
// uc_nation = nation ;
17556: LD_ADDR_OWVAR 21
17560: PUSH
17561: LD_VAR 0 5
17565: ST_TO_ADDR
// vc_engine = vehengine ;
17566: LD_ADDR_OWVAR 39
17570: PUSH
17571: LD_VAR 0 6
17575: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17576: LD_ADDR_OWVAR 38
17580: PUSH
17581: LD_VAR 0 7
17585: PUSH
17586: LD_INT 1
17588: PPUSH
17589: LD_VAR 0 7
17593: PPUSH
17594: CALL_OW 12
17598: ARRAY
17599: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
17600: LD_ADDR_OWVAR 40
17604: PUSH
17605: LD_VAR 0 8
17609: PUSH
17610: LD_INT 1
17612: PPUSH
17613: LD_VAR 0 8
17617: PPUSH
17618: CALL_OW 12
17622: ARRAY
17623: ST_TO_ADDR
// for j = 1 to RuWeapons do
17624: LD_ADDR_VAR 0 14
17628: PUSH
17629: DOUBLE
17630: LD_INT 1
17632: DEC
17633: ST_TO_ADDR
17634: LD_VAR 0 8
17638: PUSH
17639: FOR_TO
17640: IFFALSE 17842
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
17642: LD_VAR 0 8
17646: PUSH
17647: LD_VAR 0 14
17651: ARRAY
17652: PUSH
17653: LD_INT 42
17655: EQUAL
17656: PUSH
17657: LD_VAR 0 8
17661: PUSH
17662: LD_VAR 0 14
17666: ARRAY
17667: PUSH
17668: LD_INT 43
17670: EQUAL
17671: OR
17672: PUSH
17673: LD_VAR 0 8
17677: PUSH
17678: LD_VAR 0 14
17682: ARRAY
17683: PUSH
17684: LD_INT 44
17686: EQUAL
17687: OR
17688: PUSH
17689: LD_VAR 0 8
17693: PUSH
17694: LD_VAR 0 14
17698: ARRAY
17699: PUSH
17700: LD_INT 45
17702: EQUAL
17703: OR
17704: PUSH
17705: LD_VAR 0 8
17709: PUSH
17710: LD_VAR 0 14
17714: ARRAY
17715: PUSH
17716: LD_INT 49
17718: EQUAL
17719: OR
17720: IFFALSE 17769
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
17722: LD_ADDR_VAR 0 17
17726: PUSH
17727: LD_INT 21
17729: PUSH
17730: LD_INT 22
17732: PUSH
17733: LD_INT 23
17735: PUSH
17736: LD_INT 24
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
17745: LD_ADDR_OWVAR 37
17749: PUSH
17750: LD_VAR 0 17
17754: PUSH
17755: LD_INT 1
17757: PPUSH
17758: LD_VAR 0 17
17762: PPUSH
17763: CALL_OW 12
17767: ARRAY
17768: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
17769: LD_VAR 0 8
17773: PUSH
17774: LD_VAR 0 14
17778: ARRAY
17779: PUSH
17780: LD_INT 46
17782: EQUAL
17783: PUSH
17784: LD_VAR 0 8
17788: PUSH
17789: LD_VAR 0 14
17793: ARRAY
17794: PUSH
17795: LD_INT 47
17797: EQUAL
17798: OR
17799: IFFALSE 17840
// begin ruChassisTab = [ 23 , 24 ] ;
17801: LD_ADDR_VAR 0 17
17805: PUSH
17806: LD_INT 23
17808: PUSH
17809: LD_INT 24
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
17816: LD_ADDR_OWVAR 37
17820: PUSH
17821: LD_VAR 0 17
17825: PUSH
17826: LD_INT 1
17828: PPUSH
17829: LD_VAR 0 17
17833: PPUSH
17834: CALL_OW 12
17838: ARRAY
17839: ST_TO_ADDR
// end ; end ;
17840: GO 17639
17842: POP
17843: POP
// veh = CreateVehicle ;
17844: LD_ADDR_VAR 0 16
17848: PUSH
17849: CALL_OW 45
17853: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17854: LD_VAR 0 16
17858: PPUSH
17859: LD_VAR 0 1
17863: PPUSH
17864: LD_INT 0
17866: PPUSH
17867: CALL_OW 49
// if vc_control = 1 then
17871: LD_OWVAR 38
17875: PUSH
17876: LD_INT 1
17878: EQUAL
17879: IFFALSE 17936
// begin hc_gallery =  ;
17881: LD_ADDR_OWVAR 33
17885: PUSH
17886: LD_STRING 
17888: ST_TO_ADDR
// hc_name =  ;
17889: LD_ADDR_OWVAR 26
17893: PUSH
17894: LD_STRING 
17896: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17897: LD_INT 0
17899: PPUSH
17900: LD_INT 3
17902: PPUSH
17903: LD_VAR 0 4
17907: PPUSH
17908: CALL_OW 380
// un = CreateHuman ;
17912: LD_ADDR_VAR 0 15
17916: PUSH
17917: CALL_OW 44
17921: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17922: LD_VAR 0 15
17926: PPUSH
17927: LD_VAR 0 16
17931: PPUSH
17932: CALL_OW 52
// end ; i = i + 1 ;
17936: LD_ADDR_VAR 0 13
17940: PUSH
17941: LD_VAR 0 13
17945: PUSH
17946: LD_INT 1
17948: PLUS
17949: ST_TO_ADDR
// end ; until i = vehCount ;
17950: LD_VAR 0 13
17954: PUSH
17955: LD_VAR 0 3
17959: EQUAL
17960: IFFALSE 16586
// repeat wait ( 0 0$1 ) ;
17962: LD_INT 35
17964: PPUSH
17965: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
17969: LD_ADDR_VAR 0 20
17973: PUSH
17974: LD_INT 22
17976: PUSH
17977: LD_VAR 0 2
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 21
17988: PUSH
17989: LD_INT 2
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 24
17998: PUSH
17999: LD_INT 650
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: LIST
18010: PPUSH
18011: CALL_OW 69
18015: ST_TO_ADDR
// if vehicleOK_list > 0 then
18016: LD_VAR 0 20
18020: PUSH
18021: LD_INT 0
18023: GREATER
18024: IFFALSE 18215
// begin for i in vehicleOK_list do
18026: LD_ADDR_VAR 0 13
18030: PUSH
18031: LD_VAR 0 20
18035: PUSH
18036: FOR_IN
18037: IFFALSE 18213
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18039: LD_ADDR_VAR 0 21
18043: PUSH
18044: LD_INT 22
18046: PUSH
18047: LD_VAR 0 11
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PPUSH
18056: CALL_OW 69
18060: PPUSH
18061: LD_VAR 0 13
18065: PPUSH
18066: CALL_OW 74
18070: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18071: LD_ADDR_VAR 0 22
18075: PUSH
18076: LD_INT 22
18078: PUSH
18079: LD_VAR 0 11
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 2
18090: PUSH
18091: LD_INT 59
18093: PUSH
18094: EMPTY
18095: LIST
18096: PUSH
18097: LD_INT 21
18099: PUSH
18100: LD_INT 1
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 21
18109: PUSH
18110: LD_INT 2
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: EMPTY
18128: LIST
18129: PPUSH
18130: CALL_OW 69
18134: PPUSH
18135: LD_VAR 0 13
18139: PPUSH
18140: CALL_OW 74
18144: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18145: LD_VAR 0 13
18149: PPUSH
18150: LD_VAR 0 21
18154: PPUSH
18155: CALL_OW 296
18159: PUSH
18160: LD_INT 8
18162: PLUS
18163: PUSH
18164: LD_VAR 0 13
18168: PPUSH
18169: LD_VAR 0 22
18173: PPUSH
18174: CALL_OW 296
18178: LESS
18179: IFFALSE 18197
// begin ComAttackUnit ( i , target1 ) ;
18181: LD_VAR 0 13
18185: PPUSH
18186: LD_VAR 0 21
18190: PPUSH
18191: CALL_OW 115
// end else
18195: GO 18211
// begin ComAttackUnit ( i , target2 ) ;
18197: LD_VAR 0 13
18201: PPUSH
18202: LD_VAR 0 22
18206: PPUSH
18207: CALL_OW 115
// end ; end ;
18211: GO 18036
18213: POP
18214: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
18215: LD_INT 22
18217: PUSH
18218: LD_VAR 0 2
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 21
18229: PUSH
18230: LD_INT 2
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PPUSH
18241: CALL_OW 69
18245: PUSH
18246: LD_INT 0
18248: EQUAL
18249: IFFALSE 17962
// end ;
18251: LD_VAR 0 12
18255: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
18256: LD_INT 0
18258: PPUSH
18259: PPUSH
18260: PPUSH
18261: PPUSH
18262: PPUSH
18263: PPUSH
18264: PPUSH
18265: PPUSH
18266: PPUSH
18267: PPUSH
18268: PPUSH
// for i = 1 to soldierCount do
18269: LD_ADDR_VAR 0 13
18273: PUSH
18274: DOUBLE
18275: LD_INT 1
18277: DEC
18278: ST_TO_ADDR
18279: LD_VAR 0 3
18283: PUSH
18284: FOR_TO
18285: IFFALSE 18367
// begin uc_side = side ;
18287: LD_ADDR_OWVAR 20
18291: PUSH
18292: LD_VAR 0 1
18296: ST_TO_ADDR
// uc_nation = nation ;
18297: LD_ADDR_OWVAR 21
18301: PUSH
18302: LD_VAR 0 2
18306: ST_TO_ADDR
// hc_name =  ;
18307: LD_ADDR_OWVAR 26
18311: PUSH
18312: LD_STRING 
18314: ST_TO_ADDR
// hc_gallery =  ;
18315: LD_ADDR_OWVAR 33
18319: PUSH
18320: LD_STRING 
18322: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
18323: LD_INT 0
18325: PPUSH
18326: LD_INT 1
18328: PPUSH
18329: LD_VAR 0 8
18333: PPUSH
18334: CALL_OW 380
// un = CreateHuman ;
18338: LD_ADDR_VAR 0 15
18342: PUSH
18343: CALL_OW 44
18347: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
18348: LD_VAR 0 15
18352: PPUSH
18353: LD_VAR 0 9
18357: PPUSH
18358: LD_INT 0
18360: PPUSH
18361: CALL_OW 49
// end ;
18365: GO 18284
18367: POP
18368: POP
// for i = 1 to sniperCount do
18369: LD_ADDR_VAR 0 13
18373: PUSH
18374: DOUBLE
18375: LD_INT 1
18377: DEC
18378: ST_TO_ADDR
18379: LD_VAR 0 4
18383: PUSH
18384: FOR_TO
18385: IFFALSE 18467
// begin uc_side = side ;
18387: LD_ADDR_OWVAR 20
18391: PUSH
18392: LD_VAR 0 1
18396: ST_TO_ADDR
// uc_nation = nation ;
18397: LD_ADDR_OWVAR 21
18401: PUSH
18402: LD_VAR 0 2
18406: ST_TO_ADDR
// hc_name =  ;
18407: LD_ADDR_OWVAR 26
18411: PUSH
18412: LD_STRING 
18414: ST_TO_ADDR
// hc_gallery =  ;
18415: LD_ADDR_OWVAR 33
18419: PUSH
18420: LD_STRING 
18422: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
18423: LD_INT 0
18425: PPUSH
18426: LD_INT 5
18428: PPUSH
18429: LD_VAR 0 8
18433: PPUSH
18434: CALL_OW 380
// un = CreateHuman ;
18438: LD_ADDR_VAR 0 15
18442: PUSH
18443: CALL_OW 44
18447: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
18448: LD_VAR 0 15
18452: PPUSH
18453: LD_VAR 0 9
18457: PPUSH
18458: LD_INT 0
18460: PPUSH
18461: CALL_OW 49
// end ;
18465: GO 18384
18467: POP
18468: POP
// for i = 1 to bazookCount do
18469: LD_ADDR_VAR 0 13
18473: PUSH
18474: DOUBLE
18475: LD_INT 1
18477: DEC
18478: ST_TO_ADDR
18479: LD_VAR 0 5
18483: PUSH
18484: FOR_TO
18485: IFFALSE 18567
// begin uc_side = side ;
18487: LD_ADDR_OWVAR 20
18491: PUSH
18492: LD_VAR 0 1
18496: ST_TO_ADDR
// uc_nation = nation ;
18497: LD_ADDR_OWVAR 21
18501: PUSH
18502: LD_VAR 0 2
18506: ST_TO_ADDR
// hc_name =  ;
18507: LD_ADDR_OWVAR 26
18511: PUSH
18512: LD_STRING 
18514: ST_TO_ADDR
// hc_gallery =  ;
18515: LD_ADDR_OWVAR 33
18519: PUSH
18520: LD_STRING 
18522: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
18523: LD_INT 0
18525: PPUSH
18526: LD_INT 9
18528: PPUSH
18529: LD_VAR 0 8
18533: PPUSH
18534: CALL_OW 380
// un = CreateHuman ;
18538: LD_ADDR_VAR 0 15
18542: PUSH
18543: CALL_OW 44
18547: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
18548: LD_VAR 0 15
18552: PPUSH
18553: LD_VAR 0 9
18557: PPUSH
18558: LD_INT 0
18560: PPUSH
18561: CALL_OW 49
// end ;
18565: GO 18484
18567: POP
18568: POP
// for i = 1 to mortalCount do
18569: LD_ADDR_VAR 0 13
18573: PUSH
18574: DOUBLE
18575: LD_INT 1
18577: DEC
18578: ST_TO_ADDR
18579: LD_VAR 0 6
18583: PUSH
18584: FOR_TO
18585: IFFALSE 18667
// begin uc_side = side ;
18587: LD_ADDR_OWVAR 20
18591: PUSH
18592: LD_VAR 0 1
18596: ST_TO_ADDR
// uc_nation = nation ;
18597: LD_ADDR_OWVAR 21
18601: PUSH
18602: LD_VAR 0 2
18606: ST_TO_ADDR
// hc_name =  ;
18607: LD_ADDR_OWVAR 26
18611: PUSH
18612: LD_STRING 
18614: ST_TO_ADDR
// hc_gallery =  ;
18615: LD_ADDR_OWVAR 33
18619: PUSH
18620: LD_STRING 
18622: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
18623: LD_INT 0
18625: PPUSH
18626: LD_INT 8
18628: PPUSH
18629: LD_VAR 0 8
18633: PPUSH
18634: CALL_OW 380
// un = CreateHuman ;
18638: LD_ADDR_VAR 0 15
18642: PUSH
18643: CALL_OW 44
18647: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
18648: LD_VAR 0 15
18652: PPUSH
18653: LD_VAR 0 9
18657: PPUSH
18658: LD_INT 0
18660: PPUSH
18661: CALL_OW 49
// end ;
18665: GO 18584
18667: POP
18668: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
18669: LD_ADDR_VAR 0 18
18673: PUSH
18674: LD_INT 22
18676: PUSH
18677: LD_VAR 0 1
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 2
18688: PUSH
18689: LD_INT 25
18691: PUSH
18692: LD_INT 1
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 25
18701: PUSH
18702: LD_INT 5
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: LD_INT 25
18711: PUSH
18712: LD_INT 8
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PUSH
18719: LD_INT 25
18721: PUSH
18722: LD_INT 9
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PPUSH
18740: CALL_OW 69
18744: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
18745: LD_ADDR_VAR 0 17
18749: PUSH
18750: LD_INT 22
18752: PUSH
18753: LD_VAR 0 1
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 25
18764: PUSH
18765: LD_INT 4
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PPUSH
18776: CALL_OW 69
18780: ST_TO_ADDR
// for i in medic_list do
18781: LD_ADDR_VAR 0 13
18785: PUSH
18786: LD_VAR 0 17
18790: PUSH
18791: FOR_IN
18792: IFFALSE 18810
// ComMoveToArea ( i , healArea ) ;
18794: LD_VAR 0 13
18798: PPUSH
18799: LD_VAR 0 10
18803: PPUSH
18804: CALL_OW 113
18808: GO 18791
18810: POP
18811: POP
// repeat wait ( 0 0$1 ) ;
18812: LD_INT 35
18814: PPUSH
18815: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
18819: LD_ADDR_VAR 0 16
18823: PUSH
18824: LD_INT 22
18826: PUSH
18827: LD_VAR 0 1
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 1
18838: PUSH
18839: LD_INT 3
18841: PUSH
18842: LD_INT 24
18844: PUSH
18845: LD_INT 550
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 24
18858: PUSH
18859: LD_INT 250
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: LIST
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PPUSH
18875: CALL_OW 69
18879: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
18880: LD_ADDR_VAR 0 18
18884: PUSH
18885: LD_INT 22
18887: PUSH
18888: LD_VAR 0 1
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 2
18899: PUSH
18900: LD_INT 25
18902: PUSH
18903: LD_INT 1
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 25
18912: PUSH
18913: LD_INT 5
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 25
18922: PUSH
18923: LD_INT 8
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 25
18932: PUSH
18933: LD_INT 9
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 24
18949: PUSH
18950: LD_INT 1000
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: LIST
18961: PPUSH
18962: CALL_OW 69
18966: ST_TO_ADDR
// if medicCount > 0 then
18967: LD_VAR 0 7
18971: PUSH
18972: LD_INT 0
18974: GREATER
18975: IFFALSE 19049
// begin if damageUnit_list > 0 then
18977: LD_VAR 0 16
18981: PUSH
18982: LD_INT 0
18984: GREATER
18985: IFFALSE 19049
// begin for i in damageUnit_list do
18987: LD_ADDR_VAR 0 13
18991: PUSH
18992: LD_VAR 0 16
18996: PUSH
18997: FOR_IN
18998: IFFALSE 19047
// begin ComMoveToArea ( i , healArea ) ;
19000: LD_VAR 0 13
19004: PPUSH
19005: LD_VAR 0 10
19009: PPUSH
19010: CALL_OW 113
// for j in medic_list do
19014: LD_ADDR_VAR 0 14
19018: PUSH
19019: LD_VAR 0 17
19023: PUSH
19024: FOR_IN
19025: IFFALSE 19043
// AddComHeal ( j , i ) ;
19027: LD_VAR 0 14
19031: PPUSH
19032: LD_VAR 0 13
19036: PPUSH
19037: CALL_OW 188
19041: GO 19024
19043: POP
19044: POP
// end ;
19045: GO 18997
19047: POP
19048: POP
// end ; end ; for i in soldiersOK_list do
19049: LD_ADDR_VAR 0 13
19053: PUSH
19054: LD_VAR 0 18
19058: PUSH
19059: FOR_IN
19060: IFFALSE 19236
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19062: LD_ADDR_VAR 0 21
19066: PUSH
19067: LD_INT 22
19069: PUSH
19070: LD_VAR 0 11
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PPUSH
19079: CALL_OW 69
19083: PPUSH
19084: LD_VAR 0 13
19088: PPUSH
19089: CALL_OW 74
19093: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19094: LD_ADDR_VAR 0 22
19098: PUSH
19099: LD_INT 22
19101: PUSH
19102: LD_VAR 0 11
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 2
19113: PUSH
19114: LD_INT 59
19116: PUSH
19117: EMPTY
19118: LIST
19119: PUSH
19120: LD_INT 21
19122: PUSH
19123: LD_INT 1
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: LD_INT 21
19132: PUSH
19133: LD_INT 2
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: EMPTY
19151: LIST
19152: PPUSH
19153: CALL_OW 69
19157: PPUSH
19158: LD_VAR 0 13
19162: PPUSH
19163: CALL_OW 74
19167: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19168: LD_VAR 0 13
19172: PPUSH
19173: LD_VAR 0 21
19177: PPUSH
19178: CALL_OW 296
19182: PUSH
19183: LD_INT 8
19185: PLUS
19186: PUSH
19187: LD_VAR 0 13
19191: PPUSH
19192: LD_VAR 0 22
19196: PPUSH
19197: CALL_OW 296
19201: LESS
19202: IFFALSE 19220
// begin ComAttackUnit ( i , target1 ) ;
19204: LD_VAR 0 13
19208: PPUSH
19209: LD_VAR 0 21
19213: PPUSH
19214: CALL_OW 115
// end else
19218: GO 19234
// begin ComAttackUnit ( i , target2 ) ;
19220: LD_VAR 0 13
19224: PPUSH
19225: LD_VAR 0 22
19229: PPUSH
19230: CALL_OW 115
// end ; end ;
19234: GO 19059
19236: POP
19237: POP
// for i in soldiersOK_list do
19238: LD_ADDR_VAR 0 13
19242: PUSH
19243: LD_VAR 0 18
19247: PUSH
19248: FOR_IN
19249: IFFALSE 19425
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19251: LD_ADDR_VAR 0 21
19255: PUSH
19256: LD_INT 22
19258: PUSH
19259: LD_VAR 0 11
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PPUSH
19268: CALL_OW 69
19272: PPUSH
19273: LD_VAR 0 13
19277: PPUSH
19278: CALL_OW 74
19282: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19283: LD_ADDR_VAR 0 22
19287: PUSH
19288: LD_INT 22
19290: PUSH
19291: LD_VAR 0 11
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: LD_INT 2
19302: PUSH
19303: LD_INT 59
19305: PUSH
19306: EMPTY
19307: LIST
19308: PUSH
19309: LD_INT 21
19311: PUSH
19312: LD_INT 1
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 21
19321: PUSH
19322: LD_INT 2
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PUSH
19339: EMPTY
19340: LIST
19341: PPUSH
19342: CALL_OW 69
19346: PPUSH
19347: LD_VAR 0 13
19351: PPUSH
19352: CALL_OW 74
19356: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19357: LD_VAR 0 13
19361: PPUSH
19362: LD_VAR 0 21
19366: PPUSH
19367: CALL_OW 296
19371: PUSH
19372: LD_INT 8
19374: PLUS
19375: PUSH
19376: LD_VAR 0 13
19380: PPUSH
19381: LD_VAR 0 22
19385: PPUSH
19386: CALL_OW 296
19390: LESS
19391: IFFALSE 19409
// begin ComAttackUnit ( i , target1 ) ;
19393: LD_VAR 0 13
19397: PPUSH
19398: LD_VAR 0 21
19402: PPUSH
19403: CALL_OW 115
// end else
19407: GO 19423
// begin ComAttackUnit ( i , target2 ) ;
19409: LD_VAR 0 13
19413: PPUSH
19414: LD_VAR 0 22
19418: PPUSH
19419: CALL_OW 115
// end ; end ;
19423: GO 19248
19425: POP
19426: POP
// until soldiersOK_list = [ ] ;
19427: LD_VAR 0 18
19431: PUSH
19432: EMPTY
19433: EQUAL
19434: IFFALSE 18812
// end ;
19436: LD_VAR 0 12
19440: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
19441: LD_INT 0
19443: PPUSH
19444: PPUSH
19445: PPUSH
19446: PPUSH
19447: PPUSH
19448: PPUSH
19449: PPUSH
// repeat wait ( 0 0$1 ) ;
19450: LD_INT 35
19452: PPUSH
19453: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
19457: LD_ADDR_VAR 0 7
19461: PUSH
19462: LD_INT 22
19464: PUSH
19465: LD_INT 2
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 25
19474: PUSH
19475: LD_INT 4
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 3
19484: PUSH
19485: LD_INT 60
19487: PUSH
19488: EMPTY
19489: LIST
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: LIST
19499: PPUSH
19500: CALL_OW 69
19504: ST_TO_ADDR
// if not tmp then
19505: LD_VAR 0 7
19509: NOT
19510: IFFALSE 19514
// continue ;
19512: GO 19450
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19514: LD_ADDR_VAR 0 3
19518: PUSH
19519: LD_INT 5
19521: PPUSH
19522: LD_INT 22
19524: PUSH
19525: LD_INT 0
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 25
19534: PUSH
19535: LD_INT 12
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PPUSH
19546: CALL_OW 70
19550: PUSH
19551: FOR_IN
19552: IFFALSE 19585
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
19554: LD_VAR 0 7
19558: PPUSH
19559: LD_VAR 0 3
19563: PPUSH
19564: CALL_OW 250
19568: PPUSH
19569: LD_VAR 0 3
19573: PPUSH
19574: CALL_OW 251
19578: PPUSH
19579: CALL_OW 131
19583: GO 19551
19585: POP
19586: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
19587: LD_INT 22
19589: PUSH
19590: LD_INT 2
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 25
19599: PUSH
19600: LD_INT 4
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PPUSH
19611: CALL_OW 69
19615: PUSH
19616: LD_INT 0
19618: EQUAL
19619: PUSH
19620: LD_INT 5
19622: PPUSH
19623: LD_INT 22
19625: PUSH
19626: LD_INT 0
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 25
19635: PUSH
19636: LD_INT 12
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PPUSH
19647: CALL_OW 70
19651: PUSH
19652: LD_INT 2
19654: LESS
19655: OR
19656: PUSH
19657: LD_OWVAR 1
19661: PUSH
19662: LD_INT 7000
19664: GREATEREQUAL
19665: OR
19666: IFFALSE 19450
// repeat wait ( 0 0$1 ) ;
19668: LD_INT 35
19670: PPUSH
19671: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
19675: LD_ADDR_VAR 0 5
19679: PUSH
19680: LD_INT 22
19682: PUSH
19683: LD_INT 2
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 30
19692: PUSH
19693: LD_INT 5
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PPUSH
19704: CALL_OW 69
19708: ST_TO_ADDR
// until arm ;
19709: LD_VAR 0 5
19713: IFFALSE 19668
// wait ( 0 0$25 ) ;
19715: LD_INT 875
19717: PPUSH
19718: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19722: LD_ADDR_VAR 0 6
19726: PUSH
19727: LD_INT 22
19729: PUSH
19730: LD_INT 2
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 2
19739: PUSH
19740: LD_INT 30
19742: PUSH
19743: LD_INT 0
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 30
19752: PUSH
19753: LD_INT 1
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: LIST
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PPUSH
19769: CALL_OW 69
19773: ST_TO_ADDR
// j := 0 ;
19774: LD_ADDR_VAR 0 3
19778: PUSH
19779: LD_INT 0
19781: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
19782: LD_ADDR_VAR 0 2
19786: PUSH
19787: LD_INT 22
19789: PUSH
19790: LD_INT 2
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 25
19799: PUSH
19800: LD_INT 12
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: PPUSH
19811: CALL_OW 69
19815: PUSH
19816: FOR_IN
19817: IFFALSE 19904
// begin ComMoveXY ( i , 63 , 16 ) ;
19819: LD_VAR 0 2
19823: PPUSH
19824: LD_INT 63
19826: PPUSH
19827: LD_INT 16
19829: PPUSH
19830: CALL_OW 111
// j := j + 1 ;
19834: LD_ADDR_VAR 0 3
19838: PUSH
19839: LD_VAR 0 3
19843: PUSH
19844: LD_INT 1
19846: PLUS
19847: ST_TO_ADDR
// if j < 5 then
19848: LD_VAR 0 3
19852: PUSH
19853: LD_INT 5
19855: LESS
19856: IFFALSE 19874
// b := arm [ 1 ] else
19858: LD_ADDR_VAR 0 4
19862: PUSH
19863: LD_VAR 0 5
19867: PUSH
19868: LD_INT 1
19870: ARRAY
19871: ST_TO_ADDR
19872: GO 19888
// b := dep [ 1 ] ;
19874: LD_ADDR_VAR 0 4
19878: PUSH
19879: LD_VAR 0 6
19883: PUSH
19884: LD_INT 1
19886: ARRAY
19887: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
19888: LD_VAR 0 2
19892: PPUSH
19893: LD_VAR 0 4
19897: PPUSH
19898: CALL_OW 180
// end ;
19902: GO 19816
19904: POP
19905: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
19906: LD_ADDR_VAR 0 2
19910: PUSH
19911: LD_INT 22
19913: PUSH
19914: LD_INT 2
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 25
19923: PUSH
19924: LD_INT 4
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PPUSH
19935: CALL_OW 69
19939: PUSH
19940: FOR_IN
19941: IFFALSE 19987
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
19943: LD_VAR 0 2
19947: PPUSH
19948: LD_INT 22
19950: PUSH
19951: LD_INT 2
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 30
19960: PUSH
19961: LD_INT 8
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PPUSH
19972: CALL_OW 69
19976: PUSH
19977: LD_INT 1
19979: ARRAY
19980: PPUSH
19981: CALL_OW 120
19985: GO 19940
19987: POP
19988: POP
// end ;
19989: LD_VAR 0 1
19993: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
19994: LD_INT 0
19996: PPUSH
19997: PPUSH
19998: PPUSH
19999: PPUSH
20000: PPUSH
20001: PPUSH
20002: PPUSH
20003: PPUSH
20004: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
20005: LD_INT 22
20007: PUSH
20008: LD_VAR 0 1
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: LD_INT 21
20019: PUSH
20020: LD_INT 2
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PPUSH
20031: CALL_OW 69
20035: PUSH
20036: LD_VAR 0 3
20040: LESSEQUAL
20041: IFFALSE 20185
// for i = 1 to vehCount do
20043: LD_ADDR_VAR 0 10
20047: PUSH
20048: DOUBLE
20049: LD_INT 1
20051: DEC
20052: ST_TO_ADDR
20053: LD_VAR 0 3
20057: PUSH
20058: FOR_TO
20059: IFFALSE 20183
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
20061: LD_ADDR_VAR 0 12
20065: PUSH
20066: LD_VAR 0 5
20070: PUSH
20071: LD_INT 1
20073: PPUSH
20074: LD_VAR 0 5
20078: PPUSH
20079: CALL_OW 12
20083: ARRAY
20084: ST_TO_ADDR
// if randWeapon = 46 then
20085: LD_VAR 0 12
20089: PUSH
20090: LD_INT 46
20092: EQUAL
20093: IFFALSE 20138
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
20095: LD_VAR 0 2
20099: PPUSH
20100: LD_INT 24
20102: PPUSH
20103: LD_VAR 0 6
20107: PPUSH
20108: LD_VAR 0 7
20112: PUSH
20113: LD_INT 1
20115: PPUSH
20116: LD_VAR 0 7
20120: PPUSH
20121: CALL_OW 12
20125: ARRAY
20126: PPUSH
20127: LD_VAR 0 12
20131: PPUSH
20132: CALL_OW 185
20136: GO 20181
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
20138: LD_VAR 0 2
20142: PPUSH
20143: LD_VAR 0 8
20147: PPUSH
20148: LD_VAR 0 6
20152: PPUSH
20153: LD_VAR 0 7
20157: PUSH
20158: LD_INT 1
20160: PPUSH
20161: LD_VAR 0 7
20165: PPUSH
20166: CALL_OW 12
20170: ARRAY
20171: PPUSH
20172: LD_VAR 0 12
20176: PPUSH
20177: CALL_OW 185
// end ;
20181: GO 20058
20183: POP
20184: POP
// repeat wait ( 0 0$1 ) ;
20185: LD_INT 35
20187: PPUSH
20188: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
20192: LD_INT 22
20194: PUSH
20195: LD_VAR 0 1
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 21
20206: PUSH
20207: LD_INT 2
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 24
20216: PUSH
20217: LD_INT 250
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: LIST
20228: PPUSH
20229: CALL_OW 69
20233: PUSH
20234: LD_VAR 0 3
20238: GREATEREQUAL
20239: IFFALSE 20185
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
20241: LD_INT 22
20243: PUSH
20244: LD_VAR 0 1
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PUSH
20253: LD_INT 21
20255: PUSH
20256: LD_INT 2
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 24
20265: PUSH
20266: LD_INT 250
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: LIST
20277: PPUSH
20278: CALL_OW 69
20282: PUSH
20283: LD_VAR 0 3
20287: GREATEREQUAL
20288: IFFALSE 20631
// begin repeat begin wait ( 0 0$1 ) ;
20290: LD_INT 35
20292: PPUSH
20293: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
20297: LD_INT 22
20299: PUSH
20300: LD_VAR 0 1
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 21
20311: PUSH
20312: LD_INT 2
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 24
20321: PUSH
20322: LD_INT 651
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: LIST
20333: PPUSH
20334: CALL_OW 69
20338: PUSH
20339: LD_INT 0
20341: GREATER
20342: IFFALSE 20570
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
20344: LD_ADDR_VAR 0 10
20348: PUSH
20349: LD_INT 22
20351: PUSH
20352: LD_VAR 0 1
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 21
20363: PUSH
20364: LD_INT 2
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 24
20373: PUSH
20374: LD_INT 651
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: LIST
20385: PPUSH
20386: CALL_OW 69
20390: PUSH
20391: FOR_IN
20392: IFFALSE 20568
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20394: LD_ADDR_VAR 0 16
20398: PUSH
20399: LD_INT 22
20401: PUSH
20402: LD_VAR 0 4
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PPUSH
20411: CALL_OW 69
20415: PPUSH
20416: LD_VAR 0 10
20420: PPUSH
20421: CALL_OW 74
20425: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20426: LD_ADDR_VAR 0 17
20430: PUSH
20431: LD_INT 22
20433: PUSH
20434: LD_VAR 0 4
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 2
20445: PUSH
20446: LD_INT 59
20448: PUSH
20449: EMPTY
20450: LIST
20451: PUSH
20452: LD_INT 21
20454: PUSH
20455: LD_INT 1
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PUSH
20462: LD_INT 21
20464: PUSH
20465: LD_INT 2
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: EMPTY
20483: LIST
20484: PPUSH
20485: CALL_OW 69
20489: PPUSH
20490: LD_VAR 0 10
20494: PPUSH
20495: CALL_OW 74
20499: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20500: LD_VAR 0 10
20504: PPUSH
20505: LD_VAR 0 16
20509: PPUSH
20510: CALL_OW 296
20514: PUSH
20515: LD_INT 8
20517: PLUS
20518: PUSH
20519: LD_VAR 0 10
20523: PPUSH
20524: LD_VAR 0 17
20528: PPUSH
20529: CALL_OW 296
20533: LESS
20534: IFFALSE 20552
// begin ComAttackUnit ( i , target1 ) ;
20536: LD_VAR 0 10
20540: PPUSH
20541: LD_VAR 0 16
20545: PPUSH
20546: CALL_OW 115
// end else
20550: GO 20566
// begin ComAttackUnit ( i , target2 ) ;
20552: LD_VAR 0 10
20556: PPUSH
20557: LD_VAR 0 17
20561: PPUSH
20562: CALL_OW 115
// end ; end ;
20566: GO 20391
20568: POP
20569: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
20570: LD_INT 22
20572: PUSH
20573: LD_VAR 0 1
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: PUSH
20582: LD_INT 21
20584: PUSH
20585: LD_INT 2
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PPUSH
20596: CALL_OW 69
20600: PUSH
20601: LD_INT 0
20603: EQUAL
20604: PUSH
20605: LD_INT 22
20607: PUSH
20608: LD_VAR 0 4
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: EMPTY
20618: LIST
20619: PPUSH
20620: CALL_OW 69
20624: PUSH
20625: LD_INT 0
20627: EQUAL
20628: OR
20629: IFFALSE 20290
// end ; end ;
20631: LD_VAR 0 9
20635: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
20636: LD_INT 0
20638: PPUSH
20639: PPUSH
20640: PPUSH
20641: PPUSH
// r := 100 ;
20642: LD_ADDR_VAR 0 5
20646: PUSH
20647: LD_INT 100
20649: ST_TO_ADDR
// x := 0 ;
20650: LD_ADDR_VAR 0 6
20654: PUSH
20655: LD_INT 0
20657: ST_TO_ADDR
// while ( x < n ) do
20658: LD_VAR 0 6
20662: PUSH
20663: LD_VAR 0 2
20667: LESS
20668: IFFALSE 20955
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
20670: LD_ADDR_VAR 0 4
20674: PUSH
20675: DOUBLE
20676: LD_INT 1
20678: DEC
20679: ST_TO_ADDR
20680: LD_VAR 0 1
20684: PPUSH
20685: LD_INT 0
20687: PPUSH
20688: CALL_OW 517
20692: PUSH
20693: LD_INT 1
20695: ARRAY
20696: PUSH
20697: FOR_TO
20698: IFFALSE 20951
// begin if r > 50 then
20700: LD_VAR 0 5
20704: PUSH
20705: LD_INT 50
20707: GREATER
20708: IFFALSE 20927
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
20710: LD_VAR 0 1
20714: PPUSH
20715: LD_INT 0
20717: PPUSH
20718: CALL_OW 517
20722: PUSH
20723: LD_INT 1
20725: ARRAY
20726: PUSH
20727: LD_VAR 0 4
20731: ARRAY
20732: PPUSH
20733: LD_VAR 0 1
20737: PPUSH
20738: LD_INT 0
20740: PPUSH
20741: CALL_OW 517
20745: PUSH
20746: LD_INT 2
20748: ARRAY
20749: PUSH
20750: LD_VAR 0 4
20754: ARRAY
20755: PPUSH
20756: CALL_OW 458
20760: NOT
20761: IFFALSE 20911
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
20763: LD_VAR 0 1
20767: PPUSH
20768: LD_INT 0
20770: PPUSH
20771: CALL_OW 517
20775: PUSH
20776: LD_INT 1
20778: ARRAY
20779: PUSH
20780: LD_VAR 0 4
20784: ARRAY
20785: PPUSH
20786: LD_VAR 0 1
20790: PPUSH
20791: LD_INT 0
20793: PPUSH
20794: CALL_OW 517
20798: PUSH
20799: LD_INT 2
20801: ARRAY
20802: PUSH
20803: LD_VAR 0 4
20807: ARRAY
20808: PPUSH
20809: LD_INT 5
20811: PPUSH
20812: LD_INT 0
20814: PPUSH
20815: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
20819: LD_ADDR_EXP 50
20823: PUSH
20824: LD_EXP 50
20828: PPUSH
20829: LD_INT 1
20831: PPUSH
20832: LD_VAR 0 1
20836: PPUSH
20837: LD_INT 0
20839: PPUSH
20840: CALL_OW 517
20844: PUSH
20845: LD_INT 1
20847: ARRAY
20848: PUSH
20849: LD_VAR 0 4
20853: ARRAY
20854: PUSH
20855: LD_VAR 0 1
20859: PPUSH
20860: LD_INT 0
20862: PPUSH
20863: CALL_OW 517
20867: PUSH
20868: LD_INT 2
20870: ARRAY
20871: PUSH
20872: LD_VAR 0 4
20876: ARRAY
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PPUSH
20882: CALL_OW 2
20886: ST_TO_ADDR
// r := 0 ;
20887: LD_ADDR_VAR 0 5
20891: PUSH
20892: LD_INT 0
20894: ST_TO_ADDR
// x := x + 1 ;
20895: LD_ADDR_VAR 0 6
20899: PUSH
20900: LD_VAR 0 6
20904: PUSH
20905: LD_INT 1
20907: PLUS
20908: ST_TO_ADDR
// end else
20909: GO 20925
// r := r + 35 ;
20911: LD_ADDR_VAR 0 5
20915: PUSH
20916: LD_VAR 0 5
20920: PUSH
20921: LD_INT 35
20923: PLUS
20924: ST_TO_ADDR
// end else
20925: GO 20949
// r := r + rand ( 10 , 25 ) ;
20927: LD_ADDR_VAR 0 5
20931: PUSH
20932: LD_VAR 0 5
20936: PUSH
20937: LD_INT 10
20939: PPUSH
20940: LD_INT 25
20942: PPUSH
20943: CALL_OW 12
20947: PLUS
20948: ST_TO_ADDR
// end ;
20949: GO 20697
20951: POP
20952: POP
20953: GO 20658
// end ; end_of_file
20955: LD_VAR 0 3
20959: RET
// every 0 0$1 trigger russianAI = 1 do
20960: LD_EXP 39
20964: PUSH
20965: LD_INT 1
20967: EQUAL
20968: IFFALSE 21187
20970: GO 20972
20972: DISABLE
// begin enable ;
20973: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
20974: LD_INT 3
20976: PPUSH
20977: LD_EXP 30
20981: PPUSH
20982: CALL 15438 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
20986: LD_INT 3
20988: PPUSH
20989: LD_EXP 42
20993: PPUSH
20994: CALL 15798 0 2
// if ruPossition = 1 then
20998: LD_EXP 41
21002: PUSH
21003: LD_INT 1
21005: EQUAL
21006: IFFALSE 21061
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21008: LD_INT 3
21010: PPUSH
21011: LD_INT 13
21013: PPUSH
21014: LD_INT 10
21016: PPUSH
21017: LD_INT 22
21019: PUSH
21020: LD_INT 3
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 21
21029: PUSH
21030: LD_INT 3
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 30
21039: PUSH
21040: LD_INT 8
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: LIST
21051: PPUSH
21052: CALL_OW 69
21056: PPUSH
21057: CALL 16004 0 4
// if ruPossition = 2 then
21061: LD_EXP 41
21065: PUSH
21066: LD_INT 2
21068: EQUAL
21069: IFFALSE 21124
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21071: LD_INT 3
21073: PPUSH
21074: LD_INT 14
21076: PPUSH
21077: LD_INT 11
21079: PPUSH
21080: LD_INT 22
21082: PUSH
21083: LD_INT 3
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 21
21092: PUSH
21093: LD_INT 3
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: LD_INT 30
21102: PUSH
21103: LD_INT 8
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: LIST
21114: PPUSH
21115: CALL_OW 69
21119: PPUSH
21120: CALL 16004 0 4
// if ruPossition = 3 then
21124: LD_EXP 41
21128: PUSH
21129: LD_INT 3
21131: EQUAL
21132: IFFALSE 21187
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21134: LD_INT 3
21136: PPUSH
21137: LD_INT 15
21139: PPUSH
21140: LD_INT 12
21142: PPUSH
21143: LD_INT 22
21145: PUSH
21146: LD_INT 3
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 21
21155: PUSH
21156: LD_INT 3
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 30
21165: PUSH
21166: LD_INT 8
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: LIST
21177: PPUSH
21178: CALL_OW 69
21182: PPUSH
21183: CALL 16004 0 4
// end ;
21187: END
// every 0 0$1 do
21188: GO 21190
21190: DISABLE
// begin enable ;
21191: ENABLE
// if ruPossition = 1 then
21192: LD_EXP 41
21196: PUSH
21197: LD_INT 1
21199: EQUAL
21200: IFFALSE 21212
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
21202: LD_INT 3
21204: PPUSH
21205: LD_INT 10
21207: PPUSH
21208: CALL 15075 0 2
// if ruPossition = 2 then
21212: LD_EXP 41
21216: PUSH
21217: LD_INT 2
21219: EQUAL
21220: IFFALSE 21232
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
21222: LD_INT 3
21224: PPUSH
21225: LD_INT 11
21227: PPUSH
21228: CALL 15075 0 2
// if ruPossition = 3 then
21232: LD_EXP 41
21236: PUSH
21237: LD_INT 3
21239: EQUAL
21240: IFFALSE 21252
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
21242: LD_INT 3
21244: PPUSH
21245: LD_INT 12
21247: PPUSH
21248: CALL 15075 0 2
// IntBazooka ( 3 , 1 ) ;
21252: LD_INT 3
21254: PPUSH
21255: LD_INT 1
21257: PPUSH
21258: CALL 13874 0 2
// IntBazooka ( 6 , 1 ) ;
21262: LD_INT 6
21264: PPUSH
21265: LD_INT 1
21267: PPUSH
21268: CALL 13874 0 2
// end ;
21272: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
21273: LD_EXP 39
21277: PUSH
21278: LD_INT 1
21280: EQUAL
21281: PUSH
21282: LD_EXP 35
21286: PPUSH
21287: CALL_OW 302
21291: AND
21292: PUSH
21293: LD_EXP 35
21297: PPUSH
21298: CALL_OW 255
21302: PUSH
21303: LD_INT 3
21305: EQUAL
21306: AND
21307: PUSH
21308: LD_INT 22
21310: PUSH
21311: LD_INT 3
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: LD_INT 21
21320: PUSH
21321: LD_INT 2
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 33
21330: PUSH
21331: LD_INT 3
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: LIST
21342: PPUSH
21343: CALL_OW 69
21347: PUSH
21348: LD_INT 0
21350: EQUAL
21351: AND
21352: IFFALSE 21560
21354: GO 21356
21356: DISABLE
// begin enable ;
21357: ENABLE
// if Difficulty = 1 then
21358: LD_OWVAR 67
21362: PUSH
21363: LD_INT 1
21365: EQUAL
21366: IFFALSE 21428
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
21368: LD_INT 3
21370: PPUSH
21371: LD_EXP 35
21375: PPUSH
21376: LD_INT 5
21378: PPUSH
21379: LD_INT 8
21381: PPUSH
21382: CALL_OW 12
21386: PPUSH
21387: LD_INT 1
21389: PPUSH
21390: LD_INT 43
21392: PUSH
21393: LD_INT 44
21395: PUSH
21396: LD_INT 45
21398: PUSH
21399: LD_INT 46
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: PPUSH
21408: LD_INT 1
21410: PPUSH
21411: LD_INT 3
21413: PUSH
21414: LD_INT 3
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PPUSH
21421: LD_INT 22
21423: PPUSH
21424: CALL 19994 0 8
// if Difficulty = 2 then
21428: LD_OWVAR 67
21432: PUSH
21433: LD_INT 2
21435: EQUAL
21436: IFFALSE 21494
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
21438: LD_INT 3
21440: PPUSH
21441: LD_EXP 35
21445: PPUSH
21446: LD_INT 6
21448: PPUSH
21449: LD_INT 8
21451: PPUSH
21452: CALL_OW 12
21456: PPUSH
21457: LD_INT 1
21459: PPUSH
21460: LD_INT 44
21462: PUSH
21463: LD_INT 45
21465: PUSH
21466: LD_INT 46
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: LIST
21473: PPUSH
21474: LD_INT 1
21476: PPUSH
21477: LD_INT 3
21479: PUSH
21480: LD_INT 3
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PPUSH
21487: LD_INT 22
21489: PPUSH
21490: CALL 19994 0 8
// if Difficulty = 3 then
21494: LD_OWVAR 67
21498: PUSH
21499: LD_INT 3
21501: EQUAL
21502: IFFALSE 21560
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
21504: LD_INT 3
21506: PPUSH
21507: LD_EXP 35
21511: PPUSH
21512: LD_INT 7
21514: PPUSH
21515: LD_INT 8
21517: PPUSH
21518: CALL_OW 12
21522: PPUSH
21523: LD_INT 1
21525: PPUSH
21526: LD_INT 44
21528: PUSH
21529: LD_INT 45
21531: PUSH
21532: LD_INT 46
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: LIST
21539: PPUSH
21540: LD_INT 1
21542: PPUSH
21543: LD_INT 3
21545: PUSH
21546: LD_INT 3
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PPUSH
21553: LD_INT 22
21555: PPUSH
21556: CALL 19994 0 8
// end ;
21560: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
21561: LD_EXP 50
21565: PUSH
21566: LD_EXP 49
21570: AND
21571: IFFALSE 21692
21573: GO 21575
21575: DISABLE
21576: LD_INT 0
21578: PPUSH
// begin enable ;
21579: ENABLE
// for i in arabianMines do
21580: LD_ADDR_VAR 0 1
21584: PUSH
21585: LD_EXP 50
21589: PUSH
21590: FOR_IN
21591: IFFALSE 21690
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
21593: LD_INT 22
21595: PUSH
21596: LD_INT 1
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: LD_INT 92
21605: PUSH
21606: LD_VAR 0 1
21610: PUSH
21611: LD_INT 1
21613: ARRAY
21614: PUSH
21615: LD_VAR 0 1
21619: PUSH
21620: LD_INT 2
21622: ARRAY
21623: PUSH
21624: LD_INT 3
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PPUSH
21637: CALL_OW 69
21641: IFFALSE 21688
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
21643: LD_VAR 0 1
21647: PUSH
21648: LD_INT 1
21650: ARRAY
21651: PPUSH
21652: LD_VAR 0 1
21656: PUSH
21657: LD_INT 2
21659: ARRAY
21660: PPUSH
21661: LD_INT 5
21663: PPUSH
21664: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
21668: LD_ADDR_EXP 50
21672: PUSH
21673: LD_EXP 50
21677: PPUSH
21678: LD_VAR 0 1
21682: PPUSH
21683: CALL_OW 3
21687: ST_TO_ADDR
// end ; end ;
21688: GO 21590
21690: POP
21691: POP
// end ; end_of_file
21692: PPOPN 1
21694: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
21695: LD_VAR 0 1
21699: PPUSH
21700: CALL_OW 255
21704: PUSH
21705: LD_INT 4
21707: EQUAL
21708: IFFALSE 21722
// SetBName ( building , epsilon ) ;
21710: LD_VAR 0 1
21714: PPUSH
21715: LD_STRING epsilon
21717: PPUSH
21718: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
21722: LD_VAR 0 1
21726: PPUSH
21727: CALL_OW 255
21731: PUSH
21732: LD_INT 1
21734: EQUAL
21735: PUSH
21736: LD_VAR 0 1
21740: PPUSH
21741: CALL_OW 266
21745: PUSH
21746: LD_INT 0
21748: EQUAL
21749: AND
21750: IFFALSE 21764
// SetBName ( building , epsilon ) ;
21752: LD_VAR 0 1
21756: PPUSH
21757: LD_STRING epsilon
21759: PPUSH
21760: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
21764: LD_VAR 0 1
21768: PPUSH
21769: CALL_OW 255
21773: PUSH
21774: LD_INT 3
21776: EQUAL
21777: PUSH
21778: LD_VAR 0 1
21782: PPUSH
21783: CALL_OW 266
21787: PUSH
21788: LD_INT 0
21790: EQUAL
21791: AND
21792: IFFALSE 21806
// SetBName ( building , chuikov ) ;
21794: LD_VAR 0 1
21798: PPUSH
21799: LD_STRING chuikov
21801: PPUSH
21802: CALL_OW 500
// if GetSide ( building ) = 2 then
21806: LD_VAR 0 1
21810: PPUSH
21811: CALL_OW 255
21815: PUSH
21816: LD_INT 2
21818: EQUAL
21819: IFFALSE 21875
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
21821: LD_VAR 0 1
21825: PPUSH
21826: CALL_OW 266
21830: PUSH
21831: LD_INT 6
21833: EQUAL
21834: PUSH
21835: LD_VAR 0 1
21839: PPUSH
21840: CALL_OW 266
21844: PUSH
21845: LD_INT 9
21847: EQUAL
21848: OR
21849: IFFALSE 21875
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21851: LD_VAR 0 1
21855: PPUSH
21856: LD_INT 10
21858: PPUSH
21859: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
21863: LD_VAR 0 1
21867: PPUSH
21868: LD_INT 11
21870: PPUSH
21871: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
21875: LD_VAR 0 1
21879: PPUSH
21880: CALL_OW 255
21884: PUSH
21885: LD_INT 3
21887: EQUAL
21888: IFFALSE 21914
// begin if GetBType ( building ) = 2 then
21890: LD_VAR 0 1
21894: PPUSH
21895: CALL_OW 266
21899: PUSH
21900: LD_INT 2
21902: EQUAL
21903: IFFALSE 21914
// AddComUpgrade ( building ) ;
21905: LD_VAR 0 1
21909: PPUSH
21910: CALL_OW 206
// end ; end ;
21914: PPOPN 2
21916: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
21917: LD_INT 0
21919: PPUSH
21920: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
21921: LD_VAR 0 1
21925: PUSH
21926: LD_INT 22
21928: PUSH
21929: LD_INT 3
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 23
21938: PUSH
21939: LD_INT 3
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: LD_INT 21
21948: PUSH
21949: LD_INT 2
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: LIST
21960: PPUSH
21961: CALL_OW 69
21965: IN
21966: PUSH
21967: LD_EXP 59
21971: NOT
21972: AND
21973: IFFALSE 22004
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
21975: LD_ADDR_EXP 59
21979: PUSH
21980: LD_VAR 0 1
21984: PPUSH
21985: CALL_OW 250
21989: PUSH
21990: LD_VAR 0 1
21994: PPUSH
21995: CALL_OW 251
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: ST_TO_ADDR
// end ;
22004: PPOPN 3
22006: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
22007: LD_VAR 0 2
22011: PPUSH
22012: CALL_OW 255
22016: PUSH
22017: LD_INT 3
22019: EQUAL
22020: PUSH
22021: LD_EXP 35
22025: PPUSH
22026: CALL_OW 255
22030: PUSH
22031: LD_INT 3
22033: EQUAL
22034: AND
22035: PUSH
22036: LD_EXP 35
22040: PPUSH
22041: CALL_OW 302
22045: AND
22046: IFFALSE 22062
// ComEnterUnit ( human , ruFab ) ;
22048: LD_VAR 0 2
22052: PPUSH
22053: LD_EXP 35
22057: PPUSH
22058: CALL_OW 120
// end ;
22062: PPOPN 2
22064: END
// on BuildingComplete ( building ) do var i , sol , tmp ;
22065: LD_INT 0
22067: PPUSH
22068: PPUSH
22069: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22070: LD_VAR 0 1
22074: PPUSH
22075: CALL_OW 255
22079: PUSH
22080: LD_INT 1
22082: EQUAL
22083: PUSH
22084: LD_EXP 63
22088: PUSH
22089: LD_INT 0
22091: EQUAL
22092: AND
22093: IFFALSE 22295
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
22095: LD_VAR 0 1
22099: PPUSH
22100: CALL_OW 266
22104: PUSH
22105: LD_INT 26
22107: EQUAL
22108: PUSH
22109: LD_VAR 0 1
22113: PPUSH
22114: CALL_OW 266
22118: PUSH
22119: LD_INT 27
22121: EQUAL
22122: OR
22123: PUSH
22124: LD_VAR 0 1
22128: PPUSH
22129: CALL_OW 266
22133: PUSH
22134: LD_INT 28
22136: EQUAL
22137: OR
22138: IFFALSE 22295
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
22140: LD_INT 22
22142: PUSH
22143: LD_INT 1
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 2
22152: PUSH
22153: LD_INT 30
22155: PUSH
22156: LD_INT 7
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 30
22165: PUSH
22166: LD_INT 8
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: LIST
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PPUSH
22182: CALL_OW 69
22186: PUSH
22187: LD_INT 0
22189: GREATER
22190: IFFALSE 22295
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22192: LD_ADDR_VAR 0 2
22196: PUSH
22197: LD_INT 22
22199: PUSH
22200: LD_INT 1
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 2
22209: PUSH
22210: LD_INT 30
22212: PUSH
22213: LD_INT 7
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 30
22222: PUSH
22223: LD_INT 8
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: LIST
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PPUSH
22239: CALL_OW 69
22243: PUSH
22244: FOR_IN
22245: IFFALSE 22293
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22247: LD_VAR 0 2
22251: PPUSH
22252: LD_INT 1
22254: PPUSH
22255: CALL_OW 268
22259: PUSH
22260: LD_INT 11
22262: EQUAL
22263: PUSH
22264: LD_VAR 0 2
22268: PPUSH
22269: LD_INT 2
22271: PPUSH
22272: CALL_OW 268
22276: PUSH
22277: LD_INT 11
22279: EQUAL
22280: OR
22281: IFFALSE 22291
// eventVar1 = 1 ;
22283: LD_ADDR_EXP 63
22287: PUSH
22288: LD_INT 1
22290: ST_TO_ADDR
22291: GO 22244
22293: POP
22294: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
22295: LD_VAR 0 1
22299: PPUSH
22300: CALL_OW 255
22304: PUSH
22305: LD_INT 3
22307: EQUAL
22308: IFFALSE 22788
// begin if GetBType ( building ) = b_depot then
22310: LD_VAR 0 1
22314: PPUSH
22315: CALL_OW 266
22319: PUSH
22320: LD_INT 0
22322: EQUAL
22323: IFFALSE 22395
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
22325: LD_VAR 0 1
22329: PPUSH
22330: CALL_OW 274
22334: PPUSH
22335: LD_INT 1
22337: PPUSH
22338: LD_INT 5000
22340: PPUSH
22341: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
22345: LD_VAR 0 1
22349: PPUSH
22350: CALL_OW 274
22354: PPUSH
22355: LD_INT 2
22357: PPUSH
22358: LD_INT 300
22360: PPUSH
22361: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
22365: LD_VAR 0 1
22369: PPUSH
22370: CALL_OW 274
22374: PPUSH
22375: LD_INT 3
22377: PPUSH
22378: LD_INT 100
22380: PPUSH
22381: CALL_OW 277
// ruDepot = building ;
22385: LD_ADDR_EXP 30
22389: PUSH
22390: LD_VAR 0 1
22394: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
22395: LD_VAR 0 1
22399: PPUSH
22400: CALL_OW 266
22404: PUSH
22405: LD_INT 0
22407: EQUAL
22408: PUSH
22409: LD_VAR 0 1
22413: PPUSH
22414: CALL_OW 266
22418: PUSH
22419: LD_INT 2
22421: EQUAL
22422: OR
22423: PUSH
22424: LD_VAR 0 1
22428: PPUSH
22429: CALL_OW 266
22433: PUSH
22434: LD_INT 4
22436: EQUAL
22437: OR
22438: IFFALSE 22449
// ComUpgrade ( building ) ;
22440: LD_VAR 0 1
22444: PPUSH
22445: CALL_OW 146
// if GetBType ( building ) = b_lab then
22449: LD_VAR 0 1
22453: PPUSH
22454: CALL_OW 266
22458: PUSH
22459: LD_INT 6
22461: EQUAL
22462: IFFALSE 22665
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
22464: LD_INT 22
22466: PUSH
22467: LD_INT 3
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: LD_INT 30
22476: PUSH
22477: LD_INT 8
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PPUSH
22488: CALL_OW 69
22492: PUSH
22493: LD_INT 0
22495: EQUAL
22496: IFFALSE 22534
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22498: LD_VAR 0 1
22502: PPUSH
22503: LD_INT 10
22505: PPUSH
22506: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
22510: LD_VAR 0 1
22514: PPUSH
22515: LD_INT 12
22517: PPUSH
22518: CALL_OW 207
// ruLab1 = building ;
22522: LD_ADDR_EXP 31
22526: PUSH
22527: LD_VAR 0 1
22531: ST_TO_ADDR
// end else
22532: GO 22568
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
22534: LD_VAR 0 1
22538: PPUSH
22539: LD_INT 11
22541: PPUSH
22542: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
22546: LD_VAR 0 1
22550: PPUSH
22551: LD_INT 14
22553: PPUSH
22554: CALL_OW 207
// ruLab2 = building ;
22558: LD_ADDR_EXP 32
22562: PUSH
22563: LD_VAR 0 1
22567: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
22568: LD_INT 3
22570: PPUSH
22571: LD_VAR 0 1
22575: PPUSH
22576: LD_INT 3
22578: PPUSH
22579: CALL 14990 0 3
// if ruDestroyedBuildings > 0 then
22583: LD_EXP 42
22587: PUSH
22588: LD_INT 0
22590: GREATER
22591: IFFALSE 22665
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
22593: LD_ADDR_EXP 42
22597: PUSH
22598: LD_EXP 42
22602: PPUSH
22603: LD_INT 1
22605: PPUSH
22606: CALL_OW 3
22610: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
22611: LD_ADDR_EXP 42
22615: PUSH
22616: LD_EXP 42
22620: PPUSH
22621: LD_INT 1
22623: PPUSH
22624: CALL_OW 3
22628: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
22629: LD_ADDR_EXP 42
22633: PUSH
22634: LD_EXP 42
22638: PPUSH
22639: LD_INT 1
22641: PPUSH
22642: CALL_OW 3
22646: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
22647: LD_ADDR_EXP 42
22651: PUSH
22652: LD_EXP 42
22656: PPUSH
22657: LD_INT 1
22659: PPUSH
22660: CALL_OW 3
22664: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
22665: LD_VAR 0 1
22669: PPUSH
22670: CALL_OW 266
22674: PUSH
22675: LD_INT 32
22677: EQUAL
22678: IFFALSE 22715
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22680: LD_VAR 0 1
22684: PPUSH
22685: LD_INT 44
22687: PUSH
22688: LD_INT 45
22690: PUSH
22691: LD_INT 46
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 1
22701: PPUSH
22702: LD_INT 3
22704: PPUSH
22705: CALL_OW 12
22709: ARRAY
22710: PPUSH
22711: CALL_OW 208
// if GetBType ( building ) = b_turret then
22715: LD_VAR 0 1
22719: PPUSH
22720: CALL_OW 266
22724: PUSH
22725: LD_INT 33
22727: EQUAL
22728: IFFALSE 22765
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22730: LD_VAR 0 1
22734: PPUSH
22735: LD_INT 44
22737: PUSH
22738: LD_INT 45
22740: PUSH
22741: LD_INT 46
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 1
22751: PPUSH
22752: LD_INT 3
22754: PPUSH
22755: CALL_OW 12
22759: ARRAY
22760: PPUSH
22761: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
22765: LD_VAR 0 1
22769: PPUSH
22770: CALL_OW 266
22774: PUSH
22775: LD_INT 24
22777: EQUAL
22778: IFFALSE 22788
// russianAI = 1 ;
22780: LD_ADDR_EXP 39
22784: PUSH
22785: LD_INT 1
22787: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
22788: LD_VAR 0 1
22792: PPUSH
22793: CALL_OW 255
22797: PUSH
22798: LD_INT 2
22800: EQUAL
22801: IFFALSE 23470
// begin if GetBType ( building ) = b_breastwork then
22803: LD_VAR 0 1
22807: PPUSH
22808: CALL_OW 266
22812: PUSH
22813: LD_INT 31
22815: EQUAL
22816: IFFALSE 22962
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
22818: LD_ADDR_VAR 0 3
22822: PUSH
22823: LD_INT 22
22825: PUSH
22826: LD_INT 2
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 2
22835: PUSH
22836: LD_INT 25
22838: PUSH
22839: LD_INT 1
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 25
22848: PUSH
22849: LD_INT 8
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: LIST
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PPUSH
22865: CALL_OW 69
22869: PUSH
22870: LD_EXP 26
22874: DIFF
22875: ST_TO_ADDR
// if not sol then
22876: LD_VAR 0 3
22880: NOT
22881: IFFALSE 22885
// exit ;
22883: GO 23470
// for i in sol do
22885: LD_ADDR_VAR 0 2
22889: PUSH
22890: LD_VAR 0 3
22894: PUSH
22895: FOR_IN
22896: IFFALSE 22960
// if not GetTag ( i ) then
22898: LD_VAR 0 2
22902: PPUSH
22903: CALL_OW 110
22907: NOT
22908: IFFALSE 22958
// begin if IsInUnit ( i ) then
22910: LD_VAR 0 2
22914: PPUSH
22915: CALL_OW 310
22919: IFFALSE 22930
// ComExitBuilding ( i ) ;
22921: LD_VAR 0 2
22925: PPUSH
22926: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
22930: LD_VAR 0 2
22934: PPUSH
22935: LD_VAR 0 1
22939: PPUSH
22940: CALL_OW 180
// SetTag ( i , 11 ) ;
22944: LD_VAR 0 2
22948: PPUSH
22949: LD_INT 11
22951: PPUSH
22952: CALL_OW 109
// break ;
22956: GO 22960
// end ;
22958: GO 22895
22960: POP
22961: POP
// end ; if GetBType ( building ) = b_depot then
22962: LD_VAR 0 1
22966: PPUSH
22967: CALL_OW 266
22971: PUSH
22972: LD_INT 0
22974: EQUAL
22975: IFFALSE 23061
// begin arDepot = building ;
22977: LD_ADDR_EXP 43
22981: PUSH
22982: LD_VAR 0 1
22986: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
22987: LD_INT 38
22989: PUSH
22990: LD_INT 47
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PPUSH
22997: LD_INT 71
22999: PPUSH
23000: LD_INT 19
23002: PPUSH
23003: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
23007: LD_VAR 0 1
23011: PPUSH
23012: CALL_OW 274
23016: PPUSH
23017: LD_INT 1
23019: PPUSH
23020: LD_INT 500
23022: PPUSH
23023: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
23027: LD_VAR 0 1
23031: PPUSH
23032: CALL_OW 274
23036: PPUSH
23037: LD_INT 3
23039: PPUSH
23040: LD_INT 30
23042: PPUSH
23043: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
23047: LD_EXP 26
23051: PPUSH
23052: LD_EXP 43
23056: PPUSH
23057: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
23061: LD_VAR 0 1
23065: PPUSH
23066: CALL_OW 266
23070: PUSH
23071: LD_INT 6
23073: EQUAL
23074: PUSH
23075: LD_VAR 0 1
23079: PPUSH
23080: CALL_OW 266
23084: PUSH
23085: LD_INT 9
23087: EQUAL
23088: OR
23089: IFFALSE 23140
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23091: LD_VAR 0 1
23095: PPUSH
23096: LD_INT 10
23098: PPUSH
23099: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
23103: LD_VAR 0 1
23107: PPUSH
23108: LD_INT 11
23110: PPUSH
23111: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
23115: LD_INT 2
23117: PPUSH
23118: LD_VAR 0 1
23122: PPUSH
23123: LD_INT 2
23125: PPUSH
23126: CALL 14990 0 3
// arLab = building ;
23130: LD_ADDR_EXP 44
23134: PUSH
23135: LD_VAR 0 1
23139: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23140: LD_VAR 0 1
23144: PPUSH
23145: CALL_OW 266
23149: PUSH
23150: LD_INT 2
23152: EQUAL
23153: PUSH
23154: LD_VAR 0 1
23158: PPUSH
23159: CALL_OW 266
23163: PUSH
23164: LD_INT 4
23166: EQUAL
23167: OR
23168: IFFALSE 23233
// begin ComUpgrade ( building ) ;
23170: LD_VAR 0 1
23174: PPUSH
23175: CALL_OW 146
// if GetBType ( building ) = b_armoury then
23179: LD_VAR 0 1
23183: PPUSH
23184: CALL_OW 266
23188: PUSH
23189: LD_INT 4
23191: EQUAL
23192: IFFALSE 23233
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , 75 , 21 ) ;
23194: LD_INT 22
23196: PUSH
23197: LD_INT 2
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 25
23206: PUSH
23207: LD_INT 1
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PPUSH
23218: CALL_OW 69
23222: PPUSH
23223: LD_INT 75
23225: PPUSH
23226: LD_INT 21
23228: PPUSH
23229: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
23233: LD_VAR 0 1
23237: PPUSH
23238: CALL_OW 266
23242: PUSH
23243: LD_INT 27
23245: EQUAL
23246: IFFALSE 23470
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
23248: LD_INT 22
23250: PUSH
23251: LD_INT 2
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 30
23260: PUSH
23261: LD_INT 27
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PPUSH
23272: CALL_OW 69
23276: PUSH
23277: LD_INT 2
23279: EQUAL
23280: IFFALSE 23470
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
23282: LD_ADDR_VAR 0 2
23286: PUSH
23287: LD_INT 22
23289: PUSH
23290: LD_INT 2
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 21
23299: PUSH
23300: LD_INT 1
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 25
23309: PUSH
23310: LD_INT 2
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: LIST
23321: PPUSH
23322: CALL_OW 69
23326: PUSH
23327: LD_INT 1
23329: ARRAY
23330: ST_TO_ADDR
// if not i then
23331: LD_VAR 0 2
23335: NOT
23336: IFFALSE 23340
// exit ;
23338: GO 23470
// AddComMoveXY ( i , 92 , 34 ) ;
23340: LD_VAR 0 2
23344: PPUSH
23345: LD_INT 92
23347: PPUSH
23348: LD_INT 34
23350: PPUSH
23351: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
23355: LD_VAR 0 2
23359: PPUSH
23360: LD_INT 35
23362: PPUSH
23363: CALL_OW 202
// AddComMoveXY ( i , 82 , 57 ) ;
23367: LD_VAR 0 2
23371: PPUSH
23372: LD_INT 82
23374: PPUSH
23375: LD_INT 57
23377: PPUSH
23378: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
23382: LD_VAR 0 2
23386: PPUSH
23387: LD_INT 35
23389: PPUSH
23390: CALL_OW 202
// AddComMoveXY ( i , 36 , 28 ) ;
23394: LD_VAR 0 2
23398: PPUSH
23399: LD_INT 36
23401: PPUSH
23402: LD_INT 28
23404: PPUSH
23405: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
23409: LD_VAR 0 2
23413: PPUSH
23414: LD_INT 35
23416: PPUSH
23417: CALL_OW 202
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
23421: LD_INT 22
23423: PUSH
23424: LD_INT 2
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 21
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 25
23443: PUSH
23444: LD_INT 2
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: LIST
23455: PPUSH
23456: CALL_OW 69
23460: PPUSH
23461: LD_EXP 43
23465: PPUSH
23466: CALL_OW 180
// end ; end ; end ;
23470: PPOPN 4
23472: END
// on UpgradeComplete ( building ) do var i ;
23473: LD_INT 0
23475: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
23476: LD_VAR 0 1
23480: PPUSH
23481: CALL_OW 255
23485: PUSH
23486: LD_INT 1
23488: EQUAL
23489: PUSH
23490: LD_EXP 63
23494: PUSH
23495: LD_INT 0
23497: EQUAL
23498: AND
23499: IFFALSE 23697
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
23501: LD_VAR 0 1
23505: PPUSH
23506: CALL_OW 266
23510: PUSH
23511: LD_INT 7
23513: EQUAL
23514: PUSH
23515: LD_VAR 0 1
23519: PPUSH
23520: CALL_OW 266
23524: PUSH
23525: LD_INT 8
23527: EQUAL
23528: OR
23529: IFFALSE 23697
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
23531: LD_INT 22
23533: PUSH
23534: LD_INT 1
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 2
23543: PUSH
23544: LD_INT 30
23546: PUSH
23547: LD_INT 26
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 30
23556: PUSH
23557: LD_INT 27
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 30
23566: PUSH
23567: LD_INT 28
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PPUSH
23584: CALL_OW 69
23588: PUSH
23589: LD_INT 0
23591: GREATER
23592: IFFALSE 23697
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
23594: LD_ADDR_VAR 0 2
23598: PUSH
23599: LD_INT 22
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 2
23611: PUSH
23612: LD_INT 30
23614: PUSH
23615: LD_INT 7
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 30
23624: PUSH
23625: LD_INT 8
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: LIST
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PPUSH
23641: CALL_OW 69
23645: PUSH
23646: FOR_IN
23647: IFFALSE 23695
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
23649: LD_VAR 0 2
23653: PPUSH
23654: LD_INT 1
23656: PPUSH
23657: CALL_OW 268
23661: PUSH
23662: LD_INT 11
23664: EQUAL
23665: PUSH
23666: LD_VAR 0 2
23670: PPUSH
23671: LD_INT 2
23673: PPUSH
23674: CALL_OW 268
23678: PUSH
23679: LD_INT 11
23681: EQUAL
23682: OR
23683: IFFALSE 23693
// eventVar1 = 1 ;
23685: LD_ADDR_EXP 63
23689: PUSH
23690: LD_INT 1
23692: ST_TO_ADDR
23693: GO 23646
23695: POP
23696: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
23697: LD_VAR 0 1
23701: PPUSH
23702: CALL_OW 255
23706: PUSH
23707: LD_INT 2
23709: EQUAL
23710: IFFALSE 23815
// begin if GetBType ( building ) = b_barracks then
23712: LD_VAR 0 1
23716: PPUSH
23717: CALL_OW 266
23721: PUSH
23722: LD_INT 5
23724: EQUAL
23725: IFFALSE 23815
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
23727: LD_ADDR_VAR 0 2
23731: PUSH
23732: LD_INT 22
23734: PUSH
23735: LD_INT 2
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 25
23744: PUSH
23745: LD_INT 1
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 3
23754: PUSH
23755: LD_INT 54
23757: PUSH
23758: EMPTY
23759: LIST
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: LIST
23769: PPUSH
23770: CALL_OW 69
23774: PUSH
23775: LD_EXP 26
23779: PUSH
23780: EMPTY
23781: LIST
23782: DIFF
23783: PUSH
23784: FOR_IN
23785: IFFALSE 23803
// ComEnterUnit ( i , building ) ;
23787: LD_VAR 0 2
23791: PPUSH
23792: LD_VAR 0 1
23796: PPUSH
23797: CALL_OW 120
23801: GO 23784
23803: POP
23804: POP
// arArm = building ;
23805: LD_ADDR_EXP 45
23809: PUSH
23810: LD_VAR 0 1
23814: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
23815: LD_VAR 0 1
23819: PPUSH
23820: CALL_OW 255
23824: PUSH
23825: LD_INT 3
23827: EQUAL
23828: IFFALSE 24301
// begin if GetBType ( building ) = b_factory then
23830: LD_VAR 0 1
23834: PPUSH
23835: CALL_OW 266
23839: PUSH
23840: LD_INT 3
23842: EQUAL
23843: IFFALSE 23910
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
23845: LD_ADDR_VAR 0 2
23849: PUSH
23850: LD_INT 22
23852: PUSH
23853: LD_INT 3
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 25
23862: PUSH
23863: LD_INT 3
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PPUSH
23874: CALL_OW 69
23878: PUSH
23879: FOR_IN
23880: IFFALSE 23898
// ComEnterUnit ( i , building ) ;
23882: LD_VAR 0 2
23886: PPUSH
23887: LD_VAR 0 1
23891: PPUSH
23892: CALL_OW 120
23896: GO 23879
23898: POP
23899: POP
// ruFab = building ;
23900: LD_ADDR_EXP 35
23904: PUSH
23905: LD_VAR 0 1
23909: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
23910: LD_INT 22
23912: PUSH
23913: LD_INT 3
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 21
23922: PUSH
23923: LD_INT 3
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 30
23932: PUSH
23933: LD_INT 8
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: LIST
23944: PPUSH
23945: CALL_OW 69
23949: PUSH
23950: LD_INT 2
23952: EQUAL
23953: IFFALSE 24161
// begin for i = 1 to 2 do
23955: LD_ADDR_VAR 0 2
23959: PUSH
23960: DOUBLE
23961: LD_INT 1
23963: DEC
23964: ST_TO_ADDR
23965: LD_INT 2
23967: PUSH
23968: FOR_TO
23969: IFFALSE 24056
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
23971: LD_INT 22
23973: PUSH
23974: LD_INT 3
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PUSH
23981: LD_INT 25
23983: PUSH
23984: LD_INT 4
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PPUSH
23995: CALL_OW 69
23999: PUSH
24000: LD_VAR 0 2
24004: ARRAY
24005: PPUSH
24006: LD_INT 22
24008: PUSH
24009: LD_INT 3
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 21
24018: PUSH
24019: LD_INT 3
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 30
24028: PUSH
24029: LD_INT 8
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: LIST
24040: PPUSH
24041: CALL_OW 69
24045: PUSH
24046: LD_INT 1
24048: ARRAY
24049: PPUSH
24050: CALL_OW 120
24054: GO 23968
24056: POP
24057: POP
// for i = 3 to 4 do
24058: LD_ADDR_VAR 0 2
24062: PUSH
24063: DOUBLE
24064: LD_INT 3
24066: DEC
24067: ST_TO_ADDR
24068: LD_INT 4
24070: PUSH
24071: FOR_TO
24072: IFFALSE 24159
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
24074: LD_INT 22
24076: PUSH
24077: LD_INT 3
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 25
24086: PUSH
24087: LD_INT 4
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PPUSH
24098: CALL_OW 69
24102: PUSH
24103: LD_VAR 0 2
24107: ARRAY
24108: PPUSH
24109: LD_INT 22
24111: PUSH
24112: LD_INT 3
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: LD_INT 21
24121: PUSH
24122: LD_INT 3
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 30
24131: PUSH
24132: LD_INT 8
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: LIST
24143: PPUSH
24144: CALL_OW 69
24148: PUSH
24149: LD_INT 2
24151: ARRAY
24152: PPUSH
24153: CALL_OW 120
24157: GO 24071
24159: POP
24160: POP
// end ; if GetBType ( building ) = b_barracks then
24161: LD_VAR 0 1
24165: PPUSH
24166: CALL_OW 266
24170: PUSH
24171: LD_INT 5
24173: EQUAL
24174: IFFALSE 24301
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
24176: LD_ADDR_VAR 0 2
24180: PUSH
24181: LD_INT 22
24183: PUSH
24184: LD_INT 3
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 25
24193: PUSH
24194: LD_INT 1
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 3
24203: PUSH
24204: LD_INT 54
24206: PUSH
24207: EMPTY
24208: LIST
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: LIST
24218: PPUSH
24219: CALL_OW 69
24223: PUSH
24224: FOR_IN
24225: IFFALSE 24243
// ComEnterUnit ( i , building ) ;
24227: LD_VAR 0 2
24231: PPUSH
24232: LD_VAR 0 1
24236: PPUSH
24237: CALL_OW 120
24241: GO 24224
24243: POP
24244: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
24245: LD_INT 22
24247: PUSH
24248: LD_INT 3
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 30
24257: PUSH
24258: LD_INT 5
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PPUSH
24269: CALL_OW 69
24273: PUSH
24274: LD_INT 0
24276: EQUAL
24277: IFFALSE 24291
// ruArm1 = building else
24279: LD_ADDR_EXP 33
24283: PUSH
24284: LD_VAR 0 1
24288: ST_TO_ADDR
24289: GO 24301
// ruArm2 = building ;
24291: LD_ADDR_EXP 34
24295: PUSH
24296: LD_VAR 0 1
24300: ST_TO_ADDR
// end ; end ; end ;
24301: PPOPN 2
24303: END
// on EnterBuilding ( building , human ) do var rnd ;
24304: LD_INT 0
24306: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
24307: LD_VAR 0 2
24311: PPUSH
24312: CALL_OW 255
24316: PUSH
24317: LD_INT 2
24319: EQUAL
24320: PUSH
24321: LD_VAR 0 2
24325: PPUSH
24326: CALL_OW 257
24330: PUSH
24331: LD_INT 1
24333: EQUAL
24334: AND
24335: PUSH
24336: LD_VAR 0 1
24340: PUSH
24341: LD_EXP 45
24345: EQUAL
24346: AND
24347: IFFALSE 24394
// begin wait ( 0 0$1 ) ;
24349: LD_INT 35
24351: PPUSH
24352: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
24356: LD_ADDR_VAR 0 3
24360: PUSH
24361: LD_INT 1
24363: PPUSH
24364: LD_INT 100
24366: PPUSH
24367: CALL_OW 12
24371: ST_TO_ADDR
// if rnd > 50 then
24372: LD_VAR 0 3
24376: PUSH
24377: LD_INT 50
24379: GREATER
24380: IFFALSE 24394
// SetClass ( human , class_mortar ) ;
24382: LD_VAR 0 2
24386: PPUSH
24387: LD_INT 8
24389: PPUSH
24390: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
24394: LD_VAR 0 2
24398: PUSH
24399: LD_INT 22
24401: PUSH
24402: LD_INT 2
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 25
24411: PUSH
24412: LD_INT 12
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PPUSH
24423: CALL_OW 69
24427: IN
24428: IFFALSE 24478
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
24430: LD_VAR 0 1
24434: PPUSH
24435: CALL_OW 266
24439: PUSH
24440: LD_INT 0
24442: PUSH
24443: LD_INT 1
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: IN
24450: IFFALSE 24466
// SetClass ( human , class_apeman_engineer ) else
24452: LD_VAR 0 2
24456: PPUSH
24457: LD_INT 16
24459: PPUSH
24460: CALL_OW 336
24464: GO 24478
// SetClass ( human , class_apeman_soldier ) ;
24466: LD_VAR 0 2
24470: PPUSH
24471: LD_INT 15
24473: PPUSH
24474: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
24478: LD_VAR 0 2
24482: PPUSH
24483: CALL_OW 255
24487: PUSH
24488: LD_INT 3
24490: EQUAL
24491: PUSH
24492: LD_VAR 0 2
24496: PPUSH
24497: CALL_OW 257
24501: PUSH
24502: LD_INT 1
24504: EQUAL
24505: AND
24506: PUSH
24507: LD_VAR 0 1
24511: PUSH
24512: LD_EXP 33
24516: EQUAL
24517: PUSH
24518: LD_VAR 0 1
24522: PUSH
24523: LD_EXP 34
24527: EQUAL
24528: OR
24529: PUSH
24530: EMPTY
24531: LIST
24532: AND
24533: IFFALSE 24554
// begin wait ( 0 0$1 ) ;
24535: LD_INT 35
24537: PPUSH
24538: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
24542: LD_VAR 0 2
24546: PPUSH
24547: LD_INT 9
24549: PPUSH
24550: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
24554: LD_VAR 0 2
24558: PPUSH
24559: CALL_OW 255
24563: PUSH
24564: LD_INT 3
24566: EQUAL
24567: PUSH
24568: LD_VAR 0 2
24572: PPUSH
24573: CALL_OW 257
24577: PUSH
24578: LD_INT 9
24580: EQUAL
24581: AND
24582: PUSH
24583: LD_VAR 0 1
24587: PPUSH
24588: CALL_OW 266
24592: PUSH
24593: LD_INT 32
24595: EQUAL
24596: AND
24597: IFFALSE 24618
// begin wait ( 0 0$1 ) ;
24599: LD_INT 35
24601: PPUSH
24602: CALL_OW 67
// SetClass ( human , 1 ) ;
24606: LD_VAR 0 2
24610: PPUSH
24611: LD_INT 1
24613: PPUSH
24614: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
24618: LD_VAR 0 2
24622: PPUSH
24623: CALL_OW 255
24627: PUSH
24628: LD_INT 3
24630: EQUAL
24631: PUSH
24632: LD_VAR 0 2
24636: PPUSH
24637: CALL_OW 257
24641: PUSH
24642: LD_INT 3
24644: EQUAL
24645: AND
24646: PUSH
24647: LD_VAR 0 1
24651: PUSH
24652: LD_EXP 35
24656: EQUAL
24657: AND
24658: IFFALSE 24672
// SetLives ( human , 1000 ) ;
24660: LD_VAR 0 2
24664: PPUSH
24665: LD_INT 1000
24667: PPUSH
24668: CALL_OW 234
// end ;
24672: PPOPN 3
24674: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
24675: LD_VAR 0 1
24679: PUSH
24680: LD_INT 1
24682: EQUAL
24683: PUSH
24684: LD_VAR 0 2
24688: PUSH
24689: LD_INT 2
24691: EQUAL
24692: AND
24693: PUSH
24694: LD_INT 1
24696: PPUSH
24697: LD_INT 2
24699: PPUSH
24700: CALL_OW 81
24704: PUSH
24705: LD_INT 1
24707: EQUAL
24708: AND
24709: IFFALSE 24730
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
24711: LD_EXP 24
24715: PPUSH
24716: LD_STRING D6b-Pow-1
24718: PPUSH
24719: CALL_OW 94
// YouLost ( Powell ) ;
24723: LD_STRING Powell
24725: PPUSH
24726: CALL_OW 104
// end ; end ;
24730: PPOPN 2
24732: END
// every 0 0$10 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
24733: LD_INT 23
24735: PPUSH
24736: LD_INT 22
24738: PUSH
24739: LD_INT 1
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 21
24748: PUSH
24749: LD_INT 3
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PPUSH
24760: CALL_OW 70
24764: PUSH
24765: LD_INT 23
24767: PPUSH
24768: LD_INT 22
24770: PUSH
24771: LD_INT 1
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 21
24780: PUSH
24781: LD_INT 2
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PPUSH
24792: CALL_OW 70
24796: OR
24797: PUSH
24798: LD_INT 1
24800: PPUSH
24801: LD_INT 2
24803: PPUSH
24804: CALL_OW 81
24808: PUSH
24809: LD_INT 1
24811: EQUAL
24812: AND
24813: IFFALSE 24946
24815: GO 24817
24817: DISABLE
// begin enable ;
24818: ENABLE
// wait ( 0 0$10 ) ;
24819: LD_INT 350
24821: PPUSH
24822: CALL_OW 67
// if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
24826: LD_INT 23
24828: PPUSH
24829: LD_INT 22
24831: PUSH
24832: LD_INT 1
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 21
24841: PUSH
24842: LD_INT 3
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PPUSH
24853: CALL_OW 70
24857: PUSH
24858: LD_INT 23
24860: PPUSH
24861: LD_INT 22
24863: PUSH
24864: LD_INT 1
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 21
24873: PUSH
24874: LD_INT 2
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PPUSH
24885: CALL_OW 70
24889: OR
24890: PUSH
24891: LD_INT 1
24893: PPUSH
24894: LD_INT 2
24896: PPUSH
24897: CALL_OW 81
24901: PUSH
24902: LD_INT 1
24904: EQUAL
24905: AND
24906: IFFALSE 24946
// begin disable ;
24908: DISABLE
// InGameOn ;
24909: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
24913: LD_INT 73
24915: PPUSH
24916: LD_INT 18
24918: PPUSH
24919: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
24923: LD_EXP 24
24927: PPUSH
24928: LD_STRING D6b-Pow-1
24930: PPUSH
24931: CALL_OW 94
// YouLost ( Powell ) ;
24935: LD_STRING Powell
24937: PPUSH
24938: CALL_OW 104
// InGameOff ;
24942: CALL_OW 9
// end ; end ;
24946: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
24947: LD_VAR 0 1
24951: PUSH
24952: LD_EXP 1
24956: EQUAL
24957: IFFALSE 24966
// YouLost ( JMM ) ;
24959: LD_STRING JMM
24961: PPUSH
24962: CALL_OW 104
// if unit = Khatam then
24966: LD_VAR 0 1
24970: PUSH
24971: LD_EXP 14
24975: EQUAL
24976: IFFALSE 24986
// KhatamStatus = 0 ;
24978: LD_ADDR_EXP 53
24982: PUSH
24983: LD_INT 0
24985: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
24986: LD_VAR 0 1
24990: PPUSH
24991: CALL_OW 255
24995: PUSH
24996: LD_INT 3
24998: EQUAL
24999: PUSH
25000: LD_VAR 0 1
25004: PPUSH
25005: CALL_OW 247
25009: PUSH
25010: LD_INT 3
25012: EQUAL
25013: AND
25014: IFFALSE 25706
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
25016: LD_VAR 0 1
25020: PPUSH
25021: CALL_OW 266
25025: PUSH
25026: LD_INT 31
25028: EQUAL
25029: PUSH
25030: LD_VAR 0 1
25034: PPUSH
25035: CALL_OW 266
25039: PUSH
25040: LD_INT 32
25042: EQUAL
25043: OR
25044: PUSH
25045: LD_VAR 0 1
25049: PPUSH
25050: CALL_OW 266
25054: PUSH
25055: LD_INT 36
25057: EQUAL
25058: OR
25059: PUSH
25060: LD_VAR 0 1
25064: PPUSH
25065: CALL_OW 266
25069: PUSH
25070: LD_INT 0
25072: EQUAL
25073: OR
25074: PUSH
25075: LD_VAR 0 1
25079: PPUSH
25080: CALL_OW 266
25084: PUSH
25085: LD_INT 24
25087: EQUAL
25088: OR
25089: PUSH
25090: LD_VAR 0 1
25094: PPUSH
25095: CALL_OW 266
25099: PUSH
25100: LD_INT 17
25102: EQUAL
25103: OR
25104: PUSH
25105: LD_VAR 0 1
25109: PPUSH
25110: CALL_OW 266
25114: PUSH
25115: LD_INT 25
25117: EQUAL
25118: OR
25119: PUSH
25120: LD_VAR 0 1
25124: PPUSH
25125: CALL_OW 266
25129: PUSH
25130: LD_INT 19
25132: EQUAL
25133: OR
25134: PUSH
25135: LD_VAR 0 1
25139: PPUSH
25140: CALL_OW 266
25144: PUSH
25145: LD_INT 20
25147: EQUAL
25148: OR
25149: PUSH
25150: LD_VAR 0 1
25154: PPUSH
25155: CALL_OW 266
25159: PUSH
25160: LD_INT 18
25162: EQUAL
25163: OR
25164: PUSH
25165: LD_VAR 0 1
25169: PPUSH
25170: CALL_OW 266
25174: PUSH
25175: LD_INT 21
25177: EQUAL
25178: OR
25179: PUSH
25180: LD_VAR 0 1
25184: PPUSH
25185: CALL_OW 266
25189: PUSH
25190: LD_INT 23
25192: EQUAL
25193: OR
25194: PUSH
25195: LD_VAR 0 1
25199: PPUSH
25200: CALL_OW 266
25204: PUSH
25205: LD_INT 16
25207: EQUAL
25208: OR
25209: PUSH
25210: LD_VAR 0 1
25214: PPUSH
25215: CALL_OW 266
25219: PUSH
25220: LD_INT 6
25222: EQUAL
25223: OR
25224: PUSH
25225: LD_VAR 0 1
25229: PPUSH
25230: CALL_OW 266
25234: PUSH
25235: LD_INT 29
25237: EQUAL
25238: OR
25239: PUSH
25240: LD_VAR 0 1
25244: PPUSH
25245: CALL_OW 266
25249: PUSH
25250: LD_INT 26
25252: EQUAL
25253: OR
25254: PUSH
25255: LD_VAR 0 1
25259: PPUSH
25260: CALL_OW 266
25264: PUSH
25265: LD_INT 30
25267: EQUAL
25268: OR
25269: PUSH
25270: LD_VAR 0 1
25274: PPUSH
25275: CALL_OW 266
25279: PUSH
25280: LD_INT 28
25282: EQUAL
25283: OR
25284: PUSH
25285: LD_VAR 0 1
25289: PPUSH
25290: CALL_OW 266
25294: PUSH
25295: LD_INT 27
25297: EQUAL
25298: OR
25299: PUSH
25300: LD_VAR 0 1
25304: PPUSH
25305: CALL_OW 266
25309: PUSH
25310: LD_INT 33
25312: EQUAL
25313: OR
25314: PUSH
25315: LD_VAR 0 1
25319: PPUSH
25320: CALL_OW 266
25324: PUSH
25325: LD_INT 2
25327: EQUAL
25328: OR
25329: PUSH
25330: LD_VAR 0 1
25334: PPUSH
25335: CALL_OW 266
25339: PUSH
25340: LD_INT 4
25342: EQUAL
25343: OR
25344: IFFALSE 25430
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
25346: LD_ADDR_EXP 42
25350: PUSH
25351: LD_EXP 42
25355: PUSH
25356: LD_VAR 0 1
25360: PPUSH
25361: CALL_OW 266
25365: ADD
25366: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
25367: LD_ADDR_EXP 42
25371: PUSH
25372: LD_EXP 42
25376: PUSH
25377: LD_VAR 0 1
25381: PPUSH
25382: CALL_OW 250
25386: ADD
25387: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
25388: LD_ADDR_EXP 42
25392: PUSH
25393: LD_EXP 42
25397: PUSH
25398: LD_VAR 0 1
25402: PPUSH
25403: CALL_OW 251
25407: ADD
25408: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
25409: LD_ADDR_EXP 42
25413: PUSH
25414: LD_EXP 42
25418: PUSH
25419: LD_VAR 0 1
25423: PPUSH
25424: CALL_OW 254
25428: ADD
25429: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
25430: LD_VAR 0 1
25434: PPUSH
25435: CALL_OW 266
25439: PUSH
25440: LD_INT 1
25442: EQUAL
25443: IFFALSE 25522
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
25445: LD_ADDR_EXP 42
25449: PUSH
25450: LD_EXP 42
25454: PUSH
25455: LD_INT 0
25457: ADD
25458: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
25459: LD_ADDR_EXP 42
25463: PUSH
25464: LD_EXP 42
25468: PUSH
25469: LD_VAR 0 1
25473: PPUSH
25474: CALL_OW 250
25478: ADD
25479: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
25480: LD_ADDR_EXP 42
25484: PUSH
25485: LD_EXP 42
25489: PUSH
25490: LD_VAR 0 1
25494: PPUSH
25495: CALL_OW 251
25499: ADD
25500: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
25501: LD_ADDR_EXP 42
25505: PUSH
25506: LD_EXP 42
25510: PUSH
25511: LD_VAR 0 1
25515: PPUSH
25516: CALL_OW 254
25520: ADD
25521: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
25522: LD_VAR 0 1
25526: PPUSH
25527: CALL_OW 266
25531: PUSH
25532: LD_INT 3
25534: EQUAL
25535: IFFALSE 25614
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
25537: LD_ADDR_EXP 42
25541: PUSH
25542: LD_EXP 42
25546: PUSH
25547: LD_INT 2
25549: ADD
25550: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
25551: LD_ADDR_EXP 42
25555: PUSH
25556: LD_EXP 42
25560: PUSH
25561: LD_VAR 0 1
25565: PPUSH
25566: CALL_OW 250
25570: ADD
25571: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
25572: LD_ADDR_EXP 42
25576: PUSH
25577: LD_EXP 42
25581: PUSH
25582: LD_VAR 0 1
25586: PPUSH
25587: CALL_OW 251
25591: ADD
25592: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
25593: LD_ADDR_EXP 42
25597: PUSH
25598: LD_EXP 42
25602: PUSH
25603: LD_VAR 0 1
25607: PPUSH
25608: CALL_OW 254
25612: ADD
25613: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
25614: LD_VAR 0 1
25618: PPUSH
25619: CALL_OW 266
25623: PUSH
25624: LD_INT 5
25626: EQUAL
25627: IFFALSE 25706
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
25629: LD_ADDR_EXP 42
25633: PUSH
25634: LD_EXP 42
25638: PUSH
25639: LD_INT 4
25641: ADD
25642: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
25643: LD_ADDR_EXP 42
25647: PUSH
25648: LD_EXP 42
25652: PUSH
25653: LD_VAR 0 1
25657: PPUSH
25658: CALL_OW 250
25662: ADD
25663: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
25664: LD_ADDR_EXP 42
25668: PUSH
25669: LD_EXP 42
25673: PUSH
25674: LD_VAR 0 1
25678: PPUSH
25679: CALL_OW 251
25683: ADD
25684: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
25685: LD_ADDR_EXP 42
25689: PUSH
25690: LD_EXP 42
25694: PUSH
25695: LD_VAR 0 1
25699: PPUSH
25700: CALL_OW 254
25704: ADD
25705: ST_TO_ADDR
// end ; end ; if ruMech and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
25706: LD_EXP 51
25710: PUSH
25711: LD_VAR 0 1
25715: PPUSH
25716: CALL_OW 257
25720: PUSH
25721: LD_INT 3
25723: EQUAL
25724: AND
25725: PUSH
25726: LD_VAR 0 1
25730: PPUSH
25731: CALL_OW 255
25735: PUSH
25736: LD_INT 3
25738: EQUAL
25739: AND
25740: PUSH
25741: LD_EXP 35
25745: PPUSH
25746: CALL_OW 302
25750: AND
25751: PUSH
25752: LD_EXP 35
25756: PPUSH
25757: CALL_OW 255
25761: PUSH
25762: LD_INT 3
25764: EQUAL
25765: AND
25766: IFFALSE 25850
// begin ruMech := ruMech - 1 ;
25768: LD_ADDR_EXP 51
25772: PUSH
25773: LD_EXP 51
25777: PUSH
25778: LD_INT 1
25780: MINUS
25781: ST_TO_ADDR
// uc_side = 3 ;
25782: LD_ADDR_OWVAR 20
25786: PUSH
25787: LD_INT 3
25789: ST_TO_ADDR
// uc_nation = 3 ;
25790: LD_ADDR_OWVAR 21
25794: PUSH
25795: LD_INT 3
25797: ST_TO_ADDR
// hc_gallery :=  ;
25798: LD_ADDR_OWVAR 33
25802: PUSH
25803: LD_STRING 
25805: ST_TO_ADDR
// hc_name :=  ;
25806: LD_ADDR_OWVAR 26
25810: PUSH
25811: LD_STRING 
25813: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
25814: LD_INT 0
25816: PPUSH
25817: LD_EXP 36
25821: PPUSH
25822: LD_EXP 37
25826: PPUSH
25827: CALL_OW 12
25831: PPUSH
25832: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
25836: CALL_OW 44
25840: PPUSH
25841: LD_EXP 35
25845: PPUSH
25846: CALL_OW 52
// end ; end ;
25850: PPOPN 1
25852: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
25853: LD_ADDR_OWVAR 57
25857: PUSH
25858: LD_INT 0
25860: ST_TO_ADDR
// fastEnd = 1 ;
25861: LD_ADDR_EXP 61
25865: PUSH
25866: LD_INT 1
25868: ST_TO_ADDR
// FinishMission ;
25869: CALL 26985 0 0
// end ;
25873: PPOPN 1
25875: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
25876: LD_VAR 0 1
25880: PPUSH
25881: CALL 28861 0 1
// end ; end_of_file
25885: PPOPN 1
25887: END
// export function PrepareNature ; var i , un ; begin
25888: LD_INT 0
25890: PPUSH
25891: PPUSH
25892: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
25893: LD_ADDR_VAR 0 2
25897: PUSH
25898: DOUBLE
25899: LD_INT 1
25901: DEC
25902: ST_TO_ADDR
25903: LD_OWVAR 67
25907: PUSH
25908: LD_INT 1
25910: PPUSH
25911: LD_INT 5
25913: PPUSH
25914: CALL_OW 12
25918: PLUS
25919: PUSH
25920: FOR_TO
25921: IFFALSE 26066
// begin hc_sex = sex_male ;
25923: LD_ADDR_OWVAR 27
25927: PUSH
25928: LD_INT 1
25930: ST_TO_ADDR
// uc_side = 0 ;
25931: LD_ADDR_OWVAR 20
25935: PUSH
25936: LD_INT 0
25938: ST_TO_ADDR
// uc_nation = nation_nature ;
25939: LD_ADDR_OWVAR 21
25943: PUSH
25944: LD_INT 0
25946: ST_TO_ADDR
// hc_class = class_apeman ;
25947: LD_ADDR_OWVAR 28
25951: PUSH
25952: LD_INT 12
25954: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
25955: LD_ADDR_OWVAR 31
25959: PUSH
25960: LD_INT 2
25962: PPUSH
25963: LD_INT 7
25965: PPUSH
25966: CALL_OW 12
25970: PUSH
25971: LD_OWVAR 67
25975: PLUS
25976: PUSH
25977: LD_INT 2
25979: PPUSH
25980: LD_INT 10
25982: PPUSH
25983: CALL_OW 12
25987: PUSH
25988: LD_INT 2
25990: PPUSH
25991: LD_INT 10
25993: PPUSH
25994: CALL_OW 12
25998: PUSH
25999: LD_INT 2
26001: PPUSH
26002: LD_INT 10
26004: PPUSH
26005: CALL_OW 12
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
26016: LD_ADDR_OWVAR 35
26020: PUSH
26021: LD_INT 5
26023: NEG
26024: PPUSH
26025: LD_INT 5
26027: PPUSH
26028: CALL_OW 12
26032: PUSH
26033: LD_OWVAR 67
26037: MUL
26038: ST_TO_ADDR
// un = CreateHuman ;
26039: LD_ADDR_VAR 0 3
26043: PUSH
26044: CALL_OW 44
26048: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
26049: LD_VAR 0 3
26053: PPUSH
26054: LD_INT 5
26056: PPUSH
26057: LD_INT 0
26059: PPUSH
26060: CALL_OW 49
// end ;
26064: GO 25920
26066: POP
26067: POP
// for i = 1 to Difficulty + 2 do
26068: LD_ADDR_VAR 0 2
26072: PUSH
26073: DOUBLE
26074: LD_INT 1
26076: DEC
26077: ST_TO_ADDR
26078: LD_OWVAR 67
26082: PUSH
26083: LD_INT 2
26085: PLUS
26086: PUSH
26087: FOR_TO
26088: IFFALSE 26197
// begin hc_sex = sex_male ;
26090: LD_ADDR_OWVAR 27
26094: PUSH
26095: LD_INT 1
26097: ST_TO_ADDR
// uc_side = 0 ;
26098: LD_ADDR_OWVAR 20
26102: PUSH
26103: LD_INT 0
26105: ST_TO_ADDR
// uc_nation = nation_nature ;
26106: LD_ADDR_OWVAR 21
26110: PUSH
26111: LD_INT 0
26113: ST_TO_ADDR
// hc_class = class_tiger ;
26114: LD_ADDR_OWVAR 28
26118: PUSH
26119: LD_INT 14
26121: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
26122: LD_ADDR_OWVAR 31
26126: PUSH
26127: LD_EXP 37
26131: PUSH
26132: LD_INT 0
26134: PUSH
26135: LD_INT 0
26137: PUSH
26138: LD_INT 0
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
26147: LD_ADDR_OWVAR 35
26151: PUSH
26152: LD_INT 5
26154: NEG
26155: PPUSH
26156: LD_INT 5
26158: PPUSH
26159: CALL_OW 12
26163: PUSH
26164: LD_OWVAR 67
26168: MUL
26169: ST_TO_ADDR
// un = CreateHuman ;
26170: LD_ADDR_VAR 0 3
26174: PUSH
26175: CALL_OW 44
26179: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
26180: LD_VAR 0 3
26184: PPUSH
26185: LD_INT 6
26187: PPUSH
26188: LD_INT 0
26190: PPUSH
26191: CALL_OW 49
// end ;
26195: GO 26087
26197: POP
26198: POP
// for i = 1 to rand ( 3 , 4 ) do
26199: LD_ADDR_VAR 0 2
26203: PUSH
26204: DOUBLE
26205: LD_INT 1
26207: DEC
26208: ST_TO_ADDR
26209: LD_INT 3
26211: PPUSH
26212: LD_INT 4
26214: PPUSH
26215: CALL_OW 12
26219: PUSH
26220: FOR_TO
26221: IFFALSE 26315
// begin hc_sex = sex_male ;
26223: LD_ADDR_OWVAR 27
26227: PUSH
26228: LD_INT 1
26230: ST_TO_ADDR
// uc_side = 0 ;
26231: LD_ADDR_OWVAR 20
26235: PUSH
26236: LD_INT 0
26238: ST_TO_ADDR
// uc_nation = nation_nature ;
26239: LD_ADDR_OWVAR 21
26243: PUSH
26244: LD_INT 0
26246: ST_TO_ADDR
// hc_class = 18 ;
26247: LD_ADDR_OWVAR 28
26251: PUSH
26252: LD_INT 18
26254: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
26255: LD_ADDR_OWVAR 31
26259: PUSH
26260: LD_EXP 37
26264: PUSH
26265: LD_INT 0
26267: PUSH
26268: LD_INT 0
26270: PUSH
26271: LD_INT 0
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: ST_TO_ADDR
// hc_agressivity = 0 ;
26280: LD_ADDR_OWVAR 35
26284: PUSH
26285: LD_INT 0
26287: ST_TO_ADDR
// un = CreateHuman ;
26288: LD_ADDR_VAR 0 3
26292: PUSH
26293: CALL_OW 44
26297: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
26298: LD_VAR 0 3
26302: PPUSH
26303: LD_INT 6
26305: PPUSH
26306: LD_INT 0
26308: PPUSH
26309: CALL_OW 49
// end ;
26313: GO 26220
26315: POP
26316: POP
// end ; end_of_file
26317: LD_VAR 0 1
26321: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
26322: LD_EXP 46
26326: PUSH
26327: LD_INT 1
26329: EQUAL
26330: IFFALSE 26414
26332: GO 26334
26334: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
26335: LD_INT 7
26337: PPUSH
26338: LD_INT 5
26340: PPUSH
26341: LD_INT 4
26343: PUSH
26344: LD_INT 5
26346: PUSH
26347: LD_INT 6
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: LIST
26354: PUSH
26355: LD_OWVAR 67
26359: ARRAY
26360: PPUSH
26361: LD_EXP 36
26365: PPUSH
26366: LD_EXP 37
26370: PPUSH
26371: CALL_OW 12
26375: PPUSH
26376: LD_INT 2
26378: PPUSH
26379: LD_INT 1
26381: PPUSH
26382: LD_INT 1
26384: PPUSH
26385: EMPTY
26386: PPUSH
26387: LD_INT 25
26389: PUSH
26390: LD_INT 26
26392: PUSH
26393: LD_INT 27
26395: PUSH
26396: LD_INT 28
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: PPUSH
26405: EMPTY
26406: PPUSH
26407: LD_INT 1
26409: PPUSH
26410: CALL 16552 0 11
26414: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
26415: LD_EXP 46
26419: PUSH
26420: LD_INT 1
26422: EQUAL
26423: IFFALSE 26511
26425: GO 26427
26427: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
26428: LD_INT 5
26430: PPUSH
26431: LD_INT 2
26433: PPUSH
26434: LD_INT 5
26436: PUSH
26437: LD_INT 6
26439: PUSH
26440: LD_INT 8
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: LIST
26447: PUSH
26448: LD_OWVAR 67
26452: ARRAY
26453: PPUSH
26454: LD_INT 0
26456: PPUSH
26457: LD_INT 0
26459: PPUSH
26460: LD_INT 2
26462: PUSH
26463: LD_INT 4
26465: PUSH
26466: LD_INT 5
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: LIST
26473: PUSH
26474: LD_OWVAR 67
26478: ARRAY
26479: PPUSH
26480: LD_INT 0
26482: PPUSH
26483: LD_EXP 36
26487: PPUSH
26488: LD_EXP 37
26492: PPUSH
26493: CALL_OW 12
26497: PPUSH
26498: LD_INT 7
26500: PPUSH
26501: LD_INT 9
26503: PPUSH
26504: LD_INT 1
26506: PPUSH
26507: CALL 18256 0 11
26511: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
26512: LD_EXP 46
26516: PUSH
26517: LD_INT 1
26519: EQUAL
26520: IFFALSE 26529
26522: GO 26524
26524: DISABLE
// PrepareArabianSheik ;
26525: CALL 4467 0 0
26529: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
26530: LD_EXP 29
26534: PUSH
26535: LD_EXP 62
26539: PUSH
26540: LD_INT 1
26542: EQUAL
26543: AND
26544: IFFALSE 26613
26546: GO 26548
26548: DISABLE
// begin enable ;
26549: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
26550: LD_INT 6
26552: PPUSH
26553: LD_INT 3
26555: PPUSH
26556: LD_EXP 58
26560: PPUSH
26561: LD_INT 0
26563: PPUSH
26564: LD_OWVAR 67
26568: PPUSH
26569: LD_INT 0
26571: PPUSH
26572: LD_EXP 58
26576: PUSH
26577: LD_INT 3
26579: DIV
26580: PUSH
26581: LD_INT 1
26583: PLUS
26584: PPUSH
26585: LD_EXP 36
26589: PPUSH
26590: LD_EXP 37
26594: PPUSH
26595: CALL_OW 12
26599: PPUSH
26600: LD_INT 17
26602: PPUSH
26603: LD_INT 18
26605: PPUSH
26606: LD_INT 1
26608: PPUSH
26609: CALL 18256 0 11
// end ;
26613: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
26614: LD_EXP 29
26618: PUSH
26619: LD_EXP 62
26623: PUSH
26624: LD_INT 1
26626: EQUAL
26627: AND
26628: IFFALSE 26705
26630: GO 26632
26632: DISABLE
// begin enable ;
26633: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
26634: LD_INT 17
26636: PPUSH
26637: LD_INT 6
26639: PPUSH
26640: LD_EXP 57
26644: PPUSH
26645: LD_EXP 36
26649: PPUSH
26650: LD_EXP 37
26654: PPUSH
26655: CALL_OW 12
26659: PPUSH
26660: LD_INT 3
26662: PPUSH
26663: LD_INT 1
26665: PPUSH
26666: LD_INT 3
26668: PUSH
26669: LD_INT 3
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PPUSH
26676: LD_INT 43
26678: PUSH
26679: LD_INT 44
26681: PUSH
26682: LD_INT 45
26684: PUSH
26685: LD_INT 46
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: PPUSH
26694: EMPTY
26695: PPUSH
26696: EMPTY
26697: PPUSH
26698: LD_INT 1
26700: PPUSH
26701: CALL 16552 0 11
// end ;
26705: END
// every 10 10$00 trigger joinEpsilon do
26706: LD_EXP 29
26710: IFFALSE 26764
26712: GO 26714
26714: DISABLE
// begin enable ;
26715: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
26716: LD_ADDR_EXP 57
26720: PUSH
26721: LD_EXP 57
26725: PUSH
26726: LD_INT 1
26728: PPUSH
26729: LD_OWVAR 67
26733: PPUSH
26734: CALL_OW 12
26738: PLUS
26739: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
26740: LD_ADDR_EXP 58
26744: PUSH
26745: LD_EXP 58
26749: PUSH
26750: LD_INT 1
26752: PPUSH
26753: LD_OWVAR 67
26757: PPUSH
26758: CALL_OW 12
26762: PLUS
26763: ST_TO_ADDR
// end ;
26764: END
// every 21 21$0 trigger attackAvalaible = 1 do
26765: LD_EXP 62
26769: PUSH
26770: LD_INT 1
26772: EQUAL
26773: IFFALSE 26786
26775: GO 26777
26777: DISABLE
// attackAvalaible = 0 ; end_of_file
26778: LD_ADDR_EXP 62
26782: PUSH
26783: LD_INT 0
26785: ST_TO_ADDR
26786: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
26787: LD_INT 54
26789: PPUSH
26790: LD_INT 1
26792: PPUSH
26793: CALL_OW 321
26797: PUSH
26798: LD_INT 2
26800: EQUAL
26801: PUSH
26802: LD_INT 55
26804: PPUSH
26805: LD_INT 1
26807: PPUSH
26808: CALL_OW 321
26812: PUSH
26813: LD_INT 2
26815: EQUAL
26816: AND
26817: PUSH
26818: LD_INT 21
26820: PPUSH
26821: LD_INT 1
26823: PPUSH
26824: CALL_OW 321
26828: PUSH
26829: LD_INT 2
26831: EQUAL
26832: AND
26833: PUSH
26834: LD_INT 22
26836: PPUSH
26837: LD_INT 1
26839: PPUSH
26840: CALL_OW 321
26844: PUSH
26845: LD_INT 2
26847: EQUAL
26848: AND
26849: PUSH
26850: LD_INT 12
26852: PPUSH
26853: LD_INT 1
26855: PPUSH
26856: CALL_OW 321
26860: PUSH
26861: LD_INT 1
26863: EQUAL
26864: PUSH
26865: LD_INT 32
26867: PPUSH
26868: LD_INT 1
26870: PPUSH
26871: CALL_OW 321
26875: PUSH
26876: LD_INT 1
26878: EQUAL
26879: OR
26880: PUSH
26881: EMPTY
26882: LIST
26883: AND
26884: PUSH
26885: LD_EXP 48
26889: PUSH
26890: LD_INT 1
26892: EQUAL
26893: AND
26894: PUSH
26895: LD_INT 22
26897: PUSH
26898: LD_INT 3
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 21
26907: PUSH
26908: LD_INT 1
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PPUSH
26919: CALL_OW 69
26923: PUSH
26924: LD_INT 0
26926: EQUAL
26927: AND
26928: IFFALSE 26984
26930: GO 26932
26932: DISABLE
// begin case query ( QEndMission ) of 1 :
26933: LD_STRING QEndMission
26935: PPUSH
26936: CALL_OW 97
26940: PUSH
26941: LD_INT 1
26943: DOUBLE
26944: EQUAL
26945: IFTRUE 26949
26947: GO 26960
26949: POP
// begin end_the_mission_allowed = true ;
26950: LD_ADDR_OWVAR 57
26954: PUSH
26955: LD_INT 1
26957: ST_TO_ADDR
// end ; 2 :
26958: GO 26984
26960: LD_INT 2
26962: DOUBLE
26963: EQUAL
26964: IFTRUE 26968
26966: GO 26983
26968: POP
// begin fastEnd = 1 ;
26969: LD_ADDR_EXP 61
26973: PUSH
26974: LD_INT 1
26976: ST_TO_ADDR
// FinishMission ;
26977: CALL 26985 0 0
// end ; end ;
26981: GO 26984
26983: POP
// end ;
26984: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
26985: LD_INT 0
26987: PPUSH
26988: PPUSH
26989: PPUSH
26990: PPUSH
// if not snipersTrained then
26991: LD_EXP 60
26995: NOT
26996: IFFALSE 27005
// SetAchievement ( ACH_SNIPER ) ;
26998: LD_STRING ACH_SNIPER
27000: PPUSH
27001: CALL_OW 543
// m1 := false ;
27005: LD_ADDR_VAR 0 2
27009: PUSH
27010: LD_INT 0
27012: ST_TO_ADDR
// m2 := false ;
27013: LD_ADDR_VAR 0 3
27017: PUSH
27018: LD_INT 0
27020: ST_TO_ADDR
// m3 := false ;
27021: LD_ADDR_VAR 0 4
27025: PUSH
27026: LD_INT 0
27028: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
27029: LD_EXP 53
27033: PPUSH
27034: LD_STRING 10_KhatamStatus_1
27036: PPUSH
27037: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
27041: LD_EXP 52
27045: PPUSH
27046: LD_STRING 10_GensherEscape_1
27048: PPUSH
27049: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
27053: LD_INT 12
27055: PPUSH
27056: LD_INT 1
27058: PPUSH
27059: CALL_OW 321
27063: PUSH
27064: LD_INT 2
27066: EQUAL
27067: IFFALSE 27089
// begin AddMedal ( sights , 1 ) ;
27069: LD_STRING sights
27071: PPUSH
27072: LD_INT 1
27074: PPUSH
27075: CALL_OW 101
// m1 := true ;
27079: LD_ADDR_VAR 0 2
27083: PUSH
27084: LD_INT 1
27086: ST_TO_ADDR
// end else
27087: GO 27100
// begin AddMedal ( sights , - 1 ) ;
27089: LD_STRING sights
27091: PPUSH
27092: LD_INT 1
27094: NEG
27095: PPUSH
27096: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
27100: LD_INT 32
27102: PPUSH
27103: LD_INT 1
27105: PPUSH
27106: CALL_OW 321
27110: PUSH
27111: LD_INT 2
27113: EQUAL
27114: IFFALSE 27136
// begin AddMedal ( computers , 1 ) ;
27116: LD_STRING computers
27118: PPUSH
27119: LD_INT 1
27121: PPUSH
27122: CALL_OW 101
// m2 := true ;
27126: LD_ADDR_VAR 0 3
27130: PUSH
27131: LD_INT 1
27133: ST_TO_ADDR
// end else
27134: GO 27147
// begin AddMedal ( computers , - 1 ) ;
27136: LD_STRING computers
27138: PPUSH
27139: LD_INT 1
27141: NEG
27142: PPUSH
27143: CALL_OW 101
// end ; if arabianEscape = 0 then
27147: LD_EXP 47
27151: PUSH
27152: LD_INT 0
27154: EQUAL
27155: IFFALSE 27187
// begin AddMedal ( renegades , 2 ) ;
27157: LD_STRING renegades
27159: PPUSH
27160: LD_INT 2
27162: PPUSH
27163: CALL_OW 101
// m3 := true ;
27167: LD_ADDR_VAR 0 4
27171: PUSH
27172: LD_INT 1
27174: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
27175: LD_INT 0
27177: PPUSH
27178: LD_STRING 10_ScientistsEscape_1
27180: PPUSH
27181: CALL_OW 39
// end else
27185: GO 27198
// begin AddMedal ( renegades , - 1 ) ;
27187: LD_STRING renegades
27189: PPUSH
27190: LD_INT 1
27192: NEG
27193: PPUSH
27194: CALL_OW 101
// end ; SaveEpsilonBase ;
27198: CALL 27984 0 0
// if m1 and m2 and m3 and Difficulty = 3 then
27202: LD_VAR 0 2
27206: PUSH
27207: LD_VAR 0 3
27211: AND
27212: PUSH
27213: LD_VAR 0 4
27217: AND
27218: PUSH
27219: LD_OWVAR 67
27223: PUSH
27224: LD_INT 3
27226: EQUAL
27227: AND
27228: IFFALSE 27240
// SetAchievementEX ( ACH_AMER , 10 ) ;
27230: LD_STRING ACH_AMER
27232: PPUSH
27233: LD_INT 10
27235: PPUSH
27236: CALL_OW 564
// if tick <= 40 40$00 then
27240: LD_OWVAR 1
27244: PUSH
27245: LD_INT 84000
27247: LESSEQUAL
27248: IFFALSE 27264
// begin wait ( 3 ) ;
27250: LD_INT 3
27252: PPUSH
27253: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
27257: LD_STRING ACH_ASPEED_10
27259: PPUSH
27260: CALL_OW 543
// end ; GiveMedals ( Main ) ;
27264: LD_STRING Main
27266: PPUSH
27267: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
27271: LD_INT 22
27273: PUSH
27274: LD_INT 1
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 23
27283: PUSH
27284: LD_INT 1
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: LD_INT 21
27293: PUSH
27294: LD_INT 1
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 2
27303: PUSH
27304: LD_INT 25
27306: PUSH
27307: LD_INT 1
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 25
27316: PUSH
27317: LD_INT 2
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 25
27326: PUSH
27327: LD_INT 3
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 25
27336: PUSH
27337: LD_INT 4
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 25
27346: PUSH
27347: LD_INT 5
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 25
27356: PUSH
27357: LD_INT 8
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: PPUSH
27379: CALL_OW 69
27383: PPUSH
27384: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
27388: LD_EXP 1
27392: PPUSH
27393: LD_EXP 54
27397: PUSH
27398: LD_STRING JMM
27400: STR
27401: PPUSH
27402: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
27406: LD_EXP 2
27410: PPUSH
27411: LD_EXP 54
27415: PUSH
27416: LD_STRING Brown
27418: STR
27419: PPUSH
27420: CALL 10722 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
27424: LD_EXP 3
27428: PPUSH
27429: LD_EXP 54
27433: PUSH
27434: LD_STRING Donaldson
27436: STR
27437: PPUSH
27438: CALL 10722 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
27442: LD_EXP 4
27446: PPUSH
27447: LD_EXP 54
27451: PUSH
27452: LD_STRING Bobby
27454: STR
27455: PPUSH
27456: CALL 10722 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
27460: LD_EXP 5
27464: PPUSH
27465: LD_EXP 54
27469: PUSH
27470: LD_STRING Cyrus
27472: STR
27473: PPUSH
27474: CALL 10722 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
27478: LD_EXP 6
27482: PPUSH
27483: LD_EXP 54
27487: PUSH
27488: LD_STRING Lisa
27490: STR
27491: PPUSH
27492: CALL 10722 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
27496: LD_EXP 7
27500: PPUSH
27501: LD_EXP 54
27505: PUSH
27506: LD_STRING Frank
27508: STR
27509: PPUSH
27510: CALL 10722 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
27514: LD_EXP 8
27518: PPUSH
27519: LD_EXP 54
27523: PUSH
27524: LD_STRING Kikuchi
27526: STR
27527: PPUSH
27528: CALL 10722 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
27532: LD_EXP 9
27536: PPUSH
27537: LD_EXP 54
27541: PUSH
27542: LD_STRING Houten
27544: STR
27545: PPUSH
27546: CALL 10722 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
27550: LD_EXP 10
27554: PPUSH
27555: LD_EXP 54
27559: PUSH
27560: LD_STRING Gary
27562: STR
27563: PPUSH
27564: CALL 10722 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
27568: LD_EXP 19
27572: PPUSH
27573: LD_EXP 54
27577: PUSH
27578: LD_STRING Cornell
27580: STR
27581: PPUSH
27582: CALL 10722 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
27586: LD_EXP 11
27590: PPUSH
27591: LD_EXP 54
27595: PUSH
27596: LD_STRING Simms
27598: STR
27599: PPUSH
27600: CALL 10722 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
27604: LD_EXP 12
27608: PPUSH
27609: LD_EXP 54
27613: PUSH
27614: LD_STRING Denis
27616: STR
27617: PPUSH
27618: CALL 10722 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
27622: LD_EXP 13
27626: PPUSH
27627: LD_EXP 54
27631: PUSH
27632: LD_STRING Joan
27634: STR
27635: PPUSH
27636: CALL 10722 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
27640: LD_EXP 15
27644: PPUSH
27645: LD_EXP 54
27649: PUSH
27650: LD_STRING Gladstone
27652: STR
27653: PPUSH
27654: CALL 10722 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
27658: LD_EXP 17
27662: PPUSH
27663: LD_EXP 54
27667: PUSH
27668: LD_STRING DeltaDoctor
27670: STR
27671: PPUSH
27672: CALL 10722 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
27676: LD_EXP 22
27680: PPUSH
27681: LD_STRING 10c_lock
27683: PPUSH
27684: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
27688: LD_INT 50
27690: PUSH
27691: EMPTY
27692: LIST
27693: PUSH
27694: LD_INT 22
27696: PUSH
27697: LD_INT 1
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 21
27706: PUSH
27707: LD_INT 1
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 2
27716: PUSH
27717: LD_INT 25
27719: PUSH
27720: LD_INT 1
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 25
27729: PUSH
27730: LD_INT 2
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 25
27739: PUSH
27740: LD_INT 3
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 25
27749: PUSH
27750: LD_INT 4
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 25
27759: PUSH
27760: LD_INT 5
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 25
27769: PUSH
27770: LD_INT 8
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: PPUSH
27792: CALL_OW 69
27796: PUSH
27797: LD_EXP 1
27801: PUSH
27802: LD_EXP 2
27806: PUSH
27807: LD_EXP 3
27811: PUSH
27812: LD_EXP 4
27816: PUSH
27817: LD_EXP 5
27821: PUSH
27822: LD_EXP 6
27826: PUSH
27827: LD_EXP 7
27831: PUSH
27832: LD_EXP 15
27836: PUSH
27837: LD_EXP 8
27841: PUSH
27842: LD_EXP 12
27846: PUSH
27847: LD_EXP 13
27851: PUSH
27852: LD_EXP 9
27856: PUSH
27857: LD_EXP 11
27861: PUSH
27862: LD_EXP 10
27866: PUSH
27867: LD_EXP 17
27871: PUSH
27872: LD_EXP 19
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: DIFF
27895: PPUSH
27896: LD_STRING 10_other_survivors
27898: PPUSH
27899: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
27903: LD_INT 50
27905: PUSH
27906: EMPTY
27907: LIST
27908: PUSH
27909: LD_INT 22
27911: PUSH
27912: LD_INT 1
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 21
27921: PUSH
27922: LD_INT 1
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 2
27931: PUSH
27932: LD_INT 25
27934: PUSH
27935: LD_INT 16
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 25
27944: PUSH
27945: LD_INT 12
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: LIST
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: PPUSH
27963: CALL_OW 69
27967: PPUSH
27968: LD_STRING 10_ape
27970: PPUSH
27971: CALL_OW 38
// YouWin ;
27975: CALL_OW 103
// end ;
27979: LD_VAR 0 1
27983: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
27984: LD_INT 0
27986: PPUSH
27987: PPUSH
27988: PPUSH
27989: PPUSH
// epsilonBase = [ ] ;
27990: LD_ADDR_VAR 0 2
27994: PUSH
27995: EMPTY
27996: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
27997: LD_ADDR_VAR 0 3
28001: PUSH
28002: LD_INT 22
28004: PUSH
28005: LD_INT 1
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 23
28014: PUSH
28015: LD_INT 1
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 21
28024: PUSH
28025: LD_INT 3
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 50
28034: PUSH
28035: EMPTY
28036: LIST
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: PPUSH
28044: CALL_OW 69
28048: ST_TO_ADDR
// for i in buildings do
28049: LD_ADDR_VAR 0 4
28053: PUSH
28054: LD_VAR 0 3
28058: PUSH
28059: FOR_IN
28060: IFFALSE 28512
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
28062: LD_VAR 0 4
28066: PPUSH
28067: CALL_OW 266
28071: PUSH
28072: LD_INT 6
28074: PUSH
28075: LD_INT 7
28077: PUSH
28078: LD_INT 8
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: LIST
28085: IN
28086: IFFALSE 28200
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
28088: LD_ADDR_VAR 0 2
28092: PUSH
28093: LD_VAR 0 2
28097: PUSH
28098: LD_VAR 0 4
28102: PPUSH
28103: CALL_OW 266
28107: PUSH
28108: LD_VAR 0 4
28112: PPUSH
28113: CALL_OW 250
28117: PUSH
28118: LD_VAR 0 4
28122: PPUSH
28123: CALL_OW 251
28127: PUSH
28128: LD_VAR 0 4
28132: PPUSH
28133: CALL_OW 254
28137: PUSH
28138: LD_VAR 0 4
28142: PPUSH
28143: CALL_OW 267
28147: PUSH
28148: LD_VAR 0 4
28152: PPUSH
28153: CALL_OW 248
28157: PUSH
28158: LD_VAR 0 4
28162: PPUSH
28163: LD_INT 1
28165: PPUSH
28166: CALL_OW 268
28170: PUSH
28171: LD_VAR 0 4
28175: PPUSH
28176: LD_INT 2
28178: PPUSH
28179: CALL_OW 268
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: PUSH
28194: EMPTY
28195: LIST
28196: ADD
28197: ST_TO_ADDR
28198: GO 28510
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
28200: LD_VAR 0 4
28204: PPUSH
28205: CALL_OW 266
28209: PUSH
28210: LD_INT 32
28212: EQUAL
28213: PUSH
28214: LD_VAR 0 4
28218: PPUSH
28219: CALL_OW 266
28223: PUSH
28224: LD_INT 33
28226: EQUAL
28227: OR
28228: IFFALSE 28325
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
28230: LD_ADDR_VAR 0 2
28234: PUSH
28235: LD_VAR 0 2
28239: PUSH
28240: LD_VAR 0 4
28244: PPUSH
28245: CALL_OW 266
28249: PUSH
28250: LD_VAR 0 4
28254: PPUSH
28255: CALL_OW 250
28259: PUSH
28260: LD_VAR 0 4
28264: PPUSH
28265: CALL_OW 251
28269: PUSH
28270: LD_VAR 0 4
28274: PPUSH
28275: CALL_OW 254
28279: PUSH
28280: LD_VAR 0 4
28284: PPUSH
28285: CALL_OW 267
28289: PUSH
28290: LD_VAR 0 4
28294: PPUSH
28295: CALL_OW 248
28299: PUSH
28300: LD_VAR 0 4
28304: PPUSH
28305: CALL_OW 269
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: PUSH
28319: EMPTY
28320: LIST
28321: ADD
28322: ST_TO_ADDR
28323: GO 28510
// if GetBType ( i ) = b_factory then
28325: LD_VAR 0 4
28329: PPUSH
28330: CALL_OW 266
28334: PUSH
28335: LD_INT 3
28337: EQUAL
28338: IFFALSE 28428
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
28340: LD_ADDR_VAR 0 2
28344: PUSH
28345: LD_VAR 0 2
28349: PPUSH
28350: LD_INT 1
28352: PPUSH
28353: LD_VAR 0 4
28357: PPUSH
28358: CALL_OW 266
28362: PUSH
28363: LD_VAR 0 4
28367: PPUSH
28368: CALL_OW 250
28372: PUSH
28373: LD_VAR 0 4
28377: PPUSH
28378: CALL_OW 251
28382: PUSH
28383: LD_VAR 0 4
28387: PPUSH
28388: CALL_OW 254
28392: PUSH
28393: LD_VAR 0 4
28397: PPUSH
28398: CALL_OW 267
28402: PUSH
28403: LD_VAR 0 4
28407: PPUSH
28408: CALL_OW 248
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: PPUSH
28421: CALL_OW 2
28425: ST_TO_ADDR
28426: GO 28510
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
28428: LD_ADDR_VAR 0 2
28432: PUSH
28433: LD_VAR 0 2
28437: PUSH
28438: LD_VAR 0 4
28442: PPUSH
28443: CALL_OW 266
28447: PUSH
28448: LD_VAR 0 4
28452: PPUSH
28453: CALL_OW 250
28457: PUSH
28458: LD_VAR 0 4
28462: PPUSH
28463: CALL_OW 251
28467: PUSH
28468: LD_VAR 0 4
28472: PPUSH
28473: CALL_OW 254
28477: PUSH
28478: LD_VAR 0 4
28482: PPUSH
28483: CALL_OW 267
28487: PUSH
28488: LD_VAR 0 4
28492: PPUSH
28493: CALL_OW 248
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: PUSH
28506: EMPTY
28507: LIST
28508: ADD
28509: ST_TO_ADDR
// end ;
28510: GO 28059
28512: POP
28513: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
28514: LD_VAR 0 2
28518: PPUSH
28519: LD_STRING 10_EpsilonBase
28521: PPUSH
28522: CALL_OW 39
// SaveEnvironment ( epsilonTerrain , 10_EpsilonEnv ) ;
28526: LD_INT 19
28528: PPUSH
28529: LD_STRING 10_EpsilonEnv
28531: PPUSH
28532: CALL 28541 0 2
// end ;
28536: LD_VAR 0 1
28540: RET
// export function SaveEnvironment ( area , saveId ) ; begin
28541: LD_INT 0
28543: PPUSH
// result := ListEnvironmentArea ( area ) ;
28544: LD_ADDR_VAR 0 3
28548: PUSH
28549: LD_VAR 0 1
28553: PPUSH
28554: CALL_OW 353
28558: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
28559: LD_VAR 0 3
28563: PPUSH
28564: LD_VAR 0 2
28568: PPUSH
28569: CALL_OW 39
// end ; end_of_file
28573: LD_VAR 0 3
28577: RET
// every 0 0$01 do var timer ;
28578: GO 28580
28580: DISABLE
28581: LD_INT 0
28583: PPUSH
// begin timer := 0 0$30 ;
28584: LD_ADDR_VAR 0 1
28588: PUSH
28589: LD_INT 1050
28591: ST_TO_ADDR
// repeat wait ( timer ) ;
28592: LD_VAR 0 1
28596: PPUSH
28597: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
28601: LD_EXP 56
28605: PUSH
28606: LD_INT 6
28608: GREATEREQUAL
28609: PUSH
28610: LD_EXP 56
28614: PUSH
28615: LD_INT 12
28617: LESS
28618: AND
28619: IFFALSE 28635
// timer := timer + 0 0$3 ;
28621: LD_ADDR_VAR 0 1
28625: PUSH
28626: LD_VAR 0 1
28630: PUSH
28631: LD_INT 105
28633: PLUS
28634: ST_TO_ADDR
// if cratesSpawned >= 12 then
28635: LD_EXP 56
28639: PUSH
28640: LD_INT 12
28642: GREATEREQUAL
28643: IFFALSE 28659
// timer := timer + 0 0$9 ;
28645: LD_ADDR_VAR 0 1
28649: PUSH
28650: LD_VAR 0 1
28654: PUSH
28655: LD_INT 315
28657: PLUS
28658: ST_TO_ADDR
// if timer > 3 3$00 then
28659: LD_VAR 0 1
28663: PUSH
28664: LD_INT 6300
28666: GREATER
28667: IFFALSE 28677
// timer := 0 0$50 ;
28669: LD_ADDR_VAR 0 1
28673: PUSH
28674: LD_INT 1750
28676: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
28677: LD_INT 1
28679: PPUSH
28680: LD_INT 5
28682: PPUSH
28683: CALL_OW 12
28687: PPUSH
28688: LD_INT 16
28690: PPUSH
28691: LD_INT 1
28693: PPUSH
28694: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
28698: LD_ADDR_EXP 56
28702: PUSH
28703: LD_EXP 56
28707: PUSH
28708: LD_INT 1
28710: PLUS
28711: ST_TO_ADDR
// until false ;
28712: LD_INT 0
28714: IFFALSE 28592
// end ; end_of_file
28716: PPOPN 1
28718: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
28719: GO 28721
28721: DISABLE
// begin ru_radar := 98 ;
28722: LD_ADDR_EXP 66
28726: PUSH
28727: LD_INT 98
28729: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
28730: LD_ADDR_EXP 67
28734: PUSH
28735: LD_INT 89
28737: ST_TO_ADDR
// us_hack := 99 ;
28738: LD_ADDR_EXP 68
28742: PUSH
28743: LD_INT 99
28745: ST_TO_ADDR
// us_artillery := 97 ;
28746: LD_ADDR_EXP 69
28750: PUSH
28751: LD_INT 97
28753: ST_TO_ADDR
// ar_bio_bomb := 91 ;
28754: LD_ADDR_EXP 70
28758: PUSH
28759: LD_INT 91
28761: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
28762: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
28763: LD_INT 0
28765: PPUSH
28766: PPUSH
28767: PPUSH
28768: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28769: LD_VAR 0 1
28773: PPUSH
28774: CALL_OW 264
28778: PUSH
28779: LD_EXP 70
28783: EQUAL
28784: IFFALSE 28856
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28786: LD_INT 68
28788: PPUSH
28789: LD_VAR 0 1
28793: PPUSH
28794: CALL_OW 255
28798: PPUSH
28799: CALL_OW 321
28803: PUSH
28804: LD_INT 2
28806: EQUAL
28807: IFFALSE 28819
// eff := 70 else
28809: LD_ADDR_VAR 0 6
28813: PUSH
28814: LD_INT 70
28816: ST_TO_ADDR
28817: GO 28827
// eff := 30 ;
28819: LD_ADDR_VAR 0 6
28823: PUSH
28824: LD_INT 30
28826: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28827: LD_VAR 0 1
28831: PPUSH
28832: CALL_OW 250
28836: PPUSH
28837: LD_VAR 0 1
28841: PPUSH
28842: CALL_OW 251
28846: PPUSH
28847: LD_VAR 0 6
28851: PPUSH
28852: CALL_OW 495
// end ; end ;
28856: LD_VAR 0 4
28860: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
28861: LD_INT 0
28863: PPUSH
28864: PPUSH
28865: PPUSH
28866: PPUSH
28867: PPUSH
28868: PPUSH
// if cmd = 124 then
28869: LD_VAR 0 1
28873: PUSH
28874: LD_INT 124
28876: EQUAL
28877: IFFALSE 29083
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
28879: LD_ADDR_VAR 0 5
28883: PUSH
28884: LD_INT 2
28886: PUSH
28887: LD_INT 34
28889: PUSH
28890: LD_INT 53
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 34
28899: PUSH
28900: LD_INT 14
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: LIST
28911: PPUSH
28912: CALL_OW 69
28916: ST_TO_ADDR
// if not tmp then
28917: LD_VAR 0 5
28921: NOT
28922: IFFALSE 28926
// exit ;
28924: GO 29083
// for i in tmp do
28926: LD_ADDR_VAR 0 3
28930: PUSH
28931: LD_VAR 0 5
28935: PUSH
28936: FOR_IN
28937: IFFALSE 29081
// begin taskList := GetTaskList ( i ) ;
28939: LD_ADDR_VAR 0 6
28943: PUSH
28944: LD_VAR 0 3
28948: PPUSH
28949: CALL_OW 437
28953: ST_TO_ADDR
// if not taskList then
28954: LD_VAR 0 6
28958: NOT
28959: IFFALSE 28963
// continue ;
28961: GO 28936
// for j = 1 to taskList do
28963: LD_ADDR_VAR 0 4
28967: PUSH
28968: DOUBLE
28969: LD_INT 1
28971: DEC
28972: ST_TO_ADDR
28973: LD_VAR 0 6
28977: PUSH
28978: FOR_TO
28979: IFFALSE 29077
// if taskList [ j ] [ 1 ] = | then
28981: LD_VAR 0 6
28985: PUSH
28986: LD_VAR 0 4
28990: ARRAY
28991: PUSH
28992: LD_INT 1
28994: ARRAY
28995: PUSH
28996: LD_STRING |
28998: EQUAL
28999: IFFALSE 29075
// begin _taskList := Delete ( taskList , 1 ) ;
29001: LD_ADDR_VAR 0 7
29005: PUSH
29006: LD_VAR 0 6
29010: PPUSH
29011: LD_INT 1
29013: PPUSH
29014: CALL_OW 3
29018: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
29019: LD_VAR 0 3
29023: PPUSH
29024: LD_VAR 0 7
29028: PPUSH
29029: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
29033: LD_VAR 0 3
29037: PPUSH
29038: LD_VAR 0 6
29042: PUSH
29043: LD_VAR 0 4
29047: ARRAY
29048: PUSH
29049: LD_INT 2
29051: ARRAY
29052: PPUSH
29053: LD_VAR 0 6
29057: PUSH
29058: LD_VAR 0 4
29062: ARRAY
29063: PUSH
29064: LD_INT 3
29066: ARRAY
29067: PPUSH
29068: LD_INT 8
29070: PPUSH
29071: CALL 29088 0 4
// end ;
29075: GO 28978
29077: POP
29078: POP
// end ;
29079: GO 28936
29081: POP
29082: POP
// end ; end ;
29083: LD_VAR 0 2
29087: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29088: LD_INT 0
29090: PPUSH
29091: PPUSH
29092: PPUSH
29093: PPUSH
29094: PPUSH
29095: PPUSH
29096: PPUSH
29097: PPUSH
29098: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
29099: LD_VAR 0 1
29103: NOT
29104: PUSH
29105: LD_VAR 0 2
29109: PPUSH
29110: LD_VAR 0 3
29114: PPUSH
29115: CALL_OW 488
29119: NOT
29120: OR
29121: PUSH
29122: LD_VAR 0 4
29126: NOT
29127: OR
29128: IFFALSE 29132
// exit ;
29130: GO 29472
// list := [ ] ;
29132: LD_ADDR_VAR 0 13
29136: PUSH
29137: EMPTY
29138: ST_TO_ADDR
// if x - r < 0 then
29139: LD_VAR 0 2
29143: PUSH
29144: LD_VAR 0 4
29148: MINUS
29149: PUSH
29150: LD_INT 0
29152: LESS
29153: IFFALSE 29165
// min_x := 0 else
29155: LD_ADDR_VAR 0 7
29159: PUSH
29160: LD_INT 0
29162: ST_TO_ADDR
29163: GO 29181
// min_x := x - r ;
29165: LD_ADDR_VAR 0 7
29169: PUSH
29170: LD_VAR 0 2
29174: PUSH
29175: LD_VAR 0 4
29179: MINUS
29180: ST_TO_ADDR
// if y - r < 0 then
29181: LD_VAR 0 3
29185: PUSH
29186: LD_VAR 0 4
29190: MINUS
29191: PUSH
29192: LD_INT 0
29194: LESS
29195: IFFALSE 29207
// min_y := 0 else
29197: LD_ADDR_VAR 0 8
29201: PUSH
29202: LD_INT 0
29204: ST_TO_ADDR
29205: GO 29223
// min_y := y - r ;
29207: LD_ADDR_VAR 0 8
29211: PUSH
29212: LD_VAR 0 3
29216: PUSH
29217: LD_VAR 0 4
29221: MINUS
29222: ST_TO_ADDR
// max_x := x + r ;
29223: LD_ADDR_VAR 0 9
29227: PUSH
29228: LD_VAR 0 2
29232: PUSH
29233: LD_VAR 0 4
29237: PLUS
29238: ST_TO_ADDR
// max_y := y + r ;
29239: LD_ADDR_VAR 0 10
29243: PUSH
29244: LD_VAR 0 3
29248: PUSH
29249: LD_VAR 0 4
29253: PLUS
29254: ST_TO_ADDR
// for _x = min_x to max_x do
29255: LD_ADDR_VAR 0 11
29259: PUSH
29260: DOUBLE
29261: LD_VAR 0 7
29265: DEC
29266: ST_TO_ADDR
29267: LD_VAR 0 9
29271: PUSH
29272: FOR_TO
29273: IFFALSE 29390
// for _y = min_y to max_y do
29275: LD_ADDR_VAR 0 12
29279: PUSH
29280: DOUBLE
29281: LD_VAR 0 8
29285: DEC
29286: ST_TO_ADDR
29287: LD_VAR 0 10
29291: PUSH
29292: FOR_TO
29293: IFFALSE 29386
// begin if not ValidHex ( _x , _y ) then
29295: LD_VAR 0 11
29299: PPUSH
29300: LD_VAR 0 12
29304: PPUSH
29305: CALL_OW 488
29309: NOT
29310: IFFALSE 29314
// continue ;
29312: GO 29292
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29314: LD_VAR 0 11
29318: PPUSH
29319: LD_VAR 0 12
29323: PPUSH
29324: CALL_OW 351
29328: PUSH
29329: LD_VAR 0 11
29333: PPUSH
29334: LD_VAR 0 12
29338: PPUSH
29339: CALL_OW 554
29343: AND
29344: IFFALSE 29384
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29346: LD_ADDR_VAR 0 13
29350: PUSH
29351: LD_VAR 0 13
29355: PPUSH
29356: LD_VAR 0 13
29360: PUSH
29361: LD_INT 1
29363: PLUS
29364: PPUSH
29365: LD_VAR 0 11
29369: PUSH
29370: LD_VAR 0 12
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PPUSH
29379: CALL_OW 2
29383: ST_TO_ADDR
// end ;
29384: GO 29292
29386: POP
29387: POP
29388: GO 29272
29390: POP
29391: POP
// if not list then
29392: LD_VAR 0 13
29396: NOT
29397: IFFALSE 29401
// exit ;
29399: GO 29472
// for i in list do
29401: LD_ADDR_VAR 0 6
29405: PUSH
29406: LD_VAR 0 13
29410: PUSH
29411: FOR_IN
29412: IFFALSE 29470
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29414: LD_VAR 0 1
29418: PPUSH
29419: LD_STRING M
29421: PUSH
29422: LD_VAR 0 6
29426: PUSH
29427: LD_INT 1
29429: ARRAY
29430: PUSH
29431: LD_VAR 0 6
29435: PUSH
29436: LD_INT 2
29438: ARRAY
29439: PUSH
29440: LD_INT 0
29442: PUSH
29443: LD_INT 0
29445: PUSH
29446: LD_INT 0
29448: PUSH
29449: LD_INT 0
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: PUSH
29461: EMPTY
29462: LIST
29463: PPUSH
29464: CALL_OW 447
29468: GO 29411
29470: POP
29471: POP
// end ;
29472: LD_VAR 0 5
29476: RET
