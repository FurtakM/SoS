// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 115 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 33
// Difficulty := 3 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 3
  32: ST_TO_ADDR
// PrepareArabian ;
  33: CALL 3425 0 0
// PrepareAmerican ;
  37: CALL 1057 0 0
// PrepareRussian ;
  41: CALL 8776 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  45: LD_INT 4
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 4
  53: PUSH
  54: LD_INT 5
  56: PUSH
  57: LD_INT 5
  59: PUSH
  60: LD_INT 5
  62: PUSH
  63: EMPTY
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: PUSH
  69: LD_OWVAR 67
  73: ARRAY
  74: PPUSH
  75: LD_INT 2
  77: PPUSH
  78: LD_INT 1
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 2
  86: PPUSH
  87: LD_INT 1
  89: PPUSH
  90: LD_INT 2
  92: PPUSH
  93: CALL 90488 0 9
// Action ;
  97: CALL 25531 0 0
// if debug then
 101: LD_EXP 1
 105: IFFALSE 114
// FogOff ( 1 ) ;
 107: LD_INT 1
 109: PPUSH
 110: CALL_OW 344
// end ;
 114: END
// export debug , mission_prefix , arBaseActive , arabianAttack , khatamStatus , seenRussianTeleport , joinedToEpsilon , arabianDefeated , hasBase , epsilon , escapeKhatam , arabianAttackSpawned , gensherEscaped , ruScriptActive , ruScriptActive2 , firstAttack , dialogRussianSpaceAmmo , russianWaveAttack , spawnedRussians , hasSniper , arabianEscapedCounter , ruActiveAttacks ; function Init ; begin
 115: LD_INT 0
 117: PPUSH
// debug := false ;
 118: LD_ADDR_EXP 1
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// mission_prefix := 08c_ ;
 126: LD_ADDR_EXP 2
 130: PUSH
 131: LD_STRING 08c_
 133: ST_TO_ADDR
// arBaseActive := true ;
 134: LD_ADDR_EXP 3
 138: PUSH
 139: LD_INT 1
 141: ST_TO_ADDR
// arabianAttack := false ;
 142: LD_ADDR_EXP 4
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// khatamStatus := false ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// seenRussianTeleport := false ;
 158: LD_ADDR_EXP 6
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// joinedToEpsilon := false ;
 166: LD_ADDR_EXP 7
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// arabianDefeated := false ;
 174: LD_ADDR_EXP 8
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// arabianAttackSpawned := false ;
 182: LD_ADDR_EXP 12
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// gensherEscaped := false ;
 190: LD_ADDR_EXP 13
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// hasBase := false ;
 198: LD_ADDR_EXP 9
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// epsilon := 0 ;
 206: LD_ADDR_EXP 10
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// escapeKhatam := false ;
 214: LD_ADDR_EXP 11
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// ruScriptActive := false ;
 222: LD_ADDR_EXP 14
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// ruScriptActive2 := false ;
 230: LD_ADDR_EXP 15
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// firstAttack := false ;
 238: LD_ADDR_EXP 16
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// dialogRussianSpaceAmmo := false ;
 246: LD_ADDR_EXP 17
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// russianWaveAttack := 0 ;
 254: LD_ADDR_EXP 18
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// spawnedRussians := false ;
 262: LD_ADDR_EXP 19
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// hasSniper := false ;
 270: LD_ADDR_EXP 20
 274: PUSH
 275: LD_INT 0
 277: ST_TO_ADDR
// arabianEscapedCounter := 0 ;
 278: LD_ADDR_EXP 21
 282: PUSH
 283: LD_INT 0
 285: ST_TO_ADDR
// ruActiveAttacks := false ;
 286: LD_ADDR_EXP 22
 290: PUSH
 291: LD_INT 0
 293: ST_TO_ADDR
// ruTransportDestroyed := false ;
 294: LD_ADDR_EXP 78
 298: PUSH
 299: LD_INT 0
 301: ST_TO_ADDR
// end ;
 302: LD_VAR 0 1
 306: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) do
 307: LD_INT 22
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 25
 319: PUSH
 320: LD_INT 5
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PPUSH
 331: CALL_OW 69
 335: IFFALSE 348
 337: GO 339
 339: DISABLE
// hasSniper := true ;
 340: LD_ADDR_EXP 20
 344: PUSH
 345: LD_INT 1
 347: ST_TO_ADDR
 348: END
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and not arabianAttack and spawnedRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 349: LD_INT 1
 351: PPUSH
 352: LD_INT 2
 354: PPUSH
 355: CALL_OW 81
 359: PUSH
 360: LD_INT 1
 362: EQUAL
 363: IFFALSE 372
 365: PUSH
 366: LD_EXP 4
 370: NOT
 371: AND
 372: IFFALSE 380
 374: PUSH
 375: LD_EXP 19
 379: AND
 380: IFFALSE 402
 382: PUSH
 383: LD_INT 22
 385: PUSH
 386: LD_INT 3
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PPUSH
 393: CALL_OW 69
 397: PUSH
 398: LD_INT 0
 400: EQUAL
 401: AND
 402: IFFALSE 414
 404: GO 406
 406: DISABLE
// SetAchievement ( ACH_POWER ) ;
 407: LD_STRING ACH_POWER
 409: PPUSH
 410: CALL_OW 543
 414: END
// every 0 0$1 trigger spawnedRussians and not ruBase and not ruBase2 and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 415: LD_EXP 19
 419: IFFALSE 428
 421: PUSH
 422: LD_EXP 68
 426: NOT
 427: AND
 428: IFFALSE 437
 430: PUSH
 431: LD_EXP 69
 435: NOT
 436: AND
 437: IFFALSE 459
 439: PUSH
 440: LD_INT 22
 442: PUSH
 443: LD_INT 3
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: LD_INT 0
 457: EQUAL
 458: AND
 459: IFFALSE 471
 461: GO 463
 463: DISABLE
// SetAchievement ( ACH_TACT ) ;
 464: LD_STRING ACH_TACT
 466: PPUSH
 467: CALL_OW 543
 471: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 472: LD_INT 22
 474: PUSH
 475: LD_INT 1
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: PUSH
 482: LD_INT 30
 484: PUSH
 485: LD_INT 1
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: PPUSH
 496: CALL_OW 69
 500: IFFALSE 532
 502: PUSH
 503: LD_INT 22
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: LD_INT 30
 515: PUSH
 516: LD_INT 32
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: EMPTY
 524: LIST
 525: LIST
 526: PPUSH
 527: CALL_OW 69
 531: AND
 532: IFFALSE 564
 534: PUSH
 535: LD_INT 22
 537: PUSH
 538: LD_INT 1
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: PUSH
 545: LD_INT 30
 547: PUSH
 548: LD_INT 33
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PPUSH
 559: CALL_OW 69
 563: AND
 564: IFFALSE 596
 566: PUSH
 567: LD_INT 22
 569: PUSH
 570: LD_INT 1
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: PUSH
 577: LD_INT 30
 579: PUSH
 580: LD_INT 5
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PPUSH
 591: CALL_OW 69
 595: AND
 596: IFFALSE 628
 598: PUSH
 599: LD_INT 22
 601: PUSH
 602: LD_INT 1
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: PUSH
 609: LD_INT 30
 611: PUSH
 612: LD_INT 3
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: PPUSH
 623: CALL_OW 69
 627: AND
 628: IFFALSE 660
 630: PUSH
 631: LD_INT 22
 633: PUSH
 634: LD_INT 1
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: PUSH
 641: LD_INT 30
 643: PUSH
 644: LD_INT 36
 646: PUSH
 647: EMPTY
 648: LIST
 649: LIST
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: PPUSH
 655: CALL_OW 69
 659: AND
 660: IFFALSE 692
 662: PUSH
 663: LD_INT 22
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: PUSH
 673: LD_INT 30
 675: PUSH
 676: LD_INT 31
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: PPUSH
 687: CALL_OW 69
 691: AND
 692: IFFALSE 724
 694: PUSH
 695: LD_INT 22
 697: PUSH
 698: LD_INT 1
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: PUSH
 705: LD_INT 30
 707: PUSH
 708: LD_INT 22
 710: PUSH
 711: EMPTY
 712: LIST
 713: LIST
 714: PUSH
 715: EMPTY
 716: LIST
 717: LIST
 718: PPUSH
 719: CALL_OW 69
 723: AND
 724: IFFALSE 756
 726: PUSH
 727: LD_INT 22
 729: PUSH
 730: LD_INT 1
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: LD_INT 30
 739: PUSH
 740: LD_INT 20
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: PPUSH
 751: CALL_OW 69
 755: AND
 756: IFFALSE 788
 758: PUSH
 759: LD_INT 22
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: PUSH
 769: LD_INT 30
 771: PUSH
 772: LD_INT 19
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PPUSH
 783: CALL_OW 69
 787: AND
 788: IFFALSE 820
 790: PUSH
 791: LD_INT 22
 793: PUSH
 794: LD_INT 1
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: PUSH
 801: LD_INT 30
 803: PUSH
 804: LD_INT 16
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: EMPTY
 812: LIST
 813: LIST
 814: PPUSH
 815: CALL_OW 69
 819: AND
 820: IFFALSE 852
 822: PUSH
 823: LD_INT 22
 825: PUSH
 826: LD_INT 1
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 30
 835: PUSH
 836: LD_INT 17
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: PPUSH
 847: CALL_OW 69
 851: AND
 852: IFFALSE 884
 854: PUSH
 855: LD_INT 22
 857: PUSH
 858: LD_INT 1
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 30
 867: PUSH
 868: LD_INT 21
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: PPUSH
 879: CALL_OW 69
 883: AND
 884: IFFALSE 916
 886: PUSH
 887: LD_INT 22
 889: PUSH
 890: LD_INT 1
 892: PUSH
 893: EMPTY
 894: LIST
 895: LIST
 896: PUSH
 897: LD_INT 30
 899: PUSH
 900: LD_INT 29
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: PPUSH
 911: CALL_OW 69
 915: AND
 916: IFFALSE 948
 918: PUSH
 919: LD_INT 22
 921: PUSH
 922: LD_INT 1
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 30
 931: PUSH
 932: LD_INT 30
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: EMPTY
 940: LIST
 941: LIST
 942: PPUSH
 943: CALL_OW 69
 947: AND
 948: IFFALSE 980
 950: PUSH
 951: LD_INT 22
 953: PUSH
 954: LD_INT 1
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_INT 30
 963: PUSH
 964: LD_INT 27
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PPUSH
 975: CALL_OW 69
 979: AND
 980: IFFALSE 1012
 982: PUSH
 983: LD_INT 22
 985: PUSH
 986: LD_INT 1
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 30
 995: PUSH
 996: LD_INT 26
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: PPUSH
1007: CALL_OW 69
1011: AND
1012: IFFALSE 1044
1014: PUSH
1015: LD_INT 22
1017: PUSH
1018: LD_INT 1
1020: PUSH
1021: EMPTY
1022: LIST
1023: LIST
1024: PUSH
1025: LD_INT 30
1027: PUSH
1028: LD_INT 28
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: PPUSH
1039: CALL_OW 69
1043: AND
1044: IFFALSE 1056
1046: GO 1048
1048: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1049: LD_STRING ACH_ARCH
1051: PPUSH
1052: CALL_OW 543
1056: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Mike ; export Cornell , Truman , Powell ; export JMMSquad , others , others09 , ape09 ; export function PrepareAmerican ; var i , j , veh , vehs , sibRes , tmp , amount ; begin
1057: LD_INT 0
1059: PPUSH
1060: PPUSH
1061: PPUSH
1062: PPUSH
1063: PPUSH
1064: PPUSH
1065: PPUSH
1066: PPUSH
// uc_nation := nation_american ;
1067: LD_ADDR_OWVAR 21
1071: PUSH
1072: LD_INT 1
1074: ST_TO_ADDR
// uc_side := 4 ;
1075: LD_ADDR_OWVAR 20
1079: PUSH
1080: LD_INT 4
1082: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1083: LD_ADDR_EXP 44
1087: PUSH
1088: LD_STRING Powell
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: LD_STRING 
1096: PPUSH
1097: CALL 55705 0 3
1101: ST_TO_ADDR
// uc_side := 1 ;
1102: LD_ADDR_OWVAR 20
1106: PUSH
1107: LD_INT 1
1109: ST_TO_ADDR
// JMMSquad := [ ] ;
1110: LD_ADDR_EXP 45
1114: PUSH
1115: EMPTY
1116: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 10_ ) ;
1117: LD_ADDR_EXP 23
1121: PUSH
1122: LD_STRING JMM
1124: PPUSH
1125: LD_EXP 1
1129: NOT
1130: PPUSH
1131: LD_STRING 10_
1133: PPUSH
1134: CALL 55705 0 3
1138: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 10_ ) ;
1139: LD_ADDR_EXP 32
1143: PUSH
1144: LD_STRING Gary
1146: PPUSH
1147: LD_EXP 1
1151: NOT
1152: PPUSH
1153: LD_STRING 10_
1155: PPUSH
1156: CALL 55705 0 3
1160: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 10_ ) ;
1161: LD_ADDR_EXP 27
1165: PUSH
1166: LD_STRING Cyrus
1168: PPUSH
1169: LD_EXP 1
1173: NOT
1174: PPUSH
1175: LD_STRING 10_
1177: PPUSH
1178: CALL 55705 0 3
1182: ST_TO_ADDR
// if Cyrus then
1183: LD_EXP 27
1187: IFFALSE 1205
// JMMSquad := JMMSquad ^ Cyrus ;
1189: LD_ADDR_EXP 45
1193: PUSH
1194: LD_EXP 45
1198: PUSH
1199: LD_EXP 27
1203: ADD
1204: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 10_ ) ;
1205: LD_ADDR_EXP 26
1209: PUSH
1210: LD_STRING Bobby
1212: PPUSH
1213: LD_EXP 1
1217: NOT
1218: PPUSH
1219: LD_STRING 10_
1221: PPUSH
1222: CALL 55705 0 3
1226: ST_TO_ADDR
// if Bobby then
1227: LD_EXP 26
1231: IFFALSE 1249
// JMMSquad := JMMSquad ^ Bobby ;
1233: LD_ADDR_EXP 45
1237: PUSH
1238: LD_EXP 45
1242: PUSH
1243: LD_EXP 26
1247: ADD
1248: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 10_ ) ;
1249: LD_ADDR_EXP 28
1253: PUSH
1254: LD_STRING Lisa
1256: PPUSH
1257: LD_EXP 1
1261: NOT
1262: PPUSH
1263: LD_STRING 10_
1265: PPUSH
1266: CALL 55705 0 3
1270: ST_TO_ADDR
// if Lisa then
1271: LD_EXP 28
1275: IFFALSE 1293
// JMMSquad := JMMSquad ^ Lisa ;
1277: LD_ADDR_EXP 45
1281: PUSH
1282: LD_EXP 45
1286: PUSH
1287: LD_EXP 28
1291: ADD
1292: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 10_ ) ;
1293: LD_ADDR_EXP 24
1297: PUSH
1298: LD_STRING Brown
1300: PPUSH
1301: LD_EXP 1
1305: NOT
1306: PPUSH
1307: LD_STRING 10_
1309: PPUSH
1310: CALL 55705 0 3
1314: ST_TO_ADDR
// if Brown then
1315: LD_EXP 24
1319: IFFALSE 1337
// JMMSquad := JMMSquad ^ Brown ;
1321: LD_ADDR_EXP 45
1325: PUSH
1326: LD_EXP 45
1330: PUSH
1331: LD_EXP 24
1335: ADD
1336: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 10_ ) ;
1337: LD_ADDR_EXP 25
1341: PUSH
1342: LD_STRING Donaldson
1344: PPUSH
1345: LD_EXP 1
1349: NOT
1350: PPUSH
1351: LD_STRING 10_
1353: PPUSH
1354: CALL 55705 0 3
1358: ST_TO_ADDR
// if Donaldson then
1359: LD_EXP 25
1363: IFFALSE 1381
// JMMSquad := JMMSquad ^ Donaldson ;
1365: LD_ADDR_EXP 45
1369: PUSH
1370: LD_EXP 45
1374: PUSH
1375: LD_EXP 25
1379: ADD
1380: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 10_ ) ;
1381: LD_ADDR_EXP 29
1385: PUSH
1386: LD_STRING Frank
1388: PPUSH
1389: LD_EXP 1
1393: NOT
1394: PPUSH
1395: LD_STRING 10_
1397: PPUSH
1398: CALL 55705 0 3
1402: ST_TO_ADDR
// if Frank then
1403: LD_EXP 29
1407: IFFALSE 1425
// JMMSquad := JMMSquad ^ Frank ;
1409: LD_ADDR_EXP 45
1413: PUSH
1414: LD_EXP 45
1418: PUSH
1419: LD_EXP 29
1423: ADD
1424: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 10_ ) ;
1425: LD_ADDR_EXP 31
1429: PUSH
1430: LD_STRING Houten
1432: PPUSH
1433: LD_EXP 1
1437: NOT
1438: PPUSH
1439: LD_STRING 10_
1441: PPUSH
1442: CALL 55705 0 3
1446: ST_TO_ADDR
// if Houten then
1447: LD_EXP 31
1451: IFFALSE 1469
// JMMSquad := JMMSquad ^ Houten ;
1453: LD_ADDR_EXP 45
1457: PUSH
1458: LD_EXP 45
1462: PUSH
1463: LD_EXP 31
1467: ADD
1468: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn10 ) ;
1469: LD_ADDR_EXP 46
1473: PUSH
1474: LD_STRING OthersIn10
1476: PPUSH
1477: CALL_OW 31
1481: ST_TO_ADDR
// if Count ( JMMSquad ) + Count ( others ) < 9 then
1482: LD_EXP 45
1486: PPUSH
1487: CALL 57905 0 1
1491: PUSH
1492: LD_EXP 46
1496: PPUSH
1497: CALL 57905 0 1
1501: PLUS
1502: PUSH
1503: LD_INT 9
1505: LESS
1506: IFFALSE 1593
// begin InitHC_All ( ) ;
1508: CALL_OW 584
// for i := 9 downto Count ( JMMSquad ) + Count ( others ) do
1512: LD_ADDR_VAR 0 2
1516: PUSH
1517: DOUBLE
1518: LD_INT 9
1520: INC
1521: ST_TO_ADDR
1522: LD_EXP 45
1526: PPUSH
1527: CALL 57905 0 1
1531: PUSH
1532: LD_EXP 46
1536: PPUSH
1537: CALL 57905 0 1
1541: PLUS
1542: PUSH
1543: FOR_DOWNTO
1544: IFFALSE 1591
// begin PrepareHuman ( false , i mod 4 + 1 , 5 ) ;
1546: LD_INT 0
1548: PPUSH
1549: LD_VAR 0 2
1553: PUSH
1554: LD_INT 4
1556: MOD
1557: PUSH
1558: LD_INT 1
1560: PLUS
1561: PPUSH
1562: LD_INT 5
1564: PPUSH
1565: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1569: LD_ADDR_EXP 46
1573: PUSH
1574: LD_EXP 46
1578: PPUSH
1579: CALL_OW 44
1583: PPUSH
1584: CALL 93837 0 2
1588: ST_TO_ADDR
// end ;
1589: GO 1543
1591: POP
1592: POP
// end ; if debug then
1593: LD_EXP 1
1597: IFFALSE 1638
// result := [ Cyrus , Bobby , Lisa , Donaldson , Brown ] else
1599: LD_ADDR_VAR 0 1
1603: PUSH
1604: LD_EXP 27
1608: PUSH
1609: LD_EXP 26
1613: PUSH
1614: LD_EXP 28
1618: PUSH
1619: LD_EXP 25
1623: PUSH
1624: LD_EXP 24
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: ST_TO_ADDR
1636: GO 1801
// result := CharacterSelection ( 1 , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ sel_not_changeable , sel_hired , sel_change_class ] ^ JMM ^ Gary ^ [ sel_not_hired , sel_changeable , sel_change_class ] ^ JMMSquad ^ others ^ [ sel_not_changeable , sel_not_hired ] ^ Powell , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , class_scientistic ] ) ;
1638: LD_ADDR_VAR 0 1
1642: PUSH
1643: LD_STRING 1
1645: PPUSH
1646: LD_INT 6
1648: PUSH
1649: LD_INT 5
1651: PUSH
1652: LD_INT 4
1654: PUSH
1655: LD_INT 4
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: PUSH
1664: LD_OWVAR 67
1668: ARRAY
1669: PPUSH
1670: LD_INT 6
1672: PUSH
1673: LD_INT 5
1675: PUSH
1676: LD_INT 4
1678: PUSH
1679: LD_INT 4
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: PUSH
1688: LD_OWVAR 67
1692: ARRAY
1693: PPUSH
1694: LD_INT -4
1696: PUSH
1697: LD_INT -1
1699: PUSH
1700: LD_INT -5
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: LIST
1707: PUSH
1708: LD_EXP 23
1712: ADD
1713: PUSH
1714: LD_EXP 32
1718: ADD
1719: PUSH
1720: LD_INT -2
1722: PUSH
1723: LD_INT -3
1725: PUSH
1726: LD_INT -5
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: ADD
1734: PUSH
1735: LD_EXP 45
1739: ADD
1740: PUSH
1741: LD_EXP 46
1745: ADD
1746: PUSH
1747: LD_INT -4
1749: PUSH
1750: LD_INT -2
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: ADD
1757: PUSH
1758: LD_EXP 44
1762: ADD
1763: PPUSH
1764: LD_INT 1
1766: PUSH
1767: LD_INT 3
1769: PUSH
1770: LD_INT 1
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: PUSH
1777: LD_INT 2
1779: PUSH
1780: LD_INT 1
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 4
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: PPUSH
1796: CALL_OW 42
1800: ST_TO_ADDR
// result := JoinUnion ( result , JMM ) ;
1801: LD_ADDR_VAR 0 1
1805: PUSH
1806: LD_VAR 0 1
1810: PPUSH
1811: LD_EXP 23
1815: PPUSH
1816: CALL 93874 0 2
1820: ST_TO_ADDR
// if Gary then
1821: LD_EXP 32
1825: IFFALSE 1847
// result := JoinUnion ( result , Gary ) ;
1827: LD_ADDR_VAR 0 1
1831: PUSH
1832: LD_VAR 0 1
1836: PPUSH
1837: LD_EXP 32
1841: PPUSH
1842: CALL 93874 0 2
1846: ST_TO_ADDR
// if Count ( others ) then
1847: LD_EXP 46
1851: PPUSH
1852: CALL 57905 0 1
1856: IFFALSE 1874
// others := others diff result ;
1858: LD_ADDR_EXP 46
1862: PUSH
1863: LD_EXP 46
1867: PUSH
1868: LD_VAR 0 1
1872: DIFF
1873: ST_TO_ADDR
// vehs := [ ] ;
1874: LD_ADDR_VAR 0 5
1878: PUSH
1879: EMPTY
1880: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1881: LD_INT 2
1883: PPUSH
1884: LD_INT 1
1886: PPUSH
1887: LD_INT 1
1889: PPUSH
1890: LD_INT 12
1892: PPUSH
1893: LD_INT 50
1895: PPUSH
1896: CALL 60667 0 5
// veh := CreateVehicle ;
1900: LD_ADDR_VAR 0 4
1904: PUSH
1905: CALL_OW 45
1909: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1910: LD_ADDR_VAR 0 5
1914: PUSH
1915: LD_VAR 0 5
1919: PPUSH
1920: LD_VAR 0 4
1924: PPUSH
1925: CALL 93837 0 2
1929: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1930: LD_VAR 0 4
1934: PPUSH
1935: LD_INT 1
1937: PPUSH
1938: CALL_OW 233
// sibRes := LoadVariable ( 09_sibRes , 100 ) - 20 ;
1942: LD_ADDR_VAR 0 6
1946: PUSH
1947: LD_STRING 09_sibRes
1949: PPUSH
1950: LD_INT 100
1952: PPUSH
1953: CALL_OW 30
1957: PUSH
1958: LD_INT 20
1960: MINUS
1961: ST_TO_ADDR
// if sibRes >= 100 then
1962: LD_VAR 0 6
1966: PUSH
1967: LD_INT 100
1969: GREATEREQUAL
1970: IFFALSE 1989
// SetCargo ( veh , mat_siberit , 100 ) else
1972: LD_VAR 0 4
1976: PPUSH
1977: LD_INT 3
1979: PPUSH
1980: LD_INT 100
1982: PPUSH
1983: CALL_OW 290
1987: GO 2006
// SetCargo ( veh , mat_siberit , sibRes ) ;
1989: LD_VAR 0 4
1993: PPUSH
1994: LD_INT 3
1996: PPUSH
1997: LD_VAR 0 6
2001: PPUSH
2002: CALL_OW 290
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
2006: LD_INT 2
2008: PPUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_INT 1
2014: PPUSH
2015: LD_INT 12
2017: PPUSH
2018: LD_INT 50
2020: PPUSH
2021: CALL 60667 0 5
// veh := CreateVehicle ;
2025: LD_ADDR_VAR 0 4
2029: PUSH
2030: CALL_OW 45
2034: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
2035: LD_ADDR_VAR 0 5
2039: PUSH
2040: LD_VAR 0 5
2044: PPUSH
2045: LD_VAR 0 4
2049: PPUSH
2050: CALL 93837 0 2
2054: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2055: LD_VAR 0 4
2059: PPUSH
2060: LD_INT 1
2062: PPUSH
2063: CALL_OW 233
// SetCargo ( veh , mat_cans , 100 ) ;
2067: LD_VAR 0 4
2071: PPUSH
2072: LD_INT 1
2074: PPUSH
2075: LD_INT 100
2077: PPUSH
2078: CALL_OW 290
// for i := 1 to Count ( result ) - 2 do
2082: LD_ADDR_VAR 0 2
2086: PUSH
2087: DOUBLE
2088: LD_INT 1
2090: DEC
2091: ST_TO_ADDR
2092: LD_VAR 0 1
2096: PPUSH
2097: CALL 57905 0 1
2101: PUSH
2102: LD_INT 2
2104: MINUS
2105: PUSH
2106: FOR_TO
2107: IFFALSE 2213
// begin PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , [ us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun ] [ i mod 5 + 1 ] , rand ( 45 , 55 ) ) ;
2109: LD_INT 2
2111: PPUSH
2112: LD_INT 1
2114: PPUSH
2115: LD_INT 1
2117: PPUSH
2118: LD_INT 3
2120: PUSH
2121: LD_INT 4
2123: PUSH
2124: LD_INT 5
2126: PUSH
2127: LD_INT 11
2129: PUSH
2130: LD_INT 3
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: PUSH
2140: LD_VAR 0 2
2144: PUSH
2145: LD_INT 5
2147: MOD
2148: PUSH
2149: LD_INT 1
2151: PLUS
2152: ARRAY
2153: PPUSH
2154: LD_INT 45
2156: PPUSH
2157: LD_INT 55
2159: PPUSH
2160: CALL_OW 12
2164: PPUSH
2165: CALL 60667 0 5
// veh := CreateVehicle ;
2169: LD_ADDR_VAR 0 4
2173: PUSH
2174: CALL_OW 45
2178: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
2179: LD_ADDR_VAR 0 5
2183: PUSH
2184: LD_VAR 0 5
2188: PPUSH
2189: LD_VAR 0 4
2193: PPUSH
2194: CALL 93837 0 2
2198: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2199: LD_VAR 0 4
2203: PPUSH
2204: LD_INT 1
2206: PPUSH
2207: CALL_OW 233
// end ;
2211: GO 2106
2213: POP
2214: POP
// for i in vehs do
2215: LD_ADDR_VAR 0 2
2219: PUSH
2220: LD_VAR 0 5
2224: PUSH
2225: FOR_IN
2226: IFFALSE 2281
// begin PlaceUnitArea ( i , startArea , false ) ;
2228: LD_VAR 0 2
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: LD_INT 0
2238: PPUSH
2239: CALL_OW 49
// PlaceHumanInUnit ( result [ 1 ] , i ) ;
2243: LD_VAR 0 1
2247: PUSH
2248: LD_INT 1
2250: ARRAY
2251: PPUSH
2252: LD_VAR 0 2
2256: PPUSH
2257: CALL_OW 52
// result := Delete ( result , 1 ) ;
2261: LD_ADDR_VAR 0 1
2265: PUSH
2266: LD_VAR 0 1
2270: PPUSH
2271: LD_INT 1
2273: PPUSH
2274: CALL_OW 3
2278: ST_TO_ADDR
// end ;
2279: GO 2225
2281: POP
2282: POP
// uc_side := 4 ;
2283: LD_ADDR_OWVAR 20
2287: PUSH
2288: LD_INT 4
2290: ST_TO_ADDR
// if LoadVariable ( 08_SikorskiStatus , debug ) then
2291: LD_STRING 08_SikorskiStatus
2293: PPUSH
2294: LD_EXP 1
2298: PPUSH
2299: CALL_OW 30
2303: IFFALSE 2324
// Truman := PrepareUnit ( Truman , false ,  ) ;
2305: LD_ADDR_EXP 43
2309: PUSH
2310: LD_STRING Truman
2312: PPUSH
2313: LD_INT 0
2315: PPUSH
2316: LD_STRING 
2318: PPUSH
2319: CALL 55705 0 3
2323: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , false ,  ) ;
2324: LD_ADDR_EXP 33
2328: PUSH
2329: LD_STRING Simms
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: LD_STRING 
2337: PPUSH
2338: CALL 55705 0 3
2342: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 08_ ) ;
2343: LD_ADDR_EXP 34
2347: PUSH
2348: LD_STRING Denis
2350: PPUSH
2351: LD_EXP 1
2355: NOT
2356: PPUSH
2357: LD_STRING 08_
2359: PPUSH
2360: CALL 55705 0 3
2364: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 08_ ) ;
2365: LD_ADDR_EXP 35
2369: PUSH
2370: LD_STRING Joan
2372: PPUSH
2373: LD_EXP 1
2377: NOT
2378: PPUSH
2379: LD_STRING 08_
2381: PPUSH
2382: CALL 55705 0 3
2386: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 08_ ) ;
2387: LD_ADDR_EXP 41
2391: PUSH
2392: LD_STRING Mike
2394: PPUSH
2395: LD_EXP 1
2399: NOT
2400: PPUSH
2401: LD_STRING 08_
2403: PPUSH
2404: CALL 55705 0 3
2408: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2409: LD_STRING 08_Khatam
2411: PPUSH
2412: CALL_OW 28
2416: IFFALSE 2439
// Khatam := PrepareUnit ( Khatam , true , 08_ ) else
2418: LD_ADDR_EXP 36
2422: PUSH
2423: LD_STRING Khatam
2425: PPUSH
2426: LD_INT 1
2428: PPUSH
2429: LD_STRING 08_
2431: PPUSH
2432: CALL 55705 0 3
2436: ST_TO_ADDR
2437: GO 2467
// if TestCharacters ( 03_Khatam ) then
2439: LD_STRING 03_Khatam
2441: PPUSH
2442: CALL_OW 28
2446: IFFALSE 2467
// Khatam := PrepareUnit ( Khatam , true , 03_ ) ;
2448: LD_ADDR_EXP 36
2452: PUSH
2453: LD_STRING Khatam
2455: PPUSH
2456: LD_INT 1
2458: PPUSH
2459: LD_STRING 03_
2461: PPUSH
2462: CALL 55705 0 3
2466: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 08_ ) ;
2467: LD_ADDR_EXP 37
2471: PUSH
2472: LD_STRING Gladstone
2474: PPUSH
2475: LD_EXP 1
2479: NOT
2480: PPUSH
2481: LD_STRING 08_
2483: PPUSH
2484: CALL 55705 0 3
2488: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) ,  ) ;
2489: LD_ADDR_EXP 39
2493: PUSH
2494: LD_STRING DeltaDoctor
2496: PPUSH
2497: LD_EXP 1
2501: NOT
2502: PPUSH
2503: LD_STRING 
2505: PPUSH
2506: CALL 55705 0 3
2510: ST_TO_ADDR
// if Frank then
2511: LD_EXP 29
2515: IFFALSE 2538
// Kikuchi := PrepareUnit ( Yamoko , false ,  ) else
2517: LD_ADDR_EXP 30
2521: PUSH
2522: LD_STRING Yamoko
2524: PPUSH
2525: LD_INT 0
2527: PPUSH
2528: LD_STRING 
2530: PPUSH
2531: CALL 55705 0 3
2535: ST_TO_ADDR
2536: GO 2560
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 08_ ) ;
2538: LD_ADDR_EXP 30
2542: PUSH
2543: LD_STRING Kikuchi
2545: PPUSH
2546: LD_EXP 1
2550: NOT
2551: PPUSH
2552: LD_STRING 08_
2554: PPUSH
2555: CALL 55705 0 3
2559: ST_TO_ADDR
// others09 := CreateCharacterSet ( 09_others ) ;
2560: LD_ADDR_EXP 47
2564: PUSH
2565: LD_STRING 09_others
2567: PPUSH
2568: CALL_OW 31
2572: ST_TO_ADDR
// ape09 := CreateCharacterSet ( 09_apes ) ;
2573: LD_ADDR_EXP 48
2577: PUSH
2578: LD_STRING 09_apes
2580: PPUSH
2581: CALL_OW 31
2585: ST_TO_ADDR
// if Truman then
2586: LD_EXP 43
2590: IFFALSE 2607
// PlaceUnitArea ( Truman , epsilonSpawnArea , false ) ;
2592: LD_EXP 43
2596: PPUSH
2597: LD_INT 4
2599: PPUSH
2600: LD_INT 0
2602: PPUSH
2603: CALL_OW 49
// if Mike then
2607: LD_EXP 41
2611: IFFALSE 2628
// PlaceUnitArea ( Mike , epsilonSpawnArea , false ) ;
2613: LD_EXP 41
2617: PPUSH
2618: LD_INT 4
2620: PPUSH
2621: LD_INT 0
2623: PPUSH
2624: CALL_OW 49
// if Simms then
2628: LD_EXP 33
2632: IFFALSE 2649
// PlaceUnitArea ( Simms , epsilonSpawnArea , false ) ;
2634: LD_EXP 33
2638: PPUSH
2639: LD_INT 4
2641: PPUSH
2642: LD_INT 0
2644: PPUSH
2645: CALL_OW 49
// if Denis then
2649: LD_EXP 34
2653: IFFALSE 2670
// PlaceUnitArea ( Denis , epsilonSpawnArea , false ) ;
2655: LD_EXP 34
2659: PPUSH
2660: LD_INT 4
2662: PPUSH
2663: LD_INT 0
2665: PPUSH
2666: CALL_OW 49
// if Joan then
2670: LD_EXP 35
2674: IFFALSE 2691
// PlaceUnitArea ( Joan , epsilonSpawnArea , false ) ;
2676: LD_EXP 35
2680: PPUSH
2681: LD_INT 4
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 49
// if Khatam then
2691: LD_EXP 36
2695: IFFALSE 2712
// PlaceUnitArea ( Khatam , epsilonSpawnArea , false ) ;
2697: LD_EXP 36
2701: PPUSH
2702: LD_INT 4
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// if Gladstone then
2712: LD_EXP 37
2716: IFFALSE 2733
// PlaceUnitArea ( Gladstone , epsilonSpawnArea , false ) ;
2718: LD_EXP 37
2722: PPUSH
2723: LD_INT 4
2725: PPUSH
2726: LD_INT 0
2728: PPUSH
2729: CALL_OW 49
// if DeltaDoctor then
2733: LD_EXP 39
2737: IFFALSE 2754
// PlaceUnitArea ( DeltaDoctor , epsilonSpawnArea , false ) ;
2739: LD_EXP 39
2743: PPUSH
2744: LD_INT 4
2746: PPUSH
2747: LD_INT 0
2749: PPUSH
2750: CALL_OW 49
// if Kikuchi then
2754: LD_EXP 30
2758: IFFALSE 2775
// PlaceUnitArea ( Kikuchi , epsilonSpawnArea , false ) ;
2760: LD_EXP 30
2764: PPUSH
2765: LD_INT 4
2767: PPUSH
2768: LD_INT 0
2770: PPUSH
2771: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , class_scientistic ) ;
2775: LD_EXP 33
2779: PUSH
2780: LD_EXP 36
2784: PUSH
2785: LD_EXP 34
2789: PUSH
2790: LD_EXP 37
2794: PUSH
2795: LD_EXP 39
2799: PUSH
2800: LD_EXP 35
2804: PUSH
2805: EMPTY
2806: LIST
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: PPUSH
2813: LD_INT 4
2815: PPUSH
2816: CALL_OW 336
// amount := Count ( others09 ) ;
2820: LD_ADDR_VAR 0 8
2824: PUSH
2825: LD_EXP 47
2829: PPUSH
2830: CALL 57905 0 1
2834: ST_TO_ADDR
// if amount then
2835: LD_VAR 0 8
2839: IFFALSE 2987
// begin if amount > [ 6 , 5 , 4 , 4 ] [ Difficulty ] then
2841: LD_VAR 0 8
2845: PUSH
2846: LD_INT 6
2848: PUSH
2849: LD_INT 5
2851: PUSH
2852: LD_INT 4
2854: PUSH
2855: LD_INT 4
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: PUSH
2864: LD_OWVAR 67
2868: ARRAY
2869: GREATER
2870: IFFALSE 2901
// amount := [ 6 , 5 , 4 , 4 ] [ Difficulty ] ;
2872: LD_ADDR_VAR 0 8
2876: PUSH
2877: LD_INT 6
2879: PUSH
2880: LD_INT 5
2882: PUSH
2883: LD_INT 4
2885: PUSH
2886: LD_INT 4
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: LIST
2893: LIST
2894: PUSH
2895: LD_OWVAR 67
2899: ARRAY
2900: ST_TO_ADDR
// for i := 1 to amount do
2901: LD_ADDR_VAR 0 2
2905: PUSH
2906: DOUBLE
2907: LD_INT 1
2909: DEC
2910: ST_TO_ADDR
2911: LD_VAR 0 8
2915: PUSH
2916: FOR_TO
2917: IFFALSE 2958
// begin PlaceUnitArea ( others09 [ 1 ] , epsilonSpawnArea , false ) ;
2919: LD_EXP 47
2923: PUSH
2924: LD_INT 1
2926: ARRAY
2927: PPUSH
2928: LD_INT 4
2930: PPUSH
2931: LD_INT 0
2933: PPUSH
2934: CALL_OW 49
// others09 := Delete ( others09 , 1 ) ;
2938: LD_ADDR_EXP 47
2942: PUSH
2943: LD_EXP 47
2947: PPUSH
2948: LD_INT 1
2950: PPUSH
2951: CALL_OW 3
2955: ST_TO_ADDR
// end ;
2956: GO 2916
2958: POP
2959: POP
// if Count ( others09 ) then
2960: LD_EXP 47
2964: PPUSH
2965: CALL 57905 0 1
2969: IFFALSE 2987
// others := others union others09 ;
2971: LD_ADDR_EXP 46
2975: PUSH
2976: LD_EXP 46
2980: PUSH
2981: LD_EXP 47
2985: UNION
2986: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) = 0 then
2987: LD_INT 22
2989: PUSH
2990: LD_INT 4
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: PUSH
2997: LD_INT 50
2999: PUSH
3000: EMPTY
3001: LIST
3002: PUSH
3003: LD_INT 25
3005: PUSH
3006: LD_INT 2
3008: PUSH
3009: EMPTY
3010: LIST
3011: LIST
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: LIST
3017: PPUSH
3018: CALL_OW 69
3022: PUSH
3023: LD_INT 0
3025: EQUAL
3026: IFFALSE 3165
// begin tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3028: LD_ADDR_VAR 0 7
3032: PUSH
3033: LD_INT 22
3035: PUSH
3036: LD_INT 4
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: PUSH
3043: LD_INT 50
3045: PUSH
3046: EMPTY
3047: LIST
3048: PUSH
3049: LD_INT 25
3051: PUSH
3052: LD_INT 2
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: LIST
3063: PPUSH
3064: CALL_OW 69
3068: PUSH
3069: LD_EXP 33
3073: PUSH
3074: LD_EXP 36
3078: PUSH
3079: LD_EXP 34
3083: PUSH
3084: LD_EXP 37
3088: PUSH
3089: LD_EXP 39
3093: PUSH
3094: LD_EXP 35
3098: PUSH
3099: EMPTY
3100: LIST
3101: LIST
3102: LIST
3103: LIST
3104: LIST
3105: LIST
3106: DIFF
3107: ST_TO_ADDR
// if not tmp then
3108: LD_VAR 0 7
3112: NOT
3113: IFFALSE 3149
// begin if Denis then
3115: LD_EXP 34
3119: IFFALSE 3135
// SetClass ( Denis , class_engineer ) else
3121: LD_EXP 34
3125: PPUSH
3126: LD_INT 2
3128: PPUSH
3129: CALL_OW 336
3133: GO 3147
// SetClass ( DeltaDoctor , class_engineer ) ;
3135: LD_EXP 39
3139: PPUSH
3140: LD_INT 2
3142: PPUSH
3143: CALL_OW 336
// end else
3147: GO 3165
// SetClass ( tmp [ 1 ] , class_engineer ) ;
3149: LD_VAR 0 7
3153: PUSH
3154: LD_INT 1
3156: ARRAY
3157: PPUSH
3158: LD_INT 2
3160: PPUSH
3161: CALL_OW 336
// end ; for i in ape09 do
3165: LD_ADDR_VAR 0 2
3169: PUSH
3170: LD_EXP 48
3174: PUSH
3175: FOR_IN
3176: IFFALSE 3195
// PlaceUnitArea ( i , epsilonSpawnArea , false ) ;
3178: LD_VAR 0 2
3182: PPUSH
3183: LD_INT 4
3185: PPUSH
3186: LD_INT 0
3188: PPUSH
3189: CALL_OW 49
3193: GO 3175
3195: POP
3196: POP
// PrepareSoldier ( sex_female , 6 ) ;
3197: LD_INT 2
3199: PPUSH
3200: LD_INT 6
3202: PPUSH
3203: CALL_OW 381
// AmScout := CreateHuman ;
3207: LD_ADDR_EXP 40
3211: PUSH
3212: CALL_OW 44
3216: ST_TO_ADDR
// end ;
3217: LD_VAR 0 1
3221: RET
// export function PrepareCornell ; begin
3222: LD_INT 0
3224: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3225: LD_INT 4
3227: PPUSH
3228: LD_INT 4
3230: PPUSH
3231: CALL_OW 343
// uc_side := 4 ;
3235: LD_ADDR_OWVAR 20
3239: PUSH
3240: LD_INT 4
3242: ST_TO_ADDR
// uc_nation := nation_american ;
3243: LD_ADDR_OWVAR 21
3247: PUSH
3248: LD_INT 1
3250: ST_TO_ADDR
// Cornell := PrepareUnit ( Cornel , ( not debug ) , 03_ ) ;
3251: LD_ADDR_EXP 42
3255: PUSH
3256: LD_STRING Cornel
3258: PPUSH
3259: LD_EXP 1
3263: NOT
3264: PPUSH
3265: LD_STRING 03_
3267: PPUSH
3268: CALL 55705 0 3
3272: ST_TO_ADDR
// if not Cornell then
3273: LD_EXP 42
3277: NOT
3278: IFFALSE 3282
// exit ;
3280: GO 3420
// PlaceUnitArea ( Cornell , cornelSpawnArea , false ) ;
3282: LD_EXP 42
3286: PPUSH
3287: LD_INT 12
3289: PPUSH
3290: LD_INT 0
3292: PPUSH
3293: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3297: LD_EXP 42
3301: PPUSH
3302: LD_INT 350
3304: PPUSH
3305: CALL_OW 234
// ComMoveXY ( Cornell , 125 , 17 ) ;
3309: LD_EXP 42
3313: PPUSH
3314: LD_INT 125
3316: PPUSH
3317: LD_INT 17
3319: PPUSH
3320: CALL_OW 111
// AddComMoveXY ( Cornell , 112 , 19 ) ;
3324: LD_EXP 42
3328: PPUSH
3329: LD_INT 112
3331: PPUSH
3332: LD_INT 19
3334: PPUSH
3335: CALL_OW 171
// if IsInUnit ( JMM ) then
3339: LD_EXP 23
3343: PPUSH
3344: CALL_OW 310
3348: IFFALSE 3391
// AddComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3350: LD_EXP 42
3354: PPUSH
3355: LD_EXP 23
3359: PPUSH
3360: CALL_OW 310
3364: PPUSH
3365: CALL_OW 250
3369: PPUSH
3370: LD_EXP 23
3374: PPUSH
3375: CALL_OW 310
3379: PPUSH
3380: CALL_OW 251
3384: PPUSH
3385: CALL_OW 171
3389: GO 3420
// AddComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3391: LD_EXP 42
3395: PPUSH
3396: LD_EXP 23
3400: PPUSH
3401: CALL_OW 250
3405: PPUSH
3406: LD_EXP 23
3410: PPUSH
3411: CALL_OW 251
3415: PPUSH
3416: CALL_OW 171
// end ; end_of_file
3420: LD_VAR 0 1
3424: RET
// export arForces , Dietrich , Ahmed ; export arTech , arBuildings , arMines , arCameras , arEscapist ; export function PrepareArabian ; var i , j , un , tmp , skill ; begin
3425: LD_INT 0
3427: PPUSH
3428: PPUSH
3429: PPUSH
3430: PPUSH
3431: PPUSH
3432: PPUSH
// uc_side := 2 ;
3433: LD_ADDR_OWVAR 20
3437: PUSH
3438: LD_INT 2
3440: ST_TO_ADDR
// uc_nation := nation_arabian ;
3441: LD_ADDR_OWVAR 21
3445: PUSH
3446: LD_INT 2
3448: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
3449: LD_ADDR_VAR 0 6
3453: PUSH
3454: LD_INT 4
3456: PUSH
3457: LD_INT 5
3459: PUSH
3460: LD_INT 6
3462: PUSH
3463: LD_INT 7
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: PUSH
3472: LD_OWVAR 67
3476: ARRAY
3477: ST_TO_ADDR
// arForces := [ ] ;
3478: LD_ADDR_EXP 49
3482: PUSH
3483: EMPTY
3484: ST_TO_ADDR
// arTech := [ ] ;
3485: LD_ADDR_EXP 52
3489: PUSH
3490: EMPTY
3491: ST_TO_ADDR
// arBuildings := [ ] ;
3492: LD_ADDR_EXP 53
3496: PUSH
3497: EMPTY
3498: ST_TO_ADDR
// arCameras := [ [ 94 , 19 ] , [ 92 , 34 ] , [ 109 , 67 ] , [ 120 , 38 ] , [ 116 , 30 ] , [ 102 , 20 ] ] ;
3499: LD_ADDR_EXP 55
3503: PUSH
3504: LD_INT 94
3506: PUSH
3507: LD_INT 19
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PUSH
3514: LD_INT 92
3516: PUSH
3517: LD_INT 34
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: PUSH
3524: LD_INT 109
3526: PUSH
3527: LD_INT 67
3529: PUSH
3530: EMPTY
3531: LIST
3532: LIST
3533: PUSH
3534: LD_INT 120
3536: PUSH
3537: LD_INT 38
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: PUSH
3544: LD_INT 116
3546: PUSH
3547: LD_INT 30
3549: PUSH
3550: EMPTY
3551: LIST
3552: LIST
3553: PUSH
3554: LD_INT 102
3556: PUSH
3557: LD_INT 20
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PUSH
3564: EMPTY
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: ST_TO_ADDR
// arMines := [ [ 73 , 36 ] , [ 76 , 38 ] , [ 79 , 39 ] ] ;
3572: LD_ADDR_EXP 54
3576: PUSH
3577: LD_INT 73
3579: PUSH
3580: LD_INT 36
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: PUSH
3587: LD_INT 76
3589: PUSH
3590: LD_INT 38
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: PUSH
3597: LD_INT 79
3599: PUSH
3600: LD_INT 39
3602: PUSH
3603: EMPTY
3604: LIST
3605: LIST
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: LIST
3611: ST_TO_ADDR
// arEscapist := [ ] ;
3612: LD_ADDR_EXP 56
3616: PUSH
3617: EMPTY
3618: ST_TO_ADDR
// SetResourceType ( GetBase ( arDep ) , mat_cans , 150 ) ;
3619: LD_INT 35
3621: PPUSH
3622: CALL_OW 274
3626: PPUSH
3627: LD_INT 1
3629: PPUSH
3630: LD_INT 150
3632: PPUSH
3633: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_oil , 60 ) ;
3637: LD_INT 35
3639: PPUSH
3640: CALL_OW 274
3644: PPUSH
3645: LD_INT 2
3647: PPUSH
3648: LD_INT 60
3650: PPUSH
3651: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_siberit , 10 ) ;
3655: LD_INT 35
3657: PPUSH
3658: CALL_OW 274
3662: PPUSH
3663: LD_INT 3
3665: PPUSH
3666: LD_INT 10
3668: PPUSH
3669: CALL_OW 277
// HiddenCamera ( 36 , 22 , 2 ) ;
3673: LD_INT 36
3675: PPUSH
3676: LD_INT 22
3678: PPUSH
3679: LD_INT 2
3681: PPUSH
3682: CALL_OW 244
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
3686: LD_ADDR_VAR 0 2
3690: PUSH
3691: LD_INT 22
3693: PUSH
3694: LD_INT 2
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: PUSH
3701: LD_INT 21
3703: PUSH
3704: LD_INT 3
3706: PUSH
3707: EMPTY
3708: LIST
3709: LIST
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PPUSH
3715: CALL_OW 69
3719: PUSH
3720: FOR_IN
3721: IFFALSE 3737
// SetBLevel ( i , 6 ) ;
3723: LD_VAR 0 2
3727: PPUSH
3728: LD_INT 6
3730: PPUSH
3731: CALL_OW 241
3735: GO 3720
3737: POP
3738: POP
// Dietrich := NewCharacter ( Dietrich ) ;
3739: LD_ADDR_EXP 50
3743: PUSH
3744: LD_STRING Dietrich
3746: PPUSH
3747: CALL_OW 25
3751: ST_TO_ADDR
// PlaceHumanInUnit ( Dietrich , arDep ) ;
3752: LD_EXP 50
3756: PPUSH
3757: LD_INT 35
3759: PPUSH
3760: CALL_OW 52
// InitHC_All ( ) ;
3764: CALL_OW 584
// for i := 1 to 3 do
3768: LD_ADDR_VAR 0 2
3772: PUSH
3773: DOUBLE
3774: LD_INT 1
3776: DEC
3777: ST_TO_ADDR
3778: LD_INT 3
3780: PUSH
3781: FOR_TO
3782: IFFALSE 3888
// begin PrepareEngineer ( sex_male , skill ) ;
3784: LD_INT 1
3786: PPUSH
3787: LD_VAR 0 6
3791: PPUSH
3792: CALL_OW 382
// if i = 1 then
3796: LD_VAR 0 2
3800: PUSH
3801: LD_INT 1
3803: EQUAL
3804: IFFALSE 3816
// hc_name := Ahmed Abbasid else
3806: LD_ADDR_OWVAR 26
3810: PUSH
3811: LD_STRING Ahmed Abbasid
3813: ST_TO_ADDR
3814: GO 3824
// hc_name :=  ;
3816: LD_ADDR_OWVAR 26
3820: PUSH
3821: LD_STRING 
3823: ST_TO_ADDR
// un := CreateHuman ;
3824: LD_ADDR_VAR 0 4
3828: PUSH
3829: CALL_OW 44
3833: ST_TO_ADDR
// if i = 1 then
3834: LD_VAR 0 2
3838: PUSH
3839: LD_INT 1
3841: EQUAL
3842: IFFALSE 3854
// Ahmed := un ;
3844: LD_ADDR_EXP 51
3848: PUSH
3849: LD_VAR 0 4
3853: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
3854: LD_ADDR_EXP 49
3858: PUSH
3859: LD_EXP 49
3863: PPUSH
3864: LD_VAR 0 4
3868: PPUSH
3869: CALL 93837 0 2
3873: ST_TO_ADDR
// PlaceHumanInUnit ( un , arDep ) ;
3874: LD_VAR 0 4
3878: PPUSH
3879: LD_INT 35
3881: PPUSH
3882: CALL_OW 52
// end ;
3886: GO 3781
3888: POP
3889: POP
// for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
3890: LD_ADDR_VAR 0 2
3894: PUSH
3895: DOUBLE
3896: LD_INT 1
3898: DEC
3899: ST_TO_ADDR
3900: LD_INT 2
3902: PUSH
3903: LD_INT 3
3905: PUSH
3906: LD_INT 4
3908: PUSH
3909: LD_INT 5
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: PUSH
3918: LD_OWVAR 67
3922: ARRAY
3923: PUSH
3924: FOR_TO
3925: IFFALSE 4000
// begin PrepareScientist ( false , skill ) ;
3927: LD_INT 0
3929: PPUSH
3930: LD_VAR 0 6
3934: PPUSH
3935: CALL_OW 384
// un := CreateHuman ;
3939: LD_ADDR_VAR 0 4
3943: PUSH
3944: CALL_OW 44
3948: ST_TO_ADDR
// SetSkill ( un , skill_combat , skill ) ;
3949: LD_VAR 0 4
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: LD_VAR 0 6
3961: PPUSH
3962: CALL_OW 237
// arForces := Join ( arForces , un ) ;
3966: LD_ADDR_EXP 49
3970: PUSH
3971: LD_EXP 49
3975: PPUSH
3976: LD_VAR 0 4
3980: PPUSH
3981: CALL 93837 0 2
3985: ST_TO_ADDR
// PlaceHumanInUnit ( un , arLab ) ;
3986: LD_VAR 0 4
3990: PPUSH
3991: LD_INT 36
3993: PPUSH
3994: CALL_OW 52
// end ;
3998: GO 3924
4000: POP
4001: POP
// for j in [ arBar1 , arBar2 ] do
4002: LD_ADDR_VAR 0 3
4006: PUSH
4007: LD_INT 37
4009: PUSH
4010: LD_INT 38
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PUSH
4017: FOR_IN
4018: IFFALSE 4098
// for i := 1 to 4 do
4020: LD_ADDR_VAR 0 2
4024: PUSH
4025: DOUBLE
4026: LD_INT 1
4028: DEC
4029: ST_TO_ADDR
4030: LD_INT 4
4032: PUSH
4033: FOR_TO
4034: IFFALSE 4094
// begin PrepareSoldier ( false , skill ) ;
4036: LD_INT 0
4038: PPUSH
4039: LD_VAR 0 6
4043: PPUSH
4044: CALL_OW 381
// un := CreateHuman ;
4048: LD_ADDR_VAR 0 4
4052: PUSH
4053: CALL_OW 44
4057: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
4058: LD_ADDR_EXP 49
4062: PUSH
4063: LD_EXP 49
4067: PPUSH
4068: LD_VAR 0 4
4072: PPUSH
4073: CALL 93837 0 2
4077: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
4078: LD_VAR 0 4
4082: PPUSH
4083: LD_VAR 0 3
4087: PPUSH
4088: CALL_OW 52
// end ;
4092: GO 4033
4094: POP
4095: POP
4096: GO 4017
4098: POP
4099: POP
// for i := 1 to 3 do
4100: LD_ADDR_VAR 0 2
4104: PUSH
4105: DOUBLE
4106: LD_INT 1
4108: DEC
4109: ST_TO_ADDR
4110: LD_INT 3
4112: PUSH
4113: FOR_TO
4114: IFFALSE 4193
// begin un := arForces [ arForces - i ] ;
4116: LD_ADDR_VAR 0 4
4120: PUSH
4121: LD_EXP 49
4125: PUSH
4126: LD_EXP 49
4130: PUSH
4131: LD_VAR 0 2
4135: MINUS
4136: ARRAY
4137: ST_TO_ADDR
// ComExitBuilding ( un ) ;
4138: LD_VAR 0 4
4142: PPUSH
4143: CALL_OW 122
// AddComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4147: LD_VAR 0 4
4151: PPUSH
4152: LD_INT 22
4154: PUSH
4155: LD_INT 2
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 30
4164: PUSH
4165: LD_INT 31
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PPUSH
4176: CALL_OW 69
4180: PUSH
4181: LD_VAR 0 2
4185: ARRAY
4186: PPUSH
4187: CALL_OW 180
// end ;
4191: GO 4113
4193: POP
4194: POP
// for i := 1 to 3 do
4195: LD_ADDR_VAR 0 2
4199: PUSH
4200: DOUBLE
4201: LD_INT 1
4203: DEC
4204: ST_TO_ADDR
4205: LD_INT 3
4207: PUSH
4208: FOR_TO
4209: IFFALSE 4294
// begin tmp := UnitFilter ( arForces , [ [ f_class , class_soldier ] , [ f_not , [ f_tag , tMine ] ] ] ) ;
4211: LD_ADDR_VAR 0 5
4215: PUSH
4216: LD_EXP 49
4220: PPUSH
4221: LD_INT 25
4223: PUSH
4224: LD_INT 1
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: LD_INT 3
4233: PUSH
4234: LD_INT 120
4236: PUSH
4237: LD_INT 6
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: PPUSH
4252: CALL_OW 72
4256: ST_TO_ADDR
// if not tmp then
4257: LD_VAR 0 5
4261: NOT
4262: IFFALSE 4266
// continue ;
4264: GO 4208
// un := tmp [ 1 ] ;
4266: LD_ADDR_VAR 0 4
4270: PUSH
4271: LD_VAR 0 5
4275: PUSH
4276: LD_INT 1
4278: ARRAY
4279: ST_TO_ADDR
// SetTag ( un , tMine ) ;
4280: LD_VAR 0 4
4284: PPUSH
4285: LD_INT 6
4287: PPUSH
4288: CALL_OW 109
// end ;
4292: GO 4208
4294: POP
4295: POP
// for i in UnitsInside ( arBar2 ) do
4296: LD_ADDR_VAR 0 2
4300: PUSH
4301: LD_INT 38
4303: PPUSH
4304: CALL_OW 313
4308: PUSH
4309: FOR_IN
4310: IFFALSE 4326
// SetClass ( i , class_mortar ) ;
4312: LD_VAR 0 2
4316: PPUSH
4317: LD_INT 8
4319: PPUSH
4320: CALL_OW 336
4324: GO 4309
4326: POP
4327: POP
// end ;
4328: LD_VAR 0 1
4332: RET
// every 0 0$2 trigger joinedToEpsilon do var i , eng ;
4333: LD_EXP 7
4337: IFFALSE 4754
4339: GO 4341
4341: DISABLE
4342: LD_INT 0
4344: PPUSH
4345: PPUSH
// begin ComUpgradeLab ( arLab , b_lab_siberium ) ;
4346: LD_INT 36
4348: PPUSH
4349: LD_INT 11
4351: PPUSH
4352: CALL_OW 147
// wait ( 0 0$10 ) ;
4356: LD_INT 350
4358: PPUSH
4359: CALL_OW 67
// arBuildings := [ [ b_solar_power , 69 , 4 , 2 ] , [ b_solar_power , 67 , 6 , 3 ] ] ;
4363: LD_ADDR_EXP 53
4367: PUSH
4368: LD_INT 27
4370: PUSH
4371: LD_INT 69
4373: PUSH
4374: LD_INT 4
4376: PUSH
4377: LD_INT 2
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: PUSH
4386: LD_INT 27
4388: PUSH
4389: LD_INT 67
4391: PUSH
4392: LD_INT 6
4394: PUSH
4395: LD_INT 3
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4408: LD_INT 35
4410: PPUSH
4411: CALL_OW 67
// until not arBuildings ;
4415: LD_EXP 53
4419: NOT
4420: IFFALSE 4408
// eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
4422: LD_ADDR_VAR 0 2
4426: PUSH
4427: LD_EXP 49
4431: PPUSH
4432: LD_INT 25
4434: PUSH
4435: LD_INT 2
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: PPUSH
4442: CALL_OW 72
4446: ST_TO_ADDR
// if eng then
4447: LD_VAR 0 2
4451: IFFALSE 4590
// begin eng := eng [ 1 ] ;
4453: LD_ADDR_VAR 0 2
4457: PUSH
4458: LD_VAR 0 2
4462: PUSH
4463: LD_INT 1
4465: ARRAY
4466: ST_TO_ADDR
// SetTag ( eng , tCamera ) ;
4467: LD_VAR 0 2
4471: PPUSH
4472: LD_INT 4
4474: PPUSH
4475: CALL_OW 109
// for i in arCameras do
4479: LD_ADDR_VAR 0 1
4483: PUSH
4484: LD_EXP 55
4488: PUSH
4489: FOR_IN
4490: IFFALSE 4521
// AddComHiddenCamera ( eng , i [ 1 ] , i [ 2 ] ) ;
4492: LD_VAR 0 2
4496: PPUSH
4497: LD_VAR 0 1
4501: PUSH
4502: LD_INT 1
4504: ARRAY
4505: PPUSH
4506: LD_VAR 0 1
4510: PUSH
4511: LD_INT 2
4513: ARRAY
4514: PPUSH
4515: CALL_OW 217
4519: GO 4489
4521: POP
4522: POP
// repeat wait ( 0 0$1 ) ;
4523: LD_INT 35
4525: PPUSH
4526: CALL_OW 67
// until not HasTask ( eng ) or IsDead ( eng ) ;
4530: LD_VAR 0 2
4534: PPUSH
4535: CALL_OW 314
4539: NOT
4540: IFTRUE 4553
4542: PUSH
4543: LD_VAR 0 2
4547: PPUSH
4548: CALL_OW 301
4552: OR
4553: IFFALSE 4523
// if IsOk ( eng ) then
4555: LD_VAR 0 2
4559: PPUSH
4560: CALL_OW 302
4564: IFFALSE 4590
// begin SetTag ( eng , 0 ) ;
4566: LD_VAR 0 2
4570: PPUSH
4571: LD_INT 0
4573: PPUSH
4574: CALL_OW 109
// ComEnterUnit ( eng , arDep ) ;
4578: LD_VAR 0 2
4582: PPUSH
4583: LD_INT 35
4585: PPUSH
4586: CALL_OW 120
// end ; end ; repeat wait ( 0 0$1 ) ;
4590: LD_INT 35
4592: PPUSH
4593: CALL_OW 67
// if tick mod 4200 = 0 and GetListOfCratesInArea ( arCratesArea ) < 3 then
4597: LD_OWVAR 1
4601: PUSH
4602: LD_INT 4200
4604: MOD
4605: PUSH
4606: LD_INT 0
4608: EQUAL
4609: IFFALSE 4624
4611: PUSH
4612: LD_INT 9
4614: PPUSH
4615: CALL_OW 435
4619: PUSH
4620: LD_INT 3
4622: LESS
4623: AND
4624: IFFALSE 4647
// CreateCratesArea ( rand ( 1 , 5 ) , arCratesArea , true ) ;
4626: LD_INT 1
4628: PPUSH
4629: LD_INT 5
4631: PPUSH
4632: CALL_OW 12
4636: PPUSH
4637: LD_INT 9
4639: PPUSH
4640: LD_INT 1
4642: PPUSH
4643: CALL_OW 55
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) ;
4647: LD_INT 22
4649: PUSH
4650: LD_INT 1
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: LD_INT 3
4659: PUSH
4660: LD_INT 57
4662: PUSH
4663: EMPTY
4664: LIST
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PUSH
4670: LD_INT 63
4672: PUSH
4673: LD_INT 11
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: LIST
4684: PPUSH
4685: CALL_OW 69
4689: IFFALSE 4590
// wait ( 0 0$10 ) ;
4691: LD_INT 350
4693: PPUSH
4694: CALL_OW 67
// arTech := [ tech_sibPow , tech_sibEng , tech_sib1 ] ;
4698: LD_ADDR_EXP 52
4702: PUSH
4703: LD_INT 21
4705: PUSH
4706: LD_INT 22
4708: PUSH
4709: LD_INT 54
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: LIST
4716: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4717: LD_INT 35
4719: PPUSH
4720: CALL_OW 67
// until not arTech ;
4724: LD_EXP 52
4728: NOT
4729: IFFALSE 4717
// wait ( 0 0$30 ) ;
4731: LD_INT 1050
4733: PPUSH
4734: CALL_OW 67
// arabianAttack := true ;
4738: LD_ADDR_EXP 4
4742: PUSH
4743: LD_INT 1
4745: ST_TO_ADDR
// arBaseActive := false ;
4746: LD_ADDR_EXP 3
4750: PUSH
4751: LD_INT 0
4753: ST_TO_ADDR
// end ;
4754: PPOPN 2
4756: END
// every 3 trigger arBaseActive and arMines and FilterUnitsInArea ( arMinesArea , [ f_enemy , 2 ] ) do var i , e ;
4757: LD_EXP 3
4761: IFFALSE 4769
4763: PUSH
4764: LD_EXP 54
4768: AND
4769: IFFALSE 4790
4771: PUSH
4772: LD_INT 8
4774: PPUSH
4775: LD_INT 81
4777: PUSH
4778: LD_INT 2
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PPUSH
4785: CALL_OW 70
4789: AND
4790: IFFALSE 4901
4792: GO 4794
4794: DISABLE
4795: LD_INT 0
4797: PPUSH
4798: PPUSH
// begin enable ;
4799: ENABLE
// for i in arMines do
4800: LD_ADDR_VAR 0 1
4804: PUSH
4805: LD_EXP 54
4809: PUSH
4810: FOR_IN
4811: IFFALSE 4899
// begin e := HexInfo ( i [ 1 ] , i [ 2 ] ) ;
4813: LD_ADDR_VAR 0 2
4817: PUSH
4818: LD_VAR 0 1
4822: PUSH
4823: LD_INT 1
4825: ARRAY
4826: PPUSH
4827: LD_VAR 0 1
4831: PUSH
4832: LD_INT 2
4834: ARRAY
4835: PPUSH
4836: CALL_OW 428
4840: ST_TO_ADDR
// if not e then
4841: LD_VAR 0 2
4845: NOT
4846: IFFALSE 4850
// continue ;
4848: GO 4810
// if GetSide ( e ) in [ 3 , 6 ] then
4850: LD_VAR 0 2
4854: PPUSH
4855: CALL_OW 255
4859: PUSH
4860: LD_INT 3
4862: PUSH
4863: LD_INT 6
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: IN
4870: IFFALSE 4897
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 2 ) ;
4872: LD_VAR 0 1
4876: PUSH
4877: LD_INT 1
4879: ARRAY
4880: PPUSH
4881: LD_VAR 0 1
4885: PUSH
4886: LD_INT 2
4888: ARRAY
4889: PPUSH
4890: LD_INT 2
4892: PPUSH
4893: CALL_OW 456
// end ;
4897: GO 4810
4899: POP
4900: POP
// end ;
4901: PPOPN 2
4903: END
// every 0 0$2 trigger arBaseActive do var i , un , b , side , tmp , lab , eng , tag , cr , tw , sci , sol , hurtUnits , enemyInBase , empty , fac ;
4904: LD_EXP 3
4908: IFFALSE 7126
4910: GO 4912
4912: DISABLE
4913: LD_INT 0
4915: PPUSH
4916: PPUSH
4917: PPUSH
4918: PPUSH
4919: PPUSH
4920: PPUSH
4921: PPUSH
4922: PPUSH
4923: PPUSH
4924: PPUSH
4925: PPUSH
4926: PPUSH
4927: PPUSH
4928: PPUSH
4929: PPUSH
4930: PPUSH
// begin enable ;
4931: ENABLE
// side := 2 ;
4932: LD_ADDR_VAR 0 4
4936: PUSH
4937: LD_INT 2
4939: ST_TO_ADDR
// if arTech then
4940: LD_EXP 52
4944: IFFALSE 5100
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4946: LD_ADDR_VAR 0 6
4950: PUSH
4951: LD_INT 22
4953: PUSH
4954: LD_VAR 0 4
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: PUSH
4963: LD_INT 50
4965: PUSH
4966: EMPTY
4967: LIST
4968: PUSH
4969: LD_INT 2
4971: PUSH
4972: LD_INT 30
4974: PUSH
4975: LD_INT 6
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PUSH
4982: LD_INT 30
4984: PUSH
4985: LD_INT 7
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: LD_INT 30
4994: PUSH
4995: LD_INT 8
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: LIST
5012: PPUSH
5013: CALL_OW 69
5017: ST_TO_ADDR
// if lab then
5018: LD_VAR 0 6
5022: IFFALSE 5100
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
5024: LD_VAR 0 6
5028: PUSH
5029: LD_INT 1
5031: ARRAY
5032: PPUSH
5033: CALL_OW 461
5037: PUSH
5038: LD_INT 2
5040: EQUAL
5041: IFFALSE 5100
// begin for i in arTech do
5043: LD_ADDR_VAR 0 1
5047: PUSH
5048: LD_EXP 52
5052: PUSH
5053: FOR_IN
5054: IFFALSE 5098
// if CanBeResearched ( lab [ 1 ] , i ) then
5056: LD_VAR 0 6
5060: PUSH
5061: LD_INT 1
5063: ARRAY
5064: PPUSH
5065: LD_VAR 0 1
5069: PPUSH
5070: CALL_OW 430
5074: IFFALSE 5096
// begin ComResearch ( lab [ 1 ] , i ) ;
5076: LD_VAR 0 6
5080: PUSH
5081: LD_INT 1
5083: ARRAY
5084: PPUSH
5085: LD_VAR 0 1
5089: PPUSH
5090: CALL_OW 124
// break ;
5094: GO 5098
// end ;
5096: GO 5053
5098: POP
5099: POP
// end ; end ; end ; tmp := FilterUnitsInArea ( arBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5100: LD_ADDR_VAR 0 5
5104: PUSH
5105: LD_INT 5
5107: PPUSH
5108: LD_INT 21
5110: PUSH
5111: LD_INT 3
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PUSH
5118: LD_INT 3
5120: PUSH
5121: LD_INT 24
5123: PUSH
5124: LD_INT 1000
5126: PUSH
5127: EMPTY
5128: LIST
5129: LIST
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: PPUSH
5139: CALL_OW 70
5143: ST_TO_ADDR
// cr := GetListOfCratesInArea ( arCratesArea ) ;
5144: LD_ADDR_VAR 0 9
5148: PUSH
5149: LD_INT 9
5151: PPUSH
5152: CALL_OW 435
5156: ST_TO_ADDR
// sci := UnitFilter ( arForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
5157: LD_ADDR_VAR 0 11
5161: PUSH
5162: LD_EXP 49
5166: PPUSH
5167: LD_INT 25
5169: PUSH
5170: LD_INT 4
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: LD_INT 50
5179: PUSH
5180: EMPTY
5181: LIST
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PPUSH
5187: CALL_OW 72
5191: ST_TO_ADDR
// if sci then
5192: LD_VAR 0 11
5196: IFFALSE 5566
// begin hurtUnits := UnitFilter ( arForces , [ [ f_inarea , arBaseArea ] , [ f_not , [ f_inside ] ] , [ f_tag , tHeal ] ] ) ;
5198: LD_ADDR_VAR 0 13
5202: PUSH
5203: LD_EXP 49
5207: PPUSH
5208: LD_INT 95
5210: PUSH
5211: LD_INT 5
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PUSH
5218: LD_INT 3
5220: PUSH
5221: LD_INT 54
5223: PUSH
5224: EMPTY
5225: LIST
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: PUSH
5231: LD_INT 120
5233: PUSH
5234: LD_INT 1
5236: PUSH
5237: EMPTY
5238: LIST
5239: LIST
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: LIST
5245: PPUSH
5246: CALL_OW 72
5250: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5251: LD_ADDR_VAR 0 6
5255: PUSH
5256: LD_INT 22
5258: PUSH
5259: LD_VAR 0 4
5263: PUSH
5264: EMPTY
5265: LIST
5266: LIST
5267: PUSH
5268: LD_INT 50
5270: PUSH
5271: EMPTY
5272: LIST
5273: PUSH
5274: LD_INT 2
5276: PUSH
5277: LD_INT 30
5279: PUSH
5280: LD_INT 6
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PUSH
5287: LD_INT 30
5289: PUSH
5290: LD_INT 7
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: PUSH
5297: LD_INT 30
5299: PUSH
5300: LD_INT 8
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: LIST
5317: PPUSH
5318: CALL_OW 69
5322: ST_TO_ADDR
// tag := GetTag ( i ) ;
5323: LD_ADDR_VAR 0 8
5327: PUSH
5328: LD_VAR 0 1
5332: PPUSH
5333: CALL_OW 110
5337: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
5338: LD_VAR 0 1
5342: PPUSH
5343: CALL_OW 256
5347: PUSH
5348: LD_INT 800
5350: LESS
5351: IFFALSE 5363
5353: PUSH
5354: LD_VAR 0 8
5358: PUSH
5359: LD_INT 1
5361: NONEQUAL
5362: AND
5363: IFFALSE 5392
// begin ComMoveXY ( i , 72 , 15 ) ;
5365: LD_VAR 0 1
5369: PPUSH
5370: LD_INT 72
5372: PPUSH
5373: LD_INT 15
5375: PPUSH
5376: CALL_OW 111
// SetTag ( i , tHeal ) ;
5380: LD_VAR 0 1
5384: PPUSH
5385: LD_INT 1
5387: PPUSH
5388: CALL_OW 109
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
5392: LD_VAR 0 1
5396: PPUSH
5397: CALL_OW 256
5401: PUSH
5402: LD_INT 1000
5404: EQUAL
5405: IFFALSE 5417
5407: PUSH
5408: LD_VAR 0 8
5412: PUSH
5413: LD_INT 1
5415: EQUAL
5416: AND
5417: IFFALSE 5431
// begin SetTag ( i , 0 ) ;
5419: LD_VAR 0 1
5423: PPUSH
5424: LD_INT 0
5426: PPUSH
5427: CALL_OW 109
// end ; if hurtUnits then
5431: LD_VAR 0 13
5435: IFFALSE 5496
// begin for i in sci do
5437: LD_ADDR_VAR 0 1
5441: PUSH
5442: LD_VAR 0 11
5446: PUSH
5447: FOR_IN
5448: IFFALSE 5492
// if IsInUnit ( i ) then
5450: LD_VAR 0 1
5454: PPUSH
5455: CALL_OW 310
5459: IFFALSE 5472
// ComExitBuilding ( i ) else
5461: LD_VAR 0 1
5465: PPUSH
5466: CALL_OW 122
5470: GO 5490
// ComHeal ( i , hurtUnits [ 1 ] ) ;
5472: LD_VAR 0 1
5476: PPUSH
5477: LD_VAR 0 13
5481: PUSH
5482: LD_INT 1
5484: ARRAY
5485: PPUSH
5486: CALL_OW 128
5490: GO 5447
5492: POP
5493: POP
// end else
5494: GO 5566
// if lab then
5496: LD_VAR 0 6
5500: IFFALSE 5566
// begin for i in sci do
5502: LD_ADDR_VAR 0 1
5506: PUSH
5507: LD_VAR 0 11
5511: PUSH
5512: FOR_IN
5513: IFFALSE 5564
// if not IsInUnit ( i ) and GetTag ( i ) <> tHeal then
5515: LD_VAR 0 1
5519: PPUSH
5520: CALL_OW 310
5524: NOT
5525: IFFALSE 5542
5527: PUSH
5528: LD_VAR 0 1
5532: PPUSH
5533: CALL_OW 110
5537: PUSH
5538: LD_INT 1
5540: NONEQUAL
5541: AND
5542: IFFALSE 5562
// ComEnterUnit ( i , lab [ 1 ] ) ;
5544: LD_VAR 0 1
5548: PPUSH
5549: LD_VAR 0 6
5553: PUSH
5554: LD_INT 1
5556: ARRAY
5557: PPUSH
5558: CALL_OW 120
5562: GO 5512
5564: POP
5565: POP
// end ; end ; eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
5566: LD_ADDR_VAR 0 7
5570: PUSH
5571: LD_EXP 49
5575: PPUSH
5576: LD_INT 25
5578: PUSH
5579: LD_INT 2
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: PPUSH
5586: CALL_OW 72
5590: ST_TO_ADDR
// if eng then
5591: LD_VAR 0 7
5595: IFFALSE 6274
// begin for i in eng do
5597: LD_ADDR_VAR 0 1
5601: PUSH
5602: LD_VAR 0 7
5606: PUSH
5607: FOR_IN
5608: IFFALSE 6272
// begin tag := GetTag ( i ) ;
5610: LD_ADDR_VAR 0 8
5614: PUSH
5615: LD_VAR 0 1
5619: PPUSH
5620: CALL_OW 110
5624: ST_TO_ADDR
// if tag = tCamera then
5625: LD_VAR 0 8
5629: PUSH
5630: LD_INT 4
5632: EQUAL
5633: IFFALSE 5637
// continue ;
5635: GO 5607
// if GetLives ( i ) < 600 and tag <> tHeal then
5637: LD_VAR 0 1
5641: PPUSH
5642: CALL_OW 256
5646: PUSH
5647: LD_INT 600
5649: LESS
5650: IFFALSE 5662
5652: PUSH
5653: LD_VAR 0 8
5657: PUSH
5658: LD_INT 1
5660: NONEQUAL
5661: AND
5662: IFFALSE 5700
// begin SetTag ( i , tHeal ) ;
5664: LD_VAR 0 1
5668: PPUSH
5669: LD_INT 1
5671: PPUSH
5672: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
5676: LD_VAR 0 1
5680: PPUSH
5681: LD_INT 72
5683: PPUSH
5684: LD_INT 15
5686: PPUSH
5687: CALL_OW 111
// AddComHold ( i ) ;
5691: LD_VAR 0 1
5695: PPUSH
5696: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
5700: LD_VAR 0 8
5704: PUSH
5705: LD_INT 1
5707: EQUAL
5708: IFFALSE 5725
5710: PUSH
5711: LD_VAR 0 1
5715: PPUSH
5716: CALL_OW 256
5720: PUSH
5721: LD_INT 1000
5723: EQUAL
5724: AND
5725: IFFALSE 5739
// SetTag ( i , 0 ) ;
5727: LD_VAR 0 1
5731: PPUSH
5732: LD_INT 0
5734: PPUSH
5735: CALL_OW 109
// if not tag then
5739: LD_VAR 0 8
5743: NOT
5744: IFFALSE 5894
// begin if cr or tmp or Count ( arBuildings ) then
5746: LD_VAR 0 9
5750: IFTRUE 5758
5752: PUSH
5753: LD_VAR 0 5
5757: OR
5758: IFTRUE 5771
5760: PUSH
5761: LD_EXP 53
5765: PPUSH
5766: CALL 57905 0 1
5770: OR
5771: IFFALSE 5858
// begin if IsInUnit ( i ) then
5773: LD_VAR 0 1
5777: PPUSH
5778: CALL_OW 310
5782: IFFALSE 5793
// ComExitBuilding ( i ) ;
5784: LD_VAR 0 1
5788: PPUSH
5789: CALL_OW 122
// if tmp then
5793: LD_VAR 0 5
5797: IFFALSE 5813
// SetTag ( i , tRepair ) else
5799: LD_VAR 0 1
5803: PPUSH
5804: LD_INT 3
5806: PPUSH
5807: CALL_OW 109
5811: GO 5856
// if cr then
5813: LD_VAR 0 9
5817: IFFALSE 5833
// SetTag ( i , tCrates ) else
5819: LD_VAR 0 1
5823: PPUSH
5824: LD_INT 2
5826: PPUSH
5827: CALL_OW 109
5831: GO 5856
// if Count ( arBuildings ) then
5833: LD_EXP 53
5837: PPUSH
5838: CALL 57905 0 1
5842: IFFALSE 5856
// SetTag ( i , tBuild ) ;
5844: LD_VAR 0 1
5848: PPUSH
5849: LD_INT 5
5851: PPUSH
5852: CALL_OW 109
// end else
5856: GO 5894
// if not IsInUnit ( i ) then
5858: LD_VAR 0 1
5862: PPUSH
5863: CALL_OW 310
5867: NOT
5868: IFFALSE 5894
// begin SetTag ( i , 0 ) ;
5870: LD_VAR 0 1
5874: PPUSH
5875: LD_INT 0
5877: PPUSH
5878: CALL_OW 109
// ComEnterUnit ( i , arDep ) ;
5882: LD_VAR 0 1
5886: PPUSH
5887: LD_INT 35
5889: PPUSH
5890: CALL_OW 120
// end ; end ; if tag = tRepair then
5894: LD_VAR 0 8
5898: PUSH
5899: LD_INT 3
5901: EQUAL
5902: IFFALSE 6004
// begin if IsInUnit ( i ) then
5904: LD_VAR 0 1
5908: PPUSH
5909: CALL_OW 310
5913: IFFALSE 5926
// begin ComExitBuilding ( i ) ;
5915: LD_VAR 0 1
5919: PPUSH
5920: CALL_OW 122
// continue ;
5924: GO 5607
// end ; if not tmp then
5926: LD_VAR 0 5
5930: NOT
5931: IFFALSE 5947
// begin SetTag ( i , 0 ) ;
5933: LD_VAR 0 1
5937: PPUSH
5938: LD_INT 0
5940: PPUSH
5941: CALL_OW 109
// continue ;
5945: GO 5607
// end ; if not HasTask ( i ) then
5947: LD_VAR 0 1
5951: PPUSH
5952: CALL_OW 314
5956: NOT
5957: IFFALSE 5977
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
5959: LD_VAR 0 1
5963: PPUSH
5964: LD_VAR 0 5
5968: PUSH
5969: LD_INT 1
5971: ARRAY
5972: PPUSH
5973: CALL_OW 130
// if not IsInArea ( i , arBaseArea ) then
5977: LD_VAR 0 1
5981: PPUSH
5982: LD_INT 5
5984: PPUSH
5985: CALL_OW 308
5989: NOT
5990: IFFALSE 6004
// ComMoveToArea ( i , arBaseArea ) ;
5992: LD_VAR 0 1
5996: PPUSH
5997: LD_INT 5
5999: PPUSH
6000: CALL_OW 113
// end ; if tag = tBuild then
6004: LD_VAR 0 8
6008: PUSH
6009: LD_INT 5
6011: EQUAL
6012: IFFALSE 6123
// begin if IsInUnit ( i ) then
6014: LD_VAR 0 1
6018: PPUSH
6019: CALL_OW 310
6023: IFFALSE 6036
// begin ComExitBuilding ( i ) ;
6025: LD_VAR 0 1
6029: PPUSH
6030: CALL_OW 122
// continue ;
6034: GO 5607
// end ; if not Count ( arBuildings ) then
6036: LD_EXP 53
6040: PPUSH
6041: CALL 57905 0 1
6045: NOT
6046: IFFALSE 6062
// begin SetTag ( i , 0 ) ;
6048: LD_VAR 0 1
6052: PPUSH
6053: LD_INT 0
6055: PPUSH
6056: CALL_OW 109
// continue ;
6060: GO 5607
// end ; ComBuild ( i , arBuildings [ 1 ] [ 1 ] , arBuildings [ 1 ] [ 2 ] , arBuildings [ 1 ] [ 3 ] , arBuildings [ 1 ] [ 4 ] ) ;
6062: LD_VAR 0 1
6066: PPUSH
6067: LD_EXP 53
6071: PUSH
6072: LD_INT 1
6074: ARRAY
6075: PUSH
6076: LD_INT 1
6078: ARRAY
6079: PPUSH
6080: LD_EXP 53
6084: PUSH
6085: LD_INT 1
6087: ARRAY
6088: PUSH
6089: LD_INT 2
6091: ARRAY
6092: PPUSH
6093: LD_EXP 53
6097: PUSH
6098: LD_INT 1
6100: ARRAY
6101: PUSH
6102: LD_INT 3
6104: ARRAY
6105: PPUSH
6106: LD_EXP 53
6110: PUSH
6111: LD_INT 1
6113: ARRAY
6114: PUSH
6115: LD_INT 4
6117: ARRAY
6118: PPUSH
6119: CALL_OW 145
// end ; if tag = tCrates then
6123: LD_VAR 0 8
6127: PUSH
6128: LD_INT 2
6130: EQUAL
6131: IFFALSE 6270
// begin if IsInUnit ( i ) then
6133: LD_VAR 0 1
6137: PPUSH
6138: CALL_OW 310
6142: IFFALSE 6155
// begin ComExitBuilding ( i ) ;
6144: LD_VAR 0 1
6148: PPUSH
6149: CALL_OW 122
// continue ;
6153: GO 5607
// end ; if not cr then
6155: LD_VAR 0 9
6159: NOT
6160: IFFALSE 6176
// begin SetTag ( i , 0 ) ;
6162: LD_VAR 0 1
6166: PPUSH
6167: LD_INT 0
6169: PPUSH
6170: CALL_OW 109
// continue ;
6174: GO 5607
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
6176: LD_VAR 0 1
6180: PPUSH
6181: CALL_OW 314
6185: NOT
6186: IFFALSE 6241
6188: PUSH
6189: LD_INT 81
6191: PUSH
6192: LD_VAR 0 4
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: LD_INT 92
6203: PUSH
6204: LD_VAR 0 9
6208: PUSH
6209: LD_INT 1
6211: ARRAY
6212: PUSH
6213: LD_VAR 0 9
6217: PUSH
6218: LD_INT 2
6220: ARRAY
6221: PUSH
6222: LD_INT 12
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PPUSH
6235: CALL_OW 69
6239: NOT
6240: AND
6241: IFFALSE 6270
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
6243: LD_VAR 0 1
6247: PPUSH
6248: LD_VAR 0 9
6252: PUSH
6253: LD_INT 1
6255: ARRAY
6256: PPUSH
6257: LD_VAR 0 9
6261: PUSH
6262: LD_INT 2
6264: ARRAY
6265: PPUSH
6266: CALL_OW 117
// end ; end ;
6270: GO 5607
6272: POP
6273: POP
// end ; sol := UnitFilter ( arForces , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6274: LD_ADDR_VAR 0 12
6278: PUSH
6279: LD_EXP 49
6283: PPUSH
6284: LD_INT 25
6286: PUSH
6287: LD_INT 1
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: PUSH
6294: LD_INT 50
6296: PUSH
6297: EMPTY
6298: LIST
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: PPUSH
6304: CALL_OW 72
6308: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( arBaseArea , [ f_enemy , side ] ) ;
6309: LD_ADDR_VAR 0 14
6313: PUSH
6314: LD_INT 5
6316: PPUSH
6317: LD_INT 81
6319: PUSH
6320: LD_VAR 0 4
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PPUSH
6329: CALL_OW 70
6333: ST_TO_ADDR
// if sol then
6334: LD_VAR 0 12
6338: IFFALSE 7126
// begin tmp := UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ;
6340: LD_ADDR_VAR 0 5
6344: PUSH
6345: LD_VAR 0 12
6349: PPUSH
6350: LD_INT 50
6352: PUSH
6353: EMPTY
6354: LIST
6355: PUSH
6356: LD_INT 120
6358: PUSH
6359: LD_INT 6
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PPUSH
6370: CALL_OW 72
6374: ST_TO_ADDR
// if tmp and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , 76 , 38 , 12 ] ] ) then
6375: LD_VAR 0 5
6379: IFFALSE 6422
6381: PUSH
6382: LD_INT 81
6384: PUSH
6385: LD_VAR 0 4
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PUSH
6394: LD_INT 92
6396: PUSH
6397: LD_INT 76
6399: PUSH
6400: LD_INT 38
6402: PUSH
6403: LD_INT 12
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: PPUSH
6416: CALL_OW 69
6420: NOT
6421: AND
6422: IFFALSE 6594
// for i := 1 to Count ( tmp ) do
6424: LD_ADDR_VAR 0 1
6428: PUSH
6429: DOUBLE
6430: LD_INT 1
6432: DEC
6433: ST_TO_ADDR
6434: LD_VAR 0 5
6438: PPUSH
6439: CALL 57905 0 1
6443: PUSH
6444: FOR_TO
6445: IFFALSE 6592
// begin un := tmp [ i ] ;
6447: LD_ADDR_VAR 0 2
6451: PUSH
6452: LD_VAR 0 5
6456: PUSH
6457: LD_VAR 0 1
6461: ARRAY
6462: ST_TO_ADDR
// b := IsInUnit ( un ) ;
6463: LD_ADDR_VAR 0 3
6467: PUSH
6468: LD_VAR 0 2
6472: PPUSH
6473: CALL_OW 310
6477: ST_TO_ADDR
// if not MineOfUnit ( un ) then
6478: LD_VAR 0 2
6482: PPUSH
6483: CALL_OW 459
6487: NOT
6488: IFFALSE 6557
// begin ComExitBuilding ( un ) ;
6490: LD_VAR 0 2
6494: PPUSH
6495: CALL_OW 122
// AddComPlaceRemoteCharge ( un , arMines [ i ] [ 1 ] , arMines [ i ] [ 2 ] , 0 ) ;
6499: LD_VAR 0 2
6503: PPUSH
6504: LD_EXP 54
6508: PUSH
6509: LD_VAR 0 1
6513: ARRAY
6514: PUSH
6515: LD_INT 1
6517: ARRAY
6518: PPUSH
6519: LD_EXP 54
6523: PUSH
6524: LD_VAR 0 1
6528: ARRAY
6529: PUSH
6530: LD_INT 2
6532: ARRAY
6533: PPUSH
6534: LD_INT 0
6536: PPUSH
6537: CALL_OW 193
// AddComEnterUnit ( un , b ) ;
6541: LD_VAR 0 2
6545: PPUSH
6546: LD_VAR 0 3
6550: PPUSH
6551: CALL_OW 180
// end else
6555: GO 6590
// if not b and not HasTask ( un ) then
6557: LD_VAR 0 3
6561: NOT
6562: IFFALSE 6576
6564: PUSH
6565: LD_VAR 0 2
6569: PPUSH
6570: CALL_OW 314
6574: NOT
6575: AND
6576: IFFALSE 6590
// ComEnterUnit ( un , arBar1 ) ;
6578: LD_VAR 0 2
6582: PPUSH
6583: LD_INT 37
6585: PPUSH
6586: CALL_OW 120
// end ;
6590: GO 6444
6592: POP
6593: POP
// if enemyInBase then
6594: LD_VAR 0 14
6598: IFFALSE 6743
// begin for i in sol do
6600: LD_ADDR_VAR 0 1
6604: PUSH
6605: LD_VAR 0 12
6609: PUSH
6610: FOR_IN
6611: IFFALSE 6739
// begin tw := IsInUnit ( i ) ;
6613: LD_ADDR_VAR 0 10
6617: PUSH
6618: LD_VAR 0 1
6622: PPUSH
6623: CALL_OW 310
6627: ST_TO_ADDR
// if tw then
6628: LD_VAR 0 10
6632: IFFALSE 6713
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
6634: LD_VAR 0 10
6638: PUSH
6639: LD_INT 22
6641: PUSH
6642: LD_VAR 0 4
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PUSH
6651: LD_INT 101
6653: PUSH
6654: LD_INT 2
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: PUSH
6661: LD_INT 2
6663: PUSH
6664: LD_INT 30
6666: PUSH
6667: LD_INT 32
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: PUSH
6674: LD_INT 30
6676: PUSH
6677: LD_INT 31
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: LIST
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: LIST
6693: PPUSH
6694: CALL_OW 69
6698: IN
6699: NOT
6700: IFFALSE 6711
// ComExitBuilding ( i ) ;
6702: LD_VAR 0 1
6706: PPUSH
6707: CALL_OW 122
// end else
6711: GO 6737
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
6713: LD_VAR 0 1
6717: PPUSH
6718: LD_VAR 0 14
6722: PPUSH
6723: LD_VAR 0 1
6727: PPUSH
6728: CALL_OW 74
6732: PPUSH
6733: CALL_OW 115
// end ;
6737: GO 6610
6739: POP
6740: POP
// end else
6741: GO 7126
// begin empty := FilterUnitsInArea ( arBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
6743: LD_ADDR_VAR 0 15
6747: PUSH
6748: LD_INT 5
6750: PPUSH
6751: LD_INT 3
6753: PUSH
6754: LD_INT 62
6756: PUSH
6757: EMPTY
6758: LIST
6759: PUSH
6760: EMPTY
6761: LIST
6762: LIST
6763: PUSH
6764: LD_INT 2
6766: PUSH
6767: LD_INT 30
6769: PUSH
6770: LD_INT 32
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: LD_INT 30
6779: PUSH
6780: LD_INT 4
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: PUSH
6787: LD_INT 30
6789: PUSH
6790: LD_INT 5
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PUSH
6797: LD_INT 30
6799: PUSH
6800: LD_INT 31
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: PPUSH
6818: CALL_OW 70
6822: ST_TO_ADDR
// if empty then
6823: LD_VAR 0 15
6827: IFFALSE 6844
// empty := ReverseArray ( empty ) ;
6829: LD_ADDR_VAR 0 15
6833: PUSH
6834: LD_VAR 0 15
6838: PPUSH
6839: CALL 88927 0 1
6843: ST_TO_ADDR
// for i in sol do
6844: LD_ADDR_VAR 0 1
6848: PUSH
6849: LD_VAR 0 12
6853: PUSH
6854: FOR_IN
6855: IFFALSE 7124
// begin tag := GetTag ( i ) ;
6857: LD_ADDR_VAR 0 8
6861: PUSH
6862: LD_VAR 0 1
6866: PPUSH
6867: CALL_OW 110
6871: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
6872: LD_VAR 0 1
6876: PPUSH
6877: CALL_OW 256
6881: PUSH
6882: LD_INT 1000
6884: LESS
6885: IFFALSE 6897
6887: PUSH
6888: LD_VAR 0 8
6892: PUSH
6893: LD_INT 1
6895: NONEQUAL
6896: AND
6897: IFFALSE 6937
// begin SetTag ( i , tHeal ) ;
6899: LD_VAR 0 1
6903: PPUSH
6904: LD_INT 1
6906: PPUSH
6907: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
6911: LD_VAR 0 1
6915: PPUSH
6916: LD_INT 72
6918: PPUSH
6919: LD_INT 15
6921: PPUSH
6922: CALL_OW 111
// AddComHold ( i ) ;
6926: LD_VAR 0 1
6930: PPUSH
6931: CALL_OW 200
// continue ;
6935: GO 6854
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
6937: LD_VAR 0 1
6941: PPUSH
6942: CALL_OW 256
6946: PUSH
6947: LD_INT 1000
6949: EQUAL
6950: IFFALSE 6962
6952: PUSH
6953: LD_VAR 0 8
6957: PUSH
6958: LD_INT 1
6960: EQUAL
6961: AND
6962: IFFALSE 7045
// begin if MineOfUnit ( i ) or Count ( UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ) < 3 then
6964: LD_VAR 0 1
6968: PPUSH
6969: CALL_OW 459
6973: IFTRUE 7015
6975: PUSH
6976: LD_VAR 0 12
6980: PPUSH
6981: LD_INT 50
6983: PUSH
6984: EMPTY
6985: LIST
6986: PUSH
6987: LD_INT 120
6989: PUSH
6990: LD_INT 6
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PPUSH
7001: CALL_OW 72
7005: PPUSH
7006: CALL 57905 0 1
7010: PUSH
7011: LD_INT 3
7013: LESS
7014: OR
7015: IFFALSE 7031
// SetTag ( i , tMine ) else
7017: LD_VAR 0 1
7021: PPUSH
7022: LD_INT 6
7024: PPUSH
7025: CALL_OW 109
7029: GO 7043
// SetTag ( i , 0 ) ;
7031: LD_VAR 0 1
7035: PPUSH
7036: LD_INT 0
7038: PPUSH
7039: CALL_OW 109
// continue ;
7043: GO 6854
// end ; if tag = tMine then
7045: LD_VAR 0 8
7049: PUSH
7050: LD_INT 6
7052: EQUAL
7053: IFFALSE 7057
// continue ;
7055: GO 6854
// if not IsInUnit ( i ) and not tag and empty then
7057: LD_VAR 0 1
7061: PPUSH
7062: CALL_OW 310
7066: NOT
7067: IFFALSE 7076
7069: PUSH
7070: LD_VAR 0 8
7074: NOT
7075: AND
7076: IFFALSE 7084
7078: PUSH
7079: LD_VAR 0 15
7083: AND
7084: IFFALSE 7122
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
7086: LD_VAR 0 1
7090: PPUSH
7091: LD_VAR 0 15
7095: PUSH
7096: LD_INT 1
7098: ARRAY
7099: PPUSH
7100: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
7104: LD_ADDR_VAR 0 15
7108: PUSH
7109: LD_VAR 0 15
7113: PPUSH
7114: LD_INT 1
7116: PPUSH
7117: CALL_OW 3
7121: ST_TO_ADDR
// end ; end ;
7122: GO 6854
7124: POP
7125: POP
// end ; end ; end ;
7126: PPOPN 16
7128: END
// every 0 0$1 trigger Count ( arEscapist ) do var i ;
7129: LD_EXP 56
7133: PPUSH
7134: CALL 57905 0 1
7138: IFFALSE 7283
7140: GO 7142
7142: DISABLE
7143: LD_INT 0
7145: PPUSH
// begin enable ;
7146: ENABLE
// for i in UnitFilter ( arEscapist , [ f_ok ] ) do
7147: LD_ADDR_VAR 0 1
7151: PUSH
7152: LD_EXP 56
7156: PPUSH
7157: LD_INT 50
7159: PUSH
7160: EMPTY
7161: LIST
7162: PPUSH
7163: CALL_OW 72
7167: PUSH
7168: FOR_IN
7169: IFFALSE 7281
// begin if not HasTask ( i ) then
7171: LD_VAR 0 1
7175: PPUSH
7176: CALL_OW 314
7180: NOT
7181: IFFALSE 7195
// AddComMoveToArea ( i , khatamArea ) ;
7183: LD_VAR 0 1
7187: PPUSH
7188: LD_INT 11
7190: PPUSH
7191: CALL_OW 173
// if IsInArea ( i , khatamArea ) then
7195: LD_VAR 0 1
7199: PPUSH
7200: LD_INT 11
7202: PPUSH
7203: CALL_OW 308
7207: IFFALSE 7279
// begin RemoveUnit ( i ) ;
7209: LD_VAR 0 1
7213: PPUSH
7214: CALL_OW 64
// arEscapist := arEscapist diff i ;
7218: LD_ADDR_EXP 56
7222: PUSH
7223: LD_EXP 56
7227: PUSH
7228: LD_VAR 0 1
7232: DIFF
7233: ST_TO_ADDR
// arabianEscapedCounter := Inc ( arabianEscapedCounter ) ;
7234: LD_ADDR_EXP 21
7238: PUSH
7239: LD_EXP 21
7243: PPUSH
7244: CALL 95210 0 1
7248: ST_TO_ADDR
// if i = Dietrich then
7249: LD_VAR 0 1
7253: PUSH
7254: LD_EXP 50
7258: EQUAL
7259: IFFALSE 7279
// begin gensherEscaped := true ;
7261: LD_ADDR_EXP 13
7265: PUSH
7266: LD_INT 1
7268: ST_TO_ADDR
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
7269: LD_INT 1
7271: PPUSH
7272: LD_STRING 10_GensherEscape_1
7274: PPUSH
7275: CALL_OW 39
// end ; end ; end ;
7279: GO 7168
7281: POP
7282: POP
// end ;
7283: PPOPN 1
7285: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ; var i , skill , un , veh ; begin
7286: LD_INT 0
7288: PPUSH
7289: PPUSH
7290: PPUSH
7291: PPUSH
7292: PPUSH
// uc_side := 5 ;
7293: LD_ADDR_OWVAR 20
7297: PUSH
7298: LD_INT 5
7300: ST_TO_ADDR
// uc_nation := nation_arabian ;
7301: LD_ADDR_OWVAR 21
7305: PUSH
7306: LD_INT 2
7308: ST_TO_ADDR
// skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
7309: LD_ADDR_VAR 0 3
7313: PUSH
7314: LD_INT 5
7316: PUSH
7317: LD_INT 6
7319: PUSH
7320: LD_INT 7
7322: PUSH
7323: LD_INT 8
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: PUSH
7332: LD_OWVAR 67
7336: ARRAY
7337: ST_TO_ADDR
// arAttackersInf := [ ] ;
7338: LD_ADDR_EXP 57
7342: PUSH
7343: EMPTY
7344: ST_TO_ADDR
// arAttackersVeh := [ ] ;
7345: LD_ADDR_EXP 58
7349: PUSH
7350: EMPTY
7351: ST_TO_ADDR
// InitHC_All ( ) ;
7352: CALL_OW 584
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
7356: LD_ADDR_VAR 0 2
7360: PUSH
7361: DOUBLE
7362: LD_INT 1
7364: DEC
7365: ST_TO_ADDR
7366: LD_INT 3
7368: PUSH
7369: LD_INT 4
7371: PUSH
7372: LD_INT 5
7374: PUSH
7375: LD_INT 6
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: PUSH
7384: LD_OWVAR 67
7388: ARRAY
7389: PUSH
7390: FOR_TO
7391: IFFALSE 7493
// begin PrepareSoldier ( false , skill ) ;
7393: LD_INT 0
7395: PPUSH
7396: LD_VAR 0 3
7400: PPUSH
7401: CALL_OW 381
// un := CreateHuman ;
7405: LD_ADDR_VAR 0 4
7409: PUSH
7410: CALL_OW 44
7414: ST_TO_ADDR
// if i mod 2 = 0 then
7415: LD_VAR 0 2
7419: PUSH
7420: LD_INT 2
7422: MOD
7423: PUSH
7424: LD_INT 0
7426: EQUAL
7427: IFFALSE 7441
// SetClass ( un , class_mortar ) ;
7429: LD_VAR 0 4
7433: PPUSH
7434: LD_INT 8
7436: PPUSH
7437: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
7441: LD_VAR 0 4
7445: PPUSH
7446: LD_INT 19
7448: PPUSH
7449: LD_INT 0
7451: PPUSH
7452: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
7456: LD_ADDR_EXP 57
7460: PUSH
7461: LD_EXP 57
7465: PPUSH
7466: LD_VAR 0 4
7470: PPUSH
7471: CALL 93837 0 2
7475: ST_TO_ADDR
// ComAgressiveMove ( un , 104 , 60 ) ;
7476: LD_VAR 0 4
7480: PPUSH
7481: LD_INT 104
7483: PPUSH
7484: LD_INT 60
7486: PPUSH
7487: CALL_OW 114
// end ;
7491: GO 7390
7493: POP
7494: POP
// for i := 1 to 3 do
7495: LD_ADDR_VAR 0 2
7499: PUSH
7500: DOUBLE
7501: LD_INT 1
7503: DEC
7504: ST_TO_ADDR
7505: LD_INT 3
7507: PUSH
7508: FOR_TO
7509: IFFALSE 7661
// begin PrepareMechanic ( false , skill ) ;
7511: LD_INT 0
7513: PPUSH
7514: LD_VAR 0 3
7518: PPUSH
7519: CALL_OW 383
// un := CreateHuman ;
7523: LD_ADDR_VAR 0 4
7527: PUSH
7528: CALL_OW 44
7532: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
7533: LD_INT 14
7535: PPUSH
7536: LD_INT 1
7538: PPUSH
7539: LD_INT 1
7541: PPUSH
7542: LD_INT 27
7544: PUSH
7545: LD_INT 25
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PUSH
7552: LD_VAR 0 2
7556: PUSH
7557: LD_INT 2
7559: MOD
7560: PUSH
7561: LD_INT 1
7563: PLUS
7564: ARRAY
7565: PPUSH
7566: LD_INT 80
7568: PPUSH
7569: CALL 60667 0 5
// veh := CreateVehicle ;
7573: LD_ADDR_VAR 0 5
7577: PUSH
7578: CALL_OW 45
7582: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7583: LD_VAR 0 5
7587: PPUSH
7588: LD_INT 4
7590: PPUSH
7591: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7595: LD_VAR 0 5
7599: PPUSH
7600: LD_INT 18
7602: PPUSH
7603: LD_INT 0
7605: PPUSH
7606: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7610: LD_VAR 0 4
7614: PPUSH
7615: LD_VAR 0 5
7619: PPUSH
7620: CALL_OW 52
// ComMoveXY ( un , 129 , 20 ) ;
7624: LD_VAR 0 4
7628: PPUSH
7629: LD_INT 129
7631: PPUSH
7632: LD_INT 20
7634: PPUSH
7635: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7639: LD_ADDR_EXP 58
7643: PUSH
7644: LD_EXP 58
7648: PPUSH
7649: LD_VAR 0 5
7653: PPUSH
7654: CALL 93837 0 2
7658: ST_TO_ADDR
// end ;
7659: GO 7508
7661: POP
7662: POP
// wait ( 0 0$2 ) ;
7663: LD_INT 70
7665: PPUSH
7666: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
7670: LD_ADDR_VAR 0 2
7674: PUSH
7675: DOUBLE
7676: LD_INT 1
7678: DEC
7679: ST_TO_ADDR
7680: LD_INT 1
7682: PUSH
7683: LD_INT 2
7685: PUSH
7686: LD_INT 2
7688: PUSH
7689: LD_INT 3
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: PUSH
7698: LD_OWVAR 67
7702: ARRAY
7703: PUSH
7704: FOR_TO
7705: IFFALSE 7836
// begin PrepareMechanic ( false , skill ) ;
7707: LD_INT 0
7709: PPUSH
7710: LD_VAR 0 3
7714: PPUSH
7715: CALL_OW 383
// un := CreateHuman ;
7719: LD_ADDR_VAR 0 4
7723: PUSH
7724: CALL_OW 44
7728: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
7729: LD_INT 14
7731: PPUSH
7732: LD_INT 1
7734: PPUSH
7735: LD_INT 1
7737: PPUSH
7738: LD_INT 26
7740: PPUSH
7741: LD_INT 80
7743: PPUSH
7744: CALL 60667 0 5
// veh := CreateVehicle ;
7748: LD_ADDR_VAR 0 5
7752: PUSH
7753: CALL_OW 45
7757: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7758: LD_VAR 0 5
7762: PPUSH
7763: LD_INT 4
7765: PPUSH
7766: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7770: LD_VAR 0 5
7774: PPUSH
7775: LD_INT 18
7777: PPUSH
7778: LD_INT 0
7780: PPUSH
7781: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7785: LD_VAR 0 4
7789: PPUSH
7790: LD_VAR 0 5
7794: PPUSH
7795: CALL_OW 52
// ComMoveXY ( un , 133 , 40 ) ;
7799: LD_VAR 0 4
7803: PPUSH
7804: LD_INT 133
7806: PPUSH
7807: LD_INT 40
7809: PPUSH
7810: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7814: LD_ADDR_EXP 58
7818: PUSH
7819: LD_EXP 58
7823: PPUSH
7824: LD_VAR 0 5
7828: PPUSH
7829: CALL 93837 0 2
7833: ST_TO_ADDR
// end ;
7834: GO 7704
7836: POP
7837: POP
// wait ( 0 0$2 ) ;
7838: LD_INT 70
7840: PPUSH
7841: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
7845: LD_ADDR_VAR 0 2
7849: PUSH
7850: DOUBLE
7851: LD_INT 1
7853: DEC
7854: ST_TO_ADDR
7855: LD_INT 1
7857: PUSH
7858: LD_INT 2
7860: PUSH
7861: LD_INT 3
7863: PUSH
7864: LD_INT 4
7866: PUSH
7867: EMPTY
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: PUSH
7873: LD_OWVAR 67
7877: ARRAY
7878: PUSH
7879: FOR_TO
7880: IFFALSE 8042
// begin PrepareMechanic ( false , skill ) ;
7882: LD_INT 0
7884: PPUSH
7885: LD_VAR 0 3
7889: PPUSH
7890: CALL_OW 383
// un := CreateHuman ;
7894: LD_ADDR_VAR 0 4
7898: PUSH
7899: CALL_OW 44
7903: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
7904: LD_INT 14
7906: PPUSH
7907: LD_INT 1
7909: PPUSH
7910: LD_INT 1
7912: PPUSH
7913: LD_INT 28
7915: PPUSH
7916: LD_INT 80
7918: PPUSH
7919: CALL 60667 0 5
// veh := CreateVehicle ;
7923: LD_ADDR_VAR 0 5
7927: PUSH
7928: CALL_OW 45
7932: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7933: LD_VAR 0 5
7937: PPUSH
7938: LD_INT 4
7940: PPUSH
7941: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7945: LD_VAR 0 5
7949: PPUSH
7950: LD_INT 18
7952: PPUSH
7953: LD_INT 0
7955: PPUSH
7956: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7960: LD_VAR 0 4
7964: PPUSH
7965: LD_VAR 0 5
7969: PPUSH
7970: CALL_OW 52
// if i mod 2 = 0 then
7974: LD_VAR 0 2
7978: PUSH
7979: LD_INT 2
7981: MOD
7982: PUSH
7983: LD_INT 0
7985: EQUAL
7986: IFFALSE 8005
// ComMoveXY ( un , 136 , 61 ) else
7988: LD_VAR 0 4
7992: PPUSH
7993: LD_INT 136
7995: PPUSH
7996: LD_INT 61
7998: PPUSH
7999: CALL_OW 111
8003: GO 8020
// ComMoveXY ( un , 137 , 41 ) ;
8005: LD_VAR 0 4
8009: PPUSH
8010: LD_INT 137
8012: PPUSH
8013: LD_INT 41
8015: PPUSH
8016: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
8020: LD_ADDR_EXP 58
8024: PUSH
8025: LD_EXP 58
8029: PPUSH
8030: LD_VAR 0 5
8034: PPUSH
8035: CALL 93837 0 2
8039: ST_TO_ADDR
// end ;
8040: GO 7879
8042: POP
8043: POP
// arabianAttackSpawned := true ;
8044: LD_ADDR_EXP 12
8048: PUSH
8049: LD_INT 1
8051: ST_TO_ADDR
// end ;
8052: LD_VAR 0 1
8056: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest ;
8057: LD_EXP 57
8061: IFFALSE 8478
8063: GO 8065
8065: DISABLE
8066: LD_INT 0
8068: PPUSH
8069: PPUSH
8070: PPUSH
// begin wait ( 0 0$10 ) ;
8071: LD_INT 350
8073: PPUSH
8074: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
8078: LD_ADDR_VAR 0 2
8082: PUSH
8083: LD_EXP 57
8087: PPUSH
8088: LD_INT 25
8090: PUSH
8091: LD_INT 1
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: PUSH
8098: LD_INT 50
8100: PUSH
8101: EMPTY
8102: LIST
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: PPUSH
8108: CALL_OW 72
8112: ST_TO_ADDR
// for i in tmp do
8113: LD_ADDR_VAR 0 1
8117: PUSH
8118: LD_VAR 0 2
8122: PUSH
8123: FOR_IN
8124: IFFALSE 8249
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
8126: LD_ADDR_VAR 0 3
8130: PUSH
8131: LD_INT 22
8133: PUSH
8134: LD_INT 1
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: PUSH
8141: LD_INT 3
8143: PUSH
8144: LD_INT 120
8146: PUSH
8147: LD_INT 11
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 2
8160: PUSH
8161: LD_INT 21
8163: PUSH
8164: LD_INT 2
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: PUSH
8171: LD_INT 21
8173: PUSH
8174: LD_INT 3
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: LIST
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: LIST
8190: PPUSH
8191: CALL_OW 69
8195: PPUSH
8196: LD_VAR 0 1
8200: PPUSH
8201: CALL_OW 74
8205: ST_TO_ADDR
// if not nearest then
8206: LD_VAR 0 3
8210: NOT
8211: IFFALSE 8215
// break ;
8213: GO 8249
// SetTag ( nearest , tMined ) ;
8215: LD_VAR 0 3
8219: PPUSH
8220: LD_INT 11
8222: PPUSH
8223: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
8227: LD_VAR 0 1
8231: PPUSH
8232: LD_INT 0
8234: PPUSH
8235: LD_INT 0
8237: PPUSH
8238: LD_VAR 0 3
8242: PPUSH
8243: CALL_OW 132
// end ;
8247: GO 8123
8249: POP
8250: POP
// if hasBase and epsilon then
8251: LD_EXP 9
8255: IFFALSE 8263
8257: PUSH
8258: LD_EXP 10
8262: AND
8263: IFFALSE 8287
// AddComPlaceDelayedCharge ( tmp , 0 , 0 , epsilon ) else
8265: LD_VAR 0 2
8269: PPUSH
8270: LD_INT 0
8272: PPUSH
8273: LD_INT 0
8275: PPUSH
8276: LD_EXP 10
8280: PPUSH
8281: CALL_OW 192
8285: GO 8302
// AddComMoveXY ( tmp , 107 , 59 ) ;
8287: LD_VAR 0 2
8291: PPUSH
8292: LD_INT 107
8294: PPUSH
8295: LD_INT 59
8297: PPUSH
8298: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8302: LD_INT 35
8304: PPUSH
8305: CALL_OW 67
// until IsDead ( Dietrich ) or gensherEscaped ;
8309: LD_EXP 50
8313: PPUSH
8314: CALL_OW 301
8318: IFTRUE 8326
8320: PUSH
8321: LD_EXP 13
8325: OR
8326: IFFALSE 8302
// if not gensherEscaped then
8328: LD_EXP 13
8332: NOT
8333: IFFALSE 8342
// wait ( 1 1$20 ) ;
8335: LD_INT 2800
8337: PPUSH
8338: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
8342: LD_ADDR_VAR 0 2
8346: PUSH
8347: LD_EXP 57
8351: PPUSH
8352: LD_INT 50
8354: PUSH
8355: EMPTY
8356: LIST
8357: PPUSH
8358: CALL_OW 72
8362: ST_TO_ADDR
// ComMoveXY ( tmp , 143 , 117 ) ;
8363: LD_VAR 0 2
8367: PPUSH
8368: LD_INT 143
8370: PPUSH
8371: LD_INT 117
8373: PPUSH
8374: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8378: LD_INT 35
8380: PPUSH
8381: CALL_OW 67
// for i in tmp do
8385: LD_ADDR_VAR 0 1
8389: PUSH
8390: LD_VAR 0 2
8394: PUSH
8395: FOR_IN
8396: IFFALSE 8469
// if IsInArea ( i , arAttackSpawn2Area ) then
8398: LD_VAR 0 1
8402: PPUSH
8403: LD_INT 19
8405: PPUSH
8406: CALL_OW 308
8410: IFFALSE 8455
// begin tmp := tmp diff i ;
8412: LD_ADDR_VAR 0 2
8416: PUSH
8417: LD_VAR 0 2
8421: PUSH
8422: LD_VAR 0 1
8426: DIFF
8427: ST_TO_ADDR
// arAttackersInf := arAttackersInf diff i ;
8428: LD_ADDR_EXP 57
8432: PUSH
8433: LD_EXP 57
8437: PUSH
8438: LD_VAR 0 1
8442: DIFF
8443: ST_TO_ADDR
// RemoveUnit ( i ) ;
8444: LD_VAR 0 1
8448: PPUSH
8449: CALL_OW 64
// end else
8453: GO 8467
// ComMoveToArea ( i , arAttackSpawn2Area ) ;
8455: LD_VAR 0 1
8459: PPUSH
8460: LD_INT 19
8462: PPUSH
8463: CALL_OW 113
8467: GO 8395
8469: POP
8470: POP
// until not tmp ;
8471: LD_VAR 0 2
8475: NOT
8476: IFFALSE 8378
// end ;
8478: PPOPN 3
8480: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp , p ;
8481: LD_EXP 58
8485: IFFALSE 8773
8487: GO 8489
8489: DISABLE
8490: LD_INT 0
8492: PPUSH
8493: PPUSH
8494: PPUSH
// begin p := 0 ;
8495: LD_ADDR_VAR 0 3
8499: PUSH
8500: LD_INT 0
8502: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8503: LD_INT 35
8505: PPUSH
8506: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8510: LD_ADDR_VAR 0 2
8514: PUSH
8515: LD_EXP 58
8519: PPUSH
8520: LD_INT 50
8522: PUSH
8523: EMPTY
8524: LIST
8525: PPUSH
8526: CALL_OW 72
8530: ST_TO_ADDR
// for i in tmp do
8531: LD_ADDR_VAR 0 1
8535: PUSH
8536: LD_VAR 0 2
8540: PUSH
8541: FOR_IN
8542: IFFALSE 8579
// AgressiveMove ( i , [ [ 143 , 38 ] , [ 111 , 31 ] ] ) ;
8544: LD_VAR 0 1
8548: PPUSH
8549: LD_INT 143
8551: PUSH
8552: LD_INT 38
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: PUSH
8559: LD_INT 111
8561: PUSH
8562: LD_INT 31
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: PPUSH
8573: CALL 96603 0 2
8577: GO 8541
8579: POP
8580: POP
// if IsDead ( Dietrich ) then
8581: LD_EXP 50
8585: PPUSH
8586: CALL_OW 301
8590: IFFALSE 8607
// p := Inc ( p ) ;
8592: LD_ADDR_VAR 0 3
8596: PUSH
8597: LD_VAR 0 3
8601: PPUSH
8602: CALL 95210 0 1
8606: ST_TO_ADDR
// until not tmp or gensherEscaped or p > 40 ;
8607: LD_VAR 0 2
8611: NOT
8612: IFTRUE 8620
8614: PUSH
8615: LD_EXP 13
8619: OR
8620: IFTRUE 8632
8622: PUSH
8623: LD_VAR 0 3
8627: PUSH
8628: LD_INT 40
8630: GREATER
8631: OR
8632: IFFALSE 8503
// if not arAttackersVeh then
8634: LD_EXP 58
8638: NOT
8639: IFFALSE 8643
// exit ;
8641: GO 8773
// repeat wait ( 0 0$1 ) ;
8643: LD_INT 35
8645: PPUSH
8646: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8650: LD_ADDR_VAR 0 2
8654: PUSH
8655: LD_EXP 58
8659: PPUSH
8660: LD_INT 50
8662: PUSH
8663: EMPTY
8664: LIST
8665: PPUSH
8666: CALL_OW 72
8670: ST_TO_ADDR
// for i in tmp do
8671: LD_ADDR_VAR 0 1
8675: PUSH
8676: LD_VAR 0 2
8680: PUSH
8681: FOR_IN
8682: IFFALSE 8764
// if IsInArea ( i , arAttackSpawnArea ) then
8684: LD_VAR 0 1
8688: PPUSH
8689: LD_INT 18
8691: PPUSH
8692: CALL_OW 308
8696: IFFALSE 8750
// begin if IsInUnit ( i ) then
8698: LD_VAR 0 1
8702: PPUSH
8703: CALL_OW 310
8707: IFFALSE 8723
// RemoveUnit ( IsInUnit ( i ) ) ;
8709: LD_VAR 0 1
8713: PPUSH
8714: CALL_OW 310
8718: PPUSH
8719: CALL_OW 64
// RemoveUnit ( i ) ;
8723: LD_VAR 0 1
8727: PPUSH
8728: CALL_OW 64
// arAttackersVeh := arAttackersVeh diff i ;
8732: LD_ADDR_EXP 58
8736: PUSH
8737: LD_EXP 58
8741: PUSH
8742: LD_VAR 0 1
8746: DIFF
8747: ST_TO_ADDR
// end else
8748: GO 8762
// ComMoveToArea ( i , arAttackSpawnArea ) ;
8750: LD_VAR 0 1
8754: PPUSH
8755: LD_INT 18
8757: PPUSH
8758: CALL_OW 113
8762: GO 8681
8764: POP
8765: POP
// until not tmp ;
8766: LD_VAR 0 2
8770: NOT
8771: IFFALSE 8643
// end ; end_of_file
8773: PPOPN 3
8775: END
// export ruForces , ruForces2 , ruCommander , ruCommander2 , ruMech , ruMech2 ; export ruTech , ruBaseArea , ruBaseArea2 , ruBase , ruBase2 , ruConstructList , ruConstructList2 , ruCratesArea , ruCratesArea2 , ruHealPoint , ruHealPoint2 , ruBuildings , ruBuildings2 , ruTransportDestroyed , ruTanks , ruTanks2 , ruExtraTanks , ruParkingArea , ruParkingArea2 , ruCratesSpawnArea , ruCratesSpawnArea2 ; export function PrepareRussian ; var i , j , un , c , skill , sources ; begin
8776: LD_INT 0
8778: PPUSH
8779: PPUSH
8780: PPUSH
8781: PPUSH
8782: PPUSH
8783: PPUSH
8784: PPUSH
// uc_side := 3 ;
8785: LD_ADDR_OWVAR 20
8789: PUSH
8790: LD_INT 3
8792: ST_TO_ADDR
// uc_nation := nation_russian ;
8793: LD_ADDR_OWVAR 21
8797: PUSH
8798: LD_INT 3
8800: ST_TO_ADDR
// ruForces := [ ] ;
8801: LD_ADDR_EXP 59
8805: PUSH
8806: EMPTY
8807: ST_TO_ADDR
// ruForces2 := [ ] ;
8808: LD_ADDR_EXP 60
8812: PUSH
8813: EMPTY
8814: ST_TO_ADDR
// ruMech := [ ] ;
8815: LD_ADDR_EXP 63
8819: PUSH
8820: EMPTY
8821: ST_TO_ADDR
// ruMech2 := [ ] ;
8822: LD_ADDR_EXP 64
8826: PUSH
8827: EMPTY
8828: ST_TO_ADDR
// ruTech := [ tech_LimTeleport , tech_ST1 , tech_Weap2 , tech_Sib1 ] ;
8829: LD_ADDR_EXP 65
8833: PUSH
8834: LD_INT 37
8836: PUSH
8837: LD_INT 63
8839: PUSH
8840: LD_INT 52
8842: PUSH
8843: LD_INT 54
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: ST_TO_ADDR
// ruBaseArea := 0 ;
8852: LD_ADDR_EXP 66
8856: PUSH
8857: LD_INT 0
8859: ST_TO_ADDR
// ruBaseArea2 := 0 ;
8860: LD_ADDR_EXP 67
8864: PUSH
8865: LD_INT 0
8867: ST_TO_ADDR
// ruBase := 0 ;
8868: LD_ADDR_EXP 68
8872: PUSH
8873: LD_INT 0
8875: ST_TO_ADDR
// ruBase2 := 0 ;
8876: LD_ADDR_EXP 69
8880: PUSH
8881: LD_INT 0
8883: ST_TO_ADDR
// ruConstructList := [ ] ;
8884: LD_ADDR_EXP 70
8888: PUSH
8889: EMPTY
8890: ST_TO_ADDR
// ruConstructList2 := [ [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ] ;
8891: LD_ADDR_EXP 71
8895: PUSH
8896: LD_INT 22
8898: PUSH
8899: LD_INT 3
8901: PUSH
8902: LD_INT 1
8904: PUSH
8905: LD_INT 43
8907: PUSH
8908: LD_INT 44
8910: PUSH
8911: LD_INT 45
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: LIST
8918: PUSH
8919: LD_INT 1
8921: PPUSH
8922: LD_INT 3
8924: PPUSH
8925: CALL_OW 12
8929: ARRAY
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: PUSH
8937: LD_INT 22
8939: PUSH
8940: LD_INT 3
8942: PUSH
8943: LD_INT 1
8945: PUSH
8946: LD_INT 43
8948: PUSH
8949: LD_INT 44
8951: PUSH
8952: LD_INT 45
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: LIST
8959: PUSH
8960: LD_INT 1
8962: PPUSH
8963: LD_INT 3
8965: PPUSH
8966: CALL_OW 12
8970: ARRAY
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: PUSH
8978: LD_INT 22
8980: PUSH
8981: LD_INT 3
8983: PUSH
8984: LD_INT 1
8986: PUSH
8987: LD_INT 43
8989: PUSH
8990: LD_INT 44
8992: PUSH
8993: LD_INT 45
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: LIST
9000: PUSH
9001: LD_INT 1
9003: PPUSH
9004: LD_INT 3
9006: PPUSH
9007: CALL_OW 12
9011: ARRAY
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: LIST
9023: ST_TO_ADDR
// ruCratesArea := 0 ;
9024: LD_ADDR_EXP 72
9028: PUSH
9029: LD_INT 0
9031: ST_TO_ADDR
// ruCratesArea2 := 0 ;
9032: LD_ADDR_EXP 73
9036: PUSH
9037: LD_INT 0
9039: ST_TO_ADDR
// ruHealPoint := [ ] ;
9040: LD_ADDR_EXP 74
9044: PUSH
9045: EMPTY
9046: ST_TO_ADDR
// ruHealPoint2 := [ ] ;
9047: LD_ADDR_EXP 75
9051: PUSH
9052: EMPTY
9053: ST_TO_ADDR
// ruBuildings := [ ] ;
9054: LD_ADDR_EXP 76
9058: PUSH
9059: EMPTY
9060: ST_TO_ADDR
// ruBuildings2 := [ ] ;
9061: LD_ADDR_EXP 77
9065: PUSH
9066: EMPTY
9067: ST_TO_ADDR
// ruTanks := [ ] ;
9068: LD_ADDR_EXP 79
9072: PUSH
9073: EMPTY
9074: ST_TO_ADDR
// ruTanks2 := [ ] ;
9075: LD_ADDR_EXP 80
9079: PUSH
9080: EMPTY
9081: ST_TO_ADDR
// ruParkingArea := 0 ;
9082: LD_ADDR_EXP 82
9086: PUSH
9087: LD_INT 0
9089: ST_TO_ADDR
// ruParkingArea2 := 0 ;
9090: LD_ADDR_EXP 83
9094: PUSH
9095: LD_INT 0
9097: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
9098: LD_ADDR_VAR 0 2
9102: PUSH
9103: DOUBLE
9104: LD_INT 1
9106: DEC
9107: ST_TO_ADDR
9108: LD_INT 2
9110: PUSH
9111: LD_INT 3
9113: PUSH
9114: LD_INT 4
9116: PUSH
9117: LD_INT 4
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: PUSH
9126: LD_OWVAR 67
9130: ARRAY
9131: PUSH
9132: FOR_TO
9133: IFFALSE 9193
// ruConstructList := Join ( ruConstructList , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
9135: LD_ADDR_EXP 70
9139: PUSH
9140: LD_EXP 70
9144: PPUSH
9145: LD_INT 22
9147: PUSH
9148: LD_INT 3
9150: PUSH
9151: LD_INT 1
9153: PUSH
9154: LD_INT 43
9156: PUSH
9157: LD_INT 44
9159: PUSH
9160: LD_INT 45
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: LIST
9167: PUSH
9168: LD_INT 1
9170: PPUSH
9171: LD_INT 3
9173: PPUSH
9174: CALL_OW 12
9178: ARRAY
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: PPUSH
9186: CALL 93837 0 2
9190: ST_TO_ADDR
9191: GO 9132
9193: POP
9194: POP
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
9195: LD_ADDR_VAR 0 7
9199: PUSH
9200: LD_INT 43
9202: PUSH
9203: LD_INT 68
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PUSH
9210: LD_INT 43
9212: PUSH
9213: LD_INT 79
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 99
9222: PUSH
9223: LD_INT 114
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: LD_INT 103
9232: PUSH
9233: LD_INT 114
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: PUSH
9240: LD_INT 156
9242: PUSH
9243: LD_INT 92
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PUSH
9250: LD_INT 152
9252: PUSH
9253: LD_INT 85
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: ST_TO_ADDR
// for i in sources do
9268: LD_ADDR_VAR 0 2
9272: PUSH
9273: LD_VAR 0 7
9277: PUSH
9278: FOR_IN
9279: IFFALSE 9308
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
9281: LD_VAR 0 2
9285: PUSH
9286: LD_INT 1
9288: ARRAY
9289: PPUSH
9290: LD_VAR 0 2
9294: PUSH
9295: LD_INT 2
9297: ARRAY
9298: PPUSH
9299: LD_INT 3
9301: PPUSH
9302: CALL_OW 441
9306: GO 9278
9308: POP
9309: POP
// if Difficulty > 2 then
9310: LD_OWVAR 67
9314: PUSH
9315: LD_INT 2
9317: GREATER
9318: IFFALSE 9346
// begin SetTech ( tech_weap2 , 6 , state_researched ) ;
9320: LD_INT 52
9322: PPUSH
9323: LD_INT 6
9325: PPUSH
9326: LD_INT 2
9328: PPUSH
9329: CALL_OW 322
// SetTech ( tech_comp2 , 6 , state_researched ) ;
9333: LD_INT 58
9335: PPUSH
9336: LD_INT 6
9338: PPUSH
9339: LD_INT 2
9341: PPUSH
9342: CALL_OW 322
// end ; skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
9346: LD_ADDR_VAR 0 6
9350: PUSH
9351: LD_INT 5
9353: PUSH
9354: LD_INT 6
9356: PUSH
9357: LD_INT 7
9359: PUSH
9360: LD_INT 8
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: PUSH
9369: LD_OWVAR 67
9373: ARRAY
9374: ST_TO_ADDR
// ruCommander := PrepareUnit ( Tsaritsyn , false ,  ) ;
9375: LD_ADDR_EXP 61
9379: PUSH
9380: LD_STRING Tsaritsyn
9382: PPUSH
9383: LD_INT 0
9385: PPUSH
9386: LD_STRING 
9388: PPUSH
9389: CALL 55705 0 3
9393: ST_TO_ADDR
// c := 0 ;
9394: LD_ADDR_VAR 0 5
9398: PUSH
9399: LD_INT 0
9401: ST_TO_ADDR
// for i := 1 to 4 do
9402: LD_ADDR_VAR 0 2
9406: PUSH
9407: DOUBLE
9408: LD_INT 1
9410: DEC
9411: ST_TO_ADDR
9412: LD_INT 4
9414: PUSH
9415: FOR_TO
9416: IFFALSE 9649
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9418: LD_ADDR_VAR 0 3
9422: PUSH
9423: DOUBLE
9424: LD_INT 1
9426: DEC
9427: ST_TO_ADDR
9428: LD_INT 5
9430: PUSH
9431: LD_INT 6
9433: PUSH
9434: LD_INT 8
9436: PUSH
9437: LD_INT 9
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: PUSH
9446: LD_OWVAR 67
9450: ARRAY
9451: PUSH
9452: LD_INT 3
9454: PUSH
9455: LD_INT 4
9457: PUSH
9458: LD_INT 5
9460: PUSH
9461: LD_INT 6
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: PUSH
9470: LD_OWVAR 67
9474: ARRAY
9475: PUSH
9476: LD_INT 3
9478: PUSH
9479: LD_INT 4
9481: PUSH
9482: LD_INT 5
9484: PUSH
9485: LD_INT 6
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: PUSH
9494: LD_OWVAR 67
9498: ARRAY
9499: PUSH
9500: LD_INT 2
9502: PUSH
9503: LD_INT 3
9505: PUSH
9506: LD_INT 3
9508: PUSH
9509: LD_INT 3
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: PUSH
9518: LD_OWVAR 67
9522: ARRAY
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: PUSH
9530: LD_VAR 0 2
9534: ARRAY
9535: PUSH
9536: FOR_TO
9537: IFFALSE 9645
// begin c := Inc ( c ) ;
9539: LD_ADDR_VAR 0 5
9543: PUSH
9544: LD_VAR 0 5
9548: PPUSH
9549: CALL 95210 0 1
9553: ST_TO_ADDR
// PrepareHuman ( false , i , skill ) ;
9554: LD_INT 0
9556: PPUSH
9557: LD_VAR 0 2
9561: PPUSH
9562: LD_VAR 0 6
9566: PPUSH
9567: CALL_OW 380
// un := CreateHuman ;
9571: LD_ADDR_VAR 0 4
9575: PUSH
9576: CALL_OW 44
9580: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
9581: LD_ADDR_EXP 59
9585: PUSH
9586: LD_EXP 59
9590: PPUSH
9591: LD_VAR 0 4
9595: PPUSH
9596: CALL 93837 0 2
9600: ST_TO_ADDR
// if i = 3 then
9601: LD_VAR 0 2
9605: PUSH
9606: LD_INT 3
9608: EQUAL
9609: IFFALSE 9643
// begin ruMech := Join ( ruMech , un ) ;
9611: LD_ADDR_EXP 63
9615: PUSH
9616: LD_EXP 63
9620: PPUSH
9621: LD_VAR 0 4
9625: PPUSH
9626: CALL 93837 0 2
9630: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9631: LD_VAR 0 4
9635: PPUSH
9636: LD_INT 1
9638: PPUSH
9639: CALL_OW 336
// end ; end ;
9643: GO 9536
9645: POP
9646: POP
9647: GO 9415
9649: POP
9650: POP
// if Difficulty < 4 then
9651: LD_OWVAR 67
9655: PUSH
9656: LD_INT 4
9658: LESS
9659: IFFALSE 9663
// exit ;
9661: GO 9935
// PrepareSoldier ( sex_male , skill + 1 ) ;
9663: LD_INT 1
9665: PPUSH
9666: LD_VAR 0 6
9670: PUSH
9671: LD_INT 1
9673: PLUS
9674: PPUSH
9675: CALL_OW 381
// hc_importance := 100 ;
9679: LD_ADDR_OWVAR 32
9683: PUSH
9684: LD_INT 100
9686: ST_TO_ADDR
// ruCommander2 := CreateHuman ;
9687: LD_ADDR_EXP 62
9691: PUSH
9692: CALL_OW 44
9696: ST_TO_ADDR
// InitHc_All ( ) ;
9697: CALL_OW 584
// for i := 1 to 4 do
9701: LD_ADDR_VAR 0 2
9705: PUSH
9706: DOUBLE
9707: LD_INT 1
9709: DEC
9710: ST_TO_ADDR
9711: LD_INT 4
9713: PUSH
9714: FOR_TO
9715: IFFALSE 9933
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9717: LD_ADDR_VAR 0 3
9721: PUSH
9722: DOUBLE
9723: LD_INT 1
9725: DEC
9726: ST_TO_ADDR
9727: LD_INT 5
9729: PUSH
9730: LD_INT 6
9732: PUSH
9733: LD_INT 8
9735: PUSH
9736: LD_INT 9
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: PUSH
9745: LD_OWVAR 67
9749: ARRAY
9750: PUSH
9751: LD_INT 3
9753: PUSH
9754: LD_INT 4
9756: PUSH
9757: LD_INT 5
9759: PUSH
9760: LD_INT 6
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: PUSH
9769: LD_OWVAR 67
9773: ARRAY
9774: PUSH
9775: LD_INT 3
9777: PUSH
9778: LD_INT 4
9780: PUSH
9781: LD_INT 5
9783: PUSH
9784: LD_INT 6
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: PUSH
9793: LD_OWVAR 67
9797: ARRAY
9798: PUSH
9799: LD_INT 2
9801: PUSH
9802: LD_INT 3
9804: PUSH
9805: LD_INT 3
9807: PUSH
9808: LD_INT 3
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: PUSH
9817: LD_OWVAR 67
9821: ARRAY
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: PUSH
9829: LD_VAR 0 2
9833: ARRAY
9834: PUSH
9835: FOR_TO
9836: IFFALSE 9929
// begin PrepareHuman ( false , i , skill ) ;
9838: LD_INT 0
9840: PPUSH
9841: LD_VAR 0 2
9845: PPUSH
9846: LD_VAR 0 6
9850: PPUSH
9851: CALL_OW 380
// un := CreateHuman ;
9855: LD_ADDR_VAR 0 4
9859: PUSH
9860: CALL_OW 44
9864: ST_TO_ADDR
// ruForces2 := Join ( ruForces2 , un ) ;
9865: LD_ADDR_EXP 60
9869: PUSH
9870: LD_EXP 60
9874: PPUSH
9875: LD_VAR 0 4
9879: PPUSH
9880: CALL 93837 0 2
9884: ST_TO_ADDR
// if i = 3 then
9885: LD_VAR 0 2
9889: PUSH
9890: LD_INT 3
9892: EQUAL
9893: IFFALSE 9927
// begin ruMech2 := Join ( ruMech2 , un ) ;
9895: LD_ADDR_EXP 64
9899: PUSH
9900: LD_EXP 64
9904: PPUSH
9905: LD_VAR 0 4
9909: PPUSH
9910: CALL 93837 0 2
9914: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9915: LD_VAR 0 4
9919: PPUSH
9920: LD_INT 1
9922: PPUSH
9923: CALL_OW 336
// end ; end ;
9927: GO 9835
9929: POP
9930: POP
9931: GO 9714
9933: POP
9934: POP
// end ;
9935: LD_VAR 0 1
9939: RET
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings ) < 3 do var i ;
9940: LD_EXP 66
9944: PPUSH
9945: LD_INT 30
9947: PUSH
9948: LD_INT 3
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PUSH
9955: LD_INT 50
9957: PUSH
9958: EMPTY
9959: LIST
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: PPUSH
9965: CALL_OW 70
9969: IFFALSE 9986
9971: PUSH
9972: LD_EXP 76
9976: PPUSH
9977: CALL 57905 0 1
9981: PUSH
9982: LD_INT 3
9984: LESS
9985: AND
9986: IFFALSE 10250
9988: GO 9990
9990: DISABLE
9991: LD_INT 0
9993: PPUSH
// begin enable ;
9994: ENABLE
// ruConstructList := ruConstructList ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
9995: LD_ADDR_EXP 70
9999: PUSH
10000: LD_EXP 70
10004: PUSH
10005: LD_INT 22
10007: PUSH
10008: LD_INT 22
10010: PUSH
10011: LD_INT 24
10013: PUSH
10014: LD_INT 24
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: PUSH
10023: LD_OWVAR 67
10027: ARRAY
10028: PUSH
10029: LD_INT 1
10031: PUSH
10032: LD_INT 3
10034: PUSH
10035: LD_INT 44
10037: PUSH
10038: LD_INT 45
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PUSH
10045: LD_INT 1
10047: PPUSH
10048: LD_INT 2
10050: PPUSH
10051: CALL_OW 12
10055: ARRAY
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: PUSH
10063: LD_INT 22
10065: PUSH
10066: LD_INT 22
10068: PUSH
10069: LD_INT 24
10071: PUSH
10072: LD_INT 24
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: PUSH
10081: LD_OWVAR 67
10085: ARRAY
10086: PUSH
10087: LD_INT 1
10089: PUSH
10090: LD_INT 3
10092: PUSH
10093: LD_INT 45
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: PUSH
10102: LD_INT 22
10104: PUSH
10105: LD_INT 22
10107: PUSH
10108: LD_INT 24
10110: PUSH
10111: LD_INT 24
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: PUSH
10120: LD_OWVAR 67
10124: ARRAY
10125: PUSH
10126: LD_INT 1
10128: PUSH
10129: LD_INT 3
10131: PUSH
10132: LD_INT 45
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: LIST
10145: ADD
10146: ST_TO_ADDR
// for i := Difficulty downto 1 do
10147: LD_ADDR_VAR 0 1
10151: PUSH
10152: DOUBLE
10153: LD_OWVAR 67
10157: INC
10158: ST_TO_ADDR
10159: LD_INT 1
10161: PUSH
10162: FOR_DOWNTO
10163: IFFALSE 10248
// ruConstructList := Join ( ruConstructList , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 4 ) ] ] ) ;
10165: LD_ADDR_EXP 70
10169: PUSH
10170: LD_EXP 70
10174: PPUSH
10175: LD_INT 22
10177: PUSH
10178: LD_INT 22
10180: PUSH
10181: LD_INT 24
10183: PUSH
10184: LD_INT 24
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: PUSH
10193: LD_OWVAR 67
10197: ARRAY
10198: PUSH
10199: LD_INT 1
10201: PUSH
10202: LD_INT 3
10204: PUSH
10205: LD_INT 44
10207: PUSH
10208: LD_INT 45
10210: PUSH
10211: LD_INT 45
10213: PUSH
10214: LD_INT 43
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: PUSH
10223: LD_INT 1
10225: PPUSH
10226: LD_INT 4
10228: PPUSH
10229: CALL_OW 12
10233: ARRAY
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: PPUSH
10241: CALL 93837 0 2
10245: ST_TO_ADDR
10246: GO 10162
10248: POP
10249: POP
// end ;
10250: PPOPN 1
10252: END
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea2 , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings2 ) < 3 do
10253: LD_EXP 67
10257: PPUSH
10258: LD_INT 30
10260: PUSH
10261: LD_INT 3
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PUSH
10268: LD_INT 50
10270: PUSH
10271: EMPTY
10272: LIST
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PPUSH
10278: CALL_OW 70
10282: IFFALSE 10299
10284: PUSH
10285: LD_EXP 77
10289: PPUSH
10290: CALL 57905 0 1
10294: PUSH
10295: LD_INT 3
10297: LESS
10298: AND
10299: IFFALSE 10494
10301: GO 10303
10303: DISABLE
// begin enable ;
10304: ENABLE
// ruConstructList2 := ruConstructList2 ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] ] ;
10305: LD_ADDR_EXP 71
10309: PUSH
10310: LD_EXP 71
10314: PUSH
10315: LD_INT 22
10317: PUSH
10318: LD_INT 22
10320: PUSH
10321: LD_INT 24
10323: PUSH
10324: LD_INT 24
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: PUSH
10333: LD_INT 1
10335: PPUSH
10336: LD_INT 4
10338: PPUSH
10339: CALL_OW 12
10343: ARRAY
10344: PUSH
10345: LD_INT 1
10347: PUSH
10348: LD_INT 3
10350: PUSH
10351: LD_INT 44
10353: PUSH
10354: LD_INT 45
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: PUSH
10361: LD_INT 1
10363: PPUSH
10364: LD_INT 2
10366: PPUSH
10367: CALL_OW 12
10371: ARRAY
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: PUSH
10379: LD_INT 22
10381: PUSH
10382: LD_INT 22
10384: PUSH
10385: LD_INT 24
10387: PUSH
10388: LD_INT 24
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: PUSH
10397: LD_INT 1
10399: PPUSH
10400: LD_INT 4
10402: PPUSH
10403: CALL_OW 12
10407: ARRAY
10408: PUSH
10409: LD_INT 1
10411: PUSH
10412: LD_INT 3
10414: PUSH
10415: LD_INT 45
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: PUSH
10424: LD_INT 22
10426: PUSH
10427: LD_INT 22
10429: PUSH
10430: LD_INT 24
10432: PUSH
10433: LD_INT 24
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: PUSH
10442: LD_INT 1
10444: PPUSH
10445: LD_INT 4
10447: PPUSH
10448: CALL_OW 12
10452: ARRAY
10453: PUSH
10454: LD_INT 1
10456: PUSH
10457: LD_INT 3
10459: PUSH
10460: LD_INT 45
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: PUSH
10469: LD_INT 22
10471: PUSH
10472: LD_INT 1
10474: PUSH
10475: LD_INT 3
10477: PUSH
10478: LD_INT 43
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: ADD
10493: ST_TO_ADDR
// end ;
10494: END
// export function SpawnConvoy ; var i , tmp , spawn , area , path , place , point ; begin
10495: LD_INT 0
10497: PPUSH
10498: PPUSH
10499: PPUSH
10500: PPUSH
10501: PPUSH
10502: PPUSH
10503: PPUSH
10504: PPUSH
// case Difficulty of 1 :
10505: LD_OWVAR 67
10509: PUSH
10510: LD_INT 1
10512: DOUBLE
10513: EQUAL
10514: IFTRUE 10518
10516: GO 10537
10518: POP
// spawn := rand ( 1 , 2 ) ; 2 :
10519: LD_ADDR_VAR 0 4
10523: PUSH
10524: LD_INT 1
10526: PPUSH
10527: LD_INT 2
10529: PPUSH
10530: CALL_OW 12
10534: ST_TO_ADDR
10535: GO 10611
10537: LD_INT 2
10539: DOUBLE
10540: EQUAL
10541: IFTRUE 10545
10543: GO 10564
10545: POP
// spawn := rand ( 1 , 3 ) ; 3 :
10546: LD_ADDR_VAR 0 4
10550: PUSH
10551: LD_INT 1
10553: PPUSH
10554: LD_INT 3
10556: PPUSH
10557: CALL_OW 12
10561: ST_TO_ADDR
10562: GO 10611
10564: LD_INT 3
10566: DOUBLE
10567: EQUAL
10568: IFTRUE 10572
10570: GO 10591
10572: POP
// spawn := rand ( 2 , 3 ) ; 4 :
10573: LD_ADDR_VAR 0 4
10577: PUSH
10578: LD_INT 2
10580: PPUSH
10581: LD_INT 3
10583: PPUSH
10584: CALL_OW 12
10588: ST_TO_ADDR
10589: GO 10611
10591: LD_INT 4
10593: DOUBLE
10594: EQUAL
10595: IFTRUE 10599
10597: GO 10610
10599: POP
// spawn := 3 ; end ;
10600: LD_ADDR_VAR 0 4
10604: PUSH
10605: LD_INT 3
10607: ST_TO_ADDR
10608: GO 10611
10610: POP
// path := [ centerPathArea , westPathArea , eastPathArea ] [ spawn ] ;
10611: LD_ADDR_VAR 0 6
10615: PUSH
10616: LD_INT 24
10618: PUSH
10619: LD_INT 25
10621: PUSH
10622: LD_INT 23
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: LIST
10629: PUSH
10630: LD_VAR 0 4
10634: ARRAY
10635: ST_TO_ADDR
// area := [ ruSpawnCenterArea , ruSpawnWestArea , ruSpawnEastArea ] [ spawn ] ;
10636: LD_ADDR_VAR 0 5
10640: PUSH
10641: LD_INT 21
10643: PUSH
10644: LD_INT 22
10646: PUSH
10647: LD_INT 20
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: LIST
10654: PUSH
10655: LD_VAR 0 4
10659: ARRAY
10660: ST_TO_ADDR
// point := [ [ 96 , 102 ] , [ 54 , 85 ] , [ 146 , 67 ] ] [ spawn ] ;
10661: LD_ADDR_VAR 0 8
10665: PUSH
10666: LD_INT 96
10668: PUSH
10669: LD_INT 102
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: LD_INT 54
10678: PUSH
10679: LD_INT 85
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: PUSH
10686: LD_INT 146
10688: PUSH
10689: LD_INT 67
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: LIST
10700: PUSH
10701: LD_VAR 0 4
10705: ARRAY
10706: ST_TO_ADDR
// for i in ruForces union ruCommander do
10707: LD_ADDR_VAR 0 2
10711: PUSH
10712: LD_EXP 59
10716: PUSH
10717: LD_EXP 61
10721: UNION
10722: PUSH
10723: FOR_IN
10724: IFFALSE 10788
// begin repeat wait ( 0 0$1 ) ;
10726: LD_INT 35
10728: PPUSH
10729: CALL_OW 67
// until PlaceUnitArea ( i , area , false ) ;
10733: LD_VAR 0 2
10737: PPUSH
10738: LD_VAR 0 5
10742: PPUSH
10743: LD_INT 0
10745: PPUSH
10746: CALL_OW 49
10750: IFFALSE 10726
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
10752: LD_VAR 0 2
10756: PPUSH
10757: LD_VAR 0 8
10761: PUSH
10762: LD_INT 1
10764: ARRAY
10765: PPUSH
10766: LD_VAR 0 8
10770: PUSH
10771: LD_INT 2
10773: ARRAY
10774: PPUSH
10775: CALL_OW 111
// wait ( 0 0$0.4 ) ;
10779: LD_INT 14
10781: PPUSH
10782: CALL_OW 67
// end ;
10786: GO 10723
10788: POP
10789: POP
// DRussianConvoy ;
10790: CALL 28752 0 0
// spawnedRussians := true ;
10794: LD_ADDR_EXP 19
10798: PUSH
10799: LD_INT 1
10801: ST_TO_ADDR
// RevealFogArea ( 1 , path ) ;
10802: LD_INT 1
10804: PPUSH
10805: LD_VAR 0 6
10809: PPUSH
10810: CALL_OW 332
// case spawn of 1 :
10814: LD_VAR 0 4
10818: PUSH
10819: LD_INT 1
10821: DOUBLE
10822: EQUAL
10823: IFTRUE 10827
10825: GO 10837
10827: POP
// RaiseSailEvent ( ERussianBaseC ) ; 2 :
10828: LD_INT 102
10830: PPUSH
10831: CALL_OW 427
10835: GO 10874
10837: LD_INT 2
10839: DOUBLE
10840: EQUAL
10841: IFTRUE 10845
10843: GO 10855
10845: POP
// RaiseSailEvent ( ERussianBaseW ) ; 3 :
10846: LD_INT 103
10848: PPUSH
10849: CALL_OW 427
10853: GO 10874
10855: LD_INT 3
10857: DOUBLE
10858: EQUAL
10859: IFTRUE 10863
10861: GO 10873
10863: POP
// RaiseSailEvent ( ERussianBaseE ) ; end ;
10864: LD_INT 104
10866: PPUSH
10867: CALL_OW 427
10871: GO 10874
10873: POP
// if Difficulty < 4 then
10874: LD_OWVAR 67
10878: PUSH
10879: LD_INT 4
10881: LESS
10882: IFFALSE 10886
// exit ;
10884: GO 10972
// RevealFogArea ( 1 , ruSpawnWestArea ) ;
10886: LD_INT 1
10888: PPUSH
10889: LD_INT 22
10891: PPUSH
10892: CALL_OW 332
// for i in ruForces2 union ruCommander2 do
10896: LD_ADDR_VAR 0 2
10900: PUSH
10901: LD_EXP 60
10905: PUSH
10906: LD_EXP 62
10910: UNION
10911: PUSH
10912: FOR_IN
10913: IFFALSE 10963
// begin repeat wait ( 0 0$1 ) ;
10915: LD_INT 35
10917: PPUSH
10918: CALL_OW 67
// until PlaceUnitArea ( i , ruSpawnWestArea , false ) ;
10922: LD_VAR 0 2
10926: PPUSH
10927: LD_INT 22
10929: PPUSH
10930: LD_INT 0
10932: PPUSH
10933: CALL_OW 49
10937: IFFALSE 10915
// ComAgressiveMove ( i , 54 , 85 ) ;
10939: LD_VAR 0 2
10943: PPUSH
10944: LD_INT 54
10946: PPUSH
10947: LD_INT 85
10949: PPUSH
10950: CALL_OW 114
// wait ( 0 0$0.8 ) ;
10954: LD_INT 28
10956: PPUSH
10957: CALL_OW 67
// end ;
10961: GO 10912
10963: POP
10964: POP
// RaiseSailEvent ( ERussianBaseW2 ) ;
10965: LD_INT 105
10967: PPUSH
10968: CALL_OW 427
// end ;
10972: LD_VAR 0 1
10976: RET
// export function RussianBase ( group , option ) ; begin
10977: LD_INT 0
10979: PPUSH
// case option of 1 :
10980: LD_VAR 0 2
10984: PUSH
10985: LD_INT 1
10987: DOUBLE
10988: EQUAL
10989: IFTRUE 10993
10991: GO 11449
10993: POP
// begin ruBaseArea := ruBaseCenterArea ;
10994: LD_ADDR_EXP 66
10998: PUSH
10999: LD_INT 26
11001: ST_TO_ADDR
// ruCratesArea := ruBaseCenterArea ;
11002: LD_ADDR_EXP 72
11006: PUSH
11007: LD_INT 26
11009: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
11010: LD_ADDR_EXP 76
11014: PUSH
11015: LD_INT 0
11017: PUSH
11018: LD_INT 104
11020: PUSH
11021: LD_INT 110
11023: PUSH
11024: LD_INT 5
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: PUSH
11033: LD_INT 4
11035: PUSH
11036: LD_INT 98
11038: PUSH
11039: LD_INT 90
11041: PUSH
11042: LD_INT 3
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: PUSH
11051: LD_INT 29
11053: PUSH
11054: LD_INT 103
11056: PUSH
11057: LD_INT 114
11059: PUSH
11060: LD_INT 2
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: PUSH
11069: LD_INT 30
11071: PUSH
11072: LD_INT 99
11074: PUSH
11075: LD_INT 114
11077: PUSH
11078: LD_INT 3
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: PUSH
11087: LD_INT 28
11089: PUSH
11090: LD_INT 100
11092: PUSH
11093: LD_INT 112
11095: PUSH
11096: LD_INT 1
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: PUSH
11105: LD_INT 2
11107: PUSH
11108: LD_INT 92
11110: PUSH
11111: LD_INT 101
11113: PUSH
11114: LD_INT 0
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: PUSH
11123: LD_INT 26
11125: PUSH
11126: LD_INT 97
11128: PUSH
11129: LD_INT 116
11131: PUSH
11132: LD_INT 5
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: PUSH
11141: LD_INT 17
11143: PUSH
11144: LD_INT 96
11146: PUSH
11147: LD_INT 101
11149: PUSH
11150: LD_INT 4
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: PUSH
11159: LD_INT 18
11161: PUSH
11162: LD_INT 88
11164: PUSH
11165: LD_INT 97
11167: PUSH
11168: LD_INT 2
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: PUSH
11177: LD_INT 26
11179: PUSH
11180: LD_INT 106
11182: PUSH
11183: LD_INT 92
11185: PUSH
11186: LD_INT 2
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: PUSH
11195: LD_INT 6
11197: PUSH
11198: LD_INT 93
11200: PUSH
11201: LD_INT 110
11203: PUSH
11204: LD_INT 0
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: PUSH
11213: LD_INT 21
11215: PUSH
11216: LD_INT 89
11218: PUSH
11219: LD_INT 101
11221: PUSH
11222: LD_INT 1
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: PUSH
11231: LD_INT 16
11233: PUSH
11234: LD_INT 95
11236: PUSH
11237: LD_INT 104
11239: PUSH
11240: LD_INT 4
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: PUSH
11249: LD_INT 24
11251: PUSH
11252: LD_INT 92
11254: PUSH
11255: LD_INT 105
11257: PUSH
11258: LD_INT 0
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: PUSH
11267: LD_INT 33
11269: PUSH
11270: LD_INT 88
11272: PUSH
11273: LD_INT 89
11275: PUSH
11276: LD_INT 2
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 33
11287: PUSH
11288: LD_INT 86
11290: PUSH
11291: LD_INT 90
11293: PUSH
11294: LD_INT 2
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: PUSH
11303: LD_INT 33
11305: PUSH
11306: LD_INT 85
11308: PUSH
11309: LD_INT 99
11311: PUSH
11312: LD_INT 2
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: PUSH
11321: LD_INT 33
11323: PUSH
11324: LD_INT 85
11326: PUSH
11327: LD_INT 107
11329: PUSH
11330: LD_INT 1
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 33
11341: PUSH
11342: LD_INT 105
11344: PUSH
11345: LD_INT 99
11347: PUSH
11348: LD_INT 1
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: PUSH
11357: LD_INT 33
11359: PUSH
11360: LD_INT 102
11362: PUSH
11363: LD_INT 92
11365: PUSH
11366: LD_INT 3
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 33
11377: PUSH
11378: LD_INT 105
11380: PUSH
11381: LD_INT 92
11383: PUSH
11384: LD_INT 2
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: ST_TO_ADDR
// ruHealPoint := [ 98 , 107 ] ;
11416: LD_ADDR_EXP 74
11420: PUSH
11421: LD_INT 98
11423: PUSH
11424: LD_INT 107
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: ST_TO_ADDR
// ruParkingArea := ruParkingCenterArea ;
11431: LD_ADDR_EXP 82
11435: PUSH
11436: LD_INT 30
11438: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnCenterArea ;
11439: LD_ADDR_EXP 84
11443: PUSH
11444: LD_INT 36
11446: ST_TO_ADDR
// end ; 2 :
11447: GO 12473
11449: LD_INT 2
11451: DOUBLE
11452: EQUAL
11453: IFTRUE 11457
11455: GO 11951
11457: POP
// begin ruBaseArea := ruBaseWestArea ;
11458: LD_ADDR_EXP 66
11462: PUSH
11463: LD_INT 28
11465: ST_TO_ADDR
// ruCratesArea := ruBaseWestArea ;
11466: LD_ADDR_EXP 72
11470: PUSH
11471: LD_INT 28
11473: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
11474: LD_ADDR_EXP 76
11478: PUSH
11479: LD_INT 0
11481: PUSH
11482: LD_INT 49
11484: PUSH
11485: LD_INT 74
11487: PUSH
11488: LD_INT 3
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: PUSH
11497: LD_INT 4
11499: PUSH
11500: LD_INT 73
11502: PUSH
11503: LD_INT 88
11505: PUSH
11506: LD_INT 5
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: PUSH
11515: LD_INT 4
11517: PUSH
11518: LD_INT 56
11520: PUSH
11521: LD_INT 62
11523: PUSH
11524: LD_INT 3
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: PUSH
11533: LD_INT 29
11535: PUSH
11536: LD_INT 43
11538: PUSH
11539: LD_INT 68
11541: PUSH
11542: LD_INT 2
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: PUSH
11551: LD_INT 30
11553: PUSH
11554: LD_INT 43
11556: PUSH
11557: LD_INT 79
11559: PUSH
11560: LD_INT 5
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 28
11571: PUSH
11572: LD_INT 60
11574: PUSH
11575: LD_INT 75
11577: PUSH
11578: LD_INT 1
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: PUSH
11587: LD_INT 2
11589: PUSH
11590: LD_INT 50
11592: PUSH
11593: LD_INT 87
11595: PUSH
11596: LD_INT 1
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: PUSH
11605: LD_INT 26
11607: PUSH
11608: LD_INT 45
11610: PUSH
11611: LD_INT 67
11613: PUSH
11614: LD_INT 2
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: PUSH
11623: LD_INT 17
11625: PUSH
11626: LD_INT 47
11628: PUSH
11629: LD_INT 84
11631: PUSH
11632: LD_INT 2
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: PUSH
11641: LD_INT 18
11643: PUSH
11644: LD_INT 46
11646: PUSH
11647: LD_INT 87
11649: PUSH
11650: LD_INT 1
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: PUSH
11659: LD_INT 26
11661: PUSH
11662: LD_INT 41
11664: PUSH
11665: LD_INT 64
11667: PUSH
11668: LD_INT 5
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: PUSH
11677: LD_INT 6
11679: PUSH
11680: LD_INT 42
11682: PUSH
11683: LD_INT 74
11685: PUSH
11686: LD_INT 1
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: PUSH
11695: LD_INT 21
11697: PUSH
11698: LD_INT 54
11700: PUSH
11701: LD_INT 91
11703: PUSH
11704: LD_INT 5
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 16
11715: PUSH
11716: LD_INT 50
11718: PUSH
11719: LD_INT 83
11721: PUSH
11722: LD_INT 3
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: PUSH
11731: LD_INT 24
11733: PUSH
11734: LD_INT 50
11736: PUSH
11737: LD_INT 90
11739: PUSH
11740: LD_INT 0
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: PUSH
11749: LD_INT 33
11751: PUSH
11752: LD_INT 51
11754: PUSH
11755: LD_INT 61
11757: PUSH
11758: LD_INT 3
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: PUSH
11767: LD_INT 33
11769: PUSH
11770: LD_INT 42
11772: PUSH
11773: LD_INT 60
11775: PUSH
11776: LD_INT 3
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 33
11787: PUSH
11788: LD_INT 36
11790: PUSH
11791: LD_INT 58
11793: PUSH
11794: LD_INT 3
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: PUSH
11803: LD_INT 33
11805: PUSH
11806: LD_INT 39
11808: PUSH
11809: LD_INT 59
11811: PUSH
11812: LD_INT 3
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 33
11823: PUSH
11824: LD_INT 61
11826: PUSH
11827: LD_INT 64
11829: PUSH
11830: LD_INT 3
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: PUSH
11839: LD_INT 33
11841: PUSH
11842: LD_INT 63
11844: PUSH
11845: LD_INT 90
11847: PUSH
11848: LD_INT 5
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: PUSH
11857: LD_INT 33
11859: PUSH
11860: LD_INT 64
11862: PUSH
11863: LD_INT 88
11865: PUSH
11866: LD_INT 5
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: PUSH
11875: LD_INT 33
11877: PUSH
11878: LD_INT 72
11880: PUSH
11881: LD_INT 82
11883: PUSH
11884: LD_INT 5
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
11918: LD_ADDR_EXP 74
11922: PUSH
11923: LD_INT 45
11925: PUSH
11926: LD_INT 75
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: ST_TO_ADDR
// ruParkingArea := ruParkingWestArea ;
11933: LD_ADDR_EXP 82
11937: PUSH
11938: LD_INT 31
11940: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnWestArea ;
11941: LD_ADDR_EXP 84
11945: PUSH
11946: LD_INT 37
11948: ST_TO_ADDR
// end ; 3 :
11949: GO 12473
11951: LD_INT 3
11953: DOUBLE
11954: EQUAL
11955: IFTRUE 11959
11957: GO 12472
11959: POP
// begin ruBaseArea := ruBaseEastArea ;
11960: LD_ADDR_EXP 66
11964: PUSH
11965: LD_INT 27
11967: ST_TO_ADDR
// ruCratesArea := ruBaseEastArea ;
11968: LD_ADDR_EXP 72
11972: PUSH
11973: LD_INT 27
11975: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] , [ b_turret , 158 , 65 , 3 ] , [ b_turret , 144 , 53 , 2 ] , [ b_turret , 150 , 81 , 1 ] ] ;
11976: LD_ADDR_EXP 76
11980: PUSH
11981: LD_INT 0
11983: PUSH
11984: LD_INT 152
11986: PUSH
11987: LD_INT 72
11989: PUSH
11990: LD_INT 4
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 4
12001: PUSH
12002: LD_INT 139
12004: PUSH
12005: LD_INT 69
12007: PUSH
12008: LD_INT 1
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: PUSH
12017: LD_INT 4
12019: PUSH
12020: LD_INT 142
12022: PUSH
12023: LD_INT 56
12025: PUSH
12026: LD_INT 2
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: PUSH
12035: LD_INT 29
12037: PUSH
12038: LD_INT 152
12040: PUSH
12041: LD_INT 85
12043: PUSH
12044: LD_INT 3
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 30
12055: PUSH
12056: LD_INT 156
12058: PUSH
12059: LD_INT 92
12061: PUSH
12062: LD_INT 3
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 28
12073: PUSH
12074: LD_INT 157
12076: PUSH
12077: LD_INT 96
12079: PUSH
12080: LD_INT 4
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: PUSH
12089: LD_INT 2
12091: PUSH
12092: LD_INT 161
12094: PUSH
12095: LD_INT 74
12097: PUSH
12098: LD_INT 5
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: PUSH
12107: LD_INT 21
12109: PUSH
12110: LD_INT 157
12112: PUSH
12113: LD_INT 74
12115: PUSH
12116: LD_INT 1
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: PUSH
12125: LD_INT 16
12127: PUSH
12128: LD_INT 161
12130: PUSH
12131: LD_INT 77
12133: PUSH
12134: LD_INT 0
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: PUSH
12143: LD_INT 24
12145: PUSH
12146: LD_INT 165
12148: PUSH
12149: LD_INT 78
12151: PUSH
12152: LD_INT 5
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: PUSH
12161: LD_INT 17
12163: PUSH
12164: LD_INT 164
12166: PUSH
12167: LD_INT 74
12169: PUSH
12170: LD_INT 4
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: PUSH
12179: LD_INT 6
12181: PUSH
12182: LD_INT 164
12184: PUSH
12185: LD_INT 95
12187: PUSH
12188: LD_INT 5
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: PUSH
12197: LD_INT 18
12199: PUSH
12200: LD_INT 161
12202: PUSH
12203: LD_INT 70
12205: PUSH
12206: LD_INT 3
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: PUSH
12215: LD_INT 26
12217: PUSH
12218: LD_INT 155
12220: PUSH
12221: LD_INT 87
12223: PUSH
12224: LD_INT 0
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 26
12235: PUSH
12236: LD_INT 159
12238: PUSH
12239: LD_INT 95
12241: PUSH
12242: LD_INT 3
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: PUSH
12251: LD_INT 26
12253: PUSH
12254: LD_INT 167
12256: PUSH
12257: LD_INT 98
12259: PUSH
12260: LD_INT 1
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: PUSH
12269: LD_INT 33
12271: PUSH
12272: LD_INT 152
12274: PUSH
12275: LD_INT 89
12277: PUSH
12278: LD_INT 1
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: PUSH
12287: LD_INT 33
12289: PUSH
12290: LD_INT 134
12292: PUSH
12293: LD_INT 61
12295: PUSH
12296: LD_INT 2
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: PUSH
12305: LD_INT 33
12307: PUSH
12308: LD_INT 156
12310: PUSH
12311: LD_INT 62
12313: PUSH
12314: LD_INT 3
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: PUSH
12323: LD_INT 33
12325: PUSH
12326: LD_INT 171
12328: PUSH
12329: LD_INT 97
12331: PUSH
12332: LD_INT 5
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 33
12343: PUSH
12344: LD_INT 169
12346: PUSH
12347: LD_INT 103
12349: PUSH
12350: LD_INT 5
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: PUSH
12359: LD_INT 33
12361: PUSH
12362: LD_INT 158
12364: PUSH
12365: LD_INT 65
12367: PUSH
12368: LD_INT 3
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 33
12379: PUSH
12380: LD_INT 144
12382: PUSH
12383: LD_INT 53
12385: PUSH
12386: LD_INT 2
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: PUSH
12395: LD_INT 33
12397: PUSH
12398: LD_INT 150
12400: PUSH
12401: LD_INT 81
12403: PUSH
12404: LD_INT 1
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: ST_TO_ADDR
// ruHealPoint := [ 145 , 71 ] ;
12439: LD_ADDR_EXP 74
12443: PUSH
12444: LD_INT 145
12446: PUSH
12447: LD_INT 71
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: ST_TO_ADDR
// ruParkingArea := ruParkingEastArea ;
12454: LD_ADDR_EXP 82
12458: PUSH
12459: LD_INT 29
12461: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnEastArea ;
12462: LD_ADDR_EXP 84
12466: PUSH
12467: LD_INT 35
12469: ST_TO_ADDR
// end ; end ;
12470: GO 12473
12472: POP
// ruScriptActive := true ;
12473: LD_ADDR_EXP 14
12477: PUSH
12478: LD_INT 1
12480: ST_TO_ADDR
// end ;
12481: LD_VAR 0 3
12485: RET
// export function RussianBase2 ( group , option ) ; begin
12486: LD_INT 0
12488: PPUSH
// case option of 1 :
12489: LD_VAR 0 2
12493: PUSH
12494: LD_INT 1
12496: DOUBLE
12497: EQUAL
12498: IFTRUE 12502
12500: GO 12958
12502: POP
// begin ruBaseArea2 := ruBaseCenterArea ;
12503: LD_ADDR_EXP 67
12507: PUSH
12508: LD_INT 26
12510: ST_TO_ADDR
// ruCratesArea2 := ruBaseCenterArea ;
12511: LD_ADDR_EXP 73
12515: PUSH
12516: LD_INT 26
12518: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
12519: LD_ADDR_EXP 77
12523: PUSH
12524: LD_INT 0
12526: PUSH
12527: LD_INT 104
12529: PUSH
12530: LD_INT 110
12532: PUSH
12533: LD_INT 5
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: PUSH
12542: LD_INT 4
12544: PUSH
12545: LD_INT 98
12547: PUSH
12548: LD_INT 90
12550: PUSH
12551: LD_INT 3
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 29
12562: PUSH
12563: LD_INT 103
12565: PUSH
12566: LD_INT 114
12568: PUSH
12569: LD_INT 2
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: PUSH
12578: LD_INT 30
12580: PUSH
12581: LD_INT 99
12583: PUSH
12584: LD_INT 114
12586: PUSH
12587: LD_INT 3
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: PUSH
12596: LD_INT 28
12598: PUSH
12599: LD_INT 100
12601: PUSH
12602: LD_INT 112
12604: PUSH
12605: LD_INT 1
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: PUSH
12614: LD_INT 2
12616: PUSH
12617: LD_INT 92
12619: PUSH
12620: LD_INT 101
12622: PUSH
12623: LD_INT 0
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: PUSH
12632: LD_INT 26
12634: PUSH
12635: LD_INT 97
12637: PUSH
12638: LD_INT 116
12640: PUSH
12641: LD_INT 5
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 17
12652: PUSH
12653: LD_INT 96
12655: PUSH
12656: LD_INT 101
12658: PUSH
12659: LD_INT 4
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: PUSH
12668: LD_INT 18
12670: PUSH
12671: LD_INT 88
12673: PUSH
12674: LD_INT 97
12676: PUSH
12677: LD_INT 2
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: PUSH
12686: LD_INT 26
12688: PUSH
12689: LD_INT 106
12691: PUSH
12692: LD_INT 92
12694: PUSH
12695: LD_INT 2
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: PUSH
12704: LD_INT 6
12706: PUSH
12707: LD_INT 93
12709: PUSH
12710: LD_INT 110
12712: PUSH
12713: LD_INT 0
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: PUSH
12722: LD_INT 21
12724: PUSH
12725: LD_INT 89
12727: PUSH
12728: LD_INT 101
12730: PUSH
12731: LD_INT 1
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: PUSH
12740: LD_INT 16
12742: PUSH
12743: LD_INT 95
12745: PUSH
12746: LD_INT 104
12748: PUSH
12749: LD_INT 4
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: PUSH
12758: LD_INT 24
12760: PUSH
12761: LD_INT 92
12763: PUSH
12764: LD_INT 105
12766: PUSH
12767: LD_INT 0
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: PUSH
12776: LD_INT 33
12778: PUSH
12779: LD_INT 88
12781: PUSH
12782: LD_INT 89
12784: PUSH
12785: LD_INT 2
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: PUSH
12794: LD_INT 33
12796: PUSH
12797: LD_INT 86
12799: PUSH
12800: LD_INT 90
12802: PUSH
12803: LD_INT 2
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: PUSH
12812: LD_INT 33
12814: PUSH
12815: LD_INT 85
12817: PUSH
12818: LD_INT 99
12820: PUSH
12821: LD_INT 2
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: PUSH
12830: LD_INT 33
12832: PUSH
12833: LD_INT 85
12835: PUSH
12836: LD_INT 107
12838: PUSH
12839: LD_INT 1
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: PUSH
12848: LD_INT 33
12850: PUSH
12851: LD_INT 105
12853: PUSH
12854: LD_INT 99
12856: PUSH
12857: LD_INT 1
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 33
12868: PUSH
12869: LD_INT 102
12871: PUSH
12872: LD_INT 92
12874: PUSH
12875: LD_INT 3
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: PUSH
12884: LD_INT 33
12886: PUSH
12887: LD_INT 105
12889: PUSH
12890: LD_INT 92
12892: PUSH
12893: LD_INT 2
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: ST_TO_ADDR
// ruHealPoint2 := [ 98 , 107 ] ;
12925: LD_ADDR_EXP 75
12929: PUSH
12930: LD_INT 98
12932: PUSH
12933: LD_INT 107
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: ST_TO_ADDR
// ruParkingArea2 := ruParkingCenterArea ;
12940: LD_ADDR_EXP 83
12944: PUSH
12945: LD_INT 30
12947: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnCenterArea ;
12948: LD_ADDR_EXP 85
12952: PUSH
12953: LD_INT 36
12955: ST_TO_ADDR
// end ; 2 :
12956: GO 13925
12958: LD_INT 2
12960: DOUBLE
12961: EQUAL
12962: IFTRUE 12966
12964: GO 13460
12966: POP
// begin ruBaseArea2 := ruBaseWestArea ;
12967: LD_ADDR_EXP 67
12971: PUSH
12972: LD_INT 28
12974: ST_TO_ADDR
// ruCratesArea2 := ruBaseWestArea ;
12975: LD_ADDR_EXP 73
12979: PUSH
12980: LD_INT 28
12982: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
12983: LD_ADDR_EXP 77
12987: PUSH
12988: LD_INT 0
12990: PUSH
12991: LD_INT 49
12993: PUSH
12994: LD_INT 74
12996: PUSH
12997: LD_INT 3
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: PUSH
13006: LD_INT 4
13008: PUSH
13009: LD_INT 73
13011: PUSH
13012: LD_INT 88
13014: PUSH
13015: LD_INT 5
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: PUSH
13024: LD_INT 4
13026: PUSH
13027: LD_INT 56
13029: PUSH
13030: LD_INT 62
13032: PUSH
13033: LD_INT 3
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: PUSH
13042: LD_INT 29
13044: PUSH
13045: LD_INT 43
13047: PUSH
13048: LD_INT 68
13050: PUSH
13051: LD_INT 2
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 30
13062: PUSH
13063: LD_INT 43
13065: PUSH
13066: LD_INT 79
13068: PUSH
13069: LD_INT 5
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: PUSH
13078: LD_INT 28
13080: PUSH
13081: LD_INT 60
13083: PUSH
13084: LD_INT 75
13086: PUSH
13087: LD_INT 1
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: PUSH
13096: LD_INT 2
13098: PUSH
13099: LD_INT 50
13101: PUSH
13102: LD_INT 87
13104: PUSH
13105: LD_INT 1
13107: PUSH
13108: EMPTY
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: PUSH
13114: LD_INT 26
13116: PUSH
13117: LD_INT 45
13119: PUSH
13120: LD_INT 67
13122: PUSH
13123: LD_INT 2
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: PUSH
13132: LD_INT 17
13134: PUSH
13135: LD_INT 47
13137: PUSH
13138: LD_INT 84
13140: PUSH
13141: LD_INT 2
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: PUSH
13150: LD_INT 18
13152: PUSH
13153: LD_INT 46
13155: PUSH
13156: LD_INT 87
13158: PUSH
13159: LD_INT 1
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: PUSH
13168: LD_INT 26
13170: PUSH
13171: LD_INT 41
13173: PUSH
13174: LD_INT 64
13176: PUSH
13177: LD_INT 5
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: PUSH
13186: LD_INT 6
13188: PUSH
13189: LD_INT 42
13191: PUSH
13192: LD_INT 74
13194: PUSH
13195: LD_INT 1
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: PUSH
13204: LD_INT 21
13206: PUSH
13207: LD_INT 54
13209: PUSH
13210: LD_INT 91
13212: PUSH
13213: LD_INT 5
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: PUSH
13222: LD_INT 16
13224: PUSH
13225: LD_INT 50
13227: PUSH
13228: LD_INT 83
13230: PUSH
13231: LD_INT 3
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: PUSH
13240: LD_INT 24
13242: PUSH
13243: LD_INT 50
13245: PUSH
13246: LD_INT 90
13248: PUSH
13249: LD_INT 0
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: PUSH
13258: LD_INT 33
13260: PUSH
13261: LD_INT 51
13263: PUSH
13264: LD_INT 61
13266: PUSH
13267: LD_INT 3
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: PUSH
13276: LD_INT 33
13278: PUSH
13279: LD_INT 42
13281: PUSH
13282: LD_INT 60
13284: PUSH
13285: LD_INT 3
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: PUSH
13294: LD_INT 33
13296: PUSH
13297: LD_INT 36
13299: PUSH
13300: LD_INT 58
13302: PUSH
13303: LD_INT 3
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: PUSH
13312: LD_INT 33
13314: PUSH
13315: LD_INT 39
13317: PUSH
13318: LD_INT 59
13320: PUSH
13321: LD_INT 3
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: PUSH
13330: LD_INT 33
13332: PUSH
13333: LD_INT 61
13335: PUSH
13336: LD_INT 64
13338: PUSH
13339: LD_INT 3
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: PUSH
13348: LD_INT 33
13350: PUSH
13351: LD_INT 63
13353: PUSH
13354: LD_INT 90
13356: PUSH
13357: LD_INT 5
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 33
13368: PUSH
13369: LD_INT 64
13371: PUSH
13372: LD_INT 88
13374: PUSH
13375: LD_INT 5
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: PUSH
13384: LD_INT 33
13386: PUSH
13387: LD_INT 72
13389: PUSH
13390: LD_INT 82
13392: PUSH
13393: LD_INT 5
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
13427: LD_ADDR_EXP 74
13431: PUSH
13432: LD_INT 45
13434: PUSH
13435: LD_INT 75
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: ST_TO_ADDR
// ruParkingArea2 := ruParkingWestArea ;
13442: LD_ADDR_EXP 83
13446: PUSH
13447: LD_INT 31
13449: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnWestArea ;
13450: LD_ADDR_EXP 85
13454: PUSH
13455: LD_INT 37
13457: ST_TO_ADDR
// end ; 3 :
13458: GO 13925
13460: LD_INT 3
13462: DOUBLE
13463: EQUAL
13464: IFTRUE 13468
13466: GO 13924
13468: POP
// begin ruBaseArea2 := ruBaseEastArea ;
13469: LD_ADDR_EXP 67
13473: PUSH
13474: LD_INT 27
13476: ST_TO_ADDR
// ruCratesArea2 := ruBaseEastArea ;
13477: LD_ADDR_EXP 73
13481: PUSH
13482: LD_INT 27
13484: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] ] ;
13485: LD_ADDR_EXP 77
13489: PUSH
13490: LD_INT 0
13492: PUSH
13493: LD_INT 152
13495: PUSH
13496: LD_INT 72
13498: PUSH
13499: LD_INT 4
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: PUSH
13508: LD_INT 4
13510: PUSH
13511: LD_INT 139
13513: PUSH
13514: LD_INT 69
13516: PUSH
13517: LD_INT 1
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: PUSH
13526: LD_INT 4
13528: PUSH
13529: LD_INT 142
13531: PUSH
13532: LD_INT 56
13534: PUSH
13535: LD_INT 2
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: PUSH
13544: LD_INT 29
13546: PUSH
13547: LD_INT 152
13549: PUSH
13550: LD_INT 85
13552: PUSH
13553: LD_INT 3
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: PUSH
13562: LD_INT 30
13564: PUSH
13565: LD_INT 156
13567: PUSH
13568: LD_INT 92
13570: PUSH
13571: LD_INT 3
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 28
13582: PUSH
13583: LD_INT 157
13585: PUSH
13586: LD_INT 96
13588: PUSH
13589: LD_INT 4
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 2
13600: PUSH
13601: LD_INT 161
13603: PUSH
13604: LD_INT 74
13606: PUSH
13607: LD_INT 5
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: PUSH
13616: LD_INT 21
13618: PUSH
13619: LD_INT 157
13621: PUSH
13622: LD_INT 74
13624: PUSH
13625: LD_INT 1
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 16
13636: PUSH
13637: LD_INT 161
13639: PUSH
13640: LD_INT 77
13642: PUSH
13643: LD_INT 0
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: PUSH
13652: LD_INT 24
13654: PUSH
13655: LD_INT 165
13657: PUSH
13658: LD_INT 78
13660: PUSH
13661: LD_INT 5
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: PUSH
13670: LD_INT 17
13672: PUSH
13673: LD_INT 164
13675: PUSH
13676: LD_INT 74
13678: PUSH
13679: LD_INT 4
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: PUSH
13688: LD_INT 6
13690: PUSH
13691: LD_INT 164
13693: PUSH
13694: LD_INT 95
13696: PUSH
13697: LD_INT 5
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: PUSH
13706: LD_INT 18
13708: PUSH
13709: LD_INT 161
13711: PUSH
13712: LD_INT 70
13714: PUSH
13715: LD_INT 3
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: PUSH
13724: LD_INT 26
13726: PUSH
13727: LD_INT 155
13729: PUSH
13730: LD_INT 87
13732: PUSH
13733: LD_INT 0
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: PUSH
13742: LD_INT 26
13744: PUSH
13745: LD_INT 159
13747: PUSH
13748: LD_INT 95
13750: PUSH
13751: LD_INT 3
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: PUSH
13760: LD_INT 26
13762: PUSH
13763: LD_INT 167
13765: PUSH
13766: LD_INT 98
13768: PUSH
13769: LD_INT 1
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: PUSH
13778: LD_INT 33
13780: PUSH
13781: LD_INT 152
13783: PUSH
13784: LD_INT 89
13786: PUSH
13787: LD_INT 1
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: PUSH
13796: LD_INT 33
13798: PUSH
13799: LD_INT 134
13801: PUSH
13802: LD_INT 61
13804: PUSH
13805: LD_INT 2
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: PUSH
13814: LD_INT 33
13816: PUSH
13817: LD_INT 156
13819: PUSH
13820: LD_INT 62
13822: PUSH
13823: LD_INT 3
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: PUSH
13832: LD_INT 33
13834: PUSH
13835: LD_INT 171
13837: PUSH
13838: LD_INT 97
13840: PUSH
13841: LD_INT 5
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: PUSH
13850: LD_INT 33
13852: PUSH
13853: LD_INT 169
13855: PUSH
13856: LD_INT 103
13858: PUSH
13859: LD_INT 5
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: ST_TO_ADDR
// ruHealPoint2 := [ 145 , 71 ] ;
13891: LD_ADDR_EXP 75
13895: PUSH
13896: LD_INT 145
13898: PUSH
13899: LD_INT 71
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: ST_TO_ADDR
// ruParkingArea2 := ruParkingEastArea ;
13906: LD_ADDR_EXP 83
13910: PUSH
13911: LD_INT 29
13913: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnEastArea ;
13914: LD_ADDR_EXP 85
13918: PUSH
13919: LD_INT 35
13921: ST_TO_ADDR
// end ; end ;
13922: GO 13925
13924: POP
// ruScriptActive2 := true ;
13925: LD_ADDR_EXP 15
13929: PUSH
13930: LD_INT 1
13932: ST_TO_ADDR
// end ;
13933: LD_VAR 0 3
13937: RET
// every 0 0$2 trigger ruScriptActive and Count ( ruForces ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
13938: LD_EXP 14
13942: IFFALSE 13955
13944: PUSH
13945: LD_EXP 59
13949: PPUSH
13950: CALL 57905 0 1
13954: AND
13955: IFFALSE 16559
13957: GO 13959
13959: DISABLE
13960: LD_INT 0
13962: PPUSH
13963: PPUSH
13964: PPUSH
13965: PPUSH
13966: PPUSH
13967: PPUSH
13968: PPUSH
13969: PPUSH
13970: PPUSH
13971: PPUSH
13972: PPUSH
13973: PPUSH
13974: PPUSH
13975: PPUSH
13976: PPUSH
13977: PPUSH
// begin enable ;
13978: ENABLE
// if ruTech then
13979: LD_EXP 65
13983: IFFALSE 14137
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
13985: LD_ADDR_VAR 0 4
13989: PUSH
13990: LD_INT 22
13992: PUSH
13993: LD_INT 3
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: PUSH
14000: LD_INT 50
14002: PUSH
14003: EMPTY
14004: LIST
14005: PUSH
14006: LD_INT 2
14008: PUSH
14009: LD_INT 30
14011: PUSH
14012: LD_INT 6
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: LD_INT 30
14021: PUSH
14022: LD_INT 7
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 30
14031: PUSH
14032: LD_INT 8
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: LIST
14049: PPUSH
14050: CALL_OW 69
14054: ST_TO_ADDR
// if lab then
14055: LD_VAR 0 4
14059: IFFALSE 14137
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
14061: LD_VAR 0 4
14065: PUSH
14066: LD_INT 1
14068: ARRAY
14069: PPUSH
14070: CALL_OW 461
14074: PUSH
14075: LD_INT 2
14077: EQUAL
14078: IFFALSE 14137
// begin for i in ruTech do
14080: LD_ADDR_VAR 0 1
14084: PUSH
14085: LD_EXP 65
14089: PUSH
14090: FOR_IN
14091: IFFALSE 14135
// if CanBeResearched ( lab [ 1 ] , i ) then
14093: LD_VAR 0 4
14097: PUSH
14098: LD_INT 1
14100: ARRAY
14101: PPUSH
14102: LD_VAR 0 1
14106: PPUSH
14107: CALL_OW 430
14111: IFFALSE 14133
// begin ComResearch ( lab [ 1 ] , i ) ;
14113: LD_VAR 0 4
14117: PUSH
14118: LD_INT 1
14120: ARRAY
14121: PPUSH
14122: LD_VAR 0 1
14126: PPUSH
14127: CALL_OW 124
// break ;
14131: GO 14135
// end ;
14133: GO 14090
14135: POP
14136: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
14137: LD_ADDR_VAR 0 14
14141: PUSH
14142: LD_EXP 66
14146: PPUSH
14147: LD_INT 22
14149: PUSH
14150: LD_INT 3
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PUSH
14157: LD_INT 30
14159: PUSH
14160: LD_INT 3
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PUSH
14167: LD_INT 50
14169: PUSH
14170: EMPTY
14171: LIST
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: LIST
14177: PPUSH
14178: CALL_OW 70
14182: ST_TO_ADDR
// if fac then
14183: LD_VAR 0 14
14187: IFFALSE 14784
// begin if UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
14189: LD_EXP 63
14193: PPUSH
14194: LD_INT 3
14196: PUSH
14197: LD_INT 60
14199: PUSH
14200: EMPTY
14201: LIST
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: LD_INT 3
14209: PUSH
14210: LD_INT 25
14212: PUSH
14213: LD_INT 3
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PPUSH
14228: CALL_OW 72
14232: IFFALSE 14375
// begin for i in UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
14234: LD_ADDR_VAR 0 1
14238: PUSH
14239: LD_EXP 63
14243: PPUSH
14244: LD_INT 3
14246: PUSH
14247: LD_INT 60
14249: PUSH
14250: EMPTY
14251: LIST
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: LD_INT 3
14259: PUSH
14260: LD_INT 25
14262: PUSH
14263: LD_INT 3
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PPUSH
14278: CALL_OW 72
14282: PUSH
14283: FOR_IN
14284: IFFALSE 14373
// begin SetTag ( i , tMech ) ;
14286: LD_VAR 0 1
14290: PPUSH
14291: LD_INT 7
14293: PPUSH
14294: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
14298: LD_VAR 0 1
14302: PPUSH
14303: CALL_OW 310
14307: IFFALSE 14330
14309: PUSH
14310: LD_VAR 0 1
14314: PPUSH
14315: CALL_OW 310
14319: PUSH
14320: LD_VAR 0 14
14324: PUSH
14325: LD_INT 1
14327: ARRAY
14328: NONEQUAL
14329: AND
14330: IFFALSE 14341
// ComExitBuilding ( i ) ;
14332: LD_VAR 0 1
14336: PPUSH
14337: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
14341: LD_VAR 0 1
14345: PPUSH
14346: LD_VAR 0 14
14350: PUSH
14351: LD_INT 1
14353: ARRAY
14354: PPUSH
14355: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
14359: LD_VAR 0 1
14363: PPUSH
14364: LD_INT 3
14366: PPUSH
14367: CALL_OW 183
// end ;
14371: GO 14283
14373: POP
14374: POP
// end ; if UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
14375: LD_EXP 63
14379: PPUSH
14380: LD_INT 25
14382: PUSH
14383: LD_INT 3
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: LD_INT 3
14392: PUSH
14393: LD_INT 54
14395: PUSH
14396: EMPTY
14397: LIST
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PUSH
14403: LD_INT 120
14405: PUSH
14406: LD_INT 7
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: PUSH
14413: LD_INT 50
14415: PUSH
14416: EMPTY
14417: LIST
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: PPUSH
14425: CALL_OW 72
14429: IFFALSE 14516
// begin for i in UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
14431: LD_ADDR_VAR 0 1
14435: PUSH
14436: LD_EXP 63
14440: PPUSH
14441: LD_INT 25
14443: PUSH
14444: LD_INT 3
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 3
14453: PUSH
14454: LD_INT 54
14456: PUSH
14457: EMPTY
14458: LIST
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: LD_INT 120
14466: PUSH
14467: LD_INT 7
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: LD_INT 50
14476: PUSH
14477: EMPTY
14478: LIST
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: PPUSH
14486: CALL_OW 72
14490: PUSH
14491: FOR_IN
14492: IFFALSE 14514
// ComEnterUnit ( i , fac [ 1 ] ) ;
14494: LD_VAR 0 1
14498: PPUSH
14499: LD_VAR 0 14
14503: PUSH
14504: LD_INT 1
14506: ARRAY
14507: PPUSH
14508: CALL_OW 120
14512: GO 14491
14514: POP
14515: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
14516: LD_VAR 0 14
14520: PUSH
14521: LD_INT 1
14523: ARRAY
14524: PPUSH
14525: CALL_OW 461
14529: PUSH
14530: LD_INT 2
14532: EQUAL
14533: IFFALSE 14784
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
14535: LD_ADDR_VAR 0 15
14539: PUSH
14540: LD_EXP 66
14544: PPUSH
14545: LD_INT 2
14547: PUSH
14548: LD_INT 30
14550: PUSH
14551: LD_INT 32
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: PUSH
14558: LD_INT 30
14560: PUSH
14561: LD_INT 33
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: LIST
14572: PUSH
14573: LD_INT 35
14575: PUSH
14576: LD_INT 0
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: PPUSH
14587: CALL_OW 70
14591: ST_TO_ADDR
// if emptyTowers then
14592: LD_VAR 0 15
14596: IFFALSE 14646
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea ) ;
14598: LD_ADDR_VAR 0 16
14602: PUSH
14603: LD_VAR 0 15
14607: PUSH
14608: LD_INT 1
14610: ARRAY
14611: PPUSH
14612: LD_EXP 66
14616: PPUSH
14617: CALL 66196 0 2
14621: ST_TO_ADDR
// if weapon then
14622: LD_VAR 0 16
14626: IFFALSE 14646
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
14628: LD_VAR 0 15
14632: PUSH
14633: LD_INT 1
14635: ARRAY
14636: PPUSH
14637: LD_VAR 0 16
14641: PPUSH
14642: CALL_OW 148
// end ; if ruConstructList then
14646: LD_EXP 70
14650: IFFALSE 14784
// if CanBeConstructed ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) then
14652: LD_VAR 0 14
14656: PUSH
14657: LD_INT 1
14659: ARRAY
14660: PPUSH
14661: LD_EXP 70
14665: PUSH
14666: LD_INT 1
14668: ARRAY
14669: PUSH
14670: LD_INT 1
14672: ARRAY
14673: PPUSH
14674: LD_EXP 70
14678: PUSH
14679: LD_INT 1
14681: ARRAY
14682: PUSH
14683: LD_INT 2
14685: ARRAY
14686: PPUSH
14687: LD_EXP 70
14691: PUSH
14692: LD_INT 1
14694: ARRAY
14695: PUSH
14696: LD_INT 3
14698: ARRAY
14699: PPUSH
14700: LD_EXP 70
14704: PUSH
14705: LD_INT 1
14707: ARRAY
14708: PUSH
14709: LD_INT 4
14711: ARRAY
14712: PPUSH
14713: CALL_OW 448
14717: IFFALSE 14784
// ComConstruct ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) ;
14719: LD_VAR 0 14
14723: PUSH
14724: LD_INT 1
14726: ARRAY
14727: PPUSH
14728: LD_EXP 70
14732: PUSH
14733: LD_INT 1
14735: ARRAY
14736: PUSH
14737: LD_INT 1
14739: ARRAY
14740: PPUSH
14741: LD_EXP 70
14745: PUSH
14746: LD_INT 1
14748: ARRAY
14749: PUSH
14750: LD_INT 2
14752: ARRAY
14753: PPUSH
14754: LD_EXP 70
14758: PUSH
14759: LD_INT 1
14761: ARRAY
14762: PUSH
14763: LD_INT 3
14765: ARRAY
14766: PPUSH
14767: LD_EXP 70
14771: PUSH
14772: LD_INT 1
14774: ARRAY
14775: PUSH
14776: LD_INT 4
14778: ARRAY
14779: PPUSH
14780: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14784: LD_ADDR_VAR 0 2
14788: PUSH
14789: LD_EXP 66
14793: PPUSH
14794: LD_INT 21
14796: PUSH
14797: LD_INT 3
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PUSH
14804: LD_INT 3
14806: PUSH
14807: LD_INT 57
14809: PUSH
14810: EMPTY
14811: LIST
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: LD_INT 3
14819: PUSH
14820: LD_INT 24
14822: PUSH
14823: LD_INT 1000
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: LIST
14838: PPUSH
14839: CALL_OW 70
14843: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea ) ;
14844: LD_ADDR_VAR 0 8
14848: PUSH
14849: LD_EXP 72
14853: PPUSH
14854: CALL_OW 435
14858: ST_TO_ADDR
// sci := UnitFilter ( ruForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
14859: LD_ADDR_VAR 0 9
14863: PUSH
14864: LD_EXP 59
14868: PPUSH
14869: LD_INT 25
14871: PUSH
14872: LD_INT 4
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 50
14881: PUSH
14882: EMPTY
14883: LIST
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PPUSH
14889: CALL_OW 72
14893: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
14894: LD_ADDR_VAR 0 4
14898: PUSH
14899: LD_EXP 66
14903: PPUSH
14904: LD_INT 2
14906: PUSH
14907: LD_INT 30
14909: PUSH
14910: LD_INT 6
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: LD_INT 30
14919: PUSH
14920: LD_INT 7
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PUSH
14927: LD_INT 30
14929: PUSH
14930: LD_INT 8
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: PPUSH
14943: CALL_OW 70
14947: ST_TO_ADDR
// if sci then
14948: LD_VAR 0 9
14952: IFFALSE 15113
// begin hurtUnits := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_tag , tHeal ] ] ) ;
14954: LD_ADDR_VAR 0 11
14958: PUSH
14959: LD_EXP 59
14963: PPUSH
14964: LD_INT 95
14966: PUSH
14967: LD_EXP 66
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PUSH
14976: LD_INT 120
14978: PUSH
14979: LD_INT 1
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PPUSH
14990: CALL_OW 72
14994: ST_TO_ADDR
// if hurtUnits then
14995: LD_VAR 0 11
14999: IFFALSE 15060
// begin for i in sci do
15001: LD_ADDR_VAR 0 1
15005: PUSH
15006: LD_VAR 0 9
15010: PUSH
15011: FOR_IN
15012: IFFALSE 15056
// if IsInUnit ( i ) then
15014: LD_VAR 0 1
15018: PPUSH
15019: CALL_OW 310
15023: IFFALSE 15036
// ComExitBuilding ( i ) else
15025: LD_VAR 0 1
15029: PPUSH
15030: CALL_OW 122
15034: GO 15054
// ComHeal ( i , hurtUnits [ 1 ] ) ;
15036: LD_VAR 0 1
15040: PPUSH
15041: LD_VAR 0 11
15045: PUSH
15046: LD_INT 1
15048: ARRAY
15049: PPUSH
15050: CALL_OW 128
15054: GO 15011
15056: POP
15057: POP
// end else
15058: GO 15113
// if lab then
15060: LD_VAR 0 4
15064: IFFALSE 15113
// begin for i in sci do
15066: LD_ADDR_VAR 0 1
15070: PUSH
15071: LD_VAR 0 9
15075: PUSH
15076: FOR_IN
15077: IFFALSE 15111
// if not IsInUnit ( i ) then
15079: LD_VAR 0 1
15083: PPUSH
15084: CALL_OW 310
15088: NOT
15089: IFFALSE 15109
// ComEnterUnit ( i , lab [ 1 ] ) ;
15091: LD_VAR 0 1
15095: PPUSH
15096: LD_VAR 0 4
15100: PUSH
15101: LD_INT 1
15103: ARRAY
15104: PPUSH
15105: CALL_OW 120
15109: GO 15076
15111: POP
15112: POP
// end ; end ; eng := UnitFilter ( ruForces , [ f_class , 2 ] ) ;
15113: LD_ADDR_VAR 0 5
15117: PUSH
15118: LD_EXP 59
15122: PPUSH
15123: LD_INT 25
15125: PUSH
15126: LD_INT 2
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PPUSH
15133: CALL_OW 72
15137: ST_TO_ADDR
// if eng then
15138: LD_VAR 0 5
15142: IFFALSE 15937
// begin for i in eng do
15144: LD_ADDR_VAR 0 1
15148: PUSH
15149: LD_VAR 0 5
15153: PUSH
15154: FOR_IN
15155: IFFALSE 15935
// begin tag := GetTag ( i ) ;
15157: LD_ADDR_VAR 0 6
15161: PUSH
15162: LD_VAR 0 1
15166: PPUSH
15167: CALL_OW 110
15171: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
15172: LD_VAR 0 1
15176: PPUSH
15177: CALL_OW 256
15181: PUSH
15182: LD_INT 800
15184: LESS
15185: IFFALSE 15197
15187: PUSH
15188: LD_VAR 0 6
15192: PUSH
15193: LD_INT 1
15195: NONEQUAL
15196: AND
15197: IFFALSE 15247
// begin SetTag ( i , tHeal ) ;
15199: LD_VAR 0 1
15203: PPUSH
15204: LD_INT 1
15206: PPUSH
15207: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
15211: LD_VAR 0 1
15215: PPUSH
15216: LD_EXP 74
15220: PUSH
15221: LD_INT 1
15223: ARRAY
15224: PPUSH
15225: LD_EXP 74
15229: PUSH
15230: LD_INT 2
15232: ARRAY
15233: PPUSH
15234: CALL_OW 111
// AddComHold ( i ) ;
15238: LD_VAR 0 1
15242: PPUSH
15243: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
15247: LD_VAR 0 6
15251: PUSH
15252: LD_INT 1
15254: EQUAL
15255: IFFALSE 15272
15257: PUSH
15258: LD_VAR 0 1
15262: PPUSH
15263: CALL_OW 256
15267: PUSH
15268: LD_INT 1000
15270: EQUAL
15271: AND
15272: IFFALSE 15286
// SetTag ( i , 0 ) ;
15274: LD_VAR 0 1
15278: PPUSH
15279: LD_INT 0
15281: PPUSH
15282: CALL_OW 109
// if not tag then
15286: LD_VAR 0 6
15290: NOT
15291: IFFALSE 15467
// begin undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15293: LD_ADDR_VAR 0 3
15297: PUSH
15298: LD_EXP 66
15302: PPUSH
15303: LD_INT 57
15305: PUSH
15306: EMPTY
15307: LIST
15308: PPUSH
15309: CALL_OW 70
15313: ST_TO_ADDR
// if undone then
15314: LD_VAR 0 3
15318: IFFALSE 15340
// begin ComComplete ( i , undone [ 1 ] ) ;
15320: LD_VAR 0 1
15324: PPUSH
15325: LD_VAR 0 3
15329: PUSH
15330: LD_INT 1
15332: ARRAY
15333: PPUSH
15334: CALL 64041 0 2
// continue ;
15338: GO 15154
// end ; if cr or tmp or Count ( ruBuildings ) then
15340: LD_VAR 0 8
15344: IFTRUE 15352
15346: PUSH
15347: LD_VAR 0 2
15351: OR
15352: IFTRUE 15365
15354: PUSH
15355: LD_EXP 76
15359: PPUSH
15360: CALL 57905 0 1
15364: OR
15365: IFFALSE 15441
// begin if IsInUnit ( i ) then
15367: LD_VAR 0 1
15371: PPUSH
15372: CALL_OW 310
15376: IFFALSE 15387
// ComExitBuilding ( i ) ;
15378: LD_VAR 0 1
15382: PPUSH
15383: CALL_OW 122
// if tmp then
15387: LD_VAR 0 2
15391: IFFALSE 15407
// SetTag ( i , tRepair ) else
15393: LD_VAR 0 1
15397: PPUSH
15398: LD_INT 3
15400: PPUSH
15401: CALL_OW 109
15405: GO 15439
// if cr then
15407: LD_VAR 0 8
15411: IFFALSE 15427
// SetTag ( i , tCrates ) else
15413: LD_VAR 0 1
15417: PPUSH
15418: LD_INT 2
15420: PPUSH
15421: CALL_OW 109
15425: GO 15439
// SetTag ( i , tBuild ) ;
15427: LD_VAR 0 1
15431: PPUSH
15432: LD_INT 5
15434: PPUSH
15435: CALL_OW 109
// end else
15439: GO 15467
// if not IsInUnit ( i ) then
15441: LD_VAR 0 1
15445: PPUSH
15446: CALL_OW 310
15450: NOT
15451: IFFALSE 15467
// ComEnterUnit ( i , ruBase ) ;
15453: LD_VAR 0 1
15457: PPUSH
15458: LD_EXP 68
15462: PPUSH
15463: CALL_OW 120
// end ; if tag = tRepair then
15467: LD_VAR 0 6
15471: PUSH
15472: LD_INT 3
15474: EQUAL
15475: IFFALSE 15581
// begin if IsInUnit ( i ) then
15477: LD_VAR 0 1
15481: PPUSH
15482: CALL_OW 310
15486: IFFALSE 15499
// begin ComExitBuilding ( i ) ;
15488: LD_VAR 0 1
15492: PPUSH
15493: CALL_OW 122
// continue ;
15497: GO 15154
// end ; if not tmp then
15499: LD_VAR 0 2
15503: NOT
15504: IFFALSE 15520
// begin SetTag ( i , 0 ) ;
15506: LD_VAR 0 1
15510: PPUSH
15511: LD_INT 0
15513: PPUSH
15514: CALL_OW 109
// continue ;
15518: GO 15154
// end ; if not HasTask ( i ) then
15520: LD_VAR 0 1
15524: PPUSH
15525: CALL_OW 314
15529: NOT
15530: IFFALSE 15550
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
15532: LD_VAR 0 1
15536: PPUSH
15537: LD_VAR 0 2
15541: PUSH
15542: LD_INT 1
15544: ARRAY
15545: PPUSH
15546: CALL_OW 130
// if not IsInArea ( i , ruBaseArea ) then
15550: LD_VAR 0 1
15554: PPUSH
15555: LD_EXP 66
15559: PPUSH
15560: CALL_OW 308
15564: NOT
15565: IFFALSE 15581
// ComMoveToArea ( i , ruBaseArea ) ;
15567: LD_VAR 0 1
15571: PPUSH
15572: LD_EXP 66
15576: PPUSH
15577: CALL_OW 113
// end ; if tag = tBuild then
15581: LD_VAR 0 6
15585: PUSH
15586: LD_INT 5
15588: EQUAL
15589: IFFALSE 15788
// begin if IsInUnit ( i ) then
15591: LD_VAR 0 1
15595: PPUSH
15596: CALL_OW 310
15600: IFFALSE 15613
// begin ComExitBuilding ( i ) ;
15602: LD_VAR 0 1
15606: PPUSH
15607: CALL_OW 122
// continue ;
15611: GO 15154
// end ; if not Count ( ruBuildings ) then
15613: LD_EXP 76
15617: PPUSH
15618: CALL 57905 0 1
15622: NOT
15623: IFFALSE 15641
// begin SetTag ( i , 0 ) ;
15625: LD_VAR 0 1
15629: PPUSH
15630: LD_INT 0
15632: PPUSH
15633: CALL_OW 109
// continue ;
15637: GO 15154
// end else
15639: GO 15680
// if not CanBeBuiltOnlyResources ( ruBase , ruBuildings [ 1 ] [ 1 ] ) then
15641: LD_EXP 68
15645: PPUSH
15646: LD_EXP 76
15650: PUSH
15651: LD_INT 1
15653: ARRAY
15654: PUSH
15655: LD_INT 1
15657: ARRAY
15658: PPUSH
15659: CALL 97932 0 2
15663: NOT
15664: IFFALSE 15680
// begin SetTag ( i , 0 ) ;
15666: LD_VAR 0 1
15670: PPUSH
15671: LD_INT 0
15673: PPUSH
15674: CALL_OW 109
// continue ;
15678: GO 15154
// end ; undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15680: LD_ADDR_VAR 0 3
15684: PUSH
15685: LD_EXP 66
15689: PPUSH
15690: LD_INT 57
15692: PUSH
15693: EMPTY
15694: LIST
15695: PPUSH
15696: CALL_OW 70
15700: ST_TO_ADDR
// if undone then
15701: LD_VAR 0 3
15705: IFFALSE 15727
// begin ComComplete ( i , undone [ 1 ] ) ;
15707: LD_VAR 0 1
15711: PPUSH
15712: LD_VAR 0 3
15716: PUSH
15717: LD_INT 1
15719: ARRAY
15720: PPUSH
15721: CALL 64041 0 2
// continue ;
15725: GO 15154
// end ; ComBuild ( i , ruBuildings [ 1 ] [ 1 ] , ruBuildings [ 1 ] [ 2 ] , ruBuildings [ 1 ] [ 3 ] , ruBuildings [ 1 ] [ 4 ] ) ;
15727: LD_VAR 0 1
15731: PPUSH
15732: LD_EXP 76
15736: PUSH
15737: LD_INT 1
15739: ARRAY
15740: PUSH
15741: LD_INT 1
15743: ARRAY
15744: PPUSH
15745: LD_EXP 76
15749: PUSH
15750: LD_INT 1
15752: ARRAY
15753: PUSH
15754: LD_INT 2
15756: ARRAY
15757: PPUSH
15758: LD_EXP 76
15762: PUSH
15763: LD_INT 1
15765: ARRAY
15766: PUSH
15767: LD_INT 3
15769: ARRAY
15770: PPUSH
15771: LD_EXP 76
15775: PUSH
15776: LD_INT 1
15778: ARRAY
15779: PUSH
15780: LD_INT 4
15782: ARRAY
15783: PPUSH
15784: CALL_OW 145
// end ; if tag = tCrates then
15788: LD_VAR 0 6
15792: PUSH
15793: LD_INT 2
15795: EQUAL
15796: IFFALSE 15933
// begin if IsInUnit ( i ) then
15798: LD_VAR 0 1
15802: PPUSH
15803: CALL_OW 310
15807: IFFALSE 15820
// begin ComExitBuilding ( i ) ;
15809: LD_VAR 0 1
15813: PPUSH
15814: CALL_OW 122
// continue ;
15818: GO 15154
// end ; if not cr then
15820: LD_VAR 0 8
15824: NOT
15825: IFFALSE 15841
// begin SetTag ( i , 0 ) ;
15827: LD_VAR 0 1
15831: PPUSH
15832: LD_INT 0
15834: PPUSH
15835: CALL_OW 109
// continue ;
15839: GO 15154
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
15841: LD_VAR 0 1
15845: PPUSH
15846: CALL_OW 314
15850: NOT
15851: IFFALSE 15904
15853: PUSH
15854: LD_INT 81
15856: PUSH
15857: LD_INT 3
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: LD_INT 92
15866: PUSH
15867: LD_VAR 0 8
15871: PUSH
15872: LD_INT 1
15874: ARRAY
15875: PUSH
15876: LD_VAR 0 8
15880: PUSH
15881: LD_INT 2
15883: ARRAY
15884: PUSH
15885: LD_INT 12
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PPUSH
15898: CALL_OW 69
15902: NOT
15903: AND
15904: IFFALSE 15933
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
15906: LD_VAR 0 1
15910: PPUSH
15911: LD_VAR 0 8
15915: PUSH
15916: LD_INT 1
15918: ARRAY
15919: PPUSH
15920: LD_VAR 0 8
15924: PUSH
15925: LD_INT 2
15927: ARRAY
15928: PPUSH
15929: CALL_OW 117
// end ; end ;
15933: GO 15154
15935: POP
15936: POP
// end ; sol := UnitFilter ( ruForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander ;
15937: LD_ADDR_VAR 0 10
15941: PUSH
15942: LD_EXP 59
15946: PPUSH
15947: LD_INT 2
15949: PUSH
15950: LD_INT 25
15952: PUSH
15953: LD_INT 1
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PUSH
15960: LD_INT 25
15962: PUSH
15963: LD_INT 9
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 50
15977: PUSH
15978: EMPTY
15979: LIST
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PPUSH
15985: CALL_OW 72
15989: PUSH
15990: LD_EXP 61
15994: UNION
15995: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
15996: LD_ADDR_VAR 0 12
16000: PUSH
16001: LD_EXP 66
16005: PPUSH
16006: LD_INT 81
16008: PUSH
16009: LD_INT 3
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PPUSH
16016: CALL_OW 70
16020: ST_TO_ADDR
// if sol then
16021: LD_VAR 0 10
16025: IFFALSE 16559
// begin if enemyInBase then
16027: LD_VAR 0 12
16031: IFFALSE 16174
// begin for i in sol do
16033: LD_ADDR_VAR 0 1
16037: PUSH
16038: LD_VAR 0 10
16042: PUSH
16043: FOR_IN
16044: IFFALSE 16170
// begin tw := IsInUnit ( i ) ;
16046: LD_ADDR_VAR 0 7
16050: PUSH
16051: LD_VAR 0 1
16055: PPUSH
16056: CALL_OW 310
16060: ST_TO_ADDR
// if tw then
16061: LD_VAR 0 7
16065: IFFALSE 16144
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
16067: LD_VAR 0 7
16071: PUSH
16072: LD_INT 22
16074: PUSH
16075: LD_INT 3
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PUSH
16082: LD_INT 101
16084: PUSH
16085: LD_INT 1
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: LD_INT 2
16094: PUSH
16095: LD_INT 30
16097: PUSH
16098: LD_INT 32
16100: PUSH
16101: EMPTY
16102: LIST
16103: LIST
16104: PUSH
16105: LD_INT 30
16107: PUSH
16108: LD_INT 31
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: LIST
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: LIST
16124: PPUSH
16125: CALL_OW 69
16129: IN
16130: NOT
16131: IFFALSE 16142
// ComExitBuilding ( i ) ;
16133: LD_VAR 0 1
16137: PPUSH
16138: CALL_OW 122
// end else
16142: GO 16168
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
16144: LD_VAR 0 1
16148: PPUSH
16149: LD_VAR 0 12
16153: PPUSH
16154: LD_VAR 0 1
16158: PPUSH
16159: CALL_OW 74
16163: PPUSH
16164: CALL_OW 115
// end ;
16168: GO 16043
16170: POP
16171: POP
// end else
16172: GO 16559
// begin empty := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
16174: LD_ADDR_VAR 0 13
16178: PUSH
16179: LD_EXP 66
16183: PPUSH
16184: LD_INT 3
16186: PUSH
16187: LD_INT 62
16189: PUSH
16190: EMPTY
16191: LIST
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PUSH
16197: LD_INT 2
16199: PUSH
16200: LD_INT 30
16202: PUSH
16203: LD_INT 32
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PUSH
16210: LD_INT 30
16212: PUSH
16213: LD_INT 4
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 30
16222: PUSH
16223: LD_INT 5
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 30
16232: PUSH
16233: LD_INT 31
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PPUSH
16251: CALL_OW 70
16255: ST_TO_ADDR
// if empty then
16256: LD_VAR 0 13
16260: IFFALSE 16277
// empty := ReverseArray ( empty ) ;
16262: LD_ADDR_VAR 0 13
16266: PUSH
16267: LD_VAR 0 13
16271: PPUSH
16272: CALL 88927 0 1
16276: ST_TO_ADDR
// for i in sol do
16277: LD_ADDR_VAR 0 1
16281: PUSH
16282: LD_VAR 0 10
16286: PUSH
16287: FOR_IN
16288: IFFALSE 16557
// begin tag := GetTag ( i ) ;
16290: LD_ADDR_VAR 0 6
16294: PUSH
16295: LD_VAR 0 1
16299: PPUSH
16300: CALL_OW 110
16304: ST_TO_ADDR
// if tag = tMech then
16305: LD_VAR 0 6
16309: PUSH
16310: LD_INT 7
16312: EQUAL
16313: IFFALSE 16317
// continue ;
16315: GO 16287
// if GetLives ( i ) < 1000 and tag <> tHeal then
16317: LD_VAR 0 1
16321: PPUSH
16322: CALL_OW 256
16326: PUSH
16327: LD_INT 1000
16329: LESS
16330: IFFALSE 16342
16332: PUSH
16333: LD_VAR 0 6
16337: PUSH
16338: LD_INT 1
16340: NONEQUAL
16341: AND
16342: IFFALSE 16394
// begin SetTag ( i , tHeal ) ;
16344: LD_VAR 0 1
16348: PPUSH
16349: LD_INT 1
16351: PPUSH
16352: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
16356: LD_VAR 0 1
16360: PPUSH
16361: LD_EXP 74
16365: PUSH
16366: LD_INT 1
16368: ARRAY
16369: PPUSH
16370: LD_EXP 74
16374: PUSH
16375: LD_INT 2
16377: ARRAY
16378: PPUSH
16379: CALL_OW 111
// AddComHold ( i ) ;
16383: LD_VAR 0 1
16387: PPUSH
16388: CALL_OW 200
// continue ;
16392: GO 16287
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
16394: LD_VAR 0 1
16398: PPUSH
16399: CALL_OW 256
16403: PUSH
16404: LD_INT 1000
16406: EQUAL
16407: IFFALSE 16419
16409: PUSH
16410: LD_VAR 0 6
16414: PUSH
16415: LD_INT 1
16417: EQUAL
16418: AND
16419: IFFALSE 16435
// begin SetTag ( i , 0 ) ;
16421: LD_VAR 0 1
16425: PPUSH
16426: LD_INT 0
16428: PPUSH
16429: CALL_OW 109
// continue ;
16433: GO 16287
// end ; if HasTask ( i ) then
16435: LD_VAR 0 1
16439: PPUSH
16440: CALL_OW 314
16444: IFFALSE 16448
// continue ;
16446: GO 16287
// if not IsInUnit ( i ) and not tag and empty then
16448: LD_VAR 0 1
16452: PPUSH
16453: CALL_OW 310
16457: NOT
16458: IFFALSE 16467
16460: PUSH
16461: LD_VAR 0 6
16465: NOT
16466: AND
16467: IFFALSE 16475
16469: PUSH
16470: LD_VAR 0 13
16474: AND
16475: IFFALSE 16555
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
16477: LD_VAR 0 1
16481: PPUSH
16482: LD_VAR 0 13
16486: PUSH
16487: LD_INT 1
16489: ARRAY
16490: PPUSH
16491: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
16495: LD_VAR 0 13
16499: PUSH
16500: LD_INT 1
16502: ARRAY
16503: PPUSH
16504: CALL_OW 266
16508: PUSH
16509: LD_INT 5
16511: EQUAL
16512: IFFALSE 16523
16514: PUSH
16515: LD_INT 50
16517: PPUSH
16518: CALL_OW 13
16522: AND
16523: IFFALSE 16537
// AddComChangeProfession ( i , class_bazooker ) ;
16525: LD_VAR 0 1
16529: PPUSH
16530: LD_INT 9
16532: PPUSH
16533: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
16537: LD_ADDR_VAR 0 13
16541: PUSH
16542: LD_VAR 0 13
16546: PPUSH
16547: LD_INT 1
16549: PPUSH
16550: CALL_OW 3
16554: ST_TO_ADDR
// end ; end ;
16555: GO 16287
16557: POP
16558: POP
// end ; end ; end ;
16559: PPOPN 16
16561: END
// every 0 0$2 trigger ruScriptActive2 and Count ( ruForces2 ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
16562: LD_EXP 15
16566: IFFALSE 16579
16568: PUSH
16569: LD_EXP 60
16573: PPUSH
16574: CALL 57905 0 1
16578: AND
16579: IFFALSE 19183
16581: GO 16583
16583: DISABLE
16584: LD_INT 0
16586: PPUSH
16587: PPUSH
16588: PPUSH
16589: PPUSH
16590: PPUSH
16591: PPUSH
16592: PPUSH
16593: PPUSH
16594: PPUSH
16595: PPUSH
16596: PPUSH
16597: PPUSH
16598: PPUSH
16599: PPUSH
16600: PPUSH
16601: PPUSH
// begin enable ;
16602: ENABLE
// if ruTech then
16603: LD_EXP 65
16607: IFFALSE 16761
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
16609: LD_ADDR_VAR 0 4
16613: PUSH
16614: LD_INT 22
16616: PUSH
16617: LD_INT 3
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: LD_INT 50
16626: PUSH
16627: EMPTY
16628: LIST
16629: PUSH
16630: LD_INT 2
16632: PUSH
16633: LD_INT 30
16635: PUSH
16636: LD_INT 6
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 30
16645: PUSH
16646: LD_INT 7
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: LD_INT 30
16655: PUSH
16656: LD_INT 8
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: LIST
16673: PPUSH
16674: CALL_OW 69
16678: ST_TO_ADDR
// if lab then
16679: LD_VAR 0 4
16683: IFFALSE 16761
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
16685: LD_VAR 0 4
16689: PUSH
16690: LD_INT 1
16692: ARRAY
16693: PPUSH
16694: CALL_OW 461
16698: PUSH
16699: LD_INT 2
16701: EQUAL
16702: IFFALSE 16761
// begin for i in ruTech do
16704: LD_ADDR_VAR 0 1
16708: PUSH
16709: LD_EXP 65
16713: PUSH
16714: FOR_IN
16715: IFFALSE 16759
// if CanBeResearched ( lab [ 1 ] , i ) then
16717: LD_VAR 0 4
16721: PUSH
16722: LD_INT 1
16724: ARRAY
16725: PPUSH
16726: LD_VAR 0 1
16730: PPUSH
16731: CALL_OW 430
16735: IFFALSE 16757
// begin ComResearch ( lab [ 1 ] , i ) ;
16737: LD_VAR 0 4
16741: PUSH
16742: LD_INT 1
16744: ARRAY
16745: PPUSH
16746: LD_VAR 0 1
16750: PPUSH
16751: CALL_OW 124
// break ;
16755: GO 16759
// end ;
16757: GO 16714
16759: POP
16760: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
16761: LD_ADDR_VAR 0 14
16765: PUSH
16766: LD_EXP 67
16770: PPUSH
16771: LD_INT 22
16773: PUSH
16774: LD_INT 3
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: LD_INT 30
16783: PUSH
16784: LD_INT 3
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 50
16793: PUSH
16794: EMPTY
16795: LIST
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: LIST
16801: PPUSH
16802: CALL_OW 70
16806: ST_TO_ADDR
// if fac then
16807: LD_VAR 0 14
16811: IFFALSE 17408
// begin if UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
16813: LD_EXP 64
16817: PPUSH
16818: LD_INT 3
16820: PUSH
16821: LD_INT 60
16823: PUSH
16824: EMPTY
16825: LIST
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 3
16833: PUSH
16834: LD_INT 25
16836: PUSH
16837: LD_INT 3
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PPUSH
16852: CALL_OW 72
16856: IFFALSE 16999
// begin for i in UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
16858: LD_ADDR_VAR 0 1
16862: PUSH
16863: LD_EXP 64
16867: PPUSH
16868: LD_INT 3
16870: PUSH
16871: LD_INT 60
16873: PUSH
16874: EMPTY
16875: LIST
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 3
16883: PUSH
16884: LD_INT 25
16886: PUSH
16887: LD_INT 3
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PPUSH
16902: CALL_OW 72
16906: PUSH
16907: FOR_IN
16908: IFFALSE 16997
// begin SetTag ( i , tMech ) ;
16910: LD_VAR 0 1
16914: PPUSH
16915: LD_INT 7
16917: PPUSH
16918: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
16922: LD_VAR 0 1
16926: PPUSH
16927: CALL_OW 310
16931: IFFALSE 16954
16933: PUSH
16934: LD_VAR 0 1
16938: PPUSH
16939: CALL_OW 310
16943: PUSH
16944: LD_VAR 0 14
16948: PUSH
16949: LD_INT 1
16951: ARRAY
16952: NONEQUAL
16953: AND
16954: IFFALSE 16965
// ComExitBuilding ( i ) ;
16956: LD_VAR 0 1
16960: PPUSH
16961: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
16965: LD_VAR 0 1
16969: PPUSH
16970: LD_VAR 0 14
16974: PUSH
16975: LD_INT 1
16977: ARRAY
16978: PPUSH
16979: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
16983: LD_VAR 0 1
16987: PPUSH
16988: LD_INT 3
16990: PPUSH
16991: CALL_OW 183
// end ;
16995: GO 16907
16997: POP
16998: POP
// end ; if UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
16999: LD_EXP 64
17003: PPUSH
17004: LD_INT 25
17006: PUSH
17007: LD_INT 3
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 3
17016: PUSH
17017: LD_INT 54
17019: PUSH
17020: EMPTY
17021: LIST
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 120
17029: PUSH
17030: LD_INT 7
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 50
17039: PUSH
17040: EMPTY
17041: LIST
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: PPUSH
17049: CALL_OW 72
17053: IFFALSE 17140
// begin for i in UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
17055: LD_ADDR_VAR 0 1
17059: PUSH
17060: LD_EXP 64
17064: PPUSH
17065: LD_INT 25
17067: PUSH
17068: LD_INT 3
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: LD_INT 3
17077: PUSH
17078: LD_INT 54
17080: PUSH
17081: EMPTY
17082: LIST
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 120
17090: PUSH
17091: LD_INT 7
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PUSH
17098: LD_INT 50
17100: PUSH
17101: EMPTY
17102: LIST
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: PPUSH
17110: CALL_OW 72
17114: PUSH
17115: FOR_IN
17116: IFFALSE 17138
// ComEnterUnit ( i , fac [ 1 ] ) ;
17118: LD_VAR 0 1
17122: PPUSH
17123: LD_VAR 0 14
17127: PUSH
17128: LD_INT 1
17130: ARRAY
17131: PPUSH
17132: CALL_OW 120
17136: GO 17115
17138: POP
17139: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
17140: LD_VAR 0 14
17144: PUSH
17145: LD_INT 1
17147: ARRAY
17148: PPUSH
17149: CALL_OW 461
17153: PUSH
17154: LD_INT 2
17156: EQUAL
17157: IFFALSE 17408
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea2 , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
17159: LD_ADDR_VAR 0 15
17163: PUSH
17164: LD_EXP 67
17168: PPUSH
17169: LD_INT 2
17171: PUSH
17172: LD_INT 30
17174: PUSH
17175: LD_INT 32
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 30
17184: PUSH
17185: LD_INT 33
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: LIST
17196: PUSH
17197: LD_INT 35
17199: PUSH
17200: LD_INT 0
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PPUSH
17211: CALL_OW 70
17215: ST_TO_ADDR
// if emptyTowers then
17216: LD_VAR 0 15
17220: IFFALSE 17270
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea2 ) ;
17222: LD_ADDR_VAR 0 16
17226: PUSH
17227: LD_VAR 0 15
17231: PUSH
17232: LD_INT 1
17234: ARRAY
17235: PPUSH
17236: LD_EXP 67
17240: PPUSH
17241: CALL 66196 0 2
17245: ST_TO_ADDR
// if weapon then
17246: LD_VAR 0 16
17250: IFFALSE 17270
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
17252: LD_VAR 0 15
17256: PUSH
17257: LD_INT 1
17259: ARRAY
17260: PPUSH
17261: LD_VAR 0 16
17265: PPUSH
17266: CALL_OW 148
// end ; if ruConstructList2 then
17270: LD_EXP 71
17274: IFFALSE 17408
// if CanBeConstructed ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) then
17276: LD_VAR 0 14
17280: PUSH
17281: LD_INT 1
17283: ARRAY
17284: PPUSH
17285: LD_EXP 71
17289: PUSH
17290: LD_INT 1
17292: ARRAY
17293: PUSH
17294: LD_INT 1
17296: ARRAY
17297: PPUSH
17298: LD_EXP 71
17302: PUSH
17303: LD_INT 1
17305: ARRAY
17306: PUSH
17307: LD_INT 2
17309: ARRAY
17310: PPUSH
17311: LD_EXP 71
17315: PUSH
17316: LD_INT 1
17318: ARRAY
17319: PUSH
17320: LD_INT 3
17322: ARRAY
17323: PPUSH
17324: LD_EXP 71
17328: PUSH
17329: LD_INT 1
17331: ARRAY
17332: PUSH
17333: LD_INT 4
17335: ARRAY
17336: PPUSH
17337: CALL_OW 448
17341: IFFALSE 17408
// ComConstruct ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) ;
17343: LD_VAR 0 14
17347: PUSH
17348: LD_INT 1
17350: ARRAY
17351: PPUSH
17352: LD_EXP 71
17356: PUSH
17357: LD_INT 1
17359: ARRAY
17360: PUSH
17361: LD_INT 1
17363: ARRAY
17364: PPUSH
17365: LD_EXP 71
17369: PUSH
17370: LD_INT 1
17372: ARRAY
17373: PUSH
17374: LD_INT 2
17376: ARRAY
17377: PPUSH
17378: LD_EXP 71
17382: PUSH
17383: LD_INT 1
17385: ARRAY
17386: PUSH
17387: LD_INT 3
17389: ARRAY
17390: PPUSH
17391: LD_EXP 71
17395: PUSH
17396: LD_INT 1
17398: ARRAY
17399: PUSH
17400: LD_INT 4
17402: ARRAY
17403: PPUSH
17404: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea2 , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17408: LD_ADDR_VAR 0 2
17412: PUSH
17413: LD_EXP 67
17417: PPUSH
17418: LD_INT 21
17420: PUSH
17421: LD_INT 3
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: PUSH
17428: LD_INT 3
17430: PUSH
17431: LD_INT 57
17433: PUSH
17434: EMPTY
17435: LIST
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 3
17443: PUSH
17444: LD_INT 24
17446: PUSH
17447: LD_INT 1000
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: LIST
17462: PPUSH
17463: CALL_OW 70
17467: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea2 ) ;
17468: LD_ADDR_VAR 0 8
17472: PUSH
17473: LD_EXP 73
17477: PPUSH
17478: CALL_OW 435
17482: ST_TO_ADDR
// sci := UnitFilter ( ruForces2 , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
17483: LD_ADDR_VAR 0 9
17487: PUSH
17488: LD_EXP 60
17492: PPUSH
17493: LD_INT 25
17495: PUSH
17496: LD_INT 4
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 50
17505: PUSH
17506: EMPTY
17507: LIST
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PPUSH
17513: CALL_OW 72
17517: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea2 , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
17518: LD_ADDR_VAR 0 4
17522: PUSH
17523: LD_EXP 67
17527: PPUSH
17528: LD_INT 2
17530: PUSH
17531: LD_INT 30
17533: PUSH
17534: LD_INT 6
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 30
17543: PUSH
17544: LD_INT 7
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: LD_INT 30
17553: PUSH
17554: LD_INT 8
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: PPUSH
17567: CALL_OW 70
17571: ST_TO_ADDR
// if sci then
17572: LD_VAR 0 9
17576: IFFALSE 17737
// begin hurtUnits := UnitFilter ( ruForces2 , [ [ f_inarea , ruBaseArea2 ] , [ f_tag , tHeal ] ] ) ;
17578: LD_ADDR_VAR 0 11
17582: PUSH
17583: LD_EXP 60
17587: PPUSH
17588: LD_INT 95
17590: PUSH
17591: LD_EXP 67
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: LD_INT 120
17602: PUSH
17603: LD_INT 1
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PPUSH
17614: CALL_OW 72
17618: ST_TO_ADDR
// if hurtUnits then
17619: LD_VAR 0 11
17623: IFFALSE 17684
// begin for i in sci do
17625: LD_ADDR_VAR 0 1
17629: PUSH
17630: LD_VAR 0 9
17634: PUSH
17635: FOR_IN
17636: IFFALSE 17680
// if IsInUnit ( i ) then
17638: LD_VAR 0 1
17642: PPUSH
17643: CALL_OW 310
17647: IFFALSE 17660
// ComExitBuilding ( i ) else
17649: LD_VAR 0 1
17653: PPUSH
17654: CALL_OW 122
17658: GO 17678
// ComHeal ( i , hurtUnits [ 1 ] ) ;
17660: LD_VAR 0 1
17664: PPUSH
17665: LD_VAR 0 11
17669: PUSH
17670: LD_INT 1
17672: ARRAY
17673: PPUSH
17674: CALL_OW 128
17678: GO 17635
17680: POP
17681: POP
// end else
17682: GO 17737
// if lab then
17684: LD_VAR 0 4
17688: IFFALSE 17737
// begin for i in sci do
17690: LD_ADDR_VAR 0 1
17694: PUSH
17695: LD_VAR 0 9
17699: PUSH
17700: FOR_IN
17701: IFFALSE 17735
// if not IsInUnit ( i ) then
17703: LD_VAR 0 1
17707: PPUSH
17708: CALL_OW 310
17712: NOT
17713: IFFALSE 17733
// ComEnterUnit ( i , lab [ 1 ] ) ;
17715: LD_VAR 0 1
17719: PPUSH
17720: LD_VAR 0 4
17724: PUSH
17725: LD_INT 1
17727: ARRAY
17728: PPUSH
17729: CALL_OW 120
17733: GO 17700
17735: POP
17736: POP
// end ; end ; eng := UnitFilter ( ruForces2 , [ f_class , 2 ] ) ;
17737: LD_ADDR_VAR 0 5
17741: PUSH
17742: LD_EXP 60
17746: PPUSH
17747: LD_INT 25
17749: PUSH
17750: LD_INT 2
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PPUSH
17757: CALL_OW 72
17761: ST_TO_ADDR
// if eng then
17762: LD_VAR 0 5
17766: IFFALSE 18561
// begin for i in eng do
17768: LD_ADDR_VAR 0 1
17772: PUSH
17773: LD_VAR 0 5
17777: PUSH
17778: FOR_IN
17779: IFFALSE 18559
// begin tag := GetTag ( i ) ;
17781: LD_ADDR_VAR 0 6
17785: PUSH
17786: LD_VAR 0 1
17790: PPUSH
17791: CALL_OW 110
17795: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
17796: LD_VAR 0 1
17800: PPUSH
17801: CALL_OW 256
17805: PUSH
17806: LD_INT 800
17808: LESS
17809: IFFALSE 17821
17811: PUSH
17812: LD_VAR 0 6
17816: PUSH
17817: LD_INT 1
17819: NONEQUAL
17820: AND
17821: IFFALSE 17871
// begin SetTag ( i , tHeal ) ;
17823: LD_VAR 0 1
17827: PPUSH
17828: LD_INT 1
17830: PPUSH
17831: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
17835: LD_VAR 0 1
17839: PPUSH
17840: LD_EXP 75
17844: PUSH
17845: LD_INT 1
17847: ARRAY
17848: PPUSH
17849: LD_EXP 75
17853: PUSH
17854: LD_INT 2
17856: ARRAY
17857: PPUSH
17858: CALL_OW 111
// AddComHold ( i ) ;
17862: LD_VAR 0 1
17866: PPUSH
17867: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
17871: LD_VAR 0 6
17875: PUSH
17876: LD_INT 1
17878: EQUAL
17879: IFFALSE 17896
17881: PUSH
17882: LD_VAR 0 1
17886: PPUSH
17887: CALL_OW 256
17891: PUSH
17892: LD_INT 1000
17894: EQUAL
17895: AND
17896: IFFALSE 17910
// SetTag ( i , 0 ) ;
17898: LD_VAR 0 1
17902: PPUSH
17903: LD_INT 0
17905: PPUSH
17906: CALL_OW 109
// if not tag then
17910: LD_VAR 0 6
17914: NOT
17915: IFFALSE 18091
// begin undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
17917: LD_ADDR_VAR 0 3
17921: PUSH
17922: LD_EXP 67
17926: PPUSH
17927: LD_INT 57
17929: PUSH
17930: EMPTY
17931: LIST
17932: PPUSH
17933: CALL_OW 70
17937: ST_TO_ADDR
// if undone then
17938: LD_VAR 0 3
17942: IFFALSE 17964
// begin ComComplete ( i , undone [ 1 ] ) ;
17944: LD_VAR 0 1
17948: PPUSH
17949: LD_VAR 0 3
17953: PUSH
17954: LD_INT 1
17956: ARRAY
17957: PPUSH
17958: CALL 64041 0 2
// continue ;
17962: GO 17778
// end ; if cr or tmp or Count ( ruBuildings2 ) then
17964: LD_VAR 0 8
17968: IFTRUE 17976
17970: PUSH
17971: LD_VAR 0 2
17975: OR
17976: IFTRUE 17989
17978: PUSH
17979: LD_EXP 77
17983: PPUSH
17984: CALL 57905 0 1
17988: OR
17989: IFFALSE 18065
// begin if IsInUnit ( i ) then
17991: LD_VAR 0 1
17995: PPUSH
17996: CALL_OW 310
18000: IFFALSE 18011
// ComExitBuilding ( i ) ;
18002: LD_VAR 0 1
18006: PPUSH
18007: CALL_OW 122
// if tmp then
18011: LD_VAR 0 2
18015: IFFALSE 18031
// SetTag ( i , tRepair ) else
18017: LD_VAR 0 1
18021: PPUSH
18022: LD_INT 3
18024: PPUSH
18025: CALL_OW 109
18029: GO 18063
// if cr then
18031: LD_VAR 0 8
18035: IFFALSE 18051
// SetTag ( i , tCrates ) else
18037: LD_VAR 0 1
18041: PPUSH
18042: LD_INT 2
18044: PPUSH
18045: CALL_OW 109
18049: GO 18063
// SetTag ( i , tBuild ) ;
18051: LD_VAR 0 1
18055: PPUSH
18056: LD_INT 5
18058: PPUSH
18059: CALL_OW 109
// end else
18063: GO 18091
// if not IsInUnit ( i ) then
18065: LD_VAR 0 1
18069: PPUSH
18070: CALL_OW 310
18074: NOT
18075: IFFALSE 18091
// ComEnterUnit ( i , ruBase2 ) ;
18077: LD_VAR 0 1
18081: PPUSH
18082: LD_EXP 69
18086: PPUSH
18087: CALL_OW 120
// end ; if tag = tRepair then
18091: LD_VAR 0 6
18095: PUSH
18096: LD_INT 3
18098: EQUAL
18099: IFFALSE 18205
// begin if IsInUnit ( i ) then
18101: LD_VAR 0 1
18105: PPUSH
18106: CALL_OW 310
18110: IFFALSE 18123
// begin ComExitBuilding ( i ) ;
18112: LD_VAR 0 1
18116: PPUSH
18117: CALL_OW 122
// continue ;
18121: GO 17778
// end ; if not tmp then
18123: LD_VAR 0 2
18127: NOT
18128: IFFALSE 18144
// begin SetTag ( i , 0 ) ;
18130: LD_VAR 0 1
18134: PPUSH
18135: LD_INT 0
18137: PPUSH
18138: CALL_OW 109
// continue ;
18142: GO 17778
// end ; if not HasTask ( i ) then
18144: LD_VAR 0 1
18148: PPUSH
18149: CALL_OW 314
18153: NOT
18154: IFFALSE 18174
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
18156: LD_VAR 0 1
18160: PPUSH
18161: LD_VAR 0 2
18165: PUSH
18166: LD_INT 1
18168: ARRAY
18169: PPUSH
18170: CALL_OW 130
// if not IsInArea ( i , ruBaseArea2 ) then
18174: LD_VAR 0 1
18178: PPUSH
18179: LD_EXP 67
18183: PPUSH
18184: CALL_OW 308
18188: NOT
18189: IFFALSE 18205
// ComMoveToArea ( i , ruBaseArea2 ) ;
18191: LD_VAR 0 1
18195: PPUSH
18196: LD_EXP 67
18200: PPUSH
18201: CALL_OW 113
// end ; if tag = tBuild then
18205: LD_VAR 0 6
18209: PUSH
18210: LD_INT 5
18212: EQUAL
18213: IFFALSE 18412
// begin if IsInUnit ( i ) then
18215: LD_VAR 0 1
18219: PPUSH
18220: CALL_OW 310
18224: IFFALSE 18237
// begin ComExitBuilding ( i ) ;
18226: LD_VAR 0 1
18230: PPUSH
18231: CALL_OW 122
// continue ;
18235: GO 17778
// end ; if not Count ( ruBuildings2 ) then
18237: LD_EXP 77
18241: PPUSH
18242: CALL 57905 0 1
18246: NOT
18247: IFFALSE 18265
// begin SetTag ( i , 0 ) ;
18249: LD_VAR 0 1
18253: PPUSH
18254: LD_INT 0
18256: PPUSH
18257: CALL_OW 109
// continue ;
18261: GO 17778
// end else
18263: GO 18304
// if not CanBeBuiltOnlyResources ( ruBase2 , ruBuildings2 [ 1 ] [ 1 ] ) then
18265: LD_EXP 69
18269: PPUSH
18270: LD_EXP 77
18274: PUSH
18275: LD_INT 1
18277: ARRAY
18278: PUSH
18279: LD_INT 1
18281: ARRAY
18282: PPUSH
18283: CALL 97932 0 2
18287: NOT
18288: IFFALSE 18304
// begin SetTag ( i , 0 ) ;
18290: LD_VAR 0 1
18294: PPUSH
18295: LD_INT 0
18297: PPUSH
18298: CALL_OW 109
// continue ;
18302: GO 17778
// end ; undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
18304: LD_ADDR_VAR 0 3
18308: PUSH
18309: LD_EXP 67
18313: PPUSH
18314: LD_INT 57
18316: PUSH
18317: EMPTY
18318: LIST
18319: PPUSH
18320: CALL_OW 70
18324: ST_TO_ADDR
// if undone then
18325: LD_VAR 0 3
18329: IFFALSE 18351
// begin ComComplete ( i , undone [ 1 ] ) ;
18331: LD_VAR 0 1
18335: PPUSH
18336: LD_VAR 0 3
18340: PUSH
18341: LD_INT 1
18343: ARRAY
18344: PPUSH
18345: CALL 64041 0 2
// continue ;
18349: GO 17778
// end ; ComBuild ( i , ruBuildings2 [ 1 ] [ 1 ] , ruBuildings2 [ 1 ] [ 2 ] , ruBuildings2 [ 1 ] [ 3 ] , ruBuildings2 [ 1 ] [ 4 ] ) ;
18351: LD_VAR 0 1
18355: PPUSH
18356: LD_EXP 77
18360: PUSH
18361: LD_INT 1
18363: ARRAY
18364: PUSH
18365: LD_INT 1
18367: ARRAY
18368: PPUSH
18369: LD_EXP 77
18373: PUSH
18374: LD_INT 1
18376: ARRAY
18377: PUSH
18378: LD_INT 2
18380: ARRAY
18381: PPUSH
18382: LD_EXP 77
18386: PUSH
18387: LD_INT 1
18389: ARRAY
18390: PUSH
18391: LD_INT 3
18393: ARRAY
18394: PPUSH
18395: LD_EXP 77
18399: PUSH
18400: LD_INT 1
18402: ARRAY
18403: PUSH
18404: LD_INT 4
18406: ARRAY
18407: PPUSH
18408: CALL_OW 145
// end ; if tag = tCrates then
18412: LD_VAR 0 6
18416: PUSH
18417: LD_INT 2
18419: EQUAL
18420: IFFALSE 18557
// begin if IsInUnit ( i ) then
18422: LD_VAR 0 1
18426: PPUSH
18427: CALL_OW 310
18431: IFFALSE 18444
// begin ComExitBuilding ( i ) ;
18433: LD_VAR 0 1
18437: PPUSH
18438: CALL_OW 122
// continue ;
18442: GO 17778
// end ; if not cr then
18444: LD_VAR 0 8
18448: NOT
18449: IFFALSE 18465
// begin SetTag ( i , 0 ) ;
18451: LD_VAR 0 1
18455: PPUSH
18456: LD_INT 0
18458: PPUSH
18459: CALL_OW 109
// continue ;
18463: GO 17778
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
18465: LD_VAR 0 1
18469: PPUSH
18470: CALL_OW 314
18474: NOT
18475: IFFALSE 18528
18477: PUSH
18478: LD_INT 81
18480: PUSH
18481: LD_INT 3
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 92
18490: PUSH
18491: LD_VAR 0 8
18495: PUSH
18496: LD_INT 1
18498: ARRAY
18499: PUSH
18500: LD_VAR 0 8
18504: PUSH
18505: LD_INT 2
18507: ARRAY
18508: PUSH
18509: LD_INT 12
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PPUSH
18522: CALL_OW 69
18526: NOT
18527: AND
18528: IFFALSE 18557
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
18530: LD_VAR 0 1
18534: PPUSH
18535: LD_VAR 0 8
18539: PUSH
18540: LD_INT 1
18542: ARRAY
18543: PPUSH
18544: LD_VAR 0 8
18548: PUSH
18549: LD_INT 2
18551: ARRAY
18552: PPUSH
18553: CALL_OW 117
// end ; end ;
18557: GO 17778
18559: POP
18560: POP
// end ; sol := UnitFilter ( ruForces2 , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander2 ;
18561: LD_ADDR_VAR 0 10
18565: PUSH
18566: LD_EXP 60
18570: PPUSH
18571: LD_INT 2
18573: PUSH
18574: LD_INT 25
18576: PUSH
18577: LD_INT 1
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 25
18586: PUSH
18587: LD_INT 9
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 50
18601: PUSH
18602: EMPTY
18603: LIST
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PPUSH
18609: CALL_OW 72
18613: PUSH
18614: LD_EXP 62
18618: UNION
18619: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
18620: LD_ADDR_VAR 0 12
18624: PUSH
18625: LD_EXP 67
18629: PPUSH
18630: LD_INT 81
18632: PUSH
18633: LD_INT 3
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PPUSH
18640: CALL_OW 70
18644: ST_TO_ADDR
// if sol then
18645: LD_VAR 0 10
18649: IFFALSE 19183
// begin if enemyInBase then
18651: LD_VAR 0 12
18655: IFFALSE 18798
// begin for i in sol do
18657: LD_ADDR_VAR 0 1
18661: PUSH
18662: LD_VAR 0 10
18666: PUSH
18667: FOR_IN
18668: IFFALSE 18794
// begin tw := IsInUnit ( i ) ;
18670: LD_ADDR_VAR 0 7
18674: PUSH
18675: LD_VAR 0 1
18679: PPUSH
18680: CALL_OW 310
18684: ST_TO_ADDR
// if tw then
18685: LD_VAR 0 7
18689: IFFALSE 18768
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
18691: LD_VAR 0 7
18695: PUSH
18696: LD_INT 22
18698: PUSH
18699: LD_INT 3
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 101
18708: PUSH
18709: LD_INT 1
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 2
18718: PUSH
18719: LD_INT 30
18721: PUSH
18722: LD_INT 32
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 30
18731: PUSH
18732: LD_INT 31
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: LIST
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: LIST
18748: PPUSH
18749: CALL_OW 69
18753: IN
18754: NOT
18755: IFFALSE 18766
// ComExitBuilding ( i ) ;
18757: LD_VAR 0 1
18761: PPUSH
18762: CALL_OW 122
// end else
18766: GO 18792
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
18768: LD_VAR 0 1
18772: PPUSH
18773: LD_VAR 0 12
18777: PPUSH
18778: LD_VAR 0 1
18782: PPUSH
18783: CALL_OW 74
18787: PPUSH
18788: CALL_OW 115
// end ;
18792: GO 18667
18794: POP
18795: POP
// end else
18796: GO 19183
// begin empty := FilterUnitsInArea ( ruBaseArea2 , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
18798: LD_ADDR_VAR 0 13
18802: PUSH
18803: LD_EXP 67
18807: PPUSH
18808: LD_INT 3
18810: PUSH
18811: LD_INT 62
18813: PUSH
18814: EMPTY
18815: LIST
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 2
18823: PUSH
18824: LD_INT 30
18826: PUSH
18827: LD_INT 32
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 30
18836: PUSH
18837: LD_INT 4
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 30
18846: PUSH
18847: LD_INT 5
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: LD_INT 30
18856: PUSH
18857: LD_INT 31
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PPUSH
18875: CALL_OW 70
18879: ST_TO_ADDR
// if empty then
18880: LD_VAR 0 13
18884: IFFALSE 18901
// empty := ReverseArray ( empty ) ;
18886: LD_ADDR_VAR 0 13
18890: PUSH
18891: LD_VAR 0 13
18895: PPUSH
18896: CALL 88927 0 1
18900: ST_TO_ADDR
// for i in sol do
18901: LD_ADDR_VAR 0 1
18905: PUSH
18906: LD_VAR 0 10
18910: PUSH
18911: FOR_IN
18912: IFFALSE 19181
// begin tag := GetTag ( i ) ;
18914: LD_ADDR_VAR 0 6
18918: PUSH
18919: LD_VAR 0 1
18923: PPUSH
18924: CALL_OW 110
18928: ST_TO_ADDR
// if tag = tMech then
18929: LD_VAR 0 6
18933: PUSH
18934: LD_INT 7
18936: EQUAL
18937: IFFALSE 18941
// continue ;
18939: GO 18911
// if GetLives ( i ) < 1000 and tag <> tHeal then
18941: LD_VAR 0 1
18945: PPUSH
18946: CALL_OW 256
18950: PUSH
18951: LD_INT 1000
18953: LESS
18954: IFFALSE 18966
18956: PUSH
18957: LD_VAR 0 6
18961: PUSH
18962: LD_INT 1
18964: NONEQUAL
18965: AND
18966: IFFALSE 19018
// begin SetTag ( i , tHeal ) ;
18968: LD_VAR 0 1
18972: PPUSH
18973: LD_INT 1
18975: PPUSH
18976: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
18980: LD_VAR 0 1
18984: PPUSH
18985: LD_EXP 75
18989: PUSH
18990: LD_INT 1
18992: ARRAY
18993: PPUSH
18994: LD_EXP 75
18998: PUSH
18999: LD_INT 2
19001: ARRAY
19002: PPUSH
19003: CALL_OW 111
// AddComHold ( i ) ;
19007: LD_VAR 0 1
19011: PPUSH
19012: CALL_OW 200
// continue ;
19016: GO 18911
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
19018: LD_VAR 0 1
19022: PPUSH
19023: CALL_OW 256
19027: PUSH
19028: LD_INT 1000
19030: EQUAL
19031: IFFALSE 19043
19033: PUSH
19034: LD_VAR 0 6
19038: PUSH
19039: LD_INT 1
19041: EQUAL
19042: AND
19043: IFFALSE 19059
// begin SetTag ( i , 0 ) ;
19045: LD_VAR 0 1
19049: PPUSH
19050: LD_INT 0
19052: PPUSH
19053: CALL_OW 109
// continue ;
19057: GO 18911
// end ; if HasTask ( i ) then
19059: LD_VAR 0 1
19063: PPUSH
19064: CALL_OW 314
19068: IFFALSE 19072
// continue ;
19070: GO 18911
// if not IsInUnit ( i ) and not tag and empty then
19072: LD_VAR 0 1
19076: PPUSH
19077: CALL_OW 310
19081: NOT
19082: IFFALSE 19091
19084: PUSH
19085: LD_VAR 0 6
19089: NOT
19090: AND
19091: IFFALSE 19099
19093: PUSH
19094: LD_VAR 0 13
19098: AND
19099: IFFALSE 19179
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
19101: LD_VAR 0 1
19105: PPUSH
19106: LD_VAR 0 13
19110: PUSH
19111: LD_INT 1
19113: ARRAY
19114: PPUSH
19115: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
19119: LD_VAR 0 13
19123: PUSH
19124: LD_INT 1
19126: ARRAY
19127: PPUSH
19128: CALL_OW 266
19132: PUSH
19133: LD_INT 5
19135: EQUAL
19136: IFFALSE 19147
19138: PUSH
19139: LD_INT 50
19141: PPUSH
19142: CALL_OW 13
19146: AND
19147: IFFALSE 19161
// AddComChangeProfession ( i , class_bazooker ) ;
19149: LD_VAR 0 1
19153: PPUSH
19154: LD_INT 9
19156: PPUSH
19157: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
19161: LD_ADDR_VAR 0 13
19165: PUSH
19166: LD_VAR 0 13
19170: PPUSH
19171: LD_INT 1
19173: PPUSH
19174: CALL_OW 3
19178: ST_TO_ADDR
// end ; end ;
19179: GO 18911
19181: POP
19182: POP
// end ; end ; end ;
19183: PPOPN 16
19185: END
// every 0 0$1 trigger ruTanks and ruActiveAttacks do var i , mech , enemy ;
19186: LD_EXP 79
19190: IFFALSE 19198
19192: PUSH
19193: LD_EXP 22
19197: AND
19198: IFFALSE 19773
19200: GO 19202
19202: DISABLE
19203: LD_INT 0
19205: PPUSH
19206: PPUSH
19207: PPUSH
// begin enable ;
19208: ENABLE
// if not ruTanks then
19209: LD_EXP 79
19213: NOT
19214: IFFALSE 19218
// exit ;
19216: GO 19773
// for i in ruTanks do
19218: LD_ADDR_VAR 0 1
19222: PUSH
19223: LD_EXP 79
19227: PUSH
19228: FOR_IN
19229: IFFALSE 19771
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19231: LD_VAR 0 1
19235: PPUSH
19236: CALL_OW 302
19240: NOT
19241: IFTRUE 19258
19243: PUSH
19244: LD_VAR 0 1
19248: PPUSH
19249: CALL_OW 255
19253: PUSH
19254: LD_INT 3
19256: NONEQUAL
19257: OR
19258: IFFALSE 19278
// begin ruTanks := ruTanks diff i ;
19260: LD_ADDR_EXP 79
19264: PUSH
19265: LD_EXP 79
19269: PUSH
19270: LD_VAR 0 1
19274: DIFF
19275: ST_TO_ADDR
// continue ;
19276: GO 19228
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19278: LD_VAR 0 1
19282: PPUSH
19283: CALL_OW 110
19287: NOT
19288: IFTRUE 19305
19290: PUSH
19291: LD_VAR 0 1
19295: PPUSH
19296: CALL_OW 110
19300: PUSH
19301: LD_INT 0
19303: EQUAL
19304: OR
19305: IFFALSE 19482
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase ) then
19307: LD_VAR 0 1
19311: PPUSH
19312: CALL_OW 262
19316: PUSH
19317: LD_INT 1
19319: EQUAL
19320: IFFALSE 19337
19322: PUSH
19323: LD_VAR 0 1
19327: PPUSH
19328: CALL_OW 261
19332: PUSH
19333: LD_INT 50
19335: LESS
19336: AND
19337: IFFALSE 19350
19339: PUSH
19340: LD_EXP 68
19344: PPUSH
19345: CALL_OW 302
19349: AND
19350: IFFALSE 19437
// begin ComMoveXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) ;
19352: LD_VAR 0 1
19356: PPUSH
19357: LD_EXP 68
19361: PPUSH
19362: CALL_OW 250
19366: PPUSH
19367: LD_EXP 68
19371: PPUSH
19372: CALL_OW 251
19376: PPUSH
19377: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19381: LD_INT 35
19383: PPUSH
19384: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) < 6 ;
19388: LD_VAR 0 1
19392: PPUSH
19393: LD_EXP 68
19397: PPUSH
19398: CALL_OW 250
19402: PPUSH
19403: LD_EXP 68
19407: PPUSH
19408: CALL_OW 251
19412: PPUSH
19413: CALL_OW 297
19417: PUSH
19418: LD_INT 6
19420: LESS
19421: IFFALSE 19381
// SetFuel ( i , 100 ) ;
19423: LD_VAR 0 1
19427: PPUSH
19428: LD_INT 100
19430: PPUSH
19431: CALL_OW 240
// end else
19435: GO 19482
// if not IsInArea ( i , ruParkingArea ) then
19437: LD_VAR 0 1
19441: PPUSH
19442: LD_EXP 82
19446: PPUSH
19447: CALL_OW 308
19451: NOT
19452: IFFALSE 19470
// ComMoveToArea ( i , ruParkingArea ) else
19454: LD_VAR 0 1
19458: PPUSH
19459: LD_EXP 82
19463: PPUSH
19464: CALL_OW 113
19468: GO 19482
// SetTag ( i , tParking ) ;
19470: LD_VAR 0 1
19474: PPUSH
19475: LD_INT 12
19477: PPUSH
19478: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
19482: LD_VAR 0 1
19486: PPUSH
19487: CALL_OW 110
19491: PUSH
19492: LD_INT 12
19494: EQUAL
19495: IFFALSE 19625
// begin if GetLives ( i ) < 650 then
19497: LD_VAR 0 1
19501: PPUSH
19502: CALL_OW 256
19506: PUSH
19507: LD_INT 650
19509: LESS
19510: IFFALSE 19602
// begin if not IsDrivenBy ( i ) then
19512: LD_VAR 0 1
19516: PPUSH
19517: CALL_OW 311
19521: NOT
19522: IFFALSE 19526
// continue ;
19524: GO 19228
// mech := IsDrivenBy ( i ) ;
19526: LD_ADDR_VAR 0 2
19530: PUSH
19531: LD_VAR 0 1
19535: PPUSH
19536: CALL_OW 311
19540: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19541: LD_VAR 0 2
19545: PPUSH
19546: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19550: LD_VAR 0 2
19554: PPUSH
19555: LD_VAR 0 1
19559: PPUSH
19560: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19564: LD_INT 35
19566: PPUSH
19567: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19571: LD_VAR 0 1
19575: PPUSH
19576: CALL_OW 256
19580: PUSH
19581: LD_INT 1000
19583: EQUAL
19584: IFFALSE 19564
// ComEnterUnit ( mech , i ) ;
19586: LD_VAR 0 2
19590: PPUSH
19591: LD_VAR 0 1
19595: PPUSH
19596: CALL_OW 120
// end else
19600: GO 19625
// if IsDrivenBy ( i ) then
19602: LD_VAR 0 1
19606: PPUSH
19607: CALL_OW 311
19611: IFFALSE 19625
// SetTag ( i , tAttack ) ;
19613: LD_VAR 0 1
19617: PPUSH
19618: LD_INT 13
19620: PPUSH
19621: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
19625: LD_VAR 0 1
19629: PPUSH
19630: CALL_OW 110
19634: PUSH
19635: LD_INT 13
19637: EQUAL
19638: IFFALSE 19769
// begin enemy := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
19640: LD_ADDR_VAR 0 3
19644: PUSH
19645: LD_EXP 66
19649: PPUSH
19650: LD_INT 81
19652: PUSH
19653: LD_INT 3
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PPUSH
19660: CALL_OW 70
19664: ST_TO_ADDR
// if GetLives ( i ) < 650 then
19665: LD_VAR 0 1
19669: PPUSH
19670: CALL_OW 256
19674: PUSH
19675: LD_INT 650
19677: LESS
19678: IFFALSE 19703
// begin ComStop ( i ) ;
19680: LD_VAR 0 1
19684: PPUSH
19685: CALL_OW 141
// SetTag ( i , 0 ) ;
19689: LD_VAR 0 1
19693: PPUSH
19694: LD_INT 0
19696: PPUSH
19697: CALL_OW 109
// continue ;
19701: GO 19228
// end ; if enemy then
19703: LD_VAR 0 3
19707: IFFALSE 19747
// begin if not HasTask ( i ) then
19709: LD_VAR 0 1
19713: PPUSH
19714: CALL_OW 314
19718: NOT
19719: IFFALSE 19745
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
19721: LD_VAR 0 1
19725: PPUSH
19726: LD_VAR 0 3
19730: PPUSH
19731: LD_VAR 0 1
19735: PPUSH
19736: CALL_OW 74
19740: PPUSH
19741: CALL_OW 115
// end else
19745: GO 19769
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
19747: LD_VAR 0 1
19751: PPUSH
19752: LD_INT 105
19754: PUSH
19755: LD_INT 35
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: EMPTY
19763: LIST
19764: PPUSH
19765: CALL 96603 0 2
// end ; end ;
19769: GO 19228
19771: POP
19772: POP
// end ;
19773: PPOPN 3
19775: END
// every 0 0$1 trigger ruTanks2 and ruActiveAttacks do var i , mech , enemy ;
19776: LD_EXP 80
19780: IFFALSE 19788
19782: PUSH
19783: LD_EXP 22
19787: AND
19788: IFFALSE 20363
19790: GO 19792
19792: DISABLE
19793: LD_INT 0
19795: PPUSH
19796: PPUSH
19797: PPUSH
// begin enable ;
19798: ENABLE
// if not ruTanks2 then
19799: LD_EXP 80
19803: NOT
19804: IFFALSE 19808
// exit ;
19806: GO 20363
// for i in ruTanks2 do
19808: LD_ADDR_VAR 0 1
19812: PUSH
19813: LD_EXP 80
19817: PUSH
19818: FOR_IN
19819: IFFALSE 20361
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19821: LD_VAR 0 1
19825: PPUSH
19826: CALL_OW 302
19830: NOT
19831: IFTRUE 19848
19833: PUSH
19834: LD_VAR 0 1
19838: PPUSH
19839: CALL_OW 255
19843: PUSH
19844: LD_INT 3
19846: NONEQUAL
19847: OR
19848: IFFALSE 19868
// begin ruTanks := ruTanks diff i ;
19850: LD_ADDR_EXP 79
19854: PUSH
19855: LD_EXP 79
19859: PUSH
19860: LD_VAR 0 1
19864: DIFF
19865: ST_TO_ADDR
// continue ;
19866: GO 19818
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19868: LD_VAR 0 1
19872: PPUSH
19873: CALL_OW 110
19877: NOT
19878: IFTRUE 19895
19880: PUSH
19881: LD_VAR 0 1
19885: PPUSH
19886: CALL_OW 110
19890: PUSH
19891: LD_INT 0
19893: EQUAL
19894: OR
19895: IFFALSE 20072
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase2 ) then
19897: LD_VAR 0 1
19901: PPUSH
19902: CALL_OW 262
19906: PUSH
19907: LD_INT 1
19909: EQUAL
19910: IFFALSE 19927
19912: PUSH
19913: LD_VAR 0 1
19917: PPUSH
19918: CALL_OW 261
19922: PUSH
19923: LD_INT 50
19925: LESS
19926: AND
19927: IFFALSE 19940
19929: PUSH
19930: LD_EXP 69
19934: PPUSH
19935: CALL_OW 302
19939: AND
19940: IFFALSE 20027
// begin ComMoveXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) ;
19942: LD_VAR 0 1
19946: PPUSH
19947: LD_EXP 69
19951: PPUSH
19952: CALL_OW 250
19956: PPUSH
19957: LD_EXP 69
19961: PPUSH
19962: CALL_OW 251
19966: PPUSH
19967: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19971: LD_INT 35
19973: PPUSH
19974: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) < 6 ;
19978: LD_VAR 0 1
19982: PPUSH
19983: LD_EXP 69
19987: PPUSH
19988: CALL_OW 250
19992: PPUSH
19993: LD_EXP 69
19997: PPUSH
19998: CALL_OW 251
20002: PPUSH
20003: CALL_OW 297
20007: PUSH
20008: LD_INT 6
20010: LESS
20011: IFFALSE 19971
// SetFuel ( i , 100 ) ;
20013: LD_VAR 0 1
20017: PPUSH
20018: LD_INT 100
20020: PPUSH
20021: CALL_OW 240
// end else
20025: GO 20072
// if not IsInArea ( i , ruParkingArea2 ) then
20027: LD_VAR 0 1
20031: PPUSH
20032: LD_EXP 83
20036: PPUSH
20037: CALL_OW 308
20041: NOT
20042: IFFALSE 20060
// ComMoveToArea ( i , ruParkingArea2 ) else
20044: LD_VAR 0 1
20048: PPUSH
20049: LD_EXP 83
20053: PPUSH
20054: CALL_OW 113
20058: GO 20072
// SetTag ( i , tParking ) ;
20060: LD_VAR 0 1
20064: PPUSH
20065: LD_INT 12
20067: PPUSH
20068: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
20072: LD_VAR 0 1
20076: PPUSH
20077: CALL_OW 110
20081: PUSH
20082: LD_INT 12
20084: EQUAL
20085: IFFALSE 20215
// begin if GetLives ( i ) < 650 then
20087: LD_VAR 0 1
20091: PPUSH
20092: CALL_OW 256
20096: PUSH
20097: LD_INT 650
20099: LESS
20100: IFFALSE 20192
// begin if not IsDrivenBy ( i ) then
20102: LD_VAR 0 1
20106: PPUSH
20107: CALL_OW 311
20111: NOT
20112: IFFALSE 20116
// continue ;
20114: GO 19818
// mech := IsDrivenBy ( i ) ;
20116: LD_ADDR_VAR 0 2
20120: PUSH
20121: LD_VAR 0 1
20125: PPUSH
20126: CALL_OW 311
20130: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
20131: LD_VAR 0 2
20135: PPUSH
20136: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
20140: LD_VAR 0 2
20144: PPUSH
20145: LD_VAR 0 1
20149: PPUSH
20150: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
20154: LD_INT 35
20156: PPUSH
20157: CALL_OW 67
// until GetLives ( i ) = 1000 ;
20161: LD_VAR 0 1
20165: PPUSH
20166: CALL_OW 256
20170: PUSH
20171: LD_INT 1000
20173: EQUAL
20174: IFFALSE 20154
// ComEnterUnit ( mech , i ) ;
20176: LD_VAR 0 2
20180: PPUSH
20181: LD_VAR 0 1
20185: PPUSH
20186: CALL_OW 120
// end else
20190: GO 20215
// if IsDrivenBy ( i ) then
20192: LD_VAR 0 1
20196: PPUSH
20197: CALL_OW 311
20201: IFFALSE 20215
// SetTag ( i , tAttack ) ;
20203: LD_VAR 0 1
20207: PPUSH
20208: LD_INT 13
20210: PPUSH
20211: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
20215: LD_VAR 0 1
20219: PPUSH
20220: CALL_OW 110
20224: PUSH
20225: LD_INT 13
20227: EQUAL
20228: IFFALSE 20359
// begin enemy := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
20230: LD_ADDR_VAR 0 3
20234: PUSH
20235: LD_EXP 67
20239: PPUSH
20240: LD_INT 81
20242: PUSH
20243: LD_INT 3
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PPUSH
20250: CALL_OW 70
20254: ST_TO_ADDR
// if GetLives ( i ) < 650 then
20255: LD_VAR 0 1
20259: PPUSH
20260: CALL_OW 256
20264: PUSH
20265: LD_INT 650
20267: LESS
20268: IFFALSE 20293
// begin ComStop ( i ) ;
20270: LD_VAR 0 1
20274: PPUSH
20275: CALL_OW 141
// SetTag ( i , 0 ) ;
20279: LD_VAR 0 1
20283: PPUSH
20284: LD_INT 0
20286: PPUSH
20287: CALL_OW 109
// continue ;
20291: GO 19818
// end ; if enemy then
20293: LD_VAR 0 3
20297: IFFALSE 20337
// begin if not HasTask ( i ) then
20299: LD_VAR 0 1
20303: PPUSH
20304: CALL_OW 314
20308: NOT
20309: IFFALSE 20335
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
20311: LD_VAR 0 1
20315: PPUSH
20316: LD_VAR 0 3
20320: PPUSH
20321: LD_VAR 0 1
20325: PPUSH
20326: CALL_OW 74
20330: PPUSH
20331: CALL_OW 115
// end else
20335: GO 20359
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20337: LD_VAR 0 1
20341: PPUSH
20342: LD_INT 105
20344: PUSH
20345: LD_INT 35
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: EMPTY
20353: LIST
20354: PPUSH
20355: CALL 96603 0 2
// end ; end ;
20359: GO 19818
20361: POP
20362: POP
// end ;
20363: PPOPN 3
20365: END
// every 5 5$00 trigger Count ( ruExtraTanks ) do
20366: LD_EXP 81
20370: PPUSH
20371: CALL 57905 0 1
20375: IFFALSE 20388
20377: GO 20379
20379: DISABLE
// begin enable ;
20380: ENABLE
// RaiseSailEvent ( EExtraAttack ) ;
20381: LD_INT 106
20383: PPUSH
20384: CALL_OW 427
// end ;
20388: END
// export function RussianExtraAttack ; var i , tmp ; begin
20389: LD_INT 0
20391: PPUSH
20392: PPUSH
20393: PPUSH
// tmp := UnitFilter ( ruExtraTanks , [ f_ok ] ) ;
20394: LD_ADDR_VAR 0 3
20398: PUSH
20399: LD_EXP 81
20403: PPUSH
20404: LD_INT 50
20406: PUSH
20407: EMPTY
20408: LIST
20409: PPUSH
20410: CALL_OW 72
20414: ST_TO_ADDR
// ruExtraTanks := ruExtraTanks diff tmp ;
20415: LD_ADDR_EXP 81
20419: PUSH
20420: LD_EXP 81
20424: PUSH
20425: LD_VAR 0 3
20429: DIFF
20430: ST_TO_ADDR
// ComAgressiveMove ( tmp , 105 , 35 ) ;
20431: LD_VAR 0 3
20435: PPUSH
20436: LD_INT 105
20438: PPUSH
20439: LD_INT 35
20441: PPUSH
20442: CALL_OW 114
// wait ( 0 0$5 ) ;
20446: LD_INT 175
20448: PPUSH
20449: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20453: LD_INT 35
20455: PPUSH
20456: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20460: LD_ADDR_VAR 0 3
20464: PUSH
20465: LD_VAR 0 3
20469: PPUSH
20470: LD_INT 50
20472: PUSH
20473: EMPTY
20474: LIST
20475: PPUSH
20476: CALL_OW 72
20480: ST_TO_ADDR
// for i in tmp do
20481: LD_ADDR_VAR 0 2
20485: PUSH
20486: LD_VAR 0 3
20490: PUSH
20491: FOR_IN
20492: IFFALSE 20518
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20494: LD_VAR 0 2
20498: PPUSH
20499: LD_INT 105
20501: PUSH
20502: LD_INT 35
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: EMPTY
20510: LIST
20511: PPUSH
20512: CALL 96603 0 2
20516: GO 20491
20518: POP
20519: POP
// until not tmp ;
20520: LD_VAR 0 3
20524: NOT
20525: IFFALSE 20453
// end ;
20527: LD_VAR 0 1
20531: RET
// export function PrepareRussianAttack ( strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
20532: LD_INT 0
20534: PPUSH
20535: PPUSH
20536: PPUSH
20537: PPUSH
20538: PPUSH
20539: PPUSH
20540: PPUSH
20541: PPUSH
20542: PPUSH
20543: PPUSH
// result := [ ] ;
20544: LD_ADDR_VAR 0 2
20548: PUSH
20549: EMPTY
20550: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
20551: LD_ADDR_VAR 0 7
20555: PUSH
20556: LD_INT 4
20558: PUSH
20559: LD_INT 5
20561: PUSH
20562: LD_INT 6
20564: PUSH
20565: LD_INT 7
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: PUSH
20574: LD_OWVAR 67
20578: ARRAY
20579: ST_TO_ADDR
// area := arAttackSpawn2Area ;
20580: LD_ADDR_VAR 0 8
20584: PUSH
20585: LD_INT 19
20587: ST_TO_ADDR
// parking := ruGatPointArea ;
20588: LD_ADDR_VAR 0 9
20592: PUSH
20593: LD_INT 32
20595: ST_TO_ADDR
// dir := 5 ;
20596: LD_ADDR_VAR 0 10
20600: PUSH
20601: LD_INT 5
20603: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) then
20604: LD_VAR 0 8
20608: PPUSH
20609: LD_INT 2
20611: PUSH
20612: LD_INT 22
20614: PUSH
20615: LD_INT 0
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 22
20624: PUSH
20625: LD_INT 6
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: LIST
20636: PPUSH
20637: CALL_OW 70
20641: IFFALSE 20702
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) do
20643: LD_ADDR_VAR 0 3
20647: PUSH
20648: LD_VAR 0 8
20652: PPUSH
20653: LD_INT 2
20655: PUSH
20656: LD_INT 22
20658: PUSH
20659: LD_INT 0
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 22
20668: PUSH
20669: LD_INT 6
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: LIST
20680: PPUSH
20681: CALL_OW 70
20685: PUSH
20686: FOR_IN
20687: IFFALSE 20700
// RemoveUnit ( i ) ;
20689: LD_VAR 0 3
20693: PPUSH
20694: CALL_OW 64
20698: GO 20686
20700: POP
20701: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) then
20702: LD_VAR 0 8
20706: PPUSH
20707: LD_INT 3
20709: PUSH
20710: LD_INT 21
20712: PUSH
20713: LD_INT 1
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 22
20726: PUSH
20727: LD_INT 1
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PPUSH
20738: CALL_OW 70
20742: IFFALSE 20806
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) do
20744: LD_ADDR_VAR 0 3
20748: PUSH
20749: LD_VAR 0 8
20753: PPUSH
20754: LD_INT 3
20756: PUSH
20757: LD_INT 21
20759: PUSH
20760: LD_INT 1
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 22
20773: PUSH
20774: LD_INT 1
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PPUSH
20785: CALL_OW 70
20789: PUSH
20790: FOR_IN
20791: IFFALSE 20804
// KillUnit ( i ) ;
20793: LD_VAR 0 3
20797: PPUSH
20798: CALL_OW 66
20802: GO 20790
20804: POP
20805: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) then
20806: LD_VAR 0 8
20810: PPUSH
20811: LD_INT 21
20813: PUSH
20814: LD_INT 1
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 22
20823: PUSH
20824: LD_INT 1
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PPUSH
20835: CALL_OW 70
20839: IFFALSE 20902
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) do
20841: LD_ADDR_VAR 0 3
20845: PUSH
20846: LD_VAR 0 8
20850: PPUSH
20851: LD_INT 21
20853: PUSH
20854: LD_INT 1
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 22
20863: PUSH
20864: LD_INT 1
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PPUSH
20875: CALL_OW 70
20879: PUSH
20880: FOR_IN
20881: IFFALSE 20900
// ComMoveXY ( i , 92 , 92 ) ;
20883: LD_VAR 0 3
20887: PPUSH
20888: LD_INT 92
20890: PPUSH
20891: LD_INT 92
20893: PPUSH
20894: CALL_OW 111
20898: GO 20880
20900: POP
20901: POP
// repeat wait ( 0 0$1 ) ;
20902: LD_INT 35
20904: PPUSH
20905: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
20909: LD_VAR 0 8
20913: PPUSH
20914: LD_INT 50
20916: PUSH
20917: EMPTY
20918: LIST
20919: PPUSH
20920: CALL_OW 70
20924: NOT
20925: IFFALSE 20902
// InitHC_All ( ) ;
20927: CALL_OW 584
// InitVc ;
20931: CALL_OW 20
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + strength do
20935: LD_ADDR_VAR 0 3
20939: PUSH
20940: DOUBLE
20941: LD_INT 1
20943: DEC
20944: ST_TO_ADDR
20945: LD_INT 3
20947: PUSH
20948: LD_INT 4
20950: PUSH
20951: LD_INT 4
20953: PUSH
20954: LD_INT 5
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: PUSH
20963: LD_OWVAR 67
20967: ARRAY
20968: PUSH
20969: LD_VAR 0 1
20973: PLUS
20974: PUSH
20975: FOR_TO
20976: IFFALSE 21283
// begin uc_side := 6 ;
20978: LD_ADDR_OWVAR 20
20982: PUSH
20983: LD_INT 6
20985: ST_TO_ADDR
// uc_nation := nation_russian ;
20986: LD_ADDR_OWVAR 21
20990: PUSH
20991: LD_INT 3
20993: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer , control_computer ] [ rand ( 1 , 4 ) ] ;
20994: LD_ADDR_VAR 0 11
20998: PUSH
20999: LD_INT 1
21001: PUSH
21002: LD_INT 3
21004: PUSH
21005: LD_INT 3
21007: PUSH
21008: LD_INT 3
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 1
21019: PPUSH
21020: LD_INT 4
21022: PPUSH
21023: CALL_OW 12
21027: ARRAY
21028: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
21029: LD_INT 22
21031: PUSH
21032: LD_INT 24
21034: PUSH
21035: LD_INT 23
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: LIST
21042: PUSH
21043: LD_VAR 0 3
21047: PUSH
21048: LD_INT 3
21050: MOD
21051: PUSH
21052: LD_INT 1
21054: PLUS
21055: ARRAY
21056: PPUSH
21057: LD_INT 3
21059: PUSH
21060: LD_INT 1
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 1
21069: PPUSH
21070: LD_INT 2
21072: PPUSH
21073: CALL_OW 12
21077: ARRAY
21078: PPUSH
21079: LD_VAR 0 11
21083: PPUSH
21084: LD_INT 45
21086: PUSH
21087: LD_INT 46
21089: PUSH
21090: LD_INT 43
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: LIST
21097: PUSH
21098: LD_VAR 0 3
21102: PUSH
21103: LD_INT 3
21105: MOD
21106: PUSH
21107: LD_INT 1
21109: PLUS
21110: ARRAY
21111: PPUSH
21112: LD_INT 100
21114: PPUSH
21115: CALL 60667 0 5
// veh := CreateVehicle ;
21119: LD_ADDR_VAR 0 6
21123: PUSH
21124: CALL_OW 45
21128: ST_TO_ADDR
// SetDir ( veh , dir ) ;
21129: LD_VAR 0 6
21133: PPUSH
21134: LD_VAR 0 10
21138: PPUSH
21139: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
21143: LD_VAR 0 6
21147: PPUSH
21148: LD_VAR 0 8
21152: PPUSH
21153: LD_INT 0
21155: PPUSH
21156: CALL_OW 49
// if control = control_manual then
21160: LD_VAR 0 11
21164: PUSH
21165: LD_INT 1
21167: EQUAL
21168: IFFALSE 21222
// begin uc_side := 6 ;
21170: LD_ADDR_OWVAR 20
21174: PUSH
21175: LD_INT 6
21177: ST_TO_ADDR
// uc_nation := nation_russian ;
21178: LD_ADDR_OWVAR 21
21182: PUSH
21183: LD_INT 3
21185: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
21186: LD_INT 0
21188: PPUSH
21189: LD_VAR 0 7
21193: PPUSH
21194: CALL_OW 383
// un := CreateHuman ;
21198: LD_ADDR_VAR 0 5
21202: PUSH
21203: CALL_OW 44
21207: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
21208: LD_VAR 0 5
21212: PPUSH
21213: LD_VAR 0 6
21217: PPUSH
21218: CALL_OW 52
// end ; repeat ComMoveToArea ( veh , parking ) ;
21222: LD_VAR 0 6
21226: PPUSH
21227: LD_VAR 0 9
21231: PPUSH
21232: CALL_OW 113
// wait ( 0 0$3 ) ;
21236: LD_INT 105
21238: PPUSH
21239: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
21243: LD_VAR 0 8
21247: PPUSH
21248: LD_INT 50
21250: PUSH
21251: EMPTY
21252: LIST
21253: PPUSH
21254: CALL_OW 70
21258: NOT
21259: IFFALSE 21222
// result := Join ( result , veh ) ;
21261: LD_ADDR_VAR 0 2
21265: PUSH
21266: LD_VAR 0 2
21270: PPUSH
21271: LD_VAR 0 6
21275: PPUSH
21276: CALL 93837 0 2
21280: ST_TO_ADDR
// end ;
21281: GO 20975
21283: POP
21284: POP
// for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
21285: LD_ADDR_VAR 0 3
21289: PUSH
21290: DOUBLE
21291: LD_INT 1
21293: DEC
21294: ST_TO_ADDR
21295: LD_INT 2
21297: PUSH
21298: LD_INT 2
21300: PUSH
21301: LD_INT 3
21303: PUSH
21304: LD_INT 4
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: PUSH
21313: LD_OWVAR 67
21317: ARRAY
21318: PUSH
21319: FOR_TO
21320: IFFALSE 21476
// begin uc_side := 6 ;
21322: LD_ADDR_OWVAR 20
21326: PUSH
21327: LD_INT 6
21329: ST_TO_ADDR
// uc_nation := nation_russian ;
21330: LD_ADDR_OWVAR 21
21334: PUSH
21335: LD_INT 3
21337: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
21338: LD_INT 0
21340: PPUSH
21341: LD_VAR 0 7
21345: PPUSH
21346: CALL_OW 381
// un := CreateHuman ;
21350: LD_ADDR_VAR 0 5
21354: PUSH
21355: CALL_OW 44
21359: ST_TO_ADDR
// if Prob ( [ 35 , 60 , 70 , 80 ] [ Difficulty ] ) then
21360: LD_INT 35
21362: PUSH
21363: LD_INT 60
21365: PUSH
21366: LD_INT 70
21368: PUSH
21369: LD_INT 80
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: PUSH
21378: LD_OWVAR 67
21382: ARRAY
21383: PPUSH
21384: CALL_OW 13
21388: IFFALSE 21402
// SetClass ( un , class_bazooker ) ;
21390: LD_VAR 0 5
21394: PPUSH
21395: LD_INT 9
21397: PPUSH
21398: CALL_OW 336
// SetDir ( un , dir ) ;
21402: LD_VAR 0 5
21406: PPUSH
21407: LD_VAR 0 10
21411: PPUSH
21412: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
21416: LD_VAR 0 5
21420: PPUSH
21421: LD_VAR 0 8
21425: PPUSH
21426: LD_INT 0
21428: PPUSH
21429: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
21433: LD_VAR 0 5
21437: PPUSH
21438: LD_VAR 0 9
21442: PPUSH
21443: CALL_OW 113
// wait ( 0 0$1 ) ;
21447: LD_INT 35
21449: PPUSH
21450: CALL_OW 67
// result := Join ( result , un ) ;
21454: LD_ADDR_VAR 0 2
21458: PUSH
21459: LD_VAR 0 2
21463: PPUSH
21464: LD_VAR 0 5
21468: PPUSH
21469: CALL 93837 0 2
21473: ST_TO_ADDR
// end ;
21474: GO 21319
21476: POP
21477: POP
// end ;
21478: LD_VAR 0 2
21482: RET
// export function SendRussianAttack ( wave ) ; var path , attackers , e , i , enemy ; begin
21483: LD_INT 0
21485: PPUSH
21486: PPUSH
21487: PPUSH
21488: PPUSH
21489: PPUSH
21490: PPUSH
// russianWaveAttack := Inc ( russianWaveAttack ) ;
21491: LD_ADDR_EXP 18
21495: PUSH
21496: LD_EXP 18
21500: PPUSH
21501: CALL 95210 0 1
21505: ST_TO_ADDR
// path := [ [ 99 , 91 ] , [ 78 , 50 ] , [ 91 , 45 ] ] ;
21506: LD_ADDR_VAR 0 3
21510: PUSH
21511: LD_INT 99
21513: PUSH
21514: LD_INT 91
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 78
21523: PUSH
21524: LD_INT 50
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 91
21533: PUSH
21534: LD_INT 45
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: LIST
21545: ST_TO_ADDR
// attackers := PrepareRussianAttack ( wave ) ;
21546: LD_ADDR_VAR 0 4
21550: PUSH
21551: LD_VAR 0 1
21555: PPUSH
21556: CALL 20532 0 1
21560: ST_TO_ADDR
// ComAgressiveMove ( UnitFilter ( attackers , [ f_type , unit_human ] ) , 108 , 60 ) ;
21561: LD_VAR 0 4
21565: PPUSH
21566: LD_INT 21
21568: PUSH
21569: LD_INT 1
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PPUSH
21576: CALL_OW 72
21580: PPUSH
21581: LD_INT 108
21583: PPUSH
21584: LD_INT 60
21586: PPUSH
21587: CALL_OW 114
// DRussianNextAttack ;
21591: CALL 28732 0 0
// repeat wait ( 0 0$2 ) ;
21595: LD_INT 70
21597: PPUSH
21598: CALL_OW 67
// enemy := FilterAllUnits ( [ f_enemy , 6 ] ) ;
21602: LD_ADDR_VAR 0 7
21606: PUSH
21607: LD_INT 81
21609: PUSH
21610: LD_INT 6
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PPUSH
21617: CALL_OW 69
21621: ST_TO_ADDR
// attackers := UnitFilter ( attackers , [ f_ok ] ) ;
21622: LD_ADDR_VAR 0 4
21626: PUSH
21627: LD_VAR 0 4
21631: PPUSH
21632: LD_INT 50
21634: PUSH
21635: EMPTY
21636: LIST
21637: PPUSH
21638: CALL_OW 72
21642: ST_TO_ADDR
// for i in attackers do
21643: LD_ADDR_VAR 0 6
21647: PUSH
21648: LD_VAR 0 4
21652: PUSH
21653: FOR_IN
21654: IFFALSE 22032
// begin if not IsOk ( i ) then
21656: LD_VAR 0 6
21660: PPUSH
21661: CALL_OW 302
21665: NOT
21666: IFFALSE 21686
// begin attackers := attackers diff i ;
21668: LD_ADDR_VAR 0 4
21672: PUSH
21673: LD_VAR 0 4
21677: PUSH
21678: LD_VAR 0 6
21682: DIFF
21683: ST_TO_ADDR
// continue ;
21684: GO 21653
// end ; if GetType ( i ) = unit_vehicle then
21686: LD_VAR 0 6
21690: PPUSH
21691: CALL_OW 247
21695: PUSH
21696: LD_INT 2
21698: EQUAL
21699: IFFALSE 21717
// AgressiveMove ( i , path ) else
21701: LD_VAR 0 6
21705: PPUSH
21706: LD_VAR 0 3
21710: PPUSH
21711: CALL 96603 0 2
21715: GO 22030
// begin if GetClass ( i ) = class_bazooker then
21717: LD_VAR 0 6
21721: PPUSH
21722: CALL_OW 257
21726: PUSH
21727: LD_INT 9
21729: EQUAL
21730: IFFALSE 22006
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
21732: LD_VAR 0 6
21736: PPUSH
21737: LD_VAR 0 7
21741: PPUSH
21742: LD_VAR 0 6
21746: PPUSH
21747: CALL_OW 74
21751: PPUSH
21752: CALL_OW 296
21756: PUSH
21757: LD_INT 12
21759: GREATER
21760: IFFALSE 21788
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21762: LD_VAR 0 6
21766: PPUSH
21767: LD_VAR 0 7
21771: PPUSH
21772: LD_VAR 0 6
21776: PPUSH
21777: CALL_OW 74
21781: PPUSH
21782: CALL 98235 0 2
21786: GO 22004
// begin e := NearestUnitToUnit ( enemy , i ) ;
21788: LD_ADDR_VAR 0 5
21792: PUSH
21793: LD_VAR 0 7
21797: PPUSH
21798: LD_VAR 0 6
21802: PPUSH
21803: CALL_OW 74
21807: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
21808: LD_INT 1
21810: PPUSH
21811: LD_INT 3
21813: PPUSH
21814: CALL_OW 12
21818: PUSH
21819: LD_INT 1
21821: DOUBLE
21822: EQUAL
21823: IFTRUE 21827
21825: GO 21844
21827: POP
// ComAttackUnit ( i , e ) ; 2 :
21828: LD_VAR 0 6
21832: PPUSH
21833: LD_VAR 0 5
21837: PPUSH
21838: CALL_OW 115
21842: GO 22004
21844: LD_INT 2
21846: DOUBLE
21847: EQUAL
21848: IFTRUE 21852
21850: GO 21932
21852: POP
// begin ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ;
21853: LD_VAR 0 6
21857: PPUSH
21858: LD_VAR 0 5
21862: PPUSH
21863: CALL_OW 250
21867: PPUSH
21868: LD_VAR 0 5
21872: PPUSH
21873: CALL_OW 251
21877: PPUSH
21878: CALL_OW 153
// if GetType ( e ) <> unit_building and not dialogRussianSpaceAmmo then
21882: LD_VAR 0 5
21886: PPUSH
21887: CALL_OW 247
21891: PUSH
21892: LD_INT 3
21894: NONEQUAL
21895: IFFALSE 21904
21897: PUSH
21898: LD_EXP 17
21902: NOT
21903: AND
21904: IFFALSE 21930
// begin dialogRussianSpaceAmmo := true ;
21906: LD_ADDR_EXP 17
21910: PUSH
21911: LD_INT 1
21913: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21914: LD_INT 210
21916: PPUSH
21917: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21921: LD_VAR 0 5
21925: PPUSH
21926: CALL 28779 0 1
// end ; end ; 3 :
21930: GO 22004
21932: LD_INT 3
21934: DOUBLE
21935: EQUAL
21936: IFTRUE 21940
21938: GO 22003
21940: POP
// begin ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ;
21941: LD_VAR 0 6
21945: PPUSH
21946: LD_VAR 0 5
21950: PPUSH
21951: CALL_OW 250
21955: PPUSH
21956: LD_VAR 0 5
21960: PPUSH
21961: CALL_OW 251
21965: PPUSH
21966: CALL_OW 154
// if not dialogRussianSpaceAmmo then
21970: LD_EXP 17
21974: NOT
21975: IFFALSE 22001
// begin dialogRussianSpaceAmmo := true ;
21977: LD_ADDR_EXP 17
21981: PUSH
21982: LD_INT 1
21984: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21985: LD_INT 210
21987: PPUSH
21988: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21992: LD_VAR 0 5
21996: PPUSH
21997: CALL 28779 0 1
// end ; end ; end ;
22001: GO 22004
22003: POP
// end ; end else
22004: GO 22030
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
22006: LD_VAR 0 6
22010: PPUSH
22011: LD_VAR 0 7
22015: PPUSH
22016: LD_VAR 0 6
22020: PPUSH
22021: CALL_OW 74
22025: PPUSH
22026: CALL 98235 0 2
// end ; end ;
22030: GO 21653
22032: POP
22033: POP
// until not attackers ;
22034: LD_VAR 0 4
22038: NOT
22039: IFFALSE 21595
// end ;
22041: LD_VAR 0 2
22045: RET
// every 6 6$30 trigger epsilon and firstAttack do var i , un , tmp ;
22046: LD_EXP 10
22050: IFFALSE 22058
22052: PUSH
22053: LD_EXP 16
22057: AND
22058: IFFALSE 22170
22060: GO 22062
22062: DISABLE
22063: LD_INT 0
22065: PPUSH
22066: PPUSH
22067: PPUSH
// begin InitHC_All ( ) ;
22068: CALL_OW 584
// for i := 1 to 3 do
22072: LD_ADDR_VAR 0 1
22076: PUSH
22077: DOUBLE
22078: LD_INT 1
22080: DEC
22081: ST_TO_ADDR
22082: LD_INT 3
22084: PUSH
22085: FOR_TO
22086: IFFALSE 22168
// begin uc_side := 6 ;
22088: LD_ADDR_OWVAR 20
22092: PUSH
22093: LD_INT 6
22095: ST_TO_ADDR
// uc_nation := nation_russian ;
22096: LD_ADDR_OWVAR 21
22100: PUSH
22101: LD_INT 3
22103: ST_TO_ADDR
// PrepareSoldier ( false , 3 ) ;
22104: LD_INT 0
22106: PPUSH
22107: LD_INT 3
22109: PPUSH
22110: CALL_OW 381
// un := CreateHuman ;
22114: LD_ADDR_VAR 0 2
22118: PUSH
22119: CALL_OW 44
22123: ST_TO_ADDR
// SetDir ( un , 2 ) ;
22124: LD_VAR 0 2
22128: PPUSH
22129: LD_INT 2
22131: PPUSH
22132: CALL_OW 233
// PlaceUnitArea ( un , ruNorthSpawnArea , false ) ;
22136: LD_VAR 0 2
22140: PPUSH
22141: LD_INT 33
22143: PPUSH
22144: LD_INT 0
22146: PPUSH
22147: CALL_OW 49
// ComAgressiveMove ( un , 52 , 16 ) ;
22151: LD_VAR 0 2
22155: PPUSH
22156: LD_INT 52
22158: PPUSH
22159: LD_INT 16
22161: PPUSH
22162: CALL_OW 114
// end ;
22166: GO 22085
22168: POP
22169: POP
// end ;
22170: PPOPN 3
22172: END
// every 5 5$00 trigger IsOk ( ruBase ) and not ruTransportDestroyed do var cargo ;
22173: LD_EXP 68
22177: PPUSH
22178: CALL_OW 302
22182: IFFALSE 22191
22184: PUSH
22185: LD_EXP 78
22189: NOT
22190: AND
22191: IFFALSE 22430
22193: GO 22195
22195: DISABLE
22196: LD_INT 0
22198: PPUSH
// begin enable ;
22199: ENABLE
// uc_side := 3 ;
22200: LD_ADDR_OWVAR 20
22204: PUSH
22205: LD_INT 3
22207: ST_TO_ADDR
// uc_nation := nation_russian ;
22208: LD_ADDR_OWVAR 21
22212: PUSH
22213: LD_INT 3
22215: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
22216: LD_INT 22
22218: PPUSH
22219: LD_INT 3
22221: PPUSH
22222: LD_INT 3
22224: PPUSH
22225: LD_INT 51
22227: PPUSH
22228: LD_INT 100
22230: PPUSH
22231: CALL 60667 0 5
// cargo := CreateVehicle ;
22235: LD_ADDR_VAR 0 1
22239: PUSH
22240: CALL_OW 45
22244: ST_TO_ADDR
// SetDir ( cargo , 5 ) ;
22245: LD_VAR 0 1
22249: PPUSH
22250: LD_INT 5
22252: PPUSH
22253: CALL_OW 233
// PlaceUnitXY ( cargo , 187 , 117 , false ) ;
22257: LD_VAR 0 1
22261: PPUSH
22262: LD_INT 187
22264: PPUSH
22265: LD_INT 117
22267: PPUSH
22268: LD_INT 0
22270: PPUSH
22271: CALL_OW 48
// SetCargo ( cargo , mat_cans , 100 ) ;
22275: LD_VAR 0 1
22279: PPUSH
22280: LD_INT 1
22282: PPUSH
22283: LD_INT 100
22285: PPUSH
22286: CALL_OW 290
// ComMoveUnit ( cargo , ruBase ) ;
22290: LD_VAR 0 1
22294: PPUSH
22295: LD_EXP 68
22299: PPUSH
22300: CALL_OW 112
// AddComGive ( cargo , ruBase ) ;
22304: LD_VAR 0 1
22308: PPUSH
22309: LD_EXP 68
22313: PPUSH
22314: CALL_OW 221
// AddComMoveXY ( cargo , 187 , 117 ) ;
22318: LD_VAR 0 1
22322: PPUSH
22323: LD_INT 187
22325: PPUSH
22326: LD_INT 117
22328: PPUSH
22329: CALL_OW 171
// wait ( 0 0$10 ) ;
22333: LD_INT 350
22335: PPUSH
22336: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22340: LD_INT 35
22342: PPUSH
22343: CALL_OW 67
// if not HasTask ( cargo ) then
22347: LD_VAR 0 1
22351: PPUSH
22352: CALL_OW 314
22356: NOT
22357: IFFALSE 22374
// ComMoveXY ( cargo , 187 , 117 ) ;
22359: LD_VAR 0 1
22363: PPUSH
22364: LD_INT 187
22366: PPUSH
22367: LD_INT 117
22369: PPUSH
22370: CALL_OW 111
// until IsDead ( cargo ) or IsAt ( cargo , 187 , 117 ) ;
22374: LD_VAR 0 1
22378: PPUSH
22379: CALL_OW 301
22383: IFTRUE 22402
22385: PUSH
22386: LD_VAR 0 1
22390: PPUSH
22391: LD_INT 187
22393: PPUSH
22394: LD_INT 117
22396: PPUSH
22397: CALL_OW 307
22401: OR
22402: IFFALSE 22340
// if IsAt ( cargo , 187 , 117 ) then
22404: LD_VAR 0 1
22408: PPUSH
22409: LD_INT 187
22411: PPUSH
22412: LD_INT 117
22414: PPUSH
22415: CALL_OW 307
22419: IFFALSE 22430
// RemoveUnit ( cargo ) ;
22421: LD_VAR 0 1
22425: PPUSH
22426: CALL_OW 64
// end ; end_of_file
22430: PPOPN 1
22432: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
22433: LD_VAR 0 1
22437: PPUSH
22438: CALL 50279 0 1
// if unit = Dietrich and not arabianAttack then
22442: LD_VAR 0 1
22446: PUSH
22447: LD_EXP 50
22451: EQUAL
22452: IFFALSE 22461
22454: PUSH
22455: LD_EXP 4
22459: NOT
22460: AND
22461: IFFALSE 22470
// YouLost ( ArabDefeated ) ;
22463: LD_STRING ArabDefeated
22465: PPUSH
22466: CALL_OW 104
// if unit in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) and not arabianAttack then
22470: LD_VAR 0 1
22474: PUSH
22475: LD_INT 22
22477: PUSH
22478: LD_INT 2
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 25
22487: PUSH
22488: LD_INT 4
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PPUSH
22499: CALL_OW 69
22503: IN
22504: IFFALSE 22513
22506: PUSH
22507: LD_EXP 4
22511: NOT
22512: AND
22513: IFFALSE 22522
// YouLost ( ArabDefeated ) ;
22515: LD_STRING ArabDefeated
22517: PPUSH
22518: CALL_OW 104
// if unit in JMMSquad then
22522: LD_VAR 0 1
22526: PUSH
22527: LD_EXP 45
22531: IN
22532: IFFALSE 22550
// JMMSquad := JMMSquad diff unit ;
22534: LD_ADDR_EXP 45
22538: PUSH
22539: LD_EXP 45
22543: PUSH
22544: LD_VAR 0 1
22548: DIFF
22549: ST_TO_ADDR
// if unit = Truman then
22550: LD_VAR 0 1
22554: PUSH
22555: LD_EXP 43
22559: EQUAL
22560: IFFALSE 22569
// YouLost ( Powell ) ;
22562: LD_STRING Powell
22564: PPUSH
22565: CALL_OW 104
// if unit = JMM then
22569: LD_VAR 0 1
22573: PUSH
22574: LD_EXP 23
22578: EQUAL
22579: IFFALSE 22588
// YouLost ( JMM ) ;
22581: LD_STRING JMM
22583: PPUSH
22584: CALL_OW 104
// if unit in arEscapist then
22588: LD_VAR 0 1
22592: PUSH
22593: LD_EXP 56
22597: IN
22598: IFFALSE 22616
// arEscapist := arEscapist diff unit ;
22600: LD_ADDR_EXP 56
22604: PUSH
22605: LD_EXP 56
22609: PUSH
22610: LD_VAR 0 1
22614: DIFF
22615: ST_TO_ADDR
// if unit in arAttackersInf then
22616: LD_VAR 0 1
22620: PUSH
22621: LD_EXP 57
22625: IN
22626: IFFALSE 22644
// arAttackersInf := arAttackersInf diff unit ;
22628: LD_ADDR_EXP 57
22632: PUSH
22633: LD_EXP 57
22637: PUSH
22638: LD_VAR 0 1
22642: DIFF
22643: ST_TO_ADDR
// if unit in arAttackersVeh then
22644: LD_VAR 0 1
22648: PUSH
22649: LD_EXP 58
22653: IN
22654: IFFALSE 22672
// arAttackersVeh := arAttackersVeh diff unit ;
22656: LD_ADDR_EXP 58
22660: PUSH
22661: LD_EXP 58
22665: PUSH
22666: LD_VAR 0 1
22670: DIFF
22671: ST_TO_ADDR
// if unit = Khatam then
22672: LD_VAR 0 1
22676: PUSH
22677: LD_EXP 36
22681: EQUAL
22682: IFFALSE 22692
// khatamStatus := false ;
22684: LD_ADDR_EXP 5
22688: PUSH
22689: LD_INT 0
22691: ST_TO_ADDR
// if unit = epsilon then
22692: LD_VAR 0 1
22696: PUSH
22697: LD_EXP 10
22701: EQUAL
22702: IFFALSE 22733
// begin hasBase := false ;
22704: LD_ADDR_EXP 9
22708: PUSH
22709: LD_INT 0
22711: ST_TO_ADDR
// epsilon := 0 ;
22712: LD_ADDR_EXP 10
22716: PUSH
22717: LD_INT 0
22719: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
22720: LD_INT 0
22722: PPUSH
22723: LD_INT 1
22725: PPUSH
22726: LD_INT 1
22728: PPUSH
22729: CALL_OW 324
// end ; if unit = Khatam then
22733: LD_VAR 0 1
22737: PUSH
22738: LD_EXP 36
22742: EQUAL
22743: IFFALSE 22755
// SaveVariable ( 0 , 10_KhatamStatus_1 ) ;
22745: LD_INT 0
22747: PPUSH
22748: LD_STRING 10_KhatamStatus_1
22750: PPUSH
22751: CALL_OW 39
// if unit in ruForces then
22755: LD_VAR 0 1
22759: PUSH
22760: LD_EXP 59
22764: IN
22765: IFFALSE 22783
// ruForces := ruForces diff unit ;
22767: LD_ADDR_EXP 59
22771: PUSH
22772: LD_EXP 59
22776: PUSH
22777: LD_VAR 0 1
22781: DIFF
22782: ST_TO_ADDR
// if unit in ruForces2 then
22783: LD_VAR 0 1
22787: PUSH
22788: LD_EXP 60
22792: IN
22793: IFFALSE 22811
// ruForces2 := ruForces2 diff unit ;
22795: LD_ADDR_EXP 60
22799: PUSH
22800: LD_EXP 60
22804: PUSH
22805: LD_VAR 0 1
22809: DIFF
22810: ST_TO_ADDR
// if unit in ruTanks then
22811: LD_VAR 0 1
22815: PUSH
22816: LD_EXP 79
22820: IN
22821: IFFALSE 22839
// ruTanks := ruTanks diff unit ;
22823: LD_ADDR_EXP 79
22827: PUSH
22828: LD_EXP 79
22832: PUSH
22833: LD_VAR 0 1
22837: DIFF
22838: ST_TO_ADDR
// if unit in ruTanks2 then
22839: LD_VAR 0 1
22843: PUSH
22844: LD_EXP 80
22848: IN
22849: IFFALSE 22867
// ruTanks2 := ruTanks2 diff unit ;
22851: LD_ADDR_EXP 80
22855: PUSH
22856: LD_EXP 80
22860: PUSH
22861: LD_VAR 0 1
22865: DIFF
22866: ST_TO_ADDR
// if unit in ruExtraTanks then
22867: LD_VAR 0 1
22871: PUSH
22872: LD_EXP 81
22876: IN
22877: IFFALSE 22895
// ruExtraTanks := ruExtraTanks diff unit ;
22879: LD_ADDR_EXP 81
22883: PUSH
22884: LD_EXP 81
22888: PUSH
22889: LD_VAR 0 1
22893: DIFF
22894: ST_TO_ADDR
// if unit in ruMech then
22895: LD_VAR 0 1
22899: PUSH
22900: LD_EXP 63
22904: IN
22905: IFFALSE 22923
// ruMech := ruMech diff unit ;
22907: LD_ADDR_EXP 63
22911: PUSH
22912: LD_EXP 63
22916: PUSH
22917: LD_VAR 0 1
22921: DIFF
22922: ST_TO_ADDR
// if unit in ruMech2 then
22923: LD_VAR 0 1
22927: PUSH
22928: LD_EXP 64
22932: IN
22933: IFFALSE 22951
// ruMech2 := ruMech2 diff unit ;
22935: LD_ADDR_EXP 64
22939: PUSH
22940: LD_EXP 64
22944: PUSH
22945: LD_VAR 0 1
22949: DIFF
22950: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 3 then
22951: LD_VAR 0 1
22955: PPUSH
22956: CALL_OW 266
22960: PUSH
22961: LD_INT 32
22963: PUSH
22964: LD_INT 33
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: IN
22971: IFFALSE 22988
22973: PUSH
22974: LD_VAR 0 1
22978: PPUSH
22979: CALL_OW 255
22983: PUSH
22984: LD_INT 3
22986: EQUAL
22987: AND
22988: IFFALSE 23144
// begin if IsInArea ( unit , ruBaseArea ) then
22990: LD_VAR 0 1
22994: PPUSH
22995: LD_EXP 66
22999: PPUSH
23000: CALL_OW 308
23004: IFFALSE 23067
// ruBuildings := Join ( ruBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
23006: LD_ADDR_EXP 76
23010: PUSH
23011: LD_EXP 76
23015: PPUSH
23016: LD_VAR 0 1
23020: PPUSH
23021: CALL_OW 266
23025: PUSH
23026: LD_VAR 0 1
23030: PPUSH
23031: CALL_OW 250
23035: PUSH
23036: LD_VAR 0 1
23040: PPUSH
23041: CALL_OW 251
23045: PUSH
23046: LD_VAR 0 1
23050: PPUSH
23051: CALL_OW 254
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: PPUSH
23062: CALL 93837 0 2
23066: ST_TO_ADDR
// if IsInArea ( unit , ruBaseArea2 ) then
23067: LD_VAR 0 1
23071: PPUSH
23072: LD_EXP 67
23076: PPUSH
23077: CALL_OW 308
23081: IFFALSE 23144
// ruBuildings2 := Join ( ruBuildings2 , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
23083: LD_ADDR_EXP 77
23087: PUSH
23088: LD_EXP 77
23092: PPUSH
23093: LD_VAR 0 1
23097: PPUSH
23098: CALL_OW 266
23102: PUSH
23103: LD_VAR 0 1
23107: PPUSH
23108: CALL_OW 250
23112: PUSH
23113: LD_VAR 0 1
23117: PPUSH
23118: CALL_OW 251
23122: PUSH
23123: LD_VAR 0 1
23127: PPUSH
23128: CALL_OW 254
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: PPUSH
23139: CALL 93837 0 2
23143: ST_TO_ADDR
// end ; if unit in FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) then
23144: LD_VAR 0 1
23148: PUSH
23149: LD_INT 22
23151: PUSH
23152: LD_INT 6
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 34
23161: PUSH
23162: LD_INT 51
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PPUSH
23173: CALL_OW 69
23177: IN
23178: IFFALSE 23188
// ruTransportDestroyed := true ;
23180: LD_ADDR_EXP 78
23184: PUSH
23185: LD_INT 1
23187: ST_TO_ADDR
// end ;
23188: PPOPN 1
23190: END
// on ClassChanged ( un , oldClass , newClass ) do begin if GetTag ( un ) = tMech then
23191: LD_VAR 0 1
23195: PPUSH
23196: CALL_OW 110
23200: PUSH
23201: LD_INT 7
23203: EQUAL
23204: IFFALSE 23218
// SetTag ( un , 0 ) ;
23206: LD_VAR 0 1
23210: PPUSH
23211: LD_INT 0
23213: PPUSH
23214: CALL_OW 109
// end ;
23218: PPOPN 3
23220: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
23221: LD_VAR 0 2
23225: PUSH
23226: LD_INT 22
23228: PUSH
23229: LD_INT 3
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: LD_INT 25
23238: PUSH
23239: LD_INT 3
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PPUSH
23250: CALL_OW 69
23254: IN
23255: IFFALSE 23272
23257: PUSH
23258: LD_VAR 0 1
23262: PPUSH
23263: CALL_OW 266
23267: PUSH
23268: LD_INT 3
23270: EQUAL
23271: AND
23272: IFFALSE 23289
23274: PUSH
23275: LD_VAR 0 2
23279: PPUSH
23280: CALL_OW 256
23284: PUSH
23285: LD_INT 1000
23287: LESS
23288: AND
23289: IFFALSE 23315
// begin SetTag ( un , 0 ) ;
23291: LD_VAR 0 2
23295: PPUSH
23296: LD_INT 0
23298: PPUSH
23299: CALL_OW 109
// SetLives ( un , 1000 ) ;
23303: LD_VAR 0 2
23307: PPUSH
23308: LD_INT 1000
23310: PPUSH
23311: CALL_OW 234
// end ; end ;
23315: PPOPN 2
23317: END
// on UnitGoesToRed ( un ) do var i ;
23318: LD_INT 0
23320: PPUSH
// begin if un = Khatam and GetSide ( Khatam ) = 8 then
23321: LD_VAR 0 1
23325: PUSH
23326: LD_EXP 36
23330: EQUAL
23331: IFFALSE 23348
23333: PUSH
23334: LD_EXP 36
23338: PPUSH
23339: CALL_OW 255
23343: PUSH
23344: LD_INT 8
23346: EQUAL
23347: AND
23348: IFFALSE 23359
// KillUnit ( Khatam ) ;
23350: LD_EXP 36
23354: PPUSH
23355: CALL_OW 66
// end ;
23359: PPOPN 2
23361: END
// on SpontaneousTeleported ( un ) do begin if not seenRussianTeleport then
23362: LD_EXP 6
23366: NOT
23367: IFFALSE 23401
// begin seenRussianTeleport := true ;
23369: LD_ADDR_EXP 6
23373: PUSH
23374: LD_INT 1
23376: ST_TO_ADDR
// DTankTeleport ( GetX ( un ) , GetY ( un ) ) ;
23377: LD_VAR 0 1
23381: PPUSH
23382: CALL_OW 250
23386: PPUSH
23387: LD_VAR 0 1
23391: PPUSH
23392: CALL_OW 251
23396: PPUSH
23397: CALL 26755 0 2
// end ; end ;
23401: PPOPN 1
23403: END
// on BuildingCaptured ( captured , oldSide , unit ) do var i , x , y ;
23404: LD_INT 0
23406: PPUSH
23407: PPUSH
23408: PPUSH
// begin if oldSide = 2 and GetBType ( captured ) in [ b_lab_half , b_lab , b_depot , b_barracks ] then
23409: LD_VAR 0 2
23413: PUSH
23414: LD_INT 2
23416: EQUAL
23417: IFFALSE 23449
23419: PUSH
23420: LD_VAR 0 1
23424: PPUSH
23425: CALL_OW 266
23429: PUSH
23430: LD_INT 7
23432: PUSH
23433: LD_INT 6
23435: PUSH
23436: LD_INT 0
23438: PUSH
23439: LD_INT 5
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: IN
23448: AND
23449: IFFALSE 23568
// begin for i := 1 to rand ( 2 , 4 ) do
23451: LD_ADDR_VAR 0 4
23455: PUSH
23456: DOUBLE
23457: LD_INT 1
23459: DEC
23460: ST_TO_ADDR
23461: LD_INT 2
23463: PPUSH
23464: LD_INT 4
23466: PPUSH
23467: CALL_OW 12
23471: PUSH
23472: FOR_TO
23473: IFFALSE 23566
// begin x := GetX ( captured ) - rand ( - 2 , 2 ) ;
23475: LD_ADDR_VAR 0 5
23479: PUSH
23480: LD_VAR 0 1
23484: PPUSH
23485: CALL_OW 250
23489: PUSH
23490: LD_INT 2
23492: NEG
23493: PPUSH
23494: LD_INT 2
23496: PPUSH
23497: CALL_OW 12
23501: MINUS
23502: ST_TO_ADDR
// y := GetY ( captured ) + rand ( - 2 , 2 ) ;
23503: LD_ADDR_VAR 0 6
23507: PUSH
23508: LD_VAR 0 1
23512: PPUSH
23513: CALL_OW 251
23517: PUSH
23518: LD_INT 2
23520: NEG
23521: PPUSH
23522: LD_INT 2
23524: PPUSH
23525: CALL_OW 12
23529: PLUS
23530: ST_TO_ADDR
// if ValidHex ( x , y ) then
23531: LD_VAR 0 5
23535: PPUSH
23536: LD_VAR 0 6
23540: PPUSH
23541: CALL_OW 488
23545: IFFALSE 23564
// MineExplosion ( x , y , 10 ) ;
23547: LD_VAR 0 5
23551: PPUSH
23552: LD_VAR 0 6
23556: PPUSH
23557: LD_INT 10
23559: PPUSH
23560: CALL_OW 453
// end ;
23564: GO 23472
23566: POP
23567: POP
// end ; end ;
23568: PPOPN 6
23570: END
// on VehicleConstructed ( veh , fac ) do var side ;
23571: LD_INT 0
23573: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
23574: LD_VAR 0 1
23578: PPUSH
23579: LD_VAR 0 2
23583: PPUSH
23584: CALL 50337 0 2
// side := GetSide ( fac ) ;
23588: LD_ADDR_VAR 0 3
23592: PUSH
23593: LD_VAR 0 2
23597: PPUSH
23598: CALL_OW 255
23602: ST_TO_ADDR
// if side = 3 then
23603: LD_VAR 0 3
23607: PUSH
23608: LD_INT 3
23610: EQUAL
23611: IFFALSE 23795
// begin if IsInArea ( fac , ruBaseArea ) then
23613: LD_VAR 0 2
23617: PPUSH
23618: LD_EXP 66
23622: PPUSH
23623: CALL_OW 308
23627: IFFALSE 23704
// begin ruConstructList := Delete ( ruConstructList , 1 ) ;
23629: LD_ADDR_EXP 70
23633: PUSH
23634: LD_EXP 70
23638: PPUSH
23639: LD_INT 1
23641: PPUSH
23642: CALL_OW 3
23646: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23647: LD_VAR 0 1
23651: PPUSH
23652: CALL_OW 263
23656: PUSH
23657: LD_INT 1
23659: EQUAL
23660: IFFALSE 23684
// ruTanks := Join ( ruTanks , veh ) else
23662: LD_ADDR_EXP 79
23666: PUSH
23667: LD_EXP 79
23671: PPUSH
23672: LD_VAR 0 1
23676: PPUSH
23677: CALL 93837 0 2
23681: ST_TO_ADDR
23682: GO 23704
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23684: LD_ADDR_EXP 81
23688: PUSH
23689: LD_EXP 81
23693: PPUSH
23694: LD_VAR 0 1
23698: PPUSH
23699: CALL 93837 0 2
23703: ST_TO_ADDR
// end ; if IsInArea ( fac , ruBaseArea2 ) then
23704: LD_VAR 0 2
23708: PPUSH
23709: LD_EXP 67
23713: PPUSH
23714: CALL_OW 308
23718: IFFALSE 23795
// begin ruConstructList2 := Delete ( ruConstructList2 , 1 ) ;
23720: LD_ADDR_EXP 71
23724: PUSH
23725: LD_EXP 71
23729: PPUSH
23730: LD_INT 1
23732: PPUSH
23733: CALL_OW 3
23737: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23738: LD_VAR 0 1
23742: PPUSH
23743: CALL_OW 263
23747: PUSH
23748: LD_INT 1
23750: EQUAL
23751: IFFALSE 23775
// ruTanks2 := Join ( ruTanks2 , veh ) else
23753: LD_ADDR_EXP 80
23757: PUSH
23758: LD_EXP 80
23762: PPUSH
23763: LD_VAR 0 1
23767: PPUSH
23768: CALL 93837 0 2
23772: ST_TO_ADDR
23773: GO 23795
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23775: LD_ADDR_EXP 81
23779: PUSH
23780: LD_EXP 81
23784: PPUSH
23785: LD_VAR 0 1
23789: PPUSH
23790: CALL 93837 0 2
23794: ST_TO_ADDR
// end ; end ; end ;
23795: PPOPN 3
23797: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
23798: LD_INT 0
23800: PPUSH
23801: PPUSH
23802: PPUSH
// begin side := GetSide ( driver ) ;
23803: LD_ADDR_VAR 0 7
23807: PUSH
23808: LD_VAR 0 1
23812: PPUSH
23813: CALL_OW 255
23817: ST_TO_ADDR
// if side = 5 then
23818: LD_VAR 0 7
23822: PUSH
23823: LD_INT 5
23825: EQUAL
23826: IFFALSE 23906
// begin arAttackersVeh := arAttackersVeh diff driver ;
23828: LD_ADDR_EXP 58
23832: PUSH
23833: LD_EXP 58
23837: PUSH
23838: LD_VAR 0 1
23842: DIFF
23843: ST_TO_ADDR
// ComMoveXY ( driver , 189 , 80 ) ;
23844: LD_VAR 0 1
23848: PPUSH
23849: LD_INT 189
23851: PPUSH
23852: LD_INT 80
23854: PPUSH
23855: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23859: LD_INT 35
23861: PPUSH
23862: CALL_OW 67
// if not IsOk ( driver ) then
23866: LD_VAR 0 1
23870: PPUSH
23871: CALL_OW 302
23875: NOT
23876: IFFALSE 23880
// exit ;
23878: GO 24430
// until IsAt ( driver , 189 , 80 ) ;
23880: LD_VAR 0 1
23884: PPUSH
23885: LD_INT 189
23887: PPUSH
23888: LD_INT 80
23890: PPUSH
23891: CALL_OW 307
23895: IFFALSE 23859
// RemoveUnit ( driver ) ;
23897: LD_VAR 0 1
23901: PPUSH
23902: CALL_OW 64
// end ; if side = 6 then
23906: LD_VAR 0 7
23910: PUSH
23911: LD_INT 6
23913: EQUAL
23914: IFFALSE 23972
// begin repeat ComMoveToArea ( driver , arAttackSpawn2Area ) ;
23916: LD_VAR 0 1
23920: PPUSH
23921: LD_INT 19
23923: PPUSH
23924: CALL_OW 113
// wait ( 0 0$3 ) ;
23928: LD_INT 105
23930: PPUSH
23931: CALL_OW 67
// if not IsOk ( driver ) then
23935: LD_VAR 0 1
23939: PPUSH
23940: CALL_OW 302
23944: NOT
23945: IFFALSE 23949
// exit ;
23947: GO 24430
// until IsInArea ( driver , arAttackSpawn2Area ) ;
23949: LD_VAR 0 1
23953: PPUSH
23954: LD_INT 19
23956: PPUSH
23957: CALL_OW 308
23961: IFFALSE 23916
// RemoveUnit ( driver ) ;
23963: LD_VAR 0 1
23967: PPUSH
23968: CALL_OW 64
// end ; if side = 3 then
23972: LD_VAR 0 7
23976: PUSH
23977: LD_INT 3
23979: EQUAL
23980: IFFALSE 24430
// begin if driver in ruMech then
23982: LD_VAR 0 1
23986: PUSH
23987: LD_EXP 63
23991: IN
23992: IFFALSE 24206
// begin ComMoveToArea ( driver , ruBaseArea ) ;
23994: LD_VAR 0 1
23998: PPUSH
23999: LD_EXP 66
24003: PPUSH
24004: CALL_OW 113
// SetTag ( driver , tMech ) ;
24008: LD_VAR 0 1
24012: PPUSH
24013: LD_INT 7
24015: PPUSH
24016: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
24020: LD_ADDR_VAR 0 6
24024: PUSH
24025: LD_EXP 66
24029: PPUSH
24030: LD_INT 22
24032: PUSH
24033: LD_INT 3
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 30
24042: PUSH
24043: LD_INT 3
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 50
24052: PUSH
24053: EMPTY
24054: LIST
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: LIST
24060: PPUSH
24061: CALL_OW 70
24065: ST_TO_ADDR
// if fac then
24066: LD_VAR 0 6
24070: IFFALSE 24092
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
24072: LD_VAR 0 1
24076: PPUSH
24077: LD_VAR 0 6
24081: PUSH
24082: LD_INT 1
24084: ARRAY
24085: PPUSH
24086: CALL_OW 180
// exit ;
24090: GO 24430
// end ; arm := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
24092: LD_ADDR_VAR 0 5
24096: PUSH
24097: LD_EXP 66
24101: PPUSH
24102: LD_INT 22
24104: PUSH
24105: LD_INT 3
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 2
24114: PUSH
24115: LD_INT 30
24117: PUSH
24118: LD_INT 4
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 30
24127: PUSH
24128: LD_INT 5
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 3
24142: PUSH
24143: LD_INT 62
24145: PUSH
24146: EMPTY
24147: LIST
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: LD_INT 50
24155: PUSH
24156: EMPTY
24157: LIST
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: PPUSH
24165: CALL_OW 70
24169: ST_TO_ADDR
// if arm then
24170: LD_VAR 0 5
24174: IFFALSE 24206
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
24176: LD_VAR 0 1
24180: PPUSH
24181: LD_VAR 0 5
24185: PUSH
24186: LD_INT 1
24188: ARRAY
24189: PPUSH
24190: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
24194: LD_VAR 0 1
24198: PPUSH
24199: LD_INT 1
24201: PPUSH
24202: CALL_OW 183
// end ; end ; if driver in ruMech2 then
24206: LD_VAR 0 1
24210: PUSH
24211: LD_EXP 64
24215: IN
24216: IFFALSE 24430
// begin ComMoveToArea ( driver , ruBaseArea2 ) ;
24218: LD_VAR 0 1
24222: PPUSH
24223: LD_EXP 67
24227: PPUSH
24228: CALL_OW 113
// SetTag ( driver , tMech ) ;
24232: LD_VAR 0 1
24236: PPUSH
24237: LD_INT 7
24239: PPUSH
24240: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
24244: LD_ADDR_VAR 0 6
24248: PUSH
24249: LD_EXP 67
24253: PPUSH
24254: LD_INT 22
24256: PUSH
24257: LD_INT 3
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 30
24266: PUSH
24267: LD_INT 3
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 50
24276: PUSH
24277: EMPTY
24278: LIST
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: LIST
24284: PPUSH
24285: CALL_OW 70
24289: ST_TO_ADDR
// if fac then
24290: LD_VAR 0 6
24294: IFFALSE 24316
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
24296: LD_VAR 0 1
24300: PPUSH
24301: LD_VAR 0 6
24305: PUSH
24306: LD_INT 1
24308: ARRAY
24309: PPUSH
24310: CALL_OW 180
// exit ;
24314: GO 24430
// end ; arm := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
24316: LD_ADDR_VAR 0 5
24320: PUSH
24321: LD_EXP 67
24325: PPUSH
24326: LD_INT 22
24328: PUSH
24329: LD_INT 3
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 2
24338: PUSH
24339: LD_INT 30
24341: PUSH
24342: LD_INT 4
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 30
24351: PUSH
24352: LD_INT 5
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 3
24366: PUSH
24367: LD_INT 62
24369: PUSH
24370: EMPTY
24371: LIST
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 50
24379: PUSH
24380: EMPTY
24381: LIST
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: PPUSH
24389: CALL_OW 70
24393: ST_TO_ADDR
// if arm then
24394: LD_VAR 0 5
24398: IFFALSE 24430
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
24400: LD_VAR 0 1
24404: PPUSH
24405: LD_VAR 0 5
24409: PUSH
24410: LD_INT 1
24412: ARRAY
24413: PPUSH
24414: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
24418: LD_VAR 0 1
24422: PPUSH
24423: LD_INT 1
24425: PPUSH
24426: CALL_OW 183
// end ; end ; end ; end ;
24430: PPOPN 7
24432: END
// on EndTheMissionRaised ( ev ) do begin if end_the_mission_allowed then
24433: LD_OWVAR 57
24437: IFFALSE 24451
// begin end_the_mission_allowed := false ;
24439: LD_ADDR_OWVAR 57
24443: PUSH
24444: LD_INT 0
24446: ST_TO_ADDR
// FinishMission ;
24447: CALL 32271 0 0
// end ; end ;
24451: PPOPN 1
24453: END
// on BuildingComplete ( b ) do var side , type ;
24454: LD_INT 0
24456: PPUSH
24457: PPUSH
// begin side := GetSide ( b ) ;
24458: LD_ADDR_VAR 0 2
24462: PUSH
24463: LD_VAR 0 1
24467: PPUSH
24468: CALL_OW 255
24472: ST_TO_ADDR
// type := GetBType ( b ) ;
24473: LD_ADDR_VAR 0 3
24477: PUSH
24478: LD_VAR 0 1
24482: PPUSH
24483: CALL_OW 266
24487: ST_TO_ADDR
// if side = 2 then
24488: LD_VAR 0 2
24492: PUSH
24493: LD_INT 2
24495: EQUAL
24496: IFFALSE 24516
// arBuildings := Delete ( arBuildings , 1 ) ;
24498: LD_ADDR_EXP 53
24502: PUSH
24503: LD_EXP 53
24507: PPUSH
24508: LD_INT 1
24510: PPUSH
24511: CALL_OW 3
24515: ST_TO_ADDR
// if side = 1 then
24516: LD_VAR 0 2
24520: PUSH
24521: LD_INT 1
24523: EQUAL
24524: IFFALSE 24588
// if type = b_depot and not hasBase then
24526: LD_VAR 0 3
24530: PUSH
24531: LD_INT 0
24533: EQUAL
24534: IFFALSE 24543
24536: PUSH
24537: LD_EXP 9
24541: NOT
24542: AND
24543: IFFALSE 24588
// begin hasBase := true ;
24545: LD_ADDR_EXP 9
24549: PUSH
24550: LD_INT 1
24552: ST_TO_ADDR
// epsilon := b ;
24553: LD_ADDR_EXP 10
24557: PUSH
24558: LD_VAR 0 1
24562: ST_TO_ADDR
// SetBName ( b , epsilon ) ;
24563: LD_VAR 0 1
24567: PPUSH
24568: LD_STRING epsilon
24570: PPUSH
24571: CALL_OW 500
// SetRestrict ( b_depot , 1 , false ) ;
24575: LD_INT 0
24577: PPUSH
24578: LD_INT 1
24580: PPUSH
24581: LD_INT 0
24583: PPUSH
24584: CALL_OW 324
// end ; if side = 3 then
24588: LD_VAR 0 2
24592: PUSH
24593: LD_INT 3
24595: EQUAL
24596: IFFALSE 24882
// begin if IsInArea ( b , ruBaseArea ) then
24598: LD_VAR 0 1
24602: PPUSH
24603: LD_EXP 66
24607: PPUSH
24608: CALL_OW 308
24612: IFFALSE 24632
// ruBuildings := Delete ( ruBuildings , 1 ) ;
24614: LD_ADDR_EXP 76
24618: PUSH
24619: LD_EXP 76
24623: PPUSH
24624: LD_INT 1
24626: PPUSH
24627: CALL_OW 3
24631: ST_TO_ADDR
// if IsInArea ( b , ruBaseArea2 ) then
24632: LD_VAR 0 1
24636: PPUSH
24637: LD_EXP 67
24641: PPUSH
24642: CALL_OW 308
24646: IFFALSE 24666
// ruBuildings2 := Delete ( ruBuildings2 , 1 ) ;
24648: LD_ADDR_EXP 77
24652: PUSH
24653: LD_EXP 77
24657: PPUSH
24658: LD_INT 1
24660: PPUSH
24661: CALL_OW 3
24665: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
24666: LD_VAR 0 3
24670: PUSH
24671: LD_INT 0
24673: PUSH
24674: LD_INT 4
24676: PUSH
24677: LD_INT 2
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: LIST
24684: IN
24685: IFFALSE 24696
// ComUpgrade ( b ) ;
24687: LD_VAR 0 1
24691: PPUSH
24692: CALL_OW 146
// if type = b_lab then
24696: LD_VAR 0 3
24700: PUSH
24701: LD_INT 6
24703: EQUAL
24704: IFFALSE 24748
// if IsInArea ( b , ruBaseArea ) then
24706: LD_VAR 0 1
24710: PPUSH
24711: LD_EXP 66
24715: PPUSH
24716: CALL_OW 308
24720: IFFALSE 24736
// ComUpgradeLab ( b , b_lab_weapon ) else
24722: LD_VAR 0 1
24726: PPUSH
24727: LD_INT 10
24729: PPUSH
24730: CALL_OW 147
24734: GO 24748
// ComUpgradeLab ( b , b_lab_computer ) ;
24736: LD_VAR 0 1
24740: PPUSH
24741: LD_INT 12
24743: PPUSH
24744: CALL_OW 147
// if type = b_depot then
24748: LD_VAR 0 3
24752: PUSH
24753: LD_INT 0
24755: EQUAL
24756: IFFALSE 24882
// begin SetResourceType ( GetBase ( b ) , mat_cans , 2550 ) ;
24758: LD_VAR 0 1
24762: PPUSH
24763: CALL_OW 274
24767: PPUSH
24768: LD_INT 1
24770: PPUSH
24771: LD_INT 2550
24773: PPUSH
24774: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
24778: LD_VAR 0 1
24782: PPUSH
24783: CALL_OW 274
24787: PPUSH
24788: LD_INT 2
24790: PPUSH
24791: LD_INT 250
24793: PPUSH
24794: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 200 ) ;
24798: LD_VAR 0 1
24802: PPUSH
24803: CALL_OW 274
24807: PPUSH
24808: LD_INT 3
24810: PPUSH
24811: LD_INT 200
24813: PPUSH
24814: CALL_OW 277
// if IsInArea ( b , ruBaseArea ) then
24818: LD_VAR 0 1
24822: PPUSH
24823: LD_EXP 66
24827: PPUSH
24828: CALL_OW 308
24832: IFFALSE 24856
// begin ruBase := b ;
24834: LD_ADDR_EXP 68
24838: PUSH
24839: LD_VAR 0 1
24843: ST_TO_ADDR
// SetBName ( b , chuikov ) ;
24844: LD_VAR 0 1
24848: PPUSH
24849: LD_STRING chuikov
24851: PPUSH
24852: CALL_OW 500
// end ; if IsInArea ( b , ruBaseArea2 ) then
24856: LD_VAR 0 1
24860: PPUSH
24861: LD_EXP 67
24865: PPUSH
24866: CALL_OW 308
24870: IFFALSE 24882
// begin ruBase2 := b ;
24872: LD_ADDR_EXP 69
24876: PUSH
24877: LD_VAR 0 1
24881: ST_TO_ADDR
// end ; end ; end ; end ;
24882: PPOPN 3
24884: END
// on UpgradeComplete ( b ) do var side , type ;
24885: LD_INT 0
24887: PPUSH
24888: PPUSH
// begin side := GetSide ( b ) ;
24889: LD_ADDR_VAR 0 2
24893: PUSH
24894: LD_VAR 0 1
24898: PPUSH
24899: CALL_OW 255
24903: ST_TO_ADDR
// type := GetBType ( b ) ;
24904: LD_ADDR_VAR 0 3
24908: PUSH
24909: LD_VAR 0 1
24913: PPUSH
24914: CALL_OW 266
24918: ST_TO_ADDR
// if side = 3 then
24919: LD_VAR 0 2
24923: PUSH
24924: LD_INT 3
24926: EQUAL
24927: IFFALSE 24981
// if type = b_lab_half then
24929: LD_VAR 0 3
24933: PUSH
24934: LD_INT 7
24936: EQUAL
24937: IFFALSE 24981
// if IsInArea ( b , ruBaseArea ) then
24939: LD_VAR 0 1
24943: PPUSH
24944: LD_EXP 66
24948: PPUSH
24949: CALL_OW 308
24953: IFFALSE 24969
// ComUpgradeLab ( b , b_lab_spacetime ) else
24955: LD_VAR 0 1
24959: PPUSH
24960: LD_INT 14
24962: PPUSH
24963: CALL_OW 147
24967: GO 24981
// ComUpgradeLab ( b , b_lab_siberium ) ;
24969: LD_VAR 0 1
24973: PPUSH
24974: LD_INT 11
24976: PPUSH
24977: CALL_OW 147
// end ;
24981: PPOPN 3
24983: END
// on ResearchComplete ( tech , lab ) do var side ;
24984: LD_INT 0
24986: PPUSH
// begin side := GetSide ( lab ) ;
24987: LD_ADDR_VAR 0 3
24991: PUSH
24992: LD_VAR 0 2
24996: PPUSH
24997: CALL_OW 255
25001: ST_TO_ADDR
// if side = 2 then
25002: LD_VAR 0 3
25006: PUSH
25007: LD_INT 2
25009: EQUAL
25010: IFFALSE 25058
// begin arTech := Delete ( arTech , 1 ) ;
25012: LD_ADDR_EXP 52
25016: PUSH
25017: LD_EXP 52
25021: PPUSH
25022: LD_INT 1
25024: PPUSH
25025: CALL_OW 3
25029: ST_TO_ADDR
// if tech = tech_sibPow then
25030: LD_VAR 0 1
25034: PUSH
25035: LD_INT 21
25037: EQUAL
25038: IFFALSE 25044
// DArabTrait1 ;
25040: CALL 29151 0 0
// if tech = tech_sibEng then
25044: LD_VAR 0 1
25048: PUSH
25049: LD_INT 22
25051: EQUAL
25052: IFFALSE 25058
// DArabTrait2 ;
25054: CALL 29482 0 0
// end ; end ;
25058: PPOPN 3
25060: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
25061: LD_VAR 0 1
25065: PPUSH
25066: CALL 50321 0 1
// end ;
25070: PPOPN 1
25072: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25073: LD_VAR 0 1
25077: PUSH
25078: LD_INT 1
25080: EQUAL
25081: IFFALSE 25093
25083: PUSH
25084: LD_VAR 0 2
25088: PUSH
25089: LD_INT 2
25091: EQUAL
25092: AND
25093: IFFALSE 25111
25095: PUSH
25096: LD_INT 1
25098: PPUSH
25099: LD_INT 2
25101: PPUSH
25102: CALL_OW 81
25106: PUSH
25107: LD_INT 1
25109: EQUAL
25110: AND
25111: IFFALSE 25117
// DAttackOnAlly ;
25113: CALL 26833 0 0
// end ;
25117: PPOPN 2
25119: END
// on SailEvent ( event ) do begin case event of EArabAttack :
25120: LD_VAR 0 1
25124: PUSH
25125: LD_INT 101
25127: DOUBLE
25128: EQUAL
25129: IFTRUE 25133
25131: GO 25140
25133: POP
// ArabAttack ; ERussianBaseC :
25134: CALL 7286 0 0
25138: GO 25292
25140: LD_INT 102
25142: DOUBLE
25143: EQUAL
25144: IFTRUE 25148
25146: GO 25169
25148: POP
// RussianBase ( ruForces union ruCommander , 1 ) ; ERussianBaseW :
25149: LD_EXP 59
25153: PUSH
25154: LD_EXP 61
25158: UNION
25159: PPUSH
25160: LD_INT 1
25162: PPUSH
25163: CALL 10977 0 2
25167: GO 25292
25169: LD_INT 103
25171: DOUBLE
25172: EQUAL
25173: IFTRUE 25177
25175: GO 25198
25177: POP
// RussianBase ( ruForces union ruCommander , 2 ) ; ERussianBaseE :
25178: LD_EXP 59
25182: PUSH
25183: LD_EXP 61
25187: UNION
25188: PPUSH
25189: LD_INT 2
25191: PPUSH
25192: CALL 10977 0 2
25196: GO 25292
25198: LD_INT 104
25200: DOUBLE
25201: EQUAL
25202: IFTRUE 25206
25204: GO 25227
25206: POP
// RussianBase ( ruForces union ruCommander , 3 ) ; ERussianBaseW2 :
25207: LD_EXP 59
25211: PUSH
25212: LD_EXP 61
25216: UNION
25217: PPUSH
25218: LD_INT 3
25220: PPUSH
25221: CALL 10977 0 2
25225: GO 25292
25227: LD_INT 105
25229: DOUBLE
25230: EQUAL
25231: IFTRUE 25235
25233: GO 25256
25235: POP
// RussianBase2 ( ruForces2 union ruCommander2 , 2 ) ; EExtraAttack :
25236: LD_EXP 60
25240: PUSH
25241: LD_EXP 62
25245: UNION
25246: PPUSH
25247: LD_INT 2
25249: PPUSH
25250: CALL 12486 0 2
25254: GO 25292
25256: LD_INT 106
25258: DOUBLE
25259: EQUAL
25260: IFTRUE 25264
25262: GO 25271
25264: POP
// RussianExtraAttack ; ESendRussianAttack :
25265: CALL 20389 0 0
25269: GO 25292
25271: LD_INT 107
25273: DOUBLE
25274: EQUAL
25275: IFTRUE 25279
25277: GO 25291
25279: POP
// SendRussianAttack ( russianWaveAttack ) ; end ;
25280: LD_EXP 18
25284: PPUSH
25285: CALL 21483 0 1
25289: GO 25292
25291: POP
// end ; end_of_file
25292: PPOPN 1
25294: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
25295: LD_INT 0
25297: PPUSH
25298: PPUSH
25299: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
25300: LD_ADDR_VAR 0 1
25304: PUSH
25305: LD_VAR 0 1
25309: PUSH
25310: LD_EXP 23
25314: PUSH
25315: LD_EXP 24
25319: PUSH
25320: LD_EXP 25
25324: PUSH
25325: LD_EXP 26
25329: PUSH
25330: LD_EXP 27
25334: PUSH
25335: LD_EXP 28
25339: PUSH
25340: LD_EXP 29
25344: PUSH
25345: LD_EXP 30
25349: PUSH
25350: LD_EXP 31
25354: PUSH
25355: LD_EXP 32
25359: PUSH
25360: LD_EXP 33
25364: PUSH
25365: LD_EXP 34
25369: PUSH
25370: LD_EXP 35
25374: PUSH
25375: LD_EXP 36
25379: PUSH
25380: LD_EXP 37
25384: PUSH
25385: LD_EXP 38
25389: PUSH
25390: LD_EXP 39
25394: PUSH
25395: LD_EXP 40
25399: PUSH
25400: LD_EXP 42
25404: PUSH
25405: LD_EXP 44
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: DIFF
25432: ST_TO_ADDR
// if not characters then
25433: LD_VAR 0 1
25437: NOT
25438: IFFALSE 25442
// exit ;
25440: GO 25526
// speaker := characters [ rand ( 1 , Count ( characters ) ) ] ;
25442: LD_ADDR_VAR 0 6
25446: PUSH
25447: LD_VAR 0 1
25451: PUSH
25452: LD_INT 1
25454: PPUSH
25455: LD_VAR 0 1
25459: PPUSH
25460: CALL 57905 0 1
25464: PPUSH
25465: CALL_OW 12
25469: ARRAY
25470: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
25471: LD_VAR 0 6
25475: PPUSH
25476: CALL_OW 258
25480: PUSH
25481: LD_INT 1
25483: EQUAL
25484: IFFALSE 25502
// Say ( speaker , dialogMID ) else
25486: LD_VAR 0 6
25490: PPUSH
25491: LD_VAR 0 2
25495: PPUSH
25496: CALL_OW 88
25500: GO 25516
// Say ( speaker , dialogFID ) ;
25502: LD_VAR 0 6
25506: PPUSH
25507: LD_VAR 0 3
25511: PPUSH
25512: CALL_OW 88
// result := speaker ;
25516: LD_ADDR_VAR 0 4
25520: PUSH
25521: LD_VAR 0 6
25525: ST_TO_ADDR
// end ; end_of_file
25526: LD_VAR 0 4
25530: RET
// export function Action ; begin
25531: LD_INT 0
25533: PPUSH
// InGameOn ;
25534: CALL_OW 8
// CenterNowOnXY ( 25 , 35 ) ;
25538: LD_INT 25
25540: PPUSH
25541: LD_INT 35
25543: PPUSH
25544: CALL_OW 86
// RevealFogArea ( 1 , arBaseArea ) ;
25548: LD_INT 1
25550: PPUSH
25551: LD_INT 5
25553: PPUSH
25554: CALL_OW 332
// RevealFogArea ( 1 , epsilonSpawnArea ) ;
25558: LD_INT 1
25560: PPUSH
25561: LD_INT 4
25563: PPUSH
25564: CALL_OW 332
// wait ( 0 0$1.5 ) ;
25568: LD_INT 52
25570: PPUSH
25571: CALL_OW 67
// CenterNowOnUnits ( Simms ) ;
25575: LD_EXP 33
25579: PPUSH
25580: CALL_OW 87
// wait ( 0 0$3 ) ;
25584: LD_INT 105
25586: PPUSH
25587: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
25591: LD_EXP 23
25595: PPUSH
25596: CALL_OW 310
25600: PPUSH
25601: CALL_OW 85
// wait ( 0 0$1 ) ;
25605: LD_INT 35
25607: PPUSH
25608: CALL_OW 67
// if IsOk ( Gary ) then
25612: LD_EXP 32
25616: PPUSH
25617: CALL_OW 302
25621: IFFALSE 25659
// begin Say ( Gary , D2-Gary-1 ) ;
25623: LD_EXP 32
25627: PPUSH
25628: LD_STRING D2-Gary-1
25630: PPUSH
25631: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
25635: LD_EXP 23
25639: PPUSH
25640: LD_STRING D2-JMM-1
25642: PPUSH
25643: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
25647: LD_EXP 32
25651: PPUSH
25652: LD_STRING D2-Gary-2
25654: PPUSH
25655: CALL_OW 88
// end ; InGameOff ;
25659: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
25663: LD_STRING M1
25665: PPUSH
25666: CALL_OW 337
// SaveForQuickRestart ;
25670: CALL_OW 22
// end ;
25674: LD_VAR 0 1
25678: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var i , p ;
25679: LD_EXP 23
25683: PPUSH
25684: LD_EXP 33
25688: PPUSH
25689: CALL_OW 296
25693: PUSH
25694: LD_INT 15
25696: LESS
25697: IFFALSE 26661
25699: GO 25701
25701: DISABLE
25702: LD_INT 0
25704: PPUSH
25705: PPUSH
// begin wait ( 0 0$3 ) ;
25706: LD_INT 105
25708: PPUSH
25709: CALL_OW 67
// Video ( true ) ;
25713: LD_INT 1
25715: PPUSH
25716: CALL 93809 0 1
// ComExitVehicle ( JMM ) ;
25720: LD_EXP 23
25724: PPUSH
25725: CALL_OW 121
// AddComMoveUnit ( JMM , Simms ) ;
25729: LD_EXP 23
25733: PPUSH
25734: LD_EXP 33
25738: PPUSH
25739: CALL_OW 172
// CenterNowOnUnits ( JMM ) ;
25743: LD_EXP 23
25747: PPUSH
25748: CALL_OW 87
// if Truman then
25752: LD_EXP 43
25756: IFFALSE 25893
// begin ComMoveUnit ( Truman , JMM ) ;
25758: LD_EXP 43
25762: PPUSH
25763: LD_EXP 23
25767: PPUSH
25768: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
25772: LD_INT 35
25774: PPUSH
25775: CALL_OW 67
// until GetDistUnits ( Truman , JMM ) < 6 ;
25779: LD_EXP 43
25783: PPUSH
25784: LD_EXP 23
25788: PPUSH
25789: CALL_OW 296
25793: PUSH
25794: LD_INT 6
25796: LESS
25797: IFFALSE 25772
// ComTurnUnit ( Truman , JMM ) ;
25799: LD_EXP 43
25803: PPUSH
25804: LD_EXP 23
25808: PPUSH
25809: CALL_OW 119
// ComTurnUnit ( JMM , Truman ) ;
25813: LD_EXP 23
25817: PPUSH
25818: LD_EXP 43
25822: PPUSH
25823: CALL_OW 119
// Say ( Truman , D2-Tru-1 ) ;
25827: LD_EXP 43
25831: PPUSH
25832: LD_STRING D2-Tru-1
25834: PPUSH
25835: CALL_OW 88
// Say ( JMM , D2-JMM-Tru-1 ) ;
25839: LD_EXP 23
25843: PPUSH
25844: LD_STRING D2-JMM-Tru-1
25846: PPUSH
25847: CALL_OW 88
// Say ( Truman , D2-Tru-2 ) ;
25851: LD_EXP 43
25855: PPUSH
25856: LD_STRING D2-Tru-2
25858: PPUSH
25859: CALL_OW 88
// ComMoveXY ( Truman , 79 , 41 ) ;
25863: LD_EXP 43
25867: PPUSH
25868: LD_INT 79
25870: PPUSH
25871: LD_INT 41
25873: PPUSH
25874: CALL_OW 111
// AddComMoveXY ( Truman , 17 , 31 ) ;
25878: LD_EXP 43
25882: PPUSH
25883: LD_INT 17
25885: PPUSH
25886: LD_INT 31
25888: PPUSH
25889: CALL_OW 171
// end ; AddComTurnUnit ( JMM , Simms ) ;
25893: LD_EXP 23
25897: PPUSH
25898: LD_EXP 33
25902: PPUSH
25903: CALL_OW 179
// p := 15 ;
25907: LD_ADDR_VAR 0 2
25911: PUSH
25912: LD_INT 15
25914: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25915: LD_INT 35
25917: PPUSH
25918: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
25922: LD_EXP 33
25926: PUSH
25927: LD_EXP 35
25931: PUSH
25932: LD_EXP 34
25936: PUSH
25937: LD_EXP 36
25941: PUSH
25942: LD_EXP 30
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: PPUSH
25954: LD_EXP 23
25958: PPUSH
25959: CALL_OW 112
// p := p - 1 ;
25963: LD_ADDR_VAR 0 2
25967: PUSH
25968: LD_VAR 0 2
25972: PUSH
25973: LD_INT 1
25975: MINUS
25976: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
25977: LD_EXP 23
25981: PPUSH
25982: LD_EXP 33
25986: PPUSH
25987: CALL_OW 296
25991: PUSH
25992: LD_INT 5
25994: LESS
25995: IFTRUE 26007
25997: PUSH
25998: LD_VAR 0 2
26002: PUSH
26003: LD_INT 0
26005: LESSEQUAL
26006: OR
26007: IFFALSE 25915
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
26009: LD_EXP 33
26013: PUSH
26014: LD_EXP 35
26018: PUSH
26019: LD_EXP 34
26023: PUSH
26024: LD_EXP 36
26028: PUSH
26029: LD_EXP 30
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: PPUSH
26041: LD_EXP 23
26045: PPUSH
26046: CALL_OW 119
// if not IsInUnit ( JMM ) then
26050: LD_EXP 23
26054: PPUSH
26055: CALL_OW 310
26059: NOT
26060: IFFALSE 26076
// ComTurnUnit ( JMM , Simms ) ;
26062: LD_EXP 23
26066: PPUSH
26067: LD_EXP 33
26071: PPUSH
26072: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
26076: LD_EXP 33
26080: PUSH
26081: LD_EXP 35
26085: PUSH
26086: LD_EXP 34
26090: PUSH
26091: LD_EXP 36
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: PPUSH
26102: LD_EXP 23
26106: PPUSH
26107: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
26111: LD_EXP 23
26115: PUSH
26116: LD_EXP 33
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PPUSH
26125: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
26129: LD_EXP 33
26133: PPUSH
26134: LD_STRING D2a-Sim-1
26136: PPUSH
26137: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
26141: LD_EXP 23
26145: PPUSH
26146: LD_STRING D2a-JMM-1
26148: PPUSH
26149: CALL_OW 88
// if IsOk ( Joan ) then
26153: LD_EXP 35
26157: PPUSH
26158: CALL_OW 302
26162: IFFALSE 26240
// begin if not IsInUnit ( JMM ) then
26164: LD_EXP 23
26168: PPUSH
26169: CALL_OW 310
26173: NOT
26174: IFFALSE 26190
// ComTurnUnit ( JMM , Joan ) ;
26176: LD_EXP 23
26180: PPUSH
26181: LD_EXP 35
26185: PPUSH
26186: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
26190: LD_EXP 35
26194: PPUSH
26195: LD_EXP 23
26199: PPUSH
26200: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
26204: LD_EXP 35
26208: PPUSH
26209: LD_STRING D2b-Joan-1
26211: PPUSH
26212: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
26216: LD_EXP 23
26220: PPUSH
26221: LD_STRING D2b-JMM-1
26223: PPUSH
26224: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
26228: LD_EXP 35
26232: PPUSH
26233: LD_STRING D2b-Joan-2
26235: PPUSH
26236: CALL_OW 88
// end ; if IsOk ( Denis ) then
26240: LD_EXP 34
26244: PPUSH
26245: CALL_OW 302
26249: IFFALSE 26303
// begin if not IsInUnit ( JMM ) then
26251: LD_EXP 23
26255: PPUSH
26256: CALL_OW 310
26260: NOT
26261: IFFALSE 26277
// ComTurnUnit ( JMM , Denis ) ;
26263: LD_EXP 23
26267: PPUSH
26268: LD_EXP 34
26272: PPUSH
26273: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
26277: LD_EXP 34
26281: PPUSH
26282: LD_EXP 23
26286: PPUSH
26287: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
26291: LD_EXP 34
26295: PPUSH
26296: LD_STRING D2c-Den-1
26298: PPUSH
26299: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
26303: LD_EXP 30
26307: PPUSH
26308: CALL_OW 302
26312: IFFALSE 26324
26314: PUSH
26315: LD_STRING 08_Kikuchi
26317: PPUSH
26318: CALL_OW 28
26322: NOT
26323: AND
26324: IFFALSE 26419
// begin repeat wait ( 0 0$1 ) ;
26326: LD_INT 35
26328: PPUSH
26329: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
26333: LD_EXP 30
26337: PPUSH
26338: LD_EXP 23
26342: PPUSH
26343: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
26347: LD_EXP 23
26351: PPUSH
26352: LD_EXP 30
26356: PPUSH
26357: CALL_OW 296
26361: PUSH
26362: LD_INT 5
26364: LESS
26365: IFFALSE 26326
// ComTurnUnit ( Kikuchi , JMM ) ;
26367: LD_EXP 30
26371: PPUSH
26372: LD_EXP 23
26376: PPUSH
26377: CALL_OW 119
// if not IsInUnit ( JMM ) then
26381: LD_EXP 23
26385: PPUSH
26386: CALL_OW 310
26390: NOT
26391: IFFALSE 26407
// ComTurnUnit ( JMM , Kikuchi ) ;
26393: LD_EXP 23
26397: PPUSH
26398: LD_EXP 30
26402: PPUSH
26403: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
26407: LD_EXP 30
26411: PPUSH
26412: LD_STRING D3b-Yam-1
26414: PPUSH
26415: CALL_OW 88
// end ; if IsOk ( Khatam ) then
26419: LD_EXP 36
26423: PPUSH
26424: CALL_OW 302
26428: IFFALSE 26494
// begin if not IsInUnit ( JMM ) then
26430: LD_EXP 23
26434: PPUSH
26435: CALL_OW 310
26439: NOT
26440: IFFALSE 26456
// ComTurnUnit ( JMM , Khatam ) ;
26442: LD_EXP 23
26446: PPUSH
26447: LD_EXP 36
26451: PPUSH
26452: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
26456: LD_EXP 36
26460: PPUSH
26461: LD_EXP 23
26465: PPUSH
26466: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
26470: LD_EXP 23
26474: PPUSH
26475: LD_STRING D2c-JMM-1
26477: PPUSH
26478: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
26482: LD_EXP 36
26486: PPUSH
26487: LD_STRING D2c-Khat-1
26489: PPUSH
26490: CALL_OW 88
// end ; Video ( false ) ;
26494: LD_INT 0
26496: PPUSH
26497: CALL 93809 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff Truman , 1 ) ;
26501: LD_INT 22
26503: PUSH
26504: LD_INT 4
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PPUSH
26511: CALL_OW 69
26515: PUSH
26516: LD_EXP 43
26520: DIFF
26521: PPUSH
26522: LD_INT 1
26524: PPUSH
26525: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
26529: LD_STRING M1a
26531: PPUSH
26532: CALL_OW 337
// SetRestrict ( b_depot , 1 , true ) ;
26536: LD_INT 0
26538: PPUSH
26539: LD_INT 1
26541: PPUSH
26542: LD_INT 1
26544: PPUSH
26545: CALL_OW 324
// joinedToEpsilon := true ;
26549: LD_ADDR_EXP 7
26553: PUSH
26554: LD_INT 1
26556: ST_TO_ADDR
// wait ( 0 0$30 ) ;
26557: LD_INT 1050
26559: PPUSH
26560: CALL_OW 67
// SpawnConvoy ;
26564: CALL 10495 0 0
// wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26568: LD_INT 25200
26570: PUSH
26571: LD_INT 2100
26573: PUSH
26574: LD_OWVAR 67
26578: MUL
26579: MINUS
26580: PPUSH
26581: CALL_OW 67
// firstAttack := true ;
26585: LD_ADDR_EXP 16
26589: PUSH
26590: LD_INT 1
26592: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26593: LD_INT 107
26595: PPUSH
26596: CALL_OW 427
// for i := 1 to Difficulty do
26600: LD_ADDR_VAR 0 1
26604: PUSH
26605: DOUBLE
26606: LD_INT 1
26608: DEC
26609: ST_TO_ADDR
26610: LD_OWVAR 67
26614: PUSH
26615: FOR_TO
26616: IFFALSE 26659
// begin wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26618: LD_INT 25200
26620: PUSH
26621: LD_INT 2100
26623: PUSH
26624: LD_OWVAR 67
26628: MUL
26629: MINUS
26630: PPUSH
26631: CALL_OW 67
// if not ruActiveAttacks then
26635: LD_EXP 22
26639: NOT
26640: IFFALSE 26650
// ruActiveAttacks := true ;
26642: LD_ADDR_EXP 22
26646: PUSH
26647: LD_INT 1
26649: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26650: LD_INT 107
26652: PPUSH
26653: CALL_OW 427
// end ;
26657: GO 26615
26659: POP
26660: POP
// end ;
26661: PPOPN 2
26663: END
// every 0 0$1 trigger IsOk ( Truman ) and joinedToEpsilon do
26664: LD_EXP 43
26668: PPUSH
26669: CALL_OW 302
26673: IFFALSE 26681
26675: PUSH
26676: LD_EXP 7
26680: AND
26681: IFFALSE 26754
26683: GO 26685
26685: DISABLE
// begin enable ;
26686: ENABLE
// if not HasTask ( Truman ) then
26687: LD_EXP 43
26691: PPUSH
26692: CALL_OW 314
26696: NOT
26697: IFFALSE 26711
// ComMoveToArea ( Truman , removeArea ) ;
26699: LD_EXP 43
26703: PPUSH
26704: LD_INT 10
26706: PPUSH
26707: CALL_OW 113
// if IsAt ( Truman , 17 , 32 ) or IsInArea ( Truman , removeArea ) then
26711: LD_EXP 43
26715: PPUSH
26716: LD_INT 17
26718: PPUSH
26719: LD_INT 32
26721: PPUSH
26722: CALL_OW 307
26726: IFTRUE 26742
26728: PUSH
26729: LD_EXP 43
26733: PPUSH
26734: LD_INT 10
26736: PPUSH
26737: CALL_OW 308
26741: OR
26742: IFFALSE 26754
// begin RemoveUnit ( Truman ) ;
26744: LD_EXP 43
26748: PPUSH
26749: CALL_OW 64
// disable ;
26753: DISABLE
// end ; end ;
26754: END
// export function DTankTeleport ( x , y ) ; begin
26755: LD_INT 0
26757: PPUSH
// DialogueOn ;
26758: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
26762: LD_VAR 0 1
26766: PPUSH
26767: LD_VAR 0 2
26771: PPUSH
26772: CALL_OW 86
// if IsOk ( Cyrus ) then
26776: LD_EXP 27
26780: PPUSH
26781: CALL_OW 302
26785: IFFALSE 26801
// Say ( Cyrus , D10-Cyrus-1 ) else
26787: LD_EXP 27
26791: PPUSH
26792: LD_STRING D10-Cyrus-1
26794: PPUSH
26795: CALL_OW 88
26799: GO 26824
// if IsOk ( JMM ) then
26801: LD_EXP 23
26805: PPUSH
26806: CALL_OW 302
26810: IFFALSE 26824
// Say ( JMM , D10-JMM-1 ) ;
26812: LD_EXP 23
26816: PPUSH
26817: LD_STRING D10-JMM-1
26819: PPUSH
26820: CALL_OW 88
// DialogueOff ;
26824: CALL_OW 7
// end ;
26828: LD_VAR 0 3
26832: RET
// export function DAttackOnAlly ; begin
26833: LD_INT 0
26835: PPUSH
// DialogueOn ;
26836: CALL_OW 6
// dwait ( 0 0$0.3 ) ;
26840: LD_INT 10
26842: PPUSH
26843: CALL_OW 68
// SayRadio ( Powell , D6b-Pow-1 ) ;
26847: LD_EXP 44
26851: PPUSH
26852: LD_STRING D6b-Pow-1
26854: PPUSH
26855: CALL_OW 94
// YouLost ( Powell ) ;
26859: LD_STRING Powell
26861: PPUSH
26862: CALL_OW 104
// DialogueOff ;
26866: CALL_OW 7
// end ;
26870: LD_VAR 0 1
26874: RET
// every 0 0$5 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
26875: LD_INT 5
26877: PPUSH
26878: LD_INT 22
26880: PUSH
26881: LD_INT 1
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 21
26890: PUSH
26891: LD_INT 3
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PPUSH
26902: CALL_OW 70
26906: IFTRUE 26941
26908: PUSH
26909: LD_INT 5
26911: PPUSH
26912: LD_INT 22
26914: PUSH
26915: LD_INT 1
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 21
26924: PUSH
26925: LD_INT 2
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PPUSH
26936: CALL_OW 70
26940: OR
26941: IFFALSE 26959
26943: PUSH
26944: LD_INT 1
26946: PPUSH
26947: LD_INT 2
26949: PPUSH
26950: CALL_OW 81
26954: PUSH
26955: LD_INT 1
26957: EQUAL
26958: AND
26959: IFFALSE 27202
26961: GO 26963
26963: DISABLE
// begin if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
26964: LD_INT 5
26966: PPUSH
26967: LD_INT 22
26969: PUSH
26970: LD_INT 1
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 21
26979: PUSH
26980: LD_INT 3
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PPUSH
26991: CALL_OW 70
26995: IFTRUE 27030
26997: PUSH
26998: LD_INT 5
27000: PPUSH
27001: LD_INT 22
27003: PUSH
27004: LD_INT 1
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 21
27013: PUSH
27014: LD_INT 2
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PPUSH
27025: CALL_OW 70
27029: OR
27030: IFFALSE 27048
27032: PUSH
27033: LD_INT 1
27035: PPUSH
27036: LD_INT 2
27038: PPUSH
27039: CALL_OW 81
27043: PUSH
27044: LD_INT 1
27046: EQUAL
27047: AND
27048: IFFALSE 27057
// Query ( QAttack ) ;
27050: LD_STRING QAttack
27052: PPUSH
27053: CALL_OW 97
// wait ( 0 0$20 ) ;
27057: LD_INT 700
27059: PPUSH
27060: CALL_OW 67
// repeat wait ( 0 0$10 ) ;
27064: LD_INT 350
27066: PPUSH
27067: CALL_OW 67
// if arabianAttack then
27071: LD_EXP 4
27075: IFFALSE 27079
// exit ;
27077: GO 27202
// until ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend ;
27079: LD_INT 5
27081: PPUSH
27082: LD_INT 22
27084: PUSH
27085: LD_INT 1
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 21
27094: PUSH
27095: LD_INT 3
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PPUSH
27106: CALL_OW 70
27110: IFTRUE 27145
27112: PUSH
27113: LD_INT 5
27115: PPUSH
27116: LD_INT 22
27118: PUSH
27119: LD_INT 1
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 21
27128: PUSH
27129: LD_INT 2
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PPUSH
27140: CALL_OW 70
27144: OR
27145: IFFALSE 27163
27147: PUSH
27148: LD_INT 1
27150: PPUSH
27151: LD_INT 2
27153: PPUSH
27154: CALL_OW 81
27158: PUSH
27159: LD_INT 1
27161: EQUAL
27162: AND
27163: IFFALSE 27064
// InGameOn ;
27165: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
27169: LD_INT 73
27171: PPUSH
27172: LD_INT 18
27174: PPUSH
27175: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
27179: LD_EXP 44
27183: PPUSH
27184: LD_STRING D6b-Pow-1
27186: PPUSH
27187: CALL_OW 94
// YouLost ( Powell ) ;
27191: LD_STRING Powell
27193: PPUSH
27194: CALL_OW 104
// InGameOff ;
27198: CALL_OW 9
// end ;
27202: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
27203: LD_INT 12
27205: PPUSH
27206: LD_INT 1
27208: PPUSH
27209: CALL_OW 321
27213: PUSH
27214: LD_INT 2
27216: EQUAL
27217: IFFALSE 27229
27219: GO 27221
27221: DISABLE
// ChangeMissionObjectives ( M2b ) ;
27222: LD_STRING M2b
27224: PPUSH
27225: CALL_OW 337
27229: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
27230: LD_INT 32
27232: PPUSH
27233: LD_INT 1
27235: PPUSH
27236: CALL_OW 321
27240: PUSH
27241: LD_INT 2
27243: EQUAL
27244: IFFALSE 27256
27246: GO 27248
27248: DISABLE
// ChangeMissionObjectives ( M2c ) ;
27249: LD_STRING M2c
27251: PPUSH
27252: CALL_OW 337
27256: END
// every 0 0$1 trigger arabianAttack and arabianAttackSpawned and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and UnitFilter ( arAttackersVeh , [ f_ok ] ) = 0 and UnitFilter ( arAttackersInf , [ f_ok ] ) = 0 do
27257: LD_EXP 4
27261: IFFALSE 27269
27263: PUSH
27264: LD_EXP 12
27268: AND
27269: IFFALSE 27305
27271: PUSH
27272: LD_INT 22
27274: PUSH
27275: LD_INT 2
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 21
27284: PUSH
27285: LD_INT 1
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PPUSH
27296: CALL_OW 69
27300: PUSH
27301: LD_INT 0
27303: EQUAL
27304: AND
27305: IFFALSE 27328
27307: PUSH
27308: LD_EXP 58
27312: PPUSH
27313: LD_INT 50
27315: PUSH
27316: EMPTY
27317: LIST
27318: PPUSH
27319: CALL_OW 72
27323: PUSH
27324: LD_INT 0
27326: EQUAL
27327: AND
27328: IFFALSE 27351
27330: PUSH
27331: LD_EXP 57
27335: PPUSH
27336: LD_INT 50
27338: PUSH
27339: EMPTY
27340: LIST
27341: PPUSH
27342: CALL_OW 72
27346: PUSH
27347: LD_INT 0
27349: EQUAL
27350: AND
27351: IFFALSE 27371
27353: GO 27355
27355: DISABLE
// begin arabianDefeated := true ;
27356: LD_ADDR_EXP 8
27360: PUSH
27361: LD_INT 1
27363: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
27364: LD_STRING M4a
27366: PPUSH
27367: CALL_OW 337
// end ;
27371: END
// every 0 0$1 trigger GetTech ( tech_Sib1 , 1 ) = state_researched and GetTech ( tech_Sib2 , 1 ) = state_researched and GetTech ( tech_SibPow , 1 ) = state_researched and GetTech ( tech_SibEng , 1 ) = state_researched do
27372: LD_INT 54
27374: PPUSH
27375: LD_INT 1
27377: PPUSH
27378: CALL_OW 321
27382: PUSH
27383: LD_INT 2
27385: EQUAL
27386: IFFALSE 27404
27388: PUSH
27389: LD_INT 55
27391: PPUSH
27392: LD_INT 1
27394: PPUSH
27395: CALL_OW 321
27399: PUSH
27400: LD_INT 2
27402: EQUAL
27403: AND
27404: IFFALSE 27422
27406: PUSH
27407: LD_INT 21
27409: PPUSH
27410: LD_INT 1
27412: PPUSH
27413: CALL_OW 321
27417: PUSH
27418: LD_INT 2
27420: EQUAL
27421: AND
27422: IFFALSE 27440
27424: PUSH
27425: LD_INT 22
27427: PPUSH
27428: LD_INT 1
27430: PPUSH
27431: CALL_OW 321
27435: PUSH
27436: LD_INT 2
27438: EQUAL
27439: AND
27440: IFFALSE 27452
27442: GO 27444
27444: DISABLE
// ChangeMissionObjectives ( M2a ) ;
27445: LD_STRING M2a
27447: PPUSH
27448: CALL_OW 337
27452: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) do var garySpeaker , deltaSpeaker , tmp1 , tmp2 , tmp3 ;
27453: LD_INT 22
27455: PUSH
27456: LD_INT 1
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 3
27465: PUSH
27466: LD_INT 57
27468: PUSH
27469: EMPTY
27470: LIST
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 63
27478: PUSH
27479: LD_INT 11
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: LIST
27490: PPUSH
27491: CALL_OW 69
27495: IFFALSE 28729
27497: GO 27499
27499: DISABLE
27500: LD_INT 0
27502: PPUSH
27503: PPUSH
27504: PPUSH
27505: PPUSH
27506: PPUSH
// begin garySpeaker := IsOk ( Gary ) ;
27507: LD_ADDR_VAR 0 1
27511: PUSH
27512: LD_EXP 32
27516: PPUSH
27517: CALL_OW 302
27521: ST_TO_ADDR
// deltaSpeaker := IsOk ( DeltaDoctor ) ;
27522: LD_ADDR_VAR 0 2
27526: PUSH
27527: LD_EXP 39
27531: PPUSH
27532: CALL_OW 302
27536: ST_TO_ADDR
// tmp1 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27537: LD_ADDR_VAR 0 3
27541: PUSH
27542: LD_INT 22
27544: PUSH
27545: LD_INT 1
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 50
27554: PUSH
27555: EMPTY
27556: LIST
27557: PUSH
27558: LD_INT 25
27560: PUSH
27561: LD_INT 4
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 26
27570: PUSH
27571: LD_INT 1
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: PPUSH
27584: CALL_OW 69
27588: PUSH
27589: LD_EXP 23
27593: PUSH
27594: LD_EXP 24
27598: PUSH
27599: LD_EXP 25
27603: PUSH
27604: LD_EXP 26
27608: PUSH
27609: LD_EXP 27
27613: PUSH
27614: LD_EXP 28
27618: PUSH
27619: LD_EXP 29
27623: PUSH
27624: LD_EXP 30
27628: PUSH
27629: LD_EXP 31
27633: PUSH
27634: LD_EXP 32
27638: PUSH
27639: LD_EXP 33
27643: PUSH
27644: LD_EXP 34
27648: PUSH
27649: LD_EXP 35
27653: PUSH
27654: LD_EXP 36
27658: PUSH
27659: LD_EXP 37
27663: PUSH
27664: LD_EXP 38
27668: PUSH
27669: LD_EXP 39
27673: PUSH
27674: LD_EXP 40
27678: PUSH
27679: LD_EXP 42
27683: PUSH
27684: LD_EXP 44
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: DIFF
27711: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27712: LD_ADDR_VAR 0 4
27716: PUSH
27717: LD_INT 22
27719: PUSH
27720: LD_INT 1
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 50
27729: PUSH
27730: EMPTY
27731: LIST
27732: PUSH
27733: LD_INT 26
27735: PUSH
27736: LD_INT 1
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 2
27745: PUSH
27746: LD_INT 25
27748: PUSH
27749: LD_INT 1
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 25
27758: PUSH
27759: LD_INT 2
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 25
27768: PUSH
27769: LD_INT 3
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: PPUSH
27788: CALL_OW 69
27792: PUSH
27793: LD_EXP 23
27797: PUSH
27798: LD_EXP 24
27802: PUSH
27803: LD_EXP 25
27807: PUSH
27808: LD_EXP 26
27812: PUSH
27813: LD_EXP 27
27817: PUSH
27818: LD_EXP 28
27822: PUSH
27823: LD_EXP 29
27827: PUSH
27828: LD_EXP 30
27832: PUSH
27833: LD_EXP 31
27837: PUSH
27838: LD_EXP 32
27842: PUSH
27843: LD_EXP 33
27847: PUSH
27848: LD_EXP 34
27852: PUSH
27853: LD_EXP 35
27857: PUSH
27858: LD_EXP 36
27862: PUSH
27863: LD_EXP 37
27867: PUSH
27868: LD_EXP 38
27872: PUSH
27873: LD_EXP 39
27877: PUSH
27878: LD_EXP 40
27882: PUSH
27883: LD_EXP 42
27887: PUSH
27888: LD_EXP 44
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: DIFF
27915: ST_TO_ADDR
// if tmp1 then
27916: LD_VAR 0 3
27920: IFFALSE 27936
// tmp1 := tmp1 [ 1 ] ;
27922: LD_ADDR_VAR 0 3
27926: PUSH
27927: LD_VAR 0 3
27931: PUSH
27932: LD_INT 1
27934: ARRAY
27935: ST_TO_ADDR
// if tmp2 then
27936: LD_VAR 0 4
27940: IFFALSE 27956
// tmp2 := tmp2 [ 1 ] ;
27942: LD_ADDR_VAR 0 4
27946: PUSH
27947: LD_VAR 0 4
27951: PUSH
27952: LD_INT 1
27954: ARRAY
27955: ST_TO_ADDR
// if ( garySpeaker or tmp2 ) and ( deltaSpeaker or tmp1 ) then
27956: LD_VAR 0 1
27960: IFTRUE 27968
27962: PUSH
27963: LD_VAR 0 4
27967: OR
27968: IFFALSE 27984
27970: PUSH
27971: LD_VAR 0 2
27975: IFTRUE 27983
27977: PUSH
27978: LD_VAR 0 3
27982: OR
27983: AND
27984: IFFALSE 28178
// begin DialogueOn ;
27986: CALL_OW 6
// if deltaSpeaker then
27990: LD_VAR 0 2
27994: IFFALSE 28010
// Say ( DeltaDoctor , D3-Sci1-1 ) else
27996: LD_EXP 39
28000: PPUSH
28001: LD_STRING D3-Sci1-1
28003: PPUSH
28004: CALL_OW 88
28008: GO 28022
// Say ( tmp1 , D3-Sci1-1 ) ;
28010: LD_VAR 0 3
28014: PPUSH
28015: LD_STRING D3-Sci1-1
28017: PPUSH
28018: CALL_OW 88
// if garySpeaker then
28022: LD_VAR 0 1
28026: IFFALSE 28042
// Say ( Gary , D3-Gary-1 ) else
28028: LD_EXP 32
28032: PPUSH
28033: LD_STRING D3-Gary-1
28035: PPUSH
28036: CALL_OW 88
28040: GO 28054
// Say ( tmp2 , D3-Gary-1 ) ;
28042: LD_VAR 0 4
28046: PPUSH
28047: LD_STRING D3-Gary-1
28049: PPUSH
28050: CALL_OW 88
// if deltaSpeaker then
28054: LD_VAR 0 2
28058: IFFALSE 28074
// Say ( DeltaDoctor , D3-Sci1-2 ) else
28060: LD_EXP 39
28064: PPUSH
28065: LD_STRING D3-Sci1-2
28067: PPUSH
28068: CALL_OW 88
28072: GO 28086
// Say ( tmp1 , D3-Sci1-2 ) ;
28074: LD_VAR 0 3
28078: PPUSH
28079: LD_STRING D3-Sci1-2
28081: PPUSH
28082: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
28086: LD_EXP 23
28090: PPUSH
28091: LD_STRING D3-JMM-2
28093: PPUSH
28094: CALL_OW 88
// if deltaSpeaker then
28098: LD_VAR 0 2
28102: IFFALSE 28118
// Say ( DeltaDoctor , D3-Sci1-3 ) else
28104: LD_EXP 39
28108: PPUSH
28109: LD_STRING D3-Sci1-3
28111: PPUSH
28112: CALL_OW 88
28116: GO 28130
// Say ( tmp1 , D3-Sci1-3 ) ;
28118: LD_VAR 0 3
28122: PPUSH
28123: LD_STRING D3-Sci1-3
28125: PPUSH
28126: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
28130: LD_EXP 23
28134: PPUSH
28135: LD_STRING D3-JMM-3
28137: PPUSH
28138: CALL_OW 88
// if deltaSpeaker then
28142: LD_VAR 0 2
28146: IFFALSE 28162
// Say ( DeltaDoctor , D3-Sci1-4 ) else
28148: LD_EXP 39
28152: PPUSH
28153: LD_STRING D3-Sci1-4
28155: PPUSH
28156: CALL_OW 88
28160: GO 28174
// Say ( tmp1 , D3-Sci1-4 ) ;
28162: LD_VAR 0 3
28166: PPUSH
28167: LD_STRING D3-Sci1-4
28169: PPUSH
28170: CALL_OW 88
// DialogueOff ;
28174: CALL_OW 7
// end ; SetTech ( tech_LasSight , 1 , state_enabled ) ;
28178: LD_INT 12
28180: PPUSH
28181: LD_INT 1
28183: PPUSH
28184: LD_INT 1
28186: PPUSH
28187: CALL_OW 322
// SetTech ( tech_Rocket , 1 , state_enabled ) ;
28191: LD_INT 40
28193: PPUSH
28194: LD_INT 1
28196: PPUSH
28197: LD_INT 1
28199: PPUSH
28200: CALL_OW 322
// SetTech ( tech_AI , 1 , state_enabled ) ;
28204: LD_INT 32
28206: PPUSH
28207: LD_INT 1
28209: PPUSH
28210: LD_INT 1
28212: PPUSH
28213: CALL_OW 322
// SetRestrict ( b_turret , 1 , true ) ;
28217: LD_INT 33
28219: PPUSH
28220: LD_INT 1
28222: PPUSH
28223: LD_INT 1
28225: PPUSH
28226: CALL_OW 324
// SetRestrict ( b_lab_computer , 1 , true ) ;
28230: LD_INT 12
28232: PPUSH
28233: LD_INT 1
28235: PPUSH
28236: LD_INT 1
28238: PPUSH
28239: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
28243: LD_STRING M2
28245: PPUSH
28246: CALL_OW 337
// wait ( 3 3$0 ) ;
28250: LD_INT 6300
28252: PPUSH
28253: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
28257: LD_INT 35
28259: PPUSH
28260: CALL_OW 67
// until not InBattle ( 1 ) ;
28264: LD_INT 1
28266: PPUSH
28267: CALL_OW 463
28271: NOT
28272: IFFALSE 28257
// if IsOk ( Simms ) and deltaSpeaker then
28274: LD_EXP 33
28278: PPUSH
28279: CALL_OW 302
28283: IFFALSE 28291
28285: PUSH
28286: LD_VAR 0 2
28290: AND
28291: IFFALSE 28460
// begin DialogueOn ;
28293: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28297: LD_EXP 33
28301: PPUSH
28302: LD_STRING D3a-Sim-1
28304: PPUSH
28305: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
28309: LD_EXP 39
28313: PPUSH
28314: LD_STRING D3a-Sci1-1
28316: PPUSH
28317: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28321: LD_EXP 33
28325: PPUSH
28326: LD_STRING D3a-Sim-2
28328: PPUSH
28329: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
28333: LD_EXP 39
28337: PPUSH
28338: LD_STRING D3a-Sci1-2
28340: PPUSH
28341: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28345: LD_EXP 33
28349: PPUSH
28350: LD_STRING D3a-Sim-3
28352: PPUSH
28353: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
28357: LD_EXP 39
28361: PPUSH
28362: LD_STRING D3a-Sci1-3
28364: PPUSH
28365: CALL_OW 88
// if IsOK ( Joan ) then
28369: LD_EXP 35
28373: PPUSH
28374: CALL_OW 302
28378: IFFALSE 28394
// Say ( Simms , D3a-Sim-4 ) else
28380: LD_EXP 33
28384: PPUSH
28385: LD_STRING D3a-Sim-4
28387: PPUSH
28388: CALL_OW 88
28392: GO 28406
// Say ( Simms , D3a-Sim-4a ) ;
28394: LD_EXP 33
28398: PPUSH
28399: LD_STRING D3a-Sim-4a
28401: PPUSH
28402: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
28406: LD_EXP 39
28410: PPUSH
28411: LD_STRING D3a-Sci1-4
28413: PPUSH
28414: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28418: LD_EXP 33
28422: PPUSH
28423: LD_STRING D3a-Sim-5
28425: PPUSH
28426: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
28430: LD_EXP 39
28434: PPUSH
28435: LD_STRING D3a-Sci1-5
28437: PPUSH
28438: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28442: LD_EXP 33
28446: PPUSH
28447: LD_STRING D3a-Sim-6
28449: PPUSH
28450: CALL_OW 88
// DialogueOff ;
28454: CALL_OW 7
// end else
28458: GO 28729
// begin tmp3 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_class , 4 ] ] ) diff [ JMM , Frank , Lisa , Simms , Khatam ] ;
28460: LD_ADDR_VAR 0 5
28464: PUSH
28465: LD_INT 22
28467: PUSH
28468: LD_INT 1
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 26
28477: PUSH
28478: LD_INT 1
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 25
28487: PUSH
28488: LD_INT 4
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: LIST
28499: PPUSH
28500: CALL_OW 69
28504: PUSH
28505: LD_EXP 23
28509: PUSH
28510: LD_EXP 29
28514: PUSH
28515: LD_EXP 28
28519: PUSH
28520: LD_EXP 33
28524: PUSH
28525: LD_EXP 36
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: DIFF
28537: ST_TO_ADDR
// if tmp3 then
28538: LD_VAR 0 5
28542: IFFALSE 28729
// begin DialogueOn ;
28544: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28548: LD_EXP 33
28552: PPUSH
28553: LD_STRING D3a-Sim-1
28555: PPUSH
28556: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
28560: LD_VAR 0 5
28564: PUSH
28565: LD_INT 1
28567: ARRAY
28568: PPUSH
28569: LD_STRING D3a-Sci1-1
28571: PPUSH
28572: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28576: LD_EXP 33
28580: PPUSH
28581: LD_STRING D3a-Sim-2
28583: PPUSH
28584: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
28588: LD_VAR 0 5
28592: PUSH
28593: LD_INT 1
28595: ARRAY
28596: PPUSH
28597: LD_STRING D3a-Sci1-2
28599: PPUSH
28600: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28604: LD_EXP 33
28608: PPUSH
28609: LD_STRING D3a-Sim-3
28611: PPUSH
28612: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
28616: LD_VAR 0 5
28620: PUSH
28621: LD_INT 1
28623: ARRAY
28624: PPUSH
28625: LD_STRING D3a-Sci1-3
28627: PPUSH
28628: CALL_OW 88
// if IsOK ( Joan ) then
28632: LD_EXP 35
28636: PPUSH
28637: CALL_OW 302
28641: IFFALSE 28657
// Say ( Simms , D3a-Sim-4 ) else
28643: LD_EXP 33
28647: PPUSH
28648: LD_STRING D3a-Sim-4
28650: PPUSH
28651: CALL_OW 88
28655: GO 28669
// Say ( Simms , D3a-Sim-4a ) ;
28657: LD_EXP 33
28661: PPUSH
28662: LD_STRING D3a-Sim-4a
28664: PPUSH
28665: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
28669: LD_VAR 0 5
28673: PUSH
28674: LD_INT 1
28676: ARRAY
28677: PPUSH
28678: LD_STRING D3a-Sci1-4
28680: PPUSH
28681: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28685: LD_EXP 33
28689: PPUSH
28690: LD_STRING D3a-Sim-5
28692: PPUSH
28693: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
28697: LD_VAR 0 5
28701: PUSH
28702: LD_INT 1
28704: ARRAY
28705: PPUSH
28706: LD_STRING D3a-Sci1-5
28708: PPUSH
28709: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28713: LD_EXP 33
28717: PPUSH
28718: LD_STRING D3a-Sim-6
28720: PPUSH
28721: CALL_OW 88
// DialogueOff ;
28725: CALL_OW 7
// end ; end ; end ;
28729: PPOPN 5
28731: END
// export function DRussianNextAttack ; begin
28732: LD_INT 0
28734: PPUSH
// SayRadio ( AmScout , D4-FSol1-2 ) ;
28735: LD_EXP 40
28739: PPUSH
28740: LD_STRING D4-FSol1-2
28742: PPUSH
28743: CALL_OW 94
// end ;
28747: LD_VAR 0 1
28751: RET
// export function DRussianConvoy ; begin
28752: LD_INT 0
28754: PPUSH
// SayRadio ( AmScout , D4-FSol1-1 ) ;
28755: LD_EXP 40
28759: PPUSH
28760: LD_STRING D4-FSol1-1
28762: PPUSH
28763: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
28767: LD_STRING M3
28769: PPUSH
28770: CALL_OW 337
// end ;
28774: LD_VAR 0 1
28778: RET
// export function DRussianSpaceAmmo ( unit ) ; begin
28779: LD_INT 0
28781: PPUSH
// CenterNowOnUnits ( unit ) ;
28782: LD_VAR 0 1
28786: PPUSH
28787: CALL_OW 87
// DialogueOn ;
28791: CALL_OW 6
// if IsOK ( Cyrus ) then
28795: LD_EXP 27
28799: PPUSH
28800: CALL_OW 302
28804: IFFALSE 28820
// Say ( Cyrus , D9a-Cyrus-1 ) else
28806: LD_EXP 27
28810: PPUSH
28811: LD_STRING D9a-Cyrus-1
28813: PPUSH
28814: CALL_OW 88
28818: GO 28942
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
28820: LD_INT 22
28822: PUSH
28823: LD_INT 1
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 26
28832: PUSH
28833: LD_INT 1
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 2
28842: PUSH
28843: LD_INT 25
28845: PUSH
28846: LD_INT 1
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 25
28855: PUSH
28856: LD_INT 2
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 25
28865: PUSH
28866: LD_INT 3
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 25
28875: PUSH
28876: LD_INT 4
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 25
28885: PUSH
28886: LD_INT 5
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: LIST
28905: PPUSH
28906: CALL_OW 69
28910: PUSH
28911: LD_EXP 23
28915: PUSH
28916: LD_EXP 36
28920: PUSH
28921: LD_EXP 27
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: LIST
28930: DIFF
28931: PPUSH
28932: LD_STRING D9a-Sol1-1
28934: PPUSH
28935: LD_STRING D9a-Sol1-1
28937: PPUSH
28938: CALL 25295 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
28942: LD_INT 22
28944: PUSH
28945: LD_INT 1
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 26
28954: PUSH
28955: LD_INT 1
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 2
28964: PUSH
28965: LD_INT 25
28967: PUSH
28968: LD_INT 1
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 25
28977: PUSH
28978: LD_INT 2
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 25
28987: PUSH
28988: LD_INT 3
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 25
28997: PUSH
28998: LD_INT 4
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 25
29007: PUSH
29008: LD_INT 5
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: LIST
29027: PPUSH
29028: CALL_OW 69
29032: PUSH
29033: LD_EXP 23
29037: PUSH
29038: LD_EXP 36
29042: PUSH
29043: LD_EXP 27
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: LIST
29052: DIFF
29053: PPUSH
29054: LD_STRING D9b-Sol1-1
29056: PPUSH
29057: LD_STRING D9b-Sol1-1
29059: PPUSH
29060: CALL 25295 0 3
// if LoadVariable ( 09_arInfo , 0 ) then
29064: LD_STRING 09_arInfo
29066: PPUSH
29067: LD_INT 0
29069: PPUSH
29070: CALL_OW 30
29074: IFFALSE 29088
// Say ( JMM , D9a-JMM-1 ) ;
29076: LD_EXP 23
29080: PPUSH
29081: LD_STRING D9a-JMM-1
29083: PPUSH
29084: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
29088: LD_EXP 23
29092: PPUSH
29093: LD_STRING D9c-JMM-1
29095: PPUSH
29096: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) then
29100: LD_INT 22
29102: PUSH
29103: LD_INT 1
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 25
29112: PUSH
29113: LD_INT 5
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PPUSH
29124: CALL_OW 69
29128: IFFALSE 29142
// Say ( JMM , D9c-JMM-1a ) ;
29130: LD_EXP 23
29134: PPUSH
29135: LD_STRING D9c-JMM-1a
29137: PPUSH
29138: CALL_OW 88
// DialogueOff ;
29142: CALL_OW 7
// end ;
29146: LD_VAR 0 2
29150: RET
// export function DArabTrait1 ; var tmp ; begin
29151: LD_INT 0
29153: PPUSH
29154: PPUSH
// if IsOk ( DeltaDoctor ) then
29155: LD_EXP 39
29159: PPUSH
29160: CALL_OW 302
29164: IFFALSE 29178
// tmp := DeltaDoctor else
29166: LD_ADDR_VAR 0 2
29170: PUSH
29171: LD_EXP 39
29175: ST_TO_ADDR
29176: GO 29376
// if IsOk ( Denis ) then
29178: LD_EXP 34
29182: PPUSH
29183: CALL_OW 302
29187: IFFALSE 29201
// tmp := Denis else
29189: LD_ADDR_VAR 0 2
29193: PUSH
29194: LD_EXP 34
29198: ST_TO_ADDR
29199: GO 29376
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
29201: LD_ADDR_VAR 0 2
29205: PUSH
29206: LD_INT 22
29208: PUSH
29209: LD_INT 1
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 50
29218: PUSH
29219: EMPTY
29220: LIST
29221: PUSH
29222: LD_INT 25
29224: PUSH
29225: LD_INT 4
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 26
29234: PUSH
29235: LD_INT 1
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: PPUSH
29248: CALL_OW 69
29252: PUSH
29253: LD_EXP 23
29257: PUSH
29258: LD_EXP 24
29262: PUSH
29263: LD_EXP 25
29267: PUSH
29268: LD_EXP 26
29272: PUSH
29273: LD_EXP 27
29277: PUSH
29278: LD_EXP 28
29282: PUSH
29283: LD_EXP 29
29287: PUSH
29288: LD_EXP 30
29292: PUSH
29293: LD_EXP 31
29297: PUSH
29298: LD_EXP 32
29302: PUSH
29303: LD_EXP 33
29307: PUSH
29308: LD_EXP 34
29312: PUSH
29313: LD_EXP 35
29317: PUSH
29318: LD_EXP 36
29322: PUSH
29323: LD_EXP 37
29327: PUSH
29328: LD_EXP 38
29332: PUSH
29333: LD_EXP 39
29337: PUSH
29338: LD_EXP 40
29342: PUSH
29343: LD_EXP 42
29347: PUSH
29348: LD_EXP 44
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: DIFF
29375: ST_TO_ADDR
// if not tmp then
29376: LD_VAR 0 2
29380: NOT
29381: IFFALSE 29385
// exit ;
29383: GO 29477
// DialogueOn ;
29385: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
29389: LD_EXP 23
29393: PPUSH
29394: LD_STRING D6-JMM-1
29396: PPUSH
29397: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
29401: LD_VAR 0 2
29405: PPUSH
29406: LD_STRING D6-Sci1-1
29408: PPUSH
29409: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
29413: LD_EXP 23
29417: PPUSH
29418: LD_STRING D6-JMM-2
29420: PPUSH
29421: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
29425: LD_VAR 0 2
29429: PPUSH
29430: LD_STRING D6-Sci1-2
29432: PPUSH
29433: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
29437: LD_EXP 23
29441: PPUSH
29442: LD_STRING D6-JMM-3
29444: PPUSH
29445: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
29449: LD_VAR 0 2
29453: PPUSH
29454: LD_STRING D6-Sci1-3
29456: PPUSH
29457: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
29461: LD_EXP 23
29465: PPUSH
29466: LD_STRING D6-JMM-4
29468: PPUSH
29469: CALL_OW 88
// DialogueOff ;
29473: CALL_OW 7
// end ;
29477: LD_VAR 0 1
29481: RET
// export function DArabTrait2 ; begin
29482: LD_INT 0
29484: PPUSH
// if not IsPlaced ( Khatam ) or not IsOk ( Ahmed ) or not IsOk ( Dietrich ) then
29485: LD_EXP 36
29489: PPUSH
29490: CALL_OW 305
29494: NOT
29495: IFTRUE 29509
29497: PUSH
29498: LD_EXP 51
29502: PPUSH
29503: CALL_OW 302
29507: NOT
29508: OR
29509: IFTRUE 29523
29511: PUSH
29512: LD_EXP 50
29516: PPUSH
29517: CALL_OW 302
29521: NOT
29522: OR
29523: IFFALSE 29527
// exit ;
29525: GO 29583
// DialogueOn ;
29527: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
29531: LD_EXP 51
29535: PPUSH
29536: LD_STRING D5-Ar1-1
29538: PPUSH
29539: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
29543: LD_EXP 50
29547: PPUSH
29548: LD_STRING D5-Diet-1
29550: PPUSH
29551: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
29555: LD_EXP 51
29559: PPUSH
29560: LD_STRING D5-Ar1-2
29562: PPUSH
29563: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
29567: LD_EXP 50
29571: PPUSH
29572: LD_STRING D5-Diet-2
29574: PPUSH
29575: CALL_OW 88
// DialogueOff ;
29579: CALL_OW 7
// end ;
29583: LD_VAR 0 1
29587: RET
// every 0 0$2 trigger arabianAttack do var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding , speaker ;
29588: LD_EXP 4
29592: IFFALSE 31305
29594: GO 29596
29596: DISABLE
29597: LD_INT 0
29599: PPUSH
29600: PPUSH
29601: PPUSH
29602: PPUSH
29603: PPUSH
29604: PPUSH
29605: PPUSH
29606: PPUSH
// begin SetAttitude ( 2 , 3 , att_friend , true ) ;
29607: LD_INT 2
29609: PPUSH
29610: LD_INT 3
29612: PPUSH
29613: LD_INT 1
29615: PPUSH
29616: LD_INT 1
29618: PPUSH
29619: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
29623: LD_INT 2
29625: PPUSH
29626: LD_INT 6
29628: PPUSH
29629: LD_INT 1
29631: PPUSH
29632: LD_INT 1
29634: PPUSH
29635: CALL_OW 80
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
29639: LD_ADDR_VAR 0 5
29643: PUSH
29644: LD_INT 22
29646: PUSH
29647: LD_INT 2
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 2
29656: PUSH
29657: LD_INT 25
29659: PUSH
29660: LD_INT 4
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 25
29669: PUSH
29670: LD_INT 2
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 25
29679: PUSH
29680: LD_INT 3
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PPUSH
29697: CALL_OW 69
29701: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff Dietrich ;
29702: LD_ADDR_VAR 0 4
29706: PUSH
29707: LD_INT 22
29709: PUSH
29710: LD_INT 2
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 21
29719: PUSH
29720: LD_INT 1
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 2
29729: PUSH
29730: LD_INT 25
29732: PUSH
29733: LD_INT 1
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 25
29742: PUSH
29743: LD_INT 8
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 25
29752: PUSH
29753: LD_INT 15
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: LIST
29770: PPUSH
29771: CALL_OW 69
29775: PUSH
29776: LD_EXP 50
29780: DIFF
29781: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
29782: LD_ADDR_VAR 0 6
29786: PUSH
29787: LD_INT 22
29789: PUSH
29790: LD_INT 2
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 30
29799: PUSH
29800: LD_INT 5
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PPUSH
29811: CALL_OW 69
29815: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
29816: LD_VAR 0 5
29820: PPUSH
29821: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
29825: LD_VAR 0 4
29829: PPUSH
29830: CALL_OW 122
// RaiseSailEvent ( EArabAttack ) ;
29834: LD_INT 101
29836: PPUSH
29837: CALL_OW 427
// SayRadio ( AmScout , D4-FSol1-3 ) ;
29841: LD_EXP 40
29845: PPUSH
29846: LD_STRING D4-FSol1-3
29848: PPUSH
29849: CALL_OW 94
// for i in arCivilian do
29853: LD_ADDR_VAR 0 1
29857: PUSH
29858: LD_VAR 0 5
29862: PUSH
29863: FOR_IN
29864: IFFALSE 29943
// begin AddComEnterUnit ( i , barracks [ i mod 2 + 1 ] ) ;
29866: LD_VAR 0 1
29870: PPUSH
29871: LD_VAR 0 6
29875: PUSH
29876: LD_VAR 0 1
29880: PUSH
29881: LD_INT 2
29883: MOD
29884: PUSH
29885: LD_INT 1
29887: PLUS
29888: ARRAY
29889: PPUSH
29890: CALL_OW 180
// AddComChangeProfession ( i , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
29894: LD_VAR 0 1
29898: PPUSH
29899: LD_INT 1
29901: PUSH
29902: LD_INT 8
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 1
29911: PPUSH
29912: LD_INT 2
29914: PPUSH
29915: CALL_OW 12
29919: ARRAY
29920: PPUSH
29921: CALL_OW 183
// AddComExitBuilding ( i ) ;
29925: LD_VAR 0 1
29929: PPUSH
29930: CALL_OW 182
// wait ( 0 0$0.5 ) ;
29934: LD_INT 18
29936: PPUSH
29937: CALL_OW 67
// end ;
29941: GO 29863
29943: POP
29944: POP
// wait ( 0 0$5 ) ;
29945: LD_INT 175
29947: PPUSH
29948: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
29952: LD_INT 76
29954: PPUSH
29955: LD_INT 19
29957: PPUSH
29958: CALL_OW 84
// DialogueOn ;
29962: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
29966: LD_INT 22
29968: PUSH
29969: LD_INT 1
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 26
29978: PUSH
29979: LD_INT 1
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 2
29988: PUSH
29989: LD_INT 25
29991: PUSH
29992: LD_INT 1
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 25
30001: PUSH
30002: LD_INT 2
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 25
30011: PUSH
30012: LD_INT 3
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 25
30021: PUSH
30022: LD_INT 4
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 25
30031: PUSH
30032: LD_INT 5
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: LIST
30051: PPUSH
30052: CALL_OW 69
30056: PPUSH
30057: LD_STRING D8-Sol1-1
30059: PPUSH
30060: LD_STRING D8-Sol1-1
30062: PPUSH
30063: CALL 25295 0 3
// if IsOk ( DeltaDoctor ) then
30067: LD_EXP 39
30071: PPUSH
30072: CALL_OW 302
30076: IFFALSE 30092
// Say ( DeltaDoctor , D8-Sci1-1 ) else
30078: LD_EXP 39
30082: PPUSH
30083: LD_STRING D8-Sci1-1
30085: PPUSH
30086: CALL_OW 88
30090: GO 30193
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
30092: LD_INT 22
30094: PUSH
30095: LD_INT 1
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 26
30104: PUSH
30105: LD_INT 1
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 2
30114: PUSH
30115: LD_INT 25
30117: PUSH
30118: LD_INT 1
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 25
30127: PUSH
30128: LD_INT 2
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 25
30137: PUSH
30138: LD_INT 3
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 25
30147: PUSH
30148: LD_INT 4
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 25
30157: PUSH
30158: LD_INT 5
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: LIST
30177: PPUSH
30178: CALL_OW 69
30182: PPUSH
30183: LD_STRING D8-Sol1-1
30185: PPUSH
30186: LD_STRING D8-Sol1-1
30188: PPUSH
30189: CALL 25295 0 3
// Say ( JMM , D8-JMM-1 ) ;
30193: LD_EXP 23
30197: PPUSH
30198: LD_STRING D8-JMM-1
30200: PPUSH
30201: CALL_OW 88
// DialogueOff ;
30205: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
30209: LD_INT 2
30211: PPUSH
30212: LD_INT 2
30214: PPUSH
30215: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
30219: LD_INT 1
30221: PPUSH
30222: LD_INT 2
30224: PPUSH
30225: LD_INT 2
30227: PPUSH
30228: LD_INT 1
30230: PPUSH
30231: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
30235: LD_INT 3
30237: PPUSH
30238: LD_INT 2
30240: PPUSH
30241: LD_INT 1
30243: PPUSH
30244: LD_INT 1
30246: PPUSH
30247: CALL_OW 80
// SetAttitude ( 6 , 2 , att_friend , true ) ;
30251: LD_INT 6
30253: PPUSH
30254: LD_INT 2
30256: PPUSH
30257: LD_INT 1
30259: PPUSH
30260: LD_INT 1
30262: PPUSH
30263: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
30267: LD_STRING M4
30269: PPUSH
30270: CALL_OW 337
// wait ( 0 0$1 ) ;
30274: LD_INT 35
30276: PPUSH
30277: CALL_OW 67
// if IsLive ( Khatam ) then
30281: LD_EXP 36
30285: PPUSH
30286: CALL_OW 300
30290: IFFALSE 30304
// DoNotAttack ( 2 , Khatam ) ;
30292: LD_INT 2
30294: PPUSH
30295: LD_EXP 36
30299: PPUSH
30300: CALL_OW 471
// wait ( 0 0$1 ) ;
30304: LD_INT 35
30306: PPUSH
30307: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
30311: LD_ADDR_VAR 0 7
30315: PUSH
30316: LD_INT 22
30318: PUSH
30319: LD_INT 1
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 21
30328: PUSH
30329: LD_INT 3
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PPUSH
30340: CALL_OW 69
30344: PPUSH
30345: LD_VAR 0 4
30349: PUSH
30350: LD_INT 1
30352: ARRAY
30353: PPUSH
30354: CALL_OW 74
30358: ST_TO_ADDR
// for i := 1 to 3 do
30359: LD_ADDR_VAR 0 1
30363: PUSH
30364: DOUBLE
30365: LD_INT 1
30367: DEC
30368: ST_TO_ADDR
30369: LD_INT 3
30371: PUSH
30372: FOR_TO
30373: IFFALSE 30432
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ i ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
30375: LD_VAR 0 4
30379: PPUSH
30380: LD_INT 25
30382: PUSH
30383: LD_INT 1
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PPUSH
30390: CALL_OW 72
30394: PUSH
30395: LD_VAR 0 1
30399: ARRAY
30400: PPUSH
30401: LD_VAR 0 7
30405: PPUSH
30406: CALL_OW 250
30410: PPUSH
30411: LD_VAR 0 7
30415: PPUSH
30416: CALL_OW 251
30420: PPUSH
30421: LD_VAR 0 7
30425: PPUSH
30426: CALL_OW 192
30430: GO 30372
30432: POP
30433: POP
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
30434: LD_VAR 0 4
30438: PPUSH
30439: LD_INT 84
30441: PPUSH
30442: LD_INT 22
30444: PPUSH
30445: CALL_OW 174
// AddComMoveXY ( arSoldiers , 95 , 12 ) ;
30449: LD_VAR 0 4
30453: PPUSH
30454: LD_INT 95
30456: PPUSH
30457: LD_INT 12
30459: PPUSH
30460: CALL_OW 171
// AddComMoveXY ( arSoldiers , 102 , 11 ) ;
30464: LD_VAR 0 4
30468: PPUSH
30469: LD_INT 102
30471: PPUSH
30472: LD_INT 11
30474: PPUSH
30475: CALL_OW 171
// AddComMoveXY ( arSoldiers , 116 , 15 ) ;
30479: LD_VAR 0 4
30483: PPUSH
30484: LD_INT 116
30486: PPUSH
30487: LD_INT 15
30489: PPUSH
30490: CALL_OW 171
// AddComMoveXY ( arSoldiers , 140 , 25 ) ;
30494: LD_VAR 0 4
30498: PPUSH
30499: LD_INT 140
30501: PPUSH
30502: LD_INT 25
30504: PPUSH
30505: CALL_OW 171
// arSoldiers := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff Dietrich ;
30509: LD_ADDR_VAR 0 4
30513: PUSH
30514: LD_INT 22
30516: PUSH
30517: LD_INT 2
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 21
30526: PUSH
30527: LD_INT 1
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 2
30536: PUSH
30537: LD_INT 25
30539: PUSH
30540: LD_INT 1
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 25
30549: PUSH
30550: LD_INT 8
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 25
30559: PUSH
30560: LD_INT 15
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: LIST
30577: PPUSH
30578: CALL_OW 69
30582: PUSH
30583: LD_EXP 50
30587: DIFF
30588: ST_TO_ADDR
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
30589: LD_ADDR_VAR 0 5
30593: PUSH
30594: LD_INT 22
30596: PUSH
30597: LD_INT 2
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 21
30606: PUSH
30607: LD_INT 1
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 2
30616: PUSH
30617: LD_INT 25
30619: PUSH
30620: LD_INT 2
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 25
30629: PUSH
30630: LD_INT 3
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 25
30639: PUSH
30640: LD_INT 4
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 25
30649: PUSH
30650: LD_INT 12
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 25
30659: PUSH
30660: LD_INT 16
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: LIST
30679: PPUSH
30680: CALL_OW 69
30684: ST_TO_ADDR
// arCivilian := arCivilian ^ Dietrich ;
30685: LD_ADDR_VAR 0 5
30689: PUSH
30690: LD_VAR 0 5
30694: PUSH
30695: LD_EXP 50
30699: ADD
30700: ST_TO_ADDR
// AddComMoveXY ( arCivilian , 81 , 12 ) ;
30701: LD_VAR 0 5
30705: PPUSH
30706: LD_INT 81
30708: PPUSH
30709: LD_INT 12
30711: PPUSH
30712: CALL_OW 171
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
30716: LD_VAR 0 5
30720: PPUSH
30721: LD_INT 88
30723: PPUSH
30724: LD_INT 8
30726: PPUSH
30727: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
30731: LD_VAR 0 5
30735: PPUSH
30736: LD_INT 102
30738: PPUSH
30739: LD_INT 10
30741: PPUSH
30742: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
30746: LD_VAR 0 5
30750: PPUSH
30751: LD_INT 116
30753: PPUSH
30754: LD_INT 15
30756: PPUSH
30757: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
30761: LD_VAR 0 5
30765: PPUSH
30766: LD_INT 140
30768: PPUSH
30769: LD_INT 25
30771: PPUSH
30772: CALL_OW 171
// wait ( 3 ) ;
30776: LD_INT 3
30778: PPUSH
30779: CALL_OW 67
// arEscapist := arCivilian union arSoldiers ;
30783: LD_ADDR_EXP 56
30787: PUSH
30788: LD_VAR 0 5
30792: PUSH
30793: LD_VAR 0 4
30797: UNION
30798: ST_TO_ADDR
// if IsOk ( Gary ) then
30799: LD_EXP 32
30803: PPUSH
30804: CALL_OW 302
30808: IFFALSE 30822
// Say ( Gary , D8a-Gary-1 ) ;
30810: LD_EXP 32
30814: PPUSH
30815: LD_STRING D8a-Gary-1
30817: PPUSH
30818: CALL_OW 88
// wait ( 0 0$5 ) ;
30822: LD_INT 175
30824: PPUSH
30825: CALL_OW 67
// if IsOK ( Khatam ) then
30829: LD_EXP 36
30833: PPUSH
30834: CALL_OW 302
30838: IFFALSE 31305
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
30840: LD_ADDR_VAR 0 2
30844: PUSH
30845: LD_INT 22
30847: PUSH
30848: LD_INT 1
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 2
30857: PUSH
30858: LD_INT 25
30860: PUSH
30861: LD_INT 1
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 25
30870: PUSH
30871: LD_INT 2
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 25
30880: PUSH
30881: LD_INT 3
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 25
30890: PUSH
30891: LD_INT 4
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 25
30900: PUSH
30901: LD_INT 5
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 25
30910: PUSH
30911: LD_INT 8
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PPUSH
30931: CALL_OW 69
30935: PUSH
30936: LD_EXP 23
30940: PUSH
30941: LD_EXP 24
30945: PUSH
30946: LD_EXP 25
30950: PUSH
30951: LD_EXP 26
30955: PUSH
30956: LD_EXP 27
30960: PUSH
30961: LD_EXP 28
30965: PUSH
30966: LD_EXP 29
30970: PUSH
30971: LD_EXP 30
30975: PUSH
30976: LD_EXP 31
30980: PUSH
30981: LD_EXP 32
30985: PUSH
30986: LD_EXP 33
30990: PUSH
30991: LD_EXP 34
30995: PUSH
30996: LD_EXP 35
31000: PUSH
31001: LD_EXP 36
31005: PUSH
31006: LD_EXP 37
31010: PUSH
31011: LD_EXP 38
31015: PUSH
31016: LD_EXP 39
31020: PUSH
31021: LD_EXP 42
31025: PUSH
31026: LD_EXP 44
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: DIFF
31052: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
31053: LD_EXP 36
31057: PPUSH
31058: LD_INT 8
31060: PPUSH
31061: CALL_OW 235
// ComExit ( Khatam ) ;
31065: LD_EXP 36
31069: PPUSH
31070: CALL 94235 0 1
// wait ( 0 0$1 ) ;
31074: LD_INT 35
31076: PPUSH
31077: CALL_OW 67
// ComMoveToArea ( Khatam , khatamArea ) ;
31081: LD_EXP 36
31085: PPUSH
31086: LD_INT 11
31088: PPUSH
31089: CALL_OW 113
// escapeKhatam := true ;
31093: LD_ADDR_EXP 11
31097: PUSH
31098: LD_INT 1
31100: ST_TO_ADDR
// if not tmp then
31101: LD_VAR 0 2
31105: NOT
31106: IFFALSE 31110
// exit ;
31108: GO 31305
// wait ( 0 0$2 ) ;
31110: LD_INT 70
31112: PPUSH
31113: CALL_OW 67
// DialogueOn ;
31117: CALL_OW 6
// speaker := DialogRandom ( tmp , D8b-Sol1-1 , D8b-FSol1-1 ) ;
31121: LD_ADDR_VAR 0 8
31125: PUSH
31126: LD_VAR 0 2
31130: PPUSH
31131: LD_STRING D8b-Sol1-1
31133: PPUSH
31134: LD_STRING D8b-FSol1-1
31136: PPUSH
31137: CALL 25295 0 3
31141: ST_TO_ADDR
// Say ( Khatam , D8b-Khat-1 ) ;
31142: LD_EXP 36
31146: PPUSH
31147: LD_STRING D8b-Khat-1
31149: PPUSH
31150: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31154: LD_VAR 0 8
31158: PPUSH
31159: CALL_OW 258
31163: PUSH
31164: LD_INT 1
31166: EQUAL
31167: IFFALSE 31183
// Say ( speaker , D8b-Sol1-2 ) else
31169: LD_VAR 0 8
31173: PPUSH
31174: LD_STRING D8b-Sol1-2
31176: PPUSH
31177: CALL_OW 88
31181: GO 31195
// Say ( speaker , D8b-FSol1-2 ) ;
31183: LD_VAR 0 8
31187: PPUSH
31188: LD_STRING D8b-FSol1-2
31190: PPUSH
31191: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
31195: LD_EXP 36
31199: PPUSH
31200: LD_STRING D8b-Khat-2
31202: PPUSH
31203: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31207: LD_VAR 0 8
31211: PPUSH
31212: CALL_OW 258
31216: PUSH
31217: LD_INT 1
31219: EQUAL
31220: IFFALSE 31236
// Say ( speaker , D8b-Sol1-3 ) else
31222: LD_VAR 0 8
31226: PPUSH
31227: LD_STRING D8b-Sol1-3
31229: PPUSH
31230: CALL_OW 88
31234: GO 31248
// Say ( speaker , D8b-FSol1-3 ) ;
31236: LD_VAR 0 8
31240: PPUSH
31241: LD_STRING D8b-FSol1-3
31243: PPUSH
31244: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
31248: LD_EXP 36
31252: PPUSH
31253: LD_STRING D8b-Khat-3
31255: PPUSH
31256: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31260: LD_VAR 0 8
31264: PPUSH
31265: CALL_OW 258
31269: PUSH
31270: LD_INT 1
31272: EQUAL
31273: IFFALSE 31289
// Say ( speaker , D8b-Sol1-4 ) else
31275: LD_VAR 0 8
31279: PPUSH
31280: LD_STRING D8b-Sol1-4
31282: PPUSH
31283: CALL_OW 88
31287: GO 31301
// Say ( speaker , D8b-FSol1-4 ) ;
31289: LD_VAR 0 8
31293: PPUSH
31294: LD_STRING D8b-FSol1-4
31296: PPUSH
31297: CALL_OW 88
// DialogueOff ;
31301: CALL_OW 7
// end ; end ;
31305: PPOPN 8
31307: END
// every 0 0$1 trigger escapeKhatam and IsOk ( Khatam ) do
31308: LD_EXP 11
31312: IFFALSE 31325
31314: PUSH
31315: LD_EXP 36
31319: PPUSH
31320: CALL_OW 302
31324: AND
31325: IFFALSE 31402
31327: GO 31329
31329: DISABLE
// begin enable ;
31330: ENABLE
// if IsOk ( Khatam ) and not HasTask ( Khatam ) then
31331: LD_EXP 36
31335: PPUSH
31336: CALL_OW 302
31340: IFFALSE 31354
31342: PUSH
31343: LD_EXP 36
31347: PPUSH
31348: CALL_OW 314
31352: NOT
31353: AND
31354: IFFALSE 31368
// ComMoveToArea ( Khatam , khatamArea ) ;
31356: LD_EXP 36
31360: PPUSH
31361: LD_INT 11
31363: PPUSH
31364: CALL_OW 113
// if IsInArea ( Khatam , khatamArea ) then
31368: LD_EXP 36
31372: PPUSH
31373: LD_INT 11
31375: PPUSH
31376: CALL_OW 308
31380: IFFALSE 31402
// begin SaveVariable ( 1 , 10_KhatamStatus_1 ) ;
31382: LD_INT 1
31384: PPUSH
31385: LD_STRING 10_KhatamStatus_1
31387: PPUSH
31388: CALL_OW 39
// RemoveUnit ( Khatam ) ;
31392: LD_EXP 36
31396: PPUSH
31397: CALL_OW 64
// disable ;
31401: DISABLE
// end ; end ;
31402: END
// every 0 0$30 trigger joinedToEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) = 0 or not arabianAttack ) do
31403: LD_EXP 7
31407: IFFALSE 31421
31409: PUSH
31410: LD_STRING 02_mikhailStatus_1
31412: PPUSH
31413: LD_INT 0
31415: PPUSH
31416: CALL_OW 30
31420: AND
31421: IFFALSE 31453
31423: PUSH
31424: LD_INT 22
31426: PUSH
31427: LD_INT 5
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 50
31436: PUSH
31437: EMPTY
31438: LIST
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PPUSH
31444: CALL_OW 69
31448: PUSH
31449: LD_INT 0
31451: EQUAL
31452: AND
31453: IFFALSE 31505
31455: PUSH
31456: LD_INT 22
31458: PUSH
31459: LD_INT 2
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 50
31468: PUSH
31469: EMPTY
31470: LIST
31471: PUSH
31472: LD_INT 21
31474: PUSH
31475: LD_INT 1
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: LIST
31486: PPUSH
31487: CALL_OW 69
31491: PUSH
31492: LD_INT 0
31494: EQUAL
31495: IFTRUE 31504
31497: PUSH
31498: LD_EXP 4
31502: NOT
31503: OR
31504: AND
31505: IFFALSE 31527
31507: GO 31509
31509: DISABLE
// begin wait ( 2 2$00 * Difficulty ) ;
31510: LD_INT 4200
31512: PUSH
31513: LD_OWVAR 67
31517: MUL
31518: PPUSH
31519: CALL_OW 67
// PrepareCornell ;
31523: CALL 3222 0 0
// end ;
31527: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 and IsOk ( Cornell ) do
31528: LD_INT 22
31530: PUSH
31531: LD_INT 1
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PPUSH
31538: CALL_OW 69
31542: PPUSH
31543: LD_EXP 42
31547: PPUSH
31548: CALL_OW 74
31552: PPUSH
31553: LD_EXP 42
31557: PPUSH
31558: CALL_OW 296
31562: PUSH
31563: LD_INT 9
31565: LESS
31566: IFFALSE 31579
31568: PUSH
31569: LD_EXP 42
31573: PPUSH
31574: CALL_OW 302
31578: AND
31579: IFFALSE 32023
31581: GO 31583
31583: DISABLE
// begin InGameOn ;
31584: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
31588: LD_EXP 42
31592: PPUSH
31593: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
31597: LD_EXP 42
31601: PPUSH
31602: LD_STRING D7-Corn-1
31604: PPUSH
31605: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
31609: LD_INT 22
31611: PUSH
31612: LD_INT 1
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 2
31621: PUSH
31622: LD_INT 25
31624: PUSH
31625: LD_INT 1
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 25
31634: PUSH
31635: LD_INT 2
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 25
31644: PUSH
31645: LD_INT 3
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 25
31654: PUSH
31655: LD_INT 4
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 25
31664: PUSH
31665: LD_INT 5
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PPUSH
31684: CALL_OW 69
31688: PPUSH
31689: LD_STRING D7-Sol1-1
31691: PPUSH
31692: LD_STRING D7-FSol1-1
31694: PPUSH
31695: CALL 25295 0 3
// CenterNowOnUnits ( Cornell ) ;
31699: LD_EXP 42
31703: PPUSH
31704: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
31708: LD_EXP 42
31712: PPUSH
31713: LD_STRING D7-Corn-2
31715: PPUSH
31716: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
31720: LD_EXP 23
31724: PPUSH
31725: LD_STRING D7-JMM-2
31727: PPUSH
31728: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
31732: LD_EXP 42
31736: PPUSH
31737: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
31741: LD_EXP 42
31745: PPUSH
31746: LD_STRING D7-Corn-3
31748: PPUSH
31749: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
31753: LD_EXP 42
31757: PPUSH
31758: LD_INT 250
31760: PPUSH
31761: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
31765: LD_EXP 42
31769: PPUSH
31770: LD_INT 1
31772: PPUSH
31773: CALL_OW 235
// wait ( 0 0$1 ) ;
31777: LD_INT 35
31779: PPUSH
31780: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
31784: LD_EXP 23
31788: PPUSH
31789: LD_STRING D7-JMM-3
31791: PPUSH
31792: CALL_OW 88
// InGameOff ;
31796: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
31800: LD_INT 35
31802: PPUSH
31803: CALL_OW 67
// if IsDead ( Cornell ) then
31807: LD_EXP 42
31811: PPUSH
31812: CALL_OW 301
31816: IFFALSE 31820
// exit ;
31818: GO 32023
// until GetLives ( Cornell ) > 350 ;
31820: LD_EXP 42
31824: PPUSH
31825: CALL_OW 256
31829: PUSH
31830: LD_INT 350
31832: GREATER
31833: IFFALSE 31800
// DialogueOn ;
31835: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
31839: LD_EXP 23
31843: PPUSH
31844: LD_STRING D7a-JMM-1
31846: PPUSH
31847: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
31851: LD_EXP 42
31855: PPUSH
31856: LD_STRING D7a-Corn-1
31858: PPUSH
31859: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
31863: LD_EXP 23
31867: PPUSH
31868: LD_STRING D7a-JMM-2
31870: PPUSH
31871: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
31875: LD_EXP 42
31879: PPUSH
31880: LD_STRING D7a-Corn-2
31882: PPUSH
31883: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
31887: LD_EXP 23
31891: PPUSH
31892: LD_STRING D7a-JMM-3
31894: PPUSH
31895: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
31899: LD_EXP 42
31903: PPUSH
31904: LD_STRING D7a-Corn-3
31906: PPUSH
31907: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
31911: LD_EXP 23
31915: PPUSH
31916: LD_STRING D7a-JMM-4
31918: PPUSH
31919: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
31923: LD_EXP 42
31927: PPUSH
31928: LD_STRING D7a-Corn-4
31930: PPUSH
31931: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
31935: LD_EXP 23
31939: PPUSH
31940: LD_STRING D7a-JMM-5
31942: PPUSH
31943: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
31947: LD_EXP 42
31951: PPUSH
31952: LD_STRING D7a-Corn-5
31954: PPUSH
31955: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
31959: LD_EXP 23
31963: PPUSH
31964: LD_STRING D7a-JMM-6
31966: PPUSH
31967: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
31971: LD_EXP 42
31975: PPUSH
31976: LD_STRING D7a-Corn-6
31978: PPUSH
31979: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
31983: LD_EXP 23
31987: PPUSH
31988: LD_STRING D7a-JMM-7
31990: PPUSH
31991: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
31995: LD_EXP 42
31999: PPUSH
32000: LD_STRING D7a-Corn-7
32002: PPUSH
32003: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
32007: LD_EXP 23
32011: PPUSH
32012: LD_STRING D7a-JMM-8
32014: PPUSH
32015: CALL_OW 88
// DialogueOff ;
32019: CALL_OW 7
// end ;
32023: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
32024: LD_INT 54
32026: PPUSH
32027: LD_INT 1
32029: PPUSH
32030: CALL_OW 321
32034: PUSH
32035: LD_INT 2
32037: EQUAL
32038: IFFALSE 32056
32040: PUSH
32041: LD_INT 55
32043: PPUSH
32044: LD_INT 1
32046: PPUSH
32047: CALL_OW 321
32051: PUSH
32052: LD_INT 2
32054: EQUAL
32055: AND
32056: IFFALSE 32074
32058: PUSH
32059: LD_INT 21
32061: PPUSH
32062: LD_INT 1
32064: PPUSH
32065: CALL_OW 321
32069: PUSH
32070: LD_INT 2
32072: EQUAL
32073: AND
32074: IFFALSE 32092
32076: PUSH
32077: LD_INT 22
32079: PPUSH
32080: LD_INT 1
32082: PPUSH
32083: CALL_OW 321
32087: PUSH
32088: LD_INT 2
32090: EQUAL
32091: AND
32092: IFFALSE 32131
32094: PUSH
32095: LD_INT 12
32097: PPUSH
32098: LD_INT 1
32100: PPUSH
32101: CALL_OW 321
32105: PUSH
32106: LD_INT 1
32108: EQUAL
32109: IFTRUE 32127
32111: PUSH
32112: LD_INT 32
32114: PPUSH
32115: LD_INT 1
32117: PPUSH
32118: CALL_OW 321
32122: PUSH
32123: LD_INT 1
32125: EQUAL
32126: OR
32127: PUSH
32128: EMPTY
32129: LIST
32130: AND
32131: IFFALSE 32139
32133: PUSH
32134: LD_EXP 8
32138: AND
32139: IFFALSE 32175
32141: PUSH
32142: LD_INT 22
32144: PUSH
32145: LD_INT 3
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 21
32154: PUSH
32155: LD_INT 1
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PPUSH
32166: CALL_OW 69
32170: PUSH
32171: LD_INT 0
32173: EQUAL
32174: AND
32175: IFFALSE 32223
32177: GO 32179
32179: DISABLE
// begin case Query ( QEndMission ) of 1 :
32180: LD_STRING QEndMission
32182: PPUSH
32183: CALL_OW 97
32187: PUSH
32188: LD_INT 1
32190: DOUBLE
32191: EQUAL
32192: IFTRUE 32196
32194: GO 32207
32196: POP
// end_the_mission_allowed = true ; 2 :
32197: LD_ADDR_OWVAR 57
32201: PUSH
32202: LD_INT 1
32204: ST_TO_ADDR
32205: GO 32223
32207: LD_INT 2
32209: DOUBLE
32210: EQUAL
32211: IFTRUE 32215
32213: GO 32222
32215: POP
// FinishMission ; end ;
32216: CALL 32271 0 0
32220: GO 32223
32222: POP
// end ;
32223: END
// function EnchancedSaveCharacters ( unit , id ) ; begin
32224: LD_INT 0
32226: PPUSH
// if IsLive ( unit ) or unit in JMMSquad then
32227: LD_VAR 0 1
32231: PPUSH
32232: CALL_OW 300
32236: IFTRUE 32250
32238: PUSH
32239: LD_VAR 0 1
32243: PUSH
32244: LD_EXP 45
32248: IN
32249: OR
32250: IFFALSE 32266
// SaveCharacters ( unit , id ) ;
32252: LD_VAR 0 1
32256: PPUSH
32257: LD_VAR 0 2
32261: PPUSH
32262: CALL_OW 38
// end ;
32266: LD_VAR 0 3
32270: RET
// export function FinishMission ; var m1 , m2 , m3 , prefix ; begin
32271: LD_INT 0
32273: PPUSH
32274: PPUSH
32275: PPUSH
32276: PPUSH
32277: PPUSH
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
32278: LD_INT 22
32280: PUSH
32281: LD_INT 1
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 21
32290: PUSH
32291: LD_INT 1
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 23
32300: PUSH
32301: LD_INT 1
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 50
32310: PUSH
32311: EMPTY
32312: LIST
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: PPUSH
32320: CALL_OW 69
32324: PPUSH
32325: CALL 57905 0 1
32329: PUSH
32330: LD_INT 5
32332: LESS
32333: IFFALSE 32344
// begin YouLost ( Troops ) ;
32335: LD_STRING Troops
32337: PPUSH
32338: CALL_OW 104
// exit ;
32342: GO 33370
// end ; if not hasSniper then
32344: LD_EXP 20
32348: NOT
32349: IFFALSE 32358
// SetAchievement ( ACH_SNIPER ) ;
32351: LD_STRING ACH_SNIPER
32353: PPUSH
32354: CALL_OW 543
// m1 := false ;
32358: LD_ADDR_VAR 0 2
32362: PUSH
32363: LD_INT 0
32365: ST_TO_ADDR
// m2 := false ;
32366: LD_ADDR_VAR 0 3
32370: PUSH
32371: LD_INT 0
32373: ST_TO_ADDR
// m3 := false ;
32374: LD_ADDR_VAR 0 4
32378: PUSH
32379: LD_INT 0
32381: ST_TO_ADDR
// if GetTech ( tech_LasSight , 1 ) = state_researched then
32382: LD_INT 12
32384: PPUSH
32385: LD_INT 1
32387: PPUSH
32388: CALL_OW 321
32392: PUSH
32393: LD_INT 2
32395: EQUAL
32396: IFFALSE 32418
// begin AddMedal ( sights , 1 ) ;
32398: LD_STRING sights
32400: PPUSH
32401: LD_INT 1
32403: PPUSH
32404: CALL_OW 101
// m1 := true ;
32408: LD_ADDR_VAR 0 2
32412: PUSH
32413: LD_INT 1
32415: ST_TO_ADDR
// end else
32416: GO 32429
// AddMedal ( sights , - 1 ) ;
32418: LD_STRING sights
32420: PPUSH
32421: LD_INT 1
32423: NEG
32424: PPUSH
32425: CALL_OW 101
// if GetTech ( tech_AI , 1 ) = state_researched then
32429: LD_INT 32
32431: PPUSH
32432: LD_INT 1
32434: PPUSH
32435: CALL_OW 321
32439: PUSH
32440: LD_INT 2
32442: EQUAL
32443: IFFALSE 32465
// begin AddMedal ( computers , 1 ) ;
32445: LD_STRING computers
32447: PPUSH
32448: LD_INT 1
32450: PPUSH
32451: CALL_OW 101
// m2 := true ;
32455: LD_ADDR_VAR 0 3
32459: PUSH
32460: LD_INT 1
32462: ST_TO_ADDR
// end else
32463: GO 32476
// AddMedal ( computers , - 1 ) ;
32465: LD_STRING computers
32467: PPUSH
32468: LD_INT 1
32470: NEG
32471: PPUSH
32472: CALL_OW 101
// if arabianEscapedCounter = 0 then
32476: LD_EXP 21
32480: PUSH
32481: LD_INT 0
32483: EQUAL
32484: IFFALSE 32516
// begin AddMedal ( renegades , 2 ) ;
32486: LD_STRING renegades
32488: PPUSH
32489: LD_INT 2
32491: PPUSH
32492: CALL_OW 101
// m3 := true ;
32496: LD_ADDR_VAR 0 4
32500: PUSH
32501: LD_INT 1
32503: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
32504: LD_INT 0
32506: PPUSH
32507: LD_STRING 10_ScientistsEscape_1
32509: PPUSH
32510: CALL_OW 39
// end else
32514: GO 32527
// AddMedal ( renegades , - 1 ) ;
32516: LD_STRING renegades
32518: PPUSH
32519: LD_INT 1
32521: NEG
32522: PPUSH
32523: CALL_OW 101
// SaveEpsilonBase ;
32527: CALL 33375 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
32531: LD_VAR 0 2
32535: IFFALSE 32543
32537: PUSH
32538: LD_VAR 0 3
32542: AND
32543: IFFALSE 32551
32545: PUSH
32546: LD_VAR 0 4
32550: AND
32551: IFFALSE 32563
32553: PUSH
32554: LD_OWVAR 67
32558: PUSH
32559: LD_INT 3
32561: GREATEREQUAL
32562: AND
32563: IFFALSE 32575
// SetAchievementEX ( ACH_AMER , 10 ) ;
32565: LD_STRING ACH_AMER
32567: PPUSH
32568: LD_INT 10
32570: PPUSH
32571: CALL_OW 564
// if tick <= 40 40$00 then
32575: LD_OWVAR 1
32579: PUSH
32580: LD_INT 84000
32582: LESSEQUAL
32583: IFFALSE 32599
// begin wait ( 3 ) ;
32585: LD_INT 3
32587: PPUSH
32588: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
32592: LD_STRING ACH_ASPEED_10
32594: PPUSH
32595: CALL_OW 543
// end ; GiveMedals ( Main ) ;
32599: LD_STRING Main
32601: PPUSH
32602: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
32606: LD_INT 22
32608: PUSH
32609: LD_INT 1
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 23
32618: PUSH
32619: LD_INT 1
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 21
32628: PUSH
32629: LD_INT 1
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 2
32638: PUSH
32639: LD_INT 25
32641: PUSH
32642: LD_INT 1
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 25
32651: PUSH
32652: LD_INT 2
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 25
32661: PUSH
32662: LD_INT 3
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 25
32671: PUSH
32672: LD_INT 4
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 25
32681: PUSH
32682: LD_INT 5
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 25
32691: PUSH
32692: LD_INT 8
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: PPUSH
32714: CALL_OW 69
32718: PPUSH
32719: CALL_OW 43
// prefix := 10c_ ;
32723: LD_ADDR_VAR 0 5
32727: PUSH
32728: LD_STRING 10c_
32730: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
32731: LD_EXP 23
32735: PPUSH
32736: LD_VAR 0 5
32740: PUSH
32741: LD_STRING JMM
32743: STR
32744: PPUSH
32745: CALL_OW 38
// EnchancedSaveCharacters ( Brown , prefix & Brown ) ;
32749: LD_EXP 24
32753: PPUSH
32754: LD_VAR 0 5
32758: PUSH
32759: LD_STRING Brown
32761: STR
32762: PPUSH
32763: CALL 32224 0 2
// EnchancedSaveCharacters ( Donaldson , prefix & Donaldson ) ;
32767: LD_EXP 25
32771: PPUSH
32772: LD_VAR 0 5
32776: PUSH
32777: LD_STRING Donaldson
32779: STR
32780: PPUSH
32781: CALL 32224 0 2
// EnchancedSaveCharacters ( Bobby , prefix & Bobby ) ;
32785: LD_EXP 26
32789: PPUSH
32790: LD_VAR 0 5
32794: PUSH
32795: LD_STRING Bobby
32797: STR
32798: PPUSH
32799: CALL 32224 0 2
// EnchancedSaveCharacters ( Cyrus , prefix & Cyrus ) ;
32803: LD_EXP 27
32807: PPUSH
32808: LD_VAR 0 5
32812: PUSH
32813: LD_STRING Cyrus
32815: STR
32816: PPUSH
32817: CALL 32224 0 2
// EnchancedSaveCharacters ( Lisa , prefix & Lisa ) ;
32821: LD_EXP 28
32825: PPUSH
32826: LD_VAR 0 5
32830: PUSH
32831: LD_STRING Lisa
32833: STR
32834: PPUSH
32835: CALL 32224 0 2
// EnchancedSaveCharacters ( Frank , prefix & Frank ) ;
32839: LD_EXP 29
32843: PPUSH
32844: LD_VAR 0 5
32848: PUSH
32849: LD_STRING Frank
32851: STR
32852: PPUSH
32853: CALL 32224 0 2
// if Kikuchi then
32857: LD_EXP 30
32861: IFFALSE 32888
// begin ToLua ( enableBioCharacter(BIO_YAMO) ) ;
32863: LD_STRING enableBioCharacter(BIO_YAMO)
32865: PPUSH
32866: CALL_OW 559
// EnchancedSaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
32870: LD_EXP 30
32874: PPUSH
32875: LD_VAR 0 5
32879: PUSH
32880: LD_STRING Kikuchi
32882: STR
32883: PPUSH
32884: CALL 32224 0 2
// end ; EnchancedSaveCharacters ( Houten , prefix & Houten ) ;
32888: LD_EXP 31
32892: PPUSH
32893: LD_VAR 0 5
32897: PUSH
32898: LD_STRING Houten
32900: STR
32901: PPUSH
32902: CALL 32224 0 2
// EnchancedSaveCharacters ( Gary , prefix & Gary ) ;
32906: LD_EXP 32
32910: PPUSH
32911: LD_VAR 0 5
32915: PUSH
32916: LD_STRING Gary
32918: STR
32919: PPUSH
32920: CALL 32224 0 2
// EnchancedSaveCharacters ( Cornell , prefix & Cornell ) ;
32924: LD_EXP 42
32928: PPUSH
32929: LD_VAR 0 5
32933: PUSH
32934: LD_STRING Cornell
32936: STR
32937: PPUSH
32938: CALL 32224 0 2
// EnchancedSaveCharacters ( Simms , prefix & Simms ) ;
32942: LD_EXP 33
32946: PPUSH
32947: LD_VAR 0 5
32951: PUSH
32952: LD_STRING Simms
32954: STR
32955: PPUSH
32956: CALL 32224 0 2
// EnchancedSaveCharacters ( Denis , prefix & Denis ) ;
32960: LD_EXP 34
32964: PPUSH
32965: LD_VAR 0 5
32969: PUSH
32970: LD_STRING Denis
32972: STR
32973: PPUSH
32974: CALL 32224 0 2
// EnchancedSaveCharacters ( Joan , prefix & Joan ) ;
32978: LD_EXP 35
32982: PPUSH
32983: LD_VAR 0 5
32987: PUSH
32988: LD_STRING Joan
32990: STR
32991: PPUSH
32992: CALL 32224 0 2
// EnchancedSaveCharacters ( Gladstone , prefix & Gladstone ) ;
32996: LD_EXP 37
33000: PPUSH
33001: LD_VAR 0 5
33005: PUSH
33006: LD_STRING Gladstone
33008: STR
33009: PPUSH
33010: CALL 32224 0 2
// EnchancedSaveCharacters ( DeltaDoctor , prefix & DeltaDoctor ) ;
33014: LD_EXP 39
33018: PPUSH
33019: LD_VAR 0 5
33023: PUSH
33024: LD_STRING DeltaDoctor
33026: STR
33027: PPUSH
33028: CALL 32224 0 2
// if IsLive ( Mike ) then
33032: LD_EXP 41
33036: PPUSH
33037: CALL_OW 300
33041: IFFALSE 33061
// SaveCharacters ( Mike , prefix & Mike ) ;
33043: LD_EXP 41
33047: PPUSH
33048: LD_VAR 0 5
33052: PUSH
33053: LD_STRING Mike
33055: STR
33056: PPUSH
33057: CALL_OW 38
// SaveCharacters ( others , 10c_lock ) ;
33061: LD_EXP 46
33065: PPUSH
33066: LD_STRING 10c_lock
33068: PPUSH
33069: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
33073: LD_INT 50
33075: PUSH
33076: EMPTY
33077: LIST
33078: PUSH
33079: LD_INT 22
33081: PUSH
33082: LD_INT 1
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 21
33091: PUSH
33092: LD_INT 1
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 2
33101: PUSH
33102: LD_INT 25
33104: PUSH
33105: LD_INT 1
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 25
33114: PUSH
33115: LD_INT 2
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 25
33124: PUSH
33125: LD_INT 3
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 25
33134: PUSH
33135: LD_INT 4
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 25
33144: PUSH
33145: LD_INT 5
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 25
33154: PUSH
33155: LD_INT 8
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: PPUSH
33177: CALL_OW 69
33181: PUSH
33182: LD_EXP 23
33186: PUSH
33187: LD_EXP 24
33191: PUSH
33192: LD_EXP 25
33196: PUSH
33197: LD_EXP 26
33201: PUSH
33202: LD_EXP 27
33206: PUSH
33207: LD_EXP 28
33211: PUSH
33212: LD_EXP 29
33216: PUSH
33217: LD_EXP 37
33221: PUSH
33222: LD_EXP 30
33226: PUSH
33227: LD_EXP 34
33231: PUSH
33232: LD_EXP 35
33236: PUSH
33237: LD_EXP 31
33241: PUSH
33242: LD_EXP 33
33246: PUSH
33247: LD_EXP 32
33251: PUSH
33252: LD_EXP 39
33256: PUSH
33257: LD_EXP 42
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: DIFF
33280: PPUSH
33281: LD_STRING 10_other_survivors
33283: PPUSH
33284: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) diff Mike , 10_ape ) ;
33288: LD_INT 50
33290: PUSH
33291: EMPTY
33292: LIST
33293: PUSH
33294: LD_INT 22
33296: PUSH
33297: LD_INT 1
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 21
33306: PUSH
33307: LD_INT 1
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 2
33316: PUSH
33317: LD_INT 25
33319: PUSH
33320: LD_INT 16
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 25
33329: PUSH
33330: LD_INT 12
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: LIST
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: PPUSH
33348: CALL_OW 69
33352: PUSH
33353: LD_EXP 41
33357: DIFF
33358: PPUSH
33359: LD_STRING 10_ape
33361: PPUSH
33362: CALL_OW 38
// YouWin ;
33366: CALL_OW 103
// end ;
33370: LD_VAR 0 1
33374: RET
// function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
33375: LD_INT 0
33377: PPUSH
33378: PPUSH
33379: PPUSH
33380: PPUSH
// epsilonBase := [ ] ;
33381: LD_ADDR_VAR 0 2
33385: PUSH
33386: EMPTY
33387: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
33388: LD_ADDR_VAR 0 3
33392: PUSH
33393: LD_INT 22
33395: PUSH
33396: LD_INT 1
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 21
33405: PUSH
33406: LD_INT 3
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 50
33415: PUSH
33416: EMPTY
33417: LIST
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: LIST
33423: PPUSH
33424: CALL_OW 69
33428: ST_TO_ADDR
// for i in buildings do
33429: LD_ADDR_VAR 0 4
33433: PUSH
33434: LD_VAR 0 3
33438: PUSH
33439: FOR_IN
33440: IFFALSE 33894
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
33442: LD_VAR 0 4
33446: PPUSH
33447: CALL_OW 266
33451: PUSH
33452: LD_INT 6
33454: PUSH
33455: LD_INT 7
33457: PUSH
33458: LD_INT 8
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: LIST
33465: IN
33466: IFFALSE 33580
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
33468: LD_ADDR_VAR 0 2
33472: PUSH
33473: LD_VAR 0 2
33477: PUSH
33478: LD_VAR 0 4
33482: PPUSH
33483: CALL_OW 266
33487: PUSH
33488: LD_VAR 0 4
33492: PPUSH
33493: CALL_OW 250
33497: PUSH
33498: LD_VAR 0 4
33502: PPUSH
33503: CALL_OW 251
33507: PUSH
33508: LD_VAR 0 4
33512: PPUSH
33513: CALL_OW 254
33517: PUSH
33518: LD_VAR 0 4
33522: PPUSH
33523: CALL_OW 267
33527: PUSH
33528: LD_VAR 0 4
33532: PPUSH
33533: CALL_OW 248
33537: PUSH
33538: LD_VAR 0 4
33542: PPUSH
33543: LD_INT 1
33545: PPUSH
33546: CALL_OW 268
33550: PUSH
33551: LD_VAR 0 4
33555: PPUSH
33556: LD_INT 2
33558: PPUSH
33559: CALL_OW 268
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: PUSH
33574: EMPTY
33575: LIST
33576: ADD
33577: ST_TO_ADDR
33578: GO 33892
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
33580: LD_VAR 0 4
33584: PPUSH
33585: CALL_OW 266
33589: PUSH
33590: LD_INT 32
33592: EQUAL
33593: IFTRUE 33610
33595: PUSH
33596: LD_VAR 0 4
33600: PPUSH
33601: CALL_OW 266
33605: PUSH
33606: LD_INT 33
33608: EQUAL
33609: OR
33610: IFFALSE 33707
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
33612: LD_ADDR_VAR 0 2
33616: PUSH
33617: LD_VAR 0 2
33621: PUSH
33622: LD_VAR 0 4
33626: PPUSH
33627: CALL_OW 266
33631: PUSH
33632: LD_VAR 0 4
33636: PPUSH
33637: CALL_OW 250
33641: PUSH
33642: LD_VAR 0 4
33646: PPUSH
33647: CALL_OW 251
33651: PUSH
33652: LD_VAR 0 4
33656: PPUSH
33657: CALL_OW 254
33661: PUSH
33662: LD_VAR 0 4
33666: PPUSH
33667: CALL_OW 267
33671: PUSH
33672: LD_VAR 0 4
33676: PPUSH
33677: CALL_OW 248
33681: PUSH
33682: LD_VAR 0 4
33686: PPUSH
33687: CALL_OW 269
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: PUSH
33701: EMPTY
33702: LIST
33703: ADD
33704: ST_TO_ADDR
33705: GO 33892
// if GetBType ( i ) = b_factory then
33707: LD_VAR 0 4
33711: PPUSH
33712: CALL_OW 266
33716: PUSH
33717: LD_INT 3
33719: EQUAL
33720: IFFALSE 33810
// epsilonBase := Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
33722: LD_ADDR_VAR 0 2
33726: PUSH
33727: LD_VAR 0 2
33731: PPUSH
33732: LD_INT 1
33734: PPUSH
33735: LD_VAR 0 4
33739: PPUSH
33740: CALL_OW 266
33744: PUSH
33745: LD_VAR 0 4
33749: PPUSH
33750: CALL_OW 250
33754: PUSH
33755: LD_VAR 0 4
33759: PPUSH
33760: CALL_OW 251
33764: PUSH
33765: LD_VAR 0 4
33769: PPUSH
33770: CALL_OW 254
33774: PUSH
33775: LD_VAR 0 4
33779: PPUSH
33780: CALL_OW 267
33784: PUSH
33785: LD_VAR 0 4
33789: PPUSH
33790: CALL_OW 248
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: PPUSH
33803: CALL_OW 2
33807: ST_TO_ADDR
33808: GO 33892
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
33810: LD_ADDR_VAR 0 2
33814: PUSH
33815: LD_VAR 0 2
33819: PUSH
33820: LD_VAR 0 4
33824: PPUSH
33825: CALL_OW 266
33829: PUSH
33830: LD_VAR 0 4
33834: PPUSH
33835: CALL_OW 250
33839: PUSH
33840: LD_VAR 0 4
33844: PPUSH
33845: CALL_OW 251
33849: PUSH
33850: LD_VAR 0 4
33854: PPUSH
33855: CALL_OW 254
33859: PUSH
33860: LD_VAR 0 4
33864: PPUSH
33865: CALL_OW 267
33869: PUSH
33870: LD_VAR 0 4
33874: PPUSH
33875: CALL_OW 248
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: PUSH
33888: EMPTY
33889: LIST
33890: ADD
33891: ST_TO_ADDR
// end ;
33892: GO 33439
33894: POP
33895: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
33896: LD_VAR 0 2
33900: PPUSH
33901: LD_STRING 10_EpsilonBase
33903: PPUSH
33904: CALL_OW 39
// SaveVariable ( ListEnvironmentArea ( epsilonBaseArea ) , 10_EpsilonEnv ) ;
33908: LD_INT 34
33910: PPUSH
33911: CALL_OW 353
33915: PPUSH
33916: LD_STRING 10_EpsilonEnv
33918: PPUSH
33919: CALL_OW 39
// end ; end_of_file
33923: LD_VAR 0 1
33927: RET
// every 1 1$05 + 0 0$20 trigger joinedToEpsilon do var i , tmp ;
33928: LD_EXP 7
33932: IFFALSE 34055
33934: GO 33936
33936: DISABLE
33937: LD_INT 0
33939: PPUSH
33940: PPUSH
// begin enable ;
33941: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
33942: LD_INT 35
33944: PPUSH
33945: LD_INT 385
33947: PPUSH
33948: CALL_OW 12
33952: PPUSH
33953: CALL_OW 67
// tmp := [ cratesSpawn1Area , cratesSpawn2Area , cratesSpawn3Area , cratesSpawn4Area , cratesSpawn5Area , cratesSpawn6Area ] ;
33957: LD_ADDR_VAR 0 2
33961: PUSH
33962: LD_INT 13
33964: PUSH
33965: LD_INT 14
33967: PUSH
33968: LD_INT 15
33970: PUSH
33971: LD_INT 16
33973: PUSH
33974: LD_INT 17
33976: PUSH
33977: LD_INT 38
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
33988: LD_ADDR_VAR 0 1
33992: PUSH
33993: LD_VAR 0 2
33997: PUSH
33998: LD_INT 1
34000: PPUSH
34001: LD_VAR 0 2
34005: PPUSH
34006: CALL 57905 0 1
34010: PPUSH
34011: CALL_OW 12
34015: ARRAY
34016: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 8 then
34017: LD_VAR 0 1
34021: PPUSH
34022: CALL_OW 435
34026: PUSH
34027: LD_INT 8
34029: LESS
34030: IFFALSE 34055
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
34032: LD_INT 1
34034: PPUSH
34035: LD_INT 5
34037: PPUSH
34038: CALL_OW 12
34042: PPUSH
34043: LD_VAR 0 1
34047: PPUSH
34048: LD_INT 1
34050: PPUSH
34051: CALL_OW 55
// end ;
34055: PPOPN 2
34057: END
// every 0 0$20 trigger tick < 5 5$00 and hasBase do
34058: LD_OWVAR 1
34062: PUSH
34063: LD_INT 10500
34065: LESS
34066: IFFALSE 34074
34068: PUSH
34069: LD_EXP 9
34073: AND
34074: IFFALSE 34101
34076: GO 34078
34078: DISABLE
// begin enable ;
34079: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSpawn3Area , true ) ;
34080: LD_INT 1
34082: PPUSH
34083: LD_INT 5
34085: PPUSH
34086: CALL_OW 12
34090: PPUSH
34091: LD_INT 15
34093: PPUSH
34094: LD_INT 1
34096: PPUSH
34097: CALL_OW 55
// end ;
34101: END
// every 0 0$55 trigger ruBase do
34102: LD_EXP 68
34106: IFFALSE 34150
34108: GO 34110
34110: DISABLE
// begin enable ;
34111: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea ) < 3 then
34112: LD_EXP 84
34116: PPUSH
34117: CALL_OW 435
34121: PUSH
34122: LD_INT 3
34124: LESS
34125: IFFALSE 34150
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea , true ) ;
34127: LD_INT 1
34129: PPUSH
34130: LD_INT 5
34132: PPUSH
34133: CALL_OW 12
34137: PPUSH
34138: LD_EXP 84
34142: PPUSH
34143: LD_INT 1
34145: PPUSH
34146: CALL_OW 55
// end ;
34150: END
// every 1 1$05 trigger ruBase2 do
34151: LD_EXP 69
34155: IFFALSE 34199
34157: GO 34159
34159: DISABLE
// begin enable ;
34160: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea2 ) < 3 then
34161: LD_EXP 85
34165: PPUSH
34166: CALL_OW 435
34170: PUSH
34171: LD_INT 3
34173: LESS
34174: IFFALSE 34199
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea2 , true ) ;
34176: LD_INT 1
34178: PPUSH
34179: LD_INT 5
34181: PPUSH
34182: CALL_OW 12
34186: PPUSH
34187: LD_EXP 85
34191: PPUSH
34192: LD_INT 1
34194: PPUSH
34195: CALL_OW 55
// end ; end_of_file end_of_file
34199: END
// export globalGameSaveCounter ; every 0 0$1 do
34200: GO 34202
34202: DISABLE
// begin enable ;
34203: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
34204: LD_STRING updateTimer(
34206: PUSH
34207: LD_OWVAR 1
34211: STR
34212: PUSH
34213: LD_STRING );
34215: STR
34216: PPUSH
34217: CALL_OW 559
// end ;
34221: END
// every 0 0$1 do
34222: GO 34224
34224: DISABLE
// begin globalGameSaveCounter := 0 ;
34225: LD_ADDR_EXP 86
34229: PUSH
34230: LD_INT 0
34232: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
34233: LD_STRING setGameSaveCounter(0)
34235: PPUSH
34236: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
34240: LD_STRING initStreamRollete();
34242: PPUSH
34243: CALL_OW 559
// InitStreamMode ;
34247: CALL 35592 0 0
// DefineStreamItems ( false ) ;
34251: LD_INT 0
34253: PPUSH
34254: CALL 36056 0 1
// end ;
34258: END
// export function SOS_MapStart ( ) ; begin
34259: LD_INT 0
34261: PPUSH
// if streamModeActive then
34262: LD_EXP 87
34266: IFFALSE 34275
// DefineStreamItems ( true ) ;
34268: LD_INT 1
34270: PPUSH
34271: CALL 36056 0 1
// UpdateLuaVariables ( ) ;
34275: CALL 34292 0 0
// UpdateFactoryWaypoints ( ) ;
34279: CALL 49178 0 0
// UpdateWarehouseGatheringPoints ( ) ;
34283: CALL 49430 0 0
// end ;
34287: LD_VAR 0 1
34291: RET
// function UpdateLuaVariables ( ) ; begin
34292: LD_INT 0
34294: PPUSH
// if globalGameSaveCounter then
34295: LD_EXP 86
34299: IFFALSE 34333
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
34301: LD_ADDR_EXP 86
34305: PUSH
34306: LD_EXP 86
34310: PPUSH
34311: CALL 95210 0 1
34315: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
34316: LD_STRING setGameSaveCounter(
34318: PUSH
34319: LD_EXP 86
34323: STR
34324: PUSH
34325: LD_STRING )
34327: STR
34328: PPUSH
34329: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
34333: LD_STRING setGameDifficulty(
34335: PUSH
34336: LD_OWVAR 67
34340: STR
34341: PUSH
34342: LD_STRING )
34344: STR
34345: PPUSH
34346: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
34350: LD_STRING displayDifficulty(
34352: PUSH
34353: LD_OWVAR 67
34357: STR
34358: PUSH
34359: LD_STRING )
34361: STR
34362: PPUSH
34363: CALL_OW 559
// end ;
34367: LD_VAR 0 1
34371: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34372: LD_INT 0
34374: PPUSH
// if p2 = stream_mode then
34375: LD_VAR 0 2
34379: PUSH
34380: LD_INT 100
34382: EQUAL
34383: IFFALSE 35386
// begin if not StreamModeActive then
34385: LD_EXP 87
34389: NOT
34390: IFFALSE 34400
// StreamModeActive := true ;
34392: LD_ADDR_EXP 87
34396: PUSH
34397: LD_INT 1
34399: ST_TO_ADDR
// if p3 = 0 then
34400: LD_VAR 0 3
34404: PUSH
34405: LD_INT 0
34407: EQUAL
34408: IFFALSE 34414
// InitStreamMode ;
34410: CALL 35592 0 0
// if p3 = 1 then
34414: LD_VAR 0 3
34418: PUSH
34419: LD_INT 1
34421: EQUAL
34422: IFFALSE 34432
// sRocket := true ;
34424: LD_ADDR_EXP 92
34428: PUSH
34429: LD_INT 1
34431: ST_TO_ADDR
// if p3 = 2 then
34432: LD_VAR 0 3
34436: PUSH
34437: LD_INT 2
34439: EQUAL
34440: IFFALSE 34450
// sSpeed := true ;
34442: LD_ADDR_EXP 91
34446: PUSH
34447: LD_INT 1
34449: ST_TO_ADDR
// if p3 = 3 then
34450: LD_VAR 0 3
34454: PUSH
34455: LD_INT 3
34457: EQUAL
34458: IFFALSE 34468
// sEngine := true ;
34460: LD_ADDR_EXP 93
34464: PUSH
34465: LD_INT 1
34467: ST_TO_ADDR
// if p3 = 4 then
34468: LD_VAR 0 3
34472: PUSH
34473: LD_INT 4
34475: EQUAL
34476: IFFALSE 34486
// sSpec := true ;
34478: LD_ADDR_EXP 90
34482: PUSH
34483: LD_INT 1
34485: ST_TO_ADDR
// if p3 = 5 then
34486: LD_VAR 0 3
34490: PUSH
34491: LD_INT 5
34493: EQUAL
34494: IFFALSE 34504
// sLevel := true ;
34496: LD_ADDR_EXP 94
34500: PUSH
34501: LD_INT 1
34503: ST_TO_ADDR
// if p3 = 6 then
34504: LD_VAR 0 3
34508: PUSH
34509: LD_INT 6
34511: EQUAL
34512: IFFALSE 34522
// sArmoury := true ;
34514: LD_ADDR_EXP 95
34518: PUSH
34519: LD_INT 1
34521: ST_TO_ADDR
// if p3 = 7 then
34522: LD_VAR 0 3
34526: PUSH
34527: LD_INT 7
34529: EQUAL
34530: IFFALSE 34540
// sRadar := true ;
34532: LD_ADDR_EXP 96
34536: PUSH
34537: LD_INT 1
34539: ST_TO_ADDR
// if p3 = 8 then
34540: LD_VAR 0 3
34544: PUSH
34545: LD_INT 8
34547: EQUAL
34548: IFFALSE 34558
// sBunker := true ;
34550: LD_ADDR_EXP 97
34554: PUSH
34555: LD_INT 1
34557: ST_TO_ADDR
// if p3 = 9 then
34558: LD_VAR 0 3
34562: PUSH
34563: LD_INT 9
34565: EQUAL
34566: IFFALSE 34576
// sHack := true ;
34568: LD_ADDR_EXP 98
34572: PUSH
34573: LD_INT 1
34575: ST_TO_ADDR
// if p3 = 10 then
34576: LD_VAR 0 3
34580: PUSH
34581: LD_INT 10
34583: EQUAL
34584: IFFALSE 34594
// sFire := true ;
34586: LD_ADDR_EXP 99
34590: PUSH
34591: LD_INT 1
34593: ST_TO_ADDR
// if p3 = 11 then
34594: LD_VAR 0 3
34598: PUSH
34599: LD_INT 11
34601: EQUAL
34602: IFFALSE 34612
// sRefresh := true ;
34604: LD_ADDR_EXP 100
34608: PUSH
34609: LD_INT 1
34611: ST_TO_ADDR
// if p3 = 12 then
34612: LD_VAR 0 3
34616: PUSH
34617: LD_INT 12
34619: EQUAL
34620: IFFALSE 34630
// sExp := true ;
34622: LD_ADDR_EXP 101
34626: PUSH
34627: LD_INT 1
34629: ST_TO_ADDR
// if p3 = 13 then
34630: LD_VAR 0 3
34634: PUSH
34635: LD_INT 13
34637: EQUAL
34638: IFFALSE 34648
// sDepot := true ;
34640: LD_ADDR_EXP 102
34644: PUSH
34645: LD_INT 1
34647: ST_TO_ADDR
// if p3 = 14 then
34648: LD_VAR 0 3
34652: PUSH
34653: LD_INT 14
34655: EQUAL
34656: IFFALSE 34666
// sFlag := true ;
34658: LD_ADDR_EXP 103
34662: PUSH
34663: LD_INT 1
34665: ST_TO_ADDR
// if p3 = 15 then
34666: LD_VAR 0 3
34670: PUSH
34671: LD_INT 15
34673: EQUAL
34674: IFFALSE 34684
// sKamikadze := true ;
34676: LD_ADDR_EXP 111
34680: PUSH
34681: LD_INT 1
34683: ST_TO_ADDR
// if p3 = 16 then
34684: LD_VAR 0 3
34688: PUSH
34689: LD_INT 16
34691: EQUAL
34692: IFFALSE 34702
// sTroll := true ;
34694: LD_ADDR_EXP 112
34698: PUSH
34699: LD_INT 1
34701: ST_TO_ADDR
// if p3 = 17 then
34702: LD_VAR 0 3
34706: PUSH
34707: LD_INT 17
34709: EQUAL
34710: IFFALSE 34720
// sSlow := true ;
34712: LD_ADDR_EXP 113
34716: PUSH
34717: LD_INT 1
34719: ST_TO_ADDR
// if p3 = 18 then
34720: LD_VAR 0 3
34724: PUSH
34725: LD_INT 18
34727: EQUAL
34728: IFFALSE 34738
// sLack := true ;
34730: LD_ADDR_EXP 114
34734: PUSH
34735: LD_INT 1
34737: ST_TO_ADDR
// if p3 = 19 then
34738: LD_VAR 0 3
34742: PUSH
34743: LD_INT 19
34745: EQUAL
34746: IFFALSE 34756
// sTank := true ;
34748: LD_ADDR_EXP 116
34752: PUSH
34753: LD_INT 1
34755: ST_TO_ADDR
// if p3 = 20 then
34756: LD_VAR 0 3
34760: PUSH
34761: LD_INT 20
34763: EQUAL
34764: IFFALSE 34774
// sRemote := true ;
34766: LD_ADDR_EXP 117
34770: PUSH
34771: LD_INT 1
34773: ST_TO_ADDR
// if p3 = 21 then
34774: LD_VAR 0 3
34778: PUSH
34779: LD_INT 21
34781: EQUAL
34782: IFFALSE 34792
// sPowell := true ;
34784: LD_ADDR_EXP 118
34788: PUSH
34789: LD_INT 1
34791: ST_TO_ADDR
// if p3 = 22 then
34792: LD_VAR 0 3
34796: PUSH
34797: LD_INT 22
34799: EQUAL
34800: IFFALSE 34810
// sTeleport := true ;
34802: LD_ADDR_EXP 121
34806: PUSH
34807: LD_INT 1
34809: ST_TO_ADDR
// if p3 = 23 then
34810: LD_VAR 0 3
34814: PUSH
34815: LD_INT 23
34817: EQUAL
34818: IFFALSE 34828
// sOilTower := true ;
34820: LD_ADDR_EXP 123
34824: PUSH
34825: LD_INT 1
34827: ST_TO_ADDR
// if p3 = 24 then
34828: LD_VAR 0 3
34832: PUSH
34833: LD_INT 24
34835: EQUAL
34836: IFFALSE 34846
// sShovel := true ;
34838: LD_ADDR_EXP 124
34842: PUSH
34843: LD_INT 1
34845: ST_TO_ADDR
// if p3 = 25 then
34846: LD_VAR 0 3
34850: PUSH
34851: LD_INT 25
34853: EQUAL
34854: IFFALSE 34864
// sSheik := true ;
34856: LD_ADDR_EXP 125
34860: PUSH
34861: LD_INT 1
34863: ST_TO_ADDR
// if p3 = 26 then
34864: LD_VAR 0 3
34868: PUSH
34869: LD_INT 26
34871: EQUAL
34872: IFFALSE 34882
// sEarthquake := true ;
34874: LD_ADDR_EXP 127
34878: PUSH
34879: LD_INT 1
34881: ST_TO_ADDR
// if p3 = 27 then
34882: LD_VAR 0 3
34886: PUSH
34887: LD_INT 27
34889: EQUAL
34890: IFFALSE 34900
// sAI := true ;
34892: LD_ADDR_EXP 128
34896: PUSH
34897: LD_INT 1
34899: ST_TO_ADDR
// if p3 = 28 then
34900: LD_VAR 0 3
34904: PUSH
34905: LD_INT 28
34907: EQUAL
34908: IFFALSE 34918
// sCargo := true ;
34910: LD_ADDR_EXP 131
34914: PUSH
34915: LD_INT 1
34917: ST_TO_ADDR
// if p3 = 29 then
34918: LD_VAR 0 3
34922: PUSH
34923: LD_INT 29
34925: EQUAL
34926: IFFALSE 34936
// sDLaser := true ;
34928: LD_ADDR_EXP 132
34932: PUSH
34933: LD_INT 1
34935: ST_TO_ADDR
// if p3 = 30 then
34936: LD_VAR 0 3
34940: PUSH
34941: LD_INT 30
34943: EQUAL
34944: IFFALSE 34954
// sExchange := true ;
34946: LD_ADDR_EXP 133
34950: PUSH
34951: LD_INT 1
34953: ST_TO_ADDR
// if p3 = 31 then
34954: LD_VAR 0 3
34958: PUSH
34959: LD_INT 31
34961: EQUAL
34962: IFFALSE 34972
// sFac := true ;
34964: LD_ADDR_EXP 134
34968: PUSH
34969: LD_INT 1
34971: ST_TO_ADDR
// if p3 = 32 then
34972: LD_VAR 0 3
34976: PUSH
34977: LD_INT 32
34979: EQUAL
34980: IFFALSE 34990
// sPower := true ;
34982: LD_ADDR_EXP 135
34986: PUSH
34987: LD_INT 1
34989: ST_TO_ADDR
// if p3 = 33 then
34990: LD_VAR 0 3
34994: PUSH
34995: LD_INT 33
34997: EQUAL
34998: IFFALSE 35008
// sRandom := true ;
35000: LD_ADDR_EXP 136
35004: PUSH
35005: LD_INT 1
35007: ST_TO_ADDR
// if p3 = 34 then
35008: LD_VAR 0 3
35012: PUSH
35013: LD_INT 34
35015: EQUAL
35016: IFFALSE 35026
// sShield := true ;
35018: LD_ADDR_EXP 137
35022: PUSH
35023: LD_INT 1
35025: ST_TO_ADDR
// if p3 = 35 then
35026: LD_VAR 0 3
35030: PUSH
35031: LD_INT 35
35033: EQUAL
35034: IFFALSE 35044
// sTime := true ;
35036: LD_ADDR_EXP 138
35040: PUSH
35041: LD_INT 1
35043: ST_TO_ADDR
// if p3 = 36 then
35044: LD_VAR 0 3
35048: PUSH
35049: LD_INT 36
35051: EQUAL
35052: IFFALSE 35062
// sTools := true ;
35054: LD_ADDR_EXP 139
35058: PUSH
35059: LD_INT 1
35061: ST_TO_ADDR
// if p3 = 101 then
35062: LD_VAR 0 3
35066: PUSH
35067: LD_INT 101
35069: EQUAL
35070: IFFALSE 35080
// sSold := true ;
35072: LD_ADDR_EXP 104
35076: PUSH
35077: LD_INT 1
35079: ST_TO_ADDR
// if p3 = 102 then
35080: LD_VAR 0 3
35084: PUSH
35085: LD_INT 102
35087: EQUAL
35088: IFFALSE 35098
// sDiff := true ;
35090: LD_ADDR_EXP 105
35094: PUSH
35095: LD_INT 1
35097: ST_TO_ADDR
// if p3 = 103 then
35098: LD_VAR 0 3
35102: PUSH
35103: LD_INT 103
35105: EQUAL
35106: IFFALSE 35116
// sFog := true ;
35108: LD_ADDR_EXP 108
35112: PUSH
35113: LD_INT 1
35115: ST_TO_ADDR
// if p3 = 104 then
35116: LD_VAR 0 3
35120: PUSH
35121: LD_INT 104
35123: EQUAL
35124: IFFALSE 35134
// sReset := true ;
35126: LD_ADDR_EXP 109
35130: PUSH
35131: LD_INT 1
35133: ST_TO_ADDR
// if p3 = 105 then
35134: LD_VAR 0 3
35138: PUSH
35139: LD_INT 105
35141: EQUAL
35142: IFFALSE 35152
// sSun := true ;
35144: LD_ADDR_EXP 110
35148: PUSH
35149: LD_INT 1
35151: ST_TO_ADDR
// if p3 = 106 then
35152: LD_VAR 0 3
35156: PUSH
35157: LD_INT 106
35159: EQUAL
35160: IFFALSE 35170
// sTiger := true ;
35162: LD_ADDR_EXP 106
35166: PUSH
35167: LD_INT 1
35169: ST_TO_ADDR
// if p3 = 107 then
35170: LD_VAR 0 3
35174: PUSH
35175: LD_INT 107
35177: EQUAL
35178: IFFALSE 35188
// sBomb := true ;
35180: LD_ADDR_EXP 107
35184: PUSH
35185: LD_INT 1
35187: ST_TO_ADDR
// if p3 = 108 then
35188: LD_VAR 0 3
35192: PUSH
35193: LD_INT 108
35195: EQUAL
35196: IFFALSE 35206
// sWound := true ;
35198: LD_ADDR_EXP 115
35202: PUSH
35203: LD_INT 1
35205: ST_TO_ADDR
// if p3 = 109 then
35206: LD_VAR 0 3
35210: PUSH
35211: LD_INT 109
35213: EQUAL
35214: IFFALSE 35224
// sBetray := true ;
35216: LD_ADDR_EXP 119
35220: PUSH
35221: LD_INT 1
35223: ST_TO_ADDR
// if p3 = 110 then
35224: LD_VAR 0 3
35228: PUSH
35229: LD_INT 110
35231: EQUAL
35232: IFFALSE 35242
// sContamin := true ;
35234: LD_ADDR_EXP 120
35238: PUSH
35239: LD_INT 1
35241: ST_TO_ADDR
// if p3 = 111 then
35242: LD_VAR 0 3
35246: PUSH
35247: LD_INT 111
35249: EQUAL
35250: IFFALSE 35260
// sOil := true ;
35252: LD_ADDR_EXP 122
35256: PUSH
35257: LD_INT 1
35259: ST_TO_ADDR
// if p3 = 112 then
35260: LD_VAR 0 3
35264: PUSH
35265: LD_INT 112
35267: EQUAL
35268: IFFALSE 35278
// sStu := true ;
35270: LD_ADDR_EXP 126
35274: PUSH
35275: LD_INT 1
35277: ST_TO_ADDR
// if p3 = 113 then
35278: LD_VAR 0 3
35282: PUSH
35283: LD_INT 113
35285: EQUAL
35286: IFFALSE 35296
// sBazooka := true ;
35288: LD_ADDR_EXP 129
35292: PUSH
35293: LD_INT 1
35295: ST_TO_ADDR
// if p3 = 114 then
35296: LD_VAR 0 3
35300: PUSH
35301: LD_INT 114
35303: EQUAL
35304: IFFALSE 35314
// sMortar := true ;
35306: LD_ADDR_EXP 130
35310: PUSH
35311: LD_INT 1
35313: ST_TO_ADDR
// if p3 = 115 then
35314: LD_VAR 0 3
35318: PUSH
35319: LD_INT 115
35321: EQUAL
35322: IFFALSE 35332
// sRanger := true ;
35324: LD_ADDR_EXP 140
35328: PUSH
35329: LD_INT 1
35331: ST_TO_ADDR
// if p3 = 116 then
35332: LD_VAR 0 3
35336: PUSH
35337: LD_INT 116
35339: EQUAL
35340: IFFALSE 35350
// sComputer := true ;
35342: LD_ADDR_EXP 141
35346: PUSH
35347: LD_INT 1
35349: ST_TO_ADDR
// if p3 = 117 then
35350: LD_VAR 0 3
35354: PUSH
35355: LD_INT 117
35357: EQUAL
35358: IFFALSE 35368
// s30 := true ;
35360: LD_ADDR_EXP 142
35364: PUSH
35365: LD_INT 1
35367: ST_TO_ADDR
// if p3 = 118 then
35368: LD_VAR 0 3
35372: PUSH
35373: LD_INT 118
35375: EQUAL
35376: IFFALSE 35386
// s60 := true ;
35378: LD_ADDR_EXP 143
35382: PUSH
35383: LD_INT 1
35385: ST_TO_ADDR
// end ; if p2 = hack_mode then
35386: LD_VAR 0 2
35390: PUSH
35391: LD_INT 101
35393: EQUAL
35394: IFFALSE 35522
// begin case p3 of 1 :
35396: LD_VAR 0 3
35400: PUSH
35401: LD_INT 1
35403: DOUBLE
35404: EQUAL
35405: IFTRUE 35409
35407: GO 35416
35409: POP
// hHackUnlimitedResources ; 2 :
35410: CALL 47785 0 0
35414: GO 35522
35416: LD_INT 2
35418: DOUBLE
35419: EQUAL
35420: IFTRUE 35424
35422: GO 35431
35424: POP
// hHackSetLevel10 ; 3 :
35425: CALL 47918 0 0
35429: GO 35522
35431: LD_INT 3
35433: DOUBLE
35434: EQUAL
35435: IFTRUE 35439
35437: GO 35446
35439: POP
// hHackSetLevel10YourUnits ; 4 :
35440: CALL 48003 0 0
35444: GO 35522
35446: LD_INT 4
35448: DOUBLE
35449: EQUAL
35450: IFTRUE 35454
35452: GO 35461
35454: POP
// hHackInvincible ; 5 :
35455: CALL 48451 0 0
35459: GO 35522
35461: LD_INT 5
35463: DOUBLE
35464: EQUAL
35465: IFTRUE 35469
35467: GO 35476
35469: POP
// hHackInvisible ; 6 :
35470: CALL 48562 0 0
35474: GO 35522
35476: LD_INT 6
35478: DOUBLE
35479: EQUAL
35480: IFTRUE 35484
35482: GO 35491
35484: POP
// hHackChangeYourSide ; 7 :
35485: CALL 48619 0 0
35489: GO 35522
35491: LD_INT 7
35493: DOUBLE
35494: EQUAL
35495: IFTRUE 35499
35497: GO 35506
35499: POP
// hHackChangeUnitSide ; 8 :
35500: CALL 48661 0 0
35504: GO 35522
35506: LD_INT 8
35508: DOUBLE
35509: EQUAL
35510: IFTRUE 35514
35512: GO 35521
35514: POP
// hHackFog ; end ;
35515: CALL 48762 0 0
35519: GO 35522
35521: POP
// end ; if p2 = game_save_mode then
35522: LD_VAR 0 2
35526: PUSH
35527: LD_INT 102
35529: EQUAL
35530: IFFALSE 35587
// begin if p3 = 1 then
35532: LD_VAR 0 3
35536: PUSH
35537: LD_INT 1
35539: EQUAL
35540: IFFALSE 35552
// globalGameSaveCounter := p4 ;
35542: LD_ADDR_EXP 86
35546: PUSH
35547: LD_VAR 0 4
35551: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
35552: LD_VAR 0 3
35556: PUSH
35557: LD_INT 2
35559: EQUAL
35560: IFFALSE 35568
35562: PUSH
35563: LD_EXP 86
35567: AND
35568: IFFALSE 35587
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
35570: LD_STRING setGameSaveCounter(
35572: PUSH
35573: LD_EXP 86
35577: STR
35578: PUSH
35579: LD_STRING )
35581: STR
35582: PPUSH
35583: CALL_OW 559
// end ; end ;
35587: LD_VAR 0 7
35591: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
35592: LD_INT 0
35594: PPUSH
// streamModeActive := false ;
35595: LD_ADDR_EXP 87
35599: PUSH
35600: LD_INT 0
35602: ST_TO_ADDR
// normalCounter := 36 ;
35603: LD_ADDR_EXP 88
35607: PUSH
35608: LD_INT 36
35610: ST_TO_ADDR
// hardcoreCounter := 18 ;
35611: LD_ADDR_EXP 89
35615: PUSH
35616: LD_INT 18
35618: ST_TO_ADDR
// sRocket := false ;
35619: LD_ADDR_EXP 92
35623: PUSH
35624: LD_INT 0
35626: ST_TO_ADDR
// sSpeed := false ;
35627: LD_ADDR_EXP 91
35631: PUSH
35632: LD_INT 0
35634: ST_TO_ADDR
// sEngine := false ;
35635: LD_ADDR_EXP 93
35639: PUSH
35640: LD_INT 0
35642: ST_TO_ADDR
// sSpec := false ;
35643: LD_ADDR_EXP 90
35647: PUSH
35648: LD_INT 0
35650: ST_TO_ADDR
// sLevel := false ;
35651: LD_ADDR_EXP 94
35655: PUSH
35656: LD_INT 0
35658: ST_TO_ADDR
// sArmoury := false ;
35659: LD_ADDR_EXP 95
35663: PUSH
35664: LD_INT 0
35666: ST_TO_ADDR
// sRadar := false ;
35667: LD_ADDR_EXP 96
35671: PUSH
35672: LD_INT 0
35674: ST_TO_ADDR
// sBunker := false ;
35675: LD_ADDR_EXP 97
35679: PUSH
35680: LD_INT 0
35682: ST_TO_ADDR
// sHack := false ;
35683: LD_ADDR_EXP 98
35687: PUSH
35688: LD_INT 0
35690: ST_TO_ADDR
// sFire := false ;
35691: LD_ADDR_EXP 99
35695: PUSH
35696: LD_INT 0
35698: ST_TO_ADDR
// sRefresh := false ;
35699: LD_ADDR_EXP 100
35703: PUSH
35704: LD_INT 0
35706: ST_TO_ADDR
// sExp := false ;
35707: LD_ADDR_EXP 101
35711: PUSH
35712: LD_INT 0
35714: ST_TO_ADDR
// sDepot := false ;
35715: LD_ADDR_EXP 102
35719: PUSH
35720: LD_INT 0
35722: ST_TO_ADDR
// sFlag := false ;
35723: LD_ADDR_EXP 103
35727: PUSH
35728: LD_INT 0
35730: ST_TO_ADDR
// sKamikadze := false ;
35731: LD_ADDR_EXP 111
35735: PUSH
35736: LD_INT 0
35738: ST_TO_ADDR
// sTroll := false ;
35739: LD_ADDR_EXP 112
35743: PUSH
35744: LD_INT 0
35746: ST_TO_ADDR
// sSlow := false ;
35747: LD_ADDR_EXP 113
35751: PUSH
35752: LD_INT 0
35754: ST_TO_ADDR
// sLack := false ;
35755: LD_ADDR_EXP 114
35759: PUSH
35760: LD_INT 0
35762: ST_TO_ADDR
// sTank := false ;
35763: LD_ADDR_EXP 116
35767: PUSH
35768: LD_INT 0
35770: ST_TO_ADDR
// sRemote := false ;
35771: LD_ADDR_EXP 117
35775: PUSH
35776: LD_INT 0
35778: ST_TO_ADDR
// sPowell := false ;
35779: LD_ADDR_EXP 118
35783: PUSH
35784: LD_INT 0
35786: ST_TO_ADDR
// sTeleport := false ;
35787: LD_ADDR_EXP 121
35791: PUSH
35792: LD_INT 0
35794: ST_TO_ADDR
// sOilTower := false ;
35795: LD_ADDR_EXP 123
35799: PUSH
35800: LD_INT 0
35802: ST_TO_ADDR
// sShovel := false ;
35803: LD_ADDR_EXP 124
35807: PUSH
35808: LD_INT 0
35810: ST_TO_ADDR
// sSheik := false ;
35811: LD_ADDR_EXP 125
35815: PUSH
35816: LD_INT 0
35818: ST_TO_ADDR
// sEarthquake := false ;
35819: LD_ADDR_EXP 127
35823: PUSH
35824: LD_INT 0
35826: ST_TO_ADDR
// sAI := false ;
35827: LD_ADDR_EXP 128
35831: PUSH
35832: LD_INT 0
35834: ST_TO_ADDR
// sCargo := false ;
35835: LD_ADDR_EXP 131
35839: PUSH
35840: LD_INT 0
35842: ST_TO_ADDR
// sDLaser := false ;
35843: LD_ADDR_EXP 132
35847: PUSH
35848: LD_INT 0
35850: ST_TO_ADDR
// sExchange := false ;
35851: LD_ADDR_EXP 133
35855: PUSH
35856: LD_INT 0
35858: ST_TO_ADDR
// sFac := false ;
35859: LD_ADDR_EXP 134
35863: PUSH
35864: LD_INT 0
35866: ST_TO_ADDR
// sPower := false ;
35867: LD_ADDR_EXP 135
35871: PUSH
35872: LD_INT 0
35874: ST_TO_ADDR
// sRandom := false ;
35875: LD_ADDR_EXP 136
35879: PUSH
35880: LD_INT 0
35882: ST_TO_ADDR
// sShield := false ;
35883: LD_ADDR_EXP 137
35887: PUSH
35888: LD_INT 0
35890: ST_TO_ADDR
// sTime := false ;
35891: LD_ADDR_EXP 138
35895: PUSH
35896: LD_INT 0
35898: ST_TO_ADDR
// sTools := false ;
35899: LD_ADDR_EXP 139
35903: PUSH
35904: LD_INT 0
35906: ST_TO_ADDR
// sSold := false ;
35907: LD_ADDR_EXP 104
35911: PUSH
35912: LD_INT 0
35914: ST_TO_ADDR
// sDiff := false ;
35915: LD_ADDR_EXP 105
35919: PUSH
35920: LD_INT 0
35922: ST_TO_ADDR
// sFog := false ;
35923: LD_ADDR_EXP 108
35927: PUSH
35928: LD_INT 0
35930: ST_TO_ADDR
// sReset := false ;
35931: LD_ADDR_EXP 109
35935: PUSH
35936: LD_INT 0
35938: ST_TO_ADDR
// sSun := false ;
35939: LD_ADDR_EXP 110
35943: PUSH
35944: LD_INT 0
35946: ST_TO_ADDR
// sTiger := false ;
35947: LD_ADDR_EXP 106
35951: PUSH
35952: LD_INT 0
35954: ST_TO_ADDR
// sBomb := false ;
35955: LD_ADDR_EXP 107
35959: PUSH
35960: LD_INT 0
35962: ST_TO_ADDR
// sWound := false ;
35963: LD_ADDR_EXP 115
35967: PUSH
35968: LD_INT 0
35970: ST_TO_ADDR
// sBetray := false ;
35971: LD_ADDR_EXP 119
35975: PUSH
35976: LD_INT 0
35978: ST_TO_ADDR
// sContamin := false ;
35979: LD_ADDR_EXP 120
35983: PUSH
35984: LD_INT 0
35986: ST_TO_ADDR
// sOil := false ;
35987: LD_ADDR_EXP 122
35991: PUSH
35992: LD_INT 0
35994: ST_TO_ADDR
// sStu := false ;
35995: LD_ADDR_EXP 126
35999: PUSH
36000: LD_INT 0
36002: ST_TO_ADDR
// sBazooka := false ;
36003: LD_ADDR_EXP 129
36007: PUSH
36008: LD_INT 0
36010: ST_TO_ADDR
// sMortar := false ;
36011: LD_ADDR_EXP 130
36015: PUSH
36016: LD_INT 0
36018: ST_TO_ADDR
// sRanger := false ;
36019: LD_ADDR_EXP 140
36023: PUSH
36024: LD_INT 0
36026: ST_TO_ADDR
// sComputer := false ;
36027: LD_ADDR_EXP 141
36031: PUSH
36032: LD_INT 0
36034: ST_TO_ADDR
// s30 := false ;
36035: LD_ADDR_EXP 142
36039: PUSH
36040: LD_INT 0
36042: ST_TO_ADDR
// s60 := false ;
36043: LD_ADDR_EXP 143
36047: PUSH
36048: LD_INT 0
36050: ST_TO_ADDR
// end ;
36051: LD_VAR 0 1
36055: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
36056: LD_INT 0
36058: PPUSH
36059: PPUSH
36060: PPUSH
36061: PPUSH
36062: PPUSH
36063: PPUSH
36064: PPUSH
// result := [ ] ;
36065: LD_ADDR_VAR 0 2
36069: PUSH
36070: EMPTY
36071: ST_TO_ADDR
// if campaign_id = 1 then
36072: LD_OWVAR 69
36076: PUSH
36077: LD_INT 1
36079: EQUAL
36080: IFFALSE 39246
// begin case mission_number of 1 :
36082: LD_OWVAR 70
36086: PUSH
36087: LD_INT 1
36089: DOUBLE
36090: EQUAL
36091: IFTRUE 36095
36093: GO 36171
36095: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
36096: LD_ADDR_VAR 0 2
36100: PUSH
36101: LD_INT 2
36103: PUSH
36104: LD_INT 4
36106: PUSH
36107: LD_INT 11
36109: PUSH
36110: LD_INT 12
36112: PUSH
36113: LD_INT 15
36115: PUSH
36116: LD_INT 16
36118: PUSH
36119: LD_INT 22
36121: PUSH
36122: LD_INT 23
36124: PUSH
36125: LD_INT 26
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 101
36141: PUSH
36142: LD_INT 102
36144: PUSH
36145: LD_INT 106
36147: PUSH
36148: LD_INT 116
36150: PUSH
36151: LD_INT 117
36153: PUSH
36154: LD_INT 118
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: ST_TO_ADDR
36169: GO 39244
36171: LD_INT 2
36173: DOUBLE
36174: EQUAL
36175: IFTRUE 36179
36177: GO 36263
36179: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
36180: LD_ADDR_VAR 0 2
36184: PUSH
36185: LD_INT 2
36187: PUSH
36188: LD_INT 4
36190: PUSH
36191: LD_INT 11
36193: PUSH
36194: LD_INT 12
36196: PUSH
36197: LD_INT 15
36199: PUSH
36200: LD_INT 16
36202: PUSH
36203: LD_INT 22
36205: PUSH
36206: LD_INT 23
36208: PUSH
36209: LD_INT 26
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 101
36225: PUSH
36226: LD_INT 102
36228: PUSH
36229: LD_INT 105
36231: PUSH
36232: LD_INT 106
36234: PUSH
36235: LD_INT 108
36237: PUSH
36238: LD_INT 116
36240: PUSH
36241: LD_INT 117
36243: PUSH
36244: LD_INT 118
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: ST_TO_ADDR
36261: GO 39244
36263: LD_INT 3
36265: DOUBLE
36266: EQUAL
36267: IFTRUE 36271
36269: GO 36359
36271: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
36272: LD_ADDR_VAR 0 2
36276: PUSH
36277: LD_INT 2
36279: PUSH
36280: LD_INT 4
36282: PUSH
36283: LD_INT 5
36285: PUSH
36286: LD_INT 11
36288: PUSH
36289: LD_INT 12
36291: PUSH
36292: LD_INT 15
36294: PUSH
36295: LD_INT 16
36297: PUSH
36298: LD_INT 22
36300: PUSH
36301: LD_INT 26
36303: PUSH
36304: LD_INT 36
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 101
36321: PUSH
36322: LD_INT 102
36324: PUSH
36325: LD_INT 105
36327: PUSH
36328: LD_INT 106
36330: PUSH
36331: LD_INT 108
36333: PUSH
36334: LD_INT 116
36336: PUSH
36337: LD_INT 117
36339: PUSH
36340: LD_INT 118
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: ST_TO_ADDR
36357: GO 39244
36359: LD_INT 4
36361: DOUBLE
36362: EQUAL
36363: IFTRUE 36367
36365: GO 36463
36367: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
36368: LD_ADDR_VAR 0 2
36372: PUSH
36373: LD_INT 2
36375: PUSH
36376: LD_INT 4
36378: PUSH
36379: LD_INT 5
36381: PUSH
36382: LD_INT 8
36384: PUSH
36385: LD_INT 11
36387: PUSH
36388: LD_INT 12
36390: PUSH
36391: LD_INT 15
36393: PUSH
36394: LD_INT 16
36396: PUSH
36397: LD_INT 22
36399: PUSH
36400: LD_INT 23
36402: PUSH
36403: LD_INT 26
36405: PUSH
36406: LD_INT 36
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 101
36425: PUSH
36426: LD_INT 102
36428: PUSH
36429: LD_INT 105
36431: PUSH
36432: LD_INT 106
36434: PUSH
36435: LD_INT 108
36437: PUSH
36438: LD_INT 116
36440: PUSH
36441: LD_INT 117
36443: PUSH
36444: LD_INT 118
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: ST_TO_ADDR
36461: GO 39244
36463: LD_INT 5
36465: DOUBLE
36466: EQUAL
36467: IFTRUE 36471
36469: GO 36583
36471: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
36472: LD_ADDR_VAR 0 2
36476: PUSH
36477: LD_INT 2
36479: PUSH
36480: LD_INT 4
36482: PUSH
36483: LD_INT 5
36485: PUSH
36486: LD_INT 6
36488: PUSH
36489: LD_INT 8
36491: PUSH
36492: LD_INT 11
36494: PUSH
36495: LD_INT 12
36497: PUSH
36498: LD_INT 15
36500: PUSH
36501: LD_INT 16
36503: PUSH
36504: LD_INT 22
36506: PUSH
36507: LD_INT 23
36509: PUSH
36510: LD_INT 25
36512: PUSH
36513: LD_INT 26
36515: PUSH
36516: LD_INT 36
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 101
36537: PUSH
36538: LD_INT 102
36540: PUSH
36541: LD_INT 105
36543: PUSH
36544: LD_INT 106
36546: PUSH
36547: LD_INT 108
36549: PUSH
36550: LD_INT 109
36552: PUSH
36553: LD_INT 112
36555: PUSH
36556: LD_INT 116
36558: PUSH
36559: LD_INT 117
36561: PUSH
36562: LD_INT 118
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: ST_TO_ADDR
36581: GO 39244
36583: LD_INT 6
36585: DOUBLE
36586: EQUAL
36587: IFTRUE 36591
36589: GO 36723
36591: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
36592: LD_ADDR_VAR 0 2
36596: PUSH
36597: LD_INT 2
36599: PUSH
36600: LD_INT 4
36602: PUSH
36603: LD_INT 5
36605: PUSH
36606: LD_INT 6
36608: PUSH
36609: LD_INT 8
36611: PUSH
36612: LD_INT 11
36614: PUSH
36615: LD_INT 12
36617: PUSH
36618: LD_INT 15
36620: PUSH
36621: LD_INT 16
36623: PUSH
36624: LD_INT 20
36626: PUSH
36627: LD_INT 21
36629: PUSH
36630: LD_INT 22
36632: PUSH
36633: LD_INT 23
36635: PUSH
36636: LD_INT 25
36638: PUSH
36639: LD_INT 26
36641: PUSH
36642: LD_INT 30
36644: PUSH
36645: LD_INT 31
36647: PUSH
36648: LD_INT 32
36650: PUSH
36651: LD_INT 36
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 101
36677: PUSH
36678: LD_INT 102
36680: PUSH
36681: LD_INT 105
36683: PUSH
36684: LD_INT 106
36686: PUSH
36687: LD_INT 108
36689: PUSH
36690: LD_INT 109
36692: PUSH
36693: LD_INT 112
36695: PUSH
36696: LD_INT 116
36698: PUSH
36699: LD_INT 117
36701: PUSH
36702: LD_INT 118
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: ST_TO_ADDR
36721: GO 39244
36723: LD_INT 7
36725: DOUBLE
36726: EQUAL
36727: IFTRUE 36731
36729: GO 36843
36731: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
36732: LD_ADDR_VAR 0 2
36736: PUSH
36737: LD_INT 2
36739: PUSH
36740: LD_INT 4
36742: PUSH
36743: LD_INT 5
36745: PUSH
36746: LD_INT 7
36748: PUSH
36749: LD_INT 11
36751: PUSH
36752: LD_INT 12
36754: PUSH
36755: LD_INT 15
36757: PUSH
36758: LD_INT 16
36760: PUSH
36761: LD_INT 20
36763: PUSH
36764: LD_INT 21
36766: PUSH
36767: LD_INT 22
36769: PUSH
36770: LD_INT 23
36772: PUSH
36773: LD_INT 25
36775: PUSH
36776: LD_INT 26
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 101
36797: PUSH
36798: LD_INT 102
36800: PUSH
36801: LD_INT 103
36803: PUSH
36804: LD_INT 105
36806: PUSH
36807: LD_INT 106
36809: PUSH
36810: LD_INT 108
36812: PUSH
36813: LD_INT 112
36815: PUSH
36816: LD_INT 116
36818: PUSH
36819: LD_INT 117
36821: PUSH
36822: LD_INT 118
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: ST_TO_ADDR
36841: GO 39244
36843: LD_INT 8
36845: DOUBLE
36846: EQUAL
36847: IFTRUE 36851
36849: GO 36991
36851: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
36852: LD_ADDR_VAR 0 2
36856: PUSH
36857: LD_INT 2
36859: PUSH
36860: LD_INT 4
36862: PUSH
36863: LD_INT 5
36865: PUSH
36866: LD_INT 6
36868: PUSH
36869: LD_INT 7
36871: PUSH
36872: LD_INT 8
36874: PUSH
36875: LD_INT 11
36877: PUSH
36878: LD_INT 12
36880: PUSH
36881: LD_INT 15
36883: PUSH
36884: LD_INT 16
36886: PUSH
36887: LD_INT 20
36889: PUSH
36890: LD_INT 21
36892: PUSH
36893: LD_INT 22
36895: PUSH
36896: LD_INT 23
36898: PUSH
36899: LD_INT 25
36901: PUSH
36902: LD_INT 26
36904: PUSH
36905: LD_INT 30
36907: PUSH
36908: LD_INT 31
36910: PUSH
36911: LD_INT 32
36913: PUSH
36914: LD_INT 36
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 101
36941: PUSH
36942: LD_INT 102
36944: PUSH
36945: LD_INT 103
36947: PUSH
36948: LD_INT 105
36950: PUSH
36951: LD_INT 106
36953: PUSH
36954: LD_INT 108
36956: PUSH
36957: LD_INT 109
36959: PUSH
36960: LD_INT 112
36962: PUSH
36963: LD_INT 116
36965: PUSH
36966: LD_INT 117
36968: PUSH
36969: LD_INT 118
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: ST_TO_ADDR
36989: GO 39244
36991: LD_INT 9
36993: DOUBLE
36994: EQUAL
36995: IFTRUE 36999
36997: GO 37147
36999: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
37000: LD_ADDR_VAR 0 2
37004: PUSH
37005: LD_INT 2
37007: PUSH
37008: LD_INT 4
37010: PUSH
37011: LD_INT 5
37013: PUSH
37014: LD_INT 6
37016: PUSH
37017: LD_INT 7
37019: PUSH
37020: LD_INT 8
37022: PUSH
37023: LD_INT 11
37025: PUSH
37026: LD_INT 12
37028: PUSH
37029: LD_INT 15
37031: PUSH
37032: LD_INT 16
37034: PUSH
37035: LD_INT 20
37037: PUSH
37038: LD_INT 21
37040: PUSH
37041: LD_INT 22
37043: PUSH
37044: LD_INT 23
37046: PUSH
37047: LD_INT 25
37049: PUSH
37050: LD_INT 26
37052: PUSH
37053: LD_INT 28
37055: PUSH
37056: LD_INT 30
37058: PUSH
37059: LD_INT 31
37061: PUSH
37062: LD_INT 32
37064: PUSH
37065: LD_INT 36
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 101
37093: PUSH
37094: LD_INT 102
37096: PUSH
37097: LD_INT 103
37099: PUSH
37100: LD_INT 105
37102: PUSH
37103: LD_INT 106
37105: PUSH
37106: LD_INT 108
37108: PUSH
37109: LD_INT 109
37111: PUSH
37112: LD_INT 112
37114: PUSH
37115: LD_INT 114
37117: PUSH
37118: LD_INT 116
37120: PUSH
37121: LD_INT 117
37123: PUSH
37124: LD_INT 118
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: ST_TO_ADDR
37145: GO 39244
37147: LD_INT 10
37149: DOUBLE
37150: EQUAL
37151: IFTRUE 37155
37153: GO 37351
37155: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
37156: LD_ADDR_VAR 0 2
37160: PUSH
37161: LD_INT 2
37163: PUSH
37164: LD_INT 4
37166: PUSH
37167: LD_INT 5
37169: PUSH
37170: LD_INT 6
37172: PUSH
37173: LD_INT 7
37175: PUSH
37176: LD_INT 8
37178: PUSH
37179: LD_INT 9
37181: PUSH
37182: LD_INT 10
37184: PUSH
37185: LD_INT 11
37187: PUSH
37188: LD_INT 12
37190: PUSH
37191: LD_INT 13
37193: PUSH
37194: LD_INT 14
37196: PUSH
37197: LD_INT 15
37199: PUSH
37200: LD_INT 16
37202: PUSH
37203: LD_INT 17
37205: PUSH
37206: LD_INT 18
37208: PUSH
37209: LD_INT 19
37211: PUSH
37212: LD_INT 20
37214: PUSH
37215: LD_INT 21
37217: PUSH
37218: LD_INT 22
37220: PUSH
37221: LD_INT 23
37223: PUSH
37224: LD_INT 24
37226: PUSH
37227: LD_INT 25
37229: PUSH
37230: LD_INT 26
37232: PUSH
37233: LD_INT 28
37235: PUSH
37236: LD_INT 30
37238: PUSH
37239: LD_INT 31
37241: PUSH
37242: LD_INT 32
37244: PUSH
37245: LD_INT 36
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 101
37281: PUSH
37282: LD_INT 102
37284: PUSH
37285: LD_INT 103
37287: PUSH
37288: LD_INT 104
37290: PUSH
37291: LD_INT 105
37293: PUSH
37294: LD_INT 106
37296: PUSH
37297: LD_INT 107
37299: PUSH
37300: LD_INT 108
37302: PUSH
37303: LD_INT 109
37305: PUSH
37306: LD_INT 110
37308: PUSH
37309: LD_INT 111
37311: PUSH
37312: LD_INT 112
37314: PUSH
37315: LD_INT 114
37317: PUSH
37318: LD_INT 116
37320: PUSH
37321: LD_INT 117
37323: PUSH
37324: LD_INT 118
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: ST_TO_ADDR
37349: GO 39244
37351: LD_INT 11
37353: DOUBLE
37354: EQUAL
37355: IFTRUE 37359
37357: GO 37563
37359: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
37360: LD_ADDR_VAR 0 2
37364: PUSH
37365: LD_INT 2
37367: PUSH
37368: LD_INT 3
37370: PUSH
37371: LD_INT 4
37373: PUSH
37374: LD_INT 5
37376: PUSH
37377: LD_INT 6
37379: PUSH
37380: LD_INT 7
37382: PUSH
37383: LD_INT 8
37385: PUSH
37386: LD_INT 9
37388: PUSH
37389: LD_INT 10
37391: PUSH
37392: LD_INT 11
37394: PUSH
37395: LD_INT 12
37397: PUSH
37398: LD_INT 13
37400: PUSH
37401: LD_INT 14
37403: PUSH
37404: LD_INT 15
37406: PUSH
37407: LD_INT 16
37409: PUSH
37410: LD_INT 17
37412: PUSH
37413: LD_INT 18
37415: PUSH
37416: LD_INT 19
37418: PUSH
37419: LD_INT 20
37421: PUSH
37422: LD_INT 21
37424: PUSH
37425: LD_INT 22
37427: PUSH
37428: LD_INT 23
37430: PUSH
37431: LD_INT 24
37433: PUSH
37434: LD_INT 25
37436: PUSH
37437: LD_INT 26
37439: PUSH
37440: LD_INT 28
37442: PUSH
37443: LD_INT 30
37445: PUSH
37446: LD_INT 31
37448: PUSH
37449: LD_INT 32
37451: PUSH
37452: LD_INT 34
37454: PUSH
37455: LD_INT 36
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 101
37493: PUSH
37494: LD_INT 102
37496: PUSH
37497: LD_INT 103
37499: PUSH
37500: LD_INT 104
37502: PUSH
37503: LD_INT 105
37505: PUSH
37506: LD_INT 106
37508: PUSH
37509: LD_INT 107
37511: PUSH
37512: LD_INT 108
37514: PUSH
37515: LD_INT 109
37517: PUSH
37518: LD_INT 110
37520: PUSH
37521: LD_INT 111
37523: PUSH
37524: LD_INT 112
37526: PUSH
37527: LD_INT 114
37529: PUSH
37530: LD_INT 116
37532: PUSH
37533: LD_INT 117
37535: PUSH
37536: LD_INT 118
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: ST_TO_ADDR
37561: GO 39244
37563: LD_INT 12
37565: DOUBLE
37566: EQUAL
37567: IFTRUE 37571
37569: GO 37791
37571: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
37572: LD_ADDR_VAR 0 2
37576: PUSH
37577: LD_INT 1
37579: PUSH
37580: LD_INT 2
37582: PUSH
37583: LD_INT 3
37585: PUSH
37586: LD_INT 4
37588: PUSH
37589: LD_INT 5
37591: PUSH
37592: LD_INT 6
37594: PUSH
37595: LD_INT 7
37597: PUSH
37598: LD_INT 8
37600: PUSH
37601: LD_INT 9
37603: PUSH
37604: LD_INT 10
37606: PUSH
37607: LD_INT 11
37609: PUSH
37610: LD_INT 12
37612: PUSH
37613: LD_INT 13
37615: PUSH
37616: LD_INT 14
37618: PUSH
37619: LD_INT 15
37621: PUSH
37622: LD_INT 16
37624: PUSH
37625: LD_INT 17
37627: PUSH
37628: LD_INT 18
37630: PUSH
37631: LD_INT 19
37633: PUSH
37634: LD_INT 20
37636: PUSH
37637: LD_INT 21
37639: PUSH
37640: LD_INT 22
37642: PUSH
37643: LD_INT 23
37645: PUSH
37646: LD_INT 24
37648: PUSH
37649: LD_INT 25
37651: PUSH
37652: LD_INT 26
37654: PUSH
37655: LD_INT 27
37657: PUSH
37658: LD_INT 28
37660: PUSH
37661: LD_INT 30
37663: PUSH
37664: LD_INT 31
37666: PUSH
37667: LD_INT 32
37669: PUSH
37670: LD_INT 33
37672: PUSH
37673: LD_INT 34
37675: PUSH
37676: LD_INT 36
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 101
37717: PUSH
37718: LD_INT 102
37720: PUSH
37721: LD_INT 103
37723: PUSH
37724: LD_INT 104
37726: PUSH
37727: LD_INT 105
37729: PUSH
37730: LD_INT 106
37732: PUSH
37733: LD_INT 107
37735: PUSH
37736: LD_INT 108
37738: PUSH
37739: LD_INT 109
37741: PUSH
37742: LD_INT 110
37744: PUSH
37745: LD_INT 111
37747: PUSH
37748: LD_INT 112
37750: PUSH
37751: LD_INT 113
37753: PUSH
37754: LD_INT 114
37756: PUSH
37757: LD_INT 116
37759: PUSH
37760: LD_INT 117
37762: PUSH
37763: LD_INT 118
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: ST_TO_ADDR
37789: GO 39244
37791: LD_INT 13
37793: DOUBLE
37794: EQUAL
37795: IFTRUE 37799
37797: GO 38007
37799: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
37800: LD_ADDR_VAR 0 2
37804: PUSH
37805: LD_INT 1
37807: PUSH
37808: LD_INT 2
37810: PUSH
37811: LD_INT 3
37813: PUSH
37814: LD_INT 4
37816: PUSH
37817: LD_INT 5
37819: PUSH
37820: LD_INT 8
37822: PUSH
37823: LD_INT 9
37825: PUSH
37826: LD_INT 10
37828: PUSH
37829: LD_INT 11
37831: PUSH
37832: LD_INT 12
37834: PUSH
37835: LD_INT 14
37837: PUSH
37838: LD_INT 15
37840: PUSH
37841: LD_INT 16
37843: PUSH
37844: LD_INT 17
37846: PUSH
37847: LD_INT 18
37849: PUSH
37850: LD_INT 19
37852: PUSH
37853: LD_INT 20
37855: PUSH
37856: LD_INT 21
37858: PUSH
37859: LD_INT 22
37861: PUSH
37862: LD_INT 23
37864: PUSH
37865: LD_INT 24
37867: PUSH
37868: LD_INT 25
37870: PUSH
37871: LD_INT 26
37873: PUSH
37874: LD_INT 27
37876: PUSH
37877: LD_INT 28
37879: PUSH
37880: LD_INT 30
37882: PUSH
37883: LD_INT 31
37885: PUSH
37886: LD_INT 32
37888: PUSH
37889: LD_INT 33
37891: PUSH
37892: LD_INT 34
37894: PUSH
37895: LD_INT 36
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 101
37933: PUSH
37934: LD_INT 102
37936: PUSH
37937: LD_INT 103
37939: PUSH
37940: LD_INT 104
37942: PUSH
37943: LD_INT 105
37945: PUSH
37946: LD_INT 106
37948: PUSH
37949: LD_INT 107
37951: PUSH
37952: LD_INT 108
37954: PUSH
37955: LD_INT 109
37957: PUSH
37958: LD_INT 110
37960: PUSH
37961: LD_INT 111
37963: PUSH
37964: LD_INT 112
37966: PUSH
37967: LD_INT 113
37969: PUSH
37970: LD_INT 114
37972: PUSH
37973: LD_INT 116
37975: PUSH
37976: LD_INT 117
37978: PUSH
37979: LD_INT 118
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: ST_TO_ADDR
38005: GO 39244
38007: LD_INT 14
38009: DOUBLE
38010: EQUAL
38011: IFTRUE 38015
38013: GO 38239
38015: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
38016: LD_ADDR_VAR 0 2
38020: PUSH
38021: LD_INT 1
38023: PUSH
38024: LD_INT 2
38026: PUSH
38027: LD_INT 3
38029: PUSH
38030: LD_INT 4
38032: PUSH
38033: LD_INT 5
38035: PUSH
38036: LD_INT 6
38038: PUSH
38039: LD_INT 7
38041: PUSH
38042: LD_INT 8
38044: PUSH
38045: LD_INT 9
38047: PUSH
38048: LD_INT 10
38050: PUSH
38051: LD_INT 11
38053: PUSH
38054: LD_INT 12
38056: PUSH
38057: LD_INT 13
38059: PUSH
38060: LD_INT 14
38062: PUSH
38063: LD_INT 15
38065: PUSH
38066: LD_INT 16
38068: PUSH
38069: LD_INT 17
38071: PUSH
38072: LD_INT 18
38074: PUSH
38075: LD_INT 19
38077: PUSH
38078: LD_INT 20
38080: PUSH
38081: LD_INT 21
38083: PUSH
38084: LD_INT 22
38086: PUSH
38087: LD_INT 23
38089: PUSH
38090: LD_INT 24
38092: PUSH
38093: LD_INT 25
38095: PUSH
38096: LD_INT 26
38098: PUSH
38099: LD_INT 27
38101: PUSH
38102: LD_INT 28
38104: PUSH
38105: LD_INT 29
38107: PUSH
38108: LD_INT 30
38110: PUSH
38111: LD_INT 31
38113: PUSH
38114: LD_INT 32
38116: PUSH
38117: LD_INT 33
38119: PUSH
38120: LD_INT 34
38122: PUSH
38123: LD_INT 36
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 101
38165: PUSH
38166: LD_INT 102
38168: PUSH
38169: LD_INT 103
38171: PUSH
38172: LD_INT 104
38174: PUSH
38175: LD_INT 105
38177: PUSH
38178: LD_INT 106
38180: PUSH
38181: LD_INT 107
38183: PUSH
38184: LD_INT 108
38186: PUSH
38187: LD_INT 109
38189: PUSH
38190: LD_INT 110
38192: PUSH
38193: LD_INT 111
38195: PUSH
38196: LD_INT 112
38198: PUSH
38199: LD_INT 113
38201: PUSH
38202: LD_INT 114
38204: PUSH
38205: LD_INT 116
38207: PUSH
38208: LD_INT 117
38210: PUSH
38211: LD_INT 118
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: ST_TO_ADDR
38237: GO 39244
38239: LD_INT 15
38241: DOUBLE
38242: EQUAL
38243: IFTRUE 38247
38245: GO 38471
38247: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
38248: LD_ADDR_VAR 0 2
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: LD_INT 2
38258: PUSH
38259: LD_INT 3
38261: PUSH
38262: LD_INT 4
38264: PUSH
38265: LD_INT 5
38267: PUSH
38268: LD_INT 6
38270: PUSH
38271: LD_INT 7
38273: PUSH
38274: LD_INT 8
38276: PUSH
38277: LD_INT 9
38279: PUSH
38280: LD_INT 10
38282: PUSH
38283: LD_INT 11
38285: PUSH
38286: LD_INT 12
38288: PUSH
38289: LD_INT 13
38291: PUSH
38292: LD_INT 14
38294: PUSH
38295: LD_INT 15
38297: PUSH
38298: LD_INT 16
38300: PUSH
38301: LD_INT 17
38303: PUSH
38304: LD_INT 18
38306: PUSH
38307: LD_INT 19
38309: PUSH
38310: LD_INT 20
38312: PUSH
38313: LD_INT 21
38315: PUSH
38316: LD_INT 22
38318: PUSH
38319: LD_INT 23
38321: PUSH
38322: LD_INT 24
38324: PUSH
38325: LD_INT 25
38327: PUSH
38328: LD_INT 26
38330: PUSH
38331: LD_INT 27
38333: PUSH
38334: LD_INT 28
38336: PUSH
38337: LD_INT 29
38339: PUSH
38340: LD_INT 30
38342: PUSH
38343: LD_INT 31
38345: PUSH
38346: LD_INT 32
38348: PUSH
38349: LD_INT 33
38351: PUSH
38352: LD_INT 34
38354: PUSH
38355: LD_INT 36
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 101
38397: PUSH
38398: LD_INT 102
38400: PUSH
38401: LD_INT 103
38403: PUSH
38404: LD_INT 104
38406: PUSH
38407: LD_INT 105
38409: PUSH
38410: LD_INT 106
38412: PUSH
38413: LD_INT 107
38415: PUSH
38416: LD_INT 108
38418: PUSH
38419: LD_INT 109
38421: PUSH
38422: LD_INT 110
38424: PUSH
38425: LD_INT 111
38427: PUSH
38428: LD_INT 112
38430: PUSH
38431: LD_INT 113
38433: PUSH
38434: LD_INT 114
38436: PUSH
38437: LD_INT 116
38439: PUSH
38440: LD_INT 117
38442: PUSH
38443: LD_INT 118
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: ST_TO_ADDR
38469: GO 39244
38471: LD_INT 16
38473: DOUBLE
38474: EQUAL
38475: IFTRUE 38479
38477: GO 38615
38479: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
38480: LD_ADDR_VAR 0 2
38484: PUSH
38485: LD_INT 2
38487: PUSH
38488: LD_INT 4
38490: PUSH
38491: LD_INT 5
38493: PUSH
38494: LD_INT 7
38496: PUSH
38497: LD_INT 11
38499: PUSH
38500: LD_INT 12
38502: PUSH
38503: LD_INT 15
38505: PUSH
38506: LD_INT 16
38508: PUSH
38509: LD_INT 20
38511: PUSH
38512: LD_INT 21
38514: PUSH
38515: LD_INT 22
38517: PUSH
38518: LD_INT 23
38520: PUSH
38521: LD_INT 25
38523: PUSH
38524: LD_INT 26
38526: PUSH
38527: LD_INT 30
38529: PUSH
38530: LD_INT 31
38532: PUSH
38533: LD_INT 32
38535: PUSH
38536: LD_INT 33
38538: PUSH
38539: LD_INT 34
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 101
38565: PUSH
38566: LD_INT 102
38568: PUSH
38569: LD_INT 103
38571: PUSH
38572: LD_INT 106
38574: PUSH
38575: LD_INT 108
38577: PUSH
38578: LD_INT 112
38580: PUSH
38581: LD_INT 113
38583: PUSH
38584: LD_INT 114
38586: PUSH
38587: LD_INT 116
38589: PUSH
38590: LD_INT 117
38592: PUSH
38593: LD_INT 118
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: ST_TO_ADDR
38613: GO 39244
38615: LD_INT 17
38617: DOUBLE
38618: EQUAL
38619: IFTRUE 38623
38621: GO 38847
38623: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
38624: LD_ADDR_VAR 0 2
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: LD_INT 2
38634: PUSH
38635: LD_INT 3
38637: PUSH
38638: LD_INT 4
38640: PUSH
38641: LD_INT 5
38643: PUSH
38644: LD_INT 6
38646: PUSH
38647: LD_INT 7
38649: PUSH
38650: LD_INT 8
38652: PUSH
38653: LD_INT 9
38655: PUSH
38656: LD_INT 10
38658: PUSH
38659: LD_INT 11
38661: PUSH
38662: LD_INT 12
38664: PUSH
38665: LD_INT 13
38667: PUSH
38668: LD_INT 14
38670: PUSH
38671: LD_INT 15
38673: PUSH
38674: LD_INT 16
38676: PUSH
38677: LD_INT 17
38679: PUSH
38680: LD_INT 18
38682: PUSH
38683: LD_INT 19
38685: PUSH
38686: LD_INT 20
38688: PUSH
38689: LD_INT 21
38691: PUSH
38692: LD_INT 22
38694: PUSH
38695: LD_INT 23
38697: PUSH
38698: LD_INT 24
38700: PUSH
38701: LD_INT 25
38703: PUSH
38704: LD_INT 26
38706: PUSH
38707: LD_INT 27
38709: PUSH
38710: LD_INT 28
38712: PUSH
38713: LD_INT 29
38715: PUSH
38716: LD_INT 30
38718: PUSH
38719: LD_INT 31
38721: PUSH
38722: LD_INT 32
38724: PUSH
38725: LD_INT 33
38727: PUSH
38728: LD_INT 34
38730: PUSH
38731: LD_INT 36
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 101
38773: PUSH
38774: LD_INT 102
38776: PUSH
38777: LD_INT 103
38779: PUSH
38780: LD_INT 104
38782: PUSH
38783: LD_INT 105
38785: PUSH
38786: LD_INT 106
38788: PUSH
38789: LD_INT 107
38791: PUSH
38792: LD_INT 108
38794: PUSH
38795: LD_INT 109
38797: PUSH
38798: LD_INT 110
38800: PUSH
38801: LD_INT 111
38803: PUSH
38804: LD_INT 112
38806: PUSH
38807: LD_INT 113
38809: PUSH
38810: LD_INT 114
38812: PUSH
38813: LD_INT 116
38815: PUSH
38816: LD_INT 117
38818: PUSH
38819: LD_INT 118
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: ST_TO_ADDR
38845: GO 39244
38847: LD_INT 18
38849: DOUBLE
38850: EQUAL
38851: IFTRUE 38855
38853: GO 39003
38855: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
38856: LD_ADDR_VAR 0 2
38860: PUSH
38861: LD_INT 2
38863: PUSH
38864: LD_INT 4
38866: PUSH
38867: LD_INT 5
38869: PUSH
38870: LD_INT 7
38872: PUSH
38873: LD_INT 11
38875: PUSH
38876: LD_INT 12
38878: PUSH
38879: LD_INT 15
38881: PUSH
38882: LD_INT 16
38884: PUSH
38885: LD_INT 20
38887: PUSH
38888: LD_INT 21
38890: PUSH
38891: LD_INT 22
38893: PUSH
38894: LD_INT 23
38896: PUSH
38897: LD_INT 25
38899: PUSH
38900: LD_INT 26
38902: PUSH
38903: LD_INT 30
38905: PUSH
38906: LD_INT 31
38908: PUSH
38909: LD_INT 32
38911: PUSH
38912: LD_INT 33
38914: PUSH
38915: LD_INT 34
38917: PUSH
38918: LD_INT 35
38920: PUSH
38921: LD_INT 36
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 101
38949: PUSH
38950: LD_INT 102
38952: PUSH
38953: LD_INT 103
38955: PUSH
38956: LD_INT 106
38958: PUSH
38959: LD_INT 108
38961: PUSH
38962: LD_INT 112
38964: PUSH
38965: LD_INT 113
38967: PUSH
38968: LD_INT 114
38970: PUSH
38971: LD_INT 115
38973: PUSH
38974: LD_INT 116
38976: PUSH
38977: LD_INT 117
38979: PUSH
38980: LD_INT 118
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: ST_TO_ADDR
39001: GO 39244
39003: LD_INT 19
39005: DOUBLE
39006: EQUAL
39007: IFTRUE 39011
39009: GO 39243
39011: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
39012: LD_ADDR_VAR 0 2
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: LD_INT 2
39022: PUSH
39023: LD_INT 3
39025: PUSH
39026: LD_INT 4
39028: PUSH
39029: LD_INT 5
39031: PUSH
39032: LD_INT 6
39034: PUSH
39035: LD_INT 7
39037: PUSH
39038: LD_INT 8
39040: PUSH
39041: LD_INT 9
39043: PUSH
39044: LD_INT 10
39046: PUSH
39047: LD_INT 11
39049: PUSH
39050: LD_INT 12
39052: PUSH
39053: LD_INT 13
39055: PUSH
39056: LD_INT 14
39058: PUSH
39059: LD_INT 15
39061: PUSH
39062: LD_INT 16
39064: PUSH
39065: LD_INT 17
39067: PUSH
39068: LD_INT 18
39070: PUSH
39071: LD_INT 19
39073: PUSH
39074: LD_INT 20
39076: PUSH
39077: LD_INT 21
39079: PUSH
39080: LD_INT 22
39082: PUSH
39083: LD_INT 23
39085: PUSH
39086: LD_INT 24
39088: PUSH
39089: LD_INT 25
39091: PUSH
39092: LD_INT 26
39094: PUSH
39095: LD_INT 27
39097: PUSH
39098: LD_INT 28
39100: PUSH
39101: LD_INT 29
39103: PUSH
39104: LD_INT 30
39106: PUSH
39107: LD_INT 31
39109: PUSH
39110: LD_INT 32
39112: PUSH
39113: LD_INT 33
39115: PUSH
39116: LD_INT 34
39118: PUSH
39119: LD_INT 35
39121: PUSH
39122: LD_INT 36
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 101
39165: PUSH
39166: LD_INT 102
39168: PUSH
39169: LD_INT 103
39171: PUSH
39172: LD_INT 104
39174: PUSH
39175: LD_INT 105
39177: PUSH
39178: LD_INT 106
39180: PUSH
39181: LD_INT 107
39183: PUSH
39184: LD_INT 108
39186: PUSH
39187: LD_INT 109
39189: PUSH
39190: LD_INT 110
39192: PUSH
39193: LD_INT 111
39195: PUSH
39196: LD_INT 112
39198: PUSH
39199: LD_INT 113
39201: PUSH
39202: LD_INT 114
39204: PUSH
39205: LD_INT 115
39207: PUSH
39208: LD_INT 116
39210: PUSH
39211: LD_INT 117
39213: PUSH
39214: LD_INT 118
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: ST_TO_ADDR
39241: GO 39244
39243: POP
// end else
39244: GO 39475
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
39246: LD_ADDR_VAR 0 2
39250: PUSH
39251: LD_INT 1
39253: PUSH
39254: LD_INT 2
39256: PUSH
39257: LD_INT 3
39259: PUSH
39260: LD_INT 4
39262: PUSH
39263: LD_INT 5
39265: PUSH
39266: LD_INT 6
39268: PUSH
39269: LD_INT 7
39271: PUSH
39272: LD_INT 8
39274: PUSH
39275: LD_INT 9
39277: PUSH
39278: LD_INT 10
39280: PUSH
39281: LD_INT 11
39283: PUSH
39284: LD_INT 12
39286: PUSH
39287: LD_INT 13
39289: PUSH
39290: LD_INT 14
39292: PUSH
39293: LD_INT 15
39295: PUSH
39296: LD_INT 16
39298: PUSH
39299: LD_INT 17
39301: PUSH
39302: LD_INT 18
39304: PUSH
39305: LD_INT 19
39307: PUSH
39308: LD_INT 20
39310: PUSH
39311: LD_INT 21
39313: PUSH
39314: LD_INT 22
39316: PUSH
39317: LD_INT 23
39319: PUSH
39320: LD_INT 24
39322: PUSH
39323: LD_INT 25
39325: PUSH
39326: LD_INT 26
39328: PUSH
39329: LD_INT 27
39331: PUSH
39332: LD_INT 28
39334: PUSH
39335: LD_INT 29
39337: PUSH
39338: LD_INT 30
39340: PUSH
39341: LD_INT 31
39343: PUSH
39344: LD_INT 32
39346: PUSH
39347: LD_INT 33
39349: PUSH
39350: LD_INT 34
39352: PUSH
39353: LD_INT 35
39355: PUSH
39356: LD_INT 36
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 101
39399: PUSH
39400: LD_INT 102
39402: PUSH
39403: LD_INT 103
39405: PUSH
39406: LD_INT 104
39408: PUSH
39409: LD_INT 105
39411: PUSH
39412: LD_INT 106
39414: PUSH
39415: LD_INT 107
39417: PUSH
39418: LD_INT 108
39420: PUSH
39421: LD_INT 109
39423: PUSH
39424: LD_INT 110
39426: PUSH
39427: LD_INT 111
39429: PUSH
39430: LD_INT 112
39432: PUSH
39433: LD_INT 113
39435: PUSH
39436: LD_INT 114
39438: PUSH
39439: LD_INT 115
39441: PUSH
39442: LD_INT 116
39444: PUSH
39445: LD_INT 117
39447: PUSH
39448: LD_INT 118
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: ST_TO_ADDR
// if result then
39475: LD_VAR 0 2
39479: IFFALSE 40265
// begin normal :=  ;
39481: LD_ADDR_VAR 0 5
39485: PUSH
39486: LD_STRING 
39488: ST_TO_ADDR
// hardcore :=  ;
39489: LD_ADDR_VAR 0 6
39493: PUSH
39494: LD_STRING 
39496: ST_TO_ADDR
// active :=  ;
39497: LD_ADDR_VAR 0 7
39501: PUSH
39502: LD_STRING 
39504: ST_TO_ADDR
// for i = 1 to normalCounter do
39505: LD_ADDR_VAR 0 8
39509: PUSH
39510: DOUBLE
39511: LD_INT 1
39513: DEC
39514: ST_TO_ADDR
39515: LD_EXP 88
39519: PUSH
39520: FOR_TO
39521: IFFALSE 39622
// begin tmp := 0 ;
39523: LD_ADDR_VAR 0 3
39527: PUSH
39528: LD_STRING 0
39530: ST_TO_ADDR
// if result [ 1 ] then
39531: LD_VAR 0 2
39535: PUSH
39536: LD_INT 1
39538: ARRAY
39539: IFFALSE 39604
// if result [ 1 ] [ 1 ] = i then
39541: LD_VAR 0 2
39545: PUSH
39546: LD_INT 1
39548: ARRAY
39549: PUSH
39550: LD_INT 1
39552: ARRAY
39553: PUSH
39554: LD_VAR 0 8
39558: EQUAL
39559: IFFALSE 39604
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
39561: LD_ADDR_VAR 0 2
39565: PUSH
39566: LD_VAR 0 2
39570: PPUSH
39571: LD_INT 1
39573: PPUSH
39574: LD_VAR 0 2
39578: PUSH
39579: LD_INT 1
39581: ARRAY
39582: PPUSH
39583: LD_INT 1
39585: PPUSH
39586: CALL_OW 3
39590: PPUSH
39591: CALL_OW 1
39595: ST_TO_ADDR
// tmp := 1 ;
39596: LD_ADDR_VAR 0 3
39600: PUSH
39601: LD_STRING 1
39603: ST_TO_ADDR
// end ; normal := normal & tmp ;
39604: LD_ADDR_VAR 0 5
39608: PUSH
39609: LD_VAR 0 5
39613: PUSH
39614: LD_VAR 0 3
39618: STR
39619: ST_TO_ADDR
// end ;
39620: GO 39520
39622: POP
39623: POP
// for i = 1 to hardcoreCounter do
39624: LD_ADDR_VAR 0 8
39628: PUSH
39629: DOUBLE
39630: LD_INT 1
39632: DEC
39633: ST_TO_ADDR
39634: LD_EXP 89
39638: PUSH
39639: FOR_TO
39640: IFFALSE 39745
// begin tmp := 0 ;
39642: LD_ADDR_VAR 0 3
39646: PUSH
39647: LD_STRING 0
39649: ST_TO_ADDR
// if result [ 2 ] then
39650: LD_VAR 0 2
39654: PUSH
39655: LD_INT 2
39657: ARRAY
39658: IFFALSE 39727
// if result [ 2 ] [ 1 ] = 100 + i then
39660: LD_VAR 0 2
39664: PUSH
39665: LD_INT 2
39667: ARRAY
39668: PUSH
39669: LD_INT 1
39671: ARRAY
39672: PUSH
39673: LD_INT 100
39675: PUSH
39676: LD_VAR 0 8
39680: PLUS
39681: EQUAL
39682: IFFALSE 39727
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
39684: LD_ADDR_VAR 0 2
39688: PUSH
39689: LD_VAR 0 2
39693: PPUSH
39694: LD_INT 2
39696: PPUSH
39697: LD_VAR 0 2
39701: PUSH
39702: LD_INT 2
39704: ARRAY
39705: PPUSH
39706: LD_INT 1
39708: PPUSH
39709: CALL_OW 3
39713: PPUSH
39714: CALL_OW 1
39718: ST_TO_ADDR
// tmp := 1 ;
39719: LD_ADDR_VAR 0 3
39723: PUSH
39724: LD_STRING 1
39726: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
39727: LD_ADDR_VAR 0 6
39731: PUSH
39732: LD_VAR 0 6
39736: PUSH
39737: LD_VAR 0 3
39741: STR
39742: ST_TO_ADDR
// end ;
39743: GO 39639
39745: POP
39746: POP
// if isGameLoad then
39747: LD_VAR 0 1
39751: IFFALSE 40226
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
39753: LD_ADDR_VAR 0 4
39757: PUSH
39758: LD_EXP 92
39762: PUSH
39763: LD_EXP 91
39767: PUSH
39768: LD_EXP 93
39772: PUSH
39773: LD_EXP 90
39777: PUSH
39778: LD_EXP 94
39782: PUSH
39783: LD_EXP 95
39787: PUSH
39788: LD_EXP 96
39792: PUSH
39793: LD_EXP 97
39797: PUSH
39798: LD_EXP 98
39802: PUSH
39803: LD_EXP 99
39807: PUSH
39808: LD_EXP 100
39812: PUSH
39813: LD_EXP 101
39817: PUSH
39818: LD_EXP 102
39822: PUSH
39823: LD_EXP 103
39827: PUSH
39828: LD_EXP 111
39832: PUSH
39833: LD_EXP 112
39837: PUSH
39838: LD_EXP 113
39842: PUSH
39843: LD_EXP 114
39847: PUSH
39848: LD_EXP 116
39852: PUSH
39853: LD_EXP 117
39857: PUSH
39858: LD_EXP 118
39862: PUSH
39863: LD_EXP 121
39867: PUSH
39868: LD_EXP 123
39872: PUSH
39873: LD_EXP 124
39877: PUSH
39878: LD_EXP 125
39882: PUSH
39883: LD_EXP 127
39887: PUSH
39888: LD_EXP 128
39892: PUSH
39893: LD_EXP 131
39897: PUSH
39898: LD_EXP 132
39902: PUSH
39903: LD_EXP 133
39907: PUSH
39908: LD_EXP 134
39912: PUSH
39913: LD_EXP 135
39917: PUSH
39918: LD_EXP 136
39922: PUSH
39923: LD_EXP 137
39927: PUSH
39928: LD_EXP 138
39932: PUSH
39933: LD_EXP 139
39937: PUSH
39938: LD_EXP 104
39942: PUSH
39943: LD_EXP 105
39947: PUSH
39948: LD_EXP 108
39952: PUSH
39953: LD_EXP 109
39957: PUSH
39958: LD_EXP 110
39962: PUSH
39963: LD_EXP 106
39967: PUSH
39968: LD_EXP 107
39972: PUSH
39973: LD_EXP 115
39977: PUSH
39978: LD_EXP 119
39982: PUSH
39983: LD_EXP 120
39987: PUSH
39988: LD_EXP 122
39992: PUSH
39993: LD_EXP 126
39997: PUSH
39998: LD_EXP 129
40002: PUSH
40003: LD_EXP 130
40007: PUSH
40008: LD_EXP 140
40012: PUSH
40013: LD_EXP 141
40017: PUSH
40018: LD_EXP 142
40022: PUSH
40023: LD_EXP 143
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: ST_TO_ADDR
// tmp :=  ;
40084: LD_ADDR_VAR 0 3
40088: PUSH
40089: LD_STRING 
40091: ST_TO_ADDR
// for i = 1 to normalCounter do
40092: LD_ADDR_VAR 0 8
40096: PUSH
40097: DOUBLE
40098: LD_INT 1
40100: DEC
40101: ST_TO_ADDR
40102: LD_EXP 88
40106: PUSH
40107: FOR_TO
40108: IFFALSE 40144
// begin if flags [ i ] then
40110: LD_VAR 0 4
40114: PUSH
40115: LD_VAR 0 8
40119: ARRAY
40120: IFFALSE 40142
// tmp := tmp & i & ; ;
40122: LD_ADDR_VAR 0 3
40126: PUSH
40127: LD_VAR 0 3
40131: PUSH
40132: LD_VAR 0 8
40136: STR
40137: PUSH
40138: LD_STRING ;
40140: STR
40141: ST_TO_ADDR
// end ;
40142: GO 40107
40144: POP
40145: POP
// for i = 1 to hardcoreCounter do
40146: LD_ADDR_VAR 0 8
40150: PUSH
40151: DOUBLE
40152: LD_INT 1
40154: DEC
40155: ST_TO_ADDR
40156: LD_EXP 89
40160: PUSH
40161: FOR_TO
40162: IFFALSE 40208
// begin if flags [ normalCounter + i ] then
40164: LD_VAR 0 4
40168: PUSH
40169: LD_EXP 88
40173: PUSH
40174: LD_VAR 0 8
40178: PLUS
40179: ARRAY
40180: IFFALSE 40206
// tmp := tmp & ( 100 + i ) & ; ;
40182: LD_ADDR_VAR 0 3
40186: PUSH
40187: LD_VAR 0 3
40191: PUSH
40192: LD_INT 100
40194: PUSH
40195: LD_VAR 0 8
40199: PLUS
40200: STR
40201: PUSH
40202: LD_STRING ;
40204: STR
40205: ST_TO_ADDR
// end ;
40206: GO 40161
40208: POP
40209: POP
// if tmp then
40210: LD_VAR 0 3
40214: IFFALSE 40226
// active := tmp ;
40216: LD_ADDR_VAR 0 7
40220: PUSH
40221: LD_VAR 0 3
40225: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
40226: LD_STRING getStreamItemsFromMission("
40228: PUSH
40229: LD_VAR 0 5
40233: STR
40234: PUSH
40235: LD_STRING ","
40237: STR
40238: PUSH
40239: LD_VAR 0 6
40243: STR
40244: PUSH
40245: LD_STRING ","
40247: STR
40248: PUSH
40249: LD_VAR 0 7
40253: STR
40254: PUSH
40255: LD_STRING ")
40257: STR
40258: PPUSH
40259: CALL_OW 559
// end else
40263: GO 40272
// ToLua ( getStreamItemsFromMission("","","") ) ;
40265: LD_STRING getStreamItemsFromMission("","","")
40267: PPUSH
40268: CALL_OW 559
// end ;
40272: LD_VAR 0 2
40276: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
40277: LD_EXP 87
40281: IFFALSE 40289
40283: PUSH
40284: LD_EXP 92
40288: AND
40289: IFFALSE 40413
40291: GO 40293
40293: DISABLE
40294: LD_INT 0
40296: PPUSH
40297: PPUSH
// begin enable ;
40298: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
40299: LD_ADDR_VAR 0 2
40303: PUSH
40304: LD_INT 22
40306: PUSH
40307: LD_OWVAR 2
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: LD_INT 34
40321: PUSH
40322: LD_INT 7
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 34
40331: PUSH
40332: LD_INT 45
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 34
40341: PUSH
40342: LD_INT 28
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 34
40351: PUSH
40352: LD_INT 47
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PPUSH
40370: CALL_OW 69
40374: ST_TO_ADDR
// if not tmp then
40375: LD_VAR 0 2
40379: NOT
40380: IFFALSE 40384
// exit ;
40382: GO 40413
// for i in tmp do
40384: LD_ADDR_VAR 0 1
40388: PUSH
40389: LD_VAR 0 2
40393: PUSH
40394: FOR_IN
40395: IFFALSE 40411
// begin SetLives ( i , 0 ) ;
40397: LD_VAR 0 1
40401: PPUSH
40402: LD_INT 0
40404: PPUSH
40405: CALL_OW 234
// end ;
40409: GO 40394
40411: POP
40412: POP
// end ;
40413: PPOPN 2
40415: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
40416: LD_EXP 87
40420: IFFALSE 40428
40422: PUSH
40423: LD_EXP 93
40427: AND
40428: IFFALSE 40512
40430: GO 40432
40432: DISABLE
40433: LD_INT 0
40435: PPUSH
40436: PPUSH
// begin enable ;
40437: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
40438: LD_ADDR_VAR 0 2
40442: PUSH
40443: LD_INT 22
40445: PUSH
40446: LD_OWVAR 2
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 32
40457: PUSH
40458: LD_INT 3
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PPUSH
40469: CALL_OW 69
40473: ST_TO_ADDR
// if not tmp then
40474: LD_VAR 0 2
40478: NOT
40479: IFFALSE 40483
// exit ;
40481: GO 40512
// for i in tmp do
40483: LD_ADDR_VAR 0 1
40487: PUSH
40488: LD_VAR 0 2
40492: PUSH
40493: FOR_IN
40494: IFFALSE 40510
// begin SetLives ( i , 0 ) ;
40496: LD_VAR 0 1
40500: PPUSH
40501: LD_INT 0
40503: PPUSH
40504: CALL_OW 234
// end ;
40508: GO 40493
40510: POP
40511: POP
// end ;
40512: PPOPN 2
40514: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
40515: LD_EXP 87
40519: IFFALSE 40527
40521: PUSH
40522: LD_EXP 90
40526: AND
40527: IFFALSE 40620
40529: GO 40531
40531: DISABLE
40532: LD_INT 0
40534: PPUSH
// begin enable ;
40535: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
40536: LD_ADDR_VAR 0 1
40540: PUSH
40541: LD_INT 22
40543: PUSH
40544: LD_OWVAR 2
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 2
40555: PUSH
40556: LD_INT 25
40558: PUSH
40559: LD_INT 5
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 25
40568: PUSH
40569: LD_INT 9
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 25
40578: PUSH
40579: LD_INT 8
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PPUSH
40596: CALL_OW 69
40600: PUSH
40601: FOR_IN
40602: IFFALSE 40618
// begin SetClass ( i , 1 ) ;
40604: LD_VAR 0 1
40608: PPUSH
40609: LD_INT 1
40611: PPUSH
40612: CALL_OW 336
// end ;
40616: GO 40601
40618: POP
40619: POP
// end ;
40620: PPOPN 1
40622: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
40623: LD_EXP 87
40627: IFFALSE 40635
40629: PUSH
40630: LD_EXP 91
40634: AND
40635: IFFALSE 40647
40637: PUSH
40638: LD_OWVAR 65
40642: PUSH
40643: LD_INT 7
40645: LESS
40646: AND
40647: IFFALSE 40661
40649: GO 40651
40651: DISABLE
// begin enable ;
40652: ENABLE
// game_speed := 7 ;
40653: LD_ADDR_OWVAR 65
40657: PUSH
40658: LD_INT 7
40660: ST_TO_ADDR
// end ;
40661: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
40662: LD_EXP 87
40666: IFFALSE 40674
40668: PUSH
40669: LD_EXP 94
40673: AND
40674: IFFALSE 40876
40676: GO 40678
40678: DISABLE
40679: LD_INT 0
40681: PPUSH
40682: PPUSH
40683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
40684: LD_ADDR_VAR 0 3
40688: PUSH
40689: LD_INT 81
40691: PUSH
40692: LD_OWVAR 2
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 21
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PPUSH
40715: CALL_OW 69
40719: ST_TO_ADDR
// if not tmp then
40720: LD_VAR 0 3
40724: NOT
40725: IFFALSE 40729
// exit ;
40727: GO 40876
// if tmp > 5 then
40729: LD_VAR 0 3
40733: PUSH
40734: LD_INT 5
40736: GREATER
40737: IFFALSE 40749
// k := 5 else
40739: LD_ADDR_VAR 0 2
40743: PUSH
40744: LD_INT 5
40746: ST_TO_ADDR
40747: GO 40759
// k := tmp ;
40749: LD_ADDR_VAR 0 2
40753: PUSH
40754: LD_VAR 0 3
40758: ST_TO_ADDR
// for i := 1 to k do
40759: LD_ADDR_VAR 0 1
40763: PUSH
40764: DOUBLE
40765: LD_INT 1
40767: DEC
40768: ST_TO_ADDR
40769: LD_VAR 0 2
40773: PUSH
40774: FOR_TO
40775: IFFALSE 40874
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
40777: LD_VAR 0 3
40781: PUSH
40782: LD_VAR 0 1
40786: ARRAY
40787: PPUSH
40788: LD_VAR 0 1
40792: PUSH
40793: LD_INT 4
40795: MOD
40796: PUSH
40797: LD_INT 1
40799: PLUS
40800: PPUSH
40801: CALL_OW 259
40805: PUSH
40806: LD_INT 10
40808: LESS
40809: IFFALSE 40872
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
40811: LD_VAR 0 3
40815: PUSH
40816: LD_VAR 0 1
40820: ARRAY
40821: PPUSH
40822: LD_VAR 0 1
40826: PUSH
40827: LD_INT 4
40829: MOD
40830: PUSH
40831: LD_INT 1
40833: PLUS
40834: PPUSH
40835: LD_VAR 0 3
40839: PUSH
40840: LD_VAR 0 1
40844: ARRAY
40845: PPUSH
40846: LD_VAR 0 1
40850: PUSH
40851: LD_INT 4
40853: MOD
40854: PUSH
40855: LD_INT 1
40857: PLUS
40858: PPUSH
40859: CALL_OW 259
40863: PUSH
40864: LD_INT 1
40866: PLUS
40867: PPUSH
40868: CALL_OW 237
40872: GO 40774
40874: POP
40875: POP
// end ;
40876: PPOPN 3
40878: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
40879: LD_EXP 87
40883: IFFALSE 40891
40885: PUSH
40886: LD_EXP 95
40890: AND
40891: IFFALSE 40911
40893: GO 40895
40895: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
40896: LD_INT 4
40898: PPUSH
40899: LD_OWVAR 2
40903: PPUSH
40904: LD_INT 0
40906: PPUSH
40907: CALL_OW 324
40911: END
// every 0 0$1 trigger StreamModeActive and sShovel do
40912: LD_EXP 87
40916: IFFALSE 40924
40918: PUSH
40919: LD_EXP 124
40923: AND
40924: IFFALSE 40944
40926: GO 40928
40928: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
40929: LD_INT 19
40931: PPUSH
40932: LD_OWVAR 2
40936: PPUSH
40937: LD_INT 0
40939: PPUSH
40940: CALL_OW 324
40944: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
40945: LD_EXP 87
40949: IFFALSE 40957
40951: PUSH
40952: LD_EXP 96
40956: AND
40957: IFFALSE 41059
40959: GO 40961
40961: DISABLE
40962: LD_INT 0
40964: PPUSH
40965: PPUSH
// begin enable ;
40966: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
40967: LD_ADDR_VAR 0 2
40971: PUSH
40972: LD_INT 22
40974: PUSH
40975: LD_OWVAR 2
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 2
40986: PUSH
40987: LD_INT 34
40989: PUSH
40990: LD_INT 11
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 34
40999: PUSH
41000: LD_INT 30
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: LIST
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PPUSH
41016: CALL_OW 69
41020: ST_TO_ADDR
// if not tmp then
41021: LD_VAR 0 2
41025: NOT
41026: IFFALSE 41030
// exit ;
41028: GO 41059
// for i in tmp do
41030: LD_ADDR_VAR 0 1
41034: PUSH
41035: LD_VAR 0 2
41039: PUSH
41040: FOR_IN
41041: IFFALSE 41057
// begin SetLives ( i , 0 ) ;
41043: LD_VAR 0 1
41047: PPUSH
41048: LD_INT 0
41050: PPUSH
41051: CALL_OW 234
// end ;
41055: GO 41040
41057: POP
41058: POP
// end ;
41059: PPOPN 2
41061: END
// every 0 0$1 trigger StreamModeActive and sBunker do
41062: LD_EXP 87
41066: IFFALSE 41074
41068: PUSH
41069: LD_EXP 97
41073: AND
41074: IFFALSE 41094
41076: GO 41078
41078: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
41079: LD_INT 32
41081: PPUSH
41082: LD_OWVAR 2
41086: PPUSH
41087: LD_INT 0
41089: PPUSH
41090: CALL_OW 324
41094: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
41095: LD_EXP 87
41099: IFFALSE 41107
41101: PUSH
41102: LD_EXP 98
41106: AND
41107: IFFALSE 41290
41109: GO 41111
41111: DISABLE
41112: LD_INT 0
41114: PPUSH
41115: PPUSH
41116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
41117: LD_ADDR_VAR 0 2
41121: PUSH
41122: LD_INT 22
41124: PUSH
41125: LD_OWVAR 2
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 33
41136: PUSH
41137: LD_INT 3
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PPUSH
41148: CALL_OW 69
41152: ST_TO_ADDR
// if not tmp then
41153: LD_VAR 0 2
41157: NOT
41158: IFFALSE 41162
// exit ;
41160: GO 41290
// side := 0 ;
41162: LD_ADDR_VAR 0 3
41166: PUSH
41167: LD_INT 0
41169: ST_TO_ADDR
// for i := 1 to 8 do
41170: LD_ADDR_VAR 0 1
41174: PUSH
41175: DOUBLE
41176: LD_INT 1
41178: DEC
41179: ST_TO_ADDR
41180: LD_INT 8
41182: PUSH
41183: FOR_TO
41184: IFFALSE 41234
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
41186: LD_OWVAR 2
41190: PUSH
41191: LD_VAR 0 1
41195: NONEQUAL
41196: IFFALSE 41218
41198: PUSH
41199: LD_OWVAR 2
41203: PPUSH
41204: LD_VAR 0 1
41208: PPUSH
41209: CALL_OW 81
41213: PUSH
41214: LD_INT 2
41216: EQUAL
41217: AND
41218: IFFALSE 41232
// begin side := i ;
41220: LD_ADDR_VAR 0 3
41224: PUSH
41225: LD_VAR 0 1
41229: ST_TO_ADDR
// break ;
41230: GO 41234
// end ;
41232: GO 41183
41234: POP
41235: POP
// if not side then
41236: LD_VAR 0 3
41240: NOT
41241: IFFALSE 41245
// exit ;
41243: GO 41290
// for i := 1 to tmp do
41245: LD_ADDR_VAR 0 1
41249: PUSH
41250: DOUBLE
41251: LD_INT 1
41253: DEC
41254: ST_TO_ADDR
41255: LD_VAR 0 2
41259: PUSH
41260: FOR_TO
41261: IFFALSE 41288
// if Prob ( 60 ) then
41263: LD_INT 60
41265: PPUSH
41266: CALL_OW 13
41270: IFFALSE 41286
// SetSide ( i , side ) ;
41272: LD_VAR 0 1
41276: PPUSH
41277: LD_VAR 0 3
41281: PPUSH
41282: CALL_OW 235
41286: GO 41260
41288: POP
41289: POP
// end ;
41290: PPOPN 3
41292: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
41293: LD_EXP 87
41297: IFFALSE 41305
41299: PUSH
41300: LD_EXP 100
41304: AND
41305: IFFALSE 41424
41307: GO 41309
41309: DISABLE
41310: LD_INT 0
41312: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
41313: LD_ADDR_VAR 0 1
41317: PUSH
41318: LD_INT 22
41320: PUSH
41321: LD_OWVAR 2
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 21
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 3
41342: PUSH
41343: LD_INT 23
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: LIST
41361: PPUSH
41362: CALL_OW 69
41366: PUSH
41367: FOR_IN
41368: IFFALSE 41422
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
41370: LD_VAR 0 1
41374: PPUSH
41375: CALL_OW 257
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: LD_INT 2
41385: PUSH
41386: LD_INT 3
41388: PUSH
41389: LD_INT 4
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: IN
41398: IFFALSE 41420
// SetClass ( un , rand ( 1 , 4 ) ) ;
41400: LD_VAR 0 1
41404: PPUSH
41405: LD_INT 1
41407: PPUSH
41408: LD_INT 4
41410: PPUSH
41411: CALL_OW 12
41415: PPUSH
41416: CALL_OW 336
41420: GO 41367
41422: POP
41423: POP
// end ;
41424: PPOPN 1
41426: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
41427: LD_EXP 87
41431: IFFALSE 41439
41433: PUSH
41434: LD_EXP 99
41438: AND
41439: IFFALSE 41518
41441: GO 41443
41443: DISABLE
41444: LD_INT 0
41446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41447: LD_ADDR_VAR 0 1
41451: PUSH
41452: LD_INT 22
41454: PUSH
41455: LD_OWVAR 2
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 21
41466: PUSH
41467: LD_INT 3
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PPUSH
41478: CALL_OW 69
41482: ST_TO_ADDR
// if not tmp then
41483: LD_VAR 0 1
41487: NOT
41488: IFFALSE 41492
// exit ;
41490: GO 41518
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
41492: LD_VAR 0 1
41496: PUSH
41497: LD_INT 1
41499: PPUSH
41500: LD_VAR 0 1
41504: PPUSH
41505: CALL_OW 12
41509: ARRAY
41510: PPUSH
41511: LD_INT 100
41513: PPUSH
41514: CALL_OW 234
// end ;
41518: PPOPN 1
41520: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
41521: LD_EXP 87
41525: IFFALSE 41533
41527: PUSH
41528: LD_EXP 101
41532: AND
41533: IFFALSE 41631
41535: GO 41537
41537: DISABLE
41538: LD_INT 0
41540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
41541: LD_ADDR_VAR 0 1
41545: PUSH
41546: LD_INT 22
41548: PUSH
41549: LD_OWVAR 2
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 21
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PPUSH
41572: CALL_OW 69
41576: ST_TO_ADDR
// if not tmp then
41577: LD_VAR 0 1
41581: NOT
41582: IFFALSE 41586
// exit ;
41584: GO 41631
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
41586: LD_VAR 0 1
41590: PUSH
41591: LD_INT 1
41593: PPUSH
41594: LD_VAR 0 1
41598: PPUSH
41599: CALL_OW 12
41603: ARRAY
41604: PPUSH
41605: LD_INT 1
41607: PPUSH
41608: LD_INT 4
41610: PPUSH
41611: CALL_OW 12
41615: PPUSH
41616: LD_INT 3000
41618: PPUSH
41619: LD_INT 9000
41621: PPUSH
41622: CALL_OW 12
41626: PPUSH
41627: CALL_OW 492
// end ;
41631: PPOPN 1
41633: END
// every 0 0$1 trigger StreamModeActive and sDepot do
41634: LD_EXP 87
41638: IFFALSE 41646
41640: PUSH
41641: LD_EXP 102
41645: AND
41646: IFFALSE 41666
41648: GO 41650
41650: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
41651: LD_INT 1
41653: PPUSH
41654: LD_OWVAR 2
41658: PPUSH
41659: LD_INT 0
41661: PPUSH
41662: CALL_OW 324
41666: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
41667: LD_EXP 87
41671: IFFALSE 41679
41673: PUSH
41674: LD_EXP 103
41678: AND
41679: IFFALSE 41762
41681: GO 41683
41683: DISABLE
41684: LD_INT 0
41686: PPUSH
41687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41688: LD_ADDR_VAR 0 2
41692: PUSH
41693: LD_INT 22
41695: PUSH
41696: LD_OWVAR 2
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 21
41707: PUSH
41708: LD_INT 3
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PPUSH
41719: CALL_OW 69
41723: ST_TO_ADDR
// if not tmp then
41724: LD_VAR 0 2
41728: NOT
41729: IFFALSE 41733
// exit ;
41731: GO 41762
// for i in tmp do
41733: LD_ADDR_VAR 0 1
41737: PUSH
41738: LD_VAR 0 2
41742: PUSH
41743: FOR_IN
41744: IFFALSE 41760
// SetBLevel ( i , 10 ) ;
41746: LD_VAR 0 1
41750: PPUSH
41751: LD_INT 10
41753: PPUSH
41754: CALL_OW 241
41758: GO 41743
41760: POP
41761: POP
// end ;
41762: PPOPN 2
41764: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
41765: LD_EXP 87
41769: IFFALSE 41777
41771: PUSH
41772: LD_EXP 104
41776: AND
41777: IFFALSE 41888
41779: GO 41781
41781: DISABLE
41782: LD_INT 0
41784: PPUSH
41785: PPUSH
41786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41787: LD_ADDR_VAR 0 3
41791: PUSH
41792: LD_INT 22
41794: PUSH
41795: LD_OWVAR 2
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 25
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PPUSH
41818: CALL_OW 69
41822: ST_TO_ADDR
// if not tmp then
41823: LD_VAR 0 3
41827: NOT
41828: IFFALSE 41832
// exit ;
41830: GO 41888
// un := tmp [ rand ( 1 , tmp ) ] ;
41832: LD_ADDR_VAR 0 2
41836: PUSH
41837: LD_VAR 0 3
41841: PUSH
41842: LD_INT 1
41844: PPUSH
41845: LD_VAR 0 3
41849: PPUSH
41850: CALL_OW 12
41854: ARRAY
41855: ST_TO_ADDR
// if Crawls ( un ) then
41856: LD_VAR 0 2
41860: PPUSH
41861: CALL_OW 318
41865: IFFALSE 41876
// ComWalk ( un ) ;
41867: LD_VAR 0 2
41871: PPUSH
41872: CALL_OW 138
// SetClass ( un , class_sniper ) ;
41876: LD_VAR 0 2
41880: PPUSH
41881: LD_INT 5
41883: PPUSH
41884: CALL_OW 336
// end ;
41888: PPOPN 3
41890: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
41891: LD_EXP 87
41895: IFFALSE 41903
41897: PUSH
41898: LD_EXP 105
41902: AND
41903: IFFALSE 41915
41905: PUSH
41906: LD_OWVAR 67
41910: PUSH
41911: LD_INT 4
41913: LESS
41914: AND
41915: IFFALSE 41934
41917: GO 41919
41919: DISABLE
// begin Difficulty := Difficulty + 1 ;
41920: LD_ADDR_OWVAR 67
41924: PUSH
41925: LD_OWVAR 67
41929: PUSH
41930: LD_INT 1
41932: PLUS
41933: ST_TO_ADDR
// end ;
41934: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
41935: LD_EXP 87
41939: IFFALSE 41947
41941: PUSH
41942: LD_EXP 106
41946: AND
41947: IFFALSE 42050
41949: GO 41951
41951: DISABLE
41952: LD_INT 0
41954: PPUSH
// begin for i := 1 to 5 do
41955: LD_ADDR_VAR 0 1
41959: PUSH
41960: DOUBLE
41961: LD_INT 1
41963: DEC
41964: ST_TO_ADDR
41965: LD_INT 5
41967: PUSH
41968: FOR_TO
41969: IFFALSE 42048
// begin uc_nation := nation_nature ;
41971: LD_ADDR_OWVAR 21
41975: PUSH
41976: LD_INT 0
41978: ST_TO_ADDR
// uc_side := 0 ;
41979: LD_ADDR_OWVAR 20
41983: PUSH
41984: LD_INT 0
41986: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
41987: LD_ADDR_OWVAR 29
41991: PUSH
41992: LD_INT 12
41994: PUSH
41995: LD_INT 12
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: ST_TO_ADDR
// hc_agressivity := 20 ;
42002: LD_ADDR_OWVAR 35
42006: PUSH
42007: LD_INT 20
42009: ST_TO_ADDR
// hc_class := class_tiger ;
42010: LD_ADDR_OWVAR 28
42014: PUSH
42015: LD_INT 14
42017: ST_TO_ADDR
// hc_gallery :=  ;
42018: LD_ADDR_OWVAR 33
42022: PUSH
42023: LD_STRING 
42025: ST_TO_ADDR
// hc_name :=  ;
42026: LD_ADDR_OWVAR 26
42030: PUSH
42031: LD_STRING 
42033: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
42034: CALL_OW 44
42038: PPUSH
42039: LD_INT 0
42041: PPUSH
42042: CALL_OW 51
// end ;
42046: GO 41968
42048: POP
42049: POP
// end ;
42050: PPOPN 1
42052: END
// every 0 0$1 trigger StreamModeActive and sBomb do
42053: LD_EXP 87
42057: IFFALSE 42065
42059: PUSH
42060: LD_EXP 107
42064: AND
42065: IFFALSE 42074
42067: GO 42069
42069: DISABLE
// StreamSibBomb ;
42070: CALL 42075 0 0
42074: END
// export function StreamSibBomb ; var i , x , y ; begin
42075: LD_INT 0
42077: PPUSH
42078: PPUSH
42079: PPUSH
42080: PPUSH
// result := false ;
42081: LD_ADDR_VAR 0 1
42085: PUSH
42086: LD_INT 0
42088: ST_TO_ADDR
// for i := 1 to 16 do
42089: LD_ADDR_VAR 0 2
42093: PUSH
42094: DOUBLE
42095: LD_INT 1
42097: DEC
42098: ST_TO_ADDR
42099: LD_INT 16
42101: PUSH
42102: FOR_TO
42103: IFFALSE 42302
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
42105: LD_ADDR_VAR 0 3
42109: PUSH
42110: LD_INT 10
42112: PUSH
42113: LD_INT 20
42115: PUSH
42116: LD_INT 30
42118: PUSH
42119: LD_INT 40
42121: PUSH
42122: LD_INT 50
42124: PUSH
42125: LD_INT 60
42127: PUSH
42128: LD_INT 70
42130: PUSH
42131: LD_INT 80
42133: PUSH
42134: LD_INT 90
42136: PUSH
42137: LD_INT 100
42139: PUSH
42140: LD_INT 110
42142: PUSH
42143: LD_INT 120
42145: PUSH
42146: LD_INT 130
42148: PUSH
42149: LD_INT 140
42151: PUSH
42152: LD_INT 150
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 1
42174: PPUSH
42175: LD_INT 15
42177: PPUSH
42178: CALL_OW 12
42182: ARRAY
42183: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
42184: LD_ADDR_VAR 0 4
42188: PUSH
42189: LD_INT 10
42191: PUSH
42192: LD_INT 20
42194: PUSH
42195: LD_INT 30
42197: PUSH
42198: LD_INT 40
42200: PUSH
42201: LD_INT 50
42203: PUSH
42204: LD_INT 60
42206: PUSH
42207: LD_INT 70
42209: PUSH
42210: LD_INT 80
42212: PUSH
42213: LD_INT 90
42215: PUSH
42216: LD_INT 100
42218: PUSH
42219: LD_INT 110
42221: PUSH
42222: LD_INT 120
42224: PUSH
42225: LD_INT 130
42227: PUSH
42228: LD_INT 140
42230: PUSH
42231: LD_INT 150
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 1
42253: PPUSH
42254: LD_INT 15
42256: PPUSH
42257: CALL_OW 12
42261: ARRAY
42262: ST_TO_ADDR
// if ValidHex ( x , y ) then
42263: LD_VAR 0 3
42267: PPUSH
42268: LD_VAR 0 4
42272: PPUSH
42273: CALL_OW 488
42277: IFFALSE 42300
// begin result := [ x , y ] ;
42279: LD_ADDR_VAR 0 1
42283: PUSH
42284: LD_VAR 0 3
42288: PUSH
42289: LD_VAR 0 4
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: ST_TO_ADDR
// break ;
42298: GO 42302
// end ; end ;
42300: GO 42102
42302: POP
42303: POP
// if result then
42304: LD_VAR 0 1
42308: IFFALSE 42368
// begin ToLua ( playSibBomb() ) ;
42310: LD_STRING playSibBomb()
42312: PPUSH
42313: CALL_OW 559
// wait ( 0 0$14 ) ;
42317: LD_INT 490
42319: PPUSH
42320: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
42324: LD_VAR 0 1
42328: PUSH
42329: LD_INT 1
42331: ARRAY
42332: PPUSH
42333: LD_VAR 0 1
42337: PUSH
42338: LD_INT 2
42340: ARRAY
42341: PPUSH
42342: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
42346: LD_VAR 0 1
42350: PUSH
42351: LD_INT 1
42353: ARRAY
42354: PPUSH
42355: LD_VAR 0 1
42359: PUSH
42360: LD_INT 2
42362: ARRAY
42363: PPUSH
42364: CALL_OW 429
// end ; end ;
42368: LD_VAR 0 1
42372: RET
// every 0 0$1 trigger StreamModeActive and sReset do
42373: LD_EXP 87
42377: IFFALSE 42385
42379: PUSH
42380: LD_EXP 109
42384: AND
42385: IFFALSE 42397
42387: GO 42389
42389: DISABLE
// YouLost (  ) ;
42390: LD_STRING 
42392: PPUSH
42393: CALL_OW 104
42397: END
// every 0 0$1 trigger StreamModeActive and sFog do
42398: LD_EXP 87
42402: IFFALSE 42410
42404: PUSH
42405: LD_EXP 108
42409: AND
42410: IFFALSE 42424
42412: GO 42414
42414: DISABLE
// FogOff ( your_side ) ;
42415: LD_OWVAR 2
42419: PPUSH
42420: CALL_OW 344
42424: END
// every 0 0$1 trigger StreamModeActive and sSun do
42425: LD_EXP 87
42429: IFFALSE 42437
42431: PUSH
42432: LD_EXP 110
42436: AND
42437: IFFALSE 42465
42439: GO 42441
42441: DISABLE
// begin solar_recharge_percent := 0 ;
42442: LD_ADDR_OWVAR 79
42446: PUSH
42447: LD_INT 0
42449: ST_TO_ADDR
// wait ( 5 5$00 ) ;
42450: LD_INT 10500
42452: PPUSH
42453: CALL_OW 67
// solar_recharge_percent := 100 ;
42457: LD_ADDR_OWVAR 79
42461: PUSH
42462: LD_INT 100
42464: ST_TO_ADDR
// end ;
42465: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
42466: LD_EXP 87
42470: IFFALSE 42478
42472: PUSH
42473: LD_EXP 111
42477: AND
42478: IFFALSE 42717
42480: GO 42482
42482: DISABLE
42483: LD_INT 0
42485: PPUSH
42486: PPUSH
42487: PPUSH
// begin tmp := [ ] ;
42488: LD_ADDR_VAR 0 3
42492: PUSH
42493: EMPTY
42494: ST_TO_ADDR
// for i := 1 to 6 do
42495: LD_ADDR_VAR 0 1
42499: PUSH
42500: DOUBLE
42501: LD_INT 1
42503: DEC
42504: ST_TO_ADDR
42505: LD_INT 6
42507: PUSH
42508: FOR_TO
42509: IFFALSE 42614
// begin uc_nation := nation_nature ;
42511: LD_ADDR_OWVAR 21
42515: PUSH
42516: LD_INT 0
42518: ST_TO_ADDR
// uc_side := 0 ;
42519: LD_ADDR_OWVAR 20
42523: PUSH
42524: LD_INT 0
42526: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
42527: LD_ADDR_OWVAR 29
42531: PUSH
42532: LD_INT 12
42534: PUSH
42535: LD_INT 12
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: ST_TO_ADDR
// hc_agressivity := 20 ;
42542: LD_ADDR_OWVAR 35
42546: PUSH
42547: LD_INT 20
42549: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
42550: LD_ADDR_OWVAR 28
42554: PUSH
42555: LD_INT 17
42557: ST_TO_ADDR
// hc_gallery :=  ;
42558: LD_ADDR_OWVAR 33
42562: PUSH
42563: LD_STRING 
42565: ST_TO_ADDR
// hc_name :=  ;
42566: LD_ADDR_OWVAR 26
42570: PUSH
42571: LD_STRING 
42573: ST_TO_ADDR
// un := CreateHuman ;
42574: LD_ADDR_VAR 0 2
42578: PUSH
42579: CALL_OW 44
42583: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
42584: LD_VAR 0 2
42588: PPUSH
42589: LD_INT 1
42591: PPUSH
42592: CALL_OW 51
// tmp := tmp ^ un ;
42596: LD_ADDR_VAR 0 3
42600: PUSH
42601: LD_VAR 0 3
42605: PUSH
42606: LD_VAR 0 2
42610: ADD
42611: ST_TO_ADDR
// end ;
42612: GO 42508
42614: POP
42615: POP
// repeat wait ( 0 0$1 ) ;
42616: LD_INT 35
42618: PPUSH
42619: CALL_OW 67
// for un in tmp do
42623: LD_ADDR_VAR 0 2
42627: PUSH
42628: LD_VAR 0 3
42632: PUSH
42633: FOR_IN
42634: IFFALSE 42708
// begin if IsDead ( un ) then
42636: LD_VAR 0 2
42640: PPUSH
42641: CALL_OW 301
42645: IFFALSE 42665
// begin tmp := tmp diff un ;
42647: LD_ADDR_VAR 0 3
42651: PUSH
42652: LD_VAR 0 3
42656: PUSH
42657: LD_VAR 0 2
42661: DIFF
42662: ST_TO_ADDR
// continue ;
42663: GO 42633
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
42665: LD_VAR 0 2
42669: PPUSH
42670: LD_INT 3
42672: PUSH
42673: LD_INT 22
42675: PUSH
42676: LD_INT 0
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PPUSH
42687: CALL_OW 69
42691: PPUSH
42692: LD_VAR 0 2
42696: PPUSH
42697: CALL_OW 74
42701: PPUSH
42702: CALL_OW 115
// end ;
42706: GO 42633
42708: POP
42709: POP
// until not tmp ;
42710: LD_VAR 0 3
42714: NOT
42715: IFFALSE 42616
// end ;
42717: PPOPN 3
42719: END
// every 0 0$1 trigger StreamModeActive and sTroll do
42720: LD_EXP 87
42724: IFFALSE 42732
42726: PUSH
42727: LD_EXP 112
42731: AND
42732: IFFALSE 42786
42734: GO 42736
42736: DISABLE
// begin ToLua ( displayTroll(); ) ;
42737: LD_STRING displayTroll();
42739: PPUSH
42740: CALL_OW 559
// wait ( 3 3$00 ) ;
42744: LD_INT 6300
42746: PPUSH
42747: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42751: LD_STRING hideTroll();
42753: PPUSH
42754: CALL_OW 559
// wait ( 1 1$00 ) ;
42758: LD_INT 2100
42760: PPUSH
42761: CALL_OW 67
// ToLua ( displayTroll(); ) ;
42765: LD_STRING displayTroll();
42767: PPUSH
42768: CALL_OW 559
// wait ( 1 1$00 ) ;
42772: LD_INT 2100
42774: PPUSH
42775: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42779: LD_STRING hideTroll();
42781: PPUSH
42782: CALL_OW 559
// end ;
42786: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
42787: LD_EXP 87
42791: IFFALSE 42799
42793: PUSH
42794: LD_EXP 113
42798: AND
42799: IFFALSE 42862
42801: GO 42803
42803: DISABLE
42804: LD_INT 0
42806: PPUSH
// begin p := 0 ;
42807: LD_ADDR_VAR 0 1
42811: PUSH
42812: LD_INT 0
42814: ST_TO_ADDR
// repeat game_speed := 1 ;
42815: LD_ADDR_OWVAR 65
42819: PUSH
42820: LD_INT 1
42822: ST_TO_ADDR
// wait ( 0 0$1 ) ;
42823: LD_INT 35
42825: PPUSH
42826: CALL_OW 67
// p := p + 1 ;
42830: LD_ADDR_VAR 0 1
42834: PUSH
42835: LD_VAR 0 1
42839: PUSH
42840: LD_INT 1
42842: PLUS
42843: ST_TO_ADDR
// until p >= 60 ;
42844: LD_VAR 0 1
42848: PUSH
42849: LD_INT 60
42851: GREATEREQUAL
42852: IFFALSE 42815
// game_speed := 4 ;
42854: LD_ADDR_OWVAR 65
42858: PUSH
42859: LD_INT 4
42861: ST_TO_ADDR
// end ;
42862: PPOPN 1
42864: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
42865: LD_EXP 87
42869: IFFALSE 42877
42871: PUSH
42872: LD_EXP 114
42876: AND
42877: IFFALSE 43023
42879: GO 42881
42881: DISABLE
42882: LD_INT 0
42884: PPUSH
42885: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42886: LD_ADDR_VAR 0 1
42890: PUSH
42891: LD_INT 22
42893: PUSH
42894: LD_OWVAR 2
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 2
42905: PUSH
42906: LD_INT 30
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 30
42918: PUSH
42919: LD_INT 1
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: LIST
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PPUSH
42935: CALL_OW 69
42939: ST_TO_ADDR
// if not depot then
42940: LD_VAR 0 1
42944: NOT
42945: IFFALSE 42949
// exit ;
42947: GO 43023
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
42949: LD_ADDR_VAR 0 2
42953: PUSH
42954: LD_VAR 0 1
42958: PUSH
42959: LD_INT 1
42961: PPUSH
42962: LD_VAR 0 1
42966: PPUSH
42967: CALL_OW 12
42971: ARRAY
42972: PPUSH
42973: CALL_OW 274
42977: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
42978: LD_VAR 0 2
42982: PPUSH
42983: LD_INT 1
42985: PPUSH
42986: LD_INT 0
42988: PPUSH
42989: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
42993: LD_VAR 0 2
42997: PPUSH
42998: LD_INT 2
43000: PPUSH
43001: LD_INT 0
43003: PPUSH
43004: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
43008: LD_VAR 0 2
43012: PPUSH
43013: LD_INT 3
43015: PPUSH
43016: LD_INT 0
43018: PPUSH
43019: CALL_OW 277
// end ;
43023: PPOPN 2
43025: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
43026: LD_EXP 87
43030: IFFALSE 43038
43032: PUSH
43033: LD_EXP 115
43037: AND
43038: IFFALSE 43135
43040: GO 43042
43042: DISABLE
43043: LD_INT 0
43045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
43046: LD_ADDR_VAR 0 1
43050: PUSH
43051: LD_INT 22
43053: PUSH
43054: LD_OWVAR 2
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 21
43065: PUSH
43066: LD_INT 1
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 3
43075: PUSH
43076: LD_INT 23
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: LIST
43094: PPUSH
43095: CALL_OW 69
43099: ST_TO_ADDR
// if not tmp then
43100: LD_VAR 0 1
43104: NOT
43105: IFFALSE 43109
// exit ;
43107: GO 43135
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
43109: LD_VAR 0 1
43113: PUSH
43114: LD_INT 1
43116: PPUSH
43117: LD_VAR 0 1
43121: PPUSH
43122: CALL_OW 12
43126: ARRAY
43127: PPUSH
43128: LD_INT 200
43130: PPUSH
43131: CALL_OW 234
// end ;
43135: PPOPN 1
43137: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
43138: LD_EXP 87
43142: IFFALSE 43150
43144: PUSH
43145: LD_EXP 116
43149: AND
43150: IFFALSE 43229
43152: GO 43154
43154: DISABLE
43155: LD_INT 0
43157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
43158: LD_ADDR_VAR 0 1
43162: PUSH
43163: LD_INT 22
43165: PUSH
43166: LD_OWVAR 2
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 21
43177: PUSH
43178: LD_INT 2
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PPUSH
43189: CALL_OW 69
43193: ST_TO_ADDR
// if not tmp then
43194: LD_VAR 0 1
43198: NOT
43199: IFFALSE 43203
// exit ;
43201: GO 43229
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
43203: LD_VAR 0 1
43207: PUSH
43208: LD_INT 1
43210: PPUSH
43211: LD_VAR 0 1
43215: PPUSH
43216: CALL_OW 12
43220: ARRAY
43221: PPUSH
43222: LD_INT 60
43224: PPUSH
43225: CALL_OW 234
// end ;
43229: PPOPN 1
43231: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
43232: LD_EXP 87
43236: IFFALSE 43244
43238: PUSH
43239: LD_EXP 117
43243: AND
43244: IFFALSE 43343
43246: GO 43248
43248: DISABLE
43249: LD_INT 0
43251: PPUSH
43252: PPUSH
// begin enable ;
43253: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
43254: LD_ADDR_VAR 0 1
43258: PUSH
43259: LD_INT 22
43261: PUSH
43262: LD_OWVAR 2
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 61
43273: PUSH
43274: EMPTY
43275: LIST
43276: PUSH
43277: LD_INT 33
43279: PUSH
43280: LD_INT 2
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: LIST
43291: PPUSH
43292: CALL_OW 69
43296: ST_TO_ADDR
// if not tmp then
43297: LD_VAR 0 1
43301: NOT
43302: IFFALSE 43306
// exit ;
43304: GO 43343
// for i in tmp do
43306: LD_ADDR_VAR 0 2
43310: PUSH
43311: LD_VAR 0 1
43315: PUSH
43316: FOR_IN
43317: IFFALSE 43341
// if IsControledBy ( i ) then
43319: LD_VAR 0 2
43323: PPUSH
43324: CALL_OW 312
43328: IFFALSE 43339
// ComUnlink ( i ) ;
43330: LD_VAR 0 2
43334: PPUSH
43335: CALL_OW 136
43339: GO 43316
43341: POP
43342: POP
// end ;
43343: PPOPN 2
43345: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
43346: LD_EXP 87
43350: IFFALSE 43358
43352: PUSH
43353: LD_EXP 118
43357: AND
43358: IFFALSE 43498
43360: GO 43362
43362: DISABLE
43363: LD_INT 0
43365: PPUSH
43366: PPUSH
// begin ToLua ( displayPowell(); ) ;
43367: LD_STRING displayPowell();
43369: PPUSH
43370: CALL_OW 559
// uc_side := 0 ;
43374: LD_ADDR_OWVAR 20
43378: PUSH
43379: LD_INT 0
43381: ST_TO_ADDR
// uc_nation := 2 ;
43382: LD_ADDR_OWVAR 21
43386: PUSH
43387: LD_INT 2
43389: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
43390: LD_ADDR_OWVAR 37
43394: PUSH
43395: LD_INT 14
43397: ST_TO_ADDR
// vc_engine := engine_siberite ;
43398: LD_ADDR_OWVAR 39
43402: PUSH
43403: LD_INT 3
43405: ST_TO_ADDR
// vc_control := control_apeman ;
43406: LD_ADDR_OWVAR 38
43410: PUSH
43411: LD_INT 5
43413: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
43414: LD_ADDR_OWVAR 40
43418: PUSH
43419: LD_INT 29
43421: ST_TO_ADDR
// un := CreateVehicle ;
43422: LD_ADDR_VAR 0 2
43426: PUSH
43427: CALL_OW 45
43431: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
43432: LD_VAR 0 2
43436: PPUSH
43437: LD_INT 1
43439: PPUSH
43440: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
43444: LD_INT 35
43446: PPUSH
43447: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
43451: LD_VAR 0 2
43455: PPUSH
43456: LD_INT 22
43458: PUSH
43459: LD_OWVAR 2
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PPUSH
43468: CALL_OW 69
43472: PPUSH
43473: LD_VAR 0 2
43477: PPUSH
43478: CALL_OW 74
43482: PPUSH
43483: CALL_OW 115
// until IsDead ( un ) ;
43487: LD_VAR 0 2
43491: PPUSH
43492: CALL_OW 301
43496: IFFALSE 43444
// end ;
43498: PPOPN 2
43500: END
// every 0 0$1 trigger StreamModeActive and sStu do
43501: LD_EXP 87
43505: IFFALSE 43513
43507: PUSH
43508: LD_EXP 126
43512: AND
43513: IFFALSE 43529
43515: GO 43517
43517: DISABLE
// begin ToLua ( displayStucuk(); ) ;
43518: LD_STRING displayStucuk();
43520: PPUSH
43521: CALL_OW 559
// ResetFog ;
43525: CALL_OW 335
// end ;
43529: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
43530: LD_EXP 87
43534: IFFALSE 43542
43536: PUSH
43537: LD_EXP 119
43541: AND
43542: IFFALSE 43683
43544: GO 43546
43546: DISABLE
43547: LD_INT 0
43549: PPUSH
43550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43551: LD_ADDR_VAR 0 2
43555: PUSH
43556: LD_INT 22
43558: PUSH
43559: LD_OWVAR 2
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 21
43570: PUSH
43571: LD_INT 1
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PPUSH
43582: CALL_OW 69
43586: ST_TO_ADDR
// if not tmp then
43587: LD_VAR 0 2
43591: NOT
43592: IFFALSE 43596
// exit ;
43594: GO 43683
// un := tmp [ rand ( 1 , tmp ) ] ;
43596: LD_ADDR_VAR 0 1
43600: PUSH
43601: LD_VAR 0 2
43605: PUSH
43606: LD_INT 1
43608: PPUSH
43609: LD_VAR 0 2
43613: PPUSH
43614: CALL_OW 12
43618: ARRAY
43619: ST_TO_ADDR
// SetSide ( un , 0 ) ;
43620: LD_VAR 0 1
43624: PPUSH
43625: LD_INT 0
43627: PPUSH
43628: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
43632: LD_VAR 0 1
43636: PPUSH
43637: LD_OWVAR 3
43641: PUSH
43642: LD_VAR 0 1
43646: DIFF
43647: PPUSH
43648: LD_VAR 0 1
43652: PPUSH
43653: CALL_OW 74
43657: PPUSH
43658: CALL_OW 115
// wait ( 0 0$20 ) ;
43662: LD_INT 700
43664: PPUSH
43665: CALL_OW 67
// SetSide ( un , your_side ) ;
43669: LD_VAR 0 1
43673: PPUSH
43674: LD_OWVAR 2
43678: PPUSH
43679: CALL_OW 235
// end ;
43683: PPOPN 2
43685: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
43686: LD_EXP 87
43690: IFFALSE 43698
43692: PUSH
43693: LD_EXP 120
43697: AND
43698: IFFALSE 43804
43700: GO 43702
43702: DISABLE
43703: LD_INT 0
43705: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43706: LD_ADDR_VAR 0 1
43710: PUSH
43711: LD_INT 22
43713: PUSH
43714: LD_OWVAR 2
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: LD_INT 30
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 30
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: LIST
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PPUSH
43755: CALL_OW 69
43759: ST_TO_ADDR
// if not depot then
43760: LD_VAR 0 1
43764: NOT
43765: IFFALSE 43769
// exit ;
43767: GO 43804
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
43769: LD_VAR 0 1
43773: PUSH
43774: LD_INT 1
43776: ARRAY
43777: PPUSH
43778: CALL_OW 250
43782: PPUSH
43783: LD_VAR 0 1
43787: PUSH
43788: LD_INT 1
43790: ARRAY
43791: PPUSH
43792: CALL_OW 251
43796: PPUSH
43797: LD_INT 70
43799: PPUSH
43800: CALL_OW 495
// end ;
43804: PPOPN 1
43806: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
43807: LD_EXP 87
43811: IFFALSE 43819
43813: PUSH
43814: LD_EXP 121
43818: AND
43819: IFFALSE 44030
43821: GO 43823
43823: DISABLE
43824: LD_INT 0
43826: PPUSH
43827: PPUSH
43828: PPUSH
43829: PPUSH
43830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43831: LD_ADDR_VAR 0 5
43835: PUSH
43836: LD_INT 22
43838: PUSH
43839: LD_OWVAR 2
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 21
43850: PUSH
43851: LD_INT 1
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PPUSH
43862: CALL_OW 69
43866: ST_TO_ADDR
// if not tmp then
43867: LD_VAR 0 5
43871: NOT
43872: IFFALSE 43876
// exit ;
43874: GO 44030
// for i in tmp do
43876: LD_ADDR_VAR 0 1
43880: PUSH
43881: LD_VAR 0 5
43885: PUSH
43886: FOR_IN
43887: IFFALSE 44028
// begin d := rand ( 0 , 5 ) ;
43889: LD_ADDR_VAR 0 4
43893: PUSH
43894: LD_INT 0
43896: PPUSH
43897: LD_INT 5
43899: PPUSH
43900: CALL_OW 12
43904: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
43905: LD_ADDR_VAR 0 2
43909: PUSH
43910: LD_VAR 0 1
43914: PPUSH
43915: CALL_OW 250
43919: PPUSH
43920: LD_VAR 0 4
43924: PPUSH
43925: LD_INT 3
43927: PPUSH
43928: LD_INT 12
43930: PPUSH
43931: CALL_OW 12
43935: PPUSH
43936: CALL_OW 272
43940: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
43941: LD_ADDR_VAR 0 3
43945: PUSH
43946: LD_VAR 0 1
43950: PPUSH
43951: CALL_OW 251
43955: PPUSH
43956: LD_VAR 0 4
43960: PPUSH
43961: LD_INT 3
43963: PPUSH
43964: LD_INT 12
43966: PPUSH
43967: CALL_OW 12
43971: PPUSH
43972: CALL_OW 273
43976: ST_TO_ADDR
// if ValidHex ( x , y ) then
43977: LD_VAR 0 2
43981: PPUSH
43982: LD_VAR 0 3
43986: PPUSH
43987: CALL_OW 488
43991: IFFALSE 44026
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
43993: LD_VAR 0 1
43997: PPUSH
43998: LD_VAR 0 2
44002: PPUSH
44003: LD_VAR 0 3
44007: PPUSH
44008: LD_INT 3
44010: PPUSH
44011: LD_INT 6
44013: PPUSH
44014: CALL_OW 12
44018: PPUSH
44019: LD_INT 1
44021: PPUSH
44022: CALL_OW 483
// end ;
44026: GO 43886
44028: POP
44029: POP
// end ;
44030: PPOPN 5
44032: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
44033: LD_EXP 87
44037: IFFALSE 44045
44039: PUSH
44040: LD_EXP 122
44044: AND
44045: IFFALSE 44139
44047: GO 44049
44049: DISABLE
44050: LD_INT 0
44052: PPUSH
44053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
44054: LD_ADDR_VAR 0 2
44058: PUSH
44059: LD_INT 22
44061: PUSH
44062: LD_OWVAR 2
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 32
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 21
44083: PUSH
44084: LD_INT 2
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: LIST
44095: PPUSH
44096: CALL_OW 69
44100: ST_TO_ADDR
// if not tmp then
44101: LD_VAR 0 2
44105: NOT
44106: IFFALSE 44110
// exit ;
44108: GO 44139
// for i in tmp do
44110: LD_ADDR_VAR 0 1
44114: PUSH
44115: LD_VAR 0 2
44119: PUSH
44120: FOR_IN
44121: IFFALSE 44137
// SetFuel ( i , 0 ) ;
44123: LD_VAR 0 1
44127: PPUSH
44128: LD_INT 0
44130: PPUSH
44131: CALL_OW 240
44135: GO 44120
44137: POP
44138: POP
// end ;
44139: PPOPN 2
44141: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
44142: LD_EXP 87
44146: IFFALSE 44154
44148: PUSH
44149: LD_EXP 123
44153: AND
44154: IFFALSE 44220
44156: GO 44158
44158: DISABLE
44159: LD_INT 0
44161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
44162: LD_ADDR_VAR 0 1
44166: PUSH
44167: LD_INT 22
44169: PUSH
44170: LD_OWVAR 2
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 30
44181: PUSH
44182: LD_INT 29
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PPUSH
44193: CALL_OW 69
44197: ST_TO_ADDR
// if not tmp then
44198: LD_VAR 0 1
44202: NOT
44203: IFFALSE 44207
// exit ;
44205: GO 44220
// DestroyUnit ( tmp [ 1 ] ) ;
44207: LD_VAR 0 1
44211: PUSH
44212: LD_INT 1
44214: ARRAY
44215: PPUSH
44216: CALL_OW 65
// end ;
44220: PPOPN 1
44222: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
44223: LD_EXP 87
44227: IFFALSE 44235
44229: PUSH
44230: LD_EXP 125
44234: AND
44235: IFFALSE 44364
44237: GO 44239
44239: DISABLE
44240: LD_INT 0
44242: PPUSH
// begin uc_side := 0 ;
44243: LD_ADDR_OWVAR 20
44247: PUSH
44248: LD_INT 0
44250: ST_TO_ADDR
// uc_nation := nation_arabian ;
44251: LD_ADDR_OWVAR 21
44255: PUSH
44256: LD_INT 2
44258: ST_TO_ADDR
// hc_gallery :=  ;
44259: LD_ADDR_OWVAR 33
44263: PUSH
44264: LD_STRING 
44266: ST_TO_ADDR
// hc_name :=  ;
44267: LD_ADDR_OWVAR 26
44271: PUSH
44272: LD_STRING 
44274: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
44275: LD_INT 1
44277: PPUSH
44278: LD_INT 11
44280: PPUSH
44281: LD_INT 10
44283: PPUSH
44284: CALL_OW 380
// un := CreateHuman ;
44288: LD_ADDR_VAR 0 1
44292: PUSH
44293: CALL_OW 44
44297: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
44298: LD_VAR 0 1
44302: PPUSH
44303: LD_INT 1
44305: PPUSH
44306: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
44310: LD_INT 35
44312: PPUSH
44313: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
44317: LD_VAR 0 1
44321: PPUSH
44322: LD_INT 22
44324: PUSH
44325: LD_OWVAR 2
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PPUSH
44334: CALL_OW 69
44338: PPUSH
44339: LD_VAR 0 1
44343: PPUSH
44344: CALL_OW 74
44348: PPUSH
44349: CALL_OW 115
// until IsDead ( un ) ;
44353: LD_VAR 0 1
44357: PPUSH
44358: CALL_OW 301
44362: IFFALSE 44310
// end ;
44364: PPOPN 1
44366: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
44367: LD_EXP 87
44371: IFFALSE 44379
44373: PUSH
44374: LD_EXP 127
44378: AND
44379: IFFALSE 44391
44381: GO 44383
44383: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
44384: LD_STRING earthquake(getX(game), 0, 32)
44386: PPUSH
44387: CALL_OW 559
44391: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
44392: LD_EXP 87
44396: IFFALSE 44404
44398: PUSH
44399: LD_EXP 128
44403: AND
44404: IFFALSE 44495
44406: GO 44408
44408: DISABLE
44409: LD_INT 0
44411: PPUSH
// begin enable ;
44412: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
44413: LD_ADDR_VAR 0 1
44417: PUSH
44418: LD_INT 22
44420: PUSH
44421: LD_OWVAR 2
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 21
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 33
44442: PUSH
44443: LD_INT 3
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: LIST
44454: PPUSH
44455: CALL_OW 69
44459: ST_TO_ADDR
// if not tmp then
44460: LD_VAR 0 1
44464: NOT
44465: IFFALSE 44469
// exit ;
44467: GO 44495
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
44469: LD_VAR 0 1
44473: PUSH
44474: LD_INT 1
44476: PPUSH
44477: LD_VAR 0 1
44481: PPUSH
44482: CALL_OW 12
44486: ARRAY
44487: PPUSH
44488: LD_INT 1
44490: PPUSH
44491: CALL_OW 234
// end ;
44495: PPOPN 1
44497: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
44498: LD_EXP 87
44502: IFFALSE 44510
44504: PUSH
44505: LD_EXP 129
44509: AND
44510: IFFALSE 44651
44512: GO 44514
44514: DISABLE
44515: LD_INT 0
44517: PPUSH
44518: PPUSH
44519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44520: LD_ADDR_VAR 0 3
44524: PUSH
44525: LD_INT 22
44527: PUSH
44528: LD_OWVAR 2
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 25
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PPUSH
44551: CALL_OW 69
44555: ST_TO_ADDR
// if not tmp then
44556: LD_VAR 0 3
44560: NOT
44561: IFFALSE 44565
// exit ;
44563: GO 44651
// un := tmp [ rand ( 1 , tmp ) ] ;
44565: LD_ADDR_VAR 0 2
44569: PUSH
44570: LD_VAR 0 3
44574: PUSH
44575: LD_INT 1
44577: PPUSH
44578: LD_VAR 0 3
44582: PPUSH
44583: CALL_OW 12
44587: ARRAY
44588: ST_TO_ADDR
// if Crawls ( un ) then
44589: LD_VAR 0 2
44593: PPUSH
44594: CALL_OW 318
44598: IFFALSE 44609
// ComWalk ( un ) ;
44600: LD_VAR 0 2
44604: PPUSH
44605: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
44609: LD_VAR 0 2
44613: PPUSH
44614: LD_INT 9
44616: PPUSH
44617: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
44621: LD_INT 28
44623: PPUSH
44624: LD_OWVAR 2
44628: PPUSH
44629: LD_INT 2
44631: PPUSH
44632: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
44636: LD_INT 29
44638: PPUSH
44639: LD_OWVAR 2
44643: PPUSH
44644: LD_INT 2
44646: PPUSH
44647: CALL_OW 322
// end ;
44651: PPOPN 3
44653: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
44654: LD_EXP 87
44658: IFFALSE 44666
44660: PUSH
44661: LD_EXP 130
44665: AND
44666: IFFALSE 44777
44668: GO 44670
44670: DISABLE
44671: LD_INT 0
44673: PPUSH
44674: PPUSH
44675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44676: LD_ADDR_VAR 0 3
44680: PUSH
44681: LD_INT 22
44683: PUSH
44684: LD_OWVAR 2
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 25
44695: PUSH
44696: LD_INT 1
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PPUSH
44707: CALL_OW 69
44711: ST_TO_ADDR
// if not tmp then
44712: LD_VAR 0 3
44716: NOT
44717: IFFALSE 44721
// exit ;
44719: GO 44777
// un := tmp [ rand ( 1 , tmp ) ] ;
44721: LD_ADDR_VAR 0 2
44725: PUSH
44726: LD_VAR 0 3
44730: PUSH
44731: LD_INT 1
44733: PPUSH
44734: LD_VAR 0 3
44738: PPUSH
44739: CALL_OW 12
44743: ARRAY
44744: ST_TO_ADDR
// if Crawls ( un ) then
44745: LD_VAR 0 2
44749: PPUSH
44750: CALL_OW 318
44754: IFFALSE 44765
// ComWalk ( un ) ;
44756: LD_VAR 0 2
44760: PPUSH
44761: CALL_OW 138
// SetClass ( un , class_mortar ) ;
44765: LD_VAR 0 2
44769: PPUSH
44770: LD_INT 8
44772: PPUSH
44773: CALL_OW 336
// end ;
44777: PPOPN 3
44779: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
44780: LD_EXP 87
44784: IFFALSE 44792
44786: PUSH
44787: LD_EXP 131
44791: AND
44792: IFFALSE 44936
44794: GO 44796
44796: DISABLE
44797: LD_INT 0
44799: PPUSH
44800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
44801: LD_ADDR_VAR 0 2
44805: PUSH
44806: LD_INT 22
44808: PUSH
44809: LD_OWVAR 2
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 21
44820: PUSH
44821: LD_INT 2
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 2
44830: PUSH
44831: LD_INT 34
44833: PUSH
44834: LD_INT 12
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 34
44843: PUSH
44844: LD_INT 51
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 34
44853: PUSH
44854: LD_INT 32
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: LIST
44871: PPUSH
44872: CALL_OW 69
44876: ST_TO_ADDR
// if not tmp then
44877: LD_VAR 0 2
44881: NOT
44882: IFFALSE 44886
// exit ;
44884: GO 44936
// for i in tmp do
44886: LD_ADDR_VAR 0 1
44890: PUSH
44891: LD_VAR 0 2
44895: PUSH
44896: FOR_IN
44897: IFFALSE 44934
// if GetCargo ( i , mat_artifact ) = 0 then
44899: LD_VAR 0 1
44903: PPUSH
44904: LD_INT 4
44906: PPUSH
44907: CALL_OW 289
44911: PUSH
44912: LD_INT 0
44914: EQUAL
44915: IFFALSE 44932
// SetCargo ( i , mat_siberit , 100 ) ;
44917: LD_VAR 0 1
44921: PPUSH
44922: LD_INT 3
44924: PPUSH
44925: LD_INT 100
44927: PPUSH
44928: CALL_OW 290
44932: GO 44896
44934: POP
44935: POP
// end ;
44936: PPOPN 2
44938: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
44939: LD_EXP 87
44943: IFFALSE 44951
44945: PUSH
44946: LD_EXP 132
44950: AND
44951: IFFALSE 45134
44953: GO 44955
44955: DISABLE
44956: LD_INT 0
44958: PPUSH
44959: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
44960: LD_ADDR_VAR 0 2
44964: PUSH
44965: LD_INT 22
44967: PUSH
44968: LD_OWVAR 2
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PPUSH
44977: CALL_OW 69
44981: ST_TO_ADDR
// if not tmp then
44982: LD_VAR 0 2
44986: NOT
44987: IFFALSE 44991
// exit ;
44989: GO 45134
// for i := 1 to 2 do
44991: LD_ADDR_VAR 0 1
44995: PUSH
44996: DOUBLE
44997: LD_INT 1
44999: DEC
45000: ST_TO_ADDR
45001: LD_INT 2
45003: PUSH
45004: FOR_TO
45005: IFFALSE 45132
// begin uc_side := your_side ;
45007: LD_ADDR_OWVAR 20
45011: PUSH
45012: LD_OWVAR 2
45016: ST_TO_ADDR
// uc_nation := nation_american ;
45017: LD_ADDR_OWVAR 21
45021: PUSH
45022: LD_INT 1
45024: ST_TO_ADDR
// vc_chassis := us_morphling ;
45025: LD_ADDR_OWVAR 37
45029: PUSH
45030: LD_INT 5
45032: ST_TO_ADDR
// vc_engine := engine_siberite ;
45033: LD_ADDR_OWVAR 39
45037: PUSH
45038: LD_INT 3
45040: ST_TO_ADDR
// vc_control := control_computer ;
45041: LD_ADDR_OWVAR 38
45045: PUSH
45046: LD_INT 3
45048: ST_TO_ADDR
// vc_weapon := us_double_laser ;
45049: LD_ADDR_OWVAR 40
45053: PUSH
45054: LD_INT 10
45056: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
45057: LD_VAR 0 2
45061: PUSH
45062: LD_INT 1
45064: ARRAY
45065: PPUSH
45066: CALL_OW 310
45070: NOT
45071: IFFALSE 45118
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
45073: CALL_OW 45
45077: PPUSH
45078: LD_VAR 0 2
45082: PUSH
45083: LD_INT 1
45085: ARRAY
45086: PPUSH
45087: CALL_OW 250
45091: PPUSH
45092: LD_VAR 0 2
45096: PUSH
45097: LD_INT 1
45099: ARRAY
45100: PPUSH
45101: CALL_OW 251
45105: PPUSH
45106: LD_INT 12
45108: PPUSH
45109: LD_INT 1
45111: PPUSH
45112: CALL_OW 50
45116: GO 45130
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
45118: CALL_OW 45
45122: PPUSH
45123: LD_INT 1
45125: PPUSH
45126: CALL_OW 51
// end ;
45130: GO 45004
45132: POP
45133: POP
// end ;
45134: PPOPN 2
45136: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
45137: LD_EXP 87
45141: IFFALSE 45149
45143: PUSH
45144: LD_EXP 133
45148: AND
45149: IFFALSE 45371
45151: GO 45153
45153: DISABLE
45154: LD_INT 0
45156: PPUSH
45157: PPUSH
45158: PPUSH
45159: PPUSH
45160: PPUSH
45161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
45162: LD_ADDR_VAR 0 6
45166: PUSH
45167: LD_INT 22
45169: PUSH
45170: LD_OWVAR 2
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 21
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 3
45191: PUSH
45192: LD_INT 23
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: LIST
45210: PPUSH
45211: CALL_OW 69
45215: ST_TO_ADDR
// if not tmp then
45216: LD_VAR 0 6
45220: NOT
45221: IFFALSE 45225
// exit ;
45223: GO 45371
// s1 := rand ( 1 , 4 ) ;
45225: LD_ADDR_VAR 0 2
45229: PUSH
45230: LD_INT 1
45232: PPUSH
45233: LD_INT 4
45235: PPUSH
45236: CALL_OW 12
45240: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
45241: LD_ADDR_VAR 0 4
45245: PUSH
45246: LD_VAR 0 6
45250: PUSH
45251: LD_INT 1
45253: ARRAY
45254: PPUSH
45255: LD_VAR 0 2
45259: PPUSH
45260: CALL_OW 259
45264: ST_TO_ADDR
// if s1 = 1 then
45265: LD_VAR 0 2
45269: PUSH
45270: LD_INT 1
45272: EQUAL
45273: IFFALSE 45293
// s2 := rand ( 2 , 4 ) else
45275: LD_ADDR_VAR 0 3
45279: PUSH
45280: LD_INT 2
45282: PPUSH
45283: LD_INT 4
45285: PPUSH
45286: CALL_OW 12
45290: ST_TO_ADDR
45291: GO 45301
// s2 := 1 ;
45293: LD_ADDR_VAR 0 3
45297: PUSH
45298: LD_INT 1
45300: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
45301: LD_ADDR_VAR 0 5
45305: PUSH
45306: LD_VAR 0 6
45310: PUSH
45311: LD_INT 1
45313: ARRAY
45314: PPUSH
45315: LD_VAR 0 3
45319: PPUSH
45320: CALL_OW 259
45324: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
45325: LD_VAR 0 6
45329: PUSH
45330: LD_INT 1
45332: ARRAY
45333: PPUSH
45334: LD_VAR 0 2
45338: PPUSH
45339: LD_VAR 0 5
45343: PPUSH
45344: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
45348: LD_VAR 0 6
45352: PUSH
45353: LD_INT 1
45355: ARRAY
45356: PPUSH
45357: LD_VAR 0 3
45361: PPUSH
45362: LD_VAR 0 4
45366: PPUSH
45367: CALL_OW 237
// end ;
45371: PPOPN 6
45373: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
45374: LD_EXP 87
45378: IFFALSE 45386
45380: PUSH
45381: LD_EXP 134
45385: AND
45386: IFFALSE 45465
45388: GO 45390
45390: DISABLE
45391: LD_INT 0
45393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
45394: LD_ADDR_VAR 0 1
45398: PUSH
45399: LD_INT 22
45401: PUSH
45402: LD_OWVAR 2
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 30
45413: PUSH
45414: LD_INT 3
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PPUSH
45425: CALL_OW 69
45429: ST_TO_ADDR
// if not tmp then
45430: LD_VAR 0 1
45434: NOT
45435: IFFALSE 45439
// exit ;
45437: GO 45465
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
45439: LD_VAR 0 1
45443: PUSH
45444: LD_INT 1
45446: PPUSH
45447: LD_VAR 0 1
45451: PPUSH
45452: CALL_OW 12
45456: ARRAY
45457: PPUSH
45458: LD_INT 1
45460: PPUSH
45461: CALL_OW 234
// end ;
45465: PPOPN 1
45467: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
45468: LD_EXP 87
45472: IFFALSE 45480
45474: PUSH
45475: LD_EXP 135
45479: AND
45480: IFFALSE 45592
45482: GO 45484
45484: DISABLE
45485: LD_INT 0
45487: PPUSH
45488: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
45489: LD_ADDR_VAR 0 2
45493: PUSH
45494: LD_INT 22
45496: PUSH
45497: LD_OWVAR 2
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 2
45508: PUSH
45509: LD_INT 30
45511: PUSH
45512: LD_INT 27
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 30
45521: PUSH
45522: LD_INT 26
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 30
45531: PUSH
45532: LD_INT 28
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PPUSH
45549: CALL_OW 69
45553: ST_TO_ADDR
// if not tmp then
45554: LD_VAR 0 2
45558: NOT
45559: IFFALSE 45563
// exit ;
45561: GO 45592
// for i in tmp do
45563: LD_ADDR_VAR 0 1
45567: PUSH
45568: LD_VAR 0 2
45572: PUSH
45573: FOR_IN
45574: IFFALSE 45590
// SetLives ( i , 1 ) ;
45576: LD_VAR 0 1
45580: PPUSH
45581: LD_INT 1
45583: PPUSH
45584: CALL_OW 234
45588: GO 45573
45590: POP
45591: POP
// end ;
45592: PPOPN 2
45594: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
45595: LD_EXP 87
45599: IFFALSE 45607
45601: PUSH
45602: LD_EXP 136
45606: AND
45607: IFFALSE 45894
45609: GO 45611
45611: DISABLE
45612: LD_INT 0
45614: PPUSH
45615: PPUSH
45616: PPUSH
// begin i := rand ( 1 , 7 ) ;
45617: LD_ADDR_VAR 0 1
45621: PUSH
45622: LD_INT 1
45624: PPUSH
45625: LD_INT 7
45627: PPUSH
45628: CALL_OW 12
45632: ST_TO_ADDR
// case i of 1 :
45633: LD_VAR 0 1
45637: PUSH
45638: LD_INT 1
45640: DOUBLE
45641: EQUAL
45642: IFTRUE 45646
45644: GO 45656
45646: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
45647: LD_STRING earthquake(getX(game), 0, 32)
45649: PPUSH
45650: CALL_OW 559
45654: GO 45894
45656: LD_INT 2
45658: DOUBLE
45659: EQUAL
45660: IFTRUE 45664
45662: GO 45678
45664: POP
// begin ToLua ( displayStucuk(); ) ;
45665: LD_STRING displayStucuk();
45667: PPUSH
45668: CALL_OW 559
// ResetFog ;
45672: CALL_OW 335
// end ; 3 :
45676: GO 45894
45678: LD_INT 3
45680: DOUBLE
45681: EQUAL
45682: IFTRUE 45686
45684: GO 45790
45686: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
45687: LD_ADDR_VAR 0 2
45691: PUSH
45692: LD_INT 22
45694: PUSH
45695: LD_OWVAR 2
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 25
45706: PUSH
45707: LD_INT 1
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PPUSH
45718: CALL_OW 69
45722: ST_TO_ADDR
// if not tmp then
45723: LD_VAR 0 2
45727: NOT
45728: IFFALSE 45732
// exit ;
45730: GO 45894
// un := tmp [ rand ( 1 , tmp ) ] ;
45732: LD_ADDR_VAR 0 3
45736: PUSH
45737: LD_VAR 0 2
45741: PUSH
45742: LD_INT 1
45744: PPUSH
45745: LD_VAR 0 2
45749: PPUSH
45750: CALL_OW 12
45754: ARRAY
45755: ST_TO_ADDR
// if Crawls ( un ) then
45756: LD_VAR 0 3
45760: PPUSH
45761: CALL_OW 318
45765: IFFALSE 45776
// ComWalk ( un ) ;
45767: LD_VAR 0 3
45771: PPUSH
45772: CALL_OW 138
// SetClass ( un , class_mortar ) ;
45776: LD_VAR 0 3
45780: PPUSH
45781: LD_INT 8
45783: PPUSH
45784: CALL_OW 336
// end ; 4 :
45788: GO 45894
45790: LD_INT 4
45792: DOUBLE
45793: EQUAL
45794: IFTRUE 45798
45796: GO 45872
45798: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
45799: LD_ADDR_VAR 0 2
45803: PUSH
45804: LD_INT 22
45806: PUSH
45807: LD_OWVAR 2
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 30
45818: PUSH
45819: LD_INT 29
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PPUSH
45830: CALL_OW 69
45834: ST_TO_ADDR
// if not tmp then
45835: LD_VAR 0 2
45839: NOT
45840: IFFALSE 45844
// exit ;
45842: GO 45894
// CenterNowOnUnits ( tmp [ 1 ] ) ;
45844: LD_VAR 0 2
45848: PUSH
45849: LD_INT 1
45851: ARRAY
45852: PPUSH
45853: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
45857: LD_VAR 0 2
45861: PUSH
45862: LD_INT 1
45864: ARRAY
45865: PPUSH
45866: CALL_OW 65
// end ; 5 .. 7 :
45870: GO 45894
45872: LD_INT 5
45874: DOUBLE
45875: GREATEREQUAL
45876: IFFALSE 45884
45878: LD_INT 7
45880: DOUBLE
45881: LESSEQUAL
45882: IFTRUE 45886
45884: GO 45893
45886: POP
// StreamSibBomb ; end ;
45887: CALL 42075 0 0
45891: GO 45894
45893: POP
// end ;
45894: PPOPN 3
45896: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
45897: LD_EXP 87
45901: IFFALSE 45909
45903: PUSH
45904: LD_EXP 137
45908: AND
45909: IFFALSE 46065
45911: GO 45913
45913: DISABLE
45914: LD_INT 0
45916: PPUSH
45917: PPUSH
45918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
45919: LD_ADDR_VAR 0 2
45923: PUSH
45924: LD_INT 81
45926: PUSH
45927: LD_OWVAR 2
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 2
45938: PUSH
45939: LD_INT 21
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 21
45951: PUSH
45952: LD_INT 2
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: LIST
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PPUSH
45968: CALL_OW 69
45972: ST_TO_ADDR
// if not tmp then
45973: LD_VAR 0 2
45977: NOT
45978: IFFALSE 45982
// exit ;
45980: GO 46065
// p := 0 ;
45982: LD_ADDR_VAR 0 3
45986: PUSH
45987: LD_INT 0
45989: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
45990: LD_INT 35
45992: PPUSH
45993: CALL_OW 67
// p := p + 1 ;
45997: LD_ADDR_VAR 0 3
46001: PUSH
46002: LD_VAR 0 3
46006: PUSH
46007: LD_INT 1
46009: PLUS
46010: ST_TO_ADDR
// for i in tmp do
46011: LD_ADDR_VAR 0 1
46015: PUSH
46016: LD_VAR 0 2
46020: PUSH
46021: FOR_IN
46022: IFFALSE 46053
// if GetLives ( i ) < 1000 then
46024: LD_VAR 0 1
46028: PPUSH
46029: CALL_OW 256
46033: PUSH
46034: LD_INT 1000
46036: LESS
46037: IFFALSE 46051
// SetLives ( i , 1000 ) ;
46039: LD_VAR 0 1
46043: PPUSH
46044: LD_INT 1000
46046: PPUSH
46047: CALL_OW 234
46051: GO 46021
46053: POP
46054: POP
// until p > 20 ;
46055: LD_VAR 0 3
46059: PUSH
46060: LD_INT 20
46062: GREATER
46063: IFFALSE 45990
// end ;
46065: PPOPN 3
46067: END
// every 0 0$1 trigger StreamModeActive and sTime do
46068: LD_EXP 87
46072: IFFALSE 46080
46074: PUSH
46075: LD_EXP 138
46079: AND
46080: IFFALSE 46115
46082: GO 46084
46084: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
46085: LD_INT 28
46087: PPUSH
46088: LD_OWVAR 2
46092: PPUSH
46093: LD_INT 2
46095: PPUSH
46096: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
46100: LD_INT 30
46102: PPUSH
46103: LD_OWVAR 2
46107: PPUSH
46108: LD_INT 2
46110: PPUSH
46111: CALL_OW 322
// end ;
46115: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
46116: LD_EXP 87
46120: IFFALSE 46128
46122: PUSH
46123: LD_EXP 139
46127: AND
46128: IFFALSE 46249
46130: GO 46132
46132: DISABLE
46133: LD_INT 0
46135: PPUSH
46136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
46137: LD_ADDR_VAR 0 2
46141: PUSH
46142: LD_INT 22
46144: PUSH
46145: LD_OWVAR 2
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 21
46156: PUSH
46157: LD_INT 1
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 3
46166: PUSH
46167: LD_INT 23
46169: PUSH
46170: LD_INT 0
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: LIST
46185: PPUSH
46186: CALL_OW 69
46190: ST_TO_ADDR
// if not tmp then
46191: LD_VAR 0 2
46195: NOT
46196: IFFALSE 46200
// exit ;
46198: GO 46249
// for i in tmp do
46200: LD_ADDR_VAR 0 1
46204: PUSH
46205: LD_VAR 0 2
46209: PUSH
46210: FOR_IN
46211: IFFALSE 46247
// begin if Crawls ( i ) then
46213: LD_VAR 0 1
46217: PPUSH
46218: CALL_OW 318
46222: IFFALSE 46233
// ComWalk ( i ) ;
46224: LD_VAR 0 1
46228: PPUSH
46229: CALL_OW 138
// SetClass ( i , 2 ) ;
46233: LD_VAR 0 1
46237: PPUSH
46238: LD_INT 2
46240: PPUSH
46241: CALL_OW 336
// end ;
46245: GO 46210
46247: POP
46248: POP
// end ;
46249: PPOPN 2
46251: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
46252: LD_EXP 87
46256: IFFALSE 46264
46258: PUSH
46259: LD_EXP 140
46263: AND
46264: IFFALSE 46554
46266: GO 46268
46268: DISABLE
46269: LD_INT 0
46271: PPUSH
46272: PPUSH
46273: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
46274: LD_OWVAR 2
46278: PPUSH
46279: LD_INT 9
46281: PPUSH
46282: LD_INT 1
46284: PPUSH
46285: LD_INT 1
46287: PPUSH
46288: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
46292: LD_INT 9
46294: PPUSH
46295: LD_OWVAR 2
46299: PPUSH
46300: CALL_OW 343
// uc_side := 9 ;
46304: LD_ADDR_OWVAR 20
46308: PUSH
46309: LD_INT 9
46311: ST_TO_ADDR
// uc_nation := 2 ;
46312: LD_ADDR_OWVAR 21
46316: PUSH
46317: LD_INT 2
46319: ST_TO_ADDR
// hc_name := Dark Warrior ;
46320: LD_ADDR_OWVAR 26
46324: PUSH
46325: LD_STRING Dark Warrior
46327: ST_TO_ADDR
// hc_gallery :=  ;
46328: LD_ADDR_OWVAR 33
46332: PUSH
46333: LD_STRING 
46335: ST_TO_ADDR
// hc_noskilllimit := true ;
46336: LD_ADDR_OWVAR 76
46340: PUSH
46341: LD_INT 1
46343: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
46344: LD_ADDR_OWVAR 31
46348: PUSH
46349: LD_INT 30
46351: PUSH
46352: LD_INT 30
46354: PUSH
46355: LD_INT 30
46357: PUSH
46358: LD_INT 30
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: ST_TO_ADDR
// un := CreateHuman ;
46367: LD_ADDR_VAR 0 3
46371: PUSH
46372: CALL_OW 44
46376: ST_TO_ADDR
// hc_noskilllimit := false ;
46377: LD_ADDR_OWVAR 76
46381: PUSH
46382: LD_INT 0
46384: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
46385: LD_VAR 0 3
46389: PPUSH
46390: LD_INT 1
46392: PPUSH
46393: CALL_OW 51
// ToLua ( playRanger() ) ;
46397: LD_STRING playRanger()
46399: PPUSH
46400: CALL_OW 559
// p := 0 ;
46404: LD_ADDR_VAR 0 2
46408: PUSH
46409: LD_INT 0
46411: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
46412: LD_INT 35
46414: PPUSH
46415: CALL_OW 67
// p := p + 1 ;
46419: LD_ADDR_VAR 0 2
46423: PUSH
46424: LD_VAR 0 2
46428: PUSH
46429: LD_INT 1
46431: PLUS
46432: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
46433: LD_VAR 0 3
46437: PPUSH
46438: CALL_OW 256
46442: PUSH
46443: LD_INT 1000
46445: LESS
46446: IFFALSE 46460
// SetLives ( un , 1000 ) ;
46448: LD_VAR 0 3
46452: PPUSH
46453: LD_INT 1000
46455: PPUSH
46456: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
46460: LD_VAR 0 3
46464: PPUSH
46465: LD_INT 81
46467: PUSH
46468: LD_OWVAR 2
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 91
46479: PUSH
46480: LD_VAR 0 3
46484: PUSH
46485: LD_INT 30
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: LIST
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PPUSH
46497: CALL_OW 69
46501: PPUSH
46502: LD_VAR 0 3
46506: PPUSH
46507: CALL_OW 74
46511: PPUSH
46512: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
46516: LD_VAR 0 2
46520: PUSH
46521: LD_INT 80
46523: GREATER
46524: IFTRUE 46537
46526: PUSH
46527: LD_VAR 0 3
46531: PPUSH
46532: CALL_OW 301
46536: OR
46537: IFFALSE 46412
// if un then
46539: LD_VAR 0 3
46543: IFFALSE 46554
// RemoveUnit ( un ) ;
46545: LD_VAR 0 3
46549: PPUSH
46550: CALL_OW 64
// end ;
46554: PPOPN 3
46556: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
46557: LD_EXP 141
46561: IFFALSE 46677
46563: GO 46565
46565: DISABLE
46566: LD_INT 0
46568: PPUSH
46569: PPUSH
46570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
46571: LD_ADDR_VAR 0 2
46575: PUSH
46576: LD_INT 81
46578: PUSH
46579: LD_OWVAR 2
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 21
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PPUSH
46602: CALL_OW 69
46606: ST_TO_ADDR
// ToLua ( playComputer() ) ;
46607: LD_STRING playComputer()
46609: PPUSH
46610: CALL_OW 559
// if not tmp then
46614: LD_VAR 0 2
46618: NOT
46619: IFFALSE 46623
// exit ;
46621: GO 46677
// for i in tmp do
46623: LD_ADDR_VAR 0 1
46627: PUSH
46628: LD_VAR 0 2
46632: PUSH
46633: FOR_IN
46634: IFFALSE 46675
// for j := 1 to 4 do
46636: LD_ADDR_VAR 0 3
46640: PUSH
46641: DOUBLE
46642: LD_INT 1
46644: DEC
46645: ST_TO_ADDR
46646: LD_INT 4
46648: PUSH
46649: FOR_TO
46650: IFFALSE 46671
// SetSkill ( i , j , 10 ) ;
46652: LD_VAR 0 1
46656: PPUSH
46657: LD_VAR 0 3
46661: PPUSH
46662: LD_INT 10
46664: PPUSH
46665: CALL_OW 237
46669: GO 46649
46671: POP
46672: POP
46673: GO 46633
46675: POP
46676: POP
// end ;
46677: PPOPN 3
46679: END
// every 0 0$1 trigger s30 do var i , tmp ;
46680: LD_EXP 142
46684: IFFALSE 46753
46686: GO 46688
46688: DISABLE
46689: LD_INT 0
46691: PPUSH
46692: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46693: LD_ADDR_VAR 0 2
46697: PUSH
46698: LD_INT 22
46700: PUSH
46701: LD_OWVAR 2
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PPUSH
46710: CALL_OW 69
46714: ST_TO_ADDR
// if not tmp then
46715: LD_VAR 0 2
46719: NOT
46720: IFFALSE 46724
// exit ;
46722: GO 46753
// for i in tmp do
46724: LD_ADDR_VAR 0 1
46728: PUSH
46729: LD_VAR 0 2
46733: PUSH
46734: FOR_IN
46735: IFFALSE 46751
// SetLives ( i , 300 ) ;
46737: LD_VAR 0 1
46741: PPUSH
46742: LD_INT 300
46744: PPUSH
46745: CALL_OW 234
46749: GO 46734
46751: POP
46752: POP
// end ;
46753: PPOPN 2
46755: END
// every 0 0$1 trigger s60 do var i , tmp ;
46756: LD_EXP 143
46760: IFFALSE 46829
46762: GO 46764
46764: DISABLE
46765: LD_INT 0
46767: PPUSH
46768: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46769: LD_ADDR_VAR 0 2
46773: PUSH
46774: LD_INT 22
46776: PUSH
46777: LD_OWVAR 2
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PPUSH
46786: CALL_OW 69
46790: ST_TO_ADDR
// if not tmp then
46791: LD_VAR 0 2
46795: NOT
46796: IFFALSE 46800
// exit ;
46798: GO 46829
// for i in tmp do
46800: LD_ADDR_VAR 0 1
46804: PUSH
46805: LD_VAR 0 2
46809: PUSH
46810: FOR_IN
46811: IFFALSE 46827
// SetLives ( i , 600 ) ;
46813: LD_VAR 0 1
46817: PPUSH
46818: LD_INT 600
46820: PPUSH
46821: CALL_OW 234
46825: GO 46810
46827: POP
46828: POP
// end ;
46829: PPOPN 2
46831: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46832: LD_INT 0
46834: PPUSH
// case cmd of 301 :
46835: LD_VAR 0 1
46839: PUSH
46840: LD_INT 301
46842: DOUBLE
46843: EQUAL
46844: IFTRUE 46848
46846: GO 46880
46848: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
46849: LD_VAR 0 6
46853: PPUSH
46854: LD_VAR 0 7
46858: PPUSH
46859: LD_VAR 0 8
46863: PPUSH
46864: LD_VAR 0 4
46868: PPUSH
46869: LD_VAR 0 5
46873: PPUSH
46874: CALL 48093 0 5
46878: GO 47001
46880: LD_INT 302
46882: DOUBLE
46883: EQUAL
46884: IFTRUE 46888
46886: GO 46925
46888: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
46889: LD_VAR 0 6
46893: PPUSH
46894: LD_VAR 0 7
46898: PPUSH
46899: LD_VAR 0 8
46903: PPUSH
46904: LD_VAR 0 9
46908: PPUSH
46909: LD_VAR 0 4
46913: PPUSH
46914: LD_VAR 0 5
46918: PPUSH
46919: CALL 48184 0 6
46923: GO 47001
46925: LD_INT 303
46927: DOUBLE
46928: EQUAL
46929: IFTRUE 46933
46931: GO 46970
46933: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
46934: LD_VAR 0 6
46938: PPUSH
46939: LD_VAR 0 7
46943: PPUSH
46944: LD_VAR 0 8
46948: PPUSH
46949: LD_VAR 0 9
46953: PPUSH
46954: LD_VAR 0 4
46958: PPUSH
46959: LD_VAR 0 5
46963: PPUSH
46964: CALL 47006 0 6
46968: GO 47001
46970: LD_INT 304
46972: DOUBLE
46973: EQUAL
46974: IFTRUE 46978
46976: GO 47000
46978: POP
// hHackTeleport ( unit , x , y ) ; end ;
46979: LD_VAR 0 2
46983: PPUSH
46984: LD_VAR 0 4
46988: PPUSH
46989: LD_VAR 0 5
46993: PPUSH
46994: CALL 48777 0 3
46998: GO 47001
47000: POP
// end ;
47001: LD_VAR 0 12
47005: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
47006: LD_INT 0
47008: PPUSH
47009: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
47010: LD_VAR 0 1
47014: PUSH
47015: LD_INT 1
47017: LESS
47018: IFTRUE 47030
47020: PUSH
47021: LD_VAR 0 1
47025: PUSH
47026: LD_INT 3
47028: GREATER
47029: OR
47030: IFTRUE 47048
47032: PUSH
47033: LD_VAR 0 5
47037: PPUSH
47038: LD_VAR 0 6
47042: PPUSH
47043: CALL_OW 428
47047: OR
47048: IFFALSE 47052
// exit ;
47050: GO 47780
// uc_side := your_side ;
47052: LD_ADDR_OWVAR 20
47056: PUSH
47057: LD_OWVAR 2
47061: ST_TO_ADDR
// uc_nation := nation ;
47062: LD_ADDR_OWVAR 21
47066: PUSH
47067: LD_VAR 0 1
47071: ST_TO_ADDR
// bc_level = 1 ;
47072: LD_ADDR_OWVAR 43
47076: PUSH
47077: LD_INT 1
47079: ST_TO_ADDR
// case btype of 1 :
47080: LD_VAR 0 2
47084: PUSH
47085: LD_INT 1
47087: DOUBLE
47088: EQUAL
47089: IFTRUE 47093
47091: GO 47104
47093: POP
// bc_type := b_depot ; 2 :
47094: LD_ADDR_OWVAR 42
47098: PUSH
47099: LD_INT 0
47101: ST_TO_ADDR
47102: GO 47724
47104: LD_INT 2
47106: DOUBLE
47107: EQUAL
47108: IFTRUE 47112
47110: GO 47123
47112: POP
// bc_type := b_warehouse ; 3 :
47113: LD_ADDR_OWVAR 42
47117: PUSH
47118: LD_INT 1
47120: ST_TO_ADDR
47121: GO 47724
47123: LD_INT 3
47125: DOUBLE
47126: EQUAL
47127: IFTRUE 47131
47129: GO 47142
47131: POP
// bc_type := b_lab ; 4 .. 9 :
47132: LD_ADDR_OWVAR 42
47136: PUSH
47137: LD_INT 6
47139: ST_TO_ADDR
47140: GO 47724
47142: LD_INT 4
47144: DOUBLE
47145: GREATEREQUAL
47146: IFFALSE 47154
47148: LD_INT 9
47150: DOUBLE
47151: LESSEQUAL
47152: IFTRUE 47156
47154: GO 47216
47156: POP
// begin bc_type := b_lab_half ;
47157: LD_ADDR_OWVAR 42
47161: PUSH
47162: LD_INT 7
47164: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
47165: LD_ADDR_OWVAR 44
47169: PUSH
47170: LD_INT 10
47172: PUSH
47173: LD_INT 11
47175: PUSH
47176: LD_INT 12
47178: PUSH
47179: LD_INT 15
47181: PUSH
47182: LD_INT 14
47184: PUSH
47185: LD_INT 13
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: PUSH
47196: LD_VAR 0 2
47200: PUSH
47201: LD_INT 3
47203: MINUS
47204: ARRAY
47205: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
47206: LD_ADDR_OWVAR 45
47210: PUSH
47211: LD_INT 9
47213: ST_TO_ADDR
// end ; 10 .. 13 :
47214: GO 47724
47216: LD_INT 10
47218: DOUBLE
47219: GREATEREQUAL
47220: IFFALSE 47228
47222: LD_INT 13
47224: DOUBLE
47225: LESSEQUAL
47226: IFTRUE 47230
47228: GO 47307
47230: POP
// begin bc_type := b_lab_full ;
47231: LD_ADDR_OWVAR 42
47235: PUSH
47236: LD_INT 8
47238: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
47239: LD_ADDR_OWVAR 44
47243: PUSH
47244: LD_INT 10
47246: PUSH
47247: LD_INT 12
47249: PUSH
47250: LD_INT 14
47252: PUSH
47253: LD_INT 13
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: PUSH
47262: LD_VAR 0 2
47266: PUSH
47267: LD_INT 9
47269: MINUS
47270: ARRAY
47271: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
47272: LD_ADDR_OWVAR 45
47276: PUSH
47277: LD_INT 11
47279: PUSH
47280: LD_INT 15
47282: PUSH
47283: LD_INT 12
47285: PUSH
47286: LD_INT 15
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: PUSH
47295: LD_VAR 0 2
47299: PUSH
47300: LD_INT 9
47302: MINUS
47303: ARRAY
47304: ST_TO_ADDR
// end ; 14 :
47305: GO 47724
47307: LD_INT 14
47309: DOUBLE
47310: EQUAL
47311: IFTRUE 47315
47313: GO 47326
47315: POP
// bc_type := b_workshop ; 15 :
47316: LD_ADDR_OWVAR 42
47320: PUSH
47321: LD_INT 2
47323: ST_TO_ADDR
47324: GO 47724
47326: LD_INT 15
47328: DOUBLE
47329: EQUAL
47330: IFTRUE 47334
47332: GO 47345
47334: POP
// bc_type := b_factory ; 16 :
47335: LD_ADDR_OWVAR 42
47339: PUSH
47340: LD_INT 3
47342: ST_TO_ADDR
47343: GO 47724
47345: LD_INT 16
47347: DOUBLE
47348: EQUAL
47349: IFTRUE 47353
47351: GO 47364
47353: POP
// bc_type := b_ext_gun ; 17 :
47354: LD_ADDR_OWVAR 42
47358: PUSH
47359: LD_INT 17
47361: ST_TO_ADDR
47362: GO 47724
47364: LD_INT 17
47366: DOUBLE
47367: EQUAL
47368: IFTRUE 47372
47370: GO 47400
47372: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
47373: LD_ADDR_OWVAR 42
47377: PUSH
47378: LD_INT 19
47380: PUSH
47381: LD_INT 23
47383: PUSH
47384: LD_INT 19
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: LIST
47391: PUSH
47392: LD_VAR 0 1
47396: ARRAY
47397: ST_TO_ADDR
47398: GO 47724
47400: LD_INT 18
47402: DOUBLE
47403: EQUAL
47404: IFTRUE 47408
47406: GO 47419
47408: POP
// bc_type := b_ext_radar ; 19 :
47409: LD_ADDR_OWVAR 42
47413: PUSH
47414: LD_INT 20
47416: ST_TO_ADDR
47417: GO 47724
47419: LD_INT 19
47421: DOUBLE
47422: EQUAL
47423: IFTRUE 47427
47425: GO 47438
47427: POP
// bc_type := b_ext_radio ; 20 :
47428: LD_ADDR_OWVAR 42
47432: PUSH
47433: LD_INT 22
47435: ST_TO_ADDR
47436: GO 47724
47438: LD_INT 20
47440: DOUBLE
47441: EQUAL
47442: IFTRUE 47446
47444: GO 47457
47446: POP
// bc_type := b_ext_siberium ; 21 :
47447: LD_ADDR_OWVAR 42
47451: PUSH
47452: LD_INT 21
47454: ST_TO_ADDR
47455: GO 47724
47457: LD_INT 21
47459: DOUBLE
47460: EQUAL
47461: IFTRUE 47465
47463: GO 47476
47465: POP
// bc_type := b_ext_computer ; 22 :
47466: LD_ADDR_OWVAR 42
47470: PUSH
47471: LD_INT 24
47473: ST_TO_ADDR
47474: GO 47724
47476: LD_INT 22
47478: DOUBLE
47479: EQUAL
47480: IFTRUE 47484
47482: GO 47495
47484: POP
// bc_type := b_ext_track ; 23 :
47485: LD_ADDR_OWVAR 42
47489: PUSH
47490: LD_INT 16
47492: ST_TO_ADDR
47493: GO 47724
47495: LD_INT 23
47497: DOUBLE
47498: EQUAL
47499: IFTRUE 47503
47501: GO 47514
47503: POP
// bc_type := b_ext_laser ; 24 :
47504: LD_ADDR_OWVAR 42
47508: PUSH
47509: LD_INT 25
47511: ST_TO_ADDR
47512: GO 47724
47514: LD_INT 24
47516: DOUBLE
47517: EQUAL
47518: IFTRUE 47522
47520: GO 47533
47522: POP
// bc_type := b_control_tower ; 25 :
47523: LD_ADDR_OWVAR 42
47527: PUSH
47528: LD_INT 36
47530: ST_TO_ADDR
47531: GO 47724
47533: LD_INT 25
47535: DOUBLE
47536: EQUAL
47537: IFTRUE 47541
47539: GO 47552
47541: POP
// bc_type := b_breastwork ; 26 :
47542: LD_ADDR_OWVAR 42
47546: PUSH
47547: LD_INT 31
47549: ST_TO_ADDR
47550: GO 47724
47552: LD_INT 26
47554: DOUBLE
47555: EQUAL
47556: IFTRUE 47560
47558: GO 47571
47560: POP
// bc_type := b_bunker ; 27 :
47561: LD_ADDR_OWVAR 42
47565: PUSH
47566: LD_INT 32
47568: ST_TO_ADDR
47569: GO 47724
47571: LD_INT 27
47573: DOUBLE
47574: EQUAL
47575: IFTRUE 47579
47577: GO 47590
47579: POP
// bc_type := b_turret ; 28 :
47580: LD_ADDR_OWVAR 42
47584: PUSH
47585: LD_INT 33
47587: ST_TO_ADDR
47588: GO 47724
47590: LD_INT 28
47592: DOUBLE
47593: EQUAL
47594: IFTRUE 47598
47596: GO 47609
47598: POP
// bc_type := b_armoury ; 29 :
47599: LD_ADDR_OWVAR 42
47603: PUSH
47604: LD_INT 4
47606: ST_TO_ADDR
47607: GO 47724
47609: LD_INT 29
47611: DOUBLE
47612: EQUAL
47613: IFTRUE 47617
47615: GO 47628
47617: POP
// bc_type := b_barracks ; 30 :
47618: LD_ADDR_OWVAR 42
47622: PUSH
47623: LD_INT 5
47625: ST_TO_ADDR
47626: GO 47724
47628: LD_INT 30
47630: DOUBLE
47631: EQUAL
47632: IFTRUE 47636
47634: GO 47647
47636: POP
// bc_type := b_solar_power ; 31 :
47637: LD_ADDR_OWVAR 42
47641: PUSH
47642: LD_INT 27
47644: ST_TO_ADDR
47645: GO 47724
47647: LD_INT 31
47649: DOUBLE
47650: EQUAL
47651: IFTRUE 47655
47653: GO 47666
47655: POP
// bc_type := b_oil_power ; 32 :
47656: LD_ADDR_OWVAR 42
47660: PUSH
47661: LD_INT 26
47663: ST_TO_ADDR
47664: GO 47724
47666: LD_INT 32
47668: DOUBLE
47669: EQUAL
47670: IFTRUE 47674
47672: GO 47685
47674: POP
// bc_type := b_siberite_power ; 33 :
47675: LD_ADDR_OWVAR 42
47679: PUSH
47680: LD_INT 28
47682: ST_TO_ADDR
47683: GO 47724
47685: LD_INT 33
47687: DOUBLE
47688: EQUAL
47689: IFTRUE 47693
47691: GO 47704
47693: POP
// bc_type := b_oil_mine ; 34 :
47694: LD_ADDR_OWVAR 42
47698: PUSH
47699: LD_INT 29
47701: ST_TO_ADDR
47702: GO 47724
47704: LD_INT 34
47706: DOUBLE
47707: EQUAL
47708: IFTRUE 47712
47710: GO 47723
47712: POP
// bc_type := b_siberite_mine ; end ;
47713: LD_ADDR_OWVAR 42
47717: PUSH
47718: LD_INT 30
47720: ST_TO_ADDR
47721: GO 47724
47723: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
47724: LD_ADDR_VAR 0 8
47728: PUSH
47729: LD_VAR 0 5
47733: PPUSH
47734: LD_VAR 0 6
47738: PPUSH
47739: LD_VAR 0 3
47743: PPUSH
47744: CALL_OW 47
47748: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
47749: LD_OWVAR 42
47753: PUSH
47754: LD_INT 32
47756: PUSH
47757: LD_INT 33
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: IN
47764: IFFALSE 47780
// PlaceWeaponTurret ( b , weapon ) ;
47766: LD_VAR 0 8
47770: PPUSH
47771: LD_VAR 0 4
47775: PPUSH
47776: CALL_OW 431
// end ;
47780: LD_VAR 0 7
47784: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
47785: LD_INT 0
47787: PPUSH
47788: PPUSH
47789: PPUSH
47790: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47791: LD_ADDR_VAR 0 4
47795: PUSH
47796: LD_INT 22
47798: PUSH
47799: LD_OWVAR 2
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 2
47810: PUSH
47811: LD_INT 30
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 30
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: LIST
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PPUSH
47840: CALL_OW 69
47844: ST_TO_ADDR
// if not tmp then
47845: LD_VAR 0 4
47849: NOT
47850: IFFALSE 47854
// exit ;
47852: GO 47913
// for i in tmp do
47854: LD_ADDR_VAR 0 2
47858: PUSH
47859: LD_VAR 0 4
47863: PUSH
47864: FOR_IN
47865: IFFALSE 47911
// for j = 1 to 3 do
47867: LD_ADDR_VAR 0 3
47871: PUSH
47872: DOUBLE
47873: LD_INT 1
47875: DEC
47876: ST_TO_ADDR
47877: LD_INT 3
47879: PUSH
47880: FOR_TO
47881: IFFALSE 47907
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
47883: LD_VAR 0 2
47887: PPUSH
47888: CALL_OW 274
47892: PPUSH
47893: LD_VAR 0 3
47897: PPUSH
47898: LD_INT 99999
47900: PPUSH
47901: CALL_OW 277
47905: GO 47880
47907: POP
47908: POP
47909: GO 47864
47911: POP
47912: POP
// end ;
47913: LD_VAR 0 1
47917: RET
// export function hHackSetLevel10 ; var i , j ; begin
47918: LD_INT 0
47920: PPUSH
47921: PPUSH
47922: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
47923: LD_ADDR_VAR 0 2
47927: PUSH
47928: LD_INT 21
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PPUSH
47938: CALL_OW 69
47942: PUSH
47943: FOR_IN
47944: IFFALSE 47996
// if IsSelected ( i ) then
47946: LD_VAR 0 2
47950: PPUSH
47951: CALL_OW 306
47955: IFFALSE 47994
// begin for j := 1 to 4 do
47957: LD_ADDR_VAR 0 3
47961: PUSH
47962: DOUBLE
47963: LD_INT 1
47965: DEC
47966: ST_TO_ADDR
47967: LD_INT 4
47969: PUSH
47970: FOR_TO
47971: IFFALSE 47992
// SetSkill ( i , j , 10 ) ;
47973: LD_VAR 0 2
47977: PPUSH
47978: LD_VAR 0 3
47982: PPUSH
47983: LD_INT 10
47985: PPUSH
47986: CALL_OW 237
47990: GO 47970
47992: POP
47993: POP
// end ;
47994: GO 47943
47996: POP
47997: POP
// end ;
47998: LD_VAR 0 1
48002: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
48003: LD_INT 0
48005: PPUSH
48006: PPUSH
48007: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
48008: LD_ADDR_VAR 0 2
48012: PUSH
48013: LD_INT 22
48015: PUSH
48016: LD_OWVAR 2
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 21
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PPUSH
48039: CALL_OW 69
48043: PUSH
48044: FOR_IN
48045: IFFALSE 48086
// begin for j := 1 to 4 do
48047: LD_ADDR_VAR 0 3
48051: PUSH
48052: DOUBLE
48053: LD_INT 1
48055: DEC
48056: ST_TO_ADDR
48057: LD_INT 4
48059: PUSH
48060: FOR_TO
48061: IFFALSE 48082
// SetSkill ( i , j , 10 ) ;
48063: LD_VAR 0 2
48067: PPUSH
48068: LD_VAR 0 3
48072: PPUSH
48073: LD_INT 10
48075: PPUSH
48076: CALL_OW 237
48080: GO 48060
48082: POP
48083: POP
// end ;
48084: GO 48044
48086: POP
48087: POP
// end ;
48088: LD_VAR 0 1
48092: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
48093: LD_INT 0
48095: PPUSH
// uc_side := your_side ;
48096: LD_ADDR_OWVAR 20
48100: PUSH
48101: LD_OWVAR 2
48105: ST_TO_ADDR
// uc_nation := nation ;
48106: LD_ADDR_OWVAR 21
48110: PUSH
48111: LD_VAR 0 1
48115: ST_TO_ADDR
// InitHc ;
48116: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
48120: LD_INT 0
48122: PPUSH
48123: LD_VAR 0 2
48127: PPUSH
48128: LD_VAR 0 3
48132: PPUSH
48133: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
48137: LD_VAR 0 4
48141: PPUSH
48142: LD_VAR 0 5
48146: PPUSH
48147: CALL_OW 428
48151: PUSH
48152: LD_INT 0
48154: EQUAL
48155: IFFALSE 48179
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
48157: CALL_OW 44
48161: PPUSH
48162: LD_VAR 0 4
48166: PPUSH
48167: LD_VAR 0 5
48171: PPUSH
48172: LD_INT 1
48174: PPUSH
48175: CALL_OW 48
// end ;
48179: LD_VAR 0 6
48183: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
48184: LD_INT 0
48186: PPUSH
48187: PPUSH
// uc_side := your_side ;
48188: LD_ADDR_OWVAR 20
48192: PUSH
48193: LD_OWVAR 2
48197: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
48198: LD_VAR 0 1
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: LD_INT 2
48208: PUSH
48209: LD_INT 3
48211: PUSH
48212: LD_INT 4
48214: PUSH
48215: LD_INT 5
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: IN
48225: IFFALSE 48237
// uc_nation := nation_american else
48227: LD_ADDR_OWVAR 21
48231: PUSH
48232: LD_INT 1
48234: ST_TO_ADDR
48235: GO 48280
// if chassis in [ 11 , 12 , 13 , 14 ] then
48237: LD_VAR 0 1
48241: PUSH
48242: LD_INT 11
48244: PUSH
48245: LD_INT 12
48247: PUSH
48248: LD_INT 13
48250: PUSH
48251: LD_INT 14
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: IN
48260: IFFALSE 48272
// uc_nation := nation_arabian else
48262: LD_ADDR_OWVAR 21
48266: PUSH
48267: LD_INT 2
48269: ST_TO_ADDR
48270: GO 48280
// uc_nation := nation_russian ;
48272: LD_ADDR_OWVAR 21
48276: PUSH
48277: LD_INT 3
48279: ST_TO_ADDR
// vc_chassis := chassis ;
48280: LD_ADDR_OWVAR 37
48284: PUSH
48285: LD_VAR 0 1
48289: ST_TO_ADDR
// vc_engine := engine ;
48290: LD_ADDR_OWVAR 39
48294: PUSH
48295: LD_VAR 0 2
48299: ST_TO_ADDR
// vc_control := control ;
48300: LD_ADDR_OWVAR 38
48304: PUSH
48305: LD_VAR 0 3
48309: ST_TO_ADDR
// vc_weapon := weapon ;
48310: LD_ADDR_OWVAR 40
48314: PUSH
48315: LD_VAR 0 4
48319: ST_TO_ADDR
// un := CreateVehicle ;
48320: LD_ADDR_VAR 0 8
48324: PUSH
48325: CALL_OW 45
48329: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
48330: LD_VAR 0 8
48334: PPUSH
48335: LD_INT 0
48337: PPUSH
48338: LD_INT 5
48340: PPUSH
48341: CALL_OW 12
48345: PPUSH
48346: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
48350: LD_VAR 0 8
48354: PPUSH
48355: LD_VAR 0 5
48359: PPUSH
48360: LD_VAR 0 6
48364: PPUSH
48365: LD_INT 1
48367: PPUSH
48368: CALL_OW 48
// end ;
48372: LD_VAR 0 7
48376: RET
// export hInvincible ; every 1 do
48377: GO 48379
48379: DISABLE
// hInvincible := [ ] ;
48380: LD_ADDR_EXP 144
48384: PUSH
48385: EMPTY
48386: ST_TO_ADDR
48387: END
// every 10 do var i ;
48388: GO 48390
48390: DISABLE
48391: LD_INT 0
48393: PPUSH
// begin enable ;
48394: ENABLE
// if not hInvincible then
48395: LD_EXP 144
48399: NOT
48400: IFFALSE 48404
// exit ;
48402: GO 48448
// for i in hInvincible do
48404: LD_ADDR_VAR 0 1
48408: PUSH
48409: LD_EXP 144
48413: PUSH
48414: FOR_IN
48415: IFFALSE 48446
// if GetLives ( i ) < 1000 then
48417: LD_VAR 0 1
48421: PPUSH
48422: CALL_OW 256
48426: PUSH
48427: LD_INT 1000
48429: LESS
48430: IFFALSE 48444
// SetLives ( i , 1000 ) ;
48432: LD_VAR 0 1
48436: PPUSH
48437: LD_INT 1000
48439: PPUSH
48440: CALL_OW 234
48444: GO 48414
48446: POP
48447: POP
// end ;
48448: PPOPN 1
48450: END
// export function hHackInvincible ; var i ; begin
48451: LD_INT 0
48453: PPUSH
48454: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
48455: LD_ADDR_VAR 0 2
48459: PUSH
48460: LD_INT 2
48462: PUSH
48463: LD_INT 21
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 21
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: LIST
48487: PPUSH
48488: CALL_OW 69
48492: PUSH
48493: FOR_IN
48494: IFFALSE 48555
// if IsSelected ( i ) then
48496: LD_VAR 0 2
48500: PPUSH
48501: CALL_OW 306
48505: IFFALSE 48553
// begin if i in hInvincible then
48507: LD_VAR 0 2
48511: PUSH
48512: LD_EXP 144
48516: IN
48517: IFFALSE 48537
// hInvincible := hInvincible diff i else
48519: LD_ADDR_EXP 144
48523: PUSH
48524: LD_EXP 144
48528: PUSH
48529: LD_VAR 0 2
48533: DIFF
48534: ST_TO_ADDR
48535: GO 48553
// hInvincible := hInvincible union i ;
48537: LD_ADDR_EXP 144
48541: PUSH
48542: LD_EXP 144
48546: PUSH
48547: LD_VAR 0 2
48551: UNION
48552: ST_TO_ADDR
// end ;
48553: GO 48493
48555: POP
48556: POP
// end ;
48557: LD_VAR 0 1
48561: RET
// export function hHackInvisible ; var i , j ; begin
48562: LD_INT 0
48564: PPUSH
48565: PPUSH
48566: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
48567: LD_ADDR_VAR 0 2
48571: PUSH
48572: LD_INT 21
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PPUSH
48582: CALL_OW 69
48586: PUSH
48587: FOR_IN
48588: IFFALSE 48612
// if IsSelected ( i ) then
48590: LD_VAR 0 2
48594: PPUSH
48595: CALL_OW 306
48599: IFFALSE 48610
// ComForceInvisible ( i ) ;
48601: LD_VAR 0 2
48605: PPUSH
48606: CALL_OW 496
48610: GO 48587
48612: POP
48613: POP
// end ;
48614: LD_VAR 0 1
48618: RET
// export function hHackChangeYourSide ; begin
48619: LD_INT 0
48621: PPUSH
// if your_side = 8 then
48622: LD_OWVAR 2
48626: PUSH
48627: LD_INT 8
48629: EQUAL
48630: IFFALSE 48642
// your_side := 0 else
48632: LD_ADDR_OWVAR 2
48636: PUSH
48637: LD_INT 0
48639: ST_TO_ADDR
48640: GO 48656
// your_side := your_side + 1 ;
48642: LD_ADDR_OWVAR 2
48646: PUSH
48647: LD_OWVAR 2
48651: PUSH
48652: LD_INT 1
48654: PLUS
48655: ST_TO_ADDR
// end ;
48656: LD_VAR 0 1
48660: RET
// export function hHackChangeUnitSide ; var i , j ; begin
48661: LD_INT 0
48663: PPUSH
48664: PPUSH
48665: PPUSH
// for i in all_units do
48666: LD_ADDR_VAR 0 2
48670: PUSH
48671: LD_OWVAR 3
48675: PUSH
48676: FOR_IN
48677: IFFALSE 48755
// if IsSelected ( i ) then
48679: LD_VAR 0 2
48683: PPUSH
48684: CALL_OW 306
48688: IFFALSE 48753
// begin j := GetSide ( i ) ;
48690: LD_ADDR_VAR 0 3
48694: PUSH
48695: LD_VAR 0 2
48699: PPUSH
48700: CALL_OW 255
48704: ST_TO_ADDR
// if j = 8 then
48705: LD_VAR 0 3
48709: PUSH
48710: LD_INT 8
48712: EQUAL
48713: IFFALSE 48725
// j := 0 else
48715: LD_ADDR_VAR 0 3
48719: PUSH
48720: LD_INT 0
48722: ST_TO_ADDR
48723: GO 48739
// j := j + 1 ;
48725: LD_ADDR_VAR 0 3
48729: PUSH
48730: LD_VAR 0 3
48734: PUSH
48735: LD_INT 1
48737: PLUS
48738: ST_TO_ADDR
// SetSide ( i , j ) ;
48739: LD_VAR 0 2
48743: PPUSH
48744: LD_VAR 0 3
48748: PPUSH
48749: CALL_OW 235
// end ;
48753: GO 48676
48755: POP
48756: POP
// end ;
48757: LD_VAR 0 1
48761: RET
// export function hHackFog ; begin
48762: LD_INT 0
48764: PPUSH
// FogOff ( true ) ;
48765: LD_INT 1
48767: PPUSH
48768: CALL_OW 344
// end ;
48772: LD_VAR 0 1
48776: RET
// export function hHackTeleport ( unit , x , y ) ; begin
48777: LD_INT 0
48779: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
48780: LD_VAR 0 1
48784: PPUSH
48785: LD_VAR 0 2
48789: PPUSH
48790: LD_VAR 0 3
48794: PPUSH
48795: LD_INT 1
48797: PPUSH
48798: LD_INT 1
48800: PPUSH
48801: CALL_OW 483
// CenterOnXY ( x , y ) ;
48805: LD_VAR 0 2
48809: PPUSH
48810: LD_VAR 0 3
48814: PPUSH
48815: CALL_OW 84
// end ;
48819: LD_VAR 0 4
48823: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
48824: LD_INT 0
48826: PPUSH
48827: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
48828: LD_VAR 0 1
48832: NOT
48833: IFTRUE 48852
48835: PUSH
48836: LD_VAR 0 2
48840: PPUSH
48841: LD_VAR 0 3
48845: PPUSH
48846: CALL_OW 488
48850: NOT
48851: OR
48852: IFTRUE 48887
48854: PUSH
48855: LD_VAR 0 1
48859: PPUSH
48860: CALL_OW 266
48864: PUSH
48865: LD_INT 3
48867: NONEQUAL
48868: IFFALSE 48886
48870: PUSH
48871: LD_VAR 0 1
48875: PPUSH
48876: CALL_OW 247
48880: PUSH
48881: LD_INT 1
48883: EQUAL
48884: NOT
48885: AND
48886: OR
48887: IFFALSE 48891
// exit ;
48889: GO 49173
// if GetType ( factory ) = unit_human then
48891: LD_VAR 0 1
48895: PPUSH
48896: CALL_OW 247
48900: PUSH
48901: LD_INT 1
48903: EQUAL
48904: IFFALSE 48921
// factory := IsInUnit ( factory ) ;
48906: LD_ADDR_VAR 0 1
48910: PUSH
48911: LD_VAR 0 1
48915: PPUSH
48916: CALL_OW 310
48920: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
48921: LD_VAR 0 1
48925: PPUSH
48926: CALL_OW 266
48930: PUSH
48931: LD_INT 3
48933: NONEQUAL
48934: IFFALSE 48938
// exit ;
48936: GO 49173
// for i := 1 to Count ( factoryWaypoints ) do
48938: LD_ADDR_VAR 0 5
48942: PUSH
48943: DOUBLE
48944: LD_INT 1
48946: DEC
48947: ST_TO_ADDR
48948: LD_EXP 145
48952: PPUSH
48953: CALL 57905 0 1
48957: PUSH
48958: FOR_TO
48959: IFFALSE 49121
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
48961: LD_VAR 0 2
48965: PPUSH
48966: LD_VAR 0 3
48970: PPUSH
48971: CALL_OW 428
48975: PUSH
48976: LD_EXP 145
48980: PUSH
48981: LD_VAR 0 5
48985: ARRAY
48986: PUSH
48987: LD_INT 2
48989: ARRAY
48990: EQUAL
48991: IFFALSE 49023
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
48993: LD_ADDR_EXP 145
48997: PUSH
48998: LD_EXP 145
49002: PPUSH
49003: LD_VAR 0 5
49007: PPUSH
49008: CALL_OW 3
49012: ST_TO_ADDR
// UpdateFactoryWaypoints ;
49013: CALL 49178 0 0
// exit ;
49017: POP
49018: POP
49019: GO 49173
// end else
49021: GO 49119
// if factory = factoryWaypoints [ i ] [ 2 ] then
49023: LD_VAR 0 1
49027: PUSH
49028: LD_EXP 145
49032: PUSH
49033: LD_VAR 0 5
49037: ARRAY
49038: PUSH
49039: LD_INT 2
49041: ARRAY
49042: EQUAL
49043: IFFALSE 49119
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
49045: LD_ADDR_EXP 145
49049: PUSH
49050: LD_EXP 145
49054: PPUSH
49055: LD_VAR 0 5
49059: PPUSH
49060: CALL_OW 3
49064: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
49065: LD_ADDR_EXP 145
49069: PUSH
49070: LD_EXP 145
49074: PPUSH
49075: LD_VAR 0 1
49079: PPUSH
49080: CALL_OW 255
49084: PUSH
49085: LD_VAR 0 1
49089: PUSH
49090: LD_VAR 0 2
49094: PUSH
49095: LD_VAR 0 3
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: PPUSH
49106: CALL 93837 0 2
49110: ST_TO_ADDR
// UpdateFactoryWaypoints ;
49111: CALL 49178 0 0
// exit ;
49115: POP
49116: POP
49117: GO 49173
// end ; end ;
49119: GO 48958
49121: POP
49122: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
49123: LD_ADDR_EXP 145
49127: PUSH
49128: LD_EXP 145
49132: PPUSH
49133: LD_VAR 0 1
49137: PPUSH
49138: CALL_OW 255
49142: PUSH
49143: LD_VAR 0 1
49147: PUSH
49148: LD_VAR 0 2
49152: PUSH
49153: LD_VAR 0 3
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: PPUSH
49164: CALL 93837 0 2
49168: ST_TO_ADDR
// UpdateFactoryWaypoints ;
49169: CALL 49178 0 0
// end ;
49173: LD_VAR 0 4
49177: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
49178: LD_INT 0
49180: PPUSH
49181: PPUSH
49182: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
49183: LD_STRING resetFactoryWaypoint();
49185: PPUSH
49186: CALL_OW 559
// if factoryWaypoints then
49190: LD_EXP 145
49194: IFFALSE 49315
// begin list := factoryWaypoints ;
49196: LD_ADDR_VAR 0 3
49200: PUSH
49201: LD_EXP 145
49205: ST_TO_ADDR
// for i := 1 to list do
49206: LD_ADDR_VAR 0 2
49210: PUSH
49211: DOUBLE
49212: LD_INT 1
49214: DEC
49215: ST_TO_ADDR
49216: LD_VAR 0 3
49220: PUSH
49221: FOR_TO
49222: IFFALSE 49313
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
49224: LD_STRING setFactoryWaypointXY(
49226: PUSH
49227: LD_VAR 0 3
49231: PUSH
49232: LD_VAR 0 2
49236: ARRAY
49237: PUSH
49238: LD_INT 1
49240: ARRAY
49241: STR
49242: PUSH
49243: LD_STRING ,
49245: STR
49246: PUSH
49247: LD_VAR 0 3
49251: PUSH
49252: LD_VAR 0 2
49256: ARRAY
49257: PUSH
49258: LD_INT 2
49260: ARRAY
49261: STR
49262: PUSH
49263: LD_STRING ,
49265: STR
49266: PUSH
49267: LD_VAR 0 3
49271: PUSH
49272: LD_VAR 0 2
49276: ARRAY
49277: PUSH
49278: LD_INT 3
49280: ARRAY
49281: STR
49282: PUSH
49283: LD_STRING ,
49285: STR
49286: PUSH
49287: LD_VAR 0 3
49291: PUSH
49292: LD_VAR 0 2
49296: ARRAY
49297: PUSH
49298: LD_INT 4
49300: ARRAY
49301: STR
49302: PUSH
49303: LD_STRING )
49305: STR
49306: PPUSH
49307: CALL_OW 559
49311: GO 49221
49313: POP
49314: POP
// end ; end ;
49315: LD_VAR 0 1
49319: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
49320: LD_INT 0
49322: PPUSH
// if HexInfo ( x , y ) = warehouse then
49323: LD_VAR 0 2
49327: PPUSH
49328: LD_VAR 0 3
49332: PPUSH
49333: CALL_OW 428
49337: PUSH
49338: LD_VAR 0 1
49342: EQUAL
49343: IFFALSE 49370
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
49345: LD_ADDR_EXP 147
49349: PUSH
49350: LD_EXP 147
49354: PPUSH
49355: LD_VAR 0 1
49359: PPUSH
49360: LD_INT 0
49362: PPUSH
49363: CALL_OW 1
49367: ST_TO_ADDR
49368: GO 49421
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
49370: LD_ADDR_EXP 147
49374: PUSH
49375: LD_EXP 147
49379: PPUSH
49380: LD_VAR 0 1
49384: PPUSH
49385: LD_VAR 0 1
49389: PPUSH
49390: CALL_OW 255
49394: PUSH
49395: LD_VAR 0 1
49399: PUSH
49400: LD_VAR 0 2
49404: PUSH
49405: LD_VAR 0 3
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: PPUSH
49416: CALL_OW 1
49420: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
49421: CALL 49430 0 0
// end ;
49425: LD_VAR 0 4
49429: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
49430: LD_INT 0
49432: PPUSH
49433: PPUSH
49434: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
49435: LD_STRING resetWarehouseGatheringPoints();
49437: PPUSH
49438: CALL_OW 559
// if warehouseGatheringPoints then
49442: LD_EXP 147
49446: IFFALSE 49572
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
49448: LD_ADDR_VAR 0 3
49452: PUSH
49453: LD_EXP 147
49457: PPUSH
49458: CALL 97771 0 1
49462: ST_TO_ADDR
// for i := 1 to list do
49463: LD_ADDR_VAR 0 2
49467: PUSH
49468: DOUBLE
49469: LD_INT 1
49471: DEC
49472: ST_TO_ADDR
49473: LD_VAR 0 3
49477: PUSH
49478: FOR_TO
49479: IFFALSE 49570
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
49481: LD_STRING setWarehouseGatheringPointXY(
49483: PUSH
49484: LD_VAR 0 3
49488: PUSH
49489: LD_VAR 0 2
49493: ARRAY
49494: PUSH
49495: LD_INT 1
49497: ARRAY
49498: STR
49499: PUSH
49500: LD_STRING ,
49502: STR
49503: PUSH
49504: LD_VAR 0 3
49508: PUSH
49509: LD_VAR 0 2
49513: ARRAY
49514: PUSH
49515: LD_INT 2
49517: ARRAY
49518: STR
49519: PUSH
49520: LD_STRING ,
49522: STR
49523: PUSH
49524: LD_VAR 0 3
49528: PUSH
49529: LD_VAR 0 2
49533: ARRAY
49534: PUSH
49535: LD_INT 3
49537: ARRAY
49538: STR
49539: PUSH
49540: LD_STRING ,
49542: STR
49543: PUSH
49544: LD_VAR 0 3
49548: PUSH
49549: LD_VAR 0 2
49553: ARRAY
49554: PUSH
49555: LD_INT 4
49557: ARRAY
49558: STR
49559: PUSH
49560: LD_STRING )
49562: STR
49563: PPUSH
49564: CALL_OW 559
49568: GO 49478
49570: POP
49571: POP
// end ; end ;
49572: LD_VAR 0 1
49576: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
49577: LD_EXP 147
49581: IFFALSE 50276
49583: GO 49585
49585: DISABLE
49586: LD_INT 0
49588: PPUSH
49589: PPUSH
49590: PPUSH
49591: PPUSH
49592: PPUSH
49593: PPUSH
49594: PPUSH
49595: PPUSH
49596: PPUSH
// begin enable ;
49597: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
49598: LD_ADDR_VAR 0 3
49602: PUSH
49603: LD_EXP 147
49607: PPUSH
49608: CALL 97771 0 1
49612: ST_TO_ADDR
// if not list then
49613: LD_VAR 0 3
49617: NOT
49618: IFFALSE 49622
// exit ;
49620: GO 50276
// for i := 1 to list do
49622: LD_ADDR_VAR 0 1
49626: PUSH
49627: DOUBLE
49628: LD_INT 1
49630: DEC
49631: ST_TO_ADDR
49632: LD_VAR 0 3
49636: PUSH
49637: FOR_TO
49638: IFFALSE 50274
// begin depot := list [ i ] [ 2 ] ;
49640: LD_ADDR_VAR 0 8
49644: PUSH
49645: LD_VAR 0 3
49649: PUSH
49650: LD_VAR 0 1
49654: ARRAY
49655: PUSH
49656: LD_INT 2
49658: ARRAY
49659: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
49660: LD_ADDR_VAR 0 5
49664: PUSH
49665: LD_VAR 0 3
49669: PUSH
49670: LD_VAR 0 1
49674: ARRAY
49675: PUSH
49676: LD_INT 1
49678: ARRAY
49679: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
49680: LD_VAR 0 8
49684: PPUSH
49685: CALL_OW 301
49689: IFTRUE 49708
49691: PUSH
49692: LD_VAR 0 5
49696: PUSH
49697: LD_VAR 0 8
49701: PPUSH
49702: CALL_OW 255
49706: NONEQUAL
49707: OR
49708: IFFALSE 49737
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
49710: LD_ADDR_EXP 147
49714: PUSH
49715: LD_EXP 147
49719: PPUSH
49720: LD_VAR 0 8
49724: PPUSH
49725: LD_INT 0
49727: PPUSH
49728: CALL_OW 1
49732: ST_TO_ADDR
// exit ;
49733: POP
49734: POP
49735: GO 50276
// end ; x := list [ i ] [ 3 ] ;
49737: LD_ADDR_VAR 0 6
49741: PUSH
49742: LD_VAR 0 3
49746: PUSH
49747: LD_VAR 0 1
49751: ARRAY
49752: PUSH
49753: LD_INT 3
49755: ARRAY
49756: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
49757: LD_ADDR_VAR 0 7
49761: PUSH
49762: LD_VAR 0 3
49766: PUSH
49767: LD_VAR 0 1
49771: ARRAY
49772: PUSH
49773: LD_INT 4
49775: ARRAY
49776: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
49777: LD_ADDR_VAR 0 9
49781: PUSH
49782: LD_VAR 0 6
49786: PPUSH
49787: LD_VAR 0 7
49791: PPUSH
49792: LD_INT 16
49794: PPUSH
49795: CALL 96345 0 3
49799: ST_TO_ADDR
// if not cratesNearbyPoint then
49800: LD_VAR 0 9
49804: NOT
49805: IFFALSE 49811
// exit ;
49807: POP
49808: POP
49809: GO 50276
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
49811: LD_ADDR_VAR 0 4
49815: PUSH
49816: LD_INT 22
49818: PUSH
49819: LD_VAR 0 5
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 3
49830: PUSH
49831: LD_INT 60
49833: PUSH
49834: EMPTY
49835: LIST
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 91
49843: PUSH
49844: LD_VAR 0 8
49848: PUSH
49849: LD_INT 6
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 2
49859: PUSH
49860: LD_INT 25
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 25
49872: PUSH
49873: LD_INT 16
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: LIST
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: PPUSH
49891: CALL_OW 69
49895: PUSH
49896: LD_VAR 0 8
49900: PPUSH
49901: CALL_OW 313
49905: PPUSH
49906: LD_INT 3
49908: PUSH
49909: LD_INT 60
49911: PUSH
49912: EMPTY
49913: LIST
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 2
49921: PUSH
49922: LD_INT 25
49924: PUSH
49925: LD_INT 2
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 25
49934: PUSH
49935: LD_INT 16
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: LIST
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PPUSH
49951: CALL_OW 72
49955: UNION
49956: ST_TO_ADDR
// if tmp then
49957: LD_VAR 0 4
49961: IFFALSE 50041
// begin tmp := ShrinkArray ( tmp , 3 ) ;
49963: LD_ADDR_VAR 0 4
49967: PUSH
49968: LD_VAR 0 4
49972: PPUSH
49973: LD_INT 3
49975: PPUSH
49976: CALL 94152 0 2
49980: ST_TO_ADDR
// for j in tmp do
49981: LD_ADDR_VAR 0 2
49985: PUSH
49986: LD_VAR 0 4
49990: PUSH
49991: FOR_IN
49992: IFFALSE 50035
// begin if IsInUnit ( j ) then
49994: LD_VAR 0 2
49998: PPUSH
49999: CALL_OW 310
50003: IFFALSE 50014
// ComExit ( j ) ;
50005: LD_VAR 0 2
50009: PPUSH
50010: CALL 94235 0 1
// AddComCollect ( j , x , y ) ;
50014: LD_VAR 0 2
50018: PPUSH
50019: LD_VAR 0 6
50023: PPUSH
50024: LD_VAR 0 7
50028: PPUSH
50029: CALL_OW 177
// end ;
50033: GO 49991
50035: POP
50036: POP
// exit ;
50037: POP
50038: POP
50039: GO 50276
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
50041: LD_ADDR_VAR 0 4
50045: PUSH
50046: LD_INT 22
50048: PUSH
50049: LD_VAR 0 5
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 91
50060: PUSH
50061: LD_VAR 0 8
50065: PUSH
50066: LD_INT 8
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 2
50076: PUSH
50077: LD_INT 34
50079: PUSH
50080: LD_INT 12
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 34
50089: PUSH
50090: LD_INT 51
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 34
50099: PUSH
50100: LD_INT 32
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 34
50109: PUSH
50110: LD_INT 89
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: LIST
50128: PPUSH
50129: CALL_OW 69
50133: ST_TO_ADDR
// if tmp then
50134: LD_VAR 0 4
50138: IFFALSE 50272
// begin for j in tmp do
50140: LD_ADDR_VAR 0 2
50144: PUSH
50145: LD_VAR 0 4
50149: PUSH
50150: FOR_IN
50151: IFFALSE 50270
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
50153: LD_VAR 0 2
50157: PPUSH
50158: CALL_OW 262
50162: PUSH
50163: LD_INT 3
50165: EQUAL
50166: IFTRUE 50183
50168: PUSH
50169: LD_VAR 0 2
50173: PPUSH
50174: CALL_OW 261
50178: PUSH
50179: LD_INT 20
50181: GREATER
50182: OR
50183: IFFALSE 50197
50185: PUSH
50186: LD_VAR 0 2
50190: PPUSH
50191: CALL_OW 314
50195: NOT
50196: AND
50197: IFFALSE 50227
50199: PUSH
50200: LD_VAR 0 2
50204: PPUSH
50205: CALL_OW 263
50209: PUSH
50210: LD_INT 1
50212: NONEQUAL
50213: IFTRUE 50226
50215: PUSH
50216: LD_VAR 0 2
50220: PPUSH
50221: CALL_OW 311
50225: OR
50226: AND
50227: IFFALSE 50268
// begin ComCollect ( j , x , y ) ;
50229: LD_VAR 0 2
50233: PPUSH
50234: LD_VAR 0 6
50238: PPUSH
50239: LD_VAR 0 7
50243: PPUSH
50244: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
50248: LD_VAR 0 2
50252: PPUSH
50253: LD_VAR 0 8
50257: PPUSH
50258: CALL_OW 172
// exit ;
50262: POP
50263: POP
50264: POP
50265: POP
50266: GO 50276
// end ;
50268: GO 50150
50270: POP
50271: POP
// end ; end ;
50272: GO 49637
50274: POP
50275: POP
// end ; end_of_file
50276: PPOPN 9
50278: END
// export function SOS_UnitDestroyed ( un ) ; begin
50279: LD_INT 0
50281: PPUSH
// ComRadiation ( un ) ;
50282: LD_VAR 0 1
50286: PPUSH
50287: CALL 51368 0 1
// end ;
50291: LD_VAR 0 2
50295: RET
// export function SOS_UnitKamikazed ( un ) ; begin
50296: LD_INT 0
50298: PPUSH
// ComRadiation ( un ) ;
50299: LD_VAR 0 1
50303: PPUSH
50304: CALL 51368 0 1
// end ;
50308: LD_VAR 0 2
50312: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
50313: LD_INT 0
50315: PPUSH
// end ;
50316: LD_VAR 0 4
50320: RET
// export function SOS_Command ( cmd ) ; begin
50321: LD_INT 0
50323: PPUSH
// end ;
50324: LD_VAR 0 2
50328: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
50329: LD_INT 0
50331: PPUSH
// end ;
50332: LD_VAR 0 6
50336: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
50337: LD_INT 0
50339: PPUSH
50340: PPUSH
50341: PPUSH
50342: PPUSH
// if not vehicle or not factory then
50343: LD_VAR 0 1
50347: NOT
50348: IFTRUE 50357
50350: PUSH
50351: LD_VAR 0 2
50355: NOT
50356: OR
50357: IFFALSE 50361
// exit ;
50359: GO 50943
// if not factoryWaypoints then
50361: LD_EXP 145
50365: NOT
50366: IFFALSE 50370
// exit ;
50368: GO 50943
// for i := 1 to Count ( factoryWaypoints ) do
50370: LD_ADDR_VAR 0 4
50374: PUSH
50375: DOUBLE
50376: LD_INT 1
50378: DEC
50379: ST_TO_ADDR
50380: LD_EXP 145
50384: PPUSH
50385: CALL 57905 0 1
50389: PUSH
50390: FOR_TO
50391: IFFALSE 50941
// if factoryWaypoints [ i ] [ 2 ] = factory then
50393: LD_EXP 145
50397: PUSH
50398: LD_VAR 0 4
50402: ARRAY
50403: PUSH
50404: LD_INT 2
50406: ARRAY
50407: PUSH
50408: LD_VAR 0 2
50412: EQUAL
50413: IFFALSE 50939
// begin if GetControl ( vehicle ) = control_manual then
50415: LD_VAR 0 1
50419: PPUSH
50420: CALL_OW 263
50424: PUSH
50425: LD_INT 1
50427: EQUAL
50428: IFFALSE 50792
// begin driver := IsDrivenBy ( vehicle ) ;
50430: LD_ADDR_VAR 0 5
50434: PUSH
50435: LD_VAR 0 1
50439: PPUSH
50440: CALL_OW 311
50444: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
50445: LD_VAR 0 5
50449: PUSH
50450: LD_EXP 146
50454: IN
50455: IFTRUE 50469
50457: PUSH
50458: LD_VAR 0 1
50462: PUSH
50463: LD_EXP 146
50467: IN
50468: OR
50469: IFFALSE 50475
// exit ;
50471: POP
50472: POP
50473: GO 50943
// if not HasTask ( driver ) then
50475: LD_VAR 0 5
50479: PPUSH
50480: CALL_OW 314
50484: NOT
50485: IFFALSE 50790
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
50487: LD_ADDR_EXP 146
50491: PUSH
50492: LD_EXP 146
50496: PPUSH
50497: LD_VAR 0 5
50501: PPUSH
50502: CALL 93837 0 2
50506: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
50507: LD_ADDR_EXP 146
50511: PUSH
50512: LD_EXP 146
50516: PPUSH
50517: LD_VAR 0 1
50521: PPUSH
50522: CALL 93837 0 2
50526: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50527: LD_ADDR_VAR 0 6
50531: PUSH
50532: LD_EXP 145
50536: PUSH
50537: LD_VAR 0 4
50541: ARRAY
50542: PUSH
50543: LD_INT 3
50545: ARRAY
50546: PPUSH
50547: LD_EXP 145
50551: PUSH
50552: LD_VAR 0 4
50556: ARRAY
50557: PUSH
50558: LD_INT 4
50560: ARRAY
50561: PPUSH
50562: CALL_OW 428
50566: ST_TO_ADDR
// if hex then
50567: LD_VAR 0 6
50571: IFFALSE 50589
// ComMoveUnit ( driver , hex ) else
50573: LD_VAR 0 5
50577: PPUSH
50578: LD_VAR 0 6
50582: PPUSH
50583: CALL_OW 112
50587: GO 50673
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
50589: LD_VAR 0 1
50593: PPUSH
50594: LD_EXP 145
50598: PUSH
50599: LD_VAR 0 4
50603: ARRAY
50604: PUSH
50605: LD_INT 3
50607: ARRAY
50608: PPUSH
50609: LD_EXP 145
50613: PUSH
50614: LD_VAR 0 4
50618: ARRAY
50619: PUSH
50620: LD_INT 4
50622: ARRAY
50623: PPUSH
50624: CALL_OW 297
50628: PUSH
50629: LD_INT 0
50631: GREATER
50632: IFFALSE 50673
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50634: LD_VAR 0 5
50638: PPUSH
50639: LD_EXP 145
50643: PUSH
50644: LD_VAR 0 4
50648: ARRAY
50649: PUSH
50650: LD_INT 3
50652: ARRAY
50653: PPUSH
50654: LD_EXP 145
50658: PUSH
50659: LD_VAR 0 4
50663: ARRAY
50664: PUSH
50665: LD_INT 4
50667: ARRAY
50668: PPUSH
50669: CALL_OW 111
// AddComExitVehicle ( driver ) ;
50673: LD_VAR 0 5
50677: PPUSH
50678: CALL_OW 181
// if Multiplayer then
50682: LD_OWVAR 4
50686: IFFALSE 50735
// begin repeat wait ( 10 ) ;
50688: LD_INT 10
50690: PPUSH
50691: CALL_OW 67
// until not IsInUnit ( driver ) ;
50695: LD_VAR 0 5
50699: PPUSH
50700: CALL_OW 310
50704: NOT
50705: IFFALSE 50688
// if not HasTask ( driver ) then
50707: LD_VAR 0 5
50711: PPUSH
50712: CALL_OW 314
50716: NOT
50717: IFFALSE 50733
// ComEnterUnit ( driver , factory ) ;
50719: LD_VAR 0 5
50723: PPUSH
50724: LD_VAR 0 2
50728: PPUSH
50729: CALL_OW 120
// end else
50733: GO 50749
// AddComEnterUnit ( driver , factory ) ;
50735: LD_VAR 0 5
50739: PPUSH
50740: LD_VAR 0 2
50744: PPUSH
50745: CALL_OW 180
// wait ( 0 0$1 ) ;
50749: LD_INT 35
50751: PPUSH
50752: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
50756: LD_ADDR_EXP 146
50760: PUSH
50761: LD_EXP 146
50765: PUSH
50766: LD_VAR 0 5
50770: DIFF
50771: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
50772: LD_ADDR_EXP 146
50776: PUSH
50777: LD_EXP 146
50781: PUSH
50782: LD_VAR 0 1
50786: DIFF
50787: ST_TO_ADDR
// break ;
50788: GO 50941
// end ; end else
50790: GO 50939
// if GetControl ( vehicle ) = control_remote then
50792: LD_VAR 0 1
50796: PPUSH
50797: CALL_OW 263
50801: PUSH
50802: LD_INT 2
50804: EQUAL
50805: IFFALSE 50891
// begin wait ( 0 0$2 ) ;
50807: LD_INT 70
50809: PPUSH
50810: CALL_OW 67
// repeat wait ( 10 ) ;
50814: LD_INT 10
50816: PPUSH
50817: CALL_OW 67
// Connect ( vehicle ) ;
50821: LD_VAR 0 1
50825: PPUSH
50826: CALL 64149 0 1
// until IsControledBy ( vehicle ) ;
50830: LD_VAR 0 1
50834: PPUSH
50835: CALL_OW 312
50839: IFFALSE 50814
// wait ( 10 ) ;
50841: LD_INT 10
50843: PPUSH
50844: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50848: LD_VAR 0 1
50852: PPUSH
50853: LD_EXP 145
50857: PUSH
50858: LD_VAR 0 4
50862: ARRAY
50863: PUSH
50864: LD_INT 3
50866: ARRAY
50867: PPUSH
50868: LD_EXP 145
50872: PUSH
50873: LD_VAR 0 4
50877: ARRAY
50878: PUSH
50879: LD_INT 4
50881: ARRAY
50882: PPUSH
50883: CALL_OW 111
// break ;
50887: GO 50941
// end else
50889: GO 50939
// begin wait ( 0 0$3 ) ;
50891: LD_INT 105
50893: PPUSH
50894: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50898: LD_VAR 0 1
50902: PPUSH
50903: LD_EXP 145
50907: PUSH
50908: LD_VAR 0 4
50912: ARRAY
50913: PUSH
50914: LD_INT 3
50916: ARRAY
50917: PPUSH
50918: LD_EXP 145
50922: PUSH
50923: LD_VAR 0 4
50927: ARRAY
50928: PUSH
50929: LD_INT 4
50931: ARRAY
50932: PPUSH
50933: CALL_OW 111
// break ;
50937: GO 50941
// end ; end ;
50939: GO 50390
50941: POP
50942: POP
// end ;
50943: LD_VAR 0 3
50947: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
50948: LD_INT 0
50950: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
50951: LD_VAR 0 1
50955: PUSH
50956: LD_INT 250
50958: EQUAL
50959: IFFALSE 50976
50961: PUSH
50962: LD_VAR 0 2
50966: PPUSH
50967: CALL_OW 264
50971: PUSH
50972: LD_INT 81
50974: EQUAL
50975: AND
50976: IFFALSE 50997
// MinerPlaceMine ( unit , x , y ) ;
50978: LD_VAR 0 2
50982: PPUSH
50983: LD_VAR 0 4
50987: PPUSH
50988: LD_VAR 0 5
50992: PPUSH
50993: CALL 54129 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
50997: LD_VAR 0 1
51001: PUSH
51002: LD_INT 251
51004: EQUAL
51005: IFFALSE 51022
51007: PUSH
51008: LD_VAR 0 2
51012: PPUSH
51013: CALL_OW 264
51017: PUSH
51018: LD_INT 81
51020: EQUAL
51021: AND
51022: IFFALSE 51043
// MinerDetonateMine ( unit , x , y ) ;
51024: LD_VAR 0 2
51028: PPUSH
51029: LD_VAR 0 4
51033: PPUSH
51034: LD_VAR 0 5
51038: PPUSH
51039: CALL 54408 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
51043: LD_VAR 0 1
51047: PUSH
51048: LD_INT 252
51050: EQUAL
51051: IFFALSE 51068
51053: PUSH
51054: LD_VAR 0 2
51058: PPUSH
51059: CALL_OW 264
51063: PUSH
51064: LD_INT 81
51066: EQUAL
51067: AND
51068: IFFALSE 51089
// MinerCreateMinefield ( unit , x , y ) ;
51070: LD_VAR 0 2
51074: PPUSH
51075: LD_VAR 0 4
51079: PPUSH
51080: LD_VAR 0 5
51084: PPUSH
51085: CALL 54827 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
51089: LD_VAR 0 1
51093: PUSH
51094: LD_INT 253
51096: EQUAL
51097: IFFALSE 51114
51099: PUSH
51100: LD_VAR 0 2
51104: PPUSH
51105: CALL_OW 257
51109: PUSH
51110: LD_INT 5
51112: EQUAL
51113: AND
51114: IFFALSE 51135
// ComBinocular ( unit , x , y ) ;
51116: LD_VAR 0 2
51120: PPUSH
51121: LD_VAR 0 4
51125: PPUSH
51126: LD_VAR 0 5
51130: PPUSH
51131: CALL 55202 0 3
// if selectedUnit then
51135: LD_VAR 0 3
51139: IFFALSE 51199
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
51141: LD_VAR 0 1
51145: PUSH
51146: LD_INT 254
51148: EQUAL
51149: IFFALSE 51166
51151: PUSH
51152: LD_VAR 0 2
51156: PPUSH
51157: CALL_OW 264
51161: PUSH
51162: LD_INT 99
51164: EQUAL
51165: AND
51166: IFFALSE 51183
51168: PUSH
51169: LD_VAR 0 3
51173: PPUSH
51174: CALL_OW 263
51178: PUSH
51179: LD_INT 3
51181: EQUAL
51182: AND
51183: IFFALSE 51199
// HackDestroyVehicle ( unit , selectedUnit ) ;
51185: LD_VAR 0 2
51189: PPUSH
51190: LD_VAR 0 3
51194: PPUSH
51195: CALL 53489 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
51199: LD_VAR 0 1
51203: PUSH
51204: LD_INT 255
51206: EQUAL
51207: IFFALSE 51231
51209: PUSH
51210: LD_VAR 0 2
51214: PPUSH
51215: CALL_OW 264
51219: PUSH
51220: LD_INT 14
51222: PUSH
51223: LD_INT 53
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: IN
51230: AND
51231: IFFALSE 51249
51233: PUSH
51234: LD_VAR 0 4
51238: PPUSH
51239: LD_VAR 0 5
51243: PPUSH
51244: CALL_OW 488
51248: AND
51249: IFFALSE 51273
// CutTreeXYR ( unit , x , y , 12 ) ;
51251: LD_VAR 0 2
51255: PPUSH
51256: LD_VAR 0 4
51260: PPUSH
51261: LD_VAR 0 5
51265: PPUSH
51266: LD_INT 12
51268: PPUSH
51269: CALL 51464 0 4
// if cmd = 256 then
51273: LD_VAR 0 1
51277: PUSH
51278: LD_INT 256
51280: EQUAL
51281: IFFALSE 51302
// SetFactoryWaypoint ( unit , x , y ) ;
51283: LD_VAR 0 2
51287: PPUSH
51288: LD_VAR 0 4
51292: PPUSH
51293: LD_VAR 0 5
51297: PPUSH
51298: CALL 48824 0 3
// if cmd = 257 then
51302: LD_VAR 0 1
51306: PUSH
51307: LD_INT 257
51309: EQUAL
51310: IFFALSE 51331
// SetWarehouseGatheringPoint ( unit , x , y ) ;
51312: LD_VAR 0 2
51316: PPUSH
51317: LD_VAR 0 4
51321: PPUSH
51322: LD_VAR 0 5
51326: PPUSH
51327: CALL 49320 0 3
// if cmd = 258 then
51331: LD_VAR 0 1
51335: PUSH
51336: LD_INT 258
51338: EQUAL
51339: IFFALSE 51363
// BurnTreeXYR ( unit , x , y , 8 ) ;
51341: LD_VAR 0 2
51345: PPUSH
51346: LD_VAR 0 4
51350: PPUSH
51351: LD_VAR 0 5
51355: PPUSH
51356: LD_INT 8
51358: PPUSH
51359: CALL 51864 0 4
// end ;
51363: LD_VAR 0 6
51367: RET
// export function ComRadiation ( un ) ; var eff ; begin
51368: LD_INT 0
51370: PPUSH
51371: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
51372: LD_VAR 0 1
51376: PPUSH
51377: CALL_OW 264
51381: PUSH
51382: LD_INT 91
51384: NONEQUAL
51385: IFFALSE 51389
// exit ;
51387: GO 51459
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
51389: LD_INT 68
51391: PPUSH
51392: LD_VAR 0 1
51396: PPUSH
51397: CALL_OW 255
51401: PPUSH
51402: CALL_OW 321
51406: PUSH
51407: LD_INT 2
51409: EQUAL
51410: IFFALSE 51422
// eff := 50 else
51412: LD_ADDR_VAR 0 3
51416: PUSH
51417: LD_INT 50
51419: ST_TO_ADDR
51420: GO 51430
// eff := 25 ;
51422: LD_ADDR_VAR 0 3
51426: PUSH
51427: LD_INT 25
51429: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
51430: LD_VAR 0 1
51434: PPUSH
51435: CALL_OW 250
51439: PPUSH
51440: LD_VAR 0 1
51444: PPUSH
51445: CALL_OW 251
51449: PPUSH
51450: LD_VAR 0 3
51454: PPUSH
51455: CALL_OW 495
// end ;
51459: LD_VAR 0 2
51463: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
51464: LD_INT 0
51466: PPUSH
51467: PPUSH
51468: PPUSH
51469: PPUSH
51470: PPUSH
51471: PPUSH
51472: PPUSH
51473: PPUSH
51474: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
51475: LD_VAR 0 1
51479: PPUSH
51480: CALL_OW 302
51484: NOT
51485: IFTRUE 51504
51487: PUSH
51488: LD_VAR 0 2
51492: PPUSH
51493: LD_VAR 0 3
51497: PPUSH
51498: CALL_OW 488
51502: NOT
51503: OR
51504: IFTRUE 51513
51506: PUSH
51507: LD_VAR 0 4
51511: NOT
51512: OR
51513: IFFALSE 51517
// exit ;
51515: GO 51859
// list := [ ] ;
51517: LD_ADDR_VAR 0 13
51521: PUSH
51522: EMPTY
51523: ST_TO_ADDR
// if x - r < 0 then
51524: LD_VAR 0 2
51528: PUSH
51529: LD_VAR 0 4
51533: MINUS
51534: PUSH
51535: LD_INT 0
51537: LESS
51538: IFFALSE 51550
// min_x := 0 else
51540: LD_ADDR_VAR 0 7
51544: PUSH
51545: LD_INT 0
51547: ST_TO_ADDR
51548: GO 51566
// min_x := x - r ;
51550: LD_ADDR_VAR 0 7
51554: PUSH
51555: LD_VAR 0 2
51559: PUSH
51560: LD_VAR 0 4
51564: MINUS
51565: ST_TO_ADDR
// if y - r < 0 then
51566: LD_VAR 0 3
51570: PUSH
51571: LD_VAR 0 4
51575: MINUS
51576: PUSH
51577: LD_INT 0
51579: LESS
51580: IFFALSE 51592
// min_y := 0 else
51582: LD_ADDR_VAR 0 8
51586: PUSH
51587: LD_INT 0
51589: ST_TO_ADDR
51590: GO 51608
// min_y := y - r ;
51592: LD_ADDR_VAR 0 8
51596: PUSH
51597: LD_VAR 0 3
51601: PUSH
51602: LD_VAR 0 4
51606: MINUS
51607: ST_TO_ADDR
// max_x := x + r ;
51608: LD_ADDR_VAR 0 9
51612: PUSH
51613: LD_VAR 0 2
51617: PUSH
51618: LD_VAR 0 4
51622: PLUS
51623: ST_TO_ADDR
// max_y := y + r ;
51624: LD_ADDR_VAR 0 10
51628: PUSH
51629: LD_VAR 0 3
51633: PUSH
51634: LD_VAR 0 4
51638: PLUS
51639: ST_TO_ADDR
// for _x = min_x to max_x do
51640: LD_ADDR_VAR 0 11
51644: PUSH
51645: DOUBLE
51646: LD_VAR 0 7
51650: DEC
51651: ST_TO_ADDR
51652: LD_VAR 0 9
51656: PUSH
51657: FOR_TO
51658: IFFALSE 51777
// for _y = min_y to max_y do
51660: LD_ADDR_VAR 0 12
51664: PUSH
51665: DOUBLE
51666: LD_VAR 0 8
51670: DEC
51671: ST_TO_ADDR
51672: LD_VAR 0 10
51676: PUSH
51677: FOR_TO
51678: IFFALSE 51773
// begin if not ValidHex ( _x , _y ) then
51680: LD_VAR 0 11
51684: PPUSH
51685: LD_VAR 0 12
51689: PPUSH
51690: CALL_OW 488
51694: NOT
51695: IFFALSE 51699
// continue ;
51697: GO 51677
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
51699: LD_VAR 0 11
51703: PPUSH
51704: LD_VAR 0 12
51708: PPUSH
51709: CALL_OW 351
51713: IFFALSE 51731
51715: PUSH
51716: LD_VAR 0 11
51720: PPUSH
51721: LD_VAR 0 12
51725: PPUSH
51726: CALL_OW 554
51730: AND
51731: IFFALSE 51771
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
51733: LD_ADDR_VAR 0 13
51737: PUSH
51738: LD_VAR 0 13
51742: PPUSH
51743: LD_VAR 0 13
51747: PUSH
51748: LD_INT 1
51750: PLUS
51751: PPUSH
51752: LD_VAR 0 11
51756: PUSH
51757: LD_VAR 0 12
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PPUSH
51766: CALL_OW 2
51770: ST_TO_ADDR
// end ;
51771: GO 51677
51773: POP
51774: POP
51775: GO 51657
51777: POP
51778: POP
// if not list then
51779: LD_VAR 0 13
51783: NOT
51784: IFFALSE 51788
// exit ;
51786: GO 51859
// for i in list do
51788: LD_ADDR_VAR 0 6
51792: PUSH
51793: LD_VAR 0 13
51797: PUSH
51798: FOR_IN
51799: IFFALSE 51857
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
51801: LD_VAR 0 1
51805: PPUSH
51806: LD_STRING M
51808: PUSH
51809: LD_VAR 0 6
51813: PUSH
51814: LD_INT 1
51816: ARRAY
51817: PUSH
51818: LD_VAR 0 6
51822: PUSH
51823: LD_INT 2
51825: ARRAY
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: PUSH
51848: EMPTY
51849: LIST
51850: PPUSH
51851: CALL_OW 447
51855: GO 51798
51857: POP
51858: POP
// end ;
51859: LD_VAR 0 5
51863: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
51864: LD_INT 0
51866: PPUSH
51867: PPUSH
51868: PPUSH
51869: PPUSH
51870: PPUSH
51871: PPUSH
51872: PPUSH
51873: PPUSH
51874: PPUSH
51875: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
51876: LD_VAR 0 1
51880: PPUSH
51881: CALL_OW 302
51885: NOT
51886: IFTRUE 51905
51888: PUSH
51889: LD_VAR 0 2
51893: PPUSH
51894: LD_VAR 0 3
51898: PPUSH
51899: CALL_OW 488
51903: NOT
51904: OR
51905: IFTRUE 51914
51907: PUSH
51908: LD_VAR 0 4
51912: NOT
51913: OR
51914: IFFALSE 51918
// exit ;
51916: GO 52435
// list := [ ] ;
51918: LD_ADDR_VAR 0 13
51922: PUSH
51923: EMPTY
51924: ST_TO_ADDR
// if x - r < 0 then
51925: LD_VAR 0 2
51929: PUSH
51930: LD_VAR 0 4
51934: MINUS
51935: PUSH
51936: LD_INT 0
51938: LESS
51939: IFFALSE 51951
// min_x := 0 else
51941: LD_ADDR_VAR 0 7
51945: PUSH
51946: LD_INT 0
51948: ST_TO_ADDR
51949: GO 51967
// min_x := x - r ;
51951: LD_ADDR_VAR 0 7
51955: PUSH
51956: LD_VAR 0 2
51960: PUSH
51961: LD_VAR 0 4
51965: MINUS
51966: ST_TO_ADDR
// if y - r < 0 then
51967: LD_VAR 0 3
51971: PUSH
51972: LD_VAR 0 4
51976: MINUS
51977: PUSH
51978: LD_INT 0
51980: LESS
51981: IFFALSE 51993
// min_y := 0 else
51983: LD_ADDR_VAR 0 8
51987: PUSH
51988: LD_INT 0
51990: ST_TO_ADDR
51991: GO 52009
// min_y := y - r ;
51993: LD_ADDR_VAR 0 8
51997: PUSH
51998: LD_VAR 0 3
52002: PUSH
52003: LD_VAR 0 4
52007: MINUS
52008: ST_TO_ADDR
// max_x := x + r ;
52009: LD_ADDR_VAR 0 9
52013: PUSH
52014: LD_VAR 0 2
52018: PUSH
52019: LD_VAR 0 4
52023: PLUS
52024: ST_TO_ADDR
// max_y := y + r ;
52025: LD_ADDR_VAR 0 10
52029: PUSH
52030: LD_VAR 0 3
52034: PUSH
52035: LD_VAR 0 4
52039: PLUS
52040: ST_TO_ADDR
// for _x = min_x to max_x do
52041: LD_ADDR_VAR 0 11
52045: PUSH
52046: DOUBLE
52047: LD_VAR 0 7
52051: DEC
52052: ST_TO_ADDR
52053: LD_VAR 0 9
52057: PUSH
52058: FOR_TO
52059: IFFALSE 52178
// for _y = min_y to max_y do
52061: LD_ADDR_VAR 0 12
52065: PUSH
52066: DOUBLE
52067: LD_VAR 0 8
52071: DEC
52072: ST_TO_ADDR
52073: LD_VAR 0 10
52077: PUSH
52078: FOR_TO
52079: IFFALSE 52174
// begin if not ValidHex ( _x , _y ) then
52081: LD_VAR 0 11
52085: PPUSH
52086: LD_VAR 0 12
52090: PPUSH
52091: CALL_OW 488
52095: NOT
52096: IFFALSE 52100
// continue ;
52098: GO 52078
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
52100: LD_VAR 0 11
52104: PPUSH
52105: LD_VAR 0 12
52109: PPUSH
52110: CALL_OW 351
52114: IFFALSE 52132
52116: PUSH
52117: LD_VAR 0 11
52121: PPUSH
52122: LD_VAR 0 12
52126: PPUSH
52127: CALL_OW 554
52131: AND
52132: IFFALSE 52172
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
52134: LD_ADDR_VAR 0 13
52138: PUSH
52139: LD_VAR 0 13
52143: PPUSH
52144: LD_VAR 0 13
52148: PUSH
52149: LD_INT 1
52151: PLUS
52152: PPUSH
52153: LD_VAR 0 11
52157: PUSH
52158: LD_VAR 0 12
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PPUSH
52167: CALL_OW 2
52171: ST_TO_ADDR
// end ;
52172: GO 52078
52174: POP
52175: POP
52176: GO 52058
52178: POP
52179: POP
// if not list then
52180: LD_VAR 0 13
52184: NOT
52185: IFFALSE 52189
// exit ;
52187: GO 52435
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
52189: LD_ADDR_VAR 0 13
52193: PUSH
52194: LD_VAR 0 1
52198: PPUSH
52199: LD_VAR 0 13
52203: PPUSH
52204: LD_INT 1
52206: PPUSH
52207: LD_INT 1
52209: PPUSH
52210: CALL 61277 0 4
52214: ST_TO_ADDR
// ComStop ( flame ) ;
52215: LD_VAR 0 1
52219: PPUSH
52220: CALL_OW 141
// for i in list do
52224: LD_ADDR_VAR 0 6
52228: PUSH
52229: LD_VAR 0 13
52233: PUSH
52234: FOR_IN
52235: IFFALSE 52266
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
52237: LD_VAR 0 1
52241: PPUSH
52242: LD_VAR 0 6
52246: PUSH
52247: LD_INT 1
52249: ARRAY
52250: PPUSH
52251: LD_VAR 0 6
52255: PUSH
52256: LD_INT 2
52258: ARRAY
52259: PPUSH
52260: CALL_OW 176
52264: GO 52234
52266: POP
52267: POP
// repeat wait ( 0 0$1 ) ;
52268: LD_INT 35
52270: PPUSH
52271: CALL_OW 67
// task := GetTaskList ( flame ) ;
52275: LD_ADDR_VAR 0 14
52279: PUSH
52280: LD_VAR 0 1
52284: PPUSH
52285: CALL_OW 437
52289: ST_TO_ADDR
// if not task then
52290: LD_VAR 0 14
52294: NOT
52295: IFFALSE 52299
// exit ;
52297: GO 52435
// if task [ 1 ] [ 1 ] <> | then
52299: LD_VAR 0 14
52303: PUSH
52304: LD_INT 1
52306: ARRAY
52307: PUSH
52308: LD_INT 1
52310: ARRAY
52311: PUSH
52312: LD_STRING |
52314: NONEQUAL
52315: IFFALSE 52319
// exit ;
52317: GO 52435
// _x := task [ 1 ] [ 2 ] ;
52319: LD_ADDR_VAR 0 11
52323: PUSH
52324: LD_VAR 0 14
52328: PUSH
52329: LD_INT 1
52331: ARRAY
52332: PUSH
52333: LD_INT 2
52335: ARRAY
52336: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
52337: LD_ADDR_VAR 0 12
52341: PUSH
52342: LD_VAR 0 14
52346: PUSH
52347: LD_INT 1
52349: ARRAY
52350: PUSH
52351: LD_INT 3
52353: ARRAY
52354: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
52355: LD_VAR 0 11
52359: PPUSH
52360: LD_VAR 0 12
52364: PPUSH
52365: CALL_OW 351
52369: NOT
52370: IFTRUE 52389
52372: PUSH
52373: LD_VAR 0 11
52377: PPUSH
52378: LD_VAR 0 12
52382: PPUSH
52383: CALL_OW 554
52387: NOT
52388: OR
52389: IFFALSE 52423
// begin task := Delete ( task , 1 ) ;
52391: LD_ADDR_VAR 0 14
52395: PUSH
52396: LD_VAR 0 14
52400: PPUSH
52401: LD_INT 1
52403: PPUSH
52404: CALL_OW 3
52408: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
52409: LD_VAR 0 1
52413: PPUSH
52414: LD_VAR 0 14
52418: PPUSH
52419: CALL_OW 446
// end ; until not HasTask ( flame ) ;
52423: LD_VAR 0 1
52427: PPUSH
52428: CALL_OW 314
52432: NOT
52433: IFFALSE 52268
// end ;
52435: LD_VAR 0 5
52439: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
52440: LD_EXP 149
52444: NOT
52445: IFFALSE 52495
52447: GO 52449
52449: DISABLE
// begin initHack := true ;
52450: LD_ADDR_EXP 149
52454: PUSH
52455: LD_INT 1
52457: ST_TO_ADDR
// hackTanks := [ ] ;
52458: LD_ADDR_EXP 150
52462: PUSH
52463: EMPTY
52464: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
52465: LD_ADDR_EXP 151
52469: PUSH
52470: EMPTY
52471: ST_TO_ADDR
// hackLimit := 3 ;
52472: LD_ADDR_EXP 152
52476: PUSH
52477: LD_INT 3
52479: ST_TO_ADDR
// hackDist := 12 ;
52480: LD_ADDR_EXP 153
52484: PUSH
52485: LD_INT 12
52487: ST_TO_ADDR
// hackCounter := [ ] ;
52488: LD_ADDR_EXP 154
52492: PUSH
52493: EMPTY
52494: ST_TO_ADDR
// end ;
52495: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
52496: LD_EXP 149
52500: IFFALSE 52518
52502: PUSH
52503: LD_INT 34
52505: PUSH
52506: LD_INT 99
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PPUSH
52513: CALL_OW 69
52517: AND
52518: IFFALSE 52771
52520: GO 52522
52522: DISABLE
52523: LD_INT 0
52525: PPUSH
52526: PPUSH
// begin enable ;
52527: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
52528: LD_ADDR_VAR 0 1
52532: PUSH
52533: LD_INT 34
52535: PUSH
52536: LD_INT 99
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PPUSH
52543: CALL_OW 69
52547: PUSH
52548: FOR_IN
52549: IFFALSE 52769
// begin if not i in hackTanks then
52551: LD_VAR 0 1
52555: PUSH
52556: LD_EXP 150
52560: IN
52561: NOT
52562: IFFALSE 52645
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
52564: LD_ADDR_EXP 150
52568: PUSH
52569: LD_EXP 150
52573: PPUSH
52574: LD_EXP 150
52578: PUSH
52579: LD_INT 1
52581: PLUS
52582: PPUSH
52583: LD_VAR 0 1
52587: PPUSH
52588: CALL_OW 1
52592: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
52593: LD_ADDR_EXP 151
52597: PUSH
52598: LD_EXP 151
52602: PPUSH
52603: LD_EXP 151
52607: PUSH
52608: LD_INT 1
52610: PLUS
52611: PPUSH
52612: EMPTY
52613: PPUSH
52614: CALL_OW 1
52618: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
52619: LD_ADDR_EXP 154
52623: PUSH
52624: LD_EXP 154
52628: PPUSH
52629: LD_EXP 154
52633: PUSH
52634: LD_INT 1
52636: PLUS
52637: PPUSH
52638: EMPTY
52639: PPUSH
52640: CALL_OW 1
52644: ST_TO_ADDR
// end ; if not IsOk ( i ) then
52645: LD_VAR 0 1
52649: PPUSH
52650: CALL_OW 302
52654: NOT
52655: IFFALSE 52668
// begin HackUnlinkAll ( i ) ;
52657: LD_VAR 0 1
52661: PPUSH
52662: CALL 52774 0 1
// continue ;
52666: GO 52548
// end ; HackCheckCapturedStatus ( i ) ;
52668: LD_VAR 0 1
52672: PPUSH
52673: CALL 53219 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
52677: LD_ADDR_VAR 0 2
52681: PUSH
52682: LD_INT 81
52684: PUSH
52685: LD_VAR 0 1
52689: PPUSH
52690: CALL_OW 255
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 33
52701: PUSH
52702: LD_INT 3
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 91
52711: PUSH
52712: LD_VAR 0 1
52716: PUSH
52717: LD_EXP 153
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 50
52729: PUSH
52730: EMPTY
52731: LIST
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: PPUSH
52739: CALL_OW 69
52743: ST_TO_ADDR
// if not tmp then
52744: LD_VAR 0 2
52748: NOT
52749: IFFALSE 52753
// continue ;
52751: GO 52548
// HackLink ( i , tmp ) ;
52753: LD_VAR 0 1
52757: PPUSH
52758: LD_VAR 0 2
52762: PPUSH
52763: CALL 52910 0 2
// end ;
52767: GO 52548
52769: POP
52770: POP
// end ;
52771: PPOPN 2
52773: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
52774: LD_INT 0
52776: PPUSH
52777: PPUSH
52778: PPUSH
// if not hack in hackTanks then
52779: LD_VAR 0 1
52783: PUSH
52784: LD_EXP 150
52788: IN
52789: NOT
52790: IFFALSE 52794
// exit ;
52792: GO 52905
// index := GetElementIndex ( hackTanks , hack ) ;
52794: LD_ADDR_VAR 0 4
52798: PUSH
52799: LD_EXP 150
52803: PPUSH
52804: LD_VAR 0 1
52808: PPUSH
52809: CALL 60572 0 2
52813: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
52814: LD_EXP 151
52818: PUSH
52819: LD_VAR 0 4
52823: ARRAY
52824: IFFALSE 52905
// begin for i in hackTanksCaptured [ index ] do
52826: LD_ADDR_VAR 0 3
52830: PUSH
52831: LD_EXP 151
52835: PUSH
52836: LD_VAR 0 4
52840: ARRAY
52841: PUSH
52842: FOR_IN
52843: IFFALSE 52869
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
52845: LD_VAR 0 3
52849: PUSH
52850: LD_INT 1
52852: ARRAY
52853: PPUSH
52854: LD_VAR 0 3
52858: PUSH
52859: LD_INT 2
52861: ARRAY
52862: PPUSH
52863: CALL_OW 235
52867: GO 52842
52869: POP
52870: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
52871: LD_ADDR_EXP 151
52875: PUSH
52876: LD_EXP 151
52880: PPUSH
52881: LD_VAR 0 4
52885: PPUSH
52886: EMPTY
52887: PPUSH
52888: CALL_OW 1
52892: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
52893: LD_VAR 0 1
52897: PPUSH
52898: LD_INT 0
52900: PPUSH
52901: CALL_OW 505
// end ; end ;
52905: LD_VAR 0 2
52909: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
52910: LD_INT 0
52912: PPUSH
52913: PPUSH
52914: PPUSH
// if not hack in hackTanks or not vehicles then
52915: LD_VAR 0 1
52919: PUSH
52920: LD_EXP 150
52924: IN
52925: NOT
52926: IFTRUE 52935
52928: PUSH
52929: LD_VAR 0 2
52933: NOT
52934: OR
52935: IFFALSE 52939
// exit ;
52937: GO 53214
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
52939: LD_ADDR_VAR 0 2
52943: PUSH
52944: LD_VAR 0 1
52948: PPUSH
52949: LD_VAR 0 2
52953: PPUSH
52954: LD_INT 1
52956: PPUSH
52957: LD_INT 1
52959: PPUSH
52960: CALL 61224 0 4
52964: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
52965: LD_ADDR_VAR 0 5
52969: PUSH
52970: LD_EXP 150
52974: PPUSH
52975: LD_VAR 0 1
52979: PPUSH
52980: CALL 60572 0 2
52984: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
52985: LD_EXP 151
52989: PUSH
52990: LD_VAR 0 5
52994: ARRAY
52995: PUSH
52996: LD_EXP 152
53000: LESS
53001: IFFALSE 53190
// begin for i := 1 to vehicles do
53003: LD_ADDR_VAR 0 4
53007: PUSH
53008: DOUBLE
53009: LD_INT 1
53011: DEC
53012: ST_TO_ADDR
53013: LD_VAR 0 2
53017: PUSH
53018: FOR_TO
53019: IFFALSE 53188
// begin if hackTanksCaptured [ index ] = hackLimit then
53021: LD_EXP 151
53025: PUSH
53026: LD_VAR 0 5
53030: ARRAY
53031: PUSH
53032: LD_EXP 152
53036: EQUAL
53037: IFFALSE 53041
// break ;
53039: GO 53188
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
53041: LD_ADDR_EXP 154
53045: PUSH
53046: LD_EXP 154
53050: PPUSH
53051: LD_VAR 0 5
53055: PPUSH
53056: LD_EXP 154
53060: PUSH
53061: LD_VAR 0 5
53065: ARRAY
53066: PUSH
53067: LD_INT 1
53069: PLUS
53070: PPUSH
53071: CALL_OW 1
53075: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
53076: LD_ADDR_EXP 151
53080: PUSH
53081: LD_EXP 151
53085: PPUSH
53086: LD_VAR 0 5
53090: PUSH
53091: LD_EXP 151
53095: PUSH
53096: LD_VAR 0 5
53100: ARRAY
53101: PUSH
53102: LD_INT 1
53104: PLUS
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PPUSH
53110: LD_VAR 0 2
53114: PUSH
53115: LD_VAR 0 4
53119: ARRAY
53120: PUSH
53121: LD_VAR 0 2
53125: PUSH
53126: LD_VAR 0 4
53130: ARRAY
53131: PPUSH
53132: CALL_OW 255
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PPUSH
53141: CALL 60789 0 3
53145: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
53146: LD_VAR 0 2
53150: PUSH
53151: LD_VAR 0 4
53155: ARRAY
53156: PPUSH
53157: LD_VAR 0 1
53161: PPUSH
53162: CALL_OW 255
53166: PPUSH
53167: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
53171: LD_VAR 0 2
53175: PUSH
53176: LD_VAR 0 4
53180: ARRAY
53181: PPUSH
53182: CALL_OW 141
// end ;
53186: GO 53018
53188: POP
53189: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
53190: LD_VAR 0 1
53194: PPUSH
53195: LD_EXP 151
53199: PUSH
53200: LD_VAR 0 5
53204: ARRAY
53205: PUSH
53206: LD_INT 0
53208: PLUS
53209: PPUSH
53210: CALL_OW 505
// end ;
53214: LD_VAR 0 3
53218: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
53219: LD_INT 0
53221: PPUSH
53222: PPUSH
53223: PPUSH
53224: PPUSH
// if not hack in hackTanks then
53225: LD_VAR 0 1
53229: PUSH
53230: LD_EXP 150
53234: IN
53235: NOT
53236: IFFALSE 53240
// exit ;
53238: GO 53484
// index := GetElementIndex ( hackTanks , hack ) ;
53240: LD_ADDR_VAR 0 4
53244: PUSH
53245: LD_EXP 150
53249: PPUSH
53250: LD_VAR 0 1
53254: PPUSH
53255: CALL 60572 0 2
53259: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
53260: LD_ADDR_VAR 0 3
53264: PUSH
53265: DOUBLE
53266: LD_EXP 151
53270: PUSH
53271: LD_VAR 0 4
53275: ARRAY
53276: INC
53277: ST_TO_ADDR
53278: LD_INT 1
53280: PUSH
53281: FOR_DOWNTO
53282: IFFALSE 53458
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
53284: LD_ADDR_VAR 0 5
53288: PUSH
53289: LD_EXP 151
53293: PUSH
53294: LD_VAR 0 4
53298: ARRAY
53299: PUSH
53300: LD_VAR 0 3
53304: ARRAY
53305: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
53306: LD_VAR 0 5
53310: PUSH
53311: LD_INT 1
53313: ARRAY
53314: PPUSH
53315: CALL_OW 302
53319: NOT
53320: IFTRUE 53348
53322: PUSH
53323: LD_VAR 0 5
53327: PUSH
53328: LD_INT 1
53330: ARRAY
53331: PPUSH
53332: CALL_OW 255
53336: PUSH
53337: LD_VAR 0 1
53341: PPUSH
53342: CALL_OW 255
53346: NONEQUAL
53347: OR
53348: IFFALSE 53456
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
53350: LD_VAR 0 5
53354: PUSH
53355: LD_INT 1
53357: ARRAY
53358: PPUSH
53359: CALL_OW 305
53363: IFFALSE 53391
53365: PUSH
53366: LD_VAR 0 5
53370: PUSH
53371: LD_INT 1
53373: ARRAY
53374: PPUSH
53375: CALL_OW 255
53379: PUSH
53380: LD_VAR 0 1
53384: PPUSH
53385: CALL_OW 255
53389: EQUAL
53390: AND
53391: IFFALSE 53415
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
53393: LD_VAR 0 5
53397: PUSH
53398: LD_INT 1
53400: ARRAY
53401: PPUSH
53402: LD_VAR 0 5
53406: PUSH
53407: LD_INT 2
53409: ARRAY
53410: PPUSH
53411: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
53415: LD_ADDR_EXP 151
53419: PUSH
53420: LD_EXP 151
53424: PPUSH
53425: LD_VAR 0 4
53429: PPUSH
53430: LD_EXP 151
53434: PUSH
53435: LD_VAR 0 4
53439: ARRAY
53440: PPUSH
53441: LD_VAR 0 3
53445: PPUSH
53446: CALL_OW 3
53450: PPUSH
53451: CALL_OW 1
53455: ST_TO_ADDR
// end ; end ;
53456: GO 53281
53458: POP
53459: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
53460: LD_VAR 0 1
53464: PPUSH
53465: LD_EXP 151
53469: PUSH
53470: LD_VAR 0 4
53474: ARRAY
53475: PUSH
53476: LD_INT 0
53478: PLUS
53479: PPUSH
53480: CALL_OW 505
// end ;
53484: LD_VAR 0 2
53488: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
53489: LD_INT 0
53491: PPUSH
53492: PPUSH
53493: PPUSH
53494: PPUSH
// if not hack in hackTanks then
53495: LD_VAR 0 1
53499: PUSH
53500: LD_EXP 150
53504: IN
53505: NOT
53506: IFFALSE 53510
// exit ;
53508: GO 53595
// index := GetElementIndex ( hackTanks , hack ) ;
53510: LD_ADDR_VAR 0 5
53514: PUSH
53515: LD_EXP 150
53519: PPUSH
53520: LD_VAR 0 1
53524: PPUSH
53525: CALL 60572 0 2
53529: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
53530: LD_ADDR_VAR 0 4
53534: PUSH
53535: DOUBLE
53536: LD_INT 1
53538: DEC
53539: ST_TO_ADDR
53540: LD_EXP 151
53544: PUSH
53545: LD_VAR 0 5
53549: ARRAY
53550: PUSH
53551: FOR_TO
53552: IFFALSE 53593
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
53554: LD_EXP 151
53558: PUSH
53559: LD_VAR 0 5
53563: ARRAY
53564: PUSH
53565: LD_VAR 0 4
53569: ARRAY
53570: PUSH
53571: LD_INT 1
53573: ARRAY
53574: PUSH
53575: LD_VAR 0 2
53579: EQUAL
53580: IFFALSE 53591
// KillUnit ( vehicle ) ;
53582: LD_VAR 0 2
53586: PPUSH
53587: CALL_OW 66
53591: GO 53551
53593: POP
53594: POP
// end ;
53595: LD_VAR 0 3
53599: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
53600: LD_EXP 155
53604: NOT
53605: IFFALSE 53640
53607: GO 53609
53609: DISABLE
// begin initMiner := true ;
53610: LD_ADDR_EXP 155
53614: PUSH
53615: LD_INT 1
53617: ST_TO_ADDR
// minersList := [ ] ;
53618: LD_ADDR_EXP 156
53622: PUSH
53623: EMPTY
53624: ST_TO_ADDR
// minerMinesList := [ ] ;
53625: LD_ADDR_EXP 157
53629: PUSH
53630: EMPTY
53631: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
53632: LD_ADDR_EXP 158
53636: PUSH
53637: LD_INT 5
53639: ST_TO_ADDR
// end ;
53640: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
53641: LD_EXP 155
53645: IFFALSE 53663
53647: PUSH
53648: LD_INT 34
53650: PUSH
53651: LD_INT 81
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PPUSH
53658: CALL_OW 69
53662: AND
53663: IFFALSE 54126
53665: GO 53667
53667: DISABLE
53668: LD_INT 0
53670: PPUSH
53671: PPUSH
53672: PPUSH
53673: PPUSH
// begin enable ;
53674: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
53675: LD_ADDR_VAR 0 1
53679: PUSH
53680: LD_INT 34
53682: PUSH
53683: LD_INT 81
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PPUSH
53690: CALL_OW 69
53694: PUSH
53695: FOR_IN
53696: IFFALSE 53768
// begin if not i in minersList then
53698: LD_VAR 0 1
53702: PUSH
53703: LD_EXP 156
53707: IN
53708: NOT
53709: IFFALSE 53766
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
53711: LD_ADDR_EXP 156
53715: PUSH
53716: LD_EXP 156
53720: PPUSH
53721: LD_EXP 156
53725: PUSH
53726: LD_INT 1
53728: PLUS
53729: PPUSH
53730: LD_VAR 0 1
53734: PPUSH
53735: CALL_OW 1
53739: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
53740: LD_ADDR_EXP 157
53744: PUSH
53745: LD_EXP 157
53749: PPUSH
53750: LD_EXP 157
53754: PUSH
53755: LD_INT 1
53757: PLUS
53758: PPUSH
53759: EMPTY
53760: PPUSH
53761: CALL_OW 1
53765: ST_TO_ADDR
// end end ;
53766: GO 53695
53768: POP
53769: POP
// for i := minerMinesList downto 1 do
53770: LD_ADDR_VAR 0 1
53774: PUSH
53775: DOUBLE
53776: LD_EXP 157
53780: INC
53781: ST_TO_ADDR
53782: LD_INT 1
53784: PUSH
53785: FOR_DOWNTO
53786: IFFALSE 54124
// begin if IsLive ( minersList [ i ] ) then
53788: LD_EXP 156
53792: PUSH
53793: LD_VAR 0 1
53797: ARRAY
53798: PPUSH
53799: CALL_OW 300
53803: IFFALSE 53831
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
53805: LD_EXP 156
53809: PUSH
53810: LD_VAR 0 1
53814: ARRAY
53815: PPUSH
53816: LD_EXP 157
53820: PUSH
53821: LD_VAR 0 1
53825: ARRAY
53826: PPUSH
53827: CALL_OW 505
// if not minerMinesList [ i ] then
53831: LD_EXP 157
53835: PUSH
53836: LD_VAR 0 1
53840: ARRAY
53841: NOT
53842: IFFALSE 53846
// continue ;
53844: GO 53785
// for j := minerMinesList [ i ] downto 1 do
53846: LD_ADDR_VAR 0 2
53850: PUSH
53851: DOUBLE
53852: LD_EXP 157
53856: PUSH
53857: LD_VAR 0 1
53861: ARRAY
53862: INC
53863: ST_TO_ADDR
53864: LD_INT 1
53866: PUSH
53867: FOR_DOWNTO
53868: IFFALSE 54120
// begin side := GetSide ( minersList [ i ] ) ;
53870: LD_ADDR_VAR 0 3
53874: PUSH
53875: LD_EXP 156
53879: PUSH
53880: LD_VAR 0 1
53884: ARRAY
53885: PPUSH
53886: CALL_OW 255
53890: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
53891: LD_ADDR_VAR 0 4
53895: PUSH
53896: LD_EXP 157
53900: PUSH
53901: LD_VAR 0 1
53905: ARRAY
53906: PUSH
53907: LD_VAR 0 2
53911: ARRAY
53912: PUSH
53913: LD_INT 1
53915: ARRAY
53916: PPUSH
53917: LD_EXP 157
53921: PUSH
53922: LD_VAR 0 1
53926: ARRAY
53927: PUSH
53928: LD_VAR 0 2
53932: ARRAY
53933: PUSH
53934: LD_INT 2
53936: ARRAY
53937: PPUSH
53938: CALL_OW 428
53942: ST_TO_ADDR
// if not tmp then
53943: LD_VAR 0 4
53947: NOT
53948: IFFALSE 53952
// continue ;
53950: GO 53867
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
53952: LD_VAR 0 4
53956: PUSH
53957: LD_INT 81
53959: PUSH
53960: LD_VAR 0 3
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PPUSH
53969: CALL_OW 69
53973: IN
53974: IFFALSE 54024
53976: PUSH
53977: LD_EXP 157
53981: PUSH
53982: LD_VAR 0 1
53986: ARRAY
53987: PUSH
53988: LD_VAR 0 2
53992: ARRAY
53993: PUSH
53994: LD_INT 1
53996: ARRAY
53997: PPUSH
53998: LD_EXP 157
54002: PUSH
54003: LD_VAR 0 1
54007: ARRAY
54008: PUSH
54009: LD_VAR 0 2
54013: ARRAY
54014: PUSH
54015: LD_INT 2
54017: ARRAY
54018: PPUSH
54019: CALL_OW 458
54023: AND
54024: IFFALSE 54118
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
54026: LD_EXP 157
54030: PUSH
54031: LD_VAR 0 1
54035: ARRAY
54036: PUSH
54037: LD_VAR 0 2
54041: ARRAY
54042: PUSH
54043: LD_INT 1
54045: ARRAY
54046: PPUSH
54047: LD_EXP 157
54051: PUSH
54052: LD_VAR 0 1
54056: ARRAY
54057: PUSH
54058: LD_VAR 0 2
54062: ARRAY
54063: PUSH
54064: LD_INT 2
54066: ARRAY
54067: PPUSH
54068: LD_VAR 0 3
54072: PPUSH
54073: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
54077: LD_ADDR_EXP 157
54081: PUSH
54082: LD_EXP 157
54086: PPUSH
54087: LD_VAR 0 1
54091: PPUSH
54092: LD_EXP 157
54096: PUSH
54097: LD_VAR 0 1
54101: ARRAY
54102: PPUSH
54103: LD_VAR 0 2
54107: PPUSH
54108: CALL_OW 3
54112: PPUSH
54113: CALL_OW 1
54117: ST_TO_ADDR
// end ; end ;
54118: GO 53867
54120: POP
54121: POP
// end ;
54122: GO 53785
54124: POP
54125: POP
// end ;
54126: PPOPN 4
54128: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
54129: LD_INT 0
54131: PPUSH
54132: PPUSH
// result := false ;
54133: LD_ADDR_VAR 0 4
54137: PUSH
54138: LD_INT 0
54140: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
54141: LD_VAR 0 1
54145: PPUSH
54146: CALL_OW 264
54150: PUSH
54151: LD_INT 81
54153: EQUAL
54154: NOT
54155: IFFALSE 54159
// exit ;
54157: GO 54403
// index := GetElementIndex ( minersList , unit ) ;
54159: LD_ADDR_VAR 0 5
54163: PUSH
54164: LD_EXP 156
54168: PPUSH
54169: LD_VAR 0 1
54173: PPUSH
54174: CALL 60572 0 2
54178: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
54179: LD_EXP 157
54183: PUSH
54184: LD_VAR 0 5
54188: ARRAY
54189: PUSH
54190: LD_EXP 158
54194: GREATEREQUAL
54195: IFFALSE 54199
// exit ;
54197: GO 54403
// ComMoveXY ( unit , x , y ) ;
54199: LD_VAR 0 1
54203: PPUSH
54204: LD_VAR 0 2
54208: PPUSH
54209: LD_VAR 0 3
54213: PPUSH
54214: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
54218: LD_INT 35
54220: PPUSH
54221: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
54225: LD_VAR 0 1
54229: PPUSH
54230: LD_VAR 0 2
54234: PPUSH
54235: LD_VAR 0 3
54239: PPUSH
54240: CALL 92618 0 3
54244: NOT
54245: IFFALSE 54258
54247: PUSH
54248: LD_VAR 0 1
54252: PPUSH
54253: CALL_OW 314
54257: AND
54258: IFFALSE 54262
// exit ;
54260: GO 54403
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
54262: LD_VAR 0 2
54266: PPUSH
54267: LD_VAR 0 3
54271: PPUSH
54272: CALL_OW 428
54276: PUSH
54277: LD_VAR 0 1
54281: EQUAL
54282: IFFALSE 54296
54284: PUSH
54285: LD_VAR 0 1
54289: PPUSH
54290: CALL_OW 314
54294: NOT
54295: AND
54296: IFFALSE 54218
// PlaySoundXY ( x , y , PlantMine ) ;
54298: LD_VAR 0 2
54302: PPUSH
54303: LD_VAR 0 3
54307: PPUSH
54308: LD_STRING PlantMine
54310: PPUSH
54311: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
54315: LD_VAR 0 2
54319: PPUSH
54320: LD_VAR 0 3
54324: PPUSH
54325: LD_VAR 0 1
54329: PPUSH
54330: CALL_OW 255
54334: PPUSH
54335: LD_INT 0
54337: PPUSH
54338: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
54342: LD_ADDR_EXP 157
54346: PUSH
54347: LD_EXP 157
54351: PPUSH
54352: LD_VAR 0 5
54356: PUSH
54357: LD_EXP 157
54361: PUSH
54362: LD_VAR 0 5
54366: ARRAY
54367: PUSH
54368: LD_INT 1
54370: PLUS
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PPUSH
54376: LD_VAR 0 2
54380: PUSH
54381: LD_VAR 0 3
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PPUSH
54390: CALL 60789 0 3
54394: ST_TO_ADDR
// result := true ;
54395: LD_ADDR_VAR 0 4
54399: PUSH
54400: LD_INT 1
54402: ST_TO_ADDR
// end ;
54403: LD_VAR 0 4
54407: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
54408: LD_INT 0
54410: PPUSH
54411: PPUSH
54412: PPUSH
// if not unit in minersList then
54413: LD_VAR 0 1
54417: PUSH
54418: LD_EXP 156
54422: IN
54423: NOT
54424: IFFALSE 54428
// exit ;
54426: GO 54822
// index := GetElementIndex ( minersList , unit ) ;
54428: LD_ADDR_VAR 0 6
54432: PUSH
54433: LD_EXP 156
54437: PPUSH
54438: LD_VAR 0 1
54442: PPUSH
54443: CALL 60572 0 2
54447: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
54448: LD_ADDR_VAR 0 5
54452: PUSH
54453: DOUBLE
54454: LD_EXP 157
54458: PUSH
54459: LD_VAR 0 6
54463: ARRAY
54464: INC
54465: ST_TO_ADDR
54466: LD_INT 1
54468: PUSH
54469: FOR_DOWNTO
54470: IFFALSE 54633
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
54472: LD_EXP 157
54476: PUSH
54477: LD_VAR 0 6
54481: ARRAY
54482: PUSH
54483: LD_VAR 0 5
54487: ARRAY
54488: PUSH
54489: LD_INT 1
54491: ARRAY
54492: PUSH
54493: LD_VAR 0 2
54497: EQUAL
54498: IFFALSE 54528
54500: PUSH
54501: LD_EXP 157
54505: PUSH
54506: LD_VAR 0 6
54510: ARRAY
54511: PUSH
54512: LD_VAR 0 5
54516: ARRAY
54517: PUSH
54518: LD_INT 2
54520: ARRAY
54521: PUSH
54522: LD_VAR 0 3
54526: EQUAL
54527: AND
54528: IFFALSE 54631
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
54530: LD_EXP 157
54534: PUSH
54535: LD_VAR 0 6
54539: ARRAY
54540: PUSH
54541: LD_VAR 0 5
54545: ARRAY
54546: PUSH
54547: LD_INT 1
54549: ARRAY
54550: PPUSH
54551: LD_EXP 157
54555: PUSH
54556: LD_VAR 0 6
54560: ARRAY
54561: PUSH
54562: LD_VAR 0 5
54566: ARRAY
54567: PUSH
54568: LD_INT 2
54570: ARRAY
54571: PPUSH
54572: LD_VAR 0 1
54576: PPUSH
54577: CALL_OW 255
54581: PPUSH
54582: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
54586: LD_ADDR_EXP 157
54590: PUSH
54591: LD_EXP 157
54595: PPUSH
54596: LD_VAR 0 6
54600: PPUSH
54601: LD_EXP 157
54605: PUSH
54606: LD_VAR 0 6
54610: ARRAY
54611: PPUSH
54612: LD_VAR 0 5
54616: PPUSH
54617: CALL_OW 3
54621: PPUSH
54622: CALL_OW 1
54626: ST_TO_ADDR
// exit ;
54627: POP
54628: POP
54629: GO 54822
// end ; end ;
54631: GO 54469
54633: POP
54634: POP
// for i := minerMinesList [ index ] downto 1 do
54635: LD_ADDR_VAR 0 5
54639: PUSH
54640: DOUBLE
54641: LD_EXP 157
54645: PUSH
54646: LD_VAR 0 6
54650: ARRAY
54651: INC
54652: ST_TO_ADDR
54653: LD_INT 1
54655: PUSH
54656: FOR_DOWNTO
54657: IFFALSE 54820
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
54659: LD_EXP 157
54663: PUSH
54664: LD_VAR 0 6
54668: ARRAY
54669: PUSH
54670: LD_VAR 0 5
54674: ARRAY
54675: PUSH
54676: LD_INT 1
54678: ARRAY
54679: PPUSH
54680: LD_EXP 157
54684: PUSH
54685: LD_VAR 0 6
54689: ARRAY
54690: PUSH
54691: LD_VAR 0 5
54695: ARRAY
54696: PUSH
54697: LD_INT 2
54699: ARRAY
54700: PPUSH
54701: LD_VAR 0 2
54705: PPUSH
54706: LD_VAR 0 3
54710: PPUSH
54711: CALL_OW 298
54715: PUSH
54716: LD_INT 6
54718: LESS
54719: IFFALSE 54818
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
54721: LD_EXP 157
54725: PUSH
54726: LD_VAR 0 6
54730: ARRAY
54731: PUSH
54732: LD_VAR 0 5
54736: ARRAY
54737: PUSH
54738: LD_INT 1
54740: ARRAY
54741: PPUSH
54742: LD_EXP 157
54746: PUSH
54747: LD_VAR 0 6
54751: ARRAY
54752: PUSH
54753: LD_VAR 0 5
54757: ARRAY
54758: PUSH
54759: LD_INT 2
54761: ARRAY
54762: PPUSH
54763: LD_VAR 0 1
54767: PPUSH
54768: CALL_OW 255
54772: PPUSH
54773: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
54777: LD_ADDR_EXP 157
54781: PUSH
54782: LD_EXP 157
54786: PPUSH
54787: LD_VAR 0 6
54791: PPUSH
54792: LD_EXP 157
54796: PUSH
54797: LD_VAR 0 6
54801: ARRAY
54802: PPUSH
54803: LD_VAR 0 5
54807: PPUSH
54808: CALL_OW 3
54812: PPUSH
54813: CALL_OW 1
54817: ST_TO_ADDR
// end ; end ;
54818: GO 54656
54820: POP
54821: POP
// end ;
54822: LD_VAR 0 4
54826: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
54827: LD_INT 0
54829: PPUSH
54830: PPUSH
54831: PPUSH
54832: PPUSH
54833: PPUSH
54834: PPUSH
54835: PPUSH
54836: PPUSH
54837: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
54838: LD_VAR 0 1
54842: PPUSH
54843: CALL_OW 264
54847: PUSH
54848: LD_INT 81
54850: EQUAL
54851: NOT
54852: IFTRUE 54867
54854: PUSH
54855: LD_VAR 0 1
54859: PUSH
54860: LD_EXP 156
54864: IN
54865: NOT
54866: OR
54867: IFFALSE 54871
// exit ;
54869: GO 55197
// index := GetElementIndex ( minersList , unit ) ;
54871: LD_ADDR_VAR 0 6
54875: PUSH
54876: LD_EXP 156
54880: PPUSH
54881: LD_VAR 0 1
54885: PPUSH
54886: CALL 60572 0 2
54890: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
54891: LD_ADDR_VAR 0 8
54895: PUSH
54896: LD_EXP 158
54900: PUSH
54901: LD_EXP 157
54905: PUSH
54906: LD_VAR 0 6
54910: ARRAY
54911: MINUS
54912: ST_TO_ADDR
// if not minesFreeAmount then
54913: LD_VAR 0 8
54917: NOT
54918: IFFALSE 54922
// exit ;
54920: GO 55197
// tmp := [ ] ;
54922: LD_ADDR_VAR 0 7
54926: PUSH
54927: EMPTY
54928: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
54929: LD_ADDR_VAR 0 5
54933: PUSH
54934: DOUBLE
54935: LD_INT 1
54937: DEC
54938: ST_TO_ADDR
54939: LD_VAR 0 8
54943: PUSH
54944: FOR_TO
54945: IFFALSE 55144
// begin _d := rand ( 0 , 5 ) ;
54947: LD_ADDR_VAR 0 11
54951: PUSH
54952: LD_INT 0
54954: PPUSH
54955: LD_INT 5
54957: PPUSH
54958: CALL_OW 12
54962: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
54963: LD_ADDR_VAR 0 12
54967: PUSH
54968: LD_INT 2
54970: PPUSH
54971: LD_INT 6
54973: PPUSH
54974: CALL_OW 12
54978: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
54979: LD_ADDR_VAR 0 9
54983: PUSH
54984: LD_VAR 0 2
54988: PPUSH
54989: LD_VAR 0 11
54993: PPUSH
54994: LD_VAR 0 12
54998: PPUSH
54999: CALL_OW 272
55003: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
55004: LD_ADDR_VAR 0 10
55008: PUSH
55009: LD_VAR 0 3
55013: PPUSH
55014: LD_VAR 0 11
55018: PPUSH
55019: LD_VAR 0 12
55023: PPUSH
55024: CALL_OW 273
55028: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
55029: LD_VAR 0 9
55033: PPUSH
55034: LD_VAR 0 10
55038: PPUSH
55039: CALL_OW 488
55043: IFFALSE 55067
55045: PUSH
55046: LD_VAR 0 9
55050: PUSH
55051: LD_VAR 0 10
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_VAR 0 7
55064: IN
55065: NOT
55066: AND
55067: IFFALSE 55086
55069: PUSH
55070: LD_VAR 0 9
55074: PPUSH
55075: LD_VAR 0 10
55079: PPUSH
55080: CALL_OW 458
55084: NOT
55085: AND
55086: IFFALSE 55128
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
55088: LD_ADDR_VAR 0 7
55092: PUSH
55093: LD_VAR 0 7
55097: PPUSH
55098: LD_VAR 0 7
55102: PUSH
55103: LD_INT 1
55105: PLUS
55106: PPUSH
55107: LD_VAR 0 9
55111: PUSH
55112: LD_VAR 0 10
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PPUSH
55121: CALL_OW 1
55125: ST_TO_ADDR
55126: GO 55142
// i := i - 1 ;
55128: LD_ADDR_VAR 0 5
55132: PUSH
55133: LD_VAR 0 5
55137: PUSH
55138: LD_INT 1
55140: MINUS
55141: ST_TO_ADDR
// end ;
55142: GO 54944
55144: POP
55145: POP
// for i in tmp do
55146: LD_ADDR_VAR 0 5
55150: PUSH
55151: LD_VAR 0 7
55155: PUSH
55156: FOR_IN
55157: IFFALSE 55195
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
55159: LD_VAR 0 1
55163: PPUSH
55164: LD_VAR 0 5
55168: PUSH
55169: LD_INT 1
55171: ARRAY
55172: PPUSH
55173: LD_VAR 0 5
55177: PUSH
55178: LD_INT 2
55180: ARRAY
55181: PPUSH
55182: CALL 54129 0 3
55186: NOT
55187: IFFALSE 55193
// exit ;
55189: POP
55190: POP
55191: GO 55197
55193: GO 55156
55195: POP
55196: POP
// end ;
55197: LD_VAR 0 4
55201: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
55202: LD_INT 0
55204: PPUSH
55205: PPUSH
55206: PPUSH
55207: PPUSH
55208: PPUSH
55209: PPUSH
55210: PPUSH
55211: PPUSH
55212: PPUSH
// if GetClass ( unit ) <> class_sniper then
55213: LD_VAR 0 1
55217: PPUSH
55218: CALL_OW 257
55222: PUSH
55223: LD_INT 5
55225: NONEQUAL
55226: IFFALSE 55230
// exit ;
55228: GO 55700
// dist := 8 ;
55230: LD_ADDR_VAR 0 5
55234: PUSH
55235: LD_INT 8
55237: ST_TO_ADDR
// viewRange := 12 ;
55238: LD_ADDR_VAR 0 8
55242: PUSH
55243: LD_INT 12
55245: ST_TO_ADDR
// side := GetSide ( unit ) ;
55246: LD_ADDR_VAR 0 6
55250: PUSH
55251: LD_VAR 0 1
55255: PPUSH
55256: CALL_OW 255
55260: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
55261: LD_INT 61
55263: PPUSH
55264: LD_VAR 0 6
55268: PPUSH
55269: CALL_OW 321
55273: PUSH
55274: LD_INT 2
55276: EQUAL
55277: IFFALSE 55287
// viewRange := 16 ;
55279: LD_ADDR_VAR 0 8
55283: PUSH
55284: LD_INT 16
55286: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
55287: LD_VAR 0 1
55291: PPUSH
55292: LD_VAR 0 2
55296: PPUSH
55297: LD_VAR 0 3
55301: PPUSH
55302: CALL_OW 297
55306: PUSH
55307: LD_VAR 0 5
55311: GREATER
55312: IFFALSE 55391
// begin ComMoveXY ( unit , x , y ) ;
55314: LD_VAR 0 1
55318: PPUSH
55319: LD_VAR 0 2
55323: PPUSH
55324: LD_VAR 0 3
55328: PPUSH
55329: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
55333: LD_INT 35
55335: PPUSH
55336: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
55340: LD_VAR 0 1
55344: PPUSH
55345: LD_VAR 0 2
55349: PPUSH
55350: LD_VAR 0 3
55354: PPUSH
55355: CALL 92618 0 3
55359: NOT
55360: IFFALSE 55364
// exit ;
55362: GO 55700
// until GetDistUnitXY ( unit , x , y ) < dist ;
55364: LD_VAR 0 1
55368: PPUSH
55369: LD_VAR 0 2
55373: PPUSH
55374: LD_VAR 0 3
55378: PPUSH
55379: CALL_OW 297
55383: PUSH
55384: LD_VAR 0 5
55388: LESS
55389: IFFALSE 55333
// end ; ComTurnXY ( unit , x , y ) ;
55391: LD_VAR 0 1
55395: PPUSH
55396: LD_VAR 0 2
55400: PPUSH
55401: LD_VAR 0 3
55405: PPUSH
55406: CALL_OW 118
// repeat if Multiplayer then
55410: LD_OWVAR 4
55414: IFFALSE 55425
// wait ( 35 ) else
55416: LD_INT 35
55418: PPUSH
55419: CALL_OW 67
55423: GO 55432
// wait ( 5 ) ;
55425: LD_INT 5
55427: PPUSH
55428: CALL_OW 67
// _d := GetDir ( unit ) ;
55432: LD_ADDR_VAR 0 11
55436: PUSH
55437: LD_VAR 0 1
55441: PPUSH
55442: CALL_OW 254
55446: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
55447: LD_ADDR_VAR 0 7
55451: PUSH
55452: LD_VAR 0 1
55456: PPUSH
55457: CALL_OW 250
55461: PPUSH
55462: LD_VAR 0 1
55466: PPUSH
55467: CALL_OW 251
55471: PPUSH
55472: LD_VAR 0 2
55476: PPUSH
55477: LD_VAR 0 3
55481: PPUSH
55482: CALL 95254 0 4
55486: ST_TO_ADDR
// until dir = _d ;
55487: LD_VAR 0 7
55491: PUSH
55492: LD_VAR 0 11
55496: EQUAL
55497: IFFALSE 55410
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
55499: LD_ADDR_VAR 0 9
55503: PUSH
55504: LD_VAR 0 1
55508: PPUSH
55509: CALL_OW 250
55513: PPUSH
55514: LD_VAR 0 7
55518: PPUSH
55519: LD_VAR 0 5
55523: PPUSH
55524: CALL_OW 272
55528: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
55529: LD_ADDR_VAR 0 10
55533: PUSH
55534: LD_VAR 0 1
55538: PPUSH
55539: CALL_OW 251
55543: PPUSH
55544: LD_VAR 0 7
55548: PPUSH
55549: LD_VAR 0 5
55553: PPUSH
55554: CALL_OW 273
55558: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55559: LD_VAR 0 9
55563: PPUSH
55564: LD_VAR 0 10
55568: PPUSH
55569: CALL_OW 488
55573: NOT
55574: IFFALSE 55578
// exit ;
55576: GO 55700
// ComAnimCustom ( unit , 1 ) ;
55578: LD_VAR 0 1
55582: PPUSH
55583: LD_INT 1
55585: PPUSH
55586: CALL_OW 592
// p := 0 ;
55590: LD_ADDR_VAR 0 12
55594: PUSH
55595: LD_INT 0
55597: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
55598: LD_VAR 0 9
55602: PPUSH
55603: LD_VAR 0 10
55607: PPUSH
55608: LD_VAR 0 6
55612: PPUSH
55613: LD_VAR 0 8
55617: PPUSH
55618: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
55622: LD_INT 35
55624: PPUSH
55625: CALL_OW 67
// p := Inc ( p ) ;
55629: LD_ADDR_VAR 0 12
55633: PUSH
55634: LD_VAR 0 12
55638: PPUSH
55639: CALL 95210 0 1
55643: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
55644: LD_VAR 0 12
55648: PUSH
55649: LD_INT 3
55651: EQUAL
55652: IFTRUE 55666
55654: PUSH
55655: LD_VAR 0 1
55659: PPUSH
55660: CALL_OW 302
55664: NOT
55665: OR
55666: IFTRUE 55679
55668: PUSH
55669: LD_VAR 0 1
55673: PPUSH
55674: CALL_OW 301
55678: OR
55679: IFFALSE 55622
// RemoveSeeing ( _x , _y , side ) ;
55681: LD_VAR 0 9
55685: PPUSH
55686: LD_VAR 0 10
55690: PPUSH
55691: LD_VAR 0 6
55695: PPUSH
55696: CALL_OW 331
// end ; end_of_file
55700: LD_VAR 0 4
55704: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
55705: LD_INT 0
55707: PPUSH
55708: PPUSH
// if exist_mode then
55709: LD_VAR 0 2
55713: IFFALSE 55759
// begin unit := CreateCharacter ( prefix & ident ) ;
55715: LD_ADDR_VAR 0 5
55719: PUSH
55720: LD_VAR 0 3
55724: PUSH
55725: LD_VAR 0 1
55729: STR
55730: PPUSH
55731: CALL_OW 34
55735: ST_TO_ADDR
// if unit then
55736: LD_VAR 0 5
55740: IFFALSE 55757
// DeleteCharacters ( prefix & ident ) ;
55742: LD_VAR 0 3
55746: PUSH
55747: LD_VAR 0 1
55751: STR
55752: PPUSH
55753: CALL_OW 40
// end else
55757: GO 55774
// unit := NewCharacter ( ident ) ;
55759: LD_ADDR_VAR 0 5
55763: PUSH
55764: LD_VAR 0 1
55768: PPUSH
55769: CALL_OW 25
55773: ST_TO_ADDR
// result := unit ;
55774: LD_ADDR_VAR 0 4
55778: PUSH
55779: LD_VAR 0 5
55783: ST_TO_ADDR
// end ;
55784: LD_VAR 0 4
55788: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
55789: LD_INT 0
55791: PPUSH
55792: PPUSH
// if exist_mode then
55793: LD_VAR 0 2
55797: IFFALSE 55822
// unit := CreateCharacter ( prefix & ident ) else
55799: LD_ADDR_VAR 0 5
55803: PUSH
55804: LD_VAR 0 3
55808: PUSH
55809: LD_VAR 0 1
55813: STR
55814: PPUSH
55815: CALL_OW 34
55819: ST_TO_ADDR
55820: GO 55837
// unit := NewCharacter ( ident ) ;
55822: LD_ADDR_VAR 0 5
55826: PUSH
55827: LD_VAR 0 1
55831: PPUSH
55832: CALL_OW 25
55836: ST_TO_ADDR
// result := unit ;
55837: LD_ADDR_VAR 0 4
55841: PUSH
55842: LD_VAR 0 5
55846: ST_TO_ADDR
// end ;
55847: LD_VAR 0 4
55851: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
55852: LD_INT 0
55854: PPUSH
55855: PPUSH
// if not side or not nation then
55856: LD_VAR 0 1
55860: NOT
55861: IFTRUE 55870
55863: PUSH
55864: LD_VAR 0 2
55868: NOT
55869: OR
55870: IFFALSE 55874
// exit ;
55872: GO 56644
// case nation of nation_american :
55874: LD_VAR 0 2
55878: PUSH
55879: LD_INT 1
55881: DOUBLE
55882: EQUAL
55883: IFTRUE 55887
55885: GO 56101
55887: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
55888: LD_ADDR_VAR 0 4
55892: PUSH
55893: LD_INT 35
55895: PUSH
55896: LD_INT 45
55898: PUSH
55899: LD_INT 46
55901: PUSH
55902: LD_INT 47
55904: PUSH
55905: LD_INT 82
55907: PUSH
55908: LD_INT 83
55910: PUSH
55911: LD_INT 84
55913: PUSH
55914: LD_INT 85
55916: PUSH
55917: LD_INT 86
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: LD_INT 2
55925: PUSH
55926: LD_INT 6
55928: PUSH
55929: LD_INT 15
55931: PUSH
55932: LD_INT 16
55934: PUSH
55935: LD_INT 7
55937: PUSH
55938: LD_INT 12
55940: PUSH
55941: LD_INT 13
55943: PUSH
55944: LD_INT 10
55946: PUSH
55947: LD_INT 14
55949: PUSH
55950: LD_INT 20
55952: PUSH
55953: LD_INT 21
55955: PUSH
55956: LD_INT 22
55958: PUSH
55959: LD_INT 25
55961: PUSH
55962: LD_INT 32
55964: PUSH
55965: LD_INT 27
55967: PUSH
55968: LD_INT 36
55970: PUSH
55971: LD_INT 69
55973: PUSH
55974: LD_INT 39
55976: PUSH
55977: LD_INT 34
55979: PUSH
55980: LD_INT 40
55982: PUSH
55983: LD_INT 48
55985: PUSH
55986: LD_INT 49
55988: PUSH
55989: LD_INT 50
55991: PUSH
55992: LD_INT 51
55994: PUSH
55995: LD_INT 52
55997: PUSH
55998: LD_INT 53
56000: PUSH
56001: LD_INT 54
56003: PUSH
56004: LD_INT 55
56006: PUSH
56007: LD_INT 56
56009: PUSH
56010: LD_INT 57
56012: PUSH
56013: LD_INT 58
56015: PUSH
56016: LD_INT 59
56018: PUSH
56019: LD_INT 60
56021: PUSH
56022: LD_INT 61
56024: PUSH
56025: LD_INT 62
56027: PUSH
56028: LD_INT 80
56030: PUSH
56031: LD_INT 82
56033: PUSH
56034: LD_INT 83
56036: PUSH
56037: LD_INT 84
56039: PUSH
56040: LD_INT 85
56042: PUSH
56043: LD_INT 86
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: ST_TO_ADDR
56099: GO 56566
56101: LD_INT 2
56103: DOUBLE
56104: EQUAL
56105: IFTRUE 56109
56107: GO 56335
56109: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
56110: LD_ADDR_VAR 0 4
56114: PUSH
56115: LD_INT 35
56117: PUSH
56118: LD_INT 45
56120: PUSH
56121: LD_INT 46
56123: PUSH
56124: LD_INT 47
56126: PUSH
56127: LD_INT 82
56129: PUSH
56130: LD_INT 83
56132: PUSH
56133: LD_INT 84
56135: PUSH
56136: LD_INT 85
56138: PUSH
56139: LD_INT 87
56141: PUSH
56142: LD_INT 70
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: LD_INT 11
56150: PUSH
56151: LD_INT 3
56153: PUSH
56154: LD_INT 4
56156: PUSH
56157: LD_INT 5
56159: PUSH
56160: LD_INT 6
56162: PUSH
56163: LD_INT 15
56165: PUSH
56166: LD_INT 18
56168: PUSH
56169: LD_INT 7
56171: PUSH
56172: LD_INT 17
56174: PUSH
56175: LD_INT 8
56177: PUSH
56178: LD_INT 20
56180: PUSH
56181: LD_INT 21
56183: PUSH
56184: LD_INT 22
56186: PUSH
56187: LD_INT 72
56189: PUSH
56190: LD_INT 26
56192: PUSH
56193: LD_INT 69
56195: PUSH
56196: LD_INT 39
56198: PUSH
56199: LD_INT 40
56201: PUSH
56202: LD_INT 41
56204: PUSH
56205: LD_INT 42
56207: PUSH
56208: LD_INT 43
56210: PUSH
56211: LD_INT 48
56213: PUSH
56214: LD_INT 49
56216: PUSH
56217: LD_INT 50
56219: PUSH
56220: LD_INT 51
56222: PUSH
56223: LD_INT 52
56225: PUSH
56226: LD_INT 53
56228: PUSH
56229: LD_INT 54
56231: PUSH
56232: LD_INT 55
56234: PUSH
56235: LD_INT 56
56237: PUSH
56238: LD_INT 60
56240: PUSH
56241: LD_INT 61
56243: PUSH
56244: LD_INT 62
56246: PUSH
56247: LD_INT 66
56249: PUSH
56250: LD_INT 67
56252: PUSH
56253: LD_INT 68
56255: PUSH
56256: LD_INT 81
56258: PUSH
56259: LD_INT 82
56261: PUSH
56262: LD_INT 83
56264: PUSH
56265: LD_INT 84
56267: PUSH
56268: LD_INT 85
56270: PUSH
56271: LD_INT 87
56273: PUSH
56274: LD_INT 88
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: ST_TO_ADDR
56333: GO 56566
56335: LD_INT 3
56337: DOUBLE
56338: EQUAL
56339: IFTRUE 56343
56341: GO 56565
56343: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
56344: LD_ADDR_VAR 0 4
56348: PUSH
56349: LD_INT 46
56351: PUSH
56352: LD_INT 47
56354: PUSH
56355: LD_INT 1
56357: PUSH
56358: LD_INT 2
56360: PUSH
56361: LD_INT 82
56363: PUSH
56364: LD_INT 83
56366: PUSH
56367: LD_INT 84
56369: PUSH
56370: LD_INT 85
56372: PUSH
56373: LD_INT 86
56375: PUSH
56376: LD_INT 11
56378: PUSH
56379: LD_INT 9
56381: PUSH
56382: LD_INT 20
56384: PUSH
56385: LD_INT 19
56387: PUSH
56388: LD_INT 21
56390: PUSH
56391: LD_INT 24
56393: PUSH
56394: LD_INT 22
56396: PUSH
56397: LD_INT 25
56399: PUSH
56400: LD_INT 28
56402: PUSH
56403: LD_INT 29
56405: PUSH
56406: LD_INT 30
56408: PUSH
56409: LD_INT 31
56411: PUSH
56412: LD_INT 37
56414: PUSH
56415: LD_INT 38
56417: PUSH
56418: LD_INT 32
56420: PUSH
56421: LD_INT 27
56423: PUSH
56424: LD_INT 33
56426: PUSH
56427: LD_INT 69
56429: PUSH
56430: LD_INT 39
56432: PUSH
56433: LD_INT 34
56435: PUSH
56436: LD_INT 40
56438: PUSH
56439: LD_INT 71
56441: PUSH
56442: LD_INT 23
56444: PUSH
56445: LD_INT 44
56447: PUSH
56448: LD_INT 48
56450: PUSH
56451: LD_INT 49
56453: PUSH
56454: LD_INT 50
56456: PUSH
56457: LD_INT 51
56459: PUSH
56460: LD_INT 52
56462: PUSH
56463: LD_INT 53
56465: PUSH
56466: LD_INT 54
56468: PUSH
56469: LD_INT 55
56471: PUSH
56472: LD_INT 56
56474: PUSH
56475: LD_INT 57
56477: PUSH
56478: LD_INT 58
56480: PUSH
56481: LD_INT 59
56483: PUSH
56484: LD_INT 63
56486: PUSH
56487: LD_INT 64
56489: PUSH
56490: LD_INT 65
56492: PUSH
56493: LD_INT 82
56495: PUSH
56496: LD_INT 83
56498: PUSH
56499: LD_INT 84
56501: PUSH
56502: LD_INT 85
56504: PUSH
56505: LD_INT 86
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: ST_TO_ADDR
56563: GO 56566
56565: POP
// if state > - 1 and state < 3 then
56566: LD_VAR 0 3
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: GREATER
56575: IFFALSE 56587
56577: PUSH
56578: LD_VAR 0 3
56582: PUSH
56583: LD_INT 3
56585: LESS
56586: AND
56587: IFFALSE 56644
// for i in result do
56589: LD_ADDR_VAR 0 5
56593: PUSH
56594: LD_VAR 0 4
56598: PUSH
56599: FOR_IN
56600: IFFALSE 56642
// if GetTech ( i , side ) <> state then
56602: LD_VAR 0 5
56606: PPUSH
56607: LD_VAR 0 1
56611: PPUSH
56612: CALL_OW 321
56616: PUSH
56617: LD_VAR 0 3
56621: NONEQUAL
56622: IFFALSE 56640
// result := result diff i ;
56624: LD_ADDR_VAR 0 4
56628: PUSH
56629: LD_VAR 0 4
56633: PUSH
56634: LD_VAR 0 5
56638: DIFF
56639: ST_TO_ADDR
56640: GO 56599
56642: POP
56643: POP
// end ;
56644: LD_VAR 0 4
56648: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
56649: LD_INT 0
56651: PPUSH
56652: PPUSH
56653: PPUSH
// result := true ;
56654: LD_ADDR_VAR 0 3
56658: PUSH
56659: LD_INT 1
56661: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
56662: LD_ADDR_VAR 0 5
56666: PUSH
56667: LD_VAR 0 2
56671: PPUSH
56672: CALL_OW 480
56676: ST_TO_ADDR
// if not tmp then
56677: LD_VAR 0 5
56681: NOT
56682: IFFALSE 56686
// exit ;
56684: GO 56735
// for i in tmp do
56686: LD_ADDR_VAR 0 4
56690: PUSH
56691: LD_VAR 0 5
56695: PUSH
56696: FOR_IN
56697: IFFALSE 56733
// if GetTech ( i , side ) <> state_researched then
56699: LD_VAR 0 4
56703: PPUSH
56704: LD_VAR 0 1
56708: PPUSH
56709: CALL_OW 321
56713: PUSH
56714: LD_INT 2
56716: NONEQUAL
56717: IFFALSE 56731
// begin result := false ;
56719: LD_ADDR_VAR 0 3
56723: PUSH
56724: LD_INT 0
56726: ST_TO_ADDR
// exit ;
56727: POP
56728: POP
56729: GO 56735
// end ;
56731: GO 56696
56733: POP
56734: POP
// end ;
56735: LD_VAR 0 3
56739: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
56740: LD_INT 0
56742: PPUSH
56743: PPUSH
56744: PPUSH
56745: PPUSH
56746: PPUSH
56747: PPUSH
56748: PPUSH
56749: PPUSH
56750: PPUSH
56751: PPUSH
56752: PPUSH
56753: PPUSH
56754: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
56755: LD_VAR 0 1
56759: NOT
56760: IFTRUE 56777
56762: PUSH
56763: LD_VAR 0 1
56767: PPUSH
56768: CALL_OW 257
56772: PUSH
56773: LD_INT 9
56775: NONEQUAL
56776: OR
56777: IFFALSE 56781
// exit ;
56779: GO 57360
// side := GetSide ( unit ) ;
56781: LD_ADDR_VAR 0 9
56785: PUSH
56786: LD_VAR 0 1
56790: PPUSH
56791: CALL_OW 255
56795: ST_TO_ADDR
// tech_space := tech_spacanom ;
56796: LD_ADDR_VAR 0 12
56800: PUSH
56801: LD_INT 29
56803: ST_TO_ADDR
// tech_time := tech_taurad ;
56804: LD_ADDR_VAR 0 13
56808: PUSH
56809: LD_INT 28
56811: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
56812: LD_ADDR_VAR 0 11
56816: PUSH
56817: LD_VAR 0 1
56821: PPUSH
56822: CALL_OW 310
56826: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
56827: LD_VAR 0 11
56831: PPUSH
56832: CALL_OW 247
56836: PUSH
56837: LD_INT 2
56839: EQUAL
56840: IFFALSE 56844
// exit ;
56842: GO 57360
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
56844: LD_ADDR_VAR 0 8
56848: PUSH
56849: LD_INT 81
56851: PUSH
56852: LD_VAR 0 9
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 3
56863: PUSH
56864: LD_INT 21
56866: PUSH
56867: LD_INT 3
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PPUSH
56882: CALL_OW 69
56886: ST_TO_ADDR
// if not tmp then
56887: LD_VAR 0 8
56891: NOT
56892: IFFALSE 56896
// exit ;
56894: GO 57360
// if in_unit then
56896: LD_VAR 0 11
56900: IFFALSE 56924
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
56902: LD_ADDR_VAR 0 10
56906: PUSH
56907: LD_VAR 0 8
56911: PPUSH
56912: LD_VAR 0 11
56916: PPUSH
56917: CALL_OW 74
56921: ST_TO_ADDR
56922: GO 56944
// enemy := NearestUnitToUnit ( tmp , unit ) ;
56924: LD_ADDR_VAR 0 10
56928: PUSH
56929: LD_VAR 0 8
56933: PPUSH
56934: LD_VAR 0 1
56938: PPUSH
56939: CALL_OW 74
56943: ST_TO_ADDR
// if not enemy then
56944: LD_VAR 0 10
56948: NOT
56949: IFFALSE 56953
// exit ;
56951: GO 57360
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
56953: LD_VAR 0 11
56957: IFFALSE 56979
56959: PUSH
56960: LD_VAR 0 11
56964: PPUSH
56965: LD_VAR 0 10
56969: PPUSH
56970: CALL_OW 296
56974: PUSH
56975: LD_INT 13
56977: GREATER
56978: AND
56979: IFTRUE 57001
56981: PUSH
56982: LD_VAR 0 1
56986: PPUSH
56987: LD_VAR 0 10
56991: PPUSH
56992: CALL_OW 296
56996: PUSH
56997: LD_INT 12
56999: GREATER
57000: OR
57001: IFFALSE 57005
// exit ;
57003: GO 57360
// missile := [ 1 ] ;
57005: LD_ADDR_VAR 0 14
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: EMPTY
57014: LIST
57015: ST_TO_ADDR
// if Researched ( side , tech_space ) then
57016: LD_VAR 0 9
57020: PPUSH
57021: LD_VAR 0 12
57025: PPUSH
57026: CALL_OW 325
57030: IFFALSE 57059
// missile := Replace ( missile , missile + 1 , 2 ) ;
57032: LD_ADDR_VAR 0 14
57036: PUSH
57037: LD_VAR 0 14
57041: PPUSH
57042: LD_VAR 0 14
57046: PUSH
57047: LD_INT 1
57049: PLUS
57050: PPUSH
57051: LD_INT 2
57053: PPUSH
57054: CALL_OW 1
57058: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
57059: LD_VAR 0 9
57063: PPUSH
57064: LD_VAR 0 13
57068: PPUSH
57069: CALL_OW 325
57073: IFFALSE 57097
57075: PUSH
57076: LD_VAR 0 10
57080: PPUSH
57081: CALL_OW 255
57085: PPUSH
57086: LD_VAR 0 13
57090: PPUSH
57091: CALL_OW 325
57095: NOT
57096: AND
57097: IFFALSE 57126
// missile := Replace ( missile , missile + 1 , 3 ) ;
57099: LD_ADDR_VAR 0 14
57103: PUSH
57104: LD_VAR 0 14
57108: PPUSH
57109: LD_VAR 0 14
57113: PUSH
57114: LD_INT 1
57116: PLUS
57117: PPUSH
57118: LD_INT 3
57120: PPUSH
57121: CALL_OW 1
57125: ST_TO_ADDR
// if missile < 2 then
57126: LD_VAR 0 14
57130: PUSH
57131: LD_INT 2
57133: LESS
57134: IFFALSE 57138
// exit ;
57136: GO 57360
// x := GetX ( enemy ) ;
57138: LD_ADDR_VAR 0 4
57142: PUSH
57143: LD_VAR 0 10
57147: PPUSH
57148: CALL_OW 250
57152: ST_TO_ADDR
// y := GetY ( enemy ) ;
57153: LD_ADDR_VAR 0 5
57157: PUSH
57158: LD_VAR 0 10
57162: PPUSH
57163: CALL_OW 251
57167: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
57168: LD_ADDR_VAR 0 6
57172: PUSH
57173: LD_VAR 0 4
57177: PUSH
57178: LD_INT 1
57180: NEG
57181: PPUSH
57182: LD_INT 1
57184: PPUSH
57185: CALL_OW 12
57189: PLUS
57190: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
57191: LD_ADDR_VAR 0 7
57195: PUSH
57196: LD_VAR 0 5
57200: PUSH
57201: LD_INT 1
57203: NEG
57204: PPUSH
57205: LD_INT 1
57207: PPUSH
57208: CALL_OW 12
57212: PLUS
57213: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57214: LD_VAR 0 6
57218: PPUSH
57219: LD_VAR 0 7
57223: PPUSH
57224: CALL_OW 488
57228: NOT
57229: IFFALSE 57251
// begin _x := x ;
57231: LD_ADDR_VAR 0 6
57235: PUSH
57236: LD_VAR 0 4
57240: ST_TO_ADDR
// _y := y ;
57241: LD_ADDR_VAR 0 7
57245: PUSH
57246: LD_VAR 0 5
57250: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
57251: LD_ADDR_VAR 0 3
57255: PUSH
57256: LD_INT 1
57258: PPUSH
57259: LD_VAR 0 14
57263: PPUSH
57264: CALL_OW 12
57268: ST_TO_ADDR
// case i of 1 :
57269: LD_VAR 0 3
57273: PUSH
57274: LD_INT 1
57276: DOUBLE
57277: EQUAL
57278: IFTRUE 57282
57280: GO 57299
57282: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
57283: LD_VAR 0 1
57287: PPUSH
57288: LD_VAR 0 10
57292: PPUSH
57293: CALL_OW 115
57297: GO 57360
57299: LD_INT 2
57301: DOUBLE
57302: EQUAL
57303: IFTRUE 57307
57305: GO 57329
57307: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
57308: LD_VAR 0 1
57312: PPUSH
57313: LD_VAR 0 6
57317: PPUSH
57318: LD_VAR 0 7
57322: PPUSH
57323: CALL_OW 153
57327: GO 57360
57329: LD_INT 3
57331: DOUBLE
57332: EQUAL
57333: IFTRUE 57337
57335: GO 57359
57337: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
57338: LD_VAR 0 1
57342: PPUSH
57343: LD_VAR 0 6
57347: PPUSH
57348: LD_VAR 0 7
57352: PPUSH
57353: CALL_OW 154
57357: GO 57360
57359: POP
// end ;
57360: LD_VAR 0 2
57364: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
57365: LD_INT 0
57367: PPUSH
57368: PPUSH
57369: PPUSH
57370: PPUSH
57371: PPUSH
57372: PPUSH
// if not unit or not building then
57373: LD_VAR 0 1
57377: NOT
57378: IFTRUE 57387
57380: PUSH
57381: LD_VAR 0 2
57385: NOT
57386: OR
57387: IFFALSE 57391
// exit ;
57389: GO 57549
// x := GetX ( building ) ;
57391: LD_ADDR_VAR 0 5
57395: PUSH
57396: LD_VAR 0 2
57400: PPUSH
57401: CALL_OW 250
57405: ST_TO_ADDR
// y := GetY ( building ) ;
57406: LD_ADDR_VAR 0 6
57410: PUSH
57411: LD_VAR 0 2
57415: PPUSH
57416: CALL_OW 251
57420: ST_TO_ADDR
// for i := 0 to 5 do
57421: LD_ADDR_VAR 0 4
57425: PUSH
57426: DOUBLE
57427: LD_INT 0
57429: DEC
57430: ST_TO_ADDR
57431: LD_INT 5
57433: PUSH
57434: FOR_TO
57435: IFFALSE 57547
// begin _x := ShiftX ( x , i , 3 ) ;
57437: LD_ADDR_VAR 0 7
57441: PUSH
57442: LD_VAR 0 5
57446: PPUSH
57447: LD_VAR 0 4
57451: PPUSH
57452: LD_INT 3
57454: PPUSH
57455: CALL_OW 272
57459: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
57460: LD_ADDR_VAR 0 8
57464: PUSH
57465: LD_VAR 0 6
57469: PPUSH
57470: LD_VAR 0 4
57474: PPUSH
57475: LD_INT 3
57477: PPUSH
57478: CALL_OW 273
57482: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57483: LD_VAR 0 7
57487: PPUSH
57488: LD_VAR 0 8
57492: PPUSH
57493: CALL_OW 488
57497: NOT
57498: IFFALSE 57502
// continue ;
57500: GO 57434
// if HexInfo ( _x , _y ) = 0 then
57502: LD_VAR 0 7
57506: PPUSH
57507: LD_VAR 0 8
57511: PPUSH
57512: CALL_OW 428
57516: PUSH
57517: LD_INT 0
57519: EQUAL
57520: IFFALSE 57545
// begin ComMoveXY ( unit , _x , _y ) ;
57522: LD_VAR 0 1
57526: PPUSH
57527: LD_VAR 0 7
57531: PPUSH
57532: LD_VAR 0 8
57536: PPUSH
57537: CALL_OW 111
// exit ;
57541: POP
57542: POP
57543: GO 57549
// end ; end ;
57545: GO 57434
57547: POP
57548: POP
// end ;
57549: LD_VAR 0 3
57553: RET
// export function ScanBase ( side , base_area ) ; begin
57554: LD_INT 0
57556: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
57557: LD_ADDR_VAR 0 3
57561: PUSH
57562: LD_VAR 0 2
57566: PPUSH
57567: LD_INT 81
57569: PUSH
57570: LD_VAR 0 1
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PPUSH
57579: CALL_OW 70
57583: ST_TO_ADDR
// end ;
57584: LD_VAR 0 3
57588: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
57589: LD_INT 0
57591: PPUSH
57592: PPUSH
57593: PPUSH
57594: PPUSH
// result := false ;
57595: LD_ADDR_VAR 0 2
57599: PUSH
57600: LD_INT 0
57602: ST_TO_ADDR
// side := GetSide ( unit ) ;
57603: LD_ADDR_VAR 0 3
57607: PUSH
57608: LD_VAR 0 1
57612: PPUSH
57613: CALL_OW 255
57617: ST_TO_ADDR
// nat := GetNation ( unit ) ;
57618: LD_ADDR_VAR 0 4
57622: PUSH
57623: LD_VAR 0 1
57627: PPUSH
57628: CALL_OW 248
57632: ST_TO_ADDR
// case nat of 1 :
57633: LD_VAR 0 4
57637: PUSH
57638: LD_INT 1
57640: DOUBLE
57641: EQUAL
57642: IFTRUE 57646
57644: GO 57657
57646: POP
// tech := tech_lassight ; 2 :
57647: LD_ADDR_VAR 0 5
57651: PUSH
57652: LD_INT 12
57654: ST_TO_ADDR
57655: GO 57696
57657: LD_INT 2
57659: DOUBLE
57660: EQUAL
57661: IFTRUE 57665
57663: GO 57676
57665: POP
// tech := tech_mortar ; 3 :
57666: LD_ADDR_VAR 0 5
57670: PUSH
57671: LD_INT 41
57673: ST_TO_ADDR
57674: GO 57696
57676: LD_INT 3
57678: DOUBLE
57679: EQUAL
57680: IFTRUE 57684
57682: GO 57695
57684: POP
// tech := tech_bazooka ; end ;
57685: LD_ADDR_VAR 0 5
57689: PUSH
57690: LD_INT 44
57692: ST_TO_ADDR
57693: GO 57696
57695: POP
// if Researched ( side , tech ) then
57696: LD_VAR 0 3
57700: PPUSH
57701: LD_VAR 0 5
57705: PPUSH
57706: CALL_OW 325
57710: IFFALSE 57737
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
57712: LD_ADDR_VAR 0 2
57716: PUSH
57717: LD_INT 5
57719: PUSH
57720: LD_INT 8
57722: PUSH
57723: LD_INT 9
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: LIST
57730: PUSH
57731: LD_VAR 0 4
57735: ARRAY
57736: ST_TO_ADDR
// end ;
57737: LD_VAR 0 2
57741: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
57742: LD_INT 0
57744: PPUSH
57745: PPUSH
57746: PPUSH
// if not mines then
57747: LD_VAR 0 2
57751: NOT
57752: IFFALSE 57756
// exit ;
57754: GO 57900
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
57756: LD_ADDR_VAR 0 5
57760: PUSH
57761: LD_INT 81
57763: PUSH
57764: LD_VAR 0 1
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 3
57775: PUSH
57776: LD_INT 21
57778: PUSH
57779: LD_INT 3
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PPUSH
57794: CALL_OW 69
57798: ST_TO_ADDR
// for i in mines do
57799: LD_ADDR_VAR 0 4
57803: PUSH
57804: LD_VAR 0 2
57808: PUSH
57809: FOR_IN
57810: IFFALSE 57898
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
57812: LD_VAR 0 4
57816: PUSH
57817: LD_INT 1
57819: ARRAY
57820: PPUSH
57821: LD_VAR 0 4
57825: PUSH
57826: LD_INT 2
57828: ARRAY
57829: PPUSH
57830: CALL_OW 458
57834: NOT
57835: IFFALSE 57839
// continue ;
57837: GO 57809
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
57839: LD_VAR 0 4
57843: PUSH
57844: LD_INT 1
57846: ARRAY
57847: PPUSH
57848: LD_VAR 0 4
57852: PUSH
57853: LD_INT 2
57855: ARRAY
57856: PPUSH
57857: CALL_OW 428
57861: PUSH
57862: LD_VAR 0 5
57866: IN
57867: IFFALSE 57896
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
57869: LD_VAR 0 4
57873: PUSH
57874: LD_INT 1
57876: ARRAY
57877: PPUSH
57878: LD_VAR 0 4
57882: PUSH
57883: LD_INT 2
57885: ARRAY
57886: PPUSH
57887: LD_VAR 0 1
57891: PPUSH
57892: CALL_OW 456
// end ;
57896: GO 57809
57898: POP
57899: POP
// end ;
57900: LD_VAR 0 3
57904: RET
// export function Count ( array ) ; begin
57905: LD_INT 0
57907: PPUSH
// result := array + 0 ;
57908: LD_ADDR_VAR 0 2
57912: PUSH
57913: LD_VAR 0 1
57917: PUSH
57918: LD_INT 0
57920: PLUS
57921: ST_TO_ADDR
// end ;
57922: LD_VAR 0 2
57926: RET
// export function IsEmpty ( building ) ; begin
57927: LD_INT 0
57929: PPUSH
// if not building then
57930: LD_VAR 0 1
57934: NOT
57935: IFFALSE 57939
// exit ;
57937: GO 57982
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
57939: LD_ADDR_VAR 0 2
57943: PUSH
57944: LD_VAR 0 1
57948: PUSH
57949: LD_INT 22
57951: PUSH
57952: LD_VAR 0 1
57956: PPUSH
57957: CALL_OW 255
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 58
57968: PUSH
57969: EMPTY
57970: LIST
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PPUSH
57976: CALL_OW 69
57980: IN
57981: ST_TO_ADDR
// end ;
57982: LD_VAR 0 2
57986: RET
// export function IsNotFull ( building ) ; var places ; begin
57987: LD_INT 0
57989: PPUSH
57990: PPUSH
// if not building then
57991: LD_VAR 0 1
57995: NOT
57996: IFFALSE 58000
// exit ;
57998: GO 58028
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
58000: LD_ADDR_VAR 0 2
58004: PUSH
58005: LD_VAR 0 1
58009: PPUSH
58010: LD_INT 3
58012: PUSH
58013: LD_INT 62
58015: PUSH
58016: EMPTY
58017: LIST
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PPUSH
58023: CALL_OW 72
58027: ST_TO_ADDR
// end ;
58028: LD_VAR 0 2
58032: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
58033: LD_INT 0
58035: PPUSH
58036: PPUSH
58037: PPUSH
58038: PPUSH
// tmp := [ ] ;
58039: LD_ADDR_VAR 0 3
58043: PUSH
58044: EMPTY
58045: ST_TO_ADDR
// list := [ ] ;
58046: LD_ADDR_VAR 0 5
58050: PUSH
58051: EMPTY
58052: ST_TO_ADDR
// for i = 16 to 25 do
58053: LD_ADDR_VAR 0 4
58057: PUSH
58058: DOUBLE
58059: LD_INT 16
58061: DEC
58062: ST_TO_ADDR
58063: LD_INT 25
58065: PUSH
58066: FOR_TO
58067: IFFALSE 58140
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
58069: LD_ADDR_VAR 0 3
58073: PUSH
58074: LD_VAR 0 3
58078: PUSH
58079: LD_INT 22
58081: PUSH
58082: LD_VAR 0 1
58086: PPUSH
58087: CALL_OW 255
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 91
58098: PUSH
58099: LD_VAR 0 1
58103: PUSH
58104: LD_INT 6
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 30
58114: PUSH
58115: LD_VAR 0 4
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: LIST
58128: PUSH
58129: EMPTY
58130: LIST
58131: PPUSH
58132: CALL_OW 69
58136: ADD
58137: ST_TO_ADDR
58138: GO 58066
58140: POP
58141: POP
// for i = 1 to tmp do
58142: LD_ADDR_VAR 0 4
58146: PUSH
58147: DOUBLE
58148: LD_INT 1
58150: DEC
58151: ST_TO_ADDR
58152: LD_VAR 0 3
58156: PUSH
58157: FOR_TO
58158: IFFALSE 58246
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
58160: LD_ADDR_VAR 0 5
58164: PUSH
58165: LD_VAR 0 5
58169: PUSH
58170: LD_VAR 0 3
58174: PUSH
58175: LD_VAR 0 4
58179: ARRAY
58180: PPUSH
58181: CALL_OW 266
58185: PUSH
58186: LD_VAR 0 3
58190: PUSH
58191: LD_VAR 0 4
58195: ARRAY
58196: PPUSH
58197: CALL_OW 250
58201: PUSH
58202: LD_VAR 0 3
58206: PUSH
58207: LD_VAR 0 4
58211: ARRAY
58212: PPUSH
58213: CALL_OW 251
58217: PUSH
58218: LD_VAR 0 3
58222: PUSH
58223: LD_VAR 0 4
58227: ARRAY
58228: PPUSH
58229: CALL_OW 254
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: PUSH
58240: EMPTY
58241: LIST
58242: ADD
58243: ST_TO_ADDR
58244: GO 58157
58246: POP
58247: POP
// result := list ;
58248: LD_ADDR_VAR 0 2
58252: PUSH
58253: LD_VAR 0 5
58257: ST_TO_ADDR
// end ;
58258: LD_VAR 0 2
58262: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
58263: LD_INT 0
58265: PPUSH
58266: PPUSH
58267: PPUSH
58268: PPUSH
58269: PPUSH
58270: PPUSH
58271: PPUSH
// if not factory then
58272: LD_VAR 0 1
58276: NOT
58277: IFFALSE 58281
// exit ;
58279: GO 58884
// if control = control_apeman then
58281: LD_VAR 0 4
58285: PUSH
58286: LD_INT 5
58288: EQUAL
58289: IFFALSE 58398
// begin tmp := UnitsInside ( factory ) ;
58291: LD_ADDR_VAR 0 8
58295: PUSH
58296: LD_VAR 0 1
58300: PPUSH
58301: CALL_OW 313
58305: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
58306: LD_VAR 0 8
58310: PPUSH
58311: LD_INT 25
58313: PUSH
58314: LD_INT 12
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PPUSH
58321: CALL_OW 72
58325: NOT
58326: IFFALSE 58336
// control := control_manual ;
58328: LD_ADDR_VAR 0 4
58332: PUSH
58333: LD_INT 1
58335: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
58336: LD_ADDR_VAR 0 8
58340: PUSH
58341: LD_VAR 0 1
58345: PPUSH
58346: CALL 58033 0 1
58350: ST_TO_ADDR
// if tmp then
58351: LD_VAR 0 8
58355: IFFALSE 58398
// begin for i in tmp do
58357: LD_ADDR_VAR 0 7
58361: PUSH
58362: LD_VAR 0 8
58366: PUSH
58367: FOR_IN
58368: IFFALSE 58396
// if i [ 1 ] = b_ext_radio then
58370: LD_VAR 0 7
58374: PUSH
58375: LD_INT 1
58377: ARRAY
58378: PUSH
58379: LD_INT 22
58381: EQUAL
58382: IFFALSE 58394
// begin control := control_remote ;
58384: LD_ADDR_VAR 0 4
58388: PUSH
58389: LD_INT 2
58391: ST_TO_ADDR
// break ;
58392: GO 58396
// end ;
58394: GO 58367
58396: POP
58397: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
58398: LD_VAR 0 1
58402: PPUSH
58403: LD_VAR 0 2
58407: PPUSH
58408: LD_VAR 0 3
58412: PPUSH
58413: LD_VAR 0 4
58417: PPUSH
58418: LD_VAR 0 5
58422: PPUSH
58423: CALL_OW 448
58427: IFFALSE 58462
// begin result := [ chassis , engine , control , weapon ] ;
58429: LD_ADDR_VAR 0 6
58433: PUSH
58434: LD_VAR 0 2
58438: PUSH
58439: LD_VAR 0 3
58443: PUSH
58444: LD_VAR 0 4
58448: PUSH
58449: LD_VAR 0 5
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: ST_TO_ADDR
// exit ;
58460: GO 58884
// end ; _chassis := AvailableChassisList ( factory ) ;
58462: LD_ADDR_VAR 0 9
58466: PUSH
58467: LD_VAR 0 1
58471: PPUSH
58472: CALL_OW 475
58476: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
58477: LD_ADDR_VAR 0 11
58481: PUSH
58482: LD_VAR 0 1
58486: PPUSH
58487: CALL_OW 476
58491: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
58492: LD_ADDR_VAR 0 12
58496: PUSH
58497: LD_VAR 0 1
58501: PPUSH
58502: CALL_OW 477
58506: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
58507: LD_ADDR_VAR 0 10
58511: PUSH
58512: LD_VAR 0 1
58516: PPUSH
58517: CALL_OW 478
58521: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
58522: LD_VAR 0 9
58526: NOT
58527: IFTRUE 58536
58529: PUSH
58530: LD_VAR 0 11
58534: NOT
58535: OR
58536: IFTRUE 58545
58538: PUSH
58539: LD_VAR 0 12
58543: NOT
58544: OR
58545: IFTRUE 58554
58547: PUSH
58548: LD_VAR 0 10
58552: NOT
58553: OR
58554: IFFALSE 58589
// begin result := [ chassis , engine , control , weapon ] ;
58556: LD_ADDR_VAR 0 6
58560: PUSH
58561: LD_VAR 0 2
58565: PUSH
58566: LD_VAR 0 3
58570: PUSH
58571: LD_VAR 0 4
58575: PUSH
58576: LD_VAR 0 5
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: ST_TO_ADDR
// exit ;
58587: GO 58884
// end ; if not chassis in _chassis then
58589: LD_VAR 0 2
58593: PUSH
58594: LD_VAR 0 9
58598: IN
58599: NOT
58600: IFFALSE 58626
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
58602: LD_ADDR_VAR 0 2
58606: PUSH
58607: LD_VAR 0 9
58611: PUSH
58612: LD_INT 1
58614: PPUSH
58615: LD_VAR 0 9
58619: PPUSH
58620: CALL_OW 12
58624: ARRAY
58625: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
58626: LD_VAR 0 2
58630: PPUSH
58631: LD_VAR 0 3
58635: PPUSH
58636: CALL 58889 0 2
58640: NOT
58641: IFFALSE 58702
// repeat engine := _engine [ 1 ] ;
58643: LD_ADDR_VAR 0 3
58647: PUSH
58648: LD_VAR 0 11
58652: PUSH
58653: LD_INT 1
58655: ARRAY
58656: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
58657: LD_ADDR_VAR 0 11
58661: PUSH
58662: LD_VAR 0 11
58666: PPUSH
58667: LD_INT 1
58669: PPUSH
58670: CALL_OW 3
58674: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
58675: LD_VAR 0 2
58679: PPUSH
58680: LD_VAR 0 3
58684: PPUSH
58685: CALL 58889 0 2
58689: IFTRUE 58700
58691: PUSH
58692: LD_VAR 0 11
58696: PUSH
58697: EMPTY
58698: EQUAL
58699: OR
58700: IFFALSE 58643
// if not control in _control then
58702: LD_VAR 0 4
58706: PUSH
58707: LD_VAR 0 12
58711: IN
58712: NOT
58713: IFFALSE 58739
// control := _control [ rand ( 1 , _control ) ] ;
58715: LD_ADDR_VAR 0 4
58719: PUSH
58720: LD_VAR 0 12
58724: PUSH
58725: LD_INT 1
58727: PPUSH
58728: LD_VAR 0 12
58732: PPUSH
58733: CALL_OW 12
58737: ARRAY
58738: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
58739: LD_VAR 0 2
58743: PPUSH
58744: LD_VAR 0 5
58748: PPUSH
58749: CALL 59111 0 2
58753: NOT
58754: IFFALSE 58815
// repeat weapon := _weapon [ 1 ] ;
58756: LD_ADDR_VAR 0 5
58760: PUSH
58761: LD_VAR 0 10
58765: PUSH
58766: LD_INT 1
58768: ARRAY
58769: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
58770: LD_ADDR_VAR 0 10
58774: PUSH
58775: LD_VAR 0 10
58779: PPUSH
58780: LD_INT 1
58782: PPUSH
58783: CALL_OW 3
58787: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
58788: LD_VAR 0 2
58792: PPUSH
58793: LD_VAR 0 5
58797: PPUSH
58798: CALL 59111 0 2
58802: IFTRUE 58813
58804: PUSH
58805: LD_VAR 0 10
58809: PUSH
58810: EMPTY
58811: EQUAL
58812: OR
58813: IFFALSE 58756
// result := [ ] ;
58815: LD_ADDR_VAR 0 6
58819: PUSH
58820: EMPTY
58821: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
58822: LD_VAR 0 1
58826: PPUSH
58827: LD_VAR 0 2
58831: PPUSH
58832: LD_VAR 0 3
58836: PPUSH
58837: LD_VAR 0 4
58841: PPUSH
58842: LD_VAR 0 5
58846: PPUSH
58847: CALL_OW 448
58851: IFFALSE 58884
// result := [ chassis , engine , control , weapon ] ;
58853: LD_ADDR_VAR 0 6
58857: PUSH
58858: LD_VAR 0 2
58862: PUSH
58863: LD_VAR 0 3
58867: PUSH
58868: LD_VAR 0 4
58872: PUSH
58873: LD_VAR 0 5
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: ST_TO_ADDR
// end ;
58884: LD_VAR 0 6
58888: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
58889: LD_INT 0
58891: PPUSH
// if not chassis or not engine then
58892: LD_VAR 0 1
58896: NOT
58897: IFTRUE 58906
58899: PUSH
58900: LD_VAR 0 2
58904: NOT
58905: OR
58906: IFFALSE 58910
// exit ;
58908: GO 59106
// case engine of engine_solar :
58910: LD_VAR 0 2
58914: PUSH
58915: LD_INT 2
58917: DOUBLE
58918: EQUAL
58919: IFTRUE 58923
58921: GO 58961
58923: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
58924: LD_ADDR_VAR 0 3
58928: PUSH
58929: LD_INT 11
58931: PUSH
58932: LD_INT 12
58934: PUSH
58935: LD_INT 13
58937: PUSH
58938: LD_INT 14
58940: PUSH
58941: LD_INT 1
58943: PUSH
58944: LD_INT 2
58946: PUSH
58947: LD_INT 3
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: ST_TO_ADDR
58959: GO 59090
58961: LD_INT 1
58963: DOUBLE
58964: EQUAL
58965: IFTRUE 58969
58967: GO 59031
58969: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
58970: LD_ADDR_VAR 0 3
58974: PUSH
58975: LD_INT 11
58977: PUSH
58978: LD_INT 12
58980: PUSH
58981: LD_INT 13
58983: PUSH
58984: LD_INT 14
58986: PUSH
58987: LD_INT 1
58989: PUSH
58990: LD_INT 2
58992: PUSH
58993: LD_INT 3
58995: PUSH
58996: LD_INT 4
58998: PUSH
58999: LD_INT 5
59001: PUSH
59002: LD_INT 21
59004: PUSH
59005: LD_INT 23
59007: PUSH
59008: LD_INT 22
59010: PUSH
59011: LD_INT 24
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: ST_TO_ADDR
59029: GO 59090
59031: LD_INT 3
59033: DOUBLE
59034: EQUAL
59035: IFTRUE 59039
59037: GO 59089
59039: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
59040: LD_ADDR_VAR 0 3
59044: PUSH
59045: LD_INT 13
59047: PUSH
59048: LD_INT 14
59050: PUSH
59051: LD_INT 2
59053: PUSH
59054: LD_INT 3
59056: PUSH
59057: LD_INT 4
59059: PUSH
59060: LD_INT 5
59062: PUSH
59063: LD_INT 21
59065: PUSH
59066: LD_INT 22
59068: PUSH
59069: LD_INT 23
59071: PUSH
59072: LD_INT 24
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: ST_TO_ADDR
59087: GO 59090
59089: POP
// result := ( chassis in result ) ;
59090: LD_ADDR_VAR 0 3
59094: PUSH
59095: LD_VAR 0 1
59099: PUSH
59100: LD_VAR 0 3
59104: IN
59105: ST_TO_ADDR
// end ;
59106: LD_VAR 0 3
59110: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
59111: LD_INT 0
59113: PPUSH
// if not chassis or not weapon then
59114: LD_VAR 0 1
59118: NOT
59119: IFTRUE 59128
59121: PUSH
59122: LD_VAR 0 2
59126: NOT
59127: OR
59128: IFFALSE 59132
// exit ;
59130: GO 60192
// case weapon of us_machine_gun :
59132: LD_VAR 0 2
59136: PUSH
59137: LD_INT 2
59139: DOUBLE
59140: EQUAL
59141: IFTRUE 59145
59143: GO 59175
59145: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
59146: LD_ADDR_VAR 0 3
59150: PUSH
59151: LD_INT 1
59153: PUSH
59154: LD_INT 2
59156: PUSH
59157: LD_INT 3
59159: PUSH
59160: LD_INT 4
59162: PUSH
59163: LD_INT 5
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: ST_TO_ADDR
59173: GO 60176
59175: LD_INT 3
59177: DOUBLE
59178: EQUAL
59179: IFTRUE 59183
59181: GO 59213
59183: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
59184: LD_ADDR_VAR 0 3
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: LD_INT 2
59194: PUSH
59195: LD_INT 3
59197: PUSH
59198: LD_INT 4
59200: PUSH
59201: LD_INT 5
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: ST_TO_ADDR
59211: GO 60176
59213: LD_INT 11
59215: DOUBLE
59216: EQUAL
59217: IFTRUE 59221
59219: GO 59251
59221: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
59222: LD_ADDR_VAR 0 3
59226: PUSH
59227: LD_INT 1
59229: PUSH
59230: LD_INT 2
59232: PUSH
59233: LD_INT 3
59235: PUSH
59236: LD_INT 4
59238: PUSH
59239: LD_INT 5
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: ST_TO_ADDR
59249: GO 60176
59251: LD_INT 4
59253: DOUBLE
59254: EQUAL
59255: IFTRUE 59259
59257: GO 59285
59259: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
59260: LD_ADDR_VAR 0 3
59264: PUSH
59265: LD_INT 2
59267: PUSH
59268: LD_INT 3
59270: PUSH
59271: LD_INT 4
59273: PUSH
59274: LD_INT 5
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: ST_TO_ADDR
59283: GO 60176
59285: LD_INT 5
59287: DOUBLE
59288: EQUAL
59289: IFTRUE 59293
59291: GO 59319
59293: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
59294: LD_ADDR_VAR 0 3
59298: PUSH
59299: LD_INT 2
59301: PUSH
59302: LD_INT 3
59304: PUSH
59305: LD_INT 4
59307: PUSH
59308: LD_INT 5
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: ST_TO_ADDR
59317: GO 60176
59319: LD_INT 9
59321: DOUBLE
59322: EQUAL
59323: IFTRUE 59327
59325: GO 59353
59327: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
59328: LD_ADDR_VAR 0 3
59332: PUSH
59333: LD_INT 2
59335: PUSH
59336: LD_INT 3
59338: PUSH
59339: LD_INT 4
59341: PUSH
59342: LD_INT 5
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: ST_TO_ADDR
59351: GO 60176
59353: LD_INT 7
59355: DOUBLE
59356: EQUAL
59357: IFTRUE 59361
59359: GO 59387
59361: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
59362: LD_ADDR_VAR 0 3
59366: PUSH
59367: LD_INT 2
59369: PUSH
59370: LD_INT 3
59372: PUSH
59373: LD_INT 4
59375: PUSH
59376: LD_INT 5
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: ST_TO_ADDR
59385: GO 60176
59387: LD_INT 12
59389: DOUBLE
59390: EQUAL
59391: IFTRUE 59395
59393: GO 59421
59395: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
59396: LD_ADDR_VAR 0 3
59400: PUSH
59401: LD_INT 2
59403: PUSH
59404: LD_INT 3
59406: PUSH
59407: LD_INT 4
59409: PUSH
59410: LD_INT 5
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: ST_TO_ADDR
59419: GO 60176
59421: LD_INT 13
59423: DOUBLE
59424: EQUAL
59425: IFTRUE 59429
59427: GO 59455
59429: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
59430: LD_ADDR_VAR 0 3
59434: PUSH
59435: LD_INT 2
59437: PUSH
59438: LD_INT 3
59440: PUSH
59441: LD_INT 4
59443: PUSH
59444: LD_INT 5
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: ST_TO_ADDR
59453: GO 60176
59455: LD_INT 14
59457: DOUBLE
59458: EQUAL
59459: IFTRUE 59463
59461: GO 59481
59463: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
59464: LD_ADDR_VAR 0 3
59468: PUSH
59469: LD_INT 4
59471: PUSH
59472: LD_INT 5
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: ST_TO_ADDR
59479: GO 60176
59481: LD_INT 6
59483: DOUBLE
59484: EQUAL
59485: IFTRUE 59489
59487: GO 59507
59489: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
59490: LD_ADDR_VAR 0 3
59494: PUSH
59495: LD_INT 4
59497: PUSH
59498: LD_INT 5
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: ST_TO_ADDR
59505: GO 60176
59507: LD_INT 10
59509: DOUBLE
59510: EQUAL
59511: IFTRUE 59515
59513: GO 59533
59515: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
59516: LD_ADDR_VAR 0 3
59520: PUSH
59521: LD_INT 4
59523: PUSH
59524: LD_INT 5
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: ST_TO_ADDR
59531: GO 60176
59533: LD_INT 22
59535: DOUBLE
59536: EQUAL
59537: IFTRUE 59541
59539: GO 59567
59541: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
59542: LD_ADDR_VAR 0 3
59546: PUSH
59547: LD_INT 11
59549: PUSH
59550: LD_INT 12
59552: PUSH
59553: LD_INT 13
59555: PUSH
59556: LD_INT 14
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: ST_TO_ADDR
59565: GO 60176
59567: LD_INT 23
59569: DOUBLE
59570: EQUAL
59571: IFTRUE 59575
59573: GO 59601
59575: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
59576: LD_ADDR_VAR 0 3
59580: PUSH
59581: LD_INT 11
59583: PUSH
59584: LD_INT 12
59586: PUSH
59587: LD_INT 13
59589: PUSH
59590: LD_INT 14
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: ST_TO_ADDR
59599: GO 60176
59601: LD_INT 24
59603: DOUBLE
59604: EQUAL
59605: IFTRUE 59609
59607: GO 59635
59609: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
59610: LD_ADDR_VAR 0 3
59614: PUSH
59615: LD_INT 11
59617: PUSH
59618: LD_INT 12
59620: PUSH
59621: LD_INT 13
59623: PUSH
59624: LD_INT 14
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: ST_TO_ADDR
59633: GO 60176
59635: LD_INT 30
59637: DOUBLE
59638: EQUAL
59639: IFTRUE 59643
59641: GO 59669
59643: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
59644: LD_ADDR_VAR 0 3
59648: PUSH
59649: LD_INT 11
59651: PUSH
59652: LD_INT 12
59654: PUSH
59655: LD_INT 13
59657: PUSH
59658: LD_INT 14
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: ST_TO_ADDR
59667: GO 60176
59669: LD_INT 25
59671: DOUBLE
59672: EQUAL
59673: IFTRUE 59677
59675: GO 59695
59677: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
59678: LD_ADDR_VAR 0 3
59682: PUSH
59683: LD_INT 13
59685: PUSH
59686: LD_INT 14
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: ST_TO_ADDR
59693: GO 60176
59695: LD_INT 27
59697: DOUBLE
59698: EQUAL
59699: IFTRUE 59703
59701: GO 59721
59703: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
59704: LD_ADDR_VAR 0 3
59708: PUSH
59709: LD_INT 13
59711: PUSH
59712: LD_INT 14
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: ST_TO_ADDR
59719: GO 60176
59721: LD_INT 92
59723: DOUBLE
59724: EQUAL
59725: IFTRUE 59729
59727: GO 59755
59729: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
59730: LD_ADDR_VAR 0 3
59734: PUSH
59735: LD_INT 11
59737: PUSH
59738: LD_INT 12
59740: PUSH
59741: LD_INT 13
59743: PUSH
59744: LD_INT 14
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: ST_TO_ADDR
59753: GO 60176
59755: LD_INT 28
59757: DOUBLE
59758: EQUAL
59759: IFTRUE 59763
59761: GO 59781
59763: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
59764: LD_ADDR_VAR 0 3
59768: PUSH
59769: LD_INT 13
59771: PUSH
59772: LD_INT 14
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: ST_TO_ADDR
59779: GO 60176
59781: LD_INT 29
59783: DOUBLE
59784: EQUAL
59785: IFTRUE 59789
59787: GO 59807
59789: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
59790: LD_ADDR_VAR 0 3
59794: PUSH
59795: LD_INT 13
59797: PUSH
59798: LD_INT 14
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: ST_TO_ADDR
59805: GO 60176
59807: LD_INT 31
59809: DOUBLE
59810: EQUAL
59811: IFTRUE 59815
59813: GO 59833
59815: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
59816: LD_ADDR_VAR 0 3
59820: PUSH
59821: LD_INT 13
59823: PUSH
59824: LD_INT 14
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: ST_TO_ADDR
59831: GO 60176
59833: LD_INT 26
59835: DOUBLE
59836: EQUAL
59837: IFTRUE 59841
59839: GO 59859
59841: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
59842: LD_ADDR_VAR 0 3
59846: PUSH
59847: LD_INT 13
59849: PUSH
59850: LD_INT 14
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: ST_TO_ADDR
59857: GO 60176
59859: LD_INT 42
59861: DOUBLE
59862: EQUAL
59863: IFTRUE 59867
59865: GO 59893
59867: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
59868: LD_ADDR_VAR 0 3
59872: PUSH
59873: LD_INT 21
59875: PUSH
59876: LD_INT 22
59878: PUSH
59879: LD_INT 23
59881: PUSH
59882: LD_INT 24
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: ST_TO_ADDR
59891: GO 60176
59893: LD_INT 43
59895: DOUBLE
59896: EQUAL
59897: IFTRUE 59901
59899: GO 59927
59901: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
59902: LD_ADDR_VAR 0 3
59906: PUSH
59907: LD_INT 21
59909: PUSH
59910: LD_INT 22
59912: PUSH
59913: LD_INT 23
59915: PUSH
59916: LD_INT 24
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: ST_TO_ADDR
59925: GO 60176
59927: LD_INT 44
59929: DOUBLE
59930: EQUAL
59931: IFTRUE 59935
59933: GO 59961
59935: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
59936: LD_ADDR_VAR 0 3
59940: PUSH
59941: LD_INT 21
59943: PUSH
59944: LD_INT 22
59946: PUSH
59947: LD_INT 23
59949: PUSH
59950: LD_INT 24
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: ST_TO_ADDR
59959: GO 60176
59961: LD_INT 45
59963: DOUBLE
59964: EQUAL
59965: IFTRUE 59969
59967: GO 59995
59969: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
59970: LD_ADDR_VAR 0 3
59974: PUSH
59975: LD_INT 21
59977: PUSH
59978: LD_INT 22
59980: PUSH
59981: LD_INT 23
59983: PUSH
59984: LD_INT 24
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: ST_TO_ADDR
59993: GO 60176
59995: LD_INT 49
59997: DOUBLE
59998: EQUAL
59999: IFTRUE 60003
60001: GO 60029
60003: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
60004: LD_ADDR_VAR 0 3
60008: PUSH
60009: LD_INT 21
60011: PUSH
60012: LD_INT 22
60014: PUSH
60015: LD_INT 23
60017: PUSH
60018: LD_INT 24
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: ST_TO_ADDR
60027: GO 60176
60029: LD_INT 51
60031: DOUBLE
60032: EQUAL
60033: IFTRUE 60037
60035: GO 60063
60037: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
60038: LD_ADDR_VAR 0 3
60042: PUSH
60043: LD_INT 21
60045: PUSH
60046: LD_INT 22
60048: PUSH
60049: LD_INT 23
60051: PUSH
60052: LD_INT 24
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: ST_TO_ADDR
60061: GO 60176
60063: LD_INT 52
60065: DOUBLE
60066: EQUAL
60067: IFTRUE 60071
60069: GO 60097
60071: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
60072: LD_ADDR_VAR 0 3
60076: PUSH
60077: LD_INT 21
60079: PUSH
60080: LD_INT 22
60082: PUSH
60083: LD_INT 23
60085: PUSH
60086: LD_INT 24
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: ST_TO_ADDR
60095: GO 60176
60097: LD_INT 53
60099: DOUBLE
60100: EQUAL
60101: IFTRUE 60105
60103: GO 60123
60105: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
60106: LD_ADDR_VAR 0 3
60110: PUSH
60111: LD_INT 23
60113: PUSH
60114: LD_INT 24
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: ST_TO_ADDR
60121: GO 60176
60123: LD_INT 46
60125: DOUBLE
60126: EQUAL
60127: IFTRUE 60131
60129: GO 60149
60131: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
60132: LD_ADDR_VAR 0 3
60136: PUSH
60137: LD_INT 23
60139: PUSH
60140: LD_INT 24
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: ST_TO_ADDR
60147: GO 60176
60149: LD_INT 47
60151: DOUBLE
60152: EQUAL
60153: IFTRUE 60157
60155: GO 60175
60157: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
60158: LD_ADDR_VAR 0 3
60162: PUSH
60163: LD_INT 23
60165: PUSH
60166: LD_INT 24
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: ST_TO_ADDR
60173: GO 60176
60175: POP
// result := ( chassis in result ) ;
60176: LD_ADDR_VAR 0 3
60180: PUSH
60181: LD_VAR 0 1
60185: PUSH
60186: LD_VAR 0 3
60190: IN
60191: ST_TO_ADDR
// end ;
60192: LD_VAR 0 3
60196: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
60197: LD_INT 0
60199: PPUSH
60200: PPUSH
60201: PPUSH
60202: PPUSH
60203: PPUSH
60204: PPUSH
60205: PPUSH
// result := array ;
60206: LD_ADDR_VAR 0 5
60210: PUSH
60211: LD_VAR 0 1
60215: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
60216: LD_VAR 0 1
60220: NOT
60221: IFTRUE 60230
60223: PUSH
60224: LD_VAR 0 2
60228: NOT
60229: OR
60230: IFTRUE 60239
60232: PUSH
60233: LD_VAR 0 3
60237: NOT
60238: OR
60239: IFTRUE 60253
60241: PUSH
60242: LD_VAR 0 2
60246: PUSH
60247: LD_VAR 0 1
60251: GREATER
60252: OR
60253: IFTRUE 60267
60255: PUSH
60256: LD_VAR 0 3
60260: PUSH
60261: LD_VAR 0 1
60265: GREATER
60266: OR
60267: IFFALSE 60271
// exit ;
60269: GO 60567
// if direction then
60271: LD_VAR 0 4
60275: IFFALSE 60339
// begin d := 1 ;
60277: LD_ADDR_VAR 0 9
60281: PUSH
60282: LD_INT 1
60284: ST_TO_ADDR
// if i_from > i_to then
60285: LD_VAR 0 2
60289: PUSH
60290: LD_VAR 0 3
60294: GREATER
60295: IFFALSE 60321
// length := ( array - i_from ) + i_to else
60297: LD_ADDR_VAR 0 11
60301: PUSH
60302: LD_VAR 0 1
60306: PUSH
60307: LD_VAR 0 2
60311: MINUS
60312: PUSH
60313: LD_VAR 0 3
60317: PLUS
60318: ST_TO_ADDR
60319: GO 60337
// length := i_to - i_from ;
60321: LD_ADDR_VAR 0 11
60325: PUSH
60326: LD_VAR 0 3
60330: PUSH
60331: LD_VAR 0 2
60335: MINUS
60336: ST_TO_ADDR
// end else
60337: GO 60400
// begin d := - 1 ;
60339: LD_ADDR_VAR 0 9
60343: PUSH
60344: LD_INT 1
60346: NEG
60347: ST_TO_ADDR
// if i_from > i_to then
60348: LD_VAR 0 2
60352: PUSH
60353: LD_VAR 0 3
60357: GREATER
60358: IFFALSE 60378
// length := i_from - i_to else
60360: LD_ADDR_VAR 0 11
60364: PUSH
60365: LD_VAR 0 2
60369: PUSH
60370: LD_VAR 0 3
60374: MINUS
60375: ST_TO_ADDR
60376: GO 60400
// length := ( array - i_to ) + i_from ;
60378: LD_ADDR_VAR 0 11
60382: PUSH
60383: LD_VAR 0 1
60387: PUSH
60388: LD_VAR 0 3
60392: MINUS
60393: PUSH
60394: LD_VAR 0 2
60398: PLUS
60399: ST_TO_ADDR
// end ; if not length then
60400: LD_VAR 0 11
60404: NOT
60405: IFFALSE 60409
// exit ;
60407: GO 60567
// tmp := array ;
60409: LD_ADDR_VAR 0 10
60413: PUSH
60414: LD_VAR 0 1
60418: ST_TO_ADDR
// for i = 1 to length do
60419: LD_ADDR_VAR 0 6
60423: PUSH
60424: DOUBLE
60425: LD_INT 1
60427: DEC
60428: ST_TO_ADDR
60429: LD_VAR 0 11
60433: PUSH
60434: FOR_TO
60435: IFFALSE 60555
// begin for j = 1 to array do
60437: LD_ADDR_VAR 0 7
60441: PUSH
60442: DOUBLE
60443: LD_INT 1
60445: DEC
60446: ST_TO_ADDR
60447: LD_VAR 0 1
60451: PUSH
60452: FOR_TO
60453: IFFALSE 60541
// begin k := j + d ;
60455: LD_ADDR_VAR 0 8
60459: PUSH
60460: LD_VAR 0 7
60464: PUSH
60465: LD_VAR 0 9
60469: PLUS
60470: ST_TO_ADDR
// if k > array then
60471: LD_VAR 0 8
60475: PUSH
60476: LD_VAR 0 1
60480: GREATER
60481: IFFALSE 60491
// k := 1 ;
60483: LD_ADDR_VAR 0 8
60487: PUSH
60488: LD_INT 1
60490: ST_TO_ADDR
// if not k then
60491: LD_VAR 0 8
60495: NOT
60496: IFFALSE 60508
// k := array ;
60498: LD_ADDR_VAR 0 8
60502: PUSH
60503: LD_VAR 0 1
60507: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
60508: LD_ADDR_VAR 0 10
60512: PUSH
60513: LD_VAR 0 10
60517: PPUSH
60518: LD_VAR 0 8
60522: PPUSH
60523: LD_VAR 0 1
60527: PUSH
60528: LD_VAR 0 7
60532: ARRAY
60533: PPUSH
60534: CALL_OW 1
60538: ST_TO_ADDR
// end ;
60539: GO 60452
60541: POP
60542: POP
// array := tmp ;
60543: LD_ADDR_VAR 0 1
60547: PUSH
60548: LD_VAR 0 10
60552: ST_TO_ADDR
// end ;
60553: GO 60434
60555: POP
60556: POP
// result := array ;
60557: LD_ADDR_VAR 0 5
60561: PUSH
60562: LD_VAR 0 1
60566: ST_TO_ADDR
// end ;
60567: LD_VAR 0 5
60571: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
60572: LD_INT 0
60574: PPUSH
60575: PPUSH
// result := 0 ;
60576: LD_ADDR_VAR 0 3
60580: PUSH
60581: LD_INT 0
60583: ST_TO_ADDR
// if not array or not value in array then
60584: LD_VAR 0 1
60588: NOT
60589: IFTRUE 60604
60591: PUSH
60592: LD_VAR 0 2
60596: PUSH
60597: LD_VAR 0 1
60601: IN
60602: NOT
60603: OR
60604: IFFALSE 60608
// exit ;
60606: GO 60662
// for i = 1 to array do
60608: LD_ADDR_VAR 0 4
60612: PUSH
60613: DOUBLE
60614: LD_INT 1
60616: DEC
60617: ST_TO_ADDR
60618: LD_VAR 0 1
60622: PUSH
60623: FOR_TO
60624: IFFALSE 60660
// if value = array [ i ] then
60626: LD_VAR 0 2
60630: PUSH
60631: LD_VAR 0 1
60635: PUSH
60636: LD_VAR 0 4
60640: ARRAY
60641: EQUAL
60642: IFFALSE 60658
// begin result := i ;
60644: LD_ADDR_VAR 0 3
60648: PUSH
60649: LD_VAR 0 4
60653: ST_TO_ADDR
// exit ;
60654: POP
60655: POP
60656: GO 60662
// end ;
60658: GO 60623
60660: POP
60661: POP
// end ;
60662: LD_VAR 0 3
60666: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
60667: LD_INT 0
60669: PPUSH
// vc_chassis := chassis ;
60670: LD_ADDR_OWVAR 37
60674: PUSH
60675: LD_VAR 0 1
60679: ST_TO_ADDR
// vc_engine := engine ;
60680: LD_ADDR_OWVAR 39
60684: PUSH
60685: LD_VAR 0 2
60689: ST_TO_ADDR
// vc_control := control ;
60690: LD_ADDR_OWVAR 38
60694: PUSH
60695: LD_VAR 0 3
60699: ST_TO_ADDR
// vc_weapon := weapon ;
60700: LD_ADDR_OWVAR 40
60704: PUSH
60705: LD_VAR 0 4
60709: ST_TO_ADDR
// vc_fuel_battery := fuel ;
60710: LD_ADDR_OWVAR 41
60714: PUSH
60715: LD_VAR 0 5
60719: ST_TO_ADDR
// end ;
60720: LD_VAR 0 6
60724: RET
// export function WantPlant ( unit ) ; var task ; begin
60725: LD_INT 0
60727: PPUSH
60728: PPUSH
// result := false ;
60729: LD_ADDR_VAR 0 2
60733: PUSH
60734: LD_INT 0
60736: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
60737: LD_ADDR_VAR 0 3
60741: PUSH
60742: LD_VAR 0 1
60746: PPUSH
60747: CALL_OW 437
60751: ST_TO_ADDR
// if task then
60752: LD_VAR 0 3
60756: IFFALSE 60784
// if task [ 1 ] [ 1 ] = p then
60758: LD_VAR 0 3
60762: PUSH
60763: LD_INT 1
60765: ARRAY
60766: PUSH
60767: LD_INT 1
60769: ARRAY
60770: PUSH
60771: LD_STRING p
60773: EQUAL
60774: IFFALSE 60784
// result := true ;
60776: LD_ADDR_VAR 0 2
60780: PUSH
60781: LD_INT 1
60783: ST_TO_ADDR
// end ;
60784: LD_VAR 0 2
60788: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
60789: LD_INT 0
60791: PPUSH
60792: PPUSH
60793: PPUSH
60794: PPUSH
// if pos < 1 then
60795: LD_VAR 0 2
60799: PUSH
60800: LD_INT 1
60802: LESS
60803: IFFALSE 60807
// exit ;
60805: GO 61110
// if pos = 1 then
60807: LD_VAR 0 2
60811: PUSH
60812: LD_INT 1
60814: EQUAL
60815: IFFALSE 60848
// result := Replace ( arr , pos [ 1 ] , value ) else
60817: LD_ADDR_VAR 0 4
60821: PUSH
60822: LD_VAR 0 1
60826: PPUSH
60827: LD_VAR 0 2
60831: PUSH
60832: LD_INT 1
60834: ARRAY
60835: PPUSH
60836: LD_VAR 0 3
60840: PPUSH
60841: CALL_OW 1
60845: ST_TO_ADDR
60846: GO 61110
// begin tmp := arr ;
60848: LD_ADDR_VAR 0 6
60852: PUSH
60853: LD_VAR 0 1
60857: ST_TO_ADDR
// s_arr := [ tmp ] ;
60858: LD_ADDR_VAR 0 7
60862: PUSH
60863: LD_VAR 0 6
60867: PUSH
60868: EMPTY
60869: LIST
60870: ST_TO_ADDR
// for i = 1 to pos - 1 do
60871: LD_ADDR_VAR 0 5
60875: PUSH
60876: DOUBLE
60877: LD_INT 1
60879: DEC
60880: ST_TO_ADDR
60881: LD_VAR 0 2
60885: PUSH
60886: LD_INT 1
60888: MINUS
60889: PUSH
60890: FOR_TO
60891: IFFALSE 60936
// begin tmp := tmp [ pos [ i ] ] ;
60893: LD_ADDR_VAR 0 6
60897: PUSH
60898: LD_VAR 0 6
60902: PUSH
60903: LD_VAR 0 2
60907: PUSH
60908: LD_VAR 0 5
60912: ARRAY
60913: ARRAY
60914: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
60915: LD_ADDR_VAR 0 7
60919: PUSH
60920: LD_VAR 0 7
60924: PUSH
60925: LD_VAR 0 6
60929: PUSH
60930: EMPTY
60931: LIST
60932: ADD
60933: ST_TO_ADDR
// end ;
60934: GO 60890
60936: POP
60937: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
60938: LD_ADDR_VAR 0 6
60942: PUSH
60943: LD_VAR 0 6
60947: PPUSH
60948: LD_VAR 0 2
60952: PUSH
60953: LD_VAR 0 2
60957: ARRAY
60958: PPUSH
60959: LD_VAR 0 3
60963: PPUSH
60964: CALL_OW 1
60968: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
60969: LD_ADDR_VAR 0 7
60973: PUSH
60974: LD_VAR 0 7
60978: PPUSH
60979: LD_VAR 0 7
60983: PPUSH
60984: LD_VAR 0 6
60988: PPUSH
60989: CALL_OW 1
60993: ST_TO_ADDR
// for i = s_arr downto 2 do
60994: LD_ADDR_VAR 0 5
60998: PUSH
60999: DOUBLE
61000: LD_VAR 0 7
61004: INC
61005: ST_TO_ADDR
61006: LD_INT 2
61008: PUSH
61009: FOR_DOWNTO
61010: IFFALSE 61094
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
61012: LD_ADDR_VAR 0 6
61016: PUSH
61017: LD_VAR 0 7
61021: PUSH
61022: LD_VAR 0 5
61026: PUSH
61027: LD_INT 1
61029: MINUS
61030: ARRAY
61031: PPUSH
61032: LD_VAR 0 2
61036: PUSH
61037: LD_VAR 0 5
61041: PUSH
61042: LD_INT 1
61044: MINUS
61045: ARRAY
61046: PPUSH
61047: LD_VAR 0 7
61051: PUSH
61052: LD_VAR 0 5
61056: ARRAY
61057: PPUSH
61058: CALL_OW 1
61062: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
61063: LD_ADDR_VAR 0 7
61067: PUSH
61068: LD_VAR 0 7
61072: PPUSH
61073: LD_VAR 0 5
61077: PUSH
61078: LD_INT 1
61080: MINUS
61081: PPUSH
61082: LD_VAR 0 6
61086: PPUSH
61087: CALL_OW 1
61091: ST_TO_ADDR
// end ;
61092: GO 61009
61094: POP
61095: POP
// result := s_arr [ 1 ] ;
61096: LD_ADDR_VAR 0 4
61100: PUSH
61101: LD_VAR 0 7
61105: PUSH
61106: LD_INT 1
61108: ARRAY
61109: ST_TO_ADDR
// end ; end ;
61110: LD_VAR 0 4
61114: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
61115: LD_INT 0
61117: PPUSH
61118: PPUSH
// if not list then
61119: LD_VAR 0 1
61123: NOT
61124: IFFALSE 61128
// exit ;
61126: GO 61219
// i := list [ pos1 ] ;
61128: LD_ADDR_VAR 0 5
61132: PUSH
61133: LD_VAR 0 1
61137: PUSH
61138: LD_VAR 0 2
61142: ARRAY
61143: ST_TO_ADDR
// if not i then
61144: LD_VAR 0 5
61148: NOT
61149: IFFALSE 61153
// exit ;
61151: GO 61219
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
61153: LD_ADDR_VAR 0 1
61157: PUSH
61158: LD_VAR 0 1
61162: PPUSH
61163: LD_VAR 0 2
61167: PPUSH
61168: LD_VAR 0 1
61172: PUSH
61173: LD_VAR 0 3
61177: ARRAY
61178: PPUSH
61179: CALL_OW 1
61183: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
61184: LD_ADDR_VAR 0 1
61188: PUSH
61189: LD_VAR 0 1
61193: PPUSH
61194: LD_VAR 0 3
61198: PPUSH
61199: LD_VAR 0 5
61203: PPUSH
61204: CALL_OW 1
61208: ST_TO_ADDR
// result := list ;
61209: LD_ADDR_VAR 0 4
61213: PUSH
61214: LD_VAR 0 1
61218: ST_TO_ADDR
// end ;
61219: LD_VAR 0 4
61223: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
61224: LD_INT 0
61226: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
61227: LD_ADDR_VAR 0 5
61231: PUSH
61232: LD_VAR 0 1
61236: PPUSH
61237: CALL_OW 250
61241: PPUSH
61242: LD_VAR 0 1
61246: PPUSH
61247: CALL_OW 251
61251: PPUSH
61252: LD_VAR 0 2
61256: PPUSH
61257: LD_VAR 0 3
61261: PPUSH
61262: LD_VAR 0 4
61266: PPUSH
61267: CALL 61649 0 5
61271: ST_TO_ADDR
// end ;
61272: LD_VAR 0 5
61276: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
61277: LD_INT 0
61279: PPUSH
61280: PPUSH
61281: PPUSH
61282: PPUSH
// if not list or not unit then
61283: LD_VAR 0 2
61287: NOT
61288: IFTRUE 61297
61290: PUSH
61291: LD_VAR 0 1
61295: NOT
61296: OR
61297: IFFALSE 61301
// exit ;
61299: GO 61644
// result := [ ] ;
61301: LD_ADDR_VAR 0 5
61305: PUSH
61306: EMPTY
61307: ST_TO_ADDR
// for i in list do
61308: LD_ADDR_VAR 0 6
61312: PUSH
61313: LD_VAR 0 2
61317: PUSH
61318: FOR_IN
61319: IFFALSE 61537
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
61321: LD_ADDR_VAR 0 8
61325: PUSH
61326: LD_VAR 0 1
61330: PPUSH
61331: LD_VAR 0 6
61335: PUSH
61336: LD_INT 1
61338: ARRAY
61339: PPUSH
61340: LD_VAR 0 6
61344: PUSH
61345: LD_INT 2
61347: ARRAY
61348: PPUSH
61349: CALL_OW 297
61353: ST_TO_ADDR
// if not Count ( result ) then
61354: LD_VAR 0 5
61358: PPUSH
61359: CALL 57905 0 1
61363: NOT
61364: IFFALSE 61397
// begin result := Join ( result , [ i , tmp ] ) ;
61366: LD_ADDR_VAR 0 5
61370: PUSH
61371: LD_VAR 0 5
61375: PPUSH
61376: LD_VAR 0 6
61380: PUSH
61381: LD_VAR 0 8
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PPUSH
61390: CALL 93837 0 2
61394: ST_TO_ADDR
// continue ;
61395: GO 61318
// end ; if result [ result ] [ 2 ] <= tmp then
61397: LD_VAR 0 5
61401: PUSH
61402: LD_VAR 0 5
61406: ARRAY
61407: PUSH
61408: LD_INT 2
61410: ARRAY
61411: PUSH
61412: LD_VAR 0 8
61416: LESSEQUAL
61417: IFFALSE 61450
// result := Join ( result , [ i , tmp ] ) else
61419: LD_ADDR_VAR 0 5
61423: PUSH
61424: LD_VAR 0 5
61428: PPUSH
61429: LD_VAR 0 6
61433: PUSH
61434: LD_VAR 0 8
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PPUSH
61443: CALL 93837 0 2
61447: ST_TO_ADDR
61448: GO 61535
// begin for j := 1 to Count ( result ) do
61450: LD_ADDR_VAR 0 7
61454: PUSH
61455: DOUBLE
61456: LD_INT 1
61458: DEC
61459: ST_TO_ADDR
61460: LD_VAR 0 5
61464: PPUSH
61465: CALL 57905 0 1
61469: PUSH
61470: FOR_TO
61471: IFFALSE 61533
// begin if tmp < result [ j ] [ 2 ] then
61473: LD_VAR 0 8
61477: PUSH
61478: LD_VAR 0 5
61482: PUSH
61483: LD_VAR 0 7
61487: ARRAY
61488: PUSH
61489: LD_INT 2
61491: ARRAY
61492: LESS
61493: IFFALSE 61531
// begin result := Insert ( result , j , [ i , tmp ] ) ;
61495: LD_ADDR_VAR 0 5
61499: PUSH
61500: LD_VAR 0 5
61504: PPUSH
61505: LD_VAR 0 7
61509: PPUSH
61510: LD_VAR 0 6
61514: PUSH
61515: LD_VAR 0 8
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PPUSH
61524: CALL_OW 2
61528: ST_TO_ADDR
// break ;
61529: GO 61533
// end ; end ;
61531: GO 61470
61533: POP
61534: POP
// end ; end ;
61535: GO 61318
61537: POP
61538: POP
// if result and not asc then
61539: LD_VAR 0 5
61543: IFFALSE 61552
61545: PUSH
61546: LD_VAR 0 3
61550: NOT
61551: AND
61552: IFFALSE 61569
// result := ReverseArray ( result ) ;
61554: LD_ADDR_VAR 0 5
61558: PUSH
61559: LD_VAR 0 5
61563: PPUSH
61564: CALL 88927 0 1
61568: ST_TO_ADDR
// tmp := [ ] ;
61569: LD_ADDR_VAR 0 8
61573: PUSH
61574: EMPTY
61575: ST_TO_ADDR
// if mode then
61576: LD_VAR 0 4
61580: IFFALSE 61644
// begin for i := 1 to result do
61582: LD_ADDR_VAR 0 6
61586: PUSH
61587: DOUBLE
61588: LD_INT 1
61590: DEC
61591: ST_TO_ADDR
61592: LD_VAR 0 5
61596: PUSH
61597: FOR_TO
61598: IFFALSE 61632
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
61600: LD_ADDR_VAR 0 8
61604: PUSH
61605: LD_VAR 0 8
61609: PPUSH
61610: LD_VAR 0 5
61614: PUSH
61615: LD_VAR 0 6
61619: ARRAY
61620: PUSH
61621: LD_INT 1
61623: ARRAY
61624: PPUSH
61625: CALL 93837 0 2
61629: ST_TO_ADDR
61630: GO 61597
61632: POP
61633: POP
// result := tmp ;
61634: LD_ADDR_VAR 0 5
61638: PUSH
61639: LD_VAR 0 8
61643: ST_TO_ADDR
// end ; end ;
61644: LD_VAR 0 5
61648: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
61649: LD_INT 0
61651: PPUSH
61652: PPUSH
61653: PPUSH
61654: PPUSH
// if not list then
61655: LD_VAR 0 3
61659: NOT
61660: IFFALSE 61664
// exit ;
61662: GO 62054
// result := [ ] ;
61664: LD_ADDR_VAR 0 6
61668: PUSH
61669: EMPTY
61670: ST_TO_ADDR
// for i in list do
61671: LD_ADDR_VAR 0 7
61675: PUSH
61676: LD_VAR 0 3
61680: PUSH
61681: FOR_IN
61682: IFFALSE 61884
// begin tmp := GetDistUnitXY ( i , x , y ) ;
61684: LD_ADDR_VAR 0 9
61688: PUSH
61689: LD_VAR 0 7
61693: PPUSH
61694: LD_VAR 0 1
61698: PPUSH
61699: LD_VAR 0 2
61703: PPUSH
61704: CALL_OW 297
61708: ST_TO_ADDR
// if not result then
61709: LD_VAR 0 6
61713: NOT
61714: IFFALSE 61740
// result := [ [ i , tmp ] ] else
61716: LD_ADDR_VAR 0 6
61720: PUSH
61721: LD_VAR 0 7
61725: PUSH
61726: LD_VAR 0 9
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: EMPTY
61736: LIST
61737: ST_TO_ADDR
61738: GO 61882
// begin if result [ result ] [ 2 ] <= tmp then
61740: LD_VAR 0 6
61744: PUSH
61745: LD_VAR 0 6
61749: ARRAY
61750: PUSH
61751: LD_INT 2
61753: ARRAY
61754: PUSH
61755: LD_VAR 0 9
61759: LESSEQUAL
61760: IFFALSE 61802
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
61762: LD_ADDR_VAR 0 6
61766: PUSH
61767: LD_VAR 0 6
61771: PPUSH
61772: LD_VAR 0 6
61776: PUSH
61777: LD_INT 1
61779: PLUS
61780: PPUSH
61781: LD_VAR 0 7
61785: PUSH
61786: LD_VAR 0 9
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PPUSH
61795: CALL_OW 2
61799: ST_TO_ADDR
61800: GO 61882
// for j := 1 to result do
61802: LD_ADDR_VAR 0 8
61806: PUSH
61807: DOUBLE
61808: LD_INT 1
61810: DEC
61811: ST_TO_ADDR
61812: LD_VAR 0 6
61816: PUSH
61817: FOR_TO
61818: IFFALSE 61880
// begin if tmp < result [ j ] [ 2 ] then
61820: LD_VAR 0 9
61824: PUSH
61825: LD_VAR 0 6
61829: PUSH
61830: LD_VAR 0 8
61834: ARRAY
61835: PUSH
61836: LD_INT 2
61838: ARRAY
61839: LESS
61840: IFFALSE 61878
// begin result := Insert ( result , j , [ i , tmp ] ) ;
61842: LD_ADDR_VAR 0 6
61846: PUSH
61847: LD_VAR 0 6
61851: PPUSH
61852: LD_VAR 0 8
61856: PPUSH
61857: LD_VAR 0 7
61861: PUSH
61862: LD_VAR 0 9
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PPUSH
61871: CALL_OW 2
61875: ST_TO_ADDR
// break ;
61876: GO 61880
// end ; end ;
61878: GO 61817
61880: POP
61881: POP
// end ; end ;
61882: GO 61681
61884: POP
61885: POP
// if result and not asc then
61886: LD_VAR 0 6
61890: IFFALSE 61899
61892: PUSH
61893: LD_VAR 0 4
61897: NOT
61898: AND
61899: IFFALSE 61974
// begin tmp := result ;
61901: LD_ADDR_VAR 0 9
61905: PUSH
61906: LD_VAR 0 6
61910: ST_TO_ADDR
// for i = tmp downto 1 do
61911: LD_ADDR_VAR 0 7
61915: PUSH
61916: DOUBLE
61917: LD_VAR 0 9
61921: INC
61922: ST_TO_ADDR
61923: LD_INT 1
61925: PUSH
61926: FOR_DOWNTO
61927: IFFALSE 61972
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
61929: LD_ADDR_VAR 0 6
61933: PUSH
61934: LD_VAR 0 6
61938: PPUSH
61939: LD_VAR 0 9
61943: PUSH
61944: LD_VAR 0 7
61948: MINUS
61949: PUSH
61950: LD_INT 1
61952: PLUS
61953: PPUSH
61954: LD_VAR 0 9
61958: PUSH
61959: LD_VAR 0 7
61963: ARRAY
61964: PPUSH
61965: CALL_OW 1
61969: ST_TO_ADDR
61970: GO 61926
61972: POP
61973: POP
// end ; tmp := [ ] ;
61974: LD_ADDR_VAR 0 9
61978: PUSH
61979: EMPTY
61980: ST_TO_ADDR
// if mode then
61981: LD_VAR 0 5
61985: IFFALSE 62054
// begin for i = 1 to result do
61987: LD_ADDR_VAR 0 7
61991: PUSH
61992: DOUBLE
61993: LD_INT 1
61995: DEC
61996: ST_TO_ADDR
61997: LD_VAR 0 6
62001: PUSH
62002: FOR_TO
62003: IFFALSE 62042
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
62005: LD_ADDR_VAR 0 9
62009: PUSH
62010: LD_VAR 0 9
62014: PPUSH
62015: LD_VAR 0 7
62019: PPUSH
62020: LD_VAR 0 6
62024: PUSH
62025: LD_VAR 0 7
62029: ARRAY
62030: PUSH
62031: LD_INT 1
62033: ARRAY
62034: PPUSH
62035: CALL_OW 1
62039: ST_TO_ADDR
62040: GO 62002
62042: POP
62043: POP
// result := tmp ;
62044: LD_ADDR_VAR 0 6
62048: PUSH
62049: LD_VAR 0 9
62053: ST_TO_ADDR
// end ; end ;
62054: LD_VAR 0 6
62058: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
62059: LD_INT 0
62061: PPUSH
62062: PPUSH
62063: PPUSH
62064: PPUSH
62065: PPUSH
62066: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
62067: LD_ADDR_VAR 0 5
62071: PUSH
62072: LD_INT 0
62074: PUSH
62075: LD_INT 0
62077: PUSH
62078: LD_INT 0
62080: PUSH
62081: EMPTY
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: ST_TO_ADDR
// if not x or not y then
62089: LD_VAR 0 2
62093: NOT
62094: IFTRUE 62103
62096: PUSH
62097: LD_VAR 0 3
62101: NOT
62102: OR
62103: IFFALSE 62107
// exit ;
62105: GO 63763
// if not range then
62107: LD_VAR 0 4
62111: NOT
62112: IFFALSE 62122
// range := 10 ;
62114: LD_ADDR_VAR 0 4
62118: PUSH
62119: LD_INT 10
62121: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
62122: LD_ADDR_VAR 0 8
62126: PUSH
62127: LD_INT 81
62129: PUSH
62130: LD_VAR 0 1
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 92
62141: PUSH
62142: LD_VAR 0 2
62146: PUSH
62147: LD_VAR 0 3
62151: PUSH
62152: LD_VAR 0 4
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 3
62165: PUSH
62166: LD_INT 21
62168: PUSH
62169: LD_INT 3
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: LIST
62184: PPUSH
62185: CALL_OW 69
62189: ST_TO_ADDR
// if not tmp then
62190: LD_VAR 0 8
62194: NOT
62195: IFFALSE 62199
// exit ;
62197: GO 63763
// for i in tmp do
62199: LD_ADDR_VAR 0 6
62203: PUSH
62204: LD_VAR 0 8
62208: PUSH
62209: FOR_IN
62210: IFFALSE 63738
// begin points := [ 0 , 0 , 0 ] ;
62212: LD_ADDR_VAR 0 9
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: LD_INT 0
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: LIST
62230: ST_TO_ADDR
// bpoints := 1 ;
62231: LD_ADDR_VAR 0 10
62235: PUSH
62236: LD_INT 1
62238: ST_TO_ADDR
// case GetType ( i ) of unit_human :
62239: LD_VAR 0 6
62243: PPUSH
62244: CALL_OW 247
62248: PUSH
62249: LD_INT 1
62251: DOUBLE
62252: EQUAL
62253: IFTRUE 62257
62255: GO 62839
62257: POP
// begin if GetClass ( i ) = 1 then
62258: LD_VAR 0 6
62262: PPUSH
62263: CALL_OW 257
62267: PUSH
62268: LD_INT 1
62270: EQUAL
62271: IFFALSE 62292
// points := [ 10 , 5 , 3 ] ;
62273: LD_ADDR_VAR 0 9
62277: PUSH
62278: LD_INT 10
62280: PUSH
62281: LD_INT 5
62283: PUSH
62284: LD_INT 3
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: LIST
62291: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
62292: LD_VAR 0 6
62296: PPUSH
62297: CALL_OW 257
62301: PUSH
62302: LD_INT 2
62304: PUSH
62305: LD_INT 3
62307: PUSH
62308: LD_INT 4
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: LIST
62315: IN
62316: IFFALSE 62337
// points := [ 3 , 2 , 1 ] ;
62318: LD_ADDR_VAR 0 9
62322: PUSH
62323: LD_INT 3
62325: PUSH
62326: LD_INT 2
62328: PUSH
62329: LD_INT 1
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: LIST
62336: ST_TO_ADDR
// if GetClass ( i ) = 5 then
62337: LD_VAR 0 6
62341: PPUSH
62342: CALL_OW 257
62346: PUSH
62347: LD_INT 5
62349: EQUAL
62350: IFFALSE 62371
// points := [ 130 , 5 , 2 ] ;
62352: LD_ADDR_VAR 0 9
62356: PUSH
62357: LD_INT 130
62359: PUSH
62360: LD_INT 5
62362: PUSH
62363: LD_INT 2
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: LIST
62370: ST_TO_ADDR
// if GetClass ( i ) = 8 then
62371: LD_VAR 0 6
62375: PPUSH
62376: CALL_OW 257
62380: PUSH
62381: LD_INT 8
62383: EQUAL
62384: IFFALSE 62405
// points := [ 35 , 35 , 30 ] ;
62386: LD_ADDR_VAR 0 9
62390: PUSH
62391: LD_INT 35
62393: PUSH
62394: LD_INT 35
62396: PUSH
62397: LD_INT 30
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: LIST
62404: ST_TO_ADDR
// if GetClass ( i ) = 9 then
62405: LD_VAR 0 6
62409: PPUSH
62410: CALL_OW 257
62414: PUSH
62415: LD_INT 9
62417: EQUAL
62418: IFFALSE 62439
// points := [ 20 , 55 , 40 ] ;
62420: LD_ADDR_VAR 0 9
62424: PUSH
62425: LD_INT 20
62427: PUSH
62428: LD_INT 55
62430: PUSH
62431: LD_INT 40
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: LIST
62438: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
62439: LD_VAR 0 6
62443: PPUSH
62444: CALL_OW 257
62448: PUSH
62449: LD_INT 12
62451: PUSH
62452: LD_INT 16
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: IN
62459: IFFALSE 62480
// points := [ 5 , 3 , 2 ] ;
62461: LD_ADDR_VAR 0 9
62465: PUSH
62466: LD_INT 5
62468: PUSH
62469: LD_INT 3
62471: PUSH
62472: LD_INT 2
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: LIST
62479: ST_TO_ADDR
// if GetClass ( i ) = 17 then
62480: LD_VAR 0 6
62484: PPUSH
62485: CALL_OW 257
62489: PUSH
62490: LD_INT 17
62492: EQUAL
62493: IFFALSE 62514
// points := [ 100 , 50 , 75 ] ;
62495: LD_ADDR_VAR 0 9
62499: PUSH
62500: LD_INT 100
62502: PUSH
62503: LD_INT 50
62505: PUSH
62506: LD_INT 75
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: LIST
62513: ST_TO_ADDR
// if GetClass ( i ) = 15 then
62514: LD_VAR 0 6
62518: PPUSH
62519: CALL_OW 257
62523: PUSH
62524: LD_INT 15
62526: EQUAL
62527: IFFALSE 62548
// points := [ 10 , 5 , 3 ] ;
62529: LD_ADDR_VAR 0 9
62533: PUSH
62534: LD_INT 10
62536: PUSH
62537: LD_INT 5
62539: PUSH
62540: LD_INT 3
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: LIST
62547: ST_TO_ADDR
// if GetClass ( i ) = 14 then
62548: LD_VAR 0 6
62552: PPUSH
62553: CALL_OW 257
62557: PUSH
62558: LD_INT 14
62560: EQUAL
62561: IFFALSE 62582
// points := [ 10 , 0 , 0 ] ;
62563: LD_ADDR_VAR 0 9
62567: PUSH
62568: LD_INT 10
62570: PUSH
62571: LD_INT 0
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: LIST
62581: ST_TO_ADDR
// if GetClass ( i ) = 11 then
62582: LD_VAR 0 6
62586: PPUSH
62587: CALL_OW 257
62591: PUSH
62592: LD_INT 11
62594: EQUAL
62595: IFFALSE 62616
// points := [ 30 , 10 , 5 ] ;
62597: LD_ADDR_VAR 0 9
62601: PUSH
62602: LD_INT 30
62604: PUSH
62605: LD_INT 10
62607: PUSH
62608: LD_INT 5
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: LIST
62615: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
62616: LD_VAR 0 1
62620: PPUSH
62621: LD_INT 5
62623: PPUSH
62624: CALL_OW 321
62628: PUSH
62629: LD_INT 2
62631: EQUAL
62632: IFFALSE 62649
// bpoints := bpoints * 1.8 ;
62634: LD_ADDR_VAR 0 10
62638: PUSH
62639: LD_VAR 0 10
62643: PUSH
62644: LD_REAL  1.80000000000000E+0000
62647: MUL
62648: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
62649: LD_VAR 0 6
62653: PPUSH
62654: CALL_OW 257
62658: PUSH
62659: LD_INT 1
62661: PUSH
62662: LD_INT 2
62664: PUSH
62665: LD_INT 3
62667: PUSH
62668: LD_INT 4
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: IN
62677: IFFALSE 62697
62679: PUSH
62680: LD_VAR 0 1
62684: PPUSH
62685: LD_INT 51
62687: PPUSH
62688: CALL_OW 321
62692: PUSH
62693: LD_INT 2
62695: EQUAL
62696: AND
62697: IFFALSE 62714
// bpoints := bpoints * 1.2 ;
62699: LD_ADDR_VAR 0 10
62703: PUSH
62704: LD_VAR 0 10
62708: PUSH
62709: LD_REAL  1.20000000000000E+0000
62712: MUL
62713: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
62714: LD_VAR 0 6
62718: PPUSH
62719: CALL_OW 257
62723: PUSH
62724: LD_INT 5
62726: PUSH
62727: LD_INT 7
62729: PUSH
62730: LD_INT 9
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: LIST
62737: IN
62738: IFFALSE 62758
62740: PUSH
62741: LD_VAR 0 1
62745: PPUSH
62746: LD_INT 52
62748: PPUSH
62749: CALL_OW 321
62753: PUSH
62754: LD_INT 2
62756: EQUAL
62757: AND
62758: IFFALSE 62775
// bpoints := bpoints * 1.5 ;
62760: LD_ADDR_VAR 0 10
62764: PUSH
62765: LD_VAR 0 10
62769: PUSH
62770: LD_REAL  1.50000000000000E+0000
62773: MUL
62774: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
62775: LD_VAR 0 1
62779: PPUSH
62780: LD_INT 66
62782: PPUSH
62783: CALL_OW 321
62787: PUSH
62788: LD_INT 2
62790: EQUAL
62791: IFFALSE 62808
// bpoints := bpoints * 1.1 ;
62793: LD_ADDR_VAR 0 10
62797: PUSH
62798: LD_VAR 0 10
62802: PUSH
62803: LD_REAL  1.10000000000000E+0000
62806: MUL
62807: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
62808: LD_ADDR_VAR 0 10
62812: PUSH
62813: LD_VAR 0 10
62817: PUSH
62818: LD_VAR 0 6
62822: PPUSH
62823: LD_INT 1
62825: PPUSH
62826: CALL_OW 259
62830: PUSH
62831: LD_REAL  1.15000000000000E+0000
62834: MUL
62835: MUL
62836: ST_TO_ADDR
// end ; unit_vehicle :
62837: GO 63667
62839: LD_INT 2
62841: DOUBLE
62842: EQUAL
62843: IFTRUE 62847
62845: GO 63655
62847: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
62848: LD_VAR 0 6
62852: PPUSH
62853: CALL_OW 264
62857: PUSH
62858: LD_INT 2
62860: PUSH
62861: LD_INT 42
62863: PUSH
62864: LD_INT 24
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: LIST
62871: IN
62872: IFFALSE 62893
// points := [ 25 , 5 , 3 ] ;
62874: LD_ADDR_VAR 0 9
62878: PUSH
62879: LD_INT 25
62881: PUSH
62882: LD_INT 5
62884: PUSH
62885: LD_INT 3
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: LIST
62892: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
62893: LD_VAR 0 6
62897: PPUSH
62898: CALL_OW 264
62902: PUSH
62903: LD_INT 4
62905: PUSH
62906: LD_INT 43
62908: PUSH
62909: LD_INT 25
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: LIST
62916: IN
62917: IFFALSE 62938
// points := [ 40 , 15 , 5 ] ;
62919: LD_ADDR_VAR 0 9
62923: PUSH
62924: LD_INT 40
62926: PUSH
62927: LD_INT 15
62929: PUSH
62930: LD_INT 5
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: LIST
62937: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
62938: LD_VAR 0 6
62942: PPUSH
62943: CALL_OW 264
62947: PUSH
62948: LD_INT 3
62950: PUSH
62951: LD_INT 23
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: IN
62958: IFFALSE 62979
// points := [ 7 , 25 , 8 ] ;
62960: LD_ADDR_VAR 0 9
62964: PUSH
62965: LD_INT 7
62967: PUSH
62968: LD_INT 25
62970: PUSH
62971: LD_INT 8
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: LIST
62978: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
62979: LD_VAR 0 6
62983: PPUSH
62984: CALL_OW 264
62988: PUSH
62989: LD_INT 5
62991: PUSH
62992: LD_INT 27
62994: PUSH
62995: LD_INT 44
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: LIST
63002: IN
63003: IFFALSE 63024
// points := [ 14 , 50 , 16 ] ;
63005: LD_ADDR_VAR 0 9
63009: PUSH
63010: LD_INT 14
63012: PUSH
63013: LD_INT 50
63015: PUSH
63016: LD_INT 16
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: LIST
63023: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
63024: LD_VAR 0 6
63028: PPUSH
63029: CALL_OW 264
63033: PUSH
63034: LD_INT 6
63036: PUSH
63037: LD_INT 46
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: IN
63044: IFFALSE 63065
// points := [ 32 , 120 , 70 ] ;
63046: LD_ADDR_VAR 0 9
63050: PUSH
63051: LD_INT 32
63053: PUSH
63054: LD_INT 120
63056: PUSH
63057: LD_INT 70
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: LIST
63064: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
63065: LD_VAR 0 6
63069: PPUSH
63070: CALL_OW 264
63074: PUSH
63075: LD_INT 7
63077: PUSH
63078: LD_INT 28
63080: PUSH
63081: LD_INT 45
63083: PUSH
63084: LD_INT 92
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: IN
63093: IFFALSE 63114
// points := [ 35 , 20 , 45 ] ;
63095: LD_ADDR_VAR 0 9
63099: PUSH
63100: LD_INT 35
63102: PUSH
63103: LD_INT 20
63105: PUSH
63106: LD_INT 45
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: LIST
63113: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
63114: LD_VAR 0 6
63118: PPUSH
63119: CALL_OW 264
63123: PUSH
63124: LD_INT 47
63126: PUSH
63127: EMPTY
63128: LIST
63129: IN
63130: IFFALSE 63151
// points := [ 67 , 45 , 75 ] ;
63132: LD_ADDR_VAR 0 9
63136: PUSH
63137: LD_INT 67
63139: PUSH
63140: LD_INT 45
63142: PUSH
63143: LD_INT 75
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: LIST
63150: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
63151: LD_VAR 0 6
63155: PPUSH
63156: CALL_OW 264
63160: PUSH
63161: LD_INT 26
63163: PUSH
63164: EMPTY
63165: LIST
63166: IN
63167: IFFALSE 63188
// points := [ 120 , 30 , 80 ] ;
63169: LD_ADDR_VAR 0 9
63173: PUSH
63174: LD_INT 120
63176: PUSH
63177: LD_INT 30
63179: PUSH
63180: LD_INT 80
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: LIST
63187: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
63188: LD_VAR 0 6
63192: PPUSH
63193: CALL_OW 264
63197: PUSH
63198: LD_INT 22
63200: PUSH
63201: EMPTY
63202: LIST
63203: IN
63204: IFFALSE 63225
// points := [ 40 , 1 , 1 ] ;
63206: LD_ADDR_VAR 0 9
63210: PUSH
63211: LD_INT 40
63213: PUSH
63214: LD_INT 1
63216: PUSH
63217: LD_INT 1
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: LIST
63224: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
63225: LD_VAR 0 6
63229: PPUSH
63230: CALL_OW 264
63234: PUSH
63235: LD_INT 29
63237: PUSH
63238: EMPTY
63239: LIST
63240: IN
63241: IFFALSE 63262
// points := [ 70 , 200 , 400 ] ;
63243: LD_ADDR_VAR 0 9
63247: PUSH
63248: LD_INT 70
63250: PUSH
63251: LD_INT 200
63253: PUSH
63254: LD_INT 400
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: LIST
63261: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
63262: LD_VAR 0 6
63266: PPUSH
63267: CALL_OW 264
63271: PUSH
63272: LD_INT 14
63274: PUSH
63275: LD_INT 53
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: IN
63282: IFFALSE 63303
// points := [ 40 , 10 , 20 ] ;
63284: LD_ADDR_VAR 0 9
63288: PUSH
63289: LD_INT 40
63291: PUSH
63292: LD_INT 10
63294: PUSH
63295: LD_INT 20
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: LIST
63302: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
63303: LD_VAR 0 6
63307: PPUSH
63308: CALL_OW 264
63312: PUSH
63313: LD_INT 9
63315: PUSH
63316: EMPTY
63317: LIST
63318: IN
63319: IFFALSE 63340
// points := [ 5 , 70 , 20 ] ;
63321: LD_ADDR_VAR 0 9
63325: PUSH
63326: LD_INT 5
63328: PUSH
63329: LD_INT 70
63331: PUSH
63332: LD_INT 20
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: LIST
63339: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
63340: LD_VAR 0 6
63344: PPUSH
63345: CALL_OW 264
63349: PUSH
63350: LD_INT 10
63352: PUSH
63353: EMPTY
63354: LIST
63355: IN
63356: IFFALSE 63377
// points := [ 35 , 110 , 70 ] ;
63358: LD_ADDR_VAR 0 9
63362: PUSH
63363: LD_INT 35
63365: PUSH
63366: LD_INT 110
63368: PUSH
63369: LD_INT 70
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: LIST
63376: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
63377: LD_VAR 0 6
63381: PPUSH
63382: CALL_OW 265
63386: PUSH
63387: LD_INT 25
63389: EQUAL
63390: IFFALSE 63411
// points := [ 80 , 65 , 100 ] ;
63392: LD_ADDR_VAR 0 9
63396: PUSH
63397: LD_INT 80
63399: PUSH
63400: LD_INT 65
63402: PUSH
63403: LD_INT 100
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: LIST
63410: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
63411: LD_VAR 0 6
63415: PPUSH
63416: CALL_OW 263
63420: PUSH
63421: LD_INT 1
63423: EQUAL
63424: IFFALSE 63459
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
63426: LD_ADDR_VAR 0 10
63430: PUSH
63431: LD_VAR 0 10
63435: PUSH
63436: LD_VAR 0 6
63440: PPUSH
63441: CALL_OW 311
63445: PPUSH
63446: LD_INT 3
63448: PPUSH
63449: CALL_OW 259
63453: PUSH
63454: LD_INT 4
63456: MUL
63457: MUL
63458: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
63459: LD_VAR 0 6
63463: PPUSH
63464: CALL_OW 263
63468: PUSH
63469: LD_INT 2
63471: EQUAL
63472: IFFALSE 63523
// begin j := IsControledBy ( i ) ;
63474: LD_ADDR_VAR 0 7
63478: PUSH
63479: LD_VAR 0 6
63483: PPUSH
63484: CALL_OW 312
63488: ST_TO_ADDR
// if j then
63489: LD_VAR 0 7
63493: IFFALSE 63523
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
63495: LD_ADDR_VAR 0 10
63499: PUSH
63500: LD_VAR 0 10
63504: PUSH
63505: LD_VAR 0 7
63509: PPUSH
63510: LD_INT 3
63512: PPUSH
63513: CALL_OW 259
63517: PUSH
63518: LD_INT 3
63520: MUL
63521: MUL
63522: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
63523: LD_VAR 0 6
63527: PPUSH
63528: CALL_OW 264
63532: PUSH
63533: LD_INT 5
63535: PUSH
63536: LD_INT 6
63538: PUSH
63539: LD_INT 46
63541: PUSH
63542: LD_INT 44
63544: PUSH
63545: LD_INT 47
63547: PUSH
63548: LD_INT 45
63550: PUSH
63551: LD_INT 28
63553: PUSH
63554: LD_INT 7
63556: PUSH
63557: LD_INT 27
63559: PUSH
63560: LD_INT 29
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: IN
63575: IFFALSE 63595
63577: PUSH
63578: LD_VAR 0 1
63582: PPUSH
63583: LD_INT 52
63585: PPUSH
63586: CALL_OW 321
63590: PUSH
63591: LD_INT 2
63593: EQUAL
63594: AND
63595: IFFALSE 63612
// bpoints := bpoints * 1.2 ;
63597: LD_ADDR_VAR 0 10
63601: PUSH
63602: LD_VAR 0 10
63606: PUSH
63607: LD_REAL  1.20000000000000E+0000
63610: MUL
63611: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
63612: LD_VAR 0 6
63616: PPUSH
63617: CALL_OW 264
63621: PUSH
63622: LD_INT 6
63624: PUSH
63625: LD_INT 46
63627: PUSH
63628: LD_INT 47
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: LIST
63635: IN
63636: IFFALSE 63653
// bpoints := bpoints * 1.2 ;
63638: LD_ADDR_VAR 0 10
63642: PUSH
63643: LD_VAR 0 10
63647: PUSH
63648: LD_REAL  1.20000000000000E+0000
63651: MUL
63652: ST_TO_ADDR
// end ; unit_building :
63653: GO 63667
63655: LD_INT 3
63657: DOUBLE
63658: EQUAL
63659: IFTRUE 63663
63661: GO 63666
63663: POP
// ; end ;
63664: GO 63667
63666: POP
// for j = 1 to 3 do
63667: LD_ADDR_VAR 0 7
63671: PUSH
63672: DOUBLE
63673: LD_INT 1
63675: DEC
63676: ST_TO_ADDR
63677: LD_INT 3
63679: PUSH
63680: FOR_TO
63681: IFFALSE 63734
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
63683: LD_ADDR_VAR 0 5
63687: PUSH
63688: LD_VAR 0 5
63692: PPUSH
63693: LD_VAR 0 7
63697: PPUSH
63698: LD_VAR 0 5
63702: PUSH
63703: LD_VAR 0 7
63707: ARRAY
63708: PUSH
63709: LD_VAR 0 9
63713: PUSH
63714: LD_VAR 0 7
63718: ARRAY
63719: PUSH
63720: LD_VAR 0 10
63724: MUL
63725: PLUS
63726: PPUSH
63727: CALL_OW 1
63731: ST_TO_ADDR
63732: GO 63680
63734: POP
63735: POP
// end ;
63736: GO 62209
63738: POP
63739: POP
// result := Replace ( result , 4 , tmp ) ;
63740: LD_ADDR_VAR 0 5
63744: PUSH
63745: LD_VAR 0 5
63749: PPUSH
63750: LD_INT 4
63752: PPUSH
63753: LD_VAR 0 8
63757: PPUSH
63758: CALL_OW 1
63762: ST_TO_ADDR
// end ;
63763: LD_VAR 0 5
63767: RET
// export function DangerAtRange ( unit , range ) ; begin
63768: LD_INT 0
63770: PPUSH
// if not unit then
63771: LD_VAR 0 1
63775: NOT
63776: IFFALSE 63780
// exit ;
63778: GO 63825
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
63780: LD_ADDR_VAR 0 3
63784: PUSH
63785: LD_VAR 0 1
63789: PPUSH
63790: CALL_OW 255
63794: PPUSH
63795: LD_VAR 0 1
63799: PPUSH
63800: CALL_OW 250
63804: PPUSH
63805: LD_VAR 0 1
63809: PPUSH
63810: CALL_OW 251
63814: PPUSH
63815: LD_VAR 0 2
63819: PPUSH
63820: CALL 62059 0 4
63824: ST_TO_ADDR
// end ;
63825: LD_VAR 0 3
63829: RET
// export function DangerInArea ( side , area ) ; begin
63830: LD_INT 0
63832: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
63833: LD_ADDR_VAR 0 3
63837: PUSH
63838: LD_VAR 0 2
63842: PPUSH
63843: LD_INT 81
63845: PUSH
63846: LD_VAR 0 1
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PPUSH
63855: CALL_OW 70
63859: ST_TO_ADDR
// end ;
63860: LD_VAR 0 3
63864: RET
// export function IsExtension ( b ) ; begin
63865: LD_INT 0
63867: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
63868: LD_ADDR_VAR 0 2
63872: PUSH
63873: LD_VAR 0 1
63877: PUSH
63878: LD_INT 23
63880: PUSH
63881: LD_INT 20
63883: PUSH
63884: LD_INT 22
63886: PUSH
63887: LD_INT 17
63889: PUSH
63890: LD_INT 24
63892: PUSH
63893: LD_INT 21
63895: PUSH
63896: LD_INT 19
63898: PUSH
63899: LD_INT 16
63901: PUSH
63902: LD_INT 25
63904: PUSH
63905: LD_INT 18
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: IN
63920: ST_TO_ADDR
// end ;
63921: LD_VAR 0 2
63925: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
63926: LD_INT 0
63928: PPUSH
63929: PPUSH
63930: PPUSH
// result := [ ] ;
63931: LD_ADDR_VAR 0 4
63935: PUSH
63936: EMPTY
63937: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
63938: LD_ADDR_VAR 0 5
63942: PUSH
63943: LD_VAR 0 2
63947: PPUSH
63948: LD_INT 21
63950: PUSH
63951: LD_INT 3
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PPUSH
63958: CALL_OW 70
63962: ST_TO_ADDR
// if not tmp then
63963: LD_VAR 0 5
63967: NOT
63968: IFFALSE 63972
// exit ;
63970: GO 64036
// if checkLink then
63972: LD_VAR 0 3
63976: IFFALSE 64026
// begin for i in tmp do
63978: LD_ADDR_VAR 0 6
63982: PUSH
63983: LD_VAR 0 5
63987: PUSH
63988: FOR_IN
63989: IFFALSE 64024
// if GetBase ( i ) <> base then
63991: LD_VAR 0 6
63995: PPUSH
63996: CALL_OW 274
64000: PUSH
64001: LD_VAR 0 1
64005: NONEQUAL
64006: IFFALSE 64022
// ComLinkToBase ( base , i ) ;
64008: LD_VAR 0 1
64012: PPUSH
64013: LD_VAR 0 6
64017: PPUSH
64018: CALL_OW 169
64022: GO 63988
64024: POP
64025: POP
// end ; result := tmp ;
64026: LD_ADDR_VAR 0 4
64030: PUSH
64031: LD_VAR 0 5
64035: ST_TO_ADDR
// end ;
64036: LD_VAR 0 4
64040: RET
// export function ComComplete ( units , b ) ; var i ; begin
64041: LD_INT 0
64043: PPUSH
64044: PPUSH
// if not units then
64045: LD_VAR 0 1
64049: NOT
64050: IFFALSE 64054
// exit ;
64052: GO 64144
// for i in units do
64054: LD_ADDR_VAR 0 4
64058: PUSH
64059: LD_VAR 0 1
64063: PUSH
64064: FOR_IN
64065: IFFALSE 64142
// if BuildingStatus ( b ) = bs_build then
64067: LD_VAR 0 2
64071: PPUSH
64072: CALL_OW 461
64076: PUSH
64077: LD_INT 1
64079: EQUAL
64080: IFFALSE 64140
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
64082: LD_VAR 0 4
64086: PPUSH
64087: LD_STRING h
64089: PUSH
64090: LD_VAR 0 2
64094: PPUSH
64095: CALL_OW 250
64099: PUSH
64100: LD_VAR 0 2
64104: PPUSH
64105: CALL_OW 251
64109: PUSH
64110: LD_VAR 0 2
64114: PUSH
64115: LD_INT 0
64117: PUSH
64118: LD_INT 0
64120: PUSH
64121: LD_INT 0
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: PUSH
64133: EMPTY
64134: LIST
64135: PPUSH
64136: CALL_OW 446
64140: GO 64064
64142: POP
64143: POP
// end ;
64144: LD_VAR 0 3
64148: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
64149: LD_INT 0
64151: PPUSH
64152: PPUSH
64153: PPUSH
64154: PPUSH
64155: PPUSH
64156: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
64157: LD_VAR 0 1
64161: NOT
64162: IFTRUE 64179
64164: PUSH
64165: LD_VAR 0 1
64169: PPUSH
64170: CALL_OW 263
64174: PUSH
64175: LD_INT 2
64177: NONEQUAL
64178: OR
64179: IFFALSE 64183
// exit ;
64181: GO 64499
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
64183: LD_ADDR_VAR 0 6
64187: PUSH
64188: LD_INT 22
64190: PUSH
64191: LD_VAR 0 1
64195: PPUSH
64196: CALL_OW 255
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 2
64207: PUSH
64208: LD_INT 30
64210: PUSH
64211: LD_INT 36
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 34
64220: PUSH
64221: LD_INT 31
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: LIST
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PPUSH
64237: CALL_OW 69
64241: ST_TO_ADDR
// if not tmp then
64242: LD_VAR 0 6
64246: NOT
64247: IFFALSE 64251
// exit ;
64249: GO 64499
// result := [ ] ;
64251: LD_ADDR_VAR 0 2
64255: PUSH
64256: EMPTY
64257: ST_TO_ADDR
// for i in tmp do
64258: LD_ADDR_VAR 0 3
64262: PUSH
64263: LD_VAR 0 6
64267: PUSH
64268: FOR_IN
64269: IFFALSE 64340
// begin t := UnitsInside ( i ) ;
64271: LD_ADDR_VAR 0 4
64275: PUSH
64276: LD_VAR 0 3
64280: PPUSH
64281: CALL_OW 313
64285: ST_TO_ADDR
// if t then
64286: LD_VAR 0 4
64290: IFFALSE 64338
// for j in t do
64292: LD_ADDR_VAR 0 7
64296: PUSH
64297: LD_VAR 0 4
64301: PUSH
64302: FOR_IN
64303: IFFALSE 64336
// result := Replace ( result , result + 1 , j ) ;
64305: LD_ADDR_VAR 0 2
64309: PUSH
64310: LD_VAR 0 2
64314: PPUSH
64315: LD_VAR 0 2
64319: PUSH
64320: LD_INT 1
64322: PLUS
64323: PPUSH
64324: LD_VAR 0 7
64328: PPUSH
64329: CALL_OW 1
64333: ST_TO_ADDR
64334: GO 64302
64336: POP
64337: POP
// end ;
64338: GO 64268
64340: POP
64341: POP
// if not result then
64342: LD_VAR 0 2
64346: NOT
64347: IFFALSE 64351
// exit ;
64349: GO 64499
// mech := result [ 1 ] ;
64351: LD_ADDR_VAR 0 5
64355: PUSH
64356: LD_VAR 0 2
64360: PUSH
64361: LD_INT 1
64363: ARRAY
64364: ST_TO_ADDR
// if result > 1 then
64365: LD_VAR 0 2
64369: PUSH
64370: LD_INT 1
64372: GREATER
64373: IFFALSE 64485
// begin for i = 2 to result do
64375: LD_ADDR_VAR 0 3
64379: PUSH
64380: DOUBLE
64381: LD_INT 2
64383: DEC
64384: ST_TO_ADDR
64385: LD_VAR 0 2
64389: PUSH
64390: FOR_TO
64391: IFFALSE 64483
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
64393: LD_ADDR_VAR 0 4
64397: PUSH
64398: LD_VAR 0 2
64402: PUSH
64403: LD_VAR 0 3
64407: ARRAY
64408: PPUSH
64409: LD_INT 3
64411: PPUSH
64412: CALL_OW 259
64416: PUSH
64417: LD_VAR 0 2
64421: PUSH
64422: LD_VAR 0 3
64426: ARRAY
64427: PPUSH
64428: CALL_OW 432
64432: MINUS
64433: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
64434: LD_VAR 0 4
64438: PUSH
64439: LD_VAR 0 5
64443: PPUSH
64444: LD_INT 3
64446: PPUSH
64447: CALL_OW 259
64451: PUSH
64452: LD_VAR 0 5
64456: PPUSH
64457: CALL_OW 432
64461: MINUS
64462: GREATEREQUAL
64463: IFFALSE 64481
// mech := result [ i ] ;
64465: LD_ADDR_VAR 0 5
64469: PUSH
64470: LD_VAR 0 2
64474: PUSH
64475: LD_VAR 0 3
64479: ARRAY
64480: ST_TO_ADDR
// end ;
64481: GO 64390
64483: POP
64484: POP
// end ; ComLinkTo ( vehicle , mech ) ;
64485: LD_VAR 0 1
64489: PPUSH
64490: LD_VAR 0 5
64494: PPUSH
64495: CALL_OW 135
// end ;
64499: LD_VAR 0 2
64503: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
64504: LD_INT 0
64506: PPUSH
64507: PPUSH
64508: PPUSH
64509: PPUSH
64510: PPUSH
64511: PPUSH
64512: PPUSH
64513: PPUSH
64514: PPUSH
64515: PPUSH
64516: PPUSH
64517: PPUSH
64518: PPUSH
// result := [ ] ;
64519: LD_ADDR_VAR 0 7
64523: PUSH
64524: EMPTY
64525: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
64526: LD_VAR 0 1
64530: PPUSH
64531: CALL_OW 266
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: LD_INT 1
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: IN
64546: NOT
64547: IFFALSE 64551
// exit ;
64549: GO 66191
// if name then
64551: LD_VAR 0 3
64555: IFFALSE 64571
// SetBName ( base_dep , name ) ;
64557: LD_VAR 0 1
64561: PPUSH
64562: LD_VAR 0 3
64566: PPUSH
64567: CALL_OW 500
// base := GetBase ( base_dep ) ;
64571: LD_ADDR_VAR 0 15
64575: PUSH
64576: LD_VAR 0 1
64580: PPUSH
64581: CALL_OW 274
64585: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
64586: LD_ADDR_VAR 0 16
64590: PUSH
64591: LD_VAR 0 1
64595: PPUSH
64596: CALL_OW 255
64600: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
64601: LD_ADDR_VAR 0 17
64605: PUSH
64606: LD_VAR 0 1
64610: PPUSH
64611: CALL_OW 248
64615: ST_TO_ADDR
// if sources then
64616: LD_VAR 0 5
64620: IFFALSE 64667
// for i = 1 to 3 do
64622: LD_ADDR_VAR 0 8
64626: PUSH
64627: DOUBLE
64628: LD_INT 1
64630: DEC
64631: ST_TO_ADDR
64632: LD_INT 3
64634: PUSH
64635: FOR_TO
64636: IFFALSE 64665
// AddResourceType ( base , i , sources [ i ] ) ;
64638: LD_VAR 0 15
64642: PPUSH
64643: LD_VAR 0 8
64647: PPUSH
64648: LD_VAR 0 5
64652: PUSH
64653: LD_VAR 0 8
64657: ARRAY
64658: PPUSH
64659: CALL_OW 276
64663: GO 64635
64665: POP
64666: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
64667: LD_ADDR_VAR 0 18
64671: PUSH
64672: LD_VAR 0 15
64676: PPUSH
64677: LD_VAR 0 2
64681: PPUSH
64682: LD_INT 1
64684: PPUSH
64685: CALL 63926 0 3
64689: ST_TO_ADDR
// InitHc ;
64690: CALL_OW 19
// InitUc ;
64694: CALL_OW 18
// uc_side := side ;
64698: LD_ADDR_OWVAR 20
64702: PUSH
64703: LD_VAR 0 16
64707: ST_TO_ADDR
// uc_nation := nation ;
64708: LD_ADDR_OWVAR 21
64712: PUSH
64713: LD_VAR 0 17
64717: ST_TO_ADDR
// if buildings then
64718: LD_VAR 0 18
64722: IFFALSE 66050
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
64724: LD_ADDR_VAR 0 19
64728: PUSH
64729: LD_VAR 0 18
64733: PPUSH
64734: LD_INT 2
64736: PUSH
64737: LD_INT 30
64739: PUSH
64740: LD_INT 29
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 30
64749: PUSH
64750: LD_INT 30
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: LIST
64761: PPUSH
64762: CALL_OW 72
64766: ST_TO_ADDR
// if tmp then
64767: LD_VAR 0 19
64771: IFFALSE 64819
// for i in tmp do
64773: LD_ADDR_VAR 0 8
64777: PUSH
64778: LD_VAR 0 19
64782: PUSH
64783: FOR_IN
64784: IFFALSE 64817
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
64786: LD_VAR 0 8
64790: PPUSH
64791: CALL_OW 250
64795: PPUSH
64796: LD_VAR 0 8
64800: PPUSH
64801: CALL_OW 251
64805: PPUSH
64806: LD_VAR 0 16
64810: PPUSH
64811: CALL_OW 441
64815: GO 64783
64817: POP
64818: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
64819: LD_VAR 0 18
64823: PPUSH
64824: LD_INT 2
64826: PUSH
64827: LD_INT 30
64829: PUSH
64830: LD_INT 32
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 30
64839: PUSH
64840: LD_INT 33
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: LIST
64851: PPUSH
64852: CALL_OW 72
64856: IFFALSE 64944
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
64858: LD_ADDR_VAR 0 8
64862: PUSH
64863: LD_VAR 0 18
64867: PPUSH
64868: LD_INT 2
64870: PUSH
64871: LD_INT 30
64873: PUSH
64874: LD_INT 32
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 30
64883: PUSH
64884: LD_INT 33
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: LIST
64895: PPUSH
64896: CALL_OW 72
64900: PUSH
64901: FOR_IN
64902: IFFALSE 64942
// begin if not GetBWeapon ( i ) then
64904: LD_VAR 0 8
64908: PPUSH
64909: CALL_OW 269
64913: NOT
64914: IFFALSE 64940
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
64916: LD_VAR 0 8
64920: PPUSH
64921: LD_VAR 0 8
64925: PPUSH
64926: LD_VAR 0 2
64930: PPUSH
64931: CALL 66196 0 2
64935: PPUSH
64936: CALL_OW 431
// end ;
64940: GO 64901
64942: POP
64943: POP
// end ; for i = 1 to personel do
64944: LD_ADDR_VAR 0 8
64948: PUSH
64949: DOUBLE
64950: LD_INT 1
64952: DEC
64953: ST_TO_ADDR
64954: LD_VAR 0 6
64958: PUSH
64959: FOR_TO
64960: IFFALSE 66030
// begin if i > 4 then
64962: LD_VAR 0 8
64966: PUSH
64967: LD_INT 4
64969: GREATER
64970: IFFALSE 64974
// break ;
64972: GO 66030
// case i of 1 :
64974: LD_VAR 0 8
64978: PUSH
64979: LD_INT 1
64981: DOUBLE
64982: EQUAL
64983: IFTRUE 64987
64985: GO 65067
64987: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
64988: LD_ADDR_VAR 0 12
64992: PUSH
64993: LD_VAR 0 18
64997: PPUSH
64998: LD_INT 22
65000: PUSH
65001: LD_VAR 0 16
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 58
65012: PUSH
65013: EMPTY
65014: LIST
65015: PUSH
65016: LD_INT 2
65018: PUSH
65019: LD_INT 30
65021: PUSH
65022: LD_INT 32
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 30
65031: PUSH
65032: LD_INT 4
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 30
65041: PUSH
65042: LD_INT 5
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: LIST
65059: PPUSH
65060: CALL_OW 72
65064: ST_TO_ADDR
65065: GO 65289
65067: LD_INT 2
65069: DOUBLE
65070: EQUAL
65071: IFTRUE 65075
65073: GO 65137
65075: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
65076: LD_ADDR_VAR 0 12
65080: PUSH
65081: LD_VAR 0 18
65085: PPUSH
65086: LD_INT 22
65088: PUSH
65089: LD_VAR 0 16
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 2
65100: PUSH
65101: LD_INT 30
65103: PUSH
65104: LD_INT 0
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 30
65113: PUSH
65114: LD_INT 1
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: LIST
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PPUSH
65130: CALL_OW 72
65134: ST_TO_ADDR
65135: GO 65289
65137: LD_INT 3
65139: DOUBLE
65140: EQUAL
65141: IFTRUE 65145
65143: GO 65207
65145: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
65146: LD_ADDR_VAR 0 12
65150: PUSH
65151: LD_VAR 0 18
65155: PPUSH
65156: LD_INT 22
65158: PUSH
65159: LD_VAR 0 16
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 2
65170: PUSH
65171: LD_INT 30
65173: PUSH
65174: LD_INT 2
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 30
65183: PUSH
65184: LD_INT 3
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: LIST
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PPUSH
65200: CALL_OW 72
65204: ST_TO_ADDR
65205: GO 65289
65207: LD_INT 4
65209: DOUBLE
65210: EQUAL
65211: IFTRUE 65215
65213: GO 65288
65215: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
65216: LD_ADDR_VAR 0 12
65220: PUSH
65221: LD_VAR 0 18
65225: PPUSH
65226: LD_INT 22
65228: PUSH
65229: LD_VAR 0 16
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 2
65240: PUSH
65241: LD_INT 30
65243: PUSH
65244: LD_INT 6
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 30
65253: PUSH
65254: LD_INT 7
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 30
65263: PUSH
65264: LD_INT 8
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PPUSH
65281: CALL_OW 72
65285: ST_TO_ADDR
65286: GO 65289
65288: POP
// if i = 1 then
65289: LD_VAR 0 8
65293: PUSH
65294: LD_INT 1
65296: EQUAL
65297: IFFALSE 65408
// begin tmp := [ ] ;
65299: LD_ADDR_VAR 0 19
65303: PUSH
65304: EMPTY
65305: ST_TO_ADDR
// for j in f do
65306: LD_ADDR_VAR 0 9
65310: PUSH
65311: LD_VAR 0 12
65315: PUSH
65316: FOR_IN
65317: IFFALSE 65390
// if GetBType ( j ) = b_bunker then
65319: LD_VAR 0 9
65323: PPUSH
65324: CALL_OW 266
65328: PUSH
65329: LD_INT 32
65331: EQUAL
65332: IFFALSE 65359
// tmp := Insert ( tmp , 1 , j ) else
65334: LD_ADDR_VAR 0 19
65338: PUSH
65339: LD_VAR 0 19
65343: PPUSH
65344: LD_INT 1
65346: PPUSH
65347: LD_VAR 0 9
65351: PPUSH
65352: CALL_OW 2
65356: ST_TO_ADDR
65357: GO 65388
// tmp := Insert ( tmp , tmp + 1 , j ) ;
65359: LD_ADDR_VAR 0 19
65363: PUSH
65364: LD_VAR 0 19
65368: PPUSH
65369: LD_VAR 0 19
65373: PUSH
65374: LD_INT 1
65376: PLUS
65377: PPUSH
65378: LD_VAR 0 9
65382: PPUSH
65383: CALL_OW 2
65387: ST_TO_ADDR
65388: GO 65316
65390: POP
65391: POP
// if tmp then
65392: LD_VAR 0 19
65396: IFFALSE 65408
// f := tmp ;
65398: LD_ADDR_VAR 0 12
65402: PUSH
65403: LD_VAR 0 19
65407: ST_TO_ADDR
// end ; x := personel [ i ] ;
65408: LD_ADDR_VAR 0 13
65412: PUSH
65413: LD_VAR 0 6
65417: PUSH
65418: LD_VAR 0 8
65422: ARRAY
65423: ST_TO_ADDR
// if x = - 1 then
65424: LD_VAR 0 13
65428: PUSH
65429: LD_INT 1
65431: NEG
65432: EQUAL
65433: IFFALSE 65644
// begin for j in f do
65435: LD_ADDR_VAR 0 9
65439: PUSH
65440: LD_VAR 0 12
65444: PUSH
65445: FOR_IN
65446: IFFALSE 65640
// repeat InitHc ;
65448: CALL_OW 19
// if GetBType ( j ) = b_barracks then
65452: LD_VAR 0 9
65456: PPUSH
65457: CALL_OW 266
65461: PUSH
65462: LD_INT 5
65464: EQUAL
65465: IFFALSE 65535
// begin if UnitsInside ( j ) < 3 then
65467: LD_VAR 0 9
65471: PPUSH
65472: CALL_OW 313
65476: PUSH
65477: LD_INT 3
65479: LESS
65480: IFFALSE 65516
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
65482: LD_INT 0
65484: PPUSH
65485: LD_INT 5
65487: PUSH
65488: LD_INT 8
65490: PUSH
65491: LD_INT 9
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: LIST
65498: PUSH
65499: LD_VAR 0 17
65503: ARRAY
65504: PPUSH
65505: LD_VAR 0 4
65509: PPUSH
65510: CALL_OW 380
65514: GO 65533
// PrepareHuman ( false , i , skill ) ;
65516: LD_INT 0
65518: PPUSH
65519: LD_VAR 0 8
65523: PPUSH
65524: LD_VAR 0 4
65528: PPUSH
65529: CALL_OW 380
// end else
65533: GO 65552
// PrepareHuman ( false , i , skill ) ;
65535: LD_INT 0
65537: PPUSH
65538: LD_VAR 0 8
65542: PPUSH
65543: LD_VAR 0 4
65547: PPUSH
65548: CALL_OW 380
// un := CreateHuman ;
65552: LD_ADDR_VAR 0 14
65556: PUSH
65557: CALL_OW 44
65561: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
65562: LD_ADDR_VAR 0 7
65566: PUSH
65567: LD_VAR 0 7
65571: PPUSH
65572: LD_INT 1
65574: PPUSH
65575: LD_VAR 0 14
65579: PPUSH
65580: CALL_OW 2
65584: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
65585: LD_VAR 0 14
65589: PPUSH
65590: LD_VAR 0 9
65594: PPUSH
65595: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
65599: LD_VAR 0 9
65603: PPUSH
65604: CALL_OW 313
65608: PUSH
65609: LD_INT 6
65611: EQUAL
65612: IFTRUE 65636
65614: PUSH
65615: LD_VAR 0 9
65619: PPUSH
65620: CALL_OW 266
65624: PUSH
65625: LD_INT 32
65627: PUSH
65628: LD_INT 31
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: IN
65635: OR
65636: IFFALSE 65448
65638: GO 65445
65640: POP
65641: POP
// end else
65642: GO 66028
// for j = 1 to x do
65644: LD_ADDR_VAR 0 9
65648: PUSH
65649: DOUBLE
65650: LD_INT 1
65652: DEC
65653: ST_TO_ADDR
65654: LD_VAR 0 13
65658: PUSH
65659: FOR_TO
65660: IFFALSE 66026
// begin InitHc ;
65662: CALL_OW 19
// if not f then
65666: LD_VAR 0 12
65670: NOT
65671: IFFALSE 65760
// begin PrepareHuman ( false , i , skill ) ;
65673: LD_INT 0
65675: PPUSH
65676: LD_VAR 0 8
65680: PPUSH
65681: LD_VAR 0 4
65685: PPUSH
65686: CALL_OW 380
// un := CreateHuman ;
65690: LD_ADDR_VAR 0 14
65694: PUSH
65695: CALL_OW 44
65699: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
65700: LD_ADDR_VAR 0 7
65704: PUSH
65705: LD_VAR 0 7
65709: PPUSH
65710: LD_INT 1
65712: PPUSH
65713: LD_VAR 0 14
65717: PPUSH
65718: CALL_OW 2
65722: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
65723: LD_VAR 0 14
65727: PPUSH
65728: LD_VAR 0 1
65732: PPUSH
65733: CALL_OW 250
65737: PPUSH
65738: LD_VAR 0 1
65742: PPUSH
65743: CALL_OW 251
65747: PPUSH
65748: LD_INT 10
65750: PPUSH
65751: LD_INT 0
65753: PPUSH
65754: CALL_OW 50
// continue ;
65758: GO 65659
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
65760: LD_VAR 0 12
65764: PUSH
65765: LD_INT 1
65767: ARRAY
65768: PPUSH
65769: CALL_OW 313
65773: IFFALSE 65801
65775: PUSH
65776: LD_VAR 0 12
65780: PUSH
65781: LD_INT 1
65783: ARRAY
65784: PPUSH
65785: CALL_OW 266
65789: PUSH
65790: LD_INT 32
65792: PUSH
65793: LD_INT 31
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: IN
65800: AND
65801: IFTRUE 65822
65803: PUSH
65804: LD_VAR 0 12
65808: PUSH
65809: LD_INT 1
65811: ARRAY
65812: PPUSH
65813: CALL_OW 313
65817: PUSH
65818: LD_INT 6
65820: EQUAL
65821: OR
65822: IFFALSE 65842
// f := Delete ( f , 1 ) ;
65824: LD_ADDR_VAR 0 12
65828: PUSH
65829: LD_VAR 0 12
65833: PPUSH
65834: LD_INT 1
65836: PPUSH
65837: CALL_OW 3
65841: ST_TO_ADDR
// if not f then
65842: LD_VAR 0 12
65846: NOT
65847: IFFALSE 65865
// begin x := x + 2 ;
65849: LD_ADDR_VAR 0 13
65853: PUSH
65854: LD_VAR 0 13
65858: PUSH
65859: LD_INT 2
65861: PLUS
65862: ST_TO_ADDR
// continue ;
65863: GO 65659
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
65865: LD_VAR 0 12
65869: PUSH
65870: LD_INT 1
65872: ARRAY
65873: PPUSH
65874: CALL_OW 266
65878: PUSH
65879: LD_INT 5
65881: EQUAL
65882: IFFALSE 65956
// begin if UnitsInside ( f [ 1 ] ) < 3 then
65884: LD_VAR 0 12
65888: PUSH
65889: LD_INT 1
65891: ARRAY
65892: PPUSH
65893: CALL_OW 313
65897: PUSH
65898: LD_INT 3
65900: LESS
65901: IFFALSE 65937
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
65903: LD_INT 0
65905: PPUSH
65906: LD_INT 5
65908: PUSH
65909: LD_INT 8
65911: PUSH
65912: LD_INT 9
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: LIST
65919: PUSH
65920: LD_VAR 0 17
65924: ARRAY
65925: PPUSH
65926: LD_VAR 0 4
65930: PPUSH
65931: CALL_OW 380
65935: GO 65954
// PrepareHuman ( false , i , skill ) ;
65937: LD_INT 0
65939: PPUSH
65940: LD_VAR 0 8
65944: PPUSH
65945: LD_VAR 0 4
65949: PPUSH
65950: CALL_OW 380
// end else
65954: GO 65973
// PrepareHuman ( false , i , skill ) ;
65956: LD_INT 0
65958: PPUSH
65959: LD_VAR 0 8
65963: PPUSH
65964: LD_VAR 0 4
65968: PPUSH
65969: CALL_OW 380
// un := CreateHuman ;
65973: LD_ADDR_VAR 0 14
65977: PUSH
65978: CALL_OW 44
65982: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
65983: LD_ADDR_VAR 0 7
65987: PUSH
65988: LD_VAR 0 7
65992: PPUSH
65993: LD_INT 1
65995: PPUSH
65996: LD_VAR 0 14
66000: PPUSH
66001: CALL_OW 2
66005: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
66006: LD_VAR 0 14
66010: PPUSH
66011: LD_VAR 0 12
66015: PUSH
66016: LD_INT 1
66018: ARRAY
66019: PPUSH
66020: CALL_OW 52
// end ;
66024: GO 65659
66026: POP
66027: POP
// end ;
66028: GO 64959
66030: POP
66031: POP
// result := result ^ buildings ;
66032: LD_ADDR_VAR 0 7
66036: PUSH
66037: LD_VAR 0 7
66041: PUSH
66042: LD_VAR 0 18
66046: ADD
66047: ST_TO_ADDR
// end else
66048: GO 66191
// begin for i = 1 to personel do
66050: LD_ADDR_VAR 0 8
66054: PUSH
66055: DOUBLE
66056: LD_INT 1
66058: DEC
66059: ST_TO_ADDR
66060: LD_VAR 0 6
66064: PUSH
66065: FOR_TO
66066: IFFALSE 66189
// begin if i > 4 then
66068: LD_VAR 0 8
66072: PUSH
66073: LD_INT 4
66075: GREATER
66076: IFFALSE 66080
// break ;
66078: GO 66189
// x := personel [ i ] ;
66080: LD_ADDR_VAR 0 13
66084: PUSH
66085: LD_VAR 0 6
66089: PUSH
66090: LD_VAR 0 8
66094: ARRAY
66095: ST_TO_ADDR
// if x = - 1 then
66096: LD_VAR 0 13
66100: PUSH
66101: LD_INT 1
66103: NEG
66104: EQUAL
66105: IFFALSE 66109
// continue ;
66107: GO 66065
// PrepareHuman ( false , i , skill ) ;
66109: LD_INT 0
66111: PPUSH
66112: LD_VAR 0 8
66116: PPUSH
66117: LD_VAR 0 4
66121: PPUSH
66122: CALL_OW 380
// un := CreateHuman ;
66126: LD_ADDR_VAR 0 14
66130: PUSH
66131: CALL_OW 44
66135: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
66136: LD_VAR 0 14
66140: PPUSH
66141: LD_VAR 0 1
66145: PPUSH
66146: CALL_OW 250
66150: PPUSH
66151: LD_VAR 0 1
66155: PPUSH
66156: CALL_OW 251
66160: PPUSH
66161: LD_INT 10
66163: PPUSH
66164: LD_INT 0
66166: PPUSH
66167: CALL_OW 50
// result := result ^ un ;
66171: LD_ADDR_VAR 0 7
66175: PUSH
66176: LD_VAR 0 7
66180: PUSH
66181: LD_VAR 0 14
66185: ADD
66186: ST_TO_ADDR
// end ;
66187: GO 66065
66189: POP
66190: POP
// end ; end ;
66191: LD_VAR 0 7
66195: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
66196: LD_INT 0
66198: PPUSH
66199: PPUSH
66200: PPUSH
66201: PPUSH
66202: PPUSH
66203: PPUSH
66204: PPUSH
66205: PPUSH
66206: PPUSH
66207: PPUSH
66208: PPUSH
66209: PPUSH
66210: PPUSH
66211: PPUSH
66212: PPUSH
66213: PPUSH
// result := false ;
66214: LD_ADDR_VAR 0 3
66218: PUSH
66219: LD_INT 0
66221: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
66222: LD_VAR 0 1
66226: NOT
66227: IFTRUE 66252
66229: PUSH
66230: LD_VAR 0 1
66234: PPUSH
66235: CALL_OW 266
66239: PUSH
66240: LD_INT 32
66242: PUSH
66243: LD_INT 33
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: IN
66250: NOT
66251: OR
66252: IFFALSE 66256
// exit ;
66254: GO 67391
// nat := GetNation ( tower ) ;
66256: LD_ADDR_VAR 0 12
66260: PUSH
66261: LD_VAR 0 1
66265: PPUSH
66266: CALL_OW 248
66270: ST_TO_ADDR
// side := GetSide ( tower ) ;
66271: LD_ADDR_VAR 0 16
66275: PUSH
66276: LD_VAR 0 1
66280: PPUSH
66281: CALL_OW 255
66285: ST_TO_ADDR
// x := GetX ( tower ) ;
66286: LD_ADDR_VAR 0 10
66290: PUSH
66291: LD_VAR 0 1
66295: PPUSH
66296: CALL_OW 250
66300: ST_TO_ADDR
// y := GetY ( tower ) ;
66301: LD_ADDR_VAR 0 11
66305: PUSH
66306: LD_VAR 0 1
66310: PPUSH
66311: CALL_OW 251
66315: ST_TO_ADDR
// if not x or not y then
66316: LD_VAR 0 10
66320: NOT
66321: IFTRUE 66330
66323: PUSH
66324: LD_VAR 0 11
66328: NOT
66329: OR
66330: IFFALSE 66334
// exit ;
66332: GO 67391
// weapon := 0 ;
66334: LD_ADDR_VAR 0 18
66338: PUSH
66339: LD_INT 0
66341: ST_TO_ADDR
// fac_list := [ ] ;
66342: LD_ADDR_VAR 0 17
66346: PUSH
66347: EMPTY
66348: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
66349: LD_ADDR_VAR 0 6
66353: PUSH
66354: LD_VAR 0 1
66358: PPUSH
66359: CALL_OW 274
66363: PPUSH
66364: LD_VAR 0 2
66368: PPUSH
66369: LD_INT 0
66371: PPUSH
66372: CALL 63926 0 3
66376: PPUSH
66377: LD_INT 30
66379: PUSH
66380: LD_INT 3
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PPUSH
66387: CALL_OW 72
66391: ST_TO_ADDR
// if not factories then
66392: LD_VAR 0 6
66396: NOT
66397: IFFALSE 66401
// exit ;
66399: GO 67391
// for i in factories do
66401: LD_ADDR_VAR 0 8
66405: PUSH
66406: LD_VAR 0 6
66410: PUSH
66411: FOR_IN
66412: IFFALSE 66437
// fac_list := fac_list union AvailableWeaponList ( i ) ;
66414: LD_ADDR_VAR 0 17
66418: PUSH
66419: LD_VAR 0 17
66423: PUSH
66424: LD_VAR 0 8
66428: PPUSH
66429: CALL_OW 478
66433: UNION
66434: ST_TO_ADDR
66435: GO 66411
66437: POP
66438: POP
// if not fac_list then
66439: LD_VAR 0 17
66443: NOT
66444: IFFALSE 66448
// exit ;
66446: GO 67391
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
66448: LD_ADDR_VAR 0 5
66452: PUSH
66453: LD_INT 4
66455: PUSH
66456: LD_INT 5
66458: PUSH
66459: LD_INT 9
66461: PUSH
66462: LD_INT 10
66464: PUSH
66465: LD_INT 6
66467: PUSH
66468: LD_INT 7
66470: PUSH
66471: LD_INT 11
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 27
66485: PUSH
66486: LD_INT 28
66488: PUSH
66489: LD_INT 26
66491: PUSH
66492: LD_INT 30
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 43
66503: PUSH
66504: LD_INT 44
66506: PUSH
66507: LD_INT 46
66509: PUSH
66510: LD_INT 45
66512: PUSH
66513: LD_INT 47
66515: PUSH
66516: LD_INT 49
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: LIST
66531: PUSH
66532: LD_VAR 0 12
66536: ARRAY
66537: ST_TO_ADDR
// list := list isect fac_list ;
66538: LD_ADDR_VAR 0 5
66542: PUSH
66543: LD_VAR 0 5
66547: PUSH
66548: LD_VAR 0 17
66552: ISECT
66553: ST_TO_ADDR
// if not list then
66554: LD_VAR 0 5
66558: NOT
66559: IFFALSE 66563
// exit ;
66561: GO 67391
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
66563: LD_VAR 0 12
66567: PUSH
66568: LD_INT 3
66570: EQUAL
66571: IFFALSE 66583
66573: PUSH
66574: LD_INT 49
66576: PUSH
66577: LD_VAR 0 5
66581: IN
66582: AND
66583: IFFALSE 66603
66585: PUSH
66586: LD_INT 31
66588: PPUSH
66589: LD_VAR 0 16
66593: PPUSH
66594: CALL_OW 321
66598: PUSH
66599: LD_INT 2
66601: EQUAL
66602: AND
66603: IFFALSE 66663
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
66605: LD_INT 22
66607: PUSH
66608: LD_VAR 0 16
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 35
66619: PUSH
66620: LD_INT 49
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 91
66629: PUSH
66630: LD_VAR 0 1
66634: PUSH
66635: LD_INT 10
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: LIST
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: LIST
66647: PPUSH
66648: CALL_OW 69
66652: NOT
66653: IFFALSE 66663
// weapon := ru_time_lapser ;
66655: LD_ADDR_VAR 0 18
66659: PUSH
66660: LD_INT 49
66662: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
66663: LD_VAR 0 12
66667: PUSH
66668: LD_INT 1
66670: PUSH
66671: LD_INT 2
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: IN
66678: IFFALSE 66702
66680: PUSH
66681: LD_INT 11
66683: PUSH
66684: LD_VAR 0 5
66688: IN
66689: IFTRUE 66701
66691: PUSH
66692: LD_INT 30
66694: PUSH
66695: LD_VAR 0 5
66699: IN
66700: OR
66701: AND
66702: IFFALSE 66722
66704: PUSH
66705: LD_INT 6
66707: PPUSH
66708: LD_VAR 0 16
66712: PPUSH
66713: CALL_OW 321
66717: PUSH
66718: LD_INT 2
66720: EQUAL
66721: AND
66722: IFFALSE 66889
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
66724: LD_INT 22
66726: PUSH
66727: LD_VAR 0 16
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 2
66738: PUSH
66739: LD_INT 35
66741: PUSH
66742: LD_INT 11
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 35
66751: PUSH
66752: LD_INT 30
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 91
66766: PUSH
66767: LD_VAR 0 1
66771: PUSH
66772: LD_INT 18
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: LIST
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: LIST
66784: PPUSH
66785: CALL_OW 69
66789: NOT
66790: IFFALSE 66866
66792: PUSH
66793: LD_INT 22
66795: PUSH
66796: LD_VAR 0 16
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 2
66807: PUSH
66808: LD_INT 30
66810: PUSH
66811: LD_INT 32
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 30
66820: PUSH
66821: LD_INT 33
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 91
66835: PUSH
66836: LD_VAR 0 1
66840: PUSH
66841: LD_INT 12
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: LIST
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: LIST
66853: PUSH
66854: EMPTY
66855: LIST
66856: PPUSH
66857: CALL_OW 69
66861: PUSH
66862: LD_INT 2
66864: GREATER
66865: AND
66866: IFFALSE 66889
// weapon := [ us_radar , ar_radar ] [ nat ] ;
66868: LD_ADDR_VAR 0 18
66872: PUSH
66873: LD_INT 11
66875: PUSH
66876: LD_INT 30
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_VAR 0 12
66887: ARRAY
66888: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
66889: LD_VAR 0 18
66893: NOT
66894: IFFALSE 66914
66896: PUSH
66897: LD_INT 40
66899: PPUSH
66900: LD_VAR 0 16
66904: PPUSH
66905: CALL_OW 321
66909: PUSH
66910: LD_INT 2
66912: EQUAL
66913: AND
66914: IFFALSE 66950
66916: PUSH
66917: LD_INT 7
66919: PUSH
66920: LD_VAR 0 5
66924: IN
66925: IFTRUE 66937
66927: PUSH
66928: LD_INT 28
66930: PUSH
66931: LD_VAR 0 5
66935: IN
66936: OR
66937: IFTRUE 66949
66939: PUSH
66940: LD_INT 45
66942: PUSH
66943: LD_VAR 0 5
66947: IN
66948: OR
66949: AND
66950: IFFALSE 67204
// begin hex := GetHexInfo ( x , y ) ;
66952: LD_ADDR_VAR 0 4
66956: PUSH
66957: LD_VAR 0 10
66961: PPUSH
66962: LD_VAR 0 11
66966: PPUSH
66967: CALL_OW 546
66971: ST_TO_ADDR
// if hex [ 1 ] then
66972: LD_VAR 0 4
66976: PUSH
66977: LD_INT 1
66979: ARRAY
66980: IFFALSE 66984
// exit ;
66982: GO 67391
// height := hex [ 2 ] ;
66984: LD_ADDR_VAR 0 15
66988: PUSH
66989: LD_VAR 0 4
66993: PUSH
66994: LD_INT 2
66996: ARRAY
66997: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
66998: LD_ADDR_VAR 0 14
67002: PUSH
67003: LD_INT 0
67005: PUSH
67006: LD_INT 2
67008: PUSH
67009: LD_INT 3
67011: PUSH
67012: LD_INT 5
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: ST_TO_ADDR
// for i in tmp do
67021: LD_ADDR_VAR 0 8
67025: PUSH
67026: LD_VAR 0 14
67030: PUSH
67031: FOR_IN
67032: IFFALSE 67202
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
67034: LD_ADDR_VAR 0 9
67038: PUSH
67039: LD_VAR 0 10
67043: PPUSH
67044: LD_VAR 0 8
67048: PPUSH
67049: LD_INT 5
67051: PPUSH
67052: CALL_OW 272
67056: PUSH
67057: LD_VAR 0 11
67061: PPUSH
67062: LD_VAR 0 8
67066: PPUSH
67067: LD_INT 5
67069: PPUSH
67070: CALL_OW 273
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
67079: LD_VAR 0 9
67083: PUSH
67084: LD_INT 1
67086: ARRAY
67087: PPUSH
67088: LD_VAR 0 9
67092: PUSH
67093: LD_INT 2
67095: ARRAY
67096: PPUSH
67097: CALL_OW 488
67101: IFFALSE 67200
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
67103: LD_ADDR_VAR 0 4
67107: PUSH
67108: LD_VAR 0 9
67112: PUSH
67113: LD_INT 1
67115: ARRAY
67116: PPUSH
67117: LD_VAR 0 9
67121: PUSH
67122: LD_INT 2
67124: ARRAY
67125: PPUSH
67126: CALL_OW 546
67130: ST_TO_ADDR
// if hex [ 1 ] then
67131: LD_VAR 0 4
67135: PUSH
67136: LD_INT 1
67138: ARRAY
67139: IFFALSE 67143
// continue ;
67141: GO 67031
// h := hex [ 2 ] ;
67143: LD_ADDR_VAR 0 13
67147: PUSH
67148: LD_VAR 0 4
67152: PUSH
67153: LD_INT 2
67155: ARRAY
67156: ST_TO_ADDR
// if h + 7 < height then
67157: LD_VAR 0 13
67161: PUSH
67162: LD_INT 7
67164: PLUS
67165: PUSH
67166: LD_VAR 0 15
67170: LESS
67171: IFFALSE 67200
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
67173: LD_ADDR_VAR 0 18
67177: PUSH
67178: LD_INT 7
67180: PUSH
67181: LD_INT 28
67183: PUSH
67184: LD_INT 45
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: LIST
67191: PUSH
67192: LD_VAR 0 12
67196: ARRAY
67197: ST_TO_ADDR
// break ;
67198: GO 67202
// end ; end ; end ;
67200: GO 67031
67202: POP
67203: POP
// end ; if not weapon then
67204: LD_VAR 0 18
67208: NOT
67209: IFFALSE 67269
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
67211: LD_ADDR_VAR 0 5
67215: PUSH
67216: LD_VAR 0 5
67220: PUSH
67221: LD_INT 11
67223: PUSH
67224: LD_INT 30
67226: PUSH
67227: LD_INT 49
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: LIST
67234: DIFF
67235: ST_TO_ADDR
// if not list then
67236: LD_VAR 0 5
67240: NOT
67241: IFFALSE 67245
// exit ;
67243: GO 67391
// weapon := list [ rand ( 1 , list ) ] ;
67245: LD_ADDR_VAR 0 18
67249: PUSH
67250: LD_VAR 0 5
67254: PUSH
67255: LD_INT 1
67257: PPUSH
67258: LD_VAR 0 5
67262: PPUSH
67263: CALL_OW 12
67267: ARRAY
67268: ST_TO_ADDR
// end ; if weapon then
67269: LD_VAR 0 18
67273: IFFALSE 67391
// begin tmp := CostOfWeapon ( weapon ) ;
67275: LD_ADDR_VAR 0 14
67279: PUSH
67280: LD_VAR 0 18
67284: PPUSH
67285: CALL_OW 451
67289: ST_TO_ADDR
// j := GetBase ( tower ) ;
67290: LD_ADDR_VAR 0 9
67294: PUSH
67295: LD_VAR 0 1
67299: PPUSH
67300: CALL_OW 274
67304: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
67305: LD_VAR 0 9
67309: PPUSH
67310: LD_INT 1
67312: PPUSH
67313: CALL_OW 275
67317: PUSH
67318: LD_VAR 0 14
67322: PUSH
67323: LD_INT 1
67325: ARRAY
67326: GREATEREQUAL
67327: IFFALSE 67353
67329: PUSH
67330: LD_VAR 0 9
67334: PPUSH
67335: LD_INT 2
67337: PPUSH
67338: CALL_OW 275
67342: PUSH
67343: LD_VAR 0 14
67347: PUSH
67348: LD_INT 2
67350: ARRAY
67351: GREATEREQUAL
67352: AND
67353: IFFALSE 67379
67355: PUSH
67356: LD_VAR 0 9
67360: PPUSH
67361: LD_INT 3
67363: PPUSH
67364: CALL_OW 275
67368: PUSH
67369: LD_VAR 0 14
67373: PUSH
67374: LD_INT 3
67376: ARRAY
67377: GREATEREQUAL
67378: AND
67379: IFFALSE 67391
// result := weapon ;
67381: LD_ADDR_VAR 0 3
67385: PUSH
67386: LD_VAR 0 18
67390: ST_TO_ADDR
// end ; end ;
67391: LD_VAR 0 3
67395: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
67396: LD_INT 0
67398: PPUSH
67399: PPUSH
// result := true ;
67400: LD_ADDR_VAR 0 3
67404: PUSH
67405: LD_INT 1
67407: ST_TO_ADDR
// if array1 = array2 then
67408: LD_VAR 0 1
67412: PUSH
67413: LD_VAR 0 2
67417: EQUAL
67418: IFFALSE 67478
// begin for i = 1 to array1 do
67420: LD_ADDR_VAR 0 4
67424: PUSH
67425: DOUBLE
67426: LD_INT 1
67428: DEC
67429: ST_TO_ADDR
67430: LD_VAR 0 1
67434: PUSH
67435: FOR_TO
67436: IFFALSE 67474
// if array1 [ i ] <> array2 [ i ] then
67438: LD_VAR 0 1
67442: PUSH
67443: LD_VAR 0 4
67447: ARRAY
67448: PUSH
67449: LD_VAR 0 2
67453: PUSH
67454: LD_VAR 0 4
67458: ARRAY
67459: NONEQUAL
67460: IFFALSE 67472
// begin result := false ;
67462: LD_ADDR_VAR 0 3
67466: PUSH
67467: LD_INT 0
67469: ST_TO_ADDR
// break ;
67470: GO 67474
// end ;
67472: GO 67435
67474: POP
67475: POP
// end else
67476: GO 67486
// result := false ;
67478: LD_ADDR_VAR 0 3
67482: PUSH
67483: LD_INT 0
67485: ST_TO_ADDR
// end ;
67486: LD_VAR 0 3
67490: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
67491: LD_INT 0
67493: PPUSH
67494: PPUSH
// if not array1 or not array2 then
67495: LD_VAR 0 1
67499: NOT
67500: IFTRUE 67509
67502: PUSH
67503: LD_VAR 0 2
67507: NOT
67508: OR
67509: IFFALSE 67513
// exit ;
67511: GO 67577
// result := true ;
67513: LD_ADDR_VAR 0 3
67517: PUSH
67518: LD_INT 1
67520: ST_TO_ADDR
// for i = 1 to array1 do
67521: LD_ADDR_VAR 0 4
67525: PUSH
67526: DOUBLE
67527: LD_INT 1
67529: DEC
67530: ST_TO_ADDR
67531: LD_VAR 0 1
67535: PUSH
67536: FOR_TO
67537: IFFALSE 67575
// if array1 [ i ] <> array2 [ i ] then
67539: LD_VAR 0 1
67543: PUSH
67544: LD_VAR 0 4
67548: ARRAY
67549: PUSH
67550: LD_VAR 0 2
67554: PUSH
67555: LD_VAR 0 4
67559: ARRAY
67560: NONEQUAL
67561: IFFALSE 67573
// begin result := false ;
67563: LD_ADDR_VAR 0 3
67567: PUSH
67568: LD_INT 0
67570: ST_TO_ADDR
// break ;
67571: GO 67575
// end ;
67573: GO 67536
67575: POP
67576: POP
// end ;
67577: LD_VAR 0 3
67581: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
67582: LD_INT 0
67584: PPUSH
67585: PPUSH
67586: PPUSH
// pom := GetBase ( fac ) ;
67587: LD_ADDR_VAR 0 5
67591: PUSH
67592: LD_VAR 0 1
67596: PPUSH
67597: CALL_OW 274
67601: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
67602: LD_ADDR_VAR 0 4
67606: PUSH
67607: LD_VAR 0 2
67611: PUSH
67612: LD_INT 1
67614: ARRAY
67615: PPUSH
67616: LD_VAR 0 2
67620: PUSH
67621: LD_INT 2
67623: ARRAY
67624: PPUSH
67625: LD_VAR 0 2
67629: PUSH
67630: LD_INT 3
67632: ARRAY
67633: PPUSH
67634: LD_VAR 0 2
67638: PUSH
67639: LD_INT 4
67641: ARRAY
67642: PPUSH
67643: CALL_OW 449
67647: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
67648: LD_ADDR_VAR 0 3
67652: PUSH
67653: LD_VAR 0 5
67657: PPUSH
67658: LD_INT 1
67660: PPUSH
67661: CALL_OW 275
67665: PUSH
67666: LD_VAR 0 4
67670: PUSH
67671: LD_INT 1
67673: ARRAY
67674: GREATEREQUAL
67675: IFFALSE 67701
67677: PUSH
67678: LD_VAR 0 5
67682: PPUSH
67683: LD_INT 2
67685: PPUSH
67686: CALL_OW 275
67690: PUSH
67691: LD_VAR 0 4
67695: PUSH
67696: LD_INT 2
67698: ARRAY
67699: GREATEREQUAL
67700: AND
67701: IFFALSE 67727
67703: PUSH
67704: LD_VAR 0 5
67708: PPUSH
67709: LD_INT 3
67711: PPUSH
67712: CALL_OW 275
67716: PUSH
67717: LD_VAR 0 4
67721: PUSH
67722: LD_INT 3
67724: ARRAY
67725: GREATEREQUAL
67726: AND
67727: ST_TO_ADDR
// end ;
67728: LD_VAR 0 3
67732: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
67733: LD_INT 0
67735: PPUSH
67736: PPUSH
67737: PPUSH
67738: PPUSH
// pom := GetBase ( building ) ;
67739: LD_ADDR_VAR 0 3
67743: PUSH
67744: LD_VAR 0 1
67748: PPUSH
67749: CALL_OW 274
67753: ST_TO_ADDR
// if not pom then
67754: LD_VAR 0 3
67758: NOT
67759: IFFALSE 67763
// exit ;
67761: GO 67937
// btype := GetBType ( building ) ;
67763: LD_ADDR_VAR 0 5
67767: PUSH
67768: LD_VAR 0 1
67772: PPUSH
67773: CALL_OW 266
67777: ST_TO_ADDR
// if btype = b_armoury then
67778: LD_VAR 0 5
67782: PUSH
67783: LD_INT 4
67785: EQUAL
67786: IFFALSE 67796
// btype := b_barracks ;
67788: LD_ADDR_VAR 0 5
67792: PUSH
67793: LD_INT 5
67795: ST_TO_ADDR
// if btype = b_depot then
67796: LD_VAR 0 5
67800: PUSH
67801: LD_INT 0
67803: EQUAL
67804: IFFALSE 67814
// btype := b_warehouse ;
67806: LD_ADDR_VAR 0 5
67810: PUSH
67811: LD_INT 1
67813: ST_TO_ADDR
// if btype = b_workshop then
67814: LD_VAR 0 5
67818: PUSH
67819: LD_INT 2
67821: EQUAL
67822: IFFALSE 67832
// btype := b_factory ;
67824: LD_ADDR_VAR 0 5
67828: PUSH
67829: LD_INT 3
67831: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
67832: LD_ADDR_VAR 0 4
67836: PUSH
67837: LD_VAR 0 5
67841: PPUSH
67842: LD_VAR 0 1
67846: PPUSH
67847: CALL_OW 248
67851: PPUSH
67852: CALL_OW 450
67856: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
67857: LD_ADDR_VAR 0 2
67861: PUSH
67862: LD_VAR 0 3
67866: PPUSH
67867: LD_INT 1
67869: PPUSH
67870: CALL_OW 275
67874: PUSH
67875: LD_VAR 0 4
67879: PUSH
67880: LD_INT 1
67882: ARRAY
67883: GREATEREQUAL
67884: IFFALSE 67910
67886: PUSH
67887: LD_VAR 0 3
67891: PPUSH
67892: LD_INT 2
67894: PPUSH
67895: CALL_OW 275
67899: PUSH
67900: LD_VAR 0 4
67904: PUSH
67905: LD_INT 2
67907: ARRAY
67908: GREATEREQUAL
67909: AND
67910: IFFALSE 67936
67912: PUSH
67913: LD_VAR 0 3
67917: PPUSH
67918: LD_INT 3
67920: PPUSH
67921: CALL_OW 275
67925: PUSH
67926: LD_VAR 0 4
67930: PUSH
67931: LD_INT 3
67933: ARRAY
67934: GREATEREQUAL
67935: AND
67936: ST_TO_ADDR
// end ;
67937: LD_VAR 0 2
67941: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
67942: LD_INT 0
67944: PPUSH
67945: PPUSH
67946: PPUSH
// pom := GetBase ( building ) ;
67947: LD_ADDR_VAR 0 4
67951: PUSH
67952: LD_VAR 0 1
67956: PPUSH
67957: CALL_OW 274
67961: ST_TO_ADDR
// if not pom then
67962: LD_VAR 0 4
67966: NOT
67967: IFFALSE 67971
// exit ;
67969: GO 68076
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
67971: LD_ADDR_VAR 0 5
67975: PUSH
67976: LD_VAR 0 2
67980: PPUSH
67981: LD_VAR 0 1
67985: PPUSH
67986: CALL_OW 248
67990: PPUSH
67991: CALL_OW 450
67995: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
67996: LD_ADDR_VAR 0 3
68000: PUSH
68001: LD_VAR 0 4
68005: PPUSH
68006: LD_INT 1
68008: PPUSH
68009: CALL_OW 275
68013: PUSH
68014: LD_VAR 0 5
68018: PUSH
68019: LD_INT 1
68021: ARRAY
68022: GREATEREQUAL
68023: IFFALSE 68049
68025: PUSH
68026: LD_VAR 0 4
68030: PPUSH
68031: LD_INT 2
68033: PPUSH
68034: CALL_OW 275
68038: PUSH
68039: LD_VAR 0 5
68043: PUSH
68044: LD_INT 2
68046: ARRAY
68047: GREATEREQUAL
68048: AND
68049: IFFALSE 68075
68051: PUSH
68052: LD_VAR 0 4
68056: PPUSH
68057: LD_INT 3
68059: PPUSH
68060: CALL_OW 275
68064: PUSH
68065: LD_VAR 0 5
68069: PUSH
68070: LD_INT 3
68072: ARRAY
68073: GREATEREQUAL
68074: AND
68075: ST_TO_ADDR
// end ;
68076: LD_VAR 0 3
68080: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
68081: LD_INT 0
68083: PPUSH
68084: PPUSH
68085: PPUSH
68086: PPUSH
68087: PPUSH
68088: PPUSH
68089: PPUSH
68090: PPUSH
68091: PPUSH
68092: PPUSH
68093: PPUSH
// result := false ;
68094: LD_ADDR_VAR 0 8
68098: PUSH
68099: LD_INT 0
68101: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
68102: LD_VAR 0 5
68106: NOT
68107: IFTRUE 68116
68109: PUSH
68110: LD_VAR 0 1
68114: NOT
68115: OR
68116: IFTRUE 68125
68118: PUSH
68119: LD_VAR 0 2
68123: NOT
68124: OR
68125: IFTRUE 68134
68127: PUSH
68128: LD_VAR 0 3
68132: NOT
68133: OR
68134: IFFALSE 68138
// exit ;
68136: GO 68964
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
68138: LD_ADDR_VAR 0 14
68142: PUSH
68143: LD_VAR 0 1
68147: PPUSH
68148: LD_VAR 0 2
68152: PPUSH
68153: LD_VAR 0 3
68157: PPUSH
68158: LD_VAR 0 4
68162: PPUSH
68163: LD_VAR 0 5
68167: PUSH
68168: LD_INT 1
68170: ARRAY
68171: PPUSH
68172: CALL_OW 248
68176: PPUSH
68177: LD_INT 0
68179: PPUSH
68180: CALL 70245 0 6
68184: ST_TO_ADDR
// if not hexes then
68185: LD_VAR 0 14
68189: NOT
68190: IFFALSE 68194
// exit ;
68192: GO 68964
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
68194: LD_ADDR_VAR 0 17
68198: PUSH
68199: LD_VAR 0 5
68203: PPUSH
68204: LD_INT 22
68206: PUSH
68207: LD_VAR 0 13
68211: PPUSH
68212: CALL_OW 255
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 2
68223: PUSH
68224: LD_INT 30
68226: PUSH
68227: LD_INT 0
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 30
68236: PUSH
68237: LD_INT 1
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: LIST
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PPUSH
68253: CALL_OW 72
68257: ST_TO_ADDR
// for i = 1 to hexes do
68258: LD_ADDR_VAR 0 9
68262: PUSH
68263: DOUBLE
68264: LD_INT 1
68266: DEC
68267: ST_TO_ADDR
68268: LD_VAR 0 14
68272: PUSH
68273: FOR_TO
68274: IFFALSE 68962
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68276: LD_ADDR_VAR 0 13
68280: PUSH
68281: LD_VAR 0 14
68285: PUSH
68286: LD_VAR 0 9
68290: ARRAY
68291: PUSH
68292: LD_INT 1
68294: ARRAY
68295: PPUSH
68296: LD_VAR 0 14
68300: PUSH
68301: LD_VAR 0 9
68305: ARRAY
68306: PUSH
68307: LD_INT 2
68309: ARRAY
68310: PPUSH
68311: CALL_OW 428
68315: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
68316: LD_VAR 0 14
68320: PUSH
68321: LD_VAR 0 9
68325: ARRAY
68326: PUSH
68327: LD_INT 1
68329: ARRAY
68330: PPUSH
68331: LD_VAR 0 14
68335: PUSH
68336: LD_VAR 0 9
68340: ARRAY
68341: PUSH
68342: LD_INT 2
68344: ARRAY
68345: PPUSH
68346: CALL_OW 351
68350: IFTRUE 68389
68352: PUSH
68353: LD_VAR 0 14
68357: PUSH
68358: LD_VAR 0 9
68362: ARRAY
68363: PUSH
68364: LD_INT 1
68366: ARRAY
68367: PPUSH
68368: LD_VAR 0 14
68372: PUSH
68373: LD_VAR 0 9
68377: ARRAY
68378: PUSH
68379: LD_INT 2
68381: ARRAY
68382: PPUSH
68383: CALL_OW 488
68387: NOT
68388: OR
68389: IFTRUE 68406
68391: PUSH
68392: LD_VAR 0 13
68396: PPUSH
68397: CALL_OW 247
68401: PUSH
68402: LD_INT 3
68404: EQUAL
68405: OR
68406: IFFALSE 68412
// exit ;
68408: POP
68409: POP
68410: GO 68964
// if not tmp then
68412: LD_VAR 0 13
68416: NOT
68417: IFFALSE 68421
// continue ;
68419: GO 68273
// result := true ;
68421: LD_ADDR_VAR 0 8
68425: PUSH
68426: LD_INT 1
68428: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
68429: LD_VAR 0 6
68433: IFFALSE 68450
68435: PUSH
68436: LD_VAR 0 13
68440: PPUSH
68441: CALL_OW 247
68445: PUSH
68446: LD_INT 2
68448: EQUAL
68449: AND
68450: IFFALSE 68467
68452: PUSH
68453: LD_VAR 0 13
68457: PPUSH
68458: CALL_OW 263
68462: PUSH
68463: LD_INT 1
68465: EQUAL
68466: AND
68467: IFFALSE 68631
// begin if IsDrivenBy ( tmp ) then
68469: LD_VAR 0 13
68473: PPUSH
68474: CALL_OW 311
68478: IFFALSE 68482
// continue ;
68480: GO 68273
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
68482: LD_VAR 0 6
68486: PPUSH
68487: LD_INT 3
68489: PUSH
68490: LD_INT 60
68492: PUSH
68493: EMPTY
68494: LIST
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: LD_INT 3
68502: PUSH
68503: LD_INT 55
68505: PUSH
68506: EMPTY
68507: LIST
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PPUSH
68517: CALL_OW 72
68521: IFFALSE 68629
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
68523: LD_ADDR_VAR 0 18
68527: PUSH
68528: LD_VAR 0 6
68532: PPUSH
68533: LD_INT 3
68535: PUSH
68536: LD_INT 60
68538: PUSH
68539: EMPTY
68540: LIST
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 3
68548: PUSH
68549: LD_INT 55
68551: PUSH
68552: EMPTY
68553: LIST
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PPUSH
68563: CALL_OW 72
68567: PUSH
68568: LD_INT 1
68570: ARRAY
68571: ST_TO_ADDR
// if IsInUnit ( driver ) then
68572: LD_VAR 0 18
68576: PPUSH
68577: CALL_OW 310
68581: IFFALSE 68592
// ComExit ( driver ) ;
68583: LD_VAR 0 18
68587: PPUSH
68588: CALL 94235 0 1
// AddComEnterUnit ( driver , tmp ) ;
68592: LD_VAR 0 18
68596: PPUSH
68597: LD_VAR 0 13
68601: PPUSH
68602: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
68606: LD_VAR 0 18
68610: PPUSH
68611: LD_VAR 0 7
68615: PPUSH
68616: CALL_OW 173
// AddComExitVehicle ( driver ) ;
68620: LD_VAR 0 18
68624: PPUSH
68625: CALL_OW 181
// end ; continue ;
68629: GO 68273
// end ; if not cleaners or not tmp in cleaners then
68631: LD_VAR 0 6
68635: NOT
68636: IFTRUE 68651
68638: PUSH
68639: LD_VAR 0 13
68643: PUSH
68644: LD_VAR 0 6
68648: IN
68649: NOT
68650: OR
68651: IFFALSE 68960
// begin if dep then
68653: LD_VAR 0 17
68657: IFFALSE 68793
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
68659: LD_ADDR_VAR 0 16
68663: PUSH
68664: LD_VAR 0 17
68668: PUSH
68669: LD_INT 1
68671: ARRAY
68672: PPUSH
68673: CALL_OW 250
68677: PPUSH
68678: LD_VAR 0 17
68682: PUSH
68683: LD_INT 1
68685: ARRAY
68686: PPUSH
68687: CALL_OW 254
68691: PPUSH
68692: LD_INT 5
68694: PPUSH
68695: CALL_OW 272
68699: PUSH
68700: LD_VAR 0 17
68704: PUSH
68705: LD_INT 1
68707: ARRAY
68708: PPUSH
68709: CALL_OW 251
68713: PPUSH
68714: LD_VAR 0 17
68718: PUSH
68719: LD_INT 1
68721: ARRAY
68722: PPUSH
68723: CALL_OW 254
68727: PPUSH
68728: LD_INT 5
68730: PPUSH
68731: CALL_OW 273
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
68740: LD_VAR 0 16
68744: PUSH
68745: LD_INT 1
68747: ARRAY
68748: PPUSH
68749: LD_VAR 0 16
68753: PUSH
68754: LD_INT 2
68756: ARRAY
68757: PPUSH
68758: CALL_OW 488
68762: IFFALSE 68793
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
68764: LD_VAR 0 13
68768: PPUSH
68769: LD_VAR 0 16
68773: PUSH
68774: LD_INT 1
68776: ARRAY
68777: PPUSH
68778: LD_VAR 0 16
68782: PUSH
68783: LD_INT 2
68785: ARRAY
68786: PPUSH
68787: CALL_OW 111
// continue ;
68791: GO 68273
// end ; end ; r := GetDir ( tmp ) ;
68793: LD_ADDR_VAR 0 15
68797: PUSH
68798: LD_VAR 0 13
68802: PPUSH
68803: CALL_OW 254
68807: ST_TO_ADDR
// if r = 5 then
68808: LD_VAR 0 15
68812: PUSH
68813: LD_INT 5
68815: EQUAL
68816: IFFALSE 68826
// r := 0 ;
68818: LD_ADDR_VAR 0 15
68822: PUSH
68823: LD_INT 0
68825: ST_TO_ADDR
// for j = r to 5 do
68826: LD_ADDR_VAR 0 10
68830: PUSH
68831: DOUBLE
68832: LD_VAR 0 15
68836: DEC
68837: ST_TO_ADDR
68838: LD_INT 5
68840: PUSH
68841: FOR_TO
68842: IFFALSE 68958
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
68844: LD_ADDR_VAR 0 11
68848: PUSH
68849: LD_VAR 0 13
68853: PPUSH
68854: CALL_OW 250
68858: PPUSH
68859: LD_VAR 0 10
68863: PPUSH
68864: LD_INT 2
68866: PPUSH
68867: CALL_OW 272
68871: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
68872: LD_ADDR_VAR 0 12
68876: PUSH
68877: LD_VAR 0 13
68881: PPUSH
68882: CALL_OW 251
68886: PPUSH
68887: LD_VAR 0 10
68891: PPUSH
68892: LD_INT 2
68894: PPUSH
68895: CALL_OW 273
68899: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
68900: LD_VAR 0 11
68904: PPUSH
68905: LD_VAR 0 12
68909: PPUSH
68910: CALL_OW 488
68914: IFFALSE 68933
68916: PUSH
68917: LD_VAR 0 11
68921: PPUSH
68922: LD_VAR 0 12
68926: PPUSH
68927: CALL_OW 428
68931: NOT
68932: AND
68933: IFFALSE 68956
// begin ComMoveXY ( tmp , _x , _y ) ;
68935: LD_VAR 0 13
68939: PPUSH
68940: LD_VAR 0 11
68944: PPUSH
68945: LD_VAR 0 12
68949: PPUSH
68950: CALL_OW 111
// break ;
68954: GO 68958
// end ; end ;
68956: GO 68841
68958: POP
68959: POP
// end ; end ;
68960: GO 68273
68962: POP
68963: POP
// end ;
68964: LD_VAR 0 8
68968: RET
// export function BuildingTechInvented ( side , btype ) ; begin
68969: LD_INT 0
68971: PPUSH
// result := true ;
68972: LD_ADDR_VAR 0 3
68976: PUSH
68977: LD_INT 1
68979: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
68980: LD_VAR 0 2
68984: PUSH
68985: LD_INT 24
68987: DOUBLE
68988: EQUAL
68989: IFTRUE 68999
68991: LD_INT 33
68993: DOUBLE
68994: EQUAL
68995: IFTRUE 68999
68997: GO 69024
68999: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
69000: LD_ADDR_VAR 0 3
69004: PUSH
69005: LD_INT 32
69007: PPUSH
69008: LD_VAR 0 1
69012: PPUSH
69013: CALL_OW 321
69017: PUSH
69018: LD_INT 2
69020: EQUAL
69021: ST_TO_ADDR
69022: GO 69340
69024: LD_INT 20
69026: DOUBLE
69027: EQUAL
69028: IFTRUE 69032
69030: GO 69057
69032: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
69033: LD_ADDR_VAR 0 3
69037: PUSH
69038: LD_INT 6
69040: PPUSH
69041: LD_VAR 0 1
69045: PPUSH
69046: CALL_OW 321
69050: PUSH
69051: LD_INT 2
69053: EQUAL
69054: ST_TO_ADDR
69055: GO 69340
69057: LD_INT 22
69059: DOUBLE
69060: EQUAL
69061: IFTRUE 69071
69063: LD_INT 36
69065: DOUBLE
69066: EQUAL
69067: IFTRUE 69071
69069: GO 69096
69071: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
69072: LD_ADDR_VAR 0 3
69076: PUSH
69077: LD_INT 15
69079: PPUSH
69080: LD_VAR 0 1
69084: PPUSH
69085: CALL_OW 321
69089: PUSH
69090: LD_INT 2
69092: EQUAL
69093: ST_TO_ADDR
69094: GO 69340
69096: LD_INT 30
69098: DOUBLE
69099: EQUAL
69100: IFTRUE 69104
69102: GO 69129
69104: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
69105: LD_ADDR_VAR 0 3
69109: PUSH
69110: LD_INT 20
69112: PPUSH
69113: LD_VAR 0 1
69117: PPUSH
69118: CALL_OW 321
69122: PUSH
69123: LD_INT 2
69125: EQUAL
69126: ST_TO_ADDR
69127: GO 69340
69129: LD_INT 28
69131: DOUBLE
69132: EQUAL
69133: IFTRUE 69143
69135: LD_INT 21
69137: DOUBLE
69138: EQUAL
69139: IFTRUE 69143
69141: GO 69168
69143: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
69144: LD_ADDR_VAR 0 3
69148: PUSH
69149: LD_INT 21
69151: PPUSH
69152: LD_VAR 0 1
69156: PPUSH
69157: CALL_OW 321
69161: PUSH
69162: LD_INT 2
69164: EQUAL
69165: ST_TO_ADDR
69166: GO 69340
69168: LD_INT 16
69170: DOUBLE
69171: EQUAL
69172: IFTRUE 69176
69174: GO 69201
69176: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
69177: LD_ADDR_VAR 0 3
69181: PUSH
69182: LD_INT 84
69184: PPUSH
69185: LD_VAR 0 1
69189: PPUSH
69190: CALL_OW 321
69194: PUSH
69195: LD_INT 2
69197: EQUAL
69198: ST_TO_ADDR
69199: GO 69340
69201: LD_INT 19
69203: DOUBLE
69204: EQUAL
69205: IFTRUE 69215
69207: LD_INT 23
69209: DOUBLE
69210: EQUAL
69211: IFTRUE 69215
69213: GO 69240
69215: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
69216: LD_ADDR_VAR 0 3
69220: PUSH
69221: LD_INT 83
69223: PPUSH
69224: LD_VAR 0 1
69228: PPUSH
69229: CALL_OW 321
69233: PUSH
69234: LD_INT 2
69236: EQUAL
69237: ST_TO_ADDR
69238: GO 69340
69240: LD_INT 17
69242: DOUBLE
69243: EQUAL
69244: IFTRUE 69248
69246: GO 69273
69248: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
69249: LD_ADDR_VAR 0 3
69253: PUSH
69254: LD_INT 39
69256: PPUSH
69257: LD_VAR 0 1
69261: PPUSH
69262: CALL_OW 321
69266: PUSH
69267: LD_INT 2
69269: EQUAL
69270: ST_TO_ADDR
69271: GO 69340
69273: LD_INT 18
69275: DOUBLE
69276: EQUAL
69277: IFTRUE 69281
69279: GO 69306
69281: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
69282: LD_ADDR_VAR 0 3
69286: PUSH
69287: LD_INT 40
69289: PPUSH
69290: LD_VAR 0 1
69294: PPUSH
69295: CALL_OW 321
69299: PUSH
69300: LD_INT 2
69302: EQUAL
69303: ST_TO_ADDR
69304: GO 69340
69306: LD_INT 27
69308: DOUBLE
69309: EQUAL
69310: IFTRUE 69314
69312: GO 69339
69314: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
69315: LD_ADDR_VAR 0 3
69319: PUSH
69320: LD_INT 35
69322: PPUSH
69323: LD_VAR 0 1
69327: PPUSH
69328: CALL_OW 321
69332: PUSH
69333: LD_INT 2
69335: EQUAL
69336: ST_TO_ADDR
69337: GO 69340
69339: POP
// end ;
69340: LD_VAR 0 3
69344: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
69345: LD_INT 0
69347: PPUSH
69348: PPUSH
69349: PPUSH
69350: PPUSH
69351: PPUSH
69352: PPUSH
69353: PPUSH
69354: PPUSH
69355: PPUSH
69356: PPUSH
69357: PPUSH
// result := false ;
69358: LD_ADDR_VAR 0 6
69362: PUSH
69363: LD_INT 0
69365: ST_TO_ADDR
// if btype = b_depot then
69366: LD_VAR 0 2
69370: PUSH
69371: LD_INT 0
69373: EQUAL
69374: IFFALSE 69386
// begin result := true ;
69376: LD_ADDR_VAR 0 6
69380: PUSH
69381: LD_INT 1
69383: ST_TO_ADDR
// exit ;
69384: GO 70240
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
69386: LD_VAR 0 1
69390: NOT
69391: IFTRUE 69416
69393: PUSH
69394: LD_VAR 0 1
69398: PPUSH
69399: CALL_OW 266
69403: PUSH
69404: LD_INT 0
69406: PUSH
69407: LD_INT 1
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: IN
69414: NOT
69415: OR
69416: IFTRUE 69425
69418: PUSH
69419: LD_VAR 0 2
69423: NOT
69424: OR
69425: IFTRUE 69461
69427: PUSH
69428: LD_VAR 0 5
69432: PUSH
69433: LD_INT 0
69435: PUSH
69436: LD_INT 1
69438: PUSH
69439: LD_INT 2
69441: PUSH
69442: LD_INT 3
69444: PUSH
69445: LD_INT 4
69447: PUSH
69448: LD_INT 5
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: IN
69459: NOT
69460: OR
69461: IFTRUE 69480
69463: PUSH
69464: LD_VAR 0 3
69468: PPUSH
69469: LD_VAR 0 4
69473: PPUSH
69474: CALL_OW 488
69478: NOT
69479: OR
69480: IFFALSE 69484
// exit ;
69482: GO 70240
// side := GetSide ( depot ) ;
69484: LD_ADDR_VAR 0 9
69488: PUSH
69489: LD_VAR 0 1
69493: PPUSH
69494: CALL_OW 255
69498: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
69499: LD_VAR 0 9
69503: PPUSH
69504: LD_VAR 0 2
69508: PPUSH
69509: CALL 68969 0 2
69513: NOT
69514: IFFALSE 69518
// exit ;
69516: GO 70240
// pom := GetBase ( depot ) ;
69518: LD_ADDR_VAR 0 10
69522: PUSH
69523: LD_VAR 0 1
69527: PPUSH
69528: CALL_OW 274
69532: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
69533: LD_ADDR_VAR 0 11
69537: PUSH
69538: LD_VAR 0 2
69542: PPUSH
69543: LD_VAR 0 1
69547: PPUSH
69548: CALL_OW 248
69552: PPUSH
69553: CALL_OW 450
69557: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
69558: LD_VAR 0 10
69562: PPUSH
69563: LD_INT 1
69565: PPUSH
69566: CALL_OW 275
69570: PUSH
69571: LD_VAR 0 11
69575: PUSH
69576: LD_INT 1
69578: ARRAY
69579: GREATEREQUAL
69580: IFFALSE 69606
69582: PUSH
69583: LD_VAR 0 10
69587: PPUSH
69588: LD_INT 2
69590: PPUSH
69591: CALL_OW 275
69595: PUSH
69596: LD_VAR 0 11
69600: PUSH
69601: LD_INT 2
69603: ARRAY
69604: GREATEREQUAL
69605: AND
69606: IFFALSE 69632
69608: PUSH
69609: LD_VAR 0 10
69613: PPUSH
69614: LD_INT 3
69616: PPUSH
69617: CALL_OW 275
69621: PUSH
69622: LD_VAR 0 11
69626: PUSH
69627: LD_INT 3
69629: ARRAY
69630: GREATEREQUAL
69631: AND
69632: NOT
69633: IFFALSE 69637
// exit ;
69635: GO 70240
// if GetBType ( depot ) = b_depot then
69637: LD_VAR 0 1
69641: PPUSH
69642: CALL_OW 266
69646: PUSH
69647: LD_INT 0
69649: EQUAL
69650: IFFALSE 69662
// dist := 28 else
69652: LD_ADDR_VAR 0 14
69656: PUSH
69657: LD_INT 28
69659: ST_TO_ADDR
69660: GO 69670
// dist := 36 ;
69662: LD_ADDR_VAR 0 14
69666: PUSH
69667: LD_INT 36
69669: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
69670: LD_VAR 0 1
69674: PPUSH
69675: LD_VAR 0 3
69679: PPUSH
69680: LD_VAR 0 4
69684: PPUSH
69685: CALL_OW 297
69689: PUSH
69690: LD_VAR 0 14
69694: GREATER
69695: IFFALSE 69699
// exit ;
69697: GO 70240
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
69699: LD_ADDR_VAR 0 12
69703: PUSH
69704: LD_VAR 0 2
69708: PPUSH
69709: LD_VAR 0 3
69713: PPUSH
69714: LD_VAR 0 4
69718: PPUSH
69719: LD_VAR 0 5
69723: PPUSH
69724: LD_VAR 0 1
69728: PPUSH
69729: CALL_OW 248
69733: PPUSH
69734: LD_INT 0
69736: PPUSH
69737: CALL 70245 0 6
69741: ST_TO_ADDR
// if not hexes then
69742: LD_VAR 0 12
69746: NOT
69747: IFFALSE 69751
// exit ;
69749: GO 70240
// hex := GetHexInfo ( x , y ) ;
69751: LD_ADDR_VAR 0 15
69755: PUSH
69756: LD_VAR 0 3
69760: PPUSH
69761: LD_VAR 0 4
69765: PPUSH
69766: CALL_OW 546
69770: ST_TO_ADDR
// if hex [ 1 ] then
69771: LD_VAR 0 15
69775: PUSH
69776: LD_INT 1
69778: ARRAY
69779: IFFALSE 69783
// exit ;
69781: GO 70240
// height := hex [ 2 ] ;
69783: LD_ADDR_VAR 0 13
69787: PUSH
69788: LD_VAR 0 15
69792: PUSH
69793: LD_INT 2
69795: ARRAY
69796: ST_TO_ADDR
// for i = 1 to hexes do
69797: LD_ADDR_VAR 0 7
69801: PUSH
69802: DOUBLE
69803: LD_INT 1
69805: DEC
69806: ST_TO_ADDR
69807: LD_VAR 0 12
69811: PUSH
69812: FOR_TO
69813: IFFALSE 70157
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
69815: LD_VAR 0 12
69819: PUSH
69820: LD_VAR 0 7
69824: ARRAY
69825: PUSH
69826: LD_INT 1
69828: ARRAY
69829: PPUSH
69830: LD_VAR 0 12
69834: PUSH
69835: LD_VAR 0 7
69839: ARRAY
69840: PUSH
69841: LD_INT 2
69843: ARRAY
69844: PPUSH
69845: CALL_OW 488
69849: NOT
69850: IFTRUE 69892
69852: PUSH
69853: LD_VAR 0 12
69857: PUSH
69858: LD_VAR 0 7
69862: ARRAY
69863: PUSH
69864: LD_INT 1
69866: ARRAY
69867: PPUSH
69868: LD_VAR 0 12
69872: PUSH
69873: LD_VAR 0 7
69877: ARRAY
69878: PUSH
69879: LD_INT 2
69881: ARRAY
69882: PPUSH
69883: CALL_OW 428
69887: PUSH
69888: LD_INT 0
69890: GREATER
69891: OR
69892: IFTRUE 69930
69894: PUSH
69895: LD_VAR 0 12
69899: PUSH
69900: LD_VAR 0 7
69904: ARRAY
69905: PUSH
69906: LD_INT 1
69908: ARRAY
69909: PPUSH
69910: LD_VAR 0 12
69914: PUSH
69915: LD_VAR 0 7
69919: ARRAY
69920: PUSH
69921: LD_INT 2
69923: ARRAY
69924: PPUSH
69925: CALL_OW 351
69929: OR
69930: IFFALSE 69936
// exit ;
69932: POP
69933: POP
69934: GO 70240
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69936: LD_ADDR_VAR 0 8
69940: PUSH
69941: LD_VAR 0 12
69945: PUSH
69946: LD_VAR 0 7
69950: ARRAY
69951: PUSH
69952: LD_INT 1
69954: ARRAY
69955: PPUSH
69956: LD_VAR 0 12
69960: PUSH
69961: LD_VAR 0 7
69965: ARRAY
69966: PUSH
69967: LD_INT 2
69969: ARRAY
69970: PPUSH
69971: CALL_OW 546
69975: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
69976: LD_VAR 0 8
69980: PUSH
69981: LD_INT 1
69983: ARRAY
69984: IFTRUE 70006
69986: PUSH
69987: LD_VAR 0 8
69991: PUSH
69992: LD_INT 2
69994: ARRAY
69995: PUSH
69996: LD_VAR 0 13
70000: PUSH
70001: LD_INT 2
70003: PLUS
70004: GREATER
70005: OR
70006: IFTRUE 70028
70008: PUSH
70009: LD_VAR 0 8
70013: PUSH
70014: LD_INT 2
70016: ARRAY
70017: PUSH
70018: LD_VAR 0 13
70022: PUSH
70023: LD_INT 2
70025: MINUS
70026: LESS
70027: OR
70028: IFTRUE 70096
70030: PUSH
70031: LD_VAR 0 8
70035: PUSH
70036: LD_INT 3
70038: ARRAY
70039: PUSH
70040: LD_INT 0
70042: PUSH
70043: LD_INT 8
70045: PUSH
70046: LD_INT 9
70048: PUSH
70049: LD_INT 10
70051: PUSH
70052: LD_INT 11
70054: PUSH
70055: LD_INT 12
70057: PUSH
70058: LD_INT 13
70060: PUSH
70061: LD_INT 16
70063: PUSH
70064: LD_INT 17
70066: PUSH
70067: LD_INT 18
70069: PUSH
70070: LD_INT 19
70072: PUSH
70073: LD_INT 20
70075: PUSH
70076: LD_INT 21
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: IN
70094: NOT
70095: OR
70096: IFTRUE 70109
70098: PUSH
70099: LD_VAR 0 8
70103: PUSH
70104: LD_INT 5
70106: ARRAY
70107: NOT
70108: OR
70109: IFTRUE 70149
70111: PUSH
70112: LD_VAR 0 8
70116: PUSH
70117: LD_INT 6
70119: ARRAY
70120: PUSH
70121: LD_INT 1
70123: PUSH
70124: LD_INT 2
70126: PUSH
70127: LD_INT 7
70129: PUSH
70130: LD_INT 9
70132: PUSH
70133: LD_INT 10
70135: PUSH
70136: LD_INT 11
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: IN
70147: NOT
70148: OR
70149: IFFALSE 70155
// exit ;
70151: POP
70152: POP
70153: GO 70240
// end ;
70155: GO 69812
70157: POP
70158: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
70159: LD_VAR 0 9
70163: PPUSH
70164: LD_VAR 0 3
70168: PPUSH
70169: LD_VAR 0 4
70173: PPUSH
70174: LD_INT 20
70176: PPUSH
70177: CALL 62059 0 4
70181: PUSH
70182: LD_INT 4
70184: ARRAY
70185: IFFALSE 70189
// exit ;
70187: GO 70240
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
70189: LD_VAR 0 2
70193: PUSH
70194: LD_INT 29
70196: PUSH
70197: LD_INT 30
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: IN
70204: IFFALSE 70228
70206: PUSH
70207: LD_VAR 0 3
70211: PPUSH
70212: LD_VAR 0 4
70216: PPUSH
70217: LD_VAR 0 9
70221: PPUSH
70222: CALL_OW 440
70226: NOT
70227: AND
70228: IFFALSE 70232
// exit ;
70230: GO 70240
// result := true ;
70232: LD_ADDR_VAR 0 6
70236: PUSH
70237: LD_INT 1
70239: ST_TO_ADDR
// end ;
70240: LD_VAR 0 6
70244: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
70245: LD_INT 0
70247: PPUSH
70248: PPUSH
70249: PPUSH
70250: PPUSH
70251: PPUSH
70252: PPUSH
70253: PPUSH
70254: PPUSH
70255: PPUSH
70256: PPUSH
70257: PPUSH
70258: PPUSH
70259: PPUSH
70260: PPUSH
70261: PPUSH
70262: PPUSH
70263: PPUSH
70264: PPUSH
70265: PPUSH
70266: PPUSH
70267: PPUSH
70268: PPUSH
70269: PPUSH
70270: PPUSH
70271: PPUSH
70272: PPUSH
70273: PPUSH
70274: PPUSH
70275: PPUSH
70276: PPUSH
70277: PPUSH
70278: PPUSH
70279: PPUSH
70280: PPUSH
70281: PPUSH
70282: PPUSH
70283: PPUSH
70284: PPUSH
70285: PPUSH
70286: PPUSH
70287: PPUSH
70288: PPUSH
70289: PPUSH
70290: PPUSH
70291: PPUSH
70292: PPUSH
70293: PPUSH
70294: PPUSH
70295: PPUSH
70296: PPUSH
70297: PPUSH
70298: PPUSH
70299: PPUSH
70300: PPUSH
70301: PPUSH
70302: PPUSH
70303: PPUSH
70304: PPUSH
// result = [ ] ;
70305: LD_ADDR_VAR 0 7
70309: PUSH
70310: EMPTY
70311: ST_TO_ADDR
// temp_list = [ ] ;
70312: LD_ADDR_VAR 0 9
70316: PUSH
70317: EMPTY
70318: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
70319: LD_VAR 0 4
70323: PUSH
70324: LD_INT 0
70326: PUSH
70327: LD_INT 1
70329: PUSH
70330: LD_INT 2
70332: PUSH
70333: LD_INT 3
70335: PUSH
70336: LD_INT 4
70338: PUSH
70339: LD_INT 5
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: IN
70350: NOT
70351: IFTRUE 70394
70353: PUSH
70354: LD_VAR 0 1
70358: PUSH
70359: LD_INT 0
70361: PUSH
70362: LD_INT 1
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: IN
70369: IFFALSE 70393
70371: PUSH
70372: LD_VAR 0 5
70376: PUSH
70377: LD_INT 1
70379: PUSH
70380: LD_INT 2
70382: PUSH
70383: LD_INT 3
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: LIST
70390: IN
70391: NOT
70392: AND
70393: OR
70394: IFFALSE 70398
// exit ;
70396: GO 88797
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
70398: LD_VAR 0 1
70402: PUSH
70403: LD_INT 6
70405: PUSH
70406: LD_INT 7
70408: PUSH
70409: LD_INT 8
70411: PUSH
70412: LD_INT 13
70414: PUSH
70415: LD_INT 12
70417: PUSH
70418: LD_INT 15
70420: PUSH
70421: LD_INT 11
70423: PUSH
70424: LD_INT 14
70426: PUSH
70427: LD_INT 10
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: IN
70441: IFFALSE 70451
// btype = b_lab ;
70443: LD_ADDR_VAR 0 1
70447: PUSH
70448: LD_INT 6
70450: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
70451: LD_VAR 0 6
70455: PUSH
70456: LD_INT 0
70458: PUSH
70459: LD_INT 1
70461: PUSH
70462: LD_INT 2
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: LIST
70469: IN
70470: NOT
70471: IFTRUE 70539
70473: PUSH
70474: LD_VAR 0 1
70478: PUSH
70479: LD_INT 0
70481: PUSH
70482: LD_INT 1
70484: PUSH
70485: LD_INT 2
70487: PUSH
70488: LD_INT 3
70490: PUSH
70491: LD_INT 6
70493: PUSH
70494: LD_INT 36
70496: PUSH
70497: LD_INT 4
70499: PUSH
70500: LD_INT 5
70502: PUSH
70503: LD_INT 31
70505: PUSH
70506: LD_INT 32
70508: PUSH
70509: LD_INT 33
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: IN
70525: NOT
70526: IFFALSE 70538
70528: PUSH
70529: LD_VAR 0 6
70533: PUSH
70534: LD_INT 1
70536: EQUAL
70537: AND
70538: OR
70539: IFTRUE 70571
70541: PUSH
70542: LD_VAR 0 1
70546: PUSH
70547: LD_INT 2
70549: PUSH
70550: LD_INT 3
70552: PUSH
70553: EMPTY
70554: LIST
70555: LIST
70556: IN
70557: NOT
70558: IFFALSE 70570
70560: PUSH
70561: LD_VAR 0 6
70565: PUSH
70566: LD_INT 2
70568: EQUAL
70569: AND
70570: OR
70571: IFFALSE 70581
// mode = 0 ;
70573: LD_ADDR_VAR 0 6
70577: PUSH
70578: LD_INT 0
70580: ST_TO_ADDR
// case mode of 0 :
70581: LD_VAR 0 6
70585: PUSH
70586: LD_INT 0
70588: DOUBLE
70589: EQUAL
70590: IFTRUE 70594
70592: GO 82047
70594: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70595: LD_ADDR_VAR 0 11
70599: PUSH
70600: LD_INT 0
70602: PUSH
70603: LD_INT 0
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 0
70612: PUSH
70613: LD_INT 1
70615: NEG
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: LD_INT 1
70623: PUSH
70624: LD_INT 0
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 1
70633: PUSH
70634: LD_INT 1
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 0
70643: PUSH
70644: LD_INT 1
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 1
70653: NEG
70654: PUSH
70655: LD_INT 0
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: LD_INT 1
70664: NEG
70665: PUSH
70666: LD_INT 1
70668: NEG
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: PUSH
70674: LD_INT 1
70676: NEG
70677: PUSH
70678: LD_INT 2
70680: NEG
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: PUSH
70686: LD_INT 0
70688: PUSH
70689: LD_INT 2
70691: NEG
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: PUSH
70697: LD_INT 1
70699: PUSH
70700: LD_INT 1
70702: NEG
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: PUSH
70708: LD_INT 1
70710: PUSH
70711: LD_INT 2
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: LD_INT 0
70720: PUSH
70721: LD_INT 2
70723: PUSH
70724: EMPTY
70725: LIST
70726: LIST
70727: PUSH
70728: LD_INT 1
70730: NEG
70731: PUSH
70732: LD_INT 1
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: PUSH
70739: LD_INT 1
70741: PUSH
70742: LD_INT 3
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: LD_INT 0
70751: PUSH
70752: LD_INT 3
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: PUSH
70759: LD_INT 1
70761: NEG
70762: PUSH
70763: LD_INT 2
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: LIST
70774: LIST
70775: LIST
70776: LIST
70777: LIST
70778: LIST
70779: LIST
70780: LIST
70781: LIST
70782: LIST
70783: LIST
70784: LIST
70785: LIST
70786: LIST
70787: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70788: LD_ADDR_VAR 0 12
70792: PUSH
70793: LD_INT 0
70795: PUSH
70796: LD_INT 0
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: PUSH
70803: LD_INT 0
70805: PUSH
70806: LD_INT 1
70808: NEG
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: PUSH
70814: LD_INT 1
70816: PUSH
70817: LD_INT 0
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: PUSH
70824: LD_INT 1
70826: PUSH
70827: LD_INT 1
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: PUSH
70834: LD_INT 0
70836: PUSH
70837: LD_INT 1
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: LD_INT 1
70846: NEG
70847: PUSH
70848: LD_INT 0
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: PUSH
70855: LD_INT 1
70857: NEG
70858: PUSH
70859: LD_INT 1
70861: NEG
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 1
70869: PUSH
70870: LD_INT 1
70872: NEG
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: PUSH
70878: LD_INT 2
70880: PUSH
70881: LD_INT 0
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: PUSH
70888: LD_INT 2
70890: PUSH
70891: LD_INT 1
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: PUSH
70898: LD_INT 1
70900: NEG
70901: PUSH
70902: LD_INT 1
70904: PUSH
70905: EMPTY
70906: LIST
70907: LIST
70908: PUSH
70909: LD_INT 2
70911: NEG
70912: PUSH
70913: LD_INT 0
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 2
70922: NEG
70923: PUSH
70924: LD_INT 1
70926: NEG
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 2
70934: NEG
70935: PUSH
70936: LD_INT 1
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 3
70945: NEG
70946: PUSH
70947: LD_INT 0
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: LD_INT 3
70956: NEG
70957: PUSH
70958: LD_INT 1
70960: NEG
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: EMPTY
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: LIST
70975: LIST
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: LIST
70982: LIST
70983: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70984: LD_ADDR_VAR 0 13
70988: PUSH
70989: LD_INT 0
70991: PUSH
70992: LD_INT 0
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_INT 0
71001: PUSH
71002: LD_INT 1
71004: NEG
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 1
71012: PUSH
71013: LD_INT 0
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: PUSH
71020: LD_INT 1
71022: PUSH
71023: LD_INT 1
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: PUSH
71030: LD_INT 0
71032: PUSH
71033: LD_INT 1
71035: PUSH
71036: EMPTY
71037: LIST
71038: LIST
71039: PUSH
71040: LD_INT 1
71042: NEG
71043: PUSH
71044: LD_INT 0
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: PUSH
71051: LD_INT 1
71053: NEG
71054: PUSH
71055: LD_INT 1
71057: NEG
71058: PUSH
71059: EMPTY
71060: LIST
71061: LIST
71062: PUSH
71063: LD_INT 1
71065: NEG
71066: PUSH
71067: LD_INT 2
71069: NEG
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: PUSH
71075: LD_INT 2
71077: PUSH
71078: LD_INT 1
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: PUSH
71085: LD_INT 2
71087: PUSH
71088: LD_INT 2
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: LD_INT 1
71097: PUSH
71098: LD_INT 2
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: PUSH
71105: LD_INT 2
71107: NEG
71108: PUSH
71109: LD_INT 1
71111: NEG
71112: PUSH
71113: EMPTY
71114: LIST
71115: LIST
71116: PUSH
71117: LD_INT 2
71119: NEG
71120: PUSH
71121: LD_INT 2
71123: NEG
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: PUSH
71129: LD_INT 2
71131: NEG
71132: PUSH
71133: LD_INT 3
71135: NEG
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: PUSH
71141: LD_INT 3
71143: NEG
71144: PUSH
71145: LD_INT 2
71147: NEG
71148: PUSH
71149: EMPTY
71150: LIST
71151: LIST
71152: PUSH
71153: LD_INT 3
71155: NEG
71156: PUSH
71157: LD_INT 3
71159: NEG
71160: PUSH
71161: EMPTY
71162: LIST
71163: LIST
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: LIST
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71183: LD_ADDR_VAR 0 14
71187: PUSH
71188: LD_INT 0
71190: PUSH
71191: LD_INT 0
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_INT 0
71200: PUSH
71201: LD_INT 1
71203: NEG
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: PUSH
71209: LD_INT 1
71211: PUSH
71212: LD_INT 0
71214: PUSH
71215: EMPTY
71216: LIST
71217: LIST
71218: PUSH
71219: LD_INT 1
71221: PUSH
71222: LD_INT 1
71224: PUSH
71225: EMPTY
71226: LIST
71227: LIST
71228: PUSH
71229: LD_INT 0
71231: PUSH
71232: LD_INT 1
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: PUSH
71239: LD_INT 1
71241: NEG
71242: PUSH
71243: LD_INT 0
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: PUSH
71250: LD_INT 1
71252: NEG
71253: PUSH
71254: LD_INT 1
71256: NEG
71257: PUSH
71258: EMPTY
71259: LIST
71260: LIST
71261: PUSH
71262: LD_INT 1
71264: NEG
71265: PUSH
71266: LD_INT 2
71268: NEG
71269: PUSH
71270: EMPTY
71271: LIST
71272: LIST
71273: PUSH
71274: LD_INT 0
71276: PUSH
71277: LD_INT 2
71279: NEG
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: PUSH
71285: LD_INT 1
71287: PUSH
71288: LD_INT 1
71290: NEG
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: PUSH
71296: LD_INT 1
71298: PUSH
71299: LD_INT 2
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PUSH
71306: LD_INT 0
71308: PUSH
71309: LD_INT 2
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: PUSH
71316: LD_INT 1
71318: NEG
71319: PUSH
71320: LD_INT 1
71322: PUSH
71323: EMPTY
71324: LIST
71325: LIST
71326: PUSH
71327: LD_INT 1
71329: NEG
71330: PUSH
71331: LD_INT 3
71333: NEG
71334: PUSH
71335: EMPTY
71336: LIST
71337: LIST
71338: PUSH
71339: LD_INT 0
71341: PUSH
71342: LD_INT 3
71344: NEG
71345: PUSH
71346: EMPTY
71347: LIST
71348: LIST
71349: PUSH
71350: LD_INT 1
71352: PUSH
71353: LD_INT 2
71355: NEG
71356: PUSH
71357: EMPTY
71358: LIST
71359: LIST
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: LIST
71365: LIST
71366: LIST
71367: LIST
71368: LIST
71369: LIST
71370: LIST
71371: LIST
71372: LIST
71373: LIST
71374: LIST
71375: LIST
71376: LIST
71377: LIST
71378: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71379: LD_ADDR_VAR 0 15
71383: PUSH
71384: LD_INT 0
71386: PUSH
71387: LD_INT 0
71389: PUSH
71390: EMPTY
71391: LIST
71392: LIST
71393: PUSH
71394: LD_INT 0
71396: PUSH
71397: LD_INT 1
71399: NEG
71400: PUSH
71401: EMPTY
71402: LIST
71403: LIST
71404: PUSH
71405: LD_INT 1
71407: PUSH
71408: LD_INT 0
71410: PUSH
71411: EMPTY
71412: LIST
71413: LIST
71414: PUSH
71415: LD_INT 1
71417: PUSH
71418: LD_INT 1
71420: PUSH
71421: EMPTY
71422: LIST
71423: LIST
71424: PUSH
71425: LD_INT 0
71427: PUSH
71428: LD_INT 1
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: PUSH
71435: LD_INT 1
71437: NEG
71438: PUSH
71439: LD_INT 0
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: PUSH
71446: LD_INT 1
71448: NEG
71449: PUSH
71450: LD_INT 1
71452: NEG
71453: PUSH
71454: EMPTY
71455: LIST
71456: LIST
71457: PUSH
71458: LD_INT 1
71460: PUSH
71461: LD_INT 1
71463: NEG
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: PUSH
71469: LD_INT 2
71471: PUSH
71472: LD_INT 0
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: PUSH
71479: LD_INT 2
71481: PUSH
71482: LD_INT 1
71484: PUSH
71485: EMPTY
71486: LIST
71487: LIST
71488: PUSH
71489: LD_INT 1
71491: NEG
71492: PUSH
71493: LD_INT 1
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: PUSH
71500: LD_INT 2
71502: NEG
71503: PUSH
71504: LD_INT 0
71506: PUSH
71507: EMPTY
71508: LIST
71509: LIST
71510: PUSH
71511: LD_INT 2
71513: NEG
71514: PUSH
71515: LD_INT 1
71517: NEG
71518: PUSH
71519: EMPTY
71520: LIST
71521: LIST
71522: PUSH
71523: LD_INT 2
71525: PUSH
71526: LD_INT 1
71528: NEG
71529: PUSH
71530: EMPTY
71531: LIST
71532: LIST
71533: PUSH
71534: LD_INT 3
71536: PUSH
71537: LD_INT 0
71539: PUSH
71540: EMPTY
71541: LIST
71542: LIST
71543: PUSH
71544: LD_INT 3
71546: PUSH
71547: LD_INT 1
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: PUSH
71554: EMPTY
71555: LIST
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: LIST
71562: LIST
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71572: LD_ADDR_VAR 0 16
71576: PUSH
71577: LD_INT 0
71579: PUSH
71580: LD_INT 0
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: PUSH
71587: LD_INT 0
71589: PUSH
71590: LD_INT 1
71592: NEG
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: PUSH
71598: LD_INT 1
71600: PUSH
71601: LD_INT 0
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: PUSH
71608: LD_INT 1
71610: PUSH
71611: LD_INT 1
71613: PUSH
71614: EMPTY
71615: LIST
71616: LIST
71617: PUSH
71618: LD_INT 0
71620: PUSH
71621: LD_INT 1
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: PUSH
71628: LD_INT 1
71630: NEG
71631: PUSH
71632: LD_INT 0
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: LD_INT 1
71641: NEG
71642: PUSH
71643: LD_INT 1
71645: NEG
71646: PUSH
71647: EMPTY
71648: LIST
71649: LIST
71650: PUSH
71651: LD_INT 1
71653: NEG
71654: PUSH
71655: LD_INT 2
71657: NEG
71658: PUSH
71659: EMPTY
71660: LIST
71661: LIST
71662: PUSH
71663: LD_INT 2
71665: PUSH
71666: LD_INT 1
71668: PUSH
71669: EMPTY
71670: LIST
71671: LIST
71672: PUSH
71673: LD_INT 2
71675: PUSH
71676: LD_INT 2
71678: PUSH
71679: EMPTY
71680: LIST
71681: LIST
71682: PUSH
71683: LD_INT 1
71685: PUSH
71686: LD_INT 2
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: PUSH
71693: LD_INT 2
71695: NEG
71696: PUSH
71697: LD_INT 1
71699: NEG
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: PUSH
71705: LD_INT 2
71707: NEG
71708: PUSH
71709: LD_INT 2
71711: NEG
71712: PUSH
71713: EMPTY
71714: LIST
71715: LIST
71716: PUSH
71717: LD_INT 3
71719: PUSH
71720: LD_INT 2
71722: PUSH
71723: EMPTY
71724: LIST
71725: LIST
71726: PUSH
71727: LD_INT 3
71729: PUSH
71730: LD_INT 3
71732: PUSH
71733: EMPTY
71734: LIST
71735: LIST
71736: PUSH
71737: LD_INT 2
71739: PUSH
71740: LD_INT 3
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PUSH
71747: EMPTY
71748: LIST
71749: LIST
71750: LIST
71751: LIST
71752: LIST
71753: LIST
71754: LIST
71755: LIST
71756: LIST
71757: LIST
71758: LIST
71759: LIST
71760: LIST
71761: LIST
71762: LIST
71763: LIST
71764: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71765: LD_ADDR_VAR 0 17
71769: PUSH
71770: LD_INT 0
71772: PUSH
71773: LD_INT 0
71775: PUSH
71776: EMPTY
71777: LIST
71778: LIST
71779: PUSH
71780: LD_INT 0
71782: PUSH
71783: LD_INT 1
71785: NEG
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: PUSH
71791: LD_INT 1
71793: PUSH
71794: LD_INT 0
71796: PUSH
71797: EMPTY
71798: LIST
71799: LIST
71800: PUSH
71801: LD_INT 1
71803: PUSH
71804: LD_INT 1
71806: PUSH
71807: EMPTY
71808: LIST
71809: LIST
71810: PUSH
71811: LD_INT 0
71813: PUSH
71814: LD_INT 1
71816: PUSH
71817: EMPTY
71818: LIST
71819: LIST
71820: PUSH
71821: LD_INT 1
71823: NEG
71824: PUSH
71825: LD_INT 0
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: PUSH
71832: LD_INT 1
71834: NEG
71835: PUSH
71836: LD_INT 1
71838: NEG
71839: PUSH
71840: EMPTY
71841: LIST
71842: LIST
71843: PUSH
71844: LD_INT 1
71846: NEG
71847: PUSH
71848: LD_INT 2
71850: NEG
71851: PUSH
71852: EMPTY
71853: LIST
71854: LIST
71855: PUSH
71856: LD_INT 0
71858: PUSH
71859: LD_INT 2
71861: NEG
71862: PUSH
71863: EMPTY
71864: LIST
71865: LIST
71866: PUSH
71867: LD_INT 1
71869: PUSH
71870: LD_INT 1
71872: NEG
71873: PUSH
71874: EMPTY
71875: LIST
71876: LIST
71877: PUSH
71878: LD_INT 2
71880: PUSH
71881: LD_INT 0
71883: PUSH
71884: EMPTY
71885: LIST
71886: LIST
71887: PUSH
71888: LD_INT 2
71890: PUSH
71891: LD_INT 1
71893: PUSH
71894: EMPTY
71895: LIST
71896: LIST
71897: PUSH
71898: LD_INT 2
71900: PUSH
71901: LD_INT 2
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: PUSH
71908: LD_INT 1
71910: PUSH
71911: LD_INT 2
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: PUSH
71918: LD_INT 0
71920: PUSH
71921: LD_INT 2
71923: PUSH
71924: EMPTY
71925: LIST
71926: LIST
71927: PUSH
71928: LD_INT 1
71930: NEG
71931: PUSH
71932: LD_INT 1
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: PUSH
71939: LD_INT 2
71941: NEG
71942: PUSH
71943: LD_INT 0
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: PUSH
71950: LD_INT 2
71952: NEG
71953: PUSH
71954: LD_INT 1
71956: NEG
71957: PUSH
71958: EMPTY
71959: LIST
71960: LIST
71961: PUSH
71962: LD_INT 2
71964: NEG
71965: PUSH
71966: LD_INT 2
71968: NEG
71969: PUSH
71970: EMPTY
71971: LIST
71972: LIST
71973: PUSH
71974: EMPTY
71975: LIST
71976: LIST
71977: LIST
71978: LIST
71979: LIST
71980: LIST
71981: LIST
71982: LIST
71983: LIST
71984: LIST
71985: LIST
71986: LIST
71987: LIST
71988: LIST
71989: LIST
71990: LIST
71991: LIST
71992: LIST
71993: LIST
71994: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71995: LD_ADDR_VAR 0 18
71999: PUSH
72000: LD_INT 0
72002: PUSH
72003: LD_INT 0
72005: PUSH
72006: EMPTY
72007: LIST
72008: LIST
72009: PUSH
72010: LD_INT 0
72012: PUSH
72013: LD_INT 1
72015: NEG
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PUSH
72021: LD_INT 1
72023: PUSH
72024: LD_INT 0
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: PUSH
72031: LD_INT 1
72033: PUSH
72034: LD_INT 1
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: PUSH
72041: LD_INT 0
72043: PUSH
72044: LD_INT 1
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: PUSH
72051: LD_INT 1
72053: NEG
72054: PUSH
72055: LD_INT 0
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: PUSH
72062: LD_INT 1
72064: NEG
72065: PUSH
72066: LD_INT 1
72068: NEG
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: PUSH
72074: LD_INT 1
72076: NEG
72077: PUSH
72078: LD_INT 2
72080: NEG
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: PUSH
72086: LD_INT 0
72088: PUSH
72089: LD_INT 2
72091: NEG
72092: PUSH
72093: EMPTY
72094: LIST
72095: LIST
72096: PUSH
72097: LD_INT 1
72099: PUSH
72100: LD_INT 1
72102: NEG
72103: PUSH
72104: EMPTY
72105: LIST
72106: LIST
72107: PUSH
72108: LD_INT 2
72110: PUSH
72111: LD_INT 0
72113: PUSH
72114: EMPTY
72115: LIST
72116: LIST
72117: PUSH
72118: LD_INT 2
72120: PUSH
72121: LD_INT 1
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: PUSH
72128: LD_INT 2
72130: PUSH
72131: LD_INT 2
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: PUSH
72138: LD_INT 1
72140: PUSH
72141: LD_INT 2
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: PUSH
72148: LD_INT 0
72150: PUSH
72151: LD_INT 2
72153: PUSH
72154: EMPTY
72155: LIST
72156: LIST
72157: PUSH
72158: LD_INT 1
72160: NEG
72161: PUSH
72162: LD_INT 1
72164: PUSH
72165: EMPTY
72166: LIST
72167: LIST
72168: PUSH
72169: LD_INT 2
72171: NEG
72172: PUSH
72173: LD_INT 0
72175: PUSH
72176: EMPTY
72177: LIST
72178: LIST
72179: PUSH
72180: LD_INT 2
72182: NEG
72183: PUSH
72184: LD_INT 1
72186: NEG
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: PUSH
72192: LD_INT 2
72194: NEG
72195: PUSH
72196: LD_INT 2
72198: NEG
72199: PUSH
72200: EMPTY
72201: LIST
72202: LIST
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: LIST
72208: LIST
72209: LIST
72210: LIST
72211: LIST
72212: LIST
72213: LIST
72214: LIST
72215: LIST
72216: LIST
72217: LIST
72218: LIST
72219: LIST
72220: LIST
72221: LIST
72222: LIST
72223: LIST
72224: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72225: LD_ADDR_VAR 0 19
72229: PUSH
72230: LD_INT 0
72232: PUSH
72233: LD_INT 0
72235: PUSH
72236: EMPTY
72237: LIST
72238: LIST
72239: PUSH
72240: LD_INT 0
72242: PUSH
72243: LD_INT 1
72245: NEG
72246: PUSH
72247: EMPTY
72248: LIST
72249: LIST
72250: PUSH
72251: LD_INT 1
72253: PUSH
72254: LD_INT 0
72256: PUSH
72257: EMPTY
72258: LIST
72259: LIST
72260: PUSH
72261: LD_INT 1
72263: PUSH
72264: LD_INT 1
72266: PUSH
72267: EMPTY
72268: LIST
72269: LIST
72270: PUSH
72271: LD_INT 0
72273: PUSH
72274: LD_INT 1
72276: PUSH
72277: EMPTY
72278: LIST
72279: LIST
72280: PUSH
72281: LD_INT 1
72283: NEG
72284: PUSH
72285: LD_INT 0
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: PUSH
72292: LD_INT 1
72294: NEG
72295: PUSH
72296: LD_INT 1
72298: NEG
72299: PUSH
72300: EMPTY
72301: LIST
72302: LIST
72303: PUSH
72304: LD_INT 1
72306: NEG
72307: PUSH
72308: LD_INT 2
72310: NEG
72311: PUSH
72312: EMPTY
72313: LIST
72314: LIST
72315: PUSH
72316: LD_INT 0
72318: PUSH
72319: LD_INT 2
72321: NEG
72322: PUSH
72323: EMPTY
72324: LIST
72325: LIST
72326: PUSH
72327: LD_INT 1
72329: PUSH
72330: LD_INT 1
72332: NEG
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: PUSH
72338: LD_INT 2
72340: PUSH
72341: LD_INT 0
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: PUSH
72348: LD_INT 2
72350: PUSH
72351: LD_INT 1
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: PUSH
72358: LD_INT 2
72360: PUSH
72361: LD_INT 2
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 1
72370: PUSH
72371: LD_INT 2
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: PUSH
72378: LD_INT 0
72380: PUSH
72381: LD_INT 2
72383: PUSH
72384: EMPTY
72385: LIST
72386: LIST
72387: PUSH
72388: LD_INT 1
72390: NEG
72391: PUSH
72392: LD_INT 1
72394: PUSH
72395: EMPTY
72396: LIST
72397: LIST
72398: PUSH
72399: LD_INT 2
72401: NEG
72402: PUSH
72403: LD_INT 0
72405: PUSH
72406: EMPTY
72407: LIST
72408: LIST
72409: PUSH
72410: LD_INT 2
72412: NEG
72413: PUSH
72414: LD_INT 1
72416: NEG
72417: PUSH
72418: EMPTY
72419: LIST
72420: LIST
72421: PUSH
72422: LD_INT 2
72424: NEG
72425: PUSH
72426: LD_INT 2
72428: NEG
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: PUSH
72434: EMPTY
72435: LIST
72436: LIST
72437: LIST
72438: LIST
72439: LIST
72440: LIST
72441: LIST
72442: LIST
72443: LIST
72444: LIST
72445: LIST
72446: LIST
72447: LIST
72448: LIST
72449: LIST
72450: LIST
72451: LIST
72452: LIST
72453: LIST
72454: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72455: LD_ADDR_VAR 0 20
72459: PUSH
72460: LD_INT 0
72462: PUSH
72463: LD_INT 0
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: PUSH
72470: LD_INT 0
72472: PUSH
72473: LD_INT 1
72475: NEG
72476: PUSH
72477: EMPTY
72478: LIST
72479: LIST
72480: PUSH
72481: LD_INT 1
72483: PUSH
72484: LD_INT 0
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: PUSH
72491: LD_INT 1
72493: PUSH
72494: LD_INT 1
72496: PUSH
72497: EMPTY
72498: LIST
72499: LIST
72500: PUSH
72501: LD_INT 0
72503: PUSH
72504: LD_INT 1
72506: PUSH
72507: EMPTY
72508: LIST
72509: LIST
72510: PUSH
72511: LD_INT 1
72513: NEG
72514: PUSH
72515: LD_INT 0
72517: PUSH
72518: EMPTY
72519: LIST
72520: LIST
72521: PUSH
72522: LD_INT 1
72524: NEG
72525: PUSH
72526: LD_INT 1
72528: NEG
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: PUSH
72534: LD_INT 1
72536: NEG
72537: PUSH
72538: LD_INT 2
72540: NEG
72541: PUSH
72542: EMPTY
72543: LIST
72544: LIST
72545: PUSH
72546: LD_INT 0
72548: PUSH
72549: LD_INT 2
72551: NEG
72552: PUSH
72553: EMPTY
72554: LIST
72555: LIST
72556: PUSH
72557: LD_INT 1
72559: PUSH
72560: LD_INT 1
72562: NEG
72563: PUSH
72564: EMPTY
72565: LIST
72566: LIST
72567: PUSH
72568: LD_INT 2
72570: PUSH
72571: LD_INT 0
72573: PUSH
72574: EMPTY
72575: LIST
72576: LIST
72577: PUSH
72578: LD_INT 2
72580: PUSH
72581: LD_INT 1
72583: PUSH
72584: EMPTY
72585: LIST
72586: LIST
72587: PUSH
72588: LD_INT 2
72590: PUSH
72591: LD_INT 2
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: PUSH
72598: LD_INT 1
72600: PUSH
72601: LD_INT 2
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: PUSH
72608: LD_INT 0
72610: PUSH
72611: LD_INT 2
72613: PUSH
72614: EMPTY
72615: LIST
72616: LIST
72617: PUSH
72618: LD_INT 1
72620: NEG
72621: PUSH
72622: LD_INT 1
72624: PUSH
72625: EMPTY
72626: LIST
72627: LIST
72628: PUSH
72629: LD_INT 2
72631: NEG
72632: PUSH
72633: LD_INT 0
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: PUSH
72640: LD_INT 2
72642: NEG
72643: PUSH
72644: LD_INT 1
72646: NEG
72647: PUSH
72648: EMPTY
72649: LIST
72650: LIST
72651: PUSH
72652: LD_INT 2
72654: NEG
72655: PUSH
72656: LD_INT 2
72658: NEG
72659: PUSH
72660: EMPTY
72661: LIST
72662: LIST
72663: PUSH
72664: EMPTY
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: LIST
72684: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72685: LD_ADDR_VAR 0 21
72689: PUSH
72690: LD_INT 0
72692: PUSH
72693: LD_INT 0
72695: PUSH
72696: EMPTY
72697: LIST
72698: LIST
72699: PUSH
72700: LD_INT 0
72702: PUSH
72703: LD_INT 1
72705: NEG
72706: PUSH
72707: EMPTY
72708: LIST
72709: LIST
72710: PUSH
72711: LD_INT 1
72713: PUSH
72714: LD_INT 0
72716: PUSH
72717: EMPTY
72718: LIST
72719: LIST
72720: PUSH
72721: LD_INT 1
72723: PUSH
72724: LD_INT 1
72726: PUSH
72727: EMPTY
72728: LIST
72729: LIST
72730: PUSH
72731: LD_INT 0
72733: PUSH
72734: LD_INT 1
72736: PUSH
72737: EMPTY
72738: LIST
72739: LIST
72740: PUSH
72741: LD_INT 1
72743: NEG
72744: PUSH
72745: LD_INT 0
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: PUSH
72752: LD_INT 1
72754: NEG
72755: PUSH
72756: LD_INT 1
72758: NEG
72759: PUSH
72760: EMPTY
72761: LIST
72762: LIST
72763: PUSH
72764: LD_INT 1
72766: NEG
72767: PUSH
72768: LD_INT 2
72770: NEG
72771: PUSH
72772: EMPTY
72773: LIST
72774: LIST
72775: PUSH
72776: LD_INT 0
72778: PUSH
72779: LD_INT 2
72781: NEG
72782: PUSH
72783: EMPTY
72784: LIST
72785: LIST
72786: PUSH
72787: LD_INT 1
72789: PUSH
72790: LD_INT 1
72792: NEG
72793: PUSH
72794: EMPTY
72795: LIST
72796: LIST
72797: PUSH
72798: LD_INT 2
72800: PUSH
72801: LD_INT 0
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: PUSH
72808: LD_INT 2
72810: PUSH
72811: LD_INT 1
72813: PUSH
72814: EMPTY
72815: LIST
72816: LIST
72817: PUSH
72818: LD_INT 2
72820: PUSH
72821: LD_INT 2
72823: PUSH
72824: EMPTY
72825: LIST
72826: LIST
72827: PUSH
72828: LD_INT 1
72830: PUSH
72831: LD_INT 2
72833: PUSH
72834: EMPTY
72835: LIST
72836: LIST
72837: PUSH
72838: LD_INT 0
72840: PUSH
72841: LD_INT 2
72843: PUSH
72844: EMPTY
72845: LIST
72846: LIST
72847: PUSH
72848: LD_INT 1
72850: NEG
72851: PUSH
72852: LD_INT 1
72854: PUSH
72855: EMPTY
72856: LIST
72857: LIST
72858: PUSH
72859: LD_INT 2
72861: NEG
72862: PUSH
72863: LD_INT 0
72865: PUSH
72866: EMPTY
72867: LIST
72868: LIST
72869: PUSH
72870: LD_INT 2
72872: NEG
72873: PUSH
72874: LD_INT 1
72876: NEG
72877: PUSH
72878: EMPTY
72879: LIST
72880: LIST
72881: PUSH
72882: LD_INT 2
72884: NEG
72885: PUSH
72886: LD_INT 2
72888: NEG
72889: PUSH
72890: EMPTY
72891: LIST
72892: LIST
72893: PUSH
72894: EMPTY
72895: LIST
72896: LIST
72897: LIST
72898: LIST
72899: LIST
72900: LIST
72901: LIST
72902: LIST
72903: LIST
72904: LIST
72905: LIST
72906: LIST
72907: LIST
72908: LIST
72909: LIST
72910: LIST
72911: LIST
72912: LIST
72913: LIST
72914: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72915: LD_ADDR_VAR 0 22
72919: PUSH
72920: LD_INT 0
72922: PUSH
72923: LD_INT 0
72925: PUSH
72926: EMPTY
72927: LIST
72928: LIST
72929: PUSH
72930: LD_INT 0
72932: PUSH
72933: LD_INT 1
72935: NEG
72936: PUSH
72937: EMPTY
72938: LIST
72939: LIST
72940: PUSH
72941: LD_INT 1
72943: PUSH
72944: LD_INT 0
72946: PUSH
72947: EMPTY
72948: LIST
72949: LIST
72950: PUSH
72951: LD_INT 1
72953: PUSH
72954: LD_INT 1
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: LD_INT 0
72963: PUSH
72964: LD_INT 1
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: PUSH
72971: LD_INT 1
72973: NEG
72974: PUSH
72975: LD_INT 0
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: PUSH
72982: LD_INT 1
72984: NEG
72985: PUSH
72986: LD_INT 1
72988: NEG
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: PUSH
72994: LD_INT 1
72996: NEG
72997: PUSH
72998: LD_INT 2
73000: NEG
73001: PUSH
73002: EMPTY
73003: LIST
73004: LIST
73005: PUSH
73006: LD_INT 0
73008: PUSH
73009: LD_INT 2
73011: NEG
73012: PUSH
73013: EMPTY
73014: LIST
73015: LIST
73016: PUSH
73017: LD_INT 1
73019: PUSH
73020: LD_INT 1
73022: NEG
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: PUSH
73028: LD_INT 2
73030: PUSH
73031: LD_INT 0
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: PUSH
73038: LD_INT 2
73040: PUSH
73041: LD_INT 1
73043: PUSH
73044: EMPTY
73045: LIST
73046: LIST
73047: PUSH
73048: LD_INT 2
73050: PUSH
73051: LD_INT 2
73053: PUSH
73054: EMPTY
73055: LIST
73056: LIST
73057: PUSH
73058: LD_INT 1
73060: PUSH
73061: LD_INT 2
73063: PUSH
73064: EMPTY
73065: LIST
73066: LIST
73067: PUSH
73068: LD_INT 0
73070: PUSH
73071: LD_INT 2
73073: PUSH
73074: EMPTY
73075: LIST
73076: LIST
73077: PUSH
73078: LD_INT 1
73080: NEG
73081: PUSH
73082: LD_INT 1
73084: PUSH
73085: EMPTY
73086: LIST
73087: LIST
73088: PUSH
73089: LD_INT 2
73091: NEG
73092: PUSH
73093: LD_INT 0
73095: PUSH
73096: EMPTY
73097: LIST
73098: LIST
73099: PUSH
73100: LD_INT 2
73102: NEG
73103: PUSH
73104: LD_INT 1
73106: NEG
73107: PUSH
73108: EMPTY
73109: LIST
73110: LIST
73111: PUSH
73112: LD_INT 2
73114: NEG
73115: PUSH
73116: LD_INT 2
73118: NEG
73119: PUSH
73120: EMPTY
73121: LIST
73122: LIST
73123: PUSH
73124: EMPTY
73125: LIST
73126: LIST
73127: LIST
73128: LIST
73129: LIST
73130: LIST
73131: LIST
73132: LIST
73133: LIST
73134: LIST
73135: LIST
73136: LIST
73137: LIST
73138: LIST
73139: LIST
73140: LIST
73141: LIST
73142: LIST
73143: LIST
73144: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
73145: LD_ADDR_VAR 0 23
73149: PUSH
73150: LD_INT 0
73152: PUSH
73153: LD_INT 0
73155: PUSH
73156: EMPTY
73157: LIST
73158: LIST
73159: PUSH
73160: LD_INT 0
73162: PUSH
73163: LD_INT 1
73165: NEG
73166: PUSH
73167: EMPTY
73168: LIST
73169: LIST
73170: PUSH
73171: LD_INT 1
73173: PUSH
73174: LD_INT 0
73176: PUSH
73177: EMPTY
73178: LIST
73179: LIST
73180: PUSH
73181: LD_INT 1
73183: PUSH
73184: LD_INT 1
73186: PUSH
73187: EMPTY
73188: LIST
73189: LIST
73190: PUSH
73191: LD_INT 0
73193: PUSH
73194: LD_INT 1
73196: PUSH
73197: EMPTY
73198: LIST
73199: LIST
73200: PUSH
73201: LD_INT 1
73203: NEG
73204: PUSH
73205: LD_INT 0
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: PUSH
73212: LD_INT 1
73214: NEG
73215: PUSH
73216: LD_INT 1
73218: NEG
73219: PUSH
73220: EMPTY
73221: LIST
73222: LIST
73223: PUSH
73224: LD_INT 1
73226: NEG
73227: PUSH
73228: LD_INT 2
73230: NEG
73231: PUSH
73232: EMPTY
73233: LIST
73234: LIST
73235: PUSH
73236: LD_INT 0
73238: PUSH
73239: LD_INT 2
73241: NEG
73242: PUSH
73243: EMPTY
73244: LIST
73245: LIST
73246: PUSH
73247: LD_INT 1
73249: PUSH
73250: LD_INT 1
73252: NEG
73253: PUSH
73254: EMPTY
73255: LIST
73256: LIST
73257: PUSH
73258: LD_INT 2
73260: PUSH
73261: LD_INT 0
73263: PUSH
73264: EMPTY
73265: LIST
73266: LIST
73267: PUSH
73268: LD_INT 2
73270: PUSH
73271: LD_INT 1
73273: PUSH
73274: EMPTY
73275: LIST
73276: LIST
73277: PUSH
73278: LD_INT 2
73280: PUSH
73281: LD_INT 2
73283: PUSH
73284: EMPTY
73285: LIST
73286: LIST
73287: PUSH
73288: LD_INT 1
73290: PUSH
73291: LD_INT 2
73293: PUSH
73294: EMPTY
73295: LIST
73296: LIST
73297: PUSH
73298: LD_INT 0
73300: PUSH
73301: LD_INT 2
73303: PUSH
73304: EMPTY
73305: LIST
73306: LIST
73307: PUSH
73308: LD_INT 1
73310: NEG
73311: PUSH
73312: LD_INT 1
73314: PUSH
73315: EMPTY
73316: LIST
73317: LIST
73318: PUSH
73319: LD_INT 2
73321: NEG
73322: PUSH
73323: LD_INT 0
73325: PUSH
73326: EMPTY
73327: LIST
73328: LIST
73329: PUSH
73330: LD_INT 2
73332: NEG
73333: PUSH
73334: LD_INT 1
73336: NEG
73337: PUSH
73338: EMPTY
73339: LIST
73340: LIST
73341: PUSH
73342: LD_INT 2
73344: NEG
73345: PUSH
73346: LD_INT 2
73348: NEG
73349: PUSH
73350: EMPTY
73351: LIST
73352: LIST
73353: PUSH
73354: LD_INT 2
73356: NEG
73357: PUSH
73358: LD_INT 3
73360: NEG
73361: PUSH
73362: EMPTY
73363: LIST
73364: LIST
73365: PUSH
73366: LD_INT 1
73368: NEG
73369: PUSH
73370: LD_INT 3
73372: NEG
73373: PUSH
73374: EMPTY
73375: LIST
73376: LIST
73377: PUSH
73378: LD_INT 1
73380: PUSH
73381: LD_INT 2
73383: NEG
73384: PUSH
73385: EMPTY
73386: LIST
73387: LIST
73388: PUSH
73389: LD_INT 2
73391: PUSH
73392: LD_INT 1
73394: NEG
73395: PUSH
73396: EMPTY
73397: LIST
73398: LIST
73399: PUSH
73400: EMPTY
73401: LIST
73402: LIST
73403: LIST
73404: LIST
73405: LIST
73406: LIST
73407: LIST
73408: LIST
73409: LIST
73410: LIST
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: LIST
73416: LIST
73417: LIST
73418: LIST
73419: LIST
73420: LIST
73421: LIST
73422: LIST
73423: LIST
73424: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
73425: LD_ADDR_VAR 0 24
73429: PUSH
73430: LD_INT 0
73432: PUSH
73433: LD_INT 0
73435: PUSH
73436: EMPTY
73437: LIST
73438: LIST
73439: PUSH
73440: LD_INT 0
73442: PUSH
73443: LD_INT 1
73445: NEG
73446: PUSH
73447: EMPTY
73448: LIST
73449: LIST
73450: PUSH
73451: LD_INT 1
73453: PUSH
73454: LD_INT 0
73456: PUSH
73457: EMPTY
73458: LIST
73459: LIST
73460: PUSH
73461: LD_INT 1
73463: PUSH
73464: LD_INT 1
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: PUSH
73471: LD_INT 0
73473: PUSH
73474: LD_INT 1
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: PUSH
73481: LD_INT 1
73483: NEG
73484: PUSH
73485: LD_INT 0
73487: PUSH
73488: EMPTY
73489: LIST
73490: LIST
73491: PUSH
73492: LD_INT 1
73494: NEG
73495: PUSH
73496: LD_INT 1
73498: NEG
73499: PUSH
73500: EMPTY
73501: LIST
73502: LIST
73503: PUSH
73504: LD_INT 1
73506: NEG
73507: PUSH
73508: LD_INT 2
73510: NEG
73511: PUSH
73512: EMPTY
73513: LIST
73514: LIST
73515: PUSH
73516: LD_INT 0
73518: PUSH
73519: LD_INT 2
73521: NEG
73522: PUSH
73523: EMPTY
73524: LIST
73525: LIST
73526: PUSH
73527: LD_INT 1
73529: PUSH
73530: LD_INT 1
73532: NEG
73533: PUSH
73534: EMPTY
73535: LIST
73536: LIST
73537: PUSH
73538: LD_INT 2
73540: PUSH
73541: LD_INT 0
73543: PUSH
73544: EMPTY
73545: LIST
73546: LIST
73547: PUSH
73548: LD_INT 2
73550: PUSH
73551: LD_INT 1
73553: PUSH
73554: EMPTY
73555: LIST
73556: LIST
73557: PUSH
73558: LD_INT 2
73560: PUSH
73561: LD_INT 2
73563: PUSH
73564: EMPTY
73565: LIST
73566: LIST
73567: PUSH
73568: LD_INT 1
73570: PUSH
73571: LD_INT 2
73573: PUSH
73574: EMPTY
73575: LIST
73576: LIST
73577: PUSH
73578: LD_INT 0
73580: PUSH
73581: LD_INT 2
73583: PUSH
73584: EMPTY
73585: LIST
73586: LIST
73587: PUSH
73588: LD_INT 1
73590: NEG
73591: PUSH
73592: LD_INT 1
73594: PUSH
73595: EMPTY
73596: LIST
73597: LIST
73598: PUSH
73599: LD_INT 2
73601: NEG
73602: PUSH
73603: LD_INT 0
73605: PUSH
73606: EMPTY
73607: LIST
73608: LIST
73609: PUSH
73610: LD_INT 2
73612: NEG
73613: PUSH
73614: LD_INT 1
73616: NEG
73617: PUSH
73618: EMPTY
73619: LIST
73620: LIST
73621: PUSH
73622: LD_INT 2
73624: NEG
73625: PUSH
73626: LD_INT 2
73628: NEG
73629: PUSH
73630: EMPTY
73631: LIST
73632: LIST
73633: PUSH
73634: LD_INT 1
73636: PUSH
73637: LD_INT 2
73639: NEG
73640: PUSH
73641: EMPTY
73642: LIST
73643: LIST
73644: PUSH
73645: LD_INT 2
73647: PUSH
73648: LD_INT 1
73650: NEG
73651: PUSH
73652: EMPTY
73653: LIST
73654: LIST
73655: PUSH
73656: LD_INT 3
73658: PUSH
73659: LD_INT 1
73661: PUSH
73662: EMPTY
73663: LIST
73664: LIST
73665: PUSH
73666: LD_INT 3
73668: PUSH
73669: LD_INT 2
73671: PUSH
73672: EMPTY
73673: LIST
73674: LIST
73675: PUSH
73676: EMPTY
73677: LIST
73678: LIST
73679: LIST
73680: LIST
73681: LIST
73682: LIST
73683: LIST
73684: LIST
73685: LIST
73686: LIST
73687: LIST
73688: LIST
73689: LIST
73690: LIST
73691: LIST
73692: LIST
73693: LIST
73694: LIST
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: LIST
73700: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
73701: LD_ADDR_VAR 0 25
73705: PUSH
73706: LD_INT 0
73708: PUSH
73709: LD_INT 0
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: PUSH
73716: LD_INT 0
73718: PUSH
73719: LD_INT 1
73721: NEG
73722: PUSH
73723: EMPTY
73724: LIST
73725: LIST
73726: PUSH
73727: LD_INT 1
73729: PUSH
73730: LD_INT 0
73732: PUSH
73733: EMPTY
73734: LIST
73735: LIST
73736: PUSH
73737: LD_INT 1
73739: PUSH
73740: LD_INT 1
73742: PUSH
73743: EMPTY
73744: LIST
73745: LIST
73746: PUSH
73747: LD_INT 0
73749: PUSH
73750: LD_INT 1
73752: PUSH
73753: EMPTY
73754: LIST
73755: LIST
73756: PUSH
73757: LD_INT 1
73759: NEG
73760: PUSH
73761: LD_INT 0
73763: PUSH
73764: EMPTY
73765: LIST
73766: LIST
73767: PUSH
73768: LD_INT 1
73770: NEG
73771: PUSH
73772: LD_INT 1
73774: NEG
73775: PUSH
73776: EMPTY
73777: LIST
73778: LIST
73779: PUSH
73780: LD_INT 1
73782: NEG
73783: PUSH
73784: LD_INT 2
73786: NEG
73787: PUSH
73788: EMPTY
73789: LIST
73790: LIST
73791: PUSH
73792: LD_INT 0
73794: PUSH
73795: LD_INT 2
73797: NEG
73798: PUSH
73799: EMPTY
73800: LIST
73801: LIST
73802: PUSH
73803: LD_INT 1
73805: PUSH
73806: LD_INT 1
73808: NEG
73809: PUSH
73810: EMPTY
73811: LIST
73812: LIST
73813: PUSH
73814: LD_INT 2
73816: PUSH
73817: LD_INT 0
73819: PUSH
73820: EMPTY
73821: LIST
73822: LIST
73823: PUSH
73824: LD_INT 2
73826: PUSH
73827: LD_INT 1
73829: PUSH
73830: EMPTY
73831: LIST
73832: LIST
73833: PUSH
73834: LD_INT 2
73836: PUSH
73837: LD_INT 2
73839: PUSH
73840: EMPTY
73841: LIST
73842: LIST
73843: PUSH
73844: LD_INT 1
73846: PUSH
73847: LD_INT 2
73849: PUSH
73850: EMPTY
73851: LIST
73852: LIST
73853: PUSH
73854: LD_INT 0
73856: PUSH
73857: LD_INT 2
73859: PUSH
73860: EMPTY
73861: LIST
73862: LIST
73863: PUSH
73864: LD_INT 1
73866: NEG
73867: PUSH
73868: LD_INT 1
73870: PUSH
73871: EMPTY
73872: LIST
73873: LIST
73874: PUSH
73875: LD_INT 2
73877: NEG
73878: PUSH
73879: LD_INT 0
73881: PUSH
73882: EMPTY
73883: LIST
73884: LIST
73885: PUSH
73886: LD_INT 2
73888: NEG
73889: PUSH
73890: LD_INT 1
73892: NEG
73893: PUSH
73894: EMPTY
73895: LIST
73896: LIST
73897: PUSH
73898: LD_INT 2
73900: NEG
73901: PUSH
73902: LD_INT 2
73904: NEG
73905: PUSH
73906: EMPTY
73907: LIST
73908: LIST
73909: PUSH
73910: LD_INT 3
73912: PUSH
73913: LD_INT 1
73915: PUSH
73916: EMPTY
73917: LIST
73918: LIST
73919: PUSH
73920: LD_INT 3
73922: PUSH
73923: LD_INT 2
73925: PUSH
73926: EMPTY
73927: LIST
73928: LIST
73929: PUSH
73930: LD_INT 2
73932: PUSH
73933: LD_INT 3
73935: PUSH
73936: EMPTY
73937: LIST
73938: LIST
73939: PUSH
73940: LD_INT 1
73942: PUSH
73943: LD_INT 3
73945: PUSH
73946: EMPTY
73947: LIST
73948: LIST
73949: PUSH
73950: EMPTY
73951: LIST
73952: LIST
73953: LIST
73954: LIST
73955: LIST
73956: LIST
73957: LIST
73958: LIST
73959: LIST
73960: LIST
73961: LIST
73962: LIST
73963: LIST
73964: LIST
73965: LIST
73966: LIST
73967: LIST
73968: LIST
73969: LIST
73970: LIST
73971: LIST
73972: LIST
73973: LIST
73974: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
73975: LD_ADDR_VAR 0 26
73979: PUSH
73980: LD_INT 0
73982: PUSH
73983: LD_INT 0
73985: PUSH
73986: EMPTY
73987: LIST
73988: LIST
73989: PUSH
73990: LD_INT 0
73992: PUSH
73993: LD_INT 1
73995: NEG
73996: PUSH
73997: EMPTY
73998: LIST
73999: LIST
74000: PUSH
74001: LD_INT 1
74003: PUSH
74004: LD_INT 0
74006: PUSH
74007: EMPTY
74008: LIST
74009: LIST
74010: PUSH
74011: LD_INT 1
74013: PUSH
74014: LD_INT 1
74016: PUSH
74017: EMPTY
74018: LIST
74019: LIST
74020: PUSH
74021: LD_INT 0
74023: PUSH
74024: LD_INT 1
74026: PUSH
74027: EMPTY
74028: LIST
74029: LIST
74030: PUSH
74031: LD_INT 1
74033: NEG
74034: PUSH
74035: LD_INT 0
74037: PUSH
74038: EMPTY
74039: LIST
74040: LIST
74041: PUSH
74042: LD_INT 1
74044: NEG
74045: PUSH
74046: LD_INT 1
74048: NEG
74049: PUSH
74050: EMPTY
74051: LIST
74052: LIST
74053: PUSH
74054: LD_INT 1
74056: NEG
74057: PUSH
74058: LD_INT 2
74060: NEG
74061: PUSH
74062: EMPTY
74063: LIST
74064: LIST
74065: PUSH
74066: LD_INT 0
74068: PUSH
74069: LD_INT 2
74071: NEG
74072: PUSH
74073: EMPTY
74074: LIST
74075: LIST
74076: PUSH
74077: LD_INT 1
74079: PUSH
74080: LD_INT 1
74082: NEG
74083: PUSH
74084: EMPTY
74085: LIST
74086: LIST
74087: PUSH
74088: LD_INT 2
74090: PUSH
74091: LD_INT 0
74093: PUSH
74094: EMPTY
74095: LIST
74096: LIST
74097: PUSH
74098: LD_INT 2
74100: PUSH
74101: LD_INT 1
74103: PUSH
74104: EMPTY
74105: LIST
74106: LIST
74107: PUSH
74108: LD_INT 2
74110: PUSH
74111: LD_INT 2
74113: PUSH
74114: EMPTY
74115: LIST
74116: LIST
74117: PUSH
74118: LD_INT 1
74120: PUSH
74121: LD_INT 2
74123: PUSH
74124: EMPTY
74125: LIST
74126: LIST
74127: PUSH
74128: LD_INT 0
74130: PUSH
74131: LD_INT 2
74133: PUSH
74134: EMPTY
74135: LIST
74136: LIST
74137: PUSH
74138: LD_INT 1
74140: NEG
74141: PUSH
74142: LD_INT 1
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: PUSH
74149: LD_INT 2
74151: NEG
74152: PUSH
74153: LD_INT 0
74155: PUSH
74156: EMPTY
74157: LIST
74158: LIST
74159: PUSH
74160: LD_INT 2
74162: NEG
74163: PUSH
74164: LD_INT 1
74166: NEG
74167: PUSH
74168: EMPTY
74169: LIST
74170: LIST
74171: PUSH
74172: LD_INT 2
74174: NEG
74175: PUSH
74176: LD_INT 2
74178: NEG
74179: PUSH
74180: EMPTY
74181: LIST
74182: LIST
74183: PUSH
74184: LD_INT 2
74186: PUSH
74187: LD_INT 3
74189: PUSH
74190: EMPTY
74191: LIST
74192: LIST
74193: PUSH
74194: LD_INT 1
74196: PUSH
74197: LD_INT 3
74199: PUSH
74200: EMPTY
74201: LIST
74202: LIST
74203: PUSH
74204: LD_INT 1
74206: NEG
74207: PUSH
74208: LD_INT 2
74210: PUSH
74211: EMPTY
74212: LIST
74213: LIST
74214: PUSH
74215: LD_INT 2
74217: NEG
74218: PUSH
74219: LD_INT 1
74221: PUSH
74222: EMPTY
74223: LIST
74224: LIST
74225: PUSH
74226: EMPTY
74227: LIST
74228: LIST
74229: LIST
74230: LIST
74231: LIST
74232: LIST
74233: LIST
74234: LIST
74235: LIST
74236: LIST
74237: LIST
74238: LIST
74239: LIST
74240: LIST
74241: LIST
74242: LIST
74243: LIST
74244: LIST
74245: LIST
74246: LIST
74247: LIST
74248: LIST
74249: LIST
74250: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
74251: LD_ADDR_VAR 0 27
74255: PUSH
74256: LD_INT 0
74258: PUSH
74259: LD_INT 0
74261: PUSH
74262: EMPTY
74263: LIST
74264: LIST
74265: PUSH
74266: LD_INT 0
74268: PUSH
74269: LD_INT 1
74271: NEG
74272: PUSH
74273: EMPTY
74274: LIST
74275: LIST
74276: PUSH
74277: LD_INT 1
74279: PUSH
74280: LD_INT 0
74282: PUSH
74283: EMPTY
74284: LIST
74285: LIST
74286: PUSH
74287: LD_INT 1
74289: PUSH
74290: LD_INT 1
74292: PUSH
74293: EMPTY
74294: LIST
74295: LIST
74296: PUSH
74297: LD_INT 0
74299: PUSH
74300: LD_INT 1
74302: PUSH
74303: EMPTY
74304: LIST
74305: LIST
74306: PUSH
74307: LD_INT 1
74309: NEG
74310: PUSH
74311: LD_INT 0
74313: PUSH
74314: EMPTY
74315: LIST
74316: LIST
74317: PUSH
74318: LD_INT 1
74320: NEG
74321: PUSH
74322: LD_INT 1
74324: NEG
74325: PUSH
74326: EMPTY
74327: LIST
74328: LIST
74329: PUSH
74330: LD_INT 1
74332: NEG
74333: PUSH
74334: LD_INT 2
74336: NEG
74337: PUSH
74338: EMPTY
74339: LIST
74340: LIST
74341: PUSH
74342: LD_INT 0
74344: PUSH
74345: LD_INT 2
74347: NEG
74348: PUSH
74349: EMPTY
74350: LIST
74351: LIST
74352: PUSH
74353: LD_INT 1
74355: PUSH
74356: LD_INT 1
74358: NEG
74359: PUSH
74360: EMPTY
74361: LIST
74362: LIST
74363: PUSH
74364: LD_INT 2
74366: PUSH
74367: LD_INT 0
74369: PUSH
74370: EMPTY
74371: LIST
74372: LIST
74373: PUSH
74374: LD_INT 2
74376: PUSH
74377: LD_INT 1
74379: PUSH
74380: EMPTY
74381: LIST
74382: LIST
74383: PUSH
74384: LD_INT 2
74386: PUSH
74387: LD_INT 2
74389: PUSH
74390: EMPTY
74391: LIST
74392: LIST
74393: PUSH
74394: LD_INT 1
74396: PUSH
74397: LD_INT 2
74399: PUSH
74400: EMPTY
74401: LIST
74402: LIST
74403: PUSH
74404: LD_INT 0
74406: PUSH
74407: LD_INT 2
74409: PUSH
74410: EMPTY
74411: LIST
74412: LIST
74413: PUSH
74414: LD_INT 1
74416: NEG
74417: PUSH
74418: LD_INT 1
74420: PUSH
74421: EMPTY
74422: LIST
74423: LIST
74424: PUSH
74425: LD_INT 2
74427: NEG
74428: PUSH
74429: LD_INT 0
74431: PUSH
74432: EMPTY
74433: LIST
74434: LIST
74435: PUSH
74436: LD_INT 2
74438: NEG
74439: PUSH
74440: LD_INT 1
74442: NEG
74443: PUSH
74444: EMPTY
74445: LIST
74446: LIST
74447: PUSH
74448: LD_INT 2
74450: NEG
74451: PUSH
74452: LD_INT 2
74454: NEG
74455: PUSH
74456: EMPTY
74457: LIST
74458: LIST
74459: PUSH
74460: LD_INT 1
74462: NEG
74463: PUSH
74464: LD_INT 2
74466: PUSH
74467: EMPTY
74468: LIST
74469: LIST
74470: PUSH
74471: LD_INT 2
74473: NEG
74474: PUSH
74475: LD_INT 1
74477: PUSH
74478: EMPTY
74479: LIST
74480: LIST
74481: PUSH
74482: LD_INT 3
74484: NEG
74485: PUSH
74486: LD_INT 1
74488: NEG
74489: PUSH
74490: EMPTY
74491: LIST
74492: LIST
74493: PUSH
74494: LD_INT 3
74496: NEG
74497: PUSH
74498: LD_INT 2
74500: NEG
74501: PUSH
74502: EMPTY
74503: LIST
74504: LIST
74505: PUSH
74506: EMPTY
74507: LIST
74508: LIST
74509: LIST
74510: LIST
74511: LIST
74512: LIST
74513: LIST
74514: LIST
74515: LIST
74516: LIST
74517: LIST
74518: LIST
74519: LIST
74520: LIST
74521: LIST
74522: LIST
74523: LIST
74524: LIST
74525: LIST
74526: LIST
74527: LIST
74528: LIST
74529: LIST
74530: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
74531: LD_ADDR_VAR 0 28
74535: PUSH
74536: LD_INT 0
74538: PUSH
74539: LD_INT 0
74541: PUSH
74542: EMPTY
74543: LIST
74544: LIST
74545: PUSH
74546: LD_INT 0
74548: PUSH
74549: LD_INT 1
74551: NEG
74552: PUSH
74553: EMPTY
74554: LIST
74555: LIST
74556: PUSH
74557: LD_INT 1
74559: PUSH
74560: LD_INT 0
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: PUSH
74567: LD_INT 1
74569: PUSH
74570: LD_INT 1
74572: PUSH
74573: EMPTY
74574: LIST
74575: LIST
74576: PUSH
74577: LD_INT 0
74579: PUSH
74580: LD_INT 1
74582: PUSH
74583: EMPTY
74584: LIST
74585: LIST
74586: PUSH
74587: LD_INT 1
74589: NEG
74590: PUSH
74591: LD_INT 0
74593: PUSH
74594: EMPTY
74595: LIST
74596: LIST
74597: PUSH
74598: LD_INT 1
74600: NEG
74601: PUSH
74602: LD_INT 1
74604: NEG
74605: PUSH
74606: EMPTY
74607: LIST
74608: LIST
74609: PUSH
74610: LD_INT 1
74612: NEG
74613: PUSH
74614: LD_INT 2
74616: NEG
74617: PUSH
74618: EMPTY
74619: LIST
74620: LIST
74621: PUSH
74622: LD_INT 0
74624: PUSH
74625: LD_INT 2
74627: NEG
74628: PUSH
74629: EMPTY
74630: LIST
74631: LIST
74632: PUSH
74633: LD_INT 1
74635: PUSH
74636: LD_INT 1
74638: NEG
74639: PUSH
74640: EMPTY
74641: LIST
74642: LIST
74643: PUSH
74644: LD_INT 2
74646: PUSH
74647: LD_INT 0
74649: PUSH
74650: EMPTY
74651: LIST
74652: LIST
74653: PUSH
74654: LD_INT 2
74656: PUSH
74657: LD_INT 1
74659: PUSH
74660: EMPTY
74661: LIST
74662: LIST
74663: PUSH
74664: LD_INT 2
74666: PUSH
74667: LD_INT 2
74669: PUSH
74670: EMPTY
74671: LIST
74672: LIST
74673: PUSH
74674: LD_INT 1
74676: PUSH
74677: LD_INT 2
74679: PUSH
74680: EMPTY
74681: LIST
74682: LIST
74683: PUSH
74684: LD_INT 0
74686: PUSH
74687: LD_INT 2
74689: PUSH
74690: EMPTY
74691: LIST
74692: LIST
74693: PUSH
74694: LD_INT 1
74696: NEG
74697: PUSH
74698: LD_INT 1
74700: PUSH
74701: EMPTY
74702: LIST
74703: LIST
74704: PUSH
74705: LD_INT 2
74707: NEG
74708: PUSH
74709: LD_INT 0
74711: PUSH
74712: EMPTY
74713: LIST
74714: LIST
74715: PUSH
74716: LD_INT 2
74718: NEG
74719: PUSH
74720: LD_INT 1
74722: NEG
74723: PUSH
74724: EMPTY
74725: LIST
74726: LIST
74727: PUSH
74728: LD_INT 2
74730: NEG
74731: PUSH
74732: LD_INT 2
74734: NEG
74735: PUSH
74736: EMPTY
74737: LIST
74738: LIST
74739: PUSH
74740: LD_INT 2
74742: NEG
74743: PUSH
74744: LD_INT 3
74746: NEG
74747: PUSH
74748: EMPTY
74749: LIST
74750: LIST
74751: PUSH
74752: LD_INT 1
74754: NEG
74755: PUSH
74756: LD_INT 3
74758: NEG
74759: PUSH
74760: EMPTY
74761: LIST
74762: LIST
74763: PUSH
74764: LD_INT 3
74766: NEG
74767: PUSH
74768: LD_INT 1
74770: NEG
74771: PUSH
74772: EMPTY
74773: LIST
74774: LIST
74775: PUSH
74776: LD_INT 3
74778: NEG
74779: PUSH
74780: LD_INT 2
74782: NEG
74783: PUSH
74784: EMPTY
74785: LIST
74786: LIST
74787: PUSH
74788: EMPTY
74789: LIST
74790: LIST
74791: LIST
74792: LIST
74793: LIST
74794: LIST
74795: LIST
74796: LIST
74797: LIST
74798: LIST
74799: LIST
74800: LIST
74801: LIST
74802: LIST
74803: LIST
74804: LIST
74805: LIST
74806: LIST
74807: LIST
74808: LIST
74809: LIST
74810: LIST
74811: LIST
74812: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
74813: LD_ADDR_VAR 0 29
74817: PUSH
74818: LD_INT 0
74820: PUSH
74821: LD_INT 0
74823: PUSH
74824: EMPTY
74825: LIST
74826: LIST
74827: PUSH
74828: LD_INT 0
74830: PUSH
74831: LD_INT 1
74833: NEG
74834: PUSH
74835: EMPTY
74836: LIST
74837: LIST
74838: PUSH
74839: LD_INT 1
74841: PUSH
74842: LD_INT 0
74844: PUSH
74845: EMPTY
74846: LIST
74847: LIST
74848: PUSH
74849: LD_INT 1
74851: PUSH
74852: LD_INT 1
74854: PUSH
74855: EMPTY
74856: LIST
74857: LIST
74858: PUSH
74859: LD_INT 0
74861: PUSH
74862: LD_INT 1
74864: PUSH
74865: EMPTY
74866: LIST
74867: LIST
74868: PUSH
74869: LD_INT 1
74871: NEG
74872: PUSH
74873: LD_INT 0
74875: PUSH
74876: EMPTY
74877: LIST
74878: LIST
74879: PUSH
74880: LD_INT 1
74882: NEG
74883: PUSH
74884: LD_INT 1
74886: NEG
74887: PUSH
74888: EMPTY
74889: LIST
74890: LIST
74891: PUSH
74892: LD_INT 1
74894: NEG
74895: PUSH
74896: LD_INT 2
74898: NEG
74899: PUSH
74900: EMPTY
74901: LIST
74902: LIST
74903: PUSH
74904: LD_INT 0
74906: PUSH
74907: LD_INT 2
74909: NEG
74910: PUSH
74911: EMPTY
74912: LIST
74913: LIST
74914: PUSH
74915: LD_INT 1
74917: PUSH
74918: LD_INT 1
74920: NEG
74921: PUSH
74922: EMPTY
74923: LIST
74924: LIST
74925: PUSH
74926: LD_INT 2
74928: PUSH
74929: LD_INT 0
74931: PUSH
74932: EMPTY
74933: LIST
74934: LIST
74935: PUSH
74936: LD_INT 2
74938: PUSH
74939: LD_INT 1
74941: PUSH
74942: EMPTY
74943: LIST
74944: LIST
74945: PUSH
74946: LD_INT 1
74948: PUSH
74949: LD_INT 2
74951: PUSH
74952: EMPTY
74953: LIST
74954: LIST
74955: PUSH
74956: LD_INT 0
74958: PUSH
74959: LD_INT 2
74961: PUSH
74962: EMPTY
74963: LIST
74964: LIST
74965: PUSH
74966: LD_INT 1
74968: NEG
74969: PUSH
74970: LD_INT 1
74972: PUSH
74973: EMPTY
74974: LIST
74975: LIST
74976: PUSH
74977: LD_INT 2
74979: NEG
74980: PUSH
74981: LD_INT 1
74983: NEG
74984: PUSH
74985: EMPTY
74986: LIST
74987: LIST
74988: PUSH
74989: LD_INT 2
74991: NEG
74992: PUSH
74993: LD_INT 2
74995: NEG
74996: PUSH
74997: EMPTY
74998: LIST
74999: LIST
75000: PUSH
75001: LD_INT 2
75003: NEG
75004: PUSH
75005: LD_INT 3
75007: NEG
75008: PUSH
75009: EMPTY
75010: LIST
75011: LIST
75012: PUSH
75013: LD_INT 2
75015: PUSH
75016: LD_INT 1
75018: NEG
75019: PUSH
75020: EMPTY
75021: LIST
75022: LIST
75023: PUSH
75024: LD_INT 3
75026: PUSH
75027: LD_INT 1
75029: PUSH
75030: EMPTY
75031: LIST
75032: LIST
75033: PUSH
75034: LD_INT 1
75036: PUSH
75037: LD_INT 3
75039: PUSH
75040: EMPTY
75041: LIST
75042: LIST
75043: PUSH
75044: LD_INT 1
75046: NEG
75047: PUSH
75048: LD_INT 2
75050: PUSH
75051: EMPTY
75052: LIST
75053: LIST
75054: PUSH
75055: LD_INT 3
75057: NEG
75058: PUSH
75059: LD_INT 2
75061: NEG
75062: PUSH
75063: EMPTY
75064: LIST
75065: LIST
75066: PUSH
75067: EMPTY
75068: LIST
75069: LIST
75070: LIST
75071: LIST
75072: LIST
75073: LIST
75074: LIST
75075: LIST
75076: LIST
75077: LIST
75078: LIST
75079: LIST
75080: LIST
75081: LIST
75082: LIST
75083: LIST
75084: LIST
75085: LIST
75086: LIST
75087: LIST
75088: LIST
75089: LIST
75090: LIST
75091: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
75092: LD_ADDR_VAR 0 30
75096: PUSH
75097: LD_INT 0
75099: PUSH
75100: LD_INT 0
75102: PUSH
75103: EMPTY
75104: LIST
75105: LIST
75106: PUSH
75107: LD_INT 0
75109: PUSH
75110: LD_INT 1
75112: NEG
75113: PUSH
75114: EMPTY
75115: LIST
75116: LIST
75117: PUSH
75118: LD_INT 1
75120: PUSH
75121: LD_INT 0
75123: PUSH
75124: EMPTY
75125: LIST
75126: LIST
75127: PUSH
75128: LD_INT 1
75130: PUSH
75131: LD_INT 1
75133: PUSH
75134: EMPTY
75135: LIST
75136: LIST
75137: PUSH
75138: LD_INT 0
75140: PUSH
75141: LD_INT 1
75143: PUSH
75144: EMPTY
75145: LIST
75146: LIST
75147: PUSH
75148: LD_INT 1
75150: NEG
75151: PUSH
75152: LD_INT 0
75154: PUSH
75155: EMPTY
75156: LIST
75157: LIST
75158: PUSH
75159: LD_INT 1
75161: NEG
75162: PUSH
75163: LD_INT 1
75165: NEG
75166: PUSH
75167: EMPTY
75168: LIST
75169: LIST
75170: PUSH
75171: LD_INT 1
75173: NEG
75174: PUSH
75175: LD_INT 2
75177: NEG
75178: PUSH
75179: EMPTY
75180: LIST
75181: LIST
75182: PUSH
75183: LD_INT 0
75185: PUSH
75186: LD_INT 2
75188: NEG
75189: PUSH
75190: EMPTY
75191: LIST
75192: LIST
75193: PUSH
75194: LD_INT 1
75196: PUSH
75197: LD_INT 1
75199: NEG
75200: PUSH
75201: EMPTY
75202: LIST
75203: LIST
75204: PUSH
75205: LD_INT 2
75207: PUSH
75208: LD_INT 0
75210: PUSH
75211: EMPTY
75212: LIST
75213: LIST
75214: PUSH
75215: LD_INT 2
75217: PUSH
75218: LD_INT 1
75220: PUSH
75221: EMPTY
75222: LIST
75223: LIST
75224: PUSH
75225: LD_INT 2
75227: PUSH
75228: LD_INT 2
75230: PUSH
75231: EMPTY
75232: LIST
75233: LIST
75234: PUSH
75235: LD_INT 1
75237: PUSH
75238: LD_INT 2
75240: PUSH
75241: EMPTY
75242: LIST
75243: LIST
75244: PUSH
75245: LD_INT 1
75247: NEG
75248: PUSH
75249: LD_INT 1
75251: PUSH
75252: EMPTY
75253: LIST
75254: LIST
75255: PUSH
75256: LD_INT 2
75258: NEG
75259: PUSH
75260: LD_INT 0
75262: PUSH
75263: EMPTY
75264: LIST
75265: LIST
75266: PUSH
75267: LD_INT 2
75269: NEG
75270: PUSH
75271: LD_INT 1
75273: NEG
75274: PUSH
75275: EMPTY
75276: LIST
75277: LIST
75278: PUSH
75279: LD_INT 1
75281: NEG
75282: PUSH
75283: LD_INT 3
75285: NEG
75286: PUSH
75287: EMPTY
75288: LIST
75289: LIST
75290: PUSH
75291: LD_INT 1
75293: PUSH
75294: LD_INT 2
75296: NEG
75297: PUSH
75298: EMPTY
75299: LIST
75300: LIST
75301: PUSH
75302: LD_INT 3
75304: PUSH
75305: LD_INT 2
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: PUSH
75312: LD_INT 2
75314: PUSH
75315: LD_INT 3
75317: PUSH
75318: EMPTY
75319: LIST
75320: LIST
75321: PUSH
75322: LD_INT 2
75324: NEG
75325: PUSH
75326: LD_INT 1
75328: PUSH
75329: EMPTY
75330: LIST
75331: LIST
75332: PUSH
75333: LD_INT 3
75335: NEG
75336: PUSH
75337: LD_INT 1
75339: NEG
75340: PUSH
75341: EMPTY
75342: LIST
75343: LIST
75344: PUSH
75345: EMPTY
75346: LIST
75347: LIST
75348: LIST
75349: LIST
75350: LIST
75351: LIST
75352: LIST
75353: LIST
75354: LIST
75355: LIST
75356: LIST
75357: LIST
75358: LIST
75359: LIST
75360: LIST
75361: LIST
75362: LIST
75363: LIST
75364: LIST
75365: LIST
75366: LIST
75367: LIST
75368: LIST
75369: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
75370: LD_ADDR_VAR 0 31
75374: PUSH
75375: LD_INT 0
75377: PUSH
75378: LD_INT 0
75380: PUSH
75381: EMPTY
75382: LIST
75383: LIST
75384: PUSH
75385: LD_INT 0
75387: PUSH
75388: LD_INT 1
75390: NEG
75391: PUSH
75392: EMPTY
75393: LIST
75394: LIST
75395: PUSH
75396: LD_INT 1
75398: PUSH
75399: LD_INT 0
75401: PUSH
75402: EMPTY
75403: LIST
75404: LIST
75405: PUSH
75406: LD_INT 1
75408: PUSH
75409: LD_INT 1
75411: PUSH
75412: EMPTY
75413: LIST
75414: LIST
75415: PUSH
75416: LD_INT 0
75418: PUSH
75419: LD_INT 1
75421: PUSH
75422: EMPTY
75423: LIST
75424: LIST
75425: PUSH
75426: LD_INT 1
75428: NEG
75429: PUSH
75430: LD_INT 0
75432: PUSH
75433: EMPTY
75434: LIST
75435: LIST
75436: PUSH
75437: LD_INT 1
75439: NEG
75440: PUSH
75441: LD_INT 1
75443: NEG
75444: PUSH
75445: EMPTY
75446: LIST
75447: LIST
75448: PUSH
75449: LD_INT 1
75451: NEG
75452: PUSH
75453: LD_INT 2
75455: NEG
75456: PUSH
75457: EMPTY
75458: LIST
75459: LIST
75460: PUSH
75461: LD_INT 1
75463: PUSH
75464: LD_INT 1
75466: NEG
75467: PUSH
75468: EMPTY
75469: LIST
75470: LIST
75471: PUSH
75472: LD_INT 2
75474: PUSH
75475: LD_INT 0
75477: PUSH
75478: EMPTY
75479: LIST
75480: LIST
75481: PUSH
75482: LD_INT 2
75484: PUSH
75485: LD_INT 1
75487: PUSH
75488: EMPTY
75489: LIST
75490: LIST
75491: PUSH
75492: LD_INT 2
75494: PUSH
75495: LD_INT 2
75497: PUSH
75498: EMPTY
75499: LIST
75500: LIST
75501: PUSH
75502: LD_INT 1
75504: PUSH
75505: LD_INT 2
75507: PUSH
75508: EMPTY
75509: LIST
75510: LIST
75511: PUSH
75512: LD_INT 0
75514: PUSH
75515: LD_INT 2
75517: PUSH
75518: EMPTY
75519: LIST
75520: LIST
75521: PUSH
75522: LD_INT 1
75524: NEG
75525: PUSH
75526: LD_INT 1
75528: PUSH
75529: EMPTY
75530: LIST
75531: LIST
75532: PUSH
75533: LD_INT 2
75535: NEG
75536: PUSH
75537: LD_INT 1
75539: NEG
75540: PUSH
75541: EMPTY
75542: LIST
75543: LIST
75544: PUSH
75545: LD_INT 2
75547: NEG
75548: PUSH
75549: LD_INT 2
75551: NEG
75552: PUSH
75553: EMPTY
75554: LIST
75555: LIST
75556: PUSH
75557: LD_INT 2
75559: NEG
75560: PUSH
75561: LD_INT 3
75563: NEG
75564: PUSH
75565: EMPTY
75566: LIST
75567: LIST
75568: PUSH
75569: LD_INT 2
75571: PUSH
75572: LD_INT 1
75574: NEG
75575: PUSH
75576: EMPTY
75577: LIST
75578: LIST
75579: PUSH
75580: LD_INT 3
75582: PUSH
75583: LD_INT 1
75585: PUSH
75586: EMPTY
75587: LIST
75588: LIST
75589: PUSH
75590: LD_INT 1
75592: PUSH
75593: LD_INT 3
75595: PUSH
75596: EMPTY
75597: LIST
75598: LIST
75599: PUSH
75600: LD_INT 1
75602: NEG
75603: PUSH
75604: LD_INT 2
75606: PUSH
75607: EMPTY
75608: LIST
75609: LIST
75610: PUSH
75611: LD_INT 3
75613: NEG
75614: PUSH
75615: LD_INT 2
75617: NEG
75618: PUSH
75619: EMPTY
75620: LIST
75621: LIST
75622: PUSH
75623: EMPTY
75624: LIST
75625: LIST
75626: LIST
75627: LIST
75628: LIST
75629: LIST
75630: LIST
75631: LIST
75632: LIST
75633: LIST
75634: LIST
75635: LIST
75636: LIST
75637: LIST
75638: LIST
75639: LIST
75640: LIST
75641: LIST
75642: LIST
75643: LIST
75644: LIST
75645: LIST
75646: LIST
75647: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
75648: LD_ADDR_VAR 0 32
75652: PUSH
75653: LD_INT 0
75655: PUSH
75656: LD_INT 0
75658: PUSH
75659: EMPTY
75660: LIST
75661: LIST
75662: PUSH
75663: LD_INT 0
75665: PUSH
75666: LD_INT 1
75668: NEG
75669: PUSH
75670: EMPTY
75671: LIST
75672: LIST
75673: PUSH
75674: LD_INT 1
75676: PUSH
75677: LD_INT 0
75679: PUSH
75680: EMPTY
75681: LIST
75682: LIST
75683: PUSH
75684: LD_INT 1
75686: PUSH
75687: LD_INT 1
75689: PUSH
75690: EMPTY
75691: LIST
75692: LIST
75693: PUSH
75694: LD_INT 0
75696: PUSH
75697: LD_INT 1
75699: PUSH
75700: EMPTY
75701: LIST
75702: LIST
75703: PUSH
75704: LD_INT 1
75706: NEG
75707: PUSH
75708: LD_INT 0
75710: PUSH
75711: EMPTY
75712: LIST
75713: LIST
75714: PUSH
75715: LD_INT 1
75717: NEG
75718: PUSH
75719: LD_INT 1
75721: NEG
75722: PUSH
75723: EMPTY
75724: LIST
75725: LIST
75726: PUSH
75727: LD_INT 1
75729: NEG
75730: PUSH
75731: LD_INT 2
75733: NEG
75734: PUSH
75735: EMPTY
75736: LIST
75737: LIST
75738: PUSH
75739: LD_INT 0
75741: PUSH
75742: LD_INT 2
75744: NEG
75745: PUSH
75746: EMPTY
75747: LIST
75748: LIST
75749: PUSH
75750: LD_INT 1
75752: PUSH
75753: LD_INT 1
75755: NEG
75756: PUSH
75757: EMPTY
75758: LIST
75759: LIST
75760: PUSH
75761: LD_INT 2
75763: PUSH
75764: LD_INT 1
75766: PUSH
75767: EMPTY
75768: LIST
75769: LIST
75770: PUSH
75771: LD_INT 2
75773: PUSH
75774: LD_INT 2
75776: PUSH
75777: EMPTY
75778: LIST
75779: LIST
75780: PUSH
75781: LD_INT 1
75783: PUSH
75784: LD_INT 2
75786: PUSH
75787: EMPTY
75788: LIST
75789: LIST
75790: PUSH
75791: LD_INT 0
75793: PUSH
75794: LD_INT 2
75796: PUSH
75797: EMPTY
75798: LIST
75799: LIST
75800: PUSH
75801: LD_INT 1
75803: NEG
75804: PUSH
75805: LD_INT 1
75807: PUSH
75808: EMPTY
75809: LIST
75810: LIST
75811: PUSH
75812: LD_INT 2
75814: NEG
75815: PUSH
75816: LD_INT 0
75818: PUSH
75819: EMPTY
75820: LIST
75821: LIST
75822: PUSH
75823: LD_INT 2
75825: NEG
75826: PUSH
75827: LD_INT 1
75829: NEG
75830: PUSH
75831: EMPTY
75832: LIST
75833: LIST
75834: PUSH
75835: LD_INT 1
75837: NEG
75838: PUSH
75839: LD_INT 3
75841: NEG
75842: PUSH
75843: EMPTY
75844: LIST
75845: LIST
75846: PUSH
75847: LD_INT 1
75849: PUSH
75850: LD_INT 2
75852: NEG
75853: PUSH
75854: EMPTY
75855: LIST
75856: LIST
75857: PUSH
75858: LD_INT 3
75860: PUSH
75861: LD_INT 2
75863: PUSH
75864: EMPTY
75865: LIST
75866: LIST
75867: PUSH
75868: LD_INT 2
75870: PUSH
75871: LD_INT 3
75873: PUSH
75874: EMPTY
75875: LIST
75876: LIST
75877: PUSH
75878: LD_INT 2
75880: NEG
75881: PUSH
75882: LD_INT 1
75884: PUSH
75885: EMPTY
75886: LIST
75887: LIST
75888: PUSH
75889: LD_INT 3
75891: NEG
75892: PUSH
75893: LD_INT 1
75895: NEG
75896: PUSH
75897: EMPTY
75898: LIST
75899: LIST
75900: PUSH
75901: EMPTY
75902: LIST
75903: LIST
75904: LIST
75905: LIST
75906: LIST
75907: LIST
75908: LIST
75909: LIST
75910: LIST
75911: LIST
75912: LIST
75913: LIST
75914: LIST
75915: LIST
75916: LIST
75917: LIST
75918: LIST
75919: LIST
75920: LIST
75921: LIST
75922: LIST
75923: LIST
75924: LIST
75925: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
75926: LD_ADDR_VAR 0 33
75930: PUSH
75931: LD_INT 0
75933: PUSH
75934: LD_INT 0
75936: PUSH
75937: EMPTY
75938: LIST
75939: LIST
75940: PUSH
75941: LD_INT 0
75943: PUSH
75944: LD_INT 1
75946: NEG
75947: PUSH
75948: EMPTY
75949: LIST
75950: LIST
75951: PUSH
75952: LD_INT 1
75954: PUSH
75955: LD_INT 0
75957: PUSH
75958: EMPTY
75959: LIST
75960: LIST
75961: PUSH
75962: LD_INT 1
75964: PUSH
75965: LD_INT 1
75967: PUSH
75968: EMPTY
75969: LIST
75970: LIST
75971: PUSH
75972: LD_INT 0
75974: PUSH
75975: LD_INT 1
75977: PUSH
75978: EMPTY
75979: LIST
75980: LIST
75981: PUSH
75982: LD_INT 1
75984: NEG
75985: PUSH
75986: LD_INT 0
75988: PUSH
75989: EMPTY
75990: LIST
75991: LIST
75992: PUSH
75993: LD_INT 1
75995: NEG
75996: PUSH
75997: LD_INT 1
75999: NEG
76000: PUSH
76001: EMPTY
76002: LIST
76003: LIST
76004: PUSH
76005: LD_INT 1
76007: NEG
76008: PUSH
76009: LD_INT 2
76011: NEG
76012: PUSH
76013: EMPTY
76014: LIST
76015: LIST
76016: PUSH
76017: LD_INT 1
76019: PUSH
76020: LD_INT 1
76022: NEG
76023: PUSH
76024: EMPTY
76025: LIST
76026: LIST
76027: PUSH
76028: LD_INT 2
76030: PUSH
76031: LD_INT 0
76033: PUSH
76034: EMPTY
76035: LIST
76036: LIST
76037: PUSH
76038: LD_INT 2
76040: PUSH
76041: LD_INT 1
76043: PUSH
76044: EMPTY
76045: LIST
76046: LIST
76047: PUSH
76048: LD_INT 1
76050: PUSH
76051: LD_INT 2
76053: PUSH
76054: EMPTY
76055: LIST
76056: LIST
76057: PUSH
76058: LD_INT 0
76060: PUSH
76061: LD_INT 2
76063: PUSH
76064: EMPTY
76065: LIST
76066: LIST
76067: PUSH
76068: LD_INT 1
76070: NEG
76071: PUSH
76072: LD_INT 1
76074: PUSH
76075: EMPTY
76076: LIST
76077: LIST
76078: PUSH
76079: LD_INT 2
76081: NEG
76082: PUSH
76083: LD_INT 0
76085: PUSH
76086: EMPTY
76087: LIST
76088: LIST
76089: PUSH
76090: LD_INT 2
76092: NEG
76093: PUSH
76094: LD_INT 1
76096: NEG
76097: PUSH
76098: EMPTY
76099: LIST
76100: LIST
76101: PUSH
76102: LD_INT 2
76104: NEG
76105: PUSH
76106: LD_INT 2
76108: NEG
76109: PUSH
76110: EMPTY
76111: LIST
76112: LIST
76113: PUSH
76114: LD_INT 2
76116: NEG
76117: PUSH
76118: LD_INT 3
76120: NEG
76121: PUSH
76122: EMPTY
76123: LIST
76124: LIST
76125: PUSH
76126: LD_INT 2
76128: PUSH
76129: LD_INT 1
76131: NEG
76132: PUSH
76133: EMPTY
76134: LIST
76135: LIST
76136: PUSH
76137: LD_INT 3
76139: PUSH
76140: LD_INT 1
76142: PUSH
76143: EMPTY
76144: LIST
76145: LIST
76146: PUSH
76147: LD_INT 1
76149: PUSH
76150: LD_INT 3
76152: PUSH
76153: EMPTY
76154: LIST
76155: LIST
76156: PUSH
76157: LD_INT 1
76159: NEG
76160: PUSH
76161: LD_INT 2
76163: PUSH
76164: EMPTY
76165: LIST
76166: LIST
76167: PUSH
76168: LD_INT 3
76170: NEG
76171: PUSH
76172: LD_INT 2
76174: NEG
76175: PUSH
76176: EMPTY
76177: LIST
76178: LIST
76179: PUSH
76180: EMPTY
76181: LIST
76182: LIST
76183: LIST
76184: LIST
76185: LIST
76186: LIST
76187: LIST
76188: LIST
76189: LIST
76190: LIST
76191: LIST
76192: LIST
76193: LIST
76194: LIST
76195: LIST
76196: LIST
76197: LIST
76198: LIST
76199: LIST
76200: LIST
76201: LIST
76202: LIST
76203: LIST
76204: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
76205: LD_ADDR_VAR 0 34
76209: PUSH
76210: LD_INT 0
76212: PUSH
76213: LD_INT 0
76215: PUSH
76216: EMPTY
76217: LIST
76218: LIST
76219: PUSH
76220: LD_INT 0
76222: PUSH
76223: LD_INT 1
76225: NEG
76226: PUSH
76227: EMPTY
76228: LIST
76229: LIST
76230: PUSH
76231: LD_INT 1
76233: PUSH
76234: LD_INT 0
76236: PUSH
76237: EMPTY
76238: LIST
76239: LIST
76240: PUSH
76241: LD_INT 1
76243: PUSH
76244: LD_INT 1
76246: PUSH
76247: EMPTY
76248: LIST
76249: LIST
76250: PUSH
76251: LD_INT 0
76253: PUSH
76254: LD_INT 1
76256: PUSH
76257: EMPTY
76258: LIST
76259: LIST
76260: PUSH
76261: LD_INT 1
76263: NEG
76264: PUSH
76265: LD_INT 0
76267: PUSH
76268: EMPTY
76269: LIST
76270: LIST
76271: PUSH
76272: LD_INT 1
76274: NEG
76275: PUSH
76276: LD_INT 1
76278: NEG
76279: PUSH
76280: EMPTY
76281: LIST
76282: LIST
76283: PUSH
76284: LD_INT 1
76286: NEG
76287: PUSH
76288: LD_INT 2
76290: NEG
76291: PUSH
76292: EMPTY
76293: LIST
76294: LIST
76295: PUSH
76296: LD_INT 0
76298: PUSH
76299: LD_INT 2
76301: NEG
76302: PUSH
76303: EMPTY
76304: LIST
76305: LIST
76306: PUSH
76307: LD_INT 1
76309: PUSH
76310: LD_INT 1
76312: NEG
76313: PUSH
76314: EMPTY
76315: LIST
76316: LIST
76317: PUSH
76318: LD_INT 2
76320: PUSH
76321: LD_INT 1
76323: PUSH
76324: EMPTY
76325: LIST
76326: LIST
76327: PUSH
76328: LD_INT 2
76330: PUSH
76331: LD_INT 2
76333: PUSH
76334: EMPTY
76335: LIST
76336: LIST
76337: PUSH
76338: LD_INT 1
76340: PUSH
76341: LD_INT 2
76343: PUSH
76344: EMPTY
76345: LIST
76346: LIST
76347: PUSH
76348: LD_INT 1
76350: NEG
76351: PUSH
76352: LD_INT 1
76354: PUSH
76355: EMPTY
76356: LIST
76357: LIST
76358: PUSH
76359: LD_INT 2
76361: NEG
76362: PUSH
76363: LD_INT 0
76365: PUSH
76366: EMPTY
76367: LIST
76368: LIST
76369: PUSH
76370: LD_INT 2
76372: NEG
76373: PUSH
76374: LD_INT 1
76376: NEG
76377: PUSH
76378: EMPTY
76379: LIST
76380: LIST
76381: PUSH
76382: LD_INT 2
76384: NEG
76385: PUSH
76386: LD_INT 2
76388: NEG
76389: PUSH
76390: EMPTY
76391: LIST
76392: LIST
76393: PUSH
76394: LD_INT 1
76396: NEG
76397: PUSH
76398: LD_INT 3
76400: NEG
76401: PUSH
76402: EMPTY
76403: LIST
76404: LIST
76405: PUSH
76406: LD_INT 1
76408: PUSH
76409: LD_INT 2
76411: NEG
76412: PUSH
76413: EMPTY
76414: LIST
76415: LIST
76416: PUSH
76417: LD_INT 3
76419: PUSH
76420: LD_INT 2
76422: PUSH
76423: EMPTY
76424: LIST
76425: LIST
76426: PUSH
76427: LD_INT 2
76429: PUSH
76430: LD_INT 3
76432: PUSH
76433: EMPTY
76434: LIST
76435: LIST
76436: PUSH
76437: LD_INT 2
76439: NEG
76440: PUSH
76441: LD_INT 1
76443: PUSH
76444: EMPTY
76445: LIST
76446: LIST
76447: PUSH
76448: LD_INT 3
76450: NEG
76451: PUSH
76452: LD_INT 1
76454: NEG
76455: PUSH
76456: EMPTY
76457: LIST
76458: LIST
76459: PUSH
76460: EMPTY
76461: LIST
76462: LIST
76463: LIST
76464: LIST
76465: LIST
76466: LIST
76467: LIST
76468: LIST
76469: LIST
76470: LIST
76471: LIST
76472: LIST
76473: LIST
76474: LIST
76475: LIST
76476: LIST
76477: LIST
76478: LIST
76479: LIST
76480: LIST
76481: LIST
76482: LIST
76483: LIST
76484: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
76485: LD_ADDR_VAR 0 35
76489: PUSH
76490: LD_INT 0
76492: PUSH
76493: LD_INT 0
76495: PUSH
76496: EMPTY
76497: LIST
76498: LIST
76499: PUSH
76500: LD_INT 0
76502: PUSH
76503: LD_INT 1
76505: NEG
76506: PUSH
76507: EMPTY
76508: LIST
76509: LIST
76510: PUSH
76511: LD_INT 1
76513: PUSH
76514: LD_INT 0
76516: PUSH
76517: EMPTY
76518: LIST
76519: LIST
76520: PUSH
76521: LD_INT 1
76523: PUSH
76524: LD_INT 1
76526: PUSH
76527: EMPTY
76528: LIST
76529: LIST
76530: PUSH
76531: LD_INT 0
76533: PUSH
76534: LD_INT 1
76536: PUSH
76537: EMPTY
76538: LIST
76539: LIST
76540: PUSH
76541: LD_INT 1
76543: NEG
76544: PUSH
76545: LD_INT 0
76547: PUSH
76548: EMPTY
76549: LIST
76550: LIST
76551: PUSH
76552: LD_INT 1
76554: NEG
76555: PUSH
76556: LD_INT 1
76558: NEG
76559: PUSH
76560: EMPTY
76561: LIST
76562: LIST
76563: PUSH
76564: LD_INT 2
76566: PUSH
76567: LD_INT 1
76569: PUSH
76570: EMPTY
76571: LIST
76572: LIST
76573: PUSH
76574: LD_INT 2
76576: NEG
76577: PUSH
76578: LD_INT 1
76580: NEG
76581: PUSH
76582: EMPTY
76583: LIST
76584: LIST
76585: PUSH
76586: EMPTY
76587: LIST
76588: LIST
76589: LIST
76590: LIST
76591: LIST
76592: LIST
76593: LIST
76594: LIST
76595: LIST
76596: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
76597: LD_ADDR_VAR 0 36
76601: PUSH
76602: LD_INT 0
76604: PUSH
76605: LD_INT 0
76607: PUSH
76608: EMPTY
76609: LIST
76610: LIST
76611: PUSH
76612: LD_INT 0
76614: PUSH
76615: LD_INT 1
76617: NEG
76618: PUSH
76619: EMPTY
76620: LIST
76621: LIST
76622: PUSH
76623: LD_INT 1
76625: PUSH
76626: LD_INT 0
76628: PUSH
76629: EMPTY
76630: LIST
76631: LIST
76632: PUSH
76633: LD_INT 1
76635: PUSH
76636: LD_INT 1
76638: PUSH
76639: EMPTY
76640: LIST
76641: LIST
76642: PUSH
76643: LD_INT 0
76645: PUSH
76646: LD_INT 1
76648: PUSH
76649: EMPTY
76650: LIST
76651: LIST
76652: PUSH
76653: LD_INT 1
76655: NEG
76656: PUSH
76657: LD_INT 0
76659: PUSH
76660: EMPTY
76661: LIST
76662: LIST
76663: PUSH
76664: LD_INT 1
76666: NEG
76667: PUSH
76668: LD_INT 1
76670: NEG
76671: PUSH
76672: EMPTY
76673: LIST
76674: LIST
76675: PUSH
76676: LD_INT 1
76678: NEG
76679: PUSH
76680: LD_INT 2
76682: NEG
76683: PUSH
76684: EMPTY
76685: LIST
76686: LIST
76687: PUSH
76688: LD_INT 1
76690: PUSH
76691: LD_INT 2
76693: PUSH
76694: EMPTY
76695: LIST
76696: LIST
76697: PUSH
76698: EMPTY
76699: LIST
76700: LIST
76701: LIST
76702: LIST
76703: LIST
76704: LIST
76705: LIST
76706: LIST
76707: LIST
76708: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
76709: LD_ADDR_VAR 0 37
76713: PUSH
76714: LD_INT 0
76716: PUSH
76717: LD_INT 0
76719: PUSH
76720: EMPTY
76721: LIST
76722: LIST
76723: PUSH
76724: LD_INT 0
76726: PUSH
76727: LD_INT 1
76729: NEG
76730: PUSH
76731: EMPTY
76732: LIST
76733: LIST
76734: PUSH
76735: LD_INT 1
76737: PUSH
76738: LD_INT 0
76740: PUSH
76741: EMPTY
76742: LIST
76743: LIST
76744: PUSH
76745: LD_INT 1
76747: PUSH
76748: LD_INT 1
76750: PUSH
76751: EMPTY
76752: LIST
76753: LIST
76754: PUSH
76755: LD_INT 0
76757: PUSH
76758: LD_INT 1
76760: PUSH
76761: EMPTY
76762: LIST
76763: LIST
76764: PUSH
76765: LD_INT 1
76767: NEG
76768: PUSH
76769: LD_INT 0
76771: PUSH
76772: EMPTY
76773: LIST
76774: LIST
76775: PUSH
76776: LD_INT 1
76778: NEG
76779: PUSH
76780: LD_INT 1
76782: NEG
76783: PUSH
76784: EMPTY
76785: LIST
76786: LIST
76787: PUSH
76788: LD_INT 1
76790: PUSH
76791: LD_INT 1
76793: NEG
76794: PUSH
76795: EMPTY
76796: LIST
76797: LIST
76798: PUSH
76799: LD_INT 1
76801: NEG
76802: PUSH
76803: LD_INT 1
76805: PUSH
76806: EMPTY
76807: LIST
76808: LIST
76809: PUSH
76810: EMPTY
76811: LIST
76812: LIST
76813: LIST
76814: LIST
76815: LIST
76816: LIST
76817: LIST
76818: LIST
76819: LIST
76820: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
76821: LD_ADDR_VAR 0 38
76825: PUSH
76826: LD_INT 0
76828: PUSH
76829: LD_INT 0
76831: PUSH
76832: EMPTY
76833: LIST
76834: LIST
76835: PUSH
76836: LD_INT 0
76838: PUSH
76839: LD_INT 1
76841: NEG
76842: PUSH
76843: EMPTY
76844: LIST
76845: LIST
76846: PUSH
76847: LD_INT 1
76849: PUSH
76850: LD_INT 0
76852: PUSH
76853: EMPTY
76854: LIST
76855: LIST
76856: PUSH
76857: LD_INT 1
76859: PUSH
76860: LD_INT 1
76862: PUSH
76863: EMPTY
76864: LIST
76865: LIST
76866: PUSH
76867: LD_INT 0
76869: PUSH
76870: LD_INT 1
76872: PUSH
76873: EMPTY
76874: LIST
76875: LIST
76876: PUSH
76877: LD_INT 1
76879: NEG
76880: PUSH
76881: LD_INT 0
76883: PUSH
76884: EMPTY
76885: LIST
76886: LIST
76887: PUSH
76888: LD_INT 1
76890: NEG
76891: PUSH
76892: LD_INT 1
76894: NEG
76895: PUSH
76896: EMPTY
76897: LIST
76898: LIST
76899: PUSH
76900: LD_INT 2
76902: PUSH
76903: LD_INT 1
76905: PUSH
76906: EMPTY
76907: LIST
76908: LIST
76909: PUSH
76910: LD_INT 2
76912: NEG
76913: PUSH
76914: LD_INT 1
76916: NEG
76917: PUSH
76918: EMPTY
76919: LIST
76920: LIST
76921: PUSH
76922: EMPTY
76923: LIST
76924: LIST
76925: LIST
76926: LIST
76927: LIST
76928: LIST
76929: LIST
76930: LIST
76931: LIST
76932: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
76933: LD_ADDR_VAR 0 39
76937: PUSH
76938: LD_INT 0
76940: PUSH
76941: LD_INT 0
76943: PUSH
76944: EMPTY
76945: LIST
76946: LIST
76947: PUSH
76948: LD_INT 0
76950: PUSH
76951: LD_INT 1
76953: NEG
76954: PUSH
76955: EMPTY
76956: LIST
76957: LIST
76958: PUSH
76959: LD_INT 1
76961: PUSH
76962: LD_INT 0
76964: PUSH
76965: EMPTY
76966: LIST
76967: LIST
76968: PUSH
76969: LD_INT 1
76971: PUSH
76972: LD_INT 1
76974: PUSH
76975: EMPTY
76976: LIST
76977: LIST
76978: PUSH
76979: LD_INT 0
76981: PUSH
76982: LD_INT 1
76984: PUSH
76985: EMPTY
76986: LIST
76987: LIST
76988: PUSH
76989: LD_INT 1
76991: NEG
76992: PUSH
76993: LD_INT 0
76995: PUSH
76996: EMPTY
76997: LIST
76998: LIST
76999: PUSH
77000: LD_INT 1
77002: NEG
77003: PUSH
77004: LD_INT 1
77006: NEG
77007: PUSH
77008: EMPTY
77009: LIST
77010: LIST
77011: PUSH
77012: LD_INT 1
77014: NEG
77015: PUSH
77016: LD_INT 2
77018: NEG
77019: PUSH
77020: EMPTY
77021: LIST
77022: LIST
77023: PUSH
77024: LD_INT 1
77026: PUSH
77027: LD_INT 2
77029: PUSH
77030: EMPTY
77031: LIST
77032: LIST
77033: PUSH
77034: EMPTY
77035: LIST
77036: LIST
77037: LIST
77038: LIST
77039: LIST
77040: LIST
77041: LIST
77042: LIST
77043: LIST
77044: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
77045: LD_ADDR_VAR 0 40
77049: PUSH
77050: LD_INT 0
77052: PUSH
77053: LD_INT 0
77055: PUSH
77056: EMPTY
77057: LIST
77058: LIST
77059: PUSH
77060: LD_INT 0
77062: PUSH
77063: LD_INT 1
77065: NEG
77066: PUSH
77067: EMPTY
77068: LIST
77069: LIST
77070: PUSH
77071: LD_INT 1
77073: PUSH
77074: LD_INT 0
77076: PUSH
77077: EMPTY
77078: LIST
77079: LIST
77080: PUSH
77081: LD_INT 1
77083: PUSH
77084: LD_INT 1
77086: PUSH
77087: EMPTY
77088: LIST
77089: LIST
77090: PUSH
77091: LD_INT 0
77093: PUSH
77094: LD_INT 1
77096: PUSH
77097: EMPTY
77098: LIST
77099: LIST
77100: PUSH
77101: LD_INT 1
77103: NEG
77104: PUSH
77105: LD_INT 0
77107: PUSH
77108: EMPTY
77109: LIST
77110: LIST
77111: PUSH
77112: LD_INT 1
77114: NEG
77115: PUSH
77116: LD_INT 1
77118: NEG
77119: PUSH
77120: EMPTY
77121: LIST
77122: LIST
77123: PUSH
77124: LD_INT 1
77126: PUSH
77127: LD_INT 1
77129: NEG
77130: PUSH
77131: EMPTY
77132: LIST
77133: LIST
77134: PUSH
77135: LD_INT 1
77137: NEG
77138: PUSH
77139: LD_INT 1
77141: PUSH
77142: EMPTY
77143: LIST
77144: LIST
77145: PUSH
77146: EMPTY
77147: LIST
77148: LIST
77149: LIST
77150: LIST
77151: LIST
77152: LIST
77153: LIST
77154: LIST
77155: LIST
77156: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
77157: LD_ADDR_VAR 0 41
77161: PUSH
77162: LD_INT 0
77164: PUSH
77165: LD_INT 0
77167: PUSH
77168: EMPTY
77169: LIST
77170: LIST
77171: PUSH
77172: LD_INT 0
77174: PUSH
77175: LD_INT 1
77177: NEG
77178: PUSH
77179: EMPTY
77180: LIST
77181: LIST
77182: PUSH
77183: LD_INT 1
77185: PUSH
77186: LD_INT 0
77188: PUSH
77189: EMPTY
77190: LIST
77191: LIST
77192: PUSH
77193: LD_INT 1
77195: PUSH
77196: LD_INT 1
77198: PUSH
77199: EMPTY
77200: LIST
77201: LIST
77202: PUSH
77203: LD_INT 0
77205: PUSH
77206: LD_INT 1
77208: PUSH
77209: EMPTY
77210: LIST
77211: LIST
77212: PUSH
77213: LD_INT 1
77215: NEG
77216: PUSH
77217: LD_INT 0
77219: PUSH
77220: EMPTY
77221: LIST
77222: LIST
77223: PUSH
77224: LD_INT 1
77226: NEG
77227: PUSH
77228: LD_INT 1
77230: NEG
77231: PUSH
77232: EMPTY
77233: LIST
77234: LIST
77235: PUSH
77236: LD_INT 1
77238: NEG
77239: PUSH
77240: LD_INT 2
77242: NEG
77243: PUSH
77244: EMPTY
77245: LIST
77246: LIST
77247: PUSH
77248: LD_INT 1
77250: PUSH
77251: LD_INT 1
77253: NEG
77254: PUSH
77255: EMPTY
77256: LIST
77257: LIST
77258: PUSH
77259: LD_INT 2
77261: PUSH
77262: LD_INT 0
77264: PUSH
77265: EMPTY
77266: LIST
77267: LIST
77268: PUSH
77269: LD_INT 2
77271: PUSH
77272: LD_INT 1
77274: PUSH
77275: EMPTY
77276: LIST
77277: LIST
77278: PUSH
77279: LD_INT 2
77281: PUSH
77282: LD_INT 2
77284: PUSH
77285: EMPTY
77286: LIST
77287: LIST
77288: PUSH
77289: LD_INT 1
77291: PUSH
77292: LD_INT 2
77294: PUSH
77295: EMPTY
77296: LIST
77297: LIST
77298: PUSH
77299: LD_INT 1
77301: NEG
77302: PUSH
77303: LD_INT 1
77305: PUSH
77306: EMPTY
77307: LIST
77308: LIST
77309: PUSH
77310: LD_INT 2
77312: NEG
77313: PUSH
77314: LD_INT 0
77316: PUSH
77317: EMPTY
77318: LIST
77319: LIST
77320: PUSH
77321: LD_INT 2
77323: NEG
77324: PUSH
77325: LD_INT 1
77327: NEG
77328: PUSH
77329: EMPTY
77330: LIST
77331: LIST
77332: PUSH
77333: LD_INT 2
77335: NEG
77336: PUSH
77337: LD_INT 2
77339: NEG
77340: PUSH
77341: EMPTY
77342: LIST
77343: LIST
77344: PUSH
77345: LD_INT 2
77347: NEG
77348: PUSH
77349: LD_INT 3
77351: NEG
77352: PUSH
77353: EMPTY
77354: LIST
77355: LIST
77356: PUSH
77357: LD_INT 2
77359: PUSH
77360: LD_INT 1
77362: NEG
77363: PUSH
77364: EMPTY
77365: LIST
77366: LIST
77367: PUSH
77368: LD_INT 3
77370: PUSH
77371: LD_INT 0
77373: PUSH
77374: EMPTY
77375: LIST
77376: LIST
77377: PUSH
77378: LD_INT 3
77380: PUSH
77381: LD_INT 1
77383: PUSH
77384: EMPTY
77385: LIST
77386: LIST
77387: PUSH
77388: LD_INT 3
77390: PUSH
77391: LD_INT 2
77393: PUSH
77394: EMPTY
77395: LIST
77396: LIST
77397: PUSH
77398: LD_INT 3
77400: PUSH
77401: LD_INT 3
77403: PUSH
77404: EMPTY
77405: LIST
77406: LIST
77407: PUSH
77408: LD_INT 2
77410: PUSH
77411: LD_INT 3
77413: PUSH
77414: EMPTY
77415: LIST
77416: LIST
77417: PUSH
77418: LD_INT 2
77420: NEG
77421: PUSH
77422: LD_INT 1
77424: PUSH
77425: EMPTY
77426: LIST
77427: LIST
77428: PUSH
77429: LD_INT 3
77431: NEG
77432: PUSH
77433: LD_INT 0
77435: PUSH
77436: EMPTY
77437: LIST
77438: LIST
77439: PUSH
77440: LD_INT 3
77442: NEG
77443: PUSH
77444: LD_INT 1
77446: NEG
77447: PUSH
77448: EMPTY
77449: LIST
77450: LIST
77451: PUSH
77452: LD_INT 3
77454: NEG
77455: PUSH
77456: LD_INT 2
77458: NEG
77459: PUSH
77460: EMPTY
77461: LIST
77462: LIST
77463: PUSH
77464: LD_INT 3
77466: NEG
77467: PUSH
77468: LD_INT 3
77470: NEG
77471: PUSH
77472: EMPTY
77473: LIST
77474: LIST
77475: PUSH
77476: EMPTY
77477: LIST
77478: LIST
77479: LIST
77480: LIST
77481: LIST
77482: LIST
77483: LIST
77484: LIST
77485: LIST
77486: LIST
77487: LIST
77488: LIST
77489: LIST
77490: LIST
77491: LIST
77492: LIST
77493: LIST
77494: LIST
77495: LIST
77496: LIST
77497: LIST
77498: LIST
77499: LIST
77500: LIST
77501: LIST
77502: LIST
77503: LIST
77504: LIST
77505: LIST
77506: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
77507: LD_ADDR_VAR 0 42
77511: PUSH
77512: LD_INT 0
77514: PUSH
77515: LD_INT 0
77517: PUSH
77518: EMPTY
77519: LIST
77520: LIST
77521: PUSH
77522: LD_INT 0
77524: PUSH
77525: LD_INT 1
77527: NEG
77528: PUSH
77529: EMPTY
77530: LIST
77531: LIST
77532: PUSH
77533: LD_INT 1
77535: PUSH
77536: LD_INT 0
77538: PUSH
77539: EMPTY
77540: LIST
77541: LIST
77542: PUSH
77543: LD_INT 1
77545: PUSH
77546: LD_INT 1
77548: PUSH
77549: EMPTY
77550: LIST
77551: LIST
77552: PUSH
77553: LD_INT 0
77555: PUSH
77556: LD_INT 1
77558: PUSH
77559: EMPTY
77560: LIST
77561: LIST
77562: PUSH
77563: LD_INT 1
77565: NEG
77566: PUSH
77567: LD_INT 0
77569: PUSH
77570: EMPTY
77571: LIST
77572: LIST
77573: PUSH
77574: LD_INT 1
77576: NEG
77577: PUSH
77578: LD_INT 1
77580: NEG
77581: PUSH
77582: EMPTY
77583: LIST
77584: LIST
77585: PUSH
77586: LD_INT 1
77588: NEG
77589: PUSH
77590: LD_INT 2
77592: NEG
77593: PUSH
77594: EMPTY
77595: LIST
77596: LIST
77597: PUSH
77598: LD_INT 0
77600: PUSH
77601: LD_INT 2
77603: NEG
77604: PUSH
77605: EMPTY
77606: LIST
77607: LIST
77608: PUSH
77609: LD_INT 1
77611: PUSH
77612: LD_INT 1
77614: NEG
77615: PUSH
77616: EMPTY
77617: LIST
77618: LIST
77619: PUSH
77620: LD_INT 2
77622: PUSH
77623: LD_INT 1
77625: PUSH
77626: EMPTY
77627: LIST
77628: LIST
77629: PUSH
77630: LD_INT 2
77632: PUSH
77633: LD_INT 2
77635: PUSH
77636: EMPTY
77637: LIST
77638: LIST
77639: PUSH
77640: LD_INT 1
77642: PUSH
77643: LD_INT 2
77645: PUSH
77646: EMPTY
77647: LIST
77648: LIST
77649: PUSH
77650: LD_INT 0
77652: PUSH
77653: LD_INT 2
77655: PUSH
77656: EMPTY
77657: LIST
77658: LIST
77659: PUSH
77660: LD_INT 1
77662: NEG
77663: PUSH
77664: LD_INT 1
77666: PUSH
77667: EMPTY
77668: LIST
77669: LIST
77670: PUSH
77671: LD_INT 2
77673: NEG
77674: PUSH
77675: LD_INT 1
77677: NEG
77678: PUSH
77679: EMPTY
77680: LIST
77681: LIST
77682: PUSH
77683: LD_INT 2
77685: NEG
77686: PUSH
77687: LD_INT 2
77689: NEG
77690: PUSH
77691: EMPTY
77692: LIST
77693: LIST
77694: PUSH
77695: LD_INT 2
77697: NEG
77698: PUSH
77699: LD_INT 3
77701: NEG
77702: PUSH
77703: EMPTY
77704: LIST
77705: LIST
77706: PUSH
77707: LD_INT 1
77709: NEG
77710: PUSH
77711: LD_INT 3
77713: NEG
77714: PUSH
77715: EMPTY
77716: LIST
77717: LIST
77718: PUSH
77719: LD_INT 0
77721: PUSH
77722: LD_INT 3
77724: NEG
77725: PUSH
77726: EMPTY
77727: LIST
77728: LIST
77729: PUSH
77730: LD_INT 1
77732: PUSH
77733: LD_INT 2
77735: NEG
77736: PUSH
77737: EMPTY
77738: LIST
77739: LIST
77740: PUSH
77741: LD_INT 3
77743: PUSH
77744: LD_INT 2
77746: PUSH
77747: EMPTY
77748: LIST
77749: LIST
77750: PUSH
77751: LD_INT 3
77753: PUSH
77754: LD_INT 3
77756: PUSH
77757: EMPTY
77758: LIST
77759: LIST
77760: PUSH
77761: LD_INT 2
77763: PUSH
77764: LD_INT 3
77766: PUSH
77767: EMPTY
77768: LIST
77769: LIST
77770: PUSH
77771: LD_INT 1
77773: PUSH
77774: LD_INT 3
77776: PUSH
77777: EMPTY
77778: LIST
77779: LIST
77780: PUSH
77781: LD_INT 0
77783: PUSH
77784: LD_INT 3
77786: PUSH
77787: EMPTY
77788: LIST
77789: LIST
77790: PUSH
77791: LD_INT 1
77793: NEG
77794: PUSH
77795: LD_INT 2
77797: PUSH
77798: EMPTY
77799: LIST
77800: LIST
77801: PUSH
77802: LD_INT 3
77804: NEG
77805: PUSH
77806: LD_INT 2
77808: NEG
77809: PUSH
77810: EMPTY
77811: LIST
77812: LIST
77813: PUSH
77814: LD_INT 3
77816: NEG
77817: PUSH
77818: LD_INT 3
77820: NEG
77821: PUSH
77822: EMPTY
77823: LIST
77824: LIST
77825: PUSH
77826: EMPTY
77827: LIST
77828: LIST
77829: LIST
77830: LIST
77831: LIST
77832: LIST
77833: LIST
77834: LIST
77835: LIST
77836: LIST
77837: LIST
77838: LIST
77839: LIST
77840: LIST
77841: LIST
77842: LIST
77843: LIST
77844: LIST
77845: LIST
77846: LIST
77847: LIST
77848: LIST
77849: LIST
77850: LIST
77851: LIST
77852: LIST
77853: LIST
77854: LIST
77855: LIST
77856: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
77857: LD_ADDR_VAR 0 43
77861: PUSH
77862: LD_INT 0
77864: PUSH
77865: LD_INT 0
77867: PUSH
77868: EMPTY
77869: LIST
77870: LIST
77871: PUSH
77872: LD_INT 0
77874: PUSH
77875: LD_INT 1
77877: NEG
77878: PUSH
77879: EMPTY
77880: LIST
77881: LIST
77882: PUSH
77883: LD_INT 1
77885: PUSH
77886: LD_INT 0
77888: PUSH
77889: EMPTY
77890: LIST
77891: LIST
77892: PUSH
77893: LD_INT 1
77895: PUSH
77896: LD_INT 1
77898: PUSH
77899: EMPTY
77900: LIST
77901: LIST
77902: PUSH
77903: LD_INT 0
77905: PUSH
77906: LD_INT 1
77908: PUSH
77909: EMPTY
77910: LIST
77911: LIST
77912: PUSH
77913: LD_INT 1
77915: NEG
77916: PUSH
77917: LD_INT 0
77919: PUSH
77920: EMPTY
77921: LIST
77922: LIST
77923: PUSH
77924: LD_INT 1
77926: NEG
77927: PUSH
77928: LD_INT 1
77930: NEG
77931: PUSH
77932: EMPTY
77933: LIST
77934: LIST
77935: PUSH
77936: LD_INT 1
77938: NEG
77939: PUSH
77940: LD_INT 2
77942: NEG
77943: PUSH
77944: EMPTY
77945: LIST
77946: LIST
77947: PUSH
77948: LD_INT 0
77950: PUSH
77951: LD_INT 2
77953: NEG
77954: PUSH
77955: EMPTY
77956: LIST
77957: LIST
77958: PUSH
77959: LD_INT 1
77961: PUSH
77962: LD_INT 1
77964: NEG
77965: PUSH
77966: EMPTY
77967: LIST
77968: LIST
77969: PUSH
77970: LD_INT 2
77972: PUSH
77973: LD_INT 0
77975: PUSH
77976: EMPTY
77977: LIST
77978: LIST
77979: PUSH
77980: LD_INT 2
77982: PUSH
77983: LD_INT 1
77985: PUSH
77986: EMPTY
77987: LIST
77988: LIST
77989: PUSH
77990: LD_INT 1
77992: PUSH
77993: LD_INT 2
77995: PUSH
77996: EMPTY
77997: LIST
77998: LIST
77999: PUSH
78000: LD_INT 0
78002: PUSH
78003: LD_INT 2
78005: PUSH
78006: EMPTY
78007: LIST
78008: LIST
78009: PUSH
78010: LD_INT 1
78012: NEG
78013: PUSH
78014: LD_INT 1
78016: PUSH
78017: EMPTY
78018: LIST
78019: LIST
78020: PUSH
78021: LD_INT 2
78023: NEG
78024: PUSH
78025: LD_INT 0
78027: PUSH
78028: EMPTY
78029: LIST
78030: LIST
78031: PUSH
78032: LD_INT 2
78034: NEG
78035: PUSH
78036: LD_INT 1
78038: NEG
78039: PUSH
78040: EMPTY
78041: LIST
78042: LIST
78043: PUSH
78044: LD_INT 1
78046: NEG
78047: PUSH
78048: LD_INT 3
78050: NEG
78051: PUSH
78052: EMPTY
78053: LIST
78054: LIST
78055: PUSH
78056: LD_INT 0
78058: PUSH
78059: LD_INT 3
78061: NEG
78062: PUSH
78063: EMPTY
78064: LIST
78065: LIST
78066: PUSH
78067: LD_INT 1
78069: PUSH
78070: LD_INT 2
78072: NEG
78073: PUSH
78074: EMPTY
78075: LIST
78076: LIST
78077: PUSH
78078: LD_INT 2
78080: PUSH
78081: LD_INT 1
78083: NEG
78084: PUSH
78085: EMPTY
78086: LIST
78087: LIST
78088: PUSH
78089: LD_INT 3
78091: PUSH
78092: LD_INT 0
78094: PUSH
78095: EMPTY
78096: LIST
78097: LIST
78098: PUSH
78099: LD_INT 3
78101: PUSH
78102: LD_INT 1
78104: PUSH
78105: EMPTY
78106: LIST
78107: LIST
78108: PUSH
78109: LD_INT 1
78111: PUSH
78112: LD_INT 3
78114: PUSH
78115: EMPTY
78116: LIST
78117: LIST
78118: PUSH
78119: LD_INT 0
78121: PUSH
78122: LD_INT 3
78124: PUSH
78125: EMPTY
78126: LIST
78127: LIST
78128: PUSH
78129: LD_INT 1
78131: NEG
78132: PUSH
78133: LD_INT 2
78135: PUSH
78136: EMPTY
78137: LIST
78138: LIST
78139: PUSH
78140: LD_INT 2
78142: NEG
78143: PUSH
78144: LD_INT 1
78146: PUSH
78147: EMPTY
78148: LIST
78149: LIST
78150: PUSH
78151: LD_INT 3
78153: NEG
78154: PUSH
78155: LD_INT 0
78157: PUSH
78158: EMPTY
78159: LIST
78160: LIST
78161: PUSH
78162: LD_INT 3
78164: NEG
78165: PUSH
78166: LD_INT 1
78168: NEG
78169: PUSH
78170: EMPTY
78171: LIST
78172: LIST
78173: PUSH
78174: EMPTY
78175: LIST
78176: LIST
78177: LIST
78178: LIST
78179: LIST
78180: LIST
78181: LIST
78182: LIST
78183: LIST
78184: LIST
78185: LIST
78186: LIST
78187: LIST
78188: LIST
78189: LIST
78190: LIST
78191: LIST
78192: LIST
78193: LIST
78194: LIST
78195: LIST
78196: LIST
78197: LIST
78198: LIST
78199: LIST
78200: LIST
78201: LIST
78202: LIST
78203: LIST
78204: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
78205: LD_ADDR_VAR 0 44
78209: PUSH
78210: LD_INT 0
78212: PUSH
78213: LD_INT 0
78215: PUSH
78216: EMPTY
78217: LIST
78218: LIST
78219: PUSH
78220: LD_INT 0
78222: PUSH
78223: LD_INT 1
78225: NEG
78226: PUSH
78227: EMPTY
78228: LIST
78229: LIST
78230: PUSH
78231: LD_INT 1
78233: PUSH
78234: LD_INT 0
78236: PUSH
78237: EMPTY
78238: LIST
78239: LIST
78240: PUSH
78241: LD_INT 1
78243: PUSH
78244: LD_INT 1
78246: PUSH
78247: EMPTY
78248: LIST
78249: LIST
78250: PUSH
78251: LD_INT 0
78253: PUSH
78254: LD_INT 1
78256: PUSH
78257: EMPTY
78258: LIST
78259: LIST
78260: PUSH
78261: LD_INT 1
78263: NEG
78264: PUSH
78265: LD_INT 0
78267: PUSH
78268: EMPTY
78269: LIST
78270: LIST
78271: PUSH
78272: LD_INT 1
78274: NEG
78275: PUSH
78276: LD_INT 1
78278: NEG
78279: PUSH
78280: EMPTY
78281: LIST
78282: LIST
78283: PUSH
78284: LD_INT 1
78286: NEG
78287: PUSH
78288: LD_INT 2
78290: NEG
78291: PUSH
78292: EMPTY
78293: LIST
78294: LIST
78295: PUSH
78296: LD_INT 1
78298: PUSH
78299: LD_INT 1
78301: NEG
78302: PUSH
78303: EMPTY
78304: LIST
78305: LIST
78306: PUSH
78307: LD_INT 2
78309: PUSH
78310: LD_INT 0
78312: PUSH
78313: EMPTY
78314: LIST
78315: LIST
78316: PUSH
78317: LD_INT 2
78319: PUSH
78320: LD_INT 1
78322: PUSH
78323: EMPTY
78324: LIST
78325: LIST
78326: PUSH
78327: LD_INT 2
78329: PUSH
78330: LD_INT 2
78332: PUSH
78333: EMPTY
78334: LIST
78335: LIST
78336: PUSH
78337: LD_INT 1
78339: PUSH
78340: LD_INT 2
78342: PUSH
78343: EMPTY
78344: LIST
78345: LIST
78346: PUSH
78347: LD_INT 1
78349: NEG
78350: PUSH
78351: LD_INT 1
78353: PUSH
78354: EMPTY
78355: LIST
78356: LIST
78357: PUSH
78358: LD_INT 2
78360: NEG
78361: PUSH
78362: LD_INT 0
78364: PUSH
78365: EMPTY
78366: LIST
78367: LIST
78368: PUSH
78369: LD_INT 2
78371: NEG
78372: PUSH
78373: LD_INT 1
78375: NEG
78376: PUSH
78377: EMPTY
78378: LIST
78379: LIST
78380: PUSH
78381: LD_INT 2
78383: NEG
78384: PUSH
78385: LD_INT 2
78387: NEG
78388: PUSH
78389: EMPTY
78390: LIST
78391: LIST
78392: PUSH
78393: LD_INT 2
78395: NEG
78396: PUSH
78397: LD_INT 3
78399: NEG
78400: PUSH
78401: EMPTY
78402: LIST
78403: LIST
78404: PUSH
78405: LD_INT 2
78407: PUSH
78408: LD_INT 1
78410: NEG
78411: PUSH
78412: EMPTY
78413: LIST
78414: LIST
78415: PUSH
78416: LD_INT 3
78418: PUSH
78419: LD_INT 0
78421: PUSH
78422: EMPTY
78423: LIST
78424: LIST
78425: PUSH
78426: LD_INT 3
78428: PUSH
78429: LD_INT 1
78431: PUSH
78432: EMPTY
78433: LIST
78434: LIST
78435: PUSH
78436: LD_INT 3
78438: PUSH
78439: LD_INT 2
78441: PUSH
78442: EMPTY
78443: LIST
78444: LIST
78445: PUSH
78446: LD_INT 3
78448: PUSH
78449: LD_INT 3
78451: PUSH
78452: EMPTY
78453: LIST
78454: LIST
78455: PUSH
78456: LD_INT 2
78458: PUSH
78459: LD_INT 3
78461: PUSH
78462: EMPTY
78463: LIST
78464: LIST
78465: PUSH
78466: LD_INT 2
78468: NEG
78469: PUSH
78470: LD_INT 1
78472: PUSH
78473: EMPTY
78474: LIST
78475: LIST
78476: PUSH
78477: LD_INT 3
78479: NEG
78480: PUSH
78481: LD_INT 0
78483: PUSH
78484: EMPTY
78485: LIST
78486: LIST
78487: PUSH
78488: LD_INT 3
78490: NEG
78491: PUSH
78492: LD_INT 1
78494: NEG
78495: PUSH
78496: EMPTY
78497: LIST
78498: LIST
78499: PUSH
78500: LD_INT 3
78502: NEG
78503: PUSH
78504: LD_INT 2
78506: NEG
78507: PUSH
78508: EMPTY
78509: LIST
78510: LIST
78511: PUSH
78512: LD_INT 3
78514: NEG
78515: PUSH
78516: LD_INT 3
78518: NEG
78519: PUSH
78520: EMPTY
78521: LIST
78522: LIST
78523: PUSH
78524: EMPTY
78525: LIST
78526: LIST
78527: LIST
78528: LIST
78529: LIST
78530: LIST
78531: LIST
78532: LIST
78533: LIST
78534: LIST
78535: LIST
78536: LIST
78537: LIST
78538: LIST
78539: LIST
78540: LIST
78541: LIST
78542: LIST
78543: LIST
78544: LIST
78545: LIST
78546: LIST
78547: LIST
78548: LIST
78549: LIST
78550: LIST
78551: LIST
78552: LIST
78553: LIST
78554: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
78555: LD_ADDR_VAR 0 45
78559: PUSH
78560: LD_INT 0
78562: PUSH
78563: LD_INT 0
78565: PUSH
78566: EMPTY
78567: LIST
78568: LIST
78569: PUSH
78570: LD_INT 0
78572: PUSH
78573: LD_INT 1
78575: NEG
78576: PUSH
78577: EMPTY
78578: LIST
78579: LIST
78580: PUSH
78581: LD_INT 1
78583: PUSH
78584: LD_INT 0
78586: PUSH
78587: EMPTY
78588: LIST
78589: LIST
78590: PUSH
78591: LD_INT 1
78593: PUSH
78594: LD_INT 1
78596: PUSH
78597: EMPTY
78598: LIST
78599: LIST
78600: PUSH
78601: LD_INT 0
78603: PUSH
78604: LD_INT 1
78606: PUSH
78607: EMPTY
78608: LIST
78609: LIST
78610: PUSH
78611: LD_INT 1
78613: NEG
78614: PUSH
78615: LD_INT 0
78617: PUSH
78618: EMPTY
78619: LIST
78620: LIST
78621: PUSH
78622: LD_INT 1
78624: NEG
78625: PUSH
78626: LD_INT 1
78628: NEG
78629: PUSH
78630: EMPTY
78631: LIST
78632: LIST
78633: PUSH
78634: LD_INT 1
78636: NEG
78637: PUSH
78638: LD_INT 2
78640: NEG
78641: PUSH
78642: EMPTY
78643: LIST
78644: LIST
78645: PUSH
78646: LD_INT 0
78648: PUSH
78649: LD_INT 2
78651: NEG
78652: PUSH
78653: EMPTY
78654: LIST
78655: LIST
78656: PUSH
78657: LD_INT 1
78659: PUSH
78660: LD_INT 1
78662: NEG
78663: PUSH
78664: EMPTY
78665: LIST
78666: LIST
78667: PUSH
78668: LD_INT 2
78670: PUSH
78671: LD_INT 1
78673: PUSH
78674: EMPTY
78675: LIST
78676: LIST
78677: PUSH
78678: LD_INT 2
78680: PUSH
78681: LD_INT 2
78683: PUSH
78684: EMPTY
78685: LIST
78686: LIST
78687: PUSH
78688: LD_INT 1
78690: PUSH
78691: LD_INT 2
78693: PUSH
78694: EMPTY
78695: LIST
78696: LIST
78697: PUSH
78698: LD_INT 0
78700: PUSH
78701: LD_INT 2
78703: PUSH
78704: EMPTY
78705: LIST
78706: LIST
78707: PUSH
78708: LD_INT 1
78710: NEG
78711: PUSH
78712: LD_INT 1
78714: PUSH
78715: EMPTY
78716: LIST
78717: LIST
78718: PUSH
78719: LD_INT 2
78721: NEG
78722: PUSH
78723: LD_INT 1
78725: NEG
78726: PUSH
78727: EMPTY
78728: LIST
78729: LIST
78730: PUSH
78731: LD_INT 2
78733: NEG
78734: PUSH
78735: LD_INT 2
78737: NEG
78738: PUSH
78739: EMPTY
78740: LIST
78741: LIST
78742: PUSH
78743: LD_INT 2
78745: NEG
78746: PUSH
78747: LD_INT 3
78749: NEG
78750: PUSH
78751: EMPTY
78752: LIST
78753: LIST
78754: PUSH
78755: LD_INT 1
78757: NEG
78758: PUSH
78759: LD_INT 3
78761: NEG
78762: PUSH
78763: EMPTY
78764: LIST
78765: LIST
78766: PUSH
78767: LD_INT 0
78769: PUSH
78770: LD_INT 3
78772: NEG
78773: PUSH
78774: EMPTY
78775: LIST
78776: LIST
78777: PUSH
78778: LD_INT 1
78780: PUSH
78781: LD_INT 2
78783: NEG
78784: PUSH
78785: EMPTY
78786: LIST
78787: LIST
78788: PUSH
78789: LD_INT 3
78791: PUSH
78792: LD_INT 2
78794: PUSH
78795: EMPTY
78796: LIST
78797: LIST
78798: PUSH
78799: LD_INT 3
78801: PUSH
78802: LD_INT 3
78804: PUSH
78805: EMPTY
78806: LIST
78807: LIST
78808: PUSH
78809: LD_INT 2
78811: PUSH
78812: LD_INT 3
78814: PUSH
78815: EMPTY
78816: LIST
78817: LIST
78818: PUSH
78819: LD_INT 1
78821: PUSH
78822: LD_INT 3
78824: PUSH
78825: EMPTY
78826: LIST
78827: LIST
78828: PUSH
78829: LD_INT 0
78831: PUSH
78832: LD_INT 3
78834: PUSH
78835: EMPTY
78836: LIST
78837: LIST
78838: PUSH
78839: LD_INT 1
78841: NEG
78842: PUSH
78843: LD_INT 2
78845: PUSH
78846: EMPTY
78847: LIST
78848: LIST
78849: PUSH
78850: LD_INT 3
78852: NEG
78853: PUSH
78854: LD_INT 2
78856: NEG
78857: PUSH
78858: EMPTY
78859: LIST
78860: LIST
78861: PUSH
78862: LD_INT 3
78864: NEG
78865: PUSH
78866: LD_INT 3
78868: NEG
78869: PUSH
78870: EMPTY
78871: LIST
78872: LIST
78873: PUSH
78874: EMPTY
78875: LIST
78876: LIST
78877: LIST
78878: LIST
78879: LIST
78880: LIST
78881: LIST
78882: LIST
78883: LIST
78884: LIST
78885: LIST
78886: LIST
78887: LIST
78888: LIST
78889: LIST
78890: LIST
78891: LIST
78892: LIST
78893: LIST
78894: LIST
78895: LIST
78896: LIST
78897: LIST
78898: LIST
78899: LIST
78900: LIST
78901: LIST
78902: LIST
78903: LIST
78904: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
78905: LD_ADDR_VAR 0 46
78909: PUSH
78910: LD_INT 0
78912: PUSH
78913: LD_INT 0
78915: PUSH
78916: EMPTY
78917: LIST
78918: LIST
78919: PUSH
78920: LD_INT 0
78922: PUSH
78923: LD_INT 1
78925: NEG
78926: PUSH
78927: EMPTY
78928: LIST
78929: LIST
78930: PUSH
78931: LD_INT 1
78933: PUSH
78934: LD_INT 0
78936: PUSH
78937: EMPTY
78938: LIST
78939: LIST
78940: PUSH
78941: LD_INT 1
78943: PUSH
78944: LD_INT 1
78946: PUSH
78947: EMPTY
78948: LIST
78949: LIST
78950: PUSH
78951: LD_INT 0
78953: PUSH
78954: LD_INT 1
78956: PUSH
78957: EMPTY
78958: LIST
78959: LIST
78960: PUSH
78961: LD_INT 1
78963: NEG
78964: PUSH
78965: LD_INT 0
78967: PUSH
78968: EMPTY
78969: LIST
78970: LIST
78971: PUSH
78972: LD_INT 1
78974: NEG
78975: PUSH
78976: LD_INT 1
78978: NEG
78979: PUSH
78980: EMPTY
78981: LIST
78982: LIST
78983: PUSH
78984: LD_INT 1
78986: NEG
78987: PUSH
78988: LD_INT 2
78990: NEG
78991: PUSH
78992: EMPTY
78993: LIST
78994: LIST
78995: PUSH
78996: LD_INT 0
78998: PUSH
78999: LD_INT 2
79001: NEG
79002: PUSH
79003: EMPTY
79004: LIST
79005: LIST
79006: PUSH
79007: LD_INT 1
79009: PUSH
79010: LD_INT 1
79012: NEG
79013: PUSH
79014: EMPTY
79015: LIST
79016: LIST
79017: PUSH
79018: LD_INT 2
79020: PUSH
79021: LD_INT 0
79023: PUSH
79024: EMPTY
79025: LIST
79026: LIST
79027: PUSH
79028: LD_INT 2
79030: PUSH
79031: LD_INT 1
79033: PUSH
79034: EMPTY
79035: LIST
79036: LIST
79037: PUSH
79038: LD_INT 1
79040: PUSH
79041: LD_INT 2
79043: PUSH
79044: EMPTY
79045: LIST
79046: LIST
79047: PUSH
79048: LD_INT 0
79050: PUSH
79051: LD_INT 2
79053: PUSH
79054: EMPTY
79055: LIST
79056: LIST
79057: PUSH
79058: LD_INT 1
79060: NEG
79061: PUSH
79062: LD_INT 1
79064: PUSH
79065: EMPTY
79066: LIST
79067: LIST
79068: PUSH
79069: LD_INT 2
79071: NEG
79072: PUSH
79073: LD_INT 0
79075: PUSH
79076: EMPTY
79077: LIST
79078: LIST
79079: PUSH
79080: LD_INT 2
79082: NEG
79083: PUSH
79084: LD_INT 1
79086: NEG
79087: PUSH
79088: EMPTY
79089: LIST
79090: LIST
79091: PUSH
79092: LD_INT 1
79094: NEG
79095: PUSH
79096: LD_INT 3
79098: NEG
79099: PUSH
79100: EMPTY
79101: LIST
79102: LIST
79103: PUSH
79104: LD_INT 0
79106: PUSH
79107: LD_INT 3
79109: NEG
79110: PUSH
79111: EMPTY
79112: LIST
79113: LIST
79114: PUSH
79115: LD_INT 1
79117: PUSH
79118: LD_INT 2
79120: NEG
79121: PUSH
79122: EMPTY
79123: LIST
79124: LIST
79125: PUSH
79126: LD_INT 2
79128: PUSH
79129: LD_INT 1
79131: NEG
79132: PUSH
79133: EMPTY
79134: LIST
79135: LIST
79136: PUSH
79137: LD_INT 3
79139: PUSH
79140: LD_INT 0
79142: PUSH
79143: EMPTY
79144: LIST
79145: LIST
79146: PUSH
79147: LD_INT 3
79149: PUSH
79150: LD_INT 1
79152: PUSH
79153: EMPTY
79154: LIST
79155: LIST
79156: PUSH
79157: LD_INT 1
79159: PUSH
79160: LD_INT 3
79162: PUSH
79163: EMPTY
79164: LIST
79165: LIST
79166: PUSH
79167: LD_INT 0
79169: PUSH
79170: LD_INT 3
79172: PUSH
79173: EMPTY
79174: LIST
79175: LIST
79176: PUSH
79177: LD_INT 1
79179: NEG
79180: PUSH
79181: LD_INT 2
79183: PUSH
79184: EMPTY
79185: LIST
79186: LIST
79187: PUSH
79188: LD_INT 2
79190: NEG
79191: PUSH
79192: LD_INT 1
79194: PUSH
79195: EMPTY
79196: LIST
79197: LIST
79198: PUSH
79199: LD_INT 3
79201: NEG
79202: PUSH
79203: LD_INT 0
79205: PUSH
79206: EMPTY
79207: LIST
79208: LIST
79209: PUSH
79210: LD_INT 3
79212: NEG
79213: PUSH
79214: LD_INT 1
79216: NEG
79217: PUSH
79218: EMPTY
79219: LIST
79220: LIST
79221: PUSH
79222: EMPTY
79223: LIST
79224: LIST
79225: LIST
79226: LIST
79227: LIST
79228: LIST
79229: LIST
79230: LIST
79231: LIST
79232: LIST
79233: LIST
79234: LIST
79235: LIST
79236: LIST
79237: LIST
79238: LIST
79239: LIST
79240: LIST
79241: LIST
79242: LIST
79243: LIST
79244: LIST
79245: LIST
79246: LIST
79247: LIST
79248: LIST
79249: LIST
79250: LIST
79251: LIST
79252: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79253: LD_ADDR_VAR 0 47
79257: PUSH
79258: LD_INT 0
79260: PUSH
79261: LD_INT 0
79263: PUSH
79264: EMPTY
79265: LIST
79266: LIST
79267: PUSH
79268: LD_INT 0
79270: PUSH
79271: LD_INT 1
79273: NEG
79274: PUSH
79275: EMPTY
79276: LIST
79277: LIST
79278: PUSH
79279: LD_INT 1
79281: PUSH
79282: LD_INT 0
79284: PUSH
79285: EMPTY
79286: LIST
79287: LIST
79288: PUSH
79289: LD_INT 1
79291: PUSH
79292: LD_INT 1
79294: PUSH
79295: EMPTY
79296: LIST
79297: LIST
79298: PUSH
79299: LD_INT 0
79301: PUSH
79302: LD_INT 1
79304: PUSH
79305: EMPTY
79306: LIST
79307: LIST
79308: PUSH
79309: LD_INT 1
79311: NEG
79312: PUSH
79313: LD_INT 0
79315: PUSH
79316: EMPTY
79317: LIST
79318: LIST
79319: PUSH
79320: LD_INT 1
79322: NEG
79323: PUSH
79324: LD_INT 1
79326: NEG
79327: PUSH
79328: EMPTY
79329: LIST
79330: LIST
79331: PUSH
79332: LD_INT 1
79334: NEG
79335: PUSH
79336: LD_INT 2
79338: NEG
79339: PUSH
79340: EMPTY
79341: LIST
79342: LIST
79343: PUSH
79344: LD_INT 0
79346: PUSH
79347: LD_INT 2
79349: NEG
79350: PUSH
79351: EMPTY
79352: LIST
79353: LIST
79354: PUSH
79355: LD_INT 1
79357: PUSH
79358: LD_INT 1
79360: NEG
79361: PUSH
79362: EMPTY
79363: LIST
79364: LIST
79365: PUSH
79366: LD_INT 2
79368: NEG
79369: PUSH
79370: LD_INT 1
79372: NEG
79373: PUSH
79374: EMPTY
79375: LIST
79376: LIST
79377: PUSH
79378: LD_INT 2
79380: NEG
79381: PUSH
79382: LD_INT 2
79384: NEG
79385: PUSH
79386: EMPTY
79387: LIST
79388: LIST
79389: PUSH
79390: EMPTY
79391: LIST
79392: LIST
79393: LIST
79394: LIST
79395: LIST
79396: LIST
79397: LIST
79398: LIST
79399: LIST
79400: LIST
79401: LIST
79402: LIST
79403: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
79404: LD_ADDR_VAR 0 48
79408: PUSH
79409: LD_INT 0
79411: PUSH
79412: LD_INT 0
79414: PUSH
79415: EMPTY
79416: LIST
79417: LIST
79418: PUSH
79419: LD_INT 0
79421: PUSH
79422: LD_INT 1
79424: NEG
79425: PUSH
79426: EMPTY
79427: LIST
79428: LIST
79429: PUSH
79430: LD_INT 1
79432: PUSH
79433: LD_INT 0
79435: PUSH
79436: EMPTY
79437: LIST
79438: LIST
79439: PUSH
79440: LD_INT 1
79442: PUSH
79443: LD_INT 1
79445: PUSH
79446: EMPTY
79447: LIST
79448: LIST
79449: PUSH
79450: LD_INT 0
79452: PUSH
79453: LD_INT 1
79455: PUSH
79456: EMPTY
79457: LIST
79458: LIST
79459: PUSH
79460: LD_INT 1
79462: NEG
79463: PUSH
79464: LD_INT 0
79466: PUSH
79467: EMPTY
79468: LIST
79469: LIST
79470: PUSH
79471: LD_INT 1
79473: NEG
79474: PUSH
79475: LD_INT 1
79477: NEG
79478: PUSH
79479: EMPTY
79480: LIST
79481: LIST
79482: PUSH
79483: LD_INT 1
79485: NEG
79486: PUSH
79487: LD_INT 2
79489: NEG
79490: PUSH
79491: EMPTY
79492: LIST
79493: LIST
79494: PUSH
79495: LD_INT 0
79497: PUSH
79498: LD_INT 2
79500: NEG
79501: PUSH
79502: EMPTY
79503: LIST
79504: LIST
79505: PUSH
79506: LD_INT 1
79508: PUSH
79509: LD_INT 1
79511: NEG
79512: PUSH
79513: EMPTY
79514: LIST
79515: LIST
79516: PUSH
79517: LD_INT 2
79519: PUSH
79520: LD_INT 0
79522: PUSH
79523: EMPTY
79524: LIST
79525: LIST
79526: PUSH
79527: LD_INT 2
79529: PUSH
79530: LD_INT 1
79532: PUSH
79533: EMPTY
79534: LIST
79535: LIST
79536: PUSH
79537: EMPTY
79538: LIST
79539: LIST
79540: LIST
79541: LIST
79542: LIST
79543: LIST
79544: LIST
79545: LIST
79546: LIST
79547: LIST
79548: LIST
79549: LIST
79550: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
79551: LD_ADDR_VAR 0 49
79555: PUSH
79556: LD_INT 0
79558: PUSH
79559: LD_INT 0
79561: PUSH
79562: EMPTY
79563: LIST
79564: LIST
79565: PUSH
79566: LD_INT 0
79568: PUSH
79569: LD_INT 1
79571: NEG
79572: PUSH
79573: EMPTY
79574: LIST
79575: LIST
79576: PUSH
79577: LD_INT 1
79579: PUSH
79580: LD_INT 0
79582: PUSH
79583: EMPTY
79584: LIST
79585: LIST
79586: PUSH
79587: LD_INT 1
79589: PUSH
79590: LD_INT 1
79592: PUSH
79593: EMPTY
79594: LIST
79595: LIST
79596: PUSH
79597: LD_INT 0
79599: PUSH
79600: LD_INT 1
79602: PUSH
79603: EMPTY
79604: LIST
79605: LIST
79606: PUSH
79607: LD_INT 1
79609: NEG
79610: PUSH
79611: LD_INT 0
79613: PUSH
79614: EMPTY
79615: LIST
79616: LIST
79617: PUSH
79618: LD_INT 1
79620: NEG
79621: PUSH
79622: LD_INT 1
79624: NEG
79625: PUSH
79626: EMPTY
79627: LIST
79628: LIST
79629: PUSH
79630: LD_INT 1
79632: PUSH
79633: LD_INT 1
79635: NEG
79636: PUSH
79637: EMPTY
79638: LIST
79639: LIST
79640: PUSH
79641: LD_INT 2
79643: PUSH
79644: LD_INT 0
79646: PUSH
79647: EMPTY
79648: LIST
79649: LIST
79650: PUSH
79651: LD_INT 2
79653: PUSH
79654: LD_INT 1
79656: PUSH
79657: EMPTY
79658: LIST
79659: LIST
79660: PUSH
79661: LD_INT 2
79663: PUSH
79664: LD_INT 2
79666: PUSH
79667: EMPTY
79668: LIST
79669: LIST
79670: PUSH
79671: LD_INT 1
79673: PUSH
79674: LD_INT 2
79676: PUSH
79677: EMPTY
79678: LIST
79679: LIST
79680: PUSH
79681: EMPTY
79682: LIST
79683: LIST
79684: LIST
79685: LIST
79686: LIST
79687: LIST
79688: LIST
79689: LIST
79690: LIST
79691: LIST
79692: LIST
79693: LIST
79694: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
79695: LD_ADDR_VAR 0 50
79699: PUSH
79700: LD_INT 0
79702: PUSH
79703: LD_INT 0
79705: PUSH
79706: EMPTY
79707: LIST
79708: LIST
79709: PUSH
79710: LD_INT 0
79712: PUSH
79713: LD_INT 1
79715: NEG
79716: PUSH
79717: EMPTY
79718: LIST
79719: LIST
79720: PUSH
79721: LD_INT 1
79723: PUSH
79724: LD_INT 0
79726: PUSH
79727: EMPTY
79728: LIST
79729: LIST
79730: PUSH
79731: LD_INT 1
79733: PUSH
79734: LD_INT 1
79736: PUSH
79737: EMPTY
79738: LIST
79739: LIST
79740: PUSH
79741: LD_INT 0
79743: PUSH
79744: LD_INT 1
79746: PUSH
79747: EMPTY
79748: LIST
79749: LIST
79750: PUSH
79751: LD_INT 1
79753: NEG
79754: PUSH
79755: LD_INT 0
79757: PUSH
79758: EMPTY
79759: LIST
79760: LIST
79761: PUSH
79762: LD_INT 1
79764: NEG
79765: PUSH
79766: LD_INT 1
79768: NEG
79769: PUSH
79770: EMPTY
79771: LIST
79772: LIST
79773: PUSH
79774: LD_INT 2
79776: PUSH
79777: LD_INT 1
79779: PUSH
79780: EMPTY
79781: LIST
79782: LIST
79783: PUSH
79784: LD_INT 2
79786: PUSH
79787: LD_INT 2
79789: PUSH
79790: EMPTY
79791: LIST
79792: LIST
79793: PUSH
79794: LD_INT 1
79796: PUSH
79797: LD_INT 2
79799: PUSH
79800: EMPTY
79801: LIST
79802: LIST
79803: PUSH
79804: LD_INT 0
79806: PUSH
79807: LD_INT 2
79809: PUSH
79810: EMPTY
79811: LIST
79812: LIST
79813: PUSH
79814: LD_INT 1
79816: NEG
79817: PUSH
79818: LD_INT 1
79820: PUSH
79821: EMPTY
79822: LIST
79823: LIST
79824: PUSH
79825: EMPTY
79826: LIST
79827: LIST
79828: LIST
79829: LIST
79830: LIST
79831: LIST
79832: LIST
79833: LIST
79834: LIST
79835: LIST
79836: LIST
79837: LIST
79838: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
79839: LD_ADDR_VAR 0 51
79843: PUSH
79844: LD_INT 0
79846: PUSH
79847: LD_INT 0
79849: PUSH
79850: EMPTY
79851: LIST
79852: LIST
79853: PUSH
79854: LD_INT 0
79856: PUSH
79857: LD_INT 1
79859: NEG
79860: PUSH
79861: EMPTY
79862: LIST
79863: LIST
79864: PUSH
79865: LD_INT 1
79867: PUSH
79868: LD_INT 0
79870: PUSH
79871: EMPTY
79872: LIST
79873: LIST
79874: PUSH
79875: LD_INT 1
79877: PUSH
79878: LD_INT 1
79880: PUSH
79881: EMPTY
79882: LIST
79883: LIST
79884: PUSH
79885: LD_INT 0
79887: PUSH
79888: LD_INT 1
79890: PUSH
79891: EMPTY
79892: LIST
79893: LIST
79894: PUSH
79895: LD_INT 1
79897: NEG
79898: PUSH
79899: LD_INT 0
79901: PUSH
79902: EMPTY
79903: LIST
79904: LIST
79905: PUSH
79906: LD_INT 1
79908: NEG
79909: PUSH
79910: LD_INT 1
79912: NEG
79913: PUSH
79914: EMPTY
79915: LIST
79916: LIST
79917: PUSH
79918: LD_INT 1
79920: PUSH
79921: LD_INT 2
79923: PUSH
79924: EMPTY
79925: LIST
79926: LIST
79927: PUSH
79928: LD_INT 0
79930: PUSH
79931: LD_INT 2
79933: PUSH
79934: EMPTY
79935: LIST
79936: LIST
79937: PUSH
79938: LD_INT 1
79940: NEG
79941: PUSH
79942: LD_INT 1
79944: PUSH
79945: EMPTY
79946: LIST
79947: LIST
79948: PUSH
79949: LD_INT 2
79951: NEG
79952: PUSH
79953: LD_INT 0
79955: PUSH
79956: EMPTY
79957: LIST
79958: LIST
79959: PUSH
79960: LD_INT 2
79962: NEG
79963: PUSH
79964: LD_INT 1
79966: NEG
79967: PUSH
79968: EMPTY
79969: LIST
79970: LIST
79971: PUSH
79972: EMPTY
79973: LIST
79974: LIST
79975: LIST
79976: LIST
79977: LIST
79978: LIST
79979: LIST
79980: LIST
79981: LIST
79982: LIST
79983: LIST
79984: LIST
79985: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79986: LD_ADDR_VAR 0 52
79990: PUSH
79991: LD_INT 0
79993: PUSH
79994: LD_INT 0
79996: PUSH
79997: EMPTY
79998: LIST
79999: LIST
80000: PUSH
80001: LD_INT 0
80003: PUSH
80004: LD_INT 1
80006: NEG
80007: PUSH
80008: EMPTY
80009: LIST
80010: LIST
80011: PUSH
80012: LD_INT 1
80014: PUSH
80015: LD_INT 0
80017: PUSH
80018: EMPTY
80019: LIST
80020: LIST
80021: PUSH
80022: LD_INT 1
80024: PUSH
80025: LD_INT 1
80027: PUSH
80028: EMPTY
80029: LIST
80030: LIST
80031: PUSH
80032: LD_INT 0
80034: PUSH
80035: LD_INT 1
80037: PUSH
80038: EMPTY
80039: LIST
80040: LIST
80041: PUSH
80042: LD_INT 1
80044: NEG
80045: PUSH
80046: LD_INT 0
80048: PUSH
80049: EMPTY
80050: LIST
80051: LIST
80052: PUSH
80053: LD_INT 1
80055: NEG
80056: PUSH
80057: LD_INT 1
80059: NEG
80060: PUSH
80061: EMPTY
80062: LIST
80063: LIST
80064: PUSH
80065: LD_INT 1
80067: NEG
80068: PUSH
80069: LD_INT 2
80071: NEG
80072: PUSH
80073: EMPTY
80074: LIST
80075: LIST
80076: PUSH
80077: LD_INT 1
80079: NEG
80080: PUSH
80081: LD_INT 1
80083: PUSH
80084: EMPTY
80085: LIST
80086: LIST
80087: PUSH
80088: LD_INT 2
80090: NEG
80091: PUSH
80092: LD_INT 0
80094: PUSH
80095: EMPTY
80096: LIST
80097: LIST
80098: PUSH
80099: LD_INT 2
80101: NEG
80102: PUSH
80103: LD_INT 1
80105: NEG
80106: PUSH
80107: EMPTY
80108: LIST
80109: LIST
80110: PUSH
80111: LD_INT 2
80113: NEG
80114: PUSH
80115: LD_INT 2
80117: NEG
80118: PUSH
80119: EMPTY
80120: LIST
80121: LIST
80122: PUSH
80123: EMPTY
80124: LIST
80125: LIST
80126: LIST
80127: LIST
80128: LIST
80129: LIST
80130: LIST
80131: LIST
80132: LIST
80133: LIST
80134: LIST
80135: LIST
80136: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
80137: LD_ADDR_VAR 0 53
80141: PUSH
80142: LD_INT 0
80144: PUSH
80145: LD_INT 0
80147: PUSH
80148: EMPTY
80149: LIST
80150: LIST
80151: PUSH
80152: LD_INT 0
80154: PUSH
80155: LD_INT 1
80157: NEG
80158: PUSH
80159: EMPTY
80160: LIST
80161: LIST
80162: PUSH
80163: LD_INT 1
80165: PUSH
80166: LD_INT 0
80168: PUSH
80169: EMPTY
80170: LIST
80171: LIST
80172: PUSH
80173: LD_INT 1
80175: PUSH
80176: LD_INT 1
80178: PUSH
80179: EMPTY
80180: LIST
80181: LIST
80182: PUSH
80183: LD_INT 0
80185: PUSH
80186: LD_INT 1
80188: PUSH
80189: EMPTY
80190: LIST
80191: LIST
80192: PUSH
80193: LD_INT 1
80195: NEG
80196: PUSH
80197: LD_INT 0
80199: PUSH
80200: EMPTY
80201: LIST
80202: LIST
80203: PUSH
80204: LD_INT 1
80206: NEG
80207: PUSH
80208: LD_INT 1
80210: NEG
80211: PUSH
80212: EMPTY
80213: LIST
80214: LIST
80215: PUSH
80216: LD_INT 1
80218: NEG
80219: PUSH
80220: LD_INT 2
80222: NEG
80223: PUSH
80224: EMPTY
80225: LIST
80226: LIST
80227: PUSH
80228: LD_INT 0
80230: PUSH
80231: LD_INT 2
80233: NEG
80234: PUSH
80235: EMPTY
80236: LIST
80237: LIST
80238: PUSH
80239: LD_INT 1
80241: PUSH
80242: LD_INT 1
80244: NEG
80245: PUSH
80246: EMPTY
80247: LIST
80248: LIST
80249: PUSH
80250: LD_INT 2
80252: PUSH
80253: LD_INT 0
80255: PUSH
80256: EMPTY
80257: LIST
80258: LIST
80259: PUSH
80260: LD_INT 2
80262: PUSH
80263: LD_INT 1
80265: PUSH
80266: EMPTY
80267: LIST
80268: LIST
80269: PUSH
80270: LD_INT 2
80272: PUSH
80273: LD_INT 2
80275: PUSH
80276: EMPTY
80277: LIST
80278: LIST
80279: PUSH
80280: LD_INT 1
80282: PUSH
80283: LD_INT 2
80285: PUSH
80286: EMPTY
80287: LIST
80288: LIST
80289: PUSH
80290: LD_INT 0
80292: PUSH
80293: LD_INT 2
80295: PUSH
80296: EMPTY
80297: LIST
80298: LIST
80299: PUSH
80300: LD_INT 1
80302: NEG
80303: PUSH
80304: LD_INT 1
80306: PUSH
80307: EMPTY
80308: LIST
80309: LIST
80310: PUSH
80311: LD_INT 2
80313: NEG
80314: PUSH
80315: LD_INT 0
80317: PUSH
80318: EMPTY
80319: LIST
80320: LIST
80321: PUSH
80322: LD_INT 2
80324: NEG
80325: PUSH
80326: LD_INT 1
80328: NEG
80329: PUSH
80330: EMPTY
80331: LIST
80332: LIST
80333: PUSH
80334: LD_INT 2
80336: NEG
80337: PUSH
80338: LD_INT 2
80340: NEG
80341: PUSH
80342: EMPTY
80343: LIST
80344: LIST
80345: PUSH
80346: EMPTY
80347: LIST
80348: LIST
80349: LIST
80350: LIST
80351: LIST
80352: LIST
80353: LIST
80354: LIST
80355: LIST
80356: LIST
80357: LIST
80358: LIST
80359: LIST
80360: LIST
80361: LIST
80362: LIST
80363: LIST
80364: LIST
80365: LIST
80366: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
80367: LD_ADDR_VAR 0 54
80371: PUSH
80372: LD_INT 0
80374: PUSH
80375: LD_INT 0
80377: PUSH
80378: EMPTY
80379: LIST
80380: LIST
80381: PUSH
80382: LD_INT 0
80384: PUSH
80385: LD_INT 1
80387: NEG
80388: PUSH
80389: EMPTY
80390: LIST
80391: LIST
80392: PUSH
80393: LD_INT 1
80395: PUSH
80396: LD_INT 0
80398: PUSH
80399: EMPTY
80400: LIST
80401: LIST
80402: PUSH
80403: LD_INT 1
80405: PUSH
80406: LD_INT 1
80408: PUSH
80409: EMPTY
80410: LIST
80411: LIST
80412: PUSH
80413: LD_INT 0
80415: PUSH
80416: LD_INT 1
80418: PUSH
80419: EMPTY
80420: LIST
80421: LIST
80422: PUSH
80423: LD_INT 1
80425: NEG
80426: PUSH
80427: LD_INT 0
80429: PUSH
80430: EMPTY
80431: LIST
80432: LIST
80433: PUSH
80434: LD_INT 1
80436: NEG
80437: PUSH
80438: LD_INT 1
80440: NEG
80441: PUSH
80442: EMPTY
80443: LIST
80444: LIST
80445: PUSH
80446: LD_INT 1
80448: NEG
80449: PUSH
80450: LD_INT 2
80452: NEG
80453: PUSH
80454: EMPTY
80455: LIST
80456: LIST
80457: PUSH
80458: LD_INT 0
80460: PUSH
80461: LD_INT 2
80463: NEG
80464: PUSH
80465: EMPTY
80466: LIST
80467: LIST
80468: PUSH
80469: LD_INT 1
80471: PUSH
80472: LD_INT 1
80474: NEG
80475: PUSH
80476: EMPTY
80477: LIST
80478: LIST
80479: PUSH
80480: LD_INT 2
80482: PUSH
80483: LD_INT 0
80485: PUSH
80486: EMPTY
80487: LIST
80488: LIST
80489: PUSH
80490: LD_INT 2
80492: PUSH
80493: LD_INT 1
80495: PUSH
80496: EMPTY
80497: LIST
80498: LIST
80499: PUSH
80500: LD_INT 2
80502: PUSH
80503: LD_INT 2
80505: PUSH
80506: EMPTY
80507: LIST
80508: LIST
80509: PUSH
80510: LD_INT 1
80512: PUSH
80513: LD_INT 2
80515: PUSH
80516: EMPTY
80517: LIST
80518: LIST
80519: PUSH
80520: LD_INT 0
80522: PUSH
80523: LD_INT 2
80525: PUSH
80526: EMPTY
80527: LIST
80528: LIST
80529: PUSH
80530: LD_INT 1
80532: NEG
80533: PUSH
80534: LD_INT 1
80536: PUSH
80537: EMPTY
80538: LIST
80539: LIST
80540: PUSH
80541: LD_INT 2
80543: NEG
80544: PUSH
80545: LD_INT 0
80547: PUSH
80548: EMPTY
80549: LIST
80550: LIST
80551: PUSH
80552: LD_INT 2
80554: NEG
80555: PUSH
80556: LD_INT 1
80558: NEG
80559: PUSH
80560: EMPTY
80561: LIST
80562: LIST
80563: PUSH
80564: LD_INT 2
80566: NEG
80567: PUSH
80568: LD_INT 2
80570: NEG
80571: PUSH
80572: EMPTY
80573: LIST
80574: LIST
80575: PUSH
80576: EMPTY
80577: LIST
80578: LIST
80579: LIST
80580: LIST
80581: LIST
80582: LIST
80583: LIST
80584: LIST
80585: LIST
80586: LIST
80587: LIST
80588: LIST
80589: LIST
80590: LIST
80591: LIST
80592: LIST
80593: LIST
80594: LIST
80595: LIST
80596: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
80597: LD_ADDR_VAR 0 55
80601: PUSH
80602: LD_INT 0
80604: PUSH
80605: LD_INT 0
80607: PUSH
80608: EMPTY
80609: LIST
80610: LIST
80611: PUSH
80612: LD_INT 0
80614: PUSH
80615: LD_INT 1
80617: NEG
80618: PUSH
80619: EMPTY
80620: LIST
80621: LIST
80622: PUSH
80623: LD_INT 1
80625: PUSH
80626: LD_INT 0
80628: PUSH
80629: EMPTY
80630: LIST
80631: LIST
80632: PUSH
80633: LD_INT 1
80635: PUSH
80636: LD_INT 1
80638: PUSH
80639: EMPTY
80640: LIST
80641: LIST
80642: PUSH
80643: LD_INT 0
80645: PUSH
80646: LD_INT 1
80648: PUSH
80649: EMPTY
80650: LIST
80651: LIST
80652: PUSH
80653: LD_INT 1
80655: NEG
80656: PUSH
80657: LD_INT 0
80659: PUSH
80660: EMPTY
80661: LIST
80662: LIST
80663: PUSH
80664: LD_INT 1
80666: NEG
80667: PUSH
80668: LD_INT 1
80670: NEG
80671: PUSH
80672: EMPTY
80673: LIST
80674: LIST
80675: PUSH
80676: LD_INT 1
80678: NEG
80679: PUSH
80680: LD_INT 2
80682: NEG
80683: PUSH
80684: EMPTY
80685: LIST
80686: LIST
80687: PUSH
80688: LD_INT 0
80690: PUSH
80691: LD_INT 2
80693: NEG
80694: PUSH
80695: EMPTY
80696: LIST
80697: LIST
80698: PUSH
80699: LD_INT 1
80701: PUSH
80702: LD_INT 1
80704: NEG
80705: PUSH
80706: EMPTY
80707: LIST
80708: LIST
80709: PUSH
80710: LD_INT 2
80712: PUSH
80713: LD_INT 0
80715: PUSH
80716: EMPTY
80717: LIST
80718: LIST
80719: PUSH
80720: LD_INT 2
80722: PUSH
80723: LD_INT 1
80725: PUSH
80726: EMPTY
80727: LIST
80728: LIST
80729: PUSH
80730: LD_INT 2
80732: PUSH
80733: LD_INT 2
80735: PUSH
80736: EMPTY
80737: LIST
80738: LIST
80739: PUSH
80740: LD_INT 1
80742: PUSH
80743: LD_INT 2
80745: PUSH
80746: EMPTY
80747: LIST
80748: LIST
80749: PUSH
80750: LD_INT 0
80752: PUSH
80753: LD_INT 2
80755: PUSH
80756: EMPTY
80757: LIST
80758: LIST
80759: PUSH
80760: LD_INT 1
80762: NEG
80763: PUSH
80764: LD_INT 1
80766: PUSH
80767: EMPTY
80768: LIST
80769: LIST
80770: PUSH
80771: LD_INT 2
80773: NEG
80774: PUSH
80775: LD_INT 0
80777: PUSH
80778: EMPTY
80779: LIST
80780: LIST
80781: PUSH
80782: LD_INT 2
80784: NEG
80785: PUSH
80786: LD_INT 1
80788: NEG
80789: PUSH
80790: EMPTY
80791: LIST
80792: LIST
80793: PUSH
80794: LD_INT 2
80796: NEG
80797: PUSH
80798: LD_INT 2
80800: NEG
80801: PUSH
80802: EMPTY
80803: LIST
80804: LIST
80805: PUSH
80806: EMPTY
80807: LIST
80808: LIST
80809: LIST
80810: LIST
80811: LIST
80812: LIST
80813: LIST
80814: LIST
80815: LIST
80816: LIST
80817: LIST
80818: LIST
80819: LIST
80820: LIST
80821: LIST
80822: LIST
80823: LIST
80824: LIST
80825: LIST
80826: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
80827: LD_ADDR_VAR 0 56
80831: PUSH
80832: LD_INT 0
80834: PUSH
80835: LD_INT 0
80837: PUSH
80838: EMPTY
80839: LIST
80840: LIST
80841: PUSH
80842: LD_INT 0
80844: PUSH
80845: LD_INT 1
80847: NEG
80848: PUSH
80849: EMPTY
80850: LIST
80851: LIST
80852: PUSH
80853: LD_INT 1
80855: PUSH
80856: LD_INT 0
80858: PUSH
80859: EMPTY
80860: LIST
80861: LIST
80862: PUSH
80863: LD_INT 1
80865: PUSH
80866: LD_INT 1
80868: PUSH
80869: EMPTY
80870: LIST
80871: LIST
80872: PUSH
80873: LD_INT 0
80875: PUSH
80876: LD_INT 1
80878: PUSH
80879: EMPTY
80880: LIST
80881: LIST
80882: PUSH
80883: LD_INT 1
80885: NEG
80886: PUSH
80887: LD_INT 0
80889: PUSH
80890: EMPTY
80891: LIST
80892: LIST
80893: PUSH
80894: LD_INT 1
80896: NEG
80897: PUSH
80898: LD_INT 1
80900: NEG
80901: PUSH
80902: EMPTY
80903: LIST
80904: LIST
80905: PUSH
80906: LD_INT 1
80908: NEG
80909: PUSH
80910: LD_INT 2
80912: NEG
80913: PUSH
80914: EMPTY
80915: LIST
80916: LIST
80917: PUSH
80918: LD_INT 0
80920: PUSH
80921: LD_INT 2
80923: NEG
80924: PUSH
80925: EMPTY
80926: LIST
80927: LIST
80928: PUSH
80929: LD_INT 1
80931: PUSH
80932: LD_INT 1
80934: NEG
80935: PUSH
80936: EMPTY
80937: LIST
80938: LIST
80939: PUSH
80940: LD_INT 2
80942: PUSH
80943: LD_INT 0
80945: PUSH
80946: EMPTY
80947: LIST
80948: LIST
80949: PUSH
80950: LD_INT 2
80952: PUSH
80953: LD_INT 1
80955: PUSH
80956: EMPTY
80957: LIST
80958: LIST
80959: PUSH
80960: LD_INT 2
80962: PUSH
80963: LD_INT 2
80965: PUSH
80966: EMPTY
80967: LIST
80968: LIST
80969: PUSH
80970: LD_INT 1
80972: PUSH
80973: LD_INT 2
80975: PUSH
80976: EMPTY
80977: LIST
80978: LIST
80979: PUSH
80980: LD_INT 0
80982: PUSH
80983: LD_INT 2
80985: PUSH
80986: EMPTY
80987: LIST
80988: LIST
80989: PUSH
80990: LD_INT 1
80992: NEG
80993: PUSH
80994: LD_INT 1
80996: PUSH
80997: EMPTY
80998: LIST
80999: LIST
81000: PUSH
81001: LD_INT 2
81003: NEG
81004: PUSH
81005: LD_INT 0
81007: PUSH
81008: EMPTY
81009: LIST
81010: LIST
81011: PUSH
81012: LD_INT 2
81014: NEG
81015: PUSH
81016: LD_INT 1
81018: NEG
81019: PUSH
81020: EMPTY
81021: LIST
81022: LIST
81023: PUSH
81024: LD_INT 2
81026: NEG
81027: PUSH
81028: LD_INT 2
81030: NEG
81031: PUSH
81032: EMPTY
81033: LIST
81034: LIST
81035: PUSH
81036: EMPTY
81037: LIST
81038: LIST
81039: LIST
81040: LIST
81041: LIST
81042: LIST
81043: LIST
81044: LIST
81045: LIST
81046: LIST
81047: LIST
81048: LIST
81049: LIST
81050: LIST
81051: LIST
81052: LIST
81053: LIST
81054: LIST
81055: LIST
81056: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
81057: LD_ADDR_VAR 0 57
81061: PUSH
81062: LD_INT 0
81064: PUSH
81065: LD_INT 0
81067: PUSH
81068: EMPTY
81069: LIST
81070: LIST
81071: PUSH
81072: LD_INT 0
81074: PUSH
81075: LD_INT 1
81077: NEG
81078: PUSH
81079: EMPTY
81080: LIST
81081: LIST
81082: PUSH
81083: LD_INT 1
81085: PUSH
81086: LD_INT 0
81088: PUSH
81089: EMPTY
81090: LIST
81091: LIST
81092: PUSH
81093: LD_INT 1
81095: PUSH
81096: LD_INT 1
81098: PUSH
81099: EMPTY
81100: LIST
81101: LIST
81102: PUSH
81103: LD_INT 0
81105: PUSH
81106: LD_INT 1
81108: PUSH
81109: EMPTY
81110: LIST
81111: LIST
81112: PUSH
81113: LD_INT 1
81115: NEG
81116: PUSH
81117: LD_INT 0
81119: PUSH
81120: EMPTY
81121: LIST
81122: LIST
81123: PUSH
81124: LD_INT 1
81126: NEG
81127: PUSH
81128: LD_INT 1
81130: NEG
81131: PUSH
81132: EMPTY
81133: LIST
81134: LIST
81135: PUSH
81136: LD_INT 1
81138: NEG
81139: PUSH
81140: LD_INT 2
81142: NEG
81143: PUSH
81144: EMPTY
81145: LIST
81146: LIST
81147: PUSH
81148: LD_INT 0
81150: PUSH
81151: LD_INT 2
81153: NEG
81154: PUSH
81155: EMPTY
81156: LIST
81157: LIST
81158: PUSH
81159: LD_INT 1
81161: PUSH
81162: LD_INT 1
81164: NEG
81165: PUSH
81166: EMPTY
81167: LIST
81168: LIST
81169: PUSH
81170: LD_INT 2
81172: PUSH
81173: LD_INT 0
81175: PUSH
81176: EMPTY
81177: LIST
81178: LIST
81179: PUSH
81180: LD_INT 2
81182: PUSH
81183: LD_INT 1
81185: PUSH
81186: EMPTY
81187: LIST
81188: LIST
81189: PUSH
81190: LD_INT 2
81192: PUSH
81193: LD_INT 2
81195: PUSH
81196: EMPTY
81197: LIST
81198: LIST
81199: PUSH
81200: LD_INT 1
81202: PUSH
81203: LD_INT 2
81205: PUSH
81206: EMPTY
81207: LIST
81208: LIST
81209: PUSH
81210: LD_INT 0
81212: PUSH
81213: LD_INT 2
81215: PUSH
81216: EMPTY
81217: LIST
81218: LIST
81219: PUSH
81220: LD_INT 1
81222: NEG
81223: PUSH
81224: LD_INT 1
81226: PUSH
81227: EMPTY
81228: LIST
81229: LIST
81230: PUSH
81231: LD_INT 2
81233: NEG
81234: PUSH
81235: LD_INT 0
81237: PUSH
81238: EMPTY
81239: LIST
81240: LIST
81241: PUSH
81242: LD_INT 2
81244: NEG
81245: PUSH
81246: LD_INT 1
81248: NEG
81249: PUSH
81250: EMPTY
81251: LIST
81252: LIST
81253: PUSH
81254: LD_INT 2
81256: NEG
81257: PUSH
81258: LD_INT 2
81260: NEG
81261: PUSH
81262: EMPTY
81263: LIST
81264: LIST
81265: PUSH
81266: EMPTY
81267: LIST
81268: LIST
81269: LIST
81270: LIST
81271: LIST
81272: LIST
81273: LIST
81274: LIST
81275: LIST
81276: LIST
81277: LIST
81278: LIST
81279: LIST
81280: LIST
81281: LIST
81282: LIST
81283: LIST
81284: LIST
81285: LIST
81286: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
81287: LD_ADDR_VAR 0 58
81291: PUSH
81292: LD_INT 0
81294: PUSH
81295: LD_INT 0
81297: PUSH
81298: EMPTY
81299: LIST
81300: LIST
81301: PUSH
81302: LD_INT 0
81304: PUSH
81305: LD_INT 1
81307: NEG
81308: PUSH
81309: EMPTY
81310: LIST
81311: LIST
81312: PUSH
81313: LD_INT 1
81315: PUSH
81316: LD_INT 0
81318: PUSH
81319: EMPTY
81320: LIST
81321: LIST
81322: PUSH
81323: LD_INT 1
81325: PUSH
81326: LD_INT 1
81328: PUSH
81329: EMPTY
81330: LIST
81331: LIST
81332: PUSH
81333: LD_INT 0
81335: PUSH
81336: LD_INT 1
81338: PUSH
81339: EMPTY
81340: LIST
81341: LIST
81342: PUSH
81343: LD_INT 1
81345: NEG
81346: PUSH
81347: LD_INT 0
81349: PUSH
81350: EMPTY
81351: LIST
81352: LIST
81353: PUSH
81354: LD_INT 1
81356: NEG
81357: PUSH
81358: LD_INT 1
81360: NEG
81361: PUSH
81362: EMPTY
81363: LIST
81364: LIST
81365: PUSH
81366: LD_INT 1
81368: NEG
81369: PUSH
81370: LD_INT 2
81372: NEG
81373: PUSH
81374: EMPTY
81375: LIST
81376: LIST
81377: PUSH
81378: LD_INT 0
81380: PUSH
81381: LD_INT 2
81383: NEG
81384: PUSH
81385: EMPTY
81386: LIST
81387: LIST
81388: PUSH
81389: LD_INT 1
81391: PUSH
81392: LD_INT 1
81394: NEG
81395: PUSH
81396: EMPTY
81397: LIST
81398: LIST
81399: PUSH
81400: LD_INT 2
81402: PUSH
81403: LD_INT 0
81405: PUSH
81406: EMPTY
81407: LIST
81408: LIST
81409: PUSH
81410: LD_INT 2
81412: PUSH
81413: LD_INT 1
81415: PUSH
81416: EMPTY
81417: LIST
81418: LIST
81419: PUSH
81420: LD_INT 2
81422: PUSH
81423: LD_INT 2
81425: PUSH
81426: EMPTY
81427: LIST
81428: LIST
81429: PUSH
81430: LD_INT 1
81432: PUSH
81433: LD_INT 2
81435: PUSH
81436: EMPTY
81437: LIST
81438: LIST
81439: PUSH
81440: LD_INT 0
81442: PUSH
81443: LD_INT 2
81445: PUSH
81446: EMPTY
81447: LIST
81448: LIST
81449: PUSH
81450: LD_INT 1
81452: NEG
81453: PUSH
81454: LD_INT 1
81456: PUSH
81457: EMPTY
81458: LIST
81459: LIST
81460: PUSH
81461: LD_INT 2
81463: NEG
81464: PUSH
81465: LD_INT 0
81467: PUSH
81468: EMPTY
81469: LIST
81470: LIST
81471: PUSH
81472: LD_INT 2
81474: NEG
81475: PUSH
81476: LD_INT 1
81478: NEG
81479: PUSH
81480: EMPTY
81481: LIST
81482: LIST
81483: PUSH
81484: LD_INT 2
81486: NEG
81487: PUSH
81488: LD_INT 2
81490: NEG
81491: PUSH
81492: EMPTY
81493: LIST
81494: LIST
81495: PUSH
81496: EMPTY
81497: LIST
81498: LIST
81499: LIST
81500: LIST
81501: LIST
81502: LIST
81503: LIST
81504: LIST
81505: LIST
81506: LIST
81507: LIST
81508: LIST
81509: LIST
81510: LIST
81511: LIST
81512: LIST
81513: LIST
81514: LIST
81515: LIST
81516: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
81517: LD_ADDR_VAR 0 59
81521: PUSH
81522: LD_INT 0
81524: PUSH
81525: LD_INT 0
81527: PUSH
81528: EMPTY
81529: LIST
81530: LIST
81531: PUSH
81532: LD_INT 0
81534: PUSH
81535: LD_INT 1
81537: NEG
81538: PUSH
81539: EMPTY
81540: LIST
81541: LIST
81542: PUSH
81543: LD_INT 1
81545: PUSH
81546: LD_INT 0
81548: PUSH
81549: EMPTY
81550: LIST
81551: LIST
81552: PUSH
81553: LD_INT 1
81555: PUSH
81556: LD_INT 1
81558: PUSH
81559: EMPTY
81560: LIST
81561: LIST
81562: PUSH
81563: LD_INT 0
81565: PUSH
81566: LD_INT 1
81568: PUSH
81569: EMPTY
81570: LIST
81571: LIST
81572: PUSH
81573: LD_INT 1
81575: NEG
81576: PUSH
81577: LD_INT 0
81579: PUSH
81580: EMPTY
81581: LIST
81582: LIST
81583: PUSH
81584: LD_INT 1
81586: NEG
81587: PUSH
81588: LD_INT 1
81590: NEG
81591: PUSH
81592: EMPTY
81593: LIST
81594: LIST
81595: PUSH
81596: EMPTY
81597: LIST
81598: LIST
81599: LIST
81600: LIST
81601: LIST
81602: LIST
81603: LIST
81604: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
81605: LD_ADDR_VAR 0 60
81609: PUSH
81610: LD_INT 0
81612: PUSH
81613: LD_INT 0
81615: PUSH
81616: EMPTY
81617: LIST
81618: LIST
81619: PUSH
81620: LD_INT 0
81622: PUSH
81623: LD_INT 1
81625: NEG
81626: PUSH
81627: EMPTY
81628: LIST
81629: LIST
81630: PUSH
81631: LD_INT 1
81633: PUSH
81634: LD_INT 0
81636: PUSH
81637: EMPTY
81638: LIST
81639: LIST
81640: PUSH
81641: LD_INT 1
81643: PUSH
81644: LD_INT 1
81646: PUSH
81647: EMPTY
81648: LIST
81649: LIST
81650: PUSH
81651: LD_INT 0
81653: PUSH
81654: LD_INT 1
81656: PUSH
81657: EMPTY
81658: LIST
81659: LIST
81660: PUSH
81661: LD_INT 1
81663: NEG
81664: PUSH
81665: LD_INT 0
81667: PUSH
81668: EMPTY
81669: LIST
81670: LIST
81671: PUSH
81672: LD_INT 1
81674: NEG
81675: PUSH
81676: LD_INT 1
81678: NEG
81679: PUSH
81680: EMPTY
81681: LIST
81682: LIST
81683: PUSH
81684: EMPTY
81685: LIST
81686: LIST
81687: LIST
81688: LIST
81689: LIST
81690: LIST
81691: LIST
81692: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
81693: LD_ADDR_VAR 0 61
81697: PUSH
81698: LD_INT 0
81700: PUSH
81701: LD_INT 0
81703: PUSH
81704: EMPTY
81705: LIST
81706: LIST
81707: PUSH
81708: LD_INT 0
81710: PUSH
81711: LD_INT 1
81713: NEG
81714: PUSH
81715: EMPTY
81716: LIST
81717: LIST
81718: PUSH
81719: LD_INT 1
81721: PUSH
81722: LD_INT 0
81724: PUSH
81725: EMPTY
81726: LIST
81727: LIST
81728: PUSH
81729: LD_INT 1
81731: PUSH
81732: LD_INT 1
81734: PUSH
81735: EMPTY
81736: LIST
81737: LIST
81738: PUSH
81739: LD_INT 0
81741: PUSH
81742: LD_INT 1
81744: PUSH
81745: EMPTY
81746: LIST
81747: LIST
81748: PUSH
81749: LD_INT 1
81751: NEG
81752: PUSH
81753: LD_INT 0
81755: PUSH
81756: EMPTY
81757: LIST
81758: LIST
81759: PUSH
81760: LD_INT 1
81762: NEG
81763: PUSH
81764: LD_INT 1
81766: NEG
81767: PUSH
81768: EMPTY
81769: LIST
81770: LIST
81771: PUSH
81772: EMPTY
81773: LIST
81774: LIST
81775: LIST
81776: LIST
81777: LIST
81778: LIST
81779: LIST
81780: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
81781: LD_ADDR_VAR 0 62
81785: PUSH
81786: LD_INT 0
81788: PUSH
81789: LD_INT 0
81791: PUSH
81792: EMPTY
81793: LIST
81794: LIST
81795: PUSH
81796: LD_INT 0
81798: PUSH
81799: LD_INT 1
81801: NEG
81802: PUSH
81803: EMPTY
81804: LIST
81805: LIST
81806: PUSH
81807: LD_INT 1
81809: PUSH
81810: LD_INT 0
81812: PUSH
81813: EMPTY
81814: LIST
81815: LIST
81816: PUSH
81817: LD_INT 1
81819: PUSH
81820: LD_INT 1
81822: PUSH
81823: EMPTY
81824: LIST
81825: LIST
81826: PUSH
81827: LD_INT 0
81829: PUSH
81830: LD_INT 1
81832: PUSH
81833: EMPTY
81834: LIST
81835: LIST
81836: PUSH
81837: LD_INT 1
81839: NEG
81840: PUSH
81841: LD_INT 0
81843: PUSH
81844: EMPTY
81845: LIST
81846: LIST
81847: PUSH
81848: LD_INT 1
81850: NEG
81851: PUSH
81852: LD_INT 1
81854: NEG
81855: PUSH
81856: EMPTY
81857: LIST
81858: LIST
81859: PUSH
81860: EMPTY
81861: LIST
81862: LIST
81863: LIST
81864: LIST
81865: LIST
81866: LIST
81867: LIST
81868: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
81869: LD_ADDR_VAR 0 63
81873: PUSH
81874: LD_INT 0
81876: PUSH
81877: LD_INT 0
81879: PUSH
81880: EMPTY
81881: LIST
81882: LIST
81883: PUSH
81884: LD_INT 0
81886: PUSH
81887: LD_INT 1
81889: NEG
81890: PUSH
81891: EMPTY
81892: LIST
81893: LIST
81894: PUSH
81895: LD_INT 1
81897: PUSH
81898: LD_INT 0
81900: PUSH
81901: EMPTY
81902: LIST
81903: LIST
81904: PUSH
81905: LD_INT 1
81907: PUSH
81908: LD_INT 1
81910: PUSH
81911: EMPTY
81912: LIST
81913: LIST
81914: PUSH
81915: LD_INT 0
81917: PUSH
81918: LD_INT 1
81920: PUSH
81921: EMPTY
81922: LIST
81923: LIST
81924: PUSH
81925: LD_INT 1
81927: NEG
81928: PUSH
81929: LD_INT 0
81931: PUSH
81932: EMPTY
81933: LIST
81934: LIST
81935: PUSH
81936: LD_INT 1
81938: NEG
81939: PUSH
81940: LD_INT 1
81942: NEG
81943: PUSH
81944: EMPTY
81945: LIST
81946: LIST
81947: PUSH
81948: EMPTY
81949: LIST
81950: LIST
81951: LIST
81952: LIST
81953: LIST
81954: LIST
81955: LIST
81956: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
81957: LD_ADDR_VAR 0 64
81961: PUSH
81962: LD_INT 0
81964: PUSH
81965: LD_INT 0
81967: PUSH
81968: EMPTY
81969: LIST
81970: LIST
81971: PUSH
81972: LD_INT 0
81974: PUSH
81975: LD_INT 1
81977: NEG
81978: PUSH
81979: EMPTY
81980: LIST
81981: LIST
81982: PUSH
81983: LD_INT 1
81985: PUSH
81986: LD_INT 0
81988: PUSH
81989: EMPTY
81990: LIST
81991: LIST
81992: PUSH
81993: LD_INT 1
81995: PUSH
81996: LD_INT 1
81998: PUSH
81999: EMPTY
82000: LIST
82001: LIST
82002: PUSH
82003: LD_INT 0
82005: PUSH
82006: LD_INT 1
82008: PUSH
82009: EMPTY
82010: LIST
82011: LIST
82012: PUSH
82013: LD_INT 1
82015: NEG
82016: PUSH
82017: LD_INT 0
82019: PUSH
82020: EMPTY
82021: LIST
82022: LIST
82023: PUSH
82024: LD_INT 1
82026: NEG
82027: PUSH
82028: LD_INT 1
82030: NEG
82031: PUSH
82032: EMPTY
82033: LIST
82034: LIST
82035: PUSH
82036: EMPTY
82037: LIST
82038: LIST
82039: LIST
82040: LIST
82041: LIST
82042: LIST
82043: LIST
82044: ST_TO_ADDR
// end ; 1 :
82045: GO 87942
82047: LD_INT 1
82049: DOUBLE
82050: EQUAL
82051: IFTRUE 82055
82053: GO 84678
82055: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
82056: LD_ADDR_VAR 0 11
82060: PUSH
82061: LD_INT 1
82063: NEG
82064: PUSH
82065: LD_INT 3
82067: NEG
82068: PUSH
82069: EMPTY
82070: LIST
82071: LIST
82072: PUSH
82073: LD_INT 0
82075: PUSH
82076: LD_INT 3
82078: NEG
82079: PUSH
82080: EMPTY
82081: LIST
82082: LIST
82083: PUSH
82084: LD_INT 1
82086: PUSH
82087: LD_INT 2
82089: NEG
82090: PUSH
82091: EMPTY
82092: LIST
82093: LIST
82094: PUSH
82095: EMPTY
82096: LIST
82097: LIST
82098: LIST
82099: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
82100: LD_ADDR_VAR 0 12
82104: PUSH
82105: LD_INT 2
82107: PUSH
82108: LD_INT 1
82110: NEG
82111: PUSH
82112: EMPTY
82113: LIST
82114: LIST
82115: PUSH
82116: LD_INT 3
82118: PUSH
82119: LD_INT 0
82121: PUSH
82122: EMPTY
82123: LIST
82124: LIST
82125: PUSH
82126: LD_INT 3
82128: PUSH
82129: LD_INT 1
82131: PUSH
82132: EMPTY
82133: LIST
82134: LIST
82135: PUSH
82136: EMPTY
82137: LIST
82138: LIST
82139: LIST
82140: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
82141: LD_ADDR_VAR 0 13
82145: PUSH
82146: LD_INT 3
82148: PUSH
82149: LD_INT 2
82151: PUSH
82152: EMPTY
82153: LIST
82154: LIST
82155: PUSH
82156: LD_INT 3
82158: PUSH
82159: LD_INT 3
82161: PUSH
82162: EMPTY
82163: LIST
82164: LIST
82165: PUSH
82166: LD_INT 2
82168: PUSH
82169: LD_INT 3
82171: PUSH
82172: EMPTY
82173: LIST
82174: LIST
82175: PUSH
82176: EMPTY
82177: LIST
82178: LIST
82179: LIST
82180: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
82181: LD_ADDR_VAR 0 14
82185: PUSH
82186: LD_INT 1
82188: PUSH
82189: LD_INT 3
82191: PUSH
82192: EMPTY
82193: LIST
82194: LIST
82195: PUSH
82196: LD_INT 0
82198: PUSH
82199: LD_INT 3
82201: PUSH
82202: EMPTY
82203: LIST
82204: LIST
82205: PUSH
82206: LD_INT 1
82208: NEG
82209: PUSH
82210: LD_INT 2
82212: PUSH
82213: EMPTY
82214: LIST
82215: LIST
82216: PUSH
82217: EMPTY
82218: LIST
82219: LIST
82220: LIST
82221: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
82222: LD_ADDR_VAR 0 15
82226: PUSH
82227: LD_INT 2
82229: NEG
82230: PUSH
82231: LD_INT 1
82233: PUSH
82234: EMPTY
82235: LIST
82236: LIST
82237: PUSH
82238: LD_INT 3
82240: NEG
82241: PUSH
82242: LD_INT 0
82244: PUSH
82245: EMPTY
82246: LIST
82247: LIST
82248: PUSH
82249: LD_INT 3
82251: NEG
82252: PUSH
82253: LD_INT 1
82255: NEG
82256: PUSH
82257: EMPTY
82258: LIST
82259: LIST
82260: PUSH
82261: EMPTY
82262: LIST
82263: LIST
82264: LIST
82265: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
82266: LD_ADDR_VAR 0 16
82270: PUSH
82271: LD_INT 2
82273: NEG
82274: PUSH
82275: LD_INT 3
82277: NEG
82278: PUSH
82279: EMPTY
82280: LIST
82281: LIST
82282: PUSH
82283: LD_INT 3
82285: NEG
82286: PUSH
82287: LD_INT 2
82289: NEG
82290: PUSH
82291: EMPTY
82292: LIST
82293: LIST
82294: PUSH
82295: LD_INT 3
82297: NEG
82298: PUSH
82299: LD_INT 3
82301: NEG
82302: PUSH
82303: EMPTY
82304: LIST
82305: LIST
82306: PUSH
82307: EMPTY
82308: LIST
82309: LIST
82310: LIST
82311: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
82312: LD_ADDR_VAR 0 17
82316: PUSH
82317: LD_INT 1
82319: NEG
82320: PUSH
82321: LD_INT 3
82323: NEG
82324: PUSH
82325: EMPTY
82326: LIST
82327: LIST
82328: PUSH
82329: LD_INT 0
82331: PUSH
82332: LD_INT 3
82334: NEG
82335: PUSH
82336: EMPTY
82337: LIST
82338: LIST
82339: PUSH
82340: LD_INT 1
82342: PUSH
82343: LD_INT 2
82345: NEG
82346: PUSH
82347: EMPTY
82348: LIST
82349: LIST
82350: PUSH
82351: EMPTY
82352: LIST
82353: LIST
82354: LIST
82355: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
82356: LD_ADDR_VAR 0 18
82360: PUSH
82361: LD_INT 2
82363: PUSH
82364: LD_INT 1
82366: NEG
82367: PUSH
82368: EMPTY
82369: LIST
82370: LIST
82371: PUSH
82372: LD_INT 3
82374: PUSH
82375: LD_INT 0
82377: PUSH
82378: EMPTY
82379: LIST
82380: LIST
82381: PUSH
82382: LD_INT 3
82384: PUSH
82385: LD_INT 1
82387: PUSH
82388: EMPTY
82389: LIST
82390: LIST
82391: PUSH
82392: EMPTY
82393: LIST
82394: LIST
82395: LIST
82396: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
82397: LD_ADDR_VAR 0 19
82401: PUSH
82402: LD_INT 3
82404: PUSH
82405: LD_INT 2
82407: PUSH
82408: EMPTY
82409: LIST
82410: LIST
82411: PUSH
82412: LD_INT 3
82414: PUSH
82415: LD_INT 3
82417: PUSH
82418: EMPTY
82419: LIST
82420: LIST
82421: PUSH
82422: LD_INT 2
82424: PUSH
82425: LD_INT 3
82427: PUSH
82428: EMPTY
82429: LIST
82430: LIST
82431: PUSH
82432: EMPTY
82433: LIST
82434: LIST
82435: LIST
82436: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
82437: LD_ADDR_VAR 0 20
82441: PUSH
82442: LD_INT 1
82444: PUSH
82445: LD_INT 3
82447: PUSH
82448: EMPTY
82449: LIST
82450: LIST
82451: PUSH
82452: LD_INT 0
82454: PUSH
82455: LD_INT 3
82457: PUSH
82458: EMPTY
82459: LIST
82460: LIST
82461: PUSH
82462: LD_INT 1
82464: NEG
82465: PUSH
82466: LD_INT 2
82468: PUSH
82469: EMPTY
82470: LIST
82471: LIST
82472: PUSH
82473: EMPTY
82474: LIST
82475: LIST
82476: LIST
82477: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
82478: LD_ADDR_VAR 0 21
82482: PUSH
82483: LD_INT 2
82485: NEG
82486: PUSH
82487: LD_INT 1
82489: PUSH
82490: EMPTY
82491: LIST
82492: LIST
82493: PUSH
82494: LD_INT 3
82496: NEG
82497: PUSH
82498: LD_INT 0
82500: PUSH
82501: EMPTY
82502: LIST
82503: LIST
82504: PUSH
82505: LD_INT 3
82507: NEG
82508: PUSH
82509: LD_INT 1
82511: NEG
82512: PUSH
82513: EMPTY
82514: LIST
82515: LIST
82516: PUSH
82517: EMPTY
82518: LIST
82519: LIST
82520: LIST
82521: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
82522: LD_ADDR_VAR 0 22
82526: PUSH
82527: LD_INT 2
82529: NEG
82530: PUSH
82531: LD_INT 3
82533: NEG
82534: PUSH
82535: EMPTY
82536: LIST
82537: LIST
82538: PUSH
82539: LD_INT 3
82541: NEG
82542: PUSH
82543: LD_INT 2
82545: NEG
82546: PUSH
82547: EMPTY
82548: LIST
82549: LIST
82550: PUSH
82551: LD_INT 3
82553: NEG
82554: PUSH
82555: LD_INT 3
82557: NEG
82558: PUSH
82559: EMPTY
82560: LIST
82561: LIST
82562: PUSH
82563: EMPTY
82564: LIST
82565: LIST
82566: LIST
82567: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
82568: LD_ADDR_VAR 0 23
82572: PUSH
82573: LD_INT 0
82575: PUSH
82576: LD_INT 3
82578: NEG
82579: PUSH
82580: EMPTY
82581: LIST
82582: LIST
82583: PUSH
82584: LD_INT 1
82586: NEG
82587: PUSH
82588: LD_INT 4
82590: NEG
82591: PUSH
82592: EMPTY
82593: LIST
82594: LIST
82595: PUSH
82596: LD_INT 1
82598: PUSH
82599: LD_INT 3
82601: NEG
82602: PUSH
82603: EMPTY
82604: LIST
82605: LIST
82606: PUSH
82607: EMPTY
82608: LIST
82609: LIST
82610: LIST
82611: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
82612: LD_ADDR_VAR 0 24
82616: PUSH
82617: LD_INT 3
82619: PUSH
82620: LD_INT 0
82622: PUSH
82623: EMPTY
82624: LIST
82625: LIST
82626: PUSH
82627: LD_INT 3
82629: PUSH
82630: LD_INT 1
82632: NEG
82633: PUSH
82634: EMPTY
82635: LIST
82636: LIST
82637: PUSH
82638: LD_INT 4
82640: PUSH
82641: LD_INT 1
82643: PUSH
82644: EMPTY
82645: LIST
82646: LIST
82647: PUSH
82648: EMPTY
82649: LIST
82650: LIST
82651: LIST
82652: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
82653: LD_ADDR_VAR 0 25
82657: PUSH
82658: LD_INT 3
82660: PUSH
82661: LD_INT 3
82663: PUSH
82664: EMPTY
82665: LIST
82666: LIST
82667: PUSH
82668: LD_INT 4
82670: PUSH
82671: LD_INT 3
82673: PUSH
82674: EMPTY
82675: LIST
82676: LIST
82677: PUSH
82678: LD_INT 3
82680: PUSH
82681: LD_INT 4
82683: PUSH
82684: EMPTY
82685: LIST
82686: LIST
82687: PUSH
82688: EMPTY
82689: LIST
82690: LIST
82691: LIST
82692: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
82693: LD_ADDR_VAR 0 26
82697: PUSH
82698: LD_INT 0
82700: PUSH
82701: LD_INT 3
82703: PUSH
82704: EMPTY
82705: LIST
82706: LIST
82707: PUSH
82708: LD_INT 1
82710: PUSH
82711: LD_INT 4
82713: PUSH
82714: EMPTY
82715: LIST
82716: LIST
82717: PUSH
82718: LD_INT 1
82720: NEG
82721: PUSH
82722: LD_INT 3
82724: PUSH
82725: EMPTY
82726: LIST
82727: LIST
82728: PUSH
82729: EMPTY
82730: LIST
82731: LIST
82732: LIST
82733: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
82734: LD_ADDR_VAR 0 27
82738: PUSH
82739: LD_INT 3
82741: NEG
82742: PUSH
82743: LD_INT 0
82745: PUSH
82746: EMPTY
82747: LIST
82748: LIST
82749: PUSH
82750: LD_INT 3
82752: NEG
82753: PUSH
82754: LD_INT 1
82756: PUSH
82757: EMPTY
82758: LIST
82759: LIST
82760: PUSH
82761: LD_INT 4
82763: NEG
82764: PUSH
82765: LD_INT 1
82767: NEG
82768: PUSH
82769: EMPTY
82770: LIST
82771: LIST
82772: PUSH
82773: EMPTY
82774: LIST
82775: LIST
82776: LIST
82777: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
82778: LD_ADDR_VAR 0 28
82782: PUSH
82783: LD_INT 3
82785: NEG
82786: PUSH
82787: LD_INT 3
82789: NEG
82790: PUSH
82791: EMPTY
82792: LIST
82793: LIST
82794: PUSH
82795: LD_INT 3
82797: NEG
82798: PUSH
82799: LD_INT 4
82801: NEG
82802: PUSH
82803: EMPTY
82804: LIST
82805: LIST
82806: PUSH
82807: LD_INT 4
82809: NEG
82810: PUSH
82811: LD_INT 3
82813: NEG
82814: PUSH
82815: EMPTY
82816: LIST
82817: LIST
82818: PUSH
82819: EMPTY
82820: LIST
82821: LIST
82822: LIST
82823: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
82824: LD_ADDR_VAR 0 29
82828: PUSH
82829: LD_INT 1
82831: NEG
82832: PUSH
82833: LD_INT 3
82835: NEG
82836: PUSH
82837: EMPTY
82838: LIST
82839: LIST
82840: PUSH
82841: LD_INT 0
82843: PUSH
82844: LD_INT 3
82846: NEG
82847: PUSH
82848: EMPTY
82849: LIST
82850: LIST
82851: PUSH
82852: LD_INT 1
82854: PUSH
82855: LD_INT 2
82857: NEG
82858: PUSH
82859: EMPTY
82860: LIST
82861: LIST
82862: PUSH
82863: LD_INT 1
82865: NEG
82866: PUSH
82867: LD_INT 4
82869: NEG
82870: PUSH
82871: EMPTY
82872: LIST
82873: LIST
82874: PUSH
82875: LD_INT 0
82877: PUSH
82878: LD_INT 4
82880: NEG
82881: PUSH
82882: EMPTY
82883: LIST
82884: LIST
82885: PUSH
82886: LD_INT 1
82888: PUSH
82889: LD_INT 3
82891: NEG
82892: PUSH
82893: EMPTY
82894: LIST
82895: LIST
82896: PUSH
82897: LD_INT 1
82899: NEG
82900: PUSH
82901: LD_INT 5
82903: NEG
82904: PUSH
82905: EMPTY
82906: LIST
82907: LIST
82908: PUSH
82909: LD_INT 0
82911: PUSH
82912: LD_INT 5
82914: NEG
82915: PUSH
82916: EMPTY
82917: LIST
82918: LIST
82919: PUSH
82920: LD_INT 1
82922: PUSH
82923: LD_INT 4
82925: NEG
82926: PUSH
82927: EMPTY
82928: LIST
82929: LIST
82930: PUSH
82931: LD_INT 1
82933: NEG
82934: PUSH
82935: LD_INT 6
82937: NEG
82938: PUSH
82939: EMPTY
82940: LIST
82941: LIST
82942: PUSH
82943: LD_INT 0
82945: PUSH
82946: LD_INT 6
82948: NEG
82949: PUSH
82950: EMPTY
82951: LIST
82952: LIST
82953: PUSH
82954: LD_INT 1
82956: PUSH
82957: LD_INT 5
82959: NEG
82960: PUSH
82961: EMPTY
82962: LIST
82963: LIST
82964: PUSH
82965: EMPTY
82966: LIST
82967: LIST
82968: LIST
82969: LIST
82970: LIST
82971: LIST
82972: LIST
82973: LIST
82974: LIST
82975: LIST
82976: LIST
82977: LIST
82978: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
82979: LD_ADDR_VAR 0 30
82983: PUSH
82984: LD_INT 2
82986: PUSH
82987: LD_INT 1
82989: NEG
82990: PUSH
82991: EMPTY
82992: LIST
82993: LIST
82994: PUSH
82995: LD_INT 3
82997: PUSH
82998: LD_INT 0
83000: PUSH
83001: EMPTY
83002: LIST
83003: LIST
83004: PUSH
83005: LD_INT 3
83007: PUSH
83008: LD_INT 1
83010: PUSH
83011: EMPTY
83012: LIST
83013: LIST
83014: PUSH
83015: LD_INT 3
83017: PUSH
83018: LD_INT 1
83020: NEG
83021: PUSH
83022: EMPTY
83023: LIST
83024: LIST
83025: PUSH
83026: LD_INT 4
83028: PUSH
83029: LD_INT 0
83031: PUSH
83032: EMPTY
83033: LIST
83034: LIST
83035: PUSH
83036: LD_INT 4
83038: PUSH
83039: LD_INT 1
83041: PUSH
83042: EMPTY
83043: LIST
83044: LIST
83045: PUSH
83046: LD_INT 4
83048: PUSH
83049: LD_INT 1
83051: NEG
83052: PUSH
83053: EMPTY
83054: LIST
83055: LIST
83056: PUSH
83057: LD_INT 5
83059: PUSH
83060: LD_INT 0
83062: PUSH
83063: EMPTY
83064: LIST
83065: LIST
83066: PUSH
83067: LD_INT 5
83069: PUSH
83070: LD_INT 1
83072: PUSH
83073: EMPTY
83074: LIST
83075: LIST
83076: PUSH
83077: LD_INT 5
83079: PUSH
83080: LD_INT 1
83082: NEG
83083: PUSH
83084: EMPTY
83085: LIST
83086: LIST
83087: PUSH
83088: LD_INT 6
83090: PUSH
83091: LD_INT 0
83093: PUSH
83094: EMPTY
83095: LIST
83096: LIST
83097: PUSH
83098: LD_INT 6
83100: PUSH
83101: LD_INT 1
83103: PUSH
83104: EMPTY
83105: LIST
83106: LIST
83107: PUSH
83108: EMPTY
83109: LIST
83110: LIST
83111: LIST
83112: LIST
83113: LIST
83114: LIST
83115: LIST
83116: LIST
83117: LIST
83118: LIST
83119: LIST
83120: LIST
83121: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
83122: LD_ADDR_VAR 0 31
83126: PUSH
83127: LD_INT 3
83129: PUSH
83130: LD_INT 2
83132: PUSH
83133: EMPTY
83134: LIST
83135: LIST
83136: PUSH
83137: LD_INT 3
83139: PUSH
83140: LD_INT 3
83142: PUSH
83143: EMPTY
83144: LIST
83145: LIST
83146: PUSH
83147: LD_INT 2
83149: PUSH
83150: LD_INT 3
83152: PUSH
83153: EMPTY
83154: LIST
83155: LIST
83156: PUSH
83157: LD_INT 4
83159: PUSH
83160: LD_INT 3
83162: PUSH
83163: EMPTY
83164: LIST
83165: LIST
83166: PUSH
83167: LD_INT 4
83169: PUSH
83170: LD_INT 4
83172: PUSH
83173: EMPTY
83174: LIST
83175: LIST
83176: PUSH
83177: LD_INT 3
83179: PUSH
83180: LD_INT 4
83182: PUSH
83183: EMPTY
83184: LIST
83185: LIST
83186: PUSH
83187: LD_INT 5
83189: PUSH
83190: LD_INT 4
83192: PUSH
83193: EMPTY
83194: LIST
83195: LIST
83196: PUSH
83197: LD_INT 5
83199: PUSH
83200: LD_INT 5
83202: PUSH
83203: EMPTY
83204: LIST
83205: LIST
83206: PUSH
83207: LD_INT 4
83209: PUSH
83210: LD_INT 5
83212: PUSH
83213: EMPTY
83214: LIST
83215: LIST
83216: PUSH
83217: LD_INT 6
83219: PUSH
83220: LD_INT 5
83222: PUSH
83223: EMPTY
83224: LIST
83225: LIST
83226: PUSH
83227: LD_INT 6
83229: PUSH
83230: LD_INT 6
83232: PUSH
83233: EMPTY
83234: LIST
83235: LIST
83236: PUSH
83237: LD_INT 5
83239: PUSH
83240: LD_INT 6
83242: PUSH
83243: EMPTY
83244: LIST
83245: LIST
83246: PUSH
83247: EMPTY
83248: LIST
83249: LIST
83250: LIST
83251: LIST
83252: LIST
83253: LIST
83254: LIST
83255: LIST
83256: LIST
83257: LIST
83258: LIST
83259: LIST
83260: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
83261: LD_ADDR_VAR 0 32
83265: PUSH
83266: LD_INT 1
83268: PUSH
83269: LD_INT 3
83271: PUSH
83272: EMPTY
83273: LIST
83274: LIST
83275: PUSH
83276: LD_INT 0
83278: PUSH
83279: LD_INT 3
83281: PUSH
83282: EMPTY
83283: LIST
83284: LIST
83285: PUSH
83286: LD_INT 1
83288: NEG
83289: PUSH
83290: LD_INT 2
83292: PUSH
83293: EMPTY
83294: LIST
83295: LIST
83296: PUSH
83297: LD_INT 1
83299: PUSH
83300: LD_INT 4
83302: PUSH
83303: EMPTY
83304: LIST
83305: LIST
83306: PUSH
83307: LD_INT 0
83309: PUSH
83310: LD_INT 4
83312: PUSH
83313: EMPTY
83314: LIST
83315: LIST
83316: PUSH
83317: LD_INT 1
83319: NEG
83320: PUSH
83321: LD_INT 3
83323: PUSH
83324: EMPTY
83325: LIST
83326: LIST
83327: PUSH
83328: LD_INT 1
83330: PUSH
83331: LD_INT 5
83333: PUSH
83334: EMPTY
83335: LIST
83336: LIST
83337: PUSH
83338: LD_INT 0
83340: PUSH
83341: LD_INT 5
83343: PUSH
83344: EMPTY
83345: LIST
83346: LIST
83347: PUSH
83348: LD_INT 1
83350: NEG
83351: PUSH
83352: LD_INT 4
83354: PUSH
83355: EMPTY
83356: LIST
83357: LIST
83358: PUSH
83359: LD_INT 1
83361: PUSH
83362: LD_INT 6
83364: PUSH
83365: EMPTY
83366: LIST
83367: LIST
83368: PUSH
83369: LD_INT 0
83371: PUSH
83372: LD_INT 6
83374: PUSH
83375: EMPTY
83376: LIST
83377: LIST
83378: PUSH
83379: LD_INT 1
83381: NEG
83382: PUSH
83383: LD_INT 5
83385: PUSH
83386: EMPTY
83387: LIST
83388: LIST
83389: PUSH
83390: EMPTY
83391: LIST
83392: LIST
83393: LIST
83394: LIST
83395: LIST
83396: LIST
83397: LIST
83398: LIST
83399: LIST
83400: LIST
83401: LIST
83402: LIST
83403: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
83404: LD_ADDR_VAR 0 33
83408: PUSH
83409: LD_INT 2
83411: NEG
83412: PUSH
83413: LD_INT 1
83415: PUSH
83416: EMPTY
83417: LIST
83418: LIST
83419: PUSH
83420: LD_INT 3
83422: NEG
83423: PUSH
83424: LD_INT 0
83426: PUSH
83427: EMPTY
83428: LIST
83429: LIST
83430: PUSH
83431: LD_INT 3
83433: NEG
83434: PUSH
83435: LD_INT 1
83437: NEG
83438: PUSH
83439: EMPTY
83440: LIST
83441: LIST
83442: PUSH
83443: LD_INT 3
83445: NEG
83446: PUSH
83447: LD_INT 1
83449: PUSH
83450: EMPTY
83451: LIST
83452: LIST
83453: PUSH
83454: LD_INT 4
83456: NEG
83457: PUSH
83458: LD_INT 0
83460: PUSH
83461: EMPTY
83462: LIST
83463: LIST
83464: PUSH
83465: LD_INT 4
83467: NEG
83468: PUSH
83469: LD_INT 1
83471: NEG
83472: PUSH
83473: EMPTY
83474: LIST
83475: LIST
83476: PUSH
83477: LD_INT 4
83479: NEG
83480: PUSH
83481: LD_INT 1
83483: PUSH
83484: EMPTY
83485: LIST
83486: LIST
83487: PUSH
83488: LD_INT 5
83490: NEG
83491: PUSH
83492: LD_INT 0
83494: PUSH
83495: EMPTY
83496: LIST
83497: LIST
83498: PUSH
83499: LD_INT 5
83501: NEG
83502: PUSH
83503: LD_INT 1
83505: NEG
83506: PUSH
83507: EMPTY
83508: LIST
83509: LIST
83510: PUSH
83511: LD_INT 5
83513: NEG
83514: PUSH
83515: LD_INT 1
83517: PUSH
83518: EMPTY
83519: LIST
83520: LIST
83521: PUSH
83522: LD_INT 6
83524: NEG
83525: PUSH
83526: LD_INT 0
83528: PUSH
83529: EMPTY
83530: LIST
83531: LIST
83532: PUSH
83533: LD_INT 6
83535: NEG
83536: PUSH
83537: LD_INT 1
83539: NEG
83540: PUSH
83541: EMPTY
83542: LIST
83543: LIST
83544: PUSH
83545: EMPTY
83546: LIST
83547: LIST
83548: LIST
83549: LIST
83550: LIST
83551: LIST
83552: LIST
83553: LIST
83554: LIST
83555: LIST
83556: LIST
83557: LIST
83558: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
83559: LD_ADDR_VAR 0 34
83563: PUSH
83564: LD_INT 2
83566: NEG
83567: PUSH
83568: LD_INT 3
83570: NEG
83571: PUSH
83572: EMPTY
83573: LIST
83574: LIST
83575: PUSH
83576: LD_INT 3
83578: NEG
83579: PUSH
83580: LD_INT 2
83582: NEG
83583: PUSH
83584: EMPTY
83585: LIST
83586: LIST
83587: PUSH
83588: LD_INT 3
83590: NEG
83591: PUSH
83592: LD_INT 3
83594: NEG
83595: PUSH
83596: EMPTY
83597: LIST
83598: LIST
83599: PUSH
83600: LD_INT 3
83602: NEG
83603: PUSH
83604: LD_INT 4
83606: NEG
83607: PUSH
83608: EMPTY
83609: LIST
83610: LIST
83611: PUSH
83612: LD_INT 4
83614: NEG
83615: PUSH
83616: LD_INT 3
83618: NEG
83619: PUSH
83620: EMPTY
83621: LIST
83622: LIST
83623: PUSH
83624: LD_INT 4
83626: NEG
83627: PUSH
83628: LD_INT 4
83630: NEG
83631: PUSH
83632: EMPTY
83633: LIST
83634: LIST
83635: PUSH
83636: LD_INT 4
83638: NEG
83639: PUSH
83640: LD_INT 5
83642: NEG
83643: PUSH
83644: EMPTY
83645: LIST
83646: LIST
83647: PUSH
83648: LD_INT 5
83650: NEG
83651: PUSH
83652: LD_INT 4
83654: NEG
83655: PUSH
83656: EMPTY
83657: LIST
83658: LIST
83659: PUSH
83660: LD_INT 5
83662: NEG
83663: PUSH
83664: LD_INT 5
83666: NEG
83667: PUSH
83668: EMPTY
83669: LIST
83670: LIST
83671: PUSH
83672: LD_INT 5
83674: NEG
83675: PUSH
83676: LD_INT 6
83678: NEG
83679: PUSH
83680: EMPTY
83681: LIST
83682: LIST
83683: PUSH
83684: LD_INT 6
83686: NEG
83687: PUSH
83688: LD_INT 5
83690: NEG
83691: PUSH
83692: EMPTY
83693: LIST
83694: LIST
83695: PUSH
83696: LD_INT 6
83698: NEG
83699: PUSH
83700: LD_INT 6
83702: NEG
83703: PUSH
83704: EMPTY
83705: LIST
83706: LIST
83707: PUSH
83708: EMPTY
83709: LIST
83710: LIST
83711: LIST
83712: LIST
83713: LIST
83714: LIST
83715: LIST
83716: LIST
83717: LIST
83718: LIST
83719: LIST
83720: LIST
83721: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
83722: LD_ADDR_VAR 0 41
83726: PUSH
83727: LD_INT 0
83729: PUSH
83730: LD_INT 2
83732: NEG
83733: PUSH
83734: EMPTY
83735: LIST
83736: LIST
83737: PUSH
83738: LD_INT 1
83740: NEG
83741: PUSH
83742: LD_INT 3
83744: NEG
83745: PUSH
83746: EMPTY
83747: LIST
83748: LIST
83749: PUSH
83750: LD_INT 1
83752: PUSH
83753: LD_INT 2
83755: NEG
83756: PUSH
83757: EMPTY
83758: LIST
83759: LIST
83760: PUSH
83761: EMPTY
83762: LIST
83763: LIST
83764: LIST
83765: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
83766: LD_ADDR_VAR 0 42
83770: PUSH
83771: LD_INT 2
83773: PUSH
83774: LD_INT 0
83776: PUSH
83777: EMPTY
83778: LIST
83779: LIST
83780: PUSH
83781: LD_INT 2
83783: PUSH
83784: LD_INT 1
83786: NEG
83787: PUSH
83788: EMPTY
83789: LIST
83790: LIST
83791: PUSH
83792: LD_INT 3
83794: PUSH
83795: LD_INT 1
83797: PUSH
83798: EMPTY
83799: LIST
83800: LIST
83801: PUSH
83802: EMPTY
83803: LIST
83804: LIST
83805: LIST
83806: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
83807: LD_ADDR_VAR 0 43
83811: PUSH
83812: LD_INT 2
83814: PUSH
83815: LD_INT 2
83817: PUSH
83818: EMPTY
83819: LIST
83820: LIST
83821: PUSH
83822: LD_INT 3
83824: PUSH
83825: LD_INT 2
83827: PUSH
83828: EMPTY
83829: LIST
83830: LIST
83831: PUSH
83832: LD_INT 2
83834: PUSH
83835: LD_INT 3
83837: PUSH
83838: EMPTY
83839: LIST
83840: LIST
83841: PUSH
83842: EMPTY
83843: LIST
83844: LIST
83845: LIST
83846: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
83847: LD_ADDR_VAR 0 44
83851: PUSH
83852: LD_INT 0
83854: PUSH
83855: LD_INT 2
83857: PUSH
83858: EMPTY
83859: LIST
83860: LIST
83861: PUSH
83862: LD_INT 1
83864: PUSH
83865: LD_INT 3
83867: PUSH
83868: EMPTY
83869: LIST
83870: LIST
83871: PUSH
83872: LD_INT 1
83874: NEG
83875: PUSH
83876: LD_INT 2
83878: PUSH
83879: EMPTY
83880: LIST
83881: LIST
83882: PUSH
83883: EMPTY
83884: LIST
83885: LIST
83886: LIST
83887: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
83888: LD_ADDR_VAR 0 45
83892: PUSH
83893: LD_INT 2
83895: NEG
83896: PUSH
83897: LD_INT 0
83899: PUSH
83900: EMPTY
83901: LIST
83902: LIST
83903: PUSH
83904: LD_INT 2
83906: NEG
83907: PUSH
83908: LD_INT 1
83910: PUSH
83911: EMPTY
83912: LIST
83913: LIST
83914: PUSH
83915: LD_INT 3
83917: NEG
83918: PUSH
83919: LD_INT 1
83921: NEG
83922: PUSH
83923: EMPTY
83924: LIST
83925: LIST
83926: PUSH
83927: EMPTY
83928: LIST
83929: LIST
83930: LIST
83931: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
83932: LD_ADDR_VAR 0 46
83936: PUSH
83937: LD_INT 2
83939: NEG
83940: PUSH
83941: LD_INT 2
83943: NEG
83944: PUSH
83945: EMPTY
83946: LIST
83947: LIST
83948: PUSH
83949: LD_INT 2
83951: NEG
83952: PUSH
83953: LD_INT 3
83955: NEG
83956: PUSH
83957: EMPTY
83958: LIST
83959: LIST
83960: PUSH
83961: LD_INT 3
83963: NEG
83964: PUSH
83965: LD_INT 2
83967: NEG
83968: PUSH
83969: EMPTY
83970: LIST
83971: LIST
83972: PUSH
83973: EMPTY
83974: LIST
83975: LIST
83976: LIST
83977: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
83978: LD_ADDR_VAR 0 47
83982: PUSH
83983: LD_INT 2
83985: NEG
83986: PUSH
83987: LD_INT 3
83989: NEG
83990: PUSH
83991: EMPTY
83992: LIST
83993: LIST
83994: PUSH
83995: LD_INT 1
83997: NEG
83998: PUSH
83999: LD_INT 3
84001: NEG
84002: PUSH
84003: EMPTY
84004: LIST
84005: LIST
84006: PUSH
84007: EMPTY
84008: LIST
84009: LIST
84010: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
84011: LD_ADDR_VAR 0 48
84015: PUSH
84016: LD_INT 1
84018: PUSH
84019: LD_INT 2
84021: NEG
84022: PUSH
84023: EMPTY
84024: LIST
84025: LIST
84026: PUSH
84027: LD_INT 2
84029: PUSH
84030: LD_INT 1
84032: NEG
84033: PUSH
84034: EMPTY
84035: LIST
84036: LIST
84037: PUSH
84038: EMPTY
84039: LIST
84040: LIST
84041: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
84042: LD_ADDR_VAR 0 49
84046: PUSH
84047: LD_INT 3
84049: PUSH
84050: LD_INT 1
84052: PUSH
84053: EMPTY
84054: LIST
84055: LIST
84056: PUSH
84057: LD_INT 3
84059: PUSH
84060: LD_INT 2
84062: PUSH
84063: EMPTY
84064: LIST
84065: LIST
84066: PUSH
84067: EMPTY
84068: LIST
84069: LIST
84070: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
84071: LD_ADDR_VAR 0 50
84075: PUSH
84076: LD_INT 2
84078: PUSH
84079: LD_INT 3
84081: PUSH
84082: EMPTY
84083: LIST
84084: LIST
84085: PUSH
84086: LD_INT 1
84088: PUSH
84089: LD_INT 3
84091: PUSH
84092: EMPTY
84093: LIST
84094: LIST
84095: PUSH
84096: EMPTY
84097: LIST
84098: LIST
84099: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
84100: LD_ADDR_VAR 0 51
84104: PUSH
84105: LD_INT 1
84107: NEG
84108: PUSH
84109: LD_INT 2
84111: PUSH
84112: EMPTY
84113: LIST
84114: LIST
84115: PUSH
84116: LD_INT 2
84118: NEG
84119: PUSH
84120: LD_INT 1
84122: PUSH
84123: EMPTY
84124: LIST
84125: LIST
84126: PUSH
84127: EMPTY
84128: LIST
84129: LIST
84130: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
84131: LD_ADDR_VAR 0 52
84135: PUSH
84136: LD_INT 3
84138: NEG
84139: PUSH
84140: LD_INT 1
84142: NEG
84143: PUSH
84144: EMPTY
84145: LIST
84146: LIST
84147: PUSH
84148: LD_INT 3
84150: NEG
84151: PUSH
84152: LD_INT 2
84154: NEG
84155: PUSH
84156: EMPTY
84157: LIST
84158: LIST
84159: PUSH
84160: EMPTY
84161: LIST
84162: LIST
84163: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
84164: LD_ADDR_VAR 0 53
84168: PUSH
84169: LD_INT 1
84171: NEG
84172: PUSH
84173: LD_INT 3
84175: NEG
84176: PUSH
84177: EMPTY
84178: LIST
84179: LIST
84180: PUSH
84181: LD_INT 0
84183: PUSH
84184: LD_INT 3
84186: NEG
84187: PUSH
84188: EMPTY
84189: LIST
84190: LIST
84191: PUSH
84192: LD_INT 1
84194: PUSH
84195: LD_INT 2
84197: NEG
84198: PUSH
84199: EMPTY
84200: LIST
84201: LIST
84202: PUSH
84203: EMPTY
84204: LIST
84205: LIST
84206: LIST
84207: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
84208: LD_ADDR_VAR 0 54
84212: PUSH
84213: LD_INT 2
84215: PUSH
84216: LD_INT 1
84218: NEG
84219: PUSH
84220: EMPTY
84221: LIST
84222: LIST
84223: PUSH
84224: LD_INT 3
84226: PUSH
84227: LD_INT 0
84229: PUSH
84230: EMPTY
84231: LIST
84232: LIST
84233: PUSH
84234: LD_INT 3
84236: PUSH
84237: LD_INT 1
84239: PUSH
84240: EMPTY
84241: LIST
84242: LIST
84243: PUSH
84244: EMPTY
84245: LIST
84246: LIST
84247: LIST
84248: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
84249: LD_ADDR_VAR 0 55
84253: PUSH
84254: LD_INT 3
84256: PUSH
84257: LD_INT 2
84259: PUSH
84260: EMPTY
84261: LIST
84262: LIST
84263: PUSH
84264: LD_INT 3
84266: PUSH
84267: LD_INT 3
84269: PUSH
84270: EMPTY
84271: LIST
84272: LIST
84273: PUSH
84274: LD_INT 2
84276: PUSH
84277: LD_INT 3
84279: PUSH
84280: EMPTY
84281: LIST
84282: LIST
84283: PUSH
84284: EMPTY
84285: LIST
84286: LIST
84287: LIST
84288: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
84289: LD_ADDR_VAR 0 56
84293: PUSH
84294: LD_INT 1
84296: PUSH
84297: LD_INT 3
84299: PUSH
84300: EMPTY
84301: LIST
84302: LIST
84303: PUSH
84304: LD_INT 0
84306: PUSH
84307: LD_INT 3
84309: PUSH
84310: EMPTY
84311: LIST
84312: LIST
84313: PUSH
84314: LD_INT 1
84316: NEG
84317: PUSH
84318: LD_INT 2
84320: PUSH
84321: EMPTY
84322: LIST
84323: LIST
84324: PUSH
84325: EMPTY
84326: LIST
84327: LIST
84328: LIST
84329: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
84330: LD_ADDR_VAR 0 57
84334: PUSH
84335: LD_INT 2
84337: NEG
84338: PUSH
84339: LD_INT 1
84341: PUSH
84342: EMPTY
84343: LIST
84344: LIST
84345: PUSH
84346: LD_INT 3
84348: NEG
84349: PUSH
84350: LD_INT 0
84352: PUSH
84353: EMPTY
84354: LIST
84355: LIST
84356: PUSH
84357: LD_INT 3
84359: NEG
84360: PUSH
84361: LD_INT 1
84363: NEG
84364: PUSH
84365: EMPTY
84366: LIST
84367: LIST
84368: PUSH
84369: EMPTY
84370: LIST
84371: LIST
84372: LIST
84373: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
84374: LD_ADDR_VAR 0 58
84378: PUSH
84379: LD_INT 2
84381: NEG
84382: PUSH
84383: LD_INT 3
84385: NEG
84386: PUSH
84387: EMPTY
84388: LIST
84389: LIST
84390: PUSH
84391: LD_INT 3
84393: NEG
84394: PUSH
84395: LD_INT 2
84397: NEG
84398: PUSH
84399: EMPTY
84400: LIST
84401: LIST
84402: PUSH
84403: LD_INT 3
84405: NEG
84406: PUSH
84407: LD_INT 3
84409: NEG
84410: PUSH
84411: EMPTY
84412: LIST
84413: LIST
84414: PUSH
84415: EMPTY
84416: LIST
84417: LIST
84418: LIST
84419: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
84420: LD_ADDR_VAR 0 59
84424: PUSH
84425: LD_INT 1
84427: NEG
84428: PUSH
84429: LD_INT 2
84431: NEG
84432: PUSH
84433: EMPTY
84434: LIST
84435: LIST
84436: PUSH
84437: LD_INT 0
84439: PUSH
84440: LD_INT 2
84442: NEG
84443: PUSH
84444: EMPTY
84445: LIST
84446: LIST
84447: PUSH
84448: LD_INT 1
84450: PUSH
84451: LD_INT 1
84453: NEG
84454: PUSH
84455: EMPTY
84456: LIST
84457: LIST
84458: PUSH
84459: EMPTY
84460: LIST
84461: LIST
84462: LIST
84463: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
84464: LD_ADDR_VAR 0 60
84468: PUSH
84469: LD_INT 1
84471: PUSH
84472: LD_INT 1
84474: NEG
84475: PUSH
84476: EMPTY
84477: LIST
84478: LIST
84479: PUSH
84480: LD_INT 2
84482: PUSH
84483: LD_INT 0
84485: PUSH
84486: EMPTY
84487: LIST
84488: LIST
84489: PUSH
84490: LD_INT 2
84492: PUSH
84493: LD_INT 1
84495: PUSH
84496: EMPTY
84497: LIST
84498: LIST
84499: PUSH
84500: EMPTY
84501: LIST
84502: LIST
84503: LIST
84504: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
84505: LD_ADDR_VAR 0 61
84509: PUSH
84510: LD_INT 2
84512: PUSH
84513: LD_INT 1
84515: PUSH
84516: EMPTY
84517: LIST
84518: LIST
84519: PUSH
84520: LD_INT 2
84522: PUSH
84523: LD_INT 2
84525: PUSH
84526: EMPTY
84527: LIST
84528: LIST
84529: PUSH
84530: LD_INT 1
84532: PUSH
84533: LD_INT 2
84535: PUSH
84536: EMPTY
84537: LIST
84538: LIST
84539: PUSH
84540: EMPTY
84541: LIST
84542: LIST
84543: LIST
84544: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
84545: LD_ADDR_VAR 0 62
84549: PUSH
84550: LD_INT 1
84552: PUSH
84553: LD_INT 2
84555: PUSH
84556: EMPTY
84557: LIST
84558: LIST
84559: PUSH
84560: LD_INT 0
84562: PUSH
84563: LD_INT 2
84565: PUSH
84566: EMPTY
84567: LIST
84568: LIST
84569: PUSH
84570: LD_INT 1
84572: NEG
84573: PUSH
84574: LD_INT 1
84576: PUSH
84577: EMPTY
84578: LIST
84579: LIST
84580: PUSH
84581: EMPTY
84582: LIST
84583: LIST
84584: LIST
84585: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
84586: LD_ADDR_VAR 0 63
84590: PUSH
84591: LD_INT 1
84593: NEG
84594: PUSH
84595: LD_INT 1
84597: PUSH
84598: EMPTY
84599: LIST
84600: LIST
84601: PUSH
84602: LD_INT 2
84604: NEG
84605: PUSH
84606: LD_INT 0
84608: PUSH
84609: EMPTY
84610: LIST
84611: LIST
84612: PUSH
84613: LD_INT 2
84615: NEG
84616: PUSH
84617: LD_INT 1
84619: NEG
84620: PUSH
84621: EMPTY
84622: LIST
84623: LIST
84624: PUSH
84625: EMPTY
84626: LIST
84627: LIST
84628: LIST
84629: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
84630: LD_ADDR_VAR 0 64
84634: PUSH
84635: LD_INT 1
84637: NEG
84638: PUSH
84639: LD_INT 2
84641: NEG
84642: PUSH
84643: EMPTY
84644: LIST
84645: LIST
84646: PUSH
84647: LD_INT 2
84649: NEG
84650: PUSH
84651: LD_INT 1
84653: NEG
84654: PUSH
84655: EMPTY
84656: LIST
84657: LIST
84658: PUSH
84659: LD_INT 2
84661: NEG
84662: PUSH
84663: LD_INT 2
84665: NEG
84666: PUSH
84667: EMPTY
84668: LIST
84669: LIST
84670: PUSH
84671: EMPTY
84672: LIST
84673: LIST
84674: LIST
84675: ST_TO_ADDR
// end ; 2 :
84676: GO 87942
84678: LD_INT 2
84680: DOUBLE
84681: EQUAL
84682: IFTRUE 84686
84684: GO 87941
84686: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
84687: LD_ADDR_VAR 0 29
84691: PUSH
84692: LD_INT 4
84694: PUSH
84695: LD_INT 0
84697: PUSH
84698: EMPTY
84699: LIST
84700: LIST
84701: PUSH
84702: LD_INT 4
84704: PUSH
84705: LD_INT 1
84707: NEG
84708: PUSH
84709: EMPTY
84710: LIST
84711: LIST
84712: PUSH
84713: LD_INT 5
84715: PUSH
84716: LD_INT 0
84718: PUSH
84719: EMPTY
84720: LIST
84721: LIST
84722: PUSH
84723: LD_INT 5
84725: PUSH
84726: LD_INT 1
84728: PUSH
84729: EMPTY
84730: LIST
84731: LIST
84732: PUSH
84733: LD_INT 4
84735: PUSH
84736: LD_INT 1
84738: PUSH
84739: EMPTY
84740: LIST
84741: LIST
84742: PUSH
84743: LD_INT 3
84745: PUSH
84746: LD_INT 0
84748: PUSH
84749: EMPTY
84750: LIST
84751: LIST
84752: PUSH
84753: LD_INT 3
84755: PUSH
84756: LD_INT 1
84758: NEG
84759: PUSH
84760: EMPTY
84761: LIST
84762: LIST
84763: PUSH
84764: LD_INT 3
84766: PUSH
84767: LD_INT 2
84769: NEG
84770: PUSH
84771: EMPTY
84772: LIST
84773: LIST
84774: PUSH
84775: LD_INT 5
84777: PUSH
84778: LD_INT 2
84780: PUSH
84781: EMPTY
84782: LIST
84783: LIST
84784: PUSH
84785: LD_INT 3
84787: PUSH
84788: LD_INT 3
84790: PUSH
84791: EMPTY
84792: LIST
84793: LIST
84794: PUSH
84795: LD_INT 3
84797: PUSH
84798: LD_INT 2
84800: PUSH
84801: EMPTY
84802: LIST
84803: LIST
84804: PUSH
84805: LD_INT 4
84807: PUSH
84808: LD_INT 3
84810: PUSH
84811: EMPTY
84812: LIST
84813: LIST
84814: PUSH
84815: LD_INT 4
84817: PUSH
84818: LD_INT 4
84820: PUSH
84821: EMPTY
84822: LIST
84823: LIST
84824: PUSH
84825: LD_INT 3
84827: PUSH
84828: LD_INT 4
84830: PUSH
84831: EMPTY
84832: LIST
84833: LIST
84834: PUSH
84835: LD_INT 2
84837: PUSH
84838: LD_INT 3
84840: PUSH
84841: EMPTY
84842: LIST
84843: LIST
84844: PUSH
84845: LD_INT 2
84847: PUSH
84848: LD_INT 2
84850: PUSH
84851: EMPTY
84852: LIST
84853: LIST
84854: PUSH
84855: LD_INT 4
84857: PUSH
84858: LD_INT 2
84860: PUSH
84861: EMPTY
84862: LIST
84863: LIST
84864: PUSH
84865: LD_INT 2
84867: PUSH
84868: LD_INT 4
84870: PUSH
84871: EMPTY
84872: LIST
84873: LIST
84874: PUSH
84875: LD_INT 0
84877: PUSH
84878: LD_INT 4
84880: PUSH
84881: EMPTY
84882: LIST
84883: LIST
84884: PUSH
84885: LD_INT 0
84887: PUSH
84888: LD_INT 3
84890: PUSH
84891: EMPTY
84892: LIST
84893: LIST
84894: PUSH
84895: LD_INT 1
84897: PUSH
84898: LD_INT 4
84900: PUSH
84901: EMPTY
84902: LIST
84903: LIST
84904: PUSH
84905: LD_INT 1
84907: PUSH
84908: LD_INT 5
84910: PUSH
84911: EMPTY
84912: LIST
84913: LIST
84914: PUSH
84915: LD_INT 0
84917: PUSH
84918: LD_INT 5
84920: PUSH
84921: EMPTY
84922: LIST
84923: LIST
84924: PUSH
84925: LD_INT 1
84927: NEG
84928: PUSH
84929: LD_INT 4
84931: PUSH
84932: EMPTY
84933: LIST
84934: LIST
84935: PUSH
84936: LD_INT 1
84938: NEG
84939: PUSH
84940: LD_INT 3
84942: PUSH
84943: EMPTY
84944: LIST
84945: LIST
84946: PUSH
84947: LD_INT 2
84949: PUSH
84950: LD_INT 5
84952: PUSH
84953: EMPTY
84954: LIST
84955: LIST
84956: PUSH
84957: LD_INT 2
84959: NEG
84960: PUSH
84961: LD_INT 3
84963: PUSH
84964: EMPTY
84965: LIST
84966: LIST
84967: PUSH
84968: LD_INT 3
84970: NEG
84971: PUSH
84972: LD_INT 0
84974: PUSH
84975: EMPTY
84976: LIST
84977: LIST
84978: PUSH
84979: LD_INT 3
84981: NEG
84982: PUSH
84983: LD_INT 1
84985: NEG
84986: PUSH
84987: EMPTY
84988: LIST
84989: LIST
84990: PUSH
84991: LD_INT 2
84993: NEG
84994: PUSH
84995: LD_INT 0
84997: PUSH
84998: EMPTY
84999: LIST
85000: LIST
85001: PUSH
85002: LD_INT 2
85004: NEG
85005: PUSH
85006: LD_INT 1
85008: PUSH
85009: EMPTY
85010: LIST
85011: LIST
85012: PUSH
85013: LD_INT 3
85015: NEG
85016: PUSH
85017: LD_INT 1
85019: PUSH
85020: EMPTY
85021: LIST
85022: LIST
85023: PUSH
85024: LD_INT 4
85026: NEG
85027: PUSH
85028: LD_INT 0
85030: PUSH
85031: EMPTY
85032: LIST
85033: LIST
85034: PUSH
85035: LD_INT 4
85037: NEG
85038: PUSH
85039: LD_INT 1
85041: NEG
85042: PUSH
85043: EMPTY
85044: LIST
85045: LIST
85046: PUSH
85047: LD_INT 4
85049: NEG
85050: PUSH
85051: LD_INT 2
85053: NEG
85054: PUSH
85055: EMPTY
85056: LIST
85057: LIST
85058: PUSH
85059: LD_INT 2
85061: NEG
85062: PUSH
85063: LD_INT 2
85065: PUSH
85066: EMPTY
85067: LIST
85068: LIST
85069: PUSH
85070: LD_INT 4
85072: NEG
85073: PUSH
85074: LD_INT 4
85076: NEG
85077: PUSH
85078: EMPTY
85079: LIST
85080: LIST
85081: PUSH
85082: LD_INT 4
85084: NEG
85085: PUSH
85086: LD_INT 5
85088: NEG
85089: PUSH
85090: EMPTY
85091: LIST
85092: LIST
85093: PUSH
85094: LD_INT 3
85096: NEG
85097: PUSH
85098: LD_INT 4
85100: NEG
85101: PUSH
85102: EMPTY
85103: LIST
85104: LIST
85105: PUSH
85106: LD_INT 3
85108: NEG
85109: PUSH
85110: LD_INT 3
85112: NEG
85113: PUSH
85114: EMPTY
85115: LIST
85116: LIST
85117: PUSH
85118: LD_INT 4
85120: NEG
85121: PUSH
85122: LD_INT 3
85124: NEG
85125: PUSH
85126: EMPTY
85127: LIST
85128: LIST
85129: PUSH
85130: LD_INT 5
85132: NEG
85133: PUSH
85134: LD_INT 4
85136: NEG
85137: PUSH
85138: EMPTY
85139: LIST
85140: LIST
85141: PUSH
85142: LD_INT 5
85144: NEG
85145: PUSH
85146: LD_INT 5
85148: NEG
85149: PUSH
85150: EMPTY
85151: LIST
85152: LIST
85153: PUSH
85154: LD_INT 3
85156: NEG
85157: PUSH
85158: LD_INT 5
85160: NEG
85161: PUSH
85162: EMPTY
85163: LIST
85164: LIST
85165: PUSH
85166: LD_INT 5
85168: NEG
85169: PUSH
85170: LD_INT 3
85172: NEG
85173: PUSH
85174: EMPTY
85175: LIST
85176: LIST
85177: PUSH
85178: EMPTY
85179: LIST
85180: LIST
85181: LIST
85182: LIST
85183: LIST
85184: LIST
85185: LIST
85186: LIST
85187: LIST
85188: LIST
85189: LIST
85190: LIST
85191: LIST
85192: LIST
85193: LIST
85194: LIST
85195: LIST
85196: LIST
85197: LIST
85198: LIST
85199: LIST
85200: LIST
85201: LIST
85202: LIST
85203: LIST
85204: LIST
85205: LIST
85206: LIST
85207: LIST
85208: LIST
85209: LIST
85210: LIST
85211: LIST
85212: LIST
85213: LIST
85214: LIST
85215: LIST
85216: LIST
85217: LIST
85218: LIST
85219: LIST
85220: LIST
85221: LIST
85222: LIST
85223: LIST
85224: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
85225: LD_ADDR_VAR 0 30
85229: PUSH
85230: LD_INT 4
85232: PUSH
85233: LD_INT 4
85235: PUSH
85236: EMPTY
85237: LIST
85238: LIST
85239: PUSH
85240: LD_INT 4
85242: PUSH
85243: LD_INT 3
85245: PUSH
85246: EMPTY
85247: LIST
85248: LIST
85249: PUSH
85250: LD_INT 5
85252: PUSH
85253: LD_INT 4
85255: PUSH
85256: EMPTY
85257: LIST
85258: LIST
85259: PUSH
85260: LD_INT 5
85262: PUSH
85263: LD_INT 5
85265: PUSH
85266: EMPTY
85267: LIST
85268: LIST
85269: PUSH
85270: LD_INT 4
85272: PUSH
85273: LD_INT 5
85275: PUSH
85276: EMPTY
85277: LIST
85278: LIST
85279: PUSH
85280: LD_INT 3
85282: PUSH
85283: LD_INT 4
85285: PUSH
85286: EMPTY
85287: LIST
85288: LIST
85289: PUSH
85290: LD_INT 3
85292: PUSH
85293: LD_INT 3
85295: PUSH
85296: EMPTY
85297: LIST
85298: LIST
85299: PUSH
85300: LD_INT 5
85302: PUSH
85303: LD_INT 3
85305: PUSH
85306: EMPTY
85307: LIST
85308: LIST
85309: PUSH
85310: LD_INT 3
85312: PUSH
85313: LD_INT 5
85315: PUSH
85316: EMPTY
85317: LIST
85318: LIST
85319: PUSH
85320: LD_INT 0
85322: PUSH
85323: LD_INT 3
85325: PUSH
85326: EMPTY
85327: LIST
85328: LIST
85329: PUSH
85330: LD_INT 0
85332: PUSH
85333: LD_INT 2
85335: PUSH
85336: EMPTY
85337: LIST
85338: LIST
85339: PUSH
85340: LD_INT 1
85342: PUSH
85343: LD_INT 3
85345: PUSH
85346: EMPTY
85347: LIST
85348: LIST
85349: PUSH
85350: LD_INT 1
85352: PUSH
85353: LD_INT 4
85355: PUSH
85356: EMPTY
85357: LIST
85358: LIST
85359: PUSH
85360: LD_INT 0
85362: PUSH
85363: LD_INT 4
85365: PUSH
85366: EMPTY
85367: LIST
85368: LIST
85369: PUSH
85370: LD_INT 1
85372: NEG
85373: PUSH
85374: LD_INT 3
85376: PUSH
85377: EMPTY
85378: LIST
85379: LIST
85380: PUSH
85381: LD_INT 1
85383: NEG
85384: PUSH
85385: LD_INT 2
85387: PUSH
85388: EMPTY
85389: LIST
85390: LIST
85391: PUSH
85392: LD_INT 2
85394: PUSH
85395: LD_INT 4
85397: PUSH
85398: EMPTY
85399: LIST
85400: LIST
85401: PUSH
85402: LD_INT 2
85404: NEG
85405: PUSH
85406: LD_INT 2
85408: PUSH
85409: EMPTY
85410: LIST
85411: LIST
85412: PUSH
85413: LD_INT 4
85415: NEG
85416: PUSH
85417: LD_INT 0
85419: PUSH
85420: EMPTY
85421: LIST
85422: LIST
85423: PUSH
85424: LD_INT 4
85426: NEG
85427: PUSH
85428: LD_INT 1
85430: NEG
85431: PUSH
85432: EMPTY
85433: LIST
85434: LIST
85435: PUSH
85436: LD_INT 3
85438: NEG
85439: PUSH
85440: LD_INT 0
85442: PUSH
85443: EMPTY
85444: LIST
85445: LIST
85446: PUSH
85447: LD_INT 3
85449: NEG
85450: PUSH
85451: LD_INT 1
85453: PUSH
85454: EMPTY
85455: LIST
85456: LIST
85457: PUSH
85458: LD_INT 4
85460: NEG
85461: PUSH
85462: LD_INT 1
85464: PUSH
85465: EMPTY
85466: LIST
85467: LIST
85468: PUSH
85469: LD_INT 5
85471: NEG
85472: PUSH
85473: LD_INT 0
85475: PUSH
85476: EMPTY
85477: LIST
85478: LIST
85479: PUSH
85480: LD_INT 5
85482: NEG
85483: PUSH
85484: LD_INT 1
85486: NEG
85487: PUSH
85488: EMPTY
85489: LIST
85490: LIST
85491: PUSH
85492: LD_INT 5
85494: NEG
85495: PUSH
85496: LD_INT 2
85498: NEG
85499: PUSH
85500: EMPTY
85501: LIST
85502: LIST
85503: PUSH
85504: LD_INT 3
85506: NEG
85507: PUSH
85508: LD_INT 2
85510: PUSH
85511: EMPTY
85512: LIST
85513: LIST
85514: PUSH
85515: LD_INT 3
85517: NEG
85518: PUSH
85519: LD_INT 3
85521: NEG
85522: PUSH
85523: EMPTY
85524: LIST
85525: LIST
85526: PUSH
85527: LD_INT 3
85529: NEG
85530: PUSH
85531: LD_INT 4
85533: NEG
85534: PUSH
85535: EMPTY
85536: LIST
85537: LIST
85538: PUSH
85539: LD_INT 2
85541: NEG
85542: PUSH
85543: LD_INT 3
85545: NEG
85546: PUSH
85547: EMPTY
85548: LIST
85549: LIST
85550: PUSH
85551: LD_INT 2
85553: NEG
85554: PUSH
85555: LD_INT 2
85557: NEG
85558: PUSH
85559: EMPTY
85560: LIST
85561: LIST
85562: PUSH
85563: LD_INT 3
85565: NEG
85566: PUSH
85567: LD_INT 2
85569: NEG
85570: PUSH
85571: EMPTY
85572: LIST
85573: LIST
85574: PUSH
85575: LD_INT 4
85577: NEG
85578: PUSH
85579: LD_INT 3
85581: NEG
85582: PUSH
85583: EMPTY
85584: LIST
85585: LIST
85586: PUSH
85587: LD_INT 4
85589: NEG
85590: PUSH
85591: LD_INT 4
85593: NEG
85594: PUSH
85595: EMPTY
85596: LIST
85597: LIST
85598: PUSH
85599: LD_INT 2
85601: NEG
85602: PUSH
85603: LD_INT 4
85605: NEG
85606: PUSH
85607: EMPTY
85608: LIST
85609: LIST
85610: PUSH
85611: LD_INT 4
85613: NEG
85614: PUSH
85615: LD_INT 2
85617: NEG
85618: PUSH
85619: EMPTY
85620: LIST
85621: LIST
85622: PUSH
85623: LD_INT 0
85625: PUSH
85626: LD_INT 4
85628: NEG
85629: PUSH
85630: EMPTY
85631: LIST
85632: LIST
85633: PUSH
85634: LD_INT 0
85636: PUSH
85637: LD_INT 5
85639: NEG
85640: PUSH
85641: EMPTY
85642: LIST
85643: LIST
85644: PUSH
85645: LD_INT 1
85647: PUSH
85648: LD_INT 4
85650: NEG
85651: PUSH
85652: EMPTY
85653: LIST
85654: LIST
85655: PUSH
85656: LD_INT 1
85658: PUSH
85659: LD_INT 3
85661: NEG
85662: PUSH
85663: EMPTY
85664: LIST
85665: LIST
85666: PUSH
85667: LD_INT 0
85669: PUSH
85670: LD_INT 3
85672: NEG
85673: PUSH
85674: EMPTY
85675: LIST
85676: LIST
85677: PUSH
85678: LD_INT 1
85680: NEG
85681: PUSH
85682: LD_INT 4
85684: NEG
85685: PUSH
85686: EMPTY
85687: LIST
85688: LIST
85689: PUSH
85690: LD_INT 1
85692: NEG
85693: PUSH
85694: LD_INT 5
85696: NEG
85697: PUSH
85698: EMPTY
85699: LIST
85700: LIST
85701: PUSH
85702: LD_INT 2
85704: PUSH
85705: LD_INT 3
85707: NEG
85708: PUSH
85709: EMPTY
85710: LIST
85711: LIST
85712: PUSH
85713: LD_INT 2
85715: NEG
85716: PUSH
85717: LD_INT 5
85719: NEG
85720: PUSH
85721: EMPTY
85722: LIST
85723: LIST
85724: PUSH
85725: EMPTY
85726: LIST
85727: LIST
85728: LIST
85729: LIST
85730: LIST
85731: LIST
85732: LIST
85733: LIST
85734: LIST
85735: LIST
85736: LIST
85737: LIST
85738: LIST
85739: LIST
85740: LIST
85741: LIST
85742: LIST
85743: LIST
85744: LIST
85745: LIST
85746: LIST
85747: LIST
85748: LIST
85749: LIST
85750: LIST
85751: LIST
85752: LIST
85753: LIST
85754: LIST
85755: LIST
85756: LIST
85757: LIST
85758: LIST
85759: LIST
85760: LIST
85761: LIST
85762: LIST
85763: LIST
85764: LIST
85765: LIST
85766: LIST
85767: LIST
85768: LIST
85769: LIST
85770: LIST
85771: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
85772: LD_ADDR_VAR 0 31
85776: PUSH
85777: LD_INT 0
85779: PUSH
85780: LD_INT 4
85782: PUSH
85783: EMPTY
85784: LIST
85785: LIST
85786: PUSH
85787: LD_INT 0
85789: PUSH
85790: LD_INT 3
85792: PUSH
85793: EMPTY
85794: LIST
85795: LIST
85796: PUSH
85797: LD_INT 1
85799: PUSH
85800: LD_INT 4
85802: PUSH
85803: EMPTY
85804: LIST
85805: LIST
85806: PUSH
85807: LD_INT 1
85809: PUSH
85810: LD_INT 5
85812: PUSH
85813: EMPTY
85814: LIST
85815: LIST
85816: PUSH
85817: LD_INT 0
85819: PUSH
85820: LD_INT 5
85822: PUSH
85823: EMPTY
85824: LIST
85825: LIST
85826: PUSH
85827: LD_INT 1
85829: NEG
85830: PUSH
85831: LD_INT 4
85833: PUSH
85834: EMPTY
85835: LIST
85836: LIST
85837: PUSH
85838: LD_INT 1
85840: NEG
85841: PUSH
85842: LD_INT 3
85844: PUSH
85845: EMPTY
85846: LIST
85847: LIST
85848: PUSH
85849: LD_INT 2
85851: PUSH
85852: LD_INT 5
85854: PUSH
85855: EMPTY
85856: LIST
85857: LIST
85858: PUSH
85859: LD_INT 2
85861: NEG
85862: PUSH
85863: LD_INT 3
85865: PUSH
85866: EMPTY
85867: LIST
85868: LIST
85869: PUSH
85870: LD_INT 3
85872: NEG
85873: PUSH
85874: LD_INT 0
85876: PUSH
85877: EMPTY
85878: LIST
85879: LIST
85880: PUSH
85881: LD_INT 3
85883: NEG
85884: PUSH
85885: LD_INT 1
85887: NEG
85888: PUSH
85889: EMPTY
85890: LIST
85891: LIST
85892: PUSH
85893: LD_INT 2
85895: NEG
85896: PUSH
85897: LD_INT 0
85899: PUSH
85900: EMPTY
85901: LIST
85902: LIST
85903: PUSH
85904: LD_INT 2
85906: NEG
85907: PUSH
85908: LD_INT 1
85910: PUSH
85911: EMPTY
85912: LIST
85913: LIST
85914: PUSH
85915: LD_INT 3
85917: NEG
85918: PUSH
85919: LD_INT 1
85921: PUSH
85922: EMPTY
85923: LIST
85924: LIST
85925: PUSH
85926: LD_INT 4
85928: NEG
85929: PUSH
85930: LD_INT 0
85932: PUSH
85933: EMPTY
85934: LIST
85935: LIST
85936: PUSH
85937: LD_INT 4
85939: NEG
85940: PUSH
85941: LD_INT 1
85943: NEG
85944: PUSH
85945: EMPTY
85946: LIST
85947: LIST
85948: PUSH
85949: LD_INT 4
85951: NEG
85952: PUSH
85953: LD_INT 2
85955: NEG
85956: PUSH
85957: EMPTY
85958: LIST
85959: LIST
85960: PUSH
85961: LD_INT 2
85963: NEG
85964: PUSH
85965: LD_INT 2
85967: PUSH
85968: EMPTY
85969: LIST
85970: LIST
85971: PUSH
85972: LD_INT 4
85974: NEG
85975: PUSH
85976: LD_INT 4
85978: NEG
85979: PUSH
85980: EMPTY
85981: LIST
85982: LIST
85983: PUSH
85984: LD_INT 4
85986: NEG
85987: PUSH
85988: LD_INT 5
85990: NEG
85991: PUSH
85992: EMPTY
85993: LIST
85994: LIST
85995: PUSH
85996: LD_INT 3
85998: NEG
85999: PUSH
86000: LD_INT 4
86002: NEG
86003: PUSH
86004: EMPTY
86005: LIST
86006: LIST
86007: PUSH
86008: LD_INT 3
86010: NEG
86011: PUSH
86012: LD_INT 3
86014: NEG
86015: PUSH
86016: EMPTY
86017: LIST
86018: LIST
86019: PUSH
86020: LD_INT 4
86022: NEG
86023: PUSH
86024: LD_INT 3
86026: NEG
86027: PUSH
86028: EMPTY
86029: LIST
86030: LIST
86031: PUSH
86032: LD_INT 5
86034: NEG
86035: PUSH
86036: LD_INT 4
86038: NEG
86039: PUSH
86040: EMPTY
86041: LIST
86042: LIST
86043: PUSH
86044: LD_INT 5
86046: NEG
86047: PUSH
86048: LD_INT 5
86050: NEG
86051: PUSH
86052: EMPTY
86053: LIST
86054: LIST
86055: PUSH
86056: LD_INT 3
86058: NEG
86059: PUSH
86060: LD_INT 5
86062: NEG
86063: PUSH
86064: EMPTY
86065: LIST
86066: LIST
86067: PUSH
86068: LD_INT 5
86070: NEG
86071: PUSH
86072: LD_INT 3
86074: NEG
86075: PUSH
86076: EMPTY
86077: LIST
86078: LIST
86079: PUSH
86080: LD_INT 0
86082: PUSH
86083: LD_INT 3
86085: NEG
86086: PUSH
86087: EMPTY
86088: LIST
86089: LIST
86090: PUSH
86091: LD_INT 0
86093: PUSH
86094: LD_INT 4
86096: NEG
86097: PUSH
86098: EMPTY
86099: LIST
86100: LIST
86101: PUSH
86102: LD_INT 1
86104: PUSH
86105: LD_INT 3
86107: NEG
86108: PUSH
86109: EMPTY
86110: LIST
86111: LIST
86112: PUSH
86113: LD_INT 1
86115: PUSH
86116: LD_INT 2
86118: NEG
86119: PUSH
86120: EMPTY
86121: LIST
86122: LIST
86123: PUSH
86124: LD_INT 0
86126: PUSH
86127: LD_INT 2
86129: NEG
86130: PUSH
86131: EMPTY
86132: LIST
86133: LIST
86134: PUSH
86135: LD_INT 1
86137: NEG
86138: PUSH
86139: LD_INT 3
86141: NEG
86142: PUSH
86143: EMPTY
86144: LIST
86145: LIST
86146: PUSH
86147: LD_INT 1
86149: NEG
86150: PUSH
86151: LD_INT 4
86153: NEG
86154: PUSH
86155: EMPTY
86156: LIST
86157: LIST
86158: PUSH
86159: LD_INT 2
86161: PUSH
86162: LD_INT 2
86164: NEG
86165: PUSH
86166: EMPTY
86167: LIST
86168: LIST
86169: PUSH
86170: LD_INT 2
86172: NEG
86173: PUSH
86174: LD_INT 4
86176: NEG
86177: PUSH
86178: EMPTY
86179: LIST
86180: LIST
86181: PUSH
86182: LD_INT 4
86184: PUSH
86185: LD_INT 0
86187: PUSH
86188: EMPTY
86189: LIST
86190: LIST
86191: PUSH
86192: LD_INT 4
86194: PUSH
86195: LD_INT 1
86197: NEG
86198: PUSH
86199: EMPTY
86200: LIST
86201: LIST
86202: PUSH
86203: LD_INT 5
86205: PUSH
86206: LD_INT 0
86208: PUSH
86209: EMPTY
86210: LIST
86211: LIST
86212: PUSH
86213: LD_INT 5
86215: PUSH
86216: LD_INT 1
86218: PUSH
86219: EMPTY
86220: LIST
86221: LIST
86222: PUSH
86223: LD_INT 4
86225: PUSH
86226: LD_INT 1
86228: PUSH
86229: EMPTY
86230: LIST
86231: LIST
86232: PUSH
86233: LD_INT 3
86235: PUSH
86236: LD_INT 0
86238: PUSH
86239: EMPTY
86240: LIST
86241: LIST
86242: PUSH
86243: LD_INT 3
86245: PUSH
86246: LD_INT 1
86248: NEG
86249: PUSH
86250: EMPTY
86251: LIST
86252: LIST
86253: PUSH
86254: LD_INT 3
86256: PUSH
86257: LD_INT 2
86259: NEG
86260: PUSH
86261: EMPTY
86262: LIST
86263: LIST
86264: PUSH
86265: LD_INT 5
86267: PUSH
86268: LD_INT 2
86270: PUSH
86271: EMPTY
86272: LIST
86273: LIST
86274: PUSH
86275: EMPTY
86276: LIST
86277: LIST
86278: LIST
86279: LIST
86280: LIST
86281: LIST
86282: LIST
86283: LIST
86284: LIST
86285: LIST
86286: LIST
86287: LIST
86288: LIST
86289: LIST
86290: LIST
86291: LIST
86292: LIST
86293: LIST
86294: LIST
86295: LIST
86296: LIST
86297: LIST
86298: LIST
86299: LIST
86300: LIST
86301: LIST
86302: LIST
86303: LIST
86304: LIST
86305: LIST
86306: LIST
86307: LIST
86308: LIST
86309: LIST
86310: LIST
86311: LIST
86312: LIST
86313: LIST
86314: LIST
86315: LIST
86316: LIST
86317: LIST
86318: LIST
86319: LIST
86320: LIST
86321: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
86322: LD_ADDR_VAR 0 32
86326: PUSH
86327: LD_INT 4
86329: NEG
86330: PUSH
86331: LD_INT 0
86333: PUSH
86334: EMPTY
86335: LIST
86336: LIST
86337: PUSH
86338: LD_INT 4
86340: NEG
86341: PUSH
86342: LD_INT 1
86344: NEG
86345: PUSH
86346: EMPTY
86347: LIST
86348: LIST
86349: PUSH
86350: LD_INT 3
86352: NEG
86353: PUSH
86354: LD_INT 0
86356: PUSH
86357: EMPTY
86358: LIST
86359: LIST
86360: PUSH
86361: LD_INT 3
86363: NEG
86364: PUSH
86365: LD_INT 1
86367: PUSH
86368: EMPTY
86369: LIST
86370: LIST
86371: PUSH
86372: LD_INT 4
86374: NEG
86375: PUSH
86376: LD_INT 1
86378: PUSH
86379: EMPTY
86380: LIST
86381: LIST
86382: PUSH
86383: LD_INT 5
86385: NEG
86386: PUSH
86387: LD_INT 0
86389: PUSH
86390: EMPTY
86391: LIST
86392: LIST
86393: PUSH
86394: LD_INT 5
86396: NEG
86397: PUSH
86398: LD_INT 1
86400: NEG
86401: PUSH
86402: EMPTY
86403: LIST
86404: LIST
86405: PUSH
86406: LD_INT 5
86408: NEG
86409: PUSH
86410: LD_INT 2
86412: NEG
86413: PUSH
86414: EMPTY
86415: LIST
86416: LIST
86417: PUSH
86418: LD_INT 3
86420: NEG
86421: PUSH
86422: LD_INT 2
86424: PUSH
86425: EMPTY
86426: LIST
86427: LIST
86428: PUSH
86429: LD_INT 3
86431: NEG
86432: PUSH
86433: LD_INT 3
86435: NEG
86436: PUSH
86437: EMPTY
86438: LIST
86439: LIST
86440: PUSH
86441: LD_INT 3
86443: NEG
86444: PUSH
86445: LD_INT 4
86447: NEG
86448: PUSH
86449: EMPTY
86450: LIST
86451: LIST
86452: PUSH
86453: LD_INT 2
86455: NEG
86456: PUSH
86457: LD_INT 3
86459: NEG
86460: PUSH
86461: EMPTY
86462: LIST
86463: LIST
86464: PUSH
86465: LD_INT 2
86467: NEG
86468: PUSH
86469: LD_INT 2
86471: NEG
86472: PUSH
86473: EMPTY
86474: LIST
86475: LIST
86476: PUSH
86477: LD_INT 3
86479: NEG
86480: PUSH
86481: LD_INT 2
86483: NEG
86484: PUSH
86485: EMPTY
86486: LIST
86487: LIST
86488: PUSH
86489: LD_INT 4
86491: NEG
86492: PUSH
86493: LD_INT 3
86495: NEG
86496: PUSH
86497: EMPTY
86498: LIST
86499: LIST
86500: PUSH
86501: LD_INT 4
86503: NEG
86504: PUSH
86505: LD_INT 4
86507: NEG
86508: PUSH
86509: EMPTY
86510: LIST
86511: LIST
86512: PUSH
86513: LD_INT 2
86515: NEG
86516: PUSH
86517: LD_INT 4
86519: NEG
86520: PUSH
86521: EMPTY
86522: LIST
86523: LIST
86524: PUSH
86525: LD_INT 4
86527: NEG
86528: PUSH
86529: LD_INT 2
86531: NEG
86532: PUSH
86533: EMPTY
86534: LIST
86535: LIST
86536: PUSH
86537: LD_INT 0
86539: PUSH
86540: LD_INT 4
86542: NEG
86543: PUSH
86544: EMPTY
86545: LIST
86546: LIST
86547: PUSH
86548: LD_INT 0
86550: PUSH
86551: LD_INT 5
86553: NEG
86554: PUSH
86555: EMPTY
86556: LIST
86557: LIST
86558: PUSH
86559: LD_INT 1
86561: PUSH
86562: LD_INT 4
86564: NEG
86565: PUSH
86566: EMPTY
86567: LIST
86568: LIST
86569: PUSH
86570: LD_INT 1
86572: PUSH
86573: LD_INT 3
86575: NEG
86576: PUSH
86577: EMPTY
86578: LIST
86579: LIST
86580: PUSH
86581: LD_INT 0
86583: PUSH
86584: LD_INT 3
86586: NEG
86587: PUSH
86588: EMPTY
86589: LIST
86590: LIST
86591: PUSH
86592: LD_INT 1
86594: NEG
86595: PUSH
86596: LD_INT 4
86598: NEG
86599: PUSH
86600: EMPTY
86601: LIST
86602: LIST
86603: PUSH
86604: LD_INT 1
86606: NEG
86607: PUSH
86608: LD_INT 5
86610: NEG
86611: PUSH
86612: EMPTY
86613: LIST
86614: LIST
86615: PUSH
86616: LD_INT 2
86618: PUSH
86619: LD_INT 3
86621: NEG
86622: PUSH
86623: EMPTY
86624: LIST
86625: LIST
86626: PUSH
86627: LD_INT 2
86629: NEG
86630: PUSH
86631: LD_INT 5
86633: NEG
86634: PUSH
86635: EMPTY
86636: LIST
86637: LIST
86638: PUSH
86639: LD_INT 3
86641: PUSH
86642: LD_INT 0
86644: PUSH
86645: EMPTY
86646: LIST
86647: LIST
86648: PUSH
86649: LD_INT 3
86651: PUSH
86652: LD_INT 1
86654: NEG
86655: PUSH
86656: EMPTY
86657: LIST
86658: LIST
86659: PUSH
86660: LD_INT 4
86662: PUSH
86663: LD_INT 0
86665: PUSH
86666: EMPTY
86667: LIST
86668: LIST
86669: PUSH
86670: LD_INT 4
86672: PUSH
86673: LD_INT 1
86675: PUSH
86676: EMPTY
86677: LIST
86678: LIST
86679: PUSH
86680: LD_INT 3
86682: PUSH
86683: LD_INT 1
86685: PUSH
86686: EMPTY
86687: LIST
86688: LIST
86689: PUSH
86690: LD_INT 2
86692: PUSH
86693: LD_INT 0
86695: PUSH
86696: EMPTY
86697: LIST
86698: LIST
86699: PUSH
86700: LD_INT 2
86702: PUSH
86703: LD_INT 1
86705: NEG
86706: PUSH
86707: EMPTY
86708: LIST
86709: LIST
86710: PUSH
86711: LD_INT 2
86713: PUSH
86714: LD_INT 2
86716: NEG
86717: PUSH
86718: EMPTY
86719: LIST
86720: LIST
86721: PUSH
86722: LD_INT 4
86724: PUSH
86725: LD_INT 2
86727: PUSH
86728: EMPTY
86729: LIST
86730: LIST
86731: PUSH
86732: LD_INT 4
86734: PUSH
86735: LD_INT 4
86737: PUSH
86738: EMPTY
86739: LIST
86740: LIST
86741: PUSH
86742: LD_INT 4
86744: PUSH
86745: LD_INT 3
86747: PUSH
86748: EMPTY
86749: LIST
86750: LIST
86751: PUSH
86752: LD_INT 5
86754: PUSH
86755: LD_INT 4
86757: PUSH
86758: EMPTY
86759: LIST
86760: LIST
86761: PUSH
86762: LD_INT 5
86764: PUSH
86765: LD_INT 5
86767: PUSH
86768: EMPTY
86769: LIST
86770: LIST
86771: PUSH
86772: LD_INT 4
86774: PUSH
86775: LD_INT 5
86777: PUSH
86778: EMPTY
86779: LIST
86780: LIST
86781: PUSH
86782: LD_INT 3
86784: PUSH
86785: LD_INT 4
86787: PUSH
86788: EMPTY
86789: LIST
86790: LIST
86791: PUSH
86792: LD_INT 3
86794: PUSH
86795: LD_INT 3
86797: PUSH
86798: EMPTY
86799: LIST
86800: LIST
86801: PUSH
86802: LD_INT 5
86804: PUSH
86805: LD_INT 3
86807: PUSH
86808: EMPTY
86809: LIST
86810: LIST
86811: PUSH
86812: LD_INT 3
86814: PUSH
86815: LD_INT 5
86817: PUSH
86818: EMPTY
86819: LIST
86820: LIST
86821: PUSH
86822: EMPTY
86823: LIST
86824: LIST
86825: LIST
86826: LIST
86827: LIST
86828: LIST
86829: LIST
86830: LIST
86831: LIST
86832: LIST
86833: LIST
86834: LIST
86835: LIST
86836: LIST
86837: LIST
86838: LIST
86839: LIST
86840: LIST
86841: LIST
86842: LIST
86843: LIST
86844: LIST
86845: LIST
86846: LIST
86847: LIST
86848: LIST
86849: LIST
86850: LIST
86851: LIST
86852: LIST
86853: LIST
86854: LIST
86855: LIST
86856: LIST
86857: LIST
86858: LIST
86859: LIST
86860: LIST
86861: LIST
86862: LIST
86863: LIST
86864: LIST
86865: LIST
86866: LIST
86867: LIST
86868: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
86869: LD_ADDR_VAR 0 33
86873: PUSH
86874: LD_INT 4
86876: NEG
86877: PUSH
86878: LD_INT 4
86880: NEG
86881: PUSH
86882: EMPTY
86883: LIST
86884: LIST
86885: PUSH
86886: LD_INT 4
86888: NEG
86889: PUSH
86890: LD_INT 5
86892: NEG
86893: PUSH
86894: EMPTY
86895: LIST
86896: LIST
86897: PUSH
86898: LD_INT 3
86900: NEG
86901: PUSH
86902: LD_INT 4
86904: NEG
86905: PUSH
86906: EMPTY
86907: LIST
86908: LIST
86909: PUSH
86910: LD_INT 3
86912: NEG
86913: PUSH
86914: LD_INT 3
86916: NEG
86917: PUSH
86918: EMPTY
86919: LIST
86920: LIST
86921: PUSH
86922: LD_INT 4
86924: NEG
86925: PUSH
86926: LD_INT 3
86928: NEG
86929: PUSH
86930: EMPTY
86931: LIST
86932: LIST
86933: PUSH
86934: LD_INT 5
86936: NEG
86937: PUSH
86938: LD_INT 4
86940: NEG
86941: PUSH
86942: EMPTY
86943: LIST
86944: LIST
86945: PUSH
86946: LD_INT 5
86948: NEG
86949: PUSH
86950: LD_INT 5
86952: NEG
86953: PUSH
86954: EMPTY
86955: LIST
86956: LIST
86957: PUSH
86958: LD_INT 3
86960: NEG
86961: PUSH
86962: LD_INT 5
86964: NEG
86965: PUSH
86966: EMPTY
86967: LIST
86968: LIST
86969: PUSH
86970: LD_INT 5
86972: NEG
86973: PUSH
86974: LD_INT 3
86976: NEG
86977: PUSH
86978: EMPTY
86979: LIST
86980: LIST
86981: PUSH
86982: LD_INT 0
86984: PUSH
86985: LD_INT 3
86987: NEG
86988: PUSH
86989: EMPTY
86990: LIST
86991: LIST
86992: PUSH
86993: LD_INT 0
86995: PUSH
86996: LD_INT 4
86998: NEG
86999: PUSH
87000: EMPTY
87001: LIST
87002: LIST
87003: PUSH
87004: LD_INT 1
87006: PUSH
87007: LD_INT 3
87009: NEG
87010: PUSH
87011: EMPTY
87012: LIST
87013: LIST
87014: PUSH
87015: LD_INT 1
87017: PUSH
87018: LD_INT 2
87020: NEG
87021: PUSH
87022: EMPTY
87023: LIST
87024: LIST
87025: PUSH
87026: LD_INT 0
87028: PUSH
87029: LD_INT 2
87031: NEG
87032: PUSH
87033: EMPTY
87034: LIST
87035: LIST
87036: PUSH
87037: LD_INT 1
87039: NEG
87040: PUSH
87041: LD_INT 3
87043: NEG
87044: PUSH
87045: EMPTY
87046: LIST
87047: LIST
87048: PUSH
87049: LD_INT 1
87051: NEG
87052: PUSH
87053: LD_INT 4
87055: NEG
87056: PUSH
87057: EMPTY
87058: LIST
87059: LIST
87060: PUSH
87061: LD_INT 2
87063: PUSH
87064: LD_INT 2
87066: NEG
87067: PUSH
87068: EMPTY
87069: LIST
87070: LIST
87071: PUSH
87072: LD_INT 2
87074: NEG
87075: PUSH
87076: LD_INT 4
87078: NEG
87079: PUSH
87080: EMPTY
87081: LIST
87082: LIST
87083: PUSH
87084: LD_INT 4
87086: PUSH
87087: LD_INT 0
87089: PUSH
87090: EMPTY
87091: LIST
87092: LIST
87093: PUSH
87094: LD_INT 4
87096: PUSH
87097: LD_INT 1
87099: NEG
87100: PUSH
87101: EMPTY
87102: LIST
87103: LIST
87104: PUSH
87105: LD_INT 5
87107: PUSH
87108: LD_INT 0
87110: PUSH
87111: EMPTY
87112: LIST
87113: LIST
87114: PUSH
87115: LD_INT 5
87117: PUSH
87118: LD_INT 1
87120: PUSH
87121: EMPTY
87122: LIST
87123: LIST
87124: PUSH
87125: LD_INT 4
87127: PUSH
87128: LD_INT 1
87130: PUSH
87131: EMPTY
87132: LIST
87133: LIST
87134: PUSH
87135: LD_INT 3
87137: PUSH
87138: LD_INT 0
87140: PUSH
87141: EMPTY
87142: LIST
87143: LIST
87144: PUSH
87145: LD_INT 3
87147: PUSH
87148: LD_INT 1
87150: NEG
87151: PUSH
87152: EMPTY
87153: LIST
87154: LIST
87155: PUSH
87156: LD_INT 3
87158: PUSH
87159: LD_INT 2
87161: NEG
87162: PUSH
87163: EMPTY
87164: LIST
87165: LIST
87166: PUSH
87167: LD_INT 5
87169: PUSH
87170: LD_INT 2
87172: PUSH
87173: EMPTY
87174: LIST
87175: LIST
87176: PUSH
87177: LD_INT 3
87179: PUSH
87180: LD_INT 3
87182: PUSH
87183: EMPTY
87184: LIST
87185: LIST
87186: PUSH
87187: LD_INT 3
87189: PUSH
87190: LD_INT 2
87192: PUSH
87193: EMPTY
87194: LIST
87195: LIST
87196: PUSH
87197: LD_INT 4
87199: PUSH
87200: LD_INT 3
87202: PUSH
87203: EMPTY
87204: LIST
87205: LIST
87206: PUSH
87207: LD_INT 4
87209: PUSH
87210: LD_INT 4
87212: PUSH
87213: EMPTY
87214: LIST
87215: LIST
87216: PUSH
87217: LD_INT 3
87219: PUSH
87220: LD_INT 4
87222: PUSH
87223: EMPTY
87224: LIST
87225: LIST
87226: PUSH
87227: LD_INT 2
87229: PUSH
87230: LD_INT 3
87232: PUSH
87233: EMPTY
87234: LIST
87235: LIST
87236: PUSH
87237: LD_INT 2
87239: PUSH
87240: LD_INT 2
87242: PUSH
87243: EMPTY
87244: LIST
87245: LIST
87246: PUSH
87247: LD_INT 4
87249: PUSH
87250: LD_INT 2
87252: PUSH
87253: EMPTY
87254: LIST
87255: LIST
87256: PUSH
87257: LD_INT 2
87259: PUSH
87260: LD_INT 4
87262: PUSH
87263: EMPTY
87264: LIST
87265: LIST
87266: PUSH
87267: LD_INT 0
87269: PUSH
87270: LD_INT 4
87272: PUSH
87273: EMPTY
87274: LIST
87275: LIST
87276: PUSH
87277: LD_INT 0
87279: PUSH
87280: LD_INT 3
87282: PUSH
87283: EMPTY
87284: LIST
87285: LIST
87286: PUSH
87287: LD_INT 1
87289: PUSH
87290: LD_INT 4
87292: PUSH
87293: EMPTY
87294: LIST
87295: LIST
87296: PUSH
87297: LD_INT 1
87299: PUSH
87300: LD_INT 5
87302: PUSH
87303: EMPTY
87304: LIST
87305: LIST
87306: PUSH
87307: LD_INT 0
87309: PUSH
87310: LD_INT 5
87312: PUSH
87313: EMPTY
87314: LIST
87315: LIST
87316: PUSH
87317: LD_INT 1
87319: NEG
87320: PUSH
87321: LD_INT 4
87323: PUSH
87324: EMPTY
87325: LIST
87326: LIST
87327: PUSH
87328: LD_INT 1
87330: NEG
87331: PUSH
87332: LD_INT 3
87334: PUSH
87335: EMPTY
87336: LIST
87337: LIST
87338: PUSH
87339: LD_INT 2
87341: PUSH
87342: LD_INT 5
87344: PUSH
87345: EMPTY
87346: LIST
87347: LIST
87348: PUSH
87349: LD_INT 2
87351: NEG
87352: PUSH
87353: LD_INT 3
87355: PUSH
87356: EMPTY
87357: LIST
87358: LIST
87359: PUSH
87360: EMPTY
87361: LIST
87362: LIST
87363: LIST
87364: LIST
87365: LIST
87366: LIST
87367: LIST
87368: LIST
87369: LIST
87370: LIST
87371: LIST
87372: LIST
87373: LIST
87374: LIST
87375: LIST
87376: LIST
87377: LIST
87378: LIST
87379: LIST
87380: LIST
87381: LIST
87382: LIST
87383: LIST
87384: LIST
87385: LIST
87386: LIST
87387: LIST
87388: LIST
87389: LIST
87390: LIST
87391: LIST
87392: LIST
87393: LIST
87394: LIST
87395: LIST
87396: LIST
87397: LIST
87398: LIST
87399: LIST
87400: LIST
87401: LIST
87402: LIST
87403: LIST
87404: LIST
87405: LIST
87406: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
87407: LD_ADDR_VAR 0 34
87411: PUSH
87412: LD_INT 0
87414: PUSH
87415: LD_INT 4
87417: NEG
87418: PUSH
87419: EMPTY
87420: LIST
87421: LIST
87422: PUSH
87423: LD_INT 0
87425: PUSH
87426: LD_INT 5
87428: NEG
87429: PUSH
87430: EMPTY
87431: LIST
87432: LIST
87433: PUSH
87434: LD_INT 1
87436: PUSH
87437: LD_INT 4
87439: NEG
87440: PUSH
87441: EMPTY
87442: LIST
87443: LIST
87444: PUSH
87445: LD_INT 1
87447: PUSH
87448: LD_INT 3
87450: NEG
87451: PUSH
87452: EMPTY
87453: LIST
87454: LIST
87455: PUSH
87456: LD_INT 0
87458: PUSH
87459: LD_INT 3
87461: NEG
87462: PUSH
87463: EMPTY
87464: LIST
87465: LIST
87466: PUSH
87467: LD_INT 1
87469: NEG
87470: PUSH
87471: LD_INT 4
87473: NEG
87474: PUSH
87475: EMPTY
87476: LIST
87477: LIST
87478: PUSH
87479: LD_INT 1
87481: NEG
87482: PUSH
87483: LD_INT 5
87485: NEG
87486: PUSH
87487: EMPTY
87488: LIST
87489: LIST
87490: PUSH
87491: LD_INT 2
87493: PUSH
87494: LD_INT 3
87496: NEG
87497: PUSH
87498: EMPTY
87499: LIST
87500: LIST
87501: PUSH
87502: LD_INT 2
87504: NEG
87505: PUSH
87506: LD_INT 5
87508: NEG
87509: PUSH
87510: EMPTY
87511: LIST
87512: LIST
87513: PUSH
87514: LD_INT 3
87516: PUSH
87517: LD_INT 0
87519: PUSH
87520: EMPTY
87521: LIST
87522: LIST
87523: PUSH
87524: LD_INT 3
87526: PUSH
87527: LD_INT 1
87529: NEG
87530: PUSH
87531: EMPTY
87532: LIST
87533: LIST
87534: PUSH
87535: LD_INT 4
87537: PUSH
87538: LD_INT 0
87540: PUSH
87541: EMPTY
87542: LIST
87543: LIST
87544: PUSH
87545: LD_INT 4
87547: PUSH
87548: LD_INT 1
87550: PUSH
87551: EMPTY
87552: LIST
87553: LIST
87554: PUSH
87555: LD_INT 3
87557: PUSH
87558: LD_INT 1
87560: PUSH
87561: EMPTY
87562: LIST
87563: LIST
87564: PUSH
87565: LD_INT 2
87567: PUSH
87568: LD_INT 0
87570: PUSH
87571: EMPTY
87572: LIST
87573: LIST
87574: PUSH
87575: LD_INT 2
87577: PUSH
87578: LD_INT 1
87580: NEG
87581: PUSH
87582: EMPTY
87583: LIST
87584: LIST
87585: PUSH
87586: LD_INT 2
87588: PUSH
87589: LD_INT 2
87591: NEG
87592: PUSH
87593: EMPTY
87594: LIST
87595: LIST
87596: PUSH
87597: LD_INT 4
87599: PUSH
87600: LD_INT 2
87602: PUSH
87603: EMPTY
87604: LIST
87605: LIST
87606: PUSH
87607: LD_INT 4
87609: PUSH
87610: LD_INT 4
87612: PUSH
87613: EMPTY
87614: LIST
87615: LIST
87616: PUSH
87617: LD_INT 4
87619: PUSH
87620: LD_INT 3
87622: PUSH
87623: EMPTY
87624: LIST
87625: LIST
87626: PUSH
87627: LD_INT 5
87629: PUSH
87630: LD_INT 4
87632: PUSH
87633: EMPTY
87634: LIST
87635: LIST
87636: PUSH
87637: LD_INT 5
87639: PUSH
87640: LD_INT 5
87642: PUSH
87643: EMPTY
87644: LIST
87645: LIST
87646: PUSH
87647: LD_INT 4
87649: PUSH
87650: LD_INT 5
87652: PUSH
87653: EMPTY
87654: LIST
87655: LIST
87656: PUSH
87657: LD_INT 3
87659: PUSH
87660: LD_INT 4
87662: PUSH
87663: EMPTY
87664: LIST
87665: LIST
87666: PUSH
87667: LD_INT 3
87669: PUSH
87670: LD_INT 3
87672: PUSH
87673: EMPTY
87674: LIST
87675: LIST
87676: PUSH
87677: LD_INT 5
87679: PUSH
87680: LD_INT 3
87682: PUSH
87683: EMPTY
87684: LIST
87685: LIST
87686: PUSH
87687: LD_INT 3
87689: PUSH
87690: LD_INT 5
87692: PUSH
87693: EMPTY
87694: LIST
87695: LIST
87696: PUSH
87697: LD_INT 0
87699: PUSH
87700: LD_INT 3
87702: PUSH
87703: EMPTY
87704: LIST
87705: LIST
87706: PUSH
87707: LD_INT 0
87709: PUSH
87710: LD_INT 2
87712: PUSH
87713: EMPTY
87714: LIST
87715: LIST
87716: PUSH
87717: LD_INT 1
87719: PUSH
87720: LD_INT 3
87722: PUSH
87723: EMPTY
87724: LIST
87725: LIST
87726: PUSH
87727: LD_INT 1
87729: PUSH
87730: LD_INT 4
87732: PUSH
87733: EMPTY
87734: LIST
87735: LIST
87736: PUSH
87737: LD_INT 0
87739: PUSH
87740: LD_INT 4
87742: PUSH
87743: EMPTY
87744: LIST
87745: LIST
87746: PUSH
87747: LD_INT 1
87749: NEG
87750: PUSH
87751: LD_INT 3
87753: PUSH
87754: EMPTY
87755: LIST
87756: LIST
87757: PUSH
87758: LD_INT 1
87760: NEG
87761: PUSH
87762: LD_INT 2
87764: PUSH
87765: EMPTY
87766: LIST
87767: LIST
87768: PUSH
87769: LD_INT 2
87771: PUSH
87772: LD_INT 4
87774: PUSH
87775: EMPTY
87776: LIST
87777: LIST
87778: PUSH
87779: LD_INT 2
87781: NEG
87782: PUSH
87783: LD_INT 2
87785: PUSH
87786: EMPTY
87787: LIST
87788: LIST
87789: PUSH
87790: LD_INT 4
87792: NEG
87793: PUSH
87794: LD_INT 0
87796: PUSH
87797: EMPTY
87798: LIST
87799: LIST
87800: PUSH
87801: LD_INT 4
87803: NEG
87804: PUSH
87805: LD_INT 1
87807: NEG
87808: PUSH
87809: EMPTY
87810: LIST
87811: LIST
87812: PUSH
87813: LD_INT 3
87815: NEG
87816: PUSH
87817: LD_INT 0
87819: PUSH
87820: EMPTY
87821: LIST
87822: LIST
87823: PUSH
87824: LD_INT 3
87826: NEG
87827: PUSH
87828: LD_INT 1
87830: PUSH
87831: EMPTY
87832: LIST
87833: LIST
87834: PUSH
87835: LD_INT 4
87837: NEG
87838: PUSH
87839: LD_INT 1
87841: PUSH
87842: EMPTY
87843: LIST
87844: LIST
87845: PUSH
87846: LD_INT 5
87848: NEG
87849: PUSH
87850: LD_INT 0
87852: PUSH
87853: EMPTY
87854: LIST
87855: LIST
87856: PUSH
87857: LD_INT 5
87859: NEG
87860: PUSH
87861: LD_INT 1
87863: NEG
87864: PUSH
87865: EMPTY
87866: LIST
87867: LIST
87868: PUSH
87869: LD_INT 5
87871: NEG
87872: PUSH
87873: LD_INT 2
87875: NEG
87876: PUSH
87877: EMPTY
87878: LIST
87879: LIST
87880: PUSH
87881: LD_INT 3
87883: NEG
87884: PUSH
87885: LD_INT 2
87887: PUSH
87888: EMPTY
87889: LIST
87890: LIST
87891: PUSH
87892: EMPTY
87893: LIST
87894: LIST
87895: LIST
87896: LIST
87897: LIST
87898: LIST
87899: LIST
87900: LIST
87901: LIST
87902: LIST
87903: LIST
87904: LIST
87905: LIST
87906: LIST
87907: LIST
87908: LIST
87909: LIST
87910: LIST
87911: LIST
87912: LIST
87913: LIST
87914: LIST
87915: LIST
87916: LIST
87917: LIST
87918: LIST
87919: LIST
87920: LIST
87921: LIST
87922: LIST
87923: LIST
87924: LIST
87925: LIST
87926: LIST
87927: LIST
87928: LIST
87929: LIST
87930: LIST
87931: LIST
87932: LIST
87933: LIST
87934: LIST
87935: LIST
87936: LIST
87937: LIST
87938: ST_TO_ADDR
// end ; end ;
87939: GO 87942
87941: POP
// case btype of b_depot , b_warehouse :
87942: LD_VAR 0 1
87946: PUSH
87947: LD_INT 0
87949: DOUBLE
87950: EQUAL
87951: IFTRUE 87961
87953: LD_INT 1
87955: DOUBLE
87956: EQUAL
87957: IFTRUE 87961
87959: GO 88162
87961: POP
// case nation of nation_american :
87962: LD_VAR 0 5
87966: PUSH
87967: LD_INT 1
87969: DOUBLE
87970: EQUAL
87971: IFTRUE 87975
87973: GO 88031
87975: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
87976: LD_ADDR_VAR 0 9
87980: PUSH
87981: LD_VAR 0 11
87985: PUSH
87986: LD_VAR 0 12
87990: PUSH
87991: LD_VAR 0 13
87995: PUSH
87996: LD_VAR 0 14
88000: PUSH
88001: LD_VAR 0 15
88005: PUSH
88006: LD_VAR 0 16
88010: PUSH
88011: EMPTY
88012: LIST
88013: LIST
88014: LIST
88015: LIST
88016: LIST
88017: LIST
88018: PUSH
88019: LD_VAR 0 4
88023: PUSH
88024: LD_INT 1
88026: PLUS
88027: ARRAY
88028: ST_TO_ADDR
88029: GO 88160
88031: LD_INT 2
88033: DOUBLE
88034: EQUAL
88035: IFTRUE 88039
88037: GO 88095
88039: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
88040: LD_ADDR_VAR 0 9
88044: PUSH
88045: LD_VAR 0 17
88049: PUSH
88050: LD_VAR 0 18
88054: PUSH
88055: LD_VAR 0 19
88059: PUSH
88060: LD_VAR 0 20
88064: PUSH
88065: LD_VAR 0 21
88069: PUSH
88070: LD_VAR 0 22
88074: PUSH
88075: EMPTY
88076: LIST
88077: LIST
88078: LIST
88079: LIST
88080: LIST
88081: LIST
88082: PUSH
88083: LD_VAR 0 4
88087: PUSH
88088: LD_INT 1
88090: PLUS
88091: ARRAY
88092: ST_TO_ADDR
88093: GO 88160
88095: LD_INT 3
88097: DOUBLE
88098: EQUAL
88099: IFTRUE 88103
88101: GO 88159
88103: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
88104: LD_ADDR_VAR 0 9
88108: PUSH
88109: LD_VAR 0 23
88113: PUSH
88114: LD_VAR 0 24
88118: PUSH
88119: LD_VAR 0 25
88123: PUSH
88124: LD_VAR 0 26
88128: PUSH
88129: LD_VAR 0 27
88133: PUSH
88134: LD_VAR 0 28
88138: PUSH
88139: EMPTY
88140: LIST
88141: LIST
88142: LIST
88143: LIST
88144: LIST
88145: LIST
88146: PUSH
88147: LD_VAR 0 4
88151: PUSH
88152: LD_INT 1
88154: PLUS
88155: ARRAY
88156: ST_TO_ADDR
88157: GO 88160
88159: POP
88160: GO 88715
88162: LD_INT 2
88164: DOUBLE
88165: EQUAL
88166: IFTRUE 88176
88168: LD_INT 3
88170: DOUBLE
88171: EQUAL
88172: IFTRUE 88176
88174: GO 88232
88176: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
88177: LD_ADDR_VAR 0 9
88181: PUSH
88182: LD_VAR 0 29
88186: PUSH
88187: LD_VAR 0 30
88191: PUSH
88192: LD_VAR 0 31
88196: PUSH
88197: LD_VAR 0 32
88201: PUSH
88202: LD_VAR 0 33
88206: PUSH
88207: LD_VAR 0 34
88211: PUSH
88212: EMPTY
88213: LIST
88214: LIST
88215: LIST
88216: LIST
88217: LIST
88218: LIST
88219: PUSH
88220: LD_VAR 0 4
88224: PUSH
88225: LD_INT 1
88227: PLUS
88228: ARRAY
88229: ST_TO_ADDR
88230: GO 88715
88232: LD_INT 16
88234: DOUBLE
88235: EQUAL
88236: IFTRUE 88294
88238: LD_INT 17
88240: DOUBLE
88241: EQUAL
88242: IFTRUE 88294
88244: LD_INT 18
88246: DOUBLE
88247: EQUAL
88248: IFTRUE 88294
88250: LD_INT 19
88252: DOUBLE
88253: EQUAL
88254: IFTRUE 88294
88256: LD_INT 22
88258: DOUBLE
88259: EQUAL
88260: IFTRUE 88294
88262: LD_INT 20
88264: DOUBLE
88265: EQUAL
88266: IFTRUE 88294
88268: LD_INT 21
88270: DOUBLE
88271: EQUAL
88272: IFTRUE 88294
88274: LD_INT 23
88276: DOUBLE
88277: EQUAL
88278: IFTRUE 88294
88280: LD_INT 24
88282: DOUBLE
88283: EQUAL
88284: IFTRUE 88294
88286: LD_INT 25
88288: DOUBLE
88289: EQUAL
88290: IFTRUE 88294
88292: GO 88350
88294: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
88295: LD_ADDR_VAR 0 9
88299: PUSH
88300: LD_VAR 0 35
88304: PUSH
88305: LD_VAR 0 36
88309: PUSH
88310: LD_VAR 0 37
88314: PUSH
88315: LD_VAR 0 38
88319: PUSH
88320: LD_VAR 0 39
88324: PUSH
88325: LD_VAR 0 40
88329: PUSH
88330: EMPTY
88331: LIST
88332: LIST
88333: LIST
88334: LIST
88335: LIST
88336: LIST
88337: PUSH
88338: LD_VAR 0 4
88342: PUSH
88343: LD_INT 1
88345: PLUS
88346: ARRAY
88347: ST_TO_ADDR
88348: GO 88715
88350: LD_INT 6
88352: DOUBLE
88353: EQUAL
88354: IFTRUE 88406
88356: LD_INT 7
88358: DOUBLE
88359: EQUAL
88360: IFTRUE 88406
88362: LD_INT 8
88364: DOUBLE
88365: EQUAL
88366: IFTRUE 88406
88368: LD_INT 13
88370: DOUBLE
88371: EQUAL
88372: IFTRUE 88406
88374: LD_INT 12
88376: DOUBLE
88377: EQUAL
88378: IFTRUE 88406
88380: LD_INT 15
88382: DOUBLE
88383: EQUAL
88384: IFTRUE 88406
88386: LD_INT 11
88388: DOUBLE
88389: EQUAL
88390: IFTRUE 88406
88392: LD_INT 14
88394: DOUBLE
88395: EQUAL
88396: IFTRUE 88406
88398: LD_INT 10
88400: DOUBLE
88401: EQUAL
88402: IFTRUE 88406
88404: GO 88462
88406: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
88407: LD_ADDR_VAR 0 9
88411: PUSH
88412: LD_VAR 0 41
88416: PUSH
88417: LD_VAR 0 42
88421: PUSH
88422: LD_VAR 0 43
88426: PUSH
88427: LD_VAR 0 44
88431: PUSH
88432: LD_VAR 0 45
88436: PUSH
88437: LD_VAR 0 46
88441: PUSH
88442: EMPTY
88443: LIST
88444: LIST
88445: LIST
88446: LIST
88447: LIST
88448: LIST
88449: PUSH
88450: LD_VAR 0 4
88454: PUSH
88455: LD_INT 1
88457: PLUS
88458: ARRAY
88459: ST_TO_ADDR
88460: GO 88715
88462: LD_INT 36
88464: DOUBLE
88465: EQUAL
88466: IFTRUE 88470
88468: GO 88526
88470: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
88471: LD_ADDR_VAR 0 9
88475: PUSH
88476: LD_VAR 0 47
88480: PUSH
88481: LD_VAR 0 48
88485: PUSH
88486: LD_VAR 0 49
88490: PUSH
88491: LD_VAR 0 50
88495: PUSH
88496: LD_VAR 0 51
88500: PUSH
88501: LD_VAR 0 52
88505: PUSH
88506: EMPTY
88507: LIST
88508: LIST
88509: LIST
88510: LIST
88511: LIST
88512: LIST
88513: PUSH
88514: LD_VAR 0 4
88518: PUSH
88519: LD_INT 1
88521: PLUS
88522: ARRAY
88523: ST_TO_ADDR
88524: GO 88715
88526: LD_INT 4
88528: DOUBLE
88529: EQUAL
88530: IFTRUE 88552
88532: LD_INT 5
88534: DOUBLE
88535: EQUAL
88536: IFTRUE 88552
88538: LD_INT 34
88540: DOUBLE
88541: EQUAL
88542: IFTRUE 88552
88544: LD_INT 37
88546: DOUBLE
88547: EQUAL
88548: IFTRUE 88552
88550: GO 88608
88552: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
88553: LD_ADDR_VAR 0 9
88557: PUSH
88558: LD_VAR 0 53
88562: PUSH
88563: LD_VAR 0 54
88567: PUSH
88568: LD_VAR 0 55
88572: PUSH
88573: LD_VAR 0 56
88577: PUSH
88578: LD_VAR 0 57
88582: PUSH
88583: LD_VAR 0 58
88587: PUSH
88588: EMPTY
88589: LIST
88590: LIST
88591: LIST
88592: LIST
88593: LIST
88594: LIST
88595: PUSH
88596: LD_VAR 0 4
88600: PUSH
88601: LD_INT 1
88603: PLUS
88604: ARRAY
88605: ST_TO_ADDR
88606: GO 88715
88608: LD_INT 31
88610: DOUBLE
88611: EQUAL
88612: IFTRUE 88658
88614: LD_INT 32
88616: DOUBLE
88617: EQUAL
88618: IFTRUE 88658
88620: LD_INT 33
88622: DOUBLE
88623: EQUAL
88624: IFTRUE 88658
88626: LD_INT 27
88628: DOUBLE
88629: EQUAL
88630: IFTRUE 88658
88632: LD_INT 26
88634: DOUBLE
88635: EQUAL
88636: IFTRUE 88658
88638: LD_INT 28
88640: DOUBLE
88641: EQUAL
88642: IFTRUE 88658
88644: LD_INT 29
88646: DOUBLE
88647: EQUAL
88648: IFTRUE 88658
88650: LD_INT 30
88652: DOUBLE
88653: EQUAL
88654: IFTRUE 88658
88656: GO 88714
88658: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
88659: LD_ADDR_VAR 0 9
88663: PUSH
88664: LD_VAR 0 59
88668: PUSH
88669: LD_VAR 0 60
88673: PUSH
88674: LD_VAR 0 61
88678: PUSH
88679: LD_VAR 0 62
88683: PUSH
88684: LD_VAR 0 63
88688: PUSH
88689: LD_VAR 0 64
88693: PUSH
88694: EMPTY
88695: LIST
88696: LIST
88697: LIST
88698: LIST
88699: LIST
88700: LIST
88701: PUSH
88702: LD_VAR 0 4
88706: PUSH
88707: LD_INT 1
88709: PLUS
88710: ARRAY
88711: ST_TO_ADDR
88712: GO 88715
88714: POP
// temp_list2 = [ ] ;
88715: LD_ADDR_VAR 0 10
88719: PUSH
88720: EMPTY
88721: ST_TO_ADDR
// for i in temp_list do
88722: LD_ADDR_VAR 0 8
88726: PUSH
88727: LD_VAR 0 9
88731: PUSH
88732: FOR_IN
88733: IFFALSE 88785
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
88735: LD_ADDR_VAR 0 10
88739: PUSH
88740: LD_VAR 0 10
88744: PUSH
88745: LD_VAR 0 8
88749: PUSH
88750: LD_INT 1
88752: ARRAY
88753: PUSH
88754: LD_VAR 0 2
88758: PLUS
88759: PUSH
88760: LD_VAR 0 8
88764: PUSH
88765: LD_INT 2
88767: ARRAY
88768: PUSH
88769: LD_VAR 0 3
88773: PLUS
88774: PUSH
88775: EMPTY
88776: LIST
88777: LIST
88778: PUSH
88779: EMPTY
88780: LIST
88781: ADD
88782: ST_TO_ADDR
88783: GO 88732
88785: POP
88786: POP
// result = temp_list2 ;
88787: LD_ADDR_VAR 0 7
88791: PUSH
88792: LD_VAR 0 10
88796: ST_TO_ADDR
// end ;
88797: LD_VAR 0 7
88801: RET
// export function EnemyInRange ( unit , dist ) ; begin
88802: LD_INT 0
88804: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
88805: LD_ADDR_VAR 0 3
88809: PUSH
88810: LD_VAR 0 1
88814: PPUSH
88815: CALL_OW 255
88819: PPUSH
88820: LD_VAR 0 1
88824: PPUSH
88825: CALL_OW 250
88829: PPUSH
88830: LD_VAR 0 1
88834: PPUSH
88835: CALL_OW 251
88839: PPUSH
88840: LD_VAR 0 2
88844: PPUSH
88845: CALL 62059 0 4
88849: PUSH
88850: LD_INT 4
88852: ARRAY
88853: ST_TO_ADDR
// end ;
88854: LD_VAR 0 3
88858: RET
// export function PlayerSeeMe ( unit ) ; begin
88859: LD_INT 0
88861: PPUSH
// result := See ( your_side , unit ) ;
88862: LD_ADDR_VAR 0 2
88866: PUSH
88867: LD_OWVAR 2
88871: PPUSH
88872: LD_VAR 0 1
88876: PPUSH
88877: CALL_OW 292
88881: ST_TO_ADDR
// end ;
88882: LD_VAR 0 2
88886: RET
// export function ReverseDir ( unit ) ; begin
88887: LD_INT 0
88889: PPUSH
// if not unit then
88890: LD_VAR 0 1
88894: NOT
88895: IFFALSE 88899
// exit ;
88897: GO 88922
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
88899: LD_ADDR_VAR 0 2
88903: PUSH
88904: LD_VAR 0 1
88908: PPUSH
88909: CALL_OW 254
88913: PUSH
88914: LD_INT 3
88916: PLUS
88917: PUSH
88918: LD_INT 6
88920: MOD
88921: ST_TO_ADDR
// end ;
88922: LD_VAR 0 2
88926: RET
// export function ReverseArray ( array ) ; var i ; begin
88927: LD_INT 0
88929: PPUSH
88930: PPUSH
// if not array then
88931: LD_VAR 0 1
88935: NOT
88936: IFFALSE 88940
// exit ;
88938: GO 88995
// result := [ ] ;
88940: LD_ADDR_VAR 0 2
88944: PUSH
88945: EMPTY
88946: ST_TO_ADDR
// for i := array downto 1 do
88947: LD_ADDR_VAR 0 3
88951: PUSH
88952: DOUBLE
88953: LD_VAR 0 1
88957: INC
88958: ST_TO_ADDR
88959: LD_INT 1
88961: PUSH
88962: FOR_DOWNTO
88963: IFFALSE 88993
// result := Join ( result , array [ i ] ) ;
88965: LD_ADDR_VAR 0 2
88969: PUSH
88970: LD_VAR 0 2
88974: PPUSH
88975: LD_VAR 0 1
88979: PUSH
88980: LD_VAR 0 3
88984: ARRAY
88985: PPUSH
88986: CALL 93837 0 2
88990: ST_TO_ADDR
88991: GO 88962
88993: POP
88994: POP
// end ;
88995: LD_VAR 0 2
88999: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
89000: LD_INT 0
89002: PPUSH
89003: PPUSH
89004: PPUSH
89005: PPUSH
89006: PPUSH
89007: PPUSH
// if not unit or not hexes then
89008: LD_VAR 0 1
89012: NOT
89013: IFTRUE 89022
89015: PUSH
89016: LD_VAR 0 2
89020: NOT
89021: OR
89022: IFFALSE 89026
// exit ;
89024: GO 89149
// dist := 9999 ;
89026: LD_ADDR_VAR 0 5
89030: PUSH
89031: LD_INT 9999
89033: ST_TO_ADDR
// for i = 1 to hexes do
89034: LD_ADDR_VAR 0 4
89038: PUSH
89039: DOUBLE
89040: LD_INT 1
89042: DEC
89043: ST_TO_ADDR
89044: LD_VAR 0 2
89048: PUSH
89049: FOR_TO
89050: IFFALSE 89137
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
89052: LD_ADDR_VAR 0 6
89056: PUSH
89057: LD_VAR 0 1
89061: PPUSH
89062: LD_VAR 0 2
89066: PUSH
89067: LD_VAR 0 4
89071: ARRAY
89072: PUSH
89073: LD_INT 1
89075: ARRAY
89076: PPUSH
89077: LD_VAR 0 2
89081: PUSH
89082: LD_VAR 0 4
89086: ARRAY
89087: PUSH
89088: LD_INT 2
89090: ARRAY
89091: PPUSH
89092: CALL_OW 297
89096: ST_TO_ADDR
// if tdist < dist then
89097: LD_VAR 0 6
89101: PUSH
89102: LD_VAR 0 5
89106: LESS
89107: IFFALSE 89135
// begin hex := hexes [ i ] ;
89109: LD_ADDR_VAR 0 8
89113: PUSH
89114: LD_VAR 0 2
89118: PUSH
89119: LD_VAR 0 4
89123: ARRAY
89124: ST_TO_ADDR
// dist := tdist ;
89125: LD_ADDR_VAR 0 5
89129: PUSH
89130: LD_VAR 0 6
89134: ST_TO_ADDR
// end ; end ;
89135: GO 89049
89137: POP
89138: POP
// result := hex ;
89139: LD_ADDR_VAR 0 3
89143: PUSH
89144: LD_VAR 0 8
89148: ST_TO_ADDR
// end ;
89149: LD_VAR 0 3
89153: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
89154: LD_INT 0
89156: PPUSH
89157: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
89158: LD_VAR 0 1
89162: NOT
89163: IFTRUE 89202
89165: PUSH
89166: LD_VAR 0 1
89170: PUSH
89171: LD_INT 21
89173: PUSH
89174: LD_INT 2
89176: PUSH
89177: EMPTY
89178: LIST
89179: LIST
89180: PUSH
89181: LD_INT 23
89183: PUSH
89184: LD_INT 2
89186: PUSH
89187: EMPTY
89188: LIST
89189: LIST
89190: PUSH
89191: EMPTY
89192: LIST
89193: LIST
89194: PPUSH
89195: CALL_OW 69
89199: IN
89200: NOT
89201: OR
89202: IFFALSE 89206
// exit ;
89204: GO 89253
// for i = 1 to 3 do
89206: LD_ADDR_VAR 0 3
89210: PUSH
89211: DOUBLE
89212: LD_INT 1
89214: DEC
89215: ST_TO_ADDR
89216: LD_INT 3
89218: PUSH
89219: FOR_TO
89220: IFFALSE 89251
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
89222: LD_VAR 0 1
89226: PPUSH
89227: CALL_OW 250
89231: PPUSH
89232: LD_VAR 0 1
89236: PPUSH
89237: CALL_OW 251
89241: PPUSH
89242: LD_INT 1
89244: PPUSH
89245: CALL_OW 453
89249: GO 89219
89251: POP
89252: POP
// end ;
89253: LD_VAR 0 2
89257: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
89258: LD_INT 0
89260: PPUSH
89261: PPUSH
89262: PPUSH
89263: PPUSH
89264: PPUSH
89265: PPUSH
// if not unit or not enemy_unit then
89266: LD_VAR 0 1
89270: NOT
89271: IFTRUE 89280
89273: PUSH
89274: LD_VAR 0 2
89278: NOT
89279: OR
89280: IFFALSE 89284
// exit ;
89282: GO 89755
// if GetLives ( i ) < 250 then
89284: LD_VAR 0 4
89288: PPUSH
89289: CALL_OW 256
89293: PUSH
89294: LD_INT 250
89296: LESS
89297: IFFALSE 89310
// begin ComAutodestruct ( i ) ;
89299: LD_VAR 0 4
89303: PPUSH
89304: CALL 89154 0 1
// exit ;
89308: GO 89755
// end ; x := GetX ( enemy_unit ) ;
89310: LD_ADDR_VAR 0 7
89314: PUSH
89315: LD_VAR 0 2
89319: PPUSH
89320: CALL_OW 250
89324: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
89325: LD_ADDR_VAR 0 8
89329: PUSH
89330: LD_VAR 0 2
89334: PPUSH
89335: CALL_OW 251
89339: ST_TO_ADDR
// if not x or not y then
89340: LD_VAR 0 7
89344: NOT
89345: IFTRUE 89354
89347: PUSH
89348: LD_VAR 0 8
89352: NOT
89353: OR
89354: IFFALSE 89358
// exit ;
89356: GO 89755
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
89358: LD_ADDR_VAR 0 6
89362: PUSH
89363: LD_VAR 0 7
89367: PPUSH
89368: LD_INT 0
89370: PPUSH
89371: LD_INT 4
89373: PPUSH
89374: CALL_OW 272
89378: PUSH
89379: LD_VAR 0 8
89383: PPUSH
89384: LD_INT 0
89386: PPUSH
89387: LD_INT 4
89389: PPUSH
89390: CALL_OW 273
89394: PUSH
89395: EMPTY
89396: LIST
89397: LIST
89398: PUSH
89399: LD_VAR 0 7
89403: PPUSH
89404: LD_INT 1
89406: PPUSH
89407: LD_INT 4
89409: PPUSH
89410: CALL_OW 272
89414: PUSH
89415: LD_VAR 0 8
89419: PPUSH
89420: LD_INT 1
89422: PPUSH
89423: LD_INT 4
89425: PPUSH
89426: CALL_OW 273
89430: PUSH
89431: EMPTY
89432: LIST
89433: LIST
89434: PUSH
89435: LD_VAR 0 7
89439: PPUSH
89440: LD_INT 2
89442: PPUSH
89443: LD_INT 4
89445: PPUSH
89446: CALL_OW 272
89450: PUSH
89451: LD_VAR 0 8
89455: PPUSH
89456: LD_INT 2
89458: PPUSH
89459: LD_INT 4
89461: PPUSH
89462: CALL_OW 273
89466: PUSH
89467: EMPTY
89468: LIST
89469: LIST
89470: PUSH
89471: LD_VAR 0 7
89475: PPUSH
89476: LD_INT 3
89478: PPUSH
89479: LD_INT 4
89481: PPUSH
89482: CALL_OW 272
89486: PUSH
89487: LD_VAR 0 8
89491: PPUSH
89492: LD_INT 3
89494: PPUSH
89495: LD_INT 4
89497: PPUSH
89498: CALL_OW 273
89502: PUSH
89503: EMPTY
89504: LIST
89505: LIST
89506: PUSH
89507: LD_VAR 0 7
89511: PPUSH
89512: LD_INT 4
89514: PPUSH
89515: LD_INT 4
89517: PPUSH
89518: CALL_OW 272
89522: PUSH
89523: LD_VAR 0 8
89527: PPUSH
89528: LD_INT 4
89530: PPUSH
89531: LD_INT 4
89533: PPUSH
89534: CALL_OW 273
89538: PUSH
89539: EMPTY
89540: LIST
89541: LIST
89542: PUSH
89543: LD_VAR 0 7
89547: PPUSH
89548: LD_INT 5
89550: PPUSH
89551: LD_INT 4
89553: PPUSH
89554: CALL_OW 272
89558: PUSH
89559: LD_VAR 0 8
89563: PPUSH
89564: LD_INT 5
89566: PPUSH
89567: LD_INT 4
89569: PPUSH
89570: CALL_OW 273
89574: PUSH
89575: EMPTY
89576: LIST
89577: LIST
89578: PUSH
89579: EMPTY
89580: LIST
89581: LIST
89582: LIST
89583: LIST
89584: LIST
89585: LIST
89586: ST_TO_ADDR
// for i = tmp downto 1 do
89587: LD_ADDR_VAR 0 4
89591: PUSH
89592: DOUBLE
89593: LD_VAR 0 6
89597: INC
89598: ST_TO_ADDR
89599: LD_INT 1
89601: PUSH
89602: FOR_DOWNTO
89603: IFFALSE 89706
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
89605: LD_VAR 0 6
89609: PUSH
89610: LD_VAR 0 4
89614: ARRAY
89615: PUSH
89616: LD_INT 1
89618: ARRAY
89619: PPUSH
89620: LD_VAR 0 6
89624: PUSH
89625: LD_VAR 0 4
89629: ARRAY
89630: PUSH
89631: LD_INT 2
89633: ARRAY
89634: PPUSH
89635: CALL_OW 488
89639: NOT
89640: IFTRUE 89682
89642: PUSH
89643: LD_VAR 0 6
89647: PUSH
89648: LD_VAR 0 4
89652: ARRAY
89653: PUSH
89654: LD_INT 1
89656: ARRAY
89657: PPUSH
89658: LD_VAR 0 6
89662: PUSH
89663: LD_VAR 0 4
89667: ARRAY
89668: PUSH
89669: LD_INT 2
89671: ARRAY
89672: PPUSH
89673: CALL_OW 428
89677: PUSH
89678: LD_INT 0
89680: NONEQUAL
89681: OR
89682: IFFALSE 89704
// tmp := Delete ( tmp , i ) ;
89684: LD_ADDR_VAR 0 6
89688: PUSH
89689: LD_VAR 0 6
89693: PPUSH
89694: LD_VAR 0 4
89698: PPUSH
89699: CALL_OW 3
89703: ST_TO_ADDR
89704: GO 89602
89706: POP
89707: POP
// j := GetClosestHex ( unit , tmp ) ;
89708: LD_ADDR_VAR 0 5
89712: PUSH
89713: LD_VAR 0 1
89717: PPUSH
89718: LD_VAR 0 6
89722: PPUSH
89723: CALL 89000 0 2
89727: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
89728: LD_VAR 0 1
89732: PPUSH
89733: LD_VAR 0 5
89737: PUSH
89738: LD_INT 1
89740: ARRAY
89741: PPUSH
89742: LD_VAR 0 5
89746: PUSH
89747: LD_INT 2
89749: ARRAY
89750: PPUSH
89751: CALL_OW 111
// end ;
89755: LD_VAR 0 3
89759: RET
// export function PrepareApemanSoldier ( ) ; begin
89760: LD_INT 0
89762: PPUSH
// uc_nation := 0 ;
89763: LD_ADDR_OWVAR 21
89767: PUSH
89768: LD_INT 0
89770: ST_TO_ADDR
// hc_sex := sex_male ;
89771: LD_ADDR_OWVAR 27
89775: PUSH
89776: LD_INT 1
89778: ST_TO_ADDR
// hc_name :=  ;
89779: LD_ADDR_OWVAR 26
89783: PUSH
89784: LD_STRING 
89786: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
89787: LD_ADDR_OWVAR 28
89791: PUSH
89792: LD_INT 15
89794: ST_TO_ADDR
// hc_gallery :=  ;
89795: LD_ADDR_OWVAR 33
89799: PUSH
89800: LD_STRING 
89802: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
89803: LD_ADDR_OWVAR 31
89807: PUSH
89808: LD_INT 0
89810: PPUSH
89811: LD_INT 3
89813: PPUSH
89814: CALL_OW 12
89818: PUSH
89819: LD_INT 0
89821: PPUSH
89822: LD_INT 3
89824: PPUSH
89825: CALL_OW 12
89829: PUSH
89830: LD_INT 0
89832: PUSH
89833: LD_INT 0
89835: PUSH
89836: EMPTY
89837: LIST
89838: LIST
89839: LIST
89840: LIST
89841: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
89842: LD_ADDR_OWVAR 29
89846: PUSH
89847: LD_INT 12
89849: PUSH
89850: LD_INT 12
89852: PUSH
89853: EMPTY
89854: LIST
89855: LIST
89856: ST_TO_ADDR
// end ;
89857: LD_VAR 0 1
89861: RET
// export function PrepareApemanEngineer ( ) ; begin
89862: LD_INT 0
89864: PPUSH
// uc_nation := 0 ;
89865: LD_ADDR_OWVAR 21
89869: PUSH
89870: LD_INT 0
89872: ST_TO_ADDR
// hc_sex := sex_male ;
89873: LD_ADDR_OWVAR 27
89877: PUSH
89878: LD_INT 1
89880: ST_TO_ADDR
// hc_name :=  ;
89881: LD_ADDR_OWVAR 26
89885: PUSH
89886: LD_STRING 
89888: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
89889: LD_ADDR_OWVAR 28
89893: PUSH
89894: LD_INT 16
89896: ST_TO_ADDR
// hc_gallery :=  ;
89897: LD_ADDR_OWVAR 33
89901: PUSH
89902: LD_STRING 
89904: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
89905: LD_ADDR_OWVAR 31
89909: PUSH
89910: LD_INT 0
89912: PPUSH
89913: LD_INT 3
89915: PPUSH
89916: CALL_OW 12
89920: PUSH
89921: LD_INT 0
89923: PPUSH
89924: LD_INT 3
89926: PPUSH
89927: CALL_OW 12
89931: PUSH
89932: LD_INT 0
89934: PUSH
89935: LD_INT 0
89937: PUSH
89938: EMPTY
89939: LIST
89940: LIST
89941: LIST
89942: LIST
89943: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
89944: LD_ADDR_OWVAR 29
89948: PUSH
89949: LD_INT 12
89951: PUSH
89952: LD_INT 12
89954: PUSH
89955: EMPTY
89956: LIST
89957: LIST
89958: ST_TO_ADDR
// end ;
89959: LD_VAR 0 1
89963: RET
// export function PrepareApeman ( agressivity ) ; begin
89964: LD_INT 0
89966: PPUSH
// uc_side := 0 ;
89967: LD_ADDR_OWVAR 20
89971: PUSH
89972: LD_INT 0
89974: ST_TO_ADDR
// uc_nation := 0 ;
89975: LD_ADDR_OWVAR 21
89979: PUSH
89980: LD_INT 0
89982: ST_TO_ADDR
// hc_sex := sex_male ;
89983: LD_ADDR_OWVAR 27
89987: PUSH
89988: LD_INT 1
89990: ST_TO_ADDR
// hc_class := class_apeman ;
89991: LD_ADDR_OWVAR 28
89995: PUSH
89996: LD_INT 12
89998: ST_TO_ADDR
// hc_gallery :=  ;
89999: LD_ADDR_OWVAR 33
90003: PUSH
90004: LD_STRING 
90006: ST_TO_ADDR
// hc_name :=  ;
90007: LD_ADDR_OWVAR 26
90011: PUSH
90012: LD_STRING 
90014: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
90015: LD_ADDR_OWVAR 29
90019: PUSH
90020: LD_INT 12
90022: PUSH
90023: LD_INT 12
90025: PUSH
90026: EMPTY
90027: LIST
90028: LIST
90029: ST_TO_ADDR
// if agressivity = 0 then
90030: LD_VAR 0 1
90034: PUSH
90035: LD_INT 0
90037: EQUAL
90038: IFFALSE 90050
// hc_agressivity := 0 else
90040: LD_ADDR_OWVAR 35
90044: PUSH
90045: LD_INT 0
90047: ST_TO_ADDR
90048: GO 90071
// hc_agressivity := rand ( - agressivity , agressivity ) ;
90050: LD_ADDR_OWVAR 35
90054: PUSH
90055: LD_VAR 0 1
90059: NEG
90060: PPUSH
90061: LD_VAR 0 1
90065: PPUSH
90066: CALL_OW 12
90070: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
90071: LD_ADDR_OWVAR 31
90075: PUSH
90076: LD_INT 0
90078: PPUSH
90079: LD_INT 3
90081: PPUSH
90082: CALL_OW 12
90086: PUSH
90087: LD_INT 0
90089: PPUSH
90090: LD_INT 3
90092: PPUSH
90093: CALL_OW 12
90097: PUSH
90098: LD_INT 0
90100: PUSH
90101: LD_INT 0
90103: PUSH
90104: EMPTY
90105: LIST
90106: LIST
90107: LIST
90108: LIST
90109: ST_TO_ADDR
// end ;
90110: LD_VAR 0 2
90114: RET
// export function PrepareTiger ( agressivity ) ; begin
90115: LD_INT 0
90117: PPUSH
// uc_side := 0 ;
90118: LD_ADDR_OWVAR 20
90122: PUSH
90123: LD_INT 0
90125: ST_TO_ADDR
// uc_nation := 0 ;
90126: LD_ADDR_OWVAR 21
90130: PUSH
90131: LD_INT 0
90133: ST_TO_ADDR
// InitHc ;
90134: CALL_OW 19
// hc_class := class_tiger ;
90138: LD_ADDR_OWVAR 28
90142: PUSH
90143: LD_INT 14
90145: ST_TO_ADDR
// hc_gallery :=  ;
90146: LD_ADDR_OWVAR 33
90150: PUSH
90151: LD_STRING 
90153: ST_TO_ADDR
// hc_name :=  ;
90154: LD_ADDR_OWVAR 26
90158: PUSH
90159: LD_STRING 
90161: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
90162: LD_ADDR_OWVAR 35
90166: PUSH
90167: LD_VAR 0 1
90171: NEG
90172: PPUSH
90173: LD_VAR 0 1
90177: PPUSH
90178: CALL_OW 12
90182: ST_TO_ADDR
// end ;
90183: LD_VAR 0 2
90187: RET
// export function PrepareEnchidna ( ) ; begin
90188: LD_INT 0
90190: PPUSH
// uc_side := 0 ;
90191: LD_ADDR_OWVAR 20
90195: PUSH
90196: LD_INT 0
90198: ST_TO_ADDR
// uc_nation := 0 ;
90199: LD_ADDR_OWVAR 21
90203: PUSH
90204: LD_INT 0
90206: ST_TO_ADDR
// InitHc ;
90207: CALL_OW 19
// hc_class := class_baggie ;
90211: LD_ADDR_OWVAR 28
90215: PUSH
90216: LD_INT 13
90218: ST_TO_ADDR
// hc_gallery :=  ;
90219: LD_ADDR_OWVAR 33
90223: PUSH
90224: LD_STRING 
90226: ST_TO_ADDR
// hc_name :=  ;
90227: LD_ADDR_OWVAR 26
90231: PUSH
90232: LD_STRING 
90234: ST_TO_ADDR
// end ;
90235: LD_VAR 0 1
90239: RET
// export function PrepareFrog ( ) ; begin
90240: LD_INT 0
90242: PPUSH
// uc_side := 0 ;
90243: LD_ADDR_OWVAR 20
90247: PUSH
90248: LD_INT 0
90250: ST_TO_ADDR
// uc_nation := 0 ;
90251: LD_ADDR_OWVAR 21
90255: PUSH
90256: LD_INT 0
90258: ST_TO_ADDR
// InitHc ;
90259: CALL_OW 19
// hc_class := class_frog ;
90263: LD_ADDR_OWVAR 28
90267: PUSH
90268: LD_INT 19
90270: ST_TO_ADDR
// hc_gallery :=  ;
90271: LD_ADDR_OWVAR 33
90275: PUSH
90276: LD_STRING 
90278: ST_TO_ADDR
// hc_name :=  ;
90279: LD_ADDR_OWVAR 26
90283: PUSH
90284: LD_STRING 
90286: ST_TO_ADDR
// end ;
90287: LD_VAR 0 1
90291: RET
// export function PrepareFish ( ) ; begin
90292: LD_INT 0
90294: PPUSH
// uc_side := 0 ;
90295: LD_ADDR_OWVAR 20
90299: PUSH
90300: LD_INT 0
90302: ST_TO_ADDR
// uc_nation := 0 ;
90303: LD_ADDR_OWVAR 21
90307: PUSH
90308: LD_INT 0
90310: ST_TO_ADDR
// InitHc ;
90311: CALL_OW 19
// hc_class := class_fish ;
90315: LD_ADDR_OWVAR 28
90319: PUSH
90320: LD_INT 20
90322: ST_TO_ADDR
// hc_gallery :=  ;
90323: LD_ADDR_OWVAR 33
90327: PUSH
90328: LD_STRING 
90330: ST_TO_ADDR
// hc_name :=  ;
90331: LD_ADDR_OWVAR 26
90335: PUSH
90336: LD_STRING 
90338: ST_TO_ADDR
// end ;
90339: LD_VAR 0 1
90343: RET
// export function PrepareBird ( ) ; begin
90344: LD_INT 0
90346: PPUSH
// uc_side := 0 ;
90347: LD_ADDR_OWVAR 20
90351: PUSH
90352: LD_INT 0
90354: ST_TO_ADDR
// uc_nation := 0 ;
90355: LD_ADDR_OWVAR 21
90359: PUSH
90360: LD_INT 0
90362: ST_TO_ADDR
// InitHc ;
90363: CALL_OW 19
// hc_class := class_phororhacos ;
90367: LD_ADDR_OWVAR 28
90371: PUSH
90372: LD_INT 18
90374: ST_TO_ADDR
// hc_gallery :=  ;
90375: LD_ADDR_OWVAR 33
90379: PUSH
90380: LD_STRING 
90382: ST_TO_ADDR
// hc_name :=  ;
90383: LD_ADDR_OWVAR 26
90387: PUSH
90388: LD_STRING 
90390: ST_TO_ADDR
// end ;
90391: LD_VAR 0 1
90395: RET
// export function PrepareHorse ( ) ; begin
90396: LD_INT 0
90398: PPUSH
// uc_side := 0 ;
90399: LD_ADDR_OWVAR 20
90403: PUSH
90404: LD_INT 0
90406: ST_TO_ADDR
// uc_nation := 0 ;
90407: LD_ADDR_OWVAR 21
90411: PUSH
90412: LD_INT 0
90414: ST_TO_ADDR
// InitHc ;
90415: CALL_OW 19
// hc_class := class_horse ;
90419: LD_ADDR_OWVAR 28
90423: PUSH
90424: LD_INT 21
90426: ST_TO_ADDR
// hc_gallery :=  ;
90427: LD_ADDR_OWVAR 33
90431: PUSH
90432: LD_STRING 
90434: ST_TO_ADDR
// hc_name :=  ;
90435: LD_ADDR_OWVAR 26
90439: PUSH
90440: LD_STRING 
90442: ST_TO_ADDR
// end ;
90443: LD_VAR 0 1
90447: RET
// export function PrepareMastodont ( ) ; begin
90448: LD_INT 0
90450: PPUSH
// uc_side := 0 ;
90451: LD_ADDR_OWVAR 20
90455: PUSH
90456: LD_INT 0
90458: ST_TO_ADDR
// uc_nation := 0 ;
90459: LD_ADDR_OWVAR 21
90463: PUSH
90464: LD_INT 0
90466: ST_TO_ADDR
// vc_chassis := class_mastodont ;
90467: LD_ADDR_OWVAR 37
90471: PUSH
90472: LD_INT 31
90474: ST_TO_ADDR
// vc_control := control_rider ;
90475: LD_ADDR_OWVAR 38
90479: PUSH
90480: LD_INT 4
90482: ST_TO_ADDR
// end ;
90483: LD_VAR 0 1
90487: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
90488: LD_INT 0
90490: PPUSH
90491: PPUSH
90492: PPUSH
// uc_side = 0 ;
90493: LD_ADDR_OWVAR 20
90497: PUSH
90498: LD_INT 0
90500: ST_TO_ADDR
// uc_nation = 0 ;
90501: LD_ADDR_OWVAR 21
90505: PUSH
90506: LD_INT 0
90508: ST_TO_ADDR
// InitHc_All ( ) ;
90509: CALL_OW 584
// InitVc ;
90513: CALL_OW 20
// if mastodonts then
90517: LD_VAR 0 6
90521: IFFALSE 90588
// for i = 1 to mastodonts do
90523: LD_ADDR_VAR 0 11
90527: PUSH
90528: DOUBLE
90529: LD_INT 1
90531: DEC
90532: ST_TO_ADDR
90533: LD_VAR 0 6
90537: PUSH
90538: FOR_TO
90539: IFFALSE 90586
// begin vc_chassis := 31 ;
90541: LD_ADDR_OWVAR 37
90545: PUSH
90546: LD_INT 31
90548: ST_TO_ADDR
// vc_control := control_rider ;
90549: LD_ADDR_OWVAR 38
90553: PUSH
90554: LD_INT 4
90556: ST_TO_ADDR
// animal := CreateVehicle ;
90557: LD_ADDR_VAR 0 12
90561: PUSH
90562: CALL_OW 45
90566: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
90567: LD_VAR 0 12
90571: PPUSH
90572: LD_VAR 0 8
90576: PPUSH
90577: LD_INT 0
90579: PPUSH
90580: CALL 92730 0 3
// end ;
90584: GO 90538
90586: POP
90587: POP
// if horses then
90588: LD_VAR 0 5
90592: IFFALSE 90659
// for i = 1 to horses do
90594: LD_ADDR_VAR 0 11
90598: PUSH
90599: DOUBLE
90600: LD_INT 1
90602: DEC
90603: ST_TO_ADDR
90604: LD_VAR 0 5
90608: PUSH
90609: FOR_TO
90610: IFFALSE 90657
// begin hc_class := 21 ;
90612: LD_ADDR_OWVAR 28
90616: PUSH
90617: LD_INT 21
90619: ST_TO_ADDR
// hc_gallery :=  ;
90620: LD_ADDR_OWVAR 33
90624: PUSH
90625: LD_STRING 
90627: ST_TO_ADDR
// animal := CreateHuman ;
90628: LD_ADDR_VAR 0 12
90632: PUSH
90633: CALL_OW 44
90637: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
90638: LD_VAR 0 12
90642: PPUSH
90643: LD_VAR 0 8
90647: PPUSH
90648: LD_INT 0
90650: PPUSH
90651: CALL 92730 0 3
// end ;
90655: GO 90609
90657: POP
90658: POP
// if birds then
90659: LD_VAR 0 1
90663: IFFALSE 90730
// for i = 1 to birds do
90665: LD_ADDR_VAR 0 11
90669: PUSH
90670: DOUBLE
90671: LD_INT 1
90673: DEC
90674: ST_TO_ADDR
90675: LD_VAR 0 1
90679: PUSH
90680: FOR_TO
90681: IFFALSE 90728
// begin hc_class := 18 ;
90683: LD_ADDR_OWVAR 28
90687: PUSH
90688: LD_INT 18
90690: ST_TO_ADDR
// hc_gallery =  ;
90691: LD_ADDR_OWVAR 33
90695: PUSH
90696: LD_STRING 
90698: ST_TO_ADDR
// animal := CreateHuman ;
90699: LD_ADDR_VAR 0 12
90703: PUSH
90704: CALL_OW 44
90708: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
90709: LD_VAR 0 12
90713: PPUSH
90714: LD_VAR 0 8
90718: PPUSH
90719: LD_INT 0
90721: PPUSH
90722: CALL 92730 0 3
// end ;
90726: GO 90680
90728: POP
90729: POP
// if tigers then
90730: LD_VAR 0 2
90734: IFFALSE 90818
// for i = 1 to tigers do
90736: LD_ADDR_VAR 0 11
90740: PUSH
90741: DOUBLE
90742: LD_INT 1
90744: DEC
90745: ST_TO_ADDR
90746: LD_VAR 0 2
90750: PUSH
90751: FOR_TO
90752: IFFALSE 90816
// begin hc_class = class_tiger ;
90754: LD_ADDR_OWVAR 28
90758: PUSH
90759: LD_INT 14
90761: ST_TO_ADDR
// hc_gallery =  ;
90762: LD_ADDR_OWVAR 33
90766: PUSH
90767: LD_STRING 
90769: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
90770: LD_ADDR_OWVAR 35
90774: PUSH
90775: LD_INT 7
90777: NEG
90778: PPUSH
90779: LD_INT 7
90781: PPUSH
90782: CALL_OW 12
90786: ST_TO_ADDR
// animal := CreateHuman ;
90787: LD_ADDR_VAR 0 12
90791: PUSH
90792: CALL_OW 44
90796: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
90797: LD_VAR 0 12
90801: PPUSH
90802: LD_VAR 0 8
90806: PPUSH
90807: LD_INT 0
90809: PPUSH
90810: CALL 92730 0 3
// end ;
90814: GO 90751
90816: POP
90817: POP
// if apemans then
90818: LD_VAR 0 3
90822: IFFALSE 90945
// for i = 1 to apemans do
90824: LD_ADDR_VAR 0 11
90828: PUSH
90829: DOUBLE
90830: LD_INT 1
90832: DEC
90833: ST_TO_ADDR
90834: LD_VAR 0 3
90838: PUSH
90839: FOR_TO
90840: IFFALSE 90943
// begin hc_class = class_apeman ;
90842: LD_ADDR_OWVAR 28
90846: PUSH
90847: LD_INT 12
90849: ST_TO_ADDR
// hc_gallery =  ;
90850: LD_ADDR_OWVAR 33
90854: PUSH
90855: LD_STRING 
90857: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
90858: LD_ADDR_OWVAR 35
90862: PUSH
90863: LD_INT 2
90865: NEG
90866: PPUSH
90867: LD_INT 2
90869: PPUSH
90870: CALL_OW 12
90874: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
90875: LD_ADDR_OWVAR 31
90879: PUSH
90880: LD_INT 1
90882: PPUSH
90883: LD_INT 3
90885: PPUSH
90886: CALL_OW 12
90890: PUSH
90891: LD_INT 1
90893: PPUSH
90894: LD_INT 3
90896: PPUSH
90897: CALL_OW 12
90901: PUSH
90902: LD_INT 0
90904: PUSH
90905: LD_INT 0
90907: PUSH
90908: EMPTY
90909: LIST
90910: LIST
90911: LIST
90912: LIST
90913: ST_TO_ADDR
// animal := CreateHuman ;
90914: LD_ADDR_VAR 0 12
90918: PUSH
90919: CALL_OW 44
90923: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
90924: LD_VAR 0 12
90928: PPUSH
90929: LD_VAR 0 8
90933: PPUSH
90934: LD_INT 0
90936: PPUSH
90937: CALL 92730 0 3
// end ;
90941: GO 90839
90943: POP
90944: POP
// if enchidnas then
90945: LD_VAR 0 4
90949: IFFALSE 91016
// for i = 1 to enchidnas do
90951: LD_ADDR_VAR 0 11
90955: PUSH
90956: DOUBLE
90957: LD_INT 1
90959: DEC
90960: ST_TO_ADDR
90961: LD_VAR 0 4
90965: PUSH
90966: FOR_TO
90967: IFFALSE 91014
// begin hc_class = 13 ;
90969: LD_ADDR_OWVAR 28
90973: PUSH
90974: LD_INT 13
90976: ST_TO_ADDR
// hc_gallery =  ;
90977: LD_ADDR_OWVAR 33
90981: PUSH
90982: LD_STRING 
90984: ST_TO_ADDR
// animal := CreateHuman ;
90985: LD_ADDR_VAR 0 12
90989: PUSH
90990: CALL_OW 44
90994: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
90995: LD_VAR 0 12
90999: PPUSH
91000: LD_VAR 0 8
91004: PPUSH
91005: LD_INT 0
91007: PPUSH
91008: CALL 92730 0 3
// end ;
91012: GO 90966
91014: POP
91015: POP
// if fishes then
91016: LD_VAR 0 7
91020: IFFALSE 91087
// for i = 1 to fishes do
91022: LD_ADDR_VAR 0 11
91026: PUSH
91027: DOUBLE
91028: LD_INT 1
91030: DEC
91031: ST_TO_ADDR
91032: LD_VAR 0 7
91036: PUSH
91037: FOR_TO
91038: IFFALSE 91085
// begin hc_class = 20 ;
91040: LD_ADDR_OWVAR 28
91044: PUSH
91045: LD_INT 20
91047: ST_TO_ADDR
// hc_gallery =  ;
91048: LD_ADDR_OWVAR 33
91052: PUSH
91053: LD_STRING 
91055: ST_TO_ADDR
// animal := CreateHuman ;
91056: LD_ADDR_VAR 0 12
91060: PUSH
91061: CALL_OW 44
91065: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
91066: LD_VAR 0 12
91070: PPUSH
91071: LD_VAR 0 9
91075: PPUSH
91076: LD_INT 0
91078: PPUSH
91079: CALL 92730 0 3
// end ;
91083: GO 91037
91085: POP
91086: POP
// end ;
91087: LD_VAR 0 10
91091: RET
// export function WantHeal ( sci , unit ) ; begin
91092: LD_INT 0
91094: PPUSH
// if GetTaskList ( sci ) > 0 then
91095: LD_VAR 0 1
91099: PPUSH
91100: CALL_OW 437
91104: PUSH
91105: LD_INT 0
91107: GREATER
91108: IFFALSE 91180
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
91110: LD_VAR 0 1
91114: PPUSH
91115: CALL_OW 437
91119: PUSH
91120: LD_INT 1
91122: ARRAY
91123: PUSH
91124: LD_INT 1
91126: ARRAY
91127: PUSH
91128: LD_STRING l
91130: EQUAL
91131: IFFALSE 91158
91133: PUSH
91134: LD_VAR 0 1
91138: PPUSH
91139: CALL_OW 437
91143: PUSH
91144: LD_INT 1
91146: ARRAY
91147: PUSH
91148: LD_INT 4
91150: ARRAY
91151: PUSH
91152: LD_VAR 0 2
91156: EQUAL
91157: AND
91158: IFFALSE 91170
// result := true else
91160: LD_ADDR_VAR 0 3
91164: PUSH
91165: LD_INT 1
91167: ST_TO_ADDR
91168: GO 91178
// result := false ;
91170: LD_ADDR_VAR 0 3
91174: PUSH
91175: LD_INT 0
91177: ST_TO_ADDR
// end else
91178: GO 91188
// result := false ;
91180: LD_ADDR_VAR 0 3
91184: PUSH
91185: LD_INT 0
91187: ST_TO_ADDR
// end ;
91188: LD_VAR 0 3
91192: RET
// export function HealTarget ( sci ) ; begin
91193: LD_INT 0
91195: PPUSH
// if not sci then
91196: LD_VAR 0 1
91200: NOT
91201: IFFALSE 91205
// exit ;
91203: GO 91270
// result := 0 ;
91205: LD_ADDR_VAR 0 2
91209: PUSH
91210: LD_INT 0
91212: ST_TO_ADDR
// if GetTaskList ( sci ) then
91213: LD_VAR 0 1
91217: PPUSH
91218: CALL_OW 437
91222: IFFALSE 91270
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
91224: LD_VAR 0 1
91228: PPUSH
91229: CALL_OW 437
91233: PUSH
91234: LD_INT 1
91236: ARRAY
91237: PUSH
91238: LD_INT 1
91240: ARRAY
91241: PUSH
91242: LD_STRING l
91244: EQUAL
91245: IFFALSE 91270
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
91247: LD_ADDR_VAR 0 2
91251: PUSH
91252: LD_VAR 0 1
91256: PPUSH
91257: CALL_OW 437
91261: PUSH
91262: LD_INT 1
91264: ARRAY
91265: PUSH
91266: LD_INT 4
91268: ARRAY
91269: ST_TO_ADDR
// end ;
91270: LD_VAR 0 2
91274: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
91275: LD_INT 0
91277: PPUSH
91278: PPUSH
91279: PPUSH
91280: PPUSH
// if not base_units then
91281: LD_VAR 0 1
91285: NOT
91286: IFFALSE 91290
// exit ;
91288: GO 91377
// result := false ;
91290: LD_ADDR_VAR 0 2
91294: PUSH
91295: LD_INT 0
91297: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
91298: LD_ADDR_VAR 0 5
91302: PUSH
91303: LD_VAR 0 1
91307: PPUSH
91308: LD_INT 21
91310: PUSH
91311: LD_INT 3
91313: PUSH
91314: EMPTY
91315: LIST
91316: LIST
91317: PPUSH
91318: CALL_OW 72
91322: ST_TO_ADDR
// if not tmp then
91323: LD_VAR 0 5
91327: NOT
91328: IFFALSE 91332
// exit ;
91330: GO 91377
// for i in tmp do
91332: LD_ADDR_VAR 0 3
91336: PUSH
91337: LD_VAR 0 5
91341: PUSH
91342: FOR_IN
91343: IFFALSE 91375
// begin result := EnemyInRange ( i , 22 ) ;
91345: LD_ADDR_VAR 0 2
91349: PUSH
91350: LD_VAR 0 3
91354: PPUSH
91355: LD_INT 22
91357: PPUSH
91358: CALL 88802 0 2
91362: ST_TO_ADDR
// if result then
91363: LD_VAR 0 2
91367: IFFALSE 91373
// exit ;
91369: POP
91370: POP
91371: GO 91377
// end ;
91373: GO 91342
91375: POP
91376: POP
// end ;
91377: LD_VAR 0 2
91381: RET
// export function FilterByTag ( units , tag ) ; begin
91382: LD_INT 0
91384: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
91385: LD_ADDR_VAR 0 3
91389: PUSH
91390: LD_VAR 0 1
91394: PPUSH
91395: LD_INT 120
91397: PUSH
91398: LD_VAR 0 2
91402: PUSH
91403: EMPTY
91404: LIST
91405: LIST
91406: PPUSH
91407: CALL_OW 72
91411: ST_TO_ADDR
// end ;
91412: LD_VAR 0 3
91416: RET
// export function IsDriver ( un ) ; begin
91417: LD_INT 0
91419: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
91420: LD_ADDR_VAR 0 2
91424: PUSH
91425: LD_VAR 0 1
91429: PUSH
91430: LD_INT 55
91432: PUSH
91433: EMPTY
91434: LIST
91435: PPUSH
91436: CALL_OW 69
91440: IN
91441: ST_TO_ADDR
// end ;
91442: LD_VAR 0 2
91446: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
91447: LD_INT 0
91449: PPUSH
91450: PPUSH
// list := [ ] ;
91451: LD_ADDR_VAR 0 5
91455: PUSH
91456: EMPTY
91457: ST_TO_ADDR
// case d of 0 :
91458: LD_VAR 0 3
91462: PUSH
91463: LD_INT 0
91465: DOUBLE
91466: EQUAL
91467: IFTRUE 91471
91469: GO 91604
91471: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
91472: LD_ADDR_VAR 0 5
91476: PUSH
91477: LD_VAR 0 1
91481: PUSH
91482: LD_INT 4
91484: MINUS
91485: PUSH
91486: LD_VAR 0 2
91490: PUSH
91491: LD_INT 4
91493: MINUS
91494: PUSH
91495: LD_INT 2
91497: PUSH
91498: EMPTY
91499: LIST
91500: LIST
91501: LIST
91502: PUSH
91503: LD_VAR 0 1
91507: PUSH
91508: LD_INT 3
91510: MINUS
91511: PUSH
91512: LD_VAR 0 2
91516: PUSH
91517: LD_INT 1
91519: PUSH
91520: EMPTY
91521: LIST
91522: LIST
91523: LIST
91524: PUSH
91525: LD_VAR 0 1
91529: PUSH
91530: LD_INT 4
91532: PLUS
91533: PUSH
91534: LD_VAR 0 2
91538: PUSH
91539: LD_INT 4
91541: PUSH
91542: EMPTY
91543: LIST
91544: LIST
91545: LIST
91546: PUSH
91547: LD_VAR 0 1
91551: PUSH
91552: LD_INT 3
91554: PLUS
91555: PUSH
91556: LD_VAR 0 2
91560: PUSH
91561: LD_INT 3
91563: PLUS
91564: PUSH
91565: LD_INT 5
91567: PUSH
91568: EMPTY
91569: LIST
91570: LIST
91571: LIST
91572: PUSH
91573: LD_VAR 0 1
91577: PUSH
91578: LD_VAR 0 2
91582: PUSH
91583: LD_INT 4
91585: PLUS
91586: PUSH
91587: LD_INT 0
91589: PUSH
91590: EMPTY
91591: LIST
91592: LIST
91593: LIST
91594: PUSH
91595: EMPTY
91596: LIST
91597: LIST
91598: LIST
91599: LIST
91600: LIST
91601: ST_TO_ADDR
// end ; 1 :
91602: GO 92302
91604: LD_INT 1
91606: DOUBLE
91607: EQUAL
91608: IFTRUE 91612
91610: GO 91745
91612: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
91613: LD_ADDR_VAR 0 5
91617: PUSH
91618: LD_VAR 0 1
91622: PUSH
91623: LD_VAR 0 2
91627: PUSH
91628: LD_INT 4
91630: MINUS
91631: PUSH
91632: LD_INT 3
91634: PUSH
91635: EMPTY
91636: LIST
91637: LIST
91638: LIST
91639: PUSH
91640: LD_VAR 0 1
91644: PUSH
91645: LD_INT 3
91647: MINUS
91648: PUSH
91649: LD_VAR 0 2
91653: PUSH
91654: LD_INT 3
91656: MINUS
91657: PUSH
91658: LD_INT 2
91660: PUSH
91661: EMPTY
91662: LIST
91663: LIST
91664: LIST
91665: PUSH
91666: LD_VAR 0 1
91670: PUSH
91671: LD_INT 4
91673: MINUS
91674: PUSH
91675: LD_VAR 0 2
91679: PUSH
91680: LD_INT 1
91682: PUSH
91683: EMPTY
91684: LIST
91685: LIST
91686: LIST
91687: PUSH
91688: LD_VAR 0 1
91692: PUSH
91693: LD_VAR 0 2
91697: PUSH
91698: LD_INT 3
91700: PLUS
91701: PUSH
91702: LD_INT 0
91704: PUSH
91705: EMPTY
91706: LIST
91707: LIST
91708: LIST
91709: PUSH
91710: LD_VAR 0 1
91714: PUSH
91715: LD_INT 4
91717: PLUS
91718: PUSH
91719: LD_VAR 0 2
91723: PUSH
91724: LD_INT 4
91726: PLUS
91727: PUSH
91728: LD_INT 5
91730: PUSH
91731: EMPTY
91732: LIST
91733: LIST
91734: LIST
91735: PUSH
91736: EMPTY
91737: LIST
91738: LIST
91739: LIST
91740: LIST
91741: LIST
91742: ST_TO_ADDR
// end ; 2 :
91743: GO 92302
91745: LD_INT 2
91747: DOUBLE
91748: EQUAL
91749: IFTRUE 91753
91751: GO 91882
91753: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
91754: LD_ADDR_VAR 0 5
91758: PUSH
91759: LD_VAR 0 1
91763: PUSH
91764: LD_VAR 0 2
91768: PUSH
91769: LD_INT 3
91771: MINUS
91772: PUSH
91773: LD_INT 3
91775: PUSH
91776: EMPTY
91777: LIST
91778: LIST
91779: LIST
91780: PUSH
91781: LD_VAR 0 1
91785: PUSH
91786: LD_INT 4
91788: PLUS
91789: PUSH
91790: LD_VAR 0 2
91794: PUSH
91795: LD_INT 4
91797: PUSH
91798: EMPTY
91799: LIST
91800: LIST
91801: LIST
91802: PUSH
91803: LD_VAR 0 1
91807: PUSH
91808: LD_VAR 0 2
91812: PUSH
91813: LD_INT 4
91815: PLUS
91816: PUSH
91817: LD_INT 0
91819: PUSH
91820: EMPTY
91821: LIST
91822: LIST
91823: LIST
91824: PUSH
91825: LD_VAR 0 1
91829: PUSH
91830: LD_INT 3
91832: MINUS
91833: PUSH
91834: LD_VAR 0 2
91838: PUSH
91839: LD_INT 1
91841: PUSH
91842: EMPTY
91843: LIST
91844: LIST
91845: LIST
91846: PUSH
91847: LD_VAR 0 1
91851: PUSH
91852: LD_INT 4
91854: MINUS
91855: PUSH
91856: LD_VAR 0 2
91860: PUSH
91861: LD_INT 4
91863: MINUS
91864: PUSH
91865: LD_INT 2
91867: PUSH
91868: EMPTY
91869: LIST
91870: LIST
91871: LIST
91872: PUSH
91873: EMPTY
91874: LIST
91875: LIST
91876: LIST
91877: LIST
91878: LIST
91879: ST_TO_ADDR
// end ; 3 :
91880: GO 92302
91882: LD_INT 3
91884: DOUBLE
91885: EQUAL
91886: IFTRUE 91890
91888: GO 92023
91890: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
91891: LD_ADDR_VAR 0 5
91895: PUSH
91896: LD_VAR 0 1
91900: PUSH
91901: LD_INT 3
91903: PLUS
91904: PUSH
91905: LD_VAR 0 2
91909: PUSH
91910: LD_INT 4
91912: PUSH
91913: EMPTY
91914: LIST
91915: LIST
91916: LIST
91917: PUSH
91918: LD_VAR 0 1
91922: PUSH
91923: LD_INT 4
91925: PLUS
91926: PUSH
91927: LD_VAR 0 2
91931: PUSH
91932: LD_INT 4
91934: PLUS
91935: PUSH
91936: LD_INT 5
91938: PUSH
91939: EMPTY
91940: LIST
91941: LIST
91942: LIST
91943: PUSH
91944: LD_VAR 0 1
91948: PUSH
91949: LD_INT 4
91951: MINUS
91952: PUSH
91953: LD_VAR 0 2
91957: PUSH
91958: LD_INT 1
91960: PUSH
91961: EMPTY
91962: LIST
91963: LIST
91964: LIST
91965: PUSH
91966: LD_VAR 0 1
91970: PUSH
91971: LD_VAR 0 2
91975: PUSH
91976: LD_INT 4
91978: MINUS
91979: PUSH
91980: LD_INT 3
91982: PUSH
91983: EMPTY
91984: LIST
91985: LIST
91986: LIST
91987: PUSH
91988: LD_VAR 0 1
91992: PUSH
91993: LD_INT 3
91995: MINUS
91996: PUSH
91997: LD_VAR 0 2
92001: PUSH
92002: LD_INT 3
92004: MINUS
92005: PUSH
92006: LD_INT 2
92008: PUSH
92009: EMPTY
92010: LIST
92011: LIST
92012: LIST
92013: PUSH
92014: EMPTY
92015: LIST
92016: LIST
92017: LIST
92018: LIST
92019: LIST
92020: ST_TO_ADDR
// end ; 4 :
92021: GO 92302
92023: LD_INT 4
92025: DOUBLE
92026: EQUAL
92027: IFTRUE 92031
92029: GO 92164
92031: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
92032: LD_ADDR_VAR 0 5
92036: PUSH
92037: LD_VAR 0 1
92041: PUSH
92042: LD_VAR 0 2
92046: PUSH
92047: LD_INT 4
92049: PLUS
92050: PUSH
92051: LD_INT 0
92053: PUSH
92054: EMPTY
92055: LIST
92056: LIST
92057: LIST
92058: PUSH
92059: LD_VAR 0 1
92063: PUSH
92064: LD_INT 3
92066: PLUS
92067: PUSH
92068: LD_VAR 0 2
92072: PUSH
92073: LD_INT 3
92075: PLUS
92076: PUSH
92077: LD_INT 5
92079: PUSH
92080: EMPTY
92081: LIST
92082: LIST
92083: LIST
92084: PUSH
92085: LD_VAR 0 1
92089: PUSH
92090: LD_INT 4
92092: PLUS
92093: PUSH
92094: LD_VAR 0 2
92098: PUSH
92099: LD_INT 4
92101: PUSH
92102: EMPTY
92103: LIST
92104: LIST
92105: LIST
92106: PUSH
92107: LD_VAR 0 1
92111: PUSH
92112: LD_VAR 0 2
92116: PUSH
92117: LD_INT 3
92119: MINUS
92120: PUSH
92121: LD_INT 3
92123: PUSH
92124: EMPTY
92125: LIST
92126: LIST
92127: LIST
92128: PUSH
92129: LD_VAR 0 1
92133: PUSH
92134: LD_INT 4
92136: MINUS
92137: PUSH
92138: LD_VAR 0 2
92142: PUSH
92143: LD_INT 4
92145: MINUS
92146: PUSH
92147: LD_INT 2
92149: PUSH
92150: EMPTY
92151: LIST
92152: LIST
92153: LIST
92154: PUSH
92155: EMPTY
92156: LIST
92157: LIST
92158: LIST
92159: LIST
92160: LIST
92161: ST_TO_ADDR
// end ; 5 :
92162: GO 92302
92164: LD_INT 5
92166: DOUBLE
92167: EQUAL
92168: IFTRUE 92172
92170: GO 92301
92172: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
92173: LD_ADDR_VAR 0 5
92177: PUSH
92178: LD_VAR 0 1
92182: PUSH
92183: LD_INT 4
92185: MINUS
92186: PUSH
92187: LD_VAR 0 2
92191: PUSH
92192: LD_INT 1
92194: PUSH
92195: EMPTY
92196: LIST
92197: LIST
92198: LIST
92199: PUSH
92200: LD_VAR 0 1
92204: PUSH
92205: LD_VAR 0 2
92209: PUSH
92210: LD_INT 4
92212: MINUS
92213: PUSH
92214: LD_INT 3
92216: PUSH
92217: EMPTY
92218: LIST
92219: LIST
92220: LIST
92221: PUSH
92222: LD_VAR 0 1
92226: PUSH
92227: LD_INT 4
92229: PLUS
92230: PUSH
92231: LD_VAR 0 2
92235: PUSH
92236: LD_INT 4
92238: PLUS
92239: PUSH
92240: LD_INT 5
92242: PUSH
92243: EMPTY
92244: LIST
92245: LIST
92246: LIST
92247: PUSH
92248: LD_VAR 0 1
92252: PUSH
92253: LD_INT 3
92255: PLUS
92256: PUSH
92257: LD_VAR 0 2
92261: PUSH
92262: LD_INT 4
92264: PUSH
92265: EMPTY
92266: LIST
92267: LIST
92268: LIST
92269: PUSH
92270: LD_VAR 0 1
92274: PUSH
92275: LD_VAR 0 2
92279: PUSH
92280: LD_INT 3
92282: PLUS
92283: PUSH
92284: LD_INT 0
92286: PUSH
92287: EMPTY
92288: LIST
92289: LIST
92290: LIST
92291: PUSH
92292: EMPTY
92293: LIST
92294: LIST
92295: LIST
92296: LIST
92297: LIST
92298: ST_TO_ADDR
// end ; end ;
92299: GO 92302
92301: POP
// result := list ;
92302: LD_ADDR_VAR 0 4
92306: PUSH
92307: LD_VAR 0 5
92311: ST_TO_ADDR
// end ;
92312: LD_VAR 0 4
92316: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
92317: LD_INT 0
92319: PPUSH
92320: PPUSH
92321: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
92322: LD_VAR 0 1
92326: NOT
92327: IFTRUE 92355
92329: PUSH
92330: LD_VAR 0 2
92334: PUSH
92335: LD_INT 1
92337: PUSH
92338: LD_INT 2
92340: PUSH
92341: LD_INT 3
92343: PUSH
92344: LD_INT 4
92346: PUSH
92347: EMPTY
92348: LIST
92349: LIST
92350: LIST
92351: LIST
92352: IN
92353: NOT
92354: OR
92355: IFFALSE 92359
// exit ;
92357: GO 92442
// tmp := [ ] ;
92359: LD_ADDR_VAR 0 5
92363: PUSH
92364: EMPTY
92365: ST_TO_ADDR
// for i in units do
92366: LD_ADDR_VAR 0 4
92370: PUSH
92371: LD_VAR 0 1
92375: PUSH
92376: FOR_IN
92377: IFFALSE 92411
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
92379: LD_ADDR_VAR 0 5
92383: PUSH
92384: LD_VAR 0 5
92388: PPUSH
92389: LD_VAR 0 4
92393: PPUSH
92394: LD_VAR 0 2
92398: PPUSH
92399: CALL_OW 259
92403: PPUSH
92404: CALL 93837 0 2
92408: ST_TO_ADDR
92409: GO 92376
92411: POP
92412: POP
// if not tmp then
92413: LD_VAR 0 5
92417: NOT
92418: IFFALSE 92422
// exit ;
92420: GO 92442
// result := SortListByListDesc ( units , tmp ) ;
92422: LD_ADDR_VAR 0 3
92426: PUSH
92427: LD_VAR 0 1
92431: PPUSH
92432: LD_VAR 0 5
92436: PPUSH
92437: CALL_OW 77
92441: ST_TO_ADDR
// end ;
92442: LD_VAR 0 3
92446: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
92447: LD_INT 0
92449: PPUSH
92450: PPUSH
92451: PPUSH
// result := false ;
92452: LD_ADDR_VAR 0 3
92456: PUSH
92457: LD_INT 0
92459: ST_TO_ADDR
// if not building then
92460: LD_VAR 0 2
92464: NOT
92465: IFFALSE 92469
// exit ;
92467: GO 92613
// x := GetX ( building ) ;
92469: LD_ADDR_VAR 0 4
92473: PUSH
92474: LD_VAR 0 2
92478: PPUSH
92479: CALL_OW 250
92483: ST_TO_ADDR
// y := GetY ( building ) ;
92484: LD_ADDR_VAR 0 5
92488: PUSH
92489: LD_VAR 0 2
92493: PPUSH
92494: CALL_OW 251
92498: ST_TO_ADDR
// if not x or not y then
92499: LD_VAR 0 4
92503: NOT
92504: IFTRUE 92513
92506: PUSH
92507: LD_VAR 0 5
92511: NOT
92512: OR
92513: IFFALSE 92517
// exit ;
92515: GO 92613
// if GetTaskList ( unit ) then
92517: LD_VAR 0 1
92521: PPUSH
92522: CALL_OW 437
92526: IFFALSE 92613
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
92528: LD_STRING e
92530: PUSH
92531: LD_VAR 0 1
92535: PPUSH
92536: CALL_OW 437
92540: PUSH
92541: LD_INT 1
92543: ARRAY
92544: PUSH
92545: LD_INT 1
92547: ARRAY
92548: EQUAL
92549: IFFALSE 92576
92551: PUSH
92552: LD_VAR 0 4
92556: PUSH
92557: LD_VAR 0 1
92561: PPUSH
92562: CALL_OW 437
92566: PUSH
92567: LD_INT 1
92569: ARRAY
92570: PUSH
92571: LD_INT 2
92573: ARRAY
92574: EQUAL
92575: AND
92576: IFFALSE 92603
92578: PUSH
92579: LD_VAR 0 5
92583: PUSH
92584: LD_VAR 0 1
92588: PPUSH
92589: CALL_OW 437
92593: PUSH
92594: LD_INT 1
92596: ARRAY
92597: PUSH
92598: LD_INT 3
92600: ARRAY
92601: EQUAL
92602: AND
92603: IFFALSE 92613
// result := true end ;
92605: LD_ADDR_VAR 0 3
92609: PUSH
92610: LD_INT 1
92612: ST_TO_ADDR
// end ;
92613: LD_VAR 0 3
92617: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
92618: LD_INT 0
92620: PPUSH
// result := false ;
92621: LD_ADDR_VAR 0 4
92625: PUSH
92626: LD_INT 0
92628: ST_TO_ADDR
// if GetTaskList ( unit ) then
92629: LD_VAR 0 1
92633: PPUSH
92634: CALL_OW 437
92638: IFFALSE 92725
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
92640: LD_STRING M
92642: PUSH
92643: LD_VAR 0 1
92647: PPUSH
92648: CALL_OW 437
92652: PUSH
92653: LD_INT 1
92655: ARRAY
92656: PUSH
92657: LD_INT 1
92659: ARRAY
92660: EQUAL
92661: IFFALSE 92688
92663: PUSH
92664: LD_VAR 0 2
92668: PUSH
92669: LD_VAR 0 1
92673: PPUSH
92674: CALL_OW 437
92678: PUSH
92679: LD_INT 1
92681: ARRAY
92682: PUSH
92683: LD_INT 2
92685: ARRAY
92686: EQUAL
92687: AND
92688: IFFALSE 92715
92690: PUSH
92691: LD_VAR 0 3
92695: PUSH
92696: LD_VAR 0 1
92700: PPUSH
92701: CALL_OW 437
92705: PUSH
92706: LD_INT 1
92708: ARRAY
92709: PUSH
92710: LD_INT 3
92712: ARRAY
92713: EQUAL
92714: AND
92715: IFFALSE 92725
// result := true ;
92717: LD_ADDR_VAR 0 4
92721: PUSH
92722: LD_INT 1
92724: ST_TO_ADDR
// end ; end ;
92725: LD_VAR 0 4
92729: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
92730: LD_INT 0
92732: PPUSH
92733: PPUSH
92734: PPUSH
92735: PPUSH
// if not unit or not area then
92736: LD_VAR 0 1
92740: NOT
92741: IFTRUE 92750
92743: PUSH
92744: LD_VAR 0 2
92748: NOT
92749: OR
92750: IFFALSE 92754
// exit ;
92752: GO 92930
// tmp := AreaToList ( area , i ) ;
92754: LD_ADDR_VAR 0 6
92758: PUSH
92759: LD_VAR 0 2
92763: PPUSH
92764: LD_VAR 0 5
92768: PPUSH
92769: CALL_OW 517
92773: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
92774: LD_ADDR_VAR 0 5
92778: PUSH
92779: DOUBLE
92780: LD_INT 1
92782: DEC
92783: ST_TO_ADDR
92784: LD_VAR 0 6
92788: PUSH
92789: LD_INT 1
92791: ARRAY
92792: PUSH
92793: FOR_TO
92794: IFFALSE 92928
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
92796: LD_ADDR_VAR 0 7
92800: PUSH
92801: LD_VAR 0 6
92805: PUSH
92806: LD_INT 1
92808: ARRAY
92809: PUSH
92810: LD_VAR 0 5
92814: ARRAY
92815: PUSH
92816: LD_VAR 0 6
92820: PUSH
92821: LD_INT 2
92823: ARRAY
92824: PUSH
92825: LD_VAR 0 5
92829: ARRAY
92830: PUSH
92831: EMPTY
92832: LIST
92833: LIST
92834: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
92835: LD_INT 92
92837: PUSH
92838: LD_VAR 0 7
92842: PUSH
92843: LD_INT 1
92845: ARRAY
92846: PUSH
92847: LD_VAR 0 7
92851: PUSH
92852: LD_INT 2
92854: ARRAY
92855: PUSH
92856: LD_INT 2
92858: PUSH
92859: EMPTY
92860: LIST
92861: LIST
92862: LIST
92863: LIST
92864: PPUSH
92865: CALL_OW 69
92869: PUSH
92870: LD_INT 0
92872: EQUAL
92873: IFFALSE 92926
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
92875: LD_VAR 0 1
92879: PPUSH
92880: LD_VAR 0 7
92884: PUSH
92885: LD_INT 1
92887: ARRAY
92888: PPUSH
92889: LD_VAR 0 7
92893: PUSH
92894: LD_INT 2
92896: ARRAY
92897: PPUSH
92898: LD_VAR 0 3
92902: PPUSH
92903: CALL_OW 48
// result := IsPlaced ( unit ) ;
92907: LD_ADDR_VAR 0 4
92911: PUSH
92912: LD_VAR 0 1
92916: PPUSH
92917: CALL_OW 305
92921: ST_TO_ADDR
// exit ;
92922: POP
92923: POP
92924: GO 92930
// end ; end ;
92926: GO 92793
92928: POP
92929: POP
// end ;
92930: LD_VAR 0 4
92934: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
92935: LD_INT 0
92937: PPUSH
92938: PPUSH
92939: PPUSH
// if not side or side > 8 then
92940: LD_VAR 0 1
92944: NOT
92945: IFTRUE 92957
92947: PUSH
92948: LD_VAR 0 1
92952: PUSH
92953: LD_INT 8
92955: GREATER
92956: OR
92957: IFFALSE 92961
// exit ;
92959: GO 93148
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
92961: LD_ADDR_VAR 0 4
92965: PUSH
92966: LD_INT 22
92968: PUSH
92969: LD_VAR 0 1
92973: PUSH
92974: EMPTY
92975: LIST
92976: LIST
92977: PUSH
92978: LD_INT 21
92980: PUSH
92981: LD_INT 3
92983: PUSH
92984: EMPTY
92985: LIST
92986: LIST
92987: PUSH
92988: EMPTY
92989: LIST
92990: LIST
92991: PPUSH
92992: CALL_OW 69
92996: ST_TO_ADDR
// if not tmp then
92997: LD_VAR 0 4
93001: NOT
93002: IFFALSE 93006
// exit ;
93004: GO 93148
// enable_addtolog := true ;
93006: LD_ADDR_OWVAR 81
93010: PUSH
93011: LD_INT 1
93013: ST_TO_ADDR
// AddToLog ( [ ) ;
93014: LD_STRING [
93016: PPUSH
93017: CALL_OW 561
// for i in tmp do
93021: LD_ADDR_VAR 0 3
93025: PUSH
93026: LD_VAR 0 4
93030: PUSH
93031: FOR_IN
93032: IFFALSE 93139
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
93034: LD_STRING [
93036: PUSH
93037: LD_VAR 0 3
93041: PPUSH
93042: CALL_OW 266
93046: STR
93047: PUSH
93048: LD_STRING , 
93050: STR
93051: PUSH
93052: LD_VAR 0 3
93056: PPUSH
93057: CALL_OW 250
93061: STR
93062: PUSH
93063: LD_STRING , 
93065: STR
93066: PUSH
93067: LD_VAR 0 3
93071: PPUSH
93072: CALL_OW 251
93076: STR
93077: PUSH
93078: LD_STRING , 
93080: STR
93081: PUSH
93082: LD_VAR 0 3
93086: PPUSH
93087: CALL_OW 254
93091: STR
93092: PUSH
93093: LD_STRING , 
93095: STR
93096: PUSH
93097: LD_VAR 0 3
93101: PPUSH
93102: LD_INT 1
93104: PPUSH
93105: CALL_OW 268
93109: STR
93110: PUSH
93111: LD_STRING , 
93113: STR
93114: PUSH
93115: LD_VAR 0 3
93119: PPUSH
93120: LD_INT 2
93122: PPUSH
93123: CALL_OW 268
93127: STR
93128: PUSH
93129: LD_STRING ],
93131: STR
93132: PPUSH
93133: CALL_OW 561
// end ;
93137: GO 93031
93139: POP
93140: POP
// AddToLog ( ]; ) ;
93141: LD_STRING ];
93143: PPUSH
93144: CALL_OW 561
// end ;
93148: LD_VAR 0 2
93152: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
93153: LD_INT 0
93155: PPUSH
93156: PPUSH
93157: PPUSH
93158: PPUSH
93159: PPUSH
// if not area or not rate or not max then
93160: LD_VAR 0 1
93164: NOT
93165: IFTRUE 93174
93167: PUSH
93168: LD_VAR 0 2
93172: NOT
93173: OR
93174: IFTRUE 93183
93176: PUSH
93177: LD_VAR 0 4
93181: NOT
93182: OR
93183: IFFALSE 93187
// exit ;
93185: GO 93376
// while 1 do
93187: LD_INT 1
93189: IFFALSE 93376
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
93191: LD_ADDR_VAR 0 9
93195: PUSH
93196: LD_VAR 0 1
93200: PPUSH
93201: LD_INT 1
93203: PPUSH
93204: CALL_OW 287
93208: PUSH
93209: LD_INT 10
93211: MUL
93212: ST_TO_ADDR
// r := rate / 10 ;
93213: LD_ADDR_VAR 0 7
93217: PUSH
93218: LD_VAR 0 2
93222: PUSH
93223: LD_INT 10
93225: DIVREAL
93226: ST_TO_ADDR
// time := 1 1$00 ;
93227: LD_ADDR_VAR 0 8
93231: PUSH
93232: LD_INT 2100
93234: ST_TO_ADDR
// if amount < min then
93235: LD_VAR 0 9
93239: PUSH
93240: LD_VAR 0 3
93244: LESS
93245: IFFALSE 93263
// r := r * 2 else
93247: LD_ADDR_VAR 0 7
93251: PUSH
93252: LD_VAR 0 7
93256: PUSH
93257: LD_INT 2
93259: MUL
93260: ST_TO_ADDR
93261: GO 93289
// if amount > max then
93263: LD_VAR 0 9
93267: PUSH
93268: LD_VAR 0 4
93272: GREATER
93273: IFFALSE 93289
// r := r / 2 ;
93275: LD_ADDR_VAR 0 7
93279: PUSH
93280: LD_VAR 0 7
93284: PUSH
93285: LD_INT 2
93287: DIVREAL
93288: ST_TO_ADDR
// time := time / r ;
93289: LD_ADDR_VAR 0 8
93293: PUSH
93294: LD_VAR 0 8
93298: PUSH
93299: LD_VAR 0 7
93303: DIVREAL
93304: ST_TO_ADDR
// if time < 0 then
93305: LD_VAR 0 8
93309: PUSH
93310: LD_INT 0
93312: LESS
93313: IFFALSE 93330
// time := time * - 1 ;
93315: LD_ADDR_VAR 0 8
93319: PUSH
93320: LD_VAR 0 8
93324: PUSH
93325: LD_INT 1
93327: NEG
93328: MUL
93329: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
93330: LD_VAR 0 8
93334: PUSH
93335: LD_INT 35
93337: PPUSH
93338: LD_INT 875
93340: PPUSH
93341: CALL_OW 12
93345: PLUS
93346: PPUSH
93347: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
93351: LD_INT 1
93353: PPUSH
93354: LD_INT 5
93356: PPUSH
93357: CALL_OW 12
93361: PPUSH
93362: LD_VAR 0 1
93366: PPUSH
93367: LD_INT 1
93369: PPUSH
93370: CALL_OW 55
// end ;
93374: GO 93187
// end ;
93376: LD_VAR 0 5
93380: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
93381: LD_INT 0
93383: PPUSH
93384: PPUSH
93385: PPUSH
93386: PPUSH
93387: PPUSH
93388: PPUSH
93389: PPUSH
93390: PPUSH
// if not turrets or not factories then
93391: LD_VAR 0 1
93395: NOT
93396: IFTRUE 93405
93398: PUSH
93399: LD_VAR 0 2
93403: NOT
93404: OR
93405: IFFALSE 93409
// exit ;
93407: GO 93716
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
93409: LD_ADDR_VAR 0 10
93413: PUSH
93414: LD_INT 5
93416: PUSH
93417: LD_INT 6
93419: PUSH
93420: EMPTY
93421: LIST
93422: LIST
93423: PUSH
93424: LD_INT 2
93426: PUSH
93427: LD_INT 4
93429: PUSH
93430: EMPTY
93431: LIST
93432: LIST
93433: PUSH
93434: LD_INT 3
93436: PUSH
93437: LD_INT 5
93439: PUSH
93440: EMPTY
93441: LIST
93442: LIST
93443: PUSH
93444: EMPTY
93445: LIST
93446: LIST
93447: LIST
93448: PUSH
93449: LD_INT 24
93451: PUSH
93452: LD_INT 25
93454: PUSH
93455: EMPTY
93456: LIST
93457: LIST
93458: PUSH
93459: LD_INT 23
93461: PUSH
93462: LD_INT 27
93464: PUSH
93465: EMPTY
93466: LIST
93467: LIST
93468: PUSH
93469: EMPTY
93470: LIST
93471: LIST
93472: PUSH
93473: LD_INT 42
93475: PUSH
93476: LD_INT 43
93478: PUSH
93479: EMPTY
93480: LIST
93481: LIST
93482: PUSH
93483: LD_INT 44
93485: PUSH
93486: LD_INT 46
93488: PUSH
93489: EMPTY
93490: LIST
93491: LIST
93492: PUSH
93493: LD_INT 45
93495: PUSH
93496: LD_INT 47
93498: PUSH
93499: EMPTY
93500: LIST
93501: LIST
93502: PUSH
93503: EMPTY
93504: LIST
93505: LIST
93506: LIST
93507: PUSH
93508: EMPTY
93509: LIST
93510: LIST
93511: LIST
93512: ST_TO_ADDR
// result := [ ] ;
93513: LD_ADDR_VAR 0 3
93517: PUSH
93518: EMPTY
93519: ST_TO_ADDR
// for i in turrets do
93520: LD_ADDR_VAR 0 4
93524: PUSH
93525: LD_VAR 0 1
93529: PUSH
93530: FOR_IN
93531: IFFALSE 93714
// begin nat := GetNation ( i ) ;
93533: LD_ADDR_VAR 0 7
93537: PUSH
93538: LD_VAR 0 4
93542: PPUSH
93543: CALL_OW 248
93547: ST_TO_ADDR
// weapon := 0 ;
93548: LD_ADDR_VAR 0 8
93552: PUSH
93553: LD_INT 0
93555: ST_TO_ADDR
// if not nat then
93556: LD_VAR 0 7
93560: NOT
93561: IFFALSE 93565
// continue ;
93563: GO 93530
// for j in list [ nat ] do
93565: LD_ADDR_VAR 0 5
93569: PUSH
93570: LD_VAR 0 10
93574: PUSH
93575: LD_VAR 0 7
93579: ARRAY
93580: PUSH
93581: FOR_IN
93582: IFFALSE 93623
// if GetBWeapon ( i ) = j [ 1 ] then
93584: LD_VAR 0 4
93588: PPUSH
93589: CALL_OW 269
93593: PUSH
93594: LD_VAR 0 5
93598: PUSH
93599: LD_INT 1
93601: ARRAY
93602: EQUAL
93603: IFFALSE 93621
// begin weapon := j [ 2 ] ;
93605: LD_ADDR_VAR 0 8
93609: PUSH
93610: LD_VAR 0 5
93614: PUSH
93615: LD_INT 2
93617: ARRAY
93618: ST_TO_ADDR
// break ;
93619: GO 93623
// end ;
93621: GO 93581
93623: POP
93624: POP
// if not weapon then
93625: LD_VAR 0 8
93629: NOT
93630: IFFALSE 93634
// continue ;
93632: GO 93530
// for k in factories do
93634: LD_ADDR_VAR 0 6
93638: PUSH
93639: LD_VAR 0 2
93643: PUSH
93644: FOR_IN
93645: IFFALSE 93710
// begin weapons := AvailableWeaponList ( k ) ;
93647: LD_ADDR_VAR 0 9
93651: PUSH
93652: LD_VAR 0 6
93656: PPUSH
93657: CALL_OW 478
93661: ST_TO_ADDR
// if not weapons then
93662: LD_VAR 0 9
93666: NOT
93667: IFFALSE 93671
// continue ;
93669: GO 93644
// if weapon in weapons then
93671: LD_VAR 0 8
93675: PUSH
93676: LD_VAR 0 9
93680: IN
93681: IFFALSE 93708
// begin result := [ i , weapon ] ;
93683: LD_ADDR_VAR 0 3
93687: PUSH
93688: LD_VAR 0 4
93692: PUSH
93693: LD_VAR 0 8
93697: PUSH
93698: EMPTY
93699: LIST
93700: LIST
93701: ST_TO_ADDR
// exit ;
93702: POP
93703: POP
93704: POP
93705: POP
93706: GO 93716
// end ; end ;
93708: GO 93644
93710: POP
93711: POP
// end ;
93712: GO 93530
93714: POP
93715: POP
// end ;
93716: LD_VAR 0 3
93720: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
93721: LD_INT 0
93723: PPUSH
// if not side or side > 8 then
93724: LD_VAR 0 3
93728: NOT
93729: IFTRUE 93741
93731: PUSH
93732: LD_VAR 0 3
93736: PUSH
93737: LD_INT 8
93739: GREATER
93740: OR
93741: IFFALSE 93745
// exit ;
93743: GO 93804
// if not range then
93745: LD_VAR 0 4
93749: NOT
93750: IFFALSE 93761
// range := - 12 ;
93752: LD_ADDR_VAR 0 4
93756: PUSH
93757: LD_INT 12
93759: NEG
93760: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
93761: LD_VAR 0 1
93765: PPUSH
93766: LD_VAR 0 2
93770: PPUSH
93771: LD_VAR 0 3
93775: PPUSH
93776: LD_VAR 0 4
93780: PPUSH
93781: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
93785: LD_VAR 0 1
93789: PPUSH
93790: LD_VAR 0 2
93794: PPUSH
93795: LD_VAR 0 3
93799: PPUSH
93800: CALL_OW 331
// end ;
93804: LD_VAR 0 5
93808: RET
// export function Video ( mode ) ; begin
93809: LD_INT 0
93811: PPUSH
// ingame_video = mode ;
93812: LD_ADDR_OWVAR 52
93816: PUSH
93817: LD_VAR 0 1
93821: ST_TO_ADDR
// interface_hidden = mode ;
93822: LD_ADDR_OWVAR 54
93826: PUSH
93827: LD_VAR 0 1
93831: ST_TO_ADDR
// end ;
93832: LD_VAR 0 2
93836: RET
// export function Join ( array , element ) ; begin
93837: LD_INT 0
93839: PPUSH
// result := Replace ( array , array + 1 , element ) ;
93840: LD_ADDR_VAR 0 3
93844: PUSH
93845: LD_VAR 0 1
93849: PPUSH
93850: LD_VAR 0 1
93854: PUSH
93855: LD_INT 1
93857: PLUS
93858: PPUSH
93859: LD_VAR 0 2
93863: PPUSH
93864: CALL_OW 1
93868: ST_TO_ADDR
// end ;
93869: LD_VAR 0 3
93873: RET
// export function JoinUnion ( array , element ) ; begin
93874: LD_INT 0
93876: PPUSH
// result := array union element ;
93877: LD_ADDR_VAR 0 3
93881: PUSH
93882: LD_VAR 0 1
93886: PUSH
93887: LD_VAR 0 2
93891: UNION
93892: ST_TO_ADDR
// end ;
93893: LD_VAR 0 3
93897: RET
// export function GetBehemoths ( side ) ; begin
93898: LD_INT 0
93900: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
93901: LD_ADDR_VAR 0 2
93905: PUSH
93906: LD_INT 22
93908: PUSH
93909: LD_VAR 0 1
93913: PUSH
93914: EMPTY
93915: LIST
93916: LIST
93917: PUSH
93918: LD_INT 31
93920: PUSH
93921: LD_INT 25
93923: PUSH
93924: EMPTY
93925: LIST
93926: LIST
93927: PUSH
93928: EMPTY
93929: LIST
93930: LIST
93931: PPUSH
93932: CALL_OW 69
93936: ST_TO_ADDR
// end ;
93937: LD_VAR 0 2
93941: RET
// export function Shuffle ( array ) ; var i , index ; begin
93942: LD_INT 0
93944: PPUSH
93945: PPUSH
93946: PPUSH
// result := [ ] ;
93947: LD_ADDR_VAR 0 2
93951: PUSH
93952: EMPTY
93953: ST_TO_ADDR
// if not array then
93954: LD_VAR 0 1
93958: NOT
93959: IFFALSE 93963
// exit ;
93961: GO 94062
// Randomize ;
93963: CALL_OW 10
// for i = array downto 1 do
93967: LD_ADDR_VAR 0 3
93971: PUSH
93972: DOUBLE
93973: LD_VAR 0 1
93977: INC
93978: ST_TO_ADDR
93979: LD_INT 1
93981: PUSH
93982: FOR_DOWNTO
93983: IFFALSE 94060
// begin index := rand ( 1 , array ) ;
93985: LD_ADDR_VAR 0 4
93989: PUSH
93990: LD_INT 1
93992: PPUSH
93993: LD_VAR 0 1
93997: PPUSH
93998: CALL_OW 12
94002: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
94003: LD_ADDR_VAR 0 2
94007: PUSH
94008: LD_VAR 0 2
94012: PPUSH
94013: LD_VAR 0 2
94017: PUSH
94018: LD_INT 1
94020: PLUS
94021: PPUSH
94022: LD_VAR 0 1
94026: PUSH
94027: LD_VAR 0 4
94031: ARRAY
94032: PPUSH
94033: CALL_OW 2
94037: ST_TO_ADDR
// array := Delete ( array , index ) ;
94038: LD_ADDR_VAR 0 1
94042: PUSH
94043: LD_VAR 0 1
94047: PPUSH
94048: LD_VAR 0 4
94052: PPUSH
94053: CALL_OW 3
94057: ST_TO_ADDR
// end ;
94058: GO 93982
94060: POP
94061: POP
// end ;
94062: LD_VAR 0 2
94066: RET
// export function GetBaseMaterials ( base ) ; begin
94067: LD_INT 0
94069: PPUSH
// result := [ 0 , 0 , 0 ] ;
94070: LD_ADDR_VAR 0 2
94074: PUSH
94075: LD_INT 0
94077: PUSH
94078: LD_INT 0
94080: PUSH
94081: LD_INT 0
94083: PUSH
94084: EMPTY
94085: LIST
94086: LIST
94087: LIST
94088: ST_TO_ADDR
// if not base then
94089: LD_VAR 0 1
94093: NOT
94094: IFFALSE 94098
// exit ;
94096: GO 94147
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
94098: LD_ADDR_VAR 0 2
94102: PUSH
94103: LD_VAR 0 1
94107: PPUSH
94108: LD_INT 1
94110: PPUSH
94111: CALL_OW 275
94115: PUSH
94116: LD_VAR 0 1
94120: PPUSH
94121: LD_INT 2
94123: PPUSH
94124: CALL_OW 275
94128: PUSH
94129: LD_VAR 0 1
94133: PPUSH
94134: LD_INT 3
94136: PPUSH
94137: CALL_OW 275
94141: PUSH
94142: EMPTY
94143: LIST
94144: LIST
94145: LIST
94146: ST_TO_ADDR
// end ;
94147: LD_VAR 0 2
94151: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
94152: LD_INT 0
94154: PPUSH
94155: PPUSH
// result := array ;
94156: LD_ADDR_VAR 0 3
94160: PUSH
94161: LD_VAR 0 1
94165: ST_TO_ADDR
// if size >= result then
94166: LD_VAR 0 2
94170: PUSH
94171: LD_VAR 0 3
94175: GREATEREQUAL
94176: IFFALSE 94180
// exit ;
94178: GO 94230
// if size then
94180: LD_VAR 0 2
94184: IFFALSE 94230
// for i := array downto size do
94186: LD_ADDR_VAR 0 4
94190: PUSH
94191: DOUBLE
94192: LD_VAR 0 1
94196: INC
94197: ST_TO_ADDR
94198: LD_VAR 0 2
94202: PUSH
94203: FOR_DOWNTO
94204: IFFALSE 94228
// result := Delete ( result , result ) ;
94206: LD_ADDR_VAR 0 3
94210: PUSH
94211: LD_VAR 0 3
94215: PPUSH
94216: LD_VAR 0 3
94220: PPUSH
94221: CALL_OW 3
94225: ST_TO_ADDR
94226: GO 94203
94228: POP
94229: POP
// end ;
94230: LD_VAR 0 3
94234: RET
// export function ComExit ( unit ) ; var tmp ; begin
94235: LD_INT 0
94237: PPUSH
94238: PPUSH
// if not IsInUnit ( unit ) then
94239: LD_VAR 0 1
94243: PPUSH
94244: CALL_OW 310
94248: NOT
94249: IFFALSE 94253
// exit ;
94251: GO 94313
// tmp := IsInUnit ( unit ) ;
94253: LD_ADDR_VAR 0 3
94257: PUSH
94258: LD_VAR 0 1
94262: PPUSH
94263: CALL_OW 310
94267: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
94268: LD_VAR 0 3
94272: PPUSH
94273: CALL_OW 247
94277: PUSH
94278: LD_INT 2
94280: EQUAL
94281: IFFALSE 94294
// ComExitVehicle ( unit ) else
94283: LD_VAR 0 1
94287: PPUSH
94288: CALL_OW 121
94292: GO 94303
// ComExitBuilding ( unit ) ;
94294: LD_VAR 0 1
94298: PPUSH
94299: CALL_OW 122
// result := tmp ;
94303: LD_ADDR_VAR 0 2
94307: PUSH
94308: LD_VAR 0 3
94312: ST_TO_ADDR
// end ;
94313: LD_VAR 0 2
94317: RET
// export function ComExitAll ( units ) ; var i ; begin
94318: LD_INT 0
94320: PPUSH
94321: PPUSH
// if not units then
94322: LD_VAR 0 1
94326: NOT
94327: IFFALSE 94331
// exit ;
94329: GO 94357
// for i in units do
94331: LD_ADDR_VAR 0 3
94335: PUSH
94336: LD_VAR 0 1
94340: PUSH
94341: FOR_IN
94342: IFFALSE 94355
// ComExit ( i ) ;
94344: LD_VAR 0 3
94348: PPUSH
94349: CALL 94235 0 1
94353: GO 94341
94355: POP
94356: POP
// end ;
94357: LD_VAR 0 2
94361: RET
// export function ResetHc ; begin
94362: LD_INT 0
94364: PPUSH
// InitHc ;
94365: CALL_OW 19
// hc_importance := 0 ;
94369: LD_ADDR_OWVAR 32
94373: PUSH
94374: LD_INT 0
94376: ST_TO_ADDR
// end ;
94377: LD_VAR 0 1
94381: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
94382: LD_INT 0
94384: PPUSH
94385: PPUSH
94386: PPUSH
// _x := ( x1 + x2 ) div 2 ;
94387: LD_ADDR_VAR 0 6
94391: PUSH
94392: LD_VAR 0 1
94396: PUSH
94397: LD_VAR 0 3
94401: PLUS
94402: PUSH
94403: LD_INT 2
94405: DIV
94406: ST_TO_ADDR
// if _x < 0 then
94407: LD_VAR 0 6
94411: PUSH
94412: LD_INT 0
94414: LESS
94415: IFFALSE 94432
// _x := _x * - 1 ;
94417: LD_ADDR_VAR 0 6
94421: PUSH
94422: LD_VAR 0 6
94426: PUSH
94427: LD_INT 1
94429: NEG
94430: MUL
94431: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
94432: LD_ADDR_VAR 0 7
94436: PUSH
94437: LD_VAR 0 2
94441: PUSH
94442: LD_VAR 0 4
94446: PLUS
94447: PUSH
94448: LD_INT 2
94450: DIV
94451: ST_TO_ADDR
// if _y < 0 then
94452: LD_VAR 0 7
94456: PUSH
94457: LD_INT 0
94459: LESS
94460: IFFALSE 94477
// _y := _y * - 1 ;
94462: LD_ADDR_VAR 0 7
94466: PUSH
94467: LD_VAR 0 7
94471: PUSH
94472: LD_INT 1
94474: NEG
94475: MUL
94476: ST_TO_ADDR
// result := [ _x , _y ] ;
94477: LD_ADDR_VAR 0 5
94481: PUSH
94482: LD_VAR 0 6
94486: PUSH
94487: LD_VAR 0 7
94491: PUSH
94492: EMPTY
94493: LIST
94494: LIST
94495: ST_TO_ADDR
// end ;
94496: LD_VAR 0 5
94500: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
94501: LD_INT 0
94503: PPUSH
94504: PPUSH
94505: PPUSH
94506: PPUSH
// task := GetTaskList ( unit ) ;
94507: LD_ADDR_VAR 0 7
94511: PUSH
94512: LD_VAR 0 1
94516: PPUSH
94517: CALL_OW 437
94521: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
94522: LD_VAR 0 7
94526: NOT
94527: IFFALSE 94546
94529: PUSH
94530: LD_VAR 0 1
94534: PPUSH
94535: LD_VAR 0 2
94539: PPUSH
94540: CALL_OW 308
94544: NOT
94545: AND
94546: IFFALSE 94550
// exit ;
94548: GO 94668
// if IsInArea ( unit , area ) then
94550: LD_VAR 0 1
94554: PPUSH
94555: LD_VAR 0 2
94559: PPUSH
94560: CALL_OW 308
94564: IFFALSE 94582
// begin ComMoveToArea ( unit , goAway ) ;
94566: LD_VAR 0 1
94570: PPUSH
94571: LD_VAR 0 3
94575: PPUSH
94576: CALL_OW 113
// exit ;
94580: GO 94668
// end ; if task [ 1 ] [ 1 ] <> M then
94582: LD_VAR 0 7
94586: PUSH
94587: LD_INT 1
94589: ARRAY
94590: PUSH
94591: LD_INT 1
94593: ARRAY
94594: PUSH
94595: LD_STRING M
94597: NONEQUAL
94598: IFFALSE 94602
// exit ;
94600: GO 94668
// x := task [ 1 ] [ 2 ] ;
94602: LD_ADDR_VAR 0 5
94606: PUSH
94607: LD_VAR 0 7
94611: PUSH
94612: LD_INT 1
94614: ARRAY
94615: PUSH
94616: LD_INT 2
94618: ARRAY
94619: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
94620: LD_ADDR_VAR 0 6
94624: PUSH
94625: LD_VAR 0 7
94629: PUSH
94630: LD_INT 1
94632: ARRAY
94633: PUSH
94634: LD_INT 3
94636: ARRAY
94637: ST_TO_ADDR
// if InArea ( x , y , area ) then
94638: LD_VAR 0 5
94642: PPUSH
94643: LD_VAR 0 6
94647: PPUSH
94648: LD_VAR 0 2
94652: PPUSH
94653: CALL_OW 309
94657: IFFALSE 94668
// ComStop ( unit ) ;
94659: LD_VAR 0 1
94663: PPUSH
94664: CALL_OW 141
// end ;
94668: LD_VAR 0 4
94672: RET
// export function Abs ( value ) ; begin
94673: LD_INT 0
94675: PPUSH
// result := value ;
94676: LD_ADDR_VAR 0 2
94680: PUSH
94681: LD_VAR 0 1
94685: ST_TO_ADDR
// if value < 0 then
94686: LD_VAR 0 1
94690: PUSH
94691: LD_INT 0
94693: LESS
94694: IFFALSE 94711
// result := value * - 1 ;
94696: LD_ADDR_VAR 0 2
94700: PUSH
94701: LD_VAR 0 1
94705: PUSH
94706: LD_INT 1
94708: NEG
94709: MUL
94710: ST_TO_ADDR
// end ;
94711: LD_VAR 0 2
94715: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
94716: LD_INT 0
94718: PPUSH
94719: PPUSH
94720: PPUSH
94721: PPUSH
94722: PPUSH
94723: PPUSH
94724: PPUSH
94725: PPUSH
// if not unit or not building then
94726: LD_VAR 0 1
94730: NOT
94731: IFTRUE 94740
94733: PUSH
94734: LD_VAR 0 2
94738: NOT
94739: OR
94740: IFFALSE 94744
// exit ;
94742: GO 94972
// x := GetX ( building ) ;
94744: LD_ADDR_VAR 0 4
94748: PUSH
94749: LD_VAR 0 2
94753: PPUSH
94754: CALL_OW 250
94758: ST_TO_ADDR
// y := GetY ( building ) ;
94759: LD_ADDR_VAR 0 6
94763: PUSH
94764: LD_VAR 0 2
94768: PPUSH
94769: CALL_OW 251
94773: ST_TO_ADDR
// d := GetDir ( building ) ;
94774: LD_ADDR_VAR 0 8
94778: PUSH
94779: LD_VAR 0 2
94783: PPUSH
94784: CALL_OW 254
94788: ST_TO_ADDR
// r := 4 ;
94789: LD_ADDR_VAR 0 9
94793: PUSH
94794: LD_INT 4
94796: ST_TO_ADDR
// for i := 1 to 5 do
94797: LD_ADDR_VAR 0 10
94801: PUSH
94802: DOUBLE
94803: LD_INT 1
94805: DEC
94806: ST_TO_ADDR
94807: LD_INT 5
94809: PUSH
94810: FOR_TO
94811: IFFALSE 94970
// begin _x := ShiftX ( x , d , r + i ) ;
94813: LD_ADDR_VAR 0 5
94817: PUSH
94818: LD_VAR 0 4
94822: PPUSH
94823: LD_VAR 0 8
94827: PPUSH
94828: LD_VAR 0 9
94832: PUSH
94833: LD_VAR 0 10
94837: PLUS
94838: PPUSH
94839: CALL_OW 272
94843: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
94844: LD_ADDR_VAR 0 7
94848: PUSH
94849: LD_VAR 0 6
94853: PPUSH
94854: LD_VAR 0 8
94858: PPUSH
94859: LD_VAR 0 9
94863: PUSH
94864: LD_VAR 0 10
94868: PLUS
94869: PPUSH
94870: CALL_OW 273
94874: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
94875: LD_VAR 0 5
94879: PPUSH
94880: LD_VAR 0 7
94884: PPUSH
94885: CALL_OW 488
94889: IFFALSE 94924
94891: PUSH
94892: LD_VAR 0 5
94896: PPUSH
94897: LD_VAR 0 7
94901: PPUSH
94902: CALL_OW 428
94906: PPUSH
94907: CALL_OW 247
94911: PUSH
94912: LD_INT 3
94914: PUSH
94915: LD_INT 2
94917: PUSH
94918: EMPTY
94919: LIST
94920: LIST
94921: IN
94922: NOT
94923: AND
94924: IFFALSE 94968
// begin ComMoveXY ( unit , _x , _y ) ;
94926: LD_VAR 0 1
94930: PPUSH
94931: LD_VAR 0 5
94935: PPUSH
94936: LD_VAR 0 7
94940: PPUSH
94941: CALL_OW 111
// result := [ _x , _y ] ;
94945: LD_ADDR_VAR 0 3
94949: PUSH
94950: LD_VAR 0 5
94954: PUSH
94955: LD_VAR 0 7
94959: PUSH
94960: EMPTY
94961: LIST
94962: LIST
94963: ST_TO_ADDR
// exit ;
94964: POP
94965: POP
94966: GO 94972
// end ; end ;
94968: GO 94810
94970: POP
94971: POP
// end ;
94972: LD_VAR 0 3
94976: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
94977: LD_INT 0
94979: PPUSH
94980: PPUSH
94981: PPUSH
// result := 0 ;
94982: LD_ADDR_VAR 0 3
94986: PUSH
94987: LD_INT 0
94989: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
94990: LD_VAR 0 1
94994: PUSH
94995: LD_INT 0
94997: LESS
94998: IFTRUE 95010
95000: PUSH
95001: LD_VAR 0 1
95005: PUSH
95006: LD_INT 8
95008: GREATER
95009: OR
95010: IFTRUE 95022
95012: PUSH
95013: LD_VAR 0 2
95017: PUSH
95018: LD_INT 0
95020: LESS
95021: OR
95022: IFTRUE 95034
95024: PUSH
95025: LD_VAR 0 2
95029: PUSH
95030: LD_INT 8
95032: GREATER
95033: OR
95034: IFFALSE 95038
// exit ;
95036: GO 95113
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
95038: LD_ADDR_VAR 0 4
95042: PUSH
95043: LD_INT 22
95045: PUSH
95046: LD_VAR 0 2
95050: PUSH
95051: EMPTY
95052: LIST
95053: LIST
95054: PPUSH
95055: CALL_OW 69
95059: PUSH
95060: FOR_IN
95061: IFFALSE 95111
// begin un := UnitShoot ( i ) ;
95063: LD_ADDR_VAR 0 5
95067: PUSH
95068: LD_VAR 0 4
95072: PPUSH
95073: CALL_OW 504
95077: ST_TO_ADDR
// if GetSide ( un ) = side1 then
95078: LD_VAR 0 5
95082: PPUSH
95083: CALL_OW 255
95087: PUSH
95088: LD_VAR 0 1
95092: EQUAL
95093: IFFALSE 95109
// begin result := un ;
95095: LD_ADDR_VAR 0 3
95099: PUSH
95100: LD_VAR 0 5
95104: ST_TO_ADDR
// exit ;
95105: POP
95106: POP
95107: GO 95113
// end ; end ;
95109: GO 95060
95111: POP
95112: POP
// end ;
95113: LD_VAR 0 3
95117: RET
// export function GetCargoBay ( units ) ; begin
95118: LD_INT 0
95120: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
95121: LD_ADDR_VAR 0 2
95125: PUSH
95126: LD_VAR 0 1
95130: PPUSH
95131: LD_INT 2
95133: PUSH
95134: LD_INT 34
95136: PUSH
95137: LD_INT 12
95139: PUSH
95140: EMPTY
95141: LIST
95142: LIST
95143: PUSH
95144: LD_INT 34
95146: PUSH
95147: LD_INT 51
95149: PUSH
95150: EMPTY
95151: LIST
95152: LIST
95153: PUSH
95154: LD_INT 34
95156: PUSH
95157: LD_INT 32
95159: PUSH
95160: EMPTY
95161: LIST
95162: LIST
95163: PUSH
95164: LD_INT 34
95166: PUSH
95167: LD_INT 89
95169: PUSH
95170: EMPTY
95171: LIST
95172: LIST
95173: PUSH
95174: EMPTY
95175: LIST
95176: LIST
95177: LIST
95178: LIST
95179: LIST
95180: PPUSH
95181: CALL_OW 72
95185: ST_TO_ADDR
// end ;
95186: LD_VAR 0 2
95190: RET
// export function Negate ( value ) ; begin
95191: LD_INT 0
95193: PPUSH
// result := not value ;
95194: LD_ADDR_VAR 0 2
95198: PUSH
95199: LD_VAR 0 1
95203: NOT
95204: ST_TO_ADDR
// end ;
95205: LD_VAR 0 2
95209: RET
// export function Inc ( value ) ; begin
95210: LD_INT 0
95212: PPUSH
// result := value + 1 ;
95213: LD_ADDR_VAR 0 2
95217: PUSH
95218: LD_VAR 0 1
95222: PUSH
95223: LD_INT 1
95225: PLUS
95226: ST_TO_ADDR
// end ;
95227: LD_VAR 0 2
95231: RET
// export function Dec ( value ) ; begin
95232: LD_INT 0
95234: PPUSH
// result := value - 1 ;
95235: LD_ADDR_VAR 0 2
95239: PUSH
95240: LD_VAR 0 1
95244: PUSH
95245: LD_INT 1
95247: MINUS
95248: ST_TO_ADDR
// end ;
95249: LD_VAR 0 2
95253: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
95254: LD_INT 0
95256: PPUSH
95257: PPUSH
95258: PPUSH
95259: PPUSH
95260: PPUSH
95261: PPUSH
95262: PPUSH
95263: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
95264: LD_VAR 0 1
95268: PPUSH
95269: LD_VAR 0 2
95273: PPUSH
95274: CALL_OW 488
95278: NOT
95279: IFTRUE 95298
95281: PUSH
95282: LD_VAR 0 3
95286: PPUSH
95287: LD_VAR 0 4
95291: PPUSH
95292: CALL_OW 488
95296: NOT
95297: OR
95298: IFFALSE 95311
// begin result := - 1 ;
95300: LD_ADDR_VAR 0 5
95304: PUSH
95305: LD_INT 1
95307: NEG
95308: ST_TO_ADDR
// exit ;
95309: GO 95546
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
95311: LD_ADDR_VAR 0 12
95315: PUSH
95316: LD_VAR 0 1
95320: PPUSH
95321: LD_VAR 0 2
95325: PPUSH
95326: LD_VAR 0 3
95330: PPUSH
95331: LD_VAR 0 4
95335: PPUSH
95336: CALL 94382 0 4
95340: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
95341: LD_ADDR_VAR 0 11
95345: PUSH
95346: LD_VAR 0 1
95350: PPUSH
95351: LD_VAR 0 2
95355: PPUSH
95356: LD_VAR 0 12
95360: PUSH
95361: LD_INT 1
95363: ARRAY
95364: PPUSH
95365: LD_VAR 0 12
95369: PUSH
95370: LD_INT 2
95372: ARRAY
95373: PPUSH
95374: CALL_OW 298
95378: ST_TO_ADDR
// distance := 9999 ;
95379: LD_ADDR_VAR 0 10
95383: PUSH
95384: LD_INT 9999
95386: ST_TO_ADDR
// for i := 0 to 5 do
95387: LD_ADDR_VAR 0 6
95391: PUSH
95392: DOUBLE
95393: LD_INT 0
95395: DEC
95396: ST_TO_ADDR
95397: LD_INT 5
95399: PUSH
95400: FOR_TO
95401: IFFALSE 95544
// begin _x := ShiftX ( x1 , i , centerDist ) ;
95403: LD_ADDR_VAR 0 7
95407: PUSH
95408: LD_VAR 0 1
95412: PPUSH
95413: LD_VAR 0 6
95417: PPUSH
95418: LD_VAR 0 11
95422: PPUSH
95423: CALL_OW 272
95427: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
95428: LD_ADDR_VAR 0 8
95432: PUSH
95433: LD_VAR 0 2
95437: PPUSH
95438: LD_VAR 0 6
95442: PPUSH
95443: LD_VAR 0 11
95447: PPUSH
95448: CALL_OW 273
95452: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
95453: LD_VAR 0 7
95457: PPUSH
95458: LD_VAR 0 8
95462: PPUSH
95463: CALL_OW 488
95467: NOT
95468: IFFALSE 95472
// continue ;
95470: GO 95400
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
95472: LD_ADDR_VAR 0 9
95476: PUSH
95477: LD_VAR 0 12
95481: PUSH
95482: LD_INT 1
95484: ARRAY
95485: PPUSH
95486: LD_VAR 0 12
95490: PUSH
95491: LD_INT 2
95493: ARRAY
95494: PPUSH
95495: LD_VAR 0 7
95499: PPUSH
95500: LD_VAR 0 8
95504: PPUSH
95505: CALL_OW 298
95509: ST_TO_ADDR
// if tmp < distance then
95510: LD_VAR 0 9
95514: PUSH
95515: LD_VAR 0 10
95519: LESS
95520: IFFALSE 95542
// begin result := i ;
95522: LD_ADDR_VAR 0 5
95526: PUSH
95527: LD_VAR 0 6
95531: ST_TO_ADDR
// distance := tmp ;
95532: LD_ADDR_VAR 0 10
95536: PUSH
95537: LD_VAR 0 9
95541: ST_TO_ADDR
// end ; end ;
95542: GO 95400
95544: POP
95545: POP
// end ;
95546: LD_VAR 0 5
95550: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
95551: LD_INT 0
95553: PPUSH
95554: PPUSH
// if not driver or not IsInUnit ( driver ) then
95555: LD_VAR 0 1
95559: NOT
95560: IFTRUE 95574
95562: PUSH
95563: LD_VAR 0 1
95567: PPUSH
95568: CALL_OW 310
95572: NOT
95573: OR
95574: IFFALSE 95578
// exit ;
95576: GO 95668
// vehicle := IsInUnit ( driver ) ;
95578: LD_ADDR_VAR 0 3
95582: PUSH
95583: LD_VAR 0 1
95587: PPUSH
95588: CALL_OW 310
95592: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
95593: LD_VAR 0 1
95597: PPUSH
95598: LD_STRING \
95600: PUSH
95601: LD_INT 0
95603: PUSH
95604: LD_INT 0
95606: PUSH
95607: LD_INT 0
95609: PUSH
95610: LD_INT 0
95612: PUSH
95613: LD_INT 0
95615: PUSH
95616: LD_INT 0
95618: PUSH
95619: EMPTY
95620: LIST
95621: LIST
95622: LIST
95623: LIST
95624: LIST
95625: LIST
95626: LIST
95627: PUSH
95628: LD_STRING E
95630: PUSH
95631: LD_INT 0
95633: PUSH
95634: LD_INT 0
95636: PUSH
95637: LD_VAR 0 3
95641: PUSH
95642: LD_INT 0
95644: PUSH
95645: LD_INT 0
95647: PUSH
95648: LD_INT 0
95650: PUSH
95651: EMPTY
95652: LIST
95653: LIST
95654: LIST
95655: LIST
95656: LIST
95657: LIST
95658: LIST
95659: PUSH
95660: EMPTY
95661: LIST
95662: LIST
95663: PPUSH
95664: CALL_OW 446
// end ;
95668: LD_VAR 0 2
95672: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
95673: LD_INT 0
95675: PPUSH
95676: PPUSH
// if not driver or not IsInUnit ( driver ) then
95677: LD_VAR 0 1
95681: NOT
95682: IFTRUE 95696
95684: PUSH
95685: LD_VAR 0 1
95689: PPUSH
95690: CALL_OW 310
95694: NOT
95695: OR
95696: IFFALSE 95700
// exit ;
95698: GO 95790
// vehicle := IsInUnit ( driver ) ;
95700: LD_ADDR_VAR 0 3
95704: PUSH
95705: LD_VAR 0 1
95709: PPUSH
95710: CALL_OW 310
95714: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
95715: LD_VAR 0 1
95719: PPUSH
95720: LD_STRING \
95722: PUSH
95723: LD_INT 0
95725: PUSH
95726: LD_INT 0
95728: PUSH
95729: LD_INT 0
95731: PUSH
95732: LD_INT 0
95734: PUSH
95735: LD_INT 0
95737: PUSH
95738: LD_INT 0
95740: PUSH
95741: EMPTY
95742: LIST
95743: LIST
95744: LIST
95745: LIST
95746: LIST
95747: LIST
95748: LIST
95749: PUSH
95750: LD_STRING E
95752: PUSH
95753: LD_INT 0
95755: PUSH
95756: LD_INT 0
95758: PUSH
95759: LD_VAR 0 3
95763: PUSH
95764: LD_INT 0
95766: PUSH
95767: LD_INT 0
95769: PUSH
95770: LD_INT 0
95772: PUSH
95773: EMPTY
95774: LIST
95775: LIST
95776: LIST
95777: LIST
95778: LIST
95779: LIST
95780: LIST
95781: PUSH
95782: EMPTY
95783: LIST
95784: LIST
95785: PPUSH
95786: CALL_OW 447
// end ;
95790: LD_VAR 0 2
95794: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
95795: LD_INT 0
95797: PPUSH
95798: PPUSH
95799: PPUSH
// tmp := [ ] ;
95800: LD_ADDR_VAR 0 5
95804: PUSH
95805: EMPTY
95806: ST_TO_ADDR
// for i in units do
95807: LD_ADDR_VAR 0 4
95811: PUSH
95812: LD_VAR 0 1
95816: PUSH
95817: FOR_IN
95818: IFFALSE 95856
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
95820: LD_ADDR_VAR 0 5
95824: PUSH
95825: LD_VAR 0 5
95829: PPUSH
95830: LD_VAR 0 5
95834: PUSH
95835: LD_INT 1
95837: PLUS
95838: PPUSH
95839: LD_VAR 0 4
95843: PPUSH
95844: CALL_OW 256
95848: PPUSH
95849: CALL_OW 2
95853: ST_TO_ADDR
95854: GO 95817
95856: POP
95857: POP
// if not tmp then
95858: LD_VAR 0 5
95862: NOT
95863: IFFALSE 95867
// exit ;
95865: GO 95915
// if asc then
95867: LD_VAR 0 2
95871: IFFALSE 95895
// result := SortListByListAsc ( units , tmp ) else
95873: LD_ADDR_VAR 0 3
95877: PUSH
95878: LD_VAR 0 1
95882: PPUSH
95883: LD_VAR 0 5
95887: PPUSH
95888: CALL_OW 76
95892: ST_TO_ADDR
95893: GO 95915
// result := SortListByListDesc ( units , tmp ) ;
95895: LD_ADDR_VAR 0 3
95899: PUSH
95900: LD_VAR 0 1
95904: PPUSH
95905: LD_VAR 0 5
95909: PPUSH
95910: CALL_OW 77
95914: ST_TO_ADDR
// end ;
95915: LD_VAR 0 3
95919: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
95920: LD_INT 0
95922: PPUSH
95923: PPUSH
// task := GetTaskList ( mech ) ;
95924: LD_ADDR_VAR 0 4
95928: PUSH
95929: LD_VAR 0 1
95933: PPUSH
95934: CALL_OW 437
95938: ST_TO_ADDR
// if not task then
95939: LD_VAR 0 4
95943: NOT
95944: IFFALSE 95948
// exit ;
95946: GO 95992
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
95948: LD_ADDR_VAR 0 3
95952: PUSH
95953: LD_VAR 0 4
95957: PUSH
95958: LD_INT 1
95960: ARRAY
95961: PUSH
95962: LD_INT 1
95964: ARRAY
95965: PUSH
95966: LD_STRING r
95968: EQUAL
95969: IFFALSE 95991
95971: PUSH
95972: LD_VAR 0 4
95976: PUSH
95977: LD_INT 1
95979: ARRAY
95980: PUSH
95981: LD_INT 4
95983: ARRAY
95984: PUSH
95985: LD_VAR 0 2
95989: EQUAL
95990: AND
95991: ST_TO_ADDR
// end ;
95992: LD_VAR 0 3
95996: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
95997: LD_INT 0
95999: PPUSH
// SetDir ( unit , d ) ;
96000: LD_VAR 0 1
96004: PPUSH
96005: LD_VAR 0 4
96009: PPUSH
96010: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
96014: LD_ADDR_VAR 0 6
96018: PUSH
96019: LD_VAR 0 1
96023: PPUSH
96024: LD_VAR 0 2
96028: PPUSH
96029: LD_VAR 0 3
96033: PPUSH
96034: LD_VAR 0 5
96038: PPUSH
96039: CALL_OW 48
96043: ST_TO_ADDR
// end ;
96044: LD_VAR 0 6
96048: RET
// export function ToNaturalNumber ( number ) ; begin
96049: LD_INT 0
96051: PPUSH
// result := number div 1 ;
96052: LD_ADDR_VAR 0 2
96056: PUSH
96057: LD_VAR 0 1
96061: PUSH
96062: LD_INT 1
96064: DIV
96065: ST_TO_ADDR
// if number < 0 then
96066: LD_VAR 0 1
96070: PUSH
96071: LD_INT 0
96073: LESS
96074: IFFALSE 96084
// result := 0 ;
96076: LD_ADDR_VAR 0 2
96080: PUSH
96081: LD_INT 0
96083: ST_TO_ADDR
// end ;
96084: LD_VAR 0 2
96088: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
96089: LD_INT 0
96091: PPUSH
96092: PPUSH
96093: PPUSH
// if not buildings then
96094: LD_VAR 0 1
96098: NOT
96099: IFFALSE 96103
// exit ;
96101: GO 96218
// tmp := [ ] ;
96103: LD_ADDR_VAR 0 5
96107: PUSH
96108: EMPTY
96109: ST_TO_ADDR
// for b in buildings do
96110: LD_ADDR_VAR 0 4
96114: PUSH
96115: LD_VAR 0 1
96119: PUSH
96120: FOR_IN
96121: IFFALSE 96159
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
96123: LD_ADDR_VAR 0 5
96127: PUSH
96128: LD_VAR 0 5
96132: PPUSH
96133: LD_VAR 0 5
96137: PUSH
96138: LD_INT 1
96140: PLUS
96141: PPUSH
96142: LD_VAR 0 4
96146: PPUSH
96147: CALL_OW 266
96151: PPUSH
96152: CALL_OW 1
96156: ST_TO_ADDR
96157: GO 96120
96159: POP
96160: POP
// if not tmp then
96161: LD_VAR 0 5
96165: NOT
96166: IFFALSE 96170
// exit ;
96168: GO 96218
// if asc then
96170: LD_VAR 0 2
96174: IFFALSE 96198
// result := SortListByListAsc ( buildings , tmp ) else
96176: LD_ADDR_VAR 0 3
96180: PUSH
96181: LD_VAR 0 1
96185: PPUSH
96186: LD_VAR 0 5
96190: PPUSH
96191: CALL_OW 76
96195: ST_TO_ADDR
96196: GO 96218
// result := SortListByListDesc ( buildings , tmp ) ;
96198: LD_ADDR_VAR 0 3
96202: PUSH
96203: LD_VAR 0 1
96207: PPUSH
96208: LD_VAR 0 5
96212: PPUSH
96213: CALL_OW 77
96217: ST_TO_ADDR
// end ;
96218: LD_VAR 0 3
96222: RET
// export function SortByClass ( units , class ) ; var un ; begin
96223: LD_INT 0
96225: PPUSH
96226: PPUSH
// if not units or not class then
96227: LD_VAR 0 1
96231: NOT
96232: IFTRUE 96241
96234: PUSH
96235: LD_VAR 0 2
96239: NOT
96240: OR
96241: IFFALSE 96245
// exit ;
96243: GO 96340
// result := [ ] ;
96245: LD_ADDR_VAR 0 3
96249: PUSH
96250: EMPTY
96251: ST_TO_ADDR
// for un in units do
96252: LD_ADDR_VAR 0 4
96256: PUSH
96257: LD_VAR 0 1
96261: PUSH
96262: FOR_IN
96263: IFFALSE 96338
// if GetClass ( un ) = class then
96265: LD_VAR 0 4
96269: PPUSH
96270: CALL_OW 257
96274: PUSH
96275: LD_VAR 0 2
96279: EQUAL
96280: IFFALSE 96307
// result := Insert ( result , 1 , un ) else
96282: LD_ADDR_VAR 0 3
96286: PUSH
96287: LD_VAR 0 3
96291: PPUSH
96292: LD_INT 1
96294: PPUSH
96295: LD_VAR 0 4
96299: PPUSH
96300: CALL_OW 2
96304: ST_TO_ADDR
96305: GO 96336
// result := Replace ( result , result + 1 , un ) ;
96307: LD_ADDR_VAR 0 3
96311: PUSH
96312: LD_VAR 0 3
96316: PPUSH
96317: LD_VAR 0 3
96321: PUSH
96322: LD_INT 1
96324: PLUS
96325: PPUSH
96326: LD_VAR 0 4
96330: PPUSH
96331: CALL_OW 1
96335: ST_TO_ADDR
96336: GO 96262
96338: POP
96339: POP
// end ;
96340: LD_VAR 0 3
96344: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
96345: LD_INT 0
96347: PPUSH
96348: PPUSH
96349: PPUSH
96350: PPUSH
96351: PPUSH
96352: PPUSH
96353: PPUSH
// result := [ ] ;
96354: LD_ADDR_VAR 0 4
96358: PUSH
96359: EMPTY
96360: ST_TO_ADDR
// if x - r < 0 then
96361: LD_VAR 0 1
96365: PUSH
96366: LD_VAR 0 3
96370: MINUS
96371: PUSH
96372: LD_INT 0
96374: LESS
96375: IFFALSE 96387
// min_x := 0 else
96377: LD_ADDR_VAR 0 8
96381: PUSH
96382: LD_INT 0
96384: ST_TO_ADDR
96385: GO 96403
// min_x := x - r ;
96387: LD_ADDR_VAR 0 8
96391: PUSH
96392: LD_VAR 0 1
96396: PUSH
96397: LD_VAR 0 3
96401: MINUS
96402: ST_TO_ADDR
// if y - r < 0 then
96403: LD_VAR 0 2
96407: PUSH
96408: LD_VAR 0 3
96412: MINUS
96413: PUSH
96414: LD_INT 0
96416: LESS
96417: IFFALSE 96429
// min_y := 0 else
96419: LD_ADDR_VAR 0 7
96423: PUSH
96424: LD_INT 0
96426: ST_TO_ADDR
96427: GO 96445
// min_y := y - r ;
96429: LD_ADDR_VAR 0 7
96433: PUSH
96434: LD_VAR 0 2
96438: PUSH
96439: LD_VAR 0 3
96443: MINUS
96444: ST_TO_ADDR
// max_x := x + r ;
96445: LD_ADDR_VAR 0 9
96449: PUSH
96450: LD_VAR 0 1
96454: PUSH
96455: LD_VAR 0 3
96459: PLUS
96460: ST_TO_ADDR
// max_y := y + r ;
96461: LD_ADDR_VAR 0 10
96465: PUSH
96466: LD_VAR 0 2
96470: PUSH
96471: LD_VAR 0 3
96475: PLUS
96476: ST_TO_ADDR
// for _x = min_x to max_x do
96477: LD_ADDR_VAR 0 5
96481: PUSH
96482: DOUBLE
96483: LD_VAR 0 8
96487: DEC
96488: ST_TO_ADDR
96489: LD_VAR 0 9
96493: PUSH
96494: FOR_TO
96495: IFFALSE 96596
// for _y = min_y to max_y do
96497: LD_ADDR_VAR 0 6
96501: PUSH
96502: DOUBLE
96503: LD_VAR 0 7
96507: DEC
96508: ST_TO_ADDR
96509: LD_VAR 0 10
96513: PUSH
96514: FOR_TO
96515: IFFALSE 96592
// begin if not ValidHex ( _x , _y ) then
96517: LD_VAR 0 5
96521: PPUSH
96522: LD_VAR 0 6
96526: PPUSH
96527: CALL_OW 488
96531: NOT
96532: IFFALSE 96536
// continue ;
96534: GO 96514
// if GetResourceTypeXY ( _x , _y ) then
96536: LD_VAR 0 5
96540: PPUSH
96541: LD_VAR 0 6
96545: PPUSH
96546: CALL_OW 283
96550: IFFALSE 96590
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
96552: LD_ADDR_VAR 0 4
96556: PUSH
96557: LD_VAR 0 4
96561: PPUSH
96562: LD_VAR 0 4
96566: PUSH
96567: LD_INT 1
96569: PLUS
96570: PPUSH
96571: LD_VAR 0 5
96575: PUSH
96576: LD_VAR 0 6
96580: PUSH
96581: EMPTY
96582: LIST
96583: LIST
96584: PPUSH
96585: CALL_OW 1
96589: ST_TO_ADDR
// end ;
96590: GO 96514
96592: POP
96593: POP
96594: GO 96494
96596: POP
96597: POP
// end ;
96598: LD_VAR 0 4
96602: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
96603: LD_INT 0
96605: PPUSH
96606: PPUSH
96607: PPUSH
96608: PPUSH
96609: PPUSH
96610: PPUSH
96611: PPUSH
96612: PPUSH
// if not units then
96613: LD_VAR 0 1
96617: NOT
96618: IFFALSE 96622
// exit ;
96620: GO 97154
// result := UnitFilter ( units , [ f_ok ] ) ;
96622: LD_ADDR_VAR 0 3
96626: PUSH
96627: LD_VAR 0 1
96631: PPUSH
96632: LD_INT 50
96634: PUSH
96635: EMPTY
96636: LIST
96637: PPUSH
96638: CALL_OW 72
96642: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
96643: LD_ADDR_VAR 0 8
96647: PUSH
96648: LD_VAR 0 1
96652: PUSH
96653: LD_INT 1
96655: ARRAY
96656: PPUSH
96657: CALL_OW 255
96661: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
96662: LD_ADDR_VAR 0 10
96666: PUSH
96667: LD_INT 29
96669: PUSH
96670: LD_INT 91
96672: PUSH
96673: LD_INT 49
96675: PUSH
96676: EMPTY
96677: LIST
96678: LIST
96679: LIST
96680: ST_TO_ADDR
// if not result then
96681: LD_VAR 0 3
96685: NOT
96686: IFFALSE 96690
// exit ;
96688: GO 97154
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
96690: LD_ADDR_VAR 0 5
96694: PUSH
96695: LD_INT 81
96697: PUSH
96698: LD_VAR 0 8
96702: PUSH
96703: EMPTY
96704: LIST
96705: LIST
96706: PPUSH
96707: CALL_OW 69
96711: ST_TO_ADDR
// for i in result do
96712: LD_ADDR_VAR 0 4
96716: PUSH
96717: LD_VAR 0 3
96721: PUSH
96722: FOR_IN
96723: IFFALSE 97152
// begin tag := GetTag ( i ) + 1 ;
96725: LD_ADDR_VAR 0 9
96729: PUSH
96730: LD_VAR 0 4
96734: PPUSH
96735: CALL_OW 110
96739: PUSH
96740: LD_INT 1
96742: PLUS
96743: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
96744: LD_ADDR_VAR 0 7
96748: PUSH
96749: LD_VAR 0 4
96753: PPUSH
96754: CALL_OW 250
96758: PPUSH
96759: LD_VAR 0 4
96763: PPUSH
96764: CALL_OW 251
96768: PPUSH
96769: LD_INT 4
96771: PPUSH
96772: CALL 96345 0 3
96776: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
96777: LD_VAR 0 4
96781: PPUSH
96782: CALL_OW 247
96786: PUSH
96787: LD_INT 2
96789: EQUAL
96790: IFFALSE 96802
96792: PUSH
96793: LD_VAR 0 7
96797: PUSH
96798: LD_INT 2
96800: GREATER
96801: AND
96802: IFFALSE 96822
96804: PUSH
96805: LD_VAR 0 4
96809: PPUSH
96810: CALL_OW 264
96814: PUSH
96815: LD_VAR 0 10
96819: IN
96820: NOT
96821: AND
96822: IFFALSE 96861
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
96824: LD_VAR 0 4
96828: PPUSH
96829: LD_VAR 0 7
96833: PUSH
96834: LD_INT 1
96836: ARRAY
96837: PUSH
96838: LD_INT 1
96840: ARRAY
96841: PPUSH
96842: LD_VAR 0 7
96846: PUSH
96847: LD_INT 1
96849: ARRAY
96850: PUSH
96851: LD_INT 2
96853: ARRAY
96854: PPUSH
96855: CALL_OW 116
96859: GO 97150
// if path > tag then
96861: LD_VAR 0 2
96865: PUSH
96866: LD_VAR 0 9
96870: GREATER
96871: IFFALSE 97079
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
96873: LD_ADDR_VAR 0 6
96877: PUSH
96878: LD_VAR 0 5
96882: PPUSH
96883: LD_INT 91
96885: PUSH
96886: LD_VAR 0 4
96890: PUSH
96891: LD_INT 8
96893: PUSH
96894: EMPTY
96895: LIST
96896: LIST
96897: LIST
96898: PPUSH
96899: CALL_OW 72
96903: ST_TO_ADDR
// if nearEnemy then
96904: LD_VAR 0 6
96908: IFFALSE 96977
// begin if GetWeapon ( i ) = ru_time_lapser then
96910: LD_VAR 0 4
96914: PPUSH
96915: CALL_OW 264
96919: PUSH
96920: LD_INT 49
96922: EQUAL
96923: IFFALSE 96951
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
96925: LD_VAR 0 4
96929: PPUSH
96930: LD_VAR 0 6
96934: PPUSH
96935: LD_VAR 0 4
96939: PPUSH
96940: CALL_OW 74
96944: PPUSH
96945: CALL_OW 112
96949: GO 96975
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
96951: LD_VAR 0 4
96955: PPUSH
96956: LD_VAR 0 6
96960: PPUSH
96961: LD_VAR 0 4
96965: PPUSH
96966: CALL_OW 74
96970: PPUSH
96971: CALL 98235 0 2
// end else
96975: GO 97077
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
96977: LD_VAR 0 4
96981: PPUSH
96982: LD_VAR 0 2
96986: PUSH
96987: LD_VAR 0 9
96991: ARRAY
96992: PUSH
96993: LD_INT 1
96995: ARRAY
96996: PPUSH
96997: LD_VAR 0 2
97001: PUSH
97002: LD_VAR 0 9
97006: ARRAY
97007: PUSH
97008: LD_INT 2
97010: ARRAY
97011: PPUSH
97012: CALL_OW 297
97016: PUSH
97017: LD_INT 6
97019: GREATER
97020: IFFALSE 97063
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
97022: LD_VAR 0 4
97026: PPUSH
97027: LD_VAR 0 2
97031: PUSH
97032: LD_VAR 0 9
97036: ARRAY
97037: PUSH
97038: LD_INT 1
97040: ARRAY
97041: PPUSH
97042: LD_VAR 0 2
97046: PUSH
97047: LD_VAR 0 9
97051: ARRAY
97052: PUSH
97053: LD_INT 2
97055: ARRAY
97056: PPUSH
97057: CALL_OW 114
97061: GO 97077
// SetTag ( i , tag ) ;
97063: LD_VAR 0 4
97067: PPUSH
97068: LD_VAR 0 9
97072: PPUSH
97073: CALL_OW 109
// end else
97077: GO 97150
// if enemy then
97079: LD_VAR 0 5
97083: IFFALSE 97150
// begin if GetWeapon ( i ) = ru_time_lapser then
97085: LD_VAR 0 4
97089: PPUSH
97090: CALL_OW 264
97094: PUSH
97095: LD_INT 49
97097: EQUAL
97098: IFFALSE 97126
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
97100: LD_VAR 0 4
97104: PPUSH
97105: LD_VAR 0 5
97109: PPUSH
97110: LD_VAR 0 4
97114: PPUSH
97115: CALL_OW 74
97119: PPUSH
97120: CALL_OW 112
97124: GO 97150
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
97126: LD_VAR 0 4
97130: PPUSH
97131: LD_VAR 0 5
97135: PPUSH
97136: LD_VAR 0 4
97140: PPUSH
97141: CALL_OW 74
97145: PPUSH
97146: CALL 98235 0 2
// end ; end ;
97150: GO 96722
97152: POP
97153: POP
// end ;
97154: LD_VAR 0 3
97158: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
97159: LD_INT 0
97161: PPUSH
97162: PPUSH
97163: PPUSH
// if not unit or IsInUnit ( unit ) then
97164: LD_VAR 0 1
97168: NOT
97169: IFTRUE 97182
97171: PUSH
97172: LD_VAR 0 1
97176: PPUSH
97177: CALL_OW 310
97181: OR
97182: IFFALSE 97186
// exit ;
97184: GO 97277
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
97186: LD_ADDR_VAR 0 4
97190: PUSH
97191: LD_VAR 0 1
97195: PPUSH
97196: CALL_OW 250
97200: PPUSH
97201: LD_VAR 0 2
97205: PPUSH
97206: LD_INT 1
97208: PPUSH
97209: CALL_OW 272
97213: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
97214: LD_ADDR_VAR 0 5
97218: PUSH
97219: LD_VAR 0 1
97223: PPUSH
97224: CALL_OW 251
97228: PPUSH
97229: LD_VAR 0 2
97233: PPUSH
97234: LD_INT 1
97236: PPUSH
97237: CALL_OW 273
97241: ST_TO_ADDR
// if ValidHex ( x , y ) then
97242: LD_VAR 0 4
97246: PPUSH
97247: LD_VAR 0 5
97251: PPUSH
97252: CALL_OW 488
97256: IFFALSE 97277
// ComTurnXY ( unit , x , y ) ;
97258: LD_VAR 0 1
97262: PPUSH
97263: LD_VAR 0 4
97267: PPUSH
97268: LD_VAR 0 5
97272: PPUSH
97273: CALL_OW 118
// end ;
97277: LD_VAR 0 3
97281: RET
// export function SeeUnits ( side , units ) ; var i ; begin
97282: LD_INT 0
97284: PPUSH
97285: PPUSH
// result := false ;
97286: LD_ADDR_VAR 0 3
97290: PUSH
97291: LD_INT 0
97293: ST_TO_ADDR
// if not units then
97294: LD_VAR 0 2
97298: NOT
97299: IFFALSE 97303
// exit ;
97301: GO 97348
// for i in units do
97303: LD_ADDR_VAR 0 4
97307: PUSH
97308: LD_VAR 0 2
97312: PUSH
97313: FOR_IN
97314: IFFALSE 97346
// if See ( side , i ) then
97316: LD_VAR 0 1
97320: PPUSH
97321: LD_VAR 0 4
97325: PPUSH
97326: CALL_OW 292
97330: IFFALSE 97344
// begin result := true ;
97332: LD_ADDR_VAR 0 3
97336: PUSH
97337: LD_INT 1
97339: ST_TO_ADDR
// exit ;
97340: POP
97341: POP
97342: GO 97348
// end ;
97344: GO 97313
97346: POP
97347: POP
// end ;
97348: LD_VAR 0 3
97352: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
97353: LD_INT 0
97355: PPUSH
97356: PPUSH
97357: PPUSH
97358: PPUSH
// if not unit or not points then
97359: LD_VAR 0 1
97363: NOT
97364: IFTRUE 97373
97366: PUSH
97367: LD_VAR 0 2
97371: NOT
97372: OR
97373: IFFALSE 97377
// exit ;
97375: GO 97467
// dist := 99999 ;
97377: LD_ADDR_VAR 0 5
97381: PUSH
97382: LD_INT 99999
97384: ST_TO_ADDR
// for i in points do
97385: LD_ADDR_VAR 0 4
97389: PUSH
97390: LD_VAR 0 2
97394: PUSH
97395: FOR_IN
97396: IFFALSE 97465
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
97398: LD_ADDR_VAR 0 6
97402: PUSH
97403: LD_VAR 0 1
97407: PPUSH
97408: LD_VAR 0 4
97412: PUSH
97413: LD_INT 1
97415: ARRAY
97416: PPUSH
97417: LD_VAR 0 4
97421: PUSH
97422: LD_INT 2
97424: ARRAY
97425: PPUSH
97426: CALL_OW 297
97430: ST_TO_ADDR
// if tmpDist < dist then
97431: LD_VAR 0 6
97435: PUSH
97436: LD_VAR 0 5
97440: LESS
97441: IFFALSE 97463
// begin result := i ;
97443: LD_ADDR_VAR 0 3
97447: PUSH
97448: LD_VAR 0 4
97452: ST_TO_ADDR
// dist := tmpDist ;
97453: LD_ADDR_VAR 0 5
97457: PUSH
97458: LD_VAR 0 6
97462: ST_TO_ADDR
// end ; end ;
97463: GO 97395
97465: POP
97466: POP
// end ;
97467: LD_VAR 0 3
97471: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
97472: LD_INT 0
97474: PPUSH
// uc_side := side ;
97475: LD_ADDR_OWVAR 20
97479: PUSH
97480: LD_VAR 0 1
97484: ST_TO_ADDR
// uc_nation := 3 ;
97485: LD_ADDR_OWVAR 21
97489: PUSH
97490: LD_INT 3
97492: ST_TO_ADDR
// vc_chassis := 25 ;
97493: LD_ADDR_OWVAR 37
97497: PUSH
97498: LD_INT 25
97500: ST_TO_ADDR
// vc_engine := engine_siberite ;
97501: LD_ADDR_OWVAR 39
97505: PUSH
97506: LD_INT 3
97508: ST_TO_ADDR
// vc_control := control_computer ;
97509: LD_ADDR_OWVAR 38
97513: PUSH
97514: LD_INT 3
97516: ST_TO_ADDR
// vc_weapon := 59 ;
97517: LD_ADDR_OWVAR 40
97521: PUSH
97522: LD_INT 59
97524: ST_TO_ADDR
// result := CreateVehicle ;
97525: LD_ADDR_VAR 0 5
97529: PUSH
97530: CALL_OW 45
97534: ST_TO_ADDR
// SetDir ( result , d ) ;
97535: LD_VAR 0 5
97539: PPUSH
97540: LD_VAR 0 4
97544: PPUSH
97545: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
97549: LD_VAR 0 5
97553: PPUSH
97554: LD_VAR 0 2
97558: PPUSH
97559: LD_VAR 0 3
97563: PPUSH
97564: LD_INT 0
97566: PPUSH
97567: CALL_OW 48
// end ;
97571: LD_VAR 0 5
97575: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
97576: LD_INT 0
97578: PPUSH
97579: PPUSH
97580: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
97581: LD_ADDR_VAR 0 2
97585: PUSH
97586: LD_INT 0
97588: PUSH
97589: LD_INT 0
97591: PUSH
97592: LD_INT 0
97594: PUSH
97595: LD_INT 0
97597: PUSH
97598: EMPTY
97599: LIST
97600: LIST
97601: LIST
97602: LIST
97603: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
97604: LD_VAR 0 1
97608: NOT
97609: IFTRUE 97642
97611: PUSH
97612: LD_VAR 0 1
97616: PPUSH
97617: CALL_OW 264
97621: PUSH
97622: LD_INT 12
97624: PUSH
97625: LD_INT 51
97627: PUSH
97628: LD_INT 32
97630: PUSH
97631: LD_INT 89
97633: PUSH
97634: EMPTY
97635: LIST
97636: LIST
97637: LIST
97638: LIST
97639: IN
97640: NOT
97641: OR
97642: IFFALSE 97646
// exit ;
97644: GO 97744
// for i := 1 to 3 do
97646: LD_ADDR_VAR 0 3
97650: PUSH
97651: DOUBLE
97652: LD_INT 1
97654: DEC
97655: ST_TO_ADDR
97656: LD_INT 3
97658: PUSH
97659: FOR_TO
97660: IFFALSE 97742
// begin tmp := GetCargo ( cargo , i ) ;
97662: LD_ADDR_VAR 0 4
97666: PUSH
97667: LD_VAR 0 1
97671: PPUSH
97672: LD_VAR 0 3
97676: PPUSH
97677: CALL_OW 289
97681: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
97682: LD_ADDR_VAR 0 2
97686: PUSH
97687: LD_VAR 0 2
97691: PPUSH
97692: LD_VAR 0 3
97696: PPUSH
97697: LD_VAR 0 4
97701: PPUSH
97702: CALL_OW 1
97706: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
97707: LD_ADDR_VAR 0 2
97711: PUSH
97712: LD_VAR 0 2
97716: PPUSH
97717: LD_INT 4
97719: PPUSH
97720: LD_VAR 0 2
97724: PUSH
97725: LD_INT 4
97727: ARRAY
97728: PUSH
97729: LD_VAR 0 4
97733: PLUS
97734: PPUSH
97735: CALL_OW 1
97739: ST_TO_ADDR
// end ;
97740: GO 97659
97742: POP
97743: POP
// end ;
97744: LD_VAR 0 2
97748: RET
// export function Length ( array ) ; begin
97749: LD_INT 0
97751: PPUSH
// result := array + 0 ;
97752: LD_ADDR_VAR 0 2
97756: PUSH
97757: LD_VAR 0 1
97761: PUSH
97762: LD_INT 0
97764: PLUS
97765: ST_TO_ADDR
// end ;
97766: LD_VAR 0 2
97770: RET
// export function PrepareArray ( array ) ; begin
97771: LD_INT 0
97773: PPUSH
// result := array diff 0 ;
97774: LD_ADDR_VAR 0 2
97778: PUSH
97779: LD_VAR 0 1
97783: PUSH
97784: LD_INT 0
97786: DIFF
97787: ST_TO_ADDR
// if not result [ 1 ] then
97788: LD_VAR 0 2
97792: PUSH
97793: LD_INT 1
97795: ARRAY
97796: NOT
97797: IFFALSE 97817
// result := Delete ( result , 1 ) ;
97799: LD_ADDR_VAR 0 2
97803: PUSH
97804: LD_VAR 0 2
97808: PPUSH
97809: LD_INT 1
97811: PPUSH
97812: CALL_OW 3
97816: ST_TO_ADDR
// end ;
97817: LD_VAR 0 2
97821: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
97822: LD_INT 0
97824: PPUSH
97825: PPUSH
97826: PPUSH
97827: PPUSH
// sibRocketRange := 25 ;
97828: LD_ADDR_VAR 0 6
97832: PUSH
97833: LD_INT 25
97835: ST_TO_ADDR
// result := false ;
97836: LD_ADDR_VAR 0 4
97840: PUSH
97841: LD_INT 0
97843: ST_TO_ADDR
// for i := 0 to 5 do
97844: LD_ADDR_VAR 0 5
97848: PUSH
97849: DOUBLE
97850: LD_INT 0
97852: DEC
97853: ST_TO_ADDR
97854: LD_INT 5
97856: PUSH
97857: FOR_TO
97858: IFFALSE 97925
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
97860: LD_VAR 0 1
97864: PPUSH
97865: LD_VAR 0 5
97869: PPUSH
97870: LD_VAR 0 6
97874: PPUSH
97875: CALL_OW 272
97879: PPUSH
97880: LD_VAR 0 2
97884: PPUSH
97885: LD_VAR 0 5
97889: PPUSH
97890: LD_VAR 0 6
97894: PPUSH
97895: CALL_OW 273
97899: PPUSH
97900: LD_VAR 0 3
97904: PPUSH
97905: CALL_OW 309
97909: IFFALSE 97923
// begin result := true ;
97911: LD_ADDR_VAR 0 4
97915: PUSH
97916: LD_INT 1
97918: ST_TO_ADDR
// exit ;
97919: POP
97920: POP
97921: GO 97927
// end ;
97923: GO 97857
97925: POP
97926: POP
// end ;
97927: LD_VAR 0 4
97931: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
97932: LD_INT 0
97934: PPUSH
97935: PPUSH
97936: PPUSH
// if btype = b_depot then
97937: LD_VAR 0 2
97941: PUSH
97942: LD_INT 0
97944: EQUAL
97945: IFFALSE 97957
// begin result := true ;
97947: LD_ADDR_VAR 0 3
97951: PUSH
97952: LD_INT 1
97954: ST_TO_ADDR
// exit ;
97955: GO 98077
// end ; pom := GetBase ( depot ) ;
97957: LD_ADDR_VAR 0 4
97961: PUSH
97962: LD_VAR 0 1
97966: PPUSH
97967: CALL_OW 274
97971: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
97972: LD_ADDR_VAR 0 5
97976: PUSH
97977: LD_VAR 0 2
97981: PPUSH
97982: LD_VAR 0 1
97986: PPUSH
97987: CALL_OW 248
97991: PPUSH
97992: CALL_OW 450
97996: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
97997: LD_ADDR_VAR 0 3
98001: PUSH
98002: LD_VAR 0 4
98006: PPUSH
98007: LD_INT 1
98009: PPUSH
98010: CALL_OW 275
98014: PUSH
98015: LD_VAR 0 5
98019: PUSH
98020: LD_INT 1
98022: ARRAY
98023: GREATEREQUAL
98024: IFFALSE 98050
98026: PUSH
98027: LD_VAR 0 4
98031: PPUSH
98032: LD_INT 2
98034: PPUSH
98035: CALL_OW 275
98039: PUSH
98040: LD_VAR 0 5
98044: PUSH
98045: LD_INT 2
98047: ARRAY
98048: GREATEREQUAL
98049: AND
98050: IFFALSE 98076
98052: PUSH
98053: LD_VAR 0 4
98057: PPUSH
98058: LD_INT 3
98060: PPUSH
98061: CALL_OW 275
98065: PUSH
98066: LD_VAR 0 5
98070: PUSH
98071: LD_INT 3
98073: ARRAY
98074: GREATEREQUAL
98075: AND
98076: ST_TO_ADDR
// end ;
98077: LD_VAR 0 3
98081: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
98082: LD_INT 0
98084: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
98085: LD_VAR 0 1
98089: PPUSH
98090: LD_VAR 0 2
98094: PPUSH
98095: LD_INT 0
98097: PPUSH
98098: LD_INT 0
98100: PPUSH
98101: LD_INT 1
98103: PPUSH
98104: LD_INT 0
98106: PPUSH
98107: CALL_OW 587
// end ;
98111: LD_VAR 0 3
98115: RET
// export function CenterOnNow ( unit ) ; begin
98116: LD_INT 0
98118: PPUSH
// result := IsInUnit ( unit ) ;
98119: LD_ADDR_VAR 0 2
98123: PUSH
98124: LD_VAR 0 1
98128: PPUSH
98129: CALL_OW 310
98133: ST_TO_ADDR
// if not result then
98134: LD_VAR 0 2
98138: NOT
98139: IFFALSE 98151
// result := unit ;
98141: LD_ADDR_VAR 0 2
98145: PUSH
98146: LD_VAR 0 1
98150: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
98151: LD_VAR 0 1
98155: PPUSH
98156: CALL_OW 87
// end ;
98160: LD_VAR 0 2
98164: RET
// export function ComMoveHex ( unit , hex ) ; begin
98165: LD_INT 0
98167: PPUSH
// if not hex then
98168: LD_VAR 0 2
98172: NOT
98173: IFFALSE 98177
// exit ;
98175: GO 98230
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
98177: LD_VAR 0 2
98181: PUSH
98182: LD_INT 1
98184: ARRAY
98185: PPUSH
98186: LD_VAR 0 2
98190: PUSH
98191: LD_INT 2
98193: ARRAY
98194: PPUSH
98195: CALL_OW 428
98199: IFFALSE 98203
// exit ;
98201: GO 98230
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
98203: LD_VAR 0 1
98207: PPUSH
98208: LD_VAR 0 2
98212: PUSH
98213: LD_INT 1
98215: ARRAY
98216: PPUSH
98217: LD_VAR 0 2
98221: PUSH
98222: LD_INT 2
98224: ARRAY
98225: PPUSH
98226: CALL_OW 111
// end ;
98230: LD_VAR 0 3
98234: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
98235: LD_INT 0
98237: PPUSH
98238: PPUSH
98239: PPUSH
// if not unit or not enemy then
98240: LD_VAR 0 1
98244: NOT
98245: IFTRUE 98254
98247: PUSH
98248: LD_VAR 0 2
98252: NOT
98253: OR
98254: IFFALSE 98258
// exit ;
98256: GO 98384
// x := GetX ( enemy ) ;
98258: LD_ADDR_VAR 0 4
98262: PUSH
98263: LD_VAR 0 2
98267: PPUSH
98268: CALL_OW 250
98272: ST_TO_ADDR
// y := GetY ( enemy ) ;
98273: LD_ADDR_VAR 0 5
98277: PUSH
98278: LD_VAR 0 2
98282: PPUSH
98283: CALL_OW 251
98287: ST_TO_ADDR
// if ValidHex ( x , y ) then
98288: LD_VAR 0 4
98292: PPUSH
98293: LD_VAR 0 5
98297: PPUSH
98298: CALL_OW 488
98302: IFFALSE 98384
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
98304: LD_VAR 0 2
98308: PPUSH
98309: CALL_OW 247
98313: PUSH
98314: LD_INT 3
98316: PUSH
98317: LD_INT 2
98319: PUSH
98320: EMPTY
98321: LIST
98322: LIST
98323: IN
98324: IFTRUE 98347
98326: PUSH
98327: LD_VAR 0 1
98331: PPUSH
98332: CALL_OW 255
98336: PPUSH
98337: LD_VAR 0 2
98341: PPUSH
98342: CALL_OW 292
98346: OR
98347: IFFALSE 98365
// ComAttackUnit ( unit , enemy ) else
98349: LD_VAR 0 1
98353: PPUSH
98354: LD_VAR 0 2
98358: PPUSH
98359: CALL_OW 115
98363: GO 98384
// ComAgressiveMove ( unit , x , y ) ;
98365: LD_VAR 0 1
98369: PPUSH
98370: LD_VAR 0 4
98374: PPUSH
98375: LD_VAR 0 5
98379: PPUSH
98380: CALL_OW 114
// end ;
98384: LD_VAR 0 3
98388: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
98389: LD_INT 0
98391: PPUSH
98392: PPUSH
98393: PPUSH
// list := AreaToList ( area , 0 ) ;
98394: LD_ADDR_VAR 0 5
98398: PUSH
98399: LD_VAR 0 1
98403: PPUSH
98404: LD_INT 0
98406: PPUSH
98407: CALL_OW 517
98411: ST_TO_ADDR
// if not list then
98412: LD_VAR 0 5
98416: NOT
98417: IFFALSE 98421
// exit ;
98419: GO 98551
// if all then
98421: LD_VAR 0 2
98425: IFFALSE 98513
// begin for i := 1 to list [ 1 ] do
98427: LD_ADDR_VAR 0 4
98431: PUSH
98432: DOUBLE
98433: LD_INT 1
98435: DEC
98436: ST_TO_ADDR
98437: LD_VAR 0 5
98441: PUSH
98442: LD_INT 1
98444: ARRAY
98445: PUSH
98446: FOR_TO
98447: IFFALSE 98509
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
98449: LD_ADDR_VAR 0 3
98453: PUSH
98454: LD_VAR 0 3
98458: PPUSH
98459: LD_VAR 0 3
98463: PUSH
98464: LD_INT 1
98466: PLUS
98467: PPUSH
98468: LD_VAR 0 5
98472: PUSH
98473: LD_INT 1
98475: ARRAY
98476: PUSH
98477: LD_VAR 0 4
98481: ARRAY
98482: PUSH
98483: LD_VAR 0 5
98487: PUSH
98488: LD_INT 2
98490: ARRAY
98491: PUSH
98492: LD_VAR 0 4
98496: ARRAY
98497: PUSH
98498: EMPTY
98499: LIST
98500: LIST
98501: PPUSH
98502: CALL_OW 1
98506: ST_TO_ADDR
98507: GO 98446
98509: POP
98510: POP
// exit ;
98511: GO 98551
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
98513: LD_ADDR_VAR 0 3
98517: PUSH
98518: LD_VAR 0 5
98522: PUSH
98523: LD_INT 1
98525: ARRAY
98526: PUSH
98527: LD_INT 1
98529: ARRAY
98530: PUSH
98531: LD_VAR 0 5
98535: PUSH
98536: LD_INT 2
98538: ARRAY
98539: PUSH
98540: LD_INT 1
98542: ARRAY
98543: PUSH
98544: EMPTY
98545: LIST
98546: LIST
98547: PUSH
98548: EMPTY
98549: LIST
98550: ST_TO_ADDR
// end ;
98551: LD_VAR 0 3
98555: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
98556: LD_INT 0
98558: PPUSH
98559: PPUSH
// list := AreaToList ( area , 0 ) ;
98560: LD_ADDR_VAR 0 4
98564: PUSH
98565: LD_VAR 0 1
98569: PPUSH
98570: LD_INT 0
98572: PPUSH
98573: CALL_OW 517
98577: ST_TO_ADDR
// if not list then
98578: LD_VAR 0 4
98582: NOT
98583: IFFALSE 98587
// exit ;
98585: GO 98628
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
98587: LD_ADDR_VAR 0 3
98591: PUSH
98592: LD_VAR 0 4
98596: PUSH
98597: LD_INT 1
98599: ARRAY
98600: PUSH
98601: LD_INT 1
98603: ARRAY
98604: PUSH
98605: LD_VAR 0 4
98609: PUSH
98610: LD_INT 2
98612: ARRAY
98613: PUSH
98614: LD_INT 1
98616: ARRAY
98617: PUSH
98618: LD_VAR 0 2
98622: PUSH
98623: EMPTY
98624: LIST
98625: LIST
98626: LIST
98627: ST_TO_ADDR
// end ;
98628: LD_VAR 0 3
98632: RET
// export function First ( array ) ; begin
98633: LD_INT 0
98635: PPUSH
// if not array then
98636: LD_VAR 0 1
98640: NOT
98641: IFFALSE 98645
// exit ;
98643: GO 98659
// result := array [ 1 ] ;
98645: LD_ADDR_VAR 0 2
98649: PUSH
98650: LD_VAR 0 1
98654: PUSH
98655: LD_INT 1
98657: ARRAY
98658: ST_TO_ADDR
// end ;
98659: LD_VAR 0 2
98663: RET
// export function Last ( array ) ; begin
98664: LD_INT 0
98666: PPUSH
// if not array then
98667: LD_VAR 0 1
98671: NOT
98672: IFFALSE 98676
// exit ;
98674: GO 98692
// result := array [ array ] ;
98676: LD_ADDR_VAR 0 2
98680: PUSH
98681: LD_VAR 0 1
98685: PUSH
98686: LD_VAR 0 1
98690: ARRAY
98691: ST_TO_ADDR
// end ;
98692: LD_VAR 0 2
98696: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
98697: LD_INT 0
98699: PPUSH
98700: PPUSH
// result := [ ] ;
98701: LD_ADDR_VAR 0 5
98705: PUSH
98706: EMPTY
98707: ST_TO_ADDR
// if not array then
98708: LD_VAR 0 1
98712: NOT
98713: IFFALSE 98717
// exit ;
98715: GO 98829
// for i := 1 to array do
98717: LD_ADDR_VAR 0 6
98721: PUSH
98722: DOUBLE
98723: LD_INT 1
98725: DEC
98726: ST_TO_ADDR
98727: LD_VAR 0 1
98731: PUSH
98732: FOR_TO
98733: IFFALSE 98827
// if array [ i ] [ index ] = value then
98735: LD_VAR 0 1
98739: PUSH
98740: LD_VAR 0 6
98744: ARRAY
98745: PUSH
98746: LD_VAR 0 2
98750: ARRAY
98751: PUSH
98752: LD_VAR 0 3
98756: EQUAL
98757: IFFALSE 98825
// begin if indexColumn then
98759: LD_VAR 0 4
98763: IFFALSE 98799
// result := Join ( result , array [ i ] [ indexColumn ] ) else
98765: LD_ADDR_VAR 0 5
98769: PUSH
98770: LD_VAR 0 5
98774: PPUSH
98775: LD_VAR 0 1
98779: PUSH
98780: LD_VAR 0 6
98784: ARRAY
98785: PUSH
98786: LD_VAR 0 4
98790: ARRAY
98791: PPUSH
98792: CALL 93837 0 2
98796: ST_TO_ADDR
98797: GO 98825
// result := Join ( result , array [ i ] ) ;
98799: LD_ADDR_VAR 0 5
98803: PUSH
98804: LD_VAR 0 5
98808: PPUSH
98809: LD_VAR 0 1
98813: PUSH
98814: LD_VAR 0 6
98818: ARRAY
98819: PPUSH
98820: CALL 93837 0 2
98824: ST_TO_ADDR
// end ;
98825: GO 98732
98827: POP
98828: POP
// end ;
98829: LD_VAR 0 5
98833: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
98834: LD_INT 0
98836: PPUSH
// if not vehicles or not parkingPoint then
98837: LD_VAR 0 1
98841: NOT
98842: IFTRUE 98851
98844: PUSH
98845: LD_VAR 0 2
98849: NOT
98850: OR
98851: IFFALSE 98855
// exit ;
98853: GO 98953
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
98855: LD_ADDR_VAR 0 1
98859: PUSH
98860: LD_VAR 0 1
98864: PPUSH
98865: LD_INT 50
98867: PUSH
98868: EMPTY
98869: LIST
98870: PUSH
98871: LD_INT 3
98873: PUSH
98874: LD_INT 92
98876: PUSH
98877: LD_VAR 0 2
98881: PUSH
98882: LD_INT 1
98884: ARRAY
98885: PUSH
98886: LD_VAR 0 2
98890: PUSH
98891: LD_INT 2
98893: ARRAY
98894: PUSH
98895: LD_INT 8
98897: PUSH
98898: EMPTY
98899: LIST
98900: LIST
98901: LIST
98902: LIST
98903: PUSH
98904: EMPTY
98905: LIST
98906: LIST
98907: PUSH
98908: EMPTY
98909: LIST
98910: LIST
98911: PPUSH
98912: CALL_OW 72
98916: ST_TO_ADDR
// if not vehicles then
98917: LD_VAR 0 1
98921: NOT
98922: IFFALSE 98926
// exit ;
98924: GO 98953
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
98926: LD_VAR 0 1
98930: PPUSH
98931: LD_VAR 0 2
98935: PUSH
98936: LD_INT 1
98938: ARRAY
98939: PPUSH
98940: LD_VAR 0 2
98944: PUSH
98945: LD_INT 2
98947: ARRAY
98948: PPUSH
98949: CALL_OW 111
// end ;
98953: LD_VAR 0 3
98957: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
98958: LD_INT 0
98960: PPUSH
98961: PPUSH
98962: PPUSH
// if not side or not area then
98963: LD_VAR 0 1
98967: NOT
98968: IFTRUE 98977
98970: PUSH
98971: LD_VAR 0 2
98975: NOT
98976: OR
98977: IFFALSE 98981
// exit ;
98979: GO 99100
// tmp := AreaToList ( area , 0 ) ;
98981: LD_ADDR_VAR 0 5
98985: PUSH
98986: LD_VAR 0 2
98990: PPUSH
98991: LD_INT 0
98993: PPUSH
98994: CALL_OW 517
98998: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
98999: LD_ADDR_VAR 0 4
99003: PUSH
99004: DOUBLE
99005: LD_INT 1
99007: DEC
99008: ST_TO_ADDR
99009: LD_VAR 0 5
99013: PUSH
99014: LD_INT 1
99016: ARRAY
99017: PUSH
99018: FOR_TO
99019: IFFALSE 99098
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
99021: LD_VAR 0 5
99025: PUSH
99026: LD_INT 1
99028: ARRAY
99029: PUSH
99030: LD_VAR 0 4
99034: ARRAY
99035: PPUSH
99036: LD_VAR 0 5
99040: PUSH
99041: LD_INT 2
99043: ARRAY
99044: PUSH
99045: LD_VAR 0 4
99049: ARRAY
99050: PPUSH
99051: CALL_OW 351
99055: IFFALSE 99096
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
99057: LD_VAR 0 5
99061: PUSH
99062: LD_INT 1
99064: ARRAY
99065: PUSH
99066: LD_VAR 0 4
99070: ARRAY
99071: PPUSH
99072: LD_VAR 0 5
99076: PUSH
99077: LD_INT 2
99079: ARRAY
99080: PUSH
99081: LD_VAR 0 4
99085: ARRAY
99086: PPUSH
99087: LD_VAR 0 1
99091: PPUSH
99092: CALL_OW 244
// end ;
99096: GO 99018
99098: POP
99099: POP
// end ;
99100: LD_VAR 0 3
99104: RET
// export function UniqueArray ( array ) ; var i ; begin
99105: LD_INT 0
99107: PPUSH
99108: PPUSH
// result := [ ] ;
99109: LD_ADDR_VAR 0 2
99113: PUSH
99114: EMPTY
99115: ST_TO_ADDR
// if not array then
99116: LD_VAR 0 1
99120: NOT
99121: IFFALSE 99125
// exit ;
99123: GO 99186
// for i := 1 to array do
99125: LD_ADDR_VAR 0 3
99129: PUSH
99130: DOUBLE
99131: LD_INT 1
99133: DEC
99134: ST_TO_ADDR
99135: LD_VAR 0 1
99139: PUSH
99140: FOR_TO
99141: IFFALSE 99184
// if not array [ i ] in result then
99143: LD_VAR 0 1
99147: PUSH
99148: LD_VAR 0 3
99152: ARRAY
99153: PUSH
99154: LD_VAR 0 2
99158: IN
99159: NOT
99160: IFFALSE 99182
// result := Join ( result , i ) ;
99162: LD_ADDR_VAR 0 2
99166: PUSH
99167: LD_VAR 0 2
99171: PPUSH
99172: LD_VAR 0 3
99176: PPUSH
99177: CALL 93837 0 2
99181: ST_TO_ADDR
99182: GO 99140
99184: POP
99185: POP
// end ; end_of_file
99186: LD_VAR 0 2
99190: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
99191: LD_VAR 0 1
99195: PUSH
99196: LD_INT 200
99198: DOUBLE
99199: GREATEREQUAL
99200: IFFALSE 99208
99202: LD_INT 299
99204: DOUBLE
99205: LESSEQUAL
99206: IFTRUE 99210
99208: GO 99242
99210: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
99211: LD_VAR 0 1
99215: PPUSH
99216: LD_VAR 0 2
99220: PPUSH
99221: LD_VAR 0 3
99225: PPUSH
99226: LD_VAR 0 4
99230: PPUSH
99231: LD_VAR 0 5
99235: PPUSH
99236: CALL 50948 0 5
99240: GO 99319
99242: LD_INT 300
99244: DOUBLE
99245: GREATEREQUAL
99246: IFFALSE 99254
99248: LD_INT 399
99250: DOUBLE
99251: LESSEQUAL
99252: IFTRUE 99256
99254: GO 99318
99256: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
99257: LD_VAR 0 1
99261: PPUSH
99262: LD_VAR 0 2
99266: PPUSH
99267: LD_VAR 0 3
99271: PPUSH
99272: LD_VAR 0 4
99276: PPUSH
99277: LD_VAR 0 5
99281: PPUSH
99282: LD_VAR 0 6
99286: PPUSH
99287: LD_VAR 0 7
99291: PPUSH
99292: LD_VAR 0 8
99296: PPUSH
99297: LD_VAR 0 9
99301: PPUSH
99302: LD_VAR 0 10
99306: PPUSH
99307: LD_VAR 0 11
99311: PPUSH
99312: CALL 46832 0 11
99316: GO 99319
99318: POP
// end ;
99319: PPOPN 11
99321: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
99322: LD_VAR 0 1
99326: PPUSH
99327: LD_VAR 0 2
99331: PPUSH
99332: LD_VAR 0 3
99336: PPUSH
99337: LD_VAR 0 4
99341: PPUSH
99342: LD_VAR 0 5
99346: PPUSH
99347: CALL 50329 0 5
// end ; end_of_file
99351: PPOPN 5
99353: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
99354: LD_VAR 0 1
99358: PPUSH
99359: LD_VAR 0 2
99363: PPUSH
99364: LD_VAR 0 3
99368: PPUSH
99369: LD_VAR 0 4
99373: PPUSH
99374: LD_VAR 0 5
99378: PPUSH
99379: LD_VAR 0 6
99383: PPUSH
99384: CALL 34372 0 6
// end ;
99388: PPOPN 6
99390: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
99391: LD_INT 0
99393: PPUSH
// begin if not units then
99394: LD_VAR 0 1
99398: NOT
99399: IFFALSE 99403
// exit ;
99401: GO 99403
// end ;
99403: PPOPN 7
99405: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
99406: CALL 34259 0 0
// end ;
99410: PPOPN 1
99412: END
