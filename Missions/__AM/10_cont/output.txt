// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export ruMech ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog , snipersTrained ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 28
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 20
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 29
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 38
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 39
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 40
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 41
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 42
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 50
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 47
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 46
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 48
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 49
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 59
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// ruMech := [ 4 , 5 , 6 ] [ Difficulty ] ;
 123: LD_ADDR_EXP 51
 127: PUSH
 128: LD_INT 4
 130: PUSH
 131: LD_INT 5
 133: PUSH
 134: LD_INT 6
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: PUSH
 142: LD_OWVAR 67
 146: ARRAY
 147: ST_TO_ADDR
// eventVar1 = 0 ;
 148: LD_ADDR_EXP 63
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// eventVar2 = 0 ;
 156: LD_ADDR_EXP 64
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// fastEnd = 0 ;
 164: LD_ADDR_EXP 61
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// KhatamStatus = 0 ;
 172: LD_ADDR_EXP 53
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// GensherStatus = 0 ;
 180: LD_ADDR_EXP 52
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// cratesSpawned = 0 ;
 188: LD_ADDR_EXP 56
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 196: LD_ADDR_EXP 57
 200: PUSH
 201: LD_INT 1
 203: PUSH
 204: LD_INT 2
 206: PUSH
 207: LD_INT 2
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: LIST
 214: PUSH
 215: LD_OWVAR 67
 219: ARRAY
 220: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 ] [ Difficulty ] ;
 221: LD_ADDR_EXP 58
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 4
 231: PUSH
 232: LD_INT 4
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: PUSH
 240: LD_OWVAR 67
 244: ARRAY
 245: ST_TO_ADDR
// snipersTrained := false ;
 246: LD_ADDR_EXP 60
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// attackAvalaible = 1 ;
 254: LD_ADDR_EXP 62
 258: PUSH
 259: LD_INT 1
 261: ST_TO_ADDR
// mission_prefix := 10c_ ;
 262: LD_ADDR_EXP 54
 266: PUSH
 267: LD_STRING 10c_
 269: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 270: LD_ADDR_EXP 55
 274: PUSH
 275: LD_STRING 10_
 277: ST_TO_ADDR
// debugMode = 0 ;
 278: LD_ADDR_EXP 65
 282: PUSH
 283: LD_INT 0
 285: ST_TO_ADDR
// PrepareNature ;
 286: CALL 25682 0 0
// PrepareDifficulty ;
 290: CALL 10665 0 0
// PrepareJMMTeam ;
 294: CALL 1350 0 0
// PrepareCathyTeam ;
 298: CALL 2425 0 0
// PlaceMines ( MineField1 , 3 + Difficulty ) ;
 302: LD_INT 24
 304: PPUSH
 305: LD_INT 3
 307: PUSH
 308: LD_OWVAR 67
 312: PLUS
 313: PPUSH
 314: CALL 20539 0 2
// if Difficulty > 1 then
 318: LD_OWVAR 67
 322: PUSH
 323: LD_INT 1
 325: GREATER
 326: IFFALSE 344
// PlaceMines ( MineField2 , 3 + Difficulty ) ;
 328: LD_INT 25
 330: PPUSH
 331: LD_INT 3
 333: PUSH
 334: LD_OWVAR 67
 338: PLUS
 339: PPUSH
 340: CALL 20539 0 2
// if Difficulty > 2 then
 344: LD_OWVAR 67
 348: PUSH
 349: LD_INT 2
 351: GREATER
 352: IFFALSE 370
// PlaceMines ( MineField3 , 3 + Difficulty ) ;
 354: LD_INT 26
 356: PPUSH
 357: LD_INT 3
 359: PUSH
 360: LD_OWVAR 67
 364: PLUS
 365: PPUSH
 366: CALL 20539 0 2
// PrepareArabianCommander ;
 370: CALL 3863 0 0
// PrepareArabian ;
 374: CALL 3915 0 0
// BuildArabianBase ;
 378: CALL 13480 0 0
// TameApemans ;
 382: CALL 19344 0 0
// end ;
 386: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 387: LD_EXP 65
 391: PUSH
 392: LD_INT 1
 394: EQUAL
 395: IFFALSE 701
 397: GO 399
 399: DISABLE
 400: LD_INT 0
 402: PPUSH
// begin enable ;
 403: ENABLE
// fogoff ( true ) ;
 404: LD_INT 1
 406: PPUSH
 407: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 411: LD_ADDR_VAR 0 1
 415: PUSH
 416: LD_INT 22
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: PUSH
 426: LD_INT 21
 428: PUSH
 429: LD_INT 1
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: PUSH
 436: EMPTY
 437: LIST
 438: LIST
 439: PPUSH
 440: CALL_OW 69
 444: PUSH
 445: FOR_IN
 446: IFFALSE 462
// SetLives ( i , 1000 ) ;
 448: LD_VAR 0 1
 452: PPUSH
 453: LD_INT 1000
 455: PPUSH
 456: CALL_OW 234
 460: GO 445
 462: POP
 463: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 464: LD_ADDR_VAR 0 1
 468: PUSH
 469: LD_INT 22
 471: PUSH
 472: LD_INT 1
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 2
 481: PUSH
 482: LD_INT 30
 484: PUSH
 485: LD_INT 0
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: PUSH
 492: LD_INT 30
 494: PUSH
 495: LD_INT 1
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: LIST
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: PPUSH
 511: CALL_OW 69
 515: PUSH
 516: FOR_IN
 517: IFFALSE 541
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 519: LD_VAR 0 1
 523: PPUSH
 524: CALL_OW 274
 528: PPUSH
 529: LD_INT 1
 531: PPUSH
 532: LD_INT 9999
 534: PPUSH
 535: CALL_OW 277
 539: GO 516
 541: POP
 542: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 543: LD_ADDR_VAR 0 1
 547: PUSH
 548: LD_INT 22
 550: PUSH
 551: LD_INT 1
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PUSH
 558: LD_INT 2
 560: PUSH
 561: LD_INT 30
 563: PUSH
 564: LD_INT 0
 566: PUSH
 567: EMPTY
 568: LIST
 569: LIST
 570: PUSH
 571: LD_INT 30
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: PUSH
 581: EMPTY
 582: LIST
 583: LIST
 584: LIST
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PPUSH
 590: CALL_OW 69
 594: PUSH
 595: FOR_IN
 596: IFFALSE 620
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 598: LD_VAR 0 1
 602: PPUSH
 603: CALL_OW 274
 607: PPUSH
 608: LD_INT 2
 610: PPUSH
 611: LD_INT 9999
 613: PPUSH
 614: CALL_OW 277
 618: GO 595
 620: POP
 621: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 622: LD_ADDR_VAR 0 1
 626: PUSH
 627: LD_INT 22
 629: PUSH
 630: LD_INT 1
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: PUSH
 637: LD_INT 2
 639: PUSH
 640: LD_INT 30
 642: PUSH
 643: LD_INT 0
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: PUSH
 650: LD_INT 30
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PUSH
 660: EMPTY
 661: LIST
 662: LIST
 663: LIST
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: PPUSH
 669: CALL_OW 69
 673: PUSH
 674: FOR_IN
 675: IFFALSE 699
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 677: LD_VAR 0 1
 681: PPUSH
 682: CALL_OW 274
 686: PPUSH
 687: LD_INT 3
 689: PPUSH
 690: LD_INT 9999
 692: PPUSH
 693: CALL_OW 277
 697: GO 674
 699: POP
 700: POP
// end ;
 701: PPOPN 1
 703: END
// every 0 0$1 trigger FilterAllUnits ( [ f_class , class_sniper ] ) do
 704: LD_INT 25
 706: PUSH
 707: LD_INT 5
 709: PUSH
 710: EMPTY
 711: LIST
 712: LIST
 713: PPUSH
 714: CALL_OW 69
 718: IFFALSE 731
 720: GO 722
 722: DISABLE
// snipersTrained := true ;
 723: LD_ADDR_EXP 60
 727: PUSH
 728: LD_INT 1
 730: ST_TO_ADDR
 731: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_friend and ruDestroyedBuildings and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do
 732: LD_INT 1
 734: PPUSH
 735: LD_INT 2
 737: PPUSH
 738: CALL_OW 81
 742: PUSH
 743: LD_INT 1
 745: EQUAL
 746: PUSH
 747: LD_EXP 42
 751: AND
 752: PUSH
 753: LD_INT 22
 755: PUSH
 756: LD_INT 3
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: PUSH
 763: LD_INT 21
 765: PUSH
 766: LD_INT 3
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: PPUSH
 777: CALL_OW 69
 781: PUSH
 782: LD_INT 0
 784: EQUAL
 785: AND
 786: IFFALSE 798
 788: GO 790
 790: DISABLE
// SetAchievement ( ACH_POWER ) ;
 791: LD_STRING ACH_POWER
 793: PPUSH
 794: CALL_OW 543
 798: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 799: LD_INT 22
 801: PUSH
 802: LD_INT 1
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: PUSH
 809: LD_INT 30
 811: PUSH
 812: LD_INT 1
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: PPUSH
 823: CALL_OW 69
 827: PUSH
 828: LD_INT 22
 830: PUSH
 831: LD_INT 1
 833: PUSH
 834: EMPTY
 835: LIST
 836: LIST
 837: PUSH
 838: LD_INT 30
 840: PUSH
 841: LD_INT 32
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PPUSH
 852: CALL_OW 69
 856: AND
 857: PUSH
 858: LD_INT 22
 860: PUSH
 861: LD_INT 1
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: PUSH
 868: LD_INT 30
 870: PUSH
 871: LD_INT 33
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: PPUSH
 882: CALL_OW 69
 886: AND
 887: PUSH
 888: LD_INT 22
 890: PUSH
 891: LD_INT 1
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 30
 900: PUSH
 901: LD_INT 5
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PPUSH
 912: CALL_OW 69
 916: AND
 917: PUSH
 918: LD_INT 22
 920: PUSH
 921: LD_INT 1
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: PUSH
 928: LD_INT 30
 930: PUSH
 931: LD_INT 3
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: PPUSH
 942: CALL_OW 69
 946: AND
 947: PUSH
 948: LD_INT 22
 950: PUSH
 951: LD_INT 1
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: LD_INT 30
 960: PUSH
 961: LD_INT 36
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PPUSH
 972: CALL_OW 69
 976: AND
 977: PUSH
 978: LD_INT 22
 980: PUSH
 981: LD_INT 1
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: PUSH
 988: LD_INT 30
 990: PUSH
 991: LD_INT 31
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: PUSH
 998: EMPTY
 999: LIST
1000: LIST
1001: PPUSH
1002: CALL_OW 69
1006: AND
1007: PUSH
1008: LD_INT 22
1010: PUSH
1011: LD_INT 1
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 30
1020: PUSH
1021: LD_INT 22
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: PPUSH
1032: CALL_OW 69
1036: AND
1037: PUSH
1038: LD_INT 22
1040: PUSH
1041: LD_INT 1
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: PUSH
1048: LD_INT 30
1050: PUSH
1051: LD_INT 20
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: PPUSH
1062: CALL_OW 69
1066: AND
1067: PUSH
1068: LD_INT 22
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: PUSH
1078: LD_INT 30
1080: PUSH
1081: LD_INT 19
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: PPUSH
1092: CALL_OW 69
1096: AND
1097: PUSH
1098: LD_INT 22
1100: PUSH
1101: LD_INT 1
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 30
1110: PUSH
1111: LD_INT 16
1113: PUSH
1114: EMPTY
1115: LIST
1116: LIST
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: PPUSH
1122: CALL_OW 69
1126: AND
1127: PUSH
1128: LD_INT 22
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: LD_INT 30
1140: PUSH
1141: LD_INT 17
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 69
1156: AND
1157: PUSH
1158: LD_INT 22
1160: PUSH
1161: LD_INT 1
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: PUSH
1168: LD_INT 30
1170: PUSH
1171: LD_INT 21
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: PPUSH
1182: CALL_OW 69
1186: AND
1187: PUSH
1188: LD_INT 22
1190: PUSH
1191: LD_INT 1
1193: PUSH
1194: EMPTY
1195: LIST
1196: LIST
1197: PUSH
1198: LD_INT 30
1200: PUSH
1201: LD_INT 29
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PPUSH
1212: CALL_OW 69
1216: AND
1217: PUSH
1218: LD_INT 22
1220: PUSH
1221: LD_INT 1
1223: PUSH
1224: EMPTY
1225: LIST
1226: LIST
1227: PUSH
1228: LD_INT 30
1230: PUSH
1231: LD_INT 30
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: PUSH
1238: EMPTY
1239: LIST
1240: LIST
1241: PPUSH
1242: CALL_OW 69
1246: AND
1247: PUSH
1248: LD_INT 22
1250: PUSH
1251: LD_INT 1
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: PUSH
1258: LD_INT 30
1260: PUSH
1261: LD_INT 27
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: PUSH
1268: EMPTY
1269: LIST
1270: LIST
1271: PPUSH
1272: CALL_OW 69
1276: AND
1277: PUSH
1278: LD_INT 22
1280: PUSH
1281: LD_INT 1
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: PUSH
1288: LD_INT 30
1290: PUSH
1291: LD_INT 26
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PPUSH
1302: CALL_OW 69
1306: AND
1307: PUSH
1308: LD_INT 22
1310: PUSH
1311: LD_INT 1
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: PUSH
1318: LD_INT 30
1320: PUSH
1321: LD_INT 28
1323: PUSH
1324: EMPTY
1325: LIST
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PPUSH
1332: CALL_OW 69
1336: AND
1337: IFFALSE 1349
1339: GO 1341
1341: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1342: LD_STRING ACH_ARCH
1344: PPUSH
1345: CALL_OW 543
1349: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
1350: LD_INT 0
1352: PPUSH
1353: PPUSH
1354: PPUSH
1355: PPUSH
1356: PPUSH
1357: PPUSH
// uc_side = 1 ;
1358: LD_ADDR_OWVAR 20
1362: PUSH
1363: LD_INT 1
1365: ST_TO_ADDR
// uc_nation = 1 ;
1366: LD_ADDR_OWVAR 21
1370: PUSH
1371: LD_INT 1
1373: ST_TO_ADDR
// count = 0 ;
1374: LD_ADDR_VAR 0 6
1378: PUSH
1379: LD_INT 0
1381: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
1382: LD_ADDR_EXP 1
1386: PUSH
1387: LD_STRING 10_JMM
1389: PPUSH
1390: LD_INT 1
1392: PPUSH
1393: CALL 10270 0 2
1397: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
1398: LD_ADDR_EXP 20
1402: PUSH
1403: LD_EXP 20
1407: PUSH
1408: LD_EXP 1
1412: ADD
1413: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
1414: LD_ADDR_EXP 10
1418: PUSH
1419: LD_STRING 10_Gary
1421: PPUSH
1422: LD_INT 1
1424: PPUSH
1425: CALL 10270 0 2
1429: ST_TO_ADDR
// if Gary then
1430: LD_EXP 10
1434: IFFALSE 1452
// JMMSquad = JMMSquad ^ Gary ;
1436: LD_ADDR_EXP 20
1440: PUSH
1441: LD_EXP 20
1445: PUSH
1446: LD_EXP 10
1450: ADD
1451: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
1452: LD_ADDR_EXP 5
1456: PUSH
1457: LD_STRING 10_Cyrus
1459: PPUSH
1460: LD_INT 1
1462: PPUSH
1463: CALL 10270 0 2
1467: ST_TO_ADDR
// if Cyrus then
1468: LD_EXP 5
1472: IFFALSE 1490
// JMMSquad = JMMSquad ^ Cyrus ;
1474: LD_ADDR_EXP 20
1478: PUSH
1479: LD_EXP 20
1483: PUSH
1484: LD_EXP 5
1488: ADD
1489: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
1490: LD_ADDR_EXP 4
1494: PUSH
1495: LD_STRING 10_Bobby
1497: PPUSH
1498: LD_INT 1
1500: PPUSH
1501: CALL 10270 0 2
1505: ST_TO_ADDR
// if Bobby then
1506: LD_EXP 4
1510: IFFALSE 1528
// JMMSquad = JMMSquad ^ Bobby ;
1512: LD_ADDR_EXP 20
1516: PUSH
1517: LD_EXP 20
1521: PUSH
1522: LD_EXP 4
1526: ADD
1527: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
1528: LD_ADDR_EXP 6
1532: PUSH
1533: LD_STRING 10_Lisa
1535: PPUSH
1536: LD_INT 1
1538: PPUSH
1539: CALL 10270 0 2
1543: ST_TO_ADDR
// if Lisa then
1544: LD_EXP 6
1548: IFFALSE 1566
// JMMSquad = JMMSquad ^ Lisa ;
1550: LD_ADDR_EXP 20
1554: PUSH
1555: LD_EXP 20
1559: PUSH
1560: LD_EXP 6
1564: ADD
1565: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
1566: LD_ADDR_EXP 2
1570: PUSH
1571: LD_STRING 10_Brown
1573: PPUSH
1574: LD_INT 1
1576: PPUSH
1577: CALL 10270 0 2
1581: ST_TO_ADDR
// if Brown then
1582: LD_EXP 2
1586: IFFALSE 1604
// JMMSquad = JMMSquad ^ Brown ;
1588: LD_ADDR_EXP 20
1592: PUSH
1593: LD_EXP 20
1597: PUSH
1598: LD_EXP 2
1602: ADD
1603: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
1604: LD_ADDR_EXP 3
1608: PUSH
1609: LD_STRING 10_Donaldson
1611: PPUSH
1612: LD_INT 1
1614: PPUSH
1615: CALL 10270 0 2
1619: ST_TO_ADDR
// if Donaldson then
1620: LD_EXP 3
1624: IFFALSE 1642
// JMMSquad = JMMSquad ^ Donaldson ;
1626: LD_ADDR_EXP 20
1630: PUSH
1631: LD_EXP 20
1635: PUSH
1636: LD_EXP 3
1640: ADD
1641: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
1642: LD_ADDR_EXP 7
1646: PUSH
1647: LD_STRING 10_Frank
1649: PPUSH
1650: LD_INT 1
1652: PPUSH
1653: CALL 10270 0 2
1657: ST_TO_ADDR
// if Frank then
1658: LD_EXP 7
1662: IFFALSE 1680
// JMMSquad = JMMSquad ^ Frank ;
1664: LD_ADDR_EXP 20
1668: PUSH
1669: LD_EXP 20
1673: PUSH
1674: LD_EXP 7
1678: ADD
1679: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
1680: LD_ADDR_EXP 9
1684: PUSH
1685: LD_STRING 10_Houten
1687: PPUSH
1688: LD_INT 1
1690: PPUSH
1691: CALL 10270 0 2
1695: ST_TO_ADDR
// if Houten then
1696: LD_EXP 9
1700: IFFALSE 1718
// JMMSquad = JMMSquad ^ Houten ;
1702: LD_ADDR_EXP 20
1706: PUSH
1707: LD_EXP 20
1711: PUSH
1712: LD_EXP 9
1716: ADD
1717: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1718: LD_ADDR_EXP 21
1722: PUSH
1723: LD_STRING OthersIn10
1725: PPUSH
1726: CALL_OW 31
1730: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1731: LD_ADDR_EXP 24
1735: PUSH
1736: LD_STRING Powell
1738: PPUSH
1739: LD_INT 0
1741: PPUSH
1742: CALL 10270 0 2
1746: ST_TO_ADDR
// for i in JMMSquad do
1747: LD_ADDR_VAR 0 2
1751: PUSH
1752: LD_EXP 20
1756: PUSH
1757: FOR_IN
1758: IFFALSE 2017
// begin if count < 3 then
1760: LD_VAR 0 6
1764: PUSH
1765: LD_INT 3
1767: LESS
1768: IFFALSE 1885
// begin vc_engine = 1 ;
1770: LD_ADDR_OWVAR 39
1774: PUSH
1775: LD_INT 1
1777: ST_TO_ADDR
// vc_control = 1 ;
1778: LD_ADDR_OWVAR 38
1782: PUSH
1783: LD_INT 1
1785: ST_TO_ADDR
// vc_weapon = 12 ;
1786: LD_ADDR_OWVAR 40
1790: PUSH
1791: LD_INT 12
1793: ST_TO_ADDR
// vc_chassis = 3 ;
1794: LD_ADDR_OWVAR 37
1798: PUSH
1799: LD_INT 3
1801: ST_TO_ADDR
// veh = CreateVehicle ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: CALL_OW 45
1811: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1812: LD_VAR 0 4
1816: PPUSH
1817: LD_INT 1
1819: PPUSH
1820: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1824: LD_VAR 0 4
1828: PPUSH
1829: LD_INT 2
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// if count mod 2 = 0 then
1839: LD_VAR 0 6
1843: PUSH
1844: LD_INT 2
1846: MOD
1847: PUSH
1848: LD_INT 0
1850: EQUAL
1851: IFFALSE 1870
// AddCargo ( veh , 1 , 100 ) else
1853: LD_VAR 0 4
1857: PPUSH
1858: LD_INT 1
1860: PPUSH
1861: LD_INT 100
1863: PPUSH
1864: CALL_OW 291
1868: GO 1885
// AddCargo ( veh , 3 , 100 ) end ;
1870: LD_VAR 0 4
1874: PPUSH
1875: LD_INT 3
1877: PPUSH
1878: LD_INT 100
1880: PPUSH
1881: CALL_OW 291
// if count >= 3 then
1885: LD_VAR 0 6
1889: PUSH
1890: LD_INT 3
1892: GREATEREQUAL
1893: IFFALSE 1987
// begin vc_engine = 1 ;
1895: LD_ADDR_OWVAR 39
1899: PUSH
1900: LD_INT 1
1902: ST_TO_ADDR
// vc_control = 1 ;
1903: LD_ADDR_OWVAR 38
1907: PUSH
1908: LD_INT 1
1910: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1911: LD_ADDR_OWVAR 40
1915: PUSH
1916: LD_INT 3
1918: PUSH
1919: LD_INT 4
1921: PUSH
1922: LD_INT 5
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: LIST
1929: PUSH
1930: LD_INT 1
1932: PPUSH
1933: LD_INT 3
1935: PPUSH
1936: CALL_OW 12
1940: ARRAY
1941: ST_TO_ADDR
// vc_chassis = 3 ;
1942: LD_ADDR_OWVAR 37
1946: PUSH
1947: LD_INT 3
1949: ST_TO_ADDR
// veh = CreateVehicle ;
1950: LD_ADDR_VAR 0 4
1954: PUSH
1955: CALL_OW 45
1959: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1960: LD_VAR 0 4
1964: PPUSH
1965: LD_INT 1
1967: PPUSH
1968: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1972: LD_VAR 0 4
1976: PPUSH
1977: LD_INT 2
1979: PPUSH
1980: LD_INT 0
1982: PPUSH
1983: CALL_OW 49
// end ; count = count + 1 ;
1987: LD_ADDR_VAR 0 6
1991: PUSH
1992: LD_VAR 0 6
1996: PUSH
1997: LD_INT 1
1999: PLUS
2000: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2001: LD_VAR 0 2
2005: PPUSH
2006: LD_VAR 0 4
2010: PPUSH
2011: CALL_OW 52
// end ;
2015: GO 1757
2017: POP
2018: POP
// for i in others10 do
2019: LD_ADDR_VAR 0 2
2023: PUSH
2024: LD_EXP 21
2028: PUSH
2029: FOR_IN
2030: IFFALSE 2156
// begin vc_engine = 1 ;
2032: LD_ADDR_OWVAR 39
2036: PUSH
2037: LD_INT 1
2039: ST_TO_ADDR
// vc_control = 1 ;
2040: LD_ADDR_OWVAR 38
2044: PUSH
2045: LD_INT 1
2047: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2048: LD_ADDR_OWVAR 40
2052: PUSH
2053: LD_INT 3
2055: PUSH
2056: LD_INT 4
2058: PUSH
2059: LD_INT 5
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: LIST
2066: PUSH
2067: LD_INT 1
2069: PPUSH
2070: LD_INT 3
2072: PPUSH
2073: CALL_OW 12
2077: ARRAY
2078: ST_TO_ADDR
// vc_chassis = 3 ;
2079: LD_ADDR_OWVAR 37
2083: PUSH
2084: LD_INT 3
2086: ST_TO_ADDR
// veh = CreateVehicle ;
2087: LD_ADDR_VAR 0 4
2091: PUSH
2092: CALL_OW 45
2096: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2097: LD_VAR 0 4
2101: PPUSH
2102: LD_INT 1
2104: PPUSH
2105: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2109: LD_VAR 0 4
2113: PPUSH
2114: LD_INT 2
2116: PPUSH
2117: LD_INT 0
2119: PPUSH
2120: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2124: LD_ADDR_EXP 28
2128: PUSH
2129: LD_EXP 28
2133: PUSH
2134: LD_VAR 0 4
2138: ADD
2139: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2140: LD_VAR 0 2
2144: PPUSH
2145: LD_VAR 0 4
2149: PPUSH
2150: CALL_OW 52
// end ;
2154: GO 2029
2156: POP
2157: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
2158: LD_INT 22
2160: PUSH
2161: LD_INT 1
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: PUSH
2168: LD_INT 21
2170: PUSH
2171: LD_INT 1
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: PPUSH
2182: CALL_OW 69
2186: PPUSH
2187: LD_INT 1
2189: PPUSH
2190: CALL_OW 336
// end ;
2194: LD_VAR 0 1
2198: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
2199: LD_INT 0
2201: PPUSH
2202: PPUSH
2203: PPUSH
2204: PPUSH
2205: PPUSH
// uc_side = 1 ;
2206: LD_ADDR_OWVAR 20
2210: PUSH
2211: LD_INT 1
2213: ST_TO_ADDR
// uc_nation = 1 ;
2214: LD_ADDR_OWVAR 21
2218: PUSH
2219: LD_INT 1
2221: ST_TO_ADDR
// for i := 1 to 10 do
2222: LD_ADDR_VAR 0 2
2226: PUSH
2227: DOUBLE
2228: LD_INT 1
2230: DEC
2231: ST_TO_ADDR
2232: LD_INT 10
2234: PUSH
2235: FOR_TO
2236: IFFALSE 2418
// begin vc_engine = 1 ;
2238: LD_ADDR_OWVAR 39
2242: PUSH
2243: LD_INT 1
2245: ST_TO_ADDR
// vc_control = 1 ;
2246: LD_ADDR_OWVAR 38
2250: PUSH
2251: LD_INT 1
2253: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2254: LD_ADDR_OWVAR 40
2258: PUSH
2259: LD_INT 3
2261: PUSH
2262: LD_INT 4
2264: PUSH
2265: LD_INT 5
2267: PUSH
2268: LD_INT 12
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: PUSH
2277: LD_INT 1
2279: PPUSH
2280: LD_INT 4
2282: PPUSH
2283: CALL_OW 12
2287: ARRAY
2288: ST_TO_ADDR
// vc_chassis = 3 ;
2289: LD_ADDR_OWVAR 37
2293: PUSH
2294: LD_INT 3
2296: ST_TO_ADDR
// veh = CreateVehicle ;
2297: LD_ADDR_VAR 0 3
2301: PUSH
2302: CALL_OW 45
2306: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2307: LD_VAR 0 3
2311: PPUSH
2312: LD_INT 1
2314: PPUSH
2315: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2319: LD_VAR 0 3
2323: PPUSH
2324: LD_INT 2
2326: PPUSH
2327: LD_INT 0
2329: PPUSH
2330: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2334: LD_ADDR_EXP 28
2338: PUSH
2339: LD_EXP 28
2343: PUSH
2344: LD_VAR 0 3
2348: ADD
2349: ST_TO_ADDR
// if vc_weapon = 12 then
2350: LD_OWVAR 40
2354: PUSH
2355: LD_INT 12
2357: EQUAL
2358: IFFALSE 2416
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_INT 5
2367: PPUSH
2368: LD_INT 10
2370: PPUSH
2371: CALL_OW 12
2375: PUSH
2376: LD_INT 10
2378: MUL
2379: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2380: LD_VAR 0 3
2384: PPUSH
2385: LD_INT 1
2387: PUSH
2388: LD_INT 3
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: PUSH
2395: LD_INT 1
2397: PPUSH
2398: LD_INT 2
2400: PPUSH
2401: CALL_OW 12
2405: ARRAY
2406: PPUSH
2407: LD_VAR 0 4
2411: PPUSH
2412: CALL_OW 291
// end ; end ;
2416: GO 2235
2418: POP
2419: POP
// end ;
2420: LD_VAR 0 1
2424: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2425: LD_INT 0
2427: PPUSH
2428: PPUSH
2429: PPUSH
// uc_side = 4 ;
2430: LD_ADDR_OWVAR 20
2434: PUSH
2435: LD_INT 4
2437: ST_TO_ADDR
// uc_nation = 1 ;
2438: LD_ADDR_OWVAR 21
2442: PUSH
2443: LD_INT 1
2445: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
2446: LD_ADDR_EXP 11
2450: PUSH
2451: LD_STRING Simms
2453: PPUSH
2454: LD_INT 0
2456: PPUSH
2457: CALL 10270 0 2
2461: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
2462: LD_ADDR_EXP 12
2466: PUSH
2467: LD_STRING 08_Denis
2469: PPUSH
2470: LD_INT 1
2472: PPUSH
2473: CALL 10270 0 2
2477: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
2478: LD_ADDR_EXP 13
2482: PUSH
2483: LD_STRING 08_Joan
2485: PPUSH
2486: LD_INT 1
2488: PPUSH
2489: CALL 10270 0 2
2493: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2494: LD_STRING 08_Khatam
2496: PPUSH
2497: CALL_OW 28
2501: IFFALSE 2521
// Khatam = PrepareUnit ( 08_Khatam , true ) else
2503: LD_ADDR_EXP 14
2507: PUSH
2508: LD_STRING 08_Khatam
2510: PPUSH
2511: LD_INT 1
2513: PPUSH
2514: CALL 10270 0 2
2518: ST_TO_ADDR
2519: GO 2546
// if TestCharacters ( 03_Khatam ) then
2521: LD_STRING 03_Khatam
2523: PPUSH
2524: CALL_OW 28
2528: IFFALSE 2546
// Khatam = PrepareUnit ( 03_Khatam , true ) ;
2530: LD_ADDR_EXP 14
2534: PUSH
2535: LD_STRING 03_Khatam
2537: PPUSH
2538: LD_INT 1
2540: PPUSH
2541: CALL 10270 0 2
2545: ST_TO_ADDR
// Gladstone = PrepareUnit ( 08_Gladstone , true ) ;
2546: LD_ADDR_EXP 15
2550: PUSH
2551: LD_STRING 08_Gladstone
2553: PPUSH
2554: LD_INT 1
2556: PPUSH
2557: CALL 10270 0 2
2561: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
2562: LD_ADDR_EXP 17
2566: PUSH
2567: LD_STRING DeltaDoctor
2569: PPUSH
2570: LD_INT 1
2572: PPUSH
2573: CALL 10270 0 2
2577: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) = 1 then
2578: LD_STRING 08_Frank
2580: PPUSH
2581: CALL_OW 28
2585: PUSH
2586: LD_INT 1
2588: EQUAL
2589: IFFALSE 2607
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
2591: LD_ADDR_EXP 8
2595: PUSH
2596: LD_STRING Yamoko
2598: PPUSH
2599: LD_INT 1
2601: PPUSH
2602: CALL 10270 0 2
2606: ST_TO_ADDR
// if TestCharacters ( 08_Kikuchi ) then
2607: LD_STRING 08_Kikuchi
2609: PPUSH
2610: CALL_OW 28
2614: IFFALSE 2632
// Kikuchi = PrepareUnit ( 08_Kikuchi , true ) ;
2616: LD_ADDR_EXP 8
2620: PUSH
2621: LD_STRING 08_Kikuchi
2623: PPUSH
2624: LD_INT 1
2626: PPUSH
2627: CALL 10270 0 2
2631: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
2632: LD_ADDR_EXP 22
2636: PUSH
2637: LD_STRING 09_others
2639: PPUSH
2640: CALL_OW 31
2644: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
2645: LD_ADDR_EXP 23
2649: PUSH
2650: LD_STRING 09_apes
2652: PPUSH
2653: CALL_OW 31
2657: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2658: LD_EXP 11
2662: PPUSH
2663: LD_INT 1
2665: PPUSH
2666: LD_INT 0
2668: PPUSH
2669: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2673: LD_EXP 12
2677: PPUSH
2678: LD_INT 1
2680: PPUSH
2681: LD_INT 0
2683: PPUSH
2684: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2688: LD_EXP 13
2692: PPUSH
2693: LD_INT 1
2695: PPUSH
2696: LD_INT 0
2698: PPUSH
2699: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2703: LD_EXP 14
2707: PPUSH
2708: LD_INT 1
2710: PPUSH
2711: LD_INT 0
2713: PPUSH
2714: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2718: LD_EXP 15
2722: PPUSH
2723: LD_INT 1
2725: PPUSH
2726: LD_INT 0
2728: PPUSH
2729: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2733: LD_EXP 17
2737: PPUSH
2738: LD_INT 1
2740: PPUSH
2741: LD_INT 0
2743: PPUSH
2744: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2748: LD_EXP 8
2752: PPUSH
2753: LD_INT 1
2755: PPUSH
2756: LD_INT 0
2758: PPUSH
2759: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2763: LD_EXP 11
2767: PUSH
2768: LD_EXP 14
2772: PUSH
2773: LD_EXP 12
2777: PUSH
2778: LD_EXP 15
2782: PUSH
2783: LD_EXP 17
2787: PUSH
2788: LD_EXP 13
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: LIST
2797: LIST
2798: LIST
2799: LIST
2800: PPUSH
2801: LD_INT 4
2803: PPUSH
2804: CALL_OW 336
// if others09 > 2 then
2808: LD_EXP 22
2812: PUSH
2813: LD_INT 2
2815: GREATER
2816: IFFALSE 2897
// begin for i := 1 to 3 do
2818: LD_ADDR_VAR 0 2
2822: PUSH
2823: DOUBLE
2824: LD_INT 1
2826: DEC
2827: ST_TO_ADDR
2828: LD_INT 3
2830: PUSH
2831: FOR_TO
2832: IFFALSE 2893
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2834: LD_EXP 22
2838: PUSH
2839: LD_VAR 0 2
2843: ARRAY
2844: PPUSH
2845: LD_INT 1
2847: PPUSH
2848: LD_INT 0
2850: PPUSH
2851: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
2855: LD_ADDR_EXP 22
2859: PUSH
2860: LD_EXP 22
2864: PPUSH
2865: LD_INT 1
2867: PPUSH
2868: CALL_OW 3
2872: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
2873: LD_EXP 22
2877: PUSH
2878: LD_VAR 0 2
2882: ARRAY
2883: PPUSH
2884: LD_INT 2
2886: PPUSH
2887: CALL_OW 336
// end ;
2891: GO 2831
2893: POP
2894: POP
// end else
2895: GO 2957
// begin for i in others09 do
2897: LD_ADDR_VAR 0 2
2901: PUSH
2902: LD_EXP 22
2906: PUSH
2907: FOR_IN
2908: IFFALSE 2955
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2910: LD_VAR 0 2
2914: PPUSH
2915: LD_INT 1
2917: PPUSH
2918: LD_INT 0
2920: PPUSH
2921: CALL_OW 49
// others09 = others09 diff i ;
2925: LD_ADDR_EXP 22
2929: PUSH
2930: LD_EXP 22
2934: PUSH
2935: LD_VAR 0 2
2939: DIFF
2940: ST_TO_ADDR
// SetClass ( i , 2 ) ;
2941: LD_VAR 0 2
2945: PPUSH
2946: LD_INT 2
2948: PPUSH
2949: CALL_OW 336
// end ;
2953: GO 2907
2955: POP
2956: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
2957: LD_INT 22
2959: PUSH
2960: LD_INT 4
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PUSH
2967: LD_INT 25
2969: PUSH
2970: LD_INT 2
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: PPUSH
2981: CALL_OW 69
2985: PUSH
2986: LD_INT 0
2988: EQUAL
2989: IFFALSE 3121
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2991: LD_ADDR_VAR 0 3
2995: PUSH
2996: LD_INT 22
2998: PUSH
2999: LD_INT 4
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: LD_INT 25
3008: PUSH
3009: LD_INT 2
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PPUSH
3020: CALL_OW 69
3024: PUSH
3025: LD_EXP 11
3029: PUSH
3030: LD_EXP 14
3034: PUSH
3035: LD_EXP 12
3039: PUSH
3040: LD_EXP 15
3044: PUSH
3045: LD_EXP 17
3049: PUSH
3050: LD_EXP 13
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: LIST
3059: LIST
3060: LIST
3061: LIST
3062: DIFF
3063: ST_TO_ADDR
// if not tmp then
3064: LD_VAR 0 3
3068: NOT
3069: IFFALSE 3105
// begin if Denis then
3071: LD_EXP 12
3075: IFFALSE 3091
// SetClass ( Denis , 2 ) else
3077: LD_EXP 12
3081: PPUSH
3082: LD_INT 2
3084: PPUSH
3085: CALL_OW 336
3089: GO 3103
// SetClass ( DeltaDoctor , 2 ) ;
3091: LD_EXP 17
3095: PPUSH
3096: LD_INT 2
3098: PPUSH
3099: CALL_OW 336
// end else
3103: GO 3121
// begin SetClass ( tmp [ 1 ] , 2 ) ;
3105: LD_VAR 0 3
3109: PUSH
3110: LD_INT 1
3112: ARRAY
3113: PPUSH
3114: LD_INT 2
3116: PPUSH
3117: CALL_OW 336
// end ; end ; for i in ape09 do
3121: LD_ADDR_VAR 0 2
3125: PUSH
3126: LD_EXP 23
3130: PUSH
3131: FOR_IN
3132: IFFALSE 3151
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3134: LD_VAR 0 2
3138: PPUSH
3139: LD_INT 1
3141: PPUSH
3142: LD_INT 0
3144: PPUSH
3145: CALL_OW 49
3149: GO 3131
3151: POP
3152: POP
// uc_side = 4 ;
3153: LD_ADDR_OWVAR 20
3157: PUSH
3158: LD_INT 4
3160: ST_TO_ADDR
// hc_class := 1 ;
3161: LD_ADDR_OWVAR 28
3165: PUSH
3166: LD_INT 1
3168: ST_TO_ADDR
// hc_sex := sex_female ;
3169: LD_ADDR_OWVAR 27
3173: PUSH
3174: LD_INT 2
3176: ST_TO_ADDR
// hc_gallery :=  ;
3177: LD_ADDR_OWVAR 33
3181: PUSH
3182: LD_STRING 
3184: ST_TO_ADDR
// hc_name :=  ;
3185: LD_ADDR_OWVAR 26
3189: PUSH
3190: LD_STRING 
3192: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3193: LD_ADDR_OWVAR 31
3197: PUSH
3198: LD_INT 1
3200: PUSH
3201: LD_INT 7
3203: PUSH
3204: LD_INT 1
3206: PUSH
3207: LD_INT 0
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: ST_TO_ADDR
// AmScout = CreateHuman ;
3216: LD_ADDR_EXP 18
3220: PUSH
3221: CALL_OW 44
3225: ST_TO_ADDR
// end ;
3226: LD_VAR 0 1
3230: RET
// export function PrepareCornell ; begin
3231: LD_INT 0
3233: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3234: LD_INT 4
3236: PPUSH
3237: LD_INT 4
3239: PPUSH
3240: CALL_OW 343
// uc_side = 4 ;
3244: LD_ADDR_OWVAR 20
3248: PUSH
3249: LD_INT 4
3251: ST_TO_ADDR
// uc_nation = 1 ;
3252: LD_ADDR_OWVAR 21
3256: PUSH
3257: LD_INT 1
3259: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
3260: LD_ADDR_EXP 19
3264: PUSH
3265: LD_STRING 03_Cornel
3267: PPUSH
3268: LD_INT 1
3270: PPUSH
3271: CALL 10270 0 2
3275: ST_TO_ADDR
// if not Cornell then
3276: LD_EXP 19
3280: NOT
3281: IFFALSE 3285
// exit ;
3283: GO 3393
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3285: LD_EXP 19
3289: PPUSH
3290: LD_INT 8
3292: PPUSH
3293: LD_INT 0
3295: PPUSH
3296: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3300: LD_EXP 19
3304: PPUSH
3305: LD_INT 350
3307: PPUSH
3308: CALL_OW 234
// if IsInUnit ( JMM ) then
3312: LD_EXP 1
3316: PPUSH
3317: CALL_OW 310
3321: IFFALSE 3364
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3323: LD_EXP 19
3327: PPUSH
3328: LD_EXP 1
3332: PPUSH
3333: CALL_OW 310
3337: PPUSH
3338: CALL_OW 250
3342: PPUSH
3343: LD_EXP 1
3347: PPUSH
3348: CALL_OW 310
3352: PPUSH
3353: CALL_OW 251
3357: PPUSH
3358: CALL_OW 111
3362: GO 3393
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3364: LD_EXP 19
3368: PPUSH
3369: LD_EXP 1
3373: PPUSH
3374: CALL_OW 250
3378: PPUSH
3379: LD_EXP 1
3383: PPUSH
3384: CALL_OW 251
3388: PPUSH
3389: CALL_OW 111
// end ; end_of_file
3393: LD_VAR 0 1
3397: RET
// export function PrepareRussians ; var i , un ; begin
3398: LD_INT 0
3400: PPUSH
3401: PPUSH
3402: PPUSH
// uc_side = 3 ;
3403: LD_ADDR_OWVAR 20
3407: PUSH
3408: LD_INT 3
3410: ST_TO_ADDR
// uc_nation = 3 ;
3411: LD_ADDR_OWVAR 21
3415: PUSH
3416: LD_INT 3
3418: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
3419: LD_ADDR_EXP 25
3423: PUSH
3424: LD_STRING Tsaritsyn
3426: PPUSH
3427: LD_INT 0
3429: PPUSH
3430: CALL 10270 0 2
3434: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3435: LD_EXP 25
3439: PPUSH
3440: LD_INT 3
3442: PPUSH
3443: LD_INT 0
3445: PPUSH
3446: CALL_OW 49
// for i = 1 to 14 do
3450: LD_ADDR_VAR 0 2
3454: PUSH
3455: DOUBLE
3456: LD_INT 1
3458: DEC
3459: ST_TO_ADDR
3460: LD_INT 14
3462: PUSH
3463: FOR_TO
3464: IFFALSE 3550
// begin uc_side = 3 ;
3466: LD_ADDR_OWVAR 20
3470: PUSH
3471: LD_INT 3
3473: ST_TO_ADDR
// uc_nation = 3 ;
3474: LD_ADDR_OWVAR 21
3478: PUSH
3479: LD_INT 3
3481: ST_TO_ADDR
// hc_gallery =  ;
3482: LD_ADDR_OWVAR 33
3486: PUSH
3487: LD_STRING 
3489: ST_TO_ADDR
// hc_name =  ;
3490: LD_ADDR_OWVAR 26
3494: PUSH
3495: LD_STRING 
3497: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3498: LD_INT 0
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: LD_EXP 36
3508: PPUSH
3509: LD_EXP 37
3513: PPUSH
3514: CALL_OW 12
3518: PPUSH
3519: CALL_OW 380
// un = CreateHuman ;
3523: LD_ADDR_VAR 0 3
3527: PUSH
3528: CALL_OW 44
3532: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3533: LD_VAR 0 3
3537: PPUSH
3538: LD_INT 3
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL_OW 49
// end ;
3548: GO 3463
3550: POP
3551: POP
// for i = 1 to 6 do
3552: LD_ADDR_VAR 0 2
3556: PUSH
3557: DOUBLE
3558: LD_INT 1
3560: DEC
3561: ST_TO_ADDR
3562: LD_INT 6
3564: PUSH
3565: FOR_TO
3566: IFFALSE 3652
// begin uc_side = 3 ;
3568: LD_ADDR_OWVAR 20
3572: PUSH
3573: LD_INT 3
3575: ST_TO_ADDR
// uc_nation = 3 ;
3576: LD_ADDR_OWVAR 21
3580: PUSH
3581: LD_INT 3
3583: ST_TO_ADDR
// hc_gallery =  ;
3584: LD_ADDR_OWVAR 33
3588: PUSH
3589: LD_STRING 
3591: ST_TO_ADDR
// hc_name =  ;
3592: LD_ADDR_OWVAR 26
3596: PUSH
3597: LD_STRING 
3599: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3600: LD_INT 0
3602: PPUSH
3603: LD_INT 2
3605: PPUSH
3606: LD_EXP 36
3610: PPUSH
3611: LD_EXP 37
3615: PPUSH
3616: CALL_OW 12
3620: PPUSH
3621: CALL_OW 380
// un = CreateHuman ;
3625: LD_ADDR_VAR 0 3
3629: PUSH
3630: CALL_OW 44
3634: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3635: LD_VAR 0 3
3639: PPUSH
3640: LD_INT 3
3642: PPUSH
3643: LD_INT 0
3645: PPUSH
3646: CALL_OW 49
// end ;
3650: GO 3565
3652: POP
3653: POP
// for i = 1 to 6 do
3654: LD_ADDR_VAR 0 2
3658: PUSH
3659: DOUBLE
3660: LD_INT 1
3662: DEC
3663: ST_TO_ADDR
3664: LD_INT 6
3666: PUSH
3667: FOR_TO
3668: IFFALSE 3754
// begin uc_side = 3 ;
3670: LD_ADDR_OWVAR 20
3674: PUSH
3675: LD_INT 3
3677: ST_TO_ADDR
// uc_nation = 3 ;
3678: LD_ADDR_OWVAR 21
3682: PUSH
3683: LD_INT 3
3685: ST_TO_ADDR
// hc_gallery =  ;
3686: LD_ADDR_OWVAR 33
3690: PUSH
3691: LD_STRING 
3693: ST_TO_ADDR
// hc_name =  ;
3694: LD_ADDR_OWVAR 26
3698: PUSH
3699: LD_STRING 
3701: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3702: LD_INT 0
3704: PPUSH
3705: LD_INT 3
3707: PPUSH
3708: LD_EXP 36
3712: PPUSH
3713: LD_EXP 37
3717: PPUSH
3718: CALL_OW 12
3722: PPUSH
3723: CALL_OW 380
// un = CreateHuman ;
3727: LD_ADDR_VAR 0 3
3731: PUSH
3732: CALL_OW 44
3736: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3737: LD_VAR 0 3
3741: PPUSH
3742: LD_INT 3
3744: PPUSH
3745: LD_INT 0
3747: PPUSH
3748: CALL_OW 49
// end ;
3752: GO 3667
3754: POP
3755: POP
// for i = 1 to 4 do
3756: LD_ADDR_VAR 0 2
3760: PUSH
3761: DOUBLE
3762: LD_INT 1
3764: DEC
3765: ST_TO_ADDR
3766: LD_INT 4
3768: PUSH
3769: FOR_TO
3770: IFFALSE 3856
// begin uc_side = 3 ;
3772: LD_ADDR_OWVAR 20
3776: PUSH
3777: LD_INT 3
3779: ST_TO_ADDR
// uc_nation = 3 ;
3780: LD_ADDR_OWVAR 21
3784: PUSH
3785: LD_INT 3
3787: ST_TO_ADDR
// hc_gallery =  ;
3788: LD_ADDR_OWVAR 33
3792: PUSH
3793: LD_STRING 
3795: ST_TO_ADDR
// hc_name =  ;
3796: LD_ADDR_OWVAR 26
3800: PUSH
3801: LD_STRING 
3803: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3804: LD_INT 0
3806: PPUSH
3807: LD_INT 4
3809: PPUSH
3810: LD_EXP 36
3814: PPUSH
3815: LD_EXP 37
3819: PPUSH
3820: CALL_OW 12
3824: PPUSH
3825: CALL_OW 380
// un = CreateHuman ;
3829: LD_ADDR_VAR 0 3
3833: PUSH
3834: CALL_OW 44
3838: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3839: LD_VAR 0 3
3843: PPUSH
3844: LD_INT 3
3846: PPUSH
3847: LD_INT 0
3849: PPUSH
3850: CALL_OW 49
// end ;
3854: GO 3769
3856: POP
3857: POP
// end ; end_of_file
3858: LD_VAR 0 1
3862: RET
// export function PrepareArabianCommander ; begin
3863: LD_INT 0
3865: PPUSH
// uc_side = 2 ;
3866: LD_ADDR_OWVAR 20
3870: PUSH
3871: LD_INT 2
3873: ST_TO_ADDR
// uc_nation = 2 ;
3874: LD_ADDR_OWVAR 21
3878: PUSH
3879: LD_INT 2
3881: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3882: LD_ADDR_EXP 26
3886: PUSH
3887: LD_STRING Dietrich
3889: PPUSH
3890: CALL_OW 25
3894: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3895: LD_EXP 26
3899: PPUSH
3900: LD_INT 4
3902: PPUSH
3903: LD_INT 0
3905: PPUSH
3906: CALL_OW 49
// end ;
3910: LD_VAR 0 1
3914: RET
// export function PrepareArabian ; var i , un , veh ; begin
3915: LD_INT 0
3917: PPUSH
3918: PPUSH
3919: PPUSH
3920: PPUSH
// uc_side := 2 ;
3921: LD_ADDR_OWVAR 20
3925: PUSH
3926: LD_INT 2
3928: ST_TO_ADDR
// uc_nation := 2 ;
3929: LD_ADDR_OWVAR 21
3933: PUSH
3934: LD_INT 2
3936: ST_TO_ADDR
// if not Ahmed then
3937: LD_EXP 27
3941: NOT
3942: IFFALSE 4010
// begin InitHc ;
3944: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
3948: LD_INT 1
3950: PPUSH
3951: LD_INT 1
3953: PPUSH
3954: LD_EXP 36
3958: PPUSH
3959: LD_EXP 37
3963: PUSH
3964: LD_INT 1
3966: PLUS
3967: PPUSH
3968: CALL_OW 12
3972: PPUSH
3973: CALL_OW 380
// hc_name := Ahmed Abbasid ;
3977: LD_ADDR_OWVAR 26
3981: PUSH
3982: LD_STRING Ahmed Abbasid
3984: ST_TO_ADDR
// Ahmed := CreateHuman ;
3985: LD_ADDR_EXP 27
3989: PUSH
3990: CALL_OW 44
3994: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
3995: LD_EXP 27
3999: PPUSH
4000: LD_INT 4
4002: PPUSH
4003: LD_INT 0
4005: PPUSH
4006: CALL_OW 49
// end ; for i = 1 to 4 do
4010: LD_ADDR_VAR 0 2
4014: PUSH
4015: DOUBLE
4016: LD_INT 1
4018: DEC
4019: ST_TO_ADDR
4020: LD_INT 4
4022: PUSH
4023: FOR_TO
4024: IFFALSE 4110
// begin uc_side = 2 ;
4026: LD_ADDR_OWVAR 20
4030: PUSH
4031: LD_INT 2
4033: ST_TO_ADDR
// uc_nation = 2 ;
4034: LD_ADDR_OWVAR 21
4038: PUSH
4039: LD_INT 2
4041: ST_TO_ADDR
// hc_gallery =  ;
4042: LD_ADDR_OWVAR 33
4046: PUSH
4047: LD_STRING 
4049: ST_TO_ADDR
// hc_name =  ;
4050: LD_ADDR_OWVAR 26
4054: PUSH
4055: LD_STRING 
4057: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4058: LD_INT 0
4060: PPUSH
4061: LD_INT 2
4063: PPUSH
4064: LD_EXP 36
4068: PPUSH
4069: LD_EXP 37
4073: PPUSH
4074: CALL_OW 12
4078: PPUSH
4079: CALL_OW 380
// un = CreateHuman ;
4083: LD_ADDR_VAR 0 3
4087: PUSH
4088: CALL_OW 44
4092: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4093: LD_VAR 0 3
4097: PPUSH
4098: LD_INT 4
4100: PPUSH
4101: LD_INT 0
4103: PPUSH
4104: CALL_OW 49
// end ;
4108: GO 4023
4110: POP
4111: POP
// for i = 1 to 5 do
4112: LD_ADDR_VAR 0 2
4116: PUSH
4117: DOUBLE
4118: LD_INT 1
4120: DEC
4121: ST_TO_ADDR
4122: LD_INT 5
4124: PUSH
4125: FOR_TO
4126: IFFALSE 4212
// begin uc_side = 2 ;
4128: LD_ADDR_OWVAR 20
4132: PUSH
4133: LD_INT 2
4135: ST_TO_ADDR
// uc_nation = 2 ;
4136: LD_ADDR_OWVAR 21
4140: PUSH
4141: LD_INT 2
4143: ST_TO_ADDR
// hc_gallery =  ;
4144: LD_ADDR_OWVAR 33
4148: PUSH
4149: LD_STRING 
4151: ST_TO_ADDR
// hc_name =  ;
4152: LD_ADDR_OWVAR 26
4156: PUSH
4157: LD_STRING 
4159: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4160: LD_INT 0
4162: PPUSH
4163: LD_INT 1
4165: PPUSH
4166: LD_EXP 36
4170: PPUSH
4171: LD_EXP 37
4175: PPUSH
4176: CALL_OW 12
4180: PPUSH
4181: CALL_OW 380
// un = CreateHuman ;
4185: LD_ADDR_VAR 0 3
4189: PUSH
4190: CALL_OW 44
4194: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4195: LD_VAR 0 3
4199: PPUSH
4200: LD_INT 4
4202: PPUSH
4203: LD_INT 0
4205: PPUSH
4206: CALL_OW 49
// end ;
4210: GO 4125
4212: POP
4213: POP
// for i = 1 to 4 do
4214: LD_ADDR_VAR 0 2
4218: PUSH
4219: DOUBLE
4220: LD_INT 1
4222: DEC
4223: ST_TO_ADDR
4224: LD_INT 4
4226: PUSH
4227: FOR_TO
4228: IFFALSE 4314
// begin uc_side = 2 ;
4230: LD_ADDR_OWVAR 20
4234: PUSH
4235: LD_INT 2
4237: ST_TO_ADDR
// uc_nation = 2 ;
4238: LD_ADDR_OWVAR 21
4242: PUSH
4243: LD_INT 2
4245: ST_TO_ADDR
// hc_gallery =  ;
4246: LD_ADDR_OWVAR 33
4250: PUSH
4251: LD_STRING 
4253: ST_TO_ADDR
// hc_name =  ;
4254: LD_ADDR_OWVAR 26
4258: PUSH
4259: LD_STRING 
4261: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4262: LD_INT 0
4264: PPUSH
4265: LD_INT 4
4267: PPUSH
4268: LD_EXP 36
4272: PPUSH
4273: LD_EXP 37
4277: PPUSH
4278: CALL_OW 12
4282: PPUSH
4283: CALL_OW 380
// un = CreateHuman ;
4287: LD_ADDR_VAR 0 3
4291: PUSH
4292: CALL_OW 44
4296: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4297: LD_VAR 0 3
4301: PPUSH
4302: LD_INT 4
4304: PPUSH
4305: LD_INT 0
4307: PPUSH
4308: CALL_OW 49
// end ;
4312: GO 4227
4314: POP
4315: POP
// for i = 1 to 2 do
4316: LD_ADDR_VAR 0 2
4320: PUSH
4321: DOUBLE
4322: LD_INT 1
4324: DEC
4325: ST_TO_ADDR
4326: LD_INT 2
4328: PUSH
4329: FOR_TO
4330: IFFALSE 4460
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4332: LD_ADDR_VAR 0 4
4336: PUSH
4337: LD_INT 22
4339: PUSH
4340: LD_INT 2
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: PUSH
4347: LD_INT 21
4349: PUSH
4350: LD_INT 2
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PUSH
4357: LD_INT 58
4359: PUSH
4360: EMPTY
4361: LIST
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: LIST
4367: PPUSH
4368: CALL_OW 69
4372: ST_TO_ADDR
// uc_side = 2 ;
4373: LD_ADDR_OWVAR 20
4377: PUSH
4378: LD_INT 2
4380: ST_TO_ADDR
// uc_nation = 2 ;
4381: LD_ADDR_OWVAR 21
4385: PUSH
4386: LD_INT 2
4388: ST_TO_ADDR
// hc_gallery =  ;
4389: LD_ADDR_OWVAR 33
4393: PUSH
4394: LD_STRING 
4396: ST_TO_ADDR
// hc_name =  ;
4397: LD_ADDR_OWVAR 26
4401: PUSH
4402: LD_STRING 
4404: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4405: LD_INT 0
4407: PPUSH
4408: LD_INT 3
4410: PPUSH
4411: LD_EXP 36
4415: PPUSH
4416: LD_EXP 37
4420: PPUSH
4421: CALL_OW 12
4425: PPUSH
4426: CALL_OW 380
// un = CreateHuman ;
4430: LD_ADDR_VAR 0 3
4434: PUSH
4435: CALL_OW 44
4439: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4440: LD_VAR 0 3
4444: PPUSH
4445: LD_VAR 0 4
4449: PUSH
4450: LD_INT 1
4452: ARRAY
4453: PPUSH
4454: CALL_OW 52
// end ;
4458: GO 4329
4460: POP
4461: POP
// end ;
4462: LD_VAR 0 1
4466: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
4467: LD_INT 0
4469: PPUSH
4470: PPUSH
4471: PPUSH
4472: PPUSH
4473: PPUSH
4474: PPUSH
// for i := 1 to 2 do
4475: LD_ADDR_VAR 0 2
4479: PUSH
4480: DOUBLE
4481: LD_INT 1
4483: DEC
4484: ST_TO_ADDR
4485: LD_INT 2
4487: PUSH
4488: FOR_TO
4489: IFFALSE 4615
// begin uc_side = 5 ;
4491: LD_ADDR_OWVAR 20
4495: PUSH
4496: LD_INT 5
4498: ST_TO_ADDR
// uc_nation = 2 ;
4499: LD_ADDR_OWVAR 21
4503: PUSH
4504: LD_INT 2
4506: ST_TO_ADDR
// vc_chassis := 31 ;
4507: LD_ADDR_OWVAR 37
4511: PUSH
4512: LD_INT 31
4514: ST_TO_ADDR
// vc_control := control_rider ;
4515: LD_ADDR_OWVAR 38
4519: PUSH
4520: LD_INT 4
4522: ST_TO_ADDR
// animal := CreateVehicle ;
4523: LD_ADDR_VAR 0 3
4527: PUSH
4528: CALL_OW 45
4532: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
4533: LD_VAR 0 3
4537: PPUSH
4538: LD_INT 7
4540: PPUSH
4541: LD_INT 0
4543: PPUSH
4544: CALL_OW 49
// hc_gallery =  ;
4548: LD_ADDR_OWVAR 33
4552: PUSH
4553: LD_STRING 
4555: ST_TO_ADDR
// hc_name =  ;
4556: LD_ADDR_OWVAR 26
4560: PUSH
4561: LD_STRING 
4563: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4564: LD_INT 0
4566: PPUSH
4567: LD_INT 11
4569: PPUSH
4570: LD_EXP 36
4574: PPUSH
4575: LD_EXP 37
4579: PPUSH
4580: CALL_OW 12
4584: PPUSH
4585: CALL_OW 380
// un = CreateHuman ;
4589: LD_ADDR_VAR 0 4
4593: PUSH
4594: CALL_OW 44
4598: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
4599: LD_VAR 0 4
4603: PPUSH
4604: LD_VAR 0 3
4608: PPUSH
4609: CALL_OW 52
// end ;
4613: GO 4488
4615: POP
4616: POP
// repeat wait ( 0 0$1 ) ;
4617: LD_INT 35
4619: PPUSH
4620: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
4624: LD_ADDR_VAR 0 5
4628: PUSH
4629: LD_INT 22
4631: PUSH
4632: LD_INT 1
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: PPUSH
4639: CALL_OW 69
4643: PPUSH
4644: LD_VAR 0 2
4648: PPUSH
4649: CALL_OW 74
4653: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4654: LD_ADDR_VAR 0 6
4658: PUSH
4659: LD_INT 22
4661: PUSH
4662: LD_INT 1
4664: PUSH
4665: EMPTY
4666: LIST
4667: LIST
4668: PUSH
4669: LD_INT 2
4671: PUSH
4672: LD_INT 59
4674: PUSH
4675: EMPTY
4676: LIST
4677: PUSH
4678: LD_INT 21
4680: PUSH
4681: LD_INT 1
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: PUSH
4688: LD_INT 21
4690: PUSH
4691: LD_INT 2
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: PUSH
4708: EMPTY
4709: LIST
4710: PPUSH
4711: CALL_OW 69
4715: PPUSH
4716: LD_VAR 0 2
4720: PPUSH
4721: CALL_OW 74
4725: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4726: LD_ADDR_VAR 0 2
4730: PUSH
4731: LD_INT 22
4733: PUSH
4734: LD_INT 5
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: PUSH
4741: LD_INT 25
4743: PUSH
4744: LD_INT 11
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PPUSH
4755: CALL_OW 69
4759: PUSH
4760: FOR_IN
4761: IFFALSE 4831
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4763: LD_VAR 0 2
4767: PPUSH
4768: LD_VAR 0 5
4772: PPUSH
4773: CALL_OW 296
4777: PUSH
4778: LD_INT 8
4780: PLUS
4781: PUSH
4782: LD_VAR 0 2
4786: PPUSH
4787: LD_VAR 0 6
4791: PPUSH
4792: CALL_OW 296
4796: LESS
4797: IFFALSE 4815
// ComAttackUnit ( i , target1 ) else
4799: LD_VAR 0 2
4803: PPUSH
4804: LD_VAR 0 5
4808: PPUSH
4809: CALL_OW 115
4813: GO 4829
// ComAttackUnit ( i , target2 ) ;
4815: LD_VAR 0 2
4819: PPUSH
4820: LD_VAR 0 6
4824: PPUSH
4825: CALL_OW 115
// end ;
4829: GO 4760
4831: POP
4832: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
4833: LD_INT 22
4835: PUSH
4836: LD_INT 5
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PUSH
4843: LD_INT 25
4845: PUSH
4846: LD_INT 11
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PPUSH
4857: CALL_OW 69
4861: PUSH
4862: LD_INT 0
4864: EQUAL
4865: PUSH
4866: LD_INT 22
4868: PUSH
4869: LD_INT 1
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: PUSH
4881: LD_INT 0
4883: EQUAL
4884: OR
4885: IFFALSE 4617
// end ; end_of_file
4887: LD_VAR 0 1
4891: RET
// every 1 do
4892: GO 4894
4894: DISABLE
// begin InGameOn ;
4895: CALL_OW 8
// RevealFogArea ( 1 , EpsilonTerrain ) ;
4899: LD_INT 1
4901: PPUSH
4902: LD_INT 19
4904: PPUSH
4905: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
4909: LD_EXP 11
4913: PPUSH
4914: CALL_OW 87
// wait ( 0 0$3 ) ;
4918: LD_INT 105
4920: PPUSH
4921: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
4925: LD_EXP 1
4929: PPUSH
4930: CALL_OW 310
4934: PPUSH
4935: CALL_OW 85
// Wait ( 0 0$1 ) ;
4939: LD_INT 35
4941: PPUSH
4942: CALL_OW 67
// if IsOk ( Gary ) then
4946: LD_EXP 10
4950: PPUSH
4951: CALL_OW 302
4955: IFFALSE 4993
// begin Say ( Gary , D2-Gary-1 ) ;
4957: LD_EXP 10
4961: PPUSH
4962: LD_STRING D2-Gary-1
4964: PPUSH
4965: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
4969: LD_EXP 1
4973: PPUSH
4974: LD_STRING D2-JMM-1
4976: PPUSH
4977: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
4981: LD_EXP 10
4985: PPUSH
4986: LD_STRING D2-Gary-2
4988: PPUSH
4989: CALL_OW 88
// end ; InGameOff ;
4993: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
4997: LD_STRING M1
4999: PPUSH
5000: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
5004: LD_INT 38
5006: PPUSH
5007: LD_INT 1
5009: PPUSH
5010: LD_INT 100
5012: PPUSH
5013: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
5017: LD_INT 47
5019: PPUSH
5020: LD_INT 1
5022: PPUSH
5023: LD_INT 50
5025: PPUSH
5026: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5030: LD_INT 47
5032: PPUSH
5033: LD_INT 3
5035: PPUSH
5036: LD_INT 50
5038: PPUSH
5039: CALL_OW 291
// SaveForQuickRestart ;
5043: CALL_OW 22
// end ;
5047: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
5048: LD_EXP 1
5052: PPUSH
5053: LD_EXP 11
5057: PPUSH
5058: CALL_OW 296
5062: PUSH
5063: LD_INT 15
5065: LESS
5066: IFFALSE 5549
5068: GO 5070
5070: DISABLE
// begin wait ( 0 0$3 ) ;
5071: LD_INT 105
5073: PPUSH
5074: CALL_OW 67
// InGameOn ;
5078: CALL_OW 8
// ComExitVehicle ( JMM ) ;
5082: LD_EXP 1
5086: PPUSH
5087: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5091: LD_EXP 1
5095: PPUSH
5096: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
5100: LD_EXP 1
5104: PPUSH
5105: LD_EXP 11
5109: PPUSH
5110: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
5114: LD_INT 35
5116: PPUSH
5117: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5121: LD_EXP 11
5125: PUSH
5126: LD_EXP 13
5130: PUSH
5131: LD_EXP 12
5135: PUSH
5136: LD_EXP 14
5140: PUSH
5141: LD_EXP 8
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: PPUSH
5153: LD_EXP 1
5157: PPUSH
5158: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
5162: LD_EXP 1
5166: PPUSH
5167: LD_EXP 11
5171: PPUSH
5172: CALL_OW 296
5176: PUSH
5177: LD_INT 5
5179: LESS
5180: IFFALSE 5114
// ComTurnUnit ( JMM , Simms ) ;
5182: LD_EXP 1
5186: PPUSH
5187: LD_EXP 11
5191: PPUSH
5192: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5196: LD_EXP 11
5200: PUSH
5201: LD_EXP 13
5205: PUSH
5206: LD_EXP 12
5210: PUSH
5211: LD_EXP 14
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: PPUSH
5222: LD_EXP 1
5226: PPUSH
5227: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5231: LD_EXP 1
5235: PUSH
5236: LD_EXP 11
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PPUSH
5245: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5249: LD_EXP 11
5253: PPUSH
5254: LD_STRING D2a-Sim-1
5256: PPUSH
5257: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5261: LD_EXP 1
5265: PPUSH
5266: LD_STRING D2a-JMM-1
5268: PPUSH
5269: CALL_OW 88
// if IsOk ( Joan ) then
5273: LD_EXP 13
5277: PPUSH
5278: CALL_OW 302
5282: IFFALSE 5334
// begin ComTurnUnit ( JMM , Joan ) ;
5284: LD_EXP 1
5288: PPUSH
5289: LD_EXP 13
5293: PPUSH
5294: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5298: LD_EXP 13
5302: PPUSH
5303: LD_STRING D2b-Joan-1
5305: PPUSH
5306: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5310: LD_EXP 1
5314: PPUSH
5315: LD_STRING D2b-JMM-1
5317: PPUSH
5318: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5322: LD_EXP 13
5326: PPUSH
5327: LD_STRING D2b-Joan-2
5329: PPUSH
5330: CALL_OW 88
// end ; if IsOk ( Denis ) then
5334: LD_EXP 12
5338: PPUSH
5339: CALL_OW 302
5343: IFFALSE 5371
// begin ComTurnUnit ( JMM , Denis ) ;
5345: LD_EXP 1
5349: PPUSH
5350: LD_EXP 12
5354: PPUSH
5355: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
5359: LD_EXP 12
5363: PPUSH
5364: LD_STRING D2c-Den-1
5366: PPUSH
5367: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
5371: LD_EXP 8
5375: PPUSH
5376: CALL_OW 302
5380: PUSH
5381: LD_STRING 08_Kikuchi
5383: PPUSH
5384: CALL_OW 28
5388: NOT
5389: AND
5390: IFFALSE 5459
// begin repeat wait ( 0 0$1 ) ;
5392: LD_INT 35
5394: PPUSH
5395: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
5399: LD_EXP 8
5403: PPUSH
5404: LD_EXP 1
5408: PPUSH
5409: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
5413: LD_EXP 1
5417: PPUSH
5418: LD_EXP 8
5422: PPUSH
5423: CALL_OW 296
5427: PUSH
5428: LD_INT 5
5430: LESS
5431: IFFALSE 5392
// ComTurnUnit ( JMM , Kikuchi ) ;
5433: LD_EXP 1
5437: PPUSH
5438: LD_EXP 8
5442: PPUSH
5443: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
5447: LD_EXP 8
5451: PPUSH
5452: LD_STRING D3b-Yam-1
5454: PPUSH
5455: CALL_OW 88
// end ; if IsOk ( Khatam ) then
5459: LD_EXP 14
5463: PPUSH
5464: CALL_OW 302
5468: IFFALSE 5508
// begin ComTurnUnit ( JMM , Khatam ) ;
5470: LD_EXP 1
5474: PPUSH
5475: LD_EXP 14
5479: PPUSH
5480: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
5484: LD_EXP 1
5488: PPUSH
5489: LD_STRING D2c-JMM-1
5491: PPUSH
5492: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
5496: LD_EXP 14
5500: PPUSH
5501: LD_STRING D2c-Khat-1
5503: PPUSH
5504: CALL_OW 88
// end ; InGameOff ;
5508: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5512: LD_INT 22
5514: PUSH
5515: LD_INT 4
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PPUSH
5522: CALL_OW 69
5526: PPUSH
5527: LD_INT 1
5529: PPUSH
5530: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
5534: LD_STRING M1a
5536: PPUSH
5537: CALL_OW 337
// joinEpsilon = 1 ;
5541: LD_ADDR_EXP 29
5545: PUSH
5546: LD_INT 1
5548: ST_TO_ADDR
// end ;
5549: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do
5550: LD_INT 38
5552: PPUSH
5553: LD_INT 1
5555: PPUSH
5556: CALL_OW 289
5560: PUSH
5561: LD_INT 0
5563: EQUAL
5564: PUSH
5565: LD_INT 47
5567: PPUSH
5568: LD_INT 1
5570: PPUSH
5571: CALL_OW 289
5575: PUSH
5576: LD_INT 0
5578: EQUAL
5579: AND
5580: PUSH
5581: LD_INT 47
5583: PPUSH
5584: LD_INT 2
5586: PPUSH
5587: CALL_OW 289
5591: PUSH
5592: LD_INT 0
5594: EQUAL
5595: AND
5596: IFFALSE 5621
5598: GO 5600
5600: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 62 , 6 ) ;
5601: LD_INT 38
5603: PUSH
5604: LD_INT 47
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: PPUSH
5611: LD_INT 62
5613: PPUSH
5614: LD_INT 6
5616: PPUSH
5617: CALL_OW 111
5621: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
5622: LD_EXP 63
5626: PUSH
5627: LD_INT 1
5629: EQUAL
5630: IFFALSE 6762
5632: GO 5634
5634: DISABLE
5635: LD_INT 0
5637: PPUSH
5638: PPUSH
5639: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5640: LD_ADDR_VAR 0 1
5644: PUSH
5645: LD_INT 22
5647: PUSH
5648: LD_INT 1
5650: PUSH
5651: EMPTY
5652: LIST
5653: LIST
5654: PUSH
5655: LD_INT 25
5657: PUSH
5658: LD_INT 4
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: PUSH
5665: LD_INT 26
5667: PUSH
5668: LD_INT 1
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: LIST
5679: PPUSH
5680: CALL_OW 69
5684: PUSH
5685: LD_EXP 1
5689: PUSH
5690: LD_EXP 2
5694: PUSH
5695: LD_EXP 3
5699: PUSH
5700: LD_EXP 4
5704: PUSH
5705: LD_EXP 5
5709: PUSH
5710: LD_EXP 6
5714: PUSH
5715: LD_EXP 7
5719: PUSH
5720: LD_EXP 8
5724: PUSH
5725: LD_EXP 9
5729: PUSH
5730: LD_EXP 10
5734: PUSH
5735: LD_EXP 11
5739: PUSH
5740: LD_EXP 12
5744: PUSH
5745: LD_EXP 13
5749: PUSH
5750: LD_EXP 14
5754: PUSH
5755: LD_EXP 15
5759: PUSH
5760: LD_EXP 16
5764: PUSH
5765: LD_EXP 17
5769: PUSH
5770: LD_EXP 18
5774: PUSH
5775: LD_EXP 19
5779: PUSH
5780: LD_EXP 24
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: LIST
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: LIST
5806: DIFF
5807: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5808: LD_ADDR_VAR 0 2
5812: PUSH
5813: LD_INT 22
5815: PUSH
5816: LD_INT 1
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PUSH
5823: LD_INT 26
5825: PUSH
5826: LD_INT 1
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: PUSH
5833: LD_INT 2
5835: PUSH
5836: LD_INT 25
5838: PUSH
5839: LD_INT 1
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: PUSH
5846: LD_INT 25
5848: PUSH
5849: LD_INT 2
5851: PUSH
5852: EMPTY
5853: LIST
5854: LIST
5855: PUSH
5856: LD_INT 25
5858: PUSH
5859: LD_INT 3
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: LIST
5876: PPUSH
5877: CALL_OW 69
5881: PUSH
5882: LD_EXP 1
5886: PUSH
5887: LD_EXP 2
5891: PUSH
5892: LD_EXP 3
5896: PUSH
5897: LD_EXP 4
5901: PUSH
5902: LD_EXP 5
5906: PUSH
5907: LD_EXP 6
5911: PUSH
5912: LD_EXP 7
5916: PUSH
5917: LD_EXP 8
5921: PUSH
5922: LD_EXP 9
5926: PUSH
5927: LD_EXP 10
5931: PUSH
5932: LD_EXP 11
5936: PUSH
5937: LD_EXP 12
5941: PUSH
5942: LD_EXP 13
5946: PUSH
5947: LD_EXP 14
5951: PUSH
5952: LD_EXP 15
5956: PUSH
5957: LD_EXP 16
5961: PUSH
5962: LD_EXP 17
5966: PUSH
5967: LD_EXP 18
5971: PUSH
5972: LD_EXP 19
5976: PUSH
5977: LD_EXP 24
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: DIFF
6004: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
6005: LD_EXP 10
6009: PUSH
6010: LD_VAR 0 2
6014: OR
6015: PUSH
6016: LD_EXP 17
6020: PUSH
6021: LD_VAR 0 1
6025: OR
6026: AND
6027: IFFALSE 6246
// begin DialogueOn ;
6029: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
6033: LD_EXP 17
6037: PPUSH
6038: CALL_OW 302
6042: IFFALSE 6058
// Say ( DeltaDoctor , D3-Sci1-1 ) else
6044: LD_EXP 17
6048: PPUSH
6049: LD_STRING D3-Sci1-1
6051: PPUSH
6052: CALL_OW 88
6056: GO 6070
// Say ( tmp1 , D3-Sci1-1 ) ;
6058: LD_VAR 0 1
6062: PPUSH
6063: LD_STRING D3-Sci1-1
6065: PPUSH
6066: CALL_OW 88
// if IsOk ( Gary ) then
6070: LD_EXP 10
6074: PPUSH
6075: CALL_OW 302
6079: IFFALSE 6095
// Say ( Gary , D3-Gary-1 ) else
6081: LD_EXP 10
6085: PPUSH
6086: LD_STRING D3-Gary-1
6088: PPUSH
6089: CALL_OW 88
6093: GO 6107
// Say ( tmp2 , D3-Gary-1 ) ;
6095: LD_VAR 0 2
6099: PPUSH
6100: LD_STRING D3-Gary-1
6102: PPUSH
6103: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6107: LD_EXP 17
6111: PPUSH
6112: CALL_OW 302
6116: IFFALSE 6132
// Say ( DeltaDoctor , D3-Sci1-2 ) else
6118: LD_EXP 17
6122: PPUSH
6123: LD_STRING D3-Sci1-2
6125: PPUSH
6126: CALL_OW 88
6130: GO 6144
// Say ( tmp1 , D3-Sci1-2 ) ;
6132: LD_VAR 0 1
6136: PPUSH
6137: LD_STRING D3-Sci1-2
6139: PPUSH
6140: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6144: LD_EXP 1
6148: PPUSH
6149: LD_STRING D3-JMM-2
6151: PPUSH
6152: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6156: LD_EXP 17
6160: PPUSH
6161: CALL_OW 302
6165: IFFALSE 6181
// Say ( DeltaDoctor , D3-Sci1-3 ) else
6167: LD_EXP 17
6171: PPUSH
6172: LD_STRING D3-Sci1-3
6174: PPUSH
6175: CALL_OW 88
6179: GO 6193
// Say ( tmp1 , D3-Sci1-3 ) ;
6181: LD_VAR 0 1
6185: PPUSH
6186: LD_STRING D3-Sci1-3
6188: PPUSH
6189: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
6193: LD_EXP 1
6197: PPUSH
6198: LD_STRING D3-JMM-3
6200: PPUSH
6201: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6205: LD_EXP 17
6209: PPUSH
6210: CALL_OW 302
6214: IFFALSE 6230
// Say ( DeltaDoctor , D3-Sci1-4 ) else
6216: LD_EXP 17
6220: PPUSH
6221: LD_STRING D3-Sci1-4
6223: PPUSH
6224: CALL_OW 88
6228: GO 6242
// Say ( tmp1 , D3-Sci1-4 ) ;
6230: LD_VAR 0 1
6234: PPUSH
6235: LD_STRING D3-Sci1-4
6237: PPUSH
6238: CALL_OW 88
// DialogueOff ;
6242: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
6246: LD_INT 12
6248: PPUSH
6249: LD_INT 1
6251: PPUSH
6252: LD_INT 1
6254: PPUSH
6255: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
6259: LD_INT 32
6261: PPUSH
6262: LD_INT 1
6264: PPUSH
6265: LD_INT 1
6267: PPUSH
6268: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
6272: LD_INT 12
6274: PPUSH
6275: LD_INT 1
6277: PPUSH
6278: LD_INT 1
6280: PPUSH
6281: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
6285: LD_INT 33
6287: PPUSH
6288: LD_INT 1
6290: PPUSH
6291: LD_INT 1
6293: PPUSH
6294: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
6298: LD_STRING M2
6300: PPUSH
6301: CALL_OW 337
// wait ( 3 3$0 ) ;
6305: LD_INT 6300
6307: PPUSH
6308: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6312: LD_INT 35
6314: PPUSH
6315: CALL_OW 67
// until not InBattle ( 1 ) ;
6319: LD_INT 1
6321: PPUSH
6322: CALL_OW 463
6326: NOT
6327: IFFALSE 6312
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
6329: LD_EXP 11
6333: PPUSH
6334: CALL_OW 302
6338: PUSH
6339: LD_EXP 17
6343: PPUSH
6344: CALL_OW 302
6348: AND
6349: IFFALSE 6518
// begin DialogueOn ;
6351: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6355: LD_EXP 11
6359: PPUSH
6360: LD_STRING D3a-Sim-1
6362: PPUSH
6363: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
6367: LD_EXP 17
6371: PPUSH
6372: LD_STRING D3a-Sci1-1
6374: PPUSH
6375: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6379: LD_EXP 11
6383: PPUSH
6384: LD_STRING D3a-Sim-2
6386: PPUSH
6387: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
6391: LD_EXP 17
6395: PPUSH
6396: LD_STRING D3a-Sci1-2
6398: PPUSH
6399: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6403: LD_EXP 11
6407: PPUSH
6408: LD_STRING D3a-Sim-3
6410: PPUSH
6411: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
6415: LD_EXP 17
6419: PPUSH
6420: LD_STRING D3a-Sci1-3
6422: PPUSH
6423: CALL_OW 88
// if IsOK ( Joan ) then
6427: LD_EXP 13
6431: PPUSH
6432: CALL_OW 302
6436: IFFALSE 6452
// Say ( Simms , D3a-Sim-4 ) else
6438: LD_EXP 11
6442: PPUSH
6443: LD_STRING D3a-Sim-4
6445: PPUSH
6446: CALL_OW 88
6450: GO 6464
// Say ( Simms , D3a-Sim-4a ) ;
6452: LD_EXP 11
6456: PPUSH
6457: LD_STRING D3a-Sim-4a
6459: PPUSH
6460: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
6464: LD_EXP 17
6468: PPUSH
6469: LD_STRING D3a-Sci1-4
6471: PPUSH
6472: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6476: LD_EXP 11
6480: PPUSH
6481: LD_STRING D3a-Sim-5
6483: PPUSH
6484: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
6488: LD_EXP 17
6492: PPUSH
6493: LD_STRING D3a-Sci1-5
6495: PPUSH
6496: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6500: LD_EXP 11
6504: PPUSH
6505: LD_STRING D3a-Sim-6
6507: PPUSH
6508: CALL_OW 88
// DialogueOff ;
6512: CALL_OW 7
// end else
6516: GO 6762
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
6518: LD_ADDR_VAR 0 3
6522: PUSH
6523: LD_INT 22
6525: PUSH
6526: LD_INT 1
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: PUSH
6533: LD_INT 25
6535: PUSH
6536: LD_INT 4
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: PPUSH
6547: CALL_OW 69
6551: PUSH
6552: LD_EXP 11
6556: PUSH
6557: LD_EXP 14
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: DIFF
6566: ST_TO_ADDR
// if tmp3 > 0 then
6567: LD_VAR 0 3
6571: PUSH
6572: LD_INT 0
6574: GREATER
6575: IFFALSE 6762
// begin DialogueOn ;
6577: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6581: LD_EXP 11
6585: PPUSH
6586: LD_STRING D3a-Sim-1
6588: PPUSH
6589: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
6593: LD_VAR 0 3
6597: PUSH
6598: LD_INT 1
6600: ARRAY
6601: PPUSH
6602: LD_STRING D3a-Sci1-1
6604: PPUSH
6605: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6609: LD_EXP 11
6613: PPUSH
6614: LD_STRING D3a-Sim-2
6616: PPUSH
6617: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
6621: LD_VAR 0 3
6625: PUSH
6626: LD_INT 1
6628: ARRAY
6629: PPUSH
6630: LD_STRING D3a-Sci1-2
6632: PPUSH
6633: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6637: LD_EXP 11
6641: PPUSH
6642: LD_STRING D3a-Sim-3
6644: PPUSH
6645: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
6649: LD_VAR 0 3
6653: PUSH
6654: LD_INT 1
6656: ARRAY
6657: PPUSH
6658: LD_STRING D3a-Sci1-3
6660: PPUSH
6661: CALL_OW 88
// if IsOK ( Joan ) then
6665: LD_EXP 13
6669: PPUSH
6670: CALL_OW 302
6674: IFFALSE 6690
// Say ( Simms , D3a-Sim-4 ) else
6676: LD_EXP 11
6680: PPUSH
6681: LD_STRING D3a-Sim-4
6683: PPUSH
6684: CALL_OW 88
6688: GO 6702
// Say ( Simms , D3a-Sim-4a ) ;
6690: LD_EXP 11
6694: PPUSH
6695: LD_STRING D3a-Sim-4a
6697: PPUSH
6698: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
6702: LD_VAR 0 3
6706: PUSH
6707: LD_INT 1
6709: ARRAY
6710: PPUSH
6711: LD_STRING D3a-Sci1-4
6713: PPUSH
6714: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6718: LD_EXP 11
6722: PPUSH
6723: LD_STRING D3a-Sim-5
6725: PPUSH
6726: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
6730: LD_VAR 0 3
6734: PUSH
6735: LD_INT 1
6737: ARRAY
6738: PPUSH
6739: LD_STRING D3a-Sci1-5
6741: PPUSH
6742: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6746: LD_EXP 11
6750: PPUSH
6751: LD_STRING D3a-Sim-6
6753: PPUSH
6754: CALL_OW 88
// DialogueOff ;
6758: CALL_OW 7
// end ; end ; end ;
6762: PPOPN 3
6764: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
6765: LD_EXP 29
6769: PUSH
6770: LD_INT 1
6772: EQUAL
6773: IFFALSE 7093
6775: GO 6777
6777: DISABLE
6778: LD_INT 0
6780: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
6781: LD_EXP 18
6785: PPUSH
6786: LD_STRING D4-FSol1-1
6788: PPUSH
6789: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
6793: LD_STRING M3
6795: PPUSH
6796: CALL_OW 337
// PrepareRussians ;
6800: CALL 3398 0 0
// rnd = Rand ( 1 , 100 ) ;
6804: LD_ADDR_VAR 0 1
6808: PUSH
6809: LD_INT 1
6811: PPUSH
6812: LD_INT 100
6814: PPUSH
6815: CALL_OW 12
6819: ST_TO_ADDR
// if difficulty = 1 then
6820: LD_OWVAR 67
6824: PUSH
6825: LD_INT 1
6827: EQUAL
6828: IFFALSE 6911
// begin if rnd > 0 and rnd < 51 then
6830: LD_VAR 0 1
6834: PUSH
6835: LD_INT 0
6837: GREATER
6838: PUSH
6839: LD_VAR 0 1
6843: PUSH
6844: LD_INT 51
6846: LESS
6847: AND
6848: IFFALSE 6857
// BuildRussianBase ( 2 ) ;
6850: LD_INT 2
6852: PPUSH
6853: CALL 10985 0 1
// if rnd > 50 and rnd < 81 then
6857: LD_VAR 0 1
6861: PUSH
6862: LD_INT 50
6864: GREATER
6865: PUSH
6866: LD_VAR 0 1
6870: PUSH
6871: LD_INT 81
6873: LESS
6874: AND
6875: IFFALSE 6884
// BuildRussianBase ( 1 ) ;
6877: LD_INT 1
6879: PPUSH
6880: CALL 10985 0 1
// if rnd > 80 and rnd < 101 then
6884: LD_VAR 0 1
6888: PUSH
6889: LD_INT 80
6891: GREATER
6892: PUSH
6893: LD_VAR 0 1
6897: PUSH
6898: LD_INT 101
6900: LESS
6901: AND
6902: IFFALSE 6911
// BuildRussianBase ( 3 ) ;
6904: LD_INT 3
6906: PPUSH
6907: CALL 10985 0 1
// end ; if difficulty = 2 then
6911: LD_OWVAR 67
6915: PUSH
6916: LD_INT 2
6918: EQUAL
6919: IFFALSE 7002
// begin if rnd > 0 and rnd < 61 then
6921: LD_VAR 0 1
6925: PUSH
6926: LD_INT 0
6928: GREATER
6929: PUSH
6930: LD_VAR 0 1
6934: PUSH
6935: LD_INT 61
6937: LESS
6938: AND
6939: IFFALSE 6948
// BuildRussianBase ( 2 ) ;
6941: LD_INT 2
6943: PPUSH
6944: CALL 10985 0 1
// if rnd > 60 and rnd < 81 then
6948: LD_VAR 0 1
6952: PUSH
6953: LD_INT 60
6955: GREATER
6956: PUSH
6957: LD_VAR 0 1
6961: PUSH
6962: LD_INT 81
6964: LESS
6965: AND
6966: IFFALSE 6975
// BuildRussianBase ( 1 ) ;
6968: LD_INT 1
6970: PPUSH
6971: CALL 10985 0 1
// if rnd > 80 and rnd < 101 then
6975: LD_VAR 0 1
6979: PUSH
6980: LD_INT 80
6982: GREATER
6983: PUSH
6984: LD_VAR 0 1
6988: PUSH
6989: LD_INT 101
6991: LESS
6992: AND
6993: IFFALSE 7002
// BuildRussianBase ( 3 ) ;
6995: LD_INT 3
6997: PPUSH
6998: CALL 10985 0 1
// end ; if difficulty = 3 then
7002: LD_OWVAR 67
7006: PUSH
7007: LD_INT 3
7009: EQUAL
7010: IFFALSE 7093
// begin if rnd > 0 and rnd < 71 then
7012: LD_VAR 0 1
7016: PUSH
7017: LD_INT 0
7019: GREATER
7020: PUSH
7021: LD_VAR 0 1
7025: PUSH
7026: LD_INT 71
7028: LESS
7029: AND
7030: IFFALSE 7039
// BuildRussianBase ( 3 ) ;
7032: LD_INT 3
7034: PPUSH
7035: CALL 10985 0 1
// if rnd > 70 and rnd < 81 then
7039: LD_VAR 0 1
7043: PUSH
7044: LD_INT 70
7046: GREATER
7047: PUSH
7048: LD_VAR 0 1
7052: PUSH
7053: LD_INT 81
7055: LESS
7056: AND
7057: IFFALSE 7066
// BuildRussianBase ( 2 ) ;
7059: LD_INT 2
7061: PPUSH
7062: CALL 10985 0 1
// if rnd > 80 and rnd < 101 then
7066: LD_VAR 0 1
7070: PUSH
7071: LD_INT 80
7073: GREATER
7074: PUSH
7075: LD_VAR 0 1
7079: PUSH
7080: LD_INT 101
7082: LESS
7083: AND
7084: IFFALSE 7093
// BuildRussianBase ( 1 ) ;
7086: LD_INT 1
7088: PPUSH
7089: CALL 10985 0 1
// end ; end ;
7093: PPOPN 1
7095: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
7096: LD_INT 54
7098: PPUSH
7099: LD_INT 1
7101: PPUSH
7102: CALL_OW 321
7106: PUSH
7107: LD_INT 2
7109: EQUAL
7110: PUSH
7111: LD_INT 21
7113: PPUSH
7114: LD_INT 1
7116: PPUSH
7117: CALL_OW 321
7121: PUSH
7122: LD_INT 2
7124: EQUAL
7125: OR
7126: PUSH
7127: LD_INT 22
7129: PPUSH
7130: LD_INT 1
7132: PPUSH
7133: CALL_OW 321
7137: PUSH
7138: LD_INT 2
7140: EQUAL
7141: OR
7142: IFFALSE 7454
7144: GO 7146
7146: DISABLE
7147: LD_INT 0
7149: PPUSH
7150: PPUSH
// begin if IsOk ( DeltaDoctor ) then
7151: LD_EXP 17
7155: PPUSH
7156: CALL_OW 302
7160: IFFALSE 7174
// tmp := DeltaDoctor else
7162: LD_ADDR_VAR 0 2
7166: PUSH
7167: LD_EXP 17
7171: ST_TO_ADDR
7172: GO 7184
// tmp := Denis ;
7174: LD_ADDR_VAR 0 2
7178: PUSH
7179: LD_EXP 12
7183: ST_TO_ADDR
// if tmp then
7184: LD_VAR 0 2
7188: IFFALSE 7282
// begin DialogueOn ;
7190: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
7194: LD_EXP 1
7198: PPUSH
7199: LD_STRING D6-JMM-1
7201: PPUSH
7202: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
7206: LD_VAR 0 2
7210: PPUSH
7211: LD_STRING D6-Sci1-1
7213: PPUSH
7214: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
7218: LD_EXP 1
7222: PPUSH
7223: LD_STRING D6-JMM-2
7225: PPUSH
7226: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
7230: LD_VAR 0 2
7234: PPUSH
7235: LD_STRING D6-Sci1-2
7237: PPUSH
7238: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
7242: LD_EXP 1
7246: PPUSH
7247: LD_STRING D6-JMM-3
7249: PPUSH
7250: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
7254: LD_VAR 0 2
7258: PPUSH
7259: LD_STRING D6-Sci1-3
7261: PPUSH
7262: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
7266: LD_EXP 1
7270: PPUSH
7271: LD_STRING D6-JMM-4
7273: PPUSH
7274: CALL_OW 88
// DialogueOff ;
7278: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
7282: LD_INT 1050
7284: PPUSH
7285: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
7289: LD_EXP 49
7293: PUSH
7294: LD_INT 0
7296: EQUAL
7297: PUSH
7298: LD_EXP 14
7302: PPUSH
7303: CALL_OW 302
7307: AND
7308: IFFALSE 7366
// begin DialogueOn ;
7310: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
7314: LD_EXP 27
7318: PPUSH
7319: LD_STRING D5-Ar1-1
7321: PPUSH
7322: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
7326: LD_EXP 26
7330: PPUSH
7331: LD_STRING D5-Diet-1
7333: PPUSH
7334: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
7338: LD_EXP 27
7342: PPUSH
7343: LD_STRING D5-Ar1-2
7345: PPUSH
7346: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
7350: LD_EXP 26
7354: PPUSH
7355: LD_STRING D5-Diet-2
7357: PPUSH
7358: CALL_OW 88
// DialogueOff ;
7362: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
7366: LD_INT 2100
7368: PUSH
7369: LD_INT 3150
7371: PUSH
7372: LD_INT 4200
7374: PUSH
7375: LD_INT 5250
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: PUSH
7384: LD_INT 1
7386: PPUSH
7387: LD_INT 4
7389: PPUSH
7390: CALL_OW 12
7394: ARRAY
7395: PPUSH
7396: CALL_OW 67
// if arabianTrait = 0 then
7400: LD_EXP 49
7404: PUSH
7405: LD_INT 0
7407: EQUAL
7408: IFFALSE 7454
// begin arabianTrait = 1 ;
7410: LD_ADDR_EXP 49
7414: PUSH
7415: LD_INT 1
7417: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
7418: LD_INT 2
7420: PPUSH
7421: LD_INT 3
7423: PPUSH
7424: LD_INT 1
7426: PPUSH
7427: LD_INT 1
7429: PPUSH
7430: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
7434: LD_INT 2
7436: PPUSH
7437: LD_INT 6
7439: PPUSH
7440: LD_INT 1
7442: PPUSH
7443: LD_INT 1
7445: PPUSH
7446: CALL_OW 80
// PrepareArabianTrait ;
7450: CALL 7457 0 0
// end ; end ;
7454: PPOPN 2
7456: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian ; begin
7457: LD_INT 0
7459: PPUSH
7460: PPUSH
7461: PPUSH
7462: PPUSH
7463: PPUSH
7464: PPUSH
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) ) ;
7465: LD_INT 22
7467: PUSH
7468: LD_INT 2
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 25
7477: PUSH
7478: LD_INT 4
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PPUSH
7489: CALL_OW 69
7493: PPUSH
7494: CALL_OW 122
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) ) ;
7498: LD_INT 22
7500: PUSH
7501: LD_INT 2
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: LD_INT 25
7510: PUSH
7511: LD_INT 3
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PPUSH
7522: CALL_OW 69
7526: PPUSH
7527: CALL_OW 121
// SetClass ( Dietrich , 8 ) ;
7531: LD_EXP 26
7535: PPUSH
7536: LD_INT 8
7538: PPUSH
7539: CALL_OW 336
// wait ( 0 0$3 ) ;
7543: LD_INT 105
7545: PPUSH
7546: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
7550: LD_INT 76
7552: PPUSH
7553: LD_INT 19
7555: PPUSH
7556: CALL_OW 84
// DialogueOn ;
7560: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7564: LD_INT 22
7566: PUSH
7567: LD_INT 1
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PUSH
7574: LD_INT 26
7576: PUSH
7577: LD_INT 1
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_INT 2
7586: PUSH
7587: LD_INT 25
7589: PUSH
7590: LD_INT 1
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: PUSH
7597: LD_INT 25
7599: PUSH
7600: LD_INT 2
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: PUSH
7607: LD_INT 25
7609: PUSH
7610: LD_INT 3
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: PUSH
7617: LD_INT 25
7619: PUSH
7620: LD_INT 4
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: PUSH
7627: LD_INT 25
7629: PUSH
7630: LD_INT 5
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: LIST
7649: PPUSH
7650: CALL_OW 69
7654: PPUSH
7655: LD_STRING D8-Sol1-1
7657: PPUSH
7658: LD_STRING D8-Sol1-1
7660: PPUSH
7661: CALL 10327 0 3
// if IsOK ( DeltaDoctor ) then
7665: LD_EXP 17
7669: PPUSH
7670: CALL_OW 302
7674: IFFALSE 7690
// Say ( DeltaDoctor , D8-Sci1-1 ) else
7676: LD_EXP 17
7680: PPUSH
7681: LD_STRING D8-Sci1-1
7683: PPUSH
7684: CALL_OW 88
7688: GO 7791
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7690: LD_INT 22
7692: PUSH
7693: LD_INT 1
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: PUSH
7700: LD_INT 26
7702: PUSH
7703: LD_INT 1
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: LD_INT 2
7712: PUSH
7713: LD_INT 25
7715: PUSH
7716: LD_INT 1
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: PUSH
7723: LD_INT 25
7725: PUSH
7726: LD_INT 2
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: PUSH
7733: LD_INT 25
7735: PUSH
7736: LD_INT 3
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: PUSH
7743: LD_INT 25
7745: PUSH
7746: LD_INT 4
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: PUSH
7753: LD_INT 25
7755: PUSH
7756: LD_INT 5
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: LIST
7775: PPUSH
7776: CALL_OW 69
7780: PPUSH
7781: LD_STRING D8-Sol1-1
7783: PPUSH
7784: LD_STRING D8-Sol1-1
7786: PPUSH
7787: CALL 10327 0 3
// Say ( JMM , D8-JMM-1 ) ;
7791: LD_EXP 1
7795: PPUSH
7796: LD_STRING D8-JMM-1
7798: PPUSH
7799: CALL_OW 88
// DialogueOff ;
7803: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
7807: LD_INT 2
7809: PPUSH
7810: LD_INT 2
7812: PPUSH
7813: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
7817: LD_INT 1
7819: PPUSH
7820: LD_INT 2
7822: PPUSH
7823: LD_INT 2
7825: PPUSH
7826: LD_INT 1
7828: PPUSH
7829: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7833: LD_INT 3
7835: PPUSH
7836: LD_INT 2
7838: PPUSH
7839: LD_INT 1
7841: PPUSH
7842: LD_INT 1
7844: PPUSH
7845: CALL_OW 80
// SetClass ( Dietrich , 1 ) ;
7849: LD_EXP 26
7853: PPUSH
7854: LD_INT 1
7856: PPUSH
7857: CALL_OW 336
// ChangeMissionObjectives ( M4 ) ;
7861: LD_STRING M4
7863: PPUSH
7864: CALL_OW 337
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
7868: LD_ADDR_VAR 0 5
7872: PUSH
7873: LD_INT 22
7875: PUSH
7876: LD_INT 2
7878: PUSH
7879: EMPTY
7880: LIST
7881: LIST
7882: PUSH
7883: LD_INT 21
7885: PUSH
7886: LD_INT 1
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: PUSH
7893: LD_INT 2
7895: PUSH
7896: LD_INT 25
7898: PUSH
7899: LD_INT 1
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: PUSH
7906: LD_INT 25
7908: PUSH
7909: LD_INT 8
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: PUSH
7916: LD_INT 25
7918: PUSH
7919: LD_INT 15
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: LIST
7936: PPUSH
7937: CALL_OW 69
7941: PUSH
7942: LD_EXP 26
7946: PUSH
7947: EMPTY
7948: LIST
7949: DIFF
7950: ST_TO_ADDR
// if IsLive ( Khatam ) then
7951: LD_EXP 14
7955: PPUSH
7956: CALL_OW 300
7960: IFFALSE 7974
// DoNotAttack ( 2 , Khatam ) ;
7962: LD_INT 2
7964: PPUSH
7965: LD_EXP 14
7969: PPUSH
7970: CALL_OW 471
// ComExitBuilding ( arSoldiers ) ;
7974: LD_VAR 0 5
7978: PPUSH
7979: CALL_OW 122
// wait ( 0 0$1 ) ;
7983: LD_INT 35
7985: PPUSH
7986: CALL_OW 67
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
7990: LD_VAR 0 5
7994: PPUSH
7995: LD_INT 84
7997: PPUSH
7998: LD_INT 22
8000: PPUSH
8001: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
8005: LD_VAR 0 5
8009: PPUSH
8010: LD_INT 82
8012: PPUSH
8013: LD_INT 5
8015: PPUSH
8016: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
8020: LD_VAR 0 5
8024: PPUSH
8025: LD_INT 95
8027: PPUSH
8028: LD_INT 12
8030: PPUSH
8031: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
8035: LD_VAR 0 5
8039: PPUSH
8040: LD_INT 102
8042: PPUSH
8043: LD_INT 11
8045: PPUSH
8046: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
8050: LD_VAR 0 5
8054: PPUSH
8055: LD_INT 116
8057: PPUSH
8058: LD_INT 15
8060: PPUSH
8061: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
8065: LD_VAR 0 5
8069: PPUSH
8070: LD_INT 140
8072: PPUSH
8073: LD_INT 25
8075: PPUSH
8076: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
8080: LD_VAR 0 5
8084: PPUSH
8085: LD_INT 160
8087: PPUSH
8088: LD_INT 56
8090: PPUSH
8091: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
8095: LD_VAR 0 5
8099: PPUSH
8100: LD_INT 189
8102: PPUSH
8103: LD_INT 79
8105: PPUSH
8106: CALL_OW 174
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
8110: LD_ADDR_VAR 0 6
8114: PUSH
8115: LD_INT 22
8117: PUSH
8118: LD_INT 2
8120: PUSH
8121: EMPTY
8122: LIST
8123: LIST
8124: PUSH
8125: LD_INT 21
8127: PUSH
8128: LD_INT 1
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: PUSH
8135: LD_INT 2
8137: PUSH
8138: LD_INT 25
8140: PUSH
8141: LD_INT 2
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PUSH
8148: LD_INT 25
8150: PUSH
8151: LD_INT 3
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 25
8160: PUSH
8161: LD_INT 4
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: LD_INT 25
8170: PUSH
8171: LD_INT 12
8173: PUSH
8174: EMPTY
8175: LIST
8176: LIST
8177: PUSH
8178: LD_INT 25
8180: PUSH
8181: LD_INT 16
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 69
8205: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
8206: LD_ADDR_VAR 0 6
8210: PUSH
8211: LD_VAR 0 6
8215: PUSH
8216: LD_EXP 26
8220: ADD
8221: ST_TO_ADDR
// wait ( 0 0$10 ) ;
8222: LD_INT 350
8224: PPUSH
8225: CALL_OW 67
// ComExitBuilding ( arCivilian ) ;
8229: LD_VAR 0 6
8233: PPUSH
8234: CALL_OW 122
// wait ( 0 0$1 ) ;
8238: LD_INT 35
8240: PPUSH
8241: CALL_OW 67
// AddComMoveXY ( arCivilian , 81 , 5 ) ;
8245: LD_VAR 0 6
8249: PPUSH
8250: LD_INT 81
8252: PPUSH
8253: LD_INT 5
8255: PPUSH
8256: CALL_OW 171
// AddComMoveXY ( arCivilian , 82 , 5 ) ;
8260: LD_VAR 0 6
8264: PPUSH
8265: LD_INT 82
8267: PPUSH
8268: LD_INT 5
8270: PPUSH
8271: CALL_OW 171
// AddComMoveXY ( arCivilian , 95 , 12 ) ;
8275: LD_VAR 0 6
8279: PPUSH
8280: LD_INT 95
8282: PPUSH
8283: LD_INT 12
8285: PPUSH
8286: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 11 ) ;
8290: LD_VAR 0 6
8294: PPUSH
8295: LD_INT 102
8297: PPUSH
8298: LD_INT 11
8300: PPUSH
8301: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
8305: LD_VAR 0 6
8309: PPUSH
8310: LD_INT 116
8312: PPUSH
8313: LD_INT 15
8315: PPUSH
8316: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
8320: LD_VAR 0 6
8324: PPUSH
8325: LD_INT 140
8327: PPUSH
8328: LD_INT 25
8330: PPUSH
8331: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
8335: LD_VAR 0 6
8339: PPUSH
8340: LD_INT 160
8342: PPUSH
8343: LD_INT 56
8345: PPUSH
8346: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
8350: LD_VAR 0 6
8354: PPUSH
8355: LD_INT 189
8357: PPUSH
8358: LD_INT 79
8360: PPUSH
8361: CALL_OW 171
// arabianAttackersAI = 1 ;
8365: LD_ADDR_EXP 46
8369: PUSH
8370: LD_INT 1
8372: ST_TO_ADDR
// wait ( 0 0$10 ) ;
8373: LD_INT 350
8375: PPUSH
8376: CALL_OW 67
// if IsOk ( Gary ) then
8380: LD_EXP 10
8384: PPUSH
8385: CALL_OW 302
8389: IFFALSE 8403
// Say ( Gary , D8a-Gary-1 ) ;
8391: LD_EXP 10
8395: PPUSH
8396: LD_STRING D8a-Gary-1
8398: PPUSH
8399: CALL_OW 88
// wait ( 0 0$5 ) ;
8403: LD_INT 175
8405: PPUSH
8406: CALL_OW 67
// if IsOK ( Khatam ) then
8410: LD_EXP 14
8414: PPUSH
8415: CALL_OW 302
8419: IFFALSE 8955
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
8421: LD_ADDR_VAR 0 3
8425: PUSH
8426: LD_INT 22
8428: PUSH
8429: LD_INT 1
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: PUSH
8436: LD_INT 2
8438: PUSH
8439: LD_INT 25
8441: PUSH
8442: LD_INT 1
8444: PUSH
8445: EMPTY
8446: LIST
8447: LIST
8448: PUSH
8449: LD_INT 25
8451: PUSH
8452: LD_INT 2
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: PUSH
8459: LD_INT 25
8461: PUSH
8462: LD_INT 3
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 25
8471: PUSH
8472: LD_INT 4
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: LD_INT 25
8481: PUSH
8482: LD_INT 5
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PUSH
8489: LD_INT 25
8491: PUSH
8492: LD_INT 8
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: PUSH
8508: EMPTY
8509: LIST
8510: LIST
8511: PPUSH
8512: CALL_OW 69
8516: PUSH
8517: LD_EXP 1
8521: PUSH
8522: LD_EXP 2
8526: PUSH
8527: LD_EXP 3
8531: PUSH
8532: LD_EXP 4
8536: PUSH
8537: LD_EXP 5
8541: PUSH
8542: LD_EXP 6
8546: PUSH
8547: LD_EXP 7
8551: PUSH
8552: LD_EXP 8
8556: PUSH
8557: LD_EXP 9
8561: PUSH
8562: LD_EXP 10
8566: PUSH
8567: LD_EXP 11
8571: PUSH
8572: LD_EXP 12
8576: PUSH
8577: LD_EXP 13
8581: PUSH
8582: LD_EXP 14
8586: PUSH
8587: LD_EXP 15
8591: PUSH
8592: LD_EXP 16
8596: PUSH
8597: LD_EXP 17
8601: PUSH
8602: LD_EXP 19
8606: PUSH
8607: LD_EXP 24
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: DIFF
8633: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
8634: LD_EXP 14
8638: PPUSH
8639: LD_INT 8
8641: PPUSH
8642: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
8646: LD_EXP 14
8650: PPUSH
8651: CALL_OW 122
// wait ( 0 0$1 ) ;
8655: LD_INT 35
8657: PPUSH
8658: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
8662: LD_EXP 14
8666: PPUSH
8667: CALL_OW 121
// wait ( 0 0$1 ) ;
8671: LD_INT 35
8673: PPUSH
8674: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
8678: LD_EXP 14
8682: PPUSH
8683: LD_INT 7
8685: PPUSH
8686: CALL_OW 113
// if not tmp then
8690: LD_VAR 0 3
8694: NOT
8695: IFFALSE 8699
// exit ;
8697: GO 8955
// DialogueOn ;
8699: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
8703: LD_VAR 0 3
8707: PUSH
8708: LD_INT 1
8710: ARRAY
8711: PPUSH
8712: CALL_OW 258
8716: PUSH
8717: LD_INT 1
8719: EQUAL
8720: IFFALSE 8740
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
8722: LD_VAR 0 3
8726: PUSH
8727: LD_INT 1
8729: ARRAY
8730: PPUSH
8731: LD_STRING D8b-Sol1-1
8733: PPUSH
8734: CALL_OW 88
8738: GO 8756
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
8740: LD_VAR 0 3
8744: PUSH
8745: LD_INT 1
8747: ARRAY
8748: PPUSH
8749: LD_STRING D8b-FSol1-1
8751: PPUSH
8752: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
8756: LD_EXP 14
8760: PPUSH
8761: LD_STRING D8b-Khat-1
8763: PPUSH
8764: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8768: LD_VAR 0 3
8772: PUSH
8773: LD_INT 1
8775: ARRAY
8776: PPUSH
8777: CALL_OW 258
8781: PUSH
8782: LD_INT 1
8784: EQUAL
8785: IFFALSE 8805
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
8787: LD_VAR 0 3
8791: PUSH
8792: LD_INT 1
8794: ARRAY
8795: PPUSH
8796: LD_STRING D8b-Sol1-2
8798: PPUSH
8799: CALL_OW 88
8803: GO 8821
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
8805: LD_VAR 0 3
8809: PUSH
8810: LD_INT 1
8812: ARRAY
8813: PPUSH
8814: LD_STRING D8b-FSol1-2
8816: PPUSH
8817: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
8821: LD_EXP 14
8825: PPUSH
8826: LD_STRING D8b-Khat-2
8828: PPUSH
8829: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8833: LD_VAR 0 3
8837: PUSH
8838: LD_INT 1
8840: ARRAY
8841: PPUSH
8842: CALL_OW 258
8846: PUSH
8847: LD_INT 1
8849: EQUAL
8850: IFFALSE 8870
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
8852: LD_VAR 0 3
8856: PUSH
8857: LD_INT 1
8859: ARRAY
8860: PPUSH
8861: LD_STRING D8b-Sol1-3
8863: PPUSH
8864: CALL_OW 88
8868: GO 8886
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
8870: LD_VAR 0 3
8874: PUSH
8875: LD_INT 1
8877: ARRAY
8878: PPUSH
8879: LD_STRING D8b-FSol1-3
8881: PPUSH
8882: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
8886: LD_EXP 14
8890: PPUSH
8891: LD_STRING D8b-Khat-3
8893: PPUSH
8894: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8898: LD_VAR 0 3
8902: PUSH
8903: LD_INT 1
8905: ARRAY
8906: PPUSH
8907: CALL_OW 258
8911: PUSH
8912: LD_INT 1
8914: EQUAL
8915: IFFALSE 8935
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
8917: LD_VAR 0 3
8921: PUSH
8922: LD_INT 1
8924: ARRAY
8925: PPUSH
8926: LD_STRING D8b-Sol1-4
8928: PPUSH
8929: CALL_OW 88
8933: GO 8951
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
8935: LD_VAR 0 3
8939: PUSH
8940: LD_INT 1
8942: ARRAY
8943: PPUSH
8944: LD_STRING D8b-FSol1-4
8946: PPUSH
8947: CALL_OW 88
// DialogueOff ;
8951: CALL_OW 7
// end ; end ;
8955: LD_VAR 0 1
8959: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
8960: LD_INT 7
8962: PPUSH
8963: LD_INT 22
8965: PUSH
8966: LD_INT 2
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: PPUSH
8973: CALL_OW 70
8977: PUSH
8978: LD_INT 0
8980: GREATER
8981: PUSH
8982: LD_EXP 14
8986: PPUSH
8987: LD_INT 7
8989: PPUSH
8990: CALL_OW 308
8994: OR
8995: IFFALSE 9202
8997: GO 8999
8999: DISABLE
9000: LD_INT 0
9002: PPUSH
// begin enable ;
9003: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
9004: LD_ADDR_VAR 0 1
9008: PUSH
9009: LD_INT 7
9011: PPUSH
9012: LD_INT 22
9014: PUSH
9015: LD_INT 2
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PPUSH
9022: CALL_OW 70
9026: PUSH
9027: FOR_IN
9028: IFFALSE 9169
// begin if GetClass ( i ) = 4 then
9030: LD_VAR 0 1
9034: PPUSH
9035: CALL_OW 257
9039: PUSH
9040: LD_INT 4
9042: EQUAL
9043: IFFALSE 9055
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
9045: LD_INT 1
9047: PPUSH
9048: LD_STRING 10_ScientistsEscape_1
9050: PPUSH
9051: CALL_OW 39
// if i = Dietrich then
9055: LD_VAR 0 1
9059: PUSH
9060: LD_EXP 26
9064: EQUAL
9065: IFFALSE 9075
// GensherStatus = 1 ;
9067: LD_ADDR_EXP 52
9071: PUSH
9072: LD_INT 1
9074: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
9075: LD_VAR 0 1
9079: PPUSH
9080: CALL_OW 257
9084: PUSH
9085: LD_INT 1
9087: EQUAL
9088: PUSH
9089: LD_VAR 0 1
9093: PPUSH
9094: CALL_OW 257
9098: PUSH
9099: LD_INT 2
9101: EQUAL
9102: OR
9103: PUSH
9104: LD_VAR 0 1
9108: PPUSH
9109: CALL_OW 257
9113: PUSH
9114: LD_INT 3
9116: EQUAL
9117: OR
9118: PUSH
9119: LD_VAR 0 1
9123: PPUSH
9124: CALL_OW 257
9128: PUSH
9129: LD_INT 4
9131: EQUAL
9132: OR
9133: PUSH
9134: LD_VAR 0 1
9138: PPUSH
9139: CALL_OW 257
9143: PUSH
9144: LD_INT 8
9146: EQUAL
9147: OR
9148: IFFALSE 9158
// arabianEscape = 1 ;
9150: LD_ADDR_EXP 47
9154: PUSH
9155: LD_INT 1
9157: ST_TO_ADDR
// RemoveUnit ( i ) ;
9158: LD_VAR 0 1
9162: PPUSH
9163: CALL_OW 64
// end ;
9167: GO 9027
9169: POP
9170: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
9171: LD_EXP 14
9175: PPUSH
9176: LD_INT 7
9178: PPUSH
9179: CALL_OW 308
9183: IFFALSE 9202
// begin KhatamStatus = 1 ;
9185: LD_ADDR_EXP 53
9189: PUSH
9190: LD_INT 1
9192: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
9193: LD_EXP 14
9197: PPUSH
9198: CALL_OW 64
// end ; end ;
9202: PPOPN 1
9204: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
9205: LD_INT 22
9207: PUSH
9208: LD_INT 2
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: PUSH
9215: LD_INT 21
9217: PUSH
9218: LD_INT 1
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: PPUSH
9229: CALL_OW 69
9233: PUSH
9234: LD_INT 0
9236: EQUAL
9237: PUSH
9238: LD_INT 22
9240: PUSH
9241: LD_INT 4
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: PUSH
9248: LD_INT 21
9250: PUSH
9251: LD_INT 1
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PPUSH
9262: CALL_OW 69
9266: PUSH
9267: LD_INT 0
9269: EQUAL
9270: AND
9271: IFFALSE 9284
9273: GO 9275
9275: DISABLE
// arabianDefeated = 1 ;
9276: LD_ADDR_EXP 48
9280: PUSH
9281: LD_INT 1
9283: ST_TO_ADDR
9284: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
9285: LD_INT 54
9287: PPUSH
9288: LD_INT 1
9290: PPUSH
9291: CALL_OW 321
9295: PUSH
9296: LD_INT 2
9298: EQUAL
9299: PUSH
9300: LD_INT 55
9302: PPUSH
9303: LD_INT 1
9305: PPUSH
9306: CALL_OW 321
9310: PUSH
9311: LD_INT 2
9313: EQUAL
9314: AND
9315: PUSH
9316: LD_INT 21
9318: PPUSH
9319: LD_INT 1
9321: PPUSH
9322: CALL_OW 321
9326: PUSH
9327: LD_INT 2
9329: EQUAL
9330: AND
9331: PUSH
9332: LD_INT 22
9334: PPUSH
9335: LD_INT 1
9337: PPUSH
9338: CALL_OW 321
9342: PUSH
9343: LD_INT 2
9345: EQUAL
9346: AND
9347: PUSH
9348: LD_INT 12
9350: PPUSH
9351: LD_INT 1
9353: PPUSH
9354: CALL_OW 321
9358: PUSH
9359: LD_INT 2
9361: EQUAL
9362: AND
9363: PUSH
9364: LD_INT 32
9366: PPUSH
9367: LD_INT 1
9369: PPUSH
9370: CALL_OW 321
9374: PUSH
9375: LD_INT 2
9377: EQUAL
9378: AND
9379: PUSH
9380: LD_EXP 61
9384: PUSH
9385: LD_INT 0
9387: EQUAL
9388: AND
9389: PUSH
9390: LD_EXP 49
9394: PUSH
9395: LD_INT 0
9397: EQUAL
9398: AND
9399: PUSH
9400: LD_OWVAR 1
9404: PUSH
9405: LD_INT 31500
9407: GREATEREQUAL
9408: AND
9409: IFFALSE 9426
9411: GO 9413
9413: DISABLE
// begin arabianTrait = 1 ;
9414: LD_ADDR_EXP 49
9418: PUSH
9419: LD_INT 1
9421: ST_TO_ADDR
// PrepareArabianTrait ;
9422: CALL 7457 0 0
// end ;
9426: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
9427: LD_EXP 29
9431: PUSH
9432: LD_STRING 02_mikhailStatus_1
9434: PPUSH
9435: LD_INT 0
9437: PPUSH
9438: CALL_OW 30
9442: PUSH
9443: LD_INT 1
9445: EQUAL
9446: AND
9447: PUSH
9448: LD_INT 22
9450: PUSH
9451: LD_INT 5
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: PPUSH
9458: CALL_OW 69
9462: PUSH
9463: LD_INT 0
9465: EQUAL
9466: AND
9467: PUSH
9468: LD_INT 22
9470: PUSH
9471: LD_INT 2
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: PUSH
9478: LD_INT 21
9480: PUSH
9481: LD_INT 1
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: PPUSH
9492: CALL_OW 69
9496: PUSH
9497: LD_INT 0
9499: EQUAL
9500: PUSH
9501: LD_EXP 49
9505: PUSH
9506: LD_INT 0
9508: EQUAL
9509: OR
9510: AND
9511: IFFALSE 9520
9513: GO 9515
9515: DISABLE
// PrepareCornell ;
9516: CALL 3231 0 0
9520: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
9521: LD_INT 22
9523: PUSH
9524: LD_INT 1
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PPUSH
9531: CALL_OW 69
9535: PPUSH
9536: LD_EXP 19
9540: PPUSH
9541: CALL_OW 74
9545: PPUSH
9546: LD_EXP 19
9550: PPUSH
9551: CALL_OW 296
9555: PUSH
9556: LD_INT 9
9558: LESS
9559: IFFALSE 9780
9561: GO 9563
9563: DISABLE
// begin InGameOn ;
9564: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
9568: LD_EXP 19
9572: PPUSH
9573: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
9577: LD_EXP 19
9581: PPUSH
9582: LD_STRING D7-Corn-1
9584: PPUSH
9585: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
9589: LD_INT 22
9591: PUSH
9592: LD_INT 1
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: PUSH
9599: LD_INT 2
9601: PUSH
9602: LD_INT 25
9604: PUSH
9605: LD_INT 1
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PUSH
9612: LD_INT 25
9614: PUSH
9615: LD_INT 2
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: PUSH
9622: LD_INT 25
9624: PUSH
9625: LD_INT 3
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: PUSH
9632: LD_INT 25
9634: PUSH
9635: LD_INT 4
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: PUSH
9642: LD_INT 25
9644: PUSH
9645: LD_INT 5
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PPUSH
9664: CALL_OW 69
9668: PPUSH
9669: LD_STRING D7-Sol1-1
9671: PPUSH
9672: LD_STRING D7-FSol1-1
9674: PPUSH
9675: CALL 10327 0 3
// CenterNowOnUnits ( Cornell ) ;
9679: LD_EXP 19
9683: PPUSH
9684: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
9688: LD_EXP 19
9692: PPUSH
9693: LD_STRING D7-Corn-2
9695: PPUSH
9696: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
9700: LD_EXP 1
9704: PPUSH
9705: LD_STRING D7-JMM-2
9707: PPUSH
9708: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
9712: LD_EXP 19
9716: PPUSH
9717: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
9721: LD_EXP 19
9725: PPUSH
9726: LD_STRING D7-Corn-3
9728: PPUSH
9729: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
9733: LD_EXP 19
9737: PPUSH
9738: LD_INT 250
9740: PPUSH
9741: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
9745: LD_EXP 19
9749: PPUSH
9750: LD_INT 1
9752: PPUSH
9753: CALL_OW 235
// wait ( 0 0$1 ) ;
9757: LD_INT 35
9759: PPUSH
9760: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
9764: LD_EXP 1
9768: PPUSH
9769: LD_STRING D7-JMM-3
9771: PPUSH
9772: CALL_OW 88
// InGameOff ;
9776: CALL_OW 9
// end ;
9780: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
9781: LD_EXP 19
9785: PPUSH
9786: CALL_OW 255
9790: PUSH
9791: LD_INT 1
9793: EQUAL
9794: PUSH
9795: LD_EXP 19
9799: PPUSH
9800: CALL_OW 256
9804: PUSH
9805: LD_INT 350
9807: GREATER
9808: AND
9809: IFFALSE 10002
9811: GO 9813
9813: DISABLE
// begin DialogueOn ;
9814: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
9818: LD_EXP 1
9822: PPUSH
9823: LD_STRING D7a-JMM-1
9825: PPUSH
9826: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
9830: LD_EXP 19
9834: PPUSH
9835: LD_STRING D7a-Corn-1
9837: PPUSH
9838: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
9842: LD_EXP 1
9846: PPUSH
9847: LD_STRING D7a-JMM-2
9849: PPUSH
9850: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
9854: LD_EXP 19
9858: PPUSH
9859: LD_STRING D7a-Corn-2
9861: PPUSH
9862: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
9866: LD_EXP 1
9870: PPUSH
9871: LD_STRING D7a-JMM-3
9873: PPUSH
9874: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
9878: LD_EXP 19
9882: PPUSH
9883: LD_STRING D7a-Corn-3
9885: PPUSH
9886: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
9890: LD_EXP 1
9894: PPUSH
9895: LD_STRING D7a-JMM-4
9897: PPUSH
9898: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
9902: LD_EXP 19
9906: PPUSH
9907: LD_STRING D7a-Corn-4
9909: PPUSH
9910: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
9914: LD_EXP 1
9918: PPUSH
9919: LD_STRING D7a-JMM-5
9921: PPUSH
9922: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
9926: LD_EXP 19
9930: PPUSH
9931: LD_STRING D7a-Corn-5
9933: PPUSH
9934: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
9938: LD_EXP 1
9942: PPUSH
9943: LD_STRING D7a-JMM-6
9945: PPUSH
9946: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
9950: LD_EXP 19
9954: PPUSH
9955: LD_STRING D7a-Corn-6
9957: PPUSH
9958: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
9962: LD_EXP 1
9966: PPUSH
9967: LD_STRING D7a-JMM-7
9969: PPUSH
9970: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
9974: LD_EXP 19
9978: PPUSH
9979: LD_STRING D7a-Corn-7
9981: PPUSH
9982: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
9986: LD_EXP 1
9990: PPUSH
9991: LD_STRING D7a-JMM-8
9993: PPUSH
9994: CALL_OW 88
// DialogueOff ;
9998: CALL_OW 7
// end ;
10002: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
10003: LD_EXP 59
10007: PUSH
10008: LD_EXP 1
10012: PPUSH
10013: CALL_OW 302
10017: PUSH
10018: LD_EXP 5
10022: PPUSH
10023: CALL_OW 302
10027: OR
10028: AND
10029: IFFALSE 10119
10031: GO 10033
10033: DISABLE
// begin Wait ( 0 0$2 ) ;
10034: LD_INT 70
10036: PPUSH
10037: CALL_OW 67
// DialogueOn ;
10041: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
10045: LD_EXP 59
10049: PUSH
10050: LD_INT 1
10052: ARRAY
10053: PPUSH
10054: LD_EXP 59
10058: PUSH
10059: LD_INT 2
10061: ARRAY
10062: PPUSH
10063: CALL_OW 86
// if IsOk ( Cyrus ) then
10067: LD_EXP 5
10071: PPUSH
10072: CALL_OW 302
10076: IFFALSE 10092
// Say ( Cyrus , D10-Cyrus-1 ) else
10078: LD_EXP 5
10082: PPUSH
10083: LD_STRING D10-Cyrus-1
10085: PPUSH
10086: CALL_OW 88
10090: GO 10115
// if IsOk ( JMM ) then
10092: LD_EXP 1
10096: PPUSH
10097: CALL_OW 302
10101: IFFALSE 10115
// Say ( JMM , D10-JMM-1 ) ;
10103: LD_EXP 1
10107: PPUSH
10108: LD_STRING D10-JMM-1
10110: PPUSH
10111: CALL_OW 88
// DialogueOff ;
10115: CALL_OW 7
// end ;
10119: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
10120: LD_INT 12
10122: PPUSH
10123: LD_INT 1
10125: PPUSH
10126: CALL_OW 321
10130: PUSH
10131: LD_INT 2
10133: EQUAL
10134: IFFALSE 10146
10136: GO 10138
10138: DISABLE
// ChangeMissionObjectives ( M2b ) ;
10139: LD_STRING M2b
10141: PPUSH
10142: CALL_OW 337
10146: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
10147: LD_INT 32
10149: PPUSH
10150: LD_INT 1
10152: PPUSH
10153: CALL_OW 321
10157: PUSH
10158: LD_INT 2
10160: EQUAL
10161: IFFALSE 10173
10163: GO 10165
10165: DISABLE
// ChangeMissionObjectives ( M2c ) ;
10166: LD_STRING M2c
10168: PPUSH
10169: CALL_OW 337
10173: END
// every 0 0$1 trigger arabianDefeated = 1 do
10174: LD_EXP 48
10178: PUSH
10179: LD_INT 1
10181: EQUAL
10182: IFFALSE 10194
10184: GO 10186
10186: DISABLE
// ChangeMissionObjectives ( M4a ) ;
10187: LD_STRING M4a
10189: PPUSH
10190: CALL_OW 337
10194: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
10195: LD_INT 54
10197: PPUSH
10198: LD_INT 1
10200: PPUSH
10201: CALL_OW 321
10205: PUSH
10206: LD_INT 2
10208: EQUAL
10209: PUSH
10210: LD_INT 55
10212: PPUSH
10213: LD_INT 1
10215: PPUSH
10216: CALL_OW 321
10220: PUSH
10221: LD_INT 2
10223: EQUAL
10224: AND
10225: PUSH
10226: LD_INT 21
10228: PPUSH
10229: LD_INT 1
10231: PPUSH
10232: CALL_OW 321
10236: PUSH
10237: LD_INT 2
10239: EQUAL
10240: AND
10241: PUSH
10242: LD_INT 22
10244: PPUSH
10245: LD_INT 1
10247: PPUSH
10248: CALL_OW 321
10252: PUSH
10253: LD_INT 2
10255: EQUAL
10256: AND
10257: IFFALSE 10269
10259: GO 10261
10261: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
10262: LD_STRING M2a
10264: PPUSH
10265: CALL_OW 337
10269: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
10270: LD_INT 0
10272: PPUSH
10273: PPUSH
// if exist_mode then
10274: LD_VAR 0 2
10278: IFFALSE 10297
// unit := CreateCharacter ( ident ) else
10280: LD_ADDR_VAR 0 4
10284: PUSH
10285: LD_VAR 0 1
10289: PPUSH
10290: CALL_OW 34
10294: ST_TO_ADDR
10295: GO 10312
// unit := NewCharacter ( ident ) ;
10297: LD_ADDR_VAR 0 4
10301: PUSH
10302: LD_VAR 0 1
10306: PPUSH
10307: CALL_OW 25
10311: ST_TO_ADDR
// result := unit ;
10312: LD_ADDR_VAR 0 3
10316: PUSH
10317: LD_VAR 0 4
10321: ST_TO_ADDR
// end ;
10322: LD_VAR 0 3
10326: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
10327: LD_INT 0
10329: PPUSH
10330: PPUSH
10331: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
10332: LD_ADDR_VAR 0 1
10336: PUSH
10337: LD_VAR 0 1
10341: PUSH
10342: LD_EXP 1
10346: PUSH
10347: LD_EXP 2
10351: PUSH
10352: LD_EXP 3
10356: PUSH
10357: LD_EXP 4
10361: PUSH
10362: LD_EXP 5
10366: PUSH
10367: LD_EXP 6
10371: PUSH
10372: LD_EXP 7
10376: PUSH
10377: LD_EXP 8
10381: PUSH
10382: LD_EXP 9
10386: PUSH
10387: LD_EXP 10
10391: PUSH
10392: LD_EXP 11
10396: PUSH
10397: LD_EXP 12
10401: PUSH
10402: LD_EXP 13
10406: PUSH
10407: LD_EXP 14
10411: PUSH
10412: LD_EXP 15
10416: PUSH
10417: LD_EXP 16
10421: PUSH
10422: LD_EXP 17
10426: PUSH
10427: LD_EXP 18
10431: PUSH
10432: LD_EXP 19
10436: PUSH
10437: LD_EXP 24
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: DIFF
10464: ST_TO_ADDR
// if not characters then
10465: LD_VAR 0 1
10469: NOT
10470: IFFALSE 10474
// exit ;
10472: GO 10620
// rnd = rand ( 1 , characters ) ;
10474: LD_ADDR_VAR 0 6
10478: PUSH
10479: LD_INT 1
10481: PPUSH
10482: LD_VAR 0 1
10486: PPUSH
10487: CALL_OW 12
10491: ST_TO_ADDR
// for i = 1 to characters do
10492: LD_ADDR_VAR 0 5
10496: PUSH
10497: DOUBLE
10498: LD_INT 1
10500: DEC
10501: ST_TO_ADDR
10502: LD_VAR 0 1
10506: PUSH
10507: FOR_TO
10508: IFFALSE 10618
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
10510: LD_VAR 0 5
10514: PUSH
10515: LD_VAR 0 6
10519: EQUAL
10520: PUSH
10521: LD_VAR 0 1
10525: PUSH
10526: LD_VAR 0 5
10530: ARRAY
10531: PPUSH
10532: CALL_OW 258
10536: PUSH
10537: LD_INT 1
10539: EQUAL
10540: AND
10541: IFFALSE 10563
// Say ( characters [ i ] , dialogMID ) ;
10543: LD_VAR 0 1
10547: PUSH
10548: LD_VAR 0 5
10552: ARRAY
10553: PPUSH
10554: LD_VAR 0 2
10558: PPUSH
10559: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
10563: LD_VAR 0 5
10567: PUSH
10568: LD_VAR 0 6
10572: EQUAL
10573: PUSH
10574: LD_VAR 0 1
10578: PUSH
10579: LD_VAR 0 5
10583: ARRAY
10584: PPUSH
10585: CALL_OW 258
10589: PUSH
10590: LD_INT 2
10592: EQUAL
10593: AND
10594: IFFALSE 10616
// Say ( characters [ i ] , dialogFID ) ;
10596: LD_VAR 0 1
10600: PUSH
10601: LD_VAR 0 5
10605: ARRAY
10606: PPUSH
10607: LD_VAR 0 3
10611: PPUSH
10612: CALL_OW 88
// end ;
10616: GO 10507
10618: POP
10619: POP
// end ;
10620: LD_VAR 0 4
10624: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
10625: LD_INT 0
10627: PPUSH
10628: PPUSH
// for i in charactersList do
10629: LD_ADDR_VAR 0 4
10633: PUSH
10634: LD_VAR 0 1
10638: PUSH
10639: FOR_IN
10640: IFFALSE 10658
// SaveCharacters ( i , ident ) ;
10642: LD_VAR 0 4
10646: PPUSH
10647: LD_VAR 0 2
10651: PPUSH
10652: CALL_OW 38
10656: GO 10639
10658: POP
10659: POP
// end ;
10660: LD_VAR 0 3
10664: RET
// export function PrepareDifficulty ; begin
10665: LD_INT 0
10667: PPUSH
// if difficulty = 1 then
10668: LD_OWVAR 67
10672: PUSH
10673: LD_INT 1
10675: EQUAL
10676: IFFALSE 10720
// begin RuSolMinLevel = 3 ;
10678: LD_ADDR_EXP 36
10682: PUSH
10683: LD_INT 3
10685: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
10686: LD_ADDR_EXP 37
10690: PUSH
10691: LD_INT 5
10693: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10694: LD_INT 51
10696: PPUSH
10697: LD_INT 6
10699: PPUSH
10700: LD_INT 2
10702: PPUSH
10703: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10707: LD_INT 51
10709: PPUSH
10710: LD_INT 5
10712: PPUSH
10713: LD_INT 2
10715: PPUSH
10716: CALL_OW 322
// end ; if difficulty = 2 then
10720: LD_OWVAR 67
10724: PUSH
10725: LD_INT 2
10727: EQUAL
10728: IFFALSE 10824
// begin RuSolMinLevel = 5 ;
10730: LD_ADDR_EXP 36
10734: PUSH
10735: LD_INT 5
10737: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
10738: LD_ADDR_EXP 37
10742: PUSH
10743: LD_INT 7
10745: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10746: LD_INT 51
10748: PPUSH
10749: LD_INT 6
10751: PPUSH
10752: LD_INT 2
10754: PPUSH
10755: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10759: LD_INT 57
10761: PPUSH
10762: LD_INT 6
10764: PPUSH
10765: LD_INT 2
10767: PPUSH
10768: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10772: LD_INT 63
10774: PPUSH
10775: LD_INT 6
10777: PPUSH
10778: LD_INT 2
10780: PPUSH
10781: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10785: LD_INT 51
10787: PPUSH
10788: LD_INT 5
10790: PPUSH
10791: LD_INT 2
10793: PPUSH
10794: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
10798: LD_INT 5
10800: PPUSH
10801: LD_INT 2
10803: PPUSH
10804: LD_INT 2
10806: PPUSH
10807: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
10811: LD_INT 5
10813: PPUSH
10814: LD_INT 5
10816: PPUSH
10817: LD_INT 2
10819: PPUSH
10820: CALL_OW 322
// end ; if difficulty = 3 then
10824: LD_OWVAR 67
10828: PUSH
10829: LD_INT 3
10831: EQUAL
10832: IFFALSE 10980
// begin RuSolMinLevel = 6 ;
10834: LD_ADDR_EXP 36
10838: PUSH
10839: LD_INT 6
10841: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
10842: LD_ADDR_EXP 37
10846: PUSH
10847: LD_INT 8
10849: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10850: LD_INT 51
10852: PPUSH
10853: LD_INT 6
10855: PPUSH
10856: LD_INT 2
10858: PPUSH
10859: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10863: LD_INT 57
10865: PPUSH
10866: LD_INT 6
10868: PPUSH
10869: LD_INT 2
10871: PPUSH
10872: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
10876: LD_INT 52
10878: PPUSH
10879: LD_INT 6
10881: PPUSH
10882: LD_INT 2
10884: PPUSH
10885: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
10889: LD_INT 58
10891: PPUSH
10892: LD_INT 6
10894: PPUSH
10895: LD_INT 2
10897: PPUSH
10898: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10902: LD_INT 63
10904: PPUSH
10905: LD_INT 6
10907: PPUSH
10908: LD_INT 2
10910: PPUSH
10911: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
10915: LD_INT 64
10917: PPUSH
10918: LD_INT 6
10920: PPUSH
10921: LD_INT 2
10923: PPUSH
10924: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10928: LD_INT 51
10930: PPUSH
10931: LD_INT 5
10933: PPUSH
10934: LD_INT 2
10936: PPUSH
10937: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
10941: LD_INT 52
10943: PPUSH
10944: LD_INT 5
10946: PPUSH
10947: LD_INT 2
10949: PPUSH
10950: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
10954: LD_INT 66
10956: PPUSH
10957: LD_INT 2
10959: PPUSH
10960: LD_INT 2
10962: PPUSH
10963: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
10967: LD_INT 66
10969: PPUSH
10970: LD_INT 5
10972: PPUSH
10973: LD_INT 2
10975: PPUSH
10976: CALL_OW 322
// end ; end ;
10980: LD_VAR 0 1
10984: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
10985: LD_INT 0
10987: PPUSH
10988: PPUSH
10989: PPUSH
10990: PPUSH
10991: PPUSH
10992: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
10993: LD_ADDR_VAR 0 7
10997: PUSH
10998: LD_INT 43
11000: PUSH
11001: LD_INT 68
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: LD_INT 43
11010: PUSH
11011: LD_INT 79
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PUSH
11018: LD_INT 99
11020: PUSH
11021: LD_INT 114
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PUSH
11028: LD_INT 103
11030: PUSH
11031: LD_INT 114
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PUSH
11038: LD_INT 156
11040: PUSH
11041: LD_INT 92
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: LD_INT 152
11050: PUSH
11051: LD_INT 85
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: ST_TO_ADDR
// for i in sources do
11066: LD_ADDR_VAR 0 3
11070: PUSH
11071: LD_VAR 0 7
11075: PUSH
11076: FOR_IN
11077: IFFALSE 11106
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
11079: LD_VAR 0 3
11083: PUSH
11084: LD_INT 1
11086: ARRAY
11087: PPUSH
11088: LD_VAR 0 3
11092: PUSH
11093: LD_INT 2
11095: ARRAY
11096: PPUSH
11097: LD_INT 3
11099: PPUSH
11100: CALL_OW 441
11104: GO 11076
11106: POP
11107: POP
// case position of 1 :
11108: LD_VAR 0 1
11112: PUSH
11113: LD_INT 1
11115: DOUBLE
11116: EQUAL
11117: IFTRUE 11121
11119: GO 11132
11121: POP
// area := westConv ; 2 :
11122: LD_ADDR_VAR 0 6
11126: PUSH
11127: LD_INT 20
11129: ST_TO_ADDR
11130: GO 11171
11132: LD_INT 2
11134: DOUBLE
11135: EQUAL
11136: IFTRUE 11140
11138: GO 11151
11140: POP
// area := midConv ; 3 :
11141: LD_ADDR_VAR 0 6
11145: PUSH
11146: LD_INT 21
11148: ST_TO_ADDR
11149: GO 11171
11151: LD_INT 3
11153: DOUBLE
11154: EQUAL
11155: IFTRUE 11159
11157: GO 11170
11159: POP
// area := eastConv ; end ;
11160: LD_ADDR_VAR 0 6
11164: PUSH
11165: LD_INT 22
11167: ST_TO_ADDR
11168: GO 11171
11170: POP
// area := AreaToList ( area , 0 ) ;
11171: LD_ADDR_VAR 0 6
11175: PUSH
11176: LD_VAR 0 6
11180: PPUSH
11181: LD_INT 0
11183: PPUSH
11184: CALL_OW 517
11188: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
11189: LD_ADDR_VAR 0 3
11193: PUSH
11194: DOUBLE
11195: LD_INT 1
11197: DEC
11198: ST_TO_ADDR
11199: LD_VAR 0 6
11203: PUSH
11204: LD_INT 1
11206: ARRAY
11207: PUSH
11208: FOR_TO
11209: IFFALSE 11290
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
11211: LD_VAR 0 6
11215: PUSH
11216: LD_INT 1
11218: ARRAY
11219: PUSH
11220: LD_VAR 0 3
11224: ARRAY
11225: PPUSH
11226: LD_VAR 0 6
11230: PUSH
11231: LD_INT 2
11233: ARRAY
11234: PUSH
11235: LD_VAR 0 3
11239: ARRAY
11240: PPUSH
11241: LD_INT 1
11243: PPUSH
11244: LD_INT 1
11246: PPUSH
11247: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
11251: LD_VAR 0 6
11255: PUSH
11256: LD_INT 1
11258: ARRAY
11259: PUSH
11260: LD_VAR 0 3
11264: ARRAY
11265: PPUSH
11266: LD_VAR 0 6
11270: PUSH
11271: LD_INT 2
11273: ARRAY
11274: PUSH
11275: LD_VAR 0 3
11279: ARRAY
11280: PPUSH
11281: LD_INT 1
11283: PPUSH
11284: CALL_OW 331
// end ;
11288: GO 11208
11290: POP
11291: POP
// ruPossition = position ;
11292: LD_ADDR_EXP 41
11296: PUSH
11297: LD_VAR 0 1
11301: ST_TO_ADDR
// if position = 1 then
11302: LD_VAR 0 1
11306: PUSH
11307: LD_INT 1
11309: EQUAL
11310: IFFALSE 12058
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11312: LD_ADDR_VAR 0 4
11316: PUSH
11317: LD_INT 22
11319: PUSH
11320: LD_INT 3
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PUSH
11327: LD_INT 25
11329: PUSH
11330: LD_INT 2
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PPUSH
11341: CALL_OW 69
11345: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
11346: LD_ADDR_VAR 0 5
11350: PUSH
11351: LD_INT 0
11353: PUSH
11354: LD_INT 49
11356: PUSH
11357: LD_INT 74
11359: PUSH
11360: LD_INT 3
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: PUSH
11369: LD_INT 4
11371: PUSH
11372: LD_INT 73
11374: PUSH
11375: LD_INT 88
11377: PUSH
11378: LD_INT 5
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: PUSH
11387: LD_INT 4
11389: PUSH
11390: LD_INT 56
11392: PUSH
11393: LD_INT 62
11395: PUSH
11396: LD_INT 3
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: PUSH
11405: LD_INT 29
11407: PUSH
11408: LD_INT 43
11410: PUSH
11411: LD_INT 68
11413: PUSH
11414: LD_INT 2
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: PUSH
11423: LD_INT 30
11425: PUSH
11426: LD_INT 43
11428: PUSH
11429: LD_INT 79
11431: PUSH
11432: LD_INT 5
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: PUSH
11441: LD_INT 28
11443: PUSH
11444: LD_INT 60
11446: PUSH
11447: LD_INT 75
11449: PUSH
11450: LD_INT 1
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: PUSH
11459: LD_INT 2
11461: PUSH
11462: LD_INT 50
11464: PUSH
11465: LD_INT 87
11467: PUSH
11468: LD_INT 1
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: PUSH
11477: LD_INT 28
11479: PUSH
11480: LD_INT 45
11482: PUSH
11483: LD_INT 67
11485: PUSH
11486: LD_INT 2
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: PUSH
11495: LD_INT 17
11497: PUSH
11498: LD_INT 47
11500: PUSH
11501: LD_INT 84
11503: PUSH
11504: LD_INT 2
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 18
11515: PUSH
11516: LD_INT 46
11518: PUSH
11519: LD_INT 87
11521: PUSH
11522: LD_INT 1
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: PUSH
11531: LD_INT 28
11533: PUSH
11534: LD_INT 41
11536: PUSH
11537: LD_INT 64
11539: PUSH
11540: LD_INT 5
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: PUSH
11549: LD_INT 32
11551: PUSH
11552: LD_INT 75
11554: PUSH
11555: LD_INT 76
11557: PUSH
11558: LD_INT 5
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: PUSH
11567: LD_INT 32
11569: PUSH
11570: LD_INT 77
11572: PUSH
11573: LD_INT 75
11575: PUSH
11576: LD_INT 5
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 32
11587: PUSH
11588: LD_INT 69
11590: PUSH
11591: LD_INT 68
11593: PUSH
11594: LD_INT 3
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: PUSH
11603: LD_INT 32
11605: PUSH
11606: LD_INT 59
11608: PUSH
11609: LD_INT 96
11611: PUSH
11612: LD_INT 5
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: PUSH
11621: LD_INT 32
11623: PUSH
11624: LD_INT 56
11626: PUSH
11627: LD_INT 96
11629: PUSH
11630: LD_INT 0
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: PUSH
11639: LD_INT 32
11641: PUSH
11642: LD_INT 51
11644: PUSH
11645: LD_INT 61
11647: PUSH
11648: LD_INT 3
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: PUSH
11657: LD_INT 32
11659: PUSH
11660: LD_INT 42
11662: PUSH
11663: LD_INT 60
11665: PUSH
11666: LD_INT 3
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: PUSH
11675: LD_INT 32
11677: PUSH
11678: LD_INT 36
11680: PUSH
11681: LD_INT 58
11683: PUSH
11684: LD_INT 3
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 32
11695: PUSH
11696: LD_INT 39
11698: PUSH
11699: LD_INT 59
11701: PUSH
11702: LD_INT 3
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: PUSH
11711: LD_INT 32
11713: PUSH
11714: LD_INT 61
11716: PUSH
11717: LD_INT 64
11719: PUSH
11720: LD_INT 3
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: PUSH
11729: LD_INT 33
11731: PUSH
11732: LD_INT 63
11734: PUSH
11735: LD_INT 90
11737: PUSH
11738: LD_INT 5
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: PUSH
11747: LD_INT 33
11749: PUSH
11750: LD_INT 64
11752: PUSH
11753: LD_INT 88
11755: PUSH
11756: LD_INT 5
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: PUSH
11765: LD_INT 33
11767: PUSH
11768: LD_INT 72
11770: PUSH
11771: LD_INT 82
11773: PUSH
11774: LD_INT 5
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 6
11785: PUSH
11786: LD_INT 42
11788: PUSH
11789: LD_INT 74
11791: PUSH
11792: LD_INT 1
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: PUSH
11801: LD_INT 6
11803: PUSH
11804: LD_INT 56
11806: PUSH
11807: LD_INT 77
11809: PUSH
11810: LD_INT 2
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: PUSH
11819: LD_INT 21
11821: PUSH
11822: LD_INT 54
11824: PUSH
11825: LD_INT 91
11827: PUSH
11828: LD_INT 5
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: PUSH
11837: LD_INT 16
11839: PUSH
11840: LD_INT 50
11842: PUSH
11843: LD_INT 83
11845: PUSH
11846: LD_INT 3
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: PUSH
11855: LD_INT 24
11857: PUSH
11858: LD_INT 50
11860: PUSH
11861: LD_INT 90
11863: PUSH
11864: LD_INT 0
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11904: LD_ADDR_VAR 0 3
11908: PUSH
11909: LD_INT 22
11911: PUSH
11912: LD_INT 3
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 3
11921: PUSH
11922: LD_INT 25
11924: PUSH
11925: LD_INT 2
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PPUSH
11940: CALL_OW 69
11944: PUSH
11945: FOR_IN
11946: IFFALSE 11965
// AddComAgressiveMove ( i , 53 , 82 ) ;
11948: LD_VAR 0 3
11952: PPUSH
11953: LD_INT 53
11955: PPUSH
11956: LD_INT 82
11958: PPUSH
11959: CALL_OW 174
11963: GO 11945
11965: POP
11966: POP
// for i := 1 to buildingsTab do
11967: LD_ADDR_VAR 0 3
11971: PUSH
11972: DOUBLE
11973: LD_INT 1
11975: DEC
11976: ST_TO_ADDR
11977: LD_VAR 0 5
11981: PUSH
11982: FOR_TO
11983: IFFALSE 12056
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11985: LD_VAR 0 4
11989: PPUSH
11990: LD_VAR 0 5
11994: PUSH
11995: LD_VAR 0 3
11999: ARRAY
12000: PUSH
12001: LD_INT 1
12003: ARRAY
12004: PPUSH
12005: LD_VAR 0 5
12009: PUSH
12010: LD_VAR 0 3
12014: ARRAY
12015: PUSH
12016: LD_INT 2
12018: ARRAY
12019: PPUSH
12020: LD_VAR 0 5
12024: PUSH
12025: LD_VAR 0 3
12029: ARRAY
12030: PUSH
12031: LD_INT 3
12033: ARRAY
12034: PPUSH
12035: LD_VAR 0 5
12039: PUSH
12040: LD_VAR 0 3
12044: ARRAY
12045: PUSH
12046: LD_INT 4
12048: ARRAY
12049: PPUSH
12050: CALL_OW 205
12054: GO 11982
12056: POP
12057: POP
// end ; if position = 2 then
12058: LD_VAR 0 1
12062: PUSH
12063: LD_INT 2
12065: EQUAL
12066: IFFALSE 12681
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12068: LD_ADDR_VAR 0 4
12072: PUSH
12073: LD_INT 22
12075: PUSH
12076: LD_INT 3
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: PUSH
12083: LD_INT 25
12085: PUSH
12086: LD_INT 2
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: PPUSH
12097: CALL_OW 69
12101: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
12102: LD_ADDR_VAR 0 5
12106: PUSH
12107: LD_INT 0
12109: PUSH
12110: LD_INT 104
12112: PUSH
12113: LD_INT 110
12115: PUSH
12116: LD_INT 5
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: PUSH
12125: LD_INT 4
12127: PUSH
12128: LD_INT 98
12130: PUSH
12131: LD_INT 90
12133: PUSH
12134: LD_INT 3
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: PUSH
12143: LD_INT 29
12145: PUSH
12146: LD_INT 103
12148: PUSH
12149: LD_INT 114
12151: PUSH
12152: LD_INT 2
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: PUSH
12161: LD_INT 30
12163: PUSH
12164: LD_INT 99
12166: PUSH
12167: LD_INT 114
12169: PUSH
12170: LD_INT 3
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: PUSH
12179: LD_INT 28
12181: PUSH
12182: LD_INT 100
12184: PUSH
12185: LD_INT 112
12187: PUSH
12188: LD_INT 1
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: PUSH
12197: LD_INT 2
12199: PUSH
12200: LD_INT 92
12202: PUSH
12203: LD_INT 101
12205: PUSH
12206: LD_INT 0
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: PUSH
12215: LD_INT 28
12217: PUSH
12218: LD_INT 97
12220: PUSH
12221: LD_INT 116
12223: PUSH
12224: LD_INT 5
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 17
12235: PUSH
12236: LD_INT 96
12238: PUSH
12239: LD_INT 101
12241: PUSH
12242: LD_INT 4
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: PUSH
12251: LD_INT 18
12253: PUSH
12254: LD_INT 88
12256: PUSH
12257: LD_INT 97
12259: PUSH
12260: LD_INT 2
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: PUSH
12269: LD_INT 28
12271: PUSH
12272: LD_INT 106
12274: PUSH
12275: LD_INT 92
12277: PUSH
12278: LD_INT 2
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: PUSH
12287: LD_INT 32
12289: PUSH
12290: LD_INT 88
12292: PUSH
12293: LD_INT 89
12295: PUSH
12296: LD_INT 2
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: PUSH
12305: LD_INT 32
12307: PUSH
12308: LD_INT 86
12310: PUSH
12311: LD_INT 90
12313: PUSH
12314: LD_INT 2
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: PUSH
12323: LD_INT 32
12325: PUSH
12326: LD_INT 85
12328: PUSH
12329: LD_INT 99
12331: PUSH
12332: LD_INT 2
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 32
12343: PUSH
12344: LD_INT 85
12346: PUSH
12347: LD_INT 107
12349: PUSH
12350: LD_INT 1
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: PUSH
12359: LD_INT 33
12361: PUSH
12362: LD_INT 105
12364: PUSH
12365: LD_INT 99
12367: PUSH
12368: LD_INT 1
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 33
12379: PUSH
12380: LD_INT 102
12382: PUSH
12383: LD_INT 92
12385: PUSH
12386: LD_INT 3
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: PUSH
12395: LD_INT 33
12397: PUSH
12398: LD_INT 105
12400: PUSH
12401: LD_INT 92
12403: PUSH
12404: LD_INT 2
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 6
12415: PUSH
12416: LD_INT 92
12418: PUSH
12419: LD_INT 110
12421: PUSH
12422: LD_INT 0
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: PUSH
12431: LD_INT 6
12433: PUSH
12434: LD_INT 103
12436: PUSH
12437: LD_INT 103
12439: PUSH
12440: LD_INT 5
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: PUSH
12449: LD_INT 21
12451: PUSH
12452: LD_INT 89
12454: PUSH
12455: LD_INT 101
12457: PUSH
12458: LD_INT 1
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: PUSH
12467: LD_INT 16
12469: PUSH
12470: LD_INT 95
12472: PUSH
12473: LD_INT 104
12475: PUSH
12476: LD_INT 4
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: PUSH
12485: LD_INT 24
12487: PUSH
12488: LD_INT 92
12490: PUSH
12491: LD_INT 105
12493: PUSH
12494: LD_INT 0
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12527: LD_ADDR_VAR 0 3
12531: PUSH
12532: LD_INT 22
12534: PUSH
12535: LD_INT 3
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: PUSH
12542: LD_INT 3
12544: PUSH
12545: LD_INT 25
12547: PUSH
12548: LD_INT 2
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PPUSH
12563: CALL_OW 69
12567: PUSH
12568: FOR_IN
12569: IFFALSE 12588
// AddComAgressiveMove ( i , 96 , 99 ) ;
12571: LD_VAR 0 3
12575: PPUSH
12576: LD_INT 96
12578: PPUSH
12579: LD_INT 99
12581: PPUSH
12582: CALL_OW 174
12586: GO 12568
12588: POP
12589: POP
// for i := 1 to buildingsTab do
12590: LD_ADDR_VAR 0 3
12594: PUSH
12595: DOUBLE
12596: LD_INT 1
12598: DEC
12599: ST_TO_ADDR
12600: LD_VAR 0 5
12604: PUSH
12605: FOR_TO
12606: IFFALSE 12679
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12608: LD_VAR 0 4
12612: PPUSH
12613: LD_VAR 0 5
12617: PUSH
12618: LD_VAR 0 3
12622: ARRAY
12623: PUSH
12624: LD_INT 1
12626: ARRAY
12627: PPUSH
12628: LD_VAR 0 5
12632: PUSH
12633: LD_VAR 0 3
12637: ARRAY
12638: PUSH
12639: LD_INT 2
12641: ARRAY
12642: PPUSH
12643: LD_VAR 0 5
12647: PUSH
12648: LD_VAR 0 3
12652: ARRAY
12653: PUSH
12654: LD_INT 3
12656: ARRAY
12657: PPUSH
12658: LD_VAR 0 5
12662: PUSH
12663: LD_VAR 0 3
12667: ARRAY
12668: PUSH
12669: LD_INT 4
12671: ARRAY
12672: PPUSH
12673: CALL_OW 205
12677: GO 12605
12679: POP
12680: POP
// end ; if position = 3 then
12681: LD_VAR 0 1
12685: PUSH
12686: LD_INT 3
12688: EQUAL
12689: IFFALSE 13475
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12691: LD_ADDR_VAR 0 4
12695: PUSH
12696: LD_INT 22
12698: PUSH
12699: LD_INT 3
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: PUSH
12706: LD_INT 25
12708: PUSH
12709: LD_INT 2
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PPUSH
12720: CALL_OW 69
12724: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
12725: LD_ADDR_VAR 0 5
12729: PUSH
12730: LD_INT 0
12732: PUSH
12733: LD_INT 151
12735: PUSH
12736: LD_INT 71
12738: PUSH
12739: LD_INT 4
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: PUSH
12748: LD_INT 4
12750: PUSH
12751: LD_INT 145
12753: PUSH
12754: LD_INT 53
12756: PUSH
12757: LD_INT 3
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: PUSH
12766: LD_INT 4
12768: PUSH
12769: LD_INT 172
12771: PUSH
12772: LD_INT 102
12774: PUSH
12775: LD_INT 5
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: PUSH
12784: LD_INT 29
12786: PUSH
12787: LD_INT 152
12789: PUSH
12790: LD_INT 85
12792: PUSH
12793: LD_INT 3
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: PUSH
12802: LD_INT 30
12804: PUSH
12805: LD_INT 156
12807: PUSH
12808: LD_INT 92
12810: PUSH
12811: LD_INT 3
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: PUSH
12820: LD_INT 28
12822: PUSH
12823: LD_INT 151
12825: PUSH
12826: LD_INT 66
12828: PUSH
12829: LD_INT 4
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 2
12840: PUSH
12841: LD_INT 163
12843: PUSH
12844: LD_INT 95
12846: PUSH
12847: LD_INT 5
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: PUSH
12856: LD_INT 28
12858: PUSH
12859: LD_INT 149
12861: PUSH
12862: LD_INT 63
12864: PUSH
12865: LD_INT 4
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: PUSH
12874: LD_INT 17
12876: PUSH
12877: LD_INT 167
12879: PUSH
12880: LD_INT 99
12882: PUSH
12883: LD_INT 5
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 18
12894: PUSH
12895: LD_INT 163
12897: PUSH
12898: LD_INT 98
12900: PUSH
12901: LD_INT 0
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 28
12912: PUSH
12913: LD_INT 154
12915: PUSH
12916: LD_INT 70
12918: PUSH
12919: LD_INT 4
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: PUSH
12928: LD_INT 32
12930: PUSH
12931: LD_INT 155
12933: PUSH
12934: LD_INT 62
12936: PUSH
12937: LD_INT 4
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: PUSH
12946: LD_INT 32
12948: PUSH
12949: LD_INT 161
12951: PUSH
12952: LD_INT 69
12954: PUSH
12955: LD_INT 4
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: PUSH
12964: LD_INT 32
12966: PUSH
12967: LD_INT 168
12969: PUSH
12970: LD_INT 78
12972: PUSH
12973: LD_INT 4
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 32
12984: PUSH
12985: LD_INT 163
12987: PUSH
12988: LD_INT 80
12990: PUSH
12991: LD_INT 5
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 32
13002: PUSH
13003: LD_INT 136
13005: PUSH
13006: LD_INT 73
13008: PUSH
13009: LD_INT 0
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: PUSH
13018: LD_INT 32
13020: PUSH
13021: LD_INT 157
13023: PUSH
13024: LD_INT 98
13026: PUSH
13027: LD_INT 0
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: PUSH
13036: LD_INT 32
13038: PUSH
13039: LD_INT 150
13041: PUSH
13042: LD_INT 87
13044: PUSH
13045: LD_INT 1
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: PUSH
13054: LD_INT 33
13056: PUSH
13057: LD_INT 171
13059: PUSH
13060: LD_INT 97
13062: PUSH
13063: LD_INT 4
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: PUSH
13072: LD_INT 33
13074: PUSH
13075: LD_INT 168
13077: PUSH
13078: LD_INT 92
13080: PUSH
13081: LD_INT 4
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: PUSH
13090: LD_INT 33
13092: PUSH
13093: LD_INT 166
13095: PUSH
13096: LD_INT 80
13098: PUSH
13099: LD_INT 5
13101: PUSH
13102: EMPTY
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: PUSH
13108: LD_INT 33
13110: PUSH
13111: LD_INT 141
13113: PUSH
13114: LD_INT 54
13116: PUSH
13117: LD_INT 2
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: PUSH
13126: LD_INT 33
13128: PUSH
13129: LD_INT 133
13131: PUSH
13132: LD_INT 57
13134: PUSH
13135: LD_INT 2
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: PUSH
13144: LD_INT 33
13146: PUSH
13147: LD_INT 132
13149: PUSH
13150: LD_INT 61
13152: PUSH
13153: LD_INT 2
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: PUSH
13162: LD_INT 33
13164: PUSH
13165: LD_INT 150
13167: PUSH
13168: LD_INT 82
13170: PUSH
13171: LD_INT 0
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: PUSH
13180: LD_INT 33
13182: PUSH
13183: LD_INT 132
13185: PUSH
13186: LD_INT 72
13188: PUSH
13189: LD_INT 0
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 6
13200: PUSH
13201: LD_INT 146
13203: PUSH
13204: LD_INT 64
13206: PUSH
13207: LD_INT 4
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: PUSH
13216: LD_INT 6
13218: PUSH
13219: LD_INT 159
13221: PUSH
13222: LD_INT 85
13224: PUSH
13225: LD_INT 4
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: PUSH
13234: LD_INT 21
13236: PUSH
13237: LD_INT 163
13239: PUSH
13240: LD_INT 91
13242: PUSH
13243: LD_INT 3
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: PUSH
13252: LD_INT 16
13254: PUSH
13255: LD_INT 166
13257: PUSH
13258: LD_INT 95
13260: PUSH
13261: LD_INT 4
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: PUSH
13270: LD_INT 24
13272: PUSH
13273: LD_INT 159
13275: PUSH
13276: LD_INT 95
13278: PUSH
13279: LD_INT 1
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13321: LD_ADDR_VAR 0 3
13325: PUSH
13326: LD_INT 22
13328: PUSH
13329: LD_INT 3
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PUSH
13336: LD_INT 3
13338: PUSH
13339: LD_INT 25
13341: PUSH
13342: LD_INT 2
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PPUSH
13357: CALL_OW 69
13361: PUSH
13362: FOR_IN
13363: IFFALSE 13382
// AddComAgressiveMove ( i , 141 , 65 ) ;
13365: LD_VAR 0 3
13369: PPUSH
13370: LD_INT 141
13372: PPUSH
13373: LD_INT 65
13375: PPUSH
13376: CALL_OW 174
13380: GO 13362
13382: POP
13383: POP
// for i := 1 to buildingsTab do
13384: LD_ADDR_VAR 0 3
13388: PUSH
13389: DOUBLE
13390: LD_INT 1
13392: DEC
13393: ST_TO_ADDR
13394: LD_VAR 0 5
13398: PUSH
13399: FOR_TO
13400: IFFALSE 13473
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13402: LD_VAR 0 4
13406: PPUSH
13407: LD_VAR 0 5
13411: PUSH
13412: LD_VAR 0 3
13416: ARRAY
13417: PUSH
13418: LD_INT 1
13420: ARRAY
13421: PPUSH
13422: LD_VAR 0 5
13426: PUSH
13427: LD_VAR 0 3
13431: ARRAY
13432: PUSH
13433: LD_INT 2
13435: ARRAY
13436: PPUSH
13437: LD_VAR 0 5
13441: PUSH
13442: LD_VAR 0 3
13446: ARRAY
13447: PUSH
13448: LD_INT 3
13450: ARRAY
13451: PPUSH
13452: LD_VAR 0 5
13456: PUSH
13457: LD_VAR 0 3
13461: ARRAY
13462: PUSH
13463: LD_INT 4
13465: ARRAY
13466: PPUSH
13467: CALL_OW 205
13471: GO 13399
13473: POP
13474: POP
// end ; end ;
13475: LD_VAR 0 2
13479: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
13480: LD_INT 0
13482: PPUSH
13483: PPUSH
13484: PPUSH
13485: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
13486: LD_ADDR_VAR 0 3
13490: PUSH
13491: LD_INT 22
13493: PUSH
13494: LD_INT 2
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: PUSH
13501: LD_INT 25
13503: PUSH
13504: LD_INT 2
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: PPUSH
13515: CALL_OW 69
13519: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
13520: LD_VAR 0 3
13524: PPUSH
13525: LD_INT 0
13527: PPUSH
13528: LD_INT 71
13530: PPUSH
13531: LD_INT 15
13533: PPUSH
13534: LD_INT 3
13536: PPUSH
13537: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
13541: LD_ADDR_VAR 0 4
13545: PUSH
13546: LD_INT 6
13548: PUSH
13549: LD_INT 77
13551: PUSH
13552: LD_INT 18
13554: PUSH
13555: LD_INT 3
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: PUSH
13564: LD_INT 4
13566: PUSH
13567: LD_INT 77
13569: PUSH
13570: LD_INT 26
13572: PUSH
13573: LD_INT 0
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 31
13584: PUSH
13585: LD_INT 82
13587: PUSH
13588: LD_INT 28
13590: PUSH
13591: LD_INT 0
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: PUSH
13600: LD_INT 31
13602: PUSH
13603: LD_INT 84
13605: PUSH
13606: LD_INT 21
13608: PUSH
13609: LD_INT 3
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: PUSH
13618: LD_INT 31
13620: PUSH
13621: LD_INT 66
13623: PUSH
13624: LD_INT 14
13626: PUSH
13627: LD_INT 2
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: PUSH
13636: LD_INT 27
13638: PUSH
13639: LD_INT 67
13641: PUSH
13642: LD_INT 18
13644: PUSH
13645: LD_INT 5
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: PUSH
13654: LD_INT 27
13656: PUSH
13657: LD_INT 69
13659: PUSH
13660: LD_INT 23
13662: PUSH
13663: LD_INT 2
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: ST_TO_ADDR
// for i := 1 to buildingsTab do
13681: LD_ADDR_VAR 0 2
13685: PUSH
13686: DOUBLE
13687: LD_INT 1
13689: DEC
13690: ST_TO_ADDR
13691: LD_VAR 0 4
13695: PUSH
13696: FOR_TO
13697: IFFALSE 13770
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13699: LD_VAR 0 3
13703: PPUSH
13704: LD_VAR 0 4
13708: PUSH
13709: LD_VAR 0 2
13713: ARRAY
13714: PUSH
13715: LD_INT 1
13717: ARRAY
13718: PPUSH
13719: LD_VAR 0 4
13723: PUSH
13724: LD_VAR 0 2
13728: ARRAY
13729: PUSH
13730: LD_INT 2
13732: ARRAY
13733: PPUSH
13734: LD_VAR 0 4
13738: PUSH
13739: LD_VAR 0 2
13743: ARRAY
13744: PUSH
13745: LD_INT 3
13747: ARRAY
13748: PPUSH
13749: LD_VAR 0 4
13753: PUSH
13754: LD_VAR 0 2
13758: ARRAY
13759: PUSH
13760: LD_INT 4
13762: ARRAY
13763: PPUSH
13764: CALL_OW 205
13768: GO 13696
13770: POP
13771: POP
// end ;
13772: LD_VAR 0 1
13776: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
13777: LD_INT 0
13779: PPUSH
13780: PPUSH
13781: PPUSH
13782: PPUSH
13783: PPUSH
13784: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
13785: LD_ADDR_VAR 0 7
13789: PUSH
13790: LD_INT 22
13792: PUSH
13793: LD_VAR 0 1
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PUSH
13802: LD_INT 25
13804: PUSH
13805: LD_INT 9
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: PPUSH
13816: CALL_OW 69
13820: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13821: LD_ADDR_VAR 0 8
13825: PUSH
13826: LD_INT 22
13828: PUSH
13829: LD_VAR 0 2
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PUSH
13838: LD_INT 3
13840: PUSH
13841: LD_INT 21
13843: PUSH
13844: LD_INT 3
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: PPUSH
13859: CALL_OW 69
13863: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
13864: LD_ADDR_VAR 0 5
13868: PUSH
13869: LD_INT 1
13871: PPUSH
13872: LD_INT 3
13874: PPUSH
13875: CALL_OW 12
13879: ST_TO_ADDR
// for i = 1 to list do
13880: LD_ADDR_VAR 0 6
13884: PUSH
13885: DOUBLE
13886: LD_INT 1
13888: DEC
13889: ST_TO_ADDR
13890: LD_VAR 0 7
13894: PUSH
13895: FOR_TO
13896: IFFALSE 14886
// for ta in filter do
13898: LD_ADDR_VAR 0 4
13902: PUSH
13903: LD_VAR 0 8
13907: PUSH
13908: FOR_IN
13909: IFFALSE 14882
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
13911: LD_VAR 0 7
13915: PUSH
13916: LD_VAR 0 6
13920: ARRAY
13921: PPUSH
13922: LD_VAR 0 4
13926: PPUSH
13927: CALL_OW 296
13931: PUSH
13932: LD_INT 15
13934: LESSEQUAL
13935: IFFALSE 14880
// begin case c of 1 :
13937: LD_VAR 0 5
13941: PUSH
13942: LD_INT 1
13944: DOUBLE
13945: EQUAL
13946: IFTRUE 13950
13948: GO 14382
13950: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
13951: LD_VAR 0 7
13955: PUSH
13956: LD_VAR 0 6
13960: ARRAY
13961: PPUSH
13962: LD_VAR 0 4
13966: PPUSH
13967: CALL_OW 250
13971: PPUSH
13972: LD_VAR 0 4
13976: PPUSH
13977: CALL_OW 251
13981: PPUSH
13982: CALL_OW 154
// if eventVar2 = 0 then
13986: LD_EXP 64
13990: PUSH
13991: LD_INT 0
13993: EQUAL
13994: IFFALSE 14380
// begin eventVar2 = 1 ;
13996: LD_ADDR_EXP 64
14000: PUSH
14001: LD_INT 1
14003: ST_TO_ADDR
// wait ( 0 0$7 ) ;
14004: LD_INT 245
14006: PPUSH
14007: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
14011: LD_VAR 0 4
14015: PPUSH
14016: CALL_OW 250
14020: PPUSH
14021: LD_VAR 0 4
14025: PPUSH
14026: CALL_OW 251
14030: PPUSH
14031: CALL_OW 84
// DialogueOn ;
14035: CALL_OW 6
// if IsOK ( Cyrus ) then
14039: LD_EXP 5
14043: PPUSH
14044: CALL_OW 302
14048: IFFALSE 14064
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
14050: LD_EXP 5
14054: PPUSH
14055: LD_STRING D9a-Cyrus-1
14057: PPUSH
14058: CALL_OW 88
// end else
14062: GO 14186
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
14064: LD_INT 22
14066: PUSH
14067: LD_INT 1
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: LD_INT 26
14076: PUSH
14077: LD_INT 1
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: LD_INT 2
14086: PUSH
14087: LD_INT 25
14089: PUSH
14090: LD_INT 1
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: PUSH
14097: LD_INT 25
14099: PUSH
14100: LD_INT 2
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PUSH
14107: LD_INT 25
14109: PUSH
14110: LD_INT 3
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PUSH
14117: LD_INT 25
14119: PUSH
14120: LD_INT 4
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: PUSH
14127: LD_INT 25
14129: PUSH
14130: LD_INT 5
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: LIST
14149: PPUSH
14150: CALL_OW 69
14154: PUSH
14155: LD_EXP 1
14159: PUSH
14160: LD_EXP 14
14164: PUSH
14165: LD_EXP 5
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: LIST
14174: DIFF
14175: PPUSH
14176: LD_STRING D9a-Sol1-1
14178: PPUSH
14179: LD_STRING D9a-Sol1-1
14181: PPUSH
14182: CALL 10327 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
14186: LD_INT 22
14188: PUSH
14189: LD_INT 1
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PUSH
14196: LD_INT 26
14198: PUSH
14199: LD_INT 1
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: PUSH
14206: LD_INT 2
14208: PUSH
14209: LD_INT 25
14211: PUSH
14212: LD_INT 1
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: LD_INT 25
14221: PUSH
14222: LD_INT 2
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PUSH
14229: LD_INT 25
14231: PUSH
14232: LD_INT 3
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: PUSH
14239: LD_INT 25
14241: PUSH
14242: LD_INT 4
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: LD_INT 25
14251: PUSH
14252: LD_INT 5
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: PUSH
14267: EMPTY
14268: LIST
14269: LIST
14270: LIST
14271: PPUSH
14272: CALL_OW 69
14276: PUSH
14277: LD_EXP 1
14281: PUSH
14282: LD_EXP 14
14286: PUSH
14287: LD_EXP 5
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: LIST
14296: DIFF
14297: PPUSH
14298: LD_STRING D9b-Sol1-1
14300: PPUSH
14301: LD_STRING D9b-Sol1-1
14303: PPUSH
14304: CALL 10327 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
14308: LD_STRING 09_arInfo
14310: PPUSH
14311: LD_INT 0
14313: PPUSH
14314: CALL_OW 30
14318: PUSH
14319: LD_INT 1
14321: EQUAL
14322: IFFALSE 14336
// Say ( JMM , D9a-JMM-1 ) ;
14324: LD_EXP 1
14328: PPUSH
14329: LD_STRING D9a-JMM-1
14331: PPUSH
14332: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
14336: LD_EXP 1
14340: PPUSH
14341: LD_STRING D9c-JMM-1
14343: PPUSH
14344: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
14348: LD_INT 12
14350: PPUSH
14351: LD_INT 1
14353: PPUSH
14354: CALL_OW 321
14358: PUSH
14359: LD_INT 2
14361: EQUAL
14362: IFFALSE 14376
// Say ( JMM , D9c-JMM-1a ) ;
14364: LD_EXP 1
14368: PPUSH
14369: LD_STRING D9c-JMM-1a
14371: PPUSH
14372: CALL_OW 88
// DialogueOff ;
14376: CALL_OW 7
// end ; end ; 2 :
14380: GO 14880
14382: LD_INT 2
14384: DOUBLE
14385: EQUAL
14386: IFTRUE 14390
14388: GO 14848
14390: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
14391: LD_VAR 0 7
14395: PUSH
14396: LD_VAR 0 6
14400: ARRAY
14401: PPUSH
14402: LD_VAR 0 4
14406: PPUSH
14407: CALL_OW 250
14411: PUSH
14412: LD_INT 1
14414: NEG
14415: PPUSH
14416: LD_INT 1
14418: PPUSH
14419: CALL_OW 12
14423: PLUS
14424: PPUSH
14425: LD_VAR 0 4
14429: PPUSH
14430: CALL_OW 251
14434: PUSH
14435: LD_INT 1
14437: NEG
14438: PPUSH
14439: LD_INT 1
14441: PPUSH
14442: CALL_OW 12
14446: PLUS
14447: PPUSH
14448: CALL_OW 153
// if eventVar2 = 0 then
14452: LD_EXP 64
14456: PUSH
14457: LD_INT 0
14459: EQUAL
14460: IFFALSE 14846
// begin eventVar2 = 1 ;
14462: LD_ADDR_EXP 64
14466: PUSH
14467: LD_INT 1
14469: ST_TO_ADDR
// wait ( 0 0$7 ) ;
14470: LD_INT 245
14472: PPUSH
14473: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
14477: LD_VAR 0 4
14481: PPUSH
14482: CALL_OW 250
14486: PPUSH
14487: LD_VAR 0 4
14491: PPUSH
14492: CALL_OW 251
14496: PPUSH
14497: CALL_OW 84
// DialogueOn ;
14501: CALL_OW 6
// if IsOK ( Cyrus ) then
14505: LD_EXP 5
14509: PPUSH
14510: CALL_OW 302
14514: IFFALSE 14530
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
14516: LD_EXP 5
14520: PPUSH
14521: LD_STRING D9a-Cyrus-1
14523: PPUSH
14524: CALL_OW 88
// end else
14528: GO 14652
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
14530: LD_INT 22
14532: PUSH
14533: LD_INT 1
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PUSH
14540: LD_INT 26
14542: PUSH
14543: LD_INT 1
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: PUSH
14550: LD_INT 2
14552: PUSH
14553: LD_INT 25
14555: PUSH
14556: LD_INT 1
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: PUSH
14563: LD_INT 25
14565: PUSH
14566: LD_INT 2
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: PUSH
14573: LD_INT 25
14575: PUSH
14576: LD_INT 3
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PUSH
14583: LD_INT 25
14585: PUSH
14586: LD_INT 4
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: PUSH
14593: LD_INT 25
14595: PUSH
14596: LD_INT 5
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: PUSH
14611: EMPTY
14612: LIST
14613: LIST
14614: LIST
14615: PPUSH
14616: CALL_OW 69
14620: PUSH
14621: LD_EXP 1
14625: PUSH
14626: LD_EXP 14
14630: PUSH
14631: LD_EXP 5
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: LIST
14640: DIFF
14641: PPUSH
14642: LD_STRING D9a-Sol1-1
14644: PPUSH
14645: LD_STRING D9a-Sol1-1
14647: PPUSH
14648: CALL 10327 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
14652: LD_INT 22
14654: PUSH
14655: LD_INT 1
14657: PUSH
14658: EMPTY
14659: LIST
14660: LIST
14661: PUSH
14662: LD_INT 26
14664: PUSH
14665: LD_INT 1
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: PUSH
14672: LD_INT 2
14674: PUSH
14675: LD_INT 25
14677: PUSH
14678: LD_INT 1
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PUSH
14685: LD_INT 25
14687: PUSH
14688: LD_INT 2
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PUSH
14695: LD_INT 25
14697: PUSH
14698: LD_INT 3
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PUSH
14705: LD_INT 25
14707: PUSH
14708: LD_INT 4
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PUSH
14715: LD_INT 25
14717: PUSH
14718: LD_INT 5
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: LIST
14737: PPUSH
14738: CALL_OW 69
14742: PUSH
14743: LD_EXP 1
14747: PUSH
14748: LD_EXP 14
14752: PUSH
14753: LD_EXP 5
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: LIST
14762: DIFF
14763: PPUSH
14764: LD_STRING D9b-Sol1-1
14766: PPUSH
14767: LD_STRING D9b-Sol1-1
14769: PPUSH
14770: CALL 10327 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
14774: LD_STRING 09_arInfo
14776: PPUSH
14777: LD_INT 0
14779: PPUSH
14780: CALL_OW 30
14784: PUSH
14785: LD_INT 1
14787: EQUAL
14788: IFFALSE 14802
// Say ( JMM , D9a-JMM-1 ) ;
14790: LD_EXP 1
14794: PPUSH
14795: LD_STRING D9a-JMM-1
14797: PPUSH
14798: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
14802: LD_EXP 1
14806: PPUSH
14807: LD_STRING D9c-JMM-1
14809: PPUSH
14810: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
14814: LD_INT 12
14816: PPUSH
14817: LD_INT 1
14819: PPUSH
14820: CALL_OW 321
14824: PUSH
14825: LD_INT 2
14827: EQUAL
14828: IFFALSE 14842
// Say ( JMM , D9c-JMM-1a ) ;
14830: LD_EXP 1
14834: PPUSH
14835: LD_STRING D9c-JMM-1a
14837: PPUSH
14838: CALL_OW 88
// DialogueOff ;
14842: CALL_OW 7
// end ; end ; 3 :
14846: GO 14880
14848: LD_INT 3
14850: DOUBLE
14851: EQUAL
14852: IFTRUE 14856
14854: GO 14879
14856: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14857: LD_VAR 0 7
14861: PUSH
14862: LD_VAR 0 6
14866: ARRAY
14867: PPUSH
14868: LD_VAR 0 4
14872: PPUSH
14873: CALL_OW 115
14877: GO 14880
14879: POP
// end ; end ;
14880: GO 13908
14882: POP
14883: POP
14884: GO 13895
14886: POP
14887: POP
// end ;
14888: LD_VAR 0 3
14892: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
14893: LD_INT 0
14895: PPUSH
14896: PPUSH
14897: PPUSH
14898: PPUSH
// for i = 1 to 72 do
14899: LD_ADDR_VAR 0 5
14903: PUSH
14904: DOUBLE
14905: LD_INT 1
14907: DEC
14908: ST_TO_ADDR
14909: LD_INT 72
14911: PUSH
14912: FOR_TO
14913: IFFALSE 14971
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
14915: LD_VAR 0 5
14919: PPUSH
14920: LD_VAR 0 1
14924: PPUSH
14925: CALL_OW 321
14929: PUSH
14930: LD_INT 1
14932: EQUAL
14933: PUSH
14934: LD_VAR 0 5
14938: PPUSH
14939: LD_VAR 0 3
14943: PPUSH
14944: CALL_OW 482
14948: PUSH
14949: LD_INT 1
14951: EQUAL
14952: AND
14953: IFFALSE 14969
// AddComResearch ( lab , i ) ;
14955: LD_VAR 0 2
14959: PPUSH
14960: LD_VAR 0 5
14964: PPUSH
14965: CALL_OW 184
14969: GO 14912
14971: POP
14972: POP
// end ;
14973: LD_VAR 0 4
14977: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
14978: LD_INT 0
14980: PPUSH
14981: PPUSH
14982: PPUSH
14983: PPUSH
14984: PPUSH
14985: PPUSH
14986: PPUSH
14987: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
14988: LD_ADDR_VAR 0 6
14992: PUSH
14993: LD_INT 22
14995: PUSH
14996: LD_VAR 0 1
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: LD_INT 56
15007: PUSH
15008: EMPTY
15009: LIST
15010: PUSH
15011: LD_INT 24
15013: PUSH
15014: LD_INT 700
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PUSH
15021: LD_INT 3
15023: PUSH
15024: LD_INT 60
15026: PUSH
15027: EMPTY
15028: LIST
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: LD_INT 2
15036: PUSH
15037: LD_INT 25
15039: PUSH
15040: LD_INT 1
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: PUSH
15047: LD_INT 25
15049: PUSH
15050: LD_INT 9
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: LIST
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: PPUSH
15069: CALL_OW 69
15073: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
15074: LD_ADDR_VAR 0 7
15078: PUSH
15079: LD_INT 22
15081: PUSH
15082: LD_VAR 0 1
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 30
15093: PUSH
15094: LD_INT 32
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PUSH
15101: LD_INT 58
15103: PUSH
15104: EMPTY
15105: LIST
15106: PUSH
15107: LD_INT 24
15109: PUSH
15110: LD_INT 251
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: PPUSH
15123: CALL_OW 69
15127: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
15128: LD_ADDR_VAR 0 9
15132: PUSH
15133: LD_INT 22
15135: PUSH
15136: LD_VAR 0 1
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: PUSH
15145: LD_INT 2
15147: PUSH
15148: LD_INT 30
15150: PUSH
15151: LD_INT 4
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: PUSH
15158: LD_INT 30
15160: PUSH
15161: LD_INT 5
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: LIST
15172: PUSH
15173: LD_INT 24
15175: PUSH
15176: LD_INT 251
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: LIST
15187: PPUSH
15188: CALL_OW 69
15192: ST_TO_ADDR
// if barrackList > 0 then
15193: LD_VAR 0 9
15197: PUSH
15198: LD_INT 0
15200: GREATER
15201: IFFALSE 15336
// begin if turretList = 0 then
15203: LD_VAR 0 7
15207: PUSH
15208: LD_INT 0
15210: EQUAL
15211: IFFALSE 15260
// begin for i in soldiers_list do
15213: LD_ADDR_VAR 0 4
15217: PUSH
15218: LD_VAR 0 6
15222: PUSH
15223: FOR_IN
15224: IFFALSE 15256
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
15226: LD_VAR 0 4
15230: PPUSH
15231: LD_VAR 0 9
15235: PUSH
15236: LD_INT 1
15238: PPUSH
15239: LD_VAR 0 9
15243: PPUSH
15244: CALL_OW 12
15248: ARRAY
15249: PPUSH
15250: CALL_OW 120
15254: GO 15223
15256: POP
15257: POP
// end else
15258: GO 15336
// begin for i in barrackList do
15260: LD_ADDR_VAR 0 4
15264: PUSH
15265: LD_VAR 0 9
15269: PUSH
15270: FOR_IN
15271: IFFALSE 15334
// begin insideUnits = UnitsInside ( i ) ;
15273: LD_ADDR_VAR 0 10
15277: PUSH
15278: LD_VAR 0 4
15282: PPUSH
15283: CALL_OW 313
15287: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
15288: LD_VAR 0 10
15292: PUSH
15293: LD_INT 1
15295: ARRAY
15296: PPUSH
15297: LD_VAR 0 7
15301: PUSH
15302: LD_INT 1
15304: ARRAY
15305: PPUSH
15306: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
15310: LD_VAR 0 6
15314: PUSH
15315: LD_INT 1
15317: ARRAY
15318: PPUSH
15319: LD_VAR 0 7
15323: PUSH
15324: LD_INT 1
15326: ARRAY
15327: PPUSH
15328: CALL_OW 120
// end ;
15332: GO 15270
15334: POP
15335: POP
// end ; end ; end ;
15336: LD_VAR 0 3
15340: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
15341: LD_INT 0
15343: PPUSH
15344: PPUSH
15345: PPUSH
15346: PPUSH
15347: PPUSH
15348: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
15349: LD_ADDR_VAR 0 6
15353: PUSH
15354: LD_VAR 0 2
15358: PPUSH
15359: CALL_OW 313
15363: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
15364: LD_ADDR_VAR 0 7
15368: PUSH
15369: LD_INT 22
15371: PUSH
15372: LD_VAR 0 1
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: LD_INT 25
15383: PUSH
15384: LD_INT 2
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 24
15393: PUSH
15394: LD_INT 1000
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 3
15403: PUSH
15404: LD_INT 54
15406: PUSH
15407: EMPTY
15408: LIST
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: PPUSH
15420: CALL_OW 69
15424: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
15425: LD_ADDR_VAR 0 4
15429: PUSH
15430: LD_INT 22
15432: PUSH
15433: LD_VAR 0 1
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: PUSH
15442: LD_INT 21
15444: PUSH
15445: LD_INT 3
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: PUSH
15452: LD_INT 3
15454: PUSH
15455: LD_INT 24
15457: PUSH
15458: LD_INT 1000
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: LIST
15473: PUSH
15474: EMPTY
15475: LIST
15476: PPUSH
15477: CALL_OW 69
15481: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
15482: LD_VAR 0 4
15486: NOT
15487: PUSH
15488: LD_VAR 0 7
15492: NOT
15493: AND
15494: PUSH
15495: LD_EXP 42
15499: NOT
15500: AND
15501: IFFALSE 15505
// exit ;
15503: GO 15696
// if buildings_list > 0 and engineerOkInside then
15505: LD_VAR 0 4
15509: PUSH
15510: LD_INT 0
15512: GREATER
15513: PUSH
15514: LD_VAR 0 6
15518: AND
15519: IFFALSE 15573
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
15521: LD_ADDR_VAR 0 5
15525: PUSH
15526: LD_INT 22
15528: PUSH
15529: LD_VAR 0 1
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PUSH
15538: LD_INT 25
15540: PUSH
15541: LD_INT 2
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PPUSH
15552: CALL_OW 69
15556: PUSH
15557: FOR_IN
15558: IFFALSE 15571
// ComExitBuilding ( i ) ;
15560: LD_VAR 0 5
15564: PPUSH
15565: CALL_OW 122
15569: GO 15557
15571: POP
15572: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
15573: LD_VAR 0 4
15577: PUSH
15578: LD_INT 0
15580: GREATER
15581: PUSH
15582: LD_VAR 0 7
15586: PUSH
15587: LD_INT 0
15589: GREATER
15590: AND
15591: IFFALSE 15645
// begin for i in engineerOkOutside do
15593: LD_ADDR_VAR 0 5
15597: PUSH
15598: LD_VAR 0 7
15602: PUSH
15603: FOR_IN
15604: IFFALSE 15643
// for j in buildings_list do
15606: LD_ADDR_VAR 0 8
15610: PUSH
15611: LD_VAR 0 4
15615: PUSH
15616: FOR_IN
15617: IFFALSE 15639
// ComRepairBuilding ( i , j [ 1 ] ) ;
15619: LD_VAR 0 5
15623: PPUSH
15624: LD_VAR 0 8
15628: PUSH
15629: LD_INT 1
15631: ARRAY
15632: PPUSH
15633: CALL_OW 130
15637: GO 15616
15639: POP
15640: POP
15641: GO 15603
15643: POP
15644: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
15645: LD_VAR 0 4
15649: PUSH
15650: LD_INT 0
15652: EQUAL
15653: PUSH
15654: LD_VAR 0 7
15658: PUSH
15659: LD_INT 0
15661: GREATER
15662: AND
15663: IFFALSE 15696
// for i in engineerOkOutside do
15665: LD_ADDR_VAR 0 5
15669: PUSH
15670: LD_VAR 0 7
15674: PUSH
15675: FOR_IN
15676: IFFALSE 15694
// ComEnterUnit ( i , building ) ;
15678: LD_VAR 0 5
15682: PPUSH
15683: LD_VAR 0 2
15687: PPUSH
15688: CALL_OW 120
15692: GO 15675
15694: POP
15695: POP
// end ;
15696: LD_VAR 0 3
15700: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
15701: LD_INT 0
15703: PPUSH
15704: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
15705: LD_INT 22
15707: PUSH
15708: LD_VAR 0 1
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: LD_INT 25
15719: PUSH
15720: LD_INT 2
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PPUSH
15731: CALL_OW 69
15735: PUSH
15736: LD_INT 0
15738: GREATER
15739: PUSH
15740: LD_INT 22
15742: PUSH
15743: LD_VAR 0 1
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: PUSH
15752: LD_INT 21
15754: PUSH
15755: LD_INT 3
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: PUSH
15762: LD_INT 3
15764: PUSH
15765: LD_INT 24
15767: PUSH
15768: LD_INT 1000
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: LIST
15783: PPUSH
15784: CALL_OW 69
15788: PUSH
15789: LD_INT 0
15791: EQUAL
15792: AND
15793: PUSH
15794: LD_VAR 0 2
15798: PUSH
15799: LD_INT 0
15801: GREATER
15802: AND
15803: IFFALSE 15902
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
15805: LD_ADDR_VAR 0 4
15809: PUSH
15810: LD_INT 22
15812: PUSH
15813: LD_VAR 0 1
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 25
15824: PUSH
15825: LD_INT 2
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PPUSH
15836: CALL_OW 69
15840: PUSH
15841: FOR_IN
15842: IFFALSE 15900
// begin AddComExitBuilding ( i ) ;
15844: LD_VAR 0 4
15848: PPUSH
15849: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
15853: LD_VAR 0 4
15857: PPUSH
15858: LD_VAR 0 2
15862: PUSH
15863: LD_INT 1
15865: ARRAY
15866: PPUSH
15867: LD_VAR 0 2
15871: PUSH
15872: LD_INT 2
15874: ARRAY
15875: PPUSH
15876: LD_VAR 0 2
15880: PUSH
15881: LD_INT 3
15883: ARRAY
15884: PPUSH
15885: LD_VAR 0 2
15889: PUSH
15890: LD_INT 4
15892: ARRAY
15893: PPUSH
15894: CALL_OW 205
// end ;
15898: GO 15841
15900: POP
15901: POP
// end ; end ;
15902: LD_VAR 0 3
15906: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
15907: LD_INT 0
15909: PPUSH
15910: PPUSH
15911: PPUSH
15912: PPUSH
15913: PPUSH
15914: PPUSH
15915: PPUSH
15916: PPUSH
15917: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
15918: LD_ADDR_VAR 0 6
15922: PUSH
15923: LD_INT 22
15925: PUSH
15926: LD_VAR 0 1
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PUSH
15935: LD_INT 25
15937: PUSH
15938: LD_INT 4
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: PUSH
15945: LD_INT 24
15947: PUSH
15948: LD_INT 251
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: LIST
15959: PPUSH
15960: CALL_OW 69
15964: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
15965: LD_ADDR_VAR 0 7
15969: PUSH
15970: LD_VAR 0 3
15974: PPUSH
15975: LD_INT 22
15977: PUSH
15978: LD_VAR 0 1
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: LD_INT 25
15989: PUSH
15990: LD_INT 4
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PUSH
15997: LD_INT 50
15999: PUSH
16000: EMPTY
16001: LIST
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: LIST
16007: PPUSH
16008: CALL_OW 70
16012: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
16013: LD_ADDR_VAR 0 10
16017: PUSH
16018: LD_VAR 0 3
16022: PPUSH
16023: LD_INT 22
16025: PUSH
16026: LD_VAR 0 1
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PUSH
16035: LD_INT 21
16037: PUSH
16038: LD_INT 1
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: PUSH
16045: LD_INT 3
16047: PUSH
16048: LD_INT 25
16050: PUSH
16051: LD_INT 3
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: PUSH
16062: LD_INT 3
16064: PUSH
16065: LD_INT 24
16067: PUSH
16068: LD_INT 750
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: PPUSH
16085: CALL_OW 70
16089: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16090: LD_ADDR_VAR 0 11
16094: PUSH
16095: LD_VAR 0 2
16099: PPUSH
16100: LD_INT 22
16102: PUSH
16103: LD_VAR 0 1
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 21
16114: PUSH
16115: LD_INT 1
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: LD_INT 3
16124: PUSH
16125: LD_INT 25
16127: PUSH
16128: LD_INT 3
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PUSH
16139: LD_INT 3
16141: PUSH
16142: LD_INT 24
16144: PUSH
16145: LD_INT 1000
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: PPUSH
16162: CALL_OW 70
16166: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
16167: LD_VAR 0 10
16171: NOT
16172: PUSH
16173: LD_VAR 0 7
16177: NOT
16178: AND
16179: PUSH
16180: LD_VAR 0 11
16184: NOT
16185: AND
16186: IFFALSE 16190
// exit ;
16188: GO 16450
// if damageUnits > 0 and sci_list > 0 then
16190: LD_VAR 0 10
16194: PUSH
16195: LD_INT 0
16197: GREATER
16198: PUSH
16199: LD_VAR 0 6
16203: PUSH
16204: LD_INT 0
16206: GREATER
16207: AND
16208: IFFALSE 16241
// for i in damageUnits do
16210: LD_ADDR_VAR 0 8
16214: PUSH
16215: LD_VAR 0 10
16219: PUSH
16220: FOR_IN
16221: IFFALSE 16239
// ComMoveToArea ( i , healArea ) ;
16223: LD_VAR 0 8
16227: PPUSH
16228: LD_VAR 0 2
16232: PPUSH
16233: CALL_OW 113
16237: GO 16220
16239: POP
16240: POP
// if unitsToHeal > 0 and sci_list > 0 then
16241: LD_VAR 0 11
16245: PUSH
16246: LD_INT 0
16248: GREATER
16249: PUSH
16250: LD_VAR 0 6
16254: PUSH
16255: LD_INT 0
16257: GREATER
16258: AND
16259: IFFALSE 16318
// begin for i in sci_list do
16261: LD_ADDR_VAR 0 8
16265: PUSH
16266: LD_VAR 0 6
16270: PUSH
16271: FOR_IN
16272: IFFALSE 16316
// begin ComExitBuilding ( i ) ;
16274: LD_VAR 0 8
16278: PPUSH
16279: CALL_OW 122
// for j in unitsToHeal do
16283: LD_ADDR_VAR 0 9
16287: PUSH
16288: LD_VAR 0 11
16292: PUSH
16293: FOR_IN
16294: IFFALSE 16312
// AddComHeal ( i , j ) ;
16296: LD_VAR 0 8
16300: PPUSH
16301: LD_VAR 0 9
16305: PPUSH
16306: CALL_OW 188
16310: GO 16293
16312: POP
16313: POP
// end ;
16314: GO 16271
16316: POP
16317: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
16318: LD_VAR 0 10
16322: PUSH
16323: LD_INT 0
16325: EQUAL
16326: PUSH
16327: LD_VAR 0 11
16331: PUSH
16332: LD_INT 0
16334: EQUAL
16335: AND
16336: PUSH
16337: LD_VAR 0 7
16341: PUSH
16342: LD_INT 0
16344: GREATER
16345: AND
16346: IFFALSE 16450
// for i in sci_listOutside do
16348: LD_ADDR_VAR 0 8
16352: PUSH
16353: LD_VAR 0 7
16357: PUSH
16358: FOR_IN
16359: IFFALSE 16448
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
16361: LD_ADDR_VAR 0 12
16365: PUSH
16366: LD_INT 22
16368: PUSH
16369: LD_VAR 0 1
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: PUSH
16378: LD_INT 21
16380: PUSH
16381: LD_INT 3
16383: PUSH
16384: EMPTY
16385: LIST
16386: LIST
16387: PUSH
16388: LD_INT 30
16390: PUSH
16391: LD_INT 8
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: LIST
16402: PPUSH
16403: CALL_OW 69
16407: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
16408: LD_ADDR_VAR 0 13
16412: PUSH
16413: LD_INT 1
16415: PPUSH
16416: LD_VAR 0 12
16420: PPUSH
16421: CALL_OW 12
16425: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
16426: LD_VAR 0 8
16430: PPUSH
16431: LD_VAR 0 12
16435: PUSH
16436: LD_VAR 0 13
16440: ARRAY
16441: PPUSH
16442: CALL_OW 120
// end ;
16446: GO 16358
16448: POP
16449: POP
// end ;
16450: LD_VAR 0 5
16454: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
16455: LD_INT 0
16457: PPUSH
16458: PPUSH
16459: PPUSH
16460: PPUSH
16461: PPUSH
16462: PPUSH
16463: PPUSH
16464: PPUSH
16465: PPUSH
16466: PPUSH
16467: PPUSH
// amChassisTab = [ ] ;
16468: LD_ADDR_VAR 0 19
16472: PUSH
16473: EMPTY
16474: ST_TO_ADDR
// arChassisTab = [ ] ;
16475: LD_ADDR_VAR 0 18
16479: PUSH
16480: EMPTY
16481: ST_TO_ADDR
// ruChassisTab = [ ] ;
16482: LD_ADDR_VAR 0 17
16486: PUSH
16487: EMPTY
16488: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
16489: LD_INT 35
16491: PPUSH
16492: CALL_OW 67
// if nation = 1 then
16496: LD_VAR 0 5
16500: PUSH
16501: LD_INT 1
16503: EQUAL
16504: IFFALSE 17009
// begin uc_side = side ;
16506: LD_ADDR_OWVAR 20
16510: PUSH
16511: LD_VAR 0 2
16515: ST_TO_ADDR
// uc_nation = nation ;
16516: LD_ADDR_OWVAR 21
16520: PUSH
16521: LD_VAR 0 5
16525: ST_TO_ADDR
// vc_engine = vehengine ;
16526: LD_ADDR_OWVAR 39
16530: PUSH
16531: LD_VAR 0 6
16535: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16536: LD_ADDR_OWVAR 38
16540: PUSH
16541: LD_VAR 0 7
16545: PUSH
16546: LD_INT 1
16548: PPUSH
16549: LD_VAR 0 7
16553: PPUSH
16554: CALL_OW 12
16558: ARRAY
16559: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
16560: LD_ADDR_OWVAR 40
16564: PUSH
16565: LD_VAR 0 10
16569: PUSH
16570: LD_INT 1
16572: PPUSH
16573: LD_VAR 0 10
16577: PPUSH
16578: CALL_OW 12
16582: ARRAY
16583: ST_TO_ADDR
// for j = 1 to AMWeapon do
16584: LD_ADDR_VAR 0 14
16588: PUSH
16589: DOUBLE
16590: LD_INT 1
16592: DEC
16593: ST_TO_ADDR
16594: LD_VAR 0 10
16598: PUSH
16599: FOR_TO
16600: IFFALSE 16901
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
16602: LD_VAR 0 10
16606: PUSH
16607: LD_VAR 0 14
16611: ARRAY
16612: PUSH
16613: LD_INT 2
16615: EQUAL
16616: PUSH
16617: LD_VAR 0 10
16621: PUSH
16622: LD_VAR 0 14
16626: ARRAY
16627: PUSH
16628: LD_INT 3
16630: EQUAL
16631: OR
16632: IFFALSE 16685
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
16634: LD_ADDR_VAR 0 19
16638: PUSH
16639: LD_INT 1
16641: PUSH
16642: LD_INT 2
16644: PUSH
16645: LD_INT 3
16647: PUSH
16648: LD_INT 4
16650: PUSH
16651: LD_INT 5
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16661: LD_ADDR_OWVAR 37
16665: PUSH
16666: LD_VAR 0 19
16670: PUSH
16671: LD_INT 1
16673: PPUSH
16674: LD_VAR 0 19
16678: PPUSH
16679: CALL_OW 12
16683: ARRAY
16684: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
16685: LD_VAR 0 10
16689: PUSH
16690: LD_VAR 0 14
16694: ARRAY
16695: PUSH
16696: LD_INT 4
16698: EQUAL
16699: PUSH
16700: LD_VAR 0 10
16704: PUSH
16705: LD_VAR 0 14
16709: ARRAY
16710: PUSH
16711: LD_INT 5
16713: EQUAL
16714: OR
16715: PUSH
16716: LD_VAR 0 10
16720: PUSH
16721: LD_VAR 0 14
16725: ARRAY
16726: PUSH
16727: LD_INT 9
16729: EQUAL
16730: OR
16731: PUSH
16732: LD_VAR 0 10
16736: PUSH
16737: LD_VAR 0 14
16741: ARRAY
16742: PUSH
16743: LD_INT 11
16745: EQUAL
16746: OR
16747: PUSH
16748: LD_VAR 0 10
16752: PUSH
16753: LD_VAR 0 14
16757: ARRAY
16758: PUSH
16759: LD_INT 7
16761: EQUAL
16762: OR
16763: IFFALSE 16812
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
16765: LD_ADDR_VAR 0 19
16769: PUSH
16770: LD_INT 2
16772: PUSH
16773: LD_INT 3
16775: PUSH
16776: LD_INT 4
16778: PUSH
16779: LD_INT 5
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16788: LD_ADDR_OWVAR 37
16792: PUSH
16793: LD_VAR 0 19
16797: PUSH
16798: LD_INT 1
16800: PPUSH
16801: LD_VAR 0 19
16805: PPUSH
16806: CALL_OW 12
16810: ARRAY
16811: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
16812: LD_VAR 0 10
16816: PUSH
16817: LD_VAR 0 14
16821: ARRAY
16822: PUSH
16823: LD_INT 8
16825: EQUAL
16826: PUSH
16827: LD_VAR 0 10
16831: PUSH
16832: LD_VAR 0 14
16836: ARRAY
16837: PUSH
16838: LD_INT 6
16840: EQUAL
16841: OR
16842: PUSH
16843: LD_VAR 0 10
16847: PUSH
16848: LD_VAR 0 14
16852: ARRAY
16853: PUSH
16854: LD_INT 10
16856: EQUAL
16857: OR
16858: IFFALSE 16899
// begin amChassisTab = [ 4 , 5 ] ;
16860: LD_ADDR_VAR 0 19
16864: PUSH
16865: LD_INT 4
16867: PUSH
16868: LD_INT 5
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16875: LD_ADDR_OWVAR 37
16879: PUSH
16880: LD_VAR 0 19
16884: PUSH
16885: LD_INT 1
16887: PPUSH
16888: LD_VAR 0 19
16892: PPUSH
16893: CALL_OW 12
16897: ARRAY
16898: ST_TO_ADDR
// end ; end ;
16899: GO 16599
16901: POP
16902: POP
// veh = CreateVehicle ;
16903: LD_ADDR_VAR 0 16
16907: PUSH
16908: CALL_OW 45
16912: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16913: LD_VAR 0 16
16917: PPUSH
16918: LD_VAR 0 1
16922: PPUSH
16923: LD_INT 0
16925: PPUSH
16926: CALL_OW 49
// if vc_control = 1 then
16930: LD_OWVAR 38
16934: PUSH
16935: LD_INT 1
16937: EQUAL
16938: IFFALSE 16995
// begin hc_gallery =  ;
16940: LD_ADDR_OWVAR 33
16944: PUSH
16945: LD_STRING 
16947: ST_TO_ADDR
// hc_name =  ;
16948: LD_ADDR_OWVAR 26
16952: PUSH
16953: LD_STRING 
16955: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16956: LD_INT 0
16958: PPUSH
16959: LD_INT 3
16961: PPUSH
16962: LD_VAR 0 4
16966: PPUSH
16967: CALL_OW 380
// un = CreateHuman ;
16971: LD_ADDR_VAR 0 15
16975: PUSH
16976: CALL_OW 44
16980: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16981: LD_VAR 0 15
16985: PPUSH
16986: LD_VAR 0 16
16990: PPUSH
16991: CALL_OW 52
// end ; i = i + 1 ;
16995: LD_ADDR_VAR 0 13
16999: PUSH
17000: LD_VAR 0 13
17004: PUSH
17005: LD_INT 1
17007: PLUS
17008: ST_TO_ADDR
// end ; if nation = 2 then
17009: LD_VAR 0 5
17013: PUSH
17014: LD_INT 2
17016: EQUAL
17017: IFFALSE 17439
// begin uc_side = side ;
17019: LD_ADDR_OWVAR 20
17023: PUSH
17024: LD_VAR 0 2
17028: ST_TO_ADDR
// uc_nation = nation ;
17029: LD_ADDR_OWVAR 21
17033: PUSH
17034: LD_VAR 0 5
17038: ST_TO_ADDR
// vc_engine = vehengine ;
17039: LD_ADDR_OWVAR 39
17043: PUSH
17044: LD_VAR 0 6
17048: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17049: LD_ADDR_OWVAR 38
17053: PUSH
17054: LD_VAR 0 7
17058: PUSH
17059: LD_INT 1
17061: PPUSH
17062: LD_VAR 0 7
17066: PPUSH
17067: CALL_OW 12
17071: ARRAY
17072: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
17073: LD_ADDR_OWVAR 40
17077: PUSH
17078: LD_VAR 0 9
17082: PUSH
17083: LD_INT 1
17085: PPUSH
17086: LD_VAR 0 9
17090: PPUSH
17091: CALL_OW 12
17095: ARRAY
17096: ST_TO_ADDR
// for j = 1 to ARWeapons do
17097: LD_ADDR_VAR 0 14
17101: PUSH
17102: DOUBLE
17103: LD_INT 1
17105: DEC
17106: ST_TO_ADDR
17107: LD_VAR 0 9
17111: PUSH
17112: FOR_TO
17113: IFFALSE 17331
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
17115: LD_VAR 0 9
17119: PUSH
17120: LD_VAR 0 14
17124: ARRAY
17125: PUSH
17126: LD_INT 24
17128: EQUAL
17129: PUSH
17130: LD_VAR 0 9
17134: PUSH
17135: LD_VAR 0 14
17139: ARRAY
17140: PUSH
17141: LD_INT 22
17143: EQUAL
17144: OR
17145: PUSH
17146: LD_VAR 0 9
17150: PUSH
17151: LD_VAR 0 14
17155: ARRAY
17156: PUSH
17157: LD_INT 23
17159: EQUAL
17160: OR
17161: PUSH
17162: LD_VAR 0 9
17166: PUSH
17167: LD_VAR 0 14
17171: ARRAY
17172: PUSH
17173: LD_INT 30
17175: EQUAL
17176: OR
17177: IFFALSE 17214
// begin arChassisTab = [ 14 ] ;
17179: LD_ADDR_VAR 0 18
17183: PUSH
17184: LD_INT 14
17186: PUSH
17187: EMPTY
17188: LIST
17189: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
17190: LD_ADDR_OWVAR 37
17194: PUSH
17195: LD_VAR 0 18
17199: PUSH
17200: LD_INT 1
17202: PPUSH
17203: LD_VAR 0 18
17207: PPUSH
17208: CALL_OW 12
17212: ARRAY
17213: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
17214: LD_VAR 0 9
17218: PUSH
17219: LD_VAR 0 14
17223: ARRAY
17224: PUSH
17225: LD_INT 29
17227: EQUAL
17228: PUSH
17229: LD_VAR 0 9
17233: PUSH
17234: LD_VAR 0 14
17238: ARRAY
17239: PUSH
17240: LD_INT 28
17242: EQUAL
17243: OR
17244: PUSH
17245: LD_VAR 0 9
17249: PUSH
17250: LD_VAR 0 14
17254: ARRAY
17255: PUSH
17256: LD_INT 27
17258: EQUAL
17259: OR
17260: PUSH
17261: LD_VAR 0 9
17265: PUSH
17266: LD_VAR 0 14
17270: ARRAY
17271: PUSH
17272: LD_INT 26
17274: EQUAL
17275: OR
17276: PUSH
17277: LD_VAR 0 9
17281: PUSH
17282: LD_VAR 0 14
17286: ARRAY
17287: PUSH
17288: LD_INT 25
17290: EQUAL
17291: OR
17292: IFFALSE 17329
// begin arChassisTab = [ 14 ] ;
17294: LD_ADDR_VAR 0 18
17298: PUSH
17299: LD_INT 14
17301: PUSH
17302: EMPTY
17303: LIST
17304: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
17305: LD_ADDR_OWVAR 37
17309: PUSH
17310: LD_VAR 0 18
17314: PUSH
17315: LD_INT 1
17317: PPUSH
17318: LD_VAR 0 18
17322: PPUSH
17323: CALL_OW 12
17327: ARRAY
17328: ST_TO_ADDR
// end ; end ;
17329: GO 17112
17331: POP
17332: POP
// veh = CreateVehicle ;
17333: LD_ADDR_VAR 0 16
17337: PUSH
17338: CALL_OW 45
17342: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17343: LD_VAR 0 16
17347: PPUSH
17348: LD_VAR 0 1
17352: PPUSH
17353: LD_INT 0
17355: PPUSH
17356: CALL_OW 49
// if vc_control = 1 then
17360: LD_OWVAR 38
17364: PUSH
17365: LD_INT 1
17367: EQUAL
17368: IFFALSE 17425
// begin hc_gallery =  ;
17370: LD_ADDR_OWVAR 33
17374: PUSH
17375: LD_STRING 
17377: ST_TO_ADDR
// hc_name =  ;
17378: LD_ADDR_OWVAR 26
17382: PUSH
17383: LD_STRING 
17385: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17386: LD_INT 0
17388: PPUSH
17389: LD_INT 3
17391: PPUSH
17392: LD_VAR 0 4
17396: PPUSH
17397: CALL_OW 380
// un = CreateHuman ;
17401: LD_ADDR_VAR 0 15
17405: PUSH
17406: CALL_OW 44
17410: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17411: LD_VAR 0 15
17415: PPUSH
17416: LD_VAR 0 16
17420: PPUSH
17421: CALL_OW 52
// end ; i = i + 1 ;
17425: LD_ADDR_VAR 0 13
17429: PUSH
17430: LD_VAR 0 13
17434: PUSH
17435: LD_INT 1
17437: PLUS
17438: ST_TO_ADDR
// end ; if nation = 3 then
17439: LD_VAR 0 5
17443: PUSH
17444: LD_INT 3
17446: EQUAL
17447: IFFALSE 17853
// begin uc_side = side ;
17449: LD_ADDR_OWVAR 20
17453: PUSH
17454: LD_VAR 0 2
17458: ST_TO_ADDR
// uc_nation = nation ;
17459: LD_ADDR_OWVAR 21
17463: PUSH
17464: LD_VAR 0 5
17468: ST_TO_ADDR
// vc_engine = vehengine ;
17469: LD_ADDR_OWVAR 39
17473: PUSH
17474: LD_VAR 0 6
17478: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17479: LD_ADDR_OWVAR 38
17483: PUSH
17484: LD_VAR 0 7
17488: PUSH
17489: LD_INT 1
17491: PPUSH
17492: LD_VAR 0 7
17496: PPUSH
17497: CALL_OW 12
17501: ARRAY
17502: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
17503: LD_ADDR_OWVAR 40
17507: PUSH
17508: LD_VAR 0 8
17512: PUSH
17513: LD_INT 1
17515: PPUSH
17516: LD_VAR 0 8
17520: PPUSH
17521: CALL_OW 12
17525: ARRAY
17526: ST_TO_ADDR
// for j = 1 to RuWeapons do
17527: LD_ADDR_VAR 0 14
17531: PUSH
17532: DOUBLE
17533: LD_INT 1
17535: DEC
17536: ST_TO_ADDR
17537: LD_VAR 0 8
17541: PUSH
17542: FOR_TO
17543: IFFALSE 17745
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
17545: LD_VAR 0 8
17549: PUSH
17550: LD_VAR 0 14
17554: ARRAY
17555: PUSH
17556: LD_INT 42
17558: EQUAL
17559: PUSH
17560: LD_VAR 0 8
17564: PUSH
17565: LD_VAR 0 14
17569: ARRAY
17570: PUSH
17571: LD_INT 43
17573: EQUAL
17574: OR
17575: PUSH
17576: LD_VAR 0 8
17580: PUSH
17581: LD_VAR 0 14
17585: ARRAY
17586: PUSH
17587: LD_INT 44
17589: EQUAL
17590: OR
17591: PUSH
17592: LD_VAR 0 8
17596: PUSH
17597: LD_VAR 0 14
17601: ARRAY
17602: PUSH
17603: LD_INT 45
17605: EQUAL
17606: OR
17607: PUSH
17608: LD_VAR 0 8
17612: PUSH
17613: LD_VAR 0 14
17617: ARRAY
17618: PUSH
17619: LD_INT 49
17621: EQUAL
17622: OR
17623: IFFALSE 17672
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
17625: LD_ADDR_VAR 0 17
17629: PUSH
17630: LD_INT 21
17632: PUSH
17633: LD_INT 22
17635: PUSH
17636: LD_INT 23
17638: PUSH
17639: LD_INT 24
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
17648: LD_ADDR_OWVAR 37
17652: PUSH
17653: LD_VAR 0 17
17657: PUSH
17658: LD_INT 1
17660: PPUSH
17661: LD_VAR 0 17
17665: PPUSH
17666: CALL_OW 12
17670: ARRAY
17671: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
17672: LD_VAR 0 8
17676: PUSH
17677: LD_VAR 0 14
17681: ARRAY
17682: PUSH
17683: LD_INT 46
17685: EQUAL
17686: PUSH
17687: LD_VAR 0 8
17691: PUSH
17692: LD_VAR 0 14
17696: ARRAY
17697: PUSH
17698: LD_INT 47
17700: EQUAL
17701: OR
17702: IFFALSE 17743
// begin ruChassisTab = [ 23 , 24 ] ;
17704: LD_ADDR_VAR 0 17
17708: PUSH
17709: LD_INT 23
17711: PUSH
17712: LD_INT 24
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
17719: LD_ADDR_OWVAR 37
17723: PUSH
17724: LD_VAR 0 17
17728: PUSH
17729: LD_INT 1
17731: PPUSH
17732: LD_VAR 0 17
17736: PPUSH
17737: CALL_OW 12
17741: ARRAY
17742: ST_TO_ADDR
// end ; end ;
17743: GO 17542
17745: POP
17746: POP
// veh = CreateVehicle ;
17747: LD_ADDR_VAR 0 16
17751: PUSH
17752: CALL_OW 45
17756: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17757: LD_VAR 0 16
17761: PPUSH
17762: LD_VAR 0 1
17766: PPUSH
17767: LD_INT 0
17769: PPUSH
17770: CALL_OW 49
// if vc_control = 1 then
17774: LD_OWVAR 38
17778: PUSH
17779: LD_INT 1
17781: EQUAL
17782: IFFALSE 17839
// begin hc_gallery =  ;
17784: LD_ADDR_OWVAR 33
17788: PUSH
17789: LD_STRING 
17791: ST_TO_ADDR
// hc_name =  ;
17792: LD_ADDR_OWVAR 26
17796: PUSH
17797: LD_STRING 
17799: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17800: LD_INT 0
17802: PPUSH
17803: LD_INT 3
17805: PPUSH
17806: LD_VAR 0 4
17810: PPUSH
17811: CALL_OW 380
// un = CreateHuman ;
17815: LD_ADDR_VAR 0 15
17819: PUSH
17820: CALL_OW 44
17824: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17825: LD_VAR 0 15
17829: PPUSH
17830: LD_VAR 0 16
17834: PPUSH
17835: CALL_OW 52
// end ; i = i + 1 ;
17839: LD_ADDR_VAR 0 13
17843: PUSH
17844: LD_VAR 0 13
17848: PUSH
17849: LD_INT 1
17851: PLUS
17852: ST_TO_ADDR
// end ; until i = vehCount ;
17853: LD_VAR 0 13
17857: PUSH
17858: LD_VAR 0 3
17862: EQUAL
17863: IFFALSE 16489
// repeat wait ( 0 0$1 ) ;
17865: LD_INT 35
17867: PPUSH
17868: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
17872: LD_ADDR_VAR 0 20
17876: PUSH
17877: LD_INT 22
17879: PUSH
17880: LD_VAR 0 2
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PUSH
17889: LD_INT 21
17891: PUSH
17892: LD_INT 2
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 24
17901: PUSH
17902: LD_INT 650
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: LIST
17913: PPUSH
17914: CALL_OW 69
17918: ST_TO_ADDR
// if vehicleOK_list > 0 then
17919: LD_VAR 0 20
17923: PUSH
17924: LD_INT 0
17926: GREATER
17927: IFFALSE 18118
// begin for i in vehicleOK_list do
17929: LD_ADDR_VAR 0 13
17933: PUSH
17934: LD_VAR 0 20
17938: PUSH
17939: FOR_IN
17940: IFFALSE 18116
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
17942: LD_ADDR_VAR 0 21
17946: PUSH
17947: LD_INT 22
17949: PUSH
17950: LD_VAR 0 11
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PPUSH
17959: CALL_OW 69
17963: PPUSH
17964: LD_VAR 0 13
17968: PPUSH
17969: CALL_OW 74
17973: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
17974: LD_ADDR_VAR 0 22
17978: PUSH
17979: LD_INT 22
17981: PUSH
17982: LD_VAR 0 11
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 2
17993: PUSH
17994: LD_INT 59
17996: PUSH
17997: EMPTY
17998: LIST
17999: PUSH
18000: LD_INT 21
18002: PUSH
18003: LD_INT 1
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: LD_INT 21
18012: PUSH
18013: LD_INT 2
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: EMPTY
18031: LIST
18032: PPUSH
18033: CALL_OW 69
18037: PPUSH
18038: LD_VAR 0 13
18042: PPUSH
18043: CALL_OW 74
18047: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18048: LD_VAR 0 13
18052: PPUSH
18053: LD_VAR 0 21
18057: PPUSH
18058: CALL_OW 296
18062: PUSH
18063: LD_INT 8
18065: PLUS
18066: PUSH
18067: LD_VAR 0 13
18071: PPUSH
18072: LD_VAR 0 22
18076: PPUSH
18077: CALL_OW 296
18081: LESS
18082: IFFALSE 18100
// begin ComAttackUnit ( i , target1 ) ;
18084: LD_VAR 0 13
18088: PPUSH
18089: LD_VAR 0 21
18093: PPUSH
18094: CALL_OW 115
// end else
18098: GO 18114
// begin ComAttackUnit ( i , target2 ) ;
18100: LD_VAR 0 13
18104: PPUSH
18105: LD_VAR 0 22
18109: PPUSH
18110: CALL_OW 115
// end ; end ;
18114: GO 17939
18116: POP
18117: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
18118: LD_INT 22
18120: PUSH
18121: LD_VAR 0 2
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 21
18132: PUSH
18133: LD_INT 2
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PPUSH
18144: CALL_OW 69
18148: PUSH
18149: LD_INT 0
18151: EQUAL
18152: IFFALSE 17865
// end ;
18154: LD_VAR 0 12
18158: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
18159: LD_INT 0
18161: PPUSH
18162: PPUSH
18163: PPUSH
18164: PPUSH
18165: PPUSH
18166: PPUSH
18167: PPUSH
18168: PPUSH
18169: PPUSH
18170: PPUSH
18171: PPUSH
// for i = 1 to soldierCount do
18172: LD_ADDR_VAR 0 13
18176: PUSH
18177: DOUBLE
18178: LD_INT 1
18180: DEC
18181: ST_TO_ADDR
18182: LD_VAR 0 3
18186: PUSH
18187: FOR_TO
18188: IFFALSE 18270
// begin uc_side = side ;
18190: LD_ADDR_OWVAR 20
18194: PUSH
18195: LD_VAR 0 1
18199: ST_TO_ADDR
// uc_nation = nation ;
18200: LD_ADDR_OWVAR 21
18204: PUSH
18205: LD_VAR 0 2
18209: ST_TO_ADDR
// hc_name =  ;
18210: LD_ADDR_OWVAR 26
18214: PUSH
18215: LD_STRING 
18217: ST_TO_ADDR
// hc_gallery =  ;
18218: LD_ADDR_OWVAR 33
18222: PUSH
18223: LD_STRING 
18225: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
18226: LD_INT 0
18228: PPUSH
18229: LD_INT 1
18231: PPUSH
18232: LD_VAR 0 8
18236: PPUSH
18237: CALL_OW 380
// un = CreateHuman ;
18241: LD_ADDR_VAR 0 15
18245: PUSH
18246: CALL_OW 44
18250: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
18251: LD_VAR 0 15
18255: PPUSH
18256: LD_VAR 0 9
18260: PPUSH
18261: LD_INT 0
18263: PPUSH
18264: CALL_OW 49
// end ;
18268: GO 18187
18270: POP
18271: POP
// for i = 1 to sniperCount do
18272: LD_ADDR_VAR 0 13
18276: PUSH
18277: DOUBLE
18278: LD_INT 1
18280: DEC
18281: ST_TO_ADDR
18282: LD_VAR 0 4
18286: PUSH
18287: FOR_TO
18288: IFFALSE 18370
// begin uc_side = side ;
18290: LD_ADDR_OWVAR 20
18294: PUSH
18295: LD_VAR 0 1
18299: ST_TO_ADDR
// uc_nation = nation ;
18300: LD_ADDR_OWVAR 21
18304: PUSH
18305: LD_VAR 0 2
18309: ST_TO_ADDR
// hc_name =  ;
18310: LD_ADDR_OWVAR 26
18314: PUSH
18315: LD_STRING 
18317: ST_TO_ADDR
// hc_gallery =  ;
18318: LD_ADDR_OWVAR 33
18322: PUSH
18323: LD_STRING 
18325: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
18326: LD_INT 0
18328: PPUSH
18329: LD_INT 5
18331: PPUSH
18332: LD_VAR 0 8
18336: PPUSH
18337: CALL_OW 380
// un = CreateHuman ;
18341: LD_ADDR_VAR 0 15
18345: PUSH
18346: CALL_OW 44
18350: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
18351: LD_VAR 0 15
18355: PPUSH
18356: LD_VAR 0 9
18360: PPUSH
18361: LD_INT 0
18363: PPUSH
18364: CALL_OW 49
// end ;
18368: GO 18287
18370: POP
18371: POP
// for i = 1 to bazookCount do
18372: LD_ADDR_VAR 0 13
18376: PUSH
18377: DOUBLE
18378: LD_INT 1
18380: DEC
18381: ST_TO_ADDR
18382: LD_VAR 0 5
18386: PUSH
18387: FOR_TO
18388: IFFALSE 18470
// begin uc_side = side ;
18390: LD_ADDR_OWVAR 20
18394: PUSH
18395: LD_VAR 0 1
18399: ST_TO_ADDR
// uc_nation = nation ;
18400: LD_ADDR_OWVAR 21
18404: PUSH
18405: LD_VAR 0 2
18409: ST_TO_ADDR
// hc_name =  ;
18410: LD_ADDR_OWVAR 26
18414: PUSH
18415: LD_STRING 
18417: ST_TO_ADDR
// hc_gallery =  ;
18418: LD_ADDR_OWVAR 33
18422: PUSH
18423: LD_STRING 
18425: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
18426: LD_INT 0
18428: PPUSH
18429: LD_INT 9
18431: PPUSH
18432: LD_VAR 0 8
18436: PPUSH
18437: CALL_OW 380
// un = CreateHuman ;
18441: LD_ADDR_VAR 0 15
18445: PUSH
18446: CALL_OW 44
18450: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
18451: LD_VAR 0 15
18455: PPUSH
18456: LD_VAR 0 9
18460: PPUSH
18461: LD_INT 0
18463: PPUSH
18464: CALL_OW 49
// end ;
18468: GO 18387
18470: POP
18471: POP
// for i = 1 to mortalCount do
18472: LD_ADDR_VAR 0 13
18476: PUSH
18477: DOUBLE
18478: LD_INT 1
18480: DEC
18481: ST_TO_ADDR
18482: LD_VAR 0 6
18486: PUSH
18487: FOR_TO
18488: IFFALSE 18570
// begin uc_side = side ;
18490: LD_ADDR_OWVAR 20
18494: PUSH
18495: LD_VAR 0 1
18499: ST_TO_ADDR
// uc_nation = nation ;
18500: LD_ADDR_OWVAR 21
18504: PUSH
18505: LD_VAR 0 2
18509: ST_TO_ADDR
// hc_name =  ;
18510: LD_ADDR_OWVAR 26
18514: PUSH
18515: LD_STRING 
18517: ST_TO_ADDR
// hc_gallery =  ;
18518: LD_ADDR_OWVAR 33
18522: PUSH
18523: LD_STRING 
18525: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
18526: LD_INT 0
18528: PPUSH
18529: LD_INT 8
18531: PPUSH
18532: LD_VAR 0 8
18536: PPUSH
18537: CALL_OW 380
// un = CreateHuman ;
18541: LD_ADDR_VAR 0 15
18545: PUSH
18546: CALL_OW 44
18550: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
18551: LD_VAR 0 15
18555: PPUSH
18556: LD_VAR 0 9
18560: PPUSH
18561: LD_INT 0
18563: PPUSH
18564: CALL_OW 49
// end ;
18568: GO 18487
18570: POP
18571: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
18572: LD_ADDR_VAR 0 18
18576: PUSH
18577: LD_INT 22
18579: PUSH
18580: LD_VAR 0 1
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 2
18591: PUSH
18592: LD_INT 25
18594: PUSH
18595: LD_INT 1
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 25
18604: PUSH
18605: LD_INT 5
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 25
18614: PUSH
18615: LD_INT 8
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 25
18624: PUSH
18625: LD_INT 9
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: PPUSH
18643: CALL_OW 69
18647: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
18648: LD_ADDR_VAR 0 17
18652: PUSH
18653: LD_INT 22
18655: PUSH
18656: LD_VAR 0 1
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 25
18667: PUSH
18668: LD_INT 4
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PPUSH
18679: CALL_OW 69
18683: ST_TO_ADDR
// for i in medic_list do
18684: LD_ADDR_VAR 0 13
18688: PUSH
18689: LD_VAR 0 17
18693: PUSH
18694: FOR_IN
18695: IFFALSE 18713
// ComMoveToArea ( i , healArea ) ;
18697: LD_VAR 0 13
18701: PPUSH
18702: LD_VAR 0 10
18706: PPUSH
18707: CALL_OW 113
18711: GO 18694
18713: POP
18714: POP
// repeat wait ( 0 0$1 ) ;
18715: LD_INT 35
18717: PPUSH
18718: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
18722: LD_ADDR_VAR 0 16
18726: PUSH
18727: LD_INT 22
18729: PUSH
18730: LD_VAR 0 1
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 1
18741: PUSH
18742: LD_INT 3
18744: PUSH
18745: LD_INT 24
18747: PUSH
18748: LD_INT 550
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 24
18761: PUSH
18762: LD_INT 250
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: LIST
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PPUSH
18778: CALL_OW 69
18782: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
18783: LD_ADDR_VAR 0 18
18787: PUSH
18788: LD_INT 22
18790: PUSH
18791: LD_VAR 0 1
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 2
18802: PUSH
18803: LD_INT 25
18805: PUSH
18806: LD_INT 1
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 25
18815: PUSH
18816: LD_INT 5
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 25
18825: PUSH
18826: LD_INT 8
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 25
18835: PUSH
18836: LD_INT 9
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 24
18852: PUSH
18853: LD_INT 1000
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: LIST
18864: PPUSH
18865: CALL_OW 69
18869: ST_TO_ADDR
// if medicCount > 0 then
18870: LD_VAR 0 7
18874: PUSH
18875: LD_INT 0
18877: GREATER
18878: IFFALSE 18952
// begin if damageUnit_list > 0 then
18880: LD_VAR 0 16
18884: PUSH
18885: LD_INT 0
18887: GREATER
18888: IFFALSE 18952
// begin for i in damageUnit_list do
18890: LD_ADDR_VAR 0 13
18894: PUSH
18895: LD_VAR 0 16
18899: PUSH
18900: FOR_IN
18901: IFFALSE 18950
// begin ComMoveToArea ( i , healArea ) ;
18903: LD_VAR 0 13
18907: PPUSH
18908: LD_VAR 0 10
18912: PPUSH
18913: CALL_OW 113
// for j in medic_list do
18917: LD_ADDR_VAR 0 14
18921: PUSH
18922: LD_VAR 0 17
18926: PUSH
18927: FOR_IN
18928: IFFALSE 18946
// AddComHeal ( j , i ) ;
18930: LD_VAR 0 14
18934: PPUSH
18935: LD_VAR 0 13
18939: PPUSH
18940: CALL_OW 188
18944: GO 18927
18946: POP
18947: POP
// end ;
18948: GO 18900
18950: POP
18951: POP
// end ; end ; for i in soldiersOK_list do
18952: LD_ADDR_VAR 0 13
18956: PUSH
18957: LD_VAR 0 18
18961: PUSH
18962: FOR_IN
18963: IFFALSE 19139
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18965: LD_ADDR_VAR 0 21
18969: PUSH
18970: LD_INT 22
18972: PUSH
18973: LD_VAR 0 11
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PPUSH
18982: CALL_OW 69
18986: PPUSH
18987: LD_VAR 0 13
18991: PPUSH
18992: CALL_OW 74
18996: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18997: LD_ADDR_VAR 0 22
19001: PUSH
19002: LD_INT 22
19004: PUSH
19005: LD_VAR 0 11
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 2
19016: PUSH
19017: LD_INT 59
19019: PUSH
19020: EMPTY
19021: LIST
19022: PUSH
19023: LD_INT 21
19025: PUSH
19026: LD_INT 1
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: LD_INT 21
19035: PUSH
19036: LD_INT 2
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: EMPTY
19054: LIST
19055: PPUSH
19056: CALL_OW 69
19060: PPUSH
19061: LD_VAR 0 13
19065: PPUSH
19066: CALL_OW 74
19070: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19071: LD_VAR 0 13
19075: PPUSH
19076: LD_VAR 0 21
19080: PPUSH
19081: CALL_OW 296
19085: PUSH
19086: LD_INT 8
19088: PLUS
19089: PUSH
19090: LD_VAR 0 13
19094: PPUSH
19095: LD_VAR 0 22
19099: PPUSH
19100: CALL_OW 296
19104: LESS
19105: IFFALSE 19123
// begin ComAttackUnit ( i , target1 ) ;
19107: LD_VAR 0 13
19111: PPUSH
19112: LD_VAR 0 21
19116: PPUSH
19117: CALL_OW 115
// end else
19121: GO 19137
// begin ComAttackUnit ( i , target2 ) ;
19123: LD_VAR 0 13
19127: PPUSH
19128: LD_VAR 0 22
19132: PPUSH
19133: CALL_OW 115
// end ; end ;
19137: GO 18962
19139: POP
19140: POP
// for i in soldiersOK_list do
19141: LD_ADDR_VAR 0 13
19145: PUSH
19146: LD_VAR 0 18
19150: PUSH
19151: FOR_IN
19152: IFFALSE 19328
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19154: LD_ADDR_VAR 0 21
19158: PUSH
19159: LD_INT 22
19161: PUSH
19162: LD_VAR 0 11
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PPUSH
19171: CALL_OW 69
19175: PPUSH
19176: LD_VAR 0 13
19180: PPUSH
19181: CALL_OW 74
19185: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19186: LD_ADDR_VAR 0 22
19190: PUSH
19191: LD_INT 22
19193: PUSH
19194: LD_VAR 0 11
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 2
19205: PUSH
19206: LD_INT 59
19208: PUSH
19209: EMPTY
19210: LIST
19211: PUSH
19212: LD_INT 21
19214: PUSH
19215: LD_INT 1
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 21
19224: PUSH
19225: LD_INT 2
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: EMPTY
19243: LIST
19244: PPUSH
19245: CALL_OW 69
19249: PPUSH
19250: LD_VAR 0 13
19254: PPUSH
19255: CALL_OW 74
19259: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19260: LD_VAR 0 13
19264: PPUSH
19265: LD_VAR 0 21
19269: PPUSH
19270: CALL_OW 296
19274: PUSH
19275: LD_INT 8
19277: PLUS
19278: PUSH
19279: LD_VAR 0 13
19283: PPUSH
19284: LD_VAR 0 22
19288: PPUSH
19289: CALL_OW 296
19293: LESS
19294: IFFALSE 19312
// begin ComAttackUnit ( i , target1 ) ;
19296: LD_VAR 0 13
19300: PPUSH
19301: LD_VAR 0 21
19305: PPUSH
19306: CALL_OW 115
// end else
19310: GO 19326
// begin ComAttackUnit ( i , target2 ) ;
19312: LD_VAR 0 13
19316: PPUSH
19317: LD_VAR 0 22
19321: PPUSH
19322: CALL_OW 115
// end ; end ;
19326: GO 19151
19328: POP
19329: POP
// until soldiersOK_list = [ ] ;
19330: LD_VAR 0 18
19334: PUSH
19335: EMPTY
19336: EQUAL
19337: IFFALSE 18715
// end ;
19339: LD_VAR 0 12
19343: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
19344: LD_INT 0
19346: PPUSH
19347: PPUSH
19348: PPUSH
19349: PPUSH
19350: PPUSH
19351: PPUSH
19352: PPUSH
// repeat wait ( 0 0$1 ) ;
19353: LD_INT 35
19355: PPUSH
19356: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
19360: LD_ADDR_VAR 0 7
19364: PUSH
19365: LD_INT 22
19367: PUSH
19368: LD_INT 2
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 25
19377: PUSH
19378: LD_INT 4
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: LD_INT 3
19387: PUSH
19388: LD_INT 60
19390: PUSH
19391: EMPTY
19392: LIST
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: LIST
19402: PPUSH
19403: CALL_OW 69
19407: ST_TO_ADDR
// if not tmp then
19408: LD_VAR 0 7
19412: NOT
19413: IFFALSE 19417
// continue ;
19415: GO 19353
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19417: LD_ADDR_VAR 0 3
19421: PUSH
19422: LD_INT 5
19424: PPUSH
19425: LD_INT 22
19427: PUSH
19428: LD_INT 0
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 25
19437: PUSH
19438: LD_INT 12
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PPUSH
19449: CALL_OW 70
19453: PUSH
19454: FOR_IN
19455: IFFALSE 19488
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
19457: LD_VAR 0 7
19461: PPUSH
19462: LD_VAR 0 3
19466: PPUSH
19467: CALL_OW 250
19471: PPUSH
19472: LD_VAR 0 3
19476: PPUSH
19477: CALL_OW 251
19481: PPUSH
19482: CALL_OW 131
19486: GO 19454
19488: POP
19489: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
19490: LD_INT 22
19492: PUSH
19493: LD_INT 2
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 25
19502: PUSH
19503: LD_INT 4
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PPUSH
19514: CALL_OW 69
19518: PUSH
19519: LD_INT 0
19521: EQUAL
19522: PUSH
19523: LD_INT 5
19525: PPUSH
19526: LD_INT 22
19528: PUSH
19529: LD_INT 0
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 25
19538: PUSH
19539: LD_INT 12
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PPUSH
19550: CALL_OW 70
19554: PUSH
19555: LD_INT 2
19557: LESS
19558: OR
19559: PUSH
19560: LD_OWVAR 1
19564: PUSH
19565: LD_INT 7000
19567: GREATEREQUAL
19568: OR
19569: IFFALSE 19353
// repeat wait ( 0 0$1 ) ;
19571: LD_INT 35
19573: PPUSH
19574: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
19578: LD_ADDR_VAR 0 5
19582: PUSH
19583: LD_INT 22
19585: PUSH
19586: LD_INT 2
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: LD_INT 30
19595: PUSH
19596: LD_INT 5
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PPUSH
19607: CALL_OW 69
19611: ST_TO_ADDR
// until arm ;
19612: LD_VAR 0 5
19616: IFFALSE 19571
// wait ( 0 0$25 ) ;
19618: LD_INT 875
19620: PPUSH
19621: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19625: LD_ADDR_VAR 0 6
19629: PUSH
19630: LD_INT 22
19632: PUSH
19633: LD_INT 2
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 2
19642: PUSH
19643: LD_INT 30
19645: PUSH
19646: LD_INT 0
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 30
19655: PUSH
19656: LD_INT 1
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: LIST
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PPUSH
19672: CALL_OW 69
19676: ST_TO_ADDR
// j := 0 ;
19677: LD_ADDR_VAR 0 3
19681: PUSH
19682: LD_INT 0
19684: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
19685: LD_ADDR_VAR 0 2
19689: PUSH
19690: LD_INT 22
19692: PUSH
19693: LD_INT 2
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 25
19702: PUSH
19703: LD_INT 12
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PPUSH
19714: CALL_OW 69
19718: PUSH
19719: FOR_IN
19720: IFFALSE 19807
// begin ComMoveXY ( i , 63 , 16 ) ;
19722: LD_VAR 0 2
19726: PPUSH
19727: LD_INT 63
19729: PPUSH
19730: LD_INT 16
19732: PPUSH
19733: CALL_OW 111
// j := j + 1 ;
19737: LD_ADDR_VAR 0 3
19741: PUSH
19742: LD_VAR 0 3
19746: PUSH
19747: LD_INT 1
19749: PLUS
19750: ST_TO_ADDR
// if j < 5 then
19751: LD_VAR 0 3
19755: PUSH
19756: LD_INT 5
19758: LESS
19759: IFFALSE 19777
// b := arm [ 1 ] else
19761: LD_ADDR_VAR 0 4
19765: PUSH
19766: LD_VAR 0 5
19770: PUSH
19771: LD_INT 1
19773: ARRAY
19774: ST_TO_ADDR
19775: GO 19791
// b := dep [ 1 ] ;
19777: LD_ADDR_VAR 0 4
19781: PUSH
19782: LD_VAR 0 6
19786: PUSH
19787: LD_INT 1
19789: ARRAY
19790: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
19791: LD_VAR 0 2
19795: PPUSH
19796: LD_VAR 0 4
19800: PPUSH
19801: CALL_OW 180
// end ;
19805: GO 19719
19807: POP
19808: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
19809: LD_ADDR_VAR 0 2
19813: PUSH
19814: LD_INT 22
19816: PUSH
19817: LD_INT 2
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 25
19826: PUSH
19827: LD_INT 4
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PPUSH
19838: CALL_OW 69
19842: PUSH
19843: FOR_IN
19844: IFFALSE 19890
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
19846: LD_VAR 0 2
19850: PPUSH
19851: LD_INT 22
19853: PUSH
19854: LD_INT 2
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 30
19863: PUSH
19864: LD_INT 8
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PPUSH
19875: CALL_OW 69
19879: PUSH
19880: LD_INT 1
19882: ARRAY
19883: PPUSH
19884: CALL_OW 120
19888: GO 19843
19890: POP
19891: POP
// end ;
19892: LD_VAR 0 1
19896: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
19897: LD_INT 0
19899: PPUSH
19900: PPUSH
19901: PPUSH
19902: PPUSH
19903: PPUSH
19904: PPUSH
19905: PPUSH
19906: PPUSH
19907: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
19908: LD_INT 22
19910: PUSH
19911: LD_VAR 0 1
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PUSH
19920: LD_INT 21
19922: PUSH
19923: LD_INT 2
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PPUSH
19934: CALL_OW 69
19938: PUSH
19939: LD_VAR 0 3
19943: LESSEQUAL
19944: IFFALSE 20088
// for i = 1 to vehCount do
19946: LD_ADDR_VAR 0 10
19950: PUSH
19951: DOUBLE
19952: LD_INT 1
19954: DEC
19955: ST_TO_ADDR
19956: LD_VAR 0 3
19960: PUSH
19961: FOR_TO
19962: IFFALSE 20086
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
19964: LD_ADDR_VAR 0 12
19968: PUSH
19969: LD_VAR 0 5
19973: PUSH
19974: LD_INT 1
19976: PPUSH
19977: LD_VAR 0 5
19981: PPUSH
19982: CALL_OW 12
19986: ARRAY
19987: ST_TO_ADDR
// if randWeapon = 46 then
19988: LD_VAR 0 12
19992: PUSH
19993: LD_INT 46
19995: EQUAL
19996: IFFALSE 20041
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
19998: LD_VAR 0 2
20002: PPUSH
20003: LD_INT 24
20005: PPUSH
20006: LD_VAR 0 6
20010: PPUSH
20011: LD_VAR 0 7
20015: PUSH
20016: LD_INT 1
20018: PPUSH
20019: LD_VAR 0 7
20023: PPUSH
20024: CALL_OW 12
20028: ARRAY
20029: PPUSH
20030: LD_VAR 0 12
20034: PPUSH
20035: CALL_OW 185
20039: GO 20084
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
20041: LD_VAR 0 2
20045: PPUSH
20046: LD_VAR 0 8
20050: PPUSH
20051: LD_VAR 0 6
20055: PPUSH
20056: LD_VAR 0 7
20060: PUSH
20061: LD_INT 1
20063: PPUSH
20064: LD_VAR 0 7
20068: PPUSH
20069: CALL_OW 12
20073: ARRAY
20074: PPUSH
20075: LD_VAR 0 12
20079: PPUSH
20080: CALL_OW 185
// end ;
20084: GO 19961
20086: POP
20087: POP
// repeat wait ( 0 0$1 ) ;
20088: LD_INT 35
20090: PPUSH
20091: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
20095: LD_INT 22
20097: PUSH
20098: LD_VAR 0 1
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 21
20109: PUSH
20110: LD_INT 2
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 24
20119: PUSH
20120: LD_INT 250
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: LIST
20131: PPUSH
20132: CALL_OW 69
20136: PUSH
20137: LD_VAR 0 3
20141: GREATEREQUAL
20142: IFFALSE 20088
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
20144: LD_INT 22
20146: PUSH
20147: LD_VAR 0 1
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 21
20158: PUSH
20159: LD_INT 2
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 24
20168: PUSH
20169: LD_INT 250
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: LIST
20180: PPUSH
20181: CALL_OW 69
20185: PUSH
20186: LD_VAR 0 3
20190: GREATEREQUAL
20191: IFFALSE 20534
// begin repeat begin wait ( 0 0$1 ) ;
20193: LD_INT 35
20195: PPUSH
20196: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
20200: LD_INT 22
20202: PUSH
20203: LD_VAR 0 1
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 21
20214: PUSH
20215: LD_INT 2
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: LD_INT 24
20224: PUSH
20225: LD_INT 651
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: LIST
20236: PPUSH
20237: CALL_OW 69
20241: PUSH
20242: LD_INT 0
20244: GREATER
20245: IFFALSE 20473
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
20247: LD_ADDR_VAR 0 10
20251: PUSH
20252: LD_INT 22
20254: PUSH
20255: LD_VAR 0 1
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: PUSH
20264: LD_INT 21
20266: PUSH
20267: LD_INT 2
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: LD_INT 24
20276: PUSH
20277: LD_INT 651
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: LIST
20288: PPUSH
20289: CALL_OW 69
20293: PUSH
20294: FOR_IN
20295: IFFALSE 20471
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20297: LD_ADDR_VAR 0 16
20301: PUSH
20302: LD_INT 22
20304: PUSH
20305: LD_VAR 0 4
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PPUSH
20314: CALL_OW 69
20318: PPUSH
20319: LD_VAR 0 10
20323: PPUSH
20324: CALL_OW 74
20328: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20329: LD_ADDR_VAR 0 17
20333: PUSH
20334: LD_INT 22
20336: PUSH
20337: LD_VAR 0 4
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 2
20348: PUSH
20349: LD_INT 59
20351: PUSH
20352: EMPTY
20353: LIST
20354: PUSH
20355: LD_INT 21
20357: PUSH
20358: LD_INT 1
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: LD_INT 21
20367: PUSH
20368: LD_INT 2
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: EMPTY
20386: LIST
20387: PPUSH
20388: CALL_OW 69
20392: PPUSH
20393: LD_VAR 0 10
20397: PPUSH
20398: CALL_OW 74
20402: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20403: LD_VAR 0 10
20407: PPUSH
20408: LD_VAR 0 16
20412: PPUSH
20413: CALL_OW 296
20417: PUSH
20418: LD_INT 8
20420: PLUS
20421: PUSH
20422: LD_VAR 0 10
20426: PPUSH
20427: LD_VAR 0 17
20431: PPUSH
20432: CALL_OW 296
20436: LESS
20437: IFFALSE 20455
// begin ComAttackUnit ( i , target1 ) ;
20439: LD_VAR 0 10
20443: PPUSH
20444: LD_VAR 0 16
20448: PPUSH
20449: CALL_OW 115
// end else
20453: GO 20469
// begin ComAttackUnit ( i , target2 ) ;
20455: LD_VAR 0 10
20459: PPUSH
20460: LD_VAR 0 17
20464: PPUSH
20465: CALL_OW 115
// end ; end ;
20469: GO 20294
20471: POP
20472: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
20473: LD_INT 22
20475: PUSH
20476: LD_VAR 0 1
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 21
20487: PUSH
20488: LD_INT 2
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PPUSH
20499: CALL_OW 69
20503: PUSH
20504: LD_INT 0
20506: EQUAL
20507: PUSH
20508: LD_INT 22
20510: PUSH
20511: LD_VAR 0 4
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: EMPTY
20521: LIST
20522: PPUSH
20523: CALL_OW 69
20527: PUSH
20528: LD_INT 0
20530: EQUAL
20531: OR
20532: IFFALSE 20193
// end ; end ;
20534: LD_VAR 0 9
20538: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
20539: LD_INT 0
20541: PPUSH
20542: PPUSH
20543: PPUSH
20544: PPUSH
// r := 100 ;
20545: LD_ADDR_VAR 0 5
20549: PUSH
20550: LD_INT 100
20552: ST_TO_ADDR
// x := 0 ;
20553: LD_ADDR_VAR 0 6
20557: PUSH
20558: LD_INT 0
20560: ST_TO_ADDR
// while ( x < n ) do
20561: LD_VAR 0 6
20565: PUSH
20566: LD_VAR 0 2
20570: LESS
20571: IFFALSE 20858
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
20573: LD_ADDR_VAR 0 4
20577: PUSH
20578: DOUBLE
20579: LD_INT 1
20581: DEC
20582: ST_TO_ADDR
20583: LD_VAR 0 1
20587: PPUSH
20588: LD_INT 0
20590: PPUSH
20591: CALL_OW 517
20595: PUSH
20596: LD_INT 1
20598: ARRAY
20599: PUSH
20600: FOR_TO
20601: IFFALSE 20854
// begin if r > 50 then
20603: LD_VAR 0 5
20607: PUSH
20608: LD_INT 50
20610: GREATER
20611: IFFALSE 20830
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
20613: LD_VAR 0 1
20617: PPUSH
20618: LD_INT 0
20620: PPUSH
20621: CALL_OW 517
20625: PUSH
20626: LD_INT 1
20628: ARRAY
20629: PUSH
20630: LD_VAR 0 4
20634: ARRAY
20635: PPUSH
20636: LD_VAR 0 1
20640: PPUSH
20641: LD_INT 0
20643: PPUSH
20644: CALL_OW 517
20648: PUSH
20649: LD_INT 2
20651: ARRAY
20652: PUSH
20653: LD_VAR 0 4
20657: ARRAY
20658: PPUSH
20659: CALL_OW 458
20663: NOT
20664: IFFALSE 20814
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
20666: LD_VAR 0 1
20670: PPUSH
20671: LD_INT 0
20673: PPUSH
20674: CALL_OW 517
20678: PUSH
20679: LD_INT 1
20681: ARRAY
20682: PUSH
20683: LD_VAR 0 4
20687: ARRAY
20688: PPUSH
20689: LD_VAR 0 1
20693: PPUSH
20694: LD_INT 0
20696: PPUSH
20697: CALL_OW 517
20701: PUSH
20702: LD_INT 2
20704: ARRAY
20705: PUSH
20706: LD_VAR 0 4
20710: ARRAY
20711: PPUSH
20712: LD_INT 5
20714: PPUSH
20715: LD_INT 0
20717: PPUSH
20718: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
20722: LD_ADDR_EXP 50
20726: PUSH
20727: LD_EXP 50
20731: PPUSH
20732: LD_INT 1
20734: PPUSH
20735: LD_VAR 0 1
20739: PPUSH
20740: LD_INT 0
20742: PPUSH
20743: CALL_OW 517
20747: PUSH
20748: LD_INT 1
20750: ARRAY
20751: PUSH
20752: LD_VAR 0 4
20756: ARRAY
20757: PUSH
20758: LD_VAR 0 1
20762: PPUSH
20763: LD_INT 0
20765: PPUSH
20766: CALL_OW 517
20770: PUSH
20771: LD_INT 2
20773: ARRAY
20774: PUSH
20775: LD_VAR 0 4
20779: ARRAY
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PPUSH
20785: CALL_OW 2
20789: ST_TO_ADDR
// r := 0 ;
20790: LD_ADDR_VAR 0 5
20794: PUSH
20795: LD_INT 0
20797: ST_TO_ADDR
// x := x + 1 ;
20798: LD_ADDR_VAR 0 6
20802: PUSH
20803: LD_VAR 0 6
20807: PUSH
20808: LD_INT 1
20810: PLUS
20811: ST_TO_ADDR
// end else
20812: GO 20828
// r := r + 35 ;
20814: LD_ADDR_VAR 0 5
20818: PUSH
20819: LD_VAR 0 5
20823: PUSH
20824: LD_INT 35
20826: PLUS
20827: ST_TO_ADDR
// end else
20828: GO 20852
// r := r + rand ( 10 , 25 ) ;
20830: LD_ADDR_VAR 0 5
20834: PUSH
20835: LD_VAR 0 5
20839: PUSH
20840: LD_INT 10
20842: PPUSH
20843: LD_INT 25
20845: PPUSH
20846: CALL_OW 12
20850: PLUS
20851: ST_TO_ADDR
// end ;
20852: GO 20600
20854: POP
20855: POP
20856: GO 20561
// end ; end_of_file
20858: LD_VAR 0 3
20862: RET
// every 0 0$1 trigger russianAI = 1 do
20863: LD_EXP 39
20867: PUSH
20868: LD_INT 1
20870: EQUAL
20871: IFFALSE 21090
20873: GO 20875
20875: DISABLE
// begin enable ;
20876: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
20877: LD_INT 3
20879: PPUSH
20880: LD_EXP 30
20884: PPUSH
20885: CALL 15341 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
20889: LD_INT 3
20891: PPUSH
20892: LD_EXP 42
20896: PPUSH
20897: CALL 15701 0 2
// if ruPossition = 1 then
20901: LD_EXP 41
20905: PUSH
20906: LD_INT 1
20908: EQUAL
20909: IFFALSE 20964
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20911: LD_INT 3
20913: PPUSH
20914: LD_INT 13
20916: PPUSH
20917: LD_INT 10
20919: PPUSH
20920: LD_INT 22
20922: PUSH
20923: LD_INT 3
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 21
20932: PUSH
20933: LD_INT 3
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PUSH
20940: LD_INT 30
20942: PUSH
20943: LD_INT 8
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: LIST
20954: PPUSH
20955: CALL_OW 69
20959: PPUSH
20960: CALL 15907 0 4
// if ruPossition = 2 then
20964: LD_EXP 41
20968: PUSH
20969: LD_INT 2
20971: EQUAL
20972: IFFALSE 21027
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20974: LD_INT 3
20976: PPUSH
20977: LD_INT 14
20979: PPUSH
20980: LD_INT 11
20982: PPUSH
20983: LD_INT 22
20985: PUSH
20986: LD_INT 3
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 21
20995: PUSH
20996: LD_INT 3
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 30
21005: PUSH
21006: LD_INT 8
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: LIST
21017: PPUSH
21018: CALL_OW 69
21022: PPUSH
21023: CALL 15907 0 4
// if ruPossition = 3 then
21027: LD_EXP 41
21031: PUSH
21032: LD_INT 3
21034: EQUAL
21035: IFFALSE 21090
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21037: LD_INT 3
21039: PPUSH
21040: LD_INT 15
21042: PPUSH
21043: LD_INT 12
21045: PPUSH
21046: LD_INT 22
21048: PUSH
21049: LD_INT 3
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 21
21058: PUSH
21059: LD_INT 3
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 30
21068: PUSH
21069: LD_INT 8
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: LIST
21080: PPUSH
21081: CALL_OW 69
21085: PPUSH
21086: CALL 15907 0 4
// end ;
21090: END
// every 0 0$1 do
21091: GO 21093
21093: DISABLE
// begin enable ;
21094: ENABLE
// if ruPossition = 1 then
21095: LD_EXP 41
21099: PUSH
21100: LD_INT 1
21102: EQUAL
21103: IFFALSE 21115
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
21105: LD_INT 3
21107: PPUSH
21108: LD_INT 10
21110: PPUSH
21111: CALL 14978 0 2
// if ruPossition = 2 then
21115: LD_EXP 41
21119: PUSH
21120: LD_INT 2
21122: EQUAL
21123: IFFALSE 21135
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
21125: LD_INT 3
21127: PPUSH
21128: LD_INT 11
21130: PPUSH
21131: CALL 14978 0 2
// if ruPossition = 3 then
21135: LD_EXP 41
21139: PUSH
21140: LD_INT 3
21142: EQUAL
21143: IFFALSE 21155
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
21145: LD_INT 3
21147: PPUSH
21148: LD_INT 12
21150: PPUSH
21151: CALL 14978 0 2
// IntBazooka ( 3 , 1 ) ;
21155: LD_INT 3
21157: PPUSH
21158: LD_INT 1
21160: PPUSH
21161: CALL 13777 0 2
// IntBazooka ( 6 , 1 ) ;
21165: LD_INT 6
21167: PPUSH
21168: LD_INT 1
21170: PPUSH
21171: CALL 13777 0 2
// end ;
21175: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
21176: LD_EXP 39
21180: PUSH
21181: LD_INT 1
21183: EQUAL
21184: PUSH
21185: LD_EXP 35
21189: PPUSH
21190: CALL_OW 302
21194: AND
21195: PUSH
21196: LD_EXP 35
21200: PPUSH
21201: CALL_OW 255
21205: PUSH
21206: LD_INT 3
21208: EQUAL
21209: AND
21210: PUSH
21211: LD_INT 22
21213: PUSH
21214: LD_INT 3
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 21
21223: PUSH
21224: LD_INT 2
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 33
21233: PUSH
21234: LD_INT 3
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: LIST
21245: PPUSH
21246: CALL_OW 69
21250: PUSH
21251: LD_INT 0
21253: EQUAL
21254: AND
21255: IFFALSE 21463
21257: GO 21259
21259: DISABLE
// begin enable ;
21260: ENABLE
// if Difficulty = 1 then
21261: LD_OWVAR 67
21265: PUSH
21266: LD_INT 1
21268: EQUAL
21269: IFFALSE 21331
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
21271: LD_INT 3
21273: PPUSH
21274: LD_EXP 35
21278: PPUSH
21279: LD_INT 5
21281: PPUSH
21282: LD_INT 8
21284: PPUSH
21285: CALL_OW 12
21289: PPUSH
21290: LD_INT 1
21292: PPUSH
21293: LD_INT 43
21295: PUSH
21296: LD_INT 44
21298: PUSH
21299: LD_INT 45
21301: PUSH
21302: LD_INT 46
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: PPUSH
21311: LD_INT 1
21313: PPUSH
21314: LD_INT 3
21316: PUSH
21317: LD_INT 3
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PPUSH
21324: LD_INT 22
21326: PPUSH
21327: CALL 19897 0 8
// if Difficulty = 2 then
21331: LD_OWVAR 67
21335: PUSH
21336: LD_INT 2
21338: EQUAL
21339: IFFALSE 21397
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
21341: LD_INT 3
21343: PPUSH
21344: LD_EXP 35
21348: PPUSH
21349: LD_INT 6
21351: PPUSH
21352: LD_INT 8
21354: PPUSH
21355: CALL_OW 12
21359: PPUSH
21360: LD_INT 1
21362: PPUSH
21363: LD_INT 44
21365: PUSH
21366: LD_INT 45
21368: PUSH
21369: LD_INT 46
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: LIST
21376: PPUSH
21377: LD_INT 1
21379: PPUSH
21380: LD_INT 3
21382: PUSH
21383: LD_INT 3
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PPUSH
21390: LD_INT 22
21392: PPUSH
21393: CALL 19897 0 8
// if Difficulty = 3 then
21397: LD_OWVAR 67
21401: PUSH
21402: LD_INT 3
21404: EQUAL
21405: IFFALSE 21463
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
21407: LD_INT 3
21409: PPUSH
21410: LD_EXP 35
21414: PPUSH
21415: LD_INT 7
21417: PPUSH
21418: LD_INT 8
21420: PPUSH
21421: CALL_OW 12
21425: PPUSH
21426: LD_INT 1
21428: PPUSH
21429: LD_INT 44
21431: PUSH
21432: LD_INT 45
21434: PUSH
21435: LD_INT 46
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: LIST
21442: PPUSH
21443: LD_INT 1
21445: PPUSH
21446: LD_INT 3
21448: PUSH
21449: LD_INT 3
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PPUSH
21456: LD_INT 22
21458: PPUSH
21459: CALL 19897 0 8
// end ;
21463: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
21464: LD_EXP 50
21468: PUSH
21469: LD_EXP 49
21473: AND
21474: IFFALSE 21595
21476: GO 21478
21478: DISABLE
21479: LD_INT 0
21481: PPUSH
// begin enable ;
21482: ENABLE
// for i in arabianMines do
21483: LD_ADDR_VAR 0 1
21487: PUSH
21488: LD_EXP 50
21492: PUSH
21493: FOR_IN
21494: IFFALSE 21593
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
21496: LD_INT 22
21498: PUSH
21499: LD_INT 1
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 92
21508: PUSH
21509: LD_VAR 0 1
21513: PUSH
21514: LD_INT 1
21516: ARRAY
21517: PUSH
21518: LD_VAR 0 1
21522: PUSH
21523: LD_INT 2
21525: ARRAY
21526: PUSH
21527: LD_INT 3
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PPUSH
21540: CALL_OW 69
21544: IFFALSE 21591
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
21546: LD_VAR 0 1
21550: PUSH
21551: LD_INT 1
21553: ARRAY
21554: PPUSH
21555: LD_VAR 0 1
21559: PUSH
21560: LD_INT 2
21562: ARRAY
21563: PPUSH
21564: LD_INT 5
21566: PPUSH
21567: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
21571: LD_ADDR_EXP 50
21575: PUSH
21576: LD_EXP 50
21580: PPUSH
21581: LD_VAR 0 1
21585: PPUSH
21586: CALL_OW 3
21590: ST_TO_ADDR
// end ; end ;
21591: GO 21493
21593: POP
21594: POP
// end ; end_of_file
21595: PPOPN 1
21597: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
21598: LD_VAR 0 1
21602: PPUSH
21603: CALL_OW 255
21607: PUSH
21608: LD_INT 4
21610: EQUAL
21611: IFFALSE 21625
// SetBName ( building , epsilon ) ;
21613: LD_VAR 0 1
21617: PPUSH
21618: LD_STRING epsilon
21620: PPUSH
21621: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
21625: LD_VAR 0 1
21629: PPUSH
21630: CALL_OW 255
21634: PUSH
21635: LD_INT 1
21637: EQUAL
21638: PUSH
21639: LD_VAR 0 1
21643: PPUSH
21644: CALL_OW 266
21648: PUSH
21649: LD_INT 0
21651: EQUAL
21652: AND
21653: IFFALSE 21667
// SetBName ( building , epsilon ) ;
21655: LD_VAR 0 1
21659: PPUSH
21660: LD_STRING epsilon
21662: PPUSH
21663: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
21667: LD_VAR 0 1
21671: PPUSH
21672: CALL_OW 255
21676: PUSH
21677: LD_INT 3
21679: EQUAL
21680: PUSH
21681: LD_VAR 0 1
21685: PPUSH
21686: CALL_OW 266
21690: PUSH
21691: LD_INT 0
21693: EQUAL
21694: AND
21695: IFFALSE 21709
// SetBName ( building , chuikov ) ;
21697: LD_VAR 0 1
21701: PPUSH
21702: LD_STRING chuikov
21704: PPUSH
21705: CALL_OW 500
// if GetSide ( building ) = 2 then
21709: LD_VAR 0 1
21713: PPUSH
21714: CALL_OW 255
21718: PUSH
21719: LD_INT 2
21721: EQUAL
21722: IFFALSE 21778
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
21724: LD_VAR 0 1
21728: PPUSH
21729: CALL_OW 266
21733: PUSH
21734: LD_INT 6
21736: EQUAL
21737: PUSH
21738: LD_VAR 0 1
21742: PPUSH
21743: CALL_OW 266
21747: PUSH
21748: LD_INT 9
21750: EQUAL
21751: OR
21752: IFFALSE 21778
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21754: LD_VAR 0 1
21758: PPUSH
21759: LD_INT 10
21761: PPUSH
21762: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
21766: LD_VAR 0 1
21770: PPUSH
21771: LD_INT 11
21773: PPUSH
21774: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
21778: LD_VAR 0 1
21782: PPUSH
21783: CALL_OW 255
21787: PUSH
21788: LD_INT 3
21790: EQUAL
21791: IFFALSE 21817
// begin if GetBType ( building ) = 2 then
21793: LD_VAR 0 1
21797: PPUSH
21798: CALL_OW 266
21802: PUSH
21803: LD_INT 2
21805: EQUAL
21806: IFFALSE 21817
// AddComUpgrade ( building ) ;
21808: LD_VAR 0 1
21812: PPUSH
21813: CALL_OW 206
// end ; end ;
21817: PPOPN 2
21819: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
21820: LD_INT 0
21822: PPUSH
21823: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
21824: LD_VAR 0 1
21828: PUSH
21829: LD_INT 22
21831: PUSH
21832: LD_INT 3
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PUSH
21839: LD_INT 23
21841: PUSH
21842: LD_INT 3
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: LD_INT 21
21851: PUSH
21852: LD_INT 2
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: LIST
21863: PPUSH
21864: CALL_OW 69
21868: IN
21869: PUSH
21870: LD_EXP 59
21874: NOT
21875: AND
21876: IFFALSE 21907
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
21878: LD_ADDR_EXP 59
21882: PUSH
21883: LD_VAR 0 1
21887: PPUSH
21888: CALL_OW 250
21892: PUSH
21893: LD_VAR 0 1
21897: PPUSH
21898: CALL_OW 251
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: ST_TO_ADDR
// end ;
21907: PPOPN 3
21909: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
21910: LD_VAR 0 2
21914: PPUSH
21915: CALL_OW 255
21919: PUSH
21920: LD_INT 3
21922: EQUAL
21923: PUSH
21924: LD_EXP 35
21928: PPUSH
21929: CALL_OW 255
21933: PUSH
21934: LD_INT 3
21936: EQUAL
21937: AND
21938: PUSH
21939: LD_EXP 35
21943: PPUSH
21944: CALL_OW 302
21948: AND
21949: IFFALSE 21965
// ComEnterUnit ( human , ruFab ) ;
21951: LD_VAR 0 2
21955: PPUSH
21956: LD_EXP 35
21960: PPUSH
21961: CALL_OW 120
// end ;
21965: PPOPN 2
21967: END
// on BuildingComplete ( building ) do var i , sol , tmp ;
21968: LD_INT 0
21970: PPUSH
21971: PPUSH
21972: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
21973: LD_VAR 0 1
21977: PPUSH
21978: CALL_OW 255
21982: PUSH
21983: LD_INT 1
21985: EQUAL
21986: PUSH
21987: LD_EXP 63
21991: PUSH
21992: LD_INT 0
21994: EQUAL
21995: AND
21996: IFFALSE 22198
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
21998: LD_VAR 0 1
22002: PPUSH
22003: CALL_OW 266
22007: PUSH
22008: LD_INT 26
22010: EQUAL
22011: PUSH
22012: LD_VAR 0 1
22016: PPUSH
22017: CALL_OW 266
22021: PUSH
22022: LD_INT 27
22024: EQUAL
22025: OR
22026: PUSH
22027: LD_VAR 0 1
22031: PPUSH
22032: CALL_OW 266
22036: PUSH
22037: LD_INT 28
22039: EQUAL
22040: OR
22041: IFFALSE 22198
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
22043: LD_INT 22
22045: PUSH
22046: LD_INT 1
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: LD_INT 2
22055: PUSH
22056: LD_INT 30
22058: PUSH
22059: LD_INT 7
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 30
22068: PUSH
22069: LD_INT 8
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: LIST
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PPUSH
22085: CALL_OW 69
22089: PUSH
22090: LD_INT 0
22092: GREATER
22093: IFFALSE 22198
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22095: LD_ADDR_VAR 0 2
22099: PUSH
22100: LD_INT 22
22102: PUSH
22103: LD_INT 1
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 2
22112: PUSH
22113: LD_INT 30
22115: PUSH
22116: LD_INT 7
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PUSH
22123: LD_INT 30
22125: PUSH
22126: LD_INT 8
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: LIST
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PPUSH
22142: CALL_OW 69
22146: PUSH
22147: FOR_IN
22148: IFFALSE 22196
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22150: LD_VAR 0 2
22154: PPUSH
22155: LD_INT 1
22157: PPUSH
22158: CALL_OW 268
22162: PUSH
22163: LD_INT 11
22165: EQUAL
22166: PUSH
22167: LD_VAR 0 2
22171: PPUSH
22172: LD_INT 2
22174: PPUSH
22175: CALL_OW 268
22179: PUSH
22180: LD_INT 11
22182: EQUAL
22183: OR
22184: IFFALSE 22194
// eventVar1 = 1 ;
22186: LD_ADDR_EXP 63
22190: PUSH
22191: LD_INT 1
22193: ST_TO_ADDR
22194: GO 22147
22196: POP
22197: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
22198: LD_VAR 0 1
22202: PPUSH
22203: CALL_OW 255
22207: PUSH
22208: LD_INT 3
22210: EQUAL
22211: IFFALSE 22691
// begin if GetBType ( building ) = b_depot then
22213: LD_VAR 0 1
22217: PPUSH
22218: CALL_OW 266
22222: PUSH
22223: LD_INT 0
22225: EQUAL
22226: IFFALSE 22298
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
22228: LD_VAR 0 1
22232: PPUSH
22233: CALL_OW 274
22237: PPUSH
22238: LD_INT 1
22240: PPUSH
22241: LD_INT 5000
22243: PPUSH
22244: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
22248: LD_VAR 0 1
22252: PPUSH
22253: CALL_OW 274
22257: PPUSH
22258: LD_INT 2
22260: PPUSH
22261: LD_INT 300
22263: PPUSH
22264: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
22268: LD_VAR 0 1
22272: PPUSH
22273: CALL_OW 274
22277: PPUSH
22278: LD_INT 3
22280: PPUSH
22281: LD_INT 100
22283: PPUSH
22284: CALL_OW 277
// ruDepot = building ;
22288: LD_ADDR_EXP 30
22292: PUSH
22293: LD_VAR 0 1
22297: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
22298: LD_VAR 0 1
22302: PPUSH
22303: CALL_OW 266
22307: PUSH
22308: LD_INT 0
22310: EQUAL
22311: PUSH
22312: LD_VAR 0 1
22316: PPUSH
22317: CALL_OW 266
22321: PUSH
22322: LD_INT 2
22324: EQUAL
22325: OR
22326: PUSH
22327: LD_VAR 0 1
22331: PPUSH
22332: CALL_OW 266
22336: PUSH
22337: LD_INT 4
22339: EQUAL
22340: OR
22341: IFFALSE 22352
// ComUpgrade ( building ) ;
22343: LD_VAR 0 1
22347: PPUSH
22348: CALL_OW 146
// if GetBType ( building ) = b_lab then
22352: LD_VAR 0 1
22356: PPUSH
22357: CALL_OW 266
22361: PUSH
22362: LD_INT 6
22364: EQUAL
22365: IFFALSE 22568
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
22367: LD_INT 22
22369: PUSH
22370: LD_INT 3
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 30
22379: PUSH
22380: LD_INT 8
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PPUSH
22391: CALL_OW 69
22395: PUSH
22396: LD_INT 0
22398: EQUAL
22399: IFFALSE 22437
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22401: LD_VAR 0 1
22405: PPUSH
22406: LD_INT 10
22408: PPUSH
22409: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
22413: LD_VAR 0 1
22417: PPUSH
22418: LD_INT 12
22420: PPUSH
22421: CALL_OW 207
// ruLab1 = building ;
22425: LD_ADDR_EXP 31
22429: PUSH
22430: LD_VAR 0 1
22434: ST_TO_ADDR
// end else
22435: GO 22471
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
22437: LD_VAR 0 1
22441: PPUSH
22442: LD_INT 11
22444: PPUSH
22445: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
22449: LD_VAR 0 1
22453: PPUSH
22454: LD_INT 14
22456: PPUSH
22457: CALL_OW 207
// ruLab2 = building ;
22461: LD_ADDR_EXP 32
22465: PUSH
22466: LD_VAR 0 1
22470: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
22471: LD_INT 3
22473: PPUSH
22474: LD_VAR 0 1
22478: PPUSH
22479: LD_INT 3
22481: PPUSH
22482: CALL 14893 0 3
// if ruDestroyedBuildings > 0 then
22486: LD_EXP 42
22490: PUSH
22491: LD_INT 0
22493: GREATER
22494: IFFALSE 22568
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
22496: LD_ADDR_EXP 42
22500: PUSH
22501: LD_EXP 42
22505: PPUSH
22506: LD_INT 1
22508: PPUSH
22509: CALL_OW 3
22513: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
22514: LD_ADDR_EXP 42
22518: PUSH
22519: LD_EXP 42
22523: PPUSH
22524: LD_INT 1
22526: PPUSH
22527: CALL_OW 3
22531: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
22532: LD_ADDR_EXP 42
22536: PUSH
22537: LD_EXP 42
22541: PPUSH
22542: LD_INT 1
22544: PPUSH
22545: CALL_OW 3
22549: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
22550: LD_ADDR_EXP 42
22554: PUSH
22555: LD_EXP 42
22559: PPUSH
22560: LD_INT 1
22562: PPUSH
22563: CALL_OW 3
22567: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
22568: LD_VAR 0 1
22572: PPUSH
22573: CALL_OW 266
22577: PUSH
22578: LD_INT 32
22580: EQUAL
22581: IFFALSE 22618
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22583: LD_VAR 0 1
22587: PPUSH
22588: LD_INT 44
22590: PUSH
22591: LD_INT 45
22593: PUSH
22594: LD_INT 46
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 1
22604: PPUSH
22605: LD_INT 3
22607: PPUSH
22608: CALL_OW 12
22612: ARRAY
22613: PPUSH
22614: CALL_OW 208
// if GetBType ( building ) = b_turret then
22618: LD_VAR 0 1
22622: PPUSH
22623: CALL_OW 266
22627: PUSH
22628: LD_INT 33
22630: EQUAL
22631: IFFALSE 22668
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22633: LD_VAR 0 1
22637: PPUSH
22638: LD_INT 44
22640: PUSH
22641: LD_INT 45
22643: PUSH
22644: LD_INT 46
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 1
22654: PPUSH
22655: LD_INT 3
22657: PPUSH
22658: CALL_OW 12
22662: ARRAY
22663: PPUSH
22664: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
22668: LD_VAR 0 1
22672: PPUSH
22673: CALL_OW 266
22677: PUSH
22678: LD_INT 24
22680: EQUAL
22681: IFFALSE 22691
// russianAI = 1 ;
22683: LD_ADDR_EXP 39
22687: PUSH
22688: LD_INT 1
22690: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
22691: LD_VAR 0 1
22695: PPUSH
22696: CALL_OW 255
22700: PUSH
22701: LD_INT 2
22703: EQUAL
22704: IFFALSE 23373
// begin if GetBType ( building ) = b_breastwork then
22706: LD_VAR 0 1
22710: PPUSH
22711: CALL_OW 266
22715: PUSH
22716: LD_INT 31
22718: EQUAL
22719: IFFALSE 22865
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
22721: LD_ADDR_VAR 0 3
22725: PUSH
22726: LD_INT 22
22728: PUSH
22729: LD_INT 2
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PUSH
22736: LD_INT 2
22738: PUSH
22739: LD_INT 25
22741: PUSH
22742: LD_INT 1
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 25
22751: PUSH
22752: LD_INT 8
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: LIST
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PPUSH
22768: CALL_OW 69
22772: PUSH
22773: LD_EXP 26
22777: DIFF
22778: ST_TO_ADDR
// if not sol then
22779: LD_VAR 0 3
22783: NOT
22784: IFFALSE 22788
// exit ;
22786: GO 23373
// for i in sol do
22788: LD_ADDR_VAR 0 2
22792: PUSH
22793: LD_VAR 0 3
22797: PUSH
22798: FOR_IN
22799: IFFALSE 22863
// if not GetTag ( i ) then
22801: LD_VAR 0 2
22805: PPUSH
22806: CALL_OW 110
22810: NOT
22811: IFFALSE 22861
// begin if IsInUnit ( i ) then
22813: LD_VAR 0 2
22817: PPUSH
22818: CALL_OW 310
22822: IFFALSE 22833
// ComExitBuilding ( i ) ;
22824: LD_VAR 0 2
22828: PPUSH
22829: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
22833: LD_VAR 0 2
22837: PPUSH
22838: LD_VAR 0 1
22842: PPUSH
22843: CALL_OW 180
// SetTag ( i , 11 ) ;
22847: LD_VAR 0 2
22851: PPUSH
22852: LD_INT 11
22854: PPUSH
22855: CALL_OW 109
// break ;
22859: GO 22863
// end ;
22861: GO 22798
22863: POP
22864: POP
// end ; if GetBType ( building ) = b_depot then
22865: LD_VAR 0 1
22869: PPUSH
22870: CALL_OW 266
22874: PUSH
22875: LD_INT 0
22877: EQUAL
22878: IFFALSE 22964
// begin arDepot = building ;
22880: LD_ADDR_EXP 43
22884: PUSH
22885: LD_VAR 0 1
22889: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
22890: LD_INT 38
22892: PUSH
22893: LD_INT 47
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PPUSH
22900: LD_INT 71
22902: PPUSH
22903: LD_INT 19
22905: PPUSH
22906: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
22910: LD_VAR 0 1
22914: PPUSH
22915: CALL_OW 274
22919: PPUSH
22920: LD_INT 1
22922: PPUSH
22923: LD_INT 500
22925: PPUSH
22926: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
22930: LD_VAR 0 1
22934: PPUSH
22935: CALL_OW 274
22939: PPUSH
22940: LD_INT 3
22942: PPUSH
22943: LD_INT 30
22945: PPUSH
22946: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
22950: LD_EXP 26
22954: PPUSH
22955: LD_EXP 43
22959: PPUSH
22960: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22964: LD_VAR 0 1
22968: PPUSH
22969: CALL_OW 266
22973: PUSH
22974: LD_INT 6
22976: EQUAL
22977: PUSH
22978: LD_VAR 0 1
22982: PPUSH
22983: CALL_OW 266
22987: PUSH
22988: LD_INT 9
22990: EQUAL
22991: OR
22992: IFFALSE 23043
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22994: LD_VAR 0 1
22998: PPUSH
22999: LD_INT 10
23001: PPUSH
23002: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
23006: LD_VAR 0 1
23010: PPUSH
23011: LD_INT 11
23013: PPUSH
23014: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
23018: LD_INT 2
23020: PPUSH
23021: LD_VAR 0 1
23025: PPUSH
23026: LD_INT 2
23028: PPUSH
23029: CALL 14893 0 3
// arLab = building ;
23033: LD_ADDR_EXP 44
23037: PUSH
23038: LD_VAR 0 1
23042: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23043: LD_VAR 0 1
23047: PPUSH
23048: CALL_OW 266
23052: PUSH
23053: LD_INT 2
23055: EQUAL
23056: PUSH
23057: LD_VAR 0 1
23061: PPUSH
23062: CALL_OW 266
23066: PUSH
23067: LD_INT 4
23069: EQUAL
23070: OR
23071: IFFALSE 23136
// begin ComUpgrade ( building ) ;
23073: LD_VAR 0 1
23077: PPUSH
23078: CALL_OW 146
// if GetBType ( building ) = b_armoury then
23082: LD_VAR 0 1
23086: PPUSH
23087: CALL_OW 266
23091: PUSH
23092: LD_INT 4
23094: EQUAL
23095: IFFALSE 23136
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , 75 , 21 ) ;
23097: LD_INT 22
23099: PUSH
23100: LD_INT 2
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 25
23109: PUSH
23110: LD_INT 1
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PPUSH
23121: CALL_OW 69
23125: PPUSH
23126: LD_INT 75
23128: PPUSH
23129: LD_INT 21
23131: PPUSH
23132: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
23136: LD_VAR 0 1
23140: PPUSH
23141: CALL_OW 266
23145: PUSH
23146: LD_INT 27
23148: EQUAL
23149: IFFALSE 23373
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
23151: LD_INT 22
23153: PUSH
23154: LD_INT 2
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 30
23163: PUSH
23164: LD_INT 27
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PPUSH
23175: CALL_OW 69
23179: PUSH
23180: LD_INT 2
23182: EQUAL
23183: IFFALSE 23373
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
23185: LD_ADDR_VAR 0 2
23189: PUSH
23190: LD_INT 22
23192: PUSH
23193: LD_INT 2
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 21
23202: PUSH
23203: LD_INT 1
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 25
23212: PUSH
23213: LD_INT 2
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: LIST
23224: PPUSH
23225: CALL_OW 69
23229: PUSH
23230: LD_INT 1
23232: ARRAY
23233: ST_TO_ADDR
// if not i then
23234: LD_VAR 0 2
23238: NOT
23239: IFFALSE 23243
// exit ;
23241: GO 23373
// AddComMoveXY ( i , 92 , 34 ) ;
23243: LD_VAR 0 2
23247: PPUSH
23248: LD_INT 92
23250: PPUSH
23251: LD_INT 34
23253: PPUSH
23254: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
23258: LD_VAR 0 2
23262: PPUSH
23263: LD_INT 35
23265: PPUSH
23266: CALL_OW 202
// AddComMoveXY ( i , 82 , 57 ) ;
23270: LD_VAR 0 2
23274: PPUSH
23275: LD_INT 82
23277: PPUSH
23278: LD_INT 57
23280: PPUSH
23281: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
23285: LD_VAR 0 2
23289: PPUSH
23290: LD_INT 35
23292: PPUSH
23293: CALL_OW 202
// AddComMoveXY ( i , 36 , 28 ) ;
23297: LD_VAR 0 2
23301: PPUSH
23302: LD_INT 36
23304: PPUSH
23305: LD_INT 28
23307: PPUSH
23308: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
23312: LD_VAR 0 2
23316: PPUSH
23317: LD_INT 35
23319: PPUSH
23320: CALL_OW 202
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
23324: LD_INT 22
23326: PUSH
23327: LD_INT 2
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 21
23336: PUSH
23337: LD_INT 1
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 25
23346: PUSH
23347: LD_INT 2
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: LIST
23358: PPUSH
23359: CALL_OW 69
23363: PPUSH
23364: LD_EXP 43
23368: PPUSH
23369: CALL_OW 180
// end ; end ; end ;
23373: PPOPN 4
23375: END
// on UpgradeComplete ( building ) do var i ;
23376: LD_INT 0
23378: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
23379: LD_VAR 0 1
23383: PPUSH
23384: CALL_OW 255
23388: PUSH
23389: LD_INT 1
23391: EQUAL
23392: PUSH
23393: LD_EXP 63
23397: PUSH
23398: LD_INT 0
23400: EQUAL
23401: AND
23402: IFFALSE 23600
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
23404: LD_VAR 0 1
23408: PPUSH
23409: CALL_OW 266
23413: PUSH
23414: LD_INT 7
23416: EQUAL
23417: PUSH
23418: LD_VAR 0 1
23422: PPUSH
23423: CALL_OW 266
23427: PUSH
23428: LD_INT 8
23430: EQUAL
23431: OR
23432: IFFALSE 23600
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
23434: LD_INT 22
23436: PUSH
23437: LD_INT 1
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 2
23446: PUSH
23447: LD_INT 30
23449: PUSH
23450: LD_INT 26
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 30
23459: PUSH
23460: LD_INT 27
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: LD_INT 30
23469: PUSH
23470: LD_INT 28
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PPUSH
23487: CALL_OW 69
23491: PUSH
23492: LD_INT 0
23494: GREATER
23495: IFFALSE 23600
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
23497: LD_ADDR_VAR 0 2
23501: PUSH
23502: LD_INT 22
23504: PUSH
23505: LD_INT 1
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 2
23514: PUSH
23515: LD_INT 30
23517: PUSH
23518: LD_INT 7
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: LD_INT 30
23527: PUSH
23528: LD_INT 8
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: LIST
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PPUSH
23544: CALL_OW 69
23548: PUSH
23549: FOR_IN
23550: IFFALSE 23598
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
23552: LD_VAR 0 2
23556: PPUSH
23557: LD_INT 1
23559: PPUSH
23560: CALL_OW 268
23564: PUSH
23565: LD_INT 11
23567: EQUAL
23568: PUSH
23569: LD_VAR 0 2
23573: PPUSH
23574: LD_INT 2
23576: PPUSH
23577: CALL_OW 268
23581: PUSH
23582: LD_INT 11
23584: EQUAL
23585: OR
23586: IFFALSE 23596
// eventVar1 = 1 ;
23588: LD_ADDR_EXP 63
23592: PUSH
23593: LD_INT 1
23595: ST_TO_ADDR
23596: GO 23549
23598: POP
23599: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
23600: LD_VAR 0 1
23604: PPUSH
23605: CALL_OW 255
23609: PUSH
23610: LD_INT 2
23612: EQUAL
23613: IFFALSE 23718
// begin if GetBType ( building ) = b_barracks then
23615: LD_VAR 0 1
23619: PPUSH
23620: CALL_OW 266
23624: PUSH
23625: LD_INT 5
23627: EQUAL
23628: IFFALSE 23718
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
23630: LD_ADDR_VAR 0 2
23634: PUSH
23635: LD_INT 22
23637: PUSH
23638: LD_INT 2
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 25
23647: PUSH
23648: LD_INT 1
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 3
23657: PUSH
23658: LD_INT 54
23660: PUSH
23661: EMPTY
23662: LIST
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: LIST
23672: PPUSH
23673: CALL_OW 69
23677: PUSH
23678: LD_EXP 26
23682: PUSH
23683: EMPTY
23684: LIST
23685: DIFF
23686: PUSH
23687: FOR_IN
23688: IFFALSE 23706
// ComEnterUnit ( i , building ) ;
23690: LD_VAR 0 2
23694: PPUSH
23695: LD_VAR 0 1
23699: PPUSH
23700: CALL_OW 120
23704: GO 23687
23706: POP
23707: POP
// arArm = building ;
23708: LD_ADDR_EXP 45
23712: PUSH
23713: LD_VAR 0 1
23717: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
23718: LD_VAR 0 1
23722: PPUSH
23723: CALL_OW 255
23727: PUSH
23728: LD_INT 3
23730: EQUAL
23731: IFFALSE 24204
// begin if GetBType ( building ) = b_factory then
23733: LD_VAR 0 1
23737: PPUSH
23738: CALL_OW 266
23742: PUSH
23743: LD_INT 3
23745: EQUAL
23746: IFFALSE 23813
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
23748: LD_ADDR_VAR 0 2
23752: PUSH
23753: LD_INT 22
23755: PUSH
23756: LD_INT 3
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: LD_INT 25
23765: PUSH
23766: LD_INT 3
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PPUSH
23777: CALL_OW 69
23781: PUSH
23782: FOR_IN
23783: IFFALSE 23801
// ComEnterUnit ( i , building ) ;
23785: LD_VAR 0 2
23789: PPUSH
23790: LD_VAR 0 1
23794: PPUSH
23795: CALL_OW 120
23799: GO 23782
23801: POP
23802: POP
// ruFab = building ;
23803: LD_ADDR_EXP 35
23807: PUSH
23808: LD_VAR 0 1
23812: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
23813: LD_INT 22
23815: PUSH
23816: LD_INT 3
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 21
23825: PUSH
23826: LD_INT 3
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 30
23835: PUSH
23836: LD_INT 8
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: LIST
23847: PPUSH
23848: CALL_OW 69
23852: PUSH
23853: LD_INT 2
23855: EQUAL
23856: IFFALSE 24064
// begin for i = 1 to 2 do
23858: LD_ADDR_VAR 0 2
23862: PUSH
23863: DOUBLE
23864: LD_INT 1
23866: DEC
23867: ST_TO_ADDR
23868: LD_INT 2
23870: PUSH
23871: FOR_TO
23872: IFFALSE 23959
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
23874: LD_INT 22
23876: PUSH
23877: LD_INT 3
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 25
23886: PUSH
23887: LD_INT 4
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PPUSH
23898: CALL_OW 69
23902: PUSH
23903: LD_VAR 0 2
23907: ARRAY
23908: PPUSH
23909: LD_INT 22
23911: PUSH
23912: LD_INT 3
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 21
23921: PUSH
23922: LD_INT 3
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 30
23931: PUSH
23932: LD_INT 8
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: LIST
23943: PPUSH
23944: CALL_OW 69
23948: PUSH
23949: LD_INT 1
23951: ARRAY
23952: PPUSH
23953: CALL_OW 120
23957: GO 23871
23959: POP
23960: POP
// for i = 3 to 4 do
23961: LD_ADDR_VAR 0 2
23965: PUSH
23966: DOUBLE
23967: LD_INT 3
23969: DEC
23970: ST_TO_ADDR
23971: LD_INT 4
23973: PUSH
23974: FOR_TO
23975: IFFALSE 24062
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
23977: LD_INT 22
23979: PUSH
23980: LD_INT 3
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 25
23989: PUSH
23990: LD_INT 4
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PPUSH
24001: CALL_OW 69
24005: PUSH
24006: LD_VAR 0 2
24010: ARRAY
24011: PPUSH
24012: LD_INT 22
24014: PUSH
24015: LD_INT 3
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: PUSH
24022: LD_INT 21
24024: PUSH
24025: LD_INT 3
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 30
24034: PUSH
24035: LD_INT 8
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: LIST
24046: PPUSH
24047: CALL_OW 69
24051: PUSH
24052: LD_INT 2
24054: ARRAY
24055: PPUSH
24056: CALL_OW 120
24060: GO 23974
24062: POP
24063: POP
// end ; if GetBType ( building ) = b_barracks then
24064: LD_VAR 0 1
24068: PPUSH
24069: CALL_OW 266
24073: PUSH
24074: LD_INT 5
24076: EQUAL
24077: IFFALSE 24204
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
24079: LD_ADDR_VAR 0 2
24083: PUSH
24084: LD_INT 22
24086: PUSH
24087: LD_INT 3
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 25
24096: PUSH
24097: LD_INT 1
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 3
24106: PUSH
24107: LD_INT 54
24109: PUSH
24110: EMPTY
24111: LIST
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: LIST
24121: PPUSH
24122: CALL_OW 69
24126: PUSH
24127: FOR_IN
24128: IFFALSE 24146
// ComEnterUnit ( i , building ) ;
24130: LD_VAR 0 2
24134: PPUSH
24135: LD_VAR 0 1
24139: PPUSH
24140: CALL_OW 120
24144: GO 24127
24146: POP
24147: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
24148: LD_INT 22
24150: PUSH
24151: LD_INT 3
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 30
24160: PUSH
24161: LD_INT 5
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PPUSH
24172: CALL_OW 69
24176: PUSH
24177: LD_INT 0
24179: EQUAL
24180: IFFALSE 24194
// ruArm1 = building else
24182: LD_ADDR_EXP 33
24186: PUSH
24187: LD_VAR 0 1
24191: ST_TO_ADDR
24192: GO 24204
// ruArm2 = building ;
24194: LD_ADDR_EXP 34
24198: PUSH
24199: LD_VAR 0 1
24203: ST_TO_ADDR
// end ; end ; end ;
24204: PPOPN 2
24206: END
// on EnterBuilding ( building , human ) do var rnd ;
24207: LD_INT 0
24209: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
24210: LD_VAR 0 2
24214: PPUSH
24215: CALL_OW 255
24219: PUSH
24220: LD_INT 2
24222: EQUAL
24223: PUSH
24224: LD_VAR 0 2
24228: PPUSH
24229: CALL_OW 257
24233: PUSH
24234: LD_INT 1
24236: EQUAL
24237: AND
24238: PUSH
24239: LD_VAR 0 1
24243: PUSH
24244: LD_EXP 45
24248: EQUAL
24249: AND
24250: IFFALSE 24297
// begin wait ( 0 0$1 ) ;
24252: LD_INT 35
24254: PPUSH
24255: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
24259: LD_ADDR_VAR 0 3
24263: PUSH
24264: LD_INT 1
24266: PPUSH
24267: LD_INT 100
24269: PPUSH
24270: CALL_OW 12
24274: ST_TO_ADDR
// if rnd > 50 then
24275: LD_VAR 0 3
24279: PUSH
24280: LD_INT 50
24282: GREATER
24283: IFFALSE 24297
// SetClass ( human , class_mortar ) ;
24285: LD_VAR 0 2
24289: PPUSH
24290: LD_INT 8
24292: PPUSH
24293: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
24297: LD_VAR 0 2
24301: PUSH
24302: LD_INT 22
24304: PUSH
24305: LD_INT 2
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 25
24314: PUSH
24315: LD_INT 12
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PPUSH
24326: CALL_OW 69
24330: IN
24331: IFFALSE 24381
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
24333: LD_VAR 0 1
24337: PPUSH
24338: CALL_OW 266
24342: PUSH
24343: LD_INT 0
24345: PUSH
24346: LD_INT 1
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: IN
24353: IFFALSE 24369
// SetClass ( human , class_apeman_engineer ) else
24355: LD_VAR 0 2
24359: PPUSH
24360: LD_INT 16
24362: PPUSH
24363: CALL_OW 336
24367: GO 24381
// SetClass ( human , class_apeman_soldier ) ;
24369: LD_VAR 0 2
24373: PPUSH
24374: LD_INT 15
24376: PPUSH
24377: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
24381: LD_VAR 0 2
24385: PPUSH
24386: CALL_OW 255
24390: PUSH
24391: LD_INT 3
24393: EQUAL
24394: PUSH
24395: LD_VAR 0 2
24399: PPUSH
24400: CALL_OW 257
24404: PUSH
24405: LD_INT 1
24407: EQUAL
24408: AND
24409: PUSH
24410: LD_VAR 0 1
24414: PUSH
24415: LD_EXP 33
24419: EQUAL
24420: PUSH
24421: LD_VAR 0 1
24425: PUSH
24426: LD_EXP 34
24430: EQUAL
24431: OR
24432: PUSH
24433: EMPTY
24434: LIST
24435: AND
24436: IFFALSE 24457
// begin wait ( 0 0$1 ) ;
24438: LD_INT 35
24440: PPUSH
24441: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
24445: LD_VAR 0 2
24449: PPUSH
24450: LD_INT 9
24452: PPUSH
24453: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
24457: LD_VAR 0 2
24461: PPUSH
24462: CALL_OW 255
24466: PUSH
24467: LD_INT 3
24469: EQUAL
24470: PUSH
24471: LD_VAR 0 2
24475: PPUSH
24476: CALL_OW 257
24480: PUSH
24481: LD_INT 9
24483: EQUAL
24484: AND
24485: PUSH
24486: LD_VAR 0 1
24490: PPUSH
24491: CALL_OW 266
24495: PUSH
24496: LD_INT 32
24498: EQUAL
24499: AND
24500: IFFALSE 24521
// begin wait ( 0 0$1 ) ;
24502: LD_INT 35
24504: PPUSH
24505: CALL_OW 67
// SetClass ( human , 1 ) ;
24509: LD_VAR 0 2
24513: PPUSH
24514: LD_INT 1
24516: PPUSH
24517: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
24521: LD_VAR 0 2
24525: PPUSH
24526: CALL_OW 255
24530: PUSH
24531: LD_INT 3
24533: EQUAL
24534: PUSH
24535: LD_VAR 0 2
24539: PPUSH
24540: CALL_OW 257
24544: PUSH
24545: LD_INT 3
24547: EQUAL
24548: AND
24549: PUSH
24550: LD_VAR 0 1
24554: PUSH
24555: LD_EXP 35
24559: EQUAL
24560: AND
24561: IFFALSE 24575
// SetLives ( human , 1000 ) ;
24563: LD_VAR 0 2
24567: PPUSH
24568: LD_INT 1000
24570: PPUSH
24571: CALL_OW 234
// end ;
24575: PPOPN 3
24577: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
24578: LD_VAR 0 1
24582: PUSH
24583: LD_INT 1
24585: EQUAL
24586: PUSH
24587: LD_VAR 0 2
24591: PUSH
24592: LD_INT 2
24594: EQUAL
24595: AND
24596: PUSH
24597: LD_INT 1
24599: PPUSH
24600: LD_INT 2
24602: PPUSH
24603: CALL_OW 81
24607: PUSH
24608: LD_INT 1
24610: EQUAL
24611: AND
24612: IFFALSE 24633
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
24614: LD_EXP 24
24618: PPUSH
24619: LD_STRING D6b-Pow-1
24621: PPUSH
24622: CALL_OW 94
// YouLost ( Powell ) ;
24626: LD_STRING Powell
24628: PPUSH
24629: CALL_OW 104
// end ; end ;
24633: PPOPN 2
24635: END
// every 0 0$3 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
24636: LD_INT 23
24638: PPUSH
24639: LD_INT 22
24641: PUSH
24642: LD_INT 1
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 21
24651: PUSH
24652: LD_INT 3
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PPUSH
24663: CALL_OW 70
24667: PUSH
24668: LD_INT 23
24670: PPUSH
24671: LD_INT 22
24673: PUSH
24674: LD_INT 1
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 21
24683: PUSH
24684: LD_INT 2
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PPUSH
24695: CALL_OW 70
24699: OR
24700: PUSH
24701: LD_INT 1
24703: PPUSH
24704: LD_INT 2
24706: PPUSH
24707: CALL_OW 81
24711: PUSH
24712: LD_INT 1
24714: EQUAL
24715: AND
24716: IFFALSE 24740
24718: GO 24720
24720: DISABLE
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
24721: LD_EXP 24
24725: PPUSH
24726: LD_STRING D6b-Pow-1
24728: PPUSH
24729: CALL_OW 94
// YouLost ( Powell ) ;
24733: LD_STRING Powell
24735: PPUSH
24736: CALL_OW 104
// end ;
24740: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
24741: LD_VAR 0 1
24745: PUSH
24746: LD_EXP 1
24750: EQUAL
24751: IFFALSE 24760
// YouLost ( JMM ) ;
24753: LD_STRING JMM
24755: PPUSH
24756: CALL_OW 104
// if unit = Khatam then
24760: LD_VAR 0 1
24764: PUSH
24765: LD_EXP 14
24769: EQUAL
24770: IFFALSE 24780
// KhatamStatus = 0 ;
24772: LD_ADDR_EXP 53
24776: PUSH
24777: LD_INT 0
24779: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
24780: LD_VAR 0 1
24784: PPUSH
24785: CALL_OW 255
24789: PUSH
24790: LD_INT 3
24792: EQUAL
24793: PUSH
24794: LD_VAR 0 1
24798: PPUSH
24799: CALL_OW 247
24803: PUSH
24804: LD_INT 3
24806: EQUAL
24807: AND
24808: IFFALSE 25500
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
24810: LD_VAR 0 1
24814: PPUSH
24815: CALL_OW 266
24819: PUSH
24820: LD_INT 31
24822: EQUAL
24823: PUSH
24824: LD_VAR 0 1
24828: PPUSH
24829: CALL_OW 266
24833: PUSH
24834: LD_INT 32
24836: EQUAL
24837: OR
24838: PUSH
24839: LD_VAR 0 1
24843: PPUSH
24844: CALL_OW 266
24848: PUSH
24849: LD_INT 36
24851: EQUAL
24852: OR
24853: PUSH
24854: LD_VAR 0 1
24858: PPUSH
24859: CALL_OW 266
24863: PUSH
24864: LD_INT 0
24866: EQUAL
24867: OR
24868: PUSH
24869: LD_VAR 0 1
24873: PPUSH
24874: CALL_OW 266
24878: PUSH
24879: LD_INT 24
24881: EQUAL
24882: OR
24883: PUSH
24884: LD_VAR 0 1
24888: PPUSH
24889: CALL_OW 266
24893: PUSH
24894: LD_INT 17
24896: EQUAL
24897: OR
24898: PUSH
24899: LD_VAR 0 1
24903: PPUSH
24904: CALL_OW 266
24908: PUSH
24909: LD_INT 25
24911: EQUAL
24912: OR
24913: PUSH
24914: LD_VAR 0 1
24918: PPUSH
24919: CALL_OW 266
24923: PUSH
24924: LD_INT 19
24926: EQUAL
24927: OR
24928: PUSH
24929: LD_VAR 0 1
24933: PPUSH
24934: CALL_OW 266
24938: PUSH
24939: LD_INT 20
24941: EQUAL
24942: OR
24943: PUSH
24944: LD_VAR 0 1
24948: PPUSH
24949: CALL_OW 266
24953: PUSH
24954: LD_INT 18
24956: EQUAL
24957: OR
24958: PUSH
24959: LD_VAR 0 1
24963: PPUSH
24964: CALL_OW 266
24968: PUSH
24969: LD_INT 21
24971: EQUAL
24972: OR
24973: PUSH
24974: LD_VAR 0 1
24978: PPUSH
24979: CALL_OW 266
24983: PUSH
24984: LD_INT 23
24986: EQUAL
24987: OR
24988: PUSH
24989: LD_VAR 0 1
24993: PPUSH
24994: CALL_OW 266
24998: PUSH
24999: LD_INT 16
25001: EQUAL
25002: OR
25003: PUSH
25004: LD_VAR 0 1
25008: PPUSH
25009: CALL_OW 266
25013: PUSH
25014: LD_INT 6
25016: EQUAL
25017: OR
25018: PUSH
25019: LD_VAR 0 1
25023: PPUSH
25024: CALL_OW 266
25028: PUSH
25029: LD_INT 29
25031: EQUAL
25032: OR
25033: PUSH
25034: LD_VAR 0 1
25038: PPUSH
25039: CALL_OW 266
25043: PUSH
25044: LD_INT 26
25046: EQUAL
25047: OR
25048: PUSH
25049: LD_VAR 0 1
25053: PPUSH
25054: CALL_OW 266
25058: PUSH
25059: LD_INT 30
25061: EQUAL
25062: OR
25063: PUSH
25064: LD_VAR 0 1
25068: PPUSH
25069: CALL_OW 266
25073: PUSH
25074: LD_INT 28
25076: EQUAL
25077: OR
25078: PUSH
25079: LD_VAR 0 1
25083: PPUSH
25084: CALL_OW 266
25088: PUSH
25089: LD_INT 27
25091: EQUAL
25092: OR
25093: PUSH
25094: LD_VAR 0 1
25098: PPUSH
25099: CALL_OW 266
25103: PUSH
25104: LD_INT 33
25106: EQUAL
25107: OR
25108: PUSH
25109: LD_VAR 0 1
25113: PPUSH
25114: CALL_OW 266
25118: PUSH
25119: LD_INT 2
25121: EQUAL
25122: OR
25123: PUSH
25124: LD_VAR 0 1
25128: PPUSH
25129: CALL_OW 266
25133: PUSH
25134: LD_INT 4
25136: EQUAL
25137: OR
25138: IFFALSE 25224
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
25140: LD_ADDR_EXP 42
25144: PUSH
25145: LD_EXP 42
25149: PUSH
25150: LD_VAR 0 1
25154: PPUSH
25155: CALL_OW 266
25159: ADD
25160: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
25161: LD_ADDR_EXP 42
25165: PUSH
25166: LD_EXP 42
25170: PUSH
25171: LD_VAR 0 1
25175: PPUSH
25176: CALL_OW 250
25180: ADD
25181: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
25182: LD_ADDR_EXP 42
25186: PUSH
25187: LD_EXP 42
25191: PUSH
25192: LD_VAR 0 1
25196: PPUSH
25197: CALL_OW 251
25201: ADD
25202: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
25203: LD_ADDR_EXP 42
25207: PUSH
25208: LD_EXP 42
25212: PUSH
25213: LD_VAR 0 1
25217: PPUSH
25218: CALL_OW 254
25222: ADD
25223: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
25224: LD_VAR 0 1
25228: PPUSH
25229: CALL_OW 266
25233: PUSH
25234: LD_INT 1
25236: EQUAL
25237: IFFALSE 25316
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
25239: LD_ADDR_EXP 42
25243: PUSH
25244: LD_EXP 42
25248: PUSH
25249: LD_INT 0
25251: ADD
25252: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
25253: LD_ADDR_EXP 42
25257: PUSH
25258: LD_EXP 42
25262: PUSH
25263: LD_VAR 0 1
25267: PPUSH
25268: CALL_OW 250
25272: ADD
25273: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
25274: LD_ADDR_EXP 42
25278: PUSH
25279: LD_EXP 42
25283: PUSH
25284: LD_VAR 0 1
25288: PPUSH
25289: CALL_OW 251
25293: ADD
25294: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
25295: LD_ADDR_EXP 42
25299: PUSH
25300: LD_EXP 42
25304: PUSH
25305: LD_VAR 0 1
25309: PPUSH
25310: CALL_OW 254
25314: ADD
25315: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
25316: LD_VAR 0 1
25320: PPUSH
25321: CALL_OW 266
25325: PUSH
25326: LD_INT 3
25328: EQUAL
25329: IFFALSE 25408
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
25331: LD_ADDR_EXP 42
25335: PUSH
25336: LD_EXP 42
25340: PUSH
25341: LD_INT 2
25343: ADD
25344: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
25345: LD_ADDR_EXP 42
25349: PUSH
25350: LD_EXP 42
25354: PUSH
25355: LD_VAR 0 1
25359: PPUSH
25360: CALL_OW 250
25364: ADD
25365: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
25366: LD_ADDR_EXP 42
25370: PUSH
25371: LD_EXP 42
25375: PUSH
25376: LD_VAR 0 1
25380: PPUSH
25381: CALL_OW 251
25385: ADD
25386: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
25387: LD_ADDR_EXP 42
25391: PUSH
25392: LD_EXP 42
25396: PUSH
25397: LD_VAR 0 1
25401: PPUSH
25402: CALL_OW 254
25406: ADD
25407: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
25408: LD_VAR 0 1
25412: PPUSH
25413: CALL_OW 266
25417: PUSH
25418: LD_INT 5
25420: EQUAL
25421: IFFALSE 25500
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
25423: LD_ADDR_EXP 42
25427: PUSH
25428: LD_EXP 42
25432: PUSH
25433: LD_INT 4
25435: ADD
25436: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
25437: LD_ADDR_EXP 42
25441: PUSH
25442: LD_EXP 42
25446: PUSH
25447: LD_VAR 0 1
25451: PPUSH
25452: CALL_OW 250
25456: ADD
25457: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
25458: LD_ADDR_EXP 42
25462: PUSH
25463: LD_EXP 42
25467: PUSH
25468: LD_VAR 0 1
25472: PPUSH
25473: CALL_OW 251
25477: ADD
25478: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
25479: LD_ADDR_EXP 42
25483: PUSH
25484: LD_EXP 42
25488: PUSH
25489: LD_VAR 0 1
25493: PPUSH
25494: CALL_OW 254
25498: ADD
25499: ST_TO_ADDR
// end ; end ; if ruMech and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
25500: LD_EXP 51
25504: PUSH
25505: LD_VAR 0 1
25509: PPUSH
25510: CALL_OW 257
25514: PUSH
25515: LD_INT 3
25517: EQUAL
25518: AND
25519: PUSH
25520: LD_VAR 0 1
25524: PPUSH
25525: CALL_OW 255
25529: PUSH
25530: LD_INT 3
25532: EQUAL
25533: AND
25534: PUSH
25535: LD_EXP 35
25539: PPUSH
25540: CALL_OW 302
25544: AND
25545: PUSH
25546: LD_EXP 35
25550: PPUSH
25551: CALL_OW 255
25555: PUSH
25556: LD_INT 3
25558: EQUAL
25559: AND
25560: IFFALSE 25644
// begin ruMech := ruMech - 1 ;
25562: LD_ADDR_EXP 51
25566: PUSH
25567: LD_EXP 51
25571: PUSH
25572: LD_INT 1
25574: MINUS
25575: ST_TO_ADDR
// uc_side = 3 ;
25576: LD_ADDR_OWVAR 20
25580: PUSH
25581: LD_INT 3
25583: ST_TO_ADDR
// uc_nation = 3 ;
25584: LD_ADDR_OWVAR 21
25588: PUSH
25589: LD_INT 3
25591: ST_TO_ADDR
// hc_gallery :=  ;
25592: LD_ADDR_OWVAR 33
25596: PUSH
25597: LD_STRING 
25599: ST_TO_ADDR
// hc_name :=  ;
25600: LD_ADDR_OWVAR 26
25604: PUSH
25605: LD_STRING 
25607: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
25608: LD_INT 0
25610: PPUSH
25611: LD_EXP 36
25615: PPUSH
25616: LD_EXP 37
25620: PPUSH
25621: CALL_OW 12
25625: PPUSH
25626: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
25630: CALL_OW 44
25634: PPUSH
25635: LD_EXP 35
25639: PPUSH
25640: CALL_OW 52
// end ; end ;
25644: PPOPN 1
25646: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
25647: LD_ADDR_OWVAR 57
25651: PUSH
25652: LD_INT 0
25654: ST_TO_ADDR
// fastEnd = 1 ;
25655: LD_ADDR_EXP 61
25659: PUSH
25660: LD_INT 1
25662: ST_TO_ADDR
// FinishMission ;
25663: CALL 26779 0 0
// end ;
25667: PPOPN 1
25669: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
25670: LD_VAR 0 1
25674: PPUSH
25675: CALL 28655 0 1
// end ; end_of_file
25679: PPOPN 1
25681: END
// export function PrepareNature ; var i , un ; begin
25682: LD_INT 0
25684: PPUSH
25685: PPUSH
25686: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
25687: LD_ADDR_VAR 0 2
25691: PUSH
25692: DOUBLE
25693: LD_INT 1
25695: DEC
25696: ST_TO_ADDR
25697: LD_OWVAR 67
25701: PUSH
25702: LD_INT 1
25704: PPUSH
25705: LD_INT 5
25707: PPUSH
25708: CALL_OW 12
25712: PLUS
25713: PUSH
25714: FOR_TO
25715: IFFALSE 25860
// begin hc_sex = sex_male ;
25717: LD_ADDR_OWVAR 27
25721: PUSH
25722: LD_INT 1
25724: ST_TO_ADDR
// uc_side = 0 ;
25725: LD_ADDR_OWVAR 20
25729: PUSH
25730: LD_INT 0
25732: ST_TO_ADDR
// uc_nation = nation_nature ;
25733: LD_ADDR_OWVAR 21
25737: PUSH
25738: LD_INT 0
25740: ST_TO_ADDR
// hc_class = class_apeman ;
25741: LD_ADDR_OWVAR 28
25745: PUSH
25746: LD_INT 12
25748: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
25749: LD_ADDR_OWVAR 31
25753: PUSH
25754: LD_INT 2
25756: PPUSH
25757: LD_INT 7
25759: PPUSH
25760: CALL_OW 12
25764: PUSH
25765: LD_OWVAR 67
25769: PLUS
25770: PUSH
25771: LD_INT 2
25773: PPUSH
25774: LD_INT 10
25776: PPUSH
25777: CALL_OW 12
25781: PUSH
25782: LD_INT 2
25784: PPUSH
25785: LD_INT 10
25787: PPUSH
25788: CALL_OW 12
25792: PUSH
25793: LD_INT 2
25795: PPUSH
25796: LD_INT 10
25798: PPUSH
25799: CALL_OW 12
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
25810: LD_ADDR_OWVAR 35
25814: PUSH
25815: LD_INT 5
25817: NEG
25818: PPUSH
25819: LD_INT 5
25821: PPUSH
25822: CALL_OW 12
25826: PUSH
25827: LD_OWVAR 67
25831: MUL
25832: ST_TO_ADDR
// un = CreateHuman ;
25833: LD_ADDR_VAR 0 3
25837: PUSH
25838: CALL_OW 44
25842: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
25843: LD_VAR 0 3
25847: PPUSH
25848: LD_INT 5
25850: PPUSH
25851: LD_INT 0
25853: PPUSH
25854: CALL_OW 49
// end ;
25858: GO 25714
25860: POP
25861: POP
// for i = 1 to Difficulty + 2 do
25862: LD_ADDR_VAR 0 2
25866: PUSH
25867: DOUBLE
25868: LD_INT 1
25870: DEC
25871: ST_TO_ADDR
25872: LD_OWVAR 67
25876: PUSH
25877: LD_INT 2
25879: PLUS
25880: PUSH
25881: FOR_TO
25882: IFFALSE 25991
// begin hc_sex = sex_male ;
25884: LD_ADDR_OWVAR 27
25888: PUSH
25889: LD_INT 1
25891: ST_TO_ADDR
// uc_side = 0 ;
25892: LD_ADDR_OWVAR 20
25896: PUSH
25897: LD_INT 0
25899: ST_TO_ADDR
// uc_nation = nation_nature ;
25900: LD_ADDR_OWVAR 21
25904: PUSH
25905: LD_INT 0
25907: ST_TO_ADDR
// hc_class = class_tiger ;
25908: LD_ADDR_OWVAR 28
25912: PUSH
25913: LD_INT 14
25915: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
25916: LD_ADDR_OWVAR 31
25920: PUSH
25921: LD_EXP 37
25925: PUSH
25926: LD_INT 0
25928: PUSH
25929: LD_INT 0
25931: PUSH
25932: LD_INT 0
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
25941: LD_ADDR_OWVAR 35
25945: PUSH
25946: LD_INT 5
25948: NEG
25949: PPUSH
25950: LD_INT 5
25952: PPUSH
25953: CALL_OW 12
25957: PUSH
25958: LD_OWVAR 67
25962: MUL
25963: ST_TO_ADDR
// un = CreateHuman ;
25964: LD_ADDR_VAR 0 3
25968: PUSH
25969: CALL_OW 44
25973: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
25974: LD_VAR 0 3
25978: PPUSH
25979: LD_INT 6
25981: PPUSH
25982: LD_INT 0
25984: PPUSH
25985: CALL_OW 49
// end ;
25989: GO 25881
25991: POP
25992: POP
// for i = 1 to rand ( 3 , 4 ) do
25993: LD_ADDR_VAR 0 2
25997: PUSH
25998: DOUBLE
25999: LD_INT 1
26001: DEC
26002: ST_TO_ADDR
26003: LD_INT 3
26005: PPUSH
26006: LD_INT 4
26008: PPUSH
26009: CALL_OW 12
26013: PUSH
26014: FOR_TO
26015: IFFALSE 26109
// begin hc_sex = sex_male ;
26017: LD_ADDR_OWVAR 27
26021: PUSH
26022: LD_INT 1
26024: ST_TO_ADDR
// uc_side = 0 ;
26025: LD_ADDR_OWVAR 20
26029: PUSH
26030: LD_INT 0
26032: ST_TO_ADDR
// uc_nation = nation_nature ;
26033: LD_ADDR_OWVAR 21
26037: PUSH
26038: LD_INT 0
26040: ST_TO_ADDR
// hc_class = 18 ;
26041: LD_ADDR_OWVAR 28
26045: PUSH
26046: LD_INT 18
26048: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
26049: LD_ADDR_OWVAR 31
26053: PUSH
26054: LD_EXP 37
26058: PUSH
26059: LD_INT 0
26061: PUSH
26062: LD_INT 0
26064: PUSH
26065: LD_INT 0
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: ST_TO_ADDR
// hc_agressivity = 0 ;
26074: LD_ADDR_OWVAR 35
26078: PUSH
26079: LD_INT 0
26081: ST_TO_ADDR
// un = CreateHuman ;
26082: LD_ADDR_VAR 0 3
26086: PUSH
26087: CALL_OW 44
26091: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
26092: LD_VAR 0 3
26096: PPUSH
26097: LD_INT 6
26099: PPUSH
26100: LD_INT 0
26102: PPUSH
26103: CALL_OW 49
// end ;
26107: GO 26014
26109: POP
26110: POP
// end ; end_of_file
26111: LD_VAR 0 1
26115: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
26116: LD_EXP 46
26120: PUSH
26121: LD_INT 1
26123: EQUAL
26124: IFFALSE 26208
26126: GO 26128
26128: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
26129: LD_INT 7
26131: PPUSH
26132: LD_INT 5
26134: PPUSH
26135: LD_INT 4
26137: PUSH
26138: LD_INT 5
26140: PUSH
26141: LD_INT 6
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: LIST
26148: PUSH
26149: LD_OWVAR 67
26153: ARRAY
26154: PPUSH
26155: LD_EXP 36
26159: PPUSH
26160: LD_EXP 37
26164: PPUSH
26165: CALL_OW 12
26169: PPUSH
26170: LD_INT 2
26172: PPUSH
26173: LD_INT 1
26175: PPUSH
26176: LD_INT 1
26178: PPUSH
26179: EMPTY
26180: PPUSH
26181: LD_INT 25
26183: PUSH
26184: LD_INT 26
26186: PUSH
26187: LD_INT 27
26189: PUSH
26190: LD_INT 28
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: PPUSH
26199: EMPTY
26200: PPUSH
26201: LD_INT 1
26203: PPUSH
26204: CALL 16455 0 11
26208: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
26209: LD_EXP 46
26213: PUSH
26214: LD_INT 1
26216: EQUAL
26217: IFFALSE 26305
26219: GO 26221
26221: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
26222: LD_INT 5
26224: PPUSH
26225: LD_INT 2
26227: PPUSH
26228: LD_INT 5
26230: PUSH
26231: LD_INT 6
26233: PUSH
26234: LD_INT 8
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: LIST
26241: PUSH
26242: LD_OWVAR 67
26246: ARRAY
26247: PPUSH
26248: LD_INT 0
26250: PPUSH
26251: LD_INT 0
26253: PPUSH
26254: LD_INT 2
26256: PUSH
26257: LD_INT 4
26259: PUSH
26260: LD_INT 5
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: LIST
26267: PUSH
26268: LD_OWVAR 67
26272: ARRAY
26273: PPUSH
26274: LD_INT 0
26276: PPUSH
26277: LD_EXP 36
26281: PPUSH
26282: LD_EXP 37
26286: PPUSH
26287: CALL_OW 12
26291: PPUSH
26292: LD_INT 7
26294: PPUSH
26295: LD_INT 9
26297: PPUSH
26298: LD_INT 1
26300: PPUSH
26301: CALL 18159 0 11
26305: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
26306: LD_EXP 46
26310: PUSH
26311: LD_INT 1
26313: EQUAL
26314: IFFALSE 26323
26316: GO 26318
26318: DISABLE
// PrepareArabianSheik ;
26319: CALL 4467 0 0
26323: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
26324: LD_EXP 29
26328: PUSH
26329: LD_EXP 62
26333: PUSH
26334: LD_INT 1
26336: EQUAL
26337: AND
26338: IFFALSE 26407
26340: GO 26342
26342: DISABLE
// begin enable ;
26343: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
26344: LD_INT 6
26346: PPUSH
26347: LD_INT 3
26349: PPUSH
26350: LD_EXP 58
26354: PPUSH
26355: LD_INT 0
26357: PPUSH
26358: LD_OWVAR 67
26362: PPUSH
26363: LD_INT 0
26365: PPUSH
26366: LD_EXP 58
26370: PUSH
26371: LD_INT 3
26373: DIV
26374: PUSH
26375: LD_INT 1
26377: PLUS
26378: PPUSH
26379: LD_EXP 36
26383: PPUSH
26384: LD_EXP 37
26388: PPUSH
26389: CALL_OW 12
26393: PPUSH
26394: LD_INT 17
26396: PPUSH
26397: LD_INT 18
26399: PPUSH
26400: LD_INT 1
26402: PPUSH
26403: CALL 18159 0 11
// end ;
26407: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
26408: LD_EXP 29
26412: PUSH
26413: LD_EXP 62
26417: PUSH
26418: LD_INT 1
26420: EQUAL
26421: AND
26422: IFFALSE 26499
26424: GO 26426
26426: DISABLE
// begin enable ;
26427: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
26428: LD_INT 17
26430: PPUSH
26431: LD_INT 6
26433: PPUSH
26434: LD_EXP 57
26438: PPUSH
26439: LD_EXP 36
26443: PPUSH
26444: LD_EXP 37
26448: PPUSH
26449: CALL_OW 12
26453: PPUSH
26454: LD_INT 3
26456: PPUSH
26457: LD_INT 1
26459: PPUSH
26460: LD_INT 3
26462: PUSH
26463: LD_INT 3
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PPUSH
26470: LD_INT 43
26472: PUSH
26473: LD_INT 44
26475: PUSH
26476: LD_INT 45
26478: PUSH
26479: LD_INT 46
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: PPUSH
26488: EMPTY
26489: PPUSH
26490: EMPTY
26491: PPUSH
26492: LD_INT 1
26494: PPUSH
26495: CALL 16455 0 11
// end ;
26499: END
// every 10 10$00 trigger joinEpsilon do
26500: LD_EXP 29
26504: IFFALSE 26558
26506: GO 26508
26508: DISABLE
// begin enable ;
26509: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
26510: LD_ADDR_EXP 57
26514: PUSH
26515: LD_EXP 57
26519: PUSH
26520: LD_INT 1
26522: PPUSH
26523: LD_OWVAR 67
26527: PPUSH
26528: CALL_OW 12
26532: PLUS
26533: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
26534: LD_ADDR_EXP 58
26538: PUSH
26539: LD_EXP 58
26543: PUSH
26544: LD_INT 1
26546: PPUSH
26547: LD_OWVAR 67
26551: PPUSH
26552: CALL_OW 12
26556: PLUS
26557: ST_TO_ADDR
// end ;
26558: END
// every 21 21$0 trigger attackAvalaible = 1 do
26559: LD_EXP 62
26563: PUSH
26564: LD_INT 1
26566: EQUAL
26567: IFFALSE 26580
26569: GO 26571
26571: DISABLE
// attackAvalaible = 0 ; end_of_file
26572: LD_ADDR_EXP 62
26576: PUSH
26577: LD_INT 0
26579: ST_TO_ADDR
26580: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
26581: LD_INT 54
26583: PPUSH
26584: LD_INT 1
26586: PPUSH
26587: CALL_OW 321
26591: PUSH
26592: LD_INT 2
26594: EQUAL
26595: PUSH
26596: LD_INT 55
26598: PPUSH
26599: LD_INT 1
26601: PPUSH
26602: CALL_OW 321
26606: PUSH
26607: LD_INT 2
26609: EQUAL
26610: AND
26611: PUSH
26612: LD_INT 21
26614: PPUSH
26615: LD_INT 1
26617: PPUSH
26618: CALL_OW 321
26622: PUSH
26623: LD_INT 2
26625: EQUAL
26626: AND
26627: PUSH
26628: LD_INT 22
26630: PPUSH
26631: LD_INT 1
26633: PPUSH
26634: CALL_OW 321
26638: PUSH
26639: LD_INT 2
26641: EQUAL
26642: AND
26643: PUSH
26644: LD_INT 12
26646: PPUSH
26647: LD_INT 1
26649: PPUSH
26650: CALL_OW 321
26654: PUSH
26655: LD_INT 1
26657: EQUAL
26658: PUSH
26659: LD_INT 32
26661: PPUSH
26662: LD_INT 1
26664: PPUSH
26665: CALL_OW 321
26669: PUSH
26670: LD_INT 1
26672: EQUAL
26673: OR
26674: PUSH
26675: EMPTY
26676: LIST
26677: AND
26678: PUSH
26679: LD_EXP 48
26683: PUSH
26684: LD_INT 1
26686: EQUAL
26687: AND
26688: PUSH
26689: LD_INT 22
26691: PUSH
26692: LD_INT 3
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 21
26701: PUSH
26702: LD_INT 1
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PPUSH
26713: CALL_OW 69
26717: PUSH
26718: LD_INT 0
26720: EQUAL
26721: AND
26722: IFFALSE 26778
26724: GO 26726
26726: DISABLE
// begin case query ( QEndMission ) of 1 :
26727: LD_STRING QEndMission
26729: PPUSH
26730: CALL_OW 97
26734: PUSH
26735: LD_INT 1
26737: DOUBLE
26738: EQUAL
26739: IFTRUE 26743
26741: GO 26754
26743: POP
// begin end_the_mission_allowed = true ;
26744: LD_ADDR_OWVAR 57
26748: PUSH
26749: LD_INT 1
26751: ST_TO_ADDR
// end ; 2 :
26752: GO 26778
26754: LD_INT 2
26756: DOUBLE
26757: EQUAL
26758: IFTRUE 26762
26760: GO 26777
26762: POP
// begin fastEnd = 1 ;
26763: LD_ADDR_EXP 61
26767: PUSH
26768: LD_INT 1
26770: ST_TO_ADDR
// FinishMission ;
26771: CALL 26779 0 0
// end ; end ;
26775: GO 26778
26777: POP
// end ;
26778: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
26779: LD_INT 0
26781: PPUSH
26782: PPUSH
26783: PPUSH
26784: PPUSH
// if not snipersTrained then
26785: LD_EXP 60
26789: NOT
26790: IFFALSE 26799
// SetAchievement ( ACH_SNIPER ) ;
26792: LD_STRING ACH_SNIPER
26794: PPUSH
26795: CALL_OW 543
// m1 := false ;
26799: LD_ADDR_VAR 0 2
26803: PUSH
26804: LD_INT 0
26806: ST_TO_ADDR
// m2 := false ;
26807: LD_ADDR_VAR 0 3
26811: PUSH
26812: LD_INT 0
26814: ST_TO_ADDR
// m3 := false ;
26815: LD_ADDR_VAR 0 4
26819: PUSH
26820: LD_INT 0
26822: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
26823: LD_EXP 53
26827: PPUSH
26828: LD_STRING 10_KhatamStatus_1
26830: PPUSH
26831: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
26835: LD_EXP 52
26839: PPUSH
26840: LD_STRING 10_GensherEscape_1
26842: PPUSH
26843: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
26847: LD_INT 12
26849: PPUSH
26850: LD_INT 1
26852: PPUSH
26853: CALL_OW 321
26857: PUSH
26858: LD_INT 2
26860: EQUAL
26861: IFFALSE 26883
// begin AddMedal ( sights , 1 ) ;
26863: LD_STRING sights
26865: PPUSH
26866: LD_INT 1
26868: PPUSH
26869: CALL_OW 101
// m1 := true ;
26873: LD_ADDR_VAR 0 2
26877: PUSH
26878: LD_INT 1
26880: ST_TO_ADDR
// end else
26881: GO 26894
// begin AddMedal ( sights , - 1 ) ;
26883: LD_STRING sights
26885: PPUSH
26886: LD_INT 1
26888: NEG
26889: PPUSH
26890: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
26894: LD_INT 32
26896: PPUSH
26897: LD_INT 1
26899: PPUSH
26900: CALL_OW 321
26904: PUSH
26905: LD_INT 2
26907: EQUAL
26908: IFFALSE 26930
// begin AddMedal ( computers , 1 ) ;
26910: LD_STRING computers
26912: PPUSH
26913: LD_INT 1
26915: PPUSH
26916: CALL_OW 101
// m2 := true ;
26920: LD_ADDR_VAR 0 3
26924: PUSH
26925: LD_INT 1
26927: ST_TO_ADDR
// end else
26928: GO 26941
// begin AddMedal ( computers , - 1 ) ;
26930: LD_STRING computers
26932: PPUSH
26933: LD_INT 1
26935: NEG
26936: PPUSH
26937: CALL_OW 101
// end ; if arabianEscape = 0 then
26941: LD_EXP 47
26945: PUSH
26946: LD_INT 0
26948: EQUAL
26949: IFFALSE 26981
// begin AddMedal ( renegades , 2 ) ;
26951: LD_STRING renegades
26953: PPUSH
26954: LD_INT 2
26956: PPUSH
26957: CALL_OW 101
// m3 := true ;
26961: LD_ADDR_VAR 0 4
26965: PUSH
26966: LD_INT 1
26968: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
26969: LD_INT 0
26971: PPUSH
26972: LD_STRING 10_ScientistsEscape_1
26974: PPUSH
26975: CALL_OW 39
// end else
26979: GO 26992
// begin AddMedal ( renegades , - 1 ) ;
26981: LD_STRING renegades
26983: PPUSH
26984: LD_INT 1
26986: NEG
26987: PPUSH
26988: CALL_OW 101
// end ; SaveEpsilonBase ;
26992: CALL 27778 0 0
// if m1 and m2 and m3 and Difficulty = 3 then
26996: LD_VAR 0 2
27000: PUSH
27001: LD_VAR 0 3
27005: AND
27006: PUSH
27007: LD_VAR 0 4
27011: AND
27012: PUSH
27013: LD_OWVAR 67
27017: PUSH
27018: LD_INT 3
27020: EQUAL
27021: AND
27022: IFFALSE 27034
// SetAchievementEX ( ACH_AMER , 10 ) ;
27024: LD_STRING ACH_AMER
27026: PPUSH
27027: LD_INT 10
27029: PPUSH
27030: CALL_OW 564
// if tick <= 40 40$00 then
27034: LD_OWVAR 1
27038: PUSH
27039: LD_INT 84000
27041: LESSEQUAL
27042: IFFALSE 27058
// begin wait ( 3 ) ;
27044: LD_INT 3
27046: PPUSH
27047: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
27051: LD_STRING ACH_ASPEED_10
27053: PPUSH
27054: CALL_OW 543
// end ; GiveMedals ( Main ) ;
27058: LD_STRING Main
27060: PPUSH
27061: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
27065: LD_INT 22
27067: PUSH
27068: LD_INT 1
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 23
27077: PUSH
27078: LD_INT 1
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 21
27087: PUSH
27088: LD_INT 1
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 2
27097: PUSH
27098: LD_INT 25
27100: PUSH
27101: LD_INT 1
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 25
27110: PUSH
27111: LD_INT 2
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 25
27120: PUSH
27121: LD_INT 3
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 25
27130: PUSH
27131: LD_INT 4
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 25
27140: PUSH
27141: LD_INT 5
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 25
27150: PUSH
27151: LD_INT 8
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: PPUSH
27173: CALL_OW 69
27177: PPUSH
27178: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
27182: LD_EXP 1
27186: PPUSH
27187: LD_EXP 54
27191: PUSH
27192: LD_STRING JMM
27194: STR
27195: PPUSH
27196: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
27200: LD_EXP 2
27204: PPUSH
27205: LD_EXP 54
27209: PUSH
27210: LD_STRING Brown
27212: STR
27213: PPUSH
27214: CALL 10625 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
27218: LD_EXP 3
27222: PPUSH
27223: LD_EXP 54
27227: PUSH
27228: LD_STRING Donaldson
27230: STR
27231: PPUSH
27232: CALL 10625 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
27236: LD_EXP 4
27240: PPUSH
27241: LD_EXP 54
27245: PUSH
27246: LD_STRING Bobby
27248: STR
27249: PPUSH
27250: CALL 10625 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
27254: LD_EXP 5
27258: PPUSH
27259: LD_EXP 54
27263: PUSH
27264: LD_STRING Cyrus
27266: STR
27267: PPUSH
27268: CALL 10625 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
27272: LD_EXP 6
27276: PPUSH
27277: LD_EXP 54
27281: PUSH
27282: LD_STRING Lisa
27284: STR
27285: PPUSH
27286: CALL 10625 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
27290: LD_EXP 7
27294: PPUSH
27295: LD_EXP 54
27299: PUSH
27300: LD_STRING Frank
27302: STR
27303: PPUSH
27304: CALL 10625 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
27308: LD_EXP 8
27312: PPUSH
27313: LD_EXP 54
27317: PUSH
27318: LD_STRING Kikuchi
27320: STR
27321: PPUSH
27322: CALL 10625 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
27326: LD_EXP 9
27330: PPUSH
27331: LD_EXP 54
27335: PUSH
27336: LD_STRING Houten
27338: STR
27339: PPUSH
27340: CALL 10625 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
27344: LD_EXP 10
27348: PPUSH
27349: LD_EXP 54
27353: PUSH
27354: LD_STRING Gary
27356: STR
27357: PPUSH
27358: CALL 10625 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
27362: LD_EXP 19
27366: PPUSH
27367: LD_EXP 54
27371: PUSH
27372: LD_STRING Cornell
27374: STR
27375: PPUSH
27376: CALL 10625 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
27380: LD_EXP 11
27384: PPUSH
27385: LD_EXP 54
27389: PUSH
27390: LD_STRING Simms
27392: STR
27393: PPUSH
27394: CALL 10625 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
27398: LD_EXP 12
27402: PPUSH
27403: LD_EXP 54
27407: PUSH
27408: LD_STRING Denis
27410: STR
27411: PPUSH
27412: CALL 10625 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
27416: LD_EXP 13
27420: PPUSH
27421: LD_EXP 54
27425: PUSH
27426: LD_STRING Joan
27428: STR
27429: PPUSH
27430: CALL 10625 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
27434: LD_EXP 15
27438: PPUSH
27439: LD_EXP 54
27443: PUSH
27444: LD_STRING Gladstone
27446: STR
27447: PPUSH
27448: CALL 10625 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
27452: LD_EXP 17
27456: PPUSH
27457: LD_EXP 54
27461: PUSH
27462: LD_STRING DeltaDoctor
27464: STR
27465: PPUSH
27466: CALL 10625 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
27470: LD_EXP 22
27474: PPUSH
27475: LD_STRING 10c_lock
27477: PPUSH
27478: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
27482: LD_INT 50
27484: PUSH
27485: EMPTY
27486: LIST
27487: PUSH
27488: LD_INT 22
27490: PUSH
27491: LD_INT 1
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 21
27500: PUSH
27501: LD_INT 1
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 2
27510: PUSH
27511: LD_INT 25
27513: PUSH
27514: LD_INT 1
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 25
27523: PUSH
27524: LD_INT 2
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 25
27533: PUSH
27534: LD_INT 3
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 25
27543: PUSH
27544: LD_INT 4
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 25
27553: PUSH
27554: LD_INT 5
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 25
27563: PUSH
27564: LD_INT 8
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: PPUSH
27586: CALL_OW 69
27590: PUSH
27591: LD_EXP 1
27595: PUSH
27596: LD_EXP 2
27600: PUSH
27601: LD_EXP 3
27605: PUSH
27606: LD_EXP 4
27610: PUSH
27611: LD_EXP 5
27615: PUSH
27616: LD_EXP 6
27620: PUSH
27621: LD_EXP 7
27625: PUSH
27626: LD_EXP 15
27630: PUSH
27631: LD_EXP 8
27635: PUSH
27636: LD_EXP 12
27640: PUSH
27641: LD_EXP 13
27645: PUSH
27646: LD_EXP 9
27650: PUSH
27651: LD_EXP 11
27655: PUSH
27656: LD_EXP 10
27660: PUSH
27661: LD_EXP 17
27665: PUSH
27666: LD_EXP 19
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: DIFF
27689: PPUSH
27690: LD_STRING 10_other_survivors
27692: PPUSH
27693: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
27697: LD_INT 50
27699: PUSH
27700: EMPTY
27701: LIST
27702: PUSH
27703: LD_INT 22
27705: PUSH
27706: LD_INT 1
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 21
27715: PUSH
27716: LD_INT 1
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 2
27725: PUSH
27726: LD_INT 25
27728: PUSH
27729: LD_INT 16
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 25
27738: PUSH
27739: LD_INT 12
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: LIST
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: PPUSH
27757: CALL_OW 69
27761: PPUSH
27762: LD_STRING 10_ape
27764: PPUSH
27765: CALL_OW 38
// YouWin ;
27769: CALL_OW 103
// end ;
27773: LD_VAR 0 1
27777: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
27778: LD_INT 0
27780: PPUSH
27781: PPUSH
27782: PPUSH
27783: PPUSH
// epsilonBase = [ ] ;
27784: LD_ADDR_VAR 0 2
27788: PUSH
27789: EMPTY
27790: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
27791: LD_ADDR_VAR 0 3
27795: PUSH
27796: LD_INT 22
27798: PUSH
27799: LD_INT 1
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 23
27808: PUSH
27809: LD_INT 1
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 21
27818: PUSH
27819: LD_INT 3
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: LD_INT 50
27828: PUSH
27829: EMPTY
27830: LIST
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: PPUSH
27838: CALL_OW 69
27842: ST_TO_ADDR
// for i in buildings do
27843: LD_ADDR_VAR 0 4
27847: PUSH
27848: LD_VAR 0 3
27852: PUSH
27853: FOR_IN
27854: IFFALSE 28306
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
27856: LD_VAR 0 4
27860: PPUSH
27861: CALL_OW 266
27865: PUSH
27866: LD_INT 6
27868: PUSH
27869: LD_INT 7
27871: PUSH
27872: LD_INT 8
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: LIST
27879: IN
27880: IFFALSE 27994
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
27882: LD_ADDR_VAR 0 2
27886: PUSH
27887: LD_VAR 0 2
27891: PUSH
27892: LD_VAR 0 4
27896: PPUSH
27897: CALL_OW 266
27901: PUSH
27902: LD_VAR 0 4
27906: PPUSH
27907: CALL_OW 250
27911: PUSH
27912: LD_VAR 0 4
27916: PPUSH
27917: CALL_OW 251
27921: PUSH
27922: LD_VAR 0 4
27926: PPUSH
27927: CALL_OW 254
27931: PUSH
27932: LD_VAR 0 4
27936: PPUSH
27937: CALL_OW 267
27941: PUSH
27942: LD_VAR 0 4
27946: PPUSH
27947: CALL_OW 248
27951: PUSH
27952: LD_VAR 0 4
27956: PPUSH
27957: LD_INT 1
27959: PPUSH
27960: CALL_OW 268
27964: PUSH
27965: LD_VAR 0 4
27969: PPUSH
27970: LD_INT 2
27972: PPUSH
27973: CALL_OW 268
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: PUSH
27988: EMPTY
27989: LIST
27990: ADD
27991: ST_TO_ADDR
27992: GO 28304
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
27994: LD_VAR 0 4
27998: PPUSH
27999: CALL_OW 266
28003: PUSH
28004: LD_INT 32
28006: EQUAL
28007: PUSH
28008: LD_VAR 0 4
28012: PPUSH
28013: CALL_OW 266
28017: PUSH
28018: LD_INT 33
28020: EQUAL
28021: OR
28022: IFFALSE 28119
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
28024: LD_ADDR_VAR 0 2
28028: PUSH
28029: LD_VAR 0 2
28033: PUSH
28034: LD_VAR 0 4
28038: PPUSH
28039: CALL_OW 266
28043: PUSH
28044: LD_VAR 0 4
28048: PPUSH
28049: CALL_OW 250
28053: PUSH
28054: LD_VAR 0 4
28058: PPUSH
28059: CALL_OW 251
28063: PUSH
28064: LD_VAR 0 4
28068: PPUSH
28069: CALL_OW 254
28073: PUSH
28074: LD_VAR 0 4
28078: PPUSH
28079: CALL_OW 267
28083: PUSH
28084: LD_VAR 0 4
28088: PPUSH
28089: CALL_OW 248
28093: PUSH
28094: LD_VAR 0 4
28098: PPUSH
28099: CALL_OW 269
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: PUSH
28113: EMPTY
28114: LIST
28115: ADD
28116: ST_TO_ADDR
28117: GO 28304
// if GetBType ( i ) = b_factory then
28119: LD_VAR 0 4
28123: PPUSH
28124: CALL_OW 266
28128: PUSH
28129: LD_INT 3
28131: EQUAL
28132: IFFALSE 28222
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
28134: LD_ADDR_VAR 0 2
28138: PUSH
28139: LD_VAR 0 2
28143: PPUSH
28144: LD_INT 1
28146: PPUSH
28147: LD_VAR 0 4
28151: PPUSH
28152: CALL_OW 266
28156: PUSH
28157: LD_VAR 0 4
28161: PPUSH
28162: CALL_OW 250
28166: PUSH
28167: LD_VAR 0 4
28171: PPUSH
28172: CALL_OW 251
28176: PUSH
28177: LD_VAR 0 4
28181: PPUSH
28182: CALL_OW 254
28186: PUSH
28187: LD_VAR 0 4
28191: PPUSH
28192: CALL_OW 267
28196: PUSH
28197: LD_VAR 0 4
28201: PPUSH
28202: CALL_OW 248
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: PPUSH
28215: CALL_OW 2
28219: ST_TO_ADDR
28220: GO 28304
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
28222: LD_ADDR_VAR 0 2
28226: PUSH
28227: LD_VAR 0 2
28231: PUSH
28232: LD_VAR 0 4
28236: PPUSH
28237: CALL_OW 266
28241: PUSH
28242: LD_VAR 0 4
28246: PPUSH
28247: CALL_OW 250
28251: PUSH
28252: LD_VAR 0 4
28256: PPUSH
28257: CALL_OW 251
28261: PUSH
28262: LD_VAR 0 4
28266: PPUSH
28267: CALL_OW 254
28271: PUSH
28272: LD_VAR 0 4
28276: PPUSH
28277: CALL_OW 267
28281: PUSH
28282: LD_VAR 0 4
28286: PPUSH
28287: CALL_OW 248
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: PUSH
28300: EMPTY
28301: LIST
28302: ADD
28303: ST_TO_ADDR
// end ;
28304: GO 27853
28306: POP
28307: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
28308: LD_VAR 0 2
28312: PPUSH
28313: LD_STRING 10_EpsilonBase
28315: PPUSH
28316: CALL_OW 39
// SaveEnvironment ( epsilonTerrain , 10_EpsilonEnv ) ;
28320: LD_INT 19
28322: PPUSH
28323: LD_STRING 10_EpsilonEnv
28325: PPUSH
28326: CALL 28335 0 2
// end ;
28330: LD_VAR 0 1
28334: RET
// export function SaveEnvironment ( area , saveId ) ; begin
28335: LD_INT 0
28337: PPUSH
// result := ListEnvironmentArea ( area ) ;
28338: LD_ADDR_VAR 0 3
28342: PUSH
28343: LD_VAR 0 1
28347: PPUSH
28348: CALL_OW 353
28352: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
28353: LD_VAR 0 3
28357: PPUSH
28358: LD_VAR 0 2
28362: PPUSH
28363: CALL_OW 39
// end ; end_of_file
28367: LD_VAR 0 3
28371: RET
// every 0 0$01 do var timer ;
28372: GO 28374
28374: DISABLE
28375: LD_INT 0
28377: PPUSH
// begin timer := 0 0$30 ;
28378: LD_ADDR_VAR 0 1
28382: PUSH
28383: LD_INT 1050
28385: ST_TO_ADDR
// repeat wait ( timer ) ;
28386: LD_VAR 0 1
28390: PPUSH
28391: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
28395: LD_EXP 56
28399: PUSH
28400: LD_INT 6
28402: GREATEREQUAL
28403: PUSH
28404: LD_EXP 56
28408: PUSH
28409: LD_INT 12
28411: LESS
28412: AND
28413: IFFALSE 28429
// timer := timer + 0 0$3 ;
28415: LD_ADDR_VAR 0 1
28419: PUSH
28420: LD_VAR 0 1
28424: PUSH
28425: LD_INT 105
28427: PLUS
28428: ST_TO_ADDR
// if cratesSpawned >= 12 then
28429: LD_EXP 56
28433: PUSH
28434: LD_INT 12
28436: GREATEREQUAL
28437: IFFALSE 28453
// timer := timer + 0 0$9 ;
28439: LD_ADDR_VAR 0 1
28443: PUSH
28444: LD_VAR 0 1
28448: PUSH
28449: LD_INT 315
28451: PLUS
28452: ST_TO_ADDR
// if timer > 3 3$00 then
28453: LD_VAR 0 1
28457: PUSH
28458: LD_INT 6300
28460: GREATER
28461: IFFALSE 28471
// timer := 0 0$50 ;
28463: LD_ADDR_VAR 0 1
28467: PUSH
28468: LD_INT 1750
28470: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
28471: LD_INT 1
28473: PPUSH
28474: LD_INT 5
28476: PPUSH
28477: CALL_OW 12
28481: PPUSH
28482: LD_INT 16
28484: PPUSH
28485: LD_INT 1
28487: PPUSH
28488: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
28492: LD_ADDR_EXP 56
28496: PUSH
28497: LD_EXP 56
28501: PUSH
28502: LD_INT 1
28504: PLUS
28505: ST_TO_ADDR
// until false ;
28506: LD_INT 0
28508: IFFALSE 28386
// end ; end_of_file
28510: PPOPN 1
28512: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
28513: GO 28515
28515: DISABLE
// begin ru_radar := 98 ;
28516: LD_ADDR_EXP 66
28520: PUSH
28521: LD_INT 98
28523: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
28524: LD_ADDR_EXP 67
28528: PUSH
28529: LD_INT 89
28531: ST_TO_ADDR
// us_hack := 99 ;
28532: LD_ADDR_EXP 68
28536: PUSH
28537: LD_INT 99
28539: ST_TO_ADDR
// us_artillery := 97 ;
28540: LD_ADDR_EXP 69
28544: PUSH
28545: LD_INT 97
28547: ST_TO_ADDR
// ar_bio_bomb := 91 ;
28548: LD_ADDR_EXP 70
28552: PUSH
28553: LD_INT 91
28555: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
28556: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
28557: LD_INT 0
28559: PPUSH
28560: PPUSH
28561: PPUSH
28562: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28563: LD_VAR 0 1
28567: PPUSH
28568: CALL_OW 264
28572: PUSH
28573: LD_EXP 70
28577: EQUAL
28578: IFFALSE 28650
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28580: LD_INT 68
28582: PPUSH
28583: LD_VAR 0 1
28587: PPUSH
28588: CALL_OW 255
28592: PPUSH
28593: CALL_OW 321
28597: PUSH
28598: LD_INT 2
28600: EQUAL
28601: IFFALSE 28613
// eff := 70 else
28603: LD_ADDR_VAR 0 6
28607: PUSH
28608: LD_INT 70
28610: ST_TO_ADDR
28611: GO 28621
// eff := 30 ;
28613: LD_ADDR_VAR 0 6
28617: PUSH
28618: LD_INT 30
28620: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28621: LD_VAR 0 1
28625: PPUSH
28626: CALL_OW 250
28630: PPUSH
28631: LD_VAR 0 1
28635: PPUSH
28636: CALL_OW 251
28640: PPUSH
28641: LD_VAR 0 6
28645: PPUSH
28646: CALL_OW 495
// end ; end ;
28650: LD_VAR 0 4
28654: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
28655: LD_INT 0
28657: PPUSH
28658: PPUSH
28659: PPUSH
28660: PPUSH
28661: PPUSH
28662: PPUSH
// if cmd = 124 then
28663: LD_VAR 0 1
28667: PUSH
28668: LD_INT 124
28670: EQUAL
28671: IFFALSE 28877
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
28673: LD_ADDR_VAR 0 5
28677: PUSH
28678: LD_INT 2
28680: PUSH
28681: LD_INT 34
28683: PUSH
28684: LD_INT 53
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 34
28693: PUSH
28694: LD_INT 14
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: LIST
28705: PPUSH
28706: CALL_OW 69
28710: ST_TO_ADDR
// if not tmp then
28711: LD_VAR 0 5
28715: NOT
28716: IFFALSE 28720
// exit ;
28718: GO 28877
// for i in tmp do
28720: LD_ADDR_VAR 0 3
28724: PUSH
28725: LD_VAR 0 5
28729: PUSH
28730: FOR_IN
28731: IFFALSE 28875
// begin taskList := GetTaskList ( i ) ;
28733: LD_ADDR_VAR 0 6
28737: PUSH
28738: LD_VAR 0 3
28742: PPUSH
28743: CALL_OW 437
28747: ST_TO_ADDR
// if not taskList then
28748: LD_VAR 0 6
28752: NOT
28753: IFFALSE 28757
// continue ;
28755: GO 28730
// for j = 1 to taskList do
28757: LD_ADDR_VAR 0 4
28761: PUSH
28762: DOUBLE
28763: LD_INT 1
28765: DEC
28766: ST_TO_ADDR
28767: LD_VAR 0 6
28771: PUSH
28772: FOR_TO
28773: IFFALSE 28871
// if taskList [ j ] [ 1 ] = | then
28775: LD_VAR 0 6
28779: PUSH
28780: LD_VAR 0 4
28784: ARRAY
28785: PUSH
28786: LD_INT 1
28788: ARRAY
28789: PUSH
28790: LD_STRING |
28792: EQUAL
28793: IFFALSE 28869
// begin _taskList := Delete ( taskList , 1 ) ;
28795: LD_ADDR_VAR 0 7
28799: PUSH
28800: LD_VAR 0 6
28804: PPUSH
28805: LD_INT 1
28807: PPUSH
28808: CALL_OW 3
28812: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
28813: LD_VAR 0 3
28817: PPUSH
28818: LD_VAR 0 7
28822: PPUSH
28823: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
28827: LD_VAR 0 3
28831: PPUSH
28832: LD_VAR 0 6
28836: PUSH
28837: LD_VAR 0 4
28841: ARRAY
28842: PUSH
28843: LD_INT 2
28845: ARRAY
28846: PPUSH
28847: LD_VAR 0 6
28851: PUSH
28852: LD_VAR 0 4
28856: ARRAY
28857: PUSH
28858: LD_INT 3
28860: ARRAY
28861: PPUSH
28862: LD_INT 8
28864: PPUSH
28865: CALL 28882 0 4
// end ;
28869: GO 28772
28871: POP
28872: POP
// end ;
28873: GO 28730
28875: POP
28876: POP
// end ; end ;
28877: LD_VAR 0 2
28881: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28882: LD_INT 0
28884: PPUSH
28885: PPUSH
28886: PPUSH
28887: PPUSH
28888: PPUSH
28889: PPUSH
28890: PPUSH
28891: PPUSH
28892: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28893: LD_VAR 0 1
28897: NOT
28898: PUSH
28899: LD_VAR 0 2
28903: PPUSH
28904: LD_VAR 0 3
28908: PPUSH
28909: CALL_OW 488
28913: NOT
28914: OR
28915: PUSH
28916: LD_VAR 0 4
28920: NOT
28921: OR
28922: IFFALSE 28926
// exit ;
28924: GO 29266
// list := [ ] ;
28926: LD_ADDR_VAR 0 13
28930: PUSH
28931: EMPTY
28932: ST_TO_ADDR
// if x - r < 0 then
28933: LD_VAR 0 2
28937: PUSH
28938: LD_VAR 0 4
28942: MINUS
28943: PUSH
28944: LD_INT 0
28946: LESS
28947: IFFALSE 28959
// min_x := 0 else
28949: LD_ADDR_VAR 0 7
28953: PUSH
28954: LD_INT 0
28956: ST_TO_ADDR
28957: GO 28975
// min_x := x - r ;
28959: LD_ADDR_VAR 0 7
28963: PUSH
28964: LD_VAR 0 2
28968: PUSH
28969: LD_VAR 0 4
28973: MINUS
28974: ST_TO_ADDR
// if y - r < 0 then
28975: LD_VAR 0 3
28979: PUSH
28980: LD_VAR 0 4
28984: MINUS
28985: PUSH
28986: LD_INT 0
28988: LESS
28989: IFFALSE 29001
// min_y := 0 else
28991: LD_ADDR_VAR 0 8
28995: PUSH
28996: LD_INT 0
28998: ST_TO_ADDR
28999: GO 29017
// min_y := y - r ;
29001: LD_ADDR_VAR 0 8
29005: PUSH
29006: LD_VAR 0 3
29010: PUSH
29011: LD_VAR 0 4
29015: MINUS
29016: ST_TO_ADDR
// max_x := x + r ;
29017: LD_ADDR_VAR 0 9
29021: PUSH
29022: LD_VAR 0 2
29026: PUSH
29027: LD_VAR 0 4
29031: PLUS
29032: ST_TO_ADDR
// max_y := y + r ;
29033: LD_ADDR_VAR 0 10
29037: PUSH
29038: LD_VAR 0 3
29042: PUSH
29043: LD_VAR 0 4
29047: PLUS
29048: ST_TO_ADDR
// for _x = min_x to max_x do
29049: LD_ADDR_VAR 0 11
29053: PUSH
29054: DOUBLE
29055: LD_VAR 0 7
29059: DEC
29060: ST_TO_ADDR
29061: LD_VAR 0 9
29065: PUSH
29066: FOR_TO
29067: IFFALSE 29184
// for _y = min_y to max_y do
29069: LD_ADDR_VAR 0 12
29073: PUSH
29074: DOUBLE
29075: LD_VAR 0 8
29079: DEC
29080: ST_TO_ADDR
29081: LD_VAR 0 10
29085: PUSH
29086: FOR_TO
29087: IFFALSE 29180
// begin if not ValidHex ( _x , _y ) then
29089: LD_VAR 0 11
29093: PPUSH
29094: LD_VAR 0 12
29098: PPUSH
29099: CALL_OW 488
29103: NOT
29104: IFFALSE 29108
// continue ;
29106: GO 29086
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29108: LD_VAR 0 11
29112: PPUSH
29113: LD_VAR 0 12
29117: PPUSH
29118: CALL_OW 351
29122: PUSH
29123: LD_VAR 0 11
29127: PPUSH
29128: LD_VAR 0 12
29132: PPUSH
29133: CALL_OW 554
29137: AND
29138: IFFALSE 29178
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29140: LD_ADDR_VAR 0 13
29144: PUSH
29145: LD_VAR 0 13
29149: PPUSH
29150: LD_VAR 0 13
29154: PUSH
29155: LD_INT 1
29157: PLUS
29158: PPUSH
29159: LD_VAR 0 11
29163: PUSH
29164: LD_VAR 0 12
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PPUSH
29173: CALL_OW 2
29177: ST_TO_ADDR
// end ;
29178: GO 29086
29180: POP
29181: POP
29182: GO 29066
29184: POP
29185: POP
// if not list then
29186: LD_VAR 0 13
29190: NOT
29191: IFFALSE 29195
// exit ;
29193: GO 29266
// for i in list do
29195: LD_ADDR_VAR 0 6
29199: PUSH
29200: LD_VAR 0 13
29204: PUSH
29205: FOR_IN
29206: IFFALSE 29264
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29208: LD_VAR 0 1
29212: PPUSH
29213: LD_STRING M
29215: PUSH
29216: LD_VAR 0 6
29220: PUSH
29221: LD_INT 1
29223: ARRAY
29224: PUSH
29225: LD_VAR 0 6
29229: PUSH
29230: LD_INT 2
29232: ARRAY
29233: PUSH
29234: LD_INT 0
29236: PUSH
29237: LD_INT 0
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: LD_INT 0
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: PUSH
29255: EMPTY
29256: LIST
29257: PPUSH
29258: CALL_OW 447
29262: GO 29205
29264: POP
29265: POP
// end ;
29266: LD_VAR 0 5
29270: RET
