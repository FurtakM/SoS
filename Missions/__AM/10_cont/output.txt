// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export ruMech ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned , ruDepotConstructed , spawnRussians ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog , snipersTrained ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 28
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 20
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 29
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 38
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 39
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 40
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 41
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 42
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 50
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 47
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 46
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 48
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 49
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 61
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// ruMech := [ 4 , 5 , 6 ] [ Difficulty ] ;
 123: LD_ADDR_EXP 51
 127: PUSH
 128: LD_INT 4
 130: PUSH
 131: LD_INT 5
 133: PUSH
 134: LD_INT 6
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: PUSH
 142: LD_OWVAR 67
 146: ARRAY
 147: ST_TO_ADDR
// eventVar1 = 0 ;
 148: LD_ADDR_EXP 65
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// eventVar2 = 0 ;
 156: LD_ADDR_EXP 66
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// fastEnd = 0 ;
 164: LD_ADDR_EXP 63
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// KhatamStatus = 0 ;
 172: LD_ADDR_EXP 53
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// GensherStatus = 0 ;
 180: LD_ADDR_EXP 52
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// cratesSpawned = 0 ;
 188: LD_ADDR_EXP 56
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 196: LD_ADDR_EXP 59
 200: PUSH
 201: LD_INT 1
 203: PUSH
 204: LD_INT 2
 206: PUSH
 207: LD_INT 2
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: LIST
 214: PUSH
 215: LD_OWVAR 67
 219: ARRAY
 220: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 ] [ Difficulty ] ;
 221: LD_ADDR_EXP 60
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 4
 231: PUSH
 232: LD_INT 4
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: PUSH
 240: LD_OWVAR 67
 244: ARRAY
 245: ST_TO_ADDR
// snipersTrained := false ;
 246: LD_ADDR_EXP 62
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// ruDepotConstructed := false ;
 254: LD_ADDR_EXP 57
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// spawnRussians := false ;
 262: LD_ADDR_EXP 58
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// attackAvalaible = 1 ;
 270: LD_ADDR_EXP 64
 274: PUSH
 275: LD_INT 1
 277: ST_TO_ADDR
// mission_prefix := 10c_ ;
 278: LD_ADDR_EXP 54
 282: PUSH
 283: LD_STRING 10c_
 285: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 286: LD_ADDR_EXP 55
 290: PUSH
 291: LD_STRING 10_
 293: ST_TO_ADDR
// debugMode = 0 ;
 294: LD_ADDR_EXP 67
 298: PUSH
 299: LD_INT 0
 301: ST_TO_ADDR
// CreateNature ;
 302: CALL 26570 0 0
// PrepareDifficulty ;
 306: CALL 11239 0 0
// PrepareJMMTeam ;
 310: CALL 1358 0 0
// PrepareCathyTeam ;
 314: CALL 2505 0 0
// PlaceMines ( MineField1 , 1 + Difficulty ) ;
 318: LD_INT 24
 320: PPUSH
 321: LD_INT 1
 323: PUSH
 324: LD_OWVAR 67
 328: PLUS
 329: PPUSH
 330: CALL 21099 0 2
// if Difficulty > 1 then
 334: LD_OWVAR 67
 338: PUSH
 339: LD_INT 1
 341: GREATER
 342: IFFALSE 356
// PlaceMines ( MineField2 , Difficulty ) ;
 344: LD_INT 25
 346: PPUSH
 347: LD_OWVAR 67
 351: PPUSH
 352: CALL 21099 0 2
// if Difficulty > 2 then
 356: LD_OWVAR 67
 360: PUSH
 361: LD_INT 2
 363: GREATER
 364: IFFALSE 378
// PlaceMines ( MineField3 , Difficulty ) ;
 366: LD_INT 26
 368: PPUSH
 369: LD_OWVAR 67
 373: PPUSH
 374: CALL 21099 0 2
// PrepareArabianCommander ;
 378: CALL 3987 0 0
// PrepareArabian ;
 382: CALL 4039 0 0
// BuildArabianBase ;
 386: CALL 14054 0 0
// TameApemans ;
 390: CALL 19904 0 0
// end ;
 394: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 395: LD_EXP 67
 399: PUSH
 400: LD_INT 1
 402: EQUAL
 403: IFFALSE 709
 405: GO 407
 407: DISABLE
 408: LD_INT 0
 410: PPUSH
// begin enable ;
 411: ENABLE
// fogoff ( true ) ;
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 419: LD_ADDR_VAR 0 1
 423: PUSH
 424: LD_INT 22
 426: PUSH
 427: LD_INT 1
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: LD_INT 21
 436: PUSH
 437: LD_INT 1
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PPUSH
 448: CALL_OW 69
 452: PUSH
 453: FOR_IN
 454: IFFALSE 470
// SetLives ( i , 1000 ) ;
 456: LD_VAR 0 1
 460: PPUSH
 461: LD_INT 1000
 463: PPUSH
 464: CALL_OW 234
 468: GO 453
 470: POP
 471: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 472: LD_ADDR_VAR 0 1
 476: PUSH
 477: LD_INT 22
 479: PUSH
 480: LD_INT 1
 482: PUSH
 483: EMPTY
 484: LIST
 485: LIST
 486: PUSH
 487: LD_INT 2
 489: PUSH
 490: LD_INT 30
 492: PUSH
 493: LD_INT 0
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: PUSH
 500: LD_INT 30
 502: PUSH
 503: LD_INT 1
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: LIST
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PPUSH
 519: CALL_OW 69
 523: PUSH
 524: FOR_IN
 525: IFFALSE 549
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 527: LD_VAR 0 1
 531: PPUSH
 532: CALL_OW 274
 536: PPUSH
 537: LD_INT 1
 539: PPUSH
 540: LD_INT 9999
 542: PPUSH
 543: CALL_OW 277
 547: GO 524
 549: POP
 550: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 551: LD_ADDR_VAR 0 1
 555: PUSH
 556: LD_INT 22
 558: PUSH
 559: LD_INT 1
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: PUSH
 566: LD_INT 2
 568: PUSH
 569: LD_INT 30
 571: PUSH
 572: LD_INT 0
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 30
 581: PUSH
 582: LD_INT 1
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PUSH
 589: EMPTY
 590: LIST
 591: LIST
 592: LIST
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: PPUSH
 598: CALL_OW 69
 602: PUSH
 603: FOR_IN
 604: IFFALSE 628
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 606: LD_VAR 0 1
 610: PPUSH
 611: CALL_OW 274
 615: PPUSH
 616: LD_INT 2
 618: PPUSH
 619: LD_INT 9999
 621: PPUSH
 622: CALL_OW 277
 626: GO 603
 628: POP
 629: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 630: LD_ADDR_VAR 0 1
 634: PUSH
 635: LD_INT 22
 637: PUSH
 638: LD_INT 1
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: LD_INT 30
 650: PUSH
 651: LD_INT 0
 653: PUSH
 654: EMPTY
 655: LIST
 656: LIST
 657: PUSH
 658: LD_INT 30
 660: PUSH
 661: LD_INT 1
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: LIST
 672: PUSH
 673: EMPTY
 674: LIST
 675: LIST
 676: PPUSH
 677: CALL_OW 69
 681: PUSH
 682: FOR_IN
 683: IFFALSE 707
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 685: LD_VAR 0 1
 689: PPUSH
 690: CALL_OW 274
 694: PPUSH
 695: LD_INT 3
 697: PPUSH
 698: LD_INT 9999
 700: PPUSH
 701: CALL_OW 277
 705: GO 682
 707: POP
 708: POP
// end ;
 709: PPOPN 1
 711: END
// every 0 0$1 trigger FilterAllUnits ( [ f_class , class_sniper ] ) do
 712: LD_INT 25
 714: PUSH
 715: LD_INT 5
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: PPUSH
 722: CALL_OW 69
 726: IFFALSE 739
 728: GO 730
 730: DISABLE
// snipersTrained := true ;
 731: LD_ADDR_EXP 62
 735: PUSH
 736: LD_INT 1
 738: ST_TO_ADDR
 739: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_friend and ruDestroyedBuildings and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do
 740: LD_INT 1
 742: PPUSH
 743: LD_INT 2
 745: PPUSH
 746: CALL_OW 81
 750: PUSH
 751: LD_INT 1
 753: EQUAL
 754: PUSH
 755: LD_EXP 42
 759: AND
 760: PUSH
 761: LD_INT 22
 763: PUSH
 764: LD_INT 3
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 21
 773: PUSH
 774: LD_INT 3
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: PUSH
 781: EMPTY
 782: LIST
 783: LIST
 784: PPUSH
 785: CALL_OW 69
 789: PUSH
 790: LD_INT 0
 792: EQUAL
 793: AND
 794: IFFALSE 806
 796: GO 798
 798: DISABLE
// SetAchievement ( ACH_POWER ) ;
 799: LD_STRING ACH_POWER
 801: PPUSH
 802: CALL_OW 543
 806: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 807: LD_INT 22
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 30
 819: PUSH
 820: LD_INT 1
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PPUSH
 831: CALL_OW 69
 835: PUSH
 836: LD_INT 22
 838: PUSH
 839: LD_INT 1
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: PUSH
 846: LD_INT 30
 848: PUSH
 849: LD_INT 32
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: PPUSH
 860: CALL_OW 69
 864: AND
 865: PUSH
 866: LD_INT 22
 868: PUSH
 869: LD_INT 1
 871: PUSH
 872: EMPTY
 873: LIST
 874: LIST
 875: PUSH
 876: LD_INT 30
 878: PUSH
 879: LD_INT 33
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: PPUSH
 890: CALL_OW 69
 894: AND
 895: PUSH
 896: LD_INT 22
 898: PUSH
 899: LD_INT 1
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PUSH
 906: LD_INT 30
 908: PUSH
 909: LD_INT 5
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: PPUSH
 920: CALL_OW 69
 924: AND
 925: PUSH
 926: LD_INT 22
 928: PUSH
 929: LD_INT 1
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PUSH
 936: LD_INT 30
 938: PUSH
 939: LD_INT 3
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: PPUSH
 950: CALL_OW 69
 954: AND
 955: PUSH
 956: LD_INT 22
 958: PUSH
 959: LD_INT 1
 961: PUSH
 962: EMPTY
 963: LIST
 964: LIST
 965: PUSH
 966: LD_INT 30
 968: PUSH
 969: LD_INT 36
 971: PUSH
 972: EMPTY
 973: LIST
 974: LIST
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: PPUSH
 980: CALL_OW 69
 984: AND
 985: PUSH
 986: LD_INT 22
 988: PUSH
 989: LD_INT 1
 991: PUSH
 992: EMPTY
 993: LIST
 994: LIST
 995: PUSH
 996: LD_INT 30
 998: PUSH
 999: LD_INT 31
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PPUSH
1010: CALL_OW 69
1014: AND
1015: PUSH
1016: LD_INT 22
1018: PUSH
1019: LD_INT 1
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: PUSH
1026: LD_INT 30
1028: PUSH
1029: LD_INT 22
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: PPUSH
1040: CALL_OW 69
1044: AND
1045: PUSH
1046: LD_INT 22
1048: PUSH
1049: LD_INT 1
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 30
1058: PUSH
1059: LD_INT 20
1061: PUSH
1062: EMPTY
1063: LIST
1064: LIST
1065: PUSH
1066: EMPTY
1067: LIST
1068: LIST
1069: PPUSH
1070: CALL_OW 69
1074: AND
1075: PUSH
1076: LD_INT 22
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: PUSH
1086: LD_INT 30
1088: PUSH
1089: LD_INT 19
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: PPUSH
1100: CALL_OW 69
1104: AND
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 30
1118: PUSH
1119: LD_INT 16
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PPUSH
1130: CALL_OW 69
1134: AND
1135: PUSH
1136: LD_INT 22
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: PUSH
1146: LD_INT 30
1148: PUSH
1149: LD_INT 17
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: PPUSH
1160: CALL_OW 69
1164: AND
1165: PUSH
1166: LD_INT 22
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 30
1178: PUSH
1179: LD_INT 21
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PPUSH
1190: CALL_OW 69
1194: AND
1195: PUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 1
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PUSH
1206: LD_INT 30
1208: PUSH
1209: LD_INT 29
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: PPUSH
1220: CALL_OW 69
1224: AND
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 30
1238: PUSH
1239: LD_INT 30
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PPUSH
1250: CALL_OW 69
1254: AND
1255: PUSH
1256: LD_INT 22
1258: PUSH
1259: LD_INT 1
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: PUSH
1266: LD_INT 30
1268: PUSH
1269: LD_INT 27
1271: PUSH
1272: EMPTY
1273: LIST
1274: LIST
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PPUSH
1280: CALL_OW 69
1284: AND
1285: PUSH
1286: LD_INT 22
1288: PUSH
1289: LD_INT 1
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: PUSH
1296: LD_INT 30
1298: PUSH
1299: LD_INT 26
1301: PUSH
1302: EMPTY
1303: LIST
1304: LIST
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: PPUSH
1310: CALL_OW 69
1314: AND
1315: PUSH
1316: LD_INT 22
1318: PUSH
1319: LD_INT 1
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: PUSH
1326: LD_INT 30
1328: PUSH
1329: LD_INT 28
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: PPUSH
1340: CALL_OW 69
1344: AND
1345: IFFALSE 1357
1347: GO 1349
1349: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1350: LD_STRING ACH_ARCH
1352: PPUSH
1353: CALL_OW 543
1357: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
1358: LD_INT 0
1360: PPUSH
1361: PPUSH
1362: PPUSH
1363: PPUSH
1364: PPUSH
1365: PPUSH
// uc_side = 1 ;
1366: LD_ADDR_OWVAR 20
1370: PUSH
1371: LD_INT 1
1373: ST_TO_ADDR
// uc_nation = 1 ;
1374: LD_ADDR_OWVAR 21
1378: PUSH
1379: LD_INT 1
1381: ST_TO_ADDR
// count = 0 ;
1382: LD_ADDR_VAR 0 6
1386: PUSH
1387: LD_INT 0
1389: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 10_ ) ;
1390: LD_ADDR_EXP 1
1394: PUSH
1395: LD_STRING JMM
1397: PPUSH
1398: LD_INT 1
1400: PPUSH
1401: LD_STRING 10_
1403: PPUSH
1404: CALL 44016 0 3
1408: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
1409: LD_ADDR_EXP 20
1413: PUSH
1414: LD_EXP 20
1418: PUSH
1419: LD_EXP 1
1423: ADD
1424: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 10_ ) ;
1425: LD_ADDR_EXP 10
1429: PUSH
1430: LD_STRING Gary
1432: PPUSH
1433: LD_INT 1
1435: PPUSH
1436: LD_STRING 10_
1438: PPUSH
1439: CALL 44016 0 3
1443: ST_TO_ADDR
// if Gary then
1444: LD_EXP 10
1448: IFFALSE 1466
// JMMSquad = JMMSquad ^ Gary ;
1450: LD_ADDR_EXP 20
1454: PUSH
1455: LD_EXP 20
1459: PUSH
1460: LD_EXP 10
1464: ADD
1465: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , 10_ ) ;
1466: LD_ADDR_EXP 5
1470: PUSH
1471: LD_STRING Cyrus
1473: PPUSH
1474: LD_INT 1
1476: PPUSH
1477: LD_STRING 10_
1479: PPUSH
1480: CALL 44016 0 3
1484: ST_TO_ADDR
// if Cyrus then
1485: LD_EXP 5
1489: IFFALSE 1507
// JMMSquad = JMMSquad ^ Cyrus ;
1491: LD_ADDR_EXP 20
1495: PUSH
1496: LD_EXP 20
1500: PUSH
1501: LD_EXP 5
1505: ADD
1506: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , 10_ ) ;
1507: LD_ADDR_EXP 4
1511: PUSH
1512: LD_STRING Bobby
1514: PPUSH
1515: LD_INT 1
1517: PPUSH
1518: LD_STRING 10_
1520: PPUSH
1521: CALL 44016 0 3
1525: ST_TO_ADDR
// if Bobby then
1526: LD_EXP 4
1530: IFFALSE 1548
// JMMSquad = JMMSquad ^ Bobby ;
1532: LD_ADDR_EXP 20
1536: PUSH
1537: LD_EXP 20
1541: PUSH
1542: LD_EXP 4
1546: ADD
1547: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , 10_ ) ;
1548: LD_ADDR_EXP 6
1552: PUSH
1553: LD_STRING Lisa
1555: PPUSH
1556: LD_INT 1
1558: PPUSH
1559: LD_STRING 10_
1561: PPUSH
1562: CALL 44016 0 3
1566: ST_TO_ADDR
// if Lisa then
1567: LD_EXP 6
1571: IFFALSE 1589
// JMMSquad = JMMSquad ^ Lisa ;
1573: LD_ADDR_EXP 20
1577: PUSH
1578: LD_EXP 20
1582: PUSH
1583: LD_EXP 6
1587: ADD
1588: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , 10_ ) ;
1589: LD_ADDR_EXP 2
1593: PUSH
1594: LD_STRING Brown
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: LD_STRING 10_
1602: PPUSH
1603: CALL 44016 0 3
1607: ST_TO_ADDR
// if Brown then
1608: LD_EXP 2
1612: IFFALSE 1630
// JMMSquad = JMMSquad ^ Brown ;
1614: LD_ADDR_EXP 20
1618: PUSH
1619: LD_EXP 20
1623: PUSH
1624: LD_EXP 2
1628: ADD
1629: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , 10_ ) ;
1630: LD_ADDR_EXP 3
1634: PUSH
1635: LD_STRING Donaldson
1637: PPUSH
1638: LD_INT 1
1640: PPUSH
1641: LD_STRING 10_
1643: PPUSH
1644: CALL 44016 0 3
1648: ST_TO_ADDR
// if Donaldson then
1649: LD_EXP 3
1653: IFFALSE 1671
// JMMSquad = JMMSquad ^ Donaldson ;
1655: LD_ADDR_EXP 20
1659: PUSH
1660: LD_EXP 20
1664: PUSH
1665: LD_EXP 3
1669: ADD
1670: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 10_ ) ;
1671: LD_ADDR_EXP 7
1675: PUSH
1676: LD_STRING Frank
1678: PPUSH
1679: LD_INT 1
1681: PPUSH
1682: LD_STRING 10_
1684: PPUSH
1685: CALL 44016 0 3
1689: ST_TO_ADDR
// if Frank then
1690: LD_EXP 7
1694: IFFALSE 1712
// JMMSquad = JMMSquad ^ Frank ;
1696: LD_ADDR_EXP 20
1700: PUSH
1701: LD_EXP 20
1705: PUSH
1706: LD_EXP 7
1710: ADD
1711: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 10_ ) ;
1712: LD_ADDR_EXP 9
1716: PUSH
1717: LD_STRING Houten
1719: PPUSH
1720: LD_INT 1
1722: PPUSH
1723: LD_STRING 10_
1725: PPUSH
1726: CALL 44016 0 3
1730: ST_TO_ADDR
// if Houten then
1731: LD_EXP 9
1735: IFFALSE 1753
// JMMSquad = JMMSquad ^ Houten ;
1737: LD_ADDR_EXP 20
1741: PUSH
1742: LD_EXP 20
1746: PUSH
1747: LD_EXP 9
1751: ADD
1752: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1753: LD_ADDR_EXP 21
1757: PUSH
1758: LD_STRING OthersIn10
1760: PPUSH
1761: CALL_OW 31
1765: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
1766: LD_ADDR_EXP 24
1770: PUSH
1771: LD_STRING Powell
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: LD_STRING 
1779: PPUSH
1780: CALL 44016 0 3
1784: ST_TO_ADDR
// for i in JMMSquad do
1785: LD_ADDR_VAR 0 2
1789: PUSH
1790: LD_EXP 20
1794: PUSH
1795: FOR_IN
1796: IFFALSE 2076
// begin if count < 3 then
1798: LD_VAR 0 6
1802: PUSH
1803: LD_INT 3
1805: LESS
1806: IFFALSE 1923
// begin vc_engine = 1 ;
1808: LD_ADDR_OWVAR 39
1812: PUSH
1813: LD_INT 1
1815: ST_TO_ADDR
// vc_control = 1 ;
1816: LD_ADDR_OWVAR 38
1820: PUSH
1821: LD_INT 1
1823: ST_TO_ADDR
// vc_weapon = 12 ;
1824: LD_ADDR_OWVAR 40
1828: PUSH
1829: LD_INT 12
1831: ST_TO_ADDR
// vc_chassis = 3 ;
1832: LD_ADDR_OWVAR 37
1836: PUSH
1837: LD_INT 3
1839: ST_TO_ADDR
// veh = CreateVehicle ;
1840: LD_ADDR_VAR 0 4
1844: PUSH
1845: CALL_OW 45
1849: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1850: LD_VAR 0 4
1854: PPUSH
1855: LD_INT 1
1857: PPUSH
1858: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1862: LD_VAR 0 4
1866: PPUSH
1867: LD_INT 2
1869: PPUSH
1870: LD_INT 0
1872: PPUSH
1873: CALL_OW 49
// if count mod 2 = 0 then
1877: LD_VAR 0 6
1881: PUSH
1882: LD_INT 2
1884: MOD
1885: PUSH
1886: LD_INT 0
1888: EQUAL
1889: IFFALSE 1908
// AddCargo ( veh , 1 , 100 ) else
1891: LD_VAR 0 4
1895: PPUSH
1896: LD_INT 1
1898: PPUSH
1899: LD_INT 100
1901: PPUSH
1902: CALL_OW 291
1906: GO 1923
// AddCargo ( veh , 3 , 100 ) end ;
1908: LD_VAR 0 4
1912: PPUSH
1913: LD_INT 3
1915: PPUSH
1916: LD_INT 100
1918: PPUSH
1919: CALL_OW 291
// if count >= 3 then
1923: LD_VAR 0 6
1927: PUSH
1928: LD_INT 3
1930: GREATEREQUAL
1931: IFFALSE 2046
// begin vc_engine = 1 ;
1933: LD_ADDR_OWVAR 39
1937: PUSH
1938: LD_INT 1
1940: ST_TO_ADDR
// vc_control = 1 ;
1941: LD_ADDR_OWVAR 38
1945: PUSH
1946: LD_INT 1
1948: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1949: LD_ADDR_OWVAR 40
1953: PUSH
1954: LD_INT 3
1956: PUSH
1957: LD_INT 4
1959: PUSH
1960: LD_INT 5
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: LIST
1967: PUSH
1968: LD_INT 1
1970: PPUSH
1971: LD_INT 3
1973: PPUSH
1974: CALL_OW 12
1978: ARRAY
1979: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
1980: LD_ADDR_OWVAR 37
1984: PUSH
1985: LD_INT 2
1987: PUSH
1988: LD_INT 3
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: PUSH
1995: LD_VAR 0 2
1999: PUSH
2000: LD_INT 2
2002: MOD
2003: PUSH
2004: LD_INT 1
2006: PLUS
2007: ARRAY
2008: ST_TO_ADDR
// veh = CreateVehicle ;
2009: LD_ADDR_VAR 0 4
2013: PUSH
2014: CALL_OW 45
2018: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2019: LD_VAR 0 4
2023: PPUSH
2024: LD_INT 1
2026: PPUSH
2027: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2031: LD_VAR 0 4
2035: PPUSH
2036: LD_INT 2
2038: PPUSH
2039: LD_INT 0
2041: PPUSH
2042: CALL_OW 49
// end ; count = count + 1 ;
2046: LD_ADDR_VAR 0 6
2050: PUSH
2051: LD_VAR 0 6
2055: PUSH
2056: LD_INT 1
2058: PLUS
2059: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2060: LD_VAR 0 2
2064: PPUSH
2065: LD_VAR 0 4
2069: PPUSH
2070: CALL_OW 52
// end ;
2074: GO 1795
2076: POP
2077: POP
// for i in others10 do
2078: LD_ADDR_VAR 0 2
2082: PUSH
2083: LD_EXP 21
2087: PUSH
2088: FOR_IN
2089: IFFALSE 2236
// begin vc_engine = 1 ;
2091: LD_ADDR_OWVAR 39
2095: PUSH
2096: LD_INT 1
2098: ST_TO_ADDR
// vc_control = 1 ;
2099: LD_ADDR_OWVAR 38
2103: PUSH
2104: LD_INT 1
2106: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2107: LD_ADDR_OWVAR 40
2111: PUSH
2112: LD_INT 3
2114: PUSH
2115: LD_INT 4
2117: PUSH
2118: LD_INT 5
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: PUSH
2126: LD_INT 1
2128: PPUSH
2129: LD_INT 3
2131: PPUSH
2132: CALL_OW 12
2136: ARRAY
2137: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
2138: LD_ADDR_OWVAR 37
2142: PUSH
2143: LD_INT 2
2145: PUSH
2146: LD_INT 3
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: PUSH
2153: LD_VAR 0 2
2157: PUSH
2158: LD_INT 2
2160: MOD
2161: PUSH
2162: LD_INT 1
2164: PLUS
2165: ARRAY
2166: ST_TO_ADDR
// veh = CreateVehicle ;
2167: LD_ADDR_VAR 0 4
2171: PUSH
2172: CALL_OW 45
2176: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2177: LD_VAR 0 4
2181: PPUSH
2182: LD_INT 1
2184: PPUSH
2185: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2189: LD_VAR 0 4
2193: PPUSH
2194: LD_INT 2
2196: PPUSH
2197: LD_INT 0
2199: PPUSH
2200: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2204: LD_ADDR_EXP 28
2208: PUSH
2209: LD_EXP 28
2213: PUSH
2214: LD_VAR 0 4
2218: ADD
2219: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_VAR 0 4
2229: PPUSH
2230: CALL_OW 52
// end ;
2234: GO 2088
2236: POP
2237: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
2238: LD_INT 22
2240: PUSH
2241: LD_INT 1
2243: PUSH
2244: EMPTY
2245: LIST
2246: LIST
2247: PUSH
2248: LD_INT 21
2250: PUSH
2251: LD_INT 1
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: PPUSH
2262: CALL_OW 69
2266: PPUSH
2267: LD_INT 1
2269: PPUSH
2270: CALL_OW 336
// end ;
2274: LD_VAR 0 1
2278: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
2279: LD_INT 0
2281: PPUSH
2282: PPUSH
2283: PPUSH
2284: PPUSH
2285: PPUSH
// uc_side = 1 ;
2286: LD_ADDR_OWVAR 20
2290: PUSH
2291: LD_INT 1
2293: ST_TO_ADDR
// uc_nation = 1 ;
2294: LD_ADDR_OWVAR 21
2298: PUSH
2299: LD_INT 1
2301: ST_TO_ADDR
// for i := 1 to 10 do
2302: LD_ADDR_VAR 0 2
2306: PUSH
2307: DOUBLE
2308: LD_INT 1
2310: DEC
2311: ST_TO_ADDR
2312: LD_INT 10
2314: PUSH
2315: FOR_TO
2316: IFFALSE 2498
// begin vc_engine = 1 ;
2318: LD_ADDR_OWVAR 39
2322: PUSH
2323: LD_INT 1
2325: ST_TO_ADDR
// vc_control = 1 ;
2326: LD_ADDR_OWVAR 38
2330: PUSH
2331: LD_INT 1
2333: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2334: LD_ADDR_OWVAR 40
2338: PUSH
2339: LD_INT 3
2341: PUSH
2342: LD_INT 4
2344: PUSH
2345: LD_INT 5
2347: PUSH
2348: LD_INT 12
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: PUSH
2357: LD_INT 1
2359: PPUSH
2360: LD_INT 4
2362: PPUSH
2363: CALL_OW 12
2367: ARRAY
2368: ST_TO_ADDR
// vc_chassis = 3 ;
2369: LD_ADDR_OWVAR 37
2373: PUSH
2374: LD_INT 3
2376: ST_TO_ADDR
// veh = CreateVehicle ;
2377: LD_ADDR_VAR 0 3
2381: PUSH
2382: CALL_OW 45
2386: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2387: LD_VAR 0 3
2391: PPUSH
2392: LD_INT 1
2394: PPUSH
2395: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2399: LD_VAR 0 3
2403: PPUSH
2404: LD_INT 2
2406: PPUSH
2407: LD_INT 0
2409: PPUSH
2410: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2414: LD_ADDR_EXP 28
2418: PUSH
2419: LD_EXP 28
2423: PUSH
2424: LD_VAR 0 3
2428: ADD
2429: ST_TO_ADDR
// if vc_weapon = 12 then
2430: LD_OWVAR 40
2434: PUSH
2435: LD_INT 12
2437: EQUAL
2438: IFFALSE 2496
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2440: LD_ADDR_VAR 0 4
2444: PUSH
2445: LD_INT 5
2447: PPUSH
2448: LD_INT 10
2450: PPUSH
2451: CALL_OW 12
2455: PUSH
2456: LD_INT 10
2458: MUL
2459: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2460: LD_VAR 0 3
2464: PPUSH
2465: LD_INT 1
2467: PUSH
2468: LD_INT 3
2470: PUSH
2471: EMPTY
2472: LIST
2473: LIST
2474: PUSH
2475: LD_INT 1
2477: PPUSH
2478: LD_INT 2
2480: PPUSH
2481: CALL_OW 12
2485: ARRAY
2486: PPUSH
2487: LD_VAR 0 4
2491: PPUSH
2492: CALL_OW 291
// end ; end ;
2496: GO 2315
2498: POP
2499: POP
// end ;
2500: LD_VAR 0 1
2504: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2505: LD_INT 0
2507: PPUSH
2508: PPUSH
2509: PPUSH
// uc_side = 4 ;
2510: LD_ADDR_OWVAR 20
2514: PUSH
2515: LD_INT 4
2517: ST_TO_ADDR
// uc_nation = 1 ;
2518: LD_ADDR_OWVAR 21
2522: PUSH
2523: LD_INT 1
2525: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ,  ) ;
2526: LD_ADDR_EXP 11
2530: PUSH
2531: LD_STRING Simms
2533: PPUSH
2534: LD_INT 0
2536: PPUSH
2537: LD_STRING 
2539: PPUSH
2540: CALL 44016 0 3
2544: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 08_ ) ;
2545: LD_ADDR_EXP 12
2549: PUSH
2550: LD_STRING Denis
2552: PPUSH
2553: LD_INT 1
2555: PPUSH
2556: LD_STRING 08_
2558: PPUSH
2559: CALL 44016 0 3
2563: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 08_ ) ;
2564: LD_ADDR_EXP 13
2568: PUSH
2569: LD_STRING Joan
2571: PPUSH
2572: LD_INT 1
2574: PPUSH
2575: LD_STRING 08_
2577: PPUSH
2578: CALL 44016 0 3
2582: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2583: LD_STRING 08_Khatam
2585: PPUSH
2586: CALL_OW 28
2590: IFFALSE 2613
// Khatam = PrepareUnit ( Khatam , true , 08_ ) else
2592: LD_ADDR_EXP 14
2596: PUSH
2597: LD_STRING Khatam
2599: PPUSH
2600: LD_INT 1
2602: PPUSH
2603: LD_STRING 08_
2605: PPUSH
2606: CALL 44016 0 3
2610: ST_TO_ADDR
2611: GO 2641
// if TestCharacters ( 03_Khatam ) then
2613: LD_STRING 03_Khatam
2615: PPUSH
2616: CALL_OW 28
2620: IFFALSE 2641
// Khatam = PrepareUnit ( Khatam , true , 03_ ) ;
2622: LD_ADDR_EXP 14
2626: PUSH
2627: LD_STRING Khatam
2629: PPUSH
2630: LD_INT 1
2632: PPUSH
2633: LD_STRING 03_
2635: PPUSH
2636: CALL 44016 0 3
2640: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 08_ ) ;
2641: LD_ADDR_EXP 15
2645: PUSH
2646: LD_STRING Gladstone
2648: PPUSH
2649: LD_INT 1
2651: PPUSH
2652: LD_STRING 08_
2654: PPUSH
2655: CALL 44016 0 3
2659: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ,  ) ;
2660: LD_ADDR_EXP 17
2664: PUSH
2665: LD_STRING DeltaDoctor
2667: PPUSH
2668: LD_INT 1
2670: PPUSH
2671: LD_STRING 
2673: PPUSH
2674: CALL 44016 0 3
2678: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 08_ ) ;
2679: LD_ADDR_EXP 7
2683: PUSH
2684: LD_STRING Frank
2686: PPUSH
2687: LD_INT 1
2689: PPUSH
2690: LD_STRING 08_
2692: PPUSH
2693: CALL 44016 0 3
2697: ST_TO_ADDR
// if Frank then
2698: LD_EXP 7
2702: IFFALSE 2725
// Kikuchi = PrepareUnit ( Yamoko , false ,  ) else
2704: LD_ADDR_EXP 8
2708: PUSH
2709: LD_STRING Yamoko
2711: PPUSH
2712: LD_INT 0
2714: PPUSH
2715: LD_STRING 
2717: PPUSH
2718: CALL 44016 0 3
2722: ST_TO_ADDR
2723: GO 2744
// Kikuchi = PrepareUnit ( Kikuchi , true , 08_ ) ;
2725: LD_ADDR_EXP 8
2729: PUSH
2730: LD_STRING Kikuchi
2732: PPUSH
2733: LD_INT 1
2735: PPUSH
2736: LD_STRING 08_
2738: PPUSH
2739: CALL 44016 0 3
2743: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
2744: LD_ADDR_EXP 22
2748: PUSH
2749: LD_STRING 09_others
2751: PPUSH
2752: CALL_OW 31
2756: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
2757: LD_ADDR_EXP 23
2761: PUSH
2762: LD_STRING 09_apes
2764: PPUSH
2765: CALL_OW 31
2769: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2770: LD_EXP 11
2774: PPUSH
2775: LD_INT 1
2777: PPUSH
2778: LD_INT 0
2780: PPUSH
2781: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2785: LD_EXP 12
2789: PPUSH
2790: LD_INT 1
2792: PPUSH
2793: LD_INT 0
2795: PPUSH
2796: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2800: LD_EXP 13
2804: PPUSH
2805: LD_INT 1
2807: PPUSH
2808: LD_INT 0
2810: PPUSH
2811: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2815: LD_EXP 14
2819: PPUSH
2820: LD_INT 1
2822: PPUSH
2823: LD_INT 0
2825: PPUSH
2826: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2830: LD_EXP 15
2834: PPUSH
2835: LD_INT 1
2837: PPUSH
2838: LD_INT 0
2840: PPUSH
2841: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2845: LD_EXP 17
2849: PPUSH
2850: LD_INT 1
2852: PPUSH
2853: LD_INT 0
2855: PPUSH
2856: CALL_OW 49
// if Kikuchi then
2860: LD_EXP 8
2864: IFFALSE 2881
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2866: LD_EXP 8
2870: PPUSH
2871: LD_INT 1
2873: PPUSH
2874: LD_INT 0
2876: PPUSH
2877: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2881: LD_EXP 11
2885: PUSH
2886: LD_EXP 14
2890: PUSH
2891: LD_EXP 12
2895: PUSH
2896: LD_EXP 15
2900: PUSH
2901: LD_EXP 17
2905: PUSH
2906: LD_EXP 13
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: LIST
2918: PPUSH
2919: LD_INT 4
2921: PPUSH
2922: CALL_OW 336
// if others09 > 2 then
2926: LD_EXP 22
2930: PUSH
2931: LD_INT 2
2933: GREATER
2934: IFFALSE 3015
// begin for i := 1 to 3 do
2936: LD_ADDR_VAR 0 2
2940: PUSH
2941: DOUBLE
2942: LD_INT 1
2944: DEC
2945: ST_TO_ADDR
2946: LD_INT 3
2948: PUSH
2949: FOR_TO
2950: IFFALSE 3011
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2952: LD_EXP 22
2956: PUSH
2957: LD_VAR 0 2
2961: ARRAY
2962: PPUSH
2963: LD_INT 1
2965: PPUSH
2966: LD_INT 0
2968: PPUSH
2969: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
2973: LD_ADDR_EXP 22
2977: PUSH
2978: LD_EXP 22
2982: PPUSH
2983: LD_INT 1
2985: PPUSH
2986: CALL_OW 3
2990: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
2991: LD_EXP 22
2995: PUSH
2996: LD_VAR 0 2
3000: ARRAY
3001: PPUSH
3002: LD_INT 2
3004: PPUSH
3005: CALL_OW 336
// end ;
3009: GO 2949
3011: POP
3012: POP
// end else
3013: GO 3075
// begin for i in others09 do
3015: LD_ADDR_VAR 0 2
3019: PUSH
3020: LD_EXP 22
3024: PUSH
3025: FOR_IN
3026: IFFALSE 3073
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3028: LD_VAR 0 2
3032: PPUSH
3033: LD_INT 1
3035: PPUSH
3036: LD_INT 0
3038: PPUSH
3039: CALL_OW 49
// others09 = others09 diff i ;
3043: LD_ADDR_EXP 22
3047: PUSH
3048: LD_EXP 22
3052: PUSH
3053: LD_VAR 0 2
3057: DIFF
3058: ST_TO_ADDR
// SetClass ( i , 2 ) ;
3059: LD_VAR 0 2
3063: PPUSH
3064: LD_INT 2
3066: PPUSH
3067: CALL_OW 336
// end ;
3071: GO 3025
3073: POP
3074: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
3075: LD_INT 22
3077: PUSH
3078: LD_INT 4
3080: PUSH
3081: EMPTY
3082: LIST
3083: LIST
3084: PUSH
3085: LD_INT 25
3087: PUSH
3088: LD_INT 2
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PPUSH
3099: CALL_OW 69
3103: PUSH
3104: LD_INT 0
3106: EQUAL
3107: IFFALSE 3239
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3109: LD_ADDR_VAR 0 3
3113: PUSH
3114: LD_INT 22
3116: PUSH
3117: LD_INT 4
3119: PUSH
3120: EMPTY
3121: LIST
3122: LIST
3123: PUSH
3124: LD_INT 25
3126: PUSH
3127: LD_INT 2
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PPUSH
3138: CALL_OW 69
3142: PUSH
3143: LD_EXP 11
3147: PUSH
3148: LD_EXP 14
3152: PUSH
3153: LD_EXP 12
3157: PUSH
3158: LD_EXP 15
3162: PUSH
3163: LD_EXP 17
3167: PUSH
3168: LD_EXP 13
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: DIFF
3181: ST_TO_ADDR
// if not tmp then
3182: LD_VAR 0 3
3186: NOT
3187: IFFALSE 3223
// begin if Denis then
3189: LD_EXP 12
3193: IFFALSE 3209
// SetClass ( Denis , 2 ) else
3195: LD_EXP 12
3199: PPUSH
3200: LD_INT 2
3202: PPUSH
3203: CALL_OW 336
3207: GO 3221
// SetClass ( DeltaDoctor , 2 ) ;
3209: LD_EXP 17
3213: PPUSH
3214: LD_INT 2
3216: PPUSH
3217: CALL_OW 336
// end else
3221: GO 3239
// begin SetClass ( tmp [ 1 ] , 2 ) ;
3223: LD_VAR 0 3
3227: PUSH
3228: LD_INT 1
3230: ARRAY
3231: PPUSH
3232: LD_INT 2
3234: PPUSH
3235: CALL_OW 336
// end ; end ; for i in ape09 do
3239: LD_ADDR_VAR 0 2
3243: PUSH
3244: LD_EXP 23
3248: PUSH
3249: FOR_IN
3250: IFFALSE 3269
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3252: LD_VAR 0 2
3256: PPUSH
3257: LD_INT 1
3259: PPUSH
3260: LD_INT 0
3262: PPUSH
3263: CALL_OW 49
3267: GO 3249
3269: POP
3270: POP
// uc_side = 4 ;
3271: LD_ADDR_OWVAR 20
3275: PUSH
3276: LD_INT 4
3278: ST_TO_ADDR
// hc_class := 1 ;
3279: LD_ADDR_OWVAR 28
3283: PUSH
3284: LD_INT 1
3286: ST_TO_ADDR
// hc_sex := sex_female ;
3287: LD_ADDR_OWVAR 27
3291: PUSH
3292: LD_INT 2
3294: ST_TO_ADDR
// hc_gallery :=  ;
3295: LD_ADDR_OWVAR 33
3299: PUSH
3300: LD_STRING 
3302: ST_TO_ADDR
// hc_name :=  ;
3303: LD_ADDR_OWVAR 26
3307: PUSH
3308: LD_STRING 
3310: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3311: LD_ADDR_OWVAR 31
3315: PUSH
3316: LD_INT 1
3318: PUSH
3319: LD_INT 7
3321: PUSH
3322: LD_INT 1
3324: PUSH
3325: LD_INT 0
3327: PUSH
3328: EMPTY
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: ST_TO_ADDR
// AmScout = CreateHuman ;
3334: LD_ADDR_EXP 18
3338: PUSH
3339: CALL_OW 44
3343: ST_TO_ADDR
// end ;
3344: LD_VAR 0 1
3348: RET
// export function PrepareCornell ; begin
3349: LD_INT 0
3351: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3352: LD_INT 4
3354: PPUSH
3355: LD_INT 4
3357: PPUSH
3358: CALL_OW 343
// uc_side = 4 ;
3362: LD_ADDR_OWVAR 20
3366: PUSH
3367: LD_INT 4
3369: ST_TO_ADDR
// uc_nation = 1 ;
3370: LD_ADDR_OWVAR 21
3374: PUSH
3375: LD_INT 1
3377: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornel , true , 03_ ) ;
3378: LD_ADDR_EXP 19
3382: PUSH
3383: LD_STRING Cornel
3385: PPUSH
3386: LD_INT 1
3388: PPUSH
3389: LD_STRING 03_
3391: PPUSH
3392: CALL 44016 0 3
3396: ST_TO_ADDR
// if not Cornell then
3397: LD_EXP 19
3401: NOT
3402: IFFALSE 3406
// exit ;
3404: GO 3514
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3406: LD_EXP 19
3410: PPUSH
3411: LD_INT 8
3413: PPUSH
3414: LD_INT 0
3416: PPUSH
3417: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3421: LD_EXP 19
3425: PPUSH
3426: LD_INT 350
3428: PPUSH
3429: CALL_OW 234
// if IsInUnit ( JMM ) then
3433: LD_EXP 1
3437: PPUSH
3438: CALL_OW 310
3442: IFFALSE 3485
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3444: LD_EXP 19
3448: PPUSH
3449: LD_EXP 1
3453: PPUSH
3454: CALL_OW 310
3458: PPUSH
3459: CALL_OW 250
3463: PPUSH
3464: LD_EXP 1
3468: PPUSH
3469: CALL_OW 310
3473: PPUSH
3474: CALL_OW 251
3478: PPUSH
3479: CALL_OW 111
3483: GO 3514
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3485: LD_EXP 19
3489: PPUSH
3490: LD_EXP 1
3494: PPUSH
3495: CALL_OW 250
3499: PPUSH
3500: LD_EXP 1
3504: PPUSH
3505: CALL_OW 251
3509: PPUSH
3510: CALL_OW 111
// end ; end_of_file
3514: LD_VAR 0 1
3518: RET
// export function PrepareRussians ; var i , un ; begin
3519: LD_INT 0
3521: PPUSH
3522: PPUSH
3523: PPUSH
// uc_side = 3 ;
3524: LD_ADDR_OWVAR 20
3528: PUSH
3529: LD_INT 3
3531: ST_TO_ADDR
// uc_nation = 3 ;
3532: LD_ADDR_OWVAR 21
3536: PUSH
3537: LD_INT 3
3539: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ,  ) ;
3540: LD_ADDR_EXP 25
3544: PUSH
3545: LD_STRING Tsaritsyn
3547: PPUSH
3548: LD_INT 0
3550: PPUSH
3551: LD_STRING 
3553: PPUSH
3554: CALL 44016 0 3
3558: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3559: LD_EXP 25
3563: PPUSH
3564: LD_INT 3
3566: PPUSH
3567: LD_INT 0
3569: PPUSH
3570: CALL_OW 49
// for i = 1 to 14 do
3574: LD_ADDR_VAR 0 2
3578: PUSH
3579: DOUBLE
3580: LD_INT 1
3582: DEC
3583: ST_TO_ADDR
3584: LD_INT 14
3586: PUSH
3587: FOR_TO
3588: IFFALSE 3674
// begin uc_side = 3 ;
3590: LD_ADDR_OWVAR 20
3594: PUSH
3595: LD_INT 3
3597: ST_TO_ADDR
// uc_nation = 3 ;
3598: LD_ADDR_OWVAR 21
3602: PUSH
3603: LD_INT 3
3605: ST_TO_ADDR
// hc_gallery =  ;
3606: LD_ADDR_OWVAR 33
3610: PUSH
3611: LD_STRING 
3613: ST_TO_ADDR
// hc_name =  ;
3614: LD_ADDR_OWVAR 26
3618: PUSH
3619: LD_STRING 
3621: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3622: LD_INT 0
3624: PPUSH
3625: LD_INT 1
3627: PPUSH
3628: LD_EXP 36
3632: PPUSH
3633: LD_EXP 37
3637: PPUSH
3638: CALL_OW 12
3642: PPUSH
3643: CALL_OW 380
// un = CreateHuman ;
3647: LD_ADDR_VAR 0 3
3651: PUSH
3652: CALL_OW 44
3656: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3657: LD_VAR 0 3
3661: PPUSH
3662: LD_INT 3
3664: PPUSH
3665: LD_INT 0
3667: PPUSH
3668: CALL_OW 49
// end ;
3672: GO 3587
3674: POP
3675: POP
// for i = 1 to 6 do
3676: LD_ADDR_VAR 0 2
3680: PUSH
3681: DOUBLE
3682: LD_INT 1
3684: DEC
3685: ST_TO_ADDR
3686: LD_INT 6
3688: PUSH
3689: FOR_TO
3690: IFFALSE 3776
// begin uc_side = 3 ;
3692: LD_ADDR_OWVAR 20
3696: PUSH
3697: LD_INT 3
3699: ST_TO_ADDR
// uc_nation = 3 ;
3700: LD_ADDR_OWVAR 21
3704: PUSH
3705: LD_INT 3
3707: ST_TO_ADDR
// hc_gallery =  ;
3708: LD_ADDR_OWVAR 33
3712: PUSH
3713: LD_STRING 
3715: ST_TO_ADDR
// hc_name =  ;
3716: LD_ADDR_OWVAR 26
3720: PUSH
3721: LD_STRING 
3723: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3724: LD_INT 0
3726: PPUSH
3727: LD_INT 2
3729: PPUSH
3730: LD_EXP 36
3734: PPUSH
3735: LD_EXP 37
3739: PPUSH
3740: CALL_OW 12
3744: PPUSH
3745: CALL_OW 380
// un = CreateHuman ;
3749: LD_ADDR_VAR 0 3
3753: PUSH
3754: CALL_OW 44
3758: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3759: LD_VAR 0 3
3763: PPUSH
3764: LD_INT 3
3766: PPUSH
3767: LD_INT 0
3769: PPUSH
3770: CALL_OW 49
// end ;
3774: GO 3689
3776: POP
3777: POP
// for i = 1 to 6 do
3778: LD_ADDR_VAR 0 2
3782: PUSH
3783: DOUBLE
3784: LD_INT 1
3786: DEC
3787: ST_TO_ADDR
3788: LD_INT 6
3790: PUSH
3791: FOR_TO
3792: IFFALSE 3878
// begin uc_side = 3 ;
3794: LD_ADDR_OWVAR 20
3798: PUSH
3799: LD_INT 3
3801: ST_TO_ADDR
// uc_nation = 3 ;
3802: LD_ADDR_OWVAR 21
3806: PUSH
3807: LD_INT 3
3809: ST_TO_ADDR
// hc_gallery =  ;
3810: LD_ADDR_OWVAR 33
3814: PUSH
3815: LD_STRING 
3817: ST_TO_ADDR
// hc_name =  ;
3818: LD_ADDR_OWVAR 26
3822: PUSH
3823: LD_STRING 
3825: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3826: LD_INT 0
3828: PPUSH
3829: LD_INT 3
3831: PPUSH
3832: LD_EXP 36
3836: PPUSH
3837: LD_EXP 37
3841: PPUSH
3842: CALL_OW 12
3846: PPUSH
3847: CALL_OW 380
// un = CreateHuman ;
3851: LD_ADDR_VAR 0 3
3855: PUSH
3856: CALL_OW 44
3860: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3861: LD_VAR 0 3
3865: PPUSH
3866: LD_INT 3
3868: PPUSH
3869: LD_INT 0
3871: PPUSH
3872: CALL_OW 49
// end ;
3876: GO 3791
3878: POP
3879: POP
// for i = 1 to 4 do
3880: LD_ADDR_VAR 0 2
3884: PUSH
3885: DOUBLE
3886: LD_INT 1
3888: DEC
3889: ST_TO_ADDR
3890: LD_INT 4
3892: PUSH
3893: FOR_TO
3894: IFFALSE 3980
// begin uc_side = 3 ;
3896: LD_ADDR_OWVAR 20
3900: PUSH
3901: LD_INT 3
3903: ST_TO_ADDR
// uc_nation = 3 ;
3904: LD_ADDR_OWVAR 21
3908: PUSH
3909: LD_INT 3
3911: ST_TO_ADDR
// hc_gallery =  ;
3912: LD_ADDR_OWVAR 33
3916: PUSH
3917: LD_STRING 
3919: ST_TO_ADDR
// hc_name =  ;
3920: LD_ADDR_OWVAR 26
3924: PUSH
3925: LD_STRING 
3927: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3928: LD_INT 0
3930: PPUSH
3931: LD_INT 4
3933: PPUSH
3934: LD_EXP 36
3938: PPUSH
3939: LD_EXP 37
3943: PPUSH
3944: CALL_OW 12
3948: PPUSH
3949: CALL_OW 380
// un = CreateHuman ;
3953: LD_ADDR_VAR 0 3
3957: PUSH
3958: CALL_OW 44
3962: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3963: LD_VAR 0 3
3967: PPUSH
3968: LD_INT 3
3970: PPUSH
3971: LD_INT 0
3973: PPUSH
3974: CALL_OW 49
// end ;
3978: GO 3893
3980: POP
3981: POP
// end ; end_of_file
3982: LD_VAR 0 1
3986: RET
// export function PrepareArabianCommander ; begin
3987: LD_INT 0
3989: PPUSH
// uc_side = 2 ;
3990: LD_ADDR_OWVAR 20
3994: PUSH
3995: LD_INT 2
3997: ST_TO_ADDR
// uc_nation = 2 ;
3998: LD_ADDR_OWVAR 21
4002: PUSH
4003: LD_INT 2
4005: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
4006: LD_ADDR_EXP 26
4010: PUSH
4011: LD_STRING Dietrich
4013: PPUSH
4014: CALL_OW 25
4018: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
4019: LD_EXP 26
4023: PPUSH
4024: LD_INT 4
4026: PPUSH
4027: LD_INT 0
4029: PPUSH
4030: CALL_OW 49
// end ;
4034: LD_VAR 0 1
4038: RET
// export function PrepareArabian ; var i , un , veh ; begin
4039: LD_INT 0
4041: PPUSH
4042: PPUSH
4043: PPUSH
4044: PPUSH
// uc_side := 2 ;
4045: LD_ADDR_OWVAR 20
4049: PUSH
4050: LD_INT 2
4052: ST_TO_ADDR
// uc_nation := 2 ;
4053: LD_ADDR_OWVAR 21
4057: PUSH
4058: LD_INT 2
4060: ST_TO_ADDR
// if not Ahmed then
4061: LD_EXP 27
4065: NOT
4066: IFFALSE 4134
// begin InitHc ;
4068: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
4072: LD_INT 1
4074: PPUSH
4075: LD_INT 1
4077: PPUSH
4078: LD_EXP 36
4082: PPUSH
4083: LD_EXP 37
4087: PUSH
4088: LD_INT 1
4090: PLUS
4091: PPUSH
4092: CALL_OW 12
4096: PPUSH
4097: CALL_OW 380
// hc_name := Ahmed Abbasid ;
4101: LD_ADDR_OWVAR 26
4105: PUSH
4106: LD_STRING Ahmed Abbasid
4108: ST_TO_ADDR
// Ahmed := CreateHuman ;
4109: LD_ADDR_EXP 27
4113: PUSH
4114: CALL_OW 44
4118: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
4119: LD_EXP 27
4123: PPUSH
4124: LD_INT 4
4126: PPUSH
4127: LD_INT 0
4129: PPUSH
4130: CALL_OW 49
// end ; for i = 1 to 4 do
4134: LD_ADDR_VAR 0 2
4138: PUSH
4139: DOUBLE
4140: LD_INT 1
4142: DEC
4143: ST_TO_ADDR
4144: LD_INT 4
4146: PUSH
4147: FOR_TO
4148: IFFALSE 4234
// begin uc_side = 2 ;
4150: LD_ADDR_OWVAR 20
4154: PUSH
4155: LD_INT 2
4157: ST_TO_ADDR
// uc_nation = 2 ;
4158: LD_ADDR_OWVAR 21
4162: PUSH
4163: LD_INT 2
4165: ST_TO_ADDR
// hc_gallery =  ;
4166: LD_ADDR_OWVAR 33
4170: PUSH
4171: LD_STRING 
4173: ST_TO_ADDR
// hc_name =  ;
4174: LD_ADDR_OWVAR 26
4178: PUSH
4179: LD_STRING 
4181: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4182: LD_INT 0
4184: PPUSH
4185: LD_INT 2
4187: PPUSH
4188: LD_EXP 36
4192: PPUSH
4193: LD_EXP 37
4197: PPUSH
4198: CALL_OW 12
4202: PPUSH
4203: CALL_OW 380
// un = CreateHuman ;
4207: LD_ADDR_VAR 0 3
4211: PUSH
4212: CALL_OW 44
4216: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4217: LD_VAR 0 3
4221: PPUSH
4222: LD_INT 4
4224: PPUSH
4225: LD_INT 0
4227: PPUSH
4228: CALL_OW 49
// end ;
4232: GO 4147
4234: POP
4235: POP
// for i = 1 to 5 do
4236: LD_ADDR_VAR 0 2
4240: PUSH
4241: DOUBLE
4242: LD_INT 1
4244: DEC
4245: ST_TO_ADDR
4246: LD_INT 5
4248: PUSH
4249: FOR_TO
4250: IFFALSE 4336
// begin uc_side = 2 ;
4252: LD_ADDR_OWVAR 20
4256: PUSH
4257: LD_INT 2
4259: ST_TO_ADDR
// uc_nation = 2 ;
4260: LD_ADDR_OWVAR 21
4264: PUSH
4265: LD_INT 2
4267: ST_TO_ADDR
// hc_gallery =  ;
4268: LD_ADDR_OWVAR 33
4272: PUSH
4273: LD_STRING 
4275: ST_TO_ADDR
// hc_name =  ;
4276: LD_ADDR_OWVAR 26
4280: PUSH
4281: LD_STRING 
4283: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4284: LD_INT 0
4286: PPUSH
4287: LD_INT 1
4289: PPUSH
4290: LD_EXP 36
4294: PPUSH
4295: LD_EXP 37
4299: PPUSH
4300: CALL_OW 12
4304: PPUSH
4305: CALL_OW 380
// un = CreateHuman ;
4309: LD_ADDR_VAR 0 3
4313: PUSH
4314: CALL_OW 44
4318: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4319: LD_VAR 0 3
4323: PPUSH
4324: LD_INT 4
4326: PPUSH
4327: LD_INT 0
4329: PPUSH
4330: CALL_OW 49
// end ;
4334: GO 4249
4336: POP
4337: POP
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
4338: LD_ADDR_VAR 0 2
4342: PUSH
4343: DOUBLE
4344: LD_INT 1
4346: DEC
4347: ST_TO_ADDR
4348: LD_INT 3
4350: PUSH
4351: LD_INT 4
4353: PUSH
4354: LD_INT 4
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: LIST
4361: PUSH
4362: LD_OWVAR 67
4366: ARRAY
4367: PUSH
4368: FOR_TO
4369: IFFALSE 4455
// begin uc_side = 2 ;
4371: LD_ADDR_OWVAR 20
4375: PUSH
4376: LD_INT 2
4378: ST_TO_ADDR
// uc_nation = 2 ;
4379: LD_ADDR_OWVAR 21
4383: PUSH
4384: LD_INT 2
4386: ST_TO_ADDR
// hc_gallery =  ;
4387: LD_ADDR_OWVAR 33
4391: PUSH
4392: LD_STRING 
4394: ST_TO_ADDR
// hc_name =  ;
4395: LD_ADDR_OWVAR 26
4399: PUSH
4400: LD_STRING 
4402: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4403: LD_INT 0
4405: PPUSH
4406: LD_INT 4
4408: PPUSH
4409: LD_EXP 36
4413: PPUSH
4414: LD_EXP 37
4418: PPUSH
4419: CALL_OW 12
4423: PPUSH
4424: CALL_OW 380
// un = CreateHuman ;
4428: LD_ADDR_VAR 0 3
4432: PUSH
4433: CALL_OW 44
4437: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4438: LD_VAR 0 3
4442: PPUSH
4443: LD_INT 4
4445: PPUSH
4446: LD_INT 0
4448: PPUSH
4449: CALL_OW 49
// end ;
4453: GO 4368
4455: POP
4456: POP
// for i = 1 to 2 do
4457: LD_ADDR_VAR 0 2
4461: PUSH
4462: DOUBLE
4463: LD_INT 1
4465: DEC
4466: ST_TO_ADDR
4467: LD_INT 2
4469: PUSH
4470: FOR_TO
4471: IFFALSE 4601
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4473: LD_ADDR_VAR 0 4
4477: PUSH
4478: LD_INT 22
4480: PUSH
4481: LD_INT 2
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PUSH
4488: LD_INT 21
4490: PUSH
4491: LD_INT 2
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: PUSH
4498: LD_INT 58
4500: PUSH
4501: EMPTY
4502: LIST
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: LIST
4508: PPUSH
4509: CALL_OW 69
4513: ST_TO_ADDR
// uc_side = 2 ;
4514: LD_ADDR_OWVAR 20
4518: PUSH
4519: LD_INT 2
4521: ST_TO_ADDR
// uc_nation = 2 ;
4522: LD_ADDR_OWVAR 21
4526: PUSH
4527: LD_INT 2
4529: ST_TO_ADDR
// hc_gallery =  ;
4530: LD_ADDR_OWVAR 33
4534: PUSH
4535: LD_STRING 
4537: ST_TO_ADDR
// hc_name =  ;
4538: LD_ADDR_OWVAR 26
4542: PUSH
4543: LD_STRING 
4545: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4546: LD_INT 0
4548: PPUSH
4549: LD_INT 3
4551: PPUSH
4552: LD_EXP 36
4556: PPUSH
4557: LD_EXP 37
4561: PPUSH
4562: CALL_OW 12
4566: PPUSH
4567: CALL_OW 380
// un = CreateHuman ;
4571: LD_ADDR_VAR 0 3
4575: PUSH
4576: CALL_OW 44
4580: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4581: LD_VAR 0 3
4585: PPUSH
4586: LD_VAR 0 4
4590: PUSH
4591: LD_INT 1
4593: ARRAY
4594: PPUSH
4595: CALL_OW 52
// end ;
4599: GO 4470
4601: POP
4602: POP
// end ;
4603: LD_VAR 0 1
4607: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
4608: LD_INT 0
4610: PPUSH
4611: PPUSH
4612: PPUSH
4613: PPUSH
4614: PPUSH
4615: PPUSH
// for i := 1 to 2 do
4616: LD_ADDR_VAR 0 2
4620: PUSH
4621: DOUBLE
4622: LD_INT 1
4624: DEC
4625: ST_TO_ADDR
4626: LD_INT 2
4628: PUSH
4629: FOR_TO
4630: IFFALSE 4756
// begin uc_side = 5 ;
4632: LD_ADDR_OWVAR 20
4636: PUSH
4637: LD_INT 5
4639: ST_TO_ADDR
// uc_nation = 2 ;
4640: LD_ADDR_OWVAR 21
4644: PUSH
4645: LD_INT 2
4647: ST_TO_ADDR
// vc_chassis := 31 ;
4648: LD_ADDR_OWVAR 37
4652: PUSH
4653: LD_INT 31
4655: ST_TO_ADDR
// vc_control := control_rider ;
4656: LD_ADDR_OWVAR 38
4660: PUSH
4661: LD_INT 4
4663: ST_TO_ADDR
// animal := CreateVehicle ;
4664: LD_ADDR_VAR 0 3
4668: PUSH
4669: CALL_OW 45
4673: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
4674: LD_VAR 0 3
4678: PPUSH
4679: LD_INT 7
4681: PPUSH
4682: LD_INT 0
4684: PPUSH
4685: CALL_OW 49
// hc_gallery =  ;
4689: LD_ADDR_OWVAR 33
4693: PUSH
4694: LD_STRING 
4696: ST_TO_ADDR
// hc_name =  ;
4697: LD_ADDR_OWVAR 26
4701: PUSH
4702: LD_STRING 
4704: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4705: LD_INT 0
4707: PPUSH
4708: LD_INT 11
4710: PPUSH
4711: LD_EXP 36
4715: PPUSH
4716: LD_EXP 37
4720: PPUSH
4721: CALL_OW 12
4725: PPUSH
4726: CALL_OW 380
// un = CreateHuman ;
4730: LD_ADDR_VAR 0 4
4734: PUSH
4735: CALL_OW 44
4739: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
4740: LD_VAR 0 4
4744: PPUSH
4745: LD_VAR 0 3
4749: PPUSH
4750: CALL_OW 52
// end ;
4754: GO 4629
4756: POP
4757: POP
// repeat wait ( 0 0$1 ) ;
4758: LD_INT 35
4760: PPUSH
4761: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
4765: LD_ADDR_VAR 0 5
4769: PUSH
4770: LD_INT 22
4772: PUSH
4773: LD_INT 1
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: PPUSH
4780: CALL_OW 69
4784: PPUSH
4785: LD_VAR 0 2
4789: PPUSH
4790: CALL_OW 74
4794: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4795: LD_ADDR_VAR 0 6
4799: PUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 1
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PUSH
4810: LD_INT 2
4812: PUSH
4813: LD_INT 59
4815: PUSH
4816: EMPTY
4817: LIST
4818: PUSH
4819: LD_INT 21
4821: PUSH
4822: LD_INT 1
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: PUSH
4829: LD_INT 21
4831: PUSH
4832: LD_INT 2
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: EMPTY
4850: LIST
4851: PPUSH
4852: CALL_OW 69
4856: PPUSH
4857: LD_VAR 0 2
4861: PPUSH
4862: CALL_OW 74
4866: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4867: LD_ADDR_VAR 0 2
4871: PUSH
4872: LD_INT 22
4874: PUSH
4875: LD_INT 5
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 25
4884: PUSH
4885: LD_INT 11
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PPUSH
4896: CALL_OW 69
4900: PUSH
4901: FOR_IN
4902: IFFALSE 4972
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4904: LD_VAR 0 2
4908: PPUSH
4909: LD_VAR 0 5
4913: PPUSH
4914: CALL_OW 296
4918: PUSH
4919: LD_INT 8
4921: PLUS
4922: PUSH
4923: LD_VAR 0 2
4927: PPUSH
4928: LD_VAR 0 6
4932: PPUSH
4933: CALL_OW 296
4937: LESS
4938: IFFALSE 4956
// ComAttackUnit ( i , target1 ) else
4940: LD_VAR 0 2
4944: PPUSH
4945: LD_VAR 0 5
4949: PPUSH
4950: CALL_OW 115
4954: GO 4970
// ComAttackUnit ( i , target2 ) ;
4956: LD_VAR 0 2
4960: PPUSH
4961: LD_VAR 0 6
4965: PPUSH
4966: CALL_OW 115
// end ;
4970: GO 4901
4972: POP
4973: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
4974: LD_INT 22
4976: PUSH
4977: LD_INT 5
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: LD_INT 25
4986: PUSH
4987: LD_INT 11
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PPUSH
4998: CALL_OW 69
5002: PUSH
5003: LD_INT 0
5005: EQUAL
5006: PUSH
5007: LD_INT 22
5009: PUSH
5010: LD_INT 1
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PPUSH
5017: CALL_OW 69
5021: PUSH
5022: LD_INT 0
5024: EQUAL
5025: OR
5026: IFFALSE 4758
// end ; end_of_file
5028: LD_VAR 0 1
5032: RET
// every 1 do
5033: GO 5035
5035: DISABLE
// begin Video ( true ) ;
5036: LD_INT 1
5038: PPUSH
5039: CALL 79858 0 1
// RevealFogArea ( 1 , EpsilonTerrain ) ;
5043: LD_INT 1
5045: PPUSH
5046: LD_INT 19
5048: PPUSH
5049: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
5053: LD_EXP 11
5057: PPUSH
5058: CALL_OW 87
// wait ( 0 0$3 ) ;
5062: LD_INT 105
5064: PPUSH
5065: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
5069: LD_EXP 1
5073: PPUSH
5074: CALL_OW 310
5078: PPUSH
5079: CALL_OW 85
// Wait ( 0 0$1 ) ;
5083: LD_INT 35
5085: PPUSH
5086: CALL_OW 67
// if IsOk ( Gary ) then
5090: LD_EXP 10
5094: PPUSH
5095: CALL_OW 302
5099: IFFALSE 5137
// begin Say ( Gary , D2-Gary-1 ) ;
5101: LD_EXP 10
5105: PPUSH
5106: LD_STRING D2-Gary-1
5108: PPUSH
5109: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
5113: LD_EXP 1
5117: PPUSH
5118: LD_STRING D2-JMM-1
5120: PPUSH
5121: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
5125: LD_EXP 10
5129: PPUSH
5130: LD_STRING D2-Gary-2
5132: PPUSH
5133: CALL_OW 88
// end ; Video ( false ) ;
5137: LD_INT 0
5139: PPUSH
5140: CALL 79858 0 1
// ChangeMissionObjectives ( M1 ) ;
5144: LD_STRING M1
5146: PPUSH
5147: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
5151: LD_INT 38
5153: PPUSH
5154: LD_INT 1
5156: PPUSH
5157: LD_INT 100
5159: PPUSH
5160: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
5164: LD_INT 47
5166: PPUSH
5167: LD_INT 1
5169: PPUSH
5170: LD_INT 50
5172: PPUSH
5173: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5177: LD_INT 47
5179: PPUSH
5180: LD_INT 3
5182: PPUSH
5183: LD_INT 50
5185: PPUSH
5186: CALL_OW 291
// SaveForQuickRestart ;
5190: CALL_OW 22
// end ;
5194: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var p ;
5195: LD_EXP 1
5199: PPUSH
5200: LD_EXP 11
5204: PPUSH
5205: CALL_OW 296
5209: PUSH
5210: LD_INT 15
5212: LESS
5213: IFFALSE 5797
5215: GO 5217
5217: DISABLE
5218: LD_INT 0
5220: PPUSH
// begin wait ( 0 0$3 ) ;
5221: LD_INT 105
5223: PPUSH
5224: CALL_OW 67
// Video ( true ) ;
5228: LD_INT 1
5230: PPUSH
5231: CALL 79858 0 1
// ComExitVehicle ( JMM ) ;
5235: LD_EXP 1
5239: PPUSH
5240: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5244: LD_EXP 1
5248: PPUSH
5249: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
5253: LD_EXP 1
5257: PPUSH
5258: LD_EXP 11
5262: PPUSH
5263: CALL_OW 179
// p := 15 ;
5267: LD_ADDR_VAR 0 1
5271: PUSH
5272: LD_INT 15
5274: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5275: LD_INT 35
5277: PPUSH
5278: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5282: LD_EXP 11
5286: PUSH
5287: LD_EXP 13
5291: PUSH
5292: LD_EXP 12
5296: PUSH
5297: LD_EXP 14
5301: PUSH
5302: LD_EXP 8
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: PPUSH
5314: LD_EXP 1
5318: PPUSH
5319: CALL_OW 112
// p := p - 1 ;
5323: LD_ADDR_VAR 0 1
5327: PUSH
5328: LD_VAR 0 1
5332: PUSH
5333: LD_INT 1
5335: MINUS
5336: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
5337: LD_EXP 1
5341: PPUSH
5342: LD_EXP 11
5346: PPUSH
5347: CALL_OW 296
5351: PUSH
5352: LD_INT 5
5354: LESS
5355: PUSH
5356: LD_VAR 0 1
5360: PUSH
5361: LD_INT 0
5363: LESSEQUAL
5364: OR
5365: IFFALSE 5275
// if not IsInUnit ( JMM ) then
5367: LD_EXP 1
5371: PPUSH
5372: CALL_OW 310
5376: NOT
5377: IFFALSE 5393
// ComTurnUnit ( JMM , Simms ) ;
5379: LD_EXP 1
5383: PPUSH
5384: LD_EXP 11
5388: PPUSH
5389: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5393: LD_EXP 11
5397: PUSH
5398: LD_EXP 13
5402: PUSH
5403: LD_EXP 12
5407: PUSH
5408: LD_EXP 14
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: PPUSH
5419: LD_EXP 1
5423: PPUSH
5424: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5428: LD_EXP 1
5432: PUSH
5433: LD_EXP 11
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: PPUSH
5442: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5446: LD_EXP 11
5450: PPUSH
5451: LD_STRING D2a-Sim-1
5453: PPUSH
5454: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5458: LD_EXP 1
5462: PPUSH
5463: LD_STRING D2a-JMM-1
5465: PPUSH
5466: CALL_OW 88
// if IsOk ( Joan ) then
5470: LD_EXP 13
5474: PPUSH
5475: CALL_OW 302
5479: IFFALSE 5543
// begin if not IsInUnit ( JMM ) then
5481: LD_EXP 1
5485: PPUSH
5486: CALL_OW 310
5490: NOT
5491: IFFALSE 5507
// ComTurnUnit ( JMM , Joan ) ;
5493: LD_EXP 1
5497: PPUSH
5498: LD_EXP 13
5502: PPUSH
5503: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5507: LD_EXP 13
5511: PPUSH
5512: LD_STRING D2b-Joan-1
5514: PPUSH
5515: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5519: LD_EXP 1
5523: PPUSH
5524: LD_STRING D2b-JMM-1
5526: PPUSH
5527: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5531: LD_EXP 13
5535: PPUSH
5536: LD_STRING D2b-Joan-2
5538: PPUSH
5539: CALL_OW 88
// end ; if IsOk ( Denis ) then
5543: LD_EXP 12
5547: PPUSH
5548: CALL_OW 302
5552: IFFALSE 5592
// begin if not IsInUnit ( JMM ) then
5554: LD_EXP 1
5558: PPUSH
5559: CALL_OW 310
5563: NOT
5564: IFFALSE 5580
// ComTurnUnit ( JMM , Denis ) ;
5566: LD_EXP 1
5570: PPUSH
5571: LD_EXP 12
5575: PPUSH
5576: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
5580: LD_EXP 12
5584: PPUSH
5585: LD_STRING D2c-Den-1
5587: PPUSH
5588: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
5592: LD_EXP 8
5596: PPUSH
5597: CALL_OW 302
5601: PUSH
5602: LD_STRING 08_Kikuchi
5604: PPUSH
5605: CALL_OW 28
5609: NOT
5610: AND
5611: IFFALSE 5692
// begin repeat wait ( 0 0$1 ) ;
5613: LD_INT 35
5615: PPUSH
5616: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
5620: LD_EXP 8
5624: PPUSH
5625: LD_EXP 1
5629: PPUSH
5630: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
5634: LD_EXP 1
5638: PPUSH
5639: LD_EXP 8
5643: PPUSH
5644: CALL_OW 296
5648: PUSH
5649: LD_INT 5
5651: LESS
5652: IFFALSE 5613
// if not IsInUnit ( JMM ) then
5654: LD_EXP 1
5658: PPUSH
5659: CALL_OW 310
5663: NOT
5664: IFFALSE 5680
// ComTurnUnit ( JMM , Kikuchi ) ;
5666: LD_EXP 1
5670: PPUSH
5671: LD_EXP 8
5675: PPUSH
5676: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
5680: LD_EXP 8
5684: PPUSH
5685: LD_STRING D3b-Yam-1
5687: PPUSH
5688: CALL_OW 88
// end ; if IsOk ( Khatam ) then
5692: LD_EXP 14
5696: PPUSH
5697: CALL_OW 302
5701: IFFALSE 5753
// begin if not IsInUnit ( JMM ) then
5703: LD_EXP 1
5707: PPUSH
5708: CALL_OW 310
5712: NOT
5713: IFFALSE 5729
// ComTurnUnit ( JMM , Khatam ) ;
5715: LD_EXP 1
5719: PPUSH
5720: LD_EXP 14
5724: PPUSH
5725: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
5729: LD_EXP 1
5733: PPUSH
5734: LD_STRING D2c-JMM-1
5736: PPUSH
5737: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
5741: LD_EXP 14
5745: PPUSH
5746: LD_STRING D2c-Khat-1
5748: PPUSH
5749: CALL_OW 88
// end ; Video ( false ) ;
5753: LD_INT 0
5755: PPUSH
5756: CALL 79858 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5760: LD_INT 22
5762: PUSH
5763: LD_INT 4
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PPUSH
5770: CALL_OW 69
5774: PPUSH
5775: LD_INT 1
5777: PPUSH
5778: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
5782: LD_STRING M1a
5784: PPUSH
5785: CALL_OW 337
// joinEpsilon = 1 ;
5789: LD_ADDR_EXP 29
5793: PUSH
5794: LD_INT 1
5796: ST_TO_ADDR
// end ;
5797: PPOPN 1
5799: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do var p ;
5800: LD_INT 38
5802: PPUSH
5803: LD_INT 1
5805: PPUSH
5806: CALL_OW 289
5810: PUSH
5811: LD_INT 0
5813: EQUAL
5814: PUSH
5815: LD_INT 47
5817: PPUSH
5818: LD_INT 1
5820: PPUSH
5821: CALL_OW 289
5825: PUSH
5826: LD_INT 0
5828: EQUAL
5829: AND
5830: PUSH
5831: LD_INT 47
5833: PPUSH
5834: LD_INT 2
5836: PPUSH
5837: CALL_OW 289
5841: PUSH
5842: LD_INT 0
5844: EQUAL
5845: AND
5846: IFFALSE 5971
5848: GO 5850
5850: DISABLE
5851: LD_INT 0
5853: PPUSH
// begin p := 0 ;
5854: LD_ADDR_VAR 0 1
5858: PUSH
5859: LD_INT 0
5861: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
5862: LD_INT 38
5864: PUSH
5865: LD_INT 47
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: PPUSH
5872: LD_INT 56
5874: PPUSH
5875: LD_INT 0
5877: PPUSH
5878: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5882: LD_INT 35
5884: PPUSH
5885: CALL_OW 67
// p := p + 1 ;
5889: LD_ADDR_VAR 0 1
5893: PUSH
5894: LD_VAR 0 1
5898: PUSH
5899: LD_INT 1
5901: PLUS
5902: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
5903: LD_INT 38
5905: PUSH
5906: LD_INT 47
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: PPUSH
5913: LD_INT 56
5915: PPUSH
5916: LD_INT 0
5918: PPUSH
5919: CALL_OW 111
// if IsInArea ( cargo1 , RemArea ) then
5923: LD_INT 38
5925: PPUSH
5926: LD_INT 27
5928: PPUSH
5929: CALL_OW 308
5933: IFFALSE 5942
// RemoveUnit ( cargo1 ) ;
5935: LD_INT 38
5937: PPUSH
5938: CALL_OW 64
// if IsInArea ( cargo2 , RemArea ) then
5942: LD_INT 47
5944: PPUSH
5945: LD_INT 27
5947: PPUSH
5948: CALL_OW 308
5952: IFFALSE 5961
// RemoveUnit ( cargo2 ) ;
5954: LD_INT 47
5956: PPUSH
5957: CALL_OW 64
// until p > 30 ;
5961: LD_VAR 0 1
5965: PUSH
5966: LD_INT 30
5968: GREATER
5969: IFFALSE 5882
// end ;
5971: PPOPN 1
5973: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
5974: LD_EXP 65
5978: PUSH
5979: LD_INT 1
5981: EQUAL
5982: IFFALSE 7114
5984: GO 5986
5986: DISABLE
5987: LD_INT 0
5989: PPUSH
5990: PPUSH
5991: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5992: LD_ADDR_VAR 0 1
5996: PUSH
5997: LD_INT 22
5999: PUSH
6000: LD_INT 1
6002: PUSH
6003: EMPTY
6004: LIST
6005: LIST
6006: PUSH
6007: LD_INT 25
6009: PUSH
6010: LD_INT 4
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: PUSH
6017: LD_INT 26
6019: PUSH
6020: LD_INT 1
6022: PUSH
6023: EMPTY
6024: LIST
6025: LIST
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: LIST
6031: PPUSH
6032: CALL_OW 69
6036: PUSH
6037: LD_EXP 1
6041: PUSH
6042: LD_EXP 2
6046: PUSH
6047: LD_EXP 3
6051: PUSH
6052: LD_EXP 4
6056: PUSH
6057: LD_EXP 5
6061: PUSH
6062: LD_EXP 6
6066: PUSH
6067: LD_EXP 7
6071: PUSH
6072: LD_EXP 8
6076: PUSH
6077: LD_EXP 9
6081: PUSH
6082: LD_EXP 10
6086: PUSH
6087: LD_EXP 11
6091: PUSH
6092: LD_EXP 12
6096: PUSH
6097: LD_EXP 13
6101: PUSH
6102: LD_EXP 14
6106: PUSH
6107: LD_EXP 15
6111: PUSH
6112: LD_EXP 16
6116: PUSH
6117: LD_EXP 17
6121: PUSH
6122: LD_EXP 18
6126: PUSH
6127: LD_EXP 19
6131: PUSH
6132: LD_EXP 24
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: DIFF
6159: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6160: LD_ADDR_VAR 0 2
6164: PUSH
6165: LD_INT 22
6167: PUSH
6168: LD_INT 1
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: LD_INT 26
6177: PUSH
6178: LD_INT 1
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: PUSH
6185: LD_INT 2
6187: PUSH
6188: LD_INT 25
6190: PUSH
6191: LD_INT 1
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PUSH
6198: LD_INT 25
6200: PUSH
6201: LD_INT 2
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 25
6210: PUSH
6211: LD_INT 3
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: LIST
6222: LIST
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: LIST
6228: PPUSH
6229: CALL_OW 69
6233: PUSH
6234: LD_EXP 1
6238: PUSH
6239: LD_EXP 2
6243: PUSH
6244: LD_EXP 3
6248: PUSH
6249: LD_EXP 4
6253: PUSH
6254: LD_EXP 5
6258: PUSH
6259: LD_EXP 6
6263: PUSH
6264: LD_EXP 7
6268: PUSH
6269: LD_EXP 8
6273: PUSH
6274: LD_EXP 9
6278: PUSH
6279: LD_EXP 10
6283: PUSH
6284: LD_EXP 11
6288: PUSH
6289: LD_EXP 12
6293: PUSH
6294: LD_EXP 13
6298: PUSH
6299: LD_EXP 14
6303: PUSH
6304: LD_EXP 15
6308: PUSH
6309: LD_EXP 16
6313: PUSH
6314: LD_EXP 17
6318: PUSH
6319: LD_EXP 18
6323: PUSH
6324: LD_EXP 19
6328: PUSH
6329: LD_EXP 24
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: DIFF
6356: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
6357: LD_EXP 10
6361: PUSH
6362: LD_VAR 0 2
6366: OR
6367: PUSH
6368: LD_EXP 17
6372: PUSH
6373: LD_VAR 0 1
6377: OR
6378: AND
6379: IFFALSE 6598
// begin DialogueOn ;
6381: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
6385: LD_EXP 17
6389: PPUSH
6390: CALL_OW 302
6394: IFFALSE 6410
// Say ( DeltaDoctor , D3-Sci1-1 ) else
6396: LD_EXP 17
6400: PPUSH
6401: LD_STRING D3-Sci1-1
6403: PPUSH
6404: CALL_OW 88
6408: GO 6422
// Say ( tmp1 , D3-Sci1-1 ) ;
6410: LD_VAR 0 1
6414: PPUSH
6415: LD_STRING D3-Sci1-1
6417: PPUSH
6418: CALL_OW 88
// if IsOk ( Gary ) then
6422: LD_EXP 10
6426: PPUSH
6427: CALL_OW 302
6431: IFFALSE 6447
// Say ( Gary , D3-Gary-1 ) else
6433: LD_EXP 10
6437: PPUSH
6438: LD_STRING D3-Gary-1
6440: PPUSH
6441: CALL_OW 88
6445: GO 6459
// Say ( tmp2 , D3-Gary-1 ) ;
6447: LD_VAR 0 2
6451: PPUSH
6452: LD_STRING D3-Gary-1
6454: PPUSH
6455: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6459: LD_EXP 17
6463: PPUSH
6464: CALL_OW 302
6468: IFFALSE 6484
// Say ( DeltaDoctor , D3-Sci1-2 ) else
6470: LD_EXP 17
6474: PPUSH
6475: LD_STRING D3-Sci1-2
6477: PPUSH
6478: CALL_OW 88
6482: GO 6496
// Say ( tmp1 , D3-Sci1-2 ) ;
6484: LD_VAR 0 1
6488: PPUSH
6489: LD_STRING D3-Sci1-2
6491: PPUSH
6492: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6496: LD_EXP 1
6500: PPUSH
6501: LD_STRING D3-JMM-2
6503: PPUSH
6504: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6508: LD_EXP 17
6512: PPUSH
6513: CALL_OW 302
6517: IFFALSE 6533
// Say ( DeltaDoctor , D3-Sci1-3 ) else
6519: LD_EXP 17
6523: PPUSH
6524: LD_STRING D3-Sci1-3
6526: PPUSH
6527: CALL_OW 88
6531: GO 6545
// Say ( tmp1 , D3-Sci1-3 ) ;
6533: LD_VAR 0 1
6537: PPUSH
6538: LD_STRING D3-Sci1-3
6540: PPUSH
6541: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
6545: LD_EXP 1
6549: PPUSH
6550: LD_STRING D3-JMM-3
6552: PPUSH
6553: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6557: LD_EXP 17
6561: PPUSH
6562: CALL_OW 302
6566: IFFALSE 6582
// Say ( DeltaDoctor , D3-Sci1-4 ) else
6568: LD_EXP 17
6572: PPUSH
6573: LD_STRING D3-Sci1-4
6575: PPUSH
6576: CALL_OW 88
6580: GO 6594
// Say ( tmp1 , D3-Sci1-4 ) ;
6582: LD_VAR 0 1
6586: PPUSH
6587: LD_STRING D3-Sci1-4
6589: PPUSH
6590: CALL_OW 88
// DialogueOff ;
6594: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
6598: LD_INT 12
6600: PPUSH
6601: LD_INT 1
6603: PPUSH
6604: LD_INT 1
6606: PPUSH
6607: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
6611: LD_INT 32
6613: PPUSH
6614: LD_INT 1
6616: PPUSH
6617: LD_INT 1
6619: PPUSH
6620: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
6624: LD_INT 12
6626: PPUSH
6627: LD_INT 1
6629: PPUSH
6630: LD_INT 1
6632: PPUSH
6633: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
6637: LD_INT 33
6639: PPUSH
6640: LD_INT 1
6642: PPUSH
6643: LD_INT 1
6645: PPUSH
6646: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
6650: LD_STRING M2
6652: PPUSH
6653: CALL_OW 337
// wait ( 3 3$0 ) ;
6657: LD_INT 6300
6659: PPUSH
6660: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6664: LD_INT 35
6666: PPUSH
6667: CALL_OW 67
// until not InBattle ( 1 ) ;
6671: LD_INT 1
6673: PPUSH
6674: CALL_OW 463
6678: NOT
6679: IFFALSE 6664
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
6681: LD_EXP 11
6685: PPUSH
6686: CALL_OW 302
6690: PUSH
6691: LD_EXP 17
6695: PPUSH
6696: CALL_OW 302
6700: AND
6701: IFFALSE 6870
// begin DialogueOn ;
6703: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6707: LD_EXP 11
6711: PPUSH
6712: LD_STRING D3a-Sim-1
6714: PPUSH
6715: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
6719: LD_EXP 17
6723: PPUSH
6724: LD_STRING D3a-Sci1-1
6726: PPUSH
6727: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6731: LD_EXP 11
6735: PPUSH
6736: LD_STRING D3a-Sim-2
6738: PPUSH
6739: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
6743: LD_EXP 17
6747: PPUSH
6748: LD_STRING D3a-Sci1-2
6750: PPUSH
6751: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6755: LD_EXP 11
6759: PPUSH
6760: LD_STRING D3a-Sim-3
6762: PPUSH
6763: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
6767: LD_EXP 17
6771: PPUSH
6772: LD_STRING D3a-Sci1-3
6774: PPUSH
6775: CALL_OW 88
// if IsOK ( Joan ) then
6779: LD_EXP 13
6783: PPUSH
6784: CALL_OW 302
6788: IFFALSE 6804
// Say ( Simms , D3a-Sim-4 ) else
6790: LD_EXP 11
6794: PPUSH
6795: LD_STRING D3a-Sim-4
6797: PPUSH
6798: CALL_OW 88
6802: GO 6816
// Say ( Simms , D3a-Sim-4a ) ;
6804: LD_EXP 11
6808: PPUSH
6809: LD_STRING D3a-Sim-4a
6811: PPUSH
6812: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
6816: LD_EXP 17
6820: PPUSH
6821: LD_STRING D3a-Sci1-4
6823: PPUSH
6824: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6828: LD_EXP 11
6832: PPUSH
6833: LD_STRING D3a-Sim-5
6835: PPUSH
6836: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
6840: LD_EXP 17
6844: PPUSH
6845: LD_STRING D3a-Sci1-5
6847: PPUSH
6848: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6852: LD_EXP 11
6856: PPUSH
6857: LD_STRING D3a-Sim-6
6859: PPUSH
6860: CALL_OW 88
// DialogueOff ;
6864: CALL_OW 7
// end else
6868: GO 7114
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
6870: LD_ADDR_VAR 0 3
6874: PUSH
6875: LD_INT 22
6877: PUSH
6878: LD_INT 1
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: PUSH
6885: LD_INT 25
6887: PUSH
6888: LD_INT 4
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: PPUSH
6899: CALL_OW 69
6903: PUSH
6904: LD_EXP 11
6908: PUSH
6909: LD_EXP 14
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: DIFF
6918: ST_TO_ADDR
// if tmp3 > 0 then
6919: LD_VAR 0 3
6923: PUSH
6924: LD_INT 0
6926: GREATER
6927: IFFALSE 7114
// begin DialogueOn ;
6929: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6933: LD_EXP 11
6937: PPUSH
6938: LD_STRING D3a-Sim-1
6940: PPUSH
6941: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
6945: LD_VAR 0 3
6949: PUSH
6950: LD_INT 1
6952: ARRAY
6953: PPUSH
6954: LD_STRING D3a-Sci1-1
6956: PPUSH
6957: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6961: LD_EXP 11
6965: PPUSH
6966: LD_STRING D3a-Sim-2
6968: PPUSH
6969: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
6973: LD_VAR 0 3
6977: PUSH
6978: LD_INT 1
6980: ARRAY
6981: PPUSH
6982: LD_STRING D3a-Sci1-2
6984: PPUSH
6985: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6989: LD_EXP 11
6993: PPUSH
6994: LD_STRING D3a-Sim-3
6996: PPUSH
6997: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
7001: LD_VAR 0 3
7005: PUSH
7006: LD_INT 1
7008: ARRAY
7009: PPUSH
7010: LD_STRING D3a-Sci1-3
7012: PPUSH
7013: CALL_OW 88
// if IsOK ( Joan ) then
7017: LD_EXP 13
7021: PPUSH
7022: CALL_OW 302
7026: IFFALSE 7042
// Say ( Simms , D3a-Sim-4 ) else
7028: LD_EXP 11
7032: PPUSH
7033: LD_STRING D3a-Sim-4
7035: PPUSH
7036: CALL_OW 88
7040: GO 7054
// Say ( Simms , D3a-Sim-4a ) ;
7042: LD_EXP 11
7046: PPUSH
7047: LD_STRING D3a-Sim-4a
7049: PPUSH
7050: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
7054: LD_VAR 0 3
7058: PUSH
7059: LD_INT 1
7061: ARRAY
7062: PPUSH
7063: LD_STRING D3a-Sci1-4
7065: PPUSH
7066: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7070: LD_EXP 11
7074: PPUSH
7075: LD_STRING D3a-Sim-5
7077: PPUSH
7078: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
7082: LD_VAR 0 3
7086: PUSH
7087: LD_INT 1
7089: ARRAY
7090: PPUSH
7091: LD_STRING D3a-Sci1-5
7093: PPUSH
7094: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7098: LD_EXP 11
7102: PPUSH
7103: LD_STRING D3a-Sim-6
7105: PPUSH
7106: CALL_OW 88
// DialogueOff ;
7110: CALL_OW 7
// end ; end ; end ;
7114: PPOPN 3
7116: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
7117: LD_EXP 29
7121: PUSH
7122: LD_INT 1
7124: EQUAL
7125: IFFALSE 7453
7127: GO 7129
7129: DISABLE
7130: LD_INT 0
7132: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
7133: LD_EXP 18
7137: PPUSH
7138: LD_STRING D4-FSol1-1
7140: PPUSH
7141: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
7145: LD_STRING M3
7147: PPUSH
7148: CALL_OW 337
// PrepareRussians ;
7152: CALL 3519 0 0
// spawnRussians := true ;
7156: LD_ADDR_EXP 58
7160: PUSH
7161: LD_INT 1
7163: ST_TO_ADDR
// rnd = Rand ( 1 , 100 ) ;
7164: LD_ADDR_VAR 0 1
7168: PUSH
7169: LD_INT 1
7171: PPUSH
7172: LD_INT 100
7174: PPUSH
7175: CALL_OW 12
7179: ST_TO_ADDR
// if difficulty = 1 then
7180: LD_OWVAR 67
7184: PUSH
7185: LD_INT 1
7187: EQUAL
7188: IFFALSE 7271
// begin if rnd > 0 and rnd < 51 then
7190: LD_VAR 0 1
7194: PUSH
7195: LD_INT 0
7197: GREATER
7198: PUSH
7199: LD_VAR 0 1
7203: PUSH
7204: LD_INT 51
7206: LESS
7207: AND
7208: IFFALSE 7217
// BuildRussianBase ( 2 ) ;
7210: LD_INT 2
7212: PPUSH
7213: CALL 11559 0 1
// if rnd > 50 and rnd < 81 then
7217: LD_VAR 0 1
7221: PUSH
7222: LD_INT 50
7224: GREATER
7225: PUSH
7226: LD_VAR 0 1
7230: PUSH
7231: LD_INT 81
7233: LESS
7234: AND
7235: IFFALSE 7244
// BuildRussianBase ( 1 ) ;
7237: LD_INT 1
7239: PPUSH
7240: CALL 11559 0 1
// if rnd > 80 and rnd < 101 then
7244: LD_VAR 0 1
7248: PUSH
7249: LD_INT 80
7251: GREATER
7252: PUSH
7253: LD_VAR 0 1
7257: PUSH
7258: LD_INT 101
7260: LESS
7261: AND
7262: IFFALSE 7271
// BuildRussianBase ( 3 ) ;
7264: LD_INT 3
7266: PPUSH
7267: CALL 11559 0 1
// end ; if difficulty = 2 then
7271: LD_OWVAR 67
7275: PUSH
7276: LD_INT 2
7278: EQUAL
7279: IFFALSE 7362
// begin if rnd > 0 and rnd < 61 then
7281: LD_VAR 0 1
7285: PUSH
7286: LD_INT 0
7288: GREATER
7289: PUSH
7290: LD_VAR 0 1
7294: PUSH
7295: LD_INT 61
7297: LESS
7298: AND
7299: IFFALSE 7308
// BuildRussianBase ( 2 ) ;
7301: LD_INT 2
7303: PPUSH
7304: CALL 11559 0 1
// if rnd > 60 and rnd < 81 then
7308: LD_VAR 0 1
7312: PUSH
7313: LD_INT 60
7315: GREATER
7316: PUSH
7317: LD_VAR 0 1
7321: PUSH
7322: LD_INT 81
7324: LESS
7325: AND
7326: IFFALSE 7335
// BuildRussianBase ( 1 ) ;
7328: LD_INT 1
7330: PPUSH
7331: CALL 11559 0 1
// if rnd > 80 and rnd < 101 then
7335: LD_VAR 0 1
7339: PUSH
7340: LD_INT 80
7342: GREATER
7343: PUSH
7344: LD_VAR 0 1
7348: PUSH
7349: LD_INT 101
7351: LESS
7352: AND
7353: IFFALSE 7362
// BuildRussianBase ( 3 ) ;
7355: LD_INT 3
7357: PPUSH
7358: CALL 11559 0 1
// end ; if difficulty = 3 then
7362: LD_OWVAR 67
7366: PUSH
7367: LD_INT 3
7369: EQUAL
7370: IFFALSE 7453
// begin if rnd > 0 and rnd < 71 then
7372: LD_VAR 0 1
7376: PUSH
7377: LD_INT 0
7379: GREATER
7380: PUSH
7381: LD_VAR 0 1
7385: PUSH
7386: LD_INT 71
7388: LESS
7389: AND
7390: IFFALSE 7399
// BuildRussianBase ( 3 ) ;
7392: LD_INT 3
7394: PPUSH
7395: CALL 11559 0 1
// if rnd > 70 and rnd < 81 then
7399: LD_VAR 0 1
7403: PUSH
7404: LD_INT 70
7406: GREATER
7407: PUSH
7408: LD_VAR 0 1
7412: PUSH
7413: LD_INT 81
7415: LESS
7416: AND
7417: IFFALSE 7426
// BuildRussianBase ( 2 ) ;
7419: LD_INT 2
7421: PPUSH
7422: CALL 11559 0 1
// if rnd > 80 and rnd < 101 then
7426: LD_VAR 0 1
7430: PUSH
7431: LD_INT 80
7433: GREATER
7434: PUSH
7435: LD_VAR 0 1
7439: PUSH
7440: LD_INT 101
7442: LESS
7443: AND
7444: IFFALSE 7453
// BuildRussianBase ( 1 ) ;
7446: LD_INT 1
7448: PPUSH
7449: CALL 11559 0 1
// end ; end ;
7453: PPOPN 1
7455: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
7456: LD_INT 54
7458: PPUSH
7459: LD_INT 1
7461: PPUSH
7462: CALL_OW 321
7466: PUSH
7467: LD_INT 2
7469: EQUAL
7470: PUSH
7471: LD_INT 21
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: CALL_OW 321
7481: PUSH
7482: LD_INT 2
7484: EQUAL
7485: OR
7486: PUSH
7487: LD_INT 22
7489: PPUSH
7490: LD_INT 1
7492: PPUSH
7493: CALL_OW 321
7497: PUSH
7498: LD_INT 2
7500: EQUAL
7501: OR
7502: IFFALSE 7804
7504: GO 7506
7506: DISABLE
7507: LD_INT 0
7509: PPUSH
7510: PPUSH
// begin if IsOk ( DeltaDoctor ) then
7511: LD_EXP 17
7515: PPUSH
7516: CALL_OW 302
7520: IFFALSE 7534
// tmp := DeltaDoctor else
7522: LD_ADDR_VAR 0 2
7526: PUSH
7527: LD_EXP 17
7531: ST_TO_ADDR
7532: GO 7544
// tmp := Denis ;
7534: LD_ADDR_VAR 0 2
7538: PUSH
7539: LD_EXP 12
7543: ST_TO_ADDR
// if tmp then
7544: LD_VAR 0 2
7548: IFFALSE 7642
// begin DialogueOn ;
7550: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
7554: LD_EXP 1
7558: PPUSH
7559: LD_STRING D6-JMM-1
7561: PPUSH
7562: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
7566: LD_VAR 0 2
7570: PPUSH
7571: LD_STRING D6-Sci1-1
7573: PPUSH
7574: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
7578: LD_EXP 1
7582: PPUSH
7583: LD_STRING D6-JMM-2
7585: PPUSH
7586: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
7590: LD_VAR 0 2
7594: PPUSH
7595: LD_STRING D6-Sci1-2
7597: PPUSH
7598: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
7602: LD_EXP 1
7606: PPUSH
7607: LD_STRING D6-JMM-3
7609: PPUSH
7610: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
7614: LD_VAR 0 2
7618: PPUSH
7619: LD_STRING D6-Sci1-3
7621: PPUSH
7622: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
7626: LD_EXP 1
7630: PPUSH
7631: LD_STRING D6-JMM-4
7633: PPUSH
7634: CALL_OW 88
// DialogueOff ;
7638: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
7642: LD_INT 1050
7644: PPUSH
7645: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
7649: LD_EXP 49
7653: PUSH
7654: LD_INT 0
7656: EQUAL
7657: PUSH
7658: LD_EXP 14
7662: PPUSH
7663: CALL_OW 302
7667: AND
7668: IFFALSE 7726
// begin DialogueOn ;
7670: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
7674: LD_EXP 27
7678: PPUSH
7679: LD_STRING D5-Ar1-1
7681: PPUSH
7682: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
7686: LD_EXP 26
7690: PPUSH
7691: LD_STRING D5-Diet-1
7693: PPUSH
7694: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
7698: LD_EXP 27
7702: PPUSH
7703: LD_STRING D5-Ar1-2
7705: PPUSH
7706: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
7710: LD_EXP 26
7714: PPUSH
7715: LD_STRING D5-Diet-2
7717: PPUSH
7718: CALL_OW 88
// DialogueOff ;
7722: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
7726: LD_INT 35
7728: PPUSH
7729: CALL_OW 67
// until tick > 10 10$00 ;
7733: LD_OWVAR 1
7737: PUSH
7738: LD_INT 21000
7740: GREATER
7741: IFFALSE 7726
// wait ( 1 1$30 ) ;
7743: LD_INT 3150
7745: PPUSH
7746: CALL_OW 67
// if arabianTrait = 0 then
7750: LD_EXP 49
7754: PUSH
7755: LD_INT 0
7757: EQUAL
7758: IFFALSE 7804
// begin arabianTrait = 1 ;
7760: LD_ADDR_EXP 49
7764: PUSH
7765: LD_INT 1
7767: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
7768: LD_INT 2
7770: PPUSH
7771: LD_INT 3
7773: PPUSH
7774: LD_INT 1
7776: PPUSH
7777: LD_INT 1
7779: PPUSH
7780: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
7784: LD_INT 2
7786: PPUSH
7787: LD_INT 6
7789: PPUSH
7790: LD_INT 1
7792: PPUSH
7793: LD_INT 1
7795: PPUSH
7796: CALL_OW 80
// PrepareArabianTrait ;
7800: CALL 7807 0 0
// end ; end ;
7804: PPOPN 2
7806: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding ; begin
7807: LD_INT 0
7809: PPUSH
7810: PPUSH
7811: PPUSH
7812: PPUSH
7813: PPUSH
7814: PPUSH
7815: PPUSH
7816: PPUSH
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
7817: LD_ADDR_VAR 0 6
7821: PUSH
7822: LD_INT 22
7824: PUSH
7825: LD_INT 2
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PUSH
7832: LD_INT 2
7834: PUSH
7835: LD_INT 25
7837: PUSH
7838: LD_INT 4
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 25
7847: PUSH
7848: LD_INT 2
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: LD_INT 25
7857: PUSH
7858: LD_INT 3
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PPUSH
7875: CALL_OW 69
7879: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
7880: LD_ADDR_VAR 0 5
7884: PUSH
7885: LD_INT 22
7887: PUSH
7888: LD_INT 2
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: PUSH
7895: LD_INT 21
7897: PUSH
7898: LD_INT 1
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 2
7907: PUSH
7908: LD_INT 25
7910: PUSH
7911: LD_INT 1
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PUSH
7918: LD_INT 25
7920: PUSH
7921: LD_INT 8
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 25
7930: PUSH
7931: LD_INT 15
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: LIST
7948: PPUSH
7949: CALL_OW 69
7953: PUSH
7954: LD_EXP 26
7958: PUSH
7959: EMPTY
7960: LIST
7961: DIFF
7962: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
7963: LD_ADDR_VAR 0 7
7967: PUSH
7968: LD_INT 22
7970: PUSH
7971: LD_INT 2
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PUSH
7978: LD_INT 30
7980: PUSH
7981: LD_INT 5
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: PPUSH
7992: CALL_OW 69
7996: PUSH
7997: LD_INT 1
7999: ARRAY
8000: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
8001: LD_VAR 0 6
8005: PPUSH
8006: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
8010: LD_VAR 0 5
8014: PPUSH
8015: CALL_OW 122
// wait ( 0 0$3 ) ;
8019: LD_INT 105
8021: PPUSH
8022: CALL_OW 67
// AddComEnterUnit ( arCivilian , barracks ) ;
8026: LD_VAR 0 6
8030: PPUSH
8031: LD_VAR 0 7
8035: PPUSH
8036: CALL_OW 180
// AddComChangeProfession ( arCivilian , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
8040: LD_VAR 0 6
8044: PPUSH
8045: LD_INT 1
8047: PUSH
8048: LD_INT 8
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 1
8057: PPUSH
8058: LD_INT 2
8060: PPUSH
8061: CALL_OW 12
8065: ARRAY
8066: PPUSH
8067: CALL_OW 183
// AddComExitBuilding ( arCivilian ) ;
8071: LD_VAR 0 6
8075: PPUSH
8076: CALL_OW 182
// wait ( 0 0$1 ) ;
8080: LD_INT 35
8082: PPUSH
8083: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
8087: LD_INT 76
8089: PPUSH
8090: LD_INT 19
8092: PPUSH
8093: CALL_OW 84
// DialogueOn ;
8097: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8101: LD_INT 22
8103: PUSH
8104: LD_INT 1
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: PUSH
8111: LD_INT 26
8113: PUSH
8114: LD_INT 1
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: PUSH
8121: LD_INT 2
8123: PUSH
8124: LD_INT 25
8126: PUSH
8127: LD_INT 1
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PUSH
8134: LD_INT 25
8136: PUSH
8137: LD_INT 2
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: PUSH
8144: LD_INT 25
8146: PUSH
8147: LD_INT 3
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: LD_INT 25
8156: PUSH
8157: LD_INT 4
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PUSH
8164: LD_INT 25
8166: PUSH
8167: LD_INT 5
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PUSH
8174: EMPTY
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: LIST
8186: PPUSH
8187: CALL_OW 69
8191: PPUSH
8192: LD_STRING D8-Sol1-1
8194: PPUSH
8195: LD_STRING D8-Sol1-1
8197: PPUSH
8198: CALL 10901 0 3
// if IsOK ( DeltaDoctor ) then
8202: LD_EXP 17
8206: PPUSH
8207: CALL_OW 302
8211: IFFALSE 8227
// Say ( DeltaDoctor , D8-Sci1-1 ) else
8213: LD_EXP 17
8217: PPUSH
8218: LD_STRING D8-Sci1-1
8220: PPUSH
8221: CALL_OW 88
8225: GO 8328
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8227: LD_INT 22
8229: PUSH
8230: LD_INT 1
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: PUSH
8237: LD_INT 26
8239: PUSH
8240: LD_INT 1
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: PUSH
8247: LD_INT 2
8249: PUSH
8250: LD_INT 25
8252: PUSH
8253: LD_INT 1
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 25
8262: PUSH
8263: LD_INT 2
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PUSH
8270: LD_INT 25
8272: PUSH
8273: LD_INT 3
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PUSH
8280: LD_INT 25
8282: PUSH
8283: LD_INT 4
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PUSH
8290: LD_INT 25
8292: PUSH
8293: LD_INT 5
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: LIST
8312: PPUSH
8313: CALL_OW 69
8317: PPUSH
8318: LD_STRING D8-Sol1-1
8320: PPUSH
8321: LD_STRING D8-Sol1-1
8323: PPUSH
8324: CALL 10901 0 3
// Say ( JMM , D8-JMM-1 ) ;
8328: LD_EXP 1
8332: PPUSH
8333: LD_STRING D8-JMM-1
8335: PPUSH
8336: CALL_OW 88
// DialogueOff ;
8340: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
8344: LD_INT 2
8346: PPUSH
8347: LD_INT 2
8349: PPUSH
8350: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
8354: LD_INT 1
8356: PPUSH
8357: LD_INT 2
8359: PPUSH
8360: LD_INT 2
8362: PPUSH
8363: LD_INT 1
8365: PPUSH
8366: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
8370: LD_INT 3
8372: PPUSH
8373: LD_INT 2
8375: PPUSH
8376: LD_INT 1
8378: PPUSH
8379: LD_INT 1
8381: PPUSH
8382: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
8386: LD_STRING M4
8388: PPUSH
8389: CALL_OW 337
// wait ( 0 0$1 ) ;
8393: LD_INT 35
8395: PPUSH
8396: CALL_OW 67
// if IsLive ( Khatam ) then
8400: LD_EXP 14
8404: PPUSH
8405: CALL_OW 300
8409: IFFALSE 8423
// DoNotAttack ( 2 , Khatam ) ;
8411: LD_INT 2
8413: PPUSH
8414: LD_EXP 14
8418: PPUSH
8419: CALL_OW 471
// wait ( 0 0$1 ) ;
8423: LD_INT 35
8425: PPUSH
8426: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
8430: LD_ADDR_VAR 0 8
8434: PUSH
8435: LD_INT 22
8437: PUSH
8438: LD_INT 1
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PUSH
8445: LD_INT 21
8447: PUSH
8448: LD_INT 3
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: PPUSH
8459: CALL_OW 69
8463: PPUSH
8464: LD_VAR 0 5
8468: PUSH
8469: LD_INT 1
8471: ARRAY
8472: PPUSH
8473: CALL_OW 74
8477: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
8478: LD_VAR 0 5
8482: PPUSH
8483: LD_INT 25
8485: PUSH
8486: LD_INT 1
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PPUSH
8493: CALL_OW 72
8497: PUSH
8498: LD_INT 1
8500: ARRAY
8501: PPUSH
8502: LD_VAR 0 8
8506: PPUSH
8507: CALL_OW 250
8511: PPUSH
8512: LD_VAR 0 8
8516: PPUSH
8517: CALL_OW 251
8521: PPUSH
8522: LD_VAR 0 8
8526: PPUSH
8527: CALL_OW 192
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
8531: LD_VAR 0 5
8535: PPUSH
8536: LD_INT 84
8538: PPUSH
8539: LD_INT 22
8541: PPUSH
8542: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
8546: LD_VAR 0 5
8550: PPUSH
8551: LD_INT 82
8553: PPUSH
8554: LD_INT 5
8556: PPUSH
8557: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
8561: LD_VAR 0 5
8565: PPUSH
8566: LD_INT 95
8568: PPUSH
8569: LD_INT 12
8571: PPUSH
8572: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
8576: LD_VAR 0 5
8580: PPUSH
8581: LD_INT 102
8583: PPUSH
8584: LD_INT 11
8586: PPUSH
8587: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
8591: LD_VAR 0 5
8595: PPUSH
8596: LD_INT 116
8598: PPUSH
8599: LD_INT 15
8601: PPUSH
8602: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
8606: LD_VAR 0 5
8610: PPUSH
8611: LD_INT 140
8613: PPUSH
8614: LD_INT 25
8616: PPUSH
8617: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
8621: LD_VAR 0 5
8625: PPUSH
8626: LD_INT 160
8628: PPUSH
8629: LD_INT 56
8631: PPUSH
8632: CALL_OW 174
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8636: LD_ADDR_VAR 0 5
8640: PUSH
8641: LD_INT 22
8643: PUSH
8644: LD_INT 2
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: LD_INT 21
8653: PUSH
8654: LD_INT 1
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: PUSH
8661: LD_INT 2
8663: PUSH
8664: LD_INT 25
8666: PUSH
8667: LD_INT 1
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: LD_INT 25
8676: PUSH
8677: LD_INT 8
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PUSH
8684: LD_INT 25
8686: PUSH
8687: LD_INT 15
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: LIST
8704: PPUSH
8705: CALL_OW 69
8709: PUSH
8710: LD_EXP 26
8714: PUSH
8715: EMPTY
8716: LIST
8717: DIFF
8718: ST_TO_ADDR
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
8719: LD_ADDR_VAR 0 6
8723: PUSH
8724: LD_INT 22
8726: PUSH
8727: LD_INT 2
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PUSH
8734: LD_INT 21
8736: PUSH
8737: LD_INT 1
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PUSH
8744: LD_INT 2
8746: PUSH
8747: LD_INT 25
8749: PUSH
8750: LD_INT 2
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: PUSH
8757: LD_INT 25
8759: PUSH
8760: LD_INT 3
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: PUSH
8767: LD_INT 25
8769: PUSH
8770: LD_INT 4
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: PUSH
8777: LD_INT 25
8779: PUSH
8780: LD_INT 12
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: PUSH
8787: LD_INT 25
8789: PUSH
8790: LD_INT 16
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: LIST
8809: PPUSH
8810: CALL_OW 69
8814: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
8815: LD_ADDR_VAR 0 6
8819: PUSH
8820: LD_VAR 0 6
8824: PUSH
8825: LD_EXP 26
8829: ADD
8830: ST_TO_ADDR
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
8831: LD_VAR 0 5
8835: PPUSH
8836: LD_INT 189
8838: PPUSH
8839: LD_INT 79
8841: PPUSH
8842: CALL_OW 174
// if UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) then
8846: LD_VAR 0 5
8850: PPUSH
8851: LD_INT 25
8853: PUSH
8854: LD_INT 15
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: PPUSH
8861: CALL_OW 72
8865: IFFALSE 8906
// ComEnterUnit ( UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) [ 1 ] , HexInfo ( 84 , 21 ) ) ;
8867: LD_VAR 0 5
8871: PPUSH
8872: LD_INT 25
8874: PUSH
8875: LD_INT 15
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PPUSH
8882: CALL_OW 72
8886: PUSH
8887: LD_INT 1
8889: ARRAY
8890: PPUSH
8891: LD_INT 84
8893: PPUSH
8894: LD_INT 21
8896: PPUSH
8897: CALL_OW 428
8901: PPUSH
8902: CALL_OW 120
// wait ( 0 0$4 ) ;
8906: LD_INT 140
8908: PPUSH
8909: CALL_OW 67
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
8913: LD_VAR 0 6
8917: PPUSH
8918: LD_INT 88
8920: PPUSH
8921: LD_INT 8
8923: PPUSH
8924: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
8928: LD_VAR 0 6
8932: PPUSH
8933: LD_INT 102
8935: PPUSH
8936: LD_INT 10
8938: PPUSH
8939: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
8943: LD_VAR 0 6
8947: PPUSH
8948: LD_INT 116
8950: PPUSH
8951: LD_INT 15
8953: PPUSH
8954: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
8958: LD_VAR 0 6
8962: PPUSH
8963: LD_INT 140
8965: PPUSH
8966: LD_INT 25
8968: PPUSH
8969: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
8973: LD_VAR 0 6
8977: PPUSH
8978: LD_INT 160
8980: PPUSH
8981: LD_INT 56
8983: PPUSH
8984: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
8988: LD_VAR 0 6
8992: PPUSH
8993: LD_INT 189
8995: PPUSH
8996: LD_INT 79
8998: PPUSH
8999: CALL_OW 171
// arabianAttackersAI = 1 ;
9003: LD_ADDR_EXP 46
9007: PUSH
9008: LD_INT 1
9010: ST_TO_ADDR
// if IsOk ( Gary ) then
9011: LD_EXP 10
9015: PPUSH
9016: CALL_OW 302
9020: IFFALSE 9034
// Say ( Gary , D8a-Gary-1 ) ;
9022: LD_EXP 10
9026: PPUSH
9027: LD_STRING D8a-Gary-1
9029: PPUSH
9030: CALL_OW 88
// wait ( 0 0$5 ) ;
9034: LD_INT 175
9036: PPUSH
9037: CALL_OW 67
// if IsOK ( Khatam ) then
9041: LD_EXP 14
9045: PPUSH
9046: CALL_OW 302
9050: IFFALSE 9586
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
9052: LD_ADDR_VAR 0 3
9056: PUSH
9057: LD_INT 22
9059: PUSH
9060: LD_INT 1
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: PUSH
9067: LD_INT 2
9069: PUSH
9070: LD_INT 25
9072: PUSH
9073: LD_INT 1
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: PUSH
9080: LD_INT 25
9082: PUSH
9083: LD_INT 2
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: LD_INT 25
9092: PUSH
9093: LD_INT 3
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PUSH
9100: LD_INT 25
9102: PUSH
9103: LD_INT 4
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: PUSH
9110: LD_INT 25
9112: PUSH
9113: LD_INT 5
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 25
9122: PUSH
9123: LD_INT 8
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PPUSH
9143: CALL_OW 69
9147: PUSH
9148: LD_EXP 1
9152: PUSH
9153: LD_EXP 2
9157: PUSH
9158: LD_EXP 3
9162: PUSH
9163: LD_EXP 4
9167: PUSH
9168: LD_EXP 5
9172: PUSH
9173: LD_EXP 6
9177: PUSH
9178: LD_EXP 7
9182: PUSH
9183: LD_EXP 8
9187: PUSH
9188: LD_EXP 9
9192: PUSH
9193: LD_EXP 10
9197: PUSH
9198: LD_EXP 11
9202: PUSH
9203: LD_EXP 12
9207: PUSH
9208: LD_EXP 13
9212: PUSH
9213: LD_EXP 14
9217: PUSH
9218: LD_EXP 15
9222: PUSH
9223: LD_EXP 16
9227: PUSH
9228: LD_EXP 17
9232: PUSH
9233: LD_EXP 19
9237: PUSH
9238: LD_EXP 24
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: DIFF
9264: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
9265: LD_EXP 14
9269: PPUSH
9270: LD_INT 8
9272: PPUSH
9273: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
9277: LD_EXP 14
9281: PPUSH
9282: CALL_OW 122
// wait ( 0 0$1 ) ;
9286: LD_INT 35
9288: PPUSH
9289: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
9293: LD_EXP 14
9297: PPUSH
9298: CALL_OW 121
// wait ( 0 0$1 ) ;
9302: LD_INT 35
9304: PPUSH
9305: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
9309: LD_EXP 14
9313: PPUSH
9314: LD_INT 7
9316: PPUSH
9317: CALL_OW 113
// if not tmp then
9321: LD_VAR 0 3
9325: NOT
9326: IFFALSE 9330
// exit ;
9328: GO 9586
// DialogueOn ;
9330: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
9334: LD_VAR 0 3
9338: PUSH
9339: LD_INT 1
9341: ARRAY
9342: PPUSH
9343: CALL_OW 258
9347: PUSH
9348: LD_INT 1
9350: EQUAL
9351: IFFALSE 9371
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
9353: LD_VAR 0 3
9357: PUSH
9358: LD_INT 1
9360: ARRAY
9361: PPUSH
9362: LD_STRING D8b-Sol1-1
9364: PPUSH
9365: CALL_OW 88
9369: GO 9387
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
9371: LD_VAR 0 3
9375: PUSH
9376: LD_INT 1
9378: ARRAY
9379: PPUSH
9380: LD_STRING D8b-FSol1-1
9382: PPUSH
9383: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
9387: LD_EXP 14
9391: PPUSH
9392: LD_STRING D8b-Khat-1
9394: PPUSH
9395: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9399: LD_VAR 0 3
9403: PUSH
9404: LD_INT 1
9406: ARRAY
9407: PPUSH
9408: CALL_OW 258
9412: PUSH
9413: LD_INT 1
9415: EQUAL
9416: IFFALSE 9436
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
9418: LD_VAR 0 3
9422: PUSH
9423: LD_INT 1
9425: ARRAY
9426: PPUSH
9427: LD_STRING D8b-Sol1-2
9429: PPUSH
9430: CALL_OW 88
9434: GO 9452
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
9436: LD_VAR 0 3
9440: PUSH
9441: LD_INT 1
9443: ARRAY
9444: PPUSH
9445: LD_STRING D8b-FSol1-2
9447: PPUSH
9448: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
9452: LD_EXP 14
9456: PPUSH
9457: LD_STRING D8b-Khat-2
9459: PPUSH
9460: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9464: LD_VAR 0 3
9468: PUSH
9469: LD_INT 1
9471: ARRAY
9472: PPUSH
9473: CALL_OW 258
9477: PUSH
9478: LD_INT 1
9480: EQUAL
9481: IFFALSE 9501
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
9483: LD_VAR 0 3
9487: PUSH
9488: LD_INT 1
9490: ARRAY
9491: PPUSH
9492: LD_STRING D8b-Sol1-3
9494: PPUSH
9495: CALL_OW 88
9499: GO 9517
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
9501: LD_VAR 0 3
9505: PUSH
9506: LD_INT 1
9508: ARRAY
9509: PPUSH
9510: LD_STRING D8b-FSol1-3
9512: PPUSH
9513: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
9517: LD_EXP 14
9521: PPUSH
9522: LD_STRING D8b-Khat-3
9524: PPUSH
9525: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9529: LD_VAR 0 3
9533: PUSH
9534: LD_INT 1
9536: ARRAY
9537: PPUSH
9538: CALL_OW 258
9542: PUSH
9543: LD_INT 1
9545: EQUAL
9546: IFFALSE 9566
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
9548: LD_VAR 0 3
9552: PUSH
9553: LD_INT 1
9555: ARRAY
9556: PPUSH
9557: LD_STRING D8b-Sol1-4
9559: PPUSH
9560: CALL_OW 88
9564: GO 9582
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
9566: LD_VAR 0 3
9570: PUSH
9571: LD_INT 1
9573: ARRAY
9574: PPUSH
9575: LD_STRING D8b-FSol1-4
9577: PPUSH
9578: CALL_OW 88
// DialogueOff ;
9582: CALL_OW 7
// end ; end ;
9586: LD_VAR 0 1
9590: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
9591: LD_INT 7
9593: PPUSH
9594: LD_INT 22
9596: PUSH
9597: LD_INT 2
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PPUSH
9604: CALL_OW 70
9608: PUSH
9609: LD_INT 0
9611: GREATER
9612: PUSH
9613: LD_EXP 14
9617: PPUSH
9618: LD_INT 7
9620: PPUSH
9621: CALL_OW 308
9625: OR
9626: IFFALSE 9833
9628: GO 9630
9630: DISABLE
9631: LD_INT 0
9633: PPUSH
// begin enable ;
9634: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
9635: LD_ADDR_VAR 0 1
9639: PUSH
9640: LD_INT 7
9642: PPUSH
9643: LD_INT 22
9645: PUSH
9646: LD_INT 2
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PPUSH
9653: CALL_OW 70
9657: PUSH
9658: FOR_IN
9659: IFFALSE 9800
// begin if GetClass ( i ) = 4 then
9661: LD_VAR 0 1
9665: PPUSH
9666: CALL_OW 257
9670: PUSH
9671: LD_INT 4
9673: EQUAL
9674: IFFALSE 9686
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
9676: LD_INT 1
9678: PPUSH
9679: LD_STRING 10_ScientistsEscape_1
9681: PPUSH
9682: CALL_OW 39
// if i = Dietrich then
9686: LD_VAR 0 1
9690: PUSH
9691: LD_EXP 26
9695: EQUAL
9696: IFFALSE 9706
// GensherStatus = 1 ;
9698: LD_ADDR_EXP 52
9702: PUSH
9703: LD_INT 1
9705: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
9706: LD_VAR 0 1
9710: PPUSH
9711: CALL_OW 257
9715: PUSH
9716: LD_INT 1
9718: EQUAL
9719: PUSH
9720: LD_VAR 0 1
9724: PPUSH
9725: CALL_OW 257
9729: PUSH
9730: LD_INT 2
9732: EQUAL
9733: OR
9734: PUSH
9735: LD_VAR 0 1
9739: PPUSH
9740: CALL_OW 257
9744: PUSH
9745: LD_INT 3
9747: EQUAL
9748: OR
9749: PUSH
9750: LD_VAR 0 1
9754: PPUSH
9755: CALL_OW 257
9759: PUSH
9760: LD_INT 4
9762: EQUAL
9763: OR
9764: PUSH
9765: LD_VAR 0 1
9769: PPUSH
9770: CALL_OW 257
9774: PUSH
9775: LD_INT 8
9777: EQUAL
9778: OR
9779: IFFALSE 9789
// arabianEscape = 1 ;
9781: LD_ADDR_EXP 47
9785: PUSH
9786: LD_INT 1
9788: ST_TO_ADDR
// RemoveUnit ( i ) ;
9789: LD_VAR 0 1
9793: PPUSH
9794: CALL_OW 64
// end ;
9798: GO 9658
9800: POP
9801: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
9802: LD_EXP 14
9806: PPUSH
9807: LD_INT 7
9809: PPUSH
9810: CALL_OW 308
9814: IFFALSE 9833
// begin KhatamStatus = 1 ;
9816: LD_ADDR_EXP 53
9820: PUSH
9821: LD_INT 1
9823: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
9824: LD_EXP 14
9828: PPUSH
9829: CALL_OW 64
// end ; end ;
9833: PPOPN 1
9835: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
9836: LD_INT 22
9838: PUSH
9839: LD_INT 2
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 21
9848: PUSH
9849: LD_INT 1
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: PPUSH
9860: CALL_OW 69
9864: PUSH
9865: LD_INT 0
9867: EQUAL
9868: PUSH
9869: LD_INT 22
9871: PUSH
9872: LD_INT 4
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PUSH
9879: LD_INT 21
9881: PUSH
9882: LD_INT 1
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PPUSH
9893: CALL_OW 69
9897: PUSH
9898: LD_INT 0
9900: EQUAL
9901: AND
9902: IFFALSE 9915
9904: GO 9906
9906: DISABLE
// arabianDefeated = 1 ;
9907: LD_ADDR_EXP 48
9911: PUSH
9912: LD_INT 1
9914: ST_TO_ADDR
9915: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
9916: LD_INT 54
9918: PPUSH
9919: LD_INT 1
9921: PPUSH
9922: CALL_OW 321
9926: PUSH
9927: LD_INT 2
9929: EQUAL
9930: PUSH
9931: LD_INT 55
9933: PPUSH
9934: LD_INT 1
9936: PPUSH
9937: CALL_OW 321
9941: PUSH
9942: LD_INT 2
9944: EQUAL
9945: AND
9946: PUSH
9947: LD_INT 21
9949: PPUSH
9950: LD_INT 1
9952: PPUSH
9953: CALL_OW 321
9957: PUSH
9958: LD_INT 2
9960: EQUAL
9961: AND
9962: PUSH
9963: LD_INT 22
9965: PPUSH
9966: LD_INT 1
9968: PPUSH
9969: CALL_OW 321
9973: PUSH
9974: LD_INT 2
9976: EQUAL
9977: AND
9978: PUSH
9979: LD_INT 12
9981: PPUSH
9982: LD_INT 1
9984: PPUSH
9985: CALL_OW 321
9989: PUSH
9990: LD_INT 2
9992: EQUAL
9993: AND
9994: PUSH
9995: LD_INT 32
9997: PPUSH
9998: LD_INT 1
10000: PPUSH
10001: CALL_OW 321
10005: PUSH
10006: LD_INT 2
10008: EQUAL
10009: AND
10010: PUSH
10011: LD_EXP 63
10015: PUSH
10016: LD_INT 0
10018: EQUAL
10019: AND
10020: PUSH
10021: LD_EXP 49
10025: PUSH
10026: LD_INT 0
10028: EQUAL
10029: AND
10030: PUSH
10031: LD_OWVAR 1
10035: PUSH
10036: LD_INT 31500
10038: GREATEREQUAL
10039: AND
10040: IFFALSE 10057
10042: GO 10044
10044: DISABLE
// begin arabianTrait = 1 ;
10045: LD_ADDR_EXP 49
10049: PUSH
10050: LD_INT 1
10052: ST_TO_ADDR
// PrepareArabianTrait ;
10053: CALL 7807 0 0
// end ;
10057: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
10058: LD_EXP 29
10062: PUSH
10063: LD_STRING 02_mikhailStatus_1
10065: PPUSH
10066: LD_INT 0
10068: PPUSH
10069: CALL_OW 30
10073: PUSH
10074: LD_INT 1
10076: EQUAL
10077: AND
10078: PUSH
10079: LD_INT 22
10081: PUSH
10082: LD_INT 5
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: PPUSH
10089: CALL_OW 69
10093: PUSH
10094: LD_INT 0
10096: EQUAL
10097: AND
10098: PUSH
10099: LD_INT 22
10101: PUSH
10102: LD_INT 2
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: PUSH
10109: LD_INT 21
10111: PUSH
10112: LD_INT 1
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PPUSH
10123: CALL_OW 69
10127: PUSH
10128: LD_INT 0
10130: EQUAL
10131: PUSH
10132: LD_EXP 49
10136: PUSH
10137: LD_INT 0
10139: EQUAL
10140: OR
10141: AND
10142: IFFALSE 10151
10144: GO 10146
10146: DISABLE
// PrepareCornell ;
10147: CALL 3349 0 0
10151: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
10152: LD_INT 22
10154: PUSH
10155: LD_INT 1
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PPUSH
10162: CALL_OW 69
10166: PPUSH
10167: LD_EXP 19
10171: PPUSH
10172: CALL_OW 74
10176: PPUSH
10177: LD_EXP 19
10181: PPUSH
10182: CALL_OW 296
10186: PUSH
10187: LD_INT 9
10189: LESS
10190: IFFALSE 10411
10192: GO 10194
10194: DISABLE
// begin InGameOn ;
10195: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
10199: LD_EXP 19
10203: PPUSH
10204: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
10208: LD_EXP 19
10212: PPUSH
10213: LD_STRING D7-Corn-1
10215: PPUSH
10216: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
10220: LD_INT 22
10222: PUSH
10223: LD_INT 1
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PUSH
10230: LD_INT 2
10232: PUSH
10233: LD_INT 25
10235: PUSH
10236: LD_INT 1
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PUSH
10243: LD_INT 25
10245: PUSH
10246: LD_INT 2
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PUSH
10253: LD_INT 25
10255: PUSH
10256: LD_INT 3
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 25
10265: PUSH
10266: LD_INT 4
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PUSH
10273: LD_INT 25
10275: PUSH
10276: LD_INT 5
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PPUSH
10295: CALL_OW 69
10299: PPUSH
10300: LD_STRING D7-Sol1-1
10302: PPUSH
10303: LD_STRING D7-FSol1-1
10305: PPUSH
10306: CALL 10901 0 3
// CenterNowOnUnits ( Cornell ) ;
10310: LD_EXP 19
10314: PPUSH
10315: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
10319: LD_EXP 19
10323: PPUSH
10324: LD_STRING D7-Corn-2
10326: PPUSH
10327: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
10331: LD_EXP 1
10335: PPUSH
10336: LD_STRING D7-JMM-2
10338: PPUSH
10339: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
10343: LD_EXP 19
10347: PPUSH
10348: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
10352: LD_EXP 19
10356: PPUSH
10357: LD_STRING D7-Corn-3
10359: PPUSH
10360: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
10364: LD_EXP 19
10368: PPUSH
10369: LD_INT 250
10371: PPUSH
10372: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
10376: LD_EXP 19
10380: PPUSH
10381: LD_INT 1
10383: PPUSH
10384: CALL_OW 235
// wait ( 0 0$1 ) ;
10388: LD_INT 35
10390: PPUSH
10391: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
10395: LD_EXP 1
10399: PPUSH
10400: LD_STRING D7-JMM-3
10402: PPUSH
10403: CALL_OW 88
// InGameOff ;
10407: CALL_OW 9
// end ;
10411: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
10412: LD_EXP 19
10416: PPUSH
10417: CALL_OW 255
10421: PUSH
10422: LD_INT 1
10424: EQUAL
10425: PUSH
10426: LD_EXP 19
10430: PPUSH
10431: CALL_OW 256
10435: PUSH
10436: LD_INT 350
10438: GREATER
10439: AND
10440: IFFALSE 10633
10442: GO 10444
10444: DISABLE
// begin DialogueOn ;
10445: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
10449: LD_EXP 1
10453: PPUSH
10454: LD_STRING D7a-JMM-1
10456: PPUSH
10457: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
10461: LD_EXP 19
10465: PPUSH
10466: LD_STRING D7a-Corn-1
10468: PPUSH
10469: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
10473: LD_EXP 1
10477: PPUSH
10478: LD_STRING D7a-JMM-2
10480: PPUSH
10481: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
10485: LD_EXP 19
10489: PPUSH
10490: LD_STRING D7a-Corn-2
10492: PPUSH
10493: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
10497: LD_EXP 1
10501: PPUSH
10502: LD_STRING D7a-JMM-3
10504: PPUSH
10505: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
10509: LD_EXP 19
10513: PPUSH
10514: LD_STRING D7a-Corn-3
10516: PPUSH
10517: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
10521: LD_EXP 1
10525: PPUSH
10526: LD_STRING D7a-JMM-4
10528: PPUSH
10529: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
10533: LD_EXP 19
10537: PPUSH
10538: LD_STRING D7a-Corn-4
10540: PPUSH
10541: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
10545: LD_EXP 1
10549: PPUSH
10550: LD_STRING D7a-JMM-5
10552: PPUSH
10553: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
10557: LD_EXP 19
10561: PPUSH
10562: LD_STRING D7a-Corn-5
10564: PPUSH
10565: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
10569: LD_EXP 1
10573: PPUSH
10574: LD_STRING D7a-JMM-6
10576: PPUSH
10577: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
10581: LD_EXP 19
10585: PPUSH
10586: LD_STRING D7a-Corn-6
10588: PPUSH
10589: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
10593: LD_EXP 1
10597: PPUSH
10598: LD_STRING D7a-JMM-7
10600: PPUSH
10601: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
10605: LD_EXP 19
10609: PPUSH
10610: LD_STRING D7a-Corn-7
10612: PPUSH
10613: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
10617: LD_EXP 1
10621: PPUSH
10622: LD_STRING D7a-JMM-8
10624: PPUSH
10625: CALL_OW 88
// DialogueOff ;
10629: CALL_OW 7
// end ;
10633: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
10634: LD_EXP 61
10638: PUSH
10639: LD_EXP 1
10643: PPUSH
10644: CALL_OW 302
10648: PUSH
10649: LD_EXP 5
10653: PPUSH
10654: CALL_OW 302
10658: OR
10659: AND
10660: IFFALSE 10750
10662: GO 10664
10664: DISABLE
// begin Wait ( 0 0$2 ) ;
10665: LD_INT 70
10667: PPUSH
10668: CALL_OW 67
// DialogueOn ;
10672: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
10676: LD_EXP 61
10680: PUSH
10681: LD_INT 1
10683: ARRAY
10684: PPUSH
10685: LD_EXP 61
10689: PUSH
10690: LD_INT 2
10692: ARRAY
10693: PPUSH
10694: CALL_OW 86
// if IsOk ( Cyrus ) then
10698: LD_EXP 5
10702: PPUSH
10703: CALL_OW 302
10707: IFFALSE 10723
// Say ( Cyrus , D10-Cyrus-1 ) else
10709: LD_EXP 5
10713: PPUSH
10714: LD_STRING D10-Cyrus-1
10716: PPUSH
10717: CALL_OW 88
10721: GO 10746
// if IsOk ( JMM ) then
10723: LD_EXP 1
10727: PPUSH
10728: CALL_OW 302
10732: IFFALSE 10746
// Say ( JMM , D10-JMM-1 ) ;
10734: LD_EXP 1
10738: PPUSH
10739: LD_STRING D10-JMM-1
10741: PPUSH
10742: CALL_OW 88
// DialogueOff ;
10746: CALL_OW 7
// end ;
10750: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
10751: LD_INT 12
10753: PPUSH
10754: LD_INT 1
10756: PPUSH
10757: CALL_OW 321
10761: PUSH
10762: LD_INT 2
10764: EQUAL
10765: IFFALSE 10777
10767: GO 10769
10769: DISABLE
// ChangeMissionObjectives ( M2b ) ;
10770: LD_STRING M2b
10772: PPUSH
10773: CALL_OW 337
10777: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
10778: LD_INT 32
10780: PPUSH
10781: LD_INT 1
10783: PPUSH
10784: CALL_OW 321
10788: PUSH
10789: LD_INT 2
10791: EQUAL
10792: IFFALSE 10804
10794: GO 10796
10796: DISABLE
// ChangeMissionObjectives ( M2c ) ;
10797: LD_STRING M2c
10799: PPUSH
10800: CALL_OW 337
10804: END
// every 0 0$1 trigger arabianDefeated = 1 do
10805: LD_EXP 48
10809: PUSH
10810: LD_INT 1
10812: EQUAL
10813: IFFALSE 10825
10815: GO 10817
10817: DISABLE
// ChangeMissionObjectives ( M4a ) ;
10818: LD_STRING M4a
10820: PPUSH
10821: CALL_OW 337
10825: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
10826: LD_INT 54
10828: PPUSH
10829: LD_INT 1
10831: PPUSH
10832: CALL_OW 321
10836: PUSH
10837: LD_INT 2
10839: EQUAL
10840: PUSH
10841: LD_INT 55
10843: PPUSH
10844: LD_INT 1
10846: PPUSH
10847: CALL_OW 321
10851: PUSH
10852: LD_INT 2
10854: EQUAL
10855: AND
10856: PUSH
10857: LD_INT 21
10859: PPUSH
10860: LD_INT 1
10862: PPUSH
10863: CALL_OW 321
10867: PUSH
10868: LD_INT 2
10870: EQUAL
10871: AND
10872: PUSH
10873: LD_INT 22
10875: PPUSH
10876: LD_INT 1
10878: PPUSH
10879: CALL_OW 321
10883: PUSH
10884: LD_INT 2
10886: EQUAL
10887: AND
10888: IFFALSE 10900
10890: GO 10892
10892: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
10893: LD_STRING M2a
10895: PPUSH
10896: CALL_OW 337
10900: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
10901: LD_INT 0
10903: PPUSH
10904: PPUSH
10905: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
10906: LD_ADDR_VAR 0 1
10910: PUSH
10911: LD_VAR 0 1
10915: PUSH
10916: LD_EXP 1
10920: PUSH
10921: LD_EXP 2
10925: PUSH
10926: LD_EXP 3
10930: PUSH
10931: LD_EXP 4
10935: PUSH
10936: LD_EXP 5
10940: PUSH
10941: LD_EXP 6
10945: PUSH
10946: LD_EXP 7
10950: PUSH
10951: LD_EXP 8
10955: PUSH
10956: LD_EXP 9
10960: PUSH
10961: LD_EXP 10
10965: PUSH
10966: LD_EXP 11
10970: PUSH
10971: LD_EXP 12
10975: PUSH
10976: LD_EXP 13
10980: PUSH
10981: LD_EXP 14
10985: PUSH
10986: LD_EXP 15
10990: PUSH
10991: LD_EXP 16
10995: PUSH
10996: LD_EXP 17
11000: PUSH
11001: LD_EXP 18
11005: PUSH
11006: LD_EXP 19
11010: PUSH
11011: LD_EXP 24
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: DIFF
11038: ST_TO_ADDR
// if not characters then
11039: LD_VAR 0 1
11043: NOT
11044: IFFALSE 11048
// exit ;
11046: GO 11194
// rnd = rand ( 1 , characters ) ;
11048: LD_ADDR_VAR 0 6
11052: PUSH
11053: LD_INT 1
11055: PPUSH
11056: LD_VAR 0 1
11060: PPUSH
11061: CALL_OW 12
11065: ST_TO_ADDR
// for i = 1 to characters do
11066: LD_ADDR_VAR 0 5
11070: PUSH
11071: DOUBLE
11072: LD_INT 1
11074: DEC
11075: ST_TO_ADDR
11076: LD_VAR 0 1
11080: PUSH
11081: FOR_TO
11082: IFFALSE 11192
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
11084: LD_VAR 0 5
11088: PUSH
11089: LD_VAR 0 6
11093: EQUAL
11094: PUSH
11095: LD_VAR 0 1
11099: PUSH
11100: LD_VAR 0 5
11104: ARRAY
11105: PPUSH
11106: CALL_OW 258
11110: PUSH
11111: LD_INT 1
11113: EQUAL
11114: AND
11115: IFFALSE 11137
// Say ( characters [ i ] , dialogMID ) ;
11117: LD_VAR 0 1
11121: PUSH
11122: LD_VAR 0 5
11126: ARRAY
11127: PPUSH
11128: LD_VAR 0 2
11132: PPUSH
11133: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
11137: LD_VAR 0 5
11141: PUSH
11142: LD_VAR 0 6
11146: EQUAL
11147: PUSH
11148: LD_VAR 0 1
11152: PUSH
11153: LD_VAR 0 5
11157: ARRAY
11158: PPUSH
11159: CALL_OW 258
11163: PUSH
11164: LD_INT 2
11166: EQUAL
11167: AND
11168: IFFALSE 11190
// Say ( characters [ i ] , dialogFID ) ;
11170: LD_VAR 0 1
11174: PUSH
11175: LD_VAR 0 5
11179: ARRAY
11180: PPUSH
11181: LD_VAR 0 3
11185: PPUSH
11186: CALL_OW 88
// end ;
11190: GO 11081
11192: POP
11193: POP
// end ;
11194: LD_VAR 0 4
11198: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
11199: LD_INT 0
11201: PPUSH
11202: PPUSH
// for i in charactersList do
11203: LD_ADDR_VAR 0 4
11207: PUSH
11208: LD_VAR 0 1
11212: PUSH
11213: FOR_IN
11214: IFFALSE 11232
// SaveCharacters ( i , ident ) ;
11216: LD_VAR 0 4
11220: PPUSH
11221: LD_VAR 0 2
11225: PPUSH
11226: CALL_OW 38
11230: GO 11213
11232: POP
11233: POP
// end ;
11234: LD_VAR 0 3
11238: RET
// export function PrepareDifficulty ; begin
11239: LD_INT 0
11241: PPUSH
// if difficulty = 1 then
11242: LD_OWVAR 67
11246: PUSH
11247: LD_INT 1
11249: EQUAL
11250: IFFALSE 11294
// begin RuSolMinLevel = 3 ;
11252: LD_ADDR_EXP 36
11256: PUSH
11257: LD_INT 3
11259: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
11260: LD_ADDR_EXP 37
11264: PUSH
11265: LD_INT 5
11267: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11268: LD_INT 51
11270: PPUSH
11271: LD_INT 6
11273: PPUSH
11274: LD_INT 2
11276: PPUSH
11277: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11281: LD_INT 51
11283: PPUSH
11284: LD_INT 5
11286: PPUSH
11287: LD_INT 2
11289: PPUSH
11290: CALL_OW 322
// end ; if difficulty = 2 then
11294: LD_OWVAR 67
11298: PUSH
11299: LD_INT 2
11301: EQUAL
11302: IFFALSE 11398
// begin RuSolMinLevel = 5 ;
11304: LD_ADDR_EXP 36
11308: PUSH
11309: LD_INT 5
11311: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
11312: LD_ADDR_EXP 37
11316: PUSH
11317: LD_INT 7
11319: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11320: LD_INT 51
11322: PPUSH
11323: LD_INT 6
11325: PPUSH
11326: LD_INT 2
11328: PPUSH
11329: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11333: LD_INT 57
11335: PPUSH
11336: LD_INT 6
11338: PPUSH
11339: LD_INT 2
11341: PPUSH
11342: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11346: LD_INT 63
11348: PPUSH
11349: LD_INT 6
11351: PPUSH
11352: LD_INT 2
11354: PPUSH
11355: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11359: LD_INT 51
11361: PPUSH
11362: LD_INT 5
11364: PPUSH
11365: LD_INT 2
11367: PPUSH
11368: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
11372: LD_INT 5
11374: PPUSH
11375: LD_INT 2
11377: PPUSH
11378: LD_INT 2
11380: PPUSH
11381: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
11385: LD_INT 5
11387: PPUSH
11388: LD_INT 5
11390: PPUSH
11391: LD_INT 2
11393: PPUSH
11394: CALL_OW 322
// end ; if difficulty = 3 then
11398: LD_OWVAR 67
11402: PUSH
11403: LD_INT 3
11405: EQUAL
11406: IFFALSE 11554
// begin RuSolMinLevel = 6 ;
11408: LD_ADDR_EXP 36
11412: PUSH
11413: LD_INT 6
11415: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
11416: LD_ADDR_EXP 37
11420: PUSH
11421: LD_INT 8
11423: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11424: LD_INT 51
11426: PPUSH
11427: LD_INT 6
11429: PPUSH
11430: LD_INT 2
11432: PPUSH
11433: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11437: LD_INT 57
11439: PPUSH
11440: LD_INT 6
11442: PPUSH
11443: LD_INT 2
11445: PPUSH
11446: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
11450: LD_INT 52
11452: PPUSH
11453: LD_INT 6
11455: PPUSH
11456: LD_INT 2
11458: PPUSH
11459: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
11463: LD_INT 58
11465: PPUSH
11466: LD_INT 6
11468: PPUSH
11469: LD_INT 2
11471: PPUSH
11472: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11476: LD_INT 63
11478: PPUSH
11479: LD_INT 6
11481: PPUSH
11482: LD_INT 2
11484: PPUSH
11485: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
11489: LD_INT 64
11491: PPUSH
11492: LD_INT 6
11494: PPUSH
11495: LD_INT 2
11497: PPUSH
11498: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11502: LD_INT 51
11504: PPUSH
11505: LD_INT 5
11507: PPUSH
11508: LD_INT 2
11510: PPUSH
11511: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
11515: LD_INT 52
11517: PPUSH
11518: LD_INT 5
11520: PPUSH
11521: LD_INT 2
11523: PPUSH
11524: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
11528: LD_INT 66
11530: PPUSH
11531: LD_INT 2
11533: PPUSH
11534: LD_INT 2
11536: PPUSH
11537: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
11541: LD_INT 66
11543: PPUSH
11544: LD_INT 5
11546: PPUSH
11547: LD_INT 2
11549: PPUSH
11550: CALL_OW 322
// end ; end ;
11554: LD_VAR 0 1
11558: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
11559: LD_INT 0
11561: PPUSH
11562: PPUSH
11563: PPUSH
11564: PPUSH
11565: PPUSH
11566: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
11567: LD_ADDR_VAR 0 7
11571: PUSH
11572: LD_INT 43
11574: PUSH
11575: LD_INT 68
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PUSH
11582: LD_INT 43
11584: PUSH
11585: LD_INT 79
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: PUSH
11592: LD_INT 99
11594: PUSH
11595: LD_INT 114
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PUSH
11602: LD_INT 103
11604: PUSH
11605: LD_INT 114
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PUSH
11612: LD_INT 156
11614: PUSH
11615: LD_INT 92
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PUSH
11622: LD_INT 152
11624: PUSH
11625: LD_INT 85
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: ST_TO_ADDR
// for i in sources do
11640: LD_ADDR_VAR 0 3
11644: PUSH
11645: LD_VAR 0 7
11649: PUSH
11650: FOR_IN
11651: IFFALSE 11680
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
11653: LD_VAR 0 3
11657: PUSH
11658: LD_INT 1
11660: ARRAY
11661: PPUSH
11662: LD_VAR 0 3
11666: PUSH
11667: LD_INT 2
11669: ARRAY
11670: PPUSH
11671: LD_INT 3
11673: PPUSH
11674: CALL_OW 441
11678: GO 11650
11680: POP
11681: POP
// case position of 1 :
11682: LD_VAR 0 1
11686: PUSH
11687: LD_INT 1
11689: DOUBLE
11690: EQUAL
11691: IFTRUE 11695
11693: GO 11706
11695: POP
// area := westConv ; 2 :
11696: LD_ADDR_VAR 0 6
11700: PUSH
11701: LD_INT 20
11703: ST_TO_ADDR
11704: GO 11745
11706: LD_INT 2
11708: DOUBLE
11709: EQUAL
11710: IFTRUE 11714
11712: GO 11725
11714: POP
// area := midConv ; 3 :
11715: LD_ADDR_VAR 0 6
11719: PUSH
11720: LD_INT 21
11722: ST_TO_ADDR
11723: GO 11745
11725: LD_INT 3
11727: DOUBLE
11728: EQUAL
11729: IFTRUE 11733
11731: GO 11744
11733: POP
// area := eastConv ; end ;
11734: LD_ADDR_VAR 0 6
11738: PUSH
11739: LD_INT 22
11741: ST_TO_ADDR
11742: GO 11745
11744: POP
// area := AreaToList ( area , 0 ) ;
11745: LD_ADDR_VAR 0 6
11749: PUSH
11750: LD_VAR 0 6
11754: PPUSH
11755: LD_INT 0
11757: PPUSH
11758: CALL_OW 517
11762: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
11763: LD_ADDR_VAR 0 3
11767: PUSH
11768: DOUBLE
11769: LD_INT 1
11771: DEC
11772: ST_TO_ADDR
11773: LD_VAR 0 6
11777: PUSH
11778: LD_INT 1
11780: ARRAY
11781: PUSH
11782: FOR_TO
11783: IFFALSE 11864
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
11785: LD_VAR 0 6
11789: PUSH
11790: LD_INT 1
11792: ARRAY
11793: PUSH
11794: LD_VAR 0 3
11798: ARRAY
11799: PPUSH
11800: LD_VAR 0 6
11804: PUSH
11805: LD_INT 2
11807: ARRAY
11808: PUSH
11809: LD_VAR 0 3
11813: ARRAY
11814: PPUSH
11815: LD_INT 1
11817: PPUSH
11818: LD_INT 1
11820: PPUSH
11821: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
11825: LD_VAR 0 6
11829: PUSH
11830: LD_INT 1
11832: ARRAY
11833: PUSH
11834: LD_VAR 0 3
11838: ARRAY
11839: PPUSH
11840: LD_VAR 0 6
11844: PUSH
11845: LD_INT 2
11847: ARRAY
11848: PUSH
11849: LD_VAR 0 3
11853: ARRAY
11854: PPUSH
11855: LD_INT 1
11857: PPUSH
11858: CALL_OW 331
// end ;
11862: GO 11782
11864: POP
11865: POP
// ruPossition = position ;
11866: LD_ADDR_EXP 41
11870: PUSH
11871: LD_VAR 0 1
11875: ST_TO_ADDR
// if position = 1 then
11876: LD_VAR 0 1
11880: PUSH
11881: LD_INT 1
11883: EQUAL
11884: IFFALSE 12632
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11886: LD_ADDR_VAR 0 4
11890: PUSH
11891: LD_INT 22
11893: PUSH
11894: LD_INT 3
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: PUSH
11901: LD_INT 25
11903: PUSH
11904: LD_INT 2
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PPUSH
11915: CALL_OW 69
11919: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
11920: LD_ADDR_VAR 0 5
11924: PUSH
11925: LD_INT 0
11927: PUSH
11928: LD_INT 49
11930: PUSH
11931: LD_INT 74
11933: PUSH
11934: LD_INT 3
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: PUSH
11943: LD_INT 4
11945: PUSH
11946: LD_INT 73
11948: PUSH
11949: LD_INT 88
11951: PUSH
11952: LD_INT 5
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: PUSH
11961: LD_INT 4
11963: PUSH
11964: LD_INT 56
11966: PUSH
11967: LD_INT 62
11969: PUSH
11970: LD_INT 3
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: PUSH
11979: LD_INT 29
11981: PUSH
11982: LD_INT 43
11984: PUSH
11985: LD_INT 68
11987: PUSH
11988: LD_INT 2
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: PUSH
11997: LD_INT 30
11999: PUSH
12000: LD_INT 43
12002: PUSH
12003: LD_INT 79
12005: PUSH
12006: LD_INT 5
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: PUSH
12015: LD_INT 28
12017: PUSH
12018: LD_INT 60
12020: PUSH
12021: LD_INT 75
12023: PUSH
12024: LD_INT 1
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: PUSH
12033: LD_INT 2
12035: PUSH
12036: LD_INT 50
12038: PUSH
12039: LD_INT 87
12041: PUSH
12042: LD_INT 1
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: PUSH
12051: LD_INT 28
12053: PUSH
12054: LD_INT 45
12056: PUSH
12057: LD_INT 67
12059: PUSH
12060: LD_INT 2
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: PUSH
12069: LD_INT 17
12071: PUSH
12072: LD_INT 47
12074: PUSH
12075: LD_INT 84
12077: PUSH
12078: LD_INT 2
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: PUSH
12087: LD_INT 18
12089: PUSH
12090: LD_INT 46
12092: PUSH
12093: LD_INT 87
12095: PUSH
12096: LD_INT 1
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: PUSH
12105: LD_INT 28
12107: PUSH
12108: LD_INT 41
12110: PUSH
12111: LD_INT 64
12113: PUSH
12114: LD_INT 5
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: PUSH
12123: LD_INT 32
12125: PUSH
12126: LD_INT 75
12128: PUSH
12129: LD_INT 76
12131: PUSH
12132: LD_INT 5
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 32
12143: PUSH
12144: LD_INT 77
12146: PUSH
12147: LD_INT 75
12149: PUSH
12150: LD_INT 5
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: PUSH
12159: LD_INT 32
12161: PUSH
12162: LD_INT 69
12164: PUSH
12165: LD_INT 68
12167: PUSH
12168: LD_INT 3
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: PUSH
12177: LD_INT 32
12179: PUSH
12180: LD_INT 59
12182: PUSH
12183: LD_INT 96
12185: PUSH
12186: LD_INT 5
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 32
12197: PUSH
12198: LD_INT 56
12200: PUSH
12201: LD_INT 96
12203: PUSH
12204: LD_INT 0
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: PUSH
12213: LD_INT 32
12215: PUSH
12216: LD_INT 51
12218: PUSH
12219: LD_INT 61
12221: PUSH
12222: LD_INT 3
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: PUSH
12231: LD_INT 32
12233: PUSH
12234: LD_INT 42
12236: PUSH
12237: LD_INT 60
12239: PUSH
12240: LD_INT 3
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: PUSH
12249: LD_INT 32
12251: PUSH
12252: LD_INT 36
12254: PUSH
12255: LD_INT 58
12257: PUSH
12258: LD_INT 3
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: PUSH
12267: LD_INT 32
12269: PUSH
12270: LD_INT 39
12272: PUSH
12273: LD_INT 59
12275: PUSH
12276: LD_INT 3
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: PUSH
12285: LD_INT 32
12287: PUSH
12288: LD_INT 61
12290: PUSH
12291: LD_INT 64
12293: PUSH
12294: LD_INT 3
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: PUSH
12303: LD_INT 33
12305: PUSH
12306: LD_INT 63
12308: PUSH
12309: LD_INT 90
12311: PUSH
12312: LD_INT 5
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: PUSH
12321: LD_INT 33
12323: PUSH
12324: LD_INT 64
12326: PUSH
12327: LD_INT 88
12329: PUSH
12330: LD_INT 5
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: PUSH
12339: LD_INT 33
12341: PUSH
12342: LD_INT 72
12344: PUSH
12345: LD_INT 82
12347: PUSH
12348: LD_INT 5
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: PUSH
12357: LD_INT 6
12359: PUSH
12360: LD_INT 42
12362: PUSH
12363: LD_INT 74
12365: PUSH
12366: LD_INT 1
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: PUSH
12375: LD_INT 6
12377: PUSH
12378: LD_INT 56
12380: PUSH
12381: LD_INT 77
12383: PUSH
12384: LD_INT 2
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: PUSH
12393: LD_INT 21
12395: PUSH
12396: LD_INT 54
12398: PUSH
12399: LD_INT 91
12401: PUSH
12402: LD_INT 5
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: PUSH
12411: LD_INT 16
12413: PUSH
12414: LD_INT 50
12416: PUSH
12417: LD_INT 83
12419: PUSH
12420: LD_INT 3
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: PUSH
12429: LD_INT 24
12431: PUSH
12432: LD_INT 50
12434: PUSH
12435: LD_INT 90
12437: PUSH
12438: LD_INT 0
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12478: LD_ADDR_VAR 0 3
12482: PUSH
12483: LD_INT 22
12485: PUSH
12486: LD_INT 3
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: LD_INT 3
12495: PUSH
12496: LD_INT 25
12498: PUSH
12499: LD_INT 2
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PPUSH
12514: CALL_OW 69
12518: PUSH
12519: FOR_IN
12520: IFFALSE 12539
// AddComAgressiveMove ( i , 53 , 82 ) ;
12522: LD_VAR 0 3
12526: PPUSH
12527: LD_INT 53
12529: PPUSH
12530: LD_INT 82
12532: PPUSH
12533: CALL_OW 174
12537: GO 12519
12539: POP
12540: POP
// for i := 1 to buildingsTab do
12541: LD_ADDR_VAR 0 3
12545: PUSH
12546: DOUBLE
12547: LD_INT 1
12549: DEC
12550: ST_TO_ADDR
12551: LD_VAR 0 5
12555: PUSH
12556: FOR_TO
12557: IFFALSE 12630
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12559: LD_VAR 0 4
12563: PPUSH
12564: LD_VAR 0 5
12568: PUSH
12569: LD_VAR 0 3
12573: ARRAY
12574: PUSH
12575: LD_INT 1
12577: ARRAY
12578: PPUSH
12579: LD_VAR 0 5
12583: PUSH
12584: LD_VAR 0 3
12588: ARRAY
12589: PUSH
12590: LD_INT 2
12592: ARRAY
12593: PPUSH
12594: LD_VAR 0 5
12598: PUSH
12599: LD_VAR 0 3
12603: ARRAY
12604: PUSH
12605: LD_INT 3
12607: ARRAY
12608: PPUSH
12609: LD_VAR 0 5
12613: PUSH
12614: LD_VAR 0 3
12618: ARRAY
12619: PUSH
12620: LD_INT 4
12622: ARRAY
12623: PPUSH
12624: CALL_OW 205
12628: GO 12556
12630: POP
12631: POP
// end ; if position = 2 then
12632: LD_VAR 0 1
12636: PUSH
12637: LD_INT 2
12639: EQUAL
12640: IFFALSE 13255
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12642: LD_ADDR_VAR 0 4
12646: PUSH
12647: LD_INT 22
12649: PUSH
12650: LD_INT 3
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 25
12659: PUSH
12660: LD_INT 2
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PPUSH
12671: CALL_OW 69
12675: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
12676: LD_ADDR_VAR 0 5
12680: PUSH
12681: LD_INT 0
12683: PUSH
12684: LD_INT 104
12686: PUSH
12687: LD_INT 110
12689: PUSH
12690: LD_INT 5
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: PUSH
12699: LD_INT 4
12701: PUSH
12702: LD_INT 98
12704: PUSH
12705: LD_INT 90
12707: PUSH
12708: LD_INT 3
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: PUSH
12717: LD_INT 29
12719: PUSH
12720: LD_INT 103
12722: PUSH
12723: LD_INT 114
12725: PUSH
12726: LD_INT 2
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: PUSH
12735: LD_INT 30
12737: PUSH
12738: LD_INT 99
12740: PUSH
12741: LD_INT 114
12743: PUSH
12744: LD_INT 3
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: PUSH
12753: LD_INT 28
12755: PUSH
12756: LD_INT 100
12758: PUSH
12759: LD_INT 112
12761: PUSH
12762: LD_INT 1
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: PUSH
12771: LD_INT 2
12773: PUSH
12774: LD_INT 92
12776: PUSH
12777: LD_INT 101
12779: PUSH
12780: LD_INT 0
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: PUSH
12789: LD_INT 28
12791: PUSH
12792: LD_INT 97
12794: PUSH
12795: LD_INT 116
12797: PUSH
12798: LD_INT 5
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: PUSH
12807: LD_INT 17
12809: PUSH
12810: LD_INT 96
12812: PUSH
12813: LD_INT 101
12815: PUSH
12816: LD_INT 4
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: PUSH
12825: LD_INT 18
12827: PUSH
12828: LD_INT 88
12830: PUSH
12831: LD_INT 97
12833: PUSH
12834: LD_INT 2
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: PUSH
12843: LD_INT 28
12845: PUSH
12846: LD_INT 106
12848: PUSH
12849: LD_INT 92
12851: PUSH
12852: LD_INT 2
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: PUSH
12861: LD_INT 32
12863: PUSH
12864: LD_INT 88
12866: PUSH
12867: LD_INT 89
12869: PUSH
12870: LD_INT 2
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: PUSH
12879: LD_INT 32
12881: PUSH
12882: LD_INT 86
12884: PUSH
12885: LD_INT 90
12887: PUSH
12888: LD_INT 2
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: PUSH
12897: LD_INT 32
12899: PUSH
12900: LD_INT 85
12902: PUSH
12903: LD_INT 99
12905: PUSH
12906: LD_INT 2
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: PUSH
12915: LD_INT 32
12917: PUSH
12918: LD_INT 85
12920: PUSH
12921: LD_INT 107
12923: PUSH
12924: LD_INT 1
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: PUSH
12933: LD_INT 33
12935: PUSH
12936: LD_INT 105
12938: PUSH
12939: LD_INT 99
12941: PUSH
12942: LD_INT 1
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 33
12953: PUSH
12954: LD_INT 102
12956: PUSH
12957: LD_INT 92
12959: PUSH
12960: LD_INT 3
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: PUSH
12969: LD_INT 33
12971: PUSH
12972: LD_INT 105
12974: PUSH
12975: LD_INT 92
12977: PUSH
12978: LD_INT 2
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: PUSH
12987: LD_INT 6
12989: PUSH
12990: LD_INT 92
12992: PUSH
12993: LD_INT 110
12995: PUSH
12996: LD_INT 0
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 6
13007: PUSH
13008: LD_INT 103
13010: PUSH
13011: LD_INT 103
13013: PUSH
13014: LD_INT 5
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 21
13025: PUSH
13026: LD_INT 89
13028: PUSH
13029: LD_INT 101
13031: PUSH
13032: LD_INT 1
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: PUSH
13041: LD_INT 16
13043: PUSH
13044: LD_INT 95
13046: PUSH
13047: LD_INT 104
13049: PUSH
13050: LD_INT 4
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: PUSH
13059: LD_INT 24
13061: PUSH
13062: LD_INT 92
13064: PUSH
13065: LD_INT 105
13067: PUSH
13068: LD_INT 0
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13101: LD_ADDR_VAR 0 3
13105: PUSH
13106: LD_INT 22
13108: PUSH
13109: LD_INT 3
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: PUSH
13116: LD_INT 3
13118: PUSH
13119: LD_INT 25
13121: PUSH
13122: LD_INT 2
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PPUSH
13137: CALL_OW 69
13141: PUSH
13142: FOR_IN
13143: IFFALSE 13162
// AddComAgressiveMove ( i , 96 , 99 ) ;
13145: LD_VAR 0 3
13149: PPUSH
13150: LD_INT 96
13152: PPUSH
13153: LD_INT 99
13155: PPUSH
13156: CALL_OW 174
13160: GO 13142
13162: POP
13163: POP
// for i := 1 to buildingsTab do
13164: LD_ADDR_VAR 0 3
13168: PUSH
13169: DOUBLE
13170: LD_INT 1
13172: DEC
13173: ST_TO_ADDR
13174: LD_VAR 0 5
13178: PUSH
13179: FOR_TO
13180: IFFALSE 13253
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13182: LD_VAR 0 4
13186: PPUSH
13187: LD_VAR 0 5
13191: PUSH
13192: LD_VAR 0 3
13196: ARRAY
13197: PUSH
13198: LD_INT 1
13200: ARRAY
13201: PPUSH
13202: LD_VAR 0 5
13206: PUSH
13207: LD_VAR 0 3
13211: ARRAY
13212: PUSH
13213: LD_INT 2
13215: ARRAY
13216: PPUSH
13217: LD_VAR 0 5
13221: PUSH
13222: LD_VAR 0 3
13226: ARRAY
13227: PUSH
13228: LD_INT 3
13230: ARRAY
13231: PPUSH
13232: LD_VAR 0 5
13236: PUSH
13237: LD_VAR 0 3
13241: ARRAY
13242: PUSH
13243: LD_INT 4
13245: ARRAY
13246: PPUSH
13247: CALL_OW 205
13251: GO 13179
13253: POP
13254: POP
// end ; if position = 3 then
13255: LD_VAR 0 1
13259: PUSH
13260: LD_INT 3
13262: EQUAL
13263: IFFALSE 14049
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13265: LD_ADDR_VAR 0 4
13269: PUSH
13270: LD_INT 22
13272: PUSH
13273: LD_INT 3
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PUSH
13280: LD_INT 25
13282: PUSH
13283: LD_INT 2
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: PPUSH
13294: CALL_OW 69
13298: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
13299: LD_ADDR_VAR 0 5
13303: PUSH
13304: LD_INT 0
13306: PUSH
13307: LD_INT 151
13309: PUSH
13310: LD_INT 71
13312: PUSH
13313: LD_INT 4
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 4
13324: PUSH
13325: LD_INT 145
13327: PUSH
13328: LD_INT 53
13330: PUSH
13331: LD_INT 3
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: PUSH
13340: LD_INT 4
13342: PUSH
13343: LD_INT 172
13345: PUSH
13346: LD_INT 102
13348: PUSH
13349: LD_INT 5
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: PUSH
13358: LD_INT 29
13360: PUSH
13361: LD_INT 152
13363: PUSH
13364: LD_INT 85
13366: PUSH
13367: LD_INT 3
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 30
13378: PUSH
13379: LD_INT 156
13381: PUSH
13382: LD_INT 92
13384: PUSH
13385: LD_INT 3
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 28
13396: PUSH
13397: LD_INT 151
13399: PUSH
13400: LD_INT 66
13402: PUSH
13403: LD_INT 4
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 2
13414: PUSH
13415: LD_INT 163
13417: PUSH
13418: LD_INT 95
13420: PUSH
13421: LD_INT 5
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 28
13432: PUSH
13433: LD_INT 149
13435: PUSH
13436: LD_INT 63
13438: PUSH
13439: LD_INT 4
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 17
13450: PUSH
13451: LD_INT 167
13453: PUSH
13454: LD_INT 99
13456: PUSH
13457: LD_INT 5
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 18
13468: PUSH
13469: LD_INT 163
13471: PUSH
13472: LD_INT 98
13474: PUSH
13475: LD_INT 0
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 28
13486: PUSH
13487: LD_INT 154
13489: PUSH
13490: LD_INT 70
13492: PUSH
13493: LD_INT 4
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: PUSH
13502: LD_INT 32
13504: PUSH
13505: LD_INT 155
13507: PUSH
13508: LD_INT 62
13510: PUSH
13511: LD_INT 4
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 32
13522: PUSH
13523: LD_INT 161
13525: PUSH
13526: LD_INT 69
13528: PUSH
13529: LD_INT 4
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 32
13540: PUSH
13541: LD_INT 168
13543: PUSH
13544: LD_INT 78
13546: PUSH
13547: LD_INT 4
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: PUSH
13556: LD_INT 32
13558: PUSH
13559: LD_INT 163
13561: PUSH
13562: LD_INT 80
13564: PUSH
13565: LD_INT 5
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 32
13576: PUSH
13577: LD_INT 136
13579: PUSH
13580: LD_INT 73
13582: PUSH
13583: LD_INT 0
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: PUSH
13592: LD_INT 32
13594: PUSH
13595: LD_INT 157
13597: PUSH
13598: LD_INT 98
13600: PUSH
13601: LD_INT 0
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: PUSH
13610: LD_INT 32
13612: PUSH
13613: LD_INT 150
13615: PUSH
13616: LD_INT 87
13618: PUSH
13619: LD_INT 1
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: PUSH
13628: LD_INT 33
13630: PUSH
13631: LD_INT 171
13633: PUSH
13634: LD_INT 97
13636: PUSH
13637: LD_INT 4
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: PUSH
13646: LD_INT 33
13648: PUSH
13649: LD_INT 168
13651: PUSH
13652: LD_INT 92
13654: PUSH
13655: LD_INT 4
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: PUSH
13664: LD_INT 33
13666: PUSH
13667: LD_INT 166
13669: PUSH
13670: LD_INT 80
13672: PUSH
13673: LD_INT 5
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: PUSH
13682: LD_INT 33
13684: PUSH
13685: LD_INT 141
13687: PUSH
13688: LD_INT 54
13690: PUSH
13691: LD_INT 2
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: PUSH
13700: LD_INT 33
13702: PUSH
13703: LD_INT 133
13705: PUSH
13706: LD_INT 57
13708: PUSH
13709: LD_INT 2
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: PUSH
13718: LD_INT 33
13720: PUSH
13721: LD_INT 132
13723: PUSH
13724: LD_INT 61
13726: PUSH
13727: LD_INT 2
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: PUSH
13736: LD_INT 33
13738: PUSH
13739: LD_INT 150
13741: PUSH
13742: LD_INT 82
13744: PUSH
13745: LD_INT 0
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: PUSH
13754: LD_INT 33
13756: PUSH
13757: LD_INT 132
13759: PUSH
13760: LD_INT 72
13762: PUSH
13763: LD_INT 0
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: PUSH
13772: LD_INT 6
13774: PUSH
13775: LD_INT 146
13777: PUSH
13778: LD_INT 64
13780: PUSH
13781: LD_INT 4
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: PUSH
13790: LD_INT 6
13792: PUSH
13793: LD_INT 159
13795: PUSH
13796: LD_INT 85
13798: PUSH
13799: LD_INT 4
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: PUSH
13808: LD_INT 21
13810: PUSH
13811: LD_INT 163
13813: PUSH
13814: LD_INT 91
13816: PUSH
13817: LD_INT 3
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: PUSH
13826: LD_INT 16
13828: PUSH
13829: LD_INT 166
13831: PUSH
13832: LD_INT 95
13834: PUSH
13835: LD_INT 4
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 24
13846: PUSH
13847: LD_INT 159
13849: PUSH
13850: LD_INT 95
13852: PUSH
13853: LD_INT 1
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13895: LD_ADDR_VAR 0 3
13899: PUSH
13900: LD_INT 22
13902: PUSH
13903: LD_INT 3
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: LD_INT 3
13912: PUSH
13913: LD_INT 25
13915: PUSH
13916: LD_INT 2
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PPUSH
13931: CALL_OW 69
13935: PUSH
13936: FOR_IN
13937: IFFALSE 13956
// AddComAgressiveMove ( i , 141 , 65 ) ;
13939: LD_VAR 0 3
13943: PPUSH
13944: LD_INT 141
13946: PPUSH
13947: LD_INT 65
13949: PPUSH
13950: CALL_OW 174
13954: GO 13936
13956: POP
13957: POP
// for i := 1 to buildingsTab do
13958: LD_ADDR_VAR 0 3
13962: PUSH
13963: DOUBLE
13964: LD_INT 1
13966: DEC
13967: ST_TO_ADDR
13968: LD_VAR 0 5
13972: PUSH
13973: FOR_TO
13974: IFFALSE 14047
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13976: LD_VAR 0 4
13980: PPUSH
13981: LD_VAR 0 5
13985: PUSH
13986: LD_VAR 0 3
13990: ARRAY
13991: PUSH
13992: LD_INT 1
13994: ARRAY
13995: PPUSH
13996: LD_VAR 0 5
14000: PUSH
14001: LD_VAR 0 3
14005: ARRAY
14006: PUSH
14007: LD_INT 2
14009: ARRAY
14010: PPUSH
14011: LD_VAR 0 5
14015: PUSH
14016: LD_VAR 0 3
14020: ARRAY
14021: PUSH
14022: LD_INT 3
14024: ARRAY
14025: PPUSH
14026: LD_VAR 0 5
14030: PUSH
14031: LD_VAR 0 3
14035: ARRAY
14036: PUSH
14037: LD_INT 4
14039: ARRAY
14040: PPUSH
14041: CALL_OW 205
14045: GO 13973
14047: POP
14048: POP
// end ; end ;
14049: LD_VAR 0 2
14053: RET
// export arBuildingsTab ; export function BuildArabianBase ; var i , engineers ; begin
14054: LD_INT 0
14056: PPUSH
14057: PPUSH
14058: PPUSH
// arBuildingsTab = [ [ b_depot , 71 , 15 , 3 ] , [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 72 , 24 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
14059: LD_ADDR_EXP 68
14063: PUSH
14064: LD_INT 0
14066: PUSH
14067: LD_INT 71
14069: PUSH
14070: LD_INT 15
14072: PUSH
14073: LD_INT 3
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: PUSH
14082: LD_INT 6
14084: PUSH
14085: LD_INT 77
14087: PUSH
14088: LD_INT 18
14090: PUSH
14091: LD_INT 3
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: PUSH
14100: LD_INT 4
14102: PUSH
14103: LD_INT 77
14105: PUSH
14106: LD_INT 26
14108: PUSH
14109: LD_INT 0
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: PUSH
14118: LD_INT 31
14120: PUSH
14121: LD_INT 72
14123: PUSH
14124: LD_INT 24
14126: PUSH
14127: LD_INT 0
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: PUSH
14136: LD_INT 31
14138: PUSH
14139: LD_INT 82
14141: PUSH
14142: LD_INT 28
14144: PUSH
14145: LD_INT 0
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: PUSH
14154: LD_INT 31
14156: PUSH
14157: LD_INT 84
14159: PUSH
14160: LD_INT 21
14162: PUSH
14163: LD_INT 3
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: PUSH
14172: LD_INT 31
14174: PUSH
14175: LD_INT 66
14177: PUSH
14178: LD_INT 14
14180: PUSH
14181: LD_INT 2
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: PUSH
14190: LD_INT 27
14192: PUSH
14193: LD_INT 67
14195: PUSH
14196: LD_INT 18
14198: PUSH
14199: LD_INT 5
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: PUSH
14208: LD_INT 27
14210: PUSH
14211: LD_INT 69
14213: PUSH
14214: LD_INT 23
14216: PUSH
14217: LD_INT 2
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: ST_TO_ADDR
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
14237: LD_ADDR_VAR 0 3
14241: PUSH
14242: LD_INT 22
14244: PUSH
14245: LD_INT 2
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: LD_INT 25
14254: PUSH
14255: LD_INT 2
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PPUSH
14266: CALL_OW 69
14270: ST_TO_ADDR
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
14271: LD_VAR 0 3
14275: PPUSH
14276: LD_EXP 68
14280: PUSH
14281: LD_INT 1
14283: ARRAY
14284: PUSH
14285: LD_INT 1
14287: ARRAY
14288: PPUSH
14289: LD_EXP 68
14293: PUSH
14294: LD_INT 1
14296: ARRAY
14297: PUSH
14298: LD_INT 2
14300: ARRAY
14301: PPUSH
14302: LD_EXP 68
14306: PUSH
14307: LD_INT 1
14309: ARRAY
14310: PUSH
14311: LD_INT 3
14313: ARRAY
14314: PPUSH
14315: LD_EXP 68
14319: PUSH
14320: LD_INT 1
14322: ARRAY
14323: PUSH
14324: LD_INT 4
14326: ARRAY
14327: PPUSH
14328: CALL_OW 205
// end ;
14332: LD_VAR 0 1
14336: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
14337: LD_INT 0
14339: PPUSH
14340: PPUSH
14341: PPUSH
14342: PPUSH
14343: PPUSH
14344: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14345: LD_ADDR_VAR 0 7
14349: PUSH
14350: LD_INT 22
14352: PUSH
14353: LD_VAR 0 1
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: LD_INT 25
14364: PUSH
14365: LD_INT 9
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: PPUSH
14376: CALL_OW 69
14380: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14381: LD_ADDR_VAR 0 8
14385: PUSH
14386: LD_INT 22
14388: PUSH
14389: LD_VAR 0 2
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PUSH
14398: LD_INT 3
14400: PUSH
14401: LD_INT 21
14403: PUSH
14404: LD_INT 3
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PPUSH
14419: CALL_OW 69
14423: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14424: LD_ADDR_VAR 0 5
14428: PUSH
14429: LD_INT 1
14431: PPUSH
14432: LD_INT 3
14434: PPUSH
14435: CALL_OW 12
14439: ST_TO_ADDR
// for i = 1 to list do
14440: LD_ADDR_VAR 0 6
14444: PUSH
14445: DOUBLE
14446: LD_INT 1
14448: DEC
14449: ST_TO_ADDR
14450: LD_VAR 0 7
14454: PUSH
14455: FOR_TO
14456: IFFALSE 15446
// for ta in filter do
14458: LD_ADDR_VAR 0 4
14462: PUSH
14463: LD_VAR 0 8
14467: PUSH
14468: FOR_IN
14469: IFFALSE 15442
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14471: LD_VAR 0 7
14475: PUSH
14476: LD_VAR 0 6
14480: ARRAY
14481: PPUSH
14482: LD_VAR 0 4
14486: PPUSH
14487: CALL_OW 296
14491: PUSH
14492: LD_INT 15
14494: LESSEQUAL
14495: IFFALSE 15440
// begin case c of 1 :
14497: LD_VAR 0 5
14501: PUSH
14502: LD_INT 1
14504: DOUBLE
14505: EQUAL
14506: IFTRUE 14510
14508: GO 14942
14510: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
14511: LD_VAR 0 7
14515: PUSH
14516: LD_VAR 0 6
14520: ARRAY
14521: PPUSH
14522: LD_VAR 0 4
14526: PPUSH
14527: CALL_OW 250
14531: PPUSH
14532: LD_VAR 0 4
14536: PPUSH
14537: CALL_OW 251
14541: PPUSH
14542: CALL_OW 154
// if eventVar2 = 0 then
14546: LD_EXP 66
14550: PUSH
14551: LD_INT 0
14553: EQUAL
14554: IFFALSE 14940
// begin eventVar2 = 1 ;
14556: LD_ADDR_EXP 66
14560: PUSH
14561: LD_INT 1
14563: ST_TO_ADDR
// wait ( 0 0$7 ) ;
14564: LD_INT 245
14566: PPUSH
14567: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
14571: LD_VAR 0 4
14575: PPUSH
14576: CALL_OW 250
14580: PPUSH
14581: LD_VAR 0 4
14585: PPUSH
14586: CALL_OW 251
14590: PPUSH
14591: CALL_OW 84
// DialogueOn ;
14595: CALL_OW 6
// if IsOK ( Cyrus ) then
14599: LD_EXP 5
14603: PPUSH
14604: CALL_OW 302
14608: IFFALSE 14624
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
14610: LD_EXP 5
14614: PPUSH
14615: LD_STRING D9a-Cyrus-1
14617: PPUSH
14618: CALL_OW 88
// end else
14622: GO 14746
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
14624: LD_INT 22
14626: PUSH
14627: LD_INT 1
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: PUSH
14634: LD_INT 26
14636: PUSH
14637: LD_INT 1
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PUSH
14644: LD_INT 2
14646: PUSH
14647: LD_INT 25
14649: PUSH
14650: LD_INT 1
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: PUSH
14657: LD_INT 25
14659: PUSH
14660: LD_INT 2
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: LD_INT 25
14669: PUSH
14670: LD_INT 3
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PUSH
14677: LD_INT 25
14679: PUSH
14680: LD_INT 4
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: LD_INT 25
14689: PUSH
14690: LD_INT 5
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: LIST
14709: PPUSH
14710: CALL_OW 69
14714: PUSH
14715: LD_EXP 1
14719: PUSH
14720: LD_EXP 14
14724: PUSH
14725: LD_EXP 5
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: LIST
14734: DIFF
14735: PPUSH
14736: LD_STRING D9a-Sol1-1
14738: PPUSH
14739: LD_STRING D9a-Sol1-1
14741: PPUSH
14742: CALL 10901 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
14746: LD_INT 22
14748: PUSH
14749: LD_INT 1
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PUSH
14756: LD_INT 26
14758: PUSH
14759: LD_INT 1
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: LD_INT 2
14768: PUSH
14769: LD_INT 25
14771: PUSH
14772: LD_INT 1
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PUSH
14779: LD_INT 25
14781: PUSH
14782: LD_INT 2
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: PUSH
14789: LD_INT 25
14791: PUSH
14792: LD_INT 3
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: PUSH
14799: LD_INT 25
14801: PUSH
14802: LD_INT 4
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: PUSH
14809: LD_INT 25
14811: PUSH
14812: LD_INT 5
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: LIST
14831: PPUSH
14832: CALL_OW 69
14836: PUSH
14837: LD_EXP 1
14841: PUSH
14842: LD_EXP 14
14846: PUSH
14847: LD_EXP 5
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: LIST
14856: DIFF
14857: PPUSH
14858: LD_STRING D9b-Sol1-1
14860: PPUSH
14861: LD_STRING D9b-Sol1-1
14863: PPUSH
14864: CALL 10901 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
14868: LD_STRING 09_arInfo
14870: PPUSH
14871: LD_INT 0
14873: PPUSH
14874: CALL_OW 30
14878: PUSH
14879: LD_INT 1
14881: EQUAL
14882: IFFALSE 14896
// Say ( JMM , D9a-JMM-1 ) ;
14884: LD_EXP 1
14888: PPUSH
14889: LD_STRING D9a-JMM-1
14891: PPUSH
14892: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
14896: LD_EXP 1
14900: PPUSH
14901: LD_STRING D9c-JMM-1
14903: PPUSH
14904: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
14908: LD_INT 12
14910: PPUSH
14911: LD_INT 1
14913: PPUSH
14914: CALL_OW 321
14918: PUSH
14919: LD_INT 2
14921: EQUAL
14922: IFFALSE 14936
// Say ( JMM , D9c-JMM-1a ) ;
14924: LD_EXP 1
14928: PPUSH
14929: LD_STRING D9c-JMM-1a
14931: PPUSH
14932: CALL_OW 88
// DialogueOff ;
14936: CALL_OW 7
// end ; end ; 2 :
14940: GO 15440
14942: LD_INT 2
14944: DOUBLE
14945: EQUAL
14946: IFTRUE 14950
14948: GO 15408
14950: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
14951: LD_VAR 0 7
14955: PUSH
14956: LD_VAR 0 6
14960: ARRAY
14961: PPUSH
14962: LD_VAR 0 4
14966: PPUSH
14967: CALL_OW 250
14971: PUSH
14972: LD_INT 1
14974: NEG
14975: PPUSH
14976: LD_INT 1
14978: PPUSH
14979: CALL_OW 12
14983: PLUS
14984: PPUSH
14985: LD_VAR 0 4
14989: PPUSH
14990: CALL_OW 251
14994: PUSH
14995: LD_INT 1
14997: NEG
14998: PPUSH
14999: LD_INT 1
15001: PPUSH
15002: CALL_OW 12
15006: PLUS
15007: PPUSH
15008: CALL_OW 153
// if eventVar2 = 0 then
15012: LD_EXP 66
15016: PUSH
15017: LD_INT 0
15019: EQUAL
15020: IFFALSE 15406
// begin eventVar2 = 1 ;
15022: LD_ADDR_EXP 66
15026: PUSH
15027: LD_INT 1
15029: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15030: LD_INT 245
15032: PPUSH
15033: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15037: LD_VAR 0 4
15041: PPUSH
15042: CALL_OW 250
15046: PPUSH
15047: LD_VAR 0 4
15051: PPUSH
15052: CALL_OW 251
15056: PPUSH
15057: CALL_OW 84
// DialogueOn ;
15061: CALL_OW 6
// if IsOK ( Cyrus ) then
15065: LD_EXP 5
15069: PPUSH
15070: CALL_OW 302
15074: IFFALSE 15090
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15076: LD_EXP 5
15080: PPUSH
15081: LD_STRING D9a-Cyrus-1
15083: PPUSH
15084: CALL_OW 88
// end else
15088: GO 15212
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15090: LD_INT 22
15092: PUSH
15093: LD_INT 1
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 26
15102: PUSH
15103: LD_INT 1
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: LD_INT 2
15112: PUSH
15113: LD_INT 25
15115: PUSH
15116: LD_INT 1
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: PUSH
15123: LD_INT 25
15125: PUSH
15126: LD_INT 2
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PUSH
15133: LD_INT 25
15135: PUSH
15136: LD_INT 3
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PUSH
15143: LD_INT 25
15145: PUSH
15146: LD_INT 4
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: LD_INT 25
15155: PUSH
15156: LD_INT 5
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: LIST
15175: PPUSH
15176: CALL_OW 69
15180: PUSH
15181: LD_EXP 1
15185: PUSH
15186: LD_EXP 14
15190: PUSH
15191: LD_EXP 5
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: LIST
15200: DIFF
15201: PPUSH
15202: LD_STRING D9a-Sol1-1
15204: PPUSH
15205: LD_STRING D9a-Sol1-1
15207: PPUSH
15208: CALL 10901 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15212: LD_INT 22
15214: PUSH
15215: LD_INT 1
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: LD_INT 26
15224: PUSH
15225: LD_INT 1
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PUSH
15232: LD_INT 2
15234: PUSH
15235: LD_INT 25
15237: PUSH
15238: LD_INT 1
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: PUSH
15245: LD_INT 25
15247: PUSH
15248: LD_INT 2
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: PUSH
15255: LD_INT 25
15257: PUSH
15258: LD_INT 3
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PUSH
15265: LD_INT 25
15267: PUSH
15268: LD_INT 4
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PUSH
15275: LD_INT 25
15277: PUSH
15278: LD_INT 5
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: LIST
15297: PPUSH
15298: CALL_OW 69
15302: PUSH
15303: LD_EXP 1
15307: PUSH
15308: LD_EXP 14
15312: PUSH
15313: LD_EXP 5
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: LIST
15322: DIFF
15323: PPUSH
15324: LD_STRING D9b-Sol1-1
15326: PPUSH
15327: LD_STRING D9b-Sol1-1
15329: PPUSH
15330: CALL 10901 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15334: LD_STRING 09_arInfo
15336: PPUSH
15337: LD_INT 0
15339: PPUSH
15340: CALL_OW 30
15344: PUSH
15345: LD_INT 1
15347: EQUAL
15348: IFFALSE 15362
// Say ( JMM , D9a-JMM-1 ) ;
15350: LD_EXP 1
15354: PPUSH
15355: LD_STRING D9a-JMM-1
15357: PPUSH
15358: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15362: LD_EXP 1
15366: PPUSH
15367: LD_STRING D9c-JMM-1
15369: PPUSH
15370: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15374: LD_INT 12
15376: PPUSH
15377: LD_INT 1
15379: PPUSH
15380: CALL_OW 321
15384: PUSH
15385: LD_INT 2
15387: EQUAL
15388: IFFALSE 15402
// Say ( JMM , D9c-JMM-1a ) ;
15390: LD_EXP 1
15394: PPUSH
15395: LD_STRING D9c-JMM-1a
15397: PPUSH
15398: CALL_OW 88
// DialogueOff ;
15402: CALL_OW 7
// end ; end ; 3 :
15406: GO 15440
15408: LD_INT 3
15410: DOUBLE
15411: EQUAL
15412: IFTRUE 15416
15414: GO 15439
15416: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15417: LD_VAR 0 7
15421: PUSH
15422: LD_VAR 0 6
15426: ARRAY
15427: PPUSH
15428: LD_VAR 0 4
15432: PPUSH
15433: CALL_OW 115
15437: GO 15440
15439: POP
// end ; end ;
15440: GO 14468
15442: POP
15443: POP
15444: GO 14455
15446: POP
15447: POP
// end ;
15448: LD_VAR 0 3
15452: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
15453: LD_INT 0
15455: PPUSH
15456: PPUSH
15457: PPUSH
15458: PPUSH
// for i = 1 to 72 do
15459: LD_ADDR_VAR 0 5
15463: PUSH
15464: DOUBLE
15465: LD_INT 1
15467: DEC
15468: ST_TO_ADDR
15469: LD_INT 72
15471: PUSH
15472: FOR_TO
15473: IFFALSE 15531
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
15475: LD_VAR 0 5
15479: PPUSH
15480: LD_VAR 0 1
15484: PPUSH
15485: CALL_OW 321
15489: PUSH
15490: LD_INT 1
15492: EQUAL
15493: PUSH
15494: LD_VAR 0 5
15498: PPUSH
15499: LD_VAR 0 3
15503: PPUSH
15504: CALL_OW 482
15508: PUSH
15509: LD_INT 1
15511: EQUAL
15512: AND
15513: IFFALSE 15529
// AddComResearch ( lab , i ) ;
15515: LD_VAR 0 2
15519: PPUSH
15520: LD_VAR 0 5
15524: PPUSH
15525: CALL_OW 184
15529: GO 15472
15531: POP
15532: POP
// end ;
15533: LD_VAR 0 4
15537: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
15538: LD_INT 0
15540: PPUSH
15541: PPUSH
15542: PPUSH
15543: PPUSH
15544: PPUSH
15545: PPUSH
15546: PPUSH
15547: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
15548: LD_ADDR_VAR 0 6
15552: PUSH
15553: LD_INT 22
15555: PUSH
15556: LD_VAR 0 1
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 56
15567: PUSH
15568: EMPTY
15569: LIST
15570: PUSH
15571: LD_INT 24
15573: PUSH
15574: LD_INT 700
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PUSH
15581: LD_INT 3
15583: PUSH
15584: LD_INT 60
15586: PUSH
15587: EMPTY
15588: LIST
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: PUSH
15594: LD_INT 2
15596: PUSH
15597: LD_INT 25
15599: PUSH
15600: LD_INT 1
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: LD_INT 25
15609: PUSH
15610: LD_INT 9
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: LIST
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: PPUSH
15629: CALL_OW 69
15633: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
15634: LD_ADDR_VAR 0 7
15638: PUSH
15639: LD_INT 22
15641: PUSH
15642: LD_VAR 0 1
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 30
15653: PUSH
15654: LD_INT 32
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 58
15663: PUSH
15664: EMPTY
15665: LIST
15666: PUSH
15667: LD_INT 24
15669: PUSH
15670: LD_INT 251
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: PPUSH
15683: CALL_OW 69
15687: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
15688: LD_ADDR_VAR 0 9
15692: PUSH
15693: LD_INT 22
15695: PUSH
15696: LD_VAR 0 1
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: PUSH
15705: LD_INT 2
15707: PUSH
15708: LD_INT 30
15710: PUSH
15711: LD_INT 4
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PUSH
15718: LD_INT 30
15720: PUSH
15721: LD_INT 5
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: LIST
15732: PUSH
15733: LD_INT 24
15735: PUSH
15736: LD_INT 251
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: LIST
15747: PPUSH
15748: CALL_OW 69
15752: ST_TO_ADDR
// if barrackList > 0 then
15753: LD_VAR 0 9
15757: PUSH
15758: LD_INT 0
15760: GREATER
15761: IFFALSE 15896
// begin if turretList = 0 then
15763: LD_VAR 0 7
15767: PUSH
15768: LD_INT 0
15770: EQUAL
15771: IFFALSE 15820
// begin for i in soldiers_list do
15773: LD_ADDR_VAR 0 4
15777: PUSH
15778: LD_VAR 0 6
15782: PUSH
15783: FOR_IN
15784: IFFALSE 15816
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
15786: LD_VAR 0 4
15790: PPUSH
15791: LD_VAR 0 9
15795: PUSH
15796: LD_INT 1
15798: PPUSH
15799: LD_VAR 0 9
15803: PPUSH
15804: CALL_OW 12
15808: ARRAY
15809: PPUSH
15810: CALL_OW 120
15814: GO 15783
15816: POP
15817: POP
// end else
15818: GO 15896
// begin for i in barrackList do
15820: LD_ADDR_VAR 0 4
15824: PUSH
15825: LD_VAR 0 9
15829: PUSH
15830: FOR_IN
15831: IFFALSE 15894
// begin insideUnits = UnitsInside ( i ) ;
15833: LD_ADDR_VAR 0 10
15837: PUSH
15838: LD_VAR 0 4
15842: PPUSH
15843: CALL_OW 313
15847: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
15848: LD_VAR 0 10
15852: PUSH
15853: LD_INT 1
15855: ARRAY
15856: PPUSH
15857: LD_VAR 0 7
15861: PUSH
15862: LD_INT 1
15864: ARRAY
15865: PPUSH
15866: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
15870: LD_VAR 0 6
15874: PUSH
15875: LD_INT 1
15877: ARRAY
15878: PPUSH
15879: LD_VAR 0 7
15883: PUSH
15884: LD_INT 1
15886: ARRAY
15887: PPUSH
15888: CALL_OW 120
// end ;
15892: GO 15830
15894: POP
15895: POP
// end ; end ; end ;
15896: LD_VAR 0 3
15900: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
15901: LD_INT 0
15903: PPUSH
15904: PPUSH
15905: PPUSH
15906: PPUSH
15907: PPUSH
15908: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
15909: LD_ADDR_VAR 0 6
15913: PUSH
15914: LD_VAR 0 2
15918: PPUSH
15919: CALL_OW 313
15923: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
15924: LD_ADDR_VAR 0 7
15928: PUSH
15929: LD_INT 22
15931: PUSH
15932: LD_VAR 0 1
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: PUSH
15941: LD_INT 25
15943: PUSH
15944: LD_INT 2
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PUSH
15951: LD_INT 24
15953: PUSH
15954: LD_INT 1000
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: LD_INT 3
15963: PUSH
15964: LD_INT 54
15966: PUSH
15967: EMPTY
15968: LIST
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: PPUSH
15980: CALL_OW 69
15984: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
15985: LD_ADDR_VAR 0 4
15989: PUSH
15990: LD_INT 22
15992: PUSH
15993: LD_VAR 0 1
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: LD_INT 21
16004: PUSH
16005: LD_INT 3
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: PUSH
16012: LD_INT 3
16014: PUSH
16015: LD_INT 24
16017: PUSH
16018: LD_INT 1000
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PUSH
16029: EMPTY
16030: LIST
16031: LIST
16032: LIST
16033: PUSH
16034: EMPTY
16035: LIST
16036: PPUSH
16037: CALL_OW 69
16041: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
16042: LD_VAR 0 4
16046: NOT
16047: PUSH
16048: LD_VAR 0 7
16052: NOT
16053: AND
16054: PUSH
16055: LD_EXP 42
16059: NOT
16060: AND
16061: IFFALSE 16065
// exit ;
16063: GO 16256
// if buildings_list > 0 and engineerOkInside then
16065: LD_VAR 0 4
16069: PUSH
16070: LD_INT 0
16072: GREATER
16073: PUSH
16074: LD_VAR 0 6
16078: AND
16079: IFFALSE 16133
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16081: LD_ADDR_VAR 0 5
16085: PUSH
16086: LD_INT 22
16088: PUSH
16089: LD_VAR 0 1
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 25
16100: PUSH
16101: LD_INT 2
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PPUSH
16112: CALL_OW 69
16116: PUSH
16117: FOR_IN
16118: IFFALSE 16131
// ComExitBuilding ( i ) ;
16120: LD_VAR 0 5
16124: PPUSH
16125: CALL_OW 122
16129: GO 16117
16131: POP
16132: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
16133: LD_VAR 0 4
16137: PUSH
16138: LD_INT 0
16140: GREATER
16141: PUSH
16142: LD_VAR 0 7
16146: PUSH
16147: LD_INT 0
16149: GREATER
16150: AND
16151: IFFALSE 16205
// begin for i in engineerOkOutside do
16153: LD_ADDR_VAR 0 5
16157: PUSH
16158: LD_VAR 0 7
16162: PUSH
16163: FOR_IN
16164: IFFALSE 16203
// for j in buildings_list do
16166: LD_ADDR_VAR 0 8
16170: PUSH
16171: LD_VAR 0 4
16175: PUSH
16176: FOR_IN
16177: IFFALSE 16199
// ComRepairBuilding ( i , j [ 1 ] ) ;
16179: LD_VAR 0 5
16183: PPUSH
16184: LD_VAR 0 8
16188: PUSH
16189: LD_INT 1
16191: ARRAY
16192: PPUSH
16193: CALL_OW 130
16197: GO 16176
16199: POP
16200: POP
16201: GO 16163
16203: POP
16204: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
16205: LD_VAR 0 4
16209: PUSH
16210: LD_INT 0
16212: EQUAL
16213: PUSH
16214: LD_VAR 0 7
16218: PUSH
16219: LD_INT 0
16221: GREATER
16222: AND
16223: IFFALSE 16256
// for i in engineerOkOutside do
16225: LD_ADDR_VAR 0 5
16229: PUSH
16230: LD_VAR 0 7
16234: PUSH
16235: FOR_IN
16236: IFFALSE 16254
// ComEnterUnit ( i , building ) ;
16238: LD_VAR 0 5
16242: PPUSH
16243: LD_VAR 0 2
16247: PPUSH
16248: CALL_OW 120
16252: GO 16235
16254: POP
16255: POP
// end ;
16256: LD_VAR 0 3
16260: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
16261: LD_INT 0
16263: PPUSH
16264: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
16265: LD_INT 22
16267: PUSH
16268: LD_VAR 0 1
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PUSH
16277: LD_INT 25
16279: PUSH
16280: LD_INT 2
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PPUSH
16291: CALL_OW 69
16295: PUSH
16296: LD_INT 0
16298: GREATER
16299: PUSH
16300: LD_INT 22
16302: PUSH
16303: LD_VAR 0 1
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: LD_INT 21
16314: PUSH
16315: LD_INT 3
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: LD_INT 3
16324: PUSH
16325: LD_INT 24
16327: PUSH
16328: LD_INT 1000
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: LIST
16343: PPUSH
16344: CALL_OW 69
16348: PUSH
16349: LD_INT 0
16351: EQUAL
16352: AND
16353: PUSH
16354: LD_VAR 0 2
16358: PUSH
16359: LD_INT 0
16361: GREATER
16362: AND
16363: IFFALSE 16462
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16365: LD_ADDR_VAR 0 4
16369: PUSH
16370: LD_INT 22
16372: PUSH
16373: LD_VAR 0 1
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: PUSH
16382: LD_INT 25
16384: PUSH
16385: LD_INT 2
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: PPUSH
16396: CALL_OW 69
16400: PUSH
16401: FOR_IN
16402: IFFALSE 16460
// begin AddComExitBuilding ( i ) ;
16404: LD_VAR 0 4
16408: PPUSH
16409: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
16413: LD_VAR 0 4
16417: PPUSH
16418: LD_VAR 0 2
16422: PUSH
16423: LD_INT 1
16425: ARRAY
16426: PPUSH
16427: LD_VAR 0 2
16431: PUSH
16432: LD_INT 2
16434: ARRAY
16435: PPUSH
16436: LD_VAR 0 2
16440: PUSH
16441: LD_INT 3
16443: ARRAY
16444: PPUSH
16445: LD_VAR 0 2
16449: PUSH
16450: LD_INT 4
16452: ARRAY
16453: PPUSH
16454: CALL_OW 205
// end ;
16458: GO 16401
16460: POP
16461: POP
// end ; end ;
16462: LD_VAR 0 3
16466: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
16467: LD_INT 0
16469: PPUSH
16470: PPUSH
16471: PPUSH
16472: PPUSH
16473: PPUSH
16474: PPUSH
16475: PPUSH
16476: PPUSH
16477: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
16478: LD_ADDR_VAR 0 6
16482: PUSH
16483: LD_INT 22
16485: PUSH
16486: LD_VAR 0 1
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 25
16497: PUSH
16498: LD_INT 4
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: LD_INT 24
16507: PUSH
16508: LD_INT 251
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: LIST
16519: PPUSH
16520: CALL_OW 69
16524: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
16525: LD_ADDR_VAR 0 7
16529: PUSH
16530: LD_VAR 0 3
16534: PPUSH
16535: LD_INT 22
16537: PUSH
16538: LD_VAR 0 1
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 25
16549: PUSH
16550: LD_INT 4
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 50
16559: PUSH
16560: EMPTY
16561: LIST
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: LIST
16567: PPUSH
16568: CALL_OW 70
16572: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
16573: LD_ADDR_VAR 0 10
16577: PUSH
16578: LD_VAR 0 3
16582: PPUSH
16583: LD_INT 22
16585: PUSH
16586: LD_VAR 0 1
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 21
16597: PUSH
16598: LD_INT 1
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PUSH
16605: LD_INT 3
16607: PUSH
16608: LD_INT 25
16610: PUSH
16611: LD_INT 3
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PUSH
16622: LD_INT 3
16624: PUSH
16625: LD_INT 24
16627: PUSH
16628: LD_INT 750
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: PPUSH
16645: CALL_OW 70
16649: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16650: LD_ADDR_VAR 0 11
16654: PUSH
16655: LD_VAR 0 2
16659: PPUSH
16660: LD_INT 22
16662: PUSH
16663: LD_VAR 0 1
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: LD_INT 21
16674: PUSH
16675: LD_INT 1
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: PUSH
16682: LD_INT 3
16684: PUSH
16685: LD_INT 25
16687: PUSH
16688: LD_INT 3
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: PUSH
16695: EMPTY
16696: LIST
16697: LIST
16698: PUSH
16699: LD_INT 3
16701: PUSH
16702: LD_INT 24
16704: PUSH
16705: LD_INT 1000
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: PPUSH
16722: CALL_OW 70
16726: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
16727: LD_VAR 0 10
16731: NOT
16732: PUSH
16733: LD_VAR 0 7
16737: NOT
16738: AND
16739: PUSH
16740: LD_VAR 0 11
16744: NOT
16745: AND
16746: IFFALSE 16750
// exit ;
16748: GO 17010
// if damageUnits > 0 and sci_list > 0 then
16750: LD_VAR 0 10
16754: PUSH
16755: LD_INT 0
16757: GREATER
16758: PUSH
16759: LD_VAR 0 6
16763: PUSH
16764: LD_INT 0
16766: GREATER
16767: AND
16768: IFFALSE 16801
// for i in damageUnits do
16770: LD_ADDR_VAR 0 8
16774: PUSH
16775: LD_VAR 0 10
16779: PUSH
16780: FOR_IN
16781: IFFALSE 16799
// ComMoveToArea ( i , healArea ) ;
16783: LD_VAR 0 8
16787: PPUSH
16788: LD_VAR 0 2
16792: PPUSH
16793: CALL_OW 113
16797: GO 16780
16799: POP
16800: POP
// if unitsToHeal > 0 and sci_list > 0 then
16801: LD_VAR 0 11
16805: PUSH
16806: LD_INT 0
16808: GREATER
16809: PUSH
16810: LD_VAR 0 6
16814: PUSH
16815: LD_INT 0
16817: GREATER
16818: AND
16819: IFFALSE 16878
// begin for i in sci_list do
16821: LD_ADDR_VAR 0 8
16825: PUSH
16826: LD_VAR 0 6
16830: PUSH
16831: FOR_IN
16832: IFFALSE 16876
// begin ComExitBuilding ( i ) ;
16834: LD_VAR 0 8
16838: PPUSH
16839: CALL_OW 122
// for j in unitsToHeal do
16843: LD_ADDR_VAR 0 9
16847: PUSH
16848: LD_VAR 0 11
16852: PUSH
16853: FOR_IN
16854: IFFALSE 16872
// AddComHeal ( i , j ) ;
16856: LD_VAR 0 8
16860: PPUSH
16861: LD_VAR 0 9
16865: PPUSH
16866: CALL_OW 188
16870: GO 16853
16872: POP
16873: POP
// end ;
16874: GO 16831
16876: POP
16877: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
16878: LD_VAR 0 10
16882: PUSH
16883: LD_INT 0
16885: EQUAL
16886: PUSH
16887: LD_VAR 0 11
16891: PUSH
16892: LD_INT 0
16894: EQUAL
16895: AND
16896: PUSH
16897: LD_VAR 0 7
16901: PUSH
16902: LD_INT 0
16904: GREATER
16905: AND
16906: IFFALSE 17010
// for i in sci_listOutside do
16908: LD_ADDR_VAR 0 8
16912: PUSH
16913: LD_VAR 0 7
16917: PUSH
16918: FOR_IN
16919: IFFALSE 17008
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
16921: LD_ADDR_VAR 0 12
16925: PUSH
16926: LD_INT 22
16928: PUSH
16929: LD_VAR 0 1
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: LD_INT 21
16940: PUSH
16941: LD_INT 3
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PUSH
16948: LD_INT 30
16950: PUSH
16951: LD_INT 8
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: LIST
16962: PPUSH
16963: CALL_OW 69
16967: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
16968: LD_ADDR_VAR 0 13
16972: PUSH
16973: LD_INT 1
16975: PPUSH
16976: LD_VAR 0 12
16980: PPUSH
16981: CALL_OW 12
16985: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
16986: LD_VAR 0 8
16990: PPUSH
16991: LD_VAR 0 12
16995: PUSH
16996: LD_VAR 0 13
17000: ARRAY
17001: PPUSH
17002: CALL_OW 120
// end ;
17006: GO 16918
17008: POP
17009: POP
// end ;
17010: LD_VAR 0 5
17014: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
17015: LD_INT 0
17017: PPUSH
17018: PPUSH
17019: PPUSH
17020: PPUSH
17021: PPUSH
17022: PPUSH
17023: PPUSH
17024: PPUSH
17025: PPUSH
17026: PPUSH
17027: PPUSH
// amChassisTab = [ ] ;
17028: LD_ADDR_VAR 0 19
17032: PUSH
17033: EMPTY
17034: ST_TO_ADDR
// arChassisTab = [ ] ;
17035: LD_ADDR_VAR 0 18
17039: PUSH
17040: EMPTY
17041: ST_TO_ADDR
// ruChassisTab = [ ] ;
17042: LD_ADDR_VAR 0 17
17046: PUSH
17047: EMPTY
17048: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
17049: LD_INT 35
17051: PPUSH
17052: CALL_OW 67
// if nation = 1 then
17056: LD_VAR 0 5
17060: PUSH
17061: LD_INT 1
17063: EQUAL
17064: IFFALSE 17569
// begin uc_side = side ;
17066: LD_ADDR_OWVAR 20
17070: PUSH
17071: LD_VAR 0 2
17075: ST_TO_ADDR
// uc_nation = nation ;
17076: LD_ADDR_OWVAR 21
17080: PUSH
17081: LD_VAR 0 5
17085: ST_TO_ADDR
// vc_engine = vehengine ;
17086: LD_ADDR_OWVAR 39
17090: PUSH
17091: LD_VAR 0 6
17095: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17096: LD_ADDR_OWVAR 38
17100: PUSH
17101: LD_VAR 0 7
17105: PUSH
17106: LD_INT 1
17108: PPUSH
17109: LD_VAR 0 7
17113: PPUSH
17114: CALL_OW 12
17118: ARRAY
17119: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
17120: LD_ADDR_OWVAR 40
17124: PUSH
17125: LD_VAR 0 10
17129: PUSH
17130: LD_INT 1
17132: PPUSH
17133: LD_VAR 0 10
17137: PPUSH
17138: CALL_OW 12
17142: ARRAY
17143: ST_TO_ADDR
// for j = 1 to AMWeapon do
17144: LD_ADDR_VAR 0 14
17148: PUSH
17149: DOUBLE
17150: LD_INT 1
17152: DEC
17153: ST_TO_ADDR
17154: LD_VAR 0 10
17158: PUSH
17159: FOR_TO
17160: IFFALSE 17461
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
17162: LD_VAR 0 10
17166: PUSH
17167: LD_VAR 0 14
17171: ARRAY
17172: PUSH
17173: LD_INT 2
17175: EQUAL
17176: PUSH
17177: LD_VAR 0 10
17181: PUSH
17182: LD_VAR 0 14
17186: ARRAY
17187: PUSH
17188: LD_INT 3
17190: EQUAL
17191: OR
17192: IFFALSE 17245
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
17194: LD_ADDR_VAR 0 19
17198: PUSH
17199: LD_INT 1
17201: PUSH
17202: LD_INT 2
17204: PUSH
17205: LD_INT 3
17207: PUSH
17208: LD_INT 4
17210: PUSH
17211: LD_INT 5
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17221: LD_ADDR_OWVAR 37
17225: PUSH
17226: LD_VAR 0 19
17230: PUSH
17231: LD_INT 1
17233: PPUSH
17234: LD_VAR 0 19
17238: PPUSH
17239: CALL_OW 12
17243: ARRAY
17244: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
17245: LD_VAR 0 10
17249: PUSH
17250: LD_VAR 0 14
17254: ARRAY
17255: PUSH
17256: LD_INT 4
17258: EQUAL
17259: PUSH
17260: LD_VAR 0 10
17264: PUSH
17265: LD_VAR 0 14
17269: ARRAY
17270: PUSH
17271: LD_INT 5
17273: EQUAL
17274: OR
17275: PUSH
17276: LD_VAR 0 10
17280: PUSH
17281: LD_VAR 0 14
17285: ARRAY
17286: PUSH
17287: LD_INT 9
17289: EQUAL
17290: OR
17291: PUSH
17292: LD_VAR 0 10
17296: PUSH
17297: LD_VAR 0 14
17301: ARRAY
17302: PUSH
17303: LD_INT 11
17305: EQUAL
17306: OR
17307: PUSH
17308: LD_VAR 0 10
17312: PUSH
17313: LD_VAR 0 14
17317: ARRAY
17318: PUSH
17319: LD_INT 7
17321: EQUAL
17322: OR
17323: IFFALSE 17372
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
17325: LD_ADDR_VAR 0 19
17329: PUSH
17330: LD_INT 2
17332: PUSH
17333: LD_INT 3
17335: PUSH
17336: LD_INT 4
17338: PUSH
17339: LD_INT 5
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17348: LD_ADDR_OWVAR 37
17352: PUSH
17353: LD_VAR 0 19
17357: PUSH
17358: LD_INT 1
17360: PPUSH
17361: LD_VAR 0 19
17365: PPUSH
17366: CALL_OW 12
17370: ARRAY
17371: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
17372: LD_VAR 0 10
17376: PUSH
17377: LD_VAR 0 14
17381: ARRAY
17382: PUSH
17383: LD_INT 8
17385: EQUAL
17386: PUSH
17387: LD_VAR 0 10
17391: PUSH
17392: LD_VAR 0 14
17396: ARRAY
17397: PUSH
17398: LD_INT 6
17400: EQUAL
17401: OR
17402: PUSH
17403: LD_VAR 0 10
17407: PUSH
17408: LD_VAR 0 14
17412: ARRAY
17413: PUSH
17414: LD_INT 10
17416: EQUAL
17417: OR
17418: IFFALSE 17459
// begin amChassisTab = [ 4 , 5 ] ;
17420: LD_ADDR_VAR 0 19
17424: PUSH
17425: LD_INT 4
17427: PUSH
17428: LD_INT 5
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17435: LD_ADDR_OWVAR 37
17439: PUSH
17440: LD_VAR 0 19
17444: PUSH
17445: LD_INT 1
17447: PPUSH
17448: LD_VAR 0 19
17452: PPUSH
17453: CALL_OW 12
17457: ARRAY
17458: ST_TO_ADDR
// end ; end ;
17459: GO 17159
17461: POP
17462: POP
// veh = CreateVehicle ;
17463: LD_ADDR_VAR 0 16
17467: PUSH
17468: CALL_OW 45
17472: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17473: LD_VAR 0 16
17477: PPUSH
17478: LD_VAR 0 1
17482: PPUSH
17483: LD_INT 0
17485: PPUSH
17486: CALL_OW 49
// if vc_control = 1 then
17490: LD_OWVAR 38
17494: PUSH
17495: LD_INT 1
17497: EQUAL
17498: IFFALSE 17555
// begin hc_gallery =  ;
17500: LD_ADDR_OWVAR 33
17504: PUSH
17505: LD_STRING 
17507: ST_TO_ADDR
// hc_name =  ;
17508: LD_ADDR_OWVAR 26
17512: PUSH
17513: LD_STRING 
17515: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17516: LD_INT 0
17518: PPUSH
17519: LD_INT 3
17521: PPUSH
17522: LD_VAR 0 4
17526: PPUSH
17527: CALL_OW 380
// un = CreateHuman ;
17531: LD_ADDR_VAR 0 15
17535: PUSH
17536: CALL_OW 44
17540: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17541: LD_VAR 0 15
17545: PPUSH
17546: LD_VAR 0 16
17550: PPUSH
17551: CALL_OW 52
// end ; i = i + 1 ;
17555: LD_ADDR_VAR 0 13
17559: PUSH
17560: LD_VAR 0 13
17564: PUSH
17565: LD_INT 1
17567: PLUS
17568: ST_TO_ADDR
// end ; if nation = 2 then
17569: LD_VAR 0 5
17573: PUSH
17574: LD_INT 2
17576: EQUAL
17577: IFFALSE 17999
// begin uc_side = side ;
17579: LD_ADDR_OWVAR 20
17583: PUSH
17584: LD_VAR 0 2
17588: ST_TO_ADDR
// uc_nation = nation ;
17589: LD_ADDR_OWVAR 21
17593: PUSH
17594: LD_VAR 0 5
17598: ST_TO_ADDR
// vc_engine = vehengine ;
17599: LD_ADDR_OWVAR 39
17603: PUSH
17604: LD_VAR 0 6
17608: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17609: LD_ADDR_OWVAR 38
17613: PUSH
17614: LD_VAR 0 7
17618: PUSH
17619: LD_INT 1
17621: PPUSH
17622: LD_VAR 0 7
17626: PPUSH
17627: CALL_OW 12
17631: ARRAY
17632: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
17633: LD_ADDR_OWVAR 40
17637: PUSH
17638: LD_VAR 0 9
17642: PUSH
17643: LD_INT 1
17645: PPUSH
17646: LD_VAR 0 9
17650: PPUSH
17651: CALL_OW 12
17655: ARRAY
17656: ST_TO_ADDR
// for j = 1 to ARWeapons do
17657: LD_ADDR_VAR 0 14
17661: PUSH
17662: DOUBLE
17663: LD_INT 1
17665: DEC
17666: ST_TO_ADDR
17667: LD_VAR 0 9
17671: PUSH
17672: FOR_TO
17673: IFFALSE 17891
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
17675: LD_VAR 0 9
17679: PUSH
17680: LD_VAR 0 14
17684: ARRAY
17685: PUSH
17686: LD_INT 24
17688: EQUAL
17689: PUSH
17690: LD_VAR 0 9
17694: PUSH
17695: LD_VAR 0 14
17699: ARRAY
17700: PUSH
17701: LD_INT 22
17703: EQUAL
17704: OR
17705: PUSH
17706: LD_VAR 0 9
17710: PUSH
17711: LD_VAR 0 14
17715: ARRAY
17716: PUSH
17717: LD_INT 23
17719: EQUAL
17720: OR
17721: PUSH
17722: LD_VAR 0 9
17726: PUSH
17727: LD_VAR 0 14
17731: ARRAY
17732: PUSH
17733: LD_INT 30
17735: EQUAL
17736: OR
17737: IFFALSE 17774
// begin arChassisTab = [ 14 ] ;
17739: LD_ADDR_VAR 0 18
17743: PUSH
17744: LD_INT 14
17746: PUSH
17747: EMPTY
17748: LIST
17749: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
17750: LD_ADDR_OWVAR 37
17754: PUSH
17755: LD_VAR 0 18
17759: PUSH
17760: LD_INT 1
17762: PPUSH
17763: LD_VAR 0 18
17767: PPUSH
17768: CALL_OW 12
17772: ARRAY
17773: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
17774: LD_VAR 0 9
17778: PUSH
17779: LD_VAR 0 14
17783: ARRAY
17784: PUSH
17785: LD_INT 29
17787: EQUAL
17788: PUSH
17789: LD_VAR 0 9
17793: PUSH
17794: LD_VAR 0 14
17798: ARRAY
17799: PUSH
17800: LD_INT 28
17802: EQUAL
17803: OR
17804: PUSH
17805: LD_VAR 0 9
17809: PUSH
17810: LD_VAR 0 14
17814: ARRAY
17815: PUSH
17816: LD_INT 27
17818: EQUAL
17819: OR
17820: PUSH
17821: LD_VAR 0 9
17825: PUSH
17826: LD_VAR 0 14
17830: ARRAY
17831: PUSH
17832: LD_INT 26
17834: EQUAL
17835: OR
17836: PUSH
17837: LD_VAR 0 9
17841: PUSH
17842: LD_VAR 0 14
17846: ARRAY
17847: PUSH
17848: LD_INT 25
17850: EQUAL
17851: OR
17852: IFFALSE 17889
// begin arChassisTab = [ 14 ] ;
17854: LD_ADDR_VAR 0 18
17858: PUSH
17859: LD_INT 14
17861: PUSH
17862: EMPTY
17863: LIST
17864: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
17865: LD_ADDR_OWVAR 37
17869: PUSH
17870: LD_VAR 0 18
17874: PUSH
17875: LD_INT 1
17877: PPUSH
17878: LD_VAR 0 18
17882: PPUSH
17883: CALL_OW 12
17887: ARRAY
17888: ST_TO_ADDR
// end ; end ;
17889: GO 17672
17891: POP
17892: POP
// veh = CreateVehicle ;
17893: LD_ADDR_VAR 0 16
17897: PUSH
17898: CALL_OW 45
17902: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17903: LD_VAR 0 16
17907: PPUSH
17908: LD_VAR 0 1
17912: PPUSH
17913: LD_INT 0
17915: PPUSH
17916: CALL_OW 49
// if vc_control = 1 then
17920: LD_OWVAR 38
17924: PUSH
17925: LD_INT 1
17927: EQUAL
17928: IFFALSE 17985
// begin hc_gallery =  ;
17930: LD_ADDR_OWVAR 33
17934: PUSH
17935: LD_STRING 
17937: ST_TO_ADDR
// hc_name =  ;
17938: LD_ADDR_OWVAR 26
17942: PUSH
17943: LD_STRING 
17945: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17946: LD_INT 0
17948: PPUSH
17949: LD_INT 3
17951: PPUSH
17952: LD_VAR 0 4
17956: PPUSH
17957: CALL_OW 380
// un = CreateHuman ;
17961: LD_ADDR_VAR 0 15
17965: PUSH
17966: CALL_OW 44
17970: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17971: LD_VAR 0 15
17975: PPUSH
17976: LD_VAR 0 16
17980: PPUSH
17981: CALL_OW 52
// end ; i = i + 1 ;
17985: LD_ADDR_VAR 0 13
17989: PUSH
17990: LD_VAR 0 13
17994: PUSH
17995: LD_INT 1
17997: PLUS
17998: ST_TO_ADDR
// end ; if nation = 3 then
17999: LD_VAR 0 5
18003: PUSH
18004: LD_INT 3
18006: EQUAL
18007: IFFALSE 18413
// begin uc_side = side ;
18009: LD_ADDR_OWVAR 20
18013: PUSH
18014: LD_VAR 0 2
18018: ST_TO_ADDR
// uc_nation = nation ;
18019: LD_ADDR_OWVAR 21
18023: PUSH
18024: LD_VAR 0 5
18028: ST_TO_ADDR
// vc_engine = vehengine ;
18029: LD_ADDR_OWVAR 39
18033: PUSH
18034: LD_VAR 0 6
18038: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18039: LD_ADDR_OWVAR 38
18043: PUSH
18044: LD_VAR 0 7
18048: PUSH
18049: LD_INT 1
18051: PPUSH
18052: LD_VAR 0 7
18056: PPUSH
18057: CALL_OW 12
18061: ARRAY
18062: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
18063: LD_ADDR_OWVAR 40
18067: PUSH
18068: LD_VAR 0 8
18072: PUSH
18073: LD_INT 1
18075: PPUSH
18076: LD_VAR 0 8
18080: PPUSH
18081: CALL_OW 12
18085: ARRAY
18086: ST_TO_ADDR
// for j = 1 to RuWeapons do
18087: LD_ADDR_VAR 0 14
18091: PUSH
18092: DOUBLE
18093: LD_INT 1
18095: DEC
18096: ST_TO_ADDR
18097: LD_VAR 0 8
18101: PUSH
18102: FOR_TO
18103: IFFALSE 18305
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
18105: LD_VAR 0 8
18109: PUSH
18110: LD_VAR 0 14
18114: ARRAY
18115: PUSH
18116: LD_INT 42
18118: EQUAL
18119: PUSH
18120: LD_VAR 0 8
18124: PUSH
18125: LD_VAR 0 14
18129: ARRAY
18130: PUSH
18131: LD_INT 43
18133: EQUAL
18134: OR
18135: PUSH
18136: LD_VAR 0 8
18140: PUSH
18141: LD_VAR 0 14
18145: ARRAY
18146: PUSH
18147: LD_INT 44
18149: EQUAL
18150: OR
18151: PUSH
18152: LD_VAR 0 8
18156: PUSH
18157: LD_VAR 0 14
18161: ARRAY
18162: PUSH
18163: LD_INT 45
18165: EQUAL
18166: OR
18167: PUSH
18168: LD_VAR 0 8
18172: PUSH
18173: LD_VAR 0 14
18177: ARRAY
18178: PUSH
18179: LD_INT 49
18181: EQUAL
18182: OR
18183: IFFALSE 18232
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
18185: LD_ADDR_VAR 0 17
18189: PUSH
18190: LD_INT 21
18192: PUSH
18193: LD_INT 22
18195: PUSH
18196: LD_INT 23
18198: PUSH
18199: LD_INT 24
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18208: LD_ADDR_OWVAR 37
18212: PUSH
18213: LD_VAR 0 17
18217: PUSH
18218: LD_INT 1
18220: PPUSH
18221: LD_VAR 0 17
18225: PPUSH
18226: CALL_OW 12
18230: ARRAY
18231: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
18232: LD_VAR 0 8
18236: PUSH
18237: LD_VAR 0 14
18241: ARRAY
18242: PUSH
18243: LD_INT 46
18245: EQUAL
18246: PUSH
18247: LD_VAR 0 8
18251: PUSH
18252: LD_VAR 0 14
18256: ARRAY
18257: PUSH
18258: LD_INT 47
18260: EQUAL
18261: OR
18262: IFFALSE 18303
// begin ruChassisTab = [ 23 , 24 ] ;
18264: LD_ADDR_VAR 0 17
18268: PUSH
18269: LD_INT 23
18271: PUSH
18272: LD_INT 24
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18279: LD_ADDR_OWVAR 37
18283: PUSH
18284: LD_VAR 0 17
18288: PUSH
18289: LD_INT 1
18291: PPUSH
18292: LD_VAR 0 17
18296: PPUSH
18297: CALL_OW 12
18301: ARRAY
18302: ST_TO_ADDR
// end ; end ;
18303: GO 18102
18305: POP
18306: POP
// veh = CreateVehicle ;
18307: LD_ADDR_VAR 0 16
18311: PUSH
18312: CALL_OW 45
18316: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18317: LD_VAR 0 16
18321: PPUSH
18322: LD_VAR 0 1
18326: PPUSH
18327: LD_INT 0
18329: PPUSH
18330: CALL_OW 49
// if vc_control = 1 then
18334: LD_OWVAR 38
18338: PUSH
18339: LD_INT 1
18341: EQUAL
18342: IFFALSE 18399
// begin hc_gallery =  ;
18344: LD_ADDR_OWVAR 33
18348: PUSH
18349: LD_STRING 
18351: ST_TO_ADDR
// hc_name =  ;
18352: LD_ADDR_OWVAR 26
18356: PUSH
18357: LD_STRING 
18359: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18360: LD_INT 0
18362: PPUSH
18363: LD_INT 3
18365: PPUSH
18366: LD_VAR 0 4
18370: PPUSH
18371: CALL_OW 380
// un = CreateHuman ;
18375: LD_ADDR_VAR 0 15
18379: PUSH
18380: CALL_OW 44
18384: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18385: LD_VAR 0 15
18389: PPUSH
18390: LD_VAR 0 16
18394: PPUSH
18395: CALL_OW 52
// end ; i = i + 1 ;
18399: LD_ADDR_VAR 0 13
18403: PUSH
18404: LD_VAR 0 13
18408: PUSH
18409: LD_INT 1
18411: PLUS
18412: ST_TO_ADDR
// end ; until i = vehCount ;
18413: LD_VAR 0 13
18417: PUSH
18418: LD_VAR 0 3
18422: EQUAL
18423: IFFALSE 17049
// repeat wait ( 0 0$1 ) ;
18425: LD_INT 35
18427: PPUSH
18428: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
18432: LD_ADDR_VAR 0 20
18436: PUSH
18437: LD_INT 22
18439: PUSH
18440: LD_VAR 0 2
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 21
18451: PUSH
18452: LD_INT 2
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 24
18461: PUSH
18462: LD_INT 650
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: LIST
18473: PPUSH
18474: CALL_OW 69
18478: ST_TO_ADDR
// if vehicleOK_list > 0 then
18479: LD_VAR 0 20
18483: PUSH
18484: LD_INT 0
18486: GREATER
18487: IFFALSE 18678
// begin for i in vehicleOK_list do
18489: LD_ADDR_VAR 0 13
18493: PUSH
18494: LD_VAR 0 20
18498: PUSH
18499: FOR_IN
18500: IFFALSE 18676
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18502: LD_ADDR_VAR 0 21
18506: PUSH
18507: LD_INT 22
18509: PUSH
18510: LD_VAR 0 11
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PPUSH
18519: CALL_OW 69
18523: PPUSH
18524: LD_VAR 0 13
18528: PPUSH
18529: CALL_OW 74
18533: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18534: LD_ADDR_VAR 0 22
18538: PUSH
18539: LD_INT 22
18541: PUSH
18542: LD_VAR 0 11
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 2
18553: PUSH
18554: LD_INT 59
18556: PUSH
18557: EMPTY
18558: LIST
18559: PUSH
18560: LD_INT 21
18562: PUSH
18563: LD_INT 1
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 21
18572: PUSH
18573: LD_INT 2
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: EMPTY
18591: LIST
18592: PPUSH
18593: CALL_OW 69
18597: PPUSH
18598: LD_VAR 0 13
18602: PPUSH
18603: CALL_OW 74
18607: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18608: LD_VAR 0 13
18612: PPUSH
18613: LD_VAR 0 21
18617: PPUSH
18618: CALL_OW 296
18622: PUSH
18623: LD_INT 8
18625: PLUS
18626: PUSH
18627: LD_VAR 0 13
18631: PPUSH
18632: LD_VAR 0 22
18636: PPUSH
18637: CALL_OW 296
18641: LESS
18642: IFFALSE 18660
// begin ComAttackUnit ( i , target1 ) ;
18644: LD_VAR 0 13
18648: PPUSH
18649: LD_VAR 0 21
18653: PPUSH
18654: CALL_OW 115
// end else
18658: GO 18674
// begin ComAttackUnit ( i , target2 ) ;
18660: LD_VAR 0 13
18664: PPUSH
18665: LD_VAR 0 22
18669: PPUSH
18670: CALL_OW 115
// end ; end ;
18674: GO 18499
18676: POP
18677: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
18678: LD_INT 22
18680: PUSH
18681: LD_VAR 0 2
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 21
18692: PUSH
18693: LD_INT 2
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PPUSH
18704: CALL_OW 69
18708: PUSH
18709: LD_INT 0
18711: EQUAL
18712: IFFALSE 18425
// end ;
18714: LD_VAR 0 12
18718: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
18719: LD_INT 0
18721: PPUSH
18722: PPUSH
18723: PPUSH
18724: PPUSH
18725: PPUSH
18726: PPUSH
18727: PPUSH
18728: PPUSH
18729: PPUSH
18730: PPUSH
18731: PPUSH
// for i = 1 to soldierCount do
18732: LD_ADDR_VAR 0 13
18736: PUSH
18737: DOUBLE
18738: LD_INT 1
18740: DEC
18741: ST_TO_ADDR
18742: LD_VAR 0 3
18746: PUSH
18747: FOR_TO
18748: IFFALSE 18830
// begin uc_side = side ;
18750: LD_ADDR_OWVAR 20
18754: PUSH
18755: LD_VAR 0 1
18759: ST_TO_ADDR
// uc_nation = nation ;
18760: LD_ADDR_OWVAR 21
18764: PUSH
18765: LD_VAR 0 2
18769: ST_TO_ADDR
// hc_name =  ;
18770: LD_ADDR_OWVAR 26
18774: PUSH
18775: LD_STRING 
18777: ST_TO_ADDR
// hc_gallery =  ;
18778: LD_ADDR_OWVAR 33
18782: PUSH
18783: LD_STRING 
18785: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
18786: LD_INT 0
18788: PPUSH
18789: LD_INT 1
18791: PPUSH
18792: LD_VAR 0 8
18796: PPUSH
18797: CALL_OW 380
// un = CreateHuman ;
18801: LD_ADDR_VAR 0 15
18805: PUSH
18806: CALL_OW 44
18810: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
18811: LD_VAR 0 15
18815: PPUSH
18816: LD_VAR 0 9
18820: PPUSH
18821: LD_INT 0
18823: PPUSH
18824: CALL_OW 49
// end ;
18828: GO 18747
18830: POP
18831: POP
// for i = 1 to sniperCount do
18832: LD_ADDR_VAR 0 13
18836: PUSH
18837: DOUBLE
18838: LD_INT 1
18840: DEC
18841: ST_TO_ADDR
18842: LD_VAR 0 4
18846: PUSH
18847: FOR_TO
18848: IFFALSE 18930
// begin uc_side = side ;
18850: LD_ADDR_OWVAR 20
18854: PUSH
18855: LD_VAR 0 1
18859: ST_TO_ADDR
// uc_nation = nation ;
18860: LD_ADDR_OWVAR 21
18864: PUSH
18865: LD_VAR 0 2
18869: ST_TO_ADDR
// hc_name =  ;
18870: LD_ADDR_OWVAR 26
18874: PUSH
18875: LD_STRING 
18877: ST_TO_ADDR
// hc_gallery =  ;
18878: LD_ADDR_OWVAR 33
18882: PUSH
18883: LD_STRING 
18885: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
18886: LD_INT 0
18888: PPUSH
18889: LD_INT 5
18891: PPUSH
18892: LD_VAR 0 8
18896: PPUSH
18897: CALL_OW 380
// un = CreateHuman ;
18901: LD_ADDR_VAR 0 15
18905: PUSH
18906: CALL_OW 44
18910: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
18911: LD_VAR 0 15
18915: PPUSH
18916: LD_VAR 0 9
18920: PPUSH
18921: LD_INT 0
18923: PPUSH
18924: CALL_OW 49
// end ;
18928: GO 18847
18930: POP
18931: POP
// for i = 1 to bazookCount do
18932: LD_ADDR_VAR 0 13
18936: PUSH
18937: DOUBLE
18938: LD_INT 1
18940: DEC
18941: ST_TO_ADDR
18942: LD_VAR 0 5
18946: PUSH
18947: FOR_TO
18948: IFFALSE 19030
// begin uc_side = side ;
18950: LD_ADDR_OWVAR 20
18954: PUSH
18955: LD_VAR 0 1
18959: ST_TO_ADDR
// uc_nation = nation ;
18960: LD_ADDR_OWVAR 21
18964: PUSH
18965: LD_VAR 0 2
18969: ST_TO_ADDR
// hc_name =  ;
18970: LD_ADDR_OWVAR 26
18974: PUSH
18975: LD_STRING 
18977: ST_TO_ADDR
// hc_gallery =  ;
18978: LD_ADDR_OWVAR 33
18982: PUSH
18983: LD_STRING 
18985: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
18986: LD_INT 0
18988: PPUSH
18989: LD_INT 9
18991: PPUSH
18992: LD_VAR 0 8
18996: PPUSH
18997: CALL_OW 380
// un = CreateHuman ;
19001: LD_ADDR_VAR 0 15
19005: PUSH
19006: CALL_OW 44
19010: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19011: LD_VAR 0 15
19015: PPUSH
19016: LD_VAR 0 9
19020: PPUSH
19021: LD_INT 0
19023: PPUSH
19024: CALL_OW 49
// end ;
19028: GO 18947
19030: POP
19031: POP
// for i = 1 to mortalCount do
19032: LD_ADDR_VAR 0 13
19036: PUSH
19037: DOUBLE
19038: LD_INT 1
19040: DEC
19041: ST_TO_ADDR
19042: LD_VAR 0 6
19046: PUSH
19047: FOR_TO
19048: IFFALSE 19130
// begin uc_side = side ;
19050: LD_ADDR_OWVAR 20
19054: PUSH
19055: LD_VAR 0 1
19059: ST_TO_ADDR
// uc_nation = nation ;
19060: LD_ADDR_OWVAR 21
19064: PUSH
19065: LD_VAR 0 2
19069: ST_TO_ADDR
// hc_name =  ;
19070: LD_ADDR_OWVAR 26
19074: PUSH
19075: LD_STRING 
19077: ST_TO_ADDR
// hc_gallery =  ;
19078: LD_ADDR_OWVAR 33
19082: PUSH
19083: LD_STRING 
19085: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
19086: LD_INT 0
19088: PPUSH
19089: LD_INT 8
19091: PPUSH
19092: LD_VAR 0 8
19096: PPUSH
19097: CALL_OW 380
// un = CreateHuman ;
19101: LD_ADDR_VAR 0 15
19105: PUSH
19106: CALL_OW 44
19110: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19111: LD_VAR 0 15
19115: PPUSH
19116: LD_VAR 0 9
19120: PPUSH
19121: LD_INT 0
19123: PPUSH
19124: CALL_OW 49
// end ;
19128: GO 19047
19130: POP
19131: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
19132: LD_ADDR_VAR 0 18
19136: PUSH
19137: LD_INT 22
19139: PUSH
19140: LD_VAR 0 1
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 2
19151: PUSH
19152: LD_INT 25
19154: PUSH
19155: LD_INT 1
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 25
19164: PUSH
19165: LD_INT 5
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 25
19174: PUSH
19175: LD_INT 8
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: LD_INT 25
19184: PUSH
19185: LD_INT 9
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PPUSH
19203: CALL_OW 69
19207: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
19208: LD_ADDR_VAR 0 17
19212: PUSH
19213: LD_INT 22
19215: PUSH
19216: LD_VAR 0 1
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 25
19227: PUSH
19228: LD_INT 4
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PPUSH
19239: CALL_OW 69
19243: ST_TO_ADDR
// for i in medic_list do
19244: LD_ADDR_VAR 0 13
19248: PUSH
19249: LD_VAR 0 17
19253: PUSH
19254: FOR_IN
19255: IFFALSE 19273
// ComMoveToArea ( i , healArea ) ;
19257: LD_VAR 0 13
19261: PPUSH
19262: LD_VAR 0 10
19266: PPUSH
19267: CALL_OW 113
19271: GO 19254
19273: POP
19274: POP
// repeat wait ( 0 0$1 ) ;
19275: LD_INT 35
19277: PPUSH
19278: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
19282: LD_ADDR_VAR 0 16
19286: PUSH
19287: LD_INT 22
19289: PUSH
19290: LD_VAR 0 1
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 1
19301: PUSH
19302: LD_INT 3
19304: PUSH
19305: LD_INT 24
19307: PUSH
19308: LD_INT 550
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 24
19321: PUSH
19322: LD_INT 250
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: LIST
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PPUSH
19338: CALL_OW 69
19342: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
19343: LD_ADDR_VAR 0 18
19347: PUSH
19348: LD_INT 22
19350: PUSH
19351: LD_VAR 0 1
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PUSH
19360: LD_INT 2
19362: PUSH
19363: LD_INT 25
19365: PUSH
19366: LD_INT 1
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 25
19375: PUSH
19376: LD_INT 5
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 25
19385: PUSH
19386: LD_INT 8
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 25
19395: PUSH
19396: LD_INT 9
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 24
19412: PUSH
19413: LD_INT 1000
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: LIST
19424: PPUSH
19425: CALL_OW 69
19429: ST_TO_ADDR
// if medicCount > 0 then
19430: LD_VAR 0 7
19434: PUSH
19435: LD_INT 0
19437: GREATER
19438: IFFALSE 19512
// begin if damageUnit_list > 0 then
19440: LD_VAR 0 16
19444: PUSH
19445: LD_INT 0
19447: GREATER
19448: IFFALSE 19512
// begin for i in damageUnit_list do
19450: LD_ADDR_VAR 0 13
19454: PUSH
19455: LD_VAR 0 16
19459: PUSH
19460: FOR_IN
19461: IFFALSE 19510
// begin ComMoveToArea ( i , healArea ) ;
19463: LD_VAR 0 13
19467: PPUSH
19468: LD_VAR 0 10
19472: PPUSH
19473: CALL_OW 113
// for j in medic_list do
19477: LD_ADDR_VAR 0 14
19481: PUSH
19482: LD_VAR 0 17
19486: PUSH
19487: FOR_IN
19488: IFFALSE 19506
// AddComHeal ( j , i ) ;
19490: LD_VAR 0 14
19494: PPUSH
19495: LD_VAR 0 13
19499: PPUSH
19500: CALL_OW 188
19504: GO 19487
19506: POP
19507: POP
// end ;
19508: GO 19460
19510: POP
19511: POP
// end ; end ; for i in soldiersOK_list do
19512: LD_ADDR_VAR 0 13
19516: PUSH
19517: LD_VAR 0 18
19521: PUSH
19522: FOR_IN
19523: IFFALSE 19699
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19525: LD_ADDR_VAR 0 21
19529: PUSH
19530: LD_INT 22
19532: PUSH
19533: LD_VAR 0 11
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PPUSH
19542: CALL_OW 69
19546: PPUSH
19547: LD_VAR 0 13
19551: PPUSH
19552: CALL_OW 74
19556: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19557: LD_ADDR_VAR 0 22
19561: PUSH
19562: LD_INT 22
19564: PUSH
19565: LD_VAR 0 11
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 2
19576: PUSH
19577: LD_INT 59
19579: PUSH
19580: EMPTY
19581: LIST
19582: PUSH
19583: LD_INT 21
19585: PUSH
19586: LD_INT 1
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: LD_INT 21
19595: PUSH
19596: LD_INT 2
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: EMPTY
19614: LIST
19615: PPUSH
19616: CALL_OW 69
19620: PPUSH
19621: LD_VAR 0 13
19625: PPUSH
19626: CALL_OW 74
19630: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19631: LD_VAR 0 13
19635: PPUSH
19636: LD_VAR 0 21
19640: PPUSH
19641: CALL_OW 296
19645: PUSH
19646: LD_INT 8
19648: PLUS
19649: PUSH
19650: LD_VAR 0 13
19654: PPUSH
19655: LD_VAR 0 22
19659: PPUSH
19660: CALL_OW 296
19664: LESS
19665: IFFALSE 19683
// begin ComAttackUnit ( i , target1 ) ;
19667: LD_VAR 0 13
19671: PPUSH
19672: LD_VAR 0 21
19676: PPUSH
19677: CALL_OW 115
// end else
19681: GO 19697
// begin ComAttackUnit ( i , target2 ) ;
19683: LD_VAR 0 13
19687: PPUSH
19688: LD_VAR 0 22
19692: PPUSH
19693: CALL_OW 115
// end ; end ;
19697: GO 19522
19699: POP
19700: POP
// for i in soldiersOK_list do
19701: LD_ADDR_VAR 0 13
19705: PUSH
19706: LD_VAR 0 18
19710: PUSH
19711: FOR_IN
19712: IFFALSE 19888
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19714: LD_ADDR_VAR 0 21
19718: PUSH
19719: LD_INT 22
19721: PUSH
19722: LD_VAR 0 11
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PPUSH
19731: CALL_OW 69
19735: PPUSH
19736: LD_VAR 0 13
19740: PPUSH
19741: CALL_OW 74
19745: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19746: LD_ADDR_VAR 0 22
19750: PUSH
19751: LD_INT 22
19753: PUSH
19754: LD_VAR 0 11
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 2
19765: PUSH
19766: LD_INT 59
19768: PUSH
19769: EMPTY
19770: LIST
19771: PUSH
19772: LD_INT 21
19774: PUSH
19775: LD_INT 1
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 21
19784: PUSH
19785: LD_INT 2
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: EMPTY
19803: LIST
19804: PPUSH
19805: CALL_OW 69
19809: PPUSH
19810: LD_VAR 0 13
19814: PPUSH
19815: CALL_OW 74
19819: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19820: LD_VAR 0 13
19824: PPUSH
19825: LD_VAR 0 21
19829: PPUSH
19830: CALL_OW 296
19834: PUSH
19835: LD_INT 8
19837: PLUS
19838: PUSH
19839: LD_VAR 0 13
19843: PPUSH
19844: LD_VAR 0 22
19848: PPUSH
19849: CALL_OW 296
19853: LESS
19854: IFFALSE 19872
// begin ComAttackUnit ( i , target1 ) ;
19856: LD_VAR 0 13
19860: PPUSH
19861: LD_VAR 0 21
19865: PPUSH
19866: CALL_OW 115
// end else
19870: GO 19886
// begin ComAttackUnit ( i , target2 ) ;
19872: LD_VAR 0 13
19876: PPUSH
19877: LD_VAR 0 22
19881: PPUSH
19882: CALL_OW 115
// end ; end ;
19886: GO 19711
19888: POP
19889: POP
// until soldiersOK_list = [ ] ;
19890: LD_VAR 0 18
19894: PUSH
19895: EMPTY
19896: EQUAL
19897: IFFALSE 19275
// end ;
19899: LD_VAR 0 12
19903: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
19904: LD_INT 0
19906: PPUSH
19907: PPUSH
19908: PPUSH
19909: PPUSH
19910: PPUSH
19911: PPUSH
19912: PPUSH
// repeat wait ( 0 0$1 ) ;
19913: LD_INT 35
19915: PPUSH
19916: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
19920: LD_ADDR_VAR 0 7
19924: PUSH
19925: LD_INT 22
19927: PUSH
19928: LD_INT 2
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 25
19937: PUSH
19938: LD_INT 4
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 3
19947: PUSH
19948: LD_INT 60
19950: PUSH
19951: EMPTY
19952: LIST
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: LIST
19962: PPUSH
19963: CALL_OW 69
19967: ST_TO_ADDR
// if not tmp then
19968: LD_VAR 0 7
19972: NOT
19973: IFFALSE 19977
// continue ;
19975: GO 19913
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19977: LD_ADDR_VAR 0 3
19981: PUSH
19982: LD_INT 5
19984: PPUSH
19985: LD_INT 22
19987: PUSH
19988: LD_INT 0
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 25
19997: PUSH
19998: LD_INT 12
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PPUSH
20009: CALL_OW 70
20013: PUSH
20014: FOR_IN
20015: IFFALSE 20048
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
20017: LD_VAR 0 7
20021: PPUSH
20022: LD_VAR 0 3
20026: PPUSH
20027: CALL_OW 250
20031: PPUSH
20032: LD_VAR 0 3
20036: PPUSH
20037: CALL_OW 251
20041: PPUSH
20042: CALL_OW 131
20046: GO 20014
20048: POP
20049: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
20050: LD_INT 22
20052: PUSH
20053: LD_INT 2
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: LD_INT 25
20062: PUSH
20063: LD_INT 4
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PPUSH
20074: CALL_OW 69
20078: PUSH
20079: LD_INT 0
20081: EQUAL
20082: PUSH
20083: LD_INT 5
20085: PPUSH
20086: LD_INT 22
20088: PUSH
20089: LD_INT 0
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 25
20098: PUSH
20099: LD_INT 12
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PPUSH
20110: CALL_OW 70
20114: PUSH
20115: LD_INT 2
20117: LESS
20118: OR
20119: PUSH
20120: LD_OWVAR 1
20124: PUSH
20125: LD_INT 7000
20127: GREATEREQUAL
20128: OR
20129: IFFALSE 19913
// repeat wait ( 0 0$1 ) ;
20131: LD_INT 35
20133: PPUSH
20134: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
20138: LD_ADDR_VAR 0 5
20142: PUSH
20143: LD_INT 22
20145: PUSH
20146: LD_INT 2
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 30
20155: PUSH
20156: LD_INT 5
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PPUSH
20167: CALL_OW 69
20171: ST_TO_ADDR
// until arm ;
20172: LD_VAR 0 5
20176: IFFALSE 20131
// wait ( 0 0$25 ) ;
20178: LD_INT 875
20180: PPUSH
20181: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20185: LD_ADDR_VAR 0 6
20189: PUSH
20190: LD_INT 22
20192: PUSH
20193: LD_INT 2
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: PUSH
20200: LD_INT 2
20202: PUSH
20203: LD_INT 30
20205: PUSH
20206: LD_INT 0
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 30
20215: PUSH
20216: LD_INT 1
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: LIST
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PPUSH
20232: CALL_OW 69
20236: ST_TO_ADDR
// j := 0 ;
20237: LD_ADDR_VAR 0 3
20241: PUSH
20242: LD_INT 0
20244: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
20245: LD_ADDR_VAR 0 2
20249: PUSH
20250: LD_INT 22
20252: PUSH
20253: LD_INT 2
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 25
20262: PUSH
20263: LD_INT 12
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PPUSH
20274: CALL_OW 69
20278: PUSH
20279: FOR_IN
20280: IFFALSE 20367
// begin ComMoveXY ( i , 63 , 16 ) ;
20282: LD_VAR 0 2
20286: PPUSH
20287: LD_INT 63
20289: PPUSH
20290: LD_INT 16
20292: PPUSH
20293: CALL_OW 111
// j := j + 1 ;
20297: LD_ADDR_VAR 0 3
20301: PUSH
20302: LD_VAR 0 3
20306: PUSH
20307: LD_INT 1
20309: PLUS
20310: ST_TO_ADDR
// if j < 5 then
20311: LD_VAR 0 3
20315: PUSH
20316: LD_INT 5
20318: LESS
20319: IFFALSE 20337
// b := arm [ 1 ] else
20321: LD_ADDR_VAR 0 4
20325: PUSH
20326: LD_VAR 0 5
20330: PUSH
20331: LD_INT 1
20333: ARRAY
20334: ST_TO_ADDR
20335: GO 20351
// b := dep [ 1 ] ;
20337: LD_ADDR_VAR 0 4
20341: PUSH
20342: LD_VAR 0 6
20346: PUSH
20347: LD_INT 1
20349: ARRAY
20350: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
20351: LD_VAR 0 2
20355: PPUSH
20356: LD_VAR 0 4
20360: PPUSH
20361: CALL_OW 180
// end ;
20365: GO 20279
20367: POP
20368: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
20369: LD_ADDR_VAR 0 2
20373: PUSH
20374: LD_INT 22
20376: PUSH
20377: LD_INT 2
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: LD_INT 25
20386: PUSH
20387: LD_INT 4
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PPUSH
20398: CALL_OW 69
20402: PUSH
20403: FOR_IN
20404: IFFALSE 20450
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
20406: LD_VAR 0 2
20410: PPUSH
20411: LD_INT 22
20413: PUSH
20414: LD_INT 2
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 30
20423: PUSH
20424: LD_INT 8
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PPUSH
20435: CALL_OW 69
20439: PUSH
20440: LD_INT 1
20442: ARRAY
20443: PPUSH
20444: CALL_OW 120
20448: GO 20403
20450: POP
20451: POP
// end ;
20452: LD_VAR 0 1
20456: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
20457: LD_INT 0
20459: PPUSH
20460: PPUSH
20461: PPUSH
20462: PPUSH
20463: PPUSH
20464: PPUSH
20465: PPUSH
20466: PPUSH
20467: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
20468: LD_INT 22
20470: PUSH
20471: LD_VAR 0 1
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: LD_INT 21
20482: PUSH
20483: LD_INT 2
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PPUSH
20494: CALL_OW 69
20498: PUSH
20499: LD_VAR 0 3
20503: LESSEQUAL
20504: IFFALSE 20648
// for i = 1 to vehCount do
20506: LD_ADDR_VAR 0 10
20510: PUSH
20511: DOUBLE
20512: LD_INT 1
20514: DEC
20515: ST_TO_ADDR
20516: LD_VAR 0 3
20520: PUSH
20521: FOR_TO
20522: IFFALSE 20646
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
20524: LD_ADDR_VAR 0 12
20528: PUSH
20529: LD_VAR 0 5
20533: PUSH
20534: LD_INT 1
20536: PPUSH
20537: LD_VAR 0 5
20541: PPUSH
20542: CALL_OW 12
20546: ARRAY
20547: ST_TO_ADDR
// if randWeapon = 46 then
20548: LD_VAR 0 12
20552: PUSH
20553: LD_INT 46
20555: EQUAL
20556: IFFALSE 20601
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
20558: LD_VAR 0 2
20562: PPUSH
20563: LD_INT 24
20565: PPUSH
20566: LD_VAR 0 6
20570: PPUSH
20571: LD_VAR 0 7
20575: PUSH
20576: LD_INT 1
20578: PPUSH
20579: LD_VAR 0 7
20583: PPUSH
20584: CALL_OW 12
20588: ARRAY
20589: PPUSH
20590: LD_VAR 0 12
20594: PPUSH
20595: CALL_OW 185
20599: GO 20644
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
20601: LD_VAR 0 2
20605: PPUSH
20606: LD_VAR 0 8
20610: PPUSH
20611: LD_VAR 0 6
20615: PPUSH
20616: LD_VAR 0 7
20620: PUSH
20621: LD_INT 1
20623: PPUSH
20624: LD_VAR 0 7
20628: PPUSH
20629: CALL_OW 12
20633: ARRAY
20634: PPUSH
20635: LD_VAR 0 12
20639: PPUSH
20640: CALL_OW 185
// end ;
20644: GO 20521
20646: POP
20647: POP
// repeat wait ( 0 0$1 ) ;
20648: LD_INT 35
20650: PPUSH
20651: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
20655: LD_INT 22
20657: PUSH
20658: LD_VAR 0 1
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: PUSH
20667: LD_INT 21
20669: PUSH
20670: LD_INT 2
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 24
20679: PUSH
20680: LD_INT 250
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: LIST
20691: PPUSH
20692: CALL_OW 69
20696: PUSH
20697: LD_VAR 0 3
20701: GREATEREQUAL
20702: IFFALSE 20648
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
20704: LD_INT 22
20706: PUSH
20707: LD_VAR 0 1
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 21
20718: PUSH
20719: LD_INT 2
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 24
20728: PUSH
20729: LD_INT 250
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: LIST
20740: PPUSH
20741: CALL_OW 69
20745: PUSH
20746: LD_VAR 0 3
20750: GREATEREQUAL
20751: IFFALSE 21094
// begin repeat begin wait ( 0 0$1 ) ;
20753: LD_INT 35
20755: PPUSH
20756: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
20760: LD_INT 22
20762: PUSH
20763: LD_VAR 0 1
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 21
20774: PUSH
20775: LD_INT 2
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 24
20784: PUSH
20785: LD_INT 651
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: LIST
20796: PPUSH
20797: CALL_OW 69
20801: PUSH
20802: LD_INT 0
20804: GREATER
20805: IFFALSE 21033
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
20807: LD_ADDR_VAR 0 10
20811: PUSH
20812: LD_INT 22
20814: PUSH
20815: LD_VAR 0 1
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PUSH
20824: LD_INT 21
20826: PUSH
20827: LD_INT 2
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 24
20836: PUSH
20837: LD_INT 651
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: LIST
20848: PPUSH
20849: CALL_OW 69
20853: PUSH
20854: FOR_IN
20855: IFFALSE 21031
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20857: LD_ADDR_VAR 0 16
20861: PUSH
20862: LD_INT 22
20864: PUSH
20865: LD_VAR 0 4
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PPUSH
20874: CALL_OW 69
20878: PPUSH
20879: LD_VAR 0 10
20883: PPUSH
20884: CALL_OW 74
20888: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20889: LD_ADDR_VAR 0 17
20893: PUSH
20894: LD_INT 22
20896: PUSH
20897: LD_VAR 0 4
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 2
20908: PUSH
20909: LD_INT 59
20911: PUSH
20912: EMPTY
20913: LIST
20914: PUSH
20915: LD_INT 21
20917: PUSH
20918: LD_INT 1
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 21
20927: PUSH
20928: LD_INT 2
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: EMPTY
20946: LIST
20947: PPUSH
20948: CALL_OW 69
20952: PPUSH
20953: LD_VAR 0 10
20957: PPUSH
20958: CALL_OW 74
20962: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20963: LD_VAR 0 10
20967: PPUSH
20968: LD_VAR 0 16
20972: PPUSH
20973: CALL_OW 296
20977: PUSH
20978: LD_INT 8
20980: PLUS
20981: PUSH
20982: LD_VAR 0 10
20986: PPUSH
20987: LD_VAR 0 17
20991: PPUSH
20992: CALL_OW 296
20996: LESS
20997: IFFALSE 21015
// begin ComAttackUnit ( i , target1 ) ;
20999: LD_VAR 0 10
21003: PPUSH
21004: LD_VAR 0 16
21008: PPUSH
21009: CALL_OW 115
// end else
21013: GO 21029
// begin ComAttackUnit ( i , target2 ) ;
21015: LD_VAR 0 10
21019: PPUSH
21020: LD_VAR 0 17
21024: PPUSH
21025: CALL_OW 115
// end ; end ;
21029: GO 20854
21031: POP
21032: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
21033: LD_INT 22
21035: PUSH
21036: LD_VAR 0 1
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 21
21047: PUSH
21048: LD_INT 2
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PPUSH
21059: CALL_OW 69
21063: PUSH
21064: LD_INT 0
21066: EQUAL
21067: PUSH
21068: LD_INT 22
21070: PUSH
21071: LD_VAR 0 4
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: EMPTY
21081: LIST
21082: PPUSH
21083: CALL_OW 69
21087: PUSH
21088: LD_INT 0
21090: EQUAL
21091: OR
21092: IFFALSE 20753
// end ; end ;
21094: LD_VAR 0 9
21098: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
21099: LD_INT 0
21101: PPUSH
21102: PPUSH
21103: PPUSH
21104: PPUSH
// r := 100 ;
21105: LD_ADDR_VAR 0 5
21109: PUSH
21110: LD_INT 100
21112: ST_TO_ADDR
// x := 0 ;
21113: LD_ADDR_VAR 0 6
21117: PUSH
21118: LD_INT 0
21120: ST_TO_ADDR
// while ( x < n ) do
21121: LD_VAR 0 6
21125: PUSH
21126: LD_VAR 0 2
21130: LESS
21131: IFFALSE 21418
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
21133: LD_ADDR_VAR 0 4
21137: PUSH
21138: DOUBLE
21139: LD_INT 1
21141: DEC
21142: ST_TO_ADDR
21143: LD_VAR 0 1
21147: PPUSH
21148: LD_INT 0
21150: PPUSH
21151: CALL_OW 517
21155: PUSH
21156: LD_INT 1
21158: ARRAY
21159: PUSH
21160: FOR_TO
21161: IFFALSE 21414
// begin if r > 50 then
21163: LD_VAR 0 5
21167: PUSH
21168: LD_INT 50
21170: GREATER
21171: IFFALSE 21390
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
21173: LD_VAR 0 1
21177: PPUSH
21178: LD_INT 0
21180: PPUSH
21181: CALL_OW 517
21185: PUSH
21186: LD_INT 1
21188: ARRAY
21189: PUSH
21190: LD_VAR 0 4
21194: ARRAY
21195: PPUSH
21196: LD_VAR 0 1
21200: PPUSH
21201: LD_INT 0
21203: PPUSH
21204: CALL_OW 517
21208: PUSH
21209: LD_INT 2
21211: ARRAY
21212: PUSH
21213: LD_VAR 0 4
21217: ARRAY
21218: PPUSH
21219: CALL_OW 458
21223: NOT
21224: IFFALSE 21374
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
21226: LD_VAR 0 1
21230: PPUSH
21231: LD_INT 0
21233: PPUSH
21234: CALL_OW 517
21238: PUSH
21239: LD_INT 1
21241: ARRAY
21242: PUSH
21243: LD_VAR 0 4
21247: ARRAY
21248: PPUSH
21249: LD_VAR 0 1
21253: PPUSH
21254: LD_INT 0
21256: PPUSH
21257: CALL_OW 517
21261: PUSH
21262: LD_INT 2
21264: ARRAY
21265: PUSH
21266: LD_VAR 0 4
21270: ARRAY
21271: PPUSH
21272: LD_INT 5
21274: PPUSH
21275: LD_INT 0
21277: PPUSH
21278: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
21282: LD_ADDR_EXP 50
21286: PUSH
21287: LD_EXP 50
21291: PPUSH
21292: LD_INT 1
21294: PPUSH
21295: LD_VAR 0 1
21299: PPUSH
21300: LD_INT 0
21302: PPUSH
21303: CALL_OW 517
21307: PUSH
21308: LD_INT 1
21310: ARRAY
21311: PUSH
21312: LD_VAR 0 4
21316: ARRAY
21317: PUSH
21318: LD_VAR 0 1
21322: PPUSH
21323: LD_INT 0
21325: PPUSH
21326: CALL_OW 517
21330: PUSH
21331: LD_INT 2
21333: ARRAY
21334: PUSH
21335: LD_VAR 0 4
21339: ARRAY
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PPUSH
21345: CALL_OW 2
21349: ST_TO_ADDR
// r := 0 ;
21350: LD_ADDR_VAR 0 5
21354: PUSH
21355: LD_INT 0
21357: ST_TO_ADDR
// x := x + 1 ;
21358: LD_ADDR_VAR 0 6
21362: PUSH
21363: LD_VAR 0 6
21367: PUSH
21368: LD_INT 1
21370: PLUS
21371: ST_TO_ADDR
// end else
21372: GO 21388
// r := r + 35 ;
21374: LD_ADDR_VAR 0 5
21378: PUSH
21379: LD_VAR 0 5
21383: PUSH
21384: LD_INT 35
21386: PLUS
21387: ST_TO_ADDR
// end else
21388: GO 21412
// r := r + rand ( 10 , 25 ) ;
21390: LD_ADDR_VAR 0 5
21394: PUSH
21395: LD_VAR 0 5
21399: PUSH
21400: LD_INT 10
21402: PPUSH
21403: LD_INT 25
21405: PPUSH
21406: CALL_OW 12
21410: PLUS
21411: ST_TO_ADDR
// end ;
21412: GO 21160
21414: POP
21415: POP
21416: GO 21121
// end ; end_of_file
21418: LD_VAR 0 3
21422: RET
// every 0 0$1 trigger russianAI = 1 do
21423: LD_EXP 39
21427: PUSH
21428: LD_INT 1
21430: EQUAL
21431: IFFALSE 21650
21433: GO 21435
21435: DISABLE
// begin enable ;
21436: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
21437: LD_INT 3
21439: PPUSH
21440: LD_EXP 30
21444: PPUSH
21445: CALL 15901 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
21449: LD_INT 3
21451: PPUSH
21452: LD_EXP 42
21456: PPUSH
21457: CALL 16261 0 2
// if ruPossition = 1 then
21461: LD_EXP 41
21465: PUSH
21466: LD_INT 1
21468: EQUAL
21469: IFFALSE 21524
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21471: LD_INT 3
21473: PPUSH
21474: LD_INT 13
21476: PPUSH
21477: LD_INT 10
21479: PPUSH
21480: LD_INT 22
21482: PUSH
21483: LD_INT 3
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 21
21492: PUSH
21493: LD_INT 3
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 30
21502: PUSH
21503: LD_INT 8
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: LIST
21514: PPUSH
21515: CALL_OW 69
21519: PPUSH
21520: CALL 16467 0 4
// if ruPossition = 2 then
21524: LD_EXP 41
21528: PUSH
21529: LD_INT 2
21531: EQUAL
21532: IFFALSE 21587
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21534: LD_INT 3
21536: PPUSH
21537: LD_INT 14
21539: PPUSH
21540: LD_INT 11
21542: PPUSH
21543: LD_INT 22
21545: PUSH
21546: LD_INT 3
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 21
21555: PUSH
21556: LD_INT 3
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 30
21565: PUSH
21566: LD_INT 8
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: LIST
21577: PPUSH
21578: CALL_OW 69
21582: PPUSH
21583: CALL 16467 0 4
// if ruPossition = 3 then
21587: LD_EXP 41
21591: PUSH
21592: LD_INT 3
21594: EQUAL
21595: IFFALSE 21650
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21597: LD_INT 3
21599: PPUSH
21600: LD_INT 15
21602: PPUSH
21603: LD_INT 12
21605: PPUSH
21606: LD_INT 22
21608: PUSH
21609: LD_INT 3
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 21
21618: PUSH
21619: LD_INT 3
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: LD_INT 30
21628: PUSH
21629: LD_INT 8
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: LIST
21640: PPUSH
21641: CALL_OW 69
21645: PPUSH
21646: CALL 16467 0 4
// end ;
21650: END
// every 0 0$1 do
21651: GO 21653
21653: DISABLE
// begin enable ;
21654: ENABLE
// if ruPossition = 1 then
21655: LD_EXP 41
21659: PUSH
21660: LD_INT 1
21662: EQUAL
21663: IFFALSE 21675
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
21665: LD_INT 3
21667: PPUSH
21668: LD_INT 10
21670: PPUSH
21671: CALL 15538 0 2
// if ruPossition = 2 then
21675: LD_EXP 41
21679: PUSH
21680: LD_INT 2
21682: EQUAL
21683: IFFALSE 21695
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
21685: LD_INT 3
21687: PPUSH
21688: LD_INT 11
21690: PPUSH
21691: CALL 15538 0 2
// if ruPossition = 3 then
21695: LD_EXP 41
21699: PUSH
21700: LD_INT 3
21702: EQUAL
21703: IFFALSE 21715
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
21705: LD_INT 3
21707: PPUSH
21708: LD_INT 12
21710: PPUSH
21711: CALL 15538 0 2
// IntBazooka ( 3 , 1 ) ;
21715: LD_INT 3
21717: PPUSH
21718: LD_INT 1
21720: PPUSH
21721: CALL 14337 0 2
// IntBazooka ( 6 , 1 ) ;
21725: LD_INT 6
21727: PPUSH
21728: LD_INT 1
21730: PPUSH
21731: CALL 14337 0 2
// end ;
21735: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
21736: LD_EXP 39
21740: PUSH
21741: LD_INT 1
21743: EQUAL
21744: PUSH
21745: LD_EXP 35
21749: PPUSH
21750: CALL_OW 302
21754: AND
21755: PUSH
21756: LD_EXP 35
21760: PPUSH
21761: CALL_OW 255
21765: PUSH
21766: LD_INT 3
21768: EQUAL
21769: AND
21770: PUSH
21771: LD_INT 22
21773: PUSH
21774: LD_INT 3
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: LD_INT 21
21783: PUSH
21784: LD_INT 2
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PUSH
21791: LD_INT 33
21793: PUSH
21794: LD_INT 3
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: LIST
21805: PPUSH
21806: CALL_OW 69
21810: PUSH
21811: LD_INT 0
21813: EQUAL
21814: AND
21815: IFFALSE 22023
21817: GO 21819
21819: DISABLE
// begin enable ;
21820: ENABLE
// if Difficulty = 1 then
21821: LD_OWVAR 67
21825: PUSH
21826: LD_INT 1
21828: EQUAL
21829: IFFALSE 21891
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
21831: LD_INT 3
21833: PPUSH
21834: LD_EXP 35
21838: PPUSH
21839: LD_INT 5
21841: PPUSH
21842: LD_INT 8
21844: PPUSH
21845: CALL_OW 12
21849: PPUSH
21850: LD_INT 1
21852: PPUSH
21853: LD_INT 43
21855: PUSH
21856: LD_INT 44
21858: PUSH
21859: LD_INT 45
21861: PUSH
21862: LD_INT 46
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: PPUSH
21871: LD_INT 1
21873: PPUSH
21874: LD_INT 3
21876: PUSH
21877: LD_INT 3
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PPUSH
21884: LD_INT 22
21886: PPUSH
21887: CALL 20457 0 8
// if Difficulty = 2 then
21891: LD_OWVAR 67
21895: PUSH
21896: LD_INT 2
21898: EQUAL
21899: IFFALSE 21957
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
21901: LD_INT 3
21903: PPUSH
21904: LD_EXP 35
21908: PPUSH
21909: LD_INT 6
21911: PPUSH
21912: LD_INT 8
21914: PPUSH
21915: CALL_OW 12
21919: PPUSH
21920: LD_INT 1
21922: PPUSH
21923: LD_INT 44
21925: PUSH
21926: LD_INT 45
21928: PUSH
21929: LD_INT 46
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: LIST
21936: PPUSH
21937: LD_INT 1
21939: PPUSH
21940: LD_INT 3
21942: PUSH
21943: LD_INT 3
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PPUSH
21950: LD_INT 22
21952: PPUSH
21953: CALL 20457 0 8
// if Difficulty = 3 then
21957: LD_OWVAR 67
21961: PUSH
21962: LD_INT 3
21964: EQUAL
21965: IFFALSE 22023
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
21967: LD_INT 3
21969: PPUSH
21970: LD_EXP 35
21974: PPUSH
21975: LD_INT 7
21977: PPUSH
21978: LD_INT 8
21980: PPUSH
21981: CALL_OW 12
21985: PPUSH
21986: LD_INT 1
21988: PPUSH
21989: LD_INT 44
21991: PUSH
21992: LD_INT 45
21994: PUSH
21995: LD_INT 46
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: LIST
22002: PPUSH
22003: LD_INT 1
22005: PPUSH
22006: LD_INT 3
22008: PUSH
22009: LD_INT 3
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PPUSH
22016: LD_INT 22
22018: PPUSH
22019: CALL 20457 0 8
// end ;
22023: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
22024: LD_EXP 50
22028: PUSH
22029: LD_EXP 49
22033: AND
22034: IFFALSE 22155
22036: GO 22038
22038: DISABLE
22039: LD_INT 0
22041: PPUSH
// begin enable ;
22042: ENABLE
// for i in arabianMines do
22043: LD_ADDR_VAR 0 1
22047: PUSH
22048: LD_EXP 50
22052: PUSH
22053: FOR_IN
22054: IFFALSE 22153
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
22056: LD_INT 22
22058: PUSH
22059: LD_INT 1
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 92
22068: PUSH
22069: LD_VAR 0 1
22073: PUSH
22074: LD_INT 1
22076: ARRAY
22077: PUSH
22078: LD_VAR 0 1
22082: PUSH
22083: LD_INT 2
22085: ARRAY
22086: PUSH
22087: LD_INT 3
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PPUSH
22100: CALL_OW 69
22104: IFFALSE 22151
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
22106: LD_VAR 0 1
22110: PUSH
22111: LD_INT 1
22113: ARRAY
22114: PPUSH
22115: LD_VAR 0 1
22119: PUSH
22120: LD_INT 2
22122: ARRAY
22123: PPUSH
22124: LD_INT 5
22126: PPUSH
22127: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
22131: LD_ADDR_EXP 50
22135: PUSH
22136: LD_EXP 50
22140: PPUSH
22141: LD_VAR 0 1
22145: PPUSH
22146: CALL_OW 3
22150: ST_TO_ADDR
// end ; end ;
22151: GO 22053
22153: POP
22154: POP
// end ; end_of_file
22155: PPOPN 1
22157: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
22158: LD_VAR 0 1
22162: PPUSH
22163: CALL_OW 255
22167: PUSH
22168: LD_INT 4
22170: EQUAL
22171: IFFALSE 22185
// SetBName ( building , epsilon ) ;
22173: LD_VAR 0 1
22177: PPUSH
22178: LD_STRING epsilon
22180: PPUSH
22181: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
22185: LD_VAR 0 1
22189: PPUSH
22190: CALL_OW 255
22194: PUSH
22195: LD_INT 1
22197: EQUAL
22198: PUSH
22199: LD_VAR 0 1
22203: PPUSH
22204: CALL_OW 266
22208: PUSH
22209: LD_INT 0
22211: EQUAL
22212: AND
22213: IFFALSE 22227
// SetBName ( building , epsilon ) ;
22215: LD_VAR 0 1
22219: PPUSH
22220: LD_STRING epsilon
22222: PPUSH
22223: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
22227: LD_VAR 0 1
22231: PPUSH
22232: CALL_OW 255
22236: PUSH
22237: LD_INT 3
22239: EQUAL
22240: PUSH
22241: LD_VAR 0 1
22245: PPUSH
22246: CALL_OW 266
22250: PUSH
22251: LD_INT 0
22253: EQUAL
22254: AND
22255: IFFALSE 22269
// SetBName ( building , chuikov ) ;
22257: LD_VAR 0 1
22261: PPUSH
22262: LD_STRING chuikov
22264: PPUSH
22265: CALL_OW 500
// if GetSide ( building ) = 2 then
22269: LD_VAR 0 1
22273: PPUSH
22274: CALL_OW 255
22278: PUSH
22279: LD_INT 2
22281: EQUAL
22282: IFFALSE 22338
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22284: LD_VAR 0 1
22288: PPUSH
22289: CALL_OW 266
22293: PUSH
22294: LD_INT 6
22296: EQUAL
22297: PUSH
22298: LD_VAR 0 1
22302: PPUSH
22303: CALL_OW 266
22307: PUSH
22308: LD_INT 9
22310: EQUAL
22311: OR
22312: IFFALSE 22338
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22314: LD_VAR 0 1
22318: PPUSH
22319: LD_INT 10
22321: PPUSH
22322: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22326: LD_VAR 0 1
22330: PPUSH
22331: LD_INT 11
22333: PPUSH
22334: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
22338: LD_VAR 0 1
22342: PPUSH
22343: CALL_OW 255
22347: PUSH
22348: LD_INT 3
22350: EQUAL
22351: IFFALSE 22385
// begin ruDepotConstructed := true ;
22353: LD_ADDR_EXP 57
22357: PUSH
22358: LD_INT 1
22360: ST_TO_ADDR
// if GetBType ( building ) = 2 then
22361: LD_VAR 0 1
22365: PPUSH
22366: CALL_OW 266
22370: PUSH
22371: LD_INT 2
22373: EQUAL
22374: IFFALSE 22385
// AddComUpgrade ( building ) ;
22376: LD_VAR 0 1
22380: PPUSH
22381: CALL_OW 206
// end ; end ;
22385: PPOPN 2
22387: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
22388: LD_INT 0
22390: PPUSH
22391: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
22392: LD_VAR 0 1
22396: PUSH
22397: LD_INT 22
22399: PUSH
22400: LD_INT 3
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 23
22409: PUSH
22410: LD_INT 3
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 21
22419: PUSH
22420: LD_INT 2
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: LIST
22431: PPUSH
22432: CALL_OW 69
22436: IN
22437: PUSH
22438: LD_EXP 61
22442: NOT
22443: AND
22444: IFFALSE 22475
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
22446: LD_ADDR_EXP 61
22450: PUSH
22451: LD_VAR 0 1
22455: PPUSH
22456: CALL_OW 250
22460: PUSH
22461: LD_VAR 0 1
22465: PPUSH
22466: CALL_OW 251
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: ST_TO_ADDR
// end ;
22475: PPOPN 3
22477: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
22478: LD_VAR 0 2
22482: PPUSH
22483: CALL_OW 255
22487: PUSH
22488: LD_INT 3
22490: EQUAL
22491: PUSH
22492: LD_EXP 35
22496: PPUSH
22497: CALL_OW 255
22501: PUSH
22502: LD_INT 3
22504: EQUAL
22505: AND
22506: PUSH
22507: LD_EXP 35
22511: PPUSH
22512: CALL_OW 302
22516: AND
22517: IFFALSE 22533
// ComEnterUnit ( human , ruFab ) ;
22519: LD_VAR 0 2
22523: PPUSH
22524: LD_EXP 35
22528: PPUSH
22529: CALL_OW 120
// end ;
22533: PPOPN 2
22535: END
// on BuildingComplete ( building ) do var i , engineers , sol , tmp ;
22536: LD_INT 0
22538: PPUSH
22539: PPUSH
22540: PPUSH
22541: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22542: LD_VAR 0 1
22546: PPUSH
22547: CALL_OW 255
22551: PUSH
22552: LD_INT 1
22554: EQUAL
22555: PUSH
22556: LD_EXP 65
22560: PUSH
22561: LD_INT 0
22563: EQUAL
22564: AND
22565: IFFALSE 22767
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
22567: LD_VAR 0 1
22571: PPUSH
22572: CALL_OW 266
22576: PUSH
22577: LD_INT 26
22579: EQUAL
22580: PUSH
22581: LD_VAR 0 1
22585: PPUSH
22586: CALL_OW 266
22590: PUSH
22591: LD_INT 27
22593: EQUAL
22594: OR
22595: PUSH
22596: LD_VAR 0 1
22600: PPUSH
22601: CALL_OW 266
22605: PUSH
22606: LD_INT 28
22608: EQUAL
22609: OR
22610: IFFALSE 22767
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
22612: LD_INT 22
22614: PUSH
22615: LD_INT 1
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 2
22624: PUSH
22625: LD_INT 30
22627: PUSH
22628: LD_INT 7
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 30
22637: PUSH
22638: LD_INT 8
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: LIST
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PPUSH
22654: CALL_OW 69
22658: PUSH
22659: LD_INT 0
22661: GREATER
22662: IFFALSE 22767
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22664: LD_ADDR_VAR 0 2
22668: PUSH
22669: LD_INT 22
22671: PUSH
22672: LD_INT 1
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 2
22681: PUSH
22682: LD_INT 30
22684: PUSH
22685: LD_INT 7
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 30
22694: PUSH
22695: LD_INT 8
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: LIST
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PPUSH
22711: CALL_OW 69
22715: PUSH
22716: FOR_IN
22717: IFFALSE 22765
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22719: LD_VAR 0 2
22723: PPUSH
22724: LD_INT 1
22726: PPUSH
22727: CALL_OW 268
22731: PUSH
22732: LD_INT 11
22734: EQUAL
22735: PUSH
22736: LD_VAR 0 2
22740: PPUSH
22741: LD_INT 2
22743: PPUSH
22744: CALL_OW 268
22748: PUSH
22749: LD_INT 11
22751: EQUAL
22752: OR
22753: IFFALSE 22763
// eventVar1 = 1 ;
22755: LD_ADDR_EXP 65
22759: PUSH
22760: LD_INT 1
22762: ST_TO_ADDR
22763: GO 22716
22765: POP
22766: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
22767: LD_VAR 0 1
22771: PPUSH
22772: CALL_OW 255
22776: PUSH
22777: LD_INT 3
22779: EQUAL
22780: IFFALSE 23260
// begin if GetBType ( building ) = b_depot then
22782: LD_VAR 0 1
22786: PPUSH
22787: CALL_OW 266
22791: PUSH
22792: LD_INT 0
22794: EQUAL
22795: IFFALSE 22867
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
22797: LD_VAR 0 1
22801: PPUSH
22802: CALL_OW 274
22806: PPUSH
22807: LD_INT 1
22809: PPUSH
22810: LD_INT 5000
22812: PPUSH
22813: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
22817: LD_VAR 0 1
22821: PPUSH
22822: CALL_OW 274
22826: PPUSH
22827: LD_INT 2
22829: PPUSH
22830: LD_INT 300
22832: PPUSH
22833: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
22837: LD_VAR 0 1
22841: PPUSH
22842: CALL_OW 274
22846: PPUSH
22847: LD_INT 3
22849: PPUSH
22850: LD_INT 100
22852: PPUSH
22853: CALL_OW 277
// ruDepot = building ;
22857: LD_ADDR_EXP 30
22861: PUSH
22862: LD_VAR 0 1
22866: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
22867: LD_VAR 0 1
22871: PPUSH
22872: CALL_OW 266
22876: PUSH
22877: LD_INT 0
22879: EQUAL
22880: PUSH
22881: LD_VAR 0 1
22885: PPUSH
22886: CALL_OW 266
22890: PUSH
22891: LD_INT 2
22893: EQUAL
22894: OR
22895: PUSH
22896: LD_VAR 0 1
22900: PPUSH
22901: CALL_OW 266
22905: PUSH
22906: LD_INT 4
22908: EQUAL
22909: OR
22910: IFFALSE 22921
// ComUpgrade ( building ) ;
22912: LD_VAR 0 1
22916: PPUSH
22917: CALL_OW 146
// if GetBType ( building ) = b_lab then
22921: LD_VAR 0 1
22925: PPUSH
22926: CALL_OW 266
22930: PUSH
22931: LD_INT 6
22933: EQUAL
22934: IFFALSE 23137
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
22936: LD_INT 22
22938: PUSH
22939: LD_INT 3
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 30
22948: PUSH
22949: LD_INT 8
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PPUSH
22960: CALL_OW 69
22964: PUSH
22965: LD_INT 0
22967: EQUAL
22968: IFFALSE 23006
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22970: LD_VAR 0 1
22974: PPUSH
22975: LD_INT 10
22977: PPUSH
22978: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
22982: LD_VAR 0 1
22986: PPUSH
22987: LD_INT 12
22989: PPUSH
22990: CALL_OW 207
// ruLab1 = building ;
22994: LD_ADDR_EXP 31
22998: PUSH
22999: LD_VAR 0 1
23003: ST_TO_ADDR
// end else
23004: GO 23040
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
23006: LD_VAR 0 1
23010: PPUSH
23011: LD_INT 11
23013: PPUSH
23014: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
23018: LD_VAR 0 1
23022: PPUSH
23023: LD_INT 14
23025: PPUSH
23026: CALL_OW 207
// ruLab2 = building ;
23030: LD_ADDR_EXP 32
23034: PUSH
23035: LD_VAR 0 1
23039: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
23040: LD_INT 3
23042: PPUSH
23043: LD_VAR 0 1
23047: PPUSH
23048: LD_INT 3
23050: PPUSH
23051: CALL 15453 0 3
// if ruDestroyedBuildings > 0 then
23055: LD_EXP 42
23059: PUSH
23060: LD_INT 0
23062: GREATER
23063: IFFALSE 23137
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23065: LD_ADDR_EXP 42
23069: PUSH
23070: LD_EXP 42
23074: PPUSH
23075: LD_INT 1
23077: PPUSH
23078: CALL_OW 3
23082: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23083: LD_ADDR_EXP 42
23087: PUSH
23088: LD_EXP 42
23092: PPUSH
23093: LD_INT 1
23095: PPUSH
23096: CALL_OW 3
23100: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23101: LD_ADDR_EXP 42
23105: PUSH
23106: LD_EXP 42
23110: PPUSH
23111: LD_INT 1
23113: PPUSH
23114: CALL_OW 3
23118: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23119: LD_ADDR_EXP 42
23123: PUSH
23124: LD_EXP 42
23128: PPUSH
23129: LD_INT 1
23131: PPUSH
23132: CALL_OW 3
23136: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
23137: LD_VAR 0 1
23141: PPUSH
23142: CALL_OW 266
23146: PUSH
23147: LD_INT 32
23149: EQUAL
23150: IFFALSE 23187
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23152: LD_VAR 0 1
23156: PPUSH
23157: LD_INT 44
23159: PUSH
23160: LD_INT 45
23162: PUSH
23163: LD_INT 46
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 1
23173: PPUSH
23174: LD_INT 3
23176: PPUSH
23177: CALL_OW 12
23181: ARRAY
23182: PPUSH
23183: CALL_OW 208
// if GetBType ( building ) = b_turret then
23187: LD_VAR 0 1
23191: PPUSH
23192: CALL_OW 266
23196: PUSH
23197: LD_INT 33
23199: EQUAL
23200: IFFALSE 23237
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23202: LD_VAR 0 1
23206: PPUSH
23207: LD_INT 44
23209: PUSH
23210: LD_INT 45
23212: PUSH
23213: LD_INT 46
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 1
23223: PPUSH
23224: LD_INT 3
23226: PPUSH
23227: CALL_OW 12
23231: ARRAY
23232: PPUSH
23233: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
23237: LD_VAR 0 1
23241: PPUSH
23242: CALL_OW 266
23246: PUSH
23247: LD_INT 24
23249: EQUAL
23250: IFFALSE 23260
// russianAI = 1 ;
23252: LD_ADDR_EXP 39
23256: PUSH
23257: LD_INT 1
23259: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
23260: LD_VAR 0 1
23264: PPUSH
23265: CALL_OW 255
23269: PUSH
23270: LD_INT 2
23272: EQUAL
23273: IFFALSE 24152
// begin if GetBType ( building ) = arBuildingsTab [ 1 ] [ 1 ] then
23275: LD_VAR 0 1
23279: PPUSH
23280: CALL_OW 266
23284: PUSH
23285: LD_EXP 68
23289: PUSH
23290: LD_INT 1
23292: ARRAY
23293: PUSH
23294: LD_INT 1
23296: ARRAY
23297: EQUAL
23298: IFFALSE 23425
// begin arBuildingsTab := Delete ( arBuildingsTab , 1 ) ;
23300: LD_ADDR_EXP 68
23304: PUSH
23305: LD_EXP 68
23309: PPUSH
23310: LD_INT 1
23312: PPUSH
23313: CALL_OW 3
23317: ST_TO_ADDR
// if arBuildingsTab then
23318: LD_EXP 68
23322: IFFALSE 23425
// begin engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
23324: LD_ADDR_VAR 0 3
23328: PUSH
23329: LD_INT 22
23331: PUSH
23332: LD_INT 2
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 25
23341: PUSH
23342: LD_INT 2
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PPUSH
23353: CALL_OW 69
23357: ST_TO_ADDR
// if engineers then
23358: LD_VAR 0 3
23362: IFFALSE 23425
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
23364: LD_VAR 0 3
23368: PPUSH
23369: LD_EXP 68
23373: PUSH
23374: LD_INT 1
23376: ARRAY
23377: PUSH
23378: LD_INT 1
23380: ARRAY
23381: PPUSH
23382: LD_EXP 68
23386: PUSH
23387: LD_INT 1
23389: ARRAY
23390: PUSH
23391: LD_INT 2
23393: ARRAY
23394: PPUSH
23395: LD_EXP 68
23399: PUSH
23400: LD_INT 1
23402: ARRAY
23403: PUSH
23404: LD_INT 3
23406: ARRAY
23407: PPUSH
23408: LD_EXP 68
23412: PUSH
23413: LD_INT 1
23415: ARRAY
23416: PUSH
23417: LD_INT 4
23419: ARRAY
23420: PPUSH
23421: CALL_OW 205
// end ; end ; if GetBType ( building ) = b_breastwork then
23425: LD_VAR 0 1
23429: PPUSH
23430: CALL_OW 266
23434: PUSH
23435: LD_INT 31
23437: EQUAL
23438: IFFALSE 23584
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
23440: LD_ADDR_VAR 0 4
23444: PUSH
23445: LD_INT 22
23447: PUSH
23448: LD_INT 2
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 2
23457: PUSH
23458: LD_INT 25
23460: PUSH
23461: LD_INT 1
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: PUSH
23468: LD_INT 25
23470: PUSH
23471: LD_INT 8
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: LIST
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PPUSH
23487: CALL_OW 69
23491: PUSH
23492: LD_EXP 26
23496: DIFF
23497: ST_TO_ADDR
// if not sol then
23498: LD_VAR 0 4
23502: NOT
23503: IFFALSE 23507
// exit ;
23505: GO 24152
// for i in sol do
23507: LD_ADDR_VAR 0 2
23511: PUSH
23512: LD_VAR 0 4
23516: PUSH
23517: FOR_IN
23518: IFFALSE 23582
// if not GetTag ( i ) then
23520: LD_VAR 0 2
23524: PPUSH
23525: CALL_OW 110
23529: NOT
23530: IFFALSE 23580
// begin if IsInUnit ( i ) then
23532: LD_VAR 0 2
23536: PPUSH
23537: CALL_OW 310
23541: IFFALSE 23552
// ComExitBuilding ( i ) ;
23543: LD_VAR 0 2
23547: PPUSH
23548: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
23552: LD_VAR 0 2
23556: PPUSH
23557: LD_VAR 0 1
23561: PPUSH
23562: CALL_OW 180
// SetTag ( i , 11 ) ;
23566: LD_VAR 0 2
23570: PPUSH
23571: LD_INT 11
23573: PPUSH
23574: CALL_OW 109
// break ;
23578: GO 23582
// end ;
23580: GO 23517
23582: POP
23583: POP
// end ; if GetBType ( building ) = b_depot then
23584: LD_VAR 0 1
23588: PPUSH
23589: CALL_OW 266
23593: PUSH
23594: LD_INT 0
23596: EQUAL
23597: IFFALSE 23683
// begin arDepot = building ;
23599: LD_ADDR_EXP 43
23603: PUSH
23604: LD_VAR 0 1
23608: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
23609: LD_INT 38
23611: PUSH
23612: LD_INT 47
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PPUSH
23619: LD_INT 71
23621: PPUSH
23622: LD_INT 19
23624: PPUSH
23625: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
23629: LD_VAR 0 1
23633: PPUSH
23634: CALL_OW 274
23638: PPUSH
23639: LD_INT 1
23641: PPUSH
23642: LD_INT 500
23644: PPUSH
23645: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
23649: LD_VAR 0 1
23653: PPUSH
23654: CALL_OW 274
23658: PPUSH
23659: LD_INT 3
23661: PPUSH
23662: LD_INT 30
23664: PPUSH
23665: CALL_OW 277
// ComEnterUnit ( Dietrich , building ) ;
23669: LD_EXP 26
23673: PPUSH
23674: LD_VAR 0 1
23678: PPUSH
23679: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
23683: LD_VAR 0 1
23687: PPUSH
23688: CALL_OW 266
23692: PUSH
23693: LD_INT 6
23695: EQUAL
23696: PUSH
23697: LD_VAR 0 1
23701: PPUSH
23702: CALL_OW 266
23706: PUSH
23707: LD_INT 9
23709: EQUAL
23710: OR
23711: IFFALSE 23762
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23713: LD_VAR 0 1
23717: PPUSH
23718: LD_INT 10
23720: PPUSH
23721: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
23725: LD_VAR 0 1
23729: PPUSH
23730: LD_INT 11
23732: PPUSH
23733: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
23737: LD_INT 2
23739: PPUSH
23740: LD_VAR 0 1
23744: PPUSH
23745: LD_INT 2
23747: PPUSH
23748: CALL 15453 0 3
// arLab = building ;
23752: LD_ADDR_EXP 44
23756: PUSH
23757: LD_VAR 0 1
23761: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23762: LD_VAR 0 1
23766: PPUSH
23767: CALL_OW 266
23771: PUSH
23772: LD_INT 2
23774: EQUAL
23775: PUSH
23776: LD_VAR 0 1
23780: PPUSH
23781: CALL_OW 266
23785: PUSH
23786: LD_INT 4
23788: EQUAL
23789: OR
23790: IFFALSE 23861
// begin ComUpgrade ( building ) ;
23792: LD_VAR 0 1
23796: PPUSH
23797: CALL_OW 146
// if GetBType ( building ) = b_armoury then
23801: LD_VAR 0 1
23805: PPUSH
23806: CALL_OW 266
23810: PUSH
23811: LD_INT 4
23813: EQUAL
23814: IFFALSE 23861
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) diff Dietrich , 75 , 21 ) ;
23816: LD_INT 22
23818: PUSH
23819: LD_INT 2
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 25
23828: PUSH
23829: LD_INT 1
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PPUSH
23840: CALL_OW 69
23844: PUSH
23845: LD_EXP 26
23849: DIFF
23850: PPUSH
23851: LD_INT 75
23853: PPUSH
23854: LD_INT 21
23856: PPUSH
23857: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
23861: LD_VAR 0 1
23865: PPUSH
23866: CALL_OW 266
23870: PUSH
23871: LD_INT 27
23873: EQUAL
23874: IFFALSE 24152
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
23876: LD_INT 22
23878: PUSH
23879: LD_INT 2
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 30
23888: PUSH
23889: LD_INT 27
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PPUSH
23900: CALL_OW 69
23904: PUSH
23905: LD_INT 2
23907: EQUAL
23908: IFFALSE 24152
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
23910: LD_ADDR_VAR 0 2
23914: PUSH
23915: LD_INT 22
23917: PUSH
23918: LD_INT 2
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 21
23927: PUSH
23928: LD_INT 1
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 25
23937: PUSH
23938: LD_INT 2
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: LIST
23949: PPUSH
23950: CALL_OW 69
23954: PUSH
23955: LD_INT 1
23957: ARRAY
23958: ST_TO_ADDR
// if not i then
23959: LD_VAR 0 2
23963: NOT
23964: IFFALSE 23968
// exit ;
23966: GO 24152
// AddComMoveXY ( i , 92 , 34 ) ;
23968: LD_VAR 0 2
23972: PPUSH
23973: LD_INT 92
23975: PPUSH
23976: LD_INT 34
23978: PPUSH
23979: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
23983: LD_VAR 0 2
23987: PPUSH
23988: LD_INT 35
23990: PPUSH
23991: CALL_OW 202
// AddComMoveXY ( i , 101 , 20 ) ;
23995: LD_VAR 0 2
23999: PPUSH
24000: LD_INT 101
24002: PPUSH
24003: LD_INT 20
24005: PPUSH
24006: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24010: LD_VAR 0 2
24014: PPUSH
24015: LD_INT 35
24017: PPUSH
24018: CALL_OW 202
// AddComMoveXY ( i , 115 , 30 ) ;
24022: LD_VAR 0 2
24026: PPUSH
24027: LD_INT 115
24029: PPUSH
24030: LD_INT 30
24032: PPUSH
24033: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24037: LD_VAR 0 2
24041: PPUSH
24042: LD_INT 35
24044: PPUSH
24045: CALL_OW 202
// AddComMoveXY ( i , 82 , 57 ) ;
24049: LD_VAR 0 2
24053: PPUSH
24054: LD_INT 82
24056: PPUSH
24057: LD_INT 57
24059: PPUSH
24060: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24064: LD_VAR 0 2
24068: PPUSH
24069: LD_INT 35
24071: PPUSH
24072: CALL_OW 202
// AddComMoveXY ( i , 36 , 28 ) ;
24076: LD_VAR 0 2
24080: PPUSH
24081: LD_INT 36
24083: PPUSH
24084: LD_INT 28
24086: PPUSH
24087: CALL_OW 171
// AddComWait ( i , 0 0$2 ) ;
24091: LD_VAR 0 2
24095: PPUSH
24096: LD_INT 70
24098: PPUSH
24099: CALL_OW 202
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
24103: LD_INT 22
24105: PUSH
24106: LD_INT 2
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 21
24115: PUSH
24116: LD_INT 1
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 25
24125: PUSH
24126: LD_INT 2
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: LIST
24137: PPUSH
24138: CALL_OW 69
24142: PPUSH
24143: LD_EXP 43
24147: PPUSH
24148: CALL_OW 180
// end ; end ; end ;
24152: PPOPN 5
24154: END
// on UpgradeComplete ( building ) do var i ;
24155: LD_INT 0
24157: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
24158: LD_VAR 0 1
24162: PPUSH
24163: CALL_OW 255
24167: PUSH
24168: LD_INT 1
24170: EQUAL
24171: PUSH
24172: LD_EXP 65
24176: PUSH
24177: LD_INT 0
24179: EQUAL
24180: AND
24181: IFFALSE 24379
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
24183: LD_VAR 0 1
24187: PPUSH
24188: CALL_OW 266
24192: PUSH
24193: LD_INT 7
24195: EQUAL
24196: PUSH
24197: LD_VAR 0 1
24201: PPUSH
24202: CALL_OW 266
24206: PUSH
24207: LD_INT 8
24209: EQUAL
24210: OR
24211: IFFALSE 24379
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
24213: LD_INT 22
24215: PUSH
24216: LD_INT 1
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 2
24225: PUSH
24226: LD_INT 30
24228: PUSH
24229: LD_INT 26
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 30
24238: PUSH
24239: LD_INT 27
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 30
24248: PUSH
24249: LD_INT 28
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PPUSH
24266: CALL_OW 69
24270: PUSH
24271: LD_INT 0
24273: GREATER
24274: IFFALSE 24379
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
24276: LD_ADDR_VAR 0 2
24280: PUSH
24281: LD_INT 22
24283: PUSH
24284: LD_INT 1
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: LD_INT 2
24293: PUSH
24294: LD_INT 30
24296: PUSH
24297: LD_INT 7
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: LD_INT 30
24306: PUSH
24307: LD_INT 8
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: LIST
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PPUSH
24323: CALL_OW 69
24327: PUSH
24328: FOR_IN
24329: IFFALSE 24377
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
24331: LD_VAR 0 2
24335: PPUSH
24336: LD_INT 1
24338: PPUSH
24339: CALL_OW 268
24343: PUSH
24344: LD_INT 11
24346: EQUAL
24347: PUSH
24348: LD_VAR 0 2
24352: PPUSH
24353: LD_INT 2
24355: PPUSH
24356: CALL_OW 268
24360: PUSH
24361: LD_INT 11
24363: EQUAL
24364: OR
24365: IFFALSE 24375
// eventVar1 = 1 ;
24367: LD_ADDR_EXP 65
24371: PUSH
24372: LD_INT 1
24374: ST_TO_ADDR
24375: GO 24328
24377: POP
24378: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
24379: LD_VAR 0 1
24383: PPUSH
24384: CALL_OW 255
24388: PUSH
24389: LD_INT 2
24391: EQUAL
24392: IFFALSE 24497
// begin if GetBType ( building ) = b_barracks then
24394: LD_VAR 0 1
24398: PPUSH
24399: CALL_OW 266
24403: PUSH
24404: LD_INT 5
24406: EQUAL
24407: IFFALSE 24497
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
24409: LD_ADDR_VAR 0 2
24413: PUSH
24414: LD_INT 22
24416: PUSH
24417: LD_INT 2
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 25
24426: PUSH
24427: LD_INT 1
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 3
24436: PUSH
24437: LD_INT 54
24439: PUSH
24440: EMPTY
24441: LIST
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: LIST
24451: PPUSH
24452: CALL_OW 69
24456: PUSH
24457: LD_EXP 26
24461: PUSH
24462: EMPTY
24463: LIST
24464: DIFF
24465: PUSH
24466: FOR_IN
24467: IFFALSE 24485
// ComEnterUnit ( i , building ) ;
24469: LD_VAR 0 2
24473: PPUSH
24474: LD_VAR 0 1
24478: PPUSH
24479: CALL_OW 120
24483: GO 24466
24485: POP
24486: POP
// arArm = building ;
24487: LD_ADDR_EXP 45
24491: PUSH
24492: LD_VAR 0 1
24496: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
24497: LD_VAR 0 1
24501: PPUSH
24502: CALL_OW 255
24506: PUSH
24507: LD_INT 3
24509: EQUAL
24510: IFFALSE 24983
// begin if GetBType ( building ) = b_factory then
24512: LD_VAR 0 1
24516: PPUSH
24517: CALL_OW 266
24521: PUSH
24522: LD_INT 3
24524: EQUAL
24525: IFFALSE 24592
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
24527: LD_ADDR_VAR 0 2
24531: PUSH
24532: LD_INT 22
24534: PUSH
24535: LD_INT 3
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 25
24544: PUSH
24545: LD_INT 3
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PPUSH
24556: CALL_OW 69
24560: PUSH
24561: FOR_IN
24562: IFFALSE 24580
// ComEnterUnit ( i , building ) ;
24564: LD_VAR 0 2
24568: PPUSH
24569: LD_VAR 0 1
24573: PPUSH
24574: CALL_OW 120
24578: GO 24561
24580: POP
24581: POP
// ruFab = building ;
24582: LD_ADDR_EXP 35
24586: PUSH
24587: LD_VAR 0 1
24591: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
24592: LD_INT 22
24594: PUSH
24595: LD_INT 3
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 21
24604: PUSH
24605: LD_INT 3
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 30
24614: PUSH
24615: LD_INT 8
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: LIST
24626: PPUSH
24627: CALL_OW 69
24631: PUSH
24632: LD_INT 2
24634: EQUAL
24635: IFFALSE 24843
// begin for i = 1 to 2 do
24637: LD_ADDR_VAR 0 2
24641: PUSH
24642: DOUBLE
24643: LD_INT 1
24645: DEC
24646: ST_TO_ADDR
24647: LD_INT 2
24649: PUSH
24650: FOR_TO
24651: IFFALSE 24738
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
24653: LD_INT 22
24655: PUSH
24656: LD_INT 3
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 25
24665: PUSH
24666: LD_INT 4
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PPUSH
24677: CALL_OW 69
24681: PUSH
24682: LD_VAR 0 2
24686: ARRAY
24687: PPUSH
24688: LD_INT 22
24690: PUSH
24691: LD_INT 3
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 21
24700: PUSH
24701: LD_INT 3
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 30
24710: PUSH
24711: LD_INT 8
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: LIST
24722: PPUSH
24723: CALL_OW 69
24727: PUSH
24728: LD_INT 1
24730: ARRAY
24731: PPUSH
24732: CALL_OW 120
24736: GO 24650
24738: POP
24739: POP
// for i = 3 to 4 do
24740: LD_ADDR_VAR 0 2
24744: PUSH
24745: DOUBLE
24746: LD_INT 3
24748: DEC
24749: ST_TO_ADDR
24750: LD_INT 4
24752: PUSH
24753: FOR_TO
24754: IFFALSE 24841
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
24756: LD_INT 22
24758: PUSH
24759: LD_INT 3
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 25
24768: PUSH
24769: LD_INT 4
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PPUSH
24780: CALL_OW 69
24784: PUSH
24785: LD_VAR 0 2
24789: ARRAY
24790: PPUSH
24791: LD_INT 22
24793: PUSH
24794: LD_INT 3
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 21
24803: PUSH
24804: LD_INT 3
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 30
24813: PUSH
24814: LD_INT 8
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: LIST
24825: PPUSH
24826: CALL_OW 69
24830: PUSH
24831: LD_INT 2
24833: ARRAY
24834: PPUSH
24835: CALL_OW 120
24839: GO 24753
24841: POP
24842: POP
// end ; if GetBType ( building ) = b_barracks then
24843: LD_VAR 0 1
24847: PPUSH
24848: CALL_OW 266
24852: PUSH
24853: LD_INT 5
24855: EQUAL
24856: IFFALSE 24983
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
24858: LD_ADDR_VAR 0 2
24862: PUSH
24863: LD_INT 22
24865: PUSH
24866: LD_INT 3
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 25
24875: PUSH
24876: LD_INT 1
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 3
24885: PUSH
24886: LD_INT 54
24888: PUSH
24889: EMPTY
24890: LIST
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: LIST
24900: PPUSH
24901: CALL_OW 69
24905: PUSH
24906: FOR_IN
24907: IFFALSE 24925
// ComEnterUnit ( i , building ) ;
24909: LD_VAR 0 2
24913: PPUSH
24914: LD_VAR 0 1
24918: PPUSH
24919: CALL_OW 120
24923: GO 24906
24925: POP
24926: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
24927: LD_INT 22
24929: PUSH
24930: LD_INT 3
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 30
24939: PUSH
24940: LD_INT 5
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PPUSH
24951: CALL_OW 69
24955: PUSH
24956: LD_INT 0
24958: EQUAL
24959: IFFALSE 24973
// ruArm1 = building else
24961: LD_ADDR_EXP 33
24965: PUSH
24966: LD_VAR 0 1
24970: ST_TO_ADDR
24971: GO 24983
// ruArm2 = building ;
24973: LD_ADDR_EXP 34
24977: PUSH
24978: LD_VAR 0 1
24982: ST_TO_ADDR
// end ; end ; end ;
24983: PPOPN 2
24985: END
// on EnterBuilding ( building , human ) do var rnd ;
24986: LD_INT 0
24988: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
24989: LD_VAR 0 2
24993: PPUSH
24994: CALL_OW 255
24998: PUSH
24999: LD_INT 2
25001: EQUAL
25002: PUSH
25003: LD_VAR 0 2
25007: PPUSH
25008: CALL_OW 257
25012: PUSH
25013: LD_INT 1
25015: EQUAL
25016: AND
25017: PUSH
25018: LD_VAR 0 1
25022: PUSH
25023: LD_EXP 45
25027: EQUAL
25028: AND
25029: IFFALSE 25076
// begin wait ( 0 0$1 ) ;
25031: LD_INT 35
25033: PPUSH
25034: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
25038: LD_ADDR_VAR 0 3
25042: PUSH
25043: LD_INT 1
25045: PPUSH
25046: LD_INT 100
25048: PPUSH
25049: CALL_OW 12
25053: ST_TO_ADDR
// if rnd > 50 then
25054: LD_VAR 0 3
25058: PUSH
25059: LD_INT 50
25061: GREATER
25062: IFFALSE 25076
// SetClass ( human , class_mortar ) ;
25064: LD_VAR 0 2
25068: PPUSH
25069: LD_INT 8
25071: PPUSH
25072: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
25076: LD_VAR 0 2
25080: PUSH
25081: LD_INT 22
25083: PUSH
25084: LD_INT 2
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 25
25093: PUSH
25094: LD_INT 12
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PPUSH
25105: CALL_OW 69
25109: IN
25110: IFFALSE 25160
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
25112: LD_VAR 0 1
25116: PPUSH
25117: CALL_OW 266
25121: PUSH
25122: LD_INT 0
25124: PUSH
25125: LD_INT 1
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: IN
25132: IFFALSE 25148
// SetClass ( human , class_apeman_engineer ) else
25134: LD_VAR 0 2
25138: PPUSH
25139: LD_INT 16
25141: PPUSH
25142: CALL_OW 336
25146: GO 25160
// SetClass ( human , class_apeman_soldier ) ;
25148: LD_VAR 0 2
25152: PPUSH
25153: LD_INT 15
25155: PPUSH
25156: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
25160: LD_VAR 0 2
25164: PPUSH
25165: CALL_OW 255
25169: PUSH
25170: LD_INT 3
25172: EQUAL
25173: PUSH
25174: LD_VAR 0 2
25178: PPUSH
25179: CALL_OW 257
25183: PUSH
25184: LD_INT 1
25186: EQUAL
25187: AND
25188: PUSH
25189: LD_VAR 0 1
25193: PUSH
25194: LD_EXP 33
25198: EQUAL
25199: PUSH
25200: LD_VAR 0 1
25204: PUSH
25205: LD_EXP 34
25209: EQUAL
25210: OR
25211: PUSH
25212: EMPTY
25213: LIST
25214: AND
25215: IFFALSE 25236
// begin wait ( 0 0$1 ) ;
25217: LD_INT 35
25219: PPUSH
25220: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
25224: LD_VAR 0 2
25228: PPUSH
25229: LD_INT 9
25231: PPUSH
25232: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
25236: LD_VAR 0 2
25240: PPUSH
25241: CALL_OW 255
25245: PUSH
25246: LD_INT 3
25248: EQUAL
25249: PUSH
25250: LD_VAR 0 2
25254: PPUSH
25255: CALL_OW 257
25259: PUSH
25260: LD_INT 9
25262: EQUAL
25263: AND
25264: PUSH
25265: LD_VAR 0 1
25269: PPUSH
25270: CALL_OW 266
25274: PUSH
25275: LD_INT 32
25277: EQUAL
25278: AND
25279: IFFALSE 25300
// begin wait ( 0 0$1 ) ;
25281: LD_INT 35
25283: PPUSH
25284: CALL_OW 67
// SetClass ( human , 1 ) ;
25288: LD_VAR 0 2
25292: PPUSH
25293: LD_INT 1
25295: PPUSH
25296: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
25300: LD_VAR 0 2
25304: PPUSH
25305: CALL_OW 255
25309: PUSH
25310: LD_INT 3
25312: EQUAL
25313: PUSH
25314: LD_VAR 0 2
25318: PPUSH
25319: CALL_OW 257
25323: PUSH
25324: LD_INT 3
25326: EQUAL
25327: AND
25328: PUSH
25329: LD_VAR 0 1
25333: PUSH
25334: LD_EXP 35
25338: EQUAL
25339: AND
25340: IFFALSE 25354
// SetLives ( human , 1000 ) ;
25342: LD_VAR 0 2
25346: PPUSH
25347: LD_INT 1000
25349: PPUSH
25350: CALL_OW 234
// end ;
25354: PPOPN 3
25356: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25357: LD_VAR 0 1
25361: PUSH
25362: LD_INT 1
25364: EQUAL
25365: PUSH
25366: LD_VAR 0 2
25370: PUSH
25371: LD_INT 2
25373: EQUAL
25374: AND
25375: PUSH
25376: LD_INT 1
25378: PPUSH
25379: LD_INT 2
25381: PPUSH
25382: CALL_OW 81
25386: PUSH
25387: LD_INT 1
25389: EQUAL
25390: AND
25391: IFFALSE 25412
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
25393: LD_EXP 24
25397: PPUSH
25398: LD_STRING D6b-Pow-1
25400: PPUSH
25401: CALL_OW 94
// YouLost ( Powell ) ;
25405: LD_STRING Powell
25407: PPUSH
25408: CALL_OW 104
// end ; end ;
25412: PPOPN 2
25414: END
// every 0 0$10 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
25415: LD_INT 23
25417: PPUSH
25418: LD_INT 22
25420: PUSH
25421: LD_INT 1
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 21
25430: PUSH
25431: LD_INT 3
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PPUSH
25442: CALL_OW 70
25446: PUSH
25447: LD_INT 23
25449: PPUSH
25450: LD_INT 22
25452: PUSH
25453: LD_INT 1
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 21
25462: PUSH
25463: LD_INT 2
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PPUSH
25474: CALL_OW 70
25478: OR
25479: PUSH
25480: LD_INT 1
25482: PPUSH
25483: LD_INT 2
25485: PPUSH
25486: CALL_OW 81
25490: PUSH
25491: LD_INT 1
25493: EQUAL
25494: AND
25495: IFFALSE 25628
25497: GO 25499
25499: DISABLE
// begin enable ;
25500: ENABLE
// wait ( 0 0$10 ) ;
25501: LD_INT 350
25503: PPUSH
25504: CALL_OW 67
// if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
25508: LD_INT 23
25510: PPUSH
25511: LD_INT 22
25513: PUSH
25514: LD_INT 1
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 21
25523: PUSH
25524: LD_INT 3
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PPUSH
25535: CALL_OW 70
25539: PUSH
25540: LD_INT 23
25542: PPUSH
25543: LD_INT 22
25545: PUSH
25546: LD_INT 1
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 21
25555: PUSH
25556: LD_INT 2
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PPUSH
25567: CALL_OW 70
25571: OR
25572: PUSH
25573: LD_INT 1
25575: PPUSH
25576: LD_INT 2
25578: PPUSH
25579: CALL_OW 81
25583: PUSH
25584: LD_INT 1
25586: EQUAL
25587: AND
25588: IFFALSE 25628
// begin disable ;
25590: DISABLE
// InGameOn ;
25591: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
25595: LD_INT 73
25597: PPUSH
25598: LD_INT 18
25600: PPUSH
25601: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
25605: LD_EXP 24
25609: PPUSH
25610: LD_STRING D6b-Pow-1
25612: PPUSH
25613: CALL_OW 94
// YouLost ( Powell ) ;
25617: LD_STRING Powell
25619: PPUSH
25620: CALL_OW 104
// InGameOff ;
25624: CALL_OW 9
// end ; end ;
25628: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
25629: LD_VAR 0 1
25633: PUSH
25634: LD_EXP 1
25638: EQUAL
25639: IFFALSE 25648
// YouLost ( JMM ) ;
25641: LD_STRING JMM
25643: PPUSH
25644: CALL_OW 104
// if unit = Khatam then
25648: LD_VAR 0 1
25652: PUSH
25653: LD_EXP 14
25657: EQUAL
25658: IFFALSE 25668
// KhatamStatus = 0 ;
25660: LD_ADDR_EXP 53
25664: PUSH
25665: LD_INT 0
25667: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
25668: LD_VAR 0 1
25672: PPUSH
25673: CALL_OW 255
25677: PUSH
25678: LD_INT 3
25680: EQUAL
25681: PUSH
25682: LD_VAR 0 1
25686: PPUSH
25687: CALL_OW 247
25691: PUSH
25692: LD_INT 3
25694: EQUAL
25695: AND
25696: IFFALSE 26388
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
25698: LD_VAR 0 1
25702: PPUSH
25703: CALL_OW 266
25707: PUSH
25708: LD_INT 31
25710: EQUAL
25711: PUSH
25712: LD_VAR 0 1
25716: PPUSH
25717: CALL_OW 266
25721: PUSH
25722: LD_INT 32
25724: EQUAL
25725: OR
25726: PUSH
25727: LD_VAR 0 1
25731: PPUSH
25732: CALL_OW 266
25736: PUSH
25737: LD_INT 36
25739: EQUAL
25740: OR
25741: PUSH
25742: LD_VAR 0 1
25746: PPUSH
25747: CALL_OW 266
25751: PUSH
25752: LD_INT 0
25754: EQUAL
25755: OR
25756: PUSH
25757: LD_VAR 0 1
25761: PPUSH
25762: CALL_OW 266
25766: PUSH
25767: LD_INT 24
25769: EQUAL
25770: OR
25771: PUSH
25772: LD_VAR 0 1
25776: PPUSH
25777: CALL_OW 266
25781: PUSH
25782: LD_INT 17
25784: EQUAL
25785: OR
25786: PUSH
25787: LD_VAR 0 1
25791: PPUSH
25792: CALL_OW 266
25796: PUSH
25797: LD_INT 25
25799: EQUAL
25800: OR
25801: PUSH
25802: LD_VAR 0 1
25806: PPUSH
25807: CALL_OW 266
25811: PUSH
25812: LD_INT 19
25814: EQUAL
25815: OR
25816: PUSH
25817: LD_VAR 0 1
25821: PPUSH
25822: CALL_OW 266
25826: PUSH
25827: LD_INT 20
25829: EQUAL
25830: OR
25831: PUSH
25832: LD_VAR 0 1
25836: PPUSH
25837: CALL_OW 266
25841: PUSH
25842: LD_INT 18
25844: EQUAL
25845: OR
25846: PUSH
25847: LD_VAR 0 1
25851: PPUSH
25852: CALL_OW 266
25856: PUSH
25857: LD_INT 21
25859: EQUAL
25860: OR
25861: PUSH
25862: LD_VAR 0 1
25866: PPUSH
25867: CALL_OW 266
25871: PUSH
25872: LD_INT 23
25874: EQUAL
25875: OR
25876: PUSH
25877: LD_VAR 0 1
25881: PPUSH
25882: CALL_OW 266
25886: PUSH
25887: LD_INT 16
25889: EQUAL
25890: OR
25891: PUSH
25892: LD_VAR 0 1
25896: PPUSH
25897: CALL_OW 266
25901: PUSH
25902: LD_INT 6
25904: EQUAL
25905: OR
25906: PUSH
25907: LD_VAR 0 1
25911: PPUSH
25912: CALL_OW 266
25916: PUSH
25917: LD_INT 29
25919: EQUAL
25920: OR
25921: PUSH
25922: LD_VAR 0 1
25926: PPUSH
25927: CALL_OW 266
25931: PUSH
25932: LD_INT 26
25934: EQUAL
25935: OR
25936: PUSH
25937: LD_VAR 0 1
25941: PPUSH
25942: CALL_OW 266
25946: PUSH
25947: LD_INT 30
25949: EQUAL
25950: OR
25951: PUSH
25952: LD_VAR 0 1
25956: PPUSH
25957: CALL_OW 266
25961: PUSH
25962: LD_INT 28
25964: EQUAL
25965: OR
25966: PUSH
25967: LD_VAR 0 1
25971: PPUSH
25972: CALL_OW 266
25976: PUSH
25977: LD_INT 27
25979: EQUAL
25980: OR
25981: PUSH
25982: LD_VAR 0 1
25986: PPUSH
25987: CALL_OW 266
25991: PUSH
25992: LD_INT 33
25994: EQUAL
25995: OR
25996: PUSH
25997: LD_VAR 0 1
26001: PPUSH
26002: CALL_OW 266
26006: PUSH
26007: LD_INT 2
26009: EQUAL
26010: OR
26011: PUSH
26012: LD_VAR 0 1
26016: PPUSH
26017: CALL_OW 266
26021: PUSH
26022: LD_INT 4
26024: EQUAL
26025: OR
26026: IFFALSE 26112
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
26028: LD_ADDR_EXP 42
26032: PUSH
26033: LD_EXP 42
26037: PUSH
26038: LD_VAR 0 1
26042: PPUSH
26043: CALL_OW 266
26047: ADD
26048: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26049: LD_ADDR_EXP 42
26053: PUSH
26054: LD_EXP 42
26058: PUSH
26059: LD_VAR 0 1
26063: PPUSH
26064: CALL_OW 250
26068: ADD
26069: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26070: LD_ADDR_EXP 42
26074: PUSH
26075: LD_EXP 42
26079: PUSH
26080: LD_VAR 0 1
26084: PPUSH
26085: CALL_OW 251
26089: ADD
26090: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26091: LD_ADDR_EXP 42
26095: PUSH
26096: LD_EXP 42
26100: PUSH
26101: LD_VAR 0 1
26105: PPUSH
26106: CALL_OW 254
26110: ADD
26111: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
26112: LD_VAR 0 1
26116: PPUSH
26117: CALL_OW 266
26121: PUSH
26122: LD_INT 1
26124: EQUAL
26125: IFFALSE 26204
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
26127: LD_ADDR_EXP 42
26131: PUSH
26132: LD_EXP 42
26136: PUSH
26137: LD_INT 0
26139: ADD
26140: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26141: LD_ADDR_EXP 42
26145: PUSH
26146: LD_EXP 42
26150: PUSH
26151: LD_VAR 0 1
26155: PPUSH
26156: CALL_OW 250
26160: ADD
26161: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26162: LD_ADDR_EXP 42
26166: PUSH
26167: LD_EXP 42
26171: PUSH
26172: LD_VAR 0 1
26176: PPUSH
26177: CALL_OW 251
26181: ADD
26182: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26183: LD_ADDR_EXP 42
26187: PUSH
26188: LD_EXP 42
26192: PUSH
26193: LD_VAR 0 1
26197: PPUSH
26198: CALL_OW 254
26202: ADD
26203: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
26204: LD_VAR 0 1
26208: PPUSH
26209: CALL_OW 266
26213: PUSH
26214: LD_INT 3
26216: EQUAL
26217: IFFALSE 26296
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
26219: LD_ADDR_EXP 42
26223: PUSH
26224: LD_EXP 42
26228: PUSH
26229: LD_INT 2
26231: ADD
26232: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26233: LD_ADDR_EXP 42
26237: PUSH
26238: LD_EXP 42
26242: PUSH
26243: LD_VAR 0 1
26247: PPUSH
26248: CALL_OW 250
26252: ADD
26253: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26254: LD_ADDR_EXP 42
26258: PUSH
26259: LD_EXP 42
26263: PUSH
26264: LD_VAR 0 1
26268: PPUSH
26269: CALL_OW 251
26273: ADD
26274: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26275: LD_ADDR_EXP 42
26279: PUSH
26280: LD_EXP 42
26284: PUSH
26285: LD_VAR 0 1
26289: PPUSH
26290: CALL_OW 254
26294: ADD
26295: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
26296: LD_VAR 0 1
26300: PPUSH
26301: CALL_OW 266
26305: PUSH
26306: LD_INT 5
26308: EQUAL
26309: IFFALSE 26388
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
26311: LD_ADDR_EXP 42
26315: PUSH
26316: LD_EXP 42
26320: PUSH
26321: LD_INT 4
26323: ADD
26324: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26325: LD_ADDR_EXP 42
26329: PUSH
26330: LD_EXP 42
26334: PUSH
26335: LD_VAR 0 1
26339: PPUSH
26340: CALL_OW 250
26344: ADD
26345: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26346: LD_ADDR_EXP 42
26350: PUSH
26351: LD_EXP 42
26355: PUSH
26356: LD_VAR 0 1
26360: PPUSH
26361: CALL_OW 251
26365: ADD
26366: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26367: LD_ADDR_EXP 42
26371: PUSH
26372: LD_EXP 42
26376: PUSH
26377: LD_VAR 0 1
26381: PPUSH
26382: CALL_OW 254
26386: ADD
26387: ST_TO_ADDR
// end ; end ; if ruMech and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
26388: LD_EXP 51
26392: PUSH
26393: LD_VAR 0 1
26397: PPUSH
26398: CALL_OW 257
26402: PUSH
26403: LD_INT 3
26405: EQUAL
26406: AND
26407: PUSH
26408: LD_VAR 0 1
26412: PPUSH
26413: CALL_OW 255
26417: PUSH
26418: LD_INT 3
26420: EQUAL
26421: AND
26422: PUSH
26423: LD_EXP 35
26427: PPUSH
26428: CALL_OW 302
26432: AND
26433: PUSH
26434: LD_EXP 35
26438: PPUSH
26439: CALL_OW 255
26443: PUSH
26444: LD_INT 3
26446: EQUAL
26447: AND
26448: IFFALSE 26532
// begin ruMech := ruMech - 1 ;
26450: LD_ADDR_EXP 51
26454: PUSH
26455: LD_EXP 51
26459: PUSH
26460: LD_INT 1
26462: MINUS
26463: ST_TO_ADDR
// uc_side = 3 ;
26464: LD_ADDR_OWVAR 20
26468: PUSH
26469: LD_INT 3
26471: ST_TO_ADDR
// uc_nation = 3 ;
26472: LD_ADDR_OWVAR 21
26476: PUSH
26477: LD_INT 3
26479: ST_TO_ADDR
// hc_gallery :=  ;
26480: LD_ADDR_OWVAR 33
26484: PUSH
26485: LD_STRING 
26487: ST_TO_ADDR
// hc_name :=  ;
26488: LD_ADDR_OWVAR 26
26492: PUSH
26493: LD_STRING 
26495: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
26496: LD_INT 0
26498: PPUSH
26499: LD_EXP 36
26503: PPUSH
26504: LD_EXP 37
26508: PPUSH
26509: CALL_OW 12
26513: PPUSH
26514: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
26518: CALL_OW 44
26522: PPUSH
26523: LD_EXP 35
26527: PPUSH
26528: CALL_OW 52
// end ; end ;
26532: PPOPN 1
26534: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
26535: LD_ADDR_OWVAR 57
26539: PUSH
26540: LD_INT 0
26542: ST_TO_ADDR
// fastEnd = 1 ;
26543: LD_ADDR_EXP 63
26547: PUSH
26548: LD_INT 1
26550: ST_TO_ADDR
// FinishMission ;
26551: CALL 27711 0 0
// end ;
26555: PPOPN 1
26557: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
26558: LD_VAR 0 1
26562: PPUSH
26563: CALL 42334 0 1
// end ; end_of_file
26567: PPOPN 1
26569: END
// export function CreateNature ; var i , un ; begin
26570: LD_INT 0
26572: PPUSH
26573: PPUSH
26574: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
26575: LD_ADDR_VAR 0 2
26579: PUSH
26580: DOUBLE
26581: LD_INT 1
26583: DEC
26584: ST_TO_ADDR
26585: LD_OWVAR 67
26589: PUSH
26590: LD_INT 1
26592: PPUSH
26593: LD_INT 5
26595: PPUSH
26596: CALL_OW 12
26600: PLUS
26601: PUSH
26602: FOR_TO
26603: IFFALSE 26748
// begin hc_sex = sex_male ;
26605: LD_ADDR_OWVAR 27
26609: PUSH
26610: LD_INT 1
26612: ST_TO_ADDR
// uc_side = 0 ;
26613: LD_ADDR_OWVAR 20
26617: PUSH
26618: LD_INT 0
26620: ST_TO_ADDR
// uc_nation = nation_nature ;
26621: LD_ADDR_OWVAR 21
26625: PUSH
26626: LD_INT 0
26628: ST_TO_ADDR
// hc_class = class_apeman ;
26629: LD_ADDR_OWVAR 28
26633: PUSH
26634: LD_INT 12
26636: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
26637: LD_ADDR_OWVAR 31
26641: PUSH
26642: LD_INT 2
26644: PPUSH
26645: LD_INT 7
26647: PPUSH
26648: CALL_OW 12
26652: PUSH
26653: LD_OWVAR 67
26657: PLUS
26658: PUSH
26659: LD_INT 2
26661: PPUSH
26662: LD_INT 10
26664: PPUSH
26665: CALL_OW 12
26669: PUSH
26670: LD_INT 2
26672: PPUSH
26673: LD_INT 10
26675: PPUSH
26676: CALL_OW 12
26680: PUSH
26681: LD_INT 2
26683: PPUSH
26684: LD_INT 10
26686: PPUSH
26687: CALL_OW 12
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
26698: LD_ADDR_OWVAR 35
26702: PUSH
26703: LD_INT 5
26705: NEG
26706: PPUSH
26707: LD_INT 5
26709: PPUSH
26710: CALL_OW 12
26714: PUSH
26715: LD_OWVAR 67
26719: MUL
26720: ST_TO_ADDR
// un = CreateHuman ;
26721: LD_ADDR_VAR 0 3
26725: PUSH
26726: CALL_OW 44
26730: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
26731: LD_VAR 0 3
26735: PPUSH
26736: LD_INT 5
26738: PPUSH
26739: LD_INT 0
26741: PPUSH
26742: CALL_OW 49
// end ;
26746: GO 26602
26748: POP
26749: POP
// for i = 1 to Difficulty + 2 do
26750: LD_ADDR_VAR 0 2
26754: PUSH
26755: DOUBLE
26756: LD_INT 1
26758: DEC
26759: ST_TO_ADDR
26760: LD_OWVAR 67
26764: PUSH
26765: LD_INT 2
26767: PLUS
26768: PUSH
26769: FOR_TO
26770: IFFALSE 26879
// begin hc_sex = sex_male ;
26772: LD_ADDR_OWVAR 27
26776: PUSH
26777: LD_INT 1
26779: ST_TO_ADDR
// uc_side = 0 ;
26780: LD_ADDR_OWVAR 20
26784: PUSH
26785: LD_INT 0
26787: ST_TO_ADDR
// uc_nation = nation_nature ;
26788: LD_ADDR_OWVAR 21
26792: PUSH
26793: LD_INT 0
26795: ST_TO_ADDR
// hc_class = class_tiger ;
26796: LD_ADDR_OWVAR 28
26800: PUSH
26801: LD_INT 14
26803: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
26804: LD_ADDR_OWVAR 31
26808: PUSH
26809: LD_EXP 37
26813: PUSH
26814: LD_INT 0
26816: PUSH
26817: LD_INT 0
26819: PUSH
26820: LD_INT 0
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
26829: LD_ADDR_OWVAR 35
26833: PUSH
26834: LD_INT 5
26836: NEG
26837: PPUSH
26838: LD_INT 5
26840: PPUSH
26841: CALL_OW 12
26845: PUSH
26846: LD_OWVAR 67
26850: MUL
26851: ST_TO_ADDR
// un = CreateHuman ;
26852: LD_ADDR_VAR 0 3
26856: PUSH
26857: CALL_OW 44
26861: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
26862: LD_VAR 0 3
26866: PPUSH
26867: LD_INT 6
26869: PPUSH
26870: LD_INT 0
26872: PPUSH
26873: CALL_OW 49
// end ;
26877: GO 26769
26879: POP
26880: POP
// for i = 1 to rand ( 3 , 4 ) do
26881: LD_ADDR_VAR 0 2
26885: PUSH
26886: DOUBLE
26887: LD_INT 1
26889: DEC
26890: ST_TO_ADDR
26891: LD_INT 3
26893: PPUSH
26894: LD_INT 4
26896: PPUSH
26897: CALL_OW 12
26901: PUSH
26902: FOR_TO
26903: IFFALSE 26997
// begin hc_sex = sex_male ;
26905: LD_ADDR_OWVAR 27
26909: PUSH
26910: LD_INT 1
26912: ST_TO_ADDR
// uc_side = 0 ;
26913: LD_ADDR_OWVAR 20
26917: PUSH
26918: LD_INT 0
26920: ST_TO_ADDR
// uc_nation = nation_nature ;
26921: LD_ADDR_OWVAR 21
26925: PUSH
26926: LD_INT 0
26928: ST_TO_ADDR
// hc_class = 18 ;
26929: LD_ADDR_OWVAR 28
26933: PUSH
26934: LD_INT 18
26936: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
26937: LD_ADDR_OWVAR 31
26941: PUSH
26942: LD_EXP 37
26946: PUSH
26947: LD_INT 0
26949: PUSH
26950: LD_INT 0
26952: PUSH
26953: LD_INT 0
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: ST_TO_ADDR
// hc_agressivity = 0 ;
26962: LD_ADDR_OWVAR 35
26966: PUSH
26967: LD_INT 0
26969: ST_TO_ADDR
// un = CreateHuman ;
26970: LD_ADDR_VAR 0 3
26974: PUSH
26975: CALL_OW 44
26979: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
26980: LD_VAR 0 3
26984: PPUSH
26985: LD_INT 6
26987: PPUSH
26988: LD_INT 0
26990: PPUSH
26991: CALL_OW 49
// end ;
26995: GO 26902
26997: POP
26998: POP
// end ; end_of_file
26999: LD_VAR 0 1
27003: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
27004: LD_EXP 46
27008: PUSH
27009: LD_INT 1
27011: EQUAL
27012: IFFALSE 27096
27014: GO 27016
27016: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
27017: LD_INT 7
27019: PPUSH
27020: LD_INT 5
27022: PPUSH
27023: LD_INT 4
27025: PUSH
27026: LD_INT 5
27028: PUSH
27029: LD_INT 6
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: LIST
27036: PUSH
27037: LD_OWVAR 67
27041: ARRAY
27042: PPUSH
27043: LD_EXP 36
27047: PPUSH
27048: LD_EXP 37
27052: PPUSH
27053: CALL_OW 12
27057: PPUSH
27058: LD_INT 2
27060: PPUSH
27061: LD_INT 1
27063: PPUSH
27064: LD_INT 1
27066: PPUSH
27067: EMPTY
27068: PPUSH
27069: LD_INT 25
27071: PUSH
27072: LD_INT 26
27074: PUSH
27075: LD_INT 27
27077: PUSH
27078: LD_INT 28
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: PPUSH
27087: EMPTY
27088: PPUSH
27089: LD_INT 1
27091: PPUSH
27092: CALL 17015 0 11
27096: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27097: LD_EXP 46
27101: PUSH
27102: LD_INT 1
27104: EQUAL
27105: IFFALSE 27193
27107: GO 27109
27109: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
27110: LD_INT 5
27112: PPUSH
27113: LD_INT 2
27115: PPUSH
27116: LD_INT 5
27118: PUSH
27119: LD_INT 6
27121: PUSH
27122: LD_INT 8
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: LIST
27129: PUSH
27130: LD_OWVAR 67
27134: ARRAY
27135: PPUSH
27136: LD_INT 0
27138: PPUSH
27139: LD_INT 0
27141: PPUSH
27142: LD_INT 2
27144: PUSH
27145: LD_INT 4
27147: PUSH
27148: LD_INT 5
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: LIST
27155: PUSH
27156: LD_OWVAR 67
27160: ARRAY
27161: PPUSH
27162: LD_INT 0
27164: PPUSH
27165: LD_EXP 36
27169: PPUSH
27170: LD_EXP 37
27174: PPUSH
27175: CALL_OW 12
27179: PPUSH
27180: LD_INT 7
27182: PPUSH
27183: LD_INT 9
27185: PPUSH
27186: LD_INT 1
27188: PPUSH
27189: CALL 18719 0 11
27193: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27194: LD_EXP 46
27198: PUSH
27199: LD_INT 1
27201: EQUAL
27202: IFFALSE 27211
27204: GO 27206
27206: DISABLE
// PrepareArabianSheik ;
27207: CALL 4608 0 0
27211: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27212: LD_EXP 29
27216: PUSH
27217: LD_EXP 64
27221: PUSH
27222: LD_INT 1
27224: EQUAL
27225: AND
27226: IFFALSE 27295
27228: GO 27230
27230: DISABLE
// begin enable ;
27231: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
27232: LD_INT 6
27234: PPUSH
27235: LD_INT 3
27237: PPUSH
27238: LD_EXP 60
27242: PPUSH
27243: LD_INT 0
27245: PPUSH
27246: LD_OWVAR 67
27250: PPUSH
27251: LD_INT 0
27253: PPUSH
27254: LD_EXP 60
27258: PUSH
27259: LD_INT 3
27261: DIV
27262: PUSH
27263: LD_INT 1
27265: PLUS
27266: PPUSH
27267: LD_EXP 36
27271: PPUSH
27272: LD_EXP 37
27276: PPUSH
27277: CALL_OW 12
27281: PPUSH
27282: LD_INT 17
27284: PPUSH
27285: LD_INT 18
27287: PPUSH
27288: LD_INT 1
27290: PPUSH
27291: CALL 18719 0 11
// end ;
27295: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27296: LD_EXP 29
27300: PUSH
27301: LD_EXP 64
27305: PUSH
27306: LD_INT 1
27308: EQUAL
27309: AND
27310: IFFALSE 27387
27312: GO 27314
27314: DISABLE
// begin enable ;
27315: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
27316: LD_INT 17
27318: PPUSH
27319: LD_INT 6
27321: PPUSH
27322: LD_EXP 59
27326: PPUSH
27327: LD_EXP 36
27331: PPUSH
27332: LD_EXP 37
27336: PPUSH
27337: CALL_OW 12
27341: PPUSH
27342: LD_INT 3
27344: PPUSH
27345: LD_INT 1
27347: PPUSH
27348: LD_INT 3
27350: PUSH
27351: LD_INT 3
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PPUSH
27358: LD_INT 43
27360: PUSH
27361: LD_INT 44
27363: PUSH
27364: LD_INT 45
27366: PUSH
27367: LD_INT 46
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: PPUSH
27376: EMPTY
27377: PPUSH
27378: EMPTY
27379: PPUSH
27380: LD_INT 1
27382: PPUSH
27383: CALL 17015 0 11
// end ;
27387: END
// every 10 10$00 trigger joinEpsilon do
27388: LD_EXP 29
27392: IFFALSE 27446
27394: GO 27396
27396: DISABLE
// begin enable ;
27397: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
27398: LD_ADDR_EXP 59
27402: PUSH
27403: LD_EXP 59
27407: PUSH
27408: LD_INT 1
27410: PPUSH
27411: LD_OWVAR 67
27415: PPUSH
27416: CALL_OW 12
27420: PLUS
27421: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
27422: LD_ADDR_EXP 60
27426: PUSH
27427: LD_EXP 60
27431: PUSH
27432: LD_INT 1
27434: PPUSH
27435: LD_OWVAR 67
27439: PPUSH
27440: CALL_OW 12
27444: PLUS
27445: ST_TO_ADDR
// end ;
27446: END
// every 21 21$0 trigger attackAvalaible = 1 do
27447: LD_EXP 64
27451: PUSH
27452: LD_INT 1
27454: EQUAL
27455: IFFALSE 27468
27457: GO 27459
27459: DISABLE
// attackAvalaible = 0 ; end_of_file
27460: LD_ADDR_EXP 64
27464: PUSH
27465: LD_INT 0
27467: ST_TO_ADDR
27468: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
27469: LD_INT 54
27471: PPUSH
27472: LD_INT 1
27474: PPUSH
27475: CALL_OW 321
27479: PUSH
27480: LD_INT 2
27482: EQUAL
27483: PUSH
27484: LD_INT 55
27486: PPUSH
27487: LD_INT 1
27489: PPUSH
27490: CALL_OW 321
27494: PUSH
27495: LD_INT 2
27497: EQUAL
27498: AND
27499: PUSH
27500: LD_INT 21
27502: PPUSH
27503: LD_INT 1
27505: PPUSH
27506: CALL_OW 321
27510: PUSH
27511: LD_INT 2
27513: EQUAL
27514: AND
27515: PUSH
27516: LD_INT 22
27518: PPUSH
27519: LD_INT 1
27521: PPUSH
27522: CALL_OW 321
27526: PUSH
27527: LD_INT 2
27529: EQUAL
27530: AND
27531: PUSH
27532: LD_INT 12
27534: PPUSH
27535: LD_INT 1
27537: PPUSH
27538: CALL_OW 321
27542: PUSH
27543: LD_INT 1
27545: EQUAL
27546: PUSH
27547: LD_INT 32
27549: PPUSH
27550: LD_INT 1
27552: PPUSH
27553: CALL_OW 321
27557: PUSH
27558: LD_INT 1
27560: EQUAL
27561: OR
27562: PUSH
27563: EMPTY
27564: LIST
27565: AND
27566: PUSH
27567: LD_EXP 48
27571: PUSH
27572: LD_INT 1
27574: EQUAL
27575: AND
27576: PUSH
27577: LD_INT 22
27579: PUSH
27580: LD_INT 3
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 21
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PPUSH
27601: CALL_OW 69
27605: PUSH
27606: LD_INT 0
27608: EQUAL
27609: AND
27610: IFFALSE 27666
27612: GO 27614
27614: DISABLE
// begin case query ( QEndMission ) of 1 :
27615: LD_STRING QEndMission
27617: PPUSH
27618: CALL_OW 97
27622: PUSH
27623: LD_INT 1
27625: DOUBLE
27626: EQUAL
27627: IFTRUE 27631
27629: GO 27642
27631: POP
// begin end_the_mission_allowed = true ;
27632: LD_ADDR_OWVAR 57
27636: PUSH
27637: LD_INT 1
27639: ST_TO_ADDR
// end ; 2 :
27640: GO 27666
27642: LD_INT 2
27644: DOUBLE
27645: EQUAL
27646: IFTRUE 27650
27648: GO 27665
27650: POP
// begin fastEnd = 1 ;
27651: LD_ADDR_EXP 63
27655: PUSH
27656: LD_INT 1
27658: ST_TO_ADDR
// FinishMission ;
27659: CALL 27711 0 0
// end ; end ;
27663: GO 27666
27665: POP
// end ;
27666: END
// every 0 0$1 trigger spawnRussians and not ruDepotConstructed and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
27667: LD_EXP 58
27671: PUSH
27672: LD_EXP 57
27676: NOT
27677: AND
27678: PUSH
27679: LD_INT 22
27681: PUSH
27682: LD_INT 3
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PPUSH
27689: CALL_OW 69
27693: PUSH
27694: LD_INT 0
27696: EQUAL
27697: AND
27698: IFFALSE 27710
27700: GO 27702
27702: DISABLE
// SetAchievement ( ACH_TACT ) ;
27703: LD_STRING ACH_TACT
27705: PPUSH
27706: CALL_OW 543
27710: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
27711: LD_INT 0
27713: PPUSH
27714: PPUSH
27715: PPUSH
27716: PPUSH
// if not snipersTrained then
27717: LD_EXP 62
27721: NOT
27722: IFFALSE 27731
// SetAchievement ( ACH_SNIPER ) ;
27724: LD_STRING ACH_SNIPER
27726: PPUSH
27727: CALL_OW 543
// m1 := false ;
27731: LD_ADDR_VAR 0 2
27735: PUSH
27736: LD_INT 0
27738: ST_TO_ADDR
// m2 := false ;
27739: LD_ADDR_VAR 0 3
27743: PUSH
27744: LD_INT 0
27746: ST_TO_ADDR
// m3 := false ;
27747: LD_ADDR_VAR 0 4
27751: PUSH
27752: LD_INT 0
27754: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
27755: LD_EXP 53
27759: PPUSH
27760: LD_STRING 10_KhatamStatus_1
27762: PPUSH
27763: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
27767: LD_EXP 52
27771: PPUSH
27772: LD_STRING 10_GensherEscape_1
27774: PPUSH
27775: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
27779: LD_INT 12
27781: PPUSH
27782: LD_INT 1
27784: PPUSH
27785: CALL_OW 321
27789: PUSH
27790: LD_INT 2
27792: EQUAL
27793: IFFALSE 27815
// begin AddMedal ( sights , 1 ) ;
27795: LD_STRING sights
27797: PPUSH
27798: LD_INT 1
27800: PPUSH
27801: CALL_OW 101
// m1 := true ;
27805: LD_ADDR_VAR 0 2
27809: PUSH
27810: LD_INT 1
27812: ST_TO_ADDR
// end else
27813: GO 27826
// begin AddMedal ( sights , - 1 ) ;
27815: LD_STRING sights
27817: PPUSH
27818: LD_INT 1
27820: NEG
27821: PPUSH
27822: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
27826: LD_INT 32
27828: PPUSH
27829: LD_INT 1
27831: PPUSH
27832: CALL_OW 321
27836: PUSH
27837: LD_INT 2
27839: EQUAL
27840: IFFALSE 27862
// begin AddMedal ( computers , 1 ) ;
27842: LD_STRING computers
27844: PPUSH
27845: LD_INT 1
27847: PPUSH
27848: CALL_OW 101
// m2 := true ;
27852: LD_ADDR_VAR 0 3
27856: PUSH
27857: LD_INT 1
27859: ST_TO_ADDR
// end else
27860: GO 27873
// begin AddMedal ( computers , - 1 ) ;
27862: LD_STRING computers
27864: PPUSH
27865: LD_INT 1
27867: NEG
27868: PPUSH
27869: CALL_OW 101
// end ; if arabianEscape = 0 then
27873: LD_EXP 47
27877: PUSH
27878: LD_INT 0
27880: EQUAL
27881: IFFALSE 27913
// begin AddMedal ( renegades , 2 ) ;
27883: LD_STRING renegades
27885: PPUSH
27886: LD_INT 2
27888: PPUSH
27889: CALL_OW 101
// m3 := true ;
27893: LD_ADDR_VAR 0 4
27897: PUSH
27898: LD_INT 1
27900: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
27901: LD_INT 0
27903: PPUSH
27904: LD_STRING 10_ScientistsEscape_1
27906: PPUSH
27907: CALL_OW 39
// end else
27911: GO 27924
// begin AddMedal ( renegades , - 1 ) ;
27913: LD_STRING renegades
27915: PPUSH
27916: LD_INT 1
27918: NEG
27919: PPUSH
27920: CALL_OW 101
// end ; SaveEpsilonBase ;
27924: CALL 28710 0 0
// if m1 and m2 and m3 and Difficulty = 3 then
27928: LD_VAR 0 2
27932: PUSH
27933: LD_VAR 0 3
27937: AND
27938: PUSH
27939: LD_VAR 0 4
27943: AND
27944: PUSH
27945: LD_OWVAR 67
27949: PUSH
27950: LD_INT 3
27952: EQUAL
27953: AND
27954: IFFALSE 27966
// SetAchievementEX ( ACH_AMER , 10 ) ;
27956: LD_STRING ACH_AMER
27958: PPUSH
27959: LD_INT 10
27961: PPUSH
27962: CALL_OW 564
// if tick <= 40 40$00 then
27966: LD_OWVAR 1
27970: PUSH
27971: LD_INT 84000
27973: LESSEQUAL
27974: IFFALSE 27990
// begin wait ( 3 ) ;
27976: LD_INT 3
27978: PPUSH
27979: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
27983: LD_STRING ACH_ASPEED_10
27985: PPUSH
27986: CALL_OW 543
// end ; GiveMedals ( Main ) ;
27990: LD_STRING Main
27992: PPUSH
27993: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
27997: LD_INT 22
27999: PUSH
28000: LD_INT 1
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 23
28009: PUSH
28010: LD_INT 1
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 21
28019: PUSH
28020: LD_INT 1
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 2
28029: PUSH
28030: LD_INT 25
28032: PUSH
28033: LD_INT 1
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 25
28042: PUSH
28043: LD_INT 2
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 25
28052: PUSH
28053: LD_INT 3
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 25
28062: PUSH
28063: LD_INT 4
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 25
28072: PUSH
28073: LD_INT 5
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 25
28082: PUSH
28083: LD_INT 8
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: PPUSH
28105: CALL_OW 69
28109: PPUSH
28110: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
28114: LD_EXP 1
28118: PPUSH
28119: LD_EXP 54
28123: PUSH
28124: LD_STRING JMM
28126: STR
28127: PPUSH
28128: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
28132: LD_EXP 2
28136: PPUSH
28137: LD_EXP 54
28141: PUSH
28142: LD_STRING Brown
28144: STR
28145: PPUSH
28146: CALL 11199 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
28150: LD_EXP 3
28154: PPUSH
28155: LD_EXP 54
28159: PUSH
28160: LD_STRING Donaldson
28162: STR
28163: PPUSH
28164: CALL 11199 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
28168: LD_EXP 4
28172: PPUSH
28173: LD_EXP 54
28177: PUSH
28178: LD_STRING Bobby
28180: STR
28181: PPUSH
28182: CALL 11199 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
28186: LD_EXP 5
28190: PPUSH
28191: LD_EXP 54
28195: PUSH
28196: LD_STRING Cyrus
28198: STR
28199: PPUSH
28200: CALL 11199 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
28204: LD_EXP 6
28208: PPUSH
28209: LD_EXP 54
28213: PUSH
28214: LD_STRING Lisa
28216: STR
28217: PPUSH
28218: CALL 11199 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
28222: LD_EXP 7
28226: PPUSH
28227: LD_EXP 54
28231: PUSH
28232: LD_STRING Frank
28234: STR
28235: PPUSH
28236: CALL 11199 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
28240: LD_EXP 8
28244: PPUSH
28245: LD_EXP 54
28249: PUSH
28250: LD_STRING Kikuchi
28252: STR
28253: PPUSH
28254: CALL 11199 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
28258: LD_EXP 9
28262: PPUSH
28263: LD_EXP 54
28267: PUSH
28268: LD_STRING Houten
28270: STR
28271: PPUSH
28272: CALL 11199 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
28276: LD_EXP 10
28280: PPUSH
28281: LD_EXP 54
28285: PUSH
28286: LD_STRING Gary
28288: STR
28289: PPUSH
28290: CALL 11199 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
28294: LD_EXP 19
28298: PPUSH
28299: LD_EXP 54
28303: PUSH
28304: LD_STRING Cornell
28306: STR
28307: PPUSH
28308: CALL 11199 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
28312: LD_EXP 11
28316: PPUSH
28317: LD_EXP 54
28321: PUSH
28322: LD_STRING Simms
28324: STR
28325: PPUSH
28326: CALL 11199 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
28330: LD_EXP 12
28334: PPUSH
28335: LD_EXP 54
28339: PUSH
28340: LD_STRING Denis
28342: STR
28343: PPUSH
28344: CALL 11199 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
28348: LD_EXP 13
28352: PPUSH
28353: LD_EXP 54
28357: PUSH
28358: LD_STRING Joan
28360: STR
28361: PPUSH
28362: CALL 11199 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
28366: LD_EXP 15
28370: PPUSH
28371: LD_EXP 54
28375: PUSH
28376: LD_STRING Gladstone
28378: STR
28379: PPUSH
28380: CALL 11199 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
28384: LD_EXP 17
28388: PPUSH
28389: LD_EXP 54
28393: PUSH
28394: LD_STRING DeltaDoctor
28396: STR
28397: PPUSH
28398: CALL 11199 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
28402: LD_EXP 22
28406: PPUSH
28407: LD_STRING 10c_lock
28409: PPUSH
28410: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
28414: LD_INT 50
28416: PUSH
28417: EMPTY
28418: LIST
28419: PUSH
28420: LD_INT 22
28422: PUSH
28423: LD_INT 1
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 21
28432: PUSH
28433: LD_INT 1
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 2
28442: PUSH
28443: LD_INT 25
28445: PUSH
28446: LD_INT 1
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 25
28455: PUSH
28456: LD_INT 2
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 25
28465: PUSH
28466: LD_INT 3
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 25
28475: PUSH
28476: LD_INT 4
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 25
28485: PUSH
28486: LD_INT 5
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 25
28495: PUSH
28496: LD_INT 8
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: PPUSH
28518: CALL_OW 69
28522: PUSH
28523: LD_EXP 1
28527: PUSH
28528: LD_EXP 2
28532: PUSH
28533: LD_EXP 3
28537: PUSH
28538: LD_EXP 4
28542: PUSH
28543: LD_EXP 5
28547: PUSH
28548: LD_EXP 6
28552: PUSH
28553: LD_EXP 7
28557: PUSH
28558: LD_EXP 15
28562: PUSH
28563: LD_EXP 8
28567: PUSH
28568: LD_EXP 12
28572: PUSH
28573: LD_EXP 13
28577: PUSH
28578: LD_EXP 9
28582: PUSH
28583: LD_EXP 11
28587: PUSH
28588: LD_EXP 10
28592: PUSH
28593: LD_EXP 17
28597: PUSH
28598: LD_EXP 19
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: DIFF
28621: PPUSH
28622: LD_STRING 10_other_survivors
28624: PPUSH
28625: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
28629: LD_INT 50
28631: PUSH
28632: EMPTY
28633: LIST
28634: PUSH
28635: LD_INT 22
28637: PUSH
28638: LD_INT 1
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 21
28647: PUSH
28648: LD_INT 1
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 2
28657: PUSH
28658: LD_INT 25
28660: PUSH
28661: LD_INT 16
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 25
28670: PUSH
28671: LD_INT 12
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: LIST
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: PPUSH
28689: CALL_OW 69
28693: PPUSH
28694: LD_STRING 10_ape
28696: PPUSH
28697: CALL_OW 38
// YouWin ;
28701: CALL_OW 103
// end ;
28705: LD_VAR 0 1
28709: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
28710: LD_INT 0
28712: PPUSH
28713: PPUSH
28714: PPUSH
28715: PPUSH
// epsilonBase = [ ] ;
28716: LD_ADDR_VAR 0 2
28720: PUSH
28721: EMPTY
28722: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
28723: LD_ADDR_VAR 0 3
28727: PUSH
28728: LD_INT 22
28730: PUSH
28731: LD_INT 1
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 21
28740: PUSH
28741: LD_INT 3
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 50
28750: PUSH
28751: EMPTY
28752: LIST
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: LIST
28758: PPUSH
28759: CALL_OW 69
28763: ST_TO_ADDR
// for i in buildings do
28764: LD_ADDR_VAR 0 4
28768: PUSH
28769: LD_VAR 0 3
28773: PUSH
28774: FOR_IN
28775: IFFALSE 29227
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
28777: LD_VAR 0 4
28781: PPUSH
28782: CALL_OW 266
28786: PUSH
28787: LD_INT 6
28789: PUSH
28790: LD_INT 7
28792: PUSH
28793: LD_INT 8
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: LIST
28800: IN
28801: IFFALSE 28915
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
28803: LD_ADDR_VAR 0 2
28807: PUSH
28808: LD_VAR 0 2
28812: PUSH
28813: LD_VAR 0 4
28817: PPUSH
28818: CALL_OW 266
28822: PUSH
28823: LD_VAR 0 4
28827: PPUSH
28828: CALL_OW 250
28832: PUSH
28833: LD_VAR 0 4
28837: PPUSH
28838: CALL_OW 251
28842: PUSH
28843: LD_VAR 0 4
28847: PPUSH
28848: CALL_OW 254
28852: PUSH
28853: LD_VAR 0 4
28857: PPUSH
28858: CALL_OW 267
28862: PUSH
28863: LD_VAR 0 4
28867: PPUSH
28868: CALL_OW 248
28872: PUSH
28873: LD_VAR 0 4
28877: PPUSH
28878: LD_INT 1
28880: PPUSH
28881: CALL_OW 268
28885: PUSH
28886: LD_VAR 0 4
28890: PPUSH
28891: LD_INT 2
28893: PPUSH
28894: CALL_OW 268
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: PUSH
28909: EMPTY
28910: LIST
28911: ADD
28912: ST_TO_ADDR
28913: GO 29225
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
28915: LD_VAR 0 4
28919: PPUSH
28920: CALL_OW 266
28924: PUSH
28925: LD_INT 32
28927: EQUAL
28928: PUSH
28929: LD_VAR 0 4
28933: PPUSH
28934: CALL_OW 266
28938: PUSH
28939: LD_INT 33
28941: EQUAL
28942: OR
28943: IFFALSE 29040
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
28945: LD_ADDR_VAR 0 2
28949: PUSH
28950: LD_VAR 0 2
28954: PUSH
28955: LD_VAR 0 4
28959: PPUSH
28960: CALL_OW 266
28964: PUSH
28965: LD_VAR 0 4
28969: PPUSH
28970: CALL_OW 250
28974: PUSH
28975: LD_VAR 0 4
28979: PPUSH
28980: CALL_OW 251
28984: PUSH
28985: LD_VAR 0 4
28989: PPUSH
28990: CALL_OW 254
28994: PUSH
28995: LD_VAR 0 4
28999: PPUSH
29000: CALL_OW 267
29004: PUSH
29005: LD_VAR 0 4
29009: PPUSH
29010: CALL_OW 248
29014: PUSH
29015: LD_VAR 0 4
29019: PPUSH
29020: CALL_OW 269
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: PUSH
29034: EMPTY
29035: LIST
29036: ADD
29037: ST_TO_ADDR
29038: GO 29225
// if GetBType ( i ) = b_factory then
29040: LD_VAR 0 4
29044: PPUSH
29045: CALL_OW 266
29049: PUSH
29050: LD_INT 3
29052: EQUAL
29053: IFFALSE 29143
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
29055: LD_ADDR_VAR 0 2
29059: PUSH
29060: LD_VAR 0 2
29064: PPUSH
29065: LD_INT 1
29067: PPUSH
29068: LD_VAR 0 4
29072: PPUSH
29073: CALL_OW 266
29077: PUSH
29078: LD_VAR 0 4
29082: PPUSH
29083: CALL_OW 250
29087: PUSH
29088: LD_VAR 0 4
29092: PPUSH
29093: CALL_OW 251
29097: PUSH
29098: LD_VAR 0 4
29102: PPUSH
29103: CALL_OW 254
29107: PUSH
29108: LD_VAR 0 4
29112: PPUSH
29113: CALL_OW 267
29117: PUSH
29118: LD_VAR 0 4
29122: PPUSH
29123: CALL_OW 248
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: PPUSH
29136: CALL_OW 2
29140: ST_TO_ADDR
29141: GO 29225
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
29143: LD_ADDR_VAR 0 2
29147: PUSH
29148: LD_VAR 0 2
29152: PUSH
29153: LD_VAR 0 4
29157: PPUSH
29158: CALL_OW 266
29162: PUSH
29163: LD_VAR 0 4
29167: PPUSH
29168: CALL_OW 250
29172: PUSH
29173: LD_VAR 0 4
29177: PPUSH
29178: CALL_OW 251
29182: PUSH
29183: LD_VAR 0 4
29187: PPUSH
29188: CALL_OW 254
29192: PUSH
29193: LD_VAR 0 4
29197: PPUSH
29198: CALL_OW 267
29202: PUSH
29203: LD_VAR 0 4
29207: PPUSH
29208: CALL_OW 248
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: PUSH
29221: EMPTY
29222: LIST
29223: ADD
29224: ST_TO_ADDR
// end ;
29225: GO 28774
29227: POP
29228: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
29229: LD_VAR 0 2
29233: PPUSH
29234: LD_STRING 10_EpsilonBase
29236: PPUSH
29237: CALL_OW 39
// SaveEnvironment ( epsilonTerrain , 10_EpsilonEnv ) ;
29241: LD_INT 19
29243: PPUSH
29244: LD_STRING 10_EpsilonEnv
29246: PPUSH
29247: CALL 29256 0 2
// end ;
29251: LD_VAR 0 1
29255: RET
// export function SaveEnvironment ( area , saveId ) ; begin
29256: LD_INT 0
29258: PPUSH
// result := ListEnvironmentArea ( area ) ;
29259: LD_ADDR_VAR 0 3
29263: PUSH
29264: LD_VAR 0 1
29268: PPUSH
29269: CALL_OW 353
29273: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
29274: LD_VAR 0 3
29278: PPUSH
29279: LD_VAR 0 2
29283: PPUSH
29284: CALL_OW 39
// end ; end_of_file
29288: LD_VAR 0 3
29292: RET
// every 0 0$01 do var timer ;
29293: GO 29295
29295: DISABLE
29296: LD_INT 0
29298: PPUSH
// begin timer := 0 0$30 ;
29299: LD_ADDR_VAR 0 1
29303: PUSH
29304: LD_INT 1050
29306: ST_TO_ADDR
// repeat wait ( timer ) ;
29307: LD_VAR 0 1
29311: PPUSH
29312: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
29316: LD_EXP 56
29320: PUSH
29321: LD_INT 6
29323: GREATEREQUAL
29324: PUSH
29325: LD_EXP 56
29329: PUSH
29330: LD_INT 12
29332: LESS
29333: AND
29334: IFFALSE 29350
// timer := timer + 0 0$3 ;
29336: LD_ADDR_VAR 0 1
29340: PUSH
29341: LD_VAR 0 1
29345: PUSH
29346: LD_INT 105
29348: PLUS
29349: ST_TO_ADDR
// if cratesSpawned >= 12 then
29350: LD_EXP 56
29354: PUSH
29355: LD_INT 12
29357: GREATEREQUAL
29358: IFFALSE 29374
// timer := timer + 0 0$9 ;
29360: LD_ADDR_VAR 0 1
29364: PUSH
29365: LD_VAR 0 1
29369: PUSH
29370: LD_INT 315
29372: PLUS
29373: ST_TO_ADDR
// if timer > 3 3$00 then
29374: LD_VAR 0 1
29378: PUSH
29379: LD_INT 6300
29381: GREATER
29382: IFFALSE 29392
// timer := 0 0$50 ;
29384: LD_ADDR_VAR 0 1
29388: PUSH
29389: LD_INT 1750
29391: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
29392: LD_INT 1
29394: PPUSH
29395: LD_INT 5
29397: PPUSH
29398: CALL_OW 12
29402: PPUSH
29403: LD_INT 16
29405: PPUSH
29406: LD_INT 1
29408: PPUSH
29409: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
29413: LD_ADDR_EXP 56
29417: PUSH
29418: LD_EXP 56
29422: PUSH
29423: LD_INT 1
29425: PLUS
29426: ST_TO_ADDR
// until false ;
29427: LD_INT 0
29429: IFFALSE 29307
// end ; end_of_file
29431: PPOPN 1
29433: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
29434: LD_INT 0
29436: PPUSH
// ar_crane := 88 ;
29437: LD_ADDR_EXP 75
29441: PUSH
29442: LD_INT 88
29444: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
29445: LD_ADDR_EXP 70
29449: PUSH
29450: LD_INT 89
29452: ST_TO_ADDR
// us_hack := 99 ;
29453: LD_ADDR_EXP 71
29457: PUSH
29458: LD_INT 99
29460: ST_TO_ADDR
// us_artillery := 97 ;
29461: LD_ADDR_EXP 72
29465: PUSH
29466: LD_INT 97
29468: ST_TO_ADDR
// ar_bio_bomb := 91 ;
29469: LD_ADDR_EXP 73
29473: PUSH
29474: LD_INT 91
29476: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
29477: LD_ADDR_EXP 74
29481: PUSH
29482: LD_INT 92
29484: ST_TO_ADDR
// ru_radar := 98 ;
29485: LD_ADDR_EXP 69
29489: PUSH
29490: LD_INT 98
29492: ST_TO_ADDR
// tech_Artillery := 80 ;
29493: LD_ADDR_EXP 76
29497: PUSH
29498: LD_INT 80
29500: ST_TO_ADDR
// tech_RadMat := 81 ;
29501: LD_ADDR_EXP 77
29505: PUSH
29506: LD_INT 81
29508: ST_TO_ADDR
// tech_BasicTools := 82 ;
29509: LD_ADDR_EXP 78
29513: PUSH
29514: LD_INT 82
29516: ST_TO_ADDR
// tech_Cargo := 83 ;
29517: LD_ADDR_EXP 79
29521: PUSH
29522: LD_INT 83
29524: ST_TO_ADDR
// tech_Track := 84 ;
29525: LD_ADDR_EXP 80
29529: PUSH
29530: LD_INT 84
29532: ST_TO_ADDR
// tech_Crane := 85 ;
29533: LD_ADDR_EXP 81
29537: PUSH
29538: LD_INT 85
29540: ST_TO_ADDR
// tech_Bulldozer := 86 ;
29541: LD_ADDR_EXP 82
29545: PUSH
29546: LD_INT 86
29548: ST_TO_ADDR
// tech_Hovercraft := 87 ;
29549: LD_ADDR_EXP 83
29553: PUSH
29554: LD_INT 87
29556: ST_TO_ADDR
// end ;
29557: LD_VAR 0 1
29561: RET
// every 1 do
29562: GO 29564
29564: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
29565: CALL 29434 0 0
29569: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
29570: LD_VAR 0 2
29574: PUSH
29575: LD_INT 100
29577: EQUAL
29578: IFFALSE 30527
// begin if not StreamModeActive then
29580: LD_EXP 84
29584: NOT
29585: IFFALSE 29595
// StreamModeActive := true ;
29587: LD_ADDR_EXP 84
29591: PUSH
29592: LD_INT 1
29594: ST_TO_ADDR
// if p3 = 0 then
29595: LD_VAR 0 3
29599: PUSH
29600: LD_INT 0
29602: EQUAL
29603: IFFALSE 29609
// InitStreamMode ;
29605: CALL 30760 0 0
// if p3 = 1 then
29609: LD_VAR 0 3
29613: PUSH
29614: LD_INT 1
29616: EQUAL
29617: IFFALSE 29627
// sRocket := true ;
29619: LD_ADDR_EXP 89
29623: PUSH
29624: LD_INT 1
29626: ST_TO_ADDR
// if p3 = 2 then
29627: LD_VAR 0 3
29631: PUSH
29632: LD_INT 2
29634: EQUAL
29635: IFFALSE 29645
// sSpeed := true ;
29637: LD_ADDR_EXP 88
29641: PUSH
29642: LD_INT 1
29644: ST_TO_ADDR
// if p3 = 3 then
29645: LD_VAR 0 3
29649: PUSH
29650: LD_INT 3
29652: EQUAL
29653: IFFALSE 29663
// sEngine := true ;
29655: LD_ADDR_EXP 90
29659: PUSH
29660: LD_INT 1
29662: ST_TO_ADDR
// if p3 = 4 then
29663: LD_VAR 0 3
29667: PUSH
29668: LD_INT 4
29670: EQUAL
29671: IFFALSE 29681
// sSpec := true ;
29673: LD_ADDR_EXP 87
29677: PUSH
29678: LD_INT 1
29680: ST_TO_ADDR
// if p3 = 5 then
29681: LD_VAR 0 3
29685: PUSH
29686: LD_INT 5
29688: EQUAL
29689: IFFALSE 29699
// sLevel := true ;
29691: LD_ADDR_EXP 91
29695: PUSH
29696: LD_INT 1
29698: ST_TO_ADDR
// if p3 = 6 then
29699: LD_VAR 0 3
29703: PUSH
29704: LD_INT 6
29706: EQUAL
29707: IFFALSE 29717
// sArmoury := true ;
29709: LD_ADDR_EXP 92
29713: PUSH
29714: LD_INT 1
29716: ST_TO_ADDR
// if p3 = 7 then
29717: LD_VAR 0 3
29721: PUSH
29722: LD_INT 7
29724: EQUAL
29725: IFFALSE 29735
// sRadar := true ;
29727: LD_ADDR_EXP 93
29731: PUSH
29732: LD_INT 1
29734: ST_TO_ADDR
// if p3 = 8 then
29735: LD_VAR 0 3
29739: PUSH
29740: LD_INT 8
29742: EQUAL
29743: IFFALSE 29753
// sBunker := true ;
29745: LD_ADDR_EXP 94
29749: PUSH
29750: LD_INT 1
29752: ST_TO_ADDR
// if p3 = 9 then
29753: LD_VAR 0 3
29757: PUSH
29758: LD_INT 9
29760: EQUAL
29761: IFFALSE 29771
// sHack := true ;
29763: LD_ADDR_EXP 95
29767: PUSH
29768: LD_INT 1
29770: ST_TO_ADDR
// if p3 = 10 then
29771: LD_VAR 0 3
29775: PUSH
29776: LD_INT 10
29778: EQUAL
29779: IFFALSE 29789
// sFire := true ;
29781: LD_ADDR_EXP 96
29785: PUSH
29786: LD_INT 1
29788: ST_TO_ADDR
// if p3 = 11 then
29789: LD_VAR 0 3
29793: PUSH
29794: LD_INT 11
29796: EQUAL
29797: IFFALSE 29807
// sRefresh := true ;
29799: LD_ADDR_EXP 97
29803: PUSH
29804: LD_INT 1
29806: ST_TO_ADDR
// if p3 = 12 then
29807: LD_VAR 0 3
29811: PUSH
29812: LD_INT 12
29814: EQUAL
29815: IFFALSE 29825
// sExp := true ;
29817: LD_ADDR_EXP 98
29821: PUSH
29822: LD_INT 1
29824: ST_TO_ADDR
// if p3 = 13 then
29825: LD_VAR 0 3
29829: PUSH
29830: LD_INT 13
29832: EQUAL
29833: IFFALSE 29843
// sDepot := true ;
29835: LD_ADDR_EXP 99
29839: PUSH
29840: LD_INT 1
29842: ST_TO_ADDR
// if p3 = 14 then
29843: LD_VAR 0 3
29847: PUSH
29848: LD_INT 14
29850: EQUAL
29851: IFFALSE 29861
// sFlag := true ;
29853: LD_ADDR_EXP 100
29857: PUSH
29858: LD_INT 1
29860: ST_TO_ADDR
// if p3 = 15 then
29861: LD_VAR 0 3
29865: PUSH
29866: LD_INT 15
29868: EQUAL
29869: IFFALSE 29879
// sKamikadze := true ;
29871: LD_ADDR_EXP 108
29875: PUSH
29876: LD_INT 1
29878: ST_TO_ADDR
// if p3 = 16 then
29879: LD_VAR 0 3
29883: PUSH
29884: LD_INT 16
29886: EQUAL
29887: IFFALSE 29897
// sTroll := true ;
29889: LD_ADDR_EXP 109
29893: PUSH
29894: LD_INT 1
29896: ST_TO_ADDR
// if p3 = 17 then
29897: LD_VAR 0 3
29901: PUSH
29902: LD_INT 17
29904: EQUAL
29905: IFFALSE 29915
// sSlow := true ;
29907: LD_ADDR_EXP 110
29911: PUSH
29912: LD_INT 1
29914: ST_TO_ADDR
// if p3 = 18 then
29915: LD_VAR 0 3
29919: PUSH
29920: LD_INT 18
29922: EQUAL
29923: IFFALSE 29933
// sLack := true ;
29925: LD_ADDR_EXP 111
29929: PUSH
29930: LD_INT 1
29932: ST_TO_ADDR
// if p3 = 19 then
29933: LD_VAR 0 3
29937: PUSH
29938: LD_INT 19
29940: EQUAL
29941: IFFALSE 29951
// sTank := true ;
29943: LD_ADDR_EXP 113
29947: PUSH
29948: LD_INT 1
29950: ST_TO_ADDR
// if p3 = 20 then
29951: LD_VAR 0 3
29955: PUSH
29956: LD_INT 20
29958: EQUAL
29959: IFFALSE 29969
// sRemote := true ;
29961: LD_ADDR_EXP 114
29965: PUSH
29966: LD_INT 1
29968: ST_TO_ADDR
// if p3 = 21 then
29969: LD_VAR 0 3
29973: PUSH
29974: LD_INT 21
29976: EQUAL
29977: IFFALSE 29987
// sPowell := true ;
29979: LD_ADDR_EXP 115
29983: PUSH
29984: LD_INT 1
29986: ST_TO_ADDR
// if p3 = 22 then
29987: LD_VAR 0 3
29991: PUSH
29992: LD_INT 22
29994: EQUAL
29995: IFFALSE 30005
// sTeleport := true ;
29997: LD_ADDR_EXP 118
30001: PUSH
30002: LD_INT 1
30004: ST_TO_ADDR
// if p3 = 23 then
30005: LD_VAR 0 3
30009: PUSH
30010: LD_INT 23
30012: EQUAL
30013: IFFALSE 30023
// sOilTower := true ;
30015: LD_ADDR_EXP 120
30019: PUSH
30020: LD_INT 1
30022: ST_TO_ADDR
// if p3 = 24 then
30023: LD_VAR 0 3
30027: PUSH
30028: LD_INT 24
30030: EQUAL
30031: IFFALSE 30041
// sShovel := true ;
30033: LD_ADDR_EXP 121
30037: PUSH
30038: LD_INT 1
30040: ST_TO_ADDR
// if p3 = 25 then
30041: LD_VAR 0 3
30045: PUSH
30046: LD_INT 25
30048: EQUAL
30049: IFFALSE 30059
// sSheik := true ;
30051: LD_ADDR_EXP 122
30055: PUSH
30056: LD_INT 1
30058: ST_TO_ADDR
// if p3 = 26 then
30059: LD_VAR 0 3
30063: PUSH
30064: LD_INT 26
30066: EQUAL
30067: IFFALSE 30077
// sEarthquake := true ;
30069: LD_ADDR_EXP 124
30073: PUSH
30074: LD_INT 1
30076: ST_TO_ADDR
// if p3 = 27 then
30077: LD_VAR 0 3
30081: PUSH
30082: LD_INT 27
30084: EQUAL
30085: IFFALSE 30095
// sAI := true ;
30087: LD_ADDR_EXP 125
30091: PUSH
30092: LD_INT 1
30094: ST_TO_ADDR
// if p3 = 28 then
30095: LD_VAR 0 3
30099: PUSH
30100: LD_INT 28
30102: EQUAL
30103: IFFALSE 30113
// sCargo := true ;
30105: LD_ADDR_EXP 128
30109: PUSH
30110: LD_INT 1
30112: ST_TO_ADDR
// if p3 = 29 then
30113: LD_VAR 0 3
30117: PUSH
30118: LD_INT 29
30120: EQUAL
30121: IFFALSE 30131
// sDLaser := true ;
30123: LD_ADDR_EXP 129
30127: PUSH
30128: LD_INT 1
30130: ST_TO_ADDR
// if p3 = 30 then
30131: LD_VAR 0 3
30135: PUSH
30136: LD_INT 30
30138: EQUAL
30139: IFFALSE 30149
// sExchange := true ;
30141: LD_ADDR_EXP 130
30145: PUSH
30146: LD_INT 1
30148: ST_TO_ADDR
// if p3 = 31 then
30149: LD_VAR 0 3
30153: PUSH
30154: LD_INT 31
30156: EQUAL
30157: IFFALSE 30167
// sFac := true ;
30159: LD_ADDR_EXP 131
30163: PUSH
30164: LD_INT 1
30166: ST_TO_ADDR
// if p3 = 32 then
30167: LD_VAR 0 3
30171: PUSH
30172: LD_INT 32
30174: EQUAL
30175: IFFALSE 30185
// sPower := true ;
30177: LD_ADDR_EXP 132
30181: PUSH
30182: LD_INT 1
30184: ST_TO_ADDR
// if p3 = 33 then
30185: LD_VAR 0 3
30189: PUSH
30190: LD_INT 33
30192: EQUAL
30193: IFFALSE 30203
// sRandom := true ;
30195: LD_ADDR_EXP 133
30199: PUSH
30200: LD_INT 1
30202: ST_TO_ADDR
// if p3 = 34 then
30203: LD_VAR 0 3
30207: PUSH
30208: LD_INT 34
30210: EQUAL
30211: IFFALSE 30221
// sShield := true ;
30213: LD_ADDR_EXP 134
30217: PUSH
30218: LD_INT 1
30220: ST_TO_ADDR
// if p3 = 35 then
30221: LD_VAR 0 3
30225: PUSH
30226: LD_INT 35
30228: EQUAL
30229: IFFALSE 30239
// sTime := true ;
30231: LD_ADDR_EXP 135
30235: PUSH
30236: LD_INT 1
30238: ST_TO_ADDR
// if p3 = 36 then
30239: LD_VAR 0 3
30243: PUSH
30244: LD_INT 36
30246: EQUAL
30247: IFFALSE 30257
// sTools := true ;
30249: LD_ADDR_EXP 136
30253: PUSH
30254: LD_INT 1
30256: ST_TO_ADDR
// if p3 = 101 then
30257: LD_VAR 0 3
30261: PUSH
30262: LD_INT 101
30264: EQUAL
30265: IFFALSE 30275
// sSold := true ;
30267: LD_ADDR_EXP 101
30271: PUSH
30272: LD_INT 1
30274: ST_TO_ADDR
// if p3 = 102 then
30275: LD_VAR 0 3
30279: PUSH
30280: LD_INT 102
30282: EQUAL
30283: IFFALSE 30293
// sDiff := true ;
30285: LD_ADDR_EXP 102
30289: PUSH
30290: LD_INT 1
30292: ST_TO_ADDR
// if p3 = 103 then
30293: LD_VAR 0 3
30297: PUSH
30298: LD_INT 103
30300: EQUAL
30301: IFFALSE 30311
// sFog := true ;
30303: LD_ADDR_EXP 105
30307: PUSH
30308: LD_INT 1
30310: ST_TO_ADDR
// if p3 = 104 then
30311: LD_VAR 0 3
30315: PUSH
30316: LD_INT 104
30318: EQUAL
30319: IFFALSE 30329
// sReset := true ;
30321: LD_ADDR_EXP 106
30325: PUSH
30326: LD_INT 1
30328: ST_TO_ADDR
// if p3 = 105 then
30329: LD_VAR 0 3
30333: PUSH
30334: LD_INT 105
30336: EQUAL
30337: IFFALSE 30347
// sSun := true ;
30339: LD_ADDR_EXP 107
30343: PUSH
30344: LD_INT 1
30346: ST_TO_ADDR
// if p3 = 106 then
30347: LD_VAR 0 3
30351: PUSH
30352: LD_INT 106
30354: EQUAL
30355: IFFALSE 30365
// sTiger := true ;
30357: LD_ADDR_EXP 103
30361: PUSH
30362: LD_INT 1
30364: ST_TO_ADDR
// if p3 = 107 then
30365: LD_VAR 0 3
30369: PUSH
30370: LD_INT 107
30372: EQUAL
30373: IFFALSE 30383
// sBomb := true ;
30375: LD_ADDR_EXP 104
30379: PUSH
30380: LD_INT 1
30382: ST_TO_ADDR
// if p3 = 108 then
30383: LD_VAR 0 3
30387: PUSH
30388: LD_INT 108
30390: EQUAL
30391: IFFALSE 30401
// sWound := true ;
30393: LD_ADDR_EXP 112
30397: PUSH
30398: LD_INT 1
30400: ST_TO_ADDR
// if p3 = 109 then
30401: LD_VAR 0 3
30405: PUSH
30406: LD_INT 109
30408: EQUAL
30409: IFFALSE 30419
// sBetray := true ;
30411: LD_ADDR_EXP 116
30415: PUSH
30416: LD_INT 1
30418: ST_TO_ADDR
// if p3 = 110 then
30419: LD_VAR 0 3
30423: PUSH
30424: LD_INT 110
30426: EQUAL
30427: IFFALSE 30437
// sContamin := true ;
30429: LD_ADDR_EXP 117
30433: PUSH
30434: LD_INT 1
30436: ST_TO_ADDR
// if p3 = 111 then
30437: LD_VAR 0 3
30441: PUSH
30442: LD_INT 111
30444: EQUAL
30445: IFFALSE 30455
// sOil := true ;
30447: LD_ADDR_EXP 119
30451: PUSH
30452: LD_INT 1
30454: ST_TO_ADDR
// if p3 = 112 then
30455: LD_VAR 0 3
30459: PUSH
30460: LD_INT 112
30462: EQUAL
30463: IFFALSE 30473
// sStu := true ;
30465: LD_ADDR_EXP 123
30469: PUSH
30470: LD_INT 1
30472: ST_TO_ADDR
// if p3 = 113 then
30473: LD_VAR 0 3
30477: PUSH
30478: LD_INT 113
30480: EQUAL
30481: IFFALSE 30491
// sBazooka := true ;
30483: LD_ADDR_EXP 126
30487: PUSH
30488: LD_INT 1
30490: ST_TO_ADDR
// if p3 = 114 then
30491: LD_VAR 0 3
30495: PUSH
30496: LD_INT 114
30498: EQUAL
30499: IFFALSE 30509
// sMortar := true ;
30501: LD_ADDR_EXP 127
30505: PUSH
30506: LD_INT 1
30508: ST_TO_ADDR
// if p3 = 115 then
30509: LD_VAR 0 3
30513: PUSH
30514: LD_INT 115
30516: EQUAL
30517: IFFALSE 30527
// sRanger := true ;
30519: LD_ADDR_EXP 137
30523: PUSH
30524: LD_INT 1
30526: ST_TO_ADDR
// end ; if p2 = 101 then
30527: LD_VAR 0 2
30531: PUSH
30532: LD_INT 101
30534: EQUAL
30535: IFFALSE 30738
// begin case p3 of 1 :
30537: LD_VAR 0 3
30541: PUSH
30542: LD_INT 1
30544: DOUBLE
30545: EQUAL
30546: IFTRUE 30550
30548: GO 30557
30550: POP
// hHackUnlimitedResources ; 2 :
30551: CALL 40832 0 0
30555: GO 30738
30557: LD_INT 2
30559: DOUBLE
30560: EQUAL
30561: IFTRUE 30565
30563: GO 30572
30565: POP
// hHackSetLevel10 ; 3 :
30566: CALL 40965 0 0
30570: GO 30738
30572: LD_INT 3
30574: DOUBLE
30575: EQUAL
30576: IFTRUE 30580
30578: GO 30587
30580: POP
// hHackSetLevel10YourUnits ; 4 :
30581: CALL 41050 0 0
30585: GO 30738
30587: LD_INT 4
30589: DOUBLE
30590: EQUAL
30591: IFTRUE 30595
30593: GO 30617
30595: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
30596: LD_VAR 0 4
30600: PPUSH
30601: LD_VAR 0 5
30605: PPUSH
30606: LD_VAR 0 6
30610: PPUSH
30611: CALL 41140 0 3
30615: GO 30738
30617: LD_INT 5
30619: DOUBLE
30620: EQUAL
30621: IFTRUE 30625
30623: GO 30632
30625: POP
// hHackSpawnVehicle ; 6 :
30626: CALL 41201 0 0
30630: GO 30738
30632: LD_INT 6
30634: DOUBLE
30635: EQUAL
30636: IFTRUE 30640
30638: GO 30647
30640: POP
// hHackInvincible ; 7 :
30641: CALL 41747 0 0
30645: GO 30738
30647: LD_INT 7
30649: DOUBLE
30650: EQUAL
30651: IFTRUE 30655
30653: GO 30662
30655: POP
// hHackInvisible ; 8 :
30656: CALL 41858 0 0
30660: GO 30738
30662: LD_INT 8
30664: DOUBLE
30665: EQUAL
30666: IFTRUE 30670
30668: GO 30677
30670: POP
// hHackChangeYourSide ; 9 :
30671: CALL 41915 0 0
30675: GO 30738
30677: LD_INT 9
30679: DOUBLE
30680: EQUAL
30681: IFTRUE 30685
30683: GO 30692
30685: POP
// hHackChangeUnitSide ; 10 :
30686: CALL 41957 0 0
30690: GO 30738
30692: LD_INT 10
30694: DOUBLE
30695: EQUAL
30696: IFTRUE 30700
30698: GO 30707
30700: POP
// hHackFog ; 11 :
30701: CALL 42058 0 0
30705: GO 30738
30707: LD_INT 11
30709: DOUBLE
30710: EQUAL
30711: IFTRUE 30715
30713: GO 30722
30715: POP
// hHackApeman ; 12 :
30716: CALL 42073 0 0
30720: GO 30738
30722: LD_INT 12
30724: DOUBLE
30725: EQUAL
30726: IFTRUE 30730
30728: GO 30737
30730: POP
// hHackBoom ; end ;
30731: CALL 42158 0 0
30735: GO 30738
30737: POP
// end ; end ;
30738: PPOPN 6
30740: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
30741: GO 30743
30743: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
30744: LD_STRING initStreamRollete();
30746: PPUSH
30747: CALL_OW 559
// InitStreamMode ;
30751: CALL 30760 0 0
// DefineStreamItems ( ) ;
30755: CALL 31200 0 0
// end ;
30759: END
// function InitStreamMode ; begin
30760: LD_INT 0
30762: PPUSH
// streamModeActive := false ;
30763: LD_ADDR_EXP 84
30767: PUSH
30768: LD_INT 0
30770: ST_TO_ADDR
// normalCounter := 36 ;
30771: LD_ADDR_EXP 85
30775: PUSH
30776: LD_INT 36
30778: ST_TO_ADDR
// hardcoreCounter := 16 ;
30779: LD_ADDR_EXP 86
30783: PUSH
30784: LD_INT 16
30786: ST_TO_ADDR
// sRocket := false ;
30787: LD_ADDR_EXP 89
30791: PUSH
30792: LD_INT 0
30794: ST_TO_ADDR
// sSpeed := false ;
30795: LD_ADDR_EXP 88
30799: PUSH
30800: LD_INT 0
30802: ST_TO_ADDR
// sEngine := false ;
30803: LD_ADDR_EXP 90
30807: PUSH
30808: LD_INT 0
30810: ST_TO_ADDR
// sSpec := false ;
30811: LD_ADDR_EXP 87
30815: PUSH
30816: LD_INT 0
30818: ST_TO_ADDR
// sLevel := false ;
30819: LD_ADDR_EXP 91
30823: PUSH
30824: LD_INT 0
30826: ST_TO_ADDR
// sArmoury := false ;
30827: LD_ADDR_EXP 92
30831: PUSH
30832: LD_INT 0
30834: ST_TO_ADDR
// sRadar := false ;
30835: LD_ADDR_EXP 93
30839: PUSH
30840: LD_INT 0
30842: ST_TO_ADDR
// sBunker := false ;
30843: LD_ADDR_EXP 94
30847: PUSH
30848: LD_INT 0
30850: ST_TO_ADDR
// sHack := false ;
30851: LD_ADDR_EXP 95
30855: PUSH
30856: LD_INT 0
30858: ST_TO_ADDR
// sFire := false ;
30859: LD_ADDR_EXP 96
30863: PUSH
30864: LD_INT 0
30866: ST_TO_ADDR
// sRefresh := false ;
30867: LD_ADDR_EXP 97
30871: PUSH
30872: LD_INT 0
30874: ST_TO_ADDR
// sExp := false ;
30875: LD_ADDR_EXP 98
30879: PUSH
30880: LD_INT 0
30882: ST_TO_ADDR
// sDepot := false ;
30883: LD_ADDR_EXP 99
30887: PUSH
30888: LD_INT 0
30890: ST_TO_ADDR
// sFlag := false ;
30891: LD_ADDR_EXP 100
30895: PUSH
30896: LD_INT 0
30898: ST_TO_ADDR
// sKamikadze := false ;
30899: LD_ADDR_EXP 108
30903: PUSH
30904: LD_INT 0
30906: ST_TO_ADDR
// sTroll := false ;
30907: LD_ADDR_EXP 109
30911: PUSH
30912: LD_INT 0
30914: ST_TO_ADDR
// sSlow := false ;
30915: LD_ADDR_EXP 110
30919: PUSH
30920: LD_INT 0
30922: ST_TO_ADDR
// sLack := false ;
30923: LD_ADDR_EXP 111
30927: PUSH
30928: LD_INT 0
30930: ST_TO_ADDR
// sTank := false ;
30931: LD_ADDR_EXP 113
30935: PUSH
30936: LD_INT 0
30938: ST_TO_ADDR
// sRemote := false ;
30939: LD_ADDR_EXP 114
30943: PUSH
30944: LD_INT 0
30946: ST_TO_ADDR
// sPowell := false ;
30947: LD_ADDR_EXP 115
30951: PUSH
30952: LD_INT 0
30954: ST_TO_ADDR
// sTeleport := false ;
30955: LD_ADDR_EXP 118
30959: PUSH
30960: LD_INT 0
30962: ST_TO_ADDR
// sOilTower := false ;
30963: LD_ADDR_EXP 120
30967: PUSH
30968: LD_INT 0
30970: ST_TO_ADDR
// sShovel := false ;
30971: LD_ADDR_EXP 121
30975: PUSH
30976: LD_INT 0
30978: ST_TO_ADDR
// sSheik := false ;
30979: LD_ADDR_EXP 122
30983: PUSH
30984: LD_INT 0
30986: ST_TO_ADDR
// sEarthquake := false ;
30987: LD_ADDR_EXP 124
30991: PUSH
30992: LD_INT 0
30994: ST_TO_ADDR
// sAI := false ;
30995: LD_ADDR_EXP 125
30999: PUSH
31000: LD_INT 0
31002: ST_TO_ADDR
// sCargo := false ;
31003: LD_ADDR_EXP 128
31007: PUSH
31008: LD_INT 0
31010: ST_TO_ADDR
// sDLaser := false ;
31011: LD_ADDR_EXP 129
31015: PUSH
31016: LD_INT 0
31018: ST_TO_ADDR
// sExchange := false ;
31019: LD_ADDR_EXP 130
31023: PUSH
31024: LD_INT 0
31026: ST_TO_ADDR
// sFac := false ;
31027: LD_ADDR_EXP 131
31031: PUSH
31032: LD_INT 0
31034: ST_TO_ADDR
// sPower := false ;
31035: LD_ADDR_EXP 132
31039: PUSH
31040: LD_INT 0
31042: ST_TO_ADDR
// sRandom := false ;
31043: LD_ADDR_EXP 133
31047: PUSH
31048: LD_INT 0
31050: ST_TO_ADDR
// sShield := false ;
31051: LD_ADDR_EXP 134
31055: PUSH
31056: LD_INT 0
31058: ST_TO_ADDR
// sTime := false ;
31059: LD_ADDR_EXP 135
31063: PUSH
31064: LD_INT 0
31066: ST_TO_ADDR
// sTools := false ;
31067: LD_ADDR_EXP 136
31071: PUSH
31072: LD_INT 0
31074: ST_TO_ADDR
// sSold := false ;
31075: LD_ADDR_EXP 101
31079: PUSH
31080: LD_INT 0
31082: ST_TO_ADDR
// sDiff := false ;
31083: LD_ADDR_EXP 102
31087: PUSH
31088: LD_INT 0
31090: ST_TO_ADDR
// sFog := false ;
31091: LD_ADDR_EXP 105
31095: PUSH
31096: LD_INT 0
31098: ST_TO_ADDR
// sReset := false ;
31099: LD_ADDR_EXP 106
31103: PUSH
31104: LD_INT 0
31106: ST_TO_ADDR
// sSun := false ;
31107: LD_ADDR_EXP 107
31111: PUSH
31112: LD_INT 0
31114: ST_TO_ADDR
// sTiger := false ;
31115: LD_ADDR_EXP 103
31119: PUSH
31120: LD_INT 0
31122: ST_TO_ADDR
// sBomb := false ;
31123: LD_ADDR_EXP 104
31127: PUSH
31128: LD_INT 0
31130: ST_TO_ADDR
// sWound := false ;
31131: LD_ADDR_EXP 112
31135: PUSH
31136: LD_INT 0
31138: ST_TO_ADDR
// sBetray := false ;
31139: LD_ADDR_EXP 116
31143: PUSH
31144: LD_INT 0
31146: ST_TO_ADDR
// sContamin := false ;
31147: LD_ADDR_EXP 117
31151: PUSH
31152: LD_INT 0
31154: ST_TO_ADDR
// sOil := false ;
31155: LD_ADDR_EXP 119
31159: PUSH
31160: LD_INT 0
31162: ST_TO_ADDR
// sStu := false ;
31163: LD_ADDR_EXP 123
31167: PUSH
31168: LD_INT 0
31170: ST_TO_ADDR
// sBazooka := false ;
31171: LD_ADDR_EXP 126
31175: PUSH
31176: LD_INT 0
31178: ST_TO_ADDR
// sMortar := false ;
31179: LD_ADDR_EXP 127
31183: PUSH
31184: LD_INT 0
31186: ST_TO_ADDR
// sRanger := false ;
31187: LD_ADDR_EXP 137
31191: PUSH
31192: LD_INT 0
31194: ST_TO_ADDR
// end ;
31195: LD_VAR 0 1
31199: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
31200: LD_INT 0
31202: PPUSH
31203: PPUSH
31204: PPUSH
31205: PPUSH
31206: PPUSH
// result := [ ] ;
31207: LD_ADDR_VAR 0 1
31211: PUSH
31212: EMPTY
31213: ST_TO_ADDR
// if campaign_id = 1 then
31214: LD_OWVAR 69
31218: PUSH
31219: LD_INT 1
31221: EQUAL
31222: IFFALSE 34160
// begin case mission_number of 1 :
31224: LD_OWVAR 70
31228: PUSH
31229: LD_INT 1
31231: DOUBLE
31232: EQUAL
31233: IFTRUE 31237
31235: GO 31301
31237: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
31238: LD_ADDR_VAR 0 1
31242: PUSH
31243: LD_INT 2
31245: PUSH
31246: LD_INT 4
31248: PUSH
31249: LD_INT 11
31251: PUSH
31252: LD_INT 12
31254: PUSH
31255: LD_INT 15
31257: PUSH
31258: LD_INT 16
31260: PUSH
31261: LD_INT 22
31263: PUSH
31264: LD_INT 23
31266: PUSH
31267: LD_INT 26
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 101
31283: PUSH
31284: LD_INT 102
31286: PUSH
31287: LD_INT 106
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: LIST
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: ST_TO_ADDR
31299: GO 34158
31301: LD_INT 2
31303: DOUBLE
31304: EQUAL
31305: IFTRUE 31309
31307: GO 31381
31309: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
31310: LD_ADDR_VAR 0 1
31314: PUSH
31315: LD_INT 2
31317: PUSH
31318: LD_INT 4
31320: PUSH
31321: LD_INT 11
31323: PUSH
31324: LD_INT 12
31326: PUSH
31327: LD_INT 15
31329: PUSH
31330: LD_INT 16
31332: PUSH
31333: LD_INT 22
31335: PUSH
31336: LD_INT 23
31338: PUSH
31339: LD_INT 26
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 101
31355: PUSH
31356: LD_INT 102
31358: PUSH
31359: LD_INT 105
31361: PUSH
31362: LD_INT 106
31364: PUSH
31365: LD_INT 108
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: ST_TO_ADDR
31379: GO 34158
31381: LD_INT 3
31383: DOUBLE
31384: EQUAL
31385: IFTRUE 31389
31387: GO 31465
31389: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
31390: LD_ADDR_VAR 0 1
31394: PUSH
31395: LD_INT 2
31397: PUSH
31398: LD_INT 4
31400: PUSH
31401: LD_INT 5
31403: PUSH
31404: LD_INT 11
31406: PUSH
31407: LD_INT 12
31409: PUSH
31410: LD_INT 15
31412: PUSH
31413: LD_INT 16
31415: PUSH
31416: LD_INT 22
31418: PUSH
31419: LD_INT 26
31421: PUSH
31422: LD_INT 36
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 101
31439: PUSH
31440: LD_INT 102
31442: PUSH
31443: LD_INT 105
31445: PUSH
31446: LD_INT 106
31448: PUSH
31449: LD_INT 108
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: ST_TO_ADDR
31463: GO 34158
31465: LD_INT 4
31467: DOUBLE
31468: EQUAL
31469: IFTRUE 31473
31471: GO 31557
31473: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
31474: LD_ADDR_VAR 0 1
31478: PUSH
31479: LD_INT 2
31481: PUSH
31482: LD_INT 4
31484: PUSH
31485: LD_INT 5
31487: PUSH
31488: LD_INT 8
31490: PUSH
31491: LD_INT 11
31493: PUSH
31494: LD_INT 12
31496: PUSH
31497: LD_INT 15
31499: PUSH
31500: LD_INT 16
31502: PUSH
31503: LD_INT 22
31505: PUSH
31506: LD_INT 23
31508: PUSH
31509: LD_INT 26
31511: PUSH
31512: LD_INT 36
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 101
31531: PUSH
31532: LD_INT 102
31534: PUSH
31535: LD_INT 105
31537: PUSH
31538: LD_INT 106
31540: PUSH
31541: LD_INT 108
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: ST_TO_ADDR
31555: GO 34158
31557: LD_INT 5
31559: DOUBLE
31560: EQUAL
31561: IFTRUE 31565
31563: GO 31665
31565: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
31566: LD_ADDR_VAR 0 1
31570: PUSH
31571: LD_INT 2
31573: PUSH
31574: LD_INT 4
31576: PUSH
31577: LD_INT 5
31579: PUSH
31580: LD_INT 6
31582: PUSH
31583: LD_INT 8
31585: PUSH
31586: LD_INT 11
31588: PUSH
31589: LD_INT 12
31591: PUSH
31592: LD_INT 15
31594: PUSH
31595: LD_INT 16
31597: PUSH
31598: LD_INT 22
31600: PUSH
31601: LD_INT 23
31603: PUSH
31604: LD_INT 25
31606: PUSH
31607: LD_INT 26
31609: PUSH
31610: LD_INT 36
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 101
31631: PUSH
31632: LD_INT 102
31634: PUSH
31635: LD_INT 105
31637: PUSH
31638: LD_INT 106
31640: PUSH
31641: LD_INT 108
31643: PUSH
31644: LD_INT 109
31646: PUSH
31647: LD_INT 112
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: ST_TO_ADDR
31663: GO 34158
31665: LD_INT 6
31667: DOUBLE
31668: EQUAL
31669: IFTRUE 31673
31671: GO 31793
31673: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
31674: LD_ADDR_VAR 0 1
31678: PUSH
31679: LD_INT 2
31681: PUSH
31682: LD_INT 4
31684: PUSH
31685: LD_INT 5
31687: PUSH
31688: LD_INT 6
31690: PUSH
31691: LD_INT 8
31693: PUSH
31694: LD_INT 11
31696: PUSH
31697: LD_INT 12
31699: PUSH
31700: LD_INT 15
31702: PUSH
31703: LD_INT 16
31705: PUSH
31706: LD_INT 20
31708: PUSH
31709: LD_INT 21
31711: PUSH
31712: LD_INT 22
31714: PUSH
31715: LD_INT 23
31717: PUSH
31718: LD_INT 25
31720: PUSH
31721: LD_INT 26
31723: PUSH
31724: LD_INT 30
31726: PUSH
31727: LD_INT 31
31729: PUSH
31730: LD_INT 32
31732: PUSH
31733: LD_INT 36
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 101
31759: PUSH
31760: LD_INT 102
31762: PUSH
31763: LD_INT 105
31765: PUSH
31766: LD_INT 106
31768: PUSH
31769: LD_INT 108
31771: PUSH
31772: LD_INT 109
31774: PUSH
31775: LD_INT 112
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: ST_TO_ADDR
31791: GO 34158
31793: LD_INT 7
31795: DOUBLE
31796: EQUAL
31797: IFTRUE 31801
31799: GO 31901
31801: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
31802: LD_ADDR_VAR 0 1
31806: PUSH
31807: LD_INT 2
31809: PUSH
31810: LD_INT 4
31812: PUSH
31813: LD_INT 5
31815: PUSH
31816: LD_INT 7
31818: PUSH
31819: LD_INT 11
31821: PUSH
31822: LD_INT 12
31824: PUSH
31825: LD_INT 15
31827: PUSH
31828: LD_INT 16
31830: PUSH
31831: LD_INT 20
31833: PUSH
31834: LD_INT 21
31836: PUSH
31837: LD_INT 22
31839: PUSH
31840: LD_INT 23
31842: PUSH
31843: LD_INT 25
31845: PUSH
31846: LD_INT 26
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 101
31867: PUSH
31868: LD_INT 102
31870: PUSH
31871: LD_INT 103
31873: PUSH
31874: LD_INT 105
31876: PUSH
31877: LD_INT 106
31879: PUSH
31880: LD_INT 108
31882: PUSH
31883: LD_INT 112
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: ST_TO_ADDR
31899: GO 34158
31901: LD_INT 8
31903: DOUBLE
31904: EQUAL
31905: IFTRUE 31909
31907: GO 32037
31909: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
31910: LD_ADDR_VAR 0 1
31914: PUSH
31915: LD_INT 2
31917: PUSH
31918: LD_INT 4
31920: PUSH
31921: LD_INT 5
31923: PUSH
31924: LD_INT 6
31926: PUSH
31927: LD_INT 7
31929: PUSH
31930: LD_INT 8
31932: PUSH
31933: LD_INT 11
31935: PUSH
31936: LD_INT 12
31938: PUSH
31939: LD_INT 15
31941: PUSH
31942: LD_INT 16
31944: PUSH
31945: LD_INT 20
31947: PUSH
31948: LD_INT 21
31950: PUSH
31951: LD_INT 22
31953: PUSH
31954: LD_INT 23
31956: PUSH
31957: LD_INT 25
31959: PUSH
31960: LD_INT 26
31962: PUSH
31963: LD_INT 30
31965: PUSH
31966: LD_INT 31
31968: PUSH
31969: LD_INT 32
31971: PUSH
31972: LD_INT 36
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 101
31999: PUSH
32000: LD_INT 102
32002: PUSH
32003: LD_INT 103
32005: PUSH
32006: LD_INT 105
32008: PUSH
32009: LD_INT 106
32011: PUSH
32012: LD_INT 108
32014: PUSH
32015: LD_INT 109
32017: PUSH
32018: LD_INT 112
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: ST_TO_ADDR
32035: GO 34158
32037: LD_INT 9
32039: DOUBLE
32040: EQUAL
32041: IFTRUE 32045
32043: GO 32181
32045: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
32046: LD_ADDR_VAR 0 1
32050: PUSH
32051: LD_INT 2
32053: PUSH
32054: LD_INT 4
32056: PUSH
32057: LD_INT 5
32059: PUSH
32060: LD_INT 6
32062: PUSH
32063: LD_INT 7
32065: PUSH
32066: LD_INT 8
32068: PUSH
32069: LD_INT 11
32071: PUSH
32072: LD_INT 12
32074: PUSH
32075: LD_INT 15
32077: PUSH
32078: LD_INT 16
32080: PUSH
32081: LD_INT 20
32083: PUSH
32084: LD_INT 21
32086: PUSH
32087: LD_INT 22
32089: PUSH
32090: LD_INT 23
32092: PUSH
32093: LD_INT 25
32095: PUSH
32096: LD_INT 26
32098: PUSH
32099: LD_INT 28
32101: PUSH
32102: LD_INT 30
32104: PUSH
32105: LD_INT 31
32107: PUSH
32108: LD_INT 32
32110: PUSH
32111: LD_INT 36
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 101
32139: PUSH
32140: LD_INT 102
32142: PUSH
32143: LD_INT 103
32145: PUSH
32146: LD_INT 105
32148: PUSH
32149: LD_INT 106
32151: PUSH
32152: LD_INT 108
32154: PUSH
32155: LD_INT 109
32157: PUSH
32158: LD_INT 112
32160: PUSH
32161: LD_INT 114
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: ST_TO_ADDR
32179: GO 34158
32181: LD_INT 10
32183: DOUBLE
32184: EQUAL
32185: IFTRUE 32189
32187: GO 32373
32189: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
32190: LD_ADDR_VAR 0 1
32194: PUSH
32195: LD_INT 2
32197: PUSH
32198: LD_INT 4
32200: PUSH
32201: LD_INT 5
32203: PUSH
32204: LD_INT 6
32206: PUSH
32207: LD_INT 7
32209: PUSH
32210: LD_INT 8
32212: PUSH
32213: LD_INT 9
32215: PUSH
32216: LD_INT 10
32218: PUSH
32219: LD_INT 11
32221: PUSH
32222: LD_INT 12
32224: PUSH
32225: LD_INT 13
32227: PUSH
32228: LD_INT 14
32230: PUSH
32231: LD_INT 15
32233: PUSH
32234: LD_INT 16
32236: PUSH
32237: LD_INT 17
32239: PUSH
32240: LD_INT 18
32242: PUSH
32243: LD_INT 19
32245: PUSH
32246: LD_INT 20
32248: PUSH
32249: LD_INT 21
32251: PUSH
32252: LD_INT 22
32254: PUSH
32255: LD_INT 23
32257: PUSH
32258: LD_INT 24
32260: PUSH
32261: LD_INT 25
32263: PUSH
32264: LD_INT 26
32266: PUSH
32267: LD_INT 28
32269: PUSH
32270: LD_INT 30
32272: PUSH
32273: LD_INT 31
32275: PUSH
32276: LD_INT 32
32278: PUSH
32279: LD_INT 36
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 101
32315: PUSH
32316: LD_INT 102
32318: PUSH
32319: LD_INT 103
32321: PUSH
32322: LD_INT 104
32324: PUSH
32325: LD_INT 105
32327: PUSH
32328: LD_INT 106
32330: PUSH
32331: LD_INT 107
32333: PUSH
32334: LD_INT 108
32336: PUSH
32337: LD_INT 109
32339: PUSH
32340: LD_INT 110
32342: PUSH
32343: LD_INT 111
32345: PUSH
32346: LD_INT 112
32348: PUSH
32349: LD_INT 114
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: ST_TO_ADDR
32371: GO 34158
32373: LD_INT 11
32375: DOUBLE
32376: EQUAL
32377: IFTRUE 32381
32379: GO 32573
32381: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
32382: LD_ADDR_VAR 0 1
32386: PUSH
32387: LD_INT 2
32389: PUSH
32390: LD_INT 3
32392: PUSH
32393: LD_INT 4
32395: PUSH
32396: LD_INT 5
32398: PUSH
32399: LD_INT 6
32401: PUSH
32402: LD_INT 7
32404: PUSH
32405: LD_INT 8
32407: PUSH
32408: LD_INT 9
32410: PUSH
32411: LD_INT 10
32413: PUSH
32414: LD_INT 11
32416: PUSH
32417: LD_INT 12
32419: PUSH
32420: LD_INT 13
32422: PUSH
32423: LD_INT 14
32425: PUSH
32426: LD_INT 15
32428: PUSH
32429: LD_INT 16
32431: PUSH
32432: LD_INT 17
32434: PUSH
32435: LD_INT 18
32437: PUSH
32438: LD_INT 19
32440: PUSH
32441: LD_INT 20
32443: PUSH
32444: LD_INT 21
32446: PUSH
32447: LD_INT 22
32449: PUSH
32450: LD_INT 23
32452: PUSH
32453: LD_INT 24
32455: PUSH
32456: LD_INT 25
32458: PUSH
32459: LD_INT 26
32461: PUSH
32462: LD_INT 28
32464: PUSH
32465: LD_INT 30
32467: PUSH
32468: LD_INT 31
32470: PUSH
32471: LD_INT 32
32473: PUSH
32474: LD_INT 34
32476: PUSH
32477: LD_INT 36
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 101
32515: PUSH
32516: LD_INT 102
32518: PUSH
32519: LD_INT 103
32521: PUSH
32522: LD_INT 104
32524: PUSH
32525: LD_INT 105
32527: PUSH
32528: LD_INT 106
32530: PUSH
32531: LD_INT 107
32533: PUSH
32534: LD_INT 108
32536: PUSH
32537: LD_INT 109
32539: PUSH
32540: LD_INT 110
32542: PUSH
32543: LD_INT 111
32545: PUSH
32546: LD_INT 112
32548: PUSH
32549: LD_INT 114
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: ST_TO_ADDR
32571: GO 34158
32573: LD_INT 12
32575: DOUBLE
32576: EQUAL
32577: IFTRUE 32581
32579: GO 32789
32581: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
32582: LD_ADDR_VAR 0 1
32586: PUSH
32587: LD_INT 1
32589: PUSH
32590: LD_INT 2
32592: PUSH
32593: LD_INT 3
32595: PUSH
32596: LD_INT 4
32598: PUSH
32599: LD_INT 5
32601: PUSH
32602: LD_INT 6
32604: PUSH
32605: LD_INT 7
32607: PUSH
32608: LD_INT 8
32610: PUSH
32611: LD_INT 9
32613: PUSH
32614: LD_INT 10
32616: PUSH
32617: LD_INT 11
32619: PUSH
32620: LD_INT 12
32622: PUSH
32623: LD_INT 13
32625: PUSH
32626: LD_INT 14
32628: PUSH
32629: LD_INT 15
32631: PUSH
32632: LD_INT 16
32634: PUSH
32635: LD_INT 17
32637: PUSH
32638: LD_INT 18
32640: PUSH
32641: LD_INT 19
32643: PUSH
32644: LD_INT 20
32646: PUSH
32647: LD_INT 21
32649: PUSH
32650: LD_INT 22
32652: PUSH
32653: LD_INT 23
32655: PUSH
32656: LD_INT 24
32658: PUSH
32659: LD_INT 25
32661: PUSH
32662: LD_INT 26
32664: PUSH
32665: LD_INT 27
32667: PUSH
32668: LD_INT 28
32670: PUSH
32671: LD_INT 30
32673: PUSH
32674: LD_INT 31
32676: PUSH
32677: LD_INT 32
32679: PUSH
32680: LD_INT 33
32682: PUSH
32683: LD_INT 34
32685: PUSH
32686: LD_INT 36
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 101
32727: PUSH
32728: LD_INT 102
32730: PUSH
32731: LD_INT 103
32733: PUSH
32734: LD_INT 104
32736: PUSH
32737: LD_INT 105
32739: PUSH
32740: LD_INT 106
32742: PUSH
32743: LD_INT 107
32745: PUSH
32746: LD_INT 108
32748: PUSH
32749: LD_INT 109
32751: PUSH
32752: LD_INT 110
32754: PUSH
32755: LD_INT 111
32757: PUSH
32758: LD_INT 112
32760: PUSH
32761: LD_INT 113
32763: PUSH
32764: LD_INT 114
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: ST_TO_ADDR
32787: GO 34158
32789: LD_INT 13
32791: DOUBLE
32792: EQUAL
32793: IFTRUE 32797
32795: GO 32993
32797: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
32798: LD_ADDR_VAR 0 1
32802: PUSH
32803: LD_INT 1
32805: PUSH
32806: LD_INT 2
32808: PUSH
32809: LD_INT 3
32811: PUSH
32812: LD_INT 4
32814: PUSH
32815: LD_INT 5
32817: PUSH
32818: LD_INT 8
32820: PUSH
32821: LD_INT 9
32823: PUSH
32824: LD_INT 10
32826: PUSH
32827: LD_INT 11
32829: PUSH
32830: LD_INT 12
32832: PUSH
32833: LD_INT 14
32835: PUSH
32836: LD_INT 15
32838: PUSH
32839: LD_INT 16
32841: PUSH
32842: LD_INT 17
32844: PUSH
32845: LD_INT 18
32847: PUSH
32848: LD_INT 19
32850: PUSH
32851: LD_INT 20
32853: PUSH
32854: LD_INT 21
32856: PUSH
32857: LD_INT 22
32859: PUSH
32860: LD_INT 23
32862: PUSH
32863: LD_INT 24
32865: PUSH
32866: LD_INT 25
32868: PUSH
32869: LD_INT 26
32871: PUSH
32872: LD_INT 27
32874: PUSH
32875: LD_INT 28
32877: PUSH
32878: LD_INT 30
32880: PUSH
32881: LD_INT 31
32883: PUSH
32884: LD_INT 32
32886: PUSH
32887: LD_INT 33
32889: PUSH
32890: LD_INT 34
32892: PUSH
32893: LD_INT 36
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 101
32931: PUSH
32932: LD_INT 102
32934: PUSH
32935: LD_INT 103
32937: PUSH
32938: LD_INT 104
32940: PUSH
32941: LD_INT 105
32943: PUSH
32944: LD_INT 106
32946: PUSH
32947: LD_INT 107
32949: PUSH
32950: LD_INT 108
32952: PUSH
32953: LD_INT 109
32955: PUSH
32956: LD_INT 110
32958: PUSH
32959: LD_INT 111
32961: PUSH
32962: LD_INT 112
32964: PUSH
32965: LD_INT 113
32967: PUSH
32968: LD_INT 114
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: ST_TO_ADDR
32991: GO 34158
32993: LD_INT 14
32995: DOUBLE
32996: EQUAL
32997: IFTRUE 33001
32999: GO 33213
33001: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
33002: LD_ADDR_VAR 0 1
33006: PUSH
33007: LD_INT 1
33009: PUSH
33010: LD_INT 2
33012: PUSH
33013: LD_INT 3
33015: PUSH
33016: LD_INT 4
33018: PUSH
33019: LD_INT 5
33021: PUSH
33022: LD_INT 6
33024: PUSH
33025: LD_INT 7
33027: PUSH
33028: LD_INT 8
33030: PUSH
33031: LD_INT 9
33033: PUSH
33034: LD_INT 10
33036: PUSH
33037: LD_INT 11
33039: PUSH
33040: LD_INT 12
33042: PUSH
33043: LD_INT 13
33045: PUSH
33046: LD_INT 14
33048: PUSH
33049: LD_INT 15
33051: PUSH
33052: LD_INT 16
33054: PUSH
33055: LD_INT 17
33057: PUSH
33058: LD_INT 18
33060: PUSH
33061: LD_INT 19
33063: PUSH
33064: LD_INT 20
33066: PUSH
33067: LD_INT 21
33069: PUSH
33070: LD_INT 22
33072: PUSH
33073: LD_INT 23
33075: PUSH
33076: LD_INT 24
33078: PUSH
33079: LD_INT 25
33081: PUSH
33082: LD_INT 26
33084: PUSH
33085: LD_INT 27
33087: PUSH
33088: LD_INT 28
33090: PUSH
33091: LD_INT 29
33093: PUSH
33094: LD_INT 30
33096: PUSH
33097: LD_INT 31
33099: PUSH
33100: LD_INT 32
33102: PUSH
33103: LD_INT 33
33105: PUSH
33106: LD_INT 34
33108: PUSH
33109: LD_INT 36
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 101
33151: PUSH
33152: LD_INT 102
33154: PUSH
33155: LD_INT 103
33157: PUSH
33158: LD_INT 104
33160: PUSH
33161: LD_INT 105
33163: PUSH
33164: LD_INT 106
33166: PUSH
33167: LD_INT 107
33169: PUSH
33170: LD_INT 108
33172: PUSH
33173: LD_INT 109
33175: PUSH
33176: LD_INT 110
33178: PUSH
33179: LD_INT 111
33181: PUSH
33182: LD_INT 112
33184: PUSH
33185: LD_INT 113
33187: PUSH
33188: LD_INT 114
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: ST_TO_ADDR
33211: GO 34158
33213: LD_INT 15
33215: DOUBLE
33216: EQUAL
33217: IFTRUE 33221
33219: GO 33433
33221: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
33222: LD_ADDR_VAR 0 1
33226: PUSH
33227: LD_INT 1
33229: PUSH
33230: LD_INT 2
33232: PUSH
33233: LD_INT 3
33235: PUSH
33236: LD_INT 4
33238: PUSH
33239: LD_INT 5
33241: PUSH
33242: LD_INT 6
33244: PUSH
33245: LD_INT 7
33247: PUSH
33248: LD_INT 8
33250: PUSH
33251: LD_INT 9
33253: PUSH
33254: LD_INT 10
33256: PUSH
33257: LD_INT 11
33259: PUSH
33260: LD_INT 12
33262: PUSH
33263: LD_INT 13
33265: PUSH
33266: LD_INT 14
33268: PUSH
33269: LD_INT 15
33271: PUSH
33272: LD_INT 16
33274: PUSH
33275: LD_INT 17
33277: PUSH
33278: LD_INT 18
33280: PUSH
33281: LD_INT 19
33283: PUSH
33284: LD_INT 20
33286: PUSH
33287: LD_INT 21
33289: PUSH
33290: LD_INT 22
33292: PUSH
33293: LD_INT 23
33295: PUSH
33296: LD_INT 24
33298: PUSH
33299: LD_INT 25
33301: PUSH
33302: LD_INT 26
33304: PUSH
33305: LD_INT 27
33307: PUSH
33308: LD_INT 28
33310: PUSH
33311: LD_INT 29
33313: PUSH
33314: LD_INT 30
33316: PUSH
33317: LD_INT 31
33319: PUSH
33320: LD_INT 32
33322: PUSH
33323: LD_INT 33
33325: PUSH
33326: LD_INT 34
33328: PUSH
33329: LD_INT 36
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 101
33371: PUSH
33372: LD_INT 102
33374: PUSH
33375: LD_INT 103
33377: PUSH
33378: LD_INT 104
33380: PUSH
33381: LD_INT 105
33383: PUSH
33384: LD_INT 106
33386: PUSH
33387: LD_INT 107
33389: PUSH
33390: LD_INT 108
33392: PUSH
33393: LD_INT 109
33395: PUSH
33396: LD_INT 110
33398: PUSH
33399: LD_INT 111
33401: PUSH
33402: LD_INT 112
33404: PUSH
33405: LD_INT 113
33407: PUSH
33408: LD_INT 114
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: ST_TO_ADDR
33431: GO 34158
33433: LD_INT 16
33435: DOUBLE
33436: EQUAL
33437: IFTRUE 33441
33439: GO 33565
33441: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
33442: LD_ADDR_VAR 0 1
33446: PUSH
33447: LD_INT 2
33449: PUSH
33450: LD_INT 4
33452: PUSH
33453: LD_INT 5
33455: PUSH
33456: LD_INT 7
33458: PUSH
33459: LD_INT 11
33461: PUSH
33462: LD_INT 12
33464: PUSH
33465: LD_INT 15
33467: PUSH
33468: LD_INT 16
33470: PUSH
33471: LD_INT 20
33473: PUSH
33474: LD_INT 21
33476: PUSH
33477: LD_INT 22
33479: PUSH
33480: LD_INT 23
33482: PUSH
33483: LD_INT 25
33485: PUSH
33486: LD_INT 26
33488: PUSH
33489: LD_INT 30
33491: PUSH
33492: LD_INT 31
33494: PUSH
33495: LD_INT 32
33497: PUSH
33498: LD_INT 33
33500: PUSH
33501: LD_INT 34
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 101
33527: PUSH
33528: LD_INT 102
33530: PUSH
33531: LD_INT 103
33533: PUSH
33534: LD_INT 106
33536: PUSH
33537: LD_INT 108
33539: PUSH
33540: LD_INT 112
33542: PUSH
33543: LD_INT 113
33545: PUSH
33546: LD_INT 114
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: ST_TO_ADDR
33563: GO 34158
33565: LD_INT 17
33567: DOUBLE
33568: EQUAL
33569: IFTRUE 33573
33571: GO 33785
33573: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
33574: LD_ADDR_VAR 0 1
33578: PUSH
33579: LD_INT 1
33581: PUSH
33582: LD_INT 2
33584: PUSH
33585: LD_INT 3
33587: PUSH
33588: LD_INT 4
33590: PUSH
33591: LD_INT 5
33593: PUSH
33594: LD_INT 6
33596: PUSH
33597: LD_INT 7
33599: PUSH
33600: LD_INT 8
33602: PUSH
33603: LD_INT 9
33605: PUSH
33606: LD_INT 10
33608: PUSH
33609: LD_INT 11
33611: PUSH
33612: LD_INT 12
33614: PUSH
33615: LD_INT 13
33617: PUSH
33618: LD_INT 14
33620: PUSH
33621: LD_INT 15
33623: PUSH
33624: LD_INT 16
33626: PUSH
33627: LD_INT 17
33629: PUSH
33630: LD_INT 18
33632: PUSH
33633: LD_INT 19
33635: PUSH
33636: LD_INT 20
33638: PUSH
33639: LD_INT 21
33641: PUSH
33642: LD_INT 22
33644: PUSH
33645: LD_INT 23
33647: PUSH
33648: LD_INT 24
33650: PUSH
33651: LD_INT 25
33653: PUSH
33654: LD_INT 26
33656: PUSH
33657: LD_INT 27
33659: PUSH
33660: LD_INT 28
33662: PUSH
33663: LD_INT 29
33665: PUSH
33666: LD_INT 30
33668: PUSH
33669: LD_INT 31
33671: PUSH
33672: LD_INT 32
33674: PUSH
33675: LD_INT 33
33677: PUSH
33678: LD_INT 34
33680: PUSH
33681: LD_INT 36
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 101
33723: PUSH
33724: LD_INT 102
33726: PUSH
33727: LD_INT 103
33729: PUSH
33730: LD_INT 104
33732: PUSH
33733: LD_INT 105
33735: PUSH
33736: LD_INT 106
33738: PUSH
33739: LD_INT 107
33741: PUSH
33742: LD_INT 108
33744: PUSH
33745: LD_INT 109
33747: PUSH
33748: LD_INT 110
33750: PUSH
33751: LD_INT 111
33753: PUSH
33754: LD_INT 112
33756: PUSH
33757: LD_INT 113
33759: PUSH
33760: LD_INT 114
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: ST_TO_ADDR
33783: GO 34158
33785: LD_INT 18
33787: DOUBLE
33788: EQUAL
33789: IFTRUE 33793
33791: GO 33929
33793: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
33794: LD_ADDR_VAR 0 1
33798: PUSH
33799: LD_INT 2
33801: PUSH
33802: LD_INT 4
33804: PUSH
33805: LD_INT 5
33807: PUSH
33808: LD_INT 7
33810: PUSH
33811: LD_INT 11
33813: PUSH
33814: LD_INT 12
33816: PUSH
33817: LD_INT 15
33819: PUSH
33820: LD_INT 16
33822: PUSH
33823: LD_INT 20
33825: PUSH
33826: LD_INT 21
33828: PUSH
33829: LD_INT 22
33831: PUSH
33832: LD_INT 23
33834: PUSH
33835: LD_INT 25
33837: PUSH
33838: LD_INT 26
33840: PUSH
33841: LD_INT 30
33843: PUSH
33844: LD_INT 31
33846: PUSH
33847: LD_INT 32
33849: PUSH
33850: LD_INT 33
33852: PUSH
33853: LD_INT 34
33855: PUSH
33856: LD_INT 35
33858: PUSH
33859: LD_INT 36
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 101
33887: PUSH
33888: LD_INT 102
33890: PUSH
33891: LD_INT 103
33893: PUSH
33894: LD_INT 106
33896: PUSH
33897: LD_INT 108
33899: PUSH
33900: LD_INT 112
33902: PUSH
33903: LD_INT 113
33905: PUSH
33906: LD_INT 114
33908: PUSH
33909: LD_INT 115
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: ST_TO_ADDR
33927: GO 34158
33929: LD_INT 19
33931: DOUBLE
33932: EQUAL
33933: IFTRUE 33937
33935: GO 34157
33937: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
33938: LD_ADDR_VAR 0 1
33942: PUSH
33943: LD_INT 1
33945: PUSH
33946: LD_INT 2
33948: PUSH
33949: LD_INT 3
33951: PUSH
33952: LD_INT 4
33954: PUSH
33955: LD_INT 5
33957: PUSH
33958: LD_INT 6
33960: PUSH
33961: LD_INT 7
33963: PUSH
33964: LD_INT 8
33966: PUSH
33967: LD_INT 9
33969: PUSH
33970: LD_INT 10
33972: PUSH
33973: LD_INT 11
33975: PUSH
33976: LD_INT 12
33978: PUSH
33979: LD_INT 13
33981: PUSH
33982: LD_INT 14
33984: PUSH
33985: LD_INT 15
33987: PUSH
33988: LD_INT 16
33990: PUSH
33991: LD_INT 17
33993: PUSH
33994: LD_INT 18
33996: PUSH
33997: LD_INT 19
33999: PUSH
34000: LD_INT 20
34002: PUSH
34003: LD_INT 21
34005: PUSH
34006: LD_INT 22
34008: PUSH
34009: LD_INT 23
34011: PUSH
34012: LD_INT 24
34014: PUSH
34015: LD_INT 25
34017: PUSH
34018: LD_INT 26
34020: PUSH
34021: LD_INT 27
34023: PUSH
34024: LD_INT 28
34026: PUSH
34027: LD_INT 29
34029: PUSH
34030: LD_INT 30
34032: PUSH
34033: LD_INT 31
34035: PUSH
34036: LD_INT 32
34038: PUSH
34039: LD_INT 33
34041: PUSH
34042: LD_INT 34
34044: PUSH
34045: LD_INT 35
34047: PUSH
34048: LD_INT 36
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 101
34091: PUSH
34092: LD_INT 102
34094: PUSH
34095: LD_INT 103
34097: PUSH
34098: LD_INT 104
34100: PUSH
34101: LD_INT 105
34103: PUSH
34104: LD_INT 106
34106: PUSH
34107: LD_INT 107
34109: PUSH
34110: LD_INT 108
34112: PUSH
34113: LD_INT 109
34115: PUSH
34116: LD_INT 110
34118: PUSH
34119: LD_INT 111
34121: PUSH
34122: LD_INT 112
34124: PUSH
34125: LD_INT 113
34127: PUSH
34128: LD_INT 114
34130: PUSH
34131: LD_INT 115
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: ST_TO_ADDR
34155: GO 34158
34157: POP
// end else
34158: GO 34377
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
34160: LD_ADDR_VAR 0 1
34164: PUSH
34165: LD_INT 1
34167: PUSH
34168: LD_INT 2
34170: PUSH
34171: LD_INT 3
34173: PUSH
34174: LD_INT 4
34176: PUSH
34177: LD_INT 5
34179: PUSH
34180: LD_INT 6
34182: PUSH
34183: LD_INT 7
34185: PUSH
34186: LD_INT 8
34188: PUSH
34189: LD_INT 9
34191: PUSH
34192: LD_INT 10
34194: PUSH
34195: LD_INT 11
34197: PUSH
34198: LD_INT 12
34200: PUSH
34201: LD_INT 13
34203: PUSH
34204: LD_INT 14
34206: PUSH
34207: LD_INT 15
34209: PUSH
34210: LD_INT 16
34212: PUSH
34213: LD_INT 17
34215: PUSH
34216: LD_INT 18
34218: PUSH
34219: LD_INT 19
34221: PUSH
34222: LD_INT 20
34224: PUSH
34225: LD_INT 21
34227: PUSH
34228: LD_INT 22
34230: PUSH
34231: LD_INT 23
34233: PUSH
34234: LD_INT 24
34236: PUSH
34237: LD_INT 25
34239: PUSH
34240: LD_INT 26
34242: PUSH
34243: LD_INT 27
34245: PUSH
34246: LD_INT 28
34248: PUSH
34249: LD_INT 29
34251: PUSH
34252: LD_INT 30
34254: PUSH
34255: LD_INT 31
34257: PUSH
34258: LD_INT 32
34260: PUSH
34261: LD_INT 33
34263: PUSH
34264: LD_INT 34
34266: PUSH
34267: LD_INT 35
34269: PUSH
34270: LD_INT 36
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 101
34313: PUSH
34314: LD_INT 102
34316: PUSH
34317: LD_INT 103
34319: PUSH
34320: LD_INT 104
34322: PUSH
34323: LD_INT 105
34325: PUSH
34326: LD_INT 106
34328: PUSH
34329: LD_INT 107
34331: PUSH
34332: LD_INT 108
34334: PUSH
34335: LD_INT 109
34337: PUSH
34338: LD_INT 110
34340: PUSH
34341: LD_INT 111
34343: PUSH
34344: LD_INT 112
34346: PUSH
34347: LD_INT 113
34349: PUSH
34350: LD_INT 114
34352: PUSH
34353: LD_INT 115
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: ST_TO_ADDR
// if result then
34377: LD_VAR 0 1
34381: IFFALSE 34670
// begin normal :=  ;
34383: LD_ADDR_VAR 0 3
34387: PUSH
34388: LD_STRING 
34390: ST_TO_ADDR
// hardcore :=  ;
34391: LD_ADDR_VAR 0 4
34395: PUSH
34396: LD_STRING 
34398: ST_TO_ADDR
// for i = 1 to normalCounter do
34399: LD_ADDR_VAR 0 5
34403: PUSH
34404: DOUBLE
34405: LD_INT 1
34407: DEC
34408: ST_TO_ADDR
34409: LD_EXP 85
34413: PUSH
34414: FOR_TO
34415: IFFALSE 34516
// begin tmp := 0 ;
34417: LD_ADDR_VAR 0 2
34421: PUSH
34422: LD_STRING 0
34424: ST_TO_ADDR
// if result [ 1 ] then
34425: LD_VAR 0 1
34429: PUSH
34430: LD_INT 1
34432: ARRAY
34433: IFFALSE 34498
// if result [ 1 ] [ 1 ] = i then
34435: LD_VAR 0 1
34439: PUSH
34440: LD_INT 1
34442: ARRAY
34443: PUSH
34444: LD_INT 1
34446: ARRAY
34447: PUSH
34448: LD_VAR 0 5
34452: EQUAL
34453: IFFALSE 34498
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
34455: LD_ADDR_VAR 0 1
34459: PUSH
34460: LD_VAR 0 1
34464: PPUSH
34465: LD_INT 1
34467: PPUSH
34468: LD_VAR 0 1
34472: PUSH
34473: LD_INT 1
34475: ARRAY
34476: PPUSH
34477: LD_INT 1
34479: PPUSH
34480: CALL_OW 3
34484: PPUSH
34485: CALL_OW 1
34489: ST_TO_ADDR
// tmp := 1 ;
34490: LD_ADDR_VAR 0 2
34494: PUSH
34495: LD_STRING 1
34497: ST_TO_ADDR
// end ; normal := normal & tmp ;
34498: LD_ADDR_VAR 0 3
34502: PUSH
34503: LD_VAR 0 3
34507: PUSH
34508: LD_VAR 0 2
34512: STR
34513: ST_TO_ADDR
// end ;
34514: GO 34414
34516: POP
34517: POP
// for i = 1 to hardcoreCounter do
34518: LD_ADDR_VAR 0 5
34522: PUSH
34523: DOUBLE
34524: LD_INT 1
34526: DEC
34527: ST_TO_ADDR
34528: LD_EXP 86
34532: PUSH
34533: FOR_TO
34534: IFFALSE 34639
// begin tmp := 0 ;
34536: LD_ADDR_VAR 0 2
34540: PUSH
34541: LD_STRING 0
34543: ST_TO_ADDR
// if result [ 2 ] then
34544: LD_VAR 0 1
34548: PUSH
34549: LD_INT 2
34551: ARRAY
34552: IFFALSE 34621
// if result [ 2 ] [ 1 ] = 100 + i then
34554: LD_VAR 0 1
34558: PUSH
34559: LD_INT 2
34561: ARRAY
34562: PUSH
34563: LD_INT 1
34565: ARRAY
34566: PUSH
34567: LD_INT 100
34569: PUSH
34570: LD_VAR 0 5
34574: PLUS
34575: EQUAL
34576: IFFALSE 34621
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
34578: LD_ADDR_VAR 0 1
34582: PUSH
34583: LD_VAR 0 1
34587: PPUSH
34588: LD_INT 2
34590: PPUSH
34591: LD_VAR 0 1
34595: PUSH
34596: LD_INT 2
34598: ARRAY
34599: PPUSH
34600: LD_INT 1
34602: PPUSH
34603: CALL_OW 3
34607: PPUSH
34608: CALL_OW 1
34612: ST_TO_ADDR
// tmp := 1 ;
34613: LD_ADDR_VAR 0 2
34617: PUSH
34618: LD_STRING 1
34620: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
34621: LD_ADDR_VAR 0 4
34625: PUSH
34626: LD_VAR 0 4
34630: PUSH
34631: LD_VAR 0 2
34635: STR
34636: ST_TO_ADDR
// end ;
34637: GO 34533
34639: POP
34640: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
34641: LD_STRING getStreamItemsFromMission("
34643: PUSH
34644: LD_VAR 0 3
34648: STR
34649: PUSH
34650: LD_STRING ","
34652: STR
34653: PUSH
34654: LD_VAR 0 4
34658: STR
34659: PUSH
34660: LD_STRING ")
34662: STR
34663: PPUSH
34664: CALL_OW 559
// end else
34668: GO 34677
// ToLua ( getStreamItemsFromMission("","") ) ;
34670: LD_STRING getStreamItemsFromMission("","")
34672: PPUSH
34673: CALL_OW 559
// end ;
34677: LD_VAR 0 1
34681: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
34682: LD_EXP 84
34686: PUSH
34687: LD_EXP 89
34691: AND
34692: IFFALSE 34816
34694: GO 34696
34696: DISABLE
34697: LD_INT 0
34699: PPUSH
34700: PPUSH
// begin enable ;
34701: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
34702: LD_ADDR_VAR 0 2
34706: PUSH
34707: LD_INT 22
34709: PUSH
34710: LD_OWVAR 2
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 2
34721: PUSH
34722: LD_INT 34
34724: PUSH
34725: LD_INT 7
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 34
34734: PUSH
34735: LD_INT 45
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 34
34744: PUSH
34745: LD_INT 28
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 34
34754: PUSH
34755: LD_INT 47
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PPUSH
34773: CALL_OW 69
34777: ST_TO_ADDR
// if not tmp then
34778: LD_VAR 0 2
34782: NOT
34783: IFFALSE 34787
// exit ;
34785: GO 34816
// for i in tmp do
34787: LD_ADDR_VAR 0 1
34791: PUSH
34792: LD_VAR 0 2
34796: PUSH
34797: FOR_IN
34798: IFFALSE 34814
// begin SetLives ( i , 0 ) ;
34800: LD_VAR 0 1
34804: PPUSH
34805: LD_INT 0
34807: PPUSH
34808: CALL_OW 234
// end ;
34812: GO 34797
34814: POP
34815: POP
// end ;
34816: PPOPN 2
34818: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
34819: LD_EXP 84
34823: PUSH
34824: LD_EXP 90
34828: AND
34829: IFFALSE 34913
34831: GO 34833
34833: DISABLE
34834: LD_INT 0
34836: PPUSH
34837: PPUSH
// begin enable ;
34838: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
34839: LD_ADDR_VAR 0 2
34843: PUSH
34844: LD_INT 22
34846: PUSH
34847: LD_OWVAR 2
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 32
34858: PUSH
34859: LD_INT 3
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PPUSH
34870: CALL_OW 69
34874: ST_TO_ADDR
// if not tmp then
34875: LD_VAR 0 2
34879: NOT
34880: IFFALSE 34884
// exit ;
34882: GO 34913
// for i in tmp do
34884: LD_ADDR_VAR 0 1
34888: PUSH
34889: LD_VAR 0 2
34893: PUSH
34894: FOR_IN
34895: IFFALSE 34911
// begin SetLives ( i , 0 ) ;
34897: LD_VAR 0 1
34901: PPUSH
34902: LD_INT 0
34904: PPUSH
34905: CALL_OW 234
// end ;
34909: GO 34894
34911: POP
34912: POP
// end ;
34913: PPOPN 2
34915: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
34916: LD_EXP 84
34920: PUSH
34921: LD_EXP 87
34925: AND
34926: IFFALSE 35019
34928: GO 34930
34930: DISABLE
34931: LD_INT 0
34933: PPUSH
// begin enable ;
34934: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
34935: LD_ADDR_VAR 0 1
34939: PUSH
34940: LD_INT 22
34942: PUSH
34943: LD_OWVAR 2
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 2
34954: PUSH
34955: LD_INT 25
34957: PUSH
34958: LD_INT 5
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 25
34967: PUSH
34968: LD_INT 9
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 25
34977: PUSH
34978: LD_INT 8
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PPUSH
34995: CALL_OW 69
34999: PUSH
35000: FOR_IN
35001: IFFALSE 35017
// begin SetClass ( i , 1 ) ;
35003: LD_VAR 0 1
35007: PPUSH
35008: LD_INT 1
35010: PPUSH
35011: CALL_OW 336
// end ;
35015: GO 35000
35017: POP
35018: POP
// end ;
35019: PPOPN 1
35021: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
35022: LD_EXP 84
35026: PUSH
35027: LD_EXP 88
35031: AND
35032: PUSH
35033: LD_OWVAR 65
35037: PUSH
35038: LD_INT 7
35040: LESS
35041: AND
35042: IFFALSE 35056
35044: GO 35046
35046: DISABLE
// begin enable ;
35047: ENABLE
// game_speed := 7 ;
35048: LD_ADDR_OWVAR 65
35052: PUSH
35053: LD_INT 7
35055: ST_TO_ADDR
// end ;
35056: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
35057: LD_EXP 84
35061: PUSH
35062: LD_EXP 91
35066: AND
35067: IFFALSE 35269
35069: GO 35071
35071: DISABLE
35072: LD_INT 0
35074: PPUSH
35075: PPUSH
35076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
35077: LD_ADDR_VAR 0 3
35081: PUSH
35082: LD_INT 81
35084: PUSH
35085: LD_OWVAR 2
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 21
35096: PUSH
35097: LD_INT 1
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PPUSH
35108: CALL_OW 69
35112: ST_TO_ADDR
// if not tmp then
35113: LD_VAR 0 3
35117: NOT
35118: IFFALSE 35122
// exit ;
35120: GO 35269
// if tmp > 5 then
35122: LD_VAR 0 3
35126: PUSH
35127: LD_INT 5
35129: GREATER
35130: IFFALSE 35142
// k := 5 else
35132: LD_ADDR_VAR 0 2
35136: PUSH
35137: LD_INT 5
35139: ST_TO_ADDR
35140: GO 35152
// k := tmp ;
35142: LD_ADDR_VAR 0 2
35146: PUSH
35147: LD_VAR 0 3
35151: ST_TO_ADDR
// for i := 1 to k do
35152: LD_ADDR_VAR 0 1
35156: PUSH
35157: DOUBLE
35158: LD_INT 1
35160: DEC
35161: ST_TO_ADDR
35162: LD_VAR 0 2
35166: PUSH
35167: FOR_TO
35168: IFFALSE 35267
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
35170: LD_VAR 0 3
35174: PUSH
35175: LD_VAR 0 1
35179: ARRAY
35180: PPUSH
35181: LD_VAR 0 1
35185: PUSH
35186: LD_INT 4
35188: MOD
35189: PUSH
35190: LD_INT 1
35192: PLUS
35193: PPUSH
35194: CALL_OW 259
35198: PUSH
35199: LD_INT 10
35201: LESS
35202: IFFALSE 35265
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
35204: LD_VAR 0 3
35208: PUSH
35209: LD_VAR 0 1
35213: ARRAY
35214: PPUSH
35215: LD_VAR 0 1
35219: PUSH
35220: LD_INT 4
35222: MOD
35223: PUSH
35224: LD_INT 1
35226: PLUS
35227: PPUSH
35228: LD_VAR 0 3
35232: PUSH
35233: LD_VAR 0 1
35237: ARRAY
35238: PPUSH
35239: LD_VAR 0 1
35243: PUSH
35244: LD_INT 4
35246: MOD
35247: PUSH
35248: LD_INT 1
35250: PLUS
35251: PPUSH
35252: CALL_OW 259
35256: PUSH
35257: LD_INT 1
35259: PLUS
35260: PPUSH
35261: CALL_OW 237
35265: GO 35167
35267: POP
35268: POP
// end ;
35269: PPOPN 3
35271: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
35272: LD_EXP 84
35276: PUSH
35277: LD_EXP 92
35281: AND
35282: IFFALSE 35302
35284: GO 35286
35286: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
35287: LD_INT 4
35289: PPUSH
35290: LD_OWVAR 2
35294: PPUSH
35295: LD_INT 0
35297: PPUSH
35298: CALL_OW 324
35302: END
// every 0 0$1 trigger StreamModeActive and sShovel do
35303: LD_EXP 84
35307: PUSH
35308: LD_EXP 121
35312: AND
35313: IFFALSE 35333
35315: GO 35317
35317: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
35318: LD_INT 19
35320: PPUSH
35321: LD_OWVAR 2
35325: PPUSH
35326: LD_INT 0
35328: PPUSH
35329: CALL_OW 324
35333: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
35334: LD_EXP 84
35338: PUSH
35339: LD_EXP 93
35343: AND
35344: IFFALSE 35446
35346: GO 35348
35348: DISABLE
35349: LD_INT 0
35351: PPUSH
35352: PPUSH
// begin enable ;
35353: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
35354: LD_ADDR_VAR 0 2
35358: PUSH
35359: LD_INT 22
35361: PUSH
35362: LD_OWVAR 2
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 2
35373: PUSH
35374: LD_INT 34
35376: PUSH
35377: LD_INT 11
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 34
35386: PUSH
35387: LD_INT 30
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: LIST
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PPUSH
35403: CALL_OW 69
35407: ST_TO_ADDR
// if not tmp then
35408: LD_VAR 0 2
35412: NOT
35413: IFFALSE 35417
// exit ;
35415: GO 35446
// for i in tmp do
35417: LD_ADDR_VAR 0 1
35421: PUSH
35422: LD_VAR 0 2
35426: PUSH
35427: FOR_IN
35428: IFFALSE 35444
// begin SetLives ( i , 0 ) ;
35430: LD_VAR 0 1
35434: PPUSH
35435: LD_INT 0
35437: PPUSH
35438: CALL_OW 234
// end ;
35442: GO 35427
35444: POP
35445: POP
// end ;
35446: PPOPN 2
35448: END
// every 0 0$1 trigger StreamModeActive and sBunker do
35449: LD_EXP 84
35453: PUSH
35454: LD_EXP 94
35458: AND
35459: IFFALSE 35479
35461: GO 35463
35463: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
35464: LD_INT 32
35466: PPUSH
35467: LD_OWVAR 2
35471: PPUSH
35472: LD_INT 0
35474: PPUSH
35475: CALL_OW 324
35479: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
35480: LD_EXP 84
35484: PUSH
35485: LD_EXP 95
35489: AND
35490: IFFALSE 35671
35492: GO 35494
35494: DISABLE
35495: LD_INT 0
35497: PPUSH
35498: PPUSH
35499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
35500: LD_ADDR_VAR 0 2
35504: PUSH
35505: LD_INT 22
35507: PUSH
35508: LD_OWVAR 2
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 33
35519: PUSH
35520: LD_INT 3
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PPUSH
35531: CALL_OW 69
35535: ST_TO_ADDR
// if not tmp then
35536: LD_VAR 0 2
35540: NOT
35541: IFFALSE 35545
// exit ;
35543: GO 35671
// side := 0 ;
35545: LD_ADDR_VAR 0 3
35549: PUSH
35550: LD_INT 0
35552: ST_TO_ADDR
// for i := 1 to 8 do
35553: LD_ADDR_VAR 0 1
35557: PUSH
35558: DOUBLE
35559: LD_INT 1
35561: DEC
35562: ST_TO_ADDR
35563: LD_INT 8
35565: PUSH
35566: FOR_TO
35567: IFFALSE 35615
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
35569: LD_OWVAR 2
35573: PUSH
35574: LD_VAR 0 1
35578: NONEQUAL
35579: PUSH
35580: LD_OWVAR 2
35584: PPUSH
35585: LD_VAR 0 1
35589: PPUSH
35590: CALL_OW 81
35594: PUSH
35595: LD_INT 2
35597: EQUAL
35598: AND
35599: IFFALSE 35613
// begin side := i ;
35601: LD_ADDR_VAR 0 3
35605: PUSH
35606: LD_VAR 0 1
35610: ST_TO_ADDR
// break ;
35611: GO 35615
// end ;
35613: GO 35566
35615: POP
35616: POP
// if not side then
35617: LD_VAR 0 3
35621: NOT
35622: IFFALSE 35626
// exit ;
35624: GO 35671
// for i := 1 to tmp do
35626: LD_ADDR_VAR 0 1
35630: PUSH
35631: DOUBLE
35632: LD_INT 1
35634: DEC
35635: ST_TO_ADDR
35636: LD_VAR 0 2
35640: PUSH
35641: FOR_TO
35642: IFFALSE 35669
// if Prob ( 60 ) then
35644: LD_INT 60
35646: PPUSH
35647: CALL_OW 13
35651: IFFALSE 35667
// SetSide ( i , side ) ;
35653: LD_VAR 0 1
35657: PPUSH
35658: LD_VAR 0 3
35662: PPUSH
35663: CALL_OW 235
35667: GO 35641
35669: POP
35670: POP
// end ;
35671: PPOPN 3
35673: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
35674: LD_EXP 84
35678: PUSH
35679: LD_EXP 97
35683: AND
35684: IFFALSE 35803
35686: GO 35688
35688: DISABLE
35689: LD_INT 0
35691: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
35692: LD_ADDR_VAR 0 1
35696: PUSH
35697: LD_INT 22
35699: PUSH
35700: LD_OWVAR 2
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 21
35711: PUSH
35712: LD_INT 1
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 3
35721: PUSH
35722: LD_INT 23
35724: PUSH
35725: LD_INT 0
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: LIST
35740: PPUSH
35741: CALL_OW 69
35745: PUSH
35746: FOR_IN
35747: IFFALSE 35801
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
35749: LD_VAR 0 1
35753: PPUSH
35754: CALL_OW 257
35758: PUSH
35759: LD_INT 1
35761: PUSH
35762: LD_INT 2
35764: PUSH
35765: LD_INT 3
35767: PUSH
35768: LD_INT 4
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: IN
35777: IFFALSE 35799
// SetClass ( un , rand ( 1 , 4 ) ) ;
35779: LD_VAR 0 1
35783: PPUSH
35784: LD_INT 1
35786: PPUSH
35787: LD_INT 4
35789: PPUSH
35790: CALL_OW 12
35794: PPUSH
35795: CALL_OW 336
35799: GO 35746
35801: POP
35802: POP
// end ;
35803: PPOPN 1
35805: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
35806: LD_EXP 84
35810: PUSH
35811: LD_EXP 96
35815: AND
35816: IFFALSE 35895
35818: GO 35820
35820: DISABLE
35821: LD_INT 0
35823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
35824: LD_ADDR_VAR 0 1
35828: PUSH
35829: LD_INT 22
35831: PUSH
35832: LD_OWVAR 2
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 21
35843: PUSH
35844: LD_INT 3
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PPUSH
35855: CALL_OW 69
35859: ST_TO_ADDR
// if not tmp then
35860: LD_VAR 0 1
35864: NOT
35865: IFFALSE 35869
// exit ;
35867: GO 35895
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
35869: LD_VAR 0 1
35873: PUSH
35874: LD_INT 1
35876: PPUSH
35877: LD_VAR 0 1
35881: PPUSH
35882: CALL_OW 12
35886: ARRAY
35887: PPUSH
35888: LD_INT 100
35890: PPUSH
35891: CALL_OW 234
// end ;
35895: PPOPN 1
35897: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
35898: LD_EXP 84
35902: PUSH
35903: LD_EXP 98
35907: AND
35908: IFFALSE 36006
35910: GO 35912
35912: DISABLE
35913: LD_INT 0
35915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35916: LD_ADDR_VAR 0 1
35920: PUSH
35921: LD_INT 22
35923: PUSH
35924: LD_OWVAR 2
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 21
35935: PUSH
35936: LD_INT 1
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PPUSH
35947: CALL_OW 69
35951: ST_TO_ADDR
// if not tmp then
35952: LD_VAR 0 1
35956: NOT
35957: IFFALSE 35961
// exit ;
35959: GO 36006
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
35961: LD_VAR 0 1
35965: PUSH
35966: LD_INT 1
35968: PPUSH
35969: LD_VAR 0 1
35973: PPUSH
35974: CALL_OW 12
35978: ARRAY
35979: PPUSH
35980: LD_INT 1
35982: PPUSH
35983: LD_INT 4
35985: PPUSH
35986: CALL_OW 12
35990: PPUSH
35991: LD_INT 3000
35993: PPUSH
35994: LD_INT 9000
35996: PPUSH
35997: CALL_OW 12
36001: PPUSH
36002: CALL_OW 492
// end ;
36006: PPOPN 1
36008: END
// every 0 0$1 trigger StreamModeActive and sDepot do
36009: LD_EXP 84
36013: PUSH
36014: LD_EXP 99
36018: AND
36019: IFFALSE 36039
36021: GO 36023
36023: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
36024: LD_INT 1
36026: PPUSH
36027: LD_OWVAR 2
36031: PPUSH
36032: LD_INT 0
36034: PPUSH
36035: CALL_OW 324
36039: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
36040: LD_EXP 84
36044: PUSH
36045: LD_EXP 100
36049: AND
36050: IFFALSE 36133
36052: GO 36054
36054: DISABLE
36055: LD_INT 0
36057: PPUSH
36058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
36059: LD_ADDR_VAR 0 2
36063: PUSH
36064: LD_INT 22
36066: PUSH
36067: LD_OWVAR 2
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 21
36078: PUSH
36079: LD_INT 3
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PPUSH
36090: CALL_OW 69
36094: ST_TO_ADDR
// if not tmp then
36095: LD_VAR 0 2
36099: NOT
36100: IFFALSE 36104
// exit ;
36102: GO 36133
// for i in tmp do
36104: LD_ADDR_VAR 0 1
36108: PUSH
36109: LD_VAR 0 2
36113: PUSH
36114: FOR_IN
36115: IFFALSE 36131
// SetBLevel ( i , 10 ) ;
36117: LD_VAR 0 1
36121: PPUSH
36122: LD_INT 10
36124: PPUSH
36125: CALL_OW 241
36129: GO 36114
36131: POP
36132: POP
// end ;
36133: PPOPN 2
36135: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
36136: LD_EXP 84
36140: PUSH
36141: LD_EXP 101
36145: AND
36146: IFFALSE 36257
36148: GO 36150
36150: DISABLE
36151: LD_INT 0
36153: PPUSH
36154: PPUSH
36155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36156: LD_ADDR_VAR 0 3
36160: PUSH
36161: LD_INT 22
36163: PUSH
36164: LD_OWVAR 2
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 25
36175: PUSH
36176: LD_INT 1
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PPUSH
36187: CALL_OW 69
36191: ST_TO_ADDR
// if not tmp then
36192: LD_VAR 0 3
36196: NOT
36197: IFFALSE 36201
// exit ;
36199: GO 36257
// un := tmp [ rand ( 1 , tmp ) ] ;
36201: LD_ADDR_VAR 0 2
36205: PUSH
36206: LD_VAR 0 3
36210: PUSH
36211: LD_INT 1
36213: PPUSH
36214: LD_VAR 0 3
36218: PPUSH
36219: CALL_OW 12
36223: ARRAY
36224: ST_TO_ADDR
// if Crawls ( un ) then
36225: LD_VAR 0 2
36229: PPUSH
36230: CALL_OW 318
36234: IFFALSE 36245
// ComWalk ( un ) ;
36236: LD_VAR 0 2
36240: PPUSH
36241: CALL_OW 138
// SetClass ( un , class_sniper ) ;
36245: LD_VAR 0 2
36249: PPUSH
36250: LD_INT 5
36252: PPUSH
36253: CALL_OW 336
// end ;
36257: PPOPN 3
36259: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
36260: LD_EXP 84
36264: PUSH
36265: LD_EXP 102
36269: AND
36270: PUSH
36271: LD_OWVAR 67
36275: PUSH
36276: LD_INT 3
36278: LESS
36279: AND
36280: IFFALSE 36299
36282: GO 36284
36284: DISABLE
// Difficulty := Difficulty + 1 ;
36285: LD_ADDR_OWVAR 67
36289: PUSH
36290: LD_OWVAR 67
36294: PUSH
36295: LD_INT 1
36297: PLUS
36298: ST_TO_ADDR
36299: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
36300: LD_EXP 84
36304: PUSH
36305: LD_EXP 103
36309: AND
36310: IFFALSE 36413
36312: GO 36314
36314: DISABLE
36315: LD_INT 0
36317: PPUSH
// begin for i := 1 to 5 do
36318: LD_ADDR_VAR 0 1
36322: PUSH
36323: DOUBLE
36324: LD_INT 1
36326: DEC
36327: ST_TO_ADDR
36328: LD_INT 5
36330: PUSH
36331: FOR_TO
36332: IFFALSE 36411
// begin uc_nation := nation_nature ;
36334: LD_ADDR_OWVAR 21
36338: PUSH
36339: LD_INT 0
36341: ST_TO_ADDR
// uc_side := 0 ;
36342: LD_ADDR_OWVAR 20
36346: PUSH
36347: LD_INT 0
36349: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36350: LD_ADDR_OWVAR 29
36354: PUSH
36355: LD_INT 12
36357: PUSH
36358: LD_INT 12
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: ST_TO_ADDR
// hc_agressivity := 20 ;
36365: LD_ADDR_OWVAR 35
36369: PUSH
36370: LD_INT 20
36372: ST_TO_ADDR
// hc_class := class_tiger ;
36373: LD_ADDR_OWVAR 28
36377: PUSH
36378: LD_INT 14
36380: ST_TO_ADDR
// hc_gallery :=  ;
36381: LD_ADDR_OWVAR 33
36385: PUSH
36386: LD_STRING 
36388: ST_TO_ADDR
// hc_name :=  ;
36389: LD_ADDR_OWVAR 26
36393: PUSH
36394: LD_STRING 
36396: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
36397: CALL_OW 44
36401: PPUSH
36402: LD_INT 0
36404: PPUSH
36405: CALL_OW 51
// end ;
36409: GO 36331
36411: POP
36412: POP
// end ;
36413: PPOPN 1
36415: END
// every 0 0$1 trigger StreamModeActive and sBomb do
36416: LD_EXP 84
36420: PUSH
36421: LD_EXP 104
36425: AND
36426: IFFALSE 36435
36428: GO 36430
36430: DISABLE
// StreamSibBomb ;
36431: CALL 36436 0 0
36435: END
// export function StreamSibBomb ; var i , x , y ; begin
36436: LD_INT 0
36438: PPUSH
36439: PPUSH
36440: PPUSH
36441: PPUSH
// result := false ;
36442: LD_ADDR_VAR 0 1
36446: PUSH
36447: LD_INT 0
36449: ST_TO_ADDR
// for i := 1 to 16 do
36450: LD_ADDR_VAR 0 2
36454: PUSH
36455: DOUBLE
36456: LD_INT 1
36458: DEC
36459: ST_TO_ADDR
36460: LD_INT 16
36462: PUSH
36463: FOR_TO
36464: IFFALSE 36663
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
36466: LD_ADDR_VAR 0 3
36470: PUSH
36471: LD_INT 10
36473: PUSH
36474: LD_INT 20
36476: PUSH
36477: LD_INT 30
36479: PUSH
36480: LD_INT 40
36482: PUSH
36483: LD_INT 50
36485: PUSH
36486: LD_INT 60
36488: PUSH
36489: LD_INT 70
36491: PUSH
36492: LD_INT 80
36494: PUSH
36495: LD_INT 90
36497: PUSH
36498: LD_INT 100
36500: PUSH
36501: LD_INT 110
36503: PUSH
36504: LD_INT 120
36506: PUSH
36507: LD_INT 130
36509: PUSH
36510: LD_INT 140
36512: PUSH
36513: LD_INT 150
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 1
36535: PPUSH
36536: LD_INT 15
36538: PPUSH
36539: CALL_OW 12
36543: ARRAY
36544: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
36545: LD_ADDR_VAR 0 4
36549: PUSH
36550: LD_INT 10
36552: PUSH
36553: LD_INT 20
36555: PUSH
36556: LD_INT 30
36558: PUSH
36559: LD_INT 40
36561: PUSH
36562: LD_INT 50
36564: PUSH
36565: LD_INT 60
36567: PUSH
36568: LD_INT 70
36570: PUSH
36571: LD_INT 80
36573: PUSH
36574: LD_INT 90
36576: PUSH
36577: LD_INT 100
36579: PUSH
36580: LD_INT 110
36582: PUSH
36583: LD_INT 120
36585: PUSH
36586: LD_INT 130
36588: PUSH
36589: LD_INT 140
36591: PUSH
36592: LD_INT 150
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 1
36614: PPUSH
36615: LD_INT 15
36617: PPUSH
36618: CALL_OW 12
36622: ARRAY
36623: ST_TO_ADDR
// if ValidHex ( x , y ) then
36624: LD_VAR 0 3
36628: PPUSH
36629: LD_VAR 0 4
36633: PPUSH
36634: CALL_OW 488
36638: IFFALSE 36661
// begin result := [ x , y ] ;
36640: LD_ADDR_VAR 0 1
36644: PUSH
36645: LD_VAR 0 3
36649: PUSH
36650: LD_VAR 0 4
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: ST_TO_ADDR
// break ;
36659: GO 36663
// end ; end ;
36661: GO 36463
36663: POP
36664: POP
// if result then
36665: LD_VAR 0 1
36669: IFFALSE 36729
// begin ToLua ( playSibBomb() ) ;
36671: LD_STRING playSibBomb()
36673: PPUSH
36674: CALL_OW 559
// wait ( 0 0$14 ) ;
36678: LD_INT 490
36680: PPUSH
36681: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
36685: LD_VAR 0 1
36689: PUSH
36690: LD_INT 1
36692: ARRAY
36693: PPUSH
36694: LD_VAR 0 1
36698: PUSH
36699: LD_INT 2
36701: ARRAY
36702: PPUSH
36703: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
36707: LD_VAR 0 1
36711: PUSH
36712: LD_INT 1
36714: ARRAY
36715: PPUSH
36716: LD_VAR 0 1
36720: PUSH
36721: LD_INT 2
36723: ARRAY
36724: PPUSH
36725: CALL_OW 429
// end ; end ;
36729: LD_VAR 0 1
36733: RET
// every 0 0$1 trigger StreamModeActive and sReset do
36734: LD_EXP 84
36738: PUSH
36739: LD_EXP 106
36743: AND
36744: IFFALSE 36756
36746: GO 36748
36748: DISABLE
// YouLost (  ) ;
36749: LD_STRING 
36751: PPUSH
36752: CALL_OW 104
36756: END
// every 0 0$1 trigger StreamModeActive and sFog do
36757: LD_EXP 84
36761: PUSH
36762: LD_EXP 105
36766: AND
36767: IFFALSE 36781
36769: GO 36771
36771: DISABLE
// FogOff ( your_side ) ;
36772: LD_OWVAR 2
36776: PPUSH
36777: CALL_OW 344
36781: END
// every 0 0$1 trigger StreamModeActive and sSun do
36782: LD_EXP 84
36786: PUSH
36787: LD_EXP 107
36791: AND
36792: IFFALSE 36820
36794: GO 36796
36796: DISABLE
// begin solar_recharge_percent := 0 ;
36797: LD_ADDR_OWVAR 79
36801: PUSH
36802: LD_INT 0
36804: ST_TO_ADDR
// wait ( 5 5$00 ) ;
36805: LD_INT 10500
36807: PPUSH
36808: CALL_OW 67
// solar_recharge_percent := 100 ;
36812: LD_ADDR_OWVAR 79
36816: PUSH
36817: LD_INT 100
36819: ST_TO_ADDR
// end ;
36820: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
36821: LD_EXP 84
36825: PUSH
36826: LD_EXP 108
36830: AND
36831: IFFALSE 37070
36833: GO 36835
36835: DISABLE
36836: LD_INT 0
36838: PPUSH
36839: PPUSH
36840: PPUSH
// begin tmp := [ ] ;
36841: LD_ADDR_VAR 0 3
36845: PUSH
36846: EMPTY
36847: ST_TO_ADDR
// for i := 1 to 6 do
36848: LD_ADDR_VAR 0 1
36852: PUSH
36853: DOUBLE
36854: LD_INT 1
36856: DEC
36857: ST_TO_ADDR
36858: LD_INT 6
36860: PUSH
36861: FOR_TO
36862: IFFALSE 36967
// begin uc_nation := nation_nature ;
36864: LD_ADDR_OWVAR 21
36868: PUSH
36869: LD_INT 0
36871: ST_TO_ADDR
// uc_side := 0 ;
36872: LD_ADDR_OWVAR 20
36876: PUSH
36877: LD_INT 0
36879: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36880: LD_ADDR_OWVAR 29
36884: PUSH
36885: LD_INT 12
36887: PUSH
36888: LD_INT 12
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: ST_TO_ADDR
// hc_agressivity := 20 ;
36895: LD_ADDR_OWVAR 35
36899: PUSH
36900: LD_INT 20
36902: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
36903: LD_ADDR_OWVAR 28
36907: PUSH
36908: LD_INT 17
36910: ST_TO_ADDR
// hc_gallery :=  ;
36911: LD_ADDR_OWVAR 33
36915: PUSH
36916: LD_STRING 
36918: ST_TO_ADDR
// hc_name :=  ;
36919: LD_ADDR_OWVAR 26
36923: PUSH
36924: LD_STRING 
36926: ST_TO_ADDR
// un := CreateHuman ;
36927: LD_ADDR_VAR 0 2
36931: PUSH
36932: CALL_OW 44
36936: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
36937: LD_VAR 0 2
36941: PPUSH
36942: LD_INT 1
36944: PPUSH
36945: CALL_OW 51
// tmp := tmp ^ un ;
36949: LD_ADDR_VAR 0 3
36953: PUSH
36954: LD_VAR 0 3
36958: PUSH
36959: LD_VAR 0 2
36963: ADD
36964: ST_TO_ADDR
// end ;
36965: GO 36861
36967: POP
36968: POP
// repeat wait ( 0 0$1 ) ;
36969: LD_INT 35
36971: PPUSH
36972: CALL_OW 67
// for un in tmp do
36976: LD_ADDR_VAR 0 2
36980: PUSH
36981: LD_VAR 0 3
36985: PUSH
36986: FOR_IN
36987: IFFALSE 37061
// begin if IsDead ( un ) then
36989: LD_VAR 0 2
36993: PPUSH
36994: CALL_OW 301
36998: IFFALSE 37018
// begin tmp := tmp diff un ;
37000: LD_ADDR_VAR 0 3
37004: PUSH
37005: LD_VAR 0 3
37009: PUSH
37010: LD_VAR 0 2
37014: DIFF
37015: ST_TO_ADDR
// continue ;
37016: GO 36986
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
37018: LD_VAR 0 2
37022: PPUSH
37023: LD_INT 3
37025: PUSH
37026: LD_INT 22
37028: PUSH
37029: LD_INT 0
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PPUSH
37040: CALL_OW 69
37044: PPUSH
37045: LD_VAR 0 2
37049: PPUSH
37050: CALL_OW 74
37054: PPUSH
37055: CALL_OW 115
// end ;
37059: GO 36986
37061: POP
37062: POP
// until not tmp ;
37063: LD_VAR 0 3
37067: NOT
37068: IFFALSE 36969
// end ;
37070: PPOPN 3
37072: END
// every 0 0$1 trigger StreamModeActive and sTroll do
37073: LD_EXP 84
37077: PUSH
37078: LD_EXP 109
37082: AND
37083: IFFALSE 37137
37085: GO 37087
37087: DISABLE
// begin ToLua ( displayTroll(); ) ;
37088: LD_STRING displayTroll();
37090: PPUSH
37091: CALL_OW 559
// wait ( 3 3$00 ) ;
37095: LD_INT 6300
37097: PPUSH
37098: CALL_OW 67
// ToLua ( hideTroll(); ) ;
37102: LD_STRING hideTroll();
37104: PPUSH
37105: CALL_OW 559
// wait ( 1 1$00 ) ;
37109: LD_INT 2100
37111: PPUSH
37112: CALL_OW 67
// ToLua ( displayTroll(); ) ;
37116: LD_STRING displayTroll();
37118: PPUSH
37119: CALL_OW 559
// wait ( 1 1$00 ) ;
37123: LD_INT 2100
37125: PPUSH
37126: CALL_OW 67
// ToLua ( hideTroll(); ) ;
37130: LD_STRING hideTroll();
37132: PPUSH
37133: CALL_OW 559
// end ;
37137: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
37138: LD_EXP 84
37142: PUSH
37143: LD_EXP 110
37147: AND
37148: IFFALSE 37211
37150: GO 37152
37152: DISABLE
37153: LD_INT 0
37155: PPUSH
// begin p := 0 ;
37156: LD_ADDR_VAR 0 1
37160: PUSH
37161: LD_INT 0
37163: ST_TO_ADDR
// repeat game_speed := 1 ;
37164: LD_ADDR_OWVAR 65
37168: PUSH
37169: LD_INT 1
37171: ST_TO_ADDR
// wait ( 0 0$1 ) ;
37172: LD_INT 35
37174: PPUSH
37175: CALL_OW 67
// p := p + 1 ;
37179: LD_ADDR_VAR 0 1
37183: PUSH
37184: LD_VAR 0 1
37188: PUSH
37189: LD_INT 1
37191: PLUS
37192: ST_TO_ADDR
// until p >= 60 ;
37193: LD_VAR 0 1
37197: PUSH
37198: LD_INT 60
37200: GREATEREQUAL
37201: IFFALSE 37164
// game_speed := 4 ;
37203: LD_ADDR_OWVAR 65
37207: PUSH
37208: LD_INT 4
37210: ST_TO_ADDR
// end ;
37211: PPOPN 1
37213: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
37214: LD_EXP 84
37218: PUSH
37219: LD_EXP 111
37223: AND
37224: IFFALSE 37370
37226: GO 37228
37228: DISABLE
37229: LD_INT 0
37231: PPUSH
37232: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37233: LD_ADDR_VAR 0 1
37237: PUSH
37238: LD_INT 22
37240: PUSH
37241: LD_OWVAR 2
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 2
37252: PUSH
37253: LD_INT 30
37255: PUSH
37256: LD_INT 0
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 30
37265: PUSH
37266: LD_INT 1
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: LIST
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PPUSH
37282: CALL_OW 69
37286: ST_TO_ADDR
// if not depot then
37287: LD_VAR 0 1
37291: NOT
37292: IFFALSE 37296
// exit ;
37294: GO 37370
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
37296: LD_ADDR_VAR 0 2
37300: PUSH
37301: LD_VAR 0 1
37305: PUSH
37306: LD_INT 1
37308: PPUSH
37309: LD_VAR 0 1
37313: PPUSH
37314: CALL_OW 12
37318: ARRAY
37319: PPUSH
37320: CALL_OW 274
37324: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
37325: LD_VAR 0 2
37329: PPUSH
37330: LD_INT 1
37332: PPUSH
37333: LD_INT 0
37335: PPUSH
37336: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
37340: LD_VAR 0 2
37344: PPUSH
37345: LD_INT 2
37347: PPUSH
37348: LD_INT 0
37350: PPUSH
37351: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
37355: LD_VAR 0 2
37359: PPUSH
37360: LD_INT 3
37362: PPUSH
37363: LD_INT 0
37365: PPUSH
37366: CALL_OW 277
// end ;
37370: PPOPN 2
37372: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
37373: LD_EXP 84
37377: PUSH
37378: LD_EXP 112
37382: AND
37383: IFFALSE 37480
37385: GO 37387
37387: DISABLE
37388: LD_INT 0
37390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37391: LD_ADDR_VAR 0 1
37395: PUSH
37396: LD_INT 22
37398: PUSH
37399: LD_OWVAR 2
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 21
37410: PUSH
37411: LD_INT 1
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 3
37420: PUSH
37421: LD_INT 23
37423: PUSH
37424: LD_INT 0
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: LIST
37439: PPUSH
37440: CALL_OW 69
37444: ST_TO_ADDR
// if not tmp then
37445: LD_VAR 0 1
37449: NOT
37450: IFFALSE 37454
// exit ;
37452: GO 37480
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
37454: LD_VAR 0 1
37458: PUSH
37459: LD_INT 1
37461: PPUSH
37462: LD_VAR 0 1
37466: PPUSH
37467: CALL_OW 12
37471: ARRAY
37472: PPUSH
37473: LD_INT 200
37475: PPUSH
37476: CALL_OW 234
// end ;
37480: PPOPN 1
37482: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
37483: LD_EXP 84
37487: PUSH
37488: LD_EXP 113
37492: AND
37493: IFFALSE 37572
37495: GO 37497
37497: DISABLE
37498: LD_INT 0
37500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
37501: LD_ADDR_VAR 0 1
37505: PUSH
37506: LD_INT 22
37508: PUSH
37509: LD_OWVAR 2
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 21
37520: PUSH
37521: LD_INT 2
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PPUSH
37532: CALL_OW 69
37536: ST_TO_ADDR
// if not tmp then
37537: LD_VAR 0 1
37541: NOT
37542: IFFALSE 37546
// exit ;
37544: GO 37572
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
37546: LD_VAR 0 1
37550: PUSH
37551: LD_INT 1
37553: PPUSH
37554: LD_VAR 0 1
37558: PPUSH
37559: CALL_OW 12
37563: ARRAY
37564: PPUSH
37565: LD_INT 60
37567: PPUSH
37568: CALL_OW 234
// end ;
37572: PPOPN 1
37574: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
37575: LD_EXP 84
37579: PUSH
37580: LD_EXP 114
37584: AND
37585: IFFALSE 37684
37587: GO 37589
37589: DISABLE
37590: LD_INT 0
37592: PPUSH
37593: PPUSH
// begin enable ;
37594: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
37595: LD_ADDR_VAR 0 1
37599: PUSH
37600: LD_INT 22
37602: PUSH
37603: LD_OWVAR 2
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 61
37614: PUSH
37615: EMPTY
37616: LIST
37617: PUSH
37618: LD_INT 33
37620: PUSH
37621: LD_INT 2
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: LIST
37632: PPUSH
37633: CALL_OW 69
37637: ST_TO_ADDR
// if not tmp then
37638: LD_VAR 0 1
37642: NOT
37643: IFFALSE 37647
// exit ;
37645: GO 37684
// for i in tmp do
37647: LD_ADDR_VAR 0 2
37651: PUSH
37652: LD_VAR 0 1
37656: PUSH
37657: FOR_IN
37658: IFFALSE 37682
// if IsControledBy ( i ) then
37660: LD_VAR 0 2
37664: PPUSH
37665: CALL_OW 312
37669: IFFALSE 37680
// ComUnlink ( i ) ;
37671: LD_VAR 0 2
37675: PPUSH
37676: CALL_OW 136
37680: GO 37657
37682: POP
37683: POP
// end ;
37684: PPOPN 2
37686: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
37687: LD_EXP 84
37691: PUSH
37692: LD_EXP 115
37696: AND
37697: IFFALSE 37837
37699: GO 37701
37701: DISABLE
37702: LD_INT 0
37704: PPUSH
37705: PPUSH
// begin ToLua ( displayPowell(); ) ;
37706: LD_STRING displayPowell();
37708: PPUSH
37709: CALL_OW 559
// uc_side := 0 ;
37713: LD_ADDR_OWVAR 20
37717: PUSH
37718: LD_INT 0
37720: ST_TO_ADDR
// uc_nation := 2 ;
37721: LD_ADDR_OWVAR 21
37725: PUSH
37726: LD_INT 2
37728: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
37729: LD_ADDR_OWVAR 37
37733: PUSH
37734: LD_INT 14
37736: ST_TO_ADDR
// vc_engine := engine_siberite ;
37737: LD_ADDR_OWVAR 39
37741: PUSH
37742: LD_INT 3
37744: ST_TO_ADDR
// vc_control := control_apeman ;
37745: LD_ADDR_OWVAR 38
37749: PUSH
37750: LD_INT 5
37752: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
37753: LD_ADDR_OWVAR 40
37757: PUSH
37758: LD_INT 29
37760: ST_TO_ADDR
// un := CreateVehicle ;
37761: LD_ADDR_VAR 0 2
37765: PUSH
37766: CALL_OW 45
37770: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
37771: LD_VAR 0 2
37775: PPUSH
37776: LD_INT 1
37778: PPUSH
37779: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
37783: LD_INT 35
37785: PPUSH
37786: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
37790: LD_VAR 0 2
37794: PPUSH
37795: LD_INT 22
37797: PUSH
37798: LD_OWVAR 2
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PPUSH
37807: CALL_OW 69
37811: PPUSH
37812: LD_VAR 0 2
37816: PPUSH
37817: CALL_OW 74
37821: PPUSH
37822: CALL_OW 115
// until IsDead ( un ) ;
37826: LD_VAR 0 2
37830: PPUSH
37831: CALL_OW 301
37835: IFFALSE 37783
// end ;
37837: PPOPN 2
37839: END
// every 0 0$1 trigger StreamModeActive and sStu do
37840: LD_EXP 84
37844: PUSH
37845: LD_EXP 123
37849: AND
37850: IFFALSE 37866
37852: GO 37854
37854: DISABLE
// begin ToLua ( displayStucuk(); ) ;
37855: LD_STRING displayStucuk();
37857: PPUSH
37858: CALL_OW 559
// ResetFog ;
37862: CALL_OW 335
// end ;
37866: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
37867: LD_EXP 84
37871: PUSH
37872: LD_EXP 116
37876: AND
37877: IFFALSE 38018
37879: GO 37881
37881: DISABLE
37882: LD_INT 0
37884: PPUSH
37885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
37886: LD_ADDR_VAR 0 2
37890: PUSH
37891: LD_INT 22
37893: PUSH
37894: LD_OWVAR 2
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 21
37905: PUSH
37906: LD_INT 1
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PPUSH
37917: CALL_OW 69
37921: ST_TO_ADDR
// if not tmp then
37922: LD_VAR 0 2
37926: NOT
37927: IFFALSE 37931
// exit ;
37929: GO 38018
// un := tmp [ rand ( 1 , tmp ) ] ;
37931: LD_ADDR_VAR 0 1
37935: PUSH
37936: LD_VAR 0 2
37940: PUSH
37941: LD_INT 1
37943: PPUSH
37944: LD_VAR 0 2
37948: PPUSH
37949: CALL_OW 12
37953: ARRAY
37954: ST_TO_ADDR
// SetSide ( un , 0 ) ;
37955: LD_VAR 0 1
37959: PPUSH
37960: LD_INT 0
37962: PPUSH
37963: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
37967: LD_VAR 0 1
37971: PPUSH
37972: LD_OWVAR 3
37976: PUSH
37977: LD_VAR 0 1
37981: DIFF
37982: PPUSH
37983: LD_VAR 0 1
37987: PPUSH
37988: CALL_OW 74
37992: PPUSH
37993: CALL_OW 115
// wait ( 0 0$20 ) ;
37997: LD_INT 700
37999: PPUSH
38000: CALL_OW 67
// SetSide ( un , your_side ) ;
38004: LD_VAR 0 1
38008: PPUSH
38009: LD_OWVAR 2
38013: PPUSH
38014: CALL_OW 235
// end ;
38018: PPOPN 2
38020: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
38021: LD_EXP 84
38025: PUSH
38026: LD_EXP 117
38030: AND
38031: IFFALSE 38137
38033: GO 38035
38035: DISABLE
38036: LD_INT 0
38038: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38039: LD_ADDR_VAR 0 1
38043: PUSH
38044: LD_INT 22
38046: PUSH
38047: LD_OWVAR 2
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 2
38058: PUSH
38059: LD_INT 30
38061: PUSH
38062: LD_INT 0
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 30
38071: PUSH
38072: LD_INT 1
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: LIST
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PPUSH
38088: CALL_OW 69
38092: ST_TO_ADDR
// if not depot then
38093: LD_VAR 0 1
38097: NOT
38098: IFFALSE 38102
// exit ;
38100: GO 38137
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
38102: LD_VAR 0 1
38106: PUSH
38107: LD_INT 1
38109: ARRAY
38110: PPUSH
38111: CALL_OW 250
38115: PPUSH
38116: LD_VAR 0 1
38120: PUSH
38121: LD_INT 1
38123: ARRAY
38124: PPUSH
38125: CALL_OW 251
38129: PPUSH
38130: LD_INT 70
38132: PPUSH
38133: CALL_OW 495
// end ;
38137: PPOPN 1
38139: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
38140: LD_EXP 84
38144: PUSH
38145: LD_EXP 118
38149: AND
38150: IFFALSE 38361
38152: GO 38154
38154: DISABLE
38155: LD_INT 0
38157: PPUSH
38158: PPUSH
38159: PPUSH
38160: PPUSH
38161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
38162: LD_ADDR_VAR 0 5
38166: PUSH
38167: LD_INT 22
38169: PUSH
38170: LD_OWVAR 2
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 21
38181: PUSH
38182: LD_INT 1
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PPUSH
38193: CALL_OW 69
38197: ST_TO_ADDR
// if not tmp then
38198: LD_VAR 0 5
38202: NOT
38203: IFFALSE 38207
// exit ;
38205: GO 38361
// for i in tmp do
38207: LD_ADDR_VAR 0 1
38211: PUSH
38212: LD_VAR 0 5
38216: PUSH
38217: FOR_IN
38218: IFFALSE 38359
// begin d := rand ( 0 , 5 ) ;
38220: LD_ADDR_VAR 0 4
38224: PUSH
38225: LD_INT 0
38227: PPUSH
38228: LD_INT 5
38230: PPUSH
38231: CALL_OW 12
38235: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
38236: LD_ADDR_VAR 0 2
38240: PUSH
38241: LD_VAR 0 1
38245: PPUSH
38246: CALL_OW 250
38250: PPUSH
38251: LD_VAR 0 4
38255: PPUSH
38256: LD_INT 3
38258: PPUSH
38259: LD_INT 12
38261: PPUSH
38262: CALL_OW 12
38266: PPUSH
38267: CALL_OW 272
38271: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
38272: LD_ADDR_VAR 0 3
38276: PUSH
38277: LD_VAR 0 1
38281: PPUSH
38282: CALL_OW 251
38286: PPUSH
38287: LD_VAR 0 4
38291: PPUSH
38292: LD_INT 3
38294: PPUSH
38295: LD_INT 12
38297: PPUSH
38298: CALL_OW 12
38302: PPUSH
38303: CALL_OW 273
38307: ST_TO_ADDR
// if ValidHex ( x , y ) then
38308: LD_VAR 0 2
38312: PPUSH
38313: LD_VAR 0 3
38317: PPUSH
38318: CALL_OW 488
38322: IFFALSE 38357
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
38324: LD_VAR 0 1
38328: PPUSH
38329: LD_VAR 0 2
38333: PPUSH
38334: LD_VAR 0 3
38338: PPUSH
38339: LD_INT 3
38341: PPUSH
38342: LD_INT 6
38344: PPUSH
38345: CALL_OW 12
38349: PPUSH
38350: LD_INT 1
38352: PPUSH
38353: CALL_OW 483
// end ;
38357: GO 38217
38359: POP
38360: POP
// end ;
38361: PPOPN 5
38363: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
38364: LD_EXP 84
38368: PUSH
38369: LD_EXP 119
38373: AND
38374: IFFALSE 38468
38376: GO 38378
38378: DISABLE
38379: LD_INT 0
38381: PPUSH
38382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
38383: LD_ADDR_VAR 0 2
38387: PUSH
38388: LD_INT 22
38390: PUSH
38391: LD_OWVAR 2
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 32
38402: PUSH
38403: LD_INT 1
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 21
38412: PUSH
38413: LD_INT 2
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: LIST
38424: PPUSH
38425: CALL_OW 69
38429: ST_TO_ADDR
// if not tmp then
38430: LD_VAR 0 2
38434: NOT
38435: IFFALSE 38439
// exit ;
38437: GO 38468
// for i in tmp do
38439: LD_ADDR_VAR 0 1
38443: PUSH
38444: LD_VAR 0 2
38448: PUSH
38449: FOR_IN
38450: IFFALSE 38466
// SetFuel ( i , 0 ) ;
38452: LD_VAR 0 1
38456: PPUSH
38457: LD_INT 0
38459: PPUSH
38460: CALL_OW 240
38464: GO 38449
38466: POP
38467: POP
// end ;
38468: PPOPN 2
38470: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
38471: LD_EXP 84
38475: PUSH
38476: LD_EXP 120
38480: AND
38481: IFFALSE 38547
38483: GO 38485
38485: DISABLE
38486: LD_INT 0
38488: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
38489: LD_ADDR_VAR 0 1
38493: PUSH
38494: LD_INT 22
38496: PUSH
38497: LD_OWVAR 2
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 30
38508: PUSH
38509: LD_INT 29
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PPUSH
38520: CALL_OW 69
38524: ST_TO_ADDR
// if not tmp then
38525: LD_VAR 0 1
38529: NOT
38530: IFFALSE 38534
// exit ;
38532: GO 38547
// DestroyUnit ( tmp [ 1 ] ) ;
38534: LD_VAR 0 1
38538: PUSH
38539: LD_INT 1
38541: ARRAY
38542: PPUSH
38543: CALL_OW 65
// end ;
38547: PPOPN 1
38549: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
38550: LD_EXP 84
38554: PUSH
38555: LD_EXP 122
38559: AND
38560: IFFALSE 38689
38562: GO 38564
38564: DISABLE
38565: LD_INT 0
38567: PPUSH
// begin uc_side := 0 ;
38568: LD_ADDR_OWVAR 20
38572: PUSH
38573: LD_INT 0
38575: ST_TO_ADDR
// uc_nation := nation_arabian ;
38576: LD_ADDR_OWVAR 21
38580: PUSH
38581: LD_INT 2
38583: ST_TO_ADDR
// hc_gallery :=  ;
38584: LD_ADDR_OWVAR 33
38588: PUSH
38589: LD_STRING 
38591: ST_TO_ADDR
// hc_name :=  ;
38592: LD_ADDR_OWVAR 26
38596: PUSH
38597: LD_STRING 
38599: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
38600: LD_INT 1
38602: PPUSH
38603: LD_INT 11
38605: PPUSH
38606: LD_INT 10
38608: PPUSH
38609: CALL_OW 380
// un := CreateHuman ;
38613: LD_ADDR_VAR 0 1
38617: PUSH
38618: CALL_OW 44
38622: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
38623: LD_VAR 0 1
38627: PPUSH
38628: LD_INT 1
38630: PPUSH
38631: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
38635: LD_INT 35
38637: PPUSH
38638: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
38642: LD_VAR 0 1
38646: PPUSH
38647: LD_INT 22
38649: PUSH
38650: LD_OWVAR 2
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PPUSH
38659: CALL_OW 69
38663: PPUSH
38664: LD_VAR 0 1
38668: PPUSH
38669: CALL_OW 74
38673: PPUSH
38674: CALL_OW 115
// until IsDead ( un ) ;
38678: LD_VAR 0 1
38682: PPUSH
38683: CALL_OW 301
38687: IFFALSE 38635
// end ;
38689: PPOPN 1
38691: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
38692: LD_EXP 84
38696: PUSH
38697: LD_EXP 124
38701: AND
38702: IFFALSE 38714
38704: GO 38706
38706: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
38707: LD_STRING earthquake(getX(game), 0, 32)
38709: PPUSH
38710: CALL_OW 559
38714: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
38715: LD_EXP 84
38719: PUSH
38720: LD_EXP 125
38724: AND
38725: IFFALSE 38816
38727: GO 38729
38729: DISABLE
38730: LD_INT 0
38732: PPUSH
// begin enable ;
38733: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
38734: LD_ADDR_VAR 0 1
38738: PUSH
38739: LD_INT 22
38741: PUSH
38742: LD_OWVAR 2
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 21
38753: PUSH
38754: LD_INT 2
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 33
38763: PUSH
38764: LD_INT 3
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: LIST
38775: PPUSH
38776: CALL_OW 69
38780: ST_TO_ADDR
// if not tmp then
38781: LD_VAR 0 1
38785: NOT
38786: IFFALSE 38790
// exit ;
38788: GO 38816
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
38790: LD_VAR 0 1
38794: PUSH
38795: LD_INT 1
38797: PPUSH
38798: LD_VAR 0 1
38802: PPUSH
38803: CALL_OW 12
38807: ARRAY
38808: PPUSH
38809: LD_INT 1
38811: PPUSH
38812: CALL_OW 234
// end ;
38816: PPOPN 1
38818: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
38819: LD_EXP 84
38823: PUSH
38824: LD_EXP 126
38828: AND
38829: IFFALSE 38970
38831: GO 38833
38833: DISABLE
38834: LD_INT 0
38836: PPUSH
38837: PPUSH
38838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38839: LD_ADDR_VAR 0 3
38843: PUSH
38844: LD_INT 22
38846: PUSH
38847: LD_OWVAR 2
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 25
38858: PUSH
38859: LD_INT 1
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PPUSH
38870: CALL_OW 69
38874: ST_TO_ADDR
// if not tmp then
38875: LD_VAR 0 3
38879: NOT
38880: IFFALSE 38884
// exit ;
38882: GO 38970
// un := tmp [ rand ( 1 , tmp ) ] ;
38884: LD_ADDR_VAR 0 2
38888: PUSH
38889: LD_VAR 0 3
38893: PUSH
38894: LD_INT 1
38896: PPUSH
38897: LD_VAR 0 3
38901: PPUSH
38902: CALL_OW 12
38906: ARRAY
38907: ST_TO_ADDR
// if Crawls ( un ) then
38908: LD_VAR 0 2
38912: PPUSH
38913: CALL_OW 318
38917: IFFALSE 38928
// ComWalk ( un ) ;
38919: LD_VAR 0 2
38923: PPUSH
38924: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
38928: LD_VAR 0 2
38932: PPUSH
38933: LD_INT 9
38935: PPUSH
38936: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
38940: LD_INT 28
38942: PPUSH
38943: LD_OWVAR 2
38947: PPUSH
38948: LD_INT 2
38950: PPUSH
38951: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
38955: LD_INT 29
38957: PPUSH
38958: LD_OWVAR 2
38962: PPUSH
38963: LD_INT 2
38965: PPUSH
38966: CALL_OW 322
// end ;
38970: PPOPN 3
38972: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
38973: LD_EXP 84
38977: PUSH
38978: LD_EXP 127
38982: AND
38983: IFFALSE 39094
38985: GO 38987
38987: DISABLE
38988: LD_INT 0
38990: PPUSH
38991: PPUSH
38992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38993: LD_ADDR_VAR 0 3
38997: PUSH
38998: LD_INT 22
39000: PUSH
39001: LD_OWVAR 2
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 25
39012: PUSH
39013: LD_INT 1
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PPUSH
39024: CALL_OW 69
39028: ST_TO_ADDR
// if not tmp then
39029: LD_VAR 0 3
39033: NOT
39034: IFFALSE 39038
// exit ;
39036: GO 39094
// un := tmp [ rand ( 1 , tmp ) ] ;
39038: LD_ADDR_VAR 0 2
39042: PUSH
39043: LD_VAR 0 3
39047: PUSH
39048: LD_INT 1
39050: PPUSH
39051: LD_VAR 0 3
39055: PPUSH
39056: CALL_OW 12
39060: ARRAY
39061: ST_TO_ADDR
// if Crawls ( un ) then
39062: LD_VAR 0 2
39066: PPUSH
39067: CALL_OW 318
39071: IFFALSE 39082
// ComWalk ( un ) ;
39073: LD_VAR 0 2
39077: PPUSH
39078: CALL_OW 138
// SetClass ( un , class_mortar ) ;
39082: LD_VAR 0 2
39086: PPUSH
39087: LD_INT 8
39089: PPUSH
39090: CALL_OW 336
// end ;
39094: PPOPN 3
39096: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
39097: LD_EXP 84
39101: PUSH
39102: LD_EXP 128
39106: AND
39107: IFFALSE 39251
39109: GO 39111
39111: DISABLE
39112: LD_INT 0
39114: PPUSH
39115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
39116: LD_ADDR_VAR 0 2
39120: PUSH
39121: LD_INT 22
39123: PUSH
39124: LD_OWVAR 2
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 21
39135: PUSH
39136: LD_INT 2
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 2
39145: PUSH
39146: LD_INT 34
39148: PUSH
39149: LD_INT 12
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 34
39158: PUSH
39159: LD_INT 51
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 34
39168: PUSH
39169: LD_INT 32
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: LIST
39186: PPUSH
39187: CALL_OW 69
39191: ST_TO_ADDR
// if not tmp then
39192: LD_VAR 0 2
39196: NOT
39197: IFFALSE 39201
// exit ;
39199: GO 39251
// for i in tmp do
39201: LD_ADDR_VAR 0 1
39205: PUSH
39206: LD_VAR 0 2
39210: PUSH
39211: FOR_IN
39212: IFFALSE 39249
// if GetCargo ( i , mat_artifact ) = 0 then
39214: LD_VAR 0 1
39218: PPUSH
39219: LD_INT 4
39221: PPUSH
39222: CALL_OW 289
39226: PUSH
39227: LD_INT 0
39229: EQUAL
39230: IFFALSE 39247
// SetCargo ( i , mat_siberit , 100 ) ;
39232: LD_VAR 0 1
39236: PPUSH
39237: LD_INT 3
39239: PPUSH
39240: LD_INT 100
39242: PPUSH
39243: CALL_OW 290
39247: GO 39211
39249: POP
39250: POP
// end ;
39251: PPOPN 2
39253: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
39254: LD_EXP 84
39258: PUSH
39259: LD_EXP 129
39263: AND
39264: IFFALSE 39447
39266: GO 39268
39268: DISABLE
39269: LD_INT 0
39271: PPUSH
39272: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
39273: LD_ADDR_VAR 0 2
39277: PUSH
39278: LD_INT 22
39280: PUSH
39281: LD_OWVAR 2
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PPUSH
39290: CALL_OW 69
39294: ST_TO_ADDR
// if not tmp then
39295: LD_VAR 0 2
39299: NOT
39300: IFFALSE 39304
// exit ;
39302: GO 39447
// for i := 1 to 2 do
39304: LD_ADDR_VAR 0 1
39308: PUSH
39309: DOUBLE
39310: LD_INT 1
39312: DEC
39313: ST_TO_ADDR
39314: LD_INT 2
39316: PUSH
39317: FOR_TO
39318: IFFALSE 39445
// begin uc_side := your_side ;
39320: LD_ADDR_OWVAR 20
39324: PUSH
39325: LD_OWVAR 2
39329: ST_TO_ADDR
// uc_nation := nation_american ;
39330: LD_ADDR_OWVAR 21
39334: PUSH
39335: LD_INT 1
39337: ST_TO_ADDR
// vc_chassis := us_morphling ;
39338: LD_ADDR_OWVAR 37
39342: PUSH
39343: LD_INT 5
39345: ST_TO_ADDR
// vc_engine := engine_siberite ;
39346: LD_ADDR_OWVAR 39
39350: PUSH
39351: LD_INT 3
39353: ST_TO_ADDR
// vc_control := control_computer ;
39354: LD_ADDR_OWVAR 38
39358: PUSH
39359: LD_INT 3
39361: ST_TO_ADDR
// vc_weapon := us_double_laser ;
39362: LD_ADDR_OWVAR 40
39366: PUSH
39367: LD_INT 10
39369: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
39370: LD_VAR 0 2
39374: PUSH
39375: LD_INT 1
39377: ARRAY
39378: PPUSH
39379: CALL_OW 310
39383: NOT
39384: IFFALSE 39431
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
39386: CALL_OW 45
39390: PPUSH
39391: LD_VAR 0 2
39395: PUSH
39396: LD_INT 1
39398: ARRAY
39399: PPUSH
39400: CALL_OW 250
39404: PPUSH
39405: LD_VAR 0 2
39409: PUSH
39410: LD_INT 1
39412: ARRAY
39413: PPUSH
39414: CALL_OW 251
39418: PPUSH
39419: LD_INT 12
39421: PPUSH
39422: LD_INT 1
39424: PPUSH
39425: CALL_OW 50
39429: GO 39443
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
39431: CALL_OW 45
39435: PPUSH
39436: LD_INT 1
39438: PPUSH
39439: CALL_OW 51
// end ;
39443: GO 39317
39445: POP
39446: POP
// end ;
39447: PPOPN 2
39449: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
39450: LD_EXP 84
39454: PUSH
39455: LD_EXP 130
39459: AND
39460: IFFALSE 39682
39462: GO 39464
39464: DISABLE
39465: LD_INT 0
39467: PPUSH
39468: PPUSH
39469: PPUSH
39470: PPUSH
39471: PPUSH
39472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
39473: LD_ADDR_VAR 0 6
39477: PUSH
39478: LD_INT 22
39480: PUSH
39481: LD_OWVAR 2
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 21
39492: PUSH
39493: LD_INT 1
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 3
39502: PUSH
39503: LD_INT 23
39505: PUSH
39506: LD_INT 0
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: LIST
39521: PPUSH
39522: CALL_OW 69
39526: ST_TO_ADDR
// if not tmp then
39527: LD_VAR 0 6
39531: NOT
39532: IFFALSE 39536
// exit ;
39534: GO 39682
// s1 := rand ( 1 , 4 ) ;
39536: LD_ADDR_VAR 0 2
39540: PUSH
39541: LD_INT 1
39543: PPUSH
39544: LD_INT 4
39546: PPUSH
39547: CALL_OW 12
39551: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
39552: LD_ADDR_VAR 0 4
39556: PUSH
39557: LD_VAR 0 6
39561: PUSH
39562: LD_INT 1
39564: ARRAY
39565: PPUSH
39566: LD_VAR 0 2
39570: PPUSH
39571: CALL_OW 259
39575: ST_TO_ADDR
// if s1 = 1 then
39576: LD_VAR 0 2
39580: PUSH
39581: LD_INT 1
39583: EQUAL
39584: IFFALSE 39604
// s2 := rand ( 2 , 4 ) else
39586: LD_ADDR_VAR 0 3
39590: PUSH
39591: LD_INT 2
39593: PPUSH
39594: LD_INT 4
39596: PPUSH
39597: CALL_OW 12
39601: ST_TO_ADDR
39602: GO 39612
// s2 := 1 ;
39604: LD_ADDR_VAR 0 3
39608: PUSH
39609: LD_INT 1
39611: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
39612: LD_ADDR_VAR 0 5
39616: PUSH
39617: LD_VAR 0 6
39621: PUSH
39622: LD_INT 1
39624: ARRAY
39625: PPUSH
39626: LD_VAR 0 3
39630: PPUSH
39631: CALL_OW 259
39635: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
39636: LD_VAR 0 6
39640: PUSH
39641: LD_INT 1
39643: ARRAY
39644: PPUSH
39645: LD_VAR 0 2
39649: PPUSH
39650: LD_VAR 0 5
39654: PPUSH
39655: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
39659: LD_VAR 0 6
39663: PUSH
39664: LD_INT 1
39666: ARRAY
39667: PPUSH
39668: LD_VAR 0 3
39672: PPUSH
39673: LD_VAR 0 4
39677: PPUSH
39678: CALL_OW 237
// end ;
39682: PPOPN 6
39684: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
39685: LD_EXP 84
39689: PUSH
39690: LD_EXP 131
39694: AND
39695: IFFALSE 39774
39697: GO 39699
39699: DISABLE
39700: LD_INT 0
39702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
39703: LD_ADDR_VAR 0 1
39707: PUSH
39708: LD_INT 22
39710: PUSH
39711: LD_OWVAR 2
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 30
39722: PUSH
39723: LD_INT 3
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PPUSH
39734: CALL_OW 69
39738: ST_TO_ADDR
// if not tmp then
39739: LD_VAR 0 1
39743: NOT
39744: IFFALSE 39748
// exit ;
39746: GO 39774
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
39748: LD_VAR 0 1
39752: PUSH
39753: LD_INT 1
39755: PPUSH
39756: LD_VAR 0 1
39760: PPUSH
39761: CALL_OW 12
39765: ARRAY
39766: PPUSH
39767: LD_INT 1
39769: PPUSH
39770: CALL_OW 234
// end ;
39774: PPOPN 1
39776: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
39777: LD_EXP 84
39781: PUSH
39782: LD_EXP 132
39786: AND
39787: IFFALSE 39899
39789: GO 39791
39791: DISABLE
39792: LD_INT 0
39794: PPUSH
39795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
39796: LD_ADDR_VAR 0 2
39800: PUSH
39801: LD_INT 22
39803: PUSH
39804: LD_OWVAR 2
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 2
39815: PUSH
39816: LD_INT 30
39818: PUSH
39819: LD_INT 27
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 30
39828: PUSH
39829: LD_INT 26
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 30
39838: PUSH
39839: LD_INT 28
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PPUSH
39856: CALL_OW 69
39860: ST_TO_ADDR
// if not tmp then
39861: LD_VAR 0 2
39865: NOT
39866: IFFALSE 39870
// exit ;
39868: GO 39899
// for i in tmp do
39870: LD_ADDR_VAR 0 1
39874: PUSH
39875: LD_VAR 0 2
39879: PUSH
39880: FOR_IN
39881: IFFALSE 39897
// SetLives ( i , 1 ) ;
39883: LD_VAR 0 1
39887: PPUSH
39888: LD_INT 1
39890: PPUSH
39891: CALL_OW 234
39895: GO 39880
39897: POP
39898: POP
// end ;
39899: PPOPN 2
39901: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
39902: LD_EXP 84
39906: PUSH
39907: LD_EXP 133
39911: AND
39912: IFFALSE 40186
39914: GO 39916
39916: DISABLE
39917: LD_INT 0
39919: PPUSH
39920: PPUSH
39921: PPUSH
// begin i := rand ( 1 , 7 ) ;
39922: LD_ADDR_VAR 0 1
39926: PUSH
39927: LD_INT 1
39929: PPUSH
39930: LD_INT 7
39932: PPUSH
39933: CALL_OW 12
39937: ST_TO_ADDR
// case i of 1 :
39938: LD_VAR 0 1
39942: PUSH
39943: LD_INT 1
39945: DOUBLE
39946: EQUAL
39947: IFTRUE 39951
39949: GO 39961
39951: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
39952: LD_STRING earthquake(getX(game), 0, 32)
39954: PPUSH
39955: CALL_OW 559
39959: GO 40186
39961: LD_INT 2
39963: DOUBLE
39964: EQUAL
39965: IFTRUE 39969
39967: GO 39983
39969: POP
// begin ToLua ( displayStucuk(); ) ;
39970: LD_STRING displayStucuk();
39972: PPUSH
39973: CALL_OW 559
// ResetFog ;
39977: CALL_OW 335
// end ; 3 :
39981: GO 40186
39983: LD_INT 3
39985: DOUBLE
39986: EQUAL
39987: IFTRUE 39991
39989: GO 40095
39991: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
39992: LD_ADDR_VAR 0 2
39996: PUSH
39997: LD_INT 22
39999: PUSH
40000: LD_OWVAR 2
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 25
40011: PUSH
40012: LD_INT 1
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PPUSH
40023: CALL_OW 69
40027: ST_TO_ADDR
// if not tmp then
40028: LD_VAR 0 2
40032: NOT
40033: IFFALSE 40037
// exit ;
40035: GO 40186
// un := tmp [ rand ( 1 , tmp ) ] ;
40037: LD_ADDR_VAR 0 3
40041: PUSH
40042: LD_VAR 0 2
40046: PUSH
40047: LD_INT 1
40049: PPUSH
40050: LD_VAR 0 2
40054: PPUSH
40055: CALL_OW 12
40059: ARRAY
40060: ST_TO_ADDR
// if Crawls ( un ) then
40061: LD_VAR 0 3
40065: PPUSH
40066: CALL_OW 318
40070: IFFALSE 40081
// ComWalk ( un ) ;
40072: LD_VAR 0 3
40076: PPUSH
40077: CALL_OW 138
// SetClass ( un , class_mortar ) ;
40081: LD_VAR 0 3
40085: PPUSH
40086: LD_INT 8
40088: PPUSH
40089: CALL_OW 336
// end ; 4 :
40093: GO 40186
40095: LD_INT 4
40097: DOUBLE
40098: EQUAL
40099: IFTRUE 40103
40101: GO 40164
40103: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
40104: LD_ADDR_VAR 0 2
40108: PUSH
40109: LD_INT 22
40111: PUSH
40112: LD_OWVAR 2
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 30
40123: PUSH
40124: LD_INT 29
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PPUSH
40135: CALL_OW 69
40139: ST_TO_ADDR
// if not tmp then
40140: LD_VAR 0 2
40144: NOT
40145: IFFALSE 40149
// exit ;
40147: GO 40186
// DestroyUnit ( tmp [ 1 ] ) ;
40149: LD_VAR 0 2
40153: PUSH
40154: LD_INT 1
40156: ARRAY
40157: PPUSH
40158: CALL_OW 65
// end ; 5 .. 7 :
40162: GO 40186
40164: LD_INT 5
40166: DOUBLE
40167: GREATEREQUAL
40168: IFFALSE 40176
40170: LD_INT 7
40172: DOUBLE
40173: LESSEQUAL
40174: IFTRUE 40178
40176: GO 40185
40178: POP
// StreamSibBomb ; end ;
40179: CALL 36436 0 0
40183: GO 40186
40185: POP
// end ;
40186: PPOPN 3
40188: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
40189: LD_EXP 84
40193: PUSH
40194: LD_EXP 134
40198: AND
40199: IFFALSE 40355
40201: GO 40203
40203: DISABLE
40204: LD_INT 0
40206: PPUSH
40207: PPUSH
40208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
40209: LD_ADDR_VAR 0 2
40213: PUSH
40214: LD_INT 81
40216: PUSH
40217: LD_OWVAR 2
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 2
40228: PUSH
40229: LD_INT 21
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 21
40241: PUSH
40242: LD_INT 2
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: LIST
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PPUSH
40258: CALL_OW 69
40262: ST_TO_ADDR
// if not tmp then
40263: LD_VAR 0 2
40267: NOT
40268: IFFALSE 40272
// exit ;
40270: GO 40355
// p := 0 ;
40272: LD_ADDR_VAR 0 3
40276: PUSH
40277: LD_INT 0
40279: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40280: LD_INT 35
40282: PPUSH
40283: CALL_OW 67
// p := p + 1 ;
40287: LD_ADDR_VAR 0 3
40291: PUSH
40292: LD_VAR 0 3
40296: PUSH
40297: LD_INT 1
40299: PLUS
40300: ST_TO_ADDR
// for i in tmp do
40301: LD_ADDR_VAR 0 1
40305: PUSH
40306: LD_VAR 0 2
40310: PUSH
40311: FOR_IN
40312: IFFALSE 40343
// if GetLives ( i ) < 1000 then
40314: LD_VAR 0 1
40318: PPUSH
40319: CALL_OW 256
40323: PUSH
40324: LD_INT 1000
40326: LESS
40327: IFFALSE 40341
// SetLives ( i , 1000 ) ;
40329: LD_VAR 0 1
40333: PPUSH
40334: LD_INT 1000
40336: PPUSH
40337: CALL_OW 234
40341: GO 40311
40343: POP
40344: POP
// until p > 20 ;
40345: LD_VAR 0 3
40349: PUSH
40350: LD_INT 20
40352: GREATER
40353: IFFALSE 40280
// end ;
40355: PPOPN 3
40357: END
// every 0 0$1 trigger StreamModeActive and sTime do
40358: LD_EXP 84
40362: PUSH
40363: LD_EXP 135
40367: AND
40368: IFFALSE 40403
40370: GO 40372
40372: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
40373: LD_INT 28
40375: PPUSH
40376: LD_OWVAR 2
40380: PPUSH
40381: LD_INT 2
40383: PPUSH
40384: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
40388: LD_INT 30
40390: PPUSH
40391: LD_OWVAR 2
40395: PPUSH
40396: LD_INT 2
40398: PPUSH
40399: CALL_OW 322
// end ;
40403: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
40404: LD_EXP 84
40408: PUSH
40409: LD_EXP 136
40413: AND
40414: IFFALSE 40535
40416: GO 40418
40418: DISABLE
40419: LD_INT 0
40421: PPUSH
40422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
40423: LD_ADDR_VAR 0 2
40427: PUSH
40428: LD_INT 22
40430: PUSH
40431: LD_OWVAR 2
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 21
40442: PUSH
40443: LD_INT 1
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 3
40452: PUSH
40453: LD_INT 23
40455: PUSH
40456: LD_INT 0
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: LIST
40471: PPUSH
40472: CALL_OW 69
40476: ST_TO_ADDR
// if not tmp then
40477: LD_VAR 0 2
40481: NOT
40482: IFFALSE 40486
// exit ;
40484: GO 40535
// for i in tmp do
40486: LD_ADDR_VAR 0 1
40490: PUSH
40491: LD_VAR 0 2
40495: PUSH
40496: FOR_IN
40497: IFFALSE 40533
// begin if Crawls ( i ) then
40499: LD_VAR 0 1
40503: PPUSH
40504: CALL_OW 318
40508: IFFALSE 40519
// ComWalk ( i ) ;
40510: LD_VAR 0 1
40514: PPUSH
40515: CALL_OW 138
// SetClass ( i , 2 ) ;
40519: LD_VAR 0 1
40523: PPUSH
40524: LD_INT 2
40526: PPUSH
40527: CALL_OW 336
// end ;
40531: GO 40496
40533: POP
40534: POP
// end ;
40535: PPOPN 2
40537: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
40538: LD_EXP 84
40542: PUSH
40543: LD_EXP 137
40547: AND
40548: IFFALSE 40829
40550: GO 40552
40552: DISABLE
40553: LD_INT 0
40555: PPUSH
40556: PPUSH
40557: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
40558: LD_OWVAR 2
40562: PPUSH
40563: LD_INT 9
40565: PPUSH
40566: LD_INT 1
40568: PPUSH
40569: LD_INT 1
40571: PPUSH
40572: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
40576: LD_INT 9
40578: PPUSH
40579: LD_OWVAR 2
40583: PPUSH
40584: CALL_OW 343
// uc_side := 9 ;
40588: LD_ADDR_OWVAR 20
40592: PUSH
40593: LD_INT 9
40595: ST_TO_ADDR
// uc_nation := 2 ;
40596: LD_ADDR_OWVAR 21
40600: PUSH
40601: LD_INT 2
40603: ST_TO_ADDR
// hc_name := Dark Warrior ;
40604: LD_ADDR_OWVAR 26
40608: PUSH
40609: LD_STRING Dark Warrior
40611: ST_TO_ADDR
// hc_gallery :=  ;
40612: LD_ADDR_OWVAR 33
40616: PUSH
40617: LD_STRING 
40619: ST_TO_ADDR
// hc_noskilllimit := true ;
40620: LD_ADDR_OWVAR 76
40624: PUSH
40625: LD_INT 1
40627: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
40628: LD_ADDR_OWVAR 31
40632: PUSH
40633: LD_INT 30
40635: PUSH
40636: LD_INT 30
40638: PUSH
40639: LD_INT 30
40641: PUSH
40642: LD_INT 30
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: ST_TO_ADDR
// un := CreateHuman ;
40651: LD_ADDR_VAR 0 3
40655: PUSH
40656: CALL_OW 44
40660: ST_TO_ADDR
// hc_noskilllimit := false ;
40661: LD_ADDR_OWVAR 76
40665: PUSH
40666: LD_INT 0
40668: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
40669: LD_VAR 0 3
40673: PPUSH
40674: LD_INT 1
40676: PPUSH
40677: CALL_OW 51
// p := 0 ;
40681: LD_ADDR_VAR 0 2
40685: PUSH
40686: LD_INT 0
40688: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40689: LD_INT 35
40691: PPUSH
40692: CALL_OW 67
// p := p + 1 ;
40696: LD_ADDR_VAR 0 2
40700: PUSH
40701: LD_VAR 0 2
40705: PUSH
40706: LD_INT 1
40708: PLUS
40709: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
40710: LD_VAR 0 3
40714: PPUSH
40715: CALL_OW 256
40719: PUSH
40720: LD_INT 1000
40722: LESS
40723: IFFALSE 40737
// SetLives ( un , 1000 ) ;
40725: LD_VAR 0 3
40729: PPUSH
40730: LD_INT 1000
40732: PPUSH
40733: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
40737: LD_VAR 0 3
40741: PPUSH
40742: LD_INT 81
40744: PUSH
40745: LD_OWVAR 2
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 91
40756: PUSH
40757: LD_VAR 0 3
40761: PUSH
40762: LD_INT 30
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: LIST
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PPUSH
40774: CALL_OW 69
40778: PPUSH
40779: LD_VAR 0 3
40783: PPUSH
40784: CALL_OW 74
40788: PPUSH
40789: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
40793: LD_VAR 0 2
40797: PUSH
40798: LD_INT 60
40800: GREATER
40801: PUSH
40802: LD_VAR 0 3
40806: PPUSH
40807: CALL_OW 301
40811: OR
40812: IFFALSE 40689
// if un then
40814: LD_VAR 0 3
40818: IFFALSE 40829
// RemoveUnit ( un ) ;
40820: LD_VAR 0 3
40824: PPUSH
40825: CALL_OW 64
// end ;
40829: PPOPN 3
40831: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
40832: LD_INT 0
40834: PPUSH
40835: PPUSH
40836: PPUSH
40837: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40838: LD_ADDR_VAR 0 4
40842: PUSH
40843: LD_INT 22
40845: PUSH
40846: LD_OWVAR 2
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 2
40857: PUSH
40858: LD_INT 30
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 30
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: LIST
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PPUSH
40887: CALL_OW 69
40891: ST_TO_ADDR
// if not tmp then
40892: LD_VAR 0 4
40896: NOT
40897: IFFALSE 40901
// exit ;
40899: GO 40960
// for i in tmp do
40901: LD_ADDR_VAR 0 2
40905: PUSH
40906: LD_VAR 0 4
40910: PUSH
40911: FOR_IN
40912: IFFALSE 40958
// for j = 1 to 3 do
40914: LD_ADDR_VAR 0 3
40918: PUSH
40919: DOUBLE
40920: LD_INT 1
40922: DEC
40923: ST_TO_ADDR
40924: LD_INT 3
40926: PUSH
40927: FOR_TO
40928: IFFALSE 40954
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
40930: LD_VAR 0 2
40934: PPUSH
40935: CALL_OW 274
40939: PPUSH
40940: LD_VAR 0 3
40944: PPUSH
40945: LD_INT 99999
40947: PPUSH
40948: CALL_OW 277
40952: GO 40927
40954: POP
40955: POP
40956: GO 40911
40958: POP
40959: POP
// end ;
40960: LD_VAR 0 1
40964: RET
// export function hHackSetLevel10 ; var i , j ; begin
40965: LD_INT 0
40967: PPUSH
40968: PPUSH
40969: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
40970: LD_ADDR_VAR 0 2
40974: PUSH
40975: LD_INT 21
40977: PUSH
40978: LD_INT 1
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PPUSH
40985: CALL_OW 69
40989: PUSH
40990: FOR_IN
40991: IFFALSE 41043
// if IsSelected ( i ) then
40993: LD_VAR 0 2
40997: PPUSH
40998: CALL_OW 306
41002: IFFALSE 41041
// begin for j := 1 to 4 do
41004: LD_ADDR_VAR 0 3
41008: PUSH
41009: DOUBLE
41010: LD_INT 1
41012: DEC
41013: ST_TO_ADDR
41014: LD_INT 4
41016: PUSH
41017: FOR_TO
41018: IFFALSE 41039
// SetSkill ( i , j , 10 ) ;
41020: LD_VAR 0 2
41024: PPUSH
41025: LD_VAR 0 3
41029: PPUSH
41030: LD_INT 10
41032: PPUSH
41033: CALL_OW 237
41037: GO 41017
41039: POP
41040: POP
// end ;
41041: GO 40990
41043: POP
41044: POP
// end ;
41045: LD_VAR 0 1
41049: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
41050: LD_INT 0
41052: PPUSH
41053: PPUSH
41054: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
41055: LD_ADDR_VAR 0 2
41059: PUSH
41060: LD_INT 22
41062: PUSH
41063: LD_OWVAR 2
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 21
41074: PUSH
41075: LD_INT 1
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PPUSH
41086: CALL_OW 69
41090: PUSH
41091: FOR_IN
41092: IFFALSE 41133
// begin for j := 1 to 4 do
41094: LD_ADDR_VAR 0 3
41098: PUSH
41099: DOUBLE
41100: LD_INT 1
41102: DEC
41103: ST_TO_ADDR
41104: LD_INT 4
41106: PUSH
41107: FOR_TO
41108: IFFALSE 41129
// SetSkill ( i , j , 10 ) ;
41110: LD_VAR 0 2
41114: PPUSH
41115: LD_VAR 0 3
41119: PPUSH
41120: LD_INT 10
41122: PPUSH
41123: CALL_OW 237
41127: GO 41107
41129: POP
41130: POP
// end ;
41131: GO 41091
41133: POP
41134: POP
// end ;
41135: LD_VAR 0 1
41139: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
41140: LD_INT 0
41142: PPUSH
// uc_side := your_side ;
41143: LD_ADDR_OWVAR 20
41147: PUSH
41148: LD_OWVAR 2
41152: ST_TO_ADDR
// uc_nation := nation ;
41153: LD_ADDR_OWVAR 21
41157: PUSH
41158: LD_VAR 0 1
41162: ST_TO_ADDR
// InitHc ;
41163: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
41167: LD_INT 0
41169: PPUSH
41170: LD_VAR 0 2
41174: PPUSH
41175: LD_VAR 0 3
41179: PPUSH
41180: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
41184: CALL_OW 44
41188: PPUSH
41189: LD_INT 1
41191: PPUSH
41192: CALL_OW 51
// end ;
41196: LD_VAR 0 4
41200: RET
// export function hHackSpawnVehicle ; begin
41201: LD_INT 0
41203: PPUSH
// uc_side := your_side ;
41204: LD_ADDR_OWVAR 20
41208: PUSH
41209: LD_OWVAR 2
41213: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
41214: LD_ADDR_OWVAR 21
41218: PUSH
41219: LD_INT 1
41221: PPUSH
41222: LD_INT 3
41224: PPUSH
41225: CALL_OW 12
41229: ST_TO_ADDR
// InitVc ;
41230: CALL_OW 20
// case uc_nation of 1 :
41234: LD_OWVAR 21
41238: PUSH
41239: LD_INT 1
41241: DOUBLE
41242: EQUAL
41243: IFTRUE 41247
41245: GO 41391
41247: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
41248: LD_ADDR_OWVAR 37
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: LD_INT 2
41258: PUSH
41259: LD_INT 3
41261: PUSH
41262: LD_INT 4
41264: PUSH
41265: LD_INT 5
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 1
41277: PPUSH
41278: LD_INT 5
41280: PPUSH
41281: CALL_OW 12
41285: ARRAY
41286: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
41287: LD_ADDR_OWVAR 39
41291: PUSH
41292: LD_INT 1
41294: PPUSH
41295: LD_INT 3
41297: PPUSH
41298: CALL_OW 12
41302: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
41303: LD_ADDR_OWVAR 38
41307: PUSH
41308: LD_INT 1
41310: PUSH
41311: LD_INT 2
41313: PUSH
41314: LD_INT 3
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: PPUSH
41325: LD_INT 3
41327: PPUSH
41328: CALL_OW 12
41332: ARRAY
41333: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
41334: LD_ADDR_OWVAR 40
41338: PUSH
41339: LD_INT 2
41341: PUSH
41342: LD_INT 4
41344: PUSH
41345: LD_INT 5
41347: PUSH
41348: LD_INT 3
41350: PUSH
41351: LD_INT 7
41353: PUSH
41354: LD_INT 8
41356: PUSH
41357: LD_INT 9
41359: PUSH
41360: LD_INT 10
41362: PUSH
41363: LD_INT 6
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 1
41379: PPUSH
41380: LD_INT 9
41382: PPUSH
41383: CALL_OW 12
41387: ARRAY
41388: ST_TO_ADDR
// end ; 2 :
41389: GO 41656
41391: LD_INT 2
41393: DOUBLE
41394: EQUAL
41395: IFTRUE 41399
41397: GO 41523
41399: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
41400: LD_ADDR_OWVAR 37
41404: PUSH
41405: LD_INT 11
41407: PUSH
41408: LD_INT 12
41410: PUSH
41411: LD_INT 13
41413: PUSH
41414: LD_INT 14
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 1
41425: PPUSH
41426: LD_INT 4
41428: PPUSH
41429: CALL_OW 12
41433: ARRAY
41434: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
41435: LD_ADDR_OWVAR 39
41439: PUSH
41440: LD_INT 1
41442: PPUSH
41443: LD_INT 3
41445: PPUSH
41446: CALL_OW 12
41450: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
41451: LD_ADDR_OWVAR 38
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: LD_INT 2
41461: PUSH
41462: LD_INT 5
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 1
41472: PPUSH
41473: LD_INT 3
41475: PPUSH
41476: CALL_OW 12
41480: ARRAY
41481: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
41482: LD_ADDR_OWVAR 40
41486: PUSH
41487: LD_INT 24
41489: PUSH
41490: LD_INT 26
41492: PUSH
41493: LD_INT 27
41495: PUSH
41496: LD_INT 28
41498: PUSH
41499: LD_INT 29
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 1
41511: PPUSH
41512: LD_INT 5
41514: PPUSH
41515: CALL_OW 12
41519: ARRAY
41520: ST_TO_ADDR
// end ; 3 :
41521: GO 41656
41523: LD_INT 3
41525: DOUBLE
41526: EQUAL
41527: IFTRUE 41531
41529: GO 41655
41531: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
41532: LD_ADDR_OWVAR 37
41536: PUSH
41537: LD_INT 21
41539: PUSH
41540: LD_INT 23
41542: PUSH
41543: LD_INT 22
41545: PUSH
41546: LD_INT 24
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 1
41557: PPUSH
41558: LD_INT 4
41560: PPUSH
41561: CALL_OW 12
41565: ARRAY
41566: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
41567: LD_ADDR_OWVAR 39
41571: PUSH
41572: LD_INT 1
41574: PPUSH
41575: LD_INT 3
41577: PPUSH
41578: CALL_OW 12
41582: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
41583: LD_ADDR_OWVAR 38
41587: PUSH
41588: LD_INT 1
41590: PUSH
41591: LD_INT 3
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 1
41600: PPUSH
41601: LD_INT 2
41603: PPUSH
41604: CALL_OW 12
41608: ARRAY
41609: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
41610: LD_ADDR_OWVAR 40
41614: PUSH
41615: LD_INT 42
41617: PUSH
41618: LD_INT 43
41620: PUSH
41621: LD_INT 44
41623: PUSH
41624: LD_INT 46
41626: PUSH
41627: LD_INT 48
41629: PUSH
41630: LD_INT 47
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 1
41643: PPUSH
41644: LD_INT 6
41646: PPUSH
41647: CALL_OW 12
41651: ARRAY
41652: ST_TO_ADDR
// end ; end ;
41653: GO 41656
41655: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
41656: CALL_OW 45
41660: PPUSH
41661: LD_INT 1
41663: PPUSH
41664: CALL_OW 51
// end ;
41668: LD_VAR 0 1
41672: RET
// export hInvincible ; every 1 do
41673: GO 41675
41675: DISABLE
// hInvincible := [ ] ;
41676: LD_ADDR_EXP 138
41680: PUSH
41681: EMPTY
41682: ST_TO_ADDR
41683: END
// every 10 do var i ;
41684: GO 41686
41686: DISABLE
41687: LD_INT 0
41689: PPUSH
// begin enable ;
41690: ENABLE
// if not hInvincible then
41691: LD_EXP 138
41695: NOT
41696: IFFALSE 41700
// exit ;
41698: GO 41744
// for i in hInvincible do
41700: LD_ADDR_VAR 0 1
41704: PUSH
41705: LD_EXP 138
41709: PUSH
41710: FOR_IN
41711: IFFALSE 41742
// if GetLives ( i ) < 1000 then
41713: LD_VAR 0 1
41717: PPUSH
41718: CALL_OW 256
41722: PUSH
41723: LD_INT 1000
41725: LESS
41726: IFFALSE 41740
// SetLives ( i , 1000 ) ;
41728: LD_VAR 0 1
41732: PPUSH
41733: LD_INT 1000
41735: PPUSH
41736: CALL_OW 234
41740: GO 41710
41742: POP
41743: POP
// end ;
41744: PPOPN 1
41746: END
// export function hHackInvincible ; var i ; begin
41747: LD_INT 0
41749: PPUSH
41750: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
41751: LD_ADDR_VAR 0 2
41755: PUSH
41756: LD_INT 2
41758: PUSH
41759: LD_INT 21
41761: PUSH
41762: LD_INT 1
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 21
41771: PUSH
41772: LD_INT 2
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: LIST
41783: PPUSH
41784: CALL_OW 69
41788: PUSH
41789: FOR_IN
41790: IFFALSE 41851
// if IsSelected ( i ) then
41792: LD_VAR 0 2
41796: PPUSH
41797: CALL_OW 306
41801: IFFALSE 41849
// begin if i in hInvincible then
41803: LD_VAR 0 2
41807: PUSH
41808: LD_EXP 138
41812: IN
41813: IFFALSE 41833
// hInvincible := hInvincible diff i else
41815: LD_ADDR_EXP 138
41819: PUSH
41820: LD_EXP 138
41824: PUSH
41825: LD_VAR 0 2
41829: DIFF
41830: ST_TO_ADDR
41831: GO 41849
// hInvincible := hInvincible union i ;
41833: LD_ADDR_EXP 138
41837: PUSH
41838: LD_EXP 138
41842: PUSH
41843: LD_VAR 0 2
41847: UNION
41848: ST_TO_ADDR
// end ;
41849: GO 41789
41851: POP
41852: POP
// end ;
41853: LD_VAR 0 1
41857: RET
// export function hHackInvisible ; var i , j ; begin
41858: LD_INT 0
41860: PPUSH
41861: PPUSH
41862: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
41863: LD_ADDR_VAR 0 2
41867: PUSH
41868: LD_INT 21
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PPUSH
41878: CALL_OW 69
41882: PUSH
41883: FOR_IN
41884: IFFALSE 41908
// if IsSelected ( i ) then
41886: LD_VAR 0 2
41890: PPUSH
41891: CALL_OW 306
41895: IFFALSE 41906
// ComForceInvisible ( i ) ;
41897: LD_VAR 0 2
41901: PPUSH
41902: CALL_OW 496
41906: GO 41883
41908: POP
41909: POP
// end ;
41910: LD_VAR 0 1
41914: RET
// export function hHackChangeYourSide ; begin
41915: LD_INT 0
41917: PPUSH
// if your_side = 8 then
41918: LD_OWVAR 2
41922: PUSH
41923: LD_INT 8
41925: EQUAL
41926: IFFALSE 41938
// your_side := 0 else
41928: LD_ADDR_OWVAR 2
41932: PUSH
41933: LD_INT 0
41935: ST_TO_ADDR
41936: GO 41952
// your_side := your_side + 1 ;
41938: LD_ADDR_OWVAR 2
41942: PUSH
41943: LD_OWVAR 2
41947: PUSH
41948: LD_INT 1
41950: PLUS
41951: ST_TO_ADDR
// end ;
41952: LD_VAR 0 1
41956: RET
// export function hHackChangeUnitSide ; var i , j ; begin
41957: LD_INT 0
41959: PPUSH
41960: PPUSH
41961: PPUSH
// for i in all_units do
41962: LD_ADDR_VAR 0 2
41966: PUSH
41967: LD_OWVAR 3
41971: PUSH
41972: FOR_IN
41973: IFFALSE 42051
// if IsSelected ( i ) then
41975: LD_VAR 0 2
41979: PPUSH
41980: CALL_OW 306
41984: IFFALSE 42049
// begin j := GetSide ( i ) ;
41986: LD_ADDR_VAR 0 3
41990: PUSH
41991: LD_VAR 0 2
41995: PPUSH
41996: CALL_OW 255
42000: ST_TO_ADDR
// if j = 8 then
42001: LD_VAR 0 3
42005: PUSH
42006: LD_INT 8
42008: EQUAL
42009: IFFALSE 42021
// j := 0 else
42011: LD_ADDR_VAR 0 3
42015: PUSH
42016: LD_INT 0
42018: ST_TO_ADDR
42019: GO 42035
// j := j + 1 ;
42021: LD_ADDR_VAR 0 3
42025: PUSH
42026: LD_VAR 0 3
42030: PUSH
42031: LD_INT 1
42033: PLUS
42034: ST_TO_ADDR
// SetSide ( i , j ) ;
42035: LD_VAR 0 2
42039: PPUSH
42040: LD_VAR 0 3
42044: PPUSH
42045: CALL_OW 235
// end ;
42049: GO 41972
42051: POP
42052: POP
// end ;
42053: LD_VAR 0 1
42057: RET
// export function hHackFog ; begin
42058: LD_INT 0
42060: PPUSH
// FogOff ( true ) ;
42061: LD_INT 1
42063: PPUSH
42064: CALL_OW 344
// end ;
42068: LD_VAR 0 1
42072: RET
// export function hHackApeman ; begin
42073: LD_INT 0
42075: PPUSH
// uc_side := your_side ;
42076: LD_ADDR_OWVAR 20
42080: PUSH
42081: LD_OWVAR 2
42085: ST_TO_ADDR
// uc_nation := 0 ;
42086: LD_ADDR_OWVAR 21
42090: PUSH
42091: LD_INT 0
42093: ST_TO_ADDR
// hc_name :=  ;
42094: LD_ADDR_OWVAR 26
42098: PUSH
42099: LD_STRING 
42101: ST_TO_ADDR
// hc_gallery :=  ;
42102: LD_ADDR_OWVAR 33
42106: PUSH
42107: LD_STRING 
42109: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
42110: LD_ADDR_OWVAR 31
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: LD_INT 0
42123: PUSH
42124: LD_INT 0
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: ST_TO_ADDR
// hc_class := class_apeman ;
42133: LD_ADDR_OWVAR 28
42137: PUSH
42138: LD_INT 12
42140: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
42141: CALL_OW 44
42145: PPUSH
42146: LD_INT 1
42148: PPUSH
42149: CALL_OW 51
// end ;
42153: LD_VAR 0 1
42157: RET
// export function hHackBoom ; begin
42158: LD_INT 0
42160: PPUSH
// uc_side := your_side ;
42161: LD_ADDR_OWVAR 20
42165: PUSH
42166: LD_OWVAR 2
42170: ST_TO_ADDR
// uc_nation := 1 ;
42171: LD_ADDR_OWVAR 21
42175: PUSH
42176: LD_INT 1
42178: ST_TO_ADDR
// vc_chassis := us_morphling ;
42179: LD_ADDR_OWVAR 37
42183: PUSH
42184: LD_INT 5
42186: ST_TO_ADDR
// vc_engine := engine_siberite ;
42187: LD_ADDR_OWVAR 39
42191: PUSH
42192: LD_INT 3
42194: ST_TO_ADDR
// vc_control := control_computer ;
42195: LD_ADDR_OWVAR 38
42199: PUSH
42200: LD_INT 3
42202: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
42203: LD_ADDR_OWVAR 40
42207: PUSH
42208: LD_INT 8
42210: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
42211: CALL_OW 45
42215: PPUSH
42216: LD_INT 1
42218: PPUSH
42219: CALL_OW 51
// end ; end_of_file
42223: LD_VAR 0 1
42227: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
42228: LD_INT 0
42230: PPUSH
42231: PPUSH
42232: PPUSH
42233: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
42234: LD_VAR 0 1
42238: PPUSH
42239: CALL_OW 264
42243: PUSH
42244: LD_EXP 73
42248: EQUAL
42249: IFFALSE 42321
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
42251: LD_INT 68
42253: PPUSH
42254: LD_VAR 0 1
42258: PPUSH
42259: CALL_OW 255
42263: PPUSH
42264: CALL_OW 321
42268: PUSH
42269: LD_INT 2
42271: EQUAL
42272: IFFALSE 42284
// eff := 70 else
42274: LD_ADDR_VAR 0 4
42278: PUSH
42279: LD_INT 70
42281: ST_TO_ADDR
42282: GO 42292
// eff := 30 ;
42284: LD_ADDR_VAR 0 4
42288: PUSH
42289: LD_INT 30
42291: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
42292: LD_VAR 0 1
42296: PPUSH
42297: CALL_OW 250
42301: PPUSH
42302: LD_VAR 0 1
42306: PPUSH
42307: CALL_OW 251
42311: PPUSH
42312: LD_VAR 0 4
42316: PPUSH
42317: CALL_OW 495
// end ; end ;
42321: LD_VAR 0 2
42325: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
42326: LD_INT 0
42328: PPUSH
// end ;
42329: LD_VAR 0 4
42333: RET
// export function SOS_Command ( cmd ) ; begin
42334: LD_INT 0
42336: PPUSH
// end ;
42337: LD_VAR 0 2
42341: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
42342: LD_VAR 0 1
42346: PUSH
42347: LD_INT 254
42349: EQUAL
42350: PUSH
42351: LD_VAR 0 2
42355: PPUSH
42356: CALL_OW 264
42360: PUSH
42361: LD_EXP 71
42365: EQUAL
42366: AND
42367: PUSH
42368: LD_VAR 0 3
42372: PPUSH
42373: CALL_OW 263
42377: PUSH
42378: LD_INT 3
42380: EQUAL
42381: AND
42382: IFFALSE 42398
// HackDestroyVehicle ( unit , selectedUnit ) ;
42384: LD_VAR 0 2
42388: PPUSH
42389: LD_VAR 0 3
42393: PPUSH
42394: CALL 43905 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
42398: LD_VAR 0 1
42402: PUSH
42403: LD_INT 255
42405: EQUAL
42406: PUSH
42407: LD_VAR 0 2
42411: PPUSH
42412: CALL_OW 264
42416: PUSH
42417: LD_INT 14
42419: PUSH
42420: LD_INT 53
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: IN
42427: AND
42428: PUSH
42429: LD_VAR 0 4
42433: PPUSH
42434: LD_VAR 0 5
42438: PPUSH
42439: CALL_OW 488
42443: AND
42444: IFFALSE 42468
// CutTreeXYR ( unit , x , y , 12 ) ;
42446: LD_VAR 0 2
42450: PPUSH
42451: LD_VAR 0 4
42455: PPUSH
42456: LD_VAR 0 5
42460: PPUSH
42461: LD_INT 12
42463: PPUSH
42464: CALL 42471 0 4
// end ;
42468: PPOPN 5
42470: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
42471: LD_INT 0
42473: PPUSH
42474: PPUSH
42475: PPUSH
42476: PPUSH
42477: PPUSH
42478: PPUSH
42479: PPUSH
42480: PPUSH
42481: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
42482: LD_VAR 0 1
42486: NOT
42487: PUSH
42488: LD_VAR 0 2
42492: PPUSH
42493: LD_VAR 0 3
42497: PPUSH
42498: CALL_OW 488
42502: NOT
42503: OR
42504: PUSH
42505: LD_VAR 0 4
42509: NOT
42510: OR
42511: IFFALSE 42515
// exit ;
42513: GO 42855
// list := [ ] ;
42515: LD_ADDR_VAR 0 13
42519: PUSH
42520: EMPTY
42521: ST_TO_ADDR
// if x - r < 0 then
42522: LD_VAR 0 2
42526: PUSH
42527: LD_VAR 0 4
42531: MINUS
42532: PUSH
42533: LD_INT 0
42535: LESS
42536: IFFALSE 42548
// min_x := 0 else
42538: LD_ADDR_VAR 0 7
42542: PUSH
42543: LD_INT 0
42545: ST_TO_ADDR
42546: GO 42564
// min_x := x - r ;
42548: LD_ADDR_VAR 0 7
42552: PUSH
42553: LD_VAR 0 2
42557: PUSH
42558: LD_VAR 0 4
42562: MINUS
42563: ST_TO_ADDR
// if y - r < 0 then
42564: LD_VAR 0 3
42568: PUSH
42569: LD_VAR 0 4
42573: MINUS
42574: PUSH
42575: LD_INT 0
42577: LESS
42578: IFFALSE 42590
// min_y := 0 else
42580: LD_ADDR_VAR 0 8
42584: PUSH
42585: LD_INT 0
42587: ST_TO_ADDR
42588: GO 42606
// min_y := y - r ;
42590: LD_ADDR_VAR 0 8
42594: PUSH
42595: LD_VAR 0 3
42599: PUSH
42600: LD_VAR 0 4
42604: MINUS
42605: ST_TO_ADDR
// max_x := x + r ;
42606: LD_ADDR_VAR 0 9
42610: PUSH
42611: LD_VAR 0 2
42615: PUSH
42616: LD_VAR 0 4
42620: PLUS
42621: ST_TO_ADDR
// max_y := y + r ;
42622: LD_ADDR_VAR 0 10
42626: PUSH
42627: LD_VAR 0 3
42631: PUSH
42632: LD_VAR 0 4
42636: PLUS
42637: ST_TO_ADDR
// for _x = min_x to max_x do
42638: LD_ADDR_VAR 0 11
42642: PUSH
42643: DOUBLE
42644: LD_VAR 0 7
42648: DEC
42649: ST_TO_ADDR
42650: LD_VAR 0 9
42654: PUSH
42655: FOR_TO
42656: IFFALSE 42773
// for _y = min_y to max_y do
42658: LD_ADDR_VAR 0 12
42662: PUSH
42663: DOUBLE
42664: LD_VAR 0 8
42668: DEC
42669: ST_TO_ADDR
42670: LD_VAR 0 10
42674: PUSH
42675: FOR_TO
42676: IFFALSE 42769
// begin if not ValidHex ( _x , _y ) then
42678: LD_VAR 0 11
42682: PPUSH
42683: LD_VAR 0 12
42687: PPUSH
42688: CALL_OW 488
42692: NOT
42693: IFFALSE 42697
// continue ;
42695: GO 42675
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
42697: LD_VAR 0 11
42701: PPUSH
42702: LD_VAR 0 12
42706: PPUSH
42707: CALL_OW 351
42711: PUSH
42712: LD_VAR 0 11
42716: PPUSH
42717: LD_VAR 0 12
42721: PPUSH
42722: CALL_OW 554
42726: AND
42727: IFFALSE 42767
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
42729: LD_ADDR_VAR 0 13
42733: PUSH
42734: LD_VAR 0 13
42738: PPUSH
42739: LD_VAR 0 13
42743: PUSH
42744: LD_INT 1
42746: PLUS
42747: PPUSH
42748: LD_VAR 0 11
42752: PUSH
42753: LD_VAR 0 12
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PPUSH
42762: CALL_OW 2
42766: ST_TO_ADDR
// end ;
42767: GO 42675
42769: POP
42770: POP
42771: GO 42655
42773: POP
42774: POP
// if not list then
42775: LD_VAR 0 13
42779: NOT
42780: IFFALSE 42784
// exit ;
42782: GO 42855
// for i in list do
42784: LD_ADDR_VAR 0 6
42788: PUSH
42789: LD_VAR 0 13
42793: PUSH
42794: FOR_IN
42795: IFFALSE 42853
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
42797: LD_VAR 0 1
42801: PPUSH
42802: LD_STRING M
42804: PUSH
42805: LD_VAR 0 6
42809: PUSH
42810: LD_INT 1
42812: ARRAY
42813: PUSH
42814: LD_VAR 0 6
42818: PUSH
42819: LD_INT 2
42821: ARRAY
42822: PUSH
42823: LD_INT 0
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: PUSH
42844: EMPTY
42845: LIST
42846: PPUSH
42847: CALL_OW 447
42851: GO 42794
42853: POP
42854: POP
// end ;
42855: LD_VAR 0 5
42859: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
42860: LD_EXP 139
42864: NOT
42865: IFFALSE 42915
42867: GO 42869
42869: DISABLE
// begin initHack := true ;
42870: LD_ADDR_EXP 139
42874: PUSH
42875: LD_INT 1
42877: ST_TO_ADDR
// hackTanks := [ ] ;
42878: LD_ADDR_EXP 140
42882: PUSH
42883: EMPTY
42884: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
42885: LD_ADDR_EXP 141
42889: PUSH
42890: EMPTY
42891: ST_TO_ADDR
// hackLimit := 3 ;
42892: LD_ADDR_EXP 142
42896: PUSH
42897: LD_INT 3
42899: ST_TO_ADDR
// hackDist := 12 ;
42900: LD_ADDR_EXP 143
42904: PUSH
42905: LD_INT 12
42907: ST_TO_ADDR
// hackCounter := [ ] ;
42908: LD_ADDR_EXP 144
42912: PUSH
42913: EMPTY
42914: ST_TO_ADDR
// end ;
42915: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
42916: LD_EXP 139
42920: PUSH
42921: LD_INT 34
42923: PUSH
42924: LD_EXP 71
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PPUSH
42933: CALL_OW 69
42937: AND
42938: IFFALSE 43193
42940: GO 42942
42942: DISABLE
42943: LD_INT 0
42945: PPUSH
42946: PPUSH
// begin enable ;
42947: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
42948: LD_ADDR_VAR 0 1
42952: PUSH
42953: LD_INT 34
42955: PUSH
42956: LD_EXP 71
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PPUSH
42965: CALL_OW 69
42969: PUSH
42970: FOR_IN
42971: IFFALSE 43191
// begin if not i in hackTanks then
42973: LD_VAR 0 1
42977: PUSH
42978: LD_EXP 140
42982: IN
42983: NOT
42984: IFFALSE 43067
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
42986: LD_ADDR_EXP 140
42990: PUSH
42991: LD_EXP 140
42995: PPUSH
42996: LD_EXP 140
43000: PUSH
43001: LD_INT 1
43003: PLUS
43004: PPUSH
43005: LD_VAR 0 1
43009: PPUSH
43010: CALL_OW 1
43014: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
43015: LD_ADDR_EXP 141
43019: PUSH
43020: LD_EXP 141
43024: PPUSH
43025: LD_EXP 141
43029: PUSH
43030: LD_INT 1
43032: PLUS
43033: PPUSH
43034: EMPTY
43035: PPUSH
43036: CALL_OW 1
43040: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
43041: LD_ADDR_EXP 144
43045: PUSH
43046: LD_EXP 144
43050: PPUSH
43051: LD_EXP 144
43055: PUSH
43056: LD_INT 1
43058: PLUS
43059: PPUSH
43060: EMPTY
43061: PPUSH
43062: CALL_OW 1
43066: ST_TO_ADDR
// end ; if not IsOk ( i ) then
43067: LD_VAR 0 1
43071: PPUSH
43072: CALL_OW 302
43076: NOT
43077: IFFALSE 43090
// begin HackUnlinkAll ( i ) ;
43079: LD_VAR 0 1
43083: PPUSH
43084: CALL 43196 0 1
// continue ;
43088: GO 42970
// end ; HackCheckCapturedStatus ( i ) ;
43090: LD_VAR 0 1
43094: PPUSH
43095: CALL 43639 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
43099: LD_ADDR_VAR 0 2
43103: PUSH
43104: LD_INT 81
43106: PUSH
43107: LD_VAR 0 1
43111: PPUSH
43112: CALL_OW 255
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 33
43123: PUSH
43124: LD_INT 3
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 91
43133: PUSH
43134: LD_VAR 0 1
43138: PUSH
43139: LD_EXP 143
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 50
43151: PUSH
43152: EMPTY
43153: LIST
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: PPUSH
43161: CALL_OW 69
43165: ST_TO_ADDR
// if not tmp then
43166: LD_VAR 0 2
43170: NOT
43171: IFFALSE 43175
// continue ;
43173: GO 42970
// HackLink ( i , tmp ) ;
43175: LD_VAR 0 1
43179: PPUSH
43180: LD_VAR 0 2
43184: PPUSH
43185: CALL 43332 0 2
// end ;
43189: GO 42970
43191: POP
43192: POP
// end ;
43193: PPOPN 2
43195: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
43196: LD_INT 0
43198: PPUSH
43199: PPUSH
43200: PPUSH
// if not hack in hackTanks then
43201: LD_VAR 0 1
43205: PUSH
43206: LD_EXP 140
43210: IN
43211: NOT
43212: IFFALSE 43216
// exit ;
43214: GO 43327
// index := GetElementIndex ( hackTanks , hack ) ;
43216: LD_ADDR_VAR 0 4
43220: PUSH
43221: LD_EXP 140
43225: PPUSH
43226: LD_VAR 0 1
43230: PPUSH
43231: CALL 48747 0 2
43235: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
43236: LD_EXP 141
43240: PUSH
43241: LD_VAR 0 4
43245: ARRAY
43246: IFFALSE 43327
// begin for i in hackTanksCaptured [ index ] do
43248: LD_ADDR_VAR 0 3
43252: PUSH
43253: LD_EXP 141
43257: PUSH
43258: LD_VAR 0 4
43262: ARRAY
43263: PUSH
43264: FOR_IN
43265: IFFALSE 43291
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
43267: LD_VAR 0 3
43271: PUSH
43272: LD_INT 1
43274: ARRAY
43275: PPUSH
43276: LD_VAR 0 3
43280: PUSH
43281: LD_INT 2
43283: ARRAY
43284: PPUSH
43285: CALL_OW 235
43289: GO 43264
43291: POP
43292: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
43293: LD_ADDR_EXP 141
43297: PUSH
43298: LD_EXP 141
43302: PPUSH
43303: LD_VAR 0 4
43307: PPUSH
43308: EMPTY
43309: PPUSH
43310: CALL_OW 1
43314: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
43315: LD_VAR 0 1
43319: PPUSH
43320: LD_INT 0
43322: PPUSH
43323: CALL_OW 505
// end ; end ;
43327: LD_VAR 0 2
43331: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
43332: LD_INT 0
43334: PPUSH
43335: PPUSH
43336: PPUSH
// if not hack in hackTanks or not vehicles then
43337: LD_VAR 0 1
43341: PUSH
43342: LD_EXP 140
43346: IN
43347: NOT
43348: PUSH
43349: LD_VAR 0 2
43353: NOT
43354: OR
43355: IFFALSE 43359
// exit ;
43357: GO 43634
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
43359: LD_ADDR_VAR 0 2
43363: PUSH
43364: LD_VAR 0 1
43368: PPUSH
43369: LD_VAR 0 2
43373: PPUSH
43374: LD_INT 1
43376: PPUSH
43377: LD_INT 1
43379: PPUSH
43380: CALL 49397 0 4
43384: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
43385: LD_ADDR_VAR 0 5
43389: PUSH
43390: LD_EXP 140
43394: PPUSH
43395: LD_VAR 0 1
43399: PPUSH
43400: CALL 48747 0 2
43404: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
43405: LD_EXP 141
43409: PUSH
43410: LD_VAR 0 5
43414: ARRAY
43415: PUSH
43416: LD_EXP 142
43420: LESS
43421: IFFALSE 43610
// begin for i := 1 to vehicles do
43423: LD_ADDR_VAR 0 4
43427: PUSH
43428: DOUBLE
43429: LD_INT 1
43431: DEC
43432: ST_TO_ADDR
43433: LD_VAR 0 2
43437: PUSH
43438: FOR_TO
43439: IFFALSE 43608
// begin if hackTanksCaptured [ index ] = hackLimit then
43441: LD_EXP 141
43445: PUSH
43446: LD_VAR 0 5
43450: ARRAY
43451: PUSH
43452: LD_EXP 142
43456: EQUAL
43457: IFFALSE 43461
// break ;
43459: GO 43608
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
43461: LD_ADDR_EXP 144
43465: PUSH
43466: LD_EXP 144
43470: PPUSH
43471: LD_VAR 0 5
43475: PPUSH
43476: LD_EXP 144
43480: PUSH
43481: LD_VAR 0 5
43485: ARRAY
43486: PUSH
43487: LD_INT 1
43489: PLUS
43490: PPUSH
43491: CALL_OW 1
43495: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
43496: LD_ADDR_EXP 141
43500: PUSH
43501: LD_EXP 141
43505: PPUSH
43506: LD_VAR 0 5
43510: PUSH
43511: LD_EXP 141
43515: PUSH
43516: LD_VAR 0 5
43520: ARRAY
43521: PUSH
43522: LD_INT 1
43524: PLUS
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PPUSH
43530: LD_VAR 0 2
43534: PUSH
43535: LD_VAR 0 4
43539: ARRAY
43540: PUSH
43541: LD_VAR 0 2
43545: PUSH
43546: LD_VAR 0 4
43550: ARRAY
43551: PPUSH
43552: CALL_OW 255
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PPUSH
43561: CALL 48962 0 3
43565: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
43566: LD_VAR 0 2
43570: PUSH
43571: LD_VAR 0 4
43575: ARRAY
43576: PPUSH
43577: LD_VAR 0 1
43581: PPUSH
43582: CALL_OW 255
43586: PPUSH
43587: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
43591: LD_VAR 0 2
43595: PUSH
43596: LD_VAR 0 4
43600: ARRAY
43601: PPUSH
43602: CALL_OW 141
// end ;
43606: GO 43438
43608: POP
43609: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
43610: LD_VAR 0 1
43614: PPUSH
43615: LD_EXP 141
43619: PUSH
43620: LD_VAR 0 5
43624: ARRAY
43625: PUSH
43626: LD_INT 0
43628: PLUS
43629: PPUSH
43630: CALL_OW 505
// end ;
43634: LD_VAR 0 3
43638: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
43639: LD_INT 0
43641: PPUSH
43642: PPUSH
43643: PPUSH
43644: PPUSH
// if not hack in hackTanks then
43645: LD_VAR 0 1
43649: PUSH
43650: LD_EXP 140
43654: IN
43655: NOT
43656: IFFALSE 43660
// exit ;
43658: GO 43900
// index := GetElementIndex ( hackTanks , hack ) ;
43660: LD_ADDR_VAR 0 4
43664: PUSH
43665: LD_EXP 140
43669: PPUSH
43670: LD_VAR 0 1
43674: PPUSH
43675: CALL 48747 0 2
43679: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
43680: LD_ADDR_VAR 0 3
43684: PUSH
43685: DOUBLE
43686: LD_EXP 141
43690: PUSH
43691: LD_VAR 0 4
43695: ARRAY
43696: INC
43697: ST_TO_ADDR
43698: LD_INT 1
43700: PUSH
43701: FOR_DOWNTO
43702: IFFALSE 43874
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
43704: LD_ADDR_VAR 0 5
43708: PUSH
43709: LD_EXP 141
43713: PUSH
43714: LD_VAR 0 4
43718: ARRAY
43719: PUSH
43720: LD_VAR 0 3
43724: ARRAY
43725: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
43726: LD_VAR 0 5
43730: PUSH
43731: LD_INT 1
43733: ARRAY
43734: PPUSH
43735: CALL_OW 302
43739: NOT
43740: PUSH
43741: LD_VAR 0 5
43745: PUSH
43746: LD_INT 1
43748: ARRAY
43749: PPUSH
43750: CALL_OW 255
43754: PUSH
43755: LD_VAR 0 1
43759: PPUSH
43760: CALL_OW 255
43764: NONEQUAL
43765: OR
43766: IFFALSE 43872
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
43768: LD_VAR 0 5
43772: PUSH
43773: LD_INT 1
43775: ARRAY
43776: PPUSH
43777: CALL_OW 305
43781: PUSH
43782: LD_VAR 0 5
43786: PUSH
43787: LD_INT 1
43789: ARRAY
43790: PPUSH
43791: CALL_OW 255
43795: PUSH
43796: LD_VAR 0 1
43800: PPUSH
43801: CALL_OW 255
43805: EQUAL
43806: AND
43807: IFFALSE 43831
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
43809: LD_VAR 0 5
43813: PUSH
43814: LD_INT 1
43816: ARRAY
43817: PPUSH
43818: LD_VAR 0 5
43822: PUSH
43823: LD_INT 2
43825: ARRAY
43826: PPUSH
43827: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
43831: LD_ADDR_EXP 141
43835: PUSH
43836: LD_EXP 141
43840: PPUSH
43841: LD_VAR 0 4
43845: PPUSH
43846: LD_EXP 141
43850: PUSH
43851: LD_VAR 0 4
43855: ARRAY
43856: PPUSH
43857: LD_VAR 0 3
43861: PPUSH
43862: CALL_OW 3
43866: PPUSH
43867: CALL_OW 1
43871: ST_TO_ADDR
// end ; end ;
43872: GO 43701
43874: POP
43875: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
43876: LD_VAR 0 1
43880: PPUSH
43881: LD_EXP 141
43885: PUSH
43886: LD_VAR 0 4
43890: ARRAY
43891: PUSH
43892: LD_INT 0
43894: PLUS
43895: PPUSH
43896: CALL_OW 505
// end ;
43900: LD_VAR 0 2
43904: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
43905: LD_INT 0
43907: PPUSH
43908: PPUSH
43909: PPUSH
43910: PPUSH
// if not hack in hackTanks then
43911: LD_VAR 0 1
43915: PUSH
43916: LD_EXP 140
43920: IN
43921: NOT
43922: IFFALSE 43926
// exit ;
43924: GO 44011
// index := GetElementIndex ( hackTanks , hack ) ;
43926: LD_ADDR_VAR 0 5
43930: PUSH
43931: LD_EXP 140
43935: PPUSH
43936: LD_VAR 0 1
43940: PPUSH
43941: CALL 48747 0 2
43945: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
43946: LD_ADDR_VAR 0 4
43950: PUSH
43951: DOUBLE
43952: LD_INT 1
43954: DEC
43955: ST_TO_ADDR
43956: LD_EXP 141
43960: PUSH
43961: LD_VAR 0 5
43965: ARRAY
43966: PUSH
43967: FOR_TO
43968: IFFALSE 44009
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
43970: LD_EXP 141
43974: PUSH
43975: LD_VAR 0 5
43979: ARRAY
43980: PUSH
43981: LD_VAR 0 4
43985: ARRAY
43986: PUSH
43987: LD_INT 1
43989: ARRAY
43990: PUSH
43991: LD_VAR 0 2
43995: EQUAL
43996: IFFALSE 44007
// KillUnit ( vehicle ) ;
43998: LD_VAR 0 2
44002: PPUSH
44003: CALL_OW 66
44007: GO 43967
44009: POP
44010: POP
// end ; end_of_file
44011: LD_VAR 0 3
44015: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
44016: LD_INT 0
44018: PPUSH
44019: PPUSH
// if exist_mode then
44020: LD_VAR 0 2
44024: IFFALSE 44049
// unit := CreateCharacter ( prefix & ident ) else
44026: LD_ADDR_VAR 0 5
44030: PUSH
44031: LD_VAR 0 3
44035: PUSH
44036: LD_VAR 0 1
44040: STR
44041: PPUSH
44042: CALL_OW 34
44046: ST_TO_ADDR
44047: GO 44064
// unit := NewCharacter ( ident ) ;
44049: LD_ADDR_VAR 0 5
44053: PUSH
44054: LD_VAR 0 1
44058: PPUSH
44059: CALL_OW 25
44063: ST_TO_ADDR
// result := unit ;
44064: LD_ADDR_VAR 0 4
44068: PUSH
44069: LD_VAR 0 5
44073: ST_TO_ADDR
// end ;
44074: LD_VAR 0 4
44078: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
44079: LD_INT 0
44081: PPUSH
44082: PPUSH
// if not side or not nation then
44083: LD_VAR 0 1
44087: NOT
44088: PUSH
44089: LD_VAR 0 2
44093: NOT
44094: OR
44095: IFFALSE 44099
// exit ;
44097: GO 44863
// case nation of nation_american :
44099: LD_VAR 0 2
44103: PUSH
44104: LD_INT 1
44106: DOUBLE
44107: EQUAL
44108: IFTRUE 44112
44110: GO 44326
44112: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
44113: LD_ADDR_VAR 0 4
44117: PUSH
44118: LD_INT 35
44120: PUSH
44121: LD_INT 45
44123: PUSH
44124: LD_INT 46
44126: PUSH
44127: LD_INT 47
44129: PUSH
44130: LD_INT 82
44132: PUSH
44133: LD_INT 83
44135: PUSH
44136: LD_INT 84
44138: PUSH
44139: LD_INT 85
44141: PUSH
44142: LD_INT 86
44144: PUSH
44145: LD_INT 1
44147: PUSH
44148: LD_INT 2
44150: PUSH
44151: LD_INT 6
44153: PUSH
44154: LD_INT 15
44156: PUSH
44157: LD_INT 16
44159: PUSH
44160: LD_INT 7
44162: PUSH
44163: LD_INT 12
44165: PUSH
44166: LD_INT 13
44168: PUSH
44169: LD_INT 10
44171: PUSH
44172: LD_INT 14
44174: PUSH
44175: LD_INT 20
44177: PUSH
44178: LD_INT 21
44180: PUSH
44181: LD_INT 22
44183: PUSH
44184: LD_INT 25
44186: PUSH
44187: LD_INT 32
44189: PUSH
44190: LD_INT 27
44192: PUSH
44193: LD_INT 36
44195: PUSH
44196: LD_INT 69
44198: PUSH
44199: LD_INT 39
44201: PUSH
44202: LD_INT 34
44204: PUSH
44205: LD_INT 40
44207: PUSH
44208: LD_INT 48
44210: PUSH
44211: LD_INT 49
44213: PUSH
44214: LD_INT 50
44216: PUSH
44217: LD_INT 51
44219: PUSH
44220: LD_INT 52
44222: PUSH
44223: LD_INT 53
44225: PUSH
44226: LD_INT 54
44228: PUSH
44229: LD_INT 55
44231: PUSH
44232: LD_INT 56
44234: PUSH
44235: LD_INT 57
44237: PUSH
44238: LD_INT 58
44240: PUSH
44241: LD_INT 59
44243: PUSH
44244: LD_INT 60
44246: PUSH
44247: LD_INT 61
44249: PUSH
44250: LD_INT 62
44252: PUSH
44253: LD_INT 80
44255: PUSH
44256: LD_INT 82
44258: PUSH
44259: LD_INT 83
44261: PUSH
44262: LD_INT 84
44264: PUSH
44265: LD_INT 85
44267: PUSH
44268: LD_INT 86
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: ST_TO_ADDR
44324: GO 44787
44326: LD_INT 2
44328: DOUBLE
44329: EQUAL
44330: IFTRUE 44334
44332: GO 44556
44334: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
44335: LD_ADDR_VAR 0 4
44339: PUSH
44340: LD_INT 35
44342: PUSH
44343: LD_INT 45
44345: PUSH
44346: LD_INT 46
44348: PUSH
44349: LD_INT 47
44351: PUSH
44352: LD_INT 82
44354: PUSH
44355: LD_INT 83
44357: PUSH
44358: LD_INT 84
44360: PUSH
44361: LD_INT 85
44363: PUSH
44364: LD_INT 87
44366: PUSH
44367: LD_INT 70
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: LD_INT 11
44375: PUSH
44376: LD_INT 3
44378: PUSH
44379: LD_INT 4
44381: PUSH
44382: LD_INT 5
44384: PUSH
44385: LD_INT 6
44387: PUSH
44388: LD_INT 15
44390: PUSH
44391: LD_INT 18
44393: PUSH
44394: LD_INT 7
44396: PUSH
44397: LD_INT 17
44399: PUSH
44400: LD_INT 8
44402: PUSH
44403: LD_INT 20
44405: PUSH
44406: LD_INT 21
44408: PUSH
44409: LD_INT 22
44411: PUSH
44412: LD_INT 72
44414: PUSH
44415: LD_INT 26
44417: PUSH
44418: LD_INT 69
44420: PUSH
44421: LD_INT 39
44423: PUSH
44424: LD_INT 40
44426: PUSH
44427: LD_INT 41
44429: PUSH
44430: LD_INT 42
44432: PUSH
44433: LD_INT 43
44435: PUSH
44436: LD_INT 48
44438: PUSH
44439: LD_INT 49
44441: PUSH
44442: LD_INT 50
44444: PUSH
44445: LD_INT 51
44447: PUSH
44448: LD_INT 52
44450: PUSH
44451: LD_INT 53
44453: PUSH
44454: LD_INT 54
44456: PUSH
44457: LD_INT 55
44459: PUSH
44460: LD_INT 56
44462: PUSH
44463: LD_INT 60
44465: PUSH
44466: LD_INT 61
44468: PUSH
44469: LD_INT 62
44471: PUSH
44472: LD_INT 66
44474: PUSH
44475: LD_INT 67
44477: PUSH
44478: LD_INT 68
44480: PUSH
44481: LD_INT 81
44483: PUSH
44484: LD_INT 82
44486: PUSH
44487: LD_INT 83
44489: PUSH
44490: LD_INT 84
44492: PUSH
44493: LD_INT 85
44495: PUSH
44496: LD_INT 87
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: ST_TO_ADDR
44554: GO 44787
44556: LD_INT 3
44558: DOUBLE
44559: EQUAL
44560: IFTRUE 44564
44562: GO 44786
44564: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
44565: LD_ADDR_VAR 0 4
44569: PUSH
44570: LD_INT 46
44572: PUSH
44573: LD_INT 47
44575: PUSH
44576: LD_INT 1
44578: PUSH
44579: LD_INT 2
44581: PUSH
44582: LD_INT 82
44584: PUSH
44585: LD_INT 83
44587: PUSH
44588: LD_INT 84
44590: PUSH
44591: LD_INT 85
44593: PUSH
44594: LD_INT 86
44596: PUSH
44597: LD_INT 11
44599: PUSH
44600: LD_INT 9
44602: PUSH
44603: LD_INT 20
44605: PUSH
44606: LD_INT 19
44608: PUSH
44609: LD_INT 21
44611: PUSH
44612: LD_INT 24
44614: PUSH
44615: LD_INT 22
44617: PUSH
44618: LD_INT 25
44620: PUSH
44621: LD_INT 28
44623: PUSH
44624: LD_INT 29
44626: PUSH
44627: LD_INT 30
44629: PUSH
44630: LD_INT 31
44632: PUSH
44633: LD_INT 37
44635: PUSH
44636: LD_INT 38
44638: PUSH
44639: LD_INT 32
44641: PUSH
44642: LD_INT 27
44644: PUSH
44645: LD_INT 33
44647: PUSH
44648: LD_INT 69
44650: PUSH
44651: LD_INT 39
44653: PUSH
44654: LD_INT 34
44656: PUSH
44657: LD_INT 40
44659: PUSH
44660: LD_INT 71
44662: PUSH
44663: LD_INT 23
44665: PUSH
44666: LD_INT 44
44668: PUSH
44669: LD_INT 48
44671: PUSH
44672: LD_INT 49
44674: PUSH
44675: LD_INT 50
44677: PUSH
44678: LD_INT 51
44680: PUSH
44681: LD_INT 52
44683: PUSH
44684: LD_INT 53
44686: PUSH
44687: LD_INT 54
44689: PUSH
44690: LD_INT 55
44692: PUSH
44693: LD_INT 56
44695: PUSH
44696: LD_INT 57
44698: PUSH
44699: LD_INT 58
44701: PUSH
44702: LD_INT 59
44704: PUSH
44705: LD_INT 63
44707: PUSH
44708: LD_INT 64
44710: PUSH
44711: LD_INT 65
44713: PUSH
44714: LD_INT 82
44716: PUSH
44717: LD_INT 83
44719: PUSH
44720: LD_INT 84
44722: PUSH
44723: LD_INT 85
44725: PUSH
44726: LD_INT 86
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: ST_TO_ADDR
44784: GO 44787
44786: POP
// if state > - 1 and state < 3 then
44787: LD_VAR 0 3
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: GREATER
44796: PUSH
44797: LD_VAR 0 3
44801: PUSH
44802: LD_INT 3
44804: LESS
44805: AND
44806: IFFALSE 44863
// for i in result do
44808: LD_ADDR_VAR 0 5
44812: PUSH
44813: LD_VAR 0 4
44817: PUSH
44818: FOR_IN
44819: IFFALSE 44861
// if GetTech ( i , side ) <> state then
44821: LD_VAR 0 5
44825: PPUSH
44826: LD_VAR 0 1
44830: PPUSH
44831: CALL_OW 321
44835: PUSH
44836: LD_VAR 0 3
44840: NONEQUAL
44841: IFFALSE 44859
// result := result diff i ;
44843: LD_ADDR_VAR 0 4
44847: PUSH
44848: LD_VAR 0 4
44852: PUSH
44853: LD_VAR 0 5
44857: DIFF
44858: ST_TO_ADDR
44859: GO 44818
44861: POP
44862: POP
// end ;
44863: LD_VAR 0 4
44867: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
44868: LD_INT 0
44870: PPUSH
44871: PPUSH
44872: PPUSH
// result := true ;
44873: LD_ADDR_VAR 0 3
44877: PUSH
44878: LD_INT 1
44880: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
44881: LD_ADDR_VAR 0 5
44885: PUSH
44886: LD_VAR 0 2
44890: PPUSH
44891: CALL_OW 480
44895: ST_TO_ADDR
// if not tmp then
44896: LD_VAR 0 5
44900: NOT
44901: IFFALSE 44905
// exit ;
44903: GO 44954
// for i in tmp do
44905: LD_ADDR_VAR 0 4
44909: PUSH
44910: LD_VAR 0 5
44914: PUSH
44915: FOR_IN
44916: IFFALSE 44952
// if GetTech ( i , side ) <> state_researched then
44918: LD_VAR 0 4
44922: PPUSH
44923: LD_VAR 0 1
44927: PPUSH
44928: CALL_OW 321
44932: PUSH
44933: LD_INT 2
44935: NONEQUAL
44936: IFFALSE 44950
// begin result := false ;
44938: LD_ADDR_VAR 0 3
44942: PUSH
44943: LD_INT 0
44945: ST_TO_ADDR
// exit ;
44946: POP
44947: POP
44948: GO 44954
// end ;
44950: GO 44915
44952: POP
44953: POP
// end ;
44954: LD_VAR 0 3
44958: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
44959: LD_INT 0
44961: PPUSH
44962: PPUSH
44963: PPUSH
44964: PPUSH
44965: PPUSH
44966: PPUSH
44967: PPUSH
44968: PPUSH
44969: PPUSH
44970: PPUSH
44971: PPUSH
44972: PPUSH
44973: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
44974: LD_VAR 0 1
44978: NOT
44979: PUSH
44980: LD_VAR 0 1
44984: PPUSH
44985: CALL_OW 257
44989: PUSH
44990: LD_INT 9
44992: NONEQUAL
44993: OR
44994: IFFALSE 44998
// exit ;
44996: GO 45571
// side := GetSide ( unit ) ;
44998: LD_ADDR_VAR 0 9
45002: PUSH
45003: LD_VAR 0 1
45007: PPUSH
45008: CALL_OW 255
45012: ST_TO_ADDR
// tech_space := tech_spacanom ;
45013: LD_ADDR_VAR 0 12
45017: PUSH
45018: LD_INT 29
45020: ST_TO_ADDR
// tech_time := tech_taurad ;
45021: LD_ADDR_VAR 0 13
45025: PUSH
45026: LD_INT 28
45028: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
45029: LD_ADDR_VAR 0 11
45033: PUSH
45034: LD_VAR 0 1
45038: PPUSH
45039: CALL_OW 310
45043: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
45044: LD_VAR 0 11
45048: PPUSH
45049: CALL_OW 247
45053: PUSH
45054: LD_INT 2
45056: EQUAL
45057: IFFALSE 45061
// exit ;
45059: GO 45571
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45061: LD_ADDR_VAR 0 8
45065: PUSH
45066: LD_INT 81
45068: PUSH
45069: LD_VAR 0 9
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 3
45080: PUSH
45081: LD_INT 21
45083: PUSH
45084: LD_INT 3
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PPUSH
45099: CALL_OW 69
45103: ST_TO_ADDR
// if not tmp then
45104: LD_VAR 0 8
45108: NOT
45109: IFFALSE 45113
// exit ;
45111: GO 45571
// if in_unit then
45113: LD_VAR 0 11
45117: IFFALSE 45141
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
45119: LD_ADDR_VAR 0 10
45123: PUSH
45124: LD_VAR 0 8
45128: PPUSH
45129: LD_VAR 0 11
45133: PPUSH
45134: CALL_OW 74
45138: ST_TO_ADDR
45139: GO 45161
// enemy := NearestUnitToUnit ( tmp , unit ) ;
45141: LD_ADDR_VAR 0 10
45145: PUSH
45146: LD_VAR 0 8
45150: PPUSH
45151: LD_VAR 0 1
45155: PPUSH
45156: CALL_OW 74
45160: ST_TO_ADDR
// if not enemy then
45161: LD_VAR 0 10
45165: NOT
45166: IFFALSE 45170
// exit ;
45168: GO 45571
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
45170: LD_VAR 0 11
45174: PUSH
45175: LD_VAR 0 11
45179: PPUSH
45180: LD_VAR 0 10
45184: PPUSH
45185: CALL_OW 296
45189: PUSH
45190: LD_INT 13
45192: GREATER
45193: AND
45194: PUSH
45195: LD_VAR 0 1
45199: PPUSH
45200: LD_VAR 0 10
45204: PPUSH
45205: CALL_OW 296
45209: PUSH
45210: LD_INT 12
45212: GREATER
45213: OR
45214: IFFALSE 45218
// exit ;
45216: GO 45571
// missile := [ 1 ] ;
45218: LD_ADDR_VAR 0 14
45222: PUSH
45223: LD_INT 1
45225: PUSH
45226: EMPTY
45227: LIST
45228: ST_TO_ADDR
// if Researched ( side , tech_space ) then
45229: LD_VAR 0 9
45233: PPUSH
45234: LD_VAR 0 12
45238: PPUSH
45239: CALL_OW 325
45243: IFFALSE 45272
// missile := Insert ( missile , missile + 1 , 2 ) ;
45245: LD_ADDR_VAR 0 14
45249: PUSH
45250: LD_VAR 0 14
45254: PPUSH
45255: LD_VAR 0 14
45259: PUSH
45260: LD_INT 1
45262: PLUS
45263: PPUSH
45264: LD_INT 2
45266: PPUSH
45267: CALL_OW 2
45271: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
45272: LD_VAR 0 9
45276: PPUSH
45277: LD_VAR 0 13
45281: PPUSH
45282: CALL_OW 325
45286: PUSH
45287: LD_VAR 0 10
45291: PPUSH
45292: CALL_OW 255
45296: PPUSH
45297: LD_VAR 0 13
45301: PPUSH
45302: CALL_OW 325
45306: NOT
45307: AND
45308: IFFALSE 45337
// missile := Insert ( missile , missile + 1 , 3 ) ;
45310: LD_ADDR_VAR 0 14
45314: PUSH
45315: LD_VAR 0 14
45319: PPUSH
45320: LD_VAR 0 14
45324: PUSH
45325: LD_INT 1
45327: PLUS
45328: PPUSH
45329: LD_INT 3
45331: PPUSH
45332: CALL_OW 2
45336: ST_TO_ADDR
// if missile < 2 then
45337: LD_VAR 0 14
45341: PUSH
45342: LD_INT 2
45344: LESS
45345: IFFALSE 45349
// exit ;
45347: GO 45571
// x := GetX ( enemy ) ;
45349: LD_ADDR_VAR 0 4
45353: PUSH
45354: LD_VAR 0 10
45358: PPUSH
45359: CALL_OW 250
45363: ST_TO_ADDR
// y := GetY ( enemy ) ;
45364: LD_ADDR_VAR 0 5
45368: PUSH
45369: LD_VAR 0 10
45373: PPUSH
45374: CALL_OW 251
45378: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
45379: LD_ADDR_VAR 0 6
45383: PUSH
45384: LD_VAR 0 4
45388: PUSH
45389: LD_INT 1
45391: NEG
45392: PPUSH
45393: LD_INT 1
45395: PPUSH
45396: CALL_OW 12
45400: PLUS
45401: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
45402: LD_ADDR_VAR 0 7
45406: PUSH
45407: LD_VAR 0 5
45411: PUSH
45412: LD_INT 1
45414: NEG
45415: PPUSH
45416: LD_INT 1
45418: PPUSH
45419: CALL_OW 12
45423: PLUS
45424: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45425: LD_VAR 0 6
45429: PPUSH
45430: LD_VAR 0 7
45434: PPUSH
45435: CALL_OW 488
45439: NOT
45440: IFFALSE 45462
// begin _x := x ;
45442: LD_ADDR_VAR 0 6
45446: PUSH
45447: LD_VAR 0 4
45451: ST_TO_ADDR
// _y := y ;
45452: LD_ADDR_VAR 0 7
45456: PUSH
45457: LD_VAR 0 5
45461: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
45462: LD_ADDR_VAR 0 3
45466: PUSH
45467: LD_INT 1
45469: PPUSH
45470: LD_VAR 0 14
45474: PPUSH
45475: CALL_OW 12
45479: ST_TO_ADDR
// case i of 1 :
45480: LD_VAR 0 3
45484: PUSH
45485: LD_INT 1
45487: DOUBLE
45488: EQUAL
45489: IFTRUE 45493
45491: GO 45510
45493: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
45494: LD_VAR 0 1
45498: PPUSH
45499: LD_VAR 0 10
45503: PPUSH
45504: CALL_OW 115
45508: GO 45571
45510: LD_INT 2
45512: DOUBLE
45513: EQUAL
45514: IFTRUE 45518
45516: GO 45540
45518: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
45519: LD_VAR 0 1
45523: PPUSH
45524: LD_VAR 0 6
45528: PPUSH
45529: LD_VAR 0 7
45533: PPUSH
45534: CALL_OW 153
45538: GO 45571
45540: LD_INT 3
45542: DOUBLE
45543: EQUAL
45544: IFTRUE 45548
45546: GO 45570
45548: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
45549: LD_VAR 0 1
45553: PPUSH
45554: LD_VAR 0 6
45558: PPUSH
45559: LD_VAR 0 7
45563: PPUSH
45564: CALL_OW 154
45568: GO 45571
45570: POP
// end ;
45571: LD_VAR 0 2
45575: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
45576: LD_INT 0
45578: PPUSH
45579: PPUSH
45580: PPUSH
45581: PPUSH
45582: PPUSH
45583: PPUSH
// if not unit or not building then
45584: LD_VAR 0 1
45588: NOT
45589: PUSH
45590: LD_VAR 0 2
45594: NOT
45595: OR
45596: IFFALSE 45600
// exit ;
45598: GO 45758
// x := GetX ( building ) ;
45600: LD_ADDR_VAR 0 5
45604: PUSH
45605: LD_VAR 0 2
45609: PPUSH
45610: CALL_OW 250
45614: ST_TO_ADDR
// y := GetY ( building ) ;
45615: LD_ADDR_VAR 0 6
45619: PUSH
45620: LD_VAR 0 2
45624: PPUSH
45625: CALL_OW 251
45629: ST_TO_ADDR
// for i = 0 to 5 do
45630: LD_ADDR_VAR 0 4
45634: PUSH
45635: DOUBLE
45636: LD_INT 0
45638: DEC
45639: ST_TO_ADDR
45640: LD_INT 5
45642: PUSH
45643: FOR_TO
45644: IFFALSE 45756
// begin _x := ShiftX ( x , i , 3 ) ;
45646: LD_ADDR_VAR 0 7
45650: PUSH
45651: LD_VAR 0 5
45655: PPUSH
45656: LD_VAR 0 4
45660: PPUSH
45661: LD_INT 3
45663: PPUSH
45664: CALL_OW 272
45668: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
45669: LD_ADDR_VAR 0 8
45673: PUSH
45674: LD_VAR 0 6
45678: PPUSH
45679: LD_VAR 0 4
45683: PPUSH
45684: LD_INT 3
45686: PPUSH
45687: CALL_OW 273
45691: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45692: LD_VAR 0 7
45696: PPUSH
45697: LD_VAR 0 8
45701: PPUSH
45702: CALL_OW 488
45706: NOT
45707: IFFALSE 45711
// continue ;
45709: GO 45643
// if HexInfo ( _x , _y ) = 0 then
45711: LD_VAR 0 7
45715: PPUSH
45716: LD_VAR 0 8
45720: PPUSH
45721: CALL_OW 428
45725: PUSH
45726: LD_INT 0
45728: EQUAL
45729: IFFALSE 45754
// begin ComMoveXY ( unit , _x , _y ) ;
45731: LD_VAR 0 1
45735: PPUSH
45736: LD_VAR 0 7
45740: PPUSH
45741: LD_VAR 0 8
45745: PPUSH
45746: CALL_OW 111
// exit ;
45750: POP
45751: POP
45752: GO 45758
// end ; end ;
45754: GO 45643
45756: POP
45757: POP
// end ;
45758: LD_VAR 0 3
45762: RET
// export function ScanBase ( side , base_area ) ; begin
45763: LD_INT 0
45765: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
45766: LD_ADDR_VAR 0 3
45770: PUSH
45771: LD_VAR 0 2
45775: PPUSH
45776: LD_INT 81
45778: PUSH
45779: LD_VAR 0 1
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PPUSH
45788: CALL_OW 70
45792: ST_TO_ADDR
// end ;
45793: LD_VAR 0 3
45797: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
45798: LD_INT 0
45800: PPUSH
45801: PPUSH
45802: PPUSH
45803: PPUSH
// result := false ;
45804: LD_ADDR_VAR 0 2
45808: PUSH
45809: LD_INT 0
45811: ST_TO_ADDR
// side := GetSide ( unit ) ;
45812: LD_ADDR_VAR 0 3
45816: PUSH
45817: LD_VAR 0 1
45821: PPUSH
45822: CALL_OW 255
45826: ST_TO_ADDR
// nat := GetNation ( unit ) ;
45827: LD_ADDR_VAR 0 4
45831: PUSH
45832: LD_VAR 0 1
45836: PPUSH
45837: CALL_OW 248
45841: ST_TO_ADDR
// case nat of 1 :
45842: LD_VAR 0 4
45846: PUSH
45847: LD_INT 1
45849: DOUBLE
45850: EQUAL
45851: IFTRUE 45855
45853: GO 45866
45855: POP
// tech := tech_lassight ; 2 :
45856: LD_ADDR_VAR 0 5
45860: PUSH
45861: LD_INT 12
45863: ST_TO_ADDR
45864: GO 45905
45866: LD_INT 2
45868: DOUBLE
45869: EQUAL
45870: IFTRUE 45874
45872: GO 45885
45874: POP
// tech := tech_mortar ; 3 :
45875: LD_ADDR_VAR 0 5
45879: PUSH
45880: LD_INT 41
45882: ST_TO_ADDR
45883: GO 45905
45885: LD_INT 3
45887: DOUBLE
45888: EQUAL
45889: IFTRUE 45893
45891: GO 45904
45893: POP
// tech := tech_bazooka ; end ;
45894: LD_ADDR_VAR 0 5
45898: PUSH
45899: LD_INT 44
45901: ST_TO_ADDR
45902: GO 45905
45904: POP
// if Researched ( side , tech ) then
45905: LD_VAR 0 3
45909: PPUSH
45910: LD_VAR 0 5
45914: PPUSH
45915: CALL_OW 325
45919: IFFALSE 45946
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
45921: LD_ADDR_VAR 0 2
45925: PUSH
45926: LD_INT 5
45928: PUSH
45929: LD_INT 8
45931: PUSH
45932: LD_INT 9
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: LIST
45939: PUSH
45940: LD_VAR 0 4
45944: ARRAY
45945: ST_TO_ADDR
// end ;
45946: LD_VAR 0 2
45950: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
45951: LD_INT 0
45953: PPUSH
45954: PPUSH
45955: PPUSH
// if not mines then
45956: LD_VAR 0 2
45960: NOT
45961: IFFALSE 45965
// exit ;
45963: GO 46109
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45965: LD_ADDR_VAR 0 5
45969: PUSH
45970: LD_INT 81
45972: PUSH
45973: LD_VAR 0 1
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 3
45984: PUSH
45985: LD_INT 21
45987: PUSH
45988: LD_INT 3
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PPUSH
46003: CALL_OW 69
46007: ST_TO_ADDR
// for i in mines do
46008: LD_ADDR_VAR 0 4
46012: PUSH
46013: LD_VAR 0 2
46017: PUSH
46018: FOR_IN
46019: IFFALSE 46107
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
46021: LD_VAR 0 4
46025: PUSH
46026: LD_INT 1
46028: ARRAY
46029: PPUSH
46030: LD_VAR 0 4
46034: PUSH
46035: LD_INT 2
46037: ARRAY
46038: PPUSH
46039: CALL_OW 458
46043: NOT
46044: IFFALSE 46048
// continue ;
46046: GO 46018
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
46048: LD_VAR 0 4
46052: PUSH
46053: LD_INT 1
46055: ARRAY
46056: PPUSH
46057: LD_VAR 0 4
46061: PUSH
46062: LD_INT 2
46064: ARRAY
46065: PPUSH
46066: CALL_OW 428
46070: PUSH
46071: LD_VAR 0 5
46075: IN
46076: IFFALSE 46105
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
46078: LD_VAR 0 4
46082: PUSH
46083: LD_INT 1
46085: ARRAY
46086: PPUSH
46087: LD_VAR 0 4
46091: PUSH
46092: LD_INT 2
46094: ARRAY
46095: PPUSH
46096: LD_VAR 0 1
46100: PPUSH
46101: CALL_OW 456
// end ;
46105: GO 46018
46107: POP
46108: POP
// end ;
46109: LD_VAR 0 3
46113: RET
// export function Count ( array ) ; var i ; begin
46114: LD_INT 0
46116: PPUSH
46117: PPUSH
// result := 0 ;
46118: LD_ADDR_VAR 0 2
46122: PUSH
46123: LD_INT 0
46125: ST_TO_ADDR
// for i in array do
46126: LD_ADDR_VAR 0 3
46130: PUSH
46131: LD_VAR 0 1
46135: PUSH
46136: FOR_IN
46137: IFFALSE 46161
// if i then
46139: LD_VAR 0 3
46143: IFFALSE 46159
// result := result + 1 ;
46145: LD_ADDR_VAR 0 2
46149: PUSH
46150: LD_VAR 0 2
46154: PUSH
46155: LD_INT 1
46157: PLUS
46158: ST_TO_ADDR
46159: GO 46136
46161: POP
46162: POP
// end ;
46163: LD_VAR 0 2
46167: RET
// export function IsEmpty ( building ) ; begin
46168: LD_INT 0
46170: PPUSH
// if not building then
46171: LD_VAR 0 1
46175: NOT
46176: IFFALSE 46180
// exit ;
46178: GO 46223
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
46180: LD_ADDR_VAR 0 2
46184: PUSH
46185: LD_VAR 0 1
46189: PUSH
46190: LD_INT 22
46192: PUSH
46193: LD_VAR 0 1
46197: PPUSH
46198: CALL_OW 255
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 58
46209: PUSH
46210: EMPTY
46211: LIST
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PPUSH
46217: CALL_OW 69
46221: IN
46222: ST_TO_ADDR
// end ;
46223: LD_VAR 0 2
46227: RET
// export function IsNotFull ( building ) ; begin
46228: LD_INT 0
46230: PPUSH
// if not building then
46231: LD_VAR 0 1
46235: NOT
46236: IFFALSE 46240
// exit ;
46238: GO 46259
// result := UnitsInside ( building ) < 6 ;
46240: LD_ADDR_VAR 0 2
46244: PUSH
46245: LD_VAR 0 1
46249: PPUSH
46250: CALL_OW 313
46254: PUSH
46255: LD_INT 6
46257: LESS
46258: ST_TO_ADDR
// end ;
46259: LD_VAR 0 2
46263: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
46264: LD_INT 0
46266: PPUSH
46267: PPUSH
46268: PPUSH
46269: PPUSH
// tmp := [ ] ;
46270: LD_ADDR_VAR 0 3
46274: PUSH
46275: EMPTY
46276: ST_TO_ADDR
// list := [ ] ;
46277: LD_ADDR_VAR 0 5
46281: PUSH
46282: EMPTY
46283: ST_TO_ADDR
// for i = 16 to 25 do
46284: LD_ADDR_VAR 0 4
46288: PUSH
46289: DOUBLE
46290: LD_INT 16
46292: DEC
46293: ST_TO_ADDR
46294: LD_INT 25
46296: PUSH
46297: FOR_TO
46298: IFFALSE 46371
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
46300: LD_ADDR_VAR 0 3
46304: PUSH
46305: LD_VAR 0 3
46309: PUSH
46310: LD_INT 22
46312: PUSH
46313: LD_VAR 0 1
46317: PPUSH
46318: CALL_OW 255
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 91
46329: PUSH
46330: LD_VAR 0 1
46334: PUSH
46335: LD_INT 6
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 30
46345: PUSH
46346: LD_VAR 0 4
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: LIST
46359: PUSH
46360: EMPTY
46361: LIST
46362: PPUSH
46363: CALL_OW 69
46367: ADD
46368: ST_TO_ADDR
46369: GO 46297
46371: POP
46372: POP
// for i = 1 to tmp do
46373: LD_ADDR_VAR 0 4
46377: PUSH
46378: DOUBLE
46379: LD_INT 1
46381: DEC
46382: ST_TO_ADDR
46383: LD_VAR 0 3
46387: PUSH
46388: FOR_TO
46389: IFFALSE 46477
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
46391: LD_ADDR_VAR 0 5
46395: PUSH
46396: LD_VAR 0 5
46400: PUSH
46401: LD_VAR 0 3
46405: PUSH
46406: LD_VAR 0 4
46410: ARRAY
46411: PPUSH
46412: CALL_OW 266
46416: PUSH
46417: LD_VAR 0 3
46421: PUSH
46422: LD_VAR 0 4
46426: ARRAY
46427: PPUSH
46428: CALL_OW 250
46432: PUSH
46433: LD_VAR 0 3
46437: PUSH
46438: LD_VAR 0 4
46442: ARRAY
46443: PPUSH
46444: CALL_OW 251
46448: PUSH
46449: LD_VAR 0 3
46453: PUSH
46454: LD_VAR 0 4
46458: ARRAY
46459: PPUSH
46460: CALL_OW 254
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: PUSH
46471: EMPTY
46472: LIST
46473: ADD
46474: ST_TO_ADDR
46475: GO 46388
46477: POP
46478: POP
// result := list ;
46479: LD_ADDR_VAR 0 2
46483: PUSH
46484: LD_VAR 0 5
46488: ST_TO_ADDR
// end ;
46489: LD_VAR 0 2
46493: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
46494: LD_INT 0
46496: PPUSH
46497: PPUSH
46498: PPUSH
46499: PPUSH
46500: PPUSH
46501: PPUSH
46502: PPUSH
// if not factory then
46503: LD_VAR 0 1
46507: NOT
46508: IFFALSE 46512
// exit ;
46510: GO 47105
// if control = control_apeman then
46512: LD_VAR 0 4
46516: PUSH
46517: LD_INT 5
46519: EQUAL
46520: IFFALSE 46629
// begin tmp := UnitsInside ( factory ) ;
46522: LD_ADDR_VAR 0 8
46526: PUSH
46527: LD_VAR 0 1
46531: PPUSH
46532: CALL_OW 313
46536: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
46537: LD_VAR 0 8
46541: PPUSH
46542: LD_INT 25
46544: PUSH
46545: LD_INT 12
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PPUSH
46552: CALL_OW 72
46556: NOT
46557: IFFALSE 46567
// control := control_manual ;
46559: LD_ADDR_VAR 0 4
46563: PUSH
46564: LD_INT 1
46566: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
46567: LD_ADDR_VAR 0 8
46571: PUSH
46572: LD_VAR 0 1
46576: PPUSH
46577: CALL 46264 0 1
46581: ST_TO_ADDR
// if tmp then
46582: LD_VAR 0 8
46586: IFFALSE 46629
// begin for i in tmp do
46588: LD_ADDR_VAR 0 7
46592: PUSH
46593: LD_VAR 0 8
46597: PUSH
46598: FOR_IN
46599: IFFALSE 46627
// if i [ 1 ] = b_ext_radio then
46601: LD_VAR 0 7
46605: PUSH
46606: LD_INT 1
46608: ARRAY
46609: PUSH
46610: LD_INT 22
46612: EQUAL
46613: IFFALSE 46625
// begin control := control_remote ;
46615: LD_ADDR_VAR 0 4
46619: PUSH
46620: LD_INT 2
46622: ST_TO_ADDR
// break ;
46623: GO 46627
// end ;
46625: GO 46598
46627: POP
46628: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
46629: LD_VAR 0 1
46633: PPUSH
46634: LD_VAR 0 2
46638: PPUSH
46639: LD_VAR 0 3
46643: PPUSH
46644: LD_VAR 0 4
46648: PPUSH
46649: LD_VAR 0 5
46653: PPUSH
46654: CALL_OW 448
46658: IFFALSE 46693
// begin result := [ chassis , engine , control , weapon ] ;
46660: LD_ADDR_VAR 0 6
46664: PUSH
46665: LD_VAR 0 2
46669: PUSH
46670: LD_VAR 0 3
46674: PUSH
46675: LD_VAR 0 4
46679: PUSH
46680: LD_VAR 0 5
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: ST_TO_ADDR
// exit ;
46691: GO 47105
// end ; _chassis := AvailableChassisList ( factory ) ;
46693: LD_ADDR_VAR 0 9
46697: PUSH
46698: LD_VAR 0 1
46702: PPUSH
46703: CALL_OW 475
46707: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
46708: LD_ADDR_VAR 0 11
46712: PUSH
46713: LD_VAR 0 1
46717: PPUSH
46718: CALL_OW 476
46722: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
46723: LD_ADDR_VAR 0 12
46727: PUSH
46728: LD_VAR 0 1
46732: PPUSH
46733: CALL_OW 477
46737: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
46738: LD_ADDR_VAR 0 10
46742: PUSH
46743: LD_VAR 0 1
46747: PPUSH
46748: CALL_OW 478
46752: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
46753: LD_VAR 0 9
46757: NOT
46758: PUSH
46759: LD_VAR 0 11
46763: NOT
46764: OR
46765: PUSH
46766: LD_VAR 0 12
46770: NOT
46771: OR
46772: PUSH
46773: LD_VAR 0 10
46777: NOT
46778: OR
46779: IFFALSE 46814
// begin result := [ chassis , engine , control , weapon ] ;
46781: LD_ADDR_VAR 0 6
46785: PUSH
46786: LD_VAR 0 2
46790: PUSH
46791: LD_VAR 0 3
46795: PUSH
46796: LD_VAR 0 4
46800: PUSH
46801: LD_VAR 0 5
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: ST_TO_ADDR
// exit ;
46812: GO 47105
// end ; if not chassis in _chassis then
46814: LD_VAR 0 2
46818: PUSH
46819: LD_VAR 0 9
46823: IN
46824: NOT
46825: IFFALSE 46851
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
46827: LD_ADDR_VAR 0 2
46831: PUSH
46832: LD_VAR 0 9
46836: PUSH
46837: LD_INT 1
46839: PPUSH
46840: LD_VAR 0 9
46844: PPUSH
46845: CALL_OW 12
46849: ARRAY
46850: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
46851: LD_VAR 0 2
46855: PPUSH
46856: LD_VAR 0 3
46860: PPUSH
46861: CALL 47110 0 2
46865: NOT
46866: IFFALSE 46925
// repeat engine := _engine [ 1 ] ;
46868: LD_ADDR_VAR 0 3
46872: PUSH
46873: LD_VAR 0 11
46877: PUSH
46878: LD_INT 1
46880: ARRAY
46881: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
46882: LD_ADDR_VAR 0 11
46886: PUSH
46887: LD_VAR 0 11
46891: PPUSH
46892: LD_INT 1
46894: PPUSH
46895: CALL_OW 3
46899: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
46900: LD_VAR 0 2
46904: PPUSH
46905: LD_VAR 0 3
46909: PPUSH
46910: CALL 47110 0 2
46914: PUSH
46915: LD_VAR 0 11
46919: PUSH
46920: EMPTY
46921: EQUAL
46922: OR
46923: IFFALSE 46868
// if not control in _control then
46925: LD_VAR 0 4
46929: PUSH
46930: LD_VAR 0 12
46934: IN
46935: NOT
46936: IFFALSE 46962
// control := _control [ rand ( 1 , _control ) ] ;
46938: LD_ADDR_VAR 0 4
46942: PUSH
46943: LD_VAR 0 12
46947: PUSH
46948: LD_INT 1
46950: PPUSH
46951: LD_VAR 0 12
46955: PPUSH
46956: CALL_OW 12
46960: ARRAY
46961: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
46962: LD_VAR 0 2
46966: PPUSH
46967: LD_VAR 0 5
46971: PPUSH
46972: CALL 47330 0 2
46976: NOT
46977: IFFALSE 47036
// repeat weapon := _weapon [ 1 ] ;
46979: LD_ADDR_VAR 0 5
46983: PUSH
46984: LD_VAR 0 10
46988: PUSH
46989: LD_INT 1
46991: ARRAY
46992: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
46993: LD_ADDR_VAR 0 10
46997: PUSH
46998: LD_VAR 0 10
47002: PPUSH
47003: LD_INT 1
47005: PPUSH
47006: CALL_OW 3
47010: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
47011: LD_VAR 0 2
47015: PPUSH
47016: LD_VAR 0 5
47020: PPUSH
47021: CALL 47330 0 2
47025: PUSH
47026: LD_VAR 0 10
47030: PUSH
47031: EMPTY
47032: EQUAL
47033: OR
47034: IFFALSE 46979
// result := [ ] ;
47036: LD_ADDR_VAR 0 6
47040: PUSH
47041: EMPTY
47042: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
47043: LD_VAR 0 1
47047: PPUSH
47048: LD_VAR 0 2
47052: PPUSH
47053: LD_VAR 0 3
47057: PPUSH
47058: LD_VAR 0 4
47062: PPUSH
47063: LD_VAR 0 5
47067: PPUSH
47068: CALL_OW 448
47072: IFFALSE 47105
// result := [ chassis , engine , control , weapon ] ;
47074: LD_ADDR_VAR 0 6
47078: PUSH
47079: LD_VAR 0 2
47083: PUSH
47084: LD_VAR 0 3
47088: PUSH
47089: LD_VAR 0 4
47093: PUSH
47094: LD_VAR 0 5
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: ST_TO_ADDR
// end ;
47105: LD_VAR 0 6
47109: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
47110: LD_INT 0
47112: PPUSH
// if not chassis or not engine then
47113: LD_VAR 0 1
47117: NOT
47118: PUSH
47119: LD_VAR 0 2
47123: NOT
47124: OR
47125: IFFALSE 47129
// exit ;
47127: GO 47325
// case engine of engine_solar :
47129: LD_VAR 0 2
47133: PUSH
47134: LD_INT 2
47136: DOUBLE
47137: EQUAL
47138: IFTRUE 47142
47140: GO 47180
47142: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
47143: LD_ADDR_VAR 0 3
47147: PUSH
47148: LD_INT 11
47150: PUSH
47151: LD_INT 12
47153: PUSH
47154: LD_INT 13
47156: PUSH
47157: LD_INT 14
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: LD_INT 3
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: ST_TO_ADDR
47178: GO 47309
47180: LD_INT 1
47182: DOUBLE
47183: EQUAL
47184: IFTRUE 47188
47186: GO 47250
47188: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
47189: LD_ADDR_VAR 0 3
47193: PUSH
47194: LD_INT 11
47196: PUSH
47197: LD_INT 12
47199: PUSH
47200: LD_INT 13
47202: PUSH
47203: LD_INT 14
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: LD_INT 2
47211: PUSH
47212: LD_INT 3
47214: PUSH
47215: LD_INT 4
47217: PUSH
47218: LD_INT 5
47220: PUSH
47221: LD_INT 21
47223: PUSH
47224: LD_INT 23
47226: PUSH
47227: LD_INT 22
47229: PUSH
47230: LD_INT 24
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: ST_TO_ADDR
47248: GO 47309
47250: LD_INT 3
47252: DOUBLE
47253: EQUAL
47254: IFTRUE 47258
47256: GO 47308
47258: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
47259: LD_ADDR_VAR 0 3
47263: PUSH
47264: LD_INT 13
47266: PUSH
47267: LD_INT 14
47269: PUSH
47270: LD_INT 2
47272: PUSH
47273: LD_INT 3
47275: PUSH
47276: LD_INT 4
47278: PUSH
47279: LD_INT 5
47281: PUSH
47282: LD_INT 21
47284: PUSH
47285: LD_INT 22
47287: PUSH
47288: LD_INT 23
47290: PUSH
47291: LD_INT 24
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: ST_TO_ADDR
47306: GO 47309
47308: POP
// result := ( chassis in result ) ;
47309: LD_ADDR_VAR 0 3
47313: PUSH
47314: LD_VAR 0 1
47318: PUSH
47319: LD_VAR 0 3
47323: IN
47324: ST_TO_ADDR
// end ;
47325: LD_VAR 0 3
47329: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
47330: LD_INT 0
47332: PPUSH
// if not chassis or not weapon then
47333: LD_VAR 0 1
47337: NOT
47338: PUSH
47339: LD_VAR 0 2
47343: NOT
47344: OR
47345: IFFALSE 47349
// exit ;
47347: GO 48375
// case weapon of us_machine_gun :
47349: LD_VAR 0 2
47353: PUSH
47354: LD_INT 2
47356: DOUBLE
47357: EQUAL
47358: IFTRUE 47362
47360: GO 47392
47362: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
47363: LD_ADDR_VAR 0 3
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: LD_INT 2
47373: PUSH
47374: LD_INT 3
47376: PUSH
47377: LD_INT 4
47379: PUSH
47380: LD_INT 5
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: ST_TO_ADDR
47390: GO 48359
47392: LD_INT 3
47394: DOUBLE
47395: EQUAL
47396: IFTRUE 47400
47398: GO 47430
47400: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
47401: LD_ADDR_VAR 0 3
47405: PUSH
47406: LD_INT 1
47408: PUSH
47409: LD_INT 2
47411: PUSH
47412: LD_INT 3
47414: PUSH
47415: LD_INT 4
47417: PUSH
47418: LD_INT 5
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: ST_TO_ADDR
47428: GO 48359
47430: LD_INT 11
47432: DOUBLE
47433: EQUAL
47434: IFTRUE 47438
47436: GO 47468
47438: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
47439: LD_ADDR_VAR 0 3
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: LD_INT 2
47449: PUSH
47450: LD_INT 3
47452: PUSH
47453: LD_INT 4
47455: PUSH
47456: LD_INT 5
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: ST_TO_ADDR
47466: GO 48359
47468: LD_INT 4
47470: DOUBLE
47471: EQUAL
47472: IFTRUE 47476
47474: GO 47502
47476: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
47477: LD_ADDR_VAR 0 3
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: LD_INT 3
47487: PUSH
47488: LD_INT 4
47490: PUSH
47491: LD_INT 5
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: ST_TO_ADDR
47500: GO 48359
47502: LD_INT 5
47504: DOUBLE
47505: EQUAL
47506: IFTRUE 47510
47508: GO 47536
47510: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
47511: LD_ADDR_VAR 0 3
47515: PUSH
47516: LD_INT 2
47518: PUSH
47519: LD_INT 3
47521: PUSH
47522: LD_INT 4
47524: PUSH
47525: LD_INT 5
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: ST_TO_ADDR
47534: GO 48359
47536: LD_INT 9
47538: DOUBLE
47539: EQUAL
47540: IFTRUE 47544
47542: GO 47570
47544: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
47545: LD_ADDR_VAR 0 3
47549: PUSH
47550: LD_INT 2
47552: PUSH
47553: LD_INT 3
47555: PUSH
47556: LD_INT 4
47558: PUSH
47559: LD_INT 5
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: ST_TO_ADDR
47568: GO 48359
47570: LD_INT 7
47572: DOUBLE
47573: EQUAL
47574: IFTRUE 47578
47576: GO 47604
47578: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
47579: LD_ADDR_VAR 0 3
47583: PUSH
47584: LD_INT 2
47586: PUSH
47587: LD_INT 3
47589: PUSH
47590: LD_INT 4
47592: PUSH
47593: LD_INT 5
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: ST_TO_ADDR
47602: GO 48359
47604: LD_INT 12
47606: DOUBLE
47607: EQUAL
47608: IFTRUE 47612
47610: GO 47638
47612: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
47613: LD_ADDR_VAR 0 3
47617: PUSH
47618: LD_INT 2
47620: PUSH
47621: LD_INT 3
47623: PUSH
47624: LD_INT 4
47626: PUSH
47627: LD_INT 5
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: ST_TO_ADDR
47636: GO 48359
47638: LD_INT 13
47640: DOUBLE
47641: EQUAL
47642: IFTRUE 47646
47644: GO 47672
47646: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
47647: LD_ADDR_VAR 0 3
47651: PUSH
47652: LD_INT 2
47654: PUSH
47655: LD_INT 3
47657: PUSH
47658: LD_INT 4
47660: PUSH
47661: LD_INT 5
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: ST_TO_ADDR
47670: GO 48359
47672: LD_INT 14
47674: DOUBLE
47675: EQUAL
47676: IFTRUE 47680
47678: GO 47698
47680: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
47681: LD_ADDR_VAR 0 3
47685: PUSH
47686: LD_INT 4
47688: PUSH
47689: LD_INT 5
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: ST_TO_ADDR
47696: GO 48359
47698: LD_INT 6
47700: DOUBLE
47701: EQUAL
47702: IFTRUE 47706
47704: GO 47724
47706: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
47707: LD_ADDR_VAR 0 3
47711: PUSH
47712: LD_INT 4
47714: PUSH
47715: LD_INT 5
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: ST_TO_ADDR
47722: GO 48359
47724: LD_INT 10
47726: DOUBLE
47727: EQUAL
47728: IFTRUE 47732
47730: GO 47750
47732: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
47733: LD_ADDR_VAR 0 3
47737: PUSH
47738: LD_INT 4
47740: PUSH
47741: LD_INT 5
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: ST_TO_ADDR
47748: GO 48359
47750: LD_INT 22
47752: DOUBLE
47753: EQUAL
47754: IFTRUE 47758
47756: GO 47784
47758: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
47759: LD_ADDR_VAR 0 3
47763: PUSH
47764: LD_INT 11
47766: PUSH
47767: LD_INT 12
47769: PUSH
47770: LD_INT 13
47772: PUSH
47773: LD_INT 14
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: ST_TO_ADDR
47782: GO 48359
47784: LD_INT 23
47786: DOUBLE
47787: EQUAL
47788: IFTRUE 47792
47790: GO 47818
47792: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
47793: LD_ADDR_VAR 0 3
47797: PUSH
47798: LD_INT 11
47800: PUSH
47801: LD_INT 12
47803: PUSH
47804: LD_INT 13
47806: PUSH
47807: LD_INT 14
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: ST_TO_ADDR
47816: GO 48359
47818: LD_INT 24
47820: DOUBLE
47821: EQUAL
47822: IFTRUE 47826
47824: GO 47852
47826: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
47827: LD_ADDR_VAR 0 3
47831: PUSH
47832: LD_INT 11
47834: PUSH
47835: LD_INT 12
47837: PUSH
47838: LD_INT 13
47840: PUSH
47841: LD_INT 14
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: ST_TO_ADDR
47850: GO 48359
47852: LD_INT 30
47854: DOUBLE
47855: EQUAL
47856: IFTRUE 47860
47858: GO 47886
47860: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
47861: LD_ADDR_VAR 0 3
47865: PUSH
47866: LD_INT 11
47868: PUSH
47869: LD_INT 12
47871: PUSH
47872: LD_INT 13
47874: PUSH
47875: LD_INT 14
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: ST_TO_ADDR
47884: GO 48359
47886: LD_INT 25
47888: DOUBLE
47889: EQUAL
47890: IFTRUE 47894
47892: GO 47912
47894: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
47895: LD_ADDR_VAR 0 3
47899: PUSH
47900: LD_INT 13
47902: PUSH
47903: LD_INT 14
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: ST_TO_ADDR
47910: GO 48359
47912: LD_INT 27
47914: DOUBLE
47915: EQUAL
47916: IFTRUE 47920
47918: GO 47938
47920: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
47921: LD_ADDR_VAR 0 3
47925: PUSH
47926: LD_INT 13
47928: PUSH
47929: LD_INT 14
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: ST_TO_ADDR
47936: GO 48359
47938: LD_INT 28
47940: DOUBLE
47941: EQUAL
47942: IFTRUE 47946
47944: GO 47964
47946: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
47947: LD_ADDR_VAR 0 3
47951: PUSH
47952: LD_INT 13
47954: PUSH
47955: LD_INT 14
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: ST_TO_ADDR
47962: GO 48359
47964: LD_INT 29
47966: DOUBLE
47967: EQUAL
47968: IFTRUE 47972
47970: GO 47990
47972: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
47973: LD_ADDR_VAR 0 3
47977: PUSH
47978: LD_INT 13
47980: PUSH
47981: LD_INT 14
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: ST_TO_ADDR
47988: GO 48359
47990: LD_INT 31
47992: DOUBLE
47993: EQUAL
47994: IFTRUE 47998
47996: GO 48016
47998: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
47999: LD_ADDR_VAR 0 3
48003: PUSH
48004: LD_INT 13
48006: PUSH
48007: LD_INT 14
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: ST_TO_ADDR
48014: GO 48359
48016: LD_INT 26
48018: DOUBLE
48019: EQUAL
48020: IFTRUE 48024
48022: GO 48042
48024: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
48025: LD_ADDR_VAR 0 3
48029: PUSH
48030: LD_INT 13
48032: PUSH
48033: LD_INT 14
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: ST_TO_ADDR
48040: GO 48359
48042: LD_INT 42
48044: DOUBLE
48045: EQUAL
48046: IFTRUE 48050
48048: GO 48076
48050: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
48051: LD_ADDR_VAR 0 3
48055: PUSH
48056: LD_INT 21
48058: PUSH
48059: LD_INT 22
48061: PUSH
48062: LD_INT 23
48064: PUSH
48065: LD_INT 24
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: ST_TO_ADDR
48074: GO 48359
48076: LD_INT 43
48078: DOUBLE
48079: EQUAL
48080: IFTRUE 48084
48082: GO 48110
48084: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
48085: LD_ADDR_VAR 0 3
48089: PUSH
48090: LD_INT 21
48092: PUSH
48093: LD_INT 22
48095: PUSH
48096: LD_INT 23
48098: PUSH
48099: LD_INT 24
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: ST_TO_ADDR
48108: GO 48359
48110: LD_INT 44
48112: DOUBLE
48113: EQUAL
48114: IFTRUE 48118
48116: GO 48144
48118: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
48119: LD_ADDR_VAR 0 3
48123: PUSH
48124: LD_INT 21
48126: PUSH
48127: LD_INT 22
48129: PUSH
48130: LD_INT 23
48132: PUSH
48133: LD_INT 24
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: ST_TO_ADDR
48142: GO 48359
48144: LD_INT 45
48146: DOUBLE
48147: EQUAL
48148: IFTRUE 48152
48150: GO 48178
48152: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
48153: LD_ADDR_VAR 0 3
48157: PUSH
48158: LD_INT 21
48160: PUSH
48161: LD_INT 22
48163: PUSH
48164: LD_INT 23
48166: PUSH
48167: LD_INT 24
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: ST_TO_ADDR
48176: GO 48359
48178: LD_INT 49
48180: DOUBLE
48181: EQUAL
48182: IFTRUE 48186
48184: GO 48212
48186: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
48187: LD_ADDR_VAR 0 3
48191: PUSH
48192: LD_INT 21
48194: PUSH
48195: LD_INT 22
48197: PUSH
48198: LD_INT 23
48200: PUSH
48201: LD_INT 24
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: ST_TO_ADDR
48210: GO 48359
48212: LD_INT 51
48214: DOUBLE
48215: EQUAL
48216: IFTRUE 48220
48218: GO 48246
48220: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
48221: LD_ADDR_VAR 0 3
48225: PUSH
48226: LD_INT 21
48228: PUSH
48229: LD_INT 22
48231: PUSH
48232: LD_INT 23
48234: PUSH
48235: LD_INT 24
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: ST_TO_ADDR
48244: GO 48359
48246: LD_INT 52
48248: DOUBLE
48249: EQUAL
48250: IFTRUE 48254
48252: GO 48280
48254: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
48255: LD_ADDR_VAR 0 3
48259: PUSH
48260: LD_INT 21
48262: PUSH
48263: LD_INT 22
48265: PUSH
48266: LD_INT 23
48268: PUSH
48269: LD_INT 24
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: ST_TO_ADDR
48278: GO 48359
48280: LD_INT 53
48282: DOUBLE
48283: EQUAL
48284: IFTRUE 48288
48286: GO 48306
48288: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
48289: LD_ADDR_VAR 0 3
48293: PUSH
48294: LD_INT 23
48296: PUSH
48297: LD_INT 24
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: ST_TO_ADDR
48304: GO 48359
48306: LD_INT 46
48308: DOUBLE
48309: EQUAL
48310: IFTRUE 48314
48312: GO 48332
48314: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
48315: LD_ADDR_VAR 0 3
48319: PUSH
48320: LD_INT 23
48322: PUSH
48323: LD_INT 24
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: ST_TO_ADDR
48330: GO 48359
48332: LD_INT 47
48334: DOUBLE
48335: EQUAL
48336: IFTRUE 48340
48338: GO 48358
48340: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
48341: LD_ADDR_VAR 0 3
48345: PUSH
48346: LD_INT 23
48348: PUSH
48349: LD_INT 24
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: ST_TO_ADDR
48356: GO 48359
48358: POP
// result := ( chassis in result ) ;
48359: LD_ADDR_VAR 0 3
48363: PUSH
48364: LD_VAR 0 1
48368: PUSH
48369: LD_VAR 0 3
48373: IN
48374: ST_TO_ADDR
// end ;
48375: LD_VAR 0 3
48379: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
48380: LD_INT 0
48382: PPUSH
48383: PPUSH
48384: PPUSH
48385: PPUSH
48386: PPUSH
48387: PPUSH
48388: PPUSH
// result := array ;
48389: LD_ADDR_VAR 0 5
48393: PUSH
48394: LD_VAR 0 1
48398: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
48399: LD_VAR 0 1
48403: NOT
48404: PUSH
48405: LD_VAR 0 2
48409: NOT
48410: OR
48411: PUSH
48412: LD_VAR 0 3
48416: NOT
48417: OR
48418: PUSH
48419: LD_VAR 0 2
48423: PUSH
48424: LD_VAR 0 1
48428: GREATER
48429: OR
48430: PUSH
48431: LD_VAR 0 3
48435: PUSH
48436: LD_VAR 0 1
48440: GREATER
48441: OR
48442: IFFALSE 48446
// exit ;
48444: GO 48742
// if direction then
48446: LD_VAR 0 4
48450: IFFALSE 48514
// begin d := 1 ;
48452: LD_ADDR_VAR 0 9
48456: PUSH
48457: LD_INT 1
48459: ST_TO_ADDR
// if i_from > i_to then
48460: LD_VAR 0 2
48464: PUSH
48465: LD_VAR 0 3
48469: GREATER
48470: IFFALSE 48496
// length := ( array - i_from ) + i_to else
48472: LD_ADDR_VAR 0 11
48476: PUSH
48477: LD_VAR 0 1
48481: PUSH
48482: LD_VAR 0 2
48486: MINUS
48487: PUSH
48488: LD_VAR 0 3
48492: PLUS
48493: ST_TO_ADDR
48494: GO 48512
// length := i_to - i_from ;
48496: LD_ADDR_VAR 0 11
48500: PUSH
48501: LD_VAR 0 3
48505: PUSH
48506: LD_VAR 0 2
48510: MINUS
48511: ST_TO_ADDR
// end else
48512: GO 48575
// begin d := - 1 ;
48514: LD_ADDR_VAR 0 9
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: ST_TO_ADDR
// if i_from > i_to then
48523: LD_VAR 0 2
48527: PUSH
48528: LD_VAR 0 3
48532: GREATER
48533: IFFALSE 48553
// length := i_from - i_to else
48535: LD_ADDR_VAR 0 11
48539: PUSH
48540: LD_VAR 0 2
48544: PUSH
48545: LD_VAR 0 3
48549: MINUS
48550: ST_TO_ADDR
48551: GO 48575
// length := ( array - i_to ) + i_from ;
48553: LD_ADDR_VAR 0 11
48557: PUSH
48558: LD_VAR 0 1
48562: PUSH
48563: LD_VAR 0 3
48567: MINUS
48568: PUSH
48569: LD_VAR 0 2
48573: PLUS
48574: ST_TO_ADDR
// end ; if not length then
48575: LD_VAR 0 11
48579: NOT
48580: IFFALSE 48584
// exit ;
48582: GO 48742
// tmp := array ;
48584: LD_ADDR_VAR 0 10
48588: PUSH
48589: LD_VAR 0 1
48593: ST_TO_ADDR
// for i = 1 to length do
48594: LD_ADDR_VAR 0 6
48598: PUSH
48599: DOUBLE
48600: LD_INT 1
48602: DEC
48603: ST_TO_ADDR
48604: LD_VAR 0 11
48608: PUSH
48609: FOR_TO
48610: IFFALSE 48730
// begin for j = 1 to array do
48612: LD_ADDR_VAR 0 7
48616: PUSH
48617: DOUBLE
48618: LD_INT 1
48620: DEC
48621: ST_TO_ADDR
48622: LD_VAR 0 1
48626: PUSH
48627: FOR_TO
48628: IFFALSE 48716
// begin k := j + d ;
48630: LD_ADDR_VAR 0 8
48634: PUSH
48635: LD_VAR 0 7
48639: PUSH
48640: LD_VAR 0 9
48644: PLUS
48645: ST_TO_ADDR
// if k > array then
48646: LD_VAR 0 8
48650: PUSH
48651: LD_VAR 0 1
48655: GREATER
48656: IFFALSE 48666
// k := 1 ;
48658: LD_ADDR_VAR 0 8
48662: PUSH
48663: LD_INT 1
48665: ST_TO_ADDR
// if not k then
48666: LD_VAR 0 8
48670: NOT
48671: IFFALSE 48683
// k := array ;
48673: LD_ADDR_VAR 0 8
48677: PUSH
48678: LD_VAR 0 1
48682: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
48683: LD_ADDR_VAR 0 10
48687: PUSH
48688: LD_VAR 0 10
48692: PPUSH
48693: LD_VAR 0 8
48697: PPUSH
48698: LD_VAR 0 1
48702: PUSH
48703: LD_VAR 0 7
48707: ARRAY
48708: PPUSH
48709: CALL_OW 1
48713: ST_TO_ADDR
// end ;
48714: GO 48627
48716: POP
48717: POP
// array := tmp ;
48718: LD_ADDR_VAR 0 1
48722: PUSH
48723: LD_VAR 0 10
48727: ST_TO_ADDR
// end ;
48728: GO 48609
48730: POP
48731: POP
// result := array ;
48732: LD_ADDR_VAR 0 5
48736: PUSH
48737: LD_VAR 0 1
48741: ST_TO_ADDR
// end ;
48742: LD_VAR 0 5
48746: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
48747: LD_INT 0
48749: PPUSH
48750: PPUSH
// result := 0 ;
48751: LD_ADDR_VAR 0 3
48755: PUSH
48756: LD_INT 0
48758: ST_TO_ADDR
// if not array or not value in array then
48759: LD_VAR 0 1
48763: NOT
48764: PUSH
48765: LD_VAR 0 2
48769: PUSH
48770: LD_VAR 0 1
48774: IN
48775: NOT
48776: OR
48777: IFFALSE 48781
// exit ;
48779: GO 48835
// for i = 1 to array do
48781: LD_ADDR_VAR 0 4
48785: PUSH
48786: DOUBLE
48787: LD_INT 1
48789: DEC
48790: ST_TO_ADDR
48791: LD_VAR 0 1
48795: PUSH
48796: FOR_TO
48797: IFFALSE 48833
// if value = array [ i ] then
48799: LD_VAR 0 2
48803: PUSH
48804: LD_VAR 0 1
48808: PUSH
48809: LD_VAR 0 4
48813: ARRAY
48814: EQUAL
48815: IFFALSE 48831
// begin result := i ;
48817: LD_ADDR_VAR 0 3
48821: PUSH
48822: LD_VAR 0 4
48826: ST_TO_ADDR
// exit ;
48827: POP
48828: POP
48829: GO 48835
// end ;
48831: GO 48796
48833: POP
48834: POP
// end ;
48835: LD_VAR 0 3
48839: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
48840: LD_INT 0
48842: PPUSH
// vc_chassis := chassis ;
48843: LD_ADDR_OWVAR 37
48847: PUSH
48848: LD_VAR 0 1
48852: ST_TO_ADDR
// vc_engine := engine ;
48853: LD_ADDR_OWVAR 39
48857: PUSH
48858: LD_VAR 0 2
48862: ST_TO_ADDR
// vc_control := control ;
48863: LD_ADDR_OWVAR 38
48867: PUSH
48868: LD_VAR 0 3
48872: ST_TO_ADDR
// vc_weapon := weapon ;
48873: LD_ADDR_OWVAR 40
48877: PUSH
48878: LD_VAR 0 4
48882: ST_TO_ADDR
// vc_fuel_battery := fuel ;
48883: LD_ADDR_OWVAR 41
48887: PUSH
48888: LD_VAR 0 5
48892: ST_TO_ADDR
// end ;
48893: LD_VAR 0 6
48897: RET
// export function WantPlant ( unit ) ; var task ; begin
48898: LD_INT 0
48900: PPUSH
48901: PPUSH
// result := false ;
48902: LD_ADDR_VAR 0 2
48906: PUSH
48907: LD_INT 0
48909: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
48910: LD_ADDR_VAR 0 3
48914: PUSH
48915: LD_VAR 0 1
48919: PPUSH
48920: CALL_OW 437
48924: ST_TO_ADDR
// if task then
48925: LD_VAR 0 3
48929: IFFALSE 48957
// if task [ 1 ] [ 1 ] = p then
48931: LD_VAR 0 3
48935: PUSH
48936: LD_INT 1
48938: ARRAY
48939: PUSH
48940: LD_INT 1
48942: ARRAY
48943: PUSH
48944: LD_STRING p
48946: EQUAL
48947: IFFALSE 48957
// result := true ;
48949: LD_ADDR_VAR 0 2
48953: PUSH
48954: LD_INT 1
48956: ST_TO_ADDR
// end ;
48957: LD_VAR 0 2
48961: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
48962: LD_INT 0
48964: PPUSH
48965: PPUSH
48966: PPUSH
48967: PPUSH
// if pos < 1 then
48968: LD_VAR 0 2
48972: PUSH
48973: LD_INT 1
48975: LESS
48976: IFFALSE 48980
// exit ;
48978: GO 49283
// if pos = 1 then
48980: LD_VAR 0 2
48984: PUSH
48985: LD_INT 1
48987: EQUAL
48988: IFFALSE 49021
// result := Replace ( arr , pos [ 1 ] , value ) else
48990: LD_ADDR_VAR 0 4
48994: PUSH
48995: LD_VAR 0 1
48999: PPUSH
49000: LD_VAR 0 2
49004: PUSH
49005: LD_INT 1
49007: ARRAY
49008: PPUSH
49009: LD_VAR 0 3
49013: PPUSH
49014: CALL_OW 1
49018: ST_TO_ADDR
49019: GO 49283
// begin tmp := arr ;
49021: LD_ADDR_VAR 0 6
49025: PUSH
49026: LD_VAR 0 1
49030: ST_TO_ADDR
// s_arr := [ tmp ] ;
49031: LD_ADDR_VAR 0 7
49035: PUSH
49036: LD_VAR 0 6
49040: PUSH
49041: EMPTY
49042: LIST
49043: ST_TO_ADDR
// for i = 1 to pos - 1 do
49044: LD_ADDR_VAR 0 5
49048: PUSH
49049: DOUBLE
49050: LD_INT 1
49052: DEC
49053: ST_TO_ADDR
49054: LD_VAR 0 2
49058: PUSH
49059: LD_INT 1
49061: MINUS
49062: PUSH
49063: FOR_TO
49064: IFFALSE 49109
// begin tmp := tmp [ pos [ i ] ] ;
49066: LD_ADDR_VAR 0 6
49070: PUSH
49071: LD_VAR 0 6
49075: PUSH
49076: LD_VAR 0 2
49080: PUSH
49081: LD_VAR 0 5
49085: ARRAY
49086: ARRAY
49087: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
49088: LD_ADDR_VAR 0 7
49092: PUSH
49093: LD_VAR 0 7
49097: PUSH
49098: LD_VAR 0 6
49102: PUSH
49103: EMPTY
49104: LIST
49105: ADD
49106: ST_TO_ADDR
// end ;
49107: GO 49063
49109: POP
49110: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
49111: LD_ADDR_VAR 0 6
49115: PUSH
49116: LD_VAR 0 6
49120: PPUSH
49121: LD_VAR 0 2
49125: PUSH
49126: LD_VAR 0 2
49130: ARRAY
49131: PPUSH
49132: LD_VAR 0 3
49136: PPUSH
49137: CALL_OW 1
49141: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
49142: LD_ADDR_VAR 0 7
49146: PUSH
49147: LD_VAR 0 7
49151: PPUSH
49152: LD_VAR 0 7
49156: PPUSH
49157: LD_VAR 0 6
49161: PPUSH
49162: CALL_OW 1
49166: ST_TO_ADDR
// for i = s_arr downto 2 do
49167: LD_ADDR_VAR 0 5
49171: PUSH
49172: DOUBLE
49173: LD_VAR 0 7
49177: INC
49178: ST_TO_ADDR
49179: LD_INT 2
49181: PUSH
49182: FOR_DOWNTO
49183: IFFALSE 49267
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
49185: LD_ADDR_VAR 0 6
49189: PUSH
49190: LD_VAR 0 7
49194: PUSH
49195: LD_VAR 0 5
49199: PUSH
49200: LD_INT 1
49202: MINUS
49203: ARRAY
49204: PPUSH
49205: LD_VAR 0 2
49209: PUSH
49210: LD_VAR 0 5
49214: PUSH
49215: LD_INT 1
49217: MINUS
49218: ARRAY
49219: PPUSH
49220: LD_VAR 0 7
49224: PUSH
49225: LD_VAR 0 5
49229: ARRAY
49230: PPUSH
49231: CALL_OW 1
49235: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
49236: LD_ADDR_VAR 0 7
49240: PUSH
49241: LD_VAR 0 7
49245: PPUSH
49246: LD_VAR 0 5
49250: PUSH
49251: LD_INT 1
49253: MINUS
49254: PPUSH
49255: LD_VAR 0 6
49259: PPUSH
49260: CALL_OW 1
49264: ST_TO_ADDR
// end ;
49265: GO 49182
49267: POP
49268: POP
// result := s_arr [ 1 ] ;
49269: LD_ADDR_VAR 0 4
49273: PUSH
49274: LD_VAR 0 7
49278: PUSH
49279: LD_INT 1
49281: ARRAY
49282: ST_TO_ADDR
// end ; end ;
49283: LD_VAR 0 4
49287: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
49288: LD_INT 0
49290: PPUSH
49291: PPUSH
// if not list then
49292: LD_VAR 0 1
49296: NOT
49297: IFFALSE 49301
// exit ;
49299: GO 49392
// i := list [ pos1 ] ;
49301: LD_ADDR_VAR 0 5
49305: PUSH
49306: LD_VAR 0 1
49310: PUSH
49311: LD_VAR 0 2
49315: ARRAY
49316: ST_TO_ADDR
// if not i then
49317: LD_VAR 0 5
49321: NOT
49322: IFFALSE 49326
// exit ;
49324: GO 49392
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
49326: LD_ADDR_VAR 0 1
49330: PUSH
49331: LD_VAR 0 1
49335: PPUSH
49336: LD_VAR 0 2
49340: PPUSH
49341: LD_VAR 0 1
49345: PUSH
49346: LD_VAR 0 3
49350: ARRAY
49351: PPUSH
49352: CALL_OW 1
49356: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
49357: LD_ADDR_VAR 0 1
49361: PUSH
49362: LD_VAR 0 1
49366: PPUSH
49367: LD_VAR 0 3
49371: PPUSH
49372: LD_VAR 0 5
49376: PPUSH
49377: CALL_OW 1
49381: ST_TO_ADDR
// result := list ;
49382: LD_ADDR_VAR 0 4
49386: PUSH
49387: LD_VAR 0 1
49391: ST_TO_ADDR
// end ;
49392: LD_VAR 0 4
49396: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
49397: LD_INT 0
49399: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
49400: LD_ADDR_VAR 0 5
49404: PUSH
49405: LD_VAR 0 1
49409: PPUSH
49410: CALL_OW 250
49414: PPUSH
49415: LD_VAR 0 1
49419: PPUSH
49420: CALL_OW 251
49424: PPUSH
49425: LD_VAR 0 2
49429: PPUSH
49430: LD_VAR 0 3
49434: PPUSH
49435: LD_VAR 0 4
49439: PPUSH
49440: CALL 49450 0 5
49444: ST_TO_ADDR
// end ;
49445: LD_VAR 0 5
49449: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
49450: LD_INT 0
49452: PPUSH
49453: PPUSH
49454: PPUSH
49455: PPUSH
// if not list then
49456: LD_VAR 0 3
49460: NOT
49461: IFFALSE 49465
// exit ;
49463: GO 49853
// result := [ ] ;
49465: LD_ADDR_VAR 0 6
49469: PUSH
49470: EMPTY
49471: ST_TO_ADDR
// for i in list do
49472: LD_ADDR_VAR 0 7
49476: PUSH
49477: LD_VAR 0 3
49481: PUSH
49482: FOR_IN
49483: IFFALSE 49685
// begin tmp := GetDistUnitXY ( i , x , y ) ;
49485: LD_ADDR_VAR 0 9
49489: PUSH
49490: LD_VAR 0 7
49494: PPUSH
49495: LD_VAR 0 1
49499: PPUSH
49500: LD_VAR 0 2
49504: PPUSH
49505: CALL_OW 297
49509: ST_TO_ADDR
// if not result then
49510: LD_VAR 0 6
49514: NOT
49515: IFFALSE 49541
// result := [ [ i , tmp ] ] else
49517: LD_ADDR_VAR 0 6
49521: PUSH
49522: LD_VAR 0 7
49526: PUSH
49527: LD_VAR 0 9
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: EMPTY
49537: LIST
49538: ST_TO_ADDR
49539: GO 49683
// begin if result [ result ] [ 2 ] < tmp then
49541: LD_VAR 0 6
49545: PUSH
49546: LD_VAR 0 6
49550: ARRAY
49551: PUSH
49552: LD_INT 2
49554: ARRAY
49555: PUSH
49556: LD_VAR 0 9
49560: LESS
49561: IFFALSE 49603
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
49563: LD_ADDR_VAR 0 6
49567: PUSH
49568: LD_VAR 0 6
49572: PPUSH
49573: LD_VAR 0 6
49577: PUSH
49578: LD_INT 1
49580: PLUS
49581: PPUSH
49582: LD_VAR 0 7
49586: PUSH
49587: LD_VAR 0 9
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PPUSH
49596: CALL_OW 2
49600: ST_TO_ADDR
49601: GO 49683
// for j = 1 to result do
49603: LD_ADDR_VAR 0 8
49607: PUSH
49608: DOUBLE
49609: LD_INT 1
49611: DEC
49612: ST_TO_ADDR
49613: LD_VAR 0 6
49617: PUSH
49618: FOR_TO
49619: IFFALSE 49681
// begin if tmp < result [ j ] [ 2 ] then
49621: LD_VAR 0 9
49625: PUSH
49626: LD_VAR 0 6
49630: PUSH
49631: LD_VAR 0 8
49635: ARRAY
49636: PUSH
49637: LD_INT 2
49639: ARRAY
49640: LESS
49641: IFFALSE 49679
// begin result := Insert ( result , j , [ i , tmp ] ) ;
49643: LD_ADDR_VAR 0 6
49647: PUSH
49648: LD_VAR 0 6
49652: PPUSH
49653: LD_VAR 0 8
49657: PPUSH
49658: LD_VAR 0 7
49662: PUSH
49663: LD_VAR 0 9
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PPUSH
49672: CALL_OW 2
49676: ST_TO_ADDR
// break ;
49677: GO 49681
// end ; end ;
49679: GO 49618
49681: POP
49682: POP
// end ; end ;
49683: GO 49482
49685: POP
49686: POP
// if result and not asc then
49687: LD_VAR 0 6
49691: PUSH
49692: LD_VAR 0 4
49696: NOT
49697: AND
49698: IFFALSE 49773
// begin tmp := result ;
49700: LD_ADDR_VAR 0 9
49704: PUSH
49705: LD_VAR 0 6
49709: ST_TO_ADDR
// for i = tmp downto 1 do
49710: LD_ADDR_VAR 0 7
49714: PUSH
49715: DOUBLE
49716: LD_VAR 0 9
49720: INC
49721: ST_TO_ADDR
49722: LD_INT 1
49724: PUSH
49725: FOR_DOWNTO
49726: IFFALSE 49771
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
49728: LD_ADDR_VAR 0 6
49732: PUSH
49733: LD_VAR 0 6
49737: PPUSH
49738: LD_VAR 0 9
49742: PUSH
49743: LD_VAR 0 7
49747: MINUS
49748: PUSH
49749: LD_INT 1
49751: PLUS
49752: PPUSH
49753: LD_VAR 0 9
49757: PUSH
49758: LD_VAR 0 7
49762: ARRAY
49763: PPUSH
49764: CALL_OW 1
49768: ST_TO_ADDR
49769: GO 49725
49771: POP
49772: POP
// end ; tmp := [ ] ;
49773: LD_ADDR_VAR 0 9
49777: PUSH
49778: EMPTY
49779: ST_TO_ADDR
// if mode then
49780: LD_VAR 0 5
49784: IFFALSE 49853
// begin for i = 1 to result do
49786: LD_ADDR_VAR 0 7
49790: PUSH
49791: DOUBLE
49792: LD_INT 1
49794: DEC
49795: ST_TO_ADDR
49796: LD_VAR 0 6
49800: PUSH
49801: FOR_TO
49802: IFFALSE 49841
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
49804: LD_ADDR_VAR 0 9
49808: PUSH
49809: LD_VAR 0 9
49813: PPUSH
49814: LD_VAR 0 7
49818: PPUSH
49819: LD_VAR 0 6
49823: PUSH
49824: LD_VAR 0 7
49828: ARRAY
49829: PUSH
49830: LD_INT 1
49832: ARRAY
49833: PPUSH
49834: CALL_OW 1
49838: ST_TO_ADDR
49839: GO 49801
49841: POP
49842: POP
// result := tmp ;
49843: LD_ADDR_VAR 0 6
49847: PUSH
49848: LD_VAR 0 9
49852: ST_TO_ADDR
// end ; end ;
49853: LD_VAR 0 6
49857: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
49858: LD_INT 0
49860: PPUSH
49861: PPUSH
49862: PPUSH
49863: PPUSH
49864: PPUSH
49865: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
49866: LD_ADDR_VAR 0 5
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: EMPTY
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: ST_TO_ADDR
// if not x or not y then
49888: LD_VAR 0 2
49892: NOT
49893: PUSH
49894: LD_VAR 0 3
49898: NOT
49899: OR
49900: IFFALSE 49904
// exit ;
49902: GO 51550
// if not range then
49904: LD_VAR 0 4
49908: NOT
49909: IFFALSE 49919
// range := 10 ;
49911: LD_ADDR_VAR 0 4
49915: PUSH
49916: LD_INT 10
49918: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
49919: LD_ADDR_VAR 0 8
49923: PUSH
49924: LD_INT 81
49926: PUSH
49927: LD_VAR 0 1
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 92
49938: PUSH
49939: LD_VAR 0 2
49943: PUSH
49944: LD_VAR 0 3
49948: PUSH
49949: LD_VAR 0 4
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 3
49962: PUSH
49963: LD_INT 21
49965: PUSH
49966: LD_INT 3
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: LIST
49981: PPUSH
49982: CALL_OW 69
49986: ST_TO_ADDR
// if not tmp then
49987: LD_VAR 0 8
49991: NOT
49992: IFFALSE 49996
// exit ;
49994: GO 51550
// for i in tmp do
49996: LD_ADDR_VAR 0 6
50000: PUSH
50001: LD_VAR 0 8
50005: PUSH
50006: FOR_IN
50007: IFFALSE 51525
// begin points := [ 0 , 0 , 0 ] ;
50009: LD_ADDR_VAR 0 9
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: LIST
50027: ST_TO_ADDR
// bpoints := 1 ;
50028: LD_ADDR_VAR 0 10
50032: PUSH
50033: LD_INT 1
50035: ST_TO_ADDR
// case GetType ( i ) of unit_human :
50036: LD_VAR 0 6
50040: PPUSH
50041: CALL_OW 247
50045: PUSH
50046: LD_INT 1
50048: DOUBLE
50049: EQUAL
50050: IFTRUE 50054
50052: GO 50632
50054: POP
// begin if GetClass ( i ) = 1 then
50055: LD_VAR 0 6
50059: PPUSH
50060: CALL_OW 257
50064: PUSH
50065: LD_INT 1
50067: EQUAL
50068: IFFALSE 50089
// points := [ 10 , 5 , 3 ] ;
50070: LD_ADDR_VAR 0 9
50074: PUSH
50075: LD_INT 10
50077: PUSH
50078: LD_INT 5
50080: PUSH
50081: LD_INT 3
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: LIST
50088: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
50089: LD_VAR 0 6
50093: PPUSH
50094: CALL_OW 257
50098: PUSH
50099: LD_INT 2
50101: PUSH
50102: LD_INT 3
50104: PUSH
50105: LD_INT 4
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: LIST
50112: IN
50113: IFFALSE 50134
// points := [ 3 , 2 , 1 ] ;
50115: LD_ADDR_VAR 0 9
50119: PUSH
50120: LD_INT 3
50122: PUSH
50123: LD_INT 2
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: LIST
50133: ST_TO_ADDR
// if GetClass ( i ) = 5 then
50134: LD_VAR 0 6
50138: PPUSH
50139: CALL_OW 257
50143: PUSH
50144: LD_INT 5
50146: EQUAL
50147: IFFALSE 50168
// points := [ 130 , 5 , 2 ] ;
50149: LD_ADDR_VAR 0 9
50153: PUSH
50154: LD_INT 130
50156: PUSH
50157: LD_INT 5
50159: PUSH
50160: LD_INT 2
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: LIST
50167: ST_TO_ADDR
// if GetClass ( i ) = 8 then
50168: LD_VAR 0 6
50172: PPUSH
50173: CALL_OW 257
50177: PUSH
50178: LD_INT 8
50180: EQUAL
50181: IFFALSE 50202
// points := [ 35 , 35 , 30 ] ;
50183: LD_ADDR_VAR 0 9
50187: PUSH
50188: LD_INT 35
50190: PUSH
50191: LD_INT 35
50193: PUSH
50194: LD_INT 30
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: LIST
50201: ST_TO_ADDR
// if GetClass ( i ) = 9 then
50202: LD_VAR 0 6
50206: PPUSH
50207: CALL_OW 257
50211: PUSH
50212: LD_INT 9
50214: EQUAL
50215: IFFALSE 50236
// points := [ 20 , 55 , 40 ] ;
50217: LD_ADDR_VAR 0 9
50221: PUSH
50222: LD_INT 20
50224: PUSH
50225: LD_INT 55
50227: PUSH
50228: LD_INT 40
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: LIST
50235: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
50236: LD_VAR 0 6
50240: PPUSH
50241: CALL_OW 257
50245: PUSH
50246: LD_INT 12
50248: PUSH
50249: LD_INT 16
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: IN
50256: IFFALSE 50277
// points := [ 5 , 3 , 2 ] ;
50258: LD_ADDR_VAR 0 9
50262: PUSH
50263: LD_INT 5
50265: PUSH
50266: LD_INT 3
50268: PUSH
50269: LD_INT 2
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: LIST
50276: ST_TO_ADDR
// if GetClass ( i ) = 17 then
50277: LD_VAR 0 6
50281: PPUSH
50282: CALL_OW 257
50286: PUSH
50287: LD_INT 17
50289: EQUAL
50290: IFFALSE 50311
// points := [ 100 , 50 , 75 ] ;
50292: LD_ADDR_VAR 0 9
50296: PUSH
50297: LD_INT 100
50299: PUSH
50300: LD_INT 50
50302: PUSH
50303: LD_INT 75
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: LIST
50310: ST_TO_ADDR
// if GetClass ( i ) = 15 then
50311: LD_VAR 0 6
50315: PPUSH
50316: CALL_OW 257
50320: PUSH
50321: LD_INT 15
50323: EQUAL
50324: IFFALSE 50345
// points := [ 10 , 5 , 3 ] ;
50326: LD_ADDR_VAR 0 9
50330: PUSH
50331: LD_INT 10
50333: PUSH
50334: LD_INT 5
50336: PUSH
50337: LD_INT 3
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: LIST
50344: ST_TO_ADDR
// if GetClass ( i ) = 14 then
50345: LD_VAR 0 6
50349: PPUSH
50350: CALL_OW 257
50354: PUSH
50355: LD_INT 14
50357: EQUAL
50358: IFFALSE 50379
// points := [ 10 , 0 , 0 ] ;
50360: LD_ADDR_VAR 0 9
50364: PUSH
50365: LD_INT 10
50367: PUSH
50368: LD_INT 0
50370: PUSH
50371: LD_INT 0
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: LIST
50378: ST_TO_ADDR
// if GetClass ( i ) = 11 then
50379: LD_VAR 0 6
50383: PPUSH
50384: CALL_OW 257
50388: PUSH
50389: LD_INT 11
50391: EQUAL
50392: IFFALSE 50413
// points := [ 30 , 10 , 5 ] ;
50394: LD_ADDR_VAR 0 9
50398: PUSH
50399: LD_INT 30
50401: PUSH
50402: LD_INT 10
50404: PUSH
50405: LD_INT 5
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: LIST
50412: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
50413: LD_VAR 0 1
50417: PPUSH
50418: LD_INT 5
50420: PPUSH
50421: CALL_OW 321
50425: PUSH
50426: LD_INT 2
50428: EQUAL
50429: IFFALSE 50446
// bpoints := bpoints * 1.8 ;
50431: LD_ADDR_VAR 0 10
50435: PUSH
50436: LD_VAR 0 10
50440: PUSH
50441: LD_REAL  1.80000000000000E+0000
50444: MUL
50445: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
50446: LD_VAR 0 6
50450: PPUSH
50451: CALL_OW 257
50455: PUSH
50456: LD_INT 1
50458: PUSH
50459: LD_INT 2
50461: PUSH
50462: LD_INT 3
50464: PUSH
50465: LD_INT 4
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: IN
50474: PUSH
50475: LD_VAR 0 1
50479: PPUSH
50480: LD_INT 51
50482: PPUSH
50483: CALL_OW 321
50487: PUSH
50488: LD_INT 2
50490: EQUAL
50491: AND
50492: IFFALSE 50509
// bpoints := bpoints * 1.2 ;
50494: LD_ADDR_VAR 0 10
50498: PUSH
50499: LD_VAR 0 10
50503: PUSH
50504: LD_REAL  1.20000000000000E+0000
50507: MUL
50508: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
50509: LD_VAR 0 6
50513: PPUSH
50514: CALL_OW 257
50518: PUSH
50519: LD_INT 5
50521: PUSH
50522: LD_INT 7
50524: PUSH
50525: LD_INT 9
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: LIST
50532: IN
50533: PUSH
50534: LD_VAR 0 1
50538: PPUSH
50539: LD_INT 52
50541: PPUSH
50542: CALL_OW 321
50546: PUSH
50547: LD_INT 2
50549: EQUAL
50550: AND
50551: IFFALSE 50568
// bpoints := bpoints * 1.5 ;
50553: LD_ADDR_VAR 0 10
50557: PUSH
50558: LD_VAR 0 10
50562: PUSH
50563: LD_REAL  1.50000000000000E+0000
50566: MUL
50567: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
50568: LD_VAR 0 1
50572: PPUSH
50573: LD_INT 66
50575: PPUSH
50576: CALL_OW 321
50580: PUSH
50581: LD_INT 2
50583: EQUAL
50584: IFFALSE 50601
// bpoints := bpoints * 1.1 ;
50586: LD_ADDR_VAR 0 10
50590: PUSH
50591: LD_VAR 0 10
50595: PUSH
50596: LD_REAL  1.10000000000000E+0000
50599: MUL
50600: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
50601: LD_ADDR_VAR 0 10
50605: PUSH
50606: LD_VAR 0 10
50610: PUSH
50611: LD_VAR 0 6
50615: PPUSH
50616: LD_INT 1
50618: PPUSH
50619: CALL_OW 259
50623: PUSH
50624: LD_REAL  1.15000000000000E+0000
50627: MUL
50628: MUL
50629: ST_TO_ADDR
// end ; unit_vehicle :
50630: GO 51454
50632: LD_INT 2
50634: DOUBLE
50635: EQUAL
50636: IFTRUE 50640
50638: GO 51442
50640: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
50641: LD_VAR 0 6
50645: PPUSH
50646: CALL_OW 264
50650: PUSH
50651: LD_INT 2
50653: PUSH
50654: LD_INT 42
50656: PUSH
50657: LD_INT 24
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: LIST
50664: IN
50665: IFFALSE 50686
// points := [ 25 , 5 , 3 ] ;
50667: LD_ADDR_VAR 0 9
50671: PUSH
50672: LD_INT 25
50674: PUSH
50675: LD_INT 5
50677: PUSH
50678: LD_INT 3
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: LIST
50685: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
50686: LD_VAR 0 6
50690: PPUSH
50691: CALL_OW 264
50695: PUSH
50696: LD_INT 4
50698: PUSH
50699: LD_INT 43
50701: PUSH
50702: LD_INT 25
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: LIST
50709: IN
50710: IFFALSE 50731
// points := [ 40 , 15 , 5 ] ;
50712: LD_ADDR_VAR 0 9
50716: PUSH
50717: LD_INT 40
50719: PUSH
50720: LD_INT 15
50722: PUSH
50723: LD_INT 5
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: LIST
50730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
50731: LD_VAR 0 6
50735: PPUSH
50736: CALL_OW 264
50740: PUSH
50741: LD_INT 3
50743: PUSH
50744: LD_INT 23
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: IN
50751: IFFALSE 50772
// points := [ 7 , 25 , 8 ] ;
50753: LD_ADDR_VAR 0 9
50757: PUSH
50758: LD_INT 7
50760: PUSH
50761: LD_INT 25
50763: PUSH
50764: LD_INT 8
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: LIST
50771: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
50772: LD_VAR 0 6
50776: PPUSH
50777: CALL_OW 264
50781: PUSH
50782: LD_INT 5
50784: PUSH
50785: LD_INT 27
50787: PUSH
50788: LD_INT 44
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: LIST
50795: IN
50796: IFFALSE 50817
// points := [ 14 , 50 , 16 ] ;
50798: LD_ADDR_VAR 0 9
50802: PUSH
50803: LD_INT 14
50805: PUSH
50806: LD_INT 50
50808: PUSH
50809: LD_INT 16
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: LIST
50816: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
50817: LD_VAR 0 6
50821: PPUSH
50822: CALL_OW 264
50826: PUSH
50827: LD_INT 6
50829: PUSH
50830: LD_INT 46
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: IN
50837: IFFALSE 50858
// points := [ 32 , 120 , 70 ] ;
50839: LD_ADDR_VAR 0 9
50843: PUSH
50844: LD_INT 32
50846: PUSH
50847: LD_INT 120
50849: PUSH
50850: LD_INT 70
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: LIST
50857: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
50858: LD_VAR 0 6
50862: PPUSH
50863: CALL_OW 264
50867: PUSH
50868: LD_INT 7
50870: PUSH
50871: LD_INT 28
50873: PUSH
50874: LD_INT 45
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: LIST
50881: IN
50882: IFFALSE 50903
// points := [ 35 , 20 , 45 ] ;
50884: LD_ADDR_VAR 0 9
50888: PUSH
50889: LD_INT 35
50891: PUSH
50892: LD_INT 20
50894: PUSH
50895: LD_INT 45
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: LIST
50902: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
50903: LD_VAR 0 6
50907: PPUSH
50908: CALL_OW 264
50912: PUSH
50913: LD_INT 47
50915: PUSH
50916: EMPTY
50917: LIST
50918: IN
50919: IFFALSE 50940
// points := [ 67 , 45 , 75 ] ;
50921: LD_ADDR_VAR 0 9
50925: PUSH
50926: LD_INT 67
50928: PUSH
50929: LD_INT 45
50931: PUSH
50932: LD_INT 75
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: LIST
50939: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
50940: LD_VAR 0 6
50944: PPUSH
50945: CALL_OW 264
50949: PUSH
50950: LD_INT 26
50952: PUSH
50953: EMPTY
50954: LIST
50955: IN
50956: IFFALSE 50977
// points := [ 120 , 30 , 80 ] ;
50958: LD_ADDR_VAR 0 9
50962: PUSH
50963: LD_INT 120
50965: PUSH
50966: LD_INT 30
50968: PUSH
50969: LD_INT 80
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: LIST
50976: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
50977: LD_VAR 0 6
50981: PPUSH
50982: CALL_OW 264
50986: PUSH
50987: LD_INT 22
50989: PUSH
50990: EMPTY
50991: LIST
50992: IN
50993: IFFALSE 51014
// points := [ 40 , 1 , 1 ] ;
50995: LD_ADDR_VAR 0 9
50999: PUSH
51000: LD_INT 40
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: LIST
51013: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
51014: LD_VAR 0 6
51018: PPUSH
51019: CALL_OW 264
51023: PUSH
51024: LD_INT 29
51026: PUSH
51027: EMPTY
51028: LIST
51029: IN
51030: IFFALSE 51051
// points := [ 70 , 200 , 400 ] ;
51032: LD_ADDR_VAR 0 9
51036: PUSH
51037: LD_INT 70
51039: PUSH
51040: LD_INT 200
51042: PUSH
51043: LD_INT 400
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: LIST
51050: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
51051: LD_VAR 0 6
51055: PPUSH
51056: CALL_OW 264
51060: PUSH
51061: LD_INT 14
51063: PUSH
51064: LD_INT 53
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: IN
51071: IFFALSE 51092
// points := [ 40 , 10 , 20 ] ;
51073: LD_ADDR_VAR 0 9
51077: PUSH
51078: LD_INT 40
51080: PUSH
51081: LD_INT 10
51083: PUSH
51084: LD_INT 20
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: LIST
51091: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
51092: LD_VAR 0 6
51096: PPUSH
51097: CALL_OW 264
51101: PUSH
51102: LD_INT 9
51104: PUSH
51105: EMPTY
51106: LIST
51107: IN
51108: IFFALSE 51129
// points := [ 5 , 70 , 20 ] ;
51110: LD_ADDR_VAR 0 9
51114: PUSH
51115: LD_INT 5
51117: PUSH
51118: LD_INT 70
51120: PUSH
51121: LD_INT 20
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: LIST
51128: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
51129: LD_VAR 0 6
51133: PPUSH
51134: CALL_OW 264
51138: PUSH
51139: LD_INT 10
51141: PUSH
51142: EMPTY
51143: LIST
51144: IN
51145: IFFALSE 51166
// points := [ 35 , 110 , 70 ] ;
51147: LD_ADDR_VAR 0 9
51151: PUSH
51152: LD_INT 35
51154: PUSH
51155: LD_INT 110
51157: PUSH
51158: LD_INT 70
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: LIST
51165: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
51166: LD_VAR 0 6
51170: PPUSH
51171: CALL_OW 265
51175: PUSH
51176: LD_INT 25
51178: EQUAL
51179: IFFALSE 51200
// points := [ 80 , 65 , 100 ] ;
51181: LD_ADDR_VAR 0 9
51185: PUSH
51186: LD_INT 80
51188: PUSH
51189: LD_INT 65
51191: PUSH
51192: LD_INT 100
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: LIST
51199: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
51200: LD_VAR 0 6
51204: PPUSH
51205: CALL_OW 263
51209: PUSH
51210: LD_INT 1
51212: EQUAL
51213: IFFALSE 51248
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
51215: LD_ADDR_VAR 0 10
51219: PUSH
51220: LD_VAR 0 10
51224: PUSH
51225: LD_VAR 0 6
51229: PPUSH
51230: CALL_OW 311
51234: PPUSH
51235: LD_INT 3
51237: PPUSH
51238: CALL_OW 259
51242: PUSH
51243: LD_INT 4
51245: MUL
51246: MUL
51247: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
51248: LD_VAR 0 6
51252: PPUSH
51253: CALL_OW 263
51257: PUSH
51258: LD_INT 2
51260: EQUAL
51261: IFFALSE 51312
// begin j := IsControledBy ( i ) ;
51263: LD_ADDR_VAR 0 7
51267: PUSH
51268: LD_VAR 0 6
51272: PPUSH
51273: CALL_OW 312
51277: ST_TO_ADDR
// if j then
51278: LD_VAR 0 7
51282: IFFALSE 51312
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
51284: LD_ADDR_VAR 0 10
51288: PUSH
51289: LD_VAR 0 10
51293: PUSH
51294: LD_VAR 0 7
51298: PPUSH
51299: LD_INT 3
51301: PPUSH
51302: CALL_OW 259
51306: PUSH
51307: LD_INT 3
51309: MUL
51310: MUL
51311: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
51312: LD_VAR 0 6
51316: PPUSH
51317: CALL_OW 264
51321: PUSH
51322: LD_INT 5
51324: PUSH
51325: LD_INT 6
51327: PUSH
51328: LD_INT 46
51330: PUSH
51331: LD_INT 44
51333: PUSH
51334: LD_INT 47
51336: PUSH
51337: LD_INT 45
51339: PUSH
51340: LD_INT 28
51342: PUSH
51343: LD_INT 7
51345: PUSH
51346: LD_INT 27
51348: PUSH
51349: LD_INT 29
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: IN
51364: PUSH
51365: LD_VAR 0 1
51369: PPUSH
51370: LD_INT 52
51372: PPUSH
51373: CALL_OW 321
51377: PUSH
51378: LD_INT 2
51380: EQUAL
51381: AND
51382: IFFALSE 51399
// bpoints := bpoints * 1.2 ;
51384: LD_ADDR_VAR 0 10
51388: PUSH
51389: LD_VAR 0 10
51393: PUSH
51394: LD_REAL  1.20000000000000E+0000
51397: MUL
51398: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
51399: LD_VAR 0 6
51403: PPUSH
51404: CALL_OW 264
51408: PUSH
51409: LD_INT 6
51411: PUSH
51412: LD_INT 46
51414: PUSH
51415: LD_INT 47
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: LIST
51422: IN
51423: IFFALSE 51440
// bpoints := bpoints * 1.2 ;
51425: LD_ADDR_VAR 0 10
51429: PUSH
51430: LD_VAR 0 10
51434: PUSH
51435: LD_REAL  1.20000000000000E+0000
51438: MUL
51439: ST_TO_ADDR
// end ; unit_building :
51440: GO 51454
51442: LD_INT 3
51444: DOUBLE
51445: EQUAL
51446: IFTRUE 51450
51448: GO 51453
51450: POP
// ; end ;
51451: GO 51454
51453: POP
// for j = 1 to 3 do
51454: LD_ADDR_VAR 0 7
51458: PUSH
51459: DOUBLE
51460: LD_INT 1
51462: DEC
51463: ST_TO_ADDR
51464: LD_INT 3
51466: PUSH
51467: FOR_TO
51468: IFFALSE 51521
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
51470: LD_ADDR_VAR 0 5
51474: PUSH
51475: LD_VAR 0 5
51479: PPUSH
51480: LD_VAR 0 7
51484: PPUSH
51485: LD_VAR 0 5
51489: PUSH
51490: LD_VAR 0 7
51494: ARRAY
51495: PUSH
51496: LD_VAR 0 9
51500: PUSH
51501: LD_VAR 0 7
51505: ARRAY
51506: PUSH
51507: LD_VAR 0 10
51511: MUL
51512: PLUS
51513: PPUSH
51514: CALL_OW 1
51518: ST_TO_ADDR
51519: GO 51467
51521: POP
51522: POP
// end ;
51523: GO 50006
51525: POP
51526: POP
// result := Replace ( result , 4 , tmp ) ;
51527: LD_ADDR_VAR 0 5
51531: PUSH
51532: LD_VAR 0 5
51536: PPUSH
51537: LD_INT 4
51539: PPUSH
51540: LD_VAR 0 8
51544: PPUSH
51545: CALL_OW 1
51549: ST_TO_ADDR
// end ;
51550: LD_VAR 0 5
51554: RET
// export function DangerAtRange ( unit , range ) ; begin
51555: LD_INT 0
51557: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
51558: LD_ADDR_VAR 0 3
51562: PUSH
51563: LD_VAR 0 1
51567: PPUSH
51568: CALL_OW 255
51572: PPUSH
51573: LD_VAR 0 1
51577: PPUSH
51578: CALL_OW 250
51582: PPUSH
51583: LD_VAR 0 1
51587: PPUSH
51588: CALL_OW 251
51592: PPUSH
51593: LD_VAR 0 2
51597: PPUSH
51598: CALL 49858 0 4
51602: ST_TO_ADDR
// end ;
51603: LD_VAR 0 3
51607: RET
// export function DangerInArea ( side , area ) ; begin
51608: LD_INT 0
51610: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
51611: LD_ADDR_VAR 0 3
51615: PUSH
51616: LD_VAR 0 2
51620: PPUSH
51621: LD_INT 81
51623: PUSH
51624: LD_VAR 0 1
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PPUSH
51633: CALL_OW 70
51637: ST_TO_ADDR
// end ;
51638: LD_VAR 0 3
51642: RET
// export function IsExtension ( b ) ; begin
51643: LD_INT 0
51645: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
51646: LD_ADDR_VAR 0 2
51650: PUSH
51651: LD_VAR 0 1
51655: PUSH
51656: LD_INT 23
51658: PUSH
51659: LD_INT 20
51661: PUSH
51662: LD_INT 22
51664: PUSH
51665: LD_INT 17
51667: PUSH
51668: LD_INT 24
51670: PUSH
51671: LD_INT 21
51673: PUSH
51674: LD_INT 19
51676: PUSH
51677: LD_INT 16
51679: PUSH
51680: LD_INT 25
51682: PUSH
51683: LD_INT 18
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: IN
51698: ST_TO_ADDR
// end ;
51699: LD_VAR 0 2
51703: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
51704: LD_INT 0
51706: PPUSH
51707: PPUSH
51708: PPUSH
// result := [ ] ;
51709: LD_ADDR_VAR 0 3
51713: PUSH
51714: EMPTY
51715: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
51716: LD_ADDR_VAR 0 4
51720: PUSH
51721: LD_VAR 0 2
51725: PPUSH
51726: LD_INT 21
51728: PUSH
51729: LD_INT 3
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PPUSH
51736: CALL_OW 70
51740: ST_TO_ADDR
// if not tmp then
51741: LD_VAR 0 4
51745: NOT
51746: IFFALSE 51750
// exit ;
51748: GO 51808
// for i in tmp do
51750: LD_ADDR_VAR 0 5
51754: PUSH
51755: LD_VAR 0 4
51759: PUSH
51760: FOR_IN
51761: IFFALSE 51796
// if GetBase ( i ) <> base then
51763: LD_VAR 0 5
51767: PPUSH
51768: CALL_OW 274
51772: PUSH
51773: LD_VAR 0 1
51777: NONEQUAL
51778: IFFALSE 51794
// ComLinkToBase ( base , i ) ;
51780: LD_VAR 0 1
51784: PPUSH
51785: LD_VAR 0 5
51789: PPUSH
51790: CALL_OW 169
51794: GO 51760
51796: POP
51797: POP
// result := tmp ;
51798: LD_ADDR_VAR 0 3
51802: PUSH
51803: LD_VAR 0 4
51807: ST_TO_ADDR
// end ;
51808: LD_VAR 0 3
51812: RET
// export function ComComplete ( unit , b ) ; var i ; begin
51813: LD_INT 0
51815: PPUSH
51816: PPUSH
// if BuildingStatus ( b ) = bs_build then
51817: LD_VAR 0 2
51821: PPUSH
51822: CALL_OW 461
51826: PUSH
51827: LD_INT 1
51829: EQUAL
51830: IFFALSE 51890
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
51832: LD_VAR 0 1
51836: PPUSH
51837: LD_STRING h
51839: PUSH
51840: LD_VAR 0 2
51844: PPUSH
51845: CALL_OW 250
51849: PUSH
51850: LD_VAR 0 2
51854: PPUSH
51855: CALL_OW 251
51859: PUSH
51860: LD_VAR 0 2
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: LD_INT 0
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: PUSH
51883: EMPTY
51884: LIST
51885: PPUSH
51886: CALL_OW 446
// end ;
51890: LD_VAR 0 3
51894: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
51895: LD_INT 0
51897: PPUSH
51898: PPUSH
51899: PPUSH
51900: PPUSH
51901: PPUSH
51902: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
51903: LD_VAR 0 1
51907: NOT
51908: PUSH
51909: LD_VAR 0 1
51913: PPUSH
51914: CALL_OW 263
51918: PUSH
51919: LD_INT 2
51921: EQUAL
51922: NOT
51923: OR
51924: IFFALSE 51928
// exit ;
51926: GO 52244
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
51928: LD_ADDR_VAR 0 6
51932: PUSH
51933: LD_INT 22
51935: PUSH
51936: LD_VAR 0 1
51940: PPUSH
51941: CALL_OW 255
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 2
51952: PUSH
51953: LD_INT 30
51955: PUSH
51956: LD_INT 36
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 34
51965: PUSH
51966: LD_INT 31
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: LIST
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PPUSH
51982: CALL_OW 69
51986: ST_TO_ADDR
// if not tmp then
51987: LD_VAR 0 6
51991: NOT
51992: IFFALSE 51996
// exit ;
51994: GO 52244
// result := [ ] ;
51996: LD_ADDR_VAR 0 2
52000: PUSH
52001: EMPTY
52002: ST_TO_ADDR
// for i in tmp do
52003: LD_ADDR_VAR 0 3
52007: PUSH
52008: LD_VAR 0 6
52012: PUSH
52013: FOR_IN
52014: IFFALSE 52085
// begin t := UnitsInside ( i ) ;
52016: LD_ADDR_VAR 0 4
52020: PUSH
52021: LD_VAR 0 3
52025: PPUSH
52026: CALL_OW 313
52030: ST_TO_ADDR
// if t then
52031: LD_VAR 0 4
52035: IFFALSE 52083
// for j in t do
52037: LD_ADDR_VAR 0 7
52041: PUSH
52042: LD_VAR 0 4
52046: PUSH
52047: FOR_IN
52048: IFFALSE 52081
// result := Insert ( result , result + 1 , j ) ;
52050: LD_ADDR_VAR 0 2
52054: PUSH
52055: LD_VAR 0 2
52059: PPUSH
52060: LD_VAR 0 2
52064: PUSH
52065: LD_INT 1
52067: PLUS
52068: PPUSH
52069: LD_VAR 0 7
52073: PPUSH
52074: CALL_OW 2
52078: ST_TO_ADDR
52079: GO 52047
52081: POP
52082: POP
// end ;
52083: GO 52013
52085: POP
52086: POP
// if not result then
52087: LD_VAR 0 2
52091: NOT
52092: IFFALSE 52096
// exit ;
52094: GO 52244
// mech := result [ 1 ] ;
52096: LD_ADDR_VAR 0 5
52100: PUSH
52101: LD_VAR 0 2
52105: PUSH
52106: LD_INT 1
52108: ARRAY
52109: ST_TO_ADDR
// if result > 1 then
52110: LD_VAR 0 2
52114: PUSH
52115: LD_INT 1
52117: GREATER
52118: IFFALSE 52230
// for i = 2 to result do
52120: LD_ADDR_VAR 0 3
52124: PUSH
52125: DOUBLE
52126: LD_INT 2
52128: DEC
52129: ST_TO_ADDR
52130: LD_VAR 0 2
52134: PUSH
52135: FOR_TO
52136: IFFALSE 52228
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
52138: LD_ADDR_VAR 0 4
52142: PUSH
52143: LD_VAR 0 2
52147: PUSH
52148: LD_VAR 0 3
52152: ARRAY
52153: PPUSH
52154: LD_INT 3
52156: PPUSH
52157: CALL_OW 259
52161: PUSH
52162: LD_VAR 0 2
52166: PUSH
52167: LD_VAR 0 3
52171: ARRAY
52172: PPUSH
52173: CALL_OW 432
52177: MINUS
52178: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
52179: LD_VAR 0 4
52183: PUSH
52184: LD_VAR 0 5
52188: PPUSH
52189: LD_INT 3
52191: PPUSH
52192: CALL_OW 259
52196: PUSH
52197: LD_VAR 0 5
52201: PPUSH
52202: CALL_OW 432
52206: MINUS
52207: GREATEREQUAL
52208: IFFALSE 52226
// mech := result [ i ] ;
52210: LD_ADDR_VAR 0 5
52214: PUSH
52215: LD_VAR 0 2
52219: PUSH
52220: LD_VAR 0 3
52224: ARRAY
52225: ST_TO_ADDR
// end ;
52226: GO 52135
52228: POP
52229: POP
// ComLinkTo ( vehicle , mech ) ;
52230: LD_VAR 0 1
52234: PPUSH
52235: LD_VAR 0 5
52239: PPUSH
52240: CALL_OW 135
// end ;
52244: LD_VAR 0 2
52248: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
52249: LD_INT 0
52251: PPUSH
52252: PPUSH
52253: PPUSH
52254: PPUSH
52255: PPUSH
52256: PPUSH
52257: PPUSH
52258: PPUSH
52259: PPUSH
52260: PPUSH
52261: PPUSH
52262: PPUSH
52263: PPUSH
// result := [ ] ;
52264: LD_ADDR_VAR 0 7
52268: PUSH
52269: EMPTY
52270: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
52271: LD_VAR 0 1
52275: PPUSH
52276: CALL_OW 266
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: LD_INT 1
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: IN
52291: NOT
52292: IFFALSE 52296
// exit ;
52294: GO 53927
// if name then
52296: LD_VAR 0 3
52300: IFFALSE 52316
// SetBName ( base_dep , name ) ;
52302: LD_VAR 0 1
52306: PPUSH
52307: LD_VAR 0 3
52311: PPUSH
52312: CALL_OW 500
// base := GetBase ( base_dep ) ;
52316: LD_ADDR_VAR 0 15
52320: PUSH
52321: LD_VAR 0 1
52325: PPUSH
52326: CALL_OW 274
52330: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
52331: LD_ADDR_VAR 0 16
52335: PUSH
52336: LD_VAR 0 1
52340: PPUSH
52341: CALL_OW 255
52345: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
52346: LD_ADDR_VAR 0 17
52350: PUSH
52351: LD_VAR 0 1
52355: PPUSH
52356: CALL_OW 248
52360: ST_TO_ADDR
// if sources then
52361: LD_VAR 0 5
52365: IFFALSE 52412
// for i = 1 to 3 do
52367: LD_ADDR_VAR 0 8
52371: PUSH
52372: DOUBLE
52373: LD_INT 1
52375: DEC
52376: ST_TO_ADDR
52377: LD_INT 3
52379: PUSH
52380: FOR_TO
52381: IFFALSE 52410
// AddResourceType ( base , i , sources [ i ] ) ;
52383: LD_VAR 0 15
52387: PPUSH
52388: LD_VAR 0 8
52392: PPUSH
52393: LD_VAR 0 5
52397: PUSH
52398: LD_VAR 0 8
52402: ARRAY
52403: PPUSH
52404: CALL_OW 276
52408: GO 52380
52410: POP
52411: POP
// buildings := GetBaseBuildings ( base , area ) ;
52412: LD_ADDR_VAR 0 18
52416: PUSH
52417: LD_VAR 0 15
52421: PPUSH
52422: LD_VAR 0 2
52426: PPUSH
52427: CALL 51704 0 2
52431: ST_TO_ADDR
// InitHc ;
52432: CALL_OW 19
// InitUc ;
52436: CALL_OW 18
// uc_side := side ;
52440: LD_ADDR_OWVAR 20
52444: PUSH
52445: LD_VAR 0 16
52449: ST_TO_ADDR
// uc_nation := nation ;
52450: LD_ADDR_OWVAR 21
52454: PUSH
52455: LD_VAR 0 17
52459: ST_TO_ADDR
// if buildings then
52460: LD_VAR 0 18
52464: IFFALSE 53786
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
52466: LD_ADDR_VAR 0 19
52470: PUSH
52471: LD_VAR 0 18
52475: PPUSH
52476: LD_INT 2
52478: PUSH
52479: LD_INT 30
52481: PUSH
52482: LD_INT 29
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 30
52491: PUSH
52492: LD_INT 30
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: LIST
52503: PPUSH
52504: CALL_OW 72
52508: ST_TO_ADDR
// if tmp then
52509: LD_VAR 0 19
52513: IFFALSE 52561
// for i in tmp do
52515: LD_ADDR_VAR 0 8
52519: PUSH
52520: LD_VAR 0 19
52524: PUSH
52525: FOR_IN
52526: IFFALSE 52559
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
52528: LD_VAR 0 8
52532: PPUSH
52533: CALL_OW 250
52537: PPUSH
52538: LD_VAR 0 8
52542: PPUSH
52543: CALL_OW 251
52547: PPUSH
52548: LD_VAR 0 16
52552: PPUSH
52553: CALL_OW 441
52557: GO 52525
52559: POP
52560: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
52561: LD_VAR 0 18
52565: PPUSH
52566: LD_INT 2
52568: PUSH
52569: LD_INT 30
52571: PUSH
52572: LD_INT 32
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 30
52581: PUSH
52582: LD_INT 33
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: LIST
52593: PPUSH
52594: CALL_OW 72
52598: IFFALSE 52686
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
52600: LD_ADDR_VAR 0 8
52604: PUSH
52605: LD_VAR 0 18
52609: PPUSH
52610: LD_INT 2
52612: PUSH
52613: LD_INT 30
52615: PUSH
52616: LD_INT 32
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 30
52625: PUSH
52626: LD_INT 33
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: LIST
52637: PPUSH
52638: CALL_OW 72
52642: PUSH
52643: FOR_IN
52644: IFFALSE 52684
// begin if not GetBWeapon ( i ) then
52646: LD_VAR 0 8
52650: PPUSH
52651: CALL_OW 269
52655: NOT
52656: IFFALSE 52682
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
52658: LD_VAR 0 8
52662: PPUSH
52663: LD_VAR 0 8
52667: PPUSH
52668: LD_VAR 0 2
52672: PPUSH
52673: CALL 53932 0 2
52677: PPUSH
52678: CALL_OW 431
// end ;
52682: GO 52643
52684: POP
52685: POP
// end ; for i = 1 to personel do
52686: LD_ADDR_VAR 0 8
52690: PUSH
52691: DOUBLE
52692: LD_INT 1
52694: DEC
52695: ST_TO_ADDR
52696: LD_VAR 0 6
52700: PUSH
52701: FOR_TO
52702: IFFALSE 53766
// begin if i > 4 then
52704: LD_VAR 0 8
52708: PUSH
52709: LD_INT 4
52711: GREATER
52712: IFFALSE 52716
// break ;
52714: GO 53766
// case i of 1 :
52716: LD_VAR 0 8
52720: PUSH
52721: LD_INT 1
52723: DOUBLE
52724: EQUAL
52725: IFTRUE 52729
52727: GO 52809
52729: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
52730: LD_ADDR_VAR 0 12
52734: PUSH
52735: LD_VAR 0 18
52739: PPUSH
52740: LD_INT 22
52742: PUSH
52743: LD_VAR 0 16
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 58
52754: PUSH
52755: EMPTY
52756: LIST
52757: PUSH
52758: LD_INT 2
52760: PUSH
52761: LD_INT 30
52763: PUSH
52764: LD_INT 32
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 30
52773: PUSH
52774: LD_INT 4
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 30
52783: PUSH
52784: LD_INT 5
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: LIST
52801: PPUSH
52802: CALL_OW 72
52806: ST_TO_ADDR
52807: GO 53031
52809: LD_INT 2
52811: DOUBLE
52812: EQUAL
52813: IFTRUE 52817
52815: GO 52879
52817: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
52818: LD_ADDR_VAR 0 12
52822: PUSH
52823: LD_VAR 0 18
52827: PPUSH
52828: LD_INT 22
52830: PUSH
52831: LD_VAR 0 16
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 2
52842: PUSH
52843: LD_INT 30
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 30
52855: PUSH
52856: LD_INT 1
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: LIST
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PPUSH
52872: CALL_OW 72
52876: ST_TO_ADDR
52877: GO 53031
52879: LD_INT 3
52881: DOUBLE
52882: EQUAL
52883: IFTRUE 52887
52885: GO 52949
52887: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
52888: LD_ADDR_VAR 0 12
52892: PUSH
52893: LD_VAR 0 18
52897: PPUSH
52898: LD_INT 22
52900: PUSH
52901: LD_VAR 0 16
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 2
52912: PUSH
52913: LD_INT 30
52915: PUSH
52916: LD_INT 2
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 30
52925: PUSH
52926: LD_INT 3
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: LIST
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PPUSH
52942: CALL_OW 72
52946: ST_TO_ADDR
52947: GO 53031
52949: LD_INT 4
52951: DOUBLE
52952: EQUAL
52953: IFTRUE 52957
52955: GO 53030
52957: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
52958: LD_ADDR_VAR 0 12
52962: PUSH
52963: LD_VAR 0 18
52967: PPUSH
52968: LD_INT 22
52970: PUSH
52971: LD_VAR 0 16
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 2
52982: PUSH
52983: LD_INT 30
52985: PUSH
52986: LD_INT 6
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 30
52995: PUSH
52996: LD_INT 7
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 30
53005: PUSH
53006: LD_INT 8
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PPUSH
53023: CALL_OW 72
53027: ST_TO_ADDR
53028: GO 53031
53030: POP
// if i = 1 then
53031: LD_VAR 0 8
53035: PUSH
53036: LD_INT 1
53038: EQUAL
53039: IFFALSE 53150
// begin tmp := [ ] ;
53041: LD_ADDR_VAR 0 19
53045: PUSH
53046: EMPTY
53047: ST_TO_ADDR
// for j in f do
53048: LD_ADDR_VAR 0 9
53052: PUSH
53053: LD_VAR 0 12
53057: PUSH
53058: FOR_IN
53059: IFFALSE 53132
// if GetBType ( j ) = b_bunker then
53061: LD_VAR 0 9
53065: PPUSH
53066: CALL_OW 266
53070: PUSH
53071: LD_INT 32
53073: EQUAL
53074: IFFALSE 53101
// tmp := Insert ( tmp , 1 , j ) else
53076: LD_ADDR_VAR 0 19
53080: PUSH
53081: LD_VAR 0 19
53085: PPUSH
53086: LD_INT 1
53088: PPUSH
53089: LD_VAR 0 9
53093: PPUSH
53094: CALL_OW 2
53098: ST_TO_ADDR
53099: GO 53130
// tmp := Insert ( tmp , tmp + 1 , j ) ;
53101: LD_ADDR_VAR 0 19
53105: PUSH
53106: LD_VAR 0 19
53110: PPUSH
53111: LD_VAR 0 19
53115: PUSH
53116: LD_INT 1
53118: PLUS
53119: PPUSH
53120: LD_VAR 0 9
53124: PPUSH
53125: CALL_OW 2
53129: ST_TO_ADDR
53130: GO 53058
53132: POP
53133: POP
// if tmp then
53134: LD_VAR 0 19
53138: IFFALSE 53150
// f := tmp ;
53140: LD_ADDR_VAR 0 12
53144: PUSH
53145: LD_VAR 0 19
53149: ST_TO_ADDR
// end ; x := personel [ i ] ;
53150: LD_ADDR_VAR 0 13
53154: PUSH
53155: LD_VAR 0 6
53159: PUSH
53160: LD_VAR 0 8
53164: ARRAY
53165: ST_TO_ADDR
// if x = - 1 then
53166: LD_VAR 0 13
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: EQUAL
53175: IFFALSE 53384
// begin for j in f do
53177: LD_ADDR_VAR 0 9
53181: PUSH
53182: LD_VAR 0 12
53186: PUSH
53187: FOR_IN
53188: IFFALSE 53380
// repeat InitHc ;
53190: CALL_OW 19
// if GetBType ( j ) = b_barracks then
53194: LD_VAR 0 9
53198: PPUSH
53199: CALL_OW 266
53203: PUSH
53204: LD_INT 5
53206: EQUAL
53207: IFFALSE 53277
// begin if UnitsInside ( j ) < 3 then
53209: LD_VAR 0 9
53213: PPUSH
53214: CALL_OW 313
53218: PUSH
53219: LD_INT 3
53221: LESS
53222: IFFALSE 53258
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53224: LD_INT 0
53226: PPUSH
53227: LD_INT 5
53229: PUSH
53230: LD_INT 8
53232: PUSH
53233: LD_INT 9
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: LIST
53240: PUSH
53241: LD_VAR 0 17
53245: ARRAY
53246: PPUSH
53247: LD_VAR 0 4
53251: PPUSH
53252: CALL_OW 380
53256: GO 53275
// PrepareHuman ( false , i , skill ) ;
53258: LD_INT 0
53260: PPUSH
53261: LD_VAR 0 8
53265: PPUSH
53266: LD_VAR 0 4
53270: PPUSH
53271: CALL_OW 380
// end else
53275: GO 53294
// PrepareHuman ( false , i , skill ) ;
53277: LD_INT 0
53279: PPUSH
53280: LD_VAR 0 8
53284: PPUSH
53285: LD_VAR 0 4
53289: PPUSH
53290: CALL_OW 380
// un := CreateHuman ;
53294: LD_ADDR_VAR 0 14
53298: PUSH
53299: CALL_OW 44
53303: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53304: LD_ADDR_VAR 0 7
53308: PUSH
53309: LD_VAR 0 7
53313: PPUSH
53314: LD_INT 1
53316: PPUSH
53317: LD_VAR 0 14
53321: PPUSH
53322: CALL_OW 2
53326: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
53327: LD_VAR 0 14
53331: PPUSH
53332: LD_VAR 0 9
53336: PPUSH
53337: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
53341: LD_VAR 0 9
53345: PPUSH
53346: CALL_OW 313
53350: PUSH
53351: LD_INT 6
53353: EQUAL
53354: PUSH
53355: LD_VAR 0 9
53359: PPUSH
53360: CALL_OW 266
53364: PUSH
53365: LD_INT 32
53367: PUSH
53368: LD_INT 31
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: IN
53375: OR
53376: IFFALSE 53190
53378: GO 53187
53380: POP
53381: POP
// end else
53382: GO 53764
// for j = 1 to x do
53384: LD_ADDR_VAR 0 9
53388: PUSH
53389: DOUBLE
53390: LD_INT 1
53392: DEC
53393: ST_TO_ADDR
53394: LD_VAR 0 13
53398: PUSH
53399: FOR_TO
53400: IFFALSE 53762
// begin InitHc ;
53402: CALL_OW 19
// if not f then
53406: LD_VAR 0 12
53410: NOT
53411: IFFALSE 53500
// begin PrepareHuman ( false , i , skill ) ;
53413: LD_INT 0
53415: PPUSH
53416: LD_VAR 0 8
53420: PPUSH
53421: LD_VAR 0 4
53425: PPUSH
53426: CALL_OW 380
// un := CreateHuman ;
53430: LD_ADDR_VAR 0 14
53434: PUSH
53435: CALL_OW 44
53439: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53440: LD_ADDR_VAR 0 7
53444: PUSH
53445: LD_VAR 0 7
53449: PPUSH
53450: LD_INT 1
53452: PPUSH
53453: LD_VAR 0 14
53457: PPUSH
53458: CALL_OW 2
53462: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53463: LD_VAR 0 14
53467: PPUSH
53468: LD_VAR 0 1
53472: PPUSH
53473: CALL_OW 250
53477: PPUSH
53478: LD_VAR 0 1
53482: PPUSH
53483: CALL_OW 251
53487: PPUSH
53488: LD_INT 10
53490: PPUSH
53491: LD_INT 0
53493: PPUSH
53494: CALL_OW 50
// continue ;
53498: GO 53399
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
53500: LD_VAR 0 12
53504: PUSH
53505: LD_INT 1
53507: ARRAY
53508: PPUSH
53509: CALL_OW 313
53513: PUSH
53514: LD_VAR 0 12
53518: PUSH
53519: LD_INT 1
53521: ARRAY
53522: PPUSH
53523: CALL_OW 266
53527: PUSH
53528: LD_INT 32
53530: PUSH
53531: LD_INT 31
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: IN
53538: AND
53539: PUSH
53540: LD_VAR 0 12
53544: PUSH
53545: LD_INT 1
53547: ARRAY
53548: PPUSH
53549: CALL_OW 313
53553: PUSH
53554: LD_INT 6
53556: EQUAL
53557: OR
53558: IFFALSE 53578
// f := Delete ( f , 1 ) ;
53560: LD_ADDR_VAR 0 12
53564: PUSH
53565: LD_VAR 0 12
53569: PPUSH
53570: LD_INT 1
53572: PPUSH
53573: CALL_OW 3
53577: ST_TO_ADDR
// if not f then
53578: LD_VAR 0 12
53582: NOT
53583: IFFALSE 53601
// begin x := x + 2 ;
53585: LD_ADDR_VAR 0 13
53589: PUSH
53590: LD_VAR 0 13
53594: PUSH
53595: LD_INT 2
53597: PLUS
53598: ST_TO_ADDR
// continue ;
53599: GO 53399
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
53601: LD_VAR 0 12
53605: PUSH
53606: LD_INT 1
53608: ARRAY
53609: PPUSH
53610: CALL_OW 266
53614: PUSH
53615: LD_INT 5
53617: EQUAL
53618: IFFALSE 53692
// begin if UnitsInside ( f [ 1 ] ) < 3 then
53620: LD_VAR 0 12
53624: PUSH
53625: LD_INT 1
53627: ARRAY
53628: PPUSH
53629: CALL_OW 313
53633: PUSH
53634: LD_INT 3
53636: LESS
53637: IFFALSE 53673
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53639: LD_INT 0
53641: PPUSH
53642: LD_INT 5
53644: PUSH
53645: LD_INT 8
53647: PUSH
53648: LD_INT 9
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: LIST
53655: PUSH
53656: LD_VAR 0 17
53660: ARRAY
53661: PPUSH
53662: LD_VAR 0 4
53666: PPUSH
53667: CALL_OW 380
53671: GO 53690
// PrepareHuman ( false , i , skill ) ;
53673: LD_INT 0
53675: PPUSH
53676: LD_VAR 0 8
53680: PPUSH
53681: LD_VAR 0 4
53685: PPUSH
53686: CALL_OW 380
// end else
53690: GO 53709
// PrepareHuman ( false , i , skill ) ;
53692: LD_INT 0
53694: PPUSH
53695: LD_VAR 0 8
53699: PPUSH
53700: LD_VAR 0 4
53704: PPUSH
53705: CALL_OW 380
// un := CreateHuman ;
53709: LD_ADDR_VAR 0 14
53713: PUSH
53714: CALL_OW 44
53718: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53719: LD_ADDR_VAR 0 7
53723: PUSH
53724: LD_VAR 0 7
53728: PPUSH
53729: LD_INT 1
53731: PPUSH
53732: LD_VAR 0 14
53736: PPUSH
53737: CALL_OW 2
53741: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
53742: LD_VAR 0 14
53746: PPUSH
53747: LD_VAR 0 12
53751: PUSH
53752: LD_INT 1
53754: ARRAY
53755: PPUSH
53756: CALL_OW 52
// end ;
53760: GO 53399
53762: POP
53763: POP
// end ;
53764: GO 52701
53766: POP
53767: POP
// result := result ^ buildings ;
53768: LD_ADDR_VAR 0 7
53772: PUSH
53773: LD_VAR 0 7
53777: PUSH
53778: LD_VAR 0 18
53782: ADD
53783: ST_TO_ADDR
// end else
53784: GO 53927
// begin for i = 1 to personel do
53786: LD_ADDR_VAR 0 8
53790: PUSH
53791: DOUBLE
53792: LD_INT 1
53794: DEC
53795: ST_TO_ADDR
53796: LD_VAR 0 6
53800: PUSH
53801: FOR_TO
53802: IFFALSE 53925
// begin if i > 4 then
53804: LD_VAR 0 8
53808: PUSH
53809: LD_INT 4
53811: GREATER
53812: IFFALSE 53816
// break ;
53814: GO 53925
// x := personel [ i ] ;
53816: LD_ADDR_VAR 0 13
53820: PUSH
53821: LD_VAR 0 6
53825: PUSH
53826: LD_VAR 0 8
53830: ARRAY
53831: ST_TO_ADDR
// if x = - 1 then
53832: LD_VAR 0 13
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: EQUAL
53841: IFFALSE 53845
// continue ;
53843: GO 53801
// PrepareHuman ( false , i , skill ) ;
53845: LD_INT 0
53847: PPUSH
53848: LD_VAR 0 8
53852: PPUSH
53853: LD_VAR 0 4
53857: PPUSH
53858: CALL_OW 380
// un := CreateHuman ;
53862: LD_ADDR_VAR 0 14
53866: PUSH
53867: CALL_OW 44
53871: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53872: LD_VAR 0 14
53876: PPUSH
53877: LD_VAR 0 1
53881: PPUSH
53882: CALL_OW 250
53886: PPUSH
53887: LD_VAR 0 1
53891: PPUSH
53892: CALL_OW 251
53896: PPUSH
53897: LD_INT 10
53899: PPUSH
53900: LD_INT 0
53902: PPUSH
53903: CALL_OW 50
// result := result ^ un ;
53907: LD_ADDR_VAR 0 7
53911: PUSH
53912: LD_VAR 0 7
53916: PUSH
53917: LD_VAR 0 14
53921: ADD
53922: ST_TO_ADDR
// end ;
53923: GO 53801
53925: POP
53926: POP
// end ; end ;
53927: LD_VAR 0 7
53931: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
53932: LD_INT 0
53934: PPUSH
53935: PPUSH
53936: PPUSH
53937: PPUSH
53938: PPUSH
53939: PPUSH
53940: PPUSH
53941: PPUSH
53942: PPUSH
53943: PPUSH
53944: PPUSH
53945: PPUSH
53946: PPUSH
53947: PPUSH
53948: PPUSH
53949: PPUSH
// result := false ;
53950: LD_ADDR_VAR 0 3
53954: PUSH
53955: LD_INT 0
53957: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
53958: LD_VAR 0 1
53962: NOT
53963: PUSH
53964: LD_VAR 0 1
53968: PPUSH
53969: CALL_OW 266
53973: PUSH
53974: LD_INT 32
53976: PUSH
53977: LD_INT 33
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: IN
53984: NOT
53985: OR
53986: IFFALSE 53990
// exit ;
53988: GO 55126
// nat := GetNation ( tower ) ;
53990: LD_ADDR_VAR 0 12
53994: PUSH
53995: LD_VAR 0 1
53999: PPUSH
54000: CALL_OW 248
54004: ST_TO_ADDR
// side := GetSide ( tower ) ;
54005: LD_ADDR_VAR 0 16
54009: PUSH
54010: LD_VAR 0 1
54014: PPUSH
54015: CALL_OW 255
54019: ST_TO_ADDR
// x := GetX ( tower ) ;
54020: LD_ADDR_VAR 0 10
54024: PUSH
54025: LD_VAR 0 1
54029: PPUSH
54030: CALL_OW 250
54034: ST_TO_ADDR
// y := GetY ( tower ) ;
54035: LD_ADDR_VAR 0 11
54039: PUSH
54040: LD_VAR 0 1
54044: PPUSH
54045: CALL_OW 251
54049: ST_TO_ADDR
// if not x or not y then
54050: LD_VAR 0 10
54054: NOT
54055: PUSH
54056: LD_VAR 0 11
54060: NOT
54061: OR
54062: IFFALSE 54066
// exit ;
54064: GO 55126
// weapon := 0 ;
54066: LD_ADDR_VAR 0 18
54070: PUSH
54071: LD_INT 0
54073: ST_TO_ADDR
// fac_list := [ ] ;
54074: LD_ADDR_VAR 0 17
54078: PUSH
54079: EMPTY
54080: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
54081: LD_ADDR_VAR 0 6
54085: PUSH
54086: LD_VAR 0 1
54090: PPUSH
54091: CALL_OW 274
54095: PPUSH
54096: LD_VAR 0 2
54100: PPUSH
54101: CALL 51704 0 2
54105: PPUSH
54106: LD_INT 30
54108: PUSH
54109: LD_INT 3
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PPUSH
54116: CALL_OW 72
54120: ST_TO_ADDR
// if not factories then
54121: LD_VAR 0 6
54125: NOT
54126: IFFALSE 54130
// exit ;
54128: GO 55126
// for i in factories do
54130: LD_ADDR_VAR 0 8
54134: PUSH
54135: LD_VAR 0 6
54139: PUSH
54140: FOR_IN
54141: IFFALSE 54166
// fac_list := fac_list union AvailableWeaponList ( i ) ;
54143: LD_ADDR_VAR 0 17
54147: PUSH
54148: LD_VAR 0 17
54152: PUSH
54153: LD_VAR 0 8
54157: PPUSH
54158: CALL_OW 478
54162: UNION
54163: ST_TO_ADDR
54164: GO 54140
54166: POP
54167: POP
// if not fac_list then
54168: LD_VAR 0 17
54172: NOT
54173: IFFALSE 54177
// exit ;
54175: GO 55126
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
54177: LD_ADDR_VAR 0 5
54181: PUSH
54182: LD_INT 4
54184: PUSH
54185: LD_INT 5
54187: PUSH
54188: LD_INT 9
54190: PUSH
54191: LD_INT 10
54193: PUSH
54194: LD_INT 6
54196: PUSH
54197: LD_INT 7
54199: PUSH
54200: LD_INT 11
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 27
54214: PUSH
54215: LD_INT 28
54217: PUSH
54218: LD_INT 26
54220: PUSH
54221: LD_INT 30
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 43
54232: PUSH
54233: LD_INT 44
54235: PUSH
54236: LD_INT 46
54238: PUSH
54239: LD_INT 45
54241: PUSH
54242: LD_INT 47
54244: PUSH
54245: LD_INT 49
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: LIST
54260: PUSH
54261: LD_VAR 0 12
54265: ARRAY
54266: ST_TO_ADDR
// for i in list do
54267: LD_ADDR_VAR 0 8
54271: PUSH
54272: LD_VAR 0 5
54276: PUSH
54277: FOR_IN
54278: IFFALSE 54311
// if not i in fac_list then
54280: LD_VAR 0 8
54284: PUSH
54285: LD_VAR 0 17
54289: IN
54290: NOT
54291: IFFALSE 54309
// list := list diff i ;
54293: LD_ADDR_VAR 0 5
54297: PUSH
54298: LD_VAR 0 5
54302: PUSH
54303: LD_VAR 0 8
54307: DIFF
54308: ST_TO_ADDR
54309: GO 54277
54311: POP
54312: POP
// if not list then
54313: LD_VAR 0 5
54317: NOT
54318: IFFALSE 54322
// exit ;
54320: GO 55126
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
54322: LD_VAR 0 12
54326: PUSH
54327: LD_INT 3
54329: EQUAL
54330: PUSH
54331: LD_INT 49
54333: PUSH
54334: LD_VAR 0 5
54338: IN
54339: AND
54340: PUSH
54341: LD_INT 31
54343: PPUSH
54344: LD_VAR 0 16
54348: PPUSH
54349: CALL_OW 321
54353: PUSH
54354: LD_INT 2
54356: EQUAL
54357: AND
54358: IFFALSE 54418
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
54360: LD_INT 22
54362: PUSH
54363: LD_VAR 0 16
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 35
54374: PUSH
54375: LD_INT 49
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 91
54384: PUSH
54385: LD_VAR 0 1
54389: PUSH
54390: LD_INT 10
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: LIST
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: LIST
54402: PPUSH
54403: CALL_OW 69
54407: NOT
54408: IFFALSE 54418
// weapon := ru_time_lapser ;
54410: LD_ADDR_VAR 0 18
54414: PUSH
54415: LD_INT 49
54417: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
54418: LD_VAR 0 12
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: LD_INT 2
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: IN
54433: PUSH
54434: LD_INT 11
54436: PUSH
54437: LD_VAR 0 5
54441: IN
54442: PUSH
54443: LD_INT 30
54445: PUSH
54446: LD_VAR 0 5
54450: IN
54451: OR
54452: AND
54453: PUSH
54454: LD_INT 6
54456: PPUSH
54457: LD_VAR 0 16
54461: PPUSH
54462: CALL_OW 321
54466: PUSH
54467: LD_INT 2
54469: EQUAL
54470: AND
54471: IFFALSE 54636
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
54473: LD_INT 22
54475: PUSH
54476: LD_VAR 0 16
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 2
54487: PUSH
54488: LD_INT 35
54490: PUSH
54491: LD_INT 11
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 35
54500: PUSH
54501: LD_INT 30
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 91
54515: PUSH
54516: LD_VAR 0 1
54520: PUSH
54521: LD_INT 18
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: LIST
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: LIST
54533: PPUSH
54534: CALL_OW 69
54538: NOT
54539: PUSH
54540: LD_INT 22
54542: PUSH
54543: LD_VAR 0 16
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 2
54554: PUSH
54555: LD_INT 30
54557: PUSH
54558: LD_INT 32
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 30
54567: PUSH
54568: LD_INT 33
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 91
54582: PUSH
54583: LD_VAR 0 1
54587: PUSH
54588: LD_INT 12
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: LIST
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: LIST
54600: PUSH
54601: EMPTY
54602: LIST
54603: PPUSH
54604: CALL_OW 69
54608: PUSH
54609: LD_INT 2
54611: GREATER
54612: AND
54613: IFFALSE 54636
// weapon := [ us_radar , ar_radar ] [ nat ] ;
54615: LD_ADDR_VAR 0 18
54619: PUSH
54620: LD_INT 11
54622: PUSH
54623: LD_INT 30
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_VAR 0 12
54634: ARRAY
54635: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
54636: LD_VAR 0 18
54640: NOT
54641: PUSH
54642: LD_INT 40
54644: PPUSH
54645: LD_VAR 0 16
54649: PPUSH
54650: CALL_OW 321
54654: PUSH
54655: LD_INT 2
54657: EQUAL
54658: AND
54659: PUSH
54660: LD_INT 7
54662: PUSH
54663: LD_VAR 0 5
54667: IN
54668: PUSH
54669: LD_INT 28
54671: PUSH
54672: LD_VAR 0 5
54676: IN
54677: OR
54678: PUSH
54679: LD_INT 45
54681: PUSH
54682: LD_VAR 0 5
54686: IN
54687: OR
54688: AND
54689: IFFALSE 54943
// begin hex := GetHexInfo ( x , y ) ;
54691: LD_ADDR_VAR 0 4
54695: PUSH
54696: LD_VAR 0 10
54700: PPUSH
54701: LD_VAR 0 11
54705: PPUSH
54706: CALL_OW 546
54710: ST_TO_ADDR
// if hex [ 1 ] then
54711: LD_VAR 0 4
54715: PUSH
54716: LD_INT 1
54718: ARRAY
54719: IFFALSE 54723
// exit ;
54721: GO 55126
// height := hex [ 2 ] ;
54723: LD_ADDR_VAR 0 15
54727: PUSH
54728: LD_VAR 0 4
54732: PUSH
54733: LD_INT 2
54735: ARRAY
54736: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
54737: LD_ADDR_VAR 0 14
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: LD_INT 3
54750: PUSH
54751: LD_INT 5
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: ST_TO_ADDR
// for i in tmp do
54760: LD_ADDR_VAR 0 8
54764: PUSH
54765: LD_VAR 0 14
54769: PUSH
54770: FOR_IN
54771: IFFALSE 54941
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
54773: LD_ADDR_VAR 0 9
54777: PUSH
54778: LD_VAR 0 10
54782: PPUSH
54783: LD_VAR 0 8
54787: PPUSH
54788: LD_INT 5
54790: PPUSH
54791: CALL_OW 272
54795: PUSH
54796: LD_VAR 0 11
54800: PPUSH
54801: LD_VAR 0 8
54805: PPUSH
54806: LD_INT 5
54808: PPUSH
54809: CALL_OW 273
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
54818: LD_VAR 0 9
54822: PUSH
54823: LD_INT 1
54825: ARRAY
54826: PPUSH
54827: LD_VAR 0 9
54831: PUSH
54832: LD_INT 2
54834: ARRAY
54835: PPUSH
54836: CALL_OW 488
54840: IFFALSE 54939
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
54842: LD_ADDR_VAR 0 4
54846: PUSH
54847: LD_VAR 0 9
54851: PUSH
54852: LD_INT 1
54854: ARRAY
54855: PPUSH
54856: LD_VAR 0 9
54860: PUSH
54861: LD_INT 2
54863: ARRAY
54864: PPUSH
54865: CALL_OW 546
54869: ST_TO_ADDR
// if hex [ 1 ] then
54870: LD_VAR 0 4
54874: PUSH
54875: LD_INT 1
54877: ARRAY
54878: IFFALSE 54882
// continue ;
54880: GO 54770
// h := hex [ 2 ] ;
54882: LD_ADDR_VAR 0 13
54886: PUSH
54887: LD_VAR 0 4
54891: PUSH
54892: LD_INT 2
54894: ARRAY
54895: ST_TO_ADDR
// if h + 7 < height then
54896: LD_VAR 0 13
54900: PUSH
54901: LD_INT 7
54903: PLUS
54904: PUSH
54905: LD_VAR 0 15
54909: LESS
54910: IFFALSE 54939
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
54912: LD_ADDR_VAR 0 18
54916: PUSH
54917: LD_INT 7
54919: PUSH
54920: LD_INT 28
54922: PUSH
54923: LD_INT 45
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: LIST
54930: PUSH
54931: LD_VAR 0 12
54935: ARRAY
54936: ST_TO_ADDR
// break ;
54937: GO 54941
// end ; end ; end ;
54939: GO 54770
54941: POP
54942: POP
// end ; if not weapon then
54943: LD_VAR 0 18
54947: NOT
54948: IFFALSE 55008
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
54950: LD_ADDR_VAR 0 5
54954: PUSH
54955: LD_VAR 0 5
54959: PUSH
54960: LD_INT 11
54962: PUSH
54963: LD_INT 30
54965: PUSH
54966: LD_INT 49
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: LIST
54973: DIFF
54974: ST_TO_ADDR
// if not list then
54975: LD_VAR 0 5
54979: NOT
54980: IFFALSE 54984
// exit ;
54982: GO 55126
// weapon := list [ rand ( 1 , list ) ] ;
54984: LD_ADDR_VAR 0 18
54988: PUSH
54989: LD_VAR 0 5
54993: PUSH
54994: LD_INT 1
54996: PPUSH
54997: LD_VAR 0 5
55001: PPUSH
55002: CALL_OW 12
55006: ARRAY
55007: ST_TO_ADDR
// end ; if weapon then
55008: LD_VAR 0 18
55012: IFFALSE 55126
// begin tmp := CostOfWeapon ( weapon ) ;
55014: LD_ADDR_VAR 0 14
55018: PUSH
55019: LD_VAR 0 18
55023: PPUSH
55024: CALL_OW 451
55028: ST_TO_ADDR
// j := GetBase ( tower ) ;
55029: LD_ADDR_VAR 0 9
55033: PUSH
55034: LD_VAR 0 1
55038: PPUSH
55039: CALL_OW 274
55043: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
55044: LD_VAR 0 9
55048: PPUSH
55049: LD_INT 1
55051: PPUSH
55052: CALL_OW 275
55056: PUSH
55057: LD_VAR 0 14
55061: PUSH
55062: LD_INT 1
55064: ARRAY
55065: GREATEREQUAL
55066: PUSH
55067: LD_VAR 0 9
55071: PPUSH
55072: LD_INT 2
55074: PPUSH
55075: CALL_OW 275
55079: PUSH
55080: LD_VAR 0 14
55084: PUSH
55085: LD_INT 2
55087: ARRAY
55088: GREATEREQUAL
55089: AND
55090: PUSH
55091: LD_VAR 0 9
55095: PPUSH
55096: LD_INT 3
55098: PPUSH
55099: CALL_OW 275
55103: PUSH
55104: LD_VAR 0 14
55108: PUSH
55109: LD_INT 3
55111: ARRAY
55112: GREATEREQUAL
55113: AND
55114: IFFALSE 55126
// result := weapon ;
55116: LD_ADDR_VAR 0 3
55120: PUSH
55121: LD_VAR 0 18
55125: ST_TO_ADDR
// end ; end ;
55126: LD_VAR 0 3
55130: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
55131: LD_INT 0
55133: PPUSH
55134: PPUSH
// result := true ;
55135: LD_ADDR_VAR 0 3
55139: PUSH
55140: LD_INT 1
55142: ST_TO_ADDR
// if array1 = array2 then
55143: LD_VAR 0 1
55147: PUSH
55148: LD_VAR 0 2
55152: EQUAL
55153: IFFALSE 55213
// begin for i = 1 to array1 do
55155: LD_ADDR_VAR 0 4
55159: PUSH
55160: DOUBLE
55161: LD_INT 1
55163: DEC
55164: ST_TO_ADDR
55165: LD_VAR 0 1
55169: PUSH
55170: FOR_TO
55171: IFFALSE 55209
// if array1 [ i ] <> array2 [ i ] then
55173: LD_VAR 0 1
55177: PUSH
55178: LD_VAR 0 4
55182: ARRAY
55183: PUSH
55184: LD_VAR 0 2
55188: PUSH
55189: LD_VAR 0 4
55193: ARRAY
55194: NONEQUAL
55195: IFFALSE 55207
// begin result := false ;
55197: LD_ADDR_VAR 0 3
55201: PUSH
55202: LD_INT 0
55204: ST_TO_ADDR
// break ;
55205: GO 55209
// end ;
55207: GO 55170
55209: POP
55210: POP
// end else
55211: GO 55221
// result := false ;
55213: LD_ADDR_VAR 0 3
55217: PUSH
55218: LD_INT 0
55220: ST_TO_ADDR
// end ;
55221: LD_VAR 0 3
55225: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
55226: LD_INT 0
55228: PPUSH
55229: PPUSH
55230: PPUSH
// pom := GetBase ( fac ) ;
55231: LD_ADDR_VAR 0 5
55235: PUSH
55236: LD_VAR 0 1
55240: PPUSH
55241: CALL_OW 274
55245: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
55246: LD_ADDR_VAR 0 4
55250: PUSH
55251: LD_VAR 0 2
55255: PUSH
55256: LD_INT 1
55258: ARRAY
55259: PPUSH
55260: LD_VAR 0 2
55264: PUSH
55265: LD_INT 2
55267: ARRAY
55268: PPUSH
55269: LD_VAR 0 2
55273: PUSH
55274: LD_INT 3
55276: ARRAY
55277: PPUSH
55278: LD_VAR 0 2
55282: PUSH
55283: LD_INT 4
55285: ARRAY
55286: PPUSH
55287: CALL_OW 449
55291: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55292: LD_ADDR_VAR 0 3
55296: PUSH
55297: LD_VAR 0 5
55301: PPUSH
55302: LD_INT 1
55304: PPUSH
55305: CALL_OW 275
55309: PUSH
55310: LD_VAR 0 4
55314: PUSH
55315: LD_INT 1
55317: ARRAY
55318: GREATEREQUAL
55319: PUSH
55320: LD_VAR 0 5
55324: PPUSH
55325: LD_INT 2
55327: PPUSH
55328: CALL_OW 275
55332: PUSH
55333: LD_VAR 0 4
55337: PUSH
55338: LD_INT 2
55340: ARRAY
55341: GREATEREQUAL
55342: AND
55343: PUSH
55344: LD_VAR 0 5
55348: PPUSH
55349: LD_INT 3
55351: PPUSH
55352: CALL_OW 275
55356: PUSH
55357: LD_VAR 0 4
55361: PUSH
55362: LD_INT 3
55364: ARRAY
55365: GREATEREQUAL
55366: AND
55367: ST_TO_ADDR
// end ;
55368: LD_VAR 0 3
55372: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
55373: LD_INT 0
55375: PPUSH
55376: PPUSH
55377: PPUSH
55378: PPUSH
// pom := GetBase ( building ) ;
55379: LD_ADDR_VAR 0 3
55383: PUSH
55384: LD_VAR 0 1
55388: PPUSH
55389: CALL_OW 274
55393: ST_TO_ADDR
// if not pom then
55394: LD_VAR 0 3
55398: NOT
55399: IFFALSE 55403
// exit ;
55401: GO 55573
// btype := GetBType ( building ) ;
55403: LD_ADDR_VAR 0 5
55407: PUSH
55408: LD_VAR 0 1
55412: PPUSH
55413: CALL_OW 266
55417: ST_TO_ADDR
// if btype = b_armoury then
55418: LD_VAR 0 5
55422: PUSH
55423: LD_INT 4
55425: EQUAL
55426: IFFALSE 55436
// btype := b_barracks ;
55428: LD_ADDR_VAR 0 5
55432: PUSH
55433: LD_INT 5
55435: ST_TO_ADDR
// if btype = b_depot then
55436: LD_VAR 0 5
55440: PUSH
55441: LD_INT 0
55443: EQUAL
55444: IFFALSE 55454
// btype := b_warehouse ;
55446: LD_ADDR_VAR 0 5
55450: PUSH
55451: LD_INT 1
55453: ST_TO_ADDR
// if btype = b_workshop then
55454: LD_VAR 0 5
55458: PUSH
55459: LD_INT 2
55461: EQUAL
55462: IFFALSE 55472
// btype := b_factory ;
55464: LD_ADDR_VAR 0 5
55468: PUSH
55469: LD_INT 3
55471: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55472: LD_ADDR_VAR 0 4
55476: PUSH
55477: LD_VAR 0 5
55481: PPUSH
55482: LD_VAR 0 1
55486: PPUSH
55487: CALL_OW 248
55491: PPUSH
55492: CALL_OW 450
55496: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55497: LD_ADDR_VAR 0 2
55501: PUSH
55502: LD_VAR 0 3
55506: PPUSH
55507: LD_INT 1
55509: PPUSH
55510: CALL_OW 275
55514: PUSH
55515: LD_VAR 0 4
55519: PUSH
55520: LD_INT 1
55522: ARRAY
55523: GREATEREQUAL
55524: PUSH
55525: LD_VAR 0 3
55529: PPUSH
55530: LD_INT 2
55532: PPUSH
55533: CALL_OW 275
55537: PUSH
55538: LD_VAR 0 4
55542: PUSH
55543: LD_INT 2
55545: ARRAY
55546: GREATEREQUAL
55547: AND
55548: PUSH
55549: LD_VAR 0 3
55553: PPUSH
55554: LD_INT 3
55556: PPUSH
55557: CALL_OW 275
55561: PUSH
55562: LD_VAR 0 4
55566: PUSH
55567: LD_INT 3
55569: ARRAY
55570: GREATEREQUAL
55571: AND
55572: ST_TO_ADDR
// end ;
55573: LD_VAR 0 2
55577: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
55578: LD_INT 0
55580: PPUSH
55581: PPUSH
55582: PPUSH
// pom := GetBase ( building ) ;
55583: LD_ADDR_VAR 0 4
55587: PUSH
55588: LD_VAR 0 1
55592: PPUSH
55593: CALL_OW 274
55597: ST_TO_ADDR
// if not pom then
55598: LD_VAR 0 4
55602: NOT
55603: IFFALSE 55607
// exit ;
55605: GO 55708
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55607: LD_ADDR_VAR 0 5
55611: PUSH
55612: LD_VAR 0 2
55616: PPUSH
55617: LD_VAR 0 1
55621: PPUSH
55622: CALL_OW 248
55626: PPUSH
55627: CALL_OW 450
55631: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55632: LD_ADDR_VAR 0 3
55636: PUSH
55637: LD_VAR 0 4
55641: PPUSH
55642: LD_INT 1
55644: PPUSH
55645: CALL_OW 275
55649: PUSH
55650: LD_VAR 0 5
55654: PUSH
55655: LD_INT 1
55657: ARRAY
55658: GREATEREQUAL
55659: PUSH
55660: LD_VAR 0 4
55664: PPUSH
55665: LD_INT 2
55667: PPUSH
55668: CALL_OW 275
55672: PUSH
55673: LD_VAR 0 5
55677: PUSH
55678: LD_INT 2
55680: ARRAY
55681: GREATEREQUAL
55682: AND
55683: PUSH
55684: LD_VAR 0 4
55688: PPUSH
55689: LD_INT 3
55691: PPUSH
55692: CALL_OW 275
55696: PUSH
55697: LD_VAR 0 5
55701: PUSH
55702: LD_INT 3
55704: ARRAY
55705: GREATEREQUAL
55706: AND
55707: ST_TO_ADDR
// end ;
55708: LD_VAR 0 3
55712: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
55713: LD_INT 0
55715: PPUSH
55716: PPUSH
55717: PPUSH
55718: PPUSH
55719: PPUSH
55720: PPUSH
55721: PPUSH
55722: PPUSH
55723: PPUSH
55724: PPUSH
// result := false ;
55725: LD_ADDR_VAR 0 6
55729: PUSH
55730: LD_INT 0
55732: ST_TO_ADDR
// if not base or not btype or not x or not y then
55733: LD_VAR 0 1
55737: NOT
55738: PUSH
55739: LD_VAR 0 2
55743: NOT
55744: OR
55745: PUSH
55746: LD_VAR 0 3
55750: NOT
55751: OR
55752: PUSH
55753: LD_VAR 0 4
55757: NOT
55758: OR
55759: IFFALSE 55763
// exit ;
55761: GO 56372
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
55763: LD_ADDR_VAR 0 12
55767: PUSH
55768: LD_VAR 0 2
55772: PPUSH
55773: LD_VAR 0 3
55777: PPUSH
55778: LD_VAR 0 4
55782: PPUSH
55783: LD_VAR 0 5
55787: PPUSH
55788: LD_VAR 0 1
55792: PUSH
55793: LD_INT 1
55795: ARRAY
55796: PPUSH
55797: CALL_OW 248
55801: PPUSH
55802: LD_INT 0
55804: PPUSH
55805: CALL 57209 0 6
55809: ST_TO_ADDR
// if not hexes then
55810: LD_VAR 0 12
55814: NOT
55815: IFFALSE 55819
// exit ;
55817: GO 56372
// for i = 1 to hexes do
55819: LD_ADDR_VAR 0 7
55823: PUSH
55824: DOUBLE
55825: LD_INT 1
55827: DEC
55828: ST_TO_ADDR
55829: LD_VAR 0 12
55833: PUSH
55834: FOR_TO
55835: IFFALSE 56370
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55837: LD_ADDR_VAR 0 11
55841: PUSH
55842: LD_VAR 0 12
55846: PUSH
55847: LD_VAR 0 7
55851: ARRAY
55852: PUSH
55853: LD_INT 1
55855: ARRAY
55856: PPUSH
55857: LD_VAR 0 12
55861: PUSH
55862: LD_VAR 0 7
55866: ARRAY
55867: PUSH
55868: LD_INT 2
55870: ARRAY
55871: PPUSH
55872: CALL_OW 428
55876: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
55877: LD_VAR 0 12
55881: PUSH
55882: LD_VAR 0 7
55886: ARRAY
55887: PUSH
55888: LD_INT 1
55890: ARRAY
55891: PPUSH
55892: LD_VAR 0 12
55896: PUSH
55897: LD_VAR 0 7
55901: ARRAY
55902: PUSH
55903: LD_INT 2
55905: ARRAY
55906: PPUSH
55907: CALL_OW 351
55911: PUSH
55912: LD_VAR 0 12
55916: PUSH
55917: LD_VAR 0 7
55921: ARRAY
55922: PUSH
55923: LD_INT 1
55925: ARRAY
55926: PPUSH
55927: LD_VAR 0 12
55931: PUSH
55932: LD_VAR 0 7
55936: ARRAY
55937: PUSH
55938: LD_INT 2
55940: ARRAY
55941: PPUSH
55942: CALL_OW 488
55946: NOT
55947: OR
55948: PUSH
55949: LD_VAR 0 11
55953: PPUSH
55954: CALL_OW 247
55958: PUSH
55959: LD_INT 3
55961: EQUAL
55962: OR
55963: IFFALSE 55969
// exit ;
55965: POP
55966: POP
55967: GO 56372
// if not tmp or not tmp in base then
55969: LD_VAR 0 11
55973: NOT
55974: PUSH
55975: LD_VAR 0 11
55979: PUSH
55980: LD_VAR 0 1
55984: IN
55985: NOT
55986: OR
55987: IFFALSE 55991
// continue ;
55989: GO 55834
// result := true ;
55991: LD_ADDR_VAR 0 6
55995: PUSH
55996: LD_INT 1
55998: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55999: LD_ADDR_VAR 0 15
56003: PUSH
56004: LD_VAR 0 1
56008: PPUSH
56009: LD_INT 22
56011: PUSH
56012: LD_VAR 0 11
56016: PPUSH
56017: CALL_OW 255
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 2
56028: PUSH
56029: LD_INT 30
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 30
56041: PUSH
56042: LD_INT 1
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: LIST
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PPUSH
56058: CALL_OW 72
56062: ST_TO_ADDR
// if dep then
56063: LD_VAR 0 15
56067: IFFALSE 56203
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
56069: LD_ADDR_VAR 0 14
56073: PUSH
56074: LD_VAR 0 15
56078: PUSH
56079: LD_INT 1
56081: ARRAY
56082: PPUSH
56083: CALL_OW 250
56087: PPUSH
56088: LD_VAR 0 15
56092: PUSH
56093: LD_INT 1
56095: ARRAY
56096: PPUSH
56097: CALL_OW 254
56101: PPUSH
56102: LD_INT 5
56104: PPUSH
56105: CALL_OW 272
56109: PUSH
56110: LD_VAR 0 15
56114: PUSH
56115: LD_INT 1
56117: ARRAY
56118: PPUSH
56119: CALL_OW 251
56123: PPUSH
56124: LD_VAR 0 15
56128: PUSH
56129: LD_INT 1
56131: ARRAY
56132: PPUSH
56133: CALL_OW 254
56137: PPUSH
56138: LD_INT 5
56140: PPUSH
56141: CALL_OW 273
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
56150: LD_VAR 0 14
56154: PUSH
56155: LD_INT 1
56157: ARRAY
56158: PPUSH
56159: LD_VAR 0 14
56163: PUSH
56164: LD_INT 2
56166: ARRAY
56167: PPUSH
56168: CALL_OW 488
56172: IFFALSE 56203
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
56174: LD_VAR 0 11
56178: PPUSH
56179: LD_VAR 0 14
56183: PUSH
56184: LD_INT 1
56186: ARRAY
56187: PPUSH
56188: LD_VAR 0 14
56192: PUSH
56193: LD_INT 2
56195: ARRAY
56196: PPUSH
56197: CALL_OW 111
// continue ;
56201: GO 55834
// end ; end ; r := GetDir ( tmp ) ;
56203: LD_ADDR_VAR 0 13
56207: PUSH
56208: LD_VAR 0 11
56212: PPUSH
56213: CALL_OW 254
56217: ST_TO_ADDR
// if r = 5 then
56218: LD_VAR 0 13
56222: PUSH
56223: LD_INT 5
56225: EQUAL
56226: IFFALSE 56236
// r := 0 ;
56228: LD_ADDR_VAR 0 13
56232: PUSH
56233: LD_INT 0
56235: ST_TO_ADDR
// for j = r to 5 do
56236: LD_ADDR_VAR 0 8
56240: PUSH
56241: DOUBLE
56242: LD_VAR 0 13
56246: DEC
56247: ST_TO_ADDR
56248: LD_INT 5
56250: PUSH
56251: FOR_TO
56252: IFFALSE 56366
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
56254: LD_ADDR_VAR 0 9
56258: PUSH
56259: LD_VAR 0 11
56263: PPUSH
56264: CALL_OW 250
56268: PPUSH
56269: LD_VAR 0 8
56273: PPUSH
56274: LD_INT 2
56276: PPUSH
56277: CALL_OW 272
56281: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
56282: LD_ADDR_VAR 0 10
56286: PUSH
56287: LD_VAR 0 11
56291: PPUSH
56292: CALL_OW 251
56296: PPUSH
56297: LD_VAR 0 8
56301: PPUSH
56302: LD_INT 2
56304: PPUSH
56305: CALL_OW 273
56309: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
56310: LD_VAR 0 9
56314: PPUSH
56315: LD_VAR 0 10
56319: PPUSH
56320: CALL_OW 488
56324: PUSH
56325: LD_VAR 0 9
56329: PPUSH
56330: LD_VAR 0 10
56334: PPUSH
56335: CALL_OW 428
56339: NOT
56340: AND
56341: IFFALSE 56364
// begin ComMoveXY ( tmp , _x , _y ) ;
56343: LD_VAR 0 11
56347: PPUSH
56348: LD_VAR 0 9
56352: PPUSH
56353: LD_VAR 0 10
56357: PPUSH
56358: CALL_OW 111
// break ;
56362: GO 56366
// end ; end ;
56364: GO 56251
56366: POP
56367: POP
// end ;
56368: GO 55834
56370: POP
56371: POP
// end ;
56372: LD_VAR 0 6
56376: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
56377: LD_INT 0
56379: PPUSH
56380: PPUSH
56381: PPUSH
56382: PPUSH
56383: PPUSH
56384: PPUSH
56385: PPUSH
56386: PPUSH
56387: PPUSH
56388: PPUSH
// result := false ;
56389: LD_ADDR_VAR 0 6
56393: PUSH
56394: LD_INT 0
56396: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
56397: LD_VAR 0 1
56401: NOT
56402: PUSH
56403: LD_VAR 0 1
56407: PPUSH
56408: CALL_OW 266
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: IN
56423: NOT
56424: OR
56425: PUSH
56426: LD_VAR 0 2
56430: NOT
56431: OR
56432: PUSH
56433: LD_VAR 0 5
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: LD_INT 2
56446: PUSH
56447: LD_INT 3
56449: PUSH
56450: LD_INT 4
56452: PUSH
56453: LD_INT 5
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: IN
56464: NOT
56465: OR
56466: PUSH
56467: LD_VAR 0 3
56471: PPUSH
56472: LD_VAR 0 4
56476: PPUSH
56477: CALL_OW 488
56481: NOT
56482: OR
56483: IFFALSE 56487
// exit ;
56485: GO 57204
// pom := GetBase ( depot ) ;
56487: LD_ADDR_VAR 0 10
56491: PUSH
56492: LD_VAR 0 1
56496: PPUSH
56497: CALL_OW 274
56501: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56502: LD_ADDR_VAR 0 11
56506: PUSH
56507: LD_VAR 0 2
56511: PPUSH
56512: LD_VAR 0 1
56516: PPUSH
56517: CALL_OW 248
56521: PPUSH
56522: CALL_OW 450
56526: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
56527: LD_VAR 0 10
56531: PPUSH
56532: LD_INT 1
56534: PPUSH
56535: CALL_OW 275
56539: PUSH
56540: LD_VAR 0 11
56544: PUSH
56545: LD_INT 1
56547: ARRAY
56548: GREATEREQUAL
56549: PUSH
56550: LD_VAR 0 10
56554: PPUSH
56555: LD_INT 2
56557: PPUSH
56558: CALL_OW 275
56562: PUSH
56563: LD_VAR 0 11
56567: PUSH
56568: LD_INT 2
56570: ARRAY
56571: GREATEREQUAL
56572: AND
56573: PUSH
56574: LD_VAR 0 10
56578: PPUSH
56579: LD_INT 3
56581: PPUSH
56582: CALL_OW 275
56586: PUSH
56587: LD_VAR 0 11
56591: PUSH
56592: LD_INT 3
56594: ARRAY
56595: GREATEREQUAL
56596: AND
56597: NOT
56598: IFFALSE 56602
// exit ;
56600: GO 57204
// if GetBType ( depot ) = b_depot then
56602: LD_VAR 0 1
56606: PPUSH
56607: CALL_OW 266
56611: PUSH
56612: LD_INT 0
56614: EQUAL
56615: IFFALSE 56627
// dist := 28 else
56617: LD_ADDR_VAR 0 14
56621: PUSH
56622: LD_INT 28
56624: ST_TO_ADDR
56625: GO 56635
// dist := 36 ;
56627: LD_ADDR_VAR 0 14
56631: PUSH
56632: LD_INT 36
56634: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
56635: LD_VAR 0 1
56639: PPUSH
56640: LD_VAR 0 3
56644: PPUSH
56645: LD_VAR 0 4
56649: PPUSH
56650: CALL_OW 297
56654: PUSH
56655: LD_VAR 0 14
56659: GREATER
56660: IFFALSE 56664
// exit ;
56662: GO 57204
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
56664: LD_ADDR_VAR 0 12
56668: PUSH
56669: LD_VAR 0 2
56673: PPUSH
56674: LD_VAR 0 3
56678: PPUSH
56679: LD_VAR 0 4
56683: PPUSH
56684: LD_VAR 0 5
56688: PPUSH
56689: LD_VAR 0 1
56693: PPUSH
56694: CALL_OW 248
56698: PPUSH
56699: LD_INT 0
56701: PPUSH
56702: CALL 57209 0 6
56706: ST_TO_ADDR
// if not hexes then
56707: LD_VAR 0 12
56711: NOT
56712: IFFALSE 56716
// exit ;
56714: GO 57204
// hex := GetHexInfo ( x , y ) ;
56716: LD_ADDR_VAR 0 15
56720: PUSH
56721: LD_VAR 0 3
56725: PPUSH
56726: LD_VAR 0 4
56730: PPUSH
56731: CALL_OW 546
56735: ST_TO_ADDR
// if hex [ 1 ] then
56736: LD_VAR 0 15
56740: PUSH
56741: LD_INT 1
56743: ARRAY
56744: IFFALSE 56748
// exit ;
56746: GO 57204
// height := hex [ 2 ] ;
56748: LD_ADDR_VAR 0 13
56752: PUSH
56753: LD_VAR 0 15
56757: PUSH
56758: LD_INT 2
56760: ARRAY
56761: ST_TO_ADDR
// for i = 1 to hexes do
56762: LD_ADDR_VAR 0 7
56766: PUSH
56767: DOUBLE
56768: LD_INT 1
56770: DEC
56771: ST_TO_ADDR
56772: LD_VAR 0 12
56776: PUSH
56777: FOR_TO
56778: IFFALSE 57108
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
56780: LD_VAR 0 12
56784: PUSH
56785: LD_VAR 0 7
56789: ARRAY
56790: PUSH
56791: LD_INT 1
56793: ARRAY
56794: PPUSH
56795: LD_VAR 0 12
56799: PUSH
56800: LD_VAR 0 7
56804: ARRAY
56805: PUSH
56806: LD_INT 2
56808: ARRAY
56809: PPUSH
56810: CALL_OW 488
56814: NOT
56815: PUSH
56816: LD_VAR 0 12
56820: PUSH
56821: LD_VAR 0 7
56825: ARRAY
56826: PUSH
56827: LD_INT 1
56829: ARRAY
56830: PPUSH
56831: LD_VAR 0 12
56835: PUSH
56836: LD_VAR 0 7
56840: ARRAY
56841: PUSH
56842: LD_INT 2
56844: ARRAY
56845: PPUSH
56846: CALL_OW 428
56850: PUSH
56851: LD_INT 0
56853: GREATER
56854: OR
56855: PUSH
56856: LD_VAR 0 12
56860: PUSH
56861: LD_VAR 0 7
56865: ARRAY
56866: PUSH
56867: LD_INT 1
56869: ARRAY
56870: PPUSH
56871: LD_VAR 0 12
56875: PUSH
56876: LD_VAR 0 7
56880: ARRAY
56881: PUSH
56882: LD_INT 2
56884: ARRAY
56885: PPUSH
56886: CALL_OW 351
56890: OR
56891: IFFALSE 56897
// exit ;
56893: POP
56894: POP
56895: GO 57204
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56897: LD_ADDR_VAR 0 8
56901: PUSH
56902: LD_VAR 0 12
56906: PUSH
56907: LD_VAR 0 7
56911: ARRAY
56912: PUSH
56913: LD_INT 1
56915: ARRAY
56916: PPUSH
56917: LD_VAR 0 12
56921: PUSH
56922: LD_VAR 0 7
56926: ARRAY
56927: PUSH
56928: LD_INT 2
56930: ARRAY
56931: PPUSH
56932: CALL_OW 546
56936: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
56937: LD_VAR 0 8
56941: PUSH
56942: LD_INT 1
56944: ARRAY
56945: PUSH
56946: LD_VAR 0 8
56950: PUSH
56951: LD_INT 2
56953: ARRAY
56954: PUSH
56955: LD_VAR 0 13
56959: PUSH
56960: LD_INT 2
56962: PLUS
56963: GREATER
56964: OR
56965: PUSH
56966: LD_VAR 0 8
56970: PUSH
56971: LD_INT 2
56973: ARRAY
56974: PUSH
56975: LD_VAR 0 13
56979: PUSH
56980: LD_INT 2
56982: MINUS
56983: LESS
56984: OR
56985: PUSH
56986: LD_VAR 0 8
56990: PUSH
56991: LD_INT 3
56993: ARRAY
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: LD_INT 8
57000: PUSH
57001: LD_INT 9
57003: PUSH
57004: LD_INT 10
57006: PUSH
57007: LD_INT 11
57009: PUSH
57010: LD_INT 12
57012: PUSH
57013: LD_INT 13
57015: PUSH
57016: LD_INT 16
57018: PUSH
57019: LD_INT 17
57021: PUSH
57022: LD_INT 18
57024: PUSH
57025: LD_INT 19
57027: PUSH
57028: LD_INT 20
57030: PUSH
57031: LD_INT 21
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: IN
57049: NOT
57050: OR
57051: PUSH
57052: LD_VAR 0 8
57056: PUSH
57057: LD_INT 5
57059: ARRAY
57060: NOT
57061: OR
57062: PUSH
57063: LD_VAR 0 8
57067: PUSH
57068: LD_INT 6
57070: ARRAY
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: LD_INT 2
57077: PUSH
57078: LD_INT 7
57080: PUSH
57081: LD_INT 9
57083: PUSH
57084: LD_INT 10
57086: PUSH
57087: LD_INT 11
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: IN
57098: NOT
57099: OR
57100: IFFALSE 57106
// exit ;
57102: POP
57103: POP
57104: GO 57204
// end ;
57106: GO 56777
57108: POP
57109: POP
// side := GetSide ( depot ) ;
57110: LD_ADDR_VAR 0 9
57114: PUSH
57115: LD_VAR 0 1
57119: PPUSH
57120: CALL_OW 255
57124: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
57125: LD_VAR 0 9
57129: PPUSH
57130: LD_VAR 0 3
57134: PPUSH
57135: LD_VAR 0 4
57139: PPUSH
57140: LD_INT 20
57142: PPUSH
57143: CALL 49858 0 4
57147: PUSH
57148: LD_INT 4
57150: ARRAY
57151: IFFALSE 57155
// exit ;
57153: GO 57204
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
57155: LD_VAR 0 2
57159: PUSH
57160: LD_INT 29
57162: PUSH
57163: LD_INT 30
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: IN
57170: PUSH
57171: LD_VAR 0 3
57175: PPUSH
57176: LD_VAR 0 4
57180: PPUSH
57181: LD_VAR 0 9
57185: PPUSH
57186: CALL_OW 440
57190: NOT
57191: AND
57192: IFFALSE 57196
// exit ;
57194: GO 57204
// result := true ;
57196: LD_ADDR_VAR 0 6
57200: PUSH
57201: LD_INT 1
57203: ST_TO_ADDR
// end ;
57204: LD_VAR 0 6
57208: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
57209: LD_INT 0
57211: PPUSH
57212: PPUSH
57213: PPUSH
57214: PPUSH
57215: PPUSH
57216: PPUSH
57217: PPUSH
57218: PPUSH
57219: PPUSH
57220: PPUSH
57221: PPUSH
57222: PPUSH
57223: PPUSH
57224: PPUSH
57225: PPUSH
57226: PPUSH
57227: PPUSH
57228: PPUSH
57229: PPUSH
57230: PPUSH
57231: PPUSH
57232: PPUSH
57233: PPUSH
57234: PPUSH
57235: PPUSH
57236: PPUSH
57237: PPUSH
57238: PPUSH
57239: PPUSH
57240: PPUSH
57241: PPUSH
57242: PPUSH
57243: PPUSH
57244: PPUSH
57245: PPUSH
57246: PPUSH
57247: PPUSH
57248: PPUSH
57249: PPUSH
57250: PPUSH
57251: PPUSH
57252: PPUSH
57253: PPUSH
57254: PPUSH
57255: PPUSH
57256: PPUSH
57257: PPUSH
57258: PPUSH
57259: PPUSH
57260: PPUSH
57261: PPUSH
57262: PPUSH
57263: PPUSH
57264: PPUSH
57265: PPUSH
57266: PPUSH
57267: PPUSH
57268: PPUSH
// result = [ ] ;
57269: LD_ADDR_VAR 0 7
57273: PUSH
57274: EMPTY
57275: ST_TO_ADDR
// temp_list = [ ] ;
57276: LD_ADDR_VAR 0 9
57280: PUSH
57281: EMPTY
57282: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
57283: LD_VAR 0 4
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: LD_INT 1
57293: PUSH
57294: LD_INT 2
57296: PUSH
57297: LD_INT 3
57299: PUSH
57300: LD_INT 4
57302: PUSH
57303: LD_INT 5
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: IN
57314: NOT
57315: PUSH
57316: LD_VAR 0 1
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: IN
57331: PUSH
57332: LD_VAR 0 5
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: LD_INT 2
57342: PUSH
57343: LD_INT 3
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: LIST
57350: IN
57351: NOT
57352: AND
57353: OR
57354: IFFALSE 57358
// exit ;
57356: GO 75749
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
57358: LD_VAR 0 1
57362: PUSH
57363: LD_INT 6
57365: PUSH
57366: LD_INT 7
57368: PUSH
57369: LD_INT 8
57371: PUSH
57372: LD_INT 13
57374: PUSH
57375: LD_INT 12
57377: PUSH
57378: LD_INT 15
57380: PUSH
57381: LD_INT 11
57383: PUSH
57384: LD_INT 14
57386: PUSH
57387: LD_INT 10
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: IN
57401: IFFALSE 57411
// btype = b_lab ;
57403: LD_ADDR_VAR 0 1
57407: PUSH
57408: LD_INT 6
57410: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
57411: LD_VAR 0 6
57415: PUSH
57416: LD_INT 0
57418: PUSH
57419: LD_INT 1
57421: PUSH
57422: LD_INT 2
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: LIST
57429: IN
57430: NOT
57431: PUSH
57432: LD_VAR 0 1
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: LD_INT 2
57445: PUSH
57446: LD_INT 3
57448: PUSH
57449: LD_INT 6
57451: PUSH
57452: LD_INT 36
57454: PUSH
57455: LD_INT 4
57457: PUSH
57458: LD_INT 5
57460: PUSH
57461: LD_INT 31
57463: PUSH
57464: LD_INT 32
57466: PUSH
57467: LD_INT 33
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: IN
57483: NOT
57484: PUSH
57485: LD_VAR 0 6
57489: PUSH
57490: LD_INT 1
57492: EQUAL
57493: AND
57494: OR
57495: PUSH
57496: LD_VAR 0 1
57500: PUSH
57501: LD_INT 2
57503: PUSH
57504: LD_INT 3
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: IN
57511: NOT
57512: PUSH
57513: LD_VAR 0 6
57517: PUSH
57518: LD_INT 2
57520: EQUAL
57521: AND
57522: OR
57523: IFFALSE 57533
// mode = 0 ;
57525: LD_ADDR_VAR 0 6
57529: PUSH
57530: LD_INT 0
57532: ST_TO_ADDR
// case mode of 0 :
57533: LD_VAR 0 6
57537: PUSH
57538: LD_INT 0
57540: DOUBLE
57541: EQUAL
57542: IFTRUE 57546
57544: GO 68999
57546: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57547: LD_ADDR_VAR 0 11
57551: PUSH
57552: LD_INT 0
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 1
57628: NEG
57629: PUSH
57630: LD_INT 2
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: LD_INT 2
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 1
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 1
57662: PUSH
57663: LD_INT 2
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: LD_INT 2
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: LD_INT 3
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: LD_INT 3
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: LD_INT 2
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57740: LD_ADDR_VAR 0 12
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 0
57757: PUSH
57758: LD_INT 1
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 1
57778: PUSH
57779: LD_INT 1
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: LD_INT 1
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 1
57798: NEG
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: PUSH
57822: LD_INT 1
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 2
57832: PUSH
57833: LD_INT 0
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 2
57842: PUSH
57843: LD_INT 1
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 1
57852: NEG
57853: PUSH
57854: LD_INT 1
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 2
57863: NEG
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 2
57874: NEG
57875: PUSH
57876: LD_INT 1
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 2
57886: NEG
57887: PUSH
57888: LD_INT 1
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 3
57897: NEG
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 3
57908: NEG
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57936: LD_ADDR_VAR 0 13
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: LD_INT 1
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 1
58005: NEG
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 1
58017: NEG
58018: PUSH
58019: LD_INT 2
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 2
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 2
58039: PUSH
58040: LD_INT 2
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: LD_INT 2
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 2
58059: NEG
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 2
58071: NEG
58072: PUSH
58073: LD_INT 2
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 2
58083: NEG
58084: PUSH
58085: LD_INT 3
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 3
58095: NEG
58096: PUSH
58097: LD_INT 2
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 3
58107: NEG
58108: PUSH
58109: LD_INT 3
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58135: LD_ADDR_VAR 0 14
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: LD_INT 0
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: LD_INT 1
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 1
58163: PUSH
58164: LD_INT 0
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: LD_INT 1
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: LD_INT 1
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 1
58193: NEG
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 1
58204: NEG
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 1
58216: NEG
58217: PUSH
58218: LD_INT 2
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 0
58228: PUSH
58229: LD_INT 2
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 1
58239: PUSH
58240: LD_INT 1
58242: NEG
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 1
58250: PUSH
58251: LD_INT 2
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: LD_INT 2
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 1
58270: NEG
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 1
58281: NEG
58282: PUSH
58283: LD_INT 3
58285: NEG
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 0
58293: PUSH
58294: LD_INT 3
58296: NEG
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 1
58304: PUSH
58305: LD_INT 2
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58331: LD_ADDR_VAR 0 15
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: LD_INT 1
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: LD_INT 1
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 1
58400: NEG
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 1
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 2
58423: PUSH
58424: LD_INT 0
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 2
58433: PUSH
58434: LD_INT 1
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 1
58443: NEG
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 2
58454: NEG
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 2
58465: NEG
58466: PUSH
58467: LD_INT 1
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 2
58477: PUSH
58478: LD_INT 1
58480: NEG
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 3
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 3
58498: PUSH
58499: LD_INT 1
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58524: LD_ADDR_VAR 0 16
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: LD_INT 0
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 0
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 1
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 1
58562: PUSH
58563: LD_INT 1
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 0
58572: PUSH
58573: LD_INT 1
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 1
58582: NEG
58583: PUSH
58584: LD_INT 0
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 1
58593: NEG
58594: PUSH
58595: LD_INT 1
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 1
58605: NEG
58606: PUSH
58607: LD_INT 2
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 2
58617: PUSH
58618: LD_INT 1
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 2
58627: PUSH
58628: LD_INT 2
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 1
58637: PUSH
58638: LD_INT 2
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 2
58647: NEG
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 2
58659: NEG
58660: PUSH
58661: LD_INT 2
58663: NEG
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 3
58671: PUSH
58672: LD_INT 2
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 3
58681: PUSH
58682: LD_INT 3
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 2
58691: PUSH
58692: LD_INT 3
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58717: LD_ADDR_VAR 0 17
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: LD_INT 1
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: LD_INT 1
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: LD_INT 0
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 1
58798: NEG
58799: PUSH
58800: LD_INT 2
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: LD_INT 2
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 1
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 2
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 2
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 2
58852: PUSH
58853: LD_INT 2
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: LD_INT 2
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: LD_INT 2
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 1
58882: NEG
58883: PUSH
58884: LD_INT 1
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 2
58893: NEG
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 2
58904: NEG
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 2
58916: NEG
58917: PUSH
58918: LD_INT 2
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58947: LD_ADDR_VAR 0 18
58951: PUSH
58952: LD_INT 0
58954: PUSH
58955: LD_INT 0
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: LD_INT 1
58967: NEG
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 1
58975: PUSH
58976: LD_INT 0
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 1
58985: PUSH
58986: LD_INT 1
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 1
59005: NEG
59006: PUSH
59007: LD_INT 0
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: LD_INT 1
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 1
59028: NEG
59029: PUSH
59030: LD_INT 2
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 0
59040: PUSH
59041: LD_INT 2
59043: NEG
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 1
59051: PUSH
59052: LD_INT 1
59054: NEG
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 2
59062: PUSH
59063: LD_INT 0
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 2
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 2
59082: PUSH
59083: LD_INT 2
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 1
59092: PUSH
59093: LD_INT 2
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 0
59102: PUSH
59103: LD_INT 2
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 1
59112: NEG
59113: PUSH
59114: LD_INT 1
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 2
59123: NEG
59124: PUSH
59125: LD_INT 0
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 2
59134: NEG
59135: PUSH
59136: LD_INT 1
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 2
59146: NEG
59147: PUSH
59148: LD_INT 2
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59177: LD_ADDR_VAR 0 19
59181: PUSH
59182: LD_INT 0
59184: PUSH
59185: LD_INT 0
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 0
59194: PUSH
59195: LD_INT 1
59197: NEG
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 1
59205: PUSH
59206: LD_INT 0
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 1
59215: PUSH
59216: LD_INT 1
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 0
59225: PUSH
59226: LD_INT 1
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 1
59235: NEG
59236: PUSH
59237: LD_INT 0
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: LD_INT 1
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 1
59258: NEG
59259: PUSH
59260: LD_INT 2
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 0
59270: PUSH
59271: LD_INT 2
59273: NEG
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 1
59281: PUSH
59282: LD_INT 1
59284: NEG
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 2
59292: PUSH
59293: LD_INT 0
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 2
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 2
59312: PUSH
59313: LD_INT 2
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: PUSH
59323: LD_INT 2
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 0
59332: PUSH
59333: LD_INT 2
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 1
59342: NEG
59343: PUSH
59344: LD_INT 1
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 2
59353: NEG
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 2
59364: NEG
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 2
59376: NEG
59377: PUSH
59378: LD_INT 2
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59407: LD_ADDR_VAR 0 20
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: LD_INT 1
59427: NEG
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 1
59445: PUSH
59446: LD_INT 1
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: LD_INT 1
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 1
59465: NEG
59466: PUSH
59467: LD_INT 0
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 1
59476: NEG
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 1
59488: NEG
59489: PUSH
59490: LD_INT 2
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 0
59500: PUSH
59501: LD_INT 2
59503: NEG
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 2
59522: PUSH
59523: LD_INT 0
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 2
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 2
59542: PUSH
59543: LD_INT 2
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 1
59552: PUSH
59553: LD_INT 2
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 0
59562: PUSH
59563: LD_INT 2
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 1
59572: NEG
59573: PUSH
59574: LD_INT 1
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 2
59583: NEG
59584: PUSH
59585: LD_INT 0
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 2
59594: NEG
59595: PUSH
59596: LD_INT 1
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 2
59606: NEG
59607: PUSH
59608: LD_INT 2
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59637: LD_ADDR_VAR 0 21
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: LD_INT 1
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 1
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 1
59675: PUSH
59676: LD_INT 1
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 0
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 1
59695: NEG
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 1
59706: NEG
59707: PUSH
59708: LD_INT 1
59710: NEG
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 1
59718: NEG
59719: PUSH
59720: LD_INT 2
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 0
59730: PUSH
59731: LD_INT 2
59733: NEG
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 1
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 2
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 2
59762: PUSH
59763: LD_INT 1
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 2
59772: PUSH
59773: LD_INT 2
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: LD_INT 2
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 0
59792: PUSH
59793: LD_INT 2
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 1
59802: NEG
59803: PUSH
59804: LD_INT 1
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 2
59813: NEG
59814: PUSH
59815: LD_INT 0
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 2
59824: NEG
59825: PUSH
59826: LD_INT 1
59828: NEG
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 2
59836: NEG
59837: PUSH
59838: LD_INT 2
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59867: LD_ADDR_VAR 0 22
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: LD_INT 0
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: LD_INT 1
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 1
59895: PUSH
59896: LD_INT 0
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: PUSH
59906: LD_INT 1
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 0
59915: PUSH
59916: LD_INT 1
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 1
59925: NEG
59926: PUSH
59927: LD_INT 0
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 1
59936: NEG
59937: PUSH
59938: LD_INT 1
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 1
59948: NEG
59949: PUSH
59950: LD_INT 2
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 0
59960: PUSH
59961: LD_INT 2
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 1
59971: PUSH
59972: LD_INT 1
59974: NEG
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 2
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 2
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 2
60002: PUSH
60003: LD_INT 2
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 1
60012: PUSH
60013: LD_INT 2
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: LD_INT 2
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 1
60032: NEG
60033: PUSH
60034: LD_INT 1
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 2
60043: NEG
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 2
60054: NEG
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 2
60066: NEG
60067: PUSH
60068: LD_INT 2
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60097: LD_ADDR_VAR 0 23
60101: PUSH
60102: LD_INT 0
60104: PUSH
60105: LD_INT 0
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 0
60114: PUSH
60115: LD_INT 1
60117: NEG
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: LD_INT 0
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 1
60135: PUSH
60136: LD_INT 1
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 0
60145: PUSH
60146: LD_INT 1
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 1
60155: NEG
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 1
60166: NEG
60167: PUSH
60168: LD_INT 1
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 1
60178: NEG
60179: PUSH
60180: LD_INT 2
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 0
60190: PUSH
60191: LD_INT 2
60193: NEG
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 1
60201: PUSH
60202: LD_INT 1
60204: NEG
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 2
60212: PUSH
60213: LD_INT 0
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 2
60222: PUSH
60223: LD_INT 1
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 2
60232: PUSH
60233: LD_INT 2
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 1
60242: PUSH
60243: LD_INT 2
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: LD_INT 2
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 1
60262: NEG
60263: PUSH
60264: LD_INT 1
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 2
60273: NEG
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 2
60284: NEG
60285: PUSH
60286: LD_INT 1
60288: NEG
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 2
60296: NEG
60297: PUSH
60298: LD_INT 2
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 2
60308: NEG
60309: PUSH
60310: LD_INT 3
60312: NEG
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 1
60320: NEG
60321: PUSH
60322: LD_INT 3
60324: NEG
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 1
60332: PUSH
60333: LD_INT 2
60335: NEG
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 2
60343: PUSH
60344: LD_INT 1
60346: NEG
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
60377: LD_ADDR_VAR 0 24
60381: PUSH
60382: LD_INT 0
60384: PUSH
60385: LD_INT 0
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 0
60394: PUSH
60395: LD_INT 1
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: LD_INT 0
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 1
60415: PUSH
60416: LD_INT 1
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 0
60425: PUSH
60426: LD_INT 1
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 1
60435: NEG
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 1
60446: NEG
60447: PUSH
60448: LD_INT 1
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 1
60458: NEG
60459: PUSH
60460: LD_INT 2
60462: NEG
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: LD_INT 2
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: LD_INT 1
60484: NEG
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 2
60492: PUSH
60493: LD_INT 0
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 2
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 2
60512: PUSH
60513: LD_INT 2
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 1
60522: PUSH
60523: LD_INT 2
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 0
60532: PUSH
60533: LD_INT 2
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 1
60542: NEG
60543: PUSH
60544: LD_INT 1
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 2
60553: NEG
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 2
60564: NEG
60565: PUSH
60566: LD_INT 1
60568: NEG
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 2
60576: NEG
60577: PUSH
60578: LD_INT 2
60580: NEG
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 1
60588: PUSH
60589: LD_INT 2
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 2
60599: PUSH
60600: LD_INT 1
60602: NEG
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 3
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 3
60620: PUSH
60621: LD_INT 2
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
60653: LD_ADDR_VAR 0 25
60657: PUSH
60658: LD_INT 0
60660: PUSH
60661: LD_INT 0
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 0
60670: PUSH
60671: LD_INT 1
60673: NEG
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 1
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 1
60691: PUSH
60692: LD_INT 1
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 0
60701: PUSH
60702: LD_INT 1
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 1
60711: NEG
60712: PUSH
60713: LD_INT 0
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 1
60722: NEG
60723: PUSH
60724: LD_INT 1
60726: NEG
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 1
60734: NEG
60735: PUSH
60736: LD_INT 2
60738: NEG
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 0
60746: PUSH
60747: LD_INT 2
60749: NEG
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 1
60757: PUSH
60758: LD_INT 1
60760: NEG
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 2
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 2
60778: PUSH
60779: LD_INT 1
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 2
60788: PUSH
60789: LD_INT 2
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 1
60798: PUSH
60799: LD_INT 2
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: LD_INT 2
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 1
60818: NEG
60819: PUSH
60820: LD_INT 1
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 2
60829: NEG
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 2
60840: NEG
60841: PUSH
60842: LD_INT 1
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 2
60852: NEG
60853: PUSH
60854: LD_INT 2
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 3
60864: PUSH
60865: LD_INT 1
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 3
60874: PUSH
60875: LD_INT 2
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 2
60884: PUSH
60885: LD_INT 3
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 1
60894: PUSH
60895: LD_INT 3
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60927: LD_ADDR_VAR 0 26
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: LD_INT 0
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: LD_INT 1
60947: NEG
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 1
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 1
60965: PUSH
60966: LD_INT 1
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 0
60975: PUSH
60976: LD_INT 1
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: NEG
60986: PUSH
60987: LD_INT 0
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: NEG
60997: PUSH
60998: LD_INT 1
61000: NEG
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 1
61008: NEG
61009: PUSH
61010: LD_INT 2
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 0
61020: PUSH
61021: LD_INT 2
61023: NEG
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 1
61031: PUSH
61032: LD_INT 1
61034: NEG
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 2
61042: PUSH
61043: LD_INT 0
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 2
61052: PUSH
61053: LD_INT 1
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 2
61062: PUSH
61063: LD_INT 2
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 1
61072: PUSH
61073: LD_INT 2
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 0
61082: PUSH
61083: LD_INT 2
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 1
61092: NEG
61093: PUSH
61094: LD_INT 1
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 2
61103: NEG
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 2
61114: NEG
61115: PUSH
61116: LD_INT 1
61118: NEG
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 2
61126: NEG
61127: PUSH
61128: LD_INT 2
61130: NEG
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 2
61138: PUSH
61139: LD_INT 3
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 1
61148: PUSH
61149: LD_INT 3
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: NEG
61159: PUSH
61160: LD_INT 2
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 2
61169: NEG
61170: PUSH
61171: LD_INT 1
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61203: LD_ADDR_VAR 0 27
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: LD_INT 0
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 0
61220: PUSH
61221: LD_INT 1
61223: NEG
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 1
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 1
61241: PUSH
61242: LD_INT 1
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 0
61251: PUSH
61252: LD_INT 1
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 1
61261: NEG
61262: PUSH
61263: LD_INT 0
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 1
61272: NEG
61273: PUSH
61274: LD_INT 1
61276: NEG
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 1
61284: NEG
61285: PUSH
61286: LD_INT 2
61288: NEG
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 0
61296: PUSH
61297: LD_INT 2
61299: NEG
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 1
61307: PUSH
61308: LD_INT 1
61310: NEG
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 2
61318: PUSH
61319: LD_INT 0
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 2
61328: PUSH
61329: LD_INT 1
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 2
61338: PUSH
61339: LD_INT 2
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 1
61348: PUSH
61349: LD_INT 2
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 0
61358: PUSH
61359: LD_INT 2
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 1
61368: NEG
61369: PUSH
61370: LD_INT 1
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 2
61379: NEG
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 2
61390: NEG
61391: PUSH
61392: LD_INT 1
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 2
61402: NEG
61403: PUSH
61404: LD_INT 2
61406: NEG
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 1
61414: NEG
61415: PUSH
61416: LD_INT 2
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 2
61425: NEG
61426: PUSH
61427: LD_INT 1
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 3
61436: NEG
61437: PUSH
61438: LD_INT 1
61440: NEG
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 3
61448: NEG
61449: PUSH
61450: LD_INT 2
61452: NEG
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61483: LD_ADDR_VAR 0 28
61487: PUSH
61488: LD_INT 0
61490: PUSH
61491: LD_INT 0
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: LD_INT 1
61503: NEG
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 1
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 1
61521: PUSH
61522: LD_INT 1
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: LD_INT 1
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 1
61541: NEG
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 1
61552: NEG
61553: PUSH
61554: LD_INT 1
61556: NEG
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 1
61564: NEG
61565: PUSH
61566: LD_INT 2
61568: NEG
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 0
61576: PUSH
61577: LD_INT 2
61579: NEG
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 1
61587: PUSH
61588: LD_INT 1
61590: NEG
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 2
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 2
61608: PUSH
61609: LD_INT 1
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 2
61618: PUSH
61619: LD_INT 2
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 1
61628: PUSH
61629: LD_INT 2
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 0
61638: PUSH
61639: LD_INT 2
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 1
61648: NEG
61649: PUSH
61650: LD_INT 1
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 2
61659: NEG
61660: PUSH
61661: LD_INT 0
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 2
61670: NEG
61671: PUSH
61672: LD_INT 1
61674: NEG
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 2
61682: NEG
61683: PUSH
61684: LD_INT 2
61686: NEG
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 2
61694: NEG
61695: PUSH
61696: LD_INT 3
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 1
61706: NEG
61707: PUSH
61708: LD_INT 3
61710: NEG
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 3
61718: NEG
61719: PUSH
61720: LD_INT 1
61722: NEG
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 3
61730: NEG
61731: PUSH
61732: LD_INT 2
61734: NEG
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61765: LD_ADDR_VAR 0 29
61769: PUSH
61770: LD_INT 0
61772: PUSH
61773: LD_INT 0
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 0
61782: PUSH
61783: LD_INT 1
61785: NEG
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: LD_INT 0
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: LD_INT 1
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: LD_INT 1
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 1
61823: NEG
61824: PUSH
61825: LD_INT 0
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 1
61834: NEG
61835: PUSH
61836: LD_INT 1
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 1
61846: NEG
61847: PUSH
61848: LD_INT 2
61850: NEG
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 0
61858: PUSH
61859: LD_INT 2
61861: NEG
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 1
61869: PUSH
61870: LD_INT 1
61872: NEG
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 2
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 2
61890: PUSH
61891: LD_INT 1
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 1
61900: PUSH
61901: LD_INT 2
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 0
61910: PUSH
61911: LD_INT 2
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: LD_INT 1
61920: NEG
61921: PUSH
61922: LD_INT 1
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 2
61931: NEG
61932: PUSH
61933: LD_INT 1
61935: NEG
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 2
61943: NEG
61944: PUSH
61945: LD_INT 2
61947: NEG
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 2
61955: NEG
61956: PUSH
61957: LD_INT 3
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 2
61967: PUSH
61968: LD_INT 1
61970: NEG
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 3
61978: PUSH
61979: LD_INT 1
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 1
61988: PUSH
61989: LD_INT 3
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 1
61998: NEG
61999: PUSH
62000: LD_INT 2
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 3
62009: NEG
62010: PUSH
62011: LD_INT 2
62013: NEG
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62044: LD_ADDR_VAR 0 30
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: LD_INT 0
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: LD_INT 1
62064: NEG
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 1
62072: PUSH
62073: LD_INT 0
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 1
62082: PUSH
62083: LD_INT 1
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: LD_INT 1
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 1
62102: NEG
62103: PUSH
62104: LD_INT 0
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 1
62113: NEG
62114: PUSH
62115: LD_INT 1
62117: NEG
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 1
62125: NEG
62126: PUSH
62127: LD_INT 2
62129: NEG
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 0
62137: PUSH
62138: LD_INT 2
62140: NEG
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 1
62148: PUSH
62149: LD_INT 1
62151: NEG
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 2
62159: PUSH
62160: LD_INT 0
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 2
62169: PUSH
62170: LD_INT 1
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 2
62179: PUSH
62180: LD_INT 2
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 1
62189: PUSH
62190: LD_INT 2
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 1
62199: NEG
62200: PUSH
62201: LD_INT 1
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 2
62210: NEG
62211: PUSH
62212: LD_INT 0
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 2
62221: NEG
62222: PUSH
62223: LD_INT 1
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 1
62233: NEG
62234: PUSH
62235: LD_INT 3
62237: NEG
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 1
62245: PUSH
62246: LD_INT 2
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 3
62256: PUSH
62257: LD_INT 2
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 2
62266: PUSH
62267: LD_INT 3
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 2
62276: NEG
62277: PUSH
62278: LD_INT 1
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 3
62287: NEG
62288: PUSH
62289: LD_INT 1
62291: NEG
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62322: LD_ADDR_VAR 0 31
62326: PUSH
62327: LD_INT 0
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: LD_INT 1
62342: NEG
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 1
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 1
62360: PUSH
62361: LD_INT 1
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 0
62370: PUSH
62371: LD_INT 1
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 1
62380: NEG
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 1
62391: NEG
62392: PUSH
62393: LD_INT 1
62395: NEG
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 1
62403: NEG
62404: PUSH
62405: LD_INT 2
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 1
62415: PUSH
62416: LD_INT 1
62418: NEG
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 2
62426: PUSH
62427: LD_INT 0
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 2
62436: PUSH
62437: LD_INT 1
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 2
62446: PUSH
62447: LD_INT 2
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 1
62456: PUSH
62457: LD_INT 2
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 0
62466: PUSH
62467: LD_INT 2
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 1
62476: NEG
62477: PUSH
62478: LD_INT 1
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 2
62487: NEG
62488: PUSH
62489: LD_INT 1
62491: NEG
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 2
62499: NEG
62500: PUSH
62501: LD_INT 2
62503: NEG
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 2
62511: NEG
62512: PUSH
62513: LD_INT 3
62515: NEG
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 2
62523: PUSH
62524: LD_INT 1
62526: NEG
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 3
62534: PUSH
62535: LD_INT 1
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 1
62544: PUSH
62545: LD_INT 3
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 1
62554: NEG
62555: PUSH
62556: LD_INT 2
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 3
62565: NEG
62566: PUSH
62567: LD_INT 2
62569: NEG
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62600: LD_ADDR_VAR 0 32
62604: PUSH
62605: LD_INT 0
62607: PUSH
62608: LD_INT 0
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 0
62617: PUSH
62618: LD_INT 1
62620: NEG
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 1
62628: PUSH
62629: LD_INT 0
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 1
62638: PUSH
62639: LD_INT 1
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 0
62648: PUSH
62649: LD_INT 1
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 1
62658: NEG
62659: PUSH
62660: LD_INT 0
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 1
62669: NEG
62670: PUSH
62671: LD_INT 1
62673: NEG
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 1
62681: NEG
62682: PUSH
62683: LD_INT 2
62685: NEG
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 0
62693: PUSH
62694: LD_INT 2
62696: NEG
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 1
62704: PUSH
62705: LD_INT 1
62707: NEG
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 2
62715: PUSH
62716: LD_INT 1
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 2
62725: PUSH
62726: LD_INT 2
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 1
62735: PUSH
62736: LD_INT 2
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 0
62745: PUSH
62746: LD_INT 2
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 1
62755: NEG
62756: PUSH
62757: LD_INT 1
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 2
62766: NEG
62767: PUSH
62768: LD_INT 0
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 2
62777: NEG
62778: PUSH
62779: LD_INT 1
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 1
62789: NEG
62790: PUSH
62791: LD_INT 3
62793: NEG
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 1
62801: PUSH
62802: LD_INT 2
62804: NEG
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 3
62812: PUSH
62813: LD_INT 2
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 2
62822: PUSH
62823: LD_INT 3
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 2
62832: NEG
62833: PUSH
62834: LD_INT 1
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 3
62843: NEG
62844: PUSH
62845: LD_INT 1
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62878: LD_ADDR_VAR 0 33
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: LD_INT 0
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 0
62895: PUSH
62896: LD_INT 1
62898: NEG
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 1
62906: PUSH
62907: LD_INT 0
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 1
62916: PUSH
62917: LD_INT 1
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 0
62926: PUSH
62927: LD_INT 1
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 1
62936: NEG
62937: PUSH
62938: LD_INT 0
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 1
62947: NEG
62948: PUSH
62949: LD_INT 1
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 1
62959: NEG
62960: PUSH
62961: LD_INT 2
62963: NEG
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 1
62971: PUSH
62972: LD_INT 1
62974: NEG
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 2
62982: PUSH
62983: LD_INT 0
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 2
62992: PUSH
62993: LD_INT 1
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 1
63002: PUSH
63003: LD_INT 2
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: LD_INT 2
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 1
63022: NEG
63023: PUSH
63024: LD_INT 1
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 2
63033: NEG
63034: PUSH
63035: LD_INT 0
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 2
63044: NEG
63045: PUSH
63046: LD_INT 1
63048: NEG
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 2
63056: NEG
63057: PUSH
63058: LD_INT 2
63060: NEG
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 2
63068: NEG
63069: PUSH
63070: LD_INT 3
63072: NEG
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 2
63080: PUSH
63081: LD_INT 1
63083: NEG
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 3
63091: PUSH
63092: LD_INT 1
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 1
63101: PUSH
63102: LD_INT 3
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 1
63111: NEG
63112: PUSH
63113: LD_INT 2
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 3
63122: NEG
63123: PUSH
63124: LD_INT 2
63126: NEG
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63157: LD_ADDR_VAR 0 34
63161: PUSH
63162: LD_INT 0
63164: PUSH
63165: LD_INT 0
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 0
63174: PUSH
63175: LD_INT 1
63177: NEG
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 1
63185: PUSH
63186: LD_INT 0
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 1
63195: PUSH
63196: LD_INT 1
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 0
63205: PUSH
63206: LD_INT 1
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 1
63215: NEG
63216: PUSH
63217: LD_INT 0
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 1
63226: NEG
63227: PUSH
63228: LD_INT 1
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 1
63238: NEG
63239: PUSH
63240: LD_INT 2
63242: NEG
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: LD_INT 2
63253: NEG
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 1
63261: PUSH
63262: LD_INT 1
63264: NEG
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 2
63272: PUSH
63273: LD_INT 1
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 2
63282: PUSH
63283: LD_INT 2
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 1
63292: PUSH
63293: LD_INT 2
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 1
63302: NEG
63303: PUSH
63304: LD_INT 1
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 2
63313: NEG
63314: PUSH
63315: LD_INT 0
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 2
63324: NEG
63325: PUSH
63326: LD_INT 1
63328: NEG
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 2
63336: NEG
63337: PUSH
63338: LD_INT 2
63340: NEG
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 1
63348: NEG
63349: PUSH
63350: LD_INT 3
63352: NEG
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 1
63360: PUSH
63361: LD_INT 2
63363: NEG
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 3
63371: PUSH
63372: LD_INT 2
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 2
63381: PUSH
63382: LD_INT 3
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 2
63391: NEG
63392: PUSH
63393: LD_INT 1
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 3
63402: NEG
63403: PUSH
63404: LD_INT 1
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63437: LD_ADDR_VAR 0 35
63441: PUSH
63442: LD_INT 0
63444: PUSH
63445: LD_INT 0
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 0
63454: PUSH
63455: LD_INT 1
63457: NEG
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 1
63465: PUSH
63466: LD_INT 0
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 1
63475: PUSH
63476: LD_INT 1
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 0
63485: PUSH
63486: LD_INT 1
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 1
63495: NEG
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 1
63506: NEG
63507: PUSH
63508: LD_INT 1
63510: NEG
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 2
63518: PUSH
63519: LD_INT 1
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 2
63528: NEG
63529: PUSH
63530: LD_INT 1
63532: NEG
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63549: LD_ADDR_VAR 0 36
63553: PUSH
63554: LD_INT 0
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: LD_INT 1
63569: NEG
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 1
63577: PUSH
63578: LD_INT 0
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 1
63587: PUSH
63588: LD_INT 1
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 0
63597: PUSH
63598: LD_INT 1
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 1
63607: NEG
63608: PUSH
63609: LD_INT 0
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 1
63618: NEG
63619: PUSH
63620: LD_INT 1
63622: NEG
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 1
63630: NEG
63631: PUSH
63632: LD_INT 2
63634: NEG
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 1
63642: PUSH
63643: LD_INT 2
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63661: LD_ADDR_VAR 0 37
63665: PUSH
63666: LD_INT 0
63668: PUSH
63669: LD_INT 0
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 0
63678: PUSH
63679: LD_INT 1
63681: NEG
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 1
63689: PUSH
63690: LD_INT 0
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 1
63699: PUSH
63700: LD_INT 1
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 0
63709: PUSH
63710: LD_INT 1
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 1
63719: NEG
63720: PUSH
63721: LD_INT 0
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 1
63730: NEG
63731: PUSH
63732: LD_INT 1
63734: NEG
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 1
63742: PUSH
63743: LD_INT 1
63745: NEG
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 1
63753: NEG
63754: PUSH
63755: LD_INT 1
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63773: LD_ADDR_VAR 0 38
63777: PUSH
63778: LD_INT 0
63780: PUSH
63781: LD_INT 0
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 0
63790: PUSH
63791: LD_INT 1
63793: NEG
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 1
63801: PUSH
63802: LD_INT 0
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 1
63811: PUSH
63812: LD_INT 1
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 0
63821: PUSH
63822: LD_INT 1
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 1
63831: NEG
63832: PUSH
63833: LD_INT 0
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 1
63842: NEG
63843: PUSH
63844: LD_INT 1
63846: NEG
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 2
63854: PUSH
63855: LD_INT 1
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 2
63864: NEG
63865: PUSH
63866: LD_INT 1
63868: NEG
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63885: LD_ADDR_VAR 0 39
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 0
63902: PUSH
63903: LD_INT 1
63905: NEG
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 1
63913: PUSH
63914: LD_INT 0
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 1
63923: PUSH
63924: LD_INT 1
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 0
63933: PUSH
63934: LD_INT 1
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 1
63943: NEG
63944: PUSH
63945: LD_INT 0
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 1
63954: NEG
63955: PUSH
63956: LD_INT 1
63958: NEG
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 1
63966: NEG
63967: PUSH
63968: LD_INT 2
63970: NEG
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 1
63978: PUSH
63979: LD_INT 2
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63997: LD_ADDR_VAR 0 40
64001: PUSH
64002: LD_INT 0
64004: PUSH
64005: LD_INT 0
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: LD_INT 1
64017: NEG
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 1
64025: PUSH
64026: LD_INT 0
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 1
64035: PUSH
64036: LD_INT 1
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 0
64045: PUSH
64046: LD_INT 1
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 1
64055: NEG
64056: PUSH
64057: LD_INT 0
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 1
64066: NEG
64067: PUSH
64068: LD_INT 1
64070: NEG
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 1
64078: PUSH
64079: LD_INT 1
64081: NEG
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 1
64089: NEG
64090: PUSH
64091: LD_INT 1
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64109: LD_ADDR_VAR 0 41
64113: PUSH
64114: LD_INT 0
64116: PUSH
64117: LD_INT 0
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 0
64126: PUSH
64127: LD_INT 1
64129: NEG
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 1
64137: PUSH
64138: LD_INT 0
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 1
64147: PUSH
64148: LD_INT 1
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 0
64157: PUSH
64158: LD_INT 1
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 1
64167: NEG
64168: PUSH
64169: LD_INT 0
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_INT 1
64178: NEG
64179: PUSH
64180: LD_INT 1
64182: NEG
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 1
64190: NEG
64191: PUSH
64192: LD_INT 2
64194: NEG
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 1
64202: PUSH
64203: LD_INT 1
64205: NEG
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 2
64213: PUSH
64214: LD_INT 0
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 2
64223: PUSH
64224: LD_INT 1
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 2
64233: PUSH
64234: LD_INT 2
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 1
64243: PUSH
64244: LD_INT 2
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 1
64253: NEG
64254: PUSH
64255: LD_INT 1
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 2
64264: NEG
64265: PUSH
64266: LD_INT 0
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 2
64275: NEG
64276: PUSH
64277: LD_INT 1
64279: NEG
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 2
64287: NEG
64288: PUSH
64289: LD_INT 2
64291: NEG
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 2
64299: NEG
64300: PUSH
64301: LD_INT 3
64303: NEG
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 2
64311: PUSH
64312: LD_INT 1
64314: NEG
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 3
64322: PUSH
64323: LD_INT 0
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 3
64332: PUSH
64333: LD_INT 1
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 3
64342: PUSH
64343: LD_INT 2
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 3
64352: PUSH
64353: LD_INT 3
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 2
64362: PUSH
64363: LD_INT 3
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 2
64372: NEG
64373: PUSH
64374: LD_INT 1
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 3
64383: NEG
64384: PUSH
64385: LD_INT 0
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 3
64394: NEG
64395: PUSH
64396: LD_INT 1
64398: NEG
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 3
64406: NEG
64407: PUSH
64408: LD_INT 2
64410: NEG
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 3
64418: NEG
64419: PUSH
64420: LD_INT 3
64422: NEG
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64459: LD_ADDR_VAR 0 42
64463: PUSH
64464: LD_INT 0
64466: PUSH
64467: LD_INT 0
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 0
64476: PUSH
64477: LD_INT 1
64479: NEG
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 1
64487: PUSH
64488: LD_INT 0
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 1
64497: PUSH
64498: LD_INT 1
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 0
64507: PUSH
64508: LD_INT 1
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 1
64517: NEG
64518: PUSH
64519: LD_INT 0
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 1
64528: NEG
64529: PUSH
64530: LD_INT 1
64532: NEG
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 1
64540: NEG
64541: PUSH
64542: LD_INT 2
64544: NEG
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 0
64552: PUSH
64553: LD_INT 2
64555: NEG
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 1
64563: PUSH
64564: LD_INT 1
64566: NEG
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 2
64574: PUSH
64575: LD_INT 1
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 2
64584: PUSH
64585: LD_INT 2
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 1
64594: PUSH
64595: LD_INT 2
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 0
64604: PUSH
64605: LD_INT 2
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 1
64614: NEG
64615: PUSH
64616: LD_INT 1
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 2
64625: NEG
64626: PUSH
64627: LD_INT 1
64629: NEG
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 2
64637: NEG
64638: PUSH
64639: LD_INT 2
64641: NEG
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 2
64649: NEG
64650: PUSH
64651: LD_INT 3
64653: NEG
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 1
64661: NEG
64662: PUSH
64663: LD_INT 3
64665: NEG
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 0
64673: PUSH
64674: LD_INT 3
64676: NEG
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 1
64684: PUSH
64685: LD_INT 2
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 3
64695: PUSH
64696: LD_INT 2
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 3
64705: PUSH
64706: LD_INT 3
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 2
64715: PUSH
64716: LD_INT 3
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 1
64725: PUSH
64726: LD_INT 3
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 0
64735: PUSH
64736: LD_INT 3
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 1
64745: NEG
64746: PUSH
64747: LD_INT 2
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 3
64756: NEG
64757: PUSH
64758: LD_INT 2
64760: NEG
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 3
64768: NEG
64769: PUSH
64770: LD_INT 3
64772: NEG
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: LIST
64786: LIST
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64809: LD_ADDR_VAR 0 43
64813: PUSH
64814: LD_INT 0
64816: PUSH
64817: LD_INT 0
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 0
64826: PUSH
64827: LD_INT 1
64829: NEG
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 1
64837: PUSH
64838: LD_INT 0
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 1
64847: PUSH
64848: LD_INT 1
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 0
64857: PUSH
64858: LD_INT 1
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 1
64867: NEG
64868: PUSH
64869: LD_INT 0
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 1
64878: NEG
64879: PUSH
64880: LD_INT 1
64882: NEG
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 1
64890: NEG
64891: PUSH
64892: LD_INT 2
64894: NEG
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 0
64902: PUSH
64903: LD_INT 2
64905: NEG
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 1
64913: PUSH
64914: LD_INT 1
64916: NEG
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 2
64924: PUSH
64925: LD_INT 0
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 2
64934: PUSH
64935: LD_INT 1
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 1
64944: PUSH
64945: LD_INT 2
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 0
64954: PUSH
64955: LD_INT 2
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 1
64964: NEG
64965: PUSH
64966: LD_INT 1
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 2
64975: NEG
64976: PUSH
64977: LD_INT 0
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 2
64986: NEG
64987: PUSH
64988: LD_INT 1
64990: NEG
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 1
64998: NEG
64999: PUSH
65000: LD_INT 3
65002: NEG
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 0
65010: PUSH
65011: LD_INT 3
65013: NEG
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 1
65021: PUSH
65022: LD_INT 2
65024: NEG
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 2
65032: PUSH
65033: LD_INT 1
65035: NEG
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 3
65043: PUSH
65044: LD_INT 0
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 3
65053: PUSH
65054: LD_INT 1
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 1
65063: PUSH
65064: LD_INT 3
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 0
65073: PUSH
65074: LD_INT 3
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 1
65083: NEG
65084: PUSH
65085: LD_INT 2
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 2
65094: NEG
65095: PUSH
65096: LD_INT 1
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 3
65105: NEG
65106: PUSH
65107: LD_INT 0
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 3
65116: NEG
65117: PUSH
65118: LD_INT 1
65120: NEG
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65157: LD_ADDR_VAR 0 44
65161: PUSH
65162: LD_INT 0
65164: PUSH
65165: LD_INT 0
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 0
65174: PUSH
65175: LD_INT 1
65177: NEG
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 1
65185: PUSH
65186: LD_INT 0
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 1
65195: PUSH
65196: LD_INT 1
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 0
65205: PUSH
65206: LD_INT 1
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 1
65215: NEG
65216: PUSH
65217: LD_INT 0
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 1
65226: NEG
65227: PUSH
65228: LD_INT 1
65230: NEG
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 1
65238: NEG
65239: PUSH
65240: LD_INT 2
65242: NEG
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 1
65250: PUSH
65251: LD_INT 1
65253: NEG
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 2
65261: PUSH
65262: LD_INT 0
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 2
65271: PUSH
65272: LD_INT 1
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 2
65281: PUSH
65282: LD_INT 2
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 1
65291: PUSH
65292: LD_INT 2
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 1
65301: NEG
65302: PUSH
65303: LD_INT 1
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 2
65312: NEG
65313: PUSH
65314: LD_INT 0
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 2
65323: NEG
65324: PUSH
65325: LD_INT 1
65327: NEG
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 2
65335: NEG
65336: PUSH
65337: LD_INT 2
65339: NEG
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 2
65347: NEG
65348: PUSH
65349: LD_INT 3
65351: NEG
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 2
65359: PUSH
65360: LD_INT 1
65362: NEG
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 3
65370: PUSH
65371: LD_INT 0
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 3
65380: PUSH
65381: LD_INT 1
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 3
65390: PUSH
65391: LD_INT 2
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 3
65400: PUSH
65401: LD_INT 3
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 2
65410: PUSH
65411: LD_INT 3
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 2
65420: NEG
65421: PUSH
65422: LD_INT 1
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 3
65431: NEG
65432: PUSH
65433: LD_INT 0
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 3
65442: NEG
65443: PUSH
65444: LD_INT 1
65446: NEG
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 3
65454: NEG
65455: PUSH
65456: LD_INT 2
65458: NEG
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 3
65466: NEG
65467: PUSH
65468: LD_INT 3
65470: NEG
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65507: LD_ADDR_VAR 0 45
65511: PUSH
65512: LD_INT 0
65514: PUSH
65515: LD_INT 0
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 0
65524: PUSH
65525: LD_INT 1
65527: NEG
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 1
65535: PUSH
65536: LD_INT 0
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 1
65545: PUSH
65546: LD_INT 1
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 0
65555: PUSH
65556: LD_INT 1
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 1
65565: NEG
65566: PUSH
65567: LD_INT 0
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 1
65576: NEG
65577: PUSH
65578: LD_INT 1
65580: NEG
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 1
65588: NEG
65589: PUSH
65590: LD_INT 2
65592: NEG
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 0
65600: PUSH
65601: LD_INT 2
65603: NEG
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: LD_INT 1
65611: PUSH
65612: LD_INT 1
65614: NEG
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 2
65622: PUSH
65623: LD_INT 1
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 2
65632: PUSH
65633: LD_INT 2
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 1
65642: PUSH
65643: LD_INT 2
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: LD_INT 0
65652: PUSH
65653: LD_INT 2
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 1
65662: NEG
65663: PUSH
65664: LD_INT 1
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 2
65673: NEG
65674: PUSH
65675: LD_INT 1
65677: NEG
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 2
65685: NEG
65686: PUSH
65687: LD_INT 2
65689: NEG
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 2
65697: NEG
65698: PUSH
65699: LD_INT 3
65701: NEG
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 1
65709: NEG
65710: PUSH
65711: LD_INT 3
65713: NEG
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 0
65721: PUSH
65722: LD_INT 3
65724: NEG
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 1
65732: PUSH
65733: LD_INT 2
65735: NEG
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 3
65743: PUSH
65744: LD_INT 2
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 3
65753: PUSH
65754: LD_INT 3
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 2
65763: PUSH
65764: LD_INT 3
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 1
65773: PUSH
65774: LD_INT 3
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 0
65783: PUSH
65784: LD_INT 3
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 1
65793: NEG
65794: PUSH
65795: LD_INT 2
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 3
65804: NEG
65805: PUSH
65806: LD_INT 2
65808: NEG
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 3
65816: NEG
65817: PUSH
65818: LD_INT 3
65820: NEG
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65857: LD_ADDR_VAR 0 46
65861: PUSH
65862: LD_INT 0
65864: PUSH
65865: LD_INT 0
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 0
65874: PUSH
65875: LD_INT 1
65877: NEG
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 1
65885: PUSH
65886: LD_INT 0
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 1
65895: PUSH
65896: LD_INT 1
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 0
65905: PUSH
65906: LD_INT 1
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 1
65915: NEG
65916: PUSH
65917: LD_INT 0
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 1
65926: NEG
65927: PUSH
65928: LD_INT 1
65930: NEG
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 1
65938: NEG
65939: PUSH
65940: LD_INT 2
65942: NEG
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 0
65950: PUSH
65951: LD_INT 2
65953: NEG
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 1
65961: PUSH
65962: LD_INT 1
65964: NEG
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 2
65972: PUSH
65973: LD_INT 0
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 2
65982: PUSH
65983: LD_INT 1
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 1
65992: PUSH
65993: LD_INT 2
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 0
66002: PUSH
66003: LD_INT 2
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 1
66012: NEG
66013: PUSH
66014: LD_INT 1
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: LD_INT 2
66023: NEG
66024: PUSH
66025: LD_INT 0
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 2
66034: NEG
66035: PUSH
66036: LD_INT 1
66038: NEG
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 1
66046: NEG
66047: PUSH
66048: LD_INT 3
66050: NEG
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 0
66058: PUSH
66059: LD_INT 3
66061: NEG
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 1
66069: PUSH
66070: LD_INT 2
66072: NEG
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 2
66080: PUSH
66081: LD_INT 1
66083: NEG
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: LD_INT 3
66091: PUSH
66092: LD_INT 0
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 3
66101: PUSH
66102: LD_INT 1
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 1
66111: PUSH
66112: LD_INT 3
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 0
66121: PUSH
66122: LD_INT 3
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 1
66131: NEG
66132: PUSH
66133: LD_INT 2
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 2
66142: NEG
66143: PUSH
66144: LD_INT 1
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 3
66153: NEG
66154: PUSH
66155: LD_INT 0
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 3
66164: NEG
66165: PUSH
66166: LD_INT 1
66168: NEG
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66205: LD_ADDR_VAR 0 47
66209: PUSH
66210: LD_INT 0
66212: PUSH
66213: LD_INT 0
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 0
66222: PUSH
66223: LD_INT 1
66225: NEG
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 1
66233: PUSH
66234: LD_INT 0
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 1
66243: PUSH
66244: LD_INT 1
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: LD_INT 0
66253: PUSH
66254: LD_INT 1
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 1
66263: NEG
66264: PUSH
66265: LD_INT 0
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 1
66274: NEG
66275: PUSH
66276: LD_INT 1
66278: NEG
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 1
66286: NEG
66287: PUSH
66288: LD_INT 2
66290: NEG
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 0
66298: PUSH
66299: LD_INT 2
66301: NEG
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 1
66309: PUSH
66310: LD_INT 1
66312: NEG
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 2
66320: NEG
66321: PUSH
66322: LD_INT 1
66324: NEG
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 2
66332: NEG
66333: PUSH
66334: LD_INT 2
66336: NEG
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66356: LD_ADDR_VAR 0 48
66360: PUSH
66361: LD_INT 0
66363: PUSH
66364: LD_INT 0
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: PUSH
66371: LD_INT 0
66373: PUSH
66374: LD_INT 1
66376: NEG
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 1
66384: PUSH
66385: LD_INT 0
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 1
66394: PUSH
66395: LD_INT 1
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 0
66404: PUSH
66405: LD_INT 1
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 1
66414: NEG
66415: PUSH
66416: LD_INT 0
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 1
66425: NEG
66426: PUSH
66427: LD_INT 1
66429: NEG
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 1
66437: NEG
66438: PUSH
66439: LD_INT 2
66441: NEG
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 0
66449: PUSH
66450: LD_INT 2
66452: NEG
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 1
66460: PUSH
66461: LD_INT 1
66463: NEG
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 2
66471: PUSH
66472: LD_INT 0
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 2
66481: PUSH
66482: LD_INT 1
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66503: LD_ADDR_VAR 0 49
66507: PUSH
66508: LD_INT 0
66510: PUSH
66511: LD_INT 0
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 0
66520: PUSH
66521: LD_INT 1
66523: NEG
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 1
66531: PUSH
66532: LD_INT 0
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 1
66541: PUSH
66542: LD_INT 1
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 0
66551: PUSH
66552: LD_INT 1
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 1
66561: NEG
66562: PUSH
66563: LD_INT 0
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 1
66572: NEG
66573: PUSH
66574: LD_INT 1
66576: NEG
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 1
66584: PUSH
66585: LD_INT 1
66587: NEG
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 2
66595: PUSH
66596: LD_INT 0
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 2
66605: PUSH
66606: LD_INT 1
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 2
66615: PUSH
66616: LD_INT 2
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 1
66625: PUSH
66626: LD_INT 2
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66647: LD_ADDR_VAR 0 50
66651: PUSH
66652: LD_INT 0
66654: PUSH
66655: LD_INT 0
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 0
66664: PUSH
66665: LD_INT 1
66667: NEG
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 1
66675: PUSH
66676: LD_INT 0
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 1
66685: PUSH
66686: LD_INT 1
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: PUSH
66693: LD_INT 0
66695: PUSH
66696: LD_INT 1
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: LD_INT 1
66705: NEG
66706: PUSH
66707: LD_INT 0
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 1
66716: NEG
66717: PUSH
66718: LD_INT 1
66720: NEG
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: PUSH
66726: LD_INT 2
66728: PUSH
66729: LD_INT 1
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 2
66738: PUSH
66739: LD_INT 2
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 1
66748: PUSH
66749: LD_INT 2
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 0
66758: PUSH
66759: LD_INT 2
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 1
66768: NEG
66769: PUSH
66770: LD_INT 1
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66791: LD_ADDR_VAR 0 51
66795: PUSH
66796: LD_INT 0
66798: PUSH
66799: LD_INT 0
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 0
66808: PUSH
66809: LD_INT 1
66811: NEG
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 1
66819: PUSH
66820: LD_INT 0
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 1
66829: PUSH
66830: LD_INT 1
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 0
66839: PUSH
66840: LD_INT 1
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 1
66849: NEG
66850: PUSH
66851: LD_INT 0
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 1
66860: NEG
66861: PUSH
66862: LD_INT 1
66864: NEG
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 1
66872: PUSH
66873: LD_INT 2
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 0
66882: PUSH
66883: LD_INT 2
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 1
66892: NEG
66893: PUSH
66894: LD_INT 1
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: LD_INT 2
66903: NEG
66904: PUSH
66905: LD_INT 0
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 2
66914: NEG
66915: PUSH
66916: LD_INT 1
66918: NEG
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66938: LD_ADDR_VAR 0 52
66942: PUSH
66943: LD_INT 0
66945: PUSH
66946: LD_INT 0
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 0
66955: PUSH
66956: LD_INT 1
66958: NEG
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: LD_INT 1
66966: PUSH
66967: LD_INT 0
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 1
66976: PUSH
66977: LD_INT 1
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: LD_INT 0
66986: PUSH
66987: LD_INT 1
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: LD_INT 1
66996: NEG
66997: PUSH
66998: LD_INT 0
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: LD_INT 1
67007: NEG
67008: PUSH
67009: LD_INT 1
67011: NEG
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 1
67019: NEG
67020: PUSH
67021: LD_INT 2
67023: NEG
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 1
67031: NEG
67032: PUSH
67033: LD_INT 1
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 2
67042: NEG
67043: PUSH
67044: LD_INT 0
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 2
67053: NEG
67054: PUSH
67055: LD_INT 1
67057: NEG
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 2
67065: NEG
67066: PUSH
67067: LD_INT 2
67069: NEG
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67089: LD_ADDR_VAR 0 53
67093: PUSH
67094: LD_INT 0
67096: PUSH
67097: LD_INT 0
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 0
67106: PUSH
67107: LD_INT 1
67109: NEG
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 1
67117: PUSH
67118: LD_INT 0
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 1
67127: PUSH
67128: LD_INT 1
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 0
67137: PUSH
67138: LD_INT 1
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 1
67147: NEG
67148: PUSH
67149: LD_INT 0
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: LD_INT 1
67158: NEG
67159: PUSH
67160: LD_INT 1
67162: NEG
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: LD_INT 1
67170: NEG
67171: PUSH
67172: LD_INT 2
67174: NEG
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 0
67182: PUSH
67183: LD_INT 2
67185: NEG
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 1
67193: PUSH
67194: LD_INT 1
67196: NEG
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 2
67204: PUSH
67205: LD_INT 0
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 2
67214: PUSH
67215: LD_INT 1
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 2
67224: PUSH
67225: LD_INT 2
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 1
67234: PUSH
67235: LD_INT 2
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 0
67244: PUSH
67245: LD_INT 2
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 1
67254: NEG
67255: PUSH
67256: LD_INT 1
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 2
67265: NEG
67266: PUSH
67267: LD_INT 0
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 2
67276: NEG
67277: PUSH
67278: LD_INT 1
67280: NEG
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 2
67288: NEG
67289: PUSH
67290: LD_INT 2
67292: NEG
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67319: LD_ADDR_VAR 0 54
67323: PUSH
67324: LD_INT 0
67326: PUSH
67327: LD_INT 0
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 0
67336: PUSH
67337: LD_INT 1
67339: NEG
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 1
67347: PUSH
67348: LD_INT 0
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 1
67357: PUSH
67358: LD_INT 1
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: LD_INT 0
67367: PUSH
67368: LD_INT 1
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: LD_INT 1
67377: NEG
67378: PUSH
67379: LD_INT 0
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: LD_INT 1
67388: NEG
67389: PUSH
67390: LD_INT 1
67392: NEG
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 1
67400: NEG
67401: PUSH
67402: LD_INT 2
67404: NEG
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 0
67412: PUSH
67413: LD_INT 2
67415: NEG
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 1
67423: PUSH
67424: LD_INT 1
67426: NEG
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 2
67434: PUSH
67435: LD_INT 0
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 2
67444: PUSH
67445: LD_INT 1
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 2
67454: PUSH
67455: LD_INT 2
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 1
67464: PUSH
67465: LD_INT 2
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 0
67474: PUSH
67475: LD_INT 2
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 1
67484: NEG
67485: PUSH
67486: LD_INT 1
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_INT 2
67495: NEG
67496: PUSH
67497: LD_INT 0
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: PUSH
67504: LD_INT 2
67506: NEG
67507: PUSH
67508: LD_INT 1
67510: NEG
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 2
67518: NEG
67519: PUSH
67520: LD_INT 2
67522: NEG
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: LIST
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67549: LD_ADDR_VAR 0 55
67553: PUSH
67554: LD_INT 0
67556: PUSH
67557: LD_INT 0
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 0
67566: PUSH
67567: LD_INT 1
67569: NEG
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 1
67577: PUSH
67578: LD_INT 0
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 1
67587: PUSH
67588: LD_INT 1
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PUSH
67595: LD_INT 0
67597: PUSH
67598: LD_INT 1
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: LD_INT 1
67607: NEG
67608: PUSH
67609: LD_INT 0
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 1
67618: NEG
67619: PUSH
67620: LD_INT 1
67622: NEG
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: LD_INT 1
67630: NEG
67631: PUSH
67632: LD_INT 2
67634: NEG
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 0
67642: PUSH
67643: LD_INT 2
67645: NEG
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 1
67653: PUSH
67654: LD_INT 1
67656: NEG
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: LD_INT 2
67664: PUSH
67665: LD_INT 0
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 2
67674: PUSH
67675: LD_INT 1
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 2
67684: PUSH
67685: LD_INT 2
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 1
67694: PUSH
67695: LD_INT 2
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 0
67704: PUSH
67705: LD_INT 2
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 1
67714: NEG
67715: PUSH
67716: LD_INT 1
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 2
67725: NEG
67726: PUSH
67727: LD_INT 0
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 2
67736: NEG
67737: PUSH
67738: LD_INT 1
67740: NEG
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 2
67748: NEG
67749: PUSH
67750: LD_INT 2
67752: NEG
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: LIST
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67779: LD_ADDR_VAR 0 56
67783: PUSH
67784: LD_INT 0
67786: PUSH
67787: LD_INT 0
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 0
67796: PUSH
67797: LD_INT 1
67799: NEG
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 1
67807: PUSH
67808: LD_INT 0
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 1
67817: PUSH
67818: LD_INT 1
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 0
67827: PUSH
67828: LD_INT 1
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 1
67837: NEG
67838: PUSH
67839: LD_INT 0
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 1
67848: NEG
67849: PUSH
67850: LD_INT 1
67852: NEG
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 1
67860: NEG
67861: PUSH
67862: LD_INT 2
67864: NEG
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 0
67872: PUSH
67873: LD_INT 2
67875: NEG
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 1
67883: PUSH
67884: LD_INT 1
67886: NEG
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: LD_INT 2
67894: PUSH
67895: LD_INT 0
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 2
67904: PUSH
67905: LD_INT 1
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: LD_INT 2
67914: PUSH
67915: LD_INT 2
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 1
67924: PUSH
67925: LD_INT 2
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 0
67934: PUSH
67935: LD_INT 2
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 1
67944: NEG
67945: PUSH
67946: LD_INT 1
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: LD_INT 2
67955: NEG
67956: PUSH
67957: LD_INT 0
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 2
67966: NEG
67967: PUSH
67968: LD_INT 1
67970: NEG
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 2
67978: NEG
67979: PUSH
67980: LD_INT 2
67982: NEG
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68009: LD_ADDR_VAR 0 57
68013: PUSH
68014: LD_INT 0
68016: PUSH
68017: LD_INT 0
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 0
68026: PUSH
68027: LD_INT 1
68029: NEG
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 1
68037: PUSH
68038: LD_INT 0
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: LD_INT 1
68047: PUSH
68048: LD_INT 1
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: LD_INT 0
68057: PUSH
68058: LD_INT 1
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 1
68067: NEG
68068: PUSH
68069: LD_INT 0
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_INT 1
68078: NEG
68079: PUSH
68080: LD_INT 1
68082: NEG
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 1
68090: NEG
68091: PUSH
68092: LD_INT 2
68094: NEG
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: LD_INT 0
68102: PUSH
68103: LD_INT 2
68105: NEG
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 1
68113: PUSH
68114: LD_INT 1
68116: NEG
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 2
68124: PUSH
68125: LD_INT 0
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 2
68134: PUSH
68135: LD_INT 1
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 2
68144: PUSH
68145: LD_INT 2
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 1
68154: PUSH
68155: LD_INT 2
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 0
68164: PUSH
68165: LD_INT 2
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 1
68174: NEG
68175: PUSH
68176: LD_INT 1
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 2
68185: NEG
68186: PUSH
68187: LD_INT 0
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 2
68196: NEG
68197: PUSH
68198: LD_INT 1
68200: NEG
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 2
68208: NEG
68209: PUSH
68210: LD_INT 2
68212: NEG
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: LIST
68225: LIST
68226: LIST
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68239: LD_ADDR_VAR 0 58
68243: PUSH
68244: LD_INT 0
68246: PUSH
68247: LD_INT 0
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 0
68256: PUSH
68257: LD_INT 1
68259: NEG
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 1
68267: PUSH
68268: LD_INT 0
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 1
68277: PUSH
68278: LD_INT 1
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 0
68287: PUSH
68288: LD_INT 1
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 1
68297: NEG
68298: PUSH
68299: LD_INT 0
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 1
68308: NEG
68309: PUSH
68310: LD_INT 1
68312: NEG
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 1
68320: NEG
68321: PUSH
68322: LD_INT 2
68324: NEG
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: LD_INT 0
68332: PUSH
68333: LD_INT 2
68335: NEG
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 1
68343: PUSH
68344: LD_INT 1
68346: NEG
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 2
68354: PUSH
68355: LD_INT 0
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 2
68364: PUSH
68365: LD_INT 1
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 2
68374: PUSH
68375: LD_INT 2
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 1
68384: PUSH
68385: LD_INT 2
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 0
68394: PUSH
68395: LD_INT 2
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: LD_INT 1
68404: NEG
68405: PUSH
68406: LD_INT 1
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 2
68415: NEG
68416: PUSH
68417: LD_INT 0
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 2
68426: NEG
68427: PUSH
68428: LD_INT 1
68430: NEG
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 2
68438: NEG
68439: PUSH
68440: LD_INT 2
68442: NEG
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68469: LD_ADDR_VAR 0 59
68473: PUSH
68474: LD_INT 0
68476: PUSH
68477: LD_INT 0
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 0
68486: PUSH
68487: LD_INT 1
68489: NEG
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 1
68497: PUSH
68498: LD_INT 0
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 1
68507: PUSH
68508: LD_INT 1
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 0
68517: PUSH
68518: LD_INT 1
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: LD_INT 1
68527: NEG
68528: PUSH
68529: LD_INT 0
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: LD_INT 1
68538: NEG
68539: PUSH
68540: LD_INT 1
68542: NEG
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68557: LD_ADDR_VAR 0 60
68561: PUSH
68562: LD_INT 0
68564: PUSH
68565: LD_INT 0
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 0
68574: PUSH
68575: LD_INT 1
68577: NEG
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 1
68585: PUSH
68586: LD_INT 0
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: LD_INT 1
68595: PUSH
68596: LD_INT 1
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PUSH
68603: LD_INT 0
68605: PUSH
68606: LD_INT 1
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 1
68615: NEG
68616: PUSH
68617: LD_INT 0
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 1
68626: NEG
68627: PUSH
68628: LD_INT 1
68630: NEG
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: LIST
68640: LIST
68641: LIST
68642: LIST
68643: LIST
68644: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68645: LD_ADDR_VAR 0 61
68649: PUSH
68650: LD_INT 0
68652: PUSH
68653: LD_INT 0
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 0
68662: PUSH
68663: LD_INT 1
68665: NEG
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 1
68673: PUSH
68674: LD_INT 0
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 1
68683: PUSH
68684: LD_INT 1
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: LD_INT 0
68693: PUSH
68694: LD_INT 1
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: LD_INT 1
68703: NEG
68704: PUSH
68705: LD_INT 0
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 1
68714: NEG
68715: PUSH
68716: LD_INT 1
68718: NEG
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68733: LD_ADDR_VAR 0 62
68737: PUSH
68738: LD_INT 0
68740: PUSH
68741: LD_INT 0
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: LD_INT 0
68750: PUSH
68751: LD_INT 1
68753: NEG
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 1
68761: PUSH
68762: LD_INT 0
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 1
68771: PUSH
68772: LD_INT 1
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: LD_INT 0
68781: PUSH
68782: LD_INT 1
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 1
68791: NEG
68792: PUSH
68793: LD_INT 0
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 1
68802: NEG
68803: PUSH
68804: LD_INT 1
68806: NEG
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68821: LD_ADDR_VAR 0 63
68825: PUSH
68826: LD_INT 0
68828: PUSH
68829: LD_INT 0
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: PUSH
68836: LD_INT 0
68838: PUSH
68839: LD_INT 1
68841: NEG
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: PUSH
68847: LD_INT 1
68849: PUSH
68850: LD_INT 0
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 1
68859: PUSH
68860: LD_INT 1
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: LD_INT 0
68869: PUSH
68870: LD_INT 1
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 1
68879: NEG
68880: PUSH
68881: LD_INT 0
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 1
68890: NEG
68891: PUSH
68892: LD_INT 1
68894: NEG
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: LIST
68907: LIST
68908: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68909: LD_ADDR_VAR 0 64
68913: PUSH
68914: LD_INT 0
68916: PUSH
68917: LD_INT 0
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 0
68926: PUSH
68927: LD_INT 1
68929: NEG
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: PUSH
68935: LD_INT 1
68937: PUSH
68938: LD_INT 0
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 1
68947: PUSH
68948: LD_INT 1
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: PUSH
68955: LD_INT 0
68957: PUSH
68958: LD_INT 1
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: LD_INT 1
68967: NEG
68968: PUSH
68969: LD_INT 0
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 1
68978: NEG
68979: PUSH
68980: LD_INT 1
68982: NEG
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: ST_TO_ADDR
// end ; 1 :
68997: GO 74894
68999: LD_INT 1
69001: DOUBLE
69002: EQUAL
69003: IFTRUE 69007
69005: GO 71630
69007: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69008: LD_ADDR_VAR 0 11
69012: PUSH
69013: LD_INT 1
69015: NEG
69016: PUSH
69017: LD_INT 3
69019: NEG
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 0
69027: PUSH
69028: LD_INT 3
69030: NEG
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 1
69038: PUSH
69039: LD_INT 2
69041: NEG
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: LIST
69051: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69052: LD_ADDR_VAR 0 12
69056: PUSH
69057: LD_INT 2
69059: PUSH
69060: LD_INT 1
69062: NEG
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: LD_INT 3
69070: PUSH
69071: LD_INT 0
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 3
69080: PUSH
69081: LD_INT 1
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: LIST
69092: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69093: LD_ADDR_VAR 0 13
69097: PUSH
69098: LD_INT 3
69100: PUSH
69101: LD_INT 2
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 3
69110: PUSH
69111: LD_INT 3
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: PUSH
69118: LD_INT 2
69120: PUSH
69121: LD_INT 3
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: LIST
69132: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69133: LD_ADDR_VAR 0 14
69137: PUSH
69138: LD_INT 1
69140: PUSH
69141: LD_INT 3
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 0
69150: PUSH
69151: LD_INT 3
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 1
69160: NEG
69161: PUSH
69162: LD_INT 2
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: LIST
69173: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69174: LD_ADDR_VAR 0 15
69178: PUSH
69179: LD_INT 2
69181: NEG
69182: PUSH
69183: LD_INT 1
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 3
69192: NEG
69193: PUSH
69194: LD_INT 0
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: PUSH
69201: LD_INT 3
69203: NEG
69204: PUSH
69205: LD_INT 1
69207: NEG
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: LIST
69217: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69218: LD_ADDR_VAR 0 16
69222: PUSH
69223: LD_INT 2
69225: NEG
69226: PUSH
69227: LD_INT 3
69229: NEG
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: LD_INT 3
69237: NEG
69238: PUSH
69239: LD_INT 2
69241: NEG
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: LD_INT 3
69249: NEG
69250: PUSH
69251: LD_INT 3
69253: NEG
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: LIST
69263: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69264: LD_ADDR_VAR 0 17
69268: PUSH
69269: LD_INT 1
69271: NEG
69272: PUSH
69273: LD_INT 3
69275: NEG
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 0
69283: PUSH
69284: LD_INT 3
69286: NEG
69287: PUSH
69288: EMPTY
69289: LIST
69290: LIST
69291: PUSH
69292: LD_INT 1
69294: PUSH
69295: LD_INT 2
69297: NEG
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: LIST
69307: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69308: LD_ADDR_VAR 0 18
69312: PUSH
69313: LD_INT 2
69315: PUSH
69316: LD_INT 1
69318: NEG
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 3
69326: PUSH
69327: LD_INT 0
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 3
69336: PUSH
69337: LD_INT 1
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: LIST
69348: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69349: LD_ADDR_VAR 0 19
69353: PUSH
69354: LD_INT 3
69356: PUSH
69357: LD_INT 2
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: LD_INT 3
69366: PUSH
69367: LD_INT 3
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: PUSH
69374: LD_INT 2
69376: PUSH
69377: LD_INT 3
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: LIST
69388: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69389: LD_ADDR_VAR 0 20
69393: PUSH
69394: LD_INT 1
69396: PUSH
69397: LD_INT 3
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 0
69406: PUSH
69407: LD_INT 3
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 1
69416: NEG
69417: PUSH
69418: LD_INT 2
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: LIST
69429: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69430: LD_ADDR_VAR 0 21
69434: PUSH
69435: LD_INT 2
69437: NEG
69438: PUSH
69439: LD_INT 1
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 3
69448: NEG
69449: PUSH
69450: LD_INT 0
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 3
69459: NEG
69460: PUSH
69461: LD_INT 1
69463: NEG
69464: PUSH
69465: EMPTY
69466: LIST
69467: LIST
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: LIST
69473: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69474: LD_ADDR_VAR 0 22
69478: PUSH
69479: LD_INT 2
69481: NEG
69482: PUSH
69483: LD_INT 3
69485: NEG
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: PUSH
69491: LD_INT 3
69493: NEG
69494: PUSH
69495: LD_INT 2
69497: NEG
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PUSH
69503: LD_INT 3
69505: NEG
69506: PUSH
69507: LD_INT 3
69509: NEG
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: LIST
69519: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
69520: LD_ADDR_VAR 0 23
69524: PUSH
69525: LD_INT 0
69527: PUSH
69528: LD_INT 3
69530: NEG
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: LD_INT 1
69538: NEG
69539: PUSH
69540: LD_INT 4
69542: NEG
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 1
69550: PUSH
69551: LD_INT 3
69553: NEG
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: LIST
69563: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
69564: LD_ADDR_VAR 0 24
69568: PUSH
69569: LD_INT 3
69571: PUSH
69572: LD_INT 0
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PUSH
69579: LD_INT 3
69581: PUSH
69582: LD_INT 1
69584: NEG
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 4
69592: PUSH
69593: LD_INT 1
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: LIST
69604: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
69605: LD_ADDR_VAR 0 25
69609: PUSH
69610: LD_INT 3
69612: PUSH
69613: LD_INT 3
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 4
69622: PUSH
69623: LD_INT 3
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 3
69632: PUSH
69633: LD_INT 4
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: LIST
69644: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
69645: LD_ADDR_VAR 0 26
69649: PUSH
69650: LD_INT 0
69652: PUSH
69653: LD_INT 3
69655: PUSH
69656: EMPTY
69657: LIST
69658: LIST
69659: PUSH
69660: LD_INT 1
69662: PUSH
69663: LD_INT 4
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_INT 1
69672: NEG
69673: PUSH
69674: LD_INT 3
69676: PUSH
69677: EMPTY
69678: LIST
69679: LIST
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: LIST
69685: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
69686: LD_ADDR_VAR 0 27
69690: PUSH
69691: LD_INT 3
69693: NEG
69694: PUSH
69695: LD_INT 0
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: LD_INT 3
69704: NEG
69705: PUSH
69706: LD_INT 1
69708: PUSH
69709: EMPTY
69710: LIST
69711: LIST
69712: PUSH
69713: LD_INT 4
69715: NEG
69716: PUSH
69717: LD_INT 1
69719: NEG
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: LIST
69729: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
69730: LD_ADDR_VAR 0 28
69734: PUSH
69735: LD_INT 3
69737: NEG
69738: PUSH
69739: LD_INT 3
69741: NEG
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 3
69749: NEG
69750: PUSH
69751: LD_INT 4
69753: NEG
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 4
69761: NEG
69762: PUSH
69763: LD_INT 3
69765: NEG
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: LIST
69775: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
69776: LD_ADDR_VAR 0 29
69780: PUSH
69781: LD_INT 1
69783: NEG
69784: PUSH
69785: LD_INT 3
69787: NEG
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: PUSH
69793: LD_INT 0
69795: PUSH
69796: LD_INT 3
69798: NEG
69799: PUSH
69800: EMPTY
69801: LIST
69802: LIST
69803: PUSH
69804: LD_INT 1
69806: PUSH
69807: LD_INT 2
69809: NEG
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: LD_INT 1
69817: NEG
69818: PUSH
69819: LD_INT 4
69821: NEG
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: LD_INT 0
69829: PUSH
69830: LD_INT 4
69832: NEG
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: PUSH
69838: LD_INT 1
69840: PUSH
69841: LD_INT 3
69843: NEG
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: LD_INT 1
69851: NEG
69852: PUSH
69853: LD_INT 5
69855: NEG
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: LD_INT 0
69863: PUSH
69864: LD_INT 5
69866: NEG
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: PUSH
69872: LD_INT 1
69874: PUSH
69875: LD_INT 4
69877: NEG
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_INT 1
69885: NEG
69886: PUSH
69887: LD_INT 6
69889: NEG
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 0
69897: PUSH
69898: LD_INT 6
69900: NEG
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 1
69908: PUSH
69909: LD_INT 5
69911: NEG
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: EMPTY
69918: LIST
69919: LIST
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
69931: LD_ADDR_VAR 0 30
69935: PUSH
69936: LD_INT 2
69938: PUSH
69939: LD_INT 1
69941: NEG
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 3
69949: PUSH
69950: LD_INT 0
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 3
69959: PUSH
69960: LD_INT 1
69962: PUSH
69963: EMPTY
69964: LIST
69965: LIST
69966: PUSH
69967: LD_INT 3
69969: PUSH
69970: LD_INT 1
69972: NEG
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 4
69980: PUSH
69981: LD_INT 0
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 4
69990: PUSH
69991: LD_INT 1
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 4
70000: PUSH
70001: LD_INT 1
70003: NEG
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_INT 5
70011: PUSH
70012: LD_INT 0
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: LD_INT 5
70021: PUSH
70022: LD_INT 1
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 5
70031: PUSH
70032: LD_INT 1
70034: NEG
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 6
70042: PUSH
70043: LD_INT 0
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: PUSH
70050: LD_INT 6
70052: PUSH
70053: LD_INT 1
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
70074: LD_ADDR_VAR 0 31
70078: PUSH
70079: LD_INT 3
70081: PUSH
70082: LD_INT 2
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 3
70091: PUSH
70092: LD_INT 3
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 2
70101: PUSH
70102: LD_INT 3
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 4
70111: PUSH
70112: LD_INT 3
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: PUSH
70119: LD_INT 4
70121: PUSH
70122: LD_INT 4
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: PUSH
70129: LD_INT 3
70131: PUSH
70132: LD_INT 4
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 5
70141: PUSH
70142: LD_INT 4
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PUSH
70149: LD_INT 5
70151: PUSH
70152: LD_INT 5
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: PUSH
70159: LD_INT 4
70161: PUSH
70162: LD_INT 5
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: PUSH
70169: LD_INT 6
70171: PUSH
70172: LD_INT 5
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: PUSH
70179: LD_INT 6
70181: PUSH
70182: LD_INT 6
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 5
70191: PUSH
70192: LD_INT 6
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PUSH
70199: EMPTY
70200: LIST
70201: LIST
70202: LIST
70203: LIST
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: LIST
70212: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
70213: LD_ADDR_VAR 0 32
70217: PUSH
70218: LD_INT 1
70220: PUSH
70221: LD_INT 3
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PUSH
70228: LD_INT 0
70230: PUSH
70231: LD_INT 3
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: LD_INT 1
70240: NEG
70241: PUSH
70242: LD_INT 2
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: PUSH
70249: LD_INT 1
70251: PUSH
70252: LD_INT 4
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: LD_INT 0
70261: PUSH
70262: LD_INT 4
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: PUSH
70269: LD_INT 1
70271: NEG
70272: PUSH
70273: LD_INT 3
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: PUSH
70280: LD_INT 1
70282: PUSH
70283: LD_INT 5
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 0
70292: PUSH
70293: LD_INT 5
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: PUSH
70300: LD_INT 1
70302: NEG
70303: PUSH
70304: LD_INT 4
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 1
70313: PUSH
70314: LD_INT 6
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: LD_INT 0
70323: PUSH
70324: LD_INT 6
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: LD_INT 1
70333: NEG
70334: PUSH
70335: LD_INT 5
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
70356: LD_ADDR_VAR 0 33
70360: PUSH
70361: LD_INT 2
70363: NEG
70364: PUSH
70365: LD_INT 1
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 3
70374: NEG
70375: PUSH
70376: LD_INT 0
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: PUSH
70383: LD_INT 3
70385: NEG
70386: PUSH
70387: LD_INT 1
70389: NEG
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: LD_INT 3
70397: NEG
70398: PUSH
70399: LD_INT 1
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: PUSH
70406: LD_INT 4
70408: NEG
70409: PUSH
70410: LD_INT 0
70412: PUSH
70413: EMPTY
70414: LIST
70415: LIST
70416: PUSH
70417: LD_INT 4
70419: NEG
70420: PUSH
70421: LD_INT 1
70423: NEG
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: PUSH
70429: LD_INT 4
70431: NEG
70432: PUSH
70433: LD_INT 1
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 5
70442: NEG
70443: PUSH
70444: LD_INT 0
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 5
70453: NEG
70454: PUSH
70455: LD_INT 1
70457: NEG
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 5
70465: NEG
70466: PUSH
70467: LD_INT 1
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: PUSH
70474: LD_INT 6
70476: NEG
70477: PUSH
70478: LD_INT 0
70480: PUSH
70481: EMPTY
70482: LIST
70483: LIST
70484: PUSH
70485: LD_INT 6
70487: NEG
70488: PUSH
70489: LD_INT 1
70491: NEG
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
70511: LD_ADDR_VAR 0 34
70515: PUSH
70516: LD_INT 2
70518: NEG
70519: PUSH
70520: LD_INT 3
70522: NEG
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 3
70530: NEG
70531: PUSH
70532: LD_INT 2
70534: NEG
70535: PUSH
70536: EMPTY
70537: LIST
70538: LIST
70539: PUSH
70540: LD_INT 3
70542: NEG
70543: PUSH
70544: LD_INT 3
70546: NEG
70547: PUSH
70548: EMPTY
70549: LIST
70550: LIST
70551: PUSH
70552: LD_INT 3
70554: NEG
70555: PUSH
70556: LD_INT 4
70558: NEG
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 4
70566: NEG
70567: PUSH
70568: LD_INT 3
70570: NEG
70571: PUSH
70572: EMPTY
70573: LIST
70574: LIST
70575: PUSH
70576: LD_INT 4
70578: NEG
70579: PUSH
70580: LD_INT 4
70582: NEG
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: PUSH
70588: LD_INT 4
70590: NEG
70591: PUSH
70592: LD_INT 5
70594: NEG
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: PUSH
70600: LD_INT 5
70602: NEG
70603: PUSH
70604: LD_INT 4
70606: NEG
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: LD_INT 5
70614: NEG
70615: PUSH
70616: LD_INT 5
70618: NEG
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: PUSH
70624: LD_INT 5
70626: NEG
70627: PUSH
70628: LD_INT 6
70630: NEG
70631: PUSH
70632: EMPTY
70633: LIST
70634: LIST
70635: PUSH
70636: LD_INT 6
70638: NEG
70639: PUSH
70640: LD_INT 5
70642: NEG
70643: PUSH
70644: EMPTY
70645: LIST
70646: LIST
70647: PUSH
70648: LD_INT 6
70650: NEG
70651: PUSH
70652: LD_INT 6
70654: NEG
70655: PUSH
70656: EMPTY
70657: LIST
70658: LIST
70659: PUSH
70660: EMPTY
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
70674: LD_ADDR_VAR 0 41
70678: PUSH
70679: LD_INT 0
70681: PUSH
70682: LD_INT 2
70684: NEG
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PUSH
70690: LD_INT 1
70692: NEG
70693: PUSH
70694: LD_INT 3
70696: NEG
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: PUSH
70702: LD_INT 1
70704: PUSH
70705: LD_INT 2
70707: NEG
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: LIST
70717: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
70718: LD_ADDR_VAR 0 42
70722: PUSH
70723: LD_INT 2
70725: PUSH
70726: LD_INT 0
70728: PUSH
70729: EMPTY
70730: LIST
70731: LIST
70732: PUSH
70733: LD_INT 2
70735: PUSH
70736: LD_INT 1
70738: NEG
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: PUSH
70744: LD_INT 3
70746: PUSH
70747: LD_INT 1
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: LIST
70758: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
70759: LD_ADDR_VAR 0 43
70763: PUSH
70764: LD_INT 2
70766: PUSH
70767: LD_INT 2
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: PUSH
70774: LD_INT 3
70776: PUSH
70777: LD_INT 2
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: LD_INT 2
70786: PUSH
70787: LD_INT 3
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: LIST
70798: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
70799: LD_ADDR_VAR 0 44
70803: PUSH
70804: LD_INT 0
70806: PUSH
70807: LD_INT 2
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: PUSH
70814: LD_INT 1
70816: PUSH
70817: LD_INT 3
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: PUSH
70824: LD_INT 1
70826: NEG
70827: PUSH
70828: LD_INT 2
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: LIST
70839: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70840: LD_ADDR_VAR 0 45
70844: PUSH
70845: LD_INT 2
70847: NEG
70848: PUSH
70849: LD_INT 0
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: PUSH
70856: LD_INT 2
70858: NEG
70859: PUSH
70860: LD_INT 1
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 3
70869: NEG
70870: PUSH
70871: LD_INT 1
70873: NEG
70874: PUSH
70875: EMPTY
70876: LIST
70877: LIST
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: LIST
70883: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
70884: LD_ADDR_VAR 0 46
70888: PUSH
70889: LD_INT 2
70891: NEG
70892: PUSH
70893: LD_INT 2
70895: NEG
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: PUSH
70901: LD_INT 2
70903: NEG
70904: PUSH
70905: LD_INT 3
70907: NEG
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: PUSH
70913: LD_INT 3
70915: NEG
70916: PUSH
70917: LD_INT 2
70919: NEG
70920: PUSH
70921: EMPTY
70922: LIST
70923: LIST
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: LIST
70929: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
70930: LD_ADDR_VAR 0 47
70934: PUSH
70935: LD_INT 2
70937: NEG
70938: PUSH
70939: LD_INT 3
70941: NEG
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: PUSH
70947: LD_INT 1
70949: NEG
70950: PUSH
70951: LD_INT 3
70953: NEG
70954: PUSH
70955: EMPTY
70956: LIST
70957: LIST
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
70963: LD_ADDR_VAR 0 48
70967: PUSH
70968: LD_INT 1
70970: PUSH
70971: LD_INT 2
70973: NEG
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: LD_INT 2
70981: PUSH
70982: LD_INT 1
70984: NEG
70985: PUSH
70986: EMPTY
70987: LIST
70988: LIST
70989: PUSH
70990: EMPTY
70991: LIST
70992: LIST
70993: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
70994: LD_ADDR_VAR 0 49
70998: PUSH
70999: LD_INT 3
71001: PUSH
71002: LD_INT 1
71004: PUSH
71005: EMPTY
71006: LIST
71007: LIST
71008: PUSH
71009: LD_INT 3
71011: PUSH
71012: LD_INT 2
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
71023: LD_ADDR_VAR 0 50
71027: PUSH
71028: LD_INT 2
71030: PUSH
71031: LD_INT 3
71033: PUSH
71034: EMPTY
71035: LIST
71036: LIST
71037: PUSH
71038: LD_INT 1
71040: PUSH
71041: LD_INT 3
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
71052: LD_ADDR_VAR 0 51
71056: PUSH
71057: LD_INT 1
71059: NEG
71060: PUSH
71061: LD_INT 2
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: PUSH
71068: LD_INT 2
71070: NEG
71071: PUSH
71072: LD_INT 1
71074: PUSH
71075: EMPTY
71076: LIST
71077: LIST
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
71083: LD_ADDR_VAR 0 52
71087: PUSH
71088: LD_INT 3
71090: NEG
71091: PUSH
71092: LD_INT 1
71094: NEG
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: PUSH
71100: LD_INT 3
71102: NEG
71103: PUSH
71104: LD_INT 2
71106: NEG
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71116: LD_ADDR_VAR 0 53
71120: PUSH
71121: LD_INT 1
71123: NEG
71124: PUSH
71125: LD_INT 3
71127: NEG
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 0
71135: PUSH
71136: LD_INT 3
71138: NEG
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: LD_INT 1
71146: PUSH
71147: LD_INT 2
71149: NEG
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: LIST
71159: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71160: LD_ADDR_VAR 0 54
71164: PUSH
71165: LD_INT 2
71167: PUSH
71168: LD_INT 1
71170: NEG
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: PUSH
71176: LD_INT 3
71178: PUSH
71179: LD_INT 0
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: PUSH
71186: LD_INT 3
71188: PUSH
71189: LD_INT 1
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: PUSH
71196: EMPTY
71197: LIST
71198: LIST
71199: LIST
71200: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71201: LD_ADDR_VAR 0 55
71205: PUSH
71206: LD_INT 3
71208: PUSH
71209: LD_INT 2
71211: PUSH
71212: EMPTY
71213: LIST
71214: LIST
71215: PUSH
71216: LD_INT 3
71218: PUSH
71219: LD_INT 3
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: PUSH
71226: LD_INT 2
71228: PUSH
71229: LD_INT 3
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: LIST
71240: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71241: LD_ADDR_VAR 0 56
71245: PUSH
71246: LD_INT 1
71248: PUSH
71249: LD_INT 3
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 0
71258: PUSH
71259: LD_INT 3
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: LD_INT 1
71268: NEG
71269: PUSH
71270: LD_INT 2
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: LIST
71281: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71282: LD_ADDR_VAR 0 57
71286: PUSH
71287: LD_INT 2
71289: NEG
71290: PUSH
71291: LD_INT 1
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: PUSH
71298: LD_INT 3
71300: NEG
71301: PUSH
71302: LD_INT 0
71304: PUSH
71305: EMPTY
71306: LIST
71307: LIST
71308: PUSH
71309: LD_INT 3
71311: NEG
71312: PUSH
71313: LD_INT 1
71315: NEG
71316: PUSH
71317: EMPTY
71318: LIST
71319: LIST
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: LIST
71325: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71326: LD_ADDR_VAR 0 58
71330: PUSH
71331: LD_INT 2
71333: NEG
71334: PUSH
71335: LD_INT 3
71337: NEG
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PUSH
71343: LD_INT 3
71345: NEG
71346: PUSH
71347: LD_INT 2
71349: NEG
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: PUSH
71355: LD_INT 3
71357: NEG
71358: PUSH
71359: LD_INT 3
71361: NEG
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: LIST
71371: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
71372: LD_ADDR_VAR 0 59
71376: PUSH
71377: LD_INT 1
71379: NEG
71380: PUSH
71381: LD_INT 2
71383: NEG
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 0
71391: PUSH
71392: LD_INT 2
71394: NEG
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: PUSH
71400: LD_INT 1
71402: PUSH
71403: LD_INT 1
71405: NEG
71406: PUSH
71407: EMPTY
71408: LIST
71409: LIST
71410: PUSH
71411: EMPTY
71412: LIST
71413: LIST
71414: LIST
71415: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71416: LD_ADDR_VAR 0 60
71420: PUSH
71421: LD_INT 1
71423: PUSH
71424: LD_INT 1
71426: NEG
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: PUSH
71432: LD_INT 2
71434: PUSH
71435: LD_INT 0
71437: PUSH
71438: EMPTY
71439: LIST
71440: LIST
71441: PUSH
71442: LD_INT 2
71444: PUSH
71445: LD_INT 1
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: LIST
71456: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
71457: LD_ADDR_VAR 0 61
71461: PUSH
71462: LD_INT 2
71464: PUSH
71465: LD_INT 1
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: PUSH
71472: LD_INT 2
71474: PUSH
71475: LD_INT 2
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: PUSH
71482: LD_INT 1
71484: PUSH
71485: LD_INT 2
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: EMPTY
71493: LIST
71494: LIST
71495: LIST
71496: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
71497: LD_ADDR_VAR 0 62
71501: PUSH
71502: LD_INT 1
71504: PUSH
71505: LD_INT 2
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: PUSH
71512: LD_INT 0
71514: PUSH
71515: LD_INT 2
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: PUSH
71522: LD_INT 1
71524: NEG
71525: PUSH
71526: LD_INT 1
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: PUSH
71533: EMPTY
71534: LIST
71535: LIST
71536: LIST
71537: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
71538: LD_ADDR_VAR 0 63
71542: PUSH
71543: LD_INT 1
71545: NEG
71546: PUSH
71547: LD_INT 1
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: PUSH
71554: LD_INT 2
71556: NEG
71557: PUSH
71558: LD_INT 0
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: LD_INT 2
71567: NEG
71568: PUSH
71569: LD_INT 1
71571: NEG
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: LIST
71581: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71582: LD_ADDR_VAR 0 64
71586: PUSH
71587: LD_INT 1
71589: NEG
71590: PUSH
71591: LD_INT 2
71593: NEG
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: PUSH
71599: LD_INT 2
71601: NEG
71602: PUSH
71603: LD_INT 1
71605: NEG
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 2
71613: NEG
71614: PUSH
71615: LD_INT 2
71617: NEG
71618: PUSH
71619: EMPTY
71620: LIST
71621: LIST
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: LIST
71627: ST_TO_ADDR
// end ; 2 :
71628: GO 74894
71630: LD_INT 2
71632: DOUBLE
71633: EQUAL
71634: IFTRUE 71638
71636: GO 74893
71638: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
71639: LD_ADDR_VAR 0 29
71643: PUSH
71644: LD_INT 4
71646: PUSH
71647: LD_INT 0
71649: PUSH
71650: EMPTY
71651: LIST
71652: LIST
71653: PUSH
71654: LD_INT 4
71656: PUSH
71657: LD_INT 1
71659: NEG
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: PUSH
71665: LD_INT 5
71667: PUSH
71668: LD_INT 0
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: PUSH
71675: LD_INT 5
71677: PUSH
71678: LD_INT 1
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: LD_INT 4
71687: PUSH
71688: LD_INT 1
71690: PUSH
71691: EMPTY
71692: LIST
71693: LIST
71694: PUSH
71695: LD_INT 3
71697: PUSH
71698: LD_INT 0
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: PUSH
71705: LD_INT 3
71707: PUSH
71708: LD_INT 1
71710: NEG
71711: PUSH
71712: EMPTY
71713: LIST
71714: LIST
71715: PUSH
71716: LD_INT 3
71718: PUSH
71719: LD_INT 2
71721: NEG
71722: PUSH
71723: EMPTY
71724: LIST
71725: LIST
71726: PUSH
71727: LD_INT 5
71729: PUSH
71730: LD_INT 2
71732: PUSH
71733: EMPTY
71734: LIST
71735: LIST
71736: PUSH
71737: LD_INT 3
71739: PUSH
71740: LD_INT 3
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PUSH
71747: LD_INT 3
71749: PUSH
71750: LD_INT 2
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: PUSH
71757: LD_INT 4
71759: PUSH
71760: LD_INT 3
71762: PUSH
71763: EMPTY
71764: LIST
71765: LIST
71766: PUSH
71767: LD_INT 4
71769: PUSH
71770: LD_INT 4
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: PUSH
71777: LD_INT 3
71779: PUSH
71780: LD_INT 4
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: LD_INT 2
71789: PUSH
71790: LD_INT 3
71792: PUSH
71793: EMPTY
71794: LIST
71795: LIST
71796: PUSH
71797: LD_INT 2
71799: PUSH
71800: LD_INT 2
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: PUSH
71807: LD_INT 4
71809: PUSH
71810: LD_INT 2
71812: PUSH
71813: EMPTY
71814: LIST
71815: LIST
71816: PUSH
71817: LD_INT 2
71819: PUSH
71820: LD_INT 4
71822: PUSH
71823: EMPTY
71824: LIST
71825: LIST
71826: PUSH
71827: LD_INT 0
71829: PUSH
71830: LD_INT 4
71832: PUSH
71833: EMPTY
71834: LIST
71835: LIST
71836: PUSH
71837: LD_INT 0
71839: PUSH
71840: LD_INT 3
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: PUSH
71847: LD_INT 1
71849: PUSH
71850: LD_INT 4
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: PUSH
71857: LD_INT 1
71859: PUSH
71860: LD_INT 5
71862: PUSH
71863: EMPTY
71864: LIST
71865: LIST
71866: PUSH
71867: LD_INT 0
71869: PUSH
71870: LD_INT 5
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: PUSH
71877: LD_INT 1
71879: NEG
71880: PUSH
71881: LD_INT 4
71883: PUSH
71884: EMPTY
71885: LIST
71886: LIST
71887: PUSH
71888: LD_INT 1
71890: NEG
71891: PUSH
71892: LD_INT 3
71894: PUSH
71895: EMPTY
71896: LIST
71897: LIST
71898: PUSH
71899: LD_INT 2
71901: PUSH
71902: LD_INT 5
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: PUSH
71909: LD_INT 2
71911: NEG
71912: PUSH
71913: LD_INT 3
71915: PUSH
71916: EMPTY
71917: LIST
71918: LIST
71919: PUSH
71920: LD_INT 3
71922: NEG
71923: PUSH
71924: LD_INT 0
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: PUSH
71931: LD_INT 3
71933: NEG
71934: PUSH
71935: LD_INT 1
71937: NEG
71938: PUSH
71939: EMPTY
71940: LIST
71941: LIST
71942: PUSH
71943: LD_INT 2
71945: NEG
71946: PUSH
71947: LD_INT 0
71949: PUSH
71950: EMPTY
71951: LIST
71952: LIST
71953: PUSH
71954: LD_INT 2
71956: NEG
71957: PUSH
71958: LD_INT 1
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: PUSH
71965: LD_INT 3
71967: NEG
71968: PUSH
71969: LD_INT 1
71971: PUSH
71972: EMPTY
71973: LIST
71974: LIST
71975: PUSH
71976: LD_INT 4
71978: NEG
71979: PUSH
71980: LD_INT 0
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: PUSH
71987: LD_INT 4
71989: NEG
71990: PUSH
71991: LD_INT 1
71993: NEG
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: PUSH
71999: LD_INT 4
72001: NEG
72002: PUSH
72003: LD_INT 2
72005: NEG
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PUSH
72011: LD_INT 2
72013: NEG
72014: PUSH
72015: LD_INT 2
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: PUSH
72022: LD_INT 4
72024: NEG
72025: PUSH
72026: LD_INT 4
72028: NEG
72029: PUSH
72030: EMPTY
72031: LIST
72032: LIST
72033: PUSH
72034: LD_INT 4
72036: NEG
72037: PUSH
72038: LD_INT 5
72040: NEG
72041: PUSH
72042: EMPTY
72043: LIST
72044: LIST
72045: PUSH
72046: LD_INT 3
72048: NEG
72049: PUSH
72050: LD_INT 4
72052: NEG
72053: PUSH
72054: EMPTY
72055: LIST
72056: LIST
72057: PUSH
72058: LD_INT 3
72060: NEG
72061: PUSH
72062: LD_INT 3
72064: NEG
72065: PUSH
72066: EMPTY
72067: LIST
72068: LIST
72069: PUSH
72070: LD_INT 4
72072: NEG
72073: PUSH
72074: LD_INT 3
72076: NEG
72077: PUSH
72078: EMPTY
72079: LIST
72080: LIST
72081: PUSH
72082: LD_INT 5
72084: NEG
72085: PUSH
72086: LD_INT 4
72088: NEG
72089: PUSH
72090: EMPTY
72091: LIST
72092: LIST
72093: PUSH
72094: LD_INT 5
72096: NEG
72097: PUSH
72098: LD_INT 5
72100: NEG
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: PUSH
72106: LD_INT 3
72108: NEG
72109: PUSH
72110: LD_INT 5
72112: NEG
72113: PUSH
72114: EMPTY
72115: LIST
72116: LIST
72117: PUSH
72118: LD_INT 5
72120: NEG
72121: PUSH
72122: LD_INT 3
72124: NEG
72125: PUSH
72126: EMPTY
72127: LIST
72128: LIST
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: LIST
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
72177: LD_ADDR_VAR 0 30
72181: PUSH
72182: LD_INT 4
72184: PUSH
72185: LD_INT 4
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: PUSH
72192: LD_INT 4
72194: PUSH
72195: LD_INT 3
72197: PUSH
72198: EMPTY
72199: LIST
72200: LIST
72201: PUSH
72202: LD_INT 5
72204: PUSH
72205: LD_INT 4
72207: PUSH
72208: EMPTY
72209: LIST
72210: LIST
72211: PUSH
72212: LD_INT 5
72214: PUSH
72215: LD_INT 5
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: PUSH
72222: LD_INT 4
72224: PUSH
72225: LD_INT 5
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: PUSH
72232: LD_INT 3
72234: PUSH
72235: LD_INT 4
72237: PUSH
72238: EMPTY
72239: LIST
72240: LIST
72241: PUSH
72242: LD_INT 3
72244: PUSH
72245: LD_INT 3
72247: PUSH
72248: EMPTY
72249: LIST
72250: LIST
72251: PUSH
72252: LD_INT 5
72254: PUSH
72255: LD_INT 3
72257: PUSH
72258: EMPTY
72259: LIST
72260: LIST
72261: PUSH
72262: LD_INT 3
72264: PUSH
72265: LD_INT 5
72267: PUSH
72268: EMPTY
72269: LIST
72270: LIST
72271: PUSH
72272: LD_INT 0
72274: PUSH
72275: LD_INT 3
72277: PUSH
72278: EMPTY
72279: LIST
72280: LIST
72281: PUSH
72282: LD_INT 0
72284: PUSH
72285: LD_INT 2
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: PUSH
72292: LD_INT 1
72294: PUSH
72295: LD_INT 3
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: PUSH
72302: LD_INT 1
72304: PUSH
72305: LD_INT 4
72307: PUSH
72308: EMPTY
72309: LIST
72310: LIST
72311: PUSH
72312: LD_INT 0
72314: PUSH
72315: LD_INT 4
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: PUSH
72322: LD_INT 1
72324: NEG
72325: PUSH
72326: LD_INT 3
72328: PUSH
72329: EMPTY
72330: LIST
72331: LIST
72332: PUSH
72333: LD_INT 1
72335: NEG
72336: PUSH
72337: LD_INT 2
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: PUSH
72344: LD_INT 2
72346: PUSH
72347: LD_INT 4
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: PUSH
72354: LD_INT 2
72356: NEG
72357: PUSH
72358: LD_INT 2
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: PUSH
72365: LD_INT 4
72367: NEG
72368: PUSH
72369: LD_INT 0
72371: PUSH
72372: EMPTY
72373: LIST
72374: LIST
72375: PUSH
72376: LD_INT 4
72378: NEG
72379: PUSH
72380: LD_INT 1
72382: NEG
72383: PUSH
72384: EMPTY
72385: LIST
72386: LIST
72387: PUSH
72388: LD_INT 3
72390: NEG
72391: PUSH
72392: LD_INT 0
72394: PUSH
72395: EMPTY
72396: LIST
72397: LIST
72398: PUSH
72399: LD_INT 3
72401: NEG
72402: PUSH
72403: LD_INT 1
72405: PUSH
72406: EMPTY
72407: LIST
72408: LIST
72409: PUSH
72410: LD_INT 4
72412: NEG
72413: PUSH
72414: LD_INT 1
72416: PUSH
72417: EMPTY
72418: LIST
72419: LIST
72420: PUSH
72421: LD_INT 5
72423: NEG
72424: PUSH
72425: LD_INT 0
72427: PUSH
72428: EMPTY
72429: LIST
72430: LIST
72431: PUSH
72432: LD_INT 5
72434: NEG
72435: PUSH
72436: LD_INT 1
72438: NEG
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: PUSH
72444: LD_INT 5
72446: NEG
72447: PUSH
72448: LD_INT 2
72450: NEG
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: PUSH
72456: LD_INT 3
72458: NEG
72459: PUSH
72460: LD_INT 2
72462: PUSH
72463: EMPTY
72464: LIST
72465: LIST
72466: PUSH
72467: LD_INT 3
72469: NEG
72470: PUSH
72471: LD_INT 3
72473: NEG
72474: PUSH
72475: EMPTY
72476: LIST
72477: LIST
72478: PUSH
72479: LD_INT 3
72481: NEG
72482: PUSH
72483: LD_INT 4
72485: NEG
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: PUSH
72491: LD_INT 2
72493: NEG
72494: PUSH
72495: LD_INT 3
72497: NEG
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: PUSH
72503: LD_INT 2
72505: NEG
72506: PUSH
72507: LD_INT 2
72509: NEG
72510: PUSH
72511: EMPTY
72512: LIST
72513: LIST
72514: PUSH
72515: LD_INT 3
72517: NEG
72518: PUSH
72519: LD_INT 2
72521: NEG
72522: PUSH
72523: EMPTY
72524: LIST
72525: LIST
72526: PUSH
72527: LD_INT 4
72529: NEG
72530: PUSH
72531: LD_INT 3
72533: NEG
72534: PUSH
72535: EMPTY
72536: LIST
72537: LIST
72538: PUSH
72539: LD_INT 4
72541: NEG
72542: PUSH
72543: LD_INT 4
72545: NEG
72546: PUSH
72547: EMPTY
72548: LIST
72549: LIST
72550: PUSH
72551: LD_INT 2
72553: NEG
72554: PUSH
72555: LD_INT 4
72557: NEG
72558: PUSH
72559: EMPTY
72560: LIST
72561: LIST
72562: PUSH
72563: LD_INT 4
72565: NEG
72566: PUSH
72567: LD_INT 2
72569: NEG
72570: PUSH
72571: EMPTY
72572: LIST
72573: LIST
72574: PUSH
72575: LD_INT 0
72577: PUSH
72578: LD_INT 4
72580: NEG
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: PUSH
72586: LD_INT 0
72588: PUSH
72589: LD_INT 5
72591: NEG
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: PUSH
72597: LD_INT 1
72599: PUSH
72600: LD_INT 4
72602: NEG
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: PUSH
72608: LD_INT 1
72610: PUSH
72611: LD_INT 3
72613: NEG
72614: PUSH
72615: EMPTY
72616: LIST
72617: LIST
72618: PUSH
72619: LD_INT 0
72621: PUSH
72622: LD_INT 3
72624: NEG
72625: PUSH
72626: EMPTY
72627: LIST
72628: LIST
72629: PUSH
72630: LD_INT 1
72632: NEG
72633: PUSH
72634: LD_INT 4
72636: NEG
72637: PUSH
72638: EMPTY
72639: LIST
72640: LIST
72641: PUSH
72642: LD_INT 1
72644: NEG
72645: PUSH
72646: LD_INT 5
72648: NEG
72649: PUSH
72650: EMPTY
72651: LIST
72652: LIST
72653: PUSH
72654: LD_INT 2
72656: PUSH
72657: LD_INT 3
72659: NEG
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: PUSH
72665: LD_INT 2
72667: NEG
72668: PUSH
72669: LD_INT 5
72671: NEG
72672: PUSH
72673: EMPTY
72674: LIST
72675: LIST
72676: PUSH
72677: EMPTY
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: LIST
72684: LIST
72685: LIST
72686: LIST
72687: LIST
72688: LIST
72689: LIST
72690: LIST
72691: LIST
72692: LIST
72693: LIST
72694: LIST
72695: LIST
72696: LIST
72697: LIST
72698: LIST
72699: LIST
72700: LIST
72701: LIST
72702: LIST
72703: LIST
72704: LIST
72705: LIST
72706: LIST
72707: LIST
72708: LIST
72709: LIST
72710: LIST
72711: LIST
72712: LIST
72713: LIST
72714: LIST
72715: LIST
72716: LIST
72717: LIST
72718: LIST
72719: LIST
72720: LIST
72721: LIST
72722: LIST
72723: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
72724: LD_ADDR_VAR 0 31
72728: PUSH
72729: LD_INT 0
72731: PUSH
72732: LD_INT 4
72734: PUSH
72735: EMPTY
72736: LIST
72737: LIST
72738: PUSH
72739: LD_INT 0
72741: PUSH
72742: LD_INT 3
72744: PUSH
72745: EMPTY
72746: LIST
72747: LIST
72748: PUSH
72749: LD_INT 1
72751: PUSH
72752: LD_INT 4
72754: PUSH
72755: EMPTY
72756: LIST
72757: LIST
72758: PUSH
72759: LD_INT 1
72761: PUSH
72762: LD_INT 5
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: LD_INT 0
72771: PUSH
72772: LD_INT 5
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: PUSH
72779: LD_INT 1
72781: NEG
72782: PUSH
72783: LD_INT 4
72785: PUSH
72786: EMPTY
72787: LIST
72788: LIST
72789: PUSH
72790: LD_INT 1
72792: NEG
72793: PUSH
72794: LD_INT 3
72796: PUSH
72797: EMPTY
72798: LIST
72799: LIST
72800: PUSH
72801: LD_INT 2
72803: PUSH
72804: LD_INT 5
72806: PUSH
72807: EMPTY
72808: LIST
72809: LIST
72810: PUSH
72811: LD_INT 2
72813: NEG
72814: PUSH
72815: LD_INT 3
72817: PUSH
72818: EMPTY
72819: LIST
72820: LIST
72821: PUSH
72822: LD_INT 3
72824: NEG
72825: PUSH
72826: LD_INT 0
72828: PUSH
72829: EMPTY
72830: LIST
72831: LIST
72832: PUSH
72833: LD_INT 3
72835: NEG
72836: PUSH
72837: LD_INT 1
72839: NEG
72840: PUSH
72841: EMPTY
72842: LIST
72843: LIST
72844: PUSH
72845: LD_INT 2
72847: NEG
72848: PUSH
72849: LD_INT 0
72851: PUSH
72852: EMPTY
72853: LIST
72854: LIST
72855: PUSH
72856: LD_INT 2
72858: NEG
72859: PUSH
72860: LD_INT 1
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: PUSH
72867: LD_INT 3
72869: NEG
72870: PUSH
72871: LD_INT 1
72873: PUSH
72874: EMPTY
72875: LIST
72876: LIST
72877: PUSH
72878: LD_INT 4
72880: NEG
72881: PUSH
72882: LD_INT 0
72884: PUSH
72885: EMPTY
72886: LIST
72887: LIST
72888: PUSH
72889: LD_INT 4
72891: NEG
72892: PUSH
72893: LD_INT 1
72895: NEG
72896: PUSH
72897: EMPTY
72898: LIST
72899: LIST
72900: PUSH
72901: LD_INT 4
72903: NEG
72904: PUSH
72905: LD_INT 2
72907: NEG
72908: PUSH
72909: EMPTY
72910: LIST
72911: LIST
72912: PUSH
72913: LD_INT 2
72915: NEG
72916: PUSH
72917: LD_INT 2
72919: PUSH
72920: EMPTY
72921: LIST
72922: LIST
72923: PUSH
72924: LD_INT 4
72926: NEG
72927: PUSH
72928: LD_INT 4
72930: NEG
72931: PUSH
72932: EMPTY
72933: LIST
72934: LIST
72935: PUSH
72936: LD_INT 4
72938: NEG
72939: PUSH
72940: LD_INT 5
72942: NEG
72943: PUSH
72944: EMPTY
72945: LIST
72946: LIST
72947: PUSH
72948: LD_INT 3
72950: NEG
72951: PUSH
72952: LD_INT 4
72954: NEG
72955: PUSH
72956: EMPTY
72957: LIST
72958: LIST
72959: PUSH
72960: LD_INT 3
72962: NEG
72963: PUSH
72964: LD_INT 3
72966: NEG
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: PUSH
72972: LD_INT 4
72974: NEG
72975: PUSH
72976: LD_INT 3
72978: NEG
72979: PUSH
72980: EMPTY
72981: LIST
72982: LIST
72983: PUSH
72984: LD_INT 5
72986: NEG
72987: PUSH
72988: LD_INT 4
72990: NEG
72991: PUSH
72992: EMPTY
72993: LIST
72994: LIST
72995: PUSH
72996: LD_INT 5
72998: NEG
72999: PUSH
73000: LD_INT 5
73002: NEG
73003: PUSH
73004: EMPTY
73005: LIST
73006: LIST
73007: PUSH
73008: LD_INT 3
73010: NEG
73011: PUSH
73012: LD_INT 5
73014: NEG
73015: PUSH
73016: EMPTY
73017: LIST
73018: LIST
73019: PUSH
73020: LD_INT 5
73022: NEG
73023: PUSH
73024: LD_INT 3
73026: NEG
73027: PUSH
73028: EMPTY
73029: LIST
73030: LIST
73031: PUSH
73032: LD_INT 0
73034: PUSH
73035: LD_INT 3
73037: NEG
73038: PUSH
73039: EMPTY
73040: LIST
73041: LIST
73042: PUSH
73043: LD_INT 0
73045: PUSH
73046: LD_INT 4
73048: NEG
73049: PUSH
73050: EMPTY
73051: LIST
73052: LIST
73053: PUSH
73054: LD_INT 1
73056: PUSH
73057: LD_INT 3
73059: NEG
73060: PUSH
73061: EMPTY
73062: LIST
73063: LIST
73064: PUSH
73065: LD_INT 1
73067: PUSH
73068: LD_INT 2
73070: NEG
73071: PUSH
73072: EMPTY
73073: LIST
73074: LIST
73075: PUSH
73076: LD_INT 0
73078: PUSH
73079: LD_INT 2
73081: NEG
73082: PUSH
73083: EMPTY
73084: LIST
73085: LIST
73086: PUSH
73087: LD_INT 1
73089: NEG
73090: PUSH
73091: LD_INT 3
73093: NEG
73094: PUSH
73095: EMPTY
73096: LIST
73097: LIST
73098: PUSH
73099: LD_INT 1
73101: NEG
73102: PUSH
73103: LD_INT 4
73105: NEG
73106: PUSH
73107: EMPTY
73108: LIST
73109: LIST
73110: PUSH
73111: LD_INT 2
73113: PUSH
73114: LD_INT 2
73116: NEG
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: PUSH
73122: LD_INT 2
73124: NEG
73125: PUSH
73126: LD_INT 4
73128: NEG
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: PUSH
73134: LD_INT 4
73136: PUSH
73137: LD_INT 0
73139: PUSH
73140: EMPTY
73141: LIST
73142: LIST
73143: PUSH
73144: LD_INT 4
73146: PUSH
73147: LD_INT 1
73149: NEG
73150: PUSH
73151: EMPTY
73152: LIST
73153: LIST
73154: PUSH
73155: LD_INT 5
73157: PUSH
73158: LD_INT 0
73160: PUSH
73161: EMPTY
73162: LIST
73163: LIST
73164: PUSH
73165: LD_INT 5
73167: PUSH
73168: LD_INT 1
73170: PUSH
73171: EMPTY
73172: LIST
73173: LIST
73174: PUSH
73175: LD_INT 4
73177: PUSH
73178: LD_INT 1
73180: PUSH
73181: EMPTY
73182: LIST
73183: LIST
73184: PUSH
73185: LD_INT 3
73187: PUSH
73188: LD_INT 0
73190: PUSH
73191: EMPTY
73192: LIST
73193: LIST
73194: PUSH
73195: LD_INT 3
73197: PUSH
73198: LD_INT 1
73200: NEG
73201: PUSH
73202: EMPTY
73203: LIST
73204: LIST
73205: PUSH
73206: LD_INT 3
73208: PUSH
73209: LD_INT 2
73211: NEG
73212: PUSH
73213: EMPTY
73214: LIST
73215: LIST
73216: PUSH
73217: LD_INT 5
73219: PUSH
73220: LD_INT 2
73222: PUSH
73223: EMPTY
73224: LIST
73225: LIST
73226: PUSH
73227: EMPTY
73228: LIST
73229: LIST
73230: LIST
73231: LIST
73232: LIST
73233: LIST
73234: LIST
73235: LIST
73236: LIST
73237: LIST
73238: LIST
73239: LIST
73240: LIST
73241: LIST
73242: LIST
73243: LIST
73244: LIST
73245: LIST
73246: LIST
73247: LIST
73248: LIST
73249: LIST
73250: LIST
73251: LIST
73252: LIST
73253: LIST
73254: LIST
73255: LIST
73256: LIST
73257: LIST
73258: LIST
73259: LIST
73260: LIST
73261: LIST
73262: LIST
73263: LIST
73264: LIST
73265: LIST
73266: LIST
73267: LIST
73268: LIST
73269: LIST
73270: LIST
73271: LIST
73272: LIST
73273: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
73274: LD_ADDR_VAR 0 32
73278: PUSH
73279: LD_INT 4
73281: NEG
73282: PUSH
73283: LD_INT 0
73285: PUSH
73286: EMPTY
73287: LIST
73288: LIST
73289: PUSH
73290: LD_INT 4
73292: NEG
73293: PUSH
73294: LD_INT 1
73296: NEG
73297: PUSH
73298: EMPTY
73299: LIST
73300: LIST
73301: PUSH
73302: LD_INT 3
73304: NEG
73305: PUSH
73306: LD_INT 0
73308: PUSH
73309: EMPTY
73310: LIST
73311: LIST
73312: PUSH
73313: LD_INT 3
73315: NEG
73316: PUSH
73317: LD_INT 1
73319: PUSH
73320: EMPTY
73321: LIST
73322: LIST
73323: PUSH
73324: LD_INT 4
73326: NEG
73327: PUSH
73328: LD_INT 1
73330: PUSH
73331: EMPTY
73332: LIST
73333: LIST
73334: PUSH
73335: LD_INT 5
73337: NEG
73338: PUSH
73339: LD_INT 0
73341: PUSH
73342: EMPTY
73343: LIST
73344: LIST
73345: PUSH
73346: LD_INT 5
73348: NEG
73349: PUSH
73350: LD_INT 1
73352: NEG
73353: PUSH
73354: EMPTY
73355: LIST
73356: LIST
73357: PUSH
73358: LD_INT 5
73360: NEG
73361: PUSH
73362: LD_INT 2
73364: NEG
73365: PUSH
73366: EMPTY
73367: LIST
73368: LIST
73369: PUSH
73370: LD_INT 3
73372: NEG
73373: PUSH
73374: LD_INT 2
73376: PUSH
73377: EMPTY
73378: LIST
73379: LIST
73380: PUSH
73381: LD_INT 3
73383: NEG
73384: PUSH
73385: LD_INT 3
73387: NEG
73388: PUSH
73389: EMPTY
73390: LIST
73391: LIST
73392: PUSH
73393: LD_INT 3
73395: NEG
73396: PUSH
73397: LD_INT 4
73399: NEG
73400: PUSH
73401: EMPTY
73402: LIST
73403: LIST
73404: PUSH
73405: LD_INT 2
73407: NEG
73408: PUSH
73409: LD_INT 3
73411: NEG
73412: PUSH
73413: EMPTY
73414: LIST
73415: LIST
73416: PUSH
73417: LD_INT 2
73419: NEG
73420: PUSH
73421: LD_INT 2
73423: NEG
73424: PUSH
73425: EMPTY
73426: LIST
73427: LIST
73428: PUSH
73429: LD_INT 3
73431: NEG
73432: PUSH
73433: LD_INT 2
73435: NEG
73436: PUSH
73437: EMPTY
73438: LIST
73439: LIST
73440: PUSH
73441: LD_INT 4
73443: NEG
73444: PUSH
73445: LD_INT 3
73447: NEG
73448: PUSH
73449: EMPTY
73450: LIST
73451: LIST
73452: PUSH
73453: LD_INT 4
73455: NEG
73456: PUSH
73457: LD_INT 4
73459: NEG
73460: PUSH
73461: EMPTY
73462: LIST
73463: LIST
73464: PUSH
73465: LD_INT 2
73467: NEG
73468: PUSH
73469: LD_INT 4
73471: NEG
73472: PUSH
73473: EMPTY
73474: LIST
73475: LIST
73476: PUSH
73477: LD_INT 4
73479: NEG
73480: PUSH
73481: LD_INT 2
73483: NEG
73484: PUSH
73485: EMPTY
73486: LIST
73487: LIST
73488: PUSH
73489: LD_INT 0
73491: PUSH
73492: LD_INT 4
73494: NEG
73495: PUSH
73496: EMPTY
73497: LIST
73498: LIST
73499: PUSH
73500: LD_INT 0
73502: PUSH
73503: LD_INT 5
73505: NEG
73506: PUSH
73507: EMPTY
73508: LIST
73509: LIST
73510: PUSH
73511: LD_INT 1
73513: PUSH
73514: LD_INT 4
73516: NEG
73517: PUSH
73518: EMPTY
73519: LIST
73520: LIST
73521: PUSH
73522: LD_INT 1
73524: PUSH
73525: LD_INT 3
73527: NEG
73528: PUSH
73529: EMPTY
73530: LIST
73531: LIST
73532: PUSH
73533: LD_INT 0
73535: PUSH
73536: LD_INT 3
73538: NEG
73539: PUSH
73540: EMPTY
73541: LIST
73542: LIST
73543: PUSH
73544: LD_INT 1
73546: NEG
73547: PUSH
73548: LD_INT 4
73550: NEG
73551: PUSH
73552: EMPTY
73553: LIST
73554: LIST
73555: PUSH
73556: LD_INT 1
73558: NEG
73559: PUSH
73560: LD_INT 5
73562: NEG
73563: PUSH
73564: EMPTY
73565: LIST
73566: LIST
73567: PUSH
73568: LD_INT 2
73570: PUSH
73571: LD_INT 3
73573: NEG
73574: PUSH
73575: EMPTY
73576: LIST
73577: LIST
73578: PUSH
73579: LD_INT 2
73581: NEG
73582: PUSH
73583: LD_INT 5
73585: NEG
73586: PUSH
73587: EMPTY
73588: LIST
73589: LIST
73590: PUSH
73591: LD_INT 3
73593: PUSH
73594: LD_INT 0
73596: PUSH
73597: EMPTY
73598: LIST
73599: LIST
73600: PUSH
73601: LD_INT 3
73603: PUSH
73604: LD_INT 1
73606: NEG
73607: PUSH
73608: EMPTY
73609: LIST
73610: LIST
73611: PUSH
73612: LD_INT 4
73614: PUSH
73615: LD_INT 0
73617: PUSH
73618: EMPTY
73619: LIST
73620: LIST
73621: PUSH
73622: LD_INT 4
73624: PUSH
73625: LD_INT 1
73627: PUSH
73628: EMPTY
73629: LIST
73630: LIST
73631: PUSH
73632: LD_INT 3
73634: PUSH
73635: LD_INT 1
73637: PUSH
73638: EMPTY
73639: LIST
73640: LIST
73641: PUSH
73642: LD_INT 2
73644: PUSH
73645: LD_INT 0
73647: PUSH
73648: EMPTY
73649: LIST
73650: LIST
73651: PUSH
73652: LD_INT 2
73654: PUSH
73655: LD_INT 1
73657: NEG
73658: PUSH
73659: EMPTY
73660: LIST
73661: LIST
73662: PUSH
73663: LD_INT 2
73665: PUSH
73666: LD_INT 2
73668: NEG
73669: PUSH
73670: EMPTY
73671: LIST
73672: LIST
73673: PUSH
73674: LD_INT 4
73676: PUSH
73677: LD_INT 2
73679: PUSH
73680: EMPTY
73681: LIST
73682: LIST
73683: PUSH
73684: LD_INT 4
73686: PUSH
73687: LD_INT 4
73689: PUSH
73690: EMPTY
73691: LIST
73692: LIST
73693: PUSH
73694: LD_INT 4
73696: PUSH
73697: LD_INT 3
73699: PUSH
73700: EMPTY
73701: LIST
73702: LIST
73703: PUSH
73704: LD_INT 5
73706: PUSH
73707: LD_INT 4
73709: PUSH
73710: EMPTY
73711: LIST
73712: LIST
73713: PUSH
73714: LD_INT 5
73716: PUSH
73717: LD_INT 5
73719: PUSH
73720: EMPTY
73721: LIST
73722: LIST
73723: PUSH
73724: LD_INT 4
73726: PUSH
73727: LD_INT 5
73729: PUSH
73730: EMPTY
73731: LIST
73732: LIST
73733: PUSH
73734: LD_INT 3
73736: PUSH
73737: LD_INT 4
73739: PUSH
73740: EMPTY
73741: LIST
73742: LIST
73743: PUSH
73744: LD_INT 3
73746: PUSH
73747: LD_INT 3
73749: PUSH
73750: EMPTY
73751: LIST
73752: LIST
73753: PUSH
73754: LD_INT 5
73756: PUSH
73757: LD_INT 3
73759: PUSH
73760: EMPTY
73761: LIST
73762: LIST
73763: PUSH
73764: LD_INT 3
73766: PUSH
73767: LD_INT 5
73769: PUSH
73770: EMPTY
73771: LIST
73772: LIST
73773: PUSH
73774: EMPTY
73775: LIST
73776: LIST
73777: LIST
73778: LIST
73779: LIST
73780: LIST
73781: LIST
73782: LIST
73783: LIST
73784: LIST
73785: LIST
73786: LIST
73787: LIST
73788: LIST
73789: LIST
73790: LIST
73791: LIST
73792: LIST
73793: LIST
73794: LIST
73795: LIST
73796: LIST
73797: LIST
73798: LIST
73799: LIST
73800: LIST
73801: LIST
73802: LIST
73803: LIST
73804: LIST
73805: LIST
73806: LIST
73807: LIST
73808: LIST
73809: LIST
73810: LIST
73811: LIST
73812: LIST
73813: LIST
73814: LIST
73815: LIST
73816: LIST
73817: LIST
73818: LIST
73819: LIST
73820: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
73821: LD_ADDR_VAR 0 33
73825: PUSH
73826: LD_INT 4
73828: NEG
73829: PUSH
73830: LD_INT 4
73832: NEG
73833: PUSH
73834: EMPTY
73835: LIST
73836: LIST
73837: PUSH
73838: LD_INT 4
73840: NEG
73841: PUSH
73842: LD_INT 5
73844: NEG
73845: PUSH
73846: EMPTY
73847: LIST
73848: LIST
73849: PUSH
73850: LD_INT 3
73852: NEG
73853: PUSH
73854: LD_INT 4
73856: NEG
73857: PUSH
73858: EMPTY
73859: LIST
73860: LIST
73861: PUSH
73862: LD_INT 3
73864: NEG
73865: PUSH
73866: LD_INT 3
73868: NEG
73869: PUSH
73870: EMPTY
73871: LIST
73872: LIST
73873: PUSH
73874: LD_INT 4
73876: NEG
73877: PUSH
73878: LD_INT 3
73880: NEG
73881: PUSH
73882: EMPTY
73883: LIST
73884: LIST
73885: PUSH
73886: LD_INT 5
73888: NEG
73889: PUSH
73890: LD_INT 4
73892: NEG
73893: PUSH
73894: EMPTY
73895: LIST
73896: LIST
73897: PUSH
73898: LD_INT 5
73900: NEG
73901: PUSH
73902: LD_INT 5
73904: NEG
73905: PUSH
73906: EMPTY
73907: LIST
73908: LIST
73909: PUSH
73910: LD_INT 3
73912: NEG
73913: PUSH
73914: LD_INT 5
73916: NEG
73917: PUSH
73918: EMPTY
73919: LIST
73920: LIST
73921: PUSH
73922: LD_INT 5
73924: NEG
73925: PUSH
73926: LD_INT 3
73928: NEG
73929: PUSH
73930: EMPTY
73931: LIST
73932: LIST
73933: PUSH
73934: LD_INT 0
73936: PUSH
73937: LD_INT 3
73939: NEG
73940: PUSH
73941: EMPTY
73942: LIST
73943: LIST
73944: PUSH
73945: LD_INT 0
73947: PUSH
73948: LD_INT 4
73950: NEG
73951: PUSH
73952: EMPTY
73953: LIST
73954: LIST
73955: PUSH
73956: LD_INT 1
73958: PUSH
73959: LD_INT 3
73961: NEG
73962: PUSH
73963: EMPTY
73964: LIST
73965: LIST
73966: PUSH
73967: LD_INT 1
73969: PUSH
73970: LD_INT 2
73972: NEG
73973: PUSH
73974: EMPTY
73975: LIST
73976: LIST
73977: PUSH
73978: LD_INT 0
73980: PUSH
73981: LD_INT 2
73983: NEG
73984: PUSH
73985: EMPTY
73986: LIST
73987: LIST
73988: PUSH
73989: LD_INT 1
73991: NEG
73992: PUSH
73993: LD_INT 3
73995: NEG
73996: PUSH
73997: EMPTY
73998: LIST
73999: LIST
74000: PUSH
74001: LD_INT 1
74003: NEG
74004: PUSH
74005: LD_INT 4
74007: NEG
74008: PUSH
74009: EMPTY
74010: LIST
74011: LIST
74012: PUSH
74013: LD_INT 2
74015: PUSH
74016: LD_INT 2
74018: NEG
74019: PUSH
74020: EMPTY
74021: LIST
74022: LIST
74023: PUSH
74024: LD_INT 2
74026: NEG
74027: PUSH
74028: LD_INT 4
74030: NEG
74031: PUSH
74032: EMPTY
74033: LIST
74034: LIST
74035: PUSH
74036: LD_INT 4
74038: PUSH
74039: LD_INT 0
74041: PUSH
74042: EMPTY
74043: LIST
74044: LIST
74045: PUSH
74046: LD_INT 4
74048: PUSH
74049: LD_INT 1
74051: NEG
74052: PUSH
74053: EMPTY
74054: LIST
74055: LIST
74056: PUSH
74057: LD_INT 5
74059: PUSH
74060: LD_INT 0
74062: PUSH
74063: EMPTY
74064: LIST
74065: LIST
74066: PUSH
74067: LD_INT 5
74069: PUSH
74070: LD_INT 1
74072: PUSH
74073: EMPTY
74074: LIST
74075: LIST
74076: PUSH
74077: LD_INT 4
74079: PUSH
74080: LD_INT 1
74082: PUSH
74083: EMPTY
74084: LIST
74085: LIST
74086: PUSH
74087: LD_INT 3
74089: PUSH
74090: LD_INT 0
74092: PUSH
74093: EMPTY
74094: LIST
74095: LIST
74096: PUSH
74097: LD_INT 3
74099: PUSH
74100: LD_INT 1
74102: NEG
74103: PUSH
74104: EMPTY
74105: LIST
74106: LIST
74107: PUSH
74108: LD_INT 3
74110: PUSH
74111: LD_INT 2
74113: NEG
74114: PUSH
74115: EMPTY
74116: LIST
74117: LIST
74118: PUSH
74119: LD_INT 5
74121: PUSH
74122: LD_INT 2
74124: PUSH
74125: EMPTY
74126: LIST
74127: LIST
74128: PUSH
74129: LD_INT 3
74131: PUSH
74132: LD_INT 3
74134: PUSH
74135: EMPTY
74136: LIST
74137: LIST
74138: PUSH
74139: LD_INT 3
74141: PUSH
74142: LD_INT 2
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: PUSH
74149: LD_INT 4
74151: PUSH
74152: LD_INT 3
74154: PUSH
74155: EMPTY
74156: LIST
74157: LIST
74158: PUSH
74159: LD_INT 4
74161: PUSH
74162: LD_INT 4
74164: PUSH
74165: EMPTY
74166: LIST
74167: LIST
74168: PUSH
74169: LD_INT 3
74171: PUSH
74172: LD_INT 4
74174: PUSH
74175: EMPTY
74176: LIST
74177: LIST
74178: PUSH
74179: LD_INT 2
74181: PUSH
74182: LD_INT 3
74184: PUSH
74185: EMPTY
74186: LIST
74187: LIST
74188: PUSH
74189: LD_INT 2
74191: PUSH
74192: LD_INT 2
74194: PUSH
74195: EMPTY
74196: LIST
74197: LIST
74198: PUSH
74199: LD_INT 4
74201: PUSH
74202: LD_INT 2
74204: PUSH
74205: EMPTY
74206: LIST
74207: LIST
74208: PUSH
74209: LD_INT 2
74211: PUSH
74212: LD_INT 4
74214: PUSH
74215: EMPTY
74216: LIST
74217: LIST
74218: PUSH
74219: LD_INT 0
74221: PUSH
74222: LD_INT 4
74224: PUSH
74225: EMPTY
74226: LIST
74227: LIST
74228: PUSH
74229: LD_INT 0
74231: PUSH
74232: LD_INT 3
74234: PUSH
74235: EMPTY
74236: LIST
74237: LIST
74238: PUSH
74239: LD_INT 1
74241: PUSH
74242: LD_INT 4
74244: PUSH
74245: EMPTY
74246: LIST
74247: LIST
74248: PUSH
74249: LD_INT 1
74251: PUSH
74252: LD_INT 5
74254: PUSH
74255: EMPTY
74256: LIST
74257: LIST
74258: PUSH
74259: LD_INT 0
74261: PUSH
74262: LD_INT 5
74264: PUSH
74265: EMPTY
74266: LIST
74267: LIST
74268: PUSH
74269: LD_INT 1
74271: NEG
74272: PUSH
74273: LD_INT 4
74275: PUSH
74276: EMPTY
74277: LIST
74278: LIST
74279: PUSH
74280: LD_INT 1
74282: NEG
74283: PUSH
74284: LD_INT 3
74286: PUSH
74287: EMPTY
74288: LIST
74289: LIST
74290: PUSH
74291: LD_INT 2
74293: PUSH
74294: LD_INT 5
74296: PUSH
74297: EMPTY
74298: LIST
74299: LIST
74300: PUSH
74301: LD_INT 2
74303: NEG
74304: PUSH
74305: LD_INT 3
74307: PUSH
74308: EMPTY
74309: LIST
74310: LIST
74311: PUSH
74312: EMPTY
74313: LIST
74314: LIST
74315: LIST
74316: LIST
74317: LIST
74318: LIST
74319: LIST
74320: LIST
74321: LIST
74322: LIST
74323: LIST
74324: LIST
74325: LIST
74326: LIST
74327: LIST
74328: LIST
74329: LIST
74330: LIST
74331: LIST
74332: LIST
74333: LIST
74334: LIST
74335: LIST
74336: LIST
74337: LIST
74338: LIST
74339: LIST
74340: LIST
74341: LIST
74342: LIST
74343: LIST
74344: LIST
74345: LIST
74346: LIST
74347: LIST
74348: LIST
74349: LIST
74350: LIST
74351: LIST
74352: LIST
74353: LIST
74354: LIST
74355: LIST
74356: LIST
74357: LIST
74358: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
74359: LD_ADDR_VAR 0 34
74363: PUSH
74364: LD_INT 0
74366: PUSH
74367: LD_INT 4
74369: NEG
74370: PUSH
74371: EMPTY
74372: LIST
74373: LIST
74374: PUSH
74375: LD_INT 0
74377: PUSH
74378: LD_INT 5
74380: NEG
74381: PUSH
74382: EMPTY
74383: LIST
74384: LIST
74385: PUSH
74386: LD_INT 1
74388: PUSH
74389: LD_INT 4
74391: NEG
74392: PUSH
74393: EMPTY
74394: LIST
74395: LIST
74396: PUSH
74397: LD_INT 1
74399: PUSH
74400: LD_INT 3
74402: NEG
74403: PUSH
74404: EMPTY
74405: LIST
74406: LIST
74407: PUSH
74408: LD_INT 0
74410: PUSH
74411: LD_INT 3
74413: NEG
74414: PUSH
74415: EMPTY
74416: LIST
74417: LIST
74418: PUSH
74419: LD_INT 1
74421: NEG
74422: PUSH
74423: LD_INT 4
74425: NEG
74426: PUSH
74427: EMPTY
74428: LIST
74429: LIST
74430: PUSH
74431: LD_INT 1
74433: NEG
74434: PUSH
74435: LD_INT 5
74437: NEG
74438: PUSH
74439: EMPTY
74440: LIST
74441: LIST
74442: PUSH
74443: LD_INT 2
74445: PUSH
74446: LD_INT 3
74448: NEG
74449: PUSH
74450: EMPTY
74451: LIST
74452: LIST
74453: PUSH
74454: LD_INT 2
74456: NEG
74457: PUSH
74458: LD_INT 5
74460: NEG
74461: PUSH
74462: EMPTY
74463: LIST
74464: LIST
74465: PUSH
74466: LD_INT 3
74468: PUSH
74469: LD_INT 0
74471: PUSH
74472: EMPTY
74473: LIST
74474: LIST
74475: PUSH
74476: LD_INT 3
74478: PUSH
74479: LD_INT 1
74481: NEG
74482: PUSH
74483: EMPTY
74484: LIST
74485: LIST
74486: PUSH
74487: LD_INT 4
74489: PUSH
74490: LD_INT 0
74492: PUSH
74493: EMPTY
74494: LIST
74495: LIST
74496: PUSH
74497: LD_INT 4
74499: PUSH
74500: LD_INT 1
74502: PUSH
74503: EMPTY
74504: LIST
74505: LIST
74506: PUSH
74507: LD_INT 3
74509: PUSH
74510: LD_INT 1
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: PUSH
74517: LD_INT 2
74519: PUSH
74520: LD_INT 0
74522: PUSH
74523: EMPTY
74524: LIST
74525: LIST
74526: PUSH
74527: LD_INT 2
74529: PUSH
74530: LD_INT 1
74532: NEG
74533: PUSH
74534: EMPTY
74535: LIST
74536: LIST
74537: PUSH
74538: LD_INT 2
74540: PUSH
74541: LD_INT 2
74543: NEG
74544: PUSH
74545: EMPTY
74546: LIST
74547: LIST
74548: PUSH
74549: LD_INT 4
74551: PUSH
74552: LD_INT 2
74554: PUSH
74555: EMPTY
74556: LIST
74557: LIST
74558: PUSH
74559: LD_INT 4
74561: PUSH
74562: LD_INT 4
74564: PUSH
74565: EMPTY
74566: LIST
74567: LIST
74568: PUSH
74569: LD_INT 4
74571: PUSH
74572: LD_INT 3
74574: PUSH
74575: EMPTY
74576: LIST
74577: LIST
74578: PUSH
74579: LD_INT 5
74581: PUSH
74582: LD_INT 4
74584: PUSH
74585: EMPTY
74586: LIST
74587: LIST
74588: PUSH
74589: LD_INT 5
74591: PUSH
74592: LD_INT 5
74594: PUSH
74595: EMPTY
74596: LIST
74597: LIST
74598: PUSH
74599: LD_INT 4
74601: PUSH
74602: LD_INT 5
74604: PUSH
74605: EMPTY
74606: LIST
74607: LIST
74608: PUSH
74609: LD_INT 3
74611: PUSH
74612: LD_INT 4
74614: PUSH
74615: EMPTY
74616: LIST
74617: LIST
74618: PUSH
74619: LD_INT 3
74621: PUSH
74622: LD_INT 3
74624: PUSH
74625: EMPTY
74626: LIST
74627: LIST
74628: PUSH
74629: LD_INT 5
74631: PUSH
74632: LD_INT 3
74634: PUSH
74635: EMPTY
74636: LIST
74637: LIST
74638: PUSH
74639: LD_INT 3
74641: PUSH
74642: LD_INT 5
74644: PUSH
74645: EMPTY
74646: LIST
74647: LIST
74648: PUSH
74649: LD_INT 0
74651: PUSH
74652: LD_INT 3
74654: PUSH
74655: EMPTY
74656: LIST
74657: LIST
74658: PUSH
74659: LD_INT 0
74661: PUSH
74662: LD_INT 2
74664: PUSH
74665: EMPTY
74666: LIST
74667: LIST
74668: PUSH
74669: LD_INT 1
74671: PUSH
74672: LD_INT 3
74674: PUSH
74675: EMPTY
74676: LIST
74677: LIST
74678: PUSH
74679: LD_INT 1
74681: PUSH
74682: LD_INT 4
74684: PUSH
74685: EMPTY
74686: LIST
74687: LIST
74688: PUSH
74689: LD_INT 0
74691: PUSH
74692: LD_INT 4
74694: PUSH
74695: EMPTY
74696: LIST
74697: LIST
74698: PUSH
74699: LD_INT 1
74701: NEG
74702: PUSH
74703: LD_INT 3
74705: PUSH
74706: EMPTY
74707: LIST
74708: LIST
74709: PUSH
74710: LD_INT 1
74712: NEG
74713: PUSH
74714: LD_INT 2
74716: PUSH
74717: EMPTY
74718: LIST
74719: LIST
74720: PUSH
74721: LD_INT 2
74723: PUSH
74724: LD_INT 4
74726: PUSH
74727: EMPTY
74728: LIST
74729: LIST
74730: PUSH
74731: LD_INT 2
74733: NEG
74734: PUSH
74735: LD_INT 2
74737: PUSH
74738: EMPTY
74739: LIST
74740: LIST
74741: PUSH
74742: LD_INT 4
74744: NEG
74745: PUSH
74746: LD_INT 0
74748: PUSH
74749: EMPTY
74750: LIST
74751: LIST
74752: PUSH
74753: LD_INT 4
74755: NEG
74756: PUSH
74757: LD_INT 1
74759: NEG
74760: PUSH
74761: EMPTY
74762: LIST
74763: LIST
74764: PUSH
74765: LD_INT 3
74767: NEG
74768: PUSH
74769: LD_INT 0
74771: PUSH
74772: EMPTY
74773: LIST
74774: LIST
74775: PUSH
74776: LD_INT 3
74778: NEG
74779: PUSH
74780: LD_INT 1
74782: PUSH
74783: EMPTY
74784: LIST
74785: LIST
74786: PUSH
74787: LD_INT 4
74789: NEG
74790: PUSH
74791: LD_INT 1
74793: PUSH
74794: EMPTY
74795: LIST
74796: LIST
74797: PUSH
74798: LD_INT 5
74800: NEG
74801: PUSH
74802: LD_INT 0
74804: PUSH
74805: EMPTY
74806: LIST
74807: LIST
74808: PUSH
74809: LD_INT 5
74811: NEG
74812: PUSH
74813: LD_INT 1
74815: NEG
74816: PUSH
74817: EMPTY
74818: LIST
74819: LIST
74820: PUSH
74821: LD_INT 5
74823: NEG
74824: PUSH
74825: LD_INT 2
74827: NEG
74828: PUSH
74829: EMPTY
74830: LIST
74831: LIST
74832: PUSH
74833: LD_INT 3
74835: NEG
74836: PUSH
74837: LD_INT 2
74839: PUSH
74840: EMPTY
74841: LIST
74842: LIST
74843: PUSH
74844: EMPTY
74845: LIST
74846: LIST
74847: LIST
74848: LIST
74849: LIST
74850: LIST
74851: LIST
74852: LIST
74853: LIST
74854: LIST
74855: LIST
74856: LIST
74857: LIST
74858: LIST
74859: LIST
74860: LIST
74861: LIST
74862: LIST
74863: LIST
74864: LIST
74865: LIST
74866: LIST
74867: LIST
74868: LIST
74869: LIST
74870: LIST
74871: LIST
74872: LIST
74873: LIST
74874: LIST
74875: LIST
74876: LIST
74877: LIST
74878: LIST
74879: LIST
74880: LIST
74881: LIST
74882: LIST
74883: LIST
74884: LIST
74885: LIST
74886: LIST
74887: LIST
74888: LIST
74889: LIST
74890: ST_TO_ADDR
// end ; end ;
74891: GO 74894
74893: POP
// case btype of b_depot , b_warehouse :
74894: LD_VAR 0 1
74898: PUSH
74899: LD_INT 0
74901: DOUBLE
74902: EQUAL
74903: IFTRUE 74913
74905: LD_INT 1
74907: DOUBLE
74908: EQUAL
74909: IFTRUE 74913
74911: GO 75114
74913: POP
// case nation of nation_american :
74914: LD_VAR 0 5
74918: PUSH
74919: LD_INT 1
74921: DOUBLE
74922: EQUAL
74923: IFTRUE 74927
74925: GO 74983
74927: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
74928: LD_ADDR_VAR 0 9
74932: PUSH
74933: LD_VAR 0 11
74937: PUSH
74938: LD_VAR 0 12
74942: PUSH
74943: LD_VAR 0 13
74947: PUSH
74948: LD_VAR 0 14
74952: PUSH
74953: LD_VAR 0 15
74957: PUSH
74958: LD_VAR 0 16
74962: PUSH
74963: EMPTY
74964: LIST
74965: LIST
74966: LIST
74967: LIST
74968: LIST
74969: LIST
74970: PUSH
74971: LD_VAR 0 4
74975: PUSH
74976: LD_INT 1
74978: PLUS
74979: ARRAY
74980: ST_TO_ADDR
74981: GO 75112
74983: LD_INT 2
74985: DOUBLE
74986: EQUAL
74987: IFTRUE 74991
74989: GO 75047
74991: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
74992: LD_ADDR_VAR 0 9
74996: PUSH
74997: LD_VAR 0 17
75001: PUSH
75002: LD_VAR 0 18
75006: PUSH
75007: LD_VAR 0 19
75011: PUSH
75012: LD_VAR 0 20
75016: PUSH
75017: LD_VAR 0 21
75021: PUSH
75022: LD_VAR 0 22
75026: PUSH
75027: EMPTY
75028: LIST
75029: LIST
75030: LIST
75031: LIST
75032: LIST
75033: LIST
75034: PUSH
75035: LD_VAR 0 4
75039: PUSH
75040: LD_INT 1
75042: PLUS
75043: ARRAY
75044: ST_TO_ADDR
75045: GO 75112
75047: LD_INT 3
75049: DOUBLE
75050: EQUAL
75051: IFTRUE 75055
75053: GO 75111
75055: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
75056: LD_ADDR_VAR 0 9
75060: PUSH
75061: LD_VAR 0 23
75065: PUSH
75066: LD_VAR 0 24
75070: PUSH
75071: LD_VAR 0 25
75075: PUSH
75076: LD_VAR 0 26
75080: PUSH
75081: LD_VAR 0 27
75085: PUSH
75086: LD_VAR 0 28
75090: PUSH
75091: EMPTY
75092: LIST
75093: LIST
75094: LIST
75095: LIST
75096: LIST
75097: LIST
75098: PUSH
75099: LD_VAR 0 4
75103: PUSH
75104: LD_INT 1
75106: PLUS
75107: ARRAY
75108: ST_TO_ADDR
75109: GO 75112
75111: POP
75112: GO 75667
75114: LD_INT 2
75116: DOUBLE
75117: EQUAL
75118: IFTRUE 75128
75120: LD_INT 3
75122: DOUBLE
75123: EQUAL
75124: IFTRUE 75128
75126: GO 75184
75128: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
75129: LD_ADDR_VAR 0 9
75133: PUSH
75134: LD_VAR 0 29
75138: PUSH
75139: LD_VAR 0 30
75143: PUSH
75144: LD_VAR 0 31
75148: PUSH
75149: LD_VAR 0 32
75153: PUSH
75154: LD_VAR 0 33
75158: PUSH
75159: LD_VAR 0 34
75163: PUSH
75164: EMPTY
75165: LIST
75166: LIST
75167: LIST
75168: LIST
75169: LIST
75170: LIST
75171: PUSH
75172: LD_VAR 0 4
75176: PUSH
75177: LD_INT 1
75179: PLUS
75180: ARRAY
75181: ST_TO_ADDR
75182: GO 75667
75184: LD_INT 16
75186: DOUBLE
75187: EQUAL
75188: IFTRUE 75246
75190: LD_INT 17
75192: DOUBLE
75193: EQUAL
75194: IFTRUE 75246
75196: LD_INT 18
75198: DOUBLE
75199: EQUAL
75200: IFTRUE 75246
75202: LD_INT 19
75204: DOUBLE
75205: EQUAL
75206: IFTRUE 75246
75208: LD_INT 22
75210: DOUBLE
75211: EQUAL
75212: IFTRUE 75246
75214: LD_INT 20
75216: DOUBLE
75217: EQUAL
75218: IFTRUE 75246
75220: LD_INT 21
75222: DOUBLE
75223: EQUAL
75224: IFTRUE 75246
75226: LD_INT 23
75228: DOUBLE
75229: EQUAL
75230: IFTRUE 75246
75232: LD_INT 24
75234: DOUBLE
75235: EQUAL
75236: IFTRUE 75246
75238: LD_INT 25
75240: DOUBLE
75241: EQUAL
75242: IFTRUE 75246
75244: GO 75302
75246: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
75247: LD_ADDR_VAR 0 9
75251: PUSH
75252: LD_VAR 0 35
75256: PUSH
75257: LD_VAR 0 36
75261: PUSH
75262: LD_VAR 0 37
75266: PUSH
75267: LD_VAR 0 38
75271: PUSH
75272: LD_VAR 0 39
75276: PUSH
75277: LD_VAR 0 40
75281: PUSH
75282: EMPTY
75283: LIST
75284: LIST
75285: LIST
75286: LIST
75287: LIST
75288: LIST
75289: PUSH
75290: LD_VAR 0 4
75294: PUSH
75295: LD_INT 1
75297: PLUS
75298: ARRAY
75299: ST_TO_ADDR
75300: GO 75667
75302: LD_INT 6
75304: DOUBLE
75305: EQUAL
75306: IFTRUE 75358
75308: LD_INT 7
75310: DOUBLE
75311: EQUAL
75312: IFTRUE 75358
75314: LD_INT 8
75316: DOUBLE
75317: EQUAL
75318: IFTRUE 75358
75320: LD_INT 13
75322: DOUBLE
75323: EQUAL
75324: IFTRUE 75358
75326: LD_INT 12
75328: DOUBLE
75329: EQUAL
75330: IFTRUE 75358
75332: LD_INT 15
75334: DOUBLE
75335: EQUAL
75336: IFTRUE 75358
75338: LD_INT 11
75340: DOUBLE
75341: EQUAL
75342: IFTRUE 75358
75344: LD_INT 14
75346: DOUBLE
75347: EQUAL
75348: IFTRUE 75358
75350: LD_INT 10
75352: DOUBLE
75353: EQUAL
75354: IFTRUE 75358
75356: GO 75414
75358: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
75359: LD_ADDR_VAR 0 9
75363: PUSH
75364: LD_VAR 0 41
75368: PUSH
75369: LD_VAR 0 42
75373: PUSH
75374: LD_VAR 0 43
75378: PUSH
75379: LD_VAR 0 44
75383: PUSH
75384: LD_VAR 0 45
75388: PUSH
75389: LD_VAR 0 46
75393: PUSH
75394: EMPTY
75395: LIST
75396: LIST
75397: LIST
75398: LIST
75399: LIST
75400: LIST
75401: PUSH
75402: LD_VAR 0 4
75406: PUSH
75407: LD_INT 1
75409: PLUS
75410: ARRAY
75411: ST_TO_ADDR
75412: GO 75667
75414: LD_INT 36
75416: DOUBLE
75417: EQUAL
75418: IFTRUE 75422
75420: GO 75478
75422: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
75423: LD_ADDR_VAR 0 9
75427: PUSH
75428: LD_VAR 0 47
75432: PUSH
75433: LD_VAR 0 48
75437: PUSH
75438: LD_VAR 0 49
75442: PUSH
75443: LD_VAR 0 50
75447: PUSH
75448: LD_VAR 0 51
75452: PUSH
75453: LD_VAR 0 52
75457: PUSH
75458: EMPTY
75459: LIST
75460: LIST
75461: LIST
75462: LIST
75463: LIST
75464: LIST
75465: PUSH
75466: LD_VAR 0 4
75470: PUSH
75471: LD_INT 1
75473: PLUS
75474: ARRAY
75475: ST_TO_ADDR
75476: GO 75667
75478: LD_INT 4
75480: DOUBLE
75481: EQUAL
75482: IFTRUE 75504
75484: LD_INT 5
75486: DOUBLE
75487: EQUAL
75488: IFTRUE 75504
75490: LD_INT 34
75492: DOUBLE
75493: EQUAL
75494: IFTRUE 75504
75496: LD_INT 37
75498: DOUBLE
75499: EQUAL
75500: IFTRUE 75504
75502: GO 75560
75504: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
75505: LD_ADDR_VAR 0 9
75509: PUSH
75510: LD_VAR 0 53
75514: PUSH
75515: LD_VAR 0 54
75519: PUSH
75520: LD_VAR 0 55
75524: PUSH
75525: LD_VAR 0 56
75529: PUSH
75530: LD_VAR 0 57
75534: PUSH
75535: LD_VAR 0 58
75539: PUSH
75540: EMPTY
75541: LIST
75542: LIST
75543: LIST
75544: LIST
75545: LIST
75546: LIST
75547: PUSH
75548: LD_VAR 0 4
75552: PUSH
75553: LD_INT 1
75555: PLUS
75556: ARRAY
75557: ST_TO_ADDR
75558: GO 75667
75560: LD_INT 31
75562: DOUBLE
75563: EQUAL
75564: IFTRUE 75610
75566: LD_INT 32
75568: DOUBLE
75569: EQUAL
75570: IFTRUE 75610
75572: LD_INT 33
75574: DOUBLE
75575: EQUAL
75576: IFTRUE 75610
75578: LD_INT 27
75580: DOUBLE
75581: EQUAL
75582: IFTRUE 75610
75584: LD_INT 26
75586: DOUBLE
75587: EQUAL
75588: IFTRUE 75610
75590: LD_INT 28
75592: DOUBLE
75593: EQUAL
75594: IFTRUE 75610
75596: LD_INT 29
75598: DOUBLE
75599: EQUAL
75600: IFTRUE 75610
75602: LD_INT 30
75604: DOUBLE
75605: EQUAL
75606: IFTRUE 75610
75608: GO 75666
75610: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
75611: LD_ADDR_VAR 0 9
75615: PUSH
75616: LD_VAR 0 59
75620: PUSH
75621: LD_VAR 0 60
75625: PUSH
75626: LD_VAR 0 61
75630: PUSH
75631: LD_VAR 0 62
75635: PUSH
75636: LD_VAR 0 63
75640: PUSH
75641: LD_VAR 0 64
75645: PUSH
75646: EMPTY
75647: LIST
75648: LIST
75649: LIST
75650: LIST
75651: LIST
75652: LIST
75653: PUSH
75654: LD_VAR 0 4
75658: PUSH
75659: LD_INT 1
75661: PLUS
75662: ARRAY
75663: ST_TO_ADDR
75664: GO 75667
75666: POP
// temp_list2 = [ ] ;
75667: LD_ADDR_VAR 0 10
75671: PUSH
75672: EMPTY
75673: ST_TO_ADDR
// for i in temp_list do
75674: LD_ADDR_VAR 0 8
75678: PUSH
75679: LD_VAR 0 9
75683: PUSH
75684: FOR_IN
75685: IFFALSE 75737
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
75687: LD_ADDR_VAR 0 10
75691: PUSH
75692: LD_VAR 0 10
75696: PUSH
75697: LD_VAR 0 8
75701: PUSH
75702: LD_INT 1
75704: ARRAY
75705: PUSH
75706: LD_VAR 0 2
75710: PLUS
75711: PUSH
75712: LD_VAR 0 8
75716: PUSH
75717: LD_INT 2
75719: ARRAY
75720: PUSH
75721: LD_VAR 0 3
75725: PLUS
75726: PUSH
75727: EMPTY
75728: LIST
75729: LIST
75730: PUSH
75731: EMPTY
75732: LIST
75733: ADD
75734: ST_TO_ADDR
75735: GO 75684
75737: POP
75738: POP
// result = temp_list2 ;
75739: LD_ADDR_VAR 0 7
75743: PUSH
75744: LD_VAR 0 10
75748: ST_TO_ADDR
// end ;
75749: LD_VAR 0 7
75753: RET
// export function EnemyInRange ( unit , dist ) ; begin
75754: LD_INT 0
75756: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
75757: LD_ADDR_VAR 0 3
75761: PUSH
75762: LD_VAR 0 1
75766: PPUSH
75767: CALL_OW 255
75771: PPUSH
75772: LD_VAR 0 1
75776: PPUSH
75777: CALL_OW 250
75781: PPUSH
75782: LD_VAR 0 1
75786: PPUSH
75787: CALL_OW 251
75791: PPUSH
75792: LD_VAR 0 2
75796: PPUSH
75797: CALL 49858 0 4
75801: PUSH
75802: LD_INT 4
75804: ARRAY
75805: ST_TO_ADDR
// end ;
75806: LD_VAR 0 3
75810: RET
// export function PlayerSeeMe ( unit ) ; begin
75811: LD_INT 0
75813: PPUSH
// result := See ( your_side , unit ) ;
75814: LD_ADDR_VAR 0 2
75818: PUSH
75819: LD_OWVAR 2
75823: PPUSH
75824: LD_VAR 0 1
75828: PPUSH
75829: CALL_OW 292
75833: ST_TO_ADDR
// end ;
75834: LD_VAR 0 2
75838: RET
// export function ReverseDir ( unit ) ; begin
75839: LD_INT 0
75841: PPUSH
// if not unit then
75842: LD_VAR 0 1
75846: NOT
75847: IFFALSE 75851
// exit ;
75849: GO 75874
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
75851: LD_ADDR_VAR 0 2
75855: PUSH
75856: LD_VAR 0 1
75860: PPUSH
75861: CALL_OW 254
75865: PUSH
75866: LD_INT 3
75868: PLUS
75869: PUSH
75870: LD_INT 6
75872: MOD
75873: ST_TO_ADDR
// end ;
75874: LD_VAR 0 2
75878: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
75879: LD_INT 0
75881: PPUSH
75882: PPUSH
75883: PPUSH
75884: PPUSH
75885: PPUSH
// if not hexes then
75886: LD_VAR 0 2
75890: NOT
75891: IFFALSE 75895
// exit ;
75893: GO 76043
// dist := 9999 ;
75895: LD_ADDR_VAR 0 5
75899: PUSH
75900: LD_INT 9999
75902: ST_TO_ADDR
// for i = 1 to hexes do
75903: LD_ADDR_VAR 0 4
75907: PUSH
75908: DOUBLE
75909: LD_INT 1
75911: DEC
75912: ST_TO_ADDR
75913: LD_VAR 0 2
75917: PUSH
75918: FOR_TO
75919: IFFALSE 76031
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
75921: LD_VAR 0 1
75925: PPUSH
75926: LD_VAR 0 2
75930: PUSH
75931: LD_VAR 0 4
75935: ARRAY
75936: PUSH
75937: LD_INT 1
75939: ARRAY
75940: PPUSH
75941: LD_VAR 0 2
75945: PUSH
75946: LD_VAR 0 4
75950: ARRAY
75951: PUSH
75952: LD_INT 2
75954: ARRAY
75955: PPUSH
75956: CALL_OW 297
75960: PUSH
75961: LD_VAR 0 5
75965: LESS
75966: IFFALSE 76029
// begin hex := hexes [ i ] ;
75968: LD_ADDR_VAR 0 7
75972: PUSH
75973: LD_VAR 0 2
75977: PUSH
75978: LD_VAR 0 4
75982: ARRAY
75983: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
75984: LD_ADDR_VAR 0 5
75988: PUSH
75989: LD_VAR 0 1
75993: PPUSH
75994: LD_VAR 0 2
75998: PUSH
75999: LD_VAR 0 4
76003: ARRAY
76004: PUSH
76005: LD_INT 1
76007: ARRAY
76008: PPUSH
76009: LD_VAR 0 2
76013: PUSH
76014: LD_VAR 0 4
76018: ARRAY
76019: PUSH
76020: LD_INT 2
76022: ARRAY
76023: PPUSH
76024: CALL_OW 297
76028: ST_TO_ADDR
// end ; end ;
76029: GO 75918
76031: POP
76032: POP
// result := hex ;
76033: LD_ADDR_VAR 0 3
76037: PUSH
76038: LD_VAR 0 7
76042: ST_TO_ADDR
// end ;
76043: LD_VAR 0 3
76047: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
76048: LD_INT 0
76050: PPUSH
76051: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
76052: LD_VAR 0 1
76056: NOT
76057: PUSH
76058: LD_VAR 0 1
76062: PUSH
76063: LD_INT 21
76065: PUSH
76066: LD_INT 2
76068: PUSH
76069: EMPTY
76070: LIST
76071: LIST
76072: PUSH
76073: LD_INT 23
76075: PUSH
76076: LD_INT 2
76078: PUSH
76079: EMPTY
76080: LIST
76081: LIST
76082: PUSH
76083: EMPTY
76084: LIST
76085: LIST
76086: PPUSH
76087: CALL_OW 69
76091: IN
76092: NOT
76093: OR
76094: IFFALSE 76098
// exit ;
76096: GO 76145
// for i = 1 to 3 do
76098: LD_ADDR_VAR 0 3
76102: PUSH
76103: DOUBLE
76104: LD_INT 1
76106: DEC
76107: ST_TO_ADDR
76108: LD_INT 3
76110: PUSH
76111: FOR_TO
76112: IFFALSE 76143
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
76114: LD_VAR 0 1
76118: PPUSH
76119: CALL_OW 250
76123: PPUSH
76124: LD_VAR 0 1
76128: PPUSH
76129: CALL_OW 251
76133: PPUSH
76134: LD_INT 1
76136: PPUSH
76137: CALL_OW 453
76141: GO 76111
76143: POP
76144: POP
// end ;
76145: LD_VAR 0 2
76149: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
76150: LD_INT 0
76152: PPUSH
76153: PPUSH
76154: PPUSH
76155: PPUSH
76156: PPUSH
76157: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
76158: LD_VAR 0 1
76162: NOT
76163: PUSH
76164: LD_VAR 0 2
76168: NOT
76169: OR
76170: PUSH
76171: LD_VAR 0 1
76175: PPUSH
76176: CALL_OW 314
76180: OR
76181: IFFALSE 76185
// exit ;
76183: GO 76626
// x := GetX ( enemy_unit ) ;
76185: LD_ADDR_VAR 0 7
76189: PUSH
76190: LD_VAR 0 2
76194: PPUSH
76195: CALL_OW 250
76199: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
76200: LD_ADDR_VAR 0 8
76204: PUSH
76205: LD_VAR 0 2
76209: PPUSH
76210: CALL_OW 251
76214: ST_TO_ADDR
// if not x or not y then
76215: LD_VAR 0 7
76219: NOT
76220: PUSH
76221: LD_VAR 0 8
76225: NOT
76226: OR
76227: IFFALSE 76231
// exit ;
76229: GO 76626
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
76231: LD_ADDR_VAR 0 6
76235: PUSH
76236: LD_VAR 0 7
76240: PPUSH
76241: LD_INT 0
76243: PPUSH
76244: LD_INT 4
76246: PPUSH
76247: CALL_OW 272
76251: PUSH
76252: LD_VAR 0 8
76256: PPUSH
76257: LD_INT 0
76259: PPUSH
76260: LD_INT 4
76262: PPUSH
76263: CALL_OW 273
76267: PUSH
76268: EMPTY
76269: LIST
76270: LIST
76271: PUSH
76272: LD_VAR 0 7
76276: PPUSH
76277: LD_INT 1
76279: PPUSH
76280: LD_INT 4
76282: PPUSH
76283: CALL_OW 272
76287: PUSH
76288: LD_VAR 0 8
76292: PPUSH
76293: LD_INT 1
76295: PPUSH
76296: LD_INT 4
76298: PPUSH
76299: CALL_OW 273
76303: PUSH
76304: EMPTY
76305: LIST
76306: LIST
76307: PUSH
76308: LD_VAR 0 7
76312: PPUSH
76313: LD_INT 2
76315: PPUSH
76316: LD_INT 4
76318: PPUSH
76319: CALL_OW 272
76323: PUSH
76324: LD_VAR 0 8
76328: PPUSH
76329: LD_INT 2
76331: PPUSH
76332: LD_INT 4
76334: PPUSH
76335: CALL_OW 273
76339: PUSH
76340: EMPTY
76341: LIST
76342: LIST
76343: PUSH
76344: LD_VAR 0 7
76348: PPUSH
76349: LD_INT 3
76351: PPUSH
76352: LD_INT 4
76354: PPUSH
76355: CALL_OW 272
76359: PUSH
76360: LD_VAR 0 8
76364: PPUSH
76365: LD_INT 3
76367: PPUSH
76368: LD_INT 4
76370: PPUSH
76371: CALL_OW 273
76375: PUSH
76376: EMPTY
76377: LIST
76378: LIST
76379: PUSH
76380: LD_VAR 0 7
76384: PPUSH
76385: LD_INT 4
76387: PPUSH
76388: LD_INT 4
76390: PPUSH
76391: CALL_OW 272
76395: PUSH
76396: LD_VAR 0 8
76400: PPUSH
76401: LD_INT 4
76403: PPUSH
76404: LD_INT 4
76406: PPUSH
76407: CALL_OW 273
76411: PUSH
76412: EMPTY
76413: LIST
76414: LIST
76415: PUSH
76416: LD_VAR 0 7
76420: PPUSH
76421: LD_INT 5
76423: PPUSH
76424: LD_INT 4
76426: PPUSH
76427: CALL_OW 272
76431: PUSH
76432: LD_VAR 0 8
76436: PPUSH
76437: LD_INT 5
76439: PPUSH
76440: LD_INT 4
76442: PPUSH
76443: CALL_OW 273
76447: PUSH
76448: EMPTY
76449: LIST
76450: LIST
76451: PUSH
76452: EMPTY
76453: LIST
76454: LIST
76455: LIST
76456: LIST
76457: LIST
76458: LIST
76459: ST_TO_ADDR
// for i = tmp downto 1 do
76460: LD_ADDR_VAR 0 4
76464: PUSH
76465: DOUBLE
76466: LD_VAR 0 6
76470: INC
76471: ST_TO_ADDR
76472: LD_INT 1
76474: PUSH
76475: FOR_DOWNTO
76476: IFFALSE 76577
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
76478: LD_VAR 0 6
76482: PUSH
76483: LD_VAR 0 4
76487: ARRAY
76488: PUSH
76489: LD_INT 1
76491: ARRAY
76492: PPUSH
76493: LD_VAR 0 6
76497: PUSH
76498: LD_VAR 0 4
76502: ARRAY
76503: PUSH
76504: LD_INT 2
76506: ARRAY
76507: PPUSH
76508: CALL_OW 488
76512: NOT
76513: PUSH
76514: LD_VAR 0 6
76518: PUSH
76519: LD_VAR 0 4
76523: ARRAY
76524: PUSH
76525: LD_INT 1
76527: ARRAY
76528: PPUSH
76529: LD_VAR 0 6
76533: PUSH
76534: LD_VAR 0 4
76538: ARRAY
76539: PUSH
76540: LD_INT 2
76542: ARRAY
76543: PPUSH
76544: CALL_OW 428
76548: PUSH
76549: LD_INT 0
76551: NONEQUAL
76552: OR
76553: IFFALSE 76575
// tmp := Delete ( tmp , i ) ;
76555: LD_ADDR_VAR 0 6
76559: PUSH
76560: LD_VAR 0 6
76564: PPUSH
76565: LD_VAR 0 4
76569: PPUSH
76570: CALL_OW 3
76574: ST_TO_ADDR
76575: GO 76475
76577: POP
76578: POP
// j := GetClosestHex ( unit , tmp ) ;
76579: LD_ADDR_VAR 0 5
76583: PUSH
76584: LD_VAR 0 1
76588: PPUSH
76589: LD_VAR 0 6
76593: PPUSH
76594: CALL 75879 0 2
76598: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
76599: LD_VAR 0 1
76603: PPUSH
76604: LD_VAR 0 5
76608: PUSH
76609: LD_INT 1
76611: ARRAY
76612: PPUSH
76613: LD_VAR 0 5
76617: PUSH
76618: LD_INT 2
76620: ARRAY
76621: PPUSH
76622: CALL_OW 111
// end ;
76626: LD_VAR 0 3
76630: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
76631: LD_INT 0
76633: PPUSH
76634: PPUSH
76635: PPUSH
// uc_side = 0 ;
76636: LD_ADDR_OWVAR 20
76640: PUSH
76641: LD_INT 0
76643: ST_TO_ADDR
// uc_nation = 0 ;
76644: LD_ADDR_OWVAR 21
76648: PUSH
76649: LD_INT 0
76651: ST_TO_ADDR
// InitHc ;
76652: CALL_OW 19
// InitVc ;
76656: CALL_OW 20
// if mastodonts then
76660: LD_VAR 0 6
76664: IFFALSE 76731
// for i = 1 to mastodonts do
76666: LD_ADDR_VAR 0 11
76670: PUSH
76671: DOUBLE
76672: LD_INT 1
76674: DEC
76675: ST_TO_ADDR
76676: LD_VAR 0 6
76680: PUSH
76681: FOR_TO
76682: IFFALSE 76729
// begin vc_chassis := 31 ;
76684: LD_ADDR_OWVAR 37
76688: PUSH
76689: LD_INT 31
76691: ST_TO_ADDR
// vc_control := control_rider ;
76692: LD_ADDR_OWVAR 38
76696: PUSH
76697: LD_INT 4
76699: ST_TO_ADDR
// animal := CreateVehicle ;
76700: LD_ADDR_VAR 0 12
76704: PUSH
76705: CALL_OW 45
76709: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76710: LD_VAR 0 12
76714: PPUSH
76715: LD_VAR 0 8
76719: PPUSH
76720: LD_INT 0
76722: PPUSH
76723: CALL 78800 0 3
// end ;
76727: GO 76681
76729: POP
76730: POP
// if horses then
76731: LD_VAR 0 5
76735: IFFALSE 76802
// for i = 1 to horses do
76737: LD_ADDR_VAR 0 11
76741: PUSH
76742: DOUBLE
76743: LD_INT 1
76745: DEC
76746: ST_TO_ADDR
76747: LD_VAR 0 5
76751: PUSH
76752: FOR_TO
76753: IFFALSE 76800
// begin hc_class := 21 ;
76755: LD_ADDR_OWVAR 28
76759: PUSH
76760: LD_INT 21
76762: ST_TO_ADDR
// hc_gallery :=  ;
76763: LD_ADDR_OWVAR 33
76767: PUSH
76768: LD_STRING 
76770: ST_TO_ADDR
// animal := CreateHuman ;
76771: LD_ADDR_VAR 0 12
76775: PUSH
76776: CALL_OW 44
76780: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76781: LD_VAR 0 12
76785: PPUSH
76786: LD_VAR 0 8
76790: PPUSH
76791: LD_INT 0
76793: PPUSH
76794: CALL 78800 0 3
// end ;
76798: GO 76752
76800: POP
76801: POP
// if birds then
76802: LD_VAR 0 1
76806: IFFALSE 76873
// for i = 1 to birds do
76808: LD_ADDR_VAR 0 11
76812: PUSH
76813: DOUBLE
76814: LD_INT 1
76816: DEC
76817: ST_TO_ADDR
76818: LD_VAR 0 1
76822: PUSH
76823: FOR_TO
76824: IFFALSE 76871
// begin hc_class = 18 ;
76826: LD_ADDR_OWVAR 28
76830: PUSH
76831: LD_INT 18
76833: ST_TO_ADDR
// hc_gallery =  ;
76834: LD_ADDR_OWVAR 33
76838: PUSH
76839: LD_STRING 
76841: ST_TO_ADDR
// animal := CreateHuman ;
76842: LD_ADDR_VAR 0 12
76846: PUSH
76847: CALL_OW 44
76851: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76852: LD_VAR 0 12
76856: PPUSH
76857: LD_VAR 0 8
76861: PPUSH
76862: LD_INT 0
76864: PPUSH
76865: CALL 78800 0 3
// end ;
76869: GO 76823
76871: POP
76872: POP
// if tigers then
76873: LD_VAR 0 2
76877: IFFALSE 76961
// for i = 1 to tigers do
76879: LD_ADDR_VAR 0 11
76883: PUSH
76884: DOUBLE
76885: LD_INT 1
76887: DEC
76888: ST_TO_ADDR
76889: LD_VAR 0 2
76893: PUSH
76894: FOR_TO
76895: IFFALSE 76959
// begin hc_class = class_tiger ;
76897: LD_ADDR_OWVAR 28
76901: PUSH
76902: LD_INT 14
76904: ST_TO_ADDR
// hc_gallery =  ;
76905: LD_ADDR_OWVAR 33
76909: PUSH
76910: LD_STRING 
76912: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
76913: LD_ADDR_OWVAR 35
76917: PUSH
76918: LD_INT 7
76920: NEG
76921: PPUSH
76922: LD_INT 7
76924: PPUSH
76925: CALL_OW 12
76929: ST_TO_ADDR
// animal := CreateHuman ;
76930: LD_ADDR_VAR 0 12
76934: PUSH
76935: CALL_OW 44
76939: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76940: LD_VAR 0 12
76944: PPUSH
76945: LD_VAR 0 8
76949: PPUSH
76950: LD_INT 0
76952: PPUSH
76953: CALL 78800 0 3
// end ;
76957: GO 76894
76959: POP
76960: POP
// if apemans then
76961: LD_VAR 0 3
76965: IFFALSE 77088
// for i = 1 to apemans do
76967: LD_ADDR_VAR 0 11
76971: PUSH
76972: DOUBLE
76973: LD_INT 1
76975: DEC
76976: ST_TO_ADDR
76977: LD_VAR 0 3
76981: PUSH
76982: FOR_TO
76983: IFFALSE 77086
// begin hc_class = class_apeman ;
76985: LD_ADDR_OWVAR 28
76989: PUSH
76990: LD_INT 12
76992: ST_TO_ADDR
// hc_gallery =  ;
76993: LD_ADDR_OWVAR 33
76997: PUSH
76998: LD_STRING 
77000: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
77001: LD_ADDR_OWVAR 35
77005: PUSH
77006: LD_INT 5
77008: NEG
77009: PPUSH
77010: LD_INT 5
77012: PPUSH
77013: CALL_OW 12
77017: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
77018: LD_ADDR_OWVAR 31
77022: PUSH
77023: LD_INT 1
77025: PPUSH
77026: LD_INT 3
77028: PPUSH
77029: CALL_OW 12
77033: PUSH
77034: LD_INT 1
77036: PPUSH
77037: LD_INT 3
77039: PPUSH
77040: CALL_OW 12
77044: PUSH
77045: LD_INT 0
77047: PUSH
77048: LD_INT 0
77050: PUSH
77051: EMPTY
77052: LIST
77053: LIST
77054: LIST
77055: LIST
77056: ST_TO_ADDR
// animal := CreateHuman ;
77057: LD_ADDR_VAR 0 12
77061: PUSH
77062: CALL_OW 44
77066: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77067: LD_VAR 0 12
77071: PPUSH
77072: LD_VAR 0 8
77076: PPUSH
77077: LD_INT 0
77079: PPUSH
77080: CALL 78800 0 3
// end ;
77084: GO 76982
77086: POP
77087: POP
// if enchidnas then
77088: LD_VAR 0 4
77092: IFFALSE 77159
// for i = 1 to enchidnas do
77094: LD_ADDR_VAR 0 11
77098: PUSH
77099: DOUBLE
77100: LD_INT 1
77102: DEC
77103: ST_TO_ADDR
77104: LD_VAR 0 4
77108: PUSH
77109: FOR_TO
77110: IFFALSE 77157
// begin hc_class = 13 ;
77112: LD_ADDR_OWVAR 28
77116: PUSH
77117: LD_INT 13
77119: ST_TO_ADDR
// hc_gallery =  ;
77120: LD_ADDR_OWVAR 33
77124: PUSH
77125: LD_STRING 
77127: ST_TO_ADDR
// animal := CreateHuman ;
77128: LD_ADDR_VAR 0 12
77132: PUSH
77133: CALL_OW 44
77137: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77138: LD_VAR 0 12
77142: PPUSH
77143: LD_VAR 0 8
77147: PPUSH
77148: LD_INT 0
77150: PPUSH
77151: CALL 78800 0 3
// end ;
77155: GO 77109
77157: POP
77158: POP
// if fishes then
77159: LD_VAR 0 7
77163: IFFALSE 77230
// for i = 1 to fishes do
77165: LD_ADDR_VAR 0 11
77169: PUSH
77170: DOUBLE
77171: LD_INT 1
77173: DEC
77174: ST_TO_ADDR
77175: LD_VAR 0 7
77179: PUSH
77180: FOR_TO
77181: IFFALSE 77228
// begin hc_class = 20 ;
77183: LD_ADDR_OWVAR 28
77187: PUSH
77188: LD_INT 20
77190: ST_TO_ADDR
// hc_gallery =  ;
77191: LD_ADDR_OWVAR 33
77195: PUSH
77196: LD_STRING 
77198: ST_TO_ADDR
// animal := CreateHuman ;
77199: LD_ADDR_VAR 0 12
77203: PUSH
77204: CALL_OW 44
77208: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
77209: LD_VAR 0 12
77213: PPUSH
77214: LD_VAR 0 9
77218: PPUSH
77219: LD_INT 0
77221: PPUSH
77222: CALL 78800 0 3
// end ;
77226: GO 77180
77228: POP
77229: POP
// end ;
77230: LD_VAR 0 10
77234: RET
// export function WantHeal ( sci , unit ) ; begin
77235: LD_INT 0
77237: PPUSH
// if GetTaskList ( sci ) > 0 then
77238: LD_VAR 0 1
77242: PPUSH
77243: CALL_OW 437
77247: PUSH
77248: LD_INT 0
77250: GREATER
77251: IFFALSE 77321
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
77253: LD_VAR 0 1
77257: PPUSH
77258: CALL_OW 437
77262: PUSH
77263: LD_INT 1
77265: ARRAY
77266: PUSH
77267: LD_INT 1
77269: ARRAY
77270: PUSH
77271: LD_STRING l
77273: EQUAL
77274: PUSH
77275: LD_VAR 0 1
77279: PPUSH
77280: CALL_OW 437
77284: PUSH
77285: LD_INT 1
77287: ARRAY
77288: PUSH
77289: LD_INT 4
77291: ARRAY
77292: PUSH
77293: LD_VAR 0 2
77297: EQUAL
77298: AND
77299: IFFALSE 77311
// result := true else
77301: LD_ADDR_VAR 0 3
77305: PUSH
77306: LD_INT 1
77308: ST_TO_ADDR
77309: GO 77319
// result := false ;
77311: LD_ADDR_VAR 0 3
77315: PUSH
77316: LD_INT 0
77318: ST_TO_ADDR
// end else
77319: GO 77329
// result := false ;
77321: LD_ADDR_VAR 0 3
77325: PUSH
77326: LD_INT 0
77328: ST_TO_ADDR
// end ;
77329: LD_VAR 0 3
77333: RET
// export function HealTarget ( sci ) ; begin
77334: LD_INT 0
77336: PPUSH
// if not sci then
77337: LD_VAR 0 1
77341: NOT
77342: IFFALSE 77346
// exit ;
77344: GO 77411
// result := 0 ;
77346: LD_ADDR_VAR 0 2
77350: PUSH
77351: LD_INT 0
77353: ST_TO_ADDR
// if GetTaskList ( sci ) then
77354: LD_VAR 0 1
77358: PPUSH
77359: CALL_OW 437
77363: IFFALSE 77411
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
77365: LD_VAR 0 1
77369: PPUSH
77370: CALL_OW 437
77374: PUSH
77375: LD_INT 1
77377: ARRAY
77378: PUSH
77379: LD_INT 1
77381: ARRAY
77382: PUSH
77383: LD_STRING l
77385: EQUAL
77386: IFFALSE 77411
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
77388: LD_ADDR_VAR 0 2
77392: PUSH
77393: LD_VAR 0 1
77397: PPUSH
77398: CALL_OW 437
77402: PUSH
77403: LD_INT 1
77405: ARRAY
77406: PUSH
77407: LD_INT 4
77409: ARRAY
77410: ST_TO_ADDR
// end ;
77411: LD_VAR 0 2
77415: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77416: LD_INT 0
77418: PPUSH
77419: PPUSH
77420: PPUSH
77421: PPUSH
// if not base_units then
77422: LD_VAR 0 1
77426: NOT
77427: IFFALSE 77431
// exit ;
77429: GO 77518
// result := false ;
77431: LD_ADDR_VAR 0 2
77435: PUSH
77436: LD_INT 0
77438: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77439: LD_ADDR_VAR 0 5
77443: PUSH
77444: LD_VAR 0 1
77448: PPUSH
77449: LD_INT 21
77451: PUSH
77452: LD_INT 3
77454: PUSH
77455: EMPTY
77456: LIST
77457: LIST
77458: PPUSH
77459: CALL_OW 72
77463: ST_TO_ADDR
// if not tmp then
77464: LD_VAR 0 5
77468: NOT
77469: IFFALSE 77473
// exit ;
77471: GO 77518
// for i in tmp do
77473: LD_ADDR_VAR 0 3
77477: PUSH
77478: LD_VAR 0 5
77482: PUSH
77483: FOR_IN
77484: IFFALSE 77516
// begin result := EnemyInRange ( i , 22 ) ;
77486: LD_ADDR_VAR 0 2
77490: PUSH
77491: LD_VAR 0 3
77495: PPUSH
77496: LD_INT 22
77498: PPUSH
77499: CALL 75754 0 2
77503: ST_TO_ADDR
// if result then
77504: LD_VAR 0 2
77508: IFFALSE 77514
// exit ;
77510: POP
77511: POP
77512: GO 77518
// end ;
77514: GO 77483
77516: POP
77517: POP
// end ;
77518: LD_VAR 0 2
77522: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
77523: LD_INT 0
77525: PPUSH
77526: PPUSH
// if not units then
77527: LD_VAR 0 1
77531: NOT
77532: IFFALSE 77536
// exit ;
77534: GO 77606
// result := [ ] ;
77536: LD_ADDR_VAR 0 3
77540: PUSH
77541: EMPTY
77542: ST_TO_ADDR
// for i in units do
77543: LD_ADDR_VAR 0 4
77547: PUSH
77548: LD_VAR 0 1
77552: PUSH
77553: FOR_IN
77554: IFFALSE 77604
// if GetTag ( i ) = tag then
77556: LD_VAR 0 4
77560: PPUSH
77561: CALL_OW 110
77565: PUSH
77566: LD_VAR 0 2
77570: EQUAL
77571: IFFALSE 77602
// result := Insert ( result , result + 1 , i ) ;
77573: LD_ADDR_VAR 0 3
77577: PUSH
77578: LD_VAR 0 3
77582: PPUSH
77583: LD_VAR 0 3
77587: PUSH
77588: LD_INT 1
77590: PLUS
77591: PPUSH
77592: LD_VAR 0 4
77596: PPUSH
77597: CALL_OW 2
77601: ST_TO_ADDR
77602: GO 77553
77604: POP
77605: POP
// end ;
77606: LD_VAR 0 3
77610: RET
// export function IsDriver ( un ) ; begin
77611: LD_INT 0
77613: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77614: LD_ADDR_VAR 0 2
77618: PUSH
77619: LD_VAR 0 1
77623: PUSH
77624: LD_INT 55
77626: PUSH
77627: EMPTY
77628: LIST
77629: PPUSH
77630: CALL_OW 69
77634: IN
77635: ST_TO_ADDR
// end ;
77636: LD_VAR 0 2
77640: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77641: LD_INT 0
77643: PPUSH
77644: PPUSH
// list := [ ] ;
77645: LD_ADDR_VAR 0 5
77649: PUSH
77650: EMPTY
77651: ST_TO_ADDR
// case d of 0 :
77652: LD_VAR 0 3
77656: PUSH
77657: LD_INT 0
77659: DOUBLE
77660: EQUAL
77661: IFTRUE 77665
77663: GO 77798
77665: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77666: LD_ADDR_VAR 0 5
77670: PUSH
77671: LD_VAR 0 1
77675: PUSH
77676: LD_INT 4
77678: MINUS
77679: PUSH
77680: LD_VAR 0 2
77684: PUSH
77685: LD_INT 4
77687: MINUS
77688: PUSH
77689: LD_INT 2
77691: PUSH
77692: EMPTY
77693: LIST
77694: LIST
77695: LIST
77696: PUSH
77697: LD_VAR 0 1
77701: PUSH
77702: LD_INT 3
77704: MINUS
77705: PUSH
77706: LD_VAR 0 2
77710: PUSH
77711: LD_INT 1
77713: PUSH
77714: EMPTY
77715: LIST
77716: LIST
77717: LIST
77718: PUSH
77719: LD_VAR 0 1
77723: PUSH
77724: LD_INT 4
77726: PLUS
77727: PUSH
77728: LD_VAR 0 2
77732: PUSH
77733: LD_INT 4
77735: PUSH
77736: EMPTY
77737: LIST
77738: LIST
77739: LIST
77740: PUSH
77741: LD_VAR 0 1
77745: PUSH
77746: LD_INT 3
77748: PLUS
77749: PUSH
77750: LD_VAR 0 2
77754: PUSH
77755: LD_INT 3
77757: PLUS
77758: PUSH
77759: LD_INT 5
77761: PUSH
77762: EMPTY
77763: LIST
77764: LIST
77765: LIST
77766: PUSH
77767: LD_VAR 0 1
77771: PUSH
77772: LD_VAR 0 2
77776: PUSH
77777: LD_INT 4
77779: PLUS
77780: PUSH
77781: LD_INT 0
77783: PUSH
77784: EMPTY
77785: LIST
77786: LIST
77787: LIST
77788: PUSH
77789: EMPTY
77790: LIST
77791: LIST
77792: LIST
77793: LIST
77794: LIST
77795: ST_TO_ADDR
// end ; 1 :
77796: GO 78496
77798: LD_INT 1
77800: DOUBLE
77801: EQUAL
77802: IFTRUE 77806
77804: GO 77939
77806: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
77807: LD_ADDR_VAR 0 5
77811: PUSH
77812: LD_VAR 0 1
77816: PUSH
77817: LD_VAR 0 2
77821: PUSH
77822: LD_INT 4
77824: MINUS
77825: PUSH
77826: LD_INT 3
77828: PUSH
77829: EMPTY
77830: LIST
77831: LIST
77832: LIST
77833: PUSH
77834: LD_VAR 0 1
77838: PUSH
77839: LD_INT 3
77841: MINUS
77842: PUSH
77843: LD_VAR 0 2
77847: PUSH
77848: LD_INT 3
77850: MINUS
77851: PUSH
77852: LD_INT 2
77854: PUSH
77855: EMPTY
77856: LIST
77857: LIST
77858: LIST
77859: PUSH
77860: LD_VAR 0 1
77864: PUSH
77865: LD_INT 4
77867: MINUS
77868: PUSH
77869: LD_VAR 0 2
77873: PUSH
77874: LD_INT 1
77876: PUSH
77877: EMPTY
77878: LIST
77879: LIST
77880: LIST
77881: PUSH
77882: LD_VAR 0 1
77886: PUSH
77887: LD_VAR 0 2
77891: PUSH
77892: LD_INT 3
77894: PLUS
77895: PUSH
77896: LD_INT 0
77898: PUSH
77899: EMPTY
77900: LIST
77901: LIST
77902: LIST
77903: PUSH
77904: LD_VAR 0 1
77908: PUSH
77909: LD_INT 4
77911: PLUS
77912: PUSH
77913: LD_VAR 0 2
77917: PUSH
77918: LD_INT 4
77920: PLUS
77921: PUSH
77922: LD_INT 5
77924: PUSH
77925: EMPTY
77926: LIST
77927: LIST
77928: LIST
77929: PUSH
77930: EMPTY
77931: LIST
77932: LIST
77933: LIST
77934: LIST
77935: LIST
77936: ST_TO_ADDR
// end ; 2 :
77937: GO 78496
77939: LD_INT 2
77941: DOUBLE
77942: EQUAL
77943: IFTRUE 77947
77945: GO 78076
77947: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
77948: LD_ADDR_VAR 0 5
77952: PUSH
77953: LD_VAR 0 1
77957: PUSH
77958: LD_VAR 0 2
77962: PUSH
77963: LD_INT 3
77965: MINUS
77966: PUSH
77967: LD_INT 3
77969: PUSH
77970: EMPTY
77971: LIST
77972: LIST
77973: LIST
77974: PUSH
77975: LD_VAR 0 1
77979: PUSH
77980: LD_INT 4
77982: PLUS
77983: PUSH
77984: LD_VAR 0 2
77988: PUSH
77989: LD_INT 4
77991: PUSH
77992: EMPTY
77993: LIST
77994: LIST
77995: LIST
77996: PUSH
77997: LD_VAR 0 1
78001: PUSH
78002: LD_VAR 0 2
78006: PUSH
78007: LD_INT 4
78009: PLUS
78010: PUSH
78011: LD_INT 0
78013: PUSH
78014: EMPTY
78015: LIST
78016: LIST
78017: LIST
78018: PUSH
78019: LD_VAR 0 1
78023: PUSH
78024: LD_INT 3
78026: MINUS
78027: PUSH
78028: LD_VAR 0 2
78032: PUSH
78033: LD_INT 1
78035: PUSH
78036: EMPTY
78037: LIST
78038: LIST
78039: LIST
78040: PUSH
78041: LD_VAR 0 1
78045: PUSH
78046: LD_INT 4
78048: MINUS
78049: PUSH
78050: LD_VAR 0 2
78054: PUSH
78055: LD_INT 4
78057: MINUS
78058: PUSH
78059: LD_INT 2
78061: PUSH
78062: EMPTY
78063: LIST
78064: LIST
78065: LIST
78066: PUSH
78067: EMPTY
78068: LIST
78069: LIST
78070: LIST
78071: LIST
78072: LIST
78073: ST_TO_ADDR
// end ; 3 :
78074: GO 78496
78076: LD_INT 3
78078: DOUBLE
78079: EQUAL
78080: IFTRUE 78084
78082: GO 78217
78084: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
78085: LD_ADDR_VAR 0 5
78089: PUSH
78090: LD_VAR 0 1
78094: PUSH
78095: LD_INT 3
78097: PLUS
78098: PUSH
78099: LD_VAR 0 2
78103: PUSH
78104: LD_INT 4
78106: PUSH
78107: EMPTY
78108: LIST
78109: LIST
78110: LIST
78111: PUSH
78112: LD_VAR 0 1
78116: PUSH
78117: LD_INT 4
78119: PLUS
78120: PUSH
78121: LD_VAR 0 2
78125: PUSH
78126: LD_INT 4
78128: PLUS
78129: PUSH
78130: LD_INT 5
78132: PUSH
78133: EMPTY
78134: LIST
78135: LIST
78136: LIST
78137: PUSH
78138: LD_VAR 0 1
78142: PUSH
78143: LD_INT 4
78145: MINUS
78146: PUSH
78147: LD_VAR 0 2
78151: PUSH
78152: LD_INT 1
78154: PUSH
78155: EMPTY
78156: LIST
78157: LIST
78158: LIST
78159: PUSH
78160: LD_VAR 0 1
78164: PUSH
78165: LD_VAR 0 2
78169: PUSH
78170: LD_INT 4
78172: MINUS
78173: PUSH
78174: LD_INT 3
78176: PUSH
78177: EMPTY
78178: LIST
78179: LIST
78180: LIST
78181: PUSH
78182: LD_VAR 0 1
78186: PUSH
78187: LD_INT 3
78189: MINUS
78190: PUSH
78191: LD_VAR 0 2
78195: PUSH
78196: LD_INT 3
78198: MINUS
78199: PUSH
78200: LD_INT 2
78202: PUSH
78203: EMPTY
78204: LIST
78205: LIST
78206: LIST
78207: PUSH
78208: EMPTY
78209: LIST
78210: LIST
78211: LIST
78212: LIST
78213: LIST
78214: ST_TO_ADDR
// end ; 4 :
78215: GO 78496
78217: LD_INT 4
78219: DOUBLE
78220: EQUAL
78221: IFTRUE 78225
78223: GO 78358
78225: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
78226: LD_ADDR_VAR 0 5
78230: PUSH
78231: LD_VAR 0 1
78235: PUSH
78236: LD_VAR 0 2
78240: PUSH
78241: LD_INT 4
78243: PLUS
78244: PUSH
78245: LD_INT 0
78247: PUSH
78248: EMPTY
78249: LIST
78250: LIST
78251: LIST
78252: PUSH
78253: LD_VAR 0 1
78257: PUSH
78258: LD_INT 3
78260: PLUS
78261: PUSH
78262: LD_VAR 0 2
78266: PUSH
78267: LD_INT 3
78269: PLUS
78270: PUSH
78271: LD_INT 5
78273: PUSH
78274: EMPTY
78275: LIST
78276: LIST
78277: LIST
78278: PUSH
78279: LD_VAR 0 1
78283: PUSH
78284: LD_INT 4
78286: PLUS
78287: PUSH
78288: LD_VAR 0 2
78292: PUSH
78293: LD_INT 4
78295: PUSH
78296: EMPTY
78297: LIST
78298: LIST
78299: LIST
78300: PUSH
78301: LD_VAR 0 1
78305: PUSH
78306: LD_VAR 0 2
78310: PUSH
78311: LD_INT 3
78313: MINUS
78314: PUSH
78315: LD_INT 3
78317: PUSH
78318: EMPTY
78319: LIST
78320: LIST
78321: LIST
78322: PUSH
78323: LD_VAR 0 1
78327: PUSH
78328: LD_INT 4
78330: MINUS
78331: PUSH
78332: LD_VAR 0 2
78336: PUSH
78337: LD_INT 4
78339: MINUS
78340: PUSH
78341: LD_INT 2
78343: PUSH
78344: EMPTY
78345: LIST
78346: LIST
78347: LIST
78348: PUSH
78349: EMPTY
78350: LIST
78351: LIST
78352: LIST
78353: LIST
78354: LIST
78355: ST_TO_ADDR
// end ; 5 :
78356: GO 78496
78358: LD_INT 5
78360: DOUBLE
78361: EQUAL
78362: IFTRUE 78366
78364: GO 78495
78366: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
78367: LD_ADDR_VAR 0 5
78371: PUSH
78372: LD_VAR 0 1
78376: PUSH
78377: LD_INT 4
78379: MINUS
78380: PUSH
78381: LD_VAR 0 2
78385: PUSH
78386: LD_INT 1
78388: PUSH
78389: EMPTY
78390: LIST
78391: LIST
78392: LIST
78393: PUSH
78394: LD_VAR 0 1
78398: PUSH
78399: LD_VAR 0 2
78403: PUSH
78404: LD_INT 4
78406: MINUS
78407: PUSH
78408: LD_INT 3
78410: PUSH
78411: EMPTY
78412: LIST
78413: LIST
78414: LIST
78415: PUSH
78416: LD_VAR 0 1
78420: PUSH
78421: LD_INT 4
78423: PLUS
78424: PUSH
78425: LD_VAR 0 2
78429: PUSH
78430: LD_INT 4
78432: PLUS
78433: PUSH
78434: LD_INT 5
78436: PUSH
78437: EMPTY
78438: LIST
78439: LIST
78440: LIST
78441: PUSH
78442: LD_VAR 0 1
78446: PUSH
78447: LD_INT 3
78449: PLUS
78450: PUSH
78451: LD_VAR 0 2
78455: PUSH
78456: LD_INT 4
78458: PUSH
78459: EMPTY
78460: LIST
78461: LIST
78462: LIST
78463: PUSH
78464: LD_VAR 0 1
78468: PUSH
78469: LD_VAR 0 2
78473: PUSH
78474: LD_INT 3
78476: PLUS
78477: PUSH
78478: LD_INT 0
78480: PUSH
78481: EMPTY
78482: LIST
78483: LIST
78484: LIST
78485: PUSH
78486: EMPTY
78487: LIST
78488: LIST
78489: LIST
78490: LIST
78491: LIST
78492: ST_TO_ADDR
// end ; end ;
78493: GO 78496
78495: POP
// result := list ;
78496: LD_ADDR_VAR 0 4
78500: PUSH
78501: LD_VAR 0 5
78505: ST_TO_ADDR
// end ;
78506: LD_VAR 0 4
78510: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78511: LD_INT 0
78513: PPUSH
78514: PPUSH
78515: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78516: LD_VAR 0 1
78520: NOT
78521: PUSH
78522: LD_VAR 0 2
78526: PUSH
78527: LD_INT 1
78529: PUSH
78530: LD_INT 2
78532: PUSH
78533: LD_INT 3
78535: PUSH
78536: LD_INT 4
78538: PUSH
78539: EMPTY
78540: LIST
78541: LIST
78542: LIST
78543: LIST
78544: IN
78545: NOT
78546: OR
78547: IFFALSE 78551
// exit ;
78549: GO 78643
// tmp := [ ] ;
78551: LD_ADDR_VAR 0 5
78555: PUSH
78556: EMPTY
78557: ST_TO_ADDR
// for i in units do
78558: LD_ADDR_VAR 0 4
78562: PUSH
78563: LD_VAR 0 1
78567: PUSH
78568: FOR_IN
78569: IFFALSE 78612
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
78571: LD_ADDR_VAR 0 5
78575: PUSH
78576: LD_VAR 0 5
78580: PPUSH
78581: LD_VAR 0 5
78585: PUSH
78586: LD_INT 1
78588: PLUS
78589: PPUSH
78590: LD_VAR 0 4
78594: PPUSH
78595: LD_VAR 0 2
78599: PPUSH
78600: CALL_OW 259
78604: PPUSH
78605: CALL_OW 2
78609: ST_TO_ADDR
78610: GO 78568
78612: POP
78613: POP
// if not tmp then
78614: LD_VAR 0 5
78618: NOT
78619: IFFALSE 78623
// exit ;
78621: GO 78643
// result := SortListByListDesc ( units , tmp ) ;
78623: LD_ADDR_VAR 0 3
78627: PUSH
78628: LD_VAR 0 1
78632: PPUSH
78633: LD_VAR 0 5
78637: PPUSH
78638: CALL_OW 77
78642: ST_TO_ADDR
// end ;
78643: LD_VAR 0 3
78647: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78648: LD_INT 0
78650: PPUSH
78651: PPUSH
78652: PPUSH
// x := GetX ( building ) ;
78653: LD_ADDR_VAR 0 4
78657: PUSH
78658: LD_VAR 0 2
78662: PPUSH
78663: CALL_OW 250
78667: ST_TO_ADDR
// y := GetY ( building ) ;
78668: LD_ADDR_VAR 0 5
78672: PUSH
78673: LD_VAR 0 2
78677: PPUSH
78678: CALL_OW 251
78682: ST_TO_ADDR
// if GetTaskList ( unit ) then
78683: LD_VAR 0 1
78687: PPUSH
78688: CALL_OW 437
78692: IFFALSE 78787
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78694: LD_STRING e
78696: PUSH
78697: LD_VAR 0 1
78701: PPUSH
78702: CALL_OW 437
78706: PUSH
78707: LD_INT 1
78709: ARRAY
78710: PUSH
78711: LD_INT 1
78713: ARRAY
78714: EQUAL
78715: PUSH
78716: LD_VAR 0 4
78720: PUSH
78721: LD_VAR 0 1
78725: PPUSH
78726: CALL_OW 437
78730: PUSH
78731: LD_INT 1
78733: ARRAY
78734: PUSH
78735: LD_INT 2
78737: ARRAY
78738: EQUAL
78739: AND
78740: PUSH
78741: LD_VAR 0 5
78745: PUSH
78746: LD_VAR 0 1
78750: PPUSH
78751: CALL_OW 437
78755: PUSH
78756: LD_INT 1
78758: ARRAY
78759: PUSH
78760: LD_INT 3
78762: ARRAY
78763: EQUAL
78764: AND
78765: IFFALSE 78777
// result := true else
78767: LD_ADDR_VAR 0 3
78771: PUSH
78772: LD_INT 1
78774: ST_TO_ADDR
78775: GO 78785
// result := false ;
78777: LD_ADDR_VAR 0 3
78781: PUSH
78782: LD_INT 0
78784: ST_TO_ADDR
// end else
78785: GO 78795
// result := false ;
78787: LD_ADDR_VAR 0 3
78791: PUSH
78792: LD_INT 0
78794: ST_TO_ADDR
// end ;
78795: LD_VAR 0 3
78799: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
78800: LD_INT 0
78802: PPUSH
78803: PPUSH
78804: PPUSH
78805: PPUSH
// if not unit or not area then
78806: LD_VAR 0 1
78810: NOT
78811: PUSH
78812: LD_VAR 0 2
78816: NOT
78817: OR
78818: IFFALSE 78822
// exit ;
78820: GO 78986
// tmp := AreaToList ( area , i ) ;
78822: LD_ADDR_VAR 0 6
78826: PUSH
78827: LD_VAR 0 2
78831: PPUSH
78832: LD_VAR 0 5
78836: PPUSH
78837: CALL_OW 517
78841: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
78842: LD_ADDR_VAR 0 5
78846: PUSH
78847: DOUBLE
78848: LD_INT 1
78850: DEC
78851: ST_TO_ADDR
78852: LD_VAR 0 6
78856: PUSH
78857: LD_INT 1
78859: ARRAY
78860: PUSH
78861: FOR_TO
78862: IFFALSE 78984
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
78864: LD_ADDR_VAR 0 7
78868: PUSH
78869: LD_VAR 0 6
78873: PUSH
78874: LD_INT 1
78876: ARRAY
78877: PUSH
78878: LD_VAR 0 5
78882: ARRAY
78883: PUSH
78884: LD_VAR 0 6
78888: PUSH
78889: LD_INT 2
78891: ARRAY
78892: PUSH
78893: LD_VAR 0 5
78897: ARRAY
78898: PUSH
78899: EMPTY
78900: LIST
78901: LIST
78902: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
78903: LD_VAR 0 7
78907: PUSH
78908: LD_INT 1
78910: ARRAY
78911: PPUSH
78912: LD_VAR 0 7
78916: PUSH
78917: LD_INT 2
78919: ARRAY
78920: PPUSH
78921: CALL_OW 428
78925: PUSH
78926: LD_INT 0
78928: EQUAL
78929: IFFALSE 78982
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78931: LD_VAR 0 1
78935: PPUSH
78936: LD_VAR 0 7
78940: PUSH
78941: LD_INT 1
78943: ARRAY
78944: PPUSH
78945: LD_VAR 0 7
78949: PUSH
78950: LD_INT 2
78952: ARRAY
78953: PPUSH
78954: LD_VAR 0 3
78958: PPUSH
78959: CALL_OW 48
// result := IsPlaced ( unit ) ;
78963: LD_ADDR_VAR 0 4
78967: PUSH
78968: LD_VAR 0 1
78972: PPUSH
78973: CALL_OW 305
78977: ST_TO_ADDR
// exit ;
78978: POP
78979: POP
78980: GO 78986
// end ; end ;
78982: GO 78861
78984: POP
78985: POP
// end ;
78986: LD_VAR 0 4
78990: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78991: LD_INT 0
78993: PPUSH
78994: PPUSH
78995: PPUSH
// if not side or side > 8 then
78996: LD_VAR 0 1
79000: NOT
79001: PUSH
79002: LD_VAR 0 1
79006: PUSH
79007: LD_INT 8
79009: GREATER
79010: OR
79011: IFFALSE 79015
// exit ;
79013: GO 79202
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
79015: LD_ADDR_VAR 0 4
79019: PUSH
79020: LD_INT 22
79022: PUSH
79023: LD_VAR 0 1
79027: PUSH
79028: EMPTY
79029: LIST
79030: LIST
79031: PUSH
79032: LD_INT 21
79034: PUSH
79035: LD_INT 3
79037: PUSH
79038: EMPTY
79039: LIST
79040: LIST
79041: PUSH
79042: EMPTY
79043: LIST
79044: LIST
79045: PPUSH
79046: CALL_OW 69
79050: ST_TO_ADDR
// if not tmp then
79051: LD_VAR 0 4
79055: NOT
79056: IFFALSE 79060
// exit ;
79058: GO 79202
// enable_addtolog := true ;
79060: LD_ADDR_OWVAR 81
79064: PUSH
79065: LD_INT 1
79067: ST_TO_ADDR
// AddToLog ( [ ) ;
79068: LD_STRING [
79070: PPUSH
79071: CALL_OW 561
// for i in tmp do
79075: LD_ADDR_VAR 0 3
79079: PUSH
79080: LD_VAR 0 4
79084: PUSH
79085: FOR_IN
79086: IFFALSE 79193
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
79088: LD_STRING [
79090: PUSH
79091: LD_VAR 0 3
79095: PPUSH
79096: CALL_OW 266
79100: STR
79101: PUSH
79102: LD_STRING , 
79104: STR
79105: PUSH
79106: LD_VAR 0 3
79110: PPUSH
79111: CALL_OW 250
79115: STR
79116: PUSH
79117: LD_STRING , 
79119: STR
79120: PUSH
79121: LD_VAR 0 3
79125: PPUSH
79126: CALL_OW 251
79130: STR
79131: PUSH
79132: LD_STRING , 
79134: STR
79135: PUSH
79136: LD_VAR 0 3
79140: PPUSH
79141: CALL_OW 254
79145: STR
79146: PUSH
79147: LD_STRING , 
79149: STR
79150: PUSH
79151: LD_VAR 0 3
79155: PPUSH
79156: LD_INT 1
79158: PPUSH
79159: CALL_OW 268
79163: STR
79164: PUSH
79165: LD_STRING , 
79167: STR
79168: PUSH
79169: LD_VAR 0 3
79173: PPUSH
79174: LD_INT 2
79176: PPUSH
79177: CALL_OW 268
79181: STR
79182: PUSH
79183: LD_STRING ],
79185: STR
79186: PPUSH
79187: CALL_OW 561
// end ;
79191: GO 79085
79193: POP
79194: POP
// AddToLog ( ]; ) ;
79195: LD_STRING ];
79197: PPUSH
79198: CALL_OW 561
// end ;
79202: LD_VAR 0 2
79206: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
79207: LD_INT 0
79209: PPUSH
79210: PPUSH
79211: PPUSH
79212: PPUSH
79213: PPUSH
// if not area or not rate or not max then
79214: LD_VAR 0 1
79218: NOT
79219: PUSH
79220: LD_VAR 0 2
79224: NOT
79225: OR
79226: PUSH
79227: LD_VAR 0 4
79231: NOT
79232: OR
79233: IFFALSE 79237
// exit ;
79235: GO 79429
// while 1 do
79237: LD_INT 1
79239: IFFALSE 79429
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
79241: LD_ADDR_VAR 0 9
79245: PUSH
79246: LD_VAR 0 1
79250: PPUSH
79251: LD_INT 1
79253: PPUSH
79254: CALL_OW 287
79258: PUSH
79259: LD_INT 10
79261: MUL
79262: ST_TO_ADDR
// r := rate / 10 ;
79263: LD_ADDR_VAR 0 7
79267: PUSH
79268: LD_VAR 0 2
79272: PUSH
79273: LD_INT 10
79275: DIVREAL
79276: ST_TO_ADDR
// time := 1 1$00 ;
79277: LD_ADDR_VAR 0 8
79281: PUSH
79282: LD_INT 2100
79284: ST_TO_ADDR
// if amount < min then
79285: LD_VAR 0 9
79289: PUSH
79290: LD_VAR 0 3
79294: LESS
79295: IFFALSE 79313
// r := r * 2 else
79297: LD_ADDR_VAR 0 7
79301: PUSH
79302: LD_VAR 0 7
79306: PUSH
79307: LD_INT 2
79309: MUL
79310: ST_TO_ADDR
79311: GO 79339
// if amount > max then
79313: LD_VAR 0 9
79317: PUSH
79318: LD_VAR 0 4
79322: GREATER
79323: IFFALSE 79339
// r := r / 2 ;
79325: LD_ADDR_VAR 0 7
79329: PUSH
79330: LD_VAR 0 7
79334: PUSH
79335: LD_INT 2
79337: DIVREAL
79338: ST_TO_ADDR
// time := time / r ;
79339: LD_ADDR_VAR 0 8
79343: PUSH
79344: LD_VAR 0 8
79348: PUSH
79349: LD_VAR 0 7
79353: DIVREAL
79354: ST_TO_ADDR
// if time < 0 then
79355: LD_VAR 0 8
79359: PUSH
79360: LD_INT 0
79362: LESS
79363: IFFALSE 79380
// time := time * - 1 ;
79365: LD_ADDR_VAR 0 8
79369: PUSH
79370: LD_VAR 0 8
79374: PUSH
79375: LD_INT 1
79377: NEG
79378: MUL
79379: ST_TO_ADDR
// wait ( time ) ;
79380: LD_VAR 0 8
79384: PPUSH
79385: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
79389: LD_INT 35
79391: PPUSH
79392: LD_INT 875
79394: PPUSH
79395: CALL_OW 12
79399: PPUSH
79400: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79404: LD_INT 1
79406: PPUSH
79407: LD_INT 5
79409: PPUSH
79410: CALL_OW 12
79414: PPUSH
79415: LD_VAR 0 1
79419: PPUSH
79420: LD_INT 1
79422: PPUSH
79423: CALL_OW 55
// end ;
79427: GO 79237
// end ;
79429: LD_VAR 0 5
79433: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79434: LD_INT 0
79436: PPUSH
79437: PPUSH
79438: PPUSH
79439: PPUSH
79440: PPUSH
79441: PPUSH
79442: PPUSH
79443: PPUSH
// if not turrets or not factories then
79444: LD_VAR 0 1
79448: NOT
79449: PUSH
79450: LD_VAR 0 2
79454: NOT
79455: OR
79456: IFFALSE 79460
// exit ;
79458: GO 79767
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79460: LD_ADDR_VAR 0 10
79464: PUSH
79465: LD_INT 5
79467: PUSH
79468: LD_INT 6
79470: PUSH
79471: EMPTY
79472: LIST
79473: LIST
79474: PUSH
79475: LD_INT 2
79477: PUSH
79478: LD_INT 4
79480: PUSH
79481: EMPTY
79482: LIST
79483: LIST
79484: PUSH
79485: LD_INT 3
79487: PUSH
79488: LD_INT 5
79490: PUSH
79491: EMPTY
79492: LIST
79493: LIST
79494: PUSH
79495: EMPTY
79496: LIST
79497: LIST
79498: LIST
79499: PUSH
79500: LD_INT 24
79502: PUSH
79503: LD_INT 25
79505: PUSH
79506: EMPTY
79507: LIST
79508: LIST
79509: PUSH
79510: LD_INT 23
79512: PUSH
79513: LD_INT 27
79515: PUSH
79516: EMPTY
79517: LIST
79518: LIST
79519: PUSH
79520: EMPTY
79521: LIST
79522: LIST
79523: PUSH
79524: LD_INT 42
79526: PUSH
79527: LD_INT 43
79529: PUSH
79530: EMPTY
79531: LIST
79532: LIST
79533: PUSH
79534: LD_INT 44
79536: PUSH
79537: LD_INT 46
79539: PUSH
79540: EMPTY
79541: LIST
79542: LIST
79543: PUSH
79544: LD_INT 45
79546: PUSH
79547: LD_INT 47
79549: PUSH
79550: EMPTY
79551: LIST
79552: LIST
79553: PUSH
79554: EMPTY
79555: LIST
79556: LIST
79557: LIST
79558: PUSH
79559: EMPTY
79560: LIST
79561: LIST
79562: LIST
79563: ST_TO_ADDR
// result := [ ] ;
79564: LD_ADDR_VAR 0 3
79568: PUSH
79569: EMPTY
79570: ST_TO_ADDR
// for i in turrets do
79571: LD_ADDR_VAR 0 4
79575: PUSH
79576: LD_VAR 0 1
79580: PUSH
79581: FOR_IN
79582: IFFALSE 79765
// begin nat := GetNation ( i ) ;
79584: LD_ADDR_VAR 0 7
79588: PUSH
79589: LD_VAR 0 4
79593: PPUSH
79594: CALL_OW 248
79598: ST_TO_ADDR
// weapon := 0 ;
79599: LD_ADDR_VAR 0 8
79603: PUSH
79604: LD_INT 0
79606: ST_TO_ADDR
// if not nat then
79607: LD_VAR 0 7
79611: NOT
79612: IFFALSE 79616
// continue ;
79614: GO 79581
// for j in list [ nat ] do
79616: LD_ADDR_VAR 0 5
79620: PUSH
79621: LD_VAR 0 10
79625: PUSH
79626: LD_VAR 0 7
79630: ARRAY
79631: PUSH
79632: FOR_IN
79633: IFFALSE 79674
// if GetBWeapon ( i ) = j [ 1 ] then
79635: LD_VAR 0 4
79639: PPUSH
79640: CALL_OW 269
79644: PUSH
79645: LD_VAR 0 5
79649: PUSH
79650: LD_INT 1
79652: ARRAY
79653: EQUAL
79654: IFFALSE 79672
// begin weapon := j [ 2 ] ;
79656: LD_ADDR_VAR 0 8
79660: PUSH
79661: LD_VAR 0 5
79665: PUSH
79666: LD_INT 2
79668: ARRAY
79669: ST_TO_ADDR
// break ;
79670: GO 79674
// end ;
79672: GO 79632
79674: POP
79675: POP
// if not weapon then
79676: LD_VAR 0 8
79680: NOT
79681: IFFALSE 79685
// continue ;
79683: GO 79581
// for k in factories do
79685: LD_ADDR_VAR 0 6
79689: PUSH
79690: LD_VAR 0 2
79694: PUSH
79695: FOR_IN
79696: IFFALSE 79761
// begin weapons := AvailableWeaponList ( k ) ;
79698: LD_ADDR_VAR 0 9
79702: PUSH
79703: LD_VAR 0 6
79707: PPUSH
79708: CALL_OW 478
79712: ST_TO_ADDR
// if not weapons then
79713: LD_VAR 0 9
79717: NOT
79718: IFFALSE 79722
// continue ;
79720: GO 79695
// if weapon in weapons then
79722: LD_VAR 0 8
79726: PUSH
79727: LD_VAR 0 9
79731: IN
79732: IFFALSE 79759
// begin result := [ i , weapon ] ;
79734: LD_ADDR_VAR 0 3
79738: PUSH
79739: LD_VAR 0 4
79743: PUSH
79744: LD_VAR 0 8
79748: PUSH
79749: EMPTY
79750: LIST
79751: LIST
79752: ST_TO_ADDR
// exit ;
79753: POP
79754: POP
79755: POP
79756: POP
79757: GO 79767
// end ; end ;
79759: GO 79695
79761: POP
79762: POP
// end ;
79763: GO 79581
79765: POP
79766: POP
// end ;
79767: LD_VAR 0 3
79771: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
79772: LD_INT 0
79774: PPUSH
// if not side or side > 8 then
79775: LD_VAR 0 3
79779: NOT
79780: PUSH
79781: LD_VAR 0 3
79785: PUSH
79786: LD_INT 8
79788: GREATER
79789: OR
79790: IFFALSE 79794
// exit ;
79792: GO 79853
// if not range then
79794: LD_VAR 0 4
79798: NOT
79799: IFFALSE 79810
// range := - 12 ;
79801: LD_ADDR_VAR 0 4
79805: PUSH
79806: LD_INT 12
79808: NEG
79809: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
79810: LD_VAR 0 1
79814: PPUSH
79815: LD_VAR 0 2
79819: PPUSH
79820: LD_VAR 0 3
79824: PPUSH
79825: LD_VAR 0 4
79829: PPUSH
79830: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
79834: LD_VAR 0 1
79838: PPUSH
79839: LD_VAR 0 2
79843: PPUSH
79844: LD_VAR 0 3
79848: PPUSH
79849: CALL_OW 331
// end ;
79853: LD_VAR 0 5
79857: RET
// export function Video ( mode ) ; begin
79858: LD_INT 0
79860: PPUSH
// ingame_video = mode ;
79861: LD_ADDR_OWVAR 52
79865: PUSH
79866: LD_VAR 0 1
79870: ST_TO_ADDR
// interface_hidden = mode ;
79871: LD_ADDR_OWVAR 54
79875: PUSH
79876: LD_VAR 0 1
79880: ST_TO_ADDR
// end ;
79881: LD_VAR 0 2
79885: RET
// export function Join ( array , element ) ; begin
79886: LD_INT 0
79888: PPUSH
// result := Replace ( array , array + 1 , element ) ;
79889: LD_ADDR_VAR 0 3
79893: PUSH
79894: LD_VAR 0 1
79898: PPUSH
79899: LD_VAR 0 1
79903: PUSH
79904: LD_INT 1
79906: PLUS
79907: PPUSH
79908: LD_VAR 0 2
79912: PPUSH
79913: CALL_OW 1
79917: ST_TO_ADDR
// end ;
79918: LD_VAR 0 3
79922: RET
// export function JoinUnion ( array , element ) ; begin
79923: LD_INT 0
79925: PPUSH
// result := array union element ;
79926: LD_ADDR_VAR 0 3
79930: PUSH
79931: LD_VAR 0 1
79935: PUSH
79936: LD_VAR 0 2
79940: UNION
79941: ST_TO_ADDR
// end ;
79942: LD_VAR 0 3
79946: RET
// export function GetBehemoths ( side ) ; begin
79947: LD_INT 0
79949: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
79950: LD_ADDR_VAR 0 2
79954: PUSH
79955: LD_INT 22
79957: PUSH
79958: LD_VAR 0 1
79962: PUSH
79963: EMPTY
79964: LIST
79965: LIST
79966: PUSH
79967: LD_INT 31
79969: PUSH
79970: LD_INT 25
79972: PUSH
79973: EMPTY
79974: LIST
79975: LIST
79976: PUSH
79977: EMPTY
79978: LIST
79979: LIST
79980: PPUSH
79981: CALL_OW 69
79985: ST_TO_ADDR
// end ;
79986: LD_VAR 0 2
79990: RET
// export function Shuffle ( array ) ; var i , index ; begin
79991: LD_INT 0
79993: PPUSH
79994: PPUSH
79995: PPUSH
// result := [ ] ;
79996: LD_ADDR_VAR 0 2
80000: PUSH
80001: EMPTY
80002: ST_TO_ADDR
// if not array then
80003: LD_VAR 0 1
80007: NOT
80008: IFFALSE 80012
// exit ;
80010: GO 80111
// Randomize ;
80012: CALL_OW 10
// for i = array downto 1 do
80016: LD_ADDR_VAR 0 3
80020: PUSH
80021: DOUBLE
80022: LD_VAR 0 1
80026: INC
80027: ST_TO_ADDR
80028: LD_INT 1
80030: PUSH
80031: FOR_DOWNTO
80032: IFFALSE 80109
// begin index := rand ( 1 , array ) ;
80034: LD_ADDR_VAR 0 4
80038: PUSH
80039: LD_INT 1
80041: PPUSH
80042: LD_VAR 0 1
80046: PPUSH
80047: CALL_OW 12
80051: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
80052: LD_ADDR_VAR 0 2
80056: PUSH
80057: LD_VAR 0 2
80061: PPUSH
80062: LD_VAR 0 2
80066: PUSH
80067: LD_INT 1
80069: PLUS
80070: PPUSH
80071: LD_VAR 0 1
80075: PUSH
80076: LD_VAR 0 4
80080: ARRAY
80081: PPUSH
80082: CALL_OW 2
80086: ST_TO_ADDR
// array := Delete ( array , index ) ;
80087: LD_ADDR_VAR 0 1
80091: PUSH
80092: LD_VAR 0 1
80096: PPUSH
80097: LD_VAR 0 4
80101: PPUSH
80102: CALL_OW 3
80106: ST_TO_ADDR
// end ;
80107: GO 80031
80109: POP
80110: POP
// end ;
80111: LD_VAR 0 2
80115: RET
// export function GetBaseMaterials ( base ) ; begin
80116: LD_INT 0
80118: PPUSH
// result := [ 0 , 0 , 0 ] ;
80119: LD_ADDR_VAR 0 2
80123: PUSH
80124: LD_INT 0
80126: PUSH
80127: LD_INT 0
80129: PUSH
80130: LD_INT 0
80132: PUSH
80133: EMPTY
80134: LIST
80135: LIST
80136: LIST
80137: ST_TO_ADDR
// if not base then
80138: LD_VAR 0 1
80142: NOT
80143: IFFALSE 80147
// exit ;
80145: GO 80196
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
80147: LD_ADDR_VAR 0 2
80151: PUSH
80152: LD_VAR 0 1
80156: PPUSH
80157: LD_INT 1
80159: PPUSH
80160: CALL_OW 275
80164: PUSH
80165: LD_VAR 0 1
80169: PPUSH
80170: LD_INT 2
80172: PPUSH
80173: CALL_OW 275
80177: PUSH
80178: LD_VAR 0 1
80182: PPUSH
80183: LD_INT 3
80185: PPUSH
80186: CALL_OW 275
80190: PUSH
80191: EMPTY
80192: LIST
80193: LIST
80194: LIST
80195: ST_TO_ADDR
// end ;
80196: LD_VAR 0 2
80200: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
80201: LD_INT 0
80203: PPUSH
80204: PPUSH
// result := array ;
80205: LD_ADDR_VAR 0 3
80209: PUSH
80210: LD_VAR 0 1
80214: ST_TO_ADDR
// if size > 0 then
80215: LD_VAR 0 2
80219: PUSH
80220: LD_INT 0
80222: GREATER
80223: IFFALSE 80269
// for i := array downto size do
80225: LD_ADDR_VAR 0 4
80229: PUSH
80230: DOUBLE
80231: LD_VAR 0 1
80235: INC
80236: ST_TO_ADDR
80237: LD_VAR 0 2
80241: PUSH
80242: FOR_DOWNTO
80243: IFFALSE 80267
// result := Delete ( result , result ) ;
80245: LD_ADDR_VAR 0 3
80249: PUSH
80250: LD_VAR 0 3
80254: PPUSH
80255: LD_VAR 0 3
80259: PPUSH
80260: CALL_OW 3
80264: ST_TO_ADDR
80265: GO 80242
80267: POP
80268: POP
// end ;
80269: LD_VAR 0 3
80273: RET
// export function ComExit ( unit ) ; var tmp ; begin
80274: LD_INT 0
80276: PPUSH
80277: PPUSH
// if not IsInUnit ( unit ) then
80278: LD_VAR 0 1
80282: PPUSH
80283: CALL_OW 310
80287: NOT
80288: IFFALSE 80292
// exit ;
80290: GO 80352
// tmp := IsInUnit ( unit ) ;
80292: LD_ADDR_VAR 0 3
80296: PUSH
80297: LD_VAR 0 1
80301: PPUSH
80302: CALL_OW 310
80306: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
80307: LD_VAR 0 3
80311: PPUSH
80312: CALL_OW 247
80316: PUSH
80317: LD_INT 2
80319: EQUAL
80320: IFFALSE 80333
// ComExitVehicle ( unit ) else
80322: LD_VAR 0 1
80326: PPUSH
80327: CALL_OW 121
80331: GO 80342
// ComExitBuilding ( unit ) ;
80333: LD_VAR 0 1
80337: PPUSH
80338: CALL_OW 122
// result := tmp ;
80342: LD_ADDR_VAR 0 2
80346: PUSH
80347: LD_VAR 0 3
80351: ST_TO_ADDR
// end ;
80352: LD_VAR 0 2
80356: RET
// export function ResetHc ; begin
80357: LD_INT 0
80359: PPUSH
// InitHc ;
80360: CALL_OW 19
// hc_importance := 0 ;
80364: LD_ADDR_OWVAR 32
80368: PUSH
80369: LD_INT 0
80371: ST_TO_ADDR
// end ;
80372: LD_VAR 0 1
80376: RET
