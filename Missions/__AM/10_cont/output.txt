// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 115 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// PrepareArabian ;
  33: CALL 3359 0 0
// PrepareAmerican ;
  37: CALL 969 0 0
// PrepareRussian ;
  41: CALL 8619 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  45: LD_INT 4
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 4
  53: PUSH
  54: LD_INT 5
  56: PUSH
  57: LD_INT 5
  59: PUSH
  60: LD_INT 5
  62: PUSH
  63: EMPTY
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: PUSH
  69: LD_OWVAR 67
  73: ARRAY
  74: PPUSH
  75: LD_INT 2
  77: PPUSH
  78: LD_INT 1
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 2
  86: PPUSH
  87: LD_INT 1
  89: PPUSH
  90: LD_INT 2
  92: PPUSH
  93: CALL 88008 0 9
// Action ;
  97: CALL 25442 0 0
// if debug then
 101: LD_EXP 1
 105: IFFALSE 114
// FogOff ( 1 ) ;
 107: LD_INT 1
 109: PPUSH
 110: CALL_OW 344
// end ;
 114: END
// export debug , mission_prefix , arBaseActive , arabianAttack , khatamStatus , seenRussianTeleport , joinedToEpsilon , arabianDefeated , hasBase , epsilon , escapeKhatam , arabianAttackSpawned , gensherEscaped , ruScriptActive , ruScriptActive2 , firstAttack , dialogRussianSpaceAmmo , russianWaveAttack , spawnedRussians , hasSniper , arabianEscapedCounter , ruActiveAttacks ; function Init ; begin
 115: LD_INT 0
 117: PPUSH
// debug := false ;
 118: LD_ADDR_EXP 1
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// mission_prefix := 08c_ ;
 126: LD_ADDR_EXP 2
 130: PUSH
 131: LD_STRING 08c_
 133: ST_TO_ADDR
// arBaseActive := true ;
 134: LD_ADDR_EXP 3
 138: PUSH
 139: LD_INT 1
 141: ST_TO_ADDR
// arabianAttack := false ;
 142: LD_ADDR_EXP 4
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// khatamStatus := false ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// seenRussianTeleport := false ;
 158: LD_ADDR_EXP 6
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// joinedToEpsilon := false ;
 166: LD_ADDR_EXP 7
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// arabianDefeated := false ;
 174: LD_ADDR_EXP 8
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// arabianAttackSpawned := false ;
 182: LD_ADDR_EXP 12
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// gensherEscaped := false ;
 190: LD_ADDR_EXP 13
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// hasBase := false ;
 198: LD_ADDR_EXP 9
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// epsilon := 0 ;
 206: LD_ADDR_EXP 10
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// escapeKhatam := false ;
 214: LD_ADDR_EXP 11
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// ruScriptActive := false ;
 222: LD_ADDR_EXP 14
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// ruScriptActive2 := false ;
 230: LD_ADDR_EXP 15
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// firstAttack := false ;
 238: LD_ADDR_EXP 16
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// dialogRussianSpaceAmmo := false ;
 246: LD_ADDR_EXP 17
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// russianWaveAttack := 0 ;
 254: LD_ADDR_EXP 18
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// spawnedRussians := false ;
 262: LD_ADDR_EXP 19
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// hasSniper := false ;
 270: LD_ADDR_EXP 20
 274: PUSH
 275: LD_INT 0
 277: ST_TO_ADDR
// arabianEscapedCounter := 0 ;
 278: LD_ADDR_EXP 21
 282: PUSH
 283: LD_INT 0
 285: ST_TO_ADDR
// ruActiveAttacks := false ;
 286: LD_ADDR_EXP 22
 290: PUSH
 291: LD_INT 0
 293: ST_TO_ADDR
// ruTransportDestroyed := false ;
 294: LD_ADDR_EXP 78
 298: PUSH
 299: LD_INT 0
 301: ST_TO_ADDR
// end ;
 302: LD_VAR 0 1
 306: RET
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and not arabianAttack and spawnedRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 307: LD_INT 1
 309: PPUSH
 310: LD_INT 2
 312: PPUSH
 313: CALL_OW 81
 317: PUSH
 318: LD_INT 1
 320: EQUAL
 321: PUSH
 322: LD_EXP 4
 326: NOT
 327: AND
 328: PUSH
 329: LD_EXP 19
 333: AND
 334: PUSH
 335: LD_INT 22
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PPUSH
 345: CALL_OW 69
 349: PUSH
 350: LD_INT 0
 352: EQUAL
 353: AND
 354: IFFALSE 366
 356: GO 358
 358: DISABLE
// SetAchievement ( ACH_POWER ) ;
 359: LD_STRING ACH_POWER
 361: PPUSH
 362: CALL_OW 543
 366: END
// every 0 0$1 trigger spawnedRussians and not ruBase and not ruBase2 and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 367: LD_EXP 19
 371: PUSH
 372: LD_EXP 68
 376: NOT
 377: AND
 378: PUSH
 379: LD_EXP 69
 383: NOT
 384: AND
 385: PUSH
 386: LD_INT 22
 388: PUSH
 389: LD_INT 3
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PPUSH
 396: CALL_OW 69
 400: PUSH
 401: LD_INT 0
 403: EQUAL
 404: AND
 405: IFFALSE 417
 407: GO 409
 409: DISABLE
// SetAchievement ( ACH_TACT ) ;
 410: LD_STRING ACH_TACT
 412: PPUSH
 413: CALL_OW 543
 417: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 418: LD_INT 22
 420: PUSH
 421: LD_INT 1
 423: PUSH
 424: EMPTY
 425: LIST
 426: LIST
 427: PUSH
 428: LD_INT 30
 430: PUSH
 431: LD_INT 1
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PPUSH
 442: CALL_OW 69
 446: PUSH
 447: LD_INT 22
 449: PUSH
 450: LD_INT 1
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: PUSH
 457: LD_INT 30
 459: PUSH
 460: LD_INT 32
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PPUSH
 471: CALL_OW 69
 475: AND
 476: PUSH
 477: LD_INT 22
 479: PUSH
 480: LD_INT 1
 482: PUSH
 483: EMPTY
 484: LIST
 485: LIST
 486: PUSH
 487: LD_INT 30
 489: PUSH
 490: LD_INT 33
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: PPUSH
 501: CALL_OW 69
 505: AND
 506: PUSH
 507: LD_INT 22
 509: PUSH
 510: LD_INT 1
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: PUSH
 517: LD_INT 30
 519: PUSH
 520: LD_INT 5
 522: PUSH
 523: EMPTY
 524: LIST
 525: LIST
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PPUSH
 531: CALL_OW 69
 535: AND
 536: PUSH
 537: LD_INT 22
 539: PUSH
 540: LD_INT 1
 542: PUSH
 543: EMPTY
 544: LIST
 545: LIST
 546: PUSH
 547: LD_INT 30
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: PPUSH
 561: CALL_OW 69
 565: AND
 566: PUSH
 567: LD_INT 22
 569: PUSH
 570: LD_INT 1
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: PUSH
 577: LD_INT 30
 579: PUSH
 580: LD_INT 36
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PPUSH
 591: CALL_OW 69
 595: AND
 596: PUSH
 597: LD_INT 22
 599: PUSH
 600: LD_INT 1
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: PUSH
 607: LD_INT 30
 609: PUSH
 610: LD_INT 31
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PPUSH
 621: CALL_OW 69
 625: AND
 626: PUSH
 627: LD_INT 22
 629: PUSH
 630: LD_INT 1
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: PUSH
 637: LD_INT 30
 639: PUSH
 640: LD_INT 22
 642: PUSH
 643: EMPTY
 644: LIST
 645: LIST
 646: PUSH
 647: EMPTY
 648: LIST
 649: LIST
 650: PPUSH
 651: CALL_OW 69
 655: AND
 656: PUSH
 657: LD_INT 22
 659: PUSH
 660: LD_INT 1
 662: PUSH
 663: EMPTY
 664: LIST
 665: LIST
 666: PUSH
 667: LD_INT 30
 669: PUSH
 670: LD_INT 20
 672: PUSH
 673: EMPTY
 674: LIST
 675: LIST
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PPUSH
 681: CALL_OW 69
 685: AND
 686: PUSH
 687: LD_INT 22
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: EMPTY
 694: LIST
 695: LIST
 696: PUSH
 697: LD_INT 30
 699: PUSH
 700: LD_INT 19
 702: PUSH
 703: EMPTY
 704: LIST
 705: LIST
 706: PUSH
 707: EMPTY
 708: LIST
 709: LIST
 710: PPUSH
 711: CALL_OW 69
 715: AND
 716: PUSH
 717: LD_INT 22
 719: PUSH
 720: LD_INT 1
 722: PUSH
 723: EMPTY
 724: LIST
 725: LIST
 726: PUSH
 727: LD_INT 30
 729: PUSH
 730: LD_INT 16
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PPUSH
 741: CALL_OW 69
 745: AND
 746: PUSH
 747: LD_INT 22
 749: PUSH
 750: LD_INT 1
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: PUSH
 757: LD_INT 30
 759: PUSH
 760: LD_INT 17
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: PPUSH
 771: CALL_OW 69
 775: AND
 776: PUSH
 777: LD_INT 22
 779: PUSH
 780: LD_INT 1
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: PUSH
 787: LD_INT 30
 789: PUSH
 790: LD_INT 21
 792: PUSH
 793: EMPTY
 794: LIST
 795: LIST
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: PPUSH
 801: CALL_OW 69
 805: AND
 806: PUSH
 807: LD_INT 22
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 30
 819: PUSH
 820: LD_INT 29
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PPUSH
 831: CALL_OW 69
 835: AND
 836: PUSH
 837: LD_INT 22
 839: PUSH
 840: LD_INT 1
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: PUSH
 847: LD_INT 30
 849: PUSH
 850: LD_INT 30
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PPUSH
 861: CALL_OW 69
 865: AND
 866: PUSH
 867: LD_INT 22
 869: PUSH
 870: LD_INT 1
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PUSH
 877: LD_INT 30
 879: PUSH
 880: LD_INT 27
 882: PUSH
 883: EMPTY
 884: LIST
 885: LIST
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: PPUSH
 891: CALL_OW 69
 895: AND
 896: PUSH
 897: LD_INT 22
 899: PUSH
 900: LD_INT 1
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: PUSH
 907: LD_INT 30
 909: PUSH
 910: LD_INT 26
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PPUSH
 921: CALL_OW 69
 925: AND
 926: PUSH
 927: LD_INT 22
 929: PUSH
 930: LD_INT 1
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: PUSH
 937: LD_INT 30
 939: PUSH
 940: LD_INT 28
 942: PUSH
 943: EMPTY
 944: LIST
 945: LIST
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PPUSH
 951: CALL_OW 69
 955: AND
 956: IFFALSE 968
 958: GO 960
 960: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
 961: LD_STRING ACH_ARCH
 963: PPUSH
 964: CALL_OW 543
 968: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Mike ; export Cornell , Truman , Powell ; export JMMSquad , others , others09 , ape09 ; export function PrepareAmerican ; var i , j , veh , vehs , sibRes , tmp , amount ; begin
 969: LD_INT 0
 971: PPUSH
 972: PPUSH
 973: PPUSH
 974: PPUSH
 975: PPUSH
 976: PPUSH
 977: PPUSH
 978: PPUSH
// uc_nation := nation_american ;
 979: LD_ADDR_OWVAR 21
 983: PUSH
 984: LD_INT 1
 986: ST_TO_ADDR
// uc_side := 4 ;
 987: LD_ADDR_OWVAR 20
 991: PUSH
 992: LD_INT 4
 994: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 995: LD_ADDR_EXP 44
 999: PUSH
1000: LD_STRING Powell
1002: PPUSH
1003: LD_INT 0
1005: PPUSH
1006: LD_STRING 
1008: PPUSH
1009: CALL 53997 0 3
1013: ST_TO_ADDR
// uc_side := 1 ;
1014: LD_ADDR_OWVAR 20
1018: PUSH
1019: LD_INT 1
1021: ST_TO_ADDR
// JMMSquad := [ ] ;
1022: LD_ADDR_EXP 45
1026: PUSH
1027: EMPTY
1028: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 10_ ) ;
1029: LD_ADDR_EXP 23
1033: PUSH
1034: LD_STRING JMM
1036: PPUSH
1037: LD_EXP 1
1041: NOT
1042: PPUSH
1043: LD_STRING 10_
1045: PPUSH
1046: CALL 53997 0 3
1050: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 10_ ) ;
1051: LD_ADDR_EXP 32
1055: PUSH
1056: LD_STRING Gary
1058: PPUSH
1059: LD_EXP 1
1063: NOT
1064: PPUSH
1065: LD_STRING 10_
1067: PPUSH
1068: CALL 53997 0 3
1072: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 10_ ) ;
1073: LD_ADDR_EXP 27
1077: PUSH
1078: LD_STRING Cyrus
1080: PPUSH
1081: LD_EXP 1
1085: NOT
1086: PPUSH
1087: LD_STRING 10_
1089: PPUSH
1090: CALL 53997 0 3
1094: ST_TO_ADDR
// if Cyrus then
1095: LD_EXP 27
1099: IFFALSE 1117
// JMMSquad := JMMSquad ^ Cyrus ;
1101: LD_ADDR_EXP 45
1105: PUSH
1106: LD_EXP 45
1110: PUSH
1111: LD_EXP 27
1115: ADD
1116: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 10_ ) ;
1117: LD_ADDR_EXP 26
1121: PUSH
1122: LD_STRING Bobby
1124: PPUSH
1125: LD_EXP 1
1129: NOT
1130: PPUSH
1131: LD_STRING 10_
1133: PPUSH
1134: CALL 53997 0 3
1138: ST_TO_ADDR
// if Bobby then
1139: LD_EXP 26
1143: IFFALSE 1161
// JMMSquad := JMMSquad ^ Bobby ;
1145: LD_ADDR_EXP 45
1149: PUSH
1150: LD_EXP 45
1154: PUSH
1155: LD_EXP 26
1159: ADD
1160: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 10_ ) ;
1161: LD_ADDR_EXP 28
1165: PUSH
1166: LD_STRING Lisa
1168: PPUSH
1169: LD_EXP 1
1173: NOT
1174: PPUSH
1175: LD_STRING 10_
1177: PPUSH
1178: CALL 53997 0 3
1182: ST_TO_ADDR
// if Lisa then
1183: LD_EXP 28
1187: IFFALSE 1205
// JMMSquad := JMMSquad ^ Lisa ;
1189: LD_ADDR_EXP 45
1193: PUSH
1194: LD_EXP 45
1198: PUSH
1199: LD_EXP 28
1203: ADD
1204: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 10_ ) ;
1205: LD_ADDR_EXP 24
1209: PUSH
1210: LD_STRING Brown
1212: PPUSH
1213: LD_EXP 1
1217: NOT
1218: PPUSH
1219: LD_STRING 10_
1221: PPUSH
1222: CALL 53997 0 3
1226: ST_TO_ADDR
// if Brown then
1227: LD_EXP 24
1231: IFFALSE 1249
// JMMSquad := JMMSquad ^ Brown ;
1233: LD_ADDR_EXP 45
1237: PUSH
1238: LD_EXP 45
1242: PUSH
1243: LD_EXP 24
1247: ADD
1248: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 10_ ) ;
1249: LD_ADDR_EXP 25
1253: PUSH
1254: LD_STRING Donaldson
1256: PPUSH
1257: LD_EXP 1
1261: NOT
1262: PPUSH
1263: LD_STRING 10_
1265: PPUSH
1266: CALL 53997 0 3
1270: ST_TO_ADDR
// if Donaldson then
1271: LD_EXP 25
1275: IFFALSE 1293
// JMMSquad := JMMSquad ^ Donaldson ;
1277: LD_ADDR_EXP 45
1281: PUSH
1282: LD_EXP 45
1286: PUSH
1287: LD_EXP 25
1291: ADD
1292: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 10_ ) ;
1293: LD_ADDR_EXP 29
1297: PUSH
1298: LD_STRING Frank
1300: PPUSH
1301: LD_EXP 1
1305: NOT
1306: PPUSH
1307: LD_STRING 10_
1309: PPUSH
1310: CALL 53997 0 3
1314: ST_TO_ADDR
// if Frank then
1315: LD_EXP 29
1319: IFFALSE 1337
// JMMSquad := JMMSquad ^ Frank ;
1321: LD_ADDR_EXP 45
1325: PUSH
1326: LD_EXP 45
1330: PUSH
1331: LD_EXP 29
1335: ADD
1336: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 10_ ) ;
1337: LD_ADDR_EXP 31
1341: PUSH
1342: LD_STRING Houten
1344: PPUSH
1345: LD_EXP 1
1349: NOT
1350: PPUSH
1351: LD_STRING 10_
1353: PPUSH
1354: CALL 53997 0 3
1358: ST_TO_ADDR
// if Houten then
1359: LD_EXP 31
1363: IFFALSE 1381
// JMMSquad := JMMSquad ^ Houten ;
1365: LD_ADDR_EXP 45
1369: PUSH
1370: LD_EXP 45
1374: PUSH
1375: LD_EXP 31
1379: ADD
1380: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn10 ) ;
1381: LD_ADDR_EXP 46
1385: PUSH
1386: LD_STRING OthersIn10
1388: PPUSH
1389: CALL_OW 31
1393: ST_TO_ADDR
// if Count ( JMMSquad ) + Count ( others ) < 9 then
1394: LD_EXP 45
1398: PPUSH
1399: CALL 56099 0 1
1403: PUSH
1404: LD_EXP 46
1408: PPUSH
1409: CALL 56099 0 1
1413: PLUS
1414: PUSH
1415: LD_INT 9
1417: LESS
1418: IFFALSE 1505
// begin InitHC_All ( ) ;
1420: CALL_OW 584
// for i := 9 downto Count ( JMMSquad ) + Count ( others ) do
1424: LD_ADDR_VAR 0 2
1428: PUSH
1429: DOUBLE
1430: LD_INT 9
1432: INC
1433: ST_TO_ADDR
1434: LD_EXP 45
1438: PPUSH
1439: CALL 56099 0 1
1443: PUSH
1444: LD_EXP 46
1448: PPUSH
1449: CALL 56099 0 1
1453: PLUS
1454: PUSH
1455: FOR_DOWNTO
1456: IFFALSE 1503
// begin PrepareHuman ( false , i mod 4 + 1 , 5 ) ;
1458: LD_INT 0
1460: PPUSH
1461: LD_VAR 0 2
1465: PUSH
1466: LD_INT 4
1468: MOD
1469: PUSH
1470: LD_INT 1
1472: PLUS
1473: PPUSH
1474: LD_INT 5
1476: PPUSH
1477: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1481: LD_ADDR_EXP 46
1485: PUSH
1486: LD_EXP 46
1490: PPUSH
1491: CALL_OW 44
1495: PPUSH
1496: CALL 91318 0 2
1500: ST_TO_ADDR
// end ;
1501: GO 1455
1503: POP
1504: POP
// end ; if debug then
1505: LD_EXP 1
1509: IFFALSE 1550
// result := [ Cyrus , Bobby , Lisa , Donaldson , Brown ] else
1511: LD_ADDR_VAR 0 1
1515: PUSH
1516: LD_EXP 27
1520: PUSH
1521: LD_EXP 26
1525: PUSH
1526: LD_EXP 28
1530: PUSH
1531: LD_EXP 25
1535: PUSH
1536: LD_EXP 24
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: ST_TO_ADDR
1548: GO 1713
// result := CharacterSelection ( 1 , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ sel_not_changeable , sel_hired , sel_change_class ] ^ JMM ^ Gary ^ [ sel_not_hired , sel_changeable , sel_change_class ] ^ JMMSquad ^ others ^ [ sel_not_changeable , sel_not_hired ] ^ Powell , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , class_scientistic ] ) ;
1550: LD_ADDR_VAR 0 1
1554: PUSH
1555: LD_STRING 1
1557: PPUSH
1558: LD_INT 6
1560: PUSH
1561: LD_INT 5
1563: PUSH
1564: LD_INT 4
1566: PUSH
1567: LD_INT 4
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: LD_OWVAR 67
1580: ARRAY
1581: PPUSH
1582: LD_INT 6
1584: PUSH
1585: LD_INT 5
1587: PUSH
1588: LD_INT 4
1590: PUSH
1591: LD_INT 4
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: PUSH
1600: LD_OWVAR 67
1604: ARRAY
1605: PPUSH
1606: LD_INT -4
1608: PUSH
1609: LD_INT -1
1611: PUSH
1612: LD_INT -5
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: LIST
1619: PUSH
1620: LD_EXP 23
1624: ADD
1625: PUSH
1626: LD_EXP 32
1630: ADD
1631: PUSH
1632: LD_INT -2
1634: PUSH
1635: LD_INT -3
1637: PUSH
1638: LD_INT -5
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: LIST
1645: ADD
1646: PUSH
1647: LD_EXP 45
1651: ADD
1652: PUSH
1653: LD_EXP 46
1657: ADD
1658: PUSH
1659: LD_INT -4
1661: PUSH
1662: LD_INT -2
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: ADD
1669: PUSH
1670: LD_EXP 44
1674: ADD
1675: PPUSH
1676: LD_INT 1
1678: PUSH
1679: LD_INT 3
1681: PUSH
1682: LD_INT 1
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PUSH
1689: LD_INT 2
1691: PUSH
1692: LD_INT 1
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: PUSH
1699: LD_INT 4
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: PPUSH
1708: CALL_OW 42
1712: ST_TO_ADDR
// result := JoinUnion ( result , JMM ) ;
1713: LD_ADDR_VAR 0 1
1717: PUSH
1718: LD_VAR 0 1
1722: PPUSH
1723: LD_EXP 23
1727: PPUSH
1728: CALL 91355 0 2
1732: ST_TO_ADDR
// if Gary then
1733: LD_EXP 32
1737: IFFALSE 1759
// result := JoinUnion ( result , Gary ) ;
1739: LD_ADDR_VAR 0 1
1743: PUSH
1744: LD_VAR 0 1
1748: PPUSH
1749: LD_EXP 32
1753: PPUSH
1754: CALL 91355 0 2
1758: ST_TO_ADDR
// if Count ( others ) then
1759: LD_EXP 46
1763: PPUSH
1764: CALL 56099 0 1
1768: IFFALSE 1786
// others := others diff result ;
1770: LD_ADDR_EXP 46
1774: PUSH
1775: LD_EXP 46
1779: PUSH
1780: LD_VAR 0 1
1784: DIFF
1785: ST_TO_ADDR
// vehs := [ ] ;
1786: LD_ADDR_VAR 0 5
1790: PUSH
1791: EMPTY
1792: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1793: LD_INT 2
1795: PPUSH
1796: LD_INT 1
1798: PPUSH
1799: LD_INT 1
1801: PPUSH
1802: LD_INT 12
1804: PPUSH
1805: LD_INT 50
1807: PPUSH
1808: CALL 58837 0 5
// veh := CreateVehicle ;
1812: LD_ADDR_VAR 0 4
1816: PUSH
1817: CALL_OW 45
1821: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1822: LD_ADDR_VAR 0 5
1826: PUSH
1827: LD_VAR 0 5
1831: PPUSH
1832: LD_VAR 0 4
1836: PPUSH
1837: CALL 91318 0 2
1841: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1842: LD_VAR 0 4
1846: PPUSH
1847: LD_INT 1
1849: PPUSH
1850: CALL_OW 233
// sibRes := LoadVariable ( 09_sibRes , 100 ) - 20 ;
1854: LD_ADDR_VAR 0 6
1858: PUSH
1859: LD_STRING 09_sibRes
1861: PPUSH
1862: LD_INT 100
1864: PPUSH
1865: CALL_OW 30
1869: PUSH
1870: LD_INT 20
1872: MINUS
1873: ST_TO_ADDR
// if sibRes >= 100 then
1874: LD_VAR 0 6
1878: PUSH
1879: LD_INT 100
1881: GREATEREQUAL
1882: IFFALSE 1901
// SetCargo ( veh , mat_siberit , 100 ) else
1884: LD_VAR 0 4
1888: PPUSH
1889: LD_INT 3
1891: PPUSH
1892: LD_INT 100
1894: PPUSH
1895: CALL_OW 290
1899: GO 1918
// SetCargo ( veh , mat_siberit , sibRes ) ;
1901: LD_VAR 0 4
1905: PPUSH
1906: LD_INT 3
1908: PPUSH
1909: LD_VAR 0 6
1913: PPUSH
1914: CALL_OW 290
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1918: LD_INT 2
1920: PPUSH
1921: LD_INT 1
1923: PPUSH
1924: LD_INT 1
1926: PPUSH
1927: LD_INT 12
1929: PPUSH
1930: LD_INT 50
1932: PPUSH
1933: CALL 58837 0 5
// veh := CreateVehicle ;
1937: LD_ADDR_VAR 0 4
1941: PUSH
1942: CALL_OW 45
1946: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1947: LD_ADDR_VAR 0 5
1951: PUSH
1952: LD_VAR 0 5
1956: PPUSH
1957: LD_VAR 0 4
1961: PPUSH
1962: CALL 91318 0 2
1966: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1967: LD_VAR 0 4
1971: PPUSH
1972: LD_INT 1
1974: PPUSH
1975: CALL_OW 233
// SetCargo ( veh , mat_cans , 100 ) ;
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 1
1986: PPUSH
1987: LD_INT 100
1989: PPUSH
1990: CALL_OW 290
// for i := 1 to Count ( result ) - 2 do
1994: LD_ADDR_VAR 0 2
1998: PUSH
1999: DOUBLE
2000: LD_INT 1
2002: DEC
2003: ST_TO_ADDR
2004: LD_VAR 0 1
2008: PPUSH
2009: CALL 56099 0 1
2013: PUSH
2014: LD_INT 2
2016: MINUS
2017: PUSH
2018: FOR_TO
2019: IFFALSE 2125
// begin PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , [ us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun ] [ i mod 5 + 1 ] , rand ( 45 , 55 ) ) ;
2021: LD_INT 2
2023: PPUSH
2024: LD_INT 1
2026: PPUSH
2027: LD_INT 1
2029: PPUSH
2030: LD_INT 3
2032: PUSH
2033: LD_INT 4
2035: PUSH
2036: LD_INT 5
2038: PUSH
2039: LD_INT 11
2041: PUSH
2042: LD_INT 3
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: PUSH
2052: LD_VAR 0 2
2056: PUSH
2057: LD_INT 5
2059: MOD
2060: PUSH
2061: LD_INT 1
2063: PLUS
2064: ARRAY
2065: PPUSH
2066: LD_INT 45
2068: PPUSH
2069: LD_INT 55
2071: PPUSH
2072: CALL_OW 12
2076: PPUSH
2077: CALL 58837 0 5
// veh := CreateVehicle ;
2081: LD_ADDR_VAR 0 4
2085: PUSH
2086: CALL_OW 45
2090: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
2091: LD_ADDR_VAR 0 5
2095: PUSH
2096: LD_VAR 0 5
2100: PPUSH
2101: LD_VAR 0 4
2105: PPUSH
2106: CALL 91318 0 2
2110: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2111: LD_VAR 0 4
2115: PPUSH
2116: LD_INT 1
2118: PPUSH
2119: CALL_OW 233
// end ;
2123: GO 2018
2125: POP
2126: POP
// for i in vehs do
2127: LD_ADDR_VAR 0 2
2131: PUSH
2132: LD_VAR 0 5
2136: PUSH
2137: FOR_IN
2138: IFFALSE 2193
// begin PlaceUnitArea ( i , startArea , false ) ;
2140: LD_VAR 0 2
2144: PPUSH
2145: LD_INT 3
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// PlaceHumanInUnit ( result [ 1 ] , i ) ;
2155: LD_VAR 0 1
2159: PUSH
2160: LD_INT 1
2162: ARRAY
2163: PPUSH
2164: LD_VAR 0 2
2168: PPUSH
2169: CALL_OW 52
// result := Delete ( result , 1 ) ;
2173: LD_ADDR_VAR 0 1
2177: PUSH
2178: LD_VAR 0 1
2182: PPUSH
2183: LD_INT 1
2185: PPUSH
2186: CALL_OW 3
2190: ST_TO_ADDR
// end ;
2191: GO 2137
2193: POP
2194: POP
// uc_side := 4 ;
2195: LD_ADDR_OWVAR 20
2199: PUSH
2200: LD_INT 4
2202: ST_TO_ADDR
// if LoadVariable ( 08_SikorskiStatus , debug ) then
2203: LD_STRING 08_SikorskiStatus
2205: PPUSH
2206: LD_EXP 1
2210: PPUSH
2211: CALL_OW 30
2215: IFFALSE 2236
// Truman := PrepareUnit ( Truman , false ,  ) ;
2217: LD_ADDR_EXP 43
2221: PUSH
2222: LD_STRING Truman
2224: PPUSH
2225: LD_INT 0
2227: PPUSH
2228: LD_STRING 
2230: PPUSH
2231: CALL 53997 0 3
2235: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , false ,  ) ;
2236: LD_ADDR_EXP 33
2240: PUSH
2241: LD_STRING Simms
2243: PPUSH
2244: LD_INT 0
2246: PPUSH
2247: LD_STRING 
2249: PPUSH
2250: CALL 53997 0 3
2254: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 08_ ) ;
2255: LD_ADDR_EXP 34
2259: PUSH
2260: LD_STRING Denis
2262: PPUSH
2263: LD_EXP 1
2267: NOT
2268: PPUSH
2269: LD_STRING 08_
2271: PPUSH
2272: CALL 53997 0 3
2276: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 08_ ) ;
2277: LD_ADDR_EXP 35
2281: PUSH
2282: LD_STRING Joan
2284: PPUSH
2285: LD_EXP 1
2289: NOT
2290: PPUSH
2291: LD_STRING 08_
2293: PPUSH
2294: CALL 53997 0 3
2298: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 08_ ) ;
2299: LD_ADDR_EXP 41
2303: PUSH
2304: LD_STRING Mike
2306: PPUSH
2307: LD_EXP 1
2311: NOT
2312: PPUSH
2313: LD_STRING 08_
2315: PPUSH
2316: CALL 53997 0 3
2320: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2321: LD_STRING 08_Khatam
2323: PPUSH
2324: CALL_OW 28
2328: IFFALSE 2351
// Khatam := PrepareUnit ( Khatam , true , 08_ ) else
2330: LD_ADDR_EXP 36
2334: PUSH
2335: LD_STRING Khatam
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: LD_STRING 08_
2343: PPUSH
2344: CALL 53997 0 3
2348: ST_TO_ADDR
2349: GO 2379
// if TestCharacters ( 03_Khatam ) then
2351: LD_STRING 03_Khatam
2353: PPUSH
2354: CALL_OW 28
2358: IFFALSE 2379
// Khatam := PrepareUnit ( Khatam , true , 03_ ) ;
2360: LD_ADDR_EXP 36
2364: PUSH
2365: LD_STRING Khatam
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: LD_STRING 03_
2373: PPUSH
2374: CALL 53997 0 3
2378: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 08_ ) ;
2379: LD_ADDR_EXP 37
2383: PUSH
2384: LD_STRING Gladstone
2386: PPUSH
2387: LD_EXP 1
2391: NOT
2392: PPUSH
2393: LD_STRING 08_
2395: PPUSH
2396: CALL 53997 0 3
2400: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) ,  ) ;
2401: LD_ADDR_EXP 39
2405: PUSH
2406: LD_STRING DeltaDoctor
2408: PPUSH
2409: LD_EXP 1
2413: NOT
2414: PPUSH
2415: LD_STRING 
2417: PPUSH
2418: CALL 53997 0 3
2422: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 08_ ) ;
2423: LD_ADDR_EXP 29
2427: PUSH
2428: LD_STRING Frank
2430: PPUSH
2431: LD_EXP 1
2435: NOT
2436: PPUSH
2437: LD_STRING 08_
2439: PPUSH
2440: CALL 53997 0 3
2444: ST_TO_ADDR
// if Frank then
2445: LD_EXP 29
2449: IFFALSE 2472
// Kikuchi := PrepareUnit ( Yamoko , false ,  ) else
2451: LD_ADDR_EXP 30
2455: PUSH
2456: LD_STRING Yamoko
2458: PPUSH
2459: LD_INT 0
2461: PPUSH
2462: LD_STRING 
2464: PPUSH
2465: CALL 53997 0 3
2469: ST_TO_ADDR
2470: GO 2494
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 08_ ) ;
2472: LD_ADDR_EXP 30
2476: PUSH
2477: LD_STRING Kikuchi
2479: PPUSH
2480: LD_EXP 1
2484: NOT
2485: PPUSH
2486: LD_STRING 08_
2488: PPUSH
2489: CALL 53997 0 3
2493: ST_TO_ADDR
// others09 := CreateCharacterSet ( 09_others ) ;
2494: LD_ADDR_EXP 47
2498: PUSH
2499: LD_STRING 09_others
2501: PPUSH
2502: CALL_OW 31
2506: ST_TO_ADDR
// ape09 := CreateCharacterSet ( 09_apes ) ;
2507: LD_ADDR_EXP 48
2511: PUSH
2512: LD_STRING 09_apes
2514: PPUSH
2515: CALL_OW 31
2519: ST_TO_ADDR
// if Truman then
2520: LD_EXP 43
2524: IFFALSE 2541
// PlaceUnitArea ( Truman , epsilonSpawnArea , false ) ;
2526: LD_EXP 43
2530: PPUSH
2531: LD_INT 4
2533: PPUSH
2534: LD_INT 0
2536: PPUSH
2537: CALL_OW 49
// if Mike then
2541: LD_EXP 41
2545: IFFALSE 2562
// PlaceUnitArea ( Mike , epsilonSpawnArea , false ) ;
2547: LD_EXP 41
2551: PPUSH
2552: LD_INT 4
2554: PPUSH
2555: LD_INT 0
2557: PPUSH
2558: CALL_OW 49
// if Simms then
2562: LD_EXP 33
2566: IFFALSE 2583
// PlaceUnitArea ( Simms , epsilonSpawnArea , false ) ;
2568: LD_EXP 33
2572: PPUSH
2573: LD_INT 4
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 49
// if Denis then
2583: LD_EXP 34
2587: IFFALSE 2604
// PlaceUnitArea ( Denis , epsilonSpawnArea , false ) ;
2589: LD_EXP 34
2593: PPUSH
2594: LD_INT 4
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 49
// if Joan then
2604: LD_EXP 35
2608: IFFALSE 2625
// PlaceUnitArea ( Joan , epsilonSpawnArea , false ) ;
2610: LD_EXP 35
2614: PPUSH
2615: LD_INT 4
2617: PPUSH
2618: LD_INT 0
2620: PPUSH
2621: CALL_OW 49
// if Khatam then
2625: LD_EXP 36
2629: IFFALSE 2646
// PlaceUnitArea ( Khatam , epsilonSpawnArea , false ) ;
2631: LD_EXP 36
2635: PPUSH
2636: LD_INT 4
2638: PPUSH
2639: LD_INT 0
2641: PPUSH
2642: CALL_OW 49
// if Gladstone then
2646: LD_EXP 37
2650: IFFALSE 2667
// PlaceUnitArea ( Gladstone , epsilonSpawnArea , false ) ;
2652: LD_EXP 37
2656: PPUSH
2657: LD_INT 4
2659: PPUSH
2660: LD_INT 0
2662: PPUSH
2663: CALL_OW 49
// if DeltaDoctor then
2667: LD_EXP 39
2671: IFFALSE 2688
// PlaceUnitArea ( DeltaDoctor , epsilonSpawnArea , false ) ;
2673: LD_EXP 39
2677: PPUSH
2678: LD_INT 4
2680: PPUSH
2681: LD_INT 0
2683: PPUSH
2684: CALL_OW 49
// if Kikuchi then
2688: LD_EXP 30
2692: IFFALSE 2709
// PlaceUnitArea ( Kikuchi , epsilonSpawnArea , false ) ;
2694: LD_EXP 30
2698: PPUSH
2699: LD_INT 4
2701: PPUSH
2702: LD_INT 0
2704: PPUSH
2705: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , class_scientistic ) ;
2709: LD_EXP 33
2713: PUSH
2714: LD_EXP 36
2718: PUSH
2719: LD_EXP 34
2723: PUSH
2724: LD_EXP 37
2728: PUSH
2729: LD_EXP 39
2733: PUSH
2734: LD_EXP 35
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: LIST
2743: LIST
2744: LIST
2745: LIST
2746: PPUSH
2747: LD_INT 4
2749: PPUSH
2750: CALL_OW 336
// amount := Count ( others09 ) ;
2754: LD_ADDR_VAR 0 8
2758: PUSH
2759: LD_EXP 47
2763: PPUSH
2764: CALL 56099 0 1
2768: ST_TO_ADDR
// if amount then
2769: LD_VAR 0 8
2773: IFFALSE 2921
// begin if amount > [ 6 , 5 , 4 , 4 ] [ Difficulty ] then
2775: LD_VAR 0 8
2779: PUSH
2780: LD_INT 6
2782: PUSH
2783: LD_INT 5
2785: PUSH
2786: LD_INT 4
2788: PUSH
2789: LD_INT 4
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: LIST
2796: LIST
2797: PUSH
2798: LD_OWVAR 67
2802: ARRAY
2803: GREATER
2804: IFFALSE 2835
// amount := [ 6 , 5 , 4 , 4 ] [ Difficulty ] ;
2806: LD_ADDR_VAR 0 8
2810: PUSH
2811: LD_INT 6
2813: PUSH
2814: LD_INT 5
2816: PUSH
2817: LD_INT 4
2819: PUSH
2820: LD_INT 4
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: LIST
2827: LIST
2828: PUSH
2829: LD_OWVAR 67
2833: ARRAY
2834: ST_TO_ADDR
// for i := 1 to amount do
2835: LD_ADDR_VAR 0 2
2839: PUSH
2840: DOUBLE
2841: LD_INT 1
2843: DEC
2844: ST_TO_ADDR
2845: LD_VAR 0 8
2849: PUSH
2850: FOR_TO
2851: IFFALSE 2892
// begin PlaceUnitArea ( others09 [ 1 ] , epsilonSpawnArea , false ) ;
2853: LD_EXP 47
2857: PUSH
2858: LD_INT 1
2860: ARRAY
2861: PPUSH
2862: LD_INT 4
2864: PPUSH
2865: LD_INT 0
2867: PPUSH
2868: CALL_OW 49
// others09 := Delete ( others09 , 1 ) ;
2872: LD_ADDR_EXP 47
2876: PUSH
2877: LD_EXP 47
2881: PPUSH
2882: LD_INT 1
2884: PPUSH
2885: CALL_OW 3
2889: ST_TO_ADDR
// end ;
2890: GO 2850
2892: POP
2893: POP
// if Count ( others09 ) then
2894: LD_EXP 47
2898: PPUSH
2899: CALL 56099 0 1
2903: IFFALSE 2921
// others := others union others09 ;
2905: LD_ADDR_EXP 46
2909: PUSH
2910: LD_EXP 46
2914: PUSH
2915: LD_EXP 47
2919: UNION
2920: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) = 0 then
2921: LD_INT 22
2923: PUSH
2924: LD_INT 4
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PUSH
2931: LD_INT 50
2933: PUSH
2934: EMPTY
2935: LIST
2936: PUSH
2937: LD_INT 25
2939: PUSH
2940: LD_INT 2
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: LIST
2951: PPUSH
2952: CALL_OW 69
2956: PUSH
2957: LD_INT 0
2959: EQUAL
2960: IFFALSE 3099
// begin tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2962: LD_ADDR_VAR 0 7
2966: PUSH
2967: LD_INT 22
2969: PUSH
2970: LD_INT 4
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: PUSH
2977: LD_INT 50
2979: PUSH
2980: EMPTY
2981: LIST
2982: PUSH
2983: LD_INT 25
2985: PUSH
2986: LD_INT 2
2988: PUSH
2989: EMPTY
2990: LIST
2991: LIST
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: LIST
2997: PPUSH
2998: CALL_OW 69
3002: PUSH
3003: LD_EXP 33
3007: PUSH
3008: LD_EXP 36
3012: PUSH
3013: LD_EXP 34
3017: PUSH
3018: LD_EXP 37
3022: PUSH
3023: LD_EXP 39
3027: PUSH
3028: LD_EXP 35
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: LIST
3037: LIST
3038: LIST
3039: LIST
3040: DIFF
3041: ST_TO_ADDR
// if not tmp then
3042: LD_VAR 0 7
3046: NOT
3047: IFFALSE 3083
// begin if Denis then
3049: LD_EXP 34
3053: IFFALSE 3069
// SetClass ( Denis , class_engineer ) else
3055: LD_EXP 34
3059: PPUSH
3060: LD_INT 2
3062: PPUSH
3063: CALL_OW 336
3067: GO 3081
// SetClass ( DeltaDoctor , class_engineer ) ;
3069: LD_EXP 39
3073: PPUSH
3074: LD_INT 2
3076: PPUSH
3077: CALL_OW 336
// end else
3081: GO 3099
// SetClass ( tmp [ 1 ] , class_engineer ) ;
3083: LD_VAR 0 7
3087: PUSH
3088: LD_INT 1
3090: ARRAY
3091: PPUSH
3092: LD_INT 2
3094: PPUSH
3095: CALL_OW 336
// end ; for i in ape09 do
3099: LD_ADDR_VAR 0 2
3103: PUSH
3104: LD_EXP 48
3108: PUSH
3109: FOR_IN
3110: IFFALSE 3129
// PlaceUnitArea ( i , epsilonSpawnArea , false ) ;
3112: LD_VAR 0 2
3116: PPUSH
3117: LD_INT 4
3119: PPUSH
3120: LD_INT 0
3122: PPUSH
3123: CALL_OW 49
3127: GO 3109
3129: POP
3130: POP
// PrepareSoldier ( sex_female , 6 ) ;
3131: LD_INT 2
3133: PPUSH
3134: LD_INT 6
3136: PPUSH
3137: CALL_OW 381
// AmScout := CreateHuman ;
3141: LD_ADDR_EXP 40
3145: PUSH
3146: CALL_OW 44
3150: ST_TO_ADDR
// end ;
3151: LD_VAR 0 1
3155: RET
// export function PrepareCornell ; begin
3156: LD_INT 0
3158: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3159: LD_INT 4
3161: PPUSH
3162: LD_INT 4
3164: PPUSH
3165: CALL_OW 343
// uc_side := 4 ;
3169: LD_ADDR_OWVAR 20
3173: PUSH
3174: LD_INT 4
3176: ST_TO_ADDR
// uc_nation := nation_american ;
3177: LD_ADDR_OWVAR 21
3181: PUSH
3182: LD_INT 1
3184: ST_TO_ADDR
// Cornell := PrepareUnit ( Cornel , ( not debug ) , 03_ ) ;
3185: LD_ADDR_EXP 42
3189: PUSH
3190: LD_STRING Cornel
3192: PPUSH
3193: LD_EXP 1
3197: NOT
3198: PPUSH
3199: LD_STRING 03_
3201: PPUSH
3202: CALL 53997 0 3
3206: ST_TO_ADDR
// if not Cornell then
3207: LD_EXP 42
3211: NOT
3212: IFFALSE 3216
// exit ;
3214: GO 3354
// PlaceUnitArea ( Cornell , cornelSpawnArea , false ) ;
3216: LD_EXP 42
3220: PPUSH
3221: LD_INT 12
3223: PPUSH
3224: LD_INT 0
3226: PPUSH
3227: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3231: LD_EXP 42
3235: PPUSH
3236: LD_INT 350
3238: PPUSH
3239: CALL_OW 234
// ComMoveXY ( Cornell , 125 , 17 ) ;
3243: LD_EXP 42
3247: PPUSH
3248: LD_INT 125
3250: PPUSH
3251: LD_INT 17
3253: PPUSH
3254: CALL_OW 111
// AddComMoveXY ( Cornell , 112 , 19 ) ;
3258: LD_EXP 42
3262: PPUSH
3263: LD_INT 112
3265: PPUSH
3266: LD_INT 19
3268: PPUSH
3269: CALL_OW 171
// if IsInUnit ( JMM ) then
3273: LD_EXP 23
3277: PPUSH
3278: CALL_OW 310
3282: IFFALSE 3325
// AddComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3284: LD_EXP 42
3288: PPUSH
3289: LD_EXP 23
3293: PPUSH
3294: CALL_OW 310
3298: PPUSH
3299: CALL_OW 250
3303: PPUSH
3304: LD_EXP 23
3308: PPUSH
3309: CALL_OW 310
3313: PPUSH
3314: CALL_OW 251
3318: PPUSH
3319: CALL_OW 171
3323: GO 3354
// AddComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3325: LD_EXP 42
3329: PPUSH
3330: LD_EXP 23
3334: PPUSH
3335: CALL_OW 250
3339: PPUSH
3340: LD_EXP 23
3344: PPUSH
3345: CALL_OW 251
3349: PPUSH
3350: CALL_OW 171
// end ; end_of_file
3354: LD_VAR 0 1
3358: RET
// export arForces , Dietrich , Ahmed ; export arTech , arBuildings , arMines , arCameras , arEscapist ; export function PrepareArabian ; var i , j , un , tmp , skill ; begin
3359: LD_INT 0
3361: PPUSH
3362: PPUSH
3363: PPUSH
3364: PPUSH
3365: PPUSH
3366: PPUSH
// uc_side := 2 ;
3367: LD_ADDR_OWVAR 20
3371: PUSH
3372: LD_INT 2
3374: ST_TO_ADDR
// uc_nation := nation_arabian ;
3375: LD_ADDR_OWVAR 21
3379: PUSH
3380: LD_INT 2
3382: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
3383: LD_ADDR_VAR 0 6
3387: PUSH
3388: LD_INT 4
3390: PUSH
3391: LD_INT 5
3393: PUSH
3394: LD_INT 6
3396: PUSH
3397: LD_INT 7
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: PUSH
3406: LD_OWVAR 67
3410: ARRAY
3411: ST_TO_ADDR
// arForces := [ ] ;
3412: LD_ADDR_EXP 49
3416: PUSH
3417: EMPTY
3418: ST_TO_ADDR
// arTech := [ ] ;
3419: LD_ADDR_EXP 52
3423: PUSH
3424: EMPTY
3425: ST_TO_ADDR
// arBuildings := [ ] ;
3426: LD_ADDR_EXP 53
3430: PUSH
3431: EMPTY
3432: ST_TO_ADDR
// arCameras := [ [ 94 , 19 ] , [ 92 , 34 ] , [ 109 , 67 ] , [ 120 , 38 ] , [ 116 , 30 ] , [ 102 , 20 ] ] ;
3433: LD_ADDR_EXP 55
3437: PUSH
3438: LD_INT 94
3440: PUSH
3441: LD_INT 19
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: LD_INT 92
3450: PUSH
3451: LD_INT 34
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: PUSH
3458: LD_INT 109
3460: PUSH
3461: LD_INT 67
3463: PUSH
3464: EMPTY
3465: LIST
3466: LIST
3467: PUSH
3468: LD_INT 120
3470: PUSH
3471: LD_INT 38
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: PUSH
3478: LD_INT 116
3480: PUSH
3481: LD_INT 30
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: PUSH
3488: LD_INT 102
3490: PUSH
3491: LD_INT 20
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: ST_TO_ADDR
// arMines := [ [ 73 , 36 ] , [ 76 , 38 ] , [ 79 , 39 ] ] ;
3506: LD_ADDR_EXP 54
3510: PUSH
3511: LD_INT 73
3513: PUSH
3514: LD_INT 36
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PUSH
3521: LD_INT 76
3523: PUSH
3524: LD_INT 38
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: PUSH
3531: LD_INT 79
3533: PUSH
3534: LD_INT 39
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: LIST
3545: ST_TO_ADDR
// arEscapist := [ ] ;
3546: LD_ADDR_EXP 56
3550: PUSH
3551: EMPTY
3552: ST_TO_ADDR
// SetResourceType ( GetBase ( arDep ) , mat_cans , 150 ) ;
3553: LD_INT 35
3555: PPUSH
3556: CALL_OW 274
3560: PPUSH
3561: LD_INT 1
3563: PPUSH
3564: LD_INT 150
3566: PPUSH
3567: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_oil , 60 ) ;
3571: LD_INT 35
3573: PPUSH
3574: CALL_OW 274
3578: PPUSH
3579: LD_INT 2
3581: PPUSH
3582: LD_INT 60
3584: PPUSH
3585: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_siberit , 10 ) ;
3589: LD_INT 35
3591: PPUSH
3592: CALL_OW 274
3596: PPUSH
3597: LD_INT 3
3599: PPUSH
3600: LD_INT 10
3602: PPUSH
3603: CALL_OW 277
// HiddenCamera ( 36 , 22 , 2 ) ;
3607: LD_INT 36
3609: PPUSH
3610: LD_INT 22
3612: PPUSH
3613: LD_INT 2
3615: PPUSH
3616: CALL_OW 244
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
3620: LD_ADDR_VAR 0 2
3624: PUSH
3625: LD_INT 22
3627: PUSH
3628: LD_INT 2
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: PUSH
3635: LD_INT 21
3637: PUSH
3638: LD_INT 3
3640: PUSH
3641: EMPTY
3642: LIST
3643: LIST
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PPUSH
3649: CALL_OW 69
3653: PUSH
3654: FOR_IN
3655: IFFALSE 3671
// SetBLevel ( i , 6 ) ;
3657: LD_VAR 0 2
3661: PPUSH
3662: LD_INT 6
3664: PPUSH
3665: CALL_OW 241
3669: GO 3654
3671: POP
3672: POP
// Dietrich := NewCharacter ( Dietrich ) ;
3673: LD_ADDR_EXP 50
3677: PUSH
3678: LD_STRING Dietrich
3680: PPUSH
3681: CALL_OW 25
3685: ST_TO_ADDR
// PlaceHumanInUnit ( Dietrich , arDep ) ;
3686: LD_EXP 50
3690: PPUSH
3691: LD_INT 35
3693: PPUSH
3694: CALL_OW 52
// InitHC_All ( ) ;
3698: CALL_OW 584
// for i := 1 to 3 do
3702: LD_ADDR_VAR 0 2
3706: PUSH
3707: DOUBLE
3708: LD_INT 1
3710: DEC
3711: ST_TO_ADDR
3712: LD_INT 3
3714: PUSH
3715: FOR_TO
3716: IFFALSE 3822
// begin PrepareEngineer ( sex_male , skill ) ;
3718: LD_INT 1
3720: PPUSH
3721: LD_VAR 0 6
3725: PPUSH
3726: CALL_OW 382
// if i = 1 then
3730: LD_VAR 0 2
3734: PUSH
3735: LD_INT 1
3737: EQUAL
3738: IFFALSE 3750
// hc_name := Ahmed Abbasid else
3740: LD_ADDR_OWVAR 26
3744: PUSH
3745: LD_STRING Ahmed Abbasid
3747: ST_TO_ADDR
3748: GO 3758
// hc_name :=  ;
3750: LD_ADDR_OWVAR 26
3754: PUSH
3755: LD_STRING 
3757: ST_TO_ADDR
// un := CreateHuman ;
3758: LD_ADDR_VAR 0 4
3762: PUSH
3763: CALL_OW 44
3767: ST_TO_ADDR
// if i = 1 then
3768: LD_VAR 0 2
3772: PUSH
3773: LD_INT 1
3775: EQUAL
3776: IFFALSE 3788
// Ahmed := un ;
3778: LD_ADDR_EXP 51
3782: PUSH
3783: LD_VAR 0 4
3787: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
3788: LD_ADDR_EXP 49
3792: PUSH
3793: LD_EXP 49
3797: PPUSH
3798: LD_VAR 0 4
3802: PPUSH
3803: CALL 91318 0 2
3807: ST_TO_ADDR
// PlaceHumanInUnit ( un , arDep ) ;
3808: LD_VAR 0 4
3812: PPUSH
3813: LD_INT 35
3815: PPUSH
3816: CALL_OW 52
// end ;
3820: GO 3715
3822: POP
3823: POP
// for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
3824: LD_ADDR_VAR 0 2
3828: PUSH
3829: DOUBLE
3830: LD_INT 1
3832: DEC
3833: ST_TO_ADDR
3834: LD_INT 2
3836: PUSH
3837: LD_INT 3
3839: PUSH
3840: LD_INT 4
3842: PUSH
3843: LD_INT 5
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: PUSH
3852: LD_OWVAR 67
3856: ARRAY
3857: PUSH
3858: FOR_TO
3859: IFFALSE 3934
// begin PrepareScientist ( false , skill ) ;
3861: LD_INT 0
3863: PPUSH
3864: LD_VAR 0 6
3868: PPUSH
3869: CALL_OW 384
// un := CreateHuman ;
3873: LD_ADDR_VAR 0 4
3877: PUSH
3878: CALL_OW 44
3882: ST_TO_ADDR
// SetSkill ( un , skill_combat , skill ) ;
3883: LD_VAR 0 4
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_VAR 0 6
3895: PPUSH
3896: CALL_OW 237
// arForces := Join ( arForces , un ) ;
3900: LD_ADDR_EXP 49
3904: PUSH
3905: LD_EXP 49
3909: PPUSH
3910: LD_VAR 0 4
3914: PPUSH
3915: CALL 91318 0 2
3919: ST_TO_ADDR
// PlaceHumanInUnit ( un , arLab ) ;
3920: LD_VAR 0 4
3924: PPUSH
3925: LD_INT 36
3927: PPUSH
3928: CALL_OW 52
// end ;
3932: GO 3858
3934: POP
3935: POP
// for j in [ arBar1 , arBar2 ] do
3936: LD_ADDR_VAR 0 3
3940: PUSH
3941: LD_INT 37
3943: PUSH
3944: LD_INT 38
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: FOR_IN
3952: IFFALSE 4032
// for i := 1 to 4 do
3954: LD_ADDR_VAR 0 2
3958: PUSH
3959: DOUBLE
3960: LD_INT 1
3962: DEC
3963: ST_TO_ADDR
3964: LD_INT 4
3966: PUSH
3967: FOR_TO
3968: IFFALSE 4028
// begin PrepareSoldier ( false , skill ) ;
3970: LD_INT 0
3972: PPUSH
3973: LD_VAR 0 6
3977: PPUSH
3978: CALL_OW 381
// un := CreateHuman ;
3982: LD_ADDR_VAR 0 4
3986: PUSH
3987: CALL_OW 44
3991: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
3992: LD_ADDR_EXP 49
3996: PUSH
3997: LD_EXP 49
4001: PPUSH
4002: LD_VAR 0 4
4006: PPUSH
4007: CALL 91318 0 2
4011: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
4012: LD_VAR 0 4
4016: PPUSH
4017: LD_VAR 0 3
4021: PPUSH
4022: CALL_OW 52
// end ;
4026: GO 3967
4028: POP
4029: POP
4030: GO 3951
4032: POP
4033: POP
// for i := 1 to 3 do
4034: LD_ADDR_VAR 0 2
4038: PUSH
4039: DOUBLE
4040: LD_INT 1
4042: DEC
4043: ST_TO_ADDR
4044: LD_INT 3
4046: PUSH
4047: FOR_TO
4048: IFFALSE 4127
// begin un := arForces [ arForces - i ] ;
4050: LD_ADDR_VAR 0 4
4054: PUSH
4055: LD_EXP 49
4059: PUSH
4060: LD_EXP 49
4064: PUSH
4065: LD_VAR 0 2
4069: MINUS
4070: ARRAY
4071: ST_TO_ADDR
// ComExitBuilding ( un ) ;
4072: LD_VAR 0 4
4076: PPUSH
4077: CALL_OW 122
// AddComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4081: LD_VAR 0 4
4085: PPUSH
4086: LD_INT 22
4088: PUSH
4089: LD_INT 2
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PUSH
4096: LD_INT 30
4098: PUSH
4099: LD_INT 31
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: PPUSH
4110: CALL_OW 69
4114: PUSH
4115: LD_VAR 0 2
4119: ARRAY
4120: PPUSH
4121: CALL_OW 180
// end ;
4125: GO 4047
4127: POP
4128: POP
// for i := 1 to 3 do
4129: LD_ADDR_VAR 0 2
4133: PUSH
4134: DOUBLE
4135: LD_INT 1
4137: DEC
4138: ST_TO_ADDR
4139: LD_INT 3
4141: PUSH
4142: FOR_TO
4143: IFFALSE 4228
// begin tmp := UnitFilter ( arForces , [ [ f_class , class_soldier ] , [ f_not , [ f_tag , tMine ] ] ] ) ;
4145: LD_ADDR_VAR 0 5
4149: PUSH
4150: LD_EXP 49
4154: PPUSH
4155: LD_INT 25
4157: PUSH
4158: LD_INT 1
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PUSH
4165: LD_INT 3
4167: PUSH
4168: LD_INT 120
4170: PUSH
4171: LD_INT 6
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: PPUSH
4186: CALL_OW 72
4190: ST_TO_ADDR
// if not tmp then
4191: LD_VAR 0 5
4195: NOT
4196: IFFALSE 4200
// continue ;
4198: GO 4142
// un := tmp [ 1 ] ;
4200: LD_ADDR_VAR 0 4
4204: PUSH
4205: LD_VAR 0 5
4209: PUSH
4210: LD_INT 1
4212: ARRAY
4213: ST_TO_ADDR
// SetTag ( un , tMine ) ;
4214: LD_VAR 0 4
4218: PPUSH
4219: LD_INT 6
4221: PPUSH
4222: CALL_OW 109
// end ;
4226: GO 4142
4228: POP
4229: POP
// for i in UnitsInside ( arBar2 ) do
4230: LD_ADDR_VAR 0 2
4234: PUSH
4235: LD_INT 38
4237: PPUSH
4238: CALL_OW 313
4242: PUSH
4243: FOR_IN
4244: IFFALSE 4260
// SetClass ( i , class_mortar ) ;
4246: LD_VAR 0 2
4250: PPUSH
4251: LD_INT 8
4253: PPUSH
4254: CALL_OW 336
4258: GO 4243
4260: POP
4261: POP
// end ;
4262: LD_VAR 0 1
4266: RET
// every 0 0$2 trigger joinedToEpsilon do var i , eng ;
4267: LD_EXP 7
4271: IFFALSE 4684
4273: GO 4275
4275: DISABLE
4276: LD_INT 0
4278: PPUSH
4279: PPUSH
// begin ComUpgradeLab ( arLab , b_lab_siberium ) ;
4280: LD_INT 36
4282: PPUSH
4283: LD_INT 11
4285: PPUSH
4286: CALL_OW 147
// wait ( 0 0$10 ) ;
4290: LD_INT 350
4292: PPUSH
4293: CALL_OW 67
// arBuildings := [ [ b_solar_power , 69 , 4 , 2 ] , [ b_solar_power , 67 , 6 , 3 ] ] ;
4297: LD_ADDR_EXP 53
4301: PUSH
4302: LD_INT 27
4304: PUSH
4305: LD_INT 69
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: LD_INT 2
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: PUSH
4320: LD_INT 27
4322: PUSH
4323: LD_INT 67
4325: PUSH
4326: LD_INT 6
4328: PUSH
4329: LD_INT 3
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4342: LD_INT 35
4344: PPUSH
4345: CALL_OW 67
// until not arBuildings ;
4349: LD_EXP 53
4353: NOT
4354: IFFALSE 4342
// eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
4356: LD_ADDR_VAR 0 2
4360: PUSH
4361: LD_EXP 49
4365: PPUSH
4366: LD_INT 25
4368: PUSH
4369: LD_INT 2
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: PPUSH
4376: CALL_OW 72
4380: ST_TO_ADDR
// if eng then
4381: LD_VAR 0 2
4385: IFFALSE 4522
// begin eng := eng [ 1 ] ;
4387: LD_ADDR_VAR 0 2
4391: PUSH
4392: LD_VAR 0 2
4396: PUSH
4397: LD_INT 1
4399: ARRAY
4400: ST_TO_ADDR
// SetTag ( eng , tCamera ) ;
4401: LD_VAR 0 2
4405: PPUSH
4406: LD_INT 4
4408: PPUSH
4409: CALL_OW 109
// for i in arCameras do
4413: LD_ADDR_VAR 0 1
4417: PUSH
4418: LD_EXP 55
4422: PUSH
4423: FOR_IN
4424: IFFALSE 4455
// AddComHiddenCamera ( eng , i [ 1 ] , i [ 2 ] ) ;
4426: LD_VAR 0 2
4430: PPUSH
4431: LD_VAR 0 1
4435: PUSH
4436: LD_INT 1
4438: ARRAY
4439: PPUSH
4440: LD_VAR 0 1
4444: PUSH
4445: LD_INT 2
4447: ARRAY
4448: PPUSH
4449: CALL_OW 217
4453: GO 4423
4455: POP
4456: POP
// repeat wait ( 0 0$1 ) ;
4457: LD_INT 35
4459: PPUSH
4460: CALL_OW 67
// until not HasTask ( eng ) or IsDead ( eng ) ;
4464: LD_VAR 0 2
4468: PPUSH
4469: CALL_OW 314
4473: NOT
4474: PUSH
4475: LD_VAR 0 2
4479: PPUSH
4480: CALL_OW 301
4484: OR
4485: IFFALSE 4457
// if IsOk ( eng ) then
4487: LD_VAR 0 2
4491: PPUSH
4492: CALL_OW 302
4496: IFFALSE 4522
// begin SetTag ( eng , 0 ) ;
4498: LD_VAR 0 2
4502: PPUSH
4503: LD_INT 0
4505: PPUSH
4506: CALL_OW 109
// ComEnterUnit ( eng , arDep ) ;
4510: LD_VAR 0 2
4514: PPUSH
4515: LD_INT 35
4517: PPUSH
4518: CALL_OW 120
// end ; end ; repeat wait ( 0 0$1 ) ;
4522: LD_INT 35
4524: PPUSH
4525: CALL_OW 67
// if tick mod 4200 = 0 and GetListOfCratesInArea ( arCratesArea ) < 3 then
4529: LD_OWVAR 1
4533: PUSH
4534: LD_INT 4200
4536: MOD
4537: PUSH
4538: LD_INT 0
4540: EQUAL
4541: PUSH
4542: LD_INT 9
4544: PPUSH
4545: CALL_OW 435
4549: PUSH
4550: LD_INT 3
4552: LESS
4553: AND
4554: IFFALSE 4577
// CreateCratesArea ( rand ( 1 , 5 ) , arCratesArea , true ) ;
4556: LD_INT 1
4558: PPUSH
4559: LD_INT 5
4561: PPUSH
4562: CALL_OW 12
4566: PPUSH
4567: LD_INT 9
4569: PPUSH
4570: LD_INT 1
4572: PPUSH
4573: CALL_OW 55
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) ;
4577: LD_INT 22
4579: PUSH
4580: LD_INT 1
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: PUSH
4587: LD_INT 3
4589: PUSH
4590: LD_INT 57
4592: PUSH
4593: EMPTY
4594: LIST
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: PUSH
4600: LD_INT 63
4602: PUSH
4603: LD_INT 11
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: LIST
4614: PPUSH
4615: CALL_OW 69
4619: IFFALSE 4522
// wait ( 0 0$10 ) ;
4621: LD_INT 350
4623: PPUSH
4624: CALL_OW 67
// arTech := [ tech_sibPow , tech_sibEng , tech_sib1 ] ;
4628: LD_ADDR_EXP 52
4632: PUSH
4633: LD_INT 21
4635: PUSH
4636: LD_INT 22
4638: PUSH
4639: LD_INT 54
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: LIST
4646: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4647: LD_INT 35
4649: PPUSH
4650: CALL_OW 67
// until not arTech ;
4654: LD_EXP 52
4658: NOT
4659: IFFALSE 4647
// wait ( 0 0$30 ) ;
4661: LD_INT 1050
4663: PPUSH
4664: CALL_OW 67
// arabianAttack := true ;
4668: LD_ADDR_EXP 4
4672: PUSH
4673: LD_INT 1
4675: ST_TO_ADDR
// arBaseActive := false ;
4676: LD_ADDR_EXP 3
4680: PUSH
4681: LD_INT 0
4683: ST_TO_ADDR
// end ;
4684: PPOPN 2
4686: END
// every 3 trigger arBaseActive and arMines and FilterUnitsInArea ( arMinesArea , [ f_enemy , 2 ] ) do var i , e ;
4687: LD_EXP 3
4691: PUSH
4692: LD_EXP 54
4696: AND
4697: PUSH
4698: LD_INT 8
4700: PPUSH
4701: LD_INT 81
4703: PUSH
4704: LD_INT 2
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: PPUSH
4711: CALL_OW 70
4715: AND
4716: IFFALSE 4827
4718: GO 4720
4720: DISABLE
4721: LD_INT 0
4723: PPUSH
4724: PPUSH
// begin enable ;
4725: ENABLE
// for i in arMines do
4726: LD_ADDR_VAR 0 1
4730: PUSH
4731: LD_EXP 54
4735: PUSH
4736: FOR_IN
4737: IFFALSE 4825
// begin e := HexInfo ( i [ 1 ] , i [ 2 ] ) ;
4739: LD_ADDR_VAR 0 2
4743: PUSH
4744: LD_VAR 0 1
4748: PUSH
4749: LD_INT 1
4751: ARRAY
4752: PPUSH
4753: LD_VAR 0 1
4757: PUSH
4758: LD_INT 2
4760: ARRAY
4761: PPUSH
4762: CALL_OW 428
4766: ST_TO_ADDR
// if not e then
4767: LD_VAR 0 2
4771: NOT
4772: IFFALSE 4776
// continue ;
4774: GO 4736
// if GetSide ( e ) in [ 3 , 6 ] then
4776: LD_VAR 0 2
4780: PPUSH
4781: CALL_OW 255
4785: PUSH
4786: LD_INT 3
4788: PUSH
4789: LD_INT 6
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: IN
4796: IFFALSE 4823
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 2 ) ;
4798: LD_VAR 0 1
4802: PUSH
4803: LD_INT 1
4805: ARRAY
4806: PPUSH
4807: LD_VAR 0 1
4811: PUSH
4812: LD_INT 2
4814: ARRAY
4815: PPUSH
4816: LD_INT 2
4818: PPUSH
4819: CALL_OW 456
// end ;
4823: GO 4736
4825: POP
4826: POP
// end ;
4827: PPOPN 2
4829: END
// every 0 0$2 trigger arBaseActive do var i , un , b , side , tmp , lab , eng , tag , cr , tw , sci , sol , hurtUnits , enemyInBase , empty , fac ;
4830: LD_EXP 3
4834: IFFALSE 7022
4836: GO 4838
4838: DISABLE
4839: LD_INT 0
4841: PPUSH
4842: PPUSH
4843: PPUSH
4844: PPUSH
4845: PPUSH
4846: PPUSH
4847: PPUSH
4848: PPUSH
4849: PPUSH
4850: PPUSH
4851: PPUSH
4852: PPUSH
4853: PPUSH
4854: PPUSH
4855: PPUSH
4856: PPUSH
// begin enable ;
4857: ENABLE
// side := 2 ;
4858: LD_ADDR_VAR 0 4
4862: PUSH
4863: LD_INT 2
4865: ST_TO_ADDR
// if arTech then
4866: LD_EXP 52
4870: IFFALSE 5026
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4872: LD_ADDR_VAR 0 6
4876: PUSH
4877: LD_INT 22
4879: PUSH
4880: LD_VAR 0 4
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: LD_INT 50
4891: PUSH
4892: EMPTY
4893: LIST
4894: PUSH
4895: LD_INT 2
4897: PUSH
4898: LD_INT 30
4900: PUSH
4901: LD_INT 6
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 30
4910: PUSH
4911: LD_INT 7
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 30
4920: PUSH
4921: LD_INT 8
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: LIST
4938: PPUSH
4939: CALL_OW 69
4943: ST_TO_ADDR
// if lab then
4944: LD_VAR 0 6
4948: IFFALSE 5026
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
4950: LD_VAR 0 6
4954: PUSH
4955: LD_INT 1
4957: ARRAY
4958: PPUSH
4959: CALL_OW 461
4963: PUSH
4964: LD_INT 2
4966: EQUAL
4967: IFFALSE 5026
// begin for i in arTech do
4969: LD_ADDR_VAR 0 1
4973: PUSH
4974: LD_EXP 52
4978: PUSH
4979: FOR_IN
4980: IFFALSE 5024
// if CanBeResearched ( lab [ 1 ] , i ) then
4982: LD_VAR 0 6
4986: PUSH
4987: LD_INT 1
4989: ARRAY
4990: PPUSH
4991: LD_VAR 0 1
4995: PPUSH
4996: CALL_OW 430
5000: IFFALSE 5022
// begin ComResearch ( lab [ 1 ] , i ) ;
5002: LD_VAR 0 6
5006: PUSH
5007: LD_INT 1
5009: ARRAY
5010: PPUSH
5011: LD_VAR 0 1
5015: PPUSH
5016: CALL_OW 124
// break ;
5020: GO 5024
// end ;
5022: GO 4979
5024: POP
5025: POP
// end ; end ; end ; tmp := FilterUnitsInArea ( arBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5026: LD_ADDR_VAR 0 5
5030: PUSH
5031: LD_INT 5
5033: PPUSH
5034: LD_INT 21
5036: PUSH
5037: LD_INT 3
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PUSH
5044: LD_INT 3
5046: PUSH
5047: LD_INT 24
5049: PUSH
5050: LD_INT 1000
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: PPUSH
5065: CALL_OW 70
5069: ST_TO_ADDR
// cr := GetListOfCratesInArea ( arCratesArea ) ;
5070: LD_ADDR_VAR 0 9
5074: PUSH
5075: LD_INT 9
5077: PPUSH
5078: CALL_OW 435
5082: ST_TO_ADDR
// sci := UnitFilter ( arForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
5083: LD_ADDR_VAR 0 11
5087: PUSH
5088: LD_EXP 49
5092: PPUSH
5093: LD_INT 25
5095: PUSH
5096: LD_INT 4
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: LD_INT 50
5105: PUSH
5106: EMPTY
5107: LIST
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PPUSH
5113: CALL_OW 72
5117: ST_TO_ADDR
// if sci then
5118: LD_VAR 0 11
5122: IFFALSE 5486
// begin hurtUnits := UnitFilter ( arForces , [ [ f_inarea , arBaseArea ] , [ f_not , [ f_inside ] ] , [ f_tag , tHeal ] ] ) ;
5124: LD_ADDR_VAR 0 13
5128: PUSH
5129: LD_EXP 49
5133: PPUSH
5134: LD_INT 95
5136: PUSH
5137: LD_INT 5
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PUSH
5144: LD_INT 3
5146: PUSH
5147: LD_INT 54
5149: PUSH
5150: EMPTY
5151: LIST
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: PUSH
5157: LD_INT 120
5159: PUSH
5160: LD_INT 1
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: LIST
5171: PPUSH
5172: CALL_OW 72
5176: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5177: LD_ADDR_VAR 0 6
5181: PUSH
5182: LD_INT 22
5184: PUSH
5185: LD_VAR 0 4
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: PUSH
5194: LD_INT 50
5196: PUSH
5197: EMPTY
5198: LIST
5199: PUSH
5200: LD_INT 2
5202: PUSH
5203: LD_INT 30
5205: PUSH
5206: LD_INT 6
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: PUSH
5213: LD_INT 30
5215: PUSH
5216: LD_INT 7
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: PUSH
5223: LD_INT 30
5225: PUSH
5226: LD_INT 8
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: PUSH
5233: EMPTY
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: LIST
5243: PPUSH
5244: CALL_OW 69
5248: ST_TO_ADDR
// tag := GetTag ( i ) ;
5249: LD_ADDR_VAR 0 8
5253: PUSH
5254: LD_VAR 0 1
5258: PPUSH
5259: CALL_OW 110
5263: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
5264: LD_VAR 0 1
5268: PPUSH
5269: CALL_OW 256
5273: PUSH
5274: LD_INT 800
5276: LESS
5277: PUSH
5278: LD_VAR 0 8
5282: PUSH
5283: LD_INT 1
5285: NONEQUAL
5286: AND
5287: IFFALSE 5316
// begin ComMoveXY ( i , 72 , 15 ) ;
5289: LD_VAR 0 1
5293: PPUSH
5294: LD_INT 72
5296: PPUSH
5297: LD_INT 15
5299: PPUSH
5300: CALL_OW 111
// SetTag ( i , tHeal ) ;
5304: LD_VAR 0 1
5308: PPUSH
5309: LD_INT 1
5311: PPUSH
5312: CALL_OW 109
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
5316: LD_VAR 0 1
5320: PPUSH
5321: CALL_OW 256
5325: PUSH
5326: LD_INT 1000
5328: EQUAL
5329: PUSH
5330: LD_VAR 0 8
5334: PUSH
5335: LD_INT 1
5337: EQUAL
5338: AND
5339: IFFALSE 5353
// begin SetTag ( i , 0 ) ;
5341: LD_VAR 0 1
5345: PPUSH
5346: LD_INT 0
5348: PPUSH
5349: CALL_OW 109
// end ; if hurtUnits then
5353: LD_VAR 0 13
5357: IFFALSE 5418
// begin for i in sci do
5359: LD_ADDR_VAR 0 1
5363: PUSH
5364: LD_VAR 0 11
5368: PUSH
5369: FOR_IN
5370: IFFALSE 5414
// if IsInUnit ( i ) then
5372: LD_VAR 0 1
5376: PPUSH
5377: CALL_OW 310
5381: IFFALSE 5394
// ComExitBuilding ( i ) else
5383: LD_VAR 0 1
5387: PPUSH
5388: CALL_OW 122
5392: GO 5412
// ComHeal ( i , hurtUnits [ 1 ] ) ;
5394: LD_VAR 0 1
5398: PPUSH
5399: LD_VAR 0 13
5403: PUSH
5404: LD_INT 1
5406: ARRAY
5407: PPUSH
5408: CALL_OW 128
5412: GO 5369
5414: POP
5415: POP
// end else
5416: GO 5486
// if lab then
5418: LD_VAR 0 6
5422: IFFALSE 5486
// begin for i in sci do
5424: LD_ADDR_VAR 0 1
5428: PUSH
5429: LD_VAR 0 11
5433: PUSH
5434: FOR_IN
5435: IFFALSE 5484
// if not IsInUnit ( i ) and GetTag ( i ) <> tHeal then
5437: LD_VAR 0 1
5441: PPUSH
5442: CALL_OW 310
5446: NOT
5447: PUSH
5448: LD_VAR 0 1
5452: PPUSH
5453: CALL_OW 110
5457: PUSH
5458: LD_INT 1
5460: NONEQUAL
5461: AND
5462: IFFALSE 5482
// ComEnterUnit ( i , lab [ 1 ] ) ;
5464: LD_VAR 0 1
5468: PPUSH
5469: LD_VAR 0 6
5473: PUSH
5474: LD_INT 1
5476: ARRAY
5477: PPUSH
5478: CALL_OW 120
5482: GO 5434
5484: POP
5485: POP
// end ; end ; eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
5486: LD_ADDR_VAR 0 7
5490: PUSH
5491: LD_EXP 49
5495: PPUSH
5496: LD_INT 25
5498: PUSH
5499: LD_INT 2
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PPUSH
5506: CALL_OW 72
5510: ST_TO_ADDR
// if eng then
5511: LD_VAR 0 7
5515: IFFALSE 6184
// begin for i in eng do
5517: LD_ADDR_VAR 0 1
5521: PUSH
5522: LD_VAR 0 7
5526: PUSH
5527: FOR_IN
5528: IFFALSE 6182
// begin tag := GetTag ( i ) ;
5530: LD_ADDR_VAR 0 8
5534: PUSH
5535: LD_VAR 0 1
5539: PPUSH
5540: CALL_OW 110
5544: ST_TO_ADDR
// if tag = tCamera then
5545: LD_VAR 0 8
5549: PUSH
5550: LD_INT 4
5552: EQUAL
5553: IFFALSE 5557
// continue ;
5555: GO 5527
// if GetLives ( i ) < 600 and tag <> tHeal then
5557: LD_VAR 0 1
5561: PPUSH
5562: CALL_OW 256
5566: PUSH
5567: LD_INT 600
5569: LESS
5570: PUSH
5571: LD_VAR 0 8
5575: PUSH
5576: LD_INT 1
5578: NONEQUAL
5579: AND
5580: IFFALSE 5618
// begin SetTag ( i , tHeal ) ;
5582: LD_VAR 0 1
5586: PPUSH
5587: LD_INT 1
5589: PPUSH
5590: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
5594: LD_VAR 0 1
5598: PPUSH
5599: LD_INT 72
5601: PPUSH
5602: LD_INT 15
5604: PPUSH
5605: CALL_OW 111
// AddComHold ( i ) ;
5609: LD_VAR 0 1
5613: PPUSH
5614: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
5618: LD_VAR 0 8
5622: PUSH
5623: LD_INT 1
5625: EQUAL
5626: PUSH
5627: LD_VAR 0 1
5631: PPUSH
5632: CALL_OW 256
5636: PUSH
5637: LD_INT 1000
5639: EQUAL
5640: AND
5641: IFFALSE 5655
// SetTag ( i , 0 ) ;
5643: LD_VAR 0 1
5647: PPUSH
5648: LD_INT 0
5650: PPUSH
5651: CALL_OW 109
// if not tag then
5655: LD_VAR 0 8
5659: NOT
5660: IFFALSE 5806
// begin if cr or tmp or Count ( arBuildings ) then
5662: LD_VAR 0 9
5666: PUSH
5667: LD_VAR 0 5
5671: OR
5672: PUSH
5673: LD_EXP 53
5677: PPUSH
5678: CALL 56099 0 1
5682: OR
5683: IFFALSE 5770
// begin if IsInUnit ( i ) then
5685: LD_VAR 0 1
5689: PPUSH
5690: CALL_OW 310
5694: IFFALSE 5705
// ComExitBuilding ( i ) ;
5696: LD_VAR 0 1
5700: PPUSH
5701: CALL_OW 122
// if tmp then
5705: LD_VAR 0 5
5709: IFFALSE 5725
// SetTag ( i , tRepair ) else
5711: LD_VAR 0 1
5715: PPUSH
5716: LD_INT 3
5718: PPUSH
5719: CALL_OW 109
5723: GO 5768
// if cr then
5725: LD_VAR 0 9
5729: IFFALSE 5745
// SetTag ( i , tCrates ) else
5731: LD_VAR 0 1
5735: PPUSH
5736: LD_INT 2
5738: PPUSH
5739: CALL_OW 109
5743: GO 5768
// if Count ( arBuildings ) then
5745: LD_EXP 53
5749: PPUSH
5750: CALL 56099 0 1
5754: IFFALSE 5768
// SetTag ( i , tBuild ) ;
5756: LD_VAR 0 1
5760: PPUSH
5761: LD_INT 5
5763: PPUSH
5764: CALL_OW 109
// end else
5768: GO 5806
// if not IsInUnit ( i ) then
5770: LD_VAR 0 1
5774: PPUSH
5775: CALL_OW 310
5779: NOT
5780: IFFALSE 5806
// begin SetTag ( i , 0 ) ;
5782: LD_VAR 0 1
5786: PPUSH
5787: LD_INT 0
5789: PPUSH
5790: CALL_OW 109
// ComEnterUnit ( i , arDep ) ;
5794: LD_VAR 0 1
5798: PPUSH
5799: LD_INT 35
5801: PPUSH
5802: CALL_OW 120
// end ; end ; if tag = tRepair then
5806: LD_VAR 0 8
5810: PUSH
5811: LD_INT 3
5813: EQUAL
5814: IFFALSE 5916
// begin if IsInUnit ( i ) then
5816: LD_VAR 0 1
5820: PPUSH
5821: CALL_OW 310
5825: IFFALSE 5838
// begin ComExitBuilding ( i ) ;
5827: LD_VAR 0 1
5831: PPUSH
5832: CALL_OW 122
// continue ;
5836: GO 5527
// end ; if not tmp then
5838: LD_VAR 0 5
5842: NOT
5843: IFFALSE 5859
// begin SetTag ( i , 0 ) ;
5845: LD_VAR 0 1
5849: PPUSH
5850: LD_INT 0
5852: PPUSH
5853: CALL_OW 109
// continue ;
5857: GO 5527
// end ; if not HasTask ( i ) then
5859: LD_VAR 0 1
5863: PPUSH
5864: CALL_OW 314
5868: NOT
5869: IFFALSE 5889
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
5871: LD_VAR 0 1
5875: PPUSH
5876: LD_VAR 0 5
5880: PUSH
5881: LD_INT 1
5883: ARRAY
5884: PPUSH
5885: CALL_OW 130
// if not IsInArea ( i , arBaseArea ) then
5889: LD_VAR 0 1
5893: PPUSH
5894: LD_INT 5
5896: PPUSH
5897: CALL_OW 308
5901: NOT
5902: IFFALSE 5916
// ComMoveToArea ( i , arBaseArea ) ;
5904: LD_VAR 0 1
5908: PPUSH
5909: LD_INT 5
5911: PPUSH
5912: CALL_OW 113
// end ; if tag = tBuild then
5916: LD_VAR 0 8
5920: PUSH
5921: LD_INT 5
5923: EQUAL
5924: IFFALSE 6035
// begin if IsInUnit ( i ) then
5926: LD_VAR 0 1
5930: PPUSH
5931: CALL_OW 310
5935: IFFALSE 5948
// begin ComExitBuilding ( i ) ;
5937: LD_VAR 0 1
5941: PPUSH
5942: CALL_OW 122
// continue ;
5946: GO 5527
// end ; if not Count ( arBuildings ) then
5948: LD_EXP 53
5952: PPUSH
5953: CALL 56099 0 1
5957: NOT
5958: IFFALSE 5974
// begin SetTag ( i , 0 ) ;
5960: LD_VAR 0 1
5964: PPUSH
5965: LD_INT 0
5967: PPUSH
5968: CALL_OW 109
// continue ;
5972: GO 5527
// end ; ComBuild ( i , arBuildings [ 1 ] [ 1 ] , arBuildings [ 1 ] [ 2 ] , arBuildings [ 1 ] [ 3 ] , arBuildings [ 1 ] [ 4 ] ) ;
5974: LD_VAR 0 1
5978: PPUSH
5979: LD_EXP 53
5983: PUSH
5984: LD_INT 1
5986: ARRAY
5987: PUSH
5988: LD_INT 1
5990: ARRAY
5991: PPUSH
5992: LD_EXP 53
5996: PUSH
5997: LD_INT 1
5999: ARRAY
6000: PUSH
6001: LD_INT 2
6003: ARRAY
6004: PPUSH
6005: LD_EXP 53
6009: PUSH
6010: LD_INT 1
6012: ARRAY
6013: PUSH
6014: LD_INT 3
6016: ARRAY
6017: PPUSH
6018: LD_EXP 53
6022: PUSH
6023: LD_INT 1
6025: ARRAY
6026: PUSH
6027: LD_INT 4
6029: ARRAY
6030: PPUSH
6031: CALL_OW 145
// end ; if tag = tCrates then
6035: LD_VAR 0 8
6039: PUSH
6040: LD_INT 2
6042: EQUAL
6043: IFFALSE 6180
// begin if IsInUnit ( i ) then
6045: LD_VAR 0 1
6049: PPUSH
6050: CALL_OW 310
6054: IFFALSE 6067
// begin ComExitBuilding ( i ) ;
6056: LD_VAR 0 1
6060: PPUSH
6061: CALL_OW 122
// continue ;
6065: GO 5527
// end ; if not cr then
6067: LD_VAR 0 9
6071: NOT
6072: IFFALSE 6088
// begin SetTag ( i , 0 ) ;
6074: LD_VAR 0 1
6078: PPUSH
6079: LD_INT 0
6081: PPUSH
6082: CALL_OW 109
// continue ;
6086: GO 5527
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
6088: LD_VAR 0 1
6092: PPUSH
6093: CALL_OW 314
6097: NOT
6098: PUSH
6099: LD_INT 81
6101: PUSH
6102: LD_VAR 0 4
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 92
6113: PUSH
6114: LD_VAR 0 9
6118: PUSH
6119: LD_INT 1
6121: ARRAY
6122: PUSH
6123: LD_VAR 0 9
6127: PUSH
6128: LD_INT 2
6130: ARRAY
6131: PUSH
6132: LD_INT 12
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PPUSH
6145: CALL_OW 69
6149: NOT
6150: AND
6151: IFFALSE 6180
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
6153: LD_VAR 0 1
6157: PPUSH
6158: LD_VAR 0 9
6162: PUSH
6163: LD_INT 1
6165: ARRAY
6166: PPUSH
6167: LD_VAR 0 9
6171: PUSH
6172: LD_INT 2
6174: ARRAY
6175: PPUSH
6176: CALL_OW 117
// end ; end ;
6180: GO 5527
6182: POP
6183: POP
// end ; sol := UnitFilter ( arForces , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6184: LD_ADDR_VAR 0 12
6188: PUSH
6189: LD_EXP 49
6193: PPUSH
6194: LD_INT 25
6196: PUSH
6197: LD_INT 1
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PUSH
6204: LD_INT 50
6206: PUSH
6207: EMPTY
6208: LIST
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 72
6218: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( arBaseArea , [ f_enemy , side ] ) ;
6219: LD_ADDR_VAR 0 14
6223: PUSH
6224: LD_INT 5
6226: PPUSH
6227: LD_INT 81
6229: PUSH
6230: LD_VAR 0 4
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PPUSH
6239: CALL_OW 70
6243: ST_TO_ADDR
// if sol then
6244: LD_VAR 0 12
6248: IFFALSE 7022
// begin tmp := UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ;
6250: LD_ADDR_VAR 0 5
6254: PUSH
6255: LD_VAR 0 12
6259: PPUSH
6260: LD_INT 50
6262: PUSH
6263: EMPTY
6264: LIST
6265: PUSH
6266: LD_INT 120
6268: PUSH
6269: LD_INT 6
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: PUSH
6276: EMPTY
6277: LIST
6278: LIST
6279: PPUSH
6280: CALL_OW 72
6284: ST_TO_ADDR
// if tmp and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , 76 , 38 , 12 ] ] ) then
6285: LD_VAR 0 5
6289: PUSH
6290: LD_INT 81
6292: PUSH
6293: LD_VAR 0 4
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: PUSH
6302: LD_INT 92
6304: PUSH
6305: LD_INT 76
6307: PUSH
6308: LD_INT 38
6310: PUSH
6311: LD_INT 12
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: PUSH
6320: EMPTY
6321: LIST
6322: LIST
6323: PPUSH
6324: CALL_OW 69
6328: NOT
6329: AND
6330: IFFALSE 6500
// for i := 1 to Count ( tmp ) do
6332: LD_ADDR_VAR 0 1
6336: PUSH
6337: DOUBLE
6338: LD_INT 1
6340: DEC
6341: ST_TO_ADDR
6342: LD_VAR 0 5
6346: PPUSH
6347: CALL 56099 0 1
6351: PUSH
6352: FOR_TO
6353: IFFALSE 6498
// begin un := tmp [ i ] ;
6355: LD_ADDR_VAR 0 2
6359: PUSH
6360: LD_VAR 0 5
6364: PUSH
6365: LD_VAR 0 1
6369: ARRAY
6370: ST_TO_ADDR
// b := IsInUnit ( un ) ;
6371: LD_ADDR_VAR 0 3
6375: PUSH
6376: LD_VAR 0 2
6380: PPUSH
6381: CALL_OW 310
6385: ST_TO_ADDR
// if not MineOfUnit ( un ) then
6386: LD_VAR 0 2
6390: PPUSH
6391: CALL_OW 459
6395: NOT
6396: IFFALSE 6465
// begin ComExitBuilding ( un ) ;
6398: LD_VAR 0 2
6402: PPUSH
6403: CALL_OW 122
// AddComPlaceRemoteCharge ( un , arMines [ i ] [ 1 ] , arMines [ i ] [ 2 ] , 0 ) ;
6407: LD_VAR 0 2
6411: PPUSH
6412: LD_EXP 54
6416: PUSH
6417: LD_VAR 0 1
6421: ARRAY
6422: PUSH
6423: LD_INT 1
6425: ARRAY
6426: PPUSH
6427: LD_EXP 54
6431: PUSH
6432: LD_VAR 0 1
6436: ARRAY
6437: PUSH
6438: LD_INT 2
6440: ARRAY
6441: PPUSH
6442: LD_INT 0
6444: PPUSH
6445: CALL_OW 193
// AddComEnterUnit ( un , b ) ;
6449: LD_VAR 0 2
6453: PPUSH
6454: LD_VAR 0 3
6458: PPUSH
6459: CALL_OW 180
// end else
6463: GO 6496
// if not b and not HasTask ( un ) then
6465: LD_VAR 0 3
6469: NOT
6470: PUSH
6471: LD_VAR 0 2
6475: PPUSH
6476: CALL_OW 314
6480: NOT
6481: AND
6482: IFFALSE 6496
// ComEnterUnit ( un , arBar1 ) ;
6484: LD_VAR 0 2
6488: PPUSH
6489: LD_INT 37
6491: PPUSH
6492: CALL_OW 120
// end ;
6496: GO 6352
6498: POP
6499: POP
// if enemyInBase then
6500: LD_VAR 0 14
6504: IFFALSE 6649
// begin for i in sol do
6506: LD_ADDR_VAR 0 1
6510: PUSH
6511: LD_VAR 0 12
6515: PUSH
6516: FOR_IN
6517: IFFALSE 6645
// begin tw := IsInUnit ( i ) ;
6519: LD_ADDR_VAR 0 10
6523: PUSH
6524: LD_VAR 0 1
6528: PPUSH
6529: CALL_OW 310
6533: ST_TO_ADDR
// if tw then
6534: LD_VAR 0 10
6538: IFFALSE 6619
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
6540: LD_VAR 0 10
6544: PUSH
6545: LD_INT 22
6547: PUSH
6548: LD_VAR 0 4
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: LD_INT 101
6559: PUSH
6560: LD_INT 2
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: PUSH
6567: LD_INT 2
6569: PUSH
6570: LD_INT 30
6572: PUSH
6573: LD_INT 32
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: PUSH
6580: LD_INT 30
6582: PUSH
6583: LD_INT 31
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: LIST
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: LIST
6599: PPUSH
6600: CALL_OW 69
6604: IN
6605: NOT
6606: IFFALSE 6617
// ComExitBuilding ( i ) ;
6608: LD_VAR 0 1
6612: PPUSH
6613: CALL_OW 122
// end else
6617: GO 6643
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
6619: LD_VAR 0 1
6623: PPUSH
6624: LD_VAR 0 14
6628: PPUSH
6629: LD_VAR 0 1
6633: PPUSH
6634: CALL_OW 74
6638: PPUSH
6639: CALL_OW 115
// end ;
6643: GO 6516
6645: POP
6646: POP
// end else
6647: GO 7022
// begin empty := FilterUnitsInArea ( arBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
6649: LD_ADDR_VAR 0 15
6653: PUSH
6654: LD_INT 5
6656: PPUSH
6657: LD_INT 3
6659: PUSH
6660: LD_INT 62
6662: PUSH
6663: EMPTY
6664: LIST
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: PUSH
6670: LD_INT 2
6672: PUSH
6673: LD_INT 30
6675: PUSH
6676: LD_INT 32
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 30
6685: PUSH
6686: LD_INT 4
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PUSH
6693: LD_INT 30
6695: PUSH
6696: LD_INT 5
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 30
6705: PUSH
6706: LD_INT 31
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: PPUSH
6724: CALL_OW 70
6728: ST_TO_ADDR
// if empty then
6729: LD_VAR 0 15
6733: IFFALSE 6750
// empty := ReverseArray ( empty ) ;
6735: LD_ADDR_VAR 0 15
6739: PUSH
6740: LD_VAR 0 15
6744: PPUSH
6745: CALL 86607 0 1
6749: ST_TO_ADDR
// for i in sol do
6750: LD_ADDR_VAR 0 1
6754: PUSH
6755: LD_VAR 0 12
6759: PUSH
6760: FOR_IN
6761: IFFALSE 7020
// begin tag := GetTag ( i ) ;
6763: LD_ADDR_VAR 0 8
6767: PUSH
6768: LD_VAR 0 1
6772: PPUSH
6773: CALL_OW 110
6777: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
6778: LD_VAR 0 1
6782: PPUSH
6783: CALL_OW 256
6787: PUSH
6788: LD_INT 1000
6790: LESS
6791: PUSH
6792: LD_VAR 0 8
6796: PUSH
6797: LD_INT 1
6799: NONEQUAL
6800: AND
6801: IFFALSE 6841
// begin SetTag ( i , tHeal ) ;
6803: LD_VAR 0 1
6807: PPUSH
6808: LD_INT 1
6810: PPUSH
6811: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
6815: LD_VAR 0 1
6819: PPUSH
6820: LD_INT 72
6822: PPUSH
6823: LD_INT 15
6825: PPUSH
6826: CALL_OW 111
// AddComHold ( i ) ;
6830: LD_VAR 0 1
6834: PPUSH
6835: CALL_OW 200
// continue ;
6839: GO 6760
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
6841: LD_VAR 0 1
6845: PPUSH
6846: CALL_OW 256
6850: PUSH
6851: LD_INT 1000
6853: EQUAL
6854: PUSH
6855: LD_VAR 0 8
6859: PUSH
6860: LD_INT 1
6862: EQUAL
6863: AND
6864: IFFALSE 6945
// begin if MineOfUnit ( i ) or Count ( UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ) < 3 then
6866: LD_VAR 0 1
6870: PPUSH
6871: CALL_OW 459
6875: PUSH
6876: LD_VAR 0 12
6880: PPUSH
6881: LD_INT 50
6883: PUSH
6884: EMPTY
6885: LIST
6886: PUSH
6887: LD_INT 120
6889: PUSH
6890: LD_INT 6
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: PPUSH
6901: CALL_OW 72
6905: PPUSH
6906: CALL 56099 0 1
6910: PUSH
6911: LD_INT 3
6913: LESS
6914: OR
6915: IFFALSE 6931
// SetTag ( i , tMine ) else
6917: LD_VAR 0 1
6921: PPUSH
6922: LD_INT 6
6924: PPUSH
6925: CALL_OW 109
6929: GO 6943
// SetTag ( i , 0 ) ;
6931: LD_VAR 0 1
6935: PPUSH
6936: LD_INT 0
6938: PPUSH
6939: CALL_OW 109
// continue ;
6943: GO 6760
// end ; if tag = tMine then
6945: LD_VAR 0 8
6949: PUSH
6950: LD_INT 6
6952: EQUAL
6953: IFFALSE 6957
// continue ;
6955: GO 6760
// if not IsInUnit ( i ) and not tag and empty then
6957: LD_VAR 0 1
6961: PPUSH
6962: CALL_OW 310
6966: NOT
6967: PUSH
6968: LD_VAR 0 8
6972: NOT
6973: AND
6974: PUSH
6975: LD_VAR 0 15
6979: AND
6980: IFFALSE 7018
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
6982: LD_VAR 0 1
6986: PPUSH
6987: LD_VAR 0 15
6991: PUSH
6992: LD_INT 1
6994: ARRAY
6995: PPUSH
6996: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
7000: LD_ADDR_VAR 0 15
7004: PUSH
7005: LD_VAR 0 15
7009: PPUSH
7010: LD_INT 1
7012: PPUSH
7013: CALL_OW 3
7017: ST_TO_ADDR
// end ; end ;
7018: GO 6760
7020: POP
7021: POP
// end ; end ; end ;
7022: PPOPN 16
7024: END
// every 0 0$1 trigger Count ( arEscapist ) do var i ;
7025: LD_EXP 56
7029: PPUSH
7030: CALL 56099 0 1
7034: IFFALSE 7179
7036: GO 7038
7038: DISABLE
7039: LD_INT 0
7041: PPUSH
// begin enable ;
7042: ENABLE
// for i in UnitFilter ( arEscapist , [ f_ok ] ) do
7043: LD_ADDR_VAR 0 1
7047: PUSH
7048: LD_EXP 56
7052: PPUSH
7053: LD_INT 50
7055: PUSH
7056: EMPTY
7057: LIST
7058: PPUSH
7059: CALL_OW 72
7063: PUSH
7064: FOR_IN
7065: IFFALSE 7177
// begin if not HasTask ( i ) then
7067: LD_VAR 0 1
7071: PPUSH
7072: CALL_OW 314
7076: NOT
7077: IFFALSE 7091
// ComMoveToArea ( i , khatamArea ) ;
7079: LD_VAR 0 1
7083: PPUSH
7084: LD_INT 11
7086: PPUSH
7087: CALL_OW 113
// if IsInArea ( i , khatamArea ) then
7091: LD_VAR 0 1
7095: PPUSH
7096: LD_INT 11
7098: PPUSH
7099: CALL_OW 308
7103: IFFALSE 7175
// begin RemoveUnit ( i ) ;
7105: LD_VAR 0 1
7109: PPUSH
7110: CALL_OW 64
// arEscapist := arEscapist diff i ;
7114: LD_ADDR_EXP 56
7118: PUSH
7119: LD_EXP 56
7123: PUSH
7124: LD_VAR 0 1
7128: DIFF
7129: ST_TO_ADDR
// arabianEscapedCounter := Inc ( arabianEscapedCounter ) ;
7130: LD_ADDR_EXP 21
7134: PUSH
7135: LD_EXP 21
7139: PPUSH
7140: CALL 92679 0 1
7144: ST_TO_ADDR
// if i = Dietrich then
7145: LD_VAR 0 1
7149: PUSH
7150: LD_EXP 50
7154: EQUAL
7155: IFFALSE 7175
// begin gensherEscaped := true ;
7157: LD_ADDR_EXP 13
7161: PUSH
7162: LD_INT 1
7164: ST_TO_ADDR
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
7165: LD_INT 1
7167: PPUSH
7168: LD_STRING 10_GensherEscape_1
7170: PPUSH
7171: CALL_OW 39
// end ; end ; end ;
7175: GO 7064
7177: POP
7178: POP
// end ;
7179: PPOPN 1
7181: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ; var i , skill , un , veh ; begin
7182: LD_INT 0
7184: PPUSH
7185: PPUSH
7186: PPUSH
7187: PPUSH
7188: PPUSH
// uc_side := 5 ;
7189: LD_ADDR_OWVAR 20
7193: PUSH
7194: LD_INT 5
7196: ST_TO_ADDR
// uc_nation := nation_arabian ;
7197: LD_ADDR_OWVAR 21
7201: PUSH
7202: LD_INT 2
7204: ST_TO_ADDR
// skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
7205: LD_ADDR_VAR 0 3
7209: PUSH
7210: LD_INT 5
7212: PUSH
7213: LD_INT 6
7215: PUSH
7216: LD_INT 7
7218: PUSH
7219: LD_INT 8
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: PUSH
7228: LD_OWVAR 67
7232: ARRAY
7233: ST_TO_ADDR
// arAttackersInf := [ ] ;
7234: LD_ADDR_EXP 57
7238: PUSH
7239: EMPTY
7240: ST_TO_ADDR
// arAttackersVeh := [ ] ;
7241: LD_ADDR_EXP 58
7245: PUSH
7246: EMPTY
7247: ST_TO_ADDR
// InitHC_All ( ) ;
7248: CALL_OW 584
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
7252: LD_ADDR_VAR 0 2
7256: PUSH
7257: DOUBLE
7258: LD_INT 1
7260: DEC
7261: ST_TO_ADDR
7262: LD_INT 3
7264: PUSH
7265: LD_INT 4
7267: PUSH
7268: LD_INT 5
7270: PUSH
7271: LD_INT 6
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: PUSH
7280: LD_OWVAR 67
7284: ARRAY
7285: PUSH
7286: FOR_TO
7287: IFFALSE 7389
// begin PrepareSoldier ( false , skill ) ;
7289: LD_INT 0
7291: PPUSH
7292: LD_VAR 0 3
7296: PPUSH
7297: CALL_OW 381
// un := CreateHuman ;
7301: LD_ADDR_VAR 0 4
7305: PUSH
7306: CALL_OW 44
7310: ST_TO_ADDR
// if i mod 2 = 0 then
7311: LD_VAR 0 2
7315: PUSH
7316: LD_INT 2
7318: MOD
7319: PUSH
7320: LD_INT 0
7322: EQUAL
7323: IFFALSE 7337
// SetClass ( un , class_mortar ) ;
7325: LD_VAR 0 4
7329: PPUSH
7330: LD_INT 8
7332: PPUSH
7333: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
7337: LD_VAR 0 4
7341: PPUSH
7342: LD_INT 19
7344: PPUSH
7345: LD_INT 0
7347: PPUSH
7348: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
7352: LD_ADDR_EXP 57
7356: PUSH
7357: LD_EXP 57
7361: PPUSH
7362: LD_VAR 0 4
7366: PPUSH
7367: CALL 91318 0 2
7371: ST_TO_ADDR
// ComAgressiveMove ( un , 104 , 60 ) ;
7372: LD_VAR 0 4
7376: PPUSH
7377: LD_INT 104
7379: PPUSH
7380: LD_INT 60
7382: PPUSH
7383: CALL_OW 114
// end ;
7387: GO 7286
7389: POP
7390: POP
// for i := 1 to 3 do
7391: LD_ADDR_VAR 0 2
7395: PUSH
7396: DOUBLE
7397: LD_INT 1
7399: DEC
7400: ST_TO_ADDR
7401: LD_INT 3
7403: PUSH
7404: FOR_TO
7405: IFFALSE 7557
// begin PrepareMechanic ( false , skill ) ;
7407: LD_INT 0
7409: PPUSH
7410: LD_VAR 0 3
7414: PPUSH
7415: CALL_OW 383
// un := CreateHuman ;
7419: LD_ADDR_VAR 0 4
7423: PUSH
7424: CALL_OW 44
7428: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
7429: LD_INT 14
7431: PPUSH
7432: LD_INT 1
7434: PPUSH
7435: LD_INT 1
7437: PPUSH
7438: LD_INT 27
7440: PUSH
7441: LD_INT 25
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: PUSH
7448: LD_VAR 0 2
7452: PUSH
7453: LD_INT 2
7455: MOD
7456: PUSH
7457: LD_INT 1
7459: PLUS
7460: ARRAY
7461: PPUSH
7462: LD_INT 80
7464: PPUSH
7465: CALL 58837 0 5
// veh := CreateVehicle ;
7469: LD_ADDR_VAR 0 5
7473: PUSH
7474: CALL_OW 45
7478: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7479: LD_VAR 0 5
7483: PPUSH
7484: LD_INT 4
7486: PPUSH
7487: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7491: LD_VAR 0 5
7495: PPUSH
7496: LD_INT 18
7498: PPUSH
7499: LD_INT 0
7501: PPUSH
7502: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7506: LD_VAR 0 4
7510: PPUSH
7511: LD_VAR 0 5
7515: PPUSH
7516: CALL_OW 52
// ComMoveXY ( un , 129 , 20 ) ;
7520: LD_VAR 0 4
7524: PPUSH
7525: LD_INT 129
7527: PPUSH
7528: LD_INT 20
7530: PPUSH
7531: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , un ) ;
7535: LD_ADDR_EXP 58
7539: PUSH
7540: LD_EXP 58
7544: PPUSH
7545: LD_VAR 0 4
7549: PPUSH
7550: CALL 91318 0 2
7554: ST_TO_ADDR
// end ;
7555: GO 7404
7557: POP
7558: POP
// wait ( 0 0$2 ) ;
7559: LD_INT 70
7561: PPUSH
7562: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
7566: LD_ADDR_VAR 0 2
7570: PUSH
7571: DOUBLE
7572: LD_INT 1
7574: DEC
7575: ST_TO_ADDR
7576: LD_INT 1
7578: PUSH
7579: LD_INT 2
7581: PUSH
7582: LD_INT 2
7584: PUSH
7585: LD_INT 3
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: PUSH
7594: LD_OWVAR 67
7598: ARRAY
7599: PUSH
7600: FOR_TO
7601: IFFALSE 7732
// begin PrepareMechanic ( false , skill ) ;
7603: LD_INT 0
7605: PPUSH
7606: LD_VAR 0 3
7610: PPUSH
7611: CALL_OW 383
// un := CreateHuman ;
7615: LD_ADDR_VAR 0 4
7619: PUSH
7620: CALL_OW 44
7624: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
7625: LD_INT 14
7627: PPUSH
7628: LD_INT 1
7630: PPUSH
7631: LD_INT 1
7633: PPUSH
7634: LD_INT 26
7636: PPUSH
7637: LD_INT 80
7639: PPUSH
7640: CALL 58837 0 5
// veh := CreateVehicle ;
7644: LD_ADDR_VAR 0 5
7648: PUSH
7649: CALL_OW 45
7653: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7654: LD_VAR 0 5
7658: PPUSH
7659: LD_INT 4
7661: PPUSH
7662: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7666: LD_VAR 0 5
7670: PPUSH
7671: LD_INT 18
7673: PPUSH
7674: LD_INT 0
7676: PPUSH
7677: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7681: LD_VAR 0 4
7685: PPUSH
7686: LD_VAR 0 5
7690: PPUSH
7691: CALL_OW 52
// ComMoveXY ( un , 133 , 40 ) ;
7695: LD_VAR 0 4
7699: PPUSH
7700: LD_INT 133
7702: PPUSH
7703: LD_INT 40
7705: PPUSH
7706: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , un ) ;
7710: LD_ADDR_EXP 58
7714: PUSH
7715: LD_EXP 58
7719: PPUSH
7720: LD_VAR 0 4
7724: PPUSH
7725: CALL 91318 0 2
7729: ST_TO_ADDR
// end ;
7730: GO 7600
7732: POP
7733: POP
// wait ( 0 0$2 ) ;
7734: LD_INT 70
7736: PPUSH
7737: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
7741: LD_ADDR_VAR 0 2
7745: PUSH
7746: DOUBLE
7747: LD_INT 1
7749: DEC
7750: ST_TO_ADDR
7751: LD_INT 1
7753: PUSH
7754: LD_INT 2
7756: PUSH
7757: LD_INT 3
7759: PUSH
7760: LD_INT 4
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: PUSH
7769: LD_OWVAR 67
7773: ARRAY
7774: PUSH
7775: FOR_TO
7776: IFFALSE 7938
// begin PrepareMechanic ( false , skill ) ;
7778: LD_INT 0
7780: PPUSH
7781: LD_VAR 0 3
7785: PPUSH
7786: CALL_OW 383
// un := CreateHuman ;
7790: LD_ADDR_VAR 0 4
7794: PUSH
7795: CALL_OW 44
7799: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
7800: LD_INT 14
7802: PPUSH
7803: LD_INT 1
7805: PPUSH
7806: LD_INT 1
7808: PPUSH
7809: LD_INT 28
7811: PPUSH
7812: LD_INT 80
7814: PPUSH
7815: CALL 58837 0 5
// veh := CreateVehicle ;
7819: LD_ADDR_VAR 0 5
7823: PUSH
7824: CALL_OW 45
7828: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7829: LD_VAR 0 5
7833: PPUSH
7834: LD_INT 4
7836: PPUSH
7837: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7841: LD_VAR 0 5
7845: PPUSH
7846: LD_INT 18
7848: PPUSH
7849: LD_INT 0
7851: PPUSH
7852: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7856: LD_VAR 0 4
7860: PPUSH
7861: LD_VAR 0 5
7865: PPUSH
7866: CALL_OW 52
// if i mod 2 = 0 then
7870: LD_VAR 0 2
7874: PUSH
7875: LD_INT 2
7877: MOD
7878: PUSH
7879: LD_INT 0
7881: EQUAL
7882: IFFALSE 7901
// ComMoveXY ( un , 136 , 61 ) else
7884: LD_VAR 0 4
7888: PPUSH
7889: LD_INT 136
7891: PPUSH
7892: LD_INT 61
7894: PPUSH
7895: CALL_OW 111
7899: GO 7916
// ComMoveXY ( un , 137 , 41 ) ;
7901: LD_VAR 0 4
7905: PPUSH
7906: LD_INT 137
7908: PPUSH
7909: LD_INT 41
7911: PPUSH
7912: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , un ) ;
7916: LD_ADDR_EXP 58
7920: PUSH
7921: LD_EXP 58
7925: PPUSH
7926: LD_VAR 0 4
7930: PPUSH
7931: CALL 91318 0 2
7935: ST_TO_ADDR
// end ;
7936: GO 7775
7938: POP
7939: POP
// arabianAttackSpawned := true ;
7940: LD_ADDR_EXP 12
7944: PUSH
7945: LD_INT 1
7947: ST_TO_ADDR
// end ;
7948: LD_VAR 0 1
7952: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest ;
7953: LD_EXP 57
7957: IFFALSE 8370
7959: GO 7961
7961: DISABLE
7962: LD_INT 0
7964: PPUSH
7965: PPUSH
7966: PPUSH
// begin wait ( 0 0$10 ) ;
7967: LD_INT 350
7969: PPUSH
7970: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
7974: LD_ADDR_VAR 0 2
7978: PUSH
7979: LD_EXP 57
7983: PPUSH
7984: LD_INT 25
7986: PUSH
7987: LD_INT 1
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: PUSH
7994: LD_INT 50
7996: PUSH
7997: EMPTY
7998: LIST
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: PPUSH
8004: CALL_OW 72
8008: ST_TO_ADDR
// for i in tmp do
8009: LD_ADDR_VAR 0 1
8013: PUSH
8014: LD_VAR 0 2
8018: PUSH
8019: FOR_IN
8020: IFFALSE 8145
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
8022: LD_ADDR_VAR 0 3
8026: PUSH
8027: LD_INT 22
8029: PUSH
8030: LD_INT 1
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PUSH
8037: LD_INT 3
8039: PUSH
8040: LD_INT 120
8042: PUSH
8043: LD_INT 11
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: LD_INT 2
8056: PUSH
8057: LD_INT 21
8059: PUSH
8060: LD_INT 2
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PUSH
8067: LD_INT 21
8069: PUSH
8070: LD_INT 3
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: LIST
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: LIST
8086: PPUSH
8087: CALL_OW 69
8091: PPUSH
8092: LD_VAR 0 1
8096: PPUSH
8097: CALL_OW 74
8101: ST_TO_ADDR
// if not nearest then
8102: LD_VAR 0 3
8106: NOT
8107: IFFALSE 8111
// break ;
8109: GO 8145
// SetTag ( nearest , tMined ) ;
8111: LD_VAR 0 3
8115: PPUSH
8116: LD_INT 11
8118: PPUSH
8119: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
8123: LD_VAR 0 1
8127: PPUSH
8128: LD_INT 0
8130: PPUSH
8131: LD_INT 0
8133: PPUSH
8134: LD_VAR 0 3
8138: PPUSH
8139: CALL_OW 132
// end ;
8143: GO 8019
8145: POP
8146: POP
// if hasBase and epsilon then
8147: LD_EXP 9
8151: PUSH
8152: LD_EXP 10
8156: AND
8157: IFFALSE 8181
// AddComPlaceDelayedCharge ( tmp , 0 , 0 , epsilon ) else
8159: LD_VAR 0 2
8163: PPUSH
8164: LD_INT 0
8166: PPUSH
8167: LD_INT 0
8169: PPUSH
8170: LD_EXP 10
8174: PPUSH
8175: CALL_OW 192
8179: GO 8196
// AddComMoveXY ( tmp , 107 , 59 ) ;
8181: LD_VAR 0 2
8185: PPUSH
8186: LD_INT 107
8188: PPUSH
8189: LD_INT 59
8191: PPUSH
8192: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8196: LD_INT 35
8198: PPUSH
8199: CALL_OW 67
// until IsDead ( Dietrich ) or gensherEscaped ;
8203: LD_EXP 50
8207: PPUSH
8208: CALL_OW 301
8212: PUSH
8213: LD_EXP 13
8217: OR
8218: IFFALSE 8196
// if not gensherEscaped then
8220: LD_EXP 13
8224: NOT
8225: IFFALSE 8234
// wait ( 1 1$20 ) ;
8227: LD_INT 2800
8229: PPUSH
8230: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
8234: LD_ADDR_VAR 0 2
8238: PUSH
8239: LD_EXP 57
8243: PPUSH
8244: LD_INT 50
8246: PUSH
8247: EMPTY
8248: LIST
8249: PPUSH
8250: CALL_OW 72
8254: ST_TO_ADDR
// ComMoveXY ( tmp , 143 , 117 ) ;
8255: LD_VAR 0 2
8259: PPUSH
8260: LD_INT 143
8262: PPUSH
8263: LD_INT 117
8265: PPUSH
8266: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8270: LD_INT 35
8272: PPUSH
8273: CALL_OW 67
// for i in tmp do
8277: LD_ADDR_VAR 0 1
8281: PUSH
8282: LD_VAR 0 2
8286: PUSH
8287: FOR_IN
8288: IFFALSE 8361
// if IsInArea ( i , arAttackSpawn2Area ) then
8290: LD_VAR 0 1
8294: PPUSH
8295: LD_INT 19
8297: PPUSH
8298: CALL_OW 308
8302: IFFALSE 8347
// begin tmp := tmp diff i ;
8304: LD_ADDR_VAR 0 2
8308: PUSH
8309: LD_VAR 0 2
8313: PUSH
8314: LD_VAR 0 1
8318: DIFF
8319: ST_TO_ADDR
// arAttackersInf := arAttackersInf diff i ;
8320: LD_ADDR_EXP 57
8324: PUSH
8325: LD_EXP 57
8329: PUSH
8330: LD_VAR 0 1
8334: DIFF
8335: ST_TO_ADDR
// RemoveUnit ( i ) ;
8336: LD_VAR 0 1
8340: PPUSH
8341: CALL_OW 64
// end else
8345: GO 8359
// ComMoveToArea ( i , arAttackSpawn2Area ) ;
8347: LD_VAR 0 1
8351: PPUSH
8352: LD_INT 19
8354: PPUSH
8355: CALL_OW 113
8359: GO 8287
8361: POP
8362: POP
// until not tmp ;
8363: LD_VAR 0 2
8367: NOT
8368: IFFALSE 8270
// end ;
8370: PPOPN 3
8372: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp ;
8373: LD_EXP 58
8377: IFFALSE 8616
8379: GO 8381
8381: DISABLE
8382: LD_INT 0
8384: PPUSH
8385: PPUSH
// begin repeat wait ( 0 0$1 ) ;
8386: LD_INT 35
8388: PPUSH
8389: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8393: LD_ADDR_VAR 0 2
8397: PUSH
8398: LD_EXP 58
8402: PPUSH
8403: LD_INT 50
8405: PUSH
8406: EMPTY
8407: LIST
8408: PPUSH
8409: CALL_OW 72
8413: ST_TO_ADDR
// for i in tmp do
8414: LD_ADDR_VAR 0 1
8418: PUSH
8419: LD_VAR 0 2
8423: PUSH
8424: FOR_IN
8425: IFFALSE 8451
// AgressiveMove ( i , [ [ 110 , 40 ] ] ) ;
8427: LD_VAR 0 1
8431: PPUSH
8432: LD_INT 110
8434: PUSH
8435: LD_INT 40
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: PUSH
8442: EMPTY
8443: LIST
8444: PPUSH
8445: CALL 93922 0 2
8449: GO 8424
8451: POP
8452: POP
// until not arAttackersVeh or gensherEscaped or IsDead ( Dietrich ) ;
8453: LD_EXP 58
8457: NOT
8458: PUSH
8459: LD_EXP 13
8463: OR
8464: PUSH
8465: LD_EXP 50
8469: PPUSH
8470: CALL_OW 301
8474: OR
8475: IFFALSE 8386
// if not arAttackersVeh then
8477: LD_EXP 58
8481: NOT
8482: IFFALSE 8486
// exit ;
8484: GO 8616
// repeat wait ( 0 0$1 ) ;
8486: LD_INT 35
8488: PPUSH
8489: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8493: LD_ADDR_VAR 0 2
8497: PUSH
8498: LD_EXP 58
8502: PPUSH
8503: LD_INT 50
8505: PUSH
8506: EMPTY
8507: LIST
8508: PPUSH
8509: CALL_OW 72
8513: ST_TO_ADDR
// for i in tmp do
8514: LD_ADDR_VAR 0 1
8518: PUSH
8519: LD_VAR 0 2
8523: PUSH
8524: FOR_IN
8525: IFFALSE 8607
// if IsInArea ( i , arAttackSpawnArea ) then
8527: LD_VAR 0 1
8531: PPUSH
8532: LD_INT 18
8534: PPUSH
8535: CALL_OW 308
8539: IFFALSE 8593
// begin if IsInUnit ( i ) then
8541: LD_VAR 0 1
8545: PPUSH
8546: CALL_OW 310
8550: IFFALSE 8566
// RemoveUnit ( IsInUnit ( i ) ) ;
8552: LD_VAR 0 1
8556: PPUSH
8557: CALL_OW 310
8561: PPUSH
8562: CALL_OW 64
// RemoveUnit ( i ) ;
8566: LD_VAR 0 1
8570: PPUSH
8571: CALL_OW 64
// arAttackersVeh := arAttackersVeh diff i ;
8575: LD_ADDR_EXP 58
8579: PUSH
8580: LD_EXP 58
8584: PUSH
8585: LD_VAR 0 1
8589: DIFF
8590: ST_TO_ADDR
// end else
8591: GO 8605
// ComMoveToArea ( i , arAttackSpawnArea ) ;
8593: LD_VAR 0 1
8597: PPUSH
8598: LD_INT 18
8600: PPUSH
8601: CALL_OW 113
8605: GO 8524
8607: POP
8608: POP
// until not tmp ;
8609: LD_VAR 0 2
8613: NOT
8614: IFFALSE 8486
// end ; end_of_file
8616: PPOPN 2
8618: END
// export ruForces , ruForces2 , ruCommander , ruCommander2 , ruMech , ruMech2 ; export ruTech , ruBaseArea , ruBaseArea2 , ruBase , ruBase2 , ruConstructList , ruConstructList2 , ruCratesArea , ruCratesArea2 , ruHealPoint , ruHealPoint2 , ruBuildings , ruBuildings2 , ruTransportDestroyed , ruTanks , ruTanks2 , ruExtraTanks , ruParkingArea , ruParkingArea2 , ruCratesSpawnArea , ruCratesSpawnArea2 ; export function PrepareRussian ; var i , j , un , skill , sources ; begin
8619: LD_INT 0
8621: PPUSH
8622: PPUSH
8623: PPUSH
8624: PPUSH
8625: PPUSH
8626: PPUSH
// uc_side := 3 ;
8627: LD_ADDR_OWVAR 20
8631: PUSH
8632: LD_INT 3
8634: ST_TO_ADDR
// uc_nation := nation_russian ;
8635: LD_ADDR_OWVAR 21
8639: PUSH
8640: LD_INT 3
8642: ST_TO_ADDR
// ruForces := [ ] ;
8643: LD_ADDR_EXP 59
8647: PUSH
8648: EMPTY
8649: ST_TO_ADDR
// ruForces2 := [ ] ;
8650: LD_ADDR_EXP 60
8654: PUSH
8655: EMPTY
8656: ST_TO_ADDR
// ruMech := [ ] ;
8657: LD_ADDR_EXP 63
8661: PUSH
8662: EMPTY
8663: ST_TO_ADDR
// ruMech2 := [ ] ;
8664: LD_ADDR_EXP 64
8668: PUSH
8669: EMPTY
8670: ST_TO_ADDR
// ruTech := [ tech_LimTeleport , tech_ST1 , tech_Weap2 , tech_Sib1 ] ;
8671: LD_ADDR_EXP 65
8675: PUSH
8676: LD_INT 37
8678: PUSH
8679: LD_INT 63
8681: PUSH
8682: LD_INT 52
8684: PUSH
8685: LD_INT 54
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: ST_TO_ADDR
// ruBaseArea := 0 ;
8694: LD_ADDR_EXP 66
8698: PUSH
8699: LD_INT 0
8701: ST_TO_ADDR
// ruBaseArea2 := 0 ;
8702: LD_ADDR_EXP 67
8706: PUSH
8707: LD_INT 0
8709: ST_TO_ADDR
// ruBase := 0 ;
8710: LD_ADDR_EXP 68
8714: PUSH
8715: LD_INT 0
8717: ST_TO_ADDR
// ruBase2 := 0 ;
8718: LD_ADDR_EXP 69
8722: PUSH
8723: LD_INT 0
8725: ST_TO_ADDR
// ruConstructList := [ ] ;
8726: LD_ADDR_EXP 70
8730: PUSH
8731: EMPTY
8732: ST_TO_ADDR
// ruConstructList2 := [ [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ] ;
8733: LD_ADDR_EXP 71
8737: PUSH
8738: LD_INT 22
8740: PUSH
8741: LD_INT 3
8743: PUSH
8744: LD_INT 1
8746: PUSH
8747: LD_INT 43
8749: PUSH
8750: LD_INT 44
8752: PUSH
8753: LD_INT 45
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: LIST
8760: PUSH
8761: LD_INT 1
8763: PPUSH
8764: LD_INT 3
8766: PPUSH
8767: CALL_OW 12
8771: ARRAY
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: PUSH
8779: LD_INT 22
8781: PUSH
8782: LD_INT 3
8784: PUSH
8785: LD_INT 1
8787: PUSH
8788: LD_INT 43
8790: PUSH
8791: LD_INT 44
8793: PUSH
8794: LD_INT 45
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: LIST
8801: PUSH
8802: LD_INT 1
8804: PPUSH
8805: LD_INT 3
8807: PPUSH
8808: CALL_OW 12
8812: ARRAY
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: PUSH
8820: LD_INT 22
8822: PUSH
8823: LD_INT 3
8825: PUSH
8826: LD_INT 1
8828: PUSH
8829: LD_INT 43
8831: PUSH
8832: LD_INT 44
8834: PUSH
8835: LD_INT 45
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 1
8845: PPUSH
8846: LD_INT 3
8848: PPUSH
8849: CALL_OW 12
8853: ARRAY
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: LIST
8865: ST_TO_ADDR
// ruCratesArea := 0 ;
8866: LD_ADDR_EXP 72
8870: PUSH
8871: LD_INT 0
8873: ST_TO_ADDR
// ruCratesArea2 := 0 ;
8874: LD_ADDR_EXP 73
8878: PUSH
8879: LD_INT 0
8881: ST_TO_ADDR
// ruHealPoint := [ ] ;
8882: LD_ADDR_EXP 74
8886: PUSH
8887: EMPTY
8888: ST_TO_ADDR
// ruHealPoint2 := [ ] ;
8889: LD_ADDR_EXP 75
8893: PUSH
8894: EMPTY
8895: ST_TO_ADDR
// ruBuildings := [ ] ;
8896: LD_ADDR_EXP 76
8900: PUSH
8901: EMPTY
8902: ST_TO_ADDR
// ruBuildings2 := [ ] ;
8903: LD_ADDR_EXP 77
8907: PUSH
8908: EMPTY
8909: ST_TO_ADDR
// ruTanks := [ ] ;
8910: LD_ADDR_EXP 79
8914: PUSH
8915: EMPTY
8916: ST_TO_ADDR
// ruTanks2 := [ ] ;
8917: LD_ADDR_EXP 80
8921: PUSH
8922: EMPTY
8923: ST_TO_ADDR
// ruParkingArea := 0 ;
8924: LD_ADDR_EXP 82
8928: PUSH
8929: LD_INT 0
8931: ST_TO_ADDR
// ruParkingArea2 := 0 ;
8932: LD_ADDR_EXP 83
8936: PUSH
8937: LD_INT 0
8939: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
8940: LD_ADDR_VAR 0 2
8944: PUSH
8945: DOUBLE
8946: LD_INT 1
8948: DEC
8949: ST_TO_ADDR
8950: LD_INT 2
8952: PUSH
8953: LD_INT 3
8955: PUSH
8956: LD_INT 4
8958: PUSH
8959: LD_INT 4
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: PUSH
8968: LD_OWVAR 67
8972: ARRAY
8973: PUSH
8974: FOR_TO
8975: IFFALSE 9035
// ruConstructList := Join ( ruConstructList , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
8977: LD_ADDR_EXP 70
8981: PUSH
8982: LD_EXP 70
8986: PPUSH
8987: LD_INT 22
8989: PUSH
8990: LD_INT 3
8992: PUSH
8993: LD_INT 1
8995: PUSH
8996: LD_INT 43
8998: PUSH
8999: LD_INT 44
9001: PUSH
9002: LD_INT 45
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: LIST
9009: PUSH
9010: LD_INT 1
9012: PPUSH
9013: LD_INT 3
9015: PPUSH
9016: CALL_OW 12
9020: ARRAY
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: PPUSH
9028: CALL 91318 0 2
9032: ST_TO_ADDR
9033: GO 8974
9035: POP
9036: POP
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
9037: LD_ADDR_VAR 0 6
9041: PUSH
9042: LD_INT 43
9044: PUSH
9045: LD_INT 68
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PUSH
9052: LD_INT 43
9054: PUSH
9055: LD_INT 79
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: PUSH
9062: LD_INT 99
9064: PUSH
9065: LD_INT 114
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: LD_INT 103
9074: PUSH
9075: LD_INT 114
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: PUSH
9082: LD_INT 156
9084: PUSH
9085: LD_INT 92
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PUSH
9092: LD_INT 152
9094: PUSH
9095: LD_INT 85
9097: PUSH
9098: EMPTY
9099: LIST
9100: LIST
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: ST_TO_ADDR
// for i in sources do
9110: LD_ADDR_VAR 0 2
9114: PUSH
9115: LD_VAR 0 6
9119: PUSH
9120: FOR_IN
9121: IFFALSE 9150
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
9123: LD_VAR 0 2
9127: PUSH
9128: LD_INT 1
9130: ARRAY
9131: PPUSH
9132: LD_VAR 0 2
9136: PUSH
9137: LD_INT 2
9139: ARRAY
9140: PPUSH
9141: LD_INT 3
9143: PPUSH
9144: CALL_OW 441
9148: GO 9120
9150: POP
9151: POP
// if Difficulty > 2 then
9152: LD_OWVAR 67
9156: PUSH
9157: LD_INT 2
9159: GREATER
9160: IFFALSE 9188
// begin SetTech ( tech_weap2 , 6 , state_researched ) ;
9162: LD_INT 52
9164: PPUSH
9165: LD_INT 6
9167: PPUSH
9168: LD_INT 2
9170: PPUSH
9171: CALL_OW 322
// SetTech ( tech_comp2 , 6 , state_researched ) ;
9175: LD_INT 58
9177: PPUSH
9178: LD_INT 6
9180: PPUSH
9181: LD_INT 2
9183: PPUSH
9184: CALL_OW 322
// end ; skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
9188: LD_ADDR_VAR 0 5
9192: PUSH
9193: LD_INT 5
9195: PUSH
9196: LD_INT 6
9198: PUSH
9199: LD_INT 7
9201: PUSH
9202: LD_INT 8
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: PUSH
9211: LD_OWVAR 67
9215: ARRAY
9216: ST_TO_ADDR
// ruCommander := PrepareUnit ( Tsaritsyn , false ,  ) ;
9217: LD_ADDR_EXP 61
9221: PUSH
9222: LD_STRING Tsaritsyn
9224: PPUSH
9225: LD_INT 0
9227: PPUSH
9228: LD_STRING 
9230: PPUSH
9231: CALL 53997 0 3
9235: ST_TO_ADDR
// for i := 1 to 4 do
9236: LD_ADDR_VAR 0 2
9240: PUSH
9241: DOUBLE
9242: LD_INT 1
9244: DEC
9245: ST_TO_ADDR
9246: LD_INT 4
9248: PUSH
9249: FOR_TO
9250: IFFALSE 9468
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9252: LD_ADDR_VAR 0 3
9256: PUSH
9257: DOUBLE
9258: LD_INT 1
9260: DEC
9261: ST_TO_ADDR
9262: LD_INT 5
9264: PUSH
9265: LD_INT 6
9267: PUSH
9268: LD_INT 8
9270: PUSH
9271: LD_INT 9
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: PUSH
9280: LD_OWVAR 67
9284: ARRAY
9285: PUSH
9286: LD_INT 3
9288: PUSH
9289: LD_INT 4
9291: PUSH
9292: LD_INT 5
9294: PUSH
9295: LD_INT 6
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: PUSH
9304: LD_OWVAR 67
9308: ARRAY
9309: PUSH
9310: LD_INT 3
9312: PUSH
9313: LD_INT 4
9315: PUSH
9316: LD_INT 5
9318: PUSH
9319: LD_INT 6
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: PUSH
9328: LD_OWVAR 67
9332: ARRAY
9333: PUSH
9334: LD_INT 2
9336: PUSH
9337: LD_INT 3
9339: PUSH
9340: LD_INT 3
9342: PUSH
9343: LD_INT 3
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: PUSH
9352: LD_OWVAR 67
9356: ARRAY
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: PUSH
9364: LD_VAR 0 2
9368: ARRAY
9369: PUSH
9370: FOR_TO
9371: IFFALSE 9464
// begin PrepareHuman ( false , i , skill ) ;
9373: LD_INT 0
9375: PPUSH
9376: LD_VAR 0 2
9380: PPUSH
9381: LD_VAR 0 5
9385: PPUSH
9386: CALL_OW 380
// un := CreateHuman ;
9390: LD_ADDR_VAR 0 4
9394: PUSH
9395: CALL_OW 44
9399: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
9400: LD_ADDR_EXP 59
9404: PUSH
9405: LD_EXP 59
9409: PPUSH
9410: LD_VAR 0 4
9414: PPUSH
9415: CALL 91318 0 2
9419: ST_TO_ADDR
// if i = 3 then
9420: LD_VAR 0 2
9424: PUSH
9425: LD_INT 3
9427: EQUAL
9428: IFFALSE 9462
// begin ruMech := Join ( ruMech , un ) ;
9430: LD_ADDR_EXP 63
9434: PUSH
9435: LD_EXP 63
9439: PPUSH
9440: LD_VAR 0 4
9444: PPUSH
9445: CALL 91318 0 2
9449: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9450: LD_VAR 0 4
9454: PPUSH
9455: LD_INT 1
9457: PPUSH
9458: CALL_OW 336
// end ; end ;
9462: GO 9370
9464: POP
9465: POP
9466: GO 9249
9468: POP
9469: POP
// if Difficulty < 4 then
9470: LD_OWVAR 67
9474: PUSH
9475: LD_INT 4
9477: LESS
9478: IFFALSE 9482
// exit ;
9480: GO 9754
// PrepareSoldier ( sex_male , skill + 1 ) ;
9482: LD_INT 1
9484: PPUSH
9485: LD_VAR 0 5
9489: PUSH
9490: LD_INT 1
9492: PLUS
9493: PPUSH
9494: CALL_OW 381
// hc_importance := 100 ;
9498: LD_ADDR_OWVAR 32
9502: PUSH
9503: LD_INT 100
9505: ST_TO_ADDR
// ruCommander2 := CreateHuman ;
9506: LD_ADDR_EXP 62
9510: PUSH
9511: CALL_OW 44
9515: ST_TO_ADDR
// InitHc_All ( ) ;
9516: CALL_OW 584
// for i := 1 to 4 do
9520: LD_ADDR_VAR 0 2
9524: PUSH
9525: DOUBLE
9526: LD_INT 1
9528: DEC
9529: ST_TO_ADDR
9530: LD_INT 4
9532: PUSH
9533: FOR_TO
9534: IFFALSE 9752
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9536: LD_ADDR_VAR 0 3
9540: PUSH
9541: DOUBLE
9542: LD_INT 1
9544: DEC
9545: ST_TO_ADDR
9546: LD_INT 5
9548: PUSH
9549: LD_INT 6
9551: PUSH
9552: LD_INT 8
9554: PUSH
9555: LD_INT 9
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: PUSH
9564: LD_OWVAR 67
9568: ARRAY
9569: PUSH
9570: LD_INT 3
9572: PUSH
9573: LD_INT 4
9575: PUSH
9576: LD_INT 5
9578: PUSH
9579: LD_INT 6
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: PUSH
9588: LD_OWVAR 67
9592: ARRAY
9593: PUSH
9594: LD_INT 3
9596: PUSH
9597: LD_INT 4
9599: PUSH
9600: LD_INT 5
9602: PUSH
9603: LD_INT 6
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: PUSH
9612: LD_OWVAR 67
9616: ARRAY
9617: PUSH
9618: LD_INT 2
9620: PUSH
9621: LD_INT 3
9623: PUSH
9624: LD_INT 3
9626: PUSH
9627: LD_INT 3
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: PUSH
9636: LD_OWVAR 67
9640: ARRAY
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: PUSH
9648: LD_VAR 0 2
9652: ARRAY
9653: PUSH
9654: FOR_TO
9655: IFFALSE 9748
// begin PrepareHuman ( false , i , skill ) ;
9657: LD_INT 0
9659: PPUSH
9660: LD_VAR 0 2
9664: PPUSH
9665: LD_VAR 0 5
9669: PPUSH
9670: CALL_OW 380
// un := CreateHuman ;
9674: LD_ADDR_VAR 0 4
9678: PUSH
9679: CALL_OW 44
9683: ST_TO_ADDR
// ruForces2 := Join ( ruForces2 , un ) ;
9684: LD_ADDR_EXP 60
9688: PUSH
9689: LD_EXP 60
9693: PPUSH
9694: LD_VAR 0 4
9698: PPUSH
9699: CALL 91318 0 2
9703: ST_TO_ADDR
// if i = 3 then
9704: LD_VAR 0 2
9708: PUSH
9709: LD_INT 3
9711: EQUAL
9712: IFFALSE 9746
// begin ruMech2 := Join ( ruMech2 , un ) ;
9714: LD_ADDR_EXP 64
9718: PUSH
9719: LD_EXP 64
9723: PPUSH
9724: LD_VAR 0 4
9728: PPUSH
9729: CALL 91318 0 2
9733: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9734: LD_VAR 0 4
9738: PPUSH
9739: LD_INT 1
9741: PPUSH
9742: CALL_OW 336
// end ; end ;
9746: GO 9654
9748: POP
9749: POP
9750: GO 9533
9752: POP
9753: POP
// end ;
9754: LD_VAR 0 1
9758: RET
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings ) < 3 do var i ;
9759: LD_EXP 66
9763: PPUSH
9764: LD_INT 30
9766: PUSH
9767: LD_INT 3
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: PUSH
9774: LD_INT 50
9776: PUSH
9777: EMPTY
9778: LIST
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PPUSH
9784: CALL_OW 70
9788: PUSH
9789: LD_EXP 76
9793: PPUSH
9794: CALL 56099 0 1
9798: PUSH
9799: LD_INT 3
9801: LESS
9802: AND
9803: IFFALSE 10067
9805: GO 9807
9807: DISABLE
9808: LD_INT 0
9810: PPUSH
// begin enable ;
9811: ENABLE
// ruConstructList := ruConstructList ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
9812: LD_ADDR_EXP 70
9816: PUSH
9817: LD_EXP 70
9821: PUSH
9822: LD_INT 22
9824: PUSH
9825: LD_INT 22
9827: PUSH
9828: LD_INT 24
9830: PUSH
9831: LD_INT 24
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: PUSH
9840: LD_OWVAR 67
9844: ARRAY
9845: PUSH
9846: LD_INT 1
9848: PUSH
9849: LD_INT 3
9851: PUSH
9852: LD_INT 44
9854: PUSH
9855: LD_INT 45
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PUSH
9862: LD_INT 1
9864: PPUSH
9865: LD_INT 2
9867: PPUSH
9868: CALL_OW 12
9872: ARRAY
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: PUSH
9880: LD_INT 22
9882: PUSH
9883: LD_INT 22
9885: PUSH
9886: LD_INT 24
9888: PUSH
9889: LD_INT 24
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: PUSH
9898: LD_OWVAR 67
9902: ARRAY
9903: PUSH
9904: LD_INT 1
9906: PUSH
9907: LD_INT 3
9909: PUSH
9910: LD_INT 45
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: PUSH
9919: LD_INT 22
9921: PUSH
9922: LD_INT 22
9924: PUSH
9925: LD_INT 24
9927: PUSH
9928: LD_INT 24
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: PUSH
9937: LD_OWVAR 67
9941: ARRAY
9942: PUSH
9943: LD_INT 1
9945: PUSH
9946: LD_INT 3
9948: PUSH
9949: LD_INT 45
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: LIST
9962: ADD
9963: ST_TO_ADDR
// for i := Difficulty downto 1 do
9964: LD_ADDR_VAR 0 1
9968: PUSH
9969: DOUBLE
9970: LD_OWVAR 67
9974: INC
9975: ST_TO_ADDR
9976: LD_INT 1
9978: PUSH
9979: FOR_DOWNTO
9980: IFFALSE 10065
// ruConstructList := Join ( ruConstructList , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 4 ) ] ] ) ;
9982: LD_ADDR_EXP 70
9986: PUSH
9987: LD_EXP 70
9991: PPUSH
9992: LD_INT 22
9994: PUSH
9995: LD_INT 22
9997: PUSH
9998: LD_INT 24
10000: PUSH
10001: LD_INT 24
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: PUSH
10010: LD_OWVAR 67
10014: ARRAY
10015: PUSH
10016: LD_INT 1
10018: PUSH
10019: LD_INT 3
10021: PUSH
10022: LD_INT 44
10024: PUSH
10025: LD_INT 45
10027: PUSH
10028: LD_INT 45
10030: PUSH
10031: LD_INT 43
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: PUSH
10040: LD_INT 1
10042: PPUSH
10043: LD_INT 4
10045: PPUSH
10046: CALL_OW 12
10050: ARRAY
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: PPUSH
10058: CALL 91318 0 2
10062: ST_TO_ADDR
10063: GO 9979
10065: POP
10066: POP
// end ;
10067: PPOPN 1
10069: END
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea2 , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings2 ) < 3 do
10070: LD_EXP 67
10074: PPUSH
10075: LD_INT 30
10077: PUSH
10078: LD_INT 3
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 50
10087: PUSH
10088: EMPTY
10089: LIST
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PPUSH
10095: CALL_OW 70
10099: PUSH
10100: LD_EXP 77
10104: PPUSH
10105: CALL 56099 0 1
10109: PUSH
10110: LD_INT 3
10112: LESS
10113: AND
10114: IFFALSE 10309
10116: GO 10118
10118: DISABLE
// begin enable ;
10119: ENABLE
// ruConstructList2 := ruConstructList2 ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] ] ;
10120: LD_ADDR_EXP 71
10124: PUSH
10125: LD_EXP 71
10129: PUSH
10130: LD_INT 22
10132: PUSH
10133: LD_INT 22
10135: PUSH
10136: LD_INT 24
10138: PUSH
10139: LD_INT 24
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: PUSH
10148: LD_INT 1
10150: PPUSH
10151: LD_INT 4
10153: PPUSH
10154: CALL_OW 12
10158: ARRAY
10159: PUSH
10160: LD_INT 1
10162: PUSH
10163: LD_INT 3
10165: PUSH
10166: LD_INT 44
10168: PUSH
10169: LD_INT 45
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PUSH
10176: LD_INT 1
10178: PPUSH
10179: LD_INT 2
10181: PPUSH
10182: CALL_OW 12
10186: ARRAY
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: PUSH
10194: LD_INT 22
10196: PUSH
10197: LD_INT 22
10199: PUSH
10200: LD_INT 24
10202: PUSH
10203: LD_INT 24
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: PUSH
10212: LD_INT 1
10214: PPUSH
10215: LD_INT 4
10217: PPUSH
10218: CALL_OW 12
10222: ARRAY
10223: PUSH
10224: LD_INT 1
10226: PUSH
10227: LD_INT 3
10229: PUSH
10230: LD_INT 45
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: PUSH
10239: LD_INT 22
10241: PUSH
10242: LD_INT 22
10244: PUSH
10245: LD_INT 24
10247: PUSH
10248: LD_INT 24
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: PUSH
10257: LD_INT 1
10259: PPUSH
10260: LD_INT 4
10262: PPUSH
10263: CALL_OW 12
10267: ARRAY
10268: PUSH
10269: LD_INT 1
10271: PUSH
10272: LD_INT 3
10274: PUSH
10275: LD_INT 45
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: PUSH
10284: LD_INT 22
10286: PUSH
10287: LD_INT 1
10289: PUSH
10290: LD_INT 3
10292: PUSH
10293: LD_INT 43
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: ADD
10308: ST_TO_ADDR
// end ;
10309: END
// export function SpawnConvoy ; var i , tmp , spawn , area , path , place , point ; begin
10310: LD_INT 0
10312: PPUSH
10313: PPUSH
10314: PPUSH
10315: PPUSH
10316: PPUSH
10317: PPUSH
10318: PPUSH
10319: PPUSH
// case Difficulty of 1 :
10320: LD_OWVAR 67
10324: PUSH
10325: LD_INT 1
10327: DOUBLE
10328: EQUAL
10329: IFTRUE 10333
10331: GO 10352
10333: POP
// spawn := rand ( 1 , 2 ) ; 2 :
10334: LD_ADDR_VAR 0 4
10338: PUSH
10339: LD_INT 1
10341: PPUSH
10342: LD_INT 2
10344: PPUSH
10345: CALL_OW 12
10349: ST_TO_ADDR
10350: GO 10426
10352: LD_INT 2
10354: DOUBLE
10355: EQUAL
10356: IFTRUE 10360
10358: GO 10379
10360: POP
// spawn := rand ( 1 , 3 ) ; 3 :
10361: LD_ADDR_VAR 0 4
10365: PUSH
10366: LD_INT 1
10368: PPUSH
10369: LD_INT 3
10371: PPUSH
10372: CALL_OW 12
10376: ST_TO_ADDR
10377: GO 10426
10379: LD_INT 3
10381: DOUBLE
10382: EQUAL
10383: IFTRUE 10387
10385: GO 10406
10387: POP
// spawn := rand ( 2 , 3 ) ; 4 :
10388: LD_ADDR_VAR 0 4
10392: PUSH
10393: LD_INT 2
10395: PPUSH
10396: LD_INT 3
10398: PPUSH
10399: CALL_OW 12
10403: ST_TO_ADDR
10404: GO 10426
10406: LD_INT 4
10408: DOUBLE
10409: EQUAL
10410: IFTRUE 10414
10412: GO 10425
10414: POP
// spawn := 3 ; end ;
10415: LD_ADDR_VAR 0 4
10419: PUSH
10420: LD_INT 3
10422: ST_TO_ADDR
10423: GO 10426
10425: POP
// path := [ centerPathArea , westPathArea , eastPathArea ] [ spawn ] ;
10426: LD_ADDR_VAR 0 6
10430: PUSH
10431: LD_INT 24
10433: PUSH
10434: LD_INT 25
10436: PUSH
10437: LD_INT 23
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: LIST
10444: PUSH
10445: LD_VAR 0 4
10449: ARRAY
10450: ST_TO_ADDR
// area := [ ruSpawnCenterArea , ruSpawnWestArea , ruSpawnEastArea ] [ spawn ] ;
10451: LD_ADDR_VAR 0 5
10455: PUSH
10456: LD_INT 21
10458: PUSH
10459: LD_INT 22
10461: PUSH
10462: LD_INT 20
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: LIST
10469: PUSH
10470: LD_VAR 0 4
10474: ARRAY
10475: ST_TO_ADDR
// point := [ [ 96 , 102 ] , [ 54 , 85 ] , [ 146 , 67 ] ] [ spawn ] ;
10476: LD_ADDR_VAR 0 8
10480: PUSH
10481: LD_INT 96
10483: PUSH
10484: LD_INT 102
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: PUSH
10491: LD_INT 54
10493: PUSH
10494: LD_INT 85
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PUSH
10501: LD_INT 146
10503: PUSH
10504: LD_INT 67
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: LIST
10515: PUSH
10516: LD_VAR 0 4
10520: ARRAY
10521: ST_TO_ADDR
// for i in ruForces union ruCommander do
10522: LD_ADDR_VAR 0 2
10526: PUSH
10527: LD_EXP 59
10531: PUSH
10532: LD_EXP 61
10536: UNION
10537: PUSH
10538: FOR_IN
10539: IFFALSE 10594
// begin PlaceUnitArea ( i , area , false ) ;
10541: LD_VAR 0 2
10545: PPUSH
10546: LD_VAR 0 5
10550: PPUSH
10551: LD_INT 0
10553: PPUSH
10554: CALL_OW 49
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
10558: LD_VAR 0 2
10562: PPUSH
10563: LD_VAR 0 8
10567: PUSH
10568: LD_INT 1
10570: ARRAY
10571: PPUSH
10572: LD_VAR 0 8
10576: PUSH
10577: LD_INT 2
10579: ARRAY
10580: PPUSH
10581: CALL_OW 111
// wait ( 0 0$0.4 ) ;
10585: LD_INT 14
10587: PPUSH
10588: CALL_OW 67
// end ;
10592: GO 10538
10594: POP
10595: POP
// DRussianConvoy ;
10596: CALL 28621 0 0
// spawnedRussians := true ;
10600: LD_ADDR_EXP 19
10604: PUSH
10605: LD_INT 1
10607: ST_TO_ADDR
// RevealFogArea ( 1 , path ) ;
10608: LD_INT 1
10610: PPUSH
10611: LD_VAR 0 6
10615: PPUSH
10616: CALL_OW 332
// case spawn of 1 :
10620: LD_VAR 0 4
10624: PUSH
10625: LD_INT 1
10627: DOUBLE
10628: EQUAL
10629: IFTRUE 10633
10631: GO 10643
10633: POP
// RaiseSailEvent ( ERussianBaseC ) ; 2 :
10634: LD_INT 102
10636: PPUSH
10637: CALL_OW 427
10641: GO 10680
10643: LD_INT 2
10645: DOUBLE
10646: EQUAL
10647: IFTRUE 10651
10649: GO 10661
10651: POP
// RaiseSailEvent ( ERussianBaseW ) ; 3 :
10652: LD_INT 103
10654: PPUSH
10655: CALL_OW 427
10659: GO 10680
10661: LD_INT 3
10663: DOUBLE
10664: EQUAL
10665: IFTRUE 10669
10667: GO 10679
10669: POP
// RaiseSailEvent ( ERussianBaseE ) ; end ;
10670: LD_INT 104
10672: PPUSH
10673: CALL_OW 427
10677: GO 10680
10679: POP
// if Difficulty < 4 then
10680: LD_OWVAR 67
10684: PUSH
10685: LD_INT 4
10687: LESS
10688: IFFALSE 10692
// exit ;
10690: GO 10769
// RevealFogArea ( 1 , ruSpawnWestArea ) ;
10692: LD_INT 1
10694: PPUSH
10695: LD_INT 22
10697: PPUSH
10698: CALL_OW 332
// for i in ruForces2 union ruCommander2 do
10702: LD_ADDR_VAR 0 2
10706: PUSH
10707: LD_EXP 60
10711: PUSH
10712: LD_EXP 62
10716: UNION
10717: PUSH
10718: FOR_IN
10719: IFFALSE 10760
// begin PlaceUnitArea ( i , ruSpawnWestArea , false ) ;
10721: LD_VAR 0 2
10725: PPUSH
10726: LD_INT 22
10728: PPUSH
10729: LD_INT 0
10731: PPUSH
10732: CALL_OW 49
// ComAgressiveMove ( i , 54 , 85 ) ;
10736: LD_VAR 0 2
10740: PPUSH
10741: LD_INT 54
10743: PPUSH
10744: LD_INT 85
10746: PPUSH
10747: CALL_OW 114
// wait ( 0 0$0.8 ) ;
10751: LD_INT 28
10753: PPUSH
10754: CALL_OW 67
// end ;
10758: GO 10718
10760: POP
10761: POP
// RaiseSailEvent ( ERussianBaseW2 ) ;
10762: LD_INT 105
10764: PPUSH
10765: CALL_OW 427
// end ;
10769: LD_VAR 0 1
10773: RET
// export function RussianBase ( group , option ) ; begin
10774: LD_INT 0
10776: PPUSH
// case option of 1 :
10777: LD_VAR 0 2
10781: PUSH
10782: LD_INT 1
10784: DOUBLE
10785: EQUAL
10786: IFTRUE 10790
10788: GO 11246
10790: POP
// begin ruBaseArea := ruBaseCenterArea ;
10791: LD_ADDR_EXP 66
10795: PUSH
10796: LD_INT 26
10798: ST_TO_ADDR
// ruCratesArea := ruBaseCenterArea ;
10799: LD_ADDR_EXP 72
10803: PUSH
10804: LD_INT 26
10806: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
10807: LD_ADDR_EXP 76
10811: PUSH
10812: LD_INT 0
10814: PUSH
10815: LD_INT 104
10817: PUSH
10818: LD_INT 110
10820: PUSH
10821: LD_INT 5
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: PUSH
10830: LD_INT 4
10832: PUSH
10833: LD_INT 98
10835: PUSH
10836: LD_INT 90
10838: PUSH
10839: LD_INT 3
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: PUSH
10848: LD_INT 29
10850: PUSH
10851: LD_INT 103
10853: PUSH
10854: LD_INT 114
10856: PUSH
10857: LD_INT 2
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: PUSH
10866: LD_INT 30
10868: PUSH
10869: LD_INT 99
10871: PUSH
10872: LD_INT 114
10874: PUSH
10875: LD_INT 3
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: PUSH
10884: LD_INT 28
10886: PUSH
10887: LD_INT 100
10889: PUSH
10890: LD_INT 112
10892: PUSH
10893: LD_INT 1
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: PUSH
10902: LD_INT 2
10904: PUSH
10905: LD_INT 92
10907: PUSH
10908: LD_INT 101
10910: PUSH
10911: LD_INT 0
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: PUSH
10920: LD_INT 26
10922: PUSH
10923: LD_INT 97
10925: PUSH
10926: LD_INT 116
10928: PUSH
10929: LD_INT 5
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 17
10940: PUSH
10941: LD_INT 96
10943: PUSH
10944: LD_INT 101
10946: PUSH
10947: LD_INT 4
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: PUSH
10956: LD_INT 18
10958: PUSH
10959: LD_INT 88
10961: PUSH
10962: LD_INT 97
10964: PUSH
10965: LD_INT 2
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: PUSH
10974: LD_INT 26
10976: PUSH
10977: LD_INT 106
10979: PUSH
10980: LD_INT 92
10982: PUSH
10983: LD_INT 2
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: PUSH
10992: LD_INT 6
10994: PUSH
10995: LD_INT 93
10997: PUSH
10998: LD_INT 110
11000: PUSH
11001: LD_INT 0
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: PUSH
11010: LD_INT 21
11012: PUSH
11013: LD_INT 89
11015: PUSH
11016: LD_INT 101
11018: PUSH
11019: LD_INT 1
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: PUSH
11028: LD_INT 16
11030: PUSH
11031: LD_INT 95
11033: PUSH
11034: LD_INT 104
11036: PUSH
11037: LD_INT 4
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: PUSH
11046: LD_INT 24
11048: PUSH
11049: LD_INT 92
11051: PUSH
11052: LD_INT 105
11054: PUSH
11055: LD_INT 0
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 33
11066: PUSH
11067: LD_INT 88
11069: PUSH
11070: LD_INT 89
11072: PUSH
11073: LD_INT 2
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: PUSH
11082: LD_INT 33
11084: PUSH
11085: LD_INT 86
11087: PUSH
11088: LD_INT 90
11090: PUSH
11091: LD_INT 2
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: PUSH
11100: LD_INT 33
11102: PUSH
11103: LD_INT 85
11105: PUSH
11106: LD_INT 99
11108: PUSH
11109: LD_INT 2
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: PUSH
11118: LD_INT 33
11120: PUSH
11121: LD_INT 85
11123: PUSH
11124: LD_INT 107
11126: PUSH
11127: LD_INT 1
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: PUSH
11136: LD_INT 33
11138: PUSH
11139: LD_INT 105
11141: PUSH
11142: LD_INT 99
11144: PUSH
11145: LD_INT 1
11147: PUSH
11148: EMPTY
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: PUSH
11154: LD_INT 33
11156: PUSH
11157: LD_INT 102
11159: PUSH
11160: LD_INT 92
11162: PUSH
11163: LD_INT 3
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: PUSH
11172: LD_INT 33
11174: PUSH
11175: LD_INT 105
11177: PUSH
11178: LD_INT 92
11180: PUSH
11181: LD_INT 2
11183: PUSH
11184: EMPTY
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: ST_TO_ADDR
// ruHealPoint := [ 98 , 107 ] ;
11213: LD_ADDR_EXP 74
11217: PUSH
11218: LD_INT 98
11220: PUSH
11221: LD_INT 107
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: ST_TO_ADDR
// ruParkingArea := ruParkingCenterArea ;
11228: LD_ADDR_EXP 82
11232: PUSH
11233: LD_INT 30
11235: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnCenterArea ;
11236: LD_ADDR_EXP 84
11240: PUSH
11241: LD_INT 36
11243: ST_TO_ADDR
// end ; 2 :
11244: GO 12270
11246: LD_INT 2
11248: DOUBLE
11249: EQUAL
11250: IFTRUE 11254
11252: GO 11748
11254: POP
// begin ruBaseArea := ruBaseWestArea ;
11255: LD_ADDR_EXP 66
11259: PUSH
11260: LD_INT 28
11262: ST_TO_ADDR
// ruCratesArea := ruBaseWestArea ;
11263: LD_ADDR_EXP 72
11267: PUSH
11268: LD_INT 28
11270: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
11271: LD_ADDR_EXP 76
11275: PUSH
11276: LD_INT 0
11278: PUSH
11279: LD_INT 49
11281: PUSH
11282: LD_INT 74
11284: PUSH
11285: LD_INT 3
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: PUSH
11294: LD_INT 4
11296: PUSH
11297: LD_INT 73
11299: PUSH
11300: LD_INT 88
11302: PUSH
11303: LD_INT 5
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: PUSH
11312: LD_INT 4
11314: PUSH
11315: LD_INT 56
11317: PUSH
11318: LD_INT 62
11320: PUSH
11321: LD_INT 3
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: PUSH
11330: LD_INT 29
11332: PUSH
11333: LD_INT 43
11335: PUSH
11336: LD_INT 68
11338: PUSH
11339: LD_INT 2
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: PUSH
11348: LD_INT 30
11350: PUSH
11351: LD_INT 43
11353: PUSH
11354: LD_INT 79
11356: PUSH
11357: LD_INT 5
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: PUSH
11366: LD_INT 28
11368: PUSH
11369: LD_INT 60
11371: PUSH
11372: LD_INT 75
11374: PUSH
11375: LD_INT 1
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: PUSH
11384: LD_INT 2
11386: PUSH
11387: LD_INT 50
11389: PUSH
11390: LD_INT 87
11392: PUSH
11393: LD_INT 1
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 26
11404: PUSH
11405: LD_INT 45
11407: PUSH
11408: LD_INT 67
11410: PUSH
11411: LD_INT 2
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: PUSH
11420: LD_INT 17
11422: PUSH
11423: LD_INT 47
11425: PUSH
11426: LD_INT 84
11428: PUSH
11429: LD_INT 2
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: PUSH
11438: LD_INT 18
11440: PUSH
11441: LD_INT 46
11443: PUSH
11444: LD_INT 87
11446: PUSH
11447: LD_INT 1
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: PUSH
11456: LD_INT 26
11458: PUSH
11459: LD_INT 41
11461: PUSH
11462: LD_INT 64
11464: PUSH
11465: LD_INT 5
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: PUSH
11474: LD_INT 6
11476: PUSH
11477: LD_INT 42
11479: PUSH
11480: LD_INT 74
11482: PUSH
11483: LD_INT 1
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: PUSH
11492: LD_INT 21
11494: PUSH
11495: LD_INT 54
11497: PUSH
11498: LD_INT 91
11500: PUSH
11501: LD_INT 5
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 16
11512: PUSH
11513: LD_INT 50
11515: PUSH
11516: LD_INT 83
11518: PUSH
11519: LD_INT 3
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 24
11530: PUSH
11531: LD_INT 50
11533: PUSH
11534: LD_INT 90
11536: PUSH
11537: LD_INT 0
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: PUSH
11546: LD_INT 33
11548: PUSH
11549: LD_INT 51
11551: PUSH
11552: LD_INT 61
11554: PUSH
11555: LD_INT 3
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: PUSH
11564: LD_INT 33
11566: PUSH
11567: LD_INT 42
11569: PUSH
11570: LD_INT 60
11572: PUSH
11573: LD_INT 3
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: PUSH
11582: LD_INT 33
11584: PUSH
11585: LD_INT 36
11587: PUSH
11588: LD_INT 58
11590: PUSH
11591: LD_INT 3
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: PUSH
11600: LD_INT 33
11602: PUSH
11603: LD_INT 39
11605: PUSH
11606: LD_INT 59
11608: PUSH
11609: LD_INT 3
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: PUSH
11618: LD_INT 33
11620: PUSH
11621: LD_INT 61
11623: PUSH
11624: LD_INT 64
11626: PUSH
11627: LD_INT 3
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: PUSH
11636: LD_INT 33
11638: PUSH
11639: LD_INT 63
11641: PUSH
11642: LD_INT 90
11644: PUSH
11645: LD_INT 5
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: PUSH
11654: LD_INT 33
11656: PUSH
11657: LD_INT 64
11659: PUSH
11660: LD_INT 88
11662: PUSH
11663: LD_INT 5
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: PUSH
11672: LD_INT 33
11674: PUSH
11675: LD_INT 72
11677: PUSH
11678: LD_INT 82
11680: PUSH
11681: LD_INT 5
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
11715: LD_ADDR_EXP 74
11719: PUSH
11720: LD_INT 45
11722: PUSH
11723: LD_INT 75
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: ST_TO_ADDR
// ruParkingArea := ruParkingWestArea ;
11730: LD_ADDR_EXP 82
11734: PUSH
11735: LD_INT 31
11737: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnWestArea ;
11738: LD_ADDR_EXP 84
11742: PUSH
11743: LD_INT 37
11745: ST_TO_ADDR
// end ; 3 :
11746: GO 12270
11748: LD_INT 3
11750: DOUBLE
11751: EQUAL
11752: IFTRUE 11756
11754: GO 12269
11756: POP
// begin ruBaseArea := ruBaseEastArea ;
11757: LD_ADDR_EXP 66
11761: PUSH
11762: LD_INT 27
11764: ST_TO_ADDR
// ruCratesArea := ruBaseEastArea ;
11765: LD_ADDR_EXP 72
11769: PUSH
11770: LD_INT 27
11772: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] , [ b_turret , 158 , 65 , 3 ] , [ b_turret , 144 , 53 , 2 ] , [ b_turret , 150 , 81 , 1 ] ] ;
11773: LD_ADDR_EXP 76
11777: PUSH
11778: LD_INT 0
11780: PUSH
11781: LD_INT 152
11783: PUSH
11784: LD_INT 72
11786: PUSH
11787: LD_INT 4
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: PUSH
11796: LD_INT 4
11798: PUSH
11799: LD_INT 139
11801: PUSH
11802: LD_INT 69
11804: PUSH
11805: LD_INT 1
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: PUSH
11814: LD_INT 4
11816: PUSH
11817: LD_INT 142
11819: PUSH
11820: LD_INT 56
11822: PUSH
11823: LD_INT 2
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: PUSH
11832: LD_INT 29
11834: PUSH
11835: LD_INT 152
11837: PUSH
11838: LD_INT 85
11840: PUSH
11841: LD_INT 3
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: PUSH
11850: LD_INT 30
11852: PUSH
11853: LD_INT 156
11855: PUSH
11856: LD_INT 92
11858: PUSH
11859: LD_INT 3
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: PUSH
11868: LD_INT 28
11870: PUSH
11871: LD_INT 157
11873: PUSH
11874: LD_INT 96
11876: PUSH
11877: LD_INT 4
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 2
11888: PUSH
11889: LD_INT 161
11891: PUSH
11892: LD_INT 74
11894: PUSH
11895: LD_INT 5
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: PUSH
11904: LD_INT 21
11906: PUSH
11907: LD_INT 157
11909: PUSH
11910: LD_INT 74
11912: PUSH
11913: LD_INT 1
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 16
11924: PUSH
11925: LD_INT 161
11927: PUSH
11928: LD_INT 77
11930: PUSH
11931: LD_INT 0
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 24
11942: PUSH
11943: LD_INT 165
11945: PUSH
11946: LD_INT 78
11948: PUSH
11949: LD_INT 5
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: PUSH
11958: LD_INT 17
11960: PUSH
11961: LD_INT 164
11963: PUSH
11964: LD_INT 74
11966: PUSH
11967: LD_INT 4
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: PUSH
11976: LD_INT 6
11978: PUSH
11979: LD_INT 164
11981: PUSH
11982: LD_INT 95
11984: PUSH
11985: LD_INT 5
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: PUSH
11994: LD_INT 18
11996: PUSH
11997: LD_INT 161
11999: PUSH
12000: LD_INT 70
12002: PUSH
12003: LD_INT 3
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: PUSH
12012: LD_INT 26
12014: PUSH
12015: LD_INT 155
12017: PUSH
12018: LD_INT 87
12020: PUSH
12021: LD_INT 0
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: PUSH
12030: LD_INT 26
12032: PUSH
12033: LD_INT 159
12035: PUSH
12036: LD_INT 95
12038: PUSH
12039: LD_INT 3
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: PUSH
12048: LD_INT 26
12050: PUSH
12051: LD_INT 167
12053: PUSH
12054: LD_INT 98
12056: PUSH
12057: LD_INT 1
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: PUSH
12066: LD_INT 33
12068: PUSH
12069: LD_INT 152
12071: PUSH
12072: LD_INT 89
12074: PUSH
12075: LD_INT 1
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: PUSH
12084: LD_INT 33
12086: PUSH
12087: LD_INT 134
12089: PUSH
12090: LD_INT 61
12092: PUSH
12093: LD_INT 2
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 33
12104: PUSH
12105: LD_INT 156
12107: PUSH
12108: LD_INT 62
12110: PUSH
12111: LD_INT 3
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: PUSH
12120: LD_INT 33
12122: PUSH
12123: LD_INT 171
12125: PUSH
12126: LD_INT 97
12128: PUSH
12129: LD_INT 5
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: PUSH
12138: LD_INT 33
12140: PUSH
12141: LD_INT 169
12143: PUSH
12144: LD_INT 103
12146: PUSH
12147: LD_INT 5
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: PUSH
12156: LD_INT 33
12158: PUSH
12159: LD_INT 158
12161: PUSH
12162: LD_INT 65
12164: PUSH
12165: LD_INT 3
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: PUSH
12174: LD_INT 33
12176: PUSH
12177: LD_INT 144
12179: PUSH
12180: LD_INT 53
12182: PUSH
12183: LD_INT 2
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: PUSH
12192: LD_INT 33
12194: PUSH
12195: LD_INT 150
12197: PUSH
12198: LD_INT 81
12200: PUSH
12201: LD_INT 1
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: ST_TO_ADDR
// ruHealPoint := [ 145 , 71 ] ;
12236: LD_ADDR_EXP 74
12240: PUSH
12241: LD_INT 145
12243: PUSH
12244: LD_INT 71
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: ST_TO_ADDR
// ruParkingArea := ruParkingEastArea ;
12251: LD_ADDR_EXP 82
12255: PUSH
12256: LD_INT 29
12258: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnEastArea ;
12259: LD_ADDR_EXP 84
12263: PUSH
12264: LD_INT 35
12266: ST_TO_ADDR
// end ; end ;
12267: GO 12270
12269: POP
// ruScriptActive := true ;
12270: LD_ADDR_EXP 14
12274: PUSH
12275: LD_INT 1
12277: ST_TO_ADDR
// end ;
12278: LD_VAR 0 3
12282: RET
// export function RussianBase2 ( group , option ) ; begin
12283: LD_INT 0
12285: PPUSH
// case option of 1 :
12286: LD_VAR 0 2
12290: PUSH
12291: LD_INT 1
12293: DOUBLE
12294: EQUAL
12295: IFTRUE 12299
12297: GO 12755
12299: POP
// begin ruBaseArea2 := ruBaseCenterArea ;
12300: LD_ADDR_EXP 67
12304: PUSH
12305: LD_INT 26
12307: ST_TO_ADDR
// ruCratesArea2 := ruBaseCenterArea ;
12308: LD_ADDR_EXP 73
12312: PUSH
12313: LD_INT 26
12315: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
12316: LD_ADDR_EXP 77
12320: PUSH
12321: LD_INT 0
12323: PUSH
12324: LD_INT 104
12326: PUSH
12327: LD_INT 110
12329: PUSH
12330: LD_INT 5
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: PUSH
12339: LD_INT 4
12341: PUSH
12342: LD_INT 98
12344: PUSH
12345: LD_INT 90
12347: PUSH
12348: LD_INT 3
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: PUSH
12357: LD_INT 29
12359: PUSH
12360: LD_INT 103
12362: PUSH
12363: LD_INT 114
12365: PUSH
12366: LD_INT 2
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: PUSH
12375: LD_INT 30
12377: PUSH
12378: LD_INT 99
12380: PUSH
12381: LD_INT 114
12383: PUSH
12384: LD_INT 3
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: PUSH
12393: LD_INT 28
12395: PUSH
12396: LD_INT 100
12398: PUSH
12399: LD_INT 112
12401: PUSH
12402: LD_INT 1
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: PUSH
12411: LD_INT 2
12413: PUSH
12414: LD_INT 92
12416: PUSH
12417: LD_INT 101
12419: PUSH
12420: LD_INT 0
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: PUSH
12429: LD_INT 26
12431: PUSH
12432: LD_INT 97
12434: PUSH
12435: LD_INT 116
12437: PUSH
12438: LD_INT 5
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: PUSH
12447: LD_INT 17
12449: PUSH
12450: LD_INT 96
12452: PUSH
12453: LD_INT 101
12455: PUSH
12456: LD_INT 4
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: PUSH
12465: LD_INT 18
12467: PUSH
12468: LD_INT 88
12470: PUSH
12471: LD_INT 97
12473: PUSH
12474: LD_INT 2
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: PUSH
12483: LD_INT 26
12485: PUSH
12486: LD_INT 106
12488: PUSH
12489: LD_INT 92
12491: PUSH
12492: LD_INT 2
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: PUSH
12501: LD_INT 6
12503: PUSH
12504: LD_INT 93
12506: PUSH
12507: LD_INT 110
12509: PUSH
12510: LD_INT 0
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: PUSH
12519: LD_INT 21
12521: PUSH
12522: LD_INT 89
12524: PUSH
12525: LD_INT 101
12527: PUSH
12528: LD_INT 1
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: PUSH
12537: LD_INT 16
12539: PUSH
12540: LD_INT 95
12542: PUSH
12543: LD_INT 104
12545: PUSH
12546: LD_INT 4
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: PUSH
12555: LD_INT 24
12557: PUSH
12558: LD_INT 92
12560: PUSH
12561: LD_INT 105
12563: PUSH
12564: LD_INT 0
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: PUSH
12573: LD_INT 33
12575: PUSH
12576: LD_INT 88
12578: PUSH
12579: LD_INT 89
12581: PUSH
12582: LD_INT 2
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: PUSH
12591: LD_INT 33
12593: PUSH
12594: LD_INT 86
12596: PUSH
12597: LD_INT 90
12599: PUSH
12600: LD_INT 2
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 33
12611: PUSH
12612: LD_INT 85
12614: PUSH
12615: LD_INT 99
12617: PUSH
12618: LD_INT 2
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: PUSH
12627: LD_INT 33
12629: PUSH
12630: LD_INT 85
12632: PUSH
12633: LD_INT 107
12635: PUSH
12636: LD_INT 1
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: PUSH
12645: LD_INT 33
12647: PUSH
12648: LD_INT 105
12650: PUSH
12651: LD_INT 99
12653: PUSH
12654: LD_INT 1
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: PUSH
12663: LD_INT 33
12665: PUSH
12666: LD_INT 102
12668: PUSH
12669: LD_INT 92
12671: PUSH
12672: LD_INT 3
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: PUSH
12681: LD_INT 33
12683: PUSH
12684: LD_INT 105
12686: PUSH
12687: LD_INT 92
12689: PUSH
12690: LD_INT 2
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: ST_TO_ADDR
// ruHealPoint2 := [ 98 , 107 ] ;
12722: LD_ADDR_EXP 75
12726: PUSH
12727: LD_INT 98
12729: PUSH
12730: LD_INT 107
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: ST_TO_ADDR
// ruParkingArea2 := ruParkingCenterArea ;
12737: LD_ADDR_EXP 83
12741: PUSH
12742: LD_INT 30
12744: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnCenterArea ;
12745: LD_ADDR_EXP 85
12749: PUSH
12750: LD_INT 36
12752: ST_TO_ADDR
// end ; 2 :
12753: GO 13722
12755: LD_INT 2
12757: DOUBLE
12758: EQUAL
12759: IFTRUE 12763
12761: GO 13257
12763: POP
// begin ruBaseArea2 := ruBaseWestArea ;
12764: LD_ADDR_EXP 67
12768: PUSH
12769: LD_INT 28
12771: ST_TO_ADDR
// ruCratesArea2 := ruBaseWestArea ;
12772: LD_ADDR_EXP 73
12776: PUSH
12777: LD_INT 28
12779: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
12780: LD_ADDR_EXP 77
12784: PUSH
12785: LD_INT 0
12787: PUSH
12788: LD_INT 49
12790: PUSH
12791: LD_INT 74
12793: PUSH
12794: LD_INT 3
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: PUSH
12803: LD_INT 4
12805: PUSH
12806: LD_INT 73
12808: PUSH
12809: LD_INT 88
12811: PUSH
12812: LD_INT 5
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: PUSH
12821: LD_INT 4
12823: PUSH
12824: LD_INT 56
12826: PUSH
12827: LD_INT 62
12829: PUSH
12830: LD_INT 3
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: PUSH
12839: LD_INT 29
12841: PUSH
12842: LD_INT 43
12844: PUSH
12845: LD_INT 68
12847: PUSH
12848: LD_INT 2
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: PUSH
12857: LD_INT 30
12859: PUSH
12860: LD_INT 43
12862: PUSH
12863: LD_INT 79
12865: PUSH
12866: LD_INT 5
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: PUSH
12875: LD_INT 28
12877: PUSH
12878: LD_INT 60
12880: PUSH
12881: LD_INT 75
12883: PUSH
12884: LD_INT 1
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: PUSH
12893: LD_INT 2
12895: PUSH
12896: LD_INT 50
12898: PUSH
12899: LD_INT 87
12901: PUSH
12902: LD_INT 1
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: PUSH
12911: LD_INT 26
12913: PUSH
12914: LD_INT 45
12916: PUSH
12917: LD_INT 67
12919: PUSH
12920: LD_INT 2
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: PUSH
12929: LD_INT 17
12931: PUSH
12932: LD_INT 47
12934: PUSH
12935: LD_INT 84
12937: PUSH
12938: LD_INT 2
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: PUSH
12947: LD_INT 18
12949: PUSH
12950: LD_INT 46
12952: PUSH
12953: LD_INT 87
12955: PUSH
12956: LD_INT 1
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: PUSH
12965: LD_INT 26
12967: PUSH
12968: LD_INT 41
12970: PUSH
12971: LD_INT 64
12973: PUSH
12974: LD_INT 5
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: PUSH
12983: LD_INT 6
12985: PUSH
12986: LD_INT 42
12988: PUSH
12989: LD_INT 74
12991: PUSH
12992: LD_INT 1
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: PUSH
13001: LD_INT 21
13003: PUSH
13004: LD_INT 54
13006: PUSH
13007: LD_INT 91
13009: PUSH
13010: LD_INT 5
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: PUSH
13019: LD_INT 16
13021: PUSH
13022: LD_INT 50
13024: PUSH
13025: LD_INT 83
13027: PUSH
13028: LD_INT 3
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: PUSH
13037: LD_INT 24
13039: PUSH
13040: LD_INT 50
13042: PUSH
13043: LD_INT 90
13045: PUSH
13046: LD_INT 0
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: PUSH
13055: LD_INT 33
13057: PUSH
13058: LD_INT 51
13060: PUSH
13061: LD_INT 61
13063: PUSH
13064: LD_INT 3
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: PUSH
13073: LD_INT 33
13075: PUSH
13076: LD_INT 42
13078: PUSH
13079: LD_INT 60
13081: PUSH
13082: LD_INT 3
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: PUSH
13091: LD_INT 33
13093: PUSH
13094: LD_INT 36
13096: PUSH
13097: LD_INT 58
13099: PUSH
13100: LD_INT 3
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: PUSH
13109: LD_INT 33
13111: PUSH
13112: LD_INT 39
13114: PUSH
13115: LD_INT 59
13117: PUSH
13118: LD_INT 3
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: PUSH
13127: LD_INT 33
13129: PUSH
13130: LD_INT 61
13132: PUSH
13133: LD_INT 64
13135: PUSH
13136: LD_INT 3
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: PUSH
13145: LD_INT 33
13147: PUSH
13148: LD_INT 63
13150: PUSH
13151: LD_INT 90
13153: PUSH
13154: LD_INT 5
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: PUSH
13163: LD_INT 33
13165: PUSH
13166: LD_INT 64
13168: PUSH
13169: LD_INT 88
13171: PUSH
13172: LD_INT 5
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: PUSH
13181: LD_INT 33
13183: PUSH
13184: LD_INT 72
13186: PUSH
13187: LD_INT 82
13189: PUSH
13190: LD_INT 5
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
13224: LD_ADDR_EXP 74
13228: PUSH
13229: LD_INT 45
13231: PUSH
13232: LD_INT 75
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: ST_TO_ADDR
// ruParkingArea2 := ruParkingWestArea ;
13239: LD_ADDR_EXP 83
13243: PUSH
13244: LD_INT 31
13246: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnWestArea ;
13247: LD_ADDR_EXP 85
13251: PUSH
13252: LD_INT 37
13254: ST_TO_ADDR
// end ; 3 :
13255: GO 13722
13257: LD_INT 3
13259: DOUBLE
13260: EQUAL
13261: IFTRUE 13265
13263: GO 13721
13265: POP
// begin ruBaseArea2 := ruBaseEastArea ;
13266: LD_ADDR_EXP 67
13270: PUSH
13271: LD_INT 27
13273: ST_TO_ADDR
// ruCratesArea2 := ruBaseEastArea ;
13274: LD_ADDR_EXP 73
13278: PUSH
13279: LD_INT 27
13281: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] ] ;
13282: LD_ADDR_EXP 77
13286: PUSH
13287: LD_INT 0
13289: PUSH
13290: LD_INT 152
13292: PUSH
13293: LD_INT 72
13295: PUSH
13296: LD_INT 4
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: PUSH
13305: LD_INT 4
13307: PUSH
13308: LD_INT 139
13310: PUSH
13311: LD_INT 69
13313: PUSH
13314: LD_INT 1
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: PUSH
13323: LD_INT 4
13325: PUSH
13326: LD_INT 142
13328: PUSH
13329: LD_INT 56
13331: PUSH
13332: LD_INT 2
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: PUSH
13341: LD_INT 29
13343: PUSH
13344: LD_INT 152
13346: PUSH
13347: LD_INT 85
13349: PUSH
13350: LD_INT 3
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 30
13361: PUSH
13362: LD_INT 156
13364: PUSH
13365: LD_INT 92
13367: PUSH
13368: LD_INT 3
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: PUSH
13377: LD_INT 28
13379: PUSH
13380: LD_INT 157
13382: PUSH
13383: LD_INT 96
13385: PUSH
13386: LD_INT 4
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 2
13397: PUSH
13398: LD_INT 161
13400: PUSH
13401: LD_INT 74
13403: PUSH
13404: LD_INT 5
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 21
13415: PUSH
13416: LD_INT 157
13418: PUSH
13419: LD_INT 74
13421: PUSH
13422: LD_INT 1
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: PUSH
13431: LD_INT 16
13433: PUSH
13434: LD_INT 161
13436: PUSH
13437: LD_INT 77
13439: PUSH
13440: LD_INT 0
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: PUSH
13449: LD_INT 24
13451: PUSH
13452: LD_INT 165
13454: PUSH
13455: LD_INT 78
13457: PUSH
13458: LD_INT 5
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: PUSH
13467: LD_INT 17
13469: PUSH
13470: LD_INT 164
13472: PUSH
13473: LD_INT 74
13475: PUSH
13476: LD_INT 4
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: PUSH
13485: LD_INT 6
13487: PUSH
13488: LD_INT 164
13490: PUSH
13491: LD_INT 95
13493: PUSH
13494: LD_INT 5
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: PUSH
13503: LD_INT 18
13505: PUSH
13506: LD_INT 161
13508: PUSH
13509: LD_INT 70
13511: PUSH
13512: LD_INT 3
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 26
13523: PUSH
13524: LD_INT 155
13526: PUSH
13527: LD_INT 87
13529: PUSH
13530: LD_INT 0
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: PUSH
13539: LD_INT 26
13541: PUSH
13542: LD_INT 159
13544: PUSH
13545: LD_INT 95
13547: PUSH
13548: LD_INT 3
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: PUSH
13557: LD_INT 26
13559: PUSH
13560: LD_INT 167
13562: PUSH
13563: LD_INT 98
13565: PUSH
13566: LD_INT 1
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: PUSH
13575: LD_INT 33
13577: PUSH
13578: LD_INT 152
13580: PUSH
13581: LD_INT 89
13583: PUSH
13584: LD_INT 1
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: PUSH
13593: LD_INT 33
13595: PUSH
13596: LD_INT 134
13598: PUSH
13599: LD_INT 61
13601: PUSH
13602: LD_INT 2
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: PUSH
13611: LD_INT 33
13613: PUSH
13614: LD_INT 156
13616: PUSH
13617: LD_INT 62
13619: PUSH
13620: LD_INT 3
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: PUSH
13629: LD_INT 33
13631: PUSH
13632: LD_INT 171
13634: PUSH
13635: LD_INT 97
13637: PUSH
13638: LD_INT 5
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: PUSH
13647: LD_INT 33
13649: PUSH
13650: LD_INT 169
13652: PUSH
13653: LD_INT 103
13655: PUSH
13656: LD_INT 5
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: ST_TO_ADDR
// ruHealPoint2 := [ 145 , 71 ] ;
13688: LD_ADDR_EXP 75
13692: PUSH
13693: LD_INT 145
13695: PUSH
13696: LD_INT 71
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: ST_TO_ADDR
// ruParkingArea2 := ruParkingEastArea ;
13703: LD_ADDR_EXP 83
13707: PUSH
13708: LD_INT 29
13710: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnEastArea ;
13711: LD_ADDR_EXP 85
13715: PUSH
13716: LD_INT 35
13718: ST_TO_ADDR
// end ; end ;
13719: GO 13722
13721: POP
// ruScriptActive2 := true ;
13722: LD_ADDR_EXP 15
13726: PUSH
13727: LD_INT 1
13729: ST_TO_ADDR
// end ;
13730: LD_VAR 0 3
13734: RET
// every 0 0$2 trigger ruScriptActive and Count ( ruForces ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
13735: LD_EXP 14
13739: PUSH
13740: LD_EXP 59
13744: PPUSH
13745: CALL 56099 0 1
13749: AND
13750: IFFALSE 16332
13752: GO 13754
13754: DISABLE
13755: LD_INT 0
13757: PPUSH
13758: PPUSH
13759: PPUSH
13760: PPUSH
13761: PPUSH
13762: PPUSH
13763: PPUSH
13764: PPUSH
13765: PPUSH
13766: PPUSH
13767: PPUSH
13768: PPUSH
13769: PPUSH
13770: PPUSH
13771: PPUSH
13772: PPUSH
// begin enable ;
13773: ENABLE
// if ruTech then
13774: LD_EXP 65
13778: IFFALSE 13932
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
13780: LD_ADDR_VAR 0 4
13784: PUSH
13785: LD_INT 22
13787: PUSH
13788: LD_INT 3
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: PUSH
13795: LD_INT 50
13797: PUSH
13798: EMPTY
13799: LIST
13800: PUSH
13801: LD_INT 2
13803: PUSH
13804: LD_INT 30
13806: PUSH
13807: LD_INT 6
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PUSH
13814: LD_INT 30
13816: PUSH
13817: LD_INT 7
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 30
13826: PUSH
13827: LD_INT 8
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: LIST
13844: PPUSH
13845: CALL_OW 69
13849: ST_TO_ADDR
// if lab then
13850: LD_VAR 0 4
13854: IFFALSE 13932
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
13856: LD_VAR 0 4
13860: PUSH
13861: LD_INT 1
13863: ARRAY
13864: PPUSH
13865: CALL_OW 461
13869: PUSH
13870: LD_INT 2
13872: EQUAL
13873: IFFALSE 13932
// begin for i in ruTech do
13875: LD_ADDR_VAR 0 1
13879: PUSH
13880: LD_EXP 65
13884: PUSH
13885: FOR_IN
13886: IFFALSE 13930
// if CanBeResearched ( lab [ 1 ] , i ) then
13888: LD_VAR 0 4
13892: PUSH
13893: LD_INT 1
13895: ARRAY
13896: PPUSH
13897: LD_VAR 0 1
13901: PPUSH
13902: CALL_OW 430
13906: IFFALSE 13928
// begin ComResearch ( lab [ 1 ] , i ) ;
13908: LD_VAR 0 4
13912: PUSH
13913: LD_INT 1
13915: ARRAY
13916: PPUSH
13917: LD_VAR 0 1
13921: PPUSH
13922: CALL_OW 124
// break ;
13926: GO 13930
// end ;
13928: GO 13885
13930: POP
13931: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
13932: LD_ADDR_VAR 0 14
13936: PUSH
13937: LD_EXP 66
13941: PPUSH
13942: LD_INT 22
13944: PUSH
13945: LD_INT 3
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: PUSH
13952: LD_INT 30
13954: PUSH
13955: LD_INT 3
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: PUSH
13962: LD_INT 50
13964: PUSH
13965: EMPTY
13966: LIST
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: LIST
13972: PPUSH
13973: CALL_OW 70
13977: ST_TO_ADDR
// if fac then
13978: LD_VAR 0 14
13982: IFFALSE 14577
// begin if UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
13984: LD_EXP 63
13988: PPUSH
13989: LD_INT 3
13991: PUSH
13992: LD_INT 60
13994: PUSH
13995: EMPTY
13996: LIST
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: PUSH
14002: LD_INT 3
14004: PUSH
14005: LD_INT 25
14007: PUSH
14008: LD_INT 3
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: PPUSH
14023: CALL_OW 72
14027: IFFALSE 14168
// begin for i in UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
14029: LD_ADDR_VAR 0 1
14033: PUSH
14034: LD_EXP 63
14038: PPUSH
14039: LD_INT 3
14041: PUSH
14042: LD_INT 60
14044: PUSH
14045: EMPTY
14046: LIST
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PUSH
14052: LD_INT 3
14054: PUSH
14055: LD_INT 25
14057: PUSH
14058: LD_INT 3
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PPUSH
14073: CALL_OW 72
14077: PUSH
14078: FOR_IN
14079: IFFALSE 14166
// begin SetTag ( i , tMech ) ;
14081: LD_VAR 0 1
14085: PPUSH
14086: LD_INT 7
14088: PPUSH
14089: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
14093: LD_VAR 0 1
14097: PPUSH
14098: CALL_OW 310
14102: PUSH
14103: LD_VAR 0 1
14107: PPUSH
14108: CALL_OW 310
14112: PUSH
14113: LD_VAR 0 14
14117: PUSH
14118: LD_INT 1
14120: ARRAY
14121: NONEQUAL
14122: AND
14123: IFFALSE 14134
// ComExitBuilding ( i ) ;
14125: LD_VAR 0 1
14129: PPUSH
14130: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
14134: LD_VAR 0 1
14138: PPUSH
14139: LD_VAR 0 14
14143: PUSH
14144: LD_INT 1
14146: ARRAY
14147: PPUSH
14148: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
14152: LD_VAR 0 1
14156: PPUSH
14157: LD_INT 3
14159: PPUSH
14160: CALL_OW 183
// end ;
14164: GO 14078
14166: POP
14167: POP
// end ; if UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
14168: LD_EXP 63
14172: PPUSH
14173: LD_INT 25
14175: PUSH
14176: LD_INT 3
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: PUSH
14183: LD_INT 3
14185: PUSH
14186: LD_INT 54
14188: PUSH
14189: EMPTY
14190: LIST
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PUSH
14196: LD_INT 120
14198: PUSH
14199: LD_INT 7
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: PUSH
14206: LD_INT 50
14208: PUSH
14209: EMPTY
14210: LIST
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: PPUSH
14218: CALL_OW 72
14222: IFFALSE 14309
// begin for i in UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
14224: LD_ADDR_VAR 0 1
14228: PUSH
14229: LD_EXP 63
14233: PPUSH
14234: LD_INT 25
14236: PUSH
14237: LD_INT 3
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 3
14246: PUSH
14247: LD_INT 54
14249: PUSH
14250: EMPTY
14251: LIST
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: LD_INT 120
14259: PUSH
14260: LD_INT 7
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PUSH
14267: LD_INT 50
14269: PUSH
14270: EMPTY
14271: LIST
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: PPUSH
14279: CALL_OW 72
14283: PUSH
14284: FOR_IN
14285: IFFALSE 14307
// ComEnterUnit ( i , fac [ 1 ] ) ;
14287: LD_VAR 0 1
14291: PPUSH
14292: LD_VAR 0 14
14296: PUSH
14297: LD_INT 1
14299: ARRAY
14300: PPUSH
14301: CALL_OW 120
14305: GO 14284
14307: POP
14308: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
14309: LD_VAR 0 14
14313: PUSH
14314: LD_INT 1
14316: ARRAY
14317: PPUSH
14318: CALL_OW 461
14322: PUSH
14323: LD_INT 2
14325: EQUAL
14326: IFFALSE 14577
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
14328: LD_ADDR_VAR 0 15
14332: PUSH
14333: LD_EXP 66
14337: PPUSH
14338: LD_INT 2
14340: PUSH
14341: LD_INT 30
14343: PUSH
14344: LD_INT 32
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PUSH
14351: LD_INT 30
14353: PUSH
14354: LD_INT 33
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: LIST
14365: PUSH
14366: LD_INT 35
14368: PUSH
14369: LD_INT 0
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PPUSH
14380: CALL_OW 70
14384: ST_TO_ADDR
// if emptyTowers then
14385: LD_VAR 0 15
14389: IFFALSE 14439
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea ) ;
14391: LD_ADDR_VAR 0 16
14395: PUSH
14396: LD_VAR 0 15
14400: PUSH
14401: LD_INT 1
14403: ARRAY
14404: PPUSH
14405: LD_EXP 66
14409: PPUSH
14410: CALL 63976 0 2
14414: ST_TO_ADDR
// if weapon then
14415: LD_VAR 0 16
14419: IFFALSE 14439
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
14421: LD_VAR 0 15
14425: PUSH
14426: LD_INT 1
14428: ARRAY
14429: PPUSH
14430: LD_VAR 0 16
14434: PPUSH
14435: CALL_OW 148
// end ; if ruConstructList then
14439: LD_EXP 70
14443: IFFALSE 14577
// if CanBeConstructed ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) then
14445: LD_VAR 0 14
14449: PUSH
14450: LD_INT 1
14452: ARRAY
14453: PPUSH
14454: LD_EXP 70
14458: PUSH
14459: LD_INT 1
14461: ARRAY
14462: PUSH
14463: LD_INT 1
14465: ARRAY
14466: PPUSH
14467: LD_EXP 70
14471: PUSH
14472: LD_INT 1
14474: ARRAY
14475: PUSH
14476: LD_INT 2
14478: ARRAY
14479: PPUSH
14480: LD_EXP 70
14484: PUSH
14485: LD_INT 1
14487: ARRAY
14488: PUSH
14489: LD_INT 3
14491: ARRAY
14492: PPUSH
14493: LD_EXP 70
14497: PUSH
14498: LD_INT 1
14500: ARRAY
14501: PUSH
14502: LD_INT 4
14504: ARRAY
14505: PPUSH
14506: CALL_OW 448
14510: IFFALSE 14577
// ComConstruct ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) ;
14512: LD_VAR 0 14
14516: PUSH
14517: LD_INT 1
14519: ARRAY
14520: PPUSH
14521: LD_EXP 70
14525: PUSH
14526: LD_INT 1
14528: ARRAY
14529: PUSH
14530: LD_INT 1
14532: ARRAY
14533: PPUSH
14534: LD_EXP 70
14538: PUSH
14539: LD_INT 1
14541: ARRAY
14542: PUSH
14543: LD_INT 2
14545: ARRAY
14546: PPUSH
14547: LD_EXP 70
14551: PUSH
14552: LD_INT 1
14554: ARRAY
14555: PUSH
14556: LD_INT 3
14558: ARRAY
14559: PPUSH
14560: LD_EXP 70
14564: PUSH
14565: LD_INT 1
14567: ARRAY
14568: PUSH
14569: LD_INT 4
14571: ARRAY
14572: PPUSH
14573: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14577: LD_ADDR_VAR 0 2
14581: PUSH
14582: LD_EXP 66
14586: PPUSH
14587: LD_INT 21
14589: PUSH
14590: LD_INT 3
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: PUSH
14597: LD_INT 3
14599: PUSH
14600: LD_INT 57
14602: PUSH
14603: EMPTY
14604: LIST
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: PUSH
14610: LD_INT 3
14612: PUSH
14613: LD_INT 24
14615: PUSH
14616: LD_INT 1000
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: LIST
14631: PPUSH
14632: CALL_OW 70
14636: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea ) ;
14637: LD_ADDR_VAR 0 8
14641: PUSH
14642: LD_EXP 72
14646: PPUSH
14647: CALL_OW 435
14651: ST_TO_ADDR
// sci := UnitFilter ( ruForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
14652: LD_ADDR_VAR 0 9
14656: PUSH
14657: LD_EXP 59
14661: PPUSH
14662: LD_INT 25
14664: PUSH
14665: LD_INT 4
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: PUSH
14672: LD_INT 50
14674: PUSH
14675: EMPTY
14676: LIST
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PPUSH
14682: CALL_OW 72
14686: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
14687: LD_ADDR_VAR 0 4
14691: PUSH
14692: LD_EXP 66
14696: PPUSH
14697: LD_INT 2
14699: PUSH
14700: LD_INT 30
14702: PUSH
14703: LD_INT 6
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PUSH
14710: LD_INT 30
14712: PUSH
14713: LD_INT 7
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PUSH
14720: LD_INT 30
14722: PUSH
14723: LD_INT 8
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: PPUSH
14736: CALL_OW 70
14740: ST_TO_ADDR
// if sci then
14741: LD_VAR 0 9
14745: IFFALSE 14906
// begin hurtUnits := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_tag , tHeal ] ] ) ;
14747: LD_ADDR_VAR 0 11
14751: PUSH
14752: LD_EXP 59
14756: PPUSH
14757: LD_INT 95
14759: PUSH
14760: LD_EXP 66
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: LD_INT 120
14771: PUSH
14772: LD_INT 1
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PPUSH
14783: CALL_OW 72
14787: ST_TO_ADDR
// if hurtUnits then
14788: LD_VAR 0 11
14792: IFFALSE 14853
// begin for i in sci do
14794: LD_ADDR_VAR 0 1
14798: PUSH
14799: LD_VAR 0 9
14803: PUSH
14804: FOR_IN
14805: IFFALSE 14849
// if IsInUnit ( i ) then
14807: LD_VAR 0 1
14811: PPUSH
14812: CALL_OW 310
14816: IFFALSE 14829
// ComExitBuilding ( i ) else
14818: LD_VAR 0 1
14822: PPUSH
14823: CALL_OW 122
14827: GO 14847
// ComHeal ( i , hurtUnits [ 1 ] ) ;
14829: LD_VAR 0 1
14833: PPUSH
14834: LD_VAR 0 11
14838: PUSH
14839: LD_INT 1
14841: ARRAY
14842: PPUSH
14843: CALL_OW 128
14847: GO 14804
14849: POP
14850: POP
// end else
14851: GO 14906
// if lab then
14853: LD_VAR 0 4
14857: IFFALSE 14906
// begin for i in sci do
14859: LD_ADDR_VAR 0 1
14863: PUSH
14864: LD_VAR 0 9
14868: PUSH
14869: FOR_IN
14870: IFFALSE 14904
// if not IsInUnit ( i ) then
14872: LD_VAR 0 1
14876: PPUSH
14877: CALL_OW 310
14881: NOT
14882: IFFALSE 14902
// ComEnterUnit ( i , lab [ 1 ] ) ;
14884: LD_VAR 0 1
14888: PPUSH
14889: LD_VAR 0 4
14893: PUSH
14894: LD_INT 1
14896: ARRAY
14897: PPUSH
14898: CALL_OW 120
14902: GO 14869
14904: POP
14905: POP
// end ; end ; eng := UnitFilter ( ruForces , [ f_class , 2 ] ) ;
14906: LD_ADDR_VAR 0 5
14910: PUSH
14911: LD_EXP 59
14915: PPUSH
14916: LD_INT 25
14918: PUSH
14919: LD_INT 2
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: PPUSH
14926: CALL_OW 72
14930: ST_TO_ADDR
// if eng then
14931: LD_VAR 0 5
14935: IFFALSE 15720
// begin for i in eng do
14937: LD_ADDR_VAR 0 1
14941: PUSH
14942: LD_VAR 0 5
14946: PUSH
14947: FOR_IN
14948: IFFALSE 15718
// begin tag := GetTag ( i ) ;
14950: LD_ADDR_VAR 0 6
14954: PUSH
14955: LD_VAR 0 1
14959: PPUSH
14960: CALL_OW 110
14964: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
14965: LD_VAR 0 1
14969: PPUSH
14970: CALL_OW 256
14974: PUSH
14975: LD_INT 800
14977: LESS
14978: PUSH
14979: LD_VAR 0 6
14983: PUSH
14984: LD_INT 1
14986: NONEQUAL
14987: AND
14988: IFFALSE 15038
// begin SetTag ( i , tHeal ) ;
14990: LD_VAR 0 1
14994: PPUSH
14995: LD_INT 1
14997: PPUSH
14998: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
15002: LD_VAR 0 1
15006: PPUSH
15007: LD_EXP 74
15011: PUSH
15012: LD_INT 1
15014: ARRAY
15015: PPUSH
15016: LD_EXP 74
15020: PUSH
15021: LD_INT 2
15023: ARRAY
15024: PPUSH
15025: CALL_OW 111
// AddComHold ( i ) ;
15029: LD_VAR 0 1
15033: PPUSH
15034: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
15038: LD_VAR 0 6
15042: PUSH
15043: LD_INT 1
15045: EQUAL
15046: PUSH
15047: LD_VAR 0 1
15051: PPUSH
15052: CALL_OW 256
15056: PUSH
15057: LD_INT 1000
15059: EQUAL
15060: AND
15061: IFFALSE 15075
// SetTag ( i , 0 ) ;
15063: LD_VAR 0 1
15067: PPUSH
15068: LD_INT 0
15070: PPUSH
15071: CALL_OW 109
// if not tag then
15075: LD_VAR 0 6
15079: NOT
15080: IFFALSE 15252
// begin undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15082: LD_ADDR_VAR 0 3
15086: PUSH
15087: LD_EXP 66
15091: PPUSH
15092: LD_INT 57
15094: PUSH
15095: EMPTY
15096: LIST
15097: PPUSH
15098: CALL_OW 70
15102: ST_TO_ADDR
// if undone then
15103: LD_VAR 0 3
15107: IFFALSE 15129
// begin ComComplete ( i , undone [ 1 ] ) ;
15109: LD_VAR 0 1
15113: PPUSH
15114: LD_VAR 0 3
15118: PUSH
15119: LD_INT 1
15121: ARRAY
15122: PPUSH
15123: CALL 61829 0 2
// continue ;
15127: GO 14947
// end ; if cr or tmp or Count ( ruBuildings ) then
15129: LD_VAR 0 8
15133: PUSH
15134: LD_VAR 0 2
15138: OR
15139: PUSH
15140: LD_EXP 76
15144: PPUSH
15145: CALL 56099 0 1
15149: OR
15150: IFFALSE 15226
// begin if IsInUnit ( i ) then
15152: LD_VAR 0 1
15156: PPUSH
15157: CALL_OW 310
15161: IFFALSE 15172
// ComExitBuilding ( i ) ;
15163: LD_VAR 0 1
15167: PPUSH
15168: CALL_OW 122
// if tmp then
15172: LD_VAR 0 2
15176: IFFALSE 15192
// SetTag ( i , tRepair ) else
15178: LD_VAR 0 1
15182: PPUSH
15183: LD_INT 3
15185: PPUSH
15186: CALL_OW 109
15190: GO 15224
// if cr then
15192: LD_VAR 0 8
15196: IFFALSE 15212
// SetTag ( i , tCrates ) else
15198: LD_VAR 0 1
15202: PPUSH
15203: LD_INT 2
15205: PPUSH
15206: CALL_OW 109
15210: GO 15224
// SetTag ( i , tBuild ) ;
15212: LD_VAR 0 1
15216: PPUSH
15217: LD_INT 5
15219: PPUSH
15220: CALL_OW 109
// end else
15224: GO 15252
// if not IsInUnit ( i ) then
15226: LD_VAR 0 1
15230: PPUSH
15231: CALL_OW 310
15235: NOT
15236: IFFALSE 15252
// ComEnterUnit ( i , ruBase ) ;
15238: LD_VAR 0 1
15242: PPUSH
15243: LD_EXP 68
15247: PPUSH
15248: CALL_OW 120
// end ; if tag = tRepair then
15252: LD_VAR 0 6
15256: PUSH
15257: LD_INT 3
15259: EQUAL
15260: IFFALSE 15366
// begin if IsInUnit ( i ) then
15262: LD_VAR 0 1
15266: PPUSH
15267: CALL_OW 310
15271: IFFALSE 15284
// begin ComExitBuilding ( i ) ;
15273: LD_VAR 0 1
15277: PPUSH
15278: CALL_OW 122
// continue ;
15282: GO 14947
// end ; if not tmp then
15284: LD_VAR 0 2
15288: NOT
15289: IFFALSE 15305
// begin SetTag ( i , 0 ) ;
15291: LD_VAR 0 1
15295: PPUSH
15296: LD_INT 0
15298: PPUSH
15299: CALL_OW 109
// continue ;
15303: GO 14947
// end ; if not HasTask ( i ) then
15305: LD_VAR 0 1
15309: PPUSH
15310: CALL_OW 314
15314: NOT
15315: IFFALSE 15335
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
15317: LD_VAR 0 1
15321: PPUSH
15322: LD_VAR 0 2
15326: PUSH
15327: LD_INT 1
15329: ARRAY
15330: PPUSH
15331: CALL_OW 130
// if not IsInArea ( i , ruBaseArea ) then
15335: LD_VAR 0 1
15339: PPUSH
15340: LD_EXP 66
15344: PPUSH
15345: CALL_OW 308
15349: NOT
15350: IFFALSE 15366
// ComMoveToArea ( i , ruBaseArea ) ;
15352: LD_VAR 0 1
15356: PPUSH
15357: LD_EXP 66
15361: PPUSH
15362: CALL_OW 113
// end ; if tag = tBuild then
15366: LD_VAR 0 6
15370: PUSH
15371: LD_INT 5
15373: EQUAL
15374: IFFALSE 15573
// begin if IsInUnit ( i ) then
15376: LD_VAR 0 1
15380: PPUSH
15381: CALL_OW 310
15385: IFFALSE 15398
// begin ComExitBuilding ( i ) ;
15387: LD_VAR 0 1
15391: PPUSH
15392: CALL_OW 122
// continue ;
15396: GO 14947
// end ; if not Count ( ruBuildings ) then
15398: LD_EXP 76
15402: PPUSH
15403: CALL 56099 0 1
15407: NOT
15408: IFFALSE 15426
// begin SetTag ( i , 0 ) ;
15410: LD_VAR 0 1
15414: PPUSH
15415: LD_INT 0
15417: PPUSH
15418: CALL_OW 109
// continue ;
15422: GO 14947
// end else
15424: GO 15465
// if not CanBeBuiltOnlyResources ( ruBase , ruBuildings [ 1 ] [ 1 ] ) then
15426: LD_EXP 68
15430: PPUSH
15431: LD_EXP 76
15435: PUSH
15436: LD_INT 1
15438: ARRAY
15439: PUSH
15440: LD_INT 1
15442: ARRAY
15443: PPUSH
15444: CALL 25296 0 2
15448: NOT
15449: IFFALSE 15465
// begin SetTag ( i , 0 ) ;
15451: LD_VAR 0 1
15455: PPUSH
15456: LD_INT 0
15458: PPUSH
15459: CALL_OW 109
// continue ;
15463: GO 14947
// end ; undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15465: LD_ADDR_VAR 0 3
15469: PUSH
15470: LD_EXP 66
15474: PPUSH
15475: LD_INT 57
15477: PUSH
15478: EMPTY
15479: LIST
15480: PPUSH
15481: CALL_OW 70
15485: ST_TO_ADDR
// if undone then
15486: LD_VAR 0 3
15490: IFFALSE 15512
// begin ComComplete ( i , undone [ 1 ] ) ;
15492: LD_VAR 0 1
15496: PPUSH
15497: LD_VAR 0 3
15501: PUSH
15502: LD_INT 1
15504: ARRAY
15505: PPUSH
15506: CALL 61829 0 2
// continue ;
15510: GO 14947
// end ; ComBuild ( i , ruBuildings [ 1 ] [ 1 ] , ruBuildings [ 1 ] [ 2 ] , ruBuildings [ 1 ] [ 3 ] , ruBuildings [ 1 ] [ 4 ] ) ;
15512: LD_VAR 0 1
15516: PPUSH
15517: LD_EXP 76
15521: PUSH
15522: LD_INT 1
15524: ARRAY
15525: PUSH
15526: LD_INT 1
15528: ARRAY
15529: PPUSH
15530: LD_EXP 76
15534: PUSH
15535: LD_INT 1
15537: ARRAY
15538: PUSH
15539: LD_INT 2
15541: ARRAY
15542: PPUSH
15543: LD_EXP 76
15547: PUSH
15548: LD_INT 1
15550: ARRAY
15551: PUSH
15552: LD_INT 3
15554: ARRAY
15555: PPUSH
15556: LD_EXP 76
15560: PUSH
15561: LD_INT 1
15563: ARRAY
15564: PUSH
15565: LD_INT 4
15567: ARRAY
15568: PPUSH
15569: CALL_OW 145
// end ; if tag = tCrates then
15573: LD_VAR 0 6
15577: PUSH
15578: LD_INT 2
15580: EQUAL
15581: IFFALSE 15716
// begin if IsInUnit ( i ) then
15583: LD_VAR 0 1
15587: PPUSH
15588: CALL_OW 310
15592: IFFALSE 15605
// begin ComExitBuilding ( i ) ;
15594: LD_VAR 0 1
15598: PPUSH
15599: CALL_OW 122
// continue ;
15603: GO 14947
// end ; if not cr then
15605: LD_VAR 0 8
15609: NOT
15610: IFFALSE 15626
// begin SetTag ( i , 0 ) ;
15612: LD_VAR 0 1
15616: PPUSH
15617: LD_INT 0
15619: PPUSH
15620: CALL_OW 109
// continue ;
15624: GO 14947
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
15626: LD_VAR 0 1
15630: PPUSH
15631: CALL_OW 314
15635: NOT
15636: PUSH
15637: LD_INT 81
15639: PUSH
15640: LD_INT 3
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 92
15649: PUSH
15650: LD_VAR 0 8
15654: PUSH
15655: LD_INT 1
15657: ARRAY
15658: PUSH
15659: LD_VAR 0 8
15663: PUSH
15664: LD_INT 2
15666: ARRAY
15667: PUSH
15668: LD_INT 12
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PPUSH
15681: CALL_OW 69
15685: NOT
15686: AND
15687: IFFALSE 15716
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
15689: LD_VAR 0 1
15693: PPUSH
15694: LD_VAR 0 8
15698: PUSH
15699: LD_INT 1
15701: ARRAY
15702: PPUSH
15703: LD_VAR 0 8
15707: PUSH
15708: LD_INT 2
15710: ARRAY
15711: PPUSH
15712: CALL_OW 117
// end ; end ;
15716: GO 14947
15718: POP
15719: POP
// end ; sol := UnitFilter ( ruForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander ;
15720: LD_ADDR_VAR 0 10
15724: PUSH
15725: LD_EXP 59
15729: PPUSH
15730: LD_INT 2
15732: PUSH
15733: LD_INT 25
15735: PUSH
15736: LD_INT 1
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: PUSH
15743: LD_INT 25
15745: PUSH
15746: LD_INT 9
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: LIST
15757: PUSH
15758: LD_INT 50
15760: PUSH
15761: EMPTY
15762: LIST
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PPUSH
15768: CALL_OW 72
15772: PUSH
15773: LD_EXP 61
15777: UNION
15778: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
15779: LD_ADDR_VAR 0 12
15783: PUSH
15784: LD_EXP 66
15788: PPUSH
15789: LD_INT 81
15791: PUSH
15792: LD_INT 3
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PPUSH
15799: CALL_OW 70
15803: ST_TO_ADDR
// if sol then
15804: LD_VAR 0 10
15808: IFFALSE 16332
// begin if enemyInBase then
15810: LD_VAR 0 12
15814: IFFALSE 15957
// begin for i in sol do
15816: LD_ADDR_VAR 0 1
15820: PUSH
15821: LD_VAR 0 10
15825: PUSH
15826: FOR_IN
15827: IFFALSE 15953
// begin tw := IsInUnit ( i ) ;
15829: LD_ADDR_VAR 0 7
15833: PUSH
15834: LD_VAR 0 1
15838: PPUSH
15839: CALL_OW 310
15843: ST_TO_ADDR
// if tw then
15844: LD_VAR 0 7
15848: IFFALSE 15927
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
15850: LD_VAR 0 7
15854: PUSH
15855: LD_INT 22
15857: PUSH
15858: LD_INT 3
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: PUSH
15865: LD_INT 101
15867: PUSH
15868: LD_INT 1
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PUSH
15875: LD_INT 2
15877: PUSH
15878: LD_INT 30
15880: PUSH
15881: LD_INT 32
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 30
15890: PUSH
15891: LD_INT 31
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: LIST
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: LIST
15907: PPUSH
15908: CALL_OW 69
15912: IN
15913: NOT
15914: IFFALSE 15925
// ComExitBuilding ( i ) ;
15916: LD_VAR 0 1
15920: PPUSH
15921: CALL_OW 122
// end else
15925: GO 15951
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
15927: LD_VAR 0 1
15931: PPUSH
15932: LD_VAR 0 12
15936: PPUSH
15937: LD_VAR 0 1
15941: PPUSH
15942: CALL_OW 74
15946: PPUSH
15947: CALL_OW 115
// end ;
15951: GO 15826
15953: POP
15954: POP
// end else
15955: GO 16332
// begin empty := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
15957: LD_ADDR_VAR 0 13
15961: PUSH
15962: LD_EXP 66
15966: PPUSH
15967: LD_INT 3
15969: PUSH
15970: LD_INT 62
15972: PUSH
15973: EMPTY
15974: LIST
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: LD_INT 2
15982: PUSH
15983: LD_INT 30
15985: PUSH
15986: LD_INT 32
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PUSH
15993: LD_INT 30
15995: PUSH
15996: LD_INT 4
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: PUSH
16003: LD_INT 30
16005: PUSH
16006: LD_INT 5
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: LD_INT 30
16015: PUSH
16016: LD_INT 31
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PPUSH
16034: CALL_OW 70
16038: ST_TO_ADDR
// if empty then
16039: LD_VAR 0 13
16043: IFFALSE 16060
// empty := ReverseArray ( empty ) ;
16045: LD_ADDR_VAR 0 13
16049: PUSH
16050: LD_VAR 0 13
16054: PPUSH
16055: CALL 86607 0 1
16059: ST_TO_ADDR
// for i in sol do
16060: LD_ADDR_VAR 0 1
16064: PUSH
16065: LD_VAR 0 10
16069: PUSH
16070: FOR_IN
16071: IFFALSE 16330
// begin tag := GetTag ( i ) ;
16073: LD_ADDR_VAR 0 6
16077: PUSH
16078: LD_VAR 0 1
16082: PPUSH
16083: CALL_OW 110
16087: ST_TO_ADDR
// if tag = tMech then
16088: LD_VAR 0 6
16092: PUSH
16093: LD_INT 7
16095: EQUAL
16096: IFFALSE 16100
// continue ;
16098: GO 16070
// if GetLives ( i ) < 1000 and tag <> tHeal then
16100: LD_VAR 0 1
16104: PPUSH
16105: CALL_OW 256
16109: PUSH
16110: LD_INT 1000
16112: LESS
16113: PUSH
16114: LD_VAR 0 6
16118: PUSH
16119: LD_INT 1
16121: NONEQUAL
16122: AND
16123: IFFALSE 16175
// begin SetTag ( i , tHeal ) ;
16125: LD_VAR 0 1
16129: PPUSH
16130: LD_INT 1
16132: PPUSH
16133: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
16137: LD_VAR 0 1
16141: PPUSH
16142: LD_EXP 74
16146: PUSH
16147: LD_INT 1
16149: ARRAY
16150: PPUSH
16151: LD_EXP 74
16155: PUSH
16156: LD_INT 2
16158: ARRAY
16159: PPUSH
16160: CALL_OW 111
// AddComHold ( i ) ;
16164: LD_VAR 0 1
16168: PPUSH
16169: CALL_OW 200
// continue ;
16173: GO 16070
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
16175: LD_VAR 0 1
16179: PPUSH
16180: CALL_OW 256
16184: PUSH
16185: LD_INT 1000
16187: EQUAL
16188: PUSH
16189: LD_VAR 0 6
16193: PUSH
16194: LD_INT 1
16196: EQUAL
16197: AND
16198: IFFALSE 16214
// begin SetTag ( i , 0 ) ;
16200: LD_VAR 0 1
16204: PPUSH
16205: LD_INT 0
16207: PPUSH
16208: CALL_OW 109
// continue ;
16212: GO 16070
// end ; if HasTask ( i ) then
16214: LD_VAR 0 1
16218: PPUSH
16219: CALL_OW 314
16223: IFFALSE 16227
// continue ;
16225: GO 16070
// if not IsInUnit ( i ) and not tag and empty then
16227: LD_VAR 0 1
16231: PPUSH
16232: CALL_OW 310
16236: NOT
16237: PUSH
16238: LD_VAR 0 6
16242: NOT
16243: AND
16244: PUSH
16245: LD_VAR 0 13
16249: AND
16250: IFFALSE 16328
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
16252: LD_VAR 0 1
16256: PPUSH
16257: LD_VAR 0 13
16261: PUSH
16262: LD_INT 1
16264: ARRAY
16265: PPUSH
16266: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
16270: LD_VAR 0 13
16274: PUSH
16275: LD_INT 1
16277: ARRAY
16278: PPUSH
16279: CALL_OW 266
16283: PUSH
16284: LD_INT 5
16286: EQUAL
16287: PUSH
16288: LD_INT 50
16290: PPUSH
16291: CALL_OW 13
16295: AND
16296: IFFALSE 16310
// AddComChangeProfession ( i , class_bazooker ) ;
16298: LD_VAR 0 1
16302: PPUSH
16303: LD_INT 9
16305: PPUSH
16306: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
16310: LD_ADDR_VAR 0 13
16314: PUSH
16315: LD_VAR 0 13
16319: PPUSH
16320: LD_INT 1
16322: PPUSH
16323: CALL_OW 3
16327: ST_TO_ADDR
// end ; end ;
16328: GO 16070
16330: POP
16331: POP
// end ; end ; end ;
16332: PPOPN 16
16334: END
// every 0 0$2 trigger ruScriptActive2 and Count ( ruForces2 ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
16335: LD_EXP 15
16339: PUSH
16340: LD_EXP 60
16344: PPUSH
16345: CALL 56099 0 1
16349: AND
16350: IFFALSE 19002
16352: GO 16354
16354: DISABLE
16355: LD_INT 0
16357: PPUSH
16358: PPUSH
16359: PPUSH
16360: PPUSH
16361: PPUSH
16362: PPUSH
16363: PPUSH
16364: PPUSH
16365: PPUSH
16366: PPUSH
16367: PPUSH
16368: PPUSH
16369: PPUSH
16370: PPUSH
16371: PPUSH
16372: PPUSH
// begin enable ;
16373: ENABLE
// if ruTech then
16374: LD_EXP 65
16378: IFFALSE 16532
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
16380: LD_ADDR_VAR 0 4
16384: PUSH
16385: LD_INT 22
16387: PUSH
16388: LD_INT 3
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PUSH
16395: LD_INT 50
16397: PUSH
16398: EMPTY
16399: LIST
16400: PUSH
16401: LD_INT 2
16403: PUSH
16404: LD_INT 30
16406: PUSH
16407: LD_INT 6
16409: PUSH
16410: EMPTY
16411: LIST
16412: LIST
16413: PUSH
16414: LD_INT 30
16416: PUSH
16417: LD_INT 7
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 30
16426: PUSH
16427: LD_INT 8
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: LIST
16444: PPUSH
16445: CALL_OW 69
16449: ST_TO_ADDR
// if lab then
16450: LD_VAR 0 4
16454: IFFALSE 16532
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
16456: LD_VAR 0 4
16460: PUSH
16461: LD_INT 1
16463: ARRAY
16464: PPUSH
16465: CALL_OW 461
16469: PUSH
16470: LD_INT 2
16472: EQUAL
16473: IFFALSE 16532
// begin for i in ruTech do
16475: LD_ADDR_VAR 0 1
16479: PUSH
16480: LD_EXP 65
16484: PUSH
16485: FOR_IN
16486: IFFALSE 16530
// if CanBeResearched ( lab [ 1 ] , i ) then
16488: LD_VAR 0 4
16492: PUSH
16493: LD_INT 1
16495: ARRAY
16496: PPUSH
16497: LD_VAR 0 1
16501: PPUSH
16502: CALL_OW 430
16506: IFFALSE 16528
// begin ComResearch ( lab [ 1 ] , i ) ;
16508: LD_VAR 0 4
16512: PUSH
16513: LD_INT 1
16515: ARRAY
16516: PPUSH
16517: LD_VAR 0 1
16521: PPUSH
16522: CALL_OW 124
// break ;
16526: GO 16530
// end ;
16528: GO 16485
16530: POP
16531: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
16532: LD_ADDR_VAR 0 14
16536: PUSH
16537: LD_EXP 67
16541: PPUSH
16542: LD_INT 22
16544: PUSH
16545: LD_INT 3
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: LD_INT 30
16554: PUSH
16555: LD_INT 3
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: PUSH
16562: LD_INT 50
16564: PUSH
16565: EMPTY
16566: LIST
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: LIST
16572: PPUSH
16573: CALL_OW 70
16577: ST_TO_ADDR
// if fac then
16578: LD_VAR 0 14
16582: IFFALSE 17177
// begin if UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
16584: LD_EXP 64
16588: PPUSH
16589: LD_INT 3
16591: PUSH
16592: LD_INT 60
16594: PUSH
16595: EMPTY
16596: LIST
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 3
16604: PUSH
16605: LD_INT 25
16607: PUSH
16608: LD_INT 3
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PPUSH
16623: CALL_OW 72
16627: IFFALSE 16768
// begin for i in UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
16629: LD_ADDR_VAR 0 1
16633: PUSH
16634: LD_EXP 64
16638: PPUSH
16639: LD_INT 3
16641: PUSH
16642: LD_INT 60
16644: PUSH
16645: EMPTY
16646: LIST
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: LD_INT 3
16654: PUSH
16655: LD_INT 25
16657: PUSH
16658: LD_INT 3
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PPUSH
16673: CALL_OW 72
16677: PUSH
16678: FOR_IN
16679: IFFALSE 16766
// begin SetTag ( i , tMech ) ;
16681: LD_VAR 0 1
16685: PPUSH
16686: LD_INT 7
16688: PPUSH
16689: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
16693: LD_VAR 0 1
16697: PPUSH
16698: CALL_OW 310
16702: PUSH
16703: LD_VAR 0 1
16707: PPUSH
16708: CALL_OW 310
16712: PUSH
16713: LD_VAR 0 14
16717: PUSH
16718: LD_INT 1
16720: ARRAY
16721: NONEQUAL
16722: AND
16723: IFFALSE 16734
// ComExitBuilding ( i ) ;
16725: LD_VAR 0 1
16729: PPUSH
16730: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
16734: LD_VAR 0 1
16738: PPUSH
16739: LD_VAR 0 14
16743: PUSH
16744: LD_INT 1
16746: ARRAY
16747: PPUSH
16748: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
16752: LD_VAR 0 1
16756: PPUSH
16757: LD_INT 3
16759: PPUSH
16760: CALL_OW 183
// end ;
16764: GO 16678
16766: POP
16767: POP
// end ; if UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
16768: LD_EXP 64
16772: PPUSH
16773: LD_INT 25
16775: PUSH
16776: LD_INT 3
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 3
16785: PUSH
16786: LD_INT 54
16788: PUSH
16789: EMPTY
16790: LIST
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 120
16798: PUSH
16799: LD_INT 7
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 50
16808: PUSH
16809: EMPTY
16810: LIST
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: PPUSH
16818: CALL_OW 72
16822: IFFALSE 16909
// begin for i in UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
16824: LD_ADDR_VAR 0 1
16828: PUSH
16829: LD_EXP 64
16833: PPUSH
16834: LD_INT 25
16836: PUSH
16837: LD_INT 3
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: LD_INT 3
16846: PUSH
16847: LD_INT 54
16849: PUSH
16850: EMPTY
16851: LIST
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 120
16859: PUSH
16860: LD_INT 7
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: LD_INT 50
16869: PUSH
16870: EMPTY
16871: LIST
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: PPUSH
16879: CALL_OW 72
16883: PUSH
16884: FOR_IN
16885: IFFALSE 16907
// ComEnterUnit ( i , fac [ 1 ] ) ;
16887: LD_VAR 0 1
16891: PPUSH
16892: LD_VAR 0 14
16896: PUSH
16897: LD_INT 1
16899: ARRAY
16900: PPUSH
16901: CALL_OW 120
16905: GO 16884
16907: POP
16908: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
16909: LD_VAR 0 14
16913: PUSH
16914: LD_INT 1
16916: ARRAY
16917: PPUSH
16918: CALL_OW 461
16922: PUSH
16923: LD_INT 2
16925: EQUAL
16926: IFFALSE 17177
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea2 , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
16928: LD_ADDR_VAR 0 15
16932: PUSH
16933: LD_EXP 67
16937: PPUSH
16938: LD_INT 2
16940: PUSH
16941: LD_INT 30
16943: PUSH
16944: LD_INT 32
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PUSH
16951: LD_INT 30
16953: PUSH
16954: LD_INT 33
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: LIST
16965: PUSH
16966: LD_INT 35
16968: PUSH
16969: LD_INT 0
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: PPUSH
16980: CALL_OW 70
16984: ST_TO_ADDR
// if emptyTowers then
16985: LD_VAR 0 15
16989: IFFALSE 17039
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea2 ) ;
16991: LD_ADDR_VAR 0 16
16995: PUSH
16996: LD_VAR 0 15
17000: PUSH
17001: LD_INT 1
17003: ARRAY
17004: PPUSH
17005: LD_EXP 67
17009: PPUSH
17010: CALL 63976 0 2
17014: ST_TO_ADDR
// if weapon then
17015: LD_VAR 0 16
17019: IFFALSE 17039
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
17021: LD_VAR 0 15
17025: PUSH
17026: LD_INT 1
17028: ARRAY
17029: PPUSH
17030: LD_VAR 0 16
17034: PPUSH
17035: CALL_OW 148
// end ; if ruConstructList2 then
17039: LD_EXP 71
17043: IFFALSE 17177
// if CanBeConstructed ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) then
17045: LD_VAR 0 14
17049: PUSH
17050: LD_INT 1
17052: ARRAY
17053: PPUSH
17054: LD_EXP 71
17058: PUSH
17059: LD_INT 1
17061: ARRAY
17062: PUSH
17063: LD_INT 1
17065: ARRAY
17066: PPUSH
17067: LD_EXP 71
17071: PUSH
17072: LD_INT 1
17074: ARRAY
17075: PUSH
17076: LD_INT 2
17078: ARRAY
17079: PPUSH
17080: LD_EXP 71
17084: PUSH
17085: LD_INT 1
17087: ARRAY
17088: PUSH
17089: LD_INT 3
17091: ARRAY
17092: PPUSH
17093: LD_EXP 71
17097: PUSH
17098: LD_INT 1
17100: ARRAY
17101: PUSH
17102: LD_INT 4
17104: ARRAY
17105: PPUSH
17106: CALL_OW 448
17110: IFFALSE 17177
// ComConstruct ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) ;
17112: LD_VAR 0 14
17116: PUSH
17117: LD_INT 1
17119: ARRAY
17120: PPUSH
17121: LD_EXP 71
17125: PUSH
17126: LD_INT 1
17128: ARRAY
17129: PUSH
17130: LD_INT 1
17132: ARRAY
17133: PPUSH
17134: LD_EXP 71
17138: PUSH
17139: LD_INT 1
17141: ARRAY
17142: PUSH
17143: LD_INT 2
17145: ARRAY
17146: PPUSH
17147: LD_EXP 71
17151: PUSH
17152: LD_INT 1
17154: ARRAY
17155: PUSH
17156: LD_INT 3
17158: ARRAY
17159: PPUSH
17160: LD_EXP 71
17164: PUSH
17165: LD_INT 1
17167: ARRAY
17168: PUSH
17169: LD_INT 4
17171: ARRAY
17172: PPUSH
17173: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea2 , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17177: LD_ADDR_VAR 0 2
17181: PUSH
17182: LD_EXP 67
17186: PPUSH
17187: LD_INT 21
17189: PUSH
17190: LD_INT 3
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: LD_INT 3
17199: PUSH
17200: LD_INT 57
17202: PUSH
17203: EMPTY
17204: LIST
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PUSH
17210: LD_INT 3
17212: PUSH
17213: LD_INT 24
17215: PUSH
17216: LD_INT 1000
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: LIST
17231: PPUSH
17232: CALL_OW 70
17236: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea2 ) ;
17237: LD_ADDR_VAR 0 8
17241: PUSH
17242: LD_EXP 73
17246: PPUSH
17247: CALL_OW 435
17251: ST_TO_ADDR
// sci := UnitFilter ( ruForces2 , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
17252: LD_ADDR_VAR 0 9
17256: PUSH
17257: LD_EXP 60
17261: PPUSH
17262: LD_INT 25
17264: PUSH
17265: LD_INT 4
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 50
17274: PUSH
17275: EMPTY
17276: LIST
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PPUSH
17282: CALL_OW 72
17286: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea2 , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
17287: LD_ADDR_VAR 0 4
17291: PUSH
17292: LD_EXP 67
17296: PPUSH
17297: LD_INT 2
17299: PUSH
17300: LD_INT 30
17302: PUSH
17303: LD_INT 6
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: LD_INT 30
17312: PUSH
17313: LD_INT 7
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: LD_INT 30
17322: PUSH
17323: LD_INT 8
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: PPUSH
17336: CALL_OW 70
17340: ST_TO_ADDR
// if sci then
17341: LD_VAR 0 9
17345: IFFALSE 17576
// begin hurtUnits := UnitFilter ( ruForces2 , [ [ f_inarea , ruBaseArea2 ] , [ f_tag , tHeal ] ] ) ;
17347: LD_ADDR_VAR 0 11
17351: PUSH
17352: LD_EXP 60
17356: PPUSH
17357: LD_INT 95
17359: PUSH
17360: LD_EXP 67
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PUSH
17369: LD_INT 120
17371: PUSH
17372: LD_INT 1
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PPUSH
17383: CALL_OW 72
17387: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
17388: LD_ADDR_VAR 0 4
17392: PUSH
17393: LD_INT 22
17395: PUSH
17396: LD_INT 3
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: PUSH
17403: LD_INT 50
17405: PUSH
17406: EMPTY
17407: LIST
17408: PUSH
17409: LD_INT 2
17411: PUSH
17412: LD_INT 30
17414: PUSH
17415: LD_INT 6
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PUSH
17422: LD_INT 30
17424: PUSH
17425: LD_INT 7
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: LD_INT 30
17434: PUSH
17435: LD_INT 8
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: LIST
17452: PPUSH
17453: CALL_OW 69
17457: ST_TO_ADDR
// if hurtUnits then
17458: LD_VAR 0 11
17462: IFFALSE 17523
// begin for i in sci do
17464: LD_ADDR_VAR 0 1
17468: PUSH
17469: LD_VAR 0 9
17473: PUSH
17474: FOR_IN
17475: IFFALSE 17519
// if IsInUnit ( i ) then
17477: LD_VAR 0 1
17481: PPUSH
17482: CALL_OW 310
17486: IFFALSE 17499
// ComExitBuilding ( i ) else
17488: LD_VAR 0 1
17492: PPUSH
17493: CALL_OW 122
17497: GO 17517
// ComHeal ( i , hurtUnits [ 1 ] ) ;
17499: LD_VAR 0 1
17503: PPUSH
17504: LD_VAR 0 11
17508: PUSH
17509: LD_INT 1
17511: ARRAY
17512: PPUSH
17513: CALL_OW 128
17517: GO 17474
17519: POP
17520: POP
// end else
17521: GO 17576
// if lab then
17523: LD_VAR 0 4
17527: IFFALSE 17576
// begin for i in sci do
17529: LD_ADDR_VAR 0 1
17533: PUSH
17534: LD_VAR 0 9
17538: PUSH
17539: FOR_IN
17540: IFFALSE 17574
// if not IsInUnit ( i ) then
17542: LD_VAR 0 1
17546: PPUSH
17547: CALL_OW 310
17551: NOT
17552: IFFALSE 17572
// ComEnterUnit ( i , lab [ 1 ] ) ;
17554: LD_VAR 0 1
17558: PPUSH
17559: LD_VAR 0 4
17563: PUSH
17564: LD_INT 1
17566: ARRAY
17567: PPUSH
17568: CALL_OW 120
17572: GO 17539
17574: POP
17575: POP
// end ; end ; eng := UnitFilter ( ruForces2 , [ f_class , 2 ] ) ;
17576: LD_ADDR_VAR 0 5
17580: PUSH
17581: LD_EXP 60
17585: PPUSH
17586: LD_INT 25
17588: PUSH
17589: LD_INT 2
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PPUSH
17596: CALL_OW 72
17600: ST_TO_ADDR
// if eng then
17601: LD_VAR 0 5
17605: IFFALSE 18390
// begin for i in eng do
17607: LD_ADDR_VAR 0 1
17611: PUSH
17612: LD_VAR 0 5
17616: PUSH
17617: FOR_IN
17618: IFFALSE 18388
// begin tag := GetTag ( i ) ;
17620: LD_ADDR_VAR 0 6
17624: PUSH
17625: LD_VAR 0 1
17629: PPUSH
17630: CALL_OW 110
17634: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
17635: LD_VAR 0 1
17639: PPUSH
17640: CALL_OW 256
17644: PUSH
17645: LD_INT 800
17647: LESS
17648: PUSH
17649: LD_VAR 0 6
17653: PUSH
17654: LD_INT 1
17656: NONEQUAL
17657: AND
17658: IFFALSE 17708
// begin SetTag ( i , tHeal ) ;
17660: LD_VAR 0 1
17664: PPUSH
17665: LD_INT 1
17667: PPUSH
17668: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
17672: LD_VAR 0 1
17676: PPUSH
17677: LD_EXP 75
17681: PUSH
17682: LD_INT 1
17684: ARRAY
17685: PPUSH
17686: LD_EXP 75
17690: PUSH
17691: LD_INT 2
17693: ARRAY
17694: PPUSH
17695: CALL_OW 111
// AddComHold ( i ) ;
17699: LD_VAR 0 1
17703: PPUSH
17704: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
17708: LD_VAR 0 6
17712: PUSH
17713: LD_INT 1
17715: EQUAL
17716: PUSH
17717: LD_VAR 0 1
17721: PPUSH
17722: CALL_OW 256
17726: PUSH
17727: LD_INT 1000
17729: EQUAL
17730: AND
17731: IFFALSE 17745
// SetTag ( i , 0 ) ;
17733: LD_VAR 0 1
17737: PPUSH
17738: LD_INT 0
17740: PPUSH
17741: CALL_OW 109
// if not tag then
17745: LD_VAR 0 6
17749: NOT
17750: IFFALSE 17922
// begin undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
17752: LD_ADDR_VAR 0 3
17756: PUSH
17757: LD_EXP 67
17761: PPUSH
17762: LD_INT 57
17764: PUSH
17765: EMPTY
17766: LIST
17767: PPUSH
17768: CALL_OW 70
17772: ST_TO_ADDR
// if undone then
17773: LD_VAR 0 3
17777: IFFALSE 17799
// begin ComComplete ( i , undone [ 1 ] ) ;
17779: LD_VAR 0 1
17783: PPUSH
17784: LD_VAR 0 3
17788: PUSH
17789: LD_INT 1
17791: ARRAY
17792: PPUSH
17793: CALL 61829 0 2
// continue ;
17797: GO 17617
// end ; if cr or tmp or Count ( ruBuildings2 ) then
17799: LD_VAR 0 8
17803: PUSH
17804: LD_VAR 0 2
17808: OR
17809: PUSH
17810: LD_EXP 77
17814: PPUSH
17815: CALL 56099 0 1
17819: OR
17820: IFFALSE 17896
// begin if IsInUnit ( i ) then
17822: LD_VAR 0 1
17826: PPUSH
17827: CALL_OW 310
17831: IFFALSE 17842
// ComExitBuilding ( i ) ;
17833: LD_VAR 0 1
17837: PPUSH
17838: CALL_OW 122
// if tmp then
17842: LD_VAR 0 2
17846: IFFALSE 17862
// SetTag ( i , tRepair ) else
17848: LD_VAR 0 1
17852: PPUSH
17853: LD_INT 3
17855: PPUSH
17856: CALL_OW 109
17860: GO 17894
// if cr then
17862: LD_VAR 0 8
17866: IFFALSE 17882
// SetTag ( i , tCrates ) else
17868: LD_VAR 0 1
17872: PPUSH
17873: LD_INT 2
17875: PPUSH
17876: CALL_OW 109
17880: GO 17894
// SetTag ( i , tBuild ) ;
17882: LD_VAR 0 1
17886: PPUSH
17887: LD_INT 5
17889: PPUSH
17890: CALL_OW 109
// end else
17894: GO 17922
// if not IsInUnit ( i ) then
17896: LD_VAR 0 1
17900: PPUSH
17901: CALL_OW 310
17905: NOT
17906: IFFALSE 17922
// ComEnterUnit ( i , ruBase2 ) ;
17908: LD_VAR 0 1
17912: PPUSH
17913: LD_EXP 69
17917: PPUSH
17918: CALL_OW 120
// end ; if tag = tRepair then
17922: LD_VAR 0 6
17926: PUSH
17927: LD_INT 3
17929: EQUAL
17930: IFFALSE 18036
// begin if IsInUnit ( i ) then
17932: LD_VAR 0 1
17936: PPUSH
17937: CALL_OW 310
17941: IFFALSE 17954
// begin ComExitBuilding ( i ) ;
17943: LD_VAR 0 1
17947: PPUSH
17948: CALL_OW 122
// continue ;
17952: GO 17617
// end ; if not tmp then
17954: LD_VAR 0 2
17958: NOT
17959: IFFALSE 17975
// begin SetTag ( i , 0 ) ;
17961: LD_VAR 0 1
17965: PPUSH
17966: LD_INT 0
17968: PPUSH
17969: CALL_OW 109
// continue ;
17973: GO 17617
// end ; if not HasTask ( i ) then
17975: LD_VAR 0 1
17979: PPUSH
17980: CALL_OW 314
17984: NOT
17985: IFFALSE 18005
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
17987: LD_VAR 0 1
17991: PPUSH
17992: LD_VAR 0 2
17996: PUSH
17997: LD_INT 1
17999: ARRAY
18000: PPUSH
18001: CALL_OW 130
// if not IsInArea ( i , ruBaseArea2 ) then
18005: LD_VAR 0 1
18009: PPUSH
18010: LD_EXP 67
18014: PPUSH
18015: CALL_OW 308
18019: NOT
18020: IFFALSE 18036
// ComMoveToArea ( i , ruBaseArea2 ) ;
18022: LD_VAR 0 1
18026: PPUSH
18027: LD_EXP 67
18031: PPUSH
18032: CALL_OW 113
// end ; if tag = tBuild then
18036: LD_VAR 0 6
18040: PUSH
18041: LD_INT 5
18043: EQUAL
18044: IFFALSE 18243
// begin if IsInUnit ( i ) then
18046: LD_VAR 0 1
18050: PPUSH
18051: CALL_OW 310
18055: IFFALSE 18068
// begin ComExitBuilding ( i ) ;
18057: LD_VAR 0 1
18061: PPUSH
18062: CALL_OW 122
// continue ;
18066: GO 17617
// end ; if not Count ( ruBuildings2 ) then
18068: LD_EXP 77
18072: PPUSH
18073: CALL 56099 0 1
18077: NOT
18078: IFFALSE 18096
// begin SetTag ( i , 0 ) ;
18080: LD_VAR 0 1
18084: PPUSH
18085: LD_INT 0
18087: PPUSH
18088: CALL_OW 109
// continue ;
18092: GO 17617
// end else
18094: GO 18135
// if not CanBeBuiltOnlyResources ( ruBase2 , ruBuildings2 [ 1 ] [ 1 ] ) then
18096: LD_EXP 69
18100: PPUSH
18101: LD_EXP 77
18105: PUSH
18106: LD_INT 1
18108: ARRAY
18109: PUSH
18110: LD_INT 1
18112: ARRAY
18113: PPUSH
18114: CALL 25296 0 2
18118: NOT
18119: IFFALSE 18135
// begin SetTag ( i , 0 ) ;
18121: LD_VAR 0 1
18125: PPUSH
18126: LD_INT 0
18128: PPUSH
18129: CALL_OW 109
// continue ;
18133: GO 17617
// end ; undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
18135: LD_ADDR_VAR 0 3
18139: PUSH
18140: LD_EXP 67
18144: PPUSH
18145: LD_INT 57
18147: PUSH
18148: EMPTY
18149: LIST
18150: PPUSH
18151: CALL_OW 70
18155: ST_TO_ADDR
// if undone then
18156: LD_VAR 0 3
18160: IFFALSE 18182
// begin ComComplete ( i , undone [ 1 ] ) ;
18162: LD_VAR 0 1
18166: PPUSH
18167: LD_VAR 0 3
18171: PUSH
18172: LD_INT 1
18174: ARRAY
18175: PPUSH
18176: CALL 61829 0 2
// continue ;
18180: GO 17617
// end ; ComBuild ( i , ruBuildings2 [ 1 ] [ 1 ] , ruBuildings2 [ 1 ] [ 2 ] , ruBuildings2 [ 1 ] [ 3 ] , ruBuildings2 [ 1 ] [ 4 ] ) ;
18182: LD_VAR 0 1
18186: PPUSH
18187: LD_EXP 77
18191: PUSH
18192: LD_INT 1
18194: ARRAY
18195: PUSH
18196: LD_INT 1
18198: ARRAY
18199: PPUSH
18200: LD_EXP 77
18204: PUSH
18205: LD_INT 1
18207: ARRAY
18208: PUSH
18209: LD_INT 2
18211: ARRAY
18212: PPUSH
18213: LD_EXP 77
18217: PUSH
18218: LD_INT 1
18220: ARRAY
18221: PUSH
18222: LD_INT 3
18224: ARRAY
18225: PPUSH
18226: LD_EXP 77
18230: PUSH
18231: LD_INT 1
18233: ARRAY
18234: PUSH
18235: LD_INT 4
18237: ARRAY
18238: PPUSH
18239: CALL_OW 145
// end ; if tag = tCrates then
18243: LD_VAR 0 6
18247: PUSH
18248: LD_INT 2
18250: EQUAL
18251: IFFALSE 18386
// begin if IsInUnit ( i ) then
18253: LD_VAR 0 1
18257: PPUSH
18258: CALL_OW 310
18262: IFFALSE 18275
// begin ComExitBuilding ( i ) ;
18264: LD_VAR 0 1
18268: PPUSH
18269: CALL_OW 122
// continue ;
18273: GO 17617
// end ; if not cr then
18275: LD_VAR 0 8
18279: NOT
18280: IFFALSE 18296
// begin SetTag ( i , 0 ) ;
18282: LD_VAR 0 1
18286: PPUSH
18287: LD_INT 0
18289: PPUSH
18290: CALL_OW 109
// continue ;
18294: GO 17617
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
18296: LD_VAR 0 1
18300: PPUSH
18301: CALL_OW 314
18305: NOT
18306: PUSH
18307: LD_INT 81
18309: PUSH
18310: LD_INT 3
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: LD_INT 92
18319: PUSH
18320: LD_VAR 0 8
18324: PUSH
18325: LD_INT 1
18327: ARRAY
18328: PUSH
18329: LD_VAR 0 8
18333: PUSH
18334: LD_INT 2
18336: ARRAY
18337: PUSH
18338: LD_INT 12
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PPUSH
18351: CALL_OW 69
18355: NOT
18356: AND
18357: IFFALSE 18386
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
18359: LD_VAR 0 1
18363: PPUSH
18364: LD_VAR 0 8
18368: PUSH
18369: LD_INT 1
18371: ARRAY
18372: PPUSH
18373: LD_VAR 0 8
18377: PUSH
18378: LD_INT 2
18380: ARRAY
18381: PPUSH
18382: CALL_OW 117
// end ; end ;
18386: GO 17617
18388: POP
18389: POP
// end ; sol := UnitFilter ( ruForces2 , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander2 ;
18390: LD_ADDR_VAR 0 10
18394: PUSH
18395: LD_EXP 60
18399: PPUSH
18400: LD_INT 2
18402: PUSH
18403: LD_INT 25
18405: PUSH
18406: LD_INT 1
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 25
18415: PUSH
18416: LD_INT 9
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 50
18430: PUSH
18431: EMPTY
18432: LIST
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PPUSH
18438: CALL_OW 72
18442: PUSH
18443: LD_EXP 62
18447: UNION
18448: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
18449: LD_ADDR_VAR 0 12
18453: PUSH
18454: LD_EXP 67
18458: PPUSH
18459: LD_INT 81
18461: PUSH
18462: LD_INT 3
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PPUSH
18469: CALL_OW 70
18473: ST_TO_ADDR
// if sol then
18474: LD_VAR 0 10
18478: IFFALSE 19002
// begin if enemyInBase then
18480: LD_VAR 0 12
18484: IFFALSE 18627
// begin for i in sol do
18486: LD_ADDR_VAR 0 1
18490: PUSH
18491: LD_VAR 0 10
18495: PUSH
18496: FOR_IN
18497: IFFALSE 18623
// begin tw := IsInUnit ( i ) ;
18499: LD_ADDR_VAR 0 7
18503: PUSH
18504: LD_VAR 0 1
18508: PPUSH
18509: CALL_OW 310
18513: ST_TO_ADDR
// if tw then
18514: LD_VAR 0 7
18518: IFFALSE 18597
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
18520: LD_VAR 0 7
18524: PUSH
18525: LD_INT 22
18527: PUSH
18528: LD_INT 3
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 101
18537: PUSH
18538: LD_INT 1
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: LD_INT 2
18547: PUSH
18548: LD_INT 30
18550: PUSH
18551: LD_INT 32
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 30
18560: PUSH
18561: LD_INT 31
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: LIST
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: LIST
18577: PPUSH
18578: CALL_OW 69
18582: IN
18583: NOT
18584: IFFALSE 18595
// ComExitBuilding ( i ) ;
18586: LD_VAR 0 1
18590: PPUSH
18591: CALL_OW 122
// end else
18595: GO 18621
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
18597: LD_VAR 0 1
18601: PPUSH
18602: LD_VAR 0 12
18606: PPUSH
18607: LD_VAR 0 1
18611: PPUSH
18612: CALL_OW 74
18616: PPUSH
18617: CALL_OW 115
// end ;
18621: GO 18496
18623: POP
18624: POP
// end else
18625: GO 19002
// begin empty := FilterUnitsInArea ( ruBaseArea2 , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
18627: LD_ADDR_VAR 0 13
18631: PUSH
18632: LD_EXP 67
18636: PPUSH
18637: LD_INT 3
18639: PUSH
18640: LD_INT 62
18642: PUSH
18643: EMPTY
18644: LIST
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 2
18652: PUSH
18653: LD_INT 30
18655: PUSH
18656: LD_INT 32
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 30
18665: PUSH
18666: LD_INT 4
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 30
18675: PUSH
18676: LD_INT 5
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 30
18685: PUSH
18686: LD_INT 31
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PPUSH
18704: CALL_OW 70
18708: ST_TO_ADDR
// if empty then
18709: LD_VAR 0 13
18713: IFFALSE 18730
// empty := ReverseArray ( empty ) ;
18715: LD_ADDR_VAR 0 13
18719: PUSH
18720: LD_VAR 0 13
18724: PPUSH
18725: CALL 86607 0 1
18729: ST_TO_ADDR
// for i in sol do
18730: LD_ADDR_VAR 0 1
18734: PUSH
18735: LD_VAR 0 10
18739: PUSH
18740: FOR_IN
18741: IFFALSE 19000
// begin tag := GetTag ( i ) ;
18743: LD_ADDR_VAR 0 6
18747: PUSH
18748: LD_VAR 0 1
18752: PPUSH
18753: CALL_OW 110
18757: ST_TO_ADDR
// if tag = tMech then
18758: LD_VAR 0 6
18762: PUSH
18763: LD_INT 7
18765: EQUAL
18766: IFFALSE 18770
// continue ;
18768: GO 18740
// if GetLives ( i ) < 1000 and tag <> tHeal then
18770: LD_VAR 0 1
18774: PPUSH
18775: CALL_OW 256
18779: PUSH
18780: LD_INT 1000
18782: LESS
18783: PUSH
18784: LD_VAR 0 6
18788: PUSH
18789: LD_INT 1
18791: NONEQUAL
18792: AND
18793: IFFALSE 18845
// begin SetTag ( i , tHeal ) ;
18795: LD_VAR 0 1
18799: PPUSH
18800: LD_INT 1
18802: PPUSH
18803: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
18807: LD_VAR 0 1
18811: PPUSH
18812: LD_EXP 75
18816: PUSH
18817: LD_INT 1
18819: ARRAY
18820: PPUSH
18821: LD_EXP 75
18825: PUSH
18826: LD_INT 2
18828: ARRAY
18829: PPUSH
18830: CALL_OW 111
// AddComHold ( i ) ;
18834: LD_VAR 0 1
18838: PPUSH
18839: CALL_OW 200
// continue ;
18843: GO 18740
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
18845: LD_VAR 0 1
18849: PPUSH
18850: CALL_OW 256
18854: PUSH
18855: LD_INT 1000
18857: EQUAL
18858: PUSH
18859: LD_VAR 0 6
18863: PUSH
18864: LD_INT 1
18866: EQUAL
18867: AND
18868: IFFALSE 18884
// begin SetTag ( i , 0 ) ;
18870: LD_VAR 0 1
18874: PPUSH
18875: LD_INT 0
18877: PPUSH
18878: CALL_OW 109
// continue ;
18882: GO 18740
// end ; if HasTask ( i ) then
18884: LD_VAR 0 1
18888: PPUSH
18889: CALL_OW 314
18893: IFFALSE 18897
// continue ;
18895: GO 18740
// if not IsInUnit ( i ) and not tag and empty then
18897: LD_VAR 0 1
18901: PPUSH
18902: CALL_OW 310
18906: NOT
18907: PUSH
18908: LD_VAR 0 6
18912: NOT
18913: AND
18914: PUSH
18915: LD_VAR 0 13
18919: AND
18920: IFFALSE 18998
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
18922: LD_VAR 0 1
18926: PPUSH
18927: LD_VAR 0 13
18931: PUSH
18932: LD_INT 1
18934: ARRAY
18935: PPUSH
18936: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
18940: LD_VAR 0 13
18944: PUSH
18945: LD_INT 1
18947: ARRAY
18948: PPUSH
18949: CALL_OW 266
18953: PUSH
18954: LD_INT 5
18956: EQUAL
18957: PUSH
18958: LD_INT 50
18960: PPUSH
18961: CALL_OW 13
18965: AND
18966: IFFALSE 18980
// AddComChangeProfession ( i , class_bazooker ) ;
18968: LD_VAR 0 1
18972: PPUSH
18973: LD_INT 9
18975: PPUSH
18976: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
18980: LD_ADDR_VAR 0 13
18984: PUSH
18985: LD_VAR 0 13
18989: PPUSH
18990: LD_INT 1
18992: PPUSH
18993: CALL_OW 3
18997: ST_TO_ADDR
// end ; end ;
18998: GO 18740
19000: POP
19001: POP
// end ; end ; end ;
19002: PPOPN 16
19004: END
// every 0 0$1 trigger ruTanks and ruActiveAttacks do var i , mech , enemy ;
19005: LD_EXP 79
19009: PUSH
19010: LD_EXP 22
19014: AND
19015: IFFALSE 19582
19017: GO 19019
19019: DISABLE
19020: LD_INT 0
19022: PPUSH
19023: PPUSH
19024: PPUSH
// begin enable ;
19025: ENABLE
// if not ruTanks then
19026: LD_EXP 79
19030: NOT
19031: IFFALSE 19035
// exit ;
19033: GO 19582
// for i in ruTanks do
19035: LD_ADDR_VAR 0 1
19039: PUSH
19040: LD_EXP 79
19044: PUSH
19045: FOR_IN
19046: IFFALSE 19580
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19048: LD_VAR 0 1
19052: PPUSH
19053: CALL_OW 302
19057: NOT
19058: PUSH
19059: LD_VAR 0 1
19063: PPUSH
19064: CALL_OW 255
19068: PUSH
19069: LD_INT 3
19071: NONEQUAL
19072: OR
19073: IFFALSE 19093
// begin ruTanks := ruTanks diff i ;
19075: LD_ADDR_EXP 79
19079: PUSH
19080: LD_EXP 79
19084: PUSH
19085: LD_VAR 0 1
19089: DIFF
19090: ST_TO_ADDR
// continue ;
19091: GO 19045
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19093: LD_VAR 0 1
19097: PPUSH
19098: CALL_OW 110
19102: NOT
19103: PUSH
19104: LD_VAR 0 1
19108: PPUSH
19109: CALL_OW 110
19113: PUSH
19114: LD_INT 0
19116: EQUAL
19117: OR
19118: IFFALSE 19291
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase ) then
19120: LD_VAR 0 1
19124: PPUSH
19125: CALL_OW 262
19129: PUSH
19130: LD_INT 1
19132: EQUAL
19133: PUSH
19134: LD_VAR 0 1
19138: PPUSH
19139: CALL_OW 261
19143: PUSH
19144: LD_INT 50
19146: LESS
19147: AND
19148: PUSH
19149: LD_EXP 68
19153: PPUSH
19154: CALL_OW 302
19158: AND
19159: IFFALSE 19246
// begin ComMoveXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) ;
19161: LD_VAR 0 1
19165: PPUSH
19166: LD_EXP 68
19170: PPUSH
19171: CALL_OW 250
19175: PPUSH
19176: LD_EXP 68
19180: PPUSH
19181: CALL_OW 251
19185: PPUSH
19186: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19190: LD_INT 35
19192: PPUSH
19193: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) < 6 ;
19197: LD_VAR 0 1
19201: PPUSH
19202: LD_EXP 68
19206: PPUSH
19207: CALL_OW 250
19211: PPUSH
19212: LD_EXP 68
19216: PPUSH
19217: CALL_OW 251
19221: PPUSH
19222: CALL_OW 297
19226: PUSH
19227: LD_INT 6
19229: LESS
19230: IFFALSE 19190
// SetFuel ( i , 100 ) ;
19232: LD_VAR 0 1
19236: PPUSH
19237: LD_INT 100
19239: PPUSH
19240: CALL_OW 240
// end else
19244: GO 19291
// if not IsInArea ( i , ruParkingArea ) then
19246: LD_VAR 0 1
19250: PPUSH
19251: LD_EXP 82
19255: PPUSH
19256: CALL_OW 308
19260: NOT
19261: IFFALSE 19279
// ComMoveToArea ( i , ruParkingArea ) else
19263: LD_VAR 0 1
19267: PPUSH
19268: LD_EXP 82
19272: PPUSH
19273: CALL_OW 113
19277: GO 19291
// SetTag ( i , tParking ) ;
19279: LD_VAR 0 1
19283: PPUSH
19284: LD_INT 12
19286: PPUSH
19287: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
19291: LD_VAR 0 1
19295: PPUSH
19296: CALL_OW 110
19300: PUSH
19301: LD_INT 12
19303: EQUAL
19304: IFFALSE 19434
// begin if GetLives ( i ) < 650 then
19306: LD_VAR 0 1
19310: PPUSH
19311: CALL_OW 256
19315: PUSH
19316: LD_INT 650
19318: LESS
19319: IFFALSE 19411
// begin if not IsDrivenBy ( i ) then
19321: LD_VAR 0 1
19325: PPUSH
19326: CALL_OW 311
19330: NOT
19331: IFFALSE 19335
// continue ;
19333: GO 19045
// mech := IsDrivenBy ( i ) ;
19335: LD_ADDR_VAR 0 2
19339: PUSH
19340: LD_VAR 0 1
19344: PPUSH
19345: CALL_OW 311
19349: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19350: LD_VAR 0 2
19354: PPUSH
19355: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19359: LD_VAR 0 2
19363: PPUSH
19364: LD_VAR 0 1
19368: PPUSH
19369: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19373: LD_INT 35
19375: PPUSH
19376: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19380: LD_VAR 0 1
19384: PPUSH
19385: CALL_OW 256
19389: PUSH
19390: LD_INT 1000
19392: EQUAL
19393: IFFALSE 19373
// ComEnterUnit ( mech , i ) ;
19395: LD_VAR 0 2
19399: PPUSH
19400: LD_VAR 0 1
19404: PPUSH
19405: CALL_OW 120
// end else
19409: GO 19434
// if IsDrivenBy ( i ) then
19411: LD_VAR 0 1
19415: PPUSH
19416: CALL_OW 311
19420: IFFALSE 19434
// SetTag ( i , tAttack ) ;
19422: LD_VAR 0 1
19426: PPUSH
19427: LD_INT 13
19429: PPUSH
19430: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
19434: LD_VAR 0 1
19438: PPUSH
19439: CALL_OW 110
19443: PUSH
19444: LD_INT 13
19446: EQUAL
19447: IFFALSE 19578
// begin enemy := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
19449: LD_ADDR_VAR 0 3
19453: PUSH
19454: LD_EXP 66
19458: PPUSH
19459: LD_INT 81
19461: PUSH
19462: LD_INT 3
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PPUSH
19469: CALL_OW 70
19473: ST_TO_ADDR
// if GetLives ( i ) < 650 then
19474: LD_VAR 0 1
19478: PPUSH
19479: CALL_OW 256
19483: PUSH
19484: LD_INT 650
19486: LESS
19487: IFFALSE 19512
// begin ComStop ( i ) ;
19489: LD_VAR 0 1
19493: PPUSH
19494: CALL_OW 141
// SetTag ( i , 0 ) ;
19498: LD_VAR 0 1
19502: PPUSH
19503: LD_INT 0
19505: PPUSH
19506: CALL_OW 109
// continue ;
19510: GO 19045
// end ; if enemy then
19512: LD_VAR 0 3
19516: IFFALSE 19556
// begin if not HasTask ( i ) then
19518: LD_VAR 0 1
19522: PPUSH
19523: CALL_OW 314
19527: NOT
19528: IFFALSE 19554
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
19530: LD_VAR 0 1
19534: PPUSH
19535: LD_VAR 0 3
19539: PPUSH
19540: LD_VAR 0 1
19544: PPUSH
19545: CALL_OW 74
19549: PPUSH
19550: CALL_OW 115
// end else
19554: GO 19578
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
19556: LD_VAR 0 1
19560: PPUSH
19561: LD_INT 105
19563: PUSH
19564: LD_INT 35
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: EMPTY
19572: LIST
19573: PPUSH
19574: CALL 93922 0 2
// end ; end ;
19578: GO 19045
19580: POP
19581: POP
// end ;
19582: PPOPN 3
19584: END
// every 0 0$1 trigger ruTanks2 and ruActiveAttacks do var i , mech , enemy ;
19585: LD_EXP 80
19589: PUSH
19590: LD_EXP 22
19594: AND
19595: IFFALSE 20162
19597: GO 19599
19599: DISABLE
19600: LD_INT 0
19602: PPUSH
19603: PPUSH
19604: PPUSH
// begin enable ;
19605: ENABLE
// if not ruTanks2 then
19606: LD_EXP 80
19610: NOT
19611: IFFALSE 19615
// exit ;
19613: GO 20162
// for i in ruTanks2 do
19615: LD_ADDR_VAR 0 1
19619: PUSH
19620: LD_EXP 80
19624: PUSH
19625: FOR_IN
19626: IFFALSE 20160
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19628: LD_VAR 0 1
19632: PPUSH
19633: CALL_OW 302
19637: NOT
19638: PUSH
19639: LD_VAR 0 1
19643: PPUSH
19644: CALL_OW 255
19648: PUSH
19649: LD_INT 3
19651: NONEQUAL
19652: OR
19653: IFFALSE 19673
// begin ruTanks := ruTanks diff i ;
19655: LD_ADDR_EXP 79
19659: PUSH
19660: LD_EXP 79
19664: PUSH
19665: LD_VAR 0 1
19669: DIFF
19670: ST_TO_ADDR
// continue ;
19671: GO 19625
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19673: LD_VAR 0 1
19677: PPUSH
19678: CALL_OW 110
19682: NOT
19683: PUSH
19684: LD_VAR 0 1
19688: PPUSH
19689: CALL_OW 110
19693: PUSH
19694: LD_INT 0
19696: EQUAL
19697: OR
19698: IFFALSE 19871
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase2 ) then
19700: LD_VAR 0 1
19704: PPUSH
19705: CALL_OW 262
19709: PUSH
19710: LD_INT 1
19712: EQUAL
19713: PUSH
19714: LD_VAR 0 1
19718: PPUSH
19719: CALL_OW 261
19723: PUSH
19724: LD_INT 50
19726: LESS
19727: AND
19728: PUSH
19729: LD_EXP 69
19733: PPUSH
19734: CALL_OW 302
19738: AND
19739: IFFALSE 19826
// begin ComMoveXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) ;
19741: LD_VAR 0 1
19745: PPUSH
19746: LD_EXP 69
19750: PPUSH
19751: CALL_OW 250
19755: PPUSH
19756: LD_EXP 69
19760: PPUSH
19761: CALL_OW 251
19765: PPUSH
19766: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19770: LD_INT 35
19772: PPUSH
19773: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) < 6 ;
19777: LD_VAR 0 1
19781: PPUSH
19782: LD_EXP 69
19786: PPUSH
19787: CALL_OW 250
19791: PPUSH
19792: LD_EXP 69
19796: PPUSH
19797: CALL_OW 251
19801: PPUSH
19802: CALL_OW 297
19806: PUSH
19807: LD_INT 6
19809: LESS
19810: IFFALSE 19770
// SetFuel ( i , 100 ) ;
19812: LD_VAR 0 1
19816: PPUSH
19817: LD_INT 100
19819: PPUSH
19820: CALL_OW 240
// end else
19824: GO 19871
// if not IsInArea ( i , ruParkingArea2 ) then
19826: LD_VAR 0 1
19830: PPUSH
19831: LD_EXP 83
19835: PPUSH
19836: CALL_OW 308
19840: NOT
19841: IFFALSE 19859
// ComMoveToArea ( i , ruParkingArea2 ) else
19843: LD_VAR 0 1
19847: PPUSH
19848: LD_EXP 83
19852: PPUSH
19853: CALL_OW 113
19857: GO 19871
// SetTag ( i , tParking ) ;
19859: LD_VAR 0 1
19863: PPUSH
19864: LD_INT 12
19866: PPUSH
19867: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
19871: LD_VAR 0 1
19875: PPUSH
19876: CALL_OW 110
19880: PUSH
19881: LD_INT 12
19883: EQUAL
19884: IFFALSE 20014
// begin if GetLives ( i ) < 650 then
19886: LD_VAR 0 1
19890: PPUSH
19891: CALL_OW 256
19895: PUSH
19896: LD_INT 650
19898: LESS
19899: IFFALSE 19991
// begin if not IsDrivenBy ( i ) then
19901: LD_VAR 0 1
19905: PPUSH
19906: CALL_OW 311
19910: NOT
19911: IFFALSE 19915
// continue ;
19913: GO 19625
// mech := IsDrivenBy ( i ) ;
19915: LD_ADDR_VAR 0 2
19919: PUSH
19920: LD_VAR 0 1
19924: PPUSH
19925: CALL_OW 311
19929: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19930: LD_VAR 0 2
19934: PPUSH
19935: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19939: LD_VAR 0 2
19943: PPUSH
19944: LD_VAR 0 1
19948: PPUSH
19949: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19953: LD_INT 35
19955: PPUSH
19956: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19960: LD_VAR 0 1
19964: PPUSH
19965: CALL_OW 256
19969: PUSH
19970: LD_INT 1000
19972: EQUAL
19973: IFFALSE 19953
// ComEnterUnit ( mech , i ) ;
19975: LD_VAR 0 2
19979: PPUSH
19980: LD_VAR 0 1
19984: PPUSH
19985: CALL_OW 120
// end else
19989: GO 20014
// if IsDrivenBy ( i ) then
19991: LD_VAR 0 1
19995: PPUSH
19996: CALL_OW 311
20000: IFFALSE 20014
// SetTag ( i , tAttack ) ;
20002: LD_VAR 0 1
20006: PPUSH
20007: LD_INT 13
20009: PPUSH
20010: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
20014: LD_VAR 0 1
20018: PPUSH
20019: CALL_OW 110
20023: PUSH
20024: LD_INT 13
20026: EQUAL
20027: IFFALSE 20158
// begin enemy := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
20029: LD_ADDR_VAR 0 3
20033: PUSH
20034: LD_EXP 67
20038: PPUSH
20039: LD_INT 81
20041: PUSH
20042: LD_INT 3
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PPUSH
20049: CALL_OW 70
20053: ST_TO_ADDR
// if GetLives ( i ) < 650 then
20054: LD_VAR 0 1
20058: PPUSH
20059: CALL_OW 256
20063: PUSH
20064: LD_INT 650
20066: LESS
20067: IFFALSE 20092
// begin ComStop ( i ) ;
20069: LD_VAR 0 1
20073: PPUSH
20074: CALL_OW 141
// SetTag ( i , 0 ) ;
20078: LD_VAR 0 1
20082: PPUSH
20083: LD_INT 0
20085: PPUSH
20086: CALL_OW 109
// continue ;
20090: GO 19625
// end ; if enemy then
20092: LD_VAR 0 3
20096: IFFALSE 20136
// begin if not HasTask ( i ) then
20098: LD_VAR 0 1
20102: PPUSH
20103: CALL_OW 314
20107: NOT
20108: IFFALSE 20134
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
20110: LD_VAR 0 1
20114: PPUSH
20115: LD_VAR 0 3
20119: PPUSH
20120: LD_VAR 0 1
20124: PPUSH
20125: CALL_OW 74
20129: PPUSH
20130: CALL_OW 115
// end else
20134: GO 20158
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20136: LD_VAR 0 1
20140: PPUSH
20141: LD_INT 105
20143: PUSH
20144: LD_INT 35
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: EMPTY
20152: LIST
20153: PPUSH
20154: CALL 93922 0 2
// end ; end ;
20158: GO 19625
20160: POP
20161: POP
// end ;
20162: PPOPN 3
20164: END
// every 5 5$00 trigger Count ( ruExtraTanks ) do
20165: LD_EXP 81
20169: PPUSH
20170: CALL 56099 0 1
20174: IFFALSE 20187
20176: GO 20178
20178: DISABLE
// begin enable ;
20179: ENABLE
// RaiseSailEvent ( EExtraAttack ) ;
20180: LD_INT 106
20182: PPUSH
20183: CALL_OW 427
// end ;
20187: END
// export function RussianExtraAttack ; var i , tmp ; begin
20188: LD_INT 0
20190: PPUSH
20191: PPUSH
20192: PPUSH
// tmp := UnitFilter ( ruExtraTanks , [ f_ok ] ) ;
20193: LD_ADDR_VAR 0 3
20197: PUSH
20198: LD_EXP 81
20202: PPUSH
20203: LD_INT 50
20205: PUSH
20206: EMPTY
20207: LIST
20208: PPUSH
20209: CALL_OW 72
20213: ST_TO_ADDR
// ruExtraTanks := ruExtraTanks diff tmp ;
20214: LD_ADDR_EXP 81
20218: PUSH
20219: LD_EXP 81
20223: PUSH
20224: LD_VAR 0 3
20228: DIFF
20229: ST_TO_ADDR
// ComAgressiveMove ( tmp , 105 , 35 ) ;
20230: LD_VAR 0 3
20234: PPUSH
20235: LD_INT 105
20237: PPUSH
20238: LD_INT 35
20240: PPUSH
20241: CALL_OW 114
// wait ( 0 0$5 ) ;
20245: LD_INT 175
20247: PPUSH
20248: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20252: LD_INT 35
20254: PPUSH
20255: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20259: LD_ADDR_VAR 0 3
20263: PUSH
20264: LD_VAR 0 3
20268: PPUSH
20269: LD_INT 50
20271: PUSH
20272: EMPTY
20273: LIST
20274: PPUSH
20275: CALL_OW 72
20279: ST_TO_ADDR
// for i in tmp do
20280: LD_ADDR_VAR 0 2
20284: PUSH
20285: LD_VAR 0 3
20289: PUSH
20290: FOR_IN
20291: IFFALSE 20317
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20293: LD_VAR 0 2
20297: PPUSH
20298: LD_INT 105
20300: PUSH
20301: LD_INT 35
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: EMPTY
20309: LIST
20310: PPUSH
20311: CALL 93922 0 2
20315: GO 20290
20317: POP
20318: POP
// until not tmp ;
20319: LD_VAR 0 3
20323: NOT
20324: IFFALSE 20252
// end ;
20326: LD_VAR 0 1
20330: RET
// export function PrepareRussianAttack ( strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
20331: LD_INT 0
20333: PPUSH
20334: PPUSH
20335: PPUSH
20336: PPUSH
20337: PPUSH
20338: PPUSH
20339: PPUSH
20340: PPUSH
20341: PPUSH
20342: PPUSH
// result := [ ] ;
20343: LD_ADDR_VAR 0 2
20347: PUSH
20348: EMPTY
20349: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
20350: LD_ADDR_VAR 0 7
20354: PUSH
20355: LD_INT 4
20357: PUSH
20358: LD_INT 5
20360: PUSH
20361: LD_INT 6
20363: PUSH
20364: LD_INT 7
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: PUSH
20373: LD_OWVAR 67
20377: ARRAY
20378: ST_TO_ADDR
// area := arAttackSpawn2Area ;
20379: LD_ADDR_VAR 0 8
20383: PUSH
20384: LD_INT 19
20386: ST_TO_ADDR
// parking := ruGatPointArea ;
20387: LD_ADDR_VAR 0 9
20391: PUSH
20392: LD_INT 32
20394: ST_TO_ADDR
// dir := 5 ;
20395: LD_ADDR_VAR 0 10
20399: PUSH
20400: LD_INT 5
20402: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) then
20403: LD_VAR 0 8
20407: PPUSH
20408: LD_INT 2
20410: PUSH
20411: LD_INT 22
20413: PUSH
20414: LD_INT 0
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 22
20423: PUSH
20424: LD_INT 6
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: LIST
20435: PPUSH
20436: CALL_OW 70
20440: IFFALSE 20501
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) do
20442: LD_ADDR_VAR 0 3
20446: PUSH
20447: LD_VAR 0 8
20451: PPUSH
20452: LD_INT 2
20454: PUSH
20455: LD_INT 22
20457: PUSH
20458: LD_INT 0
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: LD_INT 22
20467: PUSH
20468: LD_INT 6
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: LIST
20479: PPUSH
20480: CALL_OW 70
20484: PUSH
20485: FOR_IN
20486: IFFALSE 20499
// RemoveUnit ( i ) ;
20488: LD_VAR 0 3
20492: PPUSH
20493: CALL_OW 64
20497: GO 20485
20499: POP
20500: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) then
20501: LD_VAR 0 8
20505: PPUSH
20506: LD_INT 3
20508: PUSH
20509: LD_INT 21
20511: PUSH
20512: LD_INT 1
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PUSH
20523: LD_INT 22
20525: PUSH
20526: LD_INT 1
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PPUSH
20537: CALL_OW 70
20541: IFFALSE 20605
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) do
20543: LD_ADDR_VAR 0 3
20547: PUSH
20548: LD_VAR 0 8
20552: PPUSH
20553: LD_INT 3
20555: PUSH
20556: LD_INT 21
20558: PUSH
20559: LD_INT 1
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 22
20572: PUSH
20573: LD_INT 1
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PPUSH
20584: CALL_OW 70
20588: PUSH
20589: FOR_IN
20590: IFFALSE 20603
// KillUnit ( i ) ;
20592: LD_VAR 0 3
20596: PPUSH
20597: CALL_OW 66
20601: GO 20589
20603: POP
20604: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) then
20605: LD_VAR 0 8
20609: PPUSH
20610: LD_INT 21
20612: PUSH
20613: LD_INT 1
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 22
20622: PUSH
20623: LD_INT 1
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PPUSH
20634: CALL_OW 70
20638: IFFALSE 20701
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) do
20640: LD_ADDR_VAR 0 3
20644: PUSH
20645: LD_VAR 0 8
20649: PPUSH
20650: LD_INT 21
20652: PUSH
20653: LD_INT 1
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 22
20662: PUSH
20663: LD_INT 1
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PPUSH
20674: CALL_OW 70
20678: PUSH
20679: FOR_IN
20680: IFFALSE 20699
// ComMoveXY ( i , 92 , 92 ) ;
20682: LD_VAR 0 3
20686: PPUSH
20687: LD_INT 92
20689: PPUSH
20690: LD_INT 92
20692: PPUSH
20693: CALL_OW 111
20697: GO 20679
20699: POP
20700: POP
// repeat wait ( 0 0$1 ) ;
20701: LD_INT 35
20703: PPUSH
20704: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
20708: LD_VAR 0 8
20712: PPUSH
20713: LD_INT 50
20715: PUSH
20716: EMPTY
20717: LIST
20718: PPUSH
20719: CALL_OW 70
20723: NOT
20724: IFFALSE 20701
// InitHC_All ( ) ;
20726: CALL_OW 584
// InitVc ;
20730: CALL_OW 20
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + strength do
20734: LD_ADDR_VAR 0 3
20738: PUSH
20739: DOUBLE
20740: LD_INT 1
20742: DEC
20743: ST_TO_ADDR
20744: LD_INT 3
20746: PUSH
20747: LD_INT 4
20749: PUSH
20750: LD_INT 4
20752: PUSH
20753: LD_INT 5
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: PUSH
20762: LD_OWVAR 67
20766: ARRAY
20767: PUSH
20768: LD_VAR 0 1
20772: PLUS
20773: PUSH
20774: FOR_TO
20775: IFFALSE 21082
// begin uc_side := 6 ;
20777: LD_ADDR_OWVAR 20
20781: PUSH
20782: LD_INT 6
20784: ST_TO_ADDR
// uc_nation := nation_russian ;
20785: LD_ADDR_OWVAR 21
20789: PUSH
20790: LD_INT 3
20792: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer , control_computer ] [ rand ( 1 , 4 ) ] ;
20793: LD_ADDR_VAR 0 11
20797: PUSH
20798: LD_INT 1
20800: PUSH
20801: LD_INT 3
20803: PUSH
20804: LD_INT 3
20806: PUSH
20807: LD_INT 3
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 1
20818: PPUSH
20819: LD_INT 4
20821: PPUSH
20822: CALL_OW 12
20826: ARRAY
20827: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
20828: LD_INT 22
20830: PUSH
20831: LD_INT 24
20833: PUSH
20834: LD_INT 23
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: LIST
20841: PUSH
20842: LD_VAR 0 3
20846: PUSH
20847: LD_INT 3
20849: MOD
20850: PUSH
20851: LD_INT 1
20853: PLUS
20854: ARRAY
20855: PPUSH
20856: LD_INT 3
20858: PUSH
20859: LD_INT 1
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 1
20868: PPUSH
20869: LD_INT 2
20871: PPUSH
20872: CALL_OW 12
20876: ARRAY
20877: PPUSH
20878: LD_VAR 0 11
20882: PPUSH
20883: LD_INT 45
20885: PUSH
20886: LD_INT 46
20888: PUSH
20889: LD_INT 43
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: LIST
20896: PUSH
20897: LD_VAR 0 3
20901: PUSH
20902: LD_INT 3
20904: MOD
20905: PUSH
20906: LD_INT 1
20908: PLUS
20909: ARRAY
20910: PPUSH
20911: LD_INT 100
20913: PPUSH
20914: CALL 58837 0 5
// veh := CreateVehicle ;
20918: LD_ADDR_VAR 0 6
20922: PUSH
20923: CALL_OW 45
20927: ST_TO_ADDR
// SetDir ( veh , dir ) ;
20928: LD_VAR 0 6
20932: PPUSH
20933: LD_VAR 0 10
20937: PPUSH
20938: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
20942: LD_VAR 0 6
20946: PPUSH
20947: LD_VAR 0 8
20951: PPUSH
20952: LD_INT 0
20954: PPUSH
20955: CALL_OW 49
// if control = control_manual then
20959: LD_VAR 0 11
20963: PUSH
20964: LD_INT 1
20966: EQUAL
20967: IFFALSE 21021
// begin uc_side := 6 ;
20969: LD_ADDR_OWVAR 20
20973: PUSH
20974: LD_INT 6
20976: ST_TO_ADDR
// uc_nation := nation_russian ;
20977: LD_ADDR_OWVAR 21
20981: PUSH
20982: LD_INT 3
20984: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
20985: LD_INT 0
20987: PPUSH
20988: LD_VAR 0 7
20992: PPUSH
20993: CALL_OW 383
// un := CreateHuman ;
20997: LD_ADDR_VAR 0 5
21001: PUSH
21002: CALL_OW 44
21006: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
21007: LD_VAR 0 5
21011: PPUSH
21012: LD_VAR 0 6
21016: PPUSH
21017: CALL_OW 52
// end ; repeat ComMoveToArea ( veh , parking ) ;
21021: LD_VAR 0 6
21025: PPUSH
21026: LD_VAR 0 9
21030: PPUSH
21031: CALL_OW 113
// wait ( 0 0$3 ) ;
21035: LD_INT 105
21037: PPUSH
21038: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
21042: LD_VAR 0 8
21046: PPUSH
21047: LD_INT 50
21049: PUSH
21050: EMPTY
21051: LIST
21052: PPUSH
21053: CALL_OW 70
21057: NOT
21058: IFFALSE 21021
// result := Join ( result , veh ) ;
21060: LD_ADDR_VAR 0 2
21064: PUSH
21065: LD_VAR 0 2
21069: PPUSH
21070: LD_VAR 0 6
21074: PPUSH
21075: CALL 91318 0 2
21079: ST_TO_ADDR
// end ;
21080: GO 20774
21082: POP
21083: POP
// for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
21084: LD_ADDR_VAR 0 3
21088: PUSH
21089: DOUBLE
21090: LD_INT 1
21092: DEC
21093: ST_TO_ADDR
21094: LD_INT 2
21096: PUSH
21097: LD_INT 2
21099: PUSH
21100: LD_INT 3
21102: PUSH
21103: LD_INT 4
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: PUSH
21112: LD_OWVAR 67
21116: ARRAY
21117: PUSH
21118: FOR_TO
21119: IFFALSE 21275
// begin uc_side := 6 ;
21121: LD_ADDR_OWVAR 20
21125: PUSH
21126: LD_INT 6
21128: ST_TO_ADDR
// uc_nation := nation_russian ;
21129: LD_ADDR_OWVAR 21
21133: PUSH
21134: LD_INT 3
21136: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
21137: LD_INT 0
21139: PPUSH
21140: LD_VAR 0 7
21144: PPUSH
21145: CALL_OW 381
// un := CreateHuman ;
21149: LD_ADDR_VAR 0 5
21153: PUSH
21154: CALL_OW 44
21158: ST_TO_ADDR
// if Prob ( [ 35 , 60 , 70 , 80 ] [ Difficulty ] ) then
21159: LD_INT 35
21161: PUSH
21162: LD_INT 60
21164: PUSH
21165: LD_INT 70
21167: PUSH
21168: LD_INT 80
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: PUSH
21177: LD_OWVAR 67
21181: ARRAY
21182: PPUSH
21183: CALL_OW 13
21187: IFFALSE 21201
// SetClass ( un , class_bazooker ) ;
21189: LD_VAR 0 5
21193: PPUSH
21194: LD_INT 9
21196: PPUSH
21197: CALL_OW 336
// SetDir ( un , dir ) ;
21201: LD_VAR 0 5
21205: PPUSH
21206: LD_VAR 0 10
21210: PPUSH
21211: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
21215: LD_VAR 0 5
21219: PPUSH
21220: LD_VAR 0 8
21224: PPUSH
21225: LD_INT 0
21227: PPUSH
21228: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
21232: LD_VAR 0 5
21236: PPUSH
21237: LD_VAR 0 9
21241: PPUSH
21242: CALL_OW 113
// wait ( 0 0$1 ) ;
21246: LD_INT 35
21248: PPUSH
21249: CALL_OW 67
// result := Join ( result , un ) ;
21253: LD_ADDR_VAR 0 2
21257: PUSH
21258: LD_VAR 0 2
21262: PPUSH
21263: LD_VAR 0 5
21267: PPUSH
21268: CALL 91318 0 2
21272: ST_TO_ADDR
// end ;
21273: GO 21118
21275: POP
21276: POP
// end ;
21277: LD_VAR 0 2
21281: RET
// export function SendRussianAttack ( wave ) ; var path , attackers , e , i , enemy ; begin
21282: LD_INT 0
21284: PPUSH
21285: PPUSH
21286: PPUSH
21287: PPUSH
21288: PPUSH
21289: PPUSH
// russianWaveAttack := Inc ( russianWaveAttack ) ;
21290: LD_ADDR_EXP 18
21294: PUSH
21295: LD_EXP 18
21299: PPUSH
21300: CALL 92679 0 1
21304: ST_TO_ADDR
// path := [ [ 99 , 91 ] , [ 78 , 50 ] , [ 91 , 45 ] ] ;
21305: LD_ADDR_VAR 0 3
21309: PUSH
21310: LD_INT 99
21312: PUSH
21313: LD_INT 91
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 78
21322: PUSH
21323: LD_INT 50
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 91
21332: PUSH
21333: LD_INT 45
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: LIST
21344: ST_TO_ADDR
// attackers := PrepareRussianAttack ( wave ) ;
21345: LD_ADDR_VAR 0 4
21349: PUSH
21350: LD_VAR 0 1
21354: PPUSH
21355: CALL 20331 0 1
21359: ST_TO_ADDR
// ComAgressiveMove ( UnitFilter ( attackers , [ f_type , unit_human ] ) , 108 , 60 ) ;
21360: LD_VAR 0 4
21364: PPUSH
21365: LD_INT 21
21367: PUSH
21368: LD_INT 1
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PPUSH
21375: CALL_OW 72
21379: PPUSH
21380: LD_INT 108
21382: PPUSH
21383: LD_INT 60
21385: PPUSH
21386: CALL_OW 114
// DRussianNextAttack ;
21390: CALL 28601 0 0
// repeat wait ( 0 0$2 ) ;
21394: LD_INT 70
21396: PPUSH
21397: CALL_OW 67
// enemy := FilterAllUnits ( [ f_enemy , 6 ] ) ;
21401: LD_ADDR_VAR 0 7
21405: PUSH
21406: LD_INT 81
21408: PUSH
21409: LD_INT 6
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PPUSH
21416: CALL_OW 69
21420: ST_TO_ADDR
// attackers := UnitFilter ( attackers , [ f_ok ] ) ;
21421: LD_ADDR_VAR 0 4
21425: PUSH
21426: LD_VAR 0 4
21430: PPUSH
21431: LD_INT 50
21433: PUSH
21434: EMPTY
21435: LIST
21436: PPUSH
21437: CALL_OW 72
21441: ST_TO_ADDR
// for i in attackers do
21442: LD_ADDR_VAR 0 6
21446: PUSH
21447: LD_VAR 0 4
21451: PUSH
21452: FOR_IN
21453: IFFALSE 21829
// begin if not IsOk ( i ) then
21455: LD_VAR 0 6
21459: PPUSH
21460: CALL_OW 302
21464: NOT
21465: IFFALSE 21485
// begin attackers := attackers diff i ;
21467: LD_ADDR_VAR 0 4
21471: PUSH
21472: LD_VAR 0 4
21476: PUSH
21477: LD_VAR 0 6
21481: DIFF
21482: ST_TO_ADDR
// continue ;
21483: GO 21452
// end ; if GetType ( i ) = unit_vehicle then
21485: LD_VAR 0 6
21489: PPUSH
21490: CALL_OW 247
21494: PUSH
21495: LD_INT 2
21497: EQUAL
21498: IFFALSE 21516
// AgressiveMove ( i , path ) else
21500: LD_VAR 0 6
21504: PPUSH
21505: LD_VAR 0 3
21509: PPUSH
21510: CALL 93922 0 2
21514: GO 21827
// begin if GetClass ( i ) = class_bazooker then
21516: LD_VAR 0 6
21520: PPUSH
21521: CALL_OW 257
21525: PUSH
21526: LD_INT 9
21528: EQUAL
21529: IFFALSE 21803
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
21531: LD_VAR 0 6
21535: PPUSH
21536: LD_VAR 0 7
21540: PPUSH
21541: LD_VAR 0 6
21545: PPUSH
21546: CALL_OW 74
21550: PPUSH
21551: CALL_OW 296
21555: PUSH
21556: LD_INT 12
21558: GREATER
21559: IFFALSE 21587
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21561: LD_VAR 0 6
21565: PPUSH
21566: LD_VAR 0 7
21570: PPUSH
21571: LD_VAR 0 6
21575: PPUSH
21576: CALL_OW 74
21580: PPUSH
21581: CALL 95390 0 2
21585: GO 21801
// begin e := NearestUnitToUnit ( enemy , i ) ;
21587: LD_ADDR_VAR 0 5
21591: PUSH
21592: LD_VAR 0 7
21596: PPUSH
21597: LD_VAR 0 6
21601: PPUSH
21602: CALL_OW 74
21606: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
21607: LD_INT 1
21609: PPUSH
21610: LD_INT 3
21612: PPUSH
21613: CALL_OW 12
21617: PUSH
21618: LD_INT 1
21620: DOUBLE
21621: EQUAL
21622: IFTRUE 21626
21624: GO 21643
21626: POP
// ComAttackUnit ( i , e ) ; 2 :
21627: LD_VAR 0 6
21631: PPUSH
21632: LD_VAR 0 5
21636: PPUSH
21637: CALL_OW 115
21641: GO 21801
21643: LD_INT 2
21645: DOUBLE
21646: EQUAL
21647: IFTRUE 21651
21649: GO 21729
21651: POP
// begin ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ;
21652: LD_VAR 0 6
21656: PPUSH
21657: LD_VAR 0 5
21661: PPUSH
21662: CALL_OW 250
21666: PPUSH
21667: LD_VAR 0 5
21671: PPUSH
21672: CALL_OW 251
21676: PPUSH
21677: CALL_OW 153
// if GetType ( e ) <> unit_building and not dialogRussianSpaceAmmo then
21681: LD_VAR 0 5
21685: PPUSH
21686: CALL_OW 247
21690: PUSH
21691: LD_INT 3
21693: NONEQUAL
21694: PUSH
21695: LD_EXP 17
21699: NOT
21700: AND
21701: IFFALSE 21727
// begin dialogRussianSpaceAmmo := true ;
21703: LD_ADDR_EXP 17
21707: PUSH
21708: LD_INT 1
21710: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21711: LD_INT 210
21713: PPUSH
21714: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21718: LD_VAR 0 5
21722: PPUSH
21723: CALL 28648 0 1
// end ; end ; 3 :
21727: GO 21801
21729: LD_INT 3
21731: DOUBLE
21732: EQUAL
21733: IFTRUE 21737
21735: GO 21800
21737: POP
// begin ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ;
21738: LD_VAR 0 6
21742: PPUSH
21743: LD_VAR 0 5
21747: PPUSH
21748: CALL_OW 250
21752: PPUSH
21753: LD_VAR 0 5
21757: PPUSH
21758: CALL_OW 251
21762: PPUSH
21763: CALL_OW 154
// if not dialogRussianSpaceAmmo then
21767: LD_EXP 17
21771: NOT
21772: IFFALSE 21798
// begin dialogRussianSpaceAmmo := true ;
21774: LD_ADDR_EXP 17
21778: PUSH
21779: LD_INT 1
21781: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21782: LD_INT 210
21784: PPUSH
21785: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21789: LD_VAR 0 5
21793: PPUSH
21794: CALL 28648 0 1
// end ; end ; end ;
21798: GO 21801
21800: POP
// end ; end else
21801: GO 21827
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
21803: LD_VAR 0 6
21807: PPUSH
21808: LD_VAR 0 7
21812: PPUSH
21813: LD_VAR 0 6
21817: PPUSH
21818: CALL_OW 74
21822: PPUSH
21823: CALL 95390 0 2
// end ; end ;
21827: GO 21452
21829: POP
21830: POP
// until not attackers ;
21831: LD_VAR 0 4
21835: NOT
21836: IFFALSE 21394
// end ;
21838: LD_VAR 0 2
21842: RET
// every 6 6$30 trigger epsilon and firstAttack do var i , un , tmp ;
21843: LD_EXP 10
21847: PUSH
21848: LD_EXP 16
21852: AND
21853: IFFALSE 21965
21855: GO 21857
21857: DISABLE
21858: LD_INT 0
21860: PPUSH
21861: PPUSH
21862: PPUSH
// begin InitHC_All ( ) ;
21863: CALL_OW 584
// for i := 1 to 3 do
21867: LD_ADDR_VAR 0 1
21871: PUSH
21872: DOUBLE
21873: LD_INT 1
21875: DEC
21876: ST_TO_ADDR
21877: LD_INT 3
21879: PUSH
21880: FOR_TO
21881: IFFALSE 21963
// begin uc_side := 6 ;
21883: LD_ADDR_OWVAR 20
21887: PUSH
21888: LD_INT 6
21890: ST_TO_ADDR
// uc_nation := nation_russian ;
21891: LD_ADDR_OWVAR 21
21895: PUSH
21896: LD_INT 3
21898: ST_TO_ADDR
// PrepareSoldier ( false , 3 ) ;
21899: LD_INT 0
21901: PPUSH
21902: LD_INT 3
21904: PPUSH
21905: CALL_OW 381
// un := CreateHuman ;
21909: LD_ADDR_VAR 0 2
21913: PUSH
21914: CALL_OW 44
21918: ST_TO_ADDR
// SetDir ( un , 2 ) ;
21919: LD_VAR 0 2
21923: PPUSH
21924: LD_INT 2
21926: PPUSH
21927: CALL_OW 233
// PlaceUnitArea ( un , ruNorthSpawnArea , false ) ;
21931: LD_VAR 0 2
21935: PPUSH
21936: LD_INT 33
21938: PPUSH
21939: LD_INT 0
21941: PPUSH
21942: CALL_OW 49
// ComAgressiveMove ( un , 52 , 16 ) ;
21946: LD_VAR 0 2
21950: PPUSH
21951: LD_INT 52
21953: PPUSH
21954: LD_INT 16
21956: PPUSH
21957: CALL_OW 114
// end ;
21961: GO 21880
21963: POP
21964: POP
// end ;
21965: PPOPN 3
21967: END
// every 5 5$00 trigger IsOk ( ruBase ) and not ruTransportDestroyed do var cargo ;
21968: LD_EXP 68
21972: PPUSH
21973: CALL_OW 302
21977: PUSH
21978: LD_EXP 78
21982: NOT
21983: AND
21984: IFFALSE 22221
21986: GO 21988
21988: DISABLE
21989: LD_INT 0
21991: PPUSH
// begin enable ;
21992: ENABLE
// uc_side := 3 ;
21993: LD_ADDR_OWVAR 20
21997: PUSH
21998: LD_INT 3
22000: ST_TO_ADDR
// uc_nation := nation_russian ;
22001: LD_ADDR_OWVAR 21
22005: PUSH
22006: LD_INT 3
22008: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
22009: LD_INT 22
22011: PPUSH
22012: LD_INT 3
22014: PPUSH
22015: LD_INT 3
22017: PPUSH
22018: LD_INT 51
22020: PPUSH
22021: LD_INT 100
22023: PPUSH
22024: CALL 58837 0 5
// cargo := CreateVehicle ;
22028: LD_ADDR_VAR 0 1
22032: PUSH
22033: CALL_OW 45
22037: ST_TO_ADDR
// SetDir ( cargo , 5 ) ;
22038: LD_VAR 0 1
22042: PPUSH
22043: LD_INT 5
22045: PPUSH
22046: CALL_OW 233
// PlaceUnitXY ( cargo , 187 , 117 , false ) ;
22050: LD_VAR 0 1
22054: PPUSH
22055: LD_INT 187
22057: PPUSH
22058: LD_INT 117
22060: PPUSH
22061: LD_INT 0
22063: PPUSH
22064: CALL_OW 48
// SetCargo ( cargo , mat_cans , 100 ) ;
22068: LD_VAR 0 1
22072: PPUSH
22073: LD_INT 1
22075: PPUSH
22076: LD_INT 100
22078: PPUSH
22079: CALL_OW 290
// ComMoveUnit ( cargo , ruBase ) ;
22083: LD_VAR 0 1
22087: PPUSH
22088: LD_EXP 68
22092: PPUSH
22093: CALL_OW 112
// AddComGive ( cargo , ruBase ) ;
22097: LD_VAR 0 1
22101: PPUSH
22102: LD_EXP 68
22106: PPUSH
22107: CALL_OW 221
// AddComMoveXY ( cargo , 187 , 117 ) ;
22111: LD_VAR 0 1
22115: PPUSH
22116: LD_INT 187
22118: PPUSH
22119: LD_INT 117
22121: PPUSH
22122: CALL_OW 171
// wait ( 0 0$10 ) ;
22126: LD_INT 350
22128: PPUSH
22129: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22133: LD_INT 35
22135: PPUSH
22136: CALL_OW 67
// if not HasTask ( cargo ) then
22140: LD_VAR 0 1
22144: PPUSH
22145: CALL_OW 314
22149: NOT
22150: IFFALSE 22167
// ComMoveXY ( cargo , 187 , 117 ) ;
22152: LD_VAR 0 1
22156: PPUSH
22157: LD_INT 187
22159: PPUSH
22160: LD_INT 117
22162: PPUSH
22163: CALL_OW 111
// until IsDead ( cargo ) or IsAt ( cargo , 187 , 117 ) ;
22167: LD_VAR 0 1
22171: PPUSH
22172: CALL_OW 301
22176: PUSH
22177: LD_VAR 0 1
22181: PPUSH
22182: LD_INT 187
22184: PPUSH
22185: LD_INT 117
22187: PPUSH
22188: CALL_OW 307
22192: OR
22193: IFFALSE 22133
// if IsAt ( cargo , 187 , 117 ) then
22195: LD_VAR 0 1
22199: PPUSH
22200: LD_INT 187
22202: PPUSH
22203: LD_INT 117
22205: PPUSH
22206: CALL_OW 307
22210: IFFALSE 22221
// RemoveUnit ( cargo ) ;
22212: LD_VAR 0 1
22216: PPUSH
22217: CALL_OW 64
// end ; end_of_file
22221: PPOPN 1
22223: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
22224: LD_VAR 0 1
22228: PPUSH
22229: CALL 49708 0 1
// if unit = Dietrich and not arabianAttack then
22233: LD_VAR 0 1
22237: PUSH
22238: LD_EXP 50
22242: EQUAL
22243: PUSH
22244: LD_EXP 4
22248: NOT
22249: AND
22250: IFFALSE 22259
// YouLost ( ArabDefeated ) ;
22252: LD_STRING ArabDefeated
22254: PPUSH
22255: CALL_OW 104
// if unit in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) and not arabianAttack then
22259: LD_VAR 0 1
22263: PUSH
22264: LD_INT 22
22266: PUSH
22267: LD_INT 2
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 25
22276: PUSH
22277: LD_INT 4
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PPUSH
22288: CALL_OW 69
22292: IN
22293: PUSH
22294: LD_EXP 4
22298: NOT
22299: AND
22300: IFFALSE 22309
// YouLost ( ArabDefeated ) ;
22302: LD_STRING ArabDefeated
22304: PPUSH
22305: CALL_OW 104
// if unit in JMMSquad then
22309: LD_VAR 0 1
22313: PUSH
22314: LD_EXP 45
22318: IN
22319: IFFALSE 22337
// JMMSquad := JMMSquad diff unit ;
22321: LD_ADDR_EXP 45
22325: PUSH
22326: LD_EXP 45
22330: PUSH
22331: LD_VAR 0 1
22335: DIFF
22336: ST_TO_ADDR
// if unit = Truman then
22337: LD_VAR 0 1
22341: PUSH
22342: LD_EXP 43
22346: EQUAL
22347: IFFALSE 22356
// YouLost ( Powell ) ;
22349: LD_STRING Powell
22351: PPUSH
22352: CALL_OW 104
// if unit = JMM then
22356: LD_VAR 0 1
22360: PUSH
22361: LD_EXP 23
22365: EQUAL
22366: IFFALSE 22375
// YouLost ( JMM ) ;
22368: LD_STRING JMM
22370: PPUSH
22371: CALL_OW 104
// if unit in arEscapist then
22375: LD_VAR 0 1
22379: PUSH
22380: LD_EXP 56
22384: IN
22385: IFFALSE 22403
// arEscapist := arEscapist diff unit ;
22387: LD_ADDR_EXP 56
22391: PUSH
22392: LD_EXP 56
22396: PUSH
22397: LD_VAR 0 1
22401: DIFF
22402: ST_TO_ADDR
// if unit in arAttackersInf then
22403: LD_VAR 0 1
22407: PUSH
22408: LD_EXP 57
22412: IN
22413: IFFALSE 22431
// arAttackersInf := arAttackersInf diff unit ;
22415: LD_ADDR_EXP 57
22419: PUSH
22420: LD_EXP 57
22424: PUSH
22425: LD_VAR 0 1
22429: DIFF
22430: ST_TO_ADDR
// if unit in arAttackersVeh then
22431: LD_VAR 0 1
22435: PUSH
22436: LD_EXP 58
22440: IN
22441: IFFALSE 22459
// arAttackersVeh := arAttackersVeh diff unit ;
22443: LD_ADDR_EXP 58
22447: PUSH
22448: LD_EXP 58
22452: PUSH
22453: LD_VAR 0 1
22457: DIFF
22458: ST_TO_ADDR
// if unit = Khatam then
22459: LD_VAR 0 1
22463: PUSH
22464: LD_EXP 36
22468: EQUAL
22469: IFFALSE 22479
// khatamStatus := false ;
22471: LD_ADDR_EXP 5
22475: PUSH
22476: LD_INT 0
22478: ST_TO_ADDR
// if unit = epsilon then
22479: LD_VAR 0 1
22483: PUSH
22484: LD_EXP 10
22488: EQUAL
22489: IFFALSE 22520
// begin hasBase := false ;
22491: LD_ADDR_EXP 9
22495: PUSH
22496: LD_INT 0
22498: ST_TO_ADDR
// epsilon := 0 ;
22499: LD_ADDR_EXP 10
22503: PUSH
22504: LD_INT 0
22506: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
22507: LD_INT 0
22509: PPUSH
22510: LD_INT 1
22512: PPUSH
22513: LD_INT 1
22515: PPUSH
22516: CALL_OW 324
// end ; if unit = Khatam then
22520: LD_VAR 0 1
22524: PUSH
22525: LD_EXP 36
22529: EQUAL
22530: IFFALSE 22542
// SaveVariable ( 0 , 10_KhatamStatus_1 ) ;
22532: LD_INT 0
22534: PPUSH
22535: LD_STRING 10_KhatamStatus_1
22537: PPUSH
22538: CALL_OW 39
// if unit in ruForces then
22542: LD_VAR 0 1
22546: PUSH
22547: LD_EXP 59
22551: IN
22552: IFFALSE 22570
// ruForces := ruForces diff unit ;
22554: LD_ADDR_EXP 59
22558: PUSH
22559: LD_EXP 59
22563: PUSH
22564: LD_VAR 0 1
22568: DIFF
22569: ST_TO_ADDR
// if unit in ruForces2 then
22570: LD_VAR 0 1
22574: PUSH
22575: LD_EXP 60
22579: IN
22580: IFFALSE 22598
// ruForces2 := ruForces2 diff unit ;
22582: LD_ADDR_EXP 60
22586: PUSH
22587: LD_EXP 60
22591: PUSH
22592: LD_VAR 0 1
22596: DIFF
22597: ST_TO_ADDR
// if unit in ruTanks then
22598: LD_VAR 0 1
22602: PUSH
22603: LD_EXP 79
22607: IN
22608: IFFALSE 22626
// ruTanks := ruTanks diff unit ;
22610: LD_ADDR_EXP 79
22614: PUSH
22615: LD_EXP 79
22619: PUSH
22620: LD_VAR 0 1
22624: DIFF
22625: ST_TO_ADDR
// if unit in ruTanks2 then
22626: LD_VAR 0 1
22630: PUSH
22631: LD_EXP 80
22635: IN
22636: IFFALSE 22654
// ruTanks2 := ruTanks2 diff unit ;
22638: LD_ADDR_EXP 80
22642: PUSH
22643: LD_EXP 80
22647: PUSH
22648: LD_VAR 0 1
22652: DIFF
22653: ST_TO_ADDR
// if unit in ruExtraTanks then
22654: LD_VAR 0 1
22658: PUSH
22659: LD_EXP 81
22663: IN
22664: IFFALSE 22682
// ruExtraTanks := ruExtraTanks diff unit ;
22666: LD_ADDR_EXP 81
22670: PUSH
22671: LD_EXP 81
22675: PUSH
22676: LD_VAR 0 1
22680: DIFF
22681: ST_TO_ADDR
// if unit in ruMech then
22682: LD_VAR 0 1
22686: PUSH
22687: LD_EXP 63
22691: IN
22692: IFFALSE 22710
// ruMech := ruMech diff unit ;
22694: LD_ADDR_EXP 63
22698: PUSH
22699: LD_EXP 63
22703: PUSH
22704: LD_VAR 0 1
22708: DIFF
22709: ST_TO_ADDR
// if unit in ruMech2 then
22710: LD_VAR 0 1
22714: PUSH
22715: LD_EXP 64
22719: IN
22720: IFFALSE 22738
// ruMech2 := ruMech2 diff unit ;
22722: LD_ADDR_EXP 64
22726: PUSH
22727: LD_EXP 64
22731: PUSH
22732: LD_VAR 0 1
22736: DIFF
22737: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 3 then
22738: LD_VAR 0 1
22742: PPUSH
22743: CALL_OW 266
22747: PUSH
22748: LD_INT 32
22750: PUSH
22751: LD_INT 33
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: IN
22758: PUSH
22759: LD_VAR 0 1
22763: PPUSH
22764: CALL_OW 255
22768: PUSH
22769: LD_INT 3
22771: EQUAL
22772: AND
22773: IFFALSE 22929
// begin if IsInArea ( unit , ruBaseArea ) then
22775: LD_VAR 0 1
22779: PPUSH
22780: LD_EXP 66
22784: PPUSH
22785: CALL_OW 308
22789: IFFALSE 22852
// ruBuildings := Join ( ruBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
22791: LD_ADDR_EXP 76
22795: PUSH
22796: LD_EXP 76
22800: PPUSH
22801: LD_VAR 0 1
22805: PPUSH
22806: CALL_OW 266
22810: PUSH
22811: LD_VAR 0 1
22815: PPUSH
22816: CALL_OW 250
22820: PUSH
22821: LD_VAR 0 1
22825: PPUSH
22826: CALL_OW 251
22830: PUSH
22831: LD_VAR 0 1
22835: PPUSH
22836: CALL_OW 254
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: PPUSH
22847: CALL 91318 0 2
22851: ST_TO_ADDR
// if IsInArea ( unit , ruBaseArea2 ) then
22852: LD_VAR 0 1
22856: PPUSH
22857: LD_EXP 67
22861: PPUSH
22862: CALL_OW 308
22866: IFFALSE 22929
// ruBuildings2 := Join ( ruBuildings2 , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
22868: LD_ADDR_EXP 77
22872: PUSH
22873: LD_EXP 77
22877: PPUSH
22878: LD_VAR 0 1
22882: PPUSH
22883: CALL_OW 266
22887: PUSH
22888: LD_VAR 0 1
22892: PPUSH
22893: CALL_OW 250
22897: PUSH
22898: LD_VAR 0 1
22902: PPUSH
22903: CALL_OW 251
22907: PUSH
22908: LD_VAR 0 1
22912: PPUSH
22913: CALL_OW 254
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: PPUSH
22924: CALL 91318 0 2
22928: ST_TO_ADDR
// end ; if unit in FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) then
22929: LD_VAR 0 1
22933: PUSH
22934: LD_INT 22
22936: PUSH
22937: LD_INT 6
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 34
22946: PUSH
22947: LD_INT 51
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PPUSH
22958: CALL_OW 69
22962: IN
22963: IFFALSE 22973
// ruTransportDestroyed := true ;
22965: LD_ADDR_EXP 78
22969: PUSH
22970: LD_INT 1
22972: ST_TO_ADDR
// end ;
22973: PPOPN 1
22975: END
// on ClassChanged ( un , oldClass , newClass ) do begin if GetTag ( un ) = tMech then
22976: LD_VAR 0 1
22980: PPUSH
22981: CALL_OW 110
22985: PUSH
22986: LD_INT 7
22988: EQUAL
22989: IFFALSE 23003
// SetTag ( un , 0 ) ;
22991: LD_VAR 0 1
22995: PPUSH
22996: LD_INT 0
22998: PPUSH
22999: CALL_OW 109
// end ;
23003: PPOPN 3
23005: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
23006: LD_VAR 0 2
23010: PUSH
23011: LD_INT 22
23013: PUSH
23014: LD_INT 3
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 25
23023: PUSH
23024: LD_INT 3
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PPUSH
23035: CALL_OW 69
23039: IN
23040: PUSH
23041: LD_VAR 0 1
23045: PPUSH
23046: CALL_OW 266
23050: PUSH
23051: LD_INT 3
23053: EQUAL
23054: AND
23055: PUSH
23056: LD_VAR 0 2
23060: PPUSH
23061: CALL_OW 256
23065: PUSH
23066: LD_INT 1000
23068: LESS
23069: AND
23070: IFFALSE 23096
// begin SetTag ( un , 0 ) ;
23072: LD_VAR 0 2
23076: PPUSH
23077: LD_INT 0
23079: PPUSH
23080: CALL_OW 109
// SetLives ( un , 1000 ) ;
23084: LD_VAR 0 2
23088: PPUSH
23089: LD_INT 1000
23091: PPUSH
23092: CALL_OW 234
// end ; end ;
23096: PPOPN 2
23098: END
// on UnitGoesToRed ( un ) do var i ;
23099: LD_INT 0
23101: PPUSH
// begin if un = Khatam and GetSide ( Khatam ) = 8 then
23102: LD_VAR 0 1
23106: PUSH
23107: LD_EXP 36
23111: EQUAL
23112: PUSH
23113: LD_EXP 36
23117: PPUSH
23118: CALL_OW 255
23122: PUSH
23123: LD_INT 8
23125: EQUAL
23126: AND
23127: IFFALSE 23138
// KillUnit ( Khatam ) ;
23129: LD_EXP 36
23133: PPUSH
23134: CALL_OW 66
// end ;
23138: PPOPN 2
23140: END
// on SpontaneousTeleported ( un ) do begin if not seenRussianTeleport then
23141: LD_EXP 6
23145: NOT
23146: IFFALSE 23180
// begin seenRussianTeleport := true ;
23148: LD_ADDR_EXP 6
23152: PUSH
23153: LD_INT 1
23155: ST_TO_ADDR
// DTankTeleport ( GetX ( un ) , GetY ( un ) ) ;
23156: LD_VAR 0 1
23160: PPUSH
23161: CALL_OW 250
23165: PPUSH
23166: LD_VAR 0 1
23170: PPUSH
23171: CALL_OW 251
23175: PPUSH
23176: CALL 26658 0 2
// end ; end ;
23180: PPOPN 1
23182: END
// on BuildingCaptured ( captured , oldSide , unit ) do var i , x , y ;
23183: LD_INT 0
23185: PPUSH
23186: PPUSH
23187: PPUSH
// begin if oldSide = 2 and GetBType ( captured ) in [ b_lab_half , b_lab , b_depot , b_barracks ] then
23188: LD_VAR 0 2
23192: PUSH
23193: LD_INT 2
23195: EQUAL
23196: PUSH
23197: LD_VAR 0 1
23201: PPUSH
23202: CALL_OW 266
23206: PUSH
23207: LD_INT 7
23209: PUSH
23210: LD_INT 6
23212: PUSH
23213: LD_INT 0
23215: PUSH
23216: LD_INT 5
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: IN
23225: AND
23226: IFFALSE 23345
// begin for i := 1 to rand ( 2 , 4 ) do
23228: LD_ADDR_VAR 0 4
23232: PUSH
23233: DOUBLE
23234: LD_INT 1
23236: DEC
23237: ST_TO_ADDR
23238: LD_INT 2
23240: PPUSH
23241: LD_INT 4
23243: PPUSH
23244: CALL_OW 12
23248: PUSH
23249: FOR_TO
23250: IFFALSE 23343
// begin x := GetX ( captured ) - rand ( - 2 , 2 ) ;
23252: LD_ADDR_VAR 0 5
23256: PUSH
23257: LD_VAR 0 1
23261: PPUSH
23262: CALL_OW 250
23266: PUSH
23267: LD_INT 2
23269: NEG
23270: PPUSH
23271: LD_INT 2
23273: PPUSH
23274: CALL_OW 12
23278: MINUS
23279: ST_TO_ADDR
// y := GetY ( captured ) + rand ( - 2 , 2 ) ;
23280: LD_ADDR_VAR 0 6
23284: PUSH
23285: LD_VAR 0 1
23289: PPUSH
23290: CALL_OW 251
23294: PUSH
23295: LD_INT 2
23297: NEG
23298: PPUSH
23299: LD_INT 2
23301: PPUSH
23302: CALL_OW 12
23306: PLUS
23307: ST_TO_ADDR
// if ValidHex ( x , y ) then
23308: LD_VAR 0 5
23312: PPUSH
23313: LD_VAR 0 6
23317: PPUSH
23318: CALL_OW 488
23322: IFFALSE 23341
// MineExplosion ( x , y , 10 ) ;
23324: LD_VAR 0 5
23328: PPUSH
23329: LD_VAR 0 6
23333: PPUSH
23334: LD_INT 10
23336: PPUSH
23337: CALL_OW 453
// end ;
23341: GO 23249
23343: POP
23344: POP
// end ; end ;
23345: PPOPN 6
23347: END
// on VehicleConstructed ( veh , fac ) do var side ;
23348: LD_INT 0
23350: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
23351: LD_VAR 0 1
23355: PPUSH
23356: LD_VAR 0 2
23360: PPUSH
23361: CALL 49828 0 2
// side := GetSide ( fac ) ;
23365: LD_ADDR_VAR 0 3
23369: PUSH
23370: LD_VAR 0 2
23374: PPUSH
23375: CALL_OW 255
23379: ST_TO_ADDR
// if side = 3 then
23380: LD_VAR 0 3
23384: PUSH
23385: LD_INT 3
23387: EQUAL
23388: IFFALSE 23572
// begin if IsInArea ( fac , ruBaseArea ) then
23390: LD_VAR 0 2
23394: PPUSH
23395: LD_EXP 66
23399: PPUSH
23400: CALL_OW 308
23404: IFFALSE 23481
// begin ruConstructList := Delete ( ruConstructList , 1 ) ;
23406: LD_ADDR_EXP 70
23410: PUSH
23411: LD_EXP 70
23415: PPUSH
23416: LD_INT 1
23418: PPUSH
23419: CALL_OW 3
23423: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23424: LD_VAR 0 1
23428: PPUSH
23429: CALL_OW 263
23433: PUSH
23434: LD_INT 1
23436: EQUAL
23437: IFFALSE 23461
// ruTanks := Join ( ruTanks , veh ) else
23439: LD_ADDR_EXP 79
23443: PUSH
23444: LD_EXP 79
23448: PPUSH
23449: LD_VAR 0 1
23453: PPUSH
23454: CALL 91318 0 2
23458: ST_TO_ADDR
23459: GO 23481
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23461: LD_ADDR_EXP 81
23465: PUSH
23466: LD_EXP 81
23470: PPUSH
23471: LD_VAR 0 1
23475: PPUSH
23476: CALL 91318 0 2
23480: ST_TO_ADDR
// end ; if IsInArea ( fac , ruBaseArea2 ) then
23481: LD_VAR 0 2
23485: PPUSH
23486: LD_EXP 67
23490: PPUSH
23491: CALL_OW 308
23495: IFFALSE 23572
// begin ruConstructList2 := Delete ( ruConstructList2 , 1 ) ;
23497: LD_ADDR_EXP 71
23501: PUSH
23502: LD_EXP 71
23506: PPUSH
23507: LD_INT 1
23509: PPUSH
23510: CALL_OW 3
23514: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23515: LD_VAR 0 1
23519: PPUSH
23520: CALL_OW 263
23524: PUSH
23525: LD_INT 1
23527: EQUAL
23528: IFFALSE 23552
// ruTanks2 := Join ( ruTanks2 , veh ) else
23530: LD_ADDR_EXP 80
23534: PUSH
23535: LD_EXP 80
23539: PPUSH
23540: LD_VAR 0 1
23544: PPUSH
23545: CALL 91318 0 2
23549: ST_TO_ADDR
23550: GO 23572
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23552: LD_ADDR_EXP 81
23556: PUSH
23557: LD_EXP 81
23561: PPUSH
23562: LD_VAR 0 1
23566: PPUSH
23567: CALL 91318 0 2
23571: ST_TO_ADDR
// end ; end ; end ;
23572: PPOPN 3
23574: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
23575: LD_INT 0
23577: PPUSH
23578: PPUSH
23579: PPUSH
// begin side := GetSide ( driver ) ;
23580: LD_ADDR_VAR 0 7
23584: PUSH
23585: LD_VAR 0 1
23589: PPUSH
23590: CALL_OW 255
23594: ST_TO_ADDR
// if side = 5 then
23595: LD_VAR 0 7
23599: PUSH
23600: LD_INT 5
23602: EQUAL
23603: IFFALSE 23683
// begin arAttackersVeh := arAttackersVeh diff driver ;
23605: LD_ADDR_EXP 58
23609: PUSH
23610: LD_EXP 58
23614: PUSH
23615: LD_VAR 0 1
23619: DIFF
23620: ST_TO_ADDR
// ComMoveXY ( driver , 189 , 80 ) ;
23621: LD_VAR 0 1
23625: PPUSH
23626: LD_INT 189
23628: PPUSH
23629: LD_INT 80
23631: PPUSH
23632: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23636: LD_INT 35
23638: PPUSH
23639: CALL_OW 67
// if not IsOk ( driver ) then
23643: LD_VAR 0 1
23647: PPUSH
23648: CALL_OW 302
23652: NOT
23653: IFFALSE 23657
// exit ;
23655: GO 24207
// until IsAt ( driver , 189 , 80 ) ;
23657: LD_VAR 0 1
23661: PPUSH
23662: LD_INT 189
23664: PPUSH
23665: LD_INT 80
23667: PPUSH
23668: CALL_OW 307
23672: IFFALSE 23636
// RemoveUnit ( driver ) ;
23674: LD_VAR 0 1
23678: PPUSH
23679: CALL_OW 64
// end ; if side = 6 then
23683: LD_VAR 0 7
23687: PUSH
23688: LD_INT 6
23690: EQUAL
23691: IFFALSE 23749
// begin repeat ComMoveToArea ( driver , arAttackSpawn2Area ) ;
23693: LD_VAR 0 1
23697: PPUSH
23698: LD_INT 19
23700: PPUSH
23701: CALL_OW 113
// wait ( 0 0$3 ) ;
23705: LD_INT 105
23707: PPUSH
23708: CALL_OW 67
// if not IsOk ( driver ) then
23712: LD_VAR 0 1
23716: PPUSH
23717: CALL_OW 302
23721: NOT
23722: IFFALSE 23726
// exit ;
23724: GO 24207
// until IsInArea ( driver , arAttackSpawn2Area ) ;
23726: LD_VAR 0 1
23730: PPUSH
23731: LD_INT 19
23733: PPUSH
23734: CALL_OW 308
23738: IFFALSE 23693
// RemoveUnit ( driver ) ;
23740: LD_VAR 0 1
23744: PPUSH
23745: CALL_OW 64
// end ; if side = 3 then
23749: LD_VAR 0 7
23753: PUSH
23754: LD_INT 3
23756: EQUAL
23757: IFFALSE 24207
// begin if driver in ruMech then
23759: LD_VAR 0 1
23763: PUSH
23764: LD_EXP 63
23768: IN
23769: IFFALSE 23983
// begin ComMoveToArea ( driver , ruBaseArea ) ;
23771: LD_VAR 0 1
23775: PPUSH
23776: LD_EXP 66
23780: PPUSH
23781: CALL_OW 113
// SetTag ( driver , tMech ) ;
23785: LD_VAR 0 1
23789: PPUSH
23790: LD_INT 7
23792: PPUSH
23793: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
23797: LD_ADDR_VAR 0 6
23801: PUSH
23802: LD_EXP 66
23806: PPUSH
23807: LD_INT 22
23809: PUSH
23810: LD_INT 3
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 30
23819: PUSH
23820: LD_INT 3
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 50
23829: PUSH
23830: EMPTY
23831: LIST
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: LIST
23837: PPUSH
23838: CALL_OW 70
23842: ST_TO_ADDR
// if fac then
23843: LD_VAR 0 6
23847: IFFALSE 23869
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
23849: LD_VAR 0 1
23853: PPUSH
23854: LD_VAR 0 6
23858: PUSH
23859: LD_INT 1
23861: ARRAY
23862: PPUSH
23863: CALL_OW 180
// exit ;
23867: GO 24207
// end ; arm := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
23869: LD_ADDR_VAR 0 5
23873: PUSH
23874: LD_EXP 66
23878: PPUSH
23879: LD_INT 22
23881: PUSH
23882: LD_INT 3
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 2
23891: PUSH
23892: LD_INT 30
23894: PUSH
23895: LD_INT 4
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 30
23904: PUSH
23905: LD_INT 5
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 3
23919: PUSH
23920: LD_INT 62
23922: PUSH
23923: EMPTY
23924: LIST
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 50
23932: PUSH
23933: EMPTY
23934: LIST
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: PPUSH
23942: CALL_OW 70
23946: ST_TO_ADDR
// if arm then
23947: LD_VAR 0 5
23951: IFFALSE 23983
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
23953: LD_VAR 0 1
23957: PPUSH
23958: LD_VAR 0 5
23962: PUSH
23963: LD_INT 1
23965: ARRAY
23966: PPUSH
23967: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
23971: LD_VAR 0 1
23975: PPUSH
23976: LD_INT 1
23978: PPUSH
23979: CALL_OW 183
// end ; end ; if driver in ruMech2 then
23983: LD_VAR 0 1
23987: PUSH
23988: LD_EXP 64
23992: IN
23993: IFFALSE 24207
// begin ComMoveToArea ( driver , ruBaseArea2 ) ;
23995: LD_VAR 0 1
23999: PPUSH
24000: LD_EXP 67
24004: PPUSH
24005: CALL_OW 113
// SetTag ( driver , tMech ) ;
24009: LD_VAR 0 1
24013: PPUSH
24014: LD_INT 7
24016: PPUSH
24017: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
24021: LD_ADDR_VAR 0 6
24025: PUSH
24026: LD_EXP 67
24030: PPUSH
24031: LD_INT 22
24033: PUSH
24034: LD_INT 3
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: PUSH
24041: LD_INT 30
24043: PUSH
24044: LD_INT 3
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: PUSH
24051: LD_INT 50
24053: PUSH
24054: EMPTY
24055: LIST
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: LIST
24061: PPUSH
24062: CALL_OW 70
24066: ST_TO_ADDR
// if fac then
24067: LD_VAR 0 6
24071: IFFALSE 24093
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
24073: LD_VAR 0 1
24077: PPUSH
24078: LD_VAR 0 6
24082: PUSH
24083: LD_INT 1
24085: ARRAY
24086: PPUSH
24087: CALL_OW 180
// exit ;
24091: GO 24207
// end ; arm := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
24093: LD_ADDR_VAR 0 5
24097: PUSH
24098: LD_EXP 67
24102: PPUSH
24103: LD_INT 22
24105: PUSH
24106: LD_INT 3
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 2
24115: PUSH
24116: LD_INT 30
24118: PUSH
24119: LD_INT 4
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 30
24128: PUSH
24129: LD_INT 5
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 3
24143: PUSH
24144: LD_INT 62
24146: PUSH
24147: EMPTY
24148: LIST
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 50
24156: PUSH
24157: EMPTY
24158: LIST
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: PPUSH
24166: CALL_OW 70
24170: ST_TO_ADDR
// if arm then
24171: LD_VAR 0 5
24175: IFFALSE 24207
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
24177: LD_VAR 0 1
24181: PPUSH
24182: LD_VAR 0 5
24186: PUSH
24187: LD_INT 1
24189: ARRAY
24190: PPUSH
24191: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
24195: LD_VAR 0 1
24199: PPUSH
24200: LD_INT 1
24202: PPUSH
24203: CALL_OW 183
// end ; end ; end ; end ;
24207: PPOPN 7
24209: END
// on EndTheMissionRaised ( ev ) do begin end_the_mission_allowed = false ;
24210: LD_ADDR_OWVAR 57
24214: PUSH
24215: LD_INT 0
24217: ST_TO_ADDR
// FinishMission ;
24218: CALL 32066 0 0
// end ;
24222: PPOPN 1
24224: END
// on BuildingComplete ( b ) do var side , type ;
24225: LD_INT 0
24227: PPUSH
24228: PPUSH
// begin side := GetSide ( b ) ;
24229: LD_ADDR_VAR 0 2
24233: PUSH
24234: LD_VAR 0 1
24238: PPUSH
24239: CALL_OW 255
24243: ST_TO_ADDR
// type := GetBType ( b ) ;
24244: LD_ADDR_VAR 0 3
24248: PUSH
24249: LD_VAR 0 1
24253: PPUSH
24254: CALL_OW 266
24258: ST_TO_ADDR
// if side = 2 then
24259: LD_VAR 0 2
24263: PUSH
24264: LD_INT 2
24266: EQUAL
24267: IFFALSE 24287
// arBuildings := Delete ( arBuildings , 1 ) ;
24269: LD_ADDR_EXP 53
24273: PUSH
24274: LD_EXP 53
24278: PPUSH
24279: LD_INT 1
24281: PPUSH
24282: CALL_OW 3
24286: ST_TO_ADDR
// if side = 1 then
24287: LD_VAR 0 2
24291: PUSH
24292: LD_INT 1
24294: EQUAL
24295: IFFALSE 24357
// if type = b_depot and not hasBase then
24297: LD_VAR 0 3
24301: PUSH
24302: LD_INT 0
24304: EQUAL
24305: PUSH
24306: LD_EXP 9
24310: NOT
24311: AND
24312: IFFALSE 24357
// begin hasBase := true ;
24314: LD_ADDR_EXP 9
24318: PUSH
24319: LD_INT 1
24321: ST_TO_ADDR
// epsilon := b ;
24322: LD_ADDR_EXP 10
24326: PUSH
24327: LD_VAR 0 1
24331: ST_TO_ADDR
// SetBName ( b , epsilon ) ;
24332: LD_VAR 0 1
24336: PPUSH
24337: LD_STRING epsilon
24339: PPUSH
24340: CALL_OW 500
// SetRestrict ( b_depot , 1 , false ) ;
24344: LD_INT 0
24346: PPUSH
24347: LD_INT 1
24349: PPUSH
24350: LD_INT 0
24352: PPUSH
24353: CALL_OW 324
// end ; if side = 3 then
24357: LD_VAR 0 2
24361: PUSH
24362: LD_INT 3
24364: EQUAL
24365: IFFALSE 24651
// begin if IsInArea ( b , ruBaseArea ) then
24367: LD_VAR 0 1
24371: PPUSH
24372: LD_EXP 66
24376: PPUSH
24377: CALL_OW 308
24381: IFFALSE 24401
// ruBuildings := Delete ( ruBuildings , 1 ) ;
24383: LD_ADDR_EXP 76
24387: PUSH
24388: LD_EXP 76
24392: PPUSH
24393: LD_INT 1
24395: PPUSH
24396: CALL_OW 3
24400: ST_TO_ADDR
// if IsInArea ( b , ruBaseArea2 ) then
24401: LD_VAR 0 1
24405: PPUSH
24406: LD_EXP 67
24410: PPUSH
24411: CALL_OW 308
24415: IFFALSE 24435
// ruBuildings2 := Delete ( ruBuildings2 , 1 ) ;
24417: LD_ADDR_EXP 77
24421: PUSH
24422: LD_EXP 77
24426: PPUSH
24427: LD_INT 1
24429: PPUSH
24430: CALL_OW 3
24434: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
24435: LD_VAR 0 3
24439: PUSH
24440: LD_INT 0
24442: PUSH
24443: LD_INT 4
24445: PUSH
24446: LD_INT 2
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: LIST
24453: IN
24454: IFFALSE 24465
// ComUpgrade ( b ) ;
24456: LD_VAR 0 1
24460: PPUSH
24461: CALL_OW 146
// if type = b_lab then
24465: LD_VAR 0 3
24469: PUSH
24470: LD_INT 6
24472: EQUAL
24473: IFFALSE 24517
// if IsInArea ( b , ruBaseArea ) then
24475: LD_VAR 0 1
24479: PPUSH
24480: LD_EXP 66
24484: PPUSH
24485: CALL_OW 308
24489: IFFALSE 24505
// ComUpgradeLab ( b , b_lab_weapon ) else
24491: LD_VAR 0 1
24495: PPUSH
24496: LD_INT 10
24498: PPUSH
24499: CALL_OW 147
24503: GO 24517
// ComUpgradeLab ( b , b_lab_computer ) ;
24505: LD_VAR 0 1
24509: PPUSH
24510: LD_INT 12
24512: PPUSH
24513: CALL_OW 147
// if type = b_depot then
24517: LD_VAR 0 3
24521: PUSH
24522: LD_INT 0
24524: EQUAL
24525: IFFALSE 24651
// begin SetResourceType ( GetBase ( b ) , mat_cans , 2550 ) ;
24527: LD_VAR 0 1
24531: PPUSH
24532: CALL_OW 274
24536: PPUSH
24537: LD_INT 1
24539: PPUSH
24540: LD_INT 2550
24542: PPUSH
24543: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
24547: LD_VAR 0 1
24551: PPUSH
24552: CALL_OW 274
24556: PPUSH
24557: LD_INT 2
24559: PPUSH
24560: LD_INT 250
24562: PPUSH
24563: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 200 ) ;
24567: LD_VAR 0 1
24571: PPUSH
24572: CALL_OW 274
24576: PPUSH
24577: LD_INT 3
24579: PPUSH
24580: LD_INT 200
24582: PPUSH
24583: CALL_OW 277
// if IsInArea ( b , ruBaseArea ) then
24587: LD_VAR 0 1
24591: PPUSH
24592: LD_EXP 66
24596: PPUSH
24597: CALL_OW 308
24601: IFFALSE 24625
// begin ruBase := b ;
24603: LD_ADDR_EXP 68
24607: PUSH
24608: LD_VAR 0 1
24612: ST_TO_ADDR
// SetBName ( b , chuikov ) ;
24613: LD_VAR 0 1
24617: PPUSH
24618: LD_STRING chuikov
24620: PPUSH
24621: CALL_OW 500
// end ; if IsInArea ( b , ruBaseArea2 ) then
24625: LD_VAR 0 1
24629: PPUSH
24630: LD_EXP 67
24634: PPUSH
24635: CALL_OW 308
24639: IFFALSE 24651
// begin ruBase2 := b ;
24641: LD_ADDR_EXP 69
24645: PUSH
24646: LD_VAR 0 1
24650: ST_TO_ADDR
// end ; end ; end ; end ;
24651: PPOPN 3
24653: END
// on UpgradeComplete ( b ) do var side , type ;
24654: LD_INT 0
24656: PPUSH
24657: PPUSH
// begin side := GetSide ( b ) ;
24658: LD_ADDR_VAR 0 2
24662: PUSH
24663: LD_VAR 0 1
24667: PPUSH
24668: CALL_OW 255
24672: ST_TO_ADDR
// type := GetBType ( b ) ;
24673: LD_ADDR_VAR 0 3
24677: PUSH
24678: LD_VAR 0 1
24682: PPUSH
24683: CALL_OW 266
24687: ST_TO_ADDR
// if side = 3 then
24688: LD_VAR 0 2
24692: PUSH
24693: LD_INT 3
24695: EQUAL
24696: IFFALSE 24750
// if type = b_lab_half then
24698: LD_VAR 0 3
24702: PUSH
24703: LD_INT 7
24705: EQUAL
24706: IFFALSE 24750
// if IsInArea ( b , ruBaseArea ) then
24708: LD_VAR 0 1
24712: PPUSH
24713: LD_EXP 66
24717: PPUSH
24718: CALL_OW 308
24722: IFFALSE 24738
// ComUpgradeLab ( b , b_lab_spacetime ) else
24724: LD_VAR 0 1
24728: PPUSH
24729: LD_INT 14
24731: PPUSH
24732: CALL_OW 147
24736: GO 24750
// ComUpgradeLab ( b , b_lab_siberium ) ;
24738: LD_VAR 0 1
24742: PPUSH
24743: LD_INT 11
24745: PPUSH
24746: CALL_OW 147
// end ;
24750: PPOPN 3
24752: END
// on ResearchComplete ( tech , lab ) do var side ;
24753: LD_INT 0
24755: PPUSH
// begin side := GetSide ( lab ) ;
24756: LD_ADDR_VAR 0 3
24760: PUSH
24761: LD_VAR 0 2
24765: PPUSH
24766: CALL_OW 255
24770: ST_TO_ADDR
// if side = 2 then
24771: LD_VAR 0 3
24775: PUSH
24776: LD_INT 2
24778: EQUAL
24779: IFFALSE 24827
// begin arTech := Delete ( arTech , 1 ) ;
24781: LD_ADDR_EXP 52
24785: PUSH
24786: LD_EXP 52
24790: PPUSH
24791: LD_INT 1
24793: PPUSH
24794: CALL_OW 3
24798: ST_TO_ADDR
// if tech = tech_sibPow then
24799: LD_VAR 0 1
24803: PUSH
24804: LD_INT 21
24806: EQUAL
24807: IFFALSE 24813
// DArabTrait1 ;
24809: CALL 29020 0 0
// if tech = tech_sibEng then
24813: LD_VAR 0 1
24817: PUSH
24818: LD_INT 22
24820: EQUAL
24821: IFFALSE 24827
// DArabTrait2 ;
24823: CALL 29351 0 0
// end ; end ;
24827: PPOPN 3
24829: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
24830: LD_VAR 0 1
24834: PPUSH
24835: CALL 49812 0 1
// end ;
24839: PPOPN 1
24841: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
24842: LD_VAR 0 1
24846: PUSH
24847: LD_INT 1
24849: EQUAL
24850: PUSH
24851: LD_VAR 0 2
24855: PUSH
24856: LD_INT 2
24858: EQUAL
24859: AND
24860: PUSH
24861: LD_INT 1
24863: PPUSH
24864: LD_INT 2
24866: PPUSH
24867: CALL_OW 81
24871: PUSH
24872: LD_INT 1
24874: EQUAL
24875: AND
24876: IFFALSE 24882
// DAttackOnAlly ;
24878: CALL 26736 0 0
// end ;
24882: PPOPN 2
24884: END
// on SailEvent ( event ) do begin case event of EArabAttack :
24885: LD_VAR 0 1
24889: PUSH
24890: LD_INT 101
24892: DOUBLE
24893: EQUAL
24894: IFTRUE 24898
24896: GO 24905
24898: POP
// ArabAttack ; ERussianBaseC :
24899: CALL 7182 0 0
24903: GO 25057
24905: LD_INT 102
24907: DOUBLE
24908: EQUAL
24909: IFTRUE 24913
24911: GO 24934
24913: POP
// RussianBase ( ruForces union ruCommander , 1 ) ; ERussianBaseW :
24914: LD_EXP 59
24918: PUSH
24919: LD_EXP 61
24923: UNION
24924: PPUSH
24925: LD_INT 1
24927: PPUSH
24928: CALL 10774 0 2
24932: GO 25057
24934: LD_INT 103
24936: DOUBLE
24937: EQUAL
24938: IFTRUE 24942
24940: GO 24963
24942: POP
// RussianBase ( ruForces union ruCommander , 2 ) ; ERussianBaseE :
24943: LD_EXP 59
24947: PUSH
24948: LD_EXP 61
24952: UNION
24953: PPUSH
24954: LD_INT 2
24956: PPUSH
24957: CALL 10774 0 2
24961: GO 25057
24963: LD_INT 104
24965: DOUBLE
24966: EQUAL
24967: IFTRUE 24971
24969: GO 24992
24971: POP
// RussianBase ( ruForces union ruCommander , 3 ) ; ERussianBaseW2 :
24972: LD_EXP 59
24976: PUSH
24977: LD_EXP 61
24981: UNION
24982: PPUSH
24983: LD_INT 3
24985: PPUSH
24986: CALL 10774 0 2
24990: GO 25057
24992: LD_INT 105
24994: DOUBLE
24995: EQUAL
24996: IFTRUE 25000
24998: GO 25021
25000: POP
// RussianBase2 ( ruForces2 union ruCommander2 , 2 ) ; EExtraAttack :
25001: LD_EXP 60
25005: PUSH
25006: LD_EXP 62
25010: UNION
25011: PPUSH
25012: LD_INT 2
25014: PPUSH
25015: CALL 12283 0 2
25019: GO 25057
25021: LD_INT 106
25023: DOUBLE
25024: EQUAL
25025: IFTRUE 25029
25027: GO 25036
25029: POP
// RussianExtraAttack ; ESendRussianAttack :
25030: CALL 20188 0 0
25034: GO 25057
25036: LD_INT 107
25038: DOUBLE
25039: EQUAL
25040: IFTRUE 25044
25042: GO 25056
25044: POP
// SendRussianAttack ( russianWaveAttack ) ; end ;
25045: LD_EXP 18
25049: PPUSH
25050: CALL 21282 0 1
25054: GO 25057
25056: POP
// end ; end_of_file
25057: PPOPN 1
25059: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
25060: LD_INT 0
25062: PPUSH
25063: PPUSH
25064: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
25065: LD_ADDR_VAR 0 1
25069: PUSH
25070: LD_VAR 0 1
25074: PUSH
25075: LD_EXP 23
25079: PUSH
25080: LD_EXP 24
25084: PUSH
25085: LD_EXP 25
25089: PUSH
25090: LD_EXP 26
25094: PUSH
25095: LD_EXP 27
25099: PUSH
25100: LD_EXP 28
25104: PUSH
25105: LD_EXP 29
25109: PUSH
25110: LD_EXP 30
25114: PUSH
25115: LD_EXP 31
25119: PUSH
25120: LD_EXP 32
25124: PUSH
25125: LD_EXP 33
25129: PUSH
25130: LD_EXP 34
25134: PUSH
25135: LD_EXP 35
25139: PUSH
25140: LD_EXP 36
25144: PUSH
25145: LD_EXP 37
25149: PUSH
25150: LD_EXP 38
25154: PUSH
25155: LD_EXP 39
25159: PUSH
25160: LD_EXP 40
25164: PUSH
25165: LD_EXP 42
25169: PUSH
25170: LD_EXP 44
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: DIFF
25197: ST_TO_ADDR
// if not characters then
25198: LD_VAR 0 1
25202: NOT
25203: IFFALSE 25207
// exit ;
25205: GO 25291
// speaker := characters [ rand ( 1 , Count ( characters ) ) ] ;
25207: LD_ADDR_VAR 0 6
25211: PUSH
25212: LD_VAR 0 1
25216: PUSH
25217: LD_INT 1
25219: PPUSH
25220: LD_VAR 0 1
25224: PPUSH
25225: CALL 56099 0 1
25229: PPUSH
25230: CALL_OW 12
25234: ARRAY
25235: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
25236: LD_VAR 0 6
25240: PPUSH
25241: CALL_OW 258
25245: PUSH
25246: LD_INT 1
25248: EQUAL
25249: IFFALSE 25267
// Say ( speaker , dialogMID ) else
25251: LD_VAR 0 6
25255: PPUSH
25256: LD_VAR 0 2
25260: PPUSH
25261: CALL_OW 88
25265: GO 25281
// Say ( speaker , dialogFID ) ;
25267: LD_VAR 0 6
25271: PPUSH
25272: LD_VAR 0 3
25276: PPUSH
25277: CALL_OW 88
// result := speaker ;
25281: LD_ADDR_VAR 0 4
25285: PUSH
25286: LD_VAR 0 6
25290: ST_TO_ADDR
// end ;
25291: LD_VAR 0 4
25295: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
25296: LD_INT 0
25298: PPUSH
25299: PPUSH
25300: PPUSH
// if btype = b_depot then
25301: LD_VAR 0 2
25305: PUSH
25306: LD_INT 0
25308: EQUAL
25309: IFFALSE 25321
// begin result := true ;
25311: LD_ADDR_VAR 0 3
25315: PUSH
25316: LD_INT 1
25318: ST_TO_ADDR
// exit ;
25319: GO 25437
// end ; pom := GetBase ( depot ) ;
25321: LD_ADDR_VAR 0 4
25325: PUSH
25326: LD_VAR 0 1
25330: PPUSH
25331: CALL_OW 274
25335: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25336: LD_ADDR_VAR 0 5
25340: PUSH
25341: LD_VAR 0 2
25345: PPUSH
25346: LD_VAR 0 1
25350: PPUSH
25351: CALL_OW 248
25355: PPUSH
25356: CALL_OW 450
25360: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
25361: LD_ADDR_VAR 0 3
25365: PUSH
25366: LD_VAR 0 4
25370: PPUSH
25371: LD_INT 1
25373: PPUSH
25374: CALL_OW 275
25378: PUSH
25379: LD_VAR 0 5
25383: PUSH
25384: LD_INT 1
25386: ARRAY
25387: GREATEREQUAL
25388: PUSH
25389: LD_VAR 0 4
25393: PPUSH
25394: LD_INT 2
25396: PPUSH
25397: CALL_OW 275
25401: PUSH
25402: LD_VAR 0 5
25406: PUSH
25407: LD_INT 2
25409: ARRAY
25410: GREATEREQUAL
25411: AND
25412: PUSH
25413: LD_VAR 0 4
25417: PPUSH
25418: LD_INT 3
25420: PPUSH
25421: CALL_OW 275
25425: PUSH
25426: LD_VAR 0 5
25430: PUSH
25431: LD_INT 3
25433: ARRAY
25434: GREATEREQUAL
25435: AND
25436: ST_TO_ADDR
// end ; end_of_file
25437: LD_VAR 0 3
25441: RET
// export function Action ; begin
25442: LD_INT 0
25444: PPUSH
// InGameOn ;
25445: CALL_OW 8
// CenterNowOnXY ( 25 , 35 ) ;
25449: LD_INT 25
25451: PPUSH
25452: LD_INT 35
25454: PPUSH
25455: CALL_OW 86
// RevealFogArea ( 1 , arBaseArea ) ;
25459: LD_INT 1
25461: PPUSH
25462: LD_INT 5
25464: PPUSH
25465: CALL_OW 332
// RevealFogArea ( 1 , epsilonSpawnArea ) ;
25469: LD_INT 1
25471: PPUSH
25472: LD_INT 4
25474: PPUSH
25475: CALL_OW 332
// wait ( 0 0$1.5 ) ;
25479: LD_INT 52
25481: PPUSH
25482: CALL_OW 67
// CenterNowOnUnits ( Simms ) ;
25486: LD_EXP 33
25490: PPUSH
25491: CALL_OW 87
// wait ( 0 0$3 ) ;
25495: LD_INT 105
25497: PPUSH
25498: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
25502: LD_EXP 23
25506: PPUSH
25507: CALL_OW 310
25511: PPUSH
25512: CALL_OW 85
// wait ( 0 0$1 ) ;
25516: LD_INT 35
25518: PPUSH
25519: CALL_OW 67
// if IsOk ( Gary ) then
25523: LD_EXP 32
25527: PPUSH
25528: CALL_OW 302
25532: IFFALSE 25570
// begin Say ( Gary , D2-Gary-1 ) ;
25534: LD_EXP 32
25538: PPUSH
25539: LD_STRING D2-Gary-1
25541: PPUSH
25542: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
25546: LD_EXP 23
25550: PPUSH
25551: LD_STRING D2-JMM-1
25553: PPUSH
25554: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
25558: LD_EXP 32
25562: PPUSH
25563: LD_STRING D2-Gary-2
25565: PPUSH
25566: CALL_OW 88
// end ; InGameOff ;
25570: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
25574: LD_STRING M1
25576: PPUSH
25577: CALL_OW 337
// SaveForQuickRestart ;
25581: CALL_OW 22
// end ;
25585: LD_VAR 0 1
25589: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var i , p ;
25590: LD_EXP 23
25594: PPUSH
25595: LD_EXP 33
25599: PPUSH
25600: CALL_OW 296
25604: PUSH
25605: LD_INT 15
25607: LESS
25608: IFFALSE 26568
25610: GO 25612
25612: DISABLE
25613: LD_INT 0
25615: PPUSH
25616: PPUSH
// begin wait ( 0 0$3 ) ;
25617: LD_INT 105
25619: PPUSH
25620: CALL_OW 67
// Video ( true ) ;
25624: LD_INT 1
25626: PPUSH
25627: CALL 91290 0 1
// ComExitVehicle ( JMM ) ;
25631: LD_EXP 23
25635: PPUSH
25636: CALL_OW 121
// AddComMoveUnit ( JMM , Simms ) ;
25640: LD_EXP 23
25644: PPUSH
25645: LD_EXP 33
25649: PPUSH
25650: CALL_OW 172
// CenterNowOnUnits ( JMM ) ;
25654: LD_EXP 23
25658: PPUSH
25659: CALL_OW 87
// if Truman then
25663: LD_EXP 43
25667: IFFALSE 25804
// begin ComMoveUnit ( Truman , JMM ) ;
25669: LD_EXP 43
25673: PPUSH
25674: LD_EXP 23
25678: PPUSH
25679: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
25683: LD_INT 35
25685: PPUSH
25686: CALL_OW 67
// until GetDistUnits ( Truman , JMM ) < 6 ;
25690: LD_EXP 43
25694: PPUSH
25695: LD_EXP 23
25699: PPUSH
25700: CALL_OW 296
25704: PUSH
25705: LD_INT 6
25707: LESS
25708: IFFALSE 25683
// ComTurnUnit ( Truman , JMM ) ;
25710: LD_EXP 43
25714: PPUSH
25715: LD_EXP 23
25719: PPUSH
25720: CALL_OW 119
// ComTurnUnit ( JMM , Truman ) ;
25724: LD_EXP 23
25728: PPUSH
25729: LD_EXP 43
25733: PPUSH
25734: CALL_OW 119
// Say ( Truman , D2-Tru-1 ) ;
25738: LD_EXP 43
25742: PPUSH
25743: LD_STRING D2-Tru-1
25745: PPUSH
25746: CALL_OW 88
// Say ( JMM , D2-JMM-Tru-1 ) ;
25750: LD_EXP 23
25754: PPUSH
25755: LD_STRING D2-JMM-Tru-1
25757: PPUSH
25758: CALL_OW 88
// Say ( Truman , D2-Tru-2 ) ;
25762: LD_EXP 43
25766: PPUSH
25767: LD_STRING D2-Tru-2
25769: PPUSH
25770: CALL_OW 88
// ComMoveXY ( Truman , 79 , 41 ) ;
25774: LD_EXP 43
25778: PPUSH
25779: LD_INT 79
25781: PPUSH
25782: LD_INT 41
25784: PPUSH
25785: CALL_OW 111
// AddComMoveXY ( Truman , 17 , 31 ) ;
25789: LD_EXP 43
25793: PPUSH
25794: LD_INT 17
25796: PPUSH
25797: LD_INT 31
25799: PPUSH
25800: CALL_OW 171
// end ; AddComTurnUnit ( JMM , Simms ) ;
25804: LD_EXP 23
25808: PPUSH
25809: LD_EXP 33
25813: PPUSH
25814: CALL_OW 179
// p := 15 ;
25818: LD_ADDR_VAR 0 2
25822: PUSH
25823: LD_INT 15
25825: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25826: LD_INT 35
25828: PPUSH
25829: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
25833: LD_EXP 33
25837: PUSH
25838: LD_EXP 35
25842: PUSH
25843: LD_EXP 34
25847: PUSH
25848: LD_EXP 36
25852: PUSH
25853: LD_EXP 30
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: PPUSH
25865: LD_EXP 23
25869: PPUSH
25870: CALL_OW 112
// p := p - 1 ;
25874: LD_ADDR_VAR 0 2
25878: PUSH
25879: LD_VAR 0 2
25883: PUSH
25884: LD_INT 1
25886: MINUS
25887: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
25888: LD_EXP 23
25892: PPUSH
25893: LD_EXP 33
25897: PPUSH
25898: CALL_OW 296
25902: PUSH
25903: LD_INT 5
25905: LESS
25906: PUSH
25907: LD_VAR 0 2
25911: PUSH
25912: LD_INT 0
25914: LESSEQUAL
25915: OR
25916: IFFALSE 25826
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
25918: LD_EXP 33
25922: PUSH
25923: LD_EXP 35
25927: PUSH
25928: LD_EXP 34
25932: PUSH
25933: LD_EXP 36
25937: PUSH
25938: LD_EXP 30
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: PPUSH
25950: LD_EXP 23
25954: PPUSH
25955: CALL_OW 119
// if not IsInUnit ( JMM ) then
25959: LD_EXP 23
25963: PPUSH
25964: CALL_OW 310
25968: NOT
25969: IFFALSE 25985
// ComTurnUnit ( JMM , Simms ) ;
25971: LD_EXP 23
25975: PPUSH
25976: LD_EXP 33
25980: PPUSH
25981: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
25985: LD_EXP 33
25989: PUSH
25990: LD_EXP 35
25994: PUSH
25995: LD_EXP 34
25999: PUSH
26000: LD_EXP 36
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: PPUSH
26011: LD_EXP 23
26015: PPUSH
26016: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
26020: LD_EXP 23
26024: PUSH
26025: LD_EXP 33
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PPUSH
26034: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
26038: LD_EXP 33
26042: PPUSH
26043: LD_STRING D2a-Sim-1
26045: PPUSH
26046: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
26050: LD_EXP 23
26054: PPUSH
26055: LD_STRING D2a-JMM-1
26057: PPUSH
26058: CALL_OW 88
// if IsOk ( Joan ) then
26062: LD_EXP 35
26066: PPUSH
26067: CALL_OW 302
26071: IFFALSE 26149
// begin if not IsInUnit ( JMM ) then
26073: LD_EXP 23
26077: PPUSH
26078: CALL_OW 310
26082: NOT
26083: IFFALSE 26099
// ComTurnUnit ( JMM , Joan ) ;
26085: LD_EXP 23
26089: PPUSH
26090: LD_EXP 35
26094: PPUSH
26095: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
26099: LD_EXP 35
26103: PPUSH
26104: LD_EXP 23
26108: PPUSH
26109: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
26113: LD_EXP 35
26117: PPUSH
26118: LD_STRING D2b-Joan-1
26120: PPUSH
26121: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
26125: LD_EXP 23
26129: PPUSH
26130: LD_STRING D2b-JMM-1
26132: PPUSH
26133: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
26137: LD_EXP 35
26141: PPUSH
26142: LD_STRING D2b-Joan-2
26144: PPUSH
26145: CALL_OW 88
// end ; if IsOk ( Denis ) then
26149: LD_EXP 34
26153: PPUSH
26154: CALL_OW 302
26158: IFFALSE 26212
// begin if not IsInUnit ( JMM ) then
26160: LD_EXP 23
26164: PPUSH
26165: CALL_OW 310
26169: NOT
26170: IFFALSE 26186
// ComTurnUnit ( JMM , Denis ) ;
26172: LD_EXP 23
26176: PPUSH
26177: LD_EXP 34
26181: PPUSH
26182: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
26186: LD_EXP 34
26190: PPUSH
26191: LD_EXP 23
26195: PPUSH
26196: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
26200: LD_EXP 34
26204: PPUSH
26205: LD_STRING D2c-Den-1
26207: PPUSH
26208: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
26212: LD_EXP 30
26216: PPUSH
26217: CALL_OW 302
26221: PUSH
26222: LD_STRING 08_Kikuchi
26224: PPUSH
26225: CALL_OW 28
26229: NOT
26230: AND
26231: IFFALSE 26326
// begin repeat wait ( 0 0$1 ) ;
26233: LD_INT 35
26235: PPUSH
26236: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
26240: LD_EXP 30
26244: PPUSH
26245: LD_EXP 23
26249: PPUSH
26250: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
26254: LD_EXP 23
26258: PPUSH
26259: LD_EXP 30
26263: PPUSH
26264: CALL_OW 296
26268: PUSH
26269: LD_INT 5
26271: LESS
26272: IFFALSE 26233
// ComTurnUnit ( Kikuchi , JMM ) ;
26274: LD_EXP 30
26278: PPUSH
26279: LD_EXP 23
26283: PPUSH
26284: CALL_OW 119
// if not IsInUnit ( JMM ) then
26288: LD_EXP 23
26292: PPUSH
26293: CALL_OW 310
26297: NOT
26298: IFFALSE 26314
// ComTurnUnit ( JMM , Kikuchi ) ;
26300: LD_EXP 23
26304: PPUSH
26305: LD_EXP 30
26309: PPUSH
26310: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
26314: LD_EXP 30
26318: PPUSH
26319: LD_STRING D3b-Yam-1
26321: PPUSH
26322: CALL_OW 88
// end ; if IsOk ( Khatam ) then
26326: LD_EXP 36
26330: PPUSH
26331: CALL_OW 302
26335: IFFALSE 26401
// begin if not IsInUnit ( JMM ) then
26337: LD_EXP 23
26341: PPUSH
26342: CALL_OW 310
26346: NOT
26347: IFFALSE 26363
// ComTurnUnit ( JMM , Khatam ) ;
26349: LD_EXP 23
26353: PPUSH
26354: LD_EXP 36
26358: PPUSH
26359: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
26363: LD_EXP 36
26367: PPUSH
26368: LD_EXP 23
26372: PPUSH
26373: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
26377: LD_EXP 23
26381: PPUSH
26382: LD_STRING D2c-JMM-1
26384: PPUSH
26385: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
26389: LD_EXP 36
26393: PPUSH
26394: LD_STRING D2c-Khat-1
26396: PPUSH
26397: CALL_OW 88
// end ; Video ( false ) ;
26401: LD_INT 0
26403: PPUSH
26404: CALL 91290 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff Truman , 1 ) ;
26408: LD_INT 22
26410: PUSH
26411: LD_INT 4
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PPUSH
26418: CALL_OW 69
26422: PUSH
26423: LD_EXP 43
26427: DIFF
26428: PPUSH
26429: LD_INT 1
26431: PPUSH
26432: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
26436: LD_STRING M1a
26438: PPUSH
26439: CALL_OW 337
// SetRestrict ( b_depot , 1 , true ) ;
26443: LD_INT 0
26445: PPUSH
26446: LD_INT 1
26448: PPUSH
26449: LD_INT 1
26451: PPUSH
26452: CALL_OW 324
// joinedToEpsilon := true ;
26456: LD_ADDR_EXP 7
26460: PUSH
26461: LD_INT 1
26463: ST_TO_ADDR
// wait ( 0 0$30 ) ;
26464: LD_INT 1050
26466: PPUSH
26467: CALL_OW 67
// SpawnConvoy ;
26471: CALL 10310 0 0
// wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26475: LD_INT 25200
26477: PUSH
26478: LD_INT 2100
26480: PUSH
26481: LD_OWVAR 67
26485: MUL
26486: MINUS
26487: PPUSH
26488: CALL_OW 67
// firstAttack := true ;
26492: LD_ADDR_EXP 16
26496: PUSH
26497: LD_INT 1
26499: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26500: LD_INT 107
26502: PPUSH
26503: CALL_OW 427
// for i := 1 to Difficulty do
26507: LD_ADDR_VAR 0 1
26511: PUSH
26512: DOUBLE
26513: LD_INT 1
26515: DEC
26516: ST_TO_ADDR
26517: LD_OWVAR 67
26521: PUSH
26522: FOR_TO
26523: IFFALSE 26566
// begin wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26525: LD_INT 25200
26527: PUSH
26528: LD_INT 2100
26530: PUSH
26531: LD_OWVAR 67
26535: MUL
26536: MINUS
26537: PPUSH
26538: CALL_OW 67
// if not ruActiveAttacks then
26542: LD_EXP 22
26546: NOT
26547: IFFALSE 26557
// ruActiveAttacks := true ;
26549: LD_ADDR_EXP 22
26553: PUSH
26554: LD_INT 1
26556: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26557: LD_INT 107
26559: PPUSH
26560: CALL_OW 427
// end ;
26564: GO 26522
26566: POP
26567: POP
// end ;
26568: PPOPN 2
26570: END
// every 0 0$1 trigger IsOk ( Truman ) and joinedToEpsilon do
26571: LD_EXP 43
26575: PPUSH
26576: CALL_OW 302
26580: PUSH
26581: LD_EXP 7
26585: AND
26586: IFFALSE 26657
26588: GO 26590
26590: DISABLE
// begin enable ;
26591: ENABLE
// if not HasTask ( Truman ) then
26592: LD_EXP 43
26596: PPUSH
26597: CALL_OW 314
26601: NOT
26602: IFFALSE 26616
// ComMoveToArea ( Truman , removeArea ) ;
26604: LD_EXP 43
26608: PPUSH
26609: LD_INT 10
26611: PPUSH
26612: CALL_OW 113
// if IsAt ( Truman , 17 , 32 ) or IsInArea ( Truman , removeArea ) then
26616: LD_EXP 43
26620: PPUSH
26621: LD_INT 17
26623: PPUSH
26624: LD_INT 32
26626: PPUSH
26627: CALL_OW 307
26631: PUSH
26632: LD_EXP 43
26636: PPUSH
26637: LD_INT 10
26639: PPUSH
26640: CALL_OW 308
26644: OR
26645: IFFALSE 26657
// begin RemoveUnit ( Truman ) ;
26647: LD_EXP 43
26651: PPUSH
26652: CALL_OW 64
// disable ;
26656: DISABLE
// end ; end ;
26657: END
// export function DTankTeleport ( x , y ) ; begin
26658: LD_INT 0
26660: PPUSH
// DialogueOn ;
26661: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
26665: LD_VAR 0 1
26669: PPUSH
26670: LD_VAR 0 2
26674: PPUSH
26675: CALL_OW 86
// if IsOk ( Cyrus ) then
26679: LD_EXP 27
26683: PPUSH
26684: CALL_OW 302
26688: IFFALSE 26704
// Say ( Cyrus , D10-Cyrus-1 ) else
26690: LD_EXP 27
26694: PPUSH
26695: LD_STRING D10-Cyrus-1
26697: PPUSH
26698: CALL_OW 88
26702: GO 26727
// if IsOk ( JMM ) then
26704: LD_EXP 23
26708: PPUSH
26709: CALL_OW 302
26713: IFFALSE 26727
// Say ( JMM , D10-JMM-1 ) ;
26715: LD_EXP 23
26719: PPUSH
26720: LD_STRING D10-JMM-1
26722: PPUSH
26723: CALL_OW 88
// DialogueOff ;
26727: CALL_OW 7
// end ;
26731: LD_VAR 0 3
26735: RET
// export function DAttackOnAlly ; begin
26736: LD_INT 0
26738: PPUSH
// DialogueOn ;
26739: CALL_OW 6
// dwait ( 0 0$0.3 ) ;
26743: LD_INT 10
26745: PPUSH
26746: CALL_OW 68
// SayRadio ( Powell , D6b-Pow-1 ) ;
26750: LD_EXP 44
26754: PPUSH
26755: LD_STRING D6b-Pow-1
26757: PPUSH
26758: CALL_OW 94
// YouLost ( Powell ) ;
26762: LD_STRING Powell
26764: PPUSH
26765: CALL_OW 104
// DialogueOff ;
26769: CALL_OW 7
// end ;
26773: LD_VAR 0 1
26777: RET
// every 0 0$5 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
26778: LD_INT 5
26780: PPUSH
26781: LD_INT 22
26783: PUSH
26784: LD_INT 1
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 21
26793: PUSH
26794: LD_INT 3
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PPUSH
26805: CALL_OW 70
26809: PUSH
26810: LD_INT 5
26812: PPUSH
26813: LD_INT 22
26815: PUSH
26816: LD_INT 1
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 21
26825: PUSH
26826: LD_INT 2
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PPUSH
26837: CALL_OW 70
26841: OR
26842: PUSH
26843: LD_INT 1
26845: PPUSH
26846: LD_INT 2
26848: PPUSH
26849: CALL_OW 81
26853: PUSH
26854: LD_INT 1
26856: EQUAL
26857: AND
26858: IFFALSE 27093
26860: GO 26862
26862: DISABLE
// begin if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
26863: LD_INT 5
26865: PPUSH
26866: LD_INT 22
26868: PUSH
26869: LD_INT 1
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 21
26878: PUSH
26879: LD_INT 3
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PPUSH
26890: CALL_OW 70
26894: PUSH
26895: LD_INT 5
26897: PPUSH
26898: LD_INT 22
26900: PUSH
26901: LD_INT 1
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 21
26910: PUSH
26911: LD_INT 2
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PPUSH
26922: CALL_OW 70
26926: OR
26927: PUSH
26928: LD_INT 1
26930: PPUSH
26931: LD_INT 2
26933: PPUSH
26934: CALL_OW 81
26938: PUSH
26939: LD_INT 1
26941: EQUAL
26942: AND
26943: IFFALSE 26952
// Query ( QAttack ) ;
26945: LD_STRING QAttack
26947: PPUSH
26948: CALL_OW 97
// wait ( 0 0$20 ) ;
26952: LD_INT 700
26954: PPUSH
26955: CALL_OW 67
// repeat wait ( 0 0$10 ) ;
26959: LD_INT 350
26961: PPUSH
26962: CALL_OW 67
// if arabianAttack then
26966: LD_EXP 4
26970: IFFALSE 26974
// exit ;
26972: GO 27093
// until ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend ;
26974: LD_INT 5
26976: PPUSH
26977: LD_INT 22
26979: PUSH
26980: LD_INT 1
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 21
26989: PUSH
26990: LD_INT 3
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PPUSH
27001: CALL_OW 70
27005: PUSH
27006: LD_INT 5
27008: PPUSH
27009: LD_INT 22
27011: PUSH
27012: LD_INT 1
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 21
27021: PUSH
27022: LD_INT 2
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PPUSH
27033: CALL_OW 70
27037: OR
27038: PUSH
27039: LD_INT 1
27041: PPUSH
27042: LD_INT 2
27044: PPUSH
27045: CALL_OW 81
27049: PUSH
27050: LD_INT 1
27052: EQUAL
27053: AND
27054: IFFALSE 26959
// InGameOn ;
27056: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
27060: LD_INT 73
27062: PPUSH
27063: LD_INT 18
27065: PPUSH
27066: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
27070: LD_EXP 44
27074: PPUSH
27075: LD_STRING D6b-Pow-1
27077: PPUSH
27078: CALL_OW 94
// YouLost ( Powell ) ;
27082: LD_STRING Powell
27084: PPUSH
27085: CALL_OW 104
// InGameOff ;
27089: CALL_OW 9
// end ;
27093: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
27094: LD_INT 12
27096: PPUSH
27097: LD_INT 1
27099: PPUSH
27100: CALL_OW 321
27104: PUSH
27105: LD_INT 2
27107: EQUAL
27108: IFFALSE 27120
27110: GO 27112
27112: DISABLE
// ChangeMissionObjectives ( M2b ) ;
27113: LD_STRING M2b
27115: PPUSH
27116: CALL_OW 337
27120: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
27121: LD_INT 32
27123: PPUSH
27124: LD_INT 1
27126: PPUSH
27127: CALL_OW 321
27131: PUSH
27132: LD_INT 2
27134: EQUAL
27135: IFFALSE 27147
27137: GO 27139
27139: DISABLE
// ChangeMissionObjectives ( M2c ) ;
27140: LD_STRING M2c
27142: PPUSH
27143: CALL_OW 337
27147: END
// every 0 0$1 trigger arabianAttack and arabianAttackSpawned and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and UnitFilter ( arAttackersVeh , [ f_ok ] ) = 0 and UnitFilter ( arAttackersInf , [ f_ok ] ) = 0 do
27148: LD_EXP 4
27152: PUSH
27153: LD_EXP 12
27157: AND
27158: PUSH
27159: LD_INT 22
27161: PUSH
27162: LD_INT 2
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 21
27171: PUSH
27172: LD_INT 1
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PPUSH
27183: CALL_OW 69
27187: PUSH
27188: LD_INT 0
27190: EQUAL
27191: AND
27192: PUSH
27193: LD_EXP 58
27197: PPUSH
27198: LD_INT 50
27200: PUSH
27201: EMPTY
27202: LIST
27203: PPUSH
27204: CALL_OW 72
27208: PUSH
27209: LD_INT 0
27211: EQUAL
27212: AND
27213: PUSH
27214: LD_EXP 57
27218: PPUSH
27219: LD_INT 50
27221: PUSH
27222: EMPTY
27223: LIST
27224: PPUSH
27225: CALL_OW 72
27229: PUSH
27230: LD_INT 0
27232: EQUAL
27233: AND
27234: IFFALSE 27254
27236: GO 27238
27238: DISABLE
// begin arabianDefeated := true ;
27239: LD_ADDR_EXP 8
27243: PUSH
27244: LD_INT 1
27246: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
27247: LD_STRING M4a
27249: PPUSH
27250: CALL_OW 337
// end ;
27254: END
// every 0 0$1 trigger GetTech ( tech_Sib1 , 1 ) = state_researched and GetTech ( tech_Sib2 , 1 ) = state_researched and GetTech ( tech_SibPow , 1 ) = state_researched and GetTech ( tech_SibEng , 1 ) = state_researched do
27255: LD_INT 54
27257: PPUSH
27258: LD_INT 1
27260: PPUSH
27261: CALL_OW 321
27265: PUSH
27266: LD_INT 2
27268: EQUAL
27269: PUSH
27270: LD_INT 55
27272: PPUSH
27273: LD_INT 1
27275: PPUSH
27276: CALL_OW 321
27280: PUSH
27281: LD_INT 2
27283: EQUAL
27284: AND
27285: PUSH
27286: LD_INT 21
27288: PPUSH
27289: LD_INT 1
27291: PPUSH
27292: CALL_OW 321
27296: PUSH
27297: LD_INT 2
27299: EQUAL
27300: AND
27301: PUSH
27302: LD_INT 22
27304: PPUSH
27305: LD_INT 1
27307: PPUSH
27308: CALL_OW 321
27312: PUSH
27313: LD_INT 2
27315: EQUAL
27316: AND
27317: IFFALSE 27329
27319: GO 27321
27321: DISABLE
// ChangeMissionObjectives ( M2a ) ;
27322: LD_STRING M2a
27324: PPUSH
27325: CALL_OW 337
27329: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) do var garySpeaker , deltaSpeaker , tmp1 , tmp2 , tmp3 ;
27330: LD_INT 22
27332: PUSH
27333: LD_INT 1
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 3
27342: PUSH
27343: LD_INT 57
27345: PUSH
27346: EMPTY
27347: LIST
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 63
27355: PUSH
27356: LD_INT 11
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: LIST
27367: PPUSH
27368: CALL_OW 69
27372: IFFALSE 28598
27374: GO 27376
27376: DISABLE
27377: LD_INT 0
27379: PPUSH
27380: PPUSH
27381: PPUSH
27382: PPUSH
27383: PPUSH
// begin garySpeaker := IsOk ( Gary ) ;
27384: LD_ADDR_VAR 0 1
27388: PUSH
27389: LD_EXP 32
27393: PPUSH
27394: CALL_OW 302
27398: ST_TO_ADDR
// deltaSpeaker := IsOk ( DeltaDoctor ) ;
27399: LD_ADDR_VAR 0 2
27403: PUSH
27404: LD_EXP 39
27408: PPUSH
27409: CALL_OW 302
27413: ST_TO_ADDR
// tmp1 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27414: LD_ADDR_VAR 0 3
27418: PUSH
27419: LD_INT 22
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 50
27431: PUSH
27432: EMPTY
27433: LIST
27434: PUSH
27435: LD_INT 25
27437: PUSH
27438: LD_INT 4
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 26
27447: PUSH
27448: LD_INT 1
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: PPUSH
27461: CALL_OW 69
27465: PUSH
27466: LD_EXP 23
27470: PUSH
27471: LD_EXP 24
27475: PUSH
27476: LD_EXP 25
27480: PUSH
27481: LD_EXP 26
27485: PUSH
27486: LD_EXP 27
27490: PUSH
27491: LD_EXP 28
27495: PUSH
27496: LD_EXP 29
27500: PUSH
27501: LD_EXP 30
27505: PUSH
27506: LD_EXP 31
27510: PUSH
27511: LD_EXP 32
27515: PUSH
27516: LD_EXP 33
27520: PUSH
27521: LD_EXP 34
27525: PUSH
27526: LD_EXP 35
27530: PUSH
27531: LD_EXP 36
27535: PUSH
27536: LD_EXP 37
27540: PUSH
27541: LD_EXP 38
27545: PUSH
27546: LD_EXP 39
27550: PUSH
27551: LD_EXP 40
27555: PUSH
27556: LD_EXP 42
27560: PUSH
27561: LD_EXP 44
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: DIFF
27588: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27589: LD_ADDR_VAR 0 4
27593: PUSH
27594: LD_INT 22
27596: PUSH
27597: LD_INT 1
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: LD_INT 50
27606: PUSH
27607: EMPTY
27608: LIST
27609: PUSH
27610: LD_INT 26
27612: PUSH
27613: LD_INT 1
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 2
27622: PUSH
27623: LD_INT 25
27625: PUSH
27626: LD_INT 1
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 25
27635: PUSH
27636: LD_INT 2
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 25
27645: PUSH
27646: LD_INT 3
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: PPUSH
27665: CALL_OW 69
27669: PUSH
27670: LD_EXP 23
27674: PUSH
27675: LD_EXP 24
27679: PUSH
27680: LD_EXP 25
27684: PUSH
27685: LD_EXP 26
27689: PUSH
27690: LD_EXP 27
27694: PUSH
27695: LD_EXP 28
27699: PUSH
27700: LD_EXP 29
27704: PUSH
27705: LD_EXP 30
27709: PUSH
27710: LD_EXP 31
27714: PUSH
27715: LD_EXP 32
27719: PUSH
27720: LD_EXP 33
27724: PUSH
27725: LD_EXP 34
27729: PUSH
27730: LD_EXP 35
27734: PUSH
27735: LD_EXP 36
27739: PUSH
27740: LD_EXP 37
27744: PUSH
27745: LD_EXP 38
27749: PUSH
27750: LD_EXP 39
27754: PUSH
27755: LD_EXP 40
27759: PUSH
27760: LD_EXP 42
27764: PUSH
27765: LD_EXP 44
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: DIFF
27792: ST_TO_ADDR
// if tmp1 then
27793: LD_VAR 0 3
27797: IFFALSE 27813
// tmp1 := tmp1 [ 1 ] ;
27799: LD_ADDR_VAR 0 3
27803: PUSH
27804: LD_VAR 0 3
27808: PUSH
27809: LD_INT 1
27811: ARRAY
27812: ST_TO_ADDR
// if tmp2 then
27813: LD_VAR 0 4
27817: IFFALSE 27833
// tmp2 := tmp2 [ 1 ] ;
27819: LD_ADDR_VAR 0 4
27823: PUSH
27824: LD_VAR 0 4
27828: PUSH
27829: LD_INT 1
27831: ARRAY
27832: ST_TO_ADDR
// if ( garySpeaker or tmp2 ) and ( deltaSpeaker or tmp1 ) then
27833: LD_VAR 0 1
27837: PUSH
27838: LD_VAR 0 4
27842: OR
27843: PUSH
27844: LD_VAR 0 2
27848: PUSH
27849: LD_VAR 0 3
27853: OR
27854: AND
27855: IFFALSE 28049
// begin DialogueOn ;
27857: CALL_OW 6
// if deltaSpeaker then
27861: LD_VAR 0 2
27865: IFFALSE 27881
// Say ( DeltaDoctor , D3-Sci1-1 ) else
27867: LD_EXP 39
27871: PPUSH
27872: LD_STRING D3-Sci1-1
27874: PPUSH
27875: CALL_OW 88
27879: GO 27893
// Say ( tmp1 , D3-Sci1-1 ) ;
27881: LD_VAR 0 3
27885: PPUSH
27886: LD_STRING D3-Sci1-1
27888: PPUSH
27889: CALL_OW 88
// if garySpeaker then
27893: LD_VAR 0 1
27897: IFFALSE 27913
// Say ( Gary , D3-Gary-1 ) else
27899: LD_EXP 32
27903: PPUSH
27904: LD_STRING D3-Gary-1
27906: PPUSH
27907: CALL_OW 88
27911: GO 27925
// Say ( tmp2 , D3-Gary-1 ) ;
27913: LD_VAR 0 4
27917: PPUSH
27918: LD_STRING D3-Gary-1
27920: PPUSH
27921: CALL_OW 88
// if deltaSpeaker then
27925: LD_VAR 0 2
27929: IFFALSE 27945
// Say ( DeltaDoctor , D3-Sci1-2 ) else
27931: LD_EXP 39
27935: PPUSH
27936: LD_STRING D3-Sci1-2
27938: PPUSH
27939: CALL_OW 88
27943: GO 27957
// Say ( tmp1 , D3-Sci1-2 ) ;
27945: LD_VAR 0 3
27949: PPUSH
27950: LD_STRING D3-Sci1-2
27952: PPUSH
27953: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
27957: LD_EXP 23
27961: PPUSH
27962: LD_STRING D3-JMM-2
27964: PPUSH
27965: CALL_OW 88
// if deltaSpeaker then
27969: LD_VAR 0 2
27973: IFFALSE 27989
// Say ( DeltaDoctor , D3-Sci1-3 ) else
27975: LD_EXP 39
27979: PPUSH
27980: LD_STRING D3-Sci1-3
27982: PPUSH
27983: CALL_OW 88
27987: GO 28001
// Say ( tmp1 , D3-Sci1-3 ) ;
27989: LD_VAR 0 3
27993: PPUSH
27994: LD_STRING D3-Sci1-3
27996: PPUSH
27997: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
28001: LD_EXP 23
28005: PPUSH
28006: LD_STRING D3-JMM-3
28008: PPUSH
28009: CALL_OW 88
// if deltaSpeaker then
28013: LD_VAR 0 2
28017: IFFALSE 28033
// Say ( DeltaDoctor , D3-Sci1-4 ) else
28019: LD_EXP 39
28023: PPUSH
28024: LD_STRING D3-Sci1-4
28026: PPUSH
28027: CALL_OW 88
28031: GO 28045
// Say ( tmp1 , D3-Sci1-4 ) ;
28033: LD_VAR 0 3
28037: PPUSH
28038: LD_STRING D3-Sci1-4
28040: PPUSH
28041: CALL_OW 88
// DialogueOff ;
28045: CALL_OW 7
// end ; SetTech ( tech_LasSight , 1 , state_enabled ) ;
28049: LD_INT 12
28051: PPUSH
28052: LD_INT 1
28054: PPUSH
28055: LD_INT 1
28057: PPUSH
28058: CALL_OW 322
// SetTech ( tech_Rocket , 1 , state_enabled ) ;
28062: LD_INT 40
28064: PPUSH
28065: LD_INT 1
28067: PPUSH
28068: LD_INT 1
28070: PPUSH
28071: CALL_OW 322
// SetTech ( tech_AI , 1 , state_enabled ) ;
28075: LD_INT 32
28077: PPUSH
28078: LD_INT 1
28080: PPUSH
28081: LD_INT 1
28083: PPUSH
28084: CALL_OW 322
// SetRestrict ( b_turret , 1 , true ) ;
28088: LD_INT 33
28090: PPUSH
28091: LD_INT 1
28093: PPUSH
28094: LD_INT 1
28096: PPUSH
28097: CALL_OW 324
// SetRestrict ( b_lab_computer , 1 , true ) ;
28101: LD_INT 12
28103: PPUSH
28104: LD_INT 1
28106: PPUSH
28107: LD_INT 1
28109: PPUSH
28110: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
28114: LD_STRING M2
28116: PPUSH
28117: CALL_OW 337
// wait ( 3 3$0 ) ;
28121: LD_INT 6300
28123: PPUSH
28124: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
28128: LD_INT 35
28130: PPUSH
28131: CALL_OW 67
// until not InBattle ( 1 ) ;
28135: LD_INT 1
28137: PPUSH
28138: CALL_OW 463
28142: NOT
28143: IFFALSE 28128
// if IsOk ( Simms ) and deltaSpeaker then
28145: LD_EXP 33
28149: PPUSH
28150: CALL_OW 302
28154: PUSH
28155: LD_VAR 0 2
28159: AND
28160: IFFALSE 28329
// begin DialogueOn ;
28162: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28166: LD_EXP 33
28170: PPUSH
28171: LD_STRING D3a-Sim-1
28173: PPUSH
28174: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
28178: LD_EXP 39
28182: PPUSH
28183: LD_STRING D3a-Sci1-1
28185: PPUSH
28186: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28190: LD_EXP 33
28194: PPUSH
28195: LD_STRING D3a-Sim-2
28197: PPUSH
28198: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
28202: LD_EXP 39
28206: PPUSH
28207: LD_STRING D3a-Sci1-2
28209: PPUSH
28210: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28214: LD_EXP 33
28218: PPUSH
28219: LD_STRING D3a-Sim-3
28221: PPUSH
28222: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
28226: LD_EXP 39
28230: PPUSH
28231: LD_STRING D3a-Sci1-3
28233: PPUSH
28234: CALL_OW 88
// if IsOK ( Joan ) then
28238: LD_EXP 35
28242: PPUSH
28243: CALL_OW 302
28247: IFFALSE 28263
// Say ( Simms , D3a-Sim-4 ) else
28249: LD_EXP 33
28253: PPUSH
28254: LD_STRING D3a-Sim-4
28256: PPUSH
28257: CALL_OW 88
28261: GO 28275
// Say ( Simms , D3a-Sim-4a ) ;
28263: LD_EXP 33
28267: PPUSH
28268: LD_STRING D3a-Sim-4a
28270: PPUSH
28271: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
28275: LD_EXP 39
28279: PPUSH
28280: LD_STRING D3a-Sci1-4
28282: PPUSH
28283: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28287: LD_EXP 33
28291: PPUSH
28292: LD_STRING D3a-Sim-5
28294: PPUSH
28295: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
28299: LD_EXP 39
28303: PPUSH
28304: LD_STRING D3a-Sci1-5
28306: PPUSH
28307: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28311: LD_EXP 33
28315: PPUSH
28316: LD_STRING D3a-Sim-6
28318: PPUSH
28319: CALL_OW 88
// DialogueOff ;
28323: CALL_OW 7
// end else
28327: GO 28598
// begin tmp3 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_class , 4 ] ] ) diff [ JMM , Frank , Lisa , Simms , Khatam ] ;
28329: LD_ADDR_VAR 0 5
28333: PUSH
28334: LD_INT 22
28336: PUSH
28337: LD_INT 1
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 26
28346: PUSH
28347: LD_INT 1
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 25
28356: PUSH
28357: LD_INT 4
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: LIST
28368: PPUSH
28369: CALL_OW 69
28373: PUSH
28374: LD_EXP 23
28378: PUSH
28379: LD_EXP 29
28383: PUSH
28384: LD_EXP 28
28388: PUSH
28389: LD_EXP 33
28393: PUSH
28394: LD_EXP 36
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: DIFF
28406: ST_TO_ADDR
// if tmp3 then
28407: LD_VAR 0 5
28411: IFFALSE 28598
// begin DialogueOn ;
28413: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28417: LD_EXP 33
28421: PPUSH
28422: LD_STRING D3a-Sim-1
28424: PPUSH
28425: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
28429: LD_VAR 0 5
28433: PUSH
28434: LD_INT 1
28436: ARRAY
28437: PPUSH
28438: LD_STRING D3a-Sci1-1
28440: PPUSH
28441: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28445: LD_EXP 33
28449: PPUSH
28450: LD_STRING D3a-Sim-2
28452: PPUSH
28453: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
28457: LD_VAR 0 5
28461: PUSH
28462: LD_INT 1
28464: ARRAY
28465: PPUSH
28466: LD_STRING D3a-Sci1-2
28468: PPUSH
28469: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28473: LD_EXP 33
28477: PPUSH
28478: LD_STRING D3a-Sim-3
28480: PPUSH
28481: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
28485: LD_VAR 0 5
28489: PUSH
28490: LD_INT 1
28492: ARRAY
28493: PPUSH
28494: LD_STRING D3a-Sci1-3
28496: PPUSH
28497: CALL_OW 88
// if IsOK ( Joan ) then
28501: LD_EXP 35
28505: PPUSH
28506: CALL_OW 302
28510: IFFALSE 28526
// Say ( Simms , D3a-Sim-4 ) else
28512: LD_EXP 33
28516: PPUSH
28517: LD_STRING D3a-Sim-4
28519: PPUSH
28520: CALL_OW 88
28524: GO 28538
// Say ( Simms , D3a-Sim-4a ) ;
28526: LD_EXP 33
28530: PPUSH
28531: LD_STRING D3a-Sim-4a
28533: PPUSH
28534: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
28538: LD_VAR 0 5
28542: PUSH
28543: LD_INT 1
28545: ARRAY
28546: PPUSH
28547: LD_STRING D3a-Sci1-4
28549: PPUSH
28550: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28554: LD_EXP 33
28558: PPUSH
28559: LD_STRING D3a-Sim-5
28561: PPUSH
28562: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
28566: LD_VAR 0 5
28570: PUSH
28571: LD_INT 1
28573: ARRAY
28574: PPUSH
28575: LD_STRING D3a-Sci1-5
28577: PPUSH
28578: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28582: LD_EXP 33
28586: PPUSH
28587: LD_STRING D3a-Sim-6
28589: PPUSH
28590: CALL_OW 88
// DialogueOff ;
28594: CALL_OW 7
// end ; end ; end ;
28598: PPOPN 5
28600: END
// export function DRussianNextAttack ; begin
28601: LD_INT 0
28603: PPUSH
// SayRadio ( AmScout , D4-FSol1-2 ) ;
28604: LD_EXP 40
28608: PPUSH
28609: LD_STRING D4-FSol1-2
28611: PPUSH
28612: CALL_OW 94
// end ;
28616: LD_VAR 0 1
28620: RET
// export function DRussianConvoy ; begin
28621: LD_INT 0
28623: PPUSH
// SayRadio ( AmScout , D4-FSol1-1 ) ;
28624: LD_EXP 40
28628: PPUSH
28629: LD_STRING D4-FSol1-1
28631: PPUSH
28632: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
28636: LD_STRING M3
28638: PPUSH
28639: CALL_OW 337
// end ;
28643: LD_VAR 0 1
28647: RET
// export function DRussianSpaceAmmo ( unit ) ; begin
28648: LD_INT 0
28650: PPUSH
// CenterNowOnUnits ( unit ) ;
28651: LD_VAR 0 1
28655: PPUSH
28656: CALL_OW 87
// DialogueOn ;
28660: CALL_OW 6
// if IsOK ( Cyrus ) then
28664: LD_EXP 27
28668: PPUSH
28669: CALL_OW 302
28673: IFFALSE 28689
// Say ( Cyrus , D9a-Cyrus-1 ) else
28675: LD_EXP 27
28679: PPUSH
28680: LD_STRING D9a-Cyrus-1
28682: PPUSH
28683: CALL_OW 88
28687: GO 28811
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
28689: LD_INT 22
28691: PUSH
28692: LD_INT 1
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 26
28701: PUSH
28702: LD_INT 1
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 2
28711: PUSH
28712: LD_INT 25
28714: PUSH
28715: LD_INT 1
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 25
28724: PUSH
28725: LD_INT 2
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 25
28734: PUSH
28735: LD_INT 3
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 25
28744: PUSH
28745: LD_INT 4
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 25
28754: PUSH
28755: LD_INT 5
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: LIST
28774: PPUSH
28775: CALL_OW 69
28779: PUSH
28780: LD_EXP 23
28784: PUSH
28785: LD_EXP 36
28789: PUSH
28790: LD_EXP 27
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: LIST
28799: DIFF
28800: PPUSH
28801: LD_STRING D9a-Sol1-1
28803: PPUSH
28804: LD_STRING D9a-Sol1-1
28806: PPUSH
28807: CALL 25060 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
28811: LD_INT 22
28813: PUSH
28814: LD_INT 1
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: LD_INT 26
28823: PUSH
28824: LD_INT 1
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 2
28833: PUSH
28834: LD_INT 25
28836: PUSH
28837: LD_INT 1
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 25
28846: PUSH
28847: LD_INT 2
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 25
28856: PUSH
28857: LD_INT 3
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 25
28866: PUSH
28867: LD_INT 4
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 25
28876: PUSH
28877: LD_INT 5
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: LIST
28896: PPUSH
28897: CALL_OW 69
28901: PUSH
28902: LD_EXP 23
28906: PUSH
28907: LD_EXP 36
28911: PUSH
28912: LD_EXP 27
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: LIST
28921: DIFF
28922: PPUSH
28923: LD_STRING D9b-Sol1-1
28925: PPUSH
28926: LD_STRING D9b-Sol1-1
28928: PPUSH
28929: CALL 25060 0 3
// if LoadVariable ( 09_arInfo , 0 ) then
28933: LD_STRING 09_arInfo
28935: PPUSH
28936: LD_INT 0
28938: PPUSH
28939: CALL_OW 30
28943: IFFALSE 28957
// Say ( JMM , D9a-JMM-1 ) ;
28945: LD_EXP 23
28949: PPUSH
28950: LD_STRING D9a-JMM-1
28952: PPUSH
28953: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
28957: LD_EXP 23
28961: PPUSH
28962: LD_STRING D9c-JMM-1
28964: PPUSH
28965: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) then
28969: LD_INT 22
28971: PUSH
28972: LD_INT 1
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 25
28981: PUSH
28982: LD_INT 5
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PPUSH
28993: CALL_OW 69
28997: IFFALSE 29011
// Say ( JMM , D9c-JMM-1a ) ;
28999: LD_EXP 23
29003: PPUSH
29004: LD_STRING D9c-JMM-1a
29006: PPUSH
29007: CALL_OW 88
// DialogueOff ;
29011: CALL_OW 7
// end ;
29015: LD_VAR 0 2
29019: RET
// export function DArabTrait1 ; var tmp ; begin
29020: LD_INT 0
29022: PPUSH
29023: PPUSH
// if IsOk ( DeltaDoctor ) then
29024: LD_EXP 39
29028: PPUSH
29029: CALL_OW 302
29033: IFFALSE 29047
// tmp := DeltaDoctor else
29035: LD_ADDR_VAR 0 2
29039: PUSH
29040: LD_EXP 39
29044: ST_TO_ADDR
29045: GO 29245
// if IsOk ( Denis ) then
29047: LD_EXP 34
29051: PPUSH
29052: CALL_OW 302
29056: IFFALSE 29070
// tmp := Denis else
29058: LD_ADDR_VAR 0 2
29062: PUSH
29063: LD_EXP 34
29067: ST_TO_ADDR
29068: GO 29245
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
29070: LD_ADDR_VAR 0 2
29074: PUSH
29075: LD_INT 22
29077: PUSH
29078: LD_INT 1
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 50
29087: PUSH
29088: EMPTY
29089: LIST
29090: PUSH
29091: LD_INT 25
29093: PUSH
29094: LD_INT 4
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 26
29103: PUSH
29104: LD_INT 1
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: PPUSH
29117: CALL_OW 69
29121: PUSH
29122: LD_EXP 23
29126: PUSH
29127: LD_EXP 24
29131: PUSH
29132: LD_EXP 25
29136: PUSH
29137: LD_EXP 26
29141: PUSH
29142: LD_EXP 27
29146: PUSH
29147: LD_EXP 28
29151: PUSH
29152: LD_EXP 29
29156: PUSH
29157: LD_EXP 30
29161: PUSH
29162: LD_EXP 31
29166: PUSH
29167: LD_EXP 32
29171: PUSH
29172: LD_EXP 33
29176: PUSH
29177: LD_EXP 34
29181: PUSH
29182: LD_EXP 35
29186: PUSH
29187: LD_EXP 36
29191: PUSH
29192: LD_EXP 37
29196: PUSH
29197: LD_EXP 38
29201: PUSH
29202: LD_EXP 39
29206: PUSH
29207: LD_EXP 40
29211: PUSH
29212: LD_EXP 42
29216: PUSH
29217: LD_EXP 44
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: DIFF
29244: ST_TO_ADDR
// if not tmp then
29245: LD_VAR 0 2
29249: NOT
29250: IFFALSE 29254
// exit ;
29252: GO 29346
// DialogueOn ;
29254: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
29258: LD_EXP 23
29262: PPUSH
29263: LD_STRING D6-JMM-1
29265: PPUSH
29266: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
29270: LD_VAR 0 2
29274: PPUSH
29275: LD_STRING D6-Sci1-1
29277: PPUSH
29278: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
29282: LD_EXP 23
29286: PPUSH
29287: LD_STRING D6-JMM-2
29289: PPUSH
29290: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
29294: LD_VAR 0 2
29298: PPUSH
29299: LD_STRING D6-Sci1-2
29301: PPUSH
29302: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
29306: LD_EXP 23
29310: PPUSH
29311: LD_STRING D6-JMM-3
29313: PPUSH
29314: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
29318: LD_VAR 0 2
29322: PPUSH
29323: LD_STRING D6-Sci1-3
29325: PPUSH
29326: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
29330: LD_EXP 23
29334: PPUSH
29335: LD_STRING D6-JMM-4
29337: PPUSH
29338: CALL_OW 88
// DialogueOff ;
29342: CALL_OW 7
// end ;
29346: LD_VAR 0 1
29350: RET
// export function DArabTrait2 ; begin
29351: LD_INT 0
29353: PPUSH
// if not IsPlaced ( Khatam ) or not IsOk ( Ahmed ) or not IsOk ( Dietrich ) then
29354: LD_EXP 36
29358: PPUSH
29359: CALL_OW 305
29363: NOT
29364: PUSH
29365: LD_EXP 51
29369: PPUSH
29370: CALL_OW 302
29374: NOT
29375: OR
29376: PUSH
29377: LD_EXP 50
29381: PPUSH
29382: CALL_OW 302
29386: NOT
29387: OR
29388: IFFALSE 29392
// exit ;
29390: GO 29448
// DialogueOn ;
29392: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
29396: LD_EXP 51
29400: PPUSH
29401: LD_STRING D5-Ar1-1
29403: PPUSH
29404: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
29408: LD_EXP 50
29412: PPUSH
29413: LD_STRING D5-Diet-1
29415: PPUSH
29416: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
29420: LD_EXP 51
29424: PPUSH
29425: LD_STRING D5-Ar1-2
29427: PPUSH
29428: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
29432: LD_EXP 50
29436: PPUSH
29437: LD_STRING D5-Diet-2
29439: PPUSH
29440: CALL_OW 88
// DialogueOff ;
29444: CALL_OW 7
// end ;
29448: LD_VAR 0 1
29452: RET
// every 0 0$2 trigger arabianAttack do var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding , speaker ;
29453: LD_EXP 4
29457: IFFALSE 31131
29459: GO 29461
29461: DISABLE
29462: LD_INT 0
29464: PPUSH
29465: PPUSH
29466: PPUSH
29467: PPUSH
29468: PPUSH
29469: PPUSH
29470: PPUSH
29471: PPUSH
// begin SetAttitude ( 2 , 3 , att_friend , true ) ;
29472: LD_INT 2
29474: PPUSH
29475: LD_INT 3
29477: PPUSH
29478: LD_INT 1
29480: PPUSH
29481: LD_INT 1
29483: PPUSH
29484: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
29488: LD_INT 2
29490: PPUSH
29491: LD_INT 6
29493: PPUSH
29494: LD_INT 1
29496: PPUSH
29497: LD_INT 1
29499: PPUSH
29500: CALL_OW 80
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
29504: LD_ADDR_VAR 0 5
29508: PUSH
29509: LD_INT 22
29511: PUSH
29512: LD_INT 2
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 2
29521: PUSH
29522: LD_INT 25
29524: PUSH
29525: LD_INT 4
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 25
29534: PUSH
29535: LD_INT 2
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 25
29544: PUSH
29545: LD_INT 3
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PPUSH
29562: CALL_OW 69
29566: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
29567: LD_ADDR_VAR 0 4
29571: PUSH
29572: LD_INT 22
29574: PUSH
29575: LD_INT 2
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 21
29584: PUSH
29585: LD_INT 1
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 2
29594: PUSH
29595: LD_INT 25
29597: PUSH
29598: LD_INT 1
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 25
29607: PUSH
29608: LD_INT 8
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 25
29617: PUSH
29618: LD_INT 15
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: LIST
29635: PPUSH
29636: CALL_OW 69
29640: PUSH
29641: LD_EXP 50
29645: PUSH
29646: EMPTY
29647: LIST
29648: DIFF
29649: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
29650: LD_ADDR_VAR 0 6
29654: PUSH
29655: LD_INT 22
29657: PUSH
29658: LD_INT 2
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 30
29667: PUSH
29668: LD_INT 5
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PPUSH
29679: CALL_OW 69
29683: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
29684: LD_VAR 0 5
29688: PPUSH
29689: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
29693: LD_VAR 0 4
29697: PPUSH
29698: CALL_OW 122
// RaiseSailEvent ( EArabAttack ) ;
29702: LD_INT 101
29704: PPUSH
29705: CALL_OW 427
// SayRadio ( AmScout , D4-FSol1-3 ) ;
29709: LD_EXP 40
29713: PPUSH
29714: LD_STRING D4-FSol1-3
29716: PPUSH
29717: CALL_OW 94
// wait ( 0 0$3 ) ;
29721: LD_INT 105
29723: PPUSH
29724: CALL_OW 67
// for i in arCivilian do
29728: LD_ADDR_VAR 0 1
29732: PUSH
29733: LD_VAR 0 5
29737: PUSH
29738: FOR_IN
29739: IFFALSE 29771
// AddComEnterUnit ( arCivilian , barracks [ i mod 2 + 1 ] ) ;
29741: LD_VAR 0 5
29745: PPUSH
29746: LD_VAR 0 6
29750: PUSH
29751: LD_VAR 0 1
29755: PUSH
29756: LD_INT 2
29758: MOD
29759: PUSH
29760: LD_INT 1
29762: PLUS
29763: ARRAY
29764: PPUSH
29765: CALL_OW 180
29769: GO 29738
29771: POP
29772: POP
// AddComChangeProfession ( arCivilian , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
29773: LD_VAR 0 5
29777: PPUSH
29778: LD_INT 1
29780: PUSH
29781: LD_INT 8
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 1
29790: PPUSH
29791: LD_INT 2
29793: PPUSH
29794: CALL_OW 12
29798: ARRAY
29799: PPUSH
29800: CALL_OW 183
// AddComExitBuilding ( arCivilian ) ;
29804: LD_VAR 0 5
29808: PPUSH
29809: CALL_OW 182
// wait ( 0 0$1 ) ;
29813: LD_INT 35
29815: PPUSH
29816: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
29820: LD_INT 76
29822: PPUSH
29823: LD_INT 19
29825: PPUSH
29826: CALL_OW 84
// DialogueOn ;
29830: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
29834: LD_INT 22
29836: PUSH
29837: LD_INT 1
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 26
29846: PUSH
29847: LD_INT 1
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 2
29856: PUSH
29857: LD_INT 25
29859: PUSH
29860: LD_INT 1
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 25
29869: PUSH
29870: LD_INT 2
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 25
29879: PUSH
29880: LD_INT 3
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 25
29889: PUSH
29890: LD_INT 4
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 25
29899: PUSH
29900: LD_INT 5
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: LIST
29919: PPUSH
29920: CALL_OW 69
29924: PPUSH
29925: LD_STRING D8-Sol1-1
29927: PPUSH
29928: LD_STRING D8-Sol1-1
29930: PPUSH
29931: CALL 25060 0 3
// if IsOk ( DeltaDoctor ) then
29935: LD_EXP 39
29939: PPUSH
29940: CALL_OW 302
29944: IFFALSE 29960
// Say ( DeltaDoctor , D8-Sci1-1 ) else
29946: LD_EXP 39
29950: PPUSH
29951: LD_STRING D8-Sci1-1
29953: PPUSH
29954: CALL_OW 88
29958: GO 30061
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
29960: LD_INT 22
29962: PUSH
29963: LD_INT 1
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 26
29972: PUSH
29973: LD_INT 1
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 2
29982: PUSH
29983: LD_INT 25
29985: PUSH
29986: LD_INT 1
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 25
29995: PUSH
29996: LD_INT 2
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 25
30005: PUSH
30006: LD_INT 3
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 25
30015: PUSH
30016: LD_INT 4
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 25
30025: PUSH
30026: LD_INT 5
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: LIST
30045: PPUSH
30046: CALL_OW 69
30050: PPUSH
30051: LD_STRING D8-Sol1-1
30053: PPUSH
30054: LD_STRING D8-Sol1-1
30056: PPUSH
30057: CALL 25060 0 3
// Say ( JMM , D8-JMM-1 ) ;
30061: LD_EXP 23
30065: PPUSH
30066: LD_STRING D8-JMM-1
30068: PPUSH
30069: CALL_OW 88
// DialogueOff ;
30073: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
30077: LD_INT 2
30079: PPUSH
30080: LD_INT 2
30082: PPUSH
30083: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
30087: LD_INT 1
30089: PPUSH
30090: LD_INT 2
30092: PPUSH
30093: LD_INT 2
30095: PPUSH
30096: LD_INT 1
30098: PPUSH
30099: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
30103: LD_INT 3
30105: PPUSH
30106: LD_INT 2
30108: PPUSH
30109: LD_INT 1
30111: PPUSH
30112: LD_INT 1
30114: PPUSH
30115: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
30119: LD_STRING M4
30121: PPUSH
30122: CALL_OW 337
// wait ( 0 0$1 ) ;
30126: LD_INT 35
30128: PPUSH
30129: CALL_OW 67
// if IsLive ( Khatam ) then
30133: LD_EXP 36
30137: PPUSH
30138: CALL_OW 300
30142: IFFALSE 30156
// DoNotAttack ( 2 , Khatam ) ;
30144: LD_INT 2
30146: PPUSH
30147: LD_EXP 36
30151: PPUSH
30152: CALL_OW 471
// wait ( 0 0$1 ) ;
30156: LD_INT 35
30158: PPUSH
30159: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
30163: LD_ADDR_VAR 0 7
30167: PUSH
30168: LD_INT 22
30170: PUSH
30171: LD_INT 1
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 21
30180: PUSH
30181: LD_INT 3
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PPUSH
30192: CALL_OW 69
30196: PPUSH
30197: LD_VAR 0 4
30201: PUSH
30202: LD_INT 1
30204: ARRAY
30205: PPUSH
30206: CALL_OW 74
30210: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
30211: LD_VAR 0 4
30215: PPUSH
30216: LD_INT 25
30218: PUSH
30219: LD_INT 1
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PPUSH
30226: CALL_OW 72
30230: PUSH
30231: LD_INT 1
30233: ARRAY
30234: PPUSH
30235: LD_VAR 0 7
30239: PPUSH
30240: CALL_OW 250
30244: PPUSH
30245: LD_VAR 0 7
30249: PPUSH
30250: CALL_OW 251
30254: PPUSH
30255: LD_VAR 0 7
30259: PPUSH
30260: CALL_OW 192
// AddComMoveXY ( arSoldiers , 84 , 22 ) ;
30264: LD_VAR 0 4
30268: PPUSH
30269: LD_INT 84
30271: PPUSH
30272: LD_INT 22
30274: PPUSH
30275: CALL_OW 171
// AddComMoveXY ( arSoldiers , 82 , 5 ) ;
30279: LD_VAR 0 4
30283: PPUSH
30284: LD_INT 82
30286: PPUSH
30287: LD_INT 5
30289: PPUSH
30290: CALL_OW 171
// AddComMoveXY ( arSoldiers , 95 , 12 ) ;
30294: LD_VAR 0 4
30298: PPUSH
30299: LD_INT 95
30301: PPUSH
30302: LD_INT 12
30304: PPUSH
30305: CALL_OW 171
// AddComMoveXY ( arSoldiers , 102 , 11 ) ;
30309: LD_VAR 0 4
30313: PPUSH
30314: LD_INT 102
30316: PPUSH
30317: LD_INT 11
30319: PPUSH
30320: CALL_OW 171
// AddComMoveXY ( arSoldiers , 116 , 15 ) ;
30324: LD_VAR 0 4
30328: PPUSH
30329: LD_INT 116
30331: PPUSH
30332: LD_INT 15
30334: PPUSH
30335: CALL_OW 171
// AddComMoveXY ( arSoldiers , 140 , 25 ) ;
30339: LD_VAR 0 4
30343: PPUSH
30344: LD_INT 140
30346: PPUSH
30347: LD_INT 25
30349: PPUSH
30350: CALL_OW 171
// arSoldiers := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
30354: LD_ADDR_VAR 0 4
30358: PUSH
30359: LD_INT 22
30361: PUSH
30362: LD_INT 2
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 21
30371: PUSH
30372: LD_INT 1
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 2
30381: PUSH
30382: LD_INT 25
30384: PUSH
30385: LD_INT 1
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 25
30394: PUSH
30395: LD_INT 8
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 25
30404: PUSH
30405: LD_INT 15
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: LIST
30422: PPUSH
30423: CALL_OW 69
30427: PUSH
30428: LD_EXP 50
30432: PUSH
30433: EMPTY
30434: LIST
30435: DIFF
30436: ST_TO_ADDR
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
30437: LD_ADDR_VAR 0 5
30441: PUSH
30442: LD_INT 22
30444: PUSH
30445: LD_INT 2
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 21
30454: PUSH
30455: LD_INT 1
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 2
30464: PUSH
30465: LD_INT 25
30467: PUSH
30468: LD_INT 2
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 25
30477: PUSH
30478: LD_INT 3
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: LD_INT 25
30487: PUSH
30488: LD_INT 4
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 25
30497: PUSH
30498: LD_INT 12
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 25
30507: PUSH
30508: LD_INT 16
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: LIST
30527: PPUSH
30528: CALL_OW 69
30532: ST_TO_ADDR
// arCivilian := arCivilian ^ Dietrich ;
30533: LD_ADDR_VAR 0 5
30537: PUSH
30538: LD_VAR 0 5
30542: PUSH
30543: LD_EXP 50
30547: ADD
30548: ST_TO_ADDR
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
30549: LD_VAR 0 5
30553: PPUSH
30554: LD_INT 88
30556: PPUSH
30557: LD_INT 8
30559: PPUSH
30560: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
30564: LD_VAR 0 5
30568: PPUSH
30569: LD_INT 102
30571: PPUSH
30572: LD_INT 10
30574: PPUSH
30575: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
30579: LD_VAR 0 5
30583: PPUSH
30584: LD_INT 116
30586: PPUSH
30587: LD_INT 15
30589: PPUSH
30590: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
30594: LD_VAR 0 5
30598: PPUSH
30599: LD_INT 140
30601: PPUSH
30602: LD_INT 25
30604: PPUSH
30605: CALL_OW 171
// arEscapist := arCivilian union arSoldiers ;
30609: LD_ADDR_EXP 56
30613: PUSH
30614: LD_VAR 0 5
30618: PUSH
30619: LD_VAR 0 4
30623: UNION
30624: ST_TO_ADDR
// if IsOk ( Gary ) then
30625: LD_EXP 32
30629: PPUSH
30630: CALL_OW 302
30634: IFFALSE 30648
// Say ( Gary , D8a-Gary-1 ) ;
30636: LD_EXP 32
30640: PPUSH
30641: LD_STRING D8a-Gary-1
30643: PPUSH
30644: CALL_OW 88
// wait ( 0 0$5 ) ;
30648: LD_INT 175
30650: PPUSH
30651: CALL_OW 67
// if IsOK ( Khatam ) then
30655: LD_EXP 36
30659: PPUSH
30660: CALL_OW 302
30664: IFFALSE 31131
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
30666: LD_ADDR_VAR 0 2
30670: PUSH
30671: LD_INT 22
30673: PUSH
30674: LD_INT 1
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 2
30683: PUSH
30684: LD_INT 25
30686: PUSH
30687: LD_INT 1
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 25
30696: PUSH
30697: LD_INT 2
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 25
30706: PUSH
30707: LD_INT 3
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 25
30716: PUSH
30717: LD_INT 4
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 25
30726: PUSH
30727: LD_INT 5
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 25
30736: PUSH
30737: LD_INT 8
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PPUSH
30757: CALL_OW 69
30761: PUSH
30762: LD_EXP 23
30766: PUSH
30767: LD_EXP 24
30771: PUSH
30772: LD_EXP 25
30776: PUSH
30777: LD_EXP 26
30781: PUSH
30782: LD_EXP 27
30786: PUSH
30787: LD_EXP 28
30791: PUSH
30792: LD_EXP 29
30796: PUSH
30797: LD_EXP 30
30801: PUSH
30802: LD_EXP 31
30806: PUSH
30807: LD_EXP 32
30811: PUSH
30812: LD_EXP 33
30816: PUSH
30817: LD_EXP 34
30821: PUSH
30822: LD_EXP 35
30826: PUSH
30827: LD_EXP 36
30831: PUSH
30832: LD_EXP 37
30836: PUSH
30837: LD_EXP 38
30841: PUSH
30842: LD_EXP 39
30846: PUSH
30847: LD_EXP 42
30851: PUSH
30852: LD_EXP 44
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: DIFF
30878: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
30879: LD_EXP 36
30883: PPUSH
30884: LD_INT 8
30886: PPUSH
30887: CALL_OW 235
// ComExit ( Khatam ) ;
30891: LD_EXP 36
30895: PPUSH
30896: CALL 91716 0 1
// wait ( 0 0$1 ) ;
30900: LD_INT 35
30902: PPUSH
30903: CALL_OW 67
// ComMoveToArea ( Khatam , khatamArea ) ;
30907: LD_EXP 36
30911: PPUSH
30912: LD_INT 11
30914: PPUSH
30915: CALL_OW 113
// escapeKhatam := true ;
30919: LD_ADDR_EXP 11
30923: PUSH
30924: LD_INT 1
30926: ST_TO_ADDR
// if not tmp then
30927: LD_VAR 0 2
30931: NOT
30932: IFFALSE 30936
// exit ;
30934: GO 31131
// wait ( 0 0$2 ) ;
30936: LD_INT 70
30938: PPUSH
30939: CALL_OW 67
// DialogueOn ;
30943: CALL_OW 6
// speaker := DialogRandom ( tmp , D8b-Sol1-1 , D8b-FSol1-1 ) ;
30947: LD_ADDR_VAR 0 8
30951: PUSH
30952: LD_VAR 0 2
30956: PPUSH
30957: LD_STRING D8b-Sol1-1
30959: PPUSH
30960: LD_STRING D8b-FSol1-1
30962: PPUSH
30963: CALL 25060 0 3
30967: ST_TO_ADDR
// Say ( Khatam , D8b-Khat-1 ) ;
30968: LD_EXP 36
30972: PPUSH
30973: LD_STRING D8b-Khat-1
30975: PPUSH
30976: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
30980: LD_VAR 0 8
30984: PPUSH
30985: CALL_OW 258
30989: PUSH
30990: LD_INT 1
30992: EQUAL
30993: IFFALSE 31009
// Say ( speaker , D8b-Sol1-2 ) else
30995: LD_VAR 0 8
30999: PPUSH
31000: LD_STRING D8b-Sol1-2
31002: PPUSH
31003: CALL_OW 88
31007: GO 31021
// Say ( speaker , D8b-FSol1-2 ) ;
31009: LD_VAR 0 8
31013: PPUSH
31014: LD_STRING D8b-FSol1-2
31016: PPUSH
31017: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
31021: LD_EXP 36
31025: PPUSH
31026: LD_STRING D8b-Khat-2
31028: PPUSH
31029: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31033: LD_VAR 0 8
31037: PPUSH
31038: CALL_OW 258
31042: PUSH
31043: LD_INT 1
31045: EQUAL
31046: IFFALSE 31062
// Say ( speaker , D8b-Sol1-3 ) else
31048: LD_VAR 0 8
31052: PPUSH
31053: LD_STRING D8b-Sol1-3
31055: PPUSH
31056: CALL_OW 88
31060: GO 31074
// Say ( speaker , D8b-FSol1-3 ) ;
31062: LD_VAR 0 8
31066: PPUSH
31067: LD_STRING D8b-FSol1-3
31069: PPUSH
31070: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
31074: LD_EXP 36
31078: PPUSH
31079: LD_STRING D8b-Khat-3
31081: PPUSH
31082: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31086: LD_VAR 0 8
31090: PPUSH
31091: CALL_OW 258
31095: PUSH
31096: LD_INT 1
31098: EQUAL
31099: IFFALSE 31115
// Say ( speaker , D8b-Sol1-4 ) else
31101: LD_VAR 0 8
31105: PPUSH
31106: LD_STRING D8b-Sol1-4
31108: PPUSH
31109: CALL_OW 88
31113: GO 31127
// Say ( speaker , D8b-FSol1-4 ) ;
31115: LD_VAR 0 8
31119: PPUSH
31120: LD_STRING D8b-FSol1-4
31122: PPUSH
31123: CALL_OW 88
// DialogueOff ;
31127: CALL_OW 7
// end ; end ;
31131: PPOPN 8
31133: END
// every 0 0$1 trigger escapeKhatam and IsOk ( Khatam ) do
31134: LD_EXP 11
31138: PUSH
31139: LD_EXP 36
31143: PPUSH
31144: CALL_OW 302
31148: AND
31149: IFFALSE 31224
31151: GO 31153
31153: DISABLE
// begin enable ;
31154: ENABLE
// if IsOk ( Khatam ) and not HasTask ( Khatam ) then
31155: LD_EXP 36
31159: PPUSH
31160: CALL_OW 302
31164: PUSH
31165: LD_EXP 36
31169: PPUSH
31170: CALL_OW 314
31174: NOT
31175: AND
31176: IFFALSE 31190
// ComMoveToArea ( Khatam , khatamArea ) ;
31178: LD_EXP 36
31182: PPUSH
31183: LD_INT 11
31185: PPUSH
31186: CALL_OW 113
// if IsInArea ( Khatam , khatamArea ) then
31190: LD_EXP 36
31194: PPUSH
31195: LD_INT 11
31197: PPUSH
31198: CALL_OW 308
31202: IFFALSE 31224
// begin SaveVariable ( 1 , 10_KhatamStatus_1 ) ;
31204: LD_INT 1
31206: PPUSH
31207: LD_STRING 10_KhatamStatus_1
31209: PPUSH
31210: CALL_OW 39
// RemoveUnit ( Khatam ) ;
31214: LD_EXP 36
31218: PPUSH
31219: CALL_OW 64
// disable ;
31223: DISABLE
// end ; end ;
31224: END
// every 0 0$30 trigger joinedToEpsilon and not InBattle ( 1 ) and hasBase and LoadVariable ( 02_mikhailStatus_1 , 0 ) and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or not arabianAttack ) do
31225: LD_EXP 7
31229: PUSH
31230: LD_INT 1
31232: PPUSH
31233: CALL_OW 463
31237: NOT
31238: AND
31239: PUSH
31240: LD_EXP 9
31244: AND
31245: PUSH
31246: LD_STRING 02_mikhailStatus_1
31248: PPUSH
31249: LD_INT 0
31251: PPUSH
31252: CALL_OW 30
31256: AND
31257: PUSH
31258: LD_INT 22
31260: PUSH
31261: LD_INT 5
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PPUSH
31268: CALL_OW 69
31272: PUSH
31273: LD_INT 0
31275: EQUAL
31276: AND
31277: PUSH
31278: LD_INT 22
31280: PUSH
31281: LD_INT 2
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 21
31290: PUSH
31291: LD_INT 1
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PPUSH
31302: CALL_OW 69
31306: PUSH
31307: LD_INT 0
31309: EQUAL
31310: PUSH
31311: LD_EXP 4
31315: NOT
31316: OR
31317: AND
31318: IFFALSE 31340
31320: GO 31322
31322: DISABLE
// begin wait ( 5 5$00 * Difficulty ) ;
31323: LD_INT 10500
31325: PUSH
31326: LD_OWVAR 67
31330: MUL
31331: PPUSH
31332: CALL_OW 67
// PrepareCornell ;
31336: CALL 3156 0 0
// end ;
31340: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 and IsOk ( Cornell ) do
31341: LD_INT 22
31343: PUSH
31344: LD_INT 1
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PPUSH
31351: CALL_OW 69
31355: PPUSH
31356: LD_EXP 42
31360: PPUSH
31361: CALL_OW 74
31365: PPUSH
31366: LD_EXP 42
31370: PPUSH
31371: CALL_OW 296
31375: PUSH
31376: LD_INT 9
31378: LESS
31379: PUSH
31380: LD_EXP 42
31384: PPUSH
31385: CALL_OW 302
31389: AND
31390: IFFALSE 31834
31392: GO 31394
31394: DISABLE
// begin InGameOn ;
31395: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
31399: LD_EXP 42
31403: PPUSH
31404: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
31408: LD_EXP 42
31412: PPUSH
31413: LD_STRING D7-Corn-1
31415: PPUSH
31416: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
31420: LD_INT 22
31422: PUSH
31423: LD_INT 1
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 2
31432: PUSH
31433: LD_INT 25
31435: PUSH
31436: LD_INT 1
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 25
31445: PUSH
31446: LD_INT 2
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 25
31455: PUSH
31456: LD_INT 3
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 25
31465: PUSH
31466: LD_INT 4
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 25
31475: PUSH
31476: LD_INT 5
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PPUSH
31495: CALL_OW 69
31499: PPUSH
31500: LD_STRING D7-Sol1-1
31502: PPUSH
31503: LD_STRING D7-FSol1-1
31505: PPUSH
31506: CALL 25060 0 3
// CenterNowOnUnits ( Cornell ) ;
31510: LD_EXP 42
31514: PPUSH
31515: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
31519: LD_EXP 42
31523: PPUSH
31524: LD_STRING D7-Corn-2
31526: PPUSH
31527: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
31531: LD_EXP 23
31535: PPUSH
31536: LD_STRING D7-JMM-2
31538: PPUSH
31539: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
31543: LD_EXP 42
31547: PPUSH
31548: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
31552: LD_EXP 42
31556: PPUSH
31557: LD_STRING D7-Corn-3
31559: PPUSH
31560: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
31564: LD_EXP 42
31568: PPUSH
31569: LD_INT 250
31571: PPUSH
31572: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
31576: LD_EXP 42
31580: PPUSH
31581: LD_INT 1
31583: PPUSH
31584: CALL_OW 235
// wait ( 0 0$1 ) ;
31588: LD_INT 35
31590: PPUSH
31591: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
31595: LD_EXP 23
31599: PPUSH
31600: LD_STRING D7-JMM-3
31602: PPUSH
31603: CALL_OW 88
// InGameOff ;
31607: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
31611: LD_INT 35
31613: PPUSH
31614: CALL_OW 67
// if IsDead ( Cornell ) then
31618: LD_EXP 42
31622: PPUSH
31623: CALL_OW 301
31627: IFFALSE 31631
// exit ;
31629: GO 31834
// until GetLives ( Cornell ) > 350 ;
31631: LD_EXP 42
31635: PPUSH
31636: CALL_OW 256
31640: PUSH
31641: LD_INT 350
31643: GREATER
31644: IFFALSE 31611
// DialogueOn ;
31646: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
31650: LD_EXP 23
31654: PPUSH
31655: LD_STRING D7a-JMM-1
31657: PPUSH
31658: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
31662: LD_EXP 42
31666: PPUSH
31667: LD_STRING D7a-Corn-1
31669: PPUSH
31670: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
31674: LD_EXP 23
31678: PPUSH
31679: LD_STRING D7a-JMM-2
31681: PPUSH
31682: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
31686: LD_EXP 42
31690: PPUSH
31691: LD_STRING D7a-Corn-2
31693: PPUSH
31694: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
31698: LD_EXP 23
31702: PPUSH
31703: LD_STRING D7a-JMM-3
31705: PPUSH
31706: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
31710: LD_EXP 42
31714: PPUSH
31715: LD_STRING D7a-Corn-3
31717: PPUSH
31718: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
31722: LD_EXP 23
31726: PPUSH
31727: LD_STRING D7a-JMM-4
31729: PPUSH
31730: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
31734: LD_EXP 42
31738: PPUSH
31739: LD_STRING D7a-Corn-4
31741: PPUSH
31742: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
31746: LD_EXP 23
31750: PPUSH
31751: LD_STRING D7a-JMM-5
31753: PPUSH
31754: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
31758: LD_EXP 42
31762: PPUSH
31763: LD_STRING D7a-Corn-5
31765: PPUSH
31766: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
31770: LD_EXP 23
31774: PPUSH
31775: LD_STRING D7a-JMM-6
31777: PPUSH
31778: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
31782: LD_EXP 42
31786: PPUSH
31787: LD_STRING D7a-Corn-6
31789: PPUSH
31790: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
31794: LD_EXP 23
31798: PPUSH
31799: LD_STRING D7a-JMM-7
31801: PPUSH
31802: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
31806: LD_EXP 42
31810: PPUSH
31811: LD_STRING D7a-Corn-7
31813: PPUSH
31814: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
31818: LD_EXP 23
31822: PPUSH
31823: LD_STRING D7a-JMM-8
31825: PPUSH
31826: CALL_OW 88
// DialogueOff ;
31830: CALL_OW 7
// end ;
31834: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
31835: LD_INT 54
31837: PPUSH
31838: LD_INT 1
31840: PPUSH
31841: CALL_OW 321
31845: PUSH
31846: LD_INT 2
31848: EQUAL
31849: PUSH
31850: LD_INT 55
31852: PPUSH
31853: LD_INT 1
31855: PPUSH
31856: CALL_OW 321
31860: PUSH
31861: LD_INT 2
31863: EQUAL
31864: AND
31865: PUSH
31866: LD_INT 21
31868: PPUSH
31869: LD_INT 1
31871: PPUSH
31872: CALL_OW 321
31876: PUSH
31877: LD_INT 2
31879: EQUAL
31880: AND
31881: PUSH
31882: LD_INT 22
31884: PPUSH
31885: LD_INT 1
31887: PPUSH
31888: CALL_OW 321
31892: PUSH
31893: LD_INT 2
31895: EQUAL
31896: AND
31897: PUSH
31898: LD_INT 12
31900: PPUSH
31901: LD_INT 1
31903: PPUSH
31904: CALL_OW 321
31908: PUSH
31909: LD_INT 1
31911: EQUAL
31912: PUSH
31913: LD_INT 32
31915: PPUSH
31916: LD_INT 1
31918: PPUSH
31919: CALL_OW 321
31923: PUSH
31924: LD_INT 1
31926: EQUAL
31927: OR
31928: PUSH
31929: EMPTY
31930: LIST
31931: AND
31932: PUSH
31933: LD_EXP 8
31937: AND
31938: PUSH
31939: LD_INT 22
31941: PUSH
31942: LD_INT 3
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 21
31951: PUSH
31952: LD_INT 1
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PPUSH
31963: CALL_OW 69
31967: PUSH
31968: LD_INT 0
31970: EQUAL
31971: AND
31972: IFFALSE 32020
31974: GO 31976
31976: DISABLE
// begin case Query ( QEndMission ) of 1 :
31977: LD_STRING QEndMission
31979: PPUSH
31980: CALL_OW 97
31984: PUSH
31985: LD_INT 1
31987: DOUBLE
31988: EQUAL
31989: IFTRUE 31993
31991: GO 32004
31993: POP
// end_the_mission_allowed = true ; 2 :
31994: LD_ADDR_OWVAR 57
31998: PUSH
31999: LD_INT 1
32001: ST_TO_ADDR
32002: GO 32020
32004: LD_INT 2
32006: DOUBLE
32007: EQUAL
32008: IFTRUE 32012
32010: GO 32019
32012: POP
// FinishMission ; end ;
32013: CALL 32066 0 0
32017: GO 32020
32019: POP
// end ;
32020: END
// function EnchancedSaveCharacters ( unit , id ) ; begin
32021: LD_INT 0
32023: PPUSH
// if IsLive ( unit ) or unit in JMMSquad then
32024: LD_VAR 0 1
32028: PPUSH
32029: CALL_OW 300
32033: PUSH
32034: LD_VAR 0 1
32038: PUSH
32039: LD_EXP 45
32043: IN
32044: OR
32045: IFFALSE 32061
// SaveCharacters ( unit , id ) ;
32047: LD_VAR 0 1
32051: PPUSH
32052: LD_VAR 0 2
32056: PPUSH
32057: CALL_OW 38
// end ;
32061: LD_VAR 0 3
32065: RET
// export function FinishMission ; var m1 , m2 , m3 , prefix ; begin
32066: LD_INT 0
32068: PPUSH
32069: PPUSH
32070: PPUSH
32071: PPUSH
32072: PPUSH
// if not hasSniper then
32073: LD_EXP 20
32077: NOT
32078: IFFALSE 32087
// SetAchievement ( ACH_SNIPER ) ;
32080: LD_STRING ACH_SNIPER
32082: PPUSH
32083: CALL_OW 543
// m1 := false ;
32087: LD_ADDR_VAR 0 2
32091: PUSH
32092: LD_INT 0
32094: ST_TO_ADDR
// m2 := false ;
32095: LD_ADDR_VAR 0 3
32099: PUSH
32100: LD_INT 0
32102: ST_TO_ADDR
// m3 := false ;
32103: LD_ADDR_VAR 0 4
32107: PUSH
32108: LD_INT 0
32110: ST_TO_ADDR
// if GetTech ( tech_LasSight , 1 ) = state_researched then
32111: LD_INT 12
32113: PPUSH
32114: LD_INT 1
32116: PPUSH
32117: CALL_OW 321
32121: PUSH
32122: LD_INT 2
32124: EQUAL
32125: IFFALSE 32147
// begin AddMedal ( sights , 1 ) ;
32127: LD_STRING sights
32129: PPUSH
32130: LD_INT 1
32132: PPUSH
32133: CALL_OW 101
// m1 := true ;
32137: LD_ADDR_VAR 0 2
32141: PUSH
32142: LD_INT 1
32144: ST_TO_ADDR
// end else
32145: GO 32158
// AddMedal ( sights , - 1 ) ;
32147: LD_STRING sights
32149: PPUSH
32150: LD_INT 1
32152: NEG
32153: PPUSH
32154: CALL_OW 101
// if GetTech ( tech_AI , 1 ) = state_researched then
32158: LD_INT 32
32160: PPUSH
32161: LD_INT 1
32163: PPUSH
32164: CALL_OW 321
32168: PUSH
32169: LD_INT 2
32171: EQUAL
32172: IFFALSE 32194
// begin AddMedal ( computers , 1 ) ;
32174: LD_STRING computers
32176: PPUSH
32177: LD_INT 1
32179: PPUSH
32180: CALL_OW 101
// m2 := true ;
32184: LD_ADDR_VAR 0 3
32188: PUSH
32189: LD_INT 1
32191: ST_TO_ADDR
// end else
32192: GO 32205
// AddMedal ( computers , - 1 ) ;
32194: LD_STRING computers
32196: PPUSH
32197: LD_INT 1
32199: NEG
32200: PPUSH
32201: CALL_OW 101
// if arabianEscapedCounter = 0 then
32205: LD_EXP 21
32209: PUSH
32210: LD_INT 0
32212: EQUAL
32213: IFFALSE 32245
// begin AddMedal ( renegades , 2 ) ;
32215: LD_STRING renegades
32217: PPUSH
32218: LD_INT 2
32220: PPUSH
32221: CALL_OW 101
// m3 := true ;
32225: LD_ADDR_VAR 0 4
32229: PUSH
32230: LD_INT 1
32232: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
32233: LD_INT 0
32235: PPUSH
32236: LD_STRING 10_ScientistsEscape_1
32238: PPUSH
32239: CALL_OW 39
// end else
32243: GO 32256
// AddMedal ( renegades , - 1 ) ;
32245: LD_STRING renegades
32247: PPUSH
32248: LD_INT 1
32250: NEG
32251: PPUSH
32252: CALL_OW 101
// SaveEpsilonBase ;
32256: CALL 33085 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
32260: LD_VAR 0 2
32264: PUSH
32265: LD_VAR 0 3
32269: AND
32270: PUSH
32271: LD_VAR 0 4
32275: AND
32276: PUSH
32277: LD_OWVAR 67
32281: PUSH
32282: LD_INT 3
32284: GREATEREQUAL
32285: AND
32286: IFFALSE 32298
// SetAchievementEX ( ACH_AMER , 10 ) ;
32288: LD_STRING ACH_AMER
32290: PPUSH
32291: LD_INT 10
32293: PPUSH
32294: CALL_OW 564
// if tick <= 40 40$00 then
32298: LD_OWVAR 1
32302: PUSH
32303: LD_INT 84000
32305: LESSEQUAL
32306: IFFALSE 32322
// begin wait ( 3 ) ;
32308: LD_INT 3
32310: PPUSH
32311: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
32315: LD_STRING ACH_ASPEED_10
32317: PPUSH
32318: CALL_OW 543
// end ; GiveMedals ( Main ) ;
32322: LD_STRING Main
32324: PPUSH
32325: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
32329: LD_INT 22
32331: PUSH
32332: LD_INT 1
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 23
32341: PUSH
32342: LD_INT 1
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 21
32351: PUSH
32352: LD_INT 1
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 2
32361: PUSH
32362: LD_INT 25
32364: PUSH
32365: LD_INT 1
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 25
32374: PUSH
32375: LD_INT 2
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 25
32384: PUSH
32385: LD_INT 3
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 25
32394: PUSH
32395: LD_INT 4
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 25
32404: PUSH
32405: LD_INT 5
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 25
32414: PUSH
32415: LD_INT 8
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: PPUSH
32437: CALL_OW 69
32441: PPUSH
32442: CALL_OW 43
// prefix := 10c_ ;
32446: LD_ADDR_VAR 0 5
32450: PUSH
32451: LD_STRING 10c_
32453: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
32454: LD_EXP 23
32458: PPUSH
32459: LD_VAR 0 5
32463: PUSH
32464: LD_STRING JMM
32466: STR
32467: PPUSH
32468: CALL_OW 38
// EnchancedSaveCharacters ( Brown , prefix & Brown ) ;
32472: LD_EXP 24
32476: PPUSH
32477: LD_VAR 0 5
32481: PUSH
32482: LD_STRING Brown
32484: STR
32485: PPUSH
32486: CALL 32021 0 2
// EnchancedSaveCharacters ( Donaldson , prefix & Donaldson ) ;
32490: LD_EXP 25
32494: PPUSH
32495: LD_VAR 0 5
32499: PUSH
32500: LD_STRING Donaldson
32502: STR
32503: PPUSH
32504: CALL 32021 0 2
// EnchancedSaveCharacters ( Bobby , prefix & Bobby ) ;
32508: LD_EXP 26
32512: PPUSH
32513: LD_VAR 0 5
32517: PUSH
32518: LD_STRING Bobby
32520: STR
32521: PPUSH
32522: CALL 32021 0 2
// EnchancedSaveCharacters ( Cyrus , prefix & Cyrus ) ;
32526: LD_EXP 27
32530: PPUSH
32531: LD_VAR 0 5
32535: PUSH
32536: LD_STRING Cyrus
32538: STR
32539: PPUSH
32540: CALL 32021 0 2
// EnchancedSaveCharacters ( Lisa , prefix & Lisa ) ;
32544: LD_EXP 28
32548: PPUSH
32549: LD_VAR 0 5
32553: PUSH
32554: LD_STRING Lisa
32556: STR
32557: PPUSH
32558: CALL 32021 0 2
// EnchancedSaveCharacters ( Frank , prefix & Frank ) ;
32562: LD_EXP 29
32566: PPUSH
32567: LD_VAR 0 5
32571: PUSH
32572: LD_STRING Frank
32574: STR
32575: PPUSH
32576: CALL 32021 0 2
// EnchancedSaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
32580: LD_EXP 30
32584: PPUSH
32585: LD_VAR 0 5
32589: PUSH
32590: LD_STRING Kikuchi
32592: STR
32593: PPUSH
32594: CALL 32021 0 2
// EnchancedSaveCharacters ( Houten , prefix & Houten ) ;
32598: LD_EXP 31
32602: PPUSH
32603: LD_VAR 0 5
32607: PUSH
32608: LD_STRING Houten
32610: STR
32611: PPUSH
32612: CALL 32021 0 2
// EnchancedSaveCharacters ( Gary , prefix & Gary ) ;
32616: LD_EXP 32
32620: PPUSH
32621: LD_VAR 0 5
32625: PUSH
32626: LD_STRING Gary
32628: STR
32629: PPUSH
32630: CALL 32021 0 2
// EnchancedSaveCharacters ( Cornell , prefix & Cornell ) ;
32634: LD_EXP 42
32638: PPUSH
32639: LD_VAR 0 5
32643: PUSH
32644: LD_STRING Cornell
32646: STR
32647: PPUSH
32648: CALL 32021 0 2
// EnchancedSaveCharacters ( Simms , prefix & Simms ) ;
32652: LD_EXP 33
32656: PPUSH
32657: LD_VAR 0 5
32661: PUSH
32662: LD_STRING Simms
32664: STR
32665: PPUSH
32666: CALL 32021 0 2
// EnchancedSaveCharacters ( Denis , prefix & Denis ) ;
32670: LD_EXP 34
32674: PPUSH
32675: LD_VAR 0 5
32679: PUSH
32680: LD_STRING Denis
32682: STR
32683: PPUSH
32684: CALL 32021 0 2
// EnchancedSaveCharacters ( Joan , prefix & Joan ) ;
32688: LD_EXP 35
32692: PPUSH
32693: LD_VAR 0 5
32697: PUSH
32698: LD_STRING Joan
32700: STR
32701: PPUSH
32702: CALL 32021 0 2
// EnchancedSaveCharacters ( Gladstone , prefix & Gladstone ) ;
32706: LD_EXP 37
32710: PPUSH
32711: LD_VAR 0 5
32715: PUSH
32716: LD_STRING Gladstone
32718: STR
32719: PPUSH
32720: CALL 32021 0 2
// EnchancedSaveCharacters ( DeltaDoctor , prefix & DeltaDoctor ) ;
32724: LD_EXP 39
32728: PPUSH
32729: LD_VAR 0 5
32733: PUSH
32734: LD_STRING DeltaDoctor
32736: STR
32737: PPUSH
32738: CALL 32021 0 2
// if IsLive ( Mike ) then
32742: LD_EXP 41
32746: PPUSH
32747: CALL_OW 300
32751: IFFALSE 32771
// SaveCharacters ( Mike , prefix & Mike ) ;
32753: LD_EXP 41
32757: PPUSH
32758: LD_VAR 0 5
32762: PUSH
32763: LD_STRING Mike
32765: STR
32766: PPUSH
32767: CALL_OW 38
// SaveCharacters ( others , 10c_lock ) ;
32771: LD_EXP 46
32775: PPUSH
32776: LD_STRING 10c_lock
32778: PPUSH
32779: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
32783: LD_INT 50
32785: PUSH
32786: EMPTY
32787: LIST
32788: PUSH
32789: LD_INT 22
32791: PUSH
32792: LD_INT 1
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 21
32801: PUSH
32802: LD_INT 1
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 2
32811: PUSH
32812: LD_INT 25
32814: PUSH
32815: LD_INT 1
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 25
32824: PUSH
32825: LD_INT 2
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 25
32834: PUSH
32835: LD_INT 3
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 25
32844: PUSH
32845: LD_INT 4
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 25
32854: PUSH
32855: LD_INT 5
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 25
32864: PUSH
32865: LD_INT 8
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: PPUSH
32887: CALL_OW 69
32891: PUSH
32892: LD_EXP 23
32896: PUSH
32897: LD_EXP 24
32901: PUSH
32902: LD_EXP 25
32906: PUSH
32907: LD_EXP 26
32911: PUSH
32912: LD_EXP 27
32916: PUSH
32917: LD_EXP 28
32921: PUSH
32922: LD_EXP 29
32926: PUSH
32927: LD_EXP 37
32931: PUSH
32932: LD_EXP 30
32936: PUSH
32937: LD_EXP 34
32941: PUSH
32942: LD_EXP 35
32946: PUSH
32947: LD_EXP 31
32951: PUSH
32952: LD_EXP 33
32956: PUSH
32957: LD_EXP 32
32961: PUSH
32962: LD_EXP 39
32966: PUSH
32967: LD_EXP 42
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: DIFF
32990: PPUSH
32991: LD_STRING 10_other_survivors
32993: PPUSH
32994: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) diff Mike , 10_ape ) ;
32998: LD_INT 50
33000: PUSH
33001: EMPTY
33002: LIST
33003: PUSH
33004: LD_INT 22
33006: PUSH
33007: LD_INT 1
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 21
33016: PUSH
33017: LD_INT 1
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 2
33026: PUSH
33027: LD_INT 25
33029: PUSH
33030: LD_INT 16
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 25
33039: PUSH
33040: LD_INT 12
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: LIST
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: PPUSH
33058: CALL_OW 69
33062: PUSH
33063: LD_EXP 41
33067: DIFF
33068: PPUSH
33069: LD_STRING 10_ape
33071: PPUSH
33072: CALL_OW 38
// YouWin ;
33076: CALL_OW 103
// end ;
33080: LD_VAR 0 1
33084: RET
// function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
33085: LD_INT 0
33087: PPUSH
33088: PPUSH
33089: PPUSH
33090: PPUSH
// epsilonBase := [ ] ;
33091: LD_ADDR_VAR 0 2
33095: PUSH
33096: EMPTY
33097: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
33098: LD_ADDR_VAR 0 3
33102: PUSH
33103: LD_INT 22
33105: PUSH
33106: LD_INT 1
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 21
33115: PUSH
33116: LD_INT 3
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 50
33125: PUSH
33126: EMPTY
33127: LIST
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: LIST
33133: PPUSH
33134: CALL_OW 69
33138: ST_TO_ADDR
// for i in buildings do
33139: LD_ADDR_VAR 0 4
33143: PUSH
33144: LD_VAR 0 3
33148: PUSH
33149: FOR_IN
33150: IFFALSE 33602
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
33152: LD_VAR 0 4
33156: PPUSH
33157: CALL_OW 266
33161: PUSH
33162: LD_INT 6
33164: PUSH
33165: LD_INT 7
33167: PUSH
33168: LD_INT 8
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: LIST
33175: IN
33176: IFFALSE 33290
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
33178: LD_ADDR_VAR 0 2
33182: PUSH
33183: LD_VAR 0 2
33187: PUSH
33188: LD_VAR 0 4
33192: PPUSH
33193: CALL_OW 266
33197: PUSH
33198: LD_VAR 0 4
33202: PPUSH
33203: CALL_OW 250
33207: PUSH
33208: LD_VAR 0 4
33212: PPUSH
33213: CALL_OW 251
33217: PUSH
33218: LD_VAR 0 4
33222: PPUSH
33223: CALL_OW 254
33227: PUSH
33228: LD_VAR 0 4
33232: PPUSH
33233: CALL_OW 267
33237: PUSH
33238: LD_VAR 0 4
33242: PPUSH
33243: CALL_OW 248
33247: PUSH
33248: LD_VAR 0 4
33252: PPUSH
33253: LD_INT 1
33255: PPUSH
33256: CALL_OW 268
33260: PUSH
33261: LD_VAR 0 4
33265: PPUSH
33266: LD_INT 2
33268: PPUSH
33269: CALL_OW 268
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: PUSH
33284: EMPTY
33285: LIST
33286: ADD
33287: ST_TO_ADDR
33288: GO 33600
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
33290: LD_VAR 0 4
33294: PPUSH
33295: CALL_OW 266
33299: PUSH
33300: LD_INT 32
33302: EQUAL
33303: PUSH
33304: LD_VAR 0 4
33308: PPUSH
33309: CALL_OW 266
33313: PUSH
33314: LD_INT 33
33316: EQUAL
33317: OR
33318: IFFALSE 33415
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
33320: LD_ADDR_VAR 0 2
33324: PUSH
33325: LD_VAR 0 2
33329: PUSH
33330: LD_VAR 0 4
33334: PPUSH
33335: CALL_OW 266
33339: PUSH
33340: LD_VAR 0 4
33344: PPUSH
33345: CALL_OW 250
33349: PUSH
33350: LD_VAR 0 4
33354: PPUSH
33355: CALL_OW 251
33359: PUSH
33360: LD_VAR 0 4
33364: PPUSH
33365: CALL_OW 254
33369: PUSH
33370: LD_VAR 0 4
33374: PPUSH
33375: CALL_OW 267
33379: PUSH
33380: LD_VAR 0 4
33384: PPUSH
33385: CALL_OW 248
33389: PUSH
33390: LD_VAR 0 4
33394: PPUSH
33395: CALL_OW 269
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: PUSH
33409: EMPTY
33410: LIST
33411: ADD
33412: ST_TO_ADDR
33413: GO 33600
// if GetBType ( i ) = b_factory then
33415: LD_VAR 0 4
33419: PPUSH
33420: CALL_OW 266
33424: PUSH
33425: LD_INT 3
33427: EQUAL
33428: IFFALSE 33518
// epsilonBase := Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
33430: LD_ADDR_VAR 0 2
33434: PUSH
33435: LD_VAR 0 2
33439: PPUSH
33440: LD_INT 1
33442: PPUSH
33443: LD_VAR 0 4
33447: PPUSH
33448: CALL_OW 266
33452: PUSH
33453: LD_VAR 0 4
33457: PPUSH
33458: CALL_OW 250
33462: PUSH
33463: LD_VAR 0 4
33467: PPUSH
33468: CALL_OW 251
33472: PUSH
33473: LD_VAR 0 4
33477: PPUSH
33478: CALL_OW 254
33482: PUSH
33483: LD_VAR 0 4
33487: PPUSH
33488: CALL_OW 267
33492: PUSH
33493: LD_VAR 0 4
33497: PPUSH
33498: CALL_OW 248
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: PPUSH
33511: CALL_OW 2
33515: ST_TO_ADDR
33516: GO 33600
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
33518: LD_ADDR_VAR 0 2
33522: PUSH
33523: LD_VAR 0 2
33527: PUSH
33528: LD_VAR 0 4
33532: PPUSH
33533: CALL_OW 266
33537: PUSH
33538: LD_VAR 0 4
33542: PPUSH
33543: CALL_OW 250
33547: PUSH
33548: LD_VAR 0 4
33552: PPUSH
33553: CALL_OW 251
33557: PUSH
33558: LD_VAR 0 4
33562: PPUSH
33563: CALL_OW 254
33567: PUSH
33568: LD_VAR 0 4
33572: PPUSH
33573: CALL_OW 267
33577: PUSH
33578: LD_VAR 0 4
33582: PPUSH
33583: CALL_OW 248
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: PUSH
33596: EMPTY
33597: LIST
33598: ADD
33599: ST_TO_ADDR
// end ;
33600: GO 33149
33602: POP
33603: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
33604: LD_VAR 0 2
33608: PPUSH
33609: LD_STRING 10_EpsilonBase
33611: PPUSH
33612: CALL_OW 39
// SaveVariable ( ListEnvironmentArea ( epsilonBaseArea ) , 10_EpsilonEnv ) ;
33616: LD_INT 34
33618: PPUSH
33619: CALL_OW 353
33623: PPUSH
33624: LD_STRING 10_EpsilonEnv
33626: PPUSH
33627: CALL_OW 39
// end ; end_of_file
33631: LD_VAR 0 1
33635: RET
// every 1 1$05 + 0 0$20 trigger joinedToEpsilon do var i , tmp ;
33636: LD_EXP 7
33640: IFFALSE 33763
33642: GO 33644
33644: DISABLE
33645: LD_INT 0
33647: PPUSH
33648: PPUSH
// begin enable ;
33649: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
33650: LD_INT 35
33652: PPUSH
33653: LD_INT 385
33655: PPUSH
33656: CALL_OW 12
33660: PPUSH
33661: CALL_OW 67
// tmp := [ cratesSpawn1Area , cratesSpawn2Area , cratesSpawn3Area , cratesSpawn4Area , cratesSpawn5Area , cratesSpawn6Area ] ;
33665: LD_ADDR_VAR 0 2
33669: PUSH
33670: LD_INT 13
33672: PUSH
33673: LD_INT 14
33675: PUSH
33676: LD_INT 15
33678: PUSH
33679: LD_INT 16
33681: PUSH
33682: LD_INT 17
33684: PUSH
33685: LD_INT 38
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
33696: LD_ADDR_VAR 0 1
33700: PUSH
33701: LD_VAR 0 2
33705: PUSH
33706: LD_INT 1
33708: PPUSH
33709: LD_VAR 0 2
33713: PPUSH
33714: CALL 56099 0 1
33718: PPUSH
33719: CALL_OW 12
33723: ARRAY
33724: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 8 then
33725: LD_VAR 0 1
33729: PPUSH
33730: CALL_OW 435
33734: PUSH
33735: LD_INT 8
33737: LESS
33738: IFFALSE 33763
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
33740: LD_INT 1
33742: PPUSH
33743: LD_INT 5
33745: PPUSH
33746: CALL_OW 12
33750: PPUSH
33751: LD_VAR 0 1
33755: PPUSH
33756: LD_INT 1
33758: PPUSH
33759: CALL_OW 55
// end ;
33763: PPOPN 2
33765: END
// every 0 0$20 trigger tick < 5 5$00 and hasBase do
33766: LD_OWVAR 1
33770: PUSH
33771: LD_INT 10500
33773: LESS
33774: PUSH
33775: LD_EXP 9
33779: AND
33780: IFFALSE 33807
33782: GO 33784
33784: DISABLE
// begin enable ;
33785: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSpawn3Area , true ) ;
33786: LD_INT 1
33788: PPUSH
33789: LD_INT 5
33791: PPUSH
33792: CALL_OW 12
33796: PPUSH
33797: LD_INT 15
33799: PPUSH
33800: LD_INT 1
33802: PPUSH
33803: CALL_OW 55
// end ;
33807: END
// every 0 0$55 trigger ruBase do
33808: LD_EXP 68
33812: IFFALSE 33856
33814: GO 33816
33816: DISABLE
// begin enable ;
33817: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea ) < 3 then
33818: LD_EXP 84
33822: PPUSH
33823: CALL_OW 435
33827: PUSH
33828: LD_INT 3
33830: LESS
33831: IFFALSE 33856
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea , true ) ;
33833: LD_INT 1
33835: PPUSH
33836: LD_INT 5
33838: PPUSH
33839: CALL_OW 12
33843: PPUSH
33844: LD_EXP 84
33848: PPUSH
33849: LD_INT 1
33851: PPUSH
33852: CALL_OW 55
// end ;
33856: END
// every 1 1$05 trigger ruBase2 do
33857: LD_EXP 69
33861: IFFALSE 33905
33863: GO 33865
33865: DISABLE
// begin enable ;
33866: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea2 ) < 3 then
33867: LD_EXP 85
33871: PPUSH
33872: CALL_OW 435
33876: PUSH
33877: LD_INT 3
33879: LESS
33880: IFFALSE 33905
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea2 , true ) ;
33882: LD_INT 1
33884: PPUSH
33885: LD_INT 5
33887: PPUSH
33888: CALL_OW 12
33892: PPUSH
33893: LD_EXP 85
33897: PPUSH
33898: LD_INT 1
33900: PPUSH
33901: CALL_OW 55
// end ; end_of_file end_of_file
33905: END
// export globalGameSaveCounter ; every 0 0$1 do
33906: GO 33908
33908: DISABLE
// begin enable ;
33909: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
33910: LD_STRING updateTimer(
33912: PUSH
33913: LD_OWVAR 1
33917: STR
33918: PUSH
33919: LD_STRING );
33921: STR
33922: PPUSH
33923: CALL_OW 559
// end ;
33927: END
// every 0 0$1 do
33928: GO 33930
33930: DISABLE
// begin globalGameSaveCounter := 0 ;
33931: LD_ADDR_EXP 86
33935: PUSH
33936: LD_INT 0
33938: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
33939: LD_STRING setGameSaveCounter(0)
33941: PPUSH
33942: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
33946: LD_STRING initStreamRollete();
33948: PPUSH
33949: CALL_OW 559
// InitStreamMode ;
33953: CALL 35279 0 0
// DefineStreamItems ( false ) ;
33957: LD_INT 0
33959: PPUSH
33960: CALL 35743 0 1
// end ;
33964: END
// export function SOS_MapStart ( ) ; begin
33965: LD_INT 0
33967: PPUSH
// if streamModeActive then
33968: LD_EXP 87
33972: IFFALSE 33981
// DefineStreamItems ( true ) ;
33974: LD_INT 1
33976: PPUSH
33977: CALL 35743 0 1
// UpdateLuaVariables ( ) ;
33981: CALL 33998 0 0
// UpdateFactoryWaypoints ( ) ;
33985: CALL 48612 0 0
// UpdateWarehouseGatheringPoints ( ) ;
33989: CALL 48869 0 0
// end ;
33993: LD_VAR 0 1
33997: RET
// function UpdateLuaVariables ( ) ; begin
33998: LD_INT 0
34000: PPUSH
// if globalGameSaveCounter then
34001: LD_EXP 86
34005: IFFALSE 34039
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
34007: LD_ADDR_EXP 86
34011: PUSH
34012: LD_EXP 86
34016: PPUSH
34017: CALL 92679 0 1
34021: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
34022: LD_STRING setGameSaveCounter(
34024: PUSH
34025: LD_EXP 86
34029: STR
34030: PUSH
34031: LD_STRING )
34033: STR
34034: PPUSH
34035: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
34039: LD_STRING setGameDifficulty(
34041: PUSH
34042: LD_OWVAR 67
34046: STR
34047: PUSH
34048: LD_STRING )
34050: STR
34051: PPUSH
34052: CALL_OW 559
// end ;
34056: LD_VAR 0 1
34060: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34061: LD_INT 0
34063: PPUSH
// if p2 = stream_mode then
34064: LD_VAR 0 2
34068: PUSH
34069: LD_INT 100
34071: EQUAL
34072: IFFALSE 35075
// begin if not StreamModeActive then
34074: LD_EXP 87
34078: NOT
34079: IFFALSE 34089
// StreamModeActive := true ;
34081: LD_ADDR_EXP 87
34085: PUSH
34086: LD_INT 1
34088: ST_TO_ADDR
// if p3 = 0 then
34089: LD_VAR 0 3
34093: PUSH
34094: LD_INT 0
34096: EQUAL
34097: IFFALSE 34103
// InitStreamMode ;
34099: CALL 35279 0 0
// if p3 = 1 then
34103: LD_VAR 0 3
34107: PUSH
34108: LD_INT 1
34110: EQUAL
34111: IFFALSE 34121
// sRocket := true ;
34113: LD_ADDR_EXP 92
34117: PUSH
34118: LD_INT 1
34120: ST_TO_ADDR
// if p3 = 2 then
34121: LD_VAR 0 3
34125: PUSH
34126: LD_INT 2
34128: EQUAL
34129: IFFALSE 34139
// sSpeed := true ;
34131: LD_ADDR_EXP 91
34135: PUSH
34136: LD_INT 1
34138: ST_TO_ADDR
// if p3 = 3 then
34139: LD_VAR 0 3
34143: PUSH
34144: LD_INT 3
34146: EQUAL
34147: IFFALSE 34157
// sEngine := true ;
34149: LD_ADDR_EXP 93
34153: PUSH
34154: LD_INT 1
34156: ST_TO_ADDR
// if p3 = 4 then
34157: LD_VAR 0 3
34161: PUSH
34162: LD_INT 4
34164: EQUAL
34165: IFFALSE 34175
// sSpec := true ;
34167: LD_ADDR_EXP 90
34171: PUSH
34172: LD_INT 1
34174: ST_TO_ADDR
// if p3 = 5 then
34175: LD_VAR 0 3
34179: PUSH
34180: LD_INT 5
34182: EQUAL
34183: IFFALSE 34193
// sLevel := true ;
34185: LD_ADDR_EXP 94
34189: PUSH
34190: LD_INT 1
34192: ST_TO_ADDR
// if p3 = 6 then
34193: LD_VAR 0 3
34197: PUSH
34198: LD_INT 6
34200: EQUAL
34201: IFFALSE 34211
// sArmoury := true ;
34203: LD_ADDR_EXP 95
34207: PUSH
34208: LD_INT 1
34210: ST_TO_ADDR
// if p3 = 7 then
34211: LD_VAR 0 3
34215: PUSH
34216: LD_INT 7
34218: EQUAL
34219: IFFALSE 34229
// sRadar := true ;
34221: LD_ADDR_EXP 96
34225: PUSH
34226: LD_INT 1
34228: ST_TO_ADDR
// if p3 = 8 then
34229: LD_VAR 0 3
34233: PUSH
34234: LD_INT 8
34236: EQUAL
34237: IFFALSE 34247
// sBunker := true ;
34239: LD_ADDR_EXP 97
34243: PUSH
34244: LD_INT 1
34246: ST_TO_ADDR
// if p3 = 9 then
34247: LD_VAR 0 3
34251: PUSH
34252: LD_INT 9
34254: EQUAL
34255: IFFALSE 34265
// sHack := true ;
34257: LD_ADDR_EXP 98
34261: PUSH
34262: LD_INT 1
34264: ST_TO_ADDR
// if p3 = 10 then
34265: LD_VAR 0 3
34269: PUSH
34270: LD_INT 10
34272: EQUAL
34273: IFFALSE 34283
// sFire := true ;
34275: LD_ADDR_EXP 99
34279: PUSH
34280: LD_INT 1
34282: ST_TO_ADDR
// if p3 = 11 then
34283: LD_VAR 0 3
34287: PUSH
34288: LD_INT 11
34290: EQUAL
34291: IFFALSE 34301
// sRefresh := true ;
34293: LD_ADDR_EXP 100
34297: PUSH
34298: LD_INT 1
34300: ST_TO_ADDR
// if p3 = 12 then
34301: LD_VAR 0 3
34305: PUSH
34306: LD_INT 12
34308: EQUAL
34309: IFFALSE 34319
// sExp := true ;
34311: LD_ADDR_EXP 101
34315: PUSH
34316: LD_INT 1
34318: ST_TO_ADDR
// if p3 = 13 then
34319: LD_VAR 0 3
34323: PUSH
34324: LD_INT 13
34326: EQUAL
34327: IFFALSE 34337
// sDepot := true ;
34329: LD_ADDR_EXP 102
34333: PUSH
34334: LD_INT 1
34336: ST_TO_ADDR
// if p3 = 14 then
34337: LD_VAR 0 3
34341: PUSH
34342: LD_INT 14
34344: EQUAL
34345: IFFALSE 34355
// sFlag := true ;
34347: LD_ADDR_EXP 103
34351: PUSH
34352: LD_INT 1
34354: ST_TO_ADDR
// if p3 = 15 then
34355: LD_VAR 0 3
34359: PUSH
34360: LD_INT 15
34362: EQUAL
34363: IFFALSE 34373
// sKamikadze := true ;
34365: LD_ADDR_EXP 111
34369: PUSH
34370: LD_INT 1
34372: ST_TO_ADDR
// if p3 = 16 then
34373: LD_VAR 0 3
34377: PUSH
34378: LD_INT 16
34380: EQUAL
34381: IFFALSE 34391
// sTroll := true ;
34383: LD_ADDR_EXP 112
34387: PUSH
34388: LD_INT 1
34390: ST_TO_ADDR
// if p3 = 17 then
34391: LD_VAR 0 3
34395: PUSH
34396: LD_INT 17
34398: EQUAL
34399: IFFALSE 34409
// sSlow := true ;
34401: LD_ADDR_EXP 113
34405: PUSH
34406: LD_INT 1
34408: ST_TO_ADDR
// if p3 = 18 then
34409: LD_VAR 0 3
34413: PUSH
34414: LD_INT 18
34416: EQUAL
34417: IFFALSE 34427
// sLack := true ;
34419: LD_ADDR_EXP 114
34423: PUSH
34424: LD_INT 1
34426: ST_TO_ADDR
// if p3 = 19 then
34427: LD_VAR 0 3
34431: PUSH
34432: LD_INT 19
34434: EQUAL
34435: IFFALSE 34445
// sTank := true ;
34437: LD_ADDR_EXP 116
34441: PUSH
34442: LD_INT 1
34444: ST_TO_ADDR
// if p3 = 20 then
34445: LD_VAR 0 3
34449: PUSH
34450: LD_INT 20
34452: EQUAL
34453: IFFALSE 34463
// sRemote := true ;
34455: LD_ADDR_EXP 117
34459: PUSH
34460: LD_INT 1
34462: ST_TO_ADDR
// if p3 = 21 then
34463: LD_VAR 0 3
34467: PUSH
34468: LD_INT 21
34470: EQUAL
34471: IFFALSE 34481
// sPowell := true ;
34473: LD_ADDR_EXP 118
34477: PUSH
34478: LD_INT 1
34480: ST_TO_ADDR
// if p3 = 22 then
34481: LD_VAR 0 3
34485: PUSH
34486: LD_INT 22
34488: EQUAL
34489: IFFALSE 34499
// sTeleport := true ;
34491: LD_ADDR_EXP 121
34495: PUSH
34496: LD_INT 1
34498: ST_TO_ADDR
// if p3 = 23 then
34499: LD_VAR 0 3
34503: PUSH
34504: LD_INT 23
34506: EQUAL
34507: IFFALSE 34517
// sOilTower := true ;
34509: LD_ADDR_EXP 123
34513: PUSH
34514: LD_INT 1
34516: ST_TO_ADDR
// if p3 = 24 then
34517: LD_VAR 0 3
34521: PUSH
34522: LD_INT 24
34524: EQUAL
34525: IFFALSE 34535
// sShovel := true ;
34527: LD_ADDR_EXP 124
34531: PUSH
34532: LD_INT 1
34534: ST_TO_ADDR
// if p3 = 25 then
34535: LD_VAR 0 3
34539: PUSH
34540: LD_INT 25
34542: EQUAL
34543: IFFALSE 34553
// sSheik := true ;
34545: LD_ADDR_EXP 125
34549: PUSH
34550: LD_INT 1
34552: ST_TO_ADDR
// if p3 = 26 then
34553: LD_VAR 0 3
34557: PUSH
34558: LD_INT 26
34560: EQUAL
34561: IFFALSE 34571
// sEarthquake := true ;
34563: LD_ADDR_EXP 127
34567: PUSH
34568: LD_INT 1
34570: ST_TO_ADDR
// if p3 = 27 then
34571: LD_VAR 0 3
34575: PUSH
34576: LD_INT 27
34578: EQUAL
34579: IFFALSE 34589
// sAI := true ;
34581: LD_ADDR_EXP 128
34585: PUSH
34586: LD_INT 1
34588: ST_TO_ADDR
// if p3 = 28 then
34589: LD_VAR 0 3
34593: PUSH
34594: LD_INT 28
34596: EQUAL
34597: IFFALSE 34607
// sCargo := true ;
34599: LD_ADDR_EXP 131
34603: PUSH
34604: LD_INT 1
34606: ST_TO_ADDR
// if p3 = 29 then
34607: LD_VAR 0 3
34611: PUSH
34612: LD_INT 29
34614: EQUAL
34615: IFFALSE 34625
// sDLaser := true ;
34617: LD_ADDR_EXP 132
34621: PUSH
34622: LD_INT 1
34624: ST_TO_ADDR
// if p3 = 30 then
34625: LD_VAR 0 3
34629: PUSH
34630: LD_INT 30
34632: EQUAL
34633: IFFALSE 34643
// sExchange := true ;
34635: LD_ADDR_EXP 133
34639: PUSH
34640: LD_INT 1
34642: ST_TO_ADDR
// if p3 = 31 then
34643: LD_VAR 0 3
34647: PUSH
34648: LD_INT 31
34650: EQUAL
34651: IFFALSE 34661
// sFac := true ;
34653: LD_ADDR_EXP 134
34657: PUSH
34658: LD_INT 1
34660: ST_TO_ADDR
// if p3 = 32 then
34661: LD_VAR 0 3
34665: PUSH
34666: LD_INT 32
34668: EQUAL
34669: IFFALSE 34679
// sPower := true ;
34671: LD_ADDR_EXP 135
34675: PUSH
34676: LD_INT 1
34678: ST_TO_ADDR
// if p3 = 33 then
34679: LD_VAR 0 3
34683: PUSH
34684: LD_INT 33
34686: EQUAL
34687: IFFALSE 34697
// sRandom := true ;
34689: LD_ADDR_EXP 136
34693: PUSH
34694: LD_INT 1
34696: ST_TO_ADDR
// if p3 = 34 then
34697: LD_VAR 0 3
34701: PUSH
34702: LD_INT 34
34704: EQUAL
34705: IFFALSE 34715
// sShield := true ;
34707: LD_ADDR_EXP 137
34711: PUSH
34712: LD_INT 1
34714: ST_TO_ADDR
// if p3 = 35 then
34715: LD_VAR 0 3
34719: PUSH
34720: LD_INT 35
34722: EQUAL
34723: IFFALSE 34733
// sTime := true ;
34725: LD_ADDR_EXP 138
34729: PUSH
34730: LD_INT 1
34732: ST_TO_ADDR
// if p3 = 36 then
34733: LD_VAR 0 3
34737: PUSH
34738: LD_INT 36
34740: EQUAL
34741: IFFALSE 34751
// sTools := true ;
34743: LD_ADDR_EXP 139
34747: PUSH
34748: LD_INT 1
34750: ST_TO_ADDR
// if p3 = 101 then
34751: LD_VAR 0 3
34755: PUSH
34756: LD_INT 101
34758: EQUAL
34759: IFFALSE 34769
// sSold := true ;
34761: LD_ADDR_EXP 104
34765: PUSH
34766: LD_INT 1
34768: ST_TO_ADDR
// if p3 = 102 then
34769: LD_VAR 0 3
34773: PUSH
34774: LD_INT 102
34776: EQUAL
34777: IFFALSE 34787
// sDiff := true ;
34779: LD_ADDR_EXP 105
34783: PUSH
34784: LD_INT 1
34786: ST_TO_ADDR
// if p3 = 103 then
34787: LD_VAR 0 3
34791: PUSH
34792: LD_INT 103
34794: EQUAL
34795: IFFALSE 34805
// sFog := true ;
34797: LD_ADDR_EXP 108
34801: PUSH
34802: LD_INT 1
34804: ST_TO_ADDR
// if p3 = 104 then
34805: LD_VAR 0 3
34809: PUSH
34810: LD_INT 104
34812: EQUAL
34813: IFFALSE 34823
// sReset := true ;
34815: LD_ADDR_EXP 109
34819: PUSH
34820: LD_INT 1
34822: ST_TO_ADDR
// if p3 = 105 then
34823: LD_VAR 0 3
34827: PUSH
34828: LD_INT 105
34830: EQUAL
34831: IFFALSE 34841
// sSun := true ;
34833: LD_ADDR_EXP 110
34837: PUSH
34838: LD_INT 1
34840: ST_TO_ADDR
// if p3 = 106 then
34841: LD_VAR 0 3
34845: PUSH
34846: LD_INT 106
34848: EQUAL
34849: IFFALSE 34859
// sTiger := true ;
34851: LD_ADDR_EXP 106
34855: PUSH
34856: LD_INT 1
34858: ST_TO_ADDR
// if p3 = 107 then
34859: LD_VAR 0 3
34863: PUSH
34864: LD_INT 107
34866: EQUAL
34867: IFFALSE 34877
// sBomb := true ;
34869: LD_ADDR_EXP 107
34873: PUSH
34874: LD_INT 1
34876: ST_TO_ADDR
// if p3 = 108 then
34877: LD_VAR 0 3
34881: PUSH
34882: LD_INT 108
34884: EQUAL
34885: IFFALSE 34895
// sWound := true ;
34887: LD_ADDR_EXP 115
34891: PUSH
34892: LD_INT 1
34894: ST_TO_ADDR
// if p3 = 109 then
34895: LD_VAR 0 3
34899: PUSH
34900: LD_INT 109
34902: EQUAL
34903: IFFALSE 34913
// sBetray := true ;
34905: LD_ADDR_EXP 119
34909: PUSH
34910: LD_INT 1
34912: ST_TO_ADDR
// if p3 = 110 then
34913: LD_VAR 0 3
34917: PUSH
34918: LD_INT 110
34920: EQUAL
34921: IFFALSE 34931
// sContamin := true ;
34923: LD_ADDR_EXP 120
34927: PUSH
34928: LD_INT 1
34930: ST_TO_ADDR
// if p3 = 111 then
34931: LD_VAR 0 3
34935: PUSH
34936: LD_INT 111
34938: EQUAL
34939: IFFALSE 34949
// sOil := true ;
34941: LD_ADDR_EXP 122
34945: PUSH
34946: LD_INT 1
34948: ST_TO_ADDR
// if p3 = 112 then
34949: LD_VAR 0 3
34953: PUSH
34954: LD_INT 112
34956: EQUAL
34957: IFFALSE 34967
// sStu := true ;
34959: LD_ADDR_EXP 126
34963: PUSH
34964: LD_INT 1
34966: ST_TO_ADDR
// if p3 = 113 then
34967: LD_VAR 0 3
34971: PUSH
34972: LD_INT 113
34974: EQUAL
34975: IFFALSE 34985
// sBazooka := true ;
34977: LD_ADDR_EXP 129
34981: PUSH
34982: LD_INT 1
34984: ST_TO_ADDR
// if p3 = 114 then
34985: LD_VAR 0 3
34989: PUSH
34990: LD_INT 114
34992: EQUAL
34993: IFFALSE 35003
// sMortar := true ;
34995: LD_ADDR_EXP 130
34999: PUSH
35000: LD_INT 1
35002: ST_TO_ADDR
// if p3 = 115 then
35003: LD_VAR 0 3
35007: PUSH
35008: LD_INT 115
35010: EQUAL
35011: IFFALSE 35021
// sRanger := true ;
35013: LD_ADDR_EXP 140
35017: PUSH
35018: LD_INT 1
35020: ST_TO_ADDR
// if p3 = 116 then
35021: LD_VAR 0 3
35025: PUSH
35026: LD_INT 116
35028: EQUAL
35029: IFFALSE 35039
// sComputer := true ;
35031: LD_ADDR_EXP 141
35035: PUSH
35036: LD_INT 1
35038: ST_TO_ADDR
// if p3 = 117 then
35039: LD_VAR 0 3
35043: PUSH
35044: LD_INT 117
35046: EQUAL
35047: IFFALSE 35057
// s30 := true ;
35049: LD_ADDR_EXP 142
35053: PUSH
35054: LD_INT 1
35056: ST_TO_ADDR
// if p3 = 118 then
35057: LD_VAR 0 3
35061: PUSH
35062: LD_INT 118
35064: EQUAL
35065: IFFALSE 35075
// s60 := true ;
35067: LD_ADDR_EXP 143
35071: PUSH
35072: LD_INT 1
35074: ST_TO_ADDR
// end ; if p2 = hack_mode then
35075: LD_VAR 0 2
35079: PUSH
35080: LD_INT 101
35082: EQUAL
35083: IFFALSE 35211
// begin case p3 of 1 :
35085: LD_VAR 0 3
35089: PUSH
35090: LD_INT 1
35092: DOUBLE
35093: EQUAL
35094: IFTRUE 35098
35096: GO 35105
35098: POP
// hHackUnlimitedResources ; 2 :
35099: CALL 47358 0 0
35103: GO 35211
35105: LD_INT 2
35107: DOUBLE
35108: EQUAL
35109: IFTRUE 35113
35111: GO 35120
35113: POP
// hHackSetLevel10 ; 3 :
35114: CALL 47491 0 0
35118: GO 35211
35120: LD_INT 3
35122: DOUBLE
35123: EQUAL
35124: IFTRUE 35128
35126: GO 35135
35128: POP
// hHackSetLevel10YourUnits ; 4 :
35129: CALL 47576 0 0
35133: GO 35211
35135: LD_INT 4
35137: DOUBLE
35138: EQUAL
35139: IFTRUE 35143
35141: GO 35150
35143: POP
// hHackInvincible ; 5 :
35144: CALL 48024 0 0
35148: GO 35211
35150: LD_INT 5
35152: DOUBLE
35153: EQUAL
35154: IFTRUE 35158
35156: GO 35165
35158: POP
// hHackInvisible ; 6 :
35159: CALL 48135 0 0
35163: GO 35211
35165: LD_INT 6
35167: DOUBLE
35168: EQUAL
35169: IFTRUE 35173
35171: GO 35180
35173: POP
// hHackChangeYourSide ; 7 :
35174: CALL 48192 0 0
35178: GO 35211
35180: LD_INT 7
35182: DOUBLE
35183: EQUAL
35184: IFTRUE 35188
35186: GO 35195
35188: POP
// hHackChangeUnitSide ; 8 :
35189: CALL 48234 0 0
35193: GO 35211
35195: LD_INT 8
35197: DOUBLE
35198: EQUAL
35199: IFTRUE 35203
35201: GO 35210
35203: POP
// hHackFog ; end ;
35204: CALL 48335 0 0
35208: GO 35211
35210: POP
// end ; if p2 = game_save_mode then
35211: LD_VAR 0 2
35215: PUSH
35216: LD_INT 102
35218: EQUAL
35219: IFFALSE 35274
// begin if p3 = 1 then
35221: LD_VAR 0 3
35225: PUSH
35226: LD_INT 1
35228: EQUAL
35229: IFFALSE 35241
// globalGameSaveCounter := p4 ;
35231: LD_ADDR_EXP 86
35235: PUSH
35236: LD_VAR 0 4
35240: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
35241: LD_VAR 0 3
35245: PUSH
35246: LD_INT 2
35248: EQUAL
35249: PUSH
35250: LD_EXP 86
35254: AND
35255: IFFALSE 35274
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
35257: LD_STRING setGameSaveCounter(
35259: PUSH
35260: LD_EXP 86
35264: STR
35265: PUSH
35266: LD_STRING )
35268: STR
35269: PPUSH
35270: CALL_OW 559
// end ; end ;
35274: LD_VAR 0 7
35278: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
35279: LD_INT 0
35281: PPUSH
// streamModeActive := false ;
35282: LD_ADDR_EXP 87
35286: PUSH
35287: LD_INT 0
35289: ST_TO_ADDR
// normalCounter := 36 ;
35290: LD_ADDR_EXP 88
35294: PUSH
35295: LD_INT 36
35297: ST_TO_ADDR
// hardcoreCounter := 18 ;
35298: LD_ADDR_EXP 89
35302: PUSH
35303: LD_INT 18
35305: ST_TO_ADDR
// sRocket := false ;
35306: LD_ADDR_EXP 92
35310: PUSH
35311: LD_INT 0
35313: ST_TO_ADDR
// sSpeed := false ;
35314: LD_ADDR_EXP 91
35318: PUSH
35319: LD_INT 0
35321: ST_TO_ADDR
// sEngine := false ;
35322: LD_ADDR_EXP 93
35326: PUSH
35327: LD_INT 0
35329: ST_TO_ADDR
// sSpec := false ;
35330: LD_ADDR_EXP 90
35334: PUSH
35335: LD_INT 0
35337: ST_TO_ADDR
// sLevel := false ;
35338: LD_ADDR_EXP 94
35342: PUSH
35343: LD_INT 0
35345: ST_TO_ADDR
// sArmoury := false ;
35346: LD_ADDR_EXP 95
35350: PUSH
35351: LD_INT 0
35353: ST_TO_ADDR
// sRadar := false ;
35354: LD_ADDR_EXP 96
35358: PUSH
35359: LD_INT 0
35361: ST_TO_ADDR
// sBunker := false ;
35362: LD_ADDR_EXP 97
35366: PUSH
35367: LD_INT 0
35369: ST_TO_ADDR
// sHack := false ;
35370: LD_ADDR_EXP 98
35374: PUSH
35375: LD_INT 0
35377: ST_TO_ADDR
// sFire := false ;
35378: LD_ADDR_EXP 99
35382: PUSH
35383: LD_INT 0
35385: ST_TO_ADDR
// sRefresh := false ;
35386: LD_ADDR_EXP 100
35390: PUSH
35391: LD_INT 0
35393: ST_TO_ADDR
// sExp := false ;
35394: LD_ADDR_EXP 101
35398: PUSH
35399: LD_INT 0
35401: ST_TO_ADDR
// sDepot := false ;
35402: LD_ADDR_EXP 102
35406: PUSH
35407: LD_INT 0
35409: ST_TO_ADDR
// sFlag := false ;
35410: LD_ADDR_EXP 103
35414: PUSH
35415: LD_INT 0
35417: ST_TO_ADDR
// sKamikadze := false ;
35418: LD_ADDR_EXP 111
35422: PUSH
35423: LD_INT 0
35425: ST_TO_ADDR
// sTroll := false ;
35426: LD_ADDR_EXP 112
35430: PUSH
35431: LD_INT 0
35433: ST_TO_ADDR
// sSlow := false ;
35434: LD_ADDR_EXP 113
35438: PUSH
35439: LD_INT 0
35441: ST_TO_ADDR
// sLack := false ;
35442: LD_ADDR_EXP 114
35446: PUSH
35447: LD_INT 0
35449: ST_TO_ADDR
// sTank := false ;
35450: LD_ADDR_EXP 116
35454: PUSH
35455: LD_INT 0
35457: ST_TO_ADDR
// sRemote := false ;
35458: LD_ADDR_EXP 117
35462: PUSH
35463: LD_INT 0
35465: ST_TO_ADDR
// sPowell := false ;
35466: LD_ADDR_EXP 118
35470: PUSH
35471: LD_INT 0
35473: ST_TO_ADDR
// sTeleport := false ;
35474: LD_ADDR_EXP 121
35478: PUSH
35479: LD_INT 0
35481: ST_TO_ADDR
// sOilTower := false ;
35482: LD_ADDR_EXP 123
35486: PUSH
35487: LD_INT 0
35489: ST_TO_ADDR
// sShovel := false ;
35490: LD_ADDR_EXP 124
35494: PUSH
35495: LD_INT 0
35497: ST_TO_ADDR
// sSheik := false ;
35498: LD_ADDR_EXP 125
35502: PUSH
35503: LD_INT 0
35505: ST_TO_ADDR
// sEarthquake := false ;
35506: LD_ADDR_EXP 127
35510: PUSH
35511: LD_INT 0
35513: ST_TO_ADDR
// sAI := false ;
35514: LD_ADDR_EXP 128
35518: PUSH
35519: LD_INT 0
35521: ST_TO_ADDR
// sCargo := false ;
35522: LD_ADDR_EXP 131
35526: PUSH
35527: LD_INT 0
35529: ST_TO_ADDR
// sDLaser := false ;
35530: LD_ADDR_EXP 132
35534: PUSH
35535: LD_INT 0
35537: ST_TO_ADDR
// sExchange := false ;
35538: LD_ADDR_EXP 133
35542: PUSH
35543: LD_INT 0
35545: ST_TO_ADDR
// sFac := false ;
35546: LD_ADDR_EXP 134
35550: PUSH
35551: LD_INT 0
35553: ST_TO_ADDR
// sPower := false ;
35554: LD_ADDR_EXP 135
35558: PUSH
35559: LD_INT 0
35561: ST_TO_ADDR
// sRandom := false ;
35562: LD_ADDR_EXP 136
35566: PUSH
35567: LD_INT 0
35569: ST_TO_ADDR
// sShield := false ;
35570: LD_ADDR_EXP 137
35574: PUSH
35575: LD_INT 0
35577: ST_TO_ADDR
// sTime := false ;
35578: LD_ADDR_EXP 138
35582: PUSH
35583: LD_INT 0
35585: ST_TO_ADDR
// sTools := false ;
35586: LD_ADDR_EXP 139
35590: PUSH
35591: LD_INT 0
35593: ST_TO_ADDR
// sSold := false ;
35594: LD_ADDR_EXP 104
35598: PUSH
35599: LD_INT 0
35601: ST_TO_ADDR
// sDiff := false ;
35602: LD_ADDR_EXP 105
35606: PUSH
35607: LD_INT 0
35609: ST_TO_ADDR
// sFog := false ;
35610: LD_ADDR_EXP 108
35614: PUSH
35615: LD_INT 0
35617: ST_TO_ADDR
// sReset := false ;
35618: LD_ADDR_EXP 109
35622: PUSH
35623: LD_INT 0
35625: ST_TO_ADDR
// sSun := false ;
35626: LD_ADDR_EXP 110
35630: PUSH
35631: LD_INT 0
35633: ST_TO_ADDR
// sTiger := false ;
35634: LD_ADDR_EXP 106
35638: PUSH
35639: LD_INT 0
35641: ST_TO_ADDR
// sBomb := false ;
35642: LD_ADDR_EXP 107
35646: PUSH
35647: LD_INT 0
35649: ST_TO_ADDR
// sWound := false ;
35650: LD_ADDR_EXP 115
35654: PUSH
35655: LD_INT 0
35657: ST_TO_ADDR
// sBetray := false ;
35658: LD_ADDR_EXP 119
35662: PUSH
35663: LD_INT 0
35665: ST_TO_ADDR
// sContamin := false ;
35666: LD_ADDR_EXP 120
35670: PUSH
35671: LD_INT 0
35673: ST_TO_ADDR
// sOil := false ;
35674: LD_ADDR_EXP 122
35678: PUSH
35679: LD_INT 0
35681: ST_TO_ADDR
// sStu := false ;
35682: LD_ADDR_EXP 126
35686: PUSH
35687: LD_INT 0
35689: ST_TO_ADDR
// sBazooka := false ;
35690: LD_ADDR_EXP 129
35694: PUSH
35695: LD_INT 0
35697: ST_TO_ADDR
// sMortar := false ;
35698: LD_ADDR_EXP 130
35702: PUSH
35703: LD_INT 0
35705: ST_TO_ADDR
// sRanger := false ;
35706: LD_ADDR_EXP 140
35710: PUSH
35711: LD_INT 0
35713: ST_TO_ADDR
// sComputer := false ;
35714: LD_ADDR_EXP 141
35718: PUSH
35719: LD_INT 0
35721: ST_TO_ADDR
// s30 := false ;
35722: LD_ADDR_EXP 142
35726: PUSH
35727: LD_INT 0
35729: ST_TO_ADDR
// s60 := false ;
35730: LD_ADDR_EXP 143
35734: PUSH
35735: LD_INT 0
35737: ST_TO_ADDR
// end ;
35738: LD_VAR 0 1
35742: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
35743: LD_INT 0
35745: PPUSH
35746: PPUSH
35747: PPUSH
35748: PPUSH
35749: PPUSH
35750: PPUSH
35751: PPUSH
// result := [ ] ;
35752: LD_ADDR_VAR 0 2
35756: PUSH
35757: EMPTY
35758: ST_TO_ADDR
// if campaign_id = 1 then
35759: LD_OWVAR 69
35763: PUSH
35764: LD_INT 1
35766: EQUAL
35767: IFFALSE 38933
// begin case mission_number of 1 :
35769: LD_OWVAR 70
35773: PUSH
35774: LD_INT 1
35776: DOUBLE
35777: EQUAL
35778: IFTRUE 35782
35780: GO 35858
35782: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
35783: LD_ADDR_VAR 0 2
35787: PUSH
35788: LD_INT 2
35790: PUSH
35791: LD_INT 4
35793: PUSH
35794: LD_INT 11
35796: PUSH
35797: LD_INT 12
35799: PUSH
35800: LD_INT 15
35802: PUSH
35803: LD_INT 16
35805: PUSH
35806: LD_INT 22
35808: PUSH
35809: LD_INT 23
35811: PUSH
35812: LD_INT 26
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 101
35828: PUSH
35829: LD_INT 102
35831: PUSH
35832: LD_INT 106
35834: PUSH
35835: LD_INT 116
35837: PUSH
35838: LD_INT 117
35840: PUSH
35841: LD_INT 118
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: ST_TO_ADDR
35856: GO 38931
35858: LD_INT 2
35860: DOUBLE
35861: EQUAL
35862: IFTRUE 35866
35864: GO 35950
35866: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
35867: LD_ADDR_VAR 0 2
35871: PUSH
35872: LD_INT 2
35874: PUSH
35875: LD_INT 4
35877: PUSH
35878: LD_INT 11
35880: PUSH
35881: LD_INT 12
35883: PUSH
35884: LD_INT 15
35886: PUSH
35887: LD_INT 16
35889: PUSH
35890: LD_INT 22
35892: PUSH
35893: LD_INT 23
35895: PUSH
35896: LD_INT 26
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 101
35912: PUSH
35913: LD_INT 102
35915: PUSH
35916: LD_INT 105
35918: PUSH
35919: LD_INT 106
35921: PUSH
35922: LD_INT 108
35924: PUSH
35925: LD_INT 116
35927: PUSH
35928: LD_INT 117
35930: PUSH
35931: LD_INT 118
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: ST_TO_ADDR
35948: GO 38931
35950: LD_INT 3
35952: DOUBLE
35953: EQUAL
35954: IFTRUE 35958
35956: GO 36046
35958: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
35959: LD_ADDR_VAR 0 2
35963: PUSH
35964: LD_INT 2
35966: PUSH
35967: LD_INT 4
35969: PUSH
35970: LD_INT 5
35972: PUSH
35973: LD_INT 11
35975: PUSH
35976: LD_INT 12
35978: PUSH
35979: LD_INT 15
35981: PUSH
35982: LD_INT 16
35984: PUSH
35985: LD_INT 22
35987: PUSH
35988: LD_INT 26
35990: PUSH
35991: LD_INT 36
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 101
36008: PUSH
36009: LD_INT 102
36011: PUSH
36012: LD_INT 105
36014: PUSH
36015: LD_INT 106
36017: PUSH
36018: LD_INT 108
36020: PUSH
36021: LD_INT 116
36023: PUSH
36024: LD_INT 117
36026: PUSH
36027: LD_INT 118
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: ST_TO_ADDR
36044: GO 38931
36046: LD_INT 4
36048: DOUBLE
36049: EQUAL
36050: IFTRUE 36054
36052: GO 36150
36054: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
36055: LD_ADDR_VAR 0 2
36059: PUSH
36060: LD_INT 2
36062: PUSH
36063: LD_INT 4
36065: PUSH
36066: LD_INT 5
36068: PUSH
36069: LD_INT 8
36071: PUSH
36072: LD_INT 11
36074: PUSH
36075: LD_INT 12
36077: PUSH
36078: LD_INT 15
36080: PUSH
36081: LD_INT 16
36083: PUSH
36084: LD_INT 22
36086: PUSH
36087: LD_INT 23
36089: PUSH
36090: LD_INT 26
36092: PUSH
36093: LD_INT 36
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 101
36112: PUSH
36113: LD_INT 102
36115: PUSH
36116: LD_INT 105
36118: PUSH
36119: LD_INT 106
36121: PUSH
36122: LD_INT 108
36124: PUSH
36125: LD_INT 116
36127: PUSH
36128: LD_INT 117
36130: PUSH
36131: LD_INT 118
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: ST_TO_ADDR
36148: GO 38931
36150: LD_INT 5
36152: DOUBLE
36153: EQUAL
36154: IFTRUE 36158
36156: GO 36270
36158: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
36159: LD_ADDR_VAR 0 2
36163: PUSH
36164: LD_INT 2
36166: PUSH
36167: LD_INT 4
36169: PUSH
36170: LD_INT 5
36172: PUSH
36173: LD_INT 6
36175: PUSH
36176: LD_INT 8
36178: PUSH
36179: LD_INT 11
36181: PUSH
36182: LD_INT 12
36184: PUSH
36185: LD_INT 15
36187: PUSH
36188: LD_INT 16
36190: PUSH
36191: LD_INT 22
36193: PUSH
36194: LD_INT 23
36196: PUSH
36197: LD_INT 25
36199: PUSH
36200: LD_INT 26
36202: PUSH
36203: LD_INT 36
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 101
36224: PUSH
36225: LD_INT 102
36227: PUSH
36228: LD_INT 105
36230: PUSH
36231: LD_INT 106
36233: PUSH
36234: LD_INT 108
36236: PUSH
36237: LD_INT 109
36239: PUSH
36240: LD_INT 112
36242: PUSH
36243: LD_INT 116
36245: PUSH
36246: LD_INT 117
36248: PUSH
36249: LD_INT 118
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: ST_TO_ADDR
36268: GO 38931
36270: LD_INT 6
36272: DOUBLE
36273: EQUAL
36274: IFTRUE 36278
36276: GO 36410
36278: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
36279: LD_ADDR_VAR 0 2
36283: PUSH
36284: LD_INT 2
36286: PUSH
36287: LD_INT 4
36289: PUSH
36290: LD_INT 5
36292: PUSH
36293: LD_INT 6
36295: PUSH
36296: LD_INT 8
36298: PUSH
36299: LD_INT 11
36301: PUSH
36302: LD_INT 12
36304: PUSH
36305: LD_INT 15
36307: PUSH
36308: LD_INT 16
36310: PUSH
36311: LD_INT 20
36313: PUSH
36314: LD_INT 21
36316: PUSH
36317: LD_INT 22
36319: PUSH
36320: LD_INT 23
36322: PUSH
36323: LD_INT 25
36325: PUSH
36326: LD_INT 26
36328: PUSH
36329: LD_INT 30
36331: PUSH
36332: LD_INT 31
36334: PUSH
36335: LD_INT 32
36337: PUSH
36338: LD_INT 36
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 101
36364: PUSH
36365: LD_INT 102
36367: PUSH
36368: LD_INT 105
36370: PUSH
36371: LD_INT 106
36373: PUSH
36374: LD_INT 108
36376: PUSH
36377: LD_INT 109
36379: PUSH
36380: LD_INT 112
36382: PUSH
36383: LD_INT 116
36385: PUSH
36386: LD_INT 117
36388: PUSH
36389: LD_INT 118
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: ST_TO_ADDR
36408: GO 38931
36410: LD_INT 7
36412: DOUBLE
36413: EQUAL
36414: IFTRUE 36418
36416: GO 36530
36418: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
36419: LD_ADDR_VAR 0 2
36423: PUSH
36424: LD_INT 2
36426: PUSH
36427: LD_INT 4
36429: PUSH
36430: LD_INT 5
36432: PUSH
36433: LD_INT 7
36435: PUSH
36436: LD_INT 11
36438: PUSH
36439: LD_INT 12
36441: PUSH
36442: LD_INT 15
36444: PUSH
36445: LD_INT 16
36447: PUSH
36448: LD_INT 20
36450: PUSH
36451: LD_INT 21
36453: PUSH
36454: LD_INT 22
36456: PUSH
36457: LD_INT 23
36459: PUSH
36460: LD_INT 25
36462: PUSH
36463: LD_INT 26
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 101
36484: PUSH
36485: LD_INT 102
36487: PUSH
36488: LD_INT 103
36490: PUSH
36491: LD_INT 105
36493: PUSH
36494: LD_INT 106
36496: PUSH
36497: LD_INT 108
36499: PUSH
36500: LD_INT 112
36502: PUSH
36503: LD_INT 116
36505: PUSH
36506: LD_INT 117
36508: PUSH
36509: LD_INT 118
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: ST_TO_ADDR
36528: GO 38931
36530: LD_INT 8
36532: DOUBLE
36533: EQUAL
36534: IFTRUE 36538
36536: GO 36678
36538: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
36539: LD_ADDR_VAR 0 2
36543: PUSH
36544: LD_INT 2
36546: PUSH
36547: LD_INT 4
36549: PUSH
36550: LD_INT 5
36552: PUSH
36553: LD_INT 6
36555: PUSH
36556: LD_INT 7
36558: PUSH
36559: LD_INT 8
36561: PUSH
36562: LD_INT 11
36564: PUSH
36565: LD_INT 12
36567: PUSH
36568: LD_INT 15
36570: PUSH
36571: LD_INT 16
36573: PUSH
36574: LD_INT 20
36576: PUSH
36577: LD_INT 21
36579: PUSH
36580: LD_INT 22
36582: PUSH
36583: LD_INT 23
36585: PUSH
36586: LD_INT 25
36588: PUSH
36589: LD_INT 26
36591: PUSH
36592: LD_INT 30
36594: PUSH
36595: LD_INT 31
36597: PUSH
36598: LD_INT 32
36600: PUSH
36601: LD_INT 36
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 101
36628: PUSH
36629: LD_INT 102
36631: PUSH
36632: LD_INT 103
36634: PUSH
36635: LD_INT 105
36637: PUSH
36638: LD_INT 106
36640: PUSH
36641: LD_INT 108
36643: PUSH
36644: LD_INT 109
36646: PUSH
36647: LD_INT 112
36649: PUSH
36650: LD_INT 116
36652: PUSH
36653: LD_INT 117
36655: PUSH
36656: LD_INT 118
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: ST_TO_ADDR
36676: GO 38931
36678: LD_INT 9
36680: DOUBLE
36681: EQUAL
36682: IFTRUE 36686
36684: GO 36834
36686: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
36687: LD_ADDR_VAR 0 2
36691: PUSH
36692: LD_INT 2
36694: PUSH
36695: LD_INT 4
36697: PUSH
36698: LD_INT 5
36700: PUSH
36701: LD_INT 6
36703: PUSH
36704: LD_INT 7
36706: PUSH
36707: LD_INT 8
36709: PUSH
36710: LD_INT 11
36712: PUSH
36713: LD_INT 12
36715: PUSH
36716: LD_INT 15
36718: PUSH
36719: LD_INT 16
36721: PUSH
36722: LD_INT 20
36724: PUSH
36725: LD_INT 21
36727: PUSH
36728: LD_INT 22
36730: PUSH
36731: LD_INT 23
36733: PUSH
36734: LD_INT 25
36736: PUSH
36737: LD_INT 26
36739: PUSH
36740: LD_INT 28
36742: PUSH
36743: LD_INT 30
36745: PUSH
36746: LD_INT 31
36748: PUSH
36749: LD_INT 32
36751: PUSH
36752: LD_INT 36
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 101
36780: PUSH
36781: LD_INT 102
36783: PUSH
36784: LD_INT 103
36786: PUSH
36787: LD_INT 105
36789: PUSH
36790: LD_INT 106
36792: PUSH
36793: LD_INT 108
36795: PUSH
36796: LD_INT 109
36798: PUSH
36799: LD_INT 112
36801: PUSH
36802: LD_INT 114
36804: PUSH
36805: LD_INT 116
36807: PUSH
36808: LD_INT 117
36810: PUSH
36811: LD_INT 118
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: ST_TO_ADDR
36832: GO 38931
36834: LD_INT 10
36836: DOUBLE
36837: EQUAL
36838: IFTRUE 36842
36840: GO 37038
36842: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
36843: LD_ADDR_VAR 0 2
36847: PUSH
36848: LD_INT 2
36850: PUSH
36851: LD_INT 4
36853: PUSH
36854: LD_INT 5
36856: PUSH
36857: LD_INT 6
36859: PUSH
36860: LD_INT 7
36862: PUSH
36863: LD_INT 8
36865: PUSH
36866: LD_INT 9
36868: PUSH
36869: LD_INT 10
36871: PUSH
36872: LD_INT 11
36874: PUSH
36875: LD_INT 12
36877: PUSH
36878: LD_INT 13
36880: PUSH
36881: LD_INT 14
36883: PUSH
36884: LD_INT 15
36886: PUSH
36887: LD_INT 16
36889: PUSH
36890: LD_INT 17
36892: PUSH
36893: LD_INT 18
36895: PUSH
36896: LD_INT 19
36898: PUSH
36899: LD_INT 20
36901: PUSH
36902: LD_INT 21
36904: PUSH
36905: LD_INT 22
36907: PUSH
36908: LD_INT 23
36910: PUSH
36911: LD_INT 24
36913: PUSH
36914: LD_INT 25
36916: PUSH
36917: LD_INT 26
36919: PUSH
36920: LD_INT 28
36922: PUSH
36923: LD_INT 30
36925: PUSH
36926: LD_INT 31
36928: PUSH
36929: LD_INT 32
36931: PUSH
36932: LD_INT 36
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 101
36968: PUSH
36969: LD_INT 102
36971: PUSH
36972: LD_INT 103
36974: PUSH
36975: LD_INT 104
36977: PUSH
36978: LD_INT 105
36980: PUSH
36981: LD_INT 106
36983: PUSH
36984: LD_INT 107
36986: PUSH
36987: LD_INT 108
36989: PUSH
36990: LD_INT 109
36992: PUSH
36993: LD_INT 110
36995: PUSH
36996: LD_INT 111
36998: PUSH
36999: LD_INT 112
37001: PUSH
37002: LD_INT 114
37004: PUSH
37005: LD_INT 116
37007: PUSH
37008: LD_INT 117
37010: PUSH
37011: LD_INT 118
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: ST_TO_ADDR
37036: GO 38931
37038: LD_INT 11
37040: DOUBLE
37041: EQUAL
37042: IFTRUE 37046
37044: GO 37250
37046: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
37047: LD_ADDR_VAR 0 2
37051: PUSH
37052: LD_INT 2
37054: PUSH
37055: LD_INT 3
37057: PUSH
37058: LD_INT 4
37060: PUSH
37061: LD_INT 5
37063: PUSH
37064: LD_INT 6
37066: PUSH
37067: LD_INT 7
37069: PUSH
37070: LD_INT 8
37072: PUSH
37073: LD_INT 9
37075: PUSH
37076: LD_INT 10
37078: PUSH
37079: LD_INT 11
37081: PUSH
37082: LD_INT 12
37084: PUSH
37085: LD_INT 13
37087: PUSH
37088: LD_INT 14
37090: PUSH
37091: LD_INT 15
37093: PUSH
37094: LD_INT 16
37096: PUSH
37097: LD_INT 17
37099: PUSH
37100: LD_INT 18
37102: PUSH
37103: LD_INT 19
37105: PUSH
37106: LD_INT 20
37108: PUSH
37109: LD_INT 21
37111: PUSH
37112: LD_INT 22
37114: PUSH
37115: LD_INT 23
37117: PUSH
37118: LD_INT 24
37120: PUSH
37121: LD_INT 25
37123: PUSH
37124: LD_INT 26
37126: PUSH
37127: LD_INT 28
37129: PUSH
37130: LD_INT 30
37132: PUSH
37133: LD_INT 31
37135: PUSH
37136: LD_INT 32
37138: PUSH
37139: LD_INT 34
37141: PUSH
37142: LD_INT 36
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 101
37180: PUSH
37181: LD_INT 102
37183: PUSH
37184: LD_INT 103
37186: PUSH
37187: LD_INT 104
37189: PUSH
37190: LD_INT 105
37192: PUSH
37193: LD_INT 106
37195: PUSH
37196: LD_INT 107
37198: PUSH
37199: LD_INT 108
37201: PUSH
37202: LD_INT 109
37204: PUSH
37205: LD_INT 110
37207: PUSH
37208: LD_INT 111
37210: PUSH
37211: LD_INT 112
37213: PUSH
37214: LD_INT 114
37216: PUSH
37217: LD_INT 116
37219: PUSH
37220: LD_INT 117
37222: PUSH
37223: LD_INT 118
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: ST_TO_ADDR
37248: GO 38931
37250: LD_INT 12
37252: DOUBLE
37253: EQUAL
37254: IFTRUE 37258
37256: GO 37478
37258: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
37259: LD_ADDR_VAR 0 2
37263: PUSH
37264: LD_INT 1
37266: PUSH
37267: LD_INT 2
37269: PUSH
37270: LD_INT 3
37272: PUSH
37273: LD_INT 4
37275: PUSH
37276: LD_INT 5
37278: PUSH
37279: LD_INT 6
37281: PUSH
37282: LD_INT 7
37284: PUSH
37285: LD_INT 8
37287: PUSH
37288: LD_INT 9
37290: PUSH
37291: LD_INT 10
37293: PUSH
37294: LD_INT 11
37296: PUSH
37297: LD_INT 12
37299: PUSH
37300: LD_INT 13
37302: PUSH
37303: LD_INT 14
37305: PUSH
37306: LD_INT 15
37308: PUSH
37309: LD_INT 16
37311: PUSH
37312: LD_INT 17
37314: PUSH
37315: LD_INT 18
37317: PUSH
37318: LD_INT 19
37320: PUSH
37321: LD_INT 20
37323: PUSH
37324: LD_INT 21
37326: PUSH
37327: LD_INT 22
37329: PUSH
37330: LD_INT 23
37332: PUSH
37333: LD_INT 24
37335: PUSH
37336: LD_INT 25
37338: PUSH
37339: LD_INT 26
37341: PUSH
37342: LD_INT 27
37344: PUSH
37345: LD_INT 28
37347: PUSH
37348: LD_INT 30
37350: PUSH
37351: LD_INT 31
37353: PUSH
37354: LD_INT 32
37356: PUSH
37357: LD_INT 33
37359: PUSH
37360: LD_INT 34
37362: PUSH
37363: LD_INT 36
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 101
37404: PUSH
37405: LD_INT 102
37407: PUSH
37408: LD_INT 103
37410: PUSH
37411: LD_INT 104
37413: PUSH
37414: LD_INT 105
37416: PUSH
37417: LD_INT 106
37419: PUSH
37420: LD_INT 107
37422: PUSH
37423: LD_INT 108
37425: PUSH
37426: LD_INT 109
37428: PUSH
37429: LD_INT 110
37431: PUSH
37432: LD_INT 111
37434: PUSH
37435: LD_INT 112
37437: PUSH
37438: LD_INT 113
37440: PUSH
37441: LD_INT 114
37443: PUSH
37444: LD_INT 116
37446: PUSH
37447: LD_INT 117
37449: PUSH
37450: LD_INT 118
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: ST_TO_ADDR
37476: GO 38931
37478: LD_INT 13
37480: DOUBLE
37481: EQUAL
37482: IFTRUE 37486
37484: GO 37694
37486: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
37487: LD_ADDR_VAR 0 2
37491: PUSH
37492: LD_INT 1
37494: PUSH
37495: LD_INT 2
37497: PUSH
37498: LD_INT 3
37500: PUSH
37501: LD_INT 4
37503: PUSH
37504: LD_INT 5
37506: PUSH
37507: LD_INT 8
37509: PUSH
37510: LD_INT 9
37512: PUSH
37513: LD_INT 10
37515: PUSH
37516: LD_INT 11
37518: PUSH
37519: LD_INT 12
37521: PUSH
37522: LD_INT 14
37524: PUSH
37525: LD_INT 15
37527: PUSH
37528: LD_INT 16
37530: PUSH
37531: LD_INT 17
37533: PUSH
37534: LD_INT 18
37536: PUSH
37537: LD_INT 19
37539: PUSH
37540: LD_INT 20
37542: PUSH
37543: LD_INT 21
37545: PUSH
37546: LD_INT 22
37548: PUSH
37549: LD_INT 23
37551: PUSH
37552: LD_INT 24
37554: PUSH
37555: LD_INT 25
37557: PUSH
37558: LD_INT 26
37560: PUSH
37561: LD_INT 27
37563: PUSH
37564: LD_INT 28
37566: PUSH
37567: LD_INT 30
37569: PUSH
37570: LD_INT 31
37572: PUSH
37573: LD_INT 32
37575: PUSH
37576: LD_INT 33
37578: PUSH
37579: LD_INT 34
37581: PUSH
37582: LD_INT 36
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 101
37620: PUSH
37621: LD_INT 102
37623: PUSH
37624: LD_INT 103
37626: PUSH
37627: LD_INT 104
37629: PUSH
37630: LD_INT 105
37632: PUSH
37633: LD_INT 106
37635: PUSH
37636: LD_INT 107
37638: PUSH
37639: LD_INT 108
37641: PUSH
37642: LD_INT 109
37644: PUSH
37645: LD_INT 110
37647: PUSH
37648: LD_INT 111
37650: PUSH
37651: LD_INT 112
37653: PUSH
37654: LD_INT 113
37656: PUSH
37657: LD_INT 114
37659: PUSH
37660: LD_INT 116
37662: PUSH
37663: LD_INT 117
37665: PUSH
37666: LD_INT 118
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: ST_TO_ADDR
37692: GO 38931
37694: LD_INT 14
37696: DOUBLE
37697: EQUAL
37698: IFTRUE 37702
37700: GO 37926
37702: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
37703: LD_ADDR_VAR 0 2
37707: PUSH
37708: LD_INT 1
37710: PUSH
37711: LD_INT 2
37713: PUSH
37714: LD_INT 3
37716: PUSH
37717: LD_INT 4
37719: PUSH
37720: LD_INT 5
37722: PUSH
37723: LD_INT 6
37725: PUSH
37726: LD_INT 7
37728: PUSH
37729: LD_INT 8
37731: PUSH
37732: LD_INT 9
37734: PUSH
37735: LD_INT 10
37737: PUSH
37738: LD_INT 11
37740: PUSH
37741: LD_INT 12
37743: PUSH
37744: LD_INT 13
37746: PUSH
37747: LD_INT 14
37749: PUSH
37750: LD_INT 15
37752: PUSH
37753: LD_INT 16
37755: PUSH
37756: LD_INT 17
37758: PUSH
37759: LD_INT 18
37761: PUSH
37762: LD_INT 19
37764: PUSH
37765: LD_INT 20
37767: PUSH
37768: LD_INT 21
37770: PUSH
37771: LD_INT 22
37773: PUSH
37774: LD_INT 23
37776: PUSH
37777: LD_INT 24
37779: PUSH
37780: LD_INT 25
37782: PUSH
37783: LD_INT 26
37785: PUSH
37786: LD_INT 27
37788: PUSH
37789: LD_INT 28
37791: PUSH
37792: LD_INT 29
37794: PUSH
37795: LD_INT 30
37797: PUSH
37798: LD_INT 31
37800: PUSH
37801: LD_INT 32
37803: PUSH
37804: LD_INT 33
37806: PUSH
37807: LD_INT 34
37809: PUSH
37810: LD_INT 36
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 101
37852: PUSH
37853: LD_INT 102
37855: PUSH
37856: LD_INT 103
37858: PUSH
37859: LD_INT 104
37861: PUSH
37862: LD_INT 105
37864: PUSH
37865: LD_INT 106
37867: PUSH
37868: LD_INT 107
37870: PUSH
37871: LD_INT 108
37873: PUSH
37874: LD_INT 109
37876: PUSH
37877: LD_INT 110
37879: PUSH
37880: LD_INT 111
37882: PUSH
37883: LD_INT 112
37885: PUSH
37886: LD_INT 113
37888: PUSH
37889: LD_INT 114
37891: PUSH
37892: LD_INT 116
37894: PUSH
37895: LD_INT 117
37897: PUSH
37898: LD_INT 118
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: ST_TO_ADDR
37924: GO 38931
37926: LD_INT 15
37928: DOUBLE
37929: EQUAL
37930: IFTRUE 37934
37932: GO 38158
37934: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
37935: LD_ADDR_VAR 0 2
37939: PUSH
37940: LD_INT 1
37942: PUSH
37943: LD_INT 2
37945: PUSH
37946: LD_INT 3
37948: PUSH
37949: LD_INT 4
37951: PUSH
37952: LD_INT 5
37954: PUSH
37955: LD_INT 6
37957: PUSH
37958: LD_INT 7
37960: PUSH
37961: LD_INT 8
37963: PUSH
37964: LD_INT 9
37966: PUSH
37967: LD_INT 10
37969: PUSH
37970: LD_INT 11
37972: PUSH
37973: LD_INT 12
37975: PUSH
37976: LD_INT 13
37978: PUSH
37979: LD_INT 14
37981: PUSH
37982: LD_INT 15
37984: PUSH
37985: LD_INT 16
37987: PUSH
37988: LD_INT 17
37990: PUSH
37991: LD_INT 18
37993: PUSH
37994: LD_INT 19
37996: PUSH
37997: LD_INT 20
37999: PUSH
38000: LD_INT 21
38002: PUSH
38003: LD_INT 22
38005: PUSH
38006: LD_INT 23
38008: PUSH
38009: LD_INT 24
38011: PUSH
38012: LD_INT 25
38014: PUSH
38015: LD_INT 26
38017: PUSH
38018: LD_INT 27
38020: PUSH
38021: LD_INT 28
38023: PUSH
38024: LD_INT 29
38026: PUSH
38027: LD_INT 30
38029: PUSH
38030: LD_INT 31
38032: PUSH
38033: LD_INT 32
38035: PUSH
38036: LD_INT 33
38038: PUSH
38039: LD_INT 34
38041: PUSH
38042: LD_INT 36
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 101
38084: PUSH
38085: LD_INT 102
38087: PUSH
38088: LD_INT 103
38090: PUSH
38091: LD_INT 104
38093: PUSH
38094: LD_INT 105
38096: PUSH
38097: LD_INT 106
38099: PUSH
38100: LD_INT 107
38102: PUSH
38103: LD_INT 108
38105: PUSH
38106: LD_INT 109
38108: PUSH
38109: LD_INT 110
38111: PUSH
38112: LD_INT 111
38114: PUSH
38115: LD_INT 112
38117: PUSH
38118: LD_INT 113
38120: PUSH
38121: LD_INT 114
38123: PUSH
38124: LD_INT 116
38126: PUSH
38127: LD_INT 117
38129: PUSH
38130: LD_INT 118
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: ST_TO_ADDR
38156: GO 38931
38158: LD_INT 16
38160: DOUBLE
38161: EQUAL
38162: IFTRUE 38166
38164: GO 38302
38166: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
38167: LD_ADDR_VAR 0 2
38171: PUSH
38172: LD_INT 2
38174: PUSH
38175: LD_INT 4
38177: PUSH
38178: LD_INT 5
38180: PUSH
38181: LD_INT 7
38183: PUSH
38184: LD_INT 11
38186: PUSH
38187: LD_INT 12
38189: PUSH
38190: LD_INT 15
38192: PUSH
38193: LD_INT 16
38195: PUSH
38196: LD_INT 20
38198: PUSH
38199: LD_INT 21
38201: PUSH
38202: LD_INT 22
38204: PUSH
38205: LD_INT 23
38207: PUSH
38208: LD_INT 25
38210: PUSH
38211: LD_INT 26
38213: PUSH
38214: LD_INT 30
38216: PUSH
38217: LD_INT 31
38219: PUSH
38220: LD_INT 32
38222: PUSH
38223: LD_INT 33
38225: PUSH
38226: LD_INT 34
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 101
38252: PUSH
38253: LD_INT 102
38255: PUSH
38256: LD_INT 103
38258: PUSH
38259: LD_INT 106
38261: PUSH
38262: LD_INT 108
38264: PUSH
38265: LD_INT 112
38267: PUSH
38268: LD_INT 113
38270: PUSH
38271: LD_INT 114
38273: PUSH
38274: LD_INT 116
38276: PUSH
38277: LD_INT 117
38279: PUSH
38280: LD_INT 118
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: ST_TO_ADDR
38300: GO 38931
38302: LD_INT 17
38304: DOUBLE
38305: EQUAL
38306: IFTRUE 38310
38308: GO 38534
38310: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
38311: LD_ADDR_VAR 0 2
38315: PUSH
38316: LD_INT 1
38318: PUSH
38319: LD_INT 2
38321: PUSH
38322: LD_INT 3
38324: PUSH
38325: LD_INT 4
38327: PUSH
38328: LD_INT 5
38330: PUSH
38331: LD_INT 6
38333: PUSH
38334: LD_INT 7
38336: PUSH
38337: LD_INT 8
38339: PUSH
38340: LD_INT 9
38342: PUSH
38343: LD_INT 10
38345: PUSH
38346: LD_INT 11
38348: PUSH
38349: LD_INT 12
38351: PUSH
38352: LD_INT 13
38354: PUSH
38355: LD_INT 14
38357: PUSH
38358: LD_INT 15
38360: PUSH
38361: LD_INT 16
38363: PUSH
38364: LD_INT 17
38366: PUSH
38367: LD_INT 18
38369: PUSH
38370: LD_INT 19
38372: PUSH
38373: LD_INT 20
38375: PUSH
38376: LD_INT 21
38378: PUSH
38379: LD_INT 22
38381: PUSH
38382: LD_INT 23
38384: PUSH
38385: LD_INT 24
38387: PUSH
38388: LD_INT 25
38390: PUSH
38391: LD_INT 26
38393: PUSH
38394: LD_INT 27
38396: PUSH
38397: LD_INT 28
38399: PUSH
38400: LD_INT 29
38402: PUSH
38403: LD_INT 30
38405: PUSH
38406: LD_INT 31
38408: PUSH
38409: LD_INT 32
38411: PUSH
38412: LD_INT 33
38414: PUSH
38415: LD_INT 34
38417: PUSH
38418: LD_INT 36
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 101
38460: PUSH
38461: LD_INT 102
38463: PUSH
38464: LD_INT 103
38466: PUSH
38467: LD_INT 104
38469: PUSH
38470: LD_INT 105
38472: PUSH
38473: LD_INT 106
38475: PUSH
38476: LD_INT 107
38478: PUSH
38479: LD_INT 108
38481: PUSH
38482: LD_INT 109
38484: PUSH
38485: LD_INT 110
38487: PUSH
38488: LD_INT 111
38490: PUSH
38491: LD_INT 112
38493: PUSH
38494: LD_INT 113
38496: PUSH
38497: LD_INT 114
38499: PUSH
38500: LD_INT 116
38502: PUSH
38503: LD_INT 117
38505: PUSH
38506: LD_INT 118
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: ST_TO_ADDR
38532: GO 38931
38534: LD_INT 18
38536: DOUBLE
38537: EQUAL
38538: IFTRUE 38542
38540: GO 38690
38542: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
38543: LD_ADDR_VAR 0 2
38547: PUSH
38548: LD_INT 2
38550: PUSH
38551: LD_INT 4
38553: PUSH
38554: LD_INT 5
38556: PUSH
38557: LD_INT 7
38559: PUSH
38560: LD_INT 11
38562: PUSH
38563: LD_INT 12
38565: PUSH
38566: LD_INT 15
38568: PUSH
38569: LD_INT 16
38571: PUSH
38572: LD_INT 20
38574: PUSH
38575: LD_INT 21
38577: PUSH
38578: LD_INT 22
38580: PUSH
38581: LD_INT 23
38583: PUSH
38584: LD_INT 25
38586: PUSH
38587: LD_INT 26
38589: PUSH
38590: LD_INT 30
38592: PUSH
38593: LD_INT 31
38595: PUSH
38596: LD_INT 32
38598: PUSH
38599: LD_INT 33
38601: PUSH
38602: LD_INT 34
38604: PUSH
38605: LD_INT 35
38607: PUSH
38608: LD_INT 36
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 101
38636: PUSH
38637: LD_INT 102
38639: PUSH
38640: LD_INT 103
38642: PUSH
38643: LD_INT 106
38645: PUSH
38646: LD_INT 108
38648: PUSH
38649: LD_INT 112
38651: PUSH
38652: LD_INT 113
38654: PUSH
38655: LD_INT 114
38657: PUSH
38658: LD_INT 115
38660: PUSH
38661: LD_INT 116
38663: PUSH
38664: LD_INT 117
38666: PUSH
38667: LD_INT 118
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: ST_TO_ADDR
38688: GO 38931
38690: LD_INT 19
38692: DOUBLE
38693: EQUAL
38694: IFTRUE 38698
38696: GO 38930
38698: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
38699: LD_ADDR_VAR 0 2
38703: PUSH
38704: LD_INT 1
38706: PUSH
38707: LD_INT 2
38709: PUSH
38710: LD_INT 3
38712: PUSH
38713: LD_INT 4
38715: PUSH
38716: LD_INT 5
38718: PUSH
38719: LD_INT 6
38721: PUSH
38722: LD_INT 7
38724: PUSH
38725: LD_INT 8
38727: PUSH
38728: LD_INT 9
38730: PUSH
38731: LD_INT 10
38733: PUSH
38734: LD_INT 11
38736: PUSH
38737: LD_INT 12
38739: PUSH
38740: LD_INT 13
38742: PUSH
38743: LD_INT 14
38745: PUSH
38746: LD_INT 15
38748: PUSH
38749: LD_INT 16
38751: PUSH
38752: LD_INT 17
38754: PUSH
38755: LD_INT 18
38757: PUSH
38758: LD_INT 19
38760: PUSH
38761: LD_INT 20
38763: PUSH
38764: LD_INT 21
38766: PUSH
38767: LD_INT 22
38769: PUSH
38770: LD_INT 23
38772: PUSH
38773: LD_INT 24
38775: PUSH
38776: LD_INT 25
38778: PUSH
38779: LD_INT 26
38781: PUSH
38782: LD_INT 27
38784: PUSH
38785: LD_INT 28
38787: PUSH
38788: LD_INT 29
38790: PUSH
38791: LD_INT 30
38793: PUSH
38794: LD_INT 31
38796: PUSH
38797: LD_INT 32
38799: PUSH
38800: LD_INT 33
38802: PUSH
38803: LD_INT 34
38805: PUSH
38806: LD_INT 35
38808: PUSH
38809: LD_INT 36
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 101
38852: PUSH
38853: LD_INT 102
38855: PUSH
38856: LD_INT 103
38858: PUSH
38859: LD_INT 104
38861: PUSH
38862: LD_INT 105
38864: PUSH
38865: LD_INT 106
38867: PUSH
38868: LD_INT 107
38870: PUSH
38871: LD_INT 108
38873: PUSH
38874: LD_INT 109
38876: PUSH
38877: LD_INT 110
38879: PUSH
38880: LD_INT 111
38882: PUSH
38883: LD_INT 112
38885: PUSH
38886: LD_INT 113
38888: PUSH
38889: LD_INT 114
38891: PUSH
38892: LD_INT 115
38894: PUSH
38895: LD_INT 116
38897: PUSH
38898: LD_INT 117
38900: PUSH
38901: LD_INT 118
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: ST_TO_ADDR
38928: GO 38931
38930: POP
// end else
38931: GO 39162
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
38933: LD_ADDR_VAR 0 2
38937: PUSH
38938: LD_INT 1
38940: PUSH
38941: LD_INT 2
38943: PUSH
38944: LD_INT 3
38946: PUSH
38947: LD_INT 4
38949: PUSH
38950: LD_INT 5
38952: PUSH
38953: LD_INT 6
38955: PUSH
38956: LD_INT 7
38958: PUSH
38959: LD_INT 8
38961: PUSH
38962: LD_INT 9
38964: PUSH
38965: LD_INT 10
38967: PUSH
38968: LD_INT 11
38970: PUSH
38971: LD_INT 12
38973: PUSH
38974: LD_INT 13
38976: PUSH
38977: LD_INT 14
38979: PUSH
38980: LD_INT 15
38982: PUSH
38983: LD_INT 16
38985: PUSH
38986: LD_INT 17
38988: PUSH
38989: LD_INT 18
38991: PUSH
38992: LD_INT 19
38994: PUSH
38995: LD_INT 20
38997: PUSH
38998: LD_INT 21
39000: PUSH
39001: LD_INT 22
39003: PUSH
39004: LD_INT 23
39006: PUSH
39007: LD_INT 24
39009: PUSH
39010: LD_INT 25
39012: PUSH
39013: LD_INT 26
39015: PUSH
39016: LD_INT 27
39018: PUSH
39019: LD_INT 28
39021: PUSH
39022: LD_INT 29
39024: PUSH
39025: LD_INT 30
39027: PUSH
39028: LD_INT 31
39030: PUSH
39031: LD_INT 32
39033: PUSH
39034: LD_INT 33
39036: PUSH
39037: LD_INT 34
39039: PUSH
39040: LD_INT 35
39042: PUSH
39043: LD_INT 36
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 101
39086: PUSH
39087: LD_INT 102
39089: PUSH
39090: LD_INT 103
39092: PUSH
39093: LD_INT 104
39095: PUSH
39096: LD_INT 105
39098: PUSH
39099: LD_INT 106
39101: PUSH
39102: LD_INT 107
39104: PUSH
39105: LD_INT 108
39107: PUSH
39108: LD_INT 109
39110: PUSH
39111: LD_INT 110
39113: PUSH
39114: LD_INT 111
39116: PUSH
39117: LD_INT 112
39119: PUSH
39120: LD_INT 113
39122: PUSH
39123: LD_INT 114
39125: PUSH
39126: LD_INT 115
39128: PUSH
39129: LD_INT 116
39131: PUSH
39132: LD_INT 117
39134: PUSH
39135: LD_INT 118
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: ST_TO_ADDR
// if result then
39162: LD_VAR 0 2
39166: IFFALSE 39952
// begin normal :=  ;
39168: LD_ADDR_VAR 0 5
39172: PUSH
39173: LD_STRING 
39175: ST_TO_ADDR
// hardcore :=  ;
39176: LD_ADDR_VAR 0 6
39180: PUSH
39181: LD_STRING 
39183: ST_TO_ADDR
// active :=  ;
39184: LD_ADDR_VAR 0 7
39188: PUSH
39189: LD_STRING 
39191: ST_TO_ADDR
// for i = 1 to normalCounter do
39192: LD_ADDR_VAR 0 8
39196: PUSH
39197: DOUBLE
39198: LD_INT 1
39200: DEC
39201: ST_TO_ADDR
39202: LD_EXP 88
39206: PUSH
39207: FOR_TO
39208: IFFALSE 39309
// begin tmp := 0 ;
39210: LD_ADDR_VAR 0 3
39214: PUSH
39215: LD_STRING 0
39217: ST_TO_ADDR
// if result [ 1 ] then
39218: LD_VAR 0 2
39222: PUSH
39223: LD_INT 1
39225: ARRAY
39226: IFFALSE 39291
// if result [ 1 ] [ 1 ] = i then
39228: LD_VAR 0 2
39232: PUSH
39233: LD_INT 1
39235: ARRAY
39236: PUSH
39237: LD_INT 1
39239: ARRAY
39240: PUSH
39241: LD_VAR 0 8
39245: EQUAL
39246: IFFALSE 39291
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
39248: LD_ADDR_VAR 0 2
39252: PUSH
39253: LD_VAR 0 2
39257: PPUSH
39258: LD_INT 1
39260: PPUSH
39261: LD_VAR 0 2
39265: PUSH
39266: LD_INT 1
39268: ARRAY
39269: PPUSH
39270: LD_INT 1
39272: PPUSH
39273: CALL_OW 3
39277: PPUSH
39278: CALL_OW 1
39282: ST_TO_ADDR
// tmp := 1 ;
39283: LD_ADDR_VAR 0 3
39287: PUSH
39288: LD_STRING 1
39290: ST_TO_ADDR
// end ; normal := normal & tmp ;
39291: LD_ADDR_VAR 0 5
39295: PUSH
39296: LD_VAR 0 5
39300: PUSH
39301: LD_VAR 0 3
39305: STR
39306: ST_TO_ADDR
// end ;
39307: GO 39207
39309: POP
39310: POP
// for i = 1 to hardcoreCounter do
39311: LD_ADDR_VAR 0 8
39315: PUSH
39316: DOUBLE
39317: LD_INT 1
39319: DEC
39320: ST_TO_ADDR
39321: LD_EXP 89
39325: PUSH
39326: FOR_TO
39327: IFFALSE 39432
// begin tmp := 0 ;
39329: LD_ADDR_VAR 0 3
39333: PUSH
39334: LD_STRING 0
39336: ST_TO_ADDR
// if result [ 2 ] then
39337: LD_VAR 0 2
39341: PUSH
39342: LD_INT 2
39344: ARRAY
39345: IFFALSE 39414
// if result [ 2 ] [ 1 ] = 100 + i then
39347: LD_VAR 0 2
39351: PUSH
39352: LD_INT 2
39354: ARRAY
39355: PUSH
39356: LD_INT 1
39358: ARRAY
39359: PUSH
39360: LD_INT 100
39362: PUSH
39363: LD_VAR 0 8
39367: PLUS
39368: EQUAL
39369: IFFALSE 39414
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
39371: LD_ADDR_VAR 0 2
39375: PUSH
39376: LD_VAR 0 2
39380: PPUSH
39381: LD_INT 2
39383: PPUSH
39384: LD_VAR 0 2
39388: PUSH
39389: LD_INT 2
39391: ARRAY
39392: PPUSH
39393: LD_INT 1
39395: PPUSH
39396: CALL_OW 3
39400: PPUSH
39401: CALL_OW 1
39405: ST_TO_ADDR
// tmp := 1 ;
39406: LD_ADDR_VAR 0 3
39410: PUSH
39411: LD_STRING 1
39413: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
39414: LD_ADDR_VAR 0 6
39418: PUSH
39419: LD_VAR 0 6
39423: PUSH
39424: LD_VAR 0 3
39428: STR
39429: ST_TO_ADDR
// end ;
39430: GO 39326
39432: POP
39433: POP
// if isGameLoad then
39434: LD_VAR 0 1
39438: IFFALSE 39913
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
39440: LD_ADDR_VAR 0 4
39444: PUSH
39445: LD_EXP 92
39449: PUSH
39450: LD_EXP 91
39454: PUSH
39455: LD_EXP 93
39459: PUSH
39460: LD_EXP 90
39464: PUSH
39465: LD_EXP 94
39469: PUSH
39470: LD_EXP 95
39474: PUSH
39475: LD_EXP 96
39479: PUSH
39480: LD_EXP 97
39484: PUSH
39485: LD_EXP 98
39489: PUSH
39490: LD_EXP 99
39494: PUSH
39495: LD_EXP 100
39499: PUSH
39500: LD_EXP 101
39504: PUSH
39505: LD_EXP 102
39509: PUSH
39510: LD_EXP 103
39514: PUSH
39515: LD_EXP 111
39519: PUSH
39520: LD_EXP 112
39524: PUSH
39525: LD_EXP 113
39529: PUSH
39530: LD_EXP 114
39534: PUSH
39535: LD_EXP 116
39539: PUSH
39540: LD_EXP 117
39544: PUSH
39545: LD_EXP 118
39549: PUSH
39550: LD_EXP 121
39554: PUSH
39555: LD_EXP 123
39559: PUSH
39560: LD_EXP 124
39564: PUSH
39565: LD_EXP 125
39569: PUSH
39570: LD_EXP 127
39574: PUSH
39575: LD_EXP 128
39579: PUSH
39580: LD_EXP 131
39584: PUSH
39585: LD_EXP 132
39589: PUSH
39590: LD_EXP 133
39594: PUSH
39595: LD_EXP 134
39599: PUSH
39600: LD_EXP 135
39604: PUSH
39605: LD_EXP 136
39609: PUSH
39610: LD_EXP 137
39614: PUSH
39615: LD_EXP 138
39619: PUSH
39620: LD_EXP 139
39624: PUSH
39625: LD_EXP 104
39629: PUSH
39630: LD_EXP 105
39634: PUSH
39635: LD_EXP 108
39639: PUSH
39640: LD_EXP 109
39644: PUSH
39645: LD_EXP 110
39649: PUSH
39650: LD_EXP 106
39654: PUSH
39655: LD_EXP 107
39659: PUSH
39660: LD_EXP 115
39664: PUSH
39665: LD_EXP 119
39669: PUSH
39670: LD_EXP 120
39674: PUSH
39675: LD_EXP 122
39679: PUSH
39680: LD_EXP 126
39684: PUSH
39685: LD_EXP 129
39689: PUSH
39690: LD_EXP 130
39694: PUSH
39695: LD_EXP 140
39699: PUSH
39700: LD_EXP 141
39704: PUSH
39705: LD_EXP 142
39709: PUSH
39710: LD_EXP 143
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: ST_TO_ADDR
// tmp :=  ;
39771: LD_ADDR_VAR 0 3
39775: PUSH
39776: LD_STRING 
39778: ST_TO_ADDR
// for i = 1 to normalCounter do
39779: LD_ADDR_VAR 0 8
39783: PUSH
39784: DOUBLE
39785: LD_INT 1
39787: DEC
39788: ST_TO_ADDR
39789: LD_EXP 88
39793: PUSH
39794: FOR_TO
39795: IFFALSE 39831
// begin if flags [ i ] then
39797: LD_VAR 0 4
39801: PUSH
39802: LD_VAR 0 8
39806: ARRAY
39807: IFFALSE 39829
// tmp := tmp & i & ; ;
39809: LD_ADDR_VAR 0 3
39813: PUSH
39814: LD_VAR 0 3
39818: PUSH
39819: LD_VAR 0 8
39823: STR
39824: PUSH
39825: LD_STRING ;
39827: STR
39828: ST_TO_ADDR
// end ;
39829: GO 39794
39831: POP
39832: POP
// for i = 1 to hardcoreCounter do
39833: LD_ADDR_VAR 0 8
39837: PUSH
39838: DOUBLE
39839: LD_INT 1
39841: DEC
39842: ST_TO_ADDR
39843: LD_EXP 89
39847: PUSH
39848: FOR_TO
39849: IFFALSE 39895
// begin if flags [ normalCounter + i ] then
39851: LD_VAR 0 4
39855: PUSH
39856: LD_EXP 88
39860: PUSH
39861: LD_VAR 0 8
39865: PLUS
39866: ARRAY
39867: IFFALSE 39893
// tmp := tmp & ( 100 + i ) & ; ;
39869: LD_ADDR_VAR 0 3
39873: PUSH
39874: LD_VAR 0 3
39878: PUSH
39879: LD_INT 100
39881: PUSH
39882: LD_VAR 0 8
39886: PLUS
39887: STR
39888: PUSH
39889: LD_STRING ;
39891: STR
39892: ST_TO_ADDR
// end ;
39893: GO 39848
39895: POP
39896: POP
// if tmp then
39897: LD_VAR 0 3
39901: IFFALSE 39913
// active := tmp ;
39903: LD_ADDR_VAR 0 7
39907: PUSH
39908: LD_VAR 0 3
39912: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
39913: LD_STRING getStreamItemsFromMission("
39915: PUSH
39916: LD_VAR 0 5
39920: STR
39921: PUSH
39922: LD_STRING ","
39924: STR
39925: PUSH
39926: LD_VAR 0 6
39930: STR
39931: PUSH
39932: LD_STRING ","
39934: STR
39935: PUSH
39936: LD_VAR 0 7
39940: STR
39941: PUSH
39942: LD_STRING ")
39944: STR
39945: PPUSH
39946: CALL_OW 559
// end else
39950: GO 39959
// ToLua ( getStreamItemsFromMission("","","") ) ;
39952: LD_STRING getStreamItemsFromMission("","","")
39954: PPUSH
39955: CALL_OW 559
// end ;
39959: LD_VAR 0 2
39963: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
39964: LD_EXP 87
39968: PUSH
39969: LD_EXP 92
39973: AND
39974: IFFALSE 40098
39976: GO 39978
39978: DISABLE
39979: LD_INT 0
39981: PPUSH
39982: PPUSH
// begin enable ;
39983: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
39984: LD_ADDR_VAR 0 2
39988: PUSH
39989: LD_INT 22
39991: PUSH
39992: LD_OWVAR 2
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 2
40003: PUSH
40004: LD_INT 34
40006: PUSH
40007: LD_INT 7
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 34
40016: PUSH
40017: LD_INT 45
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 34
40026: PUSH
40027: LD_INT 28
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 34
40036: PUSH
40037: LD_INT 47
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PPUSH
40055: CALL_OW 69
40059: ST_TO_ADDR
// if not tmp then
40060: LD_VAR 0 2
40064: NOT
40065: IFFALSE 40069
// exit ;
40067: GO 40098
// for i in tmp do
40069: LD_ADDR_VAR 0 1
40073: PUSH
40074: LD_VAR 0 2
40078: PUSH
40079: FOR_IN
40080: IFFALSE 40096
// begin SetLives ( i , 0 ) ;
40082: LD_VAR 0 1
40086: PPUSH
40087: LD_INT 0
40089: PPUSH
40090: CALL_OW 234
// end ;
40094: GO 40079
40096: POP
40097: POP
// end ;
40098: PPOPN 2
40100: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
40101: LD_EXP 87
40105: PUSH
40106: LD_EXP 93
40110: AND
40111: IFFALSE 40195
40113: GO 40115
40115: DISABLE
40116: LD_INT 0
40118: PPUSH
40119: PPUSH
// begin enable ;
40120: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
40121: LD_ADDR_VAR 0 2
40125: PUSH
40126: LD_INT 22
40128: PUSH
40129: LD_OWVAR 2
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 32
40140: PUSH
40141: LD_INT 3
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PPUSH
40152: CALL_OW 69
40156: ST_TO_ADDR
// if not tmp then
40157: LD_VAR 0 2
40161: NOT
40162: IFFALSE 40166
// exit ;
40164: GO 40195
// for i in tmp do
40166: LD_ADDR_VAR 0 1
40170: PUSH
40171: LD_VAR 0 2
40175: PUSH
40176: FOR_IN
40177: IFFALSE 40193
// begin SetLives ( i , 0 ) ;
40179: LD_VAR 0 1
40183: PPUSH
40184: LD_INT 0
40186: PPUSH
40187: CALL_OW 234
// end ;
40191: GO 40176
40193: POP
40194: POP
// end ;
40195: PPOPN 2
40197: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
40198: LD_EXP 87
40202: PUSH
40203: LD_EXP 90
40207: AND
40208: IFFALSE 40301
40210: GO 40212
40212: DISABLE
40213: LD_INT 0
40215: PPUSH
// begin enable ;
40216: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
40217: LD_ADDR_VAR 0 1
40221: PUSH
40222: LD_INT 22
40224: PUSH
40225: LD_OWVAR 2
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 2
40236: PUSH
40237: LD_INT 25
40239: PUSH
40240: LD_INT 5
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 25
40249: PUSH
40250: LD_INT 9
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 25
40259: PUSH
40260: LD_INT 8
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PPUSH
40277: CALL_OW 69
40281: PUSH
40282: FOR_IN
40283: IFFALSE 40299
// begin SetClass ( i , 1 ) ;
40285: LD_VAR 0 1
40289: PPUSH
40290: LD_INT 1
40292: PPUSH
40293: CALL_OW 336
// end ;
40297: GO 40282
40299: POP
40300: POP
// end ;
40301: PPOPN 1
40303: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
40304: LD_EXP 87
40308: PUSH
40309: LD_EXP 91
40313: AND
40314: PUSH
40315: LD_OWVAR 65
40319: PUSH
40320: LD_INT 7
40322: LESS
40323: AND
40324: IFFALSE 40338
40326: GO 40328
40328: DISABLE
// begin enable ;
40329: ENABLE
// game_speed := 7 ;
40330: LD_ADDR_OWVAR 65
40334: PUSH
40335: LD_INT 7
40337: ST_TO_ADDR
// end ;
40338: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
40339: LD_EXP 87
40343: PUSH
40344: LD_EXP 94
40348: AND
40349: IFFALSE 40551
40351: GO 40353
40353: DISABLE
40354: LD_INT 0
40356: PPUSH
40357: PPUSH
40358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
40359: LD_ADDR_VAR 0 3
40363: PUSH
40364: LD_INT 81
40366: PUSH
40367: LD_OWVAR 2
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 21
40378: PUSH
40379: LD_INT 1
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PPUSH
40390: CALL_OW 69
40394: ST_TO_ADDR
// if not tmp then
40395: LD_VAR 0 3
40399: NOT
40400: IFFALSE 40404
// exit ;
40402: GO 40551
// if tmp > 5 then
40404: LD_VAR 0 3
40408: PUSH
40409: LD_INT 5
40411: GREATER
40412: IFFALSE 40424
// k := 5 else
40414: LD_ADDR_VAR 0 2
40418: PUSH
40419: LD_INT 5
40421: ST_TO_ADDR
40422: GO 40434
// k := tmp ;
40424: LD_ADDR_VAR 0 2
40428: PUSH
40429: LD_VAR 0 3
40433: ST_TO_ADDR
// for i := 1 to k do
40434: LD_ADDR_VAR 0 1
40438: PUSH
40439: DOUBLE
40440: LD_INT 1
40442: DEC
40443: ST_TO_ADDR
40444: LD_VAR 0 2
40448: PUSH
40449: FOR_TO
40450: IFFALSE 40549
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
40452: LD_VAR 0 3
40456: PUSH
40457: LD_VAR 0 1
40461: ARRAY
40462: PPUSH
40463: LD_VAR 0 1
40467: PUSH
40468: LD_INT 4
40470: MOD
40471: PUSH
40472: LD_INT 1
40474: PLUS
40475: PPUSH
40476: CALL_OW 259
40480: PUSH
40481: LD_INT 10
40483: LESS
40484: IFFALSE 40547
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
40486: LD_VAR 0 3
40490: PUSH
40491: LD_VAR 0 1
40495: ARRAY
40496: PPUSH
40497: LD_VAR 0 1
40501: PUSH
40502: LD_INT 4
40504: MOD
40505: PUSH
40506: LD_INT 1
40508: PLUS
40509: PPUSH
40510: LD_VAR 0 3
40514: PUSH
40515: LD_VAR 0 1
40519: ARRAY
40520: PPUSH
40521: LD_VAR 0 1
40525: PUSH
40526: LD_INT 4
40528: MOD
40529: PUSH
40530: LD_INT 1
40532: PLUS
40533: PPUSH
40534: CALL_OW 259
40538: PUSH
40539: LD_INT 1
40541: PLUS
40542: PPUSH
40543: CALL_OW 237
40547: GO 40449
40549: POP
40550: POP
// end ;
40551: PPOPN 3
40553: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
40554: LD_EXP 87
40558: PUSH
40559: LD_EXP 95
40563: AND
40564: IFFALSE 40584
40566: GO 40568
40568: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
40569: LD_INT 4
40571: PPUSH
40572: LD_OWVAR 2
40576: PPUSH
40577: LD_INT 0
40579: PPUSH
40580: CALL_OW 324
40584: END
// every 0 0$1 trigger StreamModeActive and sShovel do
40585: LD_EXP 87
40589: PUSH
40590: LD_EXP 124
40594: AND
40595: IFFALSE 40615
40597: GO 40599
40599: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
40600: LD_INT 19
40602: PPUSH
40603: LD_OWVAR 2
40607: PPUSH
40608: LD_INT 0
40610: PPUSH
40611: CALL_OW 324
40615: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
40616: LD_EXP 87
40620: PUSH
40621: LD_EXP 96
40625: AND
40626: IFFALSE 40728
40628: GO 40630
40630: DISABLE
40631: LD_INT 0
40633: PPUSH
40634: PPUSH
// begin enable ;
40635: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
40636: LD_ADDR_VAR 0 2
40640: PUSH
40641: LD_INT 22
40643: PUSH
40644: LD_OWVAR 2
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 2
40655: PUSH
40656: LD_INT 34
40658: PUSH
40659: LD_INT 11
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 34
40668: PUSH
40669: LD_INT 30
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: LIST
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PPUSH
40685: CALL_OW 69
40689: ST_TO_ADDR
// if not tmp then
40690: LD_VAR 0 2
40694: NOT
40695: IFFALSE 40699
// exit ;
40697: GO 40728
// for i in tmp do
40699: LD_ADDR_VAR 0 1
40703: PUSH
40704: LD_VAR 0 2
40708: PUSH
40709: FOR_IN
40710: IFFALSE 40726
// begin SetLives ( i , 0 ) ;
40712: LD_VAR 0 1
40716: PPUSH
40717: LD_INT 0
40719: PPUSH
40720: CALL_OW 234
// end ;
40724: GO 40709
40726: POP
40727: POP
// end ;
40728: PPOPN 2
40730: END
// every 0 0$1 trigger StreamModeActive and sBunker do
40731: LD_EXP 87
40735: PUSH
40736: LD_EXP 97
40740: AND
40741: IFFALSE 40761
40743: GO 40745
40745: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
40746: LD_INT 32
40748: PPUSH
40749: LD_OWVAR 2
40753: PPUSH
40754: LD_INT 0
40756: PPUSH
40757: CALL_OW 324
40761: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
40762: LD_EXP 87
40766: PUSH
40767: LD_EXP 98
40771: AND
40772: IFFALSE 40953
40774: GO 40776
40776: DISABLE
40777: LD_INT 0
40779: PPUSH
40780: PPUSH
40781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
40782: LD_ADDR_VAR 0 2
40786: PUSH
40787: LD_INT 22
40789: PUSH
40790: LD_OWVAR 2
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 33
40801: PUSH
40802: LD_INT 3
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PPUSH
40813: CALL_OW 69
40817: ST_TO_ADDR
// if not tmp then
40818: LD_VAR 0 2
40822: NOT
40823: IFFALSE 40827
// exit ;
40825: GO 40953
// side := 0 ;
40827: LD_ADDR_VAR 0 3
40831: PUSH
40832: LD_INT 0
40834: ST_TO_ADDR
// for i := 1 to 8 do
40835: LD_ADDR_VAR 0 1
40839: PUSH
40840: DOUBLE
40841: LD_INT 1
40843: DEC
40844: ST_TO_ADDR
40845: LD_INT 8
40847: PUSH
40848: FOR_TO
40849: IFFALSE 40897
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
40851: LD_OWVAR 2
40855: PUSH
40856: LD_VAR 0 1
40860: NONEQUAL
40861: PUSH
40862: LD_OWVAR 2
40866: PPUSH
40867: LD_VAR 0 1
40871: PPUSH
40872: CALL_OW 81
40876: PUSH
40877: LD_INT 2
40879: EQUAL
40880: AND
40881: IFFALSE 40895
// begin side := i ;
40883: LD_ADDR_VAR 0 3
40887: PUSH
40888: LD_VAR 0 1
40892: ST_TO_ADDR
// break ;
40893: GO 40897
// end ;
40895: GO 40848
40897: POP
40898: POP
// if not side then
40899: LD_VAR 0 3
40903: NOT
40904: IFFALSE 40908
// exit ;
40906: GO 40953
// for i := 1 to tmp do
40908: LD_ADDR_VAR 0 1
40912: PUSH
40913: DOUBLE
40914: LD_INT 1
40916: DEC
40917: ST_TO_ADDR
40918: LD_VAR 0 2
40922: PUSH
40923: FOR_TO
40924: IFFALSE 40951
// if Prob ( 60 ) then
40926: LD_INT 60
40928: PPUSH
40929: CALL_OW 13
40933: IFFALSE 40949
// SetSide ( i , side ) ;
40935: LD_VAR 0 1
40939: PPUSH
40940: LD_VAR 0 3
40944: PPUSH
40945: CALL_OW 235
40949: GO 40923
40951: POP
40952: POP
// end ;
40953: PPOPN 3
40955: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
40956: LD_EXP 87
40960: PUSH
40961: LD_EXP 100
40965: AND
40966: IFFALSE 41085
40968: GO 40970
40970: DISABLE
40971: LD_INT 0
40973: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
40974: LD_ADDR_VAR 0 1
40978: PUSH
40979: LD_INT 22
40981: PUSH
40982: LD_OWVAR 2
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 21
40993: PUSH
40994: LD_INT 1
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 3
41003: PUSH
41004: LD_INT 23
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: LIST
41022: PPUSH
41023: CALL_OW 69
41027: PUSH
41028: FOR_IN
41029: IFFALSE 41083
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
41031: LD_VAR 0 1
41035: PPUSH
41036: CALL_OW 257
41040: PUSH
41041: LD_INT 1
41043: PUSH
41044: LD_INT 2
41046: PUSH
41047: LD_INT 3
41049: PUSH
41050: LD_INT 4
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: IN
41059: IFFALSE 41081
// SetClass ( un , rand ( 1 , 4 ) ) ;
41061: LD_VAR 0 1
41065: PPUSH
41066: LD_INT 1
41068: PPUSH
41069: LD_INT 4
41071: PPUSH
41072: CALL_OW 12
41076: PPUSH
41077: CALL_OW 336
41081: GO 41028
41083: POP
41084: POP
// end ;
41085: PPOPN 1
41087: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
41088: LD_EXP 87
41092: PUSH
41093: LD_EXP 99
41097: AND
41098: IFFALSE 41177
41100: GO 41102
41102: DISABLE
41103: LD_INT 0
41105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41106: LD_ADDR_VAR 0 1
41110: PUSH
41111: LD_INT 22
41113: PUSH
41114: LD_OWVAR 2
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 21
41125: PUSH
41126: LD_INT 3
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PPUSH
41137: CALL_OW 69
41141: ST_TO_ADDR
// if not tmp then
41142: LD_VAR 0 1
41146: NOT
41147: IFFALSE 41151
// exit ;
41149: GO 41177
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
41151: LD_VAR 0 1
41155: PUSH
41156: LD_INT 1
41158: PPUSH
41159: LD_VAR 0 1
41163: PPUSH
41164: CALL_OW 12
41168: ARRAY
41169: PPUSH
41170: LD_INT 100
41172: PPUSH
41173: CALL_OW 234
// end ;
41177: PPOPN 1
41179: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
41180: LD_EXP 87
41184: PUSH
41185: LD_EXP 101
41189: AND
41190: IFFALSE 41288
41192: GO 41194
41194: DISABLE
41195: LD_INT 0
41197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
41198: LD_ADDR_VAR 0 1
41202: PUSH
41203: LD_INT 22
41205: PUSH
41206: LD_OWVAR 2
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 21
41217: PUSH
41218: LD_INT 1
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PPUSH
41229: CALL_OW 69
41233: ST_TO_ADDR
// if not tmp then
41234: LD_VAR 0 1
41238: NOT
41239: IFFALSE 41243
// exit ;
41241: GO 41288
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
41243: LD_VAR 0 1
41247: PUSH
41248: LD_INT 1
41250: PPUSH
41251: LD_VAR 0 1
41255: PPUSH
41256: CALL_OW 12
41260: ARRAY
41261: PPUSH
41262: LD_INT 1
41264: PPUSH
41265: LD_INT 4
41267: PPUSH
41268: CALL_OW 12
41272: PPUSH
41273: LD_INT 3000
41275: PPUSH
41276: LD_INT 9000
41278: PPUSH
41279: CALL_OW 12
41283: PPUSH
41284: CALL_OW 492
// end ;
41288: PPOPN 1
41290: END
// every 0 0$1 trigger StreamModeActive and sDepot do
41291: LD_EXP 87
41295: PUSH
41296: LD_EXP 102
41300: AND
41301: IFFALSE 41321
41303: GO 41305
41305: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
41306: LD_INT 1
41308: PPUSH
41309: LD_OWVAR 2
41313: PPUSH
41314: LD_INT 0
41316: PPUSH
41317: CALL_OW 324
41321: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
41322: LD_EXP 87
41326: PUSH
41327: LD_EXP 103
41331: AND
41332: IFFALSE 41415
41334: GO 41336
41336: DISABLE
41337: LD_INT 0
41339: PPUSH
41340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41341: LD_ADDR_VAR 0 2
41345: PUSH
41346: LD_INT 22
41348: PUSH
41349: LD_OWVAR 2
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 21
41360: PUSH
41361: LD_INT 3
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PPUSH
41372: CALL_OW 69
41376: ST_TO_ADDR
// if not tmp then
41377: LD_VAR 0 2
41381: NOT
41382: IFFALSE 41386
// exit ;
41384: GO 41415
// for i in tmp do
41386: LD_ADDR_VAR 0 1
41390: PUSH
41391: LD_VAR 0 2
41395: PUSH
41396: FOR_IN
41397: IFFALSE 41413
// SetBLevel ( i , 10 ) ;
41399: LD_VAR 0 1
41403: PPUSH
41404: LD_INT 10
41406: PPUSH
41407: CALL_OW 241
41411: GO 41396
41413: POP
41414: POP
// end ;
41415: PPOPN 2
41417: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
41418: LD_EXP 87
41422: PUSH
41423: LD_EXP 104
41427: AND
41428: IFFALSE 41539
41430: GO 41432
41432: DISABLE
41433: LD_INT 0
41435: PPUSH
41436: PPUSH
41437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41438: LD_ADDR_VAR 0 3
41442: PUSH
41443: LD_INT 22
41445: PUSH
41446: LD_OWVAR 2
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 25
41457: PUSH
41458: LD_INT 1
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PPUSH
41469: CALL_OW 69
41473: ST_TO_ADDR
// if not tmp then
41474: LD_VAR 0 3
41478: NOT
41479: IFFALSE 41483
// exit ;
41481: GO 41539
// un := tmp [ rand ( 1 , tmp ) ] ;
41483: LD_ADDR_VAR 0 2
41487: PUSH
41488: LD_VAR 0 3
41492: PUSH
41493: LD_INT 1
41495: PPUSH
41496: LD_VAR 0 3
41500: PPUSH
41501: CALL_OW 12
41505: ARRAY
41506: ST_TO_ADDR
// if Crawls ( un ) then
41507: LD_VAR 0 2
41511: PPUSH
41512: CALL_OW 318
41516: IFFALSE 41527
// ComWalk ( un ) ;
41518: LD_VAR 0 2
41522: PPUSH
41523: CALL_OW 138
// SetClass ( un , class_sniper ) ;
41527: LD_VAR 0 2
41531: PPUSH
41532: LD_INT 5
41534: PPUSH
41535: CALL_OW 336
// end ;
41539: PPOPN 3
41541: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
41542: LD_EXP 87
41546: PUSH
41547: LD_EXP 105
41551: AND
41552: PUSH
41553: LD_OWVAR 67
41557: PUSH
41558: LD_INT 4
41560: LESS
41561: AND
41562: IFFALSE 41581
41564: GO 41566
41566: DISABLE
// begin Difficulty := Difficulty + 1 ;
41567: LD_ADDR_OWVAR 67
41571: PUSH
41572: LD_OWVAR 67
41576: PUSH
41577: LD_INT 1
41579: PLUS
41580: ST_TO_ADDR
// end ;
41581: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
41582: LD_EXP 87
41586: PUSH
41587: LD_EXP 106
41591: AND
41592: IFFALSE 41695
41594: GO 41596
41596: DISABLE
41597: LD_INT 0
41599: PPUSH
// begin for i := 1 to 5 do
41600: LD_ADDR_VAR 0 1
41604: PUSH
41605: DOUBLE
41606: LD_INT 1
41608: DEC
41609: ST_TO_ADDR
41610: LD_INT 5
41612: PUSH
41613: FOR_TO
41614: IFFALSE 41693
// begin uc_nation := nation_nature ;
41616: LD_ADDR_OWVAR 21
41620: PUSH
41621: LD_INT 0
41623: ST_TO_ADDR
// uc_side := 0 ;
41624: LD_ADDR_OWVAR 20
41628: PUSH
41629: LD_INT 0
41631: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
41632: LD_ADDR_OWVAR 29
41636: PUSH
41637: LD_INT 12
41639: PUSH
41640: LD_INT 12
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: ST_TO_ADDR
// hc_agressivity := 20 ;
41647: LD_ADDR_OWVAR 35
41651: PUSH
41652: LD_INT 20
41654: ST_TO_ADDR
// hc_class := class_tiger ;
41655: LD_ADDR_OWVAR 28
41659: PUSH
41660: LD_INT 14
41662: ST_TO_ADDR
// hc_gallery :=  ;
41663: LD_ADDR_OWVAR 33
41667: PUSH
41668: LD_STRING 
41670: ST_TO_ADDR
// hc_name :=  ;
41671: LD_ADDR_OWVAR 26
41675: PUSH
41676: LD_STRING 
41678: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
41679: CALL_OW 44
41683: PPUSH
41684: LD_INT 0
41686: PPUSH
41687: CALL_OW 51
// end ;
41691: GO 41613
41693: POP
41694: POP
// end ;
41695: PPOPN 1
41697: END
// every 0 0$1 trigger StreamModeActive and sBomb do
41698: LD_EXP 87
41702: PUSH
41703: LD_EXP 107
41707: AND
41708: IFFALSE 41717
41710: GO 41712
41712: DISABLE
// StreamSibBomb ;
41713: CALL 41718 0 0
41717: END
// export function StreamSibBomb ; var i , x , y ; begin
41718: LD_INT 0
41720: PPUSH
41721: PPUSH
41722: PPUSH
41723: PPUSH
// result := false ;
41724: LD_ADDR_VAR 0 1
41728: PUSH
41729: LD_INT 0
41731: ST_TO_ADDR
// for i := 1 to 16 do
41732: LD_ADDR_VAR 0 2
41736: PUSH
41737: DOUBLE
41738: LD_INT 1
41740: DEC
41741: ST_TO_ADDR
41742: LD_INT 16
41744: PUSH
41745: FOR_TO
41746: IFFALSE 41945
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
41748: LD_ADDR_VAR 0 3
41752: PUSH
41753: LD_INT 10
41755: PUSH
41756: LD_INT 20
41758: PUSH
41759: LD_INT 30
41761: PUSH
41762: LD_INT 40
41764: PUSH
41765: LD_INT 50
41767: PUSH
41768: LD_INT 60
41770: PUSH
41771: LD_INT 70
41773: PUSH
41774: LD_INT 80
41776: PUSH
41777: LD_INT 90
41779: PUSH
41780: LD_INT 100
41782: PUSH
41783: LD_INT 110
41785: PUSH
41786: LD_INT 120
41788: PUSH
41789: LD_INT 130
41791: PUSH
41792: LD_INT 140
41794: PUSH
41795: LD_INT 150
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 1
41817: PPUSH
41818: LD_INT 15
41820: PPUSH
41821: CALL_OW 12
41825: ARRAY
41826: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
41827: LD_ADDR_VAR 0 4
41831: PUSH
41832: LD_INT 10
41834: PUSH
41835: LD_INT 20
41837: PUSH
41838: LD_INT 30
41840: PUSH
41841: LD_INT 40
41843: PUSH
41844: LD_INT 50
41846: PUSH
41847: LD_INT 60
41849: PUSH
41850: LD_INT 70
41852: PUSH
41853: LD_INT 80
41855: PUSH
41856: LD_INT 90
41858: PUSH
41859: LD_INT 100
41861: PUSH
41862: LD_INT 110
41864: PUSH
41865: LD_INT 120
41867: PUSH
41868: LD_INT 130
41870: PUSH
41871: LD_INT 140
41873: PUSH
41874: LD_INT 150
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 1
41896: PPUSH
41897: LD_INT 15
41899: PPUSH
41900: CALL_OW 12
41904: ARRAY
41905: ST_TO_ADDR
// if ValidHex ( x , y ) then
41906: LD_VAR 0 3
41910: PPUSH
41911: LD_VAR 0 4
41915: PPUSH
41916: CALL_OW 488
41920: IFFALSE 41943
// begin result := [ x , y ] ;
41922: LD_ADDR_VAR 0 1
41926: PUSH
41927: LD_VAR 0 3
41931: PUSH
41932: LD_VAR 0 4
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: ST_TO_ADDR
// break ;
41941: GO 41945
// end ; end ;
41943: GO 41745
41945: POP
41946: POP
// if result then
41947: LD_VAR 0 1
41951: IFFALSE 42011
// begin ToLua ( playSibBomb() ) ;
41953: LD_STRING playSibBomb()
41955: PPUSH
41956: CALL_OW 559
// wait ( 0 0$14 ) ;
41960: LD_INT 490
41962: PPUSH
41963: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
41967: LD_VAR 0 1
41971: PUSH
41972: LD_INT 1
41974: ARRAY
41975: PPUSH
41976: LD_VAR 0 1
41980: PUSH
41981: LD_INT 2
41983: ARRAY
41984: PPUSH
41985: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
41989: LD_VAR 0 1
41993: PUSH
41994: LD_INT 1
41996: ARRAY
41997: PPUSH
41998: LD_VAR 0 1
42002: PUSH
42003: LD_INT 2
42005: ARRAY
42006: PPUSH
42007: CALL_OW 429
// end ; end ;
42011: LD_VAR 0 1
42015: RET
// every 0 0$1 trigger StreamModeActive and sReset do
42016: LD_EXP 87
42020: PUSH
42021: LD_EXP 109
42025: AND
42026: IFFALSE 42038
42028: GO 42030
42030: DISABLE
// YouLost (  ) ;
42031: LD_STRING 
42033: PPUSH
42034: CALL_OW 104
42038: END
// every 0 0$1 trigger StreamModeActive and sFog do
42039: LD_EXP 87
42043: PUSH
42044: LD_EXP 108
42048: AND
42049: IFFALSE 42063
42051: GO 42053
42053: DISABLE
// FogOff ( your_side ) ;
42054: LD_OWVAR 2
42058: PPUSH
42059: CALL_OW 344
42063: END
// every 0 0$1 trigger StreamModeActive and sSun do
42064: LD_EXP 87
42068: PUSH
42069: LD_EXP 110
42073: AND
42074: IFFALSE 42102
42076: GO 42078
42078: DISABLE
// begin solar_recharge_percent := 0 ;
42079: LD_ADDR_OWVAR 79
42083: PUSH
42084: LD_INT 0
42086: ST_TO_ADDR
// wait ( 5 5$00 ) ;
42087: LD_INT 10500
42089: PPUSH
42090: CALL_OW 67
// solar_recharge_percent := 100 ;
42094: LD_ADDR_OWVAR 79
42098: PUSH
42099: LD_INT 100
42101: ST_TO_ADDR
// end ;
42102: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
42103: LD_EXP 87
42107: PUSH
42108: LD_EXP 111
42112: AND
42113: IFFALSE 42352
42115: GO 42117
42117: DISABLE
42118: LD_INT 0
42120: PPUSH
42121: PPUSH
42122: PPUSH
// begin tmp := [ ] ;
42123: LD_ADDR_VAR 0 3
42127: PUSH
42128: EMPTY
42129: ST_TO_ADDR
// for i := 1 to 6 do
42130: LD_ADDR_VAR 0 1
42134: PUSH
42135: DOUBLE
42136: LD_INT 1
42138: DEC
42139: ST_TO_ADDR
42140: LD_INT 6
42142: PUSH
42143: FOR_TO
42144: IFFALSE 42249
// begin uc_nation := nation_nature ;
42146: LD_ADDR_OWVAR 21
42150: PUSH
42151: LD_INT 0
42153: ST_TO_ADDR
// uc_side := 0 ;
42154: LD_ADDR_OWVAR 20
42158: PUSH
42159: LD_INT 0
42161: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
42162: LD_ADDR_OWVAR 29
42166: PUSH
42167: LD_INT 12
42169: PUSH
42170: LD_INT 12
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: ST_TO_ADDR
// hc_agressivity := 20 ;
42177: LD_ADDR_OWVAR 35
42181: PUSH
42182: LD_INT 20
42184: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
42185: LD_ADDR_OWVAR 28
42189: PUSH
42190: LD_INT 17
42192: ST_TO_ADDR
// hc_gallery :=  ;
42193: LD_ADDR_OWVAR 33
42197: PUSH
42198: LD_STRING 
42200: ST_TO_ADDR
// hc_name :=  ;
42201: LD_ADDR_OWVAR 26
42205: PUSH
42206: LD_STRING 
42208: ST_TO_ADDR
// un := CreateHuman ;
42209: LD_ADDR_VAR 0 2
42213: PUSH
42214: CALL_OW 44
42218: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
42219: LD_VAR 0 2
42223: PPUSH
42224: LD_INT 1
42226: PPUSH
42227: CALL_OW 51
// tmp := tmp ^ un ;
42231: LD_ADDR_VAR 0 3
42235: PUSH
42236: LD_VAR 0 3
42240: PUSH
42241: LD_VAR 0 2
42245: ADD
42246: ST_TO_ADDR
// end ;
42247: GO 42143
42249: POP
42250: POP
// repeat wait ( 0 0$1 ) ;
42251: LD_INT 35
42253: PPUSH
42254: CALL_OW 67
// for un in tmp do
42258: LD_ADDR_VAR 0 2
42262: PUSH
42263: LD_VAR 0 3
42267: PUSH
42268: FOR_IN
42269: IFFALSE 42343
// begin if IsDead ( un ) then
42271: LD_VAR 0 2
42275: PPUSH
42276: CALL_OW 301
42280: IFFALSE 42300
// begin tmp := tmp diff un ;
42282: LD_ADDR_VAR 0 3
42286: PUSH
42287: LD_VAR 0 3
42291: PUSH
42292: LD_VAR 0 2
42296: DIFF
42297: ST_TO_ADDR
// continue ;
42298: GO 42268
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
42300: LD_VAR 0 2
42304: PPUSH
42305: LD_INT 3
42307: PUSH
42308: LD_INT 22
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PPUSH
42322: CALL_OW 69
42326: PPUSH
42327: LD_VAR 0 2
42331: PPUSH
42332: CALL_OW 74
42336: PPUSH
42337: CALL_OW 115
// end ;
42341: GO 42268
42343: POP
42344: POP
// until not tmp ;
42345: LD_VAR 0 3
42349: NOT
42350: IFFALSE 42251
// end ;
42352: PPOPN 3
42354: END
// every 0 0$1 trigger StreamModeActive and sTroll do
42355: LD_EXP 87
42359: PUSH
42360: LD_EXP 112
42364: AND
42365: IFFALSE 42419
42367: GO 42369
42369: DISABLE
// begin ToLua ( displayTroll(); ) ;
42370: LD_STRING displayTroll();
42372: PPUSH
42373: CALL_OW 559
// wait ( 3 3$00 ) ;
42377: LD_INT 6300
42379: PPUSH
42380: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42384: LD_STRING hideTroll();
42386: PPUSH
42387: CALL_OW 559
// wait ( 1 1$00 ) ;
42391: LD_INT 2100
42393: PPUSH
42394: CALL_OW 67
// ToLua ( displayTroll(); ) ;
42398: LD_STRING displayTroll();
42400: PPUSH
42401: CALL_OW 559
// wait ( 1 1$00 ) ;
42405: LD_INT 2100
42407: PPUSH
42408: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42412: LD_STRING hideTroll();
42414: PPUSH
42415: CALL_OW 559
// end ;
42419: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
42420: LD_EXP 87
42424: PUSH
42425: LD_EXP 113
42429: AND
42430: IFFALSE 42493
42432: GO 42434
42434: DISABLE
42435: LD_INT 0
42437: PPUSH
// begin p := 0 ;
42438: LD_ADDR_VAR 0 1
42442: PUSH
42443: LD_INT 0
42445: ST_TO_ADDR
// repeat game_speed := 1 ;
42446: LD_ADDR_OWVAR 65
42450: PUSH
42451: LD_INT 1
42453: ST_TO_ADDR
// wait ( 0 0$1 ) ;
42454: LD_INT 35
42456: PPUSH
42457: CALL_OW 67
// p := p + 1 ;
42461: LD_ADDR_VAR 0 1
42465: PUSH
42466: LD_VAR 0 1
42470: PUSH
42471: LD_INT 1
42473: PLUS
42474: ST_TO_ADDR
// until p >= 60 ;
42475: LD_VAR 0 1
42479: PUSH
42480: LD_INT 60
42482: GREATEREQUAL
42483: IFFALSE 42446
// game_speed := 4 ;
42485: LD_ADDR_OWVAR 65
42489: PUSH
42490: LD_INT 4
42492: ST_TO_ADDR
// end ;
42493: PPOPN 1
42495: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
42496: LD_EXP 87
42500: PUSH
42501: LD_EXP 114
42505: AND
42506: IFFALSE 42652
42508: GO 42510
42510: DISABLE
42511: LD_INT 0
42513: PPUSH
42514: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42515: LD_ADDR_VAR 0 1
42519: PUSH
42520: LD_INT 22
42522: PUSH
42523: LD_OWVAR 2
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 2
42534: PUSH
42535: LD_INT 30
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 30
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: LIST
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PPUSH
42564: CALL_OW 69
42568: ST_TO_ADDR
// if not depot then
42569: LD_VAR 0 1
42573: NOT
42574: IFFALSE 42578
// exit ;
42576: GO 42652
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
42578: LD_ADDR_VAR 0 2
42582: PUSH
42583: LD_VAR 0 1
42587: PUSH
42588: LD_INT 1
42590: PPUSH
42591: LD_VAR 0 1
42595: PPUSH
42596: CALL_OW 12
42600: ARRAY
42601: PPUSH
42602: CALL_OW 274
42606: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
42607: LD_VAR 0 2
42611: PPUSH
42612: LD_INT 1
42614: PPUSH
42615: LD_INT 0
42617: PPUSH
42618: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
42622: LD_VAR 0 2
42626: PPUSH
42627: LD_INT 2
42629: PPUSH
42630: LD_INT 0
42632: PPUSH
42633: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
42637: LD_VAR 0 2
42641: PPUSH
42642: LD_INT 3
42644: PPUSH
42645: LD_INT 0
42647: PPUSH
42648: CALL_OW 277
// end ;
42652: PPOPN 2
42654: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
42655: LD_EXP 87
42659: PUSH
42660: LD_EXP 115
42664: AND
42665: IFFALSE 42762
42667: GO 42669
42669: DISABLE
42670: LD_INT 0
42672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
42673: LD_ADDR_VAR 0 1
42677: PUSH
42678: LD_INT 22
42680: PUSH
42681: LD_OWVAR 2
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 21
42692: PUSH
42693: LD_INT 1
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 3
42702: PUSH
42703: LD_INT 23
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: LIST
42721: PPUSH
42722: CALL_OW 69
42726: ST_TO_ADDR
// if not tmp then
42727: LD_VAR 0 1
42731: NOT
42732: IFFALSE 42736
// exit ;
42734: GO 42762
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
42736: LD_VAR 0 1
42740: PUSH
42741: LD_INT 1
42743: PPUSH
42744: LD_VAR 0 1
42748: PPUSH
42749: CALL_OW 12
42753: ARRAY
42754: PPUSH
42755: LD_INT 200
42757: PPUSH
42758: CALL_OW 234
// end ;
42762: PPOPN 1
42764: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
42765: LD_EXP 87
42769: PUSH
42770: LD_EXP 116
42774: AND
42775: IFFALSE 42854
42777: GO 42779
42779: DISABLE
42780: LD_INT 0
42782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
42783: LD_ADDR_VAR 0 1
42787: PUSH
42788: LD_INT 22
42790: PUSH
42791: LD_OWVAR 2
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 21
42802: PUSH
42803: LD_INT 2
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PPUSH
42814: CALL_OW 69
42818: ST_TO_ADDR
// if not tmp then
42819: LD_VAR 0 1
42823: NOT
42824: IFFALSE 42828
// exit ;
42826: GO 42854
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
42828: LD_VAR 0 1
42832: PUSH
42833: LD_INT 1
42835: PPUSH
42836: LD_VAR 0 1
42840: PPUSH
42841: CALL_OW 12
42845: ARRAY
42846: PPUSH
42847: LD_INT 60
42849: PPUSH
42850: CALL_OW 234
// end ;
42854: PPOPN 1
42856: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
42857: LD_EXP 87
42861: PUSH
42862: LD_EXP 117
42866: AND
42867: IFFALSE 42966
42869: GO 42871
42871: DISABLE
42872: LD_INT 0
42874: PPUSH
42875: PPUSH
// begin enable ;
42876: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
42877: LD_ADDR_VAR 0 1
42881: PUSH
42882: LD_INT 22
42884: PUSH
42885: LD_OWVAR 2
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 61
42896: PUSH
42897: EMPTY
42898: LIST
42899: PUSH
42900: LD_INT 33
42902: PUSH
42903: LD_INT 2
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: LIST
42914: PPUSH
42915: CALL_OW 69
42919: ST_TO_ADDR
// if not tmp then
42920: LD_VAR 0 1
42924: NOT
42925: IFFALSE 42929
// exit ;
42927: GO 42966
// for i in tmp do
42929: LD_ADDR_VAR 0 2
42933: PUSH
42934: LD_VAR 0 1
42938: PUSH
42939: FOR_IN
42940: IFFALSE 42964
// if IsControledBy ( i ) then
42942: LD_VAR 0 2
42946: PPUSH
42947: CALL_OW 312
42951: IFFALSE 42962
// ComUnlink ( i ) ;
42953: LD_VAR 0 2
42957: PPUSH
42958: CALL_OW 136
42962: GO 42939
42964: POP
42965: POP
// end ;
42966: PPOPN 2
42968: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
42969: LD_EXP 87
42973: PUSH
42974: LD_EXP 118
42978: AND
42979: IFFALSE 43119
42981: GO 42983
42983: DISABLE
42984: LD_INT 0
42986: PPUSH
42987: PPUSH
// begin ToLua ( displayPowell(); ) ;
42988: LD_STRING displayPowell();
42990: PPUSH
42991: CALL_OW 559
// uc_side := 0 ;
42995: LD_ADDR_OWVAR 20
42999: PUSH
43000: LD_INT 0
43002: ST_TO_ADDR
// uc_nation := 2 ;
43003: LD_ADDR_OWVAR 21
43007: PUSH
43008: LD_INT 2
43010: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
43011: LD_ADDR_OWVAR 37
43015: PUSH
43016: LD_INT 14
43018: ST_TO_ADDR
// vc_engine := engine_siberite ;
43019: LD_ADDR_OWVAR 39
43023: PUSH
43024: LD_INT 3
43026: ST_TO_ADDR
// vc_control := control_apeman ;
43027: LD_ADDR_OWVAR 38
43031: PUSH
43032: LD_INT 5
43034: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
43035: LD_ADDR_OWVAR 40
43039: PUSH
43040: LD_INT 29
43042: ST_TO_ADDR
// un := CreateVehicle ;
43043: LD_ADDR_VAR 0 2
43047: PUSH
43048: CALL_OW 45
43052: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
43053: LD_VAR 0 2
43057: PPUSH
43058: LD_INT 1
43060: PPUSH
43061: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
43065: LD_INT 35
43067: PPUSH
43068: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
43072: LD_VAR 0 2
43076: PPUSH
43077: LD_INT 22
43079: PUSH
43080: LD_OWVAR 2
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PPUSH
43089: CALL_OW 69
43093: PPUSH
43094: LD_VAR 0 2
43098: PPUSH
43099: CALL_OW 74
43103: PPUSH
43104: CALL_OW 115
// until IsDead ( un ) ;
43108: LD_VAR 0 2
43112: PPUSH
43113: CALL_OW 301
43117: IFFALSE 43065
// end ;
43119: PPOPN 2
43121: END
// every 0 0$1 trigger StreamModeActive and sStu do
43122: LD_EXP 87
43126: PUSH
43127: LD_EXP 126
43131: AND
43132: IFFALSE 43148
43134: GO 43136
43136: DISABLE
// begin ToLua ( displayStucuk(); ) ;
43137: LD_STRING displayStucuk();
43139: PPUSH
43140: CALL_OW 559
// ResetFog ;
43144: CALL_OW 335
// end ;
43148: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
43149: LD_EXP 87
43153: PUSH
43154: LD_EXP 119
43158: AND
43159: IFFALSE 43300
43161: GO 43163
43163: DISABLE
43164: LD_INT 0
43166: PPUSH
43167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43168: LD_ADDR_VAR 0 2
43172: PUSH
43173: LD_INT 22
43175: PUSH
43176: LD_OWVAR 2
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 21
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PPUSH
43199: CALL_OW 69
43203: ST_TO_ADDR
// if not tmp then
43204: LD_VAR 0 2
43208: NOT
43209: IFFALSE 43213
// exit ;
43211: GO 43300
// un := tmp [ rand ( 1 , tmp ) ] ;
43213: LD_ADDR_VAR 0 1
43217: PUSH
43218: LD_VAR 0 2
43222: PUSH
43223: LD_INT 1
43225: PPUSH
43226: LD_VAR 0 2
43230: PPUSH
43231: CALL_OW 12
43235: ARRAY
43236: ST_TO_ADDR
// SetSide ( un , 0 ) ;
43237: LD_VAR 0 1
43241: PPUSH
43242: LD_INT 0
43244: PPUSH
43245: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
43249: LD_VAR 0 1
43253: PPUSH
43254: LD_OWVAR 3
43258: PUSH
43259: LD_VAR 0 1
43263: DIFF
43264: PPUSH
43265: LD_VAR 0 1
43269: PPUSH
43270: CALL_OW 74
43274: PPUSH
43275: CALL_OW 115
// wait ( 0 0$20 ) ;
43279: LD_INT 700
43281: PPUSH
43282: CALL_OW 67
// SetSide ( un , your_side ) ;
43286: LD_VAR 0 1
43290: PPUSH
43291: LD_OWVAR 2
43295: PPUSH
43296: CALL_OW 235
// end ;
43300: PPOPN 2
43302: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
43303: LD_EXP 87
43307: PUSH
43308: LD_EXP 120
43312: AND
43313: IFFALSE 43419
43315: GO 43317
43317: DISABLE
43318: LD_INT 0
43320: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43321: LD_ADDR_VAR 0 1
43325: PUSH
43326: LD_INT 22
43328: PUSH
43329: LD_OWVAR 2
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: LD_INT 30
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 30
43353: PUSH
43354: LD_INT 1
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: LIST
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PPUSH
43370: CALL_OW 69
43374: ST_TO_ADDR
// if not depot then
43375: LD_VAR 0 1
43379: NOT
43380: IFFALSE 43384
// exit ;
43382: GO 43419
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
43384: LD_VAR 0 1
43388: PUSH
43389: LD_INT 1
43391: ARRAY
43392: PPUSH
43393: CALL_OW 250
43397: PPUSH
43398: LD_VAR 0 1
43402: PUSH
43403: LD_INT 1
43405: ARRAY
43406: PPUSH
43407: CALL_OW 251
43411: PPUSH
43412: LD_INT 70
43414: PPUSH
43415: CALL_OW 495
// end ;
43419: PPOPN 1
43421: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
43422: LD_EXP 87
43426: PUSH
43427: LD_EXP 121
43431: AND
43432: IFFALSE 43643
43434: GO 43436
43436: DISABLE
43437: LD_INT 0
43439: PPUSH
43440: PPUSH
43441: PPUSH
43442: PPUSH
43443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43444: LD_ADDR_VAR 0 5
43448: PUSH
43449: LD_INT 22
43451: PUSH
43452: LD_OWVAR 2
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 21
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PPUSH
43475: CALL_OW 69
43479: ST_TO_ADDR
// if not tmp then
43480: LD_VAR 0 5
43484: NOT
43485: IFFALSE 43489
// exit ;
43487: GO 43643
// for i in tmp do
43489: LD_ADDR_VAR 0 1
43493: PUSH
43494: LD_VAR 0 5
43498: PUSH
43499: FOR_IN
43500: IFFALSE 43641
// begin d := rand ( 0 , 5 ) ;
43502: LD_ADDR_VAR 0 4
43506: PUSH
43507: LD_INT 0
43509: PPUSH
43510: LD_INT 5
43512: PPUSH
43513: CALL_OW 12
43517: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
43518: LD_ADDR_VAR 0 2
43522: PUSH
43523: LD_VAR 0 1
43527: PPUSH
43528: CALL_OW 250
43532: PPUSH
43533: LD_VAR 0 4
43537: PPUSH
43538: LD_INT 3
43540: PPUSH
43541: LD_INT 12
43543: PPUSH
43544: CALL_OW 12
43548: PPUSH
43549: CALL_OW 272
43553: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
43554: LD_ADDR_VAR 0 3
43558: PUSH
43559: LD_VAR 0 1
43563: PPUSH
43564: CALL_OW 251
43568: PPUSH
43569: LD_VAR 0 4
43573: PPUSH
43574: LD_INT 3
43576: PPUSH
43577: LD_INT 12
43579: PPUSH
43580: CALL_OW 12
43584: PPUSH
43585: CALL_OW 273
43589: ST_TO_ADDR
// if ValidHex ( x , y ) then
43590: LD_VAR 0 2
43594: PPUSH
43595: LD_VAR 0 3
43599: PPUSH
43600: CALL_OW 488
43604: IFFALSE 43639
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
43606: LD_VAR 0 1
43610: PPUSH
43611: LD_VAR 0 2
43615: PPUSH
43616: LD_VAR 0 3
43620: PPUSH
43621: LD_INT 3
43623: PPUSH
43624: LD_INT 6
43626: PPUSH
43627: CALL_OW 12
43631: PPUSH
43632: LD_INT 1
43634: PPUSH
43635: CALL_OW 483
// end ;
43639: GO 43499
43641: POP
43642: POP
// end ;
43643: PPOPN 5
43645: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
43646: LD_EXP 87
43650: PUSH
43651: LD_EXP 122
43655: AND
43656: IFFALSE 43750
43658: GO 43660
43660: DISABLE
43661: LD_INT 0
43663: PPUSH
43664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
43665: LD_ADDR_VAR 0 2
43669: PUSH
43670: LD_INT 22
43672: PUSH
43673: LD_OWVAR 2
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 32
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 21
43694: PUSH
43695: LD_INT 2
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: LIST
43706: PPUSH
43707: CALL_OW 69
43711: ST_TO_ADDR
// if not tmp then
43712: LD_VAR 0 2
43716: NOT
43717: IFFALSE 43721
// exit ;
43719: GO 43750
// for i in tmp do
43721: LD_ADDR_VAR 0 1
43725: PUSH
43726: LD_VAR 0 2
43730: PUSH
43731: FOR_IN
43732: IFFALSE 43748
// SetFuel ( i , 0 ) ;
43734: LD_VAR 0 1
43738: PPUSH
43739: LD_INT 0
43741: PPUSH
43742: CALL_OW 240
43746: GO 43731
43748: POP
43749: POP
// end ;
43750: PPOPN 2
43752: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
43753: LD_EXP 87
43757: PUSH
43758: LD_EXP 123
43762: AND
43763: IFFALSE 43829
43765: GO 43767
43767: DISABLE
43768: LD_INT 0
43770: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
43771: LD_ADDR_VAR 0 1
43775: PUSH
43776: LD_INT 22
43778: PUSH
43779: LD_OWVAR 2
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 30
43790: PUSH
43791: LD_INT 29
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PPUSH
43802: CALL_OW 69
43806: ST_TO_ADDR
// if not tmp then
43807: LD_VAR 0 1
43811: NOT
43812: IFFALSE 43816
// exit ;
43814: GO 43829
// DestroyUnit ( tmp [ 1 ] ) ;
43816: LD_VAR 0 1
43820: PUSH
43821: LD_INT 1
43823: ARRAY
43824: PPUSH
43825: CALL_OW 65
// end ;
43829: PPOPN 1
43831: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
43832: LD_EXP 87
43836: PUSH
43837: LD_EXP 125
43841: AND
43842: IFFALSE 43971
43844: GO 43846
43846: DISABLE
43847: LD_INT 0
43849: PPUSH
// begin uc_side := 0 ;
43850: LD_ADDR_OWVAR 20
43854: PUSH
43855: LD_INT 0
43857: ST_TO_ADDR
// uc_nation := nation_arabian ;
43858: LD_ADDR_OWVAR 21
43862: PUSH
43863: LD_INT 2
43865: ST_TO_ADDR
// hc_gallery :=  ;
43866: LD_ADDR_OWVAR 33
43870: PUSH
43871: LD_STRING 
43873: ST_TO_ADDR
// hc_name :=  ;
43874: LD_ADDR_OWVAR 26
43878: PUSH
43879: LD_STRING 
43881: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
43882: LD_INT 1
43884: PPUSH
43885: LD_INT 11
43887: PPUSH
43888: LD_INT 10
43890: PPUSH
43891: CALL_OW 380
// un := CreateHuman ;
43895: LD_ADDR_VAR 0 1
43899: PUSH
43900: CALL_OW 44
43904: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
43905: LD_VAR 0 1
43909: PPUSH
43910: LD_INT 1
43912: PPUSH
43913: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
43917: LD_INT 35
43919: PPUSH
43920: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
43924: LD_VAR 0 1
43928: PPUSH
43929: LD_INT 22
43931: PUSH
43932: LD_OWVAR 2
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PPUSH
43941: CALL_OW 69
43945: PPUSH
43946: LD_VAR 0 1
43950: PPUSH
43951: CALL_OW 74
43955: PPUSH
43956: CALL_OW 115
// until IsDead ( un ) ;
43960: LD_VAR 0 1
43964: PPUSH
43965: CALL_OW 301
43969: IFFALSE 43917
// end ;
43971: PPOPN 1
43973: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
43974: LD_EXP 87
43978: PUSH
43979: LD_EXP 127
43983: AND
43984: IFFALSE 43996
43986: GO 43988
43988: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
43989: LD_STRING earthquake(getX(game), 0, 32)
43991: PPUSH
43992: CALL_OW 559
43996: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
43997: LD_EXP 87
44001: PUSH
44002: LD_EXP 128
44006: AND
44007: IFFALSE 44098
44009: GO 44011
44011: DISABLE
44012: LD_INT 0
44014: PPUSH
// begin enable ;
44015: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
44016: LD_ADDR_VAR 0 1
44020: PUSH
44021: LD_INT 22
44023: PUSH
44024: LD_OWVAR 2
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 21
44035: PUSH
44036: LD_INT 2
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 33
44045: PUSH
44046: LD_INT 3
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: LIST
44057: PPUSH
44058: CALL_OW 69
44062: ST_TO_ADDR
// if not tmp then
44063: LD_VAR 0 1
44067: NOT
44068: IFFALSE 44072
// exit ;
44070: GO 44098
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
44072: LD_VAR 0 1
44076: PUSH
44077: LD_INT 1
44079: PPUSH
44080: LD_VAR 0 1
44084: PPUSH
44085: CALL_OW 12
44089: ARRAY
44090: PPUSH
44091: LD_INT 1
44093: PPUSH
44094: CALL_OW 234
// end ;
44098: PPOPN 1
44100: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
44101: LD_EXP 87
44105: PUSH
44106: LD_EXP 129
44110: AND
44111: IFFALSE 44252
44113: GO 44115
44115: DISABLE
44116: LD_INT 0
44118: PPUSH
44119: PPUSH
44120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44121: LD_ADDR_VAR 0 3
44125: PUSH
44126: LD_INT 22
44128: PUSH
44129: LD_OWVAR 2
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 25
44140: PUSH
44141: LD_INT 1
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PPUSH
44152: CALL_OW 69
44156: ST_TO_ADDR
// if not tmp then
44157: LD_VAR 0 3
44161: NOT
44162: IFFALSE 44166
// exit ;
44164: GO 44252
// un := tmp [ rand ( 1 , tmp ) ] ;
44166: LD_ADDR_VAR 0 2
44170: PUSH
44171: LD_VAR 0 3
44175: PUSH
44176: LD_INT 1
44178: PPUSH
44179: LD_VAR 0 3
44183: PPUSH
44184: CALL_OW 12
44188: ARRAY
44189: ST_TO_ADDR
// if Crawls ( un ) then
44190: LD_VAR 0 2
44194: PPUSH
44195: CALL_OW 318
44199: IFFALSE 44210
// ComWalk ( un ) ;
44201: LD_VAR 0 2
44205: PPUSH
44206: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
44210: LD_VAR 0 2
44214: PPUSH
44215: LD_INT 9
44217: PPUSH
44218: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
44222: LD_INT 28
44224: PPUSH
44225: LD_OWVAR 2
44229: PPUSH
44230: LD_INT 2
44232: PPUSH
44233: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
44237: LD_INT 29
44239: PPUSH
44240: LD_OWVAR 2
44244: PPUSH
44245: LD_INT 2
44247: PPUSH
44248: CALL_OW 322
// end ;
44252: PPOPN 3
44254: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
44255: LD_EXP 87
44259: PUSH
44260: LD_EXP 130
44264: AND
44265: IFFALSE 44376
44267: GO 44269
44269: DISABLE
44270: LD_INT 0
44272: PPUSH
44273: PPUSH
44274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44275: LD_ADDR_VAR 0 3
44279: PUSH
44280: LD_INT 22
44282: PUSH
44283: LD_OWVAR 2
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 25
44294: PUSH
44295: LD_INT 1
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PPUSH
44306: CALL_OW 69
44310: ST_TO_ADDR
// if not tmp then
44311: LD_VAR 0 3
44315: NOT
44316: IFFALSE 44320
// exit ;
44318: GO 44376
// un := tmp [ rand ( 1 , tmp ) ] ;
44320: LD_ADDR_VAR 0 2
44324: PUSH
44325: LD_VAR 0 3
44329: PUSH
44330: LD_INT 1
44332: PPUSH
44333: LD_VAR 0 3
44337: PPUSH
44338: CALL_OW 12
44342: ARRAY
44343: ST_TO_ADDR
// if Crawls ( un ) then
44344: LD_VAR 0 2
44348: PPUSH
44349: CALL_OW 318
44353: IFFALSE 44364
// ComWalk ( un ) ;
44355: LD_VAR 0 2
44359: PPUSH
44360: CALL_OW 138
// SetClass ( un , class_mortar ) ;
44364: LD_VAR 0 2
44368: PPUSH
44369: LD_INT 8
44371: PPUSH
44372: CALL_OW 336
// end ;
44376: PPOPN 3
44378: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
44379: LD_EXP 87
44383: PUSH
44384: LD_EXP 131
44388: AND
44389: IFFALSE 44533
44391: GO 44393
44393: DISABLE
44394: LD_INT 0
44396: PPUSH
44397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
44398: LD_ADDR_VAR 0 2
44402: PUSH
44403: LD_INT 22
44405: PUSH
44406: LD_OWVAR 2
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 21
44417: PUSH
44418: LD_INT 2
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 2
44427: PUSH
44428: LD_INT 34
44430: PUSH
44431: LD_INT 12
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 34
44440: PUSH
44441: LD_INT 51
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 34
44450: PUSH
44451: LD_INT 32
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: LIST
44468: PPUSH
44469: CALL_OW 69
44473: ST_TO_ADDR
// if not tmp then
44474: LD_VAR 0 2
44478: NOT
44479: IFFALSE 44483
// exit ;
44481: GO 44533
// for i in tmp do
44483: LD_ADDR_VAR 0 1
44487: PUSH
44488: LD_VAR 0 2
44492: PUSH
44493: FOR_IN
44494: IFFALSE 44531
// if GetCargo ( i , mat_artifact ) = 0 then
44496: LD_VAR 0 1
44500: PPUSH
44501: LD_INT 4
44503: PPUSH
44504: CALL_OW 289
44508: PUSH
44509: LD_INT 0
44511: EQUAL
44512: IFFALSE 44529
// SetCargo ( i , mat_siberit , 100 ) ;
44514: LD_VAR 0 1
44518: PPUSH
44519: LD_INT 3
44521: PPUSH
44522: LD_INT 100
44524: PPUSH
44525: CALL_OW 290
44529: GO 44493
44531: POP
44532: POP
// end ;
44533: PPOPN 2
44535: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
44536: LD_EXP 87
44540: PUSH
44541: LD_EXP 132
44545: AND
44546: IFFALSE 44729
44548: GO 44550
44550: DISABLE
44551: LD_INT 0
44553: PPUSH
44554: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
44555: LD_ADDR_VAR 0 2
44559: PUSH
44560: LD_INT 22
44562: PUSH
44563: LD_OWVAR 2
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PPUSH
44572: CALL_OW 69
44576: ST_TO_ADDR
// if not tmp then
44577: LD_VAR 0 2
44581: NOT
44582: IFFALSE 44586
// exit ;
44584: GO 44729
// for i := 1 to 2 do
44586: LD_ADDR_VAR 0 1
44590: PUSH
44591: DOUBLE
44592: LD_INT 1
44594: DEC
44595: ST_TO_ADDR
44596: LD_INT 2
44598: PUSH
44599: FOR_TO
44600: IFFALSE 44727
// begin uc_side := your_side ;
44602: LD_ADDR_OWVAR 20
44606: PUSH
44607: LD_OWVAR 2
44611: ST_TO_ADDR
// uc_nation := nation_american ;
44612: LD_ADDR_OWVAR 21
44616: PUSH
44617: LD_INT 1
44619: ST_TO_ADDR
// vc_chassis := us_morphling ;
44620: LD_ADDR_OWVAR 37
44624: PUSH
44625: LD_INT 5
44627: ST_TO_ADDR
// vc_engine := engine_siberite ;
44628: LD_ADDR_OWVAR 39
44632: PUSH
44633: LD_INT 3
44635: ST_TO_ADDR
// vc_control := control_computer ;
44636: LD_ADDR_OWVAR 38
44640: PUSH
44641: LD_INT 3
44643: ST_TO_ADDR
// vc_weapon := us_double_laser ;
44644: LD_ADDR_OWVAR 40
44648: PUSH
44649: LD_INT 10
44651: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
44652: LD_VAR 0 2
44656: PUSH
44657: LD_INT 1
44659: ARRAY
44660: PPUSH
44661: CALL_OW 310
44665: NOT
44666: IFFALSE 44713
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
44668: CALL_OW 45
44672: PPUSH
44673: LD_VAR 0 2
44677: PUSH
44678: LD_INT 1
44680: ARRAY
44681: PPUSH
44682: CALL_OW 250
44686: PPUSH
44687: LD_VAR 0 2
44691: PUSH
44692: LD_INT 1
44694: ARRAY
44695: PPUSH
44696: CALL_OW 251
44700: PPUSH
44701: LD_INT 12
44703: PPUSH
44704: LD_INT 1
44706: PPUSH
44707: CALL_OW 50
44711: GO 44725
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
44713: CALL_OW 45
44717: PPUSH
44718: LD_INT 1
44720: PPUSH
44721: CALL_OW 51
// end ;
44725: GO 44599
44727: POP
44728: POP
// end ;
44729: PPOPN 2
44731: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
44732: LD_EXP 87
44736: PUSH
44737: LD_EXP 133
44741: AND
44742: IFFALSE 44964
44744: GO 44746
44746: DISABLE
44747: LD_INT 0
44749: PPUSH
44750: PPUSH
44751: PPUSH
44752: PPUSH
44753: PPUSH
44754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
44755: LD_ADDR_VAR 0 6
44759: PUSH
44760: LD_INT 22
44762: PUSH
44763: LD_OWVAR 2
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 21
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 3
44784: PUSH
44785: LD_INT 23
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: LIST
44803: PPUSH
44804: CALL_OW 69
44808: ST_TO_ADDR
// if not tmp then
44809: LD_VAR 0 6
44813: NOT
44814: IFFALSE 44818
// exit ;
44816: GO 44964
// s1 := rand ( 1 , 4 ) ;
44818: LD_ADDR_VAR 0 2
44822: PUSH
44823: LD_INT 1
44825: PPUSH
44826: LD_INT 4
44828: PPUSH
44829: CALL_OW 12
44833: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
44834: LD_ADDR_VAR 0 4
44838: PUSH
44839: LD_VAR 0 6
44843: PUSH
44844: LD_INT 1
44846: ARRAY
44847: PPUSH
44848: LD_VAR 0 2
44852: PPUSH
44853: CALL_OW 259
44857: ST_TO_ADDR
// if s1 = 1 then
44858: LD_VAR 0 2
44862: PUSH
44863: LD_INT 1
44865: EQUAL
44866: IFFALSE 44886
// s2 := rand ( 2 , 4 ) else
44868: LD_ADDR_VAR 0 3
44872: PUSH
44873: LD_INT 2
44875: PPUSH
44876: LD_INT 4
44878: PPUSH
44879: CALL_OW 12
44883: ST_TO_ADDR
44884: GO 44894
// s2 := 1 ;
44886: LD_ADDR_VAR 0 3
44890: PUSH
44891: LD_INT 1
44893: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
44894: LD_ADDR_VAR 0 5
44898: PUSH
44899: LD_VAR 0 6
44903: PUSH
44904: LD_INT 1
44906: ARRAY
44907: PPUSH
44908: LD_VAR 0 3
44912: PPUSH
44913: CALL_OW 259
44917: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
44918: LD_VAR 0 6
44922: PUSH
44923: LD_INT 1
44925: ARRAY
44926: PPUSH
44927: LD_VAR 0 2
44931: PPUSH
44932: LD_VAR 0 5
44936: PPUSH
44937: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
44941: LD_VAR 0 6
44945: PUSH
44946: LD_INT 1
44948: ARRAY
44949: PPUSH
44950: LD_VAR 0 3
44954: PPUSH
44955: LD_VAR 0 4
44959: PPUSH
44960: CALL_OW 237
// end ;
44964: PPOPN 6
44966: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
44967: LD_EXP 87
44971: PUSH
44972: LD_EXP 134
44976: AND
44977: IFFALSE 45056
44979: GO 44981
44981: DISABLE
44982: LD_INT 0
44984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
44985: LD_ADDR_VAR 0 1
44989: PUSH
44990: LD_INT 22
44992: PUSH
44993: LD_OWVAR 2
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 30
45004: PUSH
45005: LD_INT 3
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PPUSH
45016: CALL_OW 69
45020: ST_TO_ADDR
// if not tmp then
45021: LD_VAR 0 1
45025: NOT
45026: IFFALSE 45030
// exit ;
45028: GO 45056
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
45030: LD_VAR 0 1
45034: PUSH
45035: LD_INT 1
45037: PPUSH
45038: LD_VAR 0 1
45042: PPUSH
45043: CALL_OW 12
45047: ARRAY
45048: PPUSH
45049: LD_INT 1
45051: PPUSH
45052: CALL_OW 234
// end ;
45056: PPOPN 1
45058: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
45059: LD_EXP 87
45063: PUSH
45064: LD_EXP 135
45068: AND
45069: IFFALSE 45181
45071: GO 45073
45073: DISABLE
45074: LD_INT 0
45076: PPUSH
45077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
45078: LD_ADDR_VAR 0 2
45082: PUSH
45083: LD_INT 22
45085: PUSH
45086: LD_OWVAR 2
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 2
45097: PUSH
45098: LD_INT 30
45100: PUSH
45101: LD_INT 27
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 30
45110: PUSH
45111: LD_INT 26
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 30
45120: PUSH
45121: LD_INT 28
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PPUSH
45138: CALL_OW 69
45142: ST_TO_ADDR
// if not tmp then
45143: LD_VAR 0 2
45147: NOT
45148: IFFALSE 45152
// exit ;
45150: GO 45181
// for i in tmp do
45152: LD_ADDR_VAR 0 1
45156: PUSH
45157: LD_VAR 0 2
45161: PUSH
45162: FOR_IN
45163: IFFALSE 45179
// SetLives ( i , 1 ) ;
45165: LD_VAR 0 1
45169: PPUSH
45170: LD_INT 1
45172: PPUSH
45173: CALL_OW 234
45177: GO 45162
45179: POP
45180: POP
// end ;
45181: PPOPN 2
45183: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
45184: LD_EXP 87
45188: PUSH
45189: LD_EXP 136
45193: AND
45194: IFFALSE 45481
45196: GO 45198
45198: DISABLE
45199: LD_INT 0
45201: PPUSH
45202: PPUSH
45203: PPUSH
// begin i := rand ( 1 , 7 ) ;
45204: LD_ADDR_VAR 0 1
45208: PUSH
45209: LD_INT 1
45211: PPUSH
45212: LD_INT 7
45214: PPUSH
45215: CALL_OW 12
45219: ST_TO_ADDR
// case i of 1 :
45220: LD_VAR 0 1
45224: PUSH
45225: LD_INT 1
45227: DOUBLE
45228: EQUAL
45229: IFTRUE 45233
45231: GO 45243
45233: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
45234: LD_STRING earthquake(getX(game), 0, 32)
45236: PPUSH
45237: CALL_OW 559
45241: GO 45481
45243: LD_INT 2
45245: DOUBLE
45246: EQUAL
45247: IFTRUE 45251
45249: GO 45265
45251: POP
// begin ToLua ( displayStucuk(); ) ;
45252: LD_STRING displayStucuk();
45254: PPUSH
45255: CALL_OW 559
// ResetFog ;
45259: CALL_OW 335
// end ; 3 :
45263: GO 45481
45265: LD_INT 3
45267: DOUBLE
45268: EQUAL
45269: IFTRUE 45273
45271: GO 45377
45273: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
45274: LD_ADDR_VAR 0 2
45278: PUSH
45279: LD_INT 22
45281: PUSH
45282: LD_OWVAR 2
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 25
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PPUSH
45305: CALL_OW 69
45309: ST_TO_ADDR
// if not tmp then
45310: LD_VAR 0 2
45314: NOT
45315: IFFALSE 45319
// exit ;
45317: GO 45481
// un := tmp [ rand ( 1 , tmp ) ] ;
45319: LD_ADDR_VAR 0 3
45323: PUSH
45324: LD_VAR 0 2
45328: PUSH
45329: LD_INT 1
45331: PPUSH
45332: LD_VAR 0 2
45336: PPUSH
45337: CALL_OW 12
45341: ARRAY
45342: ST_TO_ADDR
// if Crawls ( un ) then
45343: LD_VAR 0 3
45347: PPUSH
45348: CALL_OW 318
45352: IFFALSE 45363
// ComWalk ( un ) ;
45354: LD_VAR 0 3
45358: PPUSH
45359: CALL_OW 138
// SetClass ( un , class_mortar ) ;
45363: LD_VAR 0 3
45367: PPUSH
45368: LD_INT 8
45370: PPUSH
45371: CALL_OW 336
// end ; 4 :
45375: GO 45481
45377: LD_INT 4
45379: DOUBLE
45380: EQUAL
45381: IFTRUE 45385
45383: GO 45459
45385: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
45386: LD_ADDR_VAR 0 2
45390: PUSH
45391: LD_INT 22
45393: PUSH
45394: LD_OWVAR 2
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 30
45405: PUSH
45406: LD_INT 29
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PPUSH
45417: CALL_OW 69
45421: ST_TO_ADDR
// if not tmp then
45422: LD_VAR 0 2
45426: NOT
45427: IFFALSE 45431
// exit ;
45429: GO 45481
// CenterNowOnUnits ( tmp [ 1 ] ) ;
45431: LD_VAR 0 2
45435: PUSH
45436: LD_INT 1
45438: ARRAY
45439: PPUSH
45440: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
45444: LD_VAR 0 2
45448: PUSH
45449: LD_INT 1
45451: ARRAY
45452: PPUSH
45453: CALL_OW 65
// end ; 5 .. 7 :
45457: GO 45481
45459: LD_INT 5
45461: DOUBLE
45462: GREATEREQUAL
45463: IFFALSE 45471
45465: LD_INT 7
45467: DOUBLE
45468: LESSEQUAL
45469: IFTRUE 45473
45471: GO 45480
45473: POP
// StreamSibBomb ; end ;
45474: CALL 41718 0 0
45478: GO 45481
45480: POP
// end ;
45481: PPOPN 3
45483: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
45484: LD_EXP 87
45488: PUSH
45489: LD_EXP 137
45493: AND
45494: IFFALSE 45650
45496: GO 45498
45498: DISABLE
45499: LD_INT 0
45501: PPUSH
45502: PPUSH
45503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
45504: LD_ADDR_VAR 0 2
45508: PUSH
45509: LD_INT 81
45511: PUSH
45512: LD_OWVAR 2
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 2
45523: PUSH
45524: LD_INT 21
45526: PUSH
45527: LD_INT 1
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 21
45536: PUSH
45537: LD_INT 2
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: LIST
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PPUSH
45553: CALL_OW 69
45557: ST_TO_ADDR
// if not tmp then
45558: LD_VAR 0 2
45562: NOT
45563: IFFALSE 45567
// exit ;
45565: GO 45650
// p := 0 ;
45567: LD_ADDR_VAR 0 3
45571: PUSH
45572: LD_INT 0
45574: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
45575: LD_INT 35
45577: PPUSH
45578: CALL_OW 67
// p := p + 1 ;
45582: LD_ADDR_VAR 0 3
45586: PUSH
45587: LD_VAR 0 3
45591: PUSH
45592: LD_INT 1
45594: PLUS
45595: ST_TO_ADDR
// for i in tmp do
45596: LD_ADDR_VAR 0 1
45600: PUSH
45601: LD_VAR 0 2
45605: PUSH
45606: FOR_IN
45607: IFFALSE 45638
// if GetLives ( i ) < 1000 then
45609: LD_VAR 0 1
45613: PPUSH
45614: CALL_OW 256
45618: PUSH
45619: LD_INT 1000
45621: LESS
45622: IFFALSE 45636
// SetLives ( i , 1000 ) ;
45624: LD_VAR 0 1
45628: PPUSH
45629: LD_INT 1000
45631: PPUSH
45632: CALL_OW 234
45636: GO 45606
45638: POP
45639: POP
// until p > 20 ;
45640: LD_VAR 0 3
45644: PUSH
45645: LD_INT 20
45647: GREATER
45648: IFFALSE 45575
// end ;
45650: PPOPN 3
45652: END
// every 0 0$1 trigger StreamModeActive and sTime do
45653: LD_EXP 87
45657: PUSH
45658: LD_EXP 138
45662: AND
45663: IFFALSE 45698
45665: GO 45667
45667: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
45668: LD_INT 28
45670: PPUSH
45671: LD_OWVAR 2
45675: PPUSH
45676: LD_INT 2
45678: PPUSH
45679: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
45683: LD_INT 30
45685: PPUSH
45686: LD_OWVAR 2
45690: PPUSH
45691: LD_INT 2
45693: PPUSH
45694: CALL_OW 322
// end ;
45698: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
45699: LD_EXP 87
45703: PUSH
45704: LD_EXP 139
45708: AND
45709: IFFALSE 45830
45711: GO 45713
45713: DISABLE
45714: LD_INT 0
45716: PPUSH
45717: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
45718: LD_ADDR_VAR 0 2
45722: PUSH
45723: LD_INT 22
45725: PUSH
45726: LD_OWVAR 2
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 21
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 3
45747: PUSH
45748: LD_INT 23
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: LIST
45766: PPUSH
45767: CALL_OW 69
45771: ST_TO_ADDR
// if not tmp then
45772: LD_VAR 0 2
45776: NOT
45777: IFFALSE 45781
// exit ;
45779: GO 45830
// for i in tmp do
45781: LD_ADDR_VAR 0 1
45785: PUSH
45786: LD_VAR 0 2
45790: PUSH
45791: FOR_IN
45792: IFFALSE 45828
// begin if Crawls ( i ) then
45794: LD_VAR 0 1
45798: PPUSH
45799: CALL_OW 318
45803: IFFALSE 45814
// ComWalk ( i ) ;
45805: LD_VAR 0 1
45809: PPUSH
45810: CALL_OW 138
// SetClass ( i , 2 ) ;
45814: LD_VAR 0 1
45818: PPUSH
45819: LD_INT 2
45821: PPUSH
45822: CALL_OW 336
// end ;
45826: GO 45791
45828: POP
45829: POP
// end ;
45830: PPOPN 2
45832: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
45833: LD_EXP 87
45837: PUSH
45838: LD_EXP 140
45842: AND
45843: IFFALSE 46131
45845: GO 45847
45847: DISABLE
45848: LD_INT 0
45850: PPUSH
45851: PPUSH
45852: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
45853: LD_OWVAR 2
45857: PPUSH
45858: LD_INT 9
45860: PPUSH
45861: LD_INT 1
45863: PPUSH
45864: LD_INT 1
45866: PPUSH
45867: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
45871: LD_INT 9
45873: PPUSH
45874: LD_OWVAR 2
45878: PPUSH
45879: CALL_OW 343
// uc_side := 9 ;
45883: LD_ADDR_OWVAR 20
45887: PUSH
45888: LD_INT 9
45890: ST_TO_ADDR
// uc_nation := 2 ;
45891: LD_ADDR_OWVAR 21
45895: PUSH
45896: LD_INT 2
45898: ST_TO_ADDR
// hc_name := Dark Warrior ;
45899: LD_ADDR_OWVAR 26
45903: PUSH
45904: LD_STRING Dark Warrior
45906: ST_TO_ADDR
// hc_gallery :=  ;
45907: LD_ADDR_OWVAR 33
45911: PUSH
45912: LD_STRING 
45914: ST_TO_ADDR
// hc_noskilllimit := true ;
45915: LD_ADDR_OWVAR 76
45919: PUSH
45920: LD_INT 1
45922: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
45923: LD_ADDR_OWVAR 31
45927: PUSH
45928: LD_INT 30
45930: PUSH
45931: LD_INT 30
45933: PUSH
45934: LD_INT 30
45936: PUSH
45937: LD_INT 30
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: ST_TO_ADDR
// un := CreateHuman ;
45946: LD_ADDR_VAR 0 3
45950: PUSH
45951: CALL_OW 44
45955: ST_TO_ADDR
// hc_noskilllimit := false ;
45956: LD_ADDR_OWVAR 76
45960: PUSH
45961: LD_INT 0
45963: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
45964: LD_VAR 0 3
45968: PPUSH
45969: LD_INT 1
45971: PPUSH
45972: CALL_OW 51
// ToLua ( playRanger() ) ;
45976: LD_STRING playRanger()
45978: PPUSH
45979: CALL_OW 559
// p := 0 ;
45983: LD_ADDR_VAR 0 2
45987: PUSH
45988: LD_INT 0
45990: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
45991: LD_INT 35
45993: PPUSH
45994: CALL_OW 67
// p := p + 1 ;
45998: LD_ADDR_VAR 0 2
46002: PUSH
46003: LD_VAR 0 2
46007: PUSH
46008: LD_INT 1
46010: PLUS
46011: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
46012: LD_VAR 0 3
46016: PPUSH
46017: CALL_OW 256
46021: PUSH
46022: LD_INT 1000
46024: LESS
46025: IFFALSE 46039
// SetLives ( un , 1000 ) ;
46027: LD_VAR 0 3
46031: PPUSH
46032: LD_INT 1000
46034: PPUSH
46035: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
46039: LD_VAR 0 3
46043: PPUSH
46044: LD_INT 81
46046: PUSH
46047: LD_OWVAR 2
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 91
46058: PUSH
46059: LD_VAR 0 3
46063: PUSH
46064: LD_INT 30
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: LIST
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PPUSH
46076: CALL_OW 69
46080: PPUSH
46081: LD_VAR 0 3
46085: PPUSH
46086: CALL_OW 74
46090: PPUSH
46091: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
46095: LD_VAR 0 2
46099: PUSH
46100: LD_INT 80
46102: GREATER
46103: PUSH
46104: LD_VAR 0 3
46108: PPUSH
46109: CALL_OW 301
46113: OR
46114: IFFALSE 45991
// if un then
46116: LD_VAR 0 3
46120: IFFALSE 46131
// RemoveUnit ( un ) ;
46122: LD_VAR 0 3
46126: PPUSH
46127: CALL_OW 64
// end ;
46131: PPOPN 3
46133: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
46134: LD_EXP 141
46138: IFFALSE 46254
46140: GO 46142
46142: DISABLE
46143: LD_INT 0
46145: PPUSH
46146: PPUSH
46147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
46148: LD_ADDR_VAR 0 2
46152: PUSH
46153: LD_INT 81
46155: PUSH
46156: LD_OWVAR 2
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 21
46167: PUSH
46168: LD_INT 1
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PPUSH
46179: CALL_OW 69
46183: ST_TO_ADDR
// ToLua ( playComputer() ) ;
46184: LD_STRING playComputer()
46186: PPUSH
46187: CALL_OW 559
// if not tmp then
46191: LD_VAR 0 2
46195: NOT
46196: IFFALSE 46200
// exit ;
46198: GO 46254
// for i in tmp do
46200: LD_ADDR_VAR 0 1
46204: PUSH
46205: LD_VAR 0 2
46209: PUSH
46210: FOR_IN
46211: IFFALSE 46252
// for j := 1 to 4 do
46213: LD_ADDR_VAR 0 3
46217: PUSH
46218: DOUBLE
46219: LD_INT 1
46221: DEC
46222: ST_TO_ADDR
46223: LD_INT 4
46225: PUSH
46226: FOR_TO
46227: IFFALSE 46248
// SetSkill ( i , j , 10 ) ;
46229: LD_VAR 0 1
46233: PPUSH
46234: LD_VAR 0 3
46238: PPUSH
46239: LD_INT 10
46241: PPUSH
46242: CALL_OW 237
46246: GO 46226
46248: POP
46249: POP
46250: GO 46210
46252: POP
46253: POP
// end ;
46254: PPOPN 3
46256: END
// every 0 0$1 trigger s30 do var i , tmp ;
46257: LD_EXP 142
46261: IFFALSE 46330
46263: GO 46265
46265: DISABLE
46266: LD_INT 0
46268: PPUSH
46269: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46270: LD_ADDR_VAR 0 2
46274: PUSH
46275: LD_INT 22
46277: PUSH
46278: LD_OWVAR 2
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PPUSH
46287: CALL_OW 69
46291: ST_TO_ADDR
// if not tmp then
46292: LD_VAR 0 2
46296: NOT
46297: IFFALSE 46301
// exit ;
46299: GO 46330
// for i in tmp do
46301: LD_ADDR_VAR 0 1
46305: PUSH
46306: LD_VAR 0 2
46310: PUSH
46311: FOR_IN
46312: IFFALSE 46328
// SetLives ( i , 300 ) ;
46314: LD_VAR 0 1
46318: PPUSH
46319: LD_INT 300
46321: PPUSH
46322: CALL_OW 234
46326: GO 46311
46328: POP
46329: POP
// end ;
46330: PPOPN 2
46332: END
// every 0 0$1 trigger s60 do var i , tmp ;
46333: LD_EXP 143
46337: IFFALSE 46406
46339: GO 46341
46341: DISABLE
46342: LD_INT 0
46344: PPUSH
46345: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46346: LD_ADDR_VAR 0 2
46350: PUSH
46351: LD_INT 22
46353: PUSH
46354: LD_OWVAR 2
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PPUSH
46363: CALL_OW 69
46367: ST_TO_ADDR
// if not tmp then
46368: LD_VAR 0 2
46372: NOT
46373: IFFALSE 46377
// exit ;
46375: GO 46406
// for i in tmp do
46377: LD_ADDR_VAR 0 1
46381: PUSH
46382: LD_VAR 0 2
46386: PUSH
46387: FOR_IN
46388: IFFALSE 46404
// SetLives ( i , 600 ) ;
46390: LD_VAR 0 1
46394: PPUSH
46395: LD_INT 600
46397: PPUSH
46398: CALL_OW 234
46402: GO 46387
46404: POP
46405: POP
// end ;
46406: PPOPN 2
46408: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46409: LD_INT 0
46411: PPUSH
// case cmd of 301 :
46412: LD_VAR 0 1
46416: PUSH
46417: LD_INT 301
46419: DOUBLE
46420: EQUAL
46421: IFTRUE 46425
46423: GO 46457
46425: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
46426: LD_VAR 0 6
46430: PPUSH
46431: LD_VAR 0 7
46435: PPUSH
46436: LD_VAR 0 8
46440: PPUSH
46441: LD_VAR 0 4
46445: PPUSH
46446: LD_VAR 0 5
46450: PPUSH
46451: CALL 47666 0 5
46455: GO 46578
46457: LD_INT 302
46459: DOUBLE
46460: EQUAL
46461: IFTRUE 46465
46463: GO 46502
46465: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
46466: LD_VAR 0 6
46470: PPUSH
46471: LD_VAR 0 7
46475: PPUSH
46476: LD_VAR 0 8
46480: PPUSH
46481: LD_VAR 0 9
46485: PPUSH
46486: LD_VAR 0 4
46490: PPUSH
46491: LD_VAR 0 5
46495: PPUSH
46496: CALL 47757 0 6
46500: GO 46578
46502: LD_INT 303
46504: DOUBLE
46505: EQUAL
46506: IFTRUE 46510
46508: GO 46547
46510: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
46511: LD_VAR 0 6
46515: PPUSH
46516: LD_VAR 0 7
46520: PPUSH
46521: LD_VAR 0 8
46525: PPUSH
46526: LD_VAR 0 9
46530: PPUSH
46531: LD_VAR 0 4
46535: PPUSH
46536: LD_VAR 0 5
46540: PPUSH
46541: CALL 46583 0 6
46545: GO 46578
46547: LD_INT 304
46549: DOUBLE
46550: EQUAL
46551: IFTRUE 46555
46553: GO 46577
46555: POP
// hHackTeleport ( unit , x , y ) ; end ;
46556: LD_VAR 0 2
46560: PPUSH
46561: LD_VAR 0 4
46565: PPUSH
46566: LD_VAR 0 5
46570: PPUSH
46571: CALL 48350 0 3
46575: GO 46578
46577: POP
// end ;
46578: LD_VAR 0 12
46582: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
46583: LD_INT 0
46585: PPUSH
46586: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
46587: LD_VAR 0 1
46591: PUSH
46592: LD_INT 1
46594: LESS
46595: PUSH
46596: LD_VAR 0 1
46600: PUSH
46601: LD_INT 3
46603: GREATER
46604: OR
46605: PUSH
46606: LD_VAR 0 5
46610: PPUSH
46611: LD_VAR 0 6
46615: PPUSH
46616: CALL_OW 428
46620: OR
46621: IFFALSE 46625
// exit ;
46623: GO 47353
// uc_side := your_side ;
46625: LD_ADDR_OWVAR 20
46629: PUSH
46630: LD_OWVAR 2
46634: ST_TO_ADDR
// uc_nation := nation ;
46635: LD_ADDR_OWVAR 21
46639: PUSH
46640: LD_VAR 0 1
46644: ST_TO_ADDR
// bc_level = 1 ;
46645: LD_ADDR_OWVAR 43
46649: PUSH
46650: LD_INT 1
46652: ST_TO_ADDR
// case btype of 1 :
46653: LD_VAR 0 2
46657: PUSH
46658: LD_INT 1
46660: DOUBLE
46661: EQUAL
46662: IFTRUE 46666
46664: GO 46677
46666: POP
// bc_type := b_depot ; 2 :
46667: LD_ADDR_OWVAR 42
46671: PUSH
46672: LD_INT 0
46674: ST_TO_ADDR
46675: GO 47297
46677: LD_INT 2
46679: DOUBLE
46680: EQUAL
46681: IFTRUE 46685
46683: GO 46696
46685: POP
// bc_type := b_warehouse ; 3 :
46686: LD_ADDR_OWVAR 42
46690: PUSH
46691: LD_INT 1
46693: ST_TO_ADDR
46694: GO 47297
46696: LD_INT 3
46698: DOUBLE
46699: EQUAL
46700: IFTRUE 46704
46702: GO 46715
46704: POP
// bc_type := b_lab ; 4 .. 9 :
46705: LD_ADDR_OWVAR 42
46709: PUSH
46710: LD_INT 6
46712: ST_TO_ADDR
46713: GO 47297
46715: LD_INT 4
46717: DOUBLE
46718: GREATEREQUAL
46719: IFFALSE 46727
46721: LD_INT 9
46723: DOUBLE
46724: LESSEQUAL
46725: IFTRUE 46729
46727: GO 46789
46729: POP
// begin bc_type := b_lab_half ;
46730: LD_ADDR_OWVAR 42
46734: PUSH
46735: LD_INT 7
46737: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
46738: LD_ADDR_OWVAR 44
46742: PUSH
46743: LD_INT 10
46745: PUSH
46746: LD_INT 11
46748: PUSH
46749: LD_INT 12
46751: PUSH
46752: LD_INT 15
46754: PUSH
46755: LD_INT 14
46757: PUSH
46758: LD_INT 13
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: PUSH
46769: LD_VAR 0 2
46773: PUSH
46774: LD_INT 3
46776: MINUS
46777: ARRAY
46778: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
46779: LD_ADDR_OWVAR 45
46783: PUSH
46784: LD_INT 9
46786: ST_TO_ADDR
// end ; 10 .. 13 :
46787: GO 47297
46789: LD_INT 10
46791: DOUBLE
46792: GREATEREQUAL
46793: IFFALSE 46801
46795: LD_INT 13
46797: DOUBLE
46798: LESSEQUAL
46799: IFTRUE 46803
46801: GO 46880
46803: POP
// begin bc_type := b_lab_full ;
46804: LD_ADDR_OWVAR 42
46808: PUSH
46809: LD_INT 8
46811: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
46812: LD_ADDR_OWVAR 44
46816: PUSH
46817: LD_INT 10
46819: PUSH
46820: LD_INT 12
46822: PUSH
46823: LD_INT 14
46825: PUSH
46826: LD_INT 13
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: PUSH
46835: LD_VAR 0 2
46839: PUSH
46840: LD_INT 9
46842: MINUS
46843: ARRAY
46844: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
46845: LD_ADDR_OWVAR 45
46849: PUSH
46850: LD_INT 11
46852: PUSH
46853: LD_INT 15
46855: PUSH
46856: LD_INT 12
46858: PUSH
46859: LD_INT 15
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: PUSH
46868: LD_VAR 0 2
46872: PUSH
46873: LD_INT 9
46875: MINUS
46876: ARRAY
46877: ST_TO_ADDR
// end ; 14 :
46878: GO 47297
46880: LD_INT 14
46882: DOUBLE
46883: EQUAL
46884: IFTRUE 46888
46886: GO 46899
46888: POP
// bc_type := b_workshop ; 15 :
46889: LD_ADDR_OWVAR 42
46893: PUSH
46894: LD_INT 2
46896: ST_TO_ADDR
46897: GO 47297
46899: LD_INT 15
46901: DOUBLE
46902: EQUAL
46903: IFTRUE 46907
46905: GO 46918
46907: POP
// bc_type := b_factory ; 16 :
46908: LD_ADDR_OWVAR 42
46912: PUSH
46913: LD_INT 3
46915: ST_TO_ADDR
46916: GO 47297
46918: LD_INT 16
46920: DOUBLE
46921: EQUAL
46922: IFTRUE 46926
46924: GO 46937
46926: POP
// bc_type := b_ext_gun ; 17 :
46927: LD_ADDR_OWVAR 42
46931: PUSH
46932: LD_INT 17
46934: ST_TO_ADDR
46935: GO 47297
46937: LD_INT 17
46939: DOUBLE
46940: EQUAL
46941: IFTRUE 46945
46943: GO 46973
46945: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
46946: LD_ADDR_OWVAR 42
46950: PUSH
46951: LD_INT 19
46953: PUSH
46954: LD_INT 23
46956: PUSH
46957: LD_INT 19
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: LIST
46964: PUSH
46965: LD_VAR 0 1
46969: ARRAY
46970: ST_TO_ADDR
46971: GO 47297
46973: LD_INT 18
46975: DOUBLE
46976: EQUAL
46977: IFTRUE 46981
46979: GO 46992
46981: POP
// bc_type := b_ext_radar ; 19 :
46982: LD_ADDR_OWVAR 42
46986: PUSH
46987: LD_INT 20
46989: ST_TO_ADDR
46990: GO 47297
46992: LD_INT 19
46994: DOUBLE
46995: EQUAL
46996: IFTRUE 47000
46998: GO 47011
47000: POP
// bc_type := b_ext_radio ; 20 :
47001: LD_ADDR_OWVAR 42
47005: PUSH
47006: LD_INT 22
47008: ST_TO_ADDR
47009: GO 47297
47011: LD_INT 20
47013: DOUBLE
47014: EQUAL
47015: IFTRUE 47019
47017: GO 47030
47019: POP
// bc_type := b_ext_siberium ; 21 :
47020: LD_ADDR_OWVAR 42
47024: PUSH
47025: LD_INT 21
47027: ST_TO_ADDR
47028: GO 47297
47030: LD_INT 21
47032: DOUBLE
47033: EQUAL
47034: IFTRUE 47038
47036: GO 47049
47038: POP
// bc_type := b_ext_computer ; 22 :
47039: LD_ADDR_OWVAR 42
47043: PUSH
47044: LD_INT 24
47046: ST_TO_ADDR
47047: GO 47297
47049: LD_INT 22
47051: DOUBLE
47052: EQUAL
47053: IFTRUE 47057
47055: GO 47068
47057: POP
// bc_type := b_ext_track ; 23 :
47058: LD_ADDR_OWVAR 42
47062: PUSH
47063: LD_INT 16
47065: ST_TO_ADDR
47066: GO 47297
47068: LD_INT 23
47070: DOUBLE
47071: EQUAL
47072: IFTRUE 47076
47074: GO 47087
47076: POP
// bc_type := b_ext_laser ; 24 :
47077: LD_ADDR_OWVAR 42
47081: PUSH
47082: LD_INT 25
47084: ST_TO_ADDR
47085: GO 47297
47087: LD_INT 24
47089: DOUBLE
47090: EQUAL
47091: IFTRUE 47095
47093: GO 47106
47095: POP
// bc_type := b_control_tower ; 25 :
47096: LD_ADDR_OWVAR 42
47100: PUSH
47101: LD_INT 36
47103: ST_TO_ADDR
47104: GO 47297
47106: LD_INT 25
47108: DOUBLE
47109: EQUAL
47110: IFTRUE 47114
47112: GO 47125
47114: POP
// bc_type := b_breastwork ; 26 :
47115: LD_ADDR_OWVAR 42
47119: PUSH
47120: LD_INT 31
47122: ST_TO_ADDR
47123: GO 47297
47125: LD_INT 26
47127: DOUBLE
47128: EQUAL
47129: IFTRUE 47133
47131: GO 47144
47133: POP
// bc_type := b_bunker ; 27 :
47134: LD_ADDR_OWVAR 42
47138: PUSH
47139: LD_INT 32
47141: ST_TO_ADDR
47142: GO 47297
47144: LD_INT 27
47146: DOUBLE
47147: EQUAL
47148: IFTRUE 47152
47150: GO 47163
47152: POP
// bc_type := b_turret ; 28 :
47153: LD_ADDR_OWVAR 42
47157: PUSH
47158: LD_INT 33
47160: ST_TO_ADDR
47161: GO 47297
47163: LD_INT 28
47165: DOUBLE
47166: EQUAL
47167: IFTRUE 47171
47169: GO 47182
47171: POP
// bc_type := b_armoury ; 29 :
47172: LD_ADDR_OWVAR 42
47176: PUSH
47177: LD_INT 4
47179: ST_TO_ADDR
47180: GO 47297
47182: LD_INT 29
47184: DOUBLE
47185: EQUAL
47186: IFTRUE 47190
47188: GO 47201
47190: POP
// bc_type := b_barracks ; 30 :
47191: LD_ADDR_OWVAR 42
47195: PUSH
47196: LD_INT 5
47198: ST_TO_ADDR
47199: GO 47297
47201: LD_INT 30
47203: DOUBLE
47204: EQUAL
47205: IFTRUE 47209
47207: GO 47220
47209: POP
// bc_type := b_solar_power ; 31 :
47210: LD_ADDR_OWVAR 42
47214: PUSH
47215: LD_INT 27
47217: ST_TO_ADDR
47218: GO 47297
47220: LD_INT 31
47222: DOUBLE
47223: EQUAL
47224: IFTRUE 47228
47226: GO 47239
47228: POP
// bc_type := b_oil_power ; 32 :
47229: LD_ADDR_OWVAR 42
47233: PUSH
47234: LD_INT 26
47236: ST_TO_ADDR
47237: GO 47297
47239: LD_INT 32
47241: DOUBLE
47242: EQUAL
47243: IFTRUE 47247
47245: GO 47258
47247: POP
// bc_type := b_siberite_power ; 33 :
47248: LD_ADDR_OWVAR 42
47252: PUSH
47253: LD_INT 28
47255: ST_TO_ADDR
47256: GO 47297
47258: LD_INT 33
47260: DOUBLE
47261: EQUAL
47262: IFTRUE 47266
47264: GO 47277
47266: POP
// bc_type := b_oil_mine ; 34 :
47267: LD_ADDR_OWVAR 42
47271: PUSH
47272: LD_INT 29
47274: ST_TO_ADDR
47275: GO 47297
47277: LD_INT 34
47279: DOUBLE
47280: EQUAL
47281: IFTRUE 47285
47283: GO 47296
47285: POP
// bc_type := b_siberite_mine ; end ;
47286: LD_ADDR_OWVAR 42
47290: PUSH
47291: LD_INT 30
47293: ST_TO_ADDR
47294: GO 47297
47296: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
47297: LD_ADDR_VAR 0 8
47301: PUSH
47302: LD_VAR 0 5
47306: PPUSH
47307: LD_VAR 0 6
47311: PPUSH
47312: LD_VAR 0 3
47316: PPUSH
47317: CALL_OW 47
47321: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
47322: LD_OWVAR 42
47326: PUSH
47327: LD_INT 32
47329: PUSH
47330: LD_INT 33
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: IN
47337: IFFALSE 47353
// PlaceWeaponTurret ( b , weapon ) ;
47339: LD_VAR 0 8
47343: PPUSH
47344: LD_VAR 0 4
47348: PPUSH
47349: CALL_OW 431
// end ;
47353: LD_VAR 0 7
47357: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
47358: LD_INT 0
47360: PPUSH
47361: PPUSH
47362: PPUSH
47363: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47364: LD_ADDR_VAR 0 4
47368: PUSH
47369: LD_INT 22
47371: PUSH
47372: LD_OWVAR 2
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 2
47383: PUSH
47384: LD_INT 30
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 30
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: LIST
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PPUSH
47413: CALL_OW 69
47417: ST_TO_ADDR
// if not tmp then
47418: LD_VAR 0 4
47422: NOT
47423: IFFALSE 47427
// exit ;
47425: GO 47486
// for i in tmp do
47427: LD_ADDR_VAR 0 2
47431: PUSH
47432: LD_VAR 0 4
47436: PUSH
47437: FOR_IN
47438: IFFALSE 47484
// for j = 1 to 3 do
47440: LD_ADDR_VAR 0 3
47444: PUSH
47445: DOUBLE
47446: LD_INT 1
47448: DEC
47449: ST_TO_ADDR
47450: LD_INT 3
47452: PUSH
47453: FOR_TO
47454: IFFALSE 47480
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
47456: LD_VAR 0 2
47460: PPUSH
47461: CALL_OW 274
47465: PPUSH
47466: LD_VAR 0 3
47470: PPUSH
47471: LD_INT 99999
47473: PPUSH
47474: CALL_OW 277
47478: GO 47453
47480: POP
47481: POP
47482: GO 47437
47484: POP
47485: POP
// end ;
47486: LD_VAR 0 1
47490: RET
// export function hHackSetLevel10 ; var i , j ; begin
47491: LD_INT 0
47493: PPUSH
47494: PPUSH
47495: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
47496: LD_ADDR_VAR 0 2
47500: PUSH
47501: LD_INT 21
47503: PUSH
47504: LD_INT 1
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PPUSH
47511: CALL_OW 69
47515: PUSH
47516: FOR_IN
47517: IFFALSE 47569
// if IsSelected ( i ) then
47519: LD_VAR 0 2
47523: PPUSH
47524: CALL_OW 306
47528: IFFALSE 47567
// begin for j := 1 to 4 do
47530: LD_ADDR_VAR 0 3
47534: PUSH
47535: DOUBLE
47536: LD_INT 1
47538: DEC
47539: ST_TO_ADDR
47540: LD_INT 4
47542: PUSH
47543: FOR_TO
47544: IFFALSE 47565
// SetSkill ( i , j , 10 ) ;
47546: LD_VAR 0 2
47550: PPUSH
47551: LD_VAR 0 3
47555: PPUSH
47556: LD_INT 10
47558: PPUSH
47559: CALL_OW 237
47563: GO 47543
47565: POP
47566: POP
// end ;
47567: GO 47516
47569: POP
47570: POP
// end ;
47571: LD_VAR 0 1
47575: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
47576: LD_INT 0
47578: PPUSH
47579: PPUSH
47580: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
47581: LD_ADDR_VAR 0 2
47585: PUSH
47586: LD_INT 22
47588: PUSH
47589: LD_OWVAR 2
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 21
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PPUSH
47612: CALL_OW 69
47616: PUSH
47617: FOR_IN
47618: IFFALSE 47659
// begin for j := 1 to 4 do
47620: LD_ADDR_VAR 0 3
47624: PUSH
47625: DOUBLE
47626: LD_INT 1
47628: DEC
47629: ST_TO_ADDR
47630: LD_INT 4
47632: PUSH
47633: FOR_TO
47634: IFFALSE 47655
// SetSkill ( i , j , 10 ) ;
47636: LD_VAR 0 2
47640: PPUSH
47641: LD_VAR 0 3
47645: PPUSH
47646: LD_INT 10
47648: PPUSH
47649: CALL_OW 237
47653: GO 47633
47655: POP
47656: POP
// end ;
47657: GO 47617
47659: POP
47660: POP
// end ;
47661: LD_VAR 0 1
47665: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
47666: LD_INT 0
47668: PPUSH
// uc_side := your_side ;
47669: LD_ADDR_OWVAR 20
47673: PUSH
47674: LD_OWVAR 2
47678: ST_TO_ADDR
// uc_nation := nation ;
47679: LD_ADDR_OWVAR 21
47683: PUSH
47684: LD_VAR 0 1
47688: ST_TO_ADDR
// InitHc ;
47689: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
47693: LD_INT 0
47695: PPUSH
47696: LD_VAR 0 2
47700: PPUSH
47701: LD_VAR 0 3
47705: PPUSH
47706: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
47710: LD_VAR 0 4
47714: PPUSH
47715: LD_VAR 0 5
47719: PPUSH
47720: CALL_OW 428
47724: PUSH
47725: LD_INT 0
47727: EQUAL
47728: IFFALSE 47752
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
47730: CALL_OW 44
47734: PPUSH
47735: LD_VAR 0 4
47739: PPUSH
47740: LD_VAR 0 5
47744: PPUSH
47745: LD_INT 1
47747: PPUSH
47748: CALL_OW 48
// end ;
47752: LD_VAR 0 6
47756: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
47757: LD_INT 0
47759: PPUSH
47760: PPUSH
// uc_side := your_side ;
47761: LD_ADDR_OWVAR 20
47765: PUSH
47766: LD_OWVAR 2
47770: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
47771: LD_VAR 0 1
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: LD_INT 3
47784: PUSH
47785: LD_INT 4
47787: PUSH
47788: LD_INT 5
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: IN
47798: IFFALSE 47810
// uc_nation := nation_american else
47800: LD_ADDR_OWVAR 21
47804: PUSH
47805: LD_INT 1
47807: ST_TO_ADDR
47808: GO 47853
// if chassis in [ 11 , 12 , 13 , 14 ] then
47810: LD_VAR 0 1
47814: PUSH
47815: LD_INT 11
47817: PUSH
47818: LD_INT 12
47820: PUSH
47821: LD_INT 13
47823: PUSH
47824: LD_INT 14
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: IN
47833: IFFALSE 47845
// uc_nation := nation_arabian else
47835: LD_ADDR_OWVAR 21
47839: PUSH
47840: LD_INT 2
47842: ST_TO_ADDR
47843: GO 47853
// uc_nation := nation_russian ;
47845: LD_ADDR_OWVAR 21
47849: PUSH
47850: LD_INT 3
47852: ST_TO_ADDR
// vc_chassis := chassis ;
47853: LD_ADDR_OWVAR 37
47857: PUSH
47858: LD_VAR 0 1
47862: ST_TO_ADDR
// vc_engine := engine ;
47863: LD_ADDR_OWVAR 39
47867: PUSH
47868: LD_VAR 0 2
47872: ST_TO_ADDR
// vc_control := control ;
47873: LD_ADDR_OWVAR 38
47877: PUSH
47878: LD_VAR 0 3
47882: ST_TO_ADDR
// vc_weapon := weapon ;
47883: LD_ADDR_OWVAR 40
47887: PUSH
47888: LD_VAR 0 4
47892: ST_TO_ADDR
// un := CreateVehicle ;
47893: LD_ADDR_VAR 0 8
47897: PUSH
47898: CALL_OW 45
47902: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
47903: LD_VAR 0 8
47907: PPUSH
47908: LD_INT 0
47910: PPUSH
47911: LD_INT 5
47913: PPUSH
47914: CALL_OW 12
47918: PPUSH
47919: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
47923: LD_VAR 0 8
47927: PPUSH
47928: LD_VAR 0 5
47932: PPUSH
47933: LD_VAR 0 6
47937: PPUSH
47938: LD_INT 1
47940: PPUSH
47941: CALL_OW 48
// end ;
47945: LD_VAR 0 7
47949: RET
// export hInvincible ; every 1 do
47950: GO 47952
47952: DISABLE
// hInvincible := [ ] ;
47953: LD_ADDR_EXP 144
47957: PUSH
47958: EMPTY
47959: ST_TO_ADDR
47960: END
// every 10 do var i ;
47961: GO 47963
47963: DISABLE
47964: LD_INT 0
47966: PPUSH
// begin enable ;
47967: ENABLE
// if not hInvincible then
47968: LD_EXP 144
47972: NOT
47973: IFFALSE 47977
// exit ;
47975: GO 48021
// for i in hInvincible do
47977: LD_ADDR_VAR 0 1
47981: PUSH
47982: LD_EXP 144
47986: PUSH
47987: FOR_IN
47988: IFFALSE 48019
// if GetLives ( i ) < 1000 then
47990: LD_VAR 0 1
47994: PPUSH
47995: CALL_OW 256
47999: PUSH
48000: LD_INT 1000
48002: LESS
48003: IFFALSE 48017
// SetLives ( i , 1000 ) ;
48005: LD_VAR 0 1
48009: PPUSH
48010: LD_INT 1000
48012: PPUSH
48013: CALL_OW 234
48017: GO 47987
48019: POP
48020: POP
// end ;
48021: PPOPN 1
48023: END
// export function hHackInvincible ; var i ; begin
48024: LD_INT 0
48026: PPUSH
48027: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
48028: LD_ADDR_VAR 0 2
48032: PUSH
48033: LD_INT 2
48035: PUSH
48036: LD_INT 21
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 21
48048: PUSH
48049: LD_INT 2
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: LIST
48060: PPUSH
48061: CALL_OW 69
48065: PUSH
48066: FOR_IN
48067: IFFALSE 48128
// if IsSelected ( i ) then
48069: LD_VAR 0 2
48073: PPUSH
48074: CALL_OW 306
48078: IFFALSE 48126
// begin if i in hInvincible then
48080: LD_VAR 0 2
48084: PUSH
48085: LD_EXP 144
48089: IN
48090: IFFALSE 48110
// hInvincible := hInvincible diff i else
48092: LD_ADDR_EXP 144
48096: PUSH
48097: LD_EXP 144
48101: PUSH
48102: LD_VAR 0 2
48106: DIFF
48107: ST_TO_ADDR
48108: GO 48126
// hInvincible := hInvincible union i ;
48110: LD_ADDR_EXP 144
48114: PUSH
48115: LD_EXP 144
48119: PUSH
48120: LD_VAR 0 2
48124: UNION
48125: ST_TO_ADDR
// end ;
48126: GO 48066
48128: POP
48129: POP
// end ;
48130: LD_VAR 0 1
48134: RET
// export function hHackInvisible ; var i , j ; begin
48135: LD_INT 0
48137: PPUSH
48138: PPUSH
48139: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
48140: LD_ADDR_VAR 0 2
48144: PUSH
48145: LD_INT 21
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PPUSH
48155: CALL_OW 69
48159: PUSH
48160: FOR_IN
48161: IFFALSE 48185
// if IsSelected ( i ) then
48163: LD_VAR 0 2
48167: PPUSH
48168: CALL_OW 306
48172: IFFALSE 48183
// ComForceInvisible ( i ) ;
48174: LD_VAR 0 2
48178: PPUSH
48179: CALL_OW 496
48183: GO 48160
48185: POP
48186: POP
// end ;
48187: LD_VAR 0 1
48191: RET
// export function hHackChangeYourSide ; begin
48192: LD_INT 0
48194: PPUSH
// if your_side = 8 then
48195: LD_OWVAR 2
48199: PUSH
48200: LD_INT 8
48202: EQUAL
48203: IFFALSE 48215
// your_side := 0 else
48205: LD_ADDR_OWVAR 2
48209: PUSH
48210: LD_INT 0
48212: ST_TO_ADDR
48213: GO 48229
// your_side := your_side + 1 ;
48215: LD_ADDR_OWVAR 2
48219: PUSH
48220: LD_OWVAR 2
48224: PUSH
48225: LD_INT 1
48227: PLUS
48228: ST_TO_ADDR
// end ;
48229: LD_VAR 0 1
48233: RET
// export function hHackChangeUnitSide ; var i , j ; begin
48234: LD_INT 0
48236: PPUSH
48237: PPUSH
48238: PPUSH
// for i in all_units do
48239: LD_ADDR_VAR 0 2
48243: PUSH
48244: LD_OWVAR 3
48248: PUSH
48249: FOR_IN
48250: IFFALSE 48328
// if IsSelected ( i ) then
48252: LD_VAR 0 2
48256: PPUSH
48257: CALL_OW 306
48261: IFFALSE 48326
// begin j := GetSide ( i ) ;
48263: LD_ADDR_VAR 0 3
48267: PUSH
48268: LD_VAR 0 2
48272: PPUSH
48273: CALL_OW 255
48277: ST_TO_ADDR
// if j = 8 then
48278: LD_VAR 0 3
48282: PUSH
48283: LD_INT 8
48285: EQUAL
48286: IFFALSE 48298
// j := 0 else
48288: LD_ADDR_VAR 0 3
48292: PUSH
48293: LD_INT 0
48295: ST_TO_ADDR
48296: GO 48312
// j := j + 1 ;
48298: LD_ADDR_VAR 0 3
48302: PUSH
48303: LD_VAR 0 3
48307: PUSH
48308: LD_INT 1
48310: PLUS
48311: ST_TO_ADDR
// SetSide ( i , j ) ;
48312: LD_VAR 0 2
48316: PPUSH
48317: LD_VAR 0 3
48321: PPUSH
48322: CALL_OW 235
// end ;
48326: GO 48249
48328: POP
48329: POP
// end ;
48330: LD_VAR 0 1
48334: RET
// export function hHackFog ; begin
48335: LD_INT 0
48337: PPUSH
// FogOff ( true ) ;
48338: LD_INT 1
48340: PPUSH
48341: CALL_OW 344
// end ;
48345: LD_VAR 0 1
48349: RET
// export function hHackTeleport ( unit , x , y ) ; begin
48350: LD_INT 0
48352: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
48353: LD_VAR 0 1
48357: PPUSH
48358: LD_VAR 0 2
48362: PPUSH
48363: LD_VAR 0 3
48367: PPUSH
48368: LD_INT 1
48370: PPUSH
48371: LD_INT 1
48373: PPUSH
48374: CALL_OW 483
// CenterOnXY ( x , y ) ;
48378: LD_VAR 0 2
48382: PPUSH
48383: LD_VAR 0 3
48387: PPUSH
48388: CALL_OW 84
// end ;
48392: LD_VAR 0 4
48396: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
48397: LD_INT 0
48399: PPUSH
48400: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
48401: LD_VAR 0 1
48405: NOT
48406: PUSH
48407: LD_VAR 0 2
48411: PPUSH
48412: LD_VAR 0 3
48416: PPUSH
48417: CALL_OW 488
48421: NOT
48422: OR
48423: PUSH
48424: LD_VAR 0 1
48428: PPUSH
48429: CALL_OW 266
48433: PUSH
48434: LD_INT 3
48436: NONEQUAL
48437: PUSH
48438: LD_VAR 0 1
48442: PPUSH
48443: CALL_OW 247
48447: PUSH
48448: LD_INT 1
48450: EQUAL
48451: NOT
48452: AND
48453: OR
48454: IFFALSE 48458
// exit ;
48456: GO 48607
// if GetType ( factory ) = unit_human then
48458: LD_VAR 0 1
48462: PPUSH
48463: CALL_OW 247
48467: PUSH
48468: LD_INT 1
48470: EQUAL
48471: IFFALSE 48488
// factory := IsInUnit ( factory ) ;
48473: LD_ADDR_VAR 0 1
48477: PUSH
48478: LD_VAR 0 1
48482: PPUSH
48483: CALL_OW 310
48487: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
48488: LD_VAR 0 1
48492: PPUSH
48493: CALL_OW 266
48497: PUSH
48498: LD_INT 3
48500: NONEQUAL
48501: IFFALSE 48505
// exit ;
48503: GO 48607
// if HexInfo ( x , y ) = factory then
48505: LD_VAR 0 2
48509: PPUSH
48510: LD_VAR 0 3
48514: PPUSH
48515: CALL_OW 428
48519: PUSH
48520: LD_VAR 0 1
48524: EQUAL
48525: IFFALSE 48552
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
48527: LD_ADDR_EXP 145
48531: PUSH
48532: LD_EXP 145
48536: PPUSH
48537: LD_VAR 0 1
48541: PPUSH
48542: LD_INT 0
48544: PPUSH
48545: CALL_OW 1
48549: ST_TO_ADDR
48550: GO 48603
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
48552: LD_ADDR_EXP 145
48556: PUSH
48557: LD_EXP 145
48561: PPUSH
48562: LD_VAR 0 1
48566: PPUSH
48567: LD_VAR 0 1
48571: PPUSH
48572: CALL_OW 255
48576: PUSH
48577: LD_VAR 0 1
48581: PUSH
48582: LD_VAR 0 2
48586: PUSH
48587: LD_VAR 0 3
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: PPUSH
48598: CALL_OW 1
48602: ST_TO_ADDR
// UpdateFactoryWaypoints ;
48603: CALL 48612 0 0
// end ;
48607: LD_VAR 0 4
48611: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
48612: LD_INT 0
48614: PPUSH
48615: PPUSH
48616: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
48617: LD_STRING resetFactoryWaypoint();
48619: PPUSH
48620: CALL_OW 559
// if factoryWaypoints then
48624: LD_EXP 145
48628: IFFALSE 48754
// begin list := PrepareArray ( factoryWaypoints ) ;
48630: LD_ADDR_VAR 0 3
48634: PUSH
48635: LD_EXP 145
48639: PPUSH
48640: CALL 95076 0 1
48644: ST_TO_ADDR
// for i := 1 to list do
48645: LD_ADDR_VAR 0 2
48649: PUSH
48650: DOUBLE
48651: LD_INT 1
48653: DEC
48654: ST_TO_ADDR
48655: LD_VAR 0 3
48659: PUSH
48660: FOR_TO
48661: IFFALSE 48752
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
48663: LD_STRING setFactoryWaypointXY(
48665: PUSH
48666: LD_VAR 0 3
48670: PUSH
48671: LD_VAR 0 2
48675: ARRAY
48676: PUSH
48677: LD_INT 1
48679: ARRAY
48680: STR
48681: PUSH
48682: LD_STRING ,
48684: STR
48685: PUSH
48686: LD_VAR 0 3
48690: PUSH
48691: LD_VAR 0 2
48695: ARRAY
48696: PUSH
48697: LD_INT 2
48699: ARRAY
48700: STR
48701: PUSH
48702: LD_STRING ,
48704: STR
48705: PUSH
48706: LD_VAR 0 3
48710: PUSH
48711: LD_VAR 0 2
48715: ARRAY
48716: PUSH
48717: LD_INT 3
48719: ARRAY
48720: STR
48721: PUSH
48722: LD_STRING ,
48724: STR
48725: PUSH
48726: LD_VAR 0 3
48730: PUSH
48731: LD_VAR 0 2
48735: ARRAY
48736: PUSH
48737: LD_INT 4
48739: ARRAY
48740: STR
48741: PUSH
48742: LD_STRING )
48744: STR
48745: PPUSH
48746: CALL_OW 559
48750: GO 48660
48752: POP
48753: POP
// end ; end ;
48754: LD_VAR 0 1
48758: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
48759: LD_INT 0
48761: PPUSH
// if HexInfo ( x , y ) = warehouse then
48762: LD_VAR 0 2
48766: PPUSH
48767: LD_VAR 0 3
48771: PPUSH
48772: CALL_OW 428
48776: PUSH
48777: LD_VAR 0 1
48781: EQUAL
48782: IFFALSE 48809
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
48784: LD_ADDR_EXP 146
48788: PUSH
48789: LD_EXP 146
48793: PPUSH
48794: LD_VAR 0 1
48798: PPUSH
48799: LD_INT 0
48801: PPUSH
48802: CALL_OW 1
48806: ST_TO_ADDR
48807: GO 48860
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
48809: LD_ADDR_EXP 146
48813: PUSH
48814: LD_EXP 146
48818: PPUSH
48819: LD_VAR 0 1
48823: PPUSH
48824: LD_VAR 0 1
48828: PPUSH
48829: CALL_OW 255
48833: PUSH
48834: LD_VAR 0 1
48838: PUSH
48839: LD_VAR 0 2
48843: PUSH
48844: LD_VAR 0 3
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: PPUSH
48855: CALL_OW 1
48859: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
48860: CALL 48869 0 0
// end ;
48864: LD_VAR 0 4
48868: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
48869: LD_INT 0
48871: PPUSH
48872: PPUSH
48873: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
48874: LD_STRING resetWarehouseGatheringPoints();
48876: PPUSH
48877: CALL_OW 559
// if warehouseGatheringPoints then
48881: LD_EXP 146
48885: IFFALSE 49011
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
48887: LD_ADDR_VAR 0 3
48891: PUSH
48892: LD_EXP 146
48896: PPUSH
48897: CALL 95076 0 1
48901: ST_TO_ADDR
// for i := 1 to list do
48902: LD_ADDR_VAR 0 2
48906: PUSH
48907: DOUBLE
48908: LD_INT 1
48910: DEC
48911: ST_TO_ADDR
48912: LD_VAR 0 3
48916: PUSH
48917: FOR_TO
48918: IFFALSE 49009
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
48920: LD_STRING setWarehouseGatheringPointXY(
48922: PUSH
48923: LD_VAR 0 3
48927: PUSH
48928: LD_VAR 0 2
48932: ARRAY
48933: PUSH
48934: LD_INT 1
48936: ARRAY
48937: STR
48938: PUSH
48939: LD_STRING ,
48941: STR
48942: PUSH
48943: LD_VAR 0 3
48947: PUSH
48948: LD_VAR 0 2
48952: ARRAY
48953: PUSH
48954: LD_INT 2
48956: ARRAY
48957: STR
48958: PUSH
48959: LD_STRING ,
48961: STR
48962: PUSH
48963: LD_VAR 0 3
48967: PUSH
48968: LD_VAR 0 2
48972: ARRAY
48973: PUSH
48974: LD_INT 3
48976: ARRAY
48977: STR
48978: PUSH
48979: LD_STRING ,
48981: STR
48982: PUSH
48983: LD_VAR 0 3
48987: PUSH
48988: LD_VAR 0 2
48992: ARRAY
48993: PUSH
48994: LD_INT 4
48996: ARRAY
48997: STR
48998: PUSH
48999: LD_STRING )
49001: STR
49002: PPUSH
49003: CALL_OW 559
49007: GO 48917
49009: POP
49010: POP
// end ; end ;
49011: LD_VAR 0 1
49015: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
49016: LD_EXP 146
49020: IFFALSE 49705
49022: GO 49024
49024: DISABLE
49025: LD_INT 0
49027: PPUSH
49028: PPUSH
49029: PPUSH
49030: PPUSH
49031: PPUSH
49032: PPUSH
49033: PPUSH
49034: PPUSH
49035: PPUSH
// begin enable ;
49036: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
49037: LD_ADDR_VAR 0 3
49041: PUSH
49042: LD_EXP 146
49046: PPUSH
49047: CALL 95076 0 1
49051: ST_TO_ADDR
// if not list then
49052: LD_VAR 0 3
49056: NOT
49057: IFFALSE 49061
// exit ;
49059: GO 49705
// for i := 1 to list do
49061: LD_ADDR_VAR 0 1
49065: PUSH
49066: DOUBLE
49067: LD_INT 1
49069: DEC
49070: ST_TO_ADDR
49071: LD_VAR 0 3
49075: PUSH
49076: FOR_TO
49077: IFFALSE 49703
// begin depot := list [ i ] [ 2 ] ;
49079: LD_ADDR_VAR 0 8
49083: PUSH
49084: LD_VAR 0 3
49088: PUSH
49089: LD_VAR 0 1
49093: ARRAY
49094: PUSH
49095: LD_INT 2
49097: ARRAY
49098: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
49099: LD_ADDR_VAR 0 5
49103: PUSH
49104: LD_VAR 0 3
49108: PUSH
49109: LD_VAR 0 1
49113: ARRAY
49114: PUSH
49115: LD_INT 1
49117: ARRAY
49118: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
49119: LD_VAR 0 8
49123: PPUSH
49124: CALL_OW 301
49128: PUSH
49129: LD_VAR 0 5
49133: PUSH
49134: LD_VAR 0 8
49138: PPUSH
49139: CALL_OW 255
49143: NONEQUAL
49144: OR
49145: IFFALSE 49174
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
49147: LD_ADDR_EXP 146
49151: PUSH
49152: LD_EXP 146
49156: PPUSH
49157: LD_VAR 0 8
49161: PPUSH
49162: LD_INT 0
49164: PPUSH
49165: CALL_OW 1
49169: ST_TO_ADDR
// exit ;
49170: POP
49171: POP
49172: GO 49705
// end ; x := list [ i ] [ 3 ] ;
49174: LD_ADDR_VAR 0 6
49178: PUSH
49179: LD_VAR 0 3
49183: PUSH
49184: LD_VAR 0 1
49188: ARRAY
49189: PUSH
49190: LD_INT 3
49192: ARRAY
49193: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
49194: LD_ADDR_VAR 0 7
49198: PUSH
49199: LD_VAR 0 3
49203: PUSH
49204: LD_VAR 0 1
49208: ARRAY
49209: PUSH
49210: LD_INT 4
49212: ARRAY
49213: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
49214: LD_ADDR_VAR 0 9
49218: PUSH
49219: LD_VAR 0 6
49223: PPUSH
49224: LD_VAR 0 7
49228: PPUSH
49229: LD_INT 16
49231: PPUSH
49232: CALL 93664 0 3
49236: ST_TO_ADDR
// if not cratesNearbyPoint then
49237: LD_VAR 0 9
49241: NOT
49242: IFFALSE 49248
// exit ;
49244: POP
49245: POP
49246: GO 49705
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
49248: LD_ADDR_VAR 0 4
49252: PUSH
49253: LD_INT 22
49255: PUSH
49256: LD_VAR 0 5
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 3
49267: PUSH
49268: LD_INT 60
49270: PUSH
49271: EMPTY
49272: LIST
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 91
49280: PUSH
49281: LD_VAR 0 8
49285: PUSH
49286: LD_INT 6
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 2
49296: PUSH
49297: LD_INT 25
49299: PUSH
49300: LD_INT 2
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 25
49309: PUSH
49310: LD_INT 16
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: LIST
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: PPUSH
49328: CALL_OW 69
49332: PUSH
49333: LD_VAR 0 8
49337: PPUSH
49338: CALL_OW 313
49342: PPUSH
49343: LD_INT 3
49345: PUSH
49346: LD_INT 60
49348: PUSH
49349: EMPTY
49350: LIST
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 2
49358: PUSH
49359: LD_INT 25
49361: PUSH
49362: LD_INT 2
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 25
49371: PUSH
49372: LD_INT 16
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: LIST
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PPUSH
49388: CALL_OW 72
49392: UNION
49393: ST_TO_ADDR
// if tmp then
49394: LD_VAR 0 4
49398: IFFALSE 49478
// begin tmp := ShrinkArray ( tmp , 3 ) ;
49400: LD_ADDR_VAR 0 4
49404: PUSH
49405: LD_VAR 0 4
49409: PPUSH
49410: LD_INT 3
49412: PPUSH
49413: CALL 91633 0 2
49417: ST_TO_ADDR
// for j in tmp do
49418: LD_ADDR_VAR 0 2
49422: PUSH
49423: LD_VAR 0 4
49427: PUSH
49428: FOR_IN
49429: IFFALSE 49472
// begin if IsInUnit ( j ) then
49431: LD_VAR 0 2
49435: PPUSH
49436: CALL_OW 310
49440: IFFALSE 49451
// ComExit ( j ) ;
49442: LD_VAR 0 2
49446: PPUSH
49447: CALL 91716 0 1
// AddComCollect ( j , x , y ) ;
49451: LD_VAR 0 2
49455: PPUSH
49456: LD_VAR 0 6
49460: PPUSH
49461: LD_VAR 0 7
49465: PPUSH
49466: CALL_OW 177
// end ;
49470: GO 49428
49472: POP
49473: POP
// exit ;
49474: POP
49475: POP
49476: GO 49705
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
49478: LD_ADDR_VAR 0 4
49482: PUSH
49483: LD_INT 22
49485: PUSH
49486: LD_VAR 0 5
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 91
49497: PUSH
49498: LD_VAR 0 8
49502: PUSH
49503: LD_INT 8
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 2
49513: PUSH
49514: LD_INT 34
49516: PUSH
49517: LD_INT 12
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 34
49526: PUSH
49527: LD_INT 51
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 34
49536: PUSH
49537: LD_INT 32
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 34
49546: PUSH
49547: LD_INT 89
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: LIST
49565: PPUSH
49566: CALL_OW 69
49570: ST_TO_ADDR
// if tmp then
49571: LD_VAR 0 4
49575: IFFALSE 49701
// begin for j in tmp do
49577: LD_ADDR_VAR 0 2
49581: PUSH
49582: LD_VAR 0 4
49586: PUSH
49587: FOR_IN
49588: IFFALSE 49699
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
49590: LD_VAR 0 2
49594: PPUSH
49595: CALL_OW 262
49599: PUSH
49600: LD_INT 3
49602: EQUAL
49603: PUSH
49604: LD_VAR 0 2
49608: PPUSH
49609: CALL_OW 261
49613: PUSH
49614: LD_INT 20
49616: GREATER
49617: OR
49618: PUSH
49619: LD_VAR 0 2
49623: PPUSH
49624: CALL_OW 314
49628: NOT
49629: AND
49630: PUSH
49631: LD_VAR 0 2
49635: PPUSH
49636: CALL_OW 263
49640: PUSH
49641: LD_INT 1
49643: NONEQUAL
49644: PUSH
49645: LD_VAR 0 2
49649: PPUSH
49650: CALL_OW 311
49654: OR
49655: AND
49656: IFFALSE 49697
// begin ComCollect ( j , x , y ) ;
49658: LD_VAR 0 2
49662: PPUSH
49663: LD_VAR 0 6
49667: PPUSH
49668: LD_VAR 0 7
49672: PPUSH
49673: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
49677: LD_VAR 0 2
49681: PPUSH
49682: LD_VAR 0 8
49686: PPUSH
49687: CALL_OW 172
// exit ;
49691: POP
49692: POP
49693: POP
49694: POP
49695: GO 49705
// end ;
49697: GO 49587
49699: POP
49700: POP
// end ; end ;
49701: GO 49076
49703: POP
49704: POP
// end ; end_of_file
49705: PPOPN 9
49707: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
49708: LD_INT 0
49710: PPUSH
49711: PPUSH
49712: PPUSH
49713: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
49714: LD_VAR 0 1
49718: PPUSH
49719: CALL_OW 264
49723: PUSH
49724: LD_INT 91
49726: EQUAL
49727: IFFALSE 49799
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
49729: LD_INT 68
49731: PPUSH
49732: LD_VAR 0 1
49736: PPUSH
49737: CALL_OW 255
49741: PPUSH
49742: CALL_OW 321
49746: PUSH
49747: LD_INT 2
49749: EQUAL
49750: IFFALSE 49762
// eff := 70 else
49752: LD_ADDR_VAR 0 4
49756: PUSH
49757: LD_INT 70
49759: ST_TO_ADDR
49760: GO 49770
// eff := 30 ;
49762: LD_ADDR_VAR 0 4
49766: PUSH
49767: LD_INT 30
49769: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
49770: LD_VAR 0 1
49774: PPUSH
49775: CALL_OW 250
49779: PPUSH
49780: LD_VAR 0 1
49784: PPUSH
49785: CALL_OW 251
49789: PPUSH
49790: LD_VAR 0 4
49794: PPUSH
49795: CALL_OW 495
// end ; end ;
49799: LD_VAR 0 2
49803: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
49804: LD_INT 0
49806: PPUSH
// end ;
49807: LD_VAR 0 4
49811: RET
// export function SOS_Command ( cmd ) ; begin
49812: LD_INT 0
49814: PPUSH
// end ;
49815: LD_VAR 0 2
49819: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
49820: LD_INT 0
49822: PPUSH
// end ;
49823: LD_VAR 0 6
49827: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
49828: LD_INT 0
49830: PPUSH
49831: PPUSH
// if not vehicle or not factory then
49832: LD_VAR 0 1
49836: NOT
49837: PUSH
49838: LD_VAR 0 2
49842: NOT
49843: OR
49844: IFFALSE 49848
// exit ;
49846: GO 50079
// if factoryWaypoints >= factory then
49848: LD_EXP 145
49852: PUSH
49853: LD_VAR 0 2
49857: GREATEREQUAL
49858: IFFALSE 50079
// if factoryWaypoints [ factory ] then
49860: LD_EXP 145
49864: PUSH
49865: LD_VAR 0 2
49869: ARRAY
49870: IFFALSE 50079
// begin if GetControl ( vehicle ) = control_manual then
49872: LD_VAR 0 1
49876: PPUSH
49877: CALL_OW 263
49881: PUSH
49882: LD_INT 1
49884: EQUAL
49885: IFFALSE 49966
// begin driver := IsDrivenBy ( vehicle ) ;
49887: LD_ADDR_VAR 0 4
49891: PUSH
49892: LD_VAR 0 1
49896: PPUSH
49897: CALL_OW 311
49901: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
49902: LD_VAR 0 4
49906: PPUSH
49907: LD_EXP 145
49911: PUSH
49912: LD_VAR 0 2
49916: ARRAY
49917: PUSH
49918: LD_INT 3
49920: ARRAY
49921: PPUSH
49922: LD_EXP 145
49926: PUSH
49927: LD_VAR 0 2
49931: ARRAY
49932: PUSH
49933: LD_INT 4
49935: ARRAY
49936: PPUSH
49937: CALL_OW 171
// AddComExitVehicle ( driver ) ;
49941: LD_VAR 0 4
49945: PPUSH
49946: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
49950: LD_VAR 0 4
49954: PPUSH
49955: LD_VAR 0 2
49959: PPUSH
49960: CALL_OW 180
// end else
49964: GO 50079
// if GetControl ( vehicle ) = control_remote then
49966: LD_VAR 0 1
49970: PPUSH
49971: CALL_OW 263
49975: PUSH
49976: LD_INT 2
49978: EQUAL
49979: IFFALSE 50040
// begin wait ( 0 0$2 ) ;
49981: LD_INT 70
49983: PPUSH
49984: CALL_OW 67
// if Connect ( vehicle ) then
49988: LD_VAR 0 1
49992: PPUSH
49993: CALL 61937 0 1
49997: IFFALSE 50038
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
49999: LD_VAR 0 1
50003: PPUSH
50004: LD_EXP 145
50008: PUSH
50009: LD_VAR 0 2
50013: ARRAY
50014: PUSH
50015: LD_INT 3
50017: ARRAY
50018: PPUSH
50019: LD_EXP 145
50023: PUSH
50024: LD_VAR 0 2
50028: ARRAY
50029: PUSH
50030: LD_INT 4
50032: ARRAY
50033: PPUSH
50034: CALL_OW 171
// end else
50038: GO 50079
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
50040: LD_VAR 0 1
50044: PPUSH
50045: LD_EXP 145
50049: PUSH
50050: LD_VAR 0 2
50054: ARRAY
50055: PUSH
50056: LD_INT 3
50058: ARRAY
50059: PPUSH
50060: LD_EXP 145
50064: PUSH
50065: LD_VAR 0 2
50069: ARRAY
50070: PUSH
50071: LD_INT 4
50073: ARRAY
50074: PPUSH
50075: CALL_OW 171
// end ; end ;
50079: LD_VAR 0 3
50083: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
50084: LD_INT 0
50086: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
50087: LD_VAR 0 1
50091: PUSH
50092: LD_INT 250
50094: EQUAL
50095: PUSH
50096: LD_VAR 0 2
50100: PPUSH
50101: CALL_OW 264
50105: PUSH
50106: LD_INT 81
50108: EQUAL
50109: AND
50110: IFFALSE 50131
// MinerPlaceMine ( unit , x , y ) ;
50112: LD_VAR 0 2
50116: PPUSH
50117: LD_VAR 0 4
50121: PPUSH
50122: LD_VAR 0 5
50126: PPUSH
50127: CALL 52516 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
50131: LD_VAR 0 1
50135: PUSH
50136: LD_INT 251
50138: EQUAL
50139: PUSH
50140: LD_VAR 0 2
50144: PPUSH
50145: CALL_OW 264
50149: PUSH
50150: LD_INT 81
50152: EQUAL
50153: AND
50154: IFFALSE 50175
// MinerDetonateMine ( unit , x , y ) ;
50156: LD_VAR 0 2
50160: PPUSH
50161: LD_VAR 0 4
50165: PPUSH
50166: LD_VAR 0 5
50170: PPUSH
50171: CALL 52791 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
50175: LD_VAR 0 1
50179: PUSH
50180: LD_INT 252
50182: EQUAL
50183: PUSH
50184: LD_VAR 0 2
50188: PPUSH
50189: CALL_OW 264
50193: PUSH
50194: LD_INT 81
50196: EQUAL
50197: AND
50198: IFFALSE 50219
// MinerCreateMinefield ( unit , x , y ) ;
50200: LD_VAR 0 2
50204: PPUSH
50205: LD_VAR 0 4
50209: PPUSH
50210: LD_VAR 0 5
50214: PPUSH
50215: CALL 53208 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
50219: LD_VAR 0 1
50223: PUSH
50224: LD_INT 253
50226: EQUAL
50227: PUSH
50228: LD_VAR 0 2
50232: PPUSH
50233: CALL_OW 257
50237: PUSH
50238: LD_INT 5
50240: EQUAL
50241: AND
50242: IFFALSE 50263
// ComBinocular ( unit , x , y ) ;
50244: LD_VAR 0 2
50248: PPUSH
50249: LD_VAR 0 4
50253: PPUSH
50254: LD_VAR 0 5
50258: PPUSH
50259: CALL 53577 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
50263: LD_VAR 0 1
50267: PUSH
50268: LD_INT 254
50270: EQUAL
50271: PUSH
50272: LD_VAR 0 2
50276: PPUSH
50277: CALL_OW 264
50281: PUSH
50282: LD_INT 99
50284: EQUAL
50285: AND
50286: PUSH
50287: LD_VAR 0 3
50291: PPUSH
50292: CALL_OW 263
50296: PUSH
50297: LD_INT 3
50299: EQUAL
50300: AND
50301: IFFALSE 50317
// HackDestroyVehicle ( unit , selectedUnit ) ;
50303: LD_VAR 0 2
50307: PPUSH
50308: LD_VAR 0 3
50312: PPUSH
50313: CALL 51880 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
50317: LD_VAR 0 1
50321: PUSH
50322: LD_INT 255
50324: EQUAL
50325: PUSH
50326: LD_VAR 0 2
50330: PPUSH
50331: CALL_OW 264
50335: PUSH
50336: LD_INT 14
50338: PUSH
50339: LD_INT 53
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: IN
50346: AND
50347: PUSH
50348: LD_VAR 0 4
50352: PPUSH
50353: LD_VAR 0 5
50357: PPUSH
50358: CALL_OW 488
50362: AND
50363: IFFALSE 50387
// CutTreeXYR ( unit , x , y , 12 ) ;
50365: LD_VAR 0 2
50369: PPUSH
50370: LD_VAR 0 4
50374: PPUSH
50375: LD_VAR 0 5
50379: PPUSH
50380: LD_INT 12
50382: PPUSH
50383: CALL 50450 0 4
// if cmd = 256 then
50387: LD_VAR 0 1
50391: PUSH
50392: LD_INT 256
50394: EQUAL
50395: IFFALSE 50416
// SetFactoryWaypoint ( unit , x , y ) ;
50397: LD_VAR 0 2
50401: PPUSH
50402: LD_VAR 0 4
50406: PPUSH
50407: LD_VAR 0 5
50411: PPUSH
50412: CALL 48397 0 3
// if cmd = 257 then
50416: LD_VAR 0 1
50420: PUSH
50421: LD_INT 257
50423: EQUAL
50424: IFFALSE 50445
// SetWarehouseGatheringPoint ( unit , x , y ) ;
50426: LD_VAR 0 2
50430: PPUSH
50431: LD_VAR 0 4
50435: PPUSH
50436: LD_VAR 0 5
50440: PPUSH
50441: CALL 48759 0 3
// end ;
50445: LD_VAR 0 6
50449: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
50450: LD_INT 0
50452: PPUSH
50453: PPUSH
50454: PPUSH
50455: PPUSH
50456: PPUSH
50457: PPUSH
50458: PPUSH
50459: PPUSH
50460: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
50461: LD_VAR 0 1
50465: NOT
50466: PUSH
50467: LD_VAR 0 2
50471: PPUSH
50472: LD_VAR 0 3
50476: PPUSH
50477: CALL_OW 488
50481: NOT
50482: OR
50483: PUSH
50484: LD_VAR 0 4
50488: NOT
50489: OR
50490: IFFALSE 50494
// exit ;
50492: GO 50834
// list := [ ] ;
50494: LD_ADDR_VAR 0 13
50498: PUSH
50499: EMPTY
50500: ST_TO_ADDR
// if x - r < 0 then
50501: LD_VAR 0 2
50505: PUSH
50506: LD_VAR 0 4
50510: MINUS
50511: PUSH
50512: LD_INT 0
50514: LESS
50515: IFFALSE 50527
// min_x := 0 else
50517: LD_ADDR_VAR 0 7
50521: PUSH
50522: LD_INT 0
50524: ST_TO_ADDR
50525: GO 50543
// min_x := x - r ;
50527: LD_ADDR_VAR 0 7
50531: PUSH
50532: LD_VAR 0 2
50536: PUSH
50537: LD_VAR 0 4
50541: MINUS
50542: ST_TO_ADDR
// if y - r < 0 then
50543: LD_VAR 0 3
50547: PUSH
50548: LD_VAR 0 4
50552: MINUS
50553: PUSH
50554: LD_INT 0
50556: LESS
50557: IFFALSE 50569
// min_y := 0 else
50559: LD_ADDR_VAR 0 8
50563: PUSH
50564: LD_INT 0
50566: ST_TO_ADDR
50567: GO 50585
// min_y := y - r ;
50569: LD_ADDR_VAR 0 8
50573: PUSH
50574: LD_VAR 0 3
50578: PUSH
50579: LD_VAR 0 4
50583: MINUS
50584: ST_TO_ADDR
// max_x := x + r ;
50585: LD_ADDR_VAR 0 9
50589: PUSH
50590: LD_VAR 0 2
50594: PUSH
50595: LD_VAR 0 4
50599: PLUS
50600: ST_TO_ADDR
// max_y := y + r ;
50601: LD_ADDR_VAR 0 10
50605: PUSH
50606: LD_VAR 0 3
50610: PUSH
50611: LD_VAR 0 4
50615: PLUS
50616: ST_TO_ADDR
// for _x = min_x to max_x do
50617: LD_ADDR_VAR 0 11
50621: PUSH
50622: DOUBLE
50623: LD_VAR 0 7
50627: DEC
50628: ST_TO_ADDR
50629: LD_VAR 0 9
50633: PUSH
50634: FOR_TO
50635: IFFALSE 50752
// for _y = min_y to max_y do
50637: LD_ADDR_VAR 0 12
50641: PUSH
50642: DOUBLE
50643: LD_VAR 0 8
50647: DEC
50648: ST_TO_ADDR
50649: LD_VAR 0 10
50653: PUSH
50654: FOR_TO
50655: IFFALSE 50748
// begin if not ValidHex ( _x , _y ) then
50657: LD_VAR 0 11
50661: PPUSH
50662: LD_VAR 0 12
50666: PPUSH
50667: CALL_OW 488
50671: NOT
50672: IFFALSE 50676
// continue ;
50674: GO 50654
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
50676: LD_VAR 0 11
50680: PPUSH
50681: LD_VAR 0 12
50685: PPUSH
50686: CALL_OW 351
50690: PUSH
50691: LD_VAR 0 11
50695: PPUSH
50696: LD_VAR 0 12
50700: PPUSH
50701: CALL_OW 554
50705: AND
50706: IFFALSE 50746
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
50708: LD_ADDR_VAR 0 13
50712: PUSH
50713: LD_VAR 0 13
50717: PPUSH
50718: LD_VAR 0 13
50722: PUSH
50723: LD_INT 1
50725: PLUS
50726: PPUSH
50727: LD_VAR 0 11
50731: PUSH
50732: LD_VAR 0 12
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PPUSH
50741: CALL_OW 2
50745: ST_TO_ADDR
// end ;
50746: GO 50654
50748: POP
50749: POP
50750: GO 50634
50752: POP
50753: POP
// if not list then
50754: LD_VAR 0 13
50758: NOT
50759: IFFALSE 50763
// exit ;
50761: GO 50834
// for i in list do
50763: LD_ADDR_VAR 0 6
50767: PUSH
50768: LD_VAR 0 13
50772: PUSH
50773: FOR_IN
50774: IFFALSE 50832
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
50776: LD_VAR 0 1
50780: PPUSH
50781: LD_STRING M
50783: PUSH
50784: LD_VAR 0 6
50788: PUSH
50789: LD_INT 1
50791: ARRAY
50792: PUSH
50793: LD_VAR 0 6
50797: PUSH
50798: LD_INT 2
50800: ARRAY
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: PUSH
50823: EMPTY
50824: LIST
50825: PPUSH
50826: CALL_OW 447
50830: GO 50773
50832: POP
50833: POP
// end ;
50834: LD_VAR 0 5
50838: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
50839: LD_EXP 148
50843: NOT
50844: IFFALSE 50894
50846: GO 50848
50848: DISABLE
// begin initHack := true ;
50849: LD_ADDR_EXP 148
50853: PUSH
50854: LD_INT 1
50856: ST_TO_ADDR
// hackTanks := [ ] ;
50857: LD_ADDR_EXP 149
50861: PUSH
50862: EMPTY
50863: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
50864: LD_ADDR_EXP 150
50868: PUSH
50869: EMPTY
50870: ST_TO_ADDR
// hackLimit := 3 ;
50871: LD_ADDR_EXP 151
50875: PUSH
50876: LD_INT 3
50878: ST_TO_ADDR
// hackDist := 12 ;
50879: LD_ADDR_EXP 152
50883: PUSH
50884: LD_INT 12
50886: ST_TO_ADDR
// hackCounter := [ ] ;
50887: LD_ADDR_EXP 153
50891: PUSH
50892: EMPTY
50893: ST_TO_ADDR
// end ;
50894: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
50895: LD_EXP 148
50899: PUSH
50900: LD_INT 34
50902: PUSH
50903: LD_INT 99
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PPUSH
50910: CALL_OW 69
50914: AND
50915: IFFALSE 51168
50917: GO 50919
50919: DISABLE
50920: LD_INT 0
50922: PPUSH
50923: PPUSH
// begin enable ;
50924: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
50925: LD_ADDR_VAR 0 1
50929: PUSH
50930: LD_INT 34
50932: PUSH
50933: LD_INT 99
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PPUSH
50940: CALL_OW 69
50944: PUSH
50945: FOR_IN
50946: IFFALSE 51166
// begin if not i in hackTanks then
50948: LD_VAR 0 1
50952: PUSH
50953: LD_EXP 149
50957: IN
50958: NOT
50959: IFFALSE 51042
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
50961: LD_ADDR_EXP 149
50965: PUSH
50966: LD_EXP 149
50970: PPUSH
50971: LD_EXP 149
50975: PUSH
50976: LD_INT 1
50978: PLUS
50979: PPUSH
50980: LD_VAR 0 1
50984: PPUSH
50985: CALL_OW 1
50989: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
50990: LD_ADDR_EXP 150
50994: PUSH
50995: LD_EXP 150
50999: PPUSH
51000: LD_EXP 150
51004: PUSH
51005: LD_INT 1
51007: PLUS
51008: PPUSH
51009: EMPTY
51010: PPUSH
51011: CALL_OW 1
51015: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
51016: LD_ADDR_EXP 153
51020: PUSH
51021: LD_EXP 153
51025: PPUSH
51026: LD_EXP 153
51030: PUSH
51031: LD_INT 1
51033: PLUS
51034: PPUSH
51035: EMPTY
51036: PPUSH
51037: CALL_OW 1
51041: ST_TO_ADDR
// end ; if not IsOk ( i ) then
51042: LD_VAR 0 1
51046: PPUSH
51047: CALL_OW 302
51051: NOT
51052: IFFALSE 51065
// begin HackUnlinkAll ( i ) ;
51054: LD_VAR 0 1
51058: PPUSH
51059: CALL 51171 0 1
// continue ;
51063: GO 50945
// end ; HackCheckCapturedStatus ( i ) ;
51065: LD_VAR 0 1
51069: PPUSH
51070: CALL 51614 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
51074: LD_ADDR_VAR 0 2
51078: PUSH
51079: LD_INT 81
51081: PUSH
51082: LD_VAR 0 1
51086: PPUSH
51087: CALL_OW 255
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 33
51098: PUSH
51099: LD_INT 3
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 91
51108: PUSH
51109: LD_VAR 0 1
51113: PUSH
51114: LD_EXP 152
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 50
51126: PUSH
51127: EMPTY
51128: LIST
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: PPUSH
51136: CALL_OW 69
51140: ST_TO_ADDR
// if not tmp then
51141: LD_VAR 0 2
51145: NOT
51146: IFFALSE 51150
// continue ;
51148: GO 50945
// HackLink ( i , tmp ) ;
51150: LD_VAR 0 1
51154: PPUSH
51155: LD_VAR 0 2
51159: PPUSH
51160: CALL 51307 0 2
// end ;
51164: GO 50945
51166: POP
51167: POP
// end ;
51168: PPOPN 2
51170: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
51171: LD_INT 0
51173: PPUSH
51174: PPUSH
51175: PPUSH
// if not hack in hackTanks then
51176: LD_VAR 0 1
51180: PUSH
51181: LD_EXP 149
51185: IN
51186: NOT
51187: IFFALSE 51191
// exit ;
51189: GO 51302
// index := GetElementIndex ( hackTanks , hack ) ;
51191: LD_ADDR_VAR 0 4
51195: PUSH
51196: LD_EXP 149
51200: PPUSH
51201: LD_VAR 0 1
51205: PPUSH
51206: CALL 58744 0 2
51210: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
51211: LD_EXP 150
51215: PUSH
51216: LD_VAR 0 4
51220: ARRAY
51221: IFFALSE 51302
// begin for i in hackTanksCaptured [ index ] do
51223: LD_ADDR_VAR 0 3
51227: PUSH
51228: LD_EXP 150
51232: PUSH
51233: LD_VAR 0 4
51237: ARRAY
51238: PUSH
51239: FOR_IN
51240: IFFALSE 51266
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
51242: LD_VAR 0 3
51246: PUSH
51247: LD_INT 1
51249: ARRAY
51250: PPUSH
51251: LD_VAR 0 3
51255: PUSH
51256: LD_INT 2
51258: ARRAY
51259: PPUSH
51260: CALL_OW 235
51264: GO 51239
51266: POP
51267: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
51268: LD_ADDR_EXP 150
51272: PUSH
51273: LD_EXP 150
51277: PPUSH
51278: LD_VAR 0 4
51282: PPUSH
51283: EMPTY
51284: PPUSH
51285: CALL_OW 1
51289: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
51290: LD_VAR 0 1
51294: PPUSH
51295: LD_INT 0
51297: PPUSH
51298: CALL_OW 505
// end ; end ;
51302: LD_VAR 0 2
51306: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
51307: LD_INT 0
51309: PPUSH
51310: PPUSH
51311: PPUSH
// if not hack in hackTanks or not vehicles then
51312: LD_VAR 0 1
51316: PUSH
51317: LD_EXP 149
51321: IN
51322: NOT
51323: PUSH
51324: LD_VAR 0 2
51328: NOT
51329: OR
51330: IFFALSE 51334
// exit ;
51332: GO 51609
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
51334: LD_ADDR_VAR 0 2
51338: PUSH
51339: LD_VAR 0 1
51343: PPUSH
51344: LD_VAR 0 2
51348: PPUSH
51349: LD_INT 1
51351: PPUSH
51352: LD_INT 1
51354: PPUSH
51355: CALL 59394 0 4
51359: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
51360: LD_ADDR_VAR 0 5
51364: PUSH
51365: LD_EXP 149
51369: PPUSH
51370: LD_VAR 0 1
51374: PPUSH
51375: CALL 58744 0 2
51379: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
51380: LD_EXP 150
51384: PUSH
51385: LD_VAR 0 5
51389: ARRAY
51390: PUSH
51391: LD_EXP 151
51395: LESS
51396: IFFALSE 51585
// begin for i := 1 to vehicles do
51398: LD_ADDR_VAR 0 4
51402: PUSH
51403: DOUBLE
51404: LD_INT 1
51406: DEC
51407: ST_TO_ADDR
51408: LD_VAR 0 2
51412: PUSH
51413: FOR_TO
51414: IFFALSE 51583
// begin if hackTanksCaptured [ index ] = hackLimit then
51416: LD_EXP 150
51420: PUSH
51421: LD_VAR 0 5
51425: ARRAY
51426: PUSH
51427: LD_EXP 151
51431: EQUAL
51432: IFFALSE 51436
// break ;
51434: GO 51583
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
51436: LD_ADDR_EXP 153
51440: PUSH
51441: LD_EXP 153
51445: PPUSH
51446: LD_VAR 0 5
51450: PPUSH
51451: LD_EXP 153
51455: PUSH
51456: LD_VAR 0 5
51460: ARRAY
51461: PUSH
51462: LD_INT 1
51464: PLUS
51465: PPUSH
51466: CALL_OW 1
51470: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
51471: LD_ADDR_EXP 150
51475: PUSH
51476: LD_EXP 150
51480: PPUSH
51481: LD_VAR 0 5
51485: PUSH
51486: LD_EXP 150
51490: PUSH
51491: LD_VAR 0 5
51495: ARRAY
51496: PUSH
51497: LD_INT 1
51499: PLUS
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PPUSH
51505: LD_VAR 0 2
51509: PUSH
51510: LD_VAR 0 4
51514: ARRAY
51515: PUSH
51516: LD_VAR 0 2
51520: PUSH
51521: LD_VAR 0 4
51525: ARRAY
51526: PPUSH
51527: CALL_OW 255
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PPUSH
51536: CALL 58959 0 3
51540: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
51541: LD_VAR 0 2
51545: PUSH
51546: LD_VAR 0 4
51550: ARRAY
51551: PPUSH
51552: LD_VAR 0 1
51556: PPUSH
51557: CALL_OW 255
51561: PPUSH
51562: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
51566: LD_VAR 0 2
51570: PUSH
51571: LD_VAR 0 4
51575: ARRAY
51576: PPUSH
51577: CALL_OW 141
// end ;
51581: GO 51413
51583: POP
51584: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
51585: LD_VAR 0 1
51589: PPUSH
51590: LD_EXP 150
51594: PUSH
51595: LD_VAR 0 5
51599: ARRAY
51600: PUSH
51601: LD_INT 0
51603: PLUS
51604: PPUSH
51605: CALL_OW 505
// end ;
51609: LD_VAR 0 3
51613: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
51614: LD_INT 0
51616: PPUSH
51617: PPUSH
51618: PPUSH
51619: PPUSH
// if not hack in hackTanks then
51620: LD_VAR 0 1
51624: PUSH
51625: LD_EXP 149
51629: IN
51630: NOT
51631: IFFALSE 51635
// exit ;
51633: GO 51875
// index := GetElementIndex ( hackTanks , hack ) ;
51635: LD_ADDR_VAR 0 4
51639: PUSH
51640: LD_EXP 149
51644: PPUSH
51645: LD_VAR 0 1
51649: PPUSH
51650: CALL 58744 0 2
51654: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
51655: LD_ADDR_VAR 0 3
51659: PUSH
51660: DOUBLE
51661: LD_EXP 150
51665: PUSH
51666: LD_VAR 0 4
51670: ARRAY
51671: INC
51672: ST_TO_ADDR
51673: LD_INT 1
51675: PUSH
51676: FOR_DOWNTO
51677: IFFALSE 51849
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
51679: LD_ADDR_VAR 0 5
51683: PUSH
51684: LD_EXP 150
51688: PUSH
51689: LD_VAR 0 4
51693: ARRAY
51694: PUSH
51695: LD_VAR 0 3
51699: ARRAY
51700: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
51701: LD_VAR 0 5
51705: PUSH
51706: LD_INT 1
51708: ARRAY
51709: PPUSH
51710: CALL_OW 302
51714: NOT
51715: PUSH
51716: LD_VAR 0 5
51720: PUSH
51721: LD_INT 1
51723: ARRAY
51724: PPUSH
51725: CALL_OW 255
51729: PUSH
51730: LD_VAR 0 1
51734: PPUSH
51735: CALL_OW 255
51739: NONEQUAL
51740: OR
51741: IFFALSE 51847
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
51743: LD_VAR 0 5
51747: PUSH
51748: LD_INT 1
51750: ARRAY
51751: PPUSH
51752: CALL_OW 305
51756: PUSH
51757: LD_VAR 0 5
51761: PUSH
51762: LD_INT 1
51764: ARRAY
51765: PPUSH
51766: CALL_OW 255
51770: PUSH
51771: LD_VAR 0 1
51775: PPUSH
51776: CALL_OW 255
51780: EQUAL
51781: AND
51782: IFFALSE 51806
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
51784: LD_VAR 0 5
51788: PUSH
51789: LD_INT 1
51791: ARRAY
51792: PPUSH
51793: LD_VAR 0 5
51797: PUSH
51798: LD_INT 2
51800: ARRAY
51801: PPUSH
51802: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
51806: LD_ADDR_EXP 150
51810: PUSH
51811: LD_EXP 150
51815: PPUSH
51816: LD_VAR 0 4
51820: PPUSH
51821: LD_EXP 150
51825: PUSH
51826: LD_VAR 0 4
51830: ARRAY
51831: PPUSH
51832: LD_VAR 0 3
51836: PPUSH
51837: CALL_OW 3
51841: PPUSH
51842: CALL_OW 1
51846: ST_TO_ADDR
// end ; end ;
51847: GO 51676
51849: POP
51850: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
51851: LD_VAR 0 1
51855: PPUSH
51856: LD_EXP 150
51860: PUSH
51861: LD_VAR 0 4
51865: ARRAY
51866: PUSH
51867: LD_INT 0
51869: PLUS
51870: PPUSH
51871: CALL_OW 505
// end ;
51875: LD_VAR 0 2
51879: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
51880: LD_INT 0
51882: PPUSH
51883: PPUSH
51884: PPUSH
51885: PPUSH
// if not hack in hackTanks then
51886: LD_VAR 0 1
51890: PUSH
51891: LD_EXP 149
51895: IN
51896: NOT
51897: IFFALSE 51901
// exit ;
51899: GO 51986
// index := GetElementIndex ( hackTanks , hack ) ;
51901: LD_ADDR_VAR 0 5
51905: PUSH
51906: LD_EXP 149
51910: PPUSH
51911: LD_VAR 0 1
51915: PPUSH
51916: CALL 58744 0 2
51920: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
51921: LD_ADDR_VAR 0 4
51925: PUSH
51926: DOUBLE
51927: LD_INT 1
51929: DEC
51930: ST_TO_ADDR
51931: LD_EXP 150
51935: PUSH
51936: LD_VAR 0 5
51940: ARRAY
51941: PUSH
51942: FOR_TO
51943: IFFALSE 51984
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
51945: LD_EXP 150
51949: PUSH
51950: LD_VAR 0 5
51954: ARRAY
51955: PUSH
51956: LD_VAR 0 4
51960: ARRAY
51961: PUSH
51962: LD_INT 1
51964: ARRAY
51965: PUSH
51966: LD_VAR 0 2
51970: EQUAL
51971: IFFALSE 51982
// KillUnit ( vehicle ) ;
51973: LD_VAR 0 2
51977: PPUSH
51978: CALL_OW 66
51982: GO 51942
51984: POP
51985: POP
// end ;
51986: LD_VAR 0 3
51990: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
51991: LD_EXP 154
51995: NOT
51996: IFFALSE 52031
51998: GO 52000
52000: DISABLE
// begin initMiner := true ;
52001: LD_ADDR_EXP 154
52005: PUSH
52006: LD_INT 1
52008: ST_TO_ADDR
// minersList := [ ] ;
52009: LD_ADDR_EXP 155
52013: PUSH
52014: EMPTY
52015: ST_TO_ADDR
// minerMinesList := [ ] ;
52016: LD_ADDR_EXP 156
52020: PUSH
52021: EMPTY
52022: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
52023: LD_ADDR_EXP 157
52027: PUSH
52028: LD_INT 5
52030: ST_TO_ADDR
// end ;
52031: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
52032: LD_EXP 154
52036: PUSH
52037: LD_INT 34
52039: PUSH
52040: LD_INT 81
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PPUSH
52047: CALL_OW 69
52051: AND
52052: IFFALSE 52513
52054: GO 52056
52056: DISABLE
52057: LD_INT 0
52059: PPUSH
52060: PPUSH
52061: PPUSH
52062: PPUSH
// begin enable ;
52063: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
52064: LD_ADDR_VAR 0 1
52068: PUSH
52069: LD_INT 34
52071: PUSH
52072: LD_INT 81
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PPUSH
52079: CALL_OW 69
52083: PUSH
52084: FOR_IN
52085: IFFALSE 52157
// begin if not i in minersList then
52087: LD_VAR 0 1
52091: PUSH
52092: LD_EXP 155
52096: IN
52097: NOT
52098: IFFALSE 52155
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
52100: LD_ADDR_EXP 155
52104: PUSH
52105: LD_EXP 155
52109: PPUSH
52110: LD_EXP 155
52114: PUSH
52115: LD_INT 1
52117: PLUS
52118: PPUSH
52119: LD_VAR 0 1
52123: PPUSH
52124: CALL_OW 1
52128: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
52129: LD_ADDR_EXP 156
52133: PUSH
52134: LD_EXP 156
52138: PPUSH
52139: LD_EXP 156
52143: PUSH
52144: LD_INT 1
52146: PLUS
52147: PPUSH
52148: EMPTY
52149: PPUSH
52150: CALL_OW 1
52154: ST_TO_ADDR
// end end ;
52155: GO 52084
52157: POP
52158: POP
// for i := minerMinesList downto 1 do
52159: LD_ADDR_VAR 0 1
52163: PUSH
52164: DOUBLE
52165: LD_EXP 156
52169: INC
52170: ST_TO_ADDR
52171: LD_INT 1
52173: PUSH
52174: FOR_DOWNTO
52175: IFFALSE 52511
// begin if IsLive ( minersList [ i ] ) then
52177: LD_EXP 155
52181: PUSH
52182: LD_VAR 0 1
52186: ARRAY
52187: PPUSH
52188: CALL_OW 300
52192: IFFALSE 52220
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
52194: LD_EXP 155
52198: PUSH
52199: LD_VAR 0 1
52203: ARRAY
52204: PPUSH
52205: LD_EXP 156
52209: PUSH
52210: LD_VAR 0 1
52214: ARRAY
52215: PPUSH
52216: CALL_OW 505
// if not minerMinesList [ i ] then
52220: LD_EXP 156
52224: PUSH
52225: LD_VAR 0 1
52229: ARRAY
52230: NOT
52231: IFFALSE 52235
// continue ;
52233: GO 52174
// for j := minerMinesList [ i ] downto 1 do
52235: LD_ADDR_VAR 0 2
52239: PUSH
52240: DOUBLE
52241: LD_EXP 156
52245: PUSH
52246: LD_VAR 0 1
52250: ARRAY
52251: INC
52252: ST_TO_ADDR
52253: LD_INT 1
52255: PUSH
52256: FOR_DOWNTO
52257: IFFALSE 52507
// begin side := GetSide ( minersList [ i ] ) ;
52259: LD_ADDR_VAR 0 3
52263: PUSH
52264: LD_EXP 155
52268: PUSH
52269: LD_VAR 0 1
52273: ARRAY
52274: PPUSH
52275: CALL_OW 255
52279: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
52280: LD_ADDR_VAR 0 4
52284: PUSH
52285: LD_EXP 156
52289: PUSH
52290: LD_VAR 0 1
52294: ARRAY
52295: PUSH
52296: LD_VAR 0 2
52300: ARRAY
52301: PUSH
52302: LD_INT 1
52304: ARRAY
52305: PPUSH
52306: LD_EXP 156
52310: PUSH
52311: LD_VAR 0 1
52315: ARRAY
52316: PUSH
52317: LD_VAR 0 2
52321: ARRAY
52322: PUSH
52323: LD_INT 2
52325: ARRAY
52326: PPUSH
52327: CALL_OW 428
52331: ST_TO_ADDR
// if not tmp then
52332: LD_VAR 0 4
52336: NOT
52337: IFFALSE 52341
// continue ;
52339: GO 52256
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
52341: LD_VAR 0 4
52345: PUSH
52346: LD_INT 81
52348: PUSH
52349: LD_VAR 0 3
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PPUSH
52358: CALL_OW 69
52362: IN
52363: PUSH
52364: LD_EXP 156
52368: PUSH
52369: LD_VAR 0 1
52373: ARRAY
52374: PUSH
52375: LD_VAR 0 2
52379: ARRAY
52380: PUSH
52381: LD_INT 1
52383: ARRAY
52384: PPUSH
52385: LD_EXP 156
52389: PUSH
52390: LD_VAR 0 1
52394: ARRAY
52395: PUSH
52396: LD_VAR 0 2
52400: ARRAY
52401: PUSH
52402: LD_INT 2
52404: ARRAY
52405: PPUSH
52406: CALL_OW 458
52410: AND
52411: IFFALSE 52505
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
52413: LD_EXP 156
52417: PUSH
52418: LD_VAR 0 1
52422: ARRAY
52423: PUSH
52424: LD_VAR 0 2
52428: ARRAY
52429: PUSH
52430: LD_INT 1
52432: ARRAY
52433: PPUSH
52434: LD_EXP 156
52438: PUSH
52439: LD_VAR 0 1
52443: ARRAY
52444: PUSH
52445: LD_VAR 0 2
52449: ARRAY
52450: PUSH
52451: LD_INT 2
52453: ARRAY
52454: PPUSH
52455: LD_VAR 0 3
52459: PPUSH
52460: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
52464: LD_ADDR_EXP 156
52468: PUSH
52469: LD_EXP 156
52473: PPUSH
52474: LD_VAR 0 1
52478: PPUSH
52479: LD_EXP 156
52483: PUSH
52484: LD_VAR 0 1
52488: ARRAY
52489: PPUSH
52490: LD_VAR 0 2
52494: PPUSH
52495: CALL_OW 3
52499: PPUSH
52500: CALL_OW 1
52504: ST_TO_ADDR
// end ; end ;
52505: GO 52256
52507: POP
52508: POP
// end ;
52509: GO 52174
52511: POP
52512: POP
// end ;
52513: PPOPN 4
52515: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
52516: LD_INT 0
52518: PPUSH
52519: PPUSH
// result := false ;
52520: LD_ADDR_VAR 0 4
52524: PUSH
52525: LD_INT 0
52527: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
52528: LD_VAR 0 1
52532: PPUSH
52533: CALL_OW 264
52537: PUSH
52538: LD_INT 81
52540: EQUAL
52541: NOT
52542: IFFALSE 52546
// exit ;
52544: GO 52786
// index := GetElementIndex ( minersList , unit ) ;
52546: LD_ADDR_VAR 0 5
52550: PUSH
52551: LD_EXP 155
52555: PPUSH
52556: LD_VAR 0 1
52560: PPUSH
52561: CALL 58744 0 2
52565: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
52566: LD_EXP 156
52570: PUSH
52571: LD_VAR 0 5
52575: ARRAY
52576: PUSH
52577: LD_EXP 157
52581: GREATEREQUAL
52582: IFFALSE 52586
// exit ;
52584: GO 52786
// ComMoveXY ( unit , x , y ) ;
52586: LD_VAR 0 1
52590: PPUSH
52591: LD_VAR 0 2
52595: PPUSH
52596: LD_VAR 0 3
52600: PPUSH
52601: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
52605: LD_INT 35
52607: PPUSH
52608: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
52612: LD_VAR 0 1
52616: PPUSH
52617: LD_VAR 0 2
52621: PPUSH
52622: LD_VAR 0 3
52626: PPUSH
52627: CALL 90128 0 3
52631: NOT
52632: PUSH
52633: LD_VAR 0 1
52637: PPUSH
52638: CALL_OW 314
52642: AND
52643: IFFALSE 52647
// exit ;
52645: GO 52786
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
52647: LD_VAR 0 2
52651: PPUSH
52652: LD_VAR 0 3
52656: PPUSH
52657: CALL_OW 428
52661: PUSH
52662: LD_VAR 0 1
52666: EQUAL
52667: PUSH
52668: LD_VAR 0 1
52672: PPUSH
52673: CALL_OW 314
52677: NOT
52678: AND
52679: IFFALSE 52605
// PlaySoundXY ( x , y , PlantMine ) ;
52681: LD_VAR 0 2
52685: PPUSH
52686: LD_VAR 0 3
52690: PPUSH
52691: LD_STRING PlantMine
52693: PPUSH
52694: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
52698: LD_VAR 0 2
52702: PPUSH
52703: LD_VAR 0 3
52707: PPUSH
52708: LD_VAR 0 1
52712: PPUSH
52713: CALL_OW 255
52717: PPUSH
52718: LD_INT 0
52720: PPUSH
52721: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
52725: LD_ADDR_EXP 156
52729: PUSH
52730: LD_EXP 156
52734: PPUSH
52735: LD_VAR 0 5
52739: PUSH
52740: LD_EXP 156
52744: PUSH
52745: LD_VAR 0 5
52749: ARRAY
52750: PUSH
52751: LD_INT 1
52753: PLUS
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PPUSH
52759: LD_VAR 0 2
52763: PUSH
52764: LD_VAR 0 3
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PPUSH
52773: CALL 58959 0 3
52777: ST_TO_ADDR
// result := true ;
52778: LD_ADDR_VAR 0 4
52782: PUSH
52783: LD_INT 1
52785: ST_TO_ADDR
// end ;
52786: LD_VAR 0 4
52790: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
52791: LD_INT 0
52793: PPUSH
52794: PPUSH
52795: PPUSH
// if not unit in minersList then
52796: LD_VAR 0 1
52800: PUSH
52801: LD_EXP 155
52805: IN
52806: NOT
52807: IFFALSE 52811
// exit ;
52809: GO 53203
// index := GetElementIndex ( minersList , unit ) ;
52811: LD_ADDR_VAR 0 6
52815: PUSH
52816: LD_EXP 155
52820: PPUSH
52821: LD_VAR 0 1
52825: PPUSH
52826: CALL 58744 0 2
52830: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
52831: LD_ADDR_VAR 0 5
52835: PUSH
52836: DOUBLE
52837: LD_EXP 156
52841: PUSH
52842: LD_VAR 0 6
52846: ARRAY
52847: INC
52848: ST_TO_ADDR
52849: LD_INT 1
52851: PUSH
52852: FOR_DOWNTO
52853: IFFALSE 53014
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
52855: LD_EXP 156
52859: PUSH
52860: LD_VAR 0 6
52864: ARRAY
52865: PUSH
52866: LD_VAR 0 5
52870: ARRAY
52871: PUSH
52872: LD_INT 1
52874: ARRAY
52875: PUSH
52876: LD_VAR 0 2
52880: EQUAL
52881: PUSH
52882: LD_EXP 156
52886: PUSH
52887: LD_VAR 0 6
52891: ARRAY
52892: PUSH
52893: LD_VAR 0 5
52897: ARRAY
52898: PUSH
52899: LD_INT 2
52901: ARRAY
52902: PUSH
52903: LD_VAR 0 3
52907: EQUAL
52908: AND
52909: IFFALSE 53012
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
52911: LD_EXP 156
52915: PUSH
52916: LD_VAR 0 6
52920: ARRAY
52921: PUSH
52922: LD_VAR 0 5
52926: ARRAY
52927: PUSH
52928: LD_INT 1
52930: ARRAY
52931: PPUSH
52932: LD_EXP 156
52936: PUSH
52937: LD_VAR 0 6
52941: ARRAY
52942: PUSH
52943: LD_VAR 0 5
52947: ARRAY
52948: PUSH
52949: LD_INT 2
52951: ARRAY
52952: PPUSH
52953: LD_VAR 0 1
52957: PPUSH
52958: CALL_OW 255
52962: PPUSH
52963: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
52967: LD_ADDR_EXP 156
52971: PUSH
52972: LD_EXP 156
52976: PPUSH
52977: LD_VAR 0 6
52981: PPUSH
52982: LD_EXP 156
52986: PUSH
52987: LD_VAR 0 6
52991: ARRAY
52992: PPUSH
52993: LD_VAR 0 5
52997: PPUSH
52998: CALL_OW 3
53002: PPUSH
53003: CALL_OW 1
53007: ST_TO_ADDR
// exit ;
53008: POP
53009: POP
53010: GO 53203
// end ; end ;
53012: GO 52852
53014: POP
53015: POP
// for i := minerMinesList [ index ] downto 1 do
53016: LD_ADDR_VAR 0 5
53020: PUSH
53021: DOUBLE
53022: LD_EXP 156
53026: PUSH
53027: LD_VAR 0 6
53031: ARRAY
53032: INC
53033: ST_TO_ADDR
53034: LD_INT 1
53036: PUSH
53037: FOR_DOWNTO
53038: IFFALSE 53201
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
53040: LD_EXP 156
53044: PUSH
53045: LD_VAR 0 6
53049: ARRAY
53050: PUSH
53051: LD_VAR 0 5
53055: ARRAY
53056: PUSH
53057: LD_INT 1
53059: ARRAY
53060: PPUSH
53061: LD_EXP 156
53065: PUSH
53066: LD_VAR 0 6
53070: ARRAY
53071: PUSH
53072: LD_VAR 0 5
53076: ARRAY
53077: PUSH
53078: LD_INT 2
53080: ARRAY
53081: PPUSH
53082: LD_VAR 0 2
53086: PPUSH
53087: LD_VAR 0 3
53091: PPUSH
53092: CALL_OW 298
53096: PUSH
53097: LD_INT 6
53099: LESS
53100: IFFALSE 53199
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
53102: LD_EXP 156
53106: PUSH
53107: LD_VAR 0 6
53111: ARRAY
53112: PUSH
53113: LD_VAR 0 5
53117: ARRAY
53118: PUSH
53119: LD_INT 1
53121: ARRAY
53122: PPUSH
53123: LD_EXP 156
53127: PUSH
53128: LD_VAR 0 6
53132: ARRAY
53133: PUSH
53134: LD_VAR 0 5
53138: ARRAY
53139: PUSH
53140: LD_INT 2
53142: ARRAY
53143: PPUSH
53144: LD_VAR 0 1
53148: PPUSH
53149: CALL_OW 255
53153: PPUSH
53154: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
53158: LD_ADDR_EXP 156
53162: PUSH
53163: LD_EXP 156
53167: PPUSH
53168: LD_VAR 0 6
53172: PPUSH
53173: LD_EXP 156
53177: PUSH
53178: LD_VAR 0 6
53182: ARRAY
53183: PPUSH
53184: LD_VAR 0 5
53188: PPUSH
53189: CALL_OW 3
53193: PPUSH
53194: CALL_OW 1
53198: ST_TO_ADDR
// end ; end ;
53199: GO 53037
53201: POP
53202: POP
// end ;
53203: LD_VAR 0 4
53207: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
53208: LD_INT 0
53210: PPUSH
53211: PPUSH
53212: PPUSH
53213: PPUSH
53214: PPUSH
53215: PPUSH
53216: PPUSH
53217: PPUSH
53218: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
53219: LD_VAR 0 1
53223: PPUSH
53224: CALL_OW 264
53228: PUSH
53229: LD_INT 81
53231: EQUAL
53232: NOT
53233: PUSH
53234: LD_VAR 0 1
53238: PUSH
53239: LD_EXP 155
53243: IN
53244: NOT
53245: OR
53246: IFFALSE 53250
// exit ;
53248: GO 53572
// index := GetElementIndex ( minersList , unit ) ;
53250: LD_ADDR_VAR 0 6
53254: PUSH
53255: LD_EXP 155
53259: PPUSH
53260: LD_VAR 0 1
53264: PPUSH
53265: CALL 58744 0 2
53269: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
53270: LD_ADDR_VAR 0 8
53274: PUSH
53275: LD_EXP 157
53279: PUSH
53280: LD_EXP 156
53284: PUSH
53285: LD_VAR 0 6
53289: ARRAY
53290: MINUS
53291: ST_TO_ADDR
// if not minesFreeAmount then
53292: LD_VAR 0 8
53296: NOT
53297: IFFALSE 53301
// exit ;
53299: GO 53572
// tmp := [ ] ;
53301: LD_ADDR_VAR 0 7
53305: PUSH
53306: EMPTY
53307: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
53308: LD_ADDR_VAR 0 5
53312: PUSH
53313: DOUBLE
53314: LD_INT 1
53316: DEC
53317: ST_TO_ADDR
53318: LD_VAR 0 8
53322: PUSH
53323: FOR_TO
53324: IFFALSE 53519
// begin _d := rand ( 0 , 5 ) ;
53326: LD_ADDR_VAR 0 11
53330: PUSH
53331: LD_INT 0
53333: PPUSH
53334: LD_INT 5
53336: PPUSH
53337: CALL_OW 12
53341: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
53342: LD_ADDR_VAR 0 12
53346: PUSH
53347: LD_INT 2
53349: PPUSH
53350: LD_INT 6
53352: PPUSH
53353: CALL_OW 12
53357: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
53358: LD_ADDR_VAR 0 9
53362: PUSH
53363: LD_VAR 0 2
53367: PPUSH
53368: LD_VAR 0 11
53372: PPUSH
53373: LD_VAR 0 12
53377: PPUSH
53378: CALL_OW 272
53382: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
53383: LD_ADDR_VAR 0 10
53387: PUSH
53388: LD_VAR 0 3
53392: PPUSH
53393: LD_VAR 0 11
53397: PPUSH
53398: LD_VAR 0 12
53402: PPUSH
53403: CALL_OW 273
53407: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
53408: LD_VAR 0 9
53412: PPUSH
53413: LD_VAR 0 10
53417: PPUSH
53418: CALL_OW 488
53422: PUSH
53423: LD_VAR 0 9
53427: PUSH
53428: LD_VAR 0 10
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_VAR 0 7
53441: IN
53442: NOT
53443: AND
53444: PUSH
53445: LD_VAR 0 9
53449: PPUSH
53450: LD_VAR 0 10
53454: PPUSH
53455: CALL_OW 458
53459: NOT
53460: AND
53461: IFFALSE 53503
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
53463: LD_ADDR_VAR 0 7
53467: PUSH
53468: LD_VAR 0 7
53472: PPUSH
53473: LD_VAR 0 7
53477: PUSH
53478: LD_INT 1
53480: PLUS
53481: PPUSH
53482: LD_VAR 0 9
53486: PUSH
53487: LD_VAR 0 10
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PPUSH
53496: CALL_OW 1
53500: ST_TO_ADDR
53501: GO 53517
// i := i - 1 ;
53503: LD_ADDR_VAR 0 5
53507: PUSH
53508: LD_VAR 0 5
53512: PUSH
53513: LD_INT 1
53515: MINUS
53516: ST_TO_ADDR
// end ;
53517: GO 53323
53519: POP
53520: POP
// for i in tmp do
53521: LD_ADDR_VAR 0 5
53525: PUSH
53526: LD_VAR 0 7
53530: PUSH
53531: FOR_IN
53532: IFFALSE 53570
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
53534: LD_VAR 0 1
53538: PPUSH
53539: LD_VAR 0 5
53543: PUSH
53544: LD_INT 1
53546: ARRAY
53547: PPUSH
53548: LD_VAR 0 5
53552: PUSH
53553: LD_INT 2
53555: ARRAY
53556: PPUSH
53557: CALL 52516 0 3
53561: NOT
53562: IFFALSE 53568
// exit ;
53564: POP
53565: POP
53566: GO 53572
53568: GO 53531
53570: POP
53571: POP
// end ;
53572: LD_VAR 0 4
53576: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
53577: LD_INT 0
53579: PPUSH
53580: PPUSH
53581: PPUSH
53582: PPUSH
53583: PPUSH
53584: PPUSH
53585: PPUSH
// if not GetClass ( unit ) = class_sniper then
53586: LD_VAR 0 1
53590: PPUSH
53591: CALL_OW 257
53595: PUSH
53596: LD_INT 5
53598: EQUAL
53599: NOT
53600: IFFALSE 53604
// exit ;
53602: GO 53992
// dist := 8 ;
53604: LD_ADDR_VAR 0 5
53608: PUSH
53609: LD_INT 8
53611: ST_TO_ADDR
// viewRange := 12 ;
53612: LD_ADDR_VAR 0 7
53616: PUSH
53617: LD_INT 12
53619: ST_TO_ADDR
// side := GetSide ( unit ) ;
53620: LD_ADDR_VAR 0 6
53624: PUSH
53625: LD_VAR 0 1
53629: PPUSH
53630: CALL_OW 255
53634: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
53635: LD_INT 61
53637: PPUSH
53638: LD_VAR 0 6
53642: PPUSH
53643: CALL_OW 321
53647: PUSH
53648: LD_INT 2
53650: EQUAL
53651: IFFALSE 53661
// viewRange := 16 ;
53653: LD_ADDR_VAR 0 7
53657: PUSH
53658: LD_INT 16
53660: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
53661: LD_VAR 0 1
53665: PPUSH
53666: LD_VAR 0 2
53670: PPUSH
53671: LD_VAR 0 3
53675: PPUSH
53676: CALL_OW 297
53680: PUSH
53681: LD_VAR 0 5
53685: GREATER
53686: IFFALSE 53765
// begin ComMoveXY ( unit , x , y ) ;
53688: LD_VAR 0 1
53692: PPUSH
53693: LD_VAR 0 2
53697: PPUSH
53698: LD_VAR 0 3
53702: PPUSH
53703: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
53707: LD_INT 35
53709: PPUSH
53710: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
53714: LD_VAR 0 1
53718: PPUSH
53719: LD_VAR 0 2
53723: PPUSH
53724: LD_VAR 0 3
53728: PPUSH
53729: CALL 90128 0 3
53733: NOT
53734: IFFALSE 53738
// exit ;
53736: GO 53992
// until GetDistUnitXY ( unit , x , y ) < dist ;
53738: LD_VAR 0 1
53742: PPUSH
53743: LD_VAR 0 2
53747: PPUSH
53748: LD_VAR 0 3
53752: PPUSH
53753: CALL_OW 297
53757: PUSH
53758: LD_VAR 0 5
53762: LESS
53763: IFFALSE 53707
// end ; ComTurnXY ( unit , x , y ) ;
53765: LD_VAR 0 1
53769: PPUSH
53770: LD_VAR 0 2
53774: PPUSH
53775: LD_VAR 0 3
53779: PPUSH
53780: CALL_OW 118
// wait ( 5 ) ;
53784: LD_INT 5
53786: PPUSH
53787: CALL_OW 67
// _d := GetDir ( unit ) ;
53791: LD_ADDR_VAR 0 10
53795: PUSH
53796: LD_VAR 0 1
53800: PPUSH
53801: CALL_OW 254
53805: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
53806: LD_ADDR_VAR 0 8
53810: PUSH
53811: LD_VAR 0 1
53815: PPUSH
53816: CALL_OW 250
53820: PPUSH
53821: LD_VAR 0 10
53825: PPUSH
53826: LD_VAR 0 5
53830: PPUSH
53831: CALL_OW 272
53835: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
53836: LD_ADDR_VAR 0 9
53840: PUSH
53841: LD_VAR 0 1
53845: PPUSH
53846: CALL_OW 251
53850: PPUSH
53851: LD_VAR 0 10
53855: PPUSH
53856: LD_VAR 0 5
53860: PPUSH
53861: CALL_OW 273
53865: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
53866: LD_VAR 0 8
53870: PPUSH
53871: LD_VAR 0 9
53875: PPUSH
53876: CALL_OW 488
53880: NOT
53881: IFFALSE 53885
// exit ;
53883: GO 53992
// ComAnimCustom ( unit , 1 ) ;
53885: LD_VAR 0 1
53889: PPUSH
53890: LD_INT 1
53892: PPUSH
53893: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
53897: LD_VAR 0 8
53901: PPUSH
53902: LD_VAR 0 9
53906: PPUSH
53907: LD_VAR 0 6
53911: PPUSH
53912: LD_VAR 0 7
53916: PPUSH
53917: CALL_OW 330
// repeat wait ( 1 ) ;
53921: LD_INT 1
53923: PPUSH
53924: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
53928: LD_VAR 0 1
53932: PPUSH
53933: CALL_OW 316
53937: PUSH
53938: LD_VAR 0 1
53942: PPUSH
53943: CALL_OW 314
53947: OR
53948: PUSH
53949: LD_VAR 0 1
53953: PPUSH
53954: CALL_OW 302
53958: NOT
53959: OR
53960: PUSH
53961: LD_VAR 0 1
53965: PPUSH
53966: CALL_OW 301
53970: OR
53971: IFFALSE 53921
// RemoveSeeing ( _x , _y , side ) ;
53973: LD_VAR 0 8
53977: PPUSH
53978: LD_VAR 0 9
53982: PPUSH
53983: LD_VAR 0 6
53987: PPUSH
53988: CALL_OW 331
// end ; end_of_file
53992: LD_VAR 0 4
53996: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
53997: LD_INT 0
53999: PPUSH
54000: PPUSH
// if exist_mode then
54001: LD_VAR 0 2
54005: IFFALSE 54030
// unit := CreateCharacter ( prefix & ident ) else
54007: LD_ADDR_VAR 0 5
54011: PUSH
54012: LD_VAR 0 3
54016: PUSH
54017: LD_VAR 0 1
54021: STR
54022: PPUSH
54023: CALL_OW 34
54027: ST_TO_ADDR
54028: GO 54045
// unit := NewCharacter ( ident ) ;
54030: LD_ADDR_VAR 0 5
54034: PUSH
54035: LD_VAR 0 1
54039: PPUSH
54040: CALL_OW 25
54044: ST_TO_ADDR
// result := unit ;
54045: LD_ADDR_VAR 0 4
54049: PUSH
54050: LD_VAR 0 5
54054: ST_TO_ADDR
// end ;
54055: LD_VAR 0 4
54059: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
54060: LD_INT 0
54062: PPUSH
54063: PPUSH
// if not side or not nation then
54064: LD_VAR 0 1
54068: NOT
54069: PUSH
54070: LD_VAR 0 2
54074: NOT
54075: OR
54076: IFFALSE 54080
// exit ;
54078: GO 54848
// case nation of nation_american :
54080: LD_VAR 0 2
54084: PUSH
54085: LD_INT 1
54087: DOUBLE
54088: EQUAL
54089: IFTRUE 54093
54091: GO 54307
54093: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
54094: LD_ADDR_VAR 0 4
54098: PUSH
54099: LD_INT 35
54101: PUSH
54102: LD_INT 45
54104: PUSH
54105: LD_INT 46
54107: PUSH
54108: LD_INT 47
54110: PUSH
54111: LD_INT 82
54113: PUSH
54114: LD_INT 83
54116: PUSH
54117: LD_INT 84
54119: PUSH
54120: LD_INT 85
54122: PUSH
54123: LD_INT 86
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: LD_INT 2
54131: PUSH
54132: LD_INT 6
54134: PUSH
54135: LD_INT 15
54137: PUSH
54138: LD_INT 16
54140: PUSH
54141: LD_INT 7
54143: PUSH
54144: LD_INT 12
54146: PUSH
54147: LD_INT 13
54149: PUSH
54150: LD_INT 10
54152: PUSH
54153: LD_INT 14
54155: PUSH
54156: LD_INT 20
54158: PUSH
54159: LD_INT 21
54161: PUSH
54162: LD_INT 22
54164: PUSH
54165: LD_INT 25
54167: PUSH
54168: LD_INT 32
54170: PUSH
54171: LD_INT 27
54173: PUSH
54174: LD_INT 36
54176: PUSH
54177: LD_INT 69
54179: PUSH
54180: LD_INT 39
54182: PUSH
54183: LD_INT 34
54185: PUSH
54186: LD_INT 40
54188: PUSH
54189: LD_INT 48
54191: PUSH
54192: LD_INT 49
54194: PUSH
54195: LD_INT 50
54197: PUSH
54198: LD_INT 51
54200: PUSH
54201: LD_INT 52
54203: PUSH
54204: LD_INT 53
54206: PUSH
54207: LD_INT 54
54209: PUSH
54210: LD_INT 55
54212: PUSH
54213: LD_INT 56
54215: PUSH
54216: LD_INT 57
54218: PUSH
54219: LD_INT 58
54221: PUSH
54222: LD_INT 59
54224: PUSH
54225: LD_INT 60
54227: PUSH
54228: LD_INT 61
54230: PUSH
54231: LD_INT 62
54233: PUSH
54234: LD_INT 80
54236: PUSH
54237: LD_INT 82
54239: PUSH
54240: LD_INT 83
54242: PUSH
54243: LD_INT 84
54245: PUSH
54246: LD_INT 85
54248: PUSH
54249: LD_INT 86
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: ST_TO_ADDR
54305: GO 54772
54307: LD_INT 2
54309: DOUBLE
54310: EQUAL
54311: IFTRUE 54315
54313: GO 54541
54315: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
54316: LD_ADDR_VAR 0 4
54320: PUSH
54321: LD_INT 35
54323: PUSH
54324: LD_INT 45
54326: PUSH
54327: LD_INT 46
54329: PUSH
54330: LD_INT 47
54332: PUSH
54333: LD_INT 82
54335: PUSH
54336: LD_INT 83
54338: PUSH
54339: LD_INT 84
54341: PUSH
54342: LD_INT 85
54344: PUSH
54345: LD_INT 87
54347: PUSH
54348: LD_INT 70
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: LD_INT 11
54356: PUSH
54357: LD_INT 3
54359: PUSH
54360: LD_INT 4
54362: PUSH
54363: LD_INT 5
54365: PUSH
54366: LD_INT 6
54368: PUSH
54369: LD_INT 15
54371: PUSH
54372: LD_INT 18
54374: PUSH
54375: LD_INT 7
54377: PUSH
54378: LD_INT 17
54380: PUSH
54381: LD_INT 8
54383: PUSH
54384: LD_INT 20
54386: PUSH
54387: LD_INT 21
54389: PUSH
54390: LD_INT 22
54392: PUSH
54393: LD_INT 72
54395: PUSH
54396: LD_INT 26
54398: PUSH
54399: LD_INT 69
54401: PUSH
54402: LD_INT 39
54404: PUSH
54405: LD_INT 40
54407: PUSH
54408: LD_INT 41
54410: PUSH
54411: LD_INT 42
54413: PUSH
54414: LD_INT 43
54416: PUSH
54417: LD_INT 48
54419: PUSH
54420: LD_INT 49
54422: PUSH
54423: LD_INT 50
54425: PUSH
54426: LD_INT 51
54428: PUSH
54429: LD_INT 52
54431: PUSH
54432: LD_INT 53
54434: PUSH
54435: LD_INT 54
54437: PUSH
54438: LD_INT 55
54440: PUSH
54441: LD_INT 56
54443: PUSH
54444: LD_INT 60
54446: PUSH
54447: LD_INT 61
54449: PUSH
54450: LD_INT 62
54452: PUSH
54453: LD_INT 66
54455: PUSH
54456: LD_INT 67
54458: PUSH
54459: LD_INT 68
54461: PUSH
54462: LD_INT 81
54464: PUSH
54465: LD_INT 82
54467: PUSH
54468: LD_INT 83
54470: PUSH
54471: LD_INT 84
54473: PUSH
54474: LD_INT 85
54476: PUSH
54477: LD_INT 87
54479: PUSH
54480: LD_INT 88
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: ST_TO_ADDR
54539: GO 54772
54541: LD_INT 3
54543: DOUBLE
54544: EQUAL
54545: IFTRUE 54549
54547: GO 54771
54549: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
54550: LD_ADDR_VAR 0 4
54554: PUSH
54555: LD_INT 46
54557: PUSH
54558: LD_INT 47
54560: PUSH
54561: LD_INT 1
54563: PUSH
54564: LD_INT 2
54566: PUSH
54567: LD_INT 82
54569: PUSH
54570: LD_INT 83
54572: PUSH
54573: LD_INT 84
54575: PUSH
54576: LD_INT 85
54578: PUSH
54579: LD_INT 86
54581: PUSH
54582: LD_INT 11
54584: PUSH
54585: LD_INT 9
54587: PUSH
54588: LD_INT 20
54590: PUSH
54591: LD_INT 19
54593: PUSH
54594: LD_INT 21
54596: PUSH
54597: LD_INT 24
54599: PUSH
54600: LD_INT 22
54602: PUSH
54603: LD_INT 25
54605: PUSH
54606: LD_INT 28
54608: PUSH
54609: LD_INT 29
54611: PUSH
54612: LD_INT 30
54614: PUSH
54615: LD_INT 31
54617: PUSH
54618: LD_INT 37
54620: PUSH
54621: LD_INT 38
54623: PUSH
54624: LD_INT 32
54626: PUSH
54627: LD_INT 27
54629: PUSH
54630: LD_INT 33
54632: PUSH
54633: LD_INT 69
54635: PUSH
54636: LD_INT 39
54638: PUSH
54639: LD_INT 34
54641: PUSH
54642: LD_INT 40
54644: PUSH
54645: LD_INT 71
54647: PUSH
54648: LD_INT 23
54650: PUSH
54651: LD_INT 44
54653: PUSH
54654: LD_INT 48
54656: PUSH
54657: LD_INT 49
54659: PUSH
54660: LD_INT 50
54662: PUSH
54663: LD_INT 51
54665: PUSH
54666: LD_INT 52
54668: PUSH
54669: LD_INT 53
54671: PUSH
54672: LD_INT 54
54674: PUSH
54675: LD_INT 55
54677: PUSH
54678: LD_INT 56
54680: PUSH
54681: LD_INT 57
54683: PUSH
54684: LD_INT 58
54686: PUSH
54687: LD_INT 59
54689: PUSH
54690: LD_INT 63
54692: PUSH
54693: LD_INT 64
54695: PUSH
54696: LD_INT 65
54698: PUSH
54699: LD_INT 82
54701: PUSH
54702: LD_INT 83
54704: PUSH
54705: LD_INT 84
54707: PUSH
54708: LD_INT 85
54710: PUSH
54711: LD_INT 86
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: ST_TO_ADDR
54769: GO 54772
54771: POP
// if state > - 1 and state < 3 then
54772: LD_VAR 0 3
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: GREATER
54781: PUSH
54782: LD_VAR 0 3
54786: PUSH
54787: LD_INT 3
54789: LESS
54790: AND
54791: IFFALSE 54848
// for i in result do
54793: LD_ADDR_VAR 0 5
54797: PUSH
54798: LD_VAR 0 4
54802: PUSH
54803: FOR_IN
54804: IFFALSE 54846
// if GetTech ( i , side ) <> state then
54806: LD_VAR 0 5
54810: PPUSH
54811: LD_VAR 0 1
54815: PPUSH
54816: CALL_OW 321
54820: PUSH
54821: LD_VAR 0 3
54825: NONEQUAL
54826: IFFALSE 54844
// result := result diff i ;
54828: LD_ADDR_VAR 0 4
54832: PUSH
54833: LD_VAR 0 4
54837: PUSH
54838: LD_VAR 0 5
54842: DIFF
54843: ST_TO_ADDR
54844: GO 54803
54846: POP
54847: POP
// end ;
54848: LD_VAR 0 4
54852: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
54853: LD_INT 0
54855: PPUSH
54856: PPUSH
54857: PPUSH
// result := true ;
54858: LD_ADDR_VAR 0 3
54862: PUSH
54863: LD_INT 1
54865: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
54866: LD_ADDR_VAR 0 5
54870: PUSH
54871: LD_VAR 0 2
54875: PPUSH
54876: CALL_OW 480
54880: ST_TO_ADDR
// if not tmp then
54881: LD_VAR 0 5
54885: NOT
54886: IFFALSE 54890
// exit ;
54888: GO 54939
// for i in tmp do
54890: LD_ADDR_VAR 0 4
54894: PUSH
54895: LD_VAR 0 5
54899: PUSH
54900: FOR_IN
54901: IFFALSE 54937
// if GetTech ( i , side ) <> state_researched then
54903: LD_VAR 0 4
54907: PPUSH
54908: LD_VAR 0 1
54912: PPUSH
54913: CALL_OW 321
54917: PUSH
54918: LD_INT 2
54920: NONEQUAL
54921: IFFALSE 54935
// begin result := false ;
54923: LD_ADDR_VAR 0 3
54927: PUSH
54928: LD_INT 0
54930: ST_TO_ADDR
// exit ;
54931: POP
54932: POP
54933: GO 54939
// end ;
54935: GO 54900
54937: POP
54938: POP
// end ;
54939: LD_VAR 0 3
54943: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
54944: LD_INT 0
54946: PPUSH
54947: PPUSH
54948: PPUSH
54949: PPUSH
54950: PPUSH
54951: PPUSH
54952: PPUSH
54953: PPUSH
54954: PPUSH
54955: PPUSH
54956: PPUSH
54957: PPUSH
54958: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
54959: LD_VAR 0 1
54963: NOT
54964: PUSH
54965: LD_VAR 0 1
54969: PPUSH
54970: CALL_OW 257
54974: PUSH
54975: LD_INT 9
54977: NONEQUAL
54978: OR
54979: IFFALSE 54983
// exit ;
54981: GO 55556
// side := GetSide ( unit ) ;
54983: LD_ADDR_VAR 0 9
54987: PUSH
54988: LD_VAR 0 1
54992: PPUSH
54993: CALL_OW 255
54997: ST_TO_ADDR
// tech_space := tech_spacanom ;
54998: LD_ADDR_VAR 0 12
55002: PUSH
55003: LD_INT 29
55005: ST_TO_ADDR
// tech_time := tech_taurad ;
55006: LD_ADDR_VAR 0 13
55010: PUSH
55011: LD_INT 28
55013: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
55014: LD_ADDR_VAR 0 11
55018: PUSH
55019: LD_VAR 0 1
55023: PPUSH
55024: CALL_OW 310
55028: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
55029: LD_VAR 0 11
55033: PPUSH
55034: CALL_OW 247
55038: PUSH
55039: LD_INT 2
55041: EQUAL
55042: IFFALSE 55046
// exit ;
55044: GO 55556
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
55046: LD_ADDR_VAR 0 8
55050: PUSH
55051: LD_INT 81
55053: PUSH
55054: LD_VAR 0 9
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 3
55065: PUSH
55066: LD_INT 21
55068: PUSH
55069: LD_INT 3
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PPUSH
55084: CALL_OW 69
55088: ST_TO_ADDR
// if not tmp then
55089: LD_VAR 0 8
55093: NOT
55094: IFFALSE 55098
// exit ;
55096: GO 55556
// if in_unit then
55098: LD_VAR 0 11
55102: IFFALSE 55126
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
55104: LD_ADDR_VAR 0 10
55108: PUSH
55109: LD_VAR 0 8
55113: PPUSH
55114: LD_VAR 0 11
55118: PPUSH
55119: CALL_OW 74
55123: ST_TO_ADDR
55124: GO 55146
// enemy := NearestUnitToUnit ( tmp , unit ) ;
55126: LD_ADDR_VAR 0 10
55130: PUSH
55131: LD_VAR 0 8
55135: PPUSH
55136: LD_VAR 0 1
55140: PPUSH
55141: CALL_OW 74
55145: ST_TO_ADDR
// if not enemy then
55146: LD_VAR 0 10
55150: NOT
55151: IFFALSE 55155
// exit ;
55153: GO 55556
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
55155: LD_VAR 0 11
55159: PUSH
55160: LD_VAR 0 11
55164: PPUSH
55165: LD_VAR 0 10
55169: PPUSH
55170: CALL_OW 296
55174: PUSH
55175: LD_INT 13
55177: GREATER
55178: AND
55179: PUSH
55180: LD_VAR 0 1
55184: PPUSH
55185: LD_VAR 0 10
55189: PPUSH
55190: CALL_OW 296
55194: PUSH
55195: LD_INT 12
55197: GREATER
55198: OR
55199: IFFALSE 55203
// exit ;
55201: GO 55556
// missile := [ 1 ] ;
55203: LD_ADDR_VAR 0 14
55207: PUSH
55208: LD_INT 1
55210: PUSH
55211: EMPTY
55212: LIST
55213: ST_TO_ADDR
// if Researched ( side , tech_space ) then
55214: LD_VAR 0 9
55218: PPUSH
55219: LD_VAR 0 12
55223: PPUSH
55224: CALL_OW 325
55228: IFFALSE 55257
// missile := Replace ( missile , missile + 1 , 2 ) ;
55230: LD_ADDR_VAR 0 14
55234: PUSH
55235: LD_VAR 0 14
55239: PPUSH
55240: LD_VAR 0 14
55244: PUSH
55245: LD_INT 1
55247: PLUS
55248: PPUSH
55249: LD_INT 2
55251: PPUSH
55252: CALL_OW 1
55256: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
55257: LD_VAR 0 9
55261: PPUSH
55262: LD_VAR 0 13
55266: PPUSH
55267: CALL_OW 325
55271: PUSH
55272: LD_VAR 0 10
55276: PPUSH
55277: CALL_OW 255
55281: PPUSH
55282: LD_VAR 0 13
55286: PPUSH
55287: CALL_OW 325
55291: NOT
55292: AND
55293: IFFALSE 55322
// missile := Replace ( missile , missile + 1 , 3 ) ;
55295: LD_ADDR_VAR 0 14
55299: PUSH
55300: LD_VAR 0 14
55304: PPUSH
55305: LD_VAR 0 14
55309: PUSH
55310: LD_INT 1
55312: PLUS
55313: PPUSH
55314: LD_INT 3
55316: PPUSH
55317: CALL_OW 1
55321: ST_TO_ADDR
// if missile < 2 then
55322: LD_VAR 0 14
55326: PUSH
55327: LD_INT 2
55329: LESS
55330: IFFALSE 55334
// exit ;
55332: GO 55556
// x := GetX ( enemy ) ;
55334: LD_ADDR_VAR 0 4
55338: PUSH
55339: LD_VAR 0 10
55343: PPUSH
55344: CALL_OW 250
55348: ST_TO_ADDR
// y := GetY ( enemy ) ;
55349: LD_ADDR_VAR 0 5
55353: PUSH
55354: LD_VAR 0 10
55358: PPUSH
55359: CALL_OW 251
55363: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
55364: LD_ADDR_VAR 0 6
55368: PUSH
55369: LD_VAR 0 4
55373: PUSH
55374: LD_INT 1
55376: NEG
55377: PPUSH
55378: LD_INT 1
55380: PPUSH
55381: CALL_OW 12
55385: PLUS
55386: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
55387: LD_ADDR_VAR 0 7
55391: PUSH
55392: LD_VAR 0 5
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PPUSH
55401: LD_INT 1
55403: PPUSH
55404: CALL_OW 12
55408: PLUS
55409: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55410: LD_VAR 0 6
55414: PPUSH
55415: LD_VAR 0 7
55419: PPUSH
55420: CALL_OW 488
55424: NOT
55425: IFFALSE 55447
// begin _x := x ;
55427: LD_ADDR_VAR 0 6
55431: PUSH
55432: LD_VAR 0 4
55436: ST_TO_ADDR
// _y := y ;
55437: LD_ADDR_VAR 0 7
55441: PUSH
55442: LD_VAR 0 5
55446: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
55447: LD_ADDR_VAR 0 3
55451: PUSH
55452: LD_INT 1
55454: PPUSH
55455: LD_VAR 0 14
55459: PPUSH
55460: CALL_OW 12
55464: ST_TO_ADDR
// case i of 1 :
55465: LD_VAR 0 3
55469: PUSH
55470: LD_INT 1
55472: DOUBLE
55473: EQUAL
55474: IFTRUE 55478
55476: GO 55495
55478: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
55479: LD_VAR 0 1
55483: PPUSH
55484: LD_VAR 0 10
55488: PPUSH
55489: CALL_OW 115
55493: GO 55556
55495: LD_INT 2
55497: DOUBLE
55498: EQUAL
55499: IFTRUE 55503
55501: GO 55525
55503: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
55504: LD_VAR 0 1
55508: PPUSH
55509: LD_VAR 0 6
55513: PPUSH
55514: LD_VAR 0 7
55518: PPUSH
55519: CALL_OW 153
55523: GO 55556
55525: LD_INT 3
55527: DOUBLE
55528: EQUAL
55529: IFTRUE 55533
55531: GO 55555
55533: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
55534: LD_VAR 0 1
55538: PPUSH
55539: LD_VAR 0 6
55543: PPUSH
55544: LD_VAR 0 7
55548: PPUSH
55549: CALL_OW 154
55553: GO 55556
55555: POP
// end ;
55556: LD_VAR 0 2
55560: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
55561: LD_INT 0
55563: PPUSH
55564: PPUSH
55565: PPUSH
55566: PPUSH
55567: PPUSH
55568: PPUSH
// if not unit or not building then
55569: LD_VAR 0 1
55573: NOT
55574: PUSH
55575: LD_VAR 0 2
55579: NOT
55580: OR
55581: IFFALSE 55585
// exit ;
55583: GO 55743
// x := GetX ( building ) ;
55585: LD_ADDR_VAR 0 5
55589: PUSH
55590: LD_VAR 0 2
55594: PPUSH
55595: CALL_OW 250
55599: ST_TO_ADDR
// y := GetY ( building ) ;
55600: LD_ADDR_VAR 0 6
55604: PUSH
55605: LD_VAR 0 2
55609: PPUSH
55610: CALL_OW 251
55614: ST_TO_ADDR
// for i = 0 to 5 do
55615: LD_ADDR_VAR 0 4
55619: PUSH
55620: DOUBLE
55621: LD_INT 0
55623: DEC
55624: ST_TO_ADDR
55625: LD_INT 5
55627: PUSH
55628: FOR_TO
55629: IFFALSE 55741
// begin _x := ShiftX ( x , i , 3 ) ;
55631: LD_ADDR_VAR 0 7
55635: PUSH
55636: LD_VAR 0 5
55640: PPUSH
55641: LD_VAR 0 4
55645: PPUSH
55646: LD_INT 3
55648: PPUSH
55649: CALL_OW 272
55653: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
55654: LD_ADDR_VAR 0 8
55658: PUSH
55659: LD_VAR 0 6
55663: PPUSH
55664: LD_VAR 0 4
55668: PPUSH
55669: LD_INT 3
55671: PPUSH
55672: CALL_OW 273
55676: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55677: LD_VAR 0 7
55681: PPUSH
55682: LD_VAR 0 8
55686: PPUSH
55687: CALL_OW 488
55691: NOT
55692: IFFALSE 55696
// continue ;
55694: GO 55628
// if HexInfo ( _x , _y ) = 0 then
55696: LD_VAR 0 7
55700: PPUSH
55701: LD_VAR 0 8
55705: PPUSH
55706: CALL_OW 428
55710: PUSH
55711: LD_INT 0
55713: EQUAL
55714: IFFALSE 55739
// begin ComMoveXY ( unit , _x , _y ) ;
55716: LD_VAR 0 1
55720: PPUSH
55721: LD_VAR 0 7
55725: PPUSH
55726: LD_VAR 0 8
55730: PPUSH
55731: CALL_OW 111
// exit ;
55735: POP
55736: POP
55737: GO 55743
// end ; end ;
55739: GO 55628
55741: POP
55742: POP
// end ;
55743: LD_VAR 0 3
55747: RET
// export function ScanBase ( side , base_area ) ; begin
55748: LD_INT 0
55750: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
55751: LD_ADDR_VAR 0 3
55755: PUSH
55756: LD_VAR 0 2
55760: PPUSH
55761: LD_INT 81
55763: PUSH
55764: LD_VAR 0 1
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PPUSH
55773: CALL_OW 70
55777: ST_TO_ADDR
// end ;
55778: LD_VAR 0 3
55782: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
55783: LD_INT 0
55785: PPUSH
55786: PPUSH
55787: PPUSH
55788: PPUSH
// result := false ;
55789: LD_ADDR_VAR 0 2
55793: PUSH
55794: LD_INT 0
55796: ST_TO_ADDR
// side := GetSide ( unit ) ;
55797: LD_ADDR_VAR 0 3
55801: PUSH
55802: LD_VAR 0 1
55806: PPUSH
55807: CALL_OW 255
55811: ST_TO_ADDR
// nat := GetNation ( unit ) ;
55812: LD_ADDR_VAR 0 4
55816: PUSH
55817: LD_VAR 0 1
55821: PPUSH
55822: CALL_OW 248
55826: ST_TO_ADDR
// case nat of 1 :
55827: LD_VAR 0 4
55831: PUSH
55832: LD_INT 1
55834: DOUBLE
55835: EQUAL
55836: IFTRUE 55840
55838: GO 55851
55840: POP
// tech := tech_lassight ; 2 :
55841: LD_ADDR_VAR 0 5
55845: PUSH
55846: LD_INT 12
55848: ST_TO_ADDR
55849: GO 55890
55851: LD_INT 2
55853: DOUBLE
55854: EQUAL
55855: IFTRUE 55859
55857: GO 55870
55859: POP
// tech := tech_mortar ; 3 :
55860: LD_ADDR_VAR 0 5
55864: PUSH
55865: LD_INT 41
55867: ST_TO_ADDR
55868: GO 55890
55870: LD_INT 3
55872: DOUBLE
55873: EQUAL
55874: IFTRUE 55878
55876: GO 55889
55878: POP
// tech := tech_bazooka ; end ;
55879: LD_ADDR_VAR 0 5
55883: PUSH
55884: LD_INT 44
55886: ST_TO_ADDR
55887: GO 55890
55889: POP
// if Researched ( side , tech ) then
55890: LD_VAR 0 3
55894: PPUSH
55895: LD_VAR 0 5
55899: PPUSH
55900: CALL_OW 325
55904: IFFALSE 55931
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
55906: LD_ADDR_VAR 0 2
55910: PUSH
55911: LD_INT 5
55913: PUSH
55914: LD_INT 8
55916: PUSH
55917: LD_INT 9
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: LIST
55924: PUSH
55925: LD_VAR 0 4
55929: ARRAY
55930: ST_TO_ADDR
// end ;
55931: LD_VAR 0 2
55935: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
55936: LD_INT 0
55938: PPUSH
55939: PPUSH
55940: PPUSH
// if not mines then
55941: LD_VAR 0 2
55945: NOT
55946: IFFALSE 55950
// exit ;
55948: GO 56094
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
55950: LD_ADDR_VAR 0 5
55954: PUSH
55955: LD_INT 81
55957: PUSH
55958: LD_VAR 0 1
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 3
55969: PUSH
55970: LD_INT 21
55972: PUSH
55973: LD_INT 3
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PPUSH
55988: CALL_OW 69
55992: ST_TO_ADDR
// for i in mines do
55993: LD_ADDR_VAR 0 4
55997: PUSH
55998: LD_VAR 0 2
56002: PUSH
56003: FOR_IN
56004: IFFALSE 56092
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
56006: LD_VAR 0 4
56010: PUSH
56011: LD_INT 1
56013: ARRAY
56014: PPUSH
56015: LD_VAR 0 4
56019: PUSH
56020: LD_INT 2
56022: ARRAY
56023: PPUSH
56024: CALL_OW 458
56028: NOT
56029: IFFALSE 56033
// continue ;
56031: GO 56003
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
56033: LD_VAR 0 4
56037: PUSH
56038: LD_INT 1
56040: ARRAY
56041: PPUSH
56042: LD_VAR 0 4
56046: PUSH
56047: LD_INT 2
56049: ARRAY
56050: PPUSH
56051: CALL_OW 428
56055: PUSH
56056: LD_VAR 0 5
56060: IN
56061: IFFALSE 56090
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
56063: LD_VAR 0 4
56067: PUSH
56068: LD_INT 1
56070: ARRAY
56071: PPUSH
56072: LD_VAR 0 4
56076: PUSH
56077: LD_INT 2
56079: ARRAY
56080: PPUSH
56081: LD_VAR 0 1
56085: PPUSH
56086: CALL_OW 456
// end ;
56090: GO 56003
56092: POP
56093: POP
// end ;
56094: LD_VAR 0 3
56098: RET
// export function Count ( array ) ; begin
56099: LD_INT 0
56101: PPUSH
// result := array + 0 ;
56102: LD_ADDR_VAR 0 2
56106: PUSH
56107: LD_VAR 0 1
56111: PUSH
56112: LD_INT 0
56114: PLUS
56115: ST_TO_ADDR
// end ;
56116: LD_VAR 0 2
56120: RET
// export function IsEmpty ( building ) ; begin
56121: LD_INT 0
56123: PPUSH
// if not building then
56124: LD_VAR 0 1
56128: NOT
56129: IFFALSE 56133
// exit ;
56131: GO 56176
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
56133: LD_ADDR_VAR 0 2
56137: PUSH
56138: LD_VAR 0 1
56142: PUSH
56143: LD_INT 22
56145: PUSH
56146: LD_VAR 0 1
56150: PPUSH
56151: CALL_OW 255
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 58
56162: PUSH
56163: EMPTY
56164: LIST
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PPUSH
56170: CALL_OW 69
56174: IN
56175: ST_TO_ADDR
// end ;
56176: LD_VAR 0 2
56180: RET
// export function IsNotFull ( building ) ; var places ; begin
56181: LD_INT 0
56183: PPUSH
56184: PPUSH
// if not building then
56185: LD_VAR 0 1
56189: NOT
56190: IFFALSE 56194
// exit ;
56192: GO 56222
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
56194: LD_ADDR_VAR 0 2
56198: PUSH
56199: LD_VAR 0 1
56203: PPUSH
56204: LD_INT 3
56206: PUSH
56207: LD_INT 62
56209: PUSH
56210: EMPTY
56211: LIST
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PPUSH
56217: CALL_OW 72
56221: ST_TO_ADDR
// end ;
56222: LD_VAR 0 2
56226: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
56227: LD_INT 0
56229: PPUSH
56230: PPUSH
56231: PPUSH
56232: PPUSH
// tmp := [ ] ;
56233: LD_ADDR_VAR 0 3
56237: PUSH
56238: EMPTY
56239: ST_TO_ADDR
// list := [ ] ;
56240: LD_ADDR_VAR 0 5
56244: PUSH
56245: EMPTY
56246: ST_TO_ADDR
// for i = 16 to 25 do
56247: LD_ADDR_VAR 0 4
56251: PUSH
56252: DOUBLE
56253: LD_INT 16
56255: DEC
56256: ST_TO_ADDR
56257: LD_INT 25
56259: PUSH
56260: FOR_TO
56261: IFFALSE 56334
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
56263: LD_ADDR_VAR 0 3
56267: PUSH
56268: LD_VAR 0 3
56272: PUSH
56273: LD_INT 22
56275: PUSH
56276: LD_VAR 0 1
56280: PPUSH
56281: CALL_OW 255
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 91
56292: PUSH
56293: LD_VAR 0 1
56297: PUSH
56298: LD_INT 6
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 30
56308: PUSH
56309: LD_VAR 0 4
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: LIST
56322: PUSH
56323: EMPTY
56324: LIST
56325: PPUSH
56326: CALL_OW 69
56330: ADD
56331: ST_TO_ADDR
56332: GO 56260
56334: POP
56335: POP
// for i = 1 to tmp do
56336: LD_ADDR_VAR 0 4
56340: PUSH
56341: DOUBLE
56342: LD_INT 1
56344: DEC
56345: ST_TO_ADDR
56346: LD_VAR 0 3
56350: PUSH
56351: FOR_TO
56352: IFFALSE 56440
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
56354: LD_ADDR_VAR 0 5
56358: PUSH
56359: LD_VAR 0 5
56363: PUSH
56364: LD_VAR 0 3
56368: PUSH
56369: LD_VAR 0 4
56373: ARRAY
56374: PPUSH
56375: CALL_OW 266
56379: PUSH
56380: LD_VAR 0 3
56384: PUSH
56385: LD_VAR 0 4
56389: ARRAY
56390: PPUSH
56391: CALL_OW 250
56395: PUSH
56396: LD_VAR 0 3
56400: PUSH
56401: LD_VAR 0 4
56405: ARRAY
56406: PPUSH
56407: CALL_OW 251
56411: PUSH
56412: LD_VAR 0 3
56416: PUSH
56417: LD_VAR 0 4
56421: ARRAY
56422: PPUSH
56423: CALL_OW 254
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: PUSH
56434: EMPTY
56435: LIST
56436: ADD
56437: ST_TO_ADDR
56438: GO 56351
56440: POP
56441: POP
// result := list ;
56442: LD_ADDR_VAR 0 2
56446: PUSH
56447: LD_VAR 0 5
56451: ST_TO_ADDR
// end ;
56452: LD_VAR 0 2
56456: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
56457: LD_INT 0
56459: PPUSH
56460: PPUSH
56461: PPUSH
56462: PPUSH
56463: PPUSH
56464: PPUSH
56465: PPUSH
// if not factory then
56466: LD_VAR 0 1
56470: NOT
56471: IFFALSE 56475
// exit ;
56473: GO 57068
// if control = control_apeman then
56475: LD_VAR 0 4
56479: PUSH
56480: LD_INT 5
56482: EQUAL
56483: IFFALSE 56592
// begin tmp := UnitsInside ( factory ) ;
56485: LD_ADDR_VAR 0 8
56489: PUSH
56490: LD_VAR 0 1
56494: PPUSH
56495: CALL_OW 313
56499: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
56500: LD_VAR 0 8
56504: PPUSH
56505: LD_INT 25
56507: PUSH
56508: LD_INT 12
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PPUSH
56515: CALL_OW 72
56519: NOT
56520: IFFALSE 56530
// control := control_manual ;
56522: LD_ADDR_VAR 0 4
56526: PUSH
56527: LD_INT 1
56529: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
56530: LD_ADDR_VAR 0 8
56534: PUSH
56535: LD_VAR 0 1
56539: PPUSH
56540: CALL 56227 0 1
56544: ST_TO_ADDR
// if tmp then
56545: LD_VAR 0 8
56549: IFFALSE 56592
// begin for i in tmp do
56551: LD_ADDR_VAR 0 7
56555: PUSH
56556: LD_VAR 0 8
56560: PUSH
56561: FOR_IN
56562: IFFALSE 56590
// if i [ 1 ] = b_ext_radio then
56564: LD_VAR 0 7
56568: PUSH
56569: LD_INT 1
56571: ARRAY
56572: PUSH
56573: LD_INT 22
56575: EQUAL
56576: IFFALSE 56588
// begin control := control_remote ;
56578: LD_ADDR_VAR 0 4
56582: PUSH
56583: LD_INT 2
56585: ST_TO_ADDR
// break ;
56586: GO 56590
// end ;
56588: GO 56561
56590: POP
56591: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
56592: LD_VAR 0 1
56596: PPUSH
56597: LD_VAR 0 2
56601: PPUSH
56602: LD_VAR 0 3
56606: PPUSH
56607: LD_VAR 0 4
56611: PPUSH
56612: LD_VAR 0 5
56616: PPUSH
56617: CALL_OW 448
56621: IFFALSE 56656
// begin result := [ chassis , engine , control , weapon ] ;
56623: LD_ADDR_VAR 0 6
56627: PUSH
56628: LD_VAR 0 2
56632: PUSH
56633: LD_VAR 0 3
56637: PUSH
56638: LD_VAR 0 4
56642: PUSH
56643: LD_VAR 0 5
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: ST_TO_ADDR
// exit ;
56654: GO 57068
// end ; _chassis := AvailableChassisList ( factory ) ;
56656: LD_ADDR_VAR 0 9
56660: PUSH
56661: LD_VAR 0 1
56665: PPUSH
56666: CALL_OW 475
56670: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
56671: LD_ADDR_VAR 0 11
56675: PUSH
56676: LD_VAR 0 1
56680: PPUSH
56681: CALL_OW 476
56685: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
56686: LD_ADDR_VAR 0 12
56690: PUSH
56691: LD_VAR 0 1
56695: PPUSH
56696: CALL_OW 477
56700: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
56701: LD_ADDR_VAR 0 10
56705: PUSH
56706: LD_VAR 0 1
56710: PPUSH
56711: CALL_OW 478
56715: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
56716: LD_VAR 0 9
56720: NOT
56721: PUSH
56722: LD_VAR 0 11
56726: NOT
56727: OR
56728: PUSH
56729: LD_VAR 0 12
56733: NOT
56734: OR
56735: PUSH
56736: LD_VAR 0 10
56740: NOT
56741: OR
56742: IFFALSE 56777
// begin result := [ chassis , engine , control , weapon ] ;
56744: LD_ADDR_VAR 0 6
56748: PUSH
56749: LD_VAR 0 2
56753: PUSH
56754: LD_VAR 0 3
56758: PUSH
56759: LD_VAR 0 4
56763: PUSH
56764: LD_VAR 0 5
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: ST_TO_ADDR
// exit ;
56775: GO 57068
// end ; if not chassis in _chassis then
56777: LD_VAR 0 2
56781: PUSH
56782: LD_VAR 0 9
56786: IN
56787: NOT
56788: IFFALSE 56814
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
56790: LD_ADDR_VAR 0 2
56794: PUSH
56795: LD_VAR 0 9
56799: PUSH
56800: LD_INT 1
56802: PPUSH
56803: LD_VAR 0 9
56807: PPUSH
56808: CALL_OW 12
56812: ARRAY
56813: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
56814: LD_VAR 0 2
56818: PPUSH
56819: LD_VAR 0 3
56823: PPUSH
56824: CALL 57073 0 2
56828: NOT
56829: IFFALSE 56888
// repeat engine := _engine [ 1 ] ;
56831: LD_ADDR_VAR 0 3
56835: PUSH
56836: LD_VAR 0 11
56840: PUSH
56841: LD_INT 1
56843: ARRAY
56844: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
56845: LD_ADDR_VAR 0 11
56849: PUSH
56850: LD_VAR 0 11
56854: PPUSH
56855: LD_INT 1
56857: PPUSH
56858: CALL_OW 3
56862: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
56863: LD_VAR 0 2
56867: PPUSH
56868: LD_VAR 0 3
56872: PPUSH
56873: CALL 57073 0 2
56877: PUSH
56878: LD_VAR 0 11
56882: PUSH
56883: EMPTY
56884: EQUAL
56885: OR
56886: IFFALSE 56831
// if not control in _control then
56888: LD_VAR 0 4
56892: PUSH
56893: LD_VAR 0 12
56897: IN
56898: NOT
56899: IFFALSE 56925
// control := _control [ rand ( 1 , _control ) ] ;
56901: LD_ADDR_VAR 0 4
56905: PUSH
56906: LD_VAR 0 12
56910: PUSH
56911: LD_INT 1
56913: PPUSH
56914: LD_VAR 0 12
56918: PPUSH
56919: CALL_OW 12
56923: ARRAY
56924: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
56925: LD_VAR 0 2
56929: PPUSH
56930: LD_VAR 0 5
56934: PPUSH
56935: CALL 57293 0 2
56939: NOT
56940: IFFALSE 56999
// repeat weapon := _weapon [ 1 ] ;
56942: LD_ADDR_VAR 0 5
56946: PUSH
56947: LD_VAR 0 10
56951: PUSH
56952: LD_INT 1
56954: ARRAY
56955: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
56956: LD_ADDR_VAR 0 10
56960: PUSH
56961: LD_VAR 0 10
56965: PPUSH
56966: LD_INT 1
56968: PPUSH
56969: CALL_OW 3
56973: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
56974: LD_VAR 0 2
56978: PPUSH
56979: LD_VAR 0 5
56983: PPUSH
56984: CALL 57293 0 2
56988: PUSH
56989: LD_VAR 0 10
56993: PUSH
56994: EMPTY
56995: EQUAL
56996: OR
56997: IFFALSE 56942
// result := [ ] ;
56999: LD_ADDR_VAR 0 6
57003: PUSH
57004: EMPTY
57005: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
57006: LD_VAR 0 1
57010: PPUSH
57011: LD_VAR 0 2
57015: PPUSH
57016: LD_VAR 0 3
57020: PPUSH
57021: LD_VAR 0 4
57025: PPUSH
57026: LD_VAR 0 5
57030: PPUSH
57031: CALL_OW 448
57035: IFFALSE 57068
// result := [ chassis , engine , control , weapon ] ;
57037: LD_ADDR_VAR 0 6
57041: PUSH
57042: LD_VAR 0 2
57046: PUSH
57047: LD_VAR 0 3
57051: PUSH
57052: LD_VAR 0 4
57056: PUSH
57057: LD_VAR 0 5
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: ST_TO_ADDR
// end ;
57068: LD_VAR 0 6
57072: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
57073: LD_INT 0
57075: PPUSH
// if not chassis or not engine then
57076: LD_VAR 0 1
57080: NOT
57081: PUSH
57082: LD_VAR 0 2
57086: NOT
57087: OR
57088: IFFALSE 57092
// exit ;
57090: GO 57288
// case engine of engine_solar :
57092: LD_VAR 0 2
57096: PUSH
57097: LD_INT 2
57099: DOUBLE
57100: EQUAL
57101: IFTRUE 57105
57103: GO 57143
57105: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
57106: LD_ADDR_VAR 0 3
57110: PUSH
57111: LD_INT 11
57113: PUSH
57114: LD_INT 12
57116: PUSH
57117: LD_INT 13
57119: PUSH
57120: LD_INT 14
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: LD_INT 2
57128: PUSH
57129: LD_INT 3
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: ST_TO_ADDR
57141: GO 57272
57143: LD_INT 1
57145: DOUBLE
57146: EQUAL
57147: IFTRUE 57151
57149: GO 57213
57151: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
57152: LD_ADDR_VAR 0 3
57156: PUSH
57157: LD_INT 11
57159: PUSH
57160: LD_INT 12
57162: PUSH
57163: LD_INT 13
57165: PUSH
57166: LD_INT 14
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: LD_INT 2
57174: PUSH
57175: LD_INT 3
57177: PUSH
57178: LD_INT 4
57180: PUSH
57181: LD_INT 5
57183: PUSH
57184: LD_INT 21
57186: PUSH
57187: LD_INT 23
57189: PUSH
57190: LD_INT 22
57192: PUSH
57193: LD_INT 24
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: ST_TO_ADDR
57211: GO 57272
57213: LD_INT 3
57215: DOUBLE
57216: EQUAL
57217: IFTRUE 57221
57219: GO 57271
57221: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
57222: LD_ADDR_VAR 0 3
57226: PUSH
57227: LD_INT 13
57229: PUSH
57230: LD_INT 14
57232: PUSH
57233: LD_INT 2
57235: PUSH
57236: LD_INT 3
57238: PUSH
57239: LD_INT 4
57241: PUSH
57242: LD_INT 5
57244: PUSH
57245: LD_INT 21
57247: PUSH
57248: LD_INT 22
57250: PUSH
57251: LD_INT 23
57253: PUSH
57254: LD_INT 24
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: ST_TO_ADDR
57269: GO 57272
57271: POP
// result := ( chassis in result ) ;
57272: LD_ADDR_VAR 0 3
57276: PUSH
57277: LD_VAR 0 1
57281: PUSH
57282: LD_VAR 0 3
57286: IN
57287: ST_TO_ADDR
// end ;
57288: LD_VAR 0 3
57292: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
57293: LD_INT 0
57295: PPUSH
// if not chassis or not weapon then
57296: LD_VAR 0 1
57300: NOT
57301: PUSH
57302: LD_VAR 0 2
57306: NOT
57307: OR
57308: IFFALSE 57312
// exit ;
57310: GO 58372
// case weapon of us_machine_gun :
57312: LD_VAR 0 2
57316: PUSH
57317: LD_INT 2
57319: DOUBLE
57320: EQUAL
57321: IFTRUE 57325
57323: GO 57355
57325: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
57326: LD_ADDR_VAR 0 3
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: LD_INT 2
57336: PUSH
57337: LD_INT 3
57339: PUSH
57340: LD_INT 4
57342: PUSH
57343: LD_INT 5
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: ST_TO_ADDR
57353: GO 58356
57355: LD_INT 3
57357: DOUBLE
57358: EQUAL
57359: IFTRUE 57363
57361: GO 57393
57363: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
57364: LD_ADDR_VAR 0 3
57368: PUSH
57369: LD_INT 1
57371: PUSH
57372: LD_INT 2
57374: PUSH
57375: LD_INT 3
57377: PUSH
57378: LD_INT 4
57380: PUSH
57381: LD_INT 5
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: ST_TO_ADDR
57391: GO 58356
57393: LD_INT 11
57395: DOUBLE
57396: EQUAL
57397: IFTRUE 57401
57399: GO 57431
57401: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
57402: LD_ADDR_VAR 0 3
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: LD_INT 2
57412: PUSH
57413: LD_INT 3
57415: PUSH
57416: LD_INT 4
57418: PUSH
57419: LD_INT 5
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: ST_TO_ADDR
57429: GO 58356
57431: LD_INT 4
57433: DOUBLE
57434: EQUAL
57435: IFTRUE 57439
57437: GO 57465
57439: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
57440: LD_ADDR_VAR 0 3
57444: PUSH
57445: LD_INT 2
57447: PUSH
57448: LD_INT 3
57450: PUSH
57451: LD_INT 4
57453: PUSH
57454: LD_INT 5
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: ST_TO_ADDR
57463: GO 58356
57465: LD_INT 5
57467: DOUBLE
57468: EQUAL
57469: IFTRUE 57473
57471: GO 57499
57473: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
57474: LD_ADDR_VAR 0 3
57478: PUSH
57479: LD_INT 2
57481: PUSH
57482: LD_INT 3
57484: PUSH
57485: LD_INT 4
57487: PUSH
57488: LD_INT 5
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: ST_TO_ADDR
57497: GO 58356
57499: LD_INT 9
57501: DOUBLE
57502: EQUAL
57503: IFTRUE 57507
57505: GO 57533
57507: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
57508: LD_ADDR_VAR 0 3
57512: PUSH
57513: LD_INT 2
57515: PUSH
57516: LD_INT 3
57518: PUSH
57519: LD_INT 4
57521: PUSH
57522: LD_INT 5
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: ST_TO_ADDR
57531: GO 58356
57533: LD_INT 7
57535: DOUBLE
57536: EQUAL
57537: IFTRUE 57541
57539: GO 57567
57541: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
57542: LD_ADDR_VAR 0 3
57546: PUSH
57547: LD_INT 2
57549: PUSH
57550: LD_INT 3
57552: PUSH
57553: LD_INT 4
57555: PUSH
57556: LD_INT 5
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: ST_TO_ADDR
57565: GO 58356
57567: LD_INT 12
57569: DOUBLE
57570: EQUAL
57571: IFTRUE 57575
57573: GO 57601
57575: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
57576: LD_ADDR_VAR 0 3
57580: PUSH
57581: LD_INT 2
57583: PUSH
57584: LD_INT 3
57586: PUSH
57587: LD_INT 4
57589: PUSH
57590: LD_INT 5
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: ST_TO_ADDR
57599: GO 58356
57601: LD_INT 13
57603: DOUBLE
57604: EQUAL
57605: IFTRUE 57609
57607: GO 57635
57609: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
57610: LD_ADDR_VAR 0 3
57614: PUSH
57615: LD_INT 2
57617: PUSH
57618: LD_INT 3
57620: PUSH
57621: LD_INT 4
57623: PUSH
57624: LD_INT 5
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: ST_TO_ADDR
57633: GO 58356
57635: LD_INT 14
57637: DOUBLE
57638: EQUAL
57639: IFTRUE 57643
57641: GO 57661
57643: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
57644: LD_ADDR_VAR 0 3
57648: PUSH
57649: LD_INT 4
57651: PUSH
57652: LD_INT 5
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: ST_TO_ADDR
57659: GO 58356
57661: LD_INT 6
57663: DOUBLE
57664: EQUAL
57665: IFTRUE 57669
57667: GO 57687
57669: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
57670: LD_ADDR_VAR 0 3
57674: PUSH
57675: LD_INT 4
57677: PUSH
57678: LD_INT 5
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: ST_TO_ADDR
57685: GO 58356
57687: LD_INT 10
57689: DOUBLE
57690: EQUAL
57691: IFTRUE 57695
57693: GO 57713
57695: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
57696: LD_ADDR_VAR 0 3
57700: PUSH
57701: LD_INT 4
57703: PUSH
57704: LD_INT 5
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: ST_TO_ADDR
57711: GO 58356
57713: LD_INT 22
57715: DOUBLE
57716: EQUAL
57717: IFTRUE 57721
57719: GO 57747
57721: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
57722: LD_ADDR_VAR 0 3
57726: PUSH
57727: LD_INT 11
57729: PUSH
57730: LD_INT 12
57732: PUSH
57733: LD_INT 13
57735: PUSH
57736: LD_INT 14
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: ST_TO_ADDR
57745: GO 58356
57747: LD_INT 23
57749: DOUBLE
57750: EQUAL
57751: IFTRUE 57755
57753: GO 57781
57755: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
57756: LD_ADDR_VAR 0 3
57760: PUSH
57761: LD_INT 11
57763: PUSH
57764: LD_INT 12
57766: PUSH
57767: LD_INT 13
57769: PUSH
57770: LD_INT 14
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: ST_TO_ADDR
57779: GO 58356
57781: LD_INT 24
57783: DOUBLE
57784: EQUAL
57785: IFTRUE 57789
57787: GO 57815
57789: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
57790: LD_ADDR_VAR 0 3
57794: PUSH
57795: LD_INT 11
57797: PUSH
57798: LD_INT 12
57800: PUSH
57801: LD_INT 13
57803: PUSH
57804: LD_INT 14
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: ST_TO_ADDR
57813: GO 58356
57815: LD_INT 30
57817: DOUBLE
57818: EQUAL
57819: IFTRUE 57823
57821: GO 57849
57823: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
57824: LD_ADDR_VAR 0 3
57828: PUSH
57829: LD_INT 11
57831: PUSH
57832: LD_INT 12
57834: PUSH
57835: LD_INT 13
57837: PUSH
57838: LD_INT 14
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: ST_TO_ADDR
57847: GO 58356
57849: LD_INT 25
57851: DOUBLE
57852: EQUAL
57853: IFTRUE 57857
57855: GO 57875
57857: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
57858: LD_ADDR_VAR 0 3
57862: PUSH
57863: LD_INT 13
57865: PUSH
57866: LD_INT 14
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: ST_TO_ADDR
57873: GO 58356
57875: LD_INT 27
57877: DOUBLE
57878: EQUAL
57879: IFTRUE 57883
57881: GO 57901
57883: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
57884: LD_ADDR_VAR 0 3
57888: PUSH
57889: LD_INT 13
57891: PUSH
57892: LD_INT 14
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: ST_TO_ADDR
57899: GO 58356
57901: LD_INT 92
57903: DOUBLE
57904: EQUAL
57905: IFTRUE 57909
57907: GO 57935
57909: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
57910: LD_ADDR_VAR 0 3
57914: PUSH
57915: LD_INT 11
57917: PUSH
57918: LD_INT 12
57920: PUSH
57921: LD_INT 13
57923: PUSH
57924: LD_INT 14
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: ST_TO_ADDR
57933: GO 58356
57935: LD_INT 28
57937: DOUBLE
57938: EQUAL
57939: IFTRUE 57943
57941: GO 57961
57943: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
57944: LD_ADDR_VAR 0 3
57948: PUSH
57949: LD_INT 13
57951: PUSH
57952: LD_INT 14
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: ST_TO_ADDR
57959: GO 58356
57961: LD_INT 29
57963: DOUBLE
57964: EQUAL
57965: IFTRUE 57969
57967: GO 57987
57969: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
57970: LD_ADDR_VAR 0 3
57974: PUSH
57975: LD_INT 13
57977: PUSH
57978: LD_INT 14
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: ST_TO_ADDR
57985: GO 58356
57987: LD_INT 31
57989: DOUBLE
57990: EQUAL
57991: IFTRUE 57995
57993: GO 58013
57995: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
57996: LD_ADDR_VAR 0 3
58000: PUSH
58001: LD_INT 13
58003: PUSH
58004: LD_INT 14
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: ST_TO_ADDR
58011: GO 58356
58013: LD_INT 26
58015: DOUBLE
58016: EQUAL
58017: IFTRUE 58021
58019: GO 58039
58021: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
58022: LD_ADDR_VAR 0 3
58026: PUSH
58027: LD_INT 13
58029: PUSH
58030: LD_INT 14
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: ST_TO_ADDR
58037: GO 58356
58039: LD_INT 42
58041: DOUBLE
58042: EQUAL
58043: IFTRUE 58047
58045: GO 58073
58047: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
58048: LD_ADDR_VAR 0 3
58052: PUSH
58053: LD_INT 21
58055: PUSH
58056: LD_INT 22
58058: PUSH
58059: LD_INT 23
58061: PUSH
58062: LD_INT 24
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: ST_TO_ADDR
58071: GO 58356
58073: LD_INT 43
58075: DOUBLE
58076: EQUAL
58077: IFTRUE 58081
58079: GO 58107
58081: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
58082: LD_ADDR_VAR 0 3
58086: PUSH
58087: LD_INT 21
58089: PUSH
58090: LD_INT 22
58092: PUSH
58093: LD_INT 23
58095: PUSH
58096: LD_INT 24
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: ST_TO_ADDR
58105: GO 58356
58107: LD_INT 44
58109: DOUBLE
58110: EQUAL
58111: IFTRUE 58115
58113: GO 58141
58115: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
58116: LD_ADDR_VAR 0 3
58120: PUSH
58121: LD_INT 21
58123: PUSH
58124: LD_INT 22
58126: PUSH
58127: LD_INT 23
58129: PUSH
58130: LD_INT 24
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: ST_TO_ADDR
58139: GO 58356
58141: LD_INT 45
58143: DOUBLE
58144: EQUAL
58145: IFTRUE 58149
58147: GO 58175
58149: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
58150: LD_ADDR_VAR 0 3
58154: PUSH
58155: LD_INT 21
58157: PUSH
58158: LD_INT 22
58160: PUSH
58161: LD_INT 23
58163: PUSH
58164: LD_INT 24
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: ST_TO_ADDR
58173: GO 58356
58175: LD_INT 49
58177: DOUBLE
58178: EQUAL
58179: IFTRUE 58183
58181: GO 58209
58183: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
58184: LD_ADDR_VAR 0 3
58188: PUSH
58189: LD_INT 21
58191: PUSH
58192: LD_INT 22
58194: PUSH
58195: LD_INT 23
58197: PUSH
58198: LD_INT 24
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: ST_TO_ADDR
58207: GO 58356
58209: LD_INT 51
58211: DOUBLE
58212: EQUAL
58213: IFTRUE 58217
58215: GO 58243
58217: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
58218: LD_ADDR_VAR 0 3
58222: PUSH
58223: LD_INT 21
58225: PUSH
58226: LD_INT 22
58228: PUSH
58229: LD_INT 23
58231: PUSH
58232: LD_INT 24
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: ST_TO_ADDR
58241: GO 58356
58243: LD_INT 52
58245: DOUBLE
58246: EQUAL
58247: IFTRUE 58251
58249: GO 58277
58251: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
58252: LD_ADDR_VAR 0 3
58256: PUSH
58257: LD_INT 21
58259: PUSH
58260: LD_INT 22
58262: PUSH
58263: LD_INT 23
58265: PUSH
58266: LD_INT 24
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: ST_TO_ADDR
58275: GO 58356
58277: LD_INT 53
58279: DOUBLE
58280: EQUAL
58281: IFTRUE 58285
58283: GO 58303
58285: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
58286: LD_ADDR_VAR 0 3
58290: PUSH
58291: LD_INT 23
58293: PUSH
58294: LD_INT 24
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: ST_TO_ADDR
58301: GO 58356
58303: LD_INT 46
58305: DOUBLE
58306: EQUAL
58307: IFTRUE 58311
58309: GO 58329
58311: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
58312: LD_ADDR_VAR 0 3
58316: PUSH
58317: LD_INT 23
58319: PUSH
58320: LD_INT 24
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: ST_TO_ADDR
58327: GO 58356
58329: LD_INT 47
58331: DOUBLE
58332: EQUAL
58333: IFTRUE 58337
58335: GO 58355
58337: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
58338: LD_ADDR_VAR 0 3
58342: PUSH
58343: LD_INT 23
58345: PUSH
58346: LD_INT 24
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: ST_TO_ADDR
58353: GO 58356
58355: POP
// result := ( chassis in result ) ;
58356: LD_ADDR_VAR 0 3
58360: PUSH
58361: LD_VAR 0 1
58365: PUSH
58366: LD_VAR 0 3
58370: IN
58371: ST_TO_ADDR
// end ;
58372: LD_VAR 0 3
58376: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
58377: LD_INT 0
58379: PPUSH
58380: PPUSH
58381: PPUSH
58382: PPUSH
58383: PPUSH
58384: PPUSH
58385: PPUSH
// result := array ;
58386: LD_ADDR_VAR 0 5
58390: PUSH
58391: LD_VAR 0 1
58395: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
58396: LD_VAR 0 1
58400: NOT
58401: PUSH
58402: LD_VAR 0 2
58406: NOT
58407: OR
58408: PUSH
58409: LD_VAR 0 3
58413: NOT
58414: OR
58415: PUSH
58416: LD_VAR 0 2
58420: PUSH
58421: LD_VAR 0 1
58425: GREATER
58426: OR
58427: PUSH
58428: LD_VAR 0 3
58432: PUSH
58433: LD_VAR 0 1
58437: GREATER
58438: OR
58439: IFFALSE 58443
// exit ;
58441: GO 58739
// if direction then
58443: LD_VAR 0 4
58447: IFFALSE 58511
// begin d := 1 ;
58449: LD_ADDR_VAR 0 9
58453: PUSH
58454: LD_INT 1
58456: ST_TO_ADDR
// if i_from > i_to then
58457: LD_VAR 0 2
58461: PUSH
58462: LD_VAR 0 3
58466: GREATER
58467: IFFALSE 58493
// length := ( array - i_from ) + i_to else
58469: LD_ADDR_VAR 0 11
58473: PUSH
58474: LD_VAR 0 1
58478: PUSH
58479: LD_VAR 0 2
58483: MINUS
58484: PUSH
58485: LD_VAR 0 3
58489: PLUS
58490: ST_TO_ADDR
58491: GO 58509
// length := i_to - i_from ;
58493: LD_ADDR_VAR 0 11
58497: PUSH
58498: LD_VAR 0 3
58502: PUSH
58503: LD_VAR 0 2
58507: MINUS
58508: ST_TO_ADDR
// end else
58509: GO 58572
// begin d := - 1 ;
58511: LD_ADDR_VAR 0 9
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: ST_TO_ADDR
// if i_from > i_to then
58520: LD_VAR 0 2
58524: PUSH
58525: LD_VAR 0 3
58529: GREATER
58530: IFFALSE 58550
// length := i_from - i_to else
58532: LD_ADDR_VAR 0 11
58536: PUSH
58537: LD_VAR 0 2
58541: PUSH
58542: LD_VAR 0 3
58546: MINUS
58547: ST_TO_ADDR
58548: GO 58572
// length := ( array - i_to ) + i_from ;
58550: LD_ADDR_VAR 0 11
58554: PUSH
58555: LD_VAR 0 1
58559: PUSH
58560: LD_VAR 0 3
58564: MINUS
58565: PUSH
58566: LD_VAR 0 2
58570: PLUS
58571: ST_TO_ADDR
// end ; if not length then
58572: LD_VAR 0 11
58576: NOT
58577: IFFALSE 58581
// exit ;
58579: GO 58739
// tmp := array ;
58581: LD_ADDR_VAR 0 10
58585: PUSH
58586: LD_VAR 0 1
58590: ST_TO_ADDR
// for i = 1 to length do
58591: LD_ADDR_VAR 0 6
58595: PUSH
58596: DOUBLE
58597: LD_INT 1
58599: DEC
58600: ST_TO_ADDR
58601: LD_VAR 0 11
58605: PUSH
58606: FOR_TO
58607: IFFALSE 58727
// begin for j = 1 to array do
58609: LD_ADDR_VAR 0 7
58613: PUSH
58614: DOUBLE
58615: LD_INT 1
58617: DEC
58618: ST_TO_ADDR
58619: LD_VAR 0 1
58623: PUSH
58624: FOR_TO
58625: IFFALSE 58713
// begin k := j + d ;
58627: LD_ADDR_VAR 0 8
58631: PUSH
58632: LD_VAR 0 7
58636: PUSH
58637: LD_VAR 0 9
58641: PLUS
58642: ST_TO_ADDR
// if k > array then
58643: LD_VAR 0 8
58647: PUSH
58648: LD_VAR 0 1
58652: GREATER
58653: IFFALSE 58663
// k := 1 ;
58655: LD_ADDR_VAR 0 8
58659: PUSH
58660: LD_INT 1
58662: ST_TO_ADDR
// if not k then
58663: LD_VAR 0 8
58667: NOT
58668: IFFALSE 58680
// k := array ;
58670: LD_ADDR_VAR 0 8
58674: PUSH
58675: LD_VAR 0 1
58679: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
58680: LD_ADDR_VAR 0 10
58684: PUSH
58685: LD_VAR 0 10
58689: PPUSH
58690: LD_VAR 0 8
58694: PPUSH
58695: LD_VAR 0 1
58699: PUSH
58700: LD_VAR 0 7
58704: ARRAY
58705: PPUSH
58706: CALL_OW 1
58710: ST_TO_ADDR
// end ;
58711: GO 58624
58713: POP
58714: POP
// array := tmp ;
58715: LD_ADDR_VAR 0 1
58719: PUSH
58720: LD_VAR 0 10
58724: ST_TO_ADDR
// end ;
58725: GO 58606
58727: POP
58728: POP
// result := array ;
58729: LD_ADDR_VAR 0 5
58733: PUSH
58734: LD_VAR 0 1
58738: ST_TO_ADDR
// end ;
58739: LD_VAR 0 5
58743: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
58744: LD_INT 0
58746: PPUSH
58747: PPUSH
// result := 0 ;
58748: LD_ADDR_VAR 0 3
58752: PUSH
58753: LD_INT 0
58755: ST_TO_ADDR
// if not array or not value in array then
58756: LD_VAR 0 1
58760: NOT
58761: PUSH
58762: LD_VAR 0 2
58766: PUSH
58767: LD_VAR 0 1
58771: IN
58772: NOT
58773: OR
58774: IFFALSE 58778
// exit ;
58776: GO 58832
// for i = 1 to array do
58778: LD_ADDR_VAR 0 4
58782: PUSH
58783: DOUBLE
58784: LD_INT 1
58786: DEC
58787: ST_TO_ADDR
58788: LD_VAR 0 1
58792: PUSH
58793: FOR_TO
58794: IFFALSE 58830
// if value = array [ i ] then
58796: LD_VAR 0 2
58800: PUSH
58801: LD_VAR 0 1
58805: PUSH
58806: LD_VAR 0 4
58810: ARRAY
58811: EQUAL
58812: IFFALSE 58828
// begin result := i ;
58814: LD_ADDR_VAR 0 3
58818: PUSH
58819: LD_VAR 0 4
58823: ST_TO_ADDR
// exit ;
58824: POP
58825: POP
58826: GO 58832
// end ;
58828: GO 58793
58830: POP
58831: POP
// end ;
58832: LD_VAR 0 3
58836: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
58837: LD_INT 0
58839: PPUSH
// vc_chassis := chassis ;
58840: LD_ADDR_OWVAR 37
58844: PUSH
58845: LD_VAR 0 1
58849: ST_TO_ADDR
// vc_engine := engine ;
58850: LD_ADDR_OWVAR 39
58854: PUSH
58855: LD_VAR 0 2
58859: ST_TO_ADDR
// vc_control := control ;
58860: LD_ADDR_OWVAR 38
58864: PUSH
58865: LD_VAR 0 3
58869: ST_TO_ADDR
// vc_weapon := weapon ;
58870: LD_ADDR_OWVAR 40
58874: PUSH
58875: LD_VAR 0 4
58879: ST_TO_ADDR
// vc_fuel_battery := fuel ;
58880: LD_ADDR_OWVAR 41
58884: PUSH
58885: LD_VAR 0 5
58889: ST_TO_ADDR
// end ;
58890: LD_VAR 0 6
58894: RET
// export function WantPlant ( unit ) ; var task ; begin
58895: LD_INT 0
58897: PPUSH
58898: PPUSH
// result := false ;
58899: LD_ADDR_VAR 0 2
58903: PUSH
58904: LD_INT 0
58906: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
58907: LD_ADDR_VAR 0 3
58911: PUSH
58912: LD_VAR 0 1
58916: PPUSH
58917: CALL_OW 437
58921: ST_TO_ADDR
// if task then
58922: LD_VAR 0 3
58926: IFFALSE 58954
// if task [ 1 ] [ 1 ] = p then
58928: LD_VAR 0 3
58932: PUSH
58933: LD_INT 1
58935: ARRAY
58936: PUSH
58937: LD_INT 1
58939: ARRAY
58940: PUSH
58941: LD_STRING p
58943: EQUAL
58944: IFFALSE 58954
// result := true ;
58946: LD_ADDR_VAR 0 2
58950: PUSH
58951: LD_INT 1
58953: ST_TO_ADDR
// end ;
58954: LD_VAR 0 2
58958: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
58959: LD_INT 0
58961: PPUSH
58962: PPUSH
58963: PPUSH
58964: PPUSH
// if pos < 1 then
58965: LD_VAR 0 2
58969: PUSH
58970: LD_INT 1
58972: LESS
58973: IFFALSE 58977
// exit ;
58975: GO 59280
// if pos = 1 then
58977: LD_VAR 0 2
58981: PUSH
58982: LD_INT 1
58984: EQUAL
58985: IFFALSE 59018
// result := Replace ( arr , pos [ 1 ] , value ) else
58987: LD_ADDR_VAR 0 4
58991: PUSH
58992: LD_VAR 0 1
58996: PPUSH
58997: LD_VAR 0 2
59001: PUSH
59002: LD_INT 1
59004: ARRAY
59005: PPUSH
59006: LD_VAR 0 3
59010: PPUSH
59011: CALL_OW 1
59015: ST_TO_ADDR
59016: GO 59280
// begin tmp := arr ;
59018: LD_ADDR_VAR 0 6
59022: PUSH
59023: LD_VAR 0 1
59027: ST_TO_ADDR
// s_arr := [ tmp ] ;
59028: LD_ADDR_VAR 0 7
59032: PUSH
59033: LD_VAR 0 6
59037: PUSH
59038: EMPTY
59039: LIST
59040: ST_TO_ADDR
// for i = 1 to pos - 1 do
59041: LD_ADDR_VAR 0 5
59045: PUSH
59046: DOUBLE
59047: LD_INT 1
59049: DEC
59050: ST_TO_ADDR
59051: LD_VAR 0 2
59055: PUSH
59056: LD_INT 1
59058: MINUS
59059: PUSH
59060: FOR_TO
59061: IFFALSE 59106
// begin tmp := tmp [ pos [ i ] ] ;
59063: LD_ADDR_VAR 0 6
59067: PUSH
59068: LD_VAR 0 6
59072: PUSH
59073: LD_VAR 0 2
59077: PUSH
59078: LD_VAR 0 5
59082: ARRAY
59083: ARRAY
59084: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
59085: LD_ADDR_VAR 0 7
59089: PUSH
59090: LD_VAR 0 7
59094: PUSH
59095: LD_VAR 0 6
59099: PUSH
59100: EMPTY
59101: LIST
59102: ADD
59103: ST_TO_ADDR
// end ;
59104: GO 59060
59106: POP
59107: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
59108: LD_ADDR_VAR 0 6
59112: PUSH
59113: LD_VAR 0 6
59117: PPUSH
59118: LD_VAR 0 2
59122: PUSH
59123: LD_VAR 0 2
59127: ARRAY
59128: PPUSH
59129: LD_VAR 0 3
59133: PPUSH
59134: CALL_OW 1
59138: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
59139: LD_ADDR_VAR 0 7
59143: PUSH
59144: LD_VAR 0 7
59148: PPUSH
59149: LD_VAR 0 7
59153: PPUSH
59154: LD_VAR 0 6
59158: PPUSH
59159: CALL_OW 1
59163: ST_TO_ADDR
// for i = s_arr downto 2 do
59164: LD_ADDR_VAR 0 5
59168: PUSH
59169: DOUBLE
59170: LD_VAR 0 7
59174: INC
59175: ST_TO_ADDR
59176: LD_INT 2
59178: PUSH
59179: FOR_DOWNTO
59180: IFFALSE 59264
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
59182: LD_ADDR_VAR 0 6
59186: PUSH
59187: LD_VAR 0 7
59191: PUSH
59192: LD_VAR 0 5
59196: PUSH
59197: LD_INT 1
59199: MINUS
59200: ARRAY
59201: PPUSH
59202: LD_VAR 0 2
59206: PUSH
59207: LD_VAR 0 5
59211: PUSH
59212: LD_INT 1
59214: MINUS
59215: ARRAY
59216: PPUSH
59217: LD_VAR 0 7
59221: PUSH
59222: LD_VAR 0 5
59226: ARRAY
59227: PPUSH
59228: CALL_OW 1
59232: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
59233: LD_ADDR_VAR 0 7
59237: PUSH
59238: LD_VAR 0 7
59242: PPUSH
59243: LD_VAR 0 5
59247: PUSH
59248: LD_INT 1
59250: MINUS
59251: PPUSH
59252: LD_VAR 0 6
59256: PPUSH
59257: CALL_OW 1
59261: ST_TO_ADDR
// end ;
59262: GO 59179
59264: POP
59265: POP
// result := s_arr [ 1 ] ;
59266: LD_ADDR_VAR 0 4
59270: PUSH
59271: LD_VAR 0 7
59275: PUSH
59276: LD_INT 1
59278: ARRAY
59279: ST_TO_ADDR
// end ; end ;
59280: LD_VAR 0 4
59284: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
59285: LD_INT 0
59287: PPUSH
59288: PPUSH
// if not list then
59289: LD_VAR 0 1
59293: NOT
59294: IFFALSE 59298
// exit ;
59296: GO 59389
// i := list [ pos1 ] ;
59298: LD_ADDR_VAR 0 5
59302: PUSH
59303: LD_VAR 0 1
59307: PUSH
59308: LD_VAR 0 2
59312: ARRAY
59313: ST_TO_ADDR
// if not i then
59314: LD_VAR 0 5
59318: NOT
59319: IFFALSE 59323
// exit ;
59321: GO 59389
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
59323: LD_ADDR_VAR 0 1
59327: PUSH
59328: LD_VAR 0 1
59332: PPUSH
59333: LD_VAR 0 2
59337: PPUSH
59338: LD_VAR 0 1
59342: PUSH
59343: LD_VAR 0 3
59347: ARRAY
59348: PPUSH
59349: CALL_OW 1
59353: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
59354: LD_ADDR_VAR 0 1
59358: PUSH
59359: LD_VAR 0 1
59363: PPUSH
59364: LD_VAR 0 3
59368: PPUSH
59369: LD_VAR 0 5
59373: PPUSH
59374: CALL_OW 1
59378: ST_TO_ADDR
// result := list ;
59379: LD_ADDR_VAR 0 4
59383: PUSH
59384: LD_VAR 0 1
59388: ST_TO_ADDR
// end ;
59389: LD_VAR 0 4
59393: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
59394: LD_INT 0
59396: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
59397: LD_ADDR_VAR 0 5
59401: PUSH
59402: LD_VAR 0 1
59406: PPUSH
59407: CALL_OW 250
59411: PPUSH
59412: LD_VAR 0 1
59416: PPUSH
59417: CALL_OW 251
59421: PPUSH
59422: LD_VAR 0 2
59426: PPUSH
59427: LD_VAR 0 3
59431: PPUSH
59432: LD_VAR 0 4
59436: PPUSH
59437: CALL 59447 0 5
59441: ST_TO_ADDR
// end ;
59442: LD_VAR 0 5
59446: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
59447: LD_INT 0
59449: PPUSH
59450: PPUSH
59451: PPUSH
59452: PPUSH
// if not list then
59453: LD_VAR 0 3
59457: NOT
59458: IFFALSE 59462
// exit ;
59460: GO 59850
// result := [ ] ;
59462: LD_ADDR_VAR 0 6
59466: PUSH
59467: EMPTY
59468: ST_TO_ADDR
// for i in list do
59469: LD_ADDR_VAR 0 7
59473: PUSH
59474: LD_VAR 0 3
59478: PUSH
59479: FOR_IN
59480: IFFALSE 59682
// begin tmp := GetDistUnitXY ( i , x , y ) ;
59482: LD_ADDR_VAR 0 9
59486: PUSH
59487: LD_VAR 0 7
59491: PPUSH
59492: LD_VAR 0 1
59496: PPUSH
59497: LD_VAR 0 2
59501: PPUSH
59502: CALL_OW 297
59506: ST_TO_ADDR
// if not result then
59507: LD_VAR 0 6
59511: NOT
59512: IFFALSE 59538
// result := [ [ i , tmp ] ] else
59514: LD_ADDR_VAR 0 6
59518: PUSH
59519: LD_VAR 0 7
59523: PUSH
59524: LD_VAR 0 9
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: EMPTY
59534: LIST
59535: ST_TO_ADDR
59536: GO 59680
// begin if result [ result ] [ 2 ] < tmp then
59538: LD_VAR 0 6
59542: PUSH
59543: LD_VAR 0 6
59547: ARRAY
59548: PUSH
59549: LD_INT 2
59551: ARRAY
59552: PUSH
59553: LD_VAR 0 9
59557: LESS
59558: IFFALSE 59600
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
59560: LD_ADDR_VAR 0 6
59564: PUSH
59565: LD_VAR 0 6
59569: PPUSH
59570: LD_VAR 0 6
59574: PUSH
59575: LD_INT 1
59577: PLUS
59578: PPUSH
59579: LD_VAR 0 7
59583: PUSH
59584: LD_VAR 0 9
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PPUSH
59593: CALL_OW 2
59597: ST_TO_ADDR
59598: GO 59680
// for j = 1 to result do
59600: LD_ADDR_VAR 0 8
59604: PUSH
59605: DOUBLE
59606: LD_INT 1
59608: DEC
59609: ST_TO_ADDR
59610: LD_VAR 0 6
59614: PUSH
59615: FOR_TO
59616: IFFALSE 59678
// begin if tmp < result [ j ] [ 2 ] then
59618: LD_VAR 0 9
59622: PUSH
59623: LD_VAR 0 6
59627: PUSH
59628: LD_VAR 0 8
59632: ARRAY
59633: PUSH
59634: LD_INT 2
59636: ARRAY
59637: LESS
59638: IFFALSE 59676
// begin result := Insert ( result , j , [ i , tmp ] ) ;
59640: LD_ADDR_VAR 0 6
59644: PUSH
59645: LD_VAR 0 6
59649: PPUSH
59650: LD_VAR 0 8
59654: PPUSH
59655: LD_VAR 0 7
59659: PUSH
59660: LD_VAR 0 9
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PPUSH
59669: CALL_OW 2
59673: ST_TO_ADDR
// break ;
59674: GO 59678
// end ; end ;
59676: GO 59615
59678: POP
59679: POP
// end ; end ;
59680: GO 59479
59682: POP
59683: POP
// if result and not asc then
59684: LD_VAR 0 6
59688: PUSH
59689: LD_VAR 0 4
59693: NOT
59694: AND
59695: IFFALSE 59770
// begin tmp := result ;
59697: LD_ADDR_VAR 0 9
59701: PUSH
59702: LD_VAR 0 6
59706: ST_TO_ADDR
// for i = tmp downto 1 do
59707: LD_ADDR_VAR 0 7
59711: PUSH
59712: DOUBLE
59713: LD_VAR 0 9
59717: INC
59718: ST_TO_ADDR
59719: LD_INT 1
59721: PUSH
59722: FOR_DOWNTO
59723: IFFALSE 59768
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
59725: LD_ADDR_VAR 0 6
59729: PUSH
59730: LD_VAR 0 6
59734: PPUSH
59735: LD_VAR 0 9
59739: PUSH
59740: LD_VAR 0 7
59744: MINUS
59745: PUSH
59746: LD_INT 1
59748: PLUS
59749: PPUSH
59750: LD_VAR 0 9
59754: PUSH
59755: LD_VAR 0 7
59759: ARRAY
59760: PPUSH
59761: CALL_OW 1
59765: ST_TO_ADDR
59766: GO 59722
59768: POP
59769: POP
// end ; tmp := [ ] ;
59770: LD_ADDR_VAR 0 9
59774: PUSH
59775: EMPTY
59776: ST_TO_ADDR
// if mode then
59777: LD_VAR 0 5
59781: IFFALSE 59850
// begin for i = 1 to result do
59783: LD_ADDR_VAR 0 7
59787: PUSH
59788: DOUBLE
59789: LD_INT 1
59791: DEC
59792: ST_TO_ADDR
59793: LD_VAR 0 6
59797: PUSH
59798: FOR_TO
59799: IFFALSE 59838
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
59801: LD_ADDR_VAR 0 9
59805: PUSH
59806: LD_VAR 0 9
59810: PPUSH
59811: LD_VAR 0 7
59815: PPUSH
59816: LD_VAR 0 6
59820: PUSH
59821: LD_VAR 0 7
59825: ARRAY
59826: PUSH
59827: LD_INT 1
59829: ARRAY
59830: PPUSH
59831: CALL_OW 1
59835: ST_TO_ADDR
59836: GO 59798
59838: POP
59839: POP
// result := tmp ;
59840: LD_ADDR_VAR 0 6
59844: PUSH
59845: LD_VAR 0 9
59849: ST_TO_ADDR
// end ; end ;
59850: LD_VAR 0 6
59854: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
59855: LD_INT 0
59857: PPUSH
59858: PPUSH
59859: PPUSH
59860: PPUSH
59861: PPUSH
59862: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
59863: LD_ADDR_VAR 0 5
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: LD_INT 0
59876: PUSH
59877: EMPTY
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: ST_TO_ADDR
// if not x or not y then
59885: LD_VAR 0 2
59889: NOT
59890: PUSH
59891: LD_VAR 0 3
59895: NOT
59896: OR
59897: IFFALSE 59901
// exit ;
59899: GO 61551
// if not range then
59901: LD_VAR 0 4
59905: NOT
59906: IFFALSE 59916
// range := 10 ;
59908: LD_ADDR_VAR 0 4
59912: PUSH
59913: LD_INT 10
59915: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
59916: LD_ADDR_VAR 0 8
59920: PUSH
59921: LD_INT 81
59923: PUSH
59924: LD_VAR 0 1
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 92
59935: PUSH
59936: LD_VAR 0 2
59940: PUSH
59941: LD_VAR 0 3
59945: PUSH
59946: LD_VAR 0 4
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 3
59959: PUSH
59960: LD_INT 21
59962: PUSH
59963: LD_INT 3
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: LIST
59978: PPUSH
59979: CALL_OW 69
59983: ST_TO_ADDR
// if not tmp then
59984: LD_VAR 0 8
59988: NOT
59989: IFFALSE 59993
// exit ;
59991: GO 61551
// for i in tmp do
59993: LD_ADDR_VAR 0 6
59997: PUSH
59998: LD_VAR 0 8
60002: PUSH
60003: FOR_IN
60004: IFFALSE 61526
// begin points := [ 0 , 0 , 0 ] ;
60006: LD_ADDR_VAR 0 9
60010: PUSH
60011: LD_INT 0
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: LIST
60024: ST_TO_ADDR
// bpoints := 1 ;
60025: LD_ADDR_VAR 0 10
60029: PUSH
60030: LD_INT 1
60032: ST_TO_ADDR
// case GetType ( i ) of unit_human :
60033: LD_VAR 0 6
60037: PPUSH
60038: CALL_OW 247
60042: PUSH
60043: LD_INT 1
60045: DOUBLE
60046: EQUAL
60047: IFTRUE 60051
60049: GO 60629
60051: POP
// begin if GetClass ( i ) = 1 then
60052: LD_VAR 0 6
60056: PPUSH
60057: CALL_OW 257
60061: PUSH
60062: LD_INT 1
60064: EQUAL
60065: IFFALSE 60086
// points := [ 10 , 5 , 3 ] ;
60067: LD_ADDR_VAR 0 9
60071: PUSH
60072: LD_INT 10
60074: PUSH
60075: LD_INT 5
60077: PUSH
60078: LD_INT 3
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: LIST
60085: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
60086: LD_VAR 0 6
60090: PPUSH
60091: CALL_OW 257
60095: PUSH
60096: LD_INT 2
60098: PUSH
60099: LD_INT 3
60101: PUSH
60102: LD_INT 4
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: LIST
60109: IN
60110: IFFALSE 60131
// points := [ 3 , 2 , 1 ] ;
60112: LD_ADDR_VAR 0 9
60116: PUSH
60117: LD_INT 3
60119: PUSH
60120: LD_INT 2
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: LIST
60130: ST_TO_ADDR
// if GetClass ( i ) = 5 then
60131: LD_VAR 0 6
60135: PPUSH
60136: CALL_OW 257
60140: PUSH
60141: LD_INT 5
60143: EQUAL
60144: IFFALSE 60165
// points := [ 130 , 5 , 2 ] ;
60146: LD_ADDR_VAR 0 9
60150: PUSH
60151: LD_INT 130
60153: PUSH
60154: LD_INT 5
60156: PUSH
60157: LD_INT 2
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: LIST
60164: ST_TO_ADDR
// if GetClass ( i ) = 8 then
60165: LD_VAR 0 6
60169: PPUSH
60170: CALL_OW 257
60174: PUSH
60175: LD_INT 8
60177: EQUAL
60178: IFFALSE 60199
// points := [ 35 , 35 , 30 ] ;
60180: LD_ADDR_VAR 0 9
60184: PUSH
60185: LD_INT 35
60187: PUSH
60188: LD_INT 35
60190: PUSH
60191: LD_INT 30
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: LIST
60198: ST_TO_ADDR
// if GetClass ( i ) = 9 then
60199: LD_VAR 0 6
60203: PPUSH
60204: CALL_OW 257
60208: PUSH
60209: LD_INT 9
60211: EQUAL
60212: IFFALSE 60233
// points := [ 20 , 55 , 40 ] ;
60214: LD_ADDR_VAR 0 9
60218: PUSH
60219: LD_INT 20
60221: PUSH
60222: LD_INT 55
60224: PUSH
60225: LD_INT 40
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: LIST
60232: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
60233: LD_VAR 0 6
60237: PPUSH
60238: CALL_OW 257
60242: PUSH
60243: LD_INT 12
60245: PUSH
60246: LD_INT 16
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: IN
60253: IFFALSE 60274
// points := [ 5 , 3 , 2 ] ;
60255: LD_ADDR_VAR 0 9
60259: PUSH
60260: LD_INT 5
60262: PUSH
60263: LD_INT 3
60265: PUSH
60266: LD_INT 2
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: LIST
60273: ST_TO_ADDR
// if GetClass ( i ) = 17 then
60274: LD_VAR 0 6
60278: PPUSH
60279: CALL_OW 257
60283: PUSH
60284: LD_INT 17
60286: EQUAL
60287: IFFALSE 60308
// points := [ 100 , 50 , 75 ] ;
60289: LD_ADDR_VAR 0 9
60293: PUSH
60294: LD_INT 100
60296: PUSH
60297: LD_INT 50
60299: PUSH
60300: LD_INT 75
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: LIST
60307: ST_TO_ADDR
// if GetClass ( i ) = 15 then
60308: LD_VAR 0 6
60312: PPUSH
60313: CALL_OW 257
60317: PUSH
60318: LD_INT 15
60320: EQUAL
60321: IFFALSE 60342
// points := [ 10 , 5 , 3 ] ;
60323: LD_ADDR_VAR 0 9
60327: PUSH
60328: LD_INT 10
60330: PUSH
60331: LD_INT 5
60333: PUSH
60334: LD_INT 3
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: LIST
60341: ST_TO_ADDR
// if GetClass ( i ) = 14 then
60342: LD_VAR 0 6
60346: PPUSH
60347: CALL_OW 257
60351: PUSH
60352: LD_INT 14
60354: EQUAL
60355: IFFALSE 60376
// points := [ 10 , 0 , 0 ] ;
60357: LD_ADDR_VAR 0 9
60361: PUSH
60362: LD_INT 10
60364: PUSH
60365: LD_INT 0
60367: PUSH
60368: LD_INT 0
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: LIST
60375: ST_TO_ADDR
// if GetClass ( i ) = 11 then
60376: LD_VAR 0 6
60380: PPUSH
60381: CALL_OW 257
60385: PUSH
60386: LD_INT 11
60388: EQUAL
60389: IFFALSE 60410
// points := [ 30 , 10 , 5 ] ;
60391: LD_ADDR_VAR 0 9
60395: PUSH
60396: LD_INT 30
60398: PUSH
60399: LD_INT 10
60401: PUSH
60402: LD_INT 5
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: LIST
60409: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
60410: LD_VAR 0 1
60414: PPUSH
60415: LD_INT 5
60417: PPUSH
60418: CALL_OW 321
60422: PUSH
60423: LD_INT 2
60425: EQUAL
60426: IFFALSE 60443
// bpoints := bpoints * 1.8 ;
60428: LD_ADDR_VAR 0 10
60432: PUSH
60433: LD_VAR 0 10
60437: PUSH
60438: LD_REAL  1.80000000000000E+0000
60441: MUL
60442: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
60443: LD_VAR 0 6
60447: PPUSH
60448: CALL_OW 257
60452: PUSH
60453: LD_INT 1
60455: PUSH
60456: LD_INT 2
60458: PUSH
60459: LD_INT 3
60461: PUSH
60462: LD_INT 4
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: IN
60471: PUSH
60472: LD_VAR 0 1
60476: PPUSH
60477: LD_INT 51
60479: PPUSH
60480: CALL_OW 321
60484: PUSH
60485: LD_INT 2
60487: EQUAL
60488: AND
60489: IFFALSE 60506
// bpoints := bpoints * 1.2 ;
60491: LD_ADDR_VAR 0 10
60495: PUSH
60496: LD_VAR 0 10
60500: PUSH
60501: LD_REAL  1.20000000000000E+0000
60504: MUL
60505: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
60506: LD_VAR 0 6
60510: PPUSH
60511: CALL_OW 257
60515: PUSH
60516: LD_INT 5
60518: PUSH
60519: LD_INT 7
60521: PUSH
60522: LD_INT 9
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: LIST
60529: IN
60530: PUSH
60531: LD_VAR 0 1
60535: PPUSH
60536: LD_INT 52
60538: PPUSH
60539: CALL_OW 321
60543: PUSH
60544: LD_INT 2
60546: EQUAL
60547: AND
60548: IFFALSE 60565
// bpoints := bpoints * 1.5 ;
60550: LD_ADDR_VAR 0 10
60554: PUSH
60555: LD_VAR 0 10
60559: PUSH
60560: LD_REAL  1.50000000000000E+0000
60563: MUL
60564: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
60565: LD_VAR 0 1
60569: PPUSH
60570: LD_INT 66
60572: PPUSH
60573: CALL_OW 321
60577: PUSH
60578: LD_INT 2
60580: EQUAL
60581: IFFALSE 60598
// bpoints := bpoints * 1.1 ;
60583: LD_ADDR_VAR 0 10
60587: PUSH
60588: LD_VAR 0 10
60592: PUSH
60593: LD_REAL  1.10000000000000E+0000
60596: MUL
60597: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
60598: LD_ADDR_VAR 0 10
60602: PUSH
60603: LD_VAR 0 10
60607: PUSH
60608: LD_VAR 0 6
60612: PPUSH
60613: LD_INT 1
60615: PPUSH
60616: CALL_OW 259
60620: PUSH
60621: LD_REAL  1.15000000000000E+0000
60624: MUL
60625: MUL
60626: ST_TO_ADDR
// end ; unit_vehicle :
60627: GO 61455
60629: LD_INT 2
60631: DOUBLE
60632: EQUAL
60633: IFTRUE 60637
60635: GO 61443
60637: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
60638: LD_VAR 0 6
60642: PPUSH
60643: CALL_OW 264
60647: PUSH
60648: LD_INT 2
60650: PUSH
60651: LD_INT 42
60653: PUSH
60654: LD_INT 24
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: LIST
60661: IN
60662: IFFALSE 60683
// points := [ 25 , 5 , 3 ] ;
60664: LD_ADDR_VAR 0 9
60668: PUSH
60669: LD_INT 25
60671: PUSH
60672: LD_INT 5
60674: PUSH
60675: LD_INT 3
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: LIST
60682: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
60683: LD_VAR 0 6
60687: PPUSH
60688: CALL_OW 264
60692: PUSH
60693: LD_INT 4
60695: PUSH
60696: LD_INT 43
60698: PUSH
60699: LD_INT 25
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: LIST
60706: IN
60707: IFFALSE 60728
// points := [ 40 , 15 , 5 ] ;
60709: LD_ADDR_VAR 0 9
60713: PUSH
60714: LD_INT 40
60716: PUSH
60717: LD_INT 15
60719: PUSH
60720: LD_INT 5
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: LIST
60727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
60728: LD_VAR 0 6
60732: PPUSH
60733: CALL_OW 264
60737: PUSH
60738: LD_INT 3
60740: PUSH
60741: LD_INT 23
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: IN
60748: IFFALSE 60769
// points := [ 7 , 25 , 8 ] ;
60750: LD_ADDR_VAR 0 9
60754: PUSH
60755: LD_INT 7
60757: PUSH
60758: LD_INT 25
60760: PUSH
60761: LD_INT 8
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: LIST
60768: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
60769: LD_VAR 0 6
60773: PPUSH
60774: CALL_OW 264
60778: PUSH
60779: LD_INT 5
60781: PUSH
60782: LD_INT 27
60784: PUSH
60785: LD_INT 44
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: LIST
60792: IN
60793: IFFALSE 60814
// points := [ 14 , 50 , 16 ] ;
60795: LD_ADDR_VAR 0 9
60799: PUSH
60800: LD_INT 14
60802: PUSH
60803: LD_INT 50
60805: PUSH
60806: LD_INT 16
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: LIST
60813: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
60814: LD_VAR 0 6
60818: PPUSH
60819: CALL_OW 264
60823: PUSH
60824: LD_INT 6
60826: PUSH
60827: LD_INT 46
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: IN
60834: IFFALSE 60855
// points := [ 32 , 120 , 70 ] ;
60836: LD_ADDR_VAR 0 9
60840: PUSH
60841: LD_INT 32
60843: PUSH
60844: LD_INT 120
60846: PUSH
60847: LD_INT 70
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: LIST
60854: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
60855: LD_VAR 0 6
60859: PPUSH
60860: CALL_OW 264
60864: PUSH
60865: LD_INT 7
60867: PUSH
60868: LD_INT 28
60870: PUSH
60871: LD_INT 45
60873: PUSH
60874: LD_INT 92
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: IN
60883: IFFALSE 60904
// points := [ 35 , 20 , 45 ] ;
60885: LD_ADDR_VAR 0 9
60889: PUSH
60890: LD_INT 35
60892: PUSH
60893: LD_INT 20
60895: PUSH
60896: LD_INT 45
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: LIST
60903: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
60904: LD_VAR 0 6
60908: PPUSH
60909: CALL_OW 264
60913: PUSH
60914: LD_INT 47
60916: PUSH
60917: EMPTY
60918: LIST
60919: IN
60920: IFFALSE 60941
// points := [ 67 , 45 , 75 ] ;
60922: LD_ADDR_VAR 0 9
60926: PUSH
60927: LD_INT 67
60929: PUSH
60930: LD_INT 45
60932: PUSH
60933: LD_INT 75
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: LIST
60940: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
60941: LD_VAR 0 6
60945: PPUSH
60946: CALL_OW 264
60950: PUSH
60951: LD_INT 26
60953: PUSH
60954: EMPTY
60955: LIST
60956: IN
60957: IFFALSE 60978
// points := [ 120 , 30 , 80 ] ;
60959: LD_ADDR_VAR 0 9
60963: PUSH
60964: LD_INT 120
60966: PUSH
60967: LD_INT 30
60969: PUSH
60970: LD_INT 80
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: LIST
60977: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
60978: LD_VAR 0 6
60982: PPUSH
60983: CALL_OW 264
60987: PUSH
60988: LD_INT 22
60990: PUSH
60991: EMPTY
60992: LIST
60993: IN
60994: IFFALSE 61015
// points := [ 40 , 1 , 1 ] ;
60996: LD_ADDR_VAR 0 9
61000: PUSH
61001: LD_INT 40
61003: PUSH
61004: LD_INT 1
61006: PUSH
61007: LD_INT 1
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: LIST
61014: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
61015: LD_VAR 0 6
61019: PPUSH
61020: CALL_OW 264
61024: PUSH
61025: LD_INT 29
61027: PUSH
61028: EMPTY
61029: LIST
61030: IN
61031: IFFALSE 61052
// points := [ 70 , 200 , 400 ] ;
61033: LD_ADDR_VAR 0 9
61037: PUSH
61038: LD_INT 70
61040: PUSH
61041: LD_INT 200
61043: PUSH
61044: LD_INT 400
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: LIST
61051: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
61052: LD_VAR 0 6
61056: PPUSH
61057: CALL_OW 264
61061: PUSH
61062: LD_INT 14
61064: PUSH
61065: LD_INT 53
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: IN
61072: IFFALSE 61093
// points := [ 40 , 10 , 20 ] ;
61074: LD_ADDR_VAR 0 9
61078: PUSH
61079: LD_INT 40
61081: PUSH
61082: LD_INT 10
61084: PUSH
61085: LD_INT 20
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: LIST
61092: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
61093: LD_VAR 0 6
61097: PPUSH
61098: CALL_OW 264
61102: PUSH
61103: LD_INT 9
61105: PUSH
61106: EMPTY
61107: LIST
61108: IN
61109: IFFALSE 61130
// points := [ 5 , 70 , 20 ] ;
61111: LD_ADDR_VAR 0 9
61115: PUSH
61116: LD_INT 5
61118: PUSH
61119: LD_INT 70
61121: PUSH
61122: LD_INT 20
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: LIST
61129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
61130: LD_VAR 0 6
61134: PPUSH
61135: CALL_OW 264
61139: PUSH
61140: LD_INT 10
61142: PUSH
61143: EMPTY
61144: LIST
61145: IN
61146: IFFALSE 61167
// points := [ 35 , 110 , 70 ] ;
61148: LD_ADDR_VAR 0 9
61152: PUSH
61153: LD_INT 35
61155: PUSH
61156: LD_INT 110
61158: PUSH
61159: LD_INT 70
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: LIST
61166: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
61167: LD_VAR 0 6
61171: PPUSH
61172: CALL_OW 265
61176: PUSH
61177: LD_INT 25
61179: EQUAL
61180: IFFALSE 61201
// points := [ 80 , 65 , 100 ] ;
61182: LD_ADDR_VAR 0 9
61186: PUSH
61187: LD_INT 80
61189: PUSH
61190: LD_INT 65
61192: PUSH
61193: LD_INT 100
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: LIST
61200: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
61201: LD_VAR 0 6
61205: PPUSH
61206: CALL_OW 263
61210: PUSH
61211: LD_INT 1
61213: EQUAL
61214: IFFALSE 61249
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
61216: LD_ADDR_VAR 0 10
61220: PUSH
61221: LD_VAR 0 10
61225: PUSH
61226: LD_VAR 0 6
61230: PPUSH
61231: CALL_OW 311
61235: PPUSH
61236: LD_INT 3
61238: PPUSH
61239: CALL_OW 259
61243: PUSH
61244: LD_INT 4
61246: MUL
61247: MUL
61248: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
61249: LD_VAR 0 6
61253: PPUSH
61254: CALL_OW 263
61258: PUSH
61259: LD_INT 2
61261: EQUAL
61262: IFFALSE 61313
// begin j := IsControledBy ( i ) ;
61264: LD_ADDR_VAR 0 7
61268: PUSH
61269: LD_VAR 0 6
61273: PPUSH
61274: CALL_OW 312
61278: ST_TO_ADDR
// if j then
61279: LD_VAR 0 7
61283: IFFALSE 61313
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
61285: LD_ADDR_VAR 0 10
61289: PUSH
61290: LD_VAR 0 10
61294: PUSH
61295: LD_VAR 0 7
61299: PPUSH
61300: LD_INT 3
61302: PPUSH
61303: CALL_OW 259
61307: PUSH
61308: LD_INT 3
61310: MUL
61311: MUL
61312: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
61313: LD_VAR 0 6
61317: PPUSH
61318: CALL_OW 264
61322: PUSH
61323: LD_INT 5
61325: PUSH
61326: LD_INT 6
61328: PUSH
61329: LD_INT 46
61331: PUSH
61332: LD_INT 44
61334: PUSH
61335: LD_INT 47
61337: PUSH
61338: LD_INT 45
61340: PUSH
61341: LD_INT 28
61343: PUSH
61344: LD_INT 7
61346: PUSH
61347: LD_INT 27
61349: PUSH
61350: LD_INT 29
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: IN
61365: PUSH
61366: LD_VAR 0 1
61370: PPUSH
61371: LD_INT 52
61373: PPUSH
61374: CALL_OW 321
61378: PUSH
61379: LD_INT 2
61381: EQUAL
61382: AND
61383: IFFALSE 61400
// bpoints := bpoints * 1.2 ;
61385: LD_ADDR_VAR 0 10
61389: PUSH
61390: LD_VAR 0 10
61394: PUSH
61395: LD_REAL  1.20000000000000E+0000
61398: MUL
61399: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
61400: LD_VAR 0 6
61404: PPUSH
61405: CALL_OW 264
61409: PUSH
61410: LD_INT 6
61412: PUSH
61413: LD_INT 46
61415: PUSH
61416: LD_INT 47
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: LIST
61423: IN
61424: IFFALSE 61441
// bpoints := bpoints * 1.2 ;
61426: LD_ADDR_VAR 0 10
61430: PUSH
61431: LD_VAR 0 10
61435: PUSH
61436: LD_REAL  1.20000000000000E+0000
61439: MUL
61440: ST_TO_ADDR
// end ; unit_building :
61441: GO 61455
61443: LD_INT 3
61445: DOUBLE
61446: EQUAL
61447: IFTRUE 61451
61449: GO 61454
61451: POP
// ; end ;
61452: GO 61455
61454: POP
// for j = 1 to 3 do
61455: LD_ADDR_VAR 0 7
61459: PUSH
61460: DOUBLE
61461: LD_INT 1
61463: DEC
61464: ST_TO_ADDR
61465: LD_INT 3
61467: PUSH
61468: FOR_TO
61469: IFFALSE 61522
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
61471: LD_ADDR_VAR 0 5
61475: PUSH
61476: LD_VAR 0 5
61480: PPUSH
61481: LD_VAR 0 7
61485: PPUSH
61486: LD_VAR 0 5
61490: PUSH
61491: LD_VAR 0 7
61495: ARRAY
61496: PUSH
61497: LD_VAR 0 9
61501: PUSH
61502: LD_VAR 0 7
61506: ARRAY
61507: PUSH
61508: LD_VAR 0 10
61512: MUL
61513: PLUS
61514: PPUSH
61515: CALL_OW 1
61519: ST_TO_ADDR
61520: GO 61468
61522: POP
61523: POP
// end ;
61524: GO 60003
61526: POP
61527: POP
// result := Replace ( result , 4 , tmp ) ;
61528: LD_ADDR_VAR 0 5
61532: PUSH
61533: LD_VAR 0 5
61537: PPUSH
61538: LD_INT 4
61540: PPUSH
61541: LD_VAR 0 8
61545: PPUSH
61546: CALL_OW 1
61550: ST_TO_ADDR
// end ;
61551: LD_VAR 0 5
61555: RET
// export function DangerAtRange ( unit , range ) ; begin
61556: LD_INT 0
61558: PPUSH
// if not unit then
61559: LD_VAR 0 1
61563: NOT
61564: IFFALSE 61568
// exit ;
61566: GO 61613
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
61568: LD_ADDR_VAR 0 3
61572: PUSH
61573: LD_VAR 0 1
61577: PPUSH
61578: CALL_OW 255
61582: PPUSH
61583: LD_VAR 0 1
61587: PPUSH
61588: CALL_OW 250
61592: PPUSH
61593: LD_VAR 0 1
61597: PPUSH
61598: CALL_OW 251
61602: PPUSH
61603: LD_VAR 0 2
61607: PPUSH
61608: CALL 59855 0 4
61612: ST_TO_ADDR
// end ;
61613: LD_VAR 0 3
61617: RET
// export function DangerInArea ( side , area ) ; begin
61618: LD_INT 0
61620: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
61621: LD_ADDR_VAR 0 3
61625: PUSH
61626: LD_VAR 0 2
61630: PPUSH
61631: LD_INT 81
61633: PUSH
61634: LD_VAR 0 1
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PPUSH
61643: CALL_OW 70
61647: ST_TO_ADDR
// end ;
61648: LD_VAR 0 3
61652: RET
// export function IsExtension ( b ) ; begin
61653: LD_INT 0
61655: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
61656: LD_ADDR_VAR 0 2
61660: PUSH
61661: LD_VAR 0 1
61665: PUSH
61666: LD_INT 23
61668: PUSH
61669: LD_INT 20
61671: PUSH
61672: LD_INT 22
61674: PUSH
61675: LD_INT 17
61677: PUSH
61678: LD_INT 24
61680: PUSH
61681: LD_INT 21
61683: PUSH
61684: LD_INT 19
61686: PUSH
61687: LD_INT 16
61689: PUSH
61690: LD_INT 25
61692: PUSH
61693: LD_INT 18
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: IN
61708: ST_TO_ADDR
// end ;
61709: LD_VAR 0 2
61713: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
61714: LD_INT 0
61716: PPUSH
61717: PPUSH
61718: PPUSH
// result := [ ] ;
61719: LD_ADDR_VAR 0 4
61723: PUSH
61724: EMPTY
61725: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
61726: LD_ADDR_VAR 0 5
61730: PUSH
61731: LD_VAR 0 2
61735: PPUSH
61736: LD_INT 21
61738: PUSH
61739: LD_INT 3
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PPUSH
61746: CALL_OW 70
61750: ST_TO_ADDR
// if not tmp then
61751: LD_VAR 0 5
61755: NOT
61756: IFFALSE 61760
// exit ;
61758: GO 61824
// if checkLink then
61760: LD_VAR 0 3
61764: IFFALSE 61814
// begin for i in tmp do
61766: LD_ADDR_VAR 0 6
61770: PUSH
61771: LD_VAR 0 5
61775: PUSH
61776: FOR_IN
61777: IFFALSE 61812
// if GetBase ( i ) <> base then
61779: LD_VAR 0 6
61783: PPUSH
61784: CALL_OW 274
61788: PUSH
61789: LD_VAR 0 1
61793: NONEQUAL
61794: IFFALSE 61810
// ComLinkToBase ( base , i ) ;
61796: LD_VAR 0 1
61800: PPUSH
61801: LD_VAR 0 6
61805: PPUSH
61806: CALL_OW 169
61810: GO 61776
61812: POP
61813: POP
// end ; result := tmp ;
61814: LD_ADDR_VAR 0 4
61818: PUSH
61819: LD_VAR 0 5
61823: ST_TO_ADDR
// end ;
61824: LD_VAR 0 4
61828: RET
// export function ComComplete ( units , b ) ; var i ; begin
61829: LD_INT 0
61831: PPUSH
61832: PPUSH
// if not units then
61833: LD_VAR 0 1
61837: NOT
61838: IFFALSE 61842
// exit ;
61840: GO 61932
// for i in units do
61842: LD_ADDR_VAR 0 4
61846: PUSH
61847: LD_VAR 0 1
61851: PUSH
61852: FOR_IN
61853: IFFALSE 61930
// if BuildingStatus ( b ) = bs_build then
61855: LD_VAR 0 2
61859: PPUSH
61860: CALL_OW 461
61864: PUSH
61865: LD_INT 1
61867: EQUAL
61868: IFFALSE 61928
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
61870: LD_VAR 0 4
61874: PPUSH
61875: LD_STRING h
61877: PUSH
61878: LD_VAR 0 2
61882: PPUSH
61883: CALL_OW 250
61887: PUSH
61888: LD_VAR 0 2
61892: PPUSH
61893: CALL_OW 251
61897: PUSH
61898: LD_VAR 0 2
61902: PUSH
61903: LD_INT 0
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: LD_INT 0
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: PUSH
61921: EMPTY
61922: LIST
61923: PPUSH
61924: CALL_OW 446
61928: GO 61852
61930: POP
61931: POP
// end ;
61932: LD_VAR 0 3
61936: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
61937: LD_INT 0
61939: PPUSH
61940: PPUSH
61941: PPUSH
61942: PPUSH
61943: PPUSH
61944: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
61945: LD_VAR 0 1
61949: NOT
61950: PUSH
61951: LD_VAR 0 1
61955: PPUSH
61956: CALL_OW 263
61960: PUSH
61961: LD_INT 2
61963: NONEQUAL
61964: OR
61965: IFFALSE 61969
// exit ;
61967: GO 62285
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
61969: LD_ADDR_VAR 0 6
61973: PUSH
61974: LD_INT 22
61976: PUSH
61977: LD_VAR 0 1
61981: PPUSH
61982: CALL_OW 255
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 2
61993: PUSH
61994: LD_INT 30
61996: PUSH
61997: LD_INT 36
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 34
62006: PUSH
62007: LD_INT 31
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: LIST
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PPUSH
62023: CALL_OW 69
62027: ST_TO_ADDR
// if not tmp then
62028: LD_VAR 0 6
62032: NOT
62033: IFFALSE 62037
// exit ;
62035: GO 62285
// result := [ ] ;
62037: LD_ADDR_VAR 0 2
62041: PUSH
62042: EMPTY
62043: ST_TO_ADDR
// for i in tmp do
62044: LD_ADDR_VAR 0 3
62048: PUSH
62049: LD_VAR 0 6
62053: PUSH
62054: FOR_IN
62055: IFFALSE 62126
// begin t := UnitsInside ( i ) ;
62057: LD_ADDR_VAR 0 4
62061: PUSH
62062: LD_VAR 0 3
62066: PPUSH
62067: CALL_OW 313
62071: ST_TO_ADDR
// if t then
62072: LD_VAR 0 4
62076: IFFALSE 62124
// for j in t do
62078: LD_ADDR_VAR 0 7
62082: PUSH
62083: LD_VAR 0 4
62087: PUSH
62088: FOR_IN
62089: IFFALSE 62122
// result := Replace ( result , result + 1 , j ) ;
62091: LD_ADDR_VAR 0 2
62095: PUSH
62096: LD_VAR 0 2
62100: PPUSH
62101: LD_VAR 0 2
62105: PUSH
62106: LD_INT 1
62108: PLUS
62109: PPUSH
62110: LD_VAR 0 7
62114: PPUSH
62115: CALL_OW 1
62119: ST_TO_ADDR
62120: GO 62088
62122: POP
62123: POP
// end ;
62124: GO 62054
62126: POP
62127: POP
// if not result then
62128: LD_VAR 0 2
62132: NOT
62133: IFFALSE 62137
// exit ;
62135: GO 62285
// mech := result [ 1 ] ;
62137: LD_ADDR_VAR 0 5
62141: PUSH
62142: LD_VAR 0 2
62146: PUSH
62147: LD_INT 1
62149: ARRAY
62150: ST_TO_ADDR
// if result > 1 then
62151: LD_VAR 0 2
62155: PUSH
62156: LD_INT 1
62158: GREATER
62159: IFFALSE 62271
// begin for i = 2 to result do
62161: LD_ADDR_VAR 0 3
62165: PUSH
62166: DOUBLE
62167: LD_INT 2
62169: DEC
62170: ST_TO_ADDR
62171: LD_VAR 0 2
62175: PUSH
62176: FOR_TO
62177: IFFALSE 62269
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
62179: LD_ADDR_VAR 0 4
62183: PUSH
62184: LD_VAR 0 2
62188: PUSH
62189: LD_VAR 0 3
62193: ARRAY
62194: PPUSH
62195: LD_INT 3
62197: PPUSH
62198: CALL_OW 259
62202: PUSH
62203: LD_VAR 0 2
62207: PUSH
62208: LD_VAR 0 3
62212: ARRAY
62213: PPUSH
62214: CALL_OW 432
62218: MINUS
62219: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
62220: LD_VAR 0 4
62224: PUSH
62225: LD_VAR 0 5
62229: PPUSH
62230: LD_INT 3
62232: PPUSH
62233: CALL_OW 259
62237: PUSH
62238: LD_VAR 0 5
62242: PPUSH
62243: CALL_OW 432
62247: MINUS
62248: GREATEREQUAL
62249: IFFALSE 62267
// mech := result [ i ] ;
62251: LD_ADDR_VAR 0 5
62255: PUSH
62256: LD_VAR 0 2
62260: PUSH
62261: LD_VAR 0 3
62265: ARRAY
62266: ST_TO_ADDR
// end ;
62267: GO 62176
62269: POP
62270: POP
// end ; ComLinkTo ( vehicle , mech ) ;
62271: LD_VAR 0 1
62275: PPUSH
62276: LD_VAR 0 5
62280: PPUSH
62281: CALL_OW 135
// end ;
62285: LD_VAR 0 2
62289: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
62290: LD_INT 0
62292: PPUSH
62293: PPUSH
62294: PPUSH
62295: PPUSH
62296: PPUSH
62297: PPUSH
62298: PPUSH
62299: PPUSH
62300: PPUSH
62301: PPUSH
62302: PPUSH
62303: PPUSH
62304: PPUSH
// result := [ ] ;
62305: LD_ADDR_VAR 0 7
62309: PUSH
62310: EMPTY
62311: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
62312: LD_VAR 0 1
62316: PPUSH
62317: CALL_OW 266
62321: PUSH
62322: LD_INT 0
62324: PUSH
62325: LD_INT 1
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: IN
62332: NOT
62333: IFFALSE 62337
// exit ;
62335: GO 63971
// if name then
62337: LD_VAR 0 3
62341: IFFALSE 62357
// SetBName ( base_dep , name ) ;
62343: LD_VAR 0 1
62347: PPUSH
62348: LD_VAR 0 3
62352: PPUSH
62353: CALL_OW 500
// base := GetBase ( base_dep ) ;
62357: LD_ADDR_VAR 0 15
62361: PUSH
62362: LD_VAR 0 1
62366: PPUSH
62367: CALL_OW 274
62371: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
62372: LD_ADDR_VAR 0 16
62376: PUSH
62377: LD_VAR 0 1
62381: PPUSH
62382: CALL_OW 255
62386: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
62387: LD_ADDR_VAR 0 17
62391: PUSH
62392: LD_VAR 0 1
62396: PPUSH
62397: CALL_OW 248
62401: ST_TO_ADDR
// if sources then
62402: LD_VAR 0 5
62406: IFFALSE 62453
// for i = 1 to 3 do
62408: LD_ADDR_VAR 0 8
62412: PUSH
62413: DOUBLE
62414: LD_INT 1
62416: DEC
62417: ST_TO_ADDR
62418: LD_INT 3
62420: PUSH
62421: FOR_TO
62422: IFFALSE 62451
// AddResourceType ( base , i , sources [ i ] ) ;
62424: LD_VAR 0 15
62428: PPUSH
62429: LD_VAR 0 8
62433: PPUSH
62434: LD_VAR 0 5
62438: PUSH
62439: LD_VAR 0 8
62443: ARRAY
62444: PPUSH
62445: CALL_OW 276
62449: GO 62421
62451: POP
62452: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
62453: LD_ADDR_VAR 0 18
62457: PUSH
62458: LD_VAR 0 15
62462: PPUSH
62463: LD_VAR 0 2
62467: PPUSH
62468: LD_INT 1
62470: PPUSH
62471: CALL 61714 0 3
62475: ST_TO_ADDR
// InitHc ;
62476: CALL_OW 19
// InitUc ;
62480: CALL_OW 18
// uc_side := side ;
62484: LD_ADDR_OWVAR 20
62488: PUSH
62489: LD_VAR 0 16
62493: ST_TO_ADDR
// uc_nation := nation ;
62494: LD_ADDR_OWVAR 21
62498: PUSH
62499: LD_VAR 0 17
62503: ST_TO_ADDR
// if buildings then
62504: LD_VAR 0 18
62508: IFFALSE 63830
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
62510: LD_ADDR_VAR 0 19
62514: PUSH
62515: LD_VAR 0 18
62519: PPUSH
62520: LD_INT 2
62522: PUSH
62523: LD_INT 30
62525: PUSH
62526: LD_INT 29
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 30
62535: PUSH
62536: LD_INT 30
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: LIST
62547: PPUSH
62548: CALL_OW 72
62552: ST_TO_ADDR
// if tmp then
62553: LD_VAR 0 19
62557: IFFALSE 62605
// for i in tmp do
62559: LD_ADDR_VAR 0 8
62563: PUSH
62564: LD_VAR 0 19
62568: PUSH
62569: FOR_IN
62570: IFFALSE 62603
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
62572: LD_VAR 0 8
62576: PPUSH
62577: CALL_OW 250
62581: PPUSH
62582: LD_VAR 0 8
62586: PPUSH
62587: CALL_OW 251
62591: PPUSH
62592: LD_VAR 0 16
62596: PPUSH
62597: CALL_OW 441
62601: GO 62569
62603: POP
62604: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
62605: LD_VAR 0 18
62609: PPUSH
62610: LD_INT 2
62612: PUSH
62613: LD_INT 30
62615: PUSH
62616: LD_INT 32
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 30
62625: PUSH
62626: LD_INT 33
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: LIST
62637: PPUSH
62638: CALL_OW 72
62642: IFFALSE 62730
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
62644: LD_ADDR_VAR 0 8
62648: PUSH
62649: LD_VAR 0 18
62653: PPUSH
62654: LD_INT 2
62656: PUSH
62657: LD_INT 30
62659: PUSH
62660: LD_INT 32
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 30
62669: PUSH
62670: LD_INT 33
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: LIST
62681: PPUSH
62682: CALL_OW 72
62686: PUSH
62687: FOR_IN
62688: IFFALSE 62728
// begin if not GetBWeapon ( i ) then
62690: LD_VAR 0 8
62694: PPUSH
62695: CALL_OW 269
62699: NOT
62700: IFFALSE 62726
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
62702: LD_VAR 0 8
62706: PPUSH
62707: LD_VAR 0 8
62711: PPUSH
62712: LD_VAR 0 2
62716: PPUSH
62717: CALL 63976 0 2
62721: PPUSH
62722: CALL_OW 431
// end ;
62726: GO 62687
62728: POP
62729: POP
// end ; for i = 1 to personel do
62730: LD_ADDR_VAR 0 8
62734: PUSH
62735: DOUBLE
62736: LD_INT 1
62738: DEC
62739: ST_TO_ADDR
62740: LD_VAR 0 6
62744: PUSH
62745: FOR_TO
62746: IFFALSE 63810
// begin if i > 4 then
62748: LD_VAR 0 8
62752: PUSH
62753: LD_INT 4
62755: GREATER
62756: IFFALSE 62760
// break ;
62758: GO 63810
// case i of 1 :
62760: LD_VAR 0 8
62764: PUSH
62765: LD_INT 1
62767: DOUBLE
62768: EQUAL
62769: IFTRUE 62773
62771: GO 62853
62773: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
62774: LD_ADDR_VAR 0 12
62778: PUSH
62779: LD_VAR 0 18
62783: PPUSH
62784: LD_INT 22
62786: PUSH
62787: LD_VAR 0 16
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 58
62798: PUSH
62799: EMPTY
62800: LIST
62801: PUSH
62802: LD_INT 2
62804: PUSH
62805: LD_INT 30
62807: PUSH
62808: LD_INT 32
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 30
62817: PUSH
62818: LD_INT 4
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 30
62827: PUSH
62828: LD_INT 5
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: LIST
62845: PPUSH
62846: CALL_OW 72
62850: ST_TO_ADDR
62851: GO 63075
62853: LD_INT 2
62855: DOUBLE
62856: EQUAL
62857: IFTRUE 62861
62859: GO 62923
62861: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
62862: LD_ADDR_VAR 0 12
62866: PUSH
62867: LD_VAR 0 18
62871: PPUSH
62872: LD_INT 22
62874: PUSH
62875: LD_VAR 0 16
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 2
62886: PUSH
62887: LD_INT 30
62889: PUSH
62890: LD_INT 0
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 30
62899: PUSH
62900: LD_INT 1
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: LIST
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PPUSH
62916: CALL_OW 72
62920: ST_TO_ADDR
62921: GO 63075
62923: LD_INT 3
62925: DOUBLE
62926: EQUAL
62927: IFTRUE 62931
62929: GO 62993
62931: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
62932: LD_ADDR_VAR 0 12
62936: PUSH
62937: LD_VAR 0 18
62941: PPUSH
62942: LD_INT 22
62944: PUSH
62945: LD_VAR 0 16
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 2
62956: PUSH
62957: LD_INT 30
62959: PUSH
62960: LD_INT 2
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 30
62969: PUSH
62970: LD_INT 3
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: LIST
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PPUSH
62986: CALL_OW 72
62990: ST_TO_ADDR
62991: GO 63075
62993: LD_INT 4
62995: DOUBLE
62996: EQUAL
62997: IFTRUE 63001
62999: GO 63074
63001: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
63002: LD_ADDR_VAR 0 12
63006: PUSH
63007: LD_VAR 0 18
63011: PPUSH
63012: LD_INT 22
63014: PUSH
63015: LD_VAR 0 16
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 2
63026: PUSH
63027: LD_INT 30
63029: PUSH
63030: LD_INT 6
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 30
63039: PUSH
63040: LD_INT 7
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 30
63049: PUSH
63050: LD_INT 8
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PPUSH
63067: CALL_OW 72
63071: ST_TO_ADDR
63072: GO 63075
63074: POP
// if i = 1 then
63075: LD_VAR 0 8
63079: PUSH
63080: LD_INT 1
63082: EQUAL
63083: IFFALSE 63194
// begin tmp := [ ] ;
63085: LD_ADDR_VAR 0 19
63089: PUSH
63090: EMPTY
63091: ST_TO_ADDR
// for j in f do
63092: LD_ADDR_VAR 0 9
63096: PUSH
63097: LD_VAR 0 12
63101: PUSH
63102: FOR_IN
63103: IFFALSE 63176
// if GetBType ( j ) = b_bunker then
63105: LD_VAR 0 9
63109: PPUSH
63110: CALL_OW 266
63114: PUSH
63115: LD_INT 32
63117: EQUAL
63118: IFFALSE 63145
// tmp := Insert ( tmp , 1 , j ) else
63120: LD_ADDR_VAR 0 19
63124: PUSH
63125: LD_VAR 0 19
63129: PPUSH
63130: LD_INT 1
63132: PPUSH
63133: LD_VAR 0 9
63137: PPUSH
63138: CALL_OW 2
63142: ST_TO_ADDR
63143: GO 63174
// tmp := Insert ( tmp , tmp + 1 , j ) ;
63145: LD_ADDR_VAR 0 19
63149: PUSH
63150: LD_VAR 0 19
63154: PPUSH
63155: LD_VAR 0 19
63159: PUSH
63160: LD_INT 1
63162: PLUS
63163: PPUSH
63164: LD_VAR 0 9
63168: PPUSH
63169: CALL_OW 2
63173: ST_TO_ADDR
63174: GO 63102
63176: POP
63177: POP
// if tmp then
63178: LD_VAR 0 19
63182: IFFALSE 63194
// f := tmp ;
63184: LD_ADDR_VAR 0 12
63188: PUSH
63189: LD_VAR 0 19
63193: ST_TO_ADDR
// end ; x := personel [ i ] ;
63194: LD_ADDR_VAR 0 13
63198: PUSH
63199: LD_VAR 0 6
63203: PUSH
63204: LD_VAR 0 8
63208: ARRAY
63209: ST_TO_ADDR
// if x = - 1 then
63210: LD_VAR 0 13
63214: PUSH
63215: LD_INT 1
63217: NEG
63218: EQUAL
63219: IFFALSE 63428
// begin for j in f do
63221: LD_ADDR_VAR 0 9
63225: PUSH
63226: LD_VAR 0 12
63230: PUSH
63231: FOR_IN
63232: IFFALSE 63424
// repeat InitHc ;
63234: CALL_OW 19
// if GetBType ( j ) = b_barracks then
63238: LD_VAR 0 9
63242: PPUSH
63243: CALL_OW 266
63247: PUSH
63248: LD_INT 5
63250: EQUAL
63251: IFFALSE 63321
// begin if UnitsInside ( j ) < 3 then
63253: LD_VAR 0 9
63257: PPUSH
63258: CALL_OW 313
63262: PUSH
63263: LD_INT 3
63265: LESS
63266: IFFALSE 63302
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
63268: LD_INT 0
63270: PPUSH
63271: LD_INT 5
63273: PUSH
63274: LD_INT 8
63276: PUSH
63277: LD_INT 9
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: LIST
63284: PUSH
63285: LD_VAR 0 17
63289: ARRAY
63290: PPUSH
63291: LD_VAR 0 4
63295: PPUSH
63296: CALL_OW 380
63300: GO 63319
// PrepareHuman ( false , i , skill ) ;
63302: LD_INT 0
63304: PPUSH
63305: LD_VAR 0 8
63309: PPUSH
63310: LD_VAR 0 4
63314: PPUSH
63315: CALL_OW 380
// end else
63319: GO 63338
// PrepareHuman ( false , i , skill ) ;
63321: LD_INT 0
63323: PPUSH
63324: LD_VAR 0 8
63328: PPUSH
63329: LD_VAR 0 4
63333: PPUSH
63334: CALL_OW 380
// un := CreateHuman ;
63338: LD_ADDR_VAR 0 14
63342: PUSH
63343: CALL_OW 44
63347: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
63348: LD_ADDR_VAR 0 7
63352: PUSH
63353: LD_VAR 0 7
63357: PPUSH
63358: LD_INT 1
63360: PPUSH
63361: LD_VAR 0 14
63365: PPUSH
63366: CALL_OW 2
63370: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
63371: LD_VAR 0 14
63375: PPUSH
63376: LD_VAR 0 9
63380: PPUSH
63381: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
63385: LD_VAR 0 9
63389: PPUSH
63390: CALL_OW 313
63394: PUSH
63395: LD_INT 6
63397: EQUAL
63398: PUSH
63399: LD_VAR 0 9
63403: PPUSH
63404: CALL_OW 266
63408: PUSH
63409: LD_INT 32
63411: PUSH
63412: LD_INT 31
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: IN
63419: OR
63420: IFFALSE 63234
63422: GO 63231
63424: POP
63425: POP
// end else
63426: GO 63808
// for j = 1 to x do
63428: LD_ADDR_VAR 0 9
63432: PUSH
63433: DOUBLE
63434: LD_INT 1
63436: DEC
63437: ST_TO_ADDR
63438: LD_VAR 0 13
63442: PUSH
63443: FOR_TO
63444: IFFALSE 63806
// begin InitHc ;
63446: CALL_OW 19
// if not f then
63450: LD_VAR 0 12
63454: NOT
63455: IFFALSE 63544
// begin PrepareHuman ( false , i , skill ) ;
63457: LD_INT 0
63459: PPUSH
63460: LD_VAR 0 8
63464: PPUSH
63465: LD_VAR 0 4
63469: PPUSH
63470: CALL_OW 380
// un := CreateHuman ;
63474: LD_ADDR_VAR 0 14
63478: PUSH
63479: CALL_OW 44
63483: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
63484: LD_ADDR_VAR 0 7
63488: PUSH
63489: LD_VAR 0 7
63493: PPUSH
63494: LD_INT 1
63496: PPUSH
63497: LD_VAR 0 14
63501: PPUSH
63502: CALL_OW 2
63506: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
63507: LD_VAR 0 14
63511: PPUSH
63512: LD_VAR 0 1
63516: PPUSH
63517: CALL_OW 250
63521: PPUSH
63522: LD_VAR 0 1
63526: PPUSH
63527: CALL_OW 251
63531: PPUSH
63532: LD_INT 10
63534: PPUSH
63535: LD_INT 0
63537: PPUSH
63538: CALL_OW 50
// continue ;
63542: GO 63443
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
63544: LD_VAR 0 12
63548: PUSH
63549: LD_INT 1
63551: ARRAY
63552: PPUSH
63553: CALL_OW 313
63557: PUSH
63558: LD_VAR 0 12
63562: PUSH
63563: LD_INT 1
63565: ARRAY
63566: PPUSH
63567: CALL_OW 266
63571: PUSH
63572: LD_INT 32
63574: PUSH
63575: LD_INT 31
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: IN
63582: AND
63583: PUSH
63584: LD_VAR 0 12
63588: PUSH
63589: LD_INT 1
63591: ARRAY
63592: PPUSH
63593: CALL_OW 313
63597: PUSH
63598: LD_INT 6
63600: EQUAL
63601: OR
63602: IFFALSE 63622
// f := Delete ( f , 1 ) ;
63604: LD_ADDR_VAR 0 12
63608: PUSH
63609: LD_VAR 0 12
63613: PPUSH
63614: LD_INT 1
63616: PPUSH
63617: CALL_OW 3
63621: ST_TO_ADDR
// if not f then
63622: LD_VAR 0 12
63626: NOT
63627: IFFALSE 63645
// begin x := x + 2 ;
63629: LD_ADDR_VAR 0 13
63633: PUSH
63634: LD_VAR 0 13
63638: PUSH
63639: LD_INT 2
63641: PLUS
63642: ST_TO_ADDR
// continue ;
63643: GO 63443
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
63645: LD_VAR 0 12
63649: PUSH
63650: LD_INT 1
63652: ARRAY
63653: PPUSH
63654: CALL_OW 266
63658: PUSH
63659: LD_INT 5
63661: EQUAL
63662: IFFALSE 63736
// begin if UnitsInside ( f [ 1 ] ) < 3 then
63664: LD_VAR 0 12
63668: PUSH
63669: LD_INT 1
63671: ARRAY
63672: PPUSH
63673: CALL_OW 313
63677: PUSH
63678: LD_INT 3
63680: LESS
63681: IFFALSE 63717
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
63683: LD_INT 0
63685: PPUSH
63686: LD_INT 5
63688: PUSH
63689: LD_INT 8
63691: PUSH
63692: LD_INT 9
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: LIST
63699: PUSH
63700: LD_VAR 0 17
63704: ARRAY
63705: PPUSH
63706: LD_VAR 0 4
63710: PPUSH
63711: CALL_OW 380
63715: GO 63734
// PrepareHuman ( false , i , skill ) ;
63717: LD_INT 0
63719: PPUSH
63720: LD_VAR 0 8
63724: PPUSH
63725: LD_VAR 0 4
63729: PPUSH
63730: CALL_OW 380
// end else
63734: GO 63753
// PrepareHuman ( false , i , skill ) ;
63736: LD_INT 0
63738: PPUSH
63739: LD_VAR 0 8
63743: PPUSH
63744: LD_VAR 0 4
63748: PPUSH
63749: CALL_OW 380
// un := CreateHuman ;
63753: LD_ADDR_VAR 0 14
63757: PUSH
63758: CALL_OW 44
63762: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
63763: LD_ADDR_VAR 0 7
63767: PUSH
63768: LD_VAR 0 7
63772: PPUSH
63773: LD_INT 1
63775: PPUSH
63776: LD_VAR 0 14
63780: PPUSH
63781: CALL_OW 2
63785: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
63786: LD_VAR 0 14
63790: PPUSH
63791: LD_VAR 0 12
63795: PUSH
63796: LD_INT 1
63798: ARRAY
63799: PPUSH
63800: CALL_OW 52
// end ;
63804: GO 63443
63806: POP
63807: POP
// end ;
63808: GO 62745
63810: POP
63811: POP
// result := result ^ buildings ;
63812: LD_ADDR_VAR 0 7
63816: PUSH
63817: LD_VAR 0 7
63821: PUSH
63822: LD_VAR 0 18
63826: ADD
63827: ST_TO_ADDR
// end else
63828: GO 63971
// begin for i = 1 to personel do
63830: LD_ADDR_VAR 0 8
63834: PUSH
63835: DOUBLE
63836: LD_INT 1
63838: DEC
63839: ST_TO_ADDR
63840: LD_VAR 0 6
63844: PUSH
63845: FOR_TO
63846: IFFALSE 63969
// begin if i > 4 then
63848: LD_VAR 0 8
63852: PUSH
63853: LD_INT 4
63855: GREATER
63856: IFFALSE 63860
// break ;
63858: GO 63969
// x := personel [ i ] ;
63860: LD_ADDR_VAR 0 13
63864: PUSH
63865: LD_VAR 0 6
63869: PUSH
63870: LD_VAR 0 8
63874: ARRAY
63875: ST_TO_ADDR
// if x = - 1 then
63876: LD_VAR 0 13
63880: PUSH
63881: LD_INT 1
63883: NEG
63884: EQUAL
63885: IFFALSE 63889
// continue ;
63887: GO 63845
// PrepareHuman ( false , i , skill ) ;
63889: LD_INT 0
63891: PPUSH
63892: LD_VAR 0 8
63896: PPUSH
63897: LD_VAR 0 4
63901: PPUSH
63902: CALL_OW 380
// un := CreateHuman ;
63906: LD_ADDR_VAR 0 14
63910: PUSH
63911: CALL_OW 44
63915: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
63916: LD_VAR 0 14
63920: PPUSH
63921: LD_VAR 0 1
63925: PPUSH
63926: CALL_OW 250
63930: PPUSH
63931: LD_VAR 0 1
63935: PPUSH
63936: CALL_OW 251
63940: PPUSH
63941: LD_INT 10
63943: PPUSH
63944: LD_INT 0
63946: PPUSH
63947: CALL_OW 50
// result := result ^ un ;
63951: LD_ADDR_VAR 0 7
63955: PUSH
63956: LD_VAR 0 7
63960: PUSH
63961: LD_VAR 0 14
63965: ADD
63966: ST_TO_ADDR
// end ;
63967: GO 63845
63969: POP
63970: POP
// end ; end ;
63971: LD_VAR 0 7
63975: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
63976: LD_INT 0
63978: PPUSH
63979: PPUSH
63980: PPUSH
63981: PPUSH
63982: PPUSH
63983: PPUSH
63984: PPUSH
63985: PPUSH
63986: PPUSH
63987: PPUSH
63988: PPUSH
63989: PPUSH
63990: PPUSH
63991: PPUSH
63992: PPUSH
63993: PPUSH
// result := false ;
63994: LD_ADDR_VAR 0 3
63998: PUSH
63999: LD_INT 0
64001: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
64002: LD_VAR 0 1
64006: NOT
64007: PUSH
64008: LD_VAR 0 1
64012: PPUSH
64013: CALL_OW 266
64017: PUSH
64018: LD_INT 32
64020: PUSH
64021: LD_INT 33
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: IN
64028: NOT
64029: OR
64030: IFFALSE 64034
// exit ;
64032: GO 65143
// nat := GetNation ( tower ) ;
64034: LD_ADDR_VAR 0 12
64038: PUSH
64039: LD_VAR 0 1
64043: PPUSH
64044: CALL_OW 248
64048: ST_TO_ADDR
// side := GetSide ( tower ) ;
64049: LD_ADDR_VAR 0 16
64053: PUSH
64054: LD_VAR 0 1
64058: PPUSH
64059: CALL_OW 255
64063: ST_TO_ADDR
// x := GetX ( tower ) ;
64064: LD_ADDR_VAR 0 10
64068: PUSH
64069: LD_VAR 0 1
64073: PPUSH
64074: CALL_OW 250
64078: ST_TO_ADDR
// y := GetY ( tower ) ;
64079: LD_ADDR_VAR 0 11
64083: PUSH
64084: LD_VAR 0 1
64088: PPUSH
64089: CALL_OW 251
64093: ST_TO_ADDR
// if not x or not y then
64094: LD_VAR 0 10
64098: NOT
64099: PUSH
64100: LD_VAR 0 11
64104: NOT
64105: OR
64106: IFFALSE 64110
// exit ;
64108: GO 65143
// weapon := 0 ;
64110: LD_ADDR_VAR 0 18
64114: PUSH
64115: LD_INT 0
64117: ST_TO_ADDR
// fac_list := [ ] ;
64118: LD_ADDR_VAR 0 17
64122: PUSH
64123: EMPTY
64124: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
64125: LD_ADDR_VAR 0 6
64129: PUSH
64130: LD_VAR 0 1
64134: PPUSH
64135: CALL_OW 274
64139: PPUSH
64140: LD_VAR 0 2
64144: PPUSH
64145: LD_INT 0
64147: PPUSH
64148: CALL 61714 0 3
64152: PPUSH
64153: LD_INT 30
64155: PUSH
64156: LD_INT 3
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PPUSH
64163: CALL_OW 72
64167: ST_TO_ADDR
// if not factories then
64168: LD_VAR 0 6
64172: NOT
64173: IFFALSE 64177
// exit ;
64175: GO 65143
// for i in factories do
64177: LD_ADDR_VAR 0 8
64181: PUSH
64182: LD_VAR 0 6
64186: PUSH
64187: FOR_IN
64188: IFFALSE 64213
// fac_list := fac_list union AvailableWeaponList ( i ) ;
64190: LD_ADDR_VAR 0 17
64194: PUSH
64195: LD_VAR 0 17
64199: PUSH
64200: LD_VAR 0 8
64204: PPUSH
64205: CALL_OW 478
64209: UNION
64210: ST_TO_ADDR
64211: GO 64187
64213: POP
64214: POP
// if not fac_list then
64215: LD_VAR 0 17
64219: NOT
64220: IFFALSE 64224
// exit ;
64222: GO 65143
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
64224: LD_ADDR_VAR 0 5
64228: PUSH
64229: LD_INT 4
64231: PUSH
64232: LD_INT 5
64234: PUSH
64235: LD_INT 9
64237: PUSH
64238: LD_INT 10
64240: PUSH
64241: LD_INT 6
64243: PUSH
64244: LD_INT 7
64246: PUSH
64247: LD_INT 11
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 27
64261: PUSH
64262: LD_INT 28
64264: PUSH
64265: LD_INT 26
64267: PUSH
64268: LD_INT 30
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 43
64279: PUSH
64280: LD_INT 44
64282: PUSH
64283: LD_INT 46
64285: PUSH
64286: LD_INT 45
64288: PUSH
64289: LD_INT 47
64291: PUSH
64292: LD_INT 49
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: LIST
64307: PUSH
64308: LD_VAR 0 12
64312: ARRAY
64313: ST_TO_ADDR
// list := list isect fac_list ;
64314: LD_ADDR_VAR 0 5
64318: PUSH
64319: LD_VAR 0 5
64323: PUSH
64324: LD_VAR 0 17
64328: ISECT
64329: ST_TO_ADDR
// if not list then
64330: LD_VAR 0 5
64334: NOT
64335: IFFALSE 64339
// exit ;
64337: GO 65143
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
64339: LD_VAR 0 12
64343: PUSH
64344: LD_INT 3
64346: EQUAL
64347: PUSH
64348: LD_INT 49
64350: PUSH
64351: LD_VAR 0 5
64355: IN
64356: AND
64357: PUSH
64358: LD_INT 31
64360: PPUSH
64361: LD_VAR 0 16
64365: PPUSH
64366: CALL_OW 321
64370: PUSH
64371: LD_INT 2
64373: EQUAL
64374: AND
64375: IFFALSE 64435
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
64377: LD_INT 22
64379: PUSH
64380: LD_VAR 0 16
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 35
64391: PUSH
64392: LD_INT 49
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 91
64401: PUSH
64402: LD_VAR 0 1
64406: PUSH
64407: LD_INT 10
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: LIST
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: LIST
64419: PPUSH
64420: CALL_OW 69
64424: NOT
64425: IFFALSE 64435
// weapon := ru_time_lapser ;
64427: LD_ADDR_VAR 0 18
64431: PUSH
64432: LD_INT 49
64434: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
64435: LD_VAR 0 12
64439: PUSH
64440: LD_INT 1
64442: PUSH
64443: LD_INT 2
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: IN
64450: PUSH
64451: LD_INT 11
64453: PUSH
64454: LD_VAR 0 5
64458: IN
64459: PUSH
64460: LD_INT 30
64462: PUSH
64463: LD_VAR 0 5
64467: IN
64468: OR
64469: AND
64470: PUSH
64471: LD_INT 6
64473: PPUSH
64474: LD_VAR 0 16
64478: PPUSH
64479: CALL_OW 321
64483: PUSH
64484: LD_INT 2
64486: EQUAL
64487: AND
64488: IFFALSE 64653
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
64490: LD_INT 22
64492: PUSH
64493: LD_VAR 0 16
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 2
64504: PUSH
64505: LD_INT 35
64507: PUSH
64508: LD_INT 11
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 35
64517: PUSH
64518: LD_INT 30
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 91
64532: PUSH
64533: LD_VAR 0 1
64537: PUSH
64538: LD_INT 18
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: LIST
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: LIST
64550: PPUSH
64551: CALL_OW 69
64555: NOT
64556: PUSH
64557: LD_INT 22
64559: PUSH
64560: LD_VAR 0 16
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 2
64571: PUSH
64572: LD_INT 30
64574: PUSH
64575: LD_INT 32
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 30
64584: PUSH
64585: LD_INT 33
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 91
64599: PUSH
64600: LD_VAR 0 1
64604: PUSH
64605: LD_INT 12
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: LIST
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: LIST
64617: PUSH
64618: EMPTY
64619: LIST
64620: PPUSH
64621: CALL_OW 69
64625: PUSH
64626: LD_INT 2
64628: GREATER
64629: AND
64630: IFFALSE 64653
// weapon := [ us_radar , ar_radar ] [ nat ] ;
64632: LD_ADDR_VAR 0 18
64636: PUSH
64637: LD_INT 11
64639: PUSH
64640: LD_INT 30
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_VAR 0 12
64651: ARRAY
64652: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
64653: LD_VAR 0 18
64657: NOT
64658: PUSH
64659: LD_INT 40
64661: PPUSH
64662: LD_VAR 0 16
64666: PPUSH
64667: CALL_OW 321
64671: PUSH
64672: LD_INT 2
64674: EQUAL
64675: AND
64676: PUSH
64677: LD_INT 7
64679: PUSH
64680: LD_VAR 0 5
64684: IN
64685: PUSH
64686: LD_INT 28
64688: PUSH
64689: LD_VAR 0 5
64693: IN
64694: OR
64695: PUSH
64696: LD_INT 45
64698: PUSH
64699: LD_VAR 0 5
64703: IN
64704: OR
64705: AND
64706: IFFALSE 64960
// begin hex := GetHexInfo ( x , y ) ;
64708: LD_ADDR_VAR 0 4
64712: PUSH
64713: LD_VAR 0 10
64717: PPUSH
64718: LD_VAR 0 11
64722: PPUSH
64723: CALL_OW 546
64727: ST_TO_ADDR
// if hex [ 1 ] then
64728: LD_VAR 0 4
64732: PUSH
64733: LD_INT 1
64735: ARRAY
64736: IFFALSE 64740
// exit ;
64738: GO 65143
// height := hex [ 2 ] ;
64740: LD_ADDR_VAR 0 15
64744: PUSH
64745: LD_VAR 0 4
64749: PUSH
64750: LD_INT 2
64752: ARRAY
64753: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
64754: LD_ADDR_VAR 0 14
64758: PUSH
64759: LD_INT 0
64761: PUSH
64762: LD_INT 2
64764: PUSH
64765: LD_INT 3
64767: PUSH
64768: LD_INT 5
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: ST_TO_ADDR
// for i in tmp do
64777: LD_ADDR_VAR 0 8
64781: PUSH
64782: LD_VAR 0 14
64786: PUSH
64787: FOR_IN
64788: IFFALSE 64958
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
64790: LD_ADDR_VAR 0 9
64794: PUSH
64795: LD_VAR 0 10
64799: PPUSH
64800: LD_VAR 0 8
64804: PPUSH
64805: LD_INT 5
64807: PPUSH
64808: CALL_OW 272
64812: PUSH
64813: LD_VAR 0 11
64817: PPUSH
64818: LD_VAR 0 8
64822: PPUSH
64823: LD_INT 5
64825: PPUSH
64826: CALL_OW 273
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
64835: LD_VAR 0 9
64839: PUSH
64840: LD_INT 1
64842: ARRAY
64843: PPUSH
64844: LD_VAR 0 9
64848: PUSH
64849: LD_INT 2
64851: ARRAY
64852: PPUSH
64853: CALL_OW 488
64857: IFFALSE 64956
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
64859: LD_ADDR_VAR 0 4
64863: PUSH
64864: LD_VAR 0 9
64868: PUSH
64869: LD_INT 1
64871: ARRAY
64872: PPUSH
64873: LD_VAR 0 9
64877: PUSH
64878: LD_INT 2
64880: ARRAY
64881: PPUSH
64882: CALL_OW 546
64886: ST_TO_ADDR
// if hex [ 1 ] then
64887: LD_VAR 0 4
64891: PUSH
64892: LD_INT 1
64894: ARRAY
64895: IFFALSE 64899
// continue ;
64897: GO 64787
// h := hex [ 2 ] ;
64899: LD_ADDR_VAR 0 13
64903: PUSH
64904: LD_VAR 0 4
64908: PUSH
64909: LD_INT 2
64911: ARRAY
64912: ST_TO_ADDR
// if h + 7 < height then
64913: LD_VAR 0 13
64917: PUSH
64918: LD_INT 7
64920: PLUS
64921: PUSH
64922: LD_VAR 0 15
64926: LESS
64927: IFFALSE 64956
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
64929: LD_ADDR_VAR 0 18
64933: PUSH
64934: LD_INT 7
64936: PUSH
64937: LD_INT 28
64939: PUSH
64940: LD_INT 45
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: LIST
64947: PUSH
64948: LD_VAR 0 12
64952: ARRAY
64953: ST_TO_ADDR
// break ;
64954: GO 64958
// end ; end ; end ;
64956: GO 64787
64958: POP
64959: POP
// end ; if not weapon then
64960: LD_VAR 0 18
64964: NOT
64965: IFFALSE 65025
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
64967: LD_ADDR_VAR 0 5
64971: PUSH
64972: LD_VAR 0 5
64976: PUSH
64977: LD_INT 11
64979: PUSH
64980: LD_INT 30
64982: PUSH
64983: LD_INT 49
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: LIST
64990: DIFF
64991: ST_TO_ADDR
// if not list then
64992: LD_VAR 0 5
64996: NOT
64997: IFFALSE 65001
// exit ;
64999: GO 65143
// weapon := list [ rand ( 1 , list ) ] ;
65001: LD_ADDR_VAR 0 18
65005: PUSH
65006: LD_VAR 0 5
65010: PUSH
65011: LD_INT 1
65013: PPUSH
65014: LD_VAR 0 5
65018: PPUSH
65019: CALL_OW 12
65023: ARRAY
65024: ST_TO_ADDR
// end ; if weapon then
65025: LD_VAR 0 18
65029: IFFALSE 65143
// begin tmp := CostOfWeapon ( weapon ) ;
65031: LD_ADDR_VAR 0 14
65035: PUSH
65036: LD_VAR 0 18
65040: PPUSH
65041: CALL_OW 451
65045: ST_TO_ADDR
// j := GetBase ( tower ) ;
65046: LD_ADDR_VAR 0 9
65050: PUSH
65051: LD_VAR 0 1
65055: PPUSH
65056: CALL_OW 274
65060: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
65061: LD_VAR 0 9
65065: PPUSH
65066: LD_INT 1
65068: PPUSH
65069: CALL_OW 275
65073: PUSH
65074: LD_VAR 0 14
65078: PUSH
65079: LD_INT 1
65081: ARRAY
65082: GREATEREQUAL
65083: PUSH
65084: LD_VAR 0 9
65088: PPUSH
65089: LD_INT 2
65091: PPUSH
65092: CALL_OW 275
65096: PUSH
65097: LD_VAR 0 14
65101: PUSH
65102: LD_INT 2
65104: ARRAY
65105: GREATEREQUAL
65106: AND
65107: PUSH
65108: LD_VAR 0 9
65112: PPUSH
65113: LD_INT 3
65115: PPUSH
65116: CALL_OW 275
65120: PUSH
65121: LD_VAR 0 14
65125: PUSH
65126: LD_INT 3
65128: ARRAY
65129: GREATEREQUAL
65130: AND
65131: IFFALSE 65143
// result := weapon ;
65133: LD_ADDR_VAR 0 3
65137: PUSH
65138: LD_VAR 0 18
65142: ST_TO_ADDR
// end ; end ;
65143: LD_VAR 0 3
65147: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
65148: LD_INT 0
65150: PPUSH
65151: PPUSH
// result := true ;
65152: LD_ADDR_VAR 0 3
65156: PUSH
65157: LD_INT 1
65159: ST_TO_ADDR
// if array1 = array2 then
65160: LD_VAR 0 1
65164: PUSH
65165: LD_VAR 0 2
65169: EQUAL
65170: IFFALSE 65230
// begin for i = 1 to array1 do
65172: LD_ADDR_VAR 0 4
65176: PUSH
65177: DOUBLE
65178: LD_INT 1
65180: DEC
65181: ST_TO_ADDR
65182: LD_VAR 0 1
65186: PUSH
65187: FOR_TO
65188: IFFALSE 65226
// if array1 [ i ] <> array2 [ i ] then
65190: LD_VAR 0 1
65194: PUSH
65195: LD_VAR 0 4
65199: ARRAY
65200: PUSH
65201: LD_VAR 0 2
65205: PUSH
65206: LD_VAR 0 4
65210: ARRAY
65211: NONEQUAL
65212: IFFALSE 65224
// begin result := false ;
65214: LD_ADDR_VAR 0 3
65218: PUSH
65219: LD_INT 0
65221: ST_TO_ADDR
// break ;
65222: GO 65226
// end ;
65224: GO 65187
65226: POP
65227: POP
// end else
65228: GO 65238
// result := false ;
65230: LD_ADDR_VAR 0 3
65234: PUSH
65235: LD_INT 0
65237: ST_TO_ADDR
// end ;
65238: LD_VAR 0 3
65242: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
65243: LD_INT 0
65245: PPUSH
65246: PPUSH
// if not array1 or not array2 then
65247: LD_VAR 0 1
65251: NOT
65252: PUSH
65253: LD_VAR 0 2
65257: NOT
65258: OR
65259: IFFALSE 65263
// exit ;
65261: GO 65327
// result := true ;
65263: LD_ADDR_VAR 0 3
65267: PUSH
65268: LD_INT 1
65270: ST_TO_ADDR
// for i = 1 to array1 do
65271: LD_ADDR_VAR 0 4
65275: PUSH
65276: DOUBLE
65277: LD_INT 1
65279: DEC
65280: ST_TO_ADDR
65281: LD_VAR 0 1
65285: PUSH
65286: FOR_TO
65287: IFFALSE 65325
// if array1 [ i ] <> array2 [ i ] then
65289: LD_VAR 0 1
65293: PUSH
65294: LD_VAR 0 4
65298: ARRAY
65299: PUSH
65300: LD_VAR 0 2
65304: PUSH
65305: LD_VAR 0 4
65309: ARRAY
65310: NONEQUAL
65311: IFFALSE 65323
// begin result := false ;
65313: LD_ADDR_VAR 0 3
65317: PUSH
65318: LD_INT 0
65320: ST_TO_ADDR
// break ;
65321: GO 65325
// end ;
65323: GO 65286
65325: POP
65326: POP
// end ;
65327: LD_VAR 0 3
65331: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
65332: LD_INT 0
65334: PPUSH
65335: PPUSH
65336: PPUSH
// pom := GetBase ( fac ) ;
65337: LD_ADDR_VAR 0 5
65341: PUSH
65342: LD_VAR 0 1
65346: PPUSH
65347: CALL_OW 274
65351: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
65352: LD_ADDR_VAR 0 4
65356: PUSH
65357: LD_VAR 0 2
65361: PUSH
65362: LD_INT 1
65364: ARRAY
65365: PPUSH
65366: LD_VAR 0 2
65370: PUSH
65371: LD_INT 2
65373: ARRAY
65374: PPUSH
65375: LD_VAR 0 2
65379: PUSH
65380: LD_INT 3
65382: ARRAY
65383: PPUSH
65384: LD_VAR 0 2
65388: PUSH
65389: LD_INT 4
65391: ARRAY
65392: PPUSH
65393: CALL_OW 449
65397: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
65398: LD_ADDR_VAR 0 3
65402: PUSH
65403: LD_VAR 0 5
65407: PPUSH
65408: LD_INT 1
65410: PPUSH
65411: CALL_OW 275
65415: PUSH
65416: LD_VAR 0 4
65420: PUSH
65421: LD_INT 1
65423: ARRAY
65424: GREATEREQUAL
65425: PUSH
65426: LD_VAR 0 5
65430: PPUSH
65431: LD_INT 2
65433: PPUSH
65434: CALL_OW 275
65438: PUSH
65439: LD_VAR 0 4
65443: PUSH
65444: LD_INT 2
65446: ARRAY
65447: GREATEREQUAL
65448: AND
65449: PUSH
65450: LD_VAR 0 5
65454: PPUSH
65455: LD_INT 3
65457: PPUSH
65458: CALL_OW 275
65462: PUSH
65463: LD_VAR 0 4
65467: PUSH
65468: LD_INT 3
65470: ARRAY
65471: GREATEREQUAL
65472: AND
65473: ST_TO_ADDR
// end ;
65474: LD_VAR 0 3
65478: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
65479: LD_INT 0
65481: PPUSH
65482: PPUSH
65483: PPUSH
65484: PPUSH
// pom := GetBase ( building ) ;
65485: LD_ADDR_VAR 0 3
65489: PUSH
65490: LD_VAR 0 1
65494: PPUSH
65495: CALL_OW 274
65499: ST_TO_ADDR
// if not pom then
65500: LD_VAR 0 3
65504: NOT
65505: IFFALSE 65509
// exit ;
65507: GO 65679
// btype := GetBType ( building ) ;
65509: LD_ADDR_VAR 0 5
65513: PUSH
65514: LD_VAR 0 1
65518: PPUSH
65519: CALL_OW 266
65523: ST_TO_ADDR
// if btype = b_armoury then
65524: LD_VAR 0 5
65528: PUSH
65529: LD_INT 4
65531: EQUAL
65532: IFFALSE 65542
// btype := b_barracks ;
65534: LD_ADDR_VAR 0 5
65538: PUSH
65539: LD_INT 5
65541: ST_TO_ADDR
// if btype = b_depot then
65542: LD_VAR 0 5
65546: PUSH
65547: LD_INT 0
65549: EQUAL
65550: IFFALSE 65560
// btype := b_warehouse ;
65552: LD_ADDR_VAR 0 5
65556: PUSH
65557: LD_INT 1
65559: ST_TO_ADDR
// if btype = b_workshop then
65560: LD_VAR 0 5
65564: PUSH
65565: LD_INT 2
65567: EQUAL
65568: IFFALSE 65578
// btype := b_factory ;
65570: LD_ADDR_VAR 0 5
65574: PUSH
65575: LD_INT 3
65577: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
65578: LD_ADDR_VAR 0 4
65582: PUSH
65583: LD_VAR 0 5
65587: PPUSH
65588: LD_VAR 0 1
65592: PPUSH
65593: CALL_OW 248
65597: PPUSH
65598: CALL_OW 450
65602: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
65603: LD_ADDR_VAR 0 2
65607: PUSH
65608: LD_VAR 0 3
65612: PPUSH
65613: LD_INT 1
65615: PPUSH
65616: CALL_OW 275
65620: PUSH
65621: LD_VAR 0 4
65625: PUSH
65626: LD_INT 1
65628: ARRAY
65629: GREATEREQUAL
65630: PUSH
65631: LD_VAR 0 3
65635: PPUSH
65636: LD_INT 2
65638: PPUSH
65639: CALL_OW 275
65643: PUSH
65644: LD_VAR 0 4
65648: PUSH
65649: LD_INT 2
65651: ARRAY
65652: GREATEREQUAL
65653: AND
65654: PUSH
65655: LD_VAR 0 3
65659: PPUSH
65660: LD_INT 3
65662: PPUSH
65663: CALL_OW 275
65667: PUSH
65668: LD_VAR 0 4
65672: PUSH
65673: LD_INT 3
65675: ARRAY
65676: GREATEREQUAL
65677: AND
65678: ST_TO_ADDR
// end ;
65679: LD_VAR 0 2
65683: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
65684: LD_INT 0
65686: PPUSH
65687: PPUSH
65688: PPUSH
// pom := GetBase ( building ) ;
65689: LD_ADDR_VAR 0 4
65693: PUSH
65694: LD_VAR 0 1
65698: PPUSH
65699: CALL_OW 274
65703: ST_TO_ADDR
// if not pom then
65704: LD_VAR 0 4
65708: NOT
65709: IFFALSE 65713
// exit ;
65711: GO 65814
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
65713: LD_ADDR_VAR 0 5
65717: PUSH
65718: LD_VAR 0 2
65722: PPUSH
65723: LD_VAR 0 1
65727: PPUSH
65728: CALL_OW 248
65732: PPUSH
65733: CALL_OW 450
65737: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
65738: LD_ADDR_VAR 0 3
65742: PUSH
65743: LD_VAR 0 4
65747: PPUSH
65748: LD_INT 1
65750: PPUSH
65751: CALL_OW 275
65755: PUSH
65756: LD_VAR 0 5
65760: PUSH
65761: LD_INT 1
65763: ARRAY
65764: GREATEREQUAL
65765: PUSH
65766: LD_VAR 0 4
65770: PPUSH
65771: LD_INT 2
65773: PPUSH
65774: CALL_OW 275
65778: PUSH
65779: LD_VAR 0 5
65783: PUSH
65784: LD_INT 2
65786: ARRAY
65787: GREATEREQUAL
65788: AND
65789: PUSH
65790: LD_VAR 0 4
65794: PPUSH
65795: LD_INT 3
65797: PPUSH
65798: CALL_OW 275
65802: PUSH
65803: LD_VAR 0 5
65807: PUSH
65808: LD_INT 3
65810: ARRAY
65811: GREATEREQUAL
65812: AND
65813: ST_TO_ADDR
// end ;
65814: LD_VAR 0 3
65818: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
65819: LD_INT 0
65821: PPUSH
65822: PPUSH
65823: PPUSH
65824: PPUSH
65825: PPUSH
65826: PPUSH
65827: PPUSH
65828: PPUSH
65829: PPUSH
65830: PPUSH
65831: PPUSH
// result := false ;
65832: LD_ADDR_VAR 0 8
65836: PUSH
65837: LD_INT 0
65839: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
65840: LD_VAR 0 5
65844: NOT
65845: PUSH
65846: LD_VAR 0 1
65850: NOT
65851: OR
65852: PUSH
65853: LD_VAR 0 2
65857: NOT
65858: OR
65859: PUSH
65860: LD_VAR 0 3
65864: NOT
65865: OR
65866: IFFALSE 65870
// exit ;
65868: GO 66684
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
65870: LD_ADDR_VAR 0 14
65874: PUSH
65875: LD_VAR 0 1
65879: PPUSH
65880: LD_VAR 0 2
65884: PPUSH
65885: LD_VAR 0 3
65889: PPUSH
65890: LD_VAR 0 4
65894: PPUSH
65895: LD_VAR 0 5
65899: PUSH
65900: LD_INT 1
65902: ARRAY
65903: PPUSH
65904: CALL_OW 248
65908: PPUSH
65909: LD_INT 0
65911: PPUSH
65912: CALL 67937 0 6
65916: ST_TO_ADDR
// if not hexes then
65917: LD_VAR 0 14
65921: NOT
65922: IFFALSE 65926
// exit ;
65924: GO 66684
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
65926: LD_ADDR_VAR 0 17
65930: PUSH
65931: LD_VAR 0 5
65935: PPUSH
65936: LD_INT 22
65938: PUSH
65939: LD_VAR 0 13
65943: PPUSH
65944: CALL_OW 255
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 2
65955: PUSH
65956: LD_INT 30
65958: PUSH
65959: LD_INT 0
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 30
65968: PUSH
65969: LD_INT 1
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: LIST
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PPUSH
65985: CALL_OW 72
65989: ST_TO_ADDR
// for i = 1 to hexes do
65990: LD_ADDR_VAR 0 9
65994: PUSH
65995: DOUBLE
65996: LD_INT 1
65998: DEC
65999: ST_TO_ADDR
66000: LD_VAR 0 14
66004: PUSH
66005: FOR_TO
66006: IFFALSE 66682
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66008: LD_ADDR_VAR 0 13
66012: PUSH
66013: LD_VAR 0 14
66017: PUSH
66018: LD_VAR 0 9
66022: ARRAY
66023: PUSH
66024: LD_INT 1
66026: ARRAY
66027: PPUSH
66028: LD_VAR 0 14
66032: PUSH
66033: LD_VAR 0 9
66037: ARRAY
66038: PUSH
66039: LD_INT 2
66041: ARRAY
66042: PPUSH
66043: CALL_OW 428
66047: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
66048: LD_VAR 0 14
66052: PUSH
66053: LD_VAR 0 9
66057: ARRAY
66058: PUSH
66059: LD_INT 1
66061: ARRAY
66062: PPUSH
66063: LD_VAR 0 14
66067: PUSH
66068: LD_VAR 0 9
66072: ARRAY
66073: PUSH
66074: LD_INT 2
66076: ARRAY
66077: PPUSH
66078: CALL_OW 351
66082: PUSH
66083: LD_VAR 0 14
66087: PUSH
66088: LD_VAR 0 9
66092: ARRAY
66093: PUSH
66094: LD_INT 1
66096: ARRAY
66097: PPUSH
66098: LD_VAR 0 14
66102: PUSH
66103: LD_VAR 0 9
66107: ARRAY
66108: PUSH
66109: LD_INT 2
66111: ARRAY
66112: PPUSH
66113: CALL_OW 488
66117: NOT
66118: OR
66119: PUSH
66120: LD_VAR 0 13
66124: PPUSH
66125: CALL_OW 247
66129: PUSH
66130: LD_INT 3
66132: EQUAL
66133: OR
66134: IFFALSE 66140
// exit ;
66136: POP
66137: POP
66138: GO 66684
// if not tmp then
66140: LD_VAR 0 13
66144: NOT
66145: IFFALSE 66149
// continue ;
66147: GO 66005
// result := true ;
66149: LD_ADDR_VAR 0 8
66153: PUSH
66154: LD_INT 1
66156: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
66157: LD_VAR 0 6
66161: PUSH
66162: LD_VAR 0 13
66166: PPUSH
66167: CALL_OW 247
66171: PUSH
66172: LD_INT 2
66174: EQUAL
66175: AND
66176: PUSH
66177: LD_VAR 0 13
66181: PPUSH
66182: CALL_OW 263
66186: PUSH
66187: LD_INT 1
66189: EQUAL
66190: AND
66191: IFFALSE 66355
// begin if IsDrivenBy ( tmp ) then
66193: LD_VAR 0 13
66197: PPUSH
66198: CALL_OW 311
66202: IFFALSE 66206
// continue ;
66204: GO 66005
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
66206: LD_VAR 0 6
66210: PPUSH
66211: LD_INT 3
66213: PUSH
66214: LD_INT 60
66216: PUSH
66217: EMPTY
66218: LIST
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 3
66226: PUSH
66227: LD_INT 55
66229: PUSH
66230: EMPTY
66231: LIST
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PPUSH
66241: CALL_OW 72
66245: IFFALSE 66353
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
66247: LD_ADDR_VAR 0 18
66251: PUSH
66252: LD_VAR 0 6
66256: PPUSH
66257: LD_INT 3
66259: PUSH
66260: LD_INT 60
66262: PUSH
66263: EMPTY
66264: LIST
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 3
66272: PUSH
66273: LD_INT 55
66275: PUSH
66276: EMPTY
66277: LIST
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PPUSH
66287: CALL_OW 72
66291: PUSH
66292: LD_INT 1
66294: ARRAY
66295: ST_TO_ADDR
// if IsInUnit ( driver ) then
66296: LD_VAR 0 18
66300: PPUSH
66301: CALL_OW 310
66305: IFFALSE 66316
// ComExit ( driver ) ;
66307: LD_VAR 0 18
66311: PPUSH
66312: CALL 91716 0 1
// AddComEnterUnit ( driver , tmp ) ;
66316: LD_VAR 0 18
66320: PPUSH
66321: LD_VAR 0 13
66325: PPUSH
66326: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
66330: LD_VAR 0 18
66334: PPUSH
66335: LD_VAR 0 7
66339: PPUSH
66340: CALL_OW 173
// AddComExitVehicle ( driver ) ;
66344: LD_VAR 0 18
66348: PPUSH
66349: CALL_OW 181
// end ; continue ;
66353: GO 66005
// end ; if not cleaners or not tmp in cleaners then
66355: LD_VAR 0 6
66359: NOT
66360: PUSH
66361: LD_VAR 0 13
66365: PUSH
66366: LD_VAR 0 6
66370: IN
66371: NOT
66372: OR
66373: IFFALSE 66680
// begin if dep then
66375: LD_VAR 0 17
66379: IFFALSE 66515
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
66381: LD_ADDR_VAR 0 16
66385: PUSH
66386: LD_VAR 0 17
66390: PUSH
66391: LD_INT 1
66393: ARRAY
66394: PPUSH
66395: CALL_OW 250
66399: PPUSH
66400: LD_VAR 0 17
66404: PUSH
66405: LD_INT 1
66407: ARRAY
66408: PPUSH
66409: CALL_OW 254
66413: PPUSH
66414: LD_INT 5
66416: PPUSH
66417: CALL_OW 272
66421: PUSH
66422: LD_VAR 0 17
66426: PUSH
66427: LD_INT 1
66429: ARRAY
66430: PPUSH
66431: CALL_OW 251
66435: PPUSH
66436: LD_VAR 0 17
66440: PUSH
66441: LD_INT 1
66443: ARRAY
66444: PPUSH
66445: CALL_OW 254
66449: PPUSH
66450: LD_INT 5
66452: PPUSH
66453: CALL_OW 273
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
66462: LD_VAR 0 16
66466: PUSH
66467: LD_INT 1
66469: ARRAY
66470: PPUSH
66471: LD_VAR 0 16
66475: PUSH
66476: LD_INT 2
66478: ARRAY
66479: PPUSH
66480: CALL_OW 488
66484: IFFALSE 66515
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
66486: LD_VAR 0 13
66490: PPUSH
66491: LD_VAR 0 16
66495: PUSH
66496: LD_INT 1
66498: ARRAY
66499: PPUSH
66500: LD_VAR 0 16
66504: PUSH
66505: LD_INT 2
66507: ARRAY
66508: PPUSH
66509: CALL_OW 111
// continue ;
66513: GO 66005
// end ; end ; r := GetDir ( tmp ) ;
66515: LD_ADDR_VAR 0 15
66519: PUSH
66520: LD_VAR 0 13
66524: PPUSH
66525: CALL_OW 254
66529: ST_TO_ADDR
// if r = 5 then
66530: LD_VAR 0 15
66534: PUSH
66535: LD_INT 5
66537: EQUAL
66538: IFFALSE 66548
// r := 0 ;
66540: LD_ADDR_VAR 0 15
66544: PUSH
66545: LD_INT 0
66547: ST_TO_ADDR
// for j = r to 5 do
66548: LD_ADDR_VAR 0 10
66552: PUSH
66553: DOUBLE
66554: LD_VAR 0 15
66558: DEC
66559: ST_TO_ADDR
66560: LD_INT 5
66562: PUSH
66563: FOR_TO
66564: IFFALSE 66678
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
66566: LD_ADDR_VAR 0 11
66570: PUSH
66571: LD_VAR 0 13
66575: PPUSH
66576: CALL_OW 250
66580: PPUSH
66581: LD_VAR 0 10
66585: PPUSH
66586: LD_INT 2
66588: PPUSH
66589: CALL_OW 272
66593: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
66594: LD_ADDR_VAR 0 12
66598: PUSH
66599: LD_VAR 0 13
66603: PPUSH
66604: CALL_OW 251
66608: PPUSH
66609: LD_VAR 0 10
66613: PPUSH
66614: LD_INT 2
66616: PPUSH
66617: CALL_OW 273
66621: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
66622: LD_VAR 0 11
66626: PPUSH
66627: LD_VAR 0 12
66631: PPUSH
66632: CALL_OW 488
66636: PUSH
66637: LD_VAR 0 11
66641: PPUSH
66642: LD_VAR 0 12
66646: PPUSH
66647: CALL_OW 428
66651: NOT
66652: AND
66653: IFFALSE 66676
// begin ComMoveXY ( tmp , _x , _y ) ;
66655: LD_VAR 0 13
66659: PPUSH
66660: LD_VAR 0 11
66664: PPUSH
66665: LD_VAR 0 12
66669: PPUSH
66670: CALL_OW 111
// break ;
66674: GO 66678
// end ; end ;
66676: GO 66563
66678: POP
66679: POP
// end ; end ;
66680: GO 66005
66682: POP
66683: POP
// end ;
66684: LD_VAR 0 8
66688: RET
// export function BuildingTechInvented ( side , btype ) ; begin
66689: LD_INT 0
66691: PPUSH
// result := true ;
66692: LD_ADDR_VAR 0 3
66696: PUSH
66697: LD_INT 1
66699: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
66700: LD_VAR 0 2
66704: PUSH
66705: LD_INT 24
66707: DOUBLE
66708: EQUAL
66709: IFTRUE 66719
66711: LD_INT 33
66713: DOUBLE
66714: EQUAL
66715: IFTRUE 66719
66717: GO 66744
66719: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
66720: LD_ADDR_VAR 0 3
66724: PUSH
66725: LD_INT 32
66727: PPUSH
66728: LD_VAR 0 1
66732: PPUSH
66733: CALL_OW 321
66737: PUSH
66738: LD_INT 2
66740: EQUAL
66741: ST_TO_ADDR
66742: GO 67060
66744: LD_INT 20
66746: DOUBLE
66747: EQUAL
66748: IFTRUE 66752
66750: GO 66777
66752: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
66753: LD_ADDR_VAR 0 3
66757: PUSH
66758: LD_INT 6
66760: PPUSH
66761: LD_VAR 0 1
66765: PPUSH
66766: CALL_OW 321
66770: PUSH
66771: LD_INT 2
66773: EQUAL
66774: ST_TO_ADDR
66775: GO 67060
66777: LD_INT 22
66779: DOUBLE
66780: EQUAL
66781: IFTRUE 66791
66783: LD_INT 36
66785: DOUBLE
66786: EQUAL
66787: IFTRUE 66791
66789: GO 66816
66791: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
66792: LD_ADDR_VAR 0 3
66796: PUSH
66797: LD_INT 15
66799: PPUSH
66800: LD_VAR 0 1
66804: PPUSH
66805: CALL_OW 321
66809: PUSH
66810: LD_INT 2
66812: EQUAL
66813: ST_TO_ADDR
66814: GO 67060
66816: LD_INT 30
66818: DOUBLE
66819: EQUAL
66820: IFTRUE 66824
66822: GO 66849
66824: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
66825: LD_ADDR_VAR 0 3
66829: PUSH
66830: LD_INT 20
66832: PPUSH
66833: LD_VAR 0 1
66837: PPUSH
66838: CALL_OW 321
66842: PUSH
66843: LD_INT 2
66845: EQUAL
66846: ST_TO_ADDR
66847: GO 67060
66849: LD_INT 28
66851: DOUBLE
66852: EQUAL
66853: IFTRUE 66863
66855: LD_INT 21
66857: DOUBLE
66858: EQUAL
66859: IFTRUE 66863
66861: GO 66888
66863: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
66864: LD_ADDR_VAR 0 3
66868: PUSH
66869: LD_INT 21
66871: PPUSH
66872: LD_VAR 0 1
66876: PPUSH
66877: CALL_OW 321
66881: PUSH
66882: LD_INT 2
66884: EQUAL
66885: ST_TO_ADDR
66886: GO 67060
66888: LD_INT 16
66890: DOUBLE
66891: EQUAL
66892: IFTRUE 66896
66894: GO 66921
66896: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
66897: LD_ADDR_VAR 0 3
66901: PUSH
66902: LD_INT 84
66904: PPUSH
66905: LD_VAR 0 1
66909: PPUSH
66910: CALL_OW 321
66914: PUSH
66915: LD_INT 2
66917: EQUAL
66918: ST_TO_ADDR
66919: GO 67060
66921: LD_INT 19
66923: DOUBLE
66924: EQUAL
66925: IFTRUE 66935
66927: LD_INT 23
66929: DOUBLE
66930: EQUAL
66931: IFTRUE 66935
66933: GO 66960
66935: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
66936: LD_ADDR_VAR 0 3
66940: PUSH
66941: LD_INT 83
66943: PPUSH
66944: LD_VAR 0 1
66948: PPUSH
66949: CALL_OW 321
66953: PUSH
66954: LD_INT 2
66956: EQUAL
66957: ST_TO_ADDR
66958: GO 67060
66960: LD_INT 17
66962: DOUBLE
66963: EQUAL
66964: IFTRUE 66968
66966: GO 66993
66968: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
66969: LD_ADDR_VAR 0 3
66973: PUSH
66974: LD_INT 39
66976: PPUSH
66977: LD_VAR 0 1
66981: PPUSH
66982: CALL_OW 321
66986: PUSH
66987: LD_INT 2
66989: EQUAL
66990: ST_TO_ADDR
66991: GO 67060
66993: LD_INT 18
66995: DOUBLE
66996: EQUAL
66997: IFTRUE 67001
66999: GO 67026
67001: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
67002: LD_ADDR_VAR 0 3
67006: PUSH
67007: LD_INT 40
67009: PPUSH
67010: LD_VAR 0 1
67014: PPUSH
67015: CALL_OW 321
67019: PUSH
67020: LD_INT 2
67022: EQUAL
67023: ST_TO_ADDR
67024: GO 67060
67026: LD_INT 27
67028: DOUBLE
67029: EQUAL
67030: IFTRUE 67034
67032: GO 67059
67034: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
67035: LD_ADDR_VAR 0 3
67039: PUSH
67040: LD_INT 35
67042: PPUSH
67043: LD_VAR 0 1
67047: PPUSH
67048: CALL_OW 321
67052: PUSH
67053: LD_INT 2
67055: EQUAL
67056: ST_TO_ADDR
67057: GO 67060
67059: POP
// end ;
67060: LD_VAR 0 3
67064: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
67065: LD_INT 0
67067: PPUSH
67068: PPUSH
67069: PPUSH
67070: PPUSH
67071: PPUSH
67072: PPUSH
67073: PPUSH
67074: PPUSH
67075: PPUSH
67076: PPUSH
67077: PPUSH
// result := false ;
67078: LD_ADDR_VAR 0 6
67082: PUSH
67083: LD_INT 0
67085: ST_TO_ADDR
// if btype = b_depot then
67086: LD_VAR 0 2
67090: PUSH
67091: LD_INT 0
67093: EQUAL
67094: IFFALSE 67106
// begin result := true ;
67096: LD_ADDR_VAR 0 6
67100: PUSH
67101: LD_INT 1
67103: ST_TO_ADDR
// exit ;
67104: GO 67932
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
67106: LD_VAR 0 1
67110: NOT
67111: PUSH
67112: LD_VAR 0 1
67116: PPUSH
67117: CALL_OW 266
67121: PUSH
67122: LD_INT 0
67124: PUSH
67125: LD_INT 1
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: IN
67132: NOT
67133: OR
67134: PUSH
67135: LD_VAR 0 2
67139: NOT
67140: OR
67141: PUSH
67142: LD_VAR 0 5
67146: PUSH
67147: LD_INT 0
67149: PUSH
67150: LD_INT 1
67152: PUSH
67153: LD_INT 2
67155: PUSH
67156: LD_INT 3
67158: PUSH
67159: LD_INT 4
67161: PUSH
67162: LD_INT 5
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: IN
67173: NOT
67174: OR
67175: PUSH
67176: LD_VAR 0 3
67180: PPUSH
67181: LD_VAR 0 4
67185: PPUSH
67186: CALL_OW 488
67190: NOT
67191: OR
67192: IFFALSE 67196
// exit ;
67194: GO 67932
// side := GetSide ( depot ) ;
67196: LD_ADDR_VAR 0 9
67200: PUSH
67201: LD_VAR 0 1
67205: PPUSH
67206: CALL_OW 255
67210: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
67211: LD_VAR 0 9
67215: PPUSH
67216: LD_VAR 0 2
67220: PPUSH
67221: CALL 66689 0 2
67225: NOT
67226: IFFALSE 67230
// exit ;
67228: GO 67932
// pom := GetBase ( depot ) ;
67230: LD_ADDR_VAR 0 10
67234: PUSH
67235: LD_VAR 0 1
67239: PPUSH
67240: CALL_OW 274
67244: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
67245: LD_ADDR_VAR 0 11
67249: PUSH
67250: LD_VAR 0 2
67254: PPUSH
67255: LD_VAR 0 1
67259: PPUSH
67260: CALL_OW 248
67264: PPUSH
67265: CALL_OW 450
67269: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
67270: LD_VAR 0 10
67274: PPUSH
67275: LD_INT 1
67277: PPUSH
67278: CALL_OW 275
67282: PUSH
67283: LD_VAR 0 11
67287: PUSH
67288: LD_INT 1
67290: ARRAY
67291: GREATEREQUAL
67292: PUSH
67293: LD_VAR 0 10
67297: PPUSH
67298: LD_INT 2
67300: PPUSH
67301: CALL_OW 275
67305: PUSH
67306: LD_VAR 0 11
67310: PUSH
67311: LD_INT 2
67313: ARRAY
67314: GREATEREQUAL
67315: AND
67316: PUSH
67317: LD_VAR 0 10
67321: PPUSH
67322: LD_INT 3
67324: PPUSH
67325: CALL_OW 275
67329: PUSH
67330: LD_VAR 0 11
67334: PUSH
67335: LD_INT 3
67337: ARRAY
67338: GREATEREQUAL
67339: AND
67340: NOT
67341: IFFALSE 67345
// exit ;
67343: GO 67932
// if GetBType ( depot ) = b_depot then
67345: LD_VAR 0 1
67349: PPUSH
67350: CALL_OW 266
67354: PUSH
67355: LD_INT 0
67357: EQUAL
67358: IFFALSE 67370
// dist := 28 else
67360: LD_ADDR_VAR 0 14
67364: PUSH
67365: LD_INT 28
67367: ST_TO_ADDR
67368: GO 67378
// dist := 36 ;
67370: LD_ADDR_VAR 0 14
67374: PUSH
67375: LD_INT 36
67377: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
67378: LD_VAR 0 1
67382: PPUSH
67383: LD_VAR 0 3
67387: PPUSH
67388: LD_VAR 0 4
67392: PPUSH
67393: CALL_OW 297
67397: PUSH
67398: LD_VAR 0 14
67402: GREATER
67403: IFFALSE 67407
// exit ;
67405: GO 67932
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
67407: LD_ADDR_VAR 0 12
67411: PUSH
67412: LD_VAR 0 2
67416: PPUSH
67417: LD_VAR 0 3
67421: PPUSH
67422: LD_VAR 0 4
67426: PPUSH
67427: LD_VAR 0 5
67431: PPUSH
67432: LD_VAR 0 1
67436: PPUSH
67437: CALL_OW 248
67441: PPUSH
67442: LD_INT 0
67444: PPUSH
67445: CALL 67937 0 6
67449: ST_TO_ADDR
// if not hexes then
67450: LD_VAR 0 12
67454: NOT
67455: IFFALSE 67459
// exit ;
67457: GO 67932
// hex := GetHexInfo ( x , y ) ;
67459: LD_ADDR_VAR 0 15
67463: PUSH
67464: LD_VAR 0 3
67468: PPUSH
67469: LD_VAR 0 4
67473: PPUSH
67474: CALL_OW 546
67478: ST_TO_ADDR
// if hex [ 1 ] then
67479: LD_VAR 0 15
67483: PUSH
67484: LD_INT 1
67486: ARRAY
67487: IFFALSE 67491
// exit ;
67489: GO 67932
// height := hex [ 2 ] ;
67491: LD_ADDR_VAR 0 13
67495: PUSH
67496: LD_VAR 0 15
67500: PUSH
67501: LD_INT 2
67503: ARRAY
67504: ST_TO_ADDR
// for i = 1 to hexes do
67505: LD_ADDR_VAR 0 7
67509: PUSH
67510: DOUBLE
67511: LD_INT 1
67513: DEC
67514: ST_TO_ADDR
67515: LD_VAR 0 12
67519: PUSH
67520: FOR_TO
67521: IFFALSE 67851
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
67523: LD_VAR 0 12
67527: PUSH
67528: LD_VAR 0 7
67532: ARRAY
67533: PUSH
67534: LD_INT 1
67536: ARRAY
67537: PPUSH
67538: LD_VAR 0 12
67542: PUSH
67543: LD_VAR 0 7
67547: ARRAY
67548: PUSH
67549: LD_INT 2
67551: ARRAY
67552: PPUSH
67553: CALL_OW 488
67557: NOT
67558: PUSH
67559: LD_VAR 0 12
67563: PUSH
67564: LD_VAR 0 7
67568: ARRAY
67569: PUSH
67570: LD_INT 1
67572: ARRAY
67573: PPUSH
67574: LD_VAR 0 12
67578: PUSH
67579: LD_VAR 0 7
67583: ARRAY
67584: PUSH
67585: LD_INT 2
67587: ARRAY
67588: PPUSH
67589: CALL_OW 428
67593: PUSH
67594: LD_INT 0
67596: GREATER
67597: OR
67598: PUSH
67599: LD_VAR 0 12
67603: PUSH
67604: LD_VAR 0 7
67608: ARRAY
67609: PUSH
67610: LD_INT 1
67612: ARRAY
67613: PPUSH
67614: LD_VAR 0 12
67618: PUSH
67619: LD_VAR 0 7
67623: ARRAY
67624: PUSH
67625: LD_INT 2
67627: ARRAY
67628: PPUSH
67629: CALL_OW 351
67633: OR
67634: IFFALSE 67640
// exit ;
67636: POP
67637: POP
67638: GO 67932
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67640: LD_ADDR_VAR 0 8
67644: PUSH
67645: LD_VAR 0 12
67649: PUSH
67650: LD_VAR 0 7
67654: ARRAY
67655: PUSH
67656: LD_INT 1
67658: ARRAY
67659: PPUSH
67660: LD_VAR 0 12
67664: PUSH
67665: LD_VAR 0 7
67669: ARRAY
67670: PUSH
67671: LD_INT 2
67673: ARRAY
67674: PPUSH
67675: CALL_OW 546
67679: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
67680: LD_VAR 0 8
67684: PUSH
67685: LD_INT 1
67687: ARRAY
67688: PUSH
67689: LD_VAR 0 8
67693: PUSH
67694: LD_INT 2
67696: ARRAY
67697: PUSH
67698: LD_VAR 0 13
67702: PUSH
67703: LD_INT 2
67705: PLUS
67706: GREATER
67707: OR
67708: PUSH
67709: LD_VAR 0 8
67713: PUSH
67714: LD_INT 2
67716: ARRAY
67717: PUSH
67718: LD_VAR 0 13
67722: PUSH
67723: LD_INT 2
67725: MINUS
67726: LESS
67727: OR
67728: PUSH
67729: LD_VAR 0 8
67733: PUSH
67734: LD_INT 3
67736: ARRAY
67737: PUSH
67738: LD_INT 0
67740: PUSH
67741: LD_INT 8
67743: PUSH
67744: LD_INT 9
67746: PUSH
67747: LD_INT 10
67749: PUSH
67750: LD_INT 11
67752: PUSH
67753: LD_INT 12
67755: PUSH
67756: LD_INT 13
67758: PUSH
67759: LD_INT 16
67761: PUSH
67762: LD_INT 17
67764: PUSH
67765: LD_INT 18
67767: PUSH
67768: LD_INT 19
67770: PUSH
67771: LD_INT 20
67773: PUSH
67774: LD_INT 21
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: IN
67792: NOT
67793: OR
67794: PUSH
67795: LD_VAR 0 8
67799: PUSH
67800: LD_INT 5
67802: ARRAY
67803: NOT
67804: OR
67805: PUSH
67806: LD_VAR 0 8
67810: PUSH
67811: LD_INT 6
67813: ARRAY
67814: PUSH
67815: LD_INT 1
67817: PUSH
67818: LD_INT 2
67820: PUSH
67821: LD_INT 7
67823: PUSH
67824: LD_INT 9
67826: PUSH
67827: LD_INT 10
67829: PUSH
67830: LD_INT 11
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: IN
67841: NOT
67842: OR
67843: IFFALSE 67849
// exit ;
67845: POP
67846: POP
67847: GO 67932
// end ;
67849: GO 67520
67851: POP
67852: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
67853: LD_VAR 0 9
67857: PPUSH
67858: LD_VAR 0 3
67862: PPUSH
67863: LD_VAR 0 4
67867: PPUSH
67868: LD_INT 20
67870: PPUSH
67871: CALL 59855 0 4
67875: PUSH
67876: LD_INT 4
67878: ARRAY
67879: IFFALSE 67883
// exit ;
67881: GO 67932
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
67883: LD_VAR 0 2
67887: PUSH
67888: LD_INT 29
67890: PUSH
67891: LD_INT 30
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: IN
67898: PUSH
67899: LD_VAR 0 3
67903: PPUSH
67904: LD_VAR 0 4
67908: PPUSH
67909: LD_VAR 0 9
67913: PPUSH
67914: CALL_OW 440
67918: NOT
67919: AND
67920: IFFALSE 67924
// exit ;
67922: GO 67932
// result := true ;
67924: LD_ADDR_VAR 0 6
67928: PUSH
67929: LD_INT 1
67931: ST_TO_ADDR
// end ;
67932: LD_VAR 0 6
67936: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
67937: LD_INT 0
67939: PPUSH
67940: PPUSH
67941: PPUSH
67942: PPUSH
67943: PPUSH
67944: PPUSH
67945: PPUSH
67946: PPUSH
67947: PPUSH
67948: PPUSH
67949: PPUSH
67950: PPUSH
67951: PPUSH
67952: PPUSH
67953: PPUSH
67954: PPUSH
67955: PPUSH
67956: PPUSH
67957: PPUSH
67958: PPUSH
67959: PPUSH
67960: PPUSH
67961: PPUSH
67962: PPUSH
67963: PPUSH
67964: PPUSH
67965: PPUSH
67966: PPUSH
67967: PPUSH
67968: PPUSH
67969: PPUSH
67970: PPUSH
67971: PPUSH
67972: PPUSH
67973: PPUSH
67974: PPUSH
67975: PPUSH
67976: PPUSH
67977: PPUSH
67978: PPUSH
67979: PPUSH
67980: PPUSH
67981: PPUSH
67982: PPUSH
67983: PPUSH
67984: PPUSH
67985: PPUSH
67986: PPUSH
67987: PPUSH
67988: PPUSH
67989: PPUSH
67990: PPUSH
67991: PPUSH
67992: PPUSH
67993: PPUSH
67994: PPUSH
67995: PPUSH
67996: PPUSH
// result = [ ] ;
67997: LD_ADDR_VAR 0 7
68001: PUSH
68002: EMPTY
68003: ST_TO_ADDR
// temp_list = [ ] ;
68004: LD_ADDR_VAR 0 9
68008: PUSH
68009: EMPTY
68010: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
68011: LD_VAR 0 4
68015: PUSH
68016: LD_INT 0
68018: PUSH
68019: LD_INT 1
68021: PUSH
68022: LD_INT 2
68024: PUSH
68025: LD_INT 3
68027: PUSH
68028: LD_INT 4
68030: PUSH
68031: LD_INT 5
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: IN
68042: NOT
68043: PUSH
68044: LD_VAR 0 1
68048: PUSH
68049: LD_INT 0
68051: PUSH
68052: LD_INT 1
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: IN
68059: PUSH
68060: LD_VAR 0 5
68064: PUSH
68065: LD_INT 1
68067: PUSH
68068: LD_INT 2
68070: PUSH
68071: LD_INT 3
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: LIST
68078: IN
68079: NOT
68080: AND
68081: OR
68082: IFFALSE 68086
// exit ;
68084: GO 86477
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
68086: LD_VAR 0 1
68090: PUSH
68091: LD_INT 6
68093: PUSH
68094: LD_INT 7
68096: PUSH
68097: LD_INT 8
68099: PUSH
68100: LD_INT 13
68102: PUSH
68103: LD_INT 12
68105: PUSH
68106: LD_INT 15
68108: PUSH
68109: LD_INT 11
68111: PUSH
68112: LD_INT 14
68114: PUSH
68115: LD_INT 10
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: IN
68129: IFFALSE 68139
// btype = b_lab ;
68131: LD_ADDR_VAR 0 1
68135: PUSH
68136: LD_INT 6
68138: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
68139: LD_VAR 0 6
68143: PUSH
68144: LD_INT 0
68146: PUSH
68147: LD_INT 1
68149: PUSH
68150: LD_INT 2
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: LIST
68157: IN
68158: NOT
68159: PUSH
68160: LD_VAR 0 1
68164: PUSH
68165: LD_INT 0
68167: PUSH
68168: LD_INT 1
68170: PUSH
68171: LD_INT 2
68173: PUSH
68174: LD_INT 3
68176: PUSH
68177: LD_INT 6
68179: PUSH
68180: LD_INT 36
68182: PUSH
68183: LD_INT 4
68185: PUSH
68186: LD_INT 5
68188: PUSH
68189: LD_INT 31
68191: PUSH
68192: LD_INT 32
68194: PUSH
68195: LD_INT 33
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: LIST
68202: LIST
68203: LIST
68204: LIST
68205: LIST
68206: LIST
68207: LIST
68208: LIST
68209: LIST
68210: IN
68211: NOT
68212: PUSH
68213: LD_VAR 0 6
68217: PUSH
68218: LD_INT 1
68220: EQUAL
68221: AND
68222: OR
68223: PUSH
68224: LD_VAR 0 1
68228: PUSH
68229: LD_INT 2
68231: PUSH
68232: LD_INT 3
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: IN
68239: NOT
68240: PUSH
68241: LD_VAR 0 6
68245: PUSH
68246: LD_INT 2
68248: EQUAL
68249: AND
68250: OR
68251: IFFALSE 68261
// mode = 0 ;
68253: LD_ADDR_VAR 0 6
68257: PUSH
68258: LD_INT 0
68260: ST_TO_ADDR
// case mode of 0 :
68261: LD_VAR 0 6
68265: PUSH
68266: LD_INT 0
68268: DOUBLE
68269: EQUAL
68270: IFTRUE 68274
68272: GO 79727
68274: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68275: LD_ADDR_VAR 0 11
68279: PUSH
68280: LD_INT 0
68282: PUSH
68283: LD_INT 0
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 0
68292: PUSH
68293: LD_INT 1
68295: NEG
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 1
68303: PUSH
68304: LD_INT 0
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 1
68313: PUSH
68314: LD_INT 1
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 0
68323: PUSH
68324: LD_INT 1
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 1
68333: NEG
68334: PUSH
68335: LD_INT 0
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 1
68344: NEG
68345: PUSH
68346: LD_INT 1
68348: NEG
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 1
68356: NEG
68357: PUSH
68358: LD_INT 2
68360: NEG
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: LD_INT 0
68368: PUSH
68369: LD_INT 2
68371: NEG
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 1
68379: PUSH
68380: LD_INT 1
68382: NEG
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 1
68390: PUSH
68391: LD_INT 2
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: LD_INT 0
68400: PUSH
68401: LD_INT 2
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 1
68410: NEG
68411: PUSH
68412: LD_INT 1
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 1
68421: PUSH
68422: LD_INT 3
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: PUSH
68429: LD_INT 0
68431: PUSH
68432: LD_INT 3
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: LD_INT 1
68441: NEG
68442: PUSH
68443: LD_INT 2
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68468: LD_ADDR_VAR 0 12
68472: PUSH
68473: LD_INT 0
68475: PUSH
68476: LD_INT 0
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 0
68485: PUSH
68486: LD_INT 1
68488: NEG
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 1
68496: PUSH
68497: LD_INT 0
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 1
68506: PUSH
68507: LD_INT 1
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 0
68516: PUSH
68517: LD_INT 1
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 1
68526: NEG
68527: PUSH
68528: LD_INT 0
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 1
68537: NEG
68538: PUSH
68539: LD_INT 1
68541: NEG
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: PUSH
68547: LD_INT 1
68549: PUSH
68550: LD_INT 1
68552: NEG
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 2
68560: PUSH
68561: LD_INT 0
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 2
68570: PUSH
68571: LD_INT 1
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: PUSH
68578: LD_INT 1
68580: NEG
68581: PUSH
68582: LD_INT 1
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: PUSH
68589: LD_INT 2
68591: NEG
68592: PUSH
68593: LD_INT 0
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_INT 2
68602: NEG
68603: PUSH
68604: LD_INT 1
68606: NEG
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 2
68614: NEG
68615: PUSH
68616: LD_INT 1
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: LD_INT 3
68625: NEG
68626: PUSH
68627: LD_INT 0
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 3
68636: NEG
68637: PUSH
68638: LD_INT 1
68640: NEG
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68664: LD_ADDR_VAR 0 13
68668: PUSH
68669: LD_INT 0
68671: PUSH
68672: LD_INT 0
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PUSH
68679: LD_INT 0
68681: PUSH
68682: LD_INT 1
68684: NEG
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: LD_INT 1
68692: PUSH
68693: LD_INT 0
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 1
68702: PUSH
68703: LD_INT 1
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 0
68712: PUSH
68713: LD_INT 1
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: PUSH
68720: LD_INT 1
68722: NEG
68723: PUSH
68724: LD_INT 0
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 1
68733: NEG
68734: PUSH
68735: LD_INT 1
68737: NEG
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 1
68745: NEG
68746: PUSH
68747: LD_INT 2
68749: NEG
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 2
68757: PUSH
68758: LD_INT 1
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 2
68767: PUSH
68768: LD_INT 2
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 1
68777: PUSH
68778: LD_INT 2
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 2
68787: NEG
68788: PUSH
68789: LD_INT 1
68791: NEG
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 2
68799: NEG
68800: PUSH
68801: LD_INT 2
68803: NEG
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 2
68811: NEG
68812: PUSH
68813: LD_INT 3
68815: NEG
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 3
68823: NEG
68824: PUSH
68825: LD_INT 2
68827: NEG
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: PUSH
68833: LD_INT 3
68835: NEG
68836: PUSH
68837: LD_INT 3
68839: NEG
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: LIST
68849: LIST
68850: LIST
68851: LIST
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68863: LD_ADDR_VAR 0 14
68867: PUSH
68868: LD_INT 0
68870: PUSH
68871: LD_INT 0
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 0
68880: PUSH
68881: LD_INT 1
68883: NEG
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 1
68891: PUSH
68892: LD_INT 0
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 1
68901: PUSH
68902: LD_INT 1
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 0
68911: PUSH
68912: LD_INT 1
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 1
68921: NEG
68922: PUSH
68923: LD_INT 0
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 1
68932: NEG
68933: PUSH
68934: LD_INT 1
68936: NEG
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 1
68944: NEG
68945: PUSH
68946: LD_INT 2
68948: NEG
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 0
68956: PUSH
68957: LD_INT 2
68959: NEG
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: LD_INT 1
68967: PUSH
68968: LD_INT 1
68970: NEG
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 1
68978: PUSH
68979: LD_INT 2
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 0
68988: PUSH
68989: LD_INT 2
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: LD_INT 1
68998: NEG
68999: PUSH
69000: LD_INT 1
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 1
69009: NEG
69010: PUSH
69011: LD_INT 3
69013: NEG
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: LD_INT 0
69021: PUSH
69022: LD_INT 3
69024: NEG
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 1
69032: PUSH
69033: LD_INT 2
69035: NEG
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69059: LD_ADDR_VAR 0 15
69063: PUSH
69064: LD_INT 0
69066: PUSH
69067: LD_INT 0
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 0
69076: PUSH
69077: LD_INT 1
69079: NEG
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_INT 1
69087: PUSH
69088: LD_INT 0
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 1
69097: PUSH
69098: LD_INT 1
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: PUSH
69105: LD_INT 0
69107: PUSH
69108: LD_INT 1
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 1
69117: NEG
69118: PUSH
69119: LD_INT 0
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 1
69128: NEG
69129: PUSH
69130: LD_INT 1
69132: NEG
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 1
69140: PUSH
69141: LD_INT 1
69143: NEG
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 2
69151: PUSH
69152: LD_INT 0
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 2
69161: PUSH
69162: LD_INT 1
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 1
69171: NEG
69172: PUSH
69173: LD_INT 1
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: PUSH
69180: LD_INT 2
69182: NEG
69183: PUSH
69184: LD_INT 0
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: PUSH
69191: LD_INT 2
69193: NEG
69194: PUSH
69195: LD_INT 1
69197: NEG
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: LD_INT 2
69205: PUSH
69206: LD_INT 1
69208: NEG
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: LD_INT 3
69216: PUSH
69217: LD_INT 0
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: LD_INT 3
69226: PUSH
69227: LD_INT 1
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69252: LD_ADDR_VAR 0 16
69256: PUSH
69257: LD_INT 0
69259: PUSH
69260: LD_INT 0
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 0
69269: PUSH
69270: LD_INT 1
69272: NEG
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PUSH
69278: LD_INT 1
69280: PUSH
69281: LD_INT 0
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 1
69290: PUSH
69291: LD_INT 1
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 0
69300: PUSH
69301: LD_INT 1
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: LD_INT 1
69310: NEG
69311: PUSH
69312: LD_INT 0
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 1
69321: NEG
69322: PUSH
69323: LD_INT 1
69325: NEG
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 1
69333: NEG
69334: PUSH
69335: LD_INT 2
69337: NEG
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: PUSH
69343: LD_INT 2
69345: PUSH
69346: LD_INT 1
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: LD_INT 2
69355: PUSH
69356: LD_INT 2
69358: PUSH
69359: EMPTY
69360: LIST
69361: LIST
69362: PUSH
69363: LD_INT 1
69365: PUSH
69366: LD_INT 2
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: PUSH
69373: LD_INT 2
69375: NEG
69376: PUSH
69377: LD_INT 1
69379: NEG
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PUSH
69385: LD_INT 2
69387: NEG
69388: PUSH
69389: LD_INT 2
69391: NEG
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PUSH
69397: LD_INT 3
69399: PUSH
69400: LD_INT 2
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 3
69409: PUSH
69410: LD_INT 3
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 2
69419: PUSH
69420: LD_INT 3
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: LIST
69431: LIST
69432: LIST
69433: LIST
69434: LIST
69435: LIST
69436: LIST
69437: LIST
69438: LIST
69439: LIST
69440: LIST
69441: LIST
69442: LIST
69443: LIST
69444: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69445: LD_ADDR_VAR 0 17
69449: PUSH
69450: LD_INT 0
69452: PUSH
69453: LD_INT 0
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 0
69462: PUSH
69463: LD_INT 1
69465: NEG
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PUSH
69471: LD_INT 1
69473: PUSH
69474: LD_INT 0
69476: PUSH
69477: EMPTY
69478: LIST
69479: LIST
69480: PUSH
69481: LD_INT 1
69483: PUSH
69484: LD_INT 1
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: PUSH
69491: LD_INT 0
69493: PUSH
69494: LD_INT 1
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 1
69503: NEG
69504: PUSH
69505: LD_INT 0
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: LD_INT 1
69514: NEG
69515: PUSH
69516: LD_INT 1
69518: NEG
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: PUSH
69524: LD_INT 1
69526: NEG
69527: PUSH
69528: LD_INT 2
69530: NEG
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: LD_INT 0
69538: PUSH
69539: LD_INT 2
69541: NEG
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: PUSH
69547: LD_INT 1
69549: PUSH
69550: LD_INT 1
69552: NEG
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: PUSH
69558: LD_INT 2
69560: PUSH
69561: LD_INT 0
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: LD_INT 2
69570: PUSH
69571: LD_INT 1
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 2
69580: PUSH
69581: LD_INT 2
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 1
69590: PUSH
69591: LD_INT 2
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 0
69600: PUSH
69601: LD_INT 2
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 1
69610: NEG
69611: PUSH
69612: LD_INT 1
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PUSH
69619: LD_INT 2
69621: NEG
69622: PUSH
69623: LD_INT 0
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 2
69632: NEG
69633: PUSH
69634: LD_INT 1
69636: NEG
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 2
69644: NEG
69645: PUSH
69646: LD_INT 2
69648: NEG
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: LIST
69660: LIST
69661: LIST
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69675: LD_ADDR_VAR 0 18
69679: PUSH
69680: LD_INT 0
69682: PUSH
69683: LD_INT 0
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 0
69692: PUSH
69693: LD_INT 1
69695: NEG
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: LD_INT 1
69703: PUSH
69704: LD_INT 0
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: PUSH
69711: LD_INT 1
69713: PUSH
69714: LD_INT 1
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: LD_INT 0
69723: PUSH
69724: LD_INT 1
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: LD_INT 1
69733: NEG
69734: PUSH
69735: LD_INT 0
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 1
69744: NEG
69745: PUSH
69746: LD_INT 1
69748: NEG
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 1
69756: NEG
69757: PUSH
69758: LD_INT 2
69760: NEG
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 0
69768: PUSH
69769: LD_INT 2
69771: NEG
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 1
69779: PUSH
69780: LD_INT 1
69782: NEG
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: PUSH
69788: LD_INT 2
69790: PUSH
69791: LD_INT 0
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PUSH
69798: LD_INT 2
69800: PUSH
69801: LD_INT 1
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: LD_INT 2
69810: PUSH
69811: LD_INT 2
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PUSH
69818: LD_INT 1
69820: PUSH
69821: LD_INT 2
69823: PUSH
69824: EMPTY
69825: LIST
69826: LIST
69827: PUSH
69828: LD_INT 0
69830: PUSH
69831: LD_INT 2
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: PUSH
69838: LD_INT 1
69840: NEG
69841: PUSH
69842: LD_INT 1
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: LD_INT 2
69851: NEG
69852: PUSH
69853: LD_INT 0
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 2
69862: NEG
69863: PUSH
69864: LD_INT 1
69866: NEG
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: PUSH
69872: LD_INT 2
69874: NEG
69875: PUSH
69876: LD_INT 2
69878: NEG
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: LIST
69888: LIST
69889: LIST
69890: LIST
69891: LIST
69892: LIST
69893: LIST
69894: LIST
69895: LIST
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69905: LD_ADDR_VAR 0 19
69909: PUSH
69910: LD_INT 0
69912: PUSH
69913: LD_INT 0
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: LD_INT 0
69922: PUSH
69923: LD_INT 1
69925: NEG
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: LD_INT 1
69933: PUSH
69934: LD_INT 0
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 1
69943: PUSH
69944: LD_INT 1
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_INT 0
69953: PUSH
69954: LD_INT 1
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 1
69963: NEG
69964: PUSH
69965: LD_INT 0
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: PUSH
69972: LD_INT 1
69974: NEG
69975: PUSH
69976: LD_INT 1
69978: NEG
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: PUSH
69984: LD_INT 1
69986: NEG
69987: PUSH
69988: LD_INT 2
69990: NEG
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 0
69998: PUSH
69999: LD_INT 2
70001: NEG
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: LD_INT 1
70009: PUSH
70010: LD_INT 1
70012: NEG
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 2
70020: PUSH
70021: LD_INT 0
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 2
70030: PUSH
70031: LD_INT 1
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: LD_INT 2
70040: PUSH
70041: LD_INT 2
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 1
70050: PUSH
70051: LD_INT 2
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 0
70060: PUSH
70061: LD_INT 2
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 1
70070: NEG
70071: PUSH
70072: LD_INT 1
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 2
70081: NEG
70082: PUSH
70083: LD_INT 0
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: LD_INT 2
70092: NEG
70093: PUSH
70094: LD_INT 1
70096: NEG
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: PUSH
70102: LD_INT 2
70104: NEG
70105: PUSH
70106: LD_INT 2
70108: NEG
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: LIST
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70135: LD_ADDR_VAR 0 20
70139: PUSH
70140: LD_INT 0
70142: PUSH
70143: LD_INT 0
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_INT 0
70152: PUSH
70153: LD_INT 1
70155: NEG
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: LD_INT 1
70163: PUSH
70164: LD_INT 0
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_INT 1
70173: PUSH
70174: LD_INT 1
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 0
70183: PUSH
70184: LD_INT 1
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 1
70193: NEG
70194: PUSH
70195: LD_INT 0
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 1
70204: NEG
70205: PUSH
70206: LD_INT 1
70208: NEG
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PUSH
70214: LD_INT 1
70216: NEG
70217: PUSH
70218: LD_INT 2
70220: NEG
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: LD_INT 0
70228: PUSH
70229: LD_INT 2
70231: NEG
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: LD_INT 1
70239: PUSH
70240: LD_INT 1
70242: NEG
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 2
70250: PUSH
70251: LD_INT 0
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 2
70260: PUSH
70261: LD_INT 1
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 2
70270: PUSH
70271: LD_INT 2
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PUSH
70278: LD_INT 1
70280: PUSH
70281: LD_INT 2
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PUSH
70288: LD_INT 0
70290: PUSH
70291: LD_INT 2
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 1
70300: NEG
70301: PUSH
70302: LD_INT 1
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 2
70311: NEG
70312: PUSH
70313: LD_INT 0
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 2
70322: NEG
70323: PUSH
70324: LD_INT 1
70326: NEG
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: PUSH
70332: LD_INT 2
70334: NEG
70335: PUSH
70336: LD_INT 2
70338: NEG
70339: PUSH
70340: EMPTY
70341: LIST
70342: LIST
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: LIST
70364: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70365: LD_ADDR_VAR 0 21
70369: PUSH
70370: LD_INT 0
70372: PUSH
70373: LD_INT 0
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 0
70382: PUSH
70383: LD_INT 1
70385: NEG
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 1
70393: PUSH
70394: LD_INT 0
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: PUSH
70401: LD_INT 1
70403: PUSH
70404: LD_INT 1
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 0
70413: PUSH
70414: LD_INT 1
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 1
70423: NEG
70424: PUSH
70425: LD_INT 0
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: PUSH
70432: LD_INT 1
70434: NEG
70435: PUSH
70436: LD_INT 1
70438: NEG
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: PUSH
70444: LD_INT 1
70446: NEG
70447: PUSH
70448: LD_INT 2
70450: NEG
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PUSH
70456: LD_INT 0
70458: PUSH
70459: LD_INT 2
70461: NEG
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: LD_INT 1
70469: PUSH
70470: LD_INT 1
70472: NEG
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PUSH
70478: LD_INT 2
70480: PUSH
70481: LD_INT 0
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: PUSH
70488: LD_INT 2
70490: PUSH
70491: LD_INT 1
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 2
70500: PUSH
70501: LD_INT 2
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 1
70510: PUSH
70511: LD_INT 2
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: PUSH
70518: LD_INT 0
70520: PUSH
70521: LD_INT 2
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 1
70530: NEG
70531: PUSH
70532: LD_INT 1
70534: PUSH
70535: EMPTY
70536: LIST
70537: LIST
70538: PUSH
70539: LD_INT 2
70541: NEG
70542: PUSH
70543: LD_INT 0
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 2
70552: NEG
70553: PUSH
70554: LD_INT 1
70556: NEG
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: LD_INT 2
70564: NEG
70565: PUSH
70566: LD_INT 2
70568: NEG
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70595: LD_ADDR_VAR 0 22
70599: PUSH
70600: LD_INT 0
70602: PUSH
70603: LD_INT 0
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 0
70612: PUSH
70613: LD_INT 1
70615: NEG
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: LD_INT 1
70623: PUSH
70624: LD_INT 0
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 1
70633: PUSH
70634: LD_INT 1
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 0
70643: PUSH
70644: LD_INT 1
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 1
70653: NEG
70654: PUSH
70655: LD_INT 0
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: LD_INT 1
70664: NEG
70665: PUSH
70666: LD_INT 1
70668: NEG
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: PUSH
70674: LD_INT 1
70676: NEG
70677: PUSH
70678: LD_INT 2
70680: NEG
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: PUSH
70686: LD_INT 0
70688: PUSH
70689: LD_INT 2
70691: NEG
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: PUSH
70697: LD_INT 1
70699: PUSH
70700: LD_INT 1
70702: NEG
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: PUSH
70708: LD_INT 2
70710: PUSH
70711: LD_INT 0
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: LD_INT 2
70720: PUSH
70721: LD_INT 1
70723: PUSH
70724: EMPTY
70725: LIST
70726: LIST
70727: PUSH
70728: LD_INT 2
70730: PUSH
70731: LD_INT 2
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PUSH
70738: LD_INT 1
70740: PUSH
70741: LD_INT 2
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: PUSH
70748: LD_INT 0
70750: PUSH
70751: LD_INT 2
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: LD_INT 1
70760: NEG
70761: PUSH
70762: LD_INT 1
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: PUSH
70769: LD_INT 2
70771: NEG
70772: PUSH
70773: LD_INT 0
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: LD_INT 2
70782: NEG
70783: PUSH
70784: LD_INT 1
70786: NEG
70787: PUSH
70788: EMPTY
70789: LIST
70790: LIST
70791: PUSH
70792: LD_INT 2
70794: NEG
70795: PUSH
70796: LD_INT 2
70798: NEG
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
70825: LD_ADDR_VAR 0 23
70829: PUSH
70830: LD_INT 0
70832: PUSH
70833: LD_INT 0
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: PUSH
70840: LD_INT 0
70842: PUSH
70843: LD_INT 1
70845: NEG
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: PUSH
70851: LD_INT 1
70853: PUSH
70854: LD_INT 0
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 1
70863: PUSH
70864: LD_INT 1
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: PUSH
70871: LD_INT 0
70873: PUSH
70874: LD_INT 1
70876: PUSH
70877: EMPTY
70878: LIST
70879: LIST
70880: PUSH
70881: LD_INT 1
70883: NEG
70884: PUSH
70885: LD_INT 0
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PUSH
70892: LD_INT 1
70894: NEG
70895: PUSH
70896: LD_INT 1
70898: NEG
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: PUSH
70904: LD_INT 1
70906: NEG
70907: PUSH
70908: LD_INT 2
70910: NEG
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: PUSH
70916: LD_INT 0
70918: PUSH
70919: LD_INT 2
70921: NEG
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: PUSH
70927: LD_INT 1
70929: PUSH
70930: LD_INT 1
70932: NEG
70933: PUSH
70934: EMPTY
70935: LIST
70936: LIST
70937: PUSH
70938: LD_INT 2
70940: PUSH
70941: LD_INT 0
70943: PUSH
70944: EMPTY
70945: LIST
70946: LIST
70947: PUSH
70948: LD_INT 2
70950: PUSH
70951: LD_INT 1
70953: PUSH
70954: EMPTY
70955: LIST
70956: LIST
70957: PUSH
70958: LD_INT 2
70960: PUSH
70961: LD_INT 2
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: PUSH
70968: LD_INT 1
70970: PUSH
70971: LD_INT 2
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: PUSH
70978: LD_INT 0
70980: PUSH
70981: LD_INT 2
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: PUSH
70988: LD_INT 1
70990: NEG
70991: PUSH
70992: LD_INT 1
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_INT 2
71001: NEG
71002: PUSH
71003: LD_INT 0
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 2
71012: NEG
71013: PUSH
71014: LD_INT 1
71016: NEG
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 2
71024: NEG
71025: PUSH
71026: LD_INT 2
71028: NEG
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: PUSH
71034: LD_INT 2
71036: NEG
71037: PUSH
71038: LD_INT 3
71040: NEG
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 1
71048: NEG
71049: PUSH
71050: LD_INT 3
71052: NEG
71053: PUSH
71054: EMPTY
71055: LIST
71056: LIST
71057: PUSH
71058: LD_INT 1
71060: PUSH
71061: LD_INT 2
71063: NEG
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: PUSH
71069: LD_INT 2
71071: PUSH
71072: LD_INT 1
71074: NEG
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: LIST
71084: LIST
71085: LIST
71086: LIST
71087: LIST
71088: LIST
71089: LIST
71090: LIST
71091: LIST
71092: LIST
71093: LIST
71094: LIST
71095: LIST
71096: LIST
71097: LIST
71098: LIST
71099: LIST
71100: LIST
71101: LIST
71102: LIST
71103: LIST
71104: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
71105: LD_ADDR_VAR 0 24
71109: PUSH
71110: LD_INT 0
71112: PUSH
71113: LD_INT 0
71115: PUSH
71116: EMPTY
71117: LIST
71118: LIST
71119: PUSH
71120: LD_INT 0
71122: PUSH
71123: LD_INT 1
71125: NEG
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: PUSH
71131: LD_INT 1
71133: PUSH
71134: LD_INT 0
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: PUSH
71141: LD_INT 1
71143: PUSH
71144: LD_INT 1
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: LD_INT 0
71153: PUSH
71154: LD_INT 1
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PUSH
71161: LD_INT 1
71163: NEG
71164: PUSH
71165: LD_INT 0
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: PUSH
71172: LD_INT 1
71174: NEG
71175: PUSH
71176: LD_INT 1
71178: NEG
71179: PUSH
71180: EMPTY
71181: LIST
71182: LIST
71183: PUSH
71184: LD_INT 1
71186: NEG
71187: PUSH
71188: LD_INT 2
71190: NEG
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: PUSH
71196: LD_INT 0
71198: PUSH
71199: LD_INT 2
71201: NEG
71202: PUSH
71203: EMPTY
71204: LIST
71205: LIST
71206: PUSH
71207: LD_INT 1
71209: PUSH
71210: LD_INT 1
71212: NEG
71213: PUSH
71214: EMPTY
71215: LIST
71216: LIST
71217: PUSH
71218: LD_INT 2
71220: PUSH
71221: LD_INT 0
71223: PUSH
71224: EMPTY
71225: LIST
71226: LIST
71227: PUSH
71228: LD_INT 2
71230: PUSH
71231: LD_INT 1
71233: PUSH
71234: EMPTY
71235: LIST
71236: LIST
71237: PUSH
71238: LD_INT 2
71240: PUSH
71241: LD_INT 2
71243: PUSH
71244: EMPTY
71245: LIST
71246: LIST
71247: PUSH
71248: LD_INT 1
71250: PUSH
71251: LD_INT 2
71253: PUSH
71254: EMPTY
71255: LIST
71256: LIST
71257: PUSH
71258: LD_INT 0
71260: PUSH
71261: LD_INT 2
71263: PUSH
71264: EMPTY
71265: LIST
71266: LIST
71267: PUSH
71268: LD_INT 1
71270: NEG
71271: PUSH
71272: LD_INT 1
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: PUSH
71279: LD_INT 2
71281: NEG
71282: PUSH
71283: LD_INT 0
71285: PUSH
71286: EMPTY
71287: LIST
71288: LIST
71289: PUSH
71290: LD_INT 2
71292: NEG
71293: PUSH
71294: LD_INT 1
71296: NEG
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: PUSH
71302: LD_INT 2
71304: NEG
71305: PUSH
71306: LD_INT 2
71308: NEG
71309: PUSH
71310: EMPTY
71311: LIST
71312: LIST
71313: PUSH
71314: LD_INT 1
71316: PUSH
71317: LD_INT 2
71319: NEG
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: PUSH
71325: LD_INT 2
71327: PUSH
71328: LD_INT 1
71330: NEG
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: PUSH
71336: LD_INT 3
71338: PUSH
71339: LD_INT 1
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: PUSH
71346: LD_INT 3
71348: PUSH
71349: LD_INT 2
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: LIST
71364: LIST
71365: LIST
71366: LIST
71367: LIST
71368: LIST
71369: LIST
71370: LIST
71371: LIST
71372: LIST
71373: LIST
71374: LIST
71375: LIST
71376: LIST
71377: LIST
71378: LIST
71379: LIST
71380: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
71381: LD_ADDR_VAR 0 25
71385: PUSH
71386: LD_INT 0
71388: PUSH
71389: LD_INT 0
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: PUSH
71396: LD_INT 0
71398: PUSH
71399: LD_INT 1
71401: NEG
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: PUSH
71407: LD_INT 1
71409: PUSH
71410: LD_INT 0
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: PUSH
71417: LD_INT 1
71419: PUSH
71420: LD_INT 1
71422: PUSH
71423: EMPTY
71424: LIST
71425: LIST
71426: PUSH
71427: LD_INT 0
71429: PUSH
71430: LD_INT 1
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: PUSH
71437: LD_INT 1
71439: NEG
71440: PUSH
71441: LD_INT 0
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: PUSH
71448: LD_INT 1
71450: NEG
71451: PUSH
71452: LD_INT 1
71454: NEG
71455: PUSH
71456: EMPTY
71457: LIST
71458: LIST
71459: PUSH
71460: LD_INT 1
71462: NEG
71463: PUSH
71464: LD_INT 2
71466: NEG
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: PUSH
71472: LD_INT 0
71474: PUSH
71475: LD_INT 2
71477: NEG
71478: PUSH
71479: EMPTY
71480: LIST
71481: LIST
71482: PUSH
71483: LD_INT 1
71485: PUSH
71486: LD_INT 1
71488: NEG
71489: PUSH
71490: EMPTY
71491: LIST
71492: LIST
71493: PUSH
71494: LD_INT 2
71496: PUSH
71497: LD_INT 0
71499: PUSH
71500: EMPTY
71501: LIST
71502: LIST
71503: PUSH
71504: LD_INT 2
71506: PUSH
71507: LD_INT 1
71509: PUSH
71510: EMPTY
71511: LIST
71512: LIST
71513: PUSH
71514: LD_INT 2
71516: PUSH
71517: LD_INT 2
71519: PUSH
71520: EMPTY
71521: LIST
71522: LIST
71523: PUSH
71524: LD_INT 1
71526: PUSH
71527: LD_INT 2
71529: PUSH
71530: EMPTY
71531: LIST
71532: LIST
71533: PUSH
71534: LD_INT 0
71536: PUSH
71537: LD_INT 2
71539: PUSH
71540: EMPTY
71541: LIST
71542: LIST
71543: PUSH
71544: LD_INT 1
71546: NEG
71547: PUSH
71548: LD_INT 1
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: PUSH
71555: LD_INT 2
71557: NEG
71558: PUSH
71559: LD_INT 0
71561: PUSH
71562: EMPTY
71563: LIST
71564: LIST
71565: PUSH
71566: LD_INT 2
71568: NEG
71569: PUSH
71570: LD_INT 1
71572: NEG
71573: PUSH
71574: EMPTY
71575: LIST
71576: LIST
71577: PUSH
71578: LD_INT 2
71580: NEG
71581: PUSH
71582: LD_INT 2
71584: NEG
71585: PUSH
71586: EMPTY
71587: LIST
71588: LIST
71589: PUSH
71590: LD_INT 3
71592: PUSH
71593: LD_INT 1
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: PUSH
71600: LD_INT 3
71602: PUSH
71603: LD_INT 2
71605: PUSH
71606: EMPTY
71607: LIST
71608: LIST
71609: PUSH
71610: LD_INT 2
71612: PUSH
71613: LD_INT 3
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: PUSH
71620: LD_INT 1
71622: PUSH
71623: LD_INT 3
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: LIST
71634: LIST
71635: LIST
71636: LIST
71637: LIST
71638: LIST
71639: LIST
71640: LIST
71641: LIST
71642: LIST
71643: LIST
71644: LIST
71645: LIST
71646: LIST
71647: LIST
71648: LIST
71649: LIST
71650: LIST
71651: LIST
71652: LIST
71653: LIST
71654: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
71655: LD_ADDR_VAR 0 26
71659: PUSH
71660: LD_INT 0
71662: PUSH
71663: LD_INT 0
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: PUSH
71670: LD_INT 0
71672: PUSH
71673: LD_INT 1
71675: NEG
71676: PUSH
71677: EMPTY
71678: LIST
71679: LIST
71680: PUSH
71681: LD_INT 1
71683: PUSH
71684: LD_INT 0
71686: PUSH
71687: EMPTY
71688: LIST
71689: LIST
71690: PUSH
71691: LD_INT 1
71693: PUSH
71694: LD_INT 1
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: LD_INT 0
71703: PUSH
71704: LD_INT 1
71706: PUSH
71707: EMPTY
71708: LIST
71709: LIST
71710: PUSH
71711: LD_INT 1
71713: NEG
71714: PUSH
71715: LD_INT 0
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: PUSH
71722: LD_INT 1
71724: NEG
71725: PUSH
71726: LD_INT 1
71728: NEG
71729: PUSH
71730: EMPTY
71731: LIST
71732: LIST
71733: PUSH
71734: LD_INT 1
71736: NEG
71737: PUSH
71738: LD_INT 2
71740: NEG
71741: PUSH
71742: EMPTY
71743: LIST
71744: LIST
71745: PUSH
71746: LD_INT 0
71748: PUSH
71749: LD_INT 2
71751: NEG
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: PUSH
71757: LD_INT 1
71759: PUSH
71760: LD_INT 1
71762: NEG
71763: PUSH
71764: EMPTY
71765: LIST
71766: LIST
71767: PUSH
71768: LD_INT 2
71770: PUSH
71771: LD_INT 0
71773: PUSH
71774: EMPTY
71775: LIST
71776: LIST
71777: PUSH
71778: LD_INT 2
71780: PUSH
71781: LD_INT 1
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: PUSH
71788: LD_INT 2
71790: PUSH
71791: LD_INT 2
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PUSH
71798: LD_INT 1
71800: PUSH
71801: LD_INT 2
71803: PUSH
71804: EMPTY
71805: LIST
71806: LIST
71807: PUSH
71808: LD_INT 0
71810: PUSH
71811: LD_INT 2
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PUSH
71818: LD_INT 1
71820: NEG
71821: PUSH
71822: LD_INT 1
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: LD_INT 2
71831: NEG
71832: PUSH
71833: LD_INT 0
71835: PUSH
71836: EMPTY
71837: LIST
71838: LIST
71839: PUSH
71840: LD_INT 2
71842: NEG
71843: PUSH
71844: LD_INT 1
71846: NEG
71847: PUSH
71848: EMPTY
71849: LIST
71850: LIST
71851: PUSH
71852: LD_INT 2
71854: NEG
71855: PUSH
71856: LD_INT 2
71858: NEG
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_INT 2
71866: PUSH
71867: LD_INT 3
71869: PUSH
71870: EMPTY
71871: LIST
71872: LIST
71873: PUSH
71874: LD_INT 1
71876: PUSH
71877: LD_INT 3
71879: PUSH
71880: EMPTY
71881: LIST
71882: LIST
71883: PUSH
71884: LD_INT 1
71886: NEG
71887: PUSH
71888: LD_INT 2
71890: PUSH
71891: EMPTY
71892: LIST
71893: LIST
71894: PUSH
71895: LD_INT 2
71897: NEG
71898: PUSH
71899: LD_INT 1
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: PUSH
71906: EMPTY
71907: LIST
71908: LIST
71909: LIST
71910: LIST
71911: LIST
71912: LIST
71913: LIST
71914: LIST
71915: LIST
71916: LIST
71917: LIST
71918: LIST
71919: LIST
71920: LIST
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
71931: LD_ADDR_VAR 0 27
71935: PUSH
71936: LD_INT 0
71938: PUSH
71939: LD_INT 0
71941: PUSH
71942: EMPTY
71943: LIST
71944: LIST
71945: PUSH
71946: LD_INT 0
71948: PUSH
71949: LD_INT 1
71951: NEG
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: PUSH
71957: LD_INT 1
71959: PUSH
71960: LD_INT 0
71962: PUSH
71963: EMPTY
71964: LIST
71965: LIST
71966: PUSH
71967: LD_INT 1
71969: PUSH
71970: LD_INT 1
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: LD_INT 0
71979: PUSH
71980: LD_INT 1
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: PUSH
71987: LD_INT 1
71989: NEG
71990: PUSH
71991: LD_INT 0
71993: PUSH
71994: EMPTY
71995: LIST
71996: LIST
71997: PUSH
71998: LD_INT 1
72000: NEG
72001: PUSH
72002: LD_INT 1
72004: NEG
72005: PUSH
72006: EMPTY
72007: LIST
72008: LIST
72009: PUSH
72010: LD_INT 1
72012: NEG
72013: PUSH
72014: LD_INT 2
72016: NEG
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: PUSH
72022: LD_INT 0
72024: PUSH
72025: LD_INT 2
72027: NEG
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PUSH
72033: LD_INT 1
72035: PUSH
72036: LD_INT 1
72038: NEG
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: PUSH
72044: LD_INT 2
72046: PUSH
72047: LD_INT 0
72049: PUSH
72050: EMPTY
72051: LIST
72052: LIST
72053: PUSH
72054: LD_INT 2
72056: PUSH
72057: LD_INT 1
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PUSH
72064: LD_INT 2
72066: PUSH
72067: LD_INT 2
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: PUSH
72074: LD_INT 1
72076: PUSH
72077: LD_INT 2
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: PUSH
72084: LD_INT 0
72086: PUSH
72087: LD_INT 2
72089: PUSH
72090: EMPTY
72091: LIST
72092: LIST
72093: PUSH
72094: LD_INT 1
72096: NEG
72097: PUSH
72098: LD_INT 1
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: PUSH
72105: LD_INT 2
72107: NEG
72108: PUSH
72109: LD_INT 0
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: PUSH
72116: LD_INT 2
72118: NEG
72119: PUSH
72120: LD_INT 1
72122: NEG
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: PUSH
72128: LD_INT 2
72130: NEG
72131: PUSH
72132: LD_INT 2
72134: NEG
72135: PUSH
72136: EMPTY
72137: LIST
72138: LIST
72139: PUSH
72140: LD_INT 1
72142: NEG
72143: PUSH
72144: LD_INT 2
72146: PUSH
72147: EMPTY
72148: LIST
72149: LIST
72150: PUSH
72151: LD_INT 2
72153: NEG
72154: PUSH
72155: LD_INT 1
72157: PUSH
72158: EMPTY
72159: LIST
72160: LIST
72161: PUSH
72162: LD_INT 3
72164: NEG
72165: PUSH
72166: LD_INT 1
72168: NEG
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: PUSH
72174: LD_INT 3
72176: NEG
72177: PUSH
72178: LD_INT 2
72180: NEG
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: PUSH
72186: EMPTY
72187: LIST
72188: LIST
72189: LIST
72190: LIST
72191: LIST
72192: LIST
72193: LIST
72194: LIST
72195: LIST
72196: LIST
72197: LIST
72198: LIST
72199: LIST
72200: LIST
72201: LIST
72202: LIST
72203: LIST
72204: LIST
72205: LIST
72206: LIST
72207: LIST
72208: LIST
72209: LIST
72210: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
72211: LD_ADDR_VAR 0 28
72215: PUSH
72216: LD_INT 0
72218: PUSH
72219: LD_INT 0
72221: PUSH
72222: EMPTY
72223: LIST
72224: LIST
72225: PUSH
72226: LD_INT 0
72228: PUSH
72229: LD_INT 1
72231: NEG
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: PUSH
72237: LD_INT 1
72239: PUSH
72240: LD_INT 0
72242: PUSH
72243: EMPTY
72244: LIST
72245: LIST
72246: PUSH
72247: LD_INT 1
72249: PUSH
72250: LD_INT 1
72252: PUSH
72253: EMPTY
72254: LIST
72255: LIST
72256: PUSH
72257: LD_INT 0
72259: PUSH
72260: LD_INT 1
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 1
72269: NEG
72270: PUSH
72271: LD_INT 0
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: PUSH
72278: LD_INT 1
72280: NEG
72281: PUSH
72282: LD_INT 1
72284: NEG
72285: PUSH
72286: EMPTY
72287: LIST
72288: LIST
72289: PUSH
72290: LD_INT 1
72292: NEG
72293: PUSH
72294: LD_INT 2
72296: NEG
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: PUSH
72302: LD_INT 0
72304: PUSH
72305: LD_INT 2
72307: NEG
72308: PUSH
72309: EMPTY
72310: LIST
72311: LIST
72312: PUSH
72313: LD_INT 1
72315: PUSH
72316: LD_INT 1
72318: NEG
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: PUSH
72324: LD_INT 2
72326: PUSH
72327: LD_INT 0
72329: PUSH
72330: EMPTY
72331: LIST
72332: LIST
72333: PUSH
72334: LD_INT 2
72336: PUSH
72337: LD_INT 1
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: PUSH
72344: LD_INT 2
72346: PUSH
72347: LD_INT 2
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: PUSH
72354: LD_INT 1
72356: PUSH
72357: LD_INT 2
72359: PUSH
72360: EMPTY
72361: LIST
72362: LIST
72363: PUSH
72364: LD_INT 0
72366: PUSH
72367: LD_INT 2
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: PUSH
72374: LD_INT 1
72376: NEG
72377: PUSH
72378: LD_INT 1
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: PUSH
72385: LD_INT 2
72387: NEG
72388: PUSH
72389: LD_INT 0
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PUSH
72396: LD_INT 2
72398: NEG
72399: PUSH
72400: LD_INT 1
72402: NEG
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: LD_INT 2
72410: NEG
72411: PUSH
72412: LD_INT 2
72414: NEG
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: PUSH
72420: LD_INT 2
72422: NEG
72423: PUSH
72424: LD_INT 3
72426: NEG
72427: PUSH
72428: EMPTY
72429: LIST
72430: LIST
72431: PUSH
72432: LD_INT 1
72434: NEG
72435: PUSH
72436: LD_INT 3
72438: NEG
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: PUSH
72444: LD_INT 3
72446: NEG
72447: PUSH
72448: LD_INT 1
72450: NEG
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: PUSH
72456: LD_INT 3
72458: NEG
72459: PUSH
72460: LD_INT 2
72462: NEG
72463: PUSH
72464: EMPTY
72465: LIST
72466: LIST
72467: PUSH
72468: EMPTY
72469: LIST
72470: LIST
72471: LIST
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: LIST
72489: LIST
72490: LIST
72491: LIST
72492: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
72493: LD_ADDR_VAR 0 29
72497: PUSH
72498: LD_INT 0
72500: PUSH
72501: LD_INT 0
72503: PUSH
72504: EMPTY
72505: LIST
72506: LIST
72507: PUSH
72508: LD_INT 0
72510: PUSH
72511: LD_INT 1
72513: NEG
72514: PUSH
72515: EMPTY
72516: LIST
72517: LIST
72518: PUSH
72519: LD_INT 1
72521: PUSH
72522: LD_INT 0
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: PUSH
72529: LD_INT 1
72531: PUSH
72532: LD_INT 1
72534: PUSH
72535: EMPTY
72536: LIST
72537: LIST
72538: PUSH
72539: LD_INT 0
72541: PUSH
72542: LD_INT 1
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: PUSH
72549: LD_INT 1
72551: NEG
72552: PUSH
72553: LD_INT 0
72555: PUSH
72556: EMPTY
72557: LIST
72558: LIST
72559: PUSH
72560: LD_INT 1
72562: NEG
72563: PUSH
72564: LD_INT 1
72566: NEG
72567: PUSH
72568: EMPTY
72569: LIST
72570: LIST
72571: PUSH
72572: LD_INT 1
72574: NEG
72575: PUSH
72576: LD_INT 2
72578: NEG
72579: PUSH
72580: EMPTY
72581: LIST
72582: LIST
72583: PUSH
72584: LD_INT 0
72586: PUSH
72587: LD_INT 2
72589: NEG
72590: PUSH
72591: EMPTY
72592: LIST
72593: LIST
72594: PUSH
72595: LD_INT 1
72597: PUSH
72598: LD_INT 1
72600: NEG
72601: PUSH
72602: EMPTY
72603: LIST
72604: LIST
72605: PUSH
72606: LD_INT 2
72608: PUSH
72609: LD_INT 0
72611: PUSH
72612: EMPTY
72613: LIST
72614: LIST
72615: PUSH
72616: LD_INT 2
72618: PUSH
72619: LD_INT 1
72621: PUSH
72622: EMPTY
72623: LIST
72624: LIST
72625: PUSH
72626: LD_INT 1
72628: PUSH
72629: LD_INT 2
72631: PUSH
72632: EMPTY
72633: LIST
72634: LIST
72635: PUSH
72636: LD_INT 0
72638: PUSH
72639: LD_INT 2
72641: PUSH
72642: EMPTY
72643: LIST
72644: LIST
72645: PUSH
72646: LD_INT 1
72648: NEG
72649: PUSH
72650: LD_INT 1
72652: PUSH
72653: EMPTY
72654: LIST
72655: LIST
72656: PUSH
72657: LD_INT 2
72659: NEG
72660: PUSH
72661: LD_INT 1
72663: NEG
72664: PUSH
72665: EMPTY
72666: LIST
72667: LIST
72668: PUSH
72669: LD_INT 2
72671: NEG
72672: PUSH
72673: LD_INT 2
72675: NEG
72676: PUSH
72677: EMPTY
72678: LIST
72679: LIST
72680: PUSH
72681: LD_INT 2
72683: NEG
72684: PUSH
72685: LD_INT 3
72687: NEG
72688: PUSH
72689: EMPTY
72690: LIST
72691: LIST
72692: PUSH
72693: LD_INT 2
72695: PUSH
72696: LD_INT 1
72698: NEG
72699: PUSH
72700: EMPTY
72701: LIST
72702: LIST
72703: PUSH
72704: LD_INT 3
72706: PUSH
72707: LD_INT 1
72709: PUSH
72710: EMPTY
72711: LIST
72712: LIST
72713: PUSH
72714: LD_INT 1
72716: PUSH
72717: LD_INT 3
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: PUSH
72724: LD_INT 1
72726: NEG
72727: PUSH
72728: LD_INT 2
72730: PUSH
72731: EMPTY
72732: LIST
72733: LIST
72734: PUSH
72735: LD_INT 3
72737: NEG
72738: PUSH
72739: LD_INT 2
72741: NEG
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: PUSH
72747: EMPTY
72748: LIST
72749: LIST
72750: LIST
72751: LIST
72752: LIST
72753: LIST
72754: LIST
72755: LIST
72756: LIST
72757: LIST
72758: LIST
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: LIST
72764: LIST
72765: LIST
72766: LIST
72767: LIST
72768: LIST
72769: LIST
72770: LIST
72771: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
72772: LD_ADDR_VAR 0 30
72776: PUSH
72777: LD_INT 0
72779: PUSH
72780: LD_INT 0
72782: PUSH
72783: EMPTY
72784: LIST
72785: LIST
72786: PUSH
72787: LD_INT 0
72789: PUSH
72790: LD_INT 1
72792: NEG
72793: PUSH
72794: EMPTY
72795: LIST
72796: LIST
72797: PUSH
72798: LD_INT 1
72800: PUSH
72801: LD_INT 0
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: PUSH
72808: LD_INT 1
72810: PUSH
72811: LD_INT 1
72813: PUSH
72814: EMPTY
72815: LIST
72816: LIST
72817: PUSH
72818: LD_INT 0
72820: PUSH
72821: LD_INT 1
72823: PUSH
72824: EMPTY
72825: LIST
72826: LIST
72827: PUSH
72828: LD_INT 1
72830: NEG
72831: PUSH
72832: LD_INT 0
72834: PUSH
72835: EMPTY
72836: LIST
72837: LIST
72838: PUSH
72839: LD_INT 1
72841: NEG
72842: PUSH
72843: LD_INT 1
72845: NEG
72846: PUSH
72847: EMPTY
72848: LIST
72849: LIST
72850: PUSH
72851: LD_INT 1
72853: NEG
72854: PUSH
72855: LD_INT 2
72857: NEG
72858: PUSH
72859: EMPTY
72860: LIST
72861: LIST
72862: PUSH
72863: LD_INT 0
72865: PUSH
72866: LD_INT 2
72868: NEG
72869: PUSH
72870: EMPTY
72871: LIST
72872: LIST
72873: PUSH
72874: LD_INT 1
72876: PUSH
72877: LD_INT 1
72879: NEG
72880: PUSH
72881: EMPTY
72882: LIST
72883: LIST
72884: PUSH
72885: LD_INT 2
72887: PUSH
72888: LD_INT 0
72890: PUSH
72891: EMPTY
72892: LIST
72893: LIST
72894: PUSH
72895: LD_INT 2
72897: PUSH
72898: LD_INT 1
72900: PUSH
72901: EMPTY
72902: LIST
72903: LIST
72904: PUSH
72905: LD_INT 2
72907: PUSH
72908: LD_INT 2
72910: PUSH
72911: EMPTY
72912: LIST
72913: LIST
72914: PUSH
72915: LD_INT 1
72917: PUSH
72918: LD_INT 2
72920: PUSH
72921: EMPTY
72922: LIST
72923: LIST
72924: PUSH
72925: LD_INT 1
72927: NEG
72928: PUSH
72929: LD_INT 1
72931: PUSH
72932: EMPTY
72933: LIST
72934: LIST
72935: PUSH
72936: LD_INT 2
72938: NEG
72939: PUSH
72940: LD_INT 0
72942: PUSH
72943: EMPTY
72944: LIST
72945: LIST
72946: PUSH
72947: LD_INT 2
72949: NEG
72950: PUSH
72951: LD_INT 1
72953: NEG
72954: PUSH
72955: EMPTY
72956: LIST
72957: LIST
72958: PUSH
72959: LD_INT 1
72961: NEG
72962: PUSH
72963: LD_INT 3
72965: NEG
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: PUSH
72971: LD_INT 1
72973: PUSH
72974: LD_INT 2
72976: NEG
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: PUSH
72982: LD_INT 3
72984: PUSH
72985: LD_INT 2
72987: PUSH
72988: EMPTY
72989: LIST
72990: LIST
72991: PUSH
72992: LD_INT 2
72994: PUSH
72995: LD_INT 3
72997: PUSH
72998: EMPTY
72999: LIST
73000: LIST
73001: PUSH
73002: LD_INT 2
73004: NEG
73005: PUSH
73006: LD_INT 1
73008: PUSH
73009: EMPTY
73010: LIST
73011: LIST
73012: PUSH
73013: LD_INT 3
73015: NEG
73016: PUSH
73017: LD_INT 1
73019: NEG
73020: PUSH
73021: EMPTY
73022: LIST
73023: LIST
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: LIST
73029: LIST
73030: LIST
73031: LIST
73032: LIST
73033: LIST
73034: LIST
73035: LIST
73036: LIST
73037: LIST
73038: LIST
73039: LIST
73040: LIST
73041: LIST
73042: LIST
73043: LIST
73044: LIST
73045: LIST
73046: LIST
73047: LIST
73048: LIST
73049: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
73050: LD_ADDR_VAR 0 31
73054: PUSH
73055: LD_INT 0
73057: PUSH
73058: LD_INT 0
73060: PUSH
73061: EMPTY
73062: LIST
73063: LIST
73064: PUSH
73065: LD_INT 0
73067: PUSH
73068: LD_INT 1
73070: NEG
73071: PUSH
73072: EMPTY
73073: LIST
73074: LIST
73075: PUSH
73076: LD_INT 1
73078: PUSH
73079: LD_INT 0
73081: PUSH
73082: EMPTY
73083: LIST
73084: LIST
73085: PUSH
73086: LD_INT 1
73088: PUSH
73089: LD_INT 1
73091: PUSH
73092: EMPTY
73093: LIST
73094: LIST
73095: PUSH
73096: LD_INT 0
73098: PUSH
73099: LD_INT 1
73101: PUSH
73102: EMPTY
73103: LIST
73104: LIST
73105: PUSH
73106: LD_INT 1
73108: NEG
73109: PUSH
73110: LD_INT 0
73112: PUSH
73113: EMPTY
73114: LIST
73115: LIST
73116: PUSH
73117: LD_INT 1
73119: NEG
73120: PUSH
73121: LD_INT 1
73123: NEG
73124: PUSH
73125: EMPTY
73126: LIST
73127: LIST
73128: PUSH
73129: LD_INT 1
73131: NEG
73132: PUSH
73133: LD_INT 2
73135: NEG
73136: PUSH
73137: EMPTY
73138: LIST
73139: LIST
73140: PUSH
73141: LD_INT 1
73143: PUSH
73144: LD_INT 1
73146: NEG
73147: PUSH
73148: EMPTY
73149: LIST
73150: LIST
73151: PUSH
73152: LD_INT 2
73154: PUSH
73155: LD_INT 0
73157: PUSH
73158: EMPTY
73159: LIST
73160: LIST
73161: PUSH
73162: LD_INT 2
73164: PUSH
73165: LD_INT 1
73167: PUSH
73168: EMPTY
73169: LIST
73170: LIST
73171: PUSH
73172: LD_INT 2
73174: PUSH
73175: LD_INT 2
73177: PUSH
73178: EMPTY
73179: LIST
73180: LIST
73181: PUSH
73182: LD_INT 1
73184: PUSH
73185: LD_INT 2
73187: PUSH
73188: EMPTY
73189: LIST
73190: LIST
73191: PUSH
73192: LD_INT 0
73194: PUSH
73195: LD_INT 2
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: PUSH
73202: LD_INT 1
73204: NEG
73205: PUSH
73206: LD_INT 1
73208: PUSH
73209: EMPTY
73210: LIST
73211: LIST
73212: PUSH
73213: LD_INT 2
73215: NEG
73216: PUSH
73217: LD_INT 1
73219: NEG
73220: PUSH
73221: EMPTY
73222: LIST
73223: LIST
73224: PUSH
73225: LD_INT 2
73227: NEG
73228: PUSH
73229: LD_INT 2
73231: NEG
73232: PUSH
73233: EMPTY
73234: LIST
73235: LIST
73236: PUSH
73237: LD_INT 2
73239: NEG
73240: PUSH
73241: LD_INT 3
73243: NEG
73244: PUSH
73245: EMPTY
73246: LIST
73247: LIST
73248: PUSH
73249: LD_INT 2
73251: PUSH
73252: LD_INT 1
73254: NEG
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: PUSH
73260: LD_INT 3
73262: PUSH
73263: LD_INT 1
73265: PUSH
73266: EMPTY
73267: LIST
73268: LIST
73269: PUSH
73270: LD_INT 1
73272: PUSH
73273: LD_INT 3
73275: PUSH
73276: EMPTY
73277: LIST
73278: LIST
73279: PUSH
73280: LD_INT 1
73282: NEG
73283: PUSH
73284: LD_INT 2
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: PUSH
73291: LD_INT 3
73293: NEG
73294: PUSH
73295: LD_INT 2
73297: NEG
73298: PUSH
73299: EMPTY
73300: LIST
73301: LIST
73302: PUSH
73303: EMPTY
73304: LIST
73305: LIST
73306: LIST
73307: LIST
73308: LIST
73309: LIST
73310: LIST
73311: LIST
73312: LIST
73313: LIST
73314: LIST
73315: LIST
73316: LIST
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: LIST
73323: LIST
73324: LIST
73325: LIST
73326: LIST
73327: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
73328: LD_ADDR_VAR 0 32
73332: PUSH
73333: LD_INT 0
73335: PUSH
73336: LD_INT 0
73338: PUSH
73339: EMPTY
73340: LIST
73341: LIST
73342: PUSH
73343: LD_INT 0
73345: PUSH
73346: LD_INT 1
73348: NEG
73349: PUSH
73350: EMPTY
73351: LIST
73352: LIST
73353: PUSH
73354: LD_INT 1
73356: PUSH
73357: LD_INT 0
73359: PUSH
73360: EMPTY
73361: LIST
73362: LIST
73363: PUSH
73364: LD_INT 1
73366: PUSH
73367: LD_INT 1
73369: PUSH
73370: EMPTY
73371: LIST
73372: LIST
73373: PUSH
73374: LD_INT 0
73376: PUSH
73377: LD_INT 1
73379: PUSH
73380: EMPTY
73381: LIST
73382: LIST
73383: PUSH
73384: LD_INT 1
73386: NEG
73387: PUSH
73388: LD_INT 0
73390: PUSH
73391: EMPTY
73392: LIST
73393: LIST
73394: PUSH
73395: LD_INT 1
73397: NEG
73398: PUSH
73399: LD_INT 1
73401: NEG
73402: PUSH
73403: EMPTY
73404: LIST
73405: LIST
73406: PUSH
73407: LD_INT 1
73409: NEG
73410: PUSH
73411: LD_INT 2
73413: NEG
73414: PUSH
73415: EMPTY
73416: LIST
73417: LIST
73418: PUSH
73419: LD_INT 0
73421: PUSH
73422: LD_INT 2
73424: NEG
73425: PUSH
73426: EMPTY
73427: LIST
73428: LIST
73429: PUSH
73430: LD_INT 1
73432: PUSH
73433: LD_INT 1
73435: NEG
73436: PUSH
73437: EMPTY
73438: LIST
73439: LIST
73440: PUSH
73441: LD_INT 2
73443: PUSH
73444: LD_INT 1
73446: PUSH
73447: EMPTY
73448: LIST
73449: LIST
73450: PUSH
73451: LD_INT 2
73453: PUSH
73454: LD_INT 2
73456: PUSH
73457: EMPTY
73458: LIST
73459: LIST
73460: PUSH
73461: LD_INT 1
73463: PUSH
73464: LD_INT 2
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: PUSH
73471: LD_INT 0
73473: PUSH
73474: LD_INT 2
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: PUSH
73481: LD_INT 1
73483: NEG
73484: PUSH
73485: LD_INT 1
73487: PUSH
73488: EMPTY
73489: LIST
73490: LIST
73491: PUSH
73492: LD_INT 2
73494: NEG
73495: PUSH
73496: LD_INT 0
73498: PUSH
73499: EMPTY
73500: LIST
73501: LIST
73502: PUSH
73503: LD_INT 2
73505: NEG
73506: PUSH
73507: LD_INT 1
73509: NEG
73510: PUSH
73511: EMPTY
73512: LIST
73513: LIST
73514: PUSH
73515: LD_INT 1
73517: NEG
73518: PUSH
73519: LD_INT 3
73521: NEG
73522: PUSH
73523: EMPTY
73524: LIST
73525: LIST
73526: PUSH
73527: LD_INT 1
73529: PUSH
73530: LD_INT 2
73532: NEG
73533: PUSH
73534: EMPTY
73535: LIST
73536: LIST
73537: PUSH
73538: LD_INT 3
73540: PUSH
73541: LD_INT 2
73543: PUSH
73544: EMPTY
73545: LIST
73546: LIST
73547: PUSH
73548: LD_INT 2
73550: PUSH
73551: LD_INT 3
73553: PUSH
73554: EMPTY
73555: LIST
73556: LIST
73557: PUSH
73558: LD_INT 2
73560: NEG
73561: PUSH
73562: LD_INT 1
73564: PUSH
73565: EMPTY
73566: LIST
73567: LIST
73568: PUSH
73569: LD_INT 3
73571: NEG
73572: PUSH
73573: LD_INT 1
73575: NEG
73576: PUSH
73577: EMPTY
73578: LIST
73579: LIST
73580: PUSH
73581: EMPTY
73582: LIST
73583: LIST
73584: LIST
73585: LIST
73586: LIST
73587: LIST
73588: LIST
73589: LIST
73590: LIST
73591: LIST
73592: LIST
73593: LIST
73594: LIST
73595: LIST
73596: LIST
73597: LIST
73598: LIST
73599: LIST
73600: LIST
73601: LIST
73602: LIST
73603: LIST
73604: LIST
73605: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
73606: LD_ADDR_VAR 0 33
73610: PUSH
73611: LD_INT 0
73613: PUSH
73614: LD_INT 0
73616: PUSH
73617: EMPTY
73618: LIST
73619: LIST
73620: PUSH
73621: LD_INT 0
73623: PUSH
73624: LD_INT 1
73626: NEG
73627: PUSH
73628: EMPTY
73629: LIST
73630: LIST
73631: PUSH
73632: LD_INT 1
73634: PUSH
73635: LD_INT 0
73637: PUSH
73638: EMPTY
73639: LIST
73640: LIST
73641: PUSH
73642: LD_INT 1
73644: PUSH
73645: LD_INT 1
73647: PUSH
73648: EMPTY
73649: LIST
73650: LIST
73651: PUSH
73652: LD_INT 0
73654: PUSH
73655: LD_INT 1
73657: PUSH
73658: EMPTY
73659: LIST
73660: LIST
73661: PUSH
73662: LD_INT 1
73664: NEG
73665: PUSH
73666: LD_INT 0
73668: PUSH
73669: EMPTY
73670: LIST
73671: LIST
73672: PUSH
73673: LD_INT 1
73675: NEG
73676: PUSH
73677: LD_INT 1
73679: NEG
73680: PUSH
73681: EMPTY
73682: LIST
73683: LIST
73684: PUSH
73685: LD_INT 1
73687: NEG
73688: PUSH
73689: LD_INT 2
73691: NEG
73692: PUSH
73693: EMPTY
73694: LIST
73695: LIST
73696: PUSH
73697: LD_INT 1
73699: PUSH
73700: LD_INT 1
73702: NEG
73703: PUSH
73704: EMPTY
73705: LIST
73706: LIST
73707: PUSH
73708: LD_INT 2
73710: PUSH
73711: LD_INT 0
73713: PUSH
73714: EMPTY
73715: LIST
73716: LIST
73717: PUSH
73718: LD_INT 2
73720: PUSH
73721: LD_INT 1
73723: PUSH
73724: EMPTY
73725: LIST
73726: LIST
73727: PUSH
73728: LD_INT 1
73730: PUSH
73731: LD_INT 2
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: PUSH
73738: LD_INT 0
73740: PUSH
73741: LD_INT 2
73743: PUSH
73744: EMPTY
73745: LIST
73746: LIST
73747: PUSH
73748: LD_INT 1
73750: NEG
73751: PUSH
73752: LD_INT 1
73754: PUSH
73755: EMPTY
73756: LIST
73757: LIST
73758: PUSH
73759: LD_INT 2
73761: NEG
73762: PUSH
73763: LD_INT 0
73765: PUSH
73766: EMPTY
73767: LIST
73768: LIST
73769: PUSH
73770: LD_INT 2
73772: NEG
73773: PUSH
73774: LD_INT 1
73776: NEG
73777: PUSH
73778: EMPTY
73779: LIST
73780: LIST
73781: PUSH
73782: LD_INT 2
73784: NEG
73785: PUSH
73786: LD_INT 2
73788: NEG
73789: PUSH
73790: EMPTY
73791: LIST
73792: LIST
73793: PUSH
73794: LD_INT 2
73796: NEG
73797: PUSH
73798: LD_INT 3
73800: NEG
73801: PUSH
73802: EMPTY
73803: LIST
73804: LIST
73805: PUSH
73806: LD_INT 2
73808: PUSH
73809: LD_INT 1
73811: NEG
73812: PUSH
73813: EMPTY
73814: LIST
73815: LIST
73816: PUSH
73817: LD_INT 3
73819: PUSH
73820: LD_INT 1
73822: PUSH
73823: EMPTY
73824: LIST
73825: LIST
73826: PUSH
73827: LD_INT 1
73829: PUSH
73830: LD_INT 3
73832: PUSH
73833: EMPTY
73834: LIST
73835: LIST
73836: PUSH
73837: LD_INT 1
73839: NEG
73840: PUSH
73841: LD_INT 2
73843: PUSH
73844: EMPTY
73845: LIST
73846: LIST
73847: PUSH
73848: LD_INT 3
73850: NEG
73851: PUSH
73852: LD_INT 2
73854: NEG
73855: PUSH
73856: EMPTY
73857: LIST
73858: LIST
73859: PUSH
73860: EMPTY
73861: LIST
73862: LIST
73863: LIST
73864: LIST
73865: LIST
73866: LIST
73867: LIST
73868: LIST
73869: LIST
73870: LIST
73871: LIST
73872: LIST
73873: LIST
73874: LIST
73875: LIST
73876: LIST
73877: LIST
73878: LIST
73879: LIST
73880: LIST
73881: LIST
73882: LIST
73883: LIST
73884: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
73885: LD_ADDR_VAR 0 34
73889: PUSH
73890: LD_INT 0
73892: PUSH
73893: LD_INT 0
73895: PUSH
73896: EMPTY
73897: LIST
73898: LIST
73899: PUSH
73900: LD_INT 0
73902: PUSH
73903: LD_INT 1
73905: NEG
73906: PUSH
73907: EMPTY
73908: LIST
73909: LIST
73910: PUSH
73911: LD_INT 1
73913: PUSH
73914: LD_INT 0
73916: PUSH
73917: EMPTY
73918: LIST
73919: LIST
73920: PUSH
73921: LD_INT 1
73923: PUSH
73924: LD_INT 1
73926: PUSH
73927: EMPTY
73928: LIST
73929: LIST
73930: PUSH
73931: LD_INT 0
73933: PUSH
73934: LD_INT 1
73936: PUSH
73937: EMPTY
73938: LIST
73939: LIST
73940: PUSH
73941: LD_INT 1
73943: NEG
73944: PUSH
73945: LD_INT 0
73947: PUSH
73948: EMPTY
73949: LIST
73950: LIST
73951: PUSH
73952: LD_INT 1
73954: NEG
73955: PUSH
73956: LD_INT 1
73958: NEG
73959: PUSH
73960: EMPTY
73961: LIST
73962: LIST
73963: PUSH
73964: LD_INT 1
73966: NEG
73967: PUSH
73968: LD_INT 2
73970: NEG
73971: PUSH
73972: EMPTY
73973: LIST
73974: LIST
73975: PUSH
73976: LD_INT 0
73978: PUSH
73979: LD_INT 2
73981: NEG
73982: PUSH
73983: EMPTY
73984: LIST
73985: LIST
73986: PUSH
73987: LD_INT 1
73989: PUSH
73990: LD_INT 1
73992: NEG
73993: PUSH
73994: EMPTY
73995: LIST
73996: LIST
73997: PUSH
73998: LD_INT 2
74000: PUSH
74001: LD_INT 1
74003: PUSH
74004: EMPTY
74005: LIST
74006: LIST
74007: PUSH
74008: LD_INT 2
74010: PUSH
74011: LD_INT 2
74013: PUSH
74014: EMPTY
74015: LIST
74016: LIST
74017: PUSH
74018: LD_INT 1
74020: PUSH
74021: LD_INT 2
74023: PUSH
74024: EMPTY
74025: LIST
74026: LIST
74027: PUSH
74028: LD_INT 1
74030: NEG
74031: PUSH
74032: LD_INT 1
74034: PUSH
74035: EMPTY
74036: LIST
74037: LIST
74038: PUSH
74039: LD_INT 2
74041: NEG
74042: PUSH
74043: LD_INT 0
74045: PUSH
74046: EMPTY
74047: LIST
74048: LIST
74049: PUSH
74050: LD_INT 2
74052: NEG
74053: PUSH
74054: LD_INT 1
74056: NEG
74057: PUSH
74058: EMPTY
74059: LIST
74060: LIST
74061: PUSH
74062: LD_INT 2
74064: NEG
74065: PUSH
74066: LD_INT 2
74068: NEG
74069: PUSH
74070: EMPTY
74071: LIST
74072: LIST
74073: PUSH
74074: LD_INT 1
74076: NEG
74077: PUSH
74078: LD_INT 3
74080: NEG
74081: PUSH
74082: EMPTY
74083: LIST
74084: LIST
74085: PUSH
74086: LD_INT 1
74088: PUSH
74089: LD_INT 2
74091: NEG
74092: PUSH
74093: EMPTY
74094: LIST
74095: LIST
74096: PUSH
74097: LD_INT 3
74099: PUSH
74100: LD_INT 2
74102: PUSH
74103: EMPTY
74104: LIST
74105: LIST
74106: PUSH
74107: LD_INT 2
74109: PUSH
74110: LD_INT 3
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: PUSH
74117: LD_INT 2
74119: NEG
74120: PUSH
74121: LD_INT 1
74123: PUSH
74124: EMPTY
74125: LIST
74126: LIST
74127: PUSH
74128: LD_INT 3
74130: NEG
74131: PUSH
74132: LD_INT 1
74134: NEG
74135: PUSH
74136: EMPTY
74137: LIST
74138: LIST
74139: PUSH
74140: EMPTY
74141: LIST
74142: LIST
74143: LIST
74144: LIST
74145: LIST
74146: LIST
74147: LIST
74148: LIST
74149: LIST
74150: LIST
74151: LIST
74152: LIST
74153: LIST
74154: LIST
74155: LIST
74156: LIST
74157: LIST
74158: LIST
74159: LIST
74160: LIST
74161: LIST
74162: LIST
74163: LIST
74164: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
74165: LD_ADDR_VAR 0 35
74169: PUSH
74170: LD_INT 0
74172: PUSH
74173: LD_INT 0
74175: PUSH
74176: EMPTY
74177: LIST
74178: LIST
74179: PUSH
74180: LD_INT 0
74182: PUSH
74183: LD_INT 1
74185: NEG
74186: PUSH
74187: EMPTY
74188: LIST
74189: LIST
74190: PUSH
74191: LD_INT 1
74193: PUSH
74194: LD_INT 0
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: PUSH
74201: LD_INT 1
74203: PUSH
74204: LD_INT 1
74206: PUSH
74207: EMPTY
74208: LIST
74209: LIST
74210: PUSH
74211: LD_INT 0
74213: PUSH
74214: LD_INT 1
74216: PUSH
74217: EMPTY
74218: LIST
74219: LIST
74220: PUSH
74221: LD_INT 1
74223: NEG
74224: PUSH
74225: LD_INT 0
74227: PUSH
74228: EMPTY
74229: LIST
74230: LIST
74231: PUSH
74232: LD_INT 1
74234: NEG
74235: PUSH
74236: LD_INT 1
74238: NEG
74239: PUSH
74240: EMPTY
74241: LIST
74242: LIST
74243: PUSH
74244: LD_INT 2
74246: PUSH
74247: LD_INT 1
74249: PUSH
74250: EMPTY
74251: LIST
74252: LIST
74253: PUSH
74254: LD_INT 2
74256: NEG
74257: PUSH
74258: LD_INT 1
74260: NEG
74261: PUSH
74262: EMPTY
74263: LIST
74264: LIST
74265: PUSH
74266: EMPTY
74267: LIST
74268: LIST
74269: LIST
74270: LIST
74271: LIST
74272: LIST
74273: LIST
74274: LIST
74275: LIST
74276: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
74277: LD_ADDR_VAR 0 36
74281: PUSH
74282: LD_INT 0
74284: PUSH
74285: LD_INT 0
74287: PUSH
74288: EMPTY
74289: LIST
74290: LIST
74291: PUSH
74292: LD_INT 0
74294: PUSH
74295: LD_INT 1
74297: NEG
74298: PUSH
74299: EMPTY
74300: LIST
74301: LIST
74302: PUSH
74303: LD_INT 1
74305: PUSH
74306: LD_INT 0
74308: PUSH
74309: EMPTY
74310: LIST
74311: LIST
74312: PUSH
74313: LD_INT 1
74315: PUSH
74316: LD_INT 1
74318: PUSH
74319: EMPTY
74320: LIST
74321: LIST
74322: PUSH
74323: LD_INT 0
74325: PUSH
74326: LD_INT 1
74328: PUSH
74329: EMPTY
74330: LIST
74331: LIST
74332: PUSH
74333: LD_INT 1
74335: NEG
74336: PUSH
74337: LD_INT 0
74339: PUSH
74340: EMPTY
74341: LIST
74342: LIST
74343: PUSH
74344: LD_INT 1
74346: NEG
74347: PUSH
74348: LD_INT 1
74350: NEG
74351: PUSH
74352: EMPTY
74353: LIST
74354: LIST
74355: PUSH
74356: LD_INT 1
74358: NEG
74359: PUSH
74360: LD_INT 2
74362: NEG
74363: PUSH
74364: EMPTY
74365: LIST
74366: LIST
74367: PUSH
74368: LD_INT 1
74370: PUSH
74371: LD_INT 2
74373: PUSH
74374: EMPTY
74375: LIST
74376: LIST
74377: PUSH
74378: EMPTY
74379: LIST
74380: LIST
74381: LIST
74382: LIST
74383: LIST
74384: LIST
74385: LIST
74386: LIST
74387: LIST
74388: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
74389: LD_ADDR_VAR 0 37
74393: PUSH
74394: LD_INT 0
74396: PUSH
74397: LD_INT 0
74399: PUSH
74400: EMPTY
74401: LIST
74402: LIST
74403: PUSH
74404: LD_INT 0
74406: PUSH
74407: LD_INT 1
74409: NEG
74410: PUSH
74411: EMPTY
74412: LIST
74413: LIST
74414: PUSH
74415: LD_INT 1
74417: PUSH
74418: LD_INT 0
74420: PUSH
74421: EMPTY
74422: LIST
74423: LIST
74424: PUSH
74425: LD_INT 1
74427: PUSH
74428: LD_INT 1
74430: PUSH
74431: EMPTY
74432: LIST
74433: LIST
74434: PUSH
74435: LD_INT 0
74437: PUSH
74438: LD_INT 1
74440: PUSH
74441: EMPTY
74442: LIST
74443: LIST
74444: PUSH
74445: LD_INT 1
74447: NEG
74448: PUSH
74449: LD_INT 0
74451: PUSH
74452: EMPTY
74453: LIST
74454: LIST
74455: PUSH
74456: LD_INT 1
74458: NEG
74459: PUSH
74460: LD_INT 1
74462: NEG
74463: PUSH
74464: EMPTY
74465: LIST
74466: LIST
74467: PUSH
74468: LD_INT 1
74470: PUSH
74471: LD_INT 1
74473: NEG
74474: PUSH
74475: EMPTY
74476: LIST
74477: LIST
74478: PUSH
74479: LD_INT 1
74481: NEG
74482: PUSH
74483: LD_INT 1
74485: PUSH
74486: EMPTY
74487: LIST
74488: LIST
74489: PUSH
74490: EMPTY
74491: LIST
74492: LIST
74493: LIST
74494: LIST
74495: LIST
74496: LIST
74497: LIST
74498: LIST
74499: LIST
74500: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
74501: LD_ADDR_VAR 0 38
74505: PUSH
74506: LD_INT 0
74508: PUSH
74509: LD_INT 0
74511: PUSH
74512: EMPTY
74513: LIST
74514: LIST
74515: PUSH
74516: LD_INT 0
74518: PUSH
74519: LD_INT 1
74521: NEG
74522: PUSH
74523: EMPTY
74524: LIST
74525: LIST
74526: PUSH
74527: LD_INT 1
74529: PUSH
74530: LD_INT 0
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: PUSH
74537: LD_INT 1
74539: PUSH
74540: LD_INT 1
74542: PUSH
74543: EMPTY
74544: LIST
74545: LIST
74546: PUSH
74547: LD_INT 0
74549: PUSH
74550: LD_INT 1
74552: PUSH
74553: EMPTY
74554: LIST
74555: LIST
74556: PUSH
74557: LD_INT 1
74559: NEG
74560: PUSH
74561: LD_INT 0
74563: PUSH
74564: EMPTY
74565: LIST
74566: LIST
74567: PUSH
74568: LD_INT 1
74570: NEG
74571: PUSH
74572: LD_INT 1
74574: NEG
74575: PUSH
74576: EMPTY
74577: LIST
74578: LIST
74579: PUSH
74580: LD_INT 2
74582: PUSH
74583: LD_INT 1
74585: PUSH
74586: EMPTY
74587: LIST
74588: LIST
74589: PUSH
74590: LD_INT 2
74592: NEG
74593: PUSH
74594: LD_INT 1
74596: NEG
74597: PUSH
74598: EMPTY
74599: LIST
74600: LIST
74601: PUSH
74602: EMPTY
74603: LIST
74604: LIST
74605: LIST
74606: LIST
74607: LIST
74608: LIST
74609: LIST
74610: LIST
74611: LIST
74612: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
74613: LD_ADDR_VAR 0 39
74617: PUSH
74618: LD_INT 0
74620: PUSH
74621: LD_INT 0
74623: PUSH
74624: EMPTY
74625: LIST
74626: LIST
74627: PUSH
74628: LD_INT 0
74630: PUSH
74631: LD_INT 1
74633: NEG
74634: PUSH
74635: EMPTY
74636: LIST
74637: LIST
74638: PUSH
74639: LD_INT 1
74641: PUSH
74642: LD_INT 0
74644: PUSH
74645: EMPTY
74646: LIST
74647: LIST
74648: PUSH
74649: LD_INT 1
74651: PUSH
74652: LD_INT 1
74654: PUSH
74655: EMPTY
74656: LIST
74657: LIST
74658: PUSH
74659: LD_INT 0
74661: PUSH
74662: LD_INT 1
74664: PUSH
74665: EMPTY
74666: LIST
74667: LIST
74668: PUSH
74669: LD_INT 1
74671: NEG
74672: PUSH
74673: LD_INT 0
74675: PUSH
74676: EMPTY
74677: LIST
74678: LIST
74679: PUSH
74680: LD_INT 1
74682: NEG
74683: PUSH
74684: LD_INT 1
74686: NEG
74687: PUSH
74688: EMPTY
74689: LIST
74690: LIST
74691: PUSH
74692: LD_INT 1
74694: NEG
74695: PUSH
74696: LD_INT 2
74698: NEG
74699: PUSH
74700: EMPTY
74701: LIST
74702: LIST
74703: PUSH
74704: LD_INT 1
74706: PUSH
74707: LD_INT 2
74709: PUSH
74710: EMPTY
74711: LIST
74712: LIST
74713: PUSH
74714: EMPTY
74715: LIST
74716: LIST
74717: LIST
74718: LIST
74719: LIST
74720: LIST
74721: LIST
74722: LIST
74723: LIST
74724: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
74725: LD_ADDR_VAR 0 40
74729: PUSH
74730: LD_INT 0
74732: PUSH
74733: LD_INT 0
74735: PUSH
74736: EMPTY
74737: LIST
74738: LIST
74739: PUSH
74740: LD_INT 0
74742: PUSH
74743: LD_INT 1
74745: NEG
74746: PUSH
74747: EMPTY
74748: LIST
74749: LIST
74750: PUSH
74751: LD_INT 1
74753: PUSH
74754: LD_INT 0
74756: PUSH
74757: EMPTY
74758: LIST
74759: LIST
74760: PUSH
74761: LD_INT 1
74763: PUSH
74764: LD_INT 1
74766: PUSH
74767: EMPTY
74768: LIST
74769: LIST
74770: PUSH
74771: LD_INT 0
74773: PUSH
74774: LD_INT 1
74776: PUSH
74777: EMPTY
74778: LIST
74779: LIST
74780: PUSH
74781: LD_INT 1
74783: NEG
74784: PUSH
74785: LD_INT 0
74787: PUSH
74788: EMPTY
74789: LIST
74790: LIST
74791: PUSH
74792: LD_INT 1
74794: NEG
74795: PUSH
74796: LD_INT 1
74798: NEG
74799: PUSH
74800: EMPTY
74801: LIST
74802: LIST
74803: PUSH
74804: LD_INT 1
74806: PUSH
74807: LD_INT 1
74809: NEG
74810: PUSH
74811: EMPTY
74812: LIST
74813: LIST
74814: PUSH
74815: LD_INT 1
74817: NEG
74818: PUSH
74819: LD_INT 1
74821: PUSH
74822: EMPTY
74823: LIST
74824: LIST
74825: PUSH
74826: EMPTY
74827: LIST
74828: LIST
74829: LIST
74830: LIST
74831: LIST
74832: LIST
74833: LIST
74834: LIST
74835: LIST
74836: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
74837: LD_ADDR_VAR 0 41
74841: PUSH
74842: LD_INT 0
74844: PUSH
74845: LD_INT 0
74847: PUSH
74848: EMPTY
74849: LIST
74850: LIST
74851: PUSH
74852: LD_INT 0
74854: PUSH
74855: LD_INT 1
74857: NEG
74858: PUSH
74859: EMPTY
74860: LIST
74861: LIST
74862: PUSH
74863: LD_INT 1
74865: PUSH
74866: LD_INT 0
74868: PUSH
74869: EMPTY
74870: LIST
74871: LIST
74872: PUSH
74873: LD_INT 1
74875: PUSH
74876: LD_INT 1
74878: PUSH
74879: EMPTY
74880: LIST
74881: LIST
74882: PUSH
74883: LD_INT 0
74885: PUSH
74886: LD_INT 1
74888: PUSH
74889: EMPTY
74890: LIST
74891: LIST
74892: PUSH
74893: LD_INT 1
74895: NEG
74896: PUSH
74897: LD_INT 0
74899: PUSH
74900: EMPTY
74901: LIST
74902: LIST
74903: PUSH
74904: LD_INT 1
74906: NEG
74907: PUSH
74908: LD_INT 1
74910: NEG
74911: PUSH
74912: EMPTY
74913: LIST
74914: LIST
74915: PUSH
74916: LD_INT 1
74918: NEG
74919: PUSH
74920: LD_INT 2
74922: NEG
74923: PUSH
74924: EMPTY
74925: LIST
74926: LIST
74927: PUSH
74928: LD_INT 1
74930: PUSH
74931: LD_INT 1
74933: NEG
74934: PUSH
74935: EMPTY
74936: LIST
74937: LIST
74938: PUSH
74939: LD_INT 2
74941: PUSH
74942: LD_INT 0
74944: PUSH
74945: EMPTY
74946: LIST
74947: LIST
74948: PUSH
74949: LD_INT 2
74951: PUSH
74952: LD_INT 1
74954: PUSH
74955: EMPTY
74956: LIST
74957: LIST
74958: PUSH
74959: LD_INT 2
74961: PUSH
74962: LD_INT 2
74964: PUSH
74965: EMPTY
74966: LIST
74967: LIST
74968: PUSH
74969: LD_INT 1
74971: PUSH
74972: LD_INT 2
74974: PUSH
74975: EMPTY
74976: LIST
74977: LIST
74978: PUSH
74979: LD_INT 1
74981: NEG
74982: PUSH
74983: LD_INT 1
74985: PUSH
74986: EMPTY
74987: LIST
74988: LIST
74989: PUSH
74990: LD_INT 2
74992: NEG
74993: PUSH
74994: LD_INT 0
74996: PUSH
74997: EMPTY
74998: LIST
74999: LIST
75000: PUSH
75001: LD_INT 2
75003: NEG
75004: PUSH
75005: LD_INT 1
75007: NEG
75008: PUSH
75009: EMPTY
75010: LIST
75011: LIST
75012: PUSH
75013: LD_INT 2
75015: NEG
75016: PUSH
75017: LD_INT 2
75019: NEG
75020: PUSH
75021: EMPTY
75022: LIST
75023: LIST
75024: PUSH
75025: LD_INT 2
75027: NEG
75028: PUSH
75029: LD_INT 3
75031: NEG
75032: PUSH
75033: EMPTY
75034: LIST
75035: LIST
75036: PUSH
75037: LD_INT 2
75039: PUSH
75040: LD_INT 1
75042: NEG
75043: PUSH
75044: EMPTY
75045: LIST
75046: LIST
75047: PUSH
75048: LD_INT 3
75050: PUSH
75051: LD_INT 0
75053: PUSH
75054: EMPTY
75055: LIST
75056: LIST
75057: PUSH
75058: LD_INT 3
75060: PUSH
75061: LD_INT 1
75063: PUSH
75064: EMPTY
75065: LIST
75066: LIST
75067: PUSH
75068: LD_INT 3
75070: PUSH
75071: LD_INT 2
75073: PUSH
75074: EMPTY
75075: LIST
75076: LIST
75077: PUSH
75078: LD_INT 3
75080: PUSH
75081: LD_INT 3
75083: PUSH
75084: EMPTY
75085: LIST
75086: LIST
75087: PUSH
75088: LD_INT 2
75090: PUSH
75091: LD_INT 3
75093: PUSH
75094: EMPTY
75095: LIST
75096: LIST
75097: PUSH
75098: LD_INT 2
75100: NEG
75101: PUSH
75102: LD_INT 1
75104: PUSH
75105: EMPTY
75106: LIST
75107: LIST
75108: PUSH
75109: LD_INT 3
75111: NEG
75112: PUSH
75113: LD_INT 0
75115: PUSH
75116: EMPTY
75117: LIST
75118: LIST
75119: PUSH
75120: LD_INT 3
75122: NEG
75123: PUSH
75124: LD_INT 1
75126: NEG
75127: PUSH
75128: EMPTY
75129: LIST
75130: LIST
75131: PUSH
75132: LD_INT 3
75134: NEG
75135: PUSH
75136: LD_INT 2
75138: NEG
75139: PUSH
75140: EMPTY
75141: LIST
75142: LIST
75143: PUSH
75144: LD_INT 3
75146: NEG
75147: PUSH
75148: LD_INT 3
75150: NEG
75151: PUSH
75152: EMPTY
75153: LIST
75154: LIST
75155: PUSH
75156: EMPTY
75157: LIST
75158: LIST
75159: LIST
75160: LIST
75161: LIST
75162: LIST
75163: LIST
75164: LIST
75165: LIST
75166: LIST
75167: LIST
75168: LIST
75169: LIST
75170: LIST
75171: LIST
75172: LIST
75173: LIST
75174: LIST
75175: LIST
75176: LIST
75177: LIST
75178: LIST
75179: LIST
75180: LIST
75181: LIST
75182: LIST
75183: LIST
75184: LIST
75185: LIST
75186: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75187: LD_ADDR_VAR 0 42
75191: PUSH
75192: LD_INT 0
75194: PUSH
75195: LD_INT 0
75197: PUSH
75198: EMPTY
75199: LIST
75200: LIST
75201: PUSH
75202: LD_INT 0
75204: PUSH
75205: LD_INT 1
75207: NEG
75208: PUSH
75209: EMPTY
75210: LIST
75211: LIST
75212: PUSH
75213: LD_INT 1
75215: PUSH
75216: LD_INT 0
75218: PUSH
75219: EMPTY
75220: LIST
75221: LIST
75222: PUSH
75223: LD_INT 1
75225: PUSH
75226: LD_INT 1
75228: PUSH
75229: EMPTY
75230: LIST
75231: LIST
75232: PUSH
75233: LD_INT 0
75235: PUSH
75236: LD_INT 1
75238: PUSH
75239: EMPTY
75240: LIST
75241: LIST
75242: PUSH
75243: LD_INT 1
75245: NEG
75246: PUSH
75247: LD_INT 0
75249: PUSH
75250: EMPTY
75251: LIST
75252: LIST
75253: PUSH
75254: LD_INT 1
75256: NEG
75257: PUSH
75258: LD_INT 1
75260: NEG
75261: PUSH
75262: EMPTY
75263: LIST
75264: LIST
75265: PUSH
75266: LD_INT 1
75268: NEG
75269: PUSH
75270: LD_INT 2
75272: NEG
75273: PUSH
75274: EMPTY
75275: LIST
75276: LIST
75277: PUSH
75278: LD_INT 0
75280: PUSH
75281: LD_INT 2
75283: NEG
75284: PUSH
75285: EMPTY
75286: LIST
75287: LIST
75288: PUSH
75289: LD_INT 1
75291: PUSH
75292: LD_INT 1
75294: NEG
75295: PUSH
75296: EMPTY
75297: LIST
75298: LIST
75299: PUSH
75300: LD_INT 2
75302: PUSH
75303: LD_INT 1
75305: PUSH
75306: EMPTY
75307: LIST
75308: LIST
75309: PUSH
75310: LD_INT 2
75312: PUSH
75313: LD_INT 2
75315: PUSH
75316: EMPTY
75317: LIST
75318: LIST
75319: PUSH
75320: LD_INT 1
75322: PUSH
75323: LD_INT 2
75325: PUSH
75326: EMPTY
75327: LIST
75328: LIST
75329: PUSH
75330: LD_INT 0
75332: PUSH
75333: LD_INT 2
75335: PUSH
75336: EMPTY
75337: LIST
75338: LIST
75339: PUSH
75340: LD_INT 1
75342: NEG
75343: PUSH
75344: LD_INT 1
75346: PUSH
75347: EMPTY
75348: LIST
75349: LIST
75350: PUSH
75351: LD_INT 2
75353: NEG
75354: PUSH
75355: LD_INT 1
75357: NEG
75358: PUSH
75359: EMPTY
75360: LIST
75361: LIST
75362: PUSH
75363: LD_INT 2
75365: NEG
75366: PUSH
75367: LD_INT 2
75369: NEG
75370: PUSH
75371: EMPTY
75372: LIST
75373: LIST
75374: PUSH
75375: LD_INT 2
75377: NEG
75378: PUSH
75379: LD_INT 3
75381: NEG
75382: PUSH
75383: EMPTY
75384: LIST
75385: LIST
75386: PUSH
75387: LD_INT 1
75389: NEG
75390: PUSH
75391: LD_INT 3
75393: NEG
75394: PUSH
75395: EMPTY
75396: LIST
75397: LIST
75398: PUSH
75399: LD_INT 0
75401: PUSH
75402: LD_INT 3
75404: NEG
75405: PUSH
75406: EMPTY
75407: LIST
75408: LIST
75409: PUSH
75410: LD_INT 1
75412: PUSH
75413: LD_INT 2
75415: NEG
75416: PUSH
75417: EMPTY
75418: LIST
75419: LIST
75420: PUSH
75421: LD_INT 3
75423: PUSH
75424: LD_INT 2
75426: PUSH
75427: EMPTY
75428: LIST
75429: LIST
75430: PUSH
75431: LD_INT 3
75433: PUSH
75434: LD_INT 3
75436: PUSH
75437: EMPTY
75438: LIST
75439: LIST
75440: PUSH
75441: LD_INT 2
75443: PUSH
75444: LD_INT 3
75446: PUSH
75447: EMPTY
75448: LIST
75449: LIST
75450: PUSH
75451: LD_INT 1
75453: PUSH
75454: LD_INT 3
75456: PUSH
75457: EMPTY
75458: LIST
75459: LIST
75460: PUSH
75461: LD_INT 0
75463: PUSH
75464: LD_INT 3
75466: PUSH
75467: EMPTY
75468: LIST
75469: LIST
75470: PUSH
75471: LD_INT 1
75473: NEG
75474: PUSH
75475: LD_INT 2
75477: PUSH
75478: EMPTY
75479: LIST
75480: LIST
75481: PUSH
75482: LD_INT 3
75484: NEG
75485: PUSH
75486: LD_INT 2
75488: NEG
75489: PUSH
75490: EMPTY
75491: LIST
75492: LIST
75493: PUSH
75494: LD_INT 3
75496: NEG
75497: PUSH
75498: LD_INT 3
75500: NEG
75501: PUSH
75502: EMPTY
75503: LIST
75504: LIST
75505: PUSH
75506: EMPTY
75507: LIST
75508: LIST
75509: LIST
75510: LIST
75511: LIST
75512: LIST
75513: LIST
75514: LIST
75515: LIST
75516: LIST
75517: LIST
75518: LIST
75519: LIST
75520: LIST
75521: LIST
75522: LIST
75523: LIST
75524: LIST
75525: LIST
75526: LIST
75527: LIST
75528: LIST
75529: LIST
75530: LIST
75531: LIST
75532: LIST
75533: LIST
75534: LIST
75535: LIST
75536: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
75537: LD_ADDR_VAR 0 43
75541: PUSH
75542: LD_INT 0
75544: PUSH
75545: LD_INT 0
75547: PUSH
75548: EMPTY
75549: LIST
75550: LIST
75551: PUSH
75552: LD_INT 0
75554: PUSH
75555: LD_INT 1
75557: NEG
75558: PUSH
75559: EMPTY
75560: LIST
75561: LIST
75562: PUSH
75563: LD_INT 1
75565: PUSH
75566: LD_INT 0
75568: PUSH
75569: EMPTY
75570: LIST
75571: LIST
75572: PUSH
75573: LD_INT 1
75575: PUSH
75576: LD_INT 1
75578: PUSH
75579: EMPTY
75580: LIST
75581: LIST
75582: PUSH
75583: LD_INT 0
75585: PUSH
75586: LD_INT 1
75588: PUSH
75589: EMPTY
75590: LIST
75591: LIST
75592: PUSH
75593: LD_INT 1
75595: NEG
75596: PUSH
75597: LD_INT 0
75599: PUSH
75600: EMPTY
75601: LIST
75602: LIST
75603: PUSH
75604: LD_INT 1
75606: NEG
75607: PUSH
75608: LD_INT 1
75610: NEG
75611: PUSH
75612: EMPTY
75613: LIST
75614: LIST
75615: PUSH
75616: LD_INT 1
75618: NEG
75619: PUSH
75620: LD_INT 2
75622: NEG
75623: PUSH
75624: EMPTY
75625: LIST
75626: LIST
75627: PUSH
75628: LD_INT 0
75630: PUSH
75631: LD_INT 2
75633: NEG
75634: PUSH
75635: EMPTY
75636: LIST
75637: LIST
75638: PUSH
75639: LD_INT 1
75641: PUSH
75642: LD_INT 1
75644: NEG
75645: PUSH
75646: EMPTY
75647: LIST
75648: LIST
75649: PUSH
75650: LD_INT 2
75652: PUSH
75653: LD_INT 0
75655: PUSH
75656: EMPTY
75657: LIST
75658: LIST
75659: PUSH
75660: LD_INT 2
75662: PUSH
75663: LD_INT 1
75665: PUSH
75666: EMPTY
75667: LIST
75668: LIST
75669: PUSH
75670: LD_INT 1
75672: PUSH
75673: LD_INT 2
75675: PUSH
75676: EMPTY
75677: LIST
75678: LIST
75679: PUSH
75680: LD_INT 0
75682: PUSH
75683: LD_INT 2
75685: PUSH
75686: EMPTY
75687: LIST
75688: LIST
75689: PUSH
75690: LD_INT 1
75692: NEG
75693: PUSH
75694: LD_INT 1
75696: PUSH
75697: EMPTY
75698: LIST
75699: LIST
75700: PUSH
75701: LD_INT 2
75703: NEG
75704: PUSH
75705: LD_INT 0
75707: PUSH
75708: EMPTY
75709: LIST
75710: LIST
75711: PUSH
75712: LD_INT 2
75714: NEG
75715: PUSH
75716: LD_INT 1
75718: NEG
75719: PUSH
75720: EMPTY
75721: LIST
75722: LIST
75723: PUSH
75724: LD_INT 1
75726: NEG
75727: PUSH
75728: LD_INT 3
75730: NEG
75731: PUSH
75732: EMPTY
75733: LIST
75734: LIST
75735: PUSH
75736: LD_INT 0
75738: PUSH
75739: LD_INT 3
75741: NEG
75742: PUSH
75743: EMPTY
75744: LIST
75745: LIST
75746: PUSH
75747: LD_INT 1
75749: PUSH
75750: LD_INT 2
75752: NEG
75753: PUSH
75754: EMPTY
75755: LIST
75756: LIST
75757: PUSH
75758: LD_INT 2
75760: PUSH
75761: LD_INT 1
75763: NEG
75764: PUSH
75765: EMPTY
75766: LIST
75767: LIST
75768: PUSH
75769: LD_INT 3
75771: PUSH
75772: LD_INT 0
75774: PUSH
75775: EMPTY
75776: LIST
75777: LIST
75778: PUSH
75779: LD_INT 3
75781: PUSH
75782: LD_INT 1
75784: PUSH
75785: EMPTY
75786: LIST
75787: LIST
75788: PUSH
75789: LD_INT 1
75791: PUSH
75792: LD_INT 3
75794: PUSH
75795: EMPTY
75796: LIST
75797: LIST
75798: PUSH
75799: LD_INT 0
75801: PUSH
75802: LD_INT 3
75804: PUSH
75805: EMPTY
75806: LIST
75807: LIST
75808: PUSH
75809: LD_INT 1
75811: NEG
75812: PUSH
75813: LD_INT 2
75815: PUSH
75816: EMPTY
75817: LIST
75818: LIST
75819: PUSH
75820: LD_INT 2
75822: NEG
75823: PUSH
75824: LD_INT 1
75826: PUSH
75827: EMPTY
75828: LIST
75829: LIST
75830: PUSH
75831: LD_INT 3
75833: NEG
75834: PUSH
75835: LD_INT 0
75837: PUSH
75838: EMPTY
75839: LIST
75840: LIST
75841: PUSH
75842: LD_INT 3
75844: NEG
75845: PUSH
75846: LD_INT 1
75848: NEG
75849: PUSH
75850: EMPTY
75851: LIST
75852: LIST
75853: PUSH
75854: EMPTY
75855: LIST
75856: LIST
75857: LIST
75858: LIST
75859: LIST
75860: LIST
75861: LIST
75862: LIST
75863: LIST
75864: LIST
75865: LIST
75866: LIST
75867: LIST
75868: LIST
75869: LIST
75870: LIST
75871: LIST
75872: LIST
75873: LIST
75874: LIST
75875: LIST
75876: LIST
75877: LIST
75878: LIST
75879: LIST
75880: LIST
75881: LIST
75882: LIST
75883: LIST
75884: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75885: LD_ADDR_VAR 0 44
75889: PUSH
75890: LD_INT 0
75892: PUSH
75893: LD_INT 0
75895: PUSH
75896: EMPTY
75897: LIST
75898: LIST
75899: PUSH
75900: LD_INT 0
75902: PUSH
75903: LD_INT 1
75905: NEG
75906: PUSH
75907: EMPTY
75908: LIST
75909: LIST
75910: PUSH
75911: LD_INT 1
75913: PUSH
75914: LD_INT 0
75916: PUSH
75917: EMPTY
75918: LIST
75919: LIST
75920: PUSH
75921: LD_INT 1
75923: PUSH
75924: LD_INT 1
75926: PUSH
75927: EMPTY
75928: LIST
75929: LIST
75930: PUSH
75931: LD_INT 0
75933: PUSH
75934: LD_INT 1
75936: PUSH
75937: EMPTY
75938: LIST
75939: LIST
75940: PUSH
75941: LD_INT 1
75943: NEG
75944: PUSH
75945: LD_INT 0
75947: PUSH
75948: EMPTY
75949: LIST
75950: LIST
75951: PUSH
75952: LD_INT 1
75954: NEG
75955: PUSH
75956: LD_INT 1
75958: NEG
75959: PUSH
75960: EMPTY
75961: LIST
75962: LIST
75963: PUSH
75964: LD_INT 1
75966: NEG
75967: PUSH
75968: LD_INT 2
75970: NEG
75971: PUSH
75972: EMPTY
75973: LIST
75974: LIST
75975: PUSH
75976: LD_INT 1
75978: PUSH
75979: LD_INT 1
75981: NEG
75982: PUSH
75983: EMPTY
75984: LIST
75985: LIST
75986: PUSH
75987: LD_INT 2
75989: PUSH
75990: LD_INT 0
75992: PUSH
75993: EMPTY
75994: LIST
75995: LIST
75996: PUSH
75997: LD_INT 2
75999: PUSH
76000: LD_INT 1
76002: PUSH
76003: EMPTY
76004: LIST
76005: LIST
76006: PUSH
76007: LD_INT 2
76009: PUSH
76010: LD_INT 2
76012: PUSH
76013: EMPTY
76014: LIST
76015: LIST
76016: PUSH
76017: LD_INT 1
76019: PUSH
76020: LD_INT 2
76022: PUSH
76023: EMPTY
76024: LIST
76025: LIST
76026: PUSH
76027: LD_INT 1
76029: NEG
76030: PUSH
76031: LD_INT 1
76033: PUSH
76034: EMPTY
76035: LIST
76036: LIST
76037: PUSH
76038: LD_INT 2
76040: NEG
76041: PUSH
76042: LD_INT 0
76044: PUSH
76045: EMPTY
76046: LIST
76047: LIST
76048: PUSH
76049: LD_INT 2
76051: NEG
76052: PUSH
76053: LD_INT 1
76055: NEG
76056: PUSH
76057: EMPTY
76058: LIST
76059: LIST
76060: PUSH
76061: LD_INT 2
76063: NEG
76064: PUSH
76065: LD_INT 2
76067: NEG
76068: PUSH
76069: EMPTY
76070: LIST
76071: LIST
76072: PUSH
76073: LD_INT 2
76075: NEG
76076: PUSH
76077: LD_INT 3
76079: NEG
76080: PUSH
76081: EMPTY
76082: LIST
76083: LIST
76084: PUSH
76085: LD_INT 2
76087: PUSH
76088: LD_INT 1
76090: NEG
76091: PUSH
76092: EMPTY
76093: LIST
76094: LIST
76095: PUSH
76096: LD_INT 3
76098: PUSH
76099: LD_INT 0
76101: PUSH
76102: EMPTY
76103: LIST
76104: LIST
76105: PUSH
76106: LD_INT 3
76108: PUSH
76109: LD_INT 1
76111: PUSH
76112: EMPTY
76113: LIST
76114: LIST
76115: PUSH
76116: LD_INT 3
76118: PUSH
76119: LD_INT 2
76121: PUSH
76122: EMPTY
76123: LIST
76124: LIST
76125: PUSH
76126: LD_INT 3
76128: PUSH
76129: LD_INT 3
76131: PUSH
76132: EMPTY
76133: LIST
76134: LIST
76135: PUSH
76136: LD_INT 2
76138: PUSH
76139: LD_INT 3
76141: PUSH
76142: EMPTY
76143: LIST
76144: LIST
76145: PUSH
76146: LD_INT 2
76148: NEG
76149: PUSH
76150: LD_INT 1
76152: PUSH
76153: EMPTY
76154: LIST
76155: LIST
76156: PUSH
76157: LD_INT 3
76159: NEG
76160: PUSH
76161: LD_INT 0
76163: PUSH
76164: EMPTY
76165: LIST
76166: LIST
76167: PUSH
76168: LD_INT 3
76170: NEG
76171: PUSH
76172: LD_INT 1
76174: NEG
76175: PUSH
76176: EMPTY
76177: LIST
76178: LIST
76179: PUSH
76180: LD_INT 3
76182: NEG
76183: PUSH
76184: LD_INT 2
76186: NEG
76187: PUSH
76188: EMPTY
76189: LIST
76190: LIST
76191: PUSH
76192: LD_INT 3
76194: NEG
76195: PUSH
76196: LD_INT 3
76198: NEG
76199: PUSH
76200: EMPTY
76201: LIST
76202: LIST
76203: PUSH
76204: EMPTY
76205: LIST
76206: LIST
76207: LIST
76208: LIST
76209: LIST
76210: LIST
76211: LIST
76212: LIST
76213: LIST
76214: LIST
76215: LIST
76216: LIST
76217: LIST
76218: LIST
76219: LIST
76220: LIST
76221: LIST
76222: LIST
76223: LIST
76224: LIST
76225: LIST
76226: LIST
76227: LIST
76228: LIST
76229: LIST
76230: LIST
76231: LIST
76232: LIST
76233: LIST
76234: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76235: LD_ADDR_VAR 0 45
76239: PUSH
76240: LD_INT 0
76242: PUSH
76243: LD_INT 0
76245: PUSH
76246: EMPTY
76247: LIST
76248: LIST
76249: PUSH
76250: LD_INT 0
76252: PUSH
76253: LD_INT 1
76255: NEG
76256: PUSH
76257: EMPTY
76258: LIST
76259: LIST
76260: PUSH
76261: LD_INT 1
76263: PUSH
76264: LD_INT 0
76266: PUSH
76267: EMPTY
76268: LIST
76269: LIST
76270: PUSH
76271: LD_INT 1
76273: PUSH
76274: LD_INT 1
76276: PUSH
76277: EMPTY
76278: LIST
76279: LIST
76280: PUSH
76281: LD_INT 0
76283: PUSH
76284: LD_INT 1
76286: PUSH
76287: EMPTY
76288: LIST
76289: LIST
76290: PUSH
76291: LD_INT 1
76293: NEG
76294: PUSH
76295: LD_INT 0
76297: PUSH
76298: EMPTY
76299: LIST
76300: LIST
76301: PUSH
76302: LD_INT 1
76304: NEG
76305: PUSH
76306: LD_INT 1
76308: NEG
76309: PUSH
76310: EMPTY
76311: LIST
76312: LIST
76313: PUSH
76314: LD_INT 1
76316: NEG
76317: PUSH
76318: LD_INT 2
76320: NEG
76321: PUSH
76322: EMPTY
76323: LIST
76324: LIST
76325: PUSH
76326: LD_INT 0
76328: PUSH
76329: LD_INT 2
76331: NEG
76332: PUSH
76333: EMPTY
76334: LIST
76335: LIST
76336: PUSH
76337: LD_INT 1
76339: PUSH
76340: LD_INT 1
76342: NEG
76343: PUSH
76344: EMPTY
76345: LIST
76346: LIST
76347: PUSH
76348: LD_INT 2
76350: PUSH
76351: LD_INT 1
76353: PUSH
76354: EMPTY
76355: LIST
76356: LIST
76357: PUSH
76358: LD_INT 2
76360: PUSH
76361: LD_INT 2
76363: PUSH
76364: EMPTY
76365: LIST
76366: LIST
76367: PUSH
76368: LD_INT 1
76370: PUSH
76371: LD_INT 2
76373: PUSH
76374: EMPTY
76375: LIST
76376: LIST
76377: PUSH
76378: LD_INT 0
76380: PUSH
76381: LD_INT 2
76383: PUSH
76384: EMPTY
76385: LIST
76386: LIST
76387: PUSH
76388: LD_INT 1
76390: NEG
76391: PUSH
76392: LD_INT 1
76394: PUSH
76395: EMPTY
76396: LIST
76397: LIST
76398: PUSH
76399: LD_INT 2
76401: NEG
76402: PUSH
76403: LD_INT 1
76405: NEG
76406: PUSH
76407: EMPTY
76408: LIST
76409: LIST
76410: PUSH
76411: LD_INT 2
76413: NEG
76414: PUSH
76415: LD_INT 2
76417: NEG
76418: PUSH
76419: EMPTY
76420: LIST
76421: LIST
76422: PUSH
76423: LD_INT 2
76425: NEG
76426: PUSH
76427: LD_INT 3
76429: NEG
76430: PUSH
76431: EMPTY
76432: LIST
76433: LIST
76434: PUSH
76435: LD_INT 1
76437: NEG
76438: PUSH
76439: LD_INT 3
76441: NEG
76442: PUSH
76443: EMPTY
76444: LIST
76445: LIST
76446: PUSH
76447: LD_INT 0
76449: PUSH
76450: LD_INT 3
76452: NEG
76453: PUSH
76454: EMPTY
76455: LIST
76456: LIST
76457: PUSH
76458: LD_INT 1
76460: PUSH
76461: LD_INT 2
76463: NEG
76464: PUSH
76465: EMPTY
76466: LIST
76467: LIST
76468: PUSH
76469: LD_INT 3
76471: PUSH
76472: LD_INT 2
76474: PUSH
76475: EMPTY
76476: LIST
76477: LIST
76478: PUSH
76479: LD_INT 3
76481: PUSH
76482: LD_INT 3
76484: PUSH
76485: EMPTY
76486: LIST
76487: LIST
76488: PUSH
76489: LD_INT 2
76491: PUSH
76492: LD_INT 3
76494: PUSH
76495: EMPTY
76496: LIST
76497: LIST
76498: PUSH
76499: LD_INT 1
76501: PUSH
76502: LD_INT 3
76504: PUSH
76505: EMPTY
76506: LIST
76507: LIST
76508: PUSH
76509: LD_INT 0
76511: PUSH
76512: LD_INT 3
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: PUSH
76519: LD_INT 1
76521: NEG
76522: PUSH
76523: LD_INT 2
76525: PUSH
76526: EMPTY
76527: LIST
76528: LIST
76529: PUSH
76530: LD_INT 3
76532: NEG
76533: PUSH
76534: LD_INT 2
76536: NEG
76537: PUSH
76538: EMPTY
76539: LIST
76540: LIST
76541: PUSH
76542: LD_INT 3
76544: NEG
76545: PUSH
76546: LD_INT 3
76548: NEG
76549: PUSH
76550: EMPTY
76551: LIST
76552: LIST
76553: PUSH
76554: EMPTY
76555: LIST
76556: LIST
76557: LIST
76558: LIST
76559: LIST
76560: LIST
76561: LIST
76562: LIST
76563: LIST
76564: LIST
76565: LIST
76566: LIST
76567: LIST
76568: LIST
76569: LIST
76570: LIST
76571: LIST
76572: LIST
76573: LIST
76574: LIST
76575: LIST
76576: LIST
76577: LIST
76578: LIST
76579: LIST
76580: LIST
76581: LIST
76582: LIST
76583: LIST
76584: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76585: LD_ADDR_VAR 0 46
76589: PUSH
76590: LD_INT 0
76592: PUSH
76593: LD_INT 0
76595: PUSH
76596: EMPTY
76597: LIST
76598: LIST
76599: PUSH
76600: LD_INT 0
76602: PUSH
76603: LD_INT 1
76605: NEG
76606: PUSH
76607: EMPTY
76608: LIST
76609: LIST
76610: PUSH
76611: LD_INT 1
76613: PUSH
76614: LD_INT 0
76616: PUSH
76617: EMPTY
76618: LIST
76619: LIST
76620: PUSH
76621: LD_INT 1
76623: PUSH
76624: LD_INT 1
76626: PUSH
76627: EMPTY
76628: LIST
76629: LIST
76630: PUSH
76631: LD_INT 0
76633: PUSH
76634: LD_INT 1
76636: PUSH
76637: EMPTY
76638: LIST
76639: LIST
76640: PUSH
76641: LD_INT 1
76643: NEG
76644: PUSH
76645: LD_INT 0
76647: PUSH
76648: EMPTY
76649: LIST
76650: LIST
76651: PUSH
76652: LD_INT 1
76654: NEG
76655: PUSH
76656: LD_INT 1
76658: NEG
76659: PUSH
76660: EMPTY
76661: LIST
76662: LIST
76663: PUSH
76664: LD_INT 1
76666: NEG
76667: PUSH
76668: LD_INT 2
76670: NEG
76671: PUSH
76672: EMPTY
76673: LIST
76674: LIST
76675: PUSH
76676: LD_INT 0
76678: PUSH
76679: LD_INT 2
76681: NEG
76682: PUSH
76683: EMPTY
76684: LIST
76685: LIST
76686: PUSH
76687: LD_INT 1
76689: PUSH
76690: LD_INT 1
76692: NEG
76693: PUSH
76694: EMPTY
76695: LIST
76696: LIST
76697: PUSH
76698: LD_INT 2
76700: PUSH
76701: LD_INT 0
76703: PUSH
76704: EMPTY
76705: LIST
76706: LIST
76707: PUSH
76708: LD_INT 2
76710: PUSH
76711: LD_INT 1
76713: PUSH
76714: EMPTY
76715: LIST
76716: LIST
76717: PUSH
76718: LD_INT 1
76720: PUSH
76721: LD_INT 2
76723: PUSH
76724: EMPTY
76725: LIST
76726: LIST
76727: PUSH
76728: LD_INT 0
76730: PUSH
76731: LD_INT 2
76733: PUSH
76734: EMPTY
76735: LIST
76736: LIST
76737: PUSH
76738: LD_INT 1
76740: NEG
76741: PUSH
76742: LD_INT 1
76744: PUSH
76745: EMPTY
76746: LIST
76747: LIST
76748: PUSH
76749: LD_INT 2
76751: NEG
76752: PUSH
76753: LD_INT 0
76755: PUSH
76756: EMPTY
76757: LIST
76758: LIST
76759: PUSH
76760: LD_INT 2
76762: NEG
76763: PUSH
76764: LD_INT 1
76766: NEG
76767: PUSH
76768: EMPTY
76769: LIST
76770: LIST
76771: PUSH
76772: LD_INT 1
76774: NEG
76775: PUSH
76776: LD_INT 3
76778: NEG
76779: PUSH
76780: EMPTY
76781: LIST
76782: LIST
76783: PUSH
76784: LD_INT 0
76786: PUSH
76787: LD_INT 3
76789: NEG
76790: PUSH
76791: EMPTY
76792: LIST
76793: LIST
76794: PUSH
76795: LD_INT 1
76797: PUSH
76798: LD_INT 2
76800: NEG
76801: PUSH
76802: EMPTY
76803: LIST
76804: LIST
76805: PUSH
76806: LD_INT 2
76808: PUSH
76809: LD_INT 1
76811: NEG
76812: PUSH
76813: EMPTY
76814: LIST
76815: LIST
76816: PUSH
76817: LD_INT 3
76819: PUSH
76820: LD_INT 0
76822: PUSH
76823: EMPTY
76824: LIST
76825: LIST
76826: PUSH
76827: LD_INT 3
76829: PUSH
76830: LD_INT 1
76832: PUSH
76833: EMPTY
76834: LIST
76835: LIST
76836: PUSH
76837: LD_INT 1
76839: PUSH
76840: LD_INT 3
76842: PUSH
76843: EMPTY
76844: LIST
76845: LIST
76846: PUSH
76847: LD_INT 0
76849: PUSH
76850: LD_INT 3
76852: PUSH
76853: EMPTY
76854: LIST
76855: LIST
76856: PUSH
76857: LD_INT 1
76859: NEG
76860: PUSH
76861: LD_INT 2
76863: PUSH
76864: EMPTY
76865: LIST
76866: LIST
76867: PUSH
76868: LD_INT 2
76870: NEG
76871: PUSH
76872: LD_INT 1
76874: PUSH
76875: EMPTY
76876: LIST
76877: LIST
76878: PUSH
76879: LD_INT 3
76881: NEG
76882: PUSH
76883: LD_INT 0
76885: PUSH
76886: EMPTY
76887: LIST
76888: LIST
76889: PUSH
76890: LD_INT 3
76892: NEG
76893: PUSH
76894: LD_INT 1
76896: NEG
76897: PUSH
76898: EMPTY
76899: LIST
76900: LIST
76901: PUSH
76902: EMPTY
76903: LIST
76904: LIST
76905: LIST
76906: LIST
76907: LIST
76908: LIST
76909: LIST
76910: LIST
76911: LIST
76912: LIST
76913: LIST
76914: LIST
76915: LIST
76916: LIST
76917: LIST
76918: LIST
76919: LIST
76920: LIST
76921: LIST
76922: LIST
76923: LIST
76924: LIST
76925: LIST
76926: LIST
76927: LIST
76928: LIST
76929: LIST
76930: LIST
76931: LIST
76932: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
76933: LD_ADDR_VAR 0 47
76937: PUSH
76938: LD_INT 0
76940: PUSH
76941: LD_INT 0
76943: PUSH
76944: EMPTY
76945: LIST
76946: LIST
76947: PUSH
76948: LD_INT 0
76950: PUSH
76951: LD_INT 1
76953: NEG
76954: PUSH
76955: EMPTY
76956: LIST
76957: LIST
76958: PUSH
76959: LD_INT 1
76961: PUSH
76962: LD_INT 0
76964: PUSH
76965: EMPTY
76966: LIST
76967: LIST
76968: PUSH
76969: LD_INT 1
76971: PUSH
76972: LD_INT 1
76974: PUSH
76975: EMPTY
76976: LIST
76977: LIST
76978: PUSH
76979: LD_INT 0
76981: PUSH
76982: LD_INT 1
76984: PUSH
76985: EMPTY
76986: LIST
76987: LIST
76988: PUSH
76989: LD_INT 1
76991: NEG
76992: PUSH
76993: LD_INT 0
76995: PUSH
76996: EMPTY
76997: LIST
76998: LIST
76999: PUSH
77000: LD_INT 1
77002: NEG
77003: PUSH
77004: LD_INT 1
77006: NEG
77007: PUSH
77008: EMPTY
77009: LIST
77010: LIST
77011: PUSH
77012: LD_INT 1
77014: NEG
77015: PUSH
77016: LD_INT 2
77018: NEG
77019: PUSH
77020: EMPTY
77021: LIST
77022: LIST
77023: PUSH
77024: LD_INT 0
77026: PUSH
77027: LD_INT 2
77029: NEG
77030: PUSH
77031: EMPTY
77032: LIST
77033: LIST
77034: PUSH
77035: LD_INT 1
77037: PUSH
77038: LD_INT 1
77040: NEG
77041: PUSH
77042: EMPTY
77043: LIST
77044: LIST
77045: PUSH
77046: LD_INT 2
77048: NEG
77049: PUSH
77050: LD_INT 1
77052: NEG
77053: PUSH
77054: EMPTY
77055: LIST
77056: LIST
77057: PUSH
77058: LD_INT 2
77060: NEG
77061: PUSH
77062: LD_INT 2
77064: NEG
77065: PUSH
77066: EMPTY
77067: LIST
77068: LIST
77069: PUSH
77070: EMPTY
77071: LIST
77072: LIST
77073: LIST
77074: LIST
77075: LIST
77076: LIST
77077: LIST
77078: LIST
77079: LIST
77080: LIST
77081: LIST
77082: LIST
77083: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
77084: LD_ADDR_VAR 0 48
77088: PUSH
77089: LD_INT 0
77091: PUSH
77092: LD_INT 0
77094: PUSH
77095: EMPTY
77096: LIST
77097: LIST
77098: PUSH
77099: LD_INT 0
77101: PUSH
77102: LD_INT 1
77104: NEG
77105: PUSH
77106: EMPTY
77107: LIST
77108: LIST
77109: PUSH
77110: LD_INT 1
77112: PUSH
77113: LD_INT 0
77115: PUSH
77116: EMPTY
77117: LIST
77118: LIST
77119: PUSH
77120: LD_INT 1
77122: PUSH
77123: LD_INT 1
77125: PUSH
77126: EMPTY
77127: LIST
77128: LIST
77129: PUSH
77130: LD_INT 0
77132: PUSH
77133: LD_INT 1
77135: PUSH
77136: EMPTY
77137: LIST
77138: LIST
77139: PUSH
77140: LD_INT 1
77142: NEG
77143: PUSH
77144: LD_INT 0
77146: PUSH
77147: EMPTY
77148: LIST
77149: LIST
77150: PUSH
77151: LD_INT 1
77153: NEG
77154: PUSH
77155: LD_INT 1
77157: NEG
77158: PUSH
77159: EMPTY
77160: LIST
77161: LIST
77162: PUSH
77163: LD_INT 1
77165: NEG
77166: PUSH
77167: LD_INT 2
77169: NEG
77170: PUSH
77171: EMPTY
77172: LIST
77173: LIST
77174: PUSH
77175: LD_INT 0
77177: PUSH
77178: LD_INT 2
77180: NEG
77181: PUSH
77182: EMPTY
77183: LIST
77184: LIST
77185: PUSH
77186: LD_INT 1
77188: PUSH
77189: LD_INT 1
77191: NEG
77192: PUSH
77193: EMPTY
77194: LIST
77195: LIST
77196: PUSH
77197: LD_INT 2
77199: PUSH
77200: LD_INT 0
77202: PUSH
77203: EMPTY
77204: LIST
77205: LIST
77206: PUSH
77207: LD_INT 2
77209: PUSH
77210: LD_INT 1
77212: PUSH
77213: EMPTY
77214: LIST
77215: LIST
77216: PUSH
77217: EMPTY
77218: LIST
77219: LIST
77220: LIST
77221: LIST
77222: LIST
77223: LIST
77224: LIST
77225: LIST
77226: LIST
77227: LIST
77228: LIST
77229: LIST
77230: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
77231: LD_ADDR_VAR 0 49
77235: PUSH
77236: LD_INT 0
77238: PUSH
77239: LD_INT 0
77241: PUSH
77242: EMPTY
77243: LIST
77244: LIST
77245: PUSH
77246: LD_INT 0
77248: PUSH
77249: LD_INT 1
77251: NEG
77252: PUSH
77253: EMPTY
77254: LIST
77255: LIST
77256: PUSH
77257: LD_INT 1
77259: PUSH
77260: LD_INT 0
77262: PUSH
77263: EMPTY
77264: LIST
77265: LIST
77266: PUSH
77267: LD_INT 1
77269: PUSH
77270: LD_INT 1
77272: PUSH
77273: EMPTY
77274: LIST
77275: LIST
77276: PUSH
77277: LD_INT 0
77279: PUSH
77280: LD_INT 1
77282: PUSH
77283: EMPTY
77284: LIST
77285: LIST
77286: PUSH
77287: LD_INT 1
77289: NEG
77290: PUSH
77291: LD_INT 0
77293: PUSH
77294: EMPTY
77295: LIST
77296: LIST
77297: PUSH
77298: LD_INT 1
77300: NEG
77301: PUSH
77302: LD_INT 1
77304: NEG
77305: PUSH
77306: EMPTY
77307: LIST
77308: LIST
77309: PUSH
77310: LD_INT 1
77312: PUSH
77313: LD_INT 1
77315: NEG
77316: PUSH
77317: EMPTY
77318: LIST
77319: LIST
77320: PUSH
77321: LD_INT 2
77323: PUSH
77324: LD_INT 0
77326: PUSH
77327: EMPTY
77328: LIST
77329: LIST
77330: PUSH
77331: LD_INT 2
77333: PUSH
77334: LD_INT 1
77336: PUSH
77337: EMPTY
77338: LIST
77339: LIST
77340: PUSH
77341: LD_INT 2
77343: PUSH
77344: LD_INT 2
77346: PUSH
77347: EMPTY
77348: LIST
77349: LIST
77350: PUSH
77351: LD_INT 1
77353: PUSH
77354: LD_INT 2
77356: PUSH
77357: EMPTY
77358: LIST
77359: LIST
77360: PUSH
77361: EMPTY
77362: LIST
77363: LIST
77364: LIST
77365: LIST
77366: LIST
77367: LIST
77368: LIST
77369: LIST
77370: LIST
77371: LIST
77372: LIST
77373: LIST
77374: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
77375: LD_ADDR_VAR 0 50
77379: PUSH
77380: LD_INT 0
77382: PUSH
77383: LD_INT 0
77385: PUSH
77386: EMPTY
77387: LIST
77388: LIST
77389: PUSH
77390: LD_INT 0
77392: PUSH
77393: LD_INT 1
77395: NEG
77396: PUSH
77397: EMPTY
77398: LIST
77399: LIST
77400: PUSH
77401: LD_INT 1
77403: PUSH
77404: LD_INT 0
77406: PUSH
77407: EMPTY
77408: LIST
77409: LIST
77410: PUSH
77411: LD_INT 1
77413: PUSH
77414: LD_INT 1
77416: PUSH
77417: EMPTY
77418: LIST
77419: LIST
77420: PUSH
77421: LD_INT 0
77423: PUSH
77424: LD_INT 1
77426: PUSH
77427: EMPTY
77428: LIST
77429: LIST
77430: PUSH
77431: LD_INT 1
77433: NEG
77434: PUSH
77435: LD_INT 0
77437: PUSH
77438: EMPTY
77439: LIST
77440: LIST
77441: PUSH
77442: LD_INT 1
77444: NEG
77445: PUSH
77446: LD_INT 1
77448: NEG
77449: PUSH
77450: EMPTY
77451: LIST
77452: LIST
77453: PUSH
77454: LD_INT 2
77456: PUSH
77457: LD_INT 1
77459: PUSH
77460: EMPTY
77461: LIST
77462: LIST
77463: PUSH
77464: LD_INT 2
77466: PUSH
77467: LD_INT 2
77469: PUSH
77470: EMPTY
77471: LIST
77472: LIST
77473: PUSH
77474: LD_INT 1
77476: PUSH
77477: LD_INT 2
77479: PUSH
77480: EMPTY
77481: LIST
77482: LIST
77483: PUSH
77484: LD_INT 0
77486: PUSH
77487: LD_INT 2
77489: PUSH
77490: EMPTY
77491: LIST
77492: LIST
77493: PUSH
77494: LD_INT 1
77496: NEG
77497: PUSH
77498: LD_INT 1
77500: PUSH
77501: EMPTY
77502: LIST
77503: LIST
77504: PUSH
77505: EMPTY
77506: LIST
77507: LIST
77508: LIST
77509: LIST
77510: LIST
77511: LIST
77512: LIST
77513: LIST
77514: LIST
77515: LIST
77516: LIST
77517: LIST
77518: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
77519: LD_ADDR_VAR 0 51
77523: PUSH
77524: LD_INT 0
77526: PUSH
77527: LD_INT 0
77529: PUSH
77530: EMPTY
77531: LIST
77532: LIST
77533: PUSH
77534: LD_INT 0
77536: PUSH
77537: LD_INT 1
77539: NEG
77540: PUSH
77541: EMPTY
77542: LIST
77543: LIST
77544: PUSH
77545: LD_INT 1
77547: PUSH
77548: LD_INT 0
77550: PUSH
77551: EMPTY
77552: LIST
77553: LIST
77554: PUSH
77555: LD_INT 1
77557: PUSH
77558: LD_INT 1
77560: PUSH
77561: EMPTY
77562: LIST
77563: LIST
77564: PUSH
77565: LD_INT 0
77567: PUSH
77568: LD_INT 1
77570: PUSH
77571: EMPTY
77572: LIST
77573: LIST
77574: PUSH
77575: LD_INT 1
77577: NEG
77578: PUSH
77579: LD_INT 0
77581: PUSH
77582: EMPTY
77583: LIST
77584: LIST
77585: PUSH
77586: LD_INT 1
77588: NEG
77589: PUSH
77590: LD_INT 1
77592: NEG
77593: PUSH
77594: EMPTY
77595: LIST
77596: LIST
77597: PUSH
77598: LD_INT 1
77600: PUSH
77601: LD_INT 2
77603: PUSH
77604: EMPTY
77605: LIST
77606: LIST
77607: PUSH
77608: LD_INT 0
77610: PUSH
77611: LD_INT 2
77613: PUSH
77614: EMPTY
77615: LIST
77616: LIST
77617: PUSH
77618: LD_INT 1
77620: NEG
77621: PUSH
77622: LD_INT 1
77624: PUSH
77625: EMPTY
77626: LIST
77627: LIST
77628: PUSH
77629: LD_INT 2
77631: NEG
77632: PUSH
77633: LD_INT 0
77635: PUSH
77636: EMPTY
77637: LIST
77638: LIST
77639: PUSH
77640: LD_INT 2
77642: NEG
77643: PUSH
77644: LD_INT 1
77646: NEG
77647: PUSH
77648: EMPTY
77649: LIST
77650: LIST
77651: PUSH
77652: EMPTY
77653: LIST
77654: LIST
77655: LIST
77656: LIST
77657: LIST
77658: LIST
77659: LIST
77660: LIST
77661: LIST
77662: LIST
77663: LIST
77664: LIST
77665: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
77666: LD_ADDR_VAR 0 52
77670: PUSH
77671: LD_INT 0
77673: PUSH
77674: LD_INT 0
77676: PUSH
77677: EMPTY
77678: LIST
77679: LIST
77680: PUSH
77681: LD_INT 0
77683: PUSH
77684: LD_INT 1
77686: NEG
77687: PUSH
77688: EMPTY
77689: LIST
77690: LIST
77691: PUSH
77692: LD_INT 1
77694: PUSH
77695: LD_INT 0
77697: PUSH
77698: EMPTY
77699: LIST
77700: LIST
77701: PUSH
77702: LD_INT 1
77704: PUSH
77705: LD_INT 1
77707: PUSH
77708: EMPTY
77709: LIST
77710: LIST
77711: PUSH
77712: LD_INT 0
77714: PUSH
77715: LD_INT 1
77717: PUSH
77718: EMPTY
77719: LIST
77720: LIST
77721: PUSH
77722: LD_INT 1
77724: NEG
77725: PUSH
77726: LD_INT 0
77728: PUSH
77729: EMPTY
77730: LIST
77731: LIST
77732: PUSH
77733: LD_INT 1
77735: NEG
77736: PUSH
77737: LD_INT 1
77739: NEG
77740: PUSH
77741: EMPTY
77742: LIST
77743: LIST
77744: PUSH
77745: LD_INT 1
77747: NEG
77748: PUSH
77749: LD_INT 2
77751: NEG
77752: PUSH
77753: EMPTY
77754: LIST
77755: LIST
77756: PUSH
77757: LD_INT 1
77759: NEG
77760: PUSH
77761: LD_INT 1
77763: PUSH
77764: EMPTY
77765: LIST
77766: LIST
77767: PUSH
77768: LD_INT 2
77770: NEG
77771: PUSH
77772: LD_INT 0
77774: PUSH
77775: EMPTY
77776: LIST
77777: LIST
77778: PUSH
77779: LD_INT 2
77781: NEG
77782: PUSH
77783: LD_INT 1
77785: NEG
77786: PUSH
77787: EMPTY
77788: LIST
77789: LIST
77790: PUSH
77791: LD_INT 2
77793: NEG
77794: PUSH
77795: LD_INT 2
77797: NEG
77798: PUSH
77799: EMPTY
77800: LIST
77801: LIST
77802: PUSH
77803: EMPTY
77804: LIST
77805: LIST
77806: LIST
77807: LIST
77808: LIST
77809: LIST
77810: LIST
77811: LIST
77812: LIST
77813: LIST
77814: LIST
77815: LIST
77816: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
77817: LD_ADDR_VAR 0 53
77821: PUSH
77822: LD_INT 0
77824: PUSH
77825: LD_INT 0
77827: PUSH
77828: EMPTY
77829: LIST
77830: LIST
77831: PUSH
77832: LD_INT 0
77834: PUSH
77835: LD_INT 1
77837: NEG
77838: PUSH
77839: EMPTY
77840: LIST
77841: LIST
77842: PUSH
77843: LD_INT 1
77845: PUSH
77846: LD_INT 0
77848: PUSH
77849: EMPTY
77850: LIST
77851: LIST
77852: PUSH
77853: LD_INT 1
77855: PUSH
77856: LD_INT 1
77858: PUSH
77859: EMPTY
77860: LIST
77861: LIST
77862: PUSH
77863: LD_INT 0
77865: PUSH
77866: LD_INT 1
77868: PUSH
77869: EMPTY
77870: LIST
77871: LIST
77872: PUSH
77873: LD_INT 1
77875: NEG
77876: PUSH
77877: LD_INT 0
77879: PUSH
77880: EMPTY
77881: LIST
77882: LIST
77883: PUSH
77884: LD_INT 1
77886: NEG
77887: PUSH
77888: LD_INT 1
77890: NEG
77891: PUSH
77892: EMPTY
77893: LIST
77894: LIST
77895: PUSH
77896: LD_INT 1
77898: NEG
77899: PUSH
77900: LD_INT 2
77902: NEG
77903: PUSH
77904: EMPTY
77905: LIST
77906: LIST
77907: PUSH
77908: LD_INT 0
77910: PUSH
77911: LD_INT 2
77913: NEG
77914: PUSH
77915: EMPTY
77916: LIST
77917: LIST
77918: PUSH
77919: LD_INT 1
77921: PUSH
77922: LD_INT 1
77924: NEG
77925: PUSH
77926: EMPTY
77927: LIST
77928: LIST
77929: PUSH
77930: LD_INT 2
77932: PUSH
77933: LD_INT 0
77935: PUSH
77936: EMPTY
77937: LIST
77938: LIST
77939: PUSH
77940: LD_INT 2
77942: PUSH
77943: LD_INT 1
77945: PUSH
77946: EMPTY
77947: LIST
77948: LIST
77949: PUSH
77950: LD_INT 2
77952: PUSH
77953: LD_INT 2
77955: PUSH
77956: EMPTY
77957: LIST
77958: LIST
77959: PUSH
77960: LD_INT 1
77962: PUSH
77963: LD_INT 2
77965: PUSH
77966: EMPTY
77967: LIST
77968: LIST
77969: PUSH
77970: LD_INT 0
77972: PUSH
77973: LD_INT 2
77975: PUSH
77976: EMPTY
77977: LIST
77978: LIST
77979: PUSH
77980: LD_INT 1
77982: NEG
77983: PUSH
77984: LD_INT 1
77986: PUSH
77987: EMPTY
77988: LIST
77989: LIST
77990: PUSH
77991: LD_INT 2
77993: NEG
77994: PUSH
77995: LD_INT 0
77997: PUSH
77998: EMPTY
77999: LIST
78000: LIST
78001: PUSH
78002: LD_INT 2
78004: NEG
78005: PUSH
78006: LD_INT 1
78008: NEG
78009: PUSH
78010: EMPTY
78011: LIST
78012: LIST
78013: PUSH
78014: LD_INT 2
78016: NEG
78017: PUSH
78018: LD_INT 2
78020: NEG
78021: PUSH
78022: EMPTY
78023: LIST
78024: LIST
78025: PUSH
78026: EMPTY
78027: LIST
78028: LIST
78029: LIST
78030: LIST
78031: LIST
78032: LIST
78033: LIST
78034: LIST
78035: LIST
78036: LIST
78037: LIST
78038: LIST
78039: LIST
78040: LIST
78041: LIST
78042: LIST
78043: LIST
78044: LIST
78045: LIST
78046: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78047: LD_ADDR_VAR 0 54
78051: PUSH
78052: LD_INT 0
78054: PUSH
78055: LD_INT 0
78057: PUSH
78058: EMPTY
78059: LIST
78060: LIST
78061: PUSH
78062: LD_INT 0
78064: PUSH
78065: LD_INT 1
78067: NEG
78068: PUSH
78069: EMPTY
78070: LIST
78071: LIST
78072: PUSH
78073: LD_INT 1
78075: PUSH
78076: LD_INT 0
78078: PUSH
78079: EMPTY
78080: LIST
78081: LIST
78082: PUSH
78083: LD_INT 1
78085: PUSH
78086: LD_INT 1
78088: PUSH
78089: EMPTY
78090: LIST
78091: LIST
78092: PUSH
78093: LD_INT 0
78095: PUSH
78096: LD_INT 1
78098: PUSH
78099: EMPTY
78100: LIST
78101: LIST
78102: PUSH
78103: LD_INT 1
78105: NEG
78106: PUSH
78107: LD_INT 0
78109: PUSH
78110: EMPTY
78111: LIST
78112: LIST
78113: PUSH
78114: LD_INT 1
78116: NEG
78117: PUSH
78118: LD_INT 1
78120: NEG
78121: PUSH
78122: EMPTY
78123: LIST
78124: LIST
78125: PUSH
78126: LD_INT 1
78128: NEG
78129: PUSH
78130: LD_INT 2
78132: NEG
78133: PUSH
78134: EMPTY
78135: LIST
78136: LIST
78137: PUSH
78138: LD_INT 0
78140: PUSH
78141: LD_INT 2
78143: NEG
78144: PUSH
78145: EMPTY
78146: LIST
78147: LIST
78148: PUSH
78149: LD_INT 1
78151: PUSH
78152: LD_INT 1
78154: NEG
78155: PUSH
78156: EMPTY
78157: LIST
78158: LIST
78159: PUSH
78160: LD_INT 2
78162: PUSH
78163: LD_INT 0
78165: PUSH
78166: EMPTY
78167: LIST
78168: LIST
78169: PUSH
78170: LD_INT 2
78172: PUSH
78173: LD_INT 1
78175: PUSH
78176: EMPTY
78177: LIST
78178: LIST
78179: PUSH
78180: LD_INT 2
78182: PUSH
78183: LD_INT 2
78185: PUSH
78186: EMPTY
78187: LIST
78188: LIST
78189: PUSH
78190: LD_INT 1
78192: PUSH
78193: LD_INT 2
78195: PUSH
78196: EMPTY
78197: LIST
78198: LIST
78199: PUSH
78200: LD_INT 0
78202: PUSH
78203: LD_INT 2
78205: PUSH
78206: EMPTY
78207: LIST
78208: LIST
78209: PUSH
78210: LD_INT 1
78212: NEG
78213: PUSH
78214: LD_INT 1
78216: PUSH
78217: EMPTY
78218: LIST
78219: LIST
78220: PUSH
78221: LD_INT 2
78223: NEG
78224: PUSH
78225: LD_INT 0
78227: PUSH
78228: EMPTY
78229: LIST
78230: LIST
78231: PUSH
78232: LD_INT 2
78234: NEG
78235: PUSH
78236: LD_INT 1
78238: NEG
78239: PUSH
78240: EMPTY
78241: LIST
78242: LIST
78243: PUSH
78244: LD_INT 2
78246: NEG
78247: PUSH
78248: LD_INT 2
78250: NEG
78251: PUSH
78252: EMPTY
78253: LIST
78254: LIST
78255: PUSH
78256: EMPTY
78257: LIST
78258: LIST
78259: LIST
78260: LIST
78261: LIST
78262: LIST
78263: LIST
78264: LIST
78265: LIST
78266: LIST
78267: LIST
78268: LIST
78269: LIST
78270: LIST
78271: LIST
78272: LIST
78273: LIST
78274: LIST
78275: LIST
78276: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78277: LD_ADDR_VAR 0 55
78281: PUSH
78282: LD_INT 0
78284: PUSH
78285: LD_INT 0
78287: PUSH
78288: EMPTY
78289: LIST
78290: LIST
78291: PUSH
78292: LD_INT 0
78294: PUSH
78295: LD_INT 1
78297: NEG
78298: PUSH
78299: EMPTY
78300: LIST
78301: LIST
78302: PUSH
78303: LD_INT 1
78305: PUSH
78306: LD_INT 0
78308: PUSH
78309: EMPTY
78310: LIST
78311: LIST
78312: PUSH
78313: LD_INT 1
78315: PUSH
78316: LD_INT 1
78318: PUSH
78319: EMPTY
78320: LIST
78321: LIST
78322: PUSH
78323: LD_INT 0
78325: PUSH
78326: LD_INT 1
78328: PUSH
78329: EMPTY
78330: LIST
78331: LIST
78332: PUSH
78333: LD_INT 1
78335: NEG
78336: PUSH
78337: LD_INT 0
78339: PUSH
78340: EMPTY
78341: LIST
78342: LIST
78343: PUSH
78344: LD_INT 1
78346: NEG
78347: PUSH
78348: LD_INT 1
78350: NEG
78351: PUSH
78352: EMPTY
78353: LIST
78354: LIST
78355: PUSH
78356: LD_INT 1
78358: NEG
78359: PUSH
78360: LD_INT 2
78362: NEG
78363: PUSH
78364: EMPTY
78365: LIST
78366: LIST
78367: PUSH
78368: LD_INT 0
78370: PUSH
78371: LD_INT 2
78373: NEG
78374: PUSH
78375: EMPTY
78376: LIST
78377: LIST
78378: PUSH
78379: LD_INT 1
78381: PUSH
78382: LD_INT 1
78384: NEG
78385: PUSH
78386: EMPTY
78387: LIST
78388: LIST
78389: PUSH
78390: LD_INT 2
78392: PUSH
78393: LD_INT 0
78395: PUSH
78396: EMPTY
78397: LIST
78398: LIST
78399: PUSH
78400: LD_INT 2
78402: PUSH
78403: LD_INT 1
78405: PUSH
78406: EMPTY
78407: LIST
78408: LIST
78409: PUSH
78410: LD_INT 2
78412: PUSH
78413: LD_INT 2
78415: PUSH
78416: EMPTY
78417: LIST
78418: LIST
78419: PUSH
78420: LD_INT 1
78422: PUSH
78423: LD_INT 2
78425: PUSH
78426: EMPTY
78427: LIST
78428: LIST
78429: PUSH
78430: LD_INT 0
78432: PUSH
78433: LD_INT 2
78435: PUSH
78436: EMPTY
78437: LIST
78438: LIST
78439: PUSH
78440: LD_INT 1
78442: NEG
78443: PUSH
78444: LD_INT 1
78446: PUSH
78447: EMPTY
78448: LIST
78449: LIST
78450: PUSH
78451: LD_INT 2
78453: NEG
78454: PUSH
78455: LD_INT 0
78457: PUSH
78458: EMPTY
78459: LIST
78460: LIST
78461: PUSH
78462: LD_INT 2
78464: NEG
78465: PUSH
78466: LD_INT 1
78468: NEG
78469: PUSH
78470: EMPTY
78471: LIST
78472: LIST
78473: PUSH
78474: LD_INT 2
78476: NEG
78477: PUSH
78478: LD_INT 2
78480: NEG
78481: PUSH
78482: EMPTY
78483: LIST
78484: LIST
78485: PUSH
78486: EMPTY
78487: LIST
78488: LIST
78489: LIST
78490: LIST
78491: LIST
78492: LIST
78493: LIST
78494: LIST
78495: LIST
78496: LIST
78497: LIST
78498: LIST
78499: LIST
78500: LIST
78501: LIST
78502: LIST
78503: LIST
78504: LIST
78505: LIST
78506: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78507: LD_ADDR_VAR 0 56
78511: PUSH
78512: LD_INT 0
78514: PUSH
78515: LD_INT 0
78517: PUSH
78518: EMPTY
78519: LIST
78520: LIST
78521: PUSH
78522: LD_INT 0
78524: PUSH
78525: LD_INT 1
78527: NEG
78528: PUSH
78529: EMPTY
78530: LIST
78531: LIST
78532: PUSH
78533: LD_INT 1
78535: PUSH
78536: LD_INT 0
78538: PUSH
78539: EMPTY
78540: LIST
78541: LIST
78542: PUSH
78543: LD_INT 1
78545: PUSH
78546: LD_INT 1
78548: PUSH
78549: EMPTY
78550: LIST
78551: LIST
78552: PUSH
78553: LD_INT 0
78555: PUSH
78556: LD_INT 1
78558: PUSH
78559: EMPTY
78560: LIST
78561: LIST
78562: PUSH
78563: LD_INT 1
78565: NEG
78566: PUSH
78567: LD_INT 0
78569: PUSH
78570: EMPTY
78571: LIST
78572: LIST
78573: PUSH
78574: LD_INT 1
78576: NEG
78577: PUSH
78578: LD_INT 1
78580: NEG
78581: PUSH
78582: EMPTY
78583: LIST
78584: LIST
78585: PUSH
78586: LD_INT 1
78588: NEG
78589: PUSH
78590: LD_INT 2
78592: NEG
78593: PUSH
78594: EMPTY
78595: LIST
78596: LIST
78597: PUSH
78598: LD_INT 0
78600: PUSH
78601: LD_INT 2
78603: NEG
78604: PUSH
78605: EMPTY
78606: LIST
78607: LIST
78608: PUSH
78609: LD_INT 1
78611: PUSH
78612: LD_INT 1
78614: NEG
78615: PUSH
78616: EMPTY
78617: LIST
78618: LIST
78619: PUSH
78620: LD_INT 2
78622: PUSH
78623: LD_INT 0
78625: PUSH
78626: EMPTY
78627: LIST
78628: LIST
78629: PUSH
78630: LD_INT 2
78632: PUSH
78633: LD_INT 1
78635: PUSH
78636: EMPTY
78637: LIST
78638: LIST
78639: PUSH
78640: LD_INT 2
78642: PUSH
78643: LD_INT 2
78645: PUSH
78646: EMPTY
78647: LIST
78648: LIST
78649: PUSH
78650: LD_INT 1
78652: PUSH
78653: LD_INT 2
78655: PUSH
78656: EMPTY
78657: LIST
78658: LIST
78659: PUSH
78660: LD_INT 0
78662: PUSH
78663: LD_INT 2
78665: PUSH
78666: EMPTY
78667: LIST
78668: LIST
78669: PUSH
78670: LD_INT 1
78672: NEG
78673: PUSH
78674: LD_INT 1
78676: PUSH
78677: EMPTY
78678: LIST
78679: LIST
78680: PUSH
78681: LD_INT 2
78683: NEG
78684: PUSH
78685: LD_INT 0
78687: PUSH
78688: EMPTY
78689: LIST
78690: LIST
78691: PUSH
78692: LD_INT 2
78694: NEG
78695: PUSH
78696: LD_INT 1
78698: NEG
78699: PUSH
78700: EMPTY
78701: LIST
78702: LIST
78703: PUSH
78704: LD_INT 2
78706: NEG
78707: PUSH
78708: LD_INT 2
78710: NEG
78711: PUSH
78712: EMPTY
78713: LIST
78714: LIST
78715: PUSH
78716: EMPTY
78717: LIST
78718: LIST
78719: LIST
78720: LIST
78721: LIST
78722: LIST
78723: LIST
78724: LIST
78725: LIST
78726: LIST
78727: LIST
78728: LIST
78729: LIST
78730: LIST
78731: LIST
78732: LIST
78733: LIST
78734: LIST
78735: LIST
78736: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78737: LD_ADDR_VAR 0 57
78741: PUSH
78742: LD_INT 0
78744: PUSH
78745: LD_INT 0
78747: PUSH
78748: EMPTY
78749: LIST
78750: LIST
78751: PUSH
78752: LD_INT 0
78754: PUSH
78755: LD_INT 1
78757: NEG
78758: PUSH
78759: EMPTY
78760: LIST
78761: LIST
78762: PUSH
78763: LD_INT 1
78765: PUSH
78766: LD_INT 0
78768: PUSH
78769: EMPTY
78770: LIST
78771: LIST
78772: PUSH
78773: LD_INT 1
78775: PUSH
78776: LD_INT 1
78778: PUSH
78779: EMPTY
78780: LIST
78781: LIST
78782: PUSH
78783: LD_INT 0
78785: PUSH
78786: LD_INT 1
78788: PUSH
78789: EMPTY
78790: LIST
78791: LIST
78792: PUSH
78793: LD_INT 1
78795: NEG
78796: PUSH
78797: LD_INT 0
78799: PUSH
78800: EMPTY
78801: LIST
78802: LIST
78803: PUSH
78804: LD_INT 1
78806: NEG
78807: PUSH
78808: LD_INT 1
78810: NEG
78811: PUSH
78812: EMPTY
78813: LIST
78814: LIST
78815: PUSH
78816: LD_INT 1
78818: NEG
78819: PUSH
78820: LD_INT 2
78822: NEG
78823: PUSH
78824: EMPTY
78825: LIST
78826: LIST
78827: PUSH
78828: LD_INT 0
78830: PUSH
78831: LD_INT 2
78833: NEG
78834: PUSH
78835: EMPTY
78836: LIST
78837: LIST
78838: PUSH
78839: LD_INT 1
78841: PUSH
78842: LD_INT 1
78844: NEG
78845: PUSH
78846: EMPTY
78847: LIST
78848: LIST
78849: PUSH
78850: LD_INT 2
78852: PUSH
78853: LD_INT 0
78855: PUSH
78856: EMPTY
78857: LIST
78858: LIST
78859: PUSH
78860: LD_INT 2
78862: PUSH
78863: LD_INT 1
78865: PUSH
78866: EMPTY
78867: LIST
78868: LIST
78869: PUSH
78870: LD_INT 2
78872: PUSH
78873: LD_INT 2
78875: PUSH
78876: EMPTY
78877: LIST
78878: LIST
78879: PUSH
78880: LD_INT 1
78882: PUSH
78883: LD_INT 2
78885: PUSH
78886: EMPTY
78887: LIST
78888: LIST
78889: PUSH
78890: LD_INT 0
78892: PUSH
78893: LD_INT 2
78895: PUSH
78896: EMPTY
78897: LIST
78898: LIST
78899: PUSH
78900: LD_INT 1
78902: NEG
78903: PUSH
78904: LD_INT 1
78906: PUSH
78907: EMPTY
78908: LIST
78909: LIST
78910: PUSH
78911: LD_INT 2
78913: NEG
78914: PUSH
78915: LD_INT 0
78917: PUSH
78918: EMPTY
78919: LIST
78920: LIST
78921: PUSH
78922: LD_INT 2
78924: NEG
78925: PUSH
78926: LD_INT 1
78928: NEG
78929: PUSH
78930: EMPTY
78931: LIST
78932: LIST
78933: PUSH
78934: LD_INT 2
78936: NEG
78937: PUSH
78938: LD_INT 2
78940: NEG
78941: PUSH
78942: EMPTY
78943: LIST
78944: LIST
78945: PUSH
78946: EMPTY
78947: LIST
78948: LIST
78949: LIST
78950: LIST
78951: LIST
78952: LIST
78953: LIST
78954: LIST
78955: LIST
78956: LIST
78957: LIST
78958: LIST
78959: LIST
78960: LIST
78961: LIST
78962: LIST
78963: LIST
78964: LIST
78965: LIST
78966: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78967: LD_ADDR_VAR 0 58
78971: PUSH
78972: LD_INT 0
78974: PUSH
78975: LD_INT 0
78977: PUSH
78978: EMPTY
78979: LIST
78980: LIST
78981: PUSH
78982: LD_INT 0
78984: PUSH
78985: LD_INT 1
78987: NEG
78988: PUSH
78989: EMPTY
78990: LIST
78991: LIST
78992: PUSH
78993: LD_INT 1
78995: PUSH
78996: LD_INT 0
78998: PUSH
78999: EMPTY
79000: LIST
79001: LIST
79002: PUSH
79003: LD_INT 1
79005: PUSH
79006: LD_INT 1
79008: PUSH
79009: EMPTY
79010: LIST
79011: LIST
79012: PUSH
79013: LD_INT 0
79015: PUSH
79016: LD_INT 1
79018: PUSH
79019: EMPTY
79020: LIST
79021: LIST
79022: PUSH
79023: LD_INT 1
79025: NEG
79026: PUSH
79027: LD_INT 0
79029: PUSH
79030: EMPTY
79031: LIST
79032: LIST
79033: PUSH
79034: LD_INT 1
79036: NEG
79037: PUSH
79038: LD_INT 1
79040: NEG
79041: PUSH
79042: EMPTY
79043: LIST
79044: LIST
79045: PUSH
79046: LD_INT 1
79048: NEG
79049: PUSH
79050: LD_INT 2
79052: NEG
79053: PUSH
79054: EMPTY
79055: LIST
79056: LIST
79057: PUSH
79058: LD_INT 0
79060: PUSH
79061: LD_INT 2
79063: NEG
79064: PUSH
79065: EMPTY
79066: LIST
79067: LIST
79068: PUSH
79069: LD_INT 1
79071: PUSH
79072: LD_INT 1
79074: NEG
79075: PUSH
79076: EMPTY
79077: LIST
79078: LIST
79079: PUSH
79080: LD_INT 2
79082: PUSH
79083: LD_INT 0
79085: PUSH
79086: EMPTY
79087: LIST
79088: LIST
79089: PUSH
79090: LD_INT 2
79092: PUSH
79093: LD_INT 1
79095: PUSH
79096: EMPTY
79097: LIST
79098: LIST
79099: PUSH
79100: LD_INT 2
79102: PUSH
79103: LD_INT 2
79105: PUSH
79106: EMPTY
79107: LIST
79108: LIST
79109: PUSH
79110: LD_INT 1
79112: PUSH
79113: LD_INT 2
79115: PUSH
79116: EMPTY
79117: LIST
79118: LIST
79119: PUSH
79120: LD_INT 0
79122: PUSH
79123: LD_INT 2
79125: PUSH
79126: EMPTY
79127: LIST
79128: LIST
79129: PUSH
79130: LD_INT 1
79132: NEG
79133: PUSH
79134: LD_INT 1
79136: PUSH
79137: EMPTY
79138: LIST
79139: LIST
79140: PUSH
79141: LD_INT 2
79143: NEG
79144: PUSH
79145: LD_INT 0
79147: PUSH
79148: EMPTY
79149: LIST
79150: LIST
79151: PUSH
79152: LD_INT 2
79154: NEG
79155: PUSH
79156: LD_INT 1
79158: NEG
79159: PUSH
79160: EMPTY
79161: LIST
79162: LIST
79163: PUSH
79164: LD_INT 2
79166: NEG
79167: PUSH
79168: LD_INT 2
79170: NEG
79171: PUSH
79172: EMPTY
79173: LIST
79174: LIST
79175: PUSH
79176: EMPTY
79177: LIST
79178: LIST
79179: LIST
79180: LIST
79181: LIST
79182: LIST
79183: LIST
79184: LIST
79185: LIST
79186: LIST
79187: LIST
79188: LIST
79189: LIST
79190: LIST
79191: LIST
79192: LIST
79193: LIST
79194: LIST
79195: LIST
79196: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
79197: LD_ADDR_VAR 0 59
79201: PUSH
79202: LD_INT 0
79204: PUSH
79205: LD_INT 0
79207: PUSH
79208: EMPTY
79209: LIST
79210: LIST
79211: PUSH
79212: LD_INT 0
79214: PUSH
79215: LD_INT 1
79217: NEG
79218: PUSH
79219: EMPTY
79220: LIST
79221: LIST
79222: PUSH
79223: LD_INT 1
79225: PUSH
79226: LD_INT 0
79228: PUSH
79229: EMPTY
79230: LIST
79231: LIST
79232: PUSH
79233: LD_INT 1
79235: PUSH
79236: LD_INT 1
79238: PUSH
79239: EMPTY
79240: LIST
79241: LIST
79242: PUSH
79243: LD_INT 0
79245: PUSH
79246: LD_INT 1
79248: PUSH
79249: EMPTY
79250: LIST
79251: LIST
79252: PUSH
79253: LD_INT 1
79255: NEG
79256: PUSH
79257: LD_INT 0
79259: PUSH
79260: EMPTY
79261: LIST
79262: LIST
79263: PUSH
79264: LD_INT 1
79266: NEG
79267: PUSH
79268: LD_INT 1
79270: NEG
79271: PUSH
79272: EMPTY
79273: LIST
79274: LIST
79275: PUSH
79276: EMPTY
79277: LIST
79278: LIST
79279: LIST
79280: LIST
79281: LIST
79282: LIST
79283: LIST
79284: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
79285: LD_ADDR_VAR 0 60
79289: PUSH
79290: LD_INT 0
79292: PUSH
79293: LD_INT 0
79295: PUSH
79296: EMPTY
79297: LIST
79298: LIST
79299: PUSH
79300: LD_INT 0
79302: PUSH
79303: LD_INT 1
79305: NEG
79306: PUSH
79307: EMPTY
79308: LIST
79309: LIST
79310: PUSH
79311: LD_INT 1
79313: PUSH
79314: LD_INT 0
79316: PUSH
79317: EMPTY
79318: LIST
79319: LIST
79320: PUSH
79321: LD_INT 1
79323: PUSH
79324: LD_INT 1
79326: PUSH
79327: EMPTY
79328: LIST
79329: LIST
79330: PUSH
79331: LD_INT 0
79333: PUSH
79334: LD_INT 1
79336: PUSH
79337: EMPTY
79338: LIST
79339: LIST
79340: PUSH
79341: LD_INT 1
79343: NEG
79344: PUSH
79345: LD_INT 0
79347: PUSH
79348: EMPTY
79349: LIST
79350: LIST
79351: PUSH
79352: LD_INT 1
79354: NEG
79355: PUSH
79356: LD_INT 1
79358: NEG
79359: PUSH
79360: EMPTY
79361: LIST
79362: LIST
79363: PUSH
79364: EMPTY
79365: LIST
79366: LIST
79367: LIST
79368: LIST
79369: LIST
79370: LIST
79371: LIST
79372: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
79373: LD_ADDR_VAR 0 61
79377: PUSH
79378: LD_INT 0
79380: PUSH
79381: LD_INT 0
79383: PUSH
79384: EMPTY
79385: LIST
79386: LIST
79387: PUSH
79388: LD_INT 0
79390: PUSH
79391: LD_INT 1
79393: NEG
79394: PUSH
79395: EMPTY
79396: LIST
79397: LIST
79398: PUSH
79399: LD_INT 1
79401: PUSH
79402: LD_INT 0
79404: PUSH
79405: EMPTY
79406: LIST
79407: LIST
79408: PUSH
79409: LD_INT 1
79411: PUSH
79412: LD_INT 1
79414: PUSH
79415: EMPTY
79416: LIST
79417: LIST
79418: PUSH
79419: LD_INT 0
79421: PUSH
79422: LD_INT 1
79424: PUSH
79425: EMPTY
79426: LIST
79427: LIST
79428: PUSH
79429: LD_INT 1
79431: NEG
79432: PUSH
79433: LD_INT 0
79435: PUSH
79436: EMPTY
79437: LIST
79438: LIST
79439: PUSH
79440: LD_INT 1
79442: NEG
79443: PUSH
79444: LD_INT 1
79446: NEG
79447: PUSH
79448: EMPTY
79449: LIST
79450: LIST
79451: PUSH
79452: EMPTY
79453: LIST
79454: LIST
79455: LIST
79456: LIST
79457: LIST
79458: LIST
79459: LIST
79460: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
79461: LD_ADDR_VAR 0 62
79465: PUSH
79466: LD_INT 0
79468: PUSH
79469: LD_INT 0
79471: PUSH
79472: EMPTY
79473: LIST
79474: LIST
79475: PUSH
79476: LD_INT 0
79478: PUSH
79479: LD_INT 1
79481: NEG
79482: PUSH
79483: EMPTY
79484: LIST
79485: LIST
79486: PUSH
79487: LD_INT 1
79489: PUSH
79490: LD_INT 0
79492: PUSH
79493: EMPTY
79494: LIST
79495: LIST
79496: PUSH
79497: LD_INT 1
79499: PUSH
79500: LD_INT 1
79502: PUSH
79503: EMPTY
79504: LIST
79505: LIST
79506: PUSH
79507: LD_INT 0
79509: PUSH
79510: LD_INT 1
79512: PUSH
79513: EMPTY
79514: LIST
79515: LIST
79516: PUSH
79517: LD_INT 1
79519: NEG
79520: PUSH
79521: LD_INT 0
79523: PUSH
79524: EMPTY
79525: LIST
79526: LIST
79527: PUSH
79528: LD_INT 1
79530: NEG
79531: PUSH
79532: LD_INT 1
79534: NEG
79535: PUSH
79536: EMPTY
79537: LIST
79538: LIST
79539: PUSH
79540: EMPTY
79541: LIST
79542: LIST
79543: LIST
79544: LIST
79545: LIST
79546: LIST
79547: LIST
79548: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
79549: LD_ADDR_VAR 0 63
79553: PUSH
79554: LD_INT 0
79556: PUSH
79557: LD_INT 0
79559: PUSH
79560: EMPTY
79561: LIST
79562: LIST
79563: PUSH
79564: LD_INT 0
79566: PUSH
79567: LD_INT 1
79569: NEG
79570: PUSH
79571: EMPTY
79572: LIST
79573: LIST
79574: PUSH
79575: LD_INT 1
79577: PUSH
79578: LD_INT 0
79580: PUSH
79581: EMPTY
79582: LIST
79583: LIST
79584: PUSH
79585: LD_INT 1
79587: PUSH
79588: LD_INT 1
79590: PUSH
79591: EMPTY
79592: LIST
79593: LIST
79594: PUSH
79595: LD_INT 0
79597: PUSH
79598: LD_INT 1
79600: PUSH
79601: EMPTY
79602: LIST
79603: LIST
79604: PUSH
79605: LD_INT 1
79607: NEG
79608: PUSH
79609: LD_INT 0
79611: PUSH
79612: EMPTY
79613: LIST
79614: LIST
79615: PUSH
79616: LD_INT 1
79618: NEG
79619: PUSH
79620: LD_INT 1
79622: NEG
79623: PUSH
79624: EMPTY
79625: LIST
79626: LIST
79627: PUSH
79628: EMPTY
79629: LIST
79630: LIST
79631: LIST
79632: LIST
79633: LIST
79634: LIST
79635: LIST
79636: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
79637: LD_ADDR_VAR 0 64
79641: PUSH
79642: LD_INT 0
79644: PUSH
79645: LD_INT 0
79647: PUSH
79648: EMPTY
79649: LIST
79650: LIST
79651: PUSH
79652: LD_INT 0
79654: PUSH
79655: LD_INT 1
79657: NEG
79658: PUSH
79659: EMPTY
79660: LIST
79661: LIST
79662: PUSH
79663: LD_INT 1
79665: PUSH
79666: LD_INT 0
79668: PUSH
79669: EMPTY
79670: LIST
79671: LIST
79672: PUSH
79673: LD_INT 1
79675: PUSH
79676: LD_INT 1
79678: PUSH
79679: EMPTY
79680: LIST
79681: LIST
79682: PUSH
79683: LD_INT 0
79685: PUSH
79686: LD_INT 1
79688: PUSH
79689: EMPTY
79690: LIST
79691: LIST
79692: PUSH
79693: LD_INT 1
79695: NEG
79696: PUSH
79697: LD_INT 0
79699: PUSH
79700: EMPTY
79701: LIST
79702: LIST
79703: PUSH
79704: LD_INT 1
79706: NEG
79707: PUSH
79708: LD_INT 1
79710: NEG
79711: PUSH
79712: EMPTY
79713: LIST
79714: LIST
79715: PUSH
79716: EMPTY
79717: LIST
79718: LIST
79719: LIST
79720: LIST
79721: LIST
79722: LIST
79723: LIST
79724: ST_TO_ADDR
// end ; 1 :
79725: GO 85622
79727: LD_INT 1
79729: DOUBLE
79730: EQUAL
79731: IFTRUE 79735
79733: GO 82358
79735: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
79736: LD_ADDR_VAR 0 11
79740: PUSH
79741: LD_INT 1
79743: NEG
79744: PUSH
79745: LD_INT 3
79747: NEG
79748: PUSH
79749: EMPTY
79750: LIST
79751: LIST
79752: PUSH
79753: LD_INT 0
79755: PUSH
79756: LD_INT 3
79758: NEG
79759: PUSH
79760: EMPTY
79761: LIST
79762: LIST
79763: PUSH
79764: LD_INT 1
79766: PUSH
79767: LD_INT 2
79769: NEG
79770: PUSH
79771: EMPTY
79772: LIST
79773: LIST
79774: PUSH
79775: EMPTY
79776: LIST
79777: LIST
79778: LIST
79779: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
79780: LD_ADDR_VAR 0 12
79784: PUSH
79785: LD_INT 2
79787: PUSH
79788: LD_INT 1
79790: NEG
79791: PUSH
79792: EMPTY
79793: LIST
79794: LIST
79795: PUSH
79796: LD_INT 3
79798: PUSH
79799: LD_INT 0
79801: PUSH
79802: EMPTY
79803: LIST
79804: LIST
79805: PUSH
79806: LD_INT 3
79808: PUSH
79809: LD_INT 1
79811: PUSH
79812: EMPTY
79813: LIST
79814: LIST
79815: PUSH
79816: EMPTY
79817: LIST
79818: LIST
79819: LIST
79820: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
79821: LD_ADDR_VAR 0 13
79825: PUSH
79826: LD_INT 3
79828: PUSH
79829: LD_INT 2
79831: PUSH
79832: EMPTY
79833: LIST
79834: LIST
79835: PUSH
79836: LD_INT 3
79838: PUSH
79839: LD_INT 3
79841: PUSH
79842: EMPTY
79843: LIST
79844: LIST
79845: PUSH
79846: LD_INT 2
79848: PUSH
79849: LD_INT 3
79851: PUSH
79852: EMPTY
79853: LIST
79854: LIST
79855: PUSH
79856: EMPTY
79857: LIST
79858: LIST
79859: LIST
79860: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
79861: LD_ADDR_VAR 0 14
79865: PUSH
79866: LD_INT 1
79868: PUSH
79869: LD_INT 3
79871: PUSH
79872: EMPTY
79873: LIST
79874: LIST
79875: PUSH
79876: LD_INT 0
79878: PUSH
79879: LD_INT 3
79881: PUSH
79882: EMPTY
79883: LIST
79884: LIST
79885: PUSH
79886: LD_INT 1
79888: NEG
79889: PUSH
79890: LD_INT 2
79892: PUSH
79893: EMPTY
79894: LIST
79895: LIST
79896: PUSH
79897: EMPTY
79898: LIST
79899: LIST
79900: LIST
79901: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
79902: LD_ADDR_VAR 0 15
79906: PUSH
79907: LD_INT 2
79909: NEG
79910: PUSH
79911: LD_INT 1
79913: PUSH
79914: EMPTY
79915: LIST
79916: LIST
79917: PUSH
79918: LD_INT 3
79920: NEG
79921: PUSH
79922: LD_INT 0
79924: PUSH
79925: EMPTY
79926: LIST
79927: LIST
79928: PUSH
79929: LD_INT 3
79931: NEG
79932: PUSH
79933: LD_INT 1
79935: NEG
79936: PUSH
79937: EMPTY
79938: LIST
79939: LIST
79940: PUSH
79941: EMPTY
79942: LIST
79943: LIST
79944: LIST
79945: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
79946: LD_ADDR_VAR 0 16
79950: PUSH
79951: LD_INT 2
79953: NEG
79954: PUSH
79955: LD_INT 3
79957: NEG
79958: PUSH
79959: EMPTY
79960: LIST
79961: LIST
79962: PUSH
79963: LD_INT 3
79965: NEG
79966: PUSH
79967: LD_INT 2
79969: NEG
79970: PUSH
79971: EMPTY
79972: LIST
79973: LIST
79974: PUSH
79975: LD_INT 3
79977: NEG
79978: PUSH
79979: LD_INT 3
79981: NEG
79982: PUSH
79983: EMPTY
79984: LIST
79985: LIST
79986: PUSH
79987: EMPTY
79988: LIST
79989: LIST
79990: LIST
79991: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
79992: LD_ADDR_VAR 0 17
79996: PUSH
79997: LD_INT 1
79999: NEG
80000: PUSH
80001: LD_INT 3
80003: NEG
80004: PUSH
80005: EMPTY
80006: LIST
80007: LIST
80008: PUSH
80009: LD_INT 0
80011: PUSH
80012: LD_INT 3
80014: NEG
80015: PUSH
80016: EMPTY
80017: LIST
80018: LIST
80019: PUSH
80020: LD_INT 1
80022: PUSH
80023: LD_INT 2
80025: NEG
80026: PUSH
80027: EMPTY
80028: LIST
80029: LIST
80030: PUSH
80031: EMPTY
80032: LIST
80033: LIST
80034: LIST
80035: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
80036: LD_ADDR_VAR 0 18
80040: PUSH
80041: LD_INT 2
80043: PUSH
80044: LD_INT 1
80046: NEG
80047: PUSH
80048: EMPTY
80049: LIST
80050: LIST
80051: PUSH
80052: LD_INT 3
80054: PUSH
80055: LD_INT 0
80057: PUSH
80058: EMPTY
80059: LIST
80060: LIST
80061: PUSH
80062: LD_INT 3
80064: PUSH
80065: LD_INT 1
80067: PUSH
80068: EMPTY
80069: LIST
80070: LIST
80071: PUSH
80072: EMPTY
80073: LIST
80074: LIST
80075: LIST
80076: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
80077: LD_ADDR_VAR 0 19
80081: PUSH
80082: LD_INT 3
80084: PUSH
80085: LD_INT 2
80087: PUSH
80088: EMPTY
80089: LIST
80090: LIST
80091: PUSH
80092: LD_INT 3
80094: PUSH
80095: LD_INT 3
80097: PUSH
80098: EMPTY
80099: LIST
80100: LIST
80101: PUSH
80102: LD_INT 2
80104: PUSH
80105: LD_INT 3
80107: PUSH
80108: EMPTY
80109: LIST
80110: LIST
80111: PUSH
80112: EMPTY
80113: LIST
80114: LIST
80115: LIST
80116: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
80117: LD_ADDR_VAR 0 20
80121: PUSH
80122: LD_INT 1
80124: PUSH
80125: LD_INT 3
80127: PUSH
80128: EMPTY
80129: LIST
80130: LIST
80131: PUSH
80132: LD_INT 0
80134: PUSH
80135: LD_INT 3
80137: PUSH
80138: EMPTY
80139: LIST
80140: LIST
80141: PUSH
80142: LD_INT 1
80144: NEG
80145: PUSH
80146: LD_INT 2
80148: PUSH
80149: EMPTY
80150: LIST
80151: LIST
80152: PUSH
80153: EMPTY
80154: LIST
80155: LIST
80156: LIST
80157: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
80158: LD_ADDR_VAR 0 21
80162: PUSH
80163: LD_INT 2
80165: NEG
80166: PUSH
80167: LD_INT 1
80169: PUSH
80170: EMPTY
80171: LIST
80172: LIST
80173: PUSH
80174: LD_INT 3
80176: NEG
80177: PUSH
80178: LD_INT 0
80180: PUSH
80181: EMPTY
80182: LIST
80183: LIST
80184: PUSH
80185: LD_INT 3
80187: NEG
80188: PUSH
80189: LD_INT 1
80191: NEG
80192: PUSH
80193: EMPTY
80194: LIST
80195: LIST
80196: PUSH
80197: EMPTY
80198: LIST
80199: LIST
80200: LIST
80201: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
80202: LD_ADDR_VAR 0 22
80206: PUSH
80207: LD_INT 2
80209: NEG
80210: PUSH
80211: LD_INT 3
80213: NEG
80214: PUSH
80215: EMPTY
80216: LIST
80217: LIST
80218: PUSH
80219: LD_INT 3
80221: NEG
80222: PUSH
80223: LD_INT 2
80225: NEG
80226: PUSH
80227: EMPTY
80228: LIST
80229: LIST
80230: PUSH
80231: LD_INT 3
80233: NEG
80234: PUSH
80235: LD_INT 3
80237: NEG
80238: PUSH
80239: EMPTY
80240: LIST
80241: LIST
80242: PUSH
80243: EMPTY
80244: LIST
80245: LIST
80246: LIST
80247: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
80248: LD_ADDR_VAR 0 23
80252: PUSH
80253: LD_INT 0
80255: PUSH
80256: LD_INT 3
80258: NEG
80259: PUSH
80260: EMPTY
80261: LIST
80262: LIST
80263: PUSH
80264: LD_INT 1
80266: NEG
80267: PUSH
80268: LD_INT 4
80270: NEG
80271: PUSH
80272: EMPTY
80273: LIST
80274: LIST
80275: PUSH
80276: LD_INT 1
80278: PUSH
80279: LD_INT 3
80281: NEG
80282: PUSH
80283: EMPTY
80284: LIST
80285: LIST
80286: PUSH
80287: EMPTY
80288: LIST
80289: LIST
80290: LIST
80291: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
80292: LD_ADDR_VAR 0 24
80296: PUSH
80297: LD_INT 3
80299: PUSH
80300: LD_INT 0
80302: PUSH
80303: EMPTY
80304: LIST
80305: LIST
80306: PUSH
80307: LD_INT 3
80309: PUSH
80310: LD_INT 1
80312: NEG
80313: PUSH
80314: EMPTY
80315: LIST
80316: LIST
80317: PUSH
80318: LD_INT 4
80320: PUSH
80321: LD_INT 1
80323: PUSH
80324: EMPTY
80325: LIST
80326: LIST
80327: PUSH
80328: EMPTY
80329: LIST
80330: LIST
80331: LIST
80332: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
80333: LD_ADDR_VAR 0 25
80337: PUSH
80338: LD_INT 3
80340: PUSH
80341: LD_INT 3
80343: PUSH
80344: EMPTY
80345: LIST
80346: LIST
80347: PUSH
80348: LD_INT 4
80350: PUSH
80351: LD_INT 3
80353: PUSH
80354: EMPTY
80355: LIST
80356: LIST
80357: PUSH
80358: LD_INT 3
80360: PUSH
80361: LD_INT 4
80363: PUSH
80364: EMPTY
80365: LIST
80366: LIST
80367: PUSH
80368: EMPTY
80369: LIST
80370: LIST
80371: LIST
80372: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
80373: LD_ADDR_VAR 0 26
80377: PUSH
80378: LD_INT 0
80380: PUSH
80381: LD_INT 3
80383: PUSH
80384: EMPTY
80385: LIST
80386: LIST
80387: PUSH
80388: LD_INT 1
80390: PUSH
80391: LD_INT 4
80393: PUSH
80394: EMPTY
80395: LIST
80396: LIST
80397: PUSH
80398: LD_INT 1
80400: NEG
80401: PUSH
80402: LD_INT 3
80404: PUSH
80405: EMPTY
80406: LIST
80407: LIST
80408: PUSH
80409: EMPTY
80410: LIST
80411: LIST
80412: LIST
80413: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
80414: LD_ADDR_VAR 0 27
80418: PUSH
80419: LD_INT 3
80421: NEG
80422: PUSH
80423: LD_INT 0
80425: PUSH
80426: EMPTY
80427: LIST
80428: LIST
80429: PUSH
80430: LD_INT 3
80432: NEG
80433: PUSH
80434: LD_INT 1
80436: PUSH
80437: EMPTY
80438: LIST
80439: LIST
80440: PUSH
80441: LD_INT 4
80443: NEG
80444: PUSH
80445: LD_INT 1
80447: NEG
80448: PUSH
80449: EMPTY
80450: LIST
80451: LIST
80452: PUSH
80453: EMPTY
80454: LIST
80455: LIST
80456: LIST
80457: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
80458: LD_ADDR_VAR 0 28
80462: PUSH
80463: LD_INT 3
80465: NEG
80466: PUSH
80467: LD_INT 3
80469: NEG
80470: PUSH
80471: EMPTY
80472: LIST
80473: LIST
80474: PUSH
80475: LD_INT 3
80477: NEG
80478: PUSH
80479: LD_INT 4
80481: NEG
80482: PUSH
80483: EMPTY
80484: LIST
80485: LIST
80486: PUSH
80487: LD_INT 4
80489: NEG
80490: PUSH
80491: LD_INT 3
80493: NEG
80494: PUSH
80495: EMPTY
80496: LIST
80497: LIST
80498: PUSH
80499: EMPTY
80500: LIST
80501: LIST
80502: LIST
80503: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
80504: LD_ADDR_VAR 0 29
80508: PUSH
80509: LD_INT 1
80511: NEG
80512: PUSH
80513: LD_INT 3
80515: NEG
80516: PUSH
80517: EMPTY
80518: LIST
80519: LIST
80520: PUSH
80521: LD_INT 0
80523: PUSH
80524: LD_INT 3
80526: NEG
80527: PUSH
80528: EMPTY
80529: LIST
80530: LIST
80531: PUSH
80532: LD_INT 1
80534: PUSH
80535: LD_INT 2
80537: NEG
80538: PUSH
80539: EMPTY
80540: LIST
80541: LIST
80542: PUSH
80543: LD_INT 1
80545: NEG
80546: PUSH
80547: LD_INT 4
80549: NEG
80550: PUSH
80551: EMPTY
80552: LIST
80553: LIST
80554: PUSH
80555: LD_INT 0
80557: PUSH
80558: LD_INT 4
80560: NEG
80561: PUSH
80562: EMPTY
80563: LIST
80564: LIST
80565: PUSH
80566: LD_INT 1
80568: PUSH
80569: LD_INT 3
80571: NEG
80572: PUSH
80573: EMPTY
80574: LIST
80575: LIST
80576: PUSH
80577: LD_INT 1
80579: NEG
80580: PUSH
80581: LD_INT 5
80583: NEG
80584: PUSH
80585: EMPTY
80586: LIST
80587: LIST
80588: PUSH
80589: LD_INT 0
80591: PUSH
80592: LD_INT 5
80594: NEG
80595: PUSH
80596: EMPTY
80597: LIST
80598: LIST
80599: PUSH
80600: LD_INT 1
80602: PUSH
80603: LD_INT 4
80605: NEG
80606: PUSH
80607: EMPTY
80608: LIST
80609: LIST
80610: PUSH
80611: LD_INT 1
80613: NEG
80614: PUSH
80615: LD_INT 6
80617: NEG
80618: PUSH
80619: EMPTY
80620: LIST
80621: LIST
80622: PUSH
80623: LD_INT 0
80625: PUSH
80626: LD_INT 6
80628: NEG
80629: PUSH
80630: EMPTY
80631: LIST
80632: LIST
80633: PUSH
80634: LD_INT 1
80636: PUSH
80637: LD_INT 5
80639: NEG
80640: PUSH
80641: EMPTY
80642: LIST
80643: LIST
80644: PUSH
80645: EMPTY
80646: LIST
80647: LIST
80648: LIST
80649: LIST
80650: LIST
80651: LIST
80652: LIST
80653: LIST
80654: LIST
80655: LIST
80656: LIST
80657: LIST
80658: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
80659: LD_ADDR_VAR 0 30
80663: PUSH
80664: LD_INT 2
80666: PUSH
80667: LD_INT 1
80669: NEG
80670: PUSH
80671: EMPTY
80672: LIST
80673: LIST
80674: PUSH
80675: LD_INT 3
80677: PUSH
80678: LD_INT 0
80680: PUSH
80681: EMPTY
80682: LIST
80683: LIST
80684: PUSH
80685: LD_INT 3
80687: PUSH
80688: LD_INT 1
80690: PUSH
80691: EMPTY
80692: LIST
80693: LIST
80694: PUSH
80695: LD_INT 3
80697: PUSH
80698: LD_INT 1
80700: NEG
80701: PUSH
80702: EMPTY
80703: LIST
80704: LIST
80705: PUSH
80706: LD_INT 4
80708: PUSH
80709: LD_INT 0
80711: PUSH
80712: EMPTY
80713: LIST
80714: LIST
80715: PUSH
80716: LD_INT 4
80718: PUSH
80719: LD_INT 1
80721: PUSH
80722: EMPTY
80723: LIST
80724: LIST
80725: PUSH
80726: LD_INT 4
80728: PUSH
80729: LD_INT 1
80731: NEG
80732: PUSH
80733: EMPTY
80734: LIST
80735: LIST
80736: PUSH
80737: LD_INT 5
80739: PUSH
80740: LD_INT 0
80742: PUSH
80743: EMPTY
80744: LIST
80745: LIST
80746: PUSH
80747: LD_INT 5
80749: PUSH
80750: LD_INT 1
80752: PUSH
80753: EMPTY
80754: LIST
80755: LIST
80756: PUSH
80757: LD_INT 5
80759: PUSH
80760: LD_INT 1
80762: NEG
80763: PUSH
80764: EMPTY
80765: LIST
80766: LIST
80767: PUSH
80768: LD_INT 6
80770: PUSH
80771: LD_INT 0
80773: PUSH
80774: EMPTY
80775: LIST
80776: LIST
80777: PUSH
80778: LD_INT 6
80780: PUSH
80781: LD_INT 1
80783: PUSH
80784: EMPTY
80785: LIST
80786: LIST
80787: PUSH
80788: EMPTY
80789: LIST
80790: LIST
80791: LIST
80792: LIST
80793: LIST
80794: LIST
80795: LIST
80796: LIST
80797: LIST
80798: LIST
80799: LIST
80800: LIST
80801: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
80802: LD_ADDR_VAR 0 31
80806: PUSH
80807: LD_INT 3
80809: PUSH
80810: LD_INT 2
80812: PUSH
80813: EMPTY
80814: LIST
80815: LIST
80816: PUSH
80817: LD_INT 3
80819: PUSH
80820: LD_INT 3
80822: PUSH
80823: EMPTY
80824: LIST
80825: LIST
80826: PUSH
80827: LD_INT 2
80829: PUSH
80830: LD_INT 3
80832: PUSH
80833: EMPTY
80834: LIST
80835: LIST
80836: PUSH
80837: LD_INT 4
80839: PUSH
80840: LD_INT 3
80842: PUSH
80843: EMPTY
80844: LIST
80845: LIST
80846: PUSH
80847: LD_INT 4
80849: PUSH
80850: LD_INT 4
80852: PUSH
80853: EMPTY
80854: LIST
80855: LIST
80856: PUSH
80857: LD_INT 3
80859: PUSH
80860: LD_INT 4
80862: PUSH
80863: EMPTY
80864: LIST
80865: LIST
80866: PUSH
80867: LD_INT 5
80869: PUSH
80870: LD_INT 4
80872: PUSH
80873: EMPTY
80874: LIST
80875: LIST
80876: PUSH
80877: LD_INT 5
80879: PUSH
80880: LD_INT 5
80882: PUSH
80883: EMPTY
80884: LIST
80885: LIST
80886: PUSH
80887: LD_INT 4
80889: PUSH
80890: LD_INT 5
80892: PUSH
80893: EMPTY
80894: LIST
80895: LIST
80896: PUSH
80897: LD_INT 6
80899: PUSH
80900: LD_INT 5
80902: PUSH
80903: EMPTY
80904: LIST
80905: LIST
80906: PUSH
80907: LD_INT 6
80909: PUSH
80910: LD_INT 6
80912: PUSH
80913: EMPTY
80914: LIST
80915: LIST
80916: PUSH
80917: LD_INT 5
80919: PUSH
80920: LD_INT 6
80922: PUSH
80923: EMPTY
80924: LIST
80925: LIST
80926: PUSH
80927: EMPTY
80928: LIST
80929: LIST
80930: LIST
80931: LIST
80932: LIST
80933: LIST
80934: LIST
80935: LIST
80936: LIST
80937: LIST
80938: LIST
80939: LIST
80940: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
80941: LD_ADDR_VAR 0 32
80945: PUSH
80946: LD_INT 1
80948: PUSH
80949: LD_INT 3
80951: PUSH
80952: EMPTY
80953: LIST
80954: LIST
80955: PUSH
80956: LD_INT 0
80958: PUSH
80959: LD_INT 3
80961: PUSH
80962: EMPTY
80963: LIST
80964: LIST
80965: PUSH
80966: LD_INT 1
80968: NEG
80969: PUSH
80970: LD_INT 2
80972: PUSH
80973: EMPTY
80974: LIST
80975: LIST
80976: PUSH
80977: LD_INT 1
80979: PUSH
80980: LD_INT 4
80982: PUSH
80983: EMPTY
80984: LIST
80985: LIST
80986: PUSH
80987: LD_INT 0
80989: PUSH
80990: LD_INT 4
80992: PUSH
80993: EMPTY
80994: LIST
80995: LIST
80996: PUSH
80997: LD_INT 1
80999: NEG
81000: PUSH
81001: LD_INT 3
81003: PUSH
81004: EMPTY
81005: LIST
81006: LIST
81007: PUSH
81008: LD_INT 1
81010: PUSH
81011: LD_INT 5
81013: PUSH
81014: EMPTY
81015: LIST
81016: LIST
81017: PUSH
81018: LD_INT 0
81020: PUSH
81021: LD_INT 5
81023: PUSH
81024: EMPTY
81025: LIST
81026: LIST
81027: PUSH
81028: LD_INT 1
81030: NEG
81031: PUSH
81032: LD_INT 4
81034: PUSH
81035: EMPTY
81036: LIST
81037: LIST
81038: PUSH
81039: LD_INT 1
81041: PUSH
81042: LD_INT 6
81044: PUSH
81045: EMPTY
81046: LIST
81047: LIST
81048: PUSH
81049: LD_INT 0
81051: PUSH
81052: LD_INT 6
81054: PUSH
81055: EMPTY
81056: LIST
81057: LIST
81058: PUSH
81059: LD_INT 1
81061: NEG
81062: PUSH
81063: LD_INT 5
81065: PUSH
81066: EMPTY
81067: LIST
81068: LIST
81069: PUSH
81070: EMPTY
81071: LIST
81072: LIST
81073: LIST
81074: LIST
81075: LIST
81076: LIST
81077: LIST
81078: LIST
81079: LIST
81080: LIST
81081: LIST
81082: LIST
81083: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
81084: LD_ADDR_VAR 0 33
81088: PUSH
81089: LD_INT 2
81091: NEG
81092: PUSH
81093: LD_INT 1
81095: PUSH
81096: EMPTY
81097: LIST
81098: LIST
81099: PUSH
81100: LD_INT 3
81102: NEG
81103: PUSH
81104: LD_INT 0
81106: PUSH
81107: EMPTY
81108: LIST
81109: LIST
81110: PUSH
81111: LD_INT 3
81113: NEG
81114: PUSH
81115: LD_INT 1
81117: NEG
81118: PUSH
81119: EMPTY
81120: LIST
81121: LIST
81122: PUSH
81123: LD_INT 3
81125: NEG
81126: PUSH
81127: LD_INT 1
81129: PUSH
81130: EMPTY
81131: LIST
81132: LIST
81133: PUSH
81134: LD_INT 4
81136: NEG
81137: PUSH
81138: LD_INT 0
81140: PUSH
81141: EMPTY
81142: LIST
81143: LIST
81144: PUSH
81145: LD_INT 4
81147: NEG
81148: PUSH
81149: LD_INT 1
81151: NEG
81152: PUSH
81153: EMPTY
81154: LIST
81155: LIST
81156: PUSH
81157: LD_INT 4
81159: NEG
81160: PUSH
81161: LD_INT 1
81163: PUSH
81164: EMPTY
81165: LIST
81166: LIST
81167: PUSH
81168: LD_INT 5
81170: NEG
81171: PUSH
81172: LD_INT 0
81174: PUSH
81175: EMPTY
81176: LIST
81177: LIST
81178: PUSH
81179: LD_INT 5
81181: NEG
81182: PUSH
81183: LD_INT 1
81185: NEG
81186: PUSH
81187: EMPTY
81188: LIST
81189: LIST
81190: PUSH
81191: LD_INT 5
81193: NEG
81194: PUSH
81195: LD_INT 1
81197: PUSH
81198: EMPTY
81199: LIST
81200: LIST
81201: PUSH
81202: LD_INT 6
81204: NEG
81205: PUSH
81206: LD_INT 0
81208: PUSH
81209: EMPTY
81210: LIST
81211: LIST
81212: PUSH
81213: LD_INT 6
81215: NEG
81216: PUSH
81217: LD_INT 1
81219: NEG
81220: PUSH
81221: EMPTY
81222: LIST
81223: LIST
81224: PUSH
81225: EMPTY
81226: LIST
81227: LIST
81228: LIST
81229: LIST
81230: LIST
81231: LIST
81232: LIST
81233: LIST
81234: LIST
81235: LIST
81236: LIST
81237: LIST
81238: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
81239: LD_ADDR_VAR 0 34
81243: PUSH
81244: LD_INT 2
81246: NEG
81247: PUSH
81248: LD_INT 3
81250: NEG
81251: PUSH
81252: EMPTY
81253: LIST
81254: LIST
81255: PUSH
81256: LD_INT 3
81258: NEG
81259: PUSH
81260: LD_INT 2
81262: NEG
81263: PUSH
81264: EMPTY
81265: LIST
81266: LIST
81267: PUSH
81268: LD_INT 3
81270: NEG
81271: PUSH
81272: LD_INT 3
81274: NEG
81275: PUSH
81276: EMPTY
81277: LIST
81278: LIST
81279: PUSH
81280: LD_INT 3
81282: NEG
81283: PUSH
81284: LD_INT 4
81286: NEG
81287: PUSH
81288: EMPTY
81289: LIST
81290: LIST
81291: PUSH
81292: LD_INT 4
81294: NEG
81295: PUSH
81296: LD_INT 3
81298: NEG
81299: PUSH
81300: EMPTY
81301: LIST
81302: LIST
81303: PUSH
81304: LD_INT 4
81306: NEG
81307: PUSH
81308: LD_INT 4
81310: NEG
81311: PUSH
81312: EMPTY
81313: LIST
81314: LIST
81315: PUSH
81316: LD_INT 4
81318: NEG
81319: PUSH
81320: LD_INT 5
81322: NEG
81323: PUSH
81324: EMPTY
81325: LIST
81326: LIST
81327: PUSH
81328: LD_INT 5
81330: NEG
81331: PUSH
81332: LD_INT 4
81334: NEG
81335: PUSH
81336: EMPTY
81337: LIST
81338: LIST
81339: PUSH
81340: LD_INT 5
81342: NEG
81343: PUSH
81344: LD_INT 5
81346: NEG
81347: PUSH
81348: EMPTY
81349: LIST
81350: LIST
81351: PUSH
81352: LD_INT 5
81354: NEG
81355: PUSH
81356: LD_INT 6
81358: NEG
81359: PUSH
81360: EMPTY
81361: LIST
81362: LIST
81363: PUSH
81364: LD_INT 6
81366: NEG
81367: PUSH
81368: LD_INT 5
81370: NEG
81371: PUSH
81372: EMPTY
81373: LIST
81374: LIST
81375: PUSH
81376: LD_INT 6
81378: NEG
81379: PUSH
81380: LD_INT 6
81382: NEG
81383: PUSH
81384: EMPTY
81385: LIST
81386: LIST
81387: PUSH
81388: EMPTY
81389: LIST
81390: LIST
81391: LIST
81392: LIST
81393: LIST
81394: LIST
81395: LIST
81396: LIST
81397: LIST
81398: LIST
81399: LIST
81400: LIST
81401: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
81402: LD_ADDR_VAR 0 41
81406: PUSH
81407: LD_INT 0
81409: PUSH
81410: LD_INT 2
81412: NEG
81413: PUSH
81414: EMPTY
81415: LIST
81416: LIST
81417: PUSH
81418: LD_INT 1
81420: NEG
81421: PUSH
81422: LD_INT 3
81424: NEG
81425: PUSH
81426: EMPTY
81427: LIST
81428: LIST
81429: PUSH
81430: LD_INT 1
81432: PUSH
81433: LD_INT 2
81435: NEG
81436: PUSH
81437: EMPTY
81438: LIST
81439: LIST
81440: PUSH
81441: EMPTY
81442: LIST
81443: LIST
81444: LIST
81445: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
81446: LD_ADDR_VAR 0 42
81450: PUSH
81451: LD_INT 2
81453: PUSH
81454: LD_INT 0
81456: PUSH
81457: EMPTY
81458: LIST
81459: LIST
81460: PUSH
81461: LD_INT 2
81463: PUSH
81464: LD_INT 1
81466: NEG
81467: PUSH
81468: EMPTY
81469: LIST
81470: LIST
81471: PUSH
81472: LD_INT 3
81474: PUSH
81475: LD_INT 1
81477: PUSH
81478: EMPTY
81479: LIST
81480: LIST
81481: PUSH
81482: EMPTY
81483: LIST
81484: LIST
81485: LIST
81486: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
81487: LD_ADDR_VAR 0 43
81491: PUSH
81492: LD_INT 2
81494: PUSH
81495: LD_INT 2
81497: PUSH
81498: EMPTY
81499: LIST
81500: LIST
81501: PUSH
81502: LD_INT 3
81504: PUSH
81505: LD_INT 2
81507: PUSH
81508: EMPTY
81509: LIST
81510: LIST
81511: PUSH
81512: LD_INT 2
81514: PUSH
81515: LD_INT 3
81517: PUSH
81518: EMPTY
81519: LIST
81520: LIST
81521: PUSH
81522: EMPTY
81523: LIST
81524: LIST
81525: LIST
81526: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
81527: LD_ADDR_VAR 0 44
81531: PUSH
81532: LD_INT 0
81534: PUSH
81535: LD_INT 2
81537: PUSH
81538: EMPTY
81539: LIST
81540: LIST
81541: PUSH
81542: LD_INT 1
81544: PUSH
81545: LD_INT 3
81547: PUSH
81548: EMPTY
81549: LIST
81550: LIST
81551: PUSH
81552: LD_INT 1
81554: NEG
81555: PUSH
81556: LD_INT 2
81558: PUSH
81559: EMPTY
81560: LIST
81561: LIST
81562: PUSH
81563: EMPTY
81564: LIST
81565: LIST
81566: LIST
81567: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
81568: LD_ADDR_VAR 0 45
81572: PUSH
81573: LD_INT 2
81575: NEG
81576: PUSH
81577: LD_INT 0
81579: PUSH
81580: EMPTY
81581: LIST
81582: LIST
81583: PUSH
81584: LD_INT 2
81586: NEG
81587: PUSH
81588: LD_INT 1
81590: PUSH
81591: EMPTY
81592: LIST
81593: LIST
81594: PUSH
81595: LD_INT 3
81597: NEG
81598: PUSH
81599: LD_INT 1
81601: NEG
81602: PUSH
81603: EMPTY
81604: LIST
81605: LIST
81606: PUSH
81607: EMPTY
81608: LIST
81609: LIST
81610: LIST
81611: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
81612: LD_ADDR_VAR 0 46
81616: PUSH
81617: LD_INT 2
81619: NEG
81620: PUSH
81621: LD_INT 2
81623: NEG
81624: PUSH
81625: EMPTY
81626: LIST
81627: LIST
81628: PUSH
81629: LD_INT 2
81631: NEG
81632: PUSH
81633: LD_INT 3
81635: NEG
81636: PUSH
81637: EMPTY
81638: LIST
81639: LIST
81640: PUSH
81641: LD_INT 3
81643: NEG
81644: PUSH
81645: LD_INT 2
81647: NEG
81648: PUSH
81649: EMPTY
81650: LIST
81651: LIST
81652: PUSH
81653: EMPTY
81654: LIST
81655: LIST
81656: LIST
81657: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
81658: LD_ADDR_VAR 0 47
81662: PUSH
81663: LD_INT 2
81665: NEG
81666: PUSH
81667: LD_INT 3
81669: NEG
81670: PUSH
81671: EMPTY
81672: LIST
81673: LIST
81674: PUSH
81675: LD_INT 1
81677: NEG
81678: PUSH
81679: LD_INT 3
81681: NEG
81682: PUSH
81683: EMPTY
81684: LIST
81685: LIST
81686: PUSH
81687: EMPTY
81688: LIST
81689: LIST
81690: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
81691: LD_ADDR_VAR 0 48
81695: PUSH
81696: LD_INT 1
81698: PUSH
81699: LD_INT 2
81701: NEG
81702: PUSH
81703: EMPTY
81704: LIST
81705: LIST
81706: PUSH
81707: LD_INT 2
81709: PUSH
81710: LD_INT 1
81712: NEG
81713: PUSH
81714: EMPTY
81715: LIST
81716: LIST
81717: PUSH
81718: EMPTY
81719: LIST
81720: LIST
81721: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
81722: LD_ADDR_VAR 0 49
81726: PUSH
81727: LD_INT 3
81729: PUSH
81730: LD_INT 1
81732: PUSH
81733: EMPTY
81734: LIST
81735: LIST
81736: PUSH
81737: LD_INT 3
81739: PUSH
81740: LD_INT 2
81742: PUSH
81743: EMPTY
81744: LIST
81745: LIST
81746: PUSH
81747: EMPTY
81748: LIST
81749: LIST
81750: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
81751: LD_ADDR_VAR 0 50
81755: PUSH
81756: LD_INT 2
81758: PUSH
81759: LD_INT 3
81761: PUSH
81762: EMPTY
81763: LIST
81764: LIST
81765: PUSH
81766: LD_INT 1
81768: PUSH
81769: LD_INT 3
81771: PUSH
81772: EMPTY
81773: LIST
81774: LIST
81775: PUSH
81776: EMPTY
81777: LIST
81778: LIST
81779: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
81780: LD_ADDR_VAR 0 51
81784: PUSH
81785: LD_INT 1
81787: NEG
81788: PUSH
81789: LD_INT 2
81791: PUSH
81792: EMPTY
81793: LIST
81794: LIST
81795: PUSH
81796: LD_INT 2
81798: NEG
81799: PUSH
81800: LD_INT 1
81802: PUSH
81803: EMPTY
81804: LIST
81805: LIST
81806: PUSH
81807: EMPTY
81808: LIST
81809: LIST
81810: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
81811: LD_ADDR_VAR 0 52
81815: PUSH
81816: LD_INT 3
81818: NEG
81819: PUSH
81820: LD_INT 1
81822: NEG
81823: PUSH
81824: EMPTY
81825: LIST
81826: LIST
81827: PUSH
81828: LD_INT 3
81830: NEG
81831: PUSH
81832: LD_INT 2
81834: NEG
81835: PUSH
81836: EMPTY
81837: LIST
81838: LIST
81839: PUSH
81840: EMPTY
81841: LIST
81842: LIST
81843: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
81844: LD_ADDR_VAR 0 53
81848: PUSH
81849: LD_INT 1
81851: NEG
81852: PUSH
81853: LD_INT 3
81855: NEG
81856: PUSH
81857: EMPTY
81858: LIST
81859: LIST
81860: PUSH
81861: LD_INT 0
81863: PUSH
81864: LD_INT 3
81866: NEG
81867: PUSH
81868: EMPTY
81869: LIST
81870: LIST
81871: PUSH
81872: LD_INT 1
81874: PUSH
81875: LD_INT 2
81877: NEG
81878: PUSH
81879: EMPTY
81880: LIST
81881: LIST
81882: PUSH
81883: EMPTY
81884: LIST
81885: LIST
81886: LIST
81887: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
81888: LD_ADDR_VAR 0 54
81892: PUSH
81893: LD_INT 2
81895: PUSH
81896: LD_INT 1
81898: NEG
81899: PUSH
81900: EMPTY
81901: LIST
81902: LIST
81903: PUSH
81904: LD_INT 3
81906: PUSH
81907: LD_INT 0
81909: PUSH
81910: EMPTY
81911: LIST
81912: LIST
81913: PUSH
81914: LD_INT 3
81916: PUSH
81917: LD_INT 1
81919: PUSH
81920: EMPTY
81921: LIST
81922: LIST
81923: PUSH
81924: EMPTY
81925: LIST
81926: LIST
81927: LIST
81928: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
81929: LD_ADDR_VAR 0 55
81933: PUSH
81934: LD_INT 3
81936: PUSH
81937: LD_INT 2
81939: PUSH
81940: EMPTY
81941: LIST
81942: LIST
81943: PUSH
81944: LD_INT 3
81946: PUSH
81947: LD_INT 3
81949: PUSH
81950: EMPTY
81951: LIST
81952: LIST
81953: PUSH
81954: LD_INT 2
81956: PUSH
81957: LD_INT 3
81959: PUSH
81960: EMPTY
81961: LIST
81962: LIST
81963: PUSH
81964: EMPTY
81965: LIST
81966: LIST
81967: LIST
81968: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
81969: LD_ADDR_VAR 0 56
81973: PUSH
81974: LD_INT 1
81976: PUSH
81977: LD_INT 3
81979: PUSH
81980: EMPTY
81981: LIST
81982: LIST
81983: PUSH
81984: LD_INT 0
81986: PUSH
81987: LD_INT 3
81989: PUSH
81990: EMPTY
81991: LIST
81992: LIST
81993: PUSH
81994: LD_INT 1
81996: NEG
81997: PUSH
81998: LD_INT 2
82000: PUSH
82001: EMPTY
82002: LIST
82003: LIST
82004: PUSH
82005: EMPTY
82006: LIST
82007: LIST
82008: LIST
82009: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
82010: LD_ADDR_VAR 0 57
82014: PUSH
82015: LD_INT 2
82017: NEG
82018: PUSH
82019: LD_INT 1
82021: PUSH
82022: EMPTY
82023: LIST
82024: LIST
82025: PUSH
82026: LD_INT 3
82028: NEG
82029: PUSH
82030: LD_INT 0
82032: PUSH
82033: EMPTY
82034: LIST
82035: LIST
82036: PUSH
82037: LD_INT 3
82039: NEG
82040: PUSH
82041: LD_INT 1
82043: NEG
82044: PUSH
82045: EMPTY
82046: LIST
82047: LIST
82048: PUSH
82049: EMPTY
82050: LIST
82051: LIST
82052: LIST
82053: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
82054: LD_ADDR_VAR 0 58
82058: PUSH
82059: LD_INT 2
82061: NEG
82062: PUSH
82063: LD_INT 3
82065: NEG
82066: PUSH
82067: EMPTY
82068: LIST
82069: LIST
82070: PUSH
82071: LD_INT 3
82073: NEG
82074: PUSH
82075: LD_INT 2
82077: NEG
82078: PUSH
82079: EMPTY
82080: LIST
82081: LIST
82082: PUSH
82083: LD_INT 3
82085: NEG
82086: PUSH
82087: LD_INT 3
82089: NEG
82090: PUSH
82091: EMPTY
82092: LIST
82093: LIST
82094: PUSH
82095: EMPTY
82096: LIST
82097: LIST
82098: LIST
82099: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
82100: LD_ADDR_VAR 0 59
82104: PUSH
82105: LD_INT 1
82107: NEG
82108: PUSH
82109: LD_INT 2
82111: NEG
82112: PUSH
82113: EMPTY
82114: LIST
82115: LIST
82116: PUSH
82117: LD_INT 0
82119: PUSH
82120: LD_INT 2
82122: NEG
82123: PUSH
82124: EMPTY
82125: LIST
82126: LIST
82127: PUSH
82128: LD_INT 1
82130: PUSH
82131: LD_INT 1
82133: NEG
82134: PUSH
82135: EMPTY
82136: LIST
82137: LIST
82138: PUSH
82139: EMPTY
82140: LIST
82141: LIST
82142: LIST
82143: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
82144: LD_ADDR_VAR 0 60
82148: PUSH
82149: LD_INT 1
82151: PUSH
82152: LD_INT 1
82154: NEG
82155: PUSH
82156: EMPTY
82157: LIST
82158: LIST
82159: PUSH
82160: LD_INT 2
82162: PUSH
82163: LD_INT 0
82165: PUSH
82166: EMPTY
82167: LIST
82168: LIST
82169: PUSH
82170: LD_INT 2
82172: PUSH
82173: LD_INT 1
82175: PUSH
82176: EMPTY
82177: LIST
82178: LIST
82179: PUSH
82180: EMPTY
82181: LIST
82182: LIST
82183: LIST
82184: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
82185: LD_ADDR_VAR 0 61
82189: PUSH
82190: LD_INT 2
82192: PUSH
82193: LD_INT 1
82195: PUSH
82196: EMPTY
82197: LIST
82198: LIST
82199: PUSH
82200: LD_INT 2
82202: PUSH
82203: LD_INT 2
82205: PUSH
82206: EMPTY
82207: LIST
82208: LIST
82209: PUSH
82210: LD_INT 1
82212: PUSH
82213: LD_INT 2
82215: PUSH
82216: EMPTY
82217: LIST
82218: LIST
82219: PUSH
82220: EMPTY
82221: LIST
82222: LIST
82223: LIST
82224: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
82225: LD_ADDR_VAR 0 62
82229: PUSH
82230: LD_INT 1
82232: PUSH
82233: LD_INT 2
82235: PUSH
82236: EMPTY
82237: LIST
82238: LIST
82239: PUSH
82240: LD_INT 0
82242: PUSH
82243: LD_INT 2
82245: PUSH
82246: EMPTY
82247: LIST
82248: LIST
82249: PUSH
82250: LD_INT 1
82252: NEG
82253: PUSH
82254: LD_INT 1
82256: PUSH
82257: EMPTY
82258: LIST
82259: LIST
82260: PUSH
82261: EMPTY
82262: LIST
82263: LIST
82264: LIST
82265: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
82266: LD_ADDR_VAR 0 63
82270: PUSH
82271: LD_INT 1
82273: NEG
82274: PUSH
82275: LD_INT 1
82277: PUSH
82278: EMPTY
82279: LIST
82280: LIST
82281: PUSH
82282: LD_INT 2
82284: NEG
82285: PUSH
82286: LD_INT 0
82288: PUSH
82289: EMPTY
82290: LIST
82291: LIST
82292: PUSH
82293: LD_INT 2
82295: NEG
82296: PUSH
82297: LD_INT 1
82299: NEG
82300: PUSH
82301: EMPTY
82302: LIST
82303: LIST
82304: PUSH
82305: EMPTY
82306: LIST
82307: LIST
82308: LIST
82309: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
82310: LD_ADDR_VAR 0 64
82314: PUSH
82315: LD_INT 1
82317: NEG
82318: PUSH
82319: LD_INT 2
82321: NEG
82322: PUSH
82323: EMPTY
82324: LIST
82325: LIST
82326: PUSH
82327: LD_INT 2
82329: NEG
82330: PUSH
82331: LD_INT 1
82333: NEG
82334: PUSH
82335: EMPTY
82336: LIST
82337: LIST
82338: PUSH
82339: LD_INT 2
82341: NEG
82342: PUSH
82343: LD_INT 2
82345: NEG
82346: PUSH
82347: EMPTY
82348: LIST
82349: LIST
82350: PUSH
82351: EMPTY
82352: LIST
82353: LIST
82354: LIST
82355: ST_TO_ADDR
// end ; 2 :
82356: GO 85622
82358: LD_INT 2
82360: DOUBLE
82361: EQUAL
82362: IFTRUE 82366
82364: GO 85621
82366: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
82367: LD_ADDR_VAR 0 29
82371: PUSH
82372: LD_INT 4
82374: PUSH
82375: LD_INT 0
82377: PUSH
82378: EMPTY
82379: LIST
82380: LIST
82381: PUSH
82382: LD_INT 4
82384: PUSH
82385: LD_INT 1
82387: NEG
82388: PUSH
82389: EMPTY
82390: LIST
82391: LIST
82392: PUSH
82393: LD_INT 5
82395: PUSH
82396: LD_INT 0
82398: PUSH
82399: EMPTY
82400: LIST
82401: LIST
82402: PUSH
82403: LD_INT 5
82405: PUSH
82406: LD_INT 1
82408: PUSH
82409: EMPTY
82410: LIST
82411: LIST
82412: PUSH
82413: LD_INT 4
82415: PUSH
82416: LD_INT 1
82418: PUSH
82419: EMPTY
82420: LIST
82421: LIST
82422: PUSH
82423: LD_INT 3
82425: PUSH
82426: LD_INT 0
82428: PUSH
82429: EMPTY
82430: LIST
82431: LIST
82432: PUSH
82433: LD_INT 3
82435: PUSH
82436: LD_INT 1
82438: NEG
82439: PUSH
82440: EMPTY
82441: LIST
82442: LIST
82443: PUSH
82444: LD_INT 3
82446: PUSH
82447: LD_INT 2
82449: NEG
82450: PUSH
82451: EMPTY
82452: LIST
82453: LIST
82454: PUSH
82455: LD_INT 5
82457: PUSH
82458: LD_INT 2
82460: PUSH
82461: EMPTY
82462: LIST
82463: LIST
82464: PUSH
82465: LD_INT 3
82467: PUSH
82468: LD_INT 3
82470: PUSH
82471: EMPTY
82472: LIST
82473: LIST
82474: PUSH
82475: LD_INT 3
82477: PUSH
82478: LD_INT 2
82480: PUSH
82481: EMPTY
82482: LIST
82483: LIST
82484: PUSH
82485: LD_INT 4
82487: PUSH
82488: LD_INT 3
82490: PUSH
82491: EMPTY
82492: LIST
82493: LIST
82494: PUSH
82495: LD_INT 4
82497: PUSH
82498: LD_INT 4
82500: PUSH
82501: EMPTY
82502: LIST
82503: LIST
82504: PUSH
82505: LD_INT 3
82507: PUSH
82508: LD_INT 4
82510: PUSH
82511: EMPTY
82512: LIST
82513: LIST
82514: PUSH
82515: LD_INT 2
82517: PUSH
82518: LD_INT 3
82520: PUSH
82521: EMPTY
82522: LIST
82523: LIST
82524: PUSH
82525: LD_INT 2
82527: PUSH
82528: LD_INT 2
82530: PUSH
82531: EMPTY
82532: LIST
82533: LIST
82534: PUSH
82535: LD_INT 4
82537: PUSH
82538: LD_INT 2
82540: PUSH
82541: EMPTY
82542: LIST
82543: LIST
82544: PUSH
82545: LD_INT 2
82547: PUSH
82548: LD_INT 4
82550: PUSH
82551: EMPTY
82552: LIST
82553: LIST
82554: PUSH
82555: LD_INT 0
82557: PUSH
82558: LD_INT 4
82560: PUSH
82561: EMPTY
82562: LIST
82563: LIST
82564: PUSH
82565: LD_INT 0
82567: PUSH
82568: LD_INT 3
82570: PUSH
82571: EMPTY
82572: LIST
82573: LIST
82574: PUSH
82575: LD_INT 1
82577: PUSH
82578: LD_INT 4
82580: PUSH
82581: EMPTY
82582: LIST
82583: LIST
82584: PUSH
82585: LD_INT 1
82587: PUSH
82588: LD_INT 5
82590: PUSH
82591: EMPTY
82592: LIST
82593: LIST
82594: PUSH
82595: LD_INT 0
82597: PUSH
82598: LD_INT 5
82600: PUSH
82601: EMPTY
82602: LIST
82603: LIST
82604: PUSH
82605: LD_INT 1
82607: NEG
82608: PUSH
82609: LD_INT 4
82611: PUSH
82612: EMPTY
82613: LIST
82614: LIST
82615: PUSH
82616: LD_INT 1
82618: NEG
82619: PUSH
82620: LD_INT 3
82622: PUSH
82623: EMPTY
82624: LIST
82625: LIST
82626: PUSH
82627: LD_INT 2
82629: PUSH
82630: LD_INT 5
82632: PUSH
82633: EMPTY
82634: LIST
82635: LIST
82636: PUSH
82637: LD_INT 2
82639: NEG
82640: PUSH
82641: LD_INT 3
82643: PUSH
82644: EMPTY
82645: LIST
82646: LIST
82647: PUSH
82648: LD_INT 3
82650: NEG
82651: PUSH
82652: LD_INT 0
82654: PUSH
82655: EMPTY
82656: LIST
82657: LIST
82658: PUSH
82659: LD_INT 3
82661: NEG
82662: PUSH
82663: LD_INT 1
82665: NEG
82666: PUSH
82667: EMPTY
82668: LIST
82669: LIST
82670: PUSH
82671: LD_INT 2
82673: NEG
82674: PUSH
82675: LD_INT 0
82677: PUSH
82678: EMPTY
82679: LIST
82680: LIST
82681: PUSH
82682: LD_INT 2
82684: NEG
82685: PUSH
82686: LD_INT 1
82688: PUSH
82689: EMPTY
82690: LIST
82691: LIST
82692: PUSH
82693: LD_INT 3
82695: NEG
82696: PUSH
82697: LD_INT 1
82699: PUSH
82700: EMPTY
82701: LIST
82702: LIST
82703: PUSH
82704: LD_INT 4
82706: NEG
82707: PUSH
82708: LD_INT 0
82710: PUSH
82711: EMPTY
82712: LIST
82713: LIST
82714: PUSH
82715: LD_INT 4
82717: NEG
82718: PUSH
82719: LD_INT 1
82721: NEG
82722: PUSH
82723: EMPTY
82724: LIST
82725: LIST
82726: PUSH
82727: LD_INT 4
82729: NEG
82730: PUSH
82731: LD_INT 2
82733: NEG
82734: PUSH
82735: EMPTY
82736: LIST
82737: LIST
82738: PUSH
82739: LD_INT 2
82741: NEG
82742: PUSH
82743: LD_INT 2
82745: PUSH
82746: EMPTY
82747: LIST
82748: LIST
82749: PUSH
82750: LD_INT 4
82752: NEG
82753: PUSH
82754: LD_INT 4
82756: NEG
82757: PUSH
82758: EMPTY
82759: LIST
82760: LIST
82761: PUSH
82762: LD_INT 4
82764: NEG
82765: PUSH
82766: LD_INT 5
82768: NEG
82769: PUSH
82770: EMPTY
82771: LIST
82772: LIST
82773: PUSH
82774: LD_INT 3
82776: NEG
82777: PUSH
82778: LD_INT 4
82780: NEG
82781: PUSH
82782: EMPTY
82783: LIST
82784: LIST
82785: PUSH
82786: LD_INT 3
82788: NEG
82789: PUSH
82790: LD_INT 3
82792: NEG
82793: PUSH
82794: EMPTY
82795: LIST
82796: LIST
82797: PUSH
82798: LD_INT 4
82800: NEG
82801: PUSH
82802: LD_INT 3
82804: NEG
82805: PUSH
82806: EMPTY
82807: LIST
82808: LIST
82809: PUSH
82810: LD_INT 5
82812: NEG
82813: PUSH
82814: LD_INT 4
82816: NEG
82817: PUSH
82818: EMPTY
82819: LIST
82820: LIST
82821: PUSH
82822: LD_INT 5
82824: NEG
82825: PUSH
82826: LD_INT 5
82828: NEG
82829: PUSH
82830: EMPTY
82831: LIST
82832: LIST
82833: PUSH
82834: LD_INT 3
82836: NEG
82837: PUSH
82838: LD_INT 5
82840: NEG
82841: PUSH
82842: EMPTY
82843: LIST
82844: LIST
82845: PUSH
82846: LD_INT 5
82848: NEG
82849: PUSH
82850: LD_INT 3
82852: NEG
82853: PUSH
82854: EMPTY
82855: LIST
82856: LIST
82857: PUSH
82858: EMPTY
82859: LIST
82860: LIST
82861: LIST
82862: LIST
82863: LIST
82864: LIST
82865: LIST
82866: LIST
82867: LIST
82868: LIST
82869: LIST
82870: LIST
82871: LIST
82872: LIST
82873: LIST
82874: LIST
82875: LIST
82876: LIST
82877: LIST
82878: LIST
82879: LIST
82880: LIST
82881: LIST
82882: LIST
82883: LIST
82884: LIST
82885: LIST
82886: LIST
82887: LIST
82888: LIST
82889: LIST
82890: LIST
82891: LIST
82892: LIST
82893: LIST
82894: LIST
82895: LIST
82896: LIST
82897: LIST
82898: LIST
82899: LIST
82900: LIST
82901: LIST
82902: LIST
82903: LIST
82904: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
82905: LD_ADDR_VAR 0 30
82909: PUSH
82910: LD_INT 4
82912: PUSH
82913: LD_INT 4
82915: PUSH
82916: EMPTY
82917: LIST
82918: LIST
82919: PUSH
82920: LD_INT 4
82922: PUSH
82923: LD_INT 3
82925: PUSH
82926: EMPTY
82927: LIST
82928: LIST
82929: PUSH
82930: LD_INT 5
82932: PUSH
82933: LD_INT 4
82935: PUSH
82936: EMPTY
82937: LIST
82938: LIST
82939: PUSH
82940: LD_INT 5
82942: PUSH
82943: LD_INT 5
82945: PUSH
82946: EMPTY
82947: LIST
82948: LIST
82949: PUSH
82950: LD_INT 4
82952: PUSH
82953: LD_INT 5
82955: PUSH
82956: EMPTY
82957: LIST
82958: LIST
82959: PUSH
82960: LD_INT 3
82962: PUSH
82963: LD_INT 4
82965: PUSH
82966: EMPTY
82967: LIST
82968: LIST
82969: PUSH
82970: LD_INT 3
82972: PUSH
82973: LD_INT 3
82975: PUSH
82976: EMPTY
82977: LIST
82978: LIST
82979: PUSH
82980: LD_INT 5
82982: PUSH
82983: LD_INT 3
82985: PUSH
82986: EMPTY
82987: LIST
82988: LIST
82989: PUSH
82990: LD_INT 3
82992: PUSH
82993: LD_INT 5
82995: PUSH
82996: EMPTY
82997: LIST
82998: LIST
82999: PUSH
83000: LD_INT 0
83002: PUSH
83003: LD_INT 3
83005: PUSH
83006: EMPTY
83007: LIST
83008: LIST
83009: PUSH
83010: LD_INT 0
83012: PUSH
83013: LD_INT 2
83015: PUSH
83016: EMPTY
83017: LIST
83018: LIST
83019: PUSH
83020: LD_INT 1
83022: PUSH
83023: LD_INT 3
83025: PUSH
83026: EMPTY
83027: LIST
83028: LIST
83029: PUSH
83030: LD_INT 1
83032: PUSH
83033: LD_INT 4
83035: PUSH
83036: EMPTY
83037: LIST
83038: LIST
83039: PUSH
83040: LD_INT 0
83042: PUSH
83043: LD_INT 4
83045: PUSH
83046: EMPTY
83047: LIST
83048: LIST
83049: PUSH
83050: LD_INT 1
83052: NEG
83053: PUSH
83054: LD_INT 3
83056: PUSH
83057: EMPTY
83058: LIST
83059: LIST
83060: PUSH
83061: LD_INT 1
83063: NEG
83064: PUSH
83065: LD_INT 2
83067: PUSH
83068: EMPTY
83069: LIST
83070: LIST
83071: PUSH
83072: LD_INT 2
83074: PUSH
83075: LD_INT 4
83077: PUSH
83078: EMPTY
83079: LIST
83080: LIST
83081: PUSH
83082: LD_INT 2
83084: NEG
83085: PUSH
83086: LD_INT 2
83088: PUSH
83089: EMPTY
83090: LIST
83091: LIST
83092: PUSH
83093: LD_INT 4
83095: NEG
83096: PUSH
83097: LD_INT 0
83099: PUSH
83100: EMPTY
83101: LIST
83102: LIST
83103: PUSH
83104: LD_INT 4
83106: NEG
83107: PUSH
83108: LD_INT 1
83110: NEG
83111: PUSH
83112: EMPTY
83113: LIST
83114: LIST
83115: PUSH
83116: LD_INT 3
83118: NEG
83119: PUSH
83120: LD_INT 0
83122: PUSH
83123: EMPTY
83124: LIST
83125: LIST
83126: PUSH
83127: LD_INT 3
83129: NEG
83130: PUSH
83131: LD_INT 1
83133: PUSH
83134: EMPTY
83135: LIST
83136: LIST
83137: PUSH
83138: LD_INT 4
83140: NEG
83141: PUSH
83142: LD_INT 1
83144: PUSH
83145: EMPTY
83146: LIST
83147: LIST
83148: PUSH
83149: LD_INT 5
83151: NEG
83152: PUSH
83153: LD_INT 0
83155: PUSH
83156: EMPTY
83157: LIST
83158: LIST
83159: PUSH
83160: LD_INT 5
83162: NEG
83163: PUSH
83164: LD_INT 1
83166: NEG
83167: PUSH
83168: EMPTY
83169: LIST
83170: LIST
83171: PUSH
83172: LD_INT 5
83174: NEG
83175: PUSH
83176: LD_INT 2
83178: NEG
83179: PUSH
83180: EMPTY
83181: LIST
83182: LIST
83183: PUSH
83184: LD_INT 3
83186: NEG
83187: PUSH
83188: LD_INT 2
83190: PUSH
83191: EMPTY
83192: LIST
83193: LIST
83194: PUSH
83195: LD_INT 3
83197: NEG
83198: PUSH
83199: LD_INT 3
83201: NEG
83202: PUSH
83203: EMPTY
83204: LIST
83205: LIST
83206: PUSH
83207: LD_INT 3
83209: NEG
83210: PUSH
83211: LD_INT 4
83213: NEG
83214: PUSH
83215: EMPTY
83216: LIST
83217: LIST
83218: PUSH
83219: LD_INT 2
83221: NEG
83222: PUSH
83223: LD_INT 3
83225: NEG
83226: PUSH
83227: EMPTY
83228: LIST
83229: LIST
83230: PUSH
83231: LD_INT 2
83233: NEG
83234: PUSH
83235: LD_INT 2
83237: NEG
83238: PUSH
83239: EMPTY
83240: LIST
83241: LIST
83242: PUSH
83243: LD_INT 3
83245: NEG
83246: PUSH
83247: LD_INT 2
83249: NEG
83250: PUSH
83251: EMPTY
83252: LIST
83253: LIST
83254: PUSH
83255: LD_INT 4
83257: NEG
83258: PUSH
83259: LD_INT 3
83261: NEG
83262: PUSH
83263: EMPTY
83264: LIST
83265: LIST
83266: PUSH
83267: LD_INT 4
83269: NEG
83270: PUSH
83271: LD_INT 4
83273: NEG
83274: PUSH
83275: EMPTY
83276: LIST
83277: LIST
83278: PUSH
83279: LD_INT 2
83281: NEG
83282: PUSH
83283: LD_INT 4
83285: NEG
83286: PUSH
83287: EMPTY
83288: LIST
83289: LIST
83290: PUSH
83291: LD_INT 4
83293: NEG
83294: PUSH
83295: LD_INT 2
83297: NEG
83298: PUSH
83299: EMPTY
83300: LIST
83301: LIST
83302: PUSH
83303: LD_INT 0
83305: PUSH
83306: LD_INT 4
83308: NEG
83309: PUSH
83310: EMPTY
83311: LIST
83312: LIST
83313: PUSH
83314: LD_INT 0
83316: PUSH
83317: LD_INT 5
83319: NEG
83320: PUSH
83321: EMPTY
83322: LIST
83323: LIST
83324: PUSH
83325: LD_INT 1
83327: PUSH
83328: LD_INT 4
83330: NEG
83331: PUSH
83332: EMPTY
83333: LIST
83334: LIST
83335: PUSH
83336: LD_INT 1
83338: PUSH
83339: LD_INT 3
83341: NEG
83342: PUSH
83343: EMPTY
83344: LIST
83345: LIST
83346: PUSH
83347: LD_INT 0
83349: PUSH
83350: LD_INT 3
83352: NEG
83353: PUSH
83354: EMPTY
83355: LIST
83356: LIST
83357: PUSH
83358: LD_INT 1
83360: NEG
83361: PUSH
83362: LD_INT 4
83364: NEG
83365: PUSH
83366: EMPTY
83367: LIST
83368: LIST
83369: PUSH
83370: LD_INT 1
83372: NEG
83373: PUSH
83374: LD_INT 5
83376: NEG
83377: PUSH
83378: EMPTY
83379: LIST
83380: LIST
83381: PUSH
83382: LD_INT 2
83384: PUSH
83385: LD_INT 3
83387: NEG
83388: PUSH
83389: EMPTY
83390: LIST
83391: LIST
83392: PUSH
83393: LD_INT 2
83395: NEG
83396: PUSH
83397: LD_INT 5
83399: NEG
83400: PUSH
83401: EMPTY
83402: LIST
83403: LIST
83404: PUSH
83405: EMPTY
83406: LIST
83407: LIST
83408: LIST
83409: LIST
83410: LIST
83411: LIST
83412: LIST
83413: LIST
83414: LIST
83415: LIST
83416: LIST
83417: LIST
83418: LIST
83419: LIST
83420: LIST
83421: LIST
83422: LIST
83423: LIST
83424: LIST
83425: LIST
83426: LIST
83427: LIST
83428: LIST
83429: LIST
83430: LIST
83431: LIST
83432: LIST
83433: LIST
83434: LIST
83435: LIST
83436: LIST
83437: LIST
83438: LIST
83439: LIST
83440: LIST
83441: LIST
83442: LIST
83443: LIST
83444: LIST
83445: LIST
83446: LIST
83447: LIST
83448: LIST
83449: LIST
83450: LIST
83451: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
83452: LD_ADDR_VAR 0 31
83456: PUSH
83457: LD_INT 0
83459: PUSH
83460: LD_INT 4
83462: PUSH
83463: EMPTY
83464: LIST
83465: LIST
83466: PUSH
83467: LD_INT 0
83469: PUSH
83470: LD_INT 3
83472: PUSH
83473: EMPTY
83474: LIST
83475: LIST
83476: PUSH
83477: LD_INT 1
83479: PUSH
83480: LD_INT 4
83482: PUSH
83483: EMPTY
83484: LIST
83485: LIST
83486: PUSH
83487: LD_INT 1
83489: PUSH
83490: LD_INT 5
83492: PUSH
83493: EMPTY
83494: LIST
83495: LIST
83496: PUSH
83497: LD_INT 0
83499: PUSH
83500: LD_INT 5
83502: PUSH
83503: EMPTY
83504: LIST
83505: LIST
83506: PUSH
83507: LD_INT 1
83509: NEG
83510: PUSH
83511: LD_INT 4
83513: PUSH
83514: EMPTY
83515: LIST
83516: LIST
83517: PUSH
83518: LD_INT 1
83520: NEG
83521: PUSH
83522: LD_INT 3
83524: PUSH
83525: EMPTY
83526: LIST
83527: LIST
83528: PUSH
83529: LD_INT 2
83531: PUSH
83532: LD_INT 5
83534: PUSH
83535: EMPTY
83536: LIST
83537: LIST
83538: PUSH
83539: LD_INT 2
83541: NEG
83542: PUSH
83543: LD_INT 3
83545: PUSH
83546: EMPTY
83547: LIST
83548: LIST
83549: PUSH
83550: LD_INT 3
83552: NEG
83553: PUSH
83554: LD_INT 0
83556: PUSH
83557: EMPTY
83558: LIST
83559: LIST
83560: PUSH
83561: LD_INT 3
83563: NEG
83564: PUSH
83565: LD_INT 1
83567: NEG
83568: PUSH
83569: EMPTY
83570: LIST
83571: LIST
83572: PUSH
83573: LD_INT 2
83575: NEG
83576: PUSH
83577: LD_INT 0
83579: PUSH
83580: EMPTY
83581: LIST
83582: LIST
83583: PUSH
83584: LD_INT 2
83586: NEG
83587: PUSH
83588: LD_INT 1
83590: PUSH
83591: EMPTY
83592: LIST
83593: LIST
83594: PUSH
83595: LD_INT 3
83597: NEG
83598: PUSH
83599: LD_INT 1
83601: PUSH
83602: EMPTY
83603: LIST
83604: LIST
83605: PUSH
83606: LD_INT 4
83608: NEG
83609: PUSH
83610: LD_INT 0
83612: PUSH
83613: EMPTY
83614: LIST
83615: LIST
83616: PUSH
83617: LD_INT 4
83619: NEG
83620: PUSH
83621: LD_INT 1
83623: NEG
83624: PUSH
83625: EMPTY
83626: LIST
83627: LIST
83628: PUSH
83629: LD_INT 4
83631: NEG
83632: PUSH
83633: LD_INT 2
83635: NEG
83636: PUSH
83637: EMPTY
83638: LIST
83639: LIST
83640: PUSH
83641: LD_INT 2
83643: NEG
83644: PUSH
83645: LD_INT 2
83647: PUSH
83648: EMPTY
83649: LIST
83650: LIST
83651: PUSH
83652: LD_INT 4
83654: NEG
83655: PUSH
83656: LD_INT 4
83658: NEG
83659: PUSH
83660: EMPTY
83661: LIST
83662: LIST
83663: PUSH
83664: LD_INT 4
83666: NEG
83667: PUSH
83668: LD_INT 5
83670: NEG
83671: PUSH
83672: EMPTY
83673: LIST
83674: LIST
83675: PUSH
83676: LD_INT 3
83678: NEG
83679: PUSH
83680: LD_INT 4
83682: NEG
83683: PUSH
83684: EMPTY
83685: LIST
83686: LIST
83687: PUSH
83688: LD_INT 3
83690: NEG
83691: PUSH
83692: LD_INT 3
83694: NEG
83695: PUSH
83696: EMPTY
83697: LIST
83698: LIST
83699: PUSH
83700: LD_INT 4
83702: NEG
83703: PUSH
83704: LD_INT 3
83706: NEG
83707: PUSH
83708: EMPTY
83709: LIST
83710: LIST
83711: PUSH
83712: LD_INT 5
83714: NEG
83715: PUSH
83716: LD_INT 4
83718: NEG
83719: PUSH
83720: EMPTY
83721: LIST
83722: LIST
83723: PUSH
83724: LD_INT 5
83726: NEG
83727: PUSH
83728: LD_INT 5
83730: NEG
83731: PUSH
83732: EMPTY
83733: LIST
83734: LIST
83735: PUSH
83736: LD_INT 3
83738: NEG
83739: PUSH
83740: LD_INT 5
83742: NEG
83743: PUSH
83744: EMPTY
83745: LIST
83746: LIST
83747: PUSH
83748: LD_INT 5
83750: NEG
83751: PUSH
83752: LD_INT 3
83754: NEG
83755: PUSH
83756: EMPTY
83757: LIST
83758: LIST
83759: PUSH
83760: LD_INT 0
83762: PUSH
83763: LD_INT 3
83765: NEG
83766: PUSH
83767: EMPTY
83768: LIST
83769: LIST
83770: PUSH
83771: LD_INT 0
83773: PUSH
83774: LD_INT 4
83776: NEG
83777: PUSH
83778: EMPTY
83779: LIST
83780: LIST
83781: PUSH
83782: LD_INT 1
83784: PUSH
83785: LD_INT 3
83787: NEG
83788: PUSH
83789: EMPTY
83790: LIST
83791: LIST
83792: PUSH
83793: LD_INT 1
83795: PUSH
83796: LD_INT 2
83798: NEG
83799: PUSH
83800: EMPTY
83801: LIST
83802: LIST
83803: PUSH
83804: LD_INT 0
83806: PUSH
83807: LD_INT 2
83809: NEG
83810: PUSH
83811: EMPTY
83812: LIST
83813: LIST
83814: PUSH
83815: LD_INT 1
83817: NEG
83818: PUSH
83819: LD_INT 3
83821: NEG
83822: PUSH
83823: EMPTY
83824: LIST
83825: LIST
83826: PUSH
83827: LD_INT 1
83829: NEG
83830: PUSH
83831: LD_INT 4
83833: NEG
83834: PUSH
83835: EMPTY
83836: LIST
83837: LIST
83838: PUSH
83839: LD_INT 2
83841: PUSH
83842: LD_INT 2
83844: NEG
83845: PUSH
83846: EMPTY
83847: LIST
83848: LIST
83849: PUSH
83850: LD_INT 2
83852: NEG
83853: PUSH
83854: LD_INT 4
83856: NEG
83857: PUSH
83858: EMPTY
83859: LIST
83860: LIST
83861: PUSH
83862: LD_INT 4
83864: PUSH
83865: LD_INT 0
83867: PUSH
83868: EMPTY
83869: LIST
83870: LIST
83871: PUSH
83872: LD_INT 4
83874: PUSH
83875: LD_INT 1
83877: NEG
83878: PUSH
83879: EMPTY
83880: LIST
83881: LIST
83882: PUSH
83883: LD_INT 5
83885: PUSH
83886: LD_INT 0
83888: PUSH
83889: EMPTY
83890: LIST
83891: LIST
83892: PUSH
83893: LD_INT 5
83895: PUSH
83896: LD_INT 1
83898: PUSH
83899: EMPTY
83900: LIST
83901: LIST
83902: PUSH
83903: LD_INT 4
83905: PUSH
83906: LD_INT 1
83908: PUSH
83909: EMPTY
83910: LIST
83911: LIST
83912: PUSH
83913: LD_INT 3
83915: PUSH
83916: LD_INT 0
83918: PUSH
83919: EMPTY
83920: LIST
83921: LIST
83922: PUSH
83923: LD_INT 3
83925: PUSH
83926: LD_INT 1
83928: NEG
83929: PUSH
83930: EMPTY
83931: LIST
83932: LIST
83933: PUSH
83934: LD_INT 3
83936: PUSH
83937: LD_INT 2
83939: NEG
83940: PUSH
83941: EMPTY
83942: LIST
83943: LIST
83944: PUSH
83945: LD_INT 5
83947: PUSH
83948: LD_INT 2
83950: PUSH
83951: EMPTY
83952: LIST
83953: LIST
83954: PUSH
83955: EMPTY
83956: LIST
83957: LIST
83958: LIST
83959: LIST
83960: LIST
83961: LIST
83962: LIST
83963: LIST
83964: LIST
83965: LIST
83966: LIST
83967: LIST
83968: LIST
83969: LIST
83970: LIST
83971: LIST
83972: LIST
83973: LIST
83974: LIST
83975: LIST
83976: LIST
83977: LIST
83978: LIST
83979: LIST
83980: LIST
83981: LIST
83982: LIST
83983: LIST
83984: LIST
83985: LIST
83986: LIST
83987: LIST
83988: LIST
83989: LIST
83990: LIST
83991: LIST
83992: LIST
83993: LIST
83994: LIST
83995: LIST
83996: LIST
83997: LIST
83998: LIST
83999: LIST
84000: LIST
84001: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
84002: LD_ADDR_VAR 0 32
84006: PUSH
84007: LD_INT 4
84009: NEG
84010: PUSH
84011: LD_INT 0
84013: PUSH
84014: EMPTY
84015: LIST
84016: LIST
84017: PUSH
84018: LD_INT 4
84020: NEG
84021: PUSH
84022: LD_INT 1
84024: NEG
84025: PUSH
84026: EMPTY
84027: LIST
84028: LIST
84029: PUSH
84030: LD_INT 3
84032: NEG
84033: PUSH
84034: LD_INT 0
84036: PUSH
84037: EMPTY
84038: LIST
84039: LIST
84040: PUSH
84041: LD_INT 3
84043: NEG
84044: PUSH
84045: LD_INT 1
84047: PUSH
84048: EMPTY
84049: LIST
84050: LIST
84051: PUSH
84052: LD_INT 4
84054: NEG
84055: PUSH
84056: LD_INT 1
84058: PUSH
84059: EMPTY
84060: LIST
84061: LIST
84062: PUSH
84063: LD_INT 5
84065: NEG
84066: PUSH
84067: LD_INT 0
84069: PUSH
84070: EMPTY
84071: LIST
84072: LIST
84073: PUSH
84074: LD_INT 5
84076: NEG
84077: PUSH
84078: LD_INT 1
84080: NEG
84081: PUSH
84082: EMPTY
84083: LIST
84084: LIST
84085: PUSH
84086: LD_INT 5
84088: NEG
84089: PUSH
84090: LD_INT 2
84092: NEG
84093: PUSH
84094: EMPTY
84095: LIST
84096: LIST
84097: PUSH
84098: LD_INT 3
84100: NEG
84101: PUSH
84102: LD_INT 2
84104: PUSH
84105: EMPTY
84106: LIST
84107: LIST
84108: PUSH
84109: LD_INT 3
84111: NEG
84112: PUSH
84113: LD_INT 3
84115: NEG
84116: PUSH
84117: EMPTY
84118: LIST
84119: LIST
84120: PUSH
84121: LD_INT 3
84123: NEG
84124: PUSH
84125: LD_INT 4
84127: NEG
84128: PUSH
84129: EMPTY
84130: LIST
84131: LIST
84132: PUSH
84133: LD_INT 2
84135: NEG
84136: PUSH
84137: LD_INT 3
84139: NEG
84140: PUSH
84141: EMPTY
84142: LIST
84143: LIST
84144: PUSH
84145: LD_INT 2
84147: NEG
84148: PUSH
84149: LD_INT 2
84151: NEG
84152: PUSH
84153: EMPTY
84154: LIST
84155: LIST
84156: PUSH
84157: LD_INT 3
84159: NEG
84160: PUSH
84161: LD_INT 2
84163: NEG
84164: PUSH
84165: EMPTY
84166: LIST
84167: LIST
84168: PUSH
84169: LD_INT 4
84171: NEG
84172: PUSH
84173: LD_INT 3
84175: NEG
84176: PUSH
84177: EMPTY
84178: LIST
84179: LIST
84180: PUSH
84181: LD_INT 4
84183: NEG
84184: PUSH
84185: LD_INT 4
84187: NEG
84188: PUSH
84189: EMPTY
84190: LIST
84191: LIST
84192: PUSH
84193: LD_INT 2
84195: NEG
84196: PUSH
84197: LD_INT 4
84199: NEG
84200: PUSH
84201: EMPTY
84202: LIST
84203: LIST
84204: PUSH
84205: LD_INT 4
84207: NEG
84208: PUSH
84209: LD_INT 2
84211: NEG
84212: PUSH
84213: EMPTY
84214: LIST
84215: LIST
84216: PUSH
84217: LD_INT 0
84219: PUSH
84220: LD_INT 4
84222: NEG
84223: PUSH
84224: EMPTY
84225: LIST
84226: LIST
84227: PUSH
84228: LD_INT 0
84230: PUSH
84231: LD_INT 5
84233: NEG
84234: PUSH
84235: EMPTY
84236: LIST
84237: LIST
84238: PUSH
84239: LD_INT 1
84241: PUSH
84242: LD_INT 4
84244: NEG
84245: PUSH
84246: EMPTY
84247: LIST
84248: LIST
84249: PUSH
84250: LD_INT 1
84252: PUSH
84253: LD_INT 3
84255: NEG
84256: PUSH
84257: EMPTY
84258: LIST
84259: LIST
84260: PUSH
84261: LD_INT 0
84263: PUSH
84264: LD_INT 3
84266: NEG
84267: PUSH
84268: EMPTY
84269: LIST
84270: LIST
84271: PUSH
84272: LD_INT 1
84274: NEG
84275: PUSH
84276: LD_INT 4
84278: NEG
84279: PUSH
84280: EMPTY
84281: LIST
84282: LIST
84283: PUSH
84284: LD_INT 1
84286: NEG
84287: PUSH
84288: LD_INT 5
84290: NEG
84291: PUSH
84292: EMPTY
84293: LIST
84294: LIST
84295: PUSH
84296: LD_INT 2
84298: PUSH
84299: LD_INT 3
84301: NEG
84302: PUSH
84303: EMPTY
84304: LIST
84305: LIST
84306: PUSH
84307: LD_INT 2
84309: NEG
84310: PUSH
84311: LD_INT 5
84313: NEG
84314: PUSH
84315: EMPTY
84316: LIST
84317: LIST
84318: PUSH
84319: LD_INT 3
84321: PUSH
84322: LD_INT 0
84324: PUSH
84325: EMPTY
84326: LIST
84327: LIST
84328: PUSH
84329: LD_INT 3
84331: PUSH
84332: LD_INT 1
84334: NEG
84335: PUSH
84336: EMPTY
84337: LIST
84338: LIST
84339: PUSH
84340: LD_INT 4
84342: PUSH
84343: LD_INT 0
84345: PUSH
84346: EMPTY
84347: LIST
84348: LIST
84349: PUSH
84350: LD_INT 4
84352: PUSH
84353: LD_INT 1
84355: PUSH
84356: EMPTY
84357: LIST
84358: LIST
84359: PUSH
84360: LD_INT 3
84362: PUSH
84363: LD_INT 1
84365: PUSH
84366: EMPTY
84367: LIST
84368: LIST
84369: PUSH
84370: LD_INT 2
84372: PUSH
84373: LD_INT 0
84375: PUSH
84376: EMPTY
84377: LIST
84378: LIST
84379: PUSH
84380: LD_INT 2
84382: PUSH
84383: LD_INT 1
84385: NEG
84386: PUSH
84387: EMPTY
84388: LIST
84389: LIST
84390: PUSH
84391: LD_INT 2
84393: PUSH
84394: LD_INT 2
84396: NEG
84397: PUSH
84398: EMPTY
84399: LIST
84400: LIST
84401: PUSH
84402: LD_INT 4
84404: PUSH
84405: LD_INT 2
84407: PUSH
84408: EMPTY
84409: LIST
84410: LIST
84411: PUSH
84412: LD_INT 4
84414: PUSH
84415: LD_INT 4
84417: PUSH
84418: EMPTY
84419: LIST
84420: LIST
84421: PUSH
84422: LD_INT 4
84424: PUSH
84425: LD_INT 3
84427: PUSH
84428: EMPTY
84429: LIST
84430: LIST
84431: PUSH
84432: LD_INT 5
84434: PUSH
84435: LD_INT 4
84437: PUSH
84438: EMPTY
84439: LIST
84440: LIST
84441: PUSH
84442: LD_INT 5
84444: PUSH
84445: LD_INT 5
84447: PUSH
84448: EMPTY
84449: LIST
84450: LIST
84451: PUSH
84452: LD_INT 4
84454: PUSH
84455: LD_INT 5
84457: PUSH
84458: EMPTY
84459: LIST
84460: LIST
84461: PUSH
84462: LD_INT 3
84464: PUSH
84465: LD_INT 4
84467: PUSH
84468: EMPTY
84469: LIST
84470: LIST
84471: PUSH
84472: LD_INT 3
84474: PUSH
84475: LD_INT 3
84477: PUSH
84478: EMPTY
84479: LIST
84480: LIST
84481: PUSH
84482: LD_INT 5
84484: PUSH
84485: LD_INT 3
84487: PUSH
84488: EMPTY
84489: LIST
84490: LIST
84491: PUSH
84492: LD_INT 3
84494: PUSH
84495: LD_INT 5
84497: PUSH
84498: EMPTY
84499: LIST
84500: LIST
84501: PUSH
84502: EMPTY
84503: LIST
84504: LIST
84505: LIST
84506: LIST
84507: LIST
84508: LIST
84509: LIST
84510: LIST
84511: LIST
84512: LIST
84513: LIST
84514: LIST
84515: LIST
84516: LIST
84517: LIST
84518: LIST
84519: LIST
84520: LIST
84521: LIST
84522: LIST
84523: LIST
84524: LIST
84525: LIST
84526: LIST
84527: LIST
84528: LIST
84529: LIST
84530: LIST
84531: LIST
84532: LIST
84533: LIST
84534: LIST
84535: LIST
84536: LIST
84537: LIST
84538: LIST
84539: LIST
84540: LIST
84541: LIST
84542: LIST
84543: LIST
84544: LIST
84545: LIST
84546: LIST
84547: LIST
84548: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
84549: LD_ADDR_VAR 0 33
84553: PUSH
84554: LD_INT 4
84556: NEG
84557: PUSH
84558: LD_INT 4
84560: NEG
84561: PUSH
84562: EMPTY
84563: LIST
84564: LIST
84565: PUSH
84566: LD_INT 4
84568: NEG
84569: PUSH
84570: LD_INT 5
84572: NEG
84573: PUSH
84574: EMPTY
84575: LIST
84576: LIST
84577: PUSH
84578: LD_INT 3
84580: NEG
84581: PUSH
84582: LD_INT 4
84584: NEG
84585: PUSH
84586: EMPTY
84587: LIST
84588: LIST
84589: PUSH
84590: LD_INT 3
84592: NEG
84593: PUSH
84594: LD_INT 3
84596: NEG
84597: PUSH
84598: EMPTY
84599: LIST
84600: LIST
84601: PUSH
84602: LD_INT 4
84604: NEG
84605: PUSH
84606: LD_INT 3
84608: NEG
84609: PUSH
84610: EMPTY
84611: LIST
84612: LIST
84613: PUSH
84614: LD_INT 5
84616: NEG
84617: PUSH
84618: LD_INT 4
84620: NEG
84621: PUSH
84622: EMPTY
84623: LIST
84624: LIST
84625: PUSH
84626: LD_INT 5
84628: NEG
84629: PUSH
84630: LD_INT 5
84632: NEG
84633: PUSH
84634: EMPTY
84635: LIST
84636: LIST
84637: PUSH
84638: LD_INT 3
84640: NEG
84641: PUSH
84642: LD_INT 5
84644: NEG
84645: PUSH
84646: EMPTY
84647: LIST
84648: LIST
84649: PUSH
84650: LD_INT 5
84652: NEG
84653: PUSH
84654: LD_INT 3
84656: NEG
84657: PUSH
84658: EMPTY
84659: LIST
84660: LIST
84661: PUSH
84662: LD_INT 0
84664: PUSH
84665: LD_INT 3
84667: NEG
84668: PUSH
84669: EMPTY
84670: LIST
84671: LIST
84672: PUSH
84673: LD_INT 0
84675: PUSH
84676: LD_INT 4
84678: NEG
84679: PUSH
84680: EMPTY
84681: LIST
84682: LIST
84683: PUSH
84684: LD_INT 1
84686: PUSH
84687: LD_INT 3
84689: NEG
84690: PUSH
84691: EMPTY
84692: LIST
84693: LIST
84694: PUSH
84695: LD_INT 1
84697: PUSH
84698: LD_INT 2
84700: NEG
84701: PUSH
84702: EMPTY
84703: LIST
84704: LIST
84705: PUSH
84706: LD_INT 0
84708: PUSH
84709: LD_INT 2
84711: NEG
84712: PUSH
84713: EMPTY
84714: LIST
84715: LIST
84716: PUSH
84717: LD_INT 1
84719: NEG
84720: PUSH
84721: LD_INT 3
84723: NEG
84724: PUSH
84725: EMPTY
84726: LIST
84727: LIST
84728: PUSH
84729: LD_INT 1
84731: NEG
84732: PUSH
84733: LD_INT 4
84735: NEG
84736: PUSH
84737: EMPTY
84738: LIST
84739: LIST
84740: PUSH
84741: LD_INT 2
84743: PUSH
84744: LD_INT 2
84746: NEG
84747: PUSH
84748: EMPTY
84749: LIST
84750: LIST
84751: PUSH
84752: LD_INT 2
84754: NEG
84755: PUSH
84756: LD_INT 4
84758: NEG
84759: PUSH
84760: EMPTY
84761: LIST
84762: LIST
84763: PUSH
84764: LD_INT 4
84766: PUSH
84767: LD_INT 0
84769: PUSH
84770: EMPTY
84771: LIST
84772: LIST
84773: PUSH
84774: LD_INT 4
84776: PUSH
84777: LD_INT 1
84779: NEG
84780: PUSH
84781: EMPTY
84782: LIST
84783: LIST
84784: PUSH
84785: LD_INT 5
84787: PUSH
84788: LD_INT 0
84790: PUSH
84791: EMPTY
84792: LIST
84793: LIST
84794: PUSH
84795: LD_INT 5
84797: PUSH
84798: LD_INT 1
84800: PUSH
84801: EMPTY
84802: LIST
84803: LIST
84804: PUSH
84805: LD_INT 4
84807: PUSH
84808: LD_INT 1
84810: PUSH
84811: EMPTY
84812: LIST
84813: LIST
84814: PUSH
84815: LD_INT 3
84817: PUSH
84818: LD_INT 0
84820: PUSH
84821: EMPTY
84822: LIST
84823: LIST
84824: PUSH
84825: LD_INT 3
84827: PUSH
84828: LD_INT 1
84830: NEG
84831: PUSH
84832: EMPTY
84833: LIST
84834: LIST
84835: PUSH
84836: LD_INT 3
84838: PUSH
84839: LD_INT 2
84841: NEG
84842: PUSH
84843: EMPTY
84844: LIST
84845: LIST
84846: PUSH
84847: LD_INT 5
84849: PUSH
84850: LD_INT 2
84852: PUSH
84853: EMPTY
84854: LIST
84855: LIST
84856: PUSH
84857: LD_INT 3
84859: PUSH
84860: LD_INT 3
84862: PUSH
84863: EMPTY
84864: LIST
84865: LIST
84866: PUSH
84867: LD_INT 3
84869: PUSH
84870: LD_INT 2
84872: PUSH
84873: EMPTY
84874: LIST
84875: LIST
84876: PUSH
84877: LD_INT 4
84879: PUSH
84880: LD_INT 3
84882: PUSH
84883: EMPTY
84884: LIST
84885: LIST
84886: PUSH
84887: LD_INT 4
84889: PUSH
84890: LD_INT 4
84892: PUSH
84893: EMPTY
84894: LIST
84895: LIST
84896: PUSH
84897: LD_INT 3
84899: PUSH
84900: LD_INT 4
84902: PUSH
84903: EMPTY
84904: LIST
84905: LIST
84906: PUSH
84907: LD_INT 2
84909: PUSH
84910: LD_INT 3
84912: PUSH
84913: EMPTY
84914: LIST
84915: LIST
84916: PUSH
84917: LD_INT 2
84919: PUSH
84920: LD_INT 2
84922: PUSH
84923: EMPTY
84924: LIST
84925: LIST
84926: PUSH
84927: LD_INT 4
84929: PUSH
84930: LD_INT 2
84932: PUSH
84933: EMPTY
84934: LIST
84935: LIST
84936: PUSH
84937: LD_INT 2
84939: PUSH
84940: LD_INT 4
84942: PUSH
84943: EMPTY
84944: LIST
84945: LIST
84946: PUSH
84947: LD_INT 0
84949: PUSH
84950: LD_INT 4
84952: PUSH
84953: EMPTY
84954: LIST
84955: LIST
84956: PUSH
84957: LD_INT 0
84959: PUSH
84960: LD_INT 3
84962: PUSH
84963: EMPTY
84964: LIST
84965: LIST
84966: PUSH
84967: LD_INT 1
84969: PUSH
84970: LD_INT 4
84972: PUSH
84973: EMPTY
84974: LIST
84975: LIST
84976: PUSH
84977: LD_INT 1
84979: PUSH
84980: LD_INT 5
84982: PUSH
84983: EMPTY
84984: LIST
84985: LIST
84986: PUSH
84987: LD_INT 0
84989: PUSH
84990: LD_INT 5
84992: PUSH
84993: EMPTY
84994: LIST
84995: LIST
84996: PUSH
84997: LD_INT 1
84999: NEG
85000: PUSH
85001: LD_INT 4
85003: PUSH
85004: EMPTY
85005: LIST
85006: LIST
85007: PUSH
85008: LD_INT 1
85010: NEG
85011: PUSH
85012: LD_INT 3
85014: PUSH
85015: EMPTY
85016: LIST
85017: LIST
85018: PUSH
85019: LD_INT 2
85021: PUSH
85022: LD_INT 5
85024: PUSH
85025: EMPTY
85026: LIST
85027: LIST
85028: PUSH
85029: LD_INT 2
85031: NEG
85032: PUSH
85033: LD_INT 3
85035: PUSH
85036: EMPTY
85037: LIST
85038: LIST
85039: PUSH
85040: EMPTY
85041: LIST
85042: LIST
85043: LIST
85044: LIST
85045: LIST
85046: LIST
85047: LIST
85048: LIST
85049: LIST
85050: LIST
85051: LIST
85052: LIST
85053: LIST
85054: LIST
85055: LIST
85056: LIST
85057: LIST
85058: LIST
85059: LIST
85060: LIST
85061: LIST
85062: LIST
85063: LIST
85064: LIST
85065: LIST
85066: LIST
85067: LIST
85068: LIST
85069: LIST
85070: LIST
85071: LIST
85072: LIST
85073: LIST
85074: LIST
85075: LIST
85076: LIST
85077: LIST
85078: LIST
85079: LIST
85080: LIST
85081: LIST
85082: LIST
85083: LIST
85084: LIST
85085: LIST
85086: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
85087: LD_ADDR_VAR 0 34
85091: PUSH
85092: LD_INT 0
85094: PUSH
85095: LD_INT 4
85097: NEG
85098: PUSH
85099: EMPTY
85100: LIST
85101: LIST
85102: PUSH
85103: LD_INT 0
85105: PUSH
85106: LD_INT 5
85108: NEG
85109: PUSH
85110: EMPTY
85111: LIST
85112: LIST
85113: PUSH
85114: LD_INT 1
85116: PUSH
85117: LD_INT 4
85119: NEG
85120: PUSH
85121: EMPTY
85122: LIST
85123: LIST
85124: PUSH
85125: LD_INT 1
85127: PUSH
85128: LD_INT 3
85130: NEG
85131: PUSH
85132: EMPTY
85133: LIST
85134: LIST
85135: PUSH
85136: LD_INT 0
85138: PUSH
85139: LD_INT 3
85141: NEG
85142: PUSH
85143: EMPTY
85144: LIST
85145: LIST
85146: PUSH
85147: LD_INT 1
85149: NEG
85150: PUSH
85151: LD_INT 4
85153: NEG
85154: PUSH
85155: EMPTY
85156: LIST
85157: LIST
85158: PUSH
85159: LD_INT 1
85161: NEG
85162: PUSH
85163: LD_INT 5
85165: NEG
85166: PUSH
85167: EMPTY
85168: LIST
85169: LIST
85170: PUSH
85171: LD_INT 2
85173: PUSH
85174: LD_INT 3
85176: NEG
85177: PUSH
85178: EMPTY
85179: LIST
85180: LIST
85181: PUSH
85182: LD_INT 2
85184: NEG
85185: PUSH
85186: LD_INT 5
85188: NEG
85189: PUSH
85190: EMPTY
85191: LIST
85192: LIST
85193: PUSH
85194: LD_INT 3
85196: PUSH
85197: LD_INT 0
85199: PUSH
85200: EMPTY
85201: LIST
85202: LIST
85203: PUSH
85204: LD_INT 3
85206: PUSH
85207: LD_INT 1
85209: NEG
85210: PUSH
85211: EMPTY
85212: LIST
85213: LIST
85214: PUSH
85215: LD_INT 4
85217: PUSH
85218: LD_INT 0
85220: PUSH
85221: EMPTY
85222: LIST
85223: LIST
85224: PUSH
85225: LD_INT 4
85227: PUSH
85228: LD_INT 1
85230: PUSH
85231: EMPTY
85232: LIST
85233: LIST
85234: PUSH
85235: LD_INT 3
85237: PUSH
85238: LD_INT 1
85240: PUSH
85241: EMPTY
85242: LIST
85243: LIST
85244: PUSH
85245: LD_INT 2
85247: PUSH
85248: LD_INT 0
85250: PUSH
85251: EMPTY
85252: LIST
85253: LIST
85254: PUSH
85255: LD_INT 2
85257: PUSH
85258: LD_INT 1
85260: NEG
85261: PUSH
85262: EMPTY
85263: LIST
85264: LIST
85265: PUSH
85266: LD_INT 2
85268: PUSH
85269: LD_INT 2
85271: NEG
85272: PUSH
85273: EMPTY
85274: LIST
85275: LIST
85276: PUSH
85277: LD_INT 4
85279: PUSH
85280: LD_INT 2
85282: PUSH
85283: EMPTY
85284: LIST
85285: LIST
85286: PUSH
85287: LD_INT 4
85289: PUSH
85290: LD_INT 4
85292: PUSH
85293: EMPTY
85294: LIST
85295: LIST
85296: PUSH
85297: LD_INT 4
85299: PUSH
85300: LD_INT 3
85302: PUSH
85303: EMPTY
85304: LIST
85305: LIST
85306: PUSH
85307: LD_INT 5
85309: PUSH
85310: LD_INT 4
85312: PUSH
85313: EMPTY
85314: LIST
85315: LIST
85316: PUSH
85317: LD_INT 5
85319: PUSH
85320: LD_INT 5
85322: PUSH
85323: EMPTY
85324: LIST
85325: LIST
85326: PUSH
85327: LD_INT 4
85329: PUSH
85330: LD_INT 5
85332: PUSH
85333: EMPTY
85334: LIST
85335: LIST
85336: PUSH
85337: LD_INT 3
85339: PUSH
85340: LD_INT 4
85342: PUSH
85343: EMPTY
85344: LIST
85345: LIST
85346: PUSH
85347: LD_INT 3
85349: PUSH
85350: LD_INT 3
85352: PUSH
85353: EMPTY
85354: LIST
85355: LIST
85356: PUSH
85357: LD_INT 5
85359: PUSH
85360: LD_INT 3
85362: PUSH
85363: EMPTY
85364: LIST
85365: LIST
85366: PUSH
85367: LD_INT 3
85369: PUSH
85370: LD_INT 5
85372: PUSH
85373: EMPTY
85374: LIST
85375: LIST
85376: PUSH
85377: LD_INT 0
85379: PUSH
85380: LD_INT 3
85382: PUSH
85383: EMPTY
85384: LIST
85385: LIST
85386: PUSH
85387: LD_INT 0
85389: PUSH
85390: LD_INT 2
85392: PUSH
85393: EMPTY
85394: LIST
85395: LIST
85396: PUSH
85397: LD_INT 1
85399: PUSH
85400: LD_INT 3
85402: PUSH
85403: EMPTY
85404: LIST
85405: LIST
85406: PUSH
85407: LD_INT 1
85409: PUSH
85410: LD_INT 4
85412: PUSH
85413: EMPTY
85414: LIST
85415: LIST
85416: PUSH
85417: LD_INT 0
85419: PUSH
85420: LD_INT 4
85422: PUSH
85423: EMPTY
85424: LIST
85425: LIST
85426: PUSH
85427: LD_INT 1
85429: NEG
85430: PUSH
85431: LD_INT 3
85433: PUSH
85434: EMPTY
85435: LIST
85436: LIST
85437: PUSH
85438: LD_INT 1
85440: NEG
85441: PUSH
85442: LD_INT 2
85444: PUSH
85445: EMPTY
85446: LIST
85447: LIST
85448: PUSH
85449: LD_INT 2
85451: PUSH
85452: LD_INT 4
85454: PUSH
85455: EMPTY
85456: LIST
85457: LIST
85458: PUSH
85459: LD_INT 2
85461: NEG
85462: PUSH
85463: LD_INT 2
85465: PUSH
85466: EMPTY
85467: LIST
85468: LIST
85469: PUSH
85470: LD_INT 4
85472: NEG
85473: PUSH
85474: LD_INT 0
85476: PUSH
85477: EMPTY
85478: LIST
85479: LIST
85480: PUSH
85481: LD_INT 4
85483: NEG
85484: PUSH
85485: LD_INT 1
85487: NEG
85488: PUSH
85489: EMPTY
85490: LIST
85491: LIST
85492: PUSH
85493: LD_INT 3
85495: NEG
85496: PUSH
85497: LD_INT 0
85499: PUSH
85500: EMPTY
85501: LIST
85502: LIST
85503: PUSH
85504: LD_INT 3
85506: NEG
85507: PUSH
85508: LD_INT 1
85510: PUSH
85511: EMPTY
85512: LIST
85513: LIST
85514: PUSH
85515: LD_INT 4
85517: NEG
85518: PUSH
85519: LD_INT 1
85521: PUSH
85522: EMPTY
85523: LIST
85524: LIST
85525: PUSH
85526: LD_INT 5
85528: NEG
85529: PUSH
85530: LD_INT 0
85532: PUSH
85533: EMPTY
85534: LIST
85535: LIST
85536: PUSH
85537: LD_INT 5
85539: NEG
85540: PUSH
85541: LD_INT 1
85543: NEG
85544: PUSH
85545: EMPTY
85546: LIST
85547: LIST
85548: PUSH
85549: LD_INT 5
85551: NEG
85552: PUSH
85553: LD_INT 2
85555: NEG
85556: PUSH
85557: EMPTY
85558: LIST
85559: LIST
85560: PUSH
85561: LD_INT 3
85563: NEG
85564: PUSH
85565: LD_INT 2
85567: PUSH
85568: EMPTY
85569: LIST
85570: LIST
85571: PUSH
85572: EMPTY
85573: LIST
85574: LIST
85575: LIST
85576: LIST
85577: LIST
85578: LIST
85579: LIST
85580: LIST
85581: LIST
85582: LIST
85583: LIST
85584: LIST
85585: LIST
85586: LIST
85587: LIST
85588: LIST
85589: LIST
85590: LIST
85591: LIST
85592: LIST
85593: LIST
85594: LIST
85595: LIST
85596: LIST
85597: LIST
85598: LIST
85599: LIST
85600: LIST
85601: LIST
85602: LIST
85603: LIST
85604: LIST
85605: LIST
85606: LIST
85607: LIST
85608: LIST
85609: LIST
85610: LIST
85611: LIST
85612: LIST
85613: LIST
85614: LIST
85615: LIST
85616: LIST
85617: LIST
85618: ST_TO_ADDR
// end ; end ;
85619: GO 85622
85621: POP
// case btype of b_depot , b_warehouse :
85622: LD_VAR 0 1
85626: PUSH
85627: LD_INT 0
85629: DOUBLE
85630: EQUAL
85631: IFTRUE 85641
85633: LD_INT 1
85635: DOUBLE
85636: EQUAL
85637: IFTRUE 85641
85639: GO 85842
85641: POP
// case nation of nation_american :
85642: LD_VAR 0 5
85646: PUSH
85647: LD_INT 1
85649: DOUBLE
85650: EQUAL
85651: IFTRUE 85655
85653: GO 85711
85655: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
85656: LD_ADDR_VAR 0 9
85660: PUSH
85661: LD_VAR 0 11
85665: PUSH
85666: LD_VAR 0 12
85670: PUSH
85671: LD_VAR 0 13
85675: PUSH
85676: LD_VAR 0 14
85680: PUSH
85681: LD_VAR 0 15
85685: PUSH
85686: LD_VAR 0 16
85690: PUSH
85691: EMPTY
85692: LIST
85693: LIST
85694: LIST
85695: LIST
85696: LIST
85697: LIST
85698: PUSH
85699: LD_VAR 0 4
85703: PUSH
85704: LD_INT 1
85706: PLUS
85707: ARRAY
85708: ST_TO_ADDR
85709: GO 85840
85711: LD_INT 2
85713: DOUBLE
85714: EQUAL
85715: IFTRUE 85719
85717: GO 85775
85719: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
85720: LD_ADDR_VAR 0 9
85724: PUSH
85725: LD_VAR 0 17
85729: PUSH
85730: LD_VAR 0 18
85734: PUSH
85735: LD_VAR 0 19
85739: PUSH
85740: LD_VAR 0 20
85744: PUSH
85745: LD_VAR 0 21
85749: PUSH
85750: LD_VAR 0 22
85754: PUSH
85755: EMPTY
85756: LIST
85757: LIST
85758: LIST
85759: LIST
85760: LIST
85761: LIST
85762: PUSH
85763: LD_VAR 0 4
85767: PUSH
85768: LD_INT 1
85770: PLUS
85771: ARRAY
85772: ST_TO_ADDR
85773: GO 85840
85775: LD_INT 3
85777: DOUBLE
85778: EQUAL
85779: IFTRUE 85783
85781: GO 85839
85783: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
85784: LD_ADDR_VAR 0 9
85788: PUSH
85789: LD_VAR 0 23
85793: PUSH
85794: LD_VAR 0 24
85798: PUSH
85799: LD_VAR 0 25
85803: PUSH
85804: LD_VAR 0 26
85808: PUSH
85809: LD_VAR 0 27
85813: PUSH
85814: LD_VAR 0 28
85818: PUSH
85819: EMPTY
85820: LIST
85821: LIST
85822: LIST
85823: LIST
85824: LIST
85825: LIST
85826: PUSH
85827: LD_VAR 0 4
85831: PUSH
85832: LD_INT 1
85834: PLUS
85835: ARRAY
85836: ST_TO_ADDR
85837: GO 85840
85839: POP
85840: GO 86395
85842: LD_INT 2
85844: DOUBLE
85845: EQUAL
85846: IFTRUE 85856
85848: LD_INT 3
85850: DOUBLE
85851: EQUAL
85852: IFTRUE 85856
85854: GO 85912
85856: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
85857: LD_ADDR_VAR 0 9
85861: PUSH
85862: LD_VAR 0 29
85866: PUSH
85867: LD_VAR 0 30
85871: PUSH
85872: LD_VAR 0 31
85876: PUSH
85877: LD_VAR 0 32
85881: PUSH
85882: LD_VAR 0 33
85886: PUSH
85887: LD_VAR 0 34
85891: PUSH
85892: EMPTY
85893: LIST
85894: LIST
85895: LIST
85896: LIST
85897: LIST
85898: LIST
85899: PUSH
85900: LD_VAR 0 4
85904: PUSH
85905: LD_INT 1
85907: PLUS
85908: ARRAY
85909: ST_TO_ADDR
85910: GO 86395
85912: LD_INT 16
85914: DOUBLE
85915: EQUAL
85916: IFTRUE 85974
85918: LD_INT 17
85920: DOUBLE
85921: EQUAL
85922: IFTRUE 85974
85924: LD_INT 18
85926: DOUBLE
85927: EQUAL
85928: IFTRUE 85974
85930: LD_INT 19
85932: DOUBLE
85933: EQUAL
85934: IFTRUE 85974
85936: LD_INT 22
85938: DOUBLE
85939: EQUAL
85940: IFTRUE 85974
85942: LD_INT 20
85944: DOUBLE
85945: EQUAL
85946: IFTRUE 85974
85948: LD_INT 21
85950: DOUBLE
85951: EQUAL
85952: IFTRUE 85974
85954: LD_INT 23
85956: DOUBLE
85957: EQUAL
85958: IFTRUE 85974
85960: LD_INT 24
85962: DOUBLE
85963: EQUAL
85964: IFTRUE 85974
85966: LD_INT 25
85968: DOUBLE
85969: EQUAL
85970: IFTRUE 85974
85972: GO 86030
85974: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
85975: LD_ADDR_VAR 0 9
85979: PUSH
85980: LD_VAR 0 35
85984: PUSH
85985: LD_VAR 0 36
85989: PUSH
85990: LD_VAR 0 37
85994: PUSH
85995: LD_VAR 0 38
85999: PUSH
86000: LD_VAR 0 39
86004: PUSH
86005: LD_VAR 0 40
86009: PUSH
86010: EMPTY
86011: LIST
86012: LIST
86013: LIST
86014: LIST
86015: LIST
86016: LIST
86017: PUSH
86018: LD_VAR 0 4
86022: PUSH
86023: LD_INT 1
86025: PLUS
86026: ARRAY
86027: ST_TO_ADDR
86028: GO 86395
86030: LD_INT 6
86032: DOUBLE
86033: EQUAL
86034: IFTRUE 86086
86036: LD_INT 7
86038: DOUBLE
86039: EQUAL
86040: IFTRUE 86086
86042: LD_INT 8
86044: DOUBLE
86045: EQUAL
86046: IFTRUE 86086
86048: LD_INT 13
86050: DOUBLE
86051: EQUAL
86052: IFTRUE 86086
86054: LD_INT 12
86056: DOUBLE
86057: EQUAL
86058: IFTRUE 86086
86060: LD_INT 15
86062: DOUBLE
86063: EQUAL
86064: IFTRUE 86086
86066: LD_INT 11
86068: DOUBLE
86069: EQUAL
86070: IFTRUE 86086
86072: LD_INT 14
86074: DOUBLE
86075: EQUAL
86076: IFTRUE 86086
86078: LD_INT 10
86080: DOUBLE
86081: EQUAL
86082: IFTRUE 86086
86084: GO 86142
86086: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
86087: LD_ADDR_VAR 0 9
86091: PUSH
86092: LD_VAR 0 41
86096: PUSH
86097: LD_VAR 0 42
86101: PUSH
86102: LD_VAR 0 43
86106: PUSH
86107: LD_VAR 0 44
86111: PUSH
86112: LD_VAR 0 45
86116: PUSH
86117: LD_VAR 0 46
86121: PUSH
86122: EMPTY
86123: LIST
86124: LIST
86125: LIST
86126: LIST
86127: LIST
86128: LIST
86129: PUSH
86130: LD_VAR 0 4
86134: PUSH
86135: LD_INT 1
86137: PLUS
86138: ARRAY
86139: ST_TO_ADDR
86140: GO 86395
86142: LD_INT 36
86144: DOUBLE
86145: EQUAL
86146: IFTRUE 86150
86148: GO 86206
86150: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
86151: LD_ADDR_VAR 0 9
86155: PUSH
86156: LD_VAR 0 47
86160: PUSH
86161: LD_VAR 0 48
86165: PUSH
86166: LD_VAR 0 49
86170: PUSH
86171: LD_VAR 0 50
86175: PUSH
86176: LD_VAR 0 51
86180: PUSH
86181: LD_VAR 0 52
86185: PUSH
86186: EMPTY
86187: LIST
86188: LIST
86189: LIST
86190: LIST
86191: LIST
86192: LIST
86193: PUSH
86194: LD_VAR 0 4
86198: PUSH
86199: LD_INT 1
86201: PLUS
86202: ARRAY
86203: ST_TO_ADDR
86204: GO 86395
86206: LD_INT 4
86208: DOUBLE
86209: EQUAL
86210: IFTRUE 86232
86212: LD_INT 5
86214: DOUBLE
86215: EQUAL
86216: IFTRUE 86232
86218: LD_INT 34
86220: DOUBLE
86221: EQUAL
86222: IFTRUE 86232
86224: LD_INT 37
86226: DOUBLE
86227: EQUAL
86228: IFTRUE 86232
86230: GO 86288
86232: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
86233: LD_ADDR_VAR 0 9
86237: PUSH
86238: LD_VAR 0 53
86242: PUSH
86243: LD_VAR 0 54
86247: PUSH
86248: LD_VAR 0 55
86252: PUSH
86253: LD_VAR 0 56
86257: PUSH
86258: LD_VAR 0 57
86262: PUSH
86263: LD_VAR 0 58
86267: PUSH
86268: EMPTY
86269: LIST
86270: LIST
86271: LIST
86272: LIST
86273: LIST
86274: LIST
86275: PUSH
86276: LD_VAR 0 4
86280: PUSH
86281: LD_INT 1
86283: PLUS
86284: ARRAY
86285: ST_TO_ADDR
86286: GO 86395
86288: LD_INT 31
86290: DOUBLE
86291: EQUAL
86292: IFTRUE 86338
86294: LD_INT 32
86296: DOUBLE
86297: EQUAL
86298: IFTRUE 86338
86300: LD_INT 33
86302: DOUBLE
86303: EQUAL
86304: IFTRUE 86338
86306: LD_INT 27
86308: DOUBLE
86309: EQUAL
86310: IFTRUE 86338
86312: LD_INT 26
86314: DOUBLE
86315: EQUAL
86316: IFTRUE 86338
86318: LD_INT 28
86320: DOUBLE
86321: EQUAL
86322: IFTRUE 86338
86324: LD_INT 29
86326: DOUBLE
86327: EQUAL
86328: IFTRUE 86338
86330: LD_INT 30
86332: DOUBLE
86333: EQUAL
86334: IFTRUE 86338
86336: GO 86394
86338: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
86339: LD_ADDR_VAR 0 9
86343: PUSH
86344: LD_VAR 0 59
86348: PUSH
86349: LD_VAR 0 60
86353: PUSH
86354: LD_VAR 0 61
86358: PUSH
86359: LD_VAR 0 62
86363: PUSH
86364: LD_VAR 0 63
86368: PUSH
86369: LD_VAR 0 64
86373: PUSH
86374: EMPTY
86375: LIST
86376: LIST
86377: LIST
86378: LIST
86379: LIST
86380: LIST
86381: PUSH
86382: LD_VAR 0 4
86386: PUSH
86387: LD_INT 1
86389: PLUS
86390: ARRAY
86391: ST_TO_ADDR
86392: GO 86395
86394: POP
// temp_list2 = [ ] ;
86395: LD_ADDR_VAR 0 10
86399: PUSH
86400: EMPTY
86401: ST_TO_ADDR
// for i in temp_list do
86402: LD_ADDR_VAR 0 8
86406: PUSH
86407: LD_VAR 0 9
86411: PUSH
86412: FOR_IN
86413: IFFALSE 86465
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
86415: LD_ADDR_VAR 0 10
86419: PUSH
86420: LD_VAR 0 10
86424: PUSH
86425: LD_VAR 0 8
86429: PUSH
86430: LD_INT 1
86432: ARRAY
86433: PUSH
86434: LD_VAR 0 2
86438: PLUS
86439: PUSH
86440: LD_VAR 0 8
86444: PUSH
86445: LD_INT 2
86447: ARRAY
86448: PUSH
86449: LD_VAR 0 3
86453: PLUS
86454: PUSH
86455: EMPTY
86456: LIST
86457: LIST
86458: PUSH
86459: EMPTY
86460: LIST
86461: ADD
86462: ST_TO_ADDR
86463: GO 86412
86465: POP
86466: POP
// result = temp_list2 ;
86467: LD_ADDR_VAR 0 7
86471: PUSH
86472: LD_VAR 0 10
86476: ST_TO_ADDR
// end ;
86477: LD_VAR 0 7
86481: RET
// export function EnemyInRange ( unit , dist ) ; begin
86482: LD_INT 0
86484: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
86485: LD_ADDR_VAR 0 3
86489: PUSH
86490: LD_VAR 0 1
86494: PPUSH
86495: CALL_OW 255
86499: PPUSH
86500: LD_VAR 0 1
86504: PPUSH
86505: CALL_OW 250
86509: PPUSH
86510: LD_VAR 0 1
86514: PPUSH
86515: CALL_OW 251
86519: PPUSH
86520: LD_VAR 0 2
86524: PPUSH
86525: CALL 59855 0 4
86529: PUSH
86530: LD_INT 4
86532: ARRAY
86533: ST_TO_ADDR
// end ;
86534: LD_VAR 0 3
86538: RET
// export function PlayerSeeMe ( unit ) ; begin
86539: LD_INT 0
86541: PPUSH
// result := See ( your_side , unit ) ;
86542: LD_ADDR_VAR 0 2
86546: PUSH
86547: LD_OWVAR 2
86551: PPUSH
86552: LD_VAR 0 1
86556: PPUSH
86557: CALL_OW 292
86561: ST_TO_ADDR
// end ;
86562: LD_VAR 0 2
86566: RET
// export function ReverseDir ( unit ) ; begin
86567: LD_INT 0
86569: PPUSH
// if not unit then
86570: LD_VAR 0 1
86574: NOT
86575: IFFALSE 86579
// exit ;
86577: GO 86602
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
86579: LD_ADDR_VAR 0 2
86583: PUSH
86584: LD_VAR 0 1
86588: PPUSH
86589: CALL_OW 254
86593: PUSH
86594: LD_INT 3
86596: PLUS
86597: PUSH
86598: LD_INT 6
86600: MOD
86601: ST_TO_ADDR
// end ;
86602: LD_VAR 0 2
86606: RET
// export function ReverseArray ( array ) ; var i ; begin
86607: LD_INT 0
86609: PPUSH
86610: PPUSH
// if not array then
86611: LD_VAR 0 1
86615: NOT
86616: IFFALSE 86620
// exit ;
86618: GO 86675
// result := [ ] ;
86620: LD_ADDR_VAR 0 2
86624: PUSH
86625: EMPTY
86626: ST_TO_ADDR
// for i := array downto 1 do
86627: LD_ADDR_VAR 0 3
86631: PUSH
86632: DOUBLE
86633: LD_VAR 0 1
86637: INC
86638: ST_TO_ADDR
86639: LD_INT 1
86641: PUSH
86642: FOR_DOWNTO
86643: IFFALSE 86673
// result := Join ( result , array [ i ] ) ;
86645: LD_ADDR_VAR 0 2
86649: PUSH
86650: LD_VAR 0 2
86654: PPUSH
86655: LD_VAR 0 1
86659: PUSH
86660: LD_VAR 0 3
86664: ARRAY
86665: PPUSH
86666: CALL 91318 0 2
86670: ST_TO_ADDR
86671: GO 86642
86673: POP
86674: POP
// end ;
86675: LD_VAR 0 2
86679: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
86680: LD_INT 0
86682: PPUSH
86683: PPUSH
86684: PPUSH
86685: PPUSH
86686: PPUSH
86687: PPUSH
// if not unit or not hexes then
86688: LD_VAR 0 1
86692: NOT
86693: PUSH
86694: LD_VAR 0 2
86698: NOT
86699: OR
86700: IFFALSE 86704
// exit ;
86702: GO 86827
// dist := 9999 ;
86704: LD_ADDR_VAR 0 5
86708: PUSH
86709: LD_INT 9999
86711: ST_TO_ADDR
// for i = 1 to hexes do
86712: LD_ADDR_VAR 0 4
86716: PUSH
86717: DOUBLE
86718: LD_INT 1
86720: DEC
86721: ST_TO_ADDR
86722: LD_VAR 0 2
86726: PUSH
86727: FOR_TO
86728: IFFALSE 86815
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
86730: LD_ADDR_VAR 0 6
86734: PUSH
86735: LD_VAR 0 1
86739: PPUSH
86740: LD_VAR 0 2
86744: PUSH
86745: LD_VAR 0 4
86749: ARRAY
86750: PUSH
86751: LD_INT 1
86753: ARRAY
86754: PPUSH
86755: LD_VAR 0 2
86759: PUSH
86760: LD_VAR 0 4
86764: ARRAY
86765: PUSH
86766: LD_INT 2
86768: ARRAY
86769: PPUSH
86770: CALL_OW 297
86774: ST_TO_ADDR
// if tdist < dist then
86775: LD_VAR 0 6
86779: PUSH
86780: LD_VAR 0 5
86784: LESS
86785: IFFALSE 86813
// begin hex := hexes [ i ] ;
86787: LD_ADDR_VAR 0 8
86791: PUSH
86792: LD_VAR 0 2
86796: PUSH
86797: LD_VAR 0 4
86801: ARRAY
86802: ST_TO_ADDR
// dist := tdist ;
86803: LD_ADDR_VAR 0 5
86807: PUSH
86808: LD_VAR 0 6
86812: ST_TO_ADDR
// end ; end ;
86813: GO 86727
86815: POP
86816: POP
// result := hex ;
86817: LD_ADDR_VAR 0 3
86821: PUSH
86822: LD_VAR 0 8
86826: ST_TO_ADDR
// end ;
86827: LD_VAR 0 3
86831: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
86832: LD_INT 0
86834: PPUSH
86835: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
86836: LD_VAR 0 1
86840: NOT
86841: PUSH
86842: LD_VAR 0 1
86846: PUSH
86847: LD_INT 21
86849: PUSH
86850: LD_INT 2
86852: PUSH
86853: EMPTY
86854: LIST
86855: LIST
86856: PUSH
86857: LD_INT 23
86859: PUSH
86860: LD_INT 2
86862: PUSH
86863: EMPTY
86864: LIST
86865: LIST
86866: PUSH
86867: EMPTY
86868: LIST
86869: LIST
86870: PPUSH
86871: CALL_OW 69
86875: IN
86876: NOT
86877: OR
86878: IFFALSE 86882
// exit ;
86880: GO 86929
// for i = 1 to 3 do
86882: LD_ADDR_VAR 0 3
86886: PUSH
86887: DOUBLE
86888: LD_INT 1
86890: DEC
86891: ST_TO_ADDR
86892: LD_INT 3
86894: PUSH
86895: FOR_TO
86896: IFFALSE 86927
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
86898: LD_VAR 0 1
86902: PPUSH
86903: CALL_OW 250
86907: PPUSH
86908: LD_VAR 0 1
86912: PPUSH
86913: CALL_OW 251
86917: PPUSH
86918: LD_INT 1
86920: PPUSH
86921: CALL_OW 453
86925: GO 86895
86927: POP
86928: POP
// end ;
86929: LD_VAR 0 2
86933: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
86934: LD_INT 0
86936: PPUSH
86937: PPUSH
86938: PPUSH
86939: PPUSH
86940: PPUSH
86941: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
86942: LD_VAR 0 1
86946: NOT
86947: PUSH
86948: LD_VAR 0 2
86952: NOT
86953: OR
86954: PUSH
86955: LD_VAR 0 1
86959: PPUSH
86960: CALL_OW 314
86964: OR
86965: IFFALSE 86969
// exit ;
86967: GO 87436
// if GetLives ( i ) < 250 then
86969: LD_VAR 0 4
86973: PPUSH
86974: CALL_OW 256
86978: PUSH
86979: LD_INT 250
86981: LESS
86982: IFFALSE 86995
// begin ComAutodestruct ( i ) ;
86984: LD_VAR 0 4
86988: PPUSH
86989: CALL 86832 0 1
// exit ;
86993: GO 87436
// end ; x := GetX ( enemy_unit ) ;
86995: LD_ADDR_VAR 0 7
86999: PUSH
87000: LD_VAR 0 2
87004: PPUSH
87005: CALL_OW 250
87009: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
87010: LD_ADDR_VAR 0 8
87014: PUSH
87015: LD_VAR 0 2
87019: PPUSH
87020: CALL_OW 251
87024: ST_TO_ADDR
// if not x or not y then
87025: LD_VAR 0 7
87029: NOT
87030: PUSH
87031: LD_VAR 0 8
87035: NOT
87036: OR
87037: IFFALSE 87041
// exit ;
87039: GO 87436
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
87041: LD_ADDR_VAR 0 6
87045: PUSH
87046: LD_VAR 0 7
87050: PPUSH
87051: LD_INT 0
87053: PPUSH
87054: LD_INT 4
87056: PPUSH
87057: CALL_OW 272
87061: PUSH
87062: LD_VAR 0 8
87066: PPUSH
87067: LD_INT 0
87069: PPUSH
87070: LD_INT 4
87072: PPUSH
87073: CALL_OW 273
87077: PUSH
87078: EMPTY
87079: LIST
87080: LIST
87081: PUSH
87082: LD_VAR 0 7
87086: PPUSH
87087: LD_INT 1
87089: PPUSH
87090: LD_INT 4
87092: PPUSH
87093: CALL_OW 272
87097: PUSH
87098: LD_VAR 0 8
87102: PPUSH
87103: LD_INT 1
87105: PPUSH
87106: LD_INT 4
87108: PPUSH
87109: CALL_OW 273
87113: PUSH
87114: EMPTY
87115: LIST
87116: LIST
87117: PUSH
87118: LD_VAR 0 7
87122: PPUSH
87123: LD_INT 2
87125: PPUSH
87126: LD_INT 4
87128: PPUSH
87129: CALL_OW 272
87133: PUSH
87134: LD_VAR 0 8
87138: PPUSH
87139: LD_INT 2
87141: PPUSH
87142: LD_INT 4
87144: PPUSH
87145: CALL_OW 273
87149: PUSH
87150: EMPTY
87151: LIST
87152: LIST
87153: PUSH
87154: LD_VAR 0 7
87158: PPUSH
87159: LD_INT 3
87161: PPUSH
87162: LD_INT 4
87164: PPUSH
87165: CALL_OW 272
87169: PUSH
87170: LD_VAR 0 8
87174: PPUSH
87175: LD_INT 3
87177: PPUSH
87178: LD_INT 4
87180: PPUSH
87181: CALL_OW 273
87185: PUSH
87186: EMPTY
87187: LIST
87188: LIST
87189: PUSH
87190: LD_VAR 0 7
87194: PPUSH
87195: LD_INT 4
87197: PPUSH
87198: LD_INT 4
87200: PPUSH
87201: CALL_OW 272
87205: PUSH
87206: LD_VAR 0 8
87210: PPUSH
87211: LD_INT 4
87213: PPUSH
87214: LD_INT 4
87216: PPUSH
87217: CALL_OW 273
87221: PUSH
87222: EMPTY
87223: LIST
87224: LIST
87225: PUSH
87226: LD_VAR 0 7
87230: PPUSH
87231: LD_INT 5
87233: PPUSH
87234: LD_INT 4
87236: PPUSH
87237: CALL_OW 272
87241: PUSH
87242: LD_VAR 0 8
87246: PPUSH
87247: LD_INT 5
87249: PPUSH
87250: LD_INT 4
87252: PPUSH
87253: CALL_OW 273
87257: PUSH
87258: EMPTY
87259: LIST
87260: LIST
87261: PUSH
87262: EMPTY
87263: LIST
87264: LIST
87265: LIST
87266: LIST
87267: LIST
87268: LIST
87269: ST_TO_ADDR
// for i = tmp downto 1 do
87270: LD_ADDR_VAR 0 4
87274: PUSH
87275: DOUBLE
87276: LD_VAR 0 6
87280: INC
87281: ST_TO_ADDR
87282: LD_INT 1
87284: PUSH
87285: FOR_DOWNTO
87286: IFFALSE 87387
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
87288: LD_VAR 0 6
87292: PUSH
87293: LD_VAR 0 4
87297: ARRAY
87298: PUSH
87299: LD_INT 1
87301: ARRAY
87302: PPUSH
87303: LD_VAR 0 6
87307: PUSH
87308: LD_VAR 0 4
87312: ARRAY
87313: PUSH
87314: LD_INT 2
87316: ARRAY
87317: PPUSH
87318: CALL_OW 488
87322: NOT
87323: PUSH
87324: LD_VAR 0 6
87328: PUSH
87329: LD_VAR 0 4
87333: ARRAY
87334: PUSH
87335: LD_INT 1
87337: ARRAY
87338: PPUSH
87339: LD_VAR 0 6
87343: PUSH
87344: LD_VAR 0 4
87348: ARRAY
87349: PUSH
87350: LD_INT 2
87352: ARRAY
87353: PPUSH
87354: CALL_OW 428
87358: PUSH
87359: LD_INT 0
87361: NONEQUAL
87362: OR
87363: IFFALSE 87385
// tmp := Delete ( tmp , i ) ;
87365: LD_ADDR_VAR 0 6
87369: PUSH
87370: LD_VAR 0 6
87374: PPUSH
87375: LD_VAR 0 4
87379: PPUSH
87380: CALL_OW 3
87384: ST_TO_ADDR
87385: GO 87285
87387: POP
87388: POP
// j := GetClosestHex ( unit , tmp ) ;
87389: LD_ADDR_VAR 0 5
87393: PUSH
87394: LD_VAR 0 1
87398: PPUSH
87399: LD_VAR 0 6
87403: PPUSH
87404: CALL 86680 0 2
87408: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
87409: LD_VAR 0 1
87413: PPUSH
87414: LD_VAR 0 5
87418: PUSH
87419: LD_INT 1
87421: ARRAY
87422: PPUSH
87423: LD_VAR 0 5
87427: PUSH
87428: LD_INT 2
87430: ARRAY
87431: PPUSH
87432: CALL_OW 111
// end ;
87436: LD_VAR 0 3
87440: RET
// export function PrepareApemanSoldier ( ) ; begin
87441: LD_INT 0
87443: PPUSH
// uc_nation := 0 ;
87444: LD_ADDR_OWVAR 21
87448: PUSH
87449: LD_INT 0
87451: ST_TO_ADDR
// hc_sex := sex_male ;
87452: LD_ADDR_OWVAR 27
87456: PUSH
87457: LD_INT 1
87459: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
87460: LD_ADDR_OWVAR 28
87464: PUSH
87465: LD_INT 15
87467: ST_TO_ADDR
// hc_gallery :=  ;
87468: LD_ADDR_OWVAR 33
87472: PUSH
87473: LD_STRING 
87475: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
87476: LD_ADDR_OWVAR 31
87480: PUSH
87481: LD_INT 0
87483: PPUSH
87484: LD_INT 3
87486: PPUSH
87487: CALL_OW 12
87491: PUSH
87492: LD_INT 0
87494: PPUSH
87495: LD_INT 3
87497: PPUSH
87498: CALL_OW 12
87502: PUSH
87503: LD_INT 0
87505: PUSH
87506: LD_INT 0
87508: PUSH
87509: EMPTY
87510: LIST
87511: LIST
87512: LIST
87513: LIST
87514: ST_TO_ADDR
// end ;
87515: LD_VAR 0 1
87519: RET
// export function PrepareApemanEngineer ( ) ; begin
87520: LD_INT 0
87522: PPUSH
// uc_nation := 0 ;
87523: LD_ADDR_OWVAR 21
87527: PUSH
87528: LD_INT 0
87530: ST_TO_ADDR
// hc_sex := sex_male ;
87531: LD_ADDR_OWVAR 27
87535: PUSH
87536: LD_INT 1
87538: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
87539: LD_ADDR_OWVAR 28
87543: PUSH
87544: LD_INT 16
87546: ST_TO_ADDR
// hc_gallery :=  ;
87547: LD_ADDR_OWVAR 33
87551: PUSH
87552: LD_STRING 
87554: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
87555: LD_ADDR_OWVAR 31
87559: PUSH
87560: LD_INT 0
87562: PPUSH
87563: LD_INT 3
87565: PPUSH
87566: CALL_OW 12
87570: PUSH
87571: LD_INT 0
87573: PPUSH
87574: LD_INT 3
87576: PPUSH
87577: CALL_OW 12
87581: PUSH
87582: LD_INT 0
87584: PUSH
87585: LD_INT 0
87587: PUSH
87588: EMPTY
87589: LIST
87590: LIST
87591: LIST
87592: LIST
87593: ST_TO_ADDR
// end ;
87594: LD_VAR 0 1
87598: RET
// export function PrepareApeman ( agressivity ) ; begin
87599: LD_INT 0
87601: PPUSH
// uc_side := 0 ;
87602: LD_ADDR_OWVAR 20
87606: PUSH
87607: LD_INT 0
87609: ST_TO_ADDR
// uc_nation := 0 ;
87610: LD_ADDR_OWVAR 21
87614: PUSH
87615: LD_INT 0
87617: ST_TO_ADDR
// hc_sex := sex_male ;
87618: LD_ADDR_OWVAR 27
87622: PUSH
87623: LD_INT 1
87625: ST_TO_ADDR
// hc_class := class_apeman ;
87626: LD_ADDR_OWVAR 28
87630: PUSH
87631: LD_INT 12
87633: ST_TO_ADDR
// hc_gallery :=  ;
87634: LD_ADDR_OWVAR 33
87638: PUSH
87639: LD_STRING 
87641: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
87642: LD_ADDR_OWVAR 35
87646: PUSH
87647: LD_VAR 0 1
87651: NEG
87652: PPUSH
87653: LD_VAR 0 1
87657: PPUSH
87658: CALL_OW 12
87662: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
87663: LD_ADDR_OWVAR 31
87667: PUSH
87668: LD_INT 0
87670: PPUSH
87671: LD_INT 3
87673: PPUSH
87674: CALL_OW 12
87678: PUSH
87679: LD_INT 0
87681: PPUSH
87682: LD_INT 3
87684: PPUSH
87685: CALL_OW 12
87689: PUSH
87690: LD_INT 0
87692: PUSH
87693: LD_INT 0
87695: PUSH
87696: EMPTY
87697: LIST
87698: LIST
87699: LIST
87700: LIST
87701: ST_TO_ADDR
// end ;
87702: LD_VAR 0 2
87706: RET
// export function PrepareTiger ( agressivity ) ; begin
87707: LD_INT 0
87709: PPUSH
// uc_side := 0 ;
87710: LD_ADDR_OWVAR 20
87714: PUSH
87715: LD_INT 0
87717: ST_TO_ADDR
// uc_nation := 0 ;
87718: LD_ADDR_OWVAR 21
87722: PUSH
87723: LD_INT 0
87725: ST_TO_ADDR
// hc_class := class_tiger ;
87726: LD_ADDR_OWVAR 28
87730: PUSH
87731: LD_INT 14
87733: ST_TO_ADDR
// hc_gallery :=  ;
87734: LD_ADDR_OWVAR 33
87738: PUSH
87739: LD_STRING 
87741: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
87742: LD_ADDR_OWVAR 35
87746: PUSH
87747: LD_VAR 0 1
87751: NEG
87752: PPUSH
87753: LD_VAR 0 1
87757: PPUSH
87758: CALL_OW 12
87762: ST_TO_ADDR
// end ;
87763: LD_VAR 0 2
87767: RET
// export function PrepareEnchidna ( ) ; begin
87768: LD_INT 0
87770: PPUSH
// uc_side := 0 ;
87771: LD_ADDR_OWVAR 20
87775: PUSH
87776: LD_INT 0
87778: ST_TO_ADDR
// uc_nation := 0 ;
87779: LD_ADDR_OWVAR 21
87783: PUSH
87784: LD_INT 0
87786: ST_TO_ADDR
// hc_class := class_baggie ;
87787: LD_ADDR_OWVAR 28
87791: PUSH
87792: LD_INT 13
87794: ST_TO_ADDR
// hc_gallery :=  ;
87795: LD_ADDR_OWVAR 33
87799: PUSH
87800: LD_STRING 
87802: ST_TO_ADDR
// end ;
87803: LD_VAR 0 1
87807: RET
// export function PrepareFrog ( ) ; begin
87808: LD_INT 0
87810: PPUSH
// uc_side := 0 ;
87811: LD_ADDR_OWVAR 20
87815: PUSH
87816: LD_INT 0
87818: ST_TO_ADDR
// uc_nation := 0 ;
87819: LD_ADDR_OWVAR 21
87823: PUSH
87824: LD_INT 0
87826: ST_TO_ADDR
// hc_class := class_frog ;
87827: LD_ADDR_OWVAR 28
87831: PUSH
87832: LD_INT 19
87834: ST_TO_ADDR
// hc_gallery :=  ;
87835: LD_ADDR_OWVAR 33
87839: PUSH
87840: LD_STRING 
87842: ST_TO_ADDR
// end ;
87843: LD_VAR 0 1
87847: RET
// export function PrepareFish ( ) ; begin
87848: LD_INT 0
87850: PPUSH
// uc_side := 0 ;
87851: LD_ADDR_OWVAR 20
87855: PUSH
87856: LD_INT 0
87858: ST_TO_ADDR
// uc_nation := 0 ;
87859: LD_ADDR_OWVAR 21
87863: PUSH
87864: LD_INT 0
87866: ST_TO_ADDR
// hc_class := class_fish ;
87867: LD_ADDR_OWVAR 28
87871: PUSH
87872: LD_INT 20
87874: ST_TO_ADDR
// hc_gallery :=  ;
87875: LD_ADDR_OWVAR 33
87879: PUSH
87880: LD_STRING 
87882: ST_TO_ADDR
// end ;
87883: LD_VAR 0 1
87887: RET
// export function PrepareBird ( ) ; begin
87888: LD_INT 0
87890: PPUSH
// uc_side := 0 ;
87891: LD_ADDR_OWVAR 20
87895: PUSH
87896: LD_INT 0
87898: ST_TO_ADDR
// uc_nation := 0 ;
87899: LD_ADDR_OWVAR 21
87903: PUSH
87904: LD_INT 0
87906: ST_TO_ADDR
// hc_class := class_phororhacos ;
87907: LD_ADDR_OWVAR 28
87911: PUSH
87912: LD_INT 18
87914: ST_TO_ADDR
// hc_gallery :=  ;
87915: LD_ADDR_OWVAR 33
87919: PUSH
87920: LD_STRING 
87922: ST_TO_ADDR
// end ;
87923: LD_VAR 0 1
87927: RET
// export function PrepareHorse ( ) ; begin
87928: LD_INT 0
87930: PPUSH
// uc_side := 0 ;
87931: LD_ADDR_OWVAR 20
87935: PUSH
87936: LD_INT 0
87938: ST_TO_ADDR
// uc_nation := 0 ;
87939: LD_ADDR_OWVAR 21
87943: PUSH
87944: LD_INT 0
87946: ST_TO_ADDR
// hc_class := class_horse ;
87947: LD_ADDR_OWVAR 28
87951: PUSH
87952: LD_INT 21
87954: ST_TO_ADDR
// hc_gallery :=  ;
87955: LD_ADDR_OWVAR 33
87959: PUSH
87960: LD_STRING 
87962: ST_TO_ADDR
// end ;
87963: LD_VAR 0 1
87967: RET
// export function PrepareMastodont ( ) ; begin
87968: LD_INT 0
87970: PPUSH
// uc_side := 0 ;
87971: LD_ADDR_OWVAR 20
87975: PUSH
87976: LD_INT 0
87978: ST_TO_ADDR
// uc_nation := 0 ;
87979: LD_ADDR_OWVAR 21
87983: PUSH
87984: LD_INT 0
87986: ST_TO_ADDR
// vc_chassis := class_mastodont ;
87987: LD_ADDR_OWVAR 37
87991: PUSH
87992: LD_INT 31
87994: ST_TO_ADDR
// vc_control := control_rider ;
87995: LD_ADDR_OWVAR 38
87999: PUSH
88000: LD_INT 4
88002: ST_TO_ADDR
// end ;
88003: LD_VAR 0 1
88007: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
88008: LD_INT 0
88010: PPUSH
88011: PPUSH
88012: PPUSH
// uc_side = 0 ;
88013: LD_ADDR_OWVAR 20
88017: PUSH
88018: LD_INT 0
88020: ST_TO_ADDR
// uc_nation = 0 ;
88021: LD_ADDR_OWVAR 21
88025: PUSH
88026: LD_INT 0
88028: ST_TO_ADDR
// InitHc_All ( ) ;
88029: CALL_OW 584
// InitVc ;
88033: CALL_OW 20
// if mastodonts then
88037: LD_VAR 0 6
88041: IFFALSE 88108
// for i = 1 to mastodonts do
88043: LD_ADDR_VAR 0 11
88047: PUSH
88048: DOUBLE
88049: LD_INT 1
88051: DEC
88052: ST_TO_ADDR
88053: LD_VAR 0 6
88057: PUSH
88058: FOR_TO
88059: IFFALSE 88106
// begin vc_chassis := 31 ;
88061: LD_ADDR_OWVAR 37
88065: PUSH
88066: LD_INT 31
88068: ST_TO_ADDR
// vc_control := control_rider ;
88069: LD_ADDR_OWVAR 38
88073: PUSH
88074: LD_INT 4
88076: ST_TO_ADDR
// animal := CreateVehicle ;
88077: LD_ADDR_VAR 0 12
88081: PUSH
88082: CALL_OW 45
88086: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
88087: LD_VAR 0 12
88091: PPUSH
88092: LD_VAR 0 8
88096: PPUSH
88097: LD_INT 0
88099: PPUSH
88100: CALL 90236 0 3
// end ;
88104: GO 88058
88106: POP
88107: POP
// if horses then
88108: LD_VAR 0 5
88112: IFFALSE 88179
// for i = 1 to horses do
88114: LD_ADDR_VAR 0 11
88118: PUSH
88119: DOUBLE
88120: LD_INT 1
88122: DEC
88123: ST_TO_ADDR
88124: LD_VAR 0 5
88128: PUSH
88129: FOR_TO
88130: IFFALSE 88177
// begin hc_class := 21 ;
88132: LD_ADDR_OWVAR 28
88136: PUSH
88137: LD_INT 21
88139: ST_TO_ADDR
// hc_gallery :=  ;
88140: LD_ADDR_OWVAR 33
88144: PUSH
88145: LD_STRING 
88147: ST_TO_ADDR
// animal := CreateHuman ;
88148: LD_ADDR_VAR 0 12
88152: PUSH
88153: CALL_OW 44
88157: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
88158: LD_VAR 0 12
88162: PPUSH
88163: LD_VAR 0 8
88167: PPUSH
88168: LD_INT 0
88170: PPUSH
88171: CALL 90236 0 3
// end ;
88175: GO 88129
88177: POP
88178: POP
// if birds then
88179: LD_VAR 0 1
88183: IFFALSE 88250
// for i = 1 to birds do
88185: LD_ADDR_VAR 0 11
88189: PUSH
88190: DOUBLE
88191: LD_INT 1
88193: DEC
88194: ST_TO_ADDR
88195: LD_VAR 0 1
88199: PUSH
88200: FOR_TO
88201: IFFALSE 88248
// begin hc_class := 18 ;
88203: LD_ADDR_OWVAR 28
88207: PUSH
88208: LD_INT 18
88210: ST_TO_ADDR
// hc_gallery =  ;
88211: LD_ADDR_OWVAR 33
88215: PUSH
88216: LD_STRING 
88218: ST_TO_ADDR
// animal := CreateHuman ;
88219: LD_ADDR_VAR 0 12
88223: PUSH
88224: CALL_OW 44
88228: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
88229: LD_VAR 0 12
88233: PPUSH
88234: LD_VAR 0 8
88238: PPUSH
88239: LD_INT 0
88241: PPUSH
88242: CALL 90236 0 3
// end ;
88246: GO 88200
88248: POP
88249: POP
// if tigers then
88250: LD_VAR 0 2
88254: IFFALSE 88338
// for i = 1 to tigers do
88256: LD_ADDR_VAR 0 11
88260: PUSH
88261: DOUBLE
88262: LD_INT 1
88264: DEC
88265: ST_TO_ADDR
88266: LD_VAR 0 2
88270: PUSH
88271: FOR_TO
88272: IFFALSE 88336
// begin hc_class = class_tiger ;
88274: LD_ADDR_OWVAR 28
88278: PUSH
88279: LD_INT 14
88281: ST_TO_ADDR
// hc_gallery =  ;
88282: LD_ADDR_OWVAR 33
88286: PUSH
88287: LD_STRING 
88289: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
88290: LD_ADDR_OWVAR 35
88294: PUSH
88295: LD_INT 7
88297: NEG
88298: PPUSH
88299: LD_INT 7
88301: PPUSH
88302: CALL_OW 12
88306: ST_TO_ADDR
// animal := CreateHuman ;
88307: LD_ADDR_VAR 0 12
88311: PUSH
88312: CALL_OW 44
88316: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
88317: LD_VAR 0 12
88321: PPUSH
88322: LD_VAR 0 8
88326: PPUSH
88327: LD_INT 0
88329: PPUSH
88330: CALL 90236 0 3
// end ;
88334: GO 88271
88336: POP
88337: POP
// if apemans then
88338: LD_VAR 0 3
88342: IFFALSE 88465
// for i = 1 to apemans do
88344: LD_ADDR_VAR 0 11
88348: PUSH
88349: DOUBLE
88350: LD_INT 1
88352: DEC
88353: ST_TO_ADDR
88354: LD_VAR 0 3
88358: PUSH
88359: FOR_TO
88360: IFFALSE 88463
// begin hc_class = class_apeman ;
88362: LD_ADDR_OWVAR 28
88366: PUSH
88367: LD_INT 12
88369: ST_TO_ADDR
// hc_gallery =  ;
88370: LD_ADDR_OWVAR 33
88374: PUSH
88375: LD_STRING 
88377: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
88378: LD_ADDR_OWVAR 35
88382: PUSH
88383: LD_INT 2
88385: NEG
88386: PPUSH
88387: LD_INT 2
88389: PPUSH
88390: CALL_OW 12
88394: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
88395: LD_ADDR_OWVAR 31
88399: PUSH
88400: LD_INT 1
88402: PPUSH
88403: LD_INT 3
88405: PPUSH
88406: CALL_OW 12
88410: PUSH
88411: LD_INT 1
88413: PPUSH
88414: LD_INT 3
88416: PPUSH
88417: CALL_OW 12
88421: PUSH
88422: LD_INT 0
88424: PUSH
88425: LD_INT 0
88427: PUSH
88428: EMPTY
88429: LIST
88430: LIST
88431: LIST
88432: LIST
88433: ST_TO_ADDR
// animal := CreateHuman ;
88434: LD_ADDR_VAR 0 12
88438: PUSH
88439: CALL_OW 44
88443: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
88444: LD_VAR 0 12
88448: PPUSH
88449: LD_VAR 0 8
88453: PPUSH
88454: LD_INT 0
88456: PPUSH
88457: CALL 90236 0 3
// end ;
88461: GO 88359
88463: POP
88464: POP
// if enchidnas then
88465: LD_VAR 0 4
88469: IFFALSE 88536
// for i = 1 to enchidnas do
88471: LD_ADDR_VAR 0 11
88475: PUSH
88476: DOUBLE
88477: LD_INT 1
88479: DEC
88480: ST_TO_ADDR
88481: LD_VAR 0 4
88485: PUSH
88486: FOR_TO
88487: IFFALSE 88534
// begin hc_class = 13 ;
88489: LD_ADDR_OWVAR 28
88493: PUSH
88494: LD_INT 13
88496: ST_TO_ADDR
// hc_gallery =  ;
88497: LD_ADDR_OWVAR 33
88501: PUSH
88502: LD_STRING 
88504: ST_TO_ADDR
// animal := CreateHuman ;
88505: LD_ADDR_VAR 0 12
88509: PUSH
88510: CALL_OW 44
88514: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
88515: LD_VAR 0 12
88519: PPUSH
88520: LD_VAR 0 8
88524: PPUSH
88525: LD_INT 0
88527: PPUSH
88528: CALL 90236 0 3
// end ;
88532: GO 88486
88534: POP
88535: POP
// if fishes then
88536: LD_VAR 0 7
88540: IFFALSE 88607
// for i = 1 to fishes do
88542: LD_ADDR_VAR 0 11
88546: PUSH
88547: DOUBLE
88548: LD_INT 1
88550: DEC
88551: ST_TO_ADDR
88552: LD_VAR 0 7
88556: PUSH
88557: FOR_TO
88558: IFFALSE 88605
// begin hc_class = 20 ;
88560: LD_ADDR_OWVAR 28
88564: PUSH
88565: LD_INT 20
88567: ST_TO_ADDR
// hc_gallery =  ;
88568: LD_ADDR_OWVAR 33
88572: PUSH
88573: LD_STRING 
88575: ST_TO_ADDR
// animal := CreateHuman ;
88576: LD_ADDR_VAR 0 12
88580: PUSH
88581: CALL_OW 44
88585: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
88586: LD_VAR 0 12
88590: PPUSH
88591: LD_VAR 0 9
88595: PPUSH
88596: LD_INT 0
88598: PPUSH
88599: CALL 90236 0 3
// end ;
88603: GO 88557
88605: POP
88606: POP
// end ;
88607: LD_VAR 0 10
88611: RET
// export function WantHeal ( sci , unit ) ; begin
88612: LD_INT 0
88614: PPUSH
// if GetTaskList ( sci ) > 0 then
88615: LD_VAR 0 1
88619: PPUSH
88620: CALL_OW 437
88624: PUSH
88625: LD_INT 0
88627: GREATER
88628: IFFALSE 88698
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
88630: LD_VAR 0 1
88634: PPUSH
88635: CALL_OW 437
88639: PUSH
88640: LD_INT 1
88642: ARRAY
88643: PUSH
88644: LD_INT 1
88646: ARRAY
88647: PUSH
88648: LD_STRING l
88650: EQUAL
88651: PUSH
88652: LD_VAR 0 1
88656: PPUSH
88657: CALL_OW 437
88661: PUSH
88662: LD_INT 1
88664: ARRAY
88665: PUSH
88666: LD_INT 4
88668: ARRAY
88669: PUSH
88670: LD_VAR 0 2
88674: EQUAL
88675: AND
88676: IFFALSE 88688
// result := true else
88678: LD_ADDR_VAR 0 3
88682: PUSH
88683: LD_INT 1
88685: ST_TO_ADDR
88686: GO 88696
// result := false ;
88688: LD_ADDR_VAR 0 3
88692: PUSH
88693: LD_INT 0
88695: ST_TO_ADDR
// end else
88696: GO 88706
// result := false ;
88698: LD_ADDR_VAR 0 3
88702: PUSH
88703: LD_INT 0
88705: ST_TO_ADDR
// end ;
88706: LD_VAR 0 3
88710: RET
// export function HealTarget ( sci ) ; begin
88711: LD_INT 0
88713: PPUSH
// if not sci then
88714: LD_VAR 0 1
88718: NOT
88719: IFFALSE 88723
// exit ;
88721: GO 88788
// result := 0 ;
88723: LD_ADDR_VAR 0 2
88727: PUSH
88728: LD_INT 0
88730: ST_TO_ADDR
// if GetTaskList ( sci ) then
88731: LD_VAR 0 1
88735: PPUSH
88736: CALL_OW 437
88740: IFFALSE 88788
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
88742: LD_VAR 0 1
88746: PPUSH
88747: CALL_OW 437
88751: PUSH
88752: LD_INT 1
88754: ARRAY
88755: PUSH
88756: LD_INT 1
88758: ARRAY
88759: PUSH
88760: LD_STRING l
88762: EQUAL
88763: IFFALSE 88788
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
88765: LD_ADDR_VAR 0 2
88769: PUSH
88770: LD_VAR 0 1
88774: PPUSH
88775: CALL_OW 437
88779: PUSH
88780: LD_INT 1
88782: ARRAY
88783: PUSH
88784: LD_INT 4
88786: ARRAY
88787: ST_TO_ADDR
// end ;
88788: LD_VAR 0 2
88792: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
88793: LD_INT 0
88795: PPUSH
88796: PPUSH
88797: PPUSH
88798: PPUSH
// if not base_units then
88799: LD_VAR 0 1
88803: NOT
88804: IFFALSE 88808
// exit ;
88806: GO 88895
// result := false ;
88808: LD_ADDR_VAR 0 2
88812: PUSH
88813: LD_INT 0
88815: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
88816: LD_ADDR_VAR 0 5
88820: PUSH
88821: LD_VAR 0 1
88825: PPUSH
88826: LD_INT 21
88828: PUSH
88829: LD_INT 3
88831: PUSH
88832: EMPTY
88833: LIST
88834: LIST
88835: PPUSH
88836: CALL_OW 72
88840: ST_TO_ADDR
// if not tmp then
88841: LD_VAR 0 5
88845: NOT
88846: IFFALSE 88850
// exit ;
88848: GO 88895
// for i in tmp do
88850: LD_ADDR_VAR 0 3
88854: PUSH
88855: LD_VAR 0 5
88859: PUSH
88860: FOR_IN
88861: IFFALSE 88893
// begin result := EnemyInRange ( i , 22 ) ;
88863: LD_ADDR_VAR 0 2
88867: PUSH
88868: LD_VAR 0 3
88872: PPUSH
88873: LD_INT 22
88875: PPUSH
88876: CALL 86482 0 2
88880: ST_TO_ADDR
// if result then
88881: LD_VAR 0 2
88885: IFFALSE 88891
// exit ;
88887: POP
88888: POP
88889: GO 88895
// end ;
88891: GO 88860
88893: POP
88894: POP
// end ;
88895: LD_VAR 0 2
88899: RET
// export function FilterByTag ( units , tag ) ; begin
88900: LD_INT 0
88902: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
88903: LD_ADDR_VAR 0 3
88907: PUSH
88908: LD_VAR 0 1
88912: PPUSH
88913: LD_INT 120
88915: PUSH
88916: LD_VAR 0 2
88920: PUSH
88921: EMPTY
88922: LIST
88923: LIST
88924: PPUSH
88925: CALL_OW 72
88929: ST_TO_ADDR
// end ;
88930: LD_VAR 0 3
88934: RET
// export function IsDriver ( un ) ; begin
88935: LD_INT 0
88937: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
88938: LD_ADDR_VAR 0 2
88942: PUSH
88943: LD_VAR 0 1
88947: PUSH
88948: LD_INT 55
88950: PUSH
88951: EMPTY
88952: LIST
88953: PPUSH
88954: CALL_OW 69
88958: IN
88959: ST_TO_ADDR
// end ;
88960: LD_VAR 0 2
88964: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
88965: LD_INT 0
88967: PPUSH
88968: PPUSH
// list := [ ] ;
88969: LD_ADDR_VAR 0 5
88973: PUSH
88974: EMPTY
88975: ST_TO_ADDR
// case d of 0 :
88976: LD_VAR 0 3
88980: PUSH
88981: LD_INT 0
88983: DOUBLE
88984: EQUAL
88985: IFTRUE 88989
88987: GO 89122
88989: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
88990: LD_ADDR_VAR 0 5
88994: PUSH
88995: LD_VAR 0 1
88999: PUSH
89000: LD_INT 4
89002: MINUS
89003: PUSH
89004: LD_VAR 0 2
89008: PUSH
89009: LD_INT 4
89011: MINUS
89012: PUSH
89013: LD_INT 2
89015: PUSH
89016: EMPTY
89017: LIST
89018: LIST
89019: LIST
89020: PUSH
89021: LD_VAR 0 1
89025: PUSH
89026: LD_INT 3
89028: MINUS
89029: PUSH
89030: LD_VAR 0 2
89034: PUSH
89035: LD_INT 1
89037: PUSH
89038: EMPTY
89039: LIST
89040: LIST
89041: LIST
89042: PUSH
89043: LD_VAR 0 1
89047: PUSH
89048: LD_INT 4
89050: PLUS
89051: PUSH
89052: LD_VAR 0 2
89056: PUSH
89057: LD_INT 4
89059: PUSH
89060: EMPTY
89061: LIST
89062: LIST
89063: LIST
89064: PUSH
89065: LD_VAR 0 1
89069: PUSH
89070: LD_INT 3
89072: PLUS
89073: PUSH
89074: LD_VAR 0 2
89078: PUSH
89079: LD_INT 3
89081: PLUS
89082: PUSH
89083: LD_INT 5
89085: PUSH
89086: EMPTY
89087: LIST
89088: LIST
89089: LIST
89090: PUSH
89091: LD_VAR 0 1
89095: PUSH
89096: LD_VAR 0 2
89100: PUSH
89101: LD_INT 4
89103: PLUS
89104: PUSH
89105: LD_INT 0
89107: PUSH
89108: EMPTY
89109: LIST
89110: LIST
89111: LIST
89112: PUSH
89113: EMPTY
89114: LIST
89115: LIST
89116: LIST
89117: LIST
89118: LIST
89119: ST_TO_ADDR
// end ; 1 :
89120: GO 89820
89122: LD_INT 1
89124: DOUBLE
89125: EQUAL
89126: IFTRUE 89130
89128: GO 89263
89130: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
89131: LD_ADDR_VAR 0 5
89135: PUSH
89136: LD_VAR 0 1
89140: PUSH
89141: LD_VAR 0 2
89145: PUSH
89146: LD_INT 4
89148: MINUS
89149: PUSH
89150: LD_INT 3
89152: PUSH
89153: EMPTY
89154: LIST
89155: LIST
89156: LIST
89157: PUSH
89158: LD_VAR 0 1
89162: PUSH
89163: LD_INT 3
89165: MINUS
89166: PUSH
89167: LD_VAR 0 2
89171: PUSH
89172: LD_INT 3
89174: MINUS
89175: PUSH
89176: LD_INT 2
89178: PUSH
89179: EMPTY
89180: LIST
89181: LIST
89182: LIST
89183: PUSH
89184: LD_VAR 0 1
89188: PUSH
89189: LD_INT 4
89191: MINUS
89192: PUSH
89193: LD_VAR 0 2
89197: PUSH
89198: LD_INT 1
89200: PUSH
89201: EMPTY
89202: LIST
89203: LIST
89204: LIST
89205: PUSH
89206: LD_VAR 0 1
89210: PUSH
89211: LD_VAR 0 2
89215: PUSH
89216: LD_INT 3
89218: PLUS
89219: PUSH
89220: LD_INT 0
89222: PUSH
89223: EMPTY
89224: LIST
89225: LIST
89226: LIST
89227: PUSH
89228: LD_VAR 0 1
89232: PUSH
89233: LD_INT 4
89235: PLUS
89236: PUSH
89237: LD_VAR 0 2
89241: PUSH
89242: LD_INT 4
89244: PLUS
89245: PUSH
89246: LD_INT 5
89248: PUSH
89249: EMPTY
89250: LIST
89251: LIST
89252: LIST
89253: PUSH
89254: EMPTY
89255: LIST
89256: LIST
89257: LIST
89258: LIST
89259: LIST
89260: ST_TO_ADDR
// end ; 2 :
89261: GO 89820
89263: LD_INT 2
89265: DOUBLE
89266: EQUAL
89267: IFTRUE 89271
89269: GO 89400
89271: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
89272: LD_ADDR_VAR 0 5
89276: PUSH
89277: LD_VAR 0 1
89281: PUSH
89282: LD_VAR 0 2
89286: PUSH
89287: LD_INT 3
89289: MINUS
89290: PUSH
89291: LD_INT 3
89293: PUSH
89294: EMPTY
89295: LIST
89296: LIST
89297: LIST
89298: PUSH
89299: LD_VAR 0 1
89303: PUSH
89304: LD_INT 4
89306: PLUS
89307: PUSH
89308: LD_VAR 0 2
89312: PUSH
89313: LD_INT 4
89315: PUSH
89316: EMPTY
89317: LIST
89318: LIST
89319: LIST
89320: PUSH
89321: LD_VAR 0 1
89325: PUSH
89326: LD_VAR 0 2
89330: PUSH
89331: LD_INT 4
89333: PLUS
89334: PUSH
89335: LD_INT 0
89337: PUSH
89338: EMPTY
89339: LIST
89340: LIST
89341: LIST
89342: PUSH
89343: LD_VAR 0 1
89347: PUSH
89348: LD_INT 3
89350: MINUS
89351: PUSH
89352: LD_VAR 0 2
89356: PUSH
89357: LD_INT 1
89359: PUSH
89360: EMPTY
89361: LIST
89362: LIST
89363: LIST
89364: PUSH
89365: LD_VAR 0 1
89369: PUSH
89370: LD_INT 4
89372: MINUS
89373: PUSH
89374: LD_VAR 0 2
89378: PUSH
89379: LD_INT 4
89381: MINUS
89382: PUSH
89383: LD_INT 2
89385: PUSH
89386: EMPTY
89387: LIST
89388: LIST
89389: LIST
89390: PUSH
89391: EMPTY
89392: LIST
89393: LIST
89394: LIST
89395: LIST
89396: LIST
89397: ST_TO_ADDR
// end ; 3 :
89398: GO 89820
89400: LD_INT 3
89402: DOUBLE
89403: EQUAL
89404: IFTRUE 89408
89406: GO 89541
89408: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
89409: LD_ADDR_VAR 0 5
89413: PUSH
89414: LD_VAR 0 1
89418: PUSH
89419: LD_INT 3
89421: PLUS
89422: PUSH
89423: LD_VAR 0 2
89427: PUSH
89428: LD_INT 4
89430: PUSH
89431: EMPTY
89432: LIST
89433: LIST
89434: LIST
89435: PUSH
89436: LD_VAR 0 1
89440: PUSH
89441: LD_INT 4
89443: PLUS
89444: PUSH
89445: LD_VAR 0 2
89449: PUSH
89450: LD_INT 4
89452: PLUS
89453: PUSH
89454: LD_INT 5
89456: PUSH
89457: EMPTY
89458: LIST
89459: LIST
89460: LIST
89461: PUSH
89462: LD_VAR 0 1
89466: PUSH
89467: LD_INT 4
89469: MINUS
89470: PUSH
89471: LD_VAR 0 2
89475: PUSH
89476: LD_INT 1
89478: PUSH
89479: EMPTY
89480: LIST
89481: LIST
89482: LIST
89483: PUSH
89484: LD_VAR 0 1
89488: PUSH
89489: LD_VAR 0 2
89493: PUSH
89494: LD_INT 4
89496: MINUS
89497: PUSH
89498: LD_INT 3
89500: PUSH
89501: EMPTY
89502: LIST
89503: LIST
89504: LIST
89505: PUSH
89506: LD_VAR 0 1
89510: PUSH
89511: LD_INT 3
89513: MINUS
89514: PUSH
89515: LD_VAR 0 2
89519: PUSH
89520: LD_INT 3
89522: MINUS
89523: PUSH
89524: LD_INT 2
89526: PUSH
89527: EMPTY
89528: LIST
89529: LIST
89530: LIST
89531: PUSH
89532: EMPTY
89533: LIST
89534: LIST
89535: LIST
89536: LIST
89537: LIST
89538: ST_TO_ADDR
// end ; 4 :
89539: GO 89820
89541: LD_INT 4
89543: DOUBLE
89544: EQUAL
89545: IFTRUE 89549
89547: GO 89682
89549: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
89550: LD_ADDR_VAR 0 5
89554: PUSH
89555: LD_VAR 0 1
89559: PUSH
89560: LD_VAR 0 2
89564: PUSH
89565: LD_INT 4
89567: PLUS
89568: PUSH
89569: LD_INT 0
89571: PUSH
89572: EMPTY
89573: LIST
89574: LIST
89575: LIST
89576: PUSH
89577: LD_VAR 0 1
89581: PUSH
89582: LD_INT 3
89584: PLUS
89585: PUSH
89586: LD_VAR 0 2
89590: PUSH
89591: LD_INT 3
89593: PLUS
89594: PUSH
89595: LD_INT 5
89597: PUSH
89598: EMPTY
89599: LIST
89600: LIST
89601: LIST
89602: PUSH
89603: LD_VAR 0 1
89607: PUSH
89608: LD_INT 4
89610: PLUS
89611: PUSH
89612: LD_VAR 0 2
89616: PUSH
89617: LD_INT 4
89619: PUSH
89620: EMPTY
89621: LIST
89622: LIST
89623: LIST
89624: PUSH
89625: LD_VAR 0 1
89629: PUSH
89630: LD_VAR 0 2
89634: PUSH
89635: LD_INT 3
89637: MINUS
89638: PUSH
89639: LD_INT 3
89641: PUSH
89642: EMPTY
89643: LIST
89644: LIST
89645: LIST
89646: PUSH
89647: LD_VAR 0 1
89651: PUSH
89652: LD_INT 4
89654: MINUS
89655: PUSH
89656: LD_VAR 0 2
89660: PUSH
89661: LD_INT 4
89663: MINUS
89664: PUSH
89665: LD_INT 2
89667: PUSH
89668: EMPTY
89669: LIST
89670: LIST
89671: LIST
89672: PUSH
89673: EMPTY
89674: LIST
89675: LIST
89676: LIST
89677: LIST
89678: LIST
89679: ST_TO_ADDR
// end ; 5 :
89680: GO 89820
89682: LD_INT 5
89684: DOUBLE
89685: EQUAL
89686: IFTRUE 89690
89688: GO 89819
89690: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
89691: LD_ADDR_VAR 0 5
89695: PUSH
89696: LD_VAR 0 1
89700: PUSH
89701: LD_INT 4
89703: MINUS
89704: PUSH
89705: LD_VAR 0 2
89709: PUSH
89710: LD_INT 1
89712: PUSH
89713: EMPTY
89714: LIST
89715: LIST
89716: LIST
89717: PUSH
89718: LD_VAR 0 1
89722: PUSH
89723: LD_VAR 0 2
89727: PUSH
89728: LD_INT 4
89730: MINUS
89731: PUSH
89732: LD_INT 3
89734: PUSH
89735: EMPTY
89736: LIST
89737: LIST
89738: LIST
89739: PUSH
89740: LD_VAR 0 1
89744: PUSH
89745: LD_INT 4
89747: PLUS
89748: PUSH
89749: LD_VAR 0 2
89753: PUSH
89754: LD_INT 4
89756: PLUS
89757: PUSH
89758: LD_INT 5
89760: PUSH
89761: EMPTY
89762: LIST
89763: LIST
89764: LIST
89765: PUSH
89766: LD_VAR 0 1
89770: PUSH
89771: LD_INT 3
89773: PLUS
89774: PUSH
89775: LD_VAR 0 2
89779: PUSH
89780: LD_INT 4
89782: PUSH
89783: EMPTY
89784: LIST
89785: LIST
89786: LIST
89787: PUSH
89788: LD_VAR 0 1
89792: PUSH
89793: LD_VAR 0 2
89797: PUSH
89798: LD_INT 3
89800: PLUS
89801: PUSH
89802: LD_INT 0
89804: PUSH
89805: EMPTY
89806: LIST
89807: LIST
89808: LIST
89809: PUSH
89810: EMPTY
89811: LIST
89812: LIST
89813: LIST
89814: LIST
89815: LIST
89816: ST_TO_ADDR
// end ; end ;
89817: GO 89820
89819: POP
// result := list ;
89820: LD_ADDR_VAR 0 4
89824: PUSH
89825: LD_VAR 0 5
89829: ST_TO_ADDR
// end ;
89830: LD_VAR 0 4
89834: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
89835: LD_INT 0
89837: PPUSH
89838: PPUSH
89839: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
89840: LD_VAR 0 1
89844: NOT
89845: PUSH
89846: LD_VAR 0 2
89850: PUSH
89851: LD_INT 1
89853: PUSH
89854: LD_INT 2
89856: PUSH
89857: LD_INT 3
89859: PUSH
89860: LD_INT 4
89862: PUSH
89863: EMPTY
89864: LIST
89865: LIST
89866: LIST
89867: LIST
89868: IN
89869: NOT
89870: OR
89871: IFFALSE 89875
// exit ;
89873: GO 89958
// tmp := [ ] ;
89875: LD_ADDR_VAR 0 5
89879: PUSH
89880: EMPTY
89881: ST_TO_ADDR
// for i in units do
89882: LD_ADDR_VAR 0 4
89886: PUSH
89887: LD_VAR 0 1
89891: PUSH
89892: FOR_IN
89893: IFFALSE 89927
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
89895: LD_ADDR_VAR 0 5
89899: PUSH
89900: LD_VAR 0 5
89904: PPUSH
89905: LD_VAR 0 4
89909: PPUSH
89910: LD_VAR 0 2
89914: PPUSH
89915: CALL_OW 259
89919: PPUSH
89920: CALL 91318 0 2
89924: ST_TO_ADDR
89925: GO 89892
89927: POP
89928: POP
// if not tmp then
89929: LD_VAR 0 5
89933: NOT
89934: IFFALSE 89938
// exit ;
89936: GO 89958
// result := SortListByListDesc ( units , tmp ) ;
89938: LD_ADDR_VAR 0 3
89942: PUSH
89943: LD_VAR 0 1
89947: PPUSH
89948: LD_VAR 0 5
89952: PPUSH
89953: CALL_OW 77
89957: ST_TO_ADDR
// end ;
89958: LD_VAR 0 3
89962: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
89963: LD_INT 0
89965: PPUSH
89966: PPUSH
89967: PPUSH
// result := false ;
89968: LD_ADDR_VAR 0 3
89972: PUSH
89973: LD_INT 0
89975: ST_TO_ADDR
// if not building then
89976: LD_VAR 0 2
89980: NOT
89981: IFFALSE 89985
// exit ;
89983: GO 90123
// x := GetX ( building ) ;
89985: LD_ADDR_VAR 0 4
89989: PUSH
89990: LD_VAR 0 2
89994: PPUSH
89995: CALL_OW 250
89999: ST_TO_ADDR
// y := GetY ( building ) ;
90000: LD_ADDR_VAR 0 5
90004: PUSH
90005: LD_VAR 0 2
90009: PPUSH
90010: CALL_OW 251
90014: ST_TO_ADDR
// if not x or not y then
90015: LD_VAR 0 4
90019: NOT
90020: PUSH
90021: LD_VAR 0 5
90025: NOT
90026: OR
90027: IFFALSE 90031
// exit ;
90029: GO 90123
// if GetTaskList ( unit ) then
90031: LD_VAR 0 1
90035: PPUSH
90036: CALL_OW 437
90040: IFFALSE 90123
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
90042: LD_STRING e
90044: PUSH
90045: LD_VAR 0 1
90049: PPUSH
90050: CALL_OW 437
90054: PUSH
90055: LD_INT 1
90057: ARRAY
90058: PUSH
90059: LD_INT 1
90061: ARRAY
90062: EQUAL
90063: PUSH
90064: LD_VAR 0 4
90068: PUSH
90069: LD_VAR 0 1
90073: PPUSH
90074: CALL_OW 437
90078: PUSH
90079: LD_INT 1
90081: ARRAY
90082: PUSH
90083: LD_INT 2
90085: ARRAY
90086: EQUAL
90087: AND
90088: PUSH
90089: LD_VAR 0 5
90093: PUSH
90094: LD_VAR 0 1
90098: PPUSH
90099: CALL_OW 437
90103: PUSH
90104: LD_INT 1
90106: ARRAY
90107: PUSH
90108: LD_INT 3
90110: ARRAY
90111: EQUAL
90112: AND
90113: IFFALSE 90123
// result := true end ;
90115: LD_ADDR_VAR 0 3
90119: PUSH
90120: LD_INT 1
90122: ST_TO_ADDR
// end ;
90123: LD_VAR 0 3
90127: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
90128: LD_INT 0
90130: PPUSH
// result := false ;
90131: LD_ADDR_VAR 0 4
90135: PUSH
90136: LD_INT 0
90138: ST_TO_ADDR
// if GetTaskList ( unit ) then
90139: LD_VAR 0 1
90143: PPUSH
90144: CALL_OW 437
90148: IFFALSE 90231
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
90150: LD_STRING M
90152: PUSH
90153: LD_VAR 0 1
90157: PPUSH
90158: CALL_OW 437
90162: PUSH
90163: LD_INT 1
90165: ARRAY
90166: PUSH
90167: LD_INT 1
90169: ARRAY
90170: EQUAL
90171: PUSH
90172: LD_VAR 0 2
90176: PUSH
90177: LD_VAR 0 1
90181: PPUSH
90182: CALL_OW 437
90186: PUSH
90187: LD_INT 1
90189: ARRAY
90190: PUSH
90191: LD_INT 2
90193: ARRAY
90194: EQUAL
90195: AND
90196: PUSH
90197: LD_VAR 0 3
90201: PUSH
90202: LD_VAR 0 1
90206: PPUSH
90207: CALL_OW 437
90211: PUSH
90212: LD_INT 1
90214: ARRAY
90215: PUSH
90216: LD_INT 3
90218: ARRAY
90219: EQUAL
90220: AND
90221: IFFALSE 90231
// result := true ;
90223: LD_ADDR_VAR 0 4
90227: PUSH
90228: LD_INT 1
90230: ST_TO_ADDR
// end ; end ;
90231: LD_VAR 0 4
90235: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
90236: LD_INT 0
90238: PPUSH
90239: PPUSH
90240: PPUSH
90241: PPUSH
// if not unit or not area then
90242: LD_VAR 0 1
90246: NOT
90247: PUSH
90248: LD_VAR 0 2
90252: NOT
90253: OR
90254: IFFALSE 90258
// exit ;
90256: GO 90421
// tmp := AreaToList ( area , i ) ;
90258: LD_ADDR_VAR 0 6
90262: PUSH
90263: LD_VAR 0 2
90267: PPUSH
90268: LD_VAR 0 5
90272: PPUSH
90273: CALL_OW 517
90277: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
90278: LD_ADDR_VAR 0 5
90282: PUSH
90283: DOUBLE
90284: LD_INT 1
90286: DEC
90287: ST_TO_ADDR
90288: LD_VAR 0 6
90292: PUSH
90293: LD_INT 1
90295: ARRAY
90296: PUSH
90297: FOR_TO
90298: IFFALSE 90419
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
90300: LD_ADDR_VAR 0 7
90304: PUSH
90305: LD_VAR 0 6
90309: PUSH
90310: LD_INT 1
90312: ARRAY
90313: PUSH
90314: LD_VAR 0 5
90318: ARRAY
90319: PUSH
90320: LD_VAR 0 6
90324: PUSH
90325: LD_INT 2
90327: ARRAY
90328: PUSH
90329: LD_VAR 0 5
90333: ARRAY
90334: PUSH
90335: EMPTY
90336: LIST
90337: LIST
90338: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
90339: LD_INT 92
90341: PUSH
90342: LD_VAR 0 7
90346: PUSH
90347: LD_INT 1
90349: ARRAY
90350: PUSH
90351: LD_VAR 0 7
90355: PUSH
90356: LD_INT 2
90358: ARRAY
90359: PUSH
90360: LD_INT 3
90362: PUSH
90363: EMPTY
90364: LIST
90365: LIST
90366: LIST
90367: LIST
90368: PPUSH
90369: CALL_OW 69
90373: PUSH
90374: LD_INT 0
90376: EQUAL
90377: IFFALSE 90417
// begin PlaceUnitArea ( unit , area , mode ) ;
90379: LD_VAR 0 1
90383: PPUSH
90384: LD_VAR 0 2
90388: PPUSH
90389: LD_VAR 0 3
90393: PPUSH
90394: CALL_OW 49
// result := IsPlaced ( unit ) ;
90398: LD_ADDR_VAR 0 4
90402: PUSH
90403: LD_VAR 0 1
90407: PPUSH
90408: CALL_OW 305
90412: ST_TO_ADDR
// exit ;
90413: POP
90414: POP
90415: GO 90421
// end ; end ;
90417: GO 90297
90419: POP
90420: POP
// end ;
90421: LD_VAR 0 4
90425: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
90426: LD_INT 0
90428: PPUSH
90429: PPUSH
90430: PPUSH
// if not side or side > 8 then
90431: LD_VAR 0 1
90435: NOT
90436: PUSH
90437: LD_VAR 0 1
90441: PUSH
90442: LD_INT 8
90444: GREATER
90445: OR
90446: IFFALSE 90450
// exit ;
90448: GO 90637
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
90450: LD_ADDR_VAR 0 4
90454: PUSH
90455: LD_INT 22
90457: PUSH
90458: LD_VAR 0 1
90462: PUSH
90463: EMPTY
90464: LIST
90465: LIST
90466: PUSH
90467: LD_INT 21
90469: PUSH
90470: LD_INT 3
90472: PUSH
90473: EMPTY
90474: LIST
90475: LIST
90476: PUSH
90477: EMPTY
90478: LIST
90479: LIST
90480: PPUSH
90481: CALL_OW 69
90485: ST_TO_ADDR
// if not tmp then
90486: LD_VAR 0 4
90490: NOT
90491: IFFALSE 90495
// exit ;
90493: GO 90637
// enable_addtolog := true ;
90495: LD_ADDR_OWVAR 81
90499: PUSH
90500: LD_INT 1
90502: ST_TO_ADDR
// AddToLog ( [ ) ;
90503: LD_STRING [
90505: PPUSH
90506: CALL_OW 561
// for i in tmp do
90510: LD_ADDR_VAR 0 3
90514: PUSH
90515: LD_VAR 0 4
90519: PUSH
90520: FOR_IN
90521: IFFALSE 90628
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
90523: LD_STRING [
90525: PUSH
90526: LD_VAR 0 3
90530: PPUSH
90531: CALL_OW 266
90535: STR
90536: PUSH
90537: LD_STRING , 
90539: STR
90540: PUSH
90541: LD_VAR 0 3
90545: PPUSH
90546: CALL_OW 250
90550: STR
90551: PUSH
90552: LD_STRING , 
90554: STR
90555: PUSH
90556: LD_VAR 0 3
90560: PPUSH
90561: CALL_OW 251
90565: STR
90566: PUSH
90567: LD_STRING , 
90569: STR
90570: PUSH
90571: LD_VAR 0 3
90575: PPUSH
90576: CALL_OW 254
90580: STR
90581: PUSH
90582: LD_STRING , 
90584: STR
90585: PUSH
90586: LD_VAR 0 3
90590: PPUSH
90591: LD_INT 1
90593: PPUSH
90594: CALL_OW 268
90598: STR
90599: PUSH
90600: LD_STRING , 
90602: STR
90603: PUSH
90604: LD_VAR 0 3
90608: PPUSH
90609: LD_INT 2
90611: PPUSH
90612: CALL_OW 268
90616: STR
90617: PUSH
90618: LD_STRING ],
90620: STR
90621: PPUSH
90622: CALL_OW 561
// end ;
90626: GO 90520
90628: POP
90629: POP
// AddToLog ( ]; ) ;
90630: LD_STRING ];
90632: PPUSH
90633: CALL_OW 561
// end ;
90637: LD_VAR 0 2
90641: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
90642: LD_INT 0
90644: PPUSH
90645: PPUSH
90646: PPUSH
90647: PPUSH
90648: PPUSH
// if not area or not rate or not max then
90649: LD_VAR 0 1
90653: NOT
90654: PUSH
90655: LD_VAR 0 2
90659: NOT
90660: OR
90661: PUSH
90662: LD_VAR 0 4
90666: NOT
90667: OR
90668: IFFALSE 90672
// exit ;
90670: GO 90861
// while 1 do
90672: LD_INT 1
90674: IFFALSE 90861
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
90676: LD_ADDR_VAR 0 9
90680: PUSH
90681: LD_VAR 0 1
90685: PPUSH
90686: LD_INT 1
90688: PPUSH
90689: CALL_OW 287
90693: PUSH
90694: LD_INT 10
90696: MUL
90697: ST_TO_ADDR
// r := rate / 10 ;
90698: LD_ADDR_VAR 0 7
90702: PUSH
90703: LD_VAR 0 2
90707: PUSH
90708: LD_INT 10
90710: DIVREAL
90711: ST_TO_ADDR
// time := 1 1$00 ;
90712: LD_ADDR_VAR 0 8
90716: PUSH
90717: LD_INT 2100
90719: ST_TO_ADDR
// if amount < min then
90720: LD_VAR 0 9
90724: PUSH
90725: LD_VAR 0 3
90729: LESS
90730: IFFALSE 90748
// r := r * 2 else
90732: LD_ADDR_VAR 0 7
90736: PUSH
90737: LD_VAR 0 7
90741: PUSH
90742: LD_INT 2
90744: MUL
90745: ST_TO_ADDR
90746: GO 90774
// if amount > max then
90748: LD_VAR 0 9
90752: PUSH
90753: LD_VAR 0 4
90757: GREATER
90758: IFFALSE 90774
// r := r / 2 ;
90760: LD_ADDR_VAR 0 7
90764: PUSH
90765: LD_VAR 0 7
90769: PUSH
90770: LD_INT 2
90772: DIVREAL
90773: ST_TO_ADDR
// time := time / r ;
90774: LD_ADDR_VAR 0 8
90778: PUSH
90779: LD_VAR 0 8
90783: PUSH
90784: LD_VAR 0 7
90788: DIVREAL
90789: ST_TO_ADDR
// if time < 0 then
90790: LD_VAR 0 8
90794: PUSH
90795: LD_INT 0
90797: LESS
90798: IFFALSE 90815
// time := time * - 1 ;
90800: LD_ADDR_VAR 0 8
90804: PUSH
90805: LD_VAR 0 8
90809: PUSH
90810: LD_INT 1
90812: NEG
90813: MUL
90814: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
90815: LD_VAR 0 8
90819: PUSH
90820: LD_INT 35
90822: PPUSH
90823: LD_INT 875
90825: PPUSH
90826: CALL_OW 12
90830: PLUS
90831: PPUSH
90832: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
90836: LD_INT 1
90838: PPUSH
90839: LD_INT 5
90841: PPUSH
90842: CALL_OW 12
90846: PPUSH
90847: LD_VAR 0 1
90851: PPUSH
90852: LD_INT 1
90854: PPUSH
90855: CALL_OW 55
// end ;
90859: GO 90672
// end ;
90861: LD_VAR 0 5
90865: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
90866: LD_INT 0
90868: PPUSH
90869: PPUSH
90870: PPUSH
90871: PPUSH
90872: PPUSH
90873: PPUSH
90874: PPUSH
90875: PPUSH
// if not turrets or not factories then
90876: LD_VAR 0 1
90880: NOT
90881: PUSH
90882: LD_VAR 0 2
90886: NOT
90887: OR
90888: IFFALSE 90892
// exit ;
90890: GO 91199
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
90892: LD_ADDR_VAR 0 10
90896: PUSH
90897: LD_INT 5
90899: PUSH
90900: LD_INT 6
90902: PUSH
90903: EMPTY
90904: LIST
90905: LIST
90906: PUSH
90907: LD_INT 2
90909: PUSH
90910: LD_INT 4
90912: PUSH
90913: EMPTY
90914: LIST
90915: LIST
90916: PUSH
90917: LD_INT 3
90919: PUSH
90920: LD_INT 5
90922: PUSH
90923: EMPTY
90924: LIST
90925: LIST
90926: PUSH
90927: EMPTY
90928: LIST
90929: LIST
90930: LIST
90931: PUSH
90932: LD_INT 24
90934: PUSH
90935: LD_INT 25
90937: PUSH
90938: EMPTY
90939: LIST
90940: LIST
90941: PUSH
90942: LD_INT 23
90944: PUSH
90945: LD_INT 27
90947: PUSH
90948: EMPTY
90949: LIST
90950: LIST
90951: PUSH
90952: EMPTY
90953: LIST
90954: LIST
90955: PUSH
90956: LD_INT 42
90958: PUSH
90959: LD_INT 43
90961: PUSH
90962: EMPTY
90963: LIST
90964: LIST
90965: PUSH
90966: LD_INT 44
90968: PUSH
90969: LD_INT 46
90971: PUSH
90972: EMPTY
90973: LIST
90974: LIST
90975: PUSH
90976: LD_INT 45
90978: PUSH
90979: LD_INT 47
90981: PUSH
90982: EMPTY
90983: LIST
90984: LIST
90985: PUSH
90986: EMPTY
90987: LIST
90988: LIST
90989: LIST
90990: PUSH
90991: EMPTY
90992: LIST
90993: LIST
90994: LIST
90995: ST_TO_ADDR
// result := [ ] ;
90996: LD_ADDR_VAR 0 3
91000: PUSH
91001: EMPTY
91002: ST_TO_ADDR
// for i in turrets do
91003: LD_ADDR_VAR 0 4
91007: PUSH
91008: LD_VAR 0 1
91012: PUSH
91013: FOR_IN
91014: IFFALSE 91197
// begin nat := GetNation ( i ) ;
91016: LD_ADDR_VAR 0 7
91020: PUSH
91021: LD_VAR 0 4
91025: PPUSH
91026: CALL_OW 248
91030: ST_TO_ADDR
// weapon := 0 ;
91031: LD_ADDR_VAR 0 8
91035: PUSH
91036: LD_INT 0
91038: ST_TO_ADDR
// if not nat then
91039: LD_VAR 0 7
91043: NOT
91044: IFFALSE 91048
// continue ;
91046: GO 91013
// for j in list [ nat ] do
91048: LD_ADDR_VAR 0 5
91052: PUSH
91053: LD_VAR 0 10
91057: PUSH
91058: LD_VAR 0 7
91062: ARRAY
91063: PUSH
91064: FOR_IN
91065: IFFALSE 91106
// if GetBWeapon ( i ) = j [ 1 ] then
91067: LD_VAR 0 4
91071: PPUSH
91072: CALL_OW 269
91076: PUSH
91077: LD_VAR 0 5
91081: PUSH
91082: LD_INT 1
91084: ARRAY
91085: EQUAL
91086: IFFALSE 91104
// begin weapon := j [ 2 ] ;
91088: LD_ADDR_VAR 0 8
91092: PUSH
91093: LD_VAR 0 5
91097: PUSH
91098: LD_INT 2
91100: ARRAY
91101: ST_TO_ADDR
// break ;
91102: GO 91106
// end ;
91104: GO 91064
91106: POP
91107: POP
// if not weapon then
91108: LD_VAR 0 8
91112: NOT
91113: IFFALSE 91117
// continue ;
91115: GO 91013
// for k in factories do
91117: LD_ADDR_VAR 0 6
91121: PUSH
91122: LD_VAR 0 2
91126: PUSH
91127: FOR_IN
91128: IFFALSE 91193
// begin weapons := AvailableWeaponList ( k ) ;
91130: LD_ADDR_VAR 0 9
91134: PUSH
91135: LD_VAR 0 6
91139: PPUSH
91140: CALL_OW 478
91144: ST_TO_ADDR
// if not weapons then
91145: LD_VAR 0 9
91149: NOT
91150: IFFALSE 91154
// continue ;
91152: GO 91127
// if weapon in weapons then
91154: LD_VAR 0 8
91158: PUSH
91159: LD_VAR 0 9
91163: IN
91164: IFFALSE 91191
// begin result := [ i , weapon ] ;
91166: LD_ADDR_VAR 0 3
91170: PUSH
91171: LD_VAR 0 4
91175: PUSH
91176: LD_VAR 0 8
91180: PUSH
91181: EMPTY
91182: LIST
91183: LIST
91184: ST_TO_ADDR
// exit ;
91185: POP
91186: POP
91187: POP
91188: POP
91189: GO 91199
// end ; end ;
91191: GO 91127
91193: POP
91194: POP
// end ;
91195: GO 91013
91197: POP
91198: POP
// end ;
91199: LD_VAR 0 3
91203: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
91204: LD_INT 0
91206: PPUSH
// if not side or side > 8 then
91207: LD_VAR 0 3
91211: NOT
91212: PUSH
91213: LD_VAR 0 3
91217: PUSH
91218: LD_INT 8
91220: GREATER
91221: OR
91222: IFFALSE 91226
// exit ;
91224: GO 91285
// if not range then
91226: LD_VAR 0 4
91230: NOT
91231: IFFALSE 91242
// range := - 12 ;
91233: LD_ADDR_VAR 0 4
91237: PUSH
91238: LD_INT 12
91240: NEG
91241: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
91242: LD_VAR 0 1
91246: PPUSH
91247: LD_VAR 0 2
91251: PPUSH
91252: LD_VAR 0 3
91256: PPUSH
91257: LD_VAR 0 4
91261: PPUSH
91262: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
91266: LD_VAR 0 1
91270: PPUSH
91271: LD_VAR 0 2
91275: PPUSH
91276: LD_VAR 0 3
91280: PPUSH
91281: CALL_OW 331
// end ;
91285: LD_VAR 0 5
91289: RET
// export function Video ( mode ) ; begin
91290: LD_INT 0
91292: PPUSH
// ingame_video = mode ;
91293: LD_ADDR_OWVAR 52
91297: PUSH
91298: LD_VAR 0 1
91302: ST_TO_ADDR
// interface_hidden = mode ;
91303: LD_ADDR_OWVAR 54
91307: PUSH
91308: LD_VAR 0 1
91312: ST_TO_ADDR
// end ;
91313: LD_VAR 0 2
91317: RET
// export function Join ( array , element ) ; begin
91318: LD_INT 0
91320: PPUSH
// result := Replace ( array , array + 1 , element ) ;
91321: LD_ADDR_VAR 0 3
91325: PUSH
91326: LD_VAR 0 1
91330: PPUSH
91331: LD_VAR 0 1
91335: PUSH
91336: LD_INT 1
91338: PLUS
91339: PPUSH
91340: LD_VAR 0 2
91344: PPUSH
91345: CALL_OW 1
91349: ST_TO_ADDR
// end ;
91350: LD_VAR 0 3
91354: RET
// export function JoinUnion ( array , element ) ; begin
91355: LD_INT 0
91357: PPUSH
// result := array union element ;
91358: LD_ADDR_VAR 0 3
91362: PUSH
91363: LD_VAR 0 1
91367: PUSH
91368: LD_VAR 0 2
91372: UNION
91373: ST_TO_ADDR
// end ;
91374: LD_VAR 0 3
91378: RET
// export function GetBehemoths ( side ) ; begin
91379: LD_INT 0
91381: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
91382: LD_ADDR_VAR 0 2
91386: PUSH
91387: LD_INT 22
91389: PUSH
91390: LD_VAR 0 1
91394: PUSH
91395: EMPTY
91396: LIST
91397: LIST
91398: PUSH
91399: LD_INT 31
91401: PUSH
91402: LD_INT 25
91404: PUSH
91405: EMPTY
91406: LIST
91407: LIST
91408: PUSH
91409: EMPTY
91410: LIST
91411: LIST
91412: PPUSH
91413: CALL_OW 69
91417: ST_TO_ADDR
// end ;
91418: LD_VAR 0 2
91422: RET
// export function Shuffle ( array ) ; var i , index ; begin
91423: LD_INT 0
91425: PPUSH
91426: PPUSH
91427: PPUSH
// result := [ ] ;
91428: LD_ADDR_VAR 0 2
91432: PUSH
91433: EMPTY
91434: ST_TO_ADDR
// if not array then
91435: LD_VAR 0 1
91439: NOT
91440: IFFALSE 91444
// exit ;
91442: GO 91543
// Randomize ;
91444: CALL_OW 10
// for i = array downto 1 do
91448: LD_ADDR_VAR 0 3
91452: PUSH
91453: DOUBLE
91454: LD_VAR 0 1
91458: INC
91459: ST_TO_ADDR
91460: LD_INT 1
91462: PUSH
91463: FOR_DOWNTO
91464: IFFALSE 91541
// begin index := rand ( 1 , array ) ;
91466: LD_ADDR_VAR 0 4
91470: PUSH
91471: LD_INT 1
91473: PPUSH
91474: LD_VAR 0 1
91478: PPUSH
91479: CALL_OW 12
91483: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
91484: LD_ADDR_VAR 0 2
91488: PUSH
91489: LD_VAR 0 2
91493: PPUSH
91494: LD_VAR 0 2
91498: PUSH
91499: LD_INT 1
91501: PLUS
91502: PPUSH
91503: LD_VAR 0 1
91507: PUSH
91508: LD_VAR 0 4
91512: ARRAY
91513: PPUSH
91514: CALL_OW 2
91518: ST_TO_ADDR
// array := Delete ( array , index ) ;
91519: LD_ADDR_VAR 0 1
91523: PUSH
91524: LD_VAR 0 1
91528: PPUSH
91529: LD_VAR 0 4
91533: PPUSH
91534: CALL_OW 3
91538: ST_TO_ADDR
// end ;
91539: GO 91463
91541: POP
91542: POP
// end ;
91543: LD_VAR 0 2
91547: RET
// export function GetBaseMaterials ( base ) ; begin
91548: LD_INT 0
91550: PPUSH
// result := [ 0 , 0 , 0 ] ;
91551: LD_ADDR_VAR 0 2
91555: PUSH
91556: LD_INT 0
91558: PUSH
91559: LD_INT 0
91561: PUSH
91562: LD_INT 0
91564: PUSH
91565: EMPTY
91566: LIST
91567: LIST
91568: LIST
91569: ST_TO_ADDR
// if not base then
91570: LD_VAR 0 1
91574: NOT
91575: IFFALSE 91579
// exit ;
91577: GO 91628
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
91579: LD_ADDR_VAR 0 2
91583: PUSH
91584: LD_VAR 0 1
91588: PPUSH
91589: LD_INT 1
91591: PPUSH
91592: CALL_OW 275
91596: PUSH
91597: LD_VAR 0 1
91601: PPUSH
91602: LD_INT 2
91604: PPUSH
91605: CALL_OW 275
91609: PUSH
91610: LD_VAR 0 1
91614: PPUSH
91615: LD_INT 3
91617: PPUSH
91618: CALL_OW 275
91622: PUSH
91623: EMPTY
91624: LIST
91625: LIST
91626: LIST
91627: ST_TO_ADDR
// end ;
91628: LD_VAR 0 2
91632: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
91633: LD_INT 0
91635: PPUSH
91636: PPUSH
// result := array ;
91637: LD_ADDR_VAR 0 3
91641: PUSH
91642: LD_VAR 0 1
91646: ST_TO_ADDR
// if size >= result then
91647: LD_VAR 0 2
91651: PUSH
91652: LD_VAR 0 3
91656: GREATEREQUAL
91657: IFFALSE 91661
// exit ;
91659: GO 91711
// if size then
91661: LD_VAR 0 2
91665: IFFALSE 91711
// for i := array downto size do
91667: LD_ADDR_VAR 0 4
91671: PUSH
91672: DOUBLE
91673: LD_VAR 0 1
91677: INC
91678: ST_TO_ADDR
91679: LD_VAR 0 2
91683: PUSH
91684: FOR_DOWNTO
91685: IFFALSE 91709
// result := Delete ( result , result ) ;
91687: LD_ADDR_VAR 0 3
91691: PUSH
91692: LD_VAR 0 3
91696: PPUSH
91697: LD_VAR 0 3
91701: PPUSH
91702: CALL_OW 3
91706: ST_TO_ADDR
91707: GO 91684
91709: POP
91710: POP
// end ;
91711: LD_VAR 0 3
91715: RET
// export function ComExit ( unit ) ; var tmp ; begin
91716: LD_INT 0
91718: PPUSH
91719: PPUSH
// if not IsInUnit ( unit ) then
91720: LD_VAR 0 1
91724: PPUSH
91725: CALL_OW 310
91729: NOT
91730: IFFALSE 91734
// exit ;
91732: GO 91794
// tmp := IsInUnit ( unit ) ;
91734: LD_ADDR_VAR 0 3
91738: PUSH
91739: LD_VAR 0 1
91743: PPUSH
91744: CALL_OW 310
91748: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
91749: LD_VAR 0 3
91753: PPUSH
91754: CALL_OW 247
91758: PUSH
91759: LD_INT 2
91761: EQUAL
91762: IFFALSE 91775
// ComExitVehicle ( unit ) else
91764: LD_VAR 0 1
91768: PPUSH
91769: CALL_OW 121
91773: GO 91784
// ComExitBuilding ( unit ) ;
91775: LD_VAR 0 1
91779: PPUSH
91780: CALL_OW 122
// result := tmp ;
91784: LD_ADDR_VAR 0 2
91788: PUSH
91789: LD_VAR 0 3
91793: ST_TO_ADDR
// end ;
91794: LD_VAR 0 2
91798: RET
// export function ComExitAll ( units ) ; var i ; begin
91799: LD_INT 0
91801: PPUSH
91802: PPUSH
// if not units then
91803: LD_VAR 0 1
91807: NOT
91808: IFFALSE 91812
// exit ;
91810: GO 91838
// for i in units do
91812: LD_ADDR_VAR 0 3
91816: PUSH
91817: LD_VAR 0 1
91821: PUSH
91822: FOR_IN
91823: IFFALSE 91836
// ComExit ( i ) ;
91825: LD_VAR 0 3
91829: PPUSH
91830: CALL 91716 0 1
91834: GO 91822
91836: POP
91837: POP
// end ;
91838: LD_VAR 0 2
91842: RET
// export function ResetHc ; begin
91843: LD_INT 0
91845: PPUSH
// InitHc ;
91846: CALL_OW 19
// hc_importance := 0 ;
91850: LD_ADDR_OWVAR 32
91854: PUSH
91855: LD_INT 0
91857: ST_TO_ADDR
// end ;
91858: LD_VAR 0 1
91862: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
91863: LD_INT 0
91865: PPUSH
91866: PPUSH
91867: PPUSH
// _x := ( x1 + x2 ) div 2 ;
91868: LD_ADDR_VAR 0 6
91872: PUSH
91873: LD_VAR 0 1
91877: PUSH
91878: LD_VAR 0 3
91882: PLUS
91883: PUSH
91884: LD_INT 2
91886: DIV
91887: ST_TO_ADDR
// if _x < 0 then
91888: LD_VAR 0 6
91892: PUSH
91893: LD_INT 0
91895: LESS
91896: IFFALSE 91913
// _x := _x * - 1 ;
91898: LD_ADDR_VAR 0 6
91902: PUSH
91903: LD_VAR 0 6
91907: PUSH
91908: LD_INT 1
91910: NEG
91911: MUL
91912: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
91913: LD_ADDR_VAR 0 7
91917: PUSH
91918: LD_VAR 0 2
91922: PUSH
91923: LD_VAR 0 4
91927: PLUS
91928: PUSH
91929: LD_INT 2
91931: DIV
91932: ST_TO_ADDR
// if _y < 0 then
91933: LD_VAR 0 7
91937: PUSH
91938: LD_INT 0
91940: LESS
91941: IFFALSE 91958
// _y := _y * - 1 ;
91943: LD_ADDR_VAR 0 7
91947: PUSH
91948: LD_VAR 0 7
91952: PUSH
91953: LD_INT 1
91955: NEG
91956: MUL
91957: ST_TO_ADDR
// result := [ _x , _y ] ;
91958: LD_ADDR_VAR 0 5
91962: PUSH
91963: LD_VAR 0 6
91967: PUSH
91968: LD_VAR 0 7
91972: PUSH
91973: EMPTY
91974: LIST
91975: LIST
91976: ST_TO_ADDR
// end ;
91977: LD_VAR 0 5
91981: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
91982: LD_INT 0
91984: PPUSH
91985: PPUSH
91986: PPUSH
91987: PPUSH
// task := GetTaskList ( unit ) ;
91988: LD_ADDR_VAR 0 7
91992: PUSH
91993: LD_VAR 0 1
91997: PPUSH
91998: CALL_OW 437
92002: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
92003: LD_VAR 0 7
92007: NOT
92008: PUSH
92009: LD_VAR 0 1
92013: PPUSH
92014: LD_VAR 0 2
92018: PPUSH
92019: CALL_OW 308
92023: NOT
92024: AND
92025: IFFALSE 92029
// exit ;
92027: GO 92147
// if IsInArea ( unit , area ) then
92029: LD_VAR 0 1
92033: PPUSH
92034: LD_VAR 0 2
92038: PPUSH
92039: CALL_OW 308
92043: IFFALSE 92061
// begin ComMoveToArea ( unit , goAway ) ;
92045: LD_VAR 0 1
92049: PPUSH
92050: LD_VAR 0 3
92054: PPUSH
92055: CALL_OW 113
// exit ;
92059: GO 92147
// end ; if task [ 1 ] [ 1 ] <> M then
92061: LD_VAR 0 7
92065: PUSH
92066: LD_INT 1
92068: ARRAY
92069: PUSH
92070: LD_INT 1
92072: ARRAY
92073: PUSH
92074: LD_STRING M
92076: NONEQUAL
92077: IFFALSE 92081
// exit ;
92079: GO 92147
// x := task [ 1 ] [ 2 ] ;
92081: LD_ADDR_VAR 0 5
92085: PUSH
92086: LD_VAR 0 7
92090: PUSH
92091: LD_INT 1
92093: ARRAY
92094: PUSH
92095: LD_INT 2
92097: ARRAY
92098: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
92099: LD_ADDR_VAR 0 6
92103: PUSH
92104: LD_VAR 0 7
92108: PUSH
92109: LD_INT 1
92111: ARRAY
92112: PUSH
92113: LD_INT 3
92115: ARRAY
92116: ST_TO_ADDR
// if InArea ( x , y , area ) then
92117: LD_VAR 0 5
92121: PPUSH
92122: LD_VAR 0 6
92126: PPUSH
92127: LD_VAR 0 2
92131: PPUSH
92132: CALL_OW 309
92136: IFFALSE 92147
// ComStop ( unit ) ;
92138: LD_VAR 0 1
92142: PPUSH
92143: CALL_OW 141
// end ;
92147: LD_VAR 0 4
92151: RET
// export function Abs ( value ) ; begin
92152: LD_INT 0
92154: PPUSH
// result := value ;
92155: LD_ADDR_VAR 0 2
92159: PUSH
92160: LD_VAR 0 1
92164: ST_TO_ADDR
// if value < 0 then
92165: LD_VAR 0 1
92169: PUSH
92170: LD_INT 0
92172: LESS
92173: IFFALSE 92190
// result := value * - 1 ;
92175: LD_ADDR_VAR 0 2
92179: PUSH
92180: LD_VAR 0 1
92184: PUSH
92185: LD_INT 1
92187: NEG
92188: MUL
92189: ST_TO_ADDR
// end ;
92190: LD_VAR 0 2
92194: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
92195: LD_INT 0
92197: PPUSH
92198: PPUSH
92199: PPUSH
92200: PPUSH
92201: PPUSH
92202: PPUSH
92203: PPUSH
92204: PPUSH
// if not unit or not building then
92205: LD_VAR 0 1
92209: NOT
92210: PUSH
92211: LD_VAR 0 2
92215: NOT
92216: OR
92217: IFFALSE 92221
// exit ;
92219: GO 92447
// x := GetX ( building ) ;
92221: LD_ADDR_VAR 0 4
92225: PUSH
92226: LD_VAR 0 2
92230: PPUSH
92231: CALL_OW 250
92235: ST_TO_ADDR
// y := GetY ( building ) ;
92236: LD_ADDR_VAR 0 6
92240: PUSH
92241: LD_VAR 0 2
92245: PPUSH
92246: CALL_OW 251
92250: ST_TO_ADDR
// d := GetDir ( building ) ;
92251: LD_ADDR_VAR 0 8
92255: PUSH
92256: LD_VAR 0 2
92260: PPUSH
92261: CALL_OW 254
92265: ST_TO_ADDR
// r := 4 ;
92266: LD_ADDR_VAR 0 9
92270: PUSH
92271: LD_INT 4
92273: ST_TO_ADDR
// for i := 1 to 5 do
92274: LD_ADDR_VAR 0 10
92278: PUSH
92279: DOUBLE
92280: LD_INT 1
92282: DEC
92283: ST_TO_ADDR
92284: LD_INT 5
92286: PUSH
92287: FOR_TO
92288: IFFALSE 92445
// begin _x := ShiftX ( x , d , r + i ) ;
92290: LD_ADDR_VAR 0 5
92294: PUSH
92295: LD_VAR 0 4
92299: PPUSH
92300: LD_VAR 0 8
92304: PPUSH
92305: LD_VAR 0 9
92309: PUSH
92310: LD_VAR 0 10
92314: PLUS
92315: PPUSH
92316: CALL_OW 272
92320: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
92321: LD_ADDR_VAR 0 7
92325: PUSH
92326: LD_VAR 0 6
92330: PPUSH
92331: LD_VAR 0 8
92335: PPUSH
92336: LD_VAR 0 9
92340: PUSH
92341: LD_VAR 0 10
92345: PLUS
92346: PPUSH
92347: CALL_OW 273
92351: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
92352: LD_VAR 0 5
92356: PPUSH
92357: LD_VAR 0 7
92361: PPUSH
92362: CALL_OW 488
92366: PUSH
92367: LD_VAR 0 5
92371: PPUSH
92372: LD_VAR 0 7
92376: PPUSH
92377: CALL_OW 428
92381: PPUSH
92382: CALL_OW 247
92386: PUSH
92387: LD_INT 3
92389: PUSH
92390: LD_INT 2
92392: PUSH
92393: EMPTY
92394: LIST
92395: LIST
92396: IN
92397: NOT
92398: AND
92399: IFFALSE 92443
// begin ComMoveXY ( unit , _x , _y ) ;
92401: LD_VAR 0 1
92405: PPUSH
92406: LD_VAR 0 5
92410: PPUSH
92411: LD_VAR 0 7
92415: PPUSH
92416: CALL_OW 111
// result := [ _x , _y ] ;
92420: LD_ADDR_VAR 0 3
92424: PUSH
92425: LD_VAR 0 5
92429: PUSH
92430: LD_VAR 0 7
92434: PUSH
92435: EMPTY
92436: LIST
92437: LIST
92438: ST_TO_ADDR
// exit ;
92439: POP
92440: POP
92441: GO 92447
// end ; end ;
92443: GO 92287
92445: POP
92446: POP
// end ;
92447: LD_VAR 0 3
92451: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
92452: LD_INT 0
92454: PPUSH
92455: PPUSH
92456: PPUSH
// result := 0 ;
92457: LD_ADDR_VAR 0 3
92461: PUSH
92462: LD_INT 0
92464: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
92465: LD_VAR 0 1
92469: PUSH
92470: LD_INT 0
92472: LESS
92473: PUSH
92474: LD_VAR 0 1
92478: PUSH
92479: LD_INT 8
92481: GREATER
92482: OR
92483: PUSH
92484: LD_VAR 0 2
92488: PUSH
92489: LD_INT 0
92491: LESS
92492: OR
92493: PUSH
92494: LD_VAR 0 2
92498: PUSH
92499: LD_INT 8
92501: GREATER
92502: OR
92503: IFFALSE 92507
// exit ;
92505: GO 92582
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
92507: LD_ADDR_VAR 0 4
92511: PUSH
92512: LD_INT 22
92514: PUSH
92515: LD_VAR 0 2
92519: PUSH
92520: EMPTY
92521: LIST
92522: LIST
92523: PPUSH
92524: CALL_OW 69
92528: PUSH
92529: FOR_IN
92530: IFFALSE 92580
// begin un := UnitShoot ( i ) ;
92532: LD_ADDR_VAR 0 5
92536: PUSH
92537: LD_VAR 0 4
92541: PPUSH
92542: CALL_OW 504
92546: ST_TO_ADDR
// if GetSide ( un ) = side1 then
92547: LD_VAR 0 5
92551: PPUSH
92552: CALL_OW 255
92556: PUSH
92557: LD_VAR 0 1
92561: EQUAL
92562: IFFALSE 92578
// begin result := un ;
92564: LD_ADDR_VAR 0 3
92568: PUSH
92569: LD_VAR 0 5
92573: ST_TO_ADDR
// exit ;
92574: POP
92575: POP
92576: GO 92582
// end ; end ;
92578: GO 92529
92580: POP
92581: POP
// end ;
92582: LD_VAR 0 3
92586: RET
// export function GetCargoBay ( units ) ; begin
92587: LD_INT 0
92589: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
92590: LD_ADDR_VAR 0 2
92594: PUSH
92595: LD_VAR 0 1
92599: PPUSH
92600: LD_INT 2
92602: PUSH
92603: LD_INT 34
92605: PUSH
92606: LD_INT 12
92608: PUSH
92609: EMPTY
92610: LIST
92611: LIST
92612: PUSH
92613: LD_INT 34
92615: PUSH
92616: LD_INT 51
92618: PUSH
92619: EMPTY
92620: LIST
92621: LIST
92622: PUSH
92623: LD_INT 34
92625: PUSH
92626: LD_INT 32
92628: PUSH
92629: EMPTY
92630: LIST
92631: LIST
92632: PUSH
92633: LD_INT 34
92635: PUSH
92636: LD_INT 89
92638: PUSH
92639: EMPTY
92640: LIST
92641: LIST
92642: PUSH
92643: EMPTY
92644: LIST
92645: LIST
92646: LIST
92647: LIST
92648: LIST
92649: PPUSH
92650: CALL_OW 72
92654: ST_TO_ADDR
// end ;
92655: LD_VAR 0 2
92659: RET
// export function Negate ( value ) ; begin
92660: LD_INT 0
92662: PPUSH
// result := not value ;
92663: LD_ADDR_VAR 0 2
92667: PUSH
92668: LD_VAR 0 1
92672: NOT
92673: ST_TO_ADDR
// end ;
92674: LD_VAR 0 2
92678: RET
// export function Inc ( value ) ; begin
92679: LD_INT 0
92681: PPUSH
// result := value + 1 ;
92682: LD_ADDR_VAR 0 2
92686: PUSH
92687: LD_VAR 0 1
92691: PUSH
92692: LD_INT 1
92694: PLUS
92695: ST_TO_ADDR
// end ;
92696: LD_VAR 0 2
92700: RET
// export function Dec ( value ) ; begin
92701: LD_INT 0
92703: PPUSH
// result := value - 1 ;
92704: LD_ADDR_VAR 0 2
92708: PUSH
92709: LD_VAR 0 1
92713: PUSH
92714: LD_INT 1
92716: MINUS
92717: ST_TO_ADDR
// end ;
92718: LD_VAR 0 2
92722: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
92723: LD_INT 0
92725: PPUSH
92726: PPUSH
92727: PPUSH
92728: PPUSH
92729: PPUSH
92730: PPUSH
92731: PPUSH
92732: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
92733: LD_VAR 0 1
92737: PPUSH
92738: LD_VAR 0 2
92742: PPUSH
92743: CALL_OW 488
92747: NOT
92748: PUSH
92749: LD_VAR 0 3
92753: PPUSH
92754: LD_VAR 0 4
92758: PPUSH
92759: CALL_OW 488
92763: NOT
92764: OR
92765: IFFALSE 92778
// begin result := - 1 ;
92767: LD_ADDR_VAR 0 5
92771: PUSH
92772: LD_INT 1
92774: NEG
92775: ST_TO_ADDR
// exit ;
92776: GO 93013
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
92778: LD_ADDR_VAR 0 12
92782: PUSH
92783: LD_VAR 0 1
92787: PPUSH
92788: LD_VAR 0 2
92792: PPUSH
92793: LD_VAR 0 3
92797: PPUSH
92798: LD_VAR 0 4
92802: PPUSH
92803: CALL 91863 0 4
92807: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
92808: LD_ADDR_VAR 0 11
92812: PUSH
92813: LD_VAR 0 1
92817: PPUSH
92818: LD_VAR 0 2
92822: PPUSH
92823: LD_VAR 0 12
92827: PUSH
92828: LD_INT 1
92830: ARRAY
92831: PPUSH
92832: LD_VAR 0 12
92836: PUSH
92837: LD_INT 2
92839: ARRAY
92840: PPUSH
92841: CALL_OW 298
92845: ST_TO_ADDR
// distance := 9999 ;
92846: LD_ADDR_VAR 0 10
92850: PUSH
92851: LD_INT 9999
92853: ST_TO_ADDR
// for i := 0 to 5 do
92854: LD_ADDR_VAR 0 6
92858: PUSH
92859: DOUBLE
92860: LD_INT 0
92862: DEC
92863: ST_TO_ADDR
92864: LD_INT 5
92866: PUSH
92867: FOR_TO
92868: IFFALSE 93011
// begin _x := ShiftX ( x1 , i , centerDist ) ;
92870: LD_ADDR_VAR 0 7
92874: PUSH
92875: LD_VAR 0 1
92879: PPUSH
92880: LD_VAR 0 6
92884: PPUSH
92885: LD_VAR 0 11
92889: PPUSH
92890: CALL_OW 272
92894: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
92895: LD_ADDR_VAR 0 8
92899: PUSH
92900: LD_VAR 0 2
92904: PPUSH
92905: LD_VAR 0 6
92909: PPUSH
92910: LD_VAR 0 11
92914: PPUSH
92915: CALL_OW 273
92919: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
92920: LD_VAR 0 7
92924: PPUSH
92925: LD_VAR 0 8
92929: PPUSH
92930: CALL_OW 488
92934: NOT
92935: IFFALSE 92939
// continue ;
92937: GO 92867
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
92939: LD_ADDR_VAR 0 9
92943: PUSH
92944: LD_VAR 0 12
92948: PUSH
92949: LD_INT 1
92951: ARRAY
92952: PPUSH
92953: LD_VAR 0 12
92957: PUSH
92958: LD_INT 2
92960: ARRAY
92961: PPUSH
92962: LD_VAR 0 7
92966: PPUSH
92967: LD_VAR 0 8
92971: PPUSH
92972: CALL_OW 298
92976: ST_TO_ADDR
// if tmp < distance then
92977: LD_VAR 0 9
92981: PUSH
92982: LD_VAR 0 10
92986: LESS
92987: IFFALSE 93009
// begin result := i ;
92989: LD_ADDR_VAR 0 5
92993: PUSH
92994: LD_VAR 0 6
92998: ST_TO_ADDR
// distance := tmp ;
92999: LD_ADDR_VAR 0 10
93003: PUSH
93004: LD_VAR 0 9
93008: ST_TO_ADDR
// end ; end ;
93009: GO 92867
93011: POP
93012: POP
// end ;
93013: LD_VAR 0 5
93017: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
93018: LD_INT 0
93020: PPUSH
93021: PPUSH
// if not driver or not IsInUnit ( driver ) then
93022: LD_VAR 0 1
93026: NOT
93027: PUSH
93028: LD_VAR 0 1
93032: PPUSH
93033: CALL_OW 310
93037: NOT
93038: OR
93039: IFFALSE 93043
// exit ;
93041: GO 93133
// vehicle := IsInUnit ( driver ) ;
93043: LD_ADDR_VAR 0 3
93047: PUSH
93048: LD_VAR 0 1
93052: PPUSH
93053: CALL_OW 310
93057: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
93058: LD_VAR 0 1
93062: PPUSH
93063: LD_STRING \
93065: PUSH
93066: LD_INT 0
93068: PUSH
93069: LD_INT 0
93071: PUSH
93072: LD_INT 0
93074: PUSH
93075: LD_INT 0
93077: PUSH
93078: LD_INT 0
93080: PUSH
93081: LD_INT 0
93083: PUSH
93084: EMPTY
93085: LIST
93086: LIST
93087: LIST
93088: LIST
93089: LIST
93090: LIST
93091: LIST
93092: PUSH
93093: LD_STRING E
93095: PUSH
93096: LD_INT 0
93098: PUSH
93099: LD_INT 0
93101: PUSH
93102: LD_VAR 0 3
93106: PUSH
93107: LD_INT 0
93109: PUSH
93110: LD_INT 0
93112: PUSH
93113: LD_INT 0
93115: PUSH
93116: EMPTY
93117: LIST
93118: LIST
93119: LIST
93120: LIST
93121: LIST
93122: LIST
93123: LIST
93124: PUSH
93125: EMPTY
93126: LIST
93127: LIST
93128: PPUSH
93129: CALL_OW 446
// end ;
93133: LD_VAR 0 2
93137: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
93138: LD_INT 0
93140: PPUSH
93141: PPUSH
// if not driver or not IsInUnit ( driver ) then
93142: LD_VAR 0 1
93146: NOT
93147: PUSH
93148: LD_VAR 0 1
93152: PPUSH
93153: CALL_OW 310
93157: NOT
93158: OR
93159: IFFALSE 93163
// exit ;
93161: GO 93253
// vehicle := IsInUnit ( driver ) ;
93163: LD_ADDR_VAR 0 3
93167: PUSH
93168: LD_VAR 0 1
93172: PPUSH
93173: CALL_OW 310
93177: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
93178: LD_VAR 0 1
93182: PPUSH
93183: LD_STRING \
93185: PUSH
93186: LD_INT 0
93188: PUSH
93189: LD_INT 0
93191: PUSH
93192: LD_INT 0
93194: PUSH
93195: LD_INT 0
93197: PUSH
93198: LD_INT 0
93200: PUSH
93201: LD_INT 0
93203: PUSH
93204: EMPTY
93205: LIST
93206: LIST
93207: LIST
93208: LIST
93209: LIST
93210: LIST
93211: LIST
93212: PUSH
93213: LD_STRING E
93215: PUSH
93216: LD_INT 0
93218: PUSH
93219: LD_INT 0
93221: PUSH
93222: LD_VAR 0 3
93226: PUSH
93227: LD_INT 0
93229: PUSH
93230: LD_INT 0
93232: PUSH
93233: LD_INT 0
93235: PUSH
93236: EMPTY
93237: LIST
93238: LIST
93239: LIST
93240: LIST
93241: LIST
93242: LIST
93243: LIST
93244: PUSH
93245: EMPTY
93246: LIST
93247: LIST
93248: PPUSH
93249: CALL_OW 447
// end ;
93253: LD_VAR 0 2
93257: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
93258: LD_INT 0
93260: PPUSH
93261: PPUSH
93262: PPUSH
// tmp := [ ] ;
93263: LD_ADDR_VAR 0 5
93267: PUSH
93268: EMPTY
93269: ST_TO_ADDR
// for i in units do
93270: LD_ADDR_VAR 0 4
93274: PUSH
93275: LD_VAR 0 1
93279: PUSH
93280: FOR_IN
93281: IFFALSE 93319
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
93283: LD_ADDR_VAR 0 5
93287: PUSH
93288: LD_VAR 0 5
93292: PPUSH
93293: LD_VAR 0 5
93297: PUSH
93298: LD_INT 1
93300: PLUS
93301: PPUSH
93302: LD_VAR 0 4
93306: PPUSH
93307: CALL_OW 256
93311: PPUSH
93312: CALL_OW 2
93316: ST_TO_ADDR
93317: GO 93280
93319: POP
93320: POP
// if not tmp then
93321: LD_VAR 0 5
93325: NOT
93326: IFFALSE 93330
// exit ;
93328: GO 93378
// if asc then
93330: LD_VAR 0 2
93334: IFFALSE 93358
// result := SortListByListAsc ( units , tmp ) else
93336: LD_ADDR_VAR 0 3
93340: PUSH
93341: LD_VAR 0 1
93345: PPUSH
93346: LD_VAR 0 5
93350: PPUSH
93351: CALL_OW 76
93355: ST_TO_ADDR
93356: GO 93378
// result := SortListByListDesc ( units , tmp ) ;
93358: LD_ADDR_VAR 0 3
93362: PUSH
93363: LD_VAR 0 1
93367: PPUSH
93368: LD_VAR 0 5
93372: PPUSH
93373: CALL_OW 77
93377: ST_TO_ADDR
// end ;
93378: LD_VAR 0 3
93382: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
93383: LD_INT 0
93385: PPUSH
93386: PPUSH
// task := GetTaskList ( mech ) ;
93387: LD_ADDR_VAR 0 4
93391: PUSH
93392: LD_VAR 0 1
93396: PPUSH
93397: CALL_OW 437
93401: ST_TO_ADDR
// if not task then
93402: LD_VAR 0 4
93406: NOT
93407: IFFALSE 93411
// exit ;
93409: GO 93453
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
93411: LD_ADDR_VAR 0 3
93415: PUSH
93416: LD_VAR 0 4
93420: PUSH
93421: LD_INT 1
93423: ARRAY
93424: PUSH
93425: LD_INT 1
93427: ARRAY
93428: PUSH
93429: LD_STRING r
93431: EQUAL
93432: PUSH
93433: LD_VAR 0 4
93437: PUSH
93438: LD_INT 1
93440: ARRAY
93441: PUSH
93442: LD_INT 4
93444: ARRAY
93445: PUSH
93446: LD_VAR 0 2
93450: EQUAL
93451: AND
93452: ST_TO_ADDR
// end ;
93453: LD_VAR 0 3
93457: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
93458: LD_INT 0
93460: PPUSH
// SetDir ( unit , d ) ;
93461: LD_VAR 0 1
93465: PPUSH
93466: LD_VAR 0 4
93470: PPUSH
93471: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
93475: LD_VAR 0 1
93479: PPUSH
93480: LD_VAR 0 2
93484: PPUSH
93485: LD_VAR 0 3
93489: PPUSH
93490: LD_VAR 0 5
93494: PPUSH
93495: CALL_OW 48
// end ;
93499: LD_VAR 0 6
93503: RET
// export function ToNaturalNumber ( number ) ; begin
93504: LD_INT 0
93506: PPUSH
// result := number div 1 ;
93507: LD_ADDR_VAR 0 2
93511: PUSH
93512: LD_VAR 0 1
93516: PUSH
93517: LD_INT 1
93519: DIV
93520: ST_TO_ADDR
// if number < 0 then
93521: LD_VAR 0 1
93525: PUSH
93526: LD_INT 0
93528: LESS
93529: IFFALSE 93539
// result := 0 ;
93531: LD_ADDR_VAR 0 2
93535: PUSH
93536: LD_INT 0
93538: ST_TO_ADDR
// end ;
93539: LD_VAR 0 2
93543: RET
// export function SortByClass ( units , class ) ; var un ; begin
93544: LD_INT 0
93546: PPUSH
93547: PPUSH
// if not units or not class then
93548: LD_VAR 0 1
93552: NOT
93553: PUSH
93554: LD_VAR 0 2
93558: NOT
93559: OR
93560: IFFALSE 93564
// exit ;
93562: GO 93659
// result := [ ] ;
93564: LD_ADDR_VAR 0 3
93568: PUSH
93569: EMPTY
93570: ST_TO_ADDR
// for un in units do
93571: LD_ADDR_VAR 0 4
93575: PUSH
93576: LD_VAR 0 1
93580: PUSH
93581: FOR_IN
93582: IFFALSE 93657
// if GetClass ( un ) = class then
93584: LD_VAR 0 4
93588: PPUSH
93589: CALL_OW 257
93593: PUSH
93594: LD_VAR 0 2
93598: EQUAL
93599: IFFALSE 93626
// result := Insert ( result , 1 , un ) else
93601: LD_ADDR_VAR 0 3
93605: PUSH
93606: LD_VAR 0 3
93610: PPUSH
93611: LD_INT 1
93613: PPUSH
93614: LD_VAR 0 4
93618: PPUSH
93619: CALL_OW 2
93623: ST_TO_ADDR
93624: GO 93655
// result := Replace ( result , result + 1 , un ) ;
93626: LD_ADDR_VAR 0 3
93630: PUSH
93631: LD_VAR 0 3
93635: PPUSH
93636: LD_VAR 0 3
93640: PUSH
93641: LD_INT 1
93643: PLUS
93644: PPUSH
93645: LD_VAR 0 4
93649: PPUSH
93650: CALL_OW 1
93654: ST_TO_ADDR
93655: GO 93581
93657: POP
93658: POP
// end ;
93659: LD_VAR 0 3
93663: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
93664: LD_INT 0
93666: PPUSH
93667: PPUSH
93668: PPUSH
93669: PPUSH
93670: PPUSH
93671: PPUSH
93672: PPUSH
// result := [ ] ;
93673: LD_ADDR_VAR 0 4
93677: PUSH
93678: EMPTY
93679: ST_TO_ADDR
// if x - r < 0 then
93680: LD_VAR 0 1
93684: PUSH
93685: LD_VAR 0 3
93689: MINUS
93690: PUSH
93691: LD_INT 0
93693: LESS
93694: IFFALSE 93706
// min_x := 0 else
93696: LD_ADDR_VAR 0 8
93700: PUSH
93701: LD_INT 0
93703: ST_TO_ADDR
93704: GO 93722
// min_x := x - r ;
93706: LD_ADDR_VAR 0 8
93710: PUSH
93711: LD_VAR 0 1
93715: PUSH
93716: LD_VAR 0 3
93720: MINUS
93721: ST_TO_ADDR
// if y - r < 0 then
93722: LD_VAR 0 2
93726: PUSH
93727: LD_VAR 0 3
93731: MINUS
93732: PUSH
93733: LD_INT 0
93735: LESS
93736: IFFALSE 93748
// min_y := 0 else
93738: LD_ADDR_VAR 0 7
93742: PUSH
93743: LD_INT 0
93745: ST_TO_ADDR
93746: GO 93764
// min_y := y - r ;
93748: LD_ADDR_VAR 0 7
93752: PUSH
93753: LD_VAR 0 2
93757: PUSH
93758: LD_VAR 0 3
93762: MINUS
93763: ST_TO_ADDR
// max_x := x + r ;
93764: LD_ADDR_VAR 0 9
93768: PUSH
93769: LD_VAR 0 1
93773: PUSH
93774: LD_VAR 0 3
93778: PLUS
93779: ST_TO_ADDR
// max_y := y + r ;
93780: LD_ADDR_VAR 0 10
93784: PUSH
93785: LD_VAR 0 2
93789: PUSH
93790: LD_VAR 0 3
93794: PLUS
93795: ST_TO_ADDR
// for _x = min_x to max_x do
93796: LD_ADDR_VAR 0 5
93800: PUSH
93801: DOUBLE
93802: LD_VAR 0 8
93806: DEC
93807: ST_TO_ADDR
93808: LD_VAR 0 9
93812: PUSH
93813: FOR_TO
93814: IFFALSE 93915
// for _y = min_y to max_y do
93816: LD_ADDR_VAR 0 6
93820: PUSH
93821: DOUBLE
93822: LD_VAR 0 7
93826: DEC
93827: ST_TO_ADDR
93828: LD_VAR 0 10
93832: PUSH
93833: FOR_TO
93834: IFFALSE 93911
// begin if not ValidHex ( _x , _y ) then
93836: LD_VAR 0 5
93840: PPUSH
93841: LD_VAR 0 6
93845: PPUSH
93846: CALL_OW 488
93850: NOT
93851: IFFALSE 93855
// continue ;
93853: GO 93833
// if GetResourceTypeXY ( _x , _y ) then
93855: LD_VAR 0 5
93859: PPUSH
93860: LD_VAR 0 6
93864: PPUSH
93865: CALL_OW 283
93869: IFFALSE 93909
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
93871: LD_ADDR_VAR 0 4
93875: PUSH
93876: LD_VAR 0 4
93880: PPUSH
93881: LD_VAR 0 4
93885: PUSH
93886: LD_INT 1
93888: PLUS
93889: PPUSH
93890: LD_VAR 0 5
93894: PUSH
93895: LD_VAR 0 6
93899: PUSH
93900: EMPTY
93901: LIST
93902: LIST
93903: PPUSH
93904: CALL_OW 1
93908: ST_TO_ADDR
// end ;
93909: GO 93833
93911: POP
93912: POP
93913: GO 93813
93915: POP
93916: POP
// end ;
93917: LD_VAR 0 4
93921: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
93922: LD_INT 0
93924: PPUSH
93925: PPUSH
93926: PPUSH
93927: PPUSH
93928: PPUSH
93929: PPUSH
93930: PPUSH
93931: PPUSH
// if not units then
93932: LD_VAR 0 1
93936: NOT
93937: IFFALSE 93941
// exit ;
93939: GO 94465
// result := UnitFilter ( units , [ f_ok ] ) ;
93941: LD_ADDR_VAR 0 3
93945: PUSH
93946: LD_VAR 0 1
93950: PPUSH
93951: LD_INT 50
93953: PUSH
93954: EMPTY
93955: LIST
93956: PPUSH
93957: CALL_OW 72
93961: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
93962: LD_ADDR_VAR 0 8
93966: PUSH
93967: LD_VAR 0 1
93971: PUSH
93972: LD_INT 1
93974: ARRAY
93975: PPUSH
93976: CALL_OW 255
93980: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
93981: LD_ADDR_VAR 0 10
93985: PUSH
93986: LD_INT 29
93988: PUSH
93989: LD_INT 91
93991: PUSH
93992: LD_INT 49
93994: PUSH
93995: EMPTY
93996: LIST
93997: LIST
93998: LIST
93999: ST_TO_ADDR
// if not result then
94000: LD_VAR 0 3
94004: NOT
94005: IFFALSE 94009
// exit ;
94007: GO 94465
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
94009: LD_ADDR_VAR 0 5
94013: PUSH
94014: LD_INT 81
94016: PUSH
94017: LD_VAR 0 8
94021: PUSH
94022: EMPTY
94023: LIST
94024: LIST
94025: PPUSH
94026: CALL_OW 69
94030: ST_TO_ADDR
// for i in result do
94031: LD_ADDR_VAR 0 4
94035: PUSH
94036: LD_VAR 0 3
94040: PUSH
94041: FOR_IN
94042: IFFALSE 94463
// begin tag := GetTag ( i ) + 1 ;
94044: LD_ADDR_VAR 0 9
94048: PUSH
94049: LD_VAR 0 4
94053: PPUSH
94054: CALL_OW 110
94058: PUSH
94059: LD_INT 1
94061: PLUS
94062: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
94063: LD_ADDR_VAR 0 7
94067: PUSH
94068: LD_VAR 0 4
94072: PPUSH
94073: CALL_OW 250
94077: PPUSH
94078: LD_VAR 0 4
94082: PPUSH
94083: CALL_OW 251
94087: PPUSH
94088: LD_INT 6
94090: PPUSH
94091: CALL 93664 0 3
94095: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
94096: LD_VAR 0 4
94100: PPUSH
94101: CALL_OW 247
94105: PUSH
94106: LD_INT 2
94108: EQUAL
94109: PUSH
94110: LD_VAR 0 7
94114: AND
94115: PUSH
94116: LD_VAR 0 4
94120: PPUSH
94121: CALL_OW 264
94125: PUSH
94126: LD_VAR 0 10
94130: IN
94131: NOT
94132: AND
94133: IFFALSE 94172
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
94135: LD_VAR 0 4
94139: PPUSH
94140: LD_VAR 0 7
94144: PUSH
94145: LD_INT 1
94147: ARRAY
94148: PUSH
94149: LD_INT 1
94151: ARRAY
94152: PPUSH
94153: LD_VAR 0 7
94157: PUSH
94158: LD_INT 1
94160: ARRAY
94161: PUSH
94162: LD_INT 2
94164: ARRAY
94165: PPUSH
94166: CALL_OW 116
94170: GO 94461
// if path > tag then
94172: LD_VAR 0 2
94176: PUSH
94177: LD_VAR 0 9
94181: GREATER
94182: IFFALSE 94390
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
94184: LD_ADDR_VAR 0 6
94188: PUSH
94189: LD_VAR 0 5
94193: PPUSH
94194: LD_INT 91
94196: PUSH
94197: LD_VAR 0 4
94201: PUSH
94202: LD_INT 8
94204: PUSH
94205: EMPTY
94206: LIST
94207: LIST
94208: LIST
94209: PPUSH
94210: CALL_OW 72
94214: ST_TO_ADDR
// if nearEnemy then
94215: LD_VAR 0 6
94219: IFFALSE 94288
// begin if GetWeapon ( i ) = ru_time_lapser then
94221: LD_VAR 0 4
94225: PPUSH
94226: CALL_OW 264
94230: PUSH
94231: LD_INT 49
94233: EQUAL
94234: IFFALSE 94262
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
94236: LD_VAR 0 4
94240: PPUSH
94241: LD_VAR 0 6
94245: PPUSH
94246: LD_VAR 0 4
94250: PPUSH
94251: CALL_OW 74
94255: PPUSH
94256: CALL_OW 112
94260: GO 94286
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
94262: LD_VAR 0 4
94266: PPUSH
94267: LD_VAR 0 6
94271: PPUSH
94272: LD_VAR 0 4
94276: PPUSH
94277: CALL_OW 74
94281: PPUSH
94282: CALL 95390 0 2
// end else
94286: GO 94388
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
94288: LD_VAR 0 4
94292: PPUSH
94293: LD_VAR 0 2
94297: PUSH
94298: LD_VAR 0 9
94302: ARRAY
94303: PUSH
94304: LD_INT 1
94306: ARRAY
94307: PPUSH
94308: LD_VAR 0 2
94312: PUSH
94313: LD_VAR 0 9
94317: ARRAY
94318: PUSH
94319: LD_INT 2
94321: ARRAY
94322: PPUSH
94323: CALL_OW 297
94327: PUSH
94328: LD_INT 6
94330: GREATER
94331: IFFALSE 94374
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
94333: LD_VAR 0 4
94337: PPUSH
94338: LD_VAR 0 2
94342: PUSH
94343: LD_VAR 0 9
94347: ARRAY
94348: PUSH
94349: LD_INT 1
94351: ARRAY
94352: PPUSH
94353: LD_VAR 0 2
94357: PUSH
94358: LD_VAR 0 9
94362: ARRAY
94363: PUSH
94364: LD_INT 2
94366: ARRAY
94367: PPUSH
94368: CALL_OW 114
94372: GO 94388
// SetTag ( i , tag ) ;
94374: LD_VAR 0 4
94378: PPUSH
94379: LD_VAR 0 9
94383: PPUSH
94384: CALL_OW 109
// end else
94388: GO 94461
// if enemy then
94390: LD_VAR 0 5
94394: IFFALSE 94461
// begin if GetWeapon ( i ) = ru_time_lapser then
94396: LD_VAR 0 4
94400: PPUSH
94401: CALL_OW 264
94405: PUSH
94406: LD_INT 49
94408: EQUAL
94409: IFFALSE 94437
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
94411: LD_VAR 0 4
94415: PPUSH
94416: LD_VAR 0 5
94420: PPUSH
94421: LD_VAR 0 4
94425: PPUSH
94426: CALL_OW 74
94430: PPUSH
94431: CALL_OW 112
94435: GO 94461
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
94437: LD_VAR 0 4
94441: PPUSH
94442: LD_VAR 0 5
94446: PPUSH
94447: LD_VAR 0 4
94451: PPUSH
94452: CALL_OW 74
94456: PPUSH
94457: CALL 95390 0 2
// end ; end ;
94461: GO 94041
94463: POP
94464: POP
// end ;
94465: LD_VAR 0 3
94469: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
94470: LD_INT 0
94472: PPUSH
94473: PPUSH
94474: PPUSH
// if not unit or IsInUnit ( unit ) then
94475: LD_VAR 0 1
94479: NOT
94480: PUSH
94481: LD_VAR 0 1
94485: PPUSH
94486: CALL_OW 310
94490: OR
94491: IFFALSE 94495
// exit ;
94493: GO 94586
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
94495: LD_ADDR_VAR 0 4
94499: PUSH
94500: LD_VAR 0 1
94504: PPUSH
94505: CALL_OW 250
94509: PPUSH
94510: LD_VAR 0 2
94514: PPUSH
94515: LD_INT 1
94517: PPUSH
94518: CALL_OW 272
94522: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
94523: LD_ADDR_VAR 0 5
94527: PUSH
94528: LD_VAR 0 1
94532: PPUSH
94533: CALL_OW 251
94537: PPUSH
94538: LD_VAR 0 2
94542: PPUSH
94543: LD_INT 1
94545: PPUSH
94546: CALL_OW 273
94550: ST_TO_ADDR
// if ValidHex ( x , y ) then
94551: LD_VAR 0 4
94555: PPUSH
94556: LD_VAR 0 5
94560: PPUSH
94561: CALL_OW 488
94565: IFFALSE 94586
// ComTurnXY ( unit , x , y ) ;
94567: LD_VAR 0 1
94571: PPUSH
94572: LD_VAR 0 4
94576: PPUSH
94577: LD_VAR 0 5
94581: PPUSH
94582: CALL_OW 118
// end ;
94586: LD_VAR 0 3
94590: RET
// export function SeeUnits ( side , units ) ; var i ; begin
94591: LD_INT 0
94593: PPUSH
94594: PPUSH
// result := false ;
94595: LD_ADDR_VAR 0 3
94599: PUSH
94600: LD_INT 0
94602: ST_TO_ADDR
// if not units then
94603: LD_VAR 0 2
94607: NOT
94608: IFFALSE 94612
// exit ;
94610: GO 94657
// for i in units do
94612: LD_ADDR_VAR 0 4
94616: PUSH
94617: LD_VAR 0 2
94621: PUSH
94622: FOR_IN
94623: IFFALSE 94655
// if See ( side , i ) then
94625: LD_VAR 0 1
94629: PPUSH
94630: LD_VAR 0 4
94634: PPUSH
94635: CALL_OW 292
94639: IFFALSE 94653
// begin result := true ;
94641: LD_ADDR_VAR 0 3
94645: PUSH
94646: LD_INT 1
94648: ST_TO_ADDR
// exit ;
94649: POP
94650: POP
94651: GO 94657
// end ;
94653: GO 94622
94655: POP
94656: POP
// end ;
94657: LD_VAR 0 3
94661: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
94662: LD_INT 0
94664: PPUSH
94665: PPUSH
94666: PPUSH
94667: PPUSH
// if not unit or not points then
94668: LD_VAR 0 1
94672: NOT
94673: PUSH
94674: LD_VAR 0 2
94678: NOT
94679: OR
94680: IFFALSE 94684
// exit ;
94682: GO 94774
// dist := 99999 ;
94684: LD_ADDR_VAR 0 5
94688: PUSH
94689: LD_INT 99999
94691: ST_TO_ADDR
// for i in points do
94692: LD_ADDR_VAR 0 4
94696: PUSH
94697: LD_VAR 0 2
94701: PUSH
94702: FOR_IN
94703: IFFALSE 94772
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
94705: LD_ADDR_VAR 0 6
94709: PUSH
94710: LD_VAR 0 1
94714: PPUSH
94715: LD_VAR 0 4
94719: PUSH
94720: LD_INT 1
94722: ARRAY
94723: PPUSH
94724: LD_VAR 0 4
94728: PUSH
94729: LD_INT 2
94731: ARRAY
94732: PPUSH
94733: CALL_OW 297
94737: ST_TO_ADDR
// if tmpDist < dist then
94738: LD_VAR 0 6
94742: PUSH
94743: LD_VAR 0 5
94747: LESS
94748: IFFALSE 94770
// begin result := i ;
94750: LD_ADDR_VAR 0 3
94754: PUSH
94755: LD_VAR 0 4
94759: ST_TO_ADDR
// dist := tmpDist ;
94760: LD_ADDR_VAR 0 5
94764: PUSH
94765: LD_VAR 0 6
94769: ST_TO_ADDR
// end ; end ;
94770: GO 94702
94772: POP
94773: POP
// end ;
94774: LD_VAR 0 3
94778: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
94779: LD_INT 0
94781: PPUSH
// uc_side := side ;
94782: LD_ADDR_OWVAR 20
94786: PUSH
94787: LD_VAR 0 1
94791: ST_TO_ADDR
// uc_nation := 3 ;
94792: LD_ADDR_OWVAR 21
94796: PUSH
94797: LD_INT 3
94799: ST_TO_ADDR
// vc_chassis := 25 ;
94800: LD_ADDR_OWVAR 37
94804: PUSH
94805: LD_INT 25
94807: ST_TO_ADDR
// vc_engine := engine_siberite ;
94808: LD_ADDR_OWVAR 39
94812: PUSH
94813: LD_INT 3
94815: ST_TO_ADDR
// vc_control := control_computer ;
94816: LD_ADDR_OWVAR 38
94820: PUSH
94821: LD_INT 3
94823: ST_TO_ADDR
// vc_weapon := 59 ;
94824: LD_ADDR_OWVAR 40
94828: PUSH
94829: LD_INT 59
94831: ST_TO_ADDR
// result := CreateVehicle ;
94832: LD_ADDR_VAR 0 5
94836: PUSH
94837: CALL_OW 45
94841: ST_TO_ADDR
// SetDir ( result , d ) ;
94842: LD_VAR 0 5
94846: PPUSH
94847: LD_VAR 0 4
94851: PPUSH
94852: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
94856: LD_VAR 0 5
94860: PPUSH
94861: LD_VAR 0 2
94865: PPUSH
94866: LD_VAR 0 3
94870: PPUSH
94871: LD_INT 0
94873: PPUSH
94874: CALL_OW 48
// end ;
94878: LD_VAR 0 5
94882: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
94883: LD_INT 0
94885: PPUSH
94886: PPUSH
94887: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
94888: LD_ADDR_VAR 0 2
94892: PUSH
94893: LD_INT 0
94895: PUSH
94896: LD_INT 0
94898: PUSH
94899: LD_INT 0
94901: PUSH
94902: LD_INT 0
94904: PUSH
94905: EMPTY
94906: LIST
94907: LIST
94908: LIST
94909: LIST
94910: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
94911: LD_VAR 0 1
94915: NOT
94916: PUSH
94917: LD_VAR 0 1
94921: PPUSH
94922: CALL_OW 264
94926: PUSH
94927: LD_INT 12
94929: PUSH
94930: LD_INT 51
94932: PUSH
94933: LD_INT 32
94935: PUSH
94936: LD_INT 89
94938: PUSH
94939: EMPTY
94940: LIST
94941: LIST
94942: LIST
94943: LIST
94944: IN
94945: NOT
94946: OR
94947: IFFALSE 94951
// exit ;
94949: GO 95049
// for i := 1 to 3 do
94951: LD_ADDR_VAR 0 3
94955: PUSH
94956: DOUBLE
94957: LD_INT 1
94959: DEC
94960: ST_TO_ADDR
94961: LD_INT 3
94963: PUSH
94964: FOR_TO
94965: IFFALSE 95047
// begin tmp := GetCargo ( cargo , i ) ;
94967: LD_ADDR_VAR 0 4
94971: PUSH
94972: LD_VAR 0 1
94976: PPUSH
94977: LD_VAR 0 3
94981: PPUSH
94982: CALL_OW 289
94986: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
94987: LD_ADDR_VAR 0 2
94991: PUSH
94992: LD_VAR 0 2
94996: PPUSH
94997: LD_VAR 0 3
95001: PPUSH
95002: LD_VAR 0 4
95006: PPUSH
95007: CALL_OW 1
95011: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
95012: LD_ADDR_VAR 0 2
95016: PUSH
95017: LD_VAR 0 2
95021: PPUSH
95022: LD_INT 4
95024: PPUSH
95025: LD_VAR 0 2
95029: PUSH
95030: LD_INT 4
95032: ARRAY
95033: PUSH
95034: LD_VAR 0 4
95038: PLUS
95039: PPUSH
95040: CALL_OW 1
95044: ST_TO_ADDR
// end ;
95045: GO 94964
95047: POP
95048: POP
// end ;
95049: LD_VAR 0 2
95053: RET
// export function Length ( array ) ; begin
95054: LD_INT 0
95056: PPUSH
// result := array + 0 ;
95057: LD_ADDR_VAR 0 2
95061: PUSH
95062: LD_VAR 0 1
95066: PUSH
95067: LD_INT 0
95069: PLUS
95070: ST_TO_ADDR
// end ;
95071: LD_VAR 0 2
95075: RET
// export function PrepareArray ( array ) ; begin
95076: LD_INT 0
95078: PPUSH
// result := array diff 0 ;
95079: LD_ADDR_VAR 0 2
95083: PUSH
95084: LD_VAR 0 1
95088: PUSH
95089: LD_INT 0
95091: DIFF
95092: ST_TO_ADDR
// if not result [ 1 ] then
95093: LD_VAR 0 2
95097: PUSH
95098: LD_INT 1
95100: ARRAY
95101: NOT
95102: IFFALSE 95122
// result := Delete ( result , 1 ) ;
95104: LD_ADDR_VAR 0 2
95108: PUSH
95109: LD_VAR 0 2
95113: PPUSH
95114: LD_INT 1
95116: PPUSH
95117: CALL_OW 3
95121: ST_TO_ADDR
// end ;
95122: LD_VAR 0 2
95126: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
95127: LD_INT 0
95129: PPUSH
95130: PPUSH
95131: PPUSH
95132: PPUSH
// sibRocketRange := 25 ;
95133: LD_ADDR_VAR 0 6
95137: PUSH
95138: LD_INT 25
95140: ST_TO_ADDR
// result := false ;
95141: LD_ADDR_VAR 0 4
95145: PUSH
95146: LD_INT 0
95148: ST_TO_ADDR
// for i := 0 to 5 do
95149: LD_ADDR_VAR 0 5
95153: PUSH
95154: DOUBLE
95155: LD_INT 0
95157: DEC
95158: ST_TO_ADDR
95159: LD_INT 5
95161: PUSH
95162: FOR_TO
95163: IFFALSE 95230
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
95165: LD_VAR 0 1
95169: PPUSH
95170: LD_VAR 0 5
95174: PPUSH
95175: LD_VAR 0 6
95179: PPUSH
95180: CALL_OW 272
95184: PPUSH
95185: LD_VAR 0 2
95189: PPUSH
95190: LD_VAR 0 5
95194: PPUSH
95195: LD_VAR 0 6
95199: PPUSH
95200: CALL_OW 273
95204: PPUSH
95205: LD_VAR 0 3
95209: PPUSH
95210: CALL_OW 309
95214: IFFALSE 95228
// begin result := true ;
95216: LD_ADDR_VAR 0 4
95220: PUSH
95221: LD_INT 1
95223: ST_TO_ADDR
// exit ;
95224: POP
95225: POP
95226: GO 95232
// end ;
95228: GO 95162
95230: POP
95231: POP
// end ;
95232: LD_VAR 0 4
95236: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
95237: LD_INT 0
95239: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
95240: LD_VAR 0 1
95244: PPUSH
95245: LD_VAR 0 2
95249: PPUSH
95250: LD_INT 0
95252: PPUSH
95253: LD_INT 0
95255: PPUSH
95256: LD_INT 1
95258: PPUSH
95259: LD_INT 0
95261: PPUSH
95262: CALL_OW 587
// end ;
95266: LD_VAR 0 3
95270: RET
// export function CenterOnNow ( unit ) ; begin
95271: LD_INT 0
95273: PPUSH
// result := IsInUnit ( unit ) ;
95274: LD_ADDR_VAR 0 2
95278: PUSH
95279: LD_VAR 0 1
95283: PPUSH
95284: CALL_OW 310
95288: ST_TO_ADDR
// if not result then
95289: LD_VAR 0 2
95293: NOT
95294: IFFALSE 95306
// result := unit ;
95296: LD_ADDR_VAR 0 2
95300: PUSH
95301: LD_VAR 0 1
95305: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
95306: LD_VAR 0 1
95310: PPUSH
95311: CALL_OW 87
// end ;
95315: LD_VAR 0 2
95319: RET
// export function ComMoveHex ( unit , hex ) ; begin
95320: LD_INT 0
95322: PPUSH
// if not hex then
95323: LD_VAR 0 2
95327: NOT
95328: IFFALSE 95332
// exit ;
95330: GO 95385
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
95332: LD_VAR 0 2
95336: PUSH
95337: LD_INT 1
95339: ARRAY
95340: PPUSH
95341: LD_VAR 0 2
95345: PUSH
95346: LD_INT 2
95348: ARRAY
95349: PPUSH
95350: CALL_OW 428
95354: IFFALSE 95358
// exit ;
95356: GO 95385
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
95358: LD_VAR 0 1
95362: PPUSH
95363: LD_VAR 0 2
95367: PUSH
95368: LD_INT 1
95370: ARRAY
95371: PPUSH
95372: LD_VAR 0 2
95376: PUSH
95377: LD_INT 2
95379: ARRAY
95380: PPUSH
95381: CALL_OW 111
// end ;
95385: LD_VAR 0 3
95389: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
95390: LD_INT 0
95392: PPUSH
95393: PPUSH
95394: PPUSH
// if not unit or not enemy then
95395: LD_VAR 0 1
95399: NOT
95400: PUSH
95401: LD_VAR 0 2
95405: NOT
95406: OR
95407: IFFALSE 95411
// exit ;
95409: GO 95535
// x := GetX ( enemy ) ;
95411: LD_ADDR_VAR 0 4
95415: PUSH
95416: LD_VAR 0 2
95420: PPUSH
95421: CALL_OW 250
95425: ST_TO_ADDR
// y := GetY ( enemy ) ;
95426: LD_ADDR_VAR 0 5
95430: PUSH
95431: LD_VAR 0 2
95435: PPUSH
95436: CALL_OW 251
95440: ST_TO_ADDR
// if ValidHex ( x , y ) then
95441: LD_VAR 0 4
95445: PPUSH
95446: LD_VAR 0 5
95450: PPUSH
95451: CALL_OW 488
95455: IFFALSE 95535
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
95457: LD_VAR 0 2
95461: PPUSH
95462: CALL_OW 247
95466: PUSH
95467: LD_INT 3
95469: PUSH
95470: LD_INT 2
95472: PUSH
95473: EMPTY
95474: LIST
95475: LIST
95476: IN
95477: PUSH
95478: LD_VAR 0 1
95482: PPUSH
95483: CALL_OW 255
95487: PPUSH
95488: LD_VAR 0 2
95492: PPUSH
95493: CALL_OW 292
95497: AND
95498: IFFALSE 95516
// ComAttackUnit ( unit , enemy ) else
95500: LD_VAR 0 1
95504: PPUSH
95505: LD_VAR 0 2
95509: PPUSH
95510: CALL_OW 115
95514: GO 95535
// ComAgressiveMove ( unit , x , y ) ;
95516: LD_VAR 0 1
95520: PPUSH
95521: LD_VAR 0 4
95525: PPUSH
95526: LD_VAR 0 5
95530: PPUSH
95531: CALL_OW 114
// end ; end_of_file
95535: LD_VAR 0 3
95539: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
95540: LD_VAR 0 1
95544: PUSH
95545: LD_INT 200
95547: DOUBLE
95548: GREATEREQUAL
95549: IFFALSE 95557
95551: LD_INT 299
95553: DOUBLE
95554: LESSEQUAL
95555: IFTRUE 95559
95557: GO 95591
95559: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
95560: LD_VAR 0 1
95564: PPUSH
95565: LD_VAR 0 2
95569: PPUSH
95570: LD_VAR 0 3
95574: PPUSH
95575: LD_VAR 0 4
95579: PPUSH
95580: LD_VAR 0 5
95584: PPUSH
95585: CALL 50084 0 5
95589: GO 95668
95591: LD_INT 300
95593: DOUBLE
95594: GREATEREQUAL
95595: IFFALSE 95603
95597: LD_INT 399
95599: DOUBLE
95600: LESSEQUAL
95601: IFTRUE 95605
95603: GO 95667
95605: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
95606: LD_VAR 0 1
95610: PPUSH
95611: LD_VAR 0 2
95615: PPUSH
95616: LD_VAR 0 3
95620: PPUSH
95621: LD_VAR 0 4
95625: PPUSH
95626: LD_VAR 0 5
95630: PPUSH
95631: LD_VAR 0 6
95635: PPUSH
95636: LD_VAR 0 7
95640: PPUSH
95641: LD_VAR 0 8
95645: PPUSH
95646: LD_VAR 0 9
95650: PPUSH
95651: LD_VAR 0 10
95655: PPUSH
95656: LD_VAR 0 11
95660: PPUSH
95661: CALL 46409 0 11
95665: GO 95668
95667: POP
// end ;
95668: PPOPN 11
95670: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
95671: LD_VAR 0 1
95675: PPUSH
95676: LD_VAR 0 2
95680: PPUSH
95681: LD_VAR 0 3
95685: PPUSH
95686: LD_VAR 0 4
95690: PPUSH
95691: LD_VAR 0 5
95695: PPUSH
95696: CALL 49820 0 5
// end ; end_of_file
95700: PPOPN 5
95702: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
95703: LD_VAR 0 1
95707: PPUSH
95708: LD_VAR 0 2
95712: PPUSH
95713: LD_VAR 0 3
95717: PPUSH
95718: LD_VAR 0 4
95722: PPUSH
95723: LD_VAR 0 5
95727: PPUSH
95728: LD_VAR 0 6
95732: PPUSH
95733: CALL 34061 0 6
// end ;
95737: PPOPN 6
95739: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
95740: LD_INT 0
95742: PPUSH
// begin if not units then
95743: LD_VAR 0 1
95747: NOT
95748: IFFALSE 95752
// exit ;
95750: GO 95752
// end ;
95752: PPOPN 7
95754: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
95755: CALL 33965 0 0
// end ;
95759: PPOPN 1
95761: END
