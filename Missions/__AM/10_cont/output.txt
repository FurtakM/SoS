// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Mike ; export Cornell ; export Truman ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export ruMech ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned , ruDepotConstructed , spawnRussians ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog , snipersTrained ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 30
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 22
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 31
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 40
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 41
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 42
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 43
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 44
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 52
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 49
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 48
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 50
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 51
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 63
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// ruMech := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 123: LD_ADDR_EXP 53
 127: PUSH
 128: LD_INT 4
 130: PUSH
 131: LD_INT 5
 133: PUSH
 134: LD_INT 6
 136: PUSH
 137: LD_INT 6
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: PUSH
 146: LD_OWVAR 67
 150: ARRAY
 151: ST_TO_ADDR
// eventVar1 = 0 ;
 152: LD_ADDR_EXP 67
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// eventVar2 = 0 ;
 160: LD_ADDR_EXP 68
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// fastEnd = 0 ;
 168: LD_ADDR_EXP 65
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// KhatamStatus = 0 ;
 176: LD_ADDR_EXP 55
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// GensherStatus = 0 ;
 184: LD_ADDR_EXP 54
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// cratesSpawned = 0 ;
 192: LD_ADDR_EXP 58
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 , 2 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 61
 204: PUSH
 205: LD_INT 1
 207: PUSH
 208: LD_INT 2
 210: PUSH
 211: LD_INT 2
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 , 4 ] [ Difficulty ] ;
 229: LD_ADDR_EXP 62
 233: PUSH
 234: LD_INT 2
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: LD_INT 4
 242: PUSH
 243: LD_INT 4
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: PUSH
 252: LD_OWVAR 67
 256: ARRAY
 257: ST_TO_ADDR
// snipersTrained := false ;
 258: LD_ADDR_EXP 64
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// ruDepotConstructed := false ;
 266: LD_ADDR_EXP 59
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// spawnRussians := false ;
 274: LD_ADDR_EXP 60
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// attackAvalaible = 1 ;
 282: LD_ADDR_EXP 66
 286: PUSH
 287: LD_INT 1
 289: ST_TO_ADDR
// mission_prefix := 10c_ ;
 290: LD_ADDR_EXP 56
 294: PUSH
 295: LD_STRING 10c_
 297: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 298: LD_ADDR_EXP 57
 302: PUSH
 303: LD_STRING 10_
 305: ST_TO_ADDR
// debugMode = 0 ;
 306: LD_ADDR_EXP 69
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// Video ( true ) ;
 314: LD_INT 1
 316: PPUSH
 317: CALL 87733 0 1
// CreateNature ;
 321: CALL 27290 0 0
// PrepareDifficulty ;
 325: CALL 11808 0 0
// PrepareJMMTeam ;
 329: CALL 1363 0 0
// PrepareCathyTeam ;
 333: CALL 2599 0 0
// PlaceMines ( MineField1 , 1 + Difficulty ) ;
 337: LD_INT 24
 339: PPUSH
 340: LD_INT 1
 342: PUSH
 343: LD_OWVAR 67
 347: PLUS
 348: PPUSH
 349: CALL 21668 0 2
// if Difficulty > 1 then
 353: LD_OWVAR 67
 357: PUSH
 358: LD_INT 1
 360: GREATER
 361: IFFALSE 375
// PlaceMines ( MineField2 , Difficulty ) ;
 363: LD_INT 25
 365: PPUSH
 366: LD_OWVAR 67
 370: PPUSH
 371: CALL 21668 0 2
// if Difficulty > 2 then
 375: LD_OWVAR 67
 379: PUSH
 380: LD_INT 2
 382: GREATER
 383: IFFALSE 397
// PlaceMines ( MineField3 , Difficulty ) ;
 385: LD_INT 26
 387: PPUSH
 388: LD_OWVAR 67
 392: PPUSH
 393: CALL 21668 0 2
// PrepareArabianCommander ;
 397: CALL 4250 0 0
// PrepareArabian ;
 401: CALL 4302 0 0
// BuildArabianBase ;
 405: CALL 14623 0 0
// TameApemans ;
 409: CALL 20473 0 0
// end ;
 413: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 414: LD_EXP 69
 418: PUSH
 419: LD_INT 1
 421: EQUAL
 422: IFFALSE 728
 424: GO 426
 426: DISABLE
 427: LD_INT 0
 429: PPUSH
// begin enable ;
 430: ENABLE
// fogoff ( true ) ;
 431: LD_INT 1
 433: PPUSH
 434: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 438: LD_ADDR_VAR 0 1
 442: PUSH
 443: LD_INT 22
 445: PUSH
 446: LD_INT 1
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: PUSH
 453: LD_INT 21
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PPUSH
 467: CALL_OW 69
 471: PUSH
 472: FOR_IN
 473: IFFALSE 489
// SetLives ( i , 1000 ) ;
 475: LD_VAR 0 1
 479: PPUSH
 480: LD_INT 1000
 482: PPUSH
 483: CALL_OW 234
 487: GO 472
 489: POP
 490: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 491: LD_ADDR_VAR 0 1
 495: PUSH
 496: LD_INT 22
 498: PUSH
 499: LD_INT 1
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: PUSH
 506: LD_INT 2
 508: PUSH
 509: LD_INT 30
 511: PUSH
 512: LD_INT 0
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 30
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: PPUSH
 538: CALL_OW 69
 542: PUSH
 543: FOR_IN
 544: IFFALSE 568
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 546: LD_VAR 0 1
 550: PPUSH
 551: CALL_OW 274
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: LD_INT 9999
 561: PPUSH
 562: CALL_OW 277
 566: GO 543
 568: POP
 569: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 570: LD_ADDR_VAR 0 1
 574: PUSH
 575: LD_INT 22
 577: PUSH
 578: LD_INT 1
 580: PUSH
 581: EMPTY
 582: LIST
 583: LIST
 584: PUSH
 585: LD_INT 2
 587: PUSH
 588: LD_INT 30
 590: PUSH
 591: LD_INT 0
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: PUSH
 598: LD_INT 30
 600: PUSH
 601: LD_INT 1
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: PUSH
 608: EMPTY
 609: LIST
 610: LIST
 611: LIST
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: PPUSH
 617: CALL_OW 69
 621: PUSH
 622: FOR_IN
 623: IFFALSE 647
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 625: LD_VAR 0 1
 629: PPUSH
 630: CALL_OW 274
 634: PPUSH
 635: LD_INT 2
 637: PPUSH
 638: LD_INT 9999
 640: PPUSH
 641: CALL_OW 277
 645: GO 622
 647: POP
 648: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 649: LD_ADDR_VAR 0 1
 653: PUSH
 654: LD_INT 22
 656: PUSH
 657: LD_INT 1
 659: PUSH
 660: EMPTY
 661: LIST
 662: LIST
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 30
 669: PUSH
 670: LD_INT 0
 672: PUSH
 673: EMPTY
 674: LIST
 675: LIST
 676: PUSH
 677: LD_INT 30
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: PPUSH
 696: CALL_OW 69
 700: PUSH
 701: FOR_IN
 702: IFFALSE 726
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 704: LD_VAR 0 1
 708: PPUSH
 709: CALL_OW 274
 713: PPUSH
 714: LD_INT 3
 716: PPUSH
 717: LD_INT 9999
 719: PPUSH
 720: CALL_OW 277
 724: GO 701
 726: POP
 727: POP
// end ;
 728: PPOPN 1
 730: END
// every 0 0$1 trigger FilterAllUnits ( [ f_class , class_sniper ] ) do
 731: LD_INT 25
 733: PUSH
 734: LD_INT 5
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PPUSH
 741: CALL_OW 69
 745: IFFALSE 758
 747: GO 749
 749: DISABLE
// snipersTrained := true ;
 750: LD_ADDR_EXP 64
 754: PUSH
 755: LD_INT 1
 757: ST_TO_ADDR
 758: END
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and spawnRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 759: LD_INT 1
 761: PPUSH
 762: LD_INT 2
 764: PPUSH
 765: CALL_OW 81
 769: PUSH
 770: LD_INT 1
 772: EQUAL
 773: PUSH
 774: LD_EXP 60
 778: AND
 779: PUSH
 780: LD_INT 22
 782: PUSH
 783: LD_INT 3
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: PPUSH
 790: CALL_OW 69
 794: PUSH
 795: LD_INT 0
 797: EQUAL
 798: AND
 799: IFFALSE 811
 801: GO 803
 803: DISABLE
// SetAchievement ( ACH_POWER ) ;
 804: LD_STRING ACH_POWER
 806: PPUSH
 807: CALL_OW 543
 811: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 812: LD_INT 22
 814: PUSH
 815: LD_INT 1
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 30
 824: PUSH
 825: LD_INT 1
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: PPUSH
 836: CALL_OW 69
 840: PUSH
 841: LD_INT 22
 843: PUSH
 844: LD_INT 1
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: LD_INT 30
 853: PUSH
 854: LD_INT 32
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PPUSH
 865: CALL_OW 69
 869: AND
 870: PUSH
 871: LD_INT 22
 873: PUSH
 874: LD_INT 1
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 30
 883: PUSH
 884: LD_INT 33
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: PUSH
 891: EMPTY
 892: LIST
 893: LIST
 894: PPUSH
 895: CALL_OW 69
 899: AND
 900: PUSH
 901: LD_INT 22
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: PUSH
 911: LD_INT 30
 913: PUSH
 914: LD_INT 5
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PPUSH
 925: CALL_OW 69
 929: AND
 930: PUSH
 931: LD_INT 22
 933: PUSH
 934: LD_INT 1
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 30
 943: PUSH
 944: LD_INT 3
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: PPUSH
 955: CALL_OW 69
 959: AND
 960: PUSH
 961: LD_INT 22
 963: PUSH
 964: LD_INT 1
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 30
 973: PUSH
 974: LD_INT 36
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 69
 989: AND
 990: PUSH
 991: LD_INT 22
 993: PUSH
 994: LD_INT 1
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: PUSH
1001: LD_INT 30
1003: PUSH
1004: LD_INT 31
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: PPUSH
1015: CALL_OW 69
1019: AND
1020: PUSH
1021: LD_INT 22
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: PUSH
1031: LD_INT 30
1033: PUSH
1034: LD_INT 22
1036: PUSH
1037: EMPTY
1038: LIST
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PPUSH
1045: CALL_OW 69
1049: AND
1050: PUSH
1051: LD_INT 22
1053: PUSH
1054: LD_INT 1
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 30
1063: PUSH
1064: LD_INT 20
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PPUSH
1075: CALL_OW 69
1079: AND
1080: PUSH
1081: LD_INT 22
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: PUSH
1091: LD_INT 30
1093: PUSH
1094: LD_INT 19
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: PPUSH
1105: CALL_OW 69
1109: AND
1110: PUSH
1111: LD_INT 22
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: PUSH
1121: LD_INT 30
1123: PUSH
1124: LD_INT 16
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: PPUSH
1135: CALL_OW 69
1139: AND
1140: PUSH
1141: LD_INT 22
1143: PUSH
1144: LD_INT 1
1146: PUSH
1147: EMPTY
1148: LIST
1149: LIST
1150: PUSH
1151: LD_INT 30
1153: PUSH
1154: LD_INT 17
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PPUSH
1165: CALL_OW 69
1169: AND
1170: PUSH
1171: LD_INT 22
1173: PUSH
1174: LD_INT 1
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PUSH
1181: LD_INT 30
1183: PUSH
1184: LD_INT 21
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: PPUSH
1195: CALL_OW 69
1199: AND
1200: PUSH
1201: LD_INT 22
1203: PUSH
1204: LD_INT 1
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: PUSH
1211: LD_INT 30
1213: PUSH
1214: LD_INT 29
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 69
1229: AND
1230: PUSH
1231: LD_INT 22
1233: PUSH
1234: LD_INT 1
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: LD_INT 30
1243: PUSH
1244: LD_INT 30
1246: PUSH
1247: EMPTY
1248: LIST
1249: LIST
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: PPUSH
1255: CALL_OW 69
1259: AND
1260: PUSH
1261: LD_INT 22
1263: PUSH
1264: LD_INT 1
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 30
1273: PUSH
1274: LD_INT 27
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PPUSH
1285: CALL_OW 69
1289: AND
1290: PUSH
1291: LD_INT 22
1293: PUSH
1294: LD_INT 1
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PUSH
1301: LD_INT 30
1303: PUSH
1304: LD_INT 26
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PPUSH
1315: CALL_OW 69
1319: AND
1320: PUSH
1321: LD_INT 22
1323: PUSH
1324: LD_INT 1
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: PUSH
1331: LD_INT 30
1333: PUSH
1334: LD_INT 28
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: PPUSH
1345: CALL_OW 69
1349: AND
1350: IFFALSE 1362
1352: GO 1354
1354: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1355: LD_STRING ACH_ARCH
1357: PPUSH
1358: CALL_OW 543
1362: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
1363: LD_INT 0
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
1369: PPUSH
1370: PPUSH
// uc_side = 1 ;
1371: LD_ADDR_OWVAR 20
1375: PUSH
1376: LD_INT 1
1378: ST_TO_ADDR
// uc_nation = 1 ;
1379: LD_ADDR_OWVAR 21
1383: PUSH
1384: LD_INT 1
1386: ST_TO_ADDR
// count = 0 ;
1387: LD_ADDR_VAR 0 6
1391: PUSH
1392: LD_INT 0
1394: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 10_ ) ;
1395: LD_ADDR_EXP 1
1399: PUSH
1400: LD_STRING JMM
1402: PPUSH
1403: LD_INT 1
1405: PPUSH
1406: LD_STRING 10_
1408: PPUSH
1409: CALL 50293 0 3
1413: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
1414: LD_ADDR_EXP 22
1418: PUSH
1419: LD_EXP 22
1423: PUSH
1424: LD_EXP 1
1428: ADD
1429: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 10_ ) ;
1430: LD_ADDR_EXP 10
1434: PUSH
1435: LD_STRING Gary
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: LD_STRING 10_
1443: PPUSH
1444: CALL 50293 0 3
1448: ST_TO_ADDR
// if Gary then
1449: LD_EXP 10
1453: IFFALSE 1471
// JMMSquad = JMMSquad ^ Gary ;
1455: LD_ADDR_EXP 22
1459: PUSH
1460: LD_EXP 22
1464: PUSH
1465: LD_EXP 10
1469: ADD
1470: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , 10_ ) ;
1471: LD_ADDR_EXP 5
1475: PUSH
1476: LD_STRING Cyrus
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_STRING 10_
1484: PPUSH
1485: CALL 50293 0 3
1489: ST_TO_ADDR
// if Cyrus then
1490: LD_EXP 5
1494: IFFALSE 1512
// JMMSquad = JMMSquad ^ Cyrus ;
1496: LD_ADDR_EXP 22
1500: PUSH
1501: LD_EXP 22
1505: PUSH
1506: LD_EXP 5
1510: ADD
1511: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , 10_ ) ;
1512: LD_ADDR_EXP 4
1516: PUSH
1517: LD_STRING Bobby
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_STRING 10_
1525: PPUSH
1526: CALL 50293 0 3
1530: ST_TO_ADDR
// if Bobby then
1531: LD_EXP 4
1535: IFFALSE 1553
// JMMSquad = JMMSquad ^ Bobby ;
1537: LD_ADDR_EXP 22
1541: PUSH
1542: LD_EXP 22
1546: PUSH
1547: LD_EXP 4
1551: ADD
1552: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , 10_ ) ;
1553: LD_ADDR_EXP 6
1557: PUSH
1558: LD_STRING Lisa
1560: PPUSH
1561: LD_INT 1
1563: PPUSH
1564: LD_STRING 10_
1566: PPUSH
1567: CALL 50293 0 3
1571: ST_TO_ADDR
// if Lisa then
1572: LD_EXP 6
1576: IFFALSE 1594
// JMMSquad = JMMSquad ^ Lisa ;
1578: LD_ADDR_EXP 22
1582: PUSH
1583: LD_EXP 22
1587: PUSH
1588: LD_EXP 6
1592: ADD
1593: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , 10_ ) ;
1594: LD_ADDR_EXP 2
1598: PUSH
1599: LD_STRING Brown
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: LD_STRING 10_
1607: PPUSH
1608: CALL 50293 0 3
1612: ST_TO_ADDR
// if Brown then
1613: LD_EXP 2
1617: IFFALSE 1635
// JMMSquad = JMMSquad ^ Brown ;
1619: LD_ADDR_EXP 22
1623: PUSH
1624: LD_EXP 22
1628: PUSH
1629: LD_EXP 2
1633: ADD
1634: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , 10_ ) ;
1635: LD_ADDR_EXP 3
1639: PUSH
1640: LD_STRING Donaldson
1642: PPUSH
1643: LD_INT 1
1645: PPUSH
1646: LD_STRING 10_
1648: PPUSH
1649: CALL 50293 0 3
1653: ST_TO_ADDR
// if Donaldson then
1654: LD_EXP 3
1658: IFFALSE 1676
// JMMSquad = JMMSquad ^ Donaldson ;
1660: LD_ADDR_EXP 22
1664: PUSH
1665: LD_EXP 22
1669: PUSH
1670: LD_EXP 3
1674: ADD
1675: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 10_ ) ;
1676: LD_ADDR_EXP 7
1680: PUSH
1681: LD_STRING Frank
1683: PPUSH
1684: LD_INT 1
1686: PPUSH
1687: LD_STRING 10_
1689: PPUSH
1690: CALL 50293 0 3
1694: ST_TO_ADDR
// if Frank then
1695: LD_EXP 7
1699: IFFALSE 1717
// JMMSquad = JMMSquad ^ Frank ;
1701: LD_ADDR_EXP 22
1705: PUSH
1706: LD_EXP 22
1710: PUSH
1711: LD_EXP 7
1715: ADD
1716: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 10_ ) ;
1717: LD_ADDR_EXP 9
1721: PUSH
1722: LD_STRING Houten
1724: PPUSH
1725: LD_INT 1
1727: PPUSH
1728: LD_STRING 10_
1730: PPUSH
1731: CALL 50293 0 3
1735: ST_TO_ADDR
// if Houten then
1736: LD_EXP 9
1740: IFFALSE 1758
// JMMSquad = JMMSquad ^ Houten ;
1742: LD_ADDR_EXP 22
1746: PUSH
1747: LD_EXP 22
1751: PUSH
1752: LD_EXP 9
1756: ADD
1757: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1758: LD_ADDR_EXP 23
1762: PUSH
1763: LD_STRING OthersIn10
1765: PPUSH
1766: CALL_OW 31
1770: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
1771: LD_ADDR_EXP 26
1775: PUSH
1776: LD_STRING Powell
1778: PPUSH
1779: LD_INT 0
1781: PPUSH
1782: LD_STRING 
1784: PPUSH
1785: CALL 50293 0 3
1789: ST_TO_ADDR
// for i in JMMSquad do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: LD_EXP 22
1799: PUSH
1800: FOR_IN
1801: IFFALSE 2081
// begin if count < 3 then
1803: LD_VAR 0 6
1807: PUSH
1808: LD_INT 3
1810: LESS
1811: IFFALSE 1928
// begin vc_engine = 1 ;
1813: LD_ADDR_OWVAR 39
1817: PUSH
1818: LD_INT 1
1820: ST_TO_ADDR
// vc_control = 1 ;
1821: LD_ADDR_OWVAR 38
1825: PUSH
1826: LD_INT 1
1828: ST_TO_ADDR
// vc_weapon = 12 ;
1829: LD_ADDR_OWVAR 40
1833: PUSH
1834: LD_INT 12
1836: ST_TO_ADDR
// vc_chassis = 3 ;
1837: LD_ADDR_OWVAR 37
1841: PUSH
1842: LD_INT 3
1844: ST_TO_ADDR
// veh = CreateVehicle ;
1845: LD_ADDR_VAR 0 4
1849: PUSH
1850: CALL_OW 45
1854: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1855: LD_VAR 0 4
1859: PPUSH
1860: LD_INT 1
1862: PPUSH
1863: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1867: LD_VAR 0 4
1871: PPUSH
1872: LD_INT 2
1874: PPUSH
1875: LD_INT 0
1877: PPUSH
1878: CALL_OW 49
// if count mod 2 = 0 then
1882: LD_VAR 0 6
1886: PUSH
1887: LD_INT 2
1889: MOD
1890: PUSH
1891: LD_INT 0
1893: EQUAL
1894: IFFALSE 1913
// AddCargo ( veh , 1 , 100 ) else
1896: LD_VAR 0 4
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: LD_INT 100
1906: PPUSH
1907: CALL_OW 291
1911: GO 1928
// AddCargo ( veh , 3 , 100 ) end ;
1913: LD_VAR 0 4
1917: PPUSH
1918: LD_INT 3
1920: PPUSH
1921: LD_INT 100
1923: PPUSH
1924: CALL_OW 291
// if count >= 3 then
1928: LD_VAR 0 6
1932: PUSH
1933: LD_INT 3
1935: GREATEREQUAL
1936: IFFALSE 2051
// begin vc_engine = 1 ;
1938: LD_ADDR_OWVAR 39
1942: PUSH
1943: LD_INT 1
1945: ST_TO_ADDR
// vc_control = 1 ;
1946: LD_ADDR_OWVAR 38
1950: PUSH
1951: LD_INT 1
1953: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1954: LD_ADDR_OWVAR 40
1958: PUSH
1959: LD_INT 3
1961: PUSH
1962: LD_INT 4
1964: PUSH
1965: LD_INT 5
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: LD_INT 1
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: CALL_OW 12
1983: ARRAY
1984: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
1985: LD_ADDR_OWVAR 37
1989: PUSH
1990: LD_INT 2
1992: PUSH
1993: LD_INT 3
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: LD_VAR 0 2
2004: PUSH
2005: LD_INT 2
2007: MOD
2008: PUSH
2009: LD_INT 1
2011: PLUS
2012: ARRAY
2013: ST_TO_ADDR
// veh = CreateVehicle ;
2014: LD_ADDR_VAR 0 4
2018: PUSH
2019: CALL_OW 45
2023: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2024: LD_VAR 0 4
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2036: LD_VAR 0 4
2040: PPUSH
2041: LD_INT 2
2043: PPUSH
2044: LD_INT 0
2046: PPUSH
2047: CALL_OW 49
// end ; count = count + 1 ;
2051: LD_ADDR_VAR 0 6
2055: PUSH
2056: LD_VAR 0 6
2060: PUSH
2061: LD_INT 1
2063: PLUS
2064: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2065: LD_VAR 0 2
2069: PPUSH
2070: LD_VAR 0 4
2074: PPUSH
2075: CALL_OW 52
// end ;
2079: GO 1800
2081: POP
2082: POP
// for i := 1 to others10 do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 1
2091: DEC
2092: ST_TO_ADDR
2093: LD_EXP 23
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2330
// begin if i < [ 5 , 4 , 3 , 3 ] [ Difficulty ] then
2101: LD_VAR 0 2
2105: PUSH
2106: LD_INT 5
2108: PUSH
2109: LD_INT 4
2111: PUSH
2112: LD_INT 3
2114: PUSH
2115: LD_INT 3
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: PUSH
2124: LD_OWVAR 67
2128: ARRAY
2129: LESS
2130: IFFALSE 2283
// begin vc_engine = 1 ;
2132: LD_ADDR_OWVAR 39
2136: PUSH
2137: LD_INT 1
2139: ST_TO_ADDR
// vc_control = 1 ;
2140: LD_ADDR_OWVAR 38
2144: PUSH
2145: LD_INT 1
2147: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2148: LD_ADDR_OWVAR 40
2152: PUSH
2153: LD_INT 3
2155: PUSH
2156: LD_INT 4
2158: PUSH
2159: LD_INT 5
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_INT 3
2172: PPUSH
2173: CALL_OW 12
2177: ARRAY
2178: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
2179: LD_ADDR_OWVAR 37
2183: PUSH
2184: LD_INT 2
2186: PUSH
2187: LD_INT 3
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_VAR 0 2
2198: PUSH
2199: LD_INT 2
2201: MOD
2202: PUSH
2203: LD_INT 1
2205: PLUS
2206: ARRAY
2207: ST_TO_ADDR
// veh = CreateVehicle ;
2208: LD_ADDR_VAR 0 4
2212: PUSH
2213: CALL_OW 45
2217: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2218: LD_VAR 0 4
2222: PPUSH
2223: LD_INT 1
2225: PPUSH
2226: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2230: LD_VAR 0 4
2234: PPUSH
2235: LD_INT 2
2237: PPUSH
2238: LD_INT 0
2240: PPUSH
2241: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2245: LD_ADDR_EXP 30
2249: PUSH
2250: LD_EXP 30
2254: PUSH
2255: LD_VAR 0 4
2259: ADD
2260: ST_TO_ADDR
// PlaceHumanInUnit ( others10 [ i ] , veh ) ;
2261: LD_EXP 23
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PPUSH
2272: LD_VAR 0 4
2276: PPUSH
2277: CALL_OW 52
// end else
2281: GO 2328
// begin PlaceUnitXYR ( others10 [ i ] , 106 , 33 , 6 , false ) ;
2283: LD_EXP 23
2287: PUSH
2288: LD_VAR 0 2
2292: ARRAY
2293: PPUSH
2294: LD_INT 106
2296: PPUSH
2297: LD_INT 33
2299: PPUSH
2300: LD_INT 6
2302: PPUSH
2303: LD_INT 0
2305: PPUSH
2306: CALL_OW 50
// SetSide ( others10 [ i ] , 4 ) ;
2310: LD_EXP 23
2314: PUSH
2315: LD_VAR 0 2
2319: ARRAY
2320: PPUSH
2321: LD_INT 4
2323: PPUSH
2324: CALL_OW 235
// end ; end ;
2328: GO 2098
2330: POP
2331: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
2332: LD_INT 22
2334: PUSH
2335: LD_INT 1
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PUSH
2342: LD_INT 21
2344: PUSH
2345: LD_INT 1
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PPUSH
2356: CALL_OW 69
2360: PPUSH
2361: LD_INT 1
2363: PPUSH
2364: CALL_OW 336
// end ;
2368: LD_VAR 0 1
2372: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
2373: LD_INT 0
2375: PPUSH
2376: PPUSH
2377: PPUSH
2378: PPUSH
2379: PPUSH
// uc_side = 1 ;
2380: LD_ADDR_OWVAR 20
2384: PUSH
2385: LD_INT 1
2387: ST_TO_ADDR
// uc_nation = 1 ;
2388: LD_ADDR_OWVAR 21
2392: PUSH
2393: LD_INT 1
2395: ST_TO_ADDR
// for i := 1 to 10 do
2396: LD_ADDR_VAR 0 2
2400: PUSH
2401: DOUBLE
2402: LD_INT 1
2404: DEC
2405: ST_TO_ADDR
2406: LD_INT 10
2408: PUSH
2409: FOR_TO
2410: IFFALSE 2592
// begin vc_engine = 1 ;
2412: LD_ADDR_OWVAR 39
2416: PUSH
2417: LD_INT 1
2419: ST_TO_ADDR
// vc_control = 1 ;
2420: LD_ADDR_OWVAR 38
2424: PUSH
2425: LD_INT 1
2427: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2428: LD_ADDR_OWVAR 40
2432: PUSH
2433: LD_INT 3
2435: PUSH
2436: LD_INT 4
2438: PUSH
2439: LD_INT 5
2441: PUSH
2442: LD_INT 12
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 4
2456: PPUSH
2457: CALL_OW 12
2461: ARRAY
2462: ST_TO_ADDR
// vc_chassis = 3 ;
2463: LD_ADDR_OWVAR 37
2467: PUSH
2468: LD_INT 3
2470: ST_TO_ADDR
// veh = CreateVehicle ;
2471: LD_ADDR_VAR 0 3
2475: PUSH
2476: CALL_OW 45
2480: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2481: LD_VAR 0 3
2485: PPUSH
2486: LD_INT 1
2488: PPUSH
2489: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2493: LD_VAR 0 3
2497: PPUSH
2498: LD_INT 2
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2508: LD_ADDR_EXP 30
2512: PUSH
2513: LD_EXP 30
2517: PUSH
2518: LD_VAR 0 3
2522: ADD
2523: ST_TO_ADDR
// if vc_weapon = 12 then
2524: LD_OWVAR 40
2528: PUSH
2529: LD_INT 12
2531: EQUAL
2532: IFFALSE 2590
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2534: LD_ADDR_VAR 0 4
2538: PUSH
2539: LD_INT 5
2541: PPUSH
2542: LD_INT 10
2544: PPUSH
2545: CALL_OW 12
2549: PUSH
2550: LD_INT 10
2552: MUL
2553: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2554: LD_VAR 0 3
2558: PPUSH
2559: LD_INT 1
2561: PUSH
2562: LD_INT 3
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 1
2571: PPUSH
2572: LD_INT 2
2574: PPUSH
2575: CALL_OW 12
2579: ARRAY
2580: PPUSH
2581: LD_VAR 0 4
2585: PPUSH
2586: CALL_OW 291
// end ; end ;
2590: GO 2409
2592: POP
2593: POP
// end ;
2594: LD_VAR 0 1
2598: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2599: LD_INT 0
2601: PPUSH
2602: PPUSH
2603: PPUSH
// uc_side = 4 ;
2604: LD_ADDR_OWVAR 20
2608: PUSH
2609: LD_INT 4
2611: ST_TO_ADDR
// uc_nation = 1 ;
2612: LD_ADDR_OWVAR 21
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// if LoadVariable ( 08_SikorskiStatus , false ) then
2620: LD_STRING 08_SikorskiStatus
2622: PPUSH
2623: LD_INT 0
2625: PPUSH
2626: CALL_OW 30
2630: IFFALSE 2651
// Truman := PrepareUnit ( Truman , false ,  ) ;
2632: LD_ADDR_EXP 21
2636: PUSH
2637: LD_STRING Truman
2639: PPUSH
2640: LD_INT 0
2642: PPUSH
2643: LD_STRING 
2645: PPUSH
2646: CALL 50293 0 3
2650: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ,  ) ;
2651: LD_ADDR_EXP 11
2655: PUSH
2656: LD_STRING Simms
2658: PPUSH
2659: LD_INT 0
2661: PPUSH
2662: LD_STRING 
2664: PPUSH
2665: CALL 50293 0 3
2669: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 08_ ) ;
2670: LD_ADDR_EXP 12
2674: PUSH
2675: LD_STRING Denis
2677: PPUSH
2678: LD_INT 1
2680: PPUSH
2681: LD_STRING 08_
2683: PPUSH
2684: CALL 50293 0 3
2688: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 08_ ) ;
2689: LD_ADDR_EXP 13
2693: PUSH
2694: LD_STRING Joan
2696: PPUSH
2697: LD_INT 1
2699: PPUSH
2700: LD_STRING 08_
2702: PPUSH
2703: CALL 50293 0 3
2707: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , true , 08_ ) ;
2708: LD_ADDR_EXP 19
2712: PUSH
2713: LD_STRING Mike
2715: PPUSH
2716: LD_INT 1
2718: PPUSH
2719: LD_STRING 08_
2721: PPUSH
2722: CALL 50293 0 3
2726: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2727: LD_STRING 08_Khatam
2729: PPUSH
2730: CALL_OW 28
2734: IFFALSE 2757
// Khatam = PrepareUnit ( Khatam , true , 08_ ) else
2736: LD_ADDR_EXP 14
2740: PUSH
2741: LD_STRING Khatam
2743: PPUSH
2744: LD_INT 1
2746: PPUSH
2747: LD_STRING 08_
2749: PPUSH
2750: CALL 50293 0 3
2754: ST_TO_ADDR
2755: GO 2785
// if TestCharacters ( 03_Khatam ) then
2757: LD_STRING 03_Khatam
2759: PPUSH
2760: CALL_OW 28
2764: IFFALSE 2785
// Khatam = PrepareUnit ( Khatam , true , 03_ ) ;
2766: LD_ADDR_EXP 14
2770: PUSH
2771: LD_STRING Khatam
2773: PPUSH
2774: LD_INT 1
2776: PPUSH
2777: LD_STRING 03_
2779: PPUSH
2780: CALL 50293 0 3
2784: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 08_ ) ;
2785: LD_ADDR_EXP 15
2789: PUSH
2790: LD_STRING Gladstone
2792: PPUSH
2793: LD_INT 1
2795: PPUSH
2796: LD_STRING 08_
2798: PPUSH
2799: CALL 50293 0 3
2803: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ,  ) ;
2804: LD_ADDR_EXP 17
2808: PUSH
2809: LD_STRING DeltaDoctor
2811: PPUSH
2812: LD_INT 1
2814: PPUSH
2815: LD_STRING 
2817: PPUSH
2818: CALL 50293 0 3
2822: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 08_ ) ;
2823: LD_ADDR_EXP 7
2827: PUSH
2828: LD_STRING Frank
2830: PPUSH
2831: LD_INT 1
2833: PPUSH
2834: LD_STRING 08_
2836: PPUSH
2837: CALL 50293 0 3
2841: ST_TO_ADDR
// if Frank then
2842: LD_EXP 7
2846: IFFALSE 2869
// Kikuchi = PrepareUnit ( Yamoko , false ,  ) else
2848: LD_ADDR_EXP 8
2852: PUSH
2853: LD_STRING Yamoko
2855: PPUSH
2856: LD_INT 0
2858: PPUSH
2859: LD_STRING 
2861: PPUSH
2862: CALL 50293 0 3
2866: ST_TO_ADDR
2867: GO 2888
// Kikuchi = PrepareUnit ( Kikuchi , true , 08_ ) ;
2869: LD_ADDR_EXP 8
2873: PUSH
2874: LD_STRING Kikuchi
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_STRING 08_
2882: PPUSH
2883: CALL 50293 0 3
2887: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
2888: LD_ADDR_EXP 24
2892: PUSH
2893: LD_STRING 09_others
2895: PPUSH
2896: CALL_OW 31
2900: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
2901: LD_ADDR_EXP 25
2905: PUSH
2906: LD_STRING 09_apes
2908: PPUSH
2909: CALL_OW 31
2913: ST_TO_ADDR
// if Truman then
2914: LD_EXP 21
2918: IFFALSE 2935
// PlaceUnitArea ( Truman , CathyTeamSpawn , false ) ;
2920: LD_EXP 21
2924: PPUSH
2925: LD_INT 1
2927: PPUSH
2928: LD_INT 0
2930: PPUSH
2931: CALL_OW 49
// PlaceUnitArea ( Mike , CathyTeamSpawn , false ) ;
2935: LD_EXP 19
2939: PPUSH
2940: LD_INT 1
2942: PPUSH
2943: LD_INT 0
2945: PPUSH
2946: CALL_OW 49
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2950: LD_EXP 11
2954: PPUSH
2955: LD_INT 1
2957: PPUSH
2958: LD_INT 0
2960: PPUSH
2961: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2965: LD_EXP 12
2969: PPUSH
2970: LD_INT 1
2972: PPUSH
2973: LD_INT 0
2975: PPUSH
2976: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2980: LD_EXP 13
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 0
2990: PPUSH
2991: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2995: LD_EXP 14
2999: PPUSH
3000: LD_INT 1
3002: PPUSH
3003: LD_INT 0
3005: PPUSH
3006: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
3010: LD_EXP 15
3014: PPUSH
3015: LD_INT 1
3017: PPUSH
3018: LD_INT 0
3020: PPUSH
3021: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
3025: LD_EXP 17
3029: PPUSH
3030: LD_INT 1
3032: PPUSH
3033: LD_INT 0
3035: PPUSH
3036: CALL_OW 49
// if Kikuchi then
3040: LD_EXP 8
3044: IFFALSE 3061
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
3046: LD_EXP 8
3050: PPUSH
3051: LD_INT 1
3053: PPUSH
3054: LD_INT 0
3056: PPUSH
3057: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
3061: LD_EXP 11
3065: PUSH
3066: LD_EXP 14
3070: PUSH
3071: LD_EXP 12
3075: PUSH
3076: LD_EXP 15
3080: PUSH
3081: LD_EXP 17
3085: PUSH
3086: LD_EXP 13
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: PPUSH
3099: LD_INT 4
3101: PPUSH
3102: CALL_OW 336
// if others09 > 2 then
3106: LD_EXP 24
3110: PUSH
3111: LD_INT 2
3113: GREATER
3114: IFFALSE 3195
// begin for i := 1 to 3 do
3116: LD_ADDR_VAR 0 2
3120: PUSH
3121: DOUBLE
3122: LD_INT 1
3124: DEC
3125: ST_TO_ADDR
3126: LD_INT 3
3128: PUSH
3129: FOR_TO
3130: IFFALSE 3191
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
3132: LD_EXP 24
3136: PUSH
3137: LD_VAR 0 2
3141: ARRAY
3142: PPUSH
3143: LD_INT 1
3145: PPUSH
3146: LD_INT 0
3148: PPUSH
3149: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
3153: LD_ADDR_EXP 24
3157: PUSH
3158: LD_EXP 24
3162: PPUSH
3163: LD_INT 1
3165: PPUSH
3166: CALL_OW 3
3170: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
3171: LD_EXP 24
3175: PUSH
3176: LD_VAR 0 2
3180: ARRAY
3181: PPUSH
3182: LD_INT 2
3184: PPUSH
3185: CALL_OW 336
// end ;
3189: GO 3129
3191: POP
3192: POP
// end else
3193: GO 3255
// begin for i in others09 do
3195: LD_ADDR_VAR 0 2
3199: PUSH
3200: LD_EXP 24
3204: PUSH
3205: FOR_IN
3206: IFFALSE 3253
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3208: LD_VAR 0 2
3212: PPUSH
3213: LD_INT 1
3215: PPUSH
3216: LD_INT 0
3218: PPUSH
3219: CALL_OW 49
// others09 = others09 diff i ;
3223: LD_ADDR_EXP 24
3227: PUSH
3228: LD_EXP 24
3232: PUSH
3233: LD_VAR 0 2
3237: DIFF
3238: ST_TO_ADDR
// SetClass ( i , 2 ) ;
3239: LD_VAR 0 2
3243: PPUSH
3244: LD_INT 2
3246: PPUSH
3247: CALL_OW 336
// end ;
3251: GO 3205
3253: POP
3254: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
3255: LD_INT 22
3257: PUSH
3258: LD_INT 4
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PUSH
3265: LD_INT 25
3267: PUSH
3268: LD_INT 2
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: PPUSH
3279: CALL_OW 69
3283: PUSH
3284: LD_INT 0
3286: EQUAL
3287: IFFALSE 3419
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3289: LD_ADDR_VAR 0 3
3293: PUSH
3294: LD_INT 22
3296: PUSH
3297: LD_INT 4
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 25
3306: PUSH
3307: LD_INT 2
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: PPUSH
3318: CALL_OW 69
3322: PUSH
3323: LD_EXP 11
3327: PUSH
3328: LD_EXP 14
3332: PUSH
3333: LD_EXP 12
3337: PUSH
3338: LD_EXP 15
3342: PUSH
3343: LD_EXP 17
3347: PUSH
3348: LD_EXP 13
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: DIFF
3361: ST_TO_ADDR
// if not tmp then
3362: LD_VAR 0 3
3366: NOT
3367: IFFALSE 3403
// begin if Denis then
3369: LD_EXP 12
3373: IFFALSE 3389
// SetClass ( Denis , 2 ) else
3375: LD_EXP 12
3379: PPUSH
3380: LD_INT 2
3382: PPUSH
3383: CALL_OW 336
3387: GO 3401
// SetClass ( DeltaDoctor , 2 ) ;
3389: LD_EXP 17
3393: PPUSH
3394: LD_INT 2
3396: PPUSH
3397: CALL_OW 336
// end else
3401: GO 3419
// begin SetClass ( tmp [ 1 ] , 2 ) ;
3403: LD_VAR 0 3
3407: PUSH
3408: LD_INT 1
3410: ARRAY
3411: PPUSH
3412: LD_INT 2
3414: PPUSH
3415: CALL_OW 336
// end ; end ; for i in ape09 do
3419: LD_ADDR_VAR 0 2
3423: PUSH
3424: LD_EXP 25
3428: PUSH
3429: FOR_IN
3430: IFFALSE 3449
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3432: LD_VAR 0 2
3436: PPUSH
3437: LD_INT 1
3439: PPUSH
3440: LD_INT 0
3442: PPUSH
3443: CALL_OW 49
3447: GO 3429
3449: POP
3450: POP
// uc_side = 4 ;
3451: LD_ADDR_OWVAR 20
3455: PUSH
3456: LD_INT 4
3458: ST_TO_ADDR
// hc_class := 1 ;
3459: LD_ADDR_OWVAR 28
3463: PUSH
3464: LD_INT 1
3466: ST_TO_ADDR
// hc_sex := sex_female ;
3467: LD_ADDR_OWVAR 27
3471: PUSH
3472: LD_INT 2
3474: ST_TO_ADDR
// hc_gallery :=  ;
3475: LD_ADDR_OWVAR 33
3479: PUSH
3480: LD_STRING 
3482: ST_TO_ADDR
// hc_name :=  ;
3483: LD_ADDR_OWVAR 26
3487: PUSH
3488: LD_STRING 
3490: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3491: LD_ADDR_OWVAR 31
3495: PUSH
3496: LD_INT 1
3498: PUSH
3499: LD_INT 7
3501: PUSH
3502: LD_INT 1
3504: PUSH
3505: LD_INT 0
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: ST_TO_ADDR
// AmScout = CreateHuman ;
3514: LD_ADDR_EXP 18
3518: PUSH
3519: CALL_OW 44
3523: ST_TO_ADDR
// end ;
3524: LD_VAR 0 1
3528: RET
// export function PrepareCornell ; begin
3529: LD_INT 0
3531: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3532: LD_INT 4
3534: PPUSH
3535: LD_INT 4
3537: PPUSH
3538: CALL_OW 343
// uc_side = 4 ;
3542: LD_ADDR_OWVAR 20
3546: PUSH
3547: LD_INT 4
3549: ST_TO_ADDR
// uc_nation = 1 ;
3550: LD_ADDR_OWVAR 21
3554: PUSH
3555: LD_INT 1
3557: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornel , true , 03_ ) ;
3558: LD_ADDR_EXP 20
3562: PUSH
3563: LD_STRING Cornel
3565: PPUSH
3566: LD_INT 1
3568: PPUSH
3569: LD_STRING 03_
3571: PPUSH
3572: CALL 50293 0 3
3576: ST_TO_ADDR
// if not Cornell then
3577: LD_EXP 20
3581: NOT
3582: IFFALSE 3586
// exit ;
3584: GO 3694
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3586: LD_EXP 20
3590: PPUSH
3591: LD_INT 8
3593: PPUSH
3594: LD_INT 0
3596: PPUSH
3597: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3601: LD_EXP 20
3605: PPUSH
3606: LD_INT 350
3608: PPUSH
3609: CALL_OW 234
// if IsInUnit ( JMM ) then
3613: LD_EXP 1
3617: PPUSH
3618: CALL_OW 310
3622: IFFALSE 3665
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3624: LD_EXP 20
3628: PPUSH
3629: LD_EXP 1
3633: PPUSH
3634: CALL_OW 310
3638: PPUSH
3639: CALL_OW 250
3643: PPUSH
3644: LD_EXP 1
3648: PPUSH
3649: CALL_OW 310
3653: PPUSH
3654: CALL_OW 251
3658: PPUSH
3659: CALL_OW 111
3663: GO 3694
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3665: LD_EXP 20
3669: PPUSH
3670: LD_EXP 1
3674: PPUSH
3675: CALL_OW 250
3679: PPUSH
3680: LD_EXP 1
3684: PPUSH
3685: CALL_OW 251
3689: PPUSH
3690: CALL_OW 111
// end ;
3694: LD_VAR 0 1
3698: RET
// every 0 0$1 trigger IsAt ( Truman , 17 , 31 ) do
3699: LD_EXP 21
3703: PPUSH
3704: LD_INT 17
3706: PPUSH
3707: LD_INT 31
3709: PPUSH
3710: CALL_OW 307
3714: IFFALSE 3728
3716: GO 3718
3718: DISABLE
// RemoveUnit ( Truman ) ;
3719: LD_EXP 21
3723: PPUSH
3724: CALL_OW 64
3728: END
// every 0 0$2 trigger joinEpsilon = 1 and IsOk ( Truman ) and not HasTask ( Truman ) do
3729: LD_EXP 31
3733: PUSH
3734: LD_INT 1
3736: EQUAL
3737: PUSH
3738: LD_EXP 21
3742: PPUSH
3743: CALL_OW 302
3747: AND
3748: PUSH
3749: LD_EXP 21
3753: PPUSH
3754: CALL_OW 314
3758: NOT
3759: AND
3760: IFFALSE 3781
3762: GO 3764
3764: DISABLE
// begin enable ;
3765: ENABLE
// ComMoveXY ( Truman , 17 , 31 ) ;
3766: LD_EXP 21
3770: PPUSH
3771: LD_INT 17
3773: PPUSH
3774: LD_INT 31
3776: PPUSH
3777: CALL_OW 111
// end ; end_of_file
3781: END
// export function PrepareRussians ; var i , un ; begin
3782: LD_INT 0
3784: PPUSH
3785: PPUSH
3786: PPUSH
// uc_side = 3 ;
3787: LD_ADDR_OWVAR 20
3791: PUSH
3792: LD_INT 3
3794: ST_TO_ADDR
// uc_nation = 3 ;
3795: LD_ADDR_OWVAR 21
3799: PUSH
3800: LD_INT 3
3802: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ,  ) ;
3803: LD_ADDR_EXP 27
3807: PUSH
3808: LD_STRING Tsaritsyn
3810: PPUSH
3811: LD_INT 0
3813: PPUSH
3814: LD_STRING 
3816: PPUSH
3817: CALL 50293 0 3
3821: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3822: LD_EXP 27
3826: PPUSH
3827: LD_INT 3
3829: PPUSH
3830: LD_INT 0
3832: PPUSH
3833: CALL_OW 49
// for i = 1 to 14 do
3837: LD_ADDR_VAR 0 2
3841: PUSH
3842: DOUBLE
3843: LD_INT 1
3845: DEC
3846: ST_TO_ADDR
3847: LD_INT 14
3849: PUSH
3850: FOR_TO
3851: IFFALSE 3937
// begin uc_side = 3 ;
3853: LD_ADDR_OWVAR 20
3857: PUSH
3858: LD_INT 3
3860: ST_TO_ADDR
// uc_nation = 3 ;
3861: LD_ADDR_OWVAR 21
3865: PUSH
3866: LD_INT 3
3868: ST_TO_ADDR
// hc_gallery =  ;
3869: LD_ADDR_OWVAR 33
3873: PUSH
3874: LD_STRING 
3876: ST_TO_ADDR
// hc_name =  ;
3877: LD_ADDR_OWVAR 26
3881: PUSH
3882: LD_STRING 
3884: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3885: LD_INT 0
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_EXP 38
3895: PPUSH
3896: LD_EXP 39
3900: PPUSH
3901: CALL_OW 12
3905: PPUSH
3906: CALL_OW 380
// un = CreateHuman ;
3910: LD_ADDR_VAR 0 3
3914: PUSH
3915: CALL_OW 44
3919: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3920: LD_VAR 0 3
3924: PPUSH
3925: LD_INT 3
3927: PPUSH
3928: LD_INT 0
3930: PPUSH
3931: CALL_OW 49
// end ;
3935: GO 3850
3937: POP
3938: POP
// for i = 1 to 6 do
3939: LD_ADDR_VAR 0 2
3943: PUSH
3944: DOUBLE
3945: LD_INT 1
3947: DEC
3948: ST_TO_ADDR
3949: LD_INT 6
3951: PUSH
3952: FOR_TO
3953: IFFALSE 4039
// begin uc_side = 3 ;
3955: LD_ADDR_OWVAR 20
3959: PUSH
3960: LD_INT 3
3962: ST_TO_ADDR
// uc_nation = 3 ;
3963: LD_ADDR_OWVAR 21
3967: PUSH
3968: LD_INT 3
3970: ST_TO_ADDR
// hc_gallery =  ;
3971: LD_ADDR_OWVAR 33
3975: PUSH
3976: LD_STRING 
3978: ST_TO_ADDR
// hc_name =  ;
3979: LD_ADDR_OWVAR 26
3983: PUSH
3984: LD_STRING 
3986: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3987: LD_INT 0
3989: PPUSH
3990: LD_INT 2
3992: PPUSH
3993: LD_EXP 38
3997: PPUSH
3998: LD_EXP 39
4002: PPUSH
4003: CALL_OW 12
4007: PPUSH
4008: CALL_OW 380
// un = CreateHuman ;
4012: LD_ADDR_VAR 0 3
4016: PUSH
4017: CALL_OW 44
4021: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4022: LD_VAR 0 3
4026: PPUSH
4027: LD_INT 3
4029: PPUSH
4030: LD_INT 0
4032: PPUSH
4033: CALL_OW 49
// end ;
4037: GO 3952
4039: POP
4040: POP
// for i = 1 to 6 do
4041: LD_ADDR_VAR 0 2
4045: PUSH
4046: DOUBLE
4047: LD_INT 1
4049: DEC
4050: ST_TO_ADDR
4051: LD_INT 6
4053: PUSH
4054: FOR_TO
4055: IFFALSE 4141
// begin uc_side = 3 ;
4057: LD_ADDR_OWVAR 20
4061: PUSH
4062: LD_INT 3
4064: ST_TO_ADDR
// uc_nation = 3 ;
4065: LD_ADDR_OWVAR 21
4069: PUSH
4070: LD_INT 3
4072: ST_TO_ADDR
// hc_gallery =  ;
4073: LD_ADDR_OWVAR 33
4077: PUSH
4078: LD_STRING 
4080: ST_TO_ADDR
// hc_name =  ;
4081: LD_ADDR_OWVAR 26
4085: PUSH
4086: LD_STRING 
4088: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4089: LD_INT 0
4091: PPUSH
4092: LD_INT 3
4094: PPUSH
4095: LD_EXP 38
4099: PPUSH
4100: LD_EXP 39
4104: PPUSH
4105: CALL_OW 12
4109: PPUSH
4110: CALL_OW 380
// un = CreateHuman ;
4114: LD_ADDR_VAR 0 3
4118: PUSH
4119: CALL_OW 44
4123: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4124: LD_VAR 0 3
4128: PPUSH
4129: LD_INT 3
4131: PPUSH
4132: LD_INT 0
4134: PPUSH
4135: CALL_OW 49
// end ;
4139: GO 4054
4141: POP
4142: POP
// for i = 1 to 4 do
4143: LD_ADDR_VAR 0 2
4147: PUSH
4148: DOUBLE
4149: LD_INT 1
4151: DEC
4152: ST_TO_ADDR
4153: LD_INT 4
4155: PUSH
4156: FOR_TO
4157: IFFALSE 4243
// begin uc_side = 3 ;
4159: LD_ADDR_OWVAR 20
4163: PUSH
4164: LD_INT 3
4166: ST_TO_ADDR
// uc_nation = 3 ;
4167: LD_ADDR_OWVAR 21
4171: PUSH
4172: LD_INT 3
4174: ST_TO_ADDR
// hc_gallery =  ;
4175: LD_ADDR_OWVAR 33
4179: PUSH
4180: LD_STRING 
4182: ST_TO_ADDR
// hc_name =  ;
4183: LD_ADDR_OWVAR 26
4187: PUSH
4188: LD_STRING 
4190: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4191: LD_INT 0
4193: PPUSH
4194: LD_INT 4
4196: PPUSH
4197: LD_EXP 38
4201: PPUSH
4202: LD_EXP 39
4206: PPUSH
4207: CALL_OW 12
4211: PPUSH
4212: CALL_OW 380
// un = CreateHuman ;
4216: LD_ADDR_VAR 0 3
4220: PUSH
4221: CALL_OW 44
4225: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4226: LD_VAR 0 3
4230: PPUSH
4231: LD_INT 3
4233: PPUSH
4234: LD_INT 0
4236: PPUSH
4237: CALL_OW 49
// end ;
4241: GO 4156
4243: POP
4244: POP
// end ; end_of_file
4245: LD_VAR 0 1
4249: RET
// export function PrepareArabianCommander ; begin
4250: LD_INT 0
4252: PPUSH
// uc_side = 2 ;
4253: LD_ADDR_OWVAR 20
4257: PUSH
4258: LD_INT 2
4260: ST_TO_ADDR
// uc_nation = 2 ;
4261: LD_ADDR_OWVAR 21
4265: PUSH
4266: LD_INT 2
4268: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
4269: LD_ADDR_EXP 28
4273: PUSH
4274: LD_STRING Dietrich
4276: PPUSH
4277: CALL_OW 25
4281: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
4282: LD_EXP 28
4286: PPUSH
4287: LD_INT 4
4289: PPUSH
4290: LD_INT 0
4292: PPUSH
4293: CALL_OW 49
// end ;
4297: LD_VAR 0 1
4301: RET
// export function PrepareArabian ; var i , un , veh ; begin
4302: LD_INT 0
4304: PPUSH
4305: PPUSH
4306: PPUSH
4307: PPUSH
// uc_side := 2 ;
4308: LD_ADDR_OWVAR 20
4312: PUSH
4313: LD_INT 2
4315: ST_TO_ADDR
// uc_nation := 2 ;
4316: LD_ADDR_OWVAR 21
4320: PUSH
4321: LD_INT 2
4323: ST_TO_ADDR
// if not Ahmed then
4324: LD_EXP 29
4328: NOT
4329: IFFALSE 4397
// begin InitHc ;
4331: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
4335: LD_INT 1
4337: PPUSH
4338: LD_INT 1
4340: PPUSH
4341: LD_EXP 38
4345: PPUSH
4346: LD_EXP 39
4350: PUSH
4351: LD_INT 1
4353: PLUS
4354: PPUSH
4355: CALL_OW 12
4359: PPUSH
4360: CALL_OW 380
// hc_name := Ahmed Abbasid ;
4364: LD_ADDR_OWVAR 26
4368: PUSH
4369: LD_STRING Ahmed Abbasid
4371: ST_TO_ADDR
// Ahmed := CreateHuman ;
4372: LD_ADDR_EXP 29
4376: PUSH
4377: CALL_OW 44
4381: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
4382: LD_EXP 29
4386: PPUSH
4387: LD_INT 4
4389: PPUSH
4390: LD_INT 0
4392: PPUSH
4393: CALL_OW 49
// end ; for i = 1 to 4 do
4397: LD_ADDR_VAR 0 2
4401: PUSH
4402: DOUBLE
4403: LD_INT 1
4405: DEC
4406: ST_TO_ADDR
4407: LD_INT 4
4409: PUSH
4410: FOR_TO
4411: IFFALSE 4497
// begin uc_side = 2 ;
4413: LD_ADDR_OWVAR 20
4417: PUSH
4418: LD_INT 2
4420: ST_TO_ADDR
// uc_nation = 2 ;
4421: LD_ADDR_OWVAR 21
4425: PUSH
4426: LD_INT 2
4428: ST_TO_ADDR
// hc_gallery =  ;
4429: LD_ADDR_OWVAR 33
4433: PUSH
4434: LD_STRING 
4436: ST_TO_ADDR
// hc_name =  ;
4437: LD_ADDR_OWVAR 26
4441: PUSH
4442: LD_STRING 
4444: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4445: LD_INT 0
4447: PPUSH
4448: LD_INT 2
4450: PPUSH
4451: LD_EXP 38
4455: PPUSH
4456: LD_EXP 39
4460: PPUSH
4461: CALL_OW 12
4465: PPUSH
4466: CALL_OW 380
// un = CreateHuman ;
4470: LD_ADDR_VAR 0 3
4474: PUSH
4475: CALL_OW 44
4479: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4480: LD_VAR 0 3
4484: PPUSH
4485: LD_INT 4
4487: PPUSH
4488: LD_INT 0
4490: PPUSH
4491: CALL_OW 49
// end ;
4495: GO 4410
4497: POP
4498: POP
// for i = 1 to 5 do
4499: LD_ADDR_VAR 0 2
4503: PUSH
4504: DOUBLE
4505: LD_INT 1
4507: DEC
4508: ST_TO_ADDR
4509: LD_INT 5
4511: PUSH
4512: FOR_TO
4513: IFFALSE 4599
// begin uc_side = 2 ;
4515: LD_ADDR_OWVAR 20
4519: PUSH
4520: LD_INT 2
4522: ST_TO_ADDR
// uc_nation = 2 ;
4523: LD_ADDR_OWVAR 21
4527: PUSH
4528: LD_INT 2
4530: ST_TO_ADDR
// hc_gallery =  ;
4531: LD_ADDR_OWVAR 33
4535: PUSH
4536: LD_STRING 
4538: ST_TO_ADDR
// hc_name =  ;
4539: LD_ADDR_OWVAR 26
4543: PUSH
4544: LD_STRING 
4546: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4547: LD_INT 0
4549: PPUSH
4550: LD_INT 1
4552: PPUSH
4553: LD_EXP 38
4557: PPUSH
4558: LD_EXP 39
4562: PPUSH
4563: CALL_OW 12
4567: PPUSH
4568: CALL_OW 380
// un = CreateHuman ;
4572: LD_ADDR_VAR 0 3
4576: PUSH
4577: CALL_OW 44
4581: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4582: LD_VAR 0 3
4586: PPUSH
4587: LD_INT 4
4589: PPUSH
4590: LD_INT 0
4592: PPUSH
4593: CALL_OW 49
// end ;
4597: GO 4512
4599: POP
4600: POP
// for i = 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
4601: LD_ADDR_VAR 0 2
4605: PUSH
4606: DOUBLE
4607: LD_INT 1
4609: DEC
4610: ST_TO_ADDR
4611: LD_INT 3
4613: PUSH
4614: LD_INT 4
4616: PUSH
4617: LD_INT 4
4619: PUSH
4620: LD_INT 4
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: PUSH
4629: LD_OWVAR 67
4633: ARRAY
4634: PUSH
4635: FOR_TO
4636: IFFALSE 4722
// begin uc_side = 2 ;
4638: LD_ADDR_OWVAR 20
4642: PUSH
4643: LD_INT 2
4645: ST_TO_ADDR
// uc_nation = 2 ;
4646: LD_ADDR_OWVAR 21
4650: PUSH
4651: LD_INT 2
4653: ST_TO_ADDR
// hc_gallery =  ;
4654: LD_ADDR_OWVAR 33
4658: PUSH
4659: LD_STRING 
4661: ST_TO_ADDR
// hc_name =  ;
4662: LD_ADDR_OWVAR 26
4666: PUSH
4667: LD_STRING 
4669: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4670: LD_INT 0
4672: PPUSH
4673: LD_INT 4
4675: PPUSH
4676: LD_EXP 38
4680: PPUSH
4681: LD_EXP 39
4685: PPUSH
4686: CALL_OW 12
4690: PPUSH
4691: CALL_OW 380
// un = CreateHuman ;
4695: LD_ADDR_VAR 0 3
4699: PUSH
4700: CALL_OW 44
4704: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4705: LD_VAR 0 3
4709: PPUSH
4710: LD_INT 4
4712: PPUSH
4713: LD_INT 0
4715: PPUSH
4716: CALL_OW 49
// end ;
4720: GO 4635
4722: POP
4723: POP
// for i = 1 to 2 do
4724: LD_ADDR_VAR 0 2
4728: PUSH
4729: DOUBLE
4730: LD_INT 1
4732: DEC
4733: ST_TO_ADDR
4734: LD_INT 2
4736: PUSH
4737: FOR_TO
4738: IFFALSE 4868
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4740: LD_ADDR_VAR 0 4
4744: PUSH
4745: LD_INT 22
4747: PUSH
4748: LD_INT 2
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PUSH
4755: LD_INT 21
4757: PUSH
4758: LD_INT 2
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: PUSH
4765: LD_INT 58
4767: PUSH
4768: EMPTY
4769: LIST
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: LIST
4775: PPUSH
4776: CALL_OW 69
4780: ST_TO_ADDR
// uc_side = 2 ;
4781: LD_ADDR_OWVAR 20
4785: PUSH
4786: LD_INT 2
4788: ST_TO_ADDR
// uc_nation = 2 ;
4789: LD_ADDR_OWVAR 21
4793: PUSH
4794: LD_INT 2
4796: ST_TO_ADDR
// hc_gallery =  ;
4797: LD_ADDR_OWVAR 33
4801: PUSH
4802: LD_STRING 
4804: ST_TO_ADDR
// hc_name =  ;
4805: LD_ADDR_OWVAR 26
4809: PUSH
4810: LD_STRING 
4812: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4813: LD_INT 0
4815: PPUSH
4816: LD_INT 3
4818: PPUSH
4819: LD_EXP 38
4823: PPUSH
4824: LD_EXP 39
4828: PPUSH
4829: CALL_OW 12
4833: PPUSH
4834: CALL_OW 380
// un = CreateHuman ;
4838: LD_ADDR_VAR 0 3
4842: PUSH
4843: CALL_OW 44
4847: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4848: LD_VAR 0 3
4852: PPUSH
4853: LD_VAR 0 4
4857: PUSH
4858: LD_INT 1
4860: ARRAY
4861: PPUSH
4862: CALL_OW 52
// end ;
4866: GO 4737
4868: POP
4869: POP
// end ;
4870: LD_VAR 0 1
4874: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
4875: LD_INT 0
4877: PPUSH
4878: PPUSH
4879: PPUSH
4880: PPUSH
4881: PPUSH
4882: PPUSH
// for i := 1 to 2 do
4883: LD_ADDR_VAR 0 2
4887: PUSH
4888: DOUBLE
4889: LD_INT 1
4891: DEC
4892: ST_TO_ADDR
4893: LD_INT 2
4895: PUSH
4896: FOR_TO
4897: IFFALSE 5023
// begin uc_side = 5 ;
4899: LD_ADDR_OWVAR 20
4903: PUSH
4904: LD_INT 5
4906: ST_TO_ADDR
// uc_nation = 2 ;
4907: LD_ADDR_OWVAR 21
4911: PUSH
4912: LD_INT 2
4914: ST_TO_ADDR
// vc_chassis := 31 ;
4915: LD_ADDR_OWVAR 37
4919: PUSH
4920: LD_INT 31
4922: ST_TO_ADDR
// vc_control := control_rider ;
4923: LD_ADDR_OWVAR 38
4927: PUSH
4928: LD_INT 4
4930: ST_TO_ADDR
// animal := CreateVehicle ;
4931: LD_ADDR_VAR 0 3
4935: PUSH
4936: CALL_OW 45
4940: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
4941: LD_VAR 0 3
4945: PPUSH
4946: LD_INT 7
4948: PPUSH
4949: LD_INT 0
4951: PPUSH
4952: CALL_OW 49
// hc_gallery =  ;
4956: LD_ADDR_OWVAR 33
4960: PUSH
4961: LD_STRING 
4963: ST_TO_ADDR
// hc_name =  ;
4964: LD_ADDR_OWVAR 26
4968: PUSH
4969: LD_STRING 
4971: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4972: LD_INT 0
4974: PPUSH
4975: LD_INT 11
4977: PPUSH
4978: LD_EXP 38
4982: PPUSH
4983: LD_EXP 39
4987: PPUSH
4988: CALL_OW 12
4992: PPUSH
4993: CALL_OW 380
// un = CreateHuman ;
4997: LD_ADDR_VAR 0 4
5001: PUSH
5002: CALL_OW 44
5006: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
5007: LD_VAR 0 4
5011: PPUSH
5012: LD_VAR 0 3
5016: PPUSH
5017: CALL_OW 52
// end ;
5021: GO 4896
5023: POP
5024: POP
// repeat wait ( 0 0$1 ) ;
5025: LD_INT 35
5027: PPUSH
5028: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
5032: LD_ADDR_VAR 0 5
5036: PUSH
5037: LD_INT 22
5039: PUSH
5040: LD_INT 1
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: PPUSH
5047: CALL_OW 69
5051: PPUSH
5052: LD_VAR 0 2
5056: PPUSH
5057: CALL_OW 74
5061: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5062: LD_ADDR_VAR 0 6
5066: PUSH
5067: LD_INT 22
5069: PUSH
5070: LD_INT 1
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PUSH
5077: LD_INT 2
5079: PUSH
5080: LD_INT 59
5082: PUSH
5083: EMPTY
5084: LIST
5085: PUSH
5086: LD_INT 21
5088: PUSH
5089: LD_INT 1
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 21
5098: PUSH
5099: LD_INT 2
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: PPUSH
5119: CALL_OW 69
5123: PPUSH
5124: LD_VAR 0 2
5128: PPUSH
5129: CALL_OW 74
5133: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
5134: LD_ADDR_VAR 0 2
5138: PUSH
5139: LD_INT 22
5141: PUSH
5142: LD_INT 5
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PUSH
5149: LD_INT 25
5151: PUSH
5152: LD_INT 11
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: PPUSH
5163: CALL_OW 69
5167: PUSH
5168: FOR_IN
5169: IFFALSE 5239
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5171: LD_VAR 0 2
5175: PPUSH
5176: LD_VAR 0 5
5180: PPUSH
5181: CALL_OW 296
5185: PUSH
5186: LD_INT 8
5188: PLUS
5189: PUSH
5190: LD_VAR 0 2
5194: PPUSH
5195: LD_VAR 0 6
5199: PPUSH
5200: CALL_OW 296
5204: LESS
5205: IFFALSE 5223
// ComAttackUnit ( i , target1 ) else
5207: LD_VAR 0 2
5211: PPUSH
5212: LD_VAR 0 5
5216: PPUSH
5217: CALL_OW 115
5221: GO 5237
// ComAttackUnit ( i , target2 ) ;
5223: LD_VAR 0 2
5227: PPUSH
5228: LD_VAR 0 6
5232: PPUSH
5233: CALL_OW 115
// end ;
5237: GO 5168
5239: POP
5240: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 ;
5241: LD_INT 22
5243: PUSH
5244: LD_INT 5
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 25
5253: PUSH
5254: LD_INT 11
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 69
5269: PUSH
5270: LD_INT 0
5272: EQUAL
5273: IFFALSE 5025
// end ; end_of_file
5275: LD_VAR 0 1
5279: RET
// every 0 0$1 do
5280: GO 5282
5282: DISABLE
// begin RevealFogArea ( 1 , EpsilonTerrain ) ;
5283: LD_INT 1
5285: PPUSH
5286: LD_INT 19
5288: PPUSH
5289: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
5293: LD_EXP 11
5297: PPUSH
5298: CALL_OW 87
// wait ( 0 0$3 ) ;
5302: LD_INT 105
5304: PPUSH
5305: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
5309: LD_EXP 1
5313: PPUSH
5314: CALL_OW 310
5318: PPUSH
5319: CALL_OW 85
// Wait ( 0 0$1 ) ;
5323: LD_INT 35
5325: PPUSH
5326: CALL_OW 67
// if IsOk ( Gary ) then
5330: LD_EXP 10
5334: PPUSH
5335: CALL_OW 302
5339: IFFALSE 5377
// begin Say ( Gary , D2-Gary-1 ) ;
5341: LD_EXP 10
5345: PPUSH
5346: LD_STRING D2-Gary-1
5348: PPUSH
5349: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
5353: LD_EXP 1
5357: PPUSH
5358: LD_STRING D2-JMM-1
5360: PPUSH
5361: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
5365: LD_EXP 10
5369: PPUSH
5370: LD_STRING D2-Gary-2
5372: PPUSH
5373: CALL_OW 88
// end ; Video ( false ) ;
5377: LD_INT 0
5379: PPUSH
5380: CALL 87733 0 1
// ChangeMissionObjectives ( M1 ) ;
5384: LD_STRING M1
5386: PPUSH
5387: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
5391: LD_INT 38
5393: PPUSH
5394: LD_INT 1
5396: PPUSH
5397: LD_INT 100
5399: PPUSH
5400: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
5404: LD_INT 47
5406: PPUSH
5407: LD_INT 1
5409: PPUSH
5410: LD_INT 50
5412: PPUSH
5413: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5417: LD_INT 47
5419: PPUSH
5420: LD_INT 3
5422: PPUSH
5423: LD_INT 50
5425: PPUSH
5426: CALL_OW 291
// SaveForQuickRestart ;
5430: CALL_OW 22
// end ;
5434: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var p ;
5435: LD_EXP 1
5439: PPUSH
5440: LD_EXP 11
5444: PPUSH
5445: CALL_OW 296
5449: PUSH
5450: LD_INT 15
5452: LESS
5453: IFFALSE 6281
5455: GO 5457
5457: DISABLE
5458: LD_INT 0
5460: PPUSH
// begin wait ( 0 0$3 ) ;
5461: LD_INT 105
5463: PPUSH
5464: CALL_OW 67
// Video ( true ) ;
5468: LD_INT 1
5470: PPUSH
5471: CALL 87733 0 1
// ComExitVehicle ( JMM ) ;
5475: LD_EXP 1
5479: PPUSH
5480: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5484: LD_EXP 1
5488: PPUSH
5489: CALL_OW 87
// if Truman then
5493: LD_EXP 21
5497: IFFALSE 5634
// begin ComMoveUnit ( Truman , JMM ) ;
5499: LD_EXP 21
5503: PPUSH
5504: LD_EXP 1
5508: PPUSH
5509: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5513: LD_INT 35
5515: PPUSH
5516: CALL_OW 67
// until GetDistUnits ( Truman , JMM ) < 6 ;
5520: LD_EXP 21
5524: PPUSH
5525: LD_EXP 1
5529: PPUSH
5530: CALL_OW 296
5534: PUSH
5535: LD_INT 6
5537: LESS
5538: IFFALSE 5513
// ComTurnUnit ( Truman , JMM ) ;
5540: LD_EXP 21
5544: PPUSH
5545: LD_EXP 1
5549: PPUSH
5550: CALL_OW 119
// ComTurnUnit ( JMM , Truman ) ;
5554: LD_EXP 1
5558: PPUSH
5559: LD_EXP 21
5563: PPUSH
5564: CALL_OW 119
// Say ( Truman , D2-Tru-1 ) ;
5568: LD_EXP 21
5572: PPUSH
5573: LD_STRING D2-Tru-1
5575: PPUSH
5576: CALL_OW 88
// Say ( JMM , D2-JMM-Tru-1 ) ;
5580: LD_EXP 1
5584: PPUSH
5585: LD_STRING D2-JMM-Tru-1
5587: PPUSH
5588: CALL_OW 88
// Say ( Truman , D2-Tru-2 ) ;
5592: LD_EXP 21
5596: PPUSH
5597: LD_STRING D2-Tru-2
5599: PPUSH
5600: CALL_OW 88
// ComMoveXY ( Truman , 79 , 41 ) ;
5604: LD_EXP 21
5608: PPUSH
5609: LD_INT 79
5611: PPUSH
5612: LD_INT 41
5614: PPUSH
5615: CALL_OW 111
// AddComMoveXY ( Truman , 17 , 31 ) ;
5619: LD_EXP 21
5623: PPUSH
5624: LD_INT 17
5626: PPUSH
5627: LD_INT 31
5629: PPUSH
5630: CALL_OW 171
// end ; AddComTurnUnit ( JMM , Simms ) ;
5634: LD_EXP 1
5638: PPUSH
5639: LD_EXP 11
5643: PPUSH
5644: CALL_OW 179
// p := 15 ;
5648: LD_ADDR_VAR 0 1
5652: PUSH
5653: LD_INT 15
5655: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5656: LD_INT 35
5658: PPUSH
5659: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5663: LD_EXP 11
5667: PUSH
5668: LD_EXP 13
5672: PUSH
5673: LD_EXP 12
5677: PUSH
5678: LD_EXP 14
5682: PUSH
5683: LD_EXP 8
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: PPUSH
5695: LD_EXP 1
5699: PPUSH
5700: CALL_OW 112
// p := p - 1 ;
5704: LD_ADDR_VAR 0 1
5708: PUSH
5709: LD_VAR 0 1
5713: PUSH
5714: LD_INT 1
5716: MINUS
5717: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
5718: LD_EXP 1
5722: PPUSH
5723: LD_EXP 11
5727: PPUSH
5728: CALL_OW 296
5732: PUSH
5733: LD_INT 5
5735: LESS
5736: PUSH
5737: LD_VAR 0 1
5741: PUSH
5742: LD_INT 0
5744: LESSEQUAL
5745: OR
5746: IFFALSE 5656
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5748: LD_EXP 11
5752: PUSH
5753: LD_EXP 13
5757: PUSH
5758: LD_EXP 12
5762: PUSH
5763: LD_EXP 14
5767: PUSH
5768: LD_EXP 8
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: LIST
5777: LIST
5778: LIST
5779: PPUSH
5780: LD_EXP 1
5784: PPUSH
5785: CALL_OW 119
// if not IsInUnit ( JMM ) then
5789: LD_EXP 1
5793: PPUSH
5794: CALL_OW 310
5798: NOT
5799: IFFALSE 5815
// ComTurnUnit ( JMM , Simms ) ;
5801: LD_EXP 1
5805: PPUSH
5806: LD_EXP 11
5810: PPUSH
5811: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5815: LD_EXP 11
5819: PUSH
5820: LD_EXP 13
5824: PUSH
5825: LD_EXP 12
5829: PUSH
5830: LD_EXP 14
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: LIST
5839: LIST
5840: PPUSH
5841: LD_EXP 1
5845: PPUSH
5846: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5850: LD_EXP 1
5854: PUSH
5855: LD_EXP 11
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PPUSH
5864: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5868: LD_EXP 11
5872: PPUSH
5873: LD_STRING D2a-Sim-1
5875: PPUSH
5876: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5880: LD_EXP 1
5884: PPUSH
5885: LD_STRING D2a-JMM-1
5887: PPUSH
5888: CALL_OW 88
// if IsOk ( Joan ) then
5892: LD_EXP 13
5896: PPUSH
5897: CALL_OW 302
5901: IFFALSE 5979
// begin if not IsInUnit ( JMM ) then
5903: LD_EXP 1
5907: PPUSH
5908: CALL_OW 310
5912: NOT
5913: IFFALSE 5929
// ComTurnUnit ( JMM , Joan ) ;
5915: LD_EXP 1
5919: PPUSH
5920: LD_EXP 13
5924: PPUSH
5925: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
5929: LD_EXP 13
5933: PPUSH
5934: LD_EXP 1
5938: PPUSH
5939: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5943: LD_EXP 13
5947: PPUSH
5948: LD_STRING D2b-Joan-1
5950: PPUSH
5951: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5955: LD_EXP 1
5959: PPUSH
5960: LD_STRING D2b-JMM-1
5962: PPUSH
5963: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5967: LD_EXP 13
5971: PPUSH
5972: LD_STRING D2b-Joan-2
5974: PPUSH
5975: CALL_OW 88
// end ; if IsOk ( Denis ) then
5979: LD_EXP 12
5983: PPUSH
5984: CALL_OW 302
5988: IFFALSE 6042
// begin if not IsInUnit ( JMM ) then
5990: LD_EXP 1
5994: PPUSH
5995: CALL_OW 310
5999: NOT
6000: IFFALSE 6016
// ComTurnUnit ( JMM , Denis ) ;
6002: LD_EXP 1
6006: PPUSH
6007: LD_EXP 12
6011: PPUSH
6012: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
6016: LD_EXP 12
6020: PPUSH
6021: LD_EXP 1
6025: PPUSH
6026: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
6030: LD_EXP 12
6034: PPUSH
6035: LD_STRING D2c-Den-1
6037: PPUSH
6038: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
6042: LD_EXP 8
6046: PPUSH
6047: CALL_OW 302
6051: PUSH
6052: LD_STRING 08_Kikuchi
6054: PPUSH
6055: CALL_OW 28
6059: NOT
6060: AND
6061: IFFALSE 6156
// begin repeat wait ( 0 0$1 ) ;
6063: LD_INT 35
6065: PPUSH
6066: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
6070: LD_EXP 8
6074: PPUSH
6075: LD_EXP 1
6079: PPUSH
6080: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
6084: LD_EXP 1
6088: PPUSH
6089: LD_EXP 8
6093: PPUSH
6094: CALL_OW 296
6098: PUSH
6099: LD_INT 5
6101: LESS
6102: IFFALSE 6063
// ComTurnUnit ( Kikuchi , JMM ) ;
6104: LD_EXP 8
6108: PPUSH
6109: LD_EXP 1
6113: PPUSH
6114: CALL_OW 119
// if not IsInUnit ( JMM ) then
6118: LD_EXP 1
6122: PPUSH
6123: CALL_OW 310
6127: NOT
6128: IFFALSE 6144
// ComTurnUnit ( JMM , Kikuchi ) ;
6130: LD_EXP 1
6134: PPUSH
6135: LD_EXP 8
6139: PPUSH
6140: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
6144: LD_EXP 8
6148: PPUSH
6149: LD_STRING D3b-Yam-1
6151: PPUSH
6152: CALL_OW 88
// end ; if IsOk ( Khatam ) then
6156: LD_EXP 14
6160: PPUSH
6161: CALL_OW 302
6165: IFFALSE 6231
// begin if not IsInUnit ( JMM ) then
6167: LD_EXP 1
6171: PPUSH
6172: CALL_OW 310
6176: NOT
6177: IFFALSE 6193
// ComTurnUnit ( JMM , Khatam ) ;
6179: LD_EXP 1
6183: PPUSH
6184: LD_EXP 14
6188: PPUSH
6189: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
6193: LD_EXP 14
6197: PPUSH
6198: LD_EXP 1
6202: PPUSH
6203: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
6207: LD_EXP 1
6211: PPUSH
6212: LD_STRING D2c-JMM-1
6214: PPUSH
6215: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
6219: LD_EXP 14
6223: PPUSH
6224: LD_STRING D2c-Khat-1
6226: PPUSH
6227: CALL_OW 88
// end ; Video ( false ) ;
6231: LD_INT 0
6233: PPUSH
6234: CALL 87733 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff Truman , 1 ) ;
6238: LD_INT 22
6240: PUSH
6241: LD_INT 4
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PPUSH
6248: CALL_OW 69
6252: PUSH
6253: LD_EXP 21
6257: DIFF
6258: PPUSH
6259: LD_INT 1
6261: PPUSH
6262: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
6266: LD_STRING M1a
6268: PPUSH
6269: CALL_OW 337
// joinEpsilon := 1 ;
6273: LD_ADDR_EXP 31
6277: PUSH
6278: LD_INT 1
6280: ST_TO_ADDR
// end ;
6281: PPOPN 1
6283: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do var p ;
6284: LD_INT 38
6286: PPUSH
6287: LD_INT 1
6289: PPUSH
6290: CALL_OW 289
6294: PUSH
6295: LD_INT 0
6297: EQUAL
6298: PUSH
6299: LD_INT 47
6301: PPUSH
6302: LD_INT 1
6304: PPUSH
6305: CALL_OW 289
6309: PUSH
6310: LD_INT 0
6312: EQUAL
6313: AND
6314: PUSH
6315: LD_INT 47
6317: PPUSH
6318: LD_INT 2
6320: PPUSH
6321: CALL_OW 289
6325: PUSH
6326: LD_INT 0
6328: EQUAL
6329: AND
6330: IFFALSE 6455
6332: GO 6334
6334: DISABLE
6335: LD_INT 0
6337: PPUSH
// begin p := 0 ;
6338: LD_ADDR_VAR 0 1
6342: PUSH
6343: LD_INT 0
6345: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6346: LD_INT 38
6348: PUSH
6349: LD_INT 47
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PPUSH
6356: LD_INT 56
6358: PPUSH
6359: LD_INT 0
6361: PPUSH
6362: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6366: LD_INT 35
6368: PPUSH
6369: CALL_OW 67
// p := p + 1 ;
6373: LD_ADDR_VAR 0 1
6377: PUSH
6378: LD_VAR 0 1
6382: PUSH
6383: LD_INT 1
6385: PLUS
6386: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6387: LD_INT 38
6389: PUSH
6390: LD_INT 47
6392: PUSH
6393: EMPTY
6394: LIST
6395: LIST
6396: PPUSH
6397: LD_INT 56
6399: PPUSH
6400: LD_INT 0
6402: PPUSH
6403: CALL_OW 111
// if IsInArea ( cargo1 , RemArea ) then
6407: LD_INT 38
6409: PPUSH
6410: LD_INT 27
6412: PPUSH
6413: CALL_OW 308
6417: IFFALSE 6426
// RemoveUnit ( cargo1 ) ;
6419: LD_INT 38
6421: PPUSH
6422: CALL_OW 64
// if IsInArea ( cargo2 , RemArea ) then
6426: LD_INT 47
6428: PPUSH
6429: LD_INT 27
6431: PPUSH
6432: CALL_OW 308
6436: IFFALSE 6445
// RemoveUnit ( cargo2 ) ;
6438: LD_INT 47
6440: PPUSH
6441: CALL_OW 64
// until p > 30 ;
6445: LD_VAR 0 1
6449: PUSH
6450: LD_INT 30
6452: GREATER
6453: IFFALSE 6366
// end ;
6455: PPOPN 1
6457: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
6458: LD_EXP 67
6462: PUSH
6463: LD_INT 1
6465: EQUAL
6466: IFFALSE 7640
6468: GO 6470
6470: DISABLE
6471: LD_INT 0
6473: PPUSH
6474: PPUSH
6475: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6476: LD_ADDR_VAR 0 1
6480: PUSH
6481: LD_INT 22
6483: PUSH
6484: LD_INT 1
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PUSH
6491: LD_INT 25
6493: PUSH
6494: LD_INT 4
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: PUSH
6501: LD_INT 26
6503: PUSH
6504: LD_INT 1
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: LIST
6515: PPUSH
6516: CALL_OW 69
6520: PUSH
6521: LD_EXP 1
6525: PUSH
6526: LD_EXP 2
6530: PUSH
6531: LD_EXP 3
6535: PUSH
6536: LD_EXP 4
6540: PUSH
6541: LD_EXP 5
6545: PUSH
6546: LD_EXP 6
6550: PUSH
6551: LD_EXP 7
6555: PUSH
6556: LD_EXP 8
6560: PUSH
6561: LD_EXP 9
6565: PUSH
6566: LD_EXP 10
6570: PUSH
6571: LD_EXP 11
6575: PUSH
6576: LD_EXP 12
6580: PUSH
6581: LD_EXP 13
6585: PUSH
6586: LD_EXP 14
6590: PUSH
6591: LD_EXP 15
6595: PUSH
6596: LD_EXP 16
6600: PUSH
6601: LD_EXP 17
6605: PUSH
6606: LD_EXP 18
6610: PUSH
6611: LD_EXP 20
6615: PUSH
6616: LD_EXP 26
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: DIFF
6643: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6644: LD_ADDR_VAR 0 2
6648: PUSH
6649: LD_INT 22
6651: PUSH
6652: LD_INT 1
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: LD_INT 26
6661: PUSH
6662: LD_INT 1
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: PUSH
6669: LD_INT 2
6671: PUSH
6672: LD_INT 25
6674: PUSH
6675: LD_INT 1
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: PUSH
6682: LD_INT 25
6684: PUSH
6685: LD_INT 2
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: PUSH
6692: LD_INT 25
6694: PUSH
6695: LD_INT 3
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: LIST
6712: PPUSH
6713: CALL_OW 69
6717: PUSH
6718: LD_EXP 1
6722: PUSH
6723: LD_EXP 2
6727: PUSH
6728: LD_EXP 3
6732: PUSH
6733: LD_EXP 4
6737: PUSH
6738: LD_EXP 5
6742: PUSH
6743: LD_EXP 6
6747: PUSH
6748: LD_EXP 7
6752: PUSH
6753: LD_EXP 8
6757: PUSH
6758: LD_EXP 9
6762: PUSH
6763: LD_EXP 10
6767: PUSH
6768: LD_EXP 11
6772: PUSH
6773: LD_EXP 12
6777: PUSH
6778: LD_EXP 13
6782: PUSH
6783: LD_EXP 14
6787: PUSH
6788: LD_EXP 15
6792: PUSH
6793: LD_EXP 16
6797: PUSH
6798: LD_EXP 17
6802: PUSH
6803: LD_EXP 18
6807: PUSH
6808: LD_EXP 20
6812: PUSH
6813: LD_EXP 26
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: DIFF
6840: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
6841: LD_EXP 10
6845: PUSH
6846: LD_VAR 0 2
6850: OR
6851: PUSH
6852: LD_EXP 17
6856: PUSH
6857: LD_VAR 0 1
6861: OR
6862: AND
6863: IFFALSE 7082
// begin DialogueOn ;
6865: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
6869: LD_EXP 17
6873: PPUSH
6874: CALL_OW 302
6878: IFFALSE 6894
// Say ( DeltaDoctor , D3-Sci1-1 ) else
6880: LD_EXP 17
6884: PPUSH
6885: LD_STRING D3-Sci1-1
6887: PPUSH
6888: CALL_OW 88
6892: GO 6906
// Say ( tmp1 , D3-Sci1-1 ) ;
6894: LD_VAR 0 1
6898: PPUSH
6899: LD_STRING D3-Sci1-1
6901: PPUSH
6902: CALL_OW 88
// if IsOk ( Gary ) then
6906: LD_EXP 10
6910: PPUSH
6911: CALL_OW 302
6915: IFFALSE 6931
// Say ( Gary , D3-Gary-1 ) else
6917: LD_EXP 10
6921: PPUSH
6922: LD_STRING D3-Gary-1
6924: PPUSH
6925: CALL_OW 88
6929: GO 6943
// Say ( tmp2 , D3-Gary-1 ) ;
6931: LD_VAR 0 2
6935: PPUSH
6936: LD_STRING D3-Gary-1
6938: PPUSH
6939: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6943: LD_EXP 17
6947: PPUSH
6948: CALL_OW 302
6952: IFFALSE 6968
// Say ( DeltaDoctor , D3-Sci1-2 ) else
6954: LD_EXP 17
6958: PPUSH
6959: LD_STRING D3-Sci1-2
6961: PPUSH
6962: CALL_OW 88
6966: GO 6980
// Say ( tmp1 , D3-Sci1-2 ) ;
6968: LD_VAR 0 1
6972: PPUSH
6973: LD_STRING D3-Sci1-2
6975: PPUSH
6976: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6980: LD_EXP 1
6984: PPUSH
6985: LD_STRING D3-JMM-2
6987: PPUSH
6988: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6992: LD_EXP 17
6996: PPUSH
6997: CALL_OW 302
7001: IFFALSE 7017
// Say ( DeltaDoctor , D3-Sci1-3 ) else
7003: LD_EXP 17
7007: PPUSH
7008: LD_STRING D3-Sci1-3
7010: PPUSH
7011: CALL_OW 88
7015: GO 7029
// Say ( tmp1 , D3-Sci1-3 ) ;
7017: LD_VAR 0 1
7021: PPUSH
7022: LD_STRING D3-Sci1-3
7024: PPUSH
7025: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7029: LD_EXP 1
7033: PPUSH
7034: LD_STRING D3-JMM-3
7036: PPUSH
7037: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
7041: LD_EXP 17
7045: PPUSH
7046: CALL_OW 302
7050: IFFALSE 7066
// Say ( DeltaDoctor , D3-Sci1-4 ) else
7052: LD_EXP 17
7056: PPUSH
7057: LD_STRING D3-Sci1-4
7059: PPUSH
7060: CALL_OW 88
7064: GO 7078
// Say ( tmp1 , D3-Sci1-4 ) ;
7066: LD_VAR 0 1
7070: PPUSH
7071: LD_STRING D3-Sci1-4
7073: PPUSH
7074: CALL_OW 88
// DialogueOff ;
7078: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
7082: LD_INT 12
7084: PPUSH
7085: LD_INT 1
7087: PPUSH
7088: LD_INT 1
7090: PPUSH
7091: CALL_OW 322
// SetTech ( tech_rocket , 1 , state_enabled ) ;
7095: LD_INT 40
7097: PPUSH
7098: LD_INT 1
7100: PPUSH
7101: LD_INT 1
7103: PPUSH
7104: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
7108: LD_INT 32
7110: PPUSH
7111: LD_INT 1
7113: PPUSH
7114: LD_INT 1
7116: PPUSH
7117: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
7121: LD_INT 12
7123: PPUSH
7124: LD_INT 1
7126: PPUSH
7127: LD_INT 1
7129: PPUSH
7130: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
7134: LD_INT 33
7136: PPUSH
7137: LD_INT 1
7139: PPUSH
7140: LD_INT 1
7142: PPUSH
7143: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
7147: LD_STRING M2
7149: PPUSH
7150: CALL_OW 337
// wait ( 3 3$0 ) ;
7154: LD_INT 6300
7156: PPUSH
7157: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7161: LD_INT 35
7163: PPUSH
7164: CALL_OW 67
// until not InBattle ( 1 ) ;
7168: LD_INT 1
7170: PPUSH
7171: CALL_OW 463
7175: NOT
7176: IFFALSE 7161
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
7178: LD_EXP 11
7182: PPUSH
7183: CALL_OW 302
7187: PUSH
7188: LD_EXP 17
7192: PPUSH
7193: CALL_OW 302
7197: AND
7198: IFFALSE 7367
// begin DialogueOn ;
7200: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7204: LD_EXP 11
7208: PPUSH
7209: LD_STRING D3a-Sim-1
7211: PPUSH
7212: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
7216: LD_EXP 17
7220: PPUSH
7221: LD_STRING D3a-Sci1-1
7223: PPUSH
7224: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7228: LD_EXP 11
7232: PPUSH
7233: LD_STRING D3a-Sim-2
7235: PPUSH
7236: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
7240: LD_EXP 17
7244: PPUSH
7245: LD_STRING D3a-Sci1-2
7247: PPUSH
7248: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7252: LD_EXP 11
7256: PPUSH
7257: LD_STRING D3a-Sim-3
7259: PPUSH
7260: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
7264: LD_EXP 17
7268: PPUSH
7269: LD_STRING D3a-Sci1-3
7271: PPUSH
7272: CALL_OW 88
// if IsOK ( Joan ) then
7276: LD_EXP 13
7280: PPUSH
7281: CALL_OW 302
7285: IFFALSE 7301
// Say ( Simms , D3a-Sim-4 ) else
7287: LD_EXP 11
7291: PPUSH
7292: LD_STRING D3a-Sim-4
7294: PPUSH
7295: CALL_OW 88
7299: GO 7313
// Say ( Simms , D3a-Sim-4a ) ;
7301: LD_EXP 11
7305: PPUSH
7306: LD_STRING D3a-Sim-4a
7308: PPUSH
7309: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
7313: LD_EXP 17
7317: PPUSH
7318: LD_STRING D3a-Sci1-4
7320: PPUSH
7321: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7325: LD_EXP 11
7329: PPUSH
7330: LD_STRING D3a-Sim-5
7332: PPUSH
7333: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
7337: LD_EXP 17
7341: PPUSH
7342: LD_STRING D3a-Sci1-5
7344: PPUSH
7345: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7349: LD_EXP 11
7353: PPUSH
7354: LD_STRING D3a-Sim-6
7356: PPUSH
7357: CALL_OW 88
// DialogueOff ;
7361: CALL_OW 7
// end else
7365: GO 7640
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_class , 4 ] ] ) diff [ JMM , Frank , Lisa , Simms , Khatam ] ;
7367: LD_ADDR_VAR 0 3
7371: PUSH
7372: LD_INT 22
7374: PUSH
7375: LD_INT 1
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 26
7384: PUSH
7385: LD_INT 1
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PUSH
7392: LD_INT 25
7394: PUSH
7395: LD_INT 4
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: LIST
7406: PPUSH
7407: CALL_OW 69
7411: PUSH
7412: LD_EXP 1
7416: PUSH
7417: LD_EXP 7
7421: PUSH
7422: LD_EXP 6
7426: PUSH
7427: LD_EXP 11
7431: PUSH
7432: LD_EXP 14
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: DIFF
7444: ST_TO_ADDR
// if tmp3 > 0 then
7445: LD_VAR 0 3
7449: PUSH
7450: LD_INT 0
7452: GREATER
7453: IFFALSE 7640
// begin DialogueOn ;
7455: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7459: LD_EXP 11
7463: PPUSH
7464: LD_STRING D3a-Sim-1
7466: PPUSH
7467: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
7471: LD_VAR 0 3
7475: PUSH
7476: LD_INT 1
7478: ARRAY
7479: PPUSH
7480: LD_STRING D3a-Sci1-1
7482: PPUSH
7483: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7487: LD_EXP 11
7491: PPUSH
7492: LD_STRING D3a-Sim-2
7494: PPUSH
7495: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
7499: LD_VAR 0 3
7503: PUSH
7504: LD_INT 1
7506: ARRAY
7507: PPUSH
7508: LD_STRING D3a-Sci1-2
7510: PPUSH
7511: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7515: LD_EXP 11
7519: PPUSH
7520: LD_STRING D3a-Sim-3
7522: PPUSH
7523: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
7527: LD_VAR 0 3
7531: PUSH
7532: LD_INT 1
7534: ARRAY
7535: PPUSH
7536: LD_STRING D3a-Sci1-3
7538: PPUSH
7539: CALL_OW 88
// if IsOK ( Joan ) then
7543: LD_EXP 13
7547: PPUSH
7548: CALL_OW 302
7552: IFFALSE 7568
// Say ( Simms , D3a-Sim-4 ) else
7554: LD_EXP 11
7558: PPUSH
7559: LD_STRING D3a-Sim-4
7561: PPUSH
7562: CALL_OW 88
7566: GO 7580
// Say ( Simms , D3a-Sim-4a ) ;
7568: LD_EXP 11
7572: PPUSH
7573: LD_STRING D3a-Sim-4a
7575: PPUSH
7576: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
7580: LD_VAR 0 3
7584: PUSH
7585: LD_INT 1
7587: ARRAY
7588: PPUSH
7589: LD_STRING D3a-Sci1-4
7591: PPUSH
7592: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7596: LD_EXP 11
7600: PPUSH
7601: LD_STRING D3a-Sim-5
7603: PPUSH
7604: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
7608: LD_VAR 0 3
7612: PUSH
7613: LD_INT 1
7615: ARRAY
7616: PPUSH
7617: LD_STRING D3a-Sci1-5
7619: PPUSH
7620: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7624: LD_EXP 11
7628: PPUSH
7629: LD_STRING D3a-Sim-6
7631: PPUSH
7632: CALL_OW 88
// DialogueOff ;
7636: CALL_OW 7
// end ; end ; end ;
7640: PPOPN 3
7642: END
// every 0 0$2 trigger joinEpsilon = 1 do var rnd ;
7643: LD_EXP 31
7647: PUSH
7648: LD_INT 1
7650: EQUAL
7651: IFFALSE 7986
7653: GO 7655
7655: DISABLE
7656: LD_INT 0
7658: PPUSH
// begin wait ( 2 2$00 ) ;
7659: LD_INT 4200
7661: PPUSH
7662: CALL_OW 67
// SayRadio ( AmScout , D4-FSol1-1 ) ;
7666: LD_EXP 18
7670: PPUSH
7671: LD_STRING D4-FSol1-1
7673: PPUSH
7674: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
7678: LD_STRING M3
7680: PPUSH
7681: CALL_OW 337
// PrepareRussians ;
7685: CALL 3782 0 0
// spawnRussians := true ;
7689: LD_ADDR_EXP 60
7693: PUSH
7694: LD_INT 1
7696: ST_TO_ADDR
// rnd = Rand ( 1 , 100 ) ;
7697: LD_ADDR_VAR 0 1
7701: PUSH
7702: LD_INT 1
7704: PPUSH
7705: LD_INT 100
7707: PPUSH
7708: CALL_OW 12
7712: ST_TO_ADDR
// if difficulty = 1 then
7713: LD_OWVAR 67
7717: PUSH
7718: LD_INT 1
7720: EQUAL
7721: IFFALSE 7804
// begin if rnd > 0 and rnd < 51 then
7723: LD_VAR 0 1
7727: PUSH
7728: LD_INT 0
7730: GREATER
7731: PUSH
7732: LD_VAR 0 1
7736: PUSH
7737: LD_INT 51
7739: LESS
7740: AND
7741: IFFALSE 7750
// BuildRussianBase ( 2 ) ;
7743: LD_INT 2
7745: PPUSH
7746: CALL 12128 0 1
// if rnd > 50 and rnd < 81 then
7750: LD_VAR 0 1
7754: PUSH
7755: LD_INT 50
7757: GREATER
7758: PUSH
7759: LD_VAR 0 1
7763: PUSH
7764: LD_INT 81
7766: LESS
7767: AND
7768: IFFALSE 7777
// BuildRussianBase ( 1 ) ;
7770: LD_INT 1
7772: PPUSH
7773: CALL 12128 0 1
// if rnd > 80 and rnd < 101 then
7777: LD_VAR 0 1
7781: PUSH
7782: LD_INT 80
7784: GREATER
7785: PUSH
7786: LD_VAR 0 1
7790: PUSH
7791: LD_INT 101
7793: LESS
7794: AND
7795: IFFALSE 7804
// BuildRussianBase ( 3 ) ;
7797: LD_INT 3
7799: PPUSH
7800: CALL 12128 0 1
// end ; if difficulty = 2 then
7804: LD_OWVAR 67
7808: PUSH
7809: LD_INT 2
7811: EQUAL
7812: IFFALSE 7895
// begin if rnd > 0 and rnd < 61 then
7814: LD_VAR 0 1
7818: PUSH
7819: LD_INT 0
7821: GREATER
7822: PUSH
7823: LD_VAR 0 1
7827: PUSH
7828: LD_INT 61
7830: LESS
7831: AND
7832: IFFALSE 7841
// BuildRussianBase ( 2 ) ;
7834: LD_INT 2
7836: PPUSH
7837: CALL 12128 0 1
// if rnd > 60 and rnd < 81 then
7841: LD_VAR 0 1
7845: PUSH
7846: LD_INT 60
7848: GREATER
7849: PUSH
7850: LD_VAR 0 1
7854: PUSH
7855: LD_INT 81
7857: LESS
7858: AND
7859: IFFALSE 7868
// BuildRussianBase ( 1 ) ;
7861: LD_INT 1
7863: PPUSH
7864: CALL 12128 0 1
// if rnd > 80 and rnd < 101 then
7868: LD_VAR 0 1
7872: PUSH
7873: LD_INT 80
7875: GREATER
7876: PUSH
7877: LD_VAR 0 1
7881: PUSH
7882: LD_INT 101
7884: LESS
7885: AND
7886: IFFALSE 7895
// BuildRussianBase ( 3 ) ;
7888: LD_INT 3
7890: PPUSH
7891: CALL 12128 0 1
// end ; if difficulty >= 3 then
7895: LD_OWVAR 67
7899: PUSH
7900: LD_INT 3
7902: GREATEREQUAL
7903: IFFALSE 7986
// begin if rnd > 0 and rnd < 71 then
7905: LD_VAR 0 1
7909: PUSH
7910: LD_INT 0
7912: GREATER
7913: PUSH
7914: LD_VAR 0 1
7918: PUSH
7919: LD_INT 71
7921: LESS
7922: AND
7923: IFFALSE 7932
// BuildRussianBase ( 3 ) ;
7925: LD_INT 3
7927: PPUSH
7928: CALL 12128 0 1
// if rnd > 70 and rnd < 81 then
7932: LD_VAR 0 1
7936: PUSH
7937: LD_INT 70
7939: GREATER
7940: PUSH
7941: LD_VAR 0 1
7945: PUSH
7946: LD_INT 81
7948: LESS
7949: AND
7950: IFFALSE 7959
// BuildRussianBase ( 2 ) ;
7952: LD_INT 2
7954: PPUSH
7955: CALL 12128 0 1
// if rnd > 80 and rnd < 101 then
7959: LD_VAR 0 1
7963: PUSH
7964: LD_INT 80
7966: GREATER
7967: PUSH
7968: LD_VAR 0 1
7972: PUSH
7973: LD_INT 101
7975: LESS
7976: AND
7977: IFFALSE 7986
// BuildRussianBase ( 1 ) ;
7979: LD_INT 1
7981: PPUSH
7982: CALL 12128 0 1
// end ; end ;
7986: PPOPN 1
7988: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
7989: LD_INT 54
7991: PPUSH
7992: LD_INT 1
7994: PPUSH
7995: CALL_OW 321
7999: PUSH
8000: LD_INT 2
8002: EQUAL
8003: PUSH
8004: LD_INT 21
8006: PPUSH
8007: LD_INT 1
8009: PPUSH
8010: CALL_OW 321
8014: PUSH
8015: LD_INT 2
8017: EQUAL
8018: OR
8019: PUSH
8020: LD_INT 22
8022: PPUSH
8023: LD_INT 1
8025: PPUSH
8026: CALL_OW 321
8030: PUSH
8031: LD_INT 2
8033: EQUAL
8034: OR
8035: IFFALSE 8337
8037: GO 8039
8039: DISABLE
8040: LD_INT 0
8042: PPUSH
8043: PPUSH
// begin if IsOk ( DeltaDoctor ) then
8044: LD_EXP 17
8048: PPUSH
8049: CALL_OW 302
8053: IFFALSE 8067
// tmp := DeltaDoctor else
8055: LD_ADDR_VAR 0 2
8059: PUSH
8060: LD_EXP 17
8064: ST_TO_ADDR
8065: GO 8077
// tmp := Denis ;
8067: LD_ADDR_VAR 0 2
8071: PUSH
8072: LD_EXP 12
8076: ST_TO_ADDR
// if tmp then
8077: LD_VAR 0 2
8081: IFFALSE 8175
// begin DialogueOn ;
8083: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
8087: LD_EXP 1
8091: PPUSH
8092: LD_STRING D6-JMM-1
8094: PPUSH
8095: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
8099: LD_VAR 0 2
8103: PPUSH
8104: LD_STRING D6-Sci1-1
8106: PPUSH
8107: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
8111: LD_EXP 1
8115: PPUSH
8116: LD_STRING D6-JMM-2
8118: PPUSH
8119: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
8123: LD_VAR 0 2
8127: PPUSH
8128: LD_STRING D6-Sci1-2
8130: PPUSH
8131: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
8135: LD_EXP 1
8139: PPUSH
8140: LD_STRING D6-JMM-3
8142: PPUSH
8143: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
8147: LD_VAR 0 2
8151: PPUSH
8152: LD_STRING D6-Sci1-3
8154: PPUSH
8155: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
8159: LD_EXP 1
8163: PPUSH
8164: LD_STRING D6-JMM-4
8166: PPUSH
8167: CALL_OW 88
// DialogueOff ;
8171: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
8175: LD_INT 1050
8177: PPUSH
8178: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
8182: LD_EXP 51
8186: PUSH
8187: LD_INT 0
8189: EQUAL
8190: PUSH
8191: LD_EXP 14
8195: PPUSH
8196: CALL_OW 302
8200: AND
8201: IFFALSE 8259
// begin DialogueOn ;
8203: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
8207: LD_EXP 29
8211: PPUSH
8212: LD_STRING D5-Ar1-1
8214: PPUSH
8215: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
8219: LD_EXP 28
8223: PPUSH
8224: LD_STRING D5-Diet-1
8226: PPUSH
8227: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
8231: LD_EXP 29
8235: PPUSH
8236: LD_STRING D5-Ar1-2
8238: PPUSH
8239: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
8243: LD_EXP 28
8247: PPUSH
8248: LD_STRING D5-Diet-2
8250: PPUSH
8251: CALL_OW 88
// DialogueOff ;
8255: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
8259: LD_INT 35
8261: PPUSH
8262: CALL_OW 67
// until tick > 10 10$00 ;
8266: LD_OWVAR 1
8270: PUSH
8271: LD_INT 21000
8273: GREATER
8274: IFFALSE 8259
// wait ( 1 1$30 ) ;
8276: LD_INT 3150
8278: PPUSH
8279: CALL_OW 67
// if arabianTrait = 0 then
8283: LD_EXP 51
8287: PUSH
8288: LD_INT 0
8290: EQUAL
8291: IFFALSE 8337
// begin arabianTrait = 1 ;
8293: LD_ADDR_EXP 51
8297: PUSH
8298: LD_INT 1
8300: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
8301: LD_INT 2
8303: PPUSH
8304: LD_INT 3
8306: PPUSH
8307: LD_INT 1
8309: PPUSH
8310: LD_INT 1
8312: PPUSH
8313: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
8317: LD_INT 2
8319: PPUSH
8320: LD_INT 6
8322: PPUSH
8323: LD_INT 1
8325: PPUSH
8326: LD_INT 1
8328: PPUSH
8329: CALL_OW 80
// PrepareArabianTrait ;
8333: CALL 8340 0 0
// end ; end ;
8337: PPOPN 2
8339: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding ; begin
8340: LD_INT 0
8342: PPUSH
8343: PPUSH
8344: PPUSH
8345: PPUSH
8346: PPUSH
8347: PPUSH
8348: PPUSH
8349: PPUSH
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
8350: LD_ADDR_VAR 0 6
8354: PUSH
8355: LD_INT 22
8357: PUSH
8358: LD_INT 2
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: PUSH
8365: LD_INT 2
8367: PUSH
8368: LD_INT 25
8370: PUSH
8371: LD_INT 4
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PUSH
8378: LD_INT 25
8380: PUSH
8381: LD_INT 2
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: PUSH
8388: LD_INT 25
8390: PUSH
8391: LD_INT 3
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PPUSH
8408: CALL_OW 69
8412: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8413: LD_ADDR_VAR 0 5
8417: PUSH
8418: LD_INT 22
8420: PUSH
8421: LD_INT 2
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: PUSH
8428: LD_INT 21
8430: PUSH
8431: LD_INT 1
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PUSH
8438: LD_INT 2
8440: PUSH
8441: LD_INT 25
8443: PUSH
8444: LD_INT 1
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_INT 25
8453: PUSH
8454: LD_INT 8
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PUSH
8461: LD_INT 25
8463: PUSH
8464: LD_INT 15
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: LIST
8481: PPUSH
8482: CALL_OW 69
8486: PUSH
8487: LD_EXP 28
8491: PUSH
8492: EMPTY
8493: LIST
8494: DIFF
8495: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
8496: LD_ADDR_VAR 0 7
8500: PUSH
8501: LD_INT 22
8503: PUSH
8504: LD_INT 2
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: LD_INT 30
8513: PUSH
8514: LD_INT 5
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: PPUSH
8525: CALL_OW 69
8529: PUSH
8530: LD_INT 1
8532: ARRAY
8533: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
8534: LD_VAR 0 6
8538: PPUSH
8539: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
8543: LD_VAR 0 5
8547: PPUSH
8548: CALL_OW 122
// wait ( 0 0$3 ) ;
8552: LD_INT 105
8554: PPUSH
8555: CALL_OW 67
// AddComEnterUnit ( arCivilian , barracks ) ;
8559: LD_VAR 0 6
8563: PPUSH
8564: LD_VAR 0 7
8568: PPUSH
8569: CALL_OW 180
// AddComChangeProfession ( arCivilian , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
8573: LD_VAR 0 6
8577: PPUSH
8578: LD_INT 1
8580: PUSH
8581: LD_INT 8
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 1
8590: PPUSH
8591: LD_INT 2
8593: PPUSH
8594: CALL_OW 12
8598: ARRAY
8599: PPUSH
8600: CALL_OW 183
// AddComExitBuilding ( arCivilian ) ;
8604: LD_VAR 0 6
8608: PPUSH
8609: CALL_OW 182
// wait ( 0 0$1 ) ;
8613: LD_INT 35
8615: PPUSH
8616: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
8620: LD_INT 76
8622: PPUSH
8623: LD_INT 19
8625: PPUSH
8626: CALL_OW 84
// DialogueOn ;
8630: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8634: LD_INT 22
8636: PUSH
8637: LD_INT 1
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 26
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 2
8656: PUSH
8657: LD_INT 25
8659: PUSH
8660: LD_INT 1
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PUSH
8667: LD_INT 25
8669: PUSH
8670: LD_INT 2
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PUSH
8677: LD_INT 25
8679: PUSH
8680: LD_INT 3
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PUSH
8687: LD_INT 25
8689: PUSH
8690: LD_INT 4
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: LD_INT 25
8699: PUSH
8700: LD_INT 5
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: LIST
8719: PPUSH
8720: CALL_OW 69
8724: PPUSH
8725: LD_STRING D8-Sol1-1
8727: PPUSH
8728: LD_STRING D8-Sol1-1
8730: PPUSH
8731: CALL 11470 0 3
// if IsOK ( DeltaDoctor ) then
8735: LD_EXP 17
8739: PPUSH
8740: CALL_OW 302
8744: IFFALSE 8760
// Say ( DeltaDoctor , D8-Sci1-1 ) else
8746: LD_EXP 17
8750: PPUSH
8751: LD_STRING D8-Sci1-1
8753: PPUSH
8754: CALL_OW 88
8758: GO 8861
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8760: LD_INT 22
8762: PUSH
8763: LD_INT 1
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: PUSH
8770: LD_INT 26
8772: PUSH
8773: LD_INT 1
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: PUSH
8780: LD_INT 2
8782: PUSH
8783: LD_INT 25
8785: PUSH
8786: LD_INT 1
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_INT 25
8795: PUSH
8796: LD_INT 2
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: LD_INT 25
8805: PUSH
8806: LD_INT 3
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PUSH
8813: LD_INT 25
8815: PUSH
8816: LD_INT 4
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PUSH
8823: LD_INT 25
8825: PUSH
8826: LD_INT 5
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PUSH
8833: EMPTY
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: LIST
8845: PPUSH
8846: CALL_OW 69
8850: PPUSH
8851: LD_STRING D8-Sol1-1
8853: PPUSH
8854: LD_STRING D8-Sol1-1
8856: PPUSH
8857: CALL 11470 0 3
// Say ( JMM , D8-JMM-1 ) ;
8861: LD_EXP 1
8865: PPUSH
8866: LD_STRING D8-JMM-1
8868: PPUSH
8869: CALL_OW 88
// DialogueOff ;
8873: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
8877: LD_INT 2
8879: PPUSH
8880: LD_INT 2
8882: PPUSH
8883: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
8887: LD_INT 1
8889: PPUSH
8890: LD_INT 2
8892: PPUSH
8893: LD_INT 2
8895: PPUSH
8896: LD_INT 1
8898: PPUSH
8899: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
8903: LD_INT 3
8905: PPUSH
8906: LD_INT 2
8908: PPUSH
8909: LD_INT 1
8911: PPUSH
8912: LD_INT 1
8914: PPUSH
8915: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
8919: LD_STRING M4
8921: PPUSH
8922: CALL_OW 337
// wait ( 0 0$1 ) ;
8926: LD_INT 35
8928: PPUSH
8929: CALL_OW 67
// if IsLive ( Khatam ) then
8933: LD_EXP 14
8937: PPUSH
8938: CALL_OW 300
8942: IFFALSE 8956
// DoNotAttack ( 2 , Khatam ) ;
8944: LD_INT 2
8946: PPUSH
8947: LD_EXP 14
8951: PPUSH
8952: CALL_OW 471
// wait ( 0 0$1 ) ;
8956: LD_INT 35
8958: PPUSH
8959: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
8963: LD_ADDR_VAR 0 8
8967: PUSH
8968: LD_INT 22
8970: PUSH
8971: LD_INT 1
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: PUSH
8978: LD_INT 21
8980: PUSH
8981: LD_INT 3
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PPUSH
8992: CALL_OW 69
8996: PPUSH
8997: LD_VAR 0 5
9001: PUSH
9002: LD_INT 1
9004: ARRAY
9005: PPUSH
9006: CALL_OW 74
9010: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
9011: LD_VAR 0 5
9015: PPUSH
9016: LD_INT 25
9018: PUSH
9019: LD_INT 1
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PPUSH
9026: CALL_OW 72
9030: PUSH
9031: LD_INT 1
9033: ARRAY
9034: PPUSH
9035: LD_VAR 0 8
9039: PPUSH
9040: CALL_OW 250
9044: PPUSH
9045: LD_VAR 0 8
9049: PPUSH
9050: CALL_OW 251
9054: PPUSH
9055: LD_VAR 0 8
9059: PPUSH
9060: CALL_OW 192
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
9064: LD_VAR 0 5
9068: PPUSH
9069: LD_INT 84
9071: PPUSH
9072: LD_INT 22
9074: PPUSH
9075: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
9079: LD_VAR 0 5
9083: PPUSH
9084: LD_INT 82
9086: PPUSH
9087: LD_INT 5
9089: PPUSH
9090: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
9094: LD_VAR 0 5
9098: PPUSH
9099: LD_INT 95
9101: PPUSH
9102: LD_INT 12
9104: PPUSH
9105: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
9109: LD_VAR 0 5
9113: PPUSH
9114: LD_INT 102
9116: PPUSH
9117: LD_INT 11
9119: PPUSH
9120: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
9124: LD_VAR 0 5
9128: PPUSH
9129: LD_INT 116
9131: PPUSH
9132: LD_INT 15
9134: PPUSH
9135: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
9139: LD_VAR 0 5
9143: PPUSH
9144: LD_INT 140
9146: PPUSH
9147: LD_INT 25
9149: PPUSH
9150: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
9154: LD_VAR 0 5
9158: PPUSH
9159: LD_INT 160
9161: PPUSH
9162: LD_INT 56
9164: PPUSH
9165: CALL_OW 174
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
9169: LD_ADDR_VAR 0 5
9173: PUSH
9174: LD_INT 22
9176: PUSH
9177: LD_INT 2
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: PUSH
9184: LD_INT 21
9186: PUSH
9187: LD_INT 1
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PUSH
9194: LD_INT 2
9196: PUSH
9197: LD_INT 25
9199: PUSH
9200: LD_INT 1
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 25
9209: PUSH
9210: LD_INT 8
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: LD_INT 25
9219: PUSH
9220: LD_INT 15
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: LIST
9237: PPUSH
9238: CALL_OW 69
9242: PUSH
9243: LD_EXP 28
9247: PUSH
9248: EMPTY
9249: LIST
9250: DIFF
9251: ST_TO_ADDR
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
9252: LD_ADDR_VAR 0 6
9256: PUSH
9257: LD_INT 22
9259: PUSH
9260: LD_INT 2
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: LD_INT 21
9269: PUSH
9270: LD_INT 1
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PUSH
9277: LD_INT 2
9279: PUSH
9280: LD_INT 25
9282: PUSH
9283: LD_INT 2
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: PUSH
9290: LD_INT 25
9292: PUSH
9293: LD_INT 3
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: PUSH
9300: LD_INT 25
9302: PUSH
9303: LD_INT 4
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: PUSH
9310: LD_INT 25
9312: PUSH
9313: LD_INT 12
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PUSH
9320: LD_INT 25
9322: PUSH
9323: LD_INT 16
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: LIST
9342: PPUSH
9343: CALL_OW 69
9347: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
9348: LD_ADDR_VAR 0 6
9352: PUSH
9353: LD_VAR 0 6
9357: PUSH
9358: LD_EXP 28
9362: ADD
9363: ST_TO_ADDR
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
9364: LD_VAR 0 5
9368: PPUSH
9369: LD_INT 189
9371: PPUSH
9372: LD_INT 79
9374: PPUSH
9375: CALL_OW 174
// if UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) then
9379: LD_VAR 0 5
9383: PPUSH
9384: LD_INT 25
9386: PUSH
9387: LD_INT 15
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PPUSH
9394: CALL_OW 72
9398: IFFALSE 9439
// ComEnterUnit ( UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) [ 1 ] , HexInfo ( 84 , 21 ) ) ;
9400: LD_VAR 0 5
9404: PPUSH
9405: LD_INT 25
9407: PUSH
9408: LD_INT 15
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PPUSH
9415: CALL_OW 72
9419: PUSH
9420: LD_INT 1
9422: ARRAY
9423: PPUSH
9424: LD_INT 84
9426: PPUSH
9427: LD_INT 21
9429: PPUSH
9430: CALL_OW 428
9434: PPUSH
9435: CALL_OW 120
// wait ( 0 0$4 ) ;
9439: LD_INT 140
9441: PPUSH
9442: CALL_OW 67
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
9446: LD_VAR 0 6
9450: PPUSH
9451: LD_INT 88
9453: PPUSH
9454: LD_INT 8
9456: PPUSH
9457: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
9461: LD_VAR 0 6
9465: PPUSH
9466: LD_INT 102
9468: PPUSH
9469: LD_INT 10
9471: PPUSH
9472: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
9476: LD_VAR 0 6
9480: PPUSH
9481: LD_INT 116
9483: PPUSH
9484: LD_INT 15
9486: PPUSH
9487: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
9491: LD_VAR 0 6
9495: PPUSH
9496: LD_INT 140
9498: PPUSH
9499: LD_INT 25
9501: PPUSH
9502: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
9506: LD_VAR 0 6
9510: PPUSH
9511: LD_INT 160
9513: PPUSH
9514: LD_INT 56
9516: PPUSH
9517: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
9521: LD_VAR 0 6
9525: PPUSH
9526: LD_INT 189
9528: PPUSH
9529: LD_INT 79
9531: PPUSH
9532: CALL_OW 171
// arabianAttackersAI = 1 ;
9536: LD_ADDR_EXP 48
9540: PUSH
9541: LD_INT 1
9543: ST_TO_ADDR
// if IsOk ( Gary ) then
9544: LD_EXP 10
9548: PPUSH
9549: CALL_OW 302
9553: IFFALSE 9567
// Say ( Gary , D8a-Gary-1 ) ;
9555: LD_EXP 10
9559: PPUSH
9560: LD_STRING D8a-Gary-1
9562: PPUSH
9563: CALL_OW 88
// wait ( 0 0$5 ) ;
9567: LD_INT 175
9569: PPUSH
9570: CALL_OW 67
// if IsOK ( Khatam ) then
9574: LD_EXP 14
9578: PPUSH
9579: CALL_OW 302
9583: IFFALSE 10119
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
9585: LD_ADDR_VAR 0 3
9589: PUSH
9590: LD_INT 22
9592: PUSH
9593: LD_INT 1
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: LD_INT 2
9602: PUSH
9603: LD_INT 25
9605: PUSH
9606: LD_INT 1
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PUSH
9613: LD_INT 25
9615: PUSH
9616: LD_INT 2
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: PUSH
9623: LD_INT 25
9625: PUSH
9626: LD_INT 3
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: PUSH
9633: LD_INT 25
9635: PUSH
9636: LD_INT 4
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: LD_INT 25
9645: PUSH
9646: LD_INT 5
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PUSH
9653: LD_INT 25
9655: PUSH
9656: LD_INT 8
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: PPUSH
9676: CALL_OW 69
9680: PUSH
9681: LD_EXP 1
9685: PUSH
9686: LD_EXP 2
9690: PUSH
9691: LD_EXP 3
9695: PUSH
9696: LD_EXP 4
9700: PUSH
9701: LD_EXP 5
9705: PUSH
9706: LD_EXP 6
9710: PUSH
9711: LD_EXP 7
9715: PUSH
9716: LD_EXP 8
9720: PUSH
9721: LD_EXP 9
9725: PUSH
9726: LD_EXP 10
9730: PUSH
9731: LD_EXP 11
9735: PUSH
9736: LD_EXP 12
9740: PUSH
9741: LD_EXP 13
9745: PUSH
9746: LD_EXP 14
9750: PUSH
9751: LD_EXP 15
9755: PUSH
9756: LD_EXP 16
9760: PUSH
9761: LD_EXP 17
9765: PUSH
9766: LD_EXP 20
9770: PUSH
9771: LD_EXP 26
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: DIFF
9797: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
9798: LD_EXP 14
9802: PPUSH
9803: LD_INT 8
9805: PPUSH
9806: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
9810: LD_EXP 14
9814: PPUSH
9815: CALL_OW 122
// wait ( 0 0$1 ) ;
9819: LD_INT 35
9821: PPUSH
9822: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
9826: LD_EXP 14
9830: PPUSH
9831: CALL_OW 121
// wait ( 0 0$1 ) ;
9835: LD_INT 35
9837: PPUSH
9838: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
9842: LD_EXP 14
9846: PPUSH
9847: LD_INT 7
9849: PPUSH
9850: CALL_OW 113
// if not tmp then
9854: LD_VAR 0 3
9858: NOT
9859: IFFALSE 9863
// exit ;
9861: GO 10119
// DialogueOn ;
9863: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
9867: LD_VAR 0 3
9871: PUSH
9872: LD_INT 1
9874: ARRAY
9875: PPUSH
9876: CALL_OW 258
9880: PUSH
9881: LD_INT 1
9883: EQUAL
9884: IFFALSE 9904
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
9886: LD_VAR 0 3
9890: PUSH
9891: LD_INT 1
9893: ARRAY
9894: PPUSH
9895: LD_STRING D8b-Sol1-1
9897: PPUSH
9898: CALL_OW 88
9902: GO 9920
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
9904: LD_VAR 0 3
9908: PUSH
9909: LD_INT 1
9911: ARRAY
9912: PPUSH
9913: LD_STRING D8b-FSol1-1
9915: PPUSH
9916: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
9920: LD_EXP 14
9924: PPUSH
9925: LD_STRING D8b-Khat-1
9927: PPUSH
9928: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9932: LD_VAR 0 3
9936: PUSH
9937: LD_INT 1
9939: ARRAY
9940: PPUSH
9941: CALL_OW 258
9945: PUSH
9946: LD_INT 1
9948: EQUAL
9949: IFFALSE 9969
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
9951: LD_VAR 0 3
9955: PUSH
9956: LD_INT 1
9958: ARRAY
9959: PPUSH
9960: LD_STRING D8b-Sol1-2
9962: PPUSH
9963: CALL_OW 88
9967: GO 9985
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
9969: LD_VAR 0 3
9973: PUSH
9974: LD_INT 1
9976: ARRAY
9977: PPUSH
9978: LD_STRING D8b-FSol1-2
9980: PPUSH
9981: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
9985: LD_EXP 14
9989: PPUSH
9990: LD_STRING D8b-Khat-2
9992: PPUSH
9993: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9997: LD_VAR 0 3
10001: PUSH
10002: LD_INT 1
10004: ARRAY
10005: PPUSH
10006: CALL_OW 258
10010: PUSH
10011: LD_INT 1
10013: EQUAL
10014: IFFALSE 10034
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
10016: LD_VAR 0 3
10020: PUSH
10021: LD_INT 1
10023: ARRAY
10024: PPUSH
10025: LD_STRING D8b-Sol1-3
10027: PPUSH
10028: CALL_OW 88
10032: GO 10050
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
10034: LD_VAR 0 3
10038: PUSH
10039: LD_INT 1
10041: ARRAY
10042: PPUSH
10043: LD_STRING D8b-FSol1-3
10045: PPUSH
10046: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
10050: LD_EXP 14
10054: PPUSH
10055: LD_STRING D8b-Khat-3
10057: PPUSH
10058: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
10062: LD_VAR 0 3
10066: PUSH
10067: LD_INT 1
10069: ARRAY
10070: PPUSH
10071: CALL_OW 258
10075: PUSH
10076: LD_INT 1
10078: EQUAL
10079: IFFALSE 10099
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
10081: LD_VAR 0 3
10085: PUSH
10086: LD_INT 1
10088: ARRAY
10089: PPUSH
10090: LD_STRING D8b-Sol1-4
10092: PPUSH
10093: CALL_OW 88
10097: GO 10115
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
10099: LD_VAR 0 3
10103: PUSH
10104: LD_INT 1
10106: ARRAY
10107: PPUSH
10108: LD_STRING D8b-FSol1-4
10110: PPUSH
10111: CALL_OW 88
// DialogueOff ;
10115: CALL_OW 7
// end ; end ;
10119: LD_VAR 0 1
10123: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
10124: LD_INT 7
10126: PPUSH
10127: LD_INT 22
10129: PUSH
10130: LD_INT 2
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PPUSH
10137: CALL_OW 70
10141: PUSH
10142: LD_INT 0
10144: GREATER
10145: PUSH
10146: LD_EXP 14
10150: PPUSH
10151: LD_INT 7
10153: PPUSH
10154: CALL_OW 308
10158: OR
10159: IFFALSE 10366
10161: GO 10163
10163: DISABLE
10164: LD_INT 0
10166: PPUSH
// begin enable ;
10167: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
10168: LD_ADDR_VAR 0 1
10172: PUSH
10173: LD_INT 7
10175: PPUSH
10176: LD_INT 22
10178: PUSH
10179: LD_INT 2
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: PPUSH
10186: CALL_OW 70
10190: PUSH
10191: FOR_IN
10192: IFFALSE 10333
// begin if GetClass ( i ) = 4 then
10194: LD_VAR 0 1
10198: PPUSH
10199: CALL_OW 257
10203: PUSH
10204: LD_INT 4
10206: EQUAL
10207: IFFALSE 10219
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
10209: LD_INT 1
10211: PPUSH
10212: LD_STRING 10_ScientistsEscape_1
10214: PPUSH
10215: CALL_OW 39
// if i = Dietrich then
10219: LD_VAR 0 1
10223: PUSH
10224: LD_EXP 28
10228: EQUAL
10229: IFFALSE 10239
// GensherStatus = 1 ;
10231: LD_ADDR_EXP 54
10235: PUSH
10236: LD_INT 1
10238: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
10239: LD_VAR 0 1
10243: PPUSH
10244: CALL_OW 257
10248: PUSH
10249: LD_INT 1
10251: EQUAL
10252: PUSH
10253: LD_VAR 0 1
10257: PPUSH
10258: CALL_OW 257
10262: PUSH
10263: LD_INT 2
10265: EQUAL
10266: OR
10267: PUSH
10268: LD_VAR 0 1
10272: PPUSH
10273: CALL_OW 257
10277: PUSH
10278: LD_INT 3
10280: EQUAL
10281: OR
10282: PUSH
10283: LD_VAR 0 1
10287: PPUSH
10288: CALL_OW 257
10292: PUSH
10293: LD_INT 4
10295: EQUAL
10296: OR
10297: PUSH
10298: LD_VAR 0 1
10302: PPUSH
10303: CALL_OW 257
10307: PUSH
10308: LD_INT 8
10310: EQUAL
10311: OR
10312: IFFALSE 10322
// arabianEscape = 1 ;
10314: LD_ADDR_EXP 49
10318: PUSH
10319: LD_INT 1
10321: ST_TO_ADDR
// RemoveUnit ( i ) ;
10322: LD_VAR 0 1
10326: PPUSH
10327: CALL_OW 64
// end ;
10331: GO 10191
10333: POP
10334: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
10335: LD_EXP 14
10339: PPUSH
10340: LD_INT 7
10342: PPUSH
10343: CALL_OW 308
10347: IFFALSE 10366
// begin KhatamStatus = 1 ;
10349: LD_ADDR_EXP 55
10353: PUSH
10354: LD_INT 1
10356: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
10357: LD_EXP 14
10361: PPUSH
10362: CALL_OW 64
// end ; end ;
10366: PPOPN 1
10368: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
10369: LD_INT 22
10371: PUSH
10372: LD_INT 2
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PUSH
10379: LD_INT 21
10381: PUSH
10382: LD_INT 1
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 69
10397: PUSH
10398: LD_INT 0
10400: EQUAL
10401: PUSH
10402: LD_INT 22
10404: PUSH
10405: LD_INT 4
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 21
10414: PUSH
10415: LD_INT 1
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 69
10430: PUSH
10431: LD_INT 0
10433: EQUAL
10434: AND
10435: IFFALSE 10448
10437: GO 10439
10439: DISABLE
// arabianDefeated = 1 ;
10440: LD_ADDR_EXP 50
10444: PUSH
10445: LD_INT 1
10447: ST_TO_ADDR
10448: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
10449: LD_INT 54
10451: PPUSH
10452: LD_INT 1
10454: PPUSH
10455: CALL_OW 321
10459: PUSH
10460: LD_INT 2
10462: EQUAL
10463: PUSH
10464: LD_INT 55
10466: PPUSH
10467: LD_INT 1
10469: PPUSH
10470: CALL_OW 321
10474: PUSH
10475: LD_INT 2
10477: EQUAL
10478: AND
10479: PUSH
10480: LD_INT 21
10482: PPUSH
10483: LD_INT 1
10485: PPUSH
10486: CALL_OW 321
10490: PUSH
10491: LD_INT 2
10493: EQUAL
10494: AND
10495: PUSH
10496: LD_INT 22
10498: PPUSH
10499: LD_INT 1
10501: PPUSH
10502: CALL_OW 321
10506: PUSH
10507: LD_INT 2
10509: EQUAL
10510: AND
10511: PUSH
10512: LD_INT 12
10514: PPUSH
10515: LD_INT 1
10517: PPUSH
10518: CALL_OW 321
10522: PUSH
10523: LD_INT 2
10525: EQUAL
10526: AND
10527: PUSH
10528: LD_INT 32
10530: PPUSH
10531: LD_INT 1
10533: PPUSH
10534: CALL_OW 321
10538: PUSH
10539: LD_INT 2
10541: EQUAL
10542: AND
10543: PUSH
10544: LD_EXP 65
10548: PUSH
10549: LD_INT 0
10551: EQUAL
10552: AND
10553: PUSH
10554: LD_EXP 51
10558: PUSH
10559: LD_INT 0
10561: EQUAL
10562: AND
10563: PUSH
10564: LD_OWVAR 1
10568: PUSH
10569: LD_INT 31500
10571: GREATEREQUAL
10572: AND
10573: IFFALSE 10590
10575: GO 10577
10577: DISABLE
// begin arabianTrait = 1 ;
10578: LD_ADDR_EXP 51
10582: PUSH
10583: LD_INT 1
10585: ST_TO_ADDR
// PrepareArabianTrait ;
10586: CALL 8340 0 0
// end ;
10590: END
// every 0 0$1 trigger FilterAllUnits ( [ f_side , 5 ] ) > 3 do
10591: LD_INT 22
10593: PUSH
10594: LD_INT 5
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PPUSH
10601: CALL_OW 69
10605: PUSH
10606: LD_INT 3
10608: GREATER
10609: IFFALSE 10626
10611: GO 10613
10613: DISABLE
// SayRadio ( AmScout , D4-FSol1-3 ) ;
10614: LD_EXP 18
10618: PPUSH
10619: LD_STRING D4-FSol1-3
10621: PPUSH
10622: CALL_OW 94
10626: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
10627: LD_EXP 31
10631: PUSH
10632: LD_STRING 02_mikhailStatus_1
10634: PPUSH
10635: LD_INT 0
10637: PPUSH
10638: CALL_OW 30
10642: PUSH
10643: LD_INT 1
10645: EQUAL
10646: AND
10647: PUSH
10648: LD_INT 22
10650: PUSH
10651: LD_INT 5
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PPUSH
10658: CALL_OW 69
10662: PUSH
10663: LD_INT 0
10665: EQUAL
10666: AND
10667: PUSH
10668: LD_INT 22
10670: PUSH
10671: LD_INT 2
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 21
10680: PUSH
10681: LD_INT 1
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PPUSH
10692: CALL_OW 69
10696: PUSH
10697: LD_INT 0
10699: EQUAL
10700: PUSH
10701: LD_EXP 51
10705: PUSH
10706: LD_INT 0
10708: EQUAL
10709: OR
10710: AND
10711: IFFALSE 10720
10713: GO 10715
10715: DISABLE
// PrepareCornell ;
10716: CALL 3529 0 0
10720: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
10721: LD_INT 22
10723: PUSH
10724: LD_INT 1
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PPUSH
10731: CALL_OW 69
10735: PPUSH
10736: LD_EXP 20
10740: PPUSH
10741: CALL_OW 74
10745: PPUSH
10746: LD_EXP 20
10750: PPUSH
10751: CALL_OW 296
10755: PUSH
10756: LD_INT 9
10758: LESS
10759: IFFALSE 10980
10761: GO 10763
10763: DISABLE
// begin InGameOn ;
10764: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
10768: LD_EXP 20
10772: PPUSH
10773: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
10777: LD_EXP 20
10781: PPUSH
10782: LD_STRING D7-Corn-1
10784: PPUSH
10785: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
10789: LD_INT 22
10791: PUSH
10792: LD_INT 1
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: LD_INT 2
10801: PUSH
10802: LD_INT 25
10804: PUSH
10805: LD_INT 1
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: LD_INT 25
10814: PUSH
10815: LD_INT 2
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: LD_INT 25
10824: PUSH
10825: LD_INT 3
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 25
10834: PUSH
10835: LD_INT 4
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: LD_INT 25
10844: PUSH
10845: LD_INT 5
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PPUSH
10864: CALL_OW 69
10868: PPUSH
10869: LD_STRING D7-Sol1-1
10871: PPUSH
10872: LD_STRING D7-FSol1-1
10874: PPUSH
10875: CALL 11470 0 3
// CenterNowOnUnits ( Cornell ) ;
10879: LD_EXP 20
10883: PPUSH
10884: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
10888: LD_EXP 20
10892: PPUSH
10893: LD_STRING D7-Corn-2
10895: PPUSH
10896: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
10900: LD_EXP 1
10904: PPUSH
10905: LD_STRING D7-JMM-2
10907: PPUSH
10908: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
10912: LD_EXP 20
10916: PPUSH
10917: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
10921: LD_EXP 20
10925: PPUSH
10926: LD_STRING D7-Corn-3
10928: PPUSH
10929: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
10933: LD_EXP 20
10937: PPUSH
10938: LD_INT 250
10940: PPUSH
10941: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
10945: LD_EXP 20
10949: PPUSH
10950: LD_INT 1
10952: PPUSH
10953: CALL_OW 235
// wait ( 0 0$1 ) ;
10957: LD_INT 35
10959: PPUSH
10960: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
10964: LD_EXP 1
10968: PPUSH
10969: LD_STRING D7-JMM-3
10971: PPUSH
10972: CALL_OW 88
// InGameOff ;
10976: CALL_OW 9
// end ;
10980: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
10981: LD_EXP 20
10985: PPUSH
10986: CALL_OW 255
10990: PUSH
10991: LD_INT 1
10993: EQUAL
10994: PUSH
10995: LD_EXP 20
10999: PPUSH
11000: CALL_OW 256
11004: PUSH
11005: LD_INT 350
11007: GREATER
11008: AND
11009: IFFALSE 11202
11011: GO 11013
11013: DISABLE
// begin DialogueOn ;
11014: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
11018: LD_EXP 1
11022: PPUSH
11023: LD_STRING D7a-JMM-1
11025: PPUSH
11026: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
11030: LD_EXP 20
11034: PPUSH
11035: LD_STRING D7a-Corn-1
11037: PPUSH
11038: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
11042: LD_EXP 1
11046: PPUSH
11047: LD_STRING D7a-JMM-2
11049: PPUSH
11050: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
11054: LD_EXP 20
11058: PPUSH
11059: LD_STRING D7a-Corn-2
11061: PPUSH
11062: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
11066: LD_EXP 1
11070: PPUSH
11071: LD_STRING D7a-JMM-3
11073: PPUSH
11074: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
11078: LD_EXP 20
11082: PPUSH
11083: LD_STRING D7a-Corn-3
11085: PPUSH
11086: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
11090: LD_EXP 1
11094: PPUSH
11095: LD_STRING D7a-JMM-4
11097: PPUSH
11098: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
11102: LD_EXP 20
11106: PPUSH
11107: LD_STRING D7a-Corn-4
11109: PPUSH
11110: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
11114: LD_EXP 1
11118: PPUSH
11119: LD_STRING D7a-JMM-5
11121: PPUSH
11122: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
11126: LD_EXP 20
11130: PPUSH
11131: LD_STRING D7a-Corn-5
11133: PPUSH
11134: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
11138: LD_EXP 1
11142: PPUSH
11143: LD_STRING D7a-JMM-6
11145: PPUSH
11146: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
11150: LD_EXP 20
11154: PPUSH
11155: LD_STRING D7a-Corn-6
11157: PPUSH
11158: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
11162: LD_EXP 1
11166: PPUSH
11167: LD_STRING D7a-JMM-7
11169: PPUSH
11170: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
11174: LD_EXP 20
11178: PPUSH
11179: LD_STRING D7a-Corn-7
11181: PPUSH
11182: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
11186: LD_EXP 1
11190: PPUSH
11191: LD_STRING D7a-JMM-8
11193: PPUSH
11194: CALL_OW 88
// DialogueOff ;
11198: CALL_OW 7
// end ;
11202: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
11203: LD_EXP 63
11207: PUSH
11208: LD_EXP 1
11212: PPUSH
11213: CALL_OW 302
11217: PUSH
11218: LD_EXP 5
11222: PPUSH
11223: CALL_OW 302
11227: OR
11228: AND
11229: IFFALSE 11319
11231: GO 11233
11233: DISABLE
// begin Wait ( 0 0$2 ) ;
11234: LD_INT 70
11236: PPUSH
11237: CALL_OW 67
// DialogueOn ;
11241: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
11245: LD_EXP 63
11249: PUSH
11250: LD_INT 1
11252: ARRAY
11253: PPUSH
11254: LD_EXP 63
11258: PUSH
11259: LD_INT 2
11261: ARRAY
11262: PPUSH
11263: CALL_OW 86
// if IsOk ( Cyrus ) then
11267: LD_EXP 5
11271: PPUSH
11272: CALL_OW 302
11276: IFFALSE 11292
// Say ( Cyrus , D10-Cyrus-1 ) else
11278: LD_EXP 5
11282: PPUSH
11283: LD_STRING D10-Cyrus-1
11285: PPUSH
11286: CALL_OW 88
11290: GO 11315
// if IsOk ( JMM ) then
11292: LD_EXP 1
11296: PPUSH
11297: CALL_OW 302
11301: IFFALSE 11315
// Say ( JMM , D10-JMM-1 ) ;
11303: LD_EXP 1
11307: PPUSH
11308: LD_STRING D10-JMM-1
11310: PPUSH
11311: CALL_OW 88
// DialogueOff ;
11315: CALL_OW 7
// end ;
11319: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
11320: LD_INT 12
11322: PPUSH
11323: LD_INT 1
11325: PPUSH
11326: CALL_OW 321
11330: PUSH
11331: LD_INT 2
11333: EQUAL
11334: IFFALSE 11346
11336: GO 11338
11338: DISABLE
// ChangeMissionObjectives ( M2b ) ;
11339: LD_STRING M2b
11341: PPUSH
11342: CALL_OW 337
11346: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
11347: LD_INT 32
11349: PPUSH
11350: LD_INT 1
11352: PPUSH
11353: CALL_OW 321
11357: PUSH
11358: LD_INT 2
11360: EQUAL
11361: IFFALSE 11373
11363: GO 11365
11365: DISABLE
// ChangeMissionObjectives ( M2c ) ;
11366: LD_STRING M2c
11368: PPUSH
11369: CALL_OW 337
11373: END
// every 0 0$1 trigger arabianDefeated = 1 do
11374: LD_EXP 50
11378: PUSH
11379: LD_INT 1
11381: EQUAL
11382: IFFALSE 11394
11384: GO 11386
11386: DISABLE
// ChangeMissionObjectives ( M4a ) ;
11387: LD_STRING M4a
11389: PPUSH
11390: CALL_OW 337
11394: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
11395: LD_INT 54
11397: PPUSH
11398: LD_INT 1
11400: PPUSH
11401: CALL_OW 321
11405: PUSH
11406: LD_INT 2
11408: EQUAL
11409: PUSH
11410: LD_INT 55
11412: PPUSH
11413: LD_INT 1
11415: PPUSH
11416: CALL_OW 321
11420: PUSH
11421: LD_INT 2
11423: EQUAL
11424: AND
11425: PUSH
11426: LD_INT 21
11428: PPUSH
11429: LD_INT 1
11431: PPUSH
11432: CALL_OW 321
11436: PUSH
11437: LD_INT 2
11439: EQUAL
11440: AND
11441: PUSH
11442: LD_INT 22
11444: PPUSH
11445: LD_INT 1
11447: PPUSH
11448: CALL_OW 321
11452: PUSH
11453: LD_INT 2
11455: EQUAL
11456: AND
11457: IFFALSE 11469
11459: GO 11461
11461: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
11462: LD_STRING M2a
11464: PPUSH
11465: CALL_OW 337
11469: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
11470: LD_INT 0
11472: PPUSH
11473: PPUSH
11474: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
11475: LD_ADDR_VAR 0 1
11479: PUSH
11480: LD_VAR 0 1
11484: PUSH
11485: LD_EXP 1
11489: PUSH
11490: LD_EXP 2
11494: PUSH
11495: LD_EXP 3
11499: PUSH
11500: LD_EXP 4
11504: PUSH
11505: LD_EXP 5
11509: PUSH
11510: LD_EXP 6
11514: PUSH
11515: LD_EXP 7
11519: PUSH
11520: LD_EXP 8
11524: PUSH
11525: LD_EXP 9
11529: PUSH
11530: LD_EXP 10
11534: PUSH
11535: LD_EXP 11
11539: PUSH
11540: LD_EXP 12
11544: PUSH
11545: LD_EXP 13
11549: PUSH
11550: LD_EXP 14
11554: PUSH
11555: LD_EXP 15
11559: PUSH
11560: LD_EXP 16
11564: PUSH
11565: LD_EXP 17
11569: PUSH
11570: LD_EXP 18
11574: PUSH
11575: LD_EXP 20
11579: PUSH
11580: LD_EXP 26
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: DIFF
11607: ST_TO_ADDR
// if not characters then
11608: LD_VAR 0 1
11612: NOT
11613: IFFALSE 11617
// exit ;
11615: GO 11763
// rnd = rand ( 1 , characters ) ;
11617: LD_ADDR_VAR 0 6
11621: PUSH
11622: LD_INT 1
11624: PPUSH
11625: LD_VAR 0 1
11629: PPUSH
11630: CALL_OW 12
11634: ST_TO_ADDR
// for i = 1 to characters do
11635: LD_ADDR_VAR 0 5
11639: PUSH
11640: DOUBLE
11641: LD_INT 1
11643: DEC
11644: ST_TO_ADDR
11645: LD_VAR 0 1
11649: PUSH
11650: FOR_TO
11651: IFFALSE 11761
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
11653: LD_VAR 0 5
11657: PUSH
11658: LD_VAR 0 6
11662: EQUAL
11663: PUSH
11664: LD_VAR 0 1
11668: PUSH
11669: LD_VAR 0 5
11673: ARRAY
11674: PPUSH
11675: CALL_OW 258
11679: PUSH
11680: LD_INT 1
11682: EQUAL
11683: AND
11684: IFFALSE 11706
// Say ( characters [ i ] , dialogMID ) ;
11686: LD_VAR 0 1
11690: PUSH
11691: LD_VAR 0 5
11695: ARRAY
11696: PPUSH
11697: LD_VAR 0 2
11701: PPUSH
11702: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
11706: LD_VAR 0 5
11710: PUSH
11711: LD_VAR 0 6
11715: EQUAL
11716: PUSH
11717: LD_VAR 0 1
11721: PUSH
11722: LD_VAR 0 5
11726: ARRAY
11727: PPUSH
11728: CALL_OW 258
11732: PUSH
11733: LD_INT 2
11735: EQUAL
11736: AND
11737: IFFALSE 11759
// Say ( characters [ i ] , dialogFID ) ;
11739: LD_VAR 0 1
11743: PUSH
11744: LD_VAR 0 5
11748: ARRAY
11749: PPUSH
11750: LD_VAR 0 3
11754: PPUSH
11755: CALL_OW 88
// end ;
11759: GO 11650
11761: POP
11762: POP
// end ;
11763: LD_VAR 0 4
11767: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
11768: LD_INT 0
11770: PPUSH
11771: PPUSH
// for i in charactersList do
11772: LD_ADDR_VAR 0 4
11776: PUSH
11777: LD_VAR 0 1
11781: PUSH
11782: FOR_IN
11783: IFFALSE 11801
// SaveCharacters ( i , ident ) ;
11785: LD_VAR 0 4
11789: PPUSH
11790: LD_VAR 0 2
11794: PPUSH
11795: CALL_OW 38
11799: GO 11782
11801: POP
11802: POP
// end ;
11803: LD_VAR 0 3
11807: RET
// export function PrepareDifficulty ; begin
11808: LD_INT 0
11810: PPUSH
// if difficulty = 1 then
11811: LD_OWVAR 67
11815: PUSH
11816: LD_INT 1
11818: EQUAL
11819: IFFALSE 11863
// begin RuSolMinLevel = 3 ;
11821: LD_ADDR_EXP 38
11825: PUSH
11826: LD_INT 3
11828: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
11829: LD_ADDR_EXP 39
11833: PUSH
11834: LD_INT 5
11836: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11837: LD_INT 51
11839: PPUSH
11840: LD_INT 6
11842: PPUSH
11843: LD_INT 2
11845: PPUSH
11846: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11850: LD_INT 51
11852: PPUSH
11853: LD_INT 5
11855: PPUSH
11856: LD_INT 2
11858: PPUSH
11859: CALL_OW 322
// end ; if difficulty = 2 then
11863: LD_OWVAR 67
11867: PUSH
11868: LD_INT 2
11870: EQUAL
11871: IFFALSE 11967
// begin RuSolMinLevel = 5 ;
11873: LD_ADDR_EXP 38
11877: PUSH
11878: LD_INT 5
11880: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
11881: LD_ADDR_EXP 39
11885: PUSH
11886: LD_INT 7
11888: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11889: LD_INT 51
11891: PPUSH
11892: LD_INT 6
11894: PPUSH
11895: LD_INT 2
11897: PPUSH
11898: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11902: LD_INT 57
11904: PPUSH
11905: LD_INT 6
11907: PPUSH
11908: LD_INT 2
11910: PPUSH
11911: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11915: LD_INT 63
11917: PPUSH
11918: LD_INT 6
11920: PPUSH
11921: LD_INT 2
11923: PPUSH
11924: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11928: LD_INT 51
11930: PPUSH
11931: LD_INT 5
11933: PPUSH
11934: LD_INT 2
11936: PPUSH
11937: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
11941: LD_INT 5
11943: PPUSH
11944: LD_INT 2
11946: PPUSH
11947: LD_INT 2
11949: PPUSH
11950: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
11954: LD_INT 5
11956: PPUSH
11957: LD_INT 5
11959: PPUSH
11960: LD_INT 2
11962: PPUSH
11963: CALL_OW 322
// end ; if difficulty >= 3 then
11967: LD_OWVAR 67
11971: PUSH
11972: LD_INT 3
11974: GREATEREQUAL
11975: IFFALSE 12123
// begin RuSolMinLevel = 6 ;
11977: LD_ADDR_EXP 38
11981: PUSH
11982: LD_INT 6
11984: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
11985: LD_ADDR_EXP 39
11989: PUSH
11990: LD_INT 8
11992: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11993: LD_INT 51
11995: PPUSH
11996: LD_INT 6
11998: PPUSH
11999: LD_INT 2
12001: PPUSH
12002: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
12006: LD_INT 57
12008: PPUSH
12009: LD_INT 6
12011: PPUSH
12012: LD_INT 2
12014: PPUSH
12015: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
12019: LD_INT 52
12021: PPUSH
12022: LD_INT 6
12024: PPUSH
12025: LD_INT 2
12027: PPUSH
12028: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
12032: LD_INT 58
12034: PPUSH
12035: LD_INT 6
12037: PPUSH
12038: LD_INT 2
12040: PPUSH
12041: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
12045: LD_INT 63
12047: PPUSH
12048: LD_INT 6
12050: PPUSH
12051: LD_INT 2
12053: PPUSH
12054: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
12058: LD_INT 64
12060: PPUSH
12061: LD_INT 6
12063: PPUSH
12064: LD_INT 2
12066: PPUSH
12067: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
12071: LD_INT 51
12073: PPUSH
12074: LD_INT 5
12076: PPUSH
12077: LD_INT 2
12079: PPUSH
12080: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
12084: LD_INT 52
12086: PPUSH
12087: LD_INT 5
12089: PPUSH
12090: LD_INT 2
12092: PPUSH
12093: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
12097: LD_INT 66
12099: PPUSH
12100: LD_INT 2
12102: PPUSH
12103: LD_INT 2
12105: PPUSH
12106: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
12110: LD_INT 66
12112: PPUSH
12113: LD_INT 5
12115: PPUSH
12116: LD_INT 2
12118: PPUSH
12119: CALL_OW 322
// end ; end ;
12123: LD_VAR 0 1
12127: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
12128: LD_INT 0
12130: PPUSH
12131: PPUSH
12132: PPUSH
12133: PPUSH
12134: PPUSH
12135: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
12136: LD_ADDR_VAR 0 7
12140: PUSH
12141: LD_INT 43
12143: PUSH
12144: LD_INT 68
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PUSH
12151: LD_INT 43
12153: PUSH
12154: LD_INT 79
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: PUSH
12161: LD_INT 99
12163: PUSH
12164: LD_INT 114
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 103
12173: PUSH
12174: LD_INT 114
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: LD_INT 156
12183: PUSH
12184: LD_INT 92
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 152
12193: PUSH
12194: LD_INT 85
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: ST_TO_ADDR
// for i in sources do
12209: LD_ADDR_VAR 0 3
12213: PUSH
12214: LD_VAR 0 7
12218: PUSH
12219: FOR_IN
12220: IFFALSE 12249
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
12222: LD_VAR 0 3
12226: PUSH
12227: LD_INT 1
12229: ARRAY
12230: PPUSH
12231: LD_VAR 0 3
12235: PUSH
12236: LD_INT 2
12238: ARRAY
12239: PPUSH
12240: LD_INT 3
12242: PPUSH
12243: CALL_OW 441
12247: GO 12219
12249: POP
12250: POP
// case position of 1 :
12251: LD_VAR 0 1
12255: PUSH
12256: LD_INT 1
12258: DOUBLE
12259: EQUAL
12260: IFTRUE 12264
12262: GO 12275
12264: POP
// area := westConv ; 2 :
12265: LD_ADDR_VAR 0 6
12269: PUSH
12270: LD_INT 20
12272: ST_TO_ADDR
12273: GO 12314
12275: LD_INT 2
12277: DOUBLE
12278: EQUAL
12279: IFTRUE 12283
12281: GO 12294
12283: POP
// area := midConv ; 3 :
12284: LD_ADDR_VAR 0 6
12288: PUSH
12289: LD_INT 21
12291: ST_TO_ADDR
12292: GO 12314
12294: LD_INT 3
12296: DOUBLE
12297: EQUAL
12298: IFTRUE 12302
12300: GO 12313
12302: POP
// area := eastConv ; end ;
12303: LD_ADDR_VAR 0 6
12307: PUSH
12308: LD_INT 22
12310: ST_TO_ADDR
12311: GO 12314
12313: POP
// area := AreaToList ( area , 0 ) ;
12314: LD_ADDR_VAR 0 6
12318: PUSH
12319: LD_VAR 0 6
12323: PPUSH
12324: LD_INT 0
12326: PPUSH
12327: CALL_OW 517
12331: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
12332: LD_ADDR_VAR 0 3
12336: PUSH
12337: DOUBLE
12338: LD_INT 1
12340: DEC
12341: ST_TO_ADDR
12342: LD_VAR 0 6
12346: PUSH
12347: LD_INT 1
12349: ARRAY
12350: PUSH
12351: FOR_TO
12352: IFFALSE 12433
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
12354: LD_VAR 0 6
12358: PUSH
12359: LD_INT 1
12361: ARRAY
12362: PUSH
12363: LD_VAR 0 3
12367: ARRAY
12368: PPUSH
12369: LD_VAR 0 6
12373: PUSH
12374: LD_INT 2
12376: ARRAY
12377: PUSH
12378: LD_VAR 0 3
12382: ARRAY
12383: PPUSH
12384: LD_INT 1
12386: PPUSH
12387: LD_INT 1
12389: PPUSH
12390: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
12394: LD_VAR 0 6
12398: PUSH
12399: LD_INT 1
12401: ARRAY
12402: PUSH
12403: LD_VAR 0 3
12407: ARRAY
12408: PPUSH
12409: LD_VAR 0 6
12413: PUSH
12414: LD_INT 2
12416: ARRAY
12417: PUSH
12418: LD_VAR 0 3
12422: ARRAY
12423: PPUSH
12424: LD_INT 1
12426: PPUSH
12427: CALL_OW 331
// end ;
12431: GO 12351
12433: POP
12434: POP
// ruPossition = position ;
12435: LD_ADDR_EXP 43
12439: PUSH
12440: LD_VAR 0 1
12444: ST_TO_ADDR
// if position = 1 then
12445: LD_VAR 0 1
12449: PUSH
12450: LD_INT 1
12452: EQUAL
12453: IFFALSE 13201
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12455: LD_ADDR_VAR 0 4
12459: PUSH
12460: LD_INT 22
12462: PUSH
12463: LD_INT 3
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PUSH
12470: LD_INT 25
12472: PUSH
12473: LD_INT 2
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PPUSH
12484: CALL_OW 69
12488: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
12489: LD_ADDR_VAR 0 5
12493: PUSH
12494: LD_INT 0
12496: PUSH
12497: LD_INT 49
12499: PUSH
12500: LD_INT 74
12502: PUSH
12503: LD_INT 3
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: PUSH
12512: LD_INT 4
12514: PUSH
12515: LD_INT 73
12517: PUSH
12518: LD_INT 88
12520: PUSH
12521: LD_INT 5
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 4
12532: PUSH
12533: LD_INT 56
12535: PUSH
12536: LD_INT 62
12538: PUSH
12539: LD_INT 3
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: PUSH
12548: LD_INT 29
12550: PUSH
12551: LD_INT 43
12553: PUSH
12554: LD_INT 68
12556: PUSH
12557: LD_INT 2
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: PUSH
12566: LD_INT 30
12568: PUSH
12569: LD_INT 43
12571: PUSH
12572: LD_INT 79
12574: PUSH
12575: LD_INT 5
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: PUSH
12584: LD_INT 28
12586: PUSH
12587: LD_INT 60
12589: PUSH
12590: LD_INT 75
12592: PUSH
12593: LD_INT 1
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: PUSH
12602: LD_INT 2
12604: PUSH
12605: LD_INT 50
12607: PUSH
12608: LD_INT 87
12610: PUSH
12611: LD_INT 1
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 28
12622: PUSH
12623: LD_INT 45
12625: PUSH
12626: LD_INT 67
12628: PUSH
12629: LD_INT 2
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: PUSH
12638: LD_INT 17
12640: PUSH
12641: LD_INT 47
12643: PUSH
12644: LD_INT 84
12646: PUSH
12647: LD_INT 2
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: PUSH
12656: LD_INT 18
12658: PUSH
12659: LD_INT 46
12661: PUSH
12662: LD_INT 87
12664: PUSH
12665: LD_INT 1
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: PUSH
12674: LD_INT 28
12676: PUSH
12677: LD_INT 41
12679: PUSH
12680: LD_INT 64
12682: PUSH
12683: LD_INT 5
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: PUSH
12692: LD_INT 32
12694: PUSH
12695: LD_INT 75
12697: PUSH
12698: LD_INT 76
12700: PUSH
12701: LD_INT 5
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: PUSH
12710: LD_INT 32
12712: PUSH
12713: LD_INT 77
12715: PUSH
12716: LD_INT 75
12718: PUSH
12719: LD_INT 5
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: PUSH
12728: LD_INT 32
12730: PUSH
12731: LD_INT 69
12733: PUSH
12734: LD_INT 68
12736: PUSH
12737: LD_INT 3
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: PUSH
12746: LD_INT 32
12748: PUSH
12749: LD_INT 59
12751: PUSH
12752: LD_INT 96
12754: PUSH
12755: LD_INT 5
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: PUSH
12764: LD_INT 32
12766: PUSH
12767: LD_INT 56
12769: PUSH
12770: LD_INT 96
12772: PUSH
12773: LD_INT 0
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: PUSH
12782: LD_INT 32
12784: PUSH
12785: LD_INT 51
12787: PUSH
12788: LD_INT 61
12790: PUSH
12791: LD_INT 3
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: PUSH
12800: LD_INT 32
12802: PUSH
12803: LD_INT 42
12805: PUSH
12806: LD_INT 60
12808: PUSH
12809: LD_INT 3
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: PUSH
12818: LD_INT 32
12820: PUSH
12821: LD_INT 36
12823: PUSH
12824: LD_INT 58
12826: PUSH
12827: LD_INT 3
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: PUSH
12836: LD_INT 32
12838: PUSH
12839: LD_INT 39
12841: PUSH
12842: LD_INT 59
12844: PUSH
12845: LD_INT 3
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: PUSH
12854: LD_INT 32
12856: PUSH
12857: LD_INT 61
12859: PUSH
12860: LD_INT 64
12862: PUSH
12863: LD_INT 3
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: PUSH
12872: LD_INT 33
12874: PUSH
12875: LD_INT 63
12877: PUSH
12878: LD_INT 90
12880: PUSH
12881: LD_INT 5
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 33
12892: PUSH
12893: LD_INT 64
12895: PUSH
12896: LD_INT 88
12898: PUSH
12899: LD_INT 5
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 33
12910: PUSH
12911: LD_INT 72
12913: PUSH
12914: LD_INT 82
12916: PUSH
12917: LD_INT 5
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 6
12928: PUSH
12929: LD_INT 42
12931: PUSH
12932: LD_INT 74
12934: PUSH
12935: LD_INT 1
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 6
12946: PUSH
12947: LD_INT 56
12949: PUSH
12950: LD_INT 77
12952: PUSH
12953: LD_INT 2
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 21
12964: PUSH
12965: LD_INT 54
12967: PUSH
12968: LD_INT 91
12970: PUSH
12971: LD_INT 5
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: PUSH
12980: LD_INT 16
12982: PUSH
12983: LD_INT 50
12985: PUSH
12986: LD_INT 83
12988: PUSH
12989: LD_INT 3
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 24
13000: PUSH
13001: LD_INT 50
13003: PUSH
13004: LD_INT 90
13006: PUSH
13007: LD_INT 0
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13047: LD_ADDR_VAR 0 3
13051: PUSH
13052: LD_INT 22
13054: PUSH
13055: LD_INT 3
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: PUSH
13062: LD_INT 3
13064: PUSH
13065: LD_INT 25
13067: PUSH
13068: LD_INT 2
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PPUSH
13083: CALL_OW 69
13087: PUSH
13088: FOR_IN
13089: IFFALSE 13108
// AddComAgressiveMove ( i , 53 , 82 ) ;
13091: LD_VAR 0 3
13095: PPUSH
13096: LD_INT 53
13098: PPUSH
13099: LD_INT 82
13101: PPUSH
13102: CALL_OW 174
13106: GO 13088
13108: POP
13109: POP
// for i := 1 to buildingsTab do
13110: LD_ADDR_VAR 0 3
13114: PUSH
13115: DOUBLE
13116: LD_INT 1
13118: DEC
13119: ST_TO_ADDR
13120: LD_VAR 0 5
13124: PUSH
13125: FOR_TO
13126: IFFALSE 13199
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13128: LD_VAR 0 4
13132: PPUSH
13133: LD_VAR 0 5
13137: PUSH
13138: LD_VAR 0 3
13142: ARRAY
13143: PUSH
13144: LD_INT 1
13146: ARRAY
13147: PPUSH
13148: LD_VAR 0 5
13152: PUSH
13153: LD_VAR 0 3
13157: ARRAY
13158: PUSH
13159: LD_INT 2
13161: ARRAY
13162: PPUSH
13163: LD_VAR 0 5
13167: PUSH
13168: LD_VAR 0 3
13172: ARRAY
13173: PUSH
13174: LD_INT 3
13176: ARRAY
13177: PPUSH
13178: LD_VAR 0 5
13182: PUSH
13183: LD_VAR 0 3
13187: ARRAY
13188: PUSH
13189: LD_INT 4
13191: ARRAY
13192: PPUSH
13193: CALL_OW 205
13197: GO 13125
13199: POP
13200: POP
// end ; if position = 2 then
13201: LD_VAR 0 1
13205: PUSH
13206: LD_INT 2
13208: EQUAL
13209: IFFALSE 13824
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13211: LD_ADDR_VAR 0 4
13215: PUSH
13216: LD_INT 22
13218: PUSH
13219: LD_INT 3
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PUSH
13226: LD_INT 25
13228: PUSH
13229: LD_INT 2
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PPUSH
13240: CALL_OW 69
13244: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
13245: LD_ADDR_VAR 0 5
13249: PUSH
13250: LD_INT 0
13252: PUSH
13253: LD_INT 104
13255: PUSH
13256: LD_INT 110
13258: PUSH
13259: LD_INT 5
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 4
13270: PUSH
13271: LD_INT 98
13273: PUSH
13274: LD_INT 90
13276: PUSH
13277: LD_INT 3
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: PUSH
13286: LD_INT 29
13288: PUSH
13289: LD_INT 103
13291: PUSH
13292: LD_INT 114
13294: PUSH
13295: LD_INT 2
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: PUSH
13304: LD_INT 30
13306: PUSH
13307: LD_INT 99
13309: PUSH
13310: LD_INT 114
13312: PUSH
13313: LD_INT 3
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 28
13324: PUSH
13325: LD_INT 100
13327: PUSH
13328: LD_INT 112
13330: PUSH
13331: LD_INT 1
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: PUSH
13340: LD_INT 2
13342: PUSH
13343: LD_INT 92
13345: PUSH
13346: LD_INT 101
13348: PUSH
13349: LD_INT 0
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: PUSH
13358: LD_INT 28
13360: PUSH
13361: LD_INT 97
13363: PUSH
13364: LD_INT 116
13366: PUSH
13367: LD_INT 5
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 17
13378: PUSH
13379: LD_INT 96
13381: PUSH
13382: LD_INT 101
13384: PUSH
13385: LD_INT 4
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 18
13396: PUSH
13397: LD_INT 88
13399: PUSH
13400: LD_INT 97
13402: PUSH
13403: LD_INT 2
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 28
13414: PUSH
13415: LD_INT 106
13417: PUSH
13418: LD_INT 92
13420: PUSH
13421: LD_INT 2
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 32
13432: PUSH
13433: LD_INT 88
13435: PUSH
13436: LD_INT 89
13438: PUSH
13439: LD_INT 2
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 32
13450: PUSH
13451: LD_INT 86
13453: PUSH
13454: LD_INT 90
13456: PUSH
13457: LD_INT 2
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 32
13468: PUSH
13469: LD_INT 85
13471: PUSH
13472: LD_INT 99
13474: PUSH
13475: LD_INT 2
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 32
13486: PUSH
13487: LD_INT 85
13489: PUSH
13490: LD_INT 107
13492: PUSH
13493: LD_INT 1
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: PUSH
13502: LD_INT 33
13504: PUSH
13505: LD_INT 105
13507: PUSH
13508: LD_INT 99
13510: PUSH
13511: LD_INT 1
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 33
13522: PUSH
13523: LD_INT 102
13525: PUSH
13526: LD_INT 92
13528: PUSH
13529: LD_INT 3
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 33
13540: PUSH
13541: LD_INT 105
13543: PUSH
13544: LD_INT 92
13546: PUSH
13547: LD_INT 2
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: PUSH
13556: LD_INT 6
13558: PUSH
13559: LD_INT 92
13561: PUSH
13562: LD_INT 110
13564: PUSH
13565: LD_INT 0
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 6
13576: PUSH
13577: LD_INT 103
13579: PUSH
13580: LD_INT 103
13582: PUSH
13583: LD_INT 5
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: PUSH
13592: LD_INT 21
13594: PUSH
13595: LD_INT 89
13597: PUSH
13598: LD_INT 101
13600: PUSH
13601: LD_INT 1
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: PUSH
13610: LD_INT 16
13612: PUSH
13613: LD_INT 95
13615: PUSH
13616: LD_INT 104
13618: PUSH
13619: LD_INT 4
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: PUSH
13628: LD_INT 24
13630: PUSH
13631: LD_INT 92
13633: PUSH
13634: LD_INT 105
13636: PUSH
13637: LD_INT 0
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13670: LD_ADDR_VAR 0 3
13674: PUSH
13675: LD_INT 22
13677: PUSH
13678: LD_INT 3
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: LD_INT 3
13687: PUSH
13688: LD_INT 25
13690: PUSH
13691: LD_INT 2
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: PPUSH
13706: CALL_OW 69
13710: PUSH
13711: FOR_IN
13712: IFFALSE 13731
// AddComAgressiveMove ( i , 96 , 99 ) ;
13714: LD_VAR 0 3
13718: PPUSH
13719: LD_INT 96
13721: PPUSH
13722: LD_INT 99
13724: PPUSH
13725: CALL_OW 174
13729: GO 13711
13731: POP
13732: POP
// for i := 1 to buildingsTab do
13733: LD_ADDR_VAR 0 3
13737: PUSH
13738: DOUBLE
13739: LD_INT 1
13741: DEC
13742: ST_TO_ADDR
13743: LD_VAR 0 5
13747: PUSH
13748: FOR_TO
13749: IFFALSE 13822
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13751: LD_VAR 0 4
13755: PPUSH
13756: LD_VAR 0 5
13760: PUSH
13761: LD_VAR 0 3
13765: ARRAY
13766: PUSH
13767: LD_INT 1
13769: ARRAY
13770: PPUSH
13771: LD_VAR 0 5
13775: PUSH
13776: LD_VAR 0 3
13780: ARRAY
13781: PUSH
13782: LD_INT 2
13784: ARRAY
13785: PPUSH
13786: LD_VAR 0 5
13790: PUSH
13791: LD_VAR 0 3
13795: ARRAY
13796: PUSH
13797: LD_INT 3
13799: ARRAY
13800: PPUSH
13801: LD_VAR 0 5
13805: PUSH
13806: LD_VAR 0 3
13810: ARRAY
13811: PUSH
13812: LD_INT 4
13814: ARRAY
13815: PPUSH
13816: CALL_OW 205
13820: GO 13748
13822: POP
13823: POP
// end ; if position = 3 then
13824: LD_VAR 0 1
13828: PUSH
13829: LD_INT 3
13831: EQUAL
13832: IFFALSE 14618
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13834: LD_ADDR_VAR 0 4
13838: PUSH
13839: LD_INT 22
13841: PUSH
13842: LD_INT 3
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PUSH
13849: LD_INT 25
13851: PUSH
13852: LD_INT 2
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: PPUSH
13863: CALL_OW 69
13867: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
13868: LD_ADDR_VAR 0 5
13872: PUSH
13873: LD_INT 0
13875: PUSH
13876: LD_INT 151
13878: PUSH
13879: LD_INT 71
13881: PUSH
13882: LD_INT 4
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 4
13893: PUSH
13894: LD_INT 145
13896: PUSH
13897: LD_INT 53
13899: PUSH
13900: LD_INT 3
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: PUSH
13909: LD_INT 4
13911: PUSH
13912: LD_INT 172
13914: PUSH
13915: LD_INT 102
13917: PUSH
13918: LD_INT 5
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: PUSH
13927: LD_INT 29
13929: PUSH
13930: LD_INT 152
13932: PUSH
13933: LD_INT 85
13935: PUSH
13936: LD_INT 3
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: PUSH
13945: LD_INT 30
13947: PUSH
13948: LD_INT 156
13950: PUSH
13951: LD_INT 92
13953: PUSH
13954: LD_INT 3
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: PUSH
13963: LD_INT 28
13965: PUSH
13966: LD_INT 151
13968: PUSH
13969: LD_INT 66
13971: PUSH
13972: LD_INT 4
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: PUSH
13981: LD_INT 2
13983: PUSH
13984: LD_INT 163
13986: PUSH
13987: LD_INT 95
13989: PUSH
13990: LD_INT 5
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 28
14001: PUSH
14002: LD_INT 149
14004: PUSH
14005: LD_INT 63
14007: PUSH
14008: LD_INT 4
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: PUSH
14017: LD_INT 17
14019: PUSH
14020: LD_INT 167
14022: PUSH
14023: LD_INT 99
14025: PUSH
14026: LD_INT 5
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: PUSH
14035: LD_INT 18
14037: PUSH
14038: LD_INT 163
14040: PUSH
14041: LD_INT 98
14043: PUSH
14044: LD_INT 0
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: PUSH
14053: LD_INT 28
14055: PUSH
14056: LD_INT 154
14058: PUSH
14059: LD_INT 70
14061: PUSH
14062: LD_INT 4
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: PUSH
14071: LD_INT 32
14073: PUSH
14074: LD_INT 155
14076: PUSH
14077: LD_INT 62
14079: PUSH
14080: LD_INT 4
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: PUSH
14089: LD_INT 32
14091: PUSH
14092: LD_INT 161
14094: PUSH
14095: LD_INT 69
14097: PUSH
14098: LD_INT 4
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: PUSH
14107: LD_INT 32
14109: PUSH
14110: LD_INT 168
14112: PUSH
14113: LD_INT 78
14115: PUSH
14116: LD_INT 4
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: PUSH
14125: LD_INT 32
14127: PUSH
14128: LD_INT 163
14130: PUSH
14131: LD_INT 80
14133: PUSH
14134: LD_INT 5
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: PUSH
14143: LD_INT 32
14145: PUSH
14146: LD_INT 136
14148: PUSH
14149: LD_INT 73
14151: PUSH
14152: LD_INT 0
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: PUSH
14161: LD_INT 32
14163: PUSH
14164: LD_INT 157
14166: PUSH
14167: LD_INT 98
14169: PUSH
14170: LD_INT 0
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: PUSH
14179: LD_INT 32
14181: PUSH
14182: LD_INT 150
14184: PUSH
14185: LD_INT 87
14187: PUSH
14188: LD_INT 1
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 33
14199: PUSH
14200: LD_INT 171
14202: PUSH
14203: LD_INT 97
14205: PUSH
14206: LD_INT 4
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 33
14217: PUSH
14218: LD_INT 168
14220: PUSH
14221: LD_INT 92
14223: PUSH
14224: LD_INT 4
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: PUSH
14233: LD_INT 33
14235: PUSH
14236: LD_INT 166
14238: PUSH
14239: LD_INT 80
14241: PUSH
14242: LD_INT 5
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: PUSH
14251: LD_INT 33
14253: PUSH
14254: LD_INT 141
14256: PUSH
14257: LD_INT 54
14259: PUSH
14260: LD_INT 2
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: PUSH
14269: LD_INT 33
14271: PUSH
14272: LD_INT 133
14274: PUSH
14275: LD_INT 57
14277: PUSH
14278: LD_INT 2
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: PUSH
14287: LD_INT 33
14289: PUSH
14290: LD_INT 132
14292: PUSH
14293: LD_INT 61
14295: PUSH
14296: LD_INT 2
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: PUSH
14305: LD_INT 33
14307: PUSH
14308: LD_INT 150
14310: PUSH
14311: LD_INT 82
14313: PUSH
14314: LD_INT 0
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: PUSH
14323: LD_INT 33
14325: PUSH
14326: LD_INT 132
14328: PUSH
14329: LD_INT 72
14331: PUSH
14332: LD_INT 0
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: PUSH
14341: LD_INT 6
14343: PUSH
14344: LD_INT 146
14346: PUSH
14347: LD_INT 64
14349: PUSH
14350: LD_INT 4
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: PUSH
14359: LD_INT 6
14361: PUSH
14362: LD_INT 159
14364: PUSH
14365: LD_INT 85
14367: PUSH
14368: LD_INT 4
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: PUSH
14377: LD_INT 21
14379: PUSH
14380: LD_INT 163
14382: PUSH
14383: LD_INT 91
14385: PUSH
14386: LD_INT 3
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 16
14397: PUSH
14398: LD_INT 166
14400: PUSH
14401: LD_INT 95
14403: PUSH
14404: LD_INT 4
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: PUSH
14413: LD_INT 24
14415: PUSH
14416: LD_INT 159
14418: PUSH
14419: LD_INT 95
14421: PUSH
14422: LD_INT 1
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
14464: LD_ADDR_VAR 0 3
14468: PUSH
14469: LD_INT 22
14471: PUSH
14472: LD_INT 3
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: PUSH
14479: LD_INT 3
14481: PUSH
14482: LD_INT 25
14484: PUSH
14485: LD_INT 2
14487: PUSH
14488: EMPTY
14489: LIST
14490: LIST
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: PPUSH
14500: CALL_OW 69
14504: PUSH
14505: FOR_IN
14506: IFFALSE 14525
// AddComAgressiveMove ( i , 141 , 65 ) ;
14508: LD_VAR 0 3
14512: PPUSH
14513: LD_INT 141
14515: PPUSH
14516: LD_INT 65
14518: PPUSH
14519: CALL_OW 174
14523: GO 14505
14525: POP
14526: POP
// for i := 1 to buildingsTab do
14527: LD_ADDR_VAR 0 3
14531: PUSH
14532: DOUBLE
14533: LD_INT 1
14535: DEC
14536: ST_TO_ADDR
14537: LD_VAR 0 5
14541: PUSH
14542: FOR_TO
14543: IFFALSE 14616
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
14545: LD_VAR 0 4
14549: PPUSH
14550: LD_VAR 0 5
14554: PUSH
14555: LD_VAR 0 3
14559: ARRAY
14560: PUSH
14561: LD_INT 1
14563: ARRAY
14564: PPUSH
14565: LD_VAR 0 5
14569: PUSH
14570: LD_VAR 0 3
14574: ARRAY
14575: PUSH
14576: LD_INT 2
14578: ARRAY
14579: PPUSH
14580: LD_VAR 0 5
14584: PUSH
14585: LD_VAR 0 3
14589: ARRAY
14590: PUSH
14591: LD_INT 3
14593: ARRAY
14594: PPUSH
14595: LD_VAR 0 5
14599: PUSH
14600: LD_VAR 0 3
14604: ARRAY
14605: PUSH
14606: LD_INT 4
14608: ARRAY
14609: PPUSH
14610: CALL_OW 205
14614: GO 14542
14616: POP
14617: POP
// end ; end ;
14618: LD_VAR 0 2
14622: RET
// export arBuildingsTab ; export function BuildArabianBase ; var i , engineers ; begin
14623: LD_INT 0
14625: PPUSH
14626: PPUSH
14627: PPUSH
// arBuildingsTab = [ [ b_depot , 71 , 15 , 3 ] , [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 72 , 24 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
14628: LD_ADDR_EXP 70
14632: PUSH
14633: LD_INT 0
14635: PUSH
14636: LD_INT 71
14638: PUSH
14639: LD_INT 15
14641: PUSH
14642: LD_INT 3
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: PUSH
14651: LD_INT 6
14653: PUSH
14654: LD_INT 77
14656: PUSH
14657: LD_INT 18
14659: PUSH
14660: LD_INT 3
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: PUSH
14669: LD_INT 4
14671: PUSH
14672: LD_INT 77
14674: PUSH
14675: LD_INT 26
14677: PUSH
14678: LD_INT 0
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: PUSH
14687: LD_INT 31
14689: PUSH
14690: LD_INT 72
14692: PUSH
14693: LD_INT 24
14695: PUSH
14696: LD_INT 0
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: PUSH
14705: LD_INT 31
14707: PUSH
14708: LD_INT 82
14710: PUSH
14711: LD_INT 28
14713: PUSH
14714: LD_INT 0
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: PUSH
14723: LD_INT 31
14725: PUSH
14726: LD_INT 84
14728: PUSH
14729: LD_INT 21
14731: PUSH
14732: LD_INT 3
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 31
14743: PUSH
14744: LD_INT 66
14746: PUSH
14747: LD_INT 14
14749: PUSH
14750: LD_INT 2
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 27
14761: PUSH
14762: LD_INT 67
14764: PUSH
14765: LD_INT 18
14767: PUSH
14768: LD_INT 5
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: PUSH
14777: LD_INT 27
14779: PUSH
14780: LD_INT 69
14782: PUSH
14783: LD_INT 23
14785: PUSH
14786: LD_INT 2
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: ST_TO_ADDR
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
14806: LD_ADDR_VAR 0 3
14810: PUSH
14811: LD_INT 22
14813: PUSH
14814: LD_INT 2
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: PUSH
14821: LD_INT 25
14823: PUSH
14824: LD_INT 2
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PPUSH
14835: CALL_OW 69
14839: ST_TO_ADDR
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
14840: LD_VAR 0 3
14844: PPUSH
14845: LD_EXP 70
14849: PUSH
14850: LD_INT 1
14852: ARRAY
14853: PUSH
14854: LD_INT 1
14856: ARRAY
14857: PPUSH
14858: LD_EXP 70
14862: PUSH
14863: LD_INT 1
14865: ARRAY
14866: PUSH
14867: LD_INT 2
14869: ARRAY
14870: PPUSH
14871: LD_EXP 70
14875: PUSH
14876: LD_INT 1
14878: ARRAY
14879: PUSH
14880: LD_INT 3
14882: ARRAY
14883: PPUSH
14884: LD_EXP 70
14888: PUSH
14889: LD_INT 1
14891: ARRAY
14892: PUSH
14893: LD_INT 4
14895: ARRAY
14896: PPUSH
14897: CALL_OW 205
// end ;
14901: LD_VAR 0 1
14905: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
14906: LD_INT 0
14908: PPUSH
14909: PPUSH
14910: PPUSH
14911: PPUSH
14912: PPUSH
14913: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14914: LD_ADDR_VAR 0 7
14918: PUSH
14919: LD_INT 22
14921: PUSH
14922: LD_VAR 0 1
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PUSH
14931: LD_INT 25
14933: PUSH
14934: LD_INT 9
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PPUSH
14945: CALL_OW 69
14949: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14950: LD_ADDR_VAR 0 8
14954: PUSH
14955: LD_INT 22
14957: PUSH
14958: LD_VAR 0 2
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: LD_INT 3
14969: PUSH
14970: LD_INT 21
14972: PUSH
14973: LD_INT 3
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PPUSH
14988: CALL_OW 69
14992: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14993: LD_ADDR_VAR 0 5
14997: PUSH
14998: LD_INT 1
15000: PPUSH
15001: LD_INT 3
15003: PPUSH
15004: CALL_OW 12
15008: ST_TO_ADDR
// for i = 1 to list do
15009: LD_ADDR_VAR 0 6
15013: PUSH
15014: DOUBLE
15015: LD_INT 1
15017: DEC
15018: ST_TO_ADDR
15019: LD_VAR 0 7
15023: PUSH
15024: FOR_TO
15025: IFFALSE 16015
// for ta in filter do
15027: LD_ADDR_VAR 0 4
15031: PUSH
15032: LD_VAR 0 8
15036: PUSH
15037: FOR_IN
15038: IFFALSE 16011
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
15040: LD_VAR 0 7
15044: PUSH
15045: LD_VAR 0 6
15049: ARRAY
15050: PPUSH
15051: LD_VAR 0 4
15055: PPUSH
15056: CALL_OW 296
15060: PUSH
15061: LD_INT 15
15063: LESSEQUAL
15064: IFFALSE 16009
// begin case c of 1 :
15066: LD_VAR 0 5
15070: PUSH
15071: LD_INT 1
15073: DOUBLE
15074: EQUAL
15075: IFTRUE 15079
15077: GO 15511
15079: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
15080: LD_VAR 0 7
15084: PUSH
15085: LD_VAR 0 6
15089: ARRAY
15090: PPUSH
15091: LD_VAR 0 4
15095: PPUSH
15096: CALL_OW 250
15100: PPUSH
15101: LD_VAR 0 4
15105: PPUSH
15106: CALL_OW 251
15110: PPUSH
15111: CALL_OW 154
// if eventVar2 = 0 then
15115: LD_EXP 68
15119: PUSH
15120: LD_INT 0
15122: EQUAL
15123: IFFALSE 15509
// begin eventVar2 = 1 ;
15125: LD_ADDR_EXP 68
15129: PUSH
15130: LD_INT 1
15132: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15133: LD_INT 245
15135: PPUSH
15136: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15140: LD_VAR 0 4
15144: PPUSH
15145: CALL_OW 250
15149: PPUSH
15150: LD_VAR 0 4
15154: PPUSH
15155: CALL_OW 251
15159: PPUSH
15160: CALL_OW 84
// DialogueOn ;
15164: CALL_OW 6
// if IsOK ( Cyrus ) then
15168: LD_EXP 5
15172: PPUSH
15173: CALL_OW 302
15177: IFFALSE 15193
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15179: LD_EXP 5
15183: PPUSH
15184: LD_STRING D9a-Cyrus-1
15186: PPUSH
15187: CALL_OW 88
// end else
15191: GO 15315
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15193: LD_INT 22
15195: PUSH
15196: LD_INT 1
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PUSH
15203: LD_INT 26
15205: PUSH
15206: LD_INT 1
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: LD_INT 2
15215: PUSH
15216: LD_INT 25
15218: PUSH
15219: LD_INT 1
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PUSH
15226: LD_INT 25
15228: PUSH
15229: LD_INT 2
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: PUSH
15236: LD_INT 25
15238: PUSH
15239: LD_INT 3
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: PUSH
15246: LD_INT 25
15248: PUSH
15249: LD_INT 4
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: PUSH
15256: LD_INT 25
15258: PUSH
15259: LD_INT 5
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: LIST
15278: PPUSH
15279: CALL_OW 69
15283: PUSH
15284: LD_EXP 1
15288: PUSH
15289: LD_EXP 14
15293: PUSH
15294: LD_EXP 5
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: LIST
15303: DIFF
15304: PPUSH
15305: LD_STRING D9a-Sol1-1
15307: PPUSH
15308: LD_STRING D9a-Sol1-1
15310: PPUSH
15311: CALL 11470 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15315: LD_INT 22
15317: PUSH
15318: LD_INT 1
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: LD_INT 26
15327: PUSH
15328: LD_INT 1
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: PUSH
15335: LD_INT 2
15337: PUSH
15338: LD_INT 25
15340: PUSH
15341: LD_INT 1
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: LD_INT 25
15350: PUSH
15351: LD_INT 2
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: LD_INT 25
15360: PUSH
15361: LD_INT 3
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PUSH
15368: LD_INT 25
15370: PUSH
15371: LD_INT 4
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: LD_INT 25
15380: PUSH
15381: LD_INT 5
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: LIST
15400: PPUSH
15401: CALL_OW 69
15405: PUSH
15406: LD_EXP 1
15410: PUSH
15411: LD_EXP 14
15415: PUSH
15416: LD_EXP 5
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: LIST
15425: DIFF
15426: PPUSH
15427: LD_STRING D9b-Sol1-1
15429: PPUSH
15430: LD_STRING D9b-Sol1-1
15432: PPUSH
15433: CALL 11470 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15437: LD_STRING 09_arInfo
15439: PPUSH
15440: LD_INT 0
15442: PPUSH
15443: CALL_OW 30
15447: PUSH
15448: LD_INT 1
15450: EQUAL
15451: IFFALSE 15465
// Say ( JMM , D9a-JMM-1 ) ;
15453: LD_EXP 1
15457: PPUSH
15458: LD_STRING D9a-JMM-1
15460: PPUSH
15461: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15465: LD_EXP 1
15469: PPUSH
15470: LD_STRING D9c-JMM-1
15472: PPUSH
15473: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15477: LD_INT 12
15479: PPUSH
15480: LD_INT 1
15482: PPUSH
15483: CALL_OW 321
15487: PUSH
15488: LD_INT 2
15490: EQUAL
15491: IFFALSE 15505
// Say ( JMM , D9c-JMM-1a ) ;
15493: LD_EXP 1
15497: PPUSH
15498: LD_STRING D9c-JMM-1a
15500: PPUSH
15501: CALL_OW 88
// DialogueOff ;
15505: CALL_OW 7
// end ; end ; 2 :
15509: GO 16009
15511: LD_INT 2
15513: DOUBLE
15514: EQUAL
15515: IFTRUE 15519
15517: GO 15977
15519: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
15520: LD_VAR 0 7
15524: PUSH
15525: LD_VAR 0 6
15529: ARRAY
15530: PPUSH
15531: LD_VAR 0 4
15535: PPUSH
15536: CALL_OW 250
15540: PUSH
15541: LD_INT 1
15543: NEG
15544: PPUSH
15545: LD_INT 1
15547: PPUSH
15548: CALL_OW 12
15552: PLUS
15553: PPUSH
15554: LD_VAR 0 4
15558: PPUSH
15559: CALL_OW 251
15563: PUSH
15564: LD_INT 1
15566: NEG
15567: PPUSH
15568: LD_INT 1
15570: PPUSH
15571: CALL_OW 12
15575: PLUS
15576: PPUSH
15577: CALL_OW 153
// if eventVar2 = 0 then
15581: LD_EXP 68
15585: PUSH
15586: LD_INT 0
15588: EQUAL
15589: IFFALSE 15975
// begin eventVar2 = 1 ;
15591: LD_ADDR_EXP 68
15595: PUSH
15596: LD_INT 1
15598: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15599: LD_INT 245
15601: PPUSH
15602: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15606: LD_VAR 0 4
15610: PPUSH
15611: CALL_OW 250
15615: PPUSH
15616: LD_VAR 0 4
15620: PPUSH
15621: CALL_OW 251
15625: PPUSH
15626: CALL_OW 84
// DialogueOn ;
15630: CALL_OW 6
// if IsOK ( Cyrus ) then
15634: LD_EXP 5
15638: PPUSH
15639: CALL_OW 302
15643: IFFALSE 15659
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15645: LD_EXP 5
15649: PPUSH
15650: LD_STRING D9a-Cyrus-1
15652: PPUSH
15653: CALL_OW 88
// end else
15657: GO 15781
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15659: LD_INT 22
15661: PUSH
15662: LD_INT 1
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 26
15671: PUSH
15672: LD_INT 1
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: LD_INT 2
15681: PUSH
15682: LD_INT 25
15684: PUSH
15685: LD_INT 1
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: LD_INT 25
15694: PUSH
15695: LD_INT 2
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: LD_INT 25
15704: PUSH
15705: LD_INT 3
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: PUSH
15712: LD_INT 25
15714: PUSH
15715: LD_INT 4
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: LD_INT 25
15724: PUSH
15725: LD_INT 5
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: LIST
15744: PPUSH
15745: CALL_OW 69
15749: PUSH
15750: LD_EXP 1
15754: PUSH
15755: LD_EXP 14
15759: PUSH
15760: LD_EXP 5
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: LIST
15769: DIFF
15770: PPUSH
15771: LD_STRING D9a-Sol1-1
15773: PPUSH
15774: LD_STRING D9a-Sol1-1
15776: PPUSH
15777: CALL 11470 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15781: LD_INT 22
15783: PUSH
15784: LD_INT 1
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 26
15793: PUSH
15794: LD_INT 1
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 2
15803: PUSH
15804: LD_INT 25
15806: PUSH
15807: LD_INT 1
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: LD_INT 25
15816: PUSH
15817: LD_INT 2
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: LD_INT 25
15826: PUSH
15827: LD_INT 3
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: LD_INT 25
15836: PUSH
15837: LD_INT 4
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 25
15846: PUSH
15847: LD_INT 5
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: LIST
15866: PPUSH
15867: CALL_OW 69
15871: PUSH
15872: LD_EXP 1
15876: PUSH
15877: LD_EXP 14
15881: PUSH
15882: LD_EXP 5
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: LIST
15891: DIFF
15892: PPUSH
15893: LD_STRING D9b-Sol1-1
15895: PPUSH
15896: LD_STRING D9b-Sol1-1
15898: PPUSH
15899: CALL 11470 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15903: LD_STRING 09_arInfo
15905: PPUSH
15906: LD_INT 0
15908: PPUSH
15909: CALL_OW 30
15913: PUSH
15914: LD_INT 1
15916: EQUAL
15917: IFFALSE 15931
// Say ( JMM , D9a-JMM-1 ) ;
15919: LD_EXP 1
15923: PPUSH
15924: LD_STRING D9a-JMM-1
15926: PPUSH
15927: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15931: LD_EXP 1
15935: PPUSH
15936: LD_STRING D9c-JMM-1
15938: PPUSH
15939: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15943: LD_INT 12
15945: PPUSH
15946: LD_INT 1
15948: PPUSH
15949: CALL_OW 321
15953: PUSH
15954: LD_INT 2
15956: EQUAL
15957: IFFALSE 15971
// Say ( JMM , D9c-JMM-1a ) ;
15959: LD_EXP 1
15963: PPUSH
15964: LD_STRING D9c-JMM-1a
15966: PPUSH
15967: CALL_OW 88
// DialogueOff ;
15971: CALL_OW 7
// end ; end ; 3 :
15975: GO 16009
15977: LD_INT 3
15979: DOUBLE
15980: EQUAL
15981: IFTRUE 15985
15983: GO 16008
15985: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15986: LD_VAR 0 7
15990: PUSH
15991: LD_VAR 0 6
15995: ARRAY
15996: PPUSH
15997: LD_VAR 0 4
16001: PPUSH
16002: CALL_OW 115
16006: GO 16009
16008: POP
// end ; end ;
16009: GO 15037
16011: POP
16012: POP
16013: GO 15024
16015: POP
16016: POP
// end ;
16017: LD_VAR 0 3
16021: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
16022: LD_INT 0
16024: PPUSH
16025: PPUSH
16026: PPUSH
16027: PPUSH
// for i = 1 to 72 do
16028: LD_ADDR_VAR 0 5
16032: PUSH
16033: DOUBLE
16034: LD_INT 1
16036: DEC
16037: ST_TO_ADDR
16038: LD_INT 72
16040: PUSH
16041: FOR_TO
16042: IFFALSE 16100
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
16044: LD_VAR 0 5
16048: PPUSH
16049: LD_VAR 0 1
16053: PPUSH
16054: CALL_OW 321
16058: PUSH
16059: LD_INT 1
16061: EQUAL
16062: PUSH
16063: LD_VAR 0 5
16067: PPUSH
16068: LD_VAR 0 3
16072: PPUSH
16073: CALL_OW 482
16077: PUSH
16078: LD_INT 1
16080: EQUAL
16081: AND
16082: IFFALSE 16098
// AddComResearch ( lab , i ) ;
16084: LD_VAR 0 2
16088: PPUSH
16089: LD_VAR 0 5
16093: PPUSH
16094: CALL_OW 184
16098: GO 16041
16100: POP
16101: POP
// end ;
16102: LD_VAR 0 4
16106: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
16107: LD_INT 0
16109: PPUSH
16110: PPUSH
16111: PPUSH
16112: PPUSH
16113: PPUSH
16114: PPUSH
16115: PPUSH
16116: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
16117: LD_ADDR_VAR 0 6
16121: PUSH
16122: LD_INT 22
16124: PUSH
16125: LD_VAR 0 1
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 56
16136: PUSH
16137: EMPTY
16138: LIST
16139: PUSH
16140: LD_INT 24
16142: PUSH
16143: LD_INT 700
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: LD_INT 3
16152: PUSH
16153: LD_INT 60
16155: PUSH
16156: EMPTY
16157: LIST
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PUSH
16163: LD_INT 2
16165: PUSH
16166: LD_INT 25
16168: PUSH
16169: LD_INT 1
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: PUSH
16176: LD_INT 25
16178: PUSH
16179: LD_INT 9
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: LIST
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: PPUSH
16198: CALL_OW 69
16202: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
16203: LD_ADDR_VAR 0 7
16207: PUSH
16208: LD_INT 22
16210: PUSH
16211: LD_VAR 0 1
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 30
16222: PUSH
16223: LD_INT 32
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 58
16232: PUSH
16233: EMPTY
16234: LIST
16235: PUSH
16236: LD_INT 24
16238: PUSH
16239: LD_INT 251
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: PPUSH
16252: CALL_OW 69
16256: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
16257: LD_ADDR_VAR 0 9
16261: PUSH
16262: LD_INT 22
16264: PUSH
16265: LD_VAR 0 1
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PUSH
16274: LD_INT 2
16276: PUSH
16277: LD_INT 30
16279: PUSH
16280: LD_INT 4
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: PUSH
16287: LD_INT 30
16289: PUSH
16290: LD_INT 5
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 24
16304: PUSH
16305: LD_INT 251
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: LIST
16316: PPUSH
16317: CALL_OW 69
16321: ST_TO_ADDR
// if barrackList > 0 then
16322: LD_VAR 0 9
16326: PUSH
16327: LD_INT 0
16329: GREATER
16330: IFFALSE 16465
// begin if turretList = 0 then
16332: LD_VAR 0 7
16336: PUSH
16337: LD_INT 0
16339: EQUAL
16340: IFFALSE 16389
// begin for i in soldiers_list do
16342: LD_ADDR_VAR 0 4
16346: PUSH
16347: LD_VAR 0 6
16351: PUSH
16352: FOR_IN
16353: IFFALSE 16385
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
16355: LD_VAR 0 4
16359: PPUSH
16360: LD_VAR 0 9
16364: PUSH
16365: LD_INT 1
16367: PPUSH
16368: LD_VAR 0 9
16372: PPUSH
16373: CALL_OW 12
16377: ARRAY
16378: PPUSH
16379: CALL_OW 120
16383: GO 16352
16385: POP
16386: POP
// end else
16387: GO 16465
// begin for i in barrackList do
16389: LD_ADDR_VAR 0 4
16393: PUSH
16394: LD_VAR 0 9
16398: PUSH
16399: FOR_IN
16400: IFFALSE 16463
// begin insideUnits = UnitsInside ( i ) ;
16402: LD_ADDR_VAR 0 10
16406: PUSH
16407: LD_VAR 0 4
16411: PPUSH
16412: CALL_OW 313
16416: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
16417: LD_VAR 0 10
16421: PUSH
16422: LD_INT 1
16424: ARRAY
16425: PPUSH
16426: LD_VAR 0 7
16430: PUSH
16431: LD_INT 1
16433: ARRAY
16434: PPUSH
16435: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
16439: LD_VAR 0 6
16443: PUSH
16444: LD_INT 1
16446: ARRAY
16447: PPUSH
16448: LD_VAR 0 7
16452: PUSH
16453: LD_INT 1
16455: ARRAY
16456: PPUSH
16457: CALL_OW 120
// end ;
16461: GO 16399
16463: POP
16464: POP
// end ; end ; end ;
16465: LD_VAR 0 3
16469: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
16470: LD_INT 0
16472: PPUSH
16473: PPUSH
16474: PPUSH
16475: PPUSH
16476: PPUSH
16477: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
16478: LD_ADDR_VAR 0 6
16482: PUSH
16483: LD_VAR 0 2
16487: PPUSH
16488: CALL_OW 313
16492: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
16493: LD_ADDR_VAR 0 7
16497: PUSH
16498: LD_INT 22
16500: PUSH
16501: LD_VAR 0 1
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 25
16512: PUSH
16513: LD_INT 2
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 24
16522: PUSH
16523: LD_INT 1000
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 3
16532: PUSH
16533: LD_INT 54
16535: PUSH
16536: EMPTY
16537: LIST
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: PPUSH
16549: CALL_OW 69
16553: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
16554: LD_ADDR_VAR 0 4
16558: PUSH
16559: LD_INT 22
16561: PUSH
16562: LD_VAR 0 1
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 21
16573: PUSH
16574: LD_INT 3
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 3
16583: PUSH
16584: LD_INT 24
16586: PUSH
16587: LD_INT 1000
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: LIST
16602: PUSH
16603: EMPTY
16604: LIST
16605: PPUSH
16606: CALL_OW 69
16610: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
16611: LD_VAR 0 4
16615: NOT
16616: PUSH
16617: LD_VAR 0 7
16621: NOT
16622: AND
16623: PUSH
16624: LD_EXP 44
16628: NOT
16629: AND
16630: IFFALSE 16634
// exit ;
16632: GO 16825
// if buildings_list > 0 and engineerOkInside then
16634: LD_VAR 0 4
16638: PUSH
16639: LD_INT 0
16641: GREATER
16642: PUSH
16643: LD_VAR 0 6
16647: AND
16648: IFFALSE 16702
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16650: LD_ADDR_VAR 0 5
16654: PUSH
16655: LD_INT 22
16657: PUSH
16658: LD_VAR 0 1
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: LD_INT 25
16669: PUSH
16670: LD_INT 2
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PPUSH
16681: CALL_OW 69
16685: PUSH
16686: FOR_IN
16687: IFFALSE 16700
// ComExitBuilding ( i ) ;
16689: LD_VAR 0 5
16693: PPUSH
16694: CALL_OW 122
16698: GO 16686
16700: POP
16701: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
16702: LD_VAR 0 4
16706: PUSH
16707: LD_INT 0
16709: GREATER
16710: PUSH
16711: LD_VAR 0 7
16715: PUSH
16716: LD_INT 0
16718: GREATER
16719: AND
16720: IFFALSE 16774
// begin for i in engineerOkOutside do
16722: LD_ADDR_VAR 0 5
16726: PUSH
16727: LD_VAR 0 7
16731: PUSH
16732: FOR_IN
16733: IFFALSE 16772
// for j in buildings_list do
16735: LD_ADDR_VAR 0 8
16739: PUSH
16740: LD_VAR 0 4
16744: PUSH
16745: FOR_IN
16746: IFFALSE 16768
// ComRepairBuilding ( i , j [ 1 ] ) ;
16748: LD_VAR 0 5
16752: PPUSH
16753: LD_VAR 0 8
16757: PUSH
16758: LD_INT 1
16760: ARRAY
16761: PPUSH
16762: CALL_OW 130
16766: GO 16745
16768: POP
16769: POP
16770: GO 16732
16772: POP
16773: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
16774: LD_VAR 0 4
16778: PUSH
16779: LD_INT 0
16781: EQUAL
16782: PUSH
16783: LD_VAR 0 7
16787: PUSH
16788: LD_INT 0
16790: GREATER
16791: AND
16792: IFFALSE 16825
// for i in engineerOkOutside do
16794: LD_ADDR_VAR 0 5
16798: PUSH
16799: LD_VAR 0 7
16803: PUSH
16804: FOR_IN
16805: IFFALSE 16823
// ComEnterUnit ( i , building ) ;
16807: LD_VAR 0 5
16811: PPUSH
16812: LD_VAR 0 2
16816: PPUSH
16817: CALL_OW 120
16821: GO 16804
16823: POP
16824: POP
// end ;
16825: LD_VAR 0 3
16829: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
16830: LD_INT 0
16832: PPUSH
16833: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
16834: LD_INT 22
16836: PUSH
16837: LD_VAR 0 1
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PUSH
16846: LD_INT 25
16848: PUSH
16849: LD_INT 2
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PPUSH
16860: CALL_OW 69
16864: PUSH
16865: LD_INT 0
16867: GREATER
16868: PUSH
16869: LD_INT 22
16871: PUSH
16872: LD_VAR 0 1
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 21
16883: PUSH
16884: LD_INT 3
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 3
16893: PUSH
16894: LD_INT 24
16896: PUSH
16897: LD_INT 1000
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: LIST
16912: PPUSH
16913: CALL_OW 69
16917: PUSH
16918: LD_INT 0
16920: EQUAL
16921: AND
16922: PUSH
16923: LD_VAR 0 2
16927: PUSH
16928: LD_INT 0
16930: GREATER
16931: AND
16932: IFFALSE 17031
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16934: LD_ADDR_VAR 0 4
16938: PUSH
16939: LD_INT 22
16941: PUSH
16942: LD_VAR 0 1
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PUSH
16951: LD_INT 25
16953: PUSH
16954: LD_INT 2
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: PPUSH
16965: CALL_OW 69
16969: PUSH
16970: FOR_IN
16971: IFFALSE 17029
// begin AddComExitBuilding ( i ) ;
16973: LD_VAR 0 4
16977: PPUSH
16978: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
16982: LD_VAR 0 4
16986: PPUSH
16987: LD_VAR 0 2
16991: PUSH
16992: LD_INT 1
16994: ARRAY
16995: PPUSH
16996: LD_VAR 0 2
17000: PUSH
17001: LD_INT 2
17003: ARRAY
17004: PPUSH
17005: LD_VAR 0 2
17009: PUSH
17010: LD_INT 3
17012: ARRAY
17013: PPUSH
17014: LD_VAR 0 2
17018: PUSH
17019: LD_INT 4
17021: ARRAY
17022: PPUSH
17023: CALL_OW 205
// end ;
17027: GO 16970
17029: POP
17030: POP
// end ; end ;
17031: LD_VAR 0 3
17035: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
17036: LD_INT 0
17038: PPUSH
17039: PPUSH
17040: PPUSH
17041: PPUSH
17042: PPUSH
17043: PPUSH
17044: PPUSH
17045: PPUSH
17046: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
17047: LD_ADDR_VAR 0 6
17051: PUSH
17052: LD_INT 22
17054: PUSH
17055: LD_VAR 0 1
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 25
17066: PUSH
17067: LD_INT 4
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 24
17076: PUSH
17077: LD_INT 251
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: LIST
17088: PPUSH
17089: CALL_OW 69
17093: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
17094: LD_ADDR_VAR 0 7
17098: PUSH
17099: LD_VAR 0 3
17103: PPUSH
17104: LD_INT 22
17106: PUSH
17107: LD_VAR 0 1
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PUSH
17116: LD_INT 25
17118: PUSH
17119: LD_INT 4
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PUSH
17126: LD_INT 50
17128: PUSH
17129: EMPTY
17130: LIST
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: LIST
17136: PPUSH
17137: CALL_OW 70
17141: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
17142: LD_ADDR_VAR 0 10
17146: PUSH
17147: LD_VAR 0 3
17151: PPUSH
17152: LD_INT 22
17154: PUSH
17155: LD_VAR 0 1
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 21
17166: PUSH
17167: LD_INT 1
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 3
17176: PUSH
17177: LD_INT 25
17179: PUSH
17180: LD_INT 3
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 3
17193: PUSH
17194: LD_INT 24
17196: PUSH
17197: LD_INT 750
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: PPUSH
17214: CALL_OW 70
17218: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17219: LD_ADDR_VAR 0 11
17223: PUSH
17224: LD_VAR 0 2
17228: PPUSH
17229: LD_INT 22
17231: PUSH
17232: LD_VAR 0 1
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PUSH
17241: LD_INT 21
17243: PUSH
17244: LD_INT 1
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PUSH
17251: LD_INT 3
17253: PUSH
17254: LD_INT 25
17256: PUSH
17257: LD_INT 3
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 3
17270: PUSH
17271: LD_INT 24
17273: PUSH
17274: LD_INT 1000
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: PPUSH
17291: CALL_OW 70
17295: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
17296: LD_VAR 0 10
17300: NOT
17301: PUSH
17302: LD_VAR 0 7
17306: NOT
17307: AND
17308: PUSH
17309: LD_VAR 0 11
17313: NOT
17314: AND
17315: IFFALSE 17319
// exit ;
17317: GO 17579
// if damageUnits > 0 and sci_list > 0 then
17319: LD_VAR 0 10
17323: PUSH
17324: LD_INT 0
17326: GREATER
17327: PUSH
17328: LD_VAR 0 6
17332: PUSH
17333: LD_INT 0
17335: GREATER
17336: AND
17337: IFFALSE 17370
// for i in damageUnits do
17339: LD_ADDR_VAR 0 8
17343: PUSH
17344: LD_VAR 0 10
17348: PUSH
17349: FOR_IN
17350: IFFALSE 17368
// ComMoveToArea ( i , healArea ) ;
17352: LD_VAR 0 8
17356: PPUSH
17357: LD_VAR 0 2
17361: PPUSH
17362: CALL_OW 113
17366: GO 17349
17368: POP
17369: POP
// if unitsToHeal > 0 and sci_list > 0 then
17370: LD_VAR 0 11
17374: PUSH
17375: LD_INT 0
17377: GREATER
17378: PUSH
17379: LD_VAR 0 6
17383: PUSH
17384: LD_INT 0
17386: GREATER
17387: AND
17388: IFFALSE 17447
// begin for i in sci_list do
17390: LD_ADDR_VAR 0 8
17394: PUSH
17395: LD_VAR 0 6
17399: PUSH
17400: FOR_IN
17401: IFFALSE 17445
// begin ComExitBuilding ( i ) ;
17403: LD_VAR 0 8
17407: PPUSH
17408: CALL_OW 122
// for j in unitsToHeal do
17412: LD_ADDR_VAR 0 9
17416: PUSH
17417: LD_VAR 0 11
17421: PUSH
17422: FOR_IN
17423: IFFALSE 17441
// AddComHeal ( i , j ) ;
17425: LD_VAR 0 8
17429: PPUSH
17430: LD_VAR 0 9
17434: PPUSH
17435: CALL_OW 188
17439: GO 17422
17441: POP
17442: POP
// end ;
17443: GO 17400
17445: POP
17446: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
17447: LD_VAR 0 10
17451: PUSH
17452: LD_INT 0
17454: EQUAL
17455: PUSH
17456: LD_VAR 0 11
17460: PUSH
17461: LD_INT 0
17463: EQUAL
17464: AND
17465: PUSH
17466: LD_VAR 0 7
17470: PUSH
17471: LD_INT 0
17473: GREATER
17474: AND
17475: IFFALSE 17579
// for i in sci_listOutside do
17477: LD_ADDR_VAR 0 8
17481: PUSH
17482: LD_VAR 0 7
17486: PUSH
17487: FOR_IN
17488: IFFALSE 17577
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
17490: LD_ADDR_VAR 0 12
17494: PUSH
17495: LD_INT 22
17497: PUSH
17498: LD_VAR 0 1
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 21
17509: PUSH
17510: LD_INT 3
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PUSH
17517: LD_INT 30
17519: PUSH
17520: LD_INT 8
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: LIST
17531: PPUSH
17532: CALL_OW 69
17536: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
17537: LD_ADDR_VAR 0 13
17541: PUSH
17542: LD_INT 1
17544: PPUSH
17545: LD_VAR 0 12
17549: PPUSH
17550: CALL_OW 12
17554: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
17555: LD_VAR 0 8
17559: PPUSH
17560: LD_VAR 0 12
17564: PUSH
17565: LD_VAR 0 13
17569: ARRAY
17570: PPUSH
17571: CALL_OW 120
// end ;
17575: GO 17487
17577: POP
17578: POP
// end ;
17579: LD_VAR 0 5
17583: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
17584: LD_INT 0
17586: PPUSH
17587: PPUSH
17588: PPUSH
17589: PPUSH
17590: PPUSH
17591: PPUSH
17592: PPUSH
17593: PPUSH
17594: PPUSH
17595: PPUSH
17596: PPUSH
// amChassisTab = [ ] ;
17597: LD_ADDR_VAR 0 19
17601: PUSH
17602: EMPTY
17603: ST_TO_ADDR
// arChassisTab = [ ] ;
17604: LD_ADDR_VAR 0 18
17608: PUSH
17609: EMPTY
17610: ST_TO_ADDR
// ruChassisTab = [ ] ;
17611: LD_ADDR_VAR 0 17
17615: PUSH
17616: EMPTY
17617: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
17618: LD_INT 35
17620: PPUSH
17621: CALL_OW 67
// if nation = 1 then
17625: LD_VAR 0 5
17629: PUSH
17630: LD_INT 1
17632: EQUAL
17633: IFFALSE 18138
// begin uc_side = side ;
17635: LD_ADDR_OWVAR 20
17639: PUSH
17640: LD_VAR 0 2
17644: ST_TO_ADDR
// uc_nation = nation ;
17645: LD_ADDR_OWVAR 21
17649: PUSH
17650: LD_VAR 0 5
17654: ST_TO_ADDR
// vc_engine = vehengine ;
17655: LD_ADDR_OWVAR 39
17659: PUSH
17660: LD_VAR 0 6
17664: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17665: LD_ADDR_OWVAR 38
17669: PUSH
17670: LD_VAR 0 7
17674: PUSH
17675: LD_INT 1
17677: PPUSH
17678: LD_VAR 0 7
17682: PPUSH
17683: CALL_OW 12
17687: ARRAY
17688: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
17689: LD_ADDR_OWVAR 40
17693: PUSH
17694: LD_VAR 0 10
17698: PUSH
17699: LD_INT 1
17701: PPUSH
17702: LD_VAR 0 10
17706: PPUSH
17707: CALL_OW 12
17711: ARRAY
17712: ST_TO_ADDR
// for j = 1 to AMWeapon do
17713: LD_ADDR_VAR 0 14
17717: PUSH
17718: DOUBLE
17719: LD_INT 1
17721: DEC
17722: ST_TO_ADDR
17723: LD_VAR 0 10
17727: PUSH
17728: FOR_TO
17729: IFFALSE 18030
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
17731: LD_VAR 0 10
17735: PUSH
17736: LD_VAR 0 14
17740: ARRAY
17741: PUSH
17742: LD_INT 2
17744: EQUAL
17745: PUSH
17746: LD_VAR 0 10
17750: PUSH
17751: LD_VAR 0 14
17755: ARRAY
17756: PUSH
17757: LD_INT 3
17759: EQUAL
17760: OR
17761: IFFALSE 17814
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
17763: LD_ADDR_VAR 0 19
17767: PUSH
17768: LD_INT 1
17770: PUSH
17771: LD_INT 2
17773: PUSH
17774: LD_INT 3
17776: PUSH
17777: LD_INT 4
17779: PUSH
17780: LD_INT 5
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17790: LD_ADDR_OWVAR 37
17794: PUSH
17795: LD_VAR 0 19
17799: PUSH
17800: LD_INT 1
17802: PPUSH
17803: LD_VAR 0 19
17807: PPUSH
17808: CALL_OW 12
17812: ARRAY
17813: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
17814: LD_VAR 0 10
17818: PUSH
17819: LD_VAR 0 14
17823: ARRAY
17824: PUSH
17825: LD_INT 4
17827: EQUAL
17828: PUSH
17829: LD_VAR 0 10
17833: PUSH
17834: LD_VAR 0 14
17838: ARRAY
17839: PUSH
17840: LD_INT 5
17842: EQUAL
17843: OR
17844: PUSH
17845: LD_VAR 0 10
17849: PUSH
17850: LD_VAR 0 14
17854: ARRAY
17855: PUSH
17856: LD_INT 9
17858: EQUAL
17859: OR
17860: PUSH
17861: LD_VAR 0 10
17865: PUSH
17866: LD_VAR 0 14
17870: ARRAY
17871: PUSH
17872: LD_INT 11
17874: EQUAL
17875: OR
17876: PUSH
17877: LD_VAR 0 10
17881: PUSH
17882: LD_VAR 0 14
17886: ARRAY
17887: PUSH
17888: LD_INT 7
17890: EQUAL
17891: OR
17892: IFFALSE 17941
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
17894: LD_ADDR_VAR 0 19
17898: PUSH
17899: LD_INT 2
17901: PUSH
17902: LD_INT 3
17904: PUSH
17905: LD_INT 4
17907: PUSH
17908: LD_INT 5
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17917: LD_ADDR_OWVAR 37
17921: PUSH
17922: LD_VAR 0 19
17926: PUSH
17927: LD_INT 1
17929: PPUSH
17930: LD_VAR 0 19
17934: PPUSH
17935: CALL_OW 12
17939: ARRAY
17940: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
17941: LD_VAR 0 10
17945: PUSH
17946: LD_VAR 0 14
17950: ARRAY
17951: PUSH
17952: LD_INT 8
17954: EQUAL
17955: PUSH
17956: LD_VAR 0 10
17960: PUSH
17961: LD_VAR 0 14
17965: ARRAY
17966: PUSH
17967: LD_INT 6
17969: EQUAL
17970: OR
17971: PUSH
17972: LD_VAR 0 10
17976: PUSH
17977: LD_VAR 0 14
17981: ARRAY
17982: PUSH
17983: LD_INT 10
17985: EQUAL
17986: OR
17987: IFFALSE 18028
// begin amChassisTab = [ 4 , 5 ] ;
17989: LD_ADDR_VAR 0 19
17993: PUSH
17994: LD_INT 4
17996: PUSH
17997: LD_INT 5
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
18004: LD_ADDR_OWVAR 37
18008: PUSH
18009: LD_VAR 0 19
18013: PUSH
18014: LD_INT 1
18016: PPUSH
18017: LD_VAR 0 19
18021: PPUSH
18022: CALL_OW 12
18026: ARRAY
18027: ST_TO_ADDR
// end ; end ;
18028: GO 17728
18030: POP
18031: POP
// veh = CreateVehicle ;
18032: LD_ADDR_VAR 0 16
18036: PUSH
18037: CALL_OW 45
18041: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18042: LD_VAR 0 16
18046: PPUSH
18047: LD_VAR 0 1
18051: PPUSH
18052: LD_INT 0
18054: PPUSH
18055: CALL_OW 49
// if vc_control = 1 then
18059: LD_OWVAR 38
18063: PUSH
18064: LD_INT 1
18066: EQUAL
18067: IFFALSE 18124
// begin hc_gallery =  ;
18069: LD_ADDR_OWVAR 33
18073: PUSH
18074: LD_STRING 
18076: ST_TO_ADDR
// hc_name =  ;
18077: LD_ADDR_OWVAR 26
18081: PUSH
18082: LD_STRING 
18084: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18085: LD_INT 0
18087: PPUSH
18088: LD_INT 3
18090: PPUSH
18091: LD_VAR 0 4
18095: PPUSH
18096: CALL_OW 380
// un = CreateHuman ;
18100: LD_ADDR_VAR 0 15
18104: PUSH
18105: CALL_OW 44
18109: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18110: LD_VAR 0 15
18114: PPUSH
18115: LD_VAR 0 16
18119: PPUSH
18120: CALL_OW 52
// end ; i = i + 1 ;
18124: LD_ADDR_VAR 0 13
18128: PUSH
18129: LD_VAR 0 13
18133: PUSH
18134: LD_INT 1
18136: PLUS
18137: ST_TO_ADDR
// end ; if nation = 2 then
18138: LD_VAR 0 5
18142: PUSH
18143: LD_INT 2
18145: EQUAL
18146: IFFALSE 18568
// begin uc_side = side ;
18148: LD_ADDR_OWVAR 20
18152: PUSH
18153: LD_VAR 0 2
18157: ST_TO_ADDR
// uc_nation = nation ;
18158: LD_ADDR_OWVAR 21
18162: PUSH
18163: LD_VAR 0 5
18167: ST_TO_ADDR
// vc_engine = vehengine ;
18168: LD_ADDR_OWVAR 39
18172: PUSH
18173: LD_VAR 0 6
18177: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18178: LD_ADDR_OWVAR 38
18182: PUSH
18183: LD_VAR 0 7
18187: PUSH
18188: LD_INT 1
18190: PPUSH
18191: LD_VAR 0 7
18195: PPUSH
18196: CALL_OW 12
18200: ARRAY
18201: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
18202: LD_ADDR_OWVAR 40
18206: PUSH
18207: LD_VAR 0 9
18211: PUSH
18212: LD_INT 1
18214: PPUSH
18215: LD_VAR 0 9
18219: PPUSH
18220: CALL_OW 12
18224: ARRAY
18225: ST_TO_ADDR
// for j = 1 to ARWeapons do
18226: LD_ADDR_VAR 0 14
18230: PUSH
18231: DOUBLE
18232: LD_INT 1
18234: DEC
18235: ST_TO_ADDR
18236: LD_VAR 0 9
18240: PUSH
18241: FOR_TO
18242: IFFALSE 18460
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
18244: LD_VAR 0 9
18248: PUSH
18249: LD_VAR 0 14
18253: ARRAY
18254: PUSH
18255: LD_INT 24
18257: EQUAL
18258: PUSH
18259: LD_VAR 0 9
18263: PUSH
18264: LD_VAR 0 14
18268: ARRAY
18269: PUSH
18270: LD_INT 22
18272: EQUAL
18273: OR
18274: PUSH
18275: LD_VAR 0 9
18279: PUSH
18280: LD_VAR 0 14
18284: ARRAY
18285: PUSH
18286: LD_INT 23
18288: EQUAL
18289: OR
18290: PUSH
18291: LD_VAR 0 9
18295: PUSH
18296: LD_VAR 0 14
18300: ARRAY
18301: PUSH
18302: LD_INT 30
18304: EQUAL
18305: OR
18306: IFFALSE 18343
// begin arChassisTab = [ 14 ] ;
18308: LD_ADDR_VAR 0 18
18312: PUSH
18313: LD_INT 14
18315: PUSH
18316: EMPTY
18317: LIST
18318: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18319: LD_ADDR_OWVAR 37
18323: PUSH
18324: LD_VAR 0 18
18328: PUSH
18329: LD_INT 1
18331: PPUSH
18332: LD_VAR 0 18
18336: PPUSH
18337: CALL_OW 12
18341: ARRAY
18342: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
18343: LD_VAR 0 9
18347: PUSH
18348: LD_VAR 0 14
18352: ARRAY
18353: PUSH
18354: LD_INT 29
18356: EQUAL
18357: PUSH
18358: LD_VAR 0 9
18362: PUSH
18363: LD_VAR 0 14
18367: ARRAY
18368: PUSH
18369: LD_INT 28
18371: EQUAL
18372: OR
18373: PUSH
18374: LD_VAR 0 9
18378: PUSH
18379: LD_VAR 0 14
18383: ARRAY
18384: PUSH
18385: LD_INT 27
18387: EQUAL
18388: OR
18389: PUSH
18390: LD_VAR 0 9
18394: PUSH
18395: LD_VAR 0 14
18399: ARRAY
18400: PUSH
18401: LD_INT 26
18403: EQUAL
18404: OR
18405: PUSH
18406: LD_VAR 0 9
18410: PUSH
18411: LD_VAR 0 14
18415: ARRAY
18416: PUSH
18417: LD_INT 25
18419: EQUAL
18420: OR
18421: IFFALSE 18458
// begin arChassisTab = [ 14 ] ;
18423: LD_ADDR_VAR 0 18
18427: PUSH
18428: LD_INT 14
18430: PUSH
18431: EMPTY
18432: LIST
18433: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18434: LD_ADDR_OWVAR 37
18438: PUSH
18439: LD_VAR 0 18
18443: PUSH
18444: LD_INT 1
18446: PPUSH
18447: LD_VAR 0 18
18451: PPUSH
18452: CALL_OW 12
18456: ARRAY
18457: ST_TO_ADDR
// end ; end ;
18458: GO 18241
18460: POP
18461: POP
// veh = CreateVehicle ;
18462: LD_ADDR_VAR 0 16
18466: PUSH
18467: CALL_OW 45
18471: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18472: LD_VAR 0 16
18476: PPUSH
18477: LD_VAR 0 1
18481: PPUSH
18482: LD_INT 0
18484: PPUSH
18485: CALL_OW 49
// if vc_control = 1 then
18489: LD_OWVAR 38
18493: PUSH
18494: LD_INT 1
18496: EQUAL
18497: IFFALSE 18554
// begin hc_gallery =  ;
18499: LD_ADDR_OWVAR 33
18503: PUSH
18504: LD_STRING 
18506: ST_TO_ADDR
// hc_name =  ;
18507: LD_ADDR_OWVAR 26
18511: PUSH
18512: LD_STRING 
18514: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18515: LD_INT 0
18517: PPUSH
18518: LD_INT 3
18520: PPUSH
18521: LD_VAR 0 4
18525: PPUSH
18526: CALL_OW 380
// un = CreateHuman ;
18530: LD_ADDR_VAR 0 15
18534: PUSH
18535: CALL_OW 44
18539: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18540: LD_VAR 0 15
18544: PPUSH
18545: LD_VAR 0 16
18549: PPUSH
18550: CALL_OW 52
// end ; i = i + 1 ;
18554: LD_ADDR_VAR 0 13
18558: PUSH
18559: LD_VAR 0 13
18563: PUSH
18564: LD_INT 1
18566: PLUS
18567: ST_TO_ADDR
// end ; if nation = 3 then
18568: LD_VAR 0 5
18572: PUSH
18573: LD_INT 3
18575: EQUAL
18576: IFFALSE 18982
// begin uc_side = side ;
18578: LD_ADDR_OWVAR 20
18582: PUSH
18583: LD_VAR 0 2
18587: ST_TO_ADDR
// uc_nation = nation ;
18588: LD_ADDR_OWVAR 21
18592: PUSH
18593: LD_VAR 0 5
18597: ST_TO_ADDR
// vc_engine = vehengine ;
18598: LD_ADDR_OWVAR 39
18602: PUSH
18603: LD_VAR 0 6
18607: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18608: LD_ADDR_OWVAR 38
18612: PUSH
18613: LD_VAR 0 7
18617: PUSH
18618: LD_INT 1
18620: PPUSH
18621: LD_VAR 0 7
18625: PPUSH
18626: CALL_OW 12
18630: ARRAY
18631: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
18632: LD_ADDR_OWVAR 40
18636: PUSH
18637: LD_VAR 0 8
18641: PUSH
18642: LD_INT 1
18644: PPUSH
18645: LD_VAR 0 8
18649: PPUSH
18650: CALL_OW 12
18654: ARRAY
18655: ST_TO_ADDR
// for j = 1 to RuWeapons do
18656: LD_ADDR_VAR 0 14
18660: PUSH
18661: DOUBLE
18662: LD_INT 1
18664: DEC
18665: ST_TO_ADDR
18666: LD_VAR 0 8
18670: PUSH
18671: FOR_TO
18672: IFFALSE 18874
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
18674: LD_VAR 0 8
18678: PUSH
18679: LD_VAR 0 14
18683: ARRAY
18684: PUSH
18685: LD_INT 42
18687: EQUAL
18688: PUSH
18689: LD_VAR 0 8
18693: PUSH
18694: LD_VAR 0 14
18698: ARRAY
18699: PUSH
18700: LD_INT 43
18702: EQUAL
18703: OR
18704: PUSH
18705: LD_VAR 0 8
18709: PUSH
18710: LD_VAR 0 14
18714: ARRAY
18715: PUSH
18716: LD_INT 44
18718: EQUAL
18719: OR
18720: PUSH
18721: LD_VAR 0 8
18725: PUSH
18726: LD_VAR 0 14
18730: ARRAY
18731: PUSH
18732: LD_INT 45
18734: EQUAL
18735: OR
18736: PUSH
18737: LD_VAR 0 8
18741: PUSH
18742: LD_VAR 0 14
18746: ARRAY
18747: PUSH
18748: LD_INT 49
18750: EQUAL
18751: OR
18752: IFFALSE 18801
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
18754: LD_ADDR_VAR 0 17
18758: PUSH
18759: LD_INT 21
18761: PUSH
18762: LD_INT 22
18764: PUSH
18765: LD_INT 23
18767: PUSH
18768: LD_INT 24
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18777: LD_ADDR_OWVAR 37
18781: PUSH
18782: LD_VAR 0 17
18786: PUSH
18787: LD_INT 1
18789: PPUSH
18790: LD_VAR 0 17
18794: PPUSH
18795: CALL_OW 12
18799: ARRAY
18800: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
18801: LD_VAR 0 8
18805: PUSH
18806: LD_VAR 0 14
18810: ARRAY
18811: PUSH
18812: LD_INT 46
18814: EQUAL
18815: PUSH
18816: LD_VAR 0 8
18820: PUSH
18821: LD_VAR 0 14
18825: ARRAY
18826: PUSH
18827: LD_INT 47
18829: EQUAL
18830: OR
18831: IFFALSE 18872
// begin ruChassisTab = [ 23 , 24 ] ;
18833: LD_ADDR_VAR 0 17
18837: PUSH
18838: LD_INT 23
18840: PUSH
18841: LD_INT 24
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18848: LD_ADDR_OWVAR 37
18852: PUSH
18853: LD_VAR 0 17
18857: PUSH
18858: LD_INT 1
18860: PPUSH
18861: LD_VAR 0 17
18865: PPUSH
18866: CALL_OW 12
18870: ARRAY
18871: ST_TO_ADDR
// end ; end ;
18872: GO 18671
18874: POP
18875: POP
// veh = CreateVehicle ;
18876: LD_ADDR_VAR 0 16
18880: PUSH
18881: CALL_OW 45
18885: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18886: LD_VAR 0 16
18890: PPUSH
18891: LD_VAR 0 1
18895: PPUSH
18896: LD_INT 0
18898: PPUSH
18899: CALL_OW 49
// if vc_control = 1 then
18903: LD_OWVAR 38
18907: PUSH
18908: LD_INT 1
18910: EQUAL
18911: IFFALSE 18968
// begin hc_gallery =  ;
18913: LD_ADDR_OWVAR 33
18917: PUSH
18918: LD_STRING 
18920: ST_TO_ADDR
// hc_name =  ;
18921: LD_ADDR_OWVAR 26
18925: PUSH
18926: LD_STRING 
18928: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18929: LD_INT 0
18931: PPUSH
18932: LD_INT 3
18934: PPUSH
18935: LD_VAR 0 4
18939: PPUSH
18940: CALL_OW 380
// un = CreateHuman ;
18944: LD_ADDR_VAR 0 15
18948: PUSH
18949: CALL_OW 44
18953: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18954: LD_VAR 0 15
18958: PPUSH
18959: LD_VAR 0 16
18963: PPUSH
18964: CALL_OW 52
// end ; i = i + 1 ;
18968: LD_ADDR_VAR 0 13
18972: PUSH
18973: LD_VAR 0 13
18977: PUSH
18978: LD_INT 1
18980: PLUS
18981: ST_TO_ADDR
// end ; until i = vehCount ;
18982: LD_VAR 0 13
18986: PUSH
18987: LD_VAR 0 3
18991: EQUAL
18992: IFFALSE 17618
// repeat wait ( 0 0$1 ) ;
18994: LD_INT 35
18996: PPUSH
18997: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
19001: LD_ADDR_VAR 0 20
19005: PUSH
19006: LD_INT 22
19008: PUSH
19009: LD_VAR 0 2
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 21
19020: PUSH
19021: LD_INT 2
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 24
19030: PUSH
19031: LD_INT 650
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: LIST
19042: PPUSH
19043: CALL_OW 69
19047: ST_TO_ADDR
// if vehicleOK_list > 0 then
19048: LD_VAR 0 20
19052: PUSH
19053: LD_INT 0
19055: GREATER
19056: IFFALSE 19247
// begin for i in vehicleOK_list do
19058: LD_ADDR_VAR 0 13
19062: PUSH
19063: LD_VAR 0 20
19067: PUSH
19068: FOR_IN
19069: IFFALSE 19245
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19071: LD_ADDR_VAR 0 21
19075: PUSH
19076: LD_INT 22
19078: PUSH
19079: LD_VAR 0 11
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PPUSH
19088: CALL_OW 69
19092: PPUSH
19093: LD_VAR 0 13
19097: PPUSH
19098: CALL_OW 74
19102: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19103: LD_ADDR_VAR 0 22
19107: PUSH
19108: LD_INT 22
19110: PUSH
19111: LD_VAR 0 11
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 2
19122: PUSH
19123: LD_INT 59
19125: PUSH
19126: EMPTY
19127: LIST
19128: PUSH
19129: LD_INT 21
19131: PUSH
19132: LD_INT 1
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 21
19141: PUSH
19142: LD_INT 2
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: EMPTY
19160: LIST
19161: PPUSH
19162: CALL_OW 69
19166: PPUSH
19167: LD_VAR 0 13
19171: PPUSH
19172: CALL_OW 74
19176: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19177: LD_VAR 0 13
19181: PPUSH
19182: LD_VAR 0 21
19186: PPUSH
19187: CALL_OW 296
19191: PUSH
19192: LD_INT 8
19194: PLUS
19195: PUSH
19196: LD_VAR 0 13
19200: PPUSH
19201: LD_VAR 0 22
19205: PPUSH
19206: CALL_OW 296
19210: LESS
19211: IFFALSE 19229
// begin ComAttackUnit ( i , target1 ) ;
19213: LD_VAR 0 13
19217: PPUSH
19218: LD_VAR 0 21
19222: PPUSH
19223: CALL_OW 115
// end else
19227: GO 19243
// begin ComAttackUnit ( i , target2 ) ;
19229: LD_VAR 0 13
19233: PPUSH
19234: LD_VAR 0 22
19238: PPUSH
19239: CALL_OW 115
// end ; end ;
19243: GO 19068
19245: POP
19246: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
19247: LD_INT 22
19249: PUSH
19250: LD_VAR 0 2
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 21
19261: PUSH
19262: LD_INT 2
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PPUSH
19273: CALL_OW 69
19277: PUSH
19278: LD_INT 0
19280: EQUAL
19281: IFFALSE 18994
// end ;
19283: LD_VAR 0 12
19287: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
19288: LD_INT 0
19290: PPUSH
19291: PPUSH
19292: PPUSH
19293: PPUSH
19294: PPUSH
19295: PPUSH
19296: PPUSH
19297: PPUSH
19298: PPUSH
19299: PPUSH
19300: PPUSH
// for i = 1 to soldierCount do
19301: LD_ADDR_VAR 0 13
19305: PUSH
19306: DOUBLE
19307: LD_INT 1
19309: DEC
19310: ST_TO_ADDR
19311: LD_VAR 0 3
19315: PUSH
19316: FOR_TO
19317: IFFALSE 19399
// begin uc_side = side ;
19319: LD_ADDR_OWVAR 20
19323: PUSH
19324: LD_VAR 0 1
19328: ST_TO_ADDR
// uc_nation = nation ;
19329: LD_ADDR_OWVAR 21
19333: PUSH
19334: LD_VAR 0 2
19338: ST_TO_ADDR
// hc_name =  ;
19339: LD_ADDR_OWVAR 26
19343: PUSH
19344: LD_STRING 
19346: ST_TO_ADDR
// hc_gallery =  ;
19347: LD_ADDR_OWVAR 33
19351: PUSH
19352: LD_STRING 
19354: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
19355: LD_INT 0
19357: PPUSH
19358: LD_INT 1
19360: PPUSH
19361: LD_VAR 0 8
19365: PPUSH
19366: CALL_OW 380
// un = CreateHuman ;
19370: LD_ADDR_VAR 0 15
19374: PUSH
19375: CALL_OW 44
19379: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19380: LD_VAR 0 15
19384: PPUSH
19385: LD_VAR 0 9
19389: PPUSH
19390: LD_INT 0
19392: PPUSH
19393: CALL_OW 49
// end ;
19397: GO 19316
19399: POP
19400: POP
// for i = 1 to sniperCount do
19401: LD_ADDR_VAR 0 13
19405: PUSH
19406: DOUBLE
19407: LD_INT 1
19409: DEC
19410: ST_TO_ADDR
19411: LD_VAR 0 4
19415: PUSH
19416: FOR_TO
19417: IFFALSE 19499
// begin uc_side = side ;
19419: LD_ADDR_OWVAR 20
19423: PUSH
19424: LD_VAR 0 1
19428: ST_TO_ADDR
// uc_nation = nation ;
19429: LD_ADDR_OWVAR 21
19433: PUSH
19434: LD_VAR 0 2
19438: ST_TO_ADDR
// hc_name =  ;
19439: LD_ADDR_OWVAR 26
19443: PUSH
19444: LD_STRING 
19446: ST_TO_ADDR
// hc_gallery =  ;
19447: LD_ADDR_OWVAR 33
19451: PUSH
19452: LD_STRING 
19454: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
19455: LD_INT 0
19457: PPUSH
19458: LD_INT 5
19460: PPUSH
19461: LD_VAR 0 8
19465: PPUSH
19466: CALL_OW 380
// un = CreateHuman ;
19470: LD_ADDR_VAR 0 15
19474: PUSH
19475: CALL_OW 44
19479: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19480: LD_VAR 0 15
19484: PPUSH
19485: LD_VAR 0 9
19489: PPUSH
19490: LD_INT 0
19492: PPUSH
19493: CALL_OW 49
// end ;
19497: GO 19416
19499: POP
19500: POP
// for i = 1 to bazookCount do
19501: LD_ADDR_VAR 0 13
19505: PUSH
19506: DOUBLE
19507: LD_INT 1
19509: DEC
19510: ST_TO_ADDR
19511: LD_VAR 0 5
19515: PUSH
19516: FOR_TO
19517: IFFALSE 19599
// begin uc_side = side ;
19519: LD_ADDR_OWVAR 20
19523: PUSH
19524: LD_VAR 0 1
19528: ST_TO_ADDR
// uc_nation = nation ;
19529: LD_ADDR_OWVAR 21
19533: PUSH
19534: LD_VAR 0 2
19538: ST_TO_ADDR
// hc_name =  ;
19539: LD_ADDR_OWVAR 26
19543: PUSH
19544: LD_STRING 
19546: ST_TO_ADDR
// hc_gallery =  ;
19547: LD_ADDR_OWVAR 33
19551: PUSH
19552: LD_STRING 
19554: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
19555: LD_INT 0
19557: PPUSH
19558: LD_INT 9
19560: PPUSH
19561: LD_VAR 0 8
19565: PPUSH
19566: CALL_OW 380
// un = CreateHuman ;
19570: LD_ADDR_VAR 0 15
19574: PUSH
19575: CALL_OW 44
19579: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19580: LD_VAR 0 15
19584: PPUSH
19585: LD_VAR 0 9
19589: PPUSH
19590: LD_INT 0
19592: PPUSH
19593: CALL_OW 49
// end ;
19597: GO 19516
19599: POP
19600: POP
// for i = 1 to mortalCount do
19601: LD_ADDR_VAR 0 13
19605: PUSH
19606: DOUBLE
19607: LD_INT 1
19609: DEC
19610: ST_TO_ADDR
19611: LD_VAR 0 6
19615: PUSH
19616: FOR_TO
19617: IFFALSE 19699
// begin uc_side = side ;
19619: LD_ADDR_OWVAR 20
19623: PUSH
19624: LD_VAR 0 1
19628: ST_TO_ADDR
// uc_nation = nation ;
19629: LD_ADDR_OWVAR 21
19633: PUSH
19634: LD_VAR 0 2
19638: ST_TO_ADDR
// hc_name =  ;
19639: LD_ADDR_OWVAR 26
19643: PUSH
19644: LD_STRING 
19646: ST_TO_ADDR
// hc_gallery =  ;
19647: LD_ADDR_OWVAR 33
19651: PUSH
19652: LD_STRING 
19654: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
19655: LD_INT 0
19657: PPUSH
19658: LD_INT 8
19660: PPUSH
19661: LD_VAR 0 8
19665: PPUSH
19666: CALL_OW 380
// un = CreateHuman ;
19670: LD_ADDR_VAR 0 15
19674: PUSH
19675: CALL_OW 44
19679: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19680: LD_VAR 0 15
19684: PPUSH
19685: LD_VAR 0 9
19689: PPUSH
19690: LD_INT 0
19692: PPUSH
19693: CALL_OW 49
// end ;
19697: GO 19616
19699: POP
19700: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
19701: LD_ADDR_VAR 0 18
19705: PUSH
19706: LD_INT 22
19708: PUSH
19709: LD_VAR 0 1
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 2
19720: PUSH
19721: LD_INT 25
19723: PUSH
19724: LD_INT 1
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 25
19733: PUSH
19734: LD_INT 5
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 25
19743: PUSH
19744: LD_INT 8
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 25
19753: PUSH
19754: LD_INT 9
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PPUSH
19772: CALL_OW 69
19776: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
19777: LD_ADDR_VAR 0 17
19781: PUSH
19782: LD_INT 22
19784: PUSH
19785: LD_VAR 0 1
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 25
19796: PUSH
19797: LD_INT 4
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PPUSH
19808: CALL_OW 69
19812: ST_TO_ADDR
// for i in medic_list do
19813: LD_ADDR_VAR 0 13
19817: PUSH
19818: LD_VAR 0 17
19822: PUSH
19823: FOR_IN
19824: IFFALSE 19842
// ComMoveToArea ( i , healArea ) ;
19826: LD_VAR 0 13
19830: PPUSH
19831: LD_VAR 0 10
19835: PPUSH
19836: CALL_OW 113
19840: GO 19823
19842: POP
19843: POP
// repeat wait ( 0 0$1 ) ;
19844: LD_INT 35
19846: PPUSH
19847: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
19851: LD_ADDR_VAR 0 16
19855: PUSH
19856: LD_INT 22
19858: PUSH
19859: LD_VAR 0 1
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 1
19870: PUSH
19871: LD_INT 3
19873: PUSH
19874: LD_INT 24
19876: PUSH
19877: LD_INT 550
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 24
19890: PUSH
19891: LD_INT 250
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: LIST
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PPUSH
19907: CALL_OW 69
19911: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
19912: LD_ADDR_VAR 0 18
19916: PUSH
19917: LD_INT 22
19919: PUSH
19920: LD_VAR 0 1
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: LD_INT 2
19931: PUSH
19932: LD_INT 25
19934: PUSH
19935: LD_INT 1
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: LD_INT 25
19944: PUSH
19945: LD_INT 5
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 25
19954: PUSH
19955: LD_INT 8
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 25
19964: PUSH
19965: LD_INT 9
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: PUSH
19979: LD_INT 24
19981: PUSH
19982: LD_INT 1000
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: LIST
19993: PPUSH
19994: CALL_OW 69
19998: ST_TO_ADDR
// if medicCount > 0 then
19999: LD_VAR 0 7
20003: PUSH
20004: LD_INT 0
20006: GREATER
20007: IFFALSE 20081
// begin if damageUnit_list > 0 then
20009: LD_VAR 0 16
20013: PUSH
20014: LD_INT 0
20016: GREATER
20017: IFFALSE 20081
// begin for i in damageUnit_list do
20019: LD_ADDR_VAR 0 13
20023: PUSH
20024: LD_VAR 0 16
20028: PUSH
20029: FOR_IN
20030: IFFALSE 20079
// begin ComMoveToArea ( i , healArea ) ;
20032: LD_VAR 0 13
20036: PPUSH
20037: LD_VAR 0 10
20041: PPUSH
20042: CALL_OW 113
// for j in medic_list do
20046: LD_ADDR_VAR 0 14
20050: PUSH
20051: LD_VAR 0 17
20055: PUSH
20056: FOR_IN
20057: IFFALSE 20075
// AddComHeal ( j , i ) ;
20059: LD_VAR 0 14
20063: PPUSH
20064: LD_VAR 0 13
20068: PPUSH
20069: CALL_OW 188
20073: GO 20056
20075: POP
20076: POP
// end ;
20077: GO 20029
20079: POP
20080: POP
// end ; end ; for i in soldiersOK_list do
20081: LD_ADDR_VAR 0 13
20085: PUSH
20086: LD_VAR 0 18
20090: PUSH
20091: FOR_IN
20092: IFFALSE 20268
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20094: LD_ADDR_VAR 0 21
20098: PUSH
20099: LD_INT 22
20101: PUSH
20102: LD_VAR 0 11
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PPUSH
20111: CALL_OW 69
20115: PPUSH
20116: LD_VAR 0 13
20120: PPUSH
20121: CALL_OW 74
20125: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20126: LD_ADDR_VAR 0 22
20130: PUSH
20131: LD_INT 22
20133: PUSH
20134: LD_VAR 0 11
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 2
20145: PUSH
20146: LD_INT 59
20148: PUSH
20149: EMPTY
20150: LIST
20151: PUSH
20152: LD_INT 21
20154: PUSH
20155: LD_INT 1
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: LD_INT 21
20164: PUSH
20165: LD_INT 2
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: EMPTY
20183: LIST
20184: PPUSH
20185: CALL_OW 69
20189: PPUSH
20190: LD_VAR 0 13
20194: PPUSH
20195: CALL_OW 74
20199: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20200: LD_VAR 0 13
20204: PPUSH
20205: LD_VAR 0 21
20209: PPUSH
20210: CALL_OW 296
20214: PUSH
20215: LD_INT 8
20217: PLUS
20218: PUSH
20219: LD_VAR 0 13
20223: PPUSH
20224: LD_VAR 0 22
20228: PPUSH
20229: CALL_OW 296
20233: LESS
20234: IFFALSE 20252
// begin ComAttackUnit ( i , target1 ) ;
20236: LD_VAR 0 13
20240: PPUSH
20241: LD_VAR 0 21
20245: PPUSH
20246: CALL_OW 115
// end else
20250: GO 20266
// begin ComAttackUnit ( i , target2 ) ;
20252: LD_VAR 0 13
20256: PPUSH
20257: LD_VAR 0 22
20261: PPUSH
20262: CALL_OW 115
// end ; end ;
20266: GO 20091
20268: POP
20269: POP
// for i in soldiersOK_list do
20270: LD_ADDR_VAR 0 13
20274: PUSH
20275: LD_VAR 0 18
20279: PUSH
20280: FOR_IN
20281: IFFALSE 20457
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20283: LD_ADDR_VAR 0 21
20287: PUSH
20288: LD_INT 22
20290: PUSH
20291: LD_VAR 0 11
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PPUSH
20300: CALL_OW 69
20304: PPUSH
20305: LD_VAR 0 13
20309: PPUSH
20310: CALL_OW 74
20314: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20315: LD_ADDR_VAR 0 22
20319: PUSH
20320: LD_INT 22
20322: PUSH
20323: LD_VAR 0 11
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 2
20334: PUSH
20335: LD_INT 59
20337: PUSH
20338: EMPTY
20339: LIST
20340: PUSH
20341: LD_INT 21
20343: PUSH
20344: LD_INT 1
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 21
20353: PUSH
20354: LD_INT 2
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: EMPTY
20372: LIST
20373: PPUSH
20374: CALL_OW 69
20378: PPUSH
20379: LD_VAR 0 13
20383: PPUSH
20384: CALL_OW 74
20388: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20389: LD_VAR 0 13
20393: PPUSH
20394: LD_VAR 0 21
20398: PPUSH
20399: CALL_OW 296
20403: PUSH
20404: LD_INT 8
20406: PLUS
20407: PUSH
20408: LD_VAR 0 13
20412: PPUSH
20413: LD_VAR 0 22
20417: PPUSH
20418: CALL_OW 296
20422: LESS
20423: IFFALSE 20441
// begin ComAttackUnit ( i , target1 ) ;
20425: LD_VAR 0 13
20429: PPUSH
20430: LD_VAR 0 21
20434: PPUSH
20435: CALL_OW 115
// end else
20439: GO 20455
// begin ComAttackUnit ( i , target2 ) ;
20441: LD_VAR 0 13
20445: PPUSH
20446: LD_VAR 0 22
20450: PPUSH
20451: CALL_OW 115
// end ; end ;
20455: GO 20280
20457: POP
20458: POP
// until soldiersOK_list = [ ] ;
20459: LD_VAR 0 18
20463: PUSH
20464: EMPTY
20465: EQUAL
20466: IFFALSE 19844
// end ;
20468: LD_VAR 0 12
20472: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
20473: LD_INT 0
20475: PPUSH
20476: PPUSH
20477: PPUSH
20478: PPUSH
20479: PPUSH
20480: PPUSH
20481: PPUSH
// repeat wait ( 0 0$1 ) ;
20482: LD_INT 35
20484: PPUSH
20485: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
20489: LD_ADDR_VAR 0 7
20493: PUSH
20494: LD_INT 22
20496: PUSH
20497: LD_INT 2
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 25
20506: PUSH
20507: LD_INT 4
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 3
20516: PUSH
20517: LD_INT 60
20519: PUSH
20520: EMPTY
20521: LIST
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: LIST
20531: PPUSH
20532: CALL_OW 69
20536: ST_TO_ADDR
// if not tmp then
20537: LD_VAR 0 7
20541: NOT
20542: IFFALSE 20546
// continue ;
20544: GO 20482
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
20546: LD_ADDR_VAR 0 3
20550: PUSH
20551: LD_INT 5
20553: PPUSH
20554: LD_INT 22
20556: PUSH
20557: LD_INT 0
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 25
20566: PUSH
20567: LD_INT 12
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PPUSH
20578: CALL_OW 70
20582: PUSH
20583: FOR_IN
20584: IFFALSE 20617
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
20586: LD_VAR 0 7
20590: PPUSH
20591: LD_VAR 0 3
20595: PPUSH
20596: CALL_OW 250
20600: PPUSH
20601: LD_VAR 0 3
20605: PPUSH
20606: CALL_OW 251
20610: PPUSH
20611: CALL_OW 131
20615: GO 20583
20617: POP
20618: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
20619: LD_INT 22
20621: PUSH
20622: LD_INT 2
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 25
20631: PUSH
20632: LD_INT 4
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PPUSH
20643: CALL_OW 69
20647: PUSH
20648: LD_INT 0
20650: EQUAL
20651: PUSH
20652: LD_INT 5
20654: PPUSH
20655: LD_INT 22
20657: PUSH
20658: LD_INT 0
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 25
20667: PUSH
20668: LD_INT 12
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PPUSH
20679: CALL_OW 70
20683: PUSH
20684: LD_INT 2
20686: LESS
20687: OR
20688: PUSH
20689: LD_OWVAR 1
20693: PUSH
20694: LD_INT 7000
20696: GREATEREQUAL
20697: OR
20698: IFFALSE 20482
// repeat wait ( 0 0$1 ) ;
20700: LD_INT 35
20702: PPUSH
20703: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
20707: LD_ADDR_VAR 0 5
20711: PUSH
20712: LD_INT 22
20714: PUSH
20715: LD_INT 2
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 30
20724: PUSH
20725: LD_INT 5
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PPUSH
20736: CALL_OW 69
20740: ST_TO_ADDR
// until arm ;
20741: LD_VAR 0 5
20745: IFFALSE 20700
// wait ( 0 0$25 ) ;
20747: LD_INT 875
20749: PPUSH
20750: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20754: LD_ADDR_VAR 0 6
20758: PUSH
20759: LD_INT 22
20761: PUSH
20762: LD_INT 2
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 2
20771: PUSH
20772: LD_INT 30
20774: PUSH
20775: LD_INT 0
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 30
20784: PUSH
20785: LD_INT 1
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: LIST
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PPUSH
20801: CALL_OW 69
20805: ST_TO_ADDR
// j := 0 ;
20806: LD_ADDR_VAR 0 3
20810: PUSH
20811: LD_INT 0
20813: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
20814: LD_ADDR_VAR 0 2
20818: PUSH
20819: LD_INT 22
20821: PUSH
20822: LD_INT 2
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 25
20831: PUSH
20832: LD_INT 12
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PPUSH
20843: CALL_OW 69
20847: PUSH
20848: FOR_IN
20849: IFFALSE 20936
// begin ComMoveXY ( i , 63 , 16 ) ;
20851: LD_VAR 0 2
20855: PPUSH
20856: LD_INT 63
20858: PPUSH
20859: LD_INT 16
20861: PPUSH
20862: CALL_OW 111
// j := j + 1 ;
20866: LD_ADDR_VAR 0 3
20870: PUSH
20871: LD_VAR 0 3
20875: PUSH
20876: LD_INT 1
20878: PLUS
20879: ST_TO_ADDR
// if j < 5 then
20880: LD_VAR 0 3
20884: PUSH
20885: LD_INT 5
20887: LESS
20888: IFFALSE 20906
// b := arm [ 1 ] else
20890: LD_ADDR_VAR 0 4
20894: PUSH
20895: LD_VAR 0 5
20899: PUSH
20900: LD_INT 1
20902: ARRAY
20903: ST_TO_ADDR
20904: GO 20920
// b := dep [ 1 ] ;
20906: LD_ADDR_VAR 0 4
20910: PUSH
20911: LD_VAR 0 6
20915: PUSH
20916: LD_INT 1
20918: ARRAY
20919: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
20920: LD_VAR 0 2
20924: PPUSH
20925: LD_VAR 0 4
20929: PPUSH
20930: CALL_OW 180
// end ;
20934: GO 20848
20936: POP
20937: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
20938: LD_ADDR_VAR 0 2
20942: PUSH
20943: LD_INT 22
20945: PUSH
20946: LD_INT 2
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 25
20955: PUSH
20956: LD_INT 4
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PPUSH
20967: CALL_OW 69
20971: PUSH
20972: FOR_IN
20973: IFFALSE 21019
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
20975: LD_VAR 0 2
20979: PPUSH
20980: LD_INT 22
20982: PUSH
20983: LD_INT 2
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 30
20992: PUSH
20993: LD_INT 8
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PPUSH
21004: CALL_OW 69
21008: PUSH
21009: LD_INT 1
21011: ARRAY
21012: PPUSH
21013: CALL_OW 120
21017: GO 20972
21019: POP
21020: POP
// end ;
21021: LD_VAR 0 1
21025: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
21026: LD_INT 0
21028: PPUSH
21029: PPUSH
21030: PPUSH
21031: PPUSH
21032: PPUSH
21033: PPUSH
21034: PPUSH
21035: PPUSH
21036: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
21037: LD_INT 22
21039: PUSH
21040: LD_VAR 0 1
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 21
21051: PUSH
21052: LD_INT 2
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PPUSH
21063: CALL_OW 69
21067: PUSH
21068: LD_VAR 0 3
21072: LESSEQUAL
21073: IFFALSE 21217
// for i = 1 to vehCount do
21075: LD_ADDR_VAR 0 10
21079: PUSH
21080: DOUBLE
21081: LD_INT 1
21083: DEC
21084: ST_TO_ADDR
21085: LD_VAR 0 3
21089: PUSH
21090: FOR_TO
21091: IFFALSE 21215
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
21093: LD_ADDR_VAR 0 12
21097: PUSH
21098: LD_VAR 0 5
21102: PUSH
21103: LD_INT 1
21105: PPUSH
21106: LD_VAR 0 5
21110: PPUSH
21111: CALL_OW 12
21115: ARRAY
21116: ST_TO_ADDR
// if randWeapon = 46 then
21117: LD_VAR 0 12
21121: PUSH
21122: LD_INT 46
21124: EQUAL
21125: IFFALSE 21170
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
21127: LD_VAR 0 2
21131: PPUSH
21132: LD_INT 24
21134: PPUSH
21135: LD_VAR 0 6
21139: PPUSH
21140: LD_VAR 0 7
21144: PUSH
21145: LD_INT 1
21147: PPUSH
21148: LD_VAR 0 7
21152: PPUSH
21153: CALL_OW 12
21157: ARRAY
21158: PPUSH
21159: LD_VAR 0 12
21163: PPUSH
21164: CALL_OW 185
21168: GO 21213
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
21170: LD_VAR 0 2
21174: PPUSH
21175: LD_VAR 0 8
21179: PPUSH
21180: LD_VAR 0 6
21184: PPUSH
21185: LD_VAR 0 7
21189: PUSH
21190: LD_INT 1
21192: PPUSH
21193: LD_VAR 0 7
21197: PPUSH
21198: CALL_OW 12
21202: ARRAY
21203: PPUSH
21204: LD_VAR 0 12
21208: PPUSH
21209: CALL_OW 185
// end ;
21213: GO 21090
21215: POP
21216: POP
// repeat wait ( 0 0$1 ) ;
21217: LD_INT 35
21219: PPUSH
21220: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
21224: LD_INT 22
21226: PUSH
21227: LD_VAR 0 1
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 21
21238: PUSH
21239: LD_INT 2
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 24
21248: PUSH
21249: LD_INT 250
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: LIST
21260: PPUSH
21261: CALL_OW 69
21265: PUSH
21266: LD_VAR 0 3
21270: GREATEREQUAL
21271: IFFALSE 21217
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
21273: LD_INT 22
21275: PUSH
21276: LD_VAR 0 1
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 21
21287: PUSH
21288: LD_INT 2
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: LD_INT 24
21297: PUSH
21298: LD_INT 250
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: LIST
21309: PPUSH
21310: CALL_OW 69
21314: PUSH
21315: LD_VAR 0 3
21319: GREATEREQUAL
21320: IFFALSE 21663
// begin repeat begin wait ( 0 0$1 ) ;
21322: LD_INT 35
21324: PPUSH
21325: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
21329: LD_INT 22
21331: PUSH
21332: LD_VAR 0 1
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 21
21343: PUSH
21344: LD_INT 2
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 24
21353: PUSH
21354: LD_INT 651
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: LIST
21365: PPUSH
21366: CALL_OW 69
21370: PUSH
21371: LD_INT 0
21373: GREATER
21374: IFFALSE 21602
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
21376: LD_ADDR_VAR 0 10
21380: PUSH
21381: LD_INT 22
21383: PUSH
21384: LD_VAR 0 1
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: PUSH
21393: LD_INT 21
21395: PUSH
21396: LD_INT 2
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: PUSH
21403: LD_INT 24
21405: PUSH
21406: LD_INT 651
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: LIST
21417: PPUSH
21418: CALL_OW 69
21422: PUSH
21423: FOR_IN
21424: IFFALSE 21600
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
21426: LD_ADDR_VAR 0 16
21430: PUSH
21431: LD_INT 22
21433: PUSH
21434: LD_VAR 0 4
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PPUSH
21443: CALL_OW 69
21447: PPUSH
21448: LD_VAR 0 10
21452: PPUSH
21453: CALL_OW 74
21457: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
21458: LD_ADDR_VAR 0 17
21462: PUSH
21463: LD_INT 22
21465: PUSH
21466: LD_VAR 0 4
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 2
21477: PUSH
21478: LD_INT 59
21480: PUSH
21481: EMPTY
21482: LIST
21483: PUSH
21484: LD_INT 21
21486: PUSH
21487: LD_INT 1
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 21
21496: PUSH
21497: LD_INT 2
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: EMPTY
21515: LIST
21516: PPUSH
21517: CALL_OW 69
21521: PPUSH
21522: LD_VAR 0 10
21526: PPUSH
21527: CALL_OW 74
21531: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
21532: LD_VAR 0 10
21536: PPUSH
21537: LD_VAR 0 16
21541: PPUSH
21542: CALL_OW 296
21546: PUSH
21547: LD_INT 8
21549: PLUS
21550: PUSH
21551: LD_VAR 0 10
21555: PPUSH
21556: LD_VAR 0 17
21560: PPUSH
21561: CALL_OW 296
21565: LESS
21566: IFFALSE 21584
// begin ComAttackUnit ( i , target1 ) ;
21568: LD_VAR 0 10
21572: PPUSH
21573: LD_VAR 0 16
21577: PPUSH
21578: CALL_OW 115
// end else
21582: GO 21598
// begin ComAttackUnit ( i , target2 ) ;
21584: LD_VAR 0 10
21588: PPUSH
21589: LD_VAR 0 17
21593: PPUSH
21594: CALL_OW 115
// end ; end ;
21598: GO 21423
21600: POP
21601: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
21602: LD_INT 22
21604: PUSH
21605: LD_VAR 0 1
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 21
21616: PUSH
21617: LD_INT 2
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PPUSH
21628: CALL_OW 69
21632: PUSH
21633: LD_INT 0
21635: EQUAL
21636: PUSH
21637: LD_INT 22
21639: PUSH
21640: LD_VAR 0 4
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: EMPTY
21650: LIST
21651: PPUSH
21652: CALL_OW 69
21656: PUSH
21657: LD_INT 0
21659: EQUAL
21660: OR
21661: IFFALSE 21322
// end ; end ;
21663: LD_VAR 0 9
21667: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
21668: LD_INT 0
21670: PPUSH
21671: PPUSH
21672: PPUSH
21673: PPUSH
// r := 100 ;
21674: LD_ADDR_VAR 0 5
21678: PUSH
21679: LD_INT 100
21681: ST_TO_ADDR
// x := 0 ;
21682: LD_ADDR_VAR 0 6
21686: PUSH
21687: LD_INT 0
21689: ST_TO_ADDR
// while ( x < n ) do
21690: LD_VAR 0 6
21694: PUSH
21695: LD_VAR 0 2
21699: LESS
21700: IFFALSE 21987
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
21702: LD_ADDR_VAR 0 4
21706: PUSH
21707: DOUBLE
21708: LD_INT 1
21710: DEC
21711: ST_TO_ADDR
21712: LD_VAR 0 1
21716: PPUSH
21717: LD_INT 0
21719: PPUSH
21720: CALL_OW 517
21724: PUSH
21725: LD_INT 1
21727: ARRAY
21728: PUSH
21729: FOR_TO
21730: IFFALSE 21983
// begin if r > 50 then
21732: LD_VAR 0 5
21736: PUSH
21737: LD_INT 50
21739: GREATER
21740: IFFALSE 21959
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
21742: LD_VAR 0 1
21746: PPUSH
21747: LD_INT 0
21749: PPUSH
21750: CALL_OW 517
21754: PUSH
21755: LD_INT 1
21757: ARRAY
21758: PUSH
21759: LD_VAR 0 4
21763: ARRAY
21764: PPUSH
21765: LD_VAR 0 1
21769: PPUSH
21770: LD_INT 0
21772: PPUSH
21773: CALL_OW 517
21777: PUSH
21778: LD_INT 2
21780: ARRAY
21781: PUSH
21782: LD_VAR 0 4
21786: ARRAY
21787: PPUSH
21788: CALL_OW 458
21792: NOT
21793: IFFALSE 21943
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
21795: LD_VAR 0 1
21799: PPUSH
21800: LD_INT 0
21802: PPUSH
21803: CALL_OW 517
21807: PUSH
21808: LD_INT 1
21810: ARRAY
21811: PUSH
21812: LD_VAR 0 4
21816: ARRAY
21817: PPUSH
21818: LD_VAR 0 1
21822: PPUSH
21823: LD_INT 0
21825: PPUSH
21826: CALL_OW 517
21830: PUSH
21831: LD_INT 2
21833: ARRAY
21834: PUSH
21835: LD_VAR 0 4
21839: ARRAY
21840: PPUSH
21841: LD_INT 5
21843: PPUSH
21844: LD_INT 0
21846: PPUSH
21847: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
21851: LD_ADDR_EXP 52
21855: PUSH
21856: LD_EXP 52
21860: PPUSH
21861: LD_INT 1
21863: PPUSH
21864: LD_VAR 0 1
21868: PPUSH
21869: LD_INT 0
21871: PPUSH
21872: CALL_OW 517
21876: PUSH
21877: LD_INT 1
21879: ARRAY
21880: PUSH
21881: LD_VAR 0 4
21885: ARRAY
21886: PUSH
21887: LD_VAR 0 1
21891: PPUSH
21892: LD_INT 0
21894: PPUSH
21895: CALL_OW 517
21899: PUSH
21900: LD_INT 2
21902: ARRAY
21903: PUSH
21904: LD_VAR 0 4
21908: ARRAY
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PPUSH
21914: CALL_OW 2
21918: ST_TO_ADDR
// r := 0 ;
21919: LD_ADDR_VAR 0 5
21923: PUSH
21924: LD_INT 0
21926: ST_TO_ADDR
// x := x + 1 ;
21927: LD_ADDR_VAR 0 6
21931: PUSH
21932: LD_VAR 0 6
21936: PUSH
21937: LD_INT 1
21939: PLUS
21940: ST_TO_ADDR
// end else
21941: GO 21957
// r := r + 35 ;
21943: LD_ADDR_VAR 0 5
21947: PUSH
21948: LD_VAR 0 5
21952: PUSH
21953: LD_INT 35
21955: PLUS
21956: ST_TO_ADDR
// end else
21957: GO 21981
// r := r + rand ( 10 , 25 ) ;
21959: LD_ADDR_VAR 0 5
21963: PUSH
21964: LD_VAR 0 5
21968: PUSH
21969: LD_INT 10
21971: PPUSH
21972: LD_INT 25
21974: PPUSH
21975: CALL_OW 12
21979: PLUS
21980: ST_TO_ADDR
// end ;
21981: GO 21729
21983: POP
21984: POP
21985: GO 21690
// end ; end_of_file
21987: LD_VAR 0 3
21991: RET
// every 0 0$1 trigger russianAI = 1 do
21992: LD_EXP 41
21996: PUSH
21997: LD_INT 1
21999: EQUAL
22000: IFFALSE 22219
22002: GO 22004
22004: DISABLE
// begin enable ;
22005: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
22006: LD_INT 3
22008: PPUSH
22009: LD_EXP 32
22013: PPUSH
22014: CALL 16470 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
22018: LD_INT 3
22020: PPUSH
22021: LD_EXP 44
22025: PPUSH
22026: CALL 16830 0 2
// if ruPossition = 1 then
22030: LD_EXP 43
22034: PUSH
22035: LD_INT 1
22037: EQUAL
22038: IFFALSE 22093
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
22040: LD_INT 3
22042: PPUSH
22043: LD_INT 13
22045: PPUSH
22046: LD_INT 10
22048: PPUSH
22049: LD_INT 22
22051: PUSH
22052: LD_INT 3
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 21
22061: PUSH
22062: LD_INT 3
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 30
22071: PUSH
22072: LD_INT 8
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: LIST
22083: PPUSH
22084: CALL_OW 69
22088: PPUSH
22089: CALL 17036 0 4
// if ruPossition = 2 then
22093: LD_EXP 43
22097: PUSH
22098: LD_INT 2
22100: EQUAL
22101: IFFALSE 22156
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
22103: LD_INT 3
22105: PPUSH
22106: LD_INT 14
22108: PPUSH
22109: LD_INT 11
22111: PPUSH
22112: LD_INT 22
22114: PUSH
22115: LD_INT 3
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 21
22124: PUSH
22125: LD_INT 3
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 30
22134: PUSH
22135: LD_INT 8
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: LIST
22146: PPUSH
22147: CALL_OW 69
22151: PPUSH
22152: CALL 17036 0 4
// if ruPossition = 3 then
22156: LD_EXP 43
22160: PUSH
22161: LD_INT 3
22163: EQUAL
22164: IFFALSE 22219
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
22166: LD_INT 3
22168: PPUSH
22169: LD_INT 15
22171: PPUSH
22172: LD_INT 12
22174: PPUSH
22175: LD_INT 22
22177: PUSH
22178: LD_INT 3
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 21
22187: PUSH
22188: LD_INT 3
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: LD_INT 30
22197: PUSH
22198: LD_INT 8
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: LIST
22209: PPUSH
22210: CALL_OW 69
22214: PPUSH
22215: CALL 17036 0 4
// end ;
22219: END
// every 0 0$1 do
22220: GO 22222
22222: DISABLE
// begin enable ;
22223: ENABLE
// if ruPossition = 1 then
22224: LD_EXP 43
22228: PUSH
22229: LD_INT 1
22231: EQUAL
22232: IFFALSE 22244
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
22234: LD_INT 3
22236: PPUSH
22237: LD_INT 10
22239: PPUSH
22240: CALL 16107 0 2
// if ruPossition = 2 then
22244: LD_EXP 43
22248: PUSH
22249: LD_INT 2
22251: EQUAL
22252: IFFALSE 22264
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
22254: LD_INT 3
22256: PPUSH
22257: LD_INT 11
22259: PPUSH
22260: CALL 16107 0 2
// if ruPossition = 3 then
22264: LD_EXP 43
22268: PUSH
22269: LD_INT 3
22271: EQUAL
22272: IFFALSE 22284
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
22274: LD_INT 3
22276: PPUSH
22277: LD_INT 12
22279: PPUSH
22280: CALL 16107 0 2
// IntBazooka ( 3 , 1 ) ;
22284: LD_INT 3
22286: PPUSH
22287: LD_INT 1
22289: PPUSH
22290: CALL 14906 0 2
// IntBazooka ( 6 , 1 ) ;
22294: LD_INT 6
22296: PPUSH
22297: LD_INT 1
22299: PPUSH
22300: CALL 14906 0 2
// end ;
22304: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
22305: LD_EXP 41
22309: PUSH
22310: LD_INT 1
22312: EQUAL
22313: PUSH
22314: LD_EXP 37
22318: PPUSH
22319: CALL_OW 302
22323: AND
22324: PUSH
22325: LD_EXP 37
22329: PPUSH
22330: CALL_OW 255
22334: PUSH
22335: LD_INT 3
22337: EQUAL
22338: AND
22339: PUSH
22340: LD_INT 22
22342: PUSH
22343: LD_INT 3
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 21
22352: PUSH
22353: LD_INT 2
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 33
22362: PUSH
22363: LD_INT 3
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: LIST
22374: PPUSH
22375: CALL_OW 69
22379: PUSH
22380: LD_INT 0
22382: EQUAL
22383: AND
22384: IFFALSE 22592
22386: GO 22388
22388: DISABLE
// begin enable ;
22389: ENABLE
// if Difficulty = 1 then
22390: LD_OWVAR 67
22394: PUSH
22395: LD_INT 1
22397: EQUAL
22398: IFFALSE 22460
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22400: LD_INT 3
22402: PPUSH
22403: LD_EXP 37
22407: PPUSH
22408: LD_INT 5
22410: PPUSH
22411: LD_INT 8
22413: PPUSH
22414: CALL_OW 12
22418: PPUSH
22419: LD_INT 1
22421: PPUSH
22422: LD_INT 43
22424: PUSH
22425: LD_INT 44
22427: PUSH
22428: LD_INT 45
22430: PUSH
22431: LD_INT 46
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: PPUSH
22440: LD_INT 1
22442: PPUSH
22443: LD_INT 3
22445: PUSH
22446: LD_INT 3
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PPUSH
22453: LD_INT 22
22455: PPUSH
22456: CALL 21026 0 8
// if Difficulty = 2 then
22460: LD_OWVAR 67
22464: PUSH
22465: LD_INT 2
22467: EQUAL
22468: IFFALSE 22526
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22470: LD_INT 3
22472: PPUSH
22473: LD_EXP 37
22477: PPUSH
22478: LD_INT 6
22480: PPUSH
22481: LD_INT 8
22483: PPUSH
22484: CALL_OW 12
22488: PPUSH
22489: LD_INT 1
22491: PPUSH
22492: LD_INT 44
22494: PUSH
22495: LD_INT 45
22497: PUSH
22498: LD_INT 46
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: LIST
22505: PPUSH
22506: LD_INT 1
22508: PPUSH
22509: LD_INT 3
22511: PUSH
22512: LD_INT 3
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PPUSH
22519: LD_INT 22
22521: PPUSH
22522: CALL 21026 0 8
// if Difficulty >= 3 then
22526: LD_OWVAR 67
22530: PUSH
22531: LD_INT 3
22533: GREATEREQUAL
22534: IFFALSE 22592
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22536: LD_INT 3
22538: PPUSH
22539: LD_EXP 37
22543: PPUSH
22544: LD_INT 7
22546: PPUSH
22547: LD_INT 8
22549: PPUSH
22550: CALL_OW 12
22554: PPUSH
22555: LD_INT 1
22557: PPUSH
22558: LD_INT 44
22560: PUSH
22561: LD_INT 45
22563: PUSH
22564: LD_INT 46
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: LIST
22571: PPUSH
22572: LD_INT 1
22574: PPUSH
22575: LD_INT 3
22577: PUSH
22578: LD_INT 3
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PPUSH
22585: LD_INT 22
22587: PPUSH
22588: CALL 21026 0 8
// end ;
22592: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
22593: LD_EXP 52
22597: PUSH
22598: LD_EXP 51
22602: AND
22603: IFFALSE 22724
22605: GO 22607
22607: DISABLE
22608: LD_INT 0
22610: PPUSH
// begin enable ;
22611: ENABLE
// for i in arabianMines do
22612: LD_ADDR_VAR 0 1
22616: PUSH
22617: LD_EXP 52
22621: PUSH
22622: FOR_IN
22623: IFFALSE 22722
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
22625: LD_INT 22
22627: PUSH
22628: LD_INT 1
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 92
22637: PUSH
22638: LD_VAR 0 1
22642: PUSH
22643: LD_INT 1
22645: ARRAY
22646: PUSH
22647: LD_VAR 0 1
22651: PUSH
22652: LD_INT 2
22654: ARRAY
22655: PUSH
22656: LD_INT 3
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PPUSH
22669: CALL_OW 69
22673: IFFALSE 22720
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
22675: LD_VAR 0 1
22679: PUSH
22680: LD_INT 1
22682: ARRAY
22683: PPUSH
22684: LD_VAR 0 1
22688: PUSH
22689: LD_INT 2
22691: ARRAY
22692: PPUSH
22693: LD_INT 5
22695: PPUSH
22696: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
22700: LD_ADDR_EXP 52
22704: PUSH
22705: LD_EXP 52
22709: PPUSH
22710: LD_VAR 0 1
22714: PPUSH
22715: CALL_OW 3
22719: ST_TO_ADDR
// end ; end ;
22720: GO 22622
22722: POP
22723: POP
// end ; end_of_file
22724: PPOPN 1
22726: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
22727: LD_VAR 0 1
22731: PPUSH
22732: CALL_OW 255
22736: PUSH
22737: LD_INT 4
22739: EQUAL
22740: IFFALSE 22754
// SetBName ( building , epsilon ) ;
22742: LD_VAR 0 1
22746: PPUSH
22747: LD_STRING epsilon
22749: PPUSH
22750: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
22754: LD_VAR 0 1
22758: PPUSH
22759: CALL_OW 255
22763: PUSH
22764: LD_INT 1
22766: EQUAL
22767: PUSH
22768: LD_VAR 0 1
22772: PPUSH
22773: CALL_OW 266
22777: PUSH
22778: LD_INT 0
22780: EQUAL
22781: AND
22782: IFFALSE 22796
// SetBName ( building , epsilon ) ;
22784: LD_VAR 0 1
22788: PPUSH
22789: LD_STRING epsilon
22791: PPUSH
22792: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
22796: LD_VAR 0 1
22800: PPUSH
22801: CALL_OW 255
22805: PUSH
22806: LD_INT 3
22808: EQUAL
22809: PUSH
22810: LD_VAR 0 1
22814: PPUSH
22815: CALL_OW 266
22819: PUSH
22820: LD_INT 0
22822: EQUAL
22823: AND
22824: IFFALSE 22838
// SetBName ( building , chuikov ) ;
22826: LD_VAR 0 1
22830: PPUSH
22831: LD_STRING chuikov
22833: PPUSH
22834: CALL_OW 500
// if GetSide ( building ) = 2 then
22838: LD_VAR 0 1
22842: PPUSH
22843: CALL_OW 255
22847: PUSH
22848: LD_INT 2
22850: EQUAL
22851: IFFALSE 22907
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22853: LD_VAR 0 1
22857: PPUSH
22858: CALL_OW 266
22862: PUSH
22863: LD_INT 6
22865: EQUAL
22866: PUSH
22867: LD_VAR 0 1
22871: PPUSH
22872: CALL_OW 266
22876: PUSH
22877: LD_INT 9
22879: EQUAL
22880: OR
22881: IFFALSE 22907
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22883: LD_VAR 0 1
22887: PPUSH
22888: LD_INT 10
22890: PPUSH
22891: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22895: LD_VAR 0 1
22899: PPUSH
22900: LD_INT 11
22902: PPUSH
22903: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
22907: LD_VAR 0 1
22911: PPUSH
22912: CALL_OW 255
22916: PUSH
22917: LD_INT 3
22919: EQUAL
22920: IFFALSE 22954
// begin ruDepotConstructed := true ;
22922: LD_ADDR_EXP 59
22926: PUSH
22927: LD_INT 1
22929: ST_TO_ADDR
// if GetBType ( building ) = 2 then
22930: LD_VAR 0 1
22934: PPUSH
22935: CALL_OW 266
22939: PUSH
22940: LD_INT 2
22942: EQUAL
22943: IFFALSE 22954
// AddComUpgrade ( building ) ;
22945: LD_VAR 0 1
22949: PPUSH
22950: CALL_OW 206
// end ; end ;
22954: PPOPN 2
22956: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
22957: LD_INT 0
22959: PPUSH
22960: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
22961: LD_VAR 0 1
22965: PUSH
22966: LD_INT 22
22968: PUSH
22969: LD_INT 3
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 23
22978: PUSH
22979: LD_INT 3
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 21
22988: PUSH
22989: LD_INT 2
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: LIST
23000: PPUSH
23001: CALL_OW 69
23005: IN
23006: PUSH
23007: LD_EXP 63
23011: NOT
23012: AND
23013: IFFALSE 23044
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
23015: LD_ADDR_EXP 63
23019: PUSH
23020: LD_VAR 0 1
23024: PPUSH
23025: CALL_OW 250
23029: PUSH
23030: LD_VAR 0 1
23034: PPUSH
23035: CALL_OW 251
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: ST_TO_ADDR
// end ;
23044: PPOPN 3
23046: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
23047: LD_VAR 0 2
23051: PPUSH
23052: CALL_OW 255
23056: PUSH
23057: LD_INT 3
23059: EQUAL
23060: PUSH
23061: LD_EXP 37
23065: PPUSH
23066: CALL_OW 255
23070: PUSH
23071: LD_INT 3
23073: EQUAL
23074: AND
23075: PUSH
23076: LD_EXP 37
23080: PPUSH
23081: CALL_OW 302
23085: AND
23086: IFFALSE 23102
// ComEnterUnit ( human , ruFab ) ;
23088: LD_VAR 0 2
23092: PPUSH
23093: LD_EXP 37
23097: PPUSH
23098: CALL_OW 120
// end ;
23102: PPOPN 2
23104: END
// on BuildingComplete ( building ) do var i , engineers , sol , tmp ;
23105: LD_INT 0
23107: PPUSH
23108: PPUSH
23109: PPUSH
23110: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
23111: LD_VAR 0 1
23115: PPUSH
23116: CALL_OW 255
23120: PUSH
23121: LD_INT 1
23123: EQUAL
23124: PUSH
23125: LD_EXP 67
23129: PUSH
23130: LD_INT 0
23132: EQUAL
23133: AND
23134: IFFALSE 23336
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
23136: LD_VAR 0 1
23140: PPUSH
23141: CALL_OW 266
23145: PUSH
23146: LD_INT 26
23148: EQUAL
23149: PUSH
23150: LD_VAR 0 1
23154: PPUSH
23155: CALL_OW 266
23159: PUSH
23160: LD_INT 27
23162: EQUAL
23163: OR
23164: PUSH
23165: LD_VAR 0 1
23169: PPUSH
23170: CALL_OW 266
23174: PUSH
23175: LD_INT 28
23177: EQUAL
23178: OR
23179: IFFALSE 23336
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
23181: LD_INT 22
23183: PUSH
23184: LD_INT 1
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 2
23193: PUSH
23194: LD_INT 30
23196: PUSH
23197: LD_INT 7
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 30
23206: PUSH
23207: LD_INT 8
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: LIST
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PPUSH
23223: CALL_OW 69
23227: PUSH
23228: LD_INT 0
23230: GREATER
23231: IFFALSE 23336
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
23233: LD_ADDR_VAR 0 2
23237: PUSH
23238: LD_INT 22
23240: PUSH
23241: LD_INT 1
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 2
23250: PUSH
23251: LD_INT 30
23253: PUSH
23254: LD_INT 7
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 30
23263: PUSH
23264: LD_INT 8
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: LIST
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PPUSH
23280: CALL_OW 69
23284: PUSH
23285: FOR_IN
23286: IFFALSE 23334
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
23288: LD_VAR 0 2
23292: PPUSH
23293: LD_INT 1
23295: PPUSH
23296: CALL_OW 268
23300: PUSH
23301: LD_INT 11
23303: EQUAL
23304: PUSH
23305: LD_VAR 0 2
23309: PPUSH
23310: LD_INT 2
23312: PPUSH
23313: CALL_OW 268
23317: PUSH
23318: LD_INT 11
23320: EQUAL
23321: OR
23322: IFFALSE 23332
// eventVar1 = 1 ;
23324: LD_ADDR_EXP 67
23328: PUSH
23329: LD_INT 1
23331: ST_TO_ADDR
23332: GO 23285
23334: POP
23335: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
23336: LD_VAR 0 1
23340: PPUSH
23341: CALL_OW 255
23345: PUSH
23346: LD_INT 3
23348: EQUAL
23349: IFFALSE 23829
// begin if GetBType ( building ) = b_depot then
23351: LD_VAR 0 1
23355: PPUSH
23356: CALL_OW 266
23360: PUSH
23361: LD_INT 0
23363: EQUAL
23364: IFFALSE 23436
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
23366: LD_VAR 0 1
23370: PPUSH
23371: CALL_OW 274
23375: PPUSH
23376: LD_INT 1
23378: PPUSH
23379: LD_INT 5000
23381: PPUSH
23382: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
23386: LD_VAR 0 1
23390: PPUSH
23391: CALL_OW 274
23395: PPUSH
23396: LD_INT 2
23398: PPUSH
23399: LD_INT 300
23401: PPUSH
23402: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
23406: LD_VAR 0 1
23410: PPUSH
23411: CALL_OW 274
23415: PPUSH
23416: LD_INT 3
23418: PPUSH
23419: LD_INT 100
23421: PPUSH
23422: CALL_OW 277
// ruDepot = building ;
23426: LD_ADDR_EXP 32
23430: PUSH
23431: LD_VAR 0 1
23435: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23436: LD_VAR 0 1
23440: PPUSH
23441: CALL_OW 266
23445: PUSH
23446: LD_INT 0
23448: EQUAL
23449: PUSH
23450: LD_VAR 0 1
23454: PPUSH
23455: CALL_OW 266
23459: PUSH
23460: LD_INT 2
23462: EQUAL
23463: OR
23464: PUSH
23465: LD_VAR 0 1
23469: PPUSH
23470: CALL_OW 266
23474: PUSH
23475: LD_INT 4
23477: EQUAL
23478: OR
23479: IFFALSE 23490
// ComUpgrade ( building ) ;
23481: LD_VAR 0 1
23485: PPUSH
23486: CALL_OW 146
// if GetBType ( building ) = b_lab then
23490: LD_VAR 0 1
23494: PPUSH
23495: CALL_OW 266
23499: PUSH
23500: LD_INT 6
23502: EQUAL
23503: IFFALSE 23706
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
23505: LD_INT 22
23507: PUSH
23508: LD_INT 3
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 30
23517: PUSH
23518: LD_INT 8
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PPUSH
23529: CALL_OW 69
23533: PUSH
23534: LD_INT 0
23536: EQUAL
23537: IFFALSE 23575
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23539: LD_VAR 0 1
23543: PPUSH
23544: LD_INT 10
23546: PPUSH
23547: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
23551: LD_VAR 0 1
23555: PPUSH
23556: LD_INT 12
23558: PPUSH
23559: CALL_OW 207
// ruLab1 = building ;
23563: LD_ADDR_EXP 33
23567: PUSH
23568: LD_VAR 0 1
23572: ST_TO_ADDR
// end else
23573: GO 23609
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
23575: LD_VAR 0 1
23579: PPUSH
23580: LD_INT 11
23582: PPUSH
23583: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
23587: LD_VAR 0 1
23591: PPUSH
23592: LD_INT 14
23594: PPUSH
23595: CALL_OW 207
// ruLab2 = building ;
23599: LD_ADDR_EXP 34
23603: PUSH
23604: LD_VAR 0 1
23608: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
23609: LD_INT 3
23611: PPUSH
23612: LD_VAR 0 1
23616: PPUSH
23617: LD_INT 3
23619: PPUSH
23620: CALL 16022 0 3
// if ruDestroyedBuildings > 0 then
23624: LD_EXP 44
23628: PUSH
23629: LD_INT 0
23631: GREATER
23632: IFFALSE 23706
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23634: LD_ADDR_EXP 44
23638: PUSH
23639: LD_EXP 44
23643: PPUSH
23644: LD_INT 1
23646: PPUSH
23647: CALL_OW 3
23651: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23652: LD_ADDR_EXP 44
23656: PUSH
23657: LD_EXP 44
23661: PPUSH
23662: LD_INT 1
23664: PPUSH
23665: CALL_OW 3
23669: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23670: LD_ADDR_EXP 44
23674: PUSH
23675: LD_EXP 44
23679: PPUSH
23680: LD_INT 1
23682: PPUSH
23683: CALL_OW 3
23687: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23688: LD_ADDR_EXP 44
23692: PUSH
23693: LD_EXP 44
23697: PPUSH
23698: LD_INT 1
23700: PPUSH
23701: CALL_OW 3
23705: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
23706: LD_VAR 0 1
23710: PPUSH
23711: CALL_OW 266
23715: PUSH
23716: LD_INT 32
23718: EQUAL
23719: IFFALSE 23756
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23721: LD_VAR 0 1
23725: PPUSH
23726: LD_INT 44
23728: PUSH
23729: LD_INT 45
23731: PUSH
23732: LD_INT 46
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 1
23742: PPUSH
23743: LD_INT 3
23745: PPUSH
23746: CALL_OW 12
23750: ARRAY
23751: PPUSH
23752: CALL_OW 208
// if GetBType ( building ) = b_turret then
23756: LD_VAR 0 1
23760: PPUSH
23761: CALL_OW 266
23765: PUSH
23766: LD_INT 33
23768: EQUAL
23769: IFFALSE 23806
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23771: LD_VAR 0 1
23775: PPUSH
23776: LD_INT 44
23778: PUSH
23779: LD_INT 45
23781: PUSH
23782: LD_INT 46
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 1
23792: PPUSH
23793: LD_INT 3
23795: PPUSH
23796: CALL_OW 12
23800: ARRAY
23801: PPUSH
23802: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
23806: LD_VAR 0 1
23810: PPUSH
23811: CALL_OW 266
23815: PUSH
23816: LD_INT 24
23818: EQUAL
23819: IFFALSE 23829
// russianAI = 1 ;
23821: LD_ADDR_EXP 41
23825: PUSH
23826: LD_INT 1
23828: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
23829: LD_VAR 0 1
23833: PPUSH
23834: CALL_OW 255
23838: PUSH
23839: LD_INT 2
23841: EQUAL
23842: IFFALSE 24721
// begin if GetBType ( building ) = arBuildingsTab [ 1 ] [ 1 ] then
23844: LD_VAR 0 1
23848: PPUSH
23849: CALL_OW 266
23853: PUSH
23854: LD_EXP 70
23858: PUSH
23859: LD_INT 1
23861: ARRAY
23862: PUSH
23863: LD_INT 1
23865: ARRAY
23866: EQUAL
23867: IFFALSE 23994
// begin arBuildingsTab := Delete ( arBuildingsTab , 1 ) ;
23869: LD_ADDR_EXP 70
23873: PUSH
23874: LD_EXP 70
23878: PPUSH
23879: LD_INT 1
23881: PPUSH
23882: CALL_OW 3
23886: ST_TO_ADDR
// if arBuildingsTab then
23887: LD_EXP 70
23891: IFFALSE 23994
// begin engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
23893: LD_ADDR_VAR 0 3
23897: PUSH
23898: LD_INT 22
23900: PUSH
23901: LD_INT 2
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 25
23910: PUSH
23911: LD_INT 2
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PPUSH
23922: CALL_OW 69
23926: ST_TO_ADDR
// if engineers then
23927: LD_VAR 0 3
23931: IFFALSE 23994
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
23933: LD_VAR 0 3
23937: PPUSH
23938: LD_EXP 70
23942: PUSH
23943: LD_INT 1
23945: ARRAY
23946: PUSH
23947: LD_INT 1
23949: ARRAY
23950: PPUSH
23951: LD_EXP 70
23955: PUSH
23956: LD_INT 1
23958: ARRAY
23959: PUSH
23960: LD_INT 2
23962: ARRAY
23963: PPUSH
23964: LD_EXP 70
23968: PUSH
23969: LD_INT 1
23971: ARRAY
23972: PUSH
23973: LD_INT 3
23975: ARRAY
23976: PPUSH
23977: LD_EXP 70
23981: PUSH
23982: LD_INT 1
23984: ARRAY
23985: PUSH
23986: LD_INT 4
23988: ARRAY
23989: PPUSH
23990: CALL_OW 205
// end ; end ; if GetBType ( building ) = b_breastwork then
23994: LD_VAR 0 1
23998: PPUSH
23999: CALL_OW 266
24003: PUSH
24004: LD_INT 31
24006: EQUAL
24007: IFFALSE 24153
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
24009: LD_ADDR_VAR 0 4
24013: PUSH
24014: LD_INT 22
24016: PUSH
24017: LD_INT 2
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 2
24026: PUSH
24027: LD_INT 25
24029: PUSH
24030: LD_INT 1
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 25
24039: PUSH
24040: LD_INT 8
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: LIST
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PPUSH
24056: CALL_OW 69
24060: PUSH
24061: LD_EXP 28
24065: DIFF
24066: ST_TO_ADDR
// if not sol then
24067: LD_VAR 0 4
24071: NOT
24072: IFFALSE 24076
// exit ;
24074: GO 24721
// for i in sol do
24076: LD_ADDR_VAR 0 2
24080: PUSH
24081: LD_VAR 0 4
24085: PUSH
24086: FOR_IN
24087: IFFALSE 24151
// if not GetTag ( i ) then
24089: LD_VAR 0 2
24093: PPUSH
24094: CALL_OW 110
24098: NOT
24099: IFFALSE 24149
// begin if IsInUnit ( i ) then
24101: LD_VAR 0 2
24105: PPUSH
24106: CALL_OW 310
24110: IFFALSE 24121
// ComExitBuilding ( i ) ;
24112: LD_VAR 0 2
24116: PPUSH
24117: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
24121: LD_VAR 0 2
24125: PPUSH
24126: LD_VAR 0 1
24130: PPUSH
24131: CALL_OW 180
// SetTag ( i , 11 ) ;
24135: LD_VAR 0 2
24139: PPUSH
24140: LD_INT 11
24142: PPUSH
24143: CALL_OW 109
// break ;
24147: GO 24151
// end ;
24149: GO 24086
24151: POP
24152: POP
// end ; if GetBType ( building ) = b_depot then
24153: LD_VAR 0 1
24157: PPUSH
24158: CALL_OW 266
24162: PUSH
24163: LD_INT 0
24165: EQUAL
24166: IFFALSE 24252
// begin arDepot = building ;
24168: LD_ADDR_EXP 45
24172: PUSH
24173: LD_VAR 0 1
24177: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
24178: LD_INT 38
24180: PUSH
24181: LD_INT 47
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PPUSH
24188: LD_INT 71
24190: PPUSH
24191: LD_INT 19
24193: PPUSH
24194: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
24198: LD_VAR 0 1
24202: PPUSH
24203: CALL_OW 274
24207: PPUSH
24208: LD_INT 1
24210: PPUSH
24211: LD_INT 500
24213: PPUSH
24214: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
24218: LD_VAR 0 1
24222: PPUSH
24223: CALL_OW 274
24227: PPUSH
24228: LD_INT 3
24230: PPUSH
24231: LD_INT 30
24233: PPUSH
24234: CALL_OW 277
// ComEnterUnit ( Dietrich , building ) ;
24238: LD_EXP 28
24242: PPUSH
24243: LD_VAR 0 1
24247: PPUSH
24248: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
24252: LD_VAR 0 1
24256: PPUSH
24257: CALL_OW 266
24261: PUSH
24262: LD_INT 6
24264: EQUAL
24265: PUSH
24266: LD_VAR 0 1
24270: PPUSH
24271: CALL_OW 266
24275: PUSH
24276: LD_INT 9
24278: EQUAL
24279: OR
24280: IFFALSE 24331
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
24282: LD_VAR 0 1
24286: PPUSH
24287: LD_INT 10
24289: PPUSH
24290: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
24294: LD_VAR 0 1
24298: PPUSH
24299: LD_INT 11
24301: PPUSH
24302: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
24306: LD_INT 2
24308: PPUSH
24309: LD_VAR 0 1
24313: PPUSH
24314: LD_INT 2
24316: PPUSH
24317: CALL 16022 0 3
// arLab = building ;
24321: LD_ADDR_EXP 46
24325: PUSH
24326: LD_VAR 0 1
24330: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
24331: LD_VAR 0 1
24335: PPUSH
24336: CALL_OW 266
24340: PUSH
24341: LD_INT 2
24343: EQUAL
24344: PUSH
24345: LD_VAR 0 1
24349: PPUSH
24350: CALL_OW 266
24354: PUSH
24355: LD_INT 4
24357: EQUAL
24358: OR
24359: IFFALSE 24430
// begin ComUpgrade ( building ) ;
24361: LD_VAR 0 1
24365: PPUSH
24366: CALL_OW 146
// if GetBType ( building ) = b_armoury then
24370: LD_VAR 0 1
24374: PPUSH
24375: CALL_OW 266
24379: PUSH
24380: LD_INT 4
24382: EQUAL
24383: IFFALSE 24430
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) diff Dietrich , 75 , 21 ) ;
24385: LD_INT 22
24387: PUSH
24388: LD_INT 2
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 25
24397: PUSH
24398: LD_INT 1
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PPUSH
24409: CALL_OW 69
24413: PUSH
24414: LD_EXP 28
24418: DIFF
24419: PPUSH
24420: LD_INT 75
24422: PPUSH
24423: LD_INT 21
24425: PPUSH
24426: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
24430: LD_VAR 0 1
24434: PPUSH
24435: CALL_OW 266
24439: PUSH
24440: LD_INT 27
24442: EQUAL
24443: IFFALSE 24721
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
24445: LD_INT 22
24447: PUSH
24448: LD_INT 2
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 30
24457: PUSH
24458: LD_INT 27
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PPUSH
24469: CALL_OW 69
24473: PUSH
24474: LD_INT 2
24476: EQUAL
24477: IFFALSE 24721
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
24479: LD_ADDR_VAR 0 2
24483: PUSH
24484: LD_INT 22
24486: PUSH
24487: LD_INT 2
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: LD_INT 21
24496: PUSH
24497: LD_INT 1
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 25
24506: PUSH
24507: LD_INT 2
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: LIST
24518: PPUSH
24519: CALL_OW 69
24523: PUSH
24524: LD_INT 1
24526: ARRAY
24527: ST_TO_ADDR
// if not i then
24528: LD_VAR 0 2
24532: NOT
24533: IFFALSE 24537
// exit ;
24535: GO 24721
// AddComMoveXY ( i , 92 , 34 ) ;
24537: LD_VAR 0 2
24541: PPUSH
24542: LD_INT 92
24544: PPUSH
24545: LD_INT 34
24547: PPUSH
24548: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24552: LD_VAR 0 2
24556: PPUSH
24557: LD_INT 35
24559: PPUSH
24560: CALL_OW 202
// AddComMoveXY ( i , 101 , 20 ) ;
24564: LD_VAR 0 2
24568: PPUSH
24569: LD_INT 101
24571: PPUSH
24572: LD_INT 20
24574: PPUSH
24575: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24579: LD_VAR 0 2
24583: PPUSH
24584: LD_INT 35
24586: PPUSH
24587: CALL_OW 202
// AddComMoveXY ( i , 115 , 30 ) ;
24591: LD_VAR 0 2
24595: PPUSH
24596: LD_INT 115
24598: PPUSH
24599: LD_INT 30
24601: PPUSH
24602: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24606: LD_VAR 0 2
24610: PPUSH
24611: LD_INT 35
24613: PPUSH
24614: CALL_OW 202
// AddComMoveXY ( i , 82 , 57 ) ;
24618: LD_VAR 0 2
24622: PPUSH
24623: LD_INT 82
24625: PPUSH
24626: LD_INT 57
24628: PPUSH
24629: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24633: LD_VAR 0 2
24637: PPUSH
24638: LD_INT 35
24640: PPUSH
24641: CALL_OW 202
// AddComMoveXY ( i , 36 , 28 ) ;
24645: LD_VAR 0 2
24649: PPUSH
24650: LD_INT 36
24652: PPUSH
24653: LD_INT 28
24655: PPUSH
24656: CALL_OW 171
// AddComWait ( i , 0 0$2 ) ;
24660: LD_VAR 0 2
24664: PPUSH
24665: LD_INT 70
24667: PPUSH
24668: CALL_OW 202
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
24672: LD_INT 22
24674: PUSH
24675: LD_INT 2
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PUSH
24682: LD_INT 21
24684: PUSH
24685: LD_INT 1
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 25
24694: PUSH
24695: LD_INT 2
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: LIST
24706: PPUSH
24707: CALL_OW 69
24711: PPUSH
24712: LD_EXP 45
24716: PPUSH
24717: CALL_OW 180
// end ; end ; end ;
24721: PPOPN 5
24723: END
// on UpgradeComplete ( building ) do var i ;
24724: LD_INT 0
24726: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
24727: LD_VAR 0 1
24731: PPUSH
24732: CALL_OW 255
24736: PUSH
24737: LD_INT 1
24739: EQUAL
24740: PUSH
24741: LD_EXP 67
24745: PUSH
24746: LD_INT 0
24748: EQUAL
24749: AND
24750: IFFALSE 24948
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
24752: LD_VAR 0 1
24756: PPUSH
24757: CALL_OW 266
24761: PUSH
24762: LD_INT 7
24764: EQUAL
24765: PUSH
24766: LD_VAR 0 1
24770: PPUSH
24771: CALL_OW 266
24775: PUSH
24776: LD_INT 8
24778: EQUAL
24779: OR
24780: IFFALSE 24948
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
24782: LD_INT 22
24784: PUSH
24785: LD_INT 1
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 2
24794: PUSH
24795: LD_INT 30
24797: PUSH
24798: LD_INT 26
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 30
24807: PUSH
24808: LD_INT 27
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 30
24817: PUSH
24818: LD_INT 28
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PPUSH
24835: CALL_OW 69
24839: PUSH
24840: LD_INT 0
24842: GREATER
24843: IFFALSE 24948
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
24845: LD_ADDR_VAR 0 2
24849: PUSH
24850: LD_INT 22
24852: PUSH
24853: LD_INT 1
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 2
24862: PUSH
24863: LD_INT 30
24865: PUSH
24866: LD_INT 7
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 30
24875: PUSH
24876: LD_INT 8
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: LIST
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PPUSH
24892: CALL_OW 69
24896: PUSH
24897: FOR_IN
24898: IFFALSE 24946
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
24900: LD_VAR 0 2
24904: PPUSH
24905: LD_INT 1
24907: PPUSH
24908: CALL_OW 268
24912: PUSH
24913: LD_INT 11
24915: EQUAL
24916: PUSH
24917: LD_VAR 0 2
24921: PPUSH
24922: LD_INT 2
24924: PPUSH
24925: CALL_OW 268
24929: PUSH
24930: LD_INT 11
24932: EQUAL
24933: OR
24934: IFFALSE 24944
// eventVar1 = 1 ;
24936: LD_ADDR_EXP 67
24940: PUSH
24941: LD_INT 1
24943: ST_TO_ADDR
24944: GO 24897
24946: POP
24947: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
24948: LD_VAR 0 1
24952: PPUSH
24953: CALL_OW 255
24957: PUSH
24958: LD_INT 2
24960: EQUAL
24961: IFFALSE 25066
// begin if GetBType ( building ) = b_barracks then
24963: LD_VAR 0 1
24967: PPUSH
24968: CALL_OW 266
24972: PUSH
24973: LD_INT 5
24975: EQUAL
24976: IFFALSE 25066
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
24978: LD_ADDR_VAR 0 2
24982: PUSH
24983: LD_INT 22
24985: PUSH
24986: LD_INT 2
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 25
24995: PUSH
24996: LD_INT 1
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 3
25005: PUSH
25006: LD_INT 54
25008: PUSH
25009: EMPTY
25010: LIST
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: LIST
25020: PPUSH
25021: CALL_OW 69
25025: PUSH
25026: LD_EXP 28
25030: PUSH
25031: EMPTY
25032: LIST
25033: DIFF
25034: PUSH
25035: FOR_IN
25036: IFFALSE 25054
// ComEnterUnit ( i , building ) ;
25038: LD_VAR 0 2
25042: PPUSH
25043: LD_VAR 0 1
25047: PPUSH
25048: CALL_OW 120
25052: GO 25035
25054: POP
25055: POP
// arArm = building ;
25056: LD_ADDR_EXP 47
25060: PUSH
25061: LD_VAR 0 1
25065: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
25066: LD_VAR 0 1
25070: PPUSH
25071: CALL_OW 255
25075: PUSH
25076: LD_INT 3
25078: EQUAL
25079: IFFALSE 25552
// begin if GetBType ( building ) = b_factory then
25081: LD_VAR 0 1
25085: PPUSH
25086: CALL_OW 266
25090: PUSH
25091: LD_INT 3
25093: EQUAL
25094: IFFALSE 25161
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
25096: LD_ADDR_VAR 0 2
25100: PUSH
25101: LD_INT 22
25103: PUSH
25104: LD_INT 3
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 25
25113: PUSH
25114: LD_INT 3
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PPUSH
25125: CALL_OW 69
25129: PUSH
25130: FOR_IN
25131: IFFALSE 25149
// ComEnterUnit ( i , building ) ;
25133: LD_VAR 0 2
25137: PPUSH
25138: LD_VAR 0 1
25142: PPUSH
25143: CALL_OW 120
25147: GO 25130
25149: POP
25150: POP
// ruFab = building ;
25151: LD_ADDR_EXP 37
25155: PUSH
25156: LD_VAR 0 1
25160: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
25161: LD_INT 22
25163: PUSH
25164: LD_INT 3
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 21
25173: PUSH
25174: LD_INT 3
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 30
25183: PUSH
25184: LD_INT 8
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: LIST
25195: PPUSH
25196: CALL_OW 69
25200: PUSH
25201: LD_INT 2
25203: EQUAL
25204: IFFALSE 25412
// begin for i = 1 to 2 do
25206: LD_ADDR_VAR 0 2
25210: PUSH
25211: DOUBLE
25212: LD_INT 1
25214: DEC
25215: ST_TO_ADDR
25216: LD_INT 2
25218: PUSH
25219: FOR_TO
25220: IFFALSE 25307
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
25222: LD_INT 22
25224: PUSH
25225: LD_INT 3
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 25
25234: PUSH
25235: LD_INT 4
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PPUSH
25246: CALL_OW 69
25250: PUSH
25251: LD_VAR 0 2
25255: ARRAY
25256: PPUSH
25257: LD_INT 22
25259: PUSH
25260: LD_INT 3
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 21
25269: PUSH
25270: LD_INT 3
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 30
25279: PUSH
25280: LD_INT 8
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: LIST
25291: PPUSH
25292: CALL_OW 69
25296: PUSH
25297: LD_INT 1
25299: ARRAY
25300: PPUSH
25301: CALL_OW 120
25305: GO 25219
25307: POP
25308: POP
// for i = 3 to 4 do
25309: LD_ADDR_VAR 0 2
25313: PUSH
25314: DOUBLE
25315: LD_INT 3
25317: DEC
25318: ST_TO_ADDR
25319: LD_INT 4
25321: PUSH
25322: FOR_TO
25323: IFFALSE 25410
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
25325: LD_INT 22
25327: PUSH
25328: LD_INT 3
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 25
25337: PUSH
25338: LD_INT 4
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PPUSH
25349: CALL_OW 69
25353: PUSH
25354: LD_VAR 0 2
25358: ARRAY
25359: PPUSH
25360: LD_INT 22
25362: PUSH
25363: LD_INT 3
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 21
25372: PUSH
25373: LD_INT 3
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 30
25382: PUSH
25383: LD_INT 8
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: LIST
25394: PPUSH
25395: CALL_OW 69
25399: PUSH
25400: LD_INT 2
25402: ARRAY
25403: PPUSH
25404: CALL_OW 120
25408: GO 25322
25410: POP
25411: POP
// end ; if GetBType ( building ) = b_barracks then
25412: LD_VAR 0 1
25416: PPUSH
25417: CALL_OW 266
25421: PUSH
25422: LD_INT 5
25424: EQUAL
25425: IFFALSE 25552
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
25427: LD_ADDR_VAR 0 2
25431: PUSH
25432: LD_INT 22
25434: PUSH
25435: LD_INT 3
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 25
25444: PUSH
25445: LD_INT 1
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 3
25454: PUSH
25455: LD_INT 54
25457: PUSH
25458: EMPTY
25459: LIST
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: LIST
25469: PPUSH
25470: CALL_OW 69
25474: PUSH
25475: FOR_IN
25476: IFFALSE 25494
// ComEnterUnit ( i , building ) ;
25478: LD_VAR 0 2
25482: PPUSH
25483: LD_VAR 0 1
25487: PPUSH
25488: CALL_OW 120
25492: GO 25475
25494: POP
25495: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
25496: LD_INT 22
25498: PUSH
25499: LD_INT 3
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 30
25508: PUSH
25509: LD_INT 5
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PPUSH
25520: CALL_OW 69
25524: PUSH
25525: LD_INT 0
25527: EQUAL
25528: IFFALSE 25542
// ruArm1 = building else
25530: LD_ADDR_EXP 35
25534: PUSH
25535: LD_VAR 0 1
25539: ST_TO_ADDR
25540: GO 25552
// ruArm2 = building ;
25542: LD_ADDR_EXP 36
25546: PUSH
25547: LD_VAR 0 1
25551: ST_TO_ADDR
// end ; end ; end ;
25552: PPOPN 2
25554: END
// on EnterBuilding ( building , human ) do var rnd ;
25555: LD_INT 0
25557: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
25558: LD_VAR 0 2
25562: PPUSH
25563: CALL_OW 255
25567: PUSH
25568: LD_INT 2
25570: EQUAL
25571: PUSH
25572: LD_VAR 0 2
25576: PPUSH
25577: CALL_OW 257
25581: PUSH
25582: LD_INT 1
25584: EQUAL
25585: AND
25586: PUSH
25587: LD_VAR 0 1
25591: PUSH
25592: LD_EXP 47
25596: EQUAL
25597: AND
25598: IFFALSE 25645
// begin wait ( 0 0$1 ) ;
25600: LD_INT 35
25602: PPUSH
25603: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
25607: LD_ADDR_VAR 0 3
25611: PUSH
25612: LD_INT 1
25614: PPUSH
25615: LD_INT 100
25617: PPUSH
25618: CALL_OW 12
25622: ST_TO_ADDR
// if rnd > 50 then
25623: LD_VAR 0 3
25627: PUSH
25628: LD_INT 50
25630: GREATER
25631: IFFALSE 25645
// SetClass ( human , class_mortar ) ;
25633: LD_VAR 0 2
25637: PPUSH
25638: LD_INT 8
25640: PPUSH
25641: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
25645: LD_VAR 0 2
25649: PUSH
25650: LD_INT 22
25652: PUSH
25653: LD_INT 2
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 25
25662: PUSH
25663: LD_INT 12
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PPUSH
25674: CALL_OW 69
25678: IN
25679: IFFALSE 25729
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
25681: LD_VAR 0 1
25685: PPUSH
25686: CALL_OW 266
25690: PUSH
25691: LD_INT 0
25693: PUSH
25694: LD_INT 1
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: IN
25701: IFFALSE 25717
// SetClass ( human , class_apeman_engineer ) else
25703: LD_VAR 0 2
25707: PPUSH
25708: LD_INT 16
25710: PPUSH
25711: CALL_OW 336
25715: GO 25729
// SetClass ( human , class_apeman_soldier ) ;
25717: LD_VAR 0 2
25721: PPUSH
25722: LD_INT 15
25724: PPUSH
25725: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
25729: LD_VAR 0 2
25733: PPUSH
25734: CALL_OW 255
25738: PUSH
25739: LD_INT 3
25741: EQUAL
25742: PUSH
25743: LD_VAR 0 2
25747: PPUSH
25748: CALL_OW 257
25752: PUSH
25753: LD_INT 1
25755: EQUAL
25756: AND
25757: PUSH
25758: LD_VAR 0 1
25762: PUSH
25763: LD_EXP 35
25767: EQUAL
25768: PUSH
25769: LD_VAR 0 1
25773: PUSH
25774: LD_EXP 36
25778: EQUAL
25779: OR
25780: PUSH
25781: EMPTY
25782: LIST
25783: AND
25784: IFFALSE 25805
// begin wait ( 0 0$1 ) ;
25786: LD_INT 35
25788: PPUSH
25789: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
25793: LD_VAR 0 2
25797: PPUSH
25798: LD_INT 9
25800: PPUSH
25801: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
25805: LD_VAR 0 2
25809: PPUSH
25810: CALL_OW 255
25814: PUSH
25815: LD_INT 3
25817: EQUAL
25818: PUSH
25819: LD_VAR 0 2
25823: PPUSH
25824: CALL_OW 257
25828: PUSH
25829: LD_INT 9
25831: EQUAL
25832: AND
25833: PUSH
25834: LD_VAR 0 1
25838: PPUSH
25839: CALL_OW 266
25843: PUSH
25844: LD_INT 32
25846: EQUAL
25847: AND
25848: IFFALSE 25869
// begin wait ( 0 0$1 ) ;
25850: LD_INT 35
25852: PPUSH
25853: CALL_OW 67
// SetClass ( human , 1 ) ;
25857: LD_VAR 0 2
25861: PPUSH
25862: LD_INT 1
25864: PPUSH
25865: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
25869: LD_VAR 0 2
25873: PPUSH
25874: CALL_OW 255
25878: PUSH
25879: LD_INT 3
25881: EQUAL
25882: PUSH
25883: LD_VAR 0 2
25887: PPUSH
25888: CALL_OW 257
25892: PUSH
25893: LD_INT 3
25895: EQUAL
25896: AND
25897: PUSH
25898: LD_VAR 0 1
25902: PUSH
25903: LD_EXP 37
25907: EQUAL
25908: AND
25909: IFFALSE 25923
// SetLives ( human , 1000 ) ;
25911: LD_VAR 0 2
25915: PPUSH
25916: LD_INT 1000
25918: PPUSH
25919: CALL_OW 234
// end ;
25923: PPOPN 3
25925: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25926: LD_VAR 0 1
25930: PUSH
25931: LD_INT 1
25933: EQUAL
25934: PUSH
25935: LD_VAR 0 2
25939: PUSH
25940: LD_INT 2
25942: EQUAL
25943: AND
25944: PUSH
25945: LD_INT 1
25947: PPUSH
25948: LD_INT 2
25950: PPUSH
25951: CALL_OW 81
25955: PUSH
25956: LD_INT 1
25958: EQUAL
25959: AND
25960: IFFALSE 25981
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
25962: LD_EXP 26
25966: PPUSH
25967: LD_STRING D6b-Pow-1
25969: PPUSH
25970: CALL_OW 94
// YouLost ( Powell ) ;
25974: LD_STRING Powell
25976: PPUSH
25977: CALL_OW 104
// end ; end ;
25981: PPOPN 2
25983: END
// every 0 0$5 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
25984: LD_INT 23
25986: PPUSH
25987: LD_INT 22
25989: PUSH
25990: LD_INT 1
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 21
25999: PUSH
26000: LD_INT 3
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PPUSH
26011: CALL_OW 70
26015: PUSH
26016: LD_INT 23
26018: PPUSH
26019: LD_INT 22
26021: PUSH
26022: LD_INT 1
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 21
26031: PUSH
26032: LD_INT 2
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PPUSH
26043: CALL_OW 70
26047: OR
26048: PUSH
26049: LD_INT 1
26051: PPUSH
26052: LD_INT 2
26054: PPUSH
26055: CALL_OW 81
26059: PUSH
26060: LD_INT 1
26062: EQUAL
26063: AND
26064: IFFALSE 26303
26066: GO 26068
26068: DISABLE
// begin if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
26069: LD_INT 23
26071: PPUSH
26072: LD_INT 22
26074: PUSH
26075: LD_INT 1
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 21
26084: PUSH
26085: LD_INT 3
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PPUSH
26096: CALL_OW 70
26100: PUSH
26101: LD_INT 23
26103: PPUSH
26104: LD_INT 22
26106: PUSH
26107: LD_INT 1
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 21
26116: PUSH
26117: LD_INT 2
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PPUSH
26128: CALL_OW 70
26132: OR
26133: PUSH
26134: LD_INT 1
26136: PPUSH
26137: LD_INT 2
26139: PPUSH
26140: CALL_OW 81
26144: PUSH
26145: LD_INT 1
26147: EQUAL
26148: AND
26149: IFFALSE 26158
// Query ( QAttack ) ;
26151: LD_STRING QAttack
26153: PPUSH
26154: CALL_OW 97
// wait ( 0 0$20 ) ;
26158: LD_INT 700
26160: PPUSH
26161: CALL_OW 67
// repeat wait ( 0 0$10 ) ;
26165: LD_INT 350
26167: PPUSH
26168: CALL_OW 67
// if arabianTrait = 1 then
26172: LD_EXP 51
26176: PUSH
26177: LD_INT 1
26179: EQUAL
26180: IFFALSE 26184
// exit ;
26182: GO 26303
// until ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend ;
26184: LD_INT 23
26186: PPUSH
26187: LD_INT 22
26189: PUSH
26190: LD_INT 1
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 21
26199: PUSH
26200: LD_INT 3
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PPUSH
26211: CALL_OW 70
26215: PUSH
26216: LD_INT 23
26218: PPUSH
26219: LD_INT 22
26221: PUSH
26222: LD_INT 1
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 21
26231: PUSH
26232: LD_INT 2
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PPUSH
26243: CALL_OW 70
26247: OR
26248: PUSH
26249: LD_INT 1
26251: PPUSH
26252: LD_INT 2
26254: PPUSH
26255: CALL_OW 81
26259: PUSH
26260: LD_INT 1
26262: EQUAL
26263: AND
26264: IFFALSE 26165
// InGameOn ;
26266: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
26270: LD_INT 73
26272: PPUSH
26273: LD_INT 18
26275: PPUSH
26276: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
26280: LD_EXP 26
26284: PPUSH
26285: LD_STRING D6b-Pow-1
26287: PPUSH
26288: CALL_OW 94
// YouLost ( Powell ) ;
26292: LD_STRING Powell
26294: PPUSH
26295: CALL_OW 104
// InGameOff ;
26299: CALL_OW 9
// end ;
26303: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
26304: LD_VAR 0 1
26308: PPUSH
26309: CALL 46004 0 1
// if unit = Truman then
26313: LD_VAR 0 1
26317: PUSH
26318: LD_EXP 21
26322: EQUAL
26323: IFFALSE 26332
// YouLost ( Powell ) ;
26325: LD_STRING Powell
26327: PPUSH
26328: CALL_OW 104
// if unit = JMM then
26332: LD_VAR 0 1
26336: PUSH
26337: LD_EXP 1
26341: EQUAL
26342: IFFALSE 26351
// YouLost ( JMM ) ;
26344: LD_STRING JMM
26346: PPUSH
26347: CALL_OW 104
// if unit = Khatam then
26351: LD_VAR 0 1
26355: PUSH
26356: LD_EXP 14
26360: EQUAL
26361: IFFALSE 26371
// KhatamStatus = 0 ;
26363: LD_ADDR_EXP 55
26367: PUSH
26368: LD_INT 0
26370: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
26371: LD_VAR 0 1
26375: PPUSH
26376: CALL_OW 255
26380: PUSH
26381: LD_INT 3
26383: EQUAL
26384: PUSH
26385: LD_VAR 0 1
26389: PPUSH
26390: CALL_OW 247
26394: PUSH
26395: LD_INT 3
26397: EQUAL
26398: AND
26399: IFFALSE 27091
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
26401: LD_VAR 0 1
26405: PPUSH
26406: CALL_OW 266
26410: PUSH
26411: LD_INT 31
26413: EQUAL
26414: PUSH
26415: LD_VAR 0 1
26419: PPUSH
26420: CALL_OW 266
26424: PUSH
26425: LD_INT 32
26427: EQUAL
26428: OR
26429: PUSH
26430: LD_VAR 0 1
26434: PPUSH
26435: CALL_OW 266
26439: PUSH
26440: LD_INT 36
26442: EQUAL
26443: OR
26444: PUSH
26445: LD_VAR 0 1
26449: PPUSH
26450: CALL_OW 266
26454: PUSH
26455: LD_INT 0
26457: EQUAL
26458: OR
26459: PUSH
26460: LD_VAR 0 1
26464: PPUSH
26465: CALL_OW 266
26469: PUSH
26470: LD_INT 24
26472: EQUAL
26473: OR
26474: PUSH
26475: LD_VAR 0 1
26479: PPUSH
26480: CALL_OW 266
26484: PUSH
26485: LD_INT 17
26487: EQUAL
26488: OR
26489: PUSH
26490: LD_VAR 0 1
26494: PPUSH
26495: CALL_OW 266
26499: PUSH
26500: LD_INT 25
26502: EQUAL
26503: OR
26504: PUSH
26505: LD_VAR 0 1
26509: PPUSH
26510: CALL_OW 266
26514: PUSH
26515: LD_INT 19
26517: EQUAL
26518: OR
26519: PUSH
26520: LD_VAR 0 1
26524: PPUSH
26525: CALL_OW 266
26529: PUSH
26530: LD_INT 20
26532: EQUAL
26533: OR
26534: PUSH
26535: LD_VAR 0 1
26539: PPUSH
26540: CALL_OW 266
26544: PUSH
26545: LD_INT 18
26547: EQUAL
26548: OR
26549: PUSH
26550: LD_VAR 0 1
26554: PPUSH
26555: CALL_OW 266
26559: PUSH
26560: LD_INT 21
26562: EQUAL
26563: OR
26564: PUSH
26565: LD_VAR 0 1
26569: PPUSH
26570: CALL_OW 266
26574: PUSH
26575: LD_INT 23
26577: EQUAL
26578: OR
26579: PUSH
26580: LD_VAR 0 1
26584: PPUSH
26585: CALL_OW 266
26589: PUSH
26590: LD_INT 16
26592: EQUAL
26593: OR
26594: PUSH
26595: LD_VAR 0 1
26599: PPUSH
26600: CALL_OW 266
26604: PUSH
26605: LD_INT 6
26607: EQUAL
26608: OR
26609: PUSH
26610: LD_VAR 0 1
26614: PPUSH
26615: CALL_OW 266
26619: PUSH
26620: LD_INT 29
26622: EQUAL
26623: OR
26624: PUSH
26625: LD_VAR 0 1
26629: PPUSH
26630: CALL_OW 266
26634: PUSH
26635: LD_INT 26
26637: EQUAL
26638: OR
26639: PUSH
26640: LD_VAR 0 1
26644: PPUSH
26645: CALL_OW 266
26649: PUSH
26650: LD_INT 30
26652: EQUAL
26653: OR
26654: PUSH
26655: LD_VAR 0 1
26659: PPUSH
26660: CALL_OW 266
26664: PUSH
26665: LD_INT 28
26667: EQUAL
26668: OR
26669: PUSH
26670: LD_VAR 0 1
26674: PPUSH
26675: CALL_OW 266
26679: PUSH
26680: LD_INT 27
26682: EQUAL
26683: OR
26684: PUSH
26685: LD_VAR 0 1
26689: PPUSH
26690: CALL_OW 266
26694: PUSH
26695: LD_INT 33
26697: EQUAL
26698: OR
26699: PUSH
26700: LD_VAR 0 1
26704: PPUSH
26705: CALL_OW 266
26709: PUSH
26710: LD_INT 2
26712: EQUAL
26713: OR
26714: PUSH
26715: LD_VAR 0 1
26719: PPUSH
26720: CALL_OW 266
26724: PUSH
26725: LD_INT 4
26727: EQUAL
26728: OR
26729: IFFALSE 26815
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
26731: LD_ADDR_EXP 44
26735: PUSH
26736: LD_EXP 44
26740: PUSH
26741: LD_VAR 0 1
26745: PPUSH
26746: CALL_OW 266
26750: ADD
26751: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26752: LD_ADDR_EXP 44
26756: PUSH
26757: LD_EXP 44
26761: PUSH
26762: LD_VAR 0 1
26766: PPUSH
26767: CALL_OW 250
26771: ADD
26772: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26773: LD_ADDR_EXP 44
26777: PUSH
26778: LD_EXP 44
26782: PUSH
26783: LD_VAR 0 1
26787: PPUSH
26788: CALL_OW 251
26792: ADD
26793: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26794: LD_ADDR_EXP 44
26798: PUSH
26799: LD_EXP 44
26803: PUSH
26804: LD_VAR 0 1
26808: PPUSH
26809: CALL_OW 254
26813: ADD
26814: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
26815: LD_VAR 0 1
26819: PPUSH
26820: CALL_OW 266
26824: PUSH
26825: LD_INT 1
26827: EQUAL
26828: IFFALSE 26907
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
26830: LD_ADDR_EXP 44
26834: PUSH
26835: LD_EXP 44
26839: PUSH
26840: LD_INT 0
26842: ADD
26843: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26844: LD_ADDR_EXP 44
26848: PUSH
26849: LD_EXP 44
26853: PUSH
26854: LD_VAR 0 1
26858: PPUSH
26859: CALL_OW 250
26863: ADD
26864: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26865: LD_ADDR_EXP 44
26869: PUSH
26870: LD_EXP 44
26874: PUSH
26875: LD_VAR 0 1
26879: PPUSH
26880: CALL_OW 251
26884: ADD
26885: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26886: LD_ADDR_EXP 44
26890: PUSH
26891: LD_EXP 44
26895: PUSH
26896: LD_VAR 0 1
26900: PPUSH
26901: CALL_OW 254
26905: ADD
26906: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
26907: LD_VAR 0 1
26911: PPUSH
26912: CALL_OW 266
26916: PUSH
26917: LD_INT 3
26919: EQUAL
26920: IFFALSE 26999
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
26922: LD_ADDR_EXP 44
26926: PUSH
26927: LD_EXP 44
26931: PUSH
26932: LD_INT 2
26934: ADD
26935: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26936: LD_ADDR_EXP 44
26940: PUSH
26941: LD_EXP 44
26945: PUSH
26946: LD_VAR 0 1
26950: PPUSH
26951: CALL_OW 250
26955: ADD
26956: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26957: LD_ADDR_EXP 44
26961: PUSH
26962: LD_EXP 44
26966: PUSH
26967: LD_VAR 0 1
26971: PPUSH
26972: CALL_OW 251
26976: ADD
26977: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26978: LD_ADDR_EXP 44
26982: PUSH
26983: LD_EXP 44
26987: PUSH
26988: LD_VAR 0 1
26992: PPUSH
26993: CALL_OW 254
26997: ADD
26998: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
26999: LD_VAR 0 1
27003: PPUSH
27004: CALL_OW 266
27008: PUSH
27009: LD_INT 5
27011: EQUAL
27012: IFFALSE 27091
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
27014: LD_ADDR_EXP 44
27018: PUSH
27019: LD_EXP 44
27023: PUSH
27024: LD_INT 4
27026: ADD
27027: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
27028: LD_ADDR_EXP 44
27032: PUSH
27033: LD_EXP 44
27037: PUSH
27038: LD_VAR 0 1
27042: PPUSH
27043: CALL_OW 250
27047: ADD
27048: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
27049: LD_ADDR_EXP 44
27053: PUSH
27054: LD_EXP 44
27058: PUSH
27059: LD_VAR 0 1
27063: PPUSH
27064: CALL_OW 251
27068: ADD
27069: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
27070: LD_ADDR_EXP 44
27074: PUSH
27075: LD_EXP 44
27079: PUSH
27080: LD_VAR 0 1
27084: PPUSH
27085: CALL_OW 254
27089: ADD
27090: ST_TO_ADDR
// end ; end ; if ruMech and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
27091: LD_EXP 53
27095: PUSH
27096: LD_VAR 0 1
27100: PPUSH
27101: CALL_OW 257
27105: PUSH
27106: LD_INT 3
27108: EQUAL
27109: AND
27110: PUSH
27111: LD_VAR 0 1
27115: PPUSH
27116: CALL_OW 255
27120: PUSH
27121: LD_INT 3
27123: EQUAL
27124: AND
27125: PUSH
27126: LD_EXP 37
27130: PPUSH
27131: CALL_OW 302
27135: AND
27136: PUSH
27137: LD_EXP 37
27141: PPUSH
27142: CALL_OW 255
27146: PUSH
27147: LD_INT 3
27149: EQUAL
27150: AND
27151: IFFALSE 27235
// begin ruMech := ruMech - 1 ;
27153: LD_ADDR_EXP 53
27157: PUSH
27158: LD_EXP 53
27162: PUSH
27163: LD_INT 1
27165: MINUS
27166: ST_TO_ADDR
// uc_side = 3 ;
27167: LD_ADDR_OWVAR 20
27171: PUSH
27172: LD_INT 3
27174: ST_TO_ADDR
// uc_nation = 3 ;
27175: LD_ADDR_OWVAR 21
27179: PUSH
27180: LD_INT 3
27182: ST_TO_ADDR
// hc_gallery :=  ;
27183: LD_ADDR_OWVAR 33
27187: PUSH
27188: LD_STRING 
27190: ST_TO_ADDR
// hc_name :=  ;
27191: LD_ADDR_OWVAR 26
27195: PUSH
27196: LD_STRING 
27198: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
27199: LD_INT 0
27201: PPUSH
27202: LD_EXP 38
27206: PPUSH
27207: LD_EXP 39
27211: PPUSH
27212: CALL_OW 12
27216: PPUSH
27217: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
27221: CALL_OW 44
27225: PPUSH
27226: LD_EXP 37
27230: PPUSH
27231: CALL_OW 52
// end ; end ;
27235: PPOPN 1
27237: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
27238: LD_VAR 0 1
27242: PPUSH
27243: LD_VAR 0 2
27247: PPUSH
27248: CALL 46124 0 2
// end ;
27252: PPOPN 2
27254: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
27255: LD_ADDR_OWVAR 57
27259: PUSH
27260: LD_INT 0
27262: ST_TO_ADDR
// fastEnd = 1 ;
27263: LD_ADDR_EXP 65
27267: PUSH
27268: LD_INT 1
27270: ST_TO_ADDR
// FinishMission ;
27271: CALL 28458 0 0
// end ;
27275: PPOPN 1
27277: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
27278: LD_VAR 0 1
27282: PPUSH
27283: CALL 46108 0 1
// end ; end_of_file
27287: PPOPN 1
27289: END
// export function CreateNature ; var i , un ; begin
27290: LD_INT 0
27292: PPUSH
27293: PPUSH
27294: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
27295: LD_ADDR_VAR 0 2
27299: PUSH
27300: DOUBLE
27301: LD_INT 1
27303: DEC
27304: ST_TO_ADDR
27305: LD_OWVAR 67
27309: PUSH
27310: LD_INT 1
27312: PPUSH
27313: LD_INT 5
27315: PPUSH
27316: CALL_OW 12
27320: PLUS
27321: PUSH
27322: FOR_TO
27323: IFFALSE 27468
// begin hc_sex = sex_male ;
27325: LD_ADDR_OWVAR 27
27329: PUSH
27330: LD_INT 1
27332: ST_TO_ADDR
// uc_side = 0 ;
27333: LD_ADDR_OWVAR 20
27337: PUSH
27338: LD_INT 0
27340: ST_TO_ADDR
// uc_nation = nation_nature ;
27341: LD_ADDR_OWVAR 21
27345: PUSH
27346: LD_INT 0
27348: ST_TO_ADDR
// hc_class = class_apeman ;
27349: LD_ADDR_OWVAR 28
27353: PUSH
27354: LD_INT 12
27356: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
27357: LD_ADDR_OWVAR 31
27361: PUSH
27362: LD_INT 2
27364: PPUSH
27365: LD_INT 7
27367: PPUSH
27368: CALL_OW 12
27372: PUSH
27373: LD_OWVAR 67
27377: PLUS
27378: PUSH
27379: LD_INT 2
27381: PPUSH
27382: LD_INT 10
27384: PPUSH
27385: CALL_OW 12
27389: PUSH
27390: LD_INT 2
27392: PPUSH
27393: LD_INT 10
27395: PPUSH
27396: CALL_OW 12
27400: PUSH
27401: LD_INT 2
27403: PPUSH
27404: LD_INT 10
27406: PPUSH
27407: CALL_OW 12
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27418: LD_ADDR_OWVAR 35
27422: PUSH
27423: LD_INT 5
27425: NEG
27426: PPUSH
27427: LD_INT 5
27429: PPUSH
27430: CALL_OW 12
27434: PUSH
27435: LD_OWVAR 67
27439: MUL
27440: ST_TO_ADDR
// un = CreateHuman ;
27441: LD_ADDR_VAR 0 3
27445: PUSH
27446: CALL_OW 44
27450: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
27451: LD_VAR 0 3
27455: PPUSH
27456: LD_INT 5
27458: PPUSH
27459: LD_INT 0
27461: PPUSH
27462: CALL_OW 49
// end ;
27466: GO 27322
27468: POP
27469: POP
// for i = 1 to Difficulty + 2 do
27470: LD_ADDR_VAR 0 2
27474: PUSH
27475: DOUBLE
27476: LD_INT 1
27478: DEC
27479: ST_TO_ADDR
27480: LD_OWVAR 67
27484: PUSH
27485: LD_INT 2
27487: PLUS
27488: PUSH
27489: FOR_TO
27490: IFFALSE 27599
// begin hc_sex = sex_male ;
27492: LD_ADDR_OWVAR 27
27496: PUSH
27497: LD_INT 1
27499: ST_TO_ADDR
// uc_side = 0 ;
27500: LD_ADDR_OWVAR 20
27504: PUSH
27505: LD_INT 0
27507: ST_TO_ADDR
// uc_nation = nation_nature ;
27508: LD_ADDR_OWVAR 21
27512: PUSH
27513: LD_INT 0
27515: ST_TO_ADDR
// hc_class = class_tiger ;
27516: LD_ADDR_OWVAR 28
27520: PUSH
27521: LD_INT 14
27523: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27524: LD_ADDR_OWVAR 31
27528: PUSH
27529: LD_EXP 39
27533: PUSH
27534: LD_INT 0
27536: PUSH
27537: LD_INT 0
27539: PUSH
27540: LD_INT 0
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27549: LD_ADDR_OWVAR 35
27553: PUSH
27554: LD_INT 5
27556: NEG
27557: PPUSH
27558: LD_INT 5
27560: PPUSH
27561: CALL_OW 12
27565: PUSH
27566: LD_OWVAR 67
27570: MUL
27571: ST_TO_ADDR
// un = CreateHuman ;
27572: LD_ADDR_VAR 0 3
27576: PUSH
27577: CALL_OW 44
27581: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27582: LD_VAR 0 3
27586: PPUSH
27587: LD_INT 6
27589: PPUSH
27590: LD_INT 0
27592: PPUSH
27593: CALL_OW 49
// end ;
27597: GO 27489
27599: POP
27600: POP
// for i = 1 to rand ( 3 , 4 ) do
27601: LD_ADDR_VAR 0 2
27605: PUSH
27606: DOUBLE
27607: LD_INT 1
27609: DEC
27610: ST_TO_ADDR
27611: LD_INT 3
27613: PPUSH
27614: LD_INT 4
27616: PPUSH
27617: CALL_OW 12
27621: PUSH
27622: FOR_TO
27623: IFFALSE 27717
// begin hc_sex = sex_male ;
27625: LD_ADDR_OWVAR 27
27629: PUSH
27630: LD_INT 1
27632: ST_TO_ADDR
// uc_side = 0 ;
27633: LD_ADDR_OWVAR 20
27637: PUSH
27638: LD_INT 0
27640: ST_TO_ADDR
// uc_nation = nation_nature ;
27641: LD_ADDR_OWVAR 21
27645: PUSH
27646: LD_INT 0
27648: ST_TO_ADDR
// hc_class = 18 ;
27649: LD_ADDR_OWVAR 28
27653: PUSH
27654: LD_INT 18
27656: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27657: LD_ADDR_OWVAR 31
27661: PUSH
27662: LD_EXP 39
27666: PUSH
27667: LD_INT 0
27669: PUSH
27670: LD_INT 0
27672: PUSH
27673: LD_INT 0
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: ST_TO_ADDR
// hc_agressivity = 0 ;
27682: LD_ADDR_OWVAR 35
27686: PUSH
27687: LD_INT 0
27689: ST_TO_ADDR
// un = CreateHuman ;
27690: LD_ADDR_VAR 0 3
27694: PUSH
27695: CALL_OW 44
27699: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27700: LD_VAR 0 3
27704: PPUSH
27705: LD_INT 6
27707: PPUSH
27708: LD_INT 0
27710: PPUSH
27711: CALL_OW 49
// end ;
27715: GO 27622
27717: POP
27718: POP
// end ; end_of_file
27719: LD_VAR 0 1
27723: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
27724: LD_EXP 48
27728: PUSH
27729: LD_INT 1
27731: EQUAL
27732: IFFALSE 27827
27734: GO 27736
27736: DISABLE
// begin wait ( 0 0$10 ) ;
27737: LD_INT 350
27739: PPUSH
27740: CALL_OW 67
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 , 8 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
27744: LD_INT 7
27746: PPUSH
27747: LD_INT 5
27749: PPUSH
27750: LD_INT 4
27752: PUSH
27753: LD_INT 5
27755: PUSH
27756: LD_INT 6
27758: PUSH
27759: LD_INT 8
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: PUSH
27768: LD_OWVAR 67
27772: ARRAY
27773: PPUSH
27774: LD_EXP 38
27778: PPUSH
27779: LD_EXP 39
27783: PPUSH
27784: CALL_OW 12
27788: PPUSH
27789: LD_INT 2
27791: PPUSH
27792: LD_INT 1
27794: PPUSH
27795: LD_INT 1
27797: PPUSH
27798: EMPTY
27799: PPUSH
27800: LD_INT 25
27802: PUSH
27803: LD_INT 26
27805: PUSH
27806: LD_INT 27
27808: PUSH
27809: LD_INT 28
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: PPUSH
27818: EMPTY
27819: PPUSH
27820: LD_INT 1
27822: PPUSH
27823: CALL 17584 0 11
// end ;
27827: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27828: LD_EXP 48
27832: PUSH
27833: LD_INT 1
27835: EQUAL
27836: IFFALSE 27928
27838: GO 27840
27840: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 , 9 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
27841: LD_INT 5
27843: PPUSH
27844: LD_INT 2
27846: PPUSH
27847: LD_INT 5
27849: PUSH
27850: LD_INT 6
27852: PUSH
27853: LD_INT 8
27855: PUSH
27856: LD_INT 9
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: PUSH
27865: LD_OWVAR 67
27869: ARRAY
27870: PPUSH
27871: LD_INT 0
27873: PPUSH
27874: LD_INT 0
27876: PPUSH
27877: LD_INT 2
27879: PUSH
27880: LD_INT 4
27882: PUSH
27883: LD_INT 5
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: LIST
27890: PUSH
27891: LD_OWVAR 67
27895: ARRAY
27896: PPUSH
27897: LD_INT 0
27899: PPUSH
27900: LD_EXP 38
27904: PPUSH
27905: LD_EXP 39
27909: PPUSH
27910: CALL_OW 12
27914: PPUSH
27915: LD_INT 7
27917: PPUSH
27918: LD_INT 9
27920: PPUSH
27921: LD_INT 1
27923: PPUSH
27924: CALL 19288 0 11
27928: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27929: LD_EXP 48
27933: PUSH
27934: LD_INT 1
27936: EQUAL
27937: IFFALSE 27946
27939: GO 27941
27941: DISABLE
// PrepareArabianSheik ;
27942: CALL 4875 0 0
27946: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27947: LD_EXP 31
27951: PUSH
27952: LD_EXP 66
27956: PUSH
27957: LD_INT 1
27959: EQUAL
27960: AND
27961: IFFALSE 28030
27963: GO 27965
27965: DISABLE
// begin enable ;
27966: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
27967: LD_INT 6
27969: PPUSH
27970: LD_INT 3
27972: PPUSH
27973: LD_EXP 62
27977: PPUSH
27978: LD_INT 0
27980: PPUSH
27981: LD_OWVAR 67
27985: PPUSH
27986: LD_INT 0
27988: PPUSH
27989: LD_EXP 62
27993: PUSH
27994: LD_INT 3
27996: DIV
27997: PUSH
27998: LD_INT 1
28000: PLUS
28001: PPUSH
28002: LD_EXP 38
28006: PPUSH
28007: LD_EXP 39
28011: PPUSH
28012: CALL_OW 12
28016: PPUSH
28017: LD_INT 17
28019: PPUSH
28020: LD_INT 18
28022: PPUSH
28023: LD_INT 1
28025: PPUSH
28026: CALL 19288 0 11
// end ;
28030: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
28031: LD_EXP 31
28035: PUSH
28036: LD_EXP 66
28040: PUSH
28041: LD_INT 1
28043: EQUAL
28044: AND
28045: IFFALSE 28134
28047: GO 28049
28049: DISABLE
// begin enable ;
28050: ENABLE
// SayRadio ( AmScout , D4-FSol1-2 ) ;
28051: LD_EXP 18
28055: PPUSH
28056: LD_STRING D4-FSol1-2
28058: PPUSH
28059: CALL_OW 94
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
28063: LD_INT 17
28065: PPUSH
28066: LD_INT 6
28068: PPUSH
28069: LD_EXP 61
28073: PPUSH
28074: LD_EXP 38
28078: PPUSH
28079: LD_EXP 39
28083: PPUSH
28084: CALL_OW 12
28088: PPUSH
28089: LD_INT 3
28091: PPUSH
28092: LD_INT 1
28094: PPUSH
28095: LD_INT 3
28097: PUSH
28098: LD_INT 3
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PPUSH
28105: LD_INT 43
28107: PUSH
28108: LD_INT 44
28110: PUSH
28111: LD_INT 45
28113: PUSH
28114: LD_INT 46
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: PPUSH
28123: EMPTY
28124: PPUSH
28125: EMPTY
28126: PPUSH
28127: LD_INT 1
28129: PPUSH
28130: CALL 17584 0 11
// end ;
28134: END
// every 10 10$00 trigger joinEpsilon do
28135: LD_EXP 31
28139: IFFALSE 28193
28141: GO 28143
28143: DISABLE
// begin enable ;
28144: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
28145: LD_ADDR_EXP 61
28149: PUSH
28150: LD_EXP 61
28154: PUSH
28155: LD_INT 1
28157: PPUSH
28158: LD_OWVAR 67
28162: PPUSH
28163: CALL_OW 12
28167: PLUS
28168: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
28169: LD_ADDR_EXP 62
28173: PUSH
28174: LD_EXP 62
28178: PUSH
28179: LD_INT 1
28181: PPUSH
28182: LD_OWVAR 67
28186: PPUSH
28187: CALL_OW 12
28191: PLUS
28192: ST_TO_ADDR
// end ;
28193: END
// every 21 21$0 trigger attackAvalaible = 1 do
28194: LD_EXP 66
28198: PUSH
28199: LD_INT 1
28201: EQUAL
28202: IFFALSE 28215
28204: GO 28206
28206: DISABLE
// attackAvalaible = 0 ; end_of_file
28207: LD_ADDR_EXP 66
28211: PUSH
28212: LD_INT 0
28214: ST_TO_ADDR
28215: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
28216: LD_INT 54
28218: PPUSH
28219: LD_INT 1
28221: PPUSH
28222: CALL_OW 321
28226: PUSH
28227: LD_INT 2
28229: EQUAL
28230: PUSH
28231: LD_INT 55
28233: PPUSH
28234: LD_INT 1
28236: PPUSH
28237: CALL_OW 321
28241: PUSH
28242: LD_INT 2
28244: EQUAL
28245: AND
28246: PUSH
28247: LD_INT 21
28249: PPUSH
28250: LD_INT 1
28252: PPUSH
28253: CALL_OW 321
28257: PUSH
28258: LD_INT 2
28260: EQUAL
28261: AND
28262: PUSH
28263: LD_INT 22
28265: PPUSH
28266: LD_INT 1
28268: PPUSH
28269: CALL_OW 321
28273: PUSH
28274: LD_INT 2
28276: EQUAL
28277: AND
28278: PUSH
28279: LD_INT 12
28281: PPUSH
28282: LD_INT 1
28284: PPUSH
28285: CALL_OW 321
28289: PUSH
28290: LD_INT 1
28292: EQUAL
28293: PUSH
28294: LD_INT 32
28296: PPUSH
28297: LD_INT 1
28299: PPUSH
28300: CALL_OW 321
28304: PUSH
28305: LD_INT 1
28307: EQUAL
28308: OR
28309: PUSH
28310: EMPTY
28311: LIST
28312: AND
28313: PUSH
28314: LD_EXP 50
28318: PUSH
28319: LD_INT 1
28321: EQUAL
28322: AND
28323: PUSH
28324: LD_INT 22
28326: PUSH
28327: LD_INT 3
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 21
28336: PUSH
28337: LD_INT 1
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PPUSH
28348: CALL_OW 69
28352: PUSH
28353: LD_INT 0
28355: EQUAL
28356: AND
28357: IFFALSE 28413
28359: GO 28361
28361: DISABLE
// begin case query ( QEndMission ) of 1 :
28362: LD_STRING QEndMission
28364: PPUSH
28365: CALL_OW 97
28369: PUSH
28370: LD_INT 1
28372: DOUBLE
28373: EQUAL
28374: IFTRUE 28378
28376: GO 28389
28378: POP
// begin end_the_mission_allowed = true ;
28379: LD_ADDR_OWVAR 57
28383: PUSH
28384: LD_INT 1
28386: ST_TO_ADDR
// end ; 2 :
28387: GO 28413
28389: LD_INT 2
28391: DOUBLE
28392: EQUAL
28393: IFTRUE 28397
28395: GO 28412
28397: POP
// begin fastEnd = 1 ;
28398: LD_ADDR_EXP 65
28402: PUSH
28403: LD_INT 1
28405: ST_TO_ADDR
// FinishMission ;
28406: CALL 28458 0 0
// end ; end ;
28410: GO 28413
28412: POP
// end ;
28413: END
// every 0 0$1 trigger spawnRussians and not ruDepotConstructed and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
28414: LD_EXP 60
28418: PUSH
28419: LD_EXP 59
28423: NOT
28424: AND
28425: PUSH
28426: LD_INT 22
28428: PUSH
28429: LD_INT 3
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PPUSH
28436: CALL_OW 69
28440: PUSH
28441: LD_INT 0
28443: EQUAL
28444: AND
28445: IFFALSE 28457
28447: GO 28449
28449: DISABLE
// SetAchievement ( ACH_TACT ) ;
28450: LD_STRING ACH_TACT
28452: PPUSH
28453: CALL_OW 543
28457: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
28458: LD_INT 0
28460: PPUSH
28461: PPUSH
28462: PPUSH
28463: PPUSH
// if not snipersTrained then
28464: LD_EXP 64
28468: NOT
28469: IFFALSE 28478
// SetAchievement ( ACH_SNIPER ) ;
28471: LD_STRING ACH_SNIPER
28473: PPUSH
28474: CALL_OW 543
// m1 := false ;
28478: LD_ADDR_VAR 0 2
28482: PUSH
28483: LD_INT 0
28485: ST_TO_ADDR
// m2 := false ;
28486: LD_ADDR_VAR 0 3
28490: PUSH
28491: LD_INT 0
28493: ST_TO_ADDR
// m3 := false ;
28494: LD_ADDR_VAR 0 4
28498: PUSH
28499: LD_INT 0
28501: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
28502: LD_EXP 55
28506: PPUSH
28507: LD_STRING 10_KhatamStatus_1
28509: PPUSH
28510: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
28514: LD_EXP 54
28518: PPUSH
28519: LD_STRING 10_GensherEscape_1
28521: PPUSH
28522: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
28526: LD_INT 12
28528: PPUSH
28529: LD_INT 1
28531: PPUSH
28532: CALL_OW 321
28536: PUSH
28537: LD_INT 2
28539: EQUAL
28540: IFFALSE 28562
// begin AddMedal ( sights , 1 ) ;
28542: LD_STRING sights
28544: PPUSH
28545: LD_INT 1
28547: PPUSH
28548: CALL_OW 101
// m1 := true ;
28552: LD_ADDR_VAR 0 2
28556: PUSH
28557: LD_INT 1
28559: ST_TO_ADDR
// end else
28560: GO 28573
// begin AddMedal ( sights , - 1 ) ;
28562: LD_STRING sights
28564: PPUSH
28565: LD_INT 1
28567: NEG
28568: PPUSH
28569: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
28573: LD_INT 32
28575: PPUSH
28576: LD_INT 1
28578: PPUSH
28579: CALL_OW 321
28583: PUSH
28584: LD_INT 2
28586: EQUAL
28587: IFFALSE 28609
// begin AddMedal ( computers , 1 ) ;
28589: LD_STRING computers
28591: PPUSH
28592: LD_INT 1
28594: PPUSH
28595: CALL_OW 101
// m2 := true ;
28599: LD_ADDR_VAR 0 3
28603: PUSH
28604: LD_INT 1
28606: ST_TO_ADDR
// end else
28607: GO 28620
// begin AddMedal ( computers , - 1 ) ;
28609: LD_STRING computers
28611: PPUSH
28612: LD_INT 1
28614: NEG
28615: PPUSH
28616: CALL_OW 101
// end ; if arabianEscape = 0 then
28620: LD_EXP 49
28624: PUSH
28625: LD_INT 0
28627: EQUAL
28628: IFFALSE 28660
// begin AddMedal ( renegades , 2 ) ;
28630: LD_STRING renegades
28632: PPUSH
28633: LD_INT 2
28635: PPUSH
28636: CALL_OW 101
// m3 := true ;
28640: LD_ADDR_VAR 0 4
28644: PUSH
28645: LD_INT 1
28647: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
28648: LD_INT 0
28650: PPUSH
28651: LD_STRING 10_ScientistsEscape_1
28653: PPUSH
28654: CALL_OW 39
// end else
28658: GO 28671
// begin AddMedal ( renegades , - 1 ) ;
28660: LD_STRING renegades
28662: PPUSH
28663: LD_INT 1
28665: NEG
28666: PPUSH
28667: CALL_OW 101
// end ; SaveEpsilonBase ;
28671: CALL 29486 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
28675: LD_VAR 0 2
28679: PUSH
28680: LD_VAR 0 3
28684: AND
28685: PUSH
28686: LD_VAR 0 4
28690: AND
28691: PUSH
28692: LD_OWVAR 67
28696: PUSH
28697: LD_INT 3
28699: GREATEREQUAL
28700: AND
28701: IFFALSE 28713
// SetAchievementEX ( ACH_AMER , 10 ) ;
28703: LD_STRING ACH_AMER
28705: PPUSH
28706: LD_INT 10
28708: PPUSH
28709: CALL_OW 564
// if tick <= 40 40$00 then
28713: LD_OWVAR 1
28717: PUSH
28718: LD_INT 84000
28720: LESSEQUAL
28721: IFFALSE 28737
// begin wait ( 3 ) ;
28723: LD_INT 3
28725: PPUSH
28726: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
28730: LD_STRING ACH_ASPEED_10
28732: PPUSH
28733: CALL_OW 543
// end ; GiveMedals ( Main ) ;
28737: LD_STRING Main
28739: PPUSH
28740: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
28744: LD_INT 22
28746: PUSH
28747: LD_INT 1
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 23
28756: PUSH
28757: LD_INT 1
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 21
28766: PUSH
28767: LD_INT 1
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 2
28776: PUSH
28777: LD_INT 25
28779: PUSH
28780: LD_INT 1
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 25
28789: PUSH
28790: LD_INT 2
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 25
28799: PUSH
28800: LD_INT 3
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 25
28809: PUSH
28810: LD_INT 4
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 25
28819: PUSH
28820: LD_INT 5
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 25
28829: PUSH
28830: LD_INT 8
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: PPUSH
28852: CALL_OW 69
28856: PPUSH
28857: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
28861: LD_EXP 1
28865: PPUSH
28866: LD_EXP 56
28870: PUSH
28871: LD_STRING JMM
28873: STR
28874: PPUSH
28875: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
28879: LD_EXP 2
28883: PPUSH
28884: LD_EXP 56
28888: PUSH
28889: LD_STRING Brown
28891: STR
28892: PPUSH
28893: CALL 11768 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
28897: LD_EXP 3
28901: PPUSH
28902: LD_EXP 56
28906: PUSH
28907: LD_STRING Donaldson
28909: STR
28910: PPUSH
28911: CALL 11768 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
28915: LD_EXP 4
28919: PPUSH
28920: LD_EXP 56
28924: PUSH
28925: LD_STRING Bobby
28927: STR
28928: PPUSH
28929: CALL 11768 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
28933: LD_EXP 5
28937: PPUSH
28938: LD_EXP 56
28942: PUSH
28943: LD_STRING Cyrus
28945: STR
28946: PPUSH
28947: CALL 11768 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
28951: LD_EXP 6
28955: PPUSH
28956: LD_EXP 56
28960: PUSH
28961: LD_STRING Lisa
28963: STR
28964: PPUSH
28965: CALL 11768 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
28969: LD_EXP 7
28973: PPUSH
28974: LD_EXP 56
28978: PUSH
28979: LD_STRING Frank
28981: STR
28982: PPUSH
28983: CALL 11768 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
28987: LD_EXP 8
28991: PPUSH
28992: LD_EXP 56
28996: PUSH
28997: LD_STRING Kikuchi
28999: STR
29000: PPUSH
29001: CALL 11768 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
29005: LD_EXP 9
29009: PPUSH
29010: LD_EXP 56
29014: PUSH
29015: LD_STRING Houten
29017: STR
29018: PPUSH
29019: CALL 11768 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
29023: LD_EXP 10
29027: PPUSH
29028: LD_EXP 56
29032: PUSH
29033: LD_STRING Gary
29035: STR
29036: PPUSH
29037: CALL 11768 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
29041: LD_EXP 20
29045: PPUSH
29046: LD_EXP 56
29050: PUSH
29051: LD_STRING Cornell
29053: STR
29054: PPUSH
29055: CALL 11768 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
29059: LD_EXP 11
29063: PPUSH
29064: LD_EXP 56
29068: PUSH
29069: LD_STRING Simms
29071: STR
29072: PPUSH
29073: CALL 11768 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
29077: LD_EXP 12
29081: PPUSH
29082: LD_EXP 56
29086: PUSH
29087: LD_STRING Denis
29089: STR
29090: PPUSH
29091: CALL 11768 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
29095: LD_EXP 13
29099: PPUSH
29100: LD_EXP 56
29104: PUSH
29105: LD_STRING Joan
29107: STR
29108: PPUSH
29109: CALL 11768 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
29113: LD_EXP 15
29117: PPUSH
29118: LD_EXP 56
29122: PUSH
29123: LD_STRING Gladstone
29125: STR
29126: PPUSH
29127: CALL 11768 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
29131: LD_EXP 17
29135: PPUSH
29136: LD_EXP 56
29140: PUSH
29141: LD_STRING DeltaDoctor
29143: STR
29144: PPUSH
29145: CALL 11768 0 2
// if IsLive ( Mike ) then
29149: LD_EXP 19
29153: PPUSH
29154: CALL_OW 300
29158: IFFALSE 29178
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
29160: LD_EXP 19
29164: PPUSH
29165: LD_EXP 56
29169: PUSH
29170: LD_STRING Mike
29172: STR
29173: PPUSH
29174: CALL_OW 38
// SaveCharacters ( others09 , 10c_lock ) ;
29178: LD_EXP 24
29182: PPUSH
29183: LD_STRING 10c_lock
29185: PPUSH
29186: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
29190: LD_INT 50
29192: PUSH
29193: EMPTY
29194: LIST
29195: PUSH
29196: LD_INT 22
29198: PUSH
29199: LD_INT 1
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 21
29208: PUSH
29209: LD_INT 1
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 2
29218: PUSH
29219: LD_INT 25
29221: PUSH
29222: LD_INT 1
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 25
29231: PUSH
29232: LD_INT 2
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 25
29241: PUSH
29242: LD_INT 3
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 25
29251: PUSH
29252: LD_INT 4
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 25
29261: PUSH
29262: LD_INT 5
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 25
29271: PUSH
29272: LD_INT 8
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: PPUSH
29294: CALL_OW 69
29298: PUSH
29299: LD_EXP 1
29303: PUSH
29304: LD_EXP 2
29308: PUSH
29309: LD_EXP 3
29313: PUSH
29314: LD_EXP 4
29318: PUSH
29319: LD_EXP 5
29323: PUSH
29324: LD_EXP 6
29328: PUSH
29329: LD_EXP 7
29333: PUSH
29334: LD_EXP 15
29338: PUSH
29339: LD_EXP 8
29343: PUSH
29344: LD_EXP 12
29348: PUSH
29349: LD_EXP 13
29353: PUSH
29354: LD_EXP 9
29358: PUSH
29359: LD_EXP 11
29363: PUSH
29364: LD_EXP 10
29368: PUSH
29369: LD_EXP 17
29373: PUSH
29374: LD_EXP 20
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: DIFF
29397: PPUSH
29398: LD_STRING 10_other_survivors
29400: PPUSH
29401: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
29405: LD_INT 50
29407: PUSH
29408: EMPTY
29409: LIST
29410: PUSH
29411: LD_INT 22
29413: PUSH
29414: LD_INT 1
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 21
29423: PUSH
29424: LD_INT 1
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 2
29433: PUSH
29434: LD_INT 25
29436: PUSH
29437: LD_INT 16
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 25
29446: PUSH
29447: LD_INT 12
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: LIST
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: PPUSH
29465: CALL_OW 69
29469: PPUSH
29470: LD_STRING 10_ape
29472: PPUSH
29473: CALL_OW 38
// YouWin ;
29477: CALL_OW 103
// end ;
29481: LD_VAR 0 1
29485: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
29486: LD_INT 0
29488: PPUSH
29489: PPUSH
29490: PPUSH
29491: PPUSH
// epsilonBase = [ ] ;
29492: LD_ADDR_VAR 0 2
29496: PUSH
29497: EMPTY
29498: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
29499: LD_ADDR_VAR 0 3
29503: PUSH
29504: LD_INT 22
29506: PUSH
29507: LD_INT 1
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 21
29516: PUSH
29517: LD_INT 3
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 50
29526: PUSH
29527: EMPTY
29528: LIST
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: LIST
29534: PPUSH
29535: CALL_OW 69
29539: ST_TO_ADDR
// for i in buildings do
29540: LD_ADDR_VAR 0 4
29544: PUSH
29545: LD_VAR 0 3
29549: PUSH
29550: FOR_IN
29551: IFFALSE 30003
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
29553: LD_VAR 0 4
29557: PPUSH
29558: CALL_OW 266
29562: PUSH
29563: LD_INT 6
29565: PUSH
29566: LD_INT 7
29568: PUSH
29569: LD_INT 8
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: LIST
29576: IN
29577: IFFALSE 29691
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
29579: LD_ADDR_VAR 0 2
29583: PUSH
29584: LD_VAR 0 2
29588: PUSH
29589: LD_VAR 0 4
29593: PPUSH
29594: CALL_OW 266
29598: PUSH
29599: LD_VAR 0 4
29603: PPUSH
29604: CALL_OW 250
29608: PUSH
29609: LD_VAR 0 4
29613: PPUSH
29614: CALL_OW 251
29618: PUSH
29619: LD_VAR 0 4
29623: PPUSH
29624: CALL_OW 254
29628: PUSH
29629: LD_VAR 0 4
29633: PPUSH
29634: CALL_OW 267
29638: PUSH
29639: LD_VAR 0 4
29643: PPUSH
29644: CALL_OW 248
29648: PUSH
29649: LD_VAR 0 4
29653: PPUSH
29654: LD_INT 1
29656: PPUSH
29657: CALL_OW 268
29661: PUSH
29662: LD_VAR 0 4
29666: PPUSH
29667: LD_INT 2
29669: PPUSH
29670: CALL_OW 268
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: PUSH
29685: EMPTY
29686: LIST
29687: ADD
29688: ST_TO_ADDR
29689: GO 30001
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
29691: LD_VAR 0 4
29695: PPUSH
29696: CALL_OW 266
29700: PUSH
29701: LD_INT 32
29703: EQUAL
29704: PUSH
29705: LD_VAR 0 4
29709: PPUSH
29710: CALL_OW 266
29714: PUSH
29715: LD_INT 33
29717: EQUAL
29718: OR
29719: IFFALSE 29816
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
29721: LD_ADDR_VAR 0 2
29725: PUSH
29726: LD_VAR 0 2
29730: PUSH
29731: LD_VAR 0 4
29735: PPUSH
29736: CALL_OW 266
29740: PUSH
29741: LD_VAR 0 4
29745: PPUSH
29746: CALL_OW 250
29750: PUSH
29751: LD_VAR 0 4
29755: PPUSH
29756: CALL_OW 251
29760: PUSH
29761: LD_VAR 0 4
29765: PPUSH
29766: CALL_OW 254
29770: PUSH
29771: LD_VAR 0 4
29775: PPUSH
29776: CALL_OW 267
29780: PUSH
29781: LD_VAR 0 4
29785: PPUSH
29786: CALL_OW 248
29790: PUSH
29791: LD_VAR 0 4
29795: PPUSH
29796: CALL_OW 269
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: PUSH
29810: EMPTY
29811: LIST
29812: ADD
29813: ST_TO_ADDR
29814: GO 30001
// if GetBType ( i ) = b_factory then
29816: LD_VAR 0 4
29820: PPUSH
29821: CALL_OW 266
29825: PUSH
29826: LD_INT 3
29828: EQUAL
29829: IFFALSE 29919
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
29831: LD_ADDR_VAR 0 2
29835: PUSH
29836: LD_VAR 0 2
29840: PPUSH
29841: LD_INT 1
29843: PPUSH
29844: LD_VAR 0 4
29848: PPUSH
29849: CALL_OW 266
29853: PUSH
29854: LD_VAR 0 4
29858: PPUSH
29859: CALL_OW 250
29863: PUSH
29864: LD_VAR 0 4
29868: PPUSH
29869: CALL_OW 251
29873: PUSH
29874: LD_VAR 0 4
29878: PPUSH
29879: CALL_OW 254
29883: PUSH
29884: LD_VAR 0 4
29888: PPUSH
29889: CALL_OW 267
29893: PUSH
29894: LD_VAR 0 4
29898: PPUSH
29899: CALL_OW 248
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: PPUSH
29912: CALL_OW 2
29916: ST_TO_ADDR
29917: GO 30001
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
29919: LD_ADDR_VAR 0 2
29923: PUSH
29924: LD_VAR 0 2
29928: PUSH
29929: LD_VAR 0 4
29933: PPUSH
29934: CALL_OW 266
29938: PUSH
29939: LD_VAR 0 4
29943: PPUSH
29944: CALL_OW 250
29948: PUSH
29949: LD_VAR 0 4
29953: PPUSH
29954: CALL_OW 251
29958: PUSH
29959: LD_VAR 0 4
29963: PPUSH
29964: CALL_OW 254
29968: PUSH
29969: LD_VAR 0 4
29973: PPUSH
29974: CALL_OW 267
29978: PUSH
29979: LD_VAR 0 4
29983: PPUSH
29984: CALL_OW 248
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: PUSH
29997: EMPTY
29998: LIST
29999: ADD
30000: ST_TO_ADDR
// end ;
30001: GO 29550
30003: POP
30004: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
30005: LD_VAR 0 2
30009: PPUSH
30010: LD_STRING 10_EpsilonBase
30012: PPUSH
30013: CALL_OW 39
// SaveEnvironment ( epsilonTerrain , 10_EpsilonEnv ) ;
30017: LD_INT 19
30019: PPUSH
30020: LD_STRING 10_EpsilonEnv
30022: PPUSH
30023: CALL 30032 0 2
// end ;
30027: LD_VAR 0 1
30031: RET
// export function SaveEnvironment ( area , saveId ) ; begin
30032: LD_INT 0
30034: PPUSH
// result := ListEnvironmentArea ( area ) ;
30035: LD_ADDR_VAR 0 3
30039: PUSH
30040: LD_VAR 0 1
30044: PPUSH
30045: CALL_OW 353
30049: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
30050: LD_VAR 0 3
30054: PPUSH
30055: LD_VAR 0 2
30059: PPUSH
30060: CALL_OW 39
// end ; end_of_file
30064: LD_VAR 0 3
30068: RET
// every 0 0$01 do var timer ;
30069: GO 30071
30071: DISABLE
30072: LD_INT 0
30074: PPUSH
// begin timer := 0 0$20 ;
30075: LD_ADDR_VAR 0 1
30079: PUSH
30080: LD_INT 700
30082: ST_TO_ADDR
// repeat wait ( timer ) ;
30083: LD_VAR 0 1
30087: PPUSH
30088: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 14 then
30092: LD_EXP 58
30096: PUSH
30097: LD_INT 6
30099: GREATEREQUAL
30100: PUSH
30101: LD_EXP 58
30105: PUSH
30106: LD_INT 14
30108: LESS
30109: AND
30110: IFFALSE 30126
// timer := timer + 0 0$3 ;
30112: LD_ADDR_VAR 0 1
30116: PUSH
30117: LD_VAR 0 1
30121: PUSH
30122: LD_INT 105
30124: PLUS
30125: ST_TO_ADDR
// if cratesSpawned >= 14 then
30126: LD_EXP 58
30130: PUSH
30131: LD_INT 14
30133: GREATEREQUAL
30134: IFFALSE 30150
// timer := timer + 0 0$6 ;
30136: LD_ADDR_VAR 0 1
30140: PUSH
30141: LD_VAR 0 1
30145: PUSH
30146: LD_INT 210
30148: PLUS
30149: ST_TO_ADDR
// if timer > 2 2$00 then
30150: LD_VAR 0 1
30154: PUSH
30155: LD_INT 4200
30157: GREATER
30158: IFFALSE 30168
// timer := 0 0$45 ;
30160: LD_ADDR_VAR 0 1
30164: PUSH
30165: LD_INT 1575
30167: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
30168: LD_INT 1
30170: PPUSH
30171: LD_INT 5
30173: PPUSH
30174: CALL_OW 12
30178: PPUSH
30179: LD_INT 16
30181: PPUSH
30182: LD_INT 1
30184: PPUSH
30185: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
30189: LD_ADDR_EXP 58
30193: PUSH
30194: LD_EXP 58
30198: PUSH
30199: LD_INT 1
30201: PLUS
30202: ST_TO_ADDR
// until false ;
30203: LD_INT 0
30205: IFFALSE 30083
// end ; end_of_file end_of_file
30207: PPOPN 1
30209: END
// export globalGameSaveCounter ; every 0 0$1 do
30210: GO 30212
30212: DISABLE
// begin enable ;
30213: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
30214: LD_STRING updateTimer(
30216: PUSH
30217: LD_OWVAR 1
30221: STR
30222: PUSH
30223: LD_STRING );
30225: STR
30226: PPUSH
30227: CALL_OW 559
// end ;
30231: END
// every 0 0$1 do
30232: GO 30234
30234: DISABLE
// begin globalGameSaveCounter := 0 ;
30235: LD_ADDR_EXP 71
30239: PUSH
30240: LD_INT 0
30242: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
30243: LD_STRING setGameSaveCounter(0)
30245: PPUSH
30246: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
30250: LD_STRING initStreamRollete();
30252: PPUSH
30253: CALL_OW 559
// InitStreamMode ;
30257: CALL 31583 0 0
// DefineStreamItems ( false ) ;
30261: LD_INT 0
30263: PPUSH
30264: CALL 32047 0 1
// end ;
30268: END
// export function SOS_MapStart ( ) ; begin
30269: LD_INT 0
30271: PPUSH
// if streamModeActive then
30272: LD_EXP 72
30276: IFFALSE 30285
// DefineStreamItems ( true ) ;
30278: LD_INT 1
30280: PPUSH
30281: CALL 32047 0 1
// UpdateLuaVariables ( ) ;
30285: CALL 30302 0 0
// UpdateFactoryWaypoints ( ) ;
30289: CALL 44908 0 0
// UpdateWarehouseGatheringPoints ( ) ;
30293: CALL 45165 0 0
// end ;
30297: LD_VAR 0 1
30301: RET
// function UpdateLuaVariables ( ) ; begin
30302: LD_INT 0
30304: PPUSH
// if globalGameSaveCounter then
30305: LD_EXP 71
30309: IFFALSE 30343
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
30311: LD_ADDR_EXP 71
30315: PUSH
30316: LD_EXP 71
30320: PPUSH
30321: CALL 89122 0 1
30325: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
30326: LD_STRING setGameSaveCounter(
30328: PUSH
30329: LD_EXP 71
30333: STR
30334: PUSH
30335: LD_STRING )
30337: STR
30338: PPUSH
30339: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
30343: LD_STRING setGameDifficulty(
30345: PUSH
30346: LD_OWVAR 67
30350: STR
30351: PUSH
30352: LD_STRING )
30354: STR
30355: PPUSH
30356: CALL_OW 559
// end ;
30360: LD_VAR 0 1
30364: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30365: LD_INT 0
30367: PPUSH
// if p2 = stream_mode then
30368: LD_VAR 0 2
30372: PUSH
30373: LD_INT 100
30375: EQUAL
30376: IFFALSE 31379
// begin if not StreamModeActive then
30378: LD_EXP 72
30382: NOT
30383: IFFALSE 30393
// StreamModeActive := true ;
30385: LD_ADDR_EXP 72
30389: PUSH
30390: LD_INT 1
30392: ST_TO_ADDR
// if p3 = 0 then
30393: LD_VAR 0 3
30397: PUSH
30398: LD_INT 0
30400: EQUAL
30401: IFFALSE 30407
// InitStreamMode ;
30403: CALL 31583 0 0
// if p3 = 1 then
30407: LD_VAR 0 3
30411: PUSH
30412: LD_INT 1
30414: EQUAL
30415: IFFALSE 30425
// sRocket := true ;
30417: LD_ADDR_EXP 77
30421: PUSH
30422: LD_INT 1
30424: ST_TO_ADDR
// if p3 = 2 then
30425: LD_VAR 0 3
30429: PUSH
30430: LD_INT 2
30432: EQUAL
30433: IFFALSE 30443
// sSpeed := true ;
30435: LD_ADDR_EXP 76
30439: PUSH
30440: LD_INT 1
30442: ST_TO_ADDR
// if p3 = 3 then
30443: LD_VAR 0 3
30447: PUSH
30448: LD_INT 3
30450: EQUAL
30451: IFFALSE 30461
// sEngine := true ;
30453: LD_ADDR_EXP 78
30457: PUSH
30458: LD_INT 1
30460: ST_TO_ADDR
// if p3 = 4 then
30461: LD_VAR 0 3
30465: PUSH
30466: LD_INT 4
30468: EQUAL
30469: IFFALSE 30479
// sSpec := true ;
30471: LD_ADDR_EXP 75
30475: PUSH
30476: LD_INT 1
30478: ST_TO_ADDR
// if p3 = 5 then
30479: LD_VAR 0 3
30483: PUSH
30484: LD_INT 5
30486: EQUAL
30487: IFFALSE 30497
// sLevel := true ;
30489: LD_ADDR_EXP 79
30493: PUSH
30494: LD_INT 1
30496: ST_TO_ADDR
// if p3 = 6 then
30497: LD_VAR 0 3
30501: PUSH
30502: LD_INT 6
30504: EQUAL
30505: IFFALSE 30515
// sArmoury := true ;
30507: LD_ADDR_EXP 80
30511: PUSH
30512: LD_INT 1
30514: ST_TO_ADDR
// if p3 = 7 then
30515: LD_VAR 0 3
30519: PUSH
30520: LD_INT 7
30522: EQUAL
30523: IFFALSE 30533
// sRadar := true ;
30525: LD_ADDR_EXP 81
30529: PUSH
30530: LD_INT 1
30532: ST_TO_ADDR
// if p3 = 8 then
30533: LD_VAR 0 3
30537: PUSH
30538: LD_INT 8
30540: EQUAL
30541: IFFALSE 30551
// sBunker := true ;
30543: LD_ADDR_EXP 82
30547: PUSH
30548: LD_INT 1
30550: ST_TO_ADDR
// if p3 = 9 then
30551: LD_VAR 0 3
30555: PUSH
30556: LD_INT 9
30558: EQUAL
30559: IFFALSE 30569
// sHack := true ;
30561: LD_ADDR_EXP 83
30565: PUSH
30566: LD_INT 1
30568: ST_TO_ADDR
// if p3 = 10 then
30569: LD_VAR 0 3
30573: PUSH
30574: LD_INT 10
30576: EQUAL
30577: IFFALSE 30587
// sFire := true ;
30579: LD_ADDR_EXP 84
30583: PUSH
30584: LD_INT 1
30586: ST_TO_ADDR
// if p3 = 11 then
30587: LD_VAR 0 3
30591: PUSH
30592: LD_INT 11
30594: EQUAL
30595: IFFALSE 30605
// sRefresh := true ;
30597: LD_ADDR_EXP 85
30601: PUSH
30602: LD_INT 1
30604: ST_TO_ADDR
// if p3 = 12 then
30605: LD_VAR 0 3
30609: PUSH
30610: LD_INT 12
30612: EQUAL
30613: IFFALSE 30623
// sExp := true ;
30615: LD_ADDR_EXP 86
30619: PUSH
30620: LD_INT 1
30622: ST_TO_ADDR
// if p3 = 13 then
30623: LD_VAR 0 3
30627: PUSH
30628: LD_INT 13
30630: EQUAL
30631: IFFALSE 30641
// sDepot := true ;
30633: LD_ADDR_EXP 87
30637: PUSH
30638: LD_INT 1
30640: ST_TO_ADDR
// if p3 = 14 then
30641: LD_VAR 0 3
30645: PUSH
30646: LD_INT 14
30648: EQUAL
30649: IFFALSE 30659
// sFlag := true ;
30651: LD_ADDR_EXP 88
30655: PUSH
30656: LD_INT 1
30658: ST_TO_ADDR
// if p3 = 15 then
30659: LD_VAR 0 3
30663: PUSH
30664: LD_INT 15
30666: EQUAL
30667: IFFALSE 30677
// sKamikadze := true ;
30669: LD_ADDR_EXP 96
30673: PUSH
30674: LD_INT 1
30676: ST_TO_ADDR
// if p3 = 16 then
30677: LD_VAR 0 3
30681: PUSH
30682: LD_INT 16
30684: EQUAL
30685: IFFALSE 30695
// sTroll := true ;
30687: LD_ADDR_EXP 97
30691: PUSH
30692: LD_INT 1
30694: ST_TO_ADDR
// if p3 = 17 then
30695: LD_VAR 0 3
30699: PUSH
30700: LD_INT 17
30702: EQUAL
30703: IFFALSE 30713
// sSlow := true ;
30705: LD_ADDR_EXP 98
30709: PUSH
30710: LD_INT 1
30712: ST_TO_ADDR
// if p3 = 18 then
30713: LD_VAR 0 3
30717: PUSH
30718: LD_INT 18
30720: EQUAL
30721: IFFALSE 30731
// sLack := true ;
30723: LD_ADDR_EXP 99
30727: PUSH
30728: LD_INT 1
30730: ST_TO_ADDR
// if p3 = 19 then
30731: LD_VAR 0 3
30735: PUSH
30736: LD_INT 19
30738: EQUAL
30739: IFFALSE 30749
// sTank := true ;
30741: LD_ADDR_EXP 101
30745: PUSH
30746: LD_INT 1
30748: ST_TO_ADDR
// if p3 = 20 then
30749: LD_VAR 0 3
30753: PUSH
30754: LD_INT 20
30756: EQUAL
30757: IFFALSE 30767
// sRemote := true ;
30759: LD_ADDR_EXP 102
30763: PUSH
30764: LD_INT 1
30766: ST_TO_ADDR
// if p3 = 21 then
30767: LD_VAR 0 3
30771: PUSH
30772: LD_INT 21
30774: EQUAL
30775: IFFALSE 30785
// sPowell := true ;
30777: LD_ADDR_EXP 103
30781: PUSH
30782: LD_INT 1
30784: ST_TO_ADDR
// if p3 = 22 then
30785: LD_VAR 0 3
30789: PUSH
30790: LD_INT 22
30792: EQUAL
30793: IFFALSE 30803
// sTeleport := true ;
30795: LD_ADDR_EXP 106
30799: PUSH
30800: LD_INT 1
30802: ST_TO_ADDR
// if p3 = 23 then
30803: LD_VAR 0 3
30807: PUSH
30808: LD_INT 23
30810: EQUAL
30811: IFFALSE 30821
// sOilTower := true ;
30813: LD_ADDR_EXP 108
30817: PUSH
30818: LD_INT 1
30820: ST_TO_ADDR
// if p3 = 24 then
30821: LD_VAR 0 3
30825: PUSH
30826: LD_INT 24
30828: EQUAL
30829: IFFALSE 30839
// sShovel := true ;
30831: LD_ADDR_EXP 109
30835: PUSH
30836: LD_INT 1
30838: ST_TO_ADDR
// if p3 = 25 then
30839: LD_VAR 0 3
30843: PUSH
30844: LD_INT 25
30846: EQUAL
30847: IFFALSE 30857
// sSheik := true ;
30849: LD_ADDR_EXP 110
30853: PUSH
30854: LD_INT 1
30856: ST_TO_ADDR
// if p3 = 26 then
30857: LD_VAR 0 3
30861: PUSH
30862: LD_INT 26
30864: EQUAL
30865: IFFALSE 30875
// sEarthquake := true ;
30867: LD_ADDR_EXP 112
30871: PUSH
30872: LD_INT 1
30874: ST_TO_ADDR
// if p3 = 27 then
30875: LD_VAR 0 3
30879: PUSH
30880: LD_INT 27
30882: EQUAL
30883: IFFALSE 30893
// sAI := true ;
30885: LD_ADDR_EXP 113
30889: PUSH
30890: LD_INT 1
30892: ST_TO_ADDR
// if p3 = 28 then
30893: LD_VAR 0 3
30897: PUSH
30898: LD_INT 28
30900: EQUAL
30901: IFFALSE 30911
// sCargo := true ;
30903: LD_ADDR_EXP 116
30907: PUSH
30908: LD_INT 1
30910: ST_TO_ADDR
// if p3 = 29 then
30911: LD_VAR 0 3
30915: PUSH
30916: LD_INT 29
30918: EQUAL
30919: IFFALSE 30929
// sDLaser := true ;
30921: LD_ADDR_EXP 117
30925: PUSH
30926: LD_INT 1
30928: ST_TO_ADDR
// if p3 = 30 then
30929: LD_VAR 0 3
30933: PUSH
30934: LD_INT 30
30936: EQUAL
30937: IFFALSE 30947
// sExchange := true ;
30939: LD_ADDR_EXP 118
30943: PUSH
30944: LD_INT 1
30946: ST_TO_ADDR
// if p3 = 31 then
30947: LD_VAR 0 3
30951: PUSH
30952: LD_INT 31
30954: EQUAL
30955: IFFALSE 30965
// sFac := true ;
30957: LD_ADDR_EXP 119
30961: PUSH
30962: LD_INT 1
30964: ST_TO_ADDR
// if p3 = 32 then
30965: LD_VAR 0 3
30969: PUSH
30970: LD_INT 32
30972: EQUAL
30973: IFFALSE 30983
// sPower := true ;
30975: LD_ADDR_EXP 120
30979: PUSH
30980: LD_INT 1
30982: ST_TO_ADDR
// if p3 = 33 then
30983: LD_VAR 0 3
30987: PUSH
30988: LD_INT 33
30990: EQUAL
30991: IFFALSE 31001
// sRandom := true ;
30993: LD_ADDR_EXP 121
30997: PUSH
30998: LD_INT 1
31000: ST_TO_ADDR
// if p3 = 34 then
31001: LD_VAR 0 3
31005: PUSH
31006: LD_INT 34
31008: EQUAL
31009: IFFALSE 31019
// sShield := true ;
31011: LD_ADDR_EXP 122
31015: PUSH
31016: LD_INT 1
31018: ST_TO_ADDR
// if p3 = 35 then
31019: LD_VAR 0 3
31023: PUSH
31024: LD_INT 35
31026: EQUAL
31027: IFFALSE 31037
// sTime := true ;
31029: LD_ADDR_EXP 123
31033: PUSH
31034: LD_INT 1
31036: ST_TO_ADDR
// if p3 = 36 then
31037: LD_VAR 0 3
31041: PUSH
31042: LD_INT 36
31044: EQUAL
31045: IFFALSE 31055
// sTools := true ;
31047: LD_ADDR_EXP 124
31051: PUSH
31052: LD_INT 1
31054: ST_TO_ADDR
// if p3 = 101 then
31055: LD_VAR 0 3
31059: PUSH
31060: LD_INT 101
31062: EQUAL
31063: IFFALSE 31073
// sSold := true ;
31065: LD_ADDR_EXP 89
31069: PUSH
31070: LD_INT 1
31072: ST_TO_ADDR
// if p3 = 102 then
31073: LD_VAR 0 3
31077: PUSH
31078: LD_INT 102
31080: EQUAL
31081: IFFALSE 31091
// sDiff := true ;
31083: LD_ADDR_EXP 90
31087: PUSH
31088: LD_INT 1
31090: ST_TO_ADDR
// if p3 = 103 then
31091: LD_VAR 0 3
31095: PUSH
31096: LD_INT 103
31098: EQUAL
31099: IFFALSE 31109
// sFog := true ;
31101: LD_ADDR_EXP 93
31105: PUSH
31106: LD_INT 1
31108: ST_TO_ADDR
// if p3 = 104 then
31109: LD_VAR 0 3
31113: PUSH
31114: LD_INT 104
31116: EQUAL
31117: IFFALSE 31127
// sReset := true ;
31119: LD_ADDR_EXP 94
31123: PUSH
31124: LD_INT 1
31126: ST_TO_ADDR
// if p3 = 105 then
31127: LD_VAR 0 3
31131: PUSH
31132: LD_INT 105
31134: EQUAL
31135: IFFALSE 31145
// sSun := true ;
31137: LD_ADDR_EXP 95
31141: PUSH
31142: LD_INT 1
31144: ST_TO_ADDR
// if p3 = 106 then
31145: LD_VAR 0 3
31149: PUSH
31150: LD_INT 106
31152: EQUAL
31153: IFFALSE 31163
// sTiger := true ;
31155: LD_ADDR_EXP 91
31159: PUSH
31160: LD_INT 1
31162: ST_TO_ADDR
// if p3 = 107 then
31163: LD_VAR 0 3
31167: PUSH
31168: LD_INT 107
31170: EQUAL
31171: IFFALSE 31181
// sBomb := true ;
31173: LD_ADDR_EXP 92
31177: PUSH
31178: LD_INT 1
31180: ST_TO_ADDR
// if p3 = 108 then
31181: LD_VAR 0 3
31185: PUSH
31186: LD_INT 108
31188: EQUAL
31189: IFFALSE 31199
// sWound := true ;
31191: LD_ADDR_EXP 100
31195: PUSH
31196: LD_INT 1
31198: ST_TO_ADDR
// if p3 = 109 then
31199: LD_VAR 0 3
31203: PUSH
31204: LD_INT 109
31206: EQUAL
31207: IFFALSE 31217
// sBetray := true ;
31209: LD_ADDR_EXP 104
31213: PUSH
31214: LD_INT 1
31216: ST_TO_ADDR
// if p3 = 110 then
31217: LD_VAR 0 3
31221: PUSH
31222: LD_INT 110
31224: EQUAL
31225: IFFALSE 31235
// sContamin := true ;
31227: LD_ADDR_EXP 105
31231: PUSH
31232: LD_INT 1
31234: ST_TO_ADDR
// if p3 = 111 then
31235: LD_VAR 0 3
31239: PUSH
31240: LD_INT 111
31242: EQUAL
31243: IFFALSE 31253
// sOil := true ;
31245: LD_ADDR_EXP 107
31249: PUSH
31250: LD_INT 1
31252: ST_TO_ADDR
// if p3 = 112 then
31253: LD_VAR 0 3
31257: PUSH
31258: LD_INT 112
31260: EQUAL
31261: IFFALSE 31271
// sStu := true ;
31263: LD_ADDR_EXP 111
31267: PUSH
31268: LD_INT 1
31270: ST_TO_ADDR
// if p3 = 113 then
31271: LD_VAR 0 3
31275: PUSH
31276: LD_INT 113
31278: EQUAL
31279: IFFALSE 31289
// sBazooka := true ;
31281: LD_ADDR_EXP 114
31285: PUSH
31286: LD_INT 1
31288: ST_TO_ADDR
// if p3 = 114 then
31289: LD_VAR 0 3
31293: PUSH
31294: LD_INT 114
31296: EQUAL
31297: IFFALSE 31307
// sMortar := true ;
31299: LD_ADDR_EXP 115
31303: PUSH
31304: LD_INT 1
31306: ST_TO_ADDR
// if p3 = 115 then
31307: LD_VAR 0 3
31311: PUSH
31312: LD_INT 115
31314: EQUAL
31315: IFFALSE 31325
// sRanger := true ;
31317: LD_ADDR_EXP 125
31321: PUSH
31322: LD_INT 1
31324: ST_TO_ADDR
// if p3 = 116 then
31325: LD_VAR 0 3
31329: PUSH
31330: LD_INT 116
31332: EQUAL
31333: IFFALSE 31343
// sComputer := true ;
31335: LD_ADDR_EXP 126
31339: PUSH
31340: LD_INT 1
31342: ST_TO_ADDR
// if p3 = 117 then
31343: LD_VAR 0 3
31347: PUSH
31348: LD_INT 117
31350: EQUAL
31351: IFFALSE 31361
// s30 := true ;
31353: LD_ADDR_EXP 127
31357: PUSH
31358: LD_INT 1
31360: ST_TO_ADDR
// if p3 = 118 then
31361: LD_VAR 0 3
31365: PUSH
31366: LD_INT 118
31368: EQUAL
31369: IFFALSE 31379
// s60 := true ;
31371: LD_ADDR_EXP 128
31375: PUSH
31376: LD_INT 1
31378: ST_TO_ADDR
// end ; if p2 = hack_mode then
31379: LD_VAR 0 2
31383: PUSH
31384: LD_INT 101
31386: EQUAL
31387: IFFALSE 31515
// begin case p3 of 1 :
31389: LD_VAR 0 3
31393: PUSH
31394: LD_INT 1
31396: DOUBLE
31397: EQUAL
31398: IFTRUE 31402
31400: GO 31409
31402: POP
// hHackUnlimitedResources ; 2 :
31403: CALL 43654 0 0
31407: GO 31515
31409: LD_INT 2
31411: DOUBLE
31412: EQUAL
31413: IFTRUE 31417
31415: GO 31424
31417: POP
// hHackSetLevel10 ; 3 :
31418: CALL 43787 0 0
31422: GO 31515
31424: LD_INT 3
31426: DOUBLE
31427: EQUAL
31428: IFTRUE 31432
31430: GO 31439
31432: POP
// hHackSetLevel10YourUnits ; 4 :
31433: CALL 43872 0 0
31437: GO 31515
31439: LD_INT 4
31441: DOUBLE
31442: EQUAL
31443: IFTRUE 31447
31445: GO 31454
31447: POP
// hHackInvincible ; 5 :
31448: CALL 44320 0 0
31452: GO 31515
31454: LD_INT 5
31456: DOUBLE
31457: EQUAL
31458: IFTRUE 31462
31460: GO 31469
31462: POP
// hHackInvisible ; 6 :
31463: CALL 44431 0 0
31467: GO 31515
31469: LD_INT 6
31471: DOUBLE
31472: EQUAL
31473: IFTRUE 31477
31475: GO 31484
31477: POP
// hHackChangeYourSide ; 7 :
31478: CALL 44488 0 0
31482: GO 31515
31484: LD_INT 7
31486: DOUBLE
31487: EQUAL
31488: IFTRUE 31492
31490: GO 31499
31492: POP
// hHackChangeUnitSide ; 8 :
31493: CALL 44530 0 0
31497: GO 31515
31499: LD_INT 8
31501: DOUBLE
31502: EQUAL
31503: IFTRUE 31507
31505: GO 31514
31507: POP
// hHackFog ; end ;
31508: CALL 44631 0 0
31512: GO 31515
31514: POP
// end ; if p2 = game_save_mode then
31515: LD_VAR 0 2
31519: PUSH
31520: LD_INT 102
31522: EQUAL
31523: IFFALSE 31578
// begin if p3 = 1 then
31525: LD_VAR 0 3
31529: PUSH
31530: LD_INT 1
31532: EQUAL
31533: IFFALSE 31545
// globalGameSaveCounter := p4 ;
31535: LD_ADDR_EXP 71
31539: PUSH
31540: LD_VAR 0 4
31544: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
31545: LD_VAR 0 3
31549: PUSH
31550: LD_INT 2
31552: EQUAL
31553: PUSH
31554: LD_EXP 71
31558: AND
31559: IFFALSE 31578
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
31561: LD_STRING setGameSaveCounter(
31563: PUSH
31564: LD_EXP 71
31568: STR
31569: PUSH
31570: LD_STRING )
31572: STR
31573: PPUSH
31574: CALL_OW 559
// end ; end ;
31578: LD_VAR 0 7
31582: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
31583: LD_INT 0
31585: PPUSH
// streamModeActive := false ;
31586: LD_ADDR_EXP 72
31590: PUSH
31591: LD_INT 0
31593: ST_TO_ADDR
// normalCounter := 36 ;
31594: LD_ADDR_EXP 73
31598: PUSH
31599: LD_INT 36
31601: ST_TO_ADDR
// hardcoreCounter := 18 ;
31602: LD_ADDR_EXP 74
31606: PUSH
31607: LD_INT 18
31609: ST_TO_ADDR
// sRocket := false ;
31610: LD_ADDR_EXP 77
31614: PUSH
31615: LD_INT 0
31617: ST_TO_ADDR
// sSpeed := false ;
31618: LD_ADDR_EXP 76
31622: PUSH
31623: LD_INT 0
31625: ST_TO_ADDR
// sEngine := false ;
31626: LD_ADDR_EXP 78
31630: PUSH
31631: LD_INT 0
31633: ST_TO_ADDR
// sSpec := false ;
31634: LD_ADDR_EXP 75
31638: PUSH
31639: LD_INT 0
31641: ST_TO_ADDR
// sLevel := false ;
31642: LD_ADDR_EXP 79
31646: PUSH
31647: LD_INT 0
31649: ST_TO_ADDR
// sArmoury := false ;
31650: LD_ADDR_EXP 80
31654: PUSH
31655: LD_INT 0
31657: ST_TO_ADDR
// sRadar := false ;
31658: LD_ADDR_EXP 81
31662: PUSH
31663: LD_INT 0
31665: ST_TO_ADDR
// sBunker := false ;
31666: LD_ADDR_EXP 82
31670: PUSH
31671: LD_INT 0
31673: ST_TO_ADDR
// sHack := false ;
31674: LD_ADDR_EXP 83
31678: PUSH
31679: LD_INT 0
31681: ST_TO_ADDR
// sFire := false ;
31682: LD_ADDR_EXP 84
31686: PUSH
31687: LD_INT 0
31689: ST_TO_ADDR
// sRefresh := false ;
31690: LD_ADDR_EXP 85
31694: PUSH
31695: LD_INT 0
31697: ST_TO_ADDR
// sExp := false ;
31698: LD_ADDR_EXP 86
31702: PUSH
31703: LD_INT 0
31705: ST_TO_ADDR
// sDepot := false ;
31706: LD_ADDR_EXP 87
31710: PUSH
31711: LD_INT 0
31713: ST_TO_ADDR
// sFlag := false ;
31714: LD_ADDR_EXP 88
31718: PUSH
31719: LD_INT 0
31721: ST_TO_ADDR
// sKamikadze := false ;
31722: LD_ADDR_EXP 96
31726: PUSH
31727: LD_INT 0
31729: ST_TO_ADDR
// sTroll := false ;
31730: LD_ADDR_EXP 97
31734: PUSH
31735: LD_INT 0
31737: ST_TO_ADDR
// sSlow := false ;
31738: LD_ADDR_EXP 98
31742: PUSH
31743: LD_INT 0
31745: ST_TO_ADDR
// sLack := false ;
31746: LD_ADDR_EXP 99
31750: PUSH
31751: LD_INT 0
31753: ST_TO_ADDR
// sTank := false ;
31754: LD_ADDR_EXP 101
31758: PUSH
31759: LD_INT 0
31761: ST_TO_ADDR
// sRemote := false ;
31762: LD_ADDR_EXP 102
31766: PUSH
31767: LD_INT 0
31769: ST_TO_ADDR
// sPowell := false ;
31770: LD_ADDR_EXP 103
31774: PUSH
31775: LD_INT 0
31777: ST_TO_ADDR
// sTeleport := false ;
31778: LD_ADDR_EXP 106
31782: PUSH
31783: LD_INT 0
31785: ST_TO_ADDR
// sOilTower := false ;
31786: LD_ADDR_EXP 108
31790: PUSH
31791: LD_INT 0
31793: ST_TO_ADDR
// sShovel := false ;
31794: LD_ADDR_EXP 109
31798: PUSH
31799: LD_INT 0
31801: ST_TO_ADDR
// sSheik := false ;
31802: LD_ADDR_EXP 110
31806: PUSH
31807: LD_INT 0
31809: ST_TO_ADDR
// sEarthquake := false ;
31810: LD_ADDR_EXP 112
31814: PUSH
31815: LD_INT 0
31817: ST_TO_ADDR
// sAI := false ;
31818: LD_ADDR_EXP 113
31822: PUSH
31823: LD_INT 0
31825: ST_TO_ADDR
// sCargo := false ;
31826: LD_ADDR_EXP 116
31830: PUSH
31831: LD_INT 0
31833: ST_TO_ADDR
// sDLaser := false ;
31834: LD_ADDR_EXP 117
31838: PUSH
31839: LD_INT 0
31841: ST_TO_ADDR
// sExchange := false ;
31842: LD_ADDR_EXP 118
31846: PUSH
31847: LD_INT 0
31849: ST_TO_ADDR
// sFac := false ;
31850: LD_ADDR_EXP 119
31854: PUSH
31855: LD_INT 0
31857: ST_TO_ADDR
// sPower := false ;
31858: LD_ADDR_EXP 120
31862: PUSH
31863: LD_INT 0
31865: ST_TO_ADDR
// sRandom := false ;
31866: LD_ADDR_EXP 121
31870: PUSH
31871: LD_INT 0
31873: ST_TO_ADDR
// sShield := false ;
31874: LD_ADDR_EXP 122
31878: PUSH
31879: LD_INT 0
31881: ST_TO_ADDR
// sTime := false ;
31882: LD_ADDR_EXP 123
31886: PUSH
31887: LD_INT 0
31889: ST_TO_ADDR
// sTools := false ;
31890: LD_ADDR_EXP 124
31894: PUSH
31895: LD_INT 0
31897: ST_TO_ADDR
// sSold := false ;
31898: LD_ADDR_EXP 89
31902: PUSH
31903: LD_INT 0
31905: ST_TO_ADDR
// sDiff := false ;
31906: LD_ADDR_EXP 90
31910: PUSH
31911: LD_INT 0
31913: ST_TO_ADDR
// sFog := false ;
31914: LD_ADDR_EXP 93
31918: PUSH
31919: LD_INT 0
31921: ST_TO_ADDR
// sReset := false ;
31922: LD_ADDR_EXP 94
31926: PUSH
31927: LD_INT 0
31929: ST_TO_ADDR
// sSun := false ;
31930: LD_ADDR_EXP 95
31934: PUSH
31935: LD_INT 0
31937: ST_TO_ADDR
// sTiger := false ;
31938: LD_ADDR_EXP 91
31942: PUSH
31943: LD_INT 0
31945: ST_TO_ADDR
// sBomb := false ;
31946: LD_ADDR_EXP 92
31950: PUSH
31951: LD_INT 0
31953: ST_TO_ADDR
// sWound := false ;
31954: LD_ADDR_EXP 100
31958: PUSH
31959: LD_INT 0
31961: ST_TO_ADDR
// sBetray := false ;
31962: LD_ADDR_EXP 104
31966: PUSH
31967: LD_INT 0
31969: ST_TO_ADDR
// sContamin := false ;
31970: LD_ADDR_EXP 105
31974: PUSH
31975: LD_INT 0
31977: ST_TO_ADDR
// sOil := false ;
31978: LD_ADDR_EXP 107
31982: PUSH
31983: LD_INT 0
31985: ST_TO_ADDR
// sStu := false ;
31986: LD_ADDR_EXP 111
31990: PUSH
31991: LD_INT 0
31993: ST_TO_ADDR
// sBazooka := false ;
31994: LD_ADDR_EXP 114
31998: PUSH
31999: LD_INT 0
32001: ST_TO_ADDR
// sMortar := false ;
32002: LD_ADDR_EXP 115
32006: PUSH
32007: LD_INT 0
32009: ST_TO_ADDR
// sRanger := false ;
32010: LD_ADDR_EXP 125
32014: PUSH
32015: LD_INT 0
32017: ST_TO_ADDR
// sComputer := false ;
32018: LD_ADDR_EXP 126
32022: PUSH
32023: LD_INT 0
32025: ST_TO_ADDR
// s30 := false ;
32026: LD_ADDR_EXP 127
32030: PUSH
32031: LD_INT 0
32033: ST_TO_ADDR
// s60 := false ;
32034: LD_ADDR_EXP 128
32038: PUSH
32039: LD_INT 0
32041: ST_TO_ADDR
// end ;
32042: LD_VAR 0 1
32046: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
32047: LD_INT 0
32049: PPUSH
32050: PPUSH
32051: PPUSH
32052: PPUSH
32053: PPUSH
32054: PPUSH
32055: PPUSH
// result := [ ] ;
32056: LD_ADDR_VAR 0 2
32060: PUSH
32061: EMPTY
32062: ST_TO_ADDR
// if campaign_id = 1 then
32063: LD_OWVAR 69
32067: PUSH
32068: LD_INT 1
32070: EQUAL
32071: IFFALSE 35237
// begin case mission_number of 1 :
32073: LD_OWVAR 70
32077: PUSH
32078: LD_INT 1
32080: DOUBLE
32081: EQUAL
32082: IFTRUE 32086
32084: GO 32162
32086: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
32087: LD_ADDR_VAR 0 2
32091: PUSH
32092: LD_INT 2
32094: PUSH
32095: LD_INT 4
32097: PUSH
32098: LD_INT 11
32100: PUSH
32101: LD_INT 12
32103: PUSH
32104: LD_INT 15
32106: PUSH
32107: LD_INT 16
32109: PUSH
32110: LD_INT 22
32112: PUSH
32113: LD_INT 23
32115: PUSH
32116: LD_INT 26
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 101
32132: PUSH
32133: LD_INT 102
32135: PUSH
32136: LD_INT 106
32138: PUSH
32139: LD_INT 116
32141: PUSH
32142: LD_INT 117
32144: PUSH
32145: LD_INT 118
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: ST_TO_ADDR
32160: GO 35235
32162: LD_INT 2
32164: DOUBLE
32165: EQUAL
32166: IFTRUE 32170
32168: GO 32254
32170: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
32171: LD_ADDR_VAR 0 2
32175: PUSH
32176: LD_INT 2
32178: PUSH
32179: LD_INT 4
32181: PUSH
32182: LD_INT 11
32184: PUSH
32185: LD_INT 12
32187: PUSH
32188: LD_INT 15
32190: PUSH
32191: LD_INT 16
32193: PUSH
32194: LD_INT 22
32196: PUSH
32197: LD_INT 23
32199: PUSH
32200: LD_INT 26
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 101
32216: PUSH
32217: LD_INT 102
32219: PUSH
32220: LD_INT 105
32222: PUSH
32223: LD_INT 106
32225: PUSH
32226: LD_INT 108
32228: PUSH
32229: LD_INT 116
32231: PUSH
32232: LD_INT 117
32234: PUSH
32235: LD_INT 118
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: ST_TO_ADDR
32252: GO 35235
32254: LD_INT 3
32256: DOUBLE
32257: EQUAL
32258: IFTRUE 32262
32260: GO 32350
32262: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
32263: LD_ADDR_VAR 0 2
32267: PUSH
32268: LD_INT 2
32270: PUSH
32271: LD_INT 4
32273: PUSH
32274: LD_INT 5
32276: PUSH
32277: LD_INT 11
32279: PUSH
32280: LD_INT 12
32282: PUSH
32283: LD_INT 15
32285: PUSH
32286: LD_INT 16
32288: PUSH
32289: LD_INT 22
32291: PUSH
32292: LD_INT 26
32294: PUSH
32295: LD_INT 36
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 101
32312: PUSH
32313: LD_INT 102
32315: PUSH
32316: LD_INT 105
32318: PUSH
32319: LD_INT 106
32321: PUSH
32322: LD_INT 108
32324: PUSH
32325: LD_INT 116
32327: PUSH
32328: LD_INT 117
32330: PUSH
32331: LD_INT 118
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: ST_TO_ADDR
32348: GO 35235
32350: LD_INT 4
32352: DOUBLE
32353: EQUAL
32354: IFTRUE 32358
32356: GO 32454
32358: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
32359: LD_ADDR_VAR 0 2
32363: PUSH
32364: LD_INT 2
32366: PUSH
32367: LD_INT 4
32369: PUSH
32370: LD_INT 5
32372: PUSH
32373: LD_INT 8
32375: PUSH
32376: LD_INT 11
32378: PUSH
32379: LD_INT 12
32381: PUSH
32382: LD_INT 15
32384: PUSH
32385: LD_INT 16
32387: PUSH
32388: LD_INT 22
32390: PUSH
32391: LD_INT 23
32393: PUSH
32394: LD_INT 26
32396: PUSH
32397: LD_INT 36
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 101
32416: PUSH
32417: LD_INT 102
32419: PUSH
32420: LD_INT 105
32422: PUSH
32423: LD_INT 106
32425: PUSH
32426: LD_INT 108
32428: PUSH
32429: LD_INT 116
32431: PUSH
32432: LD_INT 117
32434: PUSH
32435: LD_INT 118
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: ST_TO_ADDR
32452: GO 35235
32454: LD_INT 5
32456: DOUBLE
32457: EQUAL
32458: IFTRUE 32462
32460: GO 32574
32462: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
32463: LD_ADDR_VAR 0 2
32467: PUSH
32468: LD_INT 2
32470: PUSH
32471: LD_INT 4
32473: PUSH
32474: LD_INT 5
32476: PUSH
32477: LD_INT 6
32479: PUSH
32480: LD_INT 8
32482: PUSH
32483: LD_INT 11
32485: PUSH
32486: LD_INT 12
32488: PUSH
32489: LD_INT 15
32491: PUSH
32492: LD_INT 16
32494: PUSH
32495: LD_INT 22
32497: PUSH
32498: LD_INT 23
32500: PUSH
32501: LD_INT 25
32503: PUSH
32504: LD_INT 26
32506: PUSH
32507: LD_INT 36
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 101
32528: PUSH
32529: LD_INT 102
32531: PUSH
32532: LD_INT 105
32534: PUSH
32535: LD_INT 106
32537: PUSH
32538: LD_INT 108
32540: PUSH
32541: LD_INT 109
32543: PUSH
32544: LD_INT 112
32546: PUSH
32547: LD_INT 116
32549: PUSH
32550: LD_INT 117
32552: PUSH
32553: LD_INT 118
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: ST_TO_ADDR
32572: GO 35235
32574: LD_INT 6
32576: DOUBLE
32577: EQUAL
32578: IFTRUE 32582
32580: GO 32714
32582: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
32583: LD_ADDR_VAR 0 2
32587: PUSH
32588: LD_INT 2
32590: PUSH
32591: LD_INT 4
32593: PUSH
32594: LD_INT 5
32596: PUSH
32597: LD_INT 6
32599: PUSH
32600: LD_INT 8
32602: PUSH
32603: LD_INT 11
32605: PUSH
32606: LD_INT 12
32608: PUSH
32609: LD_INT 15
32611: PUSH
32612: LD_INT 16
32614: PUSH
32615: LD_INT 20
32617: PUSH
32618: LD_INT 21
32620: PUSH
32621: LD_INT 22
32623: PUSH
32624: LD_INT 23
32626: PUSH
32627: LD_INT 25
32629: PUSH
32630: LD_INT 26
32632: PUSH
32633: LD_INT 30
32635: PUSH
32636: LD_INT 31
32638: PUSH
32639: LD_INT 32
32641: PUSH
32642: LD_INT 36
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 101
32668: PUSH
32669: LD_INT 102
32671: PUSH
32672: LD_INT 105
32674: PUSH
32675: LD_INT 106
32677: PUSH
32678: LD_INT 108
32680: PUSH
32681: LD_INT 109
32683: PUSH
32684: LD_INT 112
32686: PUSH
32687: LD_INT 116
32689: PUSH
32690: LD_INT 117
32692: PUSH
32693: LD_INT 118
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: ST_TO_ADDR
32712: GO 35235
32714: LD_INT 7
32716: DOUBLE
32717: EQUAL
32718: IFTRUE 32722
32720: GO 32834
32722: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
32723: LD_ADDR_VAR 0 2
32727: PUSH
32728: LD_INT 2
32730: PUSH
32731: LD_INT 4
32733: PUSH
32734: LD_INT 5
32736: PUSH
32737: LD_INT 7
32739: PUSH
32740: LD_INT 11
32742: PUSH
32743: LD_INT 12
32745: PUSH
32746: LD_INT 15
32748: PUSH
32749: LD_INT 16
32751: PUSH
32752: LD_INT 20
32754: PUSH
32755: LD_INT 21
32757: PUSH
32758: LD_INT 22
32760: PUSH
32761: LD_INT 23
32763: PUSH
32764: LD_INT 25
32766: PUSH
32767: LD_INT 26
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 101
32788: PUSH
32789: LD_INT 102
32791: PUSH
32792: LD_INT 103
32794: PUSH
32795: LD_INT 105
32797: PUSH
32798: LD_INT 106
32800: PUSH
32801: LD_INT 108
32803: PUSH
32804: LD_INT 112
32806: PUSH
32807: LD_INT 116
32809: PUSH
32810: LD_INT 117
32812: PUSH
32813: LD_INT 118
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: ST_TO_ADDR
32832: GO 35235
32834: LD_INT 8
32836: DOUBLE
32837: EQUAL
32838: IFTRUE 32842
32840: GO 32982
32842: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
32843: LD_ADDR_VAR 0 2
32847: PUSH
32848: LD_INT 2
32850: PUSH
32851: LD_INT 4
32853: PUSH
32854: LD_INT 5
32856: PUSH
32857: LD_INT 6
32859: PUSH
32860: LD_INT 7
32862: PUSH
32863: LD_INT 8
32865: PUSH
32866: LD_INT 11
32868: PUSH
32869: LD_INT 12
32871: PUSH
32872: LD_INT 15
32874: PUSH
32875: LD_INT 16
32877: PUSH
32878: LD_INT 20
32880: PUSH
32881: LD_INT 21
32883: PUSH
32884: LD_INT 22
32886: PUSH
32887: LD_INT 23
32889: PUSH
32890: LD_INT 25
32892: PUSH
32893: LD_INT 26
32895: PUSH
32896: LD_INT 30
32898: PUSH
32899: LD_INT 31
32901: PUSH
32902: LD_INT 32
32904: PUSH
32905: LD_INT 36
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 101
32932: PUSH
32933: LD_INT 102
32935: PUSH
32936: LD_INT 103
32938: PUSH
32939: LD_INT 105
32941: PUSH
32942: LD_INT 106
32944: PUSH
32945: LD_INT 108
32947: PUSH
32948: LD_INT 109
32950: PUSH
32951: LD_INT 112
32953: PUSH
32954: LD_INT 116
32956: PUSH
32957: LD_INT 117
32959: PUSH
32960: LD_INT 118
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: ST_TO_ADDR
32980: GO 35235
32982: LD_INT 9
32984: DOUBLE
32985: EQUAL
32986: IFTRUE 32990
32988: GO 33138
32990: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
32991: LD_ADDR_VAR 0 2
32995: PUSH
32996: LD_INT 2
32998: PUSH
32999: LD_INT 4
33001: PUSH
33002: LD_INT 5
33004: PUSH
33005: LD_INT 6
33007: PUSH
33008: LD_INT 7
33010: PUSH
33011: LD_INT 8
33013: PUSH
33014: LD_INT 11
33016: PUSH
33017: LD_INT 12
33019: PUSH
33020: LD_INT 15
33022: PUSH
33023: LD_INT 16
33025: PUSH
33026: LD_INT 20
33028: PUSH
33029: LD_INT 21
33031: PUSH
33032: LD_INT 22
33034: PUSH
33035: LD_INT 23
33037: PUSH
33038: LD_INT 25
33040: PUSH
33041: LD_INT 26
33043: PUSH
33044: LD_INT 28
33046: PUSH
33047: LD_INT 30
33049: PUSH
33050: LD_INT 31
33052: PUSH
33053: LD_INT 32
33055: PUSH
33056: LD_INT 36
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 101
33084: PUSH
33085: LD_INT 102
33087: PUSH
33088: LD_INT 103
33090: PUSH
33091: LD_INT 105
33093: PUSH
33094: LD_INT 106
33096: PUSH
33097: LD_INT 108
33099: PUSH
33100: LD_INT 109
33102: PUSH
33103: LD_INT 112
33105: PUSH
33106: LD_INT 114
33108: PUSH
33109: LD_INT 116
33111: PUSH
33112: LD_INT 117
33114: PUSH
33115: LD_INT 118
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: ST_TO_ADDR
33136: GO 35235
33138: LD_INT 10
33140: DOUBLE
33141: EQUAL
33142: IFTRUE 33146
33144: GO 33342
33146: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
33147: LD_ADDR_VAR 0 2
33151: PUSH
33152: LD_INT 2
33154: PUSH
33155: LD_INT 4
33157: PUSH
33158: LD_INT 5
33160: PUSH
33161: LD_INT 6
33163: PUSH
33164: LD_INT 7
33166: PUSH
33167: LD_INT 8
33169: PUSH
33170: LD_INT 9
33172: PUSH
33173: LD_INT 10
33175: PUSH
33176: LD_INT 11
33178: PUSH
33179: LD_INT 12
33181: PUSH
33182: LD_INT 13
33184: PUSH
33185: LD_INT 14
33187: PUSH
33188: LD_INT 15
33190: PUSH
33191: LD_INT 16
33193: PUSH
33194: LD_INT 17
33196: PUSH
33197: LD_INT 18
33199: PUSH
33200: LD_INT 19
33202: PUSH
33203: LD_INT 20
33205: PUSH
33206: LD_INT 21
33208: PUSH
33209: LD_INT 22
33211: PUSH
33212: LD_INT 23
33214: PUSH
33215: LD_INT 24
33217: PUSH
33218: LD_INT 25
33220: PUSH
33221: LD_INT 26
33223: PUSH
33224: LD_INT 28
33226: PUSH
33227: LD_INT 30
33229: PUSH
33230: LD_INT 31
33232: PUSH
33233: LD_INT 32
33235: PUSH
33236: LD_INT 36
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 101
33272: PUSH
33273: LD_INT 102
33275: PUSH
33276: LD_INT 103
33278: PUSH
33279: LD_INT 104
33281: PUSH
33282: LD_INT 105
33284: PUSH
33285: LD_INT 106
33287: PUSH
33288: LD_INT 107
33290: PUSH
33291: LD_INT 108
33293: PUSH
33294: LD_INT 109
33296: PUSH
33297: LD_INT 110
33299: PUSH
33300: LD_INT 111
33302: PUSH
33303: LD_INT 112
33305: PUSH
33306: LD_INT 114
33308: PUSH
33309: LD_INT 116
33311: PUSH
33312: LD_INT 117
33314: PUSH
33315: LD_INT 118
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: ST_TO_ADDR
33340: GO 35235
33342: LD_INT 11
33344: DOUBLE
33345: EQUAL
33346: IFTRUE 33350
33348: GO 33554
33350: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
33351: LD_ADDR_VAR 0 2
33355: PUSH
33356: LD_INT 2
33358: PUSH
33359: LD_INT 3
33361: PUSH
33362: LD_INT 4
33364: PUSH
33365: LD_INT 5
33367: PUSH
33368: LD_INT 6
33370: PUSH
33371: LD_INT 7
33373: PUSH
33374: LD_INT 8
33376: PUSH
33377: LD_INT 9
33379: PUSH
33380: LD_INT 10
33382: PUSH
33383: LD_INT 11
33385: PUSH
33386: LD_INT 12
33388: PUSH
33389: LD_INT 13
33391: PUSH
33392: LD_INT 14
33394: PUSH
33395: LD_INT 15
33397: PUSH
33398: LD_INT 16
33400: PUSH
33401: LD_INT 17
33403: PUSH
33404: LD_INT 18
33406: PUSH
33407: LD_INT 19
33409: PUSH
33410: LD_INT 20
33412: PUSH
33413: LD_INT 21
33415: PUSH
33416: LD_INT 22
33418: PUSH
33419: LD_INT 23
33421: PUSH
33422: LD_INT 24
33424: PUSH
33425: LD_INT 25
33427: PUSH
33428: LD_INT 26
33430: PUSH
33431: LD_INT 28
33433: PUSH
33434: LD_INT 30
33436: PUSH
33437: LD_INT 31
33439: PUSH
33440: LD_INT 32
33442: PUSH
33443: LD_INT 34
33445: PUSH
33446: LD_INT 36
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 101
33484: PUSH
33485: LD_INT 102
33487: PUSH
33488: LD_INT 103
33490: PUSH
33491: LD_INT 104
33493: PUSH
33494: LD_INT 105
33496: PUSH
33497: LD_INT 106
33499: PUSH
33500: LD_INT 107
33502: PUSH
33503: LD_INT 108
33505: PUSH
33506: LD_INT 109
33508: PUSH
33509: LD_INT 110
33511: PUSH
33512: LD_INT 111
33514: PUSH
33515: LD_INT 112
33517: PUSH
33518: LD_INT 114
33520: PUSH
33521: LD_INT 116
33523: PUSH
33524: LD_INT 117
33526: PUSH
33527: LD_INT 118
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: ST_TO_ADDR
33552: GO 35235
33554: LD_INT 12
33556: DOUBLE
33557: EQUAL
33558: IFTRUE 33562
33560: GO 33782
33562: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
33563: LD_ADDR_VAR 0 2
33567: PUSH
33568: LD_INT 1
33570: PUSH
33571: LD_INT 2
33573: PUSH
33574: LD_INT 3
33576: PUSH
33577: LD_INT 4
33579: PUSH
33580: LD_INT 5
33582: PUSH
33583: LD_INT 6
33585: PUSH
33586: LD_INT 7
33588: PUSH
33589: LD_INT 8
33591: PUSH
33592: LD_INT 9
33594: PUSH
33595: LD_INT 10
33597: PUSH
33598: LD_INT 11
33600: PUSH
33601: LD_INT 12
33603: PUSH
33604: LD_INT 13
33606: PUSH
33607: LD_INT 14
33609: PUSH
33610: LD_INT 15
33612: PUSH
33613: LD_INT 16
33615: PUSH
33616: LD_INT 17
33618: PUSH
33619: LD_INT 18
33621: PUSH
33622: LD_INT 19
33624: PUSH
33625: LD_INT 20
33627: PUSH
33628: LD_INT 21
33630: PUSH
33631: LD_INT 22
33633: PUSH
33634: LD_INT 23
33636: PUSH
33637: LD_INT 24
33639: PUSH
33640: LD_INT 25
33642: PUSH
33643: LD_INT 26
33645: PUSH
33646: LD_INT 27
33648: PUSH
33649: LD_INT 28
33651: PUSH
33652: LD_INT 30
33654: PUSH
33655: LD_INT 31
33657: PUSH
33658: LD_INT 32
33660: PUSH
33661: LD_INT 33
33663: PUSH
33664: LD_INT 34
33666: PUSH
33667: LD_INT 36
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 101
33708: PUSH
33709: LD_INT 102
33711: PUSH
33712: LD_INT 103
33714: PUSH
33715: LD_INT 104
33717: PUSH
33718: LD_INT 105
33720: PUSH
33721: LD_INT 106
33723: PUSH
33724: LD_INT 107
33726: PUSH
33727: LD_INT 108
33729: PUSH
33730: LD_INT 109
33732: PUSH
33733: LD_INT 110
33735: PUSH
33736: LD_INT 111
33738: PUSH
33739: LD_INT 112
33741: PUSH
33742: LD_INT 113
33744: PUSH
33745: LD_INT 114
33747: PUSH
33748: LD_INT 116
33750: PUSH
33751: LD_INT 117
33753: PUSH
33754: LD_INT 118
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: ST_TO_ADDR
33780: GO 35235
33782: LD_INT 13
33784: DOUBLE
33785: EQUAL
33786: IFTRUE 33790
33788: GO 33998
33790: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
33791: LD_ADDR_VAR 0 2
33795: PUSH
33796: LD_INT 1
33798: PUSH
33799: LD_INT 2
33801: PUSH
33802: LD_INT 3
33804: PUSH
33805: LD_INT 4
33807: PUSH
33808: LD_INT 5
33810: PUSH
33811: LD_INT 8
33813: PUSH
33814: LD_INT 9
33816: PUSH
33817: LD_INT 10
33819: PUSH
33820: LD_INT 11
33822: PUSH
33823: LD_INT 12
33825: PUSH
33826: LD_INT 14
33828: PUSH
33829: LD_INT 15
33831: PUSH
33832: LD_INT 16
33834: PUSH
33835: LD_INT 17
33837: PUSH
33838: LD_INT 18
33840: PUSH
33841: LD_INT 19
33843: PUSH
33844: LD_INT 20
33846: PUSH
33847: LD_INT 21
33849: PUSH
33850: LD_INT 22
33852: PUSH
33853: LD_INT 23
33855: PUSH
33856: LD_INT 24
33858: PUSH
33859: LD_INT 25
33861: PUSH
33862: LD_INT 26
33864: PUSH
33865: LD_INT 27
33867: PUSH
33868: LD_INT 28
33870: PUSH
33871: LD_INT 30
33873: PUSH
33874: LD_INT 31
33876: PUSH
33877: LD_INT 32
33879: PUSH
33880: LD_INT 33
33882: PUSH
33883: LD_INT 34
33885: PUSH
33886: LD_INT 36
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 101
33924: PUSH
33925: LD_INT 102
33927: PUSH
33928: LD_INT 103
33930: PUSH
33931: LD_INT 104
33933: PUSH
33934: LD_INT 105
33936: PUSH
33937: LD_INT 106
33939: PUSH
33940: LD_INT 107
33942: PUSH
33943: LD_INT 108
33945: PUSH
33946: LD_INT 109
33948: PUSH
33949: LD_INT 110
33951: PUSH
33952: LD_INT 111
33954: PUSH
33955: LD_INT 112
33957: PUSH
33958: LD_INT 113
33960: PUSH
33961: LD_INT 114
33963: PUSH
33964: LD_INT 116
33966: PUSH
33967: LD_INT 117
33969: PUSH
33970: LD_INT 118
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: ST_TO_ADDR
33996: GO 35235
33998: LD_INT 14
34000: DOUBLE
34001: EQUAL
34002: IFTRUE 34006
34004: GO 34230
34006: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
34007: LD_ADDR_VAR 0 2
34011: PUSH
34012: LD_INT 1
34014: PUSH
34015: LD_INT 2
34017: PUSH
34018: LD_INT 3
34020: PUSH
34021: LD_INT 4
34023: PUSH
34024: LD_INT 5
34026: PUSH
34027: LD_INT 6
34029: PUSH
34030: LD_INT 7
34032: PUSH
34033: LD_INT 8
34035: PUSH
34036: LD_INT 9
34038: PUSH
34039: LD_INT 10
34041: PUSH
34042: LD_INT 11
34044: PUSH
34045: LD_INT 12
34047: PUSH
34048: LD_INT 13
34050: PUSH
34051: LD_INT 14
34053: PUSH
34054: LD_INT 15
34056: PUSH
34057: LD_INT 16
34059: PUSH
34060: LD_INT 17
34062: PUSH
34063: LD_INT 18
34065: PUSH
34066: LD_INT 19
34068: PUSH
34069: LD_INT 20
34071: PUSH
34072: LD_INT 21
34074: PUSH
34075: LD_INT 22
34077: PUSH
34078: LD_INT 23
34080: PUSH
34081: LD_INT 24
34083: PUSH
34084: LD_INT 25
34086: PUSH
34087: LD_INT 26
34089: PUSH
34090: LD_INT 27
34092: PUSH
34093: LD_INT 28
34095: PUSH
34096: LD_INT 29
34098: PUSH
34099: LD_INT 30
34101: PUSH
34102: LD_INT 31
34104: PUSH
34105: LD_INT 32
34107: PUSH
34108: LD_INT 33
34110: PUSH
34111: LD_INT 34
34113: PUSH
34114: LD_INT 36
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 101
34156: PUSH
34157: LD_INT 102
34159: PUSH
34160: LD_INT 103
34162: PUSH
34163: LD_INT 104
34165: PUSH
34166: LD_INT 105
34168: PUSH
34169: LD_INT 106
34171: PUSH
34172: LD_INT 107
34174: PUSH
34175: LD_INT 108
34177: PUSH
34178: LD_INT 109
34180: PUSH
34181: LD_INT 110
34183: PUSH
34184: LD_INT 111
34186: PUSH
34187: LD_INT 112
34189: PUSH
34190: LD_INT 113
34192: PUSH
34193: LD_INT 114
34195: PUSH
34196: LD_INT 116
34198: PUSH
34199: LD_INT 117
34201: PUSH
34202: LD_INT 118
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: ST_TO_ADDR
34228: GO 35235
34230: LD_INT 15
34232: DOUBLE
34233: EQUAL
34234: IFTRUE 34238
34236: GO 34462
34238: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
34239: LD_ADDR_VAR 0 2
34243: PUSH
34244: LD_INT 1
34246: PUSH
34247: LD_INT 2
34249: PUSH
34250: LD_INT 3
34252: PUSH
34253: LD_INT 4
34255: PUSH
34256: LD_INT 5
34258: PUSH
34259: LD_INT 6
34261: PUSH
34262: LD_INT 7
34264: PUSH
34265: LD_INT 8
34267: PUSH
34268: LD_INT 9
34270: PUSH
34271: LD_INT 10
34273: PUSH
34274: LD_INT 11
34276: PUSH
34277: LD_INT 12
34279: PUSH
34280: LD_INT 13
34282: PUSH
34283: LD_INT 14
34285: PUSH
34286: LD_INT 15
34288: PUSH
34289: LD_INT 16
34291: PUSH
34292: LD_INT 17
34294: PUSH
34295: LD_INT 18
34297: PUSH
34298: LD_INT 19
34300: PUSH
34301: LD_INT 20
34303: PUSH
34304: LD_INT 21
34306: PUSH
34307: LD_INT 22
34309: PUSH
34310: LD_INT 23
34312: PUSH
34313: LD_INT 24
34315: PUSH
34316: LD_INT 25
34318: PUSH
34319: LD_INT 26
34321: PUSH
34322: LD_INT 27
34324: PUSH
34325: LD_INT 28
34327: PUSH
34328: LD_INT 29
34330: PUSH
34331: LD_INT 30
34333: PUSH
34334: LD_INT 31
34336: PUSH
34337: LD_INT 32
34339: PUSH
34340: LD_INT 33
34342: PUSH
34343: LD_INT 34
34345: PUSH
34346: LD_INT 36
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 101
34388: PUSH
34389: LD_INT 102
34391: PUSH
34392: LD_INT 103
34394: PUSH
34395: LD_INT 104
34397: PUSH
34398: LD_INT 105
34400: PUSH
34401: LD_INT 106
34403: PUSH
34404: LD_INT 107
34406: PUSH
34407: LD_INT 108
34409: PUSH
34410: LD_INT 109
34412: PUSH
34413: LD_INT 110
34415: PUSH
34416: LD_INT 111
34418: PUSH
34419: LD_INT 112
34421: PUSH
34422: LD_INT 113
34424: PUSH
34425: LD_INT 114
34427: PUSH
34428: LD_INT 116
34430: PUSH
34431: LD_INT 117
34433: PUSH
34434: LD_INT 118
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: ST_TO_ADDR
34460: GO 35235
34462: LD_INT 16
34464: DOUBLE
34465: EQUAL
34466: IFTRUE 34470
34468: GO 34606
34470: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
34471: LD_ADDR_VAR 0 2
34475: PUSH
34476: LD_INT 2
34478: PUSH
34479: LD_INT 4
34481: PUSH
34482: LD_INT 5
34484: PUSH
34485: LD_INT 7
34487: PUSH
34488: LD_INT 11
34490: PUSH
34491: LD_INT 12
34493: PUSH
34494: LD_INT 15
34496: PUSH
34497: LD_INT 16
34499: PUSH
34500: LD_INT 20
34502: PUSH
34503: LD_INT 21
34505: PUSH
34506: LD_INT 22
34508: PUSH
34509: LD_INT 23
34511: PUSH
34512: LD_INT 25
34514: PUSH
34515: LD_INT 26
34517: PUSH
34518: LD_INT 30
34520: PUSH
34521: LD_INT 31
34523: PUSH
34524: LD_INT 32
34526: PUSH
34527: LD_INT 33
34529: PUSH
34530: LD_INT 34
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 101
34556: PUSH
34557: LD_INT 102
34559: PUSH
34560: LD_INT 103
34562: PUSH
34563: LD_INT 106
34565: PUSH
34566: LD_INT 108
34568: PUSH
34569: LD_INT 112
34571: PUSH
34572: LD_INT 113
34574: PUSH
34575: LD_INT 114
34577: PUSH
34578: LD_INT 116
34580: PUSH
34581: LD_INT 117
34583: PUSH
34584: LD_INT 118
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: ST_TO_ADDR
34604: GO 35235
34606: LD_INT 17
34608: DOUBLE
34609: EQUAL
34610: IFTRUE 34614
34612: GO 34838
34614: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
34615: LD_ADDR_VAR 0 2
34619: PUSH
34620: LD_INT 1
34622: PUSH
34623: LD_INT 2
34625: PUSH
34626: LD_INT 3
34628: PUSH
34629: LD_INT 4
34631: PUSH
34632: LD_INT 5
34634: PUSH
34635: LD_INT 6
34637: PUSH
34638: LD_INT 7
34640: PUSH
34641: LD_INT 8
34643: PUSH
34644: LD_INT 9
34646: PUSH
34647: LD_INT 10
34649: PUSH
34650: LD_INT 11
34652: PUSH
34653: LD_INT 12
34655: PUSH
34656: LD_INT 13
34658: PUSH
34659: LD_INT 14
34661: PUSH
34662: LD_INT 15
34664: PUSH
34665: LD_INT 16
34667: PUSH
34668: LD_INT 17
34670: PUSH
34671: LD_INT 18
34673: PUSH
34674: LD_INT 19
34676: PUSH
34677: LD_INT 20
34679: PUSH
34680: LD_INT 21
34682: PUSH
34683: LD_INT 22
34685: PUSH
34686: LD_INT 23
34688: PUSH
34689: LD_INT 24
34691: PUSH
34692: LD_INT 25
34694: PUSH
34695: LD_INT 26
34697: PUSH
34698: LD_INT 27
34700: PUSH
34701: LD_INT 28
34703: PUSH
34704: LD_INT 29
34706: PUSH
34707: LD_INT 30
34709: PUSH
34710: LD_INT 31
34712: PUSH
34713: LD_INT 32
34715: PUSH
34716: LD_INT 33
34718: PUSH
34719: LD_INT 34
34721: PUSH
34722: LD_INT 36
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 101
34764: PUSH
34765: LD_INT 102
34767: PUSH
34768: LD_INT 103
34770: PUSH
34771: LD_INT 104
34773: PUSH
34774: LD_INT 105
34776: PUSH
34777: LD_INT 106
34779: PUSH
34780: LD_INT 107
34782: PUSH
34783: LD_INT 108
34785: PUSH
34786: LD_INT 109
34788: PUSH
34789: LD_INT 110
34791: PUSH
34792: LD_INT 111
34794: PUSH
34795: LD_INT 112
34797: PUSH
34798: LD_INT 113
34800: PUSH
34801: LD_INT 114
34803: PUSH
34804: LD_INT 116
34806: PUSH
34807: LD_INT 117
34809: PUSH
34810: LD_INT 118
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: ST_TO_ADDR
34836: GO 35235
34838: LD_INT 18
34840: DOUBLE
34841: EQUAL
34842: IFTRUE 34846
34844: GO 34994
34846: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
34847: LD_ADDR_VAR 0 2
34851: PUSH
34852: LD_INT 2
34854: PUSH
34855: LD_INT 4
34857: PUSH
34858: LD_INT 5
34860: PUSH
34861: LD_INT 7
34863: PUSH
34864: LD_INT 11
34866: PUSH
34867: LD_INT 12
34869: PUSH
34870: LD_INT 15
34872: PUSH
34873: LD_INT 16
34875: PUSH
34876: LD_INT 20
34878: PUSH
34879: LD_INT 21
34881: PUSH
34882: LD_INT 22
34884: PUSH
34885: LD_INT 23
34887: PUSH
34888: LD_INT 25
34890: PUSH
34891: LD_INT 26
34893: PUSH
34894: LD_INT 30
34896: PUSH
34897: LD_INT 31
34899: PUSH
34900: LD_INT 32
34902: PUSH
34903: LD_INT 33
34905: PUSH
34906: LD_INT 34
34908: PUSH
34909: LD_INT 35
34911: PUSH
34912: LD_INT 36
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 101
34940: PUSH
34941: LD_INT 102
34943: PUSH
34944: LD_INT 103
34946: PUSH
34947: LD_INT 106
34949: PUSH
34950: LD_INT 108
34952: PUSH
34953: LD_INT 112
34955: PUSH
34956: LD_INT 113
34958: PUSH
34959: LD_INT 114
34961: PUSH
34962: LD_INT 115
34964: PUSH
34965: LD_INT 116
34967: PUSH
34968: LD_INT 117
34970: PUSH
34971: LD_INT 118
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: ST_TO_ADDR
34992: GO 35235
34994: LD_INT 19
34996: DOUBLE
34997: EQUAL
34998: IFTRUE 35002
35000: GO 35234
35002: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
35003: LD_ADDR_VAR 0 2
35007: PUSH
35008: LD_INT 1
35010: PUSH
35011: LD_INT 2
35013: PUSH
35014: LD_INT 3
35016: PUSH
35017: LD_INT 4
35019: PUSH
35020: LD_INT 5
35022: PUSH
35023: LD_INT 6
35025: PUSH
35026: LD_INT 7
35028: PUSH
35029: LD_INT 8
35031: PUSH
35032: LD_INT 9
35034: PUSH
35035: LD_INT 10
35037: PUSH
35038: LD_INT 11
35040: PUSH
35041: LD_INT 12
35043: PUSH
35044: LD_INT 13
35046: PUSH
35047: LD_INT 14
35049: PUSH
35050: LD_INT 15
35052: PUSH
35053: LD_INT 16
35055: PUSH
35056: LD_INT 17
35058: PUSH
35059: LD_INT 18
35061: PUSH
35062: LD_INT 19
35064: PUSH
35065: LD_INT 20
35067: PUSH
35068: LD_INT 21
35070: PUSH
35071: LD_INT 22
35073: PUSH
35074: LD_INT 23
35076: PUSH
35077: LD_INT 24
35079: PUSH
35080: LD_INT 25
35082: PUSH
35083: LD_INT 26
35085: PUSH
35086: LD_INT 27
35088: PUSH
35089: LD_INT 28
35091: PUSH
35092: LD_INT 29
35094: PUSH
35095: LD_INT 30
35097: PUSH
35098: LD_INT 31
35100: PUSH
35101: LD_INT 32
35103: PUSH
35104: LD_INT 33
35106: PUSH
35107: LD_INT 34
35109: PUSH
35110: LD_INT 35
35112: PUSH
35113: LD_INT 36
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 101
35156: PUSH
35157: LD_INT 102
35159: PUSH
35160: LD_INT 103
35162: PUSH
35163: LD_INT 104
35165: PUSH
35166: LD_INT 105
35168: PUSH
35169: LD_INT 106
35171: PUSH
35172: LD_INT 107
35174: PUSH
35175: LD_INT 108
35177: PUSH
35178: LD_INT 109
35180: PUSH
35181: LD_INT 110
35183: PUSH
35184: LD_INT 111
35186: PUSH
35187: LD_INT 112
35189: PUSH
35190: LD_INT 113
35192: PUSH
35193: LD_INT 114
35195: PUSH
35196: LD_INT 115
35198: PUSH
35199: LD_INT 116
35201: PUSH
35202: LD_INT 117
35204: PUSH
35205: LD_INT 118
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: ST_TO_ADDR
35232: GO 35235
35234: POP
// end else
35235: GO 35466
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
35237: LD_ADDR_VAR 0 2
35241: PUSH
35242: LD_INT 1
35244: PUSH
35245: LD_INT 2
35247: PUSH
35248: LD_INT 3
35250: PUSH
35251: LD_INT 4
35253: PUSH
35254: LD_INT 5
35256: PUSH
35257: LD_INT 6
35259: PUSH
35260: LD_INT 7
35262: PUSH
35263: LD_INT 8
35265: PUSH
35266: LD_INT 9
35268: PUSH
35269: LD_INT 10
35271: PUSH
35272: LD_INT 11
35274: PUSH
35275: LD_INT 12
35277: PUSH
35278: LD_INT 13
35280: PUSH
35281: LD_INT 14
35283: PUSH
35284: LD_INT 15
35286: PUSH
35287: LD_INT 16
35289: PUSH
35290: LD_INT 17
35292: PUSH
35293: LD_INT 18
35295: PUSH
35296: LD_INT 19
35298: PUSH
35299: LD_INT 20
35301: PUSH
35302: LD_INT 21
35304: PUSH
35305: LD_INT 22
35307: PUSH
35308: LD_INT 23
35310: PUSH
35311: LD_INT 24
35313: PUSH
35314: LD_INT 25
35316: PUSH
35317: LD_INT 26
35319: PUSH
35320: LD_INT 27
35322: PUSH
35323: LD_INT 28
35325: PUSH
35326: LD_INT 29
35328: PUSH
35329: LD_INT 30
35331: PUSH
35332: LD_INT 31
35334: PUSH
35335: LD_INT 32
35337: PUSH
35338: LD_INT 33
35340: PUSH
35341: LD_INT 34
35343: PUSH
35344: LD_INT 35
35346: PUSH
35347: LD_INT 36
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 101
35390: PUSH
35391: LD_INT 102
35393: PUSH
35394: LD_INT 103
35396: PUSH
35397: LD_INT 104
35399: PUSH
35400: LD_INT 105
35402: PUSH
35403: LD_INT 106
35405: PUSH
35406: LD_INT 107
35408: PUSH
35409: LD_INT 108
35411: PUSH
35412: LD_INT 109
35414: PUSH
35415: LD_INT 110
35417: PUSH
35418: LD_INT 111
35420: PUSH
35421: LD_INT 112
35423: PUSH
35424: LD_INT 113
35426: PUSH
35427: LD_INT 114
35429: PUSH
35430: LD_INT 115
35432: PUSH
35433: LD_INT 116
35435: PUSH
35436: LD_INT 117
35438: PUSH
35439: LD_INT 118
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: ST_TO_ADDR
// if result then
35466: LD_VAR 0 2
35470: IFFALSE 36256
// begin normal :=  ;
35472: LD_ADDR_VAR 0 5
35476: PUSH
35477: LD_STRING 
35479: ST_TO_ADDR
// hardcore :=  ;
35480: LD_ADDR_VAR 0 6
35484: PUSH
35485: LD_STRING 
35487: ST_TO_ADDR
// active :=  ;
35488: LD_ADDR_VAR 0 7
35492: PUSH
35493: LD_STRING 
35495: ST_TO_ADDR
// for i = 1 to normalCounter do
35496: LD_ADDR_VAR 0 8
35500: PUSH
35501: DOUBLE
35502: LD_INT 1
35504: DEC
35505: ST_TO_ADDR
35506: LD_EXP 73
35510: PUSH
35511: FOR_TO
35512: IFFALSE 35613
// begin tmp := 0 ;
35514: LD_ADDR_VAR 0 3
35518: PUSH
35519: LD_STRING 0
35521: ST_TO_ADDR
// if result [ 1 ] then
35522: LD_VAR 0 2
35526: PUSH
35527: LD_INT 1
35529: ARRAY
35530: IFFALSE 35595
// if result [ 1 ] [ 1 ] = i then
35532: LD_VAR 0 2
35536: PUSH
35537: LD_INT 1
35539: ARRAY
35540: PUSH
35541: LD_INT 1
35543: ARRAY
35544: PUSH
35545: LD_VAR 0 8
35549: EQUAL
35550: IFFALSE 35595
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
35552: LD_ADDR_VAR 0 2
35556: PUSH
35557: LD_VAR 0 2
35561: PPUSH
35562: LD_INT 1
35564: PPUSH
35565: LD_VAR 0 2
35569: PUSH
35570: LD_INT 1
35572: ARRAY
35573: PPUSH
35574: LD_INT 1
35576: PPUSH
35577: CALL_OW 3
35581: PPUSH
35582: CALL_OW 1
35586: ST_TO_ADDR
// tmp := 1 ;
35587: LD_ADDR_VAR 0 3
35591: PUSH
35592: LD_STRING 1
35594: ST_TO_ADDR
// end ; normal := normal & tmp ;
35595: LD_ADDR_VAR 0 5
35599: PUSH
35600: LD_VAR 0 5
35604: PUSH
35605: LD_VAR 0 3
35609: STR
35610: ST_TO_ADDR
// end ;
35611: GO 35511
35613: POP
35614: POP
// for i = 1 to hardcoreCounter do
35615: LD_ADDR_VAR 0 8
35619: PUSH
35620: DOUBLE
35621: LD_INT 1
35623: DEC
35624: ST_TO_ADDR
35625: LD_EXP 74
35629: PUSH
35630: FOR_TO
35631: IFFALSE 35736
// begin tmp := 0 ;
35633: LD_ADDR_VAR 0 3
35637: PUSH
35638: LD_STRING 0
35640: ST_TO_ADDR
// if result [ 2 ] then
35641: LD_VAR 0 2
35645: PUSH
35646: LD_INT 2
35648: ARRAY
35649: IFFALSE 35718
// if result [ 2 ] [ 1 ] = 100 + i then
35651: LD_VAR 0 2
35655: PUSH
35656: LD_INT 2
35658: ARRAY
35659: PUSH
35660: LD_INT 1
35662: ARRAY
35663: PUSH
35664: LD_INT 100
35666: PUSH
35667: LD_VAR 0 8
35671: PLUS
35672: EQUAL
35673: IFFALSE 35718
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
35675: LD_ADDR_VAR 0 2
35679: PUSH
35680: LD_VAR 0 2
35684: PPUSH
35685: LD_INT 2
35687: PPUSH
35688: LD_VAR 0 2
35692: PUSH
35693: LD_INT 2
35695: ARRAY
35696: PPUSH
35697: LD_INT 1
35699: PPUSH
35700: CALL_OW 3
35704: PPUSH
35705: CALL_OW 1
35709: ST_TO_ADDR
// tmp := 1 ;
35710: LD_ADDR_VAR 0 3
35714: PUSH
35715: LD_STRING 1
35717: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
35718: LD_ADDR_VAR 0 6
35722: PUSH
35723: LD_VAR 0 6
35727: PUSH
35728: LD_VAR 0 3
35732: STR
35733: ST_TO_ADDR
// end ;
35734: GO 35630
35736: POP
35737: POP
// if isGameLoad then
35738: LD_VAR 0 1
35742: IFFALSE 36217
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
35744: LD_ADDR_VAR 0 4
35748: PUSH
35749: LD_EXP 77
35753: PUSH
35754: LD_EXP 76
35758: PUSH
35759: LD_EXP 78
35763: PUSH
35764: LD_EXP 75
35768: PUSH
35769: LD_EXP 79
35773: PUSH
35774: LD_EXP 80
35778: PUSH
35779: LD_EXP 81
35783: PUSH
35784: LD_EXP 82
35788: PUSH
35789: LD_EXP 83
35793: PUSH
35794: LD_EXP 84
35798: PUSH
35799: LD_EXP 85
35803: PUSH
35804: LD_EXP 86
35808: PUSH
35809: LD_EXP 87
35813: PUSH
35814: LD_EXP 88
35818: PUSH
35819: LD_EXP 96
35823: PUSH
35824: LD_EXP 97
35828: PUSH
35829: LD_EXP 98
35833: PUSH
35834: LD_EXP 99
35838: PUSH
35839: LD_EXP 101
35843: PUSH
35844: LD_EXP 102
35848: PUSH
35849: LD_EXP 103
35853: PUSH
35854: LD_EXP 106
35858: PUSH
35859: LD_EXP 108
35863: PUSH
35864: LD_EXP 109
35868: PUSH
35869: LD_EXP 110
35873: PUSH
35874: LD_EXP 112
35878: PUSH
35879: LD_EXP 113
35883: PUSH
35884: LD_EXP 116
35888: PUSH
35889: LD_EXP 117
35893: PUSH
35894: LD_EXP 118
35898: PUSH
35899: LD_EXP 119
35903: PUSH
35904: LD_EXP 120
35908: PUSH
35909: LD_EXP 121
35913: PUSH
35914: LD_EXP 122
35918: PUSH
35919: LD_EXP 123
35923: PUSH
35924: LD_EXP 124
35928: PUSH
35929: LD_EXP 89
35933: PUSH
35934: LD_EXP 90
35938: PUSH
35939: LD_EXP 93
35943: PUSH
35944: LD_EXP 94
35948: PUSH
35949: LD_EXP 95
35953: PUSH
35954: LD_EXP 91
35958: PUSH
35959: LD_EXP 92
35963: PUSH
35964: LD_EXP 100
35968: PUSH
35969: LD_EXP 104
35973: PUSH
35974: LD_EXP 105
35978: PUSH
35979: LD_EXP 107
35983: PUSH
35984: LD_EXP 111
35988: PUSH
35989: LD_EXP 114
35993: PUSH
35994: LD_EXP 115
35998: PUSH
35999: LD_EXP 125
36003: PUSH
36004: LD_EXP 126
36008: PUSH
36009: LD_EXP 127
36013: PUSH
36014: LD_EXP 128
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: ST_TO_ADDR
// tmp :=  ;
36075: LD_ADDR_VAR 0 3
36079: PUSH
36080: LD_STRING 
36082: ST_TO_ADDR
// for i = 1 to normalCounter do
36083: LD_ADDR_VAR 0 8
36087: PUSH
36088: DOUBLE
36089: LD_INT 1
36091: DEC
36092: ST_TO_ADDR
36093: LD_EXP 73
36097: PUSH
36098: FOR_TO
36099: IFFALSE 36135
// begin if flags [ i ] then
36101: LD_VAR 0 4
36105: PUSH
36106: LD_VAR 0 8
36110: ARRAY
36111: IFFALSE 36133
// tmp := tmp & i & ; ;
36113: LD_ADDR_VAR 0 3
36117: PUSH
36118: LD_VAR 0 3
36122: PUSH
36123: LD_VAR 0 8
36127: STR
36128: PUSH
36129: LD_STRING ;
36131: STR
36132: ST_TO_ADDR
// end ;
36133: GO 36098
36135: POP
36136: POP
// for i = 1 to hardcoreCounter do
36137: LD_ADDR_VAR 0 8
36141: PUSH
36142: DOUBLE
36143: LD_INT 1
36145: DEC
36146: ST_TO_ADDR
36147: LD_EXP 74
36151: PUSH
36152: FOR_TO
36153: IFFALSE 36199
// begin if flags [ normalCounter + i ] then
36155: LD_VAR 0 4
36159: PUSH
36160: LD_EXP 73
36164: PUSH
36165: LD_VAR 0 8
36169: PLUS
36170: ARRAY
36171: IFFALSE 36197
// tmp := tmp & ( 100 + i ) & ; ;
36173: LD_ADDR_VAR 0 3
36177: PUSH
36178: LD_VAR 0 3
36182: PUSH
36183: LD_INT 100
36185: PUSH
36186: LD_VAR 0 8
36190: PLUS
36191: STR
36192: PUSH
36193: LD_STRING ;
36195: STR
36196: ST_TO_ADDR
// end ;
36197: GO 36152
36199: POP
36200: POP
// if tmp then
36201: LD_VAR 0 3
36205: IFFALSE 36217
// active := tmp ;
36207: LD_ADDR_VAR 0 7
36211: PUSH
36212: LD_VAR 0 3
36216: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
36217: LD_STRING getStreamItemsFromMission("
36219: PUSH
36220: LD_VAR 0 5
36224: STR
36225: PUSH
36226: LD_STRING ","
36228: STR
36229: PUSH
36230: LD_VAR 0 6
36234: STR
36235: PUSH
36236: LD_STRING ","
36238: STR
36239: PUSH
36240: LD_VAR 0 7
36244: STR
36245: PUSH
36246: LD_STRING ")
36248: STR
36249: PPUSH
36250: CALL_OW 559
// end else
36254: GO 36263
// ToLua ( getStreamItemsFromMission("","","") ) ;
36256: LD_STRING getStreamItemsFromMission("","","")
36258: PPUSH
36259: CALL_OW 559
// end ;
36263: LD_VAR 0 2
36267: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
36268: LD_EXP 72
36272: PUSH
36273: LD_EXP 77
36277: AND
36278: IFFALSE 36402
36280: GO 36282
36282: DISABLE
36283: LD_INT 0
36285: PPUSH
36286: PPUSH
// begin enable ;
36287: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
36288: LD_ADDR_VAR 0 2
36292: PUSH
36293: LD_INT 22
36295: PUSH
36296: LD_OWVAR 2
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 2
36307: PUSH
36308: LD_INT 34
36310: PUSH
36311: LD_INT 7
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 34
36320: PUSH
36321: LD_INT 45
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 34
36330: PUSH
36331: LD_INT 28
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 34
36340: PUSH
36341: LD_INT 47
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PPUSH
36359: CALL_OW 69
36363: ST_TO_ADDR
// if not tmp then
36364: LD_VAR 0 2
36368: NOT
36369: IFFALSE 36373
// exit ;
36371: GO 36402
// for i in tmp do
36373: LD_ADDR_VAR 0 1
36377: PUSH
36378: LD_VAR 0 2
36382: PUSH
36383: FOR_IN
36384: IFFALSE 36400
// begin SetLives ( i , 0 ) ;
36386: LD_VAR 0 1
36390: PPUSH
36391: LD_INT 0
36393: PPUSH
36394: CALL_OW 234
// end ;
36398: GO 36383
36400: POP
36401: POP
// end ;
36402: PPOPN 2
36404: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
36405: LD_EXP 72
36409: PUSH
36410: LD_EXP 78
36414: AND
36415: IFFALSE 36499
36417: GO 36419
36419: DISABLE
36420: LD_INT 0
36422: PPUSH
36423: PPUSH
// begin enable ;
36424: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
36425: LD_ADDR_VAR 0 2
36429: PUSH
36430: LD_INT 22
36432: PUSH
36433: LD_OWVAR 2
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 32
36444: PUSH
36445: LD_INT 3
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PPUSH
36456: CALL_OW 69
36460: ST_TO_ADDR
// if not tmp then
36461: LD_VAR 0 2
36465: NOT
36466: IFFALSE 36470
// exit ;
36468: GO 36499
// for i in tmp do
36470: LD_ADDR_VAR 0 1
36474: PUSH
36475: LD_VAR 0 2
36479: PUSH
36480: FOR_IN
36481: IFFALSE 36497
// begin SetLives ( i , 0 ) ;
36483: LD_VAR 0 1
36487: PPUSH
36488: LD_INT 0
36490: PPUSH
36491: CALL_OW 234
// end ;
36495: GO 36480
36497: POP
36498: POP
// end ;
36499: PPOPN 2
36501: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
36502: LD_EXP 72
36506: PUSH
36507: LD_EXP 75
36511: AND
36512: IFFALSE 36605
36514: GO 36516
36516: DISABLE
36517: LD_INT 0
36519: PPUSH
// begin enable ;
36520: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
36521: LD_ADDR_VAR 0 1
36525: PUSH
36526: LD_INT 22
36528: PUSH
36529: LD_OWVAR 2
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 2
36540: PUSH
36541: LD_INT 25
36543: PUSH
36544: LD_INT 5
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 25
36553: PUSH
36554: LD_INT 9
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 25
36563: PUSH
36564: LD_INT 8
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PPUSH
36581: CALL_OW 69
36585: PUSH
36586: FOR_IN
36587: IFFALSE 36603
// begin SetClass ( i , 1 ) ;
36589: LD_VAR 0 1
36593: PPUSH
36594: LD_INT 1
36596: PPUSH
36597: CALL_OW 336
// end ;
36601: GO 36586
36603: POP
36604: POP
// end ;
36605: PPOPN 1
36607: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
36608: LD_EXP 72
36612: PUSH
36613: LD_EXP 76
36617: AND
36618: PUSH
36619: LD_OWVAR 65
36623: PUSH
36624: LD_INT 7
36626: LESS
36627: AND
36628: IFFALSE 36642
36630: GO 36632
36632: DISABLE
// begin enable ;
36633: ENABLE
// game_speed := 7 ;
36634: LD_ADDR_OWVAR 65
36638: PUSH
36639: LD_INT 7
36641: ST_TO_ADDR
// end ;
36642: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
36643: LD_EXP 72
36647: PUSH
36648: LD_EXP 79
36652: AND
36653: IFFALSE 36855
36655: GO 36657
36657: DISABLE
36658: LD_INT 0
36660: PPUSH
36661: PPUSH
36662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
36663: LD_ADDR_VAR 0 3
36667: PUSH
36668: LD_INT 81
36670: PUSH
36671: LD_OWVAR 2
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 21
36682: PUSH
36683: LD_INT 1
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PPUSH
36694: CALL_OW 69
36698: ST_TO_ADDR
// if not tmp then
36699: LD_VAR 0 3
36703: NOT
36704: IFFALSE 36708
// exit ;
36706: GO 36855
// if tmp > 5 then
36708: LD_VAR 0 3
36712: PUSH
36713: LD_INT 5
36715: GREATER
36716: IFFALSE 36728
// k := 5 else
36718: LD_ADDR_VAR 0 2
36722: PUSH
36723: LD_INT 5
36725: ST_TO_ADDR
36726: GO 36738
// k := tmp ;
36728: LD_ADDR_VAR 0 2
36732: PUSH
36733: LD_VAR 0 3
36737: ST_TO_ADDR
// for i := 1 to k do
36738: LD_ADDR_VAR 0 1
36742: PUSH
36743: DOUBLE
36744: LD_INT 1
36746: DEC
36747: ST_TO_ADDR
36748: LD_VAR 0 2
36752: PUSH
36753: FOR_TO
36754: IFFALSE 36853
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
36756: LD_VAR 0 3
36760: PUSH
36761: LD_VAR 0 1
36765: ARRAY
36766: PPUSH
36767: LD_VAR 0 1
36771: PUSH
36772: LD_INT 4
36774: MOD
36775: PUSH
36776: LD_INT 1
36778: PLUS
36779: PPUSH
36780: CALL_OW 259
36784: PUSH
36785: LD_INT 10
36787: LESS
36788: IFFALSE 36851
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
36790: LD_VAR 0 3
36794: PUSH
36795: LD_VAR 0 1
36799: ARRAY
36800: PPUSH
36801: LD_VAR 0 1
36805: PUSH
36806: LD_INT 4
36808: MOD
36809: PUSH
36810: LD_INT 1
36812: PLUS
36813: PPUSH
36814: LD_VAR 0 3
36818: PUSH
36819: LD_VAR 0 1
36823: ARRAY
36824: PPUSH
36825: LD_VAR 0 1
36829: PUSH
36830: LD_INT 4
36832: MOD
36833: PUSH
36834: LD_INT 1
36836: PLUS
36837: PPUSH
36838: CALL_OW 259
36842: PUSH
36843: LD_INT 1
36845: PLUS
36846: PPUSH
36847: CALL_OW 237
36851: GO 36753
36853: POP
36854: POP
// end ;
36855: PPOPN 3
36857: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
36858: LD_EXP 72
36862: PUSH
36863: LD_EXP 80
36867: AND
36868: IFFALSE 36888
36870: GO 36872
36872: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
36873: LD_INT 4
36875: PPUSH
36876: LD_OWVAR 2
36880: PPUSH
36881: LD_INT 0
36883: PPUSH
36884: CALL_OW 324
36888: END
// every 0 0$1 trigger StreamModeActive and sShovel do
36889: LD_EXP 72
36893: PUSH
36894: LD_EXP 109
36898: AND
36899: IFFALSE 36919
36901: GO 36903
36903: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
36904: LD_INT 19
36906: PPUSH
36907: LD_OWVAR 2
36911: PPUSH
36912: LD_INT 0
36914: PPUSH
36915: CALL_OW 324
36919: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
36920: LD_EXP 72
36924: PUSH
36925: LD_EXP 81
36929: AND
36930: IFFALSE 37032
36932: GO 36934
36934: DISABLE
36935: LD_INT 0
36937: PPUSH
36938: PPUSH
// begin enable ;
36939: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
36940: LD_ADDR_VAR 0 2
36944: PUSH
36945: LD_INT 22
36947: PUSH
36948: LD_OWVAR 2
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 2
36959: PUSH
36960: LD_INT 34
36962: PUSH
36963: LD_INT 11
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 34
36972: PUSH
36973: LD_INT 30
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: LIST
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PPUSH
36989: CALL_OW 69
36993: ST_TO_ADDR
// if not tmp then
36994: LD_VAR 0 2
36998: NOT
36999: IFFALSE 37003
// exit ;
37001: GO 37032
// for i in tmp do
37003: LD_ADDR_VAR 0 1
37007: PUSH
37008: LD_VAR 0 2
37012: PUSH
37013: FOR_IN
37014: IFFALSE 37030
// begin SetLives ( i , 0 ) ;
37016: LD_VAR 0 1
37020: PPUSH
37021: LD_INT 0
37023: PPUSH
37024: CALL_OW 234
// end ;
37028: GO 37013
37030: POP
37031: POP
// end ;
37032: PPOPN 2
37034: END
// every 0 0$1 trigger StreamModeActive and sBunker do
37035: LD_EXP 72
37039: PUSH
37040: LD_EXP 82
37044: AND
37045: IFFALSE 37065
37047: GO 37049
37049: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
37050: LD_INT 32
37052: PPUSH
37053: LD_OWVAR 2
37057: PPUSH
37058: LD_INT 0
37060: PPUSH
37061: CALL_OW 324
37065: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
37066: LD_EXP 72
37070: PUSH
37071: LD_EXP 83
37075: AND
37076: IFFALSE 37257
37078: GO 37080
37080: DISABLE
37081: LD_INT 0
37083: PPUSH
37084: PPUSH
37085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
37086: LD_ADDR_VAR 0 2
37090: PUSH
37091: LD_INT 22
37093: PUSH
37094: LD_OWVAR 2
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 33
37105: PUSH
37106: LD_INT 3
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PPUSH
37117: CALL_OW 69
37121: ST_TO_ADDR
// if not tmp then
37122: LD_VAR 0 2
37126: NOT
37127: IFFALSE 37131
// exit ;
37129: GO 37257
// side := 0 ;
37131: LD_ADDR_VAR 0 3
37135: PUSH
37136: LD_INT 0
37138: ST_TO_ADDR
// for i := 1 to 8 do
37139: LD_ADDR_VAR 0 1
37143: PUSH
37144: DOUBLE
37145: LD_INT 1
37147: DEC
37148: ST_TO_ADDR
37149: LD_INT 8
37151: PUSH
37152: FOR_TO
37153: IFFALSE 37201
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
37155: LD_OWVAR 2
37159: PUSH
37160: LD_VAR 0 1
37164: NONEQUAL
37165: PUSH
37166: LD_OWVAR 2
37170: PPUSH
37171: LD_VAR 0 1
37175: PPUSH
37176: CALL_OW 81
37180: PUSH
37181: LD_INT 2
37183: EQUAL
37184: AND
37185: IFFALSE 37199
// begin side := i ;
37187: LD_ADDR_VAR 0 3
37191: PUSH
37192: LD_VAR 0 1
37196: ST_TO_ADDR
// break ;
37197: GO 37201
// end ;
37199: GO 37152
37201: POP
37202: POP
// if not side then
37203: LD_VAR 0 3
37207: NOT
37208: IFFALSE 37212
// exit ;
37210: GO 37257
// for i := 1 to tmp do
37212: LD_ADDR_VAR 0 1
37216: PUSH
37217: DOUBLE
37218: LD_INT 1
37220: DEC
37221: ST_TO_ADDR
37222: LD_VAR 0 2
37226: PUSH
37227: FOR_TO
37228: IFFALSE 37255
// if Prob ( 60 ) then
37230: LD_INT 60
37232: PPUSH
37233: CALL_OW 13
37237: IFFALSE 37253
// SetSide ( i , side ) ;
37239: LD_VAR 0 1
37243: PPUSH
37244: LD_VAR 0 3
37248: PPUSH
37249: CALL_OW 235
37253: GO 37227
37255: POP
37256: POP
// end ;
37257: PPOPN 3
37259: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
37260: LD_EXP 72
37264: PUSH
37265: LD_EXP 85
37269: AND
37270: IFFALSE 37389
37272: GO 37274
37274: DISABLE
37275: LD_INT 0
37277: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
37278: LD_ADDR_VAR 0 1
37282: PUSH
37283: LD_INT 22
37285: PUSH
37286: LD_OWVAR 2
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 21
37297: PUSH
37298: LD_INT 1
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 3
37307: PUSH
37308: LD_INT 23
37310: PUSH
37311: LD_INT 0
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: LIST
37326: PPUSH
37327: CALL_OW 69
37331: PUSH
37332: FOR_IN
37333: IFFALSE 37387
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
37335: LD_VAR 0 1
37339: PPUSH
37340: CALL_OW 257
37344: PUSH
37345: LD_INT 1
37347: PUSH
37348: LD_INT 2
37350: PUSH
37351: LD_INT 3
37353: PUSH
37354: LD_INT 4
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: IN
37363: IFFALSE 37385
// SetClass ( un , rand ( 1 , 4 ) ) ;
37365: LD_VAR 0 1
37369: PPUSH
37370: LD_INT 1
37372: PPUSH
37373: LD_INT 4
37375: PPUSH
37376: CALL_OW 12
37380: PPUSH
37381: CALL_OW 336
37385: GO 37332
37387: POP
37388: POP
// end ;
37389: PPOPN 1
37391: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
37392: LD_EXP 72
37396: PUSH
37397: LD_EXP 84
37401: AND
37402: IFFALSE 37481
37404: GO 37406
37406: DISABLE
37407: LD_INT 0
37409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
37410: LD_ADDR_VAR 0 1
37414: PUSH
37415: LD_INT 22
37417: PUSH
37418: LD_OWVAR 2
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 21
37429: PUSH
37430: LD_INT 3
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PPUSH
37441: CALL_OW 69
37445: ST_TO_ADDR
// if not tmp then
37446: LD_VAR 0 1
37450: NOT
37451: IFFALSE 37455
// exit ;
37453: GO 37481
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
37455: LD_VAR 0 1
37459: PUSH
37460: LD_INT 1
37462: PPUSH
37463: LD_VAR 0 1
37467: PPUSH
37468: CALL_OW 12
37472: ARRAY
37473: PPUSH
37474: LD_INT 100
37476: PPUSH
37477: CALL_OW 234
// end ;
37481: PPOPN 1
37483: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
37484: LD_EXP 72
37488: PUSH
37489: LD_EXP 86
37493: AND
37494: IFFALSE 37592
37496: GO 37498
37498: DISABLE
37499: LD_INT 0
37501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
37502: LD_ADDR_VAR 0 1
37506: PUSH
37507: LD_INT 22
37509: PUSH
37510: LD_OWVAR 2
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 21
37521: PUSH
37522: LD_INT 1
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PPUSH
37533: CALL_OW 69
37537: ST_TO_ADDR
// if not tmp then
37538: LD_VAR 0 1
37542: NOT
37543: IFFALSE 37547
// exit ;
37545: GO 37592
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
37547: LD_VAR 0 1
37551: PUSH
37552: LD_INT 1
37554: PPUSH
37555: LD_VAR 0 1
37559: PPUSH
37560: CALL_OW 12
37564: ARRAY
37565: PPUSH
37566: LD_INT 1
37568: PPUSH
37569: LD_INT 4
37571: PPUSH
37572: CALL_OW 12
37576: PPUSH
37577: LD_INT 3000
37579: PPUSH
37580: LD_INT 9000
37582: PPUSH
37583: CALL_OW 12
37587: PPUSH
37588: CALL_OW 492
// end ;
37592: PPOPN 1
37594: END
// every 0 0$1 trigger StreamModeActive and sDepot do
37595: LD_EXP 72
37599: PUSH
37600: LD_EXP 87
37604: AND
37605: IFFALSE 37625
37607: GO 37609
37609: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
37610: LD_INT 1
37612: PPUSH
37613: LD_OWVAR 2
37617: PPUSH
37618: LD_INT 0
37620: PPUSH
37621: CALL_OW 324
37625: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
37626: LD_EXP 72
37630: PUSH
37631: LD_EXP 88
37635: AND
37636: IFFALSE 37719
37638: GO 37640
37640: DISABLE
37641: LD_INT 0
37643: PPUSH
37644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
37645: LD_ADDR_VAR 0 2
37649: PUSH
37650: LD_INT 22
37652: PUSH
37653: LD_OWVAR 2
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 21
37664: PUSH
37665: LD_INT 3
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PPUSH
37676: CALL_OW 69
37680: ST_TO_ADDR
// if not tmp then
37681: LD_VAR 0 2
37685: NOT
37686: IFFALSE 37690
// exit ;
37688: GO 37719
// for i in tmp do
37690: LD_ADDR_VAR 0 1
37694: PUSH
37695: LD_VAR 0 2
37699: PUSH
37700: FOR_IN
37701: IFFALSE 37717
// SetBLevel ( i , 10 ) ;
37703: LD_VAR 0 1
37707: PPUSH
37708: LD_INT 10
37710: PPUSH
37711: CALL_OW 241
37715: GO 37700
37717: POP
37718: POP
// end ;
37719: PPOPN 2
37721: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
37722: LD_EXP 72
37726: PUSH
37727: LD_EXP 89
37731: AND
37732: IFFALSE 37843
37734: GO 37736
37736: DISABLE
37737: LD_INT 0
37739: PPUSH
37740: PPUSH
37741: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37742: LD_ADDR_VAR 0 3
37746: PUSH
37747: LD_INT 22
37749: PUSH
37750: LD_OWVAR 2
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 25
37761: PUSH
37762: LD_INT 1
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PPUSH
37773: CALL_OW 69
37777: ST_TO_ADDR
// if not tmp then
37778: LD_VAR 0 3
37782: NOT
37783: IFFALSE 37787
// exit ;
37785: GO 37843
// un := tmp [ rand ( 1 , tmp ) ] ;
37787: LD_ADDR_VAR 0 2
37791: PUSH
37792: LD_VAR 0 3
37796: PUSH
37797: LD_INT 1
37799: PPUSH
37800: LD_VAR 0 3
37804: PPUSH
37805: CALL_OW 12
37809: ARRAY
37810: ST_TO_ADDR
// if Crawls ( un ) then
37811: LD_VAR 0 2
37815: PPUSH
37816: CALL_OW 318
37820: IFFALSE 37831
// ComWalk ( un ) ;
37822: LD_VAR 0 2
37826: PPUSH
37827: CALL_OW 138
// SetClass ( un , class_sniper ) ;
37831: LD_VAR 0 2
37835: PPUSH
37836: LD_INT 5
37838: PPUSH
37839: CALL_OW 336
// end ;
37843: PPOPN 3
37845: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
37846: LD_EXP 72
37850: PUSH
37851: LD_EXP 90
37855: AND
37856: PUSH
37857: LD_OWVAR 67
37861: PUSH
37862: LD_INT 4
37864: LESS
37865: AND
37866: IFFALSE 37885
37868: GO 37870
37870: DISABLE
// begin Difficulty := Difficulty + 1 ;
37871: LD_ADDR_OWVAR 67
37875: PUSH
37876: LD_OWVAR 67
37880: PUSH
37881: LD_INT 1
37883: PLUS
37884: ST_TO_ADDR
// end ;
37885: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
37886: LD_EXP 72
37890: PUSH
37891: LD_EXP 91
37895: AND
37896: IFFALSE 37999
37898: GO 37900
37900: DISABLE
37901: LD_INT 0
37903: PPUSH
// begin for i := 1 to 5 do
37904: LD_ADDR_VAR 0 1
37908: PUSH
37909: DOUBLE
37910: LD_INT 1
37912: DEC
37913: ST_TO_ADDR
37914: LD_INT 5
37916: PUSH
37917: FOR_TO
37918: IFFALSE 37997
// begin uc_nation := nation_nature ;
37920: LD_ADDR_OWVAR 21
37924: PUSH
37925: LD_INT 0
37927: ST_TO_ADDR
// uc_side := 0 ;
37928: LD_ADDR_OWVAR 20
37932: PUSH
37933: LD_INT 0
37935: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37936: LD_ADDR_OWVAR 29
37940: PUSH
37941: LD_INT 12
37943: PUSH
37944: LD_INT 12
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: ST_TO_ADDR
// hc_agressivity := 20 ;
37951: LD_ADDR_OWVAR 35
37955: PUSH
37956: LD_INT 20
37958: ST_TO_ADDR
// hc_class := class_tiger ;
37959: LD_ADDR_OWVAR 28
37963: PUSH
37964: LD_INT 14
37966: ST_TO_ADDR
// hc_gallery :=  ;
37967: LD_ADDR_OWVAR 33
37971: PUSH
37972: LD_STRING 
37974: ST_TO_ADDR
// hc_name :=  ;
37975: LD_ADDR_OWVAR 26
37979: PUSH
37980: LD_STRING 
37982: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
37983: CALL_OW 44
37987: PPUSH
37988: LD_INT 0
37990: PPUSH
37991: CALL_OW 51
// end ;
37995: GO 37917
37997: POP
37998: POP
// end ;
37999: PPOPN 1
38001: END
// every 0 0$1 trigger StreamModeActive and sBomb do
38002: LD_EXP 72
38006: PUSH
38007: LD_EXP 92
38011: AND
38012: IFFALSE 38021
38014: GO 38016
38016: DISABLE
// StreamSibBomb ;
38017: CALL 38022 0 0
38021: END
// export function StreamSibBomb ; var i , x , y ; begin
38022: LD_INT 0
38024: PPUSH
38025: PPUSH
38026: PPUSH
38027: PPUSH
// result := false ;
38028: LD_ADDR_VAR 0 1
38032: PUSH
38033: LD_INT 0
38035: ST_TO_ADDR
// for i := 1 to 16 do
38036: LD_ADDR_VAR 0 2
38040: PUSH
38041: DOUBLE
38042: LD_INT 1
38044: DEC
38045: ST_TO_ADDR
38046: LD_INT 16
38048: PUSH
38049: FOR_TO
38050: IFFALSE 38249
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
38052: LD_ADDR_VAR 0 3
38056: PUSH
38057: LD_INT 10
38059: PUSH
38060: LD_INT 20
38062: PUSH
38063: LD_INT 30
38065: PUSH
38066: LD_INT 40
38068: PUSH
38069: LD_INT 50
38071: PUSH
38072: LD_INT 60
38074: PUSH
38075: LD_INT 70
38077: PUSH
38078: LD_INT 80
38080: PUSH
38081: LD_INT 90
38083: PUSH
38084: LD_INT 100
38086: PUSH
38087: LD_INT 110
38089: PUSH
38090: LD_INT 120
38092: PUSH
38093: LD_INT 130
38095: PUSH
38096: LD_INT 140
38098: PUSH
38099: LD_INT 150
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 1
38121: PPUSH
38122: LD_INT 15
38124: PPUSH
38125: CALL_OW 12
38129: ARRAY
38130: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
38131: LD_ADDR_VAR 0 4
38135: PUSH
38136: LD_INT 10
38138: PUSH
38139: LD_INT 20
38141: PUSH
38142: LD_INT 30
38144: PUSH
38145: LD_INT 40
38147: PUSH
38148: LD_INT 50
38150: PUSH
38151: LD_INT 60
38153: PUSH
38154: LD_INT 70
38156: PUSH
38157: LD_INT 80
38159: PUSH
38160: LD_INT 90
38162: PUSH
38163: LD_INT 100
38165: PUSH
38166: LD_INT 110
38168: PUSH
38169: LD_INT 120
38171: PUSH
38172: LD_INT 130
38174: PUSH
38175: LD_INT 140
38177: PUSH
38178: LD_INT 150
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 1
38200: PPUSH
38201: LD_INT 15
38203: PPUSH
38204: CALL_OW 12
38208: ARRAY
38209: ST_TO_ADDR
// if ValidHex ( x , y ) then
38210: LD_VAR 0 3
38214: PPUSH
38215: LD_VAR 0 4
38219: PPUSH
38220: CALL_OW 488
38224: IFFALSE 38247
// begin result := [ x , y ] ;
38226: LD_ADDR_VAR 0 1
38230: PUSH
38231: LD_VAR 0 3
38235: PUSH
38236: LD_VAR 0 4
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: ST_TO_ADDR
// break ;
38245: GO 38249
// end ; end ;
38247: GO 38049
38249: POP
38250: POP
// if result then
38251: LD_VAR 0 1
38255: IFFALSE 38315
// begin ToLua ( playSibBomb() ) ;
38257: LD_STRING playSibBomb()
38259: PPUSH
38260: CALL_OW 559
// wait ( 0 0$14 ) ;
38264: LD_INT 490
38266: PPUSH
38267: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
38271: LD_VAR 0 1
38275: PUSH
38276: LD_INT 1
38278: ARRAY
38279: PPUSH
38280: LD_VAR 0 1
38284: PUSH
38285: LD_INT 2
38287: ARRAY
38288: PPUSH
38289: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
38293: LD_VAR 0 1
38297: PUSH
38298: LD_INT 1
38300: ARRAY
38301: PPUSH
38302: LD_VAR 0 1
38306: PUSH
38307: LD_INT 2
38309: ARRAY
38310: PPUSH
38311: CALL_OW 429
// end ; end ;
38315: LD_VAR 0 1
38319: RET
// every 0 0$1 trigger StreamModeActive and sReset do
38320: LD_EXP 72
38324: PUSH
38325: LD_EXP 94
38329: AND
38330: IFFALSE 38342
38332: GO 38334
38334: DISABLE
// YouLost (  ) ;
38335: LD_STRING 
38337: PPUSH
38338: CALL_OW 104
38342: END
// every 0 0$1 trigger StreamModeActive and sFog do
38343: LD_EXP 72
38347: PUSH
38348: LD_EXP 93
38352: AND
38353: IFFALSE 38367
38355: GO 38357
38357: DISABLE
// FogOff ( your_side ) ;
38358: LD_OWVAR 2
38362: PPUSH
38363: CALL_OW 344
38367: END
// every 0 0$1 trigger StreamModeActive and sSun do
38368: LD_EXP 72
38372: PUSH
38373: LD_EXP 95
38377: AND
38378: IFFALSE 38406
38380: GO 38382
38382: DISABLE
// begin solar_recharge_percent := 0 ;
38383: LD_ADDR_OWVAR 79
38387: PUSH
38388: LD_INT 0
38390: ST_TO_ADDR
// wait ( 5 5$00 ) ;
38391: LD_INT 10500
38393: PPUSH
38394: CALL_OW 67
// solar_recharge_percent := 100 ;
38398: LD_ADDR_OWVAR 79
38402: PUSH
38403: LD_INT 100
38405: ST_TO_ADDR
// end ;
38406: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
38407: LD_EXP 72
38411: PUSH
38412: LD_EXP 96
38416: AND
38417: IFFALSE 38656
38419: GO 38421
38421: DISABLE
38422: LD_INT 0
38424: PPUSH
38425: PPUSH
38426: PPUSH
// begin tmp := [ ] ;
38427: LD_ADDR_VAR 0 3
38431: PUSH
38432: EMPTY
38433: ST_TO_ADDR
// for i := 1 to 6 do
38434: LD_ADDR_VAR 0 1
38438: PUSH
38439: DOUBLE
38440: LD_INT 1
38442: DEC
38443: ST_TO_ADDR
38444: LD_INT 6
38446: PUSH
38447: FOR_TO
38448: IFFALSE 38553
// begin uc_nation := nation_nature ;
38450: LD_ADDR_OWVAR 21
38454: PUSH
38455: LD_INT 0
38457: ST_TO_ADDR
// uc_side := 0 ;
38458: LD_ADDR_OWVAR 20
38462: PUSH
38463: LD_INT 0
38465: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
38466: LD_ADDR_OWVAR 29
38470: PUSH
38471: LD_INT 12
38473: PUSH
38474: LD_INT 12
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: ST_TO_ADDR
// hc_agressivity := 20 ;
38481: LD_ADDR_OWVAR 35
38485: PUSH
38486: LD_INT 20
38488: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
38489: LD_ADDR_OWVAR 28
38493: PUSH
38494: LD_INT 17
38496: ST_TO_ADDR
// hc_gallery :=  ;
38497: LD_ADDR_OWVAR 33
38501: PUSH
38502: LD_STRING 
38504: ST_TO_ADDR
// hc_name :=  ;
38505: LD_ADDR_OWVAR 26
38509: PUSH
38510: LD_STRING 
38512: ST_TO_ADDR
// un := CreateHuman ;
38513: LD_ADDR_VAR 0 2
38517: PUSH
38518: CALL_OW 44
38522: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
38523: LD_VAR 0 2
38527: PPUSH
38528: LD_INT 1
38530: PPUSH
38531: CALL_OW 51
// tmp := tmp ^ un ;
38535: LD_ADDR_VAR 0 3
38539: PUSH
38540: LD_VAR 0 3
38544: PUSH
38545: LD_VAR 0 2
38549: ADD
38550: ST_TO_ADDR
// end ;
38551: GO 38447
38553: POP
38554: POP
// repeat wait ( 0 0$1 ) ;
38555: LD_INT 35
38557: PPUSH
38558: CALL_OW 67
// for un in tmp do
38562: LD_ADDR_VAR 0 2
38566: PUSH
38567: LD_VAR 0 3
38571: PUSH
38572: FOR_IN
38573: IFFALSE 38647
// begin if IsDead ( un ) then
38575: LD_VAR 0 2
38579: PPUSH
38580: CALL_OW 301
38584: IFFALSE 38604
// begin tmp := tmp diff un ;
38586: LD_ADDR_VAR 0 3
38590: PUSH
38591: LD_VAR 0 3
38595: PUSH
38596: LD_VAR 0 2
38600: DIFF
38601: ST_TO_ADDR
// continue ;
38602: GO 38572
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
38604: LD_VAR 0 2
38608: PPUSH
38609: LD_INT 3
38611: PUSH
38612: LD_INT 22
38614: PUSH
38615: LD_INT 0
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PPUSH
38626: CALL_OW 69
38630: PPUSH
38631: LD_VAR 0 2
38635: PPUSH
38636: CALL_OW 74
38640: PPUSH
38641: CALL_OW 115
// end ;
38645: GO 38572
38647: POP
38648: POP
// until not tmp ;
38649: LD_VAR 0 3
38653: NOT
38654: IFFALSE 38555
// end ;
38656: PPOPN 3
38658: END
// every 0 0$1 trigger StreamModeActive and sTroll do
38659: LD_EXP 72
38663: PUSH
38664: LD_EXP 97
38668: AND
38669: IFFALSE 38723
38671: GO 38673
38673: DISABLE
// begin ToLua ( displayTroll(); ) ;
38674: LD_STRING displayTroll();
38676: PPUSH
38677: CALL_OW 559
// wait ( 3 3$00 ) ;
38681: LD_INT 6300
38683: PPUSH
38684: CALL_OW 67
// ToLua ( hideTroll(); ) ;
38688: LD_STRING hideTroll();
38690: PPUSH
38691: CALL_OW 559
// wait ( 1 1$00 ) ;
38695: LD_INT 2100
38697: PPUSH
38698: CALL_OW 67
// ToLua ( displayTroll(); ) ;
38702: LD_STRING displayTroll();
38704: PPUSH
38705: CALL_OW 559
// wait ( 1 1$00 ) ;
38709: LD_INT 2100
38711: PPUSH
38712: CALL_OW 67
// ToLua ( hideTroll(); ) ;
38716: LD_STRING hideTroll();
38718: PPUSH
38719: CALL_OW 559
// end ;
38723: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
38724: LD_EXP 72
38728: PUSH
38729: LD_EXP 98
38733: AND
38734: IFFALSE 38797
38736: GO 38738
38738: DISABLE
38739: LD_INT 0
38741: PPUSH
// begin p := 0 ;
38742: LD_ADDR_VAR 0 1
38746: PUSH
38747: LD_INT 0
38749: ST_TO_ADDR
// repeat game_speed := 1 ;
38750: LD_ADDR_OWVAR 65
38754: PUSH
38755: LD_INT 1
38757: ST_TO_ADDR
// wait ( 0 0$1 ) ;
38758: LD_INT 35
38760: PPUSH
38761: CALL_OW 67
// p := p + 1 ;
38765: LD_ADDR_VAR 0 1
38769: PUSH
38770: LD_VAR 0 1
38774: PUSH
38775: LD_INT 1
38777: PLUS
38778: ST_TO_ADDR
// until p >= 60 ;
38779: LD_VAR 0 1
38783: PUSH
38784: LD_INT 60
38786: GREATEREQUAL
38787: IFFALSE 38750
// game_speed := 4 ;
38789: LD_ADDR_OWVAR 65
38793: PUSH
38794: LD_INT 4
38796: ST_TO_ADDR
// end ;
38797: PPOPN 1
38799: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
38800: LD_EXP 72
38804: PUSH
38805: LD_EXP 99
38809: AND
38810: IFFALSE 38956
38812: GO 38814
38814: DISABLE
38815: LD_INT 0
38817: PPUSH
38818: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38819: LD_ADDR_VAR 0 1
38823: PUSH
38824: LD_INT 22
38826: PUSH
38827: LD_OWVAR 2
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 2
38838: PUSH
38839: LD_INT 30
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 30
38851: PUSH
38852: LD_INT 1
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: LIST
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PPUSH
38868: CALL_OW 69
38872: ST_TO_ADDR
// if not depot then
38873: LD_VAR 0 1
38877: NOT
38878: IFFALSE 38882
// exit ;
38880: GO 38956
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
38882: LD_ADDR_VAR 0 2
38886: PUSH
38887: LD_VAR 0 1
38891: PUSH
38892: LD_INT 1
38894: PPUSH
38895: LD_VAR 0 1
38899: PPUSH
38900: CALL_OW 12
38904: ARRAY
38905: PPUSH
38906: CALL_OW 274
38910: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
38911: LD_VAR 0 2
38915: PPUSH
38916: LD_INT 1
38918: PPUSH
38919: LD_INT 0
38921: PPUSH
38922: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
38926: LD_VAR 0 2
38930: PPUSH
38931: LD_INT 2
38933: PPUSH
38934: LD_INT 0
38936: PPUSH
38937: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
38941: LD_VAR 0 2
38945: PPUSH
38946: LD_INT 3
38948: PPUSH
38949: LD_INT 0
38951: PPUSH
38952: CALL_OW 277
// end ;
38956: PPOPN 2
38958: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
38959: LD_EXP 72
38963: PUSH
38964: LD_EXP 100
38968: AND
38969: IFFALSE 39066
38971: GO 38973
38973: DISABLE
38974: LD_INT 0
38976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38977: LD_ADDR_VAR 0 1
38981: PUSH
38982: LD_INT 22
38984: PUSH
38985: LD_OWVAR 2
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 21
38996: PUSH
38997: LD_INT 1
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 3
39006: PUSH
39007: LD_INT 23
39009: PUSH
39010: LD_INT 0
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: LIST
39025: PPUSH
39026: CALL_OW 69
39030: ST_TO_ADDR
// if not tmp then
39031: LD_VAR 0 1
39035: NOT
39036: IFFALSE 39040
// exit ;
39038: GO 39066
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
39040: LD_VAR 0 1
39044: PUSH
39045: LD_INT 1
39047: PPUSH
39048: LD_VAR 0 1
39052: PPUSH
39053: CALL_OW 12
39057: ARRAY
39058: PPUSH
39059: LD_INT 200
39061: PPUSH
39062: CALL_OW 234
// end ;
39066: PPOPN 1
39068: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
39069: LD_EXP 72
39073: PUSH
39074: LD_EXP 101
39078: AND
39079: IFFALSE 39158
39081: GO 39083
39083: DISABLE
39084: LD_INT 0
39086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
39087: LD_ADDR_VAR 0 1
39091: PUSH
39092: LD_INT 22
39094: PUSH
39095: LD_OWVAR 2
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 21
39106: PUSH
39107: LD_INT 2
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PPUSH
39118: CALL_OW 69
39122: ST_TO_ADDR
// if not tmp then
39123: LD_VAR 0 1
39127: NOT
39128: IFFALSE 39132
// exit ;
39130: GO 39158
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
39132: LD_VAR 0 1
39136: PUSH
39137: LD_INT 1
39139: PPUSH
39140: LD_VAR 0 1
39144: PPUSH
39145: CALL_OW 12
39149: ARRAY
39150: PPUSH
39151: LD_INT 60
39153: PPUSH
39154: CALL_OW 234
// end ;
39158: PPOPN 1
39160: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
39161: LD_EXP 72
39165: PUSH
39166: LD_EXP 102
39170: AND
39171: IFFALSE 39270
39173: GO 39175
39175: DISABLE
39176: LD_INT 0
39178: PPUSH
39179: PPUSH
// begin enable ;
39180: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
39181: LD_ADDR_VAR 0 1
39185: PUSH
39186: LD_INT 22
39188: PUSH
39189: LD_OWVAR 2
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 61
39200: PUSH
39201: EMPTY
39202: LIST
39203: PUSH
39204: LD_INT 33
39206: PUSH
39207: LD_INT 2
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: LIST
39218: PPUSH
39219: CALL_OW 69
39223: ST_TO_ADDR
// if not tmp then
39224: LD_VAR 0 1
39228: NOT
39229: IFFALSE 39233
// exit ;
39231: GO 39270
// for i in tmp do
39233: LD_ADDR_VAR 0 2
39237: PUSH
39238: LD_VAR 0 1
39242: PUSH
39243: FOR_IN
39244: IFFALSE 39268
// if IsControledBy ( i ) then
39246: LD_VAR 0 2
39250: PPUSH
39251: CALL_OW 312
39255: IFFALSE 39266
// ComUnlink ( i ) ;
39257: LD_VAR 0 2
39261: PPUSH
39262: CALL_OW 136
39266: GO 39243
39268: POP
39269: POP
// end ;
39270: PPOPN 2
39272: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
39273: LD_EXP 72
39277: PUSH
39278: LD_EXP 103
39282: AND
39283: IFFALSE 39423
39285: GO 39287
39287: DISABLE
39288: LD_INT 0
39290: PPUSH
39291: PPUSH
// begin ToLua ( displayPowell(); ) ;
39292: LD_STRING displayPowell();
39294: PPUSH
39295: CALL_OW 559
// uc_side := 0 ;
39299: LD_ADDR_OWVAR 20
39303: PUSH
39304: LD_INT 0
39306: ST_TO_ADDR
// uc_nation := 2 ;
39307: LD_ADDR_OWVAR 21
39311: PUSH
39312: LD_INT 2
39314: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
39315: LD_ADDR_OWVAR 37
39319: PUSH
39320: LD_INT 14
39322: ST_TO_ADDR
// vc_engine := engine_siberite ;
39323: LD_ADDR_OWVAR 39
39327: PUSH
39328: LD_INT 3
39330: ST_TO_ADDR
// vc_control := control_apeman ;
39331: LD_ADDR_OWVAR 38
39335: PUSH
39336: LD_INT 5
39338: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
39339: LD_ADDR_OWVAR 40
39343: PUSH
39344: LD_INT 29
39346: ST_TO_ADDR
// un := CreateVehicle ;
39347: LD_ADDR_VAR 0 2
39351: PUSH
39352: CALL_OW 45
39356: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
39357: LD_VAR 0 2
39361: PPUSH
39362: LD_INT 1
39364: PPUSH
39365: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
39369: LD_INT 35
39371: PPUSH
39372: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
39376: LD_VAR 0 2
39380: PPUSH
39381: LD_INT 22
39383: PUSH
39384: LD_OWVAR 2
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PPUSH
39393: CALL_OW 69
39397: PPUSH
39398: LD_VAR 0 2
39402: PPUSH
39403: CALL_OW 74
39407: PPUSH
39408: CALL_OW 115
// until IsDead ( un ) ;
39412: LD_VAR 0 2
39416: PPUSH
39417: CALL_OW 301
39421: IFFALSE 39369
// end ;
39423: PPOPN 2
39425: END
// every 0 0$1 trigger StreamModeActive and sStu do
39426: LD_EXP 72
39430: PUSH
39431: LD_EXP 111
39435: AND
39436: IFFALSE 39452
39438: GO 39440
39440: DISABLE
// begin ToLua ( displayStucuk(); ) ;
39441: LD_STRING displayStucuk();
39443: PPUSH
39444: CALL_OW 559
// ResetFog ;
39448: CALL_OW 335
// end ;
39452: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
39453: LD_EXP 72
39457: PUSH
39458: LD_EXP 104
39462: AND
39463: IFFALSE 39604
39465: GO 39467
39467: DISABLE
39468: LD_INT 0
39470: PPUSH
39471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
39472: LD_ADDR_VAR 0 2
39476: PUSH
39477: LD_INT 22
39479: PUSH
39480: LD_OWVAR 2
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 21
39491: PUSH
39492: LD_INT 1
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PPUSH
39503: CALL_OW 69
39507: ST_TO_ADDR
// if not tmp then
39508: LD_VAR 0 2
39512: NOT
39513: IFFALSE 39517
// exit ;
39515: GO 39604
// un := tmp [ rand ( 1 , tmp ) ] ;
39517: LD_ADDR_VAR 0 1
39521: PUSH
39522: LD_VAR 0 2
39526: PUSH
39527: LD_INT 1
39529: PPUSH
39530: LD_VAR 0 2
39534: PPUSH
39535: CALL_OW 12
39539: ARRAY
39540: ST_TO_ADDR
// SetSide ( un , 0 ) ;
39541: LD_VAR 0 1
39545: PPUSH
39546: LD_INT 0
39548: PPUSH
39549: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
39553: LD_VAR 0 1
39557: PPUSH
39558: LD_OWVAR 3
39562: PUSH
39563: LD_VAR 0 1
39567: DIFF
39568: PPUSH
39569: LD_VAR 0 1
39573: PPUSH
39574: CALL_OW 74
39578: PPUSH
39579: CALL_OW 115
// wait ( 0 0$20 ) ;
39583: LD_INT 700
39585: PPUSH
39586: CALL_OW 67
// SetSide ( un , your_side ) ;
39590: LD_VAR 0 1
39594: PPUSH
39595: LD_OWVAR 2
39599: PPUSH
39600: CALL_OW 235
// end ;
39604: PPOPN 2
39606: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
39607: LD_EXP 72
39611: PUSH
39612: LD_EXP 105
39616: AND
39617: IFFALSE 39723
39619: GO 39621
39621: DISABLE
39622: LD_INT 0
39624: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39625: LD_ADDR_VAR 0 1
39629: PUSH
39630: LD_INT 22
39632: PUSH
39633: LD_OWVAR 2
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 2
39644: PUSH
39645: LD_INT 30
39647: PUSH
39648: LD_INT 0
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 30
39657: PUSH
39658: LD_INT 1
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: LIST
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PPUSH
39674: CALL_OW 69
39678: ST_TO_ADDR
// if not depot then
39679: LD_VAR 0 1
39683: NOT
39684: IFFALSE 39688
// exit ;
39686: GO 39723
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
39688: LD_VAR 0 1
39692: PUSH
39693: LD_INT 1
39695: ARRAY
39696: PPUSH
39697: CALL_OW 250
39701: PPUSH
39702: LD_VAR 0 1
39706: PUSH
39707: LD_INT 1
39709: ARRAY
39710: PPUSH
39711: CALL_OW 251
39715: PPUSH
39716: LD_INT 70
39718: PPUSH
39719: CALL_OW 495
// end ;
39723: PPOPN 1
39725: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
39726: LD_EXP 72
39730: PUSH
39731: LD_EXP 106
39735: AND
39736: IFFALSE 39947
39738: GO 39740
39740: DISABLE
39741: LD_INT 0
39743: PPUSH
39744: PPUSH
39745: PPUSH
39746: PPUSH
39747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
39748: LD_ADDR_VAR 0 5
39752: PUSH
39753: LD_INT 22
39755: PUSH
39756: LD_OWVAR 2
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 21
39767: PUSH
39768: LD_INT 1
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PPUSH
39779: CALL_OW 69
39783: ST_TO_ADDR
// if not tmp then
39784: LD_VAR 0 5
39788: NOT
39789: IFFALSE 39793
// exit ;
39791: GO 39947
// for i in tmp do
39793: LD_ADDR_VAR 0 1
39797: PUSH
39798: LD_VAR 0 5
39802: PUSH
39803: FOR_IN
39804: IFFALSE 39945
// begin d := rand ( 0 , 5 ) ;
39806: LD_ADDR_VAR 0 4
39810: PUSH
39811: LD_INT 0
39813: PPUSH
39814: LD_INT 5
39816: PPUSH
39817: CALL_OW 12
39821: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
39822: LD_ADDR_VAR 0 2
39826: PUSH
39827: LD_VAR 0 1
39831: PPUSH
39832: CALL_OW 250
39836: PPUSH
39837: LD_VAR 0 4
39841: PPUSH
39842: LD_INT 3
39844: PPUSH
39845: LD_INT 12
39847: PPUSH
39848: CALL_OW 12
39852: PPUSH
39853: CALL_OW 272
39857: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
39858: LD_ADDR_VAR 0 3
39862: PUSH
39863: LD_VAR 0 1
39867: PPUSH
39868: CALL_OW 251
39872: PPUSH
39873: LD_VAR 0 4
39877: PPUSH
39878: LD_INT 3
39880: PPUSH
39881: LD_INT 12
39883: PPUSH
39884: CALL_OW 12
39888: PPUSH
39889: CALL_OW 273
39893: ST_TO_ADDR
// if ValidHex ( x , y ) then
39894: LD_VAR 0 2
39898: PPUSH
39899: LD_VAR 0 3
39903: PPUSH
39904: CALL_OW 488
39908: IFFALSE 39943
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
39910: LD_VAR 0 1
39914: PPUSH
39915: LD_VAR 0 2
39919: PPUSH
39920: LD_VAR 0 3
39924: PPUSH
39925: LD_INT 3
39927: PPUSH
39928: LD_INT 6
39930: PPUSH
39931: CALL_OW 12
39935: PPUSH
39936: LD_INT 1
39938: PPUSH
39939: CALL_OW 483
// end ;
39943: GO 39803
39945: POP
39946: POP
// end ;
39947: PPOPN 5
39949: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
39950: LD_EXP 72
39954: PUSH
39955: LD_EXP 107
39959: AND
39960: IFFALSE 40054
39962: GO 39964
39964: DISABLE
39965: LD_INT 0
39967: PPUSH
39968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
39969: LD_ADDR_VAR 0 2
39973: PUSH
39974: LD_INT 22
39976: PUSH
39977: LD_OWVAR 2
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 32
39988: PUSH
39989: LD_INT 1
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 21
39998: PUSH
39999: LD_INT 2
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: LIST
40010: PPUSH
40011: CALL_OW 69
40015: ST_TO_ADDR
// if not tmp then
40016: LD_VAR 0 2
40020: NOT
40021: IFFALSE 40025
// exit ;
40023: GO 40054
// for i in tmp do
40025: LD_ADDR_VAR 0 1
40029: PUSH
40030: LD_VAR 0 2
40034: PUSH
40035: FOR_IN
40036: IFFALSE 40052
// SetFuel ( i , 0 ) ;
40038: LD_VAR 0 1
40042: PPUSH
40043: LD_INT 0
40045: PPUSH
40046: CALL_OW 240
40050: GO 40035
40052: POP
40053: POP
// end ;
40054: PPOPN 2
40056: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
40057: LD_EXP 72
40061: PUSH
40062: LD_EXP 108
40066: AND
40067: IFFALSE 40133
40069: GO 40071
40071: DISABLE
40072: LD_INT 0
40074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
40075: LD_ADDR_VAR 0 1
40079: PUSH
40080: LD_INT 22
40082: PUSH
40083: LD_OWVAR 2
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 30
40094: PUSH
40095: LD_INT 29
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PPUSH
40106: CALL_OW 69
40110: ST_TO_ADDR
// if not tmp then
40111: LD_VAR 0 1
40115: NOT
40116: IFFALSE 40120
// exit ;
40118: GO 40133
// DestroyUnit ( tmp [ 1 ] ) ;
40120: LD_VAR 0 1
40124: PUSH
40125: LD_INT 1
40127: ARRAY
40128: PPUSH
40129: CALL_OW 65
// end ;
40133: PPOPN 1
40135: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
40136: LD_EXP 72
40140: PUSH
40141: LD_EXP 110
40145: AND
40146: IFFALSE 40275
40148: GO 40150
40150: DISABLE
40151: LD_INT 0
40153: PPUSH
// begin uc_side := 0 ;
40154: LD_ADDR_OWVAR 20
40158: PUSH
40159: LD_INT 0
40161: ST_TO_ADDR
// uc_nation := nation_arabian ;
40162: LD_ADDR_OWVAR 21
40166: PUSH
40167: LD_INT 2
40169: ST_TO_ADDR
// hc_gallery :=  ;
40170: LD_ADDR_OWVAR 33
40174: PUSH
40175: LD_STRING 
40177: ST_TO_ADDR
// hc_name :=  ;
40178: LD_ADDR_OWVAR 26
40182: PUSH
40183: LD_STRING 
40185: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
40186: LD_INT 1
40188: PPUSH
40189: LD_INT 11
40191: PPUSH
40192: LD_INT 10
40194: PPUSH
40195: CALL_OW 380
// un := CreateHuman ;
40199: LD_ADDR_VAR 0 1
40203: PUSH
40204: CALL_OW 44
40208: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
40209: LD_VAR 0 1
40213: PPUSH
40214: LD_INT 1
40216: PPUSH
40217: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
40221: LD_INT 35
40223: PPUSH
40224: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
40228: LD_VAR 0 1
40232: PPUSH
40233: LD_INT 22
40235: PUSH
40236: LD_OWVAR 2
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PPUSH
40245: CALL_OW 69
40249: PPUSH
40250: LD_VAR 0 1
40254: PPUSH
40255: CALL_OW 74
40259: PPUSH
40260: CALL_OW 115
// until IsDead ( un ) ;
40264: LD_VAR 0 1
40268: PPUSH
40269: CALL_OW 301
40273: IFFALSE 40221
// end ;
40275: PPOPN 1
40277: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
40278: LD_EXP 72
40282: PUSH
40283: LD_EXP 112
40287: AND
40288: IFFALSE 40300
40290: GO 40292
40292: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
40293: LD_STRING earthquake(getX(game), 0, 32)
40295: PPUSH
40296: CALL_OW 559
40300: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
40301: LD_EXP 72
40305: PUSH
40306: LD_EXP 113
40310: AND
40311: IFFALSE 40402
40313: GO 40315
40315: DISABLE
40316: LD_INT 0
40318: PPUSH
// begin enable ;
40319: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
40320: LD_ADDR_VAR 0 1
40324: PUSH
40325: LD_INT 22
40327: PUSH
40328: LD_OWVAR 2
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 21
40339: PUSH
40340: LD_INT 2
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 33
40349: PUSH
40350: LD_INT 3
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: LIST
40361: PPUSH
40362: CALL_OW 69
40366: ST_TO_ADDR
// if not tmp then
40367: LD_VAR 0 1
40371: NOT
40372: IFFALSE 40376
// exit ;
40374: GO 40402
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
40376: LD_VAR 0 1
40380: PUSH
40381: LD_INT 1
40383: PPUSH
40384: LD_VAR 0 1
40388: PPUSH
40389: CALL_OW 12
40393: ARRAY
40394: PPUSH
40395: LD_INT 1
40397: PPUSH
40398: CALL_OW 234
// end ;
40402: PPOPN 1
40404: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
40405: LD_EXP 72
40409: PUSH
40410: LD_EXP 114
40414: AND
40415: IFFALSE 40556
40417: GO 40419
40419: DISABLE
40420: LD_INT 0
40422: PPUSH
40423: PPUSH
40424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40425: LD_ADDR_VAR 0 3
40429: PUSH
40430: LD_INT 22
40432: PUSH
40433: LD_OWVAR 2
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 25
40444: PUSH
40445: LD_INT 1
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PPUSH
40456: CALL_OW 69
40460: ST_TO_ADDR
// if not tmp then
40461: LD_VAR 0 3
40465: NOT
40466: IFFALSE 40470
// exit ;
40468: GO 40556
// un := tmp [ rand ( 1 , tmp ) ] ;
40470: LD_ADDR_VAR 0 2
40474: PUSH
40475: LD_VAR 0 3
40479: PUSH
40480: LD_INT 1
40482: PPUSH
40483: LD_VAR 0 3
40487: PPUSH
40488: CALL_OW 12
40492: ARRAY
40493: ST_TO_ADDR
// if Crawls ( un ) then
40494: LD_VAR 0 2
40498: PPUSH
40499: CALL_OW 318
40503: IFFALSE 40514
// ComWalk ( un ) ;
40505: LD_VAR 0 2
40509: PPUSH
40510: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
40514: LD_VAR 0 2
40518: PPUSH
40519: LD_INT 9
40521: PPUSH
40522: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
40526: LD_INT 28
40528: PPUSH
40529: LD_OWVAR 2
40533: PPUSH
40534: LD_INT 2
40536: PPUSH
40537: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
40541: LD_INT 29
40543: PPUSH
40544: LD_OWVAR 2
40548: PPUSH
40549: LD_INT 2
40551: PPUSH
40552: CALL_OW 322
// end ;
40556: PPOPN 3
40558: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
40559: LD_EXP 72
40563: PUSH
40564: LD_EXP 115
40568: AND
40569: IFFALSE 40680
40571: GO 40573
40573: DISABLE
40574: LD_INT 0
40576: PPUSH
40577: PPUSH
40578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40579: LD_ADDR_VAR 0 3
40583: PUSH
40584: LD_INT 22
40586: PUSH
40587: LD_OWVAR 2
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 25
40598: PUSH
40599: LD_INT 1
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PPUSH
40610: CALL_OW 69
40614: ST_TO_ADDR
// if not tmp then
40615: LD_VAR 0 3
40619: NOT
40620: IFFALSE 40624
// exit ;
40622: GO 40680
// un := tmp [ rand ( 1 , tmp ) ] ;
40624: LD_ADDR_VAR 0 2
40628: PUSH
40629: LD_VAR 0 3
40633: PUSH
40634: LD_INT 1
40636: PPUSH
40637: LD_VAR 0 3
40641: PPUSH
40642: CALL_OW 12
40646: ARRAY
40647: ST_TO_ADDR
// if Crawls ( un ) then
40648: LD_VAR 0 2
40652: PPUSH
40653: CALL_OW 318
40657: IFFALSE 40668
// ComWalk ( un ) ;
40659: LD_VAR 0 2
40663: PPUSH
40664: CALL_OW 138
// SetClass ( un , class_mortar ) ;
40668: LD_VAR 0 2
40672: PPUSH
40673: LD_INT 8
40675: PPUSH
40676: CALL_OW 336
// end ;
40680: PPOPN 3
40682: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
40683: LD_EXP 72
40687: PUSH
40688: LD_EXP 116
40692: AND
40693: IFFALSE 40837
40695: GO 40697
40697: DISABLE
40698: LD_INT 0
40700: PPUSH
40701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
40702: LD_ADDR_VAR 0 2
40706: PUSH
40707: LD_INT 22
40709: PUSH
40710: LD_OWVAR 2
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 21
40721: PUSH
40722: LD_INT 2
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 2
40731: PUSH
40732: LD_INT 34
40734: PUSH
40735: LD_INT 12
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 34
40744: PUSH
40745: LD_INT 51
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 34
40754: PUSH
40755: LD_INT 32
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: LIST
40772: PPUSH
40773: CALL_OW 69
40777: ST_TO_ADDR
// if not tmp then
40778: LD_VAR 0 2
40782: NOT
40783: IFFALSE 40787
// exit ;
40785: GO 40837
// for i in tmp do
40787: LD_ADDR_VAR 0 1
40791: PUSH
40792: LD_VAR 0 2
40796: PUSH
40797: FOR_IN
40798: IFFALSE 40835
// if GetCargo ( i , mat_artifact ) = 0 then
40800: LD_VAR 0 1
40804: PPUSH
40805: LD_INT 4
40807: PPUSH
40808: CALL_OW 289
40812: PUSH
40813: LD_INT 0
40815: EQUAL
40816: IFFALSE 40833
// SetCargo ( i , mat_siberit , 100 ) ;
40818: LD_VAR 0 1
40822: PPUSH
40823: LD_INT 3
40825: PPUSH
40826: LD_INT 100
40828: PPUSH
40829: CALL_OW 290
40833: GO 40797
40835: POP
40836: POP
// end ;
40837: PPOPN 2
40839: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
40840: LD_EXP 72
40844: PUSH
40845: LD_EXP 117
40849: AND
40850: IFFALSE 41033
40852: GO 40854
40854: DISABLE
40855: LD_INT 0
40857: PPUSH
40858: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
40859: LD_ADDR_VAR 0 2
40863: PUSH
40864: LD_INT 22
40866: PUSH
40867: LD_OWVAR 2
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PPUSH
40876: CALL_OW 69
40880: ST_TO_ADDR
// if not tmp then
40881: LD_VAR 0 2
40885: NOT
40886: IFFALSE 40890
// exit ;
40888: GO 41033
// for i := 1 to 2 do
40890: LD_ADDR_VAR 0 1
40894: PUSH
40895: DOUBLE
40896: LD_INT 1
40898: DEC
40899: ST_TO_ADDR
40900: LD_INT 2
40902: PUSH
40903: FOR_TO
40904: IFFALSE 41031
// begin uc_side := your_side ;
40906: LD_ADDR_OWVAR 20
40910: PUSH
40911: LD_OWVAR 2
40915: ST_TO_ADDR
// uc_nation := nation_american ;
40916: LD_ADDR_OWVAR 21
40920: PUSH
40921: LD_INT 1
40923: ST_TO_ADDR
// vc_chassis := us_morphling ;
40924: LD_ADDR_OWVAR 37
40928: PUSH
40929: LD_INT 5
40931: ST_TO_ADDR
// vc_engine := engine_siberite ;
40932: LD_ADDR_OWVAR 39
40936: PUSH
40937: LD_INT 3
40939: ST_TO_ADDR
// vc_control := control_computer ;
40940: LD_ADDR_OWVAR 38
40944: PUSH
40945: LD_INT 3
40947: ST_TO_ADDR
// vc_weapon := us_double_laser ;
40948: LD_ADDR_OWVAR 40
40952: PUSH
40953: LD_INT 10
40955: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
40956: LD_VAR 0 2
40960: PUSH
40961: LD_INT 1
40963: ARRAY
40964: PPUSH
40965: CALL_OW 310
40969: NOT
40970: IFFALSE 41017
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
40972: CALL_OW 45
40976: PPUSH
40977: LD_VAR 0 2
40981: PUSH
40982: LD_INT 1
40984: ARRAY
40985: PPUSH
40986: CALL_OW 250
40990: PPUSH
40991: LD_VAR 0 2
40995: PUSH
40996: LD_INT 1
40998: ARRAY
40999: PPUSH
41000: CALL_OW 251
41004: PPUSH
41005: LD_INT 12
41007: PPUSH
41008: LD_INT 1
41010: PPUSH
41011: CALL_OW 50
41015: GO 41029
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
41017: CALL_OW 45
41021: PPUSH
41022: LD_INT 1
41024: PPUSH
41025: CALL_OW 51
// end ;
41029: GO 40903
41031: POP
41032: POP
// end ;
41033: PPOPN 2
41035: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
41036: LD_EXP 72
41040: PUSH
41041: LD_EXP 118
41045: AND
41046: IFFALSE 41268
41048: GO 41050
41050: DISABLE
41051: LD_INT 0
41053: PPUSH
41054: PPUSH
41055: PPUSH
41056: PPUSH
41057: PPUSH
41058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
41059: LD_ADDR_VAR 0 6
41063: PUSH
41064: LD_INT 22
41066: PUSH
41067: LD_OWVAR 2
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 21
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 3
41088: PUSH
41089: LD_INT 23
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: LIST
41107: PPUSH
41108: CALL_OW 69
41112: ST_TO_ADDR
// if not tmp then
41113: LD_VAR 0 6
41117: NOT
41118: IFFALSE 41122
// exit ;
41120: GO 41268
// s1 := rand ( 1 , 4 ) ;
41122: LD_ADDR_VAR 0 2
41126: PUSH
41127: LD_INT 1
41129: PPUSH
41130: LD_INT 4
41132: PPUSH
41133: CALL_OW 12
41137: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
41138: LD_ADDR_VAR 0 4
41142: PUSH
41143: LD_VAR 0 6
41147: PUSH
41148: LD_INT 1
41150: ARRAY
41151: PPUSH
41152: LD_VAR 0 2
41156: PPUSH
41157: CALL_OW 259
41161: ST_TO_ADDR
// if s1 = 1 then
41162: LD_VAR 0 2
41166: PUSH
41167: LD_INT 1
41169: EQUAL
41170: IFFALSE 41190
// s2 := rand ( 2 , 4 ) else
41172: LD_ADDR_VAR 0 3
41176: PUSH
41177: LD_INT 2
41179: PPUSH
41180: LD_INT 4
41182: PPUSH
41183: CALL_OW 12
41187: ST_TO_ADDR
41188: GO 41198
// s2 := 1 ;
41190: LD_ADDR_VAR 0 3
41194: PUSH
41195: LD_INT 1
41197: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
41198: LD_ADDR_VAR 0 5
41202: PUSH
41203: LD_VAR 0 6
41207: PUSH
41208: LD_INT 1
41210: ARRAY
41211: PPUSH
41212: LD_VAR 0 3
41216: PPUSH
41217: CALL_OW 259
41221: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
41222: LD_VAR 0 6
41226: PUSH
41227: LD_INT 1
41229: ARRAY
41230: PPUSH
41231: LD_VAR 0 2
41235: PPUSH
41236: LD_VAR 0 5
41240: PPUSH
41241: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
41245: LD_VAR 0 6
41249: PUSH
41250: LD_INT 1
41252: ARRAY
41253: PPUSH
41254: LD_VAR 0 3
41258: PPUSH
41259: LD_VAR 0 4
41263: PPUSH
41264: CALL_OW 237
// end ;
41268: PPOPN 6
41270: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
41271: LD_EXP 72
41275: PUSH
41276: LD_EXP 119
41280: AND
41281: IFFALSE 41360
41283: GO 41285
41285: DISABLE
41286: LD_INT 0
41288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
41289: LD_ADDR_VAR 0 1
41293: PUSH
41294: LD_INT 22
41296: PUSH
41297: LD_OWVAR 2
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 30
41308: PUSH
41309: LD_INT 3
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PPUSH
41320: CALL_OW 69
41324: ST_TO_ADDR
// if not tmp then
41325: LD_VAR 0 1
41329: NOT
41330: IFFALSE 41334
// exit ;
41332: GO 41360
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
41334: LD_VAR 0 1
41338: PUSH
41339: LD_INT 1
41341: PPUSH
41342: LD_VAR 0 1
41346: PPUSH
41347: CALL_OW 12
41351: ARRAY
41352: PPUSH
41353: LD_INT 1
41355: PPUSH
41356: CALL_OW 234
// end ;
41360: PPOPN 1
41362: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
41363: LD_EXP 72
41367: PUSH
41368: LD_EXP 120
41372: AND
41373: IFFALSE 41485
41375: GO 41377
41377: DISABLE
41378: LD_INT 0
41380: PPUSH
41381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
41382: LD_ADDR_VAR 0 2
41386: PUSH
41387: LD_INT 22
41389: PUSH
41390: LD_OWVAR 2
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 2
41401: PUSH
41402: LD_INT 30
41404: PUSH
41405: LD_INT 27
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 30
41414: PUSH
41415: LD_INT 26
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 30
41424: PUSH
41425: LD_INT 28
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PPUSH
41442: CALL_OW 69
41446: ST_TO_ADDR
// if not tmp then
41447: LD_VAR 0 2
41451: NOT
41452: IFFALSE 41456
// exit ;
41454: GO 41485
// for i in tmp do
41456: LD_ADDR_VAR 0 1
41460: PUSH
41461: LD_VAR 0 2
41465: PUSH
41466: FOR_IN
41467: IFFALSE 41483
// SetLives ( i , 1 ) ;
41469: LD_VAR 0 1
41473: PPUSH
41474: LD_INT 1
41476: PPUSH
41477: CALL_OW 234
41481: GO 41466
41483: POP
41484: POP
// end ;
41485: PPOPN 2
41487: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
41488: LD_EXP 72
41492: PUSH
41493: LD_EXP 121
41497: AND
41498: IFFALSE 41785
41500: GO 41502
41502: DISABLE
41503: LD_INT 0
41505: PPUSH
41506: PPUSH
41507: PPUSH
// begin i := rand ( 1 , 7 ) ;
41508: LD_ADDR_VAR 0 1
41512: PUSH
41513: LD_INT 1
41515: PPUSH
41516: LD_INT 7
41518: PPUSH
41519: CALL_OW 12
41523: ST_TO_ADDR
// case i of 1 :
41524: LD_VAR 0 1
41528: PUSH
41529: LD_INT 1
41531: DOUBLE
41532: EQUAL
41533: IFTRUE 41537
41535: GO 41547
41537: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
41538: LD_STRING earthquake(getX(game), 0, 32)
41540: PPUSH
41541: CALL_OW 559
41545: GO 41785
41547: LD_INT 2
41549: DOUBLE
41550: EQUAL
41551: IFTRUE 41555
41553: GO 41569
41555: POP
// begin ToLua ( displayStucuk(); ) ;
41556: LD_STRING displayStucuk();
41558: PPUSH
41559: CALL_OW 559
// ResetFog ;
41563: CALL_OW 335
// end ; 3 :
41567: GO 41785
41569: LD_INT 3
41571: DOUBLE
41572: EQUAL
41573: IFTRUE 41577
41575: GO 41681
41577: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41578: LD_ADDR_VAR 0 2
41582: PUSH
41583: LD_INT 22
41585: PUSH
41586: LD_OWVAR 2
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 25
41597: PUSH
41598: LD_INT 1
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PPUSH
41609: CALL_OW 69
41613: ST_TO_ADDR
// if not tmp then
41614: LD_VAR 0 2
41618: NOT
41619: IFFALSE 41623
// exit ;
41621: GO 41785
// un := tmp [ rand ( 1 , tmp ) ] ;
41623: LD_ADDR_VAR 0 3
41627: PUSH
41628: LD_VAR 0 2
41632: PUSH
41633: LD_INT 1
41635: PPUSH
41636: LD_VAR 0 2
41640: PPUSH
41641: CALL_OW 12
41645: ARRAY
41646: ST_TO_ADDR
// if Crawls ( un ) then
41647: LD_VAR 0 3
41651: PPUSH
41652: CALL_OW 318
41656: IFFALSE 41667
// ComWalk ( un ) ;
41658: LD_VAR 0 3
41662: PPUSH
41663: CALL_OW 138
// SetClass ( un , class_mortar ) ;
41667: LD_VAR 0 3
41671: PPUSH
41672: LD_INT 8
41674: PPUSH
41675: CALL_OW 336
// end ; 4 :
41679: GO 41785
41681: LD_INT 4
41683: DOUBLE
41684: EQUAL
41685: IFTRUE 41689
41687: GO 41763
41689: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
41690: LD_ADDR_VAR 0 2
41694: PUSH
41695: LD_INT 22
41697: PUSH
41698: LD_OWVAR 2
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 30
41709: PUSH
41710: LD_INT 29
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PPUSH
41721: CALL_OW 69
41725: ST_TO_ADDR
// if not tmp then
41726: LD_VAR 0 2
41730: NOT
41731: IFFALSE 41735
// exit ;
41733: GO 41785
// CenterNowOnUnits ( tmp [ 1 ] ) ;
41735: LD_VAR 0 2
41739: PUSH
41740: LD_INT 1
41742: ARRAY
41743: PPUSH
41744: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
41748: LD_VAR 0 2
41752: PUSH
41753: LD_INT 1
41755: ARRAY
41756: PPUSH
41757: CALL_OW 65
// end ; 5 .. 7 :
41761: GO 41785
41763: LD_INT 5
41765: DOUBLE
41766: GREATEREQUAL
41767: IFFALSE 41775
41769: LD_INT 7
41771: DOUBLE
41772: LESSEQUAL
41773: IFTRUE 41777
41775: GO 41784
41777: POP
// StreamSibBomb ; end ;
41778: CALL 38022 0 0
41782: GO 41785
41784: POP
// end ;
41785: PPOPN 3
41787: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
41788: LD_EXP 72
41792: PUSH
41793: LD_EXP 122
41797: AND
41798: IFFALSE 41954
41800: GO 41802
41802: DISABLE
41803: LD_INT 0
41805: PPUSH
41806: PPUSH
41807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
41808: LD_ADDR_VAR 0 2
41812: PUSH
41813: LD_INT 81
41815: PUSH
41816: LD_OWVAR 2
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 2
41827: PUSH
41828: LD_INT 21
41830: PUSH
41831: LD_INT 1
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 21
41840: PUSH
41841: LD_INT 2
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: LIST
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PPUSH
41857: CALL_OW 69
41861: ST_TO_ADDR
// if not tmp then
41862: LD_VAR 0 2
41866: NOT
41867: IFFALSE 41871
// exit ;
41869: GO 41954
// p := 0 ;
41871: LD_ADDR_VAR 0 3
41875: PUSH
41876: LD_INT 0
41878: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
41879: LD_INT 35
41881: PPUSH
41882: CALL_OW 67
// p := p + 1 ;
41886: LD_ADDR_VAR 0 3
41890: PUSH
41891: LD_VAR 0 3
41895: PUSH
41896: LD_INT 1
41898: PLUS
41899: ST_TO_ADDR
// for i in tmp do
41900: LD_ADDR_VAR 0 1
41904: PUSH
41905: LD_VAR 0 2
41909: PUSH
41910: FOR_IN
41911: IFFALSE 41942
// if GetLives ( i ) < 1000 then
41913: LD_VAR 0 1
41917: PPUSH
41918: CALL_OW 256
41922: PUSH
41923: LD_INT 1000
41925: LESS
41926: IFFALSE 41940
// SetLives ( i , 1000 ) ;
41928: LD_VAR 0 1
41932: PPUSH
41933: LD_INT 1000
41935: PPUSH
41936: CALL_OW 234
41940: GO 41910
41942: POP
41943: POP
// until p > 20 ;
41944: LD_VAR 0 3
41948: PUSH
41949: LD_INT 20
41951: GREATER
41952: IFFALSE 41879
// end ;
41954: PPOPN 3
41956: END
// every 0 0$1 trigger StreamModeActive and sTime do
41957: LD_EXP 72
41961: PUSH
41962: LD_EXP 123
41966: AND
41967: IFFALSE 42002
41969: GO 41971
41971: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
41972: LD_INT 28
41974: PPUSH
41975: LD_OWVAR 2
41979: PPUSH
41980: LD_INT 2
41982: PPUSH
41983: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
41987: LD_INT 30
41989: PPUSH
41990: LD_OWVAR 2
41994: PPUSH
41995: LD_INT 2
41997: PPUSH
41998: CALL_OW 322
// end ;
42002: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
42003: LD_EXP 72
42007: PUSH
42008: LD_EXP 124
42012: AND
42013: IFFALSE 42134
42015: GO 42017
42017: DISABLE
42018: LD_INT 0
42020: PPUSH
42021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
42022: LD_ADDR_VAR 0 2
42026: PUSH
42027: LD_INT 22
42029: PUSH
42030: LD_OWVAR 2
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 21
42041: PUSH
42042: LD_INT 1
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 3
42051: PUSH
42052: LD_INT 23
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: LIST
42070: PPUSH
42071: CALL_OW 69
42075: ST_TO_ADDR
// if not tmp then
42076: LD_VAR 0 2
42080: NOT
42081: IFFALSE 42085
// exit ;
42083: GO 42134
// for i in tmp do
42085: LD_ADDR_VAR 0 1
42089: PUSH
42090: LD_VAR 0 2
42094: PUSH
42095: FOR_IN
42096: IFFALSE 42132
// begin if Crawls ( i ) then
42098: LD_VAR 0 1
42102: PPUSH
42103: CALL_OW 318
42107: IFFALSE 42118
// ComWalk ( i ) ;
42109: LD_VAR 0 1
42113: PPUSH
42114: CALL_OW 138
// SetClass ( i , 2 ) ;
42118: LD_VAR 0 1
42122: PPUSH
42123: LD_INT 2
42125: PPUSH
42126: CALL_OW 336
// end ;
42130: GO 42095
42132: POP
42133: POP
// end ;
42134: PPOPN 2
42136: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
42137: LD_EXP 72
42141: PUSH
42142: LD_EXP 125
42146: AND
42147: IFFALSE 42435
42149: GO 42151
42151: DISABLE
42152: LD_INT 0
42154: PPUSH
42155: PPUSH
42156: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
42157: LD_OWVAR 2
42161: PPUSH
42162: LD_INT 9
42164: PPUSH
42165: LD_INT 1
42167: PPUSH
42168: LD_INT 1
42170: PPUSH
42171: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
42175: LD_INT 9
42177: PPUSH
42178: LD_OWVAR 2
42182: PPUSH
42183: CALL_OW 343
// uc_side := 9 ;
42187: LD_ADDR_OWVAR 20
42191: PUSH
42192: LD_INT 9
42194: ST_TO_ADDR
// uc_nation := 2 ;
42195: LD_ADDR_OWVAR 21
42199: PUSH
42200: LD_INT 2
42202: ST_TO_ADDR
// hc_name := Dark Warrior ;
42203: LD_ADDR_OWVAR 26
42207: PUSH
42208: LD_STRING Dark Warrior
42210: ST_TO_ADDR
// hc_gallery :=  ;
42211: LD_ADDR_OWVAR 33
42215: PUSH
42216: LD_STRING 
42218: ST_TO_ADDR
// hc_noskilllimit := true ;
42219: LD_ADDR_OWVAR 76
42223: PUSH
42224: LD_INT 1
42226: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
42227: LD_ADDR_OWVAR 31
42231: PUSH
42232: LD_INT 30
42234: PUSH
42235: LD_INT 30
42237: PUSH
42238: LD_INT 30
42240: PUSH
42241: LD_INT 30
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: ST_TO_ADDR
// un := CreateHuman ;
42250: LD_ADDR_VAR 0 3
42254: PUSH
42255: CALL_OW 44
42259: ST_TO_ADDR
// hc_noskilllimit := false ;
42260: LD_ADDR_OWVAR 76
42264: PUSH
42265: LD_INT 0
42267: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
42268: LD_VAR 0 3
42272: PPUSH
42273: LD_INT 1
42275: PPUSH
42276: CALL_OW 51
// ToLua ( playRanger() ) ;
42280: LD_STRING playRanger()
42282: PPUSH
42283: CALL_OW 559
// p := 0 ;
42287: LD_ADDR_VAR 0 2
42291: PUSH
42292: LD_INT 0
42294: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
42295: LD_INT 35
42297: PPUSH
42298: CALL_OW 67
// p := p + 1 ;
42302: LD_ADDR_VAR 0 2
42306: PUSH
42307: LD_VAR 0 2
42311: PUSH
42312: LD_INT 1
42314: PLUS
42315: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
42316: LD_VAR 0 3
42320: PPUSH
42321: CALL_OW 256
42325: PUSH
42326: LD_INT 1000
42328: LESS
42329: IFFALSE 42343
// SetLives ( un , 1000 ) ;
42331: LD_VAR 0 3
42335: PPUSH
42336: LD_INT 1000
42338: PPUSH
42339: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
42343: LD_VAR 0 3
42347: PPUSH
42348: LD_INT 81
42350: PUSH
42351: LD_OWVAR 2
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 91
42362: PUSH
42363: LD_VAR 0 3
42367: PUSH
42368: LD_INT 30
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: LIST
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PPUSH
42380: CALL_OW 69
42384: PPUSH
42385: LD_VAR 0 3
42389: PPUSH
42390: CALL_OW 74
42394: PPUSH
42395: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
42399: LD_VAR 0 2
42403: PUSH
42404: LD_INT 80
42406: GREATER
42407: PUSH
42408: LD_VAR 0 3
42412: PPUSH
42413: CALL_OW 301
42417: OR
42418: IFFALSE 42295
// if un then
42420: LD_VAR 0 3
42424: IFFALSE 42435
// RemoveUnit ( un ) ;
42426: LD_VAR 0 3
42430: PPUSH
42431: CALL_OW 64
// end ;
42435: PPOPN 3
42437: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
42438: LD_EXP 126
42442: IFFALSE 42558
42444: GO 42446
42446: DISABLE
42447: LD_INT 0
42449: PPUSH
42450: PPUSH
42451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
42452: LD_ADDR_VAR 0 2
42456: PUSH
42457: LD_INT 81
42459: PUSH
42460: LD_OWVAR 2
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 21
42471: PUSH
42472: LD_INT 1
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PPUSH
42483: CALL_OW 69
42487: ST_TO_ADDR
// ToLua ( playComputer() ) ;
42488: LD_STRING playComputer()
42490: PPUSH
42491: CALL_OW 559
// if not tmp then
42495: LD_VAR 0 2
42499: NOT
42500: IFFALSE 42504
// exit ;
42502: GO 42558
// for i in tmp do
42504: LD_ADDR_VAR 0 1
42508: PUSH
42509: LD_VAR 0 2
42513: PUSH
42514: FOR_IN
42515: IFFALSE 42556
// for j := 1 to 4 do
42517: LD_ADDR_VAR 0 3
42521: PUSH
42522: DOUBLE
42523: LD_INT 1
42525: DEC
42526: ST_TO_ADDR
42527: LD_INT 4
42529: PUSH
42530: FOR_TO
42531: IFFALSE 42552
// SetSkill ( i , j , 10 ) ;
42533: LD_VAR 0 1
42537: PPUSH
42538: LD_VAR 0 3
42542: PPUSH
42543: LD_INT 10
42545: PPUSH
42546: CALL_OW 237
42550: GO 42530
42552: POP
42553: POP
42554: GO 42514
42556: POP
42557: POP
// end ;
42558: PPOPN 3
42560: END
// every 0 0$1 trigger s30 do var i , tmp ;
42561: LD_EXP 127
42565: IFFALSE 42634
42567: GO 42569
42569: DISABLE
42570: LD_INT 0
42572: PPUSH
42573: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
42574: LD_ADDR_VAR 0 2
42578: PUSH
42579: LD_INT 22
42581: PUSH
42582: LD_OWVAR 2
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PPUSH
42591: CALL_OW 69
42595: ST_TO_ADDR
// if not tmp then
42596: LD_VAR 0 2
42600: NOT
42601: IFFALSE 42605
// exit ;
42603: GO 42634
// for i in tmp do
42605: LD_ADDR_VAR 0 1
42609: PUSH
42610: LD_VAR 0 2
42614: PUSH
42615: FOR_IN
42616: IFFALSE 42632
// SetLives ( i , 300 ) ;
42618: LD_VAR 0 1
42622: PPUSH
42623: LD_INT 300
42625: PPUSH
42626: CALL_OW 234
42630: GO 42615
42632: POP
42633: POP
// end ;
42634: PPOPN 2
42636: END
// every 0 0$1 trigger s60 do var i , tmp ;
42637: LD_EXP 128
42641: IFFALSE 42710
42643: GO 42645
42645: DISABLE
42646: LD_INT 0
42648: PPUSH
42649: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
42650: LD_ADDR_VAR 0 2
42654: PUSH
42655: LD_INT 22
42657: PUSH
42658: LD_OWVAR 2
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PPUSH
42667: CALL_OW 69
42671: ST_TO_ADDR
// if not tmp then
42672: LD_VAR 0 2
42676: NOT
42677: IFFALSE 42681
// exit ;
42679: GO 42710
// for i in tmp do
42681: LD_ADDR_VAR 0 1
42685: PUSH
42686: LD_VAR 0 2
42690: PUSH
42691: FOR_IN
42692: IFFALSE 42708
// SetLives ( i , 600 ) ;
42694: LD_VAR 0 1
42698: PPUSH
42699: LD_INT 600
42701: PPUSH
42702: CALL_OW 234
42706: GO 42691
42708: POP
42709: POP
// end ;
42710: PPOPN 2
42712: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
42713: LD_INT 0
42715: PPUSH
// case cmd of 301 :
42716: LD_VAR 0 1
42720: PUSH
42721: LD_INT 301
42723: DOUBLE
42724: EQUAL
42725: IFTRUE 42729
42727: GO 42761
42729: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
42730: LD_VAR 0 6
42734: PPUSH
42735: LD_VAR 0 7
42739: PPUSH
42740: LD_VAR 0 8
42744: PPUSH
42745: LD_VAR 0 4
42749: PPUSH
42750: LD_VAR 0 5
42754: PPUSH
42755: CALL 43962 0 5
42759: GO 42882
42761: LD_INT 302
42763: DOUBLE
42764: EQUAL
42765: IFTRUE 42769
42767: GO 42806
42769: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
42770: LD_VAR 0 6
42774: PPUSH
42775: LD_VAR 0 7
42779: PPUSH
42780: LD_VAR 0 8
42784: PPUSH
42785: LD_VAR 0 9
42789: PPUSH
42790: LD_VAR 0 4
42794: PPUSH
42795: LD_VAR 0 5
42799: PPUSH
42800: CALL 44053 0 6
42804: GO 42882
42806: LD_INT 303
42808: DOUBLE
42809: EQUAL
42810: IFTRUE 42814
42812: GO 42851
42814: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
42815: LD_VAR 0 6
42819: PPUSH
42820: LD_VAR 0 7
42824: PPUSH
42825: LD_VAR 0 8
42829: PPUSH
42830: LD_VAR 0 9
42834: PPUSH
42835: LD_VAR 0 4
42839: PPUSH
42840: LD_VAR 0 5
42844: PPUSH
42845: CALL 42887 0 6
42849: GO 42882
42851: LD_INT 304
42853: DOUBLE
42854: EQUAL
42855: IFTRUE 42859
42857: GO 42881
42859: POP
// hHackTeleport ( unit , x , y ) ; end ;
42860: LD_VAR 0 2
42864: PPUSH
42865: LD_VAR 0 4
42869: PPUSH
42870: LD_VAR 0 5
42874: PPUSH
42875: CALL 44646 0 3
42879: GO 42882
42881: POP
// end ;
42882: LD_VAR 0 12
42886: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
42887: LD_INT 0
42889: PPUSH
42890: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
42891: LD_VAR 0 1
42895: PUSH
42896: LD_INT 1
42898: LESS
42899: PUSH
42900: LD_VAR 0 1
42904: PUSH
42905: LD_INT 3
42907: GREATER
42908: OR
42909: PUSH
42910: LD_VAR 0 5
42914: PPUSH
42915: LD_VAR 0 6
42919: PPUSH
42920: CALL_OW 428
42924: OR
42925: IFFALSE 42929
// exit ;
42927: GO 43649
// uc_side := your_side ;
42929: LD_ADDR_OWVAR 20
42933: PUSH
42934: LD_OWVAR 2
42938: ST_TO_ADDR
// uc_nation := nation ;
42939: LD_ADDR_OWVAR 21
42943: PUSH
42944: LD_VAR 0 1
42948: ST_TO_ADDR
// bc_level = 1 ;
42949: LD_ADDR_OWVAR 43
42953: PUSH
42954: LD_INT 1
42956: ST_TO_ADDR
// case btype of 1 :
42957: LD_VAR 0 2
42961: PUSH
42962: LD_INT 1
42964: DOUBLE
42965: EQUAL
42966: IFTRUE 42970
42968: GO 42981
42970: POP
// bc_type := b_depot ; 2 :
42971: LD_ADDR_OWVAR 42
42975: PUSH
42976: LD_INT 0
42978: ST_TO_ADDR
42979: GO 43593
42981: LD_INT 2
42983: DOUBLE
42984: EQUAL
42985: IFTRUE 42989
42987: GO 43000
42989: POP
// bc_type := b_warehouse ; 3 :
42990: LD_ADDR_OWVAR 42
42994: PUSH
42995: LD_INT 1
42997: ST_TO_ADDR
42998: GO 43593
43000: LD_INT 3
43002: DOUBLE
43003: EQUAL
43004: IFTRUE 43008
43006: GO 43019
43008: POP
// bc_type := b_lab ; 4 .. 9 :
43009: LD_ADDR_OWVAR 42
43013: PUSH
43014: LD_INT 6
43016: ST_TO_ADDR
43017: GO 43593
43019: LD_INT 4
43021: DOUBLE
43022: GREATEREQUAL
43023: IFFALSE 43031
43025: LD_INT 9
43027: DOUBLE
43028: LESSEQUAL
43029: IFTRUE 43033
43031: GO 43085
43033: POP
// begin bc_type := b_lab_half ;
43034: LD_ADDR_OWVAR 42
43038: PUSH
43039: LD_INT 7
43041: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
43042: LD_ADDR_OWVAR 44
43046: PUSH
43047: LD_INT 10
43049: PUSH
43050: LD_INT 11
43052: PUSH
43053: LD_INT 12
43055: PUSH
43056: LD_INT 15
43058: PUSH
43059: LD_INT 14
43061: PUSH
43062: LD_INT 13
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: PUSH
43073: LD_VAR 0 2
43077: PUSH
43078: LD_INT 3
43080: MINUS
43081: ARRAY
43082: ST_TO_ADDR
// end ; 10 .. 13 :
43083: GO 43593
43085: LD_INT 10
43087: DOUBLE
43088: GREATEREQUAL
43089: IFFALSE 43097
43091: LD_INT 13
43093: DOUBLE
43094: LESSEQUAL
43095: IFTRUE 43099
43097: GO 43176
43099: POP
// begin bc_type := b_lab_full ;
43100: LD_ADDR_OWVAR 42
43104: PUSH
43105: LD_INT 8
43107: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
43108: LD_ADDR_OWVAR 44
43112: PUSH
43113: LD_INT 10
43115: PUSH
43116: LD_INT 12
43118: PUSH
43119: LD_INT 14
43121: PUSH
43122: LD_INT 13
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: PUSH
43131: LD_VAR 0 2
43135: PUSH
43136: LD_INT 9
43138: MINUS
43139: ARRAY
43140: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
43141: LD_ADDR_OWVAR 45
43145: PUSH
43146: LD_INT 11
43148: PUSH
43149: LD_INT 15
43151: PUSH
43152: LD_INT 12
43154: PUSH
43155: LD_INT 15
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: PUSH
43164: LD_VAR 0 2
43168: PUSH
43169: LD_INT 9
43171: MINUS
43172: ARRAY
43173: ST_TO_ADDR
// end ; 14 :
43174: GO 43593
43176: LD_INT 14
43178: DOUBLE
43179: EQUAL
43180: IFTRUE 43184
43182: GO 43195
43184: POP
// bc_type := b_workshop ; 15 :
43185: LD_ADDR_OWVAR 42
43189: PUSH
43190: LD_INT 2
43192: ST_TO_ADDR
43193: GO 43593
43195: LD_INT 15
43197: DOUBLE
43198: EQUAL
43199: IFTRUE 43203
43201: GO 43214
43203: POP
// bc_type := b_factory ; 16 :
43204: LD_ADDR_OWVAR 42
43208: PUSH
43209: LD_INT 3
43211: ST_TO_ADDR
43212: GO 43593
43214: LD_INT 16
43216: DOUBLE
43217: EQUAL
43218: IFTRUE 43222
43220: GO 43233
43222: POP
// bc_type := b_ext_gun ; 17 :
43223: LD_ADDR_OWVAR 42
43227: PUSH
43228: LD_INT 17
43230: ST_TO_ADDR
43231: GO 43593
43233: LD_INT 17
43235: DOUBLE
43236: EQUAL
43237: IFTRUE 43241
43239: GO 43269
43241: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
43242: LD_ADDR_OWVAR 42
43246: PUSH
43247: LD_INT 19
43249: PUSH
43250: LD_INT 23
43252: PUSH
43253: LD_INT 19
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: LIST
43260: PUSH
43261: LD_VAR 0 1
43265: ARRAY
43266: ST_TO_ADDR
43267: GO 43593
43269: LD_INT 18
43271: DOUBLE
43272: EQUAL
43273: IFTRUE 43277
43275: GO 43288
43277: POP
// bc_type := b_ext_radar ; 19 :
43278: LD_ADDR_OWVAR 42
43282: PUSH
43283: LD_INT 20
43285: ST_TO_ADDR
43286: GO 43593
43288: LD_INT 19
43290: DOUBLE
43291: EQUAL
43292: IFTRUE 43296
43294: GO 43307
43296: POP
// bc_type := b_ext_radio ; 20 :
43297: LD_ADDR_OWVAR 42
43301: PUSH
43302: LD_INT 22
43304: ST_TO_ADDR
43305: GO 43593
43307: LD_INT 20
43309: DOUBLE
43310: EQUAL
43311: IFTRUE 43315
43313: GO 43326
43315: POP
// bc_type := b_ext_siberium ; 21 :
43316: LD_ADDR_OWVAR 42
43320: PUSH
43321: LD_INT 21
43323: ST_TO_ADDR
43324: GO 43593
43326: LD_INT 21
43328: DOUBLE
43329: EQUAL
43330: IFTRUE 43334
43332: GO 43345
43334: POP
// bc_type := b_ext_computer ; 22 :
43335: LD_ADDR_OWVAR 42
43339: PUSH
43340: LD_INT 24
43342: ST_TO_ADDR
43343: GO 43593
43345: LD_INT 22
43347: DOUBLE
43348: EQUAL
43349: IFTRUE 43353
43351: GO 43364
43353: POP
// bc_type := b_ext_track ; 23 :
43354: LD_ADDR_OWVAR 42
43358: PUSH
43359: LD_INT 16
43361: ST_TO_ADDR
43362: GO 43593
43364: LD_INT 23
43366: DOUBLE
43367: EQUAL
43368: IFTRUE 43372
43370: GO 43383
43372: POP
// bc_type := b_ext_laser ; 24 :
43373: LD_ADDR_OWVAR 42
43377: PUSH
43378: LD_INT 25
43380: ST_TO_ADDR
43381: GO 43593
43383: LD_INT 24
43385: DOUBLE
43386: EQUAL
43387: IFTRUE 43391
43389: GO 43402
43391: POP
// bc_type := b_control_tower ; 25 :
43392: LD_ADDR_OWVAR 42
43396: PUSH
43397: LD_INT 36
43399: ST_TO_ADDR
43400: GO 43593
43402: LD_INT 25
43404: DOUBLE
43405: EQUAL
43406: IFTRUE 43410
43408: GO 43421
43410: POP
// bc_type := b_breastwork ; 26 :
43411: LD_ADDR_OWVAR 42
43415: PUSH
43416: LD_INT 31
43418: ST_TO_ADDR
43419: GO 43593
43421: LD_INT 26
43423: DOUBLE
43424: EQUAL
43425: IFTRUE 43429
43427: GO 43440
43429: POP
// bc_type := b_bunker ; 27 :
43430: LD_ADDR_OWVAR 42
43434: PUSH
43435: LD_INT 32
43437: ST_TO_ADDR
43438: GO 43593
43440: LD_INT 27
43442: DOUBLE
43443: EQUAL
43444: IFTRUE 43448
43446: GO 43459
43448: POP
// bc_type := b_turret ; 28 :
43449: LD_ADDR_OWVAR 42
43453: PUSH
43454: LD_INT 33
43456: ST_TO_ADDR
43457: GO 43593
43459: LD_INT 28
43461: DOUBLE
43462: EQUAL
43463: IFTRUE 43467
43465: GO 43478
43467: POP
// bc_type := b_armoury ; 29 :
43468: LD_ADDR_OWVAR 42
43472: PUSH
43473: LD_INT 4
43475: ST_TO_ADDR
43476: GO 43593
43478: LD_INT 29
43480: DOUBLE
43481: EQUAL
43482: IFTRUE 43486
43484: GO 43497
43486: POP
// bc_type := b_barracks ; 30 :
43487: LD_ADDR_OWVAR 42
43491: PUSH
43492: LD_INT 5
43494: ST_TO_ADDR
43495: GO 43593
43497: LD_INT 30
43499: DOUBLE
43500: EQUAL
43501: IFTRUE 43505
43503: GO 43516
43505: POP
// bc_type := b_solar_power ; 31 :
43506: LD_ADDR_OWVAR 42
43510: PUSH
43511: LD_INT 27
43513: ST_TO_ADDR
43514: GO 43593
43516: LD_INT 31
43518: DOUBLE
43519: EQUAL
43520: IFTRUE 43524
43522: GO 43535
43524: POP
// bc_type := b_oil_power ; 32 :
43525: LD_ADDR_OWVAR 42
43529: PUSH
43530: LD_INT 26
43532: ST_TO_ADDR
43533: GO 43593
43535: LD_INT 32
43537: DOUBLE
43538: EQUAL
43539: IFTRUE 43543
43541: GO 43554
43543: POP
// bc_type := b_siberite_power ; 33 :
43544: LD_ADDR_OWVAR 42
43548: PUSH
43549: LD_INT 28
43551: ST_TO_ADDR
43552: GO 43593
43554: LD_INT 33
43556: DOUBLE
43557: EQUAL
43558: IFTRUE 43562
43560: GO 43573
43562: POP
// bc_type := b_oil_mine ; 34 :
43563: LD_ADDR_OWVAR 42
43567: PUSH
43568: LD_INT 29
43570: ST_TO_ADDR
43571: GO 43593
43573: LD_INT 34
43575: DOUBLE
43576: EQUAL
43577: IFTRUE 43581
43579: GO 43592
43581: POP
// bc_type := b_siberite_mine ; end ;
43582: LD_ADDR_OWVAR 42
43586: PUSH
43587: LD_INT 30
43589: ST_TO_ADDR
43590: GO 43593
43592: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
43593: LD_ADDR_VAR 0 8
43597: PUSH
43598: LD_VAR 0 5
43602: PPUSH
43603: LD_VAR 0 6
43607: PPUSH
43608: LD_VAR 0 3
43612: PPUSH
43613: CALL_OW 47
43617: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
43618: LD_OWVAR 42
43622: PUSH
43623: LD_INT 32
43625: PUSH
43626: LD_INT 33
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: IN
43633: IFFALSE 43649
// PlaceWeaponTurret ( b , weapon ) ;
43635: LD_VAR 0 8
43639: PPUSH
43640: LD_VAR 0 4
43644: PPUSH
43645: CALL_OW 431
// end ;
43649: LD_VAR 0 7
43653: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
43654: LD_INT 0
43656: PPUSH
43657: PPUSH
43658: PPUSH
43659: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43660: LD_ADDR_VAR 0 4
43664: PUSH
43665: LD_INT 22
43667: PUSH
43668: LD_OWVAR 2
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 2
43679: PUSH
43680: LD_INT 30
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 30
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: LIST
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PPUSH
43709: CALL_OW 69
43713: ST_TO_ADDR
// if not tmp then
43714: LD_VAR 0 4
43718: NOT
43719: IFFALSE 43723
// exit ;
43721: GO 43782
// for i in tmp do
43723: LD_ADDR_VAR 0 2
43727: PUSH
43728: LD_VAR 0 4
43732: PUSH
43733: FOR_IN
43734: IFFALSE 43780
// for j = 1 to 3 do
43736: LD_ADDR_VAR 0 3
43740: PUSH
43741: DOUBLE
43742: LD_INT 1
43744: DEC
43745: ST_TO_ADDR
43746: LD_INT 3
43748: PUSH
43749: FOR_TO
43750: IFFALSE 43776
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
43752: LD_VAR 0 2
43756: PPUSH
43757: CALL_OW 274
43761: PPUSH
43762: LD_VAR 0 3
43766: PPUSH
43767: LD_INT 99999
43769: PPUSH
43770: CALL_OW 277
43774: GO 43749
43776: POP
43777: POP
43778: GO 43733
43780: POP
43781: POP
// end ;
43782: LD_VAR 0 1
43786: RET
// export function hHackSetLevel10 ; var i , j ; begin
43787: LD_INT 0
43789: PPUSH
43790: PPUSH
43791: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
43792: LD_ADDR_VAR 0 2
43796: PUSH
43797: LD_INT 21
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PPUSH
43807: CALL_OW 69
43811: PUSH
43812: FOR_IN
43813: IFFALSE 43865
// if IsSelected ( i ) then
43815: LD_VAR 0 2
43819: PPUSH
43820: CALL_OW 306
43824: IFFALSE 43863
// begin for j := 1 to 4 do
43826: LD_ADDR_VAR 0 3
43830: PUSH
43831: DOUBLE
43832: LD_INT 1
43834: DEC
43835: ST_TO_ADDR
43836: LD_INT 4
43838: PUSH
43839: FOR_TO
43840: IFFALSE 43861
// SetSkill ( i , j , 10 ) ;
43842: LD_VAR 0 2
43846: PPUSH
43847: LD_VAR 0 3
43851: PPUSH
43852: LD_INT 10
43854: PPUSH
43855: CALL_OW 237
43859: GO 43839
43861: POP
43862: POP
// end ;
43863: GO 43812
43865: POP
43866: POP
// end ;
43867: LD_VAR 0 1
43871: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
43872: LD_INT 0
43874: PPUSH
43875: PPUSH
43876: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
43877: LD_ADDR_VAR 0 2
43881: PUSH
43882: LD_INT 22
43884: PUSH
43885: LD_OWVAR 2
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 21
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PPUSH
43908: CALL_OW 69
43912: PUSH
43913: FOR_IN
43914: IFFALSE 43955
// begin for j := 1 to 4 do
43916: LD_ADDR_VAR 0 3
43920: PUSH
43921: DOUBLE
43922: LD_INT 1
43924: DEC
43925: ST_TO_ADDR
43926: LD_INT 4
43928: PUSH
43929: FOR_TO
43930: IFFALSE 43951
// SetSkill ( i , j , 10 ) ;
43932: LD_VAR 0 2
43936: PPUSH
43937: LD_VAR 0 3
43941: PPUSH
43942: LD_INT 10
43944: PPUSH
43945: CALL_OW 237
43949: GO 43929
43951: POP
43952: POP
// end ;
43953: GO 43913
43955: POP
43956: POP
// end ;
43957: LD_VAR 0 1
43961: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
43962: LD_INT 0
43964: PPUSH
// uc_side := your_side ;
43965: LD_ADDR_OWVAR 20
43969: PUSH
43970: LD_OWVAR 2
43974: ST_TO_ADDR
// uc_nation := nation ;
43975: LD_ADDR_OWVAR 21
43979: PUSH
43980: LD_VAR 0 1
43984: ST_TO_ADDR
// InitHc ;
43985: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
43989: LD_INT 0
43991: PPUSH
43992: LD_VAR 0 2
43996: PPUSH
43997: LD_VAR 0 3
44001: PPUSH
44002: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
44006: LD_VAR 0 4
44010: PPUSH
44011: LD_VAR 0 5
44015: PPUSH
44016: CALL_OW 428
44020: PUSH
44021: LD_INT 0
44023: EQUAL
44024: IFFALSE 44048
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
44026: CALL_OW 44
44030: PPUSH
44031: LD_VAR 0 4
44035: PPUSH
44036: LD_VAR 0 5
44040: PPUSH
44041: LD_INT 1
44043: PPUSH
44044: CALL_OW 48
// end ;
44048: LD_VAR 0 6
44052: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
44053: LD_INT 0
44055: PPUSH
44056: PPUSH
// uc_side := your_side ;
44057: LD_ADDR_OWVAR 20
44061: PUSH
44062: LD_OWVAR 2
44066: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
44067: LD_VAR 0 1
44071: PUSH
44072: LD_INT 1
44074: PUSH
44075: LD_INT 2
44077: PUSH
44078: LD_INT 3
44080: PUSH
44081: LD_INT 4
44083: PUSH
44084: LD_INT 5
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: IN
44094: IFFALSE 44106
// uc_nation := nation_american else
44096: LD_ADDR_OWVAR 21
44100: PUSH
44101: LD_INT 1
44103: ST_TO_ADDR
44104: GO 44149
// if chassis in [ 11 , 12 , 13 , 14 ] then
44106: LD_VAR 0 1
44110: PUSH
44111: LD_INT 11
44113: PUSH
44114: LD_INT 12
44116: PUSH
44117: LD_INT 13
44119: PUSH
44120: LD_INT 14
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: IN
44129: IFFALSE 44141
// uc_nation := nation_arabian else
44131: LD_ADDR_OWVAR 21
44135: PUSH
44136: LD_INT 2
44138: ST_TO_ADDR
44139: GO 44149
// uc_nation := nation_russian ;
44141: LD_ADDR_OWVAR 21
44145: PUSH
44146: LD_INT 3
44148: ST_TO_ADDR
// vc_chassis := chassis ;
44149: LD_ADDR_OWVAR 37
44153: PUSH
44154: LD_VAR 0 1
44158: ST_TO_ADDR
// vc_engine := engine ;
44159: LD_ADDR_OWVAR 39
44163: PUSH
44164: LD_VAR 0 2
44168: ST_TO_ADDR
// vc_control := control ;
44169: LD_ADDR_OWVAR 38
44173: PUSH
44174: LD_VAR 0 3
44178: ST_TO_ADDR
// vc_weapon := weapon ;
44179: LD_ADDR_OWVAR 40
44183: PUSH
44184: LD_VAR 0 4
44188: ST_TO_ADDR
// un := CreateVehicle ;
44189: LD_ADDR_VAR 0 8
44193: PUSH
44194: CALL_OW 45
44198: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
44199: LD_VAR 0 8
44203: PPUSH
44204: LD_INT 0
44206: PPUSH
44207: LD_INT 5
44209: PPUSH
44210: CALL_OW 12
44214: PPUSH
44215: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
44219: LD_VAR 0 8
44223: PPUSH
44224: LD_VAR 0 5
44228: PPUSH
44229: LD_VAR 0 6
44233: PPUSH
44234: LD_INT 1
44236: PPUSH
44237: CALL_OW 48
// end ;
44241: LD_VAR 0 7
44245: RET
// export hInvincible ; every 1 do
44246: GO 44248
44248: DISABLE
// hInvincible := [ ] ;
44249: LD_ADDR_EXP 129
44253: PUSH
44254: EMPTY
44255: ST_TO_ADDR
44256: END
// every 10 do var i ;
44257: GO 44259
44259: DISABLE
44260: LD_INT 0
44262: PPUSH
// begin enable ;
44263: ENABLE
// if not hInvincible then
44264: LD_EXP 129
44268: NOT
44269: IFFALSE 44273
// exit ;
44271: GO 44317
// for i in hInvincible do
44273: LD_ADDR_VAR 0 1
44277: PUSH
44278: LD_EXP 129
44282: PUSH
44283: FOR_IN
44284: IFFALSE 44315
// if GetLives ( i ) < 1000 then
44286: LD_VAR 0 1
44290: PPUSH
44291: CALL_OW 256
44295: PUSH
44296: LD_INT 1000
44298: LESS
44299: IFFALSE 44313
// SetLives ( i , 1000 ) ;
44301: LD_VAR 0 1
44305: PPUSH
44306: LD_INT 1000
44308: PPUSH
44309: CALL_OW 234
44313: GO 44283
44315: POP
44316: POP
// end ;
44317: PPOPN 1
44319: END
// export function hHackInvincible ; var i ; begin
44320: LD_INT 0
44322: PPUSH
44323: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
44324: LD_ADDR_VAR 0 2
44328: PUSH
44329: LD_INT 2
44331: PUSH
44332: LD_INT 21
44334: PUSH
44335: LD_INT 1
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 21
44344: PUSH
44345: LD_INT 2
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: LIST
44356: PPUSH
44357: CALL_OW 69
44361: PUSH
44362: FOR_IN
44363: IFFALSE 44424
// if IsSelected ( i ) then
44365: LD_VAR 0 2
44369: PPUSH
44370: CALL_OW 306
44374: IFFALSE 44422
// begin if i in hInvincible then
44376: LD_VAR 0 2
44380: PUSH
44381: LD_EXP 129
44385: IN
44386: IFFALSE 44406
// hInvincible := hInvincible diff i else
44388: LD_ADDR_EXP 129
44392: PUSH
44393: LD_EXP 129
44397: PUSH
44398: LD_VAR 0 2
44402: DIFF
44403: ST_TO_ADDR
44404: GO 44422
// hInvincible := hInvincible union i ;
44406: LD_ADDR_EXP 129
44410: PUSH
44411: LD_EXP 129
44415: PUSH
44416: LD_VAR 0 2
44420: UNION
44421: ST_TO_ADDR
// end ;
44422: GO 44362
44424: POP
44425: POP
// end ;
44426: LD_VAR 0 1
44430: RET
// export function hHackInvisible ; var i , j ; begin
44431: LD_INT 0
44433: PPUSH
44434: PPUSH
44435: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
44436: LD_ADDR_VAR 0 2
44440: PUSH
44441: LD_INT 21
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PPUSH
44451: CALL_OW 69
44455: PUSH
44456: FOR_IN
44457: IFFALSE 44481
// if IsSelected ( i ) then
44459: LD_VAR 0 2
44463: PPUSH
44464: CALL_OW 306
44468: IFFALSE 44479
// ComForceInvisible ( i ) ;
44470: LD_VAR 0 2
44474: PPUSH
44475: CALL_OW 496
44479: GO 44456
44481: POP
44482: POP
// end ;
44483: LD_VAR 0 1
44487: RET
// export function hHackChangeYourSide ; begin
44488: LD_INT 0
44490: PPUSH
// if your_side = 8 then
44491: LD_OWVAR 2
44495: PUSH
44496: LD_INT 8
44498: EQUAL
44499: IFFALSE 44511
// your_side := 0 else
44501: LD_ADDR_OWVAR 2
44505: PUSH
44506: LD_INT 0
44508: ST_TO_ADDR
44509: GO 44525
// your_side := your_side + 1 ;
44511: LD_ADDR_OWVAR 2
44515: PUSH
44516: LD_OWVAR 2
44520: PUSH
44521: LD_INT 1
44523: PLUS
44524: ST_TO_ADDR
// end ;
44525: LD_VAR 0 1
44529: RET
// export function hHackChangeUnitSide ; var i , j ; begin
44530: LD_INT 0
44532: PPUSH
44533: PPUSH
44534: PPUSH
// for i in all_units do
44535: LD_ADDR_VAR 0 2
44539: PUSH
44540: LD_OWVAR 3
44544: PUSH
44545: FOR_IN
44546: IFFALSE 44624
// if IsSelected ( i ) then
44548: LD_VAR 0 2
44552: PPUSH
44553: CALL_OW 306
44557: IFFALSE 44622
// begin j := GetSide ( i ) ;
44559: LD_ADDR_VAR 0 3
44563: PUSH
44564: LD_VAR 0 2
44568: PPUSH
44569: CALL_OW 255
44573: ST_TO_ADDR
// if j = 8 then
44574: LD_VAR 0 3
44578: PUSH
44579: LD_INT 8
44581: EQUAL
44582: IFFALSE 44594
// j := 0 else
44584: LD_ADDR_VAR 0 3
44588: PUSH
44589: LD_INT 0
44591: ST_TO_ADDR
44592: GO 44608
// j := j + 1 ;
44594: LD_ADDR_VAR 0 3
44598: PUSH
44599: LD_VAR 0 3
44603: PUSH
44604: LD_INT 1
44606: PLUS
44607: ST_TO_ADDR
// SetSide ( i , j ) ;
44608: LD_VAR 0 2
44612: PPUSH
44613: LD_VAR 0 3
44617: PPUSH
44618: CALL_OW 235
// end ;
44622: GO 44545
44624: POP
44625: POP
// end ;
44626: LD_VAR 0 1
44630: RET
// export function hHackFog ; begin
44631: LD_INT 0
44633: PPUSH
// FogOff ( true ) ;
44634: LD_INT 1
44636: PPUSH
44637: CALL_OW 344
// end ;
44641: LD_VAR 0 1
44645: RET
// export function hHackTeleport ( unit , x , y ) ; begin
44646: LD_INT 0
44648: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
44649: LD_VAR 0 1
44653: PPUSH
44654: LD_VAR 0 2
44658: PPUSH
44659: LD_VAR 0 3
44663: PPUSH
44664: LD_INT 1
44666: PPUSH
44667: LD_INT 1
44669: PPUSH
44670: CALL_OW 483
// CenterOnXY ( x , y ) ;
44674: LD_VAR 0 2
44678: PPUSH
44679: LD_VAR 0 3
44683: PPUSH
44684: CALL_OW 84
// end ;
44688: LD_VAR 0 4
44692: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
44693: LD_INT 0
44695: PPUSH
44696: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
44697: LD_VAR 0 1
44701: NOT
44702: PUSH
44703: LD_VAR 0 2
44707: PPUSH
44708: LD_VAR 0 3
44712: PPUSH
44713: CALL_OW 488
44717: NOT
44718: OR
44719: PUSH
44720: LD_VAR 0 1
44724: PPUSH
44725: CALL_OW 266
44729: PUSH
44730: LD_INT 3
44732: NONEQUAL
44733: PUSH
44734: LD_VAR 0 1
44738: PPUSH
44739: CALL_OW 247
44743: PUSH
44744: LD_INT 1
44746: EQUAL
44747: NOT
44748: AND
44749: OR
44750: IFFALSE 44754
// exit ;
44752: GO 44903
// if GetType ( factory ) = unit_human then
44754: LD_VAR 0 1
44758: PPUSH
44759: CALL_OW 247
44763: PUSH
44764: LD_INT 1
44766: EQUAL
44767: IFFALSE 44784
// factory := IsInUnit ( factory ) ;
44769: LD_ADDR_VAR 0 1
44773: PUSH
44774: LD_VAR 0 1
44778: PPUSH
44779: CALL_OW 310
44783: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
44784: LD_VAR 0 1
44788: PPUSH
44789: CALL_OW 266
44793: PUSH
44794: LD_INT 3
44796: NONEQUAL
44797: IFFALSE 44801
// exit ;
44799: GO 44903
// if HexInfo ( x , y ) = factory then
44801: LD_VAR 0 2
44805: PPUSH
44806: LD_VAR 0 3
44810: PPUSH
44811: CALL_OW 428
44815: PUSH
44816: LD_VAR 0 1
44820: EQUAL
44821: IFFALSE 44848
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
44823: LD_ADDR_EXP 130
44827: PUSH
44828: LD_EXP 130
44832: PPUSH
44833: LD_VAR 0 1
44837: PPUSH
44838: LD_INT 0
44840: PPUSH
44841: CALL_OW 1
44845: ST_TO_ADDR
44846: GO 44899
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
44848: LD_ADDR_EXP 130
44852: PUSH
44853: LD_EXP 130
44857: PPUSH
44858: LD_VAR 0 1
44862: PPUSH
44863: LD_VAR 0 1
44867: PPUSH
44868: CALL_OW 255
44872: PUSH
44873: LD_VAR 0 1
44877: PUSH
44878: LD_VAR 0 2
44882: PUSH
44883: LD_VAR 0 3
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: PPUSH
44894: CALL_OW 1
44898: ST_TO_ADDR
// UpdateFactoryWaypoints ;
44899: CALL 44908 0 0
// end ;
44903: LD_VAR 0 4
44907: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
44908: LD_INT 0
44910: PPUSH
44911: PPUSH
44912: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
44913: LD_STRING resetFactoryWaypoint();
44915: PPUSH
44916: CALL_OW 559
// if factoryWaypoints then
44920: LD_EXP 130
44924: IFFALSE 45050
// begin list := PrepareArray ( factoryWaypoints ) ;
44926: LD_ADDR_VAR 0 3
44930: PUSH
44931: LD_EXP 130
44935: PPUSH
44936: CALL 91519 0 1
44940: ST_TO_ADDR
// for i := 1 to list do
44941: LD_ADDR_VAR 0 2
44945: PUSH
44946: DOUBLE
44947: LD_INT 1
44949: DEC
44950: ST_TO_ADDR
44951: LD_VAR 0 3
44955: PUSH
44956: FOR_TO
44957: IFFALSE 45048
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
44959: LD_STRING setFactoryWaypointXY(
44961: PUSH
44962: LD_VAR 0 3
44966: PUSH
44967: LD_VAR 0 2
44971: ARRAY
44972: PUSH
44973: LD_INT 1
44975: ARRAY
44976: STR
44977: PUSH
44978: LD_STRING ,
44980: STR
44981: PUSH
44982: LD_VAR 0 3
44986: PUSH
44987: LD_VAR 0 2
44991: ARRAY
44992: PUSH
44993: LD_INT 2
44995: ARRAY
44996: STR
44997: PUSH
44998: LD_STRING ,
45000: STR
45001: PUSH
45002: LD_VAR 0 3
45006: PUSH
45007: LD_VAR 0 2
45011: ARRAY
45012: PUSH
45013: LD_INT 3
45015: ARRAY
45016: STR
45017: PUSH
45018: LD_STRING ,
45020: STR
45021: PUSH
45022: LD_VAR 0 3
45026: PUSH
45027: LD_VAR 0 2
45031: ARRAY
45032: PUSH
45033: LD_INT 4
45035: ARRAY
45036: STR
45037: PUSH
45038: LD_STRING )
45040: STR
45041: PPUSH
45042: CALL_OW 559
45046: GO 44956
45048: POP
45049: POP
// end ; end ;
45050: LD_VAR 0 1
45054: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
45055: LD_INT 0
45057: PPUSH
// if HexInfo ( x , y ) = warehouse then
45058: LD_VAR 0 2
45062: PPUSH
45063: LD_VAR 0 3
45067: PPUSH
45068: CALL_OW 428
45072: PUSH
45073: LD_VAR 0 1
45077: EQUAL
45078: IFFALSE 45105
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
45080: LD_ADDR_EXP 131
45084: PUSH
45085: LD_EXP 131
45089: PPUSH
45090: LD_VAR 0 1
45094: PPUSH
45095: LD_INT 0
45097: PPUSH
45098: CALL_OW 1
45102: ST_TO_ADDR
45103: GO 45156
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
45105: LD_ADDR_EXP 131
45109: PUSH
45110: LD_EXP 131
45114: PPUSH
45115: LD_VAR 0 1
45119: PPUSH
45120: LD_VAR 0 1
45124: PPUSH
45125: CALL_OW 255
45129: PUSH
45130: LD_VAR 0 1
45134: PUSH
45135: LD_VAR 0 2
45139: PUSH
45140: LD_VAR 0 3
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: PPUSH
45151: CALL_OW 1
45155: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
45156: CALL 45165 0 0
// end ;
45160: LD_VAR 0 4
45164: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
45165: LD_INT 0
45167: PPUSH
45168: PPUSH
45169: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
45170: LD_STRING resetWarehouseGatheringPoints();
45172: PPUSH
45173: CALL_OW 559
// if warehouseGatheringPoints then
45177: LD_EXP 131
45181: IFFALSE 45307
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
45183: LD_ADDR_VAR 0 3
45187: PUSH
45188: LD_EXP 131
45192: PPUSH
45193: CALL 91519 0 1
45197: ST_TO_ADDR
// for i := 1 to list do
45198: LD_ADDR_VAR 0 2
45202: PUSH
45203: DOUBLE
45204: LD_INT 1
45206: DEC
45207: ST_TO_ADDR
45208: LD_VAR 0 3
45212: PUSH
45213: FOR_TO
45214: IFFALSE 45305
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
45216: LD_STRING setWarehouseGatheringPointXY(
45218: PUSH
45219: LD_VAR 0 3
45223: PUSH
45224: LD_VAR 0 2
45228: ARRAY
45229: PUSH
45230: LD_INT 1
45232: ARRAY
45233: STR
45234: PUSH
45235: LD_STRING ,
45237: STR
45238: PUSH
45239: LD_VAR 0 3
45243: PUSH
45244: LD_VAR 0 2
45248: ARRAY
45249: PUSH
45250: LD_INT 2
45252: ARRAY
45253: STR
45254: PUSH
45255: LD_STRING ,
45257: STR
45258: PUSH
45259: LD_VAR 0 3
45263: PUSH
45264: LD_VAR 0 2
45268: ARRAY
45269: PUSH
45270: LD_INT 3
45272: ARRAY
45273: STR
45274: PUSH
45275: LD_STRING ,
45277: STR
45278: PUSH
45279: LD_VAR 0 3
45283: PUSH
45284: LD_VAR 0 2
45288: ARRAY
45289: PUSH
45290: LD_INT 4
45292: ARRAY
45293: STR
45294: PUSH
45295: LD_STRING )
45297: STR
45298: PPUSH
45299: CALL_OW 559
45303: GO 45213
45305: POP
45306: POP
// end ; end ;
45307: LD_VAR 0 1
45311: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
45312: LD_EXP 131
45316: IFFALSE 46001
45318: GO 45320
45320: DISABLE
45321: LD_INT 0
45323: PPUSH
45324: PPUSH
45325: PPUSH
45326: PPUSH
45327: PPUSH
45328: PPUSH
45329: PPUSH
45330: PPUSH
45331: PPUSH
// begin enable ;
45332: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
45333: LD_ADDR_VAR 0 3
45337: PUSH
45338: LD_EXP 131
45342: PPUSH
45343: CALL 91519 0 1
45347: ST_TO_ADDR
// if not list then
45348: LD_VAR 0 3
45352: NOT
45353: IFFALSE 45357
// exit ;
45355: GO 46001
// for i := 1 to list do
45357: LD_ADDR_VAR 0 1
45361: PUSH
45362: DOUBLE
45363: LD_INT 1
45365: DEC
45366: ST_TO_ADDR
45367: LD_VAR 0 3
45371: PUSH
45372: FOR_TO
45373: IFFALSE 45999
// begin depot := list [ i ] [ 2 ] ;
45375: LD_ADDR_VAR 0 8
45379: PUSH
45380: LD_VAR 0 3
45384: PUSH
45385: LD_VAR 0 1
45389: ARRAY
45390: PUSH
45391: LD_INT 2
45393: ARRAY
45394: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
45395: LD_ADDR_VAR 0 5
45399: PUSH
45400: LD_VAR 0 3
45404: PUSH
45405: LD_VAR 0 1
45409: ARRAY
45410: PUSH
45411: LD_INT 1
45413: ARRAY
45414: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
45415: LD_VAR 0 8
45419: PPUSH
45420: CALL_OW 301
45424: PUSH
45425: LD_VAR 0 5
45429: PUSH
45430: LD_VAR 0 8
45434: PPUSH
45435: CALL_OW 255
45439: NONEQUAL
45440: OR
45441: IFFALSE 45470
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
45443: LD_ADDR_EXP 131
45447: PUSH
45448: LD_EXP 131
45452: PPUSH
45453: LD_VAR 0 8
45457: PPUSH
45458: LD_INT 0
45460: PPUSH
45461: CALL_OW 1
45465: ST_TO_ADDR
// exit ;
45466: POP
45467: POP
45468: GO 46001
// end ; x := list [ i ] [ 3 ] ;
45470: LD_ADDR_VAR 0 6
45474: PUSH
45475: LD_VAR 0 3
45479: PUSH
45480: LD_VAR 0 1
45484: ARRAY
45485: PUSH
45486: LD_INT 3
45488: ARRAY
45489: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
45490: LD_ADDR_VAR 0 7
45494: PUSH
45495: LD_VAR 0 3
45499: PUSH
45500: LD_VAR 0 1
45504: ARRAY
45505: PUSH
45506: LD_INT 4
45508: ARRAY
45509: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
45510: LD_ADDR_VAR 0 9
45514: PUSH
45515: LD_VAR 0 6
45519: PPUSH
45520: LD_VAR 0 7
45524: PPUSH
45525: LD_INT 16
45527: PPUSH
45528: CALL 90107 0 3
45532: ST_TO_ADDR
// if not cratesNearbyPoint then
45533: LD_VAR 0 9
45537: NOT
45538: IFFALSE 45544
// exit ;
45540: POP
45541: POP
45542: GO 46001
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
45544: LD_ADDR_VAR 0 4
45548: PUSH
45549: LD_INT 22
45551: PUSH
45552: LD_VAR 0 5
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 3
45563: PUSH
45564: LD_INT 60
45566: PUSH
45567: EMPTY
45568: LIST
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 91
45576: PUSH
45577: LD_VAR 0 8
45581: PUSH
45582: LD_INT 6
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 2
45592: PUSH
45593: LD_INT 25
45595: PUSH
45596: LD_INT 2
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 25
45605: PUSH
45606: LD_INT 16
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: LIST
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: PPUSH
45624: CALL_OW 69
45628: PUSH
45629: LD_VAR 0 8
45633: PPUSH
45634: CALL_OW 313
45638: PPUSH
45639: LD_INT 3
45641: PUSH
45642: LD_INT 60
45644: PUSH
45645: EMPTY
45646: LIST
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 2
45654: PUSH
45655: LD_INT 25
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 25
45667: PUSH
45668: LD_INT 16
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: LIST
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PPUSH
45684: CALL_OW 72
45688: UNION
45689: ST_TO_ADDR
// if tmp then
45690: LD_VAR 0 4
45694: IFFALSE 45774
// begin tmp := ShrinkArray ( tmp , 3 ) ;
45696: LD_ADDR_VAR 0 4
45700: PUSH
45701: LD_VAR 0 4
45705: PPUSH
45706: LD_INT 3
45708: PPUSH
45709: CALL 88076 0 2
45713: ST_TO_ADDR
// for j in tmp do
45714: LD_ADDR_VAR 0 2
45718: PUSH
45719: LD_VAR 0 4
45723: PUSH
45724: FOR_IN
45725: IFFALSE 45768
// begin if IsInUnit ( j ) then
45727: LD_VAR 0 2
45731: PPUSH
45732: CALL_OW 310
45736: IFFALSE 45747
// ComExit ( j ) ;
45738: LD_VAR 0 2
45742: PPUSH
45743: CALL 88159 0 1
// AddComCollect ( j , x , y ) ;
45747: LD_VAR 0 2
45751: PPUSH
45752: LD_VAR 0 6
45756: PPUSH
45757: LD_VAR 0 7
45761: PPUSH
45762: CALL_OW 177
// end ;
45766: GO 45724
45768: POP
45769: POP
// exit ;
45770: POP
45771: POP
45772: GO 46001
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
45774: LD_ADDR_VAR 0 4
45778: PUSH
45779: LD_INT 22
45781: PUSH
45782: LD_VAR 0 5
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 91
45793: PUSH
45794: LD_VAR 0 8
45798: PUSH
45799: LD_INT 8
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 2
45809: PUSH
45810: LD_INT 34
45812: PUSH
45813: LD_INT 12
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 34
45822: PUSH
45823: LD_INT 51
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 34
45832: PUSH
45833: LD_INT 32
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 34
45842: PUSH
45843: LD_INT 89
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: LIST
45861: PPUSH
45862: CALL_OW 69
45866: ST_TO_ADDR
// if tmp then
45867: LD_VAR 0 4
45871: IFFALSE 45997
// begin for j in tmp do
45873: LD_ADDR_VAR 0 2
45877: PUSH
45878: LD_VAR 0 4
45882: PUSH
45883: FOR_IN
45884: IFFALSE 45995
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
45886: LD_VAR 0 2
45890: PPUSH
45891: CALL_OW 262
45895: PUSH
45896: LD_INT 3
45898: EQUAL
45899: PUSH
45900: LD_VAR 0 2
45904: PPUSH
45905: CALL_OW 261
45909: PUSH
45910: LD_INT 20
45912: GREATER
45913: OR
45914: PUSH
45915: LD_VAR 0 2
45919: PPUSH
45920: CALL_OW 314
45924: NOT
45925: AND
45926: PUSH
45927: LD_VAR 0 2
45931: PPUSH
45932: CALL_OW 263
45936: PUSH
45937: LD_INT 1
45939: NONEQUAL
45940: PUSH
45941: LD_VAR 0 2
45945: PPUSH
45946: CALL_OW 311
45950: OR
45951: AND
45952: IFFALSE 45993
// begin ComCollect ( j , x , y ) ;
45954: LD_VAR 0 2
45958: PPUSH
45959: LD_VAR 0 6
45963: PPUSH
45964: LD_VAR 0 7
45968: PPUSH
45969: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
45973: LD_VAR 0 2
45977: PPUSH
45978: LD_VAR 0 8
45982: PPUSH
45983: CALL_OW 172
// exit ;
45987: POP
45988: POP
45989: POP
45990: POP
45991: GO 46001
// end ;
45993: GO 45883
45995: POP
45996: POP
// end ; end ;
45997: GO 45372
45999: POP
46000: POP
// end ; end_of_file
46001: PPOPN 9
46003: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
46004: LD_INT 0
46006: PPUSH
46007: PPUSH
46008: PPUSH
46009: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
46010: LD_VAR 0 1
46014: PPUSH
46015: CALL_OW 264
46019: PUSH
46020: LD_INT 91
46022: EQUAL
46023: IFFALSE 46095
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
46025: LD_INT 68
46027: PPUSH
46028: LD_VAR 0 1
46032: PPUSH
46033: CALL_OW 255
46037: PPUSH
46038: CALL_OW 321
46042: PUSH
46043: LD_INT 2
46045: EQUAL
46046: IFFALSE 46058
// eff := 70 else
46048: LD_ADDR_VAR 0 4
46052: PUSH
46053: LD_INT 70
46055: ST_TO_ADDR
46056: GO 46066
// eff := 30 ;
46058: LD_ADDR_VAR 0 4
46062: PUSH
46063: LD_INT 30
46065: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
46066: LD_VAR 0 1
46070: PPUSH
46071: CALL_OW 250
46075: PPUSH
46076: LD_VAR 0 1
46080: PPUSH
46081: CALL_OW 251
46085: PPUSH
46086: LD_VAR 0 4
46090: PPUSH
46091: CALL_OW 495
// end ; end ;
46095: LD_VAR 0 2
46099: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
46100: LD_INT 0
46102: PPUSH
// end ;
46103: LD_VAR 0 4
46107: RET
// export function SOS_Command ( cmd ) ; begin
46108: LD_INT 0
46110: PPUSH
// end ;
46111: LD_VAR 0 2
46115: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
46116: LD_INT 0
46118: PPUSH
// end ;
46119: LD_VAR 0 6
46123: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
46124: LD_INT 0
46126: PPUSH
46127: PPUSH
// if not vehicle or not factory then
46128: LD_VAR 0 1
46132: NOT
46133: PUSH
46134: LD_VAR 0 2
46138: NOT
46139: OR
46140: IFFALSE 46144
// exit ;
46142: GO 46375
// if factoryWaypoints >= factory then
46144: LD_EXP 130
46148: PUSH
46149: LD_VAR 0 2
46153: GREATEREQUAL
46154: IFFALSE 46375
// if factoryWaypoints [ factory ] then
46156: LD_EXP 130
46160: PUSH
46161: LD_VAR 0 2
46165: ARRAY
46166: IFFALSE 46375
// begin if GetControl ( vehicle ) = control_manual then
46168: LD_VAR 0 1
46172: PPUSH
46173: CALL_OW 263
46177: PUSH
46178: LD_INT 1
46180: EQUAL
46181: IFFALSE 46262
// begin driver := IsDrivenBy ( vehicle ) ;
46183: LD_ADDR_VAR 0 4
46187: PUSH
46188: LD_VAR 0 1
46192: PPUSH
46193: CALL_OW 311
46197: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
46198: LD_VAR 0 4
46202: PPUSH
46203: LD_EXP 130
46207: PUSH
46208: LD_VAR 0 2
46212: ARRAY
46213: PUSH
46214: LD_INT 3
46216: ARRAY
46217: PPUSH
46218: LD_EXP 130
46222: PUSH
46223: LD_VAR 0 2
46227: ARRAY
46228: PUSH
46229: LD_INT 4
46231: ARRAY
46232: PPUSH
46233: CALL_OW 171
// AddComExitVehicle ( driver ) ;
46237: LD_VAR 0 4
46241: PPUSH
46242: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
46246: LD_VAR 0 4
46250: PPUSH
46251: LD_VAR 0 2
46255: PPUSH
46256: CALL_OW 180
// end else
46260: GO 46375
// if GetControl ( vehicle ) = control_remote then
46262: LD_VAR 0 1
46266: PPUSH
46267: CALL_OW 263
46271: PUSH
46272: LD_INT 2
46274: EQUAL
46275: IFFALSE 46336
// begin wait ( 0 0$2 ) ;
46277: LD_INT 70
46279: PPUSH
46280: CALL_OW 67
// if Connect ( vehicle ) then
46284: LD_VAR 0 1
46288: PPUSH
46289: CALL 58399 0 1
46293: IFFALSE 46334
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
46295: LD_VAR 0 1
46299: PPUSH
46300: LD_EXP 130
46304: PUSH
46305: LD_VAR 0 2
46309: ARRAY
46310: PUSH
46311: LD_INT 3
46313: ARRAY
46314: PPUSH
46315: LD_EXP 130
46319: PUSH
46320: LD_VAR 0 2
46324: ARRAY
46325: PUSH
46326: LD_INT 4
46328: ARRAY
46329: PPUSH
46330: CALL_OW 171
// end else
46334: GO 46375
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
46336: LD_VAR 0 1
46340: PPUSH
46341: LD_EXP 130
46345: PUSH
46346: LD_VAR 0 2
46350: ARRAY
46351: PUSH
46352: LD_INT 3
46354: ARRAY
46355: PPUSH
46356: LD_EXP 130
46360: PUSH
46361: LD_VAR 0 2
46365: ARRAY
46366: PUSH
46367: LD_INT 4
46369: ARRAY
46370: PPUSH
46371: CALL_OW 171
// end ; end ;
46375: LD_VAR 0 3
46379: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
46380: LD_INT 0
46382: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
46383: LD_VAR 0 1
46387: PUSH
46388: LD_INT 250
46390: EQUAL
46391: PUSH
46392: LD_VAR 0 2
46396: PPUSH
46397: CALL_OW 264
46401: PUSH
46402: LD_INT 81
46404: EQUAL
46405: AND
46406: IFFALSE 46427
// MinerPlaceMine ( unit , x , y ) ;
46408: LD_VAR 0 2
46412: PPUSH
46413: LD_VAR 0 4
46417: PPUSH
46418: LD_VAR 0 5
46422: PPUSH
46423: CALL 48812 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
46427: LD_VAR 0 1
46431: PUSH
46432: LD_INT 251
46434: EQUAL
46435: PUSH
46436: LD_VAR 0 2
46440: PPUSH
46441: CALL_OW 264
46445: PUSH
46446: LD_INT 81
46448: EQUAL
46449: AND
46450: IFFALSE 46471
// MinerDetonateMine ( unit , x , y ) ;
46452: LD_VAR 0 2
46456: PPUSH
46457: LD_VAR 0 4
46461: PPUSH
46462: LD_VAR 0 5
46466: PPUSH
46467: CALL 49087 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
46471: LD_VAR 0 1
46475: PUSH
46476: LD_INT 252
46478: EQUAL
46479: PUSH
46480: LD_VAR 0 2
46484: PPUSH
46485: CALL_OW 264
46489: PUSH
46490: LD_INT 81
46492: EQUAL
46493: AND
46494: IFFALSE 46515
// MinerCreateMinefield ( unit , x , y ) ;
46496: LD_VAR 0 2
46500: PPUSH
46501: LD_VAR 0 4
46505: PPUSH
46506: LD_VAR 0 5
46510: PPUSH
46511: CALL 49504 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
46515: LD_VAR 0 1
46519: PUSH
46520: LD_INT 253
46522: EQUAL
46523: PUSH
46524: LD_VAR 0 2
46528: PPUSH
46529: CALL_OW 257
46533: PUSH
46534: LD_INT 5
46536: EQUAL
46537: AND
46538: IFFALSE 46559
// ComBinocular ( unit , x , y ) ;
46540: LD_VAR 0 2
46544: PPUSH
46545: LD_VAR 0 4
46549: PPUSH
46550: LD_VAR 0 5
46554: PPUSH
46555: CALL 49873 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
46559: LD_VAR 0 1
46563: PUSH
46564: LD_INT 254
46566: EQUAL
46567: PUSH
46568: LD_VAR 0 2
46572: PPUSH
46573: CALL_OW 264
46577: PUSH
46578: LD_INT 99
46580: EQUAL
46581: AND
46582: PUSH
46583: LD_VAR 0 3
46587: PPUSH
46588: CALL_OW 263
46592: PUSH
46593: LD_INT 3
46595: EQUAL
46596: AND
46597: IFFALSE 46613
// HackDestroyVehicle ( unit , selectedUnit ) ;
46599: LD_VAR 0 2
46603: PPUSH
46604: LD_VAR 0 3
46608: PPUSH
46609: CALL 48176 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
46613: LD_VAR 0 1
46617: PUSH
46618: LD_INT 255
46620: EQUAL
46621: PUSH
46622: LD_VAR 0 2
46626: PPUSH
46627: CALL_OW 264
46631: PUSH
46632: LD_INT 14
46634: PUSH
46635: LD_INT 53
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: IN
46642: AND
46643: PUSH
46644: LD_VAR 0 4
46648: PPUSH
46649: LD_VAR 0 5
46653: PPUSH
46654: CALL_OW 488
46658: AND
46659: IFFALSE 46683
// CutTreeXYR ( unit , x , y , 12 ) ;
46661: LD_VAR 0 2
46665: PPUSH
46666: LD_VAR 0 4
46670: PPUSH
46671: LD_VAR 0 5
46675: PPUSH
46676: LD_INT 12
46678: PPUSH
46679: CALL 46746 0 4
// if cmd = 256 then
46683: LD_VAR 0 1
46687: PUSH
46688: LD_INT 256
46690: EQUAL
46691: IFFALSE 46712
// SetFactoryWaypoint ( unit , x , y ) ;
46693: LD_VAR 0 2
46697: PPUSH
46698: LD_VAR 0 4
46702: PPUSH
46703: LD_VAR 0 5
46707: PPUSH
46708: CALL 44693 0 3
// if cmd = 257 then
46712: LD_VAR 0 1
46716: PUSH
46717: LD_INT 257
46719: EQUAL
46720: IFFALSE 46741
// SetWarehouseGatheringPoint ( unit , x , y ) ;
46722: LD_VAR 0 2
46726: PPUSH
46727: LD_VAR 0 4
46731: PPUSH
46732: LD_VAR 0 5
46736: PPUSH
46737: CALL 45055 0 3
// end ;
46741: LD_VAR 0 6
46745: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
46746: LD_INT 0
46748: PPUSH
46749: PPUSH
46750: PPUSH
46751: PPUSH
46752: PPUSH
46753: PPUSH
46754: PPUSH
46755: PPUSH
46756: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
46757: LD_VAR 0 1
46761: NOT
46762: PUSH
46763: LD_VAR 0 2
46767: PPUSH
46768: LD_VAR 0 3
46772: PPUSH
46773: CALL_OW 488
46777: NOT
46778: OR
46779: PUSH
46780: LD_VAR 0 4
46784: NOT
46785: OR
46786: IFFALSE 46790
// exit ;
46788: GO 47130
// list := [ ] ;
46790: LD_ADDR_VAR 0 13
46794: PUSH
46795: EMPTY
46796: ST_TO_ADDR
// if x - r < 0 then
46797: LD_VAR 0 2
46801: PUSH
46802: LD_VAR 0 4
46806: MINUS
46807: PUSH
46808: LD_INT 0
46810: LESS
46811: IFFALSE 46823
// min_x := 0 else
46813: LD_ADDR_VAR 0 7
46817: PUSH
46818: LD_INT 0
46820: ST_TO_ADDR
46821: GO 46839
// min_x := x - r ;
46823: LD_ADDR_VAR 0 7
46827: PUSH
46828: LD_VAR 0 2
46832: PUSH
46833: LD_VAR 0 4
46837: MINUS
46838: ST_TO_ADDR
// if y - r < 0 then
46839: LD_VAR 0 3
46843: PUSH
46844: LD_VAR 0 4
46848: MINUS
46849: PUSH
46850: LD_INT 0
46852: LESS
46853: IFFALSE 46865
// min_y := 0 else
46855: LD_ADDR_VAR 0 8
46859: PUSH
46860: LD_INT 0
46862: ST_TO_ADDR
46863: GO 46881
// min_y := y - r ;
46865: LD_ADDR_VAR 0 8
46869: PUSH
46870: LD_VAR 0 3
46874: PUSH
46875: LD_VAR 0 4
46879: MINUS
46880: ST_TO_ADDR
// max_x := x + r ;
46881: LD_ADDR_VAR 0 9
46885: PUSH
46886: LD_VAR 0 2
46890: PUSH
46891: LD_VAR 0 4
46895: PLUS
46896: ST_TO_ADDR
// max_y := y + r ;
46897: LD_ADDR_VAR 0 10
46901: PUSH
46902: LD_VAR 0 3
46906: PUSH
46907: LD_VAR 0 4
46911: PLUS
46912: ST_TO_ADDR
// for _x = min_x to max_x do
46913: LD_ADDR_VAR 0 11
46917: PUSH
46918: DOUBLE
46919: LD_VAR 0 7
46923: DEC
46924: ST_TO_ADDR
46925: LD_VAR 0 9
46929: PUSH
46930: FOR_TO
46931: IFFALSE 47048
// for _y = min_y to max_y do
46933: LD_ADDR_VAR 0 12
46937: PUSH
46938: DOUBLE
46939: LD_VAR 0 8
46943: DEC
46944: ST_TO_ADDR
46945: LD_VAR 0 10
46949: PUSH
46950: FOR_TO
46951: IFFALSE 47044
// begin if not ValidHex ( _x , _y ) then
46953: LD_VAR 0 11
46957: PPUSH
46958: LD_VAR 0 12
46962: PPUSH
46963: CALL_OW 488
46967: NOT
46968: IFFALSE 46972
// continue ;
46970: GO 46950
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
46972: LD_VAR 0 11
46976: PPUSH
46977: LD_VAR 0 12
46981: PPUSH
46982: CALL_OW 351
46986: PUSH
46987: LD_VAR 0 11
46991: PPUSH
46992: LD_VAR 0 12
46996: PPUSH
46997: CALL_OW 554
47001: AND
47002: IFFALSE 47042
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
47004: LD_ADDR_VAR 0 13
47008: PUSH
47009: LD_VAR 0 13
47013: PPUSH
47014: LD_VAR 0 13
47018: PUSH
47019: LD_INT 1
47021: PLUS
47022: PPUSH
47023: LD_VAR 0 11
47027: PUSH
47028: LD_VAR 0 12
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PPUSH
47037: CALL_OW 2
47041: ST_TO_ADDR
// end ;
47042: GO 46950
47044: POP
47045: POP
47046: GO 46930
47048: POP
47049: POP
// if not list then
47050: LD_VAR 0 13
47054: NOT
47055: IFFALSE 47059
// exit ;
47057: GO 47130
// for i in list do
47059: LD_ADDR_VAR 0 6
47063: PUSH
47064: LD_VAR 0 13
47068: PUSH
47069: FOR_IN
47070: IFFALSE 47128
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
47072: LD_VAR 0 1
47076: PPUSH
47077: LD_STRING M
47079: PUSH
47080: LD_VAR 0 6
47084: PUSH
47085: LD_INT 1
47087: ARRAY
47088: PUSH
47089: LD_VAR 0 6
47093: PUSH
47094: LD_INT 2
47096: ARRAY
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: LD_INT 0
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: PUSH
47119: EMPTY
47120: LIST
47121: PPUSH
47122: CALL_OW 447
47126: GO 47069
47128: POP
47129: POP
// end ;
47130: LD_VAR 0 5
47134: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
47135: LD_EXP 133
47139: NOT
47140: IFFALSE 47190
47142: GO 47144
47144: DISABLE
// begin initHack := true ;
47145: LD_ADDR_EXP 133
47149: PUSH
47150: LD_INT 1
47152: ST_TO_ADDR
// hackTanks := [ ] ;
47153: LD_ADDR_EXP 134
47157: PUSH
47158: EMPTY
47159: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
47160: LD_ADDR_EXP 135
47164: PUSH
47165: EMPTY
47166: ST_TO_ADDR
// hackLimit := 3 ;
47167: LD_ADDR_EXP 136
47171: PUSH
47172: LD_INT 3
47174: ST_TO_ADDR
// hackDist := 12 ;
47175: LD_ADDR_EXP 137
47179: PUSH
47180: LD_INT 12
47182: ST_TO_ADDR
// hackCounter := [ ] ;
47183: LD_ADDR_EXP 138
47187: PUSH
47188: EMPTY
47189: ST_TO_ADDR
// end ;
47190: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
47191: LD_EXP 133
47195: PUSH
47196: LD_INT 34
47198: PUSH
47199: LD_INT 99
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PPUSH
47206: CALL_OW 69
47210: AND
47211: IFFALSE 47464
47213: GO 47215
47215: DISABLE
47216: LD_INT 0
47218: PPUSH
47219: PPUSH
// begin enable ;
47220: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
47221: LD_ADDR_VAR 0 1
47225: PUSH
47226: LD_INT 34
47228: PUSH
47229: LD_INT 99
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PPUSH
47236: CALL_OW 69
47240: PUSH
47241: FOR_IN
47242: IFFALSE 47462
// begin if not i in hackTanks then
47244: LD_VAR 0 1
47248: PUSH
47249: LD_EXP 134
47253: IN
47254: NOT
47255: IFFALSE 47338
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
47257: LD_ADDR_EXP 134
47261: PUSH
47262: LD_EXP 134
47266: PPUSH
47267: LD_EXP 134
47271: PUSH
47272: LD_INT 1
47274: PLUS
47275: PPUSH
47276: LD_VAR 0 1
47280: PPUSH
47281: CALL_OW 1
47285: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
47286: LD_ADDR_EXP 135
47290: PUSH
47291: LD_EXP 135
47295: PPUSH
47296: LD_EXP 135
47300: PUSH
47301: LD_INT 1
47303: PLUS
47304: PPUSH
47305: EMPTY
47306: PPUSH
47307: CALL_OW 1
47311: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
47312: LD_ADDR_EXP 138
47316: PUSH
47317: LD_EXP 138
47321: PPUSH
47322: LD_EXP 138
47326: PUSH
47327: LD_INT 1
47329: PLUS
47330: PPUSH
47331: EMPTY
47332: PPUSH
47333: CALL_OW 1
47337: ST_TO_ADDR
// end ; if not IsOk ( i ) then
47338: LD_VAR 0 1
47342: PPUSH
47343: CALL_OW 302
47347: NOT
47348: IFFALSE 47361
// begin HackUnlinkAll ( i ) ;
47350: LD_VAR 0 1
47354: PPUSH
47355: CALL 47467 0 1
// continue ;
47359: GO 47241
// end ; HackCheckCapturedStatus ( i ) ;
47361: LD_VAR 0 1
47365: PPUSH
47366: CALL 47910 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
47370: LD_ADDR_VAR 0 2
47374: PUSH
47375: LD_INT 81
47377: PUSH
47378: LD_VAR 0 1
47382: PPUSH
47383: CALL_OW 255
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 33
47394: PUSH
47395: LD_INT 3
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 91
47404: PUSH
47405: LD_VAR 0 1
47409: PUSH
47410: LD_EXP 137
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 50
47422: PUSH
47423: EMPTY
47424: LIST
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: PPUSH
47432: CALL_OW 69
47436: ST_TO_ADDR
// if not tmp then
47437: LD_VAR 0 2
47441: NOT
47442: IFFALSE 47446
// continue ;
47444: GO 47241
// HackLink ( i , tmp ) ;
47446: LD_VAR 0 1
47450: PPUSH
47451: LD_VAR 0 2
47455: PPUSH
47456: CALL 47603 0 2
// end ;
47460: GO 47241
47462: POP
47463: POP
// end ;
47464: PPOPN 2
47466: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
47467: LD_INT 0
47469: PPUSH
47470: PPUSH
47471: PPUSH
// if not hack in hackTanks then
47472: LD_VAR 0 1
47476: PUSH
47477: LD_EXP 134
47481: IN
47482: NOT
47483: IFFALSE 47487
// exit ;
47485: GO 47598
// index := GetElementIndex ( hackTanks , hack ) ;
47487: LD_ADDR_VAR 0 4
47491: PUSH
47492: LD_EXP 134
47496: PPUSH
47497: LD_VAR 0 1
47501: PPUSH
47502: CALL 55215 0 2
47506: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
47507: LD_EXP 135
47511: PUSH
47512: LD_VAR 0 4
47516: ARRAY
47517: IFFALSE 47598
// begin for i in hackTanksCaptured [ index ] do
47519: LD_ADDR_VAR 0 3
47523: PUSH
47524: LD_EXP 135
47528: PUSH
47529: LD_VAR 0 4
47533: ARRAY
47534: PUSH
47535: FOR_IN
47536: IFFALSE 47562
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
47538: LD_VAR 0 3
47542: PUSH
47543: LD_INT 1
47545: ARRAY
47546: PPUSH
47547: LD_VAR 0 3
47551: PUSH
47552: LD_INT 2
47554: ARRAY
47555: PPUSH
47556: CALL_OW 235
47560: GO 47535
47562: POP
47563: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
47564: LD_ADDR_EXP 135
47568: PUSH
47569: LD_EXP 135
47573: PPUSH
47574: LD_VAR 0 4
47578: PPUSH
47579: EMPTY
47580: PPUSH
47581: CALL_OW 1
47585: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
47586: LD_VAR 0 1
47590: PPUSH
47591: LD_INT 0
47593: PPUSH
47594: CALL_OW 505
// end ; end ;
47598: LD_VAR 0 2
47602: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
47603: LD_INT 0
47605: PPUSH
47606: PPUSH
47607: PPUSH
// if not hack in hackTanks or not vehicles then
47608: LD_VAR 0 1
47612: PUSH
47613: LD_EXP 134
47617: IN
47618: NOT
47619: PUSH
47620: LD_VAR 0 2
47624: NOT
47625: OR
47626: IFFALSE 47630
// exit ;
47628: GO 47905
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
47630: LD_ADDR_VAR 0 2
47634: PUSH
47635: LD_VAR 0 1
47639: PPUSH
47640: LD_VAR 0 2
47644: PPUSH
47645: LD_INT 1
47647: PPUSH
47648: LD_INT 1
47650: PPUSH
47651: CALL 55865 0 4
47655: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
47656: LD_ADDR_VAR 0 5
47660: PUSH
47661: LD_EXP 134
47665: PPUSH
47666: LD_VAR 0 1
47670: PPUSH
47671: CALL 55215 0 2
47675: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
47676: LD_EXP 135
47680: PUSH
47681: LD_VAR 0 5
47685: ARRAY
47686: PUSH
47687: LD_EXP 136
47691: LESS
47692: IFFALSE 47881
// begin for i := 1 to vehicles do
47694: LD_ADDR_VAR 0 4
47698: PUSH
47699: DOUBLE
47700: LD_INT 1
47702: DEC
47703: ST_TO_ADDR
47704: LD_VAR 0 2
47708: PUSH
47709: FOR_TO
47710: IFFALSE 47879
// begin if hackTanksCaptured [ index ] = hackLimit then
47712: LD_EXP 135
47716: PUSH
47717: LD_VAR 0 5
47721: ARRAY
47722: PUSH
47723: LD_EXP 136
47727: EQUAL
47728: IFFALSE 47732
// break ;
47730: GO 47879
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
47732: LD_ADDR_EXP 138
47736: PUSH
47737: LD_EXP 138
47741: PPUSH
47742: LD_VAR 0 5
47746: PPUSH
47747: LD_EXP 138
47751: PUSH
47752: LD_VAR 0 5
47756: ARRAY
47757: PUSH
47758: LD_INT 1
47760: PLUS
47761: PPUSH
47762: CALL_OW 1
47766: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
47767: LD_ADDR_EXP 135
47771: PUSH
47772: LD_EXP 135
47776: PPUSH
47777: LD_VAR 0 5
47781: PUSH
47782: LD_EXP 135
47786: PUSH
47787: LD_VAR 0 5
47791: ARRAY
47792: PUSH
47793: LD_INT 1
47795: PLUS
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PPUSH
47801: LD_VAR 0 2
47805: PUSH
47806: LD_VAR 0 4
47810: ARRAY
47811: PUSH
47812: LD_VAR 0 2
47816: PUSH
47817: LD_VAR 0 4
47821: ARRAY
47822: PPUSH
47823: CALL_OW 255
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PPUSH
47832: CALL 55430 0 3
47836: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
47837: LD_VAR 0 2
47841: PUSH
47842: LD_VAR 0 4
47846: ARRAY
47847: PPUSH
47848: LD_VAR 0 1
47852: PPUSH
47853: CALL_OW 255
47857: PPUSH
47858: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
47862: LD_VAR 0 2
47866: PUSH
47867: LD_VAR 0 4
47871: ARRAY
47872: PPUSH
47873: CALL_OW 141
// end ;
47877: GO 47709
47879: POP
47880: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
47881: LD_VAR 0 1
47885: PPUSH
47886: LD_EXP 135
47890: PUSH
47891: LD_VAR 0 5
47895: ARRAY
47896: PUSH
47897: LD_INT 0
47899: PLUS
47900: PPUSH
47901: CALL_OW 505
// end ;
47905: LD_VAR 0 3
47909: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
47910: LD_INT 0
47912: PPUSH
47913: PPUSH
47914: PPUSH
47915: PPUSH
// if not hack in hackTanks then
47916: LD_VAR 0 1
47920: PUSH
47921: LD_EXP 134
47925: IN
47926: NOT
47927: IFFALSE 47931
// exit ;
47929: GO 48171
// index := GetElementIndex ( hackTanks , hack ) ;
47931: LD_ADDR_VAR 0 4
47935: PUSH
47936: LD_EXP 134
47940: PPUSH
47941: LD_VAR 0 1
47945: PPUSH
47946: CALL 55215 0 2
47950: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
47951: LD_ADDR_VAR 0 3
47955: PUSH
47956: DOUBLE
47957: LD_EXP 135
47961: PUSH
47962: LD_VAR 0 4
47966: ARRAY
47967: INC
47968: ST_TO_ADDR
47969: LD_INT 1
47971: PUSH
47972: FOR_DOWNTO
47973: IFFALSE 48145
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
47975: LD_ADDR_VAR 0 5
47979: PUSH
47980: LD_EXP 135
47984: PUSH
47985: LD_VAR 0 4
47989: ARRAY
47990: PUSH
47991: LD_VAR 0 3
47995: ARRAY
47996: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
47997: LD_VAR 0 5
48001: PUSH
48002: LD_INT 1
48004: ARRAY
48005: PPUSH
48006: CALL_OW 302
48010: NOT
48011: PUSH
48012: LD_VAR 0 5
48016: PUSH
48017: LD_INT 1
48019: ARRAY
48020: PPUSH
48021: CALL_OW 255
48025: PUSH
48026: LD_VAR 0 1
48030: PPUSH
48031: CALL_OW 255
48035: NONEQUAL
48036: OR
48037: IFFALSE 48143
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
48039: LD_VAR 0 5
48043: PUSH
48044: LD_INT 1
48046: ARRAY
48047: PPUSH
48048: CALL_OW 305
48052: PUSH
48053: LD_VAR 0 5
48057: PUSH
48058: LD_INT 1
48060: ARRAY
48061: PPUSH
48062: CALL_OW 255
48066: PUSH
48067: LD_VAR 0 1
48071: PPUSH
48072: CALL_OW 255
48076: EQUAL
48077: AND
48078: IFFALSE 48102
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
48080: LD_VAR 0 5
48084: PUSH
48085: LD_INT 1
48087: ARRAY
48088: PPUSH
48089: LD_VAR 0 5
48093: PUSH
48094: LD_INT 2
48096: ARRAY
48097: PPUSH
48098: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
48102: LD_ADDR_EXP 135
48106: PUSH
48107: LD_EXP 135
48111: PPUSH
48112: LD_VAR 0 4
48116: PPUSH
48117: LD_EXP 135
48121: PUSH
48122: LD_VAR 0 4
48126: ARRAY
48127: PPUSH
48128: LD_VAR 0 3
48132: PPUSH
48133: CALL_OW 3
48137: PPUSH
48138: CALL_OW 1
48142: ST_TO_ADDR
// end ; end ;
48143: GO 47972
48145: POP
48146: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
48147: LD_VAR 0 1
48151: PPUSH
48152: LD_EXP 135
48156: PUSH
48157: LD_VAR 0 4
48161: ARRAY
48162: PUSH
48163: LD_INT 0
48165: PLUS
48166: PPUSH
48167: CALL_OW 505
// end ;
48171: LD_VAR 0 2
48175: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
48176: LD_INT 0
48178: PPUSH
48179: PPUSH
48180: PPUSH
48181: PPUSH
// if not hack in hackTanks then
48182: LD_VAR 0 1
48186: PUSH
48187: LD_EXP 134
48191: IN
48192: NOT
48193: IFFALSE 48197
// exit ;
48195: GO 48282
// index := GetElementIndex ( hackTanks , hack ) ;
48197: LD_ADDR_VAR 0 5
48201: PUSH
48202: LD_EXP 134
48206: PPUSH
48207: LD_VAR 0 1
48211: PPUSH
48212: CALL 55215 0 2
48216: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
48217: LD_ADDR_VAR 0 4
48221: PUSH
48222: DOUBLE
48223: LD_INT 1
48225: DEC
48226: ST_TO_ADDR
48227: LD_EXP 135
48231: PUSH
48232: LD_VAR 0 5
48236: ARRAY
48237: PUSH
48238: FOR_TO
48239: IFFALSE 48280
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
48241: LD_EXP 135
48245: PUSH
48246: LD_VAR 0 5
48250: ARRAY
48251: PUSH
48252: LD_VAR 0 4
48256: ARRAY
48257: PUSH
48258: LD_INT 1
48260: ARRAY
48261: PUSH
48262: LD_VAR 0 2
48266: EQUAL
48267: IFFALSE 48278
// KillUnit ( vehicle ) ;
48269: LD_VAR 0 2
48273: PPUSH
48274: CALL_OW 66
48278: GO 48238
48280: POP
48281: POP
// end ;
48282: LD_VAR 0 3
48286: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
48287: LD_EXP 139
48291: NOT
48292: IFFALSE 48327
48294: GO 48296
48296: DISABLE
// begin initMiner := true ;
48297: LD_ADDR_EXP 139
48301: PUSH
48302: LD_INT 1
48304: ST_TO_ADDR
// minersList := [ ] ;
48305: LD_ADDR_EXP 140
48309: PUSH
48310: EMPTY
48311: ST_TO_ADDR
// minerMinesList := [ ] ;
48312: LD_ADDR_EXP 141
48316: PUSH
48317: EMPTY
48318: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
48319: LD_ADDR_EXP 142
48323: PUSH
48324: LD_INT 5
48326: ST_TO_ADDR
// end ;
48327: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
48328: LD_EXP 139
48332: PUSH
48333: LD_INT 34
48335: PUSH
48336: LD_INT 81
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PPUSH
48343: CALL_OW 69
48347: AND
48348: IFFALSE 48809
48350: GO 48352
48352: DISABLE
48353: LD_INT 0
48355: PPUSH
48356: PPUSH
48357: PPUSH
48358: PPUSH
// begin enable ;
48359: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
48360: LD_ADDR_VAR 0 1
48364: PUSH
48365: LD_INT 34
48367: PUSH
48368: LD_INT 81
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PPUSH
48375: CALL_OW 69
48379: PUSH
48380: FOR_IN
48381: IFFALSE 48453
// begin if not i in minersList then
48383: LD_VAR 0 1
48387: PUSH
48388: LD_EXP 140
48392: IN
48393: NOT
48394: IFFALSE 48451
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
48396: LD_ADDR_EXP 140
48400: PUSH
48401: LD_EXP 140
48405: PPUSH
48406: LD_EXP 140
48410: PUSH
48411: LD_INT 1
48413: PLUS
48414: PPUSH
48415: LD_VAR 0 1
48419: PPUSH
48420: CALL_OW 1
48424: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
48425: LD_ADDR_EXP 141
48429: PUSH
48430: LD_EXP 141
48434: PPUSH
48435: LD_EXP 141
48439: PUSH
48440: LD_INT 1
48442: PLUS
48443: PPUSH
48444: EMPTY
48445: PPUSH
48446: CALL_OW 1
48450: ST_TO_ADDR
// end end ;
48451: GO 48380
48453: POP
48454: POP
// for i := minerMinesList downto 1 do
48455: LD_ADDR_VAR 0 1
48459: PUSH
48460: DOUBLE
48461: LD_EXP 141
48465: INC
48466: ST_TO_ADDR
48467: LD_INT 1
48469: PUSH
48470: FOR_DOWNTO
48471: IFFALSE 48807
// begin if IsLive ( minersList [ i ] ) then
48473: LD_EXP 140
48477: PUSH
48478: LD_VAR 0 1
48482: ARRAY
48483: PPUSH
48484: CALL_OW 300
48488: IFFALSE 48516
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
48490: LD_EXP 140
48494: PUSH
48495: LD_VAR 0 1
48499: ARRAY
48500: PPUSH
48501: LD_EXP 141
48505: PUSH
48506: LD_VAR 0 1
48510: ARRAY
48511: PPUSH
48512: CALL_OW 505
// if not minerMinesList [ i ] then
48516: LD_EXP 141
48520: PUSH
48521: LD_VAR 0 1
48525: ARRAY
48526: NOT
48527: IFFALSE 48531
// continue ;
48529: GO 48470
// for j := minerMinesList [ i ] downto 1 do
48531: LD_ADDR_VAR 0 2
48535: PUSH
48536: DOUBLE
48537: LD_EXP 141
48541: PUSH
48542: LD_VAR 0 1
48546: ARRAY
48547: INC
48548: ST_TO_ADDR
48549: LD_INT 1
48551: PUSH
48552: FOR_DOWNTO
48553: IFFALSE 48803
// begin side := GetSide ( minersList [ i ] ) ;
48555: LD_ADDR_VAR 0 3
48559: PUSH
48560: LD_EXP 140
48564: PUSH
48565: LD_VAR 0 1
48569: ARRAY
48570: PPUSH
48571: CALL_OW 255
48575: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
48576: LD_ADDR_VAR 0 4
48580: PUSH
48581: LD_EXP 141
48585: PUSH
48586: LD_VAR 0 1
48590: ARRAY
48591: PUSH
48592: LD_VAR 0 2
48596: ARRAY
48597: PUSH
48598: LD_INT 1
48600: ARRAY
48601: PPUSH
48602: LD_EXP 141
48606: PUSH
48607: LD_VAR 0 1
48611: ARRAY
48612: PUSH
48613: LD_VAR 0 2
48617: ARRAY
48618: PUSH
48619: LD_INT 2
48621: ARRAY
48622: PPUSH
48623: CALL_OW 428
48627: ST_TO_ADDR
// if not tmp then
48628: LD_VAR 0 4
48632: NOT
48633: IFFALSE 48637
// continue ;
48635: GO 48552
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
48637: LD_VAR 0 4
48641: PUSH
48642: LD_INT 81
48644: PUSH
48645: LD_VAR 0 3
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PPUSH
48654: CALL_OW 69
48658: IN
48659: PUSH
48660: LD_EXP 141
48664: PUSH
48665: LD_VAR 0 1
48669: ARRAY
48670: PUSH
48671: LD_VAR 0 2
48675: ARRAY
48676: PUSH
48677: LD_INT 1
48679: ARRAY
48680: PPUSH
48681: LD_EXP 141
48685: PUSH
48686: LD_VAR 0 1
48690: ARRAY
48691: PUSH
48692: LD_VAR 0 2
48696: ARRAY
48697: PUSH
48698: LD_INT 2
48700: ARRAY
48701: PPUSH
48702: CALL_OW 458
48706: AND
48707: IFFALSE 48801
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
48709: LD_EXP 141
48713: PUSH
48714: LD_VAR 0 1
48718: ARRAY
48719: PUSH
48720: LD_VAR 0 2
48724: ARRAY
48725: PUSH
48726: LD_INT 1
48728: ARRAY
48729: PPUSH
48730: LD_EXP 141
48734: PUSH
48735: LD_VAR 0 1
48739: ARRAY
48740: PUSH
48741: LD_VAR 0 2
48745: ARRAY
48746: PUSH
48747: LD_INT 2
48749: ARRAY
48750: PPUSH
48751: LD_VAR 0 3
48755: PPUSH
48756: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
48760: LD_ADDR_EXP 141
48764: PUSH
48765: LD_EXP 141
48769: PPUSH
48770: LD_VAR 0 1
48774: PPUSH
48775: LD_EXP 141
48779: PUSH
48780: LD_VAR 0 1
48784: ARRAY
48785: PPUSH
48786: LD_VAR 0 2
48790: PPUSH
48791: CALL_OW 3
48795: PPUSH
48796: CALL_OW 1
48800: ST_TO_ADDR
// end ; end ;
48801: GO 48552
48803: POP
48804: POP
// end ;
48805: GO 48470
48807: POP
48808: POP
// end ;
48809: PPOPN 4
48811: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
48812: LD_INT 0
48814: PPUSH
48815: PPUSH
// result := false ;
48816: LD_ADDR_VAR 0 4
48820: PUSH
48821: LD_INT 0
48823: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
48824: LD_VAR 0 1
48828: PPUSH
48829: CALL_OW 264
48833: PUSH
48834: LD_INT 81
48836: EQUAL
48837: NOT
48838: IFFALSE 48842
// exit ;
48840: GO 49082
// index := GetElementIndex ( minersList , unit ) ;
48842: LD_ADDR_VAR 0 5
48846: PUSH
48847: LD_EXP 140
48851: PPUSH
48852: LD_VAR 0 1
48856: PPUSH
48857: CALL 55215 0 2
48861: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
48862: LD_EXP 141
48866: PUSH
48867: LD_VAR 0 5
48871: ARRAY
48872: PUSH
48873: LD_EXP 142
48877: GREATEREQUAL
48878: IFFALSE 48882
// exit ;
48880: GO 49082
// ComMoveXY ( unit , x , y ) ;
48882: LD_VAR 0 1
48886: PPUSH
48887: LD_VAR 0 2
48891: PPUSH
48892: LD_VAR 0 3
48896: PPUSH
48897: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
48901: LD_INT 35
48903: PPUSH
48904: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
48908: LD_VAR 0 1
48912: PPUSH
48913: LD_VAR 0 2
48917: PPUSH
48918: LD_VAR 0 3
48922: PPUSH
48923: CALL 86570 0 3
48927: NOT
48928: PUSH
48929: LD_VAR 0 1
48933: PPUSH
48934: CALL_OW 314
48938: AND
48939: IFFALSE 48943
// exit ;
48941: GO 49082
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
48943: LD_VAR 0 2
48947: PPUSH
48948: LD_VAR 0 3
48952: PPUSH
48953: CALL_OW 428
48957: PUSH
48958: LD_VAR 0 1
48962: EQUAL
48963: PUSH
48964: LD_VAR 0 1
48968: PPUSH
48969: CALL_OW 314
48973: NOT
48974: AND
48975: IFFALSE 48901
// PlaySoundXY ( x , y , PlantMine ) ;
48977: LD_VAR 0 2
48981: PPUSH
48982: LD_VAR 0 3
48986: PPUSH
48987: LD_STRING PlantMine
48989: PPUSH
48990: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
48994: LD_VAR 0 2
48998: PPUSH
48999: LD_VAR 0 3
49003: PPUSH
49004: LD_VAR 0 1
49008: PPUSH
49009: CALL_OW 255
49013: PPUSH
49014: LD_INT 0
49016: PPUSH
49017: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
49021: LD_ADDR_EXP 141
49025: PUSH
49026: LD_EXP 141
49030: PPUSH
49031: LD_VAR 0 5
49035: PUSH
49036: LD_EXP 141
49040: PUSH
49041: LD_VAR 0 5
49045: ARRAY
49046: PUSH
49047: LD_INT 1
49049: PLUS
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PPUSH
49055: LD_VAR 0 2
49059: PUSH
49060: LD_VAR 0 3
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PPUSH
49069: CALL 55430 0 3
49073: ST_TO_ADDR
// result := true ;
49074: LD_ADDR_VAR 0 4
49078: PUSH
49079: LD_INT 1
49081: ST_TO_ADDR
// end ;
49082: LD_VAR 0 4
49086: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
49087: LD_INT 0
49089: PPUSH
49090: PPUSH
49091: PPUSH
// if not unit in minersList then
49092: LD_VAR 0 1
49096: PUSH
49097: LD_EXP 140
49101: IN
49102: NOT
49103: IFFALSE 49107
// exit ;
49105: GO 49499
// index := GetElementIndex ( minersList , unit ) ;
49107: LD_ADDR_VAR 0 6
49111: PUSH
49112: LD_EXP 140
49116: PPUSH
49117: LD_VAR 0 1
49121: PPUSH
49122: CALL 55215 0 2
49126: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
49127: LD_ADDR_VAR 0 5
49131: PUSH
49132: DOUBLE
49133: LD_EXP 141
49137: PUSH
49138: LD_VAR 0 6
49142: ARRAY
49143: INC
49144: ST_TO_ADDR
49145: LD_INT 1
49147: PUSH
49148: FOR_DOWNTO
49149: IFFALSE 49310
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
49151: LD_EXP 141
49155: PUSH
49156: LD_VAR 0 6
49160: ARRAY
49161: PUSH
49162: LD_VAR 0 5
49166: ARRAY
49167: PUSH
49168: LD_INT 1
49170: ARRAY
49171: PUSH
49172: LD_VAR 0 2
49176: EQUAL
49177: PUSH
49178: LD_EXP 141
49182: PUSH
49183: LD_VAR 0 6
49187: ARRAY
49188: PUSH
49189: LD_VAR 0 5
49193: ARRAY
49194: PUSH
49195: LD_INT 2
49197: ARRAY
49198: PUSH
49199: LD_VAR 0 3
49203: EQUAL
49204: AND
49205: IFFALSE 49308
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
49207: LD_EXP 141
49211: PUSH
49212: LD_VAR 0 6
49216: ARRAY
49217: PUSH
49218: LD_VAR 0 5
49222: ARRAY
49223: PUSH
49224: LD_INT 1
49226: ARRAY
49227: PPUSH
49228: LD_EXP 141
49232: PUSH
49233: LD_VAR 0 6
49237: ARRAY
49238: PUSH
49239: LD_VAR 0 5
49243: ARRAY
49244: PUSH
49245: LD_INT 2
49247: ARRAY
49248: PPUSH
49249: LD_VAR 0 1
49253: PPUSH
49254: CALL_OW 255
49258: PPUSH
49259: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
49263: LD_ADDR_EXP 141
49267: PUSH
49268: LD_EXP 141
49272: PPUSH
49273: LD_VAR 0 6
49277: PPUSH
49278: LD_EXP 141
49282: PUSH
49283: LD_VAR 0 6
49287: ARRAY
49288: PPUSH
49289: LD_VAR 0 5
49293: PPUSH
49294: CALL_OW 3
49298: PPUSH
49299: CALL_OW 1
49303: ST_TO_ADDR
// exit ;
49304: POP
49305: POP
49306: GO 49499
// end ; end ;
49308: GO 49148
49310: POP
49311: POP
// for i := minerMinesList [ index ] downto 1 do
49312: LD_ADDR_VAR 0 5
49316: PUSH
49317: DOUBLE
49318: LD_EXP 141
49322: PUSH
49323: LD_VAR 0 6
49327: ARRAY
49328: INC
49329: ST_TO_ADDR
49330: LD_INT 1
49332: PUSH
49333: FOR_DOWNTO
49334: IFFALSE 49497
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
49336: LD_EXP 141
49340: PUSH
49341: LD_VAR 0 6
49345: ARRAY
49346: PUSH
49347: LD_VAR 0 5
49351: ARRAY
49352: PUSH
49353: LD_INT 1
49355: ARRAY
49356: PPUSH
49357: LD_EXP 141
49361: PUSH
49362: LD_VAR 0 6
49366: ARRAY
49367: PUSH
49368: LD_VAR 0 5
49372: ARRAY
49373: PUSH
49374: LD_INT 2
49376: ARRAY
49377: PPUSH
49378: LD_VAR 0 2
49382: PPUSH
49383: LD_VAR 0 3
49387: PPUSH
49388: CALL_OW 298
49392: PUSH
49393: LD_INT 6
49395: LESS
49396: IFFALSE 49495
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
49398: LD_EXP 141
49402: PUSH
49403: LD_VAR 0 6
49407: ARRAY
49408: PUSH
49409: LD_VAR 0 5
49413: ARRAY
49414: PUSH
49415: LD_INT 1
49417: ARRAY
49418: PPUSH
49419: LD_EXP 141
49423: PUSH
49424: LD_VAR 0 6
49428: ARRAY
49429: PUSH
49430: LD_VAR 0 5
49434: ARRAY
49435: PUSH
49436: LD_INT 2
49438: ARRAY
49439: PPUSH
49440: LD_VAR 0 1
49444: PPUSH
49445: CALL_OW 255
49449: PPUSH
49450: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
49454: LD_ADDR_EXP 141
49458: PUSH
49459: LD_EXP 141
49463: PPUSH
49464: LD_VAR 0 6
49468: PPUSH
49469: LD_EXP 141
49473: PUSH
49474: LD_VAR 0 6
49478: ARRAY
49479: PPUSH
49480: LD_VAR 0 5
49484: PPUSH
49485: CALL_OW 3
49489: PPUSH
49490: CALL_OW 1
49494: ST_TO_ADDR
// end ; end ;
49495: GO 49333
49497: POP
49498: POP
// end ;
49499: LD_VAR 0 4
49503: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
49504: LD_INT 0
49506: PPUSH
49507: PPUSH
49508: PPUSH
49509: PPUSH
49510: PPUSH
49511: PPUSH
49512: PPUSH
49513: PPUSH
49514: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
49515: LD_VAR 0 1
49519: PPUSH
49520: CALL_OW 264
49524: PUSH
49525: LD_INT 81
49527: EQUAL
49528: NOT
49529: PUSH
49530: LD_VAR 0 1
49534: PUSH
49535: LD_EXP 140
49539: IN
49540: NOT
49541: OR
49542: IFFALSE 49546
// exit ;
49544: GO 49868
// index := GetElementIndex ( minersList , unit ) ;
49546: LD_ADDR_VAR 0 6
49550: PUSH
49551: LD_EXP 140
49555: PPUSH
49556: LD_VAR 0 1
49560: PPUSH
49561: CALL 55215 0 2
49565: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
49566: LD_ADDR_VAR 0 8
49570: PUSH
49571: LD_EXP 142
49575: PUSH
49576: LD_EXP 141
49580: PUSH
49581: LD_VAR 0 6
49585: ARRAY
49586: MINUS
49587: ST_TO_ADDR
// if not minesFreeAmount then
49588: LD_VAR 0 8
49592: NOT
49593: IFFALSE 49597
// exit ;
49595: GO 49868
// tmp := [ ] ;
49597: LD_ADDR_VAR 0 7
49601: PUSH
49602: EMPTY
49603: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
49604: LD_ADDR_VAR 0 5
49608: PUSH
49609: DOUBLE
49610: LD_INT 1
49612: DEC
49613: ST_TO_ADDR
49614: LD_VAR 0 8
49618: PUSH
49619: FOR_TO
49620: IFFALSE 49815
// begin _d := rand ( 0 , 5 ) ;
49622: LD_ADDR_VAR 0 11
49626: PUSH
49627: LD_INT 0
49629: PPUSH
49630: LD_INT 5
49632: PPUSH
49633: CALL_OW 12
49637: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
49638: LD_ADDR_VAR 0 12
49642: PUSH
49643: LD_INT 2
49645: PPUSH
49646: LD_INT 6
49648: PPUSH
49649: CALL_OW 12
49653: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
49654: LD_ADDR_VAR 0 9
49658: PUSH
49659: LD_VAR 0 2
49663: PPUSH
49664: LD_VAR 0 11
49668: PPUSH
49669: LD_VAR 0 12
49673: PPUSH
49674: CALL_OW 272
49678: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
49679: LD_ADDR_VAR 0 10
49683: PUSH
49684: LD_VAR 0 3
49688: PPUSH
49689: LD_VAR 0 11
49693: PPUSH
49694: LD_VAR 0 12
49698: PPUSH
49699: CALL_OW 273
49703: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
49704: LD_VAR 0 9
49708: PPUSH
49709: LD_VAR 0 10
49713: PPUSH
49714: CALL_OW 488
49718: PUSH
49719: LD_VAR 0 9
49723: PUSH
49724: LD_VAR 0 10
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_VAR 0 7
49737: IN
49738: NOT
49739: AND
49740: PUSH
49741: LD_VAR 0 9
49745: PPUSH
49746: LD_VAR 0 10
49750: PPUSH
49751: CALL_OW 458
49755: NOT
49756: AND
49757: IFFALSE 49799
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
49759: LD_ADDR_VAR 0 7
49763: PUSH
49764: LD_VAR 0 7
49768: PPUSH
49769: LD_VAR 0 7
49773: PUSH
49774: LD_INT 1
49776: PLUS
49777: PPUSH
49778: LD_VAR 0 9
49782: PUSH
49783: LD_VAR 0 10
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PPUSH
49792: CALL_OW 1
49796: ST_TO_ADDR
49797: GO 49813
// i := i - 1 ;
49799: LD_ADDR_VAR 0 5
49803: PUSH
49804: LD_VAR 0 5
49808: PUSH
49809: LD_INT 1
49811: MINUS
49812: ST_TO_ADDR
// end ;
49813: GO 49619
49815: POP
49816: POP
// for i in tmp do
49817: LD_ADDR_VAR 0 5
49821: PUSH
49822: LD_VAR 0 7
49826: PUSH
49827: FOR_IN
49828: IFFALSE 49866
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
49830: LD_VAR 0 1
49834: PPUSH
49835: LD_VAR 0 5
49839: PUSH
49840: LD_INT 1
49842: ARRAY
49843: PPUSH
49844: LD_VAR 0 5
49848: PUSH
49849: LD_INT 2
49851: ARRAY
49852: PPUSH
49853: CALL 48812 0 3
49857: NOT
49858: IFFALSE 49864
// exit ;
49860: POP
49861: POP
49862: GO 49868
49864: GO 49827
49866: POP
49867: POP
// end ;
49868: LD_VAR 0 4
49872: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
49873: LD_INT 0
49875: PPUSH
49876: PPUSH
49877: PPUSH
49878: PPUSH
49879: PPUSH
49880: PPUSH
49881: PPUSH
// if not GetClass ( unit ) = class_sniper then
49882: LD_VAR 0 1
49886: PPUSH
49887: CALL_OW 257
49891: PUSH
49892: LD_INT 5
49894: EQUAL
49895: NOT
49896: IFFALSE 49900
// exit ;
49898: GO 50288
// dist := 8 ;
49900: LD_ADDR_VAR 0 5
49904: PUSH
49905: LD_INT 8
49907: ST_TO_ADDR
// viewRange := 12 ;
49908: LD_ADDR_VAR 0 7
49912: PUSH
49913: LD_INT 12
49915: ST_TO_ADDR
// side := GetSide ( unit ) ;
49916: LD_ADDR_VAR 0 6
49920: PUSH
49921: LD_VAR 0 1
49925: PPUSH
49926: CALL_OW 255
49930: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
49931: LD_INT 61
49933: PPUSH
49934: LD_VAR 0 6
49938: PPUSH
49939: CALL_OW 321
49943: PUSH
49944: LD_INT 2
49946: EQUAL
49947: IFFALSE 49957
// viewRange := 16 ;
49949: LD_ADDR_VAR 0 7
49953: PUSH
49954: LD_INT 16
49956: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
49957: LD_VAR 0 1
49961: PPUSH
49962: LD_VAR 0 2
49966: PPUSH
49967: LD_VAR 0 3
49971: PPUSH
49972: CALL_OW 297
49976: PUSH
49977: LD_VAR 0 5
49981: GREATER
49982: IFFALSE 50061
// begin ComMoveXY ( unit , x , y ) ;
49984: LD_VAR 0 1
49988: PPUSH
49989: LD_VAR 0 2
49993: PPUSH
49994: LD_VAR 0 3
49998: PPUSH
49999: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
50003: LD_INT 35
50005: PPUSH
50006: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
50010: LD_VAR 0 1
50014: PPUSH
50015: LD_VAR 0 2
50019: PPUSH
50020: LD_VAR 0 3
50024: PPUSH
50025: CALL 86570 0 3
50029: NOT
50030: IFFALSE 50034
// exit ;
50032: GO 50288
// until GetDistUnitXY ( unit , x , y ) < dist ;
50034: LD_VAR 0 1
50038: PPUSH
50039: LD_VAR 0 2
50043: PPUSH
50044: LD_VAR 0 3
50048: PPUSH
50049: CALL_OW 297
50053: PUSH
50054: LD_VAR 0 5
50058: LESS
50059: IFFALSE 50003
// end ; ComTurnXY ( unit , x , y ) ;
50061: LD_VAR 0 1
50065: PPUSH
50066: LD_VAR 0 2
50070: PPUSH
50071: LD_VAR 0 3
50075: PPUSH
50076: CALL_OW 118
// wait ( 5 ) ;
50080: LD_INT 5
50082: PPUSH
50083: CALL_OW 67
// _d := GetDir ( unit ) ;
50087: LD_ADDR_VAR 0 10
50091: PUSH
50092: LD_VAR 0 1
50096: PPUSH
50097: CALL_OW 254
50101: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
50102: LD_ADDR_VAR 0 8
50106: PUSH
50107: LD_VAR 0 1
50111: PPUSH
50112: CALL_OW 250
50116: PPUSH
50117: LD_VAR 0 10
50121: PPUSH
50122: LD_VAR 0 5
50126: PPUSH
50127: CALL_OW 272
50131: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
50132: LD_ADDR_VAR 0 9
50136: PUSH
50137: LD_VAR 0 1
50141: PPUSH
50142: CALL_OW 251
50146: PPUSH
50147: LD_VAR 0 10
50151: PPUSH
50152: LD_VAR 0 5
50156: PPUSH
50157: CALL_OW 273
50161: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
50162: LD_VAR 0 8
50166: PPUSH
50167: LD_VAR 0 9
50171: PPUSH
50172: CALL_OW 488
50176: NOT
50177: IFFALSE 50181
// exit ;
50179: GO 50288
// ComAnimCustom ( unit , 1 ) ;
50181: LD_VAR 0 1
50185: PPUSH
50186: LD_INT 1
50188: PPUSH
50189: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
50193: LD_VAR 0 8
50197: PPUSH
50198: LD_VAR 0 9
50202: PPUSH
50203: LD_VAR 0 6
50207: PPUSH
50208: LD_VAR 0 7
50212: PPUSH
50213: CALL_OW 330
// repeat wait ( 1 ) ;
50217: LD_INT 1
50219: PPUSH
50220: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
50224: LD_VAR 0 1
50228: PPUSH
50229: CALL_OW 316
50233: PUSH
50234: LD_VAR 0 1
50238: PPUSH
50239: CALL_OW 314
50243: OR
50244: PUSH
50245: LD_VAR 0 1
50249: PPUSH
50250: CALL_OW 302
50254: NOT
50255: OR
50256: PUSH
50257: LD_VAR 0 1
50261: PPUSH
50262: CALL_OW 301
50266: OR
50267: IFFALSE 50217
// RemoveSeeing ( _x , _y , side ) ;
50269: LD_VAR 0 8
50273: PPUSH
50274: LD_VAR 0 9
50278: PPUSH
50279: LD_VAR 0 6
50283: PPUSH
50284: CALL_OW 331
// end ; end_of_file
50288: LD_VAR 0 4
50292: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
50293: LD_INT 0
50295: PPUSH
50296: PPUSH
// if exist_mode then
50297: LD_VAR 0 2
50301: IFFALSE 50326
// unit := CreateCharacter ( prefix & ident ) else
50303: LD_ADDR_VAR 0 5
50307: PUSH
50308: LD_VAR 0 3
50312: PUSH
50313: LD_VAR 0 1
50317: STR
50318: PPUSH
50319: CALL_OW 34
50323: ST_TO_ADDR
50324: GO 50341
// unit := NewCharacter ( ident ) ;
50326: LD_ADDR_VAR 0 5
50330: PUSH
50331: LD_VAR 0 1
50335: PPUSH
50336: CALL_OW 25
50340: ST_TO_ADDR
// result := unit ;
50341: LD_ADDR_VAR 0 4
50345: PUSH
50346: LD_VAR 0 5
50350: ST_TO_ADDR
// end ;
50351: LD_VAR 0 4
50355: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
50356: LD_INT 0
50358: PPUSH
50359: PPUSH
// if not side or not nation then
50360: LD_VAR 0 1
50364: NOT
50365: PUSH
50366: LD_VAR 0 2
50370: NOT
50371: OR
50372: IFFALSE 50376
// exit ;
50374: GO 51144
// case nation of nation_american :
50376: LD_VAR 0 2
50380: PUSH
50381: LD_INT 1
50383: DOUBLE
50384: EQUAL
50385: IFTRUE 50389
50387: GO 50603
50389: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
50390: LD_ADDR_VAR 0 4
50394: PUSH
50395: LD_INT 35
50397: PUSH
50398: LD_INT 45
50400: PUSH
50401: LD_INT 46
50403: PUSH
50404: LD_INT 47
50406: PUSH
50407: LD_INT 82
50409: PUSH
50410: LD_INT 83
50412: PUSH
50413: LD_INT 84
50415: PUSH
50416: LD_INT 85
50418: PUSH
50419: LD_INT 86
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: LD_INT 2
50427: PUSH
50428: LD_INT 6
50430: PUSH
50431: LD_INT 15
50433: PUSH
50434: LD_INT 16
50436: PUSH
50437: LD_INT 7
50439: PUSH
50440: LD_INT 12
50442: PUSH
50443: LD_INT 13
50445: PUSH
50446: LD_INT 10
50448: PUSH
50449: LD_INT 14
50451: PUSH
50452: LD_INT 20
50454: PUSH
50455: LD_INT 21
50457: PUSH
50458: LD_INT 22
50460: PUSH
50461: LD_INT 25
50463: PUSH
50464: LD_INT 32
50466: PUSH
50467: LD_INT 27
50469: PUSH
50470: LD_INT 36
50472: PUSH
50473: LD_INT 69
50475: PUSH
50476: LD_INT 39
50478: PUSH
50479: LD_INT 34
50481: PUSH
50482: LD_INT 40
50484: PUSH
50485: LD_INT 48
50487: PUSH
50488: LD_INT 49
50490: PUSH
50491: LD_INT 50
50493: PUSH
50494: LD_INT 51
50496: PUSH
50497: LD_INT 52
50499: PUSH
50500: LD_INT 53
50502: PUSH
50503: LD_INT 54
50505: PUSH
50506: LD_INT 55
50508: PUSH
50509: LD_INT 56
50511: PUSH
50512: LD_INT 57
50514: PUSH
50515: LD_INT 58
50517: PUSH
50518: LD_INT 59
50520: PUSH
50521: LD_INT 60
50523: PUSH
50524: LD_INT 61
50526: PUSH
50527: LD_INT 62
50529: PUSH
50530: LD_INT 80
50532: PUSH
50533: LD_INT 82
50535: PUSH
50536: LD_INT 83
50538: PUSH
50539: LD_INT 84
50541: PUSH
50542: LD_INT 85
50544: PUSH
50545: LD_INT 86
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: ST_TO_ADDR
50601: GO 51068
50603: LD_INT 2
50605: DOUBLE
50606: EQUAL
50607: IFTRUE 50611
50609: GO 50837
50611: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
50612: LD_ADDR_VAR 0 4
50616: PUSH
50617: LD_INT 35
50619: PUSH
50620: LD_INT 45
50622: PUSH
50623: LD_INT 46
50625: PUSH
50626: LD_INT 47
50628: PUSH
50629: LD_INT 82
50631: PUSH
50632: LD_INT 83
50634: PUSH
50635: LD_INT 84
50637: PUSH
50638: LD_INT 85
50640: PUSH
50641: LD_INT 87
50643: PUSH
50644: LD_INT 70
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: LD_INT 11
50652: PUSH
50653: LD_INT 3
50655: PUSH
50656: LD_INT 4
50658: PUSH
50659: LD_INT 5
50661: PUSH
50662: LD_INT 6
50664: PUSH
50665: LD_INT 15
50667: PUSH
50668: LD_INT 18
50670: PUSH
50671: LD_INT 7
50673: PUSH
50674: LD_INT 17
50676: PUSH
50677: LD_INT 8
50679: PUSH
50680: LD_INT 20
50682: PUSH
50683: LD_INT 21
50685: PUSH
50686: LD_INT 22
50688: PUSH
50689: LD_INT 72
50691: PUSH
50692: LD_INT 26
50694: PUSH
50695: LD_INT 69
50697: PUSH
50698: LD_INT 39
50700: PUSH
50701: LD_INT 40
50703: PUSH
50704: LD_INT 41
50706: PUSH
50707: LD_INT 42
50709: PUSH
50710: LD_INT 43
50712: PUSH
50713: LD_INT 48
50715: PUSH
50716: LD_INT 49
50718: PUSH
50719: LD_INT 50
50721: PUSH
50722: LD_INT 51
50724: PUSH
50725: LD_INT 52
50727: PUSH
50728: LD_INT 53
50730: PUSH
50731: LD_INT 54
50733: PUSH
50734: LD_INT 55
50736: PUSH
50737: LD_INT 56
50739: PUSH
50740: LD_INT 60
50742: PUSH
50743: LD_INT 61
50745: PUSH
50746: LD_INT 62
50748: PUSH
50749: LD_INT 66
50751: PUSH
50752: LD_INT 67
50754: PUSH
50755: LD_INT 68
50757: PUSH
50758: LD_INT 81
50760: PUSH
50761: LD_INT 82
50763: PUSH
50764: LD_INT 83
50766: PUSH
50767: LD_INT 84
50769: PUSH
50770: LD_INT 85
50772: PUSH
50773: LD_INT 87
50775: PUSH
50776: LD_INT 88
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: ST_TO_ADDR
50835: GO 51068
50837: LD_INT 3
50839: DOUBLE
50840: EQUAL
50841: IFTRUE 50845
50843: GO 51067
50845: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
50846: LD_ADDR_VAR 0 4
50850: PUSH
50851: LD_INT 46
50853: PUSH
50854: LD_INT 47
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: LD_INT 2
50862: PUSH
50863: LD_INT 82
50865: PUSH
50866: LD_INT 83
50868: PUSH
50869: LD_INT 84
50871: PUSH
50872: LD_INT 85
50874: PUSH
50875: LD_INT 86
50877: PUSH
50878: LD_INT 11
50880: PUSH
50881: LD_INT 9
50883: PUSH
50884: LD_INT 20
50886: PUSH
50887: LD_INT 19
50889: PUSH
50890: LD_INT 21
50892: PUSH
50893: LD_INT 24
50895: PUSH
50896: LD_INT 22
50898: PUSH
50899: LD_INT 25
50901: PUSH
50902: LD_INT 28
50904: PUSH
50905: LD_INT 29
50907: PUSH
50908: LD_INT 30
50910: PUSH
50911: LD_INT 31
50913: PUSH
50914: LD_INT 37
50916: PUSH
50917: LD_INT 38
50919: PUSH
50920: LD_INT 32
50922: PUSH
50923: LD_INT 27
50925: PUSH
50926: LD_INT 33
50928: PUSH
50929: LD_INT 69
50931: PUSH
50932: LD_INT 39
50934: PUSH
50935: LD_INT 34
50937: PUSH
50938: LD_INT 40
50940: PUSH
50941: LD_INT 71
50943: PUSH
50944: LD_INT 23
50946: PUSH
50947: LD_INT 44
50949: PUSH
50950: LD_INT 48
50952: PUSH
50953: LD_INT 49
50955: PUSH
50956: LD_INT 50
50958: PUSH
50959: LD_INT 51
50961: PUSH
50962: LD_INT 52
50964: PUSH
50965: LD_INT 53
50967: PUSH
50968: LD_INT 54
50970: PUSH
50971: LD_INT 55
50973: PUSH
50974: LD_INT 56
50976: PUSH
50977: LD_INT 57
50979: PUSH
50980: LD_INT 58
50982: PUSH
50983: LD_INT 59
50985: PUSH
50986: LD_INT 63
50988: PUSH
50989: LD_INT 64
50991: PUSH
50992: LD_INT 65
50994: PUSH
50995: LD_INT 82
50997: PUSH
50998: LD_INT 83
51000: PUSH
51001: LD_INT 84
51003: PUSH
51004: LD_INT 85
51006: PUSH
51007: LD_INT 86
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: ST_TO_ADDR
51065: GO 51068
51067: POP
// if state > - 1 and state < 3 then
51068: LD_VAR 0 3
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: GREATER
51077: PUSH
51078: LD_VAR 0 3
51082: PUSH
51083: LD_INT 3
51085: LESS
51086: AND
51087: IFFALSE 51144
// for i in result do
51089: LD_ADDR_VAR 0 5
51093: PUSH
51094: LD_VAR 0 4
51098: PUSH
51099: FOR_IN
51100: IFFALSE 51142
// if GetTech ( i , side ) <> state then
51102: LD_VAR 0 5
51106: PPUSH
51107: LD_VAR 0 1
51111: PPUSH
51112: CALL_OW 321
51116: PUSH
51117: LD_VAR 0 3
51121: NONEQUAL
51122: IFFALSE 51140
// result := result diff i ;
51124: LD_ADDR_VAR 0 4
51128: PUSH
51129: LD_VAR 0 4
51133: PUSH
51134: LD_VAR 0 5
51138: DIFF
51139: ST_TO_ADDR
51140: GO 51099
51142: POP
51143: POP
// end ;
51144: LD_VAR 0 4
51148: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
51149: LD_INT 0
51151: PPUSH
51152: PPUSH
51153: PPUSH
// result := true ;
51154: LD_ADDR_VAR 0 3
51158: PUSH
51159: LD_INT 1
51161: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
51162: LD_ADDR_VAR 0 5
51166: PUSH
51167: LD_VAR 0 2
51171: PPUSH
51172: CALL_OW 480
51176: ST_TO_ADDR
// if not tmp then
51177: LD_VAR 0 5
51181: NOT
51182: IFFALSE 51186
// exit ;
51184: GO 51235
// for i in tmp do
51186: LD_ADDR_VAR 0 4
51190: PUSH
51191: LD_VAR 0 5
51195: PUSH
51196: FOR_IN
51197: IFFALSE 51233
// if GetTech ( i , side ) <> state_researched then
51199: LD_VAR 0 4
51203: PPUSH
51204: LD_VAR 0 1
51208: PPUSH
51209: CALL_OW 321
51213: PUSH
51214: LD_INT 2
51216: NONEQUAL
51217: IFFALSE 51231
// begin result := false ;
51219: LD_ADDR_VAR 0 3
51223: PUSH
51224: LD_INT 0
51226: ST_TO_ADDR
// exit ;
51227: POP
51228: POP
51229: GO 51235
// end ;
51231: GO 51196
51233: POP
51234: POP
// end ;
51235: LD_VAR 0 3
51239: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
51240: LD_INT 0
51242: PPUSH
51243: PPUSH
51244: PPUSH
51245: PPUSH
51246: PPUSH
51247: PPUSH
51248: PPUSH
51249: PPUSH
51250: PPUSH
51251: PPUSH
51252: PPUSH
51253: PPUSH
51254: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
51255: LD_VAR 0 1
51259: NOT
51260: PUSH
51261: LD_VAR 0 1
51265: PPUSH
51266: CALL_OW 257
51270: PUSH
51271: LD_INT 9
51273: NONEQUAL
51274: OR
51275: IFFALSE 51279
// exit ;
51277: GO 51852
// side := GetSide ( unit ) ;
51279: LD_ADDR_VAR 0 9
51283: PUSH
51284: LD_VAR 0 1
51288: PPUSH
51289: CALL_OW 255
51293: ST_TO_ADDR
// tech_space := tech_spacanom ;
51294: LD_ADDR_VAR 0 12
51298: PUSH
51299: LD_INT 29
51301: ST_TO_ADDR
// tech_time := tech_taurad ;
51302: LD_ADDR_VAR 0 13
51306: PUSH
51307: LD_INT 28
51309: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
51310: LD_ADDR_VAR 0 11
51314: PUSH
51315: LD_VAR 0 1
51319: PPUSH
51320: CALL_OW 310
51324: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
51325: LD_VAR 0 11
51329: PPUSH
51330: CALL_OW 247
51334: PUSH
51335: LD_INT 2
51337: EQUAL
51338: IFFALSE 51342
// exit ;
51340: GO 51852
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
51342: LD_ADDR_VAR 0 8
51346: PUSH
51347: LD_INT 81
51349: PUSH
51350: LD_VAR 0 9
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 3
51361: PUSH
51362: LD_INT 21
51364: PUSH
51365: LD_INT 3
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PPUSH
51380: CALL_OW 69
51384: ST_TO_ADDR
// if not tmp then
51385: LD_VAR 0 8
51389: NOT
51390: IFFALSE 51394
// exit ;
51392: GO 51852
// if in_unit then
51394: LD_VAR 0 11
51398: IFFALSE 51422
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
51400: LD_ADDR_VAR 0 10
51404: PUSH
51405: LD_VAR 0 8
51409: PPUSH
51410: LD_VAR 0 11
51414: PPUSH
51415: CALL_OW 74
51419: ST_TO_ADDR
51420: GO 51442
// enemy := NearestUnitToUnit ( tmp , unit ) ;
51422: LD_ADDR_VAR 0 10
51426: PUSH
51427: LD_VAR 0 8
51431: PPUSH
51432: LD_VAR 0 1
51436: PPUSH
51437: CALL_OW 74
51441: ST_TO_ADDR
// if not enemy then
51442: LD_VAR 0 10
51446: NOT
51447: IFFALSE 51451
// exit ;
51449: GO 51852
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
51451: LD_VAR 0 11
51455: PUSH
51456: LD_VAR 0 11
51460: PPUSH
51461: LD_VAR 0 10
51465: PPUSH
51466: CALL_OW 296
51470: PUSH
51471: LD_INT 13
51473: GREATER
51474: AND
51475: PUSH
51476: LD_VAR 0 1
51480: PPUSH
51481: LD_VAR 0 10
51485: PPUSH
51486: CALL_OW 296
51490: PUSH
51491: LD_INT 12
51493: GREATER
51494: OR
51495: IFFALSE 51499
// exit ;
51497: GO 51852
// missile := [ 1 ] ;
51499: LD_ADDR_VAR 0 14
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: EMPTY
51508: LIST
51509: ST_TO_ADDR
// if Researched ( side , tech_space ) then
51510: LD_VAR 0 9
51514: PPUSH
51515: LD_VAR 0 12
51519: PPUSH
51520: CALL_OW 325
51524: IFFALSE 51553
// missile := Replace ( missile , missile + 1 , 2 ) ;
51526: LD_ADDR_VAR 0 14
51530: PUSH
51531: LD_VAR 0 14
51535: PPUSH
51536: LD_VAR 0 14
51540: PUSH
51541: LD_INT 1
51543: PLUS
51544: PPUSH
51545: LD_INT 2
51547: PPUSH
51548: CALL_OW 1
51552: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
51553: LD_VAR 0 9
51557: PPUSH
51558: LD_VAR 0 13
51562: PPUSH
51563: CALL_OW 325
51567: PUSH
51568: LD_VAR 0 10
51572: PPUSH
51573: CALL_OW 255
51577: PPUSH
51578: LD_VAR 0 13
51582: PPUSH
51583: CALL_OW 325
51587: NOT
51588: AND
51589: IFFALSE 51618
// missile := Replace ( missile , missile + 1 , 3 ) ;
51591: LD_ADDR_VAR 0 14
51595: PUSH
51596: LD_VAR 0 14
51600: PPUSH
51601: LD_VAR 0 14
51605: PUSH
51606: LD_INT 1
51608: PLUS
51609: PPUSH
51610: LD_INT 3
51612: PPUSH
51613: CALL_OW 1
51617: ST_TO_ADDR
// if missile < 2 then
51618: LD_VAR 0 14
51622: PUSH
51623: LD_INT 2
51625: LESS
51626: IFFALSE 51630
// exit ;
51628: GO 51852
// x := GetX ( enemy ) ;
51630: LD_ADDR_VAR 0 4
51634: PUSH
51635: LD_VAR 0 10
51639: PPUSH
51640: CALL_OW 250
51644: ST_TO_ADDR
// y := GetY ( enemy ) ;
51645: LD_ADDR_VAR 0 5
51649: PUSH
51650: LD_VAR 0 10
51654: PPUSH
51655: CALL_OW 251
51659: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
51660: LD_ADDR_VAR 0 6
51664: PUSH
51665: LD_VAR 0 4
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PPUSH
51674: LD_INT 1
51676: PPUSH
51677: CALL_OW 12
51681: PLUS
51682: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
51683: LD_ADDR_VAR 0 7
51687: PUSH
51688: LD_VAR 0 5
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PPUSH
51697: LD_INT 1
51699: PPUSH
51700: CALL_OW 12
51704: PLUS
51705: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51706: LD_VAR 0 6
51710: PPUSH
51711: LD_VAR 0 7
51715: PPUSH
51716: CALL_OW 488
51720: NOT
51721: IFFALSE 51743
// begin _x := x ;
51723: LD_ADDR_VAR 0 6
51727: PUSH
51728: LD_VAR 0 4
51732: ST_TO_ADDR
// _y := y ;
51733: LD_ADDR_VAR 0 7
51737: PUSH
51738: LD_VAR 0 5
51742: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
51743: LD_ADDR_VAR 0 3
51747: PUSH
51748: LD_INT 1
51750: PPUSH
51751: LD_VAR 0 14
51755: PPUSH
51756: CALL_OW 12
51760: ST_TO_ADDR
// case i of 1 :
51761: LD_VAR 0 3
51765: PUSH
51766: LD_INT 1
51768: DOUBLE
51769: EQUAL
51770: IFTRUE 51774
51772: GO 51791
51774: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
51775: LD_VAR 0 1
51779: PPUSH
51780: LD_VAR 0 10
51784: PPUSH
51785: CALL_OW 115
51789: GO 51852
51791: LD_INT 2
51793: DOUBLE
51794: EQUAL
51795: IFTRUE 51799
51797: GO 51821
51799: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
51800: LD_VAR 0 1
51804: PPUSH
51805: LD_VAR 0 6
51809: PPUSH
51810: LD_VAR 0 7
51814: PPUSH
51815: CALL_OW 153
51819: GO 51852
51821: LD_INT 3
51823: DOUBLE
51824: EQUAL
51825: IFTRUE 51829
51827: GO 51851
51829: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
51830: LD_VAR 0 1
51834: PPUSH
51835: LD_VAR 0 6
51839: PPUSH
51840: LD_VAR 0 7
51844: PPUSH
51845: CALL_OW 154
51849: GO 51852
51851: POP
// end ;
51852: LD_VAR 0 2
51856: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
51857: LD_INT 0
51859: PPUSH
51860: PPUSH
51861: PPUSH
51862: PPUSH
51863: PPUSH
51864: PPUSH
// if not unit or not building then
51865: LD_VAR 0 1
51869: NOT
51870: PUSH
51871: LD_VAR 0 2
51875: NOT
51876: OR
51877: IFFALSE 51881
// exit ;
51879: GO 52039
// x := GetX ( building ) ;
51881: LD_ADDR_VAR 0 5
51885: PUSH
51886: LD_VAR 0 2
51890: PPUSH
51891: CALL_OW 250
51895: ST_TO_ADDR
// y := GetY ( building ) ;
51896: LD_ADDR_VAR 0 6
51900: PUSH
51901: LD_VAR 0 2
51905: PPUSH
51906: CALL_OW 251
51910: ST_TO_ADDR
// for i = 0 to 5 do
51911: LD_ADDR_VAR 0 4
51915: PUSH
51916: DOUBLE
51917: LD_INT 0
51919: DEC
51920: ST_TO_ADDR
51921: LD_INT 5
51923: PUSH
51924: FOR_TO
51925: IFFALSE 52037
// begin _x := ShiftX ( x , i , 3 ) ;
51927: LD_ADDR_VAR 0 7
51931: PUSH
51932: LD_VAR 0 5
51936: PPUSH
51937: LD_VAR 0 4
51941: PPUSH
51942: LD_INT 3
51944: PPUSH
51945: CALL_OW 272
51949: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
51950: LD_ADDR_VAR 0 8
51954: PUSH
51955: LD_VAR 0 6
51959: PPUSH
51960: LD_VAR 0 4
51964: PPUSH
51965: LD_INT 3
51967: PPUSH
51968: CALL_OW 273
51972: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51973: LD_VAR 0 7
51977: PPUSH
51978: LD_VAR 0 8
51982: PPUSH
51983: CALL_OW 488
51987: NOT
51988: IFFALSE 51992
// continue ;
51990: GO 51924
// if HexInfo ( _x , _y ) = 0 then
51992: LD_VAR 0 7
51996: PPUSH
51997: LD_VAR 0 8
52001: PPUSH
52002: CALL_OW 428
52006: PUSH
52007: LD_INT 0
52009: EQUAL
52010: IFFALSE 52035
// begin ComMoveXY ( unit , _x , _y ) ;
52012: LD_VAR 0 1
52016: PPUSH
52017: LD_VAR 0 7
52021: PPUSH
52022: LD_VAR 0 8
52026: PPUSH
52027: CALL_OW 111
// exit ;
52031: POP
52032: POP
52033: GO 52039
// end ; end ;
52035: GO 51924
52037: POP
52038: POP
// end ;
52039: LD_VAR 0 3
52043: RET
// export function ScanBase ( side , base_area ) ; begin
52044: LD_INT 0
52046: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
52047: LD_ADDR_VAR 0 3
52051: PUSH
52052: LD_VAR 0 2
52056: PPUSH
52057: LD_INT 81
52059: PUSH
52060: LD_VAR 0 1
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PPUSH
52069: CALL_OW 70
52073: ST_TO_ADDR
// end ;
52074: LD_VAR 0 3
52078: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
52079: LD_INT 0
52081: PPUSH
52082: PPUSH
52083: PPUSH
52084: PPUSH
// result := false ;
52085: LD_ADDR_VAR 0 2
52089: PUSH
52090: LD_INT 0
52092: ST_TO_ADDR
// side := GetSide ( unit ) ;
52093: LD_ADDR_VAR 0 3
52097: PUSH
52098: LD_VAR 0 1
52102: PPUSH
52103: CALL_OW 255
52107: ST_TO_ADDR
// nat := GetNation ( unit ) ;
52108: LD_ADDR_VAR 0 4
52112: PUSH
52113: LD_VAR 0 1
52117: PPUSH
52118: CALL_OW 248
52122: ST_TO_ADDR
// case nat of 1 :
52123: LD_VAR 0 4
52127: PUSH
52128: LD_INT 1
52130: DOUBLE
52131: EQUAL
52132: IFTRUE 52136
52134: GO 52147
52136: POP
// tech := tech_lassight ; 2 :
52137: LD_ADDR_VAR 0 5
52141: PUSH
52142: LD_INT 12
52144: ST_TO_ADDR
52145: GO 52186
52147: LD_INT 2
52149: DOUBLE
52150: EQUAL
52151: IFTRUE 52155
52153: GO 52166
52155: POP
// tech := tech_mortar ; 3 :
52156: LD_ADDR_VAR 0 5
52160: PUSH
52161: LD_INT 41
52163: ST_TO_ADDR
52164: GO 52186
52166: LD_INT 3
52168: DOUBLE
52169: EQUAL
52170: IFTRUE 52174
52172: GO 52185
52174: POP
// tech := tech_bazooka ; end ;
52175: LD_ADDR_VAR 0 5
52179: PUSH
52180: LD_INT 44
52182: ST_TO_ADDR
52183: GO 52186
52185: POP
// if Researched ( side , tech ) then
52186: LD_VAR 0 3
52190: PPUSH
52191: LD_VAR 0 5
52195: PPUSH
52196: CALL_OW 325
52200: IFFALSE 52227
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
52202: LD_ADDR_VAR 0 2
52206: PUSH
52207: LD_INT 5
52209: PUSH
52210: LD_INT 8
52212: PUSH
52213: LD_INT 9
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: LIST
52220: PUSH
52221: LD_VAR 0 4
52225: ARRAY
52226: ST_TO_ADDR
// end ;
52227: LD_VAR 0 2
52231: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
52232: LD_INT 0
52234: PPUSH
52235: PPUSH
52236: PPUSH
// if not mines then
52237: LD_VAR 0 2
52241: NOT
52242: IFFALSE 52246
// exit ;
52244: GO 52390
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
52246: LD_ADDR_VAR 0 5
52250: PUSH
52251: LD_INT 81
52253: PUSH
52254: LD_VAR 0 1
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 3
52265: PUSH
52266: LD_INT 21
52268: PUSH
52269: LD_INT 3
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PPUSH
52284: CALL_OW 69
52288: ST_TO_ADDR
// for i in mines do
52289: LD_ADDR_VAR 0 4
52293: PUSH
52294: LD_VAR 0 2
52298: PUSH
52299: FOR_IN
52300: IFFALSE 52388
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
52302: LD_VAR 0 4
52306: PUSH
52307: LD_INT 1
52309: ARRAY
52310: PPUSH
52311: LD_VAR 0 4
52315: PUSH
52316: LD_INT 2
52318: ARRAY
52319: PPUSH
52320: CALL_OW 458
52324: NOT
52325: IFFALSE 52329
// continue ;
52327: GO 52299
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
52329: LD_VAR 0 4
52333: PUSH
52334: LD_INT 1
52336: ARRAY
52337: PPUSH
52338: LD_VAR 0 4
52342: PUSH
52343: LD_INT 2
52345: ARRAY
52346: PPUSH
52347: CALL_OW 428
52351: PUSH
52352: LD_VAR 0 5
52356: IN
52357: IFFALSE 52386
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
52359: LD_VAR 0 4
52363: PUSH
52364: LD_INT 1
52366: ARRAY
52367: PPUSH
52368: LD_VAR 0 4
52372: PUSH
52373: LD_INT 2
52375: ARRAY
52376: PPUSH
52377: LD_VAR 0 1
52381: PPUSH
52382: CALL_OW 456
// end ;
52386: GO 52299
52388: POP
52389: POP
// end ;
52390: LD_VAR 0 3
52394: RET
// export function Count ( array ) ; var i ; begin
52395: LD_INT 0
52397: PPUSH
52398: PPUSH
// result := 0 ;
52399: LD_ADDR_VAR 0 2
52403: PUSH
52404: LD_INT 0
52406: ST_TO_ADDR
// for i in array do
52407: LD_ADDR_VAR 0 3
52411: PUSH
52412: LD_VAR 0 1
52416: PUSH
52417: FOR_IN
52418: IFFALSE 52442
// if i then
52420: LD_VAR 0 3
52424: IFFALSE 52440
// result := result + 1 ;
52426: LD_ADDR_VAR 0 2
52430: PUSH
52431: LD_VAR 0 2
52435: PUSH
52436: LD_INT 1
52438: PLUS
52439: ST_TO_ADDR
52440: GO 52417
52442: POP
52443: POP
// end ;
52444: LD_VAR 0 2
52448: RET
// export function IsEmpty ( building ) ; begin
52449: LD_INT 0
52451: PPUSH
// if not building then
52452: LD_VAR 0 1
52456: NOT
52457: IFFALSE 52461
// exit ;
52459: GO 52504
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
52461: LD_ADDR_VAR 0 2
52465: PUSH
52466: LD_VAR 0 1
52470: PUSH
52471: LD_INT 22
52473: PUSH
52474: LD_VAR 0 1
52478: PPUSH
52479: CALL_OW 255
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 58
52490: PUSH
52491: EMPTY
52492: LIST
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PPUSH
52498: CALL_OW 69
52502: IN
52503: ST_TO_ADDR
// end ;
52504: LD_VAR 0 2
52508: RET
// export function IsNotFull ( building ) ; var places ; begin
52509: LD_INT 0
52511: PPUSH
52512: PPUSH
// if not building then
52513: LD_VAR 0 1
52517: NOT
52518: IFFALSE 52522
// exit ;
52520: GO 52693
// result := false ;
52522: LD_ADDR_VAR 0 2
52526: PUSH
52527: LD_INT 0
52529: ST_TO_ADDR
// places := 0 ;
52530: LD_ADDR_VAR 0 3
52534: PUSH
52535: LD_INT 0
52537: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
52538: LD_VAR 0 1
52542: PPUSH
52543: CALL_OW 266
52547: PUSH
52548: LD_INT 0
52550: DOUBLE
52551: EQUAL
52552: IFTRUE 52610
52554: LD_INT 1
52556: DOUBLE
52557: EQUAL
52558: IFTRUE 52610
52560: LD_INT 6
52562: DOUBLE
52563: EQUAL
52564: IFTRUE 52610
52566: LD_INT 7
52568: DOUBLE
52569: EQUAL
52570: IFTRUE 52610
52572: LD_INT 8
52574: DOUBLE
52575: EQUAL
52576: IFTRUE 52610
52578: LD_INT 4
52580: DOUBLE
52581: EQUAL
52582: IFTRUE 52610
52584: LD_INT 5
52586: DOUBLE
52587: EQUAL
52588: IFTRUE 52610
52590: LD_INT 2
52592: DOUBLE
52593: EQUAL
52594: IFTRUE 52610
52596: LD_INT 3
52598: DOUBLE
52599: EQUAL
52600: IFTRUE 52610
52602: LD_INT 35
52604: DOUBLE
52605: EQUAL
52606: IFTRUE 52610
52608: GO 52621
52610: POP
// places := 6 ; b_bunker , b_breastwork :
52611: LD_ADDR_VAR 0 3
52615: PUSH
52616: LD_INT 6
52618: ST_TO_ADDR
52619: GO 52666
52621: LD_INT 32
52623: DOUBLE
52624: EQUAL
52625: IFTRUE 52635
52627: LD_INT 31
52629: DOUBLE
52630: EQUAL
52631: IFTRUE 52635
52633: GO 52646
52635: POP
// places := 1 ; b_control_tower :
52636: LD_ADDR_VAR 0 3
52640: PUSH
52641: LD_INT 1
52643: ST_TO_ADDR
52644: GO 52666
52646: LD_INT 36
52648: DOUBLE
52649: EQUAL
52650: IFTRUE 52654
52652: GO 52665
52654: POP
// places := 3 ; end ;
52655: LD_ADDR_VAR 0 3
52659: PUSH
52660: LD_INT 3
52662: ST_TO_ADDR
52663: GO 52666
52665: POP
// if places then
52666: LD_VAR 0 3
52670: IFFALSE 52693
// result := UnitsInside ( building ) < places ;
52672: LD_ADDR_VAR 0 2
52676: PUSH
52677: LD_VAR 0 1
52681: PPUSH
52682: CALL_OW 313
52686: PUSH
52687: LD_VAR 0 3
52691: LESS
52692: ST_TO_ADDR
// end ;
52693: LD_VAR 0 2
52697: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
52698: LD_INT 0
52700: PPUSH
52701: PPUSH
52702: PPUSH
52703: PPUSH
// tmp := [ ] ;
52704: LD_ADDR_VAR 0 3
52708: PUSH
52709: EMPTY
52710: ST_TO_ADDR
// list := [ ] ;
52711: LD_ADDR_VAR 0 5
52715: PUSH
52716: EMPTY
52717: ST_TO_ADDR
// for i = 16 to 25 do
52718: LD_ADDR_VAR 0 4
52722: PUSH
52723: DOUBLE
52724: LD_INT 16
52726: DEC
52727: ST_TO_ADDR
52728: LD_INT 25
52730: PUSH
52731: FOR_TO
52732: IFFALSE 52805
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
52734: LD_ADDR_VAR 0 3
52738: PUSH
52739: LD_VAR 0 3
52743: PUSH
52744: LD_INT 22
52746: PUSH
52747: LD_VAR 0 1
52751: PPUSH
52752: CALL_OW 255
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 91
52763: PUSH
52764: LD_VAR 0 1
52768: PUSH
52769: LD_INT 6
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 30
52779: PUSH
52780: LD_VAR 0 4
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: LIST
52793: PUSH
52794: EMPTY
52795: LIST
52796: PPUSH
52797: CALL_OW 69
52801: ADD
52802: ST_TO_ADDR
52803: GO 52731
52805: POP
52806: POP
// for i = 1 to tmp do
52807: LD_ADDR_VAR 0 4
52811: PUSH
52812: DOUBLE
52813: LD_INT 1
52815: DEC
52816: ST_TO_ADDR
52817: LD_VAR 0 3
52821: PUSH
52822: FOR_TO
52823: IFFALSE 52911
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
52825: LD_ADDR_VAR 0 5
52829: PUSH
52830: LD_VAR 0 5
52834: PUSH
52835: LD_VAR 0 3
52839: PUSH
52840: LD_VAR 0 4
52844: ARRAY
52845: PPUSH
52846: CALL_OW 266
52850: PUSH
52851: LD_VAR 0 3
52855: PUSH
52856: LD_VAR 0 4
52860: ARRAY
52861: PPUSH
52862: CALL_OW 250
52866: PUSH
52867: LD_VAR 0 3
52871: PUSH
52872: LD_VAR 0 4
52876: ARRAY
52877: PPUSH
52878: CALL_OW 251
52882: PUSH
52883: LD_VAR 0 3
52887: PUSH
52888: LD_VAR 0 4
52892: ARRAY
52893: PPUSH
52894: CALL_OW 254
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: PUSH
52905: EMPTY
52906: LIST
52907: ADD
52908: ST_TO_ADDR
52909: GO 52822
52911: POP
52912: POP
// result := list ;
52913: LD_ADDR_VAR 0 2
52917: PUSH
52918: LD_VAR 0 5
52922: ST_TO_ADDR
// end ;
52923: LD_VAR 0 2
52927: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
52928: LD_INT 0
52930: PPUSH
52931: PPUSH
52932: PPUSH
52933: PPUSH
52934: PPUSH
52935: PPUSH
52936: PPUSH
// if not factory then
52937: LD_VAR 0 1
52941: NOT
52942: IFFALSE 52946
// exit ;
52944: GO 53539
// if control = control_apeman then
52946: LD_VAR 0 4
52950: PUSH
52951: LD_INT 5
52953: EQUAL
52954: IFFALSE 53063
// begin tmp := UnitsInside ( factory ) ;
52956: LD_ADDR_VAR 0 8
52960: PUSH
52961: LD_VAR 0 1
52965: PPUSH
52966: CALL_OW 313
52970: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
52971: LD_VAR 0 8
52975: PPUSH
52976: LD_INT 25
52978: PUSH
52979: LD_INT 12
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PPUSH
52986: CALL_OW 72
52990: NOT
52991: IFFALSE 53001
// control := control_manual ;
52993: LD_ADDR_VAR 0 4
52997: PUSH
52998: LD_INT 1
53000: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
53001: LD_ADDR_VAR 0 8
53005: PUSH
53006: LD_VAR 0 1
53010: PPUSH
53011: CALL 52698 0 1
53015: ST_TO_ADDR
// if tmp then
53016: LD_VAR 0 8
53020: IFFALSE 53063
// begin for i in tmp do
53022: LD_ADDR_VAR 0 7
53026: PUSH
53027: LD_VAR 0 8
53031: PUSH
53032: FOR_IN
53033: IFFALSE 53061
// if i [ 1 ] = b_ext_radio then
53035: LD_VAR 0 7
53039: PUSH
53040: LD_INT 1
53042: ARRAY
53043: PUSH
53044: LD_INT 22
53046: EQUAL
53047: IFFALSE 53059
// begin control := control_remote ;
53049: LD_ADDR_VAR 0 4
53053: PUSH
53054: LD_INT 2
53056: ST_TO_ADDR
// break ;
53057: GO 53061
// end ;
53059: GO 53032
53061: POP
53062: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
53063: LD_VAR 0 1
53067: PPUSH
53068: LD_VAR 0 2
53072: PPUSH
53073: LD_VAR 0 3
53077: PPUSH
53078: LD_VAR 0 4
53082: PPUSH
53083: LD_VAR 0 5
53087: PPUSH
53088: CALL_OW 448
53092: IFFALSE 53127
// begin result := [ chassis , engine , control , weapon ] ;
53094: LD_ADDR_VAR 0 6
53098: PUSH
53099: LD_VAR 0 2
53103: PUSH
53104: LD_VAR 0 3
53108: PUSH
53109: LD_VAR 0 4
53113: PUSH
53114: LD_VAR 0 5
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: ST_TO_ADDR
// exit ;
53125: GO 53539
// end ; _chassis := AvailableChassisList ( factory ) ;
53127: LD_ADDR_VAR 0 9
53131: PUSH
53132: LD_VAR 0 1
53136: PPUSH
53137: CALL_OW 475
53141: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
53142: LD_ADDR_VAR 0 11
53146: PUSH
53147: LD_VAR 0 1
53151: PPUSH
53152: CALL_OW 476
53156: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
53157: LD_ADDR_VAR 0 12
53161: PUSH
53162: LD_VAR 0 1
53166: PPUSH
53167: CALL_OW 477
53171: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
53172: LD_ADDR_VAR 0 10
53176: PUSH
53177: LD_VAR 0 1
53181: PPUSH
53182: CALL_OW 478
53186: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
53187: LD_VAR 0 9
53191: NOT
53192: PUSH
53193: LD_VAR 0 11
53197: NOT
53198: OR
53199: PUSH
53200: LD_VAR 0 12
53204: NOT
53205: OR
53206: PUSH
53207: LD_VAR 0 10
53211: NOT
53212: OR
53213: IFFALSE 53248
// begin result := [ chassis , engine , control , weapon ] ;
53215: LD_ADDR_VAR 0 6
53219: PUSH
53220: LD_VAR 0 2
53224: PUSH
53225: LD_VAR 0 3
53229: PUSH
53230: LD_VAR 0 4
53234: PUSH
53235: LD_VAR 0 5
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: ST_TO_ADDR
// exit ;
53246: GO 53539
// end ; if not chassis in _chassis then
53248: LD_VAR 0 2
53252: PUSH
53253: LD_VAR 0 9
53257: IN
53258: NOT
53259: IFFALSE 53285
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
53261: LD_ADDR_VAR 0 2
53265: PUSH
53266: LD_VAR 0 9
53270: PUSH
53271: LD_INT 1
53273: PPUSH
53274: LD_VAR 0 9
53278: PPUSH
53279: CALL_OW 12
53283: ARRAY
53284: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
53285: LD_VAR 0 2
53289: PPUSH
53290: LD_VAR 0 3
53294: PPUSH
53295: CALL 53544 0 2
53299: NOT
53300: IFFALSE 53359
// repeat engine := _engine [ 1 ] ;
53302: LD_ADDR_VAR 0 3
53306: PUSH
53307: LD_VAR 0 11
53311: PUSH
53312: LD_INT 1
53314: ARRAY
53315: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
53316: LD_ADDR_VAR 0 11
53320: PUSH
53321: LD_VAR 0 11
53325: PPUSH
53326: LD_INT 1
53328: PPUSH
53329: CALL_OW 3
53333: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
53334: LD_VAR 0 2
53338: PPUSH
53339: LD_VAR 0 3
53343: PPUSH
53344: CALL 53544 0 2
53348: PUSH
53349: LD_VAR 0 11
53353: PUSH
53354: EMPTY
53355: EQUAL
53356: OR
53357: IFFALSE 53302
// if not control in _control then
53359: LD_VAR 0 4
53363: PUSH
53364: LD_VAR 0 12
53368: IN
53369: NOT
53370: IFFALSE 53396
// control := _control [ rand ( 1 , _control ) ] ;
53372: LD_ADDR_VAR 0 4
53376: PUSH
53377: LD_VAR 0 12
53381: PUSH
53382: LD_INT 1
53384: PPUSH
53385: LD_VAR 0 12
53389: PPUSH
53390: CALL_OW 12
53394: ARRAY
53395: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
53396: LD_VAR 0 2
53400: PPUSH
53401: LD_VAR 0 5
53405: PPUSH
53406: CALL 53764 0 2
53410: NOT
53411: IFFALSE 53470
// repeat weapon := _weapon [ 1 ] ;
53413: LD_ADDR_VAR 0 5
53417: PUSH
53418: LD_VAR 0 10
53422: PUSH
53423: LD_INT 1
53425: ARRAY
53426: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
53427: LD_ADDR_VAR 0 10
53431: PUSH
53432: LD_VAR 0 10
53436: PPUSH
53437: LD_INT 1
53439: PPUSH
53440: CALL_OW 3
53444: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
53445: LD_VAR 0 2
53449: PPUSH
53450: LD_VAR 0 5
53454: PPUSH
53455: CALL 53764 0 2
53459: PUSH
53460: LD_VAR 0 10
53464: PUSH
53465: EMPTY
53466: EQUAL
53467: OR
53468: IFFALSE 53413
// result := [ ] ;
53470: LD_ADDR_VAR 0 6
53474: PUSH
53475: EMPTY
53476: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
53477: LD_VAR 0 1
53481: PPUSH
53482: LD_VAR 0 2
53486: PPUSH
53487: LD_VAR 0 3
53491: PPUSH
53492: LD_VAR 0 4
53496: PPUSH
53497: LD_VAR 0 5
53501: PPUSH
53502: CALL_OW 448
53506: IFFALSE 53539
// result := [ chassis , engine , control , weapon ] ;
53508: LD_ADDR_VAR 0 6
53512: PUSH
53513: LD_VAR 0 2
53517: PUSH
53518: LD_VAR 0 3
53522: PUSH
53523: LD_VAR 0 4
53527: PUSH
53528: LD_VAR 0 5
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: ST_TO_ADDR
// end ;
53539: LD_VAR 0 6
53543: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
53544: LD_INT 0
53546: PPUSH
// if not chassis or not engine then
53547: LD_VAR 0 1
53551: NOT
53552: PUSH
53553: LD_VAR 0 2
53557: NOT
53558: OR
53559: IFFALSE 53563
// exit ;
53561: GO 53759
// case engine of engine_solar :
53563: LD_VAR 0 2
53567: PUSH
53568: LD_INT 2
53570: DOUBLE
53571: EQUAL
53572: IFTRUE 53576
53574: GO 53614
53576: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
53577: LD_ADDR_VAR 0 3
53581: PUSH
53582: LD_INT 11
53584: PUSH
53585: LD_INT 12
53587: PUSH
53588: LD_INT 13
53590: PUSH
53591: LD_INT 14
53593: PUSH
53594: LD_INT 1
53596: PUSH
53597: LD_INT 2
53599: PUSH
53600: LD_INT 3
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: ST_TO_ADDR
53612: GO 53743
53614: LD_INT 1
53616: DOUBLE
53617: EQUAL
53618: IFTRUE 53622
53620: GO 53684
53622: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
53623: LD_ADDR_VAR 0 3
53627: PUSH
53628: LD_INT 11
53630: PUSH
53631: LD_INT 12
53633: PUSH
53634: LD_INT 13
53636: PUSH
53637: LD_INT 14
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: LD_INT 2
53645: PUSH
53646: LD_INT 3
53648: PUSH
53649: LD_INT 4
53651: PUSH
53652: LD_INT 5
53654: PUSH
53655: LD_INT 21
53657: PUSH
53658: LD_INT 23
53660: PUSH
53661: LD_INT 22
53663: PUSH
53664: LD_INT 24
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: ST_TO_ADDR
53682: GO 53743
53684: LD_INT 3
53686: DOUBLE
53687: EQUAL
53688: IFTRUE 53692
53690: GO 53742
53692: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
53693: LD_ADDR_VAR 0 3
53697: PUSH
53698: LD_INT 13
53700: PUSH
53701: LD_INT 14
53703: PUSH
53704: LD_INT 2
53706: PUSH
53707: LD_INT 3
53709: PUSH
53710: LD_INT 4
53712: PUSH
53713: LD_INT 5
53715: PUSH
53716: LD_INT 21
53718: PUSH
53719: LD_INT 22
53721: PUSH
53722: LD_INT 23
53724: PUSH
53725: LD_INT 24
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: ST_TO_ADDR
53740: GO 53743
53742: POP
// result := ( chassis in result ) ;
53743: LD_ADDR_VAR 0 3
53747: PUSH
53748: LD_VAR 0 1
53752: PUSH
53753: LD_VAR 0 3
53757: IN
53758: ST_TO_ADDR
// end ;
53759: LD_VAR 0 3
53763: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
53764: LD_INT 0
53766: PPUSH
// if not chassis or not weapon then
53767: LD_VAR 0 1
53771: NOT
53772: PUSH
53773: LD_VAR 0 2
53777: NOT
53778: OR
53779: IFFALSE 53783
// exit ;
53781: GO 54843
// case weapon of us_machine_gun :
53783: LD_VAR 0 2
53787: PUSH
53788: LD_INT 2
53790: DOUBLE
53791: EQUAL
53792: IFTRUE 53796
53794: GO 53826
53796: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
53797: LD_ADDR_VAR 0 3
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: LD_INT 2
53807: PUSH
53808: LD_INT 3
53810: PUSH
53811: LD_INT 4
53813: PUSH
53814: LD_INT 5
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: ST_TO_ADDR
53824: GO 54827
53826: LD_INT 3
53828: DOUBLE
53829: EQUAL
53830: IFTRUE 53834
53832: GO 53864
53834: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
53835: LD_ADDR_VAR 0 3
53839: PUSH
53840: LD_INT 1
53842: PUSH
53843: LD_INT 2
53845: PUSH
53846: LD_INT 3
53848: PUSH
53849: LD_INT 4
53851: PUSH
53852: LD_INT 5
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: ST_TO_ADDR
53862: GO 54827
53864: LD_INT 11
53866: DOUBLE
53867: EQUAL
53868: IFTRUE 53872
53870: GO 53902
53872: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
53873: LD_ADDR_VAR 0 3
53877: PUSH
53878: LD_INT 1
53880: PUSH
53881: LD_INT 2
53883: PUSH
53884: LD_INT 3
53886: PUSH
53887: LD_INT 4
53889: PUSH
53890: LD_INT 5
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: ST_TO_ADDR
53900: GO 54827
53902: LD_INT 4
53904: DOUBLE
53905: EQUAL
53906: IFTRUE 53910
53908: GO 53936
53910: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
53911: LD_ADDR_VAR 0 3
53915: PUSH
53916: LD_INT 2
53918: PUSH
53919: LD_INT 3
53921: PUSH
53922: LD_INT 4
53924: PUSH
53925: LD_INT 5
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: ST_TO_ADDR
53934: GO 54827
53936: LD_INT 5
53938: DOUBLE
53939: EQUAL
53940: IFTRUE 53944
53942: GO 53970
53944: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
53945: LD_ADDR_VAR 0 3
53949: PUSH
53950: LD_INT 2
53952: PUSH
53953: LD_INT 3
53955: PUSH
53956: LD_INT 4
53958: PUSH
53959: LD_INT 5
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: ST_TO_ADDR
53968: GO 54827
53970: LD_INT 9
53972: DOUBLE
53973: EQUAL
53974: IFTRUE 53978
53976: GO 54004
53978: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
53979: LD_ADDR_VAR 0 3
53983: PUSH
53984: LD_INT 2
53986: PUSH
53987: LD_INT 3
53989: PUSH
53990: LD_INT 4
53992: PUSH
53993: LD_INT 5
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: ST_TO_ADDR
54002: GO 54827
54004: LD_INT 7
54006: DOUBLE
54007: EQUAL
54008: IFTRUE 54012
54010: GO 54038
54012: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
54013: LD_ADDR_VAR 0 3
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: LD_INT 3
54023: PUSH
54024: LD_INT 4
54026: PUSH
54027: LD_INT 5
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: ST_TO_ADDR
54036: GO 54827
54038: LD_INT 12
54040: DOUBLE
54041: EQUAL
54042: IFTRUE 54046
54044: GO 54072
54046: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
54047: LD_ADDR_VAR 0 3
54051: PUSH
54052: LD_INT 2
54054: PUSH
54055: LD_INT 3
54057: PUSH
54058: LD_INT 4
54060: PUSH
54061: LD_INT 5
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: ST_TO_ADDR
54070: GO 54827
54072: LD_INT 13
54074: DOUBLE
54075: EQUAL
54076: IFTRUE 54080
54078: GO 54106
54080: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
54081: LD_ADDR_VAR 0 3
54085: PUSH
54086: LD_INT 2
54088: PUSH
54089: LD_INT 3
54091: PUSH
54092: LD_INT 4
54094: PUSH
54095: LD_INT 5
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: ST_TO_ADDR
54104: GO 54827
54106: LD_INT 14
54108: DOUBLE
54109: EQUAL
54110: IFTRUE 54114
54112: GO 54132
54114: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
54115: LD_ADDR_VAR 0 3
54119: PUSH
54120: LD_INT 4
54122: PUSH
54123: LD_INT 5
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: ST_TO_ADDR
54130: GO 54827
54132: LD_INT 6
54134: DOUBLE
54135: EQUAL
54136: IFTRUE 54140
54138: GO 54158
54140: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
54141: LD_ADDR_VAR 0 3
54145: PUSH
54146: LD_INT 4
54148: PUSH
54149: LD_INT 5
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: ST_TO_ADDR
54156: GO 54827
54158: LD_INT 10
54160: DOUBLE
54161: EQUAL
54162: IFTRUE 54166
54164: GO 54184
54166: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
54167: LD_ADDR_VAR 0 3
54171: PUSH
54172: LD_INT 4
54174: PUSH
54175: LD_INT 5
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: ST_TO_ADDR
54182: GO 54827
54184: LD_INT 22
54186: DOUBLE
54187: EQUAL
54188: IFTRUE 54192
54190: GO 54218
54192: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
54193: LD_ADDR_VAR 0 3
54197: PUSH
54198: LD_INT 11
54200: PUSH
54201: LD_INT 12
54203: PUSH
54204: LD_INT 13
54206: PUSH
54207: LD_INT 14
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: ST_TO_ADDR
54216: GO 54827
54218: LD_INT 23
54220: DOUBLE
54221: EQUAL
54222: IFTRUE 54226
54224: GO 54252
54226: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
54227: LD_ADDR_VAR 0 3
54231: PUSH
54232: LD_INT 11
54234: PUSH
54235: LD_INT 12
54237: PUSH
54238: LD_INT 13
54240: PUSH
54241: LD_INT 14
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: ST_TO_ADDR
54250: GO 54827
54252: LD_INT 24
54254: DOUBLE
54255: EQUAL
54256: IFTRUE 54260
54258: GO 54286
54260: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
54261: LD_ADDR_VAR 0 3
54265: PUSH
54266: LD_INT 11
54268: PUSH
54269: LD_INT 12
54271: PUSH
54272: LD_INT 13
54274: PUSH
54275: LD_INT 14
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: ST_TO_ADDR
54284: GO 54827
54286: LD_INT 30
54288: DOUBLE
54289: EQUAL
54290: IFTRUE 54294
54292: GO 54320
54294: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
54295: LD_ADDR_VAR 0 3
54299: PUSH
54300: LD_INT 11
54302: PUSH
54303: LD_INT 12
54305: PUSH
54306: LD_INT 13
54308: PUSH
54309: LD_INT 14
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: ST_TO_ADDR
54318: GO 54827
54320: LD_INT 25
54322: DOUBLE
54323: EQUAL
54324: IFTRUE 54328
54326: GO 54346
54328: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
54329: LD_ADDR_VAR 0 3
54333: PUSH
54334: LD_INT 13
54336: PUSH
54337: LD_INT 14
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: ST_TO_ADDR
54344: GO 54827
54346: LD_INT 27
54348: DOUBLE
54349: EQUAL
54350: IFTRUE 54354
54352: GO 54372
54354: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
54355: LD_ADDR_VAR 0 3
54359: PUSH
54360: LD_INT 13
54362: PUSH
54363: LD_INT 14
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: ST_TO_ADDR
54370: GO 54827
54372: LD_INT 92
54374: DOUBLE
54375: EQUAL
54376: IFTRUE 54380
54378: GO 54406
54380: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
54381: LD_ADDR_VAR 0 3
54385: PUSH
54386: LD_INT 11
54388: PUSH
54389: LD_INT 12
54391: PUSH
54392: LD_INT 13
54394: PUSH
54395: LD_INT 14
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: ST_TO_ADDR
54404: GO 54827
54406: LD_INT 28
54408: DOUBLE
54409: EQUAL
54410: IFTRUE 54414
54412: GO 54432
54414: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
54415: LD_ADDR_VAR 0 3
54419: PUSH
54420: LD_INT 13
54422: PUSH
54423: LD_INT 14
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: ST_TO_ADDR
54430: GO 54827
54432: LD_INT 29
54434: DOUBLE
54435: EQUAL
54436: IFTRUE 54440
54438: GO 54458
54440: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
54441: LD_ADDR_VAR 0 3
54445: PUSH
54446: LD_INT 13
54448: PUSH
54449: LD_INT 14
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: ST_TO_ADDR
54456: GO 54827
54458: LD_INT 31
54460: DOUBLE
54461: EQUAL
54462: IFTRUE 54466
54464: GO 54484
54466: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
54467: LD_ADDR_VAR 0 3
54471: PUSH
54472: LD_INT 13
54474: PUSH
54475: LD_INT 14
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: ST_TO_ADDR
54482: GO 54827
54484: LD_INT 26
54486: DOUBLE
54487: EQUAL
54488: IFTRUE 54492
54490: GO 54510
54492: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
54493: LD_ADDR_VAR 0 3
54497: PUSH
54498: LD_INT 13
54500: PUSH
54501: LD_INT 14
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: ST_TO_ADDR
54508: GO 54827
54510: LD_INT 42
54512: DOUBLE
54513: EQUAL
54514: IFTRUE 54518
54516: GO 54544
54518: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
54519: LD_ADDR_VAR 0 3
54523: PUSH
54524: LD_INT 21
54526: PUSH
54527: LD_INT 22
54529: PUSH
54530: LD_INT 23
54532: PUSH
54533: LD_INT 24
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: ST_TO_ADDR
54542: GO 54827
54544: LD_INT 43
54546: DOUBLE
54547: EQUAL
54548: IFTRUE 54552
54550: GO 54578
54552: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
54553: LD_ADDR_VAR 0 3
54557: PUSH
54558: LD_INT 21
54560: PUSH
54561: LD_INT 22
54563: PUSH
54564: LD_INT 23
54566: PUSH
54567: LD_INT 24
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: ST_TO_ADDR
54576: GO 54827
54578: LD_INT 44
54580: DOUBLE
54581: EQUAL
54582: IFTRUE 54586
54584: GO 54612
54586: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
54587: LD_ADDR_VAR 0 3
54591: PUSH
54592: LD_INT 21
54594: PUSH
54595: LD_INT 22
54597: PUSH
54598: LD_INT 23
54600: PUSH
54601: LD_INT 24
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: ST_TO_ADDR
54610: GO 54827
54612: LD_INT 45
54614: DOUBLE
54615: EQUAL
54616: IFTRUE 54620
54618: GO 54646
54620: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
54621: LD_ADDR_VAR 0 3
54625: PUSH
54626: LD_INT 21
54628: PUSH
54629: LD_INT 22
54631: PUSH
54632: LD_INT 23
54634: PUSH
54635: LD_INT 24
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: ST_TO_ADDR
54644: GO 54827
54646: LD_INT 49
54648: DOUBLE
54649: EQUAL
54650: IFTRUE 54654
54652: GO 54680
54654: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
54655: LD_ADDR_VAR 0 3
54659: PUSH
54660: LD_INT 21
54662: PUSH
54663: LD_INT 22
54665: PUSH
54666: LD_INT 23
54668: PUSH
54669: LD_INT 24
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: ST_TO_ADDR
54678: GO 54827
54680: LD_INT 51
54682: DOUBLE
54683: EQUAL
54684: IFTRUE 54688
54686: GO 54714
54688: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
54689: LD_ADDR_VAR 0 3
54693: PUSH
54694: LD_INT 21
54696: PUSH
54697: LD_INT 22
54699: PUSH
54700: LD_INT 23
54702: PUSH
54703: LD_INT 24
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: ST_TO_ADDR
54712: GO 54827
54714: LD_INT 52
54716: DOUBLE
54717: EQUAL
54718: IFTRUE 54722
54720: GO 54748
54722: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
54723: LD_ADDR_VAR 0 3
54727: PUSH
54728: LD_INT 21
54730: PUSH
54731: LD_INT 22
54733: PUSH
54734: LD_INT 23
54736: PUSH
54737: LD_INT 24
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: ST_TO_ADDR
54746: GO 54827
54748: LD_INT 53
54750: DOUBLE
54751: EQUAL
54752: IFTRUE 54756
54754: GO 54774
54756: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
54757: LD_ADDR_VAR 0 3
54761: PUSH
54762: LD_INT 23
54764: PUSH
54765: LD_INT 24
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: ST_TO_ADDR
54772: GO 54827
54774: LD_INT 46
54776: DOUBLE
54777: EQUAL
54778: IFTRUE 54782
54780: GO 54800
54782: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
54783: LD_ADDR_VAR 0 3
54787: PUSH
54788: LD_INT 23
54790: PUSH
54791: LD_INT 24
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: ST_TO_ADDR
54798: GO 54827
54800: LD_INT 47
54802: DOUBLE
54803: EQUAL
54804: IFTRUE 54808
54806: GO 54826
54808: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
54809: LD_ADDR_VAR 0 3
54813: PUSH
54814: LD_INT 23
54816: PUSH
54817: LD_INT 24
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: ST_TO_ADDR
54824: GO 54827
54826: POP
// result := ( chassis in result ) ;
54827: LD_ADDR_VAR 0 3
54831: PUSH
54832: LD_VAR 0 1
54836: PUSH
54837: LD_VAR 0 3
54841: IN
54842: ST_TO_ADDR
// end ;
54843: LD_VAR 0 3
54847: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
54848: LD_INT 0
54850: PPUSH
54851: PPUSH
54852: PPUSH
54853: PPUSH
54854: PPUSH
54855: PPUSH
54856: PPUSH
// result := array ;
54857: LD_ADDR_VAR 0 5
54861: PUSH
54862: LD_VAR 0 1
54866: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
54867: LD_VAR 0 1
54871: NOT
54872: PUSH
54873: LD_VAR 0 2
54877: NOT
54878: OR
54879: PUSH
54880: LD_VAR 0 3
54884: NOT
54885: OR
54886: PUSH
54887: LD_VAR 0 2
54891: PUSH
54892: LD_VAR 0 1
54896: GREATER
54897: OR
54898: PUSH
54899: LD_VAR 0 3
54903: PUSH
54904: LD_VAR 0 1
54908: GREATER
54909: OR
54910: IFFALSE 54914
// exit ;
54912: GO 55210
// if direction then
54914: LD_VAR 0 4
54918: IFFALSE 54982
// begin d := 1 ;
54920: LD_ADDR_VAR 0 9
54924: PUSH
54925: LD_INT 1
54927: ST_TO_ADDR
// if i_from > i_to then
54928: LD_VAR 0 2
54932: PUSH
54933: LD_VAR 0 3
54937: GREATER
54938: IFFALSE 54964
// length := ( array - i_from ) + i_to else
54940: LD_ADDR_VAR 0 11
54944: PUSH
54945: LD_VAR 0 1
54949: PUSH
54950: LD_VAR 0 2
54954: MINUS
54955: PUSH
54956: LD_VAR 0 3
54960: PLUS
54961: ST_TO_ADDR
54962: GO 54980
// length := i_to - i_from ;
54964: LD_ADDR_VAR 0 11
54968: PUSH
54969: LD_VAR 0 3
54973: PUSH
54974: LD_VAR 0 2
54978: MINUS
54979: ST_TO_ADDR
// end else
54980: GO 55043
// begin d := - 1 ;
54982: LD_ADDR_VAR 0 9
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: ST_TO_ADDR
// if i_from > i_to then
54991: LD_VAR 0 2
54995: PUSH
54996: LD_VAR 0 3
55000: GREATER
55001: IFFALSE 55021
// length := i_from - i_to else
55003: LD_ADDR_VAR 0 11
55007: PUSH
55008: LD_VAR 0 2
55012: PUSH
55013: LD_VAR 0 3
55017: MINUS
55018: ST_TO_ADDR
55019: GO 55043
// length := ( array - i_to ) + i_from ;
55021: LD_ADDR_VAR 0 11
55025: PUSH
55026: LD_VAR 0 1
55030: PUSH
55031: LD_VAR 0 3
55035: MINUS
55036: PUSH
55037: LD_VAR 0 2
55041: PLUS
55042: ST_TO_ADDR
// end ; if not length then
55043: LD_VAR 0 11
55047: NOT
55048: IFFALSE 55052
// exit ;
55050: GO 55210
// tmp := array ;
55052: LD_ADDR_VAR 0 10
55056: PUSH
55057: LD_VAR 0 1
55061: ST_TO_ADDR
// for i = 1 to length do
55062: LD_ADDR_VAR 0 6
55066: PUSH
55067: DOUBLE
55068: LD_INT 1
55070: DEC
55071: ST_TO_ADDR
55072: LD_VAR 0 11
55076: PUSH
55077: FOR_TO
55078: IFFALSE 55198
// begin for j = 1 to array do
55080: LD_ADDR_VAR 0 7
55084: PUSH
55085: DOUBLE
55086: LD_INT 1
55088: DEC
55089: ST_TO_ADDR
55090: LD_VAR 0 1
55094: PUSH
55095: FOR_TO
55096: IFFALSE 55184
// begin k := j + d ;
55098: LD_ADDR_VAR 0 8
55102: PUSH
55103: LD_VAR 0 7
55107: PUSH
55108: LD_VAR 0 9
55112: PLUS
55113: ST_TO_ADDR
// if k > array then
55114: LD_VAR 0 8
55118: PUSH
55119: LD_VAR 0 1
55123: GREATER
55124: IFFALSE 55134
// k := 1 ;
55126: LD_ADDR_VAR 0 8
55130: PUSH
55131: LD_INT 1
55133: ST_TO_ADDR
// if not k then
55134: LD_VAR 0 8
55138: NOT
55139: IFFALSE 55151
// k := array ;
55141: LD_ADDR_VAR 0 8
55145: PUSH
55146: LD_VAR 0 1
55150: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
55151: LD_ADDR_VAR 0 10
55155: PUSH
55156: LD_VAR 0 10
55160: PPUSH
55161: LD_VAR 0 8
55165: PPUSH
55166: LD_VAR 0 1
55170: PUSH
55171: LD_VAR 0 7
55175: ARRAY
55176: PPUSH
55177: CALL_OW 1
55181: ST_TO_ADDR
// end ;
55182: GO 55095
55184: POP
55185: POP
// array := tmp ;
55186: LD_ADDR_VAR 0 1
55190: PUSH
55191: LD_VAR 0 10
55195: ST_TO_ADDR
// end ;
55196: GO 55077
55198: POP
55199: POP
// result := array ;
55200: LD_ADDR_VAR 0 5
55204: PUSH
55205: LD_VAR 0 1
55209: ST_TO_ADDR
// end ;
55210: LD_VAR 0 5
55214: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
55215: LD_INT 0
55217: PPUSH
55218: PPUSH
// result := 0 ;
55219: LD_ADDR_VAR 0 3
55223: PUSH
55224: LD_INT 0
55226: ST_TO_ADDR
// if not array or not value in array then
55227: LD_VAR 0 1
55231: NOT
55232: PUSH
55233: LD_VAR 0 2
55237: PUSH
55238: LD_VAR 0 1
55242: IN
55243: NOT
55244: OR
55245: IFFALSE 55249
// exit ;
55247: GO 55303
// for i = 1 to array do
55249: LD_ADDR_VAR 0 4
55253: PUSH
55254: DOUBLE
55255: LD_INT 1
55257: DEC
55258: ST_TO_ADDR
55259: LD_VAR 0 1
55263: PUSH
55264: FOR_TO
55265: IFFALSE 55301
// if value = array [ i ] then
55267: LD_VAR 0 2
55271: PUSH
55272: LD_VAR 0 1
55276: PUSH
55277: LD_VAR 0 4
55281: ARRAY
55282: EQUAL
55283: IFFALSE 55299
// begin result := i ;
55285: LD_ADDR_VAR 0 3
55289: PUSH
55290: LD_VAR 0 4
55294: ST_TO_ADDR
// exit ;
55295: POP
55296: POP
55297: GO 55303
// end ;
55299: GO 55264
55301: POP
55302: POP
// end ;
55303: LD_VAR 0 3
55307: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
55308: LD_INT 0
55310: PPUSH
// vc_chassis := chassis ;
55311: LD_ADDR_OWVAR 37
55315: PUSH
55316: LD_VAR 0 1
55320: ST_TO_ADDR
// vc_engine := engine ;
55321: LD_ADDR_OWVAR 39
55325: PUSH
55326: LD_VAR 0 2
55330: ST_TO_ADDR
// vc_control := control ;
55331: LD_ADDR_OWVAR 38
55335: PUSH
55336: LD_VAR 0 3
55340: ST_TO_ADDR
// vc_weapon := weapon ;
55341: LD_ADDR_OWVAR 40
55345: PUSH
55346: LD_VAR 0 4
55350: ST_TO_ADDR
// vc_fuel_battery := fuel ;
55351: LD_ADDR_OWVAR 41
55355: PUSH
55356: LD_VAR 0 5
55360: ST_TO_ADDR
// end ;
55361: LD_VAR 0 6
55365: RET
// export function WantPlant ( unit ) ; var task ; begin
55366: LD_INT 0
55368: PPUSH
55369: PPUSH
// result := false ;
55370: LD_ADDR_VAR 0 2
55374: PUSH
55375: LD_INT 0
55377: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
55378: LD_ADDR_VAR 0 3
55382: PUSH
55383: LD_VAR 0 1
55387: PPUSH
55388: CALL_OW 437
55392: ST_TO_ADDR
// if task then
55393: LD_VAR 0 3
55397: IFFALSE 55425
// if task [ 1 ] [ 1 ] = p then
55399: LD_VAR 0 3
55403: PUSH
55404: LD_INT 1
55406: ARRAY
55407: PUSH
55408: LD_INT 1
55410: ARRAY
55411: PUSH
55412: LD_STRING p
55414: EQUAL
55415: IFFALSE 55425
// result := true ;
55417: LD_ADDR_VAR 0 2
55421: PUSH
55422: LD_INT 1
55424: ST_TO_ADDR
// end ;
55425: LD_VAR 0 2
55429: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
55430: LD_INT 0
55432: PPUSH
55433: PPUSH
55434: PPUSH
55435: PPUSH
// if pos < 1 then
55436: LD_VAR 0 2
55440: PUSH
55441: LD_INT 1
55443: LESS
55444: IFFALSE 55448
// exit ;
55446: GO 55751
// if pos = 1 then
55448: LD_VAR 0 2
55452: PUSH
55453: LD_INT 1
55455: EQUAL
55456: IFFALSE 55489
// result := Replace ( arr , pos [ 1 ] , value ) else
55458: LD_ADDR_VAR 0 4
55462: PUSH
55463: LD_VAR 0 1
55467: PPUSH
55468: LD_VAR 0 2
55472: PUSH
55473: LD_INT 1
55475: ARRAY
55476: PPUSH
55477: LD_VAR 0 3
55481: PPUSH
55482: CALL_OW 1
55486: ST_TO_ADDR
55487: GO 55751
// begin tmp := arr ;
55489: LD_ADDR_VAR 0 6
55493: PUSH
55494: LD_VAR 0 1
55498: ST_TO_ADDR
// s_arr := [ tmp ] ;
55499: LD_ADDR_VAR 0 7
55503: PUSH
55504: LD_VAR 0 6
55508: PUSH
55509: EMPTY
55510: LIST
55511: ST_TO_ADDR
// for i = 1 to pos - 1 do
55512: LD_ADDR_VAR 0 5
55516: PUSH
55517: DOUBLE
55518: LD_INT 1
55520: DEC
55521: ST_TO_ADDR
55522: LD_VAR 0 2
55526: PUSH
55527: LD_INT 1
55529: MINUS
55530: PUSH
55531: FOR_TO
55532: IFFALSE 55577
// begin tmp := tmp [ pos [ i ] ] ;
55534: LD_ADDR_VAR 0 6
55538: PUSH
55539: LD_VAR 0 6
55543: PUSH
55544: LD_VAR 0 2
55548: PUSH
55549: LD_VAR 0 5
55553: ARRAY
55554: ARRAY
55555: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
55556: LD_ADDR_VAR 0 7
55560: PUSH
55561: LD_VAR 0 7
55565: PUSH
55566: LD_VAR 0 6
55570: PUSH
55571: EMPTY
55572: LIST
55573: ADD
55574: ST_TO_ADDR
// end ;
55575: GO 55531
55577: POP
55578: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
55579: LD_ADDR_VAR 0 6
55583: PUSH
55584: LD_VAR 0 6
55588: PPUSH
55589: LD_VAR 0 2
55593: PUSH
55594: LD_VAR 0 2
55598: ARRAY
55599: PPUSH
55600: LD_VAR 0 3
55604: PPUSH
55605: CALL_OW 1
55609: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
55610: LD_ADDR_VAR 0 7
55614: PUSH
55615: LD_VAR 0 7
55619: PPUSH
55620: LD_VAR 0 7
55624: PPUSH
55625: LD_VAR 0 6
55629: PPUSH
55630: CALL_OW 1
55634: ST_TO_ADDR
// for i = s_arr downto 2 do
55635: LD_ADDR_VAR 0 5
55639: PUSH
55640: DOUBLE
55641: LD_VAR 0 7
55645: INC
55646: ST_TO_ADDR
55647: LD_INT 2
55649: PUSH
55650: FOR_DOWNTO
55651: IFFALSE 55735
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
55653: LD_ADDR_VAR 0 6
55657: PUSH
55658: LD_VAR 0 7
55662: PUSH
55663: LD_VAR 0 5
55667: PUSH
55668: LD_INT 1
55670: MINUS
55671: ARRAY
55672: PPUSH
55673: LD_VAR 0 2
55677: PUSH
55678: LD_VAR 0 5
55682: PUSH
55683: LD_INT 1
55685: MINUS
55686: ARRAY
55687: PPUSH
55688: LD_VAR 0 7
55692: PUSH
55693: LD_VAR 0 5
55697: ARRAY
55698: PPUSH
55699: CALL_OW 1
55703: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
55704: LD_ADDR_VAR 0 7
55708: PUSH
55709: LD_VAR 0 7
55713: PPUSH
55714: LD_VAR 0 5
55718: PUSH
55719: LD_INT 1
55721: MINUS
55722: PPUSH
55723: LD_VAR 0 6
55727: PPUSH
55728: CALL_OW 1
55732: ST_TO_ADDR
// end ;
55733: GO 55650
55735: POP
55736: POP
// result := s_arr [ 1 ] ;
55737: LD_ADDR_VAR 0 4
55741: PUSH
55742: LD_VAR 0 7
55746: PUSH
55747: LD_INT 1
55749: ARRAY
55750: ST_TO_ADDR
// end ; end ;
55751: LD_VAR 0 4
55755: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
55756: LD_INT 0
55758: PPUSH
55759: PPUSH
// if not list then
55760: LD_VAR 0 1
55764: NOT
55765: IFFALSE 55769
// exit ;
55767: GO 55860
// i := list [ pos1 ] ;
55769: LD_ADDR_VAR 0 5
55773: PUSH
55774: LD_VAR 0 1
55778: PUSH
55779: LD_VAR 0 2
55783: ARRAY
55784: ST_TO_ADDR
// if not i then
55785: LD_VAR 0 5
55789: NOT
55790: IFFALSE 55794
// exit ;
55792: GO 55860
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
55794: LD_ADDR_VAR 0 1
55798: PUSH
55799: LD_VAR 0 1
55803: PPUSH
55804: LD_VAR 0 2
55808: PPUSH
55809: LD_VAR 0 1
55813: PUSH
55814: LD_VAR 0 3
55818: ARRAY
55819: PPUSH
55820: CALL_OW 1
55824: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
55825: LD_ADDR_VAR 0 1
55829: PUSH
55830: LD_VAR 0 1
55834: PPUSH
55835: LD_VAR 0 3
55839: PPUSH
55840: LD_VAR 0 5
55844: PPUSH
55845: CALL_OW 1
55849: ST_TO_ADDR
// result := list ;
55850: LD_ADDR_VAR 0 4
55854: PUSH
55855: LD_VAR 0 1
55859: ST_TO_ADDR
// end ;
55860: LD_VAR 0 4
55864: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
55865: LD_INT 0
55867: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
55868: LD_ADDR_VAR 0 5
55872: PUSH
55873: LD_VAR 0 1
55877: PPUSH
55878: CALL_OW 250
55882: PPUSH
55883: LD_VAR 0 1
55887: PPUSH
55888: CALL_OW 251
55892: PPUSH
55893: LD_VAR 0 2
55897: PPUSH
55898: LD_VAR 0 3
55902: PPUSH
55903: LD_VAR 0 4
55907: PPUSH
55908: CALL 55918 0 5
55912: ST_TO_ADDR
// end ;
55913: LD_VAR 0 5
55917: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
55918: LD_INT 0
55920: PPUSH
55921: PPUSH
55922: PPUSH
55923: PPUSH
// if not list then
55924: LD_VAR 0 3
55928: NOT
55929: IFFALSE 55933
// exit ;
55931: GO 56321
// result := [ ] ;
55933: LD_ADDR_VAR 0 6
55937: PUSH
55938: EMPTY
55939: ST_TO_ADDR
// for i in list do
55940: LD_ADDR_VAR 0 7
55944: PUSH
55945: LD_VAR 0 3
55949: PUSH
55950: FOR_IN
55951: IFFALSE 56153
// begin tmp := GetDistUnitXY ( i , x , y ) ;
55953: LD_ADDR_VAR 0 9
55957: PUSH
55958: LD_VAR 0 7
55962: PPUSH
55963: LD_VAR 0 1
55967: PPUSH
55968: LD_VAR 0 2
55972: PPUSH
55973: CALL_OW 297
55977: ST_TO_ADDR
// if not result then
55978: LD_VAR 0 6
55982: NOT
55983: IFFALSE 56009
// result := [ [ i , tmp ] ] else
55985: LD_ADDR_VAR 0 6
55989: PUSH
55990: LD_VAR 0 7
55994: PUSH
55995: LD_VAR 0 9
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: EMPTY
56005: LIST
56006: ST_TO_ADDR
56007: GO 56151
// begin if result [ result ] [ 2 ] < tmp then
56009: LD_VAR 0 6
56013: PUSH
56014: LD_VAR 0 6
56018: ARRAY
56019: PUSH
56020: LD_INT 2
56022: ARRAY
56023: PUSH
56024: LD_VAR 0 9
56028: LESS
56029: IFFALSE 56071
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
56031: LD_ADDR_VAR 0 6
56035: PUSH
56036: LD_VAR 0 6
56040: PPUSH
56041: LD_VAR 0 6
56045: PUSH
56046: LD_INT 1
56048: PLUS
56049: PPUSH
56050: LD_VAR 0 7
56054: PUSH
56055: LD_VAR 0 9
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PPUSH
56064: CALL_OW 2
56068: ST_TO_ADDR
56069: GO 56151
// for j = 1 to result do
56071: LD_ADDR_VAR 0 8
56075: PUSH
56076: DOUBLE
56077: LD_INT 1
56079: DEC
56080: ST_TO_ADDR
56081: LD_VAR 0 6
56085: PUSH
56086: FOR_TO
56087: IFFALSE 56149
// begin if tmp < result [ j ] [ 2 ] then
56089: LD_VAR 0 9
56093: PUSH
56094: LD_VAR 0 6
56098: PUSH
56099: LD_VAR 0 8
56103: ARRAY
56104: PUSH
56105: LD_INT 2
56107: ARRAY
56108: LESS
56109: IFFALSE 56147
// begin result := Insert ( result , j , [ i , tmp ] ) ;
56111: LD_ADDR_VAR 0 6
56115: PUSH
56116: LD_VAR 0 6
56120: PPUSH
56121: LD_VAR 0 8
56125: PPUSH
56126: LD_VAR 0 7
56130: PUSH
56131: LD_VAR 0 9
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PPUSH
56140: CALL_OW 2
56144: ST_TO_ADDR
// break ;
56145: GO 56149
// end ; end ;
56147: GO 56086
56149: POP
56150: POP
// end ; end ;
56151: GO 55950
56153: POP
56154: POP
// if result and not asc then
56155: LD_VAR 0 6
56159: PUSH
56160: LD_VAR 0 4
56164: NOT
56165: AND
56166: IFFALSE 56241
// begin tmp := result ;
56168: LD_ADDR_VAR 0 9
56172: PUSH
56173: LD_VAR 0 6
56177: ST_TO_ADDR
// for i = tmp downto 1 do
56178: LD_ADDR_VAR 0 7
56182: PUSH
56183: DOUBLE
56184: LD_VAR 0 9
56188: INC
56189: ST_TO_ADDR
56190: LD_INT 1
56192: PUSH
56193: FOR_DOWNTO
56194: IFFALSE 56239
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
56196: LD_ADDR_VAR 0 6
56200: PUSH
56201: LD_VAR 0 6
56205: PPUSH
56206: LD_VAR 0 9
56210: PUSH
56211: LD_VAR 0 7
56215: MINUS
56216: PUSH
56217: LD_INT 1
56219: PLUS
56220: PPUSH
56221: LD_VAR 0 9
56225: PUSH
56226: LD_VAR 0 7
56230: ARRAY
56231: PPUSH
56232: CALL_OW 1
56236: ST_TO_ADDR
56237: GO 56193
56239: POP
56240: POP
// end ; tmp := [ ] ;
56241: LD_ADDR_VAR 0 9
56245: PUSH
56246: EMPTY
56247: ST_TO_ADDR
// if mode then
56248: LD_VAR 0 5
56252: IFFALSE 56321
// begin for i = 1 to result do
56254: LD_ADDR_VAR 0 7
56258: PUSH
56259: DOUBLE
56260: LD_INT 1
56262: DEC
56263: ST_TO_ADDR
56264: LD_VAR 0 6
56268: PUSH
56269: FOR_TO
56270: IFFALSE 56309
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
56272: LD_ADDR_VAR 0 9
56276: PUSH
56277: LD_VAR 0 9
56281: PPUSH
56282: LD_VAR 0 7
56286: PPUSH
56287: LD_VAR 0 6
56291: PUSH
56292: LD_VAR 0 7
56296: ARRAY
56297: PUSH
56298: LD_INT 1
56300: ARRAY
56301: PPUSH
56302: CALL_OW 1
56306: ST_TO_ADDR
56307: GO 56269
56309: POP
56310: POP
// result := tmp ;
56311: LD_ADDR_VAR 0 6
56315: PUSH
56316: LD_VAR 0 9
56320: ST_TO_ADDR
// end ; end ;
56321: LD_VAR 0 6
56325: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
56326: LD_INT 0
56328: PPUSH
56329: PPUSH
56330: PPUSH
56331: PPUSH
56332: PPUSH
56333: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
56334: LD_ADDR_VAR 0 5
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: EMPTY
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: ST_TO_ADDR
// if not x or not y then
56356: LD_VAR 0 2
56360: NOT
56361: PUSH
56362: LD_VAR 0 3
56366: NOT
56367: OR
56368: IFFALSE 56372
// exit ;
56370: GO 58022
// if not range then
56372: LD_VAR 0 4
56376: NOT
56377: IFFALSE 56387
// range := 10 ;
56379: LD_ADDR_VAR 0 4
56383: PUSH
56384: LD_INT 10
56386: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
56387: LD_ADDR_VAR 0 8
56391: PUSH
56392: LD_INT 81
56394: PUSH
56395: LD_VAR 0 1
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 92
56406: PUSH
56407: LD_VAR 0 2
56411: PUSH
56412: LD_VAR 0 3
56416: PUSH
56417: LD_VAR 0 4
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 3
56430: PUSH
56431: LD_INT 21
56433: PUSH
56434: LD_INT 3
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: LIST
56449: PPUSH
56450: CALL_OW 69
56454: ST_TO_ADDR
// if not tmp then
56455: LD_VAR 0 8
56459: NOT
56460: IFFALSE 56464
// exit ;
56462: GO 58022
// for i in tmp do
56464: LD_ADDR_VAR 0 6
56468: PUSH
56469: LD_VAR 0 8
56473: PUSH
56474: FOR_IN
56475: IFFALSE 57997
// begin points := [ 0 , 0 , 0 ] ;
56477: LD_ADDR_VAR 0 9
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: LIST
56495: ST_TO_ADDR
// bpoints := 1 ;
56496: LD_ADDR_VAR 0 10
56500: PUSH
56501: LD_INT 1
56503: ST_TO_ADDR
// case GetType ( i ) of unit_human :
56504: LD_VAR 0 6
56508: PPUSH
56509: CALL_OW 247
56513: PUSH
56514: LD_INT 1
56516: DOUBLE
56517: EQUAL
56518: IFTRUE 56522
56520: GO 57100
56522: POP
// begin if GetClass ( i ) = 1 then
56523: LD_VAR 0 6
56527: PPUSH
56528: CALL_OW 257
56532: PUSH
56533: LD_INT 1
56535: EQUAL
56536: IFFALSE 56557
// points := [ 10 , 5 , 3 ] ;
56538: LD_ADDR_VAR 0 9
56542: PUSH
56543: LD_INT 10
56545: PUSH
56546: LD_INT 5
56548: PUSH
56549: LD_INT 3
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: LIST
56556: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
56557: LD_VAR 0 6
56561: PPUSH
56562: CALL_OW 257
56566: PUSH
56567: LD_INT 2
56569: PUSH
56570: LD_INT 3
56572: PUSH
56573: LD_INT 4
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: LIST
56580: IN
56581: IFFALSE 56602
// points := [ 3 , 2 , 1 ] ;
56583: LD_ADDR_VAR 0 9
56587: PUSH
56588: LD_INT 3
56590: PUSH
56591: LD_INT 2
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: LIST
56601: ST_TO_ADDR
// if GetClass ( i ) = 5 then
56602: LD_VAR 0 6
56606: PPUSH
56607: CALL_OW 257
56611: PUSH
56612: LD_INT 5
56614: EQUAL
56615: IFFALSE 56636
// points := [ 130 , 5 , 2 ] ;
56617: LD_ADDR_VAR 0 9
56621: PUSH
56622: LD_INT 130
56624: PUSH
56625: LD_INT 5
56627: PUSH
56628: LD_INT 2
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: LIST
56635: ST_TO_ADDR
// if GetClass ( i ) = 8 then
56636: LD_VAR 0 6
56640: PPUSH
56641: CALL_OW 257
56645: PUSH
56646: LD_INT 8
56648: EQUAL
56649: IFFALSE 56670
// points := [ 35 , 35 , 30 ] ;
56651: LD_ADDR_VAR 0 9
56655: PUSH
56656: LD_INT 35
56658: PUSH
56659: LD_INT 35
56661: PUSH
56662: LD_INT 30
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: LIST
56669: ST_TO_ADDR
// if GetClass ( i ) = 9 then
56670: LD_VAR 0 6
56674: PPUSH
56675: CALL_OW 257
56679: PUSH
56680: LD_INT 9
56682: EQUAL
56683: IFFALSE 56704
// points := [ 20 , 55 , 40 ] ;
56685: LD_ADDR_VAR 0 9
56689: PUSH
56690: LD_INT 20
56692: PUSH
56693: LD_INT 55
56695: PUSH
56696: LD_INT 40
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: LIST
56703: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
56704: LD_VAR 0 6
56708: PPUSH
56709: CALL_OW 257
56713: PUSH
56714: LD_INT 12
56716: PUSH
56717: LD_INT 16
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: IN
56724: IFFALSE 56745
// points := [ 5 , 3 , 2 ] ;
56726: LD_ADDR_VAR 0 9
56730: PUSH
56731: LD_INT 5
56733: PUSH
56734: LD_INT 3
56736: PUSH
56737: LD_INT 2
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: LIST
56744: ST_TO_ADDR
// if GetClass ( i ) = 17 then
56745: LD_VAR 0 6
56749: PPUSH
56750: CALL_OW 257
56754: PUSH
56755: LD_INT 17
56757: EQUAL
56758: IFFALSE 56779
// points := [ 100 , 50 , 75 ] ;
56760: LD_ADDR_VAR 0 9
56764: PUSH
56765: LD_INT 100
56767: PUSH
56768: LD_INT 50
56770: PUSH
56771: LD_INT 75
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: LIST
56778: ST_TO_ADDR
// if GetClass ( i ) = 15 then
56779: LD_VAR 0 6
56783: PPUSH
56784: CALL_OW 257
56788: PUSH
56789: LD_INT 15
56791: EQUAL
56792: IFFALSE 56813
// points := [ 10 , 5 , 3 ] ;
56794: LD_ADDR_VAR 0 9
56798: PUSH
56799: LD_INT 10
56801: PUSH
56802: LD_INT 5
56804: PUSH
56805: LD_INT 3
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: LIST
56812: ST_TO_ADDR
// if GetClass ( i ) = 14 then
56813: LD_VAR 0 6
56817: PPUSH
56818: CALL_OW 257
56822: PUSH
56823: LD_INT 14
56825: EQUAL
56826: IFFALSE 56847
// points := [ 10 , 0 , 0 ] ;
56828: LD_ADDR_VAR 0 9
56832: PUSH
56833: LD_INT 10
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: LIST
56846: ST_TO_ADDR
// if GetClass ( i ) = 11 then
56847: LD_VAR 0 6
56851: PPUSH
56852: CALL_OW 257
56856: PUSH
56857: LD_INT 11
56859: EQUAL
56860: IFFALSE 56881
// points := [ 30 , 10 , 5 ] ;
56862: LD_ADDR_VAR 0 9
56866: PUSH
56867: LD_INT 30
56869: PUSH
56870: LD_INT 10
56872: PUSH
56873: LD_INT 5
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: LIST
56880: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
56881: LD_VAR 0 1
56885: PPUSH
56886: LD_INT 5
56888: PPUSH
56889: CALL_OW 321
56893: PUSH
56894: LD_INT 2
56896: EQUAL
56897: IFFALSE 56914
// bpoints := bpoints * 1.8 ;
56899: LD_ADDR_VAR 0 10
56903: PUSH
56904: LD_VAR 0 10
56908: PUSH
56909: LD_REAL  1.80000000000000E+0000
56912: MUL
56913: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
56914: LD_VAR 0 6
56918: PPUSH
56919: CALL_OW 257
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: LD_INT 2
56929: PUSH
56930: LD_INT 3
56932: PUSH
56933: LD_INT 4
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: IN
56942: PUSH
56943: LD_VAR 0 1
56947: PPUSH
56948: LD_INT 51
56950: PPUSH
56951: CALL_OW 321
56955: PUSH
56956: LD_INT 2
56958: EQUAL
56959: AND
56960: IFFALSE 56977
// bpoints := bpoints * 1.2 ;
56962: LD_ADDR_VAR 0 10
56966: PUSH
56967: LD_VAR 0 10
56971: PUSH
56972: LD_REAL  1.20000000000000E+0000
56975: MUL
56976: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
56977: LD_VAR 0 6
56981: PPUSH
56982: CALL_OW 257
56986: PUSH
56987: LD_INT 5
56989: PUSH
56990: LD_INT 7
56992: PUSH
56993: LD_INT 9
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: LIST
57000: IN
57001: PUSH
57002: LD_VAR 0 1
57006: PPUSH
57007: LD_INT 52
57009: PPUSH
57010: CALL_OW 321
57014: PUSH
57015: LD_INT 2
57017: EQUAL
57018: AND
57019: IFFALSE 57036
// bpoints := bpoints * 1.5 ;
57021: LD_ADDR_VAR 0 10
57025: PUSH
57026: LD_VAR 0 10
57030: PUSH
57031: LD_REAL  1.50000000000000E+0000
57034: MUL
57035: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
57036: LD_VAR 0 1
57040: PPUSH
57041: LD_INT 66
57043: PPUSH
57044: CALL_OW 321
57048: PUSH
57049: LD_INT 2
57051: EQUAL
57052: IFFALSE 57069
// bpoints := bpoints * 1.1 ;
57054: LD_ADDR_VAR 0 10
57058: PUSH
57059: LD_VAR 0 10
57063: PUSH
57064: LD_REAL  1.10000000000000E+0000
57067: MUL
57068: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
57069: LD_ADDR_VAR 0 10
57073: PUSH
57074: LD_VAR 0 10
57078: PUSH
57079: LD_VAR 0 6
57083: PPUSH
57084: LD_INT 1
57086: PPUSH
57087: CALL_OW 259
57091: PUSH
57092: LD_REAL  1.15000000000000E+0000
57095: MUL
57096: MUL
57097: ST_TO_ADDR
// end ; unit_vehicle :
57098: GO 57926
57100: LD_INT 2
57102: DOUBLE
57103: EQUAL
57104: IFTRUE 57108
57106: GO 57914
57108: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
57109: LD_VAR 0 6
57113: PPUSH
57114: CALL_OW 264
57118: PUSH
57119: LD_INT 2
57121: PUSH
57122: LD_INT 42
57124: PUSH
57125: LD_INT 24
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: LIST
57132: IN
57133: IFFALSE 57154
// points := [ 25 , 5 , 3 ] ;
57135: LD_ADDR_VAR 0 9
57139: PUSH
57140: LD_INT 25
57142: PUSH
57143: LD_INT 5
57145: PUSH
57146: LD_INT 3
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: LIST
57153: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
57154: LD_VAR 0 6
57158: PPUSH
57159: CALL_OW 264
57163: PUSH
57164: LD_INT 4
57166: PUSH
57167: LD_INT 43
57169: PUSH
57170: LD_INT 25
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: LIST
57177: IN
57178: IFFALSE 57199
// points := [ 40 , 15 , 5 ] ;
57180: LD_ADDR_VAR 0 9
57184: PUSH
57185: LD_INT 40
57187: PUSH
57188: LD_INT 15
57190: PUSH
57191: LD_INT 5
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: LIST
57198: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
57199: LD_VAR 0 6
57203: PPUSH
57204: CALL_OW 264
57208: PUSH
57209: LD_INT 3
57211: PUSH
57212: LD_INT 23
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: IN
57219: IFFALSE 57240
// points := [ 7 , 25 , 8 ] ;
57221: LD_ADDR_VAR 0 9
57225: PUSH
57226: LD_INT 7
57228: PUSH
57229: LD_INT 25
57231: PUSH
57232: LD_INT 8
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: LIST
57239: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
57240: LD_VAR 0 6
57244: PPUSH
57245: CALL_OW 264
57249: PUSH
57250: LD_INT 5
57252: PUSH
57253: LD_INT 27
57255: PUSH
57256: LD_INT 44
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: LIST
57263: IN
57264: IFFALSE 57285
// points := [ 14 , 50 , 16 ] ;
57266: LD_ADDR_VAR 0 9
57270: PUSH
57271: LD_INT 14
57273: PUSH
57274: LD_INT 50
57276: PUSH
57277: LD_INT 16
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: LIST
57284: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
57285: LD_VAR 0 6
57289: PPUSH
57290: CALL_OW 264
57294: PUSH
57295: LD_INT 6
57297: PUSH
57298: LD_INT 46
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: IN
57305: IFFALSE 57326
// points := [ 32 , 120 , 70 ] ;
57307: LD_ADDR_VAR 0 9
57311: PUSH
57312: LD_INT 32
57314: PUSH
57315: LD_INT 120
57317: PUSH
57318: LD_INT 70
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: LIST
57325: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
57326: LD_VAR 0 6
57330: PPUSH
57331: CALL_OW 264
57335: PUSH
57336: LD_INT 7
57338: PUSH
57339: LD_INT 28
57341: PUSH
57342: LD_INT 45
57344: PUSH
57345: LD_INT 92
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: IN
57354: IFFALSE 57375
// points := [ 35 , 20 , 45 ] ;
57356: LD_ADDR_VAR 0 9
57360: PUSH
57361: LD_INT 35
57363: PUSH
57364: LD_INT 20
57366: PUSH
57367: LD_INT 45
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: LIST
57374: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
57375: LD_VAR 0 6
57379: PPUSH
57380: CALL_OW 264
57384: PUSH
57385: LD_INT 47
57387: PUSH
57388: EMPTY
57389: LIST
57390: IN
57391: IFFALSE 57412
// points := [ 67 , 45 , 75 ] ;
57393: LD_ADDR_VAR 0 9
57397: PUSH
57398: LD_INT 67
57400: PUSH
57401: LD_INT 45
57403: PUSH
57404: LD_INT 75
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: LIST
57411: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
57412: LD_VAR 0 6
57416: PPUSH
57417: CALL_OW 264
57421: PUSH
57422: LD_INT 26
57424: PUSH
57425: EMPTY
57426: LIST
57427: IN
57428: IFFALSE 57449
// points := [ 120 , 30 , 80 ] ;
57430: LD_ADDR_VAR 0 9
57434: PUSH
57435: LD_INT 120
57437: PUSH
57438: LD_INT 30
57440: PUSH
57441: LD_INT 80
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: LIST
57448: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
57449: LD_VAR 0 6
57453: PPUSH
57454: CALL_OW 264
57458: PUSH
57459: LD_INT 22
57461: PUSH
57462: EMPTY
57463: LIST
57464: IN
57465: IFFALSE 57486
// points := [ 40 , 1 , 1 ] ;
57467: LD_ADDR_VAR 0 9
57471: PUSH
57472: LD_INT 40
57474: PUSH
57475: LD_INT 1
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: LIST
57485: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
57486: LD_VAR 0 6
57490: PPUSH
57491: CALL_OW 264
57495: PUSH
57496: LD_INT 29
57498: PUSH
57499: EMPTY
57500: LIST
57501: IN
57502: IFFALSE 57523
// points := [ 70 , 200 , 400 ] ;
57504: LD_ADDR_VAR 0 9
57508: PUSH
57509: LD_INT 70
57511: PUSH
57512: LD_INT 200
57514: PUSH
57515: LD_INT 400
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: LIST
57522: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
57523: LD_VAR 0 6
57527: PPUSH
57528: CALL_OW 264
57532: PUSH
57533: LD_INT 14
57535: PUSH
57536: LD_INT 53
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: IN
57543: IFFALSE 57564
// points := [ 40 , 10 , 20 ] ;
57545: LD_ADDR_VAR 0 9
57549: PUSH
57550: LD_INT 40
57552: PUSH
57553: LD_INT 10
57555: PUSH
57556: LD_INT 20
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: LIST
57563: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
57564: LD_VAR 0 6
57568: PPUSH
57569: CALL_OW 264
57573: PUSH
57574: LD_INT 9
57576: PUSH
57577: EMPTY
57578: LIST
57579: IN
57580: IFFALSE 57601
// points := [ 5 , 70 , 20 ] ;
57582: LD_ADDR_VAR 0 9
57586: PUSH
57587: LD_INT 5
57589: PUSH
57590: LD_INT 70
57592: PUSH
57593: LD_INT 20
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: LIST
57600: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
57601: LD_VAR 0 6
57605: PPUSH
57606: CALL_OW 264
57610: PUSH
57611: LD_INT 10
57613: PUSH
57614: EMPTY
57615: LIST
57616: IN
57617: IFFALSE 57638
// points := [ 35 , 110 , 70 ] ;
57619: LD_ADDR_VAR 0 9
57623: PUSH
57624: LD_INT 35
57626: PUSH
57627: LD_INT 110
57629: PUSH
57630: LD_INT 70
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: LIST
57637: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
57638: LD_VAR 0 6
57642: PPUSH
57643: CALL_OW 265
57647: PUSH
57648: LD_INT 25
57650: EQUAL
57651: IFFALSE 57672
// points := [ 80 , 65 , 100 ] ;
57653: LD_ADDR_VAR 0 9
57657: PUSH
57658: LD_INT 80
57660: PUSH
57661: LD_INT 65
57663: PUSH
57664: LD_INT 100
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: LIST
57671: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
57672: LD_VAR 0 6
57676: PPUSH
57677: CALL_OW 263
57681: PUSH
57682: LD_INT 1
57684: EQUAL
57685: IFFALSE 57720
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
57687: LD_ADDR_VAR 0 10
57691: PUSH
57692: LD_VAR 0 10
57696: PUSH
57697: LD_VAR 0 6
57701: PPUSH
57702: CALL_OW 311
57706: PPUSH
57707: LD_INT 3
57709: PPUSH
57710: CALL_OW 259
57714: PUSH
57715: LD_INT 4
57717: MUL
57718: MUL
57719: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
57720: LD_VAR 0 6
57724: PPUSH
57725: CALL_OW 263
57729: PUSH
57730: LD_INT 2
57732: EQUAL
57733: IFFALSE 57784
// begin j := IsControledBy ( i ) ;
57735: LD_ADDR_VAR 0 7
57739: PUSH
57740: LD_VAR 0 6
57744: PPUSH
57745: CALL_OW 312
57749: ST_TO_ADDR
// if j then
57750: LD_VAR 0 7
57754: IFFALSE 57784
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
57756: LD_ADDR_VAR 0 10
57760: PUSH
57761: LD_VAR 0 10
57765: PUSH
57766: LD_VAR 0 7
57770: PPUSH
57771: LD_INT 3
57773: PPUSH
57774: CALL_OW 259
57778: PUSH
57779: LD_INT 3
57781: MUL
57782: MUL
57783: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
57784: LD_VAR 0 6
57788: PPUSH
57789: CALL_OW 264
57793: PUSH
57794: LD_INT 5
57796: PUSH
57797: LD_INT 6
57799: PUSH
57800: LD_INT 46
57802: PUSH
57803: LD_INT 44
57805: PUSH
57806: LD_INT 47
57808: PUSH
57809: LD_INT 45
57811: PUSH
57812: LD_INT 28
57814: PUSH
57815: LD_INT 7
57817: PUSH
57818: LD_INT 27
57820: PUSH
57821: LD_INT 29
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: IN
57836: PUSH
57837: LD_VAR 0 1
57841: PPUSH
57842: LD_INT 52
57844: PPUSH
57845: CALL_OW 321
57849: PUSH
57850: LD_INT 2
57852: EQUAL
57853: AND
57854: IFFALSE 57871
// bpoints := bpoints * 1.2 ;
57856: LD_ADDR_VAR 0 10
57860: PUSH
57861: LD_VAR 0 10
57865: PUSH
57866: LD_REAL  1.20000000000000E+0000
57869: MUL
57870: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
57871: LD_VAR 0 6
57875: PPUSH
57876: CALL_OW 264
57880: PUSH
57881: LD_INT 6
57883: PUSH
57884: LD_INT 46
57886: PUSH
57887: LD_INT 47
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: LIST
57894: IN
57895: IFFALSE 57912
// bpoints := bpoints * 1.2 ;
57897: LD_ADDR_VAR 0 10
57901: PUSH
57902: LD_VAR 0 10
57906: PUSH
57907: LD_REAL  1.20000000000000E+0000
57910: MUL
57911: ST_TO_ADDR
// end ; unit_building :
57912: GO 57926
57914: LD_INT 3
57916: DOUBLE
57917: EQUAL
57918: IFTRUE 57922
57920: GO 57925
57922: POP
// ; end ;
57923: GO 57926
57925: POP
// for j = 1 to 3 do
57926: LD_ADDR_VAR 0 7
57930: PUSH
57931: DOUBLE
57932: LD_INT 1
57934: DEC
57935: ST_TO_ADDR
57936: LD_INT 3
57938: PUSH
57939: FOR_TO
57940: IFFALSE 57993
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
57942: LD_ADDR_VAR 0 5
57946: PUSH
57947: LD_VAR 0 5
57951: PPUSH
57952: LD_VAR 0 7
57956: PPUSH
57957: LD_VAR 0 5
57961: PUSH
57962: LD_VAR 0 7
57966: ARRAY
57967: PUSH
57968: LD_VAR 0 9
57972: PUSH
57973: LD_VAR 0 7
57977: ARRAY
57978: PUSH
57979: LD_VAR 0 10
57983: MUL
57984: PLUS
57985: PPUSH
57986: CALL_OW 1
57990: ST_TO_ADDR
57991: GO 57939
57993: POP
57994: POP
// end ;
57995: GO 56474
57997: POP
57998: POP
// result := Replace ( result , 4 , tmp ) ;
57999: LD_ADDR_VAR 0 5
58003: PUSH
58004: LD_VAR 0 5
58008: PPUSH
58009: LD_INT 4
58011: PPUSH
58012: LD_VAR 0 8
58016: PPUSH
58017: CALL_OW 1
58021: ST_TO_ADDR
// end ;
58022: LD_VAR 0 5
58026: RET
// export function DangerAtRange ( unit , range ) ; begin
58027: LD_INT 0
58029: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
58030: LD_ADDR_VAR 0 3
58034: PUSH
58035: LD_VAR 0 1
58039: PPUSH
58040: CALL_OW 255
58044: PPUSH
58045: LD_VAR 0 1
58049: PPUSH
58050: CALL_OW 250
58054: PPUSH
58055: LD_VAR 0 1
58059: PPUSH
58060: CALL_OW 251
58064: PPUSH
58065: LD_VAR 0 2
58069: PPUSH
58070: CALL 56326 0 4
58074: ST_TO_ADDR
// end ;
58075: LD_VAR 0 3
58079: RET
// export function DangerInArea ( side , area ) ; begin
58080: LD_INT 0
58082: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
58083: LD_ADDR_VAR 0 3
58087: PUSH
58088: LD_VAR 0 2
58092: PPUSH
58093: LD_INT 81
58095: PUSH
58096: LD_VAR 0 1
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PPUSH
58105: CALL_OW 70
58109: ST_TO_ADDR
// end ;
58110: LD_VAR 0 3
58114: RET
// export function IsExtension ( b ) ; begin
58115: LD_INT 0
58117: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
58118: LD_ADDR_VAR 0 2
58122: PUSH
58123: LD_VAR 0 1
58127: PUSH
58128: LD_INT 23
58130: PUSH
58131: LD_INT 20
58133: PUSH
58134: LD_INT 22
58136: PUSH
58137: LD_INT 17
58139: PUSH
58140: LD_INT 24
58142: PUSH
58143: LD_INT 21
58145: PUSH
58146: LD_INT 19
58148: PUSH
58149: LD_INT 16
58151: PUSH
58152: LD_INT 25
58154: PUSH
58155: LD_INT 18
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: IN
58170: ST_TO_ADDR
// end ;
58171: LD_VAR 0 2
58175: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
58176: LD_INT 0
58178: PPUSH
58179: PPUSH
58180: PPUSH
// result := [ ] ;
58181: LD_ADDR_VAR 0 4
58185: PUSH
58186: EMPTY
58187: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
58188: LD_ADDR_VAR 0 5
58192: PUSH
58193: LD_VAR 0 2
58197: PPUSH
58198: LD_INT 21
58200: PUSH
58201: LD_INT 3
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PPUSH
58208: CALL_OW 70
58212: ST_TO_ADDR
// if not tmp then
58213: LD_VAR 0 5
58217: NOT
58218: IFFALSE 58222
// exit ;
58220: GO 58286
// if checkLink then
58222: LD_VAR 0 3
58226: IFFALSE 58276
// begin for i in tmp do
58228: LD_ADDR_VAR 0 6
58232: PUSH
58233: LD_VAR 0 5
58237: PUSH
58238: FOR_IN
58239: IFFALSE 58274
// if GetBase ( i ) <> base then
58241: LD_VAR 0 6
58245: PPUSH
58246: CALL_OW 274
58250: PUSH
58251: LD_VAR 0 1
58255: NONEQUAL
58256: IFFALSE 58272
// ComLinkToBase ( base , i ) ;
58258: LD_VAR 0 1
58262: PPUSH
58263: LD_VAR 0 6
58267: PPUSH
58268: CALL_OW 169
58272: GO 58238
58274: POP
58275: POP
// end ; result := tmp ;
58276: LD_ADDR_VAR 0 4
58280: PUSH
58281: LD_VAR 0 5
58285: ST_TO_ADDR
// end ;
58286: LD_VAR 0 4
58290: RET
// export function ComComplete ( units , b ) ; var i ; begin
58291: LD_INT 0
58293: PPUSH
58294: PPUSH
// if not units then
58295: LD_VAR 0 1
58299: NOT
58300: IFFALSE 58304
// exit ;
58302: GO 58394
// for i in units do
58304: LD_ADDR_VAR 0 4
58308: PUSH
58309: LD_VAR 0 1
58313: PUSH
58314: FOR_IN
58315: IFFALSE 58392
// if BuildingStatus ( b ) = bs_build then
58317: LD_VAR 0 2
58321: PPUSH
58322: CALL_OW 461
58326: PUSH
58327: LD_INT 1
58329: EQUAL
58330: IFFALSE 58390
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
58332: LD_VAR 0 4
58336: PPUSH
58337: LD_STRING h
58339: PUSH
58340: LD_VAR 0 2
58344: PPUSH
58345: CALL_OW 250
58349: PUSH
58350: LD_VAR 0 2
58354: PPUSH
58355: CALL_OW 251
58359: PUSH
58360: LD_VAR 0 2
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: PUSH
58383: EMPTY
58384: LIST
58385: PPUSH
58386: CALL_OW 446
58390: GO 58314
58392: POP
58393: POP
// end ;
58394: LD_VAR 0 3
58398: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
58399: LD_INT 0
58401: PPUSH
58402: PPUSH
58403: PPUSH
58404: PPUSH
58405: PPUSH
58406: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
58407: LD_VAR 0 1
58411: NOT
58412: PUSH
58413: LD_VAR 0 1
58417: PPUSH
58418: CALL_OW 263
58422: PUSH
58423: LD_INT 2
58425: NONEQUAL
58426: OR
58427: IFFALSE 58431
// exit ;
58429: GO 58747
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
58431: LD_ADDR_VAR 0 6
58435: PUSH
58436: LD_INT 22
58438: PUSH
58439: LD_VAR 0 1
58443: PPUSH
58444: CALL_OW 255
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 2
58455: PUSH
58456: LD_INT 30
58458: PUSH
58459: LD_INT 36
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 34
58468: PUSH
58469: LD_INT 31
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: LIST
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PPUSH
58485: CALL_OW 69
58489: ST_TO_ADDR
// if not tmp then
58490: LD_VAR 0 6
58494: NOT
58495: IFFALSE 58499
// exit ;
58497: GO 58747
// result := [ ] ;
58499: LD_ADDR_VAR 0 2
58503: PUSH
58504: EMPTY
58505: ST_TO_ADDR
// for i in tmp do
58506: LD_ADDR_VAR 0 3
58510: PUSH
58511: LD_VAR 0 6
58515: PUSH
58516: FOR_IN
58517: IFFALSE 58588
// begin t := UnitsInside ( i ) ;
58519: LD_ADDR_VAR 0 4
58523: PUSH
58524: LD_VAR 0 3
58528: PPUSH
58529: CALL_OW 313
58533: ST_TO_ADDR
// if t then
58534: LD_VAR 0 4
58538: IFFALSE 58586
// for j in t do
58540: LD_ADDR_VAR 0 7
58544: PUSH
58545: LD_VAR 0 4
58549: PUSH
58550: FOR_IN
58551: IFFALSE 58584
// result := Replace ( result , result + 1 , j ) ;
58553: LD_ADDR_VAR 0 2
58557: PUSH
58558: LD_VAR 0 2
58562: PPUSH
58563: LD_VAR 0 2
58567: PUSH
58568: LD_INT 1
58570: PLUS
58571: PPUSH
58572: LD_VAR 0 7
58576: PPUSH
58577: CALL_OW 1
58581: ST_TO_ADDR
58582: GO 58550
58584: POP
58585: POP
// end ;
58586: GO 58516
58588: POP
58589: POP
// if not result then
58590: LD_VAR 0 2
58594: NOT
58595: IFFALSE 58599
// exit ;
58597: GO 58747
// mech := result [ 1 ] ;
58599: LD_ADDR_VAR 0 5
58603: PUSH
58604: LD_VAR 0 2
58608: PUSH
58609: LD_INT 1
58611: ARRAY
58612: ST_TO_ADDR
// if result > 1 then
58613: LD_VAR 0 2
58617: PUSH
58618: LD_INT 1
58620: GREATER
58621: IFFALSE 58733
// begin for i = 2 to result do
58623: LD_ADDR_VAR 0 3
58627: PUSH
58628: DOUBLE
58629: LD_INT 2
58631: DEC
58632: ST_TO_ADDR
58633: LD_VAR 0 2
58637: PUSH
58638: FOR_TO
58639: IFFALSE 58731
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
58641: LD_ADDR_VAR 0 4
58645: PUSH
58646: LD_VAR 0 2
58650: PUSH
58651: LD_VAR 0 3
58655: ARRAY
58656: PPUSH
58657: LD_INT 3
58659: PPUSH
58660: CALL_OW 259
58664: PUSH
58665: LD_VAR 0 2
58669: PUSH
58670: LD_VAR 0 3
58674: ARRAY
58675: PPUSH
58676: CALL_OW 432
58680: MINUS
58681: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
58682: LD_VAR 0 4
58686: PUSH
58687: LD_VAR 0 5
58691: PPUSH
58692: LD_INT 3
58694: PPUSH
58695: CALL_OW 259
58699: PUSH
58700: LD_VAR 0 5
58704: PPUSH
58705: CALL_OW 432
58709: MINUS
58710: GREATEREQUAL
58711: IFFALSE 58729
// mech := result [ i ] ;
58713: LD_ADDR_VAR 0 5
58717: PUSH
58718: LD_VAR 0 2
58722: PUSH
58723: LD_VAR 0 3
58727: ARRAY
58728: ST_TO_ADDR
// end ;
58729: GO 58638
58731: POP
58732: POP
// end ; ComLinkTo ( vehicle , mech ) ;
58733: LD_VAR 0 1
58737: PPUSH
58738: LD_VAR 0 5
58742: PPUSH
58743: CALL_OW 135
// end ;
58747: LD_VAR 0 2
58751: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
58752: LD_INT 0
58754: PPUSH
58755: PPUSH
58756: PPUSH
58757: PPUSH
58758: PPUSH
58759: PPUSH
58760: PPUSH
58761: PPUSH
58762: PPUSH
58763: PPUSH
58764: PPUSH
58765: PPUSH
58766: PPUSH
// result := [ ] ;
58767: LD_ADDR_VAR 0 7
58771: PUSH
58772: EMPTY
58773: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
58774: LD_VAR 0 1
58778: PPUSH
58779: CALL_OW 266
58783: PUSH
58784: LD_INT 0
58786: PUSH
58787: LD_INT 1
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: IN
58794: NOT
58795: IFFALSE 58799
// exit ;
58797: GO 60433
// if name then
58799: LD_VAR 0 3
58803: IFFALSE 58819
// SetBName ( base_dep , name ) ;
58805: LD_VAR 0 1
58809: PPUSH
58810: LD_VAR 0 3
58814: PPUSH
58815: CALL_OW 500
// base := GetBase ( base_dep ) ;
58819: LD_ADDR_VAR 0 15
58823: PUSH
58824: LD_VAR 0 1
58828: PPUSH
58829: CALL_OW 274
58833: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
58834: LD_ADDR_VAR 0 16
58838: PUSH
58839: LD_VAR 0 1
58843: PPUSH
58844: CALL_OW 255
58848: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
58849: LD_ADDR_VAR 0 17
58853: PUSH
58854: LD_VAR 0 1
58858: PPUSH
58859: CALL_OW 248
58863: ST_TO_ADDR
// if sources then
58864: LD_VAR 0 5
58868: IFFALSE 58915
// for i = 1 to 3 do
58870: LD_ADDR_VAR 0 8
58874: PUSH
58875: DOUBLE
58876: LD_INT 1
58878: DEC
58879: ST_TO_ADDR
58880: LD_INT 3
58882: PUSH
58883: FOR_TO
58884: IFFALSE 58913
// AddResourceType ( base , i , sources [ i ] ) ;
58886: LD_VAR 0 15
58890: PPUSH
58891: LD_VAR 0 8
58895: PPUSH
58896: LD_VAR 0 5
58900: PUSH
58901: LD_VAR 0 8
58905: ARRAY
58906: PPUSH
58907: CALL_OW 276
58911: GO 58883
58913: POP
58914: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
58915: LD_ADDR_VAR 0 18
58919: PUSH
58920: LD_VAR 0 15
58924: PPUSH
58925: LD_VAR 0 2
58929: PPUSH
58930: LD_INT 1
58932: PPUSH
58933: CALL 58176 0 3
58937: ST_TO_ADDR
// InitHc ;
58938: CALL_OW 19
// InitUc ;
58942: CALL_OW 18
// uc_side := side ;
58946: LD_ADDR_OWVAR 20
58950: PUSH
58951: LD_VAR 0 16
58955: ST_TO_ADDR
// uc_nation := nation ;
58956: LD_ADDR_OWVAR 21
58960: PUSH
58961: LD_VAR 0 17
58965: ST_TO_ADDR
// if buildings then
58966: LD_VAR 0 18
58970: IFFALSE 60292
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
58972: LD_ADDR_VAR 0 19
58976: PUSH
58977: LD_VAR 0 18
58981: PPUSH
58982: LD_INT 2
58984: PUSH
58985: LD_INT 30
58987: PUSH
58988: LD_INT 29
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 30
58997: PUSH
58998: LD_INT 30
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: LIST
59009: PPUSH
59010: CALL_OW 72
59014: ST_TO_ADDR
// if tmp then
59015: LD_VAR 0 19
59019: IFFALSE 59067
// for i in tmp do
59021: LD_ADDR_VAR 0 8
59025: PUSH
59026: LD_VAR 0 19
59030: PUSH
59031: FOR_IN
59032: IFFALSE 59065
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
59034: LD_VAR 0 8
59038: PPUSH
59039: CALL_OW 250
59043: PPUSH
59044: LD_VAR 0 8
59048: PPUSH
59049: CALL_OW 251
59053: PPUSH
59054: LD_VAR 0 16
59058: PPUSH
59059: CALL_OW 441
59063: GO 59031
59065: POP
59066: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
59067: LD_VAR 0 18
59071: PPUSH
59072: LD_INT 2
59074: PUSH
59075: LD_INT 30
59077: PUSH
59078: LD_INT 32
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 30
59087: PUSH
59088: LD_INT 33
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: LIST
59099: PPUSH
59100: CALL_OW 72
59104: IFFALSE 59192
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
59106: LD_ADDR_VAR 0 8
59110: PUSH
59111: LD_VAR 0 18
59115: PPUSH
59116: LD_INT 2
59118: PUSH
59119: LD_INT 30
59121: PUSH
59122: LD_INT 32
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 30
59131: PUSH
59132: LD_INT 33
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: LIST
59143: PPUSH
59144: CALL_OW 72
59148: PUSH
59149: FOR_IN
59150: IFFALSE 59190
// begin if not GetBWeapon ( i ) then
59152: LD_VAR 0 8
59156: PPUSH
59157: CALL_OW 269
59161: NOT
59162: IFFALSE 59188
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
59164: LD_VAR 0 8
59168: PPUSH
59169: LD_VAR 0 8
59173: PPUSH
59174: LD_VAR 0 2
59178: PPUSH
59179: CALL 60438 0 2
59183: PPUSH
59184: CALL_OW 431
// end ;
59188: GO 59149
59190: POP
59191: POP
// end ; for i = 1 to personel do
59192: LD_ADDR_VAR 0 8
59196: PUSH
59197: DOUBLE
59198: LD_INT 1
59200: DEC
59201: ST_TO_ADDR
59202: LD_VAR 0 6
59206: PUSH
59207: FOR_TO
59208: IFFALSE 60272
// begin if i > 4 then
59210: LD_VAR 0 8
59214: PUSH
59215: LD_INT 4
59217: GREATER
59218: IFFALSE 59222
// break ;
59220: GO 60272
// case i of 1 :
59222: LD_VAR 0 8
59226: PUSH
59227: LD_INT 1
59229: DOUBLE
59230: EQUAL
59231: IFTRUE 59235
59233: GO 59315
59235: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
59236: LD_ADDR_VAR 0 12
59240: PUSH
59241: LD_VAR 0 18
59245: PPUSH
59246: LD_INT 22
59248: PUSH
59249: LD_VAR 0 16
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 58
59260: PUSH
59261: EMPTY
59262: LIST
59263: PUSH
59264: LD_INT 2
59266: PUSH
59267: LD_INT 30
59269: PUSH
59270: LD_INT 32
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 30
59279: PUSH
59280: LD_INT 4
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 30
59289: PUSH
59290: LD_INT 5
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: LIST
59307: PPUSH
59308: CALL_OW 72
59312: ST_TO_ADDR
59313: GO 59537
59315: LD_INT 2
59317: DOUBLE
59318: EQUAL
59319: IFTRUE 59323
59321: GO 59385
59323: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
59324: LD_ADDR_VAR 0 12
59328: PUSH
59329: LD_VAR 0 18
59333: PPUSH
59334: LD_INT 22
59336: PUSH
59337: LD_VAR 0 16
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 2
59348: PUSH
59349: LD_INT 30
59351: PUSH
59352: LD_INT 0
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 30
59361: PUSH
59362: LD_INT 1
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: LIST
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PPUSH
59378: CALL_OW 72
59382: ST_TO_ADDR
59383: GO 59537
59385: LD_INT 3
59387: DOUBLE
59388: EQUAL
59389: IFTRUE 59393
59391: GO 59455
59393: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
59394: LD_ADDR_VAR 0 12
59398: PUSH
59399: LD_VAR 0 18
59403: PPUSH
59404: LD_INT 22
59406: PUSH
59407: LD_VAR 0 16
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 2
59418: PUSH
59419: LD_INT 30
59421: PUSH
59422: LD_INT 2
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 30
59431: PUSH
59432: LD_INT 3
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: LIST
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PPUSH
59448: CALL_OW 72
59452: ST_TO_ADDR
59453: GO 59537
59455: LD_INT 4
59457: DOUBLE
59458: EQUAL
59459: IFTRUE 59463
59461: GO 59536
59463: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
59464: LD_ADDR_VAR 0 12
59468: PUSH
59469: LD_VAR 0 18
59473: PPUSH
59474: LD_INT 22
59476: PUSH
59477: LD_VAR 0 16
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 2
59488: PUSH
59489: LD_INT 30
59491: PUSH
59492: LD_INT 6
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 30
59501: PUSH
59502: LD_INT 7
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 30
59511: PUSH
59512: LD_INT 8
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PPUSH
59529: CALL_OW 72
59533: ST_TO_ADDR
59534: GO 59537
59536: POP
// if i = 1 then
59537: LD_VAR 0 8
59541: PUSH
59542: LD_INT 1
59544: EQUAL
59545: IFFALSE 59656
// begin tmp := [ ] ;
59547: LD_ADDR_VAR 0 19
59551: PUSH
59552: EMPTY
59553: ST_TO_ADDR
// for j in f do
59554: LD_ADDR_VAR 0 9
59558: PUSH
59559: LD_VAR 0 12
59563: PUSH
59564: FOR_IN
59565: IFFALSE 59638
// if GetBType ( j ) = b_bunker then
59567: LD_VAR 0 9
59571: PPUSH
59572: CALL_OW 266
59576: PUSH
59577: LD_INT 32
59579: EQUAL
59580: IFFALSE 59607
// tmp := Insert ( tmp , 1 , j ) else
59582: LD_ADDR_VAR 0 19
59586: PUSH
59587: LD_VAR 0 19
59591: PPUSH
59592: LD_INT 1
59594: PPUSH
59595: LD_VAR 0 9
59599: PPUSH
59600: CALL_OW 2
59604: ST_TO_ADDR
59605: GO 59636
// tmp := Insert ( tmp , tmp + 1 , j ) ;
59607: LD_ADDR_VAR 0 19
59611: PUSH
59612: LD_VAR 0 19
59616: PPUSH
59617: LD_VAR 0 19
59621: PUSH
59622: LD_INT 1
59624: PLUS
59625: PPUSH
59626: LD_VAR 0 9
59630: PPUSH
59631: CALL_OW 2
59635: ST_TO_ADDR
59636: GO 59564
59638: POP
59639: POP
// if tmp then
59640: LD_VAR 0 19
59644: IFFALSE 59656
// f := tmp ;
59646: LD_ADDR_VAR 0 12
59650: PUSH
59651: LD_VAR 0 19
59655: ST_TO_ADDR
// end ; x := personel [ i ] ;
59656: LD_ADDR_VAR 0 13
59660: PUSH
59661: LD_VAR 0 6
59665: PUSH
59666: LD_VAR 0 8
59670: ARRAY
59671: ST_TO_ADDR
// if x = - 1 then
59672: LD_VAR 0 13
59676: PUSH
59677: LD_INT 1
59679: NEG
59680: EQUAL
59681: IFFALSE 59890
// begin for j in f do
59683: LD_ADDR_VAR 0 9
59687: PUSH
59688: LD_VAR 0 12
59692: PUSH
59693: FOR_IN
59694: IFFALSE 59886
// repeat InitHc ;
59696: CALL_OW 19
// if GetBType ( j ) = b_barracks then
59700: LD_VAR 0 9
59704: PPUSH
59705: CALL_OW 266
59709: PUSH
59710: LD_INT 5
59712: EQUAL
59713: IFFALSE 59783
// begin if UnitsInside ( j ) < 3 then
59715: LD_VAR 0 9
59719: PPUSH
59720: CALL_OW 313
59724: PUSH
59725: LD_INT 3
59727: LESS
59728: IFFALSE 59764
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
59730: LD_INT 0
59732: PPUSH
59733: LD_INT 5
59735: PUSH
59736: LD_INT 8
59738: PUSH
59739: LD_INT 9
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: LIST
59746: PUSH
59747: LD_VAR 0 17
59751: ARRAY
59752: PPUSH
59753: LD_VAR 0 4
59757: PPUSH
59758: CALL_OW 380
59762: GO 59781
// PrepareHuman ( false , i , skill ) ;
59764: LD_INT 0
59766: PPUSH
59767: LD_VAR 0 8
59771: PPUSH
59772: LD_VAR 0 4
59776: PPUSH
59777: CALL_OW 380
// end else
59781: GO 59800
// PrepareHuman ( false , i , skill ) ;
59783: LD_INT 0
59785: PPUSH
59786: LD_VAR 0 8
59790: PPUSH
59791: LD_VAR 0 4
59795: PPUSH
59796: CALL_OW 380
// un := CreateHuman ;
59800: LD_ADDR_VAR 0 14
59804: PUSH
59805: CALL_OW 44
59809: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59810: LD_ADDR_VAR 0 7
59814: PUSH
59815: LD_VAR 0 7
59819: PPUSH
59820: LD_INT 1
59822: PPUSH
59823: LD_VAR 0 14
59827: PPUSH
59828: CALL_OW 2
59832: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
59833: LD_VAR 0 14
59837: PPUSH
59838: LD_VAR 0 9
59842: PPUSH
59843: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
59847: LD_VAR 0 9
59851: PPUSH
59852: CALL_OW 313
59856: PUSH
59857: LD_INT 6
59859: EQUAL
59860: PUSH
59861: LD_VAR 0 9
59865: PPUSH
59866: CALL_OW 266
59870: PUSH
59871: LD_INT 32
59873: PUSH
59874: LD_INT 31
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: IN
59881: OR
59882: IFFALSE 59696
59884: GO 59693
59886: POP
59887: POP
// end else
59888: GO 60270
// for j = 1 to x do
59890: LD_ADDR_VAR 0 9
59894: PUSH
59895: DOUBLE
59896: LD_INT 1
59898: DEC
59899: ST_TO_ADDR
59900: LD_VAR 0 13
59904: PUSH
59905: FOR_TO
59906: IFFALSE 60268
// begin InitHc ;
59908: CALL_OW 19
// if not f then
59912: LD_VAR 0 12
59916: NOT
59917: IFFALSE 60006
// begin PrepareHuman ( false , i , skill ) ;
59919: LD_INT 0
59921: PPUSH
59922: LD_VAR 0 8
59926: PPUSH
59927: LD_VAR 0 4
59931: PPUSH
59932: CALL_OW 380
// un := CreateHuman ;
59936: LD_ADDR_VAR 0 14
59940: PUSH
59941: CALL_OW 44
59945: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59946: LD_ADDR_VAR 0 7
59950: PUSH
59951: LD_VAR 0 7
59955: PPUSH
59956: LD_INT 1
59958: PPUSH
59959: LD_VAR 0 14
59963: PPUSH
59964: CALL_OW 2
59968: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
59969: LD_VAR 0 14
59973: PPUSH
59974: LD_VAR 0 1
59978: PPUSH
59979: CALL_OW 250
59983: PPUSH
59984: LD_VAR 0 1
59988: PPUSH
59989: CALL_OW 251
59993: PPUSH
59994: LD_INT 10
59996: PPUSH
59997: LD_INT 0
59999: PPUSH
60000: CALL_OW 50
// continue ;
60004: GO 59905
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
60006: LD_VAR 0 12
60010: PUSH
60011: LD_INT 1
60013: ARRAY
60014: PPUSH
60015: CALL_OW 313
60019: PUSH
60020: LD_VAR 0 12
60024: PUSH
60025: LD_INT 1
60027: ARRAY
60028: PPUSH
60029: CALL_OW 266
60033: PUSH
60034: LD_INT 32
60036: PUSH
60037: LD_INT 31
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: IN
60044: AND
60045: PUSH
60046: LD_VAR 0 12
60050: PUSH
60051: LD_INT 1
60053: ARRAY
60054: PPUSH
60055: CALL_OW 313
60059: PUSH
60060: LD_INT 6
60062: EQUAL
60063: OR
60064: IFFALSE 60084
// f := Delete ( f , 1 ) ;
60066: LD_ADDR_VAR 0 12
60070: PUSH
60071: LD_VAR 0 12
60075: PPUSH
60076: LD_INT 1
60078: PPUSH
60079: CALL_OW 3
60083: ST_TO_ADDR
// if not f then
60084: LD_VAR 0 12
60088: NOT
60089: IFFALSE 60107
// begin x := x + 2 ;
60091: LD_ADDR_VAR 0 13
60095: PUSH
60096: LD_VAR 0 13
60100: PUSH
60101: LD_INT 2
60103: PLUS
60104: ST_TO_ADDR
// continue ;
60105: GO 59905
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
60107: LD_VAR 0 12
60111: PUSH
60112: LD_INT 1
60114: ARRAY
60115: PPUSH
60116: CALL_OW 266
60120: PUSH
60121: LD_INT 5
60123: EQUAL
60124: IFFALSE 60198
// begin if UnitsInside ( f [ 1 ] ) < 3 then
60126: LD_VAR 0 12
60130: PUSH
60131: LD_INT 1
60133: ARRAY
60134: PPUSH
60135: CALL_OW 313
60139: PUSH
60140: LD_INT 3
60142: LESS
60143: IFFALSE 60179
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
60145: LD_INT 0
60147: PPUSH
60148: LD_INT 5
60150: PUSH
60151: LD_INT 8
60153: PUSH
60154: LD_INT 9
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: LIST
60161: PUSH
60162: LD_VAR 0 17
60166: ARRAY
60167: PPUSH
60168: LD_VAR 0 4
60172: PPUSH
60173: CALL_OW 380
60177: GO 60196
// PrepareHuman ( false , i , skill ) ;
60179: LD_INT 0
60181: PPUSH
60182: LD_VAR 0 8
60186: PPUSH
60187: LD_VAR 0 4
60191: PPUSH
60192: CALL_OW 380
// end else
60196: GO 60215
// PrepareHuman ( false , i , skill ) ;
60198: LD_INT 0
60200: PPUSH
60201: LD_VAR 0 8
60205: PPUSH
60206: LD_VAR 0 4
60210: PPUSH
60211: CALL_OW 380
// un := CreateHuman ;
60215: LD_ADDR_VAR 0 14
60219: PUSH
60220: CALL_OW 44
60224: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
60225: LD_ADDR_VAR 0 7
60229: PUSH
60230: LD_VAR 0 7
60234: PPUSH
60235: LD_INT 1
60237: PPUSH
60238: LD_VAR 0 14
60242: PPUSH
60243: CALL_OW 2
60247: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
60248: LD_VAR 0 14
60252: PPUSH
60253: LD_VAR 0 12
60257: PUSH
60258: LD_INT 1
60260: ARRAY
60261: PPUSH
60262: CALL_OW 52
// end ;
60266: GO 59905
60268: POP
60269: POP
// end ;
60270: GO 59207
60272: POP
60273: POP
// result := result ^ buildings ;
60274: LD_ADDR_VAR 0 7
60278: PUSH
60279: LD_VAR 0 7
60283: PUSH
60284: LD_VAR 0 18
60288: ADD
60289: ST_TO_ADDR
// end else
60290: GO 60433
// begin for i = 1 to personel do
60292: LD_ADDR_VAR 0 8
60296: PUSH
60297: DOUBLE
60298: LD_INT 1
60300: DEC
60301: ST_TO_ADDR
60302: LD_VAR 0 6
60306: PUSH
60307: FOR_TO
60308: IFFALSE 60431
// begin if i > 4 then
60310: LD_VAR 0 8
60314: PUSH
60315: LD_INT 4
60317: GREATER
60318: IFFALSE 60322
// break ;
60320: GO 60431
// x := personel [ i ] ;
60322: LD_ADDR_VAR 0 13
60326: PUSH
60327: LD_VAR 0 6
60331: PUSH
60332: LD_VAR 0 8
60336: ARRAY
60337: ST_TO_ADDR
// if x = - 1 then
60338: LD_VAR 0 13
60342: PUSH
60343: LD_INT 1
60345: NEG
60346: EQUAL
60347: IFFALSE 60351
// continue ;
60349: GO 60307
// PrepareHuman ( false , i , skill ) ;
60351: LD_INT 0
60353: PPUSH
60354: LD_VAR 0 8
60358: PPUSH
60359: LD_VAR 0 4
60363: PPUSH
60364: CALL_OW 380
// un := CreateHuman ;
60368: LD_ADDR_VAR 0 14
60372: PUSH
60373: CALL_OW 44
60377: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
60378: LD_VAR 0 14
60382: PPUSH
60383: LD_VAR 0 1
60387: PPUSH
60388: CALL_OW 250
60392: PPUSH
60393: LD_VAR 0 1
60397: PPUSH
60398: CALL_OW 251
60402: PPUSH
60403: LD_INT 10
60405: PPUSH
60406: LD_INT 0
60408: PPUSH
60409: CALL_OW 50
// result := result ^ un ;
60413: LD_ADDR_VAR 0 7
60417: PUSH
60418: LD_VAR 0 7
60422: PUSH
60423: LD_VAR 0 14
60427: ADD
60428: ST_TO_ADDR
// end ;
60429: GO 60307
60431: POP
60432: POP
// end ; end ;
60433: LD_VAR 0 7
60437: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
60438: LD_INT 0
60440: PPUSH
60441: PPUSH
60442: PPUSH
60443: PPUSH
60444: PPUSH
60445: PPUSH
60446: PPUSH
60447: PPUSH
60448: PPUSH
60449: PPUSH
60450: PPUSH
60451: PPUSH
60452: PPUSH
60453: PPUSH
60454: PPUSH
60455: PPUSH
// result := false ;
60456: LD_ADDR_VAR 0 3
60460: PUSH
60461: LD_INT 0
60463: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
60464: LD_VAR 0 1
60468: NOT
60469: PUSH
60470: LD_VAR 0 1
60474: PPUSH
60475: CALL_OW 266
60479: PUSH
60480: LD_INT 32
60482: PUSH
60483: LD_INT 33
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: IN
60490: NOT
60491: OR
60492: IFFALSE 60496
// exit ;
60494: GO 61605
// nat := GetNation ( tower ) ;
60496: LD_ADDR_VAR 0 12
60500: PUSH
60501: LD_VAR 0 1
60505: PPUSH
60506: CALL_OW 248
60510: ST_TO_ADDR
// side := GetSide ( tower ) ;
60511: LD_ADDR_VAR 0 16
60515: PUSH
60516: LD_VAR 0 1
60520: PPUSH
60521: CALL_OW 255
60525: ST_TO_ADDR
// x := GetX ( tower ) ;
60526: LD_ADDR_VAR 0 10
60530: PUSH
60531: LD_VAR 0 1
60535: PPUSH
60536: CALL_OW 250
60540: ST_TO_ADDR
// y := GetY ( tower ) ;
60541: LD_ADDR_VAR 0 11
60545: PUSH
60546: LD_VAR 0 1
60550: PPUSH
60551: CALL_OW 251
60555: ST_TO_ADDR
// if not x or not y then
60556: LD_VAR 0 10
60560: NOT
60561: PUSH
60562: LD_VAR 0 11
60566: NOT
60567: OR
60568: IFFALSE 60572
// exit ;
60570: GO 61605
// weapon := 0 ;
60572: LD_ADDR_VAR 0 18
60576: PUSH
60577: LD_INT 0
60579: ST_TO_ADDR
// fac_list := [ ] ;
60580: LD_ADDR_VAR 0 17
60584: PUSH
60585: EMPTY
60586: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
60587: LD_ADDR_VAR 0 6
60591: PUSH
60592: LD_VAR 0 1
60596: PPUSH
60597: CALL_OW 274
60601: PPUSH
60602: LD_VAR 0 2
60606: PPUSH
60607: LD_INT 0
60609: PPUSH
60610: CALL 58176 0 3
60614: PPUSH
60615: LD_INT 30
60617: PUSH
60618: LD_INT 3
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PPUSH
60625: CALL_OW 72
60629: ST_TO_ADDR
// if not factories then
60630: LD_VAR 0 6
60634: NOT
60635: IFFALSE 60639
// exit ;
60637: GO 61605
// for i in factories do
60639: LD_ADDR_VAR 0 8
60643: PUSH
60644: LD_VAR 0 6
60648: PUSH
60649: FOR_IN
60650: IFFALSE 60675
// fac_list := fac_list union AvailableWeaponList ( i ) ;
60652: LD_ADDR_VAR 0 17
60656: PUSH
60657: LD_VAR 0 17
60661: PUSH
60662: LD_VAR 0 8
60666: PPUSH
60667: CALL_OW 478
60671: UNION
60672: ST_TO_ADDR
60673: GO 60649
60675: POP
60676: POP
// if not fac_list then
60677: LD_VAR 0 17
60681: NOT
60682: IFFALSE 60686
// exit ;
60684: GO 61605
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
60686: LD_ADDR_VAR 0 5
60690: PUSH
60691: LD_INT 4
60693: PUSH
60694: LD_INT 5
60696: PUSH
60697: LD_INT 9
60699: PUSH
60700: LD_INT 10
60702: PUSH
60703: LD_INT 6
60705: PUSH
60706: LD_INT 7
60708: PUSH
60709: LD_INT 11
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 27
60723: PUSH
60724: LD_INT 28
60726: PUSH
60727: LD_INT 26
60729: PUSH
60730: LD_INT 30
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 43
60741: PUSH
60742: LD_INT 44
60744: PUSH
60745: LD_INT 46
60747: PUSH
60748: LD_INT 45
60750: PUSH
60751: LD_INT 47
60753: PUSH
60754: LD_INT 49
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: LIST
60769: PUSH
60770: LD_VAR 0 12
60774: ARRAY
60775: ST_TO_ADDR
// list := list isect fac_list ;
60776: LD_ADDR_VAR 0 5
60780: PUSH
60781: LD_VAR 0 5
60785: PUSH
60786: LD_VAR 0 17
60790: ISECT
60791: ST_TO_ADDR
// if not list then
60792: LD_VAR 0 5
60796: NOT
60797: IFFALSE 60801
// exit ;
60799: GO 61605
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
60801: LD_VAR 0 12
60805: PUSH
60806: LD_INT 3
60808: EQUAL
60809: PUSH
60810: LD_INT 49
60812: PUSH
60813: LD_VAR 0 5
60817: IN
60818: AND
60819: PUSH
60820: LD_INT 31
60822: PPUSH
60823: LD_VAR 0 16
60827: PPUSH
60828: CALL_OW 321
60832: PUSH
60833: LD_INT 2
60835: EQUAL
60836: AND
60837: IFFALSE 60897
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
60839: LD_INT 22
60841: PUSH
60842: LD_VAR 0 16
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 35
60853: PUSH
60854: LD_INT 49
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 91
60863: PUSH
60864: LD_VAR 0 1
60868: PUSH
60869: LD_INT 10
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: LIST
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: LIST
60881: PPUSH
60882: CALL_OW 69
60886: NOT
60887: IFFALSE 60897
// weapon := ru_time_lapser ;
60889: LD_ADDR_VAR 0 18
60893: PUSH
60894: LD_INT 49
60896: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
60897: LD_VAR 0 12
60901: PUSH
60902: LD_INT 1
60904: PUSH
60905: LD_INT 2
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: IN
60912: PUSH
60913: LD_INT 11
60915: PUSH
60916: LD_VAR 0 5
60920: IN
60921: PUSH
60922: LD_INT 30
60924: PUSH
60925: LD_VAR 0 5
60929: IN
60930: OR
60931: AND
60932: PUSH
60933: LD_INT 6
60935: PPUSH
60936: LD_VAR 0 16
60940: PPUSH
60941: CALL_OW 321
60945: PUSH
60946: LD_INT 2
60948: EQUAL
60949: AND
60950: IFFALSE 61115
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
60952: LD_INT 22
60954: PUSH
60955: LD_VAR 0 16
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 2
60966: PUSH
60967: LD_INT 35
60969: PUSH
60970: LD_INT 11
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 35
60979: PUSH
60980: LD_INT 30
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 91
60994: PUSH
60995: LD_VAR 0 1
60999: PUSH
61000: LD_INT 18
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: LIST
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: LIST
61012: PPUSH
61013: CALL_OW 69
61017: NOT
61018: PUSH
61019: LD_INT 22
61021: PUSH
61022: LD_VAR 0 16
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 2
61033: PUSH
61034: LD_INT 30
61036: PUSH
61037: LD_INT 32
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 30
61046: PUSH
61047: LD_INT 33
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 91
61061: PUSH
61062: LD_VAR 0 1
61066: PUSH
61067: LD_INT 12
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: LIST
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: LIST
61079: PUSH
61080: EMPTY
61081: LIST
61082: PPUSH
61083: CALL_OW 69
61087: PUSH
61088: LD_INT 2
61090: GREATER
61091: AND
61092: IFFALSE 61115
// weapon := [ us_radar , ar_radar ] [ nat ] ;
61094: LD_ADDR_VAR 0 18
61098: PUSH
61099: LD_INT 11
61101: PUSH
61102: LD_INT 30
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_VAR 0 12
61113: ARRAY
61114: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
61115: LD_VAR 0 18
61119: NOT
61120: PUSH
61121: LD_INT 40
61123: PPUSH
61124: LD_VAR 0 16
61128: PPUSH
61129: CALL_OW 321
61133: PUSH
61134: LD_INT 2
61136: EQUAL
61137: AND
61138: PUSH
61139: LD_INT 7
61141: PUSH
61142: LD_VAR 0 5
61146: IN
61147: PUSH
61148: LD_INT 28
61150: PUSH
61151: LD_VAR 0 5
61155: IN
61156: OR
61157: PUSH
61158: LD_INT 45
61160: PUSH
61161: LD_VAR 0 5
61165: IN
61166: OR
61167: AND
61168: IFFALSE 61422
// begin hex := GetHexInfo ( x , y ) ;
61170: LD_ADDR_VAR 0 4
61174: PUSH
61175: LD_VAR 0 10
61179: PPUSH
61180: LD_VAR 0 11
61184: PPUSH
61185: CALL_OW 546
61189: ST_TO_ADDR
// if hex [ 1 ] then
61190: LD_VAR 0 4
61194: PUSH
61195: LD_INT 1
61197: ARRAY
61198: IFFALSE 61202
// exit ;
61200: GO 61605
// height := hex [ 2 ] ;
61202: LD_ADDR_VAR 0 15
61206: PUSH
61207: LD_VAR 0 4
61211: PUSH
61212: LD_INT 2
61214: ARRAY
61215: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
61216: LD_ADDR_VAR 0 14
61220: PUSH
61221: LD_INT 0
61223: PUSH
61224: LD_INT 2
61226: PUSH
61227: LD_INT 3
61229: PUSH
61230: LD_INT 5
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: ST_TO_ADDR
// for i in tmp do
61239: LD_ADDR_VAR 0 8
61243: PUSH
61244: LD_VAR 0 14
61248: PUSH
61249: FOR_IN
61250: IFFALSE 61420
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
61252: LD_ADDR_VAR 0 9
61256: PUSH
61257: LD_VAR 0 10
61261: PPUSH
61262: LD_VAR 0 8
61266: PPUSH
61267: LD_INT 5
61269: PPUSH
61270: CALL_OW 272
61274: PUSH
61275: LD_VAR 0 11
61279: PPUSH
61280: LD_VAR 0 8
61284: PPUSH
61285: LD_INT 5
61287: PPUSH
61288: CALL_OW 273
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
61297: LD_VAR 0 9
61301: PUSH
61302: LD_INT 1
61304: ARRAY
61305: PPUSH
61306: LD_VAR 0 9
61310: PUSH
61311: LD_INT 2
61313: ARRAY
61314: PPUSH
61315: CALL_OW 488
61319: IFFALSE 61418
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
61321: LD_ADDR_VAR 0 4
61325: PUSH
61326: LD_VAR 0 9
61330: PUSH
61331: LD_INT 1
61333: ARRAY
61334: PPUSH
61335: LD_VAR 0 9
61339: PUSH
61340: LD_INT 2
61342: ARRAY
61343: PPUSH
61344: CALL_OW 546
61348: ST_TO_ADDR
// if hex [ 1 ] then
61349: LD_VAR 0 4
61353: PUSH
61354: LD_INT 1
61356: ARRAY
61357: IFFALSE 61361
// continue ;
61359: GO 61249
// h := hex [ 2 ] ;
61361: LD_ADDR_VAR 0 13
61365: PUSH
61366: LD_VAR 0 4
61370: PUSH
61371: LD_INT 2
61373: ARRAY
61374: ST_TO_ADDR
// if h + 7 < height then
61375: LD_VAR 0 13
61379: PUSH
61380: LD_INT 7
61382: PLUS
61383: PUSH
61384: LD_VAR 0 15
61388: LESS
61389: IFFALSE 61418
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
61391: LD_ADDR_VAR 0 18
61395: PUSH
61396: LD_INT 7
61398: PUSH
61399: LD_INT 28
61401: PUSH
61402: LD_INT 45
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: LIST
61409: PUSH
61410: LD_VAR 0 12
61414: ARRAY
61415: ST_TO_ADDR
// break ;
61416: GO 61420
// end ; end ; end ;
61418: GO 61249
61420: POP
61421: POP
// end ; if not weapon then
61422: LD_VAR 0 18
61426: NOT
61427: IFFALSE 61487
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
61429: LD_ADDR_VAR 0 5
61433: PUSH
61434: LD_VAR 0 5
61438: PUSH
61439: LD_INT 11
61441: PUSH
61442: LD_INT 30
61444: PUSH
61445: LD_INT 49
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: LIST
61452: DIFF
61453: ST_TO_ADDR
// if not list then
61454: LD_VAR 0 5
61458: NOT
61459: IFFALSE 61463
// exit ;
61461: GO 61605
// weapon := list [ rand ( 1 , list ) ] ;
61463: LD_ADDR_VAR 0 18
61467: PUSH
61468: LD_VAR 0 5
61472: PUSH
61473: LD_INT 1
61475: PPUSH
61476: LD_VAR 0 5
61480: PPUSH
61481: CALL_OW 12
61485: ARRAY
61486: ST_TO_ADDR
// end ; if weapon then
61487: LD_VAR 0 18
61491: IFFALSE 61605
// begin tmp := CostOfWeapon ( weapon ) ;
61493: LD_ADDR_VAR 0 14
61497: PUSH
61498: LD_VAR 0 18
61502: PPUSH
61503: CALL_OW 451
61507: ST_TO_ADDR
// j := GetBase ( tower ) ;
61508: LD_ADDR_VAR 0 9
61512: PUSH
61513: LD_VAR 0 1
61517: PPUSH
61518: CALL_OW 274
61522: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
61523: LD_VAR 0 9
61527: PPUSH
61528: LD_INT 1
61530: PPUSH
61531: CALL_OW 275
61535: PUSH
61536: LD_VAR 0 14
61540: PUSH
61541: LD_INT 1
61543: ARRAY
61544: GREATEREQUAL
61545: PUSH
61546: LD_VAR 0 9
61550: PPUSH
61551: LD_INT 2
61553: PPUSH
61554: CALL_OW 275
61558: PUSH
61559: LD_VAR 0 14
61563: PUSH
61564: LD_INT 2
61566: ARRAY
61567: GREATEREQUAL
61568: AND
61569: PUSH
61570: LD_VAR 0 9
61574: PPUSH
61575: LD_INT 3
61577: PPUSH
61578: CALL_OW 275
61582: PUSH
61583: LD_VAR 0 14
61587: PUSH
61588: LD_INT 3
61590: ARRAY
61591: GREATEREQUAL
61592: AND
61593: IFFALSE 61605
// result := weapon ;
61595: LD_ADDR_VAR 0 3
61599: PUSH
61600: LD_VAR 0 18
61604: ST_TO_ADDR
// end ; end ;
61605: LD_VAR 0 3
61609: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
61610: LD_INT 0
61612: PPUSH
61613: PPUSH
// result := true ;
61614: LD_ADDR_VAR 0 3
61618: PUSH
61619: LD_INT 1
61621: ST_TO_ADDR
// if array1 = array2 then
61622: LD_VAR 0 1
61626: PUSH
61627: LD_VAR 0 2
61631: EQUAL
61632: IFFALSE 61692
// begin for i = 1 to array1 do
61634: LD_ADDR_VAR 0 4
61638: PUSH
61639: DOUBLE
61640: LD_INT 1
61642: DEC
61643: ST_TO_ADDR
61644: LD_VAR 0 1
61648: PUSH
61649: FOR_TO
61650: IFFALSE 61688
// if array1 [ i ] <> array2 [ i ] then
61652: LD_VAR 0 1
61656: PUSH
61657: LD_VAR 0 4
61661: ARRAY
61662: PUSH
61663: LD_VAR 0 2
61667: PUSH
61668: LD_VAR 0 4
61672: ARRAY
61673: NONEQUAL
61674: IFFALSE 61686
// begin result := false ;
61676: LD_ADDR_VAR 0 3
61680: PUSH
61681: LD_INT 0
61683: ST_TO_ADDR
// break ;
61684: GO 61688
// end ;
61686: GO 61649
61688: POP
61689: POP
// end else
61690: GO 61700
// result := false ;
61692: LD_ADDR_VAR 0 3
61696: PUSH
61697: LD_INT 0
61699: ST_TO_ADDR
// end ;
61700: LD_VAR 0 3
61704: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
61705: LD_INT 0
61707: PPUSH
61708: PPUSH
// if not array1 or not array2 then
61709: LD_VAR 0 1
61713: NOT
61714: PUSH
61715: LD_VAR 0 2
61719: NOT
61720: OR
61721: IFFALSE 61725
// exit ;
61723: GO 61789
// result := true ;
61725: LD_ADDR_VAR 0 3
61729: PUSH
61730: LD_INT 1
61732: ST_TO_ADDR
// for i = 1 to array1 do
61733: LD_ADDR_VAR 0 4
61737: PUSH
61738: DOUBLE
61739: LD_INT 1
61741: DEC
61742: ST_TO_ADDR
61743: LD_VAR 0 1
61747: PUSH
61748: FOR_TO
61749: IFFALSE 61787
// if array1 [ i ] <> array2 [ i ] then
61751: LD_VAR 0 1
61755: PUSH
61756: LD_VAR 0 4
61760: ARRAY
61761: PUSH
61762: LD_VAR 0 2
61766: PUSH
61767: LD_VAR 0 4
61771: ARRAY
61772: NONEQUAL
61773: IFFALSE 61785
// begin result := false ;
61775: LD_ADDR_VAR 0 3
61779: PUSH
61780: LD_INT 0
61782: ST_TO_ADDR
// break ;
61783: GO 61787
// end ;
61785: GO 61748
61787: POP
61788: POP
// end ;
61789: LD_VAR 0 3
61793: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
61794: LD_INT 0
61796: PPUSH
61797: PPUSH
61798: PPUSH
// pom := GetBase ( fac ) ;
61799: LD_ADDR_VAR 0 5
61803: PUSH
61804: LD_VAR 0 1
61808: PPUSH
61809: CALL_OW 274
61813: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
61814: LD_ADDR_VAR 0 4
61818: PUSH
61819: LD_VAR 0 2
61823: PUSH
61824: LD_INT 1
61826: ARRAY
61827: PPUSH
61828: LD_VAR 0 2
61832: PUSH
61833: LD_INT 2
61835: ARRAY
61836: PPUSH
61837: LD_VAR 0 2
61841: PUSH
61842: LD_INT 3
61844: ARRAY
61845: PPUSH
61846: LD_VAR 0 2
61850: PUSH
61851: LD_INT 4
61853: ARRAY
61854: PPUSH
61855: CALL_OW 449
61859: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61860: LD_ADDR_VAR 0 3
61864: PUSH
61865: LD_VAR 0 5
61869: PPUSH
61870: LD_INT 1
61872: PPUSH
61873: CALL_OW 275
61877: PUSH
61878: LD_VAR 0 4
61882: PUSH
61883: LD_INT 1
61885: ARRAY
61886: GREATEREQUAL
61887: PUSH
61888: LD_VAR 0 5
61892: PPUSH
61893: LD_INT 2
61895: PPUSH
61896: CALL_OW 275
61900: PUSH
61901: LD_VAR 0 4
61905: PUSH
61906: LD_INT 2
61908: ARRAY
61909: GREATEREQUAL
61910: AND
61911: PUSH
61912: LD_VAR 0 5
61916: PPUSH
61917: LD_INT 3
61919: PPUSH
61920: CALL_OW 275
61924: PUSH
61925: LD_VAR 0 4
61929: PUSH
61930: LD_INT 3
61932: ARRAY
61933: GREATEREQUAL
61934: AND
61935: ST_TO_ADDR
// end ;
61936: LD_VAR 0 3
61940: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
61941: LD_INT 0
61943: PPUSH
61944: PPUSH
61945: PPUSH
61946: PPUSH
// pom := GetBase ( building ) ;
61947: LD_ADDR_VAR 0 3
61951: PUSH
61952: LD_VAR 0 1
61956: PPUSH
61957: CALL_OW 274
61961: ST_TO_ADDR
// if not pom then
61962: LD_VAR 0 3
61966: NOT
61967: IFFALSE 61971
// exit ;
61969: GO 62141
// btype := GetBType ( building ) ;
61971: LD_ADDR_VAR 0 5
61975: PUSH
61976: LD_VAR 0 1
61980: PPUSH
61981: CALL_OW 266
61985: ST_TO_ADDR
// if btype = b_armoury then
61986: LD_VAR 0 5
61990: PUSH
61991: LD_INT 4
61993: EQUAL
61994: IFFALSE 62004
// btype := b_barracks ;
61996: LD_ADDR_VAR 0 5
62000: PUSH
62001: LD_INT 5
62003: ST_TO_ADDR
// if btype = b_depot then
62004: LD_VAR 0 5
62008: PUSH
62009: LD_INT 0
62011: EQUAL
62012: IFFALSE 62022
// btype := b_warehouse ;
62014: LD_ADDR_VAR 0 5
62018: PUSH
62019: LD_INT 1
62021: ST_TO_ADDR
// if btype = b_workshop then
62022: LD_VAR 0 5
62026: PUSH
62027: LD_INT 2
62029: EQUAL
62030: IFFALSE 62040
// btype := b_factory ;
62032: LD_ADDR_VAR 0 5
62036: PUSH
62037: LD_INT 3
62039: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
62040: LD_ADDR_VAR 0 4
62044: PUSH
62045: LD_VAR 0 5
62049: PPUSH
62050: LD_VAR 0 1
62054: PPUSH
62055: CALL_OW 248
62059: PPUSH
62060: CALL_OW 450
62064: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
62065: LD_ADDR_VAR 0 2
62069: PUSH
62070: LD_VAR 0 3
62074: PPUSH
62075: LD_INT 1
62077: PPUSH
62078: CALL_OW 275
62082: PUSH
62083: LD_VAR 0 4
62087: PUSH
62088: LD_INT 1
62090: ARRAY
62091: GREATEREQUAL
62092: PUSH
62093: LD_VAR 0 3
62097: PPUSH
62098: LD_INT 2
62100: PPUSH
62101: CALL_OW 275
62105: PUSH
62106: LD_VAR 0 4
62110: PUSH
62111: LD_INT 2
62113: ARRAY
62114: GREATEREQUAL
62115: AND
62116: PUSH
62117: LD_VAR 0 3
62121: PPUSH
62122: LD_INT 3
62124: PPUSH
62125: CALL_OW 275
62129: PUSH
62130: LD_VAR 0 4
62134: PUSH
62135: LD_INT 3
62137: ARRAY
62138: GREATEREQUAL
62139: AND
62140: ST_TO_ADDR
// end ;
62141: LD_VAR 0 2
62145: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
62146: LD_INT 0
62148: PPUSH
62149: PPUSH
62150: PPUSH
// pom := GetBase ( building ) ;
62151: LD_ADDR_VAR 0 4
62155: PUSH
62156: LD_VAR 0 1
62160: PPUSH
62161: CALL_OW 274
62165: ST_TO_ADDR
// if not pom then
62166: LD_VAR 0 4
62170: NOT
62171: IFFALSE 62175
// exit ;
62173: GO 62276
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
62175: LD_ADDR_VAR 0 5
62179: PUSH
62180: LD_VAR 0 2
62184: PPUSH
62185: LD_VAR 0 1
62189: PPUSH
62190: CALL_OW 248
62194: PPUSH
62195: CALL_OW 450
62199: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
62200: LD_ADDR_VAR 0 3
62204: PUSH
62205: LD_VAR 0 4
62209: PPUSH
62210: LD_INT 1
62212: PPUSH
62213: CALL_OW 275
62217: PUSH
62218: LD_VAR 0 5
62222: PUSH
62223: LD_INT 1
62225: ARRAY
62226: GREATEREQUAL
62227: PUSH
62228: LD_VAR 0 4
62232: PPUSH
62233: LD_INT 2
62235: PPUSH
62236: CALL_OW 275
62240: PUSH
62241: LD_VAR 0 5
62245: PUSH
62246: LD_INT 2
62248: ARRAY
62249: GREATEREQUAL
62250: AND
62251: PUSH
62252: LD_VAR 0 4
62256: PPUSH
62257: LD_INT 3
62259: PPUSH
62260: CALL_OW 275
62264: PUSH
62265: LD_VAR 0 5
62269: PUSH
62270: LD_INT 3
62272: ARRAY
62273: GREATEREQUAL
62274: AND
62275: ST_TO_ADDR
// end ;
62276: LD_VAR 0 3
62280: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
62281: LD_INT 0
62283: PPUSH
62284: PPUSH
62285: PPUSH
62286: PPUSH
62287: PPUSH
62288: PPUSH
62289: PPUSH
62290: PPUSH
62291: PPUSH
62292: PPUSH
62293: PPUSH
// result := false ;
62294: LD_ADDR_VAR 0 8
62298: PUSH
62299: LD_INT 0
62301: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
62302: LD_VAR 0 5
62306: NOT
62307: PUSH
62308: LD_VAR 0 1
62312: NOT
62313: OR
62314: PUSH
62315: LD_VAR 0 2
62319: NOT
62320: OR
62321: PUSH
62322: LD_VAR 0 3
62326: NOT
62327: OR
62328: IFFALSE 62332
// exit ;
62330: GO 63146
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
62332: LD_ADDR_VAR 0 14
62336: PUSH
62337: LD_VAR 0 1
62341: PPUSH
62342: LD_VAR 0 2
62346: PPUSH
62347: LD_VAR 0 3
62351: PPUSH
62352: LD_VAR 0 4
62356: PPUSH
62357: LD_VAR 0 5
62361: PUSH
62362: LD_INT 1
62364: ARRAY
62365: PPUSH
62366: CALL_OW 248
62370: PPUSH
62371: LD_INT 0
62373: PPUSH
62374: CALL 64379 0 6
62378: ST_TO_ADDR
// if not hexes then
62379: LD_VAR 0 14
62383: NOT
62384: IFFALSE 62388
// exit ;
62386: GO 63146
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62388: LD_ADDR_VAR 0 17
62392: PUSH
62393: LD_VAR 0 5
62397: PPUSH
62398: LD_INT 22
62400: PUSH
62401: LD_VAR 0 13
62405: PPUSH
62406: CALL_OW 255
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 2
62417: PUSH
62418: LD_INT 30
62420: PUSH
62421: LD_INT 0
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 30
62430: PUSH
62431: LD_INT 1
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: LIST
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PPUSH
62447: CALL_OW 72
62451: ST_TO_ADDR
// for i = 1 to hexes do
62452: LD_ADDR_VAR 0 9
62456: PUSH
62457: DOUBLE
62458: LD_INT 1
62460: DEC
62461: ST_TO_ADDR
62462: LD_VAR 0 14
62466: PUSH
62467: FOR_TO
62468: IFFALSE 63144
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62470: LD_ADDR_VAR 0 13
62474: PUSH
62475: LD_VAR 0 14
62479: PUSH
62480: LD_VAR 0 9
62484: ARRAY
62485: PUSH
62486: LD_INT 1
62488: ARRAY
62489: PPUSH
62490: LD_VAR 0 14
62494: PUSH
62495: LD_VAR 0 9
62499: ARRAY
62500: PUSH
62501: LD_INT 2
62503: ARRAY
62504: PPUSH
62505: CALL_OW 428
62509: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
62510: LD_VAR 0 14
62514: PUSH
62515: LD_VAR 0 9
62519: ARRAY
62520: PUSH
62521: LD_INT 1
62523: ARRAY
62524: PPUSH
62525: LD_VAR 0 14
62529: PUSH
62530: LD_VAR 0 9
62534: ARRAY
62535: PUSH
62536: LD_INT 2
62538: ARRAY
62539: PPUSH
62540: CALL_OW 351
62544: PUSH
62545: LD_VAR 0 14
62549: PUSH
62550: LD_VAR 0 9
62554: ARRAY
62555: PUSH
62556: LD_INT 1
62558: ARRAY
62559: PPUSH
62560: LD_VAR 0 14
62564: PUSH
62565: LD_VAR 0 9
62569: ARRAY
62570: PUSH
62571: LD_INT 2
62573: ARRAY
62574: PPUSH
62575: CALL_OW 488
62579: NOT
62580: OR
62581: PUSH
62582: LD_VAR 0 13
62586: PPUSH
62587: CALL_OW 247
62591: PUSH
62592: LD_INT 3
62594: EQUAL
62595: OR
62596: IFFALSE 62602
// exit ;
62598: POP
62599: POP
62600: GO 63146
// if not tmp then
62602: LD_VAR 0 13
62606: NOT
62607: IFFALSE 62611
// continue ;
62609: GO 62467
// result := true ;
62611: LD_ADDR_VAR 0 8
62615: PUSH
62616: LD_INT 1
62618: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
62619: LD_VAR 0 6
62623: PUSH
62624: LD_VAR 0 13
62628: PPUSH
62629: CALL_OW 247
62633: PUSH
62634: LD_INT 2
62636: EQUAL
62637: AND
62638: PUSH
62639: LD_VAR 0 13
62643: PPUSH
62644: CALL_OW 263
62648: PUSH
62649: LD_INT 1
62651: EQUAL
62652: AND
62653: IFFALSE 62817
// begin if IsDrivenBy ( tmp ) then
62655: LD_VAR 0 13
62659: PPUSH
62660: CALL_OW 311
62664: IFFALSE 62668
// continue ;
62666: GO 62467
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
62668: LD_VAR 0 6
62672: PPUSH
62673: LD_INT 3
62675: PUSH
62676: LD_INT 60
62678: PUSH
62679: EMPTY
62680: LIST
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 3
62688: PUSH
62689: LD_INT 55
62691: PUSH
62692: EMPTY
62693: LIST
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PPUSH
62703: CALL_OW 72
62707: IFFALSE 62815
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
62709: LD_ADDR_VAR 0 18
62713: PUSH
62714: LD_VAR 0 6
62718: PPUSH
62719: LD_INT 3
62721: PUSH
62722: LD_INT 60
62724: PUSH
62725: EMPTY
62726: LIST
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 3
62734: PUSH
62735: LD_INT 55
62737: PUSH
62738: EMPTY
62739: LIST
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PPUSH
62749: CALL_OW 72
62753: PUSH
62754: LD_INT 1
62756: ARRAY
62757: ST_TO_ADDR
// if IsInUnit ( driver ) then
62758: LD_VAR 0 18
62762: PPUSH
62763: CALL_OW 310
62767: IFFALSE 62778
// ComExit ( driver ) ;
62769: LD_VAR 0 18
62773: PPUSH
62774: CALL 88159 0 1
// AddComEnterUnit ( driver , tmp ) ;
62778: LD_VAR 0 18
62782: PPUSH
62783: LD_VAR 0 13
62787: PPUSH
62788: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
62792: LD_VAR 0 18
62796: PPUSH
62797: LD_VAR 0 7
62801: PPUSH
62802: CALL_OW 173
// AddComExitVehicle ( driver ) ;
62806: LD_VAR 0 18
62810: PPUSH
62811: CALL_OW 181
// end ; continue ;
62815: GO 62467
// end ; if not cleaners or not tmp in cleaners then
62817: LD_VAR 0 6
62821: NOT
62822: PUSH
62823: LD_VAR 0 13
62827: PUSH
62828: LD_VAR 0 6
62832: IN
62833: NOT
62834: OR
62835: IFFALSE 63142
// begin if dep then
62837: LD_VAR 0 17
62841: IFFALSE 62977
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
62843: LD_ADDR_VAR 0 16
62847: PUSH
62848: LD_VAR 0 17
62852: PUSH
62853: LD_INT 1
62855: ARRAY
62856: PPUSH
62857: CALL_OW 250
62861: PPUSH
62862: LD_VAR 0 17
62866: PUSH
62867: LD_INT 1
62869: ARRAY
62870: PPUSH
62871: CALL_OW 254
62875: PPUSH
62876: LD_INT 5
62878: PPUSH
62879: CALL_OW 272
62883: PUSH
62884: LD_VAR 0 17
62888: PUSH
62889: LD_INT 1
62891: ARRAY
62892: PPUSH
62893: CALL_OW 251
62897: PPUSH
62898: LD_VAR 0 17
62902: PUSH
62903: LD_INT 1
62905: ARRAY
62906: PPUSH
62907: CALL_OW 254
62911: PPUSH
62912: LD_INT 5
62914: PPUSH
62915: CALL_OW 273
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
62924: LD_VAR 0 16
62928: PUSH
62929: LD_INT 1
62931: ARRAY
62932: PPUSH
62933: LD_VAR 0 16
62937: PUSH
62938: LD_INT 2
62940: ARRAY
62941: PPUSH
62942: CALL_OW 488
62946: IFFALSE 62977
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
62948: LD_VAR 0 13
62952: PPUSH
62953: LD_VAR 0 16
62957: PUSH
62958: LD_INT 1
62960: ARRAY
62961: PPUSH
62962: LD_VAR 0 16
62966: PUSH
62967: LD_INT 2
62969: ARRAY
62970: PPUSH
62971: CALL_OW 111
// continue ;
62975: GO 62467
// end ; end ; r := GetDir ( tmp ) ;
62977: LD_ADDR_VAR 0 15
62981: PUSH
62982: LD_VAR 0 13
62986: PPUSH
62987: CALL_OW 254
62991: ST_TO_ADDR
// if r = 5 then
62992: LD_VAR 0 15
62996: PUSH
62997: LD_INT 5
62999: EQUAL
63000: IFFALSE 63010
// r := 0 ;
63002: LD_ADDR_VAR 0 15
63006: PUSH
63007: LD_INT 0
63009: ST_TO_ADDR
// for j = r to 5 do
63010: LD_ADDR_VAR 0 10
63014: PUSH
63015: DOUBLE
63016: LD_VAR 0 15
63020: DEC
63021: ST_TO_ADDR
63022: LD_INT 5
63024: PUSH
63025: FOR_TO
63026: IFFALSE 63140
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
63028: LD_ADDR_VAR 0 11
63032: PUSH
63033: LD_VAR 0 13
63037: PPUSH
63038: CALL_OW 250
63042: PPUSH
63043: LD_VAR 0 10
63047: PPUSH
63048: LD_INT 2
63050: PPUSH
63051: CALL_OW 272
63055: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
63056: LD_ADDR_VAR 0 12
63060: PUSH
63061: LD_VAR 0 13
63065: PPUSH
63066: CALL_OW 251
63070: PPUSH
63071: LD_VAR 0 10
63075: PPUSH
63076: LD_INT 2
63078: PPUSH
63079: CALL_OW 273
63083: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
63084: LD_VAR 0 11
63088: PPUSH
63089: LD_VAR 0 12
63093: PPUSH
63094: CALL_OW 488
63098: PUSH
63099: LD_VAR 0 11
63103: PPUSH
63104: LD_VAR 0 12
63108: PPUSH
63109: CALL_OW 428
63113: NOT
63114: AND
63115: IFFALSE 63138
// begin ComMoveXY ( tmp , _x , _y ) ;
63117: LD_VAR 0 13
63121: PPUSH
63122: LD_VAR 0 11
63126: PPUSH
63127: LD_VAR 0 12
63131: PPUSH
63132: CALL_OW 111
// break ;
63136: GO 63140
// end ; end ;
63138: GO 63025
63140: POP
63141: POP
// end ; end ;
63142: GO 62467
63144: POP
63145: POP
// end ;
63146: LD_VAR 0 8
63150: RET
// export function BuildingTechInvented ( side , btype ) ; begin
63151: LD_INT 0
63153: PPUSH
// result := true ;
63154: LD_ADDR_VAR 0 3
63158: PUSH
63159: LD_INT 1
63161: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
63162: LD_VAR 0 2
63166: PUSH
63167: LD_INT 24
63169: DOUBLE
63170: EQUAL
63171: IFTRUE 63181
63173: LD_INT 33
63175: DOUBLE
63176: EQUAL
63177: IFTRUE 63181
63179: GO 63206
63181: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
63182: LD_ADDR_VAR 0 3
63186: PUSH
63187: LD_INT 32
63189: PPUSH
63190: LD_VAR 0 1
63194: PPUSH
63195: CALL_OW 321
63199: PUSH
63200: LD_INT 2
63202: EQUAL
63203: ST_TO_ADDR
63204: GO 63522
63206: LD_INT 20
63208: DOUBLE
63209: EQUAL
63210: IFTRUE 63214
63212: GO 63239
63214: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
63215: LD_ADDR_VAR 0 3
63219: PUSH
63220: LD_INT 6
63222: PPUSH
63223: LD_VAR 0 1
63227: PPUSH
63228: CALL_OW 321
63232: PUSH
63233: LD_INT 2
63235: EQUAL
63236: ST_TO_ADDR
63237: GO 63522
63239: LD_INT 22
63241: DOUBLE
63242: EQUAL
63243: IFTRUE 63253
63245: LD_INT 36
63247: DOUBLE
63248: EQUAL
63249: IFTRUE 63253
63251: GO 63278
63253: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
63254: LD_ADDR_VAR 0 3
63258: PUSH
63259: LD_INT 15
63261: PPUSH
63262: LD_VAR 0 1
63266: PPUSH
63267: CALL_OW 321
63271: PUSH
63272: LD_INT 2
63274: EQUAL
63275: ST_TO_ADDR
63276: GO 63522
63278: LD_INT 30
63280: DOUBLE
63281: EQUAL
63282: IFTRUE 63286
63284: GO 63311
63286: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
63287: LD_ADDR_VAR 0 3
63291: PUSH
63292: LD_INT 20
63294: PPUSH
63295: LD_VAR 0 1
63299: PPUSH
63300: CALL_OW 321
63304: PUSH
63305: LD_INT 2
63307: EQUAL
63308: ST_TO_ADDR
63309: GO 63522
63311: LD_INT 28
63313: DOUBLE
63314: EQUAL
63315: IFTRUE 63325
63317: LD_INT 21
63319: DOUBLE
63320: EQUAL
63321: IFTRUE 63325
63323: GO 63350
63325: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
63326: LD_ADDR_VAR 0 3
63330: PUSH
63331: LD_INT 21
63333: PPUSH
63334: LD_VAR 0 1
63338: PPUSH
63339: CALL_OW 321
63343: PUSH
63344: LD_INT 2
63346: EQUAL
63347: ST_TO_ADDR
63348: GO 63522
63350: LD_INT 16
63352: DOUBLE
63353: EQUAL
63354: IFTRUE 63358
63356: GO 63383
63358: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
63359: LD_ADDR_VAR 0 3
63363: PUSH
63364: LD_INT 84
63366: PPUSH
63367: LD_VAR 0 1
63371: PPUSH
63372: CALL_OW 321
63376: PUSH
63377: LD_INT 2
63379: EQUAL
63380: ST_TO_ADDR
63381: GO 63522
63383: LD_INT 19
63385: DOUBLE
63386: EQUAL
63387: IFTRUE 63397
63389: LD_INT 23
63391: DOUBLE
63392: EQUAL
63393: IFTRUE 63397
63395: GO 63422
63397: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
63398: LD_ADDR_VAR 0 3
63402: PUSH
63403: LD_INT 83
63405: PPUSH
63406: LD_VAR 0 1
63410: PPUSH
63411: CALL_OW 321
63415: PUSH
63416: LD_INT 2
63418: EQUAL
63419: ST_TO_ADDR
63420: GO 63522
63422: LD_INT 17
63424: DOUBLE
63425: EQUAL
63426: IFTRUE 63430
63428: GO 63455
63430: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
63431: LD_ADDR_VAR 0 3
63435: PUSH
63436: LD_INT 39
63438: PPUSH
63439: LD_VAR 0 1
63443: PPUSH
63444: CALL_OW 321
63448: PUSH
63449: LD_INT 2
63451: EQUAL
63452: ST_TO_ADDR
63453: GO 63522
63455: LD_INT 18
63457: DOUBLE
63458: EQUAL
63459: IFTRUE 63463
63461: GO 63488
63463: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
63464: LD_ADDR_VAR 0 3
63468: PUSH
63469: LD_INT 40
63471: PPUSH
63472: LD_VAR 0 1
63476: PPUSH
63477: CALL_OW 321
63481: PUSH
63482: LD_INT 2
63484: EQUAL
63485: ST_TO_ADDR
63486: GO 63522
63488: LD_INT 27
63490: DOUBLE
63491: EQUAL
63492: IFTRUE 63496
63494: GO 63521
63496: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
63497: LD_ADDR_VAR 0 3
63501: PUSH
63502: LD_INT 35
63504: PPUSH
63505: LD_VAR 0 1
63509: PPUSH
63510: CALL_OW 321
63514: PUSH
63515: LD_INT 2
63517: EQUAL
63518: ST_TO_ADDR
63519: GO 63522
63521: POP
// end ;
63522: LD_VAR 0 3
63526: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
63527: LD_INT 0
63529: PPUSH
63530: PPUSH
63531: PPUSH
63532: PPUSH
63533: PPUSH
63534: PPUSH
63535: PPUSH
63536: PPUSH
63537: PPUSH
63538: PPUSH
63539: PPUSH
// result := false ;
63540: LD_ADDR_VAR 0 6
63544: PUSH
63545: LD_INT 0
63547: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
63548: LD_VAR 0 1
63552: NOT
63553: PUSH
63554: LD_VAR 0 1
63558: PPUSH
63559: CALL_OW 266
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: LD_INT 1
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: IN
63574: NOT
63575: OR
63576: PUSH
63577: LD_VAR 0 2
63581: NOT
63582: OR
63583: PUSH
63584: LD_VAR 0 5
63588: PUSH
63589: LD_INT 0
63591: PUSH
63592: LD_INT 1
63594: PUSH
63595: LD_INT 2
63597: PUSH
63598: LD_INT 3
63600: PUSH
63601: LD_INT 4
63603: PUSH
63604: LD_INT 5
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: IN
63615: NOT
63616: OR
63617: PUSH
63618: LD_VAR 0 3
63622: PPUSH
63623: LD_VAR 0 4
63627: PPUSH
63628: CALL_OW 488
63632: NOT
63633: OR
63634: IFFALSE 63638
// exit ;
63636: GO 64374
// side := GetSide ( depot ) ;
63638: LD_ADDR_VAR 0 9
63642: PUSH
63643: LD_VAR 0 1
63647: PPUSH
63648: CALL_OW 255
63652: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
63653: LD_VAR 0 9
63657: PPUSH
63658: LD_VAR 0 2
63662: PPUSH
63663: CALL 63151 0 2
63667: NOT
63668: IFFALSE 63672
// exit ;
63670: GO 64374
// pom := GetBase ( depot ) ;
63672: LD_ADDR_VAR 0 10
63676: PUSH
63677: LD_VAR 0 1
63681: PPUSH
63682: CALL_OW 274
63686: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
63687: LD_ADDR_VAR 0 11
63691: PUSH
63692: LD_VAR 0 2
63696: PPUSH
63697: LD_VAR 0 1
63701: PPUSH
63702: CALL_OW 248
63706: PPUSH
63707: CALL_OW 450
63711: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
63712: LD_VAR 0 10
63716: PPUSH
63717: LD_INT 1
63719: PPUSH
63720: CALL_OW 275
63724: PUSH
63725: LD_VAR 0 11
63729: PUSH
63730: LD_INT 1
63732: ARRAY
63733: GREATEREQUAL
63734: PUSH
63735: LD_VAR 0 10
63739: PPUSH
63740: LD_INT 2
63742: PPUSH
63743: CALL_OW 275
63747: PUSH
63748: LD_VAR 0 11
63752: PUSH
63753: LD_INT 2
63755: ARRAY
63756: GREATEREQUAL
63757: AND
63758: PUSH
63759: LD_VAR 0 10
63763: PPUSH
63764: LD_INT 3
63766: PPUSH
63767: CALL_OW 275
63771: PUSH
63772: LD_VAR 0 11
63776: PUSH
63777: LD_INT 3
63779: ARRAY
63780: GREATEREQUAL
63781: AND
63782: NOT
63783: IFFALSE 63787
// exit ;
63785: GO 64374
// if GetBType ( depot ) = b_depot then
63787: LD_VAR 0 1
63791: PPUSH
63792: CALL_OW 266
63796: PUSH
63797: LD_INT 0
63799: EQUAL
63800: IFFALSE 63812
// dist := 28 else
63802: LD_ADDR_VAR 0 14
63806: PUSH
63807: LD_INT 28
63809: ST_TO_ADDR
63810: GO 63820
// dist := 36 ;
63812: LD_ADDR_VAR 0 14
63816: PUSH
63817: LD_INT 36
63819: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
63820: LD_VAR 0 1
63824: PPUSH
63825: LD_VAR 0 3
63829: PPUSH
63830: LD_VAR 0 4
63834: PPUSH
63835: CALL_OW 297
63839: PUSH
63840: LD_VAR 0 14
63844: GREATER
63845: IFFALSE 63849
// exit ;
63847: GO 64374
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
63849: LD_ADDR_VAR 0 12
63853: PUSH
63854: LD_VAR 0 2
63858: PPUSH
63859: LD_VAR 0 3
63863: PPUSH
63864: LD_VAR 0 4
63868: PPUSH
63869: LD_VAR 0 5
63873: PPUSH
63874: LD_VAR 0 1
63878: PPUSH
63879: CALL_OW 248
63883: PPUSH
63884: LD_INT 0
63886: PPUSH
63887: CALL 64379 0 6
63891: ST_TO_ADDR
// if not hexes then
63892: LD_VAR 0 12
63896: NOT
63897: IFFALSE 63901
// exit ;
63899: GO 64374
// hex := GetHexInfo ( x , y ) ;
63901: LD_ADDR_VAR 0 15
63905: PUSH
63906: LD_VAR 0 3
63910: PPUSH
63911: LD_VAR 0 4
63915: PPUSH
63916: CALL_OW 546
63920: ST_TO_ADDR
// if hex [ 1 ] then
63921: LD_VAR 0 15
63925: PUSH
63926: LD_INT 1
63928: ARRAY
63929: IFFALSE 63933
// exit ;
63931: GO 64374
// height := hex [ 2 ] ;
63933: LD_ADDR_VAR 0 13
63937: PUSH
63938: LD_VAR 0 15
63942: PUSH
63943: LD_INT 2
63945: ARRAY
63946: ST_TO_ADDR
// for i = 1 to hexes do
63947: LD_ADDR_VAR 0 7
63951: PUSH
63952: DOUBLE
63953: LD_INT 1
63955: DEC
63956: ST_TO_ADDR
63957: LD_VAR 0 12
63961: PUSH
63962: FOR_TO
63963: IFFALSE 64293
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
63965: LD_VAR 0 12
63969: PUSH
63970: LD_VAR 0 7
63974: ARRAY
63975: PUSH
63976: LD_INT 1
63978: ARRAY
63979: PPUSH
63980: LD_VAR 0 12
63984: PUSH
63985: LD_VAR 0 7
63989: ARRAY
63990: PUSH
63991: LD_INT 2
63993: ARRAY
63994: PPUSH
63995: CALL_OW 488
63999: NOT
64000: PUSH
64001: LD_VAR 0 12
64005: PUSH
64006: LD_VAR 0 7
64010: ARRAY
64011: PUSH
64012: LD_INT 1
64014: ARRAY
64015: PPUSH
64016: LD_VAR 0 12
64020: PUSH
64021: LD_VAR 0 7
64025: ARRAY
64026: PUSH
64027: LD_INT 2
64029: ARRAY
64030: PPUSH
64031: CALL_OW 428
64035: PUSH
64036: LD_INT 0
64038: GREATER
64039: OR
64040: PUSH
64041: LD_VAR 0 12
64045: PUSH
64046: LD_VAR 0 7
64050: ARRAY
64051: PUSH
64052: LD_INT 1
64054: ARRAY
64055: PPUSH
64056: LD_VAR 0 12
64060: PUSH
64061: LD_VAR 0 7
64065: ARRAY
64066: PUSH
64067: LD_INT 2
64069: ARRAY
64070: PPUSH
64071: CALL_OW 351
64075: OR
64076: IFFALSE 64082
// exit ;
64078: POP
64079: POP
64080: GO 64374
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64082: LD_ADDR_VAR 0 8
64086: PUSH
64087: LD_VAR 0 12
64091: PUSH
64092: LD_VAR 0 7
64096: ARRAY
64097: PUSH
64098: LD_INT 1
64100: ARRAY
64101: PPUSH
64102: LD_VAR 0 12
64106: PUSH
64107: LD_VAR 0 7
64111: ARRAY
64112: PUSH
64113: LD_INT 2
64115: ARRAY
64116: PPUSH
64117: CALL_OW 546
64121: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
64122: LD_VAR 0 8
64126: PUSH
64127: LD_INT 1
64129: ARRAY
64130: PUSH
64131: LD_VAR 0 8
64135: PUSH
64136: LD_INT 2
64138: ARRAY
64139: PUSH
64140: LD_VAR 0 13
64144: PUSH
64145: LD_INT 2
64147: PLUS
64148: GREATER
64149: OR
64150: PUSH
64151: LD_VAR 0 8
64155: PUSH
64156: LD_INT 2
64158: ARRAY
64159: PUSH
64160: LD_VAR 0 13
64164: PUSH
64165: LD_INT 2
64167: MINUS
64168: LESS
64169: OR
64170: PUSH
64171: LD_VAR 0 8
64175: PUSH
64176: LD_INT 3
64178: ARRAY
64179: PUSH
64180: LD_INT 0
64182: PUSH
64183: LD_INT 8
64185: PUSH
64186: LD_INT 9
64188: PUSH
64189: LD_INT 10
64191: PUSH
64192: LD_INT 11
64194: PUSH
64195: LD_INT 12
64197: PUSH
64198: LD_INT 13
64200: PUSH
64201: LD_INT 16
64203: PUSH
64204: LD_INT 17
64206: PUSH
64207: LD_INT 18
64209: PUSH
64210: LD_INT 19
64212: PUSH
64213: LD_INT 20
64215: PUSH
64216: LD_INT 21
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: IN
64234: NOT
64235: OR
64236: PUSH
64237: LD_VAR 0 8
64241: PUSH
64242: LD_INT 5
64244: ARRAY
64245: NOT
64246: OR
64247: PUSH
64248: LD_VAR 0 8
64252: PUSH
64253: LD_INT 6
64255: ARRAY
64256: PUSH
64257: LD_INT 1
64259: PUSH
64260: LD_INT 2
64262: PUSH
64263: LD_INT 7
64265: PUSH
64266: LD_INT 9
64268: PUSH
64269: LD_INT 10
64271: PUSH
64272: LD_INT 11
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: IN
64283: NOT
64284: OR
64285: IFFALSE 64291
// exit ;
64287: POP
64288: POP
64289: GO 64374
// end ;
64291: GO 63962
64293: POP
64294: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
64295: LD_VAR 0 9
64299: PPUSH
64300: LD_VAR 0 3
64304: PPUSH
64305: LD_VAR 0 4
64309: PPUSH
64310: LD_INT 20
64312: PPUSH
64313: CALL 56326 0 4
64317: PUSH
64318: LD_INT 4
64320: ARRAY
64321: IFFALSE 64325
// exit ;
64323: GO 64374
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
64325: LD_VAR 0 2
64329: PUSH
64330: LD_INT 29
64332: PUSH
64333: LD_INT 30
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: IN
64340: PUSH
64341: LD_VAR 0 3
64345: PPUSH
64346: LD_VAR 0 4
64350: PPUSH
64351: LD_VAR 0 9
64355: PPUSH
64356: CALL_OW 440
64360: NOT
64361: AND
64362: IFFALSE 64366
// exit ;
64364: GO 64374
// result := true ;
64366: LD_ADDR_VAR 0 6
64370: PUSH
64371: LD_INT 1
64373: ST_TO_ADDR
// end ;
64374: LD_VAR 0 6
64378: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
64379: LD_INT 0
64381: PPUSH
64382: PPUSH
64383: PPUSH
64384: PPUSH
64385: PPUSH
64386: PPUSH
64387: PPUSH
64388: PPUSH
64389: PPUSH
64390: PPUSH
64391: PPUSH
64392: PPUSH
64393: PPUSH
64394: PPUSH
64395: PPUSH
64396: PPUSH
64397: PPUSH
64398: PPUSH
64399: PPUSH
64400: PPUSH
64401: PPUSH
64402: PPUSH
64403: PPUSH
64404: PPUSH
64405: PPUSH
64406: PPUSH
64407: PPUSH
64408: PPUSH
64409: PPUSH
64410: PPUSH
64411: PPUSH
64412: PPUSH
64413: PPUSH
64414: PPUSH
64415: PPUSH
64416: PPUSH
64417: PPUSH
64418: PPUSH
64419: PPUSH
64420: PPUSH
64421: PPUSH
64422: PPUSH
64423: PPUSH
64424: PPUSH
64425: PPUSH
64426: PPUSH
64427: PPUSH
64428: PPUSH
64429: PPUSH
64430: PPUSH
64431: PPUSH
64432: PPUSH
64433: PPUSH
64434: PPUSH
64435: PPUSH
64436: PPUSH
64437: PPUSH
64438: PPUSH
// result = [ ] ;
64439: LD_ADDR_VAR 0 7
64443: PUSH
64444: EMPTY
64445: ST_TO_ADDR
// temp_list = [ ] ;
64446: LD_ADDR_VAR 0 9
64450: PUSH
64451: EMPTY
64452: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
64453: LD_VAR 0 4
64457: PUSH
64458: LD_INT 0
64460: PUSH
64461: LD_INT 1
64463: PUSH
64464: LD_INT 2
64466: PUSH
64467: LD_INT 3
64469: PUSH
64470: LD_INT 4
64472: PUSH
64473: LD_INT 5
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: IN
64484: NOT
64485: PUSH
64486: LD_VAR 0 1
64490: PUSH
64491: LD_INT 0
64493: PUSH
64494: LD_INT 1
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: IN
64501: PUSH
64502: LD_VAR 0 5
64506: PUSH
64507: LD_INT 1
64509: PUSH
64510: LD_INT 2
64512: PUSH
64513: LD_INT 3
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: LIST
64520: IN
64521: NOT
64522: AND
64523: OR
64524: IFFALSE 64528
// exit ;
64526: GO 82919
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
64528: LD_VAR 0 1
64532: PUSH
64533: LD_INT 6
64535: PUSH
64536: LD_INT 7
64538: PUSH
64539: LD_INT 8
64541: PUSH
64542: LD_INT 13
64544: PUSH
64545: LD_INT 12
64547: PUSH
64548: LD_INT 15
64550: PUSH
64551: LD_INT 11
64553: PUSH
64554: LD_INT 14
64556: PUSH
64557: LD_INT 10
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: IN
64571: IFFALSE 64581
// btype = b_lab ;
64573: LD_ADDR_VAR 0 1
64577: PUSH
64578: LD_INT 6
64580: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
64581: LD_VAR 0 6
64585: PUSH
64586: LD_INT 0
64588: PUSH
64589: LD_INT 1
64591: PUSH
64592: LD_INT 2
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: LIST
64599: IN
64600: NOT
64601: PUSH
64602: LD_VAR 0 1
64606: PUSH
64607: LD_INT 0
64609: PUSH
64610: LD_INT 1
64612: PUSH
64613: LD_INT 2
64615: PUSH
64616: LD_INT 3
64618: PUSH
64619: LD_INT 6
64621: PUSH
64622: LD_INT 36
64624: PUSH
64625: LD_INT 4
64627: PUSH
64628: LD_INT 5
64630: PUSH
64631: LD_INT 31
64633: PUSH
64634: LD_INT 32
64636: PUSH
64637: LD_INT 33
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: IN
64653: NOT
64654: PUSH
64655: LD_VAR 0 6
64659: PUSH
64660: LD_INT 1
64662: EQUAL
64663: AND
64664: OR
64665: PUSH
64666: LD_VAR 0 1
64670: PUSH
64671: LD_INT 2
64673: PUSH
64674: LD_INT 3
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: IN
64681: NOT
64682: PUSH
64683: LD_VAR 0 6
64687: PUSH
64688: LD_INT 2
64690: EQUAL
64691: AND
64692: OR
64693: IFFALSE 64703
// mode = 0 ;
64695: LD_ADDR_VAR 0 6
64699: PUSH
64700: LD_INT 0
64702: ST_TO_ADDR
// case mode of 0 :
64703: LD_VAR 0 6
64707: PUSH
64708: LD_INT 0
64710: DOUBLE
64711: EQUAL
64712: IFTRUE 64716
64714: GO 76169
64716: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64717: LD_ADDR_VAR 0 11
64721: PUSH
64722: LD_INT 0
64724: PUSH
64725: LD_INT 0
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 0
64734: PUSH
64735: LD_INT 1
64737: NEG
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 1
64745: PUSH
64746: LD_INT 0
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 1
64755: PUSH
64756: LD_INT 1
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 0
64765: PUSH
64766: LD_INT 1
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 1
64775: NEG
64776: PUSH
64777: LD_INT 0
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 1
64786: NEG
64787: PUSH
64788: LD_INT 1
64790: NEG
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 1
64798: NEG
64799: PUSH
64800: LD_INT 2
64802: NEG
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 0
64810: PUSH
64811: LD_INT 2
64813: NEG
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 1
64821: PUSH
64822: LD_INT 1
64824: NEG
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 1
64832: PUSH
64833: LD_INT 2
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 0
64842: PUSH
64843: LD_INT 2
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 1
64852: NEG
64853: PUSH
64854: LD_INT 1
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 1
64863: PUSH
64864: LD_INT 3
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 0
64873: PUSH
64874: LD_INT 3
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 1
64883: NEG
64884: PUSH
64885: LD_INT 2
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64910: LD_ADDR_VAR 0 12
64914: PUSH
64915: LD_INT 0
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 0
64927: PUSH
64928: LD_INT 1
64930: NEG
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 1
64938: PUSH
64939: LD_INT 0
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 1
64948: PUSH
64949: LD_INT 1
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 0
64958: PUSH
64959: LD_INT 1
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 1
64968: NEG
64969: PUSH
64970: LD_INT 0
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 1
64979: NEG
64980: PUSH
64981: LD_INT 1
64983: NEG
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 1
64991: PUSH
64992: LD_INT 1
64994: NEG
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 2
65002: PUSH
65003: LD_INT 0
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 2
65012: PUSH
65013: LD_INT 1
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 1
65022: NEG
65023: PUSH
65024: LD_INT 1
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 2
65033: NEG
65034: PUSH
65035: LD_INT 0
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 2
65044: NEG
65045: PUSH
65046: LD_INT 1
65048: NEG
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 2
65056: NEG
65057: PUSH
65058: LD_INT 1
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 3
65067: NEG
65068: PUSH
65069: LD_INT 0
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 3
65078: NEG
65079: PUSH
65080: LD_INT 1
65082: NEG
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65106: LD_ADDR_VAR 0 13
65110: PUSH
65111: LD_INT 0
65113: PUSH
65114: LD_INT 0
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 0
65123: PUSH
65124: LD_INT 1
65126: NEG
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 1
65134: PUSH
65135: LD_INT 0
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 1
65144: PUSH
65145: LD_INT 1
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 0
65154: PUSH
65155: LD_INT 1
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 1
65164: NEG
65165: PUSH
65166: LD_INT 0
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 1
65175: NEG
65176: PUSH
65177: LD_INT 1
65179: NEG
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 1
65187: NEG
65188: PUSH
65189: LD_INT 2
65191: NEG
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 2
65199: PUSH
65200: LD_INT 1
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 2
65209: PUSH
65210: LD_INT 2
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 1
65219: PUSH
65220: LD_INT 2
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 2
65229: NEG
65230: PUSH
65231: LD_INT 1
65233: NEG
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 2
65241: NEG
65242: PUSH
65243: LD_INT 2
65245: NEG
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 2
65253: NEG
65254: PUSH
65255: LD_INT 3
65257: NEG
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 3
65265: NEG
65266: PUSH
65267: LD_INT 2
65269: NEG
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 3
65277: NEG
65278: PUSH
65279: LD_INT 3
65281: NEG
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65305: LD_ADDR_VAR 0 14
65309: PUSH
65310: LD_INT 0
65312: PUSH
65313: LD_INT 0
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 0
65322: PUSH
65323: LD_INT 1
65325: NEG
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 1
65333: PUSH
65334: LD_INT 0
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 1
65343: PUSH
65344: LD_INT 1
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 0
65353: PUSH
65354: LD_INT 1
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 1
65363: NEG
65364: PUSH
65365: LD_INT 0
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 1
65374: NEG
65375: PUSH
65376: LD_INT 1
65378: NEG
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 1
65386: NEG
65387: PUSH
65388: LD_INT 2
65390: NEG
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 0
65398: PUSH
65399: LD_INT 2
65401: NEG
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 1
65409: PUSH
65410: LD_INT 1
65412: NEG
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 1
65420: PUSH
65421: LD_INT 2
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 0
65430: PUSH
65431: LD_INT 2
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 1
65440: NEG
65441: PUSH
65442: LD_INT 1
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 1
65451: NEG
65452: PUSH
65453: LD_INT 3
65455: NEG
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 0
65463: PUSH
65464: LD_INT 3
65466: NEG
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 1
65474: PUSH
65475: LD_INT 2
65477: NEG
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65501: LD_ADDR_VAR 0 15
65505: PUSH
65506: LD_INT 0
65508: PUSH
65509: LD_INT 0
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 0
65518: PUSH
65519: LD_INT 1
65521: NEG
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 1
65529: PUSH
65530: LD_INT 0
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 1
65539: PUSH
65540: LD_INT 1
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 0
65549: PUSH
65550: LD_INT 1
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 1
65559: NEG
65560: PUSH
65561: LD_INT 0
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 1
65570: NEG
65571: PUSH
65572: LD_INT 1
65574: NEG
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 1
65582: PUSH
65583: LD_INT 1
65585: NEG
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 2
65593: PUSH
65594: LD_INT 0
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 2
65603: PUSH
65604: LD_INT 1
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 1
65613: NEG
65614: PUSH
65615: LD_INT 1
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 2
65624: NEG
65625: PUSH
65626: LD_INT 0
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 2
65635: NEG
65636: PUSH
65637: LD_INT 1
65639: NEG
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 2
65647: PUSH
65648: LD_INT 1
65650: NEG
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 3
65658: PUSH
65659: LD_INT 0
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 3
65668: PUSH
65669: LD_INT 1
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65694: LD_ADDR_VAR 0 16
65698: PUSH
65699: LD_INT 0
65701: PUSH
65702: LD_INT 0
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 0
65711: PUSH
65712: LD_INT 1
65714: NEG
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 1
65722: PUSH
65723: LD_INT 0
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 1
65732: PUSH
65733: LD_INT 1
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 0
65742: PUSH
65743: LD_INT 1
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 1
65752: NEG
65753: PUSH
65754: LD_INT 0
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 1
65763: NEG
65764: PUSH
65765: LD_INT 1
65767: NEG
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 1
65775: NEG
65776: PUSH
65777: LD_INT 2
65779: NEG
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 2
65787: PUSH
65788: LD_INT 1
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 2
65797: PUSH
65798: LD_INT 2
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 1
65807: PUSH
65808: LD_INT 2
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 2
65817: NEG
65818: PUSH
65819: LD_INT 1
65821: NEG
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 2
65829: NEG
65830: PUSH
65831: LD_INT 2
65833: NEG
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 3
65841: PUSH
65842: LD_INT 2
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 3
65851: PUSH
65852: LD_INT 3
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 2
65861: PUSH
65862: LD_INT 3
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65887: LD_ADDR_VAR 0 17
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: LD_INT 0
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 0
65904: PUSH
65905: LD_INT 1
65907: NEG
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 1
65915: PUSH
65916: LD_INT 0
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 1
65925: PUSH
65926: LD_INT 1
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 0
65935: PUSH
65936: LD_INT 1
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 1
65945: NEG
65946: PUSH
65947: LD_INT 0
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 1
65956: NEG
65957: PUSH
65958: LD_INT 1
65960: NEG
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 1
65968: NEG
65969: PUSH
65970: LD_INT 2
65972: NEG
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 0
65980: PUSH
65981: LD_INT 2
65983: NEG
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 1
65991: PUSH
65992: LD_INT 1
65994: NEG
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 2
66002: PUSH
66003: LD_INT 0
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 2
66012: PUSH
66013: LD_INT 1
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 2
66022: PUSH
66023: LD_INT 2
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 1
66032: PUSH
66033: LD_INT 2
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 0
66042: PUSH
66043: LD_INT 2
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 1
66052: NEG
66053: PUSH
66054: LD_INT 1
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 2
66063: NEG
66064: PUSH
66065: LD_INT 0
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 2
66074: NEG
66075: PUSH
66076: LD_INT 1
66078: NEG
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 2
66086: NEG
66087: PUSH
66088: LD_INT 2
66090: NEG
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66117: LD_ADDR_VAR 0 18
66121: PUSH
66122: LD_INT 0
66124: PUSH
66125: LD_INT 0
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 0
66134: PUSH
66135: LD_INT 1
66137: NEG
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 1
66145: PUSH
66146: LD_INT 0
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 1
66155: PUSH
66156: LD_INT 1
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 0
66165: PUSH
66166: LD_INT 1
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 1
66175: NEG
66176: PUSH
66177: LD_INT 0
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 1
66186: NEG
66187: PUSH
66188: LD_INT 1
66190: NEG
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 1
66198: NEG
66199: PUSH
66200: LD_INT 2
66202: NEG
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 0
66210: PUSH
66211: LD_INT 2
66213: NEG
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 1
66221: PUSH
66222: LD_INT 1
66224: NEG
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 2
66232: PUSH
66233: LD_INT 0
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 2
66242: PUSH
66243: LD_INT 1
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 2
66252: PUSH
66253: LD_INT 2
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 1
66262: PUSH
66263: LD_INT 2
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 0
66272: PUSH
66273: LD_INT 2
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 1
66282: NEG
66283: PUSH
66284: LD_INT 1
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 2
66293: NEG
66294: PUSH
66295: LD_INT 0
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 2
66304: NEG
66305: PUSH
66306: LD_INT 1
66308: NEG
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 2
66316: NEG
66317: PUSH
66318: LD_INT 2
66320: NEG
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66347: LD_ADDR_VAR 0 19
66351: PUSH
66352: LD_INT 0
66354: PUSH
66355: LD_INT 0
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 0
66364: PUSH
66365: LD_INT 1
66367: NEG
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 1
66375: PUSH
66376: LD_INT 0
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 1
66385: PUSH
66386: LD_INT 1
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 0
66395: PUSH
66396: LD_INT 1
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 1
66405: NEG
66406: PUSH
66407: LD_INT 0
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 1
66416: NEG
66417: PUSH
66418: LD_INT 1
66420: NEG
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: LD_INT 1
66428: NEG
66429: PUSH
66430: LD_INT 2
66432: NEG
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 0
66440: PUSH
66441: LD_INT 2
66443: NEG
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 1
66451: PUSH
66452: LD_INT 1
66454: NEG
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: LD_INT 2
66462: PUSH
66463: LD_INT 0
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 2
66472: PUSH
66473: LD_INT 1
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 2
66482: PUSH
66483: LD_INT 2
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 1
66492: PUSH
66493: LD_INT 2
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 0
66502: PUSH
66503: LD_INT 2
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 1
66512: NEG
66513: PUSH
66514: LD_INT 1
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: LD_INT 2
66523: NEG
66524: PUSH
66525: LD_INT 0
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 2
66534: NEG
66535: PUSH
66536: LD_INT 1
66538: NEG
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 2
66546: NEG
66547: PUSH
66548: LD_INT 2
66550: NEG
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66577: LD_ADDR_VAR 0 20
66581: PUSH
66582: LD_INT 0
66584: PUSH
66585: LD_INT 0
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 0
66594: PUSH
66595: LD_INT 1
66597: NEG
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 1
66605: PUSH
66606: LD_INT 0
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 1
66615: PUSH
66616: LD_INT 1
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 0
66625: PUSH
66626: LD_INT 1
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 1
66635: NEG
66636: PUSH
66637: LD_INT 0
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 1
66646: NEG
66647: PUSH
66648: LD_INT 1
66650: NEG
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 1
66658: NEG
66659: PUSH
66660: LD_INT 2
66662: NEG
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 0
66670: PUSH
66671: LD_INT 2
66673: NEG
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 1
66681: PUSH
66682: LD_INT 1
66684: NEG
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 2
66692: PUSH
66693: LD_INT 0
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 2
66702: PUSH
66703: LD_INT 1
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 2
66712: PUSH
66713: LD_INT 2
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 1
66722: PUSH
66723: LD_INT 2
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 0
66732: PUSH
66733: LD_INT 2
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: PUSH
66740: LD_INT 1
66742: NEG
66743: PUSH
66744: LD_INT 1
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 2
66753: NEG
66754: PUSH
66755: LD_INT 0
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 2
66764: NEG
66765: PUSH
66766: LD_INT 1
66768: NEG
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 2
66776: NEG
66777: PUSH
66778: LD_INT 2
66780: NEG
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66807: LD_ADDR_VAR 0 21
66811: PUSH
66812: LD_INT 0
66814: PUSH
66815: LD_INT 0
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: LD_INT 0
66824: PUSH
66825: LD_INT 1
66827: NEG
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 1
66835: PUSH
66836: LD_INT 0
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 1
66845: PUSH
66846: LD_INT 1
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 0
66855: PUSH
66856: LD_INT 1
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 1
66865: NEG
66866: PUSH
66867: LD_INT 0
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 1
66876: NEG
66877: PUSH
66878: LD_INT 1
66880: NEG
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 1
66888: NEG
66889: PUSH
66890: LD_INT 2
66892: NEG
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 0
66900: PUSH
66901: LD_INT 2
66903: NEG
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 1
66911: PUSH
66912: LD_INT 1
66914: NEG
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 2
66922: PUSH
66923: LD_INT 0
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 2
66932: PUSH
66933: LD_INT 1
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 2
66942: PUSH
66943: LD_INT 2
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 1
66952: PUSH
66953: LD_INT 2
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 0
66962: PUSH
66963: LD_INT 2
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 1
66972: NEG
66973: PUSH
66974: LD_INT 1
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: LD_INT 2
66983: NEG
66984: PUSH
66985: LD_INT 0
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 2
66994: NEG
66995: PUSH
66996: LD_INT 1
66998: NEG
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: LD_INT 2
67006: NEG
67007: PUSH
67008: LD_INT 2
67010: NEG
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67037: LD_ADDR_VAR 0 22
67041: PUSH
67042: LD_INT 0
67044: PUSH
67045: LD_INT 0
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 0
67054: PUSH
67055: LD_INT 1
67057: NEG
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 1
67065: PUSH
67066: LD_INT 0
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 1
67075: PUSH
67076: LD_INT 1
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 0
67085: PUSH
67086: LD_INT 1
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 1
67095: NEG
67096: PUSH
67097: LD_INT 0
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 1
67106: NEG
67107: PUSH
67108: LD_INT 1
67110: NEG
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 1
67118: NEG
67119: PUSH
67120: LD_INT 2
67122: NEG
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 0
67130: PUSH
67131: LD_INT 2
67133: NEG
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 1
67141: PUSH
67142: LD_INT 1
67144: NEG
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 2
67152: PUSH
67153: LD_INT 0
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 2
67162: PUSH
67163: LD_INT 1
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 2
67172: PUSH
67173: LD_INT 2
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 1
67182: PUSH
67183: LD_INT 2
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 0
67192: PUSH
67193: LD_INT 2
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 1
67202: NEG
67203: PUSH
67204: LD_INT 1
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 2
67213: NEG
67214: PUSH
67215: LD_INT 0
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 2
67224: NEG
67225: PUSH
67226: LD_INT 1
67228: NEG
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 2
67236: NEG
67237: PUSH
67238: LD_INT 2
67240: NEG
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67267: LD_ADDR_VAR 0 23
67271: PUSH
67272: LD_INT 0
67274: PUSH
67275: LD_INT 0
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 0
67284: PUSH
67285: LD_INT 1
67287: NEG
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 1
67295: PUSH
67296: LD_INT 0
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 1
67305: PUSH
67306: LD_INT 1
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 0
67315: PUSH
67316: LD_INT 1
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: LD_INT 1
67325: NEG
67326: PUSH
67327: LD_INT 0
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 1
67336: NEG
67337: PUSH
67338: LD_INT 1
67340: NEG
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 1
67348: NEG
67349: PUSH
67350: LD_INT 2
67352: NEG
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 0
67360: PUSH
67361: LD_INT 2
67363: NEG
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 1
67371: PUSH
67372: LD_INT 1
67374: NEG
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 2
67382: PUSH
67383: LD_INT 0
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 2
67392: PUSH
67393: LD_INT 1
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 2
67402: PUSH
67403: LD_INT 2
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 1
67412: PUSH
67413: LD_INT 2
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 0
67422: PUSH
67423: LD_INT 2
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 1
67432: NEG
67433: PUSH
67434: LD_INT 1
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 2
67443: NEG
67444: PUSH
67445: LD_INT 0
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 2
67454: NEG
67455: PUSH
67456: LD_INT 1
67458: NEG
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PUSH
67464: LD_INT 2
67466: NEG
67467: PUSH
67468: LD_INT 2
67470: NEG
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 2
67478: NEG
67479: PUSH
67480: LD_INT 3
67482: NEG
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 1
67490: NEG
67491: PUSH
67492: LD_INT 3
67494: NEG
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 1
67502: PUSH
67503: LD_INT 2
67505: NEG
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 2
67513: PUSH
67514: LD_INT 1
67516: NEG
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: LIST
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
67547: LD_ADDR_VAR 0 24
67551: PUSH
67552: LD_INT 0
67554: PUSH
67555: LD_INT 0
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 0
67564: PUSH
67565: LD_INT 1
67567: NEG
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 1
67575: PUSH
67576: LD_INT 0
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: LD_INT 1
67585: PUSH
67586: LD_INT 1
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 0
67595: PUSH
67596: LD_INT 1
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 1
67605: NEG
67606: PUSH
67607: LD_INT 0
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 1
67616: NEG
67617: PUSH
67618: LD_INT 1
67620: NEG
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 1
67628: NEG
67629: PUSH
67630: LD_INT 2
67632: NEG
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 0
67640: PUSH
67641: LD_INT 2
67643: NEG
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 1
67651: PUSH
67652: LD_INT 1
67654: NEG
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 2
67662: PUSH
67663: LD_INT 0
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 2
67672: PUSH
67673: LD_INT 1
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 2
67682: PUSH
67683: LD_INT 2
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 1
67692: PUSH
67693: LD_INT 2
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 0
67702: PUSH
67703: LD_INT 2
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 1
67712: NEG
67713: PUSH
67714: LD_INT 1
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 2
67723: NEG
67724: PUSH
67725: LD_INT 0
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 2
67734: NEG
67735: PUSH
67736: LD_INT 1
67738: NEG
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 2
67746: NEG
67747: PUSH
67748: LD_INT 2
67750: NEG
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_INT 1
67758: PUSH
67759: LD_INT 2
67761: NEG
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 2
67769: PUSH
67770: LD_INT 1
67772: NEG
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: LD_INT 3
67780: PUSH
67781: LD_INT 1
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: PUSH
67788: LD_INT 3
67790: PUSH
67791: LD_INT 2
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
67823: LD_ADDR_VAR 0 25
67827: PUSH
67828: LD_INT 0
67830: PUSH
67831: LD_INT 0
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 0
67840: PUSH
67841: LD_INT 1
67843: NEG
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 1
67851: PUSH
67852: LD_INT 0
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: LD_INT 1
67861: PUSH
67862: LD_INT 1
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 0
67871: PUSH
67872: LD_INT 1
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 1
67881: NEG
67882: PUSH
67883: LD_INT 0
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 1
67892: NEG
67893: PUSH
67894: LD_INT 1
67896: NEG
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 1
67904: NEG
67905: PUSH
67906: LD_INT 2
67908: NEG
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 0
67916: PUSH
67917: LD_INT 2
67919: NEG
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 1
67927: PUSH
67928: LD_INT 1
67930: NEG
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 2
67938: PUSH
67939: LD_INT 0
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 2
67948: PUSH
67949: LD_INT 1
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 2
67958: PUSH
67959: LD_INT 2
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 1
67968: PUSH
67969: LD_INT 2
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 0
67978: PUSH
67979: LD_INT 2
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 1
67988: NEG
67989: PUSH
67990: LD_INT 1
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 2
67999: NEG
68000: PUSH
68001: LD_INT 0
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 2
68010: NEG
68011: PUSH
68012: LD_INT 1
68014: NEG
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 2
68022: NEG
68023: PUSH
68024: LD_INT 2
68026: NEG
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: LD_INT 3
68034: PUSH
68035: LD_INT 1
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 3
68044: PUSH
68045: LD_INT 2
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 2
68054: PUSH
68055: LD_INT 3
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 1
68064: PUSH
68065: LD_INT 3
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68097: LD_ADDR_VAR 0 26
68101: PUSH
68102: LD_INT 0
68104: PUSH
68105: LD_INT 0
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 0
68114: PUSH
68115: LD_INT 1
68117: NEG
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 1
68125: PUSH
68126: LD_INT 0
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: LD_INT 1
68135: PUSH
68136: LD_INT 1
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: LD_INT 0
68145: PUSH
68146: LD_INT 1
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 1
68155: NEG
68156: PUSH
68157: LD_INT 0
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 1
68166: NEG
68167: PUSH
68168: LD_INT 1
68170: NEG
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 1
68178: NEG
68179: PUSH
68180: LD_INT 2
68182: NEG
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 0
68190: PUSH
68191: LD_INT 2
68193: NEG
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 1
68201: PUSH
68202: LD_INT 1
68204: NEG
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 2
68212: PUSH
68213: LD_INT 0
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 2
68222: PUSH
68223: LD_INT 1
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 2
68232: PUSH
68233: LD_INT 2
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 1
68242: PUSH
68243: LD_INT 2
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 0
68252: PUSH
68253: LD_INT 2
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 1
68262: NEG
68263: PUSH
68264: LD_INT 1
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 2
68273: NEG
68274: PUSH
68275: LD_INT 0
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 2
68284: NEG
68285: PUSH
68286: LD_INT 1
68288: NEG
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: LD_INT 2
68296: NEG
68297: PUSH
68298: LD_INT 2
68300: NEG
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 2
68308: PUSH
68309: LD_INT 3
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 1
68318: PUSH
68319: LD_INT 3
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 1
68328: NEG
68329: PUSH
68330: LD_INT 2
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 2
68339: NEG
68340: PUSH
68341: LD_INT 1
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68373: LD_ADDR_VAR 0 27
68377: PUSH
68378: LD_INT 0
68380: PUSH
68381: LD_INT 0
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 0
68390: PUSH
68391: LD_INT 1
68393: NEG
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 1
68401: PUSH
68402: LD_INT 0
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: LD_INT 1
68411: PUSH
68412: LD_INT 1
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 0
68421: PUSH
68422: LD_INT 1
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: PUSH
68429: LD_INT 1
68431: NEG
68432: PUSH
68433: LD_INT 0
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: PUSH
68440: LD_INT 1
68442: NEG
68443: PUSH
68444: LD_INT 1
68446: NEG
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: LD_INT 1
68454: NEG
68455: PUSH
68456: LD_INT 2
68458: NEG
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 0
68466: PUSH
68467: LD_INT 2
68469: NEG
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PUSH
68475: LD_INT 1
68477: PUSH
68478: LD_INT 1
68480: NEG
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PUSH
68486: LD_INT 2
68488: PUSH
68489: LD_INT 0
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: PUSH
68496: LD_INT 2
68498: PUSH
68499: LD_INT 1
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: PUSH
68506: LD_INT 2
68508: PUSH
68509: LD_INT 2
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: LD_INT 1
68518: PUSH
68519: LD_INT 2
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 0
68528: PUSH
68529: LD_INT 2
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: LD_INT 1
68538: NEG
68539: PUSH
68540: LD_INT 1
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: PUSH
68547: LD_INT 2
68549: NEG
68550: PUSH
68551: LD_INT 0
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 2
68560: NEG
68561: PUSH
68562: LD_INT 1
68564: NEG
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 2
68572: NEG
68573: PUSH
68574: LD_INT 2
68576: NEG
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: LD_INT 1
68584: NEG
68585: PUSH
68586: LD_INT 2
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: LD_INT 2
68595: NEG
68596: PUSH
68597: LD_INT 1
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 3
68606: NEG
68607: PUSH
68608: LD_INT 1
68610: NEG
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 3
68618: NEG
68619: PUSH
68620: LD_INT 2
68622: NEG
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: LIST
68632: LIST
68633: LIST
68634: LIST
68635: LIST
68636: LIST
68637: LIST
68638: LIST
68639: LIST
68640: LIST
68641: LIST
68642: LIST
68643: LIST
68644: LIST
68645: LIST
68646: LIST
68647: LIST
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68653: LD_ADDR_VAR 0 28
68657: PUSH
68658: LD_INT 0
68660: PUSH
68661: LD_INT 0
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 0
68670: PUSH
68671: LD_INT 1
68673: NEG
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PUSH
68679: LD_INT 1
68681: PUSH
68682: LD_INT 0
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 1
68691: PUSH
68692: LD_INT 1
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: LD_INT 0
68701: PUSH
68702: LD_INT 1
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: LD_INT 1
68711: NEG
68712: PUSH
68713: LD_INT 0
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: PUSH
68720: LD_INT 1
68722: NEG
68723: PUSH
68724: LD_INT 1
68726: NEG
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 1
68734: NEG
68735: PUSH
68736: LD_INT 2
68738: NEG
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: LD_INT 0
68746: PUSH
68747: LD_INT 2
68749: NEG
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 1
68757: PUSH
68758: LD_INT 1
68760: NEG
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 2
68768: PUSH
68769: LD_INT 0
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 2
68778: PUSH
68779: LD_INT 1
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 2
68788: PUSH
68789: LD_INT 2
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 1
68798: PUSH
68799: LD_INT 2
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 0
68808: PUSH
68809: LD_INT 2
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: LD_INT 1
68818: NEG
68819: PUSH
68820: LD_INT 1
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 2
68829: NEG
68830: PUSH
68831: LD_INT 0
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: PUSH
68838: LD_INT 2
68840: NEG
68841: PUSH
68842: LD_INT 1
68844: NEG
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 2
68852: NEG
68853: PUSH
68854: LD_INT 2
68856: NEG
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: LD_INT 2
68864: NEG
68865: PUSH
68866: LD_INT 3
68868: NEG
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 1
68876: NEG
68877: PUSH
68878: LD_INT 3
68880: NEG
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 3
68888: NEG
68889: PUSH
68890: LD_INT 1
68892: NEG
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 3
68900: NEG
68901: PUSH
68902: LD_INT 2
68904: NEG
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: LIST
68922: LIST
68923: LIST
68924: LIST
68925: LIST
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
68935: LD_ADDR_VAR 0 29
68939: PUSH
68940: LD_INT 0
68942: PUSH
68943: LD_INT 0
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 0
68952: PUSH
68953: LD_INT 1
68955: NEG
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 1
68963: PUSH
68964: LD_INT 0
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: PUSH
68971: LD_INT 1
68973: PUSH
68974: LD_INT 1
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: LD_INT 0
68983: PUSH
68984: LD_INT 1
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: PUSH
68991: LD_INT 1
68993: NEG
68994: PUSH
68995: LD_INT 0
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: PUSH
69002: LD_INT 1
69004: NEG
69005: PUSH
69006: LD_INT 1
69008: NEG
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 1
69016: NEG
69017: PUSH
69018: LD_INT 2
69020: NEG
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 0
69028: PUSH
69029: LD_INT 2
69031: NEG
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: LD_INT 1
69039: PUSH
69040: LD_INT 1
69042: NEG
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 2
69050: PUSH
69051: LD_INT 0
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 2
69060: PUSH
69061: LD_INT 1
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: LD_INT 1
69070: PUSH
69071: LD_INT 2
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 0
69080: PUSH
69081: LD_INT 2
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: LD_INT 1
69090: NEG
69091: PUSH
69092: LD_INT 1
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: PUSH
69099: LD_INT 2
69101: NEG
69102: PUSH
69103: LD_INT 1
69105: NEG
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 2
69113: NEG
69114: PUSH
69115: LD_INT 2
69117: NEG
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: LD_INT 2
69125: NEG
69126: PUSH
69127: LD_INT 3
69129: NEG
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 2
69137: PUSH
69138: LD_INT 1
69140: NEG
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 3
69148: PUSH
69149: LD_INT 1
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: PUSH
69156: LD_INT 1
69158: PUSH
69159: LD_INT 3
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: PUSH
69166: LD_INT 1
69168: NEG
69169: PUSH
69170: LD_INT 2
69172: PUSH
69173: EMPTY
69174: LIST
69175: LIST
69176: PUSH
69177: LD_INT 3
69179: NEG
69180: PUSH
69181: LD_INT 2
69183: NEG
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: LIST
69204: LIST
69205: LIST
69206: LIST
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69214: LD_ADDR_VAR 0 30
69218: PUSH
69219: LD_INT 0
69221: PUSH
69222: LD_INT 0
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: LD_INT 0
69231: PUSH
69232: LD_INT 1
69234: NEG
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: LD_INT 1
69242: PUSH
69243: LD_INT 0
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 1
69252: PUSH
69253: LD_INT 1
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 0
69262: PUSH
69263: LD_INT 1
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: LD_INT 1
69272: NEG
69273: PUSH
69274: LD_INT 0
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 1
69283: NEG
69284: PUSH
69285: LD_INT 1
69287: NEG
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: PUSH
69293: LD_INT 1
69295: NEG
69296: PUSH
69297: LD_INT 2
69299: NEG
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: PUSH
69305: LD_INT 0
69307: PUSH
69308: LD_INT 2
69310: NEG
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: LD_INT 1
69318: PUSH
69319: LD_INT 1
69321: NEG
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: LD_INT 2
69329: PUSH
69330: LD_INT 0
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 2
69339: PUSH
69340: LD_INT 1
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 2
69349: PUSH
69350: LD_INT 2
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: LD_INT 1
69359: PUSH
69360: LD_INT 2
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 1
69369: NEG
69370: PUSH
69371: LD_INT 1
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 2
69380: NEG
69381: PUSH
69382: LD_INT 0
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: LD_INT 2
69391: NEG
69392: PUSH
69393: LD_INT 1
69395: NEG
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 1
69403: NEG
69404: PUSH
69405: LD_INT 3
69407: NEG
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 1
69415: PUSH
69416: LD_INT 2
69418: NEG
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 3
69426: PUSH
69427: LD_INT 2
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: LD_INT 2
69436: PUSH
69437: LD_INT 3
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: LD_INT 2
69446: NEG
69447: PUSH
69448: LD_INT 1
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PUSH
69455: LD_INT 3
69457: NEG
69458: PUSH
69459: LD_INT 1
69461: NEG
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
69492: LD_ADDR_VAR 0 31
69496: PUSH
69497: LD_INT 0
69499: PUSH
69500: LD_INT 0
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 0
69509: PUSH
69510: LD_INT 1
69512: NEG
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 1
69520: PUSH
69521: LD_INT 0
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 1
69530: PUSH
69531: LD_INT 1
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 0
69540: PUSH
69541: LD_INT 1
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 1
69550: NEG
69551: PUSH
69552: LD_INT 0
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: LD_INT 1
69561: NEG
69562: PUSH
69563: LD_INT 1
69565: NEG
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: PUSH
69571: LD_INT 1
69573: NEG
69574: PUSH
69575: LD_INT 2
69577: NEG
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 1
69585: PUSH
69586: LD_INT 1
69588: NEG
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 2
69596: PUSH
69597: LD_INT 0
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: PUSH
69604: LD_INT 2
69606: PUSH
69607: LD_INT 1
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: PUSH
69614: LD_INT 2
69616: PUSH
69617: LD_INT 2
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: PUSH
69624: LD_INT 1
69626: PUSH
69627: LD_INT 2
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: PUSH
69634: LD_INT 0
69636: PUSH
69637: LD_INT 2
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PUSH
69644: LD_INT 1
69646: NEG
69647: PUSH
69648: LD_INT 1
69650: PUSH
69651: EMPTY
69652: LIST
69653: LIST
69654: PUSH
69655: LD_INT 2
69657: NEG
69658: PUSH
69659: LD_INT 1
69661: NEG
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 2
69669: NEG
69670: PUSH
69671: LD_INT 2
69673: NEG
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: LD_INT 2
69681: NEG
69682: PUSH
69683: LD_INT 3
69685: NEG
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: PUSH
69691: LD_INT 2
69693: PUSH
69694: LD_INT 1
69696: NEG
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: LD_INT 3
69704: PUSH
69705: LD_INT 1
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 1
69714: PUSH
69715: LD_INT 3
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: PUSH
69722: LD_INT 1
69724: NEG
69725: PUSH
69726: LD_INT 2
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: PUSH
69733: LD_INT 3
69735: NEG
69736: PUSH
69737: LD_INT 2
69739: NEG
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69770: LD_ADDR_VAR 0 32
69774: PUSH
69775: LD_INT 0
69777: PUSH
69778: LD_INT 0
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: PUSH
69785: LD_INT 0
69787: PUSH
69788: LD_INT 1
69790: NEG
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: PUSH
69796: LD_INT 1
69798: PUSH
69799: LD_INT 0
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: PUSH
69806: LD_INT 1
69808: PUSH
69809: LD_INT 1
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PUSH
69816: LD_INT 0
69818: PUSH
69819: LD_INT 1
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 1
69828: NEG
69829: PUSH
69830: LD_INT 0
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: PUSH
69837: LD_INT 1
69839: NEG
69840: PUSH
69841: LD_INT 1
69843: NEG
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: LD_INT 1
69851: NEG
69852: PUSH
69853: LD_INT 2
69855: NEG
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: LD_INT 0
69863: PUSH
69864: LD_INT 2
69866: NEG
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: PUSH
69872: LD_INT 1
69874: PUSH
69875: LD_INT 1
69877: NEG
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_INT 2
69885: PUSH
69886: LD_INT 1
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 2
69895: PUSH
69896: LD_INT 2
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 1
69905: PUSH
69906: LD_INT 2
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 0
69915: PUSH
69916: LD_INT 2
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PUSH
69923: LD_INT 1
69925: NEG
69926: PUSH
69927: LD_INT 1
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: PUSH
69934: LD_INT 2
69936: NEG
69937: PUSH
69938: LD_INT 0
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: PUSH
69945: LD_INT 2
69947: NEG
69948: PUSH
69949: LD_INT 1
69951: NEG
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 1
69959: NEG
69960: PUSH
69961: LD_INT 3
69963: NEG
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 1
69971: PUSH
69972: LD_INT 2
69974: NEG
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: LD_INT 3
69982: PUSH
69983: LD_INT 2
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PUSH
69990: LD_INT 2
69992: PUSH
69993: LD_INT 3
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PUSH
70000: LD_INT 2
70002: NEG
70003: PUSH
70004: LD_INT 1
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: PUSH
70011: LD_INT 3
70013: NEG
70014: PUSH
70015: LD_INT 1
70017: NEG
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
70048: LD_ADDR_VAR 0 33
70052: PUSH
70053: LD_INT 0
70055: PUSH
70056: LD_INT 0
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 0
70065: PUSH
70066: LD_INT 1
70068: NEG
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 1
70076: PUSH
70077: LD_INT 0
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PUSH
70084: LD_INT 1
70086: PUSH
70087: LD_INT 1
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: PUSH
70094: LD_INT 0
70096: PUSH
70097: LD_INT 1
70099: PUSH
70100: EMPTY
70101: LIST
70102: LIST
70103: PUSH
70104: LD_INT 1
70106: NEG
70107: PUSH
70108: LD_INT 0
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: PUSH
70115: LD_INT 1
70117: NEG
70118: PUSH
70119: LD_INT 1
70121: NEG
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: LD_INT 1
70129: NEG
70130: PUSH
70131: LD_INT 2
70133: NEG
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 1
70141: PUSH
70142: LD_INT 1
70144: NEG
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_INT 2
70152: PUSH
70153: LD_INT 0
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 2
70162: PUSH
70163: LD_INT 1
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: LD_INT 1
70172: PUSH
70173: LD_INT 2
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: PUSH
70180: LD_INT 0
70182: PUSH
70183: LD_INT 2
70185: PUSH
70186: EMPTY
70187: LIST
70188: LIST
70189: PUSH
70190: LD_INT 1
70192: NEG
70193: PUSH
70194: LD_INT 1
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: LD_INT 2
70203: NEG
70204: PUSH
70205: LD_INT 0
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: LD_INT 2
70214: NEG
70215: PUSH
70216: LD_INT 1
70218: NEG
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: PUSH
70224: LD_INT 2
70226: NEG
70227: PUSH
70228: LD_INT 2
70230: NEG
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PUSH
70236: LD_INT 2
70238: NEG
70239: PUSH
70240: LD_INT 3
70242: NEG
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 2
70250: PUSH
70251: LD_INT 1
70253: NEG
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: LD_INT 3
70261: PUSH
70262: LD_INT 1
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: PUSH
70269: LD_INT 1
70271: PUSH
70272: LD_INT 3
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: LD_INT 1
70281: NEG
70282: PUSH
70283: LD_INT 2
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 3
70292: NEG
70293: PUSH
70294: LD_INT 2
70296: NEG
70297: PUSH
70298: EMPTY
70299: LIST
70300: LIST
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70327: LD_ADDR_VAR 0 34
70331: PUSH
70332: LD_INT 0
70334: PUSH
70335: LD_INT 0
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 0
70344: PUSH
70345: LD_INT 1
70347: NEG
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: PUSH
70353: LD_INT 1
70355: PUSH
70356: LD_INT 0
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 1
70365: PUSH
70366: LD_INT 1
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PUSH
70373: LD_INT 0
70375: PUSH
70376: LD_INT 1
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: PUSH
70383: LD_INT 1
70385: NEG
70386: PUSH
70387: LD_INT 0
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: PUSH
70394: LD_INT 1
70396: NEG
70397: PUSH
70398: LD_INT 1
70400: NEG
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: PUSH
70406: LD_INT 1
70408: NEG
70409: PUSH
70410: LD_INT 2
70412: NEG
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PUSH
70418: LD_INT 0
70420: PUSH
70421: LD_INT 2
70423: NEG
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: PUSH
70429: LD_INT 1
70431: PUSH
70432: LD_INT 1
70434: NEG
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 2
70442: PUSH
70443: LD_INT 1
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: PUSH
70450: LD_INT 2
70452: PUSH
70453: LD_INT 2
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: PUSH
70460: LD_INT 1
70462: PUSH
70463: LD_INT 2
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: LD_INT 1
70472: NEG
70473: PUSH
70474: LD_INT 1
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: PUSH
70481: LD_INT 2
70483: NEG
70484: PUSH
70485: LD_INT 0
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PUSH
70492: LD_INT 2
70494: NEG
70495: PUSH
70496: LD_INT 1
70498: NEG
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: PUSH
70504: LD_INT 2
70506: NEG
70507: PUSH
70508: LD_INT 2
70510: NEG
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PUSH
70516: LD_INT 1
70518: NEG
70519: PUSH
70520: LD_INT 3
70522: NEG
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 1
70530: PUSH
70531: LD_INT 2
70533: NEG
70534: PUSH
70535: EMPTY
70536: LIST
70537: LIST
70538: PUSH
70539: LD_INT 3
70541: PUSH
70542: LD_INT 2
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: PUSH
70549: LD_INT 2
70551: PUSH
70552: LD_INT 3
70554: PUSH
70555: EMPTY
70556: LIST
70557: LIST
70558: PUSH
70559: LD_INT 2
70561: NEG
70562: PUSH
70563: LD_INT 1
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 3
70572: NEG
70573: PUSH
70574: LD_INT 1
70576: NEG
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
70607: LD_ADDR_VAR 0 35
70611: PUSH
70612: LD_INT 0
70614: PUSH
70615: LD_INT 0
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: LD_INT 0
70624: PUSH
70625: LD_INT 1
70627: NEG
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: PUSH
70633: LD_INT 1
70635: PUSH
70636: LD_INT 0
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: PUSH
70643: LD_INT 1
70645: PUSH
70646: LD_INT 1
70648: PUSH
70649: EMPTY
70650: LIST
70651: LIST
70652: PUSH
70653: LD_INT 0
70655: PUSH
70656: LD_INT 1
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: PUSH
70663: LD_INT 1
70665: NEG
70666: PUSH
70667: LD_INT 0
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: PUSH
70674: LD_INT 1
70676: NEG
70677: PUSH
70678: LD_INT 1
70680: NEG
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: PUSH
70686: LD_INT 2
70688: PUSH
70689: LD_INT 1
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: PUSH
70696: LD_INT 2
70698: NEG
70699: PUSH
70700: LD_INT 1
70702: NEG
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
70719: LD_ADDR_VAR 0 36
70723: PUSH
70724: LD_INT 0
70726: PUSH
70727: LD_INT 0
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: LD_INT 0
70736: PUSH
70737: LD_INT 1
70739: NEG
70740: PUSH
70741: EMPTY
70742: LIST
70743: LIST
70744: PUSH
70745: LD_INT 1
70747: PUSH
70748: LD_INT 0
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: PUSH
70755: LD_INT 1
70757: PUSH
70758: LD_INT 1
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_INT 0
70767: PUSH
70768: LD_INT 1
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 1
70777: NEG
70778: PUSH
70779: LD_INT 0
70781: PUSH
70782: EMPTY
70783: LIST
70784: LIST
70785: PUSH
70786: LD_INT 1
70788: NEG
70789: PUSH
70790: LD_INT 1
70792: NEG
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: PUSH
70798: LD_INT 1
70800: NEG
70801: PUSH
70802: LD_INT 2
70804: NEG
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: PUSH
70810: LD_INT 1
70812: PUSH
70813: LD_INT 2
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
70831: LD_ADDR_VAR 0 37
70835: PUSH
70836: LD_INT 0
70838: PUSH
70839: LD_INT 0
70841: PUSH
70842: EMPTY
70843: LIST
70844: LIST
70845: PUSH
70846: LD_INT 0
70848: PUSH
70849: LD_INT 1
70851: NEG
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: PUSH
70857: LD_INT 1
70859: PUSH
70860: LD_INT 0
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 1
70869: PUSH
70870: LD_INT 1
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: PUSH
70877: LD_INT 0
70879: PUSH
70880: LD_INT 1
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: PUSH
70887: LD_INT 1
70889: NEG
70890: PUSH
70891: LD_INT 0
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: PUSH
70898: LD_INT 1
70900: NEG
70901: PUSH
70902: LD_INT 1
70904: NEG
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: LD_INT 1
70912: PUSH
70913: LD_INT 1
70915: NEG
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 1
70923: NEG
70924: PUSH
70925: LD_INT 1
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: LIST
70936: LIST
70937: LIST
70938: LIST
70939: LIST
70940: LIST
70941: LIST
70942: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
70943: LD_ADDR_VAR 0 38
70947: PUSH
70948: LD_INT 0
70950: PUSH
70951: LD_INT 0
70953: PUSH
70954: EMPTY
70955: LIST
70956: LIST
70957: PUSH
70958: LD_INT 0
70960: PUSH
70961: LD_INT 1
70963: NEG
70964: PUSH
70965: EMPTY
70966: LIST
70967: LIST
70968: PUSH
70969: LD_INT 1
70971: PUSH
70972: LD_INT 0
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: LD_INT 1
70981: PUSH
70982: LD_INT 1
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: LD_INT 0
70991: PUSH
70992: LD_INT 1
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_INT 1
71001: NEG
71002: PUSH
71003: LD_INT 0
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 1
71012: NEG
71013: PUSH
71014: LD_INT 1
71016: NEG
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 2
71024: PUSH
71025: LD_INT 1
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: PUSH
71032: LD_INT 2
71034: NEG
71035: PUSH
71036: LD_INT 1
71038: NEG
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
71055: LD_ADDR_VAR 0 39
71059: PUSH
71060: LD_INT 0
71062: PUSH
71063: LD_INT 0
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: PUSH
71070: LD_INT 0
71072: PUSH
71073: LD_INT 1
71075: NEG
71076: PUSH
71077: EMPTY
71078: LIST
71079: LIST
71080: PUSH
71081: LD_INT 1
71083: PUSH
71084: LD_INT 0
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_INT 1
71093: PUSH
71094: LD_INT 1
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 0
71103: PUSH
71104: LD_INT 1
71106: PUSH
71107: EMPTY
71108: LIST
71109: LIST
71110: PUSH
71111: LD_INT 1
71113: NEG
71114: PUSH
71115: LD_INT 0
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PUSH
71122: LD_INT 1
71124: NEG
71125: PUSH
71126: LD_INT 1
71128: NEG
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: PUSH
71134: LD_INT 1
71136: NEG
71137: PUSH
71138: LD_INT 2
71140: NEG
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: PUSH
71146: LD_INT 1
71148: PUSH
71149: LD_INT 2
71151: PUSH
71152: EMPTY
71153: LIST
71154: LIST
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: LIST
71165: LIST
71166: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
71167: LD_ADDR_VAR 0 40
71171: PUSH
71172: LD_INT 0
71174: PUSH
71175: LD_INT 0
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: PUSH
71182: LD_INT 0
71184: PUSH
71185: LD_INT 1
71187: NEG
71188: PUSH
71189: EMPTY
71190: LIST
71191: LIST
71192: PUSH
71193: LD_INT 1
71195: PUSH
71196: LD_INT 0
71198: PUSH
71199: EMPTY
71200: LIST
71201: LIST
71202: PUSH
71203: LD_INT 1
71205: PUSH
71206: LD_INT 1
71208: PUSH
71209: EMPTY
71210: LIST
71211: LIST
71212: PUSH
71213: LD_INT 0
71215: PUSH
71216: LD_INT 1
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PUSH
71223: LD_INT 1
71225: NEG
71226: PUSH
71227: LD_INT 0
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_INT 1
71236: NEG
71237: PUSH
71238: LD_INT 1
71240: NEG
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: PUSH
71246: LD_INT 1
71248: PUSH
71249: LD_INT 1
71251: NEG
71252: PUSH
71253: EMPTY
71254: LIST
71255: LIST
71256: PUSH
71257: LD_INT 1
71259: NEG
71260: PUSH
71261: LD_INT 1
71263: PUSH
71264: EMPTY
71265: LIST
71266: LIST
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: LIST
71272: LIST
71273: LIST
71274: LIST
71275: LIST
71276: LIST
71277: LIST
71278: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71279: LD_ADDR_VAR 0 41
71283: PUSH
71284: LD_INT 0
71286: PUSH
71287: LD_INT 0
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: PUSH
71294: LD_INT 0
71296: PUSH
71297: LD_INT 1
71299: NEG
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 1
71307: PUSH
71308: LD_INT 0
71310: PUSH
71311: EMPTY
71312: LIST
71313: LIST
71314: PUSH
71315: LD_INT 1
71317: PUSH
71318: LD_INT 1
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: PUSH
71325: LD_INT 0
71327: PUSH
71328: LD_INT 1
71330: PUSH
71331: EMPTY
71332: LIST
71333: LIST
71334: PUSH
71335: LD_INT 1
71337: NEG
71338: PUSH
71339: LD_INT 0
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: PUSH
71346: LD_INT 1
71348: NEG
71349: PUSH
71350: LD_INT 1
71352: NEG
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: LD_INT 1
71360: NEG
71361: PUSH
71362: LD_INT 2
71364: NEG
71365: PUSH
71366: EMPTY
71367: LIST
71368: LIST
71369: PUSH
71370: LD_INT 1
71372: PUSH
71373: LD_INT 1
71375: NEG
71376: PUSH
71377: EMPTY
71378: LIST
71379: LIST
71380: PUSH
71381: LD_INT 2
71383: PUSH
71384: LD_INT 0
71386: PUSH
71387: EMPTY
71388: LIST
71389: LIST
71390: PUSH
71391: LD_INT 2
71393: PUSH
71394: LD_INT 1
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: PUSH
71401: LD_INT 2
71403: PUSH
71404: LD_INT 2
71406: PUSH
71407: EMPTY
71408: LIST
71409: LIST
71410: PUSH
71411: LD_INT 1
71413: PUSH
71414: LD_INT 2
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: PUSH
71421: LD_INT 1
71423: NEG
71424: PUSH
71425: LD_INT 1
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: PUSH
71432: LD_INT 2
71434: NEG
71435: PUSH
71436: LD_INT 0
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: PUSH
71443: LD_INT 2
71445: NEG
71446: PUSH
71447: LD_INT 1
71449: NEG
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PUSH
71455: LD_INT 2
71457: NEG
71458: PUSH
71459: LD_INT 2
71461: NEG
71462: PUSH
71463: EMPTY
71464: LIST
71465: LIST
71466: PUSH
71467: LD_INT 2
71469: NEG
71470: PUSH
71471: LD_INT 3
71473: NEG
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: PUSH
71479: LD_INT 2
71481: PUSH
71482: LD_INT 1
71484: NEG
71485: PUSH
71486: EMPTY
71487: LIST
71488: LIST
71489: PUSH
71490: LD_INT 3
71492: PUSH
71493: LD_INT 0
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: PUSH
71500: LD_INT 3
71502: PUSH
71503: LD_INT 1
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PUSH
71510: LD_INT 3
71512: PUSH
71513: LD_INT 2
71515: PUSH
71516: EMPTY
71517: LIST
71518: LIST
71519: PUSH
71520: LD_INT 3
71522: PUSH
71523: LD_INT 3
71525: PUSH
71526: EMPTY
71527: LIST
71528: LIST
71529: PUSH
71530: LD_INT 2
71532: PUSH
71533: LD_INT 3
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: LD_INT 2
71542: NEG
71543: PUSH
71544: LD_INT 1
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PUSH
71551: LD_INT 3
71553: NEG
71554: PUSH
71555: LD_INT 0
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: PUSH
71562: LD_INT 3
71564: NEG
71565: PUSH
71566: LD_INT 1
71568: NEG
71569: PUSH
71570: EMPTY
71571: LIST
71572: LIST
71573: PUSH
71574: LD_INT 3
71576: NEG
71577: PUSH
71578: LD_INT 2
71580: NEG
71581: PUSH
71582: EMPTY
71583: LIST
71584: LIST
71585: PUSH
71586: LD_INT 3
71588: NEG
71589: PUSH
71590: LD_INT 3
71592: NEG
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: PUSH
71598: EMPTY
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: LIST
71627: LIST
71628: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71629: LD_ADDR_VAR 0 42
71633: PUSH
71634: LD_INT 0
71636: PUSH
71637: LD_INT 0
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PUSH
71644: LD_INT 0
71646: PUSH
71647: LD_INT 1
71649: NEG
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: PUSH
71655: LD_INT 1
71657: PUSH
71658: LD_INT 0
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: PUSH
71665: LD_INT 1
71667: PUSH
71668: LD_INT 1
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: PUSH
71675: LD_INT 0
71677: PUSH
71678: LD_INT 1
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: LD_INT 1
71687: NEG
71688: PUSH
71689: LD_INT 0
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: LD_INT 1
71698: NEG
71699: PUSH
71700: LD_INT 1
71702: NEG
71703: PUSH
71704: EMPTY
71705: LIST
71706: LIST
71707: PUSH
71708: LD_INT 1
71710: NEG
71711: PUSH
71712: LD_INT 2
71714: NEG
71715: PUSH
71716: EMPTY
71717: LIST
71718: LIST
71719: PUSH
71720: LD_INT 0
71722: PUSH
71723: LD_INT 2
71725: NEG
71726: PUSH
71727: EMPTY
71728: LIST
71729: LIST
71730: PUSH
71731: LD_INT 1
71733: PUSH
71734: LD_INT 1
71736: NEG
71737: PUSH
71738: EMPTY
71739: LIST
71740: LIST
71741: PUSH
71742: LD_INT 2
71744: PUSH
71745: LD_INT 1
71747: PUSH
71748: EMPTY
71749: LIST
71750: LIST
71751: PUSH
71752: LD_INT 2
71754: PUSH
71755: LD_INT 2
71757: PUSH
71758: EMPTY
71759: LIST
71760: LIST
71761: PUSH
71762: LD_INT 1
71764: PUSH
71765: LD_INT 2
71767: PUSH
71768: EMPTY
71769: LIST
71770: LIST
71771: PUSH
71772: LD_INT 0
71774: PUSH
71775: LD_INT 2
71777: PUSH
71778: EMPTY
71779: LIST
71780: LIST
71781: PUSH
71782: LD_INT 1
71784: NEG
71785: PUSH
71786: LD_INT 1
71788: PUSH
71789: EMPTY
71790: LIST
71791: LIST
71792: PUSH
71793: LD_INT 2
71795: NEG
71796: PUSH
71797: LD_INT 1
71799: NEG
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: PUSH
71805: LD_INT 2
71807: NEG
71808: PUSH
71809: LD_INT 2
71811: NEG
71812: PUSH
71813: EMPTY
71814: LIST
71815: LIST
71816: PUSH
71817: LD_INT 2
71819: NEG
71820: PUSH
71821: LD_INT 3
71823: NEG
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: LD_INT 1
71831: NEG
71832: PUSH
71833: LD_INT 3
71835: NEG
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: PUSH
71841: LD_INT 0
71843: PUSH
71844: LD_INT 3
71846: NEG
71847: PUSH
71848: EMPTY
71849: LIST
71850: LIST
71851: PUSH
71852: LD_INT 1
71854: PUSH
71855: LD_INT 2
71857: NEG
71858: PUSH
71859: EMPTY
71860: LIST
71861: LIST
71862: PUSH
71863: LD_INT 3
71865: PUSH
71866: LD_INT 2
71868: PUSH
71869: EMPTY
71870: LIST
71871: LIST
71872: PUSH
71873: LD_INT 3
71875: PUSH
71876: LD_INT 3
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: PUSH
71883: LD_INT 2
71885: PUSH
71886: LD_INT 3
71888: PUSH
71889: EMPTY
71890: LIST
71891: LIST
71892: PUSH
71893: LD_INT 1
71895: PUSH
71896: LD_INT 3
71898: PUSH
71899: EMPTY
71900: LIST
71901: LIST
71902: PUSH
71903: LD_INT 0
71905: PUSH
71906: LD_INT 3
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: PUSH
71913: LD_INT 1
71915: NEG
71916: PUSH
71917: LD_INT 2
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: PUSH
71924: LD_INT 3
71926: NEG
71927: PUSH
71928: LD_INT 2
71930: NEG
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: PUSH
71936: LD_INT 3
71938: NEG
71939: PUSH
71940: LD_INT 3
71942: NEG
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: PUSH
71948: EMPTY
71949: LIST
71950: LIST
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: LIST
71967: LIST
71968: LIST
71969: LIST
71970: LIST
71971: LIST
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: LIST
71977: LIST
71978: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71979: LD_ADDR_VAR 0 43
71983: PUSH
71984: LD_INT 0
71986: PUSH
71987: LD_INT 0
71989: PUSH
71990: EMPTY
71991: LIST
71992: LIST
71993: PUSH
71994: LD_INT 0
71996: PUSH
71997: LD_INT 1
71999: NEG
72000: PUSH
72001: EMPTY
72002: LIST
72003: LIST
72004: PUSH
72005: LD_INT 1
72007: PUSH
72008: LD_INT 0
72010: PUSH
72011: EMPTY
72012: LIST
72013: LIST
72014: PUSH
72015: LD_INT 1
72017: PUSH
72018: LD_INT 1
72020: PUSH
72021: EMPTY
72022: LIST
72023: LIST
72024: PUSH
72025: LD_INT 0
72027: PUSH
72028: LD_INT 1
72030: PUSH
72031: EMPTY
72032: LIST
72033: LIST
72034: PUSH
72035: LD_INT 1
72037: NEG
72038: PUSH
72039: LD_INT 0
72041: PUSH
72042: EMPTY
72043: LIST
72044: LIST
72045: PUSH
72046: LD_INT 1
72048: NEG
72049: PUSH
72050: LD_INT 1
72052: NEG
72053: PUSH
72054: EMPTY
72055: LIST
72056: LIST
72057: PUSH
72058: LD_INT 1
72060: NEG
72061: PUSH
72062: LD_INT 2
72064: NEG
72065: PUSH
72066: EMPTY
72067: LIST
72068: LIST
72069: PUSH
72070: LD_INT 0
72072: PUSH
72073: LD_INT 2
72075: NEG
72076: PUSH
72077: EMPTY
72078: LIST
72079: LIST
72080: PUSH
72081: LD_INT 1
72083: PUSH
72084: LD_INT 1
72086: NEG
72087: PUSH
72088: EMPTY
72089: LIST
72090: LIST
72091: PUSH
72092: LD_INT 2
72094: PUSH
72095: LD_INT 0
72097: PUSH
72098: EMPTY
72099: LIST
72100: LIST
72101: PUSH
72102: LD_INT 2
72104: PUSH
72105: LD_INT 1
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: PUSH
72112: LD_INT 1
72114: PUSH
72115: LD_INT 2
72117: PUSH
72118: EMPTY
72119: LIST
72120: LIST
72121: PUSH
72122: LD_INT 0
72124: PUSH
72125: LD_INT 2
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: PUSH
72132: LD_INT 1
72134: NEG
72135: PUSH
72136: LD_INT 1
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: PUSH
72143: LD_INT 2
72145: NEG
72146: PUSH
72147: LD_INT 0
72149: PUSH
72150: EMPTY
72151: LIST
72152: LIST
72153: PUSH
72154: LD_INT 2
72156: NEG
72157: PUSH
72158: LD_INT 1
72160: NEG
72161: PUSH
72162: EMPTY
72163: LIST
72164: LIST
72165: PUSH
72166: LD_INT 1
72168: NEG
72169: PUSH
72170: LD_INT 3
72172: NEG
72173: PUSH
72174: EMPTY
72175: LIST
72176: LIST
72177: PUSH
72178: LD_INT 0
72180: PUSH
72181: LD_INT 3
72183: NEG
72184: PUSH
72185: EMPTY
72186: LIST
72187: LIST
72188: PUSH
72189: LD_INT 1
72191: PUSH
72192: LD_INT 2
72194: NEG
72195: PUSH
72196: EMPTY
72197: LIST
72198: LIST
72199: PUSH
72200: LD_INT 2
72202: PUSH
72203: LD_INT 1
72205: NEG
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: PUSH
72211: LD_INT 3
72213: PUSH
72214: LD_INT 0
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: PUSH
72221: LD_INT 3
72223: PUSH
72224: LD_INT 1
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: PUSH
72231: LD_INT 1
72233: PUSH
72234: LD_INT 3
72236: PUSH
72237: EMPTY
72238: LIST
72239: LIST
72240: PUSH
72241: LD_INT 0
72243: PUSH
72244: LD_INT 3
72246: PUSH
72247: EMPTY
72248: LIST
72249: LIST
72250: PUSH
72251: LD_INT 1
72253: NEG
72254: PUSH
72255: LD_INT 2
72257: PUSH
72258: EMPTY
72259: LIST
72260: LIST
72261: PUSH
72262: LD_INT 2
72264: NEG
72265: PUSH
72266: LD_INT 1
72268: PUSH
72269: EMPTY
72270: LIST
72271: LIST
72272: PUSH
72273: LD_INT 3
72275: NEG
72276: PUSH
72277: LD_INT 0
72279: PUSH
72280: EMPTY
72281: LIST
72282: LIST
72283: PUSH
72284: LD_INT 3
72286: NEG
72287: PUSH
72288: LD_INT 1
72290: NEG
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: PUSH
72296: EMPTY
72297: LIST
72298: LIST
72299: LIST
72300: LIST
72301: LIST
72302: LIST
72303: LIST
72304: LIST
72305: LIST
72306: LIST
72307: LIST
72308: LIST
72309: LIST
72310: LIST
72311: LIST
72312: LIST
72313: LIST
72314: LIST
72315: LIST
72316: LIST
72317: LIST
72318: LIST
72319: LIST
72320: LIST
72321: LIST
72322: LIST
72323: LIST
72324: LIST
72325: LIST
72326: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72327: LD_ADDR_VAR 0 44
72331: PUSH
72332: LD_INT 0
72334: PUSH
72335: LD_INT 0
72337: PUSH
72338: EMPTY
72339: LIST
72340: LIST
72341: PUSH
72342: LD_INT 0
72344: PUSH
72345: LD_INT 1
72347: NEG
72348: PUSH
72349: EMPTY
72350: LIST
72351: LIST
72352: PUSH
72353: LD_INT 1
72355: PUSH
72356: LD_INT 0
72358: PUSH
72359: EMPTY
72360: LIST
72361: LIST
72362: PUSH
72363: LD_INT 1
72365: PUSH
72366: LD_INT 1
72368: PUSH
72369: EMPTY
72370: LIST
72371: LIST
72372: PUSH
72373: LD_INT 0
72375: PUSH
72376: LD_INT 1
72378: PUSH
72379: EMPTY
72380: LIST
72381: LIST
72382: PUSH
72383: LD_INT 1
72385: NEG
72386: PUSH
72387: LD_INT 0
72389: PUSH
72390: EMPTY
72391: LIST
72392: LIST
72393: PUSH
72394: LD_INT 1
72396: NEG
72397: PUSH
72398: LD_INT 1
72400: NEG
72401: PUSH
72402: EMPTY
72403: LIST
72404: LIST
72405: PUSH
72406: LD_INT 1
72408: NEG
72409: PUSH
72410: LD_INT 2
72412: NEG
72413: PUSH
72414: EMPTY
72415: LIST
72416: LIST
72417: PUSH
72418: LD_INT 1
72420: PUSH
72421: LD_INT 1
72423: NEG
72424: PUSH
72425: EMPTY
72426: LIST
72427: LIST
72428: PUSH
72429: LD_INT 2
72431: PUSH
72432: LD_INT 0
72434: PUSH
72435: EMPTY
72436: LIST
72437: LIST
72438: PUSH
72439: LD_INT 2
72441: PUSH
72442: LD_INT 1
72444: PUSH
72445: EMPTY
72446: LIST
72447: LIST
72448: PUSH
72449: LD_INT 2
72451: PUSH
72452: LD_INT 2
72454: PUSH
72455: EMPTY
72456: LIST
72457: LIST
72458: PUSH
72459: LD_INT 1
72461: PUSH
72462: LD_INT 2
72464: PUSH
72465: EMPTY
72466: LIST
72467: LIST
72468: PUSH
72469: LD_INT 1
72471: NEG
72472: PUSH
72473: LD_INT 1
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: PUSH
72480: LD_INT 2
72482: NEG
72483: PUSH
72484: LD_INT 0
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: PUSH
72491: LD_INT 2
72493: NEG
72494: PUSH
72495: LD_INT 1
72497: NEG
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: PUSH
72503: LD_INT 2
72505: NEG
72506: PUSH
72507: LD_INT 2
72509: NEG
72510: PUSH
72511: EMPTY
72512: LIST
72513: LIST
72514: PUSH
72515: LD_INT 2
72517: NEG
72518: PUSH
72519: LD_INT 3
72521: NEG
72522: PUSH
72523: EMPTY
72524: LIST
72525: LIST
72526: PUSH
72527: LD_INT 2
72529: PUSH
72530: LD_INT 1
72532: NEG
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: LD_INT 3
72540: PUSH
72541: LD_INT 0
72543: PUSH
72544: EMPTY
72545: LIST
72546: LIST
72547: PUSH
72548: LD_INT 3
72550: PUSH
72551: LD_INT 1
72553: PUSH
72554: EMPTY
72555: LIST
72556: LIST
72557: PUSH
72558: LD_INT 3
72560: PUSH
72561: LD_INT 2
72563: PUSH
72564: EMPTY
72565: LIST
72566: LIST
72567: PUSH
72568: LD_INT 3
72570: PUSH
72571: LD_INT 3
72573: PUSH
72574: EMPTY
72575: LIST
72576: LIST
72577: PUSH
72578: LD_INT 2
72580: PUSH
72581: LD_INT 3
72583: PUSH
72584: EMPTY
72585: LIST
72586: LIST
72587: PUSH
72588: LD_INT 2
72590: NEG
72591: PUSH
72592: LD_INT 1
72594: PUSH
72595: EMPTY
72596: LIST
72597: LIST
72598: PUSH
72599: LD_INT 3
72601: NEG
72602: PUSH
72603: LD_INT 0
72605: PUSH
72606: EMPTY
72607: LIST
72608: LIST
72609: PUSH
72610: LD_INT 3
72612: NEG
72613: PUSH
72614: LD_INT 1
72616: NEG
72617: PUSH
72618: EMPTY
72619: LIST
72620: LIST
72621: PUSH
72622: LD_INT 3
72624: NEG
72625: PUSH
72626: LD_INT 2
72628: NEG
72629: PUSH
72630: EMPTY
72631: LIST
72632: LIST
72633: PUSH
72634: LD_INT 3
72636: NEG
72637: PUSH
72638: LD_INT 3
72640: NEG
72641: PUSH
72642: EMPTY
72643: LIST
72644: LIST
72645: PUSH
72646: EMPTY
72647: LIST
72648: LIST
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72677: LD_ADDR_VAR 0 45
72681: PUSH
72682: LD_INT 0
72684: PUSH
72685: LD_INT 0
72687: PUSH
72688: EMPTY
72689: LIST
72690: LIST
72691: PUSH
72692: LD_INT 0
72694: PUSH
72695: LD_INT 1
72697: NEG
72698: PUSH
72699: EMPTY
72700: LIST
72701: LIST
72702: PUSH
72703: LD_INT 1
72705: PUSH
72706: LD_INT 0
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: PUSH
72713: LD_INT 1
72715: PUSH
72716: LD_INT 1
72718: PUSH
72719: EMPTY
72720: LIST
72721: LIST
72722: PUSH
72723: LD_INT 0
72725: PUSH
72726: LD_INT 1
72728: PUSH
72729: EMPTY
72730: LIST
72731: LIST
72732: PUSH
72733: LD_INT 1
72735: NEG
72736: PUSH
72737: LD_INT 0
72739: PUSH
72740: EMPTY
72741: LIST
72742: LIST
72743: PUSH
72744: LD_INT 1
72746: NEG
72747: PUSH
72748: LD_INT 1
72750: NEG
72751: PUSH
72752: EMPTY
72753: LIST
72754: LIST
72755: PUSH
72756: LD_INT 1
72758: NEG
72759: PUSH
72760: LD_INT 2
72762: NEG
72763: PUSH
72764: EMPTY
72765: LIST
72766: LIST
72767: PUSH
72768: LD_INT 0
72770: PUSH
72771: LD_INT 2
72773: NEG
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: PUSH
72779: LD_INT 1
72781: PUSH
72782: LD_INT 1
72784: NEG
72785: PUSH
72786: EMPTY
72787: LIST
72788: LIST
72789: PUSH
72790: LD_INT 2
72792: PUSH
72793: LD_INT 1
72795: PUSH
72796: EMPTY
72797: LIST
72798: LIST
72799: PUSH
72800: LD_INT 2
72802: PUSH
72803: LD_INT 2
72805: PUSH
72806: EMPTY
72807: LIST
72808: LIST
72809: PUSH
72810: LD_INT 1
72812: PUSH
72813: LD_INT 2
72815: PUSH
72816: EMPTY
72817: LIST
72818: LIST
72819: PUSH
72820: LD_INT 0
72822: PUSH
72823: LD_INT 2
72825: PUSH
72826: EMPTY
72827: LIST
72828: LIST
72829: PUSH
72830: LD_INT 1
72832: NEG
72833: PUSH
72834: LD_INT 1
72836: PUSH
72837: EMPTY
72838: LIST
72839: LIST
72840: PUSH
72841: LD_INT 2
72843: NEG
72844: PUSH
72845: LD_INT 1
72847: NEG
72848: PUSH
72849: EMPTY
72850: LIST
72851: LIST
72852: PUSH
72853: LD_INT 2
72855: NEG
72856: PUSH
72857: LD_INT 2
72859: NEG
72860: PUSH
72861: EMPTY
72862: LIST
72863: LIST
72864: PUSH
72865: LD_INT 2
72867: NEG
72868: PUSH
72869: LD_INT 3
72871: NEG
72872: PUSH
72873: EMPTY
72874: LIST
72875: LIST
72876: PUSH
72877: LD_INT 1
72879: NEG
72880: PUSH
72881: LD_INT 3
72883: NEG
72884: PUSH
72885: EMPTY
72886: LIST
72887: LIST
72888: PUSH
72889: LD_INT 0
72891: PUSH
72892: LD_INT 3
72894: NEG
72895: PUSH
72896: EMPTY
72897: LIST
72898: LIST
72899: PUSH
72900: LD_INT 1
72902: PUSH
72903: LD_INT 2
72905: NEG
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: PUSH
72911: LD_INT 3
72913: PUSH
72914: LD_INT 2
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: PUSH
72921: LD_INT 3
72923: PUSH
72924: LD_INT 3
72926: PUSH
72927: EMPTY
72928: LIST
72929: LIST
72930: PUSH
72931: LD_INT 2
72933: PUSH
72934: LD_INT 3
72936: PUSH
72937: EMPTY
72938: LIST
72939: LIST
72940: PUSH
72941: LD_INT 1
72943: PUSH
72944: LD_INT 3
72946: PUSH
72947: EMPTY
72948: LIST
72949: LIST
72950: PUSH
72951: LD_INT 0
72953: PUSH
72954: LD_INT 3
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: LD_INT 1
72963: NEG
72964: PUSH
72965: LD_INT 2
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: PUSH
72972: LD_INT 3
72974: NEG
72975: PUSH
72976: LD_INT 2
72978: NEG
72979: PUSH
72980: EMPTY
72981: LIST
72982: LIST
72983: PUSH
72984: LD_INT 3
72986: NEG
72987: PUSH
72988: LD_INT 3
72990: NEG
72991: PUSH
72992: EMPTY
72993: LIST
72994: LIST
72995: PUSH
72996: EMPTY
72997: LIST
72998: LIST
72999: LIST
73000: LIST
73001: LIST
73002: LIST
73003: LIST
73004: LIST
73005: LIST
73006: LIST
73007: LIST
73008: LIST
73009: LIST
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: LIST
73021: LIST
73022: LIST
73023: LIST
73024: LIST
73025: LIST
73026: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73027: LD_ADDR_VAR 0 46
73031: PUSH
73032: LD_INT 0
73034: PUSH
73035: LD_INT 0
73037: PUSH
73038: EMPTY
73039: LIST
73040: LIST
73041: PUSH
73042: LD_INT 0
73044: PUSH
73045: LD_INT 1
73047: NEG
73048: PUSH
73049: EMPTY
73050: LIST
73051: LIST
73052: PUSH
73053: LD_INT 1
73055: PUSH
73056: LD_INT 0
73058: PUSH
73059: EMPTY
73060: LIST
73061: LIST
73062: PUSH
73063: LD_INT 1
73065: PUSH
73066: LD_INT 1
73068: PUSH
73069: EMPTY
73070: LIST
73071: LIST
73072: PUSH
73073: LD_INT 0
73075: PUSH
73076: LD_INT 1
73078: PUSH
73079: EMPTY
73080: LIST
73081: LIST
73082: PUSH
73083: LD_INT 1
73085: NEG
73086: PUSH
73087: LD_INT 0
73089: PUSH
73090: EMPTY
73091: LIST
73092: LIST
73093: PUSH
73094: LD_INT 1
73096: NEG
73097: PUSH
73098: LD_INT 1
73100: NEG
73101: PUSH
73102: EMPTY
73103: LIST
73104: LIST
73105: PUSH
73106: LD_INT 1
73108: NEG
73109: PUSH
73110: LD_INT 2
73112: NEG
73113: PUSH
73114: EMPTY
73115: LIST
73116: LIST
73117: PUSH
73118: LD_INT 0
73120: PUSH
73121: LD_INT 2
73123: NEG
73124: PUSH
73125: EMPTY
73126: LIST
73127: LIST
73128: PUSH
73129: LD_INT 1
73131: PUSH
73132: LD_INT 1
73134: NEG
73135: PUSH
73136: EMPTY
73137: LIST
73138: LIST
73139: PUSH
73140: LD_INT 2
73142: PUSH
73143: LD_INT 0
73145: PUSH
73146: EMPTY
73147: LIST
73148: LIST
73149: PUSH
73150: LD_INT 2
73152: PUSH
73153: LD_INT 1
73155: PUSH
73156: EMPTY
73157: LIST
73158: LIST
73159: PUSH
73160: LD_INT 1
73162: PUSH
73163: LD_INT 2
73165: PUSH
73166: EMPTY
73167: LIST
73168: LIST
73169: PUSH
73170: LD_INT 0
73172: PUSH
73173: LD_INT 2
73175: PUSH
73176: EMPTY
73177: LIST
73178: LIST
73179: PUSH
73180: LD_INT 1
73182: NEG
73183: PUSH
73184: LD_INT 1
73186: PUSH
73187: EMPTY
73188: LIST
73189: LIST
73190: PUSH
73191: LD_INT 2
73193: NEG
73194: PUSH
73195: LD_INT 0
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: PUSH
73202: LD_INT 2
73204: NEG
73205: PUSH
73206: LD_INT 1
73208: NEG
73209: PUSH
73210: EMPTY
73211: LIST
73212: LIST
73213: PUSH
73214: LD_INT 1
73216: NEG
73217: PUSH
73218: LD_INT 3
73220: NEG
73221: PUSH
73222: EMPTY
73223: LIST
73224: LIST
73225: PUSH
73226: LD_INT 0
73228: PUSH
73229: LD_INT 3
73231: NEG
73232: PUSH
73233: EMPTY
73234: LIST
73235: LIST
73236: PUSH
73237: LD_INT 1
73239: PUSH
73240: LD_INT 2
73242: NEG
73243: PUSH
73244: EMPTY
73245: LIST
73246: LIST
73247: PUSH
73248: LD_INT 2
73250: PUSH
73251: LD_INT 1
73253: NEG
73254: PUSH
73255: EMPTY
73256: LIST
73257: LIST
73258: PUSH
73259: LD_INT 3
73261: PUSH
73262: LD_INT 0
73264: PUSH
73265: EMPTY
73266: LIST
73267: LIST
73268: PUSH
73269: LD_INT 3
73271: PUSH
73272: LD_INT 1
73274: PUSH
73275: EMPTY
73276: LIST
73277: LIST
73278: PUSH
73279: LD_INT 1
73281: PUSH
73282: LD_INT 3
73284: PUSH
73285: EMPTY
73286: LIST
73287: LIST
73288: PUSH
73289: LD_INT 0
73291: PUSH
73292: LD_INT 3
73294: PUSH
73295: EMPTY
73296: LIST
73297: LIST
73298: PUSH
73299: LD_INT 1
73301: NEG
73302: PUSH
73303: LD_INT 2
73305: PUSH
73306: EMPTY
73307: LIST
73308: LIST
73309: PUSH
73310: LD_INT 2
73312: NEG
73313: PUSH
73314: LD_INT 1
73316: PUSH
73317: EMPTY
73318: LIST
73319: LIST
73320: PUSH
73321: LD_INT 3
73323: NEG
73324: PUSH
73325: LD_INT 0
73327: PUSH
73328: EMPTY
73329: LIST
73330: LIST
73331: PUSH
73332: LD_INT 3
73334: NEG
73335: PUSH
73336: LD_INT 1
73338: NEG
73339: PUSH
73340: EMPTY
73341: LIST
73342: LIST
73343: PUSH
73344: EMPTY
73345: LIST
73346: LIST
73347: LIST
73348: LIST
73349: LIST
73350: LIST
73351: LIST
73352: LIST
73353: LIST
73354: LIST
73355: LIST
73356: LIST
73357: LIST
73358: LIST
73359: LIST
73360: LIST
73361: LIST
73362: LIST
73363: LIST
73364: LIST
73365: LIST
73366: LIST
73367: LIST
73368: LIST
73369: LIST
73370: LIST
73371: LIST
73372: LIST
73373: LIST
73374: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73375: LD_ADDR_VAR 0 47
73379: PUSH
73380: LD_INT 0
73382: PUSH
73383: LD_INT 0
73385: PUSH
73386: EMPTY
73387: LIST
73388: LIST
73389: PUSH
73390: LD_INT 0
73392: PUSH
73393: LD_INT 1
73395: NEG
73396: PUSH
73397: EMPTY
73398: LIST
73399: LIST
73400: PUSH
73401: LD_INT 1
73403: PUSH
73404: LD_INT 0
73406: PUSH
73407: EMPTY
73408: LIST
73409: LIST
73410: PUSH
73411: LD_INT 1
73413: PUSH
73414: LD_INT 1
73416: PUSH
73417: EMPTY
73418: LIST
73419: LIST
73420: PUSH
73421: LD_INT 0
73423: PUSH
73424: LD_INT 1
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: PUSH
73431: LD_INT 1
73433: NEG
73434: PUSH
73435: LD_INT 0
73437: PUSH
73438: EMPTY
73439: LIST
73440: LIST
73441: PUSH
73442: LD_INT 1
73444: NEG
73445: PUSH
73446: LD_INT 1
73448: NEG
73449: PUSH
73450: EMPTY
73451: LIST
73452: LIST
73453: PUSH
73454: LD_INT 1
73456: NEG
73457: PUSH
73458: LD_INT 2
73460: NEG
73461: PUSH
73462: EMPTY
73463: LIST
73464: LIST
73465: PUSH
73466: LD_INT 0
73468: PUSH
73469: LD_INT 2
73471: NEG
73472: PUSH
73473: EMPTY
73474: LIST
73475: LIST
73476: PUSH
73477: LD_INT 1
73479: PUSH
73480: LD_INT 1
73482: NEG
73483: PUSH
73484: EMPTY
73485: LIST
73486: LIST
73487: PUSH
73488: LD_INT 2
73490: NEG
73491: PUSH
73492: LD_INT 1
73494: NEG
73495: PUSH
73496: EMPTY
73497: LIST
73498: LIST
73499: PUSH
73500: LD_INT 2
73502: NEG
73503: PUSH
73504: LD_INT 2
73506: NEG
73507: PUSH
73508: EMPTY
73509: LIST
73510: LIST
73511: PUSH
73512: EMPTY
73513: LIST
73514: LIST
73515: LIST
73516: LIST
73517: LIST
73518: LIST
73519: LIST
73520: LIST
73521: LIST
73522: LIST
73523: LIST
73524: LIST
73525: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
73526: LD_ADDR_VAR 0 48
73530: PUSH
73531: LD_INT 0
73533: PUSH
73534: LD_INT 0
73536: PUSH
73537: EMPTY
73538: LIST
73539: LIST
73540: PUSH
73541: LD_INT 0
73543: PUSH
73544: LD_INT 1
73546: NEG
73547: PUSH
73548: EMPTY
73549: LIST
73550: LIST
73551: PUSH
73552: LD_INT 1
73554: PUSH
73555: LD_INT 0
73557: PUSH
73558: EMPTY
73559: LIST
73560: LIST
73561: PUSH
73562: LD_INT 1
73564: PUSH
73565: LD_INT 1
73567: PUSH
73568: EMPTY
73569: LIST
73570: LIST
73571: PUSH
73572: LD_INT 0
73574: PUSH
73575: LD_INT 1
73577: PUSH
73578: EMPTY
73579: LIST
73580: LIST
73581: PUSH
73582: LD_INT 1
73584: NEG
73585: PUSH
73586: LD_INT 0
73588: PUSH
73589: EMPTY
73590: LIST
73591: LIST
73592: PUSH
73593: LD_INT 1
73595: NEG
73596: PUSH
73597: LD_INT 1
73599: NEG
73600: PUSH
73601: EMPTY
73602: LIST
73603: LIST
73604: PUSH
73605: LD_INT 1
73607: NEG
73608: PUSH
73609: LD_INT 2
73611: NEG
73612: PUSH
73613: EMPTY
73614: LIST
73615: LIST
73616: PUSH
73617: LD_INT 0
73619: PUSH
73620: LD_INT 2
73622: NEG
73623: PUSH
73624: EMPTY
73625: LIST
73626: LIST
73627: PUSH
73628: LD_INT 1
73630: PUSH
73631: LD_INT 1
73633: NEG
73634: PUSH
73635: EMPTY
73636: LIST
73637: LIST
73638: PUSH
73639: LD_INT 2
73641: PUSH
73642: LD_INT 0
73644: PUSH
73645: EMPTY
73646: LIST
73647: LIST
73648: PUSH
73649: LD_INT 2
73651: PUSH
73652: LD_INT 1
73654: PUSH
73655: EMPTY
73656: LIST
73657: LIST
73658: PUSH
73659: EMPTY
73660: LIST
73661: LIST
73662: LIST
73663: LIST
73664: LIST
73665: LIST
73666: LIST
73667: LIST
73668: LIST
73669: LIST
73670: LIST
73671: LIST
73672: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
73673: LD_ADDR_VAR 0 49
73677: PUSH
73678: LD_INT 0
73680: PUSH
73681: LD_INT 0
73683: PUSH
73684: EMPTY
73685: LIST
73686: LIST
73687: PUSH
73688: LD_INT 0
73690: PUSH
73691: LD_INT 1
73693: NEG
73694: PUSH
73695: EMPTY
73696: LIST
73697: LIST
73698: PUSH
73699: LD_INT 1
73701: PUSH
73702: LD_INT 0
73704: PUSH
73705: EMPTY
73706: LIST
73707: LIST
73708: PUSH
73709: LD_INT 1
73711: PUSH
73712: LD_INT 1
73714: PUSH
73715: EMPTY
73716: LIST
73717: LIST
73718: PUSH
73719: LD_INT 0
73721: PUSH
73722: LD_INT 1
73724: PUSH
73725: EMPTY
73726: LIST
73727: LIST
73728: PUSH
73729: LD_INT 1
73731: NEG
73732: PUSH
73733: LD_INT 0
73735: PUSH
73736: EMPTY
73737: LIST
73738: LIST
73739: PUSH
73740: LD_INT 1
73742: NEG
73743: PUSH
73744: LD_INT 1
73746: NEG
73747: PUSH
73748: EMPTY
73749: LIST
73750: LIST
73751: PUSH
73752: LD_INT 1
73754: PUSH
73755: LD_INT 1
73757: NEG
73758: PUSH
73759: EMPTY
73760: LIST
73761: LIST
73762: PUSH
73763: LD_INT 2
73765: PUSH
73766: LD_INT 0
73768: PUSH
73769: EMPTY
73770: LIST
73771: LIST
73772: PUSH
73773: LD_INT 2
73775: PUSH
73776: LD_INT 1
73778: PUSH
73779: EMPTY
73780: LIST
73781: LIST
73782: PUSH
73783: LD_INT 2
73785: PUSH
73786: LD_INT 2
73788: PUSH
73789: EMPTY
73790: LIST
73791: LIST
73792: PUSH
73793: LD_INT 1
73795: PUSH
73796: LD_INT 2
73798: PUSH
73799: EMPTY
73800: LIST
73801: LIST
73802: PUSH
73803: EMPTY
73804: LIST
73805: LIST
73806: LIST
73807: LIST
73808: LIST
73809: LIST
73810: LIST
73811: LIST
73812: LIST
73813: LIST
73814: LIST
73815: LIST
73816: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
73817: LD_ADDR_VAR 0 50
73821: PUSH
73822: LD_INT 0
73824: PUSH
73825: LD_INT 0
73827: PUSH
73828: EMPTY
73829: LIST
73830: LIST
73831: PUSH
73832: LD_INT 0
73834: PUSH
73835: LD_INT 1
73837: NEG
73838: PUSH
73839: EMPTY
73840: LIST
73841: LIST
73842: PUSH
73843: LD_INT 1
73845: PUSH
73846: LD_INT 0
73848: PUSH
73849: EMPTY
73850: LIST
73851: LIST
73852: PUSH
73853: LD_INT 1
73855: PUSH
73856: LD_INT 1
73858: PUSH
73859: EMPTY
73860: LIST
73861: LIST
73862: PUSH
73863: LD_INT 0
73865: PUSH
73866: LD_INT 1
73868: PUSH
73869: EMPTY
73870: LIST
73871: LIST
73872: PUSH
73873: LD_INT 1
73875: NEG
73876: PUSH
73877: LD_INT 0
73879: PUSH
73880: EMPTY
73881: LIST
73882: LIST
73883: PUSH
73884: LD_INT 1
73886: NEG
73887: PUSH
73888: LD_INT 1
73890: NEG
73891: PUSH
73892: EMPTY
73893: LIST
73894: LIST
73895: PUSH
73896: LD_INT 2
73898: PUSH
73899: LD_INT 1
73901: PUSH
73902: EMPTY
73903: LIST
73904: LIST
73905: PUSH
73906: LD_INT 2
73908: PUSH
73909: LD_INT 2
73911: PUSH
73912: EMPTY
73913: LIST
73914: LIST
73915: PUSH
73916: LD_INT 1
73918: PUSH
73919: LD_INT 2
73921: PUSH
73922: EMPTY
73923: LIST
73924: LIST
73925: PUSH
73926: LD_INT 0
73928: PUSH
73929: LD_INT 2
73931: PUSH
73932: EMPTY
73933: LIST
73934: LIST
73935: PUSH
73936: LD_INT 1
73938: NEG
73939: PUSH
73940: LD_INT 1
73942: PUSH
73943: EMPTY
73944: LIST
73945: LIST
73946: PUSH
73947: EMPTY
73948: LIST
73949: LIST
73950: LIST
73951: LIST
73952: LIST
73953: LIST
73954: LIST
73955: LIST
73956: LIST
73957: LIST
73958: LIST
73959: LIST
73960: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
73961: LD_ADDR_VAR 0 51
73965: PUSH
73966: LD_INT 0
73968: PUSH
73969: LD_INT 0
73971: PUSH
73972: EMPTY
73973: LIST
73974: LIST
73975: PUSH
73976: LD_INT 0
73978: PUSH
73979: LD_INT 1
73981: NEG
73982: PUSH
73983: EMPTY
73984: LIST
73985: LIST
73986: PUSH
73987: LD_INT 1
73989: PUSH
73990: LD_INT 0
73992: PUSH
73993: EMPTY
73994: LIST
73995: LIST
73996: PUSH
73997: LD_INT 1
73999: PUSH
74000: LD_INT 1
74002: PUSH
74003: EMPTY
74004: LIST
74005: LIST
74006: PUSH
74007: LD_INT 0
74009: PUSH
74010: LD_INT 1
74012: PUSH
74013: EMPTY
74014: LIST
74015: LIST
74016: PUSH
74017: LD_INT 1
74019: NEG
74020: PUSH
74021: LD_INT 0
74023: PUSH
74024: EMPTY
74025: LIST
74026: LIST
74027: PUSH
74028: LD_INT 1
74030: NEG
74031: PUSH
74032: LD_INT 1
74034: NEG
74035: PUSH
74036: EMPTY
74037: LIST
74038: LIST
74039: PUSH
74040: LD_INT 1
74042: PUSH
74043: LD_INT 2
74045: PUSH
74046: EMPTY
74047: LIST
74048: LIST
74049: PUSH
74050: LD_INT 0
74052: PUSH
74053: LD_INT 2
74055: PUSH
74056: EMPTY
74057: LIST
74058: LIST
74059: PUSH
74060: LD_INT 1
74062: NEG
74063: PUSH
74064: LD_INT 1
74066: PUSH
74067: EMPTY
74068: LIST
74069: LIST
74070: PUSH
74071: LD_INT 2
74073: NEG
74074: PUSH
74075: LD_INT 0
74077: PUSH
74078: EMPTY
74079: LIST
74080: LIST
74081: PUSH
74082: LD_INT 2
74084: NEG
74085: PUSH
74086: LD_INT 1
74088: NEG
74089: PUSH
74090: EMPTY
74091: LIST
74092: LIST
74093: PUSH
74094: EMPTY
74095: LIST
74096: LIST
74097: LIST
74098: LIST
74099: LIST
74100: LIST
74101: LIST
74102: LIST
74103: LIST
74104: LIST
74105: LIST
74106: LIST
74107: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74108: LD_ADDR_VAR 0 52
74112: PUSH
74113: LD_INT 0
74115: PUSH
74116: LD_INT 0
74118: PUSH
74119: EMPTY
74120: LIST
74121: LIST
74122: PUSH
74123: LD_INT 0
74125: PUSH
74126: LD_INT 1
74128: NEG
74129: PUSH
74130: EMPTY
74131: LIST
74132: LIST
74133: PUSH
74134: LD_INT 1
74136: PUSH
74137: LD_INT 0
74139: PUSH
74140: EMPTY
74141: LIST
74142: LIST
74143: PUSH
74144: LD_INT 1
74146: PUSH
74147: LD_INT 1
74149: PUSH
74150: EMPTY
74151: LIST
74152: LIST
74153: PUSH
74154: LD_INT 0
74156: PUSH
74157: LD_INT 1
74159: PUSH
74160: EMPTY
74161: LIST
74162: LIST
74163: PUSH
74164: LD_INT 1
74166: NEG
74167: PUSH
74168: LD_INT 0
74170: PUSH
74171: EMPTY
74172: LIST
74173: LIST
74174: PUSH
74175: LD_INT 1
74177: NEG
74178: PUSH
74179: LD_INT 1
74181: NEG
74182: PUSH
74183: EMPTY
74184: LIST
74185: LIST
74186: PUSH
74187: LD_INT 1
74189: NEG
74190: PUSH
74191: LD_INT 2
74193: NEG
74194: PUSH
74195: EMPTY
74196: LIST
74197: LIST
74198: PUSH
74199: LD_INT 1
74201: NEG
74202: PUSH
74203: LD_INT 1
74205: PUSH
74206: EMPTY
74207: LIST
74208: LIST
74209: PUSH
74210: LD_INT 2
74212: NEG
74213: PUSH
74214: LD_INT 0
74216: PUSH
74217: EMPTY
74218: LIST
74219: LIST
74220: PUSH
74221: LD_INT 2
74223: NEG
74224: PUSH
74225: LD_INT 1
74227: NEG
74228: PUSH
74229: EMPTY
74230: LIST
74231: LIST
74232: PUSH
74233: LD_INT 2
74235: NEG
74236: PUSH
74237: LD_INT 2
74239: NEG
74240: PUSH
74241: EMPTY
74242: LIST
74243: LIST
74244: PUSH
74245: EMPTY
74246: LIST
74247: LIST
74248: LIST
74249: LIST
74250: LIST
74251: LIST
74252: LIST
74253: LIST
74254: LIST
74255: LIST
74256: LIST
74257: LIST
74258: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74259: LD_ADDR_VAR 0 53
74263: PUSH
74264: LD_INT 0
74266: PUSH
74267: LD_INT 0
74269: PUSH
74270: EMPTY
74271: LIST
74272: LIST
74273: PUSH
74274: LD_INT 0
74276: PUSH
74277: LD_INT 1
74279: NEG
74280: PUSH
74281: EMPTY
74282: LIST
74283: LIST
74284: PUSH
74285: LD_INT 1
74287: PUSH
74288: LD_INT 0
74290: PUSH
74291: EMPTY
74292: LIST
74293: LIST
74294: PUSH
74295: LD_INT 1
74297: PUSH
74298: LD_INT 1
74300: PUSH
74301: EMPTY
74302: LIST
74303: LIST
74304: PUSH
74305: LD_INT 0
74307: PUSH
74308: LD_INT 1
74310: PUSH
74311: EMPTY
74312: LIST
74313: LIST
74314: PUSH
74315: LD_INT 1
74317: NEG
74318: PUSH
74319: LD_INT 0
74321: PUSH
74322: EMPTY
74323: LIST
74324: LIST
74325: PUSH
74326: LD_INT 1
74328: NEG
74329: PUSH
74330: LD_INT 1
74332: NEG
74333: PUSH
74334: EMPTY
74335: LIST
74336: LIST
74337: PUSH
74338: LD_INT 1
74340: NEG
74341: PUSH
74342: LD_INT 2
74344: NEG
74345: PUSH
74346: EMPTY
74347: LIST
74348: LIST
74349: PUSH
74350: LD_INT 0
74352: PUSH
74353: LD_INT 2
74355: NEG
74356: PUSH
74357: EMPTY
74358: LIST
74359: LIST
74360: PUSH
74361: LD_INT 1
74363: PUSH
74364: LD_INT 1
74366: NEG
74367: PUSH
74368: EMPTY
74369: LIST
74370: LIST
74371: PUSH
74372: LD_INT 2
74374: PUSH
74375: LD_INT 0
74377: PUSH
74378: EMPTY
74379: LIST
74380: LIST
74381: PUSH
74382: LD_INT 2
74384: PUSH
74385: LD_INT 1
74387: PUSH
74388: EMPTY
74389: LIST
74390: LIST
74391: PUSH
74392: LD_INT 2
74394: PUSH
74395: LD_INT 2
74397: PUSH
74398: EMPTY
74399: LIST
74400: LIST
74401: PUSH
74402: LD_INT 1
74404: PUSH
74405: LD_INT 2
74407: PUSH
74408: EMPTY
74409: LIST
74410: LIST
74411: PUSH
74412: LD_INT 0
74414: PUSH
74415: LD_INT 2
74417: PUSH
74418: EMPTY
74419: LIST
74420: LIST
74421: PUSH
74422: LD_INT 1
74424: NEG
74425: PUSH
74426: LD_INT 1
74428: PUSH
74429: EMPTY
74430: LIST
74431: LIST
74432: PUSH
74433: LD_INT 2
74435: NEG
74436: PUSH
74437: LD_INT 0
74439: PUSH
74440: EMPTY
74441: LIST
74442: LIST
74443: PUSH
74444: LD_INT 2
74446: NEG
74447: PUSH
74448: LD_INT 1
74450: NEG
74451: PUSH
74452: EMPTY
74453: LIST
74454: LIST
74455: PUSH
74456: LD_INT 2
74458: NEG
74459: PUSH
74460: LD_INT 2
74462: NEG
74463: PUSH
74464: EMPTY
74465: LIST
74466: LIST
74467: PUSH
74468: EMPTY
74469: LIST
74470: LIST
74471: LIST
74472: LIST
74473: LIST
74474: LIST
74475: LIST
74476: LIST
74477: LIST
74478: LIST
74479: LIST
74480: LIST
74481: LIST
74482: LIST
74483: LIST
74484: LIST
74485: LIST
74486: LIST
74487: LIST
74488: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74489: LD_ADDR_VAR 0 54
74493: PUSH
74494: LD_INT 0
74496: PUSH
74497: LD_INT 0
74499: PUSH
74500: EMPTY
74501: LIST
74502: LIST
74503: PUSH
74504: LD_INT 0
74506: PUSH
74507: LD_INT 1
74509: NEG
74510: PUSH
74511: EMPTY
74512: LIST
74513: LIST
74514: PUSH
74515: LD_INT 1
74517: PUSH
74518: LD_INT 0
74520: PUSH
74521: EMPTY
74522: LIST
74523: LIST
74524: PUSH
74525: LD_INT 1
74527: PUSH
74528: LD_INT 1
74530: PUSH
74531: EMPTY
74532: LIST
74533: LIST
74534: PUSH
74535: LD_INT 0
74537: PUSH
74538: LD_INT 1
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: PUSH
74545: LD_INT 1
74547: NEG
74548: PUSH
74549: LD_INT 0
74551: PUSH
74552: EMPTY
74553: LIST
74554: LIST
74555: PUSH
74556: LD_INT 1
74558: NEG
74559: PUSH
74560: LD_INT 1
74562: NEG
74563: PUSH
74564: EMPTY
74565: LIST
74566: LIST
74567: PUSH
74568: LD_INT 1
74570: NEG
74571: PUSH
74572: LD_INT 2
74574: NEG
74575: PUSH
74576: EMPTY
74577: LIST
74578: LIST
74579: PUSH
74580: LD_INT 0
74582: PUSH
74583: LD_INT 2
74585: NEG
74586: PUSH
74587: EMPTY
74588: LIST
74589: LIST
74590: PUSH
74591: LD_INT 1
74593: PUSH
74594: LD_INT 1
74596: NEG
74597: PUSH
74598: EMPTY
74599: LIST
74600: LIST
74601: PUSH
74602: LD_INT 2
74604: PUSH
74605: LD_INT 0
74607: PUSH
74608: EMPTY
74609: LIST
74610: LIST
74611: PUSH
74612: LD_INT 2
74614: PUSH
74615: LD_INT 1
74617: PUSH
74618: EMPTY
74619: LIST
74620: LIST
74621: PUSH
74622: LD_INT 2
74624: PUSH
74625: LD_INT 2
74627: PUSH
74628: EMPTY
74629: LIST
74630: LIST
74631: PUSH
74632: LD_INT 1
74634: PUSH
74635: LD_INT 2
74637: PUSH
74638: EMPTY
74639: LIST
74640: LIST
74641: PUSH
74642: LD_INT 0
74644: PUSH
74645: LD_INT 2
74647: PUSH
74648: EMPTY
74649: LIST
74650: LIST
74651: PUSH
74652: LD_INT 1
74654: NEG
74655: PUSH
74656: LD_INT 1
74658: PUSH
74659: EMPTY
74660: LIST
74661: LIST
74662: PUSH
74663: LD_INT 2
74665: NEG
74666: PUSH
74667: LD_INT 0
74669: PUSH
74670: EMPTY
74671: LIST
74672: LIST
74673: PUSH
74674: LD_INT 2
74676: NEG
74677: PUSH
74678: LD_INT 1
74680: NEG
74681: PUSH
74682: EMPTY
74683: LIST
74684: LIST
74685: PUSH
74686: LD_INT 2
74688: NEG
74689: PUSH
74690: LD_INT 2
74692: NEG
74693: PUSH
74694: EMPTY
74695: LIST
74696: LIST
74697: PUSH
74698: EMPTY
74699: LIST
74700: LIST
74701: LIST
74702: LIST
74703: LIST
74704: LIST
74705: LIST
74706: LIST
74707: LIST
74708: LIST
74709: LIST
74710: LIST
74711: LIST
74712: LIST
74713: LIST
74714: LIST
74715: LIST
74716: LIST
74717: LIST
74718: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74719: LD_ADDR_VAR 0 55
74723: PUSH
74724: LD_INT 0
74726: PUSH
74727: LD_INT 0
74729: PUSH
74730: EMPTY
74731: LIST
74732: LIST
74733: PUSH
74734: LD_INT 0
74736: PUSH
74737: LD_INT 1
74739: NEG
74740: PUSH
74741: EMPTY
74742: LIST
74743: LIST
74744: PUSH
74745: LD_INT 1
74747: PUSH
74748: LD_INT 0
74750: PUSH
74751: EMPTY
74752: LIST
74753: LIST
74754: PUSH
74755: LD_INT 1
74757: PUSH
74758: LD_INT 1
74760: PUSH
74761: EMPTY
74762: LIST
74763: LIST
74764: PUSH
74765: LD_INT 0
74767: PUSH
74768: LD_INT 1
74770: PUSH
74771: EMPTY
74772: LIST
74773: LIST
74774: PUSH
74775: LD_INT 1
74777: NEG
74778: PUSH
74779: LD_INT 0
74781: PUSH
74782: EMPTY
74783: LIST
74784: LIST
74785: PUSH
74786: LD_INT 1
74788: NEG
74789: PUSH
74790: LD_INT 1
74792: NEG
74793: PUSH
74794: EMPTY
74795: LIST
74796: LIST
74797: PUSH
74798: LD_INT 1
74800: NEG
74801: PUSH
74802: LD_INT 2
74804: NEG
74805: PUSH
74806: EMPTY
74807: LIST
74808: LIST
74809: PUSH
74810: LD_INT 0
74812: PUSH
74813: LD_INT 2
74815: NEG
74816: PUSH
74817: EMPTY
74818: LIST
74819: LIST
74820: PUSH
74821: LD_INT 1
74823: PUSH
74824: LD_INT 1
74826: NEG
74827: PUSH
74828: EMPTY
74829: LIST
74830: LIST
74831: PUSH
74832: LD_INT 2
74834: PUSH
74835: LD_INT 0
74837: PUSH
74838: EMPTY
74839: LIST
74840: LIST
74841: PUSH
74842: LD_INT 2
74844: PUSH
74845: LD_INT 1
74847: PUSH
74848: EMPTY
74849: LIST
74850: LIST
74851: PUSH
74852: LD_INT 2
74854: PUSH
74855: LD_INT 2
74857: PUSH
74858: EMPTY
74859: LIST
74860: LIST
74861: PUSH
74862: LD_INT 1
74864: PUSH
74865: LD_INT 2
74867: PUSH
74868: EMPTY
74869: LIST
74870: LIST
74871: PUSH
74872: LD_INT 0
74874: PUSH
74875: LD_INT 2
74877: PUSH
74878: EMPTY
74879: LIST
74880: LIST
74881: PUSH
74882: LD_INT 1
74884: NEG
74885: PUSH
74886: LD_INT 1
74888: PUSH
74889: EMPTY
74890: LIST
74891: LIST
74892: PUSH
74893: LD_INT 2
74895: NEG
74896: PUSH
74897: LD_INT 0
74899: PUSH
74900: EMPTY
74901: LIST
74902: LIST
74903: PUSH
74904: LD_INT 2
74906: NEG
74907: PUSH
74908: LD_INT 1
74910: NEG
74911: PUSH
74912: EMPTY
74913: LIST
74914: LIST
74915: PUSH
74916: LD_INT 2
74918: NEG
74919: PUSH
74920: LD_INT 2
74922: NEG
74923: PUSH
74924: EMPTY
74925: LIST
74926: LIST
74927: PUSH
74928: EMPTY
74929: LIST
74930: LIST
74931: LIST
74932: LIST
74933: LIST
74934: LIST
74935: LIST
74936: LIST
74937: LIST
74938: LIST
74939: LIST
74940: LIST
74941: LIST
74942: LIST
74943: LIST
74944: LIST
74945: LIST
74946: LIST
74947: LIST
74948: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74949: LD_ADDR_VAR 0 56
74953: PUSH
74954: LD_INT 0
74956: PUSH
74957: LD_INT 0
74959: PUSH
74960: EMPTY
74961: LIST
74962: LIST
74963: PUSH
74964: LD_INT 0
74966: PUSH
74967: LD_INT 1
74969: NEG
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: PUSH
74975: LD_INT 1
74977: PUSH
74978: LD_INT 0
74980: PUSH
74981: EMPTY
74982: LIST
74983: LIST
74984: PUSH
74985: LD_INT 1
74987: PUSH
74988: LD_INT 1
74990: PUSH
74991: EMPTY
74992: LIST
74993: LIST
74994: PUSH
74995: LD_INT 0
74997: PUSH
74998: LD_INT 1
75000: PUSH
75001: EMPTY
75002: LIST
75003: LIST
75004: PUSH
75005: LD_INT 1
75007: NEG
75008: PUSH
75009: LD_INT 0
75011: PUSH
75012: EMPTY
75013: LIST
75014: LIST
75015: PUSH
75016: LD_INT 1
75018: NEG
75019: PUSH
75020: LD_INT 1
75022: NEG
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: PUSH
75028: LD_INT 1
75030: NEG
75031: PUSH
75032: LD_INT 2
75034: NEG
75035: PUSH
75036: EMPTY
75037: LIST
75038: LIST
75039: PUSH
75040: LD_INT 0
75042: PUSH
75043: LD_INT 2
75045: NEG
75046: PUSH
75047: EMPTY
75048: LIST
75049: LIST
75050: PUSH
75051: LD_INT 1
75053: PUSH
75054: LD_INT 1
75056: NEG
75057: PUSH
75058: EMPTY
75059: LIST
75060: LIST
75061: PUSH
75062: LD_INT 2
75064: PUSH
75065: LD_INT 0
75067: PUSH
75068: EMPTY
75069: LIST
75070: LIST
75071: PUSH
75072: LD_INT 2
75074: PUSH
75075: LD_INT 1
75077: PUSH
75078: EMPTY
75079: LIST
75080: LIST
75081: PUSH
75082: LD_INT 2
75084: PUSH
75085: LD_INT 2
75087: PUSH
75088: EMPTY
75089: LIST
75090: LIST
75091: PUSH
75092: LD_INT 1
75094: PUSH
75095: LD_INT 2
75097: PUSH
75098: EMPTY
75099: LIST
75100: LIST
75101: PUSH
75102: LD_INT 0
75104: PUSH
75105: LD_INT 2
75107: PUSH
75108: EMPTY
75109: LIST
75110: LIST
75111: PUSH
75112: LD_INT 1
75114: NEG
75115: PUSH
75116: LD_INT 1
75118: PUSH
75119: EMPTY
75120: LIST
75121: LIST
75122: PUSH
75123: LD_INT 2
75125: NEG
75126: PUSH
75127: LD_INT 0
75129: PUSH
75130: EMPTY
75131: LIST
75132: LIST
75133: PUSH
75134: LD_INT 2
75136: NEG
75137: PUSH
75138: LD_INT 1
75140: NEG
75141: PUSH
75142: EMPTY
75143: LIST
75144: LIST
75145: PUSH
75146: LD_INT 2
75148: NEG
75149: PUSH
75150: LD_INT 2
75152: NEG
75153: PUSH
75154: EMPTY
75155: LIST
75156: LIST
75157: PUSH
75158: EMPTY
75159: LIST
75160: LIST
75161: LIST
75162: LIST
75163: LIST
75164: LIST
75165: LIST
75166: LIST
75167: LIST
75168: LIST
75169: LIST
75170: LIST
75171: LIST
75172: LIST
75173: LIST
75174: LIST
75175: LIST
75176: LIST
75177: LIST
75178: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75179: LD_ADDR_VAR 0 57
75183: PUSH
75184: LD_INT 0
75186: PUSH
75187: LD_INT 0
75189: PUSH
75190: EMPTY
75191: LIST
75192: LIST
75193: PUSH
75194: LD_INT 0
75196: PUSH
75197: LD_INT 1
75199: NEG
75200: PUSH
75201: EMPTY
75202: LIST
75203: LIST
75204: PUSH
75205: LD_INT 1
75207: PUSH
75208: LD_INT 0
75210: PUSH
75211: EMPTY
75212: LIST
75213: LIST
75214: PUSH
75215: LD_INT 1
75217: PUSH
75218: LD_INT 1
75220: PUSH
75221: EMPTY
75222: LIST
75223: LIST
75224: PUSH
75225: LD_INT 0
75227: PUSH
75228: LD_INT 1
75230: PUSH
75231: EMPTY
75232: LIST
75233: LIST
75234: PUSH
75235: LD_INT 1
75237: NEG
75238: PUSH
75239: LD_INT 0
75241: PUSH
75242: EMPTY
75243: LIST
75244: LIST
75245: PUSH
75246: LD_INT 1
75248: NEG
75249: PUSH
75250: LD_INT 1
75252: NEG
75253: PUSH
75254: EMPTY
75255: LIST
75256: LIST
75257: PUSH
75258: LD_INT 1
75260: NEG
75261: PUSH
75262: LD_INT 2
75264: NEG
75265: PUSH
75266: EMPTY
75267: LIST
75268: LIST
75269: PUSH
75270: LD_INT 0
75272: PUSH
75273: LD_INT 2
75275: NEG
75276: PUSH
75277: EMPTY
75278: LIST
75279: LIST
75280: PUSH
75281: LD_INT 1
75283: PUSH
75284: LD_INT 1
75286: NEG
75287: PUSH
75288: EMPTY
75289: LIST
75290: LIST
75291: PUSH
75292: LD_INT 2
75294: PUSH
75295: LD_INT 0
75297: PUSH
75298: EMPTY
75299: LIST
75300: LIST
75301: PUSH
75302: LD_INT 2
75304: PUSH
75305: LD_INT 1
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: PUSH
75312: LD_INT 2
75314: PUSH
75315: LD_INT 2
75317: PUSH
75318: EMPTY
75319: LIST
75320: LIST
75321: PUSH
75322: LD_INT 1
75324: PUSH
75325: LD_INT 2
75327: PUSH
75328: EMPTY
75329: LIST
75330: LIST
75331: PUSH
75332: LD_INT 0
75334: PUSH
75335: LD_INT 2
75337: PUSH
75338: EMPTY
75339: LIST
75340: LIST
75341: PUSH
75342: LD_INT 1
75344: NEG
75345: PUSH
75346: LD_INT 1
75348: PUSH
75349: EMPTY
75350: LIST
75351: LIST
75352: PUSH
75353: LD_INT 2
75355: NEG
75356: PUSH
75357: LD_INT 0
75359: PUSH
75360: EMPTY
75361: LIST
75362: LIST
75363: PUSH
75364: LD_INT 2
75366: NEG
75367: PUSH
75368: LD_INT 1
75370: NEG
75371: PUSH
75372: EMPTY
75373: LIST
75374: LIST
75375: PUSH
75376: LD_INT 2
75378: NEG
75379: PUSH
75380: LD_INT 2
75382: NEG
75383: PUSH
75384: EMPTY
75385: LIST
75386: LIST
75387: PUSH
75388: EMPTY
75389: LIST
75390: LIST
75391: LIST
75392: LIST
75393: LIST
75394: LIST
75395: LIST
75396: LIST
75397: LIST
75398: LIST
75399: LIST
75400: LIST
75401: LIST
75402: LIST
75403: LIST
75404: LIST
75405: LIST
75406: LIST
75407: LIST
75408: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75409: LD_ADDR_VAR 0 58
75413: PUSH
75414: LD_INT 0
75416: PUSH
75417: LD_INT 0
75419: PUSH
75420: EMPTY
75421: LIST
75422: LIST
75423: PUSH
75424: LD_INT 0
75426: PUSH
75427: LD_INT 1
75429: NEG
75430: PUSH
75431: EMPTY
75432: LIST
75433: LIST
75434: PUSH
75435: LD_INT 1
75437: PUSH
75438: LD_INT 0
75440: PUSH
75441: EMPTY
75442: LIST
75443: LIST
75444: PUSH
75445: LD_INT 1
75447: PUSH
75448: LD_INT 1
75450: PUSH
75451: EMPTY
75452: LIST
75453: LIST
75454: PUSH
75455: LD_INT 0
75457: PUSH
75458: LD_INT 1
75460: PUSH
75461: EMPTY
75462: LIST
75463: LIST
75464: PUSH
75465: LD_INT 1
75467: NEG
75468: PUSH
75469: LD_INT 0
75471: PUSH
75472: EMPTY
75473: LIST
75474: LIST
75475: PUSH
75476: LD_INT 1
75478: NEG
75479: PUSH
75480: LD_INT 1
75482: NEG
75483: PUSH
75484: EMPTY
75485: LIST
75486: LIST
75487: PUSH
75488: LD_INT 1
75490: NEG
75491: PUSH
75492: LD_INT 2
75494: NEG
75495: PUSH
75496: EMPTY
75497: LIST
75498: LIST
75499: PUSH
75500: LD_INT 0
75502: PUSH
75503: LD_INT 2
75505: NEG
75506: PUSH
75507: EMPTY
75508: LIST
75509: LIST
75510: PUSH
75511: LD_INT 1
75513: PUSH
75514: LD_INT 1
75516: NEG
75517: PUSH
75518: EMPTY
75519: LIST
75520: LIST
75521: PUSH
75522: LD_INT 2
75524: PUSH
75525: LD_INT 0
75527: PUSH
75528: EMPTY
75529: LIST
75530: LIST
75531: PUSH
75532: LD_INT 2
75534: PUSH
75535: LD_INT 1
75537: PUSH
75538: EMPTY
75539: LIST
75540: LIST
75541: PUSH
75542: LD_INT 2
75544: PUSH
75545: LD_INT 2
75547: PUSH
75548: EMPTY
75549: LIST
75550: LIST
75551: PUSH
75552: LD_INT 1
75554: PUSH
75555: LD_INT 2
75557: PUSH
75558: EMPTY
75559: LIST
75560: LIST
75561: PUSH
75562: LD_INT 0
75564: PUSH
75565: LD_INT 2
75567: PUSH
75568: EMPTY
75569: LIST
75570: LIST
75571: PUSH
75572: LD_INT 1
75574: NEG
75575: PUSH
75576: LD_INT 1
75578: PUSH
75579: EMPTY
75580: LIST
75581: LIST
75582: PUSH
75583: LD_INT 2
75585: NEG
75586: PUSH
75587: LD_INT 0
75589: PUSH
75590: EMPTY
75591: LIST
75592: LIST
75593: PUSH
75594: LD_INT 2
75596: NEG
75597: PUSH
75598: LD_INT 1
75600: NEG
75601: PUSH
75602: EMPTY
75603: LIST
75604: LIST
75605: PUSH
75606: LD_INT 2
75608: NEG
75609: PUSH
75610: LD_INT 2
75612: NEG
75613: PUSH
75614: EMPTY
75615: LIST
75616: LIST
75617: PUSH
75618: EMPTY
75619: LIST
75620: LIST
75621: LIST
75622: LIST
75623: LIST
75624: LIST
75625: LIST
75626: LIST
75627: LIST
75628: LIST
75629: LIST
75630: LIST
75631: LIST
75632: LIST
75633: LIST
75634: LIST
75635: LIST
75636: LIST
75637: LIST
75638: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75639: LD_ADDR_VAR 0 59
75643: PUSH
75644: LD_INT 0
75646: PUSH
75647: LD_INT 0
75649: PUSH
75650: EMPTY
75651: LIST
75652: LIST
75653: PUSH
75654: LD_INT 0
75656: PUSH
75657: LD_INT 1
75659: NEG
75660: PUSH
75661: EMPTY
75662: LIST
75663: LIST
75664: PUSH
75665: LD_INT 1
75667: PUSH
75668: LD_INT 0
75670: PUSH
75671: EMPTY
75672: LIST
75673: LIST
75674: PUSH
75675: LD_INT 1
75677: PUSH
75678: LD_INT 1
75680: PUSH
75681: EMPTY
75682: LIST
75683: LIST
75684: PUSH
75685: LD_INT 0
75687: PUSH
75688: LD_INT 1
75690: PUSH
75691: EMPTY
75692: LIST
75693: LIST
75694: PUSH
75695: LD_INT 1
75697: NEG
75698: PUSH
75699: LD_INT 0
75701: PUSH
75702: EMPTY
75703: LIST
75704: LIST
75705: PUSH
75706: LD_INT 1
75708: NEG
75709: PUSH
75710: LD_INT 1
75712: NEG
75713: PUSH
75714: EMPTY
75715: LIST
75716: LIST
75717: PUSH
75718: EMPTY
75719: LIST
75720: LIST
75721: LIST
75722: LIST
75723: LIST
75724: LIST
75725: LIST
75726: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75727: LD_ADDR_VAR 0 60
75731: PUSH
75732: LD_INT 0
75734: PUSH
75735: LD_INT 0
75737: PUSH
75738: EMPTY
75739: LIST
75740: LIST
75741: PUSH
75742: LD_INT 0
75744: PUSH
75745: LD_INT 1
75747: NEG
75748: PUSH
75749: EMPTY
75750: LIST
75751: LIST
75752: PUSH
75753: LD_INT 1
75755: PUSH
75756: LD_INT 0
75758: PUSH
75759: EMPTY
75760: LIST
75761: LIST
75762: PUSH
75763: LD_INT 1
75765: PUSH
75766: LD_INT 1
75768: PUSH
75769: EMPTY
75770: LIST
75771: LIST
75772: PUSH
75773: LD_INT 0
75775: PUSH
75776: LD_INT 1
75778: PUSH
75779: EMPTY
75780: LIST
75781: LIST
75782: PUSH
75783: LD_INT 1
75785: NEG
75786: PUSH
75787: LD_INT 0
75789: PUSH
75790: EMPTY
75791: LIST
75792: LIST
75793: PUSH
75794: LD_INT 1
75796: NEG
75797: PUSH
75798: LD_INT 1
75800: NEG
75801: PUSH
75802: EMPTY
75803: LIST
75804: LIST
75805: PUSH
75806: EMPTY
75807: LIST
75808: LIST
75809: LIST
75810: LIST
75811: LIST
75812: LIST
75813: LIST
75814: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75815: LD_ADDR_VAR 0 61
75819: PUSH
75820: LD_INT 0
75822: PUSH
75823: LD_INT 0
75825: PUSH
75826: EMPTY
75827: LIST
75828: LIST
75829: PUSH
75830: LD_INT 0
75832: PUSH
75833: LD_INT 1
75835: NEG
75836: PUSH
75837: EMPTY
75838: LIST
75839: LIST
75840: PUSH
75841: LD_INT 1
75843: PUSH
75844: LD_INT 0
75846: PUSH
75847: EMPTY
75848: LIST
75849: LIST
75850: PUSH
75851: LD_INT 1
75853: PUSH
75854: LD_INT 1
75856: PUSH
75857: EMPTY
75858: LIST
75859: LIST
75860: PUSH
75861: LD_INT 0
75863: PUSH
75864: LD_INT 1
75866: PUSH
75867: EMPTY
75868: LIST
75869: LIST
75870: PUSH
75871: LD_INT 1
75873: NEG
75874: PUSH
75875: LD_INT 0
75877: PUSH
75878: EMPTY
75879: LIST
75880: LIST
75881: PUSH
75882: LD_INT 1
75884: NEG
75885: PUSH
75886: LD_INT 1
75888: NEG
75889: PUSH
75890: EMPTY
75891: LIST
75892: LIST
75893: PUSH
75894: EMPTY
75895: LIST
75896: LIST
75897: LIST
75898: LIST
75899: LIST
75900: LIST
75901: LIST
75902: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75903: LD_ADDR_VAR 0 62
75907: PUSH
75908: LD_INT 0
75910: PUSH
75911: LD_INT 0
75913: PUSH
75914: EMPTY
75915: LIST
75916: LIST
75917: PUSH
75918: LD_INT 0
75920: PUSH
75921: LD_INT 1
75923: NEG
75924: PUSH
75925: EMPTY
75926: LIST
75927: LIST
75928: PUSH
75929: LD_INT 1
75931: PUSH
75932: LD_INT 0
75934: PUSH
75935: EMPTY
75936: LIST
75937: LIST
75938: PUSH
75939: LD_INT 1
75941: PUSH
75942: LD_INT 1
75944: PUSH
75945: EMPTY
75946: LIST
75947: LIST
75948: PUSH
75949: LD_INT 0
75951: PUSH
75952: LD_INT 1
75954: PUSH
75955: EMPTY
75956: LIST
75957: LIST
75958: PUSH
75959: LD_INT 1
75961: NEG
75962: PUSH
75963: LD_INT 0
75965: PUSH
75966: EMPTY
75967: LIST
75968: LIST
75969: PUSH
75970: LD_INT 1
75972: NEG
75973: PUSH
75974: LD_INT 1
75976: NEG
75977: PUSH
75978: EMPTY
75979: LIST
75980: LIST
75981: PUSH
75982: EMPTY
75983: LIST
75984: LIST
75985: LIST
75986: LIST
75987: LIST
75988: LIST
75989: LIST
75990: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75991: LD_ADDR_VAR 0 63
75995: PUSH
75996: LD_INT 0
75998: PUSH
75999: LD_INT 0
76001: PUSH
76002: EMPTY
76003: LIST
76004: LIST
76005: PUSH
76006: LD_INT 0
76008: PUSH
76009: LD_INT 1
76011: NEG
76012: PUSH
76013: EMPTY
76014: LIST
76015: LIST
76016: PUSH
76017: LD_INT 1
76019: PUSH
76020: LD_INT 0
76022: PUSH
76023: EMPTY
76024: LIST
76025: LIST
76026: PUSH
76027: LD_INT 1
76029: PUSH
76030: LD_INT 1
76032: PUSH
76033: EMPTY
76034: LIST
76035: LIST
76036: PUSH
76037: LD_INT 0
76039: PUSH
76040: LD_INT 1
76042: PUSH
76043: EMPTY
76044: LIST
76045: LIST
76046: PUSH
76047: LD_INT 1
76049: NEG
76050: PUSH
76051: LD_INT 0
76053: PUSH
76054: EMPTY
76055: LIST
76056: LIST
76057: PUSH
76058: LD_INT 1
76060: NEG
76061: PUSH
76062: LD_INT 1
76064: NEG
76065: PUSH
76066: EMPTY
76067: LIST
76068: LIST
76069: PUSH
76070: EMPTY
76071: LIST
76072: LIST
76073: LIST
76074: LIST
76075: LIST
76076: LIST
76077: LIST
76078: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
76079: LD_ADDR_VAR 0 64
76083: PUSH
76084: LD_INT 0
76086: PUSH
76087: LD_INT 0
76089: PUSH
76090: EMPTY
76091: LIST
76092: LIST
76093: PUSH
76094: LD_INT 0
76096: PUSH
76097: LD_INT 1
76099: NEG
76100: PUSH
76101: EMPTY
76102: LIST
76103: LIST
76104: PUSH
76105: LD_INT 1
76107: PUSH
76108: LD_INT 0
76110: PUSH
76111: EMPTY
76112: LIST
76113: LIST
76114: PUSH
76115: LD_INT 1
76117: PUSH
76118: LD_INT 1
76120: PUSH
76121: EMPTY
76122: LIST
76123: LIST
76124: PUSH
76125: LD_INT 0
76127: PUSH
76128: LD_INT 1
76130: PUSH
76131: EMPTY
76132: LIST
76133: LIST
76134: PUSH
76135: LD_INT 1
76137: NEG
76138: PUSH
76139: LD_INT 0
76141: PUSH
76142: EMPTY
76143: LIST
76144: LIST
76145: PUSH
76146: LD_INT 1
76148: NEG
76149: PUSH
76150: LD_INT 1
76152: NEG
76153: PUSH
76154: EMPTY
76155: LIST
76156: LIST
76157: PUSH
76158: EMPTY
76159: LIST
76160: LIST
76161: LIST
76162: LIST
76163: LIST
76164: LIST
76165: LIST
76166: ST_TO_ADDR
// end ; 1 :
76167: GO 82064
76169: LD_INT 1
76171: DOUBLE
76172: EQUAL
76173: IFTRUE 76177
76175: GO 78800
76177: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
76178: LD_ADDR_VAR 0 11
76182: PUSH
76183: LD_INT 1
76185: NEG
76186: PUSH
76187: LD_INT 3
76189: NEG
76190: PUSH
76191: EMPTY
76192: LIST
76193: LIST
76194: PUSH
76195: LD_INT 0
76197: PUSH
76198: LD_INT 3
76200: NEG
76201: PUSH
76202: EMPTY
76203: LIST
76204: LIST
76205: PUSH
76206: LD_INT 1
76208: PUSH
76209: LD_INT 2
76211: NEG
76212: PUSH
76213: EMPTY
76214: LIST
76215: LIST
76216: PUSH
76217: EMPTY
76218: LIST
76219: LIST
76220: LIST
76221: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
76222: LD_ADDR_VAR 0 12
76226: PUSH
76227: LD_INT 2
76229: PUSH
76230: LD_INT 1
76232: NEG
76233: PUSH
76234: EMPTY
76235: LIST
76236: LIST
76237: PUSH
76238: LD_INT 3
76240: PUSH
76241: LD_INT 0
76243: PUSH
76244: EMPTY
76245: LIST
76246: LIST
76247: PUSH
76248: LD_INT 3
76250: PUSH
76251: LD_INT 1
76253: PUSH
76254: EMPTY
76255: LIST
76256: LIST
76257: PUSH
76258: EMPTY
76259: LIST
76260: LIST
76261: LIST
76262: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
76263: LD_ADDR_VAR 0 13
76267: PUSH
76268: LD_INT 3
76270: PUSH
76271: LD_INT 2
76273: PUSH
76274: EMPTY
76275: LIST
76276: LIST
76277: PUSH
76278: LD_INT 3
76280: PUSH
76281: LD_INT 3
76283: PUSH
76284: EMPTY
76285: LIST
76286: LIST
76287: PUSH
76288: LD_INT 2
76290: PUSH
76291: LD_INT 3
76293: PUSH
76294: EMPTY
76295: LIST
76296: LIST
76297: PUSH
76298: EMPTY
76299: LIST
76300: LIST
76301: LIST
76302: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
76303: LD_ADDR_VAR 0 14
76307: PUSH
76308: LD_INT 1
76310: PUSH
76311: LD_INT 3
76313: PUSH
76314: EMPTY
76315: LIST
76316: LIST
76317: PUSH
76318: LD_INT 0
76320: PUSH
76321: LD_INT 3
76323: PUSH
76324: EMPTY
76325: LIST
76326: LIST
76327: PUSH
76328: LD_INT 1
76330: NEG
76331: PUSH
76332: LD_INT 2
76334: PUSH
76335: EMPTY
76336: LIST
76337: LIST
76338: PUSH
76339: EMPTY
76340: LIST
76341: LIST
76342: LIST
76343: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76344: LD_ADDR_VAR 0 15
76348: PUSH
76349: LD_INT 2
76351: NEG
76352: PUSH
76353: LD_INT 1
76355: PUSH
76356: EMPTY
76357: LIST
76358: LIST
76359: PUSH
76360: LD_INT 3
76362: NEG
76363: PUSH
76364: LD_INT 0
76366: PUSH
76367: EMPTY
76368: LIST
76369: LIST
76370: PUSH
76371: LD_INT 3
76373: NEG
76374: PUSH
76375: LD_INT 1
76377: NEG
76378: PUSH
76379: EMPTY
76380: LIST
76381: LIST
76382: PUSH
76383: EMPTY
76384: LIST
76385: LIST
76386: LIST
76387: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76388: LD_ADDR_VAR 0 16
76392: PUSH
76393: LD_INT 2
76395: NEG
76396: PUSH
76397: LD_INT 3
76399: NEG
76400: PUSH
76401: EMPTY
76402: LIST
76403: LIST
76404: PUSH
76405: LD_INT 3
76407: NEG
76408: PUSH
76409: LD_INT 2
76411: NEG
76412: PUSH
76413: EMPTY
76414: LIST
76415: LIST
76416: PUSH
76417: LD_INT 3
76419: NEG
76420: PUSH
76421: LD_INT 3
76423: NEG
76424: PUSH
76425: EMPTY
76426: LIST
76427: LIST
76428: PUSH
76429: EMPTY
76430: LIST
76431: LIST
76432: LIST
76433: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
76434: LD_ADDR_VAR 0 17
76438: PUSH
76439: LD_INT 1
76441: NEG
76442: PUSH
76443: LD_INT 3
76445: NEG
76446: PUSH
76447: EMPTY
76448: LIST
76449: LIST
76450: PUSH
76451: LD_INT 0
76453: PUSH
76454: LD_INT 3
76456: NEG
76457: PUSH
76458: EMPTY
76459: LIST
76460: LIST
76461: PUSH
76462: LD_INT 1
76464: PUSH
76465: LD_INT 2
76467: NEG
76468: PUSH
76469: EMPTY
76470: LIST
76471: LIST
76472: PUSH
76473: EMPTY
76474: LIST
76475: LIST
76476: LIST
76477: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
76478: LD_ADDR_VAR 0 18
76482: PUSH
76483: LD_INT 2
76485: PUSH
76486: LD_INT 1
76488: NEG
76489: PUSH
76490: EMPTY
76491: LIST
76492: LIST
76493: PUSH
76494: LD_INT 3
76496: PUSH
76497: LD_INT 0
76499: PUSH
76500: EMPTY
76501: LIST
76502: LIST
76503: PUSH
76504: LD_INT 3
76506: PUSH
76507: LD_INT 1
76509: PUSH
76510: EMPTY
76511: LIST
76512: LIST
76513: PUSH
76514: EMPTY
76515: LIST
76516: LIST
76517: LIST
76518: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
76519: LD_ADDR_VAR 0 19
76523: PUSH
76524: LD_INT 3
76526: PUSH
76527: LD_INT 2
76529: PUSH
76530: EMPTY
76531: LIST
76532: LIST
76533: PUSH
76534: LD_INT 3
76536: PUSH
76537: LD_INT 3
76539: PUSH
76540: EMPTY
76541: LIST
76542: LIST
76543: PUSH
76544: LD_INT 2
76546: PUSH
76547: LD_INT 3
76549: PUSH
76550: EMPTY
76551: LIST
76552: LIST
76553: PUSH
76554: EMPTY
76555: LIST
76556: LIST
76557: LIST
76558: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
76559: LD_ADDR_VAR 0 20
76563: PUSH
76564: LD_INT 1
76566: PUSH
76567: LD_INT 3
76569: PUSH
76570: EMPTY
76571: LIST
76572: LIST
76573: PUSH
76574: LD_INT 0
76576: PUSH
76577: LD_INT 3
76579: PUSH
76580: EMPTY
76581: LIST
76582: LIST
76583: PUSH
76584: LD_INT 1
76586: NEG
76587: PUSH
76588: LD_INT 2
76590: PUSH
76591: EMPTY
76592: LIST
76593: LIST
76594: PUSH
76595: EMPTY
76596: LIST
76597: LIST
76598: LIST
76599: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76600: LD_ADDR_VAR 0 21
76604: PUSH
76605: LD_INT 2
76607: NEG
76608: PUSH
76609: LD_INT 1
76611: PUSH
76612: EMPTY
76613: LIST
76614: LIST
76615: PUSH
76616: LD_INT 3
76618: NEG
76619: PUSH
76620: LD_INT 0
76622: PUSH
76623: EMPTY
76624: LIST
76625: LIST
76626: PUSH
76627: LD_INT 3
76629: NEG
76630: PUSH
76631: LD_INT 1
76633: NEG
76634: PUSH
76635: EMPTY
76636: LIST
76637: LIST
76638: PUSH
76639: EMPTY
76640: LIST
76641: LIST
76642: LIST
76643: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76644: LD_ADDR_VAR 0 22
76648: PUSH
76649: LD_INT 2
76651: NEG
76652: PUSH
76653: LD_INT 3
76655: NEG
76656: PUSH
76657: EMPTY
76658: LIST
76659: LIST
76660: PUSH
76661: LD_INT 3
76663: NEG
76664: PUSH
76665: LD_INT 2
76667: NEG
76668: PUSH
76669: EMPTY
76670: LIST
76671: LIST
76672: PUSH
76673: LD_INT 3
76675: NEG
76676: PUSH
76677: LD_INT 3
76679: NEG
76680: PUSH
76681: EMPTY
76682: LIST
76683: LIST
76684: PUSH
76685: EMPTY
76686: LIST
76687: LIST
76688: LIST
76689: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
76690: LD_ADDR_VAR 0 23
76694: PUSH
76695: LD_INT 0
76697: PUSH
76698: LD_INT 3
76700: NEG
76701: PUSH
76702: EMPTY
76703: LIST
76704: LIST
76705: PUSH
76706: LD_INT 1
76708: NEG
76709: PUSH
76710: LD_INT 4
76712: NEG
76713: PUSH
76714: EMPTY
76715: LIST
76716: LIST
76717: PUSH
76718: LD_INT 1
76720: PUSH
76721: LD_INT 3
76723: NEG
76724: PUSH
76725: EMPTY
76726: LIST
76727: LIST
76728: PUSH
76729: EMPTY
76730: LIST
76731: LIST
76732: LIST
76733: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
76734: LD_ADDR_VAR 0 24
76738: PUSH
76739: LD_INT 3
76741: PUSH
76742: LD_INT 0
76744: PUSH
76745: EMPTY
76746: LIST
76747: LIST
76748: PUSH
76749: LD_INT 3
76751: PUSH
76752: LD_INT 1
76754: NEG
76755: PUSH
76756: EMPTY
76757: LIST
76758: LIST
76759: PUSH
76760: LD_INT 4
76762: PUSH
76763: LD_INT 1
76765: PUSH
76766: EMPTY
76767: LIST
76768: LIST
76769: PUSH
76770: EMPTY
76771: LIST
76772: LIST
76773: LIST
76774: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
76775: LD_ADDR_VAR 0 25
76779: PUSH
76780: LD_INT 3
76782: PUSH
76783: LD_INT 3
76785: PUSH
76786: EMPTY
76787: LIST
76788: LIST
76789: PUSH
76790: LD_INT 4
76792: PUSH
76793: LD_INT 3
76795: PUSH
76796: EMPTY
76797: LIST
76798: LIST
76799: PUSH
76800: LD_INT 3
76802: PUSH
76803: LD_INT 4
76805: PUSH
76806: EMPTY
76807: LIST
76808: LIST
76809: PUSH
76810: EMPTY
76811: LIST
76812: LIST
76813: LIST
76814: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
76815: LD_ADDR_VAR 0 26
76819: PUSH
76820: LD_INT 0
76822: PUSH
76823: LD_INT 3
76825: PUSH
76826: EMPTY
76827: LIST
76828: LIST
76829: PUSH
76830: LD_INT 1
76832: PUSH
76833: LD_INT 4
76835: PUSH
76836: EMPTY
76837: LIST
76838: LIST
76839: PUSH
76840: LD_INT 1
76842: NEG
76843: PUSH
76844: LD_INT 3
76846: PUSH
76847: EMPTY
76848: LIST
76849: LIST
76850: PUSH
76851: EMPTY
76852: LIST
76853: LIST
76854: LIST
76855: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
76856: LD_ADDR_VAR 0 27
76860: PUSH
76861: LD_INT 3
76863: NEG
76864: PUSH
76865: LD_INT 0
76867: PUSH
76868: EMPTY
76869: LIST
76870: LIST
76871: PUSH
76872: LD_INT 3
76874: NEG
76875: PUSH
76876: LD_INT 1
76878: PUSH
76879: EMPTY
76880: LIST
76881: LIST
76882: PUSH
76883: LD_INT 4
76885: NEG
76886: PUSH
76887: LD_INT 1
76889: NEG
76890: PUSH
76891: EMPTY
76892: LIST
76893: LIST
76894: PUSH
76895: EMPTY
76896: LIST
76897: LIST
76898: LIST
76899: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
76900: LD_ADDR_VAR 0 28
76904: PUSH
76905: LD_INT 3
76907: NEG
76908: PUSH
76909: LD_INT 3
76911: NEG
76912: PUSH
76913: EMPTY
76914: LIST
76915: LIST
76916: PUSH
76917: LD_INT 3
76919: NEG
76920: PUSH
76921: LD_INT 4
76923: NEG
76924: PUSH
76925: EMPTY
76926: LIST
76927: LIST
76928: PUSH
76929: LD_INT 4
76931: NEG
76932: PUSH
76933: LD_INT 3
76935: NEG
76936: PUSH
76937: EMPTY
76938: LIST
76939: LIST
76940: PUSH
76941: EMPTY
76942: LIST
76943: LIST
76944: LIST
76945: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
76946: LD_ADDR_VAR 0 29
76950: PUSH
76951: LD_INT 1
76953: NEG
76954: PUSH
76955: LD_INT 3
76957: NEG
76958: PUSH
76959: EMPTY
76960: LIST
76961: LIST
76962: PUSH
76963: LD_INT 0
76965: PUSH
76966: LD_INT 3
76968: NEG
76969: PUSH
76970: EMPTY
76971: LIST
76972: LIST
76973: PUSH
76974: LD_INT 1
76976: PUSH
76977: LD_INT 2
76979: NEG
76980: PUSH
76981: EMPTY
76982: LIST
76983: LIST
76984: PUSH
76985: LD_INT 1
76987: NEG
76988: PUSH
76989: LD_INT 4
76991: NEG
76992: PUSH
76993: EMPTY
76994: LIST
76995: LIST
76996: PUSH
76997: LD_INT 0
76999: PUSH
77000: LD_INT 4
77002: NEG
77003: PUSH
77004: EMPTY
77005: LIST
77006: LIST
77007: PUSH
77008: LD_INT 1
77010: PUSH
77011: LD_INT 3
77013: NEG
77014: PUSH
77015: EMPTY
77016: LIST
77017: LIST
77018: PUSH
77019: LD_INT 1
77021: NEG
77022: PUSH
77023: LD_INT 5
77025: NEG
77026: PUSH
77027: EMPTY
77028: LIST
77029: LIST
77030: PUSH
77031: LD_INT 0
77033: PUSH
77034: LD_INT 5
77036: NEG
77037: PUSH
77038: EMPTY
77039: LIST
77040: LIST
77041: PUSH
77042: LD_INT 1
77044: PUSH
77045: LD_INT 4
77047: NEG
77048: PUSH
77049: EMPTY
77050: LIST
77051: LIST
77052: PUSH
77053: LD_INT 1
77055: NEG
77056: PUSH
77057: LD_INT 6
77059: NEG
77060: PUSH
77061: EMPTY
77062: LIST
77063: LIST
77064: PUSH
77065: LD_INT 0
77067: PUSH
77068: LD_INT 6
77070: NEG
77071: PUSH
77072: EMPTY
77073: LIST
77074: LIST
77075: PUSH
77076: LD_INT 1
77078: PUSH
77079: LD_INT 5
77081: NEG
77082: PUSH
77083: EMPTY
77084: LIST
77085: LIST
77086: PUSH
77087: EMPTY
77088: LIST
77089: LIST
77090: LIST
77091: LIST
77092: LIST
77093: LIST
77094: LIST
77095: LIST
77096: LIST
77097: LIST
77098: LIST
77099: LIST
77100: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
77101: LD_ADDR_VAR 0 30
77105: PUSH
77106: LD_INT 2
77108: PUSH
77109: LD_INT 1
77111: NEG
77112: PUSH
77113: EMPTY
77114: LIST
77115: LIST
77116: PUSH
77117: LD_INT 3
77119: PUSH
77120: LD_INT 0
77122: PUSH
77123: EMPTY
77124: LIST
77125: LIST
77126: PUSH
77127: LD_INT 3
77129: PUSH
77130: LD_INT 1
77132: PUSH
77133: EMPTY
77134: LIST
77135: LIST
77136: PUSH
77137: LD_INT 3
77139: PUSH
77140: LD_INT 1
77142: NEG
77143: PUSH
77144: EMPTY
77145: LIST
77146: LIST
77147: PUSH
77148: LD_INT 4
77150: PUSH
77151: LD_INT 0
77153: PUSH
77154: EMPTY
77155: LIST
77156: LIST
77157: PUSH
77158: LD_INT 4
77160: PUSH
77161: LD_INT 1
77163: PUSH
77164: EMPTY
77165: LIST
77166: LIST
77167: PUSH
77168: LD_INT 4
77170: PUSH
77171: LD_INT 1
77173: NEG
77174: PUSH
77175: EMPTY
77176: LIST
77177: LIST
77178: PUSH
77179: LD_INT 5
77181: PUSH
77182: LD_INT 0
77184: PUSH
77185: EMPTY
77186: LIST
77187: LIST
77188: PUSH
77189: LD_INT 5
77191: PUSH
77192: LD_INT 1
77194: PUSH
77195: EMPTY
77196: LIST
77197: LIST
77198: PUSH
77199: LD_INT 5
77201: PUSH
77202: LD_INT 1
77204: NEG
77205: PUSH
77206: EMPTY
77207: LIST
77208: LIST
77209: PUSH
77210: LD_INT 6
77212: PUSH
77213: LD_INT 0
77215: PUSH
77216: EMPTY
77217: LIST
77218: LIST
77219: PUSH
77220: LD_INT 6
77222: PUSH
77223: LD_INT 1
77225: PUSH
77226: EMPTY
77227: LIST
77228: LIST
77229: PUSH
77230: EMPTY
77231: LIST
77232: LIST
77233: LIST
77234: LIST
77235: LIST
77236: LIST
77237: LIST
77238: LIST
77239: LIST
77240: LIST
77241: LIST
77242: LIST
77243: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
77244: LD_ADDR_VAR 0 31
77248: PUSH
77249: LD_INT 3
77251: PUSH
77252: LD_INT 2
77254: PUSH
77255: EMPTY
77256: LIST
77257: LIST
77258: PUSH
77259: LD_INT 3
77261: PUSH
77262: LD_INT 3
77264: PUSH
77265: EMPTY
77266: LIST
77267: LIST
77268: PUSH
77269: LD_INT 2
77271: PUSH
77272: LD_INT 3
77274: PUSH
77275: EMPTY
77276: LIST
77277: LIST
77278: PUSH
77279: LD_INT 4
77281: PUSH
77282: LD_INT 3
77284: PUSH
77285: EMPTY
77286: LIST
77287: LIST
77288: PUSH
77289: LD_INT 4
77291: PUSH
77292: LD_INT 4
77294: PUSH
77295: EMPTY
77296: LIST
77297: LIST
77298: PUSH
77299: LD_INT 3
77301: PUSH
77302: LD_INT 4
77304: PUSH
77305: EMPTY
77306: LIST
77307: LIST
77308: PUSH
77309: LD_INT 5
77311: PUSH
77312: LD_INT 4
77314: PUSH
77315: EMPTY
77316: LIST
77317: LIST
77318: PUSH
77319: LD_INT 5
77321: PUSH
77322: LD_INT 5
77324: PUSH
77325: EMPTY
77326: LIST
77327: LIST
77328: PUSH
77329: LD_INT 4
77331: PUSH
77332: LD_INT 5
77334: PUSH
77335: EMPTY
77336: LIST
77337: LIST
77338: PUSH
77339: LD_INT 6
77341: PUSH
77342: LD_INT 5
77344: PUSH
77345: EMPTY
77346: LIST
77347: LIST
77348: PUSH
77349: LD_INT 6
77351: PUSH
77352: LD_INT 6
77354: PUSH
77355: EMPTY
77356: LIST
77357: LIST
77358: PUSH
77359: LD_INT 5
77361: PUSH
77362: LD_INT 6
77364: PUSH
77365: EMPTY
77366: LIST
77367: LIST
77368: PUSH
77369: EMPTY
77370: LIST
77371: LIST
77372: LIST
77373: LIST
77374: LIST
77375: LIST
77376: LIST
77377: LIST
77378: LIST
77379: LIST
77380: LIST
77381: LIST
77382: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
77383: LD_ADDR_VAR 0 32
77387: PUSH
77388: LD_INT 1
77390: PUSH
77391: LD_INT 3
77393: PUSH
77394: EMPTY
77395: LIST
77396: LIST
77397: PUSH
77398: LD_INT 0
77400: PUSH
77401: LD_INT 3
77403: PUSH
77404: EMPTY
77405: LIST
77406: LIST
77407: PUSH
77408: LD_INT 1
77410: NEG
77411: PUSH
77412: LD_INT 2
77414: PUSH
77415: EMPTY
77416: LIST
77417: LIST
77418: PUSH
77419: LD_INT 1
77421: PUSH
77422: LD_INT 4
77424: PUSH
77425: EMPTY
77426: LIST
77427: LIST
77428: PUSH
77429: LD_INT 0
77431: PUSH
77432: LD_INT 4
77434: PUSH
77435: EMPTY
77436: LIST
77437: LIST
77438: PUSH
77439: LD_INT 1
77441: NEG
77442: PUSH
77443: LD_INT 3
77445: PUSH
77446: EMPTY
77447: LIST
77448: LIST
77449: PUSH
77450: LD_INT 1
77452: PUSH
77453: LD_INT 5
77455: PUSH
77456: EMPTY
77457: LIST
77458: LIST
77459: PUSH
77460: LD_INT 0
77462: PUSH
77463: LD_INT 5
77465: PUSH
77466: EMPTY
77467: LIST
77468: LIST
77469: PUSH
77470: LD_INT 1
77472: NEG
77473: PUSH
77474: LD_INT 4
77476: PUSH
77477: EMPTY
77478: LIST
77479: LIST
77480: PUSH
77481: LD_INT 1
77483: PUSH
77484: LD_INT 6
77486: PUSH
77487: EMPTY
77488: LIST
77489: LIST
77490: PUSH
77491: LD_INT 0
77493: PUSH
77494: LD_INT 6
77496: PUSH
77497: EMPTY
77498: LIST
77499: LIST
77500: PUSH
77501: LD_INT 1
77503: NEG
77504: PUSH
77505: LD_INT 5
77507: PUSH
77508: EMPTY
77509: LIST
77510: LIST
77511: PUSH
77512: EMPTY
77513: LIST
77514: LIST
77515: LIST
77516: LIST
77517: LIST
77518: LIST
77519: LIST
77520: LIST
77521: LIST
77522: LIST
77523: LIST
77524: LIST
77525: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
77526: LD_ADDR_VAR 0 33
77530: PUSH
77531: LD_INT 2
77533: NEG
77534: PUSH
77535: LD_INT 1
77537: PUSH
77538: EMPTY
77539: LIST
77540: LIST
77541: PUSH
77542: LD_INT 3
77544: NEG
77545: PUSH
77546: LD_INT 0
77548: PUSH
77549: EMPTY
77550: LIST
77551: LIST
77552: PUSH
77553: LD_INT 3
77555: NEG
77556: PUSH
77557: LD_INT 1
77559: NEG
77560: PUSH
77561: EMPTY
77562: LIST
77563: LIST
77564: PUSH
77565: LD_INT 3
77567: NEG
77568: PUSH
77569: LD_INT 1
77571: PUSH
77572: EMPTY
77573: LIST
77574: LIST
77575: PUSH
77576: LD_INT 4
77578: NEG
77579: PUSH
77580: LD_INT 0
77582: PUSH
77583: EMPTY
77584: LIST
77585: LIST
77586: PUSH
77587: LD_INT 4
77589: NEG
77590: PUSH
77591: LD_INT 1
77593: NEG
77594: PUSH
77595: EMPTY
77596: LIST
77597: LIST
77598: PUSH
77599: LD_INT 4
77601: NEG
77602: PUSH
77603: LD_INT 1
77605: PUSH
77606: EMPTY
77607: LIST
77608: LIST
77609: PUSH
77610: LD_INT 5
77612: NEG
77613: PUSH
77614: LD_INT 0
77616: PUSH
77617: EMPTY
77618: LIST
77619: LIST
77620: PUSH
77621: LD_INT 5
77623: NEG
77624: PUSH
77625: LD_INT 1
77627: NEG
77628: PUSH
77629: EMPTY
77630: LIST
77631: LIST
77632: PUSH
77633: LD_INT 5
77635: NEG
77636: PUSH
77637: LD_INT 1
77639: PUSH
77640: EMPTY
77641: LIST
77642: LIST
77643: PUSH
77644: LD_INT 6
77646: NEG
77647: PUSH
77648: LD_INT 0
77650: PUSH
77651: EMPTY
77652: LIST
77653: LIST
77654: PUSH
77655: LD_INT 6
77657: NEG
77658: PUSH
77659: LD_INT 1
77661: NEG
77662: PUSH
77663: EMPTY
77664: LIST
77665: LIST
77666: PUSH
77667: EMPTY
77668: LIST
77669: LIST
77670: LIST
77671: LIST
77672: LIST
77673: LIST
77674: LIST
77675: LIST
77676: LIST
77677: LIST
77678: LIST
77679: LIST
77680: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
77681: LD_ADDR_VAR 0 34
77685: PUSH
77686: LD_INT 2
77688: NEG
77689: PUSH
77690: LD_INT 3
77692: NEG
77693: PUSH
77694: EMPTY
77695: LIST
77696: LIST
77697: PUSH
77698: LD_INT 3
77700: NEG
77701: PUSH
77702: LD_INT 2
77704: NEG
77705: PUSH
77706: EMPTY
77707: LIST
77708: LIST
77709: PUSH
77710: LD_INT 3
77712: NEG
77713: PUSH
77714: LD_INT 3
77716: NEG
77717: PUSH
77718: EMPTY
77719: LIST
77720: LIST
77721: PUSH
77722: LD_INT 3
77724: NEG
77725: PUSH
77726: LD_INT 4
77728: NEG
77729: PUSH
77730: EMPTY
77731: LIST
77732: LIST
77733: PUSH
77734: LD_INT 4
77736: NEG
77737: PUSH
77738: LD_INT 3
77740: NEG
77741: PUSH
77742: EMPTY
77743: LIST
77744: LIST
77745: PUSH
77746: LD_INT 4
77748: NEG
77749: PUSH
77750: LD_INT 4
77752: NEG
77753: PUSH
77754: EMPTY
77755: LIST
77756: LIST
77757: PUSH
77758: LD_INT 4
77760: NEG
77761: PUSH
77762: LD_INT 5
77764: NEG
77765: PUSH
77766: EMPTY
77767: LIST
77768: LIST
77769: PUSH
77770: LD_INT 5
77772: NEG
77773: PUSH
77774: LD_INT 4
77776: NEG
77777: PUSH
77778: EMPTY
77779: LIST
77780: LIST
77781: PUSH
77782: LD_INT 5
77784: NEG
77785: PUSH
77786: LD_INT 5
77788: NEG
77789: PUSH
77790: EMPTY
77791: LIST
77792: LIST
77793: PUSH
77794: LD_INT 5
77796: NEG
77797: PUSH
77798: LD_INT 6
77800: NEG
77801: PUSH
77802: EMPTY
77803: LIST
77804: LIST
77805: PUSH
77806: LD_INT 6
77808: NEG
77809: PUSH
77810: LD_INT 5
77812: NEG
77813: PUSH
77814: EMPTY
77815: LIST
77816: LIST
77817: PUSH
77818: LD_INT 6
77820: NEG
77821: PUSH
77822: LD_INT 6
77824: NEG
77825: PUSH
77826: EMPTY
77827: LIST
77828: LIST
77829: PUSH
77830: EMPTY
77831: LIST
77832: LIST
77833: LIST
77834: LIST
77835: LIST
77836: LIST
77837: LIST
77838: LIST
77839: LIST
77840: LIST
77841: LIST
77842: LIST
77843: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
77844: LD_ADDR_VAR 0 41
77848: PUSH
77849: LD_INT 0
77851: PUSH
77852: LD_INT 2
77854: NEG
77855: PUSH
77856: EMPTY
77857: LIST
77858: LIST
77859: PUSH
77860: LD_INT 1
77862: NEG
77863: PUSH
77864: LD_INT 3
77866: NEG
77867: PUSH
77868: EMPTY
77869: LIST
77870: LIST
77871: PUSH
77872: LD_INT 1
77874: PUSH
77875: LD_INT 2
77877: NEG
77878: PUSH
77879: EMPTY
77880: LIST
77881: LIST
77882: PUSH
77883: EMPTY
77884: LIST
77885: LIST
77886: LIST
77887: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
77888: LD_ADDR_VAR 0 42
77892: PUSH
77893: LD_INT 2
77895: PUSH
77896: LD_INT 0
77898: PUSH
77899: EMPTY
77900: LIST
77901: LIST
77902: PUSH
77903: LD_INT 2
77905: PUSH
77906: LD_INT 1
77908: NEG
77909: PUSH
77910: EMPTY
77911: LIST
77912: LIST
77913: PUSH
77914: LD_INT 3
77916: PUSH
77917: LD_INT 1
77919: PUSH
77920: EMPTY
77921: LIST
77922: LIST
77923: PUSH
77924: EMPTY
77925: LIST
77926: LIST
77927: LIST
77928: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
77929: LD_ADDR_VAR 0 43
77933: PUSH
77934: LD_INT 2
77936: PUSH
77937: LD_INT 2
77939: PUSH
77940: EMPTY
77941: LIST
77942: LIST
77943: PUSH
77944: LD_INT 3
77946: PUSH
77947: LD_INT 2
77949: PUSH
77950: EMPTY
77951: LIST
77952: LIST
77953: PUSH
77954: LD_INT 2
77956: PUSH
77957: LD_INT 3
77959: PUSH
77960: EMPTY
77961: LIST
77962: LIST
77963: PUSH
77964: EMPTY
77965: LIST
77966: LIST
77967: LIST
77968: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
77969: LD_ADDR_VAR 0 44
77973: PUSH
77974: LD_INT 0
77976: PUSH
77977: LD_INT 2
77979: PUSH
77980: EMPTY
77981: LIST
77982: LIST
77983: PUSH
77984: LD_INT 1
77986: PUSH
77987: LD_INT 3
77989: PUSH
77990: EMPTY
77991: LIST
77992: LIST
77993: PUSH
77994: LD_INT 1
77996: NEG
77997: PUSH
77998: LD_INT 2
78000: PUSH
78001: EMPTY
78002: LIST
78003: LIST
78004: PUSH
78005: EMPTY
78006: LIST
78007: LIST
78008: LIST
78009: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
78010: LD_ADDR_VAR 0 45
78014: PUSH
78015: LD_INT 2
78017: NEG
78018: PUSH
78019: LD_INT 0
78021: PUSH
78022: EMPTY
78023: LIST
78024: LIST
78025: PUSH
78026: LD_INT 2
78028: NEG
78029: PUSH
78030: LD_INT 1
78032: PUSH
78033: EMPTY
78034: LIST
78035: LIST
78036: PUSH
78037: LD_INT 3
78039: NEG
78040: PUSH
78041: LD_INT 1
78043: NEG
78044: PUSH
78045: EMPTY
78046: LIST
78047: LIST
78048: PUSH
78049: EMPTY
78050: LIST
78051: LIST
78052: LIST
78053: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
78054: LD_ADDR_VAR 0 46
78058: PUSH
78059: LD_INT 2
78061: NEG
78062: PUSH
78063: LD_INT 2
78065: NEG
78066: PUSH
78067: EMPTY
78068: LIST
78069: LIST
78070: PUSH
78071: LD_INT 2
78073: NEG
78074: PUSH
78075: LD_INT 3
78077: NEG
78078: PUSH
78079: EMPTY
78080: LIST
78081: LIST
78082: PUSH
78083: LD_INT 3
78085: NEG
78086: PUSH
78087: LD_INT 2
78089: NEG
78090: PUSH
78091: EMPTY
78092: LIST
78093: LIST
78094: PUSH
78095: EMPTY
78096: LIST
78097: LIST
78098: LIST
78099: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
78100: LD_ADDR_VAR 0 47
78104: PUSH
78105: LD_INT 2
78107: NEG
78108: PUSH
78109: LD_INT 3
78111: NEG
78112: PUSH
78113: EMPTY
78114: LIST
78115: LIST
78116: PUSH
78117: LD_INT 1
78119: NEG
78120: PUSH
78121: LD_INT 3
78123: NEG
78124: PUSH
78125: EMPTY
78126: LIST
78127: LIST
78128: PUSH
78129: EMPTY
78130: LIST
78131: LIST
78132: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
78133: LD_ADDR_VAR 0 48
78137: PUSH
78138: LD_INT 1
78140: PUSH
78141: LD_INT 2
78143: NEG
78144: PUSH
78145: EMPTY
78146: LIST
78147: LIST
78148: PUSH
78149: LD_INT 2
78151: PUSH
78152: LD_INT 1
78154: NEG
78155: PUSH
78156: EMPTY
78157: LIST
78158: LIST
78159: PUSH
78160: EMPTY
78161: LIST
78162: LIST
78163: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
78164: LD_ADDR_VAR 0 49
78168: PUSH
78169: LD_INT 3
78171: PUSH
78172: LD_INT 1
78174: PUSH
78175: EMPTY
78176: LIST
78177: LIST
78178: PUSH
78179: LD_INT 3
78181: PUSH
78182: LD_INT 2
78184: PUSH
78185: EMPTY
78186: LIST
78187: LIST
78188: PUSH
78189: EMPTY
78190: LIST
78191: LIST
78192: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
78193: LD_ADDR_VAR 0 50
78197: PUSH
78198: LD_INT 2
78200: PUSH
78201: LD_INT 3
78203: PUSH
78204: EMPTY
78205: LIST
78206: LIST
78207: PUSH
78208: LD_INT 1
78210: PUSH
78211: LD_INT 3
78213: PUSH
78214: EMPTY
78215: LIST
78216: LIST
78217: PUSH
78218: EMPTY
78219: LIST
78220: LIST
78221: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
78222: LD_ADDR_VAR 0 51
78226: PUSH
78227: LD_INT 1
78229: NEG
78230: PUSH
78231: LD_INT 2
78233: PUSH
78234: EMPTY
78235: LIST
78236: LIST
78237: PUSH
78238: LD_INT 2
78240: NEG
78241: PUSH
78242: LD_INT 1
78244: PUSH
78245: EMPTY
78246: LIST
78247: LIST
78248: PUSH
78249: EMPTY
78250: LIST
78251: LIST
78252: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
78253: LD_ADDR_VAR 0 52
78257: PUSH
78258: LD_INT 3
78260: NEG
78261: PUSH
78262: LD_INT 1
78264: NEG
78265: PUSH
78266: EMPTY
78267: LIST
78268: LIST
78269: PUSH
78270: LD_INT 3
78272: NEG
78273: PUSH
78274: LD_INT 2
78276: NEG
78277: PUSH
78278: EMPTY
78279: LIST
78280: LIST
78281: PUSH
78282: EMPTY
78283: LIST
78284: LIST
78285: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
78286: LD_ADDR_VAR 0 53
78290: PUSH
78291: LD_INT 1
78293: NEG
78294: PUSH
78295: LD_INT 3
78297: NEG
78298: PUSH
78299: EMPTY
78300: LIST
78301: LIST
78302: PUSH
78303: LD_INT 0
78305: PUSH
78306: LD_INT 3
78308: NEG
78309: PUSH
78310: EMPTY
78311: LIST
78312: LIST
78313: PUSH
78314: LD_INT 1
78316: PUSH
78317: LD_INT 2
78319: NEG
78320: PUSH
78321: EMPTY
78322: LIST
78323: LIST
78324: PUSH
78325: EMPTY
78326: LIST
78327: LIST
78328: LIST
78329: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
78330: LD_ADDR_VAR 0 54
78334: PUSH
78335: LD_INT 2
78337: PUSH
78338: LD_INT 1
78340: NEG
78341: PUSH
78342: EMPTY
78343: LIST
78344: LIST
78345: PUSH
78346: LD_INT 3
78348: PUSH
78349: LD_INT 0
78351: PUSH
78352: EMPTY
78353: LIST
78354: LIST
78355: PUSH
78356: LD_INT 3
78358: PUSH
78359: LD_INT 1
78361: PUSH
78362: EMPTY
78363: LIST
78364: LIST
78365: PUSH
78366: EMPTY
78367: LIST
78368: LIST
78369: LIST
78370: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
78371: LD_ADDR_VAR 0 55
78375: PUSH
78376: LD_INT 3
78378: PUSH
78379: LD_INT 2
78381: PUSH
78382: EMPTY
78383: LIST
78384: LIST
78385: PUSH
78386: LD_INT 3
78388: PUSH
78389: LD_INT 3
78391: PUSH
78392: EMPTY
78393: LIST
78394: LIST
78395: PUSH
78396: LD_INT 2
78398: PUSH
78399: LD_INT 3
78401: PUSH
78402: EMPTY
78403: LIST
78404: LIST
78405: PUSH
78406: EMPTY
78407: LIST
78408: LIST
78409: LIST
78410: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
78411: LD_ADDR_VAR 0 56
78415: PUSH
78416: LD_INT 1
78418: PUSH
78419: LD_INT 3
78421: PUSH
78422: EMPTY
78423: LIST
78424: LIST
78425: PUSH
78426: LD_INT 0
78428: PUSH
78429: LD_INT 3
78431: PUSH
78432: EMPTY
78433: LIST
78434: LIST
78435: PUSH
78436: LD_INT 1
78438: NEG
78439: PUSH
78440: LD_INT 2
78442: PUSH
78443: EMPTY
78444: LIST
78445: LIST
78446: PUSH
78447: EMPTY
78448: LIST
78449: LIST
78450: LIST
78451: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
78452: LD_ADDR_VAR 0 57
78456: PUSH
78457: LD_INT 2
78459: NEG
78460: PUSH
78461: LD_INT 1
78463: PUSH
78464: EMPTY
78465: LIST
78466: LIST
78467: PUSH
78468: LD_INT 3
78470: NEG
78471: PUSH
78472: LD_INT 0
78474: PUSH
78475: EMPTY
78476: LIST
78477: LIST
78478: PUSH
78479: LD_INT 3
78481: NEG
78482: PUSH
78483: LD_INT 1
78485: NEG
78486: PUSH
78487: EMPTY
78488: LIST
78489: LIST
78490: PUSH
78491: EMPTY
78492: LIST
78493: LIST
78494: LIST
78495: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
78496: LD_ADDR_VAR 0 58
78500: PUSH
78501: LD_INT 2
78503: NEG
78504: PUSH
78505: LD_INT 3
78507: NEG
78508: PUSH
78509: EMPTY
78510: LIST
78511: LIST
78512: PUSH
78513: LD_INT 3
78515: NEG
78516: PUSH
78517: LD_INT 2
78519: NEG
78520: PUSH
78521: EMPTY
78522: LIST
78523: LIST
78524: PUSH
78525: LD_INT 3
78527: NEG
78528: PUSH
78529: LD_INT 3
78531: NEG
78532: PUSH
78533: EMPTY
78534: LIST
78535: LIST
78536: PUSH
78537: EMPTY
78538: LIST
78539: LIST
78540: LIST
78541: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
78542: LD_ADDR_VAR 0 59
78546: PUSH
78547: LD_INT 1
78549: NEG
78550: PUSH
78551: LD_INT 2
78553: NEG
78554: PUSH
78555: EMPTY
78556: LIST
78557: LIST
78558: PUSH
78559: LD_INT 0
78561: PUSH
78562: LD_INT 2
78564: NEG
78565: PUSH
78566: EMPTY
78567: LIST
78568: LIST
78569: PUSH
78570: LD_INT 1
78572: PUSH
78573: LD_INT 1
78575: NEG
78576: PUSH
78577: EMPTY
78578: LIST
78579: LIST
78580: PUSH
78581: EMPTY
78582: LIST
78583: LIST
78584: LIST
78585: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
78586: LD_ADDR_VAR 0 60
78590: PUSH
78591: LD_INT 1
78593: PUSH
78594: LD_INT 1
78596: NEG
78597: PUSH
78598: EMPTY
78599: LIST
78600: LIST
78601: PUSH
78602: LD_INT 2
78604: PUSH
78605: LD_INT 0
78607: PUSH
78608: EMPTY
78609: LIST
78610: LIST
78611: PUSH
78612: LD_INT 2
78614: PUSH
78615: LD_INT 1
78617: PUSH
78618: EMPTY
78619: LIST
78620: LIST
78621: PUSH
78622: EMPTY
78623: LIST
78624: LIST
78625: LIST
78626: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
78627: LD_ADDR_VAR 0 61
78631: PUSH
78632: LD_INT 2
78634: PUSH
78635: LD_INT 1
78637: PUSH
78638: EMPTY
78639: LIST
78640: LIST
78641: PUSH
78642: LD_INT 2
78644: PUSH
78645: LD_INT 2
78647: PUSH
78648: EMPTY
78649: LIST
78650: LIST
78651: PUSH
78652: LD_INT 1
78654: PUSH
78655: LD_INT 2
78657: PUSH
78658: EMPTY
78659: LIST
78660: LIST
78661: PUSH
78662: EMPTY
78663: LIST
78664: LIST
78665: LIST
78666: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
78667: LD_ADDR_VAR 0 62
78671: PUSH
78672: LD_INT 1
78674: PUSH
78675: LD_INT 2
78677: PUSH
78678: EMPTY
78679: LIST
78680: LIST
78681: PUSH
78682: LD_INT 0
78684: PUSH
78685: LD_INT 2
78687: PUSH
78688: EMPTY
78689: LIST
78690: LIST
78691: PUSH
78692: LD_INT 1
78694: NEG
78695: PUSH
78696: LD_INT 1
78698: PUSH
78699: EMPTY
78700: LIST
78701: LIST
78702: PUSH
78703: EMPTY
78704: LIST
78705: LIST
78706: LIST
78707: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
78708: LD_ADDR_VAR 0 63
78712: PUSH
78713: LD_INT 1
78715: NEG
78716: PUSH
78717: LD_INT 1
78719: PUSH
78720: EMPTY
78721: LIST
78722: LIST
78723: PUSH
78724: LD_INT 2
78726: NEG
78727: PUSH
78728: LD_INT 0
78730: PUSH
78731: EMPTY
78732: LIST
78733: LIST
78734: PUSH
78735: LD_INT 2
78737: NEG
78738: PUSH
78739: LD_INT 1
78741: NEG
78742: PUSH
78743: EMPTY
78744: LIST
78745: LIST
78746: PUSH
78747: EMPTY
78748: LIST
78749: LIST
78750: LIST
78751: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78752: LD_ADDR_VAR 0 64
78756: PUSH
78757: LD_INT 1
78759: NEG
78760: PUSH
78761: LD_INT 2
78763: NEG
78764: PUSH
78765: EMPTY
78766: LIST
78767: LIST
78768: PUSH
78769: LD_INT 2
78771: NEG
78772: PUSH
78773: LD_INT 1
78775: NEG
78776: PUSH
78777: EMPTY
78778: LIST
78779: LIST
78780: PUSH
78781: LD_INT 2
78783: NEG
78784: PUSH
78785: LD_INT 2
78787: NEG
78788: PUSH
78789: EMPTY
78790: LIST
78791: LIST
78792: PUSH
78793: EMPTY
78794: LIST
78795: LIST
78796: LIST
78797: ST_TO_ADDR
// end ; 2 :
78798: GO 82064
78800: LD_INT 2
78802: DOUBLE
78803: EQUAL
78804: IFTRUE 78808
78806: GO 82063
78808: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
78809: LD_ADDR_VAR 0 29
78813: PUSH
78814: LD_INT 4
78816: PUSH
78817: LD_INT 0
78819: PUSH
78820: EMPTY
78821: LIST
78822: LIST
78823: PUSH
78824: LD_INT 4
78826: PUSH
78827: LD_INT 1
78829: NEG
78830: PUSH
78831: EMPTY
78832: LIST
78833: LIST
78834: PUSH
78835: LD_INT 5
78837: PUSH
78838: LD_INT 0
78840: PUSH
78841: EMPTY
78842: LIST
78843: LIST
78844: PUSH
78845: LD_INT 5
78847: PUSH
78848: LD_INT 1
78850: PUSH
78851: EMPTY
78852: LIST
78853: LIST
78854: PUSH
78855: LD_INT 4
78857: PUSH
78858: LD_INT 1
78860: PUSH
78861: EMPTY
78862: LIST
78863: LIST
78864: PUSH
78865: LD_INT 3
78867: PUSH
78868: LD_INT 0
78870: PUSH
78871: EMPTY
78872: LIST
78873: LIST
78874: PUSH
78875: LD_INT 3
78877: PUSH
78878: LD_INT 1
78880: NEG
78881: PUSH
78882: EMPTY
78883: LIST
78884: LIST
78885: PUSH
78886: LD_INT 3
78888: PUSH
78889: LD_INT 2
78891: NEG
78892: PUSH
78893: EMPTY
78894: LIST
78895: LIST
78896: PUSH
78897: LD_INT 5
78899: PUSH
78900: LD_INT 2
78902: PUSH
78903: EMPTY
78904: LIST
78905: LIST
78906: PUSH
78907: LD_INT 3
78909: PUSH
78910: LD_INT 3
78912: PUSH
78913: EMPTY
78914: LIST
78915: LIST
78916: PUSH
78917: LD_INT 3
78919: PUSH
78920: LD_INT 2
78922: PUSH
78923: EMPTY
78924: LIST
78925: LIST
78926: PUSH
78927: LD_INT 4
78929: PUSH
78930: LD_INT 3
78932: PUSH
78933: EMPTY
78934: LIST
78935: LIST
78936: PUSH
78937: LD_INT 4
78939: PUSH
78940: LD_INT 4
78942: PUSH
78943: EMPTY
78944: LIST
78945: LIST
78946: PUSH
78947: LD_INT 3
78949: PUSH
78950: LD_INT 4
78952: PUSH
78953: EMPTY
78954: LIST
78955: LIST
78956: PUSH
78957: LD_INT 2
78959: PUSH
78960: LD_INT 3
78962: PUSH
78963: EMPTY
78964: LIST
78965: LIST
78966: PUSH
78967: LD_INT 2
78969: PUSH
78970: LD_INT 2
78972: PUSH
78973: EMPTY
78974: LIST
78975: LIST
78976: PUSH
78977: LD_INT 4
78979: PUSH
78980: LD_INT 2
78982: PUSH
78983: EMPTY
78984: LIST
78985: LIST
78986: PUSH
78987: LD_INT 2
78989: PUSH
78990: LD_INT 4
78992: PUSH
78993: EMPTY
78994: LIST
78995: LIST
78996: PUSH
78997: LD_INT 0
78999: PUSH
79000: LD_INT 4
79002: PUSH
79003: EMPTY
79004: LIST
79005: LIST
79006: PUSH
79007: LD_INT 0
79009: PUSH
79010: LD_INT 3
79012: PUSH
79013: EMPTY
79014: LIST
79015: LIST
79016: PUSH
79017: LD_INT 1
79019: PUSH
79020: LD_INT 4
79022: PUSH
79023: EMPTY
79024: LIST
79025: LIST
79026: PUSH
79027: LD_INT 1
79029: PUSH
79030: LD_INT 5
79032: PUSH
79033: EMPTY
79034: LIST
79035: LIST
79036: PUSH
79037: LD_INT 0
79039: PUSH
79040: LD_INT 5
79042: PUSH
79043: EMPTY
79044: LIST
79045: LIST
79046: PUSH
79047: LD_INT 1
79049: NEG
79050: PUSH
79051: LD_INT 4
79053: PUSH
79054: EMPTY
79055: LIST
79056: LIST
79057: PUSH
79058: LD_INT 1
79060: NEG
79061: PUSH
79062: LD_INT 3
79064: PUSH
79065: EMPTY
79066: LIST
79067: LIST
79068: PUSH
79069: LD_INT 2
79071: PUSH
79072: LD_INT 5
79074: PUSH
79075: EMPTY
79076: LIST
79077: LIST
79078: PUSH
79079: LD_INT 2
79081: NEG
79082: PUSH
79083: LD_INT 3
79085: PUSH
79086: EMPTY
79087: LIST
79088: LIST
79089: PUSH
79090: LD_INT 3
79092: NEG
79093: PUSH
79094: LD_INT 0
79096: PUSH
79097: EMPTY
79098: LIST
79099: LIST
79100: PUSH
79101: LD_INT 3
79103: NEG
79104: PUSH
79105: LD_INT 1
79107: NEG
79108: PUSH
79109: EMPTY
79110: LIST
79111: LIST
79112: PUSH
79113: LD_INT 2
79115: NEG
79116: PUSH
79117: LD_INT 0
79119: PUSH
79120: EMPTY
79121: LIST
79122: LIST
79123: PUSH
79124: LD_INT 2
79126: NEG
79127: PUSH
79128: LD_INT 1
79130: PUSH
79131: EMPTY
79132: LIST
79133: LIST
79134: PUSH
79135: LD_INT 3
79137: NEG
79138: PUSH
79139: LD_INT 1
79141: PUSH
79142: EMPTY
79143: LIST
79144: LIST
79145: PUSH
79146: LD_INT 4
79148: NEG
79149: PUSH
79150: LD_INT 0
79152: PUSH
79153: EMPTY
79154: LIST
79155: LIST
79156: PUSH
79157: LD_INT 4
79159: NEG
79160: PUSH
79161: LD_INT 1
79163: NEG
79164: PUSH
79165: EMPTY
79166: LIST
79167: LIST
79168: PUSH
79169: LD_INT 4
79171: NEG
79172: PUSH
79173: LD_INT 2
79175: NEG
79176: PUSH
79177: EMPTY
79178: LIST
79179: LIST
79180: PUSH
79181: LD_INT 2
79183: NEG
79184: PUSH
79185: LD_INT 2
79187: PUSH
79188: EMPTY
79189: LIST
79190: LIST
79191: PUSH
79192: LD_INT 4
79194: NEG
79195: PUSH
79196: LD_INT 4
79198: NEG
79199: PUSH
79200: EMPTY
79201: LIST
79202: LIST
79203: PUSH
79204: LD_INT 4
79206: NEG
79207: PUSH
79208: LD_INT 5
79210: NEG
79211: PUSH
79212: EMPTY
79213: LIST
79214: LIST
79215: PUSH
79216: LD_INT 3
79218: NEG
79219: PUSH
79220: LD_INT 4
79222: NEG
79223: PUSH
79224: EMPTY
79225: LIST
79226: LIST
79227: PUSH
79228: LD_INT 3
79230: NEG
79231: PUSH
79232: LD_INT 3
79234: NEG
79235: PUSH
79236: EMPTY
79237: LIST
79238: LIST
79239: PUSH
79240: LD_INT 4
79242: NEG
79243: PUSH
79244: LD_INT 3
79246: NEG
79247: PUSH
79248: EMPTY
79249: LIST
79250: LIST
79251: PUSH
79252: LD_INT 5
79254: NEG
79255: PUSH
79256: LD_INT 4
79258: NEG
79259: PUSH
79260: EMPTY
79261: LIST
79262: LIST
79263: PUSH
79264: LD_INT 5
79266: NEG
79267: PUSH
79268: LD_INT 5
79270: NEG
79271: PUSH
79272: EMPTY
79273: LIST
79274: LIST
79275: PUSH
79276: LD_INT 3
79278: NEG
79279: PUSH
79280: LD_INT 5
79282: NEG
79283: PUSH
79284: EMPTY
79285: LIST
79286: LIST
79287: PUSH
79288: LD_INT 5
79290: NEG
79291: PUSH
79292: LD_INT 3
79294: NEG
79295: PUSH
79296: EMPTY
79297: LIST
79298: LIST
79299: PUSH
79300: EMPTY
79301: LIST
79302: LIST
79303: LIST
79304: LIST
79305: LIST
79306: LIST
79307: LIST
79308: LIST
79309: LIST
79310: LIST
79311: LIST
79312: LIST
79313: LIST
79314: LIST
79315: LIST
79316: LIST
79317: LIST
79318: LIST
79319: LIST
79320: LIST
79321: LIST
79322: LIST
79323: LIST
79324: LIST
79325: LIST
79326: LIST
79327: LIST
79328: LIST
79329: LIST
79330: LIST
79331: LIST
79332: LIST
79333: LIST
79334: LIST
79335: LIST
79336: LIST
79337: LIST
79338: LIST
79339: LIST
79340: LIST
79341: LIST
79342: LIST
79343: LIST
79344: LIST
79345: LIST
79346: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
79347: LD_ADDR_VAR 0 30
79351: PUSH
79352: LD_INT 4
79354: PUSH
79355: LD_INT 4
79357: PUSH
79358: EMPTY
79359: LIST
79360: LIST
79361: PUSH
79362: LD_INT 4
79364: PUSH
79365: LD_INT 3
79367: PUSH
79368: EMPTY
79369: LIST
79370: LIST
79371: PUSH
79372: LD_INT 5
79374: PUSH
79375: LD_INT 4
79377: PUSH
79378: EMPTY
79379: LIST
79380: LIST
79381: PUSH
79382: LD_INT 5
79384: PUSH
79385: LD_INT 5
79387: PUSH
79388: EMPTY
79389: LIST
79390: LIST
79391: PUSH
79392: LD_INT 4
79394: PUSH
79395: LD_INT 5
79397: PUSH
79398: EMPTY
79399: LIST
79400: LIST
79401: PUSH
79402: LD_INT 3
79404: PUSH
79405: LD_INT 4
79407: PUSH
79408: EMPTY
79409: LIST
79410: LIST
79411: PUSH
79412: LD_INT 3
79414: PUSH
79415: LD_INT 3
79417: PUSH
79418: EMPTY
79419: LIST
79420: LIST
79421: PUSH
79422: LD_INT 5
79424: PUSH
79425: LD_INT 3
79427: PUSH
79428: EMPTY
79429: LIST
79430: LIST
79431: PUSH
79432: LD_INT 3
79434: PUSH
79435: LD_INT 5
79437: PUSH
79438: EMPTY
79439: LIST
79440: LIST
79441: PUSH
79442: LD_INT 0
79444: PUSH
79445: LD_INT 3
79447: PUSH
79448: EMPTY
79449: LIST
79450: LIST
79451: PUSH
79452: LD_INT 0
79454: PUSH
79455: LD_INT 2
79457: PUSH
79458: EMPTY
79459: LIST
79460: LIST
79461: PUSH
79462: LD_INT 1
79464: PUSH
79465: LD_INT 3
79467: PUSH
79468: EMPTY
79469: LIST
79470: LIST
79471: PUSH
79472: LD_INT 1
79474: PUSH
79475: LD_INT 4
79477: PUSH
79478: EMPTY
79479: LIST
79480: LIST
79481: PUSH
79482: LD_INT 0
79484: PUSH
79485: LD_INT 4
79487: PUSH
79488: EMPTY
79489: LIST
79490: LIST
79491: PUSH
79492: LD_INT 1
79494: NEG
79495: PUSH
79496: LD_INT 3
79498: PUSH
79499: EMPTY
79500: LIST
79501: LIST
79502: PUSH
79503: LD_INT 1
79505: NEG
79506: PUSH
79507: LD_INT 2
79509: PUSH
79510: EMPTY
79511: LIST
79512: LIST
79513: PUSH
79514: LD_INT 2
79516: PUSH
79517: LD_INT 4
79519: PUSH
79520: EMPTY
79521: LIST
79522: LIST
79523: PUSH
79524: LD_INT 2
79526: NEG
79527: PUSH
79528: LD_INT 2
79530: PUSH
79531: EMPTY
79532: LIST
79533: LIST
79534: PUSH
79535: LD_INT 4
79537: NEG
79538: PUSH
79539: LD_INT 0
79541: PUSH
79542: EMPTY
79543: LIST
79544: LIST
79545: PUSH
79546: LD_INT 4
79548: NEG
79549: PUSH
79550: LD_INT 1
79552: NEG
79553: PUSH
79554: EMPTY
79555: LIST
79556: LIST
79557: PUSH
79558: LD_INT 3
79560: NEG
79561: PUSH
79562: LD_INT 0
79564: PUSH
79565: EMPTY
79566: LIST
79567: LIST
79568: PUSH
79569: LD_INT 3
79571: NEG
79572: PUSH
79573: LD_INT 1
79575: PUSH
79576: EMPTY
79577: LIST
79578: LIST
79579: PUSH
79580: LD_INT 4
79582: NEG
79583: PUSH
79584: LD_INT 1
79586: PUSH
79587: EMPTY
79588: LIST
79589: LIST
79590: PUSH
79591: LD_INT 5
79593: NEG
79594: PUSH
79595: LD_INT 0
79597: PUSH
79598: EMPTY
79599: LIST
79600: LIST
79601: PUSH
79602: LD_INT 5
79604: NEG
79605: PUSH
79606: LD_INT 1
79608: NEG
79609: PUSH
79610: EMPTY
79611: LIST
79612: LIST
79613: PUSH
79614: LD_INT 5
79616: NEG
79617: PUSH
79618: LD_INT 2
79620: NEG
79621: PUSH
79622: EMPTY
79623: LIST
79624: LIST
79625: PUSH
79626: LD_INT 3
79628: NEG
79629: PUSH
79630: LD_INT 2
79632: PUSH
79633: EMPTY
79634: LIST
79635: LIST
79636: PUSH
79637: LD_INT 3
79639: NEG
79640: PUSH
79641: LD_INT 3
79643: NEG
79644: PUSH
79645: EMPTY
79646: LIST
79647: LIST
79648: PUSH
79649: LD_INT 3
79651: NEG
79652: PUSH
79653: LD_INT 4
79655: NEG
79656: PUSH
79657: EMPTY
79658: LIST
79659: LIST
79660: PUSH
79661: LD_INT 2
79663: NEG
79664: PUSH
79665: LD_INT 3
79667: NEG
79668: PUSH
79669: EMPTY
79670: LIST
79671: LIST
79672: PUSH
79673: LD_INT 2
79675: NEG
79676: PUSH
79677: LD_INT 2
79679: NEG
79680: PUSH
79681: EMPTY
79682: LIST
79683: LIST
79684: PUSH
79685: LD_INT 3
79687: NEG
79688: PUSH
79689: LD_INT 2
79691: NEG
79692: PUSH
79693: EMPTY
79694: LIST
79695: LIST
79696: PUSH
79697: LD_INT 4
79699: NEG
79700: PUSH
79701: LD_INT 3
79703: NEG
79704: PUSH
79705: EMPTY
79706: LIST
79707: LIST
79708: PUSH
79709: LD_INT 4
79711: NEG
79712: PUSH
79713: LD_INT 4
79715: NEG
79716: PUSH
79717: EMPTY
79718: LIST
79719: LIST
79720: PUSH
79721: LD_INT 2
79723: NEG
79724: PUSH
79725: LD_INT 4
79727: NEG
79728: PUSH
79729: EMPTY
79730: LIST
79731: LIST
79732: PUSH
79733: LD_INT 4
79735: NEG
79736: PUSH
79737: LD_INT 2
79739: NEG
79740: PUSH
79741: EMPTY
79742: LIST
79743: LIST
79744: PUSH
79745: LD_INT 0
79747: PUSH
79748: LD_INT 4
79750: NEG
79751: PUSH
79752: EMPTY
79753: LIST
79754: LIST
79755: PUSH
79756: LD_INT 0
79758: PUSH
79759: LD_INT 5
79761: NEG
79762: PUSH
79763: EMPTY
79764: LIST
79765: LIST
79766: PUSH
79767: LD_INT 1
79769: PUSH
79770: LD_INT 4
79772: NEG
79773: PUSH
79774: EMPTY
79775: LIST
79776: LIST
79777: PUSH
79778: LD_INT 1
79780: PUSH
79781: LD_INT 3
79783: NEG
79784: PUSH
79785: EMPTY
79786: LIST
79787: LIST
79788: PUSH
79789: LD_INT 0
79791: PUSH
79792: LD_INT 3
79794: NEG
79795: PUSH
79796: EMPTY
79797: LIST
79798: LIST
79799: PUSH
79800: LD_INT 1
79802: NEG
79803: PUSH
79804: LD_INT 4
79806: NEG
79807: PUSH
79808: EMPTY
79809: LIST
79810: LIST
79811: PUSH
79812: LD_INT 1
79814: NEG
79815: PUSH
79816: LD_INT 5
79818: NEG
79819: PUSH
79820: EMPTY
79821: LIST
79822: LIST
79823: PUSH
79824: LD_INT 2
79826: PUSH
79827: LD_INT 3
79829: NEG
79830: PUSH
79831: EMPTY
79832: LIST
79833: LIST
79834: PUSH
79835: LD_INT 2
79837: NEG
79838: PUSH
79839: LD_INT 5
79841: NEG
79842: PUSH
79843: EMPTY
79844: LIST
79845: LIST
79846: PUSH
79847: EMPTY
79848: LIST
79849: LIST
79850: LIST
79851: LIST
79852: LIST
79853: LIST
79854: LIST
79855: LIST
79856: LIST
79857: LIST
79858: LIST
79859: LIST
79860: LIST
79861: LIST
79862: LIST
79863: LIST
79864: LIST
79865: LIST
79866: LIST
79867: LIST
79868: LIST
79869: LIST
79870: LIST
79871: LIST
79872: LIST
79873: LIST
79874: LIST
79875: LIST
79876: LIST
79877: LIST
79878: LIST
79879: LIST
79880: LIST
79881: LIST
79882: LIST
79883: LIST
79884: LIST
79885: LIST
79886: LIST
79887: LIST
79888: LIST
79889: LIST
79890: LIST
79891: LIST
79892: LIST
79893: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
79894: LD_ADDR_VAR 0 31
79898: PUSH
79899: LD_INT 0
79901: PUSH
79902: LD_INT 4
79904: PUSH
79905: EMPTY
79906: LIST
79907: LIST
79908: PUSH
79909: LD_INT 0
79911: PUSH
79912: LD_INT 3
79914: PUSH
79915: EMPTY
79916: LIST
79917: LIST
79918: PUSH
79919: LD_INT 1
79921: PUSH
79922: LD_INT 4
79924: PUSH
79925: EMPTY
79926: LIST
79927: LIST
79928: PUSH
79929: LD_INT 1
79931: PUSH
79932: LD_INT 5
79934: PUSH
79935: EMPTY
79936: LIST
79937: LIST
79938: PUSH
79939: LD_INT 0
79941: PUSH
79942: LD_INT 5
79944: PUSH
79945: EMPTY
79946: LIST
79947: LIST
79948: PUSH
79949: LD_INT 1
79951: NEG
79952: PUSH
79953: LD_INT 4
79955: PUSH
79956: EMPTY
79957: LIST
79958: LIST
79959: PUSH
79960: LD_INT 1
79962: NEG
79963: PUSH
79964: LD_INT 3
79966: PUSH
79967: EMPTY
79968: LIST
79969: LIST
79970: PUSH
79971: LD_INT 2
79973: PUSH
79974: LD_INT 5
79976: PUSH
79977: EMPTY
79978: LIST
79979: LIST
79980: PUSH
79981: LD_INT 2
79983: NEG
79984: PUSH
79985: LD_INT 3
79987: PUSH
79988: EMPTY
79989: LIST
79990: LIST
79991: PUSH
79992: LD_INT 3
79994: NEG
79995: PUSH
79996: LD_INT 0
79998: PUSH
79999: EMPTY
80000: LIST
80001: LIST
80002: PUSH
80003: LD_INT 3
80005: NEG
80006: PUSH
80007: LD_INT 1
80009: NEG
80010: PUSH
80011: EMPTY
80012: LIST
80013: LIST
80014: PUSH
80015: LD_INT 2
80017: NEG
80018: PUSH
80019: LD_INT 0
80021: PUSH
80022: EMPTY
80023: LIST
80024: LIST
80025: PUSH
80026: LD_INT 2
80028: NEG
80029: PUSH
80030: LD_INT 1
80032: PUSH
80033: EMPTY
80034: LIST
80035: LIST
80036: PUSH
80037: LD_INT 3
80039: NEG
80040: PUSH
80041: LD_INT 1
80043: PUSH
80044: EMPTY
80045: LIST
80046: LIST
80047: PUSH
80048: LD_INT 4
80050: NEG
80051: PUSH
80052: LD_INT 0
80054: PUSH
80055: EMPTY
80056: LIST
80057: LIST
80058: PUSH
80059: LD_INT 4
80061: NEG
80062: PUSH
80063: LD_INT 1
80065: NEG
80066: PUSH
80067: EMPTY
80068: LIST
80069: LIST
80070: PUSH
80071: LD_INT 4
80073: NEG
80074: PUSH
80075: LD_INT 2
80077: NEG
80078: PUSH
80079: EMPTY
80080: LIST
80081: LIST
80082: PUSH
80083: LD_INT 2
80085: NEG
80086: PUSH
80087: LD_INT 2
80089: PUSH
80090: EMPTY
80091: LIST
80092: LIST
80093: PUSH
80094: LD_INT 4
80096: NEG
80097: PUSH
80098: LD_INT 4
80100: NEG
80101: PUSH
80102: EMPTY
80103: LIST
80104: LIST
80105: PUSH
80106: LD_INT 4
80108: NEG
80109: PUSH
80110: LD_INT 5
80112: NEG
80113: PUSH
80114: EMPTY
80115: LIST
80116: LIST
80117: PUSH
80118: LD_INT 3
80120: NEG
80121: PUSH
80122: LD_INT 4
80124: NEG
80125: PUSH
80126: EMPTY
80127: LIST
80128: LIST
80129: PUSH
80130: LD_INT 3
80132: NEG
80133: PUSH
80134: LD_INT 3
80136: NEG
80137: PUSH
80138: EMPTY
80139: LIST
80140: LIST
80141: PUSH
80142: LD_INT 4
80144: NEG
80145: PUSH
80146: LD_INT 3
80148: NEG
80149: PUSH
80150: EMPTY
80151: LIST
80152: LIST
80153: PUSH
80154: LD_INT 5
80156: NEG
80157: PUSH
80158: LD_INT 4
80160: NEG
80161: PUSH
80162: EMPTY
80163: LIST
80164: LIST
80165: PUSH
80166: LD_INT 5
80168: NEG
80169: PUSH
80170: LD_INT 5
80172: NEG
80173: PUSH
80174: EMPTY
80175: LIST
80176: LIST
80177: PUSH
80178: LD_INT 3
80180: NEG
80181: PUSH
80182: LD_INT 5
80184: NEG
80185: PUSH
80186: EMPTY
80187: LIST
80188: LIST
80189: PUSH
80190: LD_INT 5
80192: NEG
80193: PUSH
80194: LD_INT 3
80196: NEG
80197: PUSH
80198: EMPTY
80199: LIST
80200: LIST
80201: PUSH
80202: LD_INT 0
80204: PUSH
80205: LD_INT 3
80207: NEG
80208: PUSH
80209: EMPTY
80210: LIST
80211: LIST
80212: PUSH
80213: LD_INT 0
80215: PUSH
80216: LD_INT 4
80218: NEG
80219: PUSH
80220: EMPTY
80221: LIST
80222: LIST
80223: PUSH
80224: LD_INT 1
80226: PUSH
80227: LD_INT 3
80229: NEG
80230: PUSH
80231: EMPTY
80232: LIST
80233: LIST
80234: PUSH
80235: LD_INT 1
80237: PUSH
80238: LD_INT 2
80240: NEG
80241: PUSH
80242: EMPTY
80243: LIST
80244: LIST
80245: PUSH
80246: LD_INT 0
80248: PUSH
80249: LD_INT 2
80251: NEG
80252: PUSH
80253: EMPTY
80254: LIST
80255: LIST
80256: PUSH
80257: LD_INT 1
80259: NEG
80260: PUSH
80261: LD_INT 3
80263: NEG
80264: PUSH
80265: EMPTY
80266: LIST
80267: LIST
80268: PUSH
80269: LD_INT 1
80271: NEG
80272: PUSH
80273: LD_INT 4
80275: NEG
80276: PUSH
80277: EMPTY
80278: LIST
80279: LIST
80280: PUSH
80281: LD_INT 2
80283: PUSH
80284: LD_INT 2
80286: NEG
80287: PUSH
80288: EMPTY
80289: LIST
80290: LIST
80291: PUSH
80292: LD_INT 2
80294: NEG
80295: PUSH
80296: LD_INT 4
80298: NEG
80299: PUSH
80300: EMPTY
80301: LIST
80302: LIST
80303: PUSH
80304: LD_INT 4
80306: PUSH
80307: LD_INT 0
80309: PUSH
80310: EMPTY
80311: LIST
80312: LIST
80313: PUSH
80314: LD_INT 4
80316: PUSH
80317: LD_INT 1
80319: NEG
80320: PUSH
80321: EMPTY
80322: LIST
80323: LIST
80324: PUSH
80325: LD_INT 5
80327: PUSH
80328: LD_INT 0
80330: PUSH
80331: EMPTY
80332: LIST
80333: LIST
80334: PUSH
80335: LD_INT 5
80337: PUSH
80338: LD_INT 1
80340: PUSH
80341: EMPTY
80342: LIST
80343: LIST
80344: PUSH
80345: LD_INT 4
80347: PUSH
80348: LD_INT 1
80350: PUSH
80351: EMPTY
80352: LIST
80353: LIST
80354: PUSH
80355: LD_INT 3
80357: PUSH
80358: LD_INT 0
80360: PUSH
80361: EMPTY
80362: LIST
80363: LIST
80364: PUSH
80365: LD_INT 3
80367: PUSH
80368: LD_INT 1
80370: NEG
80371: PUSH
80372: EMPTY
80373: LIST
80374: LIST
80375: PUSH
80376: LD_INT 3
80378: PUSH
80379: LD_INT 2
80381: NEG
80382: PUSH
80383: EMPTY
80384: LIST
80385: LIST
80386: PUSH
80387: LD_INT 5
80389: PUSH
80390: LD_INT 2
80392: PUSH
80393: EMPTY
80394: LIST
80395: LIST
80396: PUSH
80397: EMPTY
80398: LIST
80399: LIST
80400: LIST
80401: LIST
80402: LIST
80403: LIST
80404: LIST
80405: LIST
80406: LIST
80407: LIST
80408: LIST
80409: LIST
80410: LIST
80411: LIST
80412: LIST
80413: LIST
80414: LIST
80415: LIST
80416: LIST
80417: LIST
80418: LIST
80419: LIST
80420: LIST
80421: LIST
80422: LIST
80423: LIST
80424: LIST
80425: LIST
80426: LIST
80427: LIST
80428: LIST
80429: LIST
80430: LIST
80431: LIST
80432: LIST
80433: LIST
80434: LIST
80435: LIST
80436: LIST
80437: LIST
80438: LIST
80439: LIST
80440: LIST
80441: LIST
80442: LIST
80443: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
80444: LD_ADDR_VAR 0 32
80448: PUSH
80449: LD_INT 4
80451: NEG
80452: PUSH
80453: LD_INT 0
80455: PUSH
80456: EMPTY
80457: LIST
80458: LIST
80459: PUSH
80460: LD_INT 4
80462: NEG
80463: PUSH
80464: LD_INT 1
80466: NEG
80467: PUSH
80468: EMPTY
80469: LIST
80470: LIST
80471: PUSH
80472: LD_INT 3
80474: NEG
80475: PUSH
80476: LD_INT 0
80478: PUSH
80479: EMPTY
80480: LIST
80481: LIST
80482: PUSH
80483: LD_INT 3
80485: NEG
80486: PUSH
80487: LD_INT 1
80489: PUSH
80490: EMPTY
80491: LIST
80492: LIST
80493: PUSH
80494: LD_INT 4
80496: NEG
80497: PUSH
80498: LD_INT 1
80500: PUSH
80501: EMPTY
80502: LIST
80503: LIST
80504: PUSH
80505: LD_INT 5
80507: NEG
80508: PUSH
80509: LD_INT 0
80511: PUSH
80512: EMPTY
80513: LIST
80514: LIST
80515: PUSH
80516: LD_INT 5
80518: NEG
80519: PUSH
80520: LD_INT 1
80522: NEG
80523: PUSH
80524: EMPTY
80525: LIST
80526: LIST
80527: PUSH
80528: LD_INT 5
80530: NEG
80531: PUSH
80532: LD_INT 2
80534: NEG
80535: PUSH
80536: EMPTY
80537: LIST
80538: LIST
80539: PUSH
80540: LD_INT 3
80542: NEG
80543: PUSH
80544: LD_INT 2
80546: PUSH
80547: EMPTY
80548: LIST
80549: LIST
80550: PUSH
80551: LD_INT 3
80553: NEG
80554: PUSH
80555: LD_INT 3
80557: NEG
80558: PUSH
80559: EMPTY
80560: LIST
80561: LIST
80562: PUSH
80563: LD_INT 3
80565: NEG
80566: PUSH
80567: LD_INT 4
80569: NEG
80570: PUSH
80571: EMPTY
80572: LIST
80573: LIST
80574: PUSH
80575: LD_INT 2
80577: NEG
80578: PUSH
80579: LD_INT 3
80581: NEG
80582: PUSH
80583: EMPTY
80584: LIST
80585: LIST
80586: PUSH
80587: LD_INT 2
80589: NEG
80590: PUSH
80591: LD_INT 2
80593: NEG
80594: PUSH
80595: EMPTY
80596: LIST
80597: LIST
80598: PUSH
80599: LD_INT 3
80601: NEG
80602: PUSH
80603: LD_INT 2
80605: NEG
80606: PUSH
80607: EMPTY
80608: LIST
80609: LIST
80610: PUSH
80611: LD_INT 4
80613: NEG
80614: PUSH
80615: LD_INT 3
80617: NEG
80618: PUSH
80619: EMPTY
80620: LIST
80621: LIST
80622: PUSH
80623: LD_INT 4
80625: NEG
80626: PUSH
80627: LD_INT 4
80629: NEG
80630: PUSH
80631: EMPTY
80632: LIST
80633: LIST
80634: PUSH
80635: LD_INT 2
80637: NEG
80638: PUSH
80639: LD_INT 4
80641: NEG
80642: PUSH
80643: EMPTY
80644: LIST
80645: LIST
80646: PUSH
80647: LD_INT 4
80649: NEG
80650: PUSH
80651: LD_INT 2
80653: NEG
80654: PUSH
80655: EMPTY
80656: LIST
80657: LIST
80658: PUSH
80659: LD_INT 0
80661: PUSH
80662: LD_INT 4
80664: NEG
80665: PUSH
80666: EMPTY
80667: LIST
80668: LIST
80669: PUSH
80670: LD_INT 0
80672: PUSH
80673: LD_INT 5
80675: NEG
80676: PUSH
80677: EMPTY
80678: LIST
80679: LIST
80680: PUSH
80681: LD_INT 1
80683: PUSH
80684: LD_INT 4
80686: NEG
80687: PUSH
80688: EMPTY
80689: LIST
80690: LIST
80691: PUSH
80692: LD_INT 1
80694: PUSH
80695: LD_INT 3
80697: NEG
80698: PUSH
80699: EMPTY
80700: LIST
80701: LIST
80702: PUSH
80703: LD_INT 0
80705: PUSH
80706: LD_INT 3
80708: NEG
80709: PUSH
80710: EMPTY
80711: LIST
80712: LIST
80713: PUSH
80714: LD_INT 1
80716: NEG
80717: PUSH
80718: LD_INT 4
80720: NEG
80721: PUSH
80722: EMPTY
80723: LIST
80724: LIST
80725: PUSH
80726: LD_INT 1
80728: NEG
80729: PUSH
80730: LD_INT 5
80732: NEG
80733: PUSH
80734: EMPTY
80735: LIST
80736: LIST
80737: PUSH
80738: LD_INT 2
80740: PUSH
80741: LD_INT 3
80743: NEG
80744: PUSH
80745: EMPTY
80746: LIST
80747: LIST
80748: PUSH
80749: LD_INT 2
80751: NEG
80752: PUSH
80753: LD_INT 5
80755: NEG
80756: PUSH
80757: EMPTY
80758: LIST
80759: LIST
80760: PUSH
80761: LD_INT 3
80763: PUSH
80764: LD_INT 0
80766: PUSH
80767: EMPTY
80768: LIST
80769: LIST
80770: PUSH
80771: LD_INT 3
80773: PUSH
80774: LD_INT 1
80776: NEG
80777: PUSH
80778: EMPTY
80779: LIST
80780: LIST
80781: PUSH
80782: LD_INT 4
80784: PUSH
80785: LD_INT 0
80787: PUSH
80788: EMPTY
80789: LIST
80790: LIST
80791: PUSH
80792: LD_INT 4
80794: PUSH
80795: LD_INT 1
80797: PUSH
80798: EMPTY
80799: LIST
80800: LIST
80801: PUSH
80802: LD_INT 3
80804: PUSH
80805: LD_INT 1
80807: PUSH
80808: EMPTY
80809: LIST
80810: LIST
80811: PUSH
80812: LD_INT 2
80814: PUSH
80815: LD_INT 0
80817: PUSH
80818: EMPTY
80819: LIST
80820: LIST
80821: PUSH
80822: LD_INT 2
80824: PUSH
80825: LD_INT 1
80827: NEG
80828: PUSH
80829: EMPTY
80830: LIST
80831: LIST
80832: PUSH
80833: LD_INT 2
80835: PUSH
80836: LD_INT 2
80838: NEG
80839: PUSH
80840: EMPTY
80841: LIST
80842: LIST
80843: PUSH
80844: LD_INT 4
80846: PUSH
80847: LD_INT 2
80849: PUSH
80850: EMPTY
80851: LIST
80852: LIST
80853: PUSH
80854: LD_INT 4
80856: PUSH
80857: LD_INT 4
80859: PUSH
80860: EMPTY
80861: LIST
80862: LIST
80863: PUSH
80864: LD_INT 4
80866: PUSH
80867: LD_INT 3
80869: PUSH
80870: EMPTY
80871: LIST
80872: LIST
80873: PUSH
80874: LD_INT 5
80876: PUSH
80877: LD_INT 4
80879: PUSH
80880: EMPTY
80881: LIST
80882: LIST
80883: PUSH
80884: LD_INT 5
80886: PUSH
80887: LD_INT 5
80889: PUSH
80890: EMPTY
80891: LIST
80892: LIST
80893: PUSH
80894: LD_INT 4
80896: PUSH
80897: LD_INT 5
80899: PUSH
80900: EMPTY
80901: LIST
80902: LIST
80903: PUSH
80904: LD_INT 3
80906: PUSH
80907: LD_INT 4
80909: PUSH
80910: EMPTY
80911: LIST
80912: LIST
80913: PUSH
80914: LD_INT 3
80916: PUSH
80917: LD_INT 3
80919: PUSH
80920: EMPTY
80921: LIST
80922: LIST
80923: PUSH
80924: LD_INT 5
80926: PUSH
80927: LD_INT 3
80929: PUSH
80930: EMPTY
80931: LIST
80932: LIST
80933: PUSH
80934: LD_INT 3
80936: PUSH
80937: LD_INT 5
80939: PUSH
80940: EMPTY
80941: LIST
80942: LIST
80943: PUSH
80944: EMPTY
80945: LIST
80946: LIST
80947: LIST
80948: LIST
80949: LIST
80950: LIST
80951: LIST
80952: LIST
80953: LIST
80954: LIST
80955: LIST
80956: LIST
80957: LIST
80958: LIST
80959: LIST
80960: LIST
80961: LIST
80962: LIST
80963: LIST
80964: LIST
80965: LIST
80966: LIST
80967: LIST
80968: LIST
80969: LIST
80970: LIST
80971: LIST
80972: LIST
80973: LIST
80974: LIST
80975: LIST
80976: LIST
80977: LIST
80978: LIST
80979: LIST
80980: LIST
80981: LIST
80982: LIST
80983: LIST
80984: LIST
80985: LIST
80986: LIST
80987: LIST
80988: LIST
80989: LIST
80990: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
80991: LD_ADDR_VAR 0 33
80995: PUSH
80996: LD_INT 4
80998: NEG
80999: PUSH
81000: LD_INT 4
81002: NEG
81003: PUSH
81004: EMPTY
81005: LIST
81006: LIST
81007: PUSH
81008: LD_INT 4
81010: NEG
81011: PUSH
81012: LD_INT 5
81014: NEG
81015: PUSH
81016: EMPTY
81017: LIST
81018: LIST
81019: PUSH
81020: LD_INT 3
81022: NEG
81023: PUSH
81024: LD_INT 4
81026: NEG
81027: PUSH
81028: EMPTY
81029: LIST
81030: LIST
81031: PUSH
81032: LD_INT 3
81034: NEG
81035: PUSH
81036: LD_INT 3
81038: NEG
81039: PUSH
81040: EMPTY
81041: LIST
81042: LIST
81043: PUSH
81044: LD_INT 4
81046: NEG
81047: PUSH
81048: LD_INT 3
81050: NEG
81051: PUSH
81052: EMPTY
81053: LIST
81054: LIST
81055: PUSH
81056: LD_INT 5
81058: NEG
81059: PUSH
81060: LD_INT 4
81062: NEG
81063: PUSH
81064: EMPTY
81065: LIST
81066: LIST
81067: PUSH
81068: LD_INT 5
81070: NEG
81071: PUSH
81072: LD_INT 5
81074: NEG
81075: PUSH
81076: EMPTY
81077: LIST
81078: LIST
81079: PUSH
81080: LD_INT 3
81082: NEG
81083: PUSH
81084: LD_INT 5
81086: NEG
81087: PUSH
81088: EMPTY
81089: LIST
81090: LIST
81091: PUSH
81092: LD_INT 5
81094: NEG
81095: PUSH
81096: LD_INT 3
81098: NEG
81099: PUSH
81100: EMPTY
81101: LIST
81102: LIST
81103: PUSH
81104: LD_INT 0
81106: PUSH
81107: LD_INT 3
81109: NEG
81110: PUSH
81111: EMPTY
81112: LIST
81113: LIST
81114: PUSH
81115: LD_INT 0
81117: PUSH
81118: LD_INT 4
81120: NEG
81121: PUSH
81122: EMPTY
81123: LIST
81124: LIST
81125: PUSH
81126: LD_INT 1
81128: PUSH
81129: LD_INT 3
81131: NEG
81132: PUSH
81133: EMPTY
81134: LIST
81135: LIST
81136: PUSH
81137: LD_INT 1
81139: PUSH
81140: LD_INT 2
81142: NEG
81143: PUSH
81144: EMPTY
81145: LIST
81146: LIST
81147: PUSH
81148: LD_INT 0
81150: PUSH
81151: LD_INT 2
81153: NEG
81154: PUSH
81155: EMPTY
81156: LIST
81157: LIST
81158: PUSH
81159: LD_INT 1
81161: NEG
81162: PUSH
81163: LD_INT 3
81165: NEG
81166: PUSH
81167: EMPTY
81168: LIST
81169: LIST
81170: PUSH
81171: LD_INT 1
81173: NEG
81174: PUSH
81175: LD_INT 4
81177: NEG
81178: PUSH
81179: EMPTY
81180: LIST
81181: LIST
81182: PUSH
81183: LD_INT 2
81185: PUSH
81186: LD_INT 2
81188: NEG
81189: PUSH
81190: EMPTY
81191: LIST
81192: LIST
81193: PUSH
81194: LD_INT 2
81196: NEG
81197: PUSH
81198: LD_INT 4
81200: NEG
81201: PUSH
81202: EMPTY
81203: LIST
81204: LIST
81205: PUSH
81206: LD_INT 4
81208: PUSH
81209: LD_INT 0
81211: PUSH
81212: EMPTY
81213: LIST
81214: LIST
81215: PUSH
81216: LD_INT 4
81218: PUSH
81219: LD_INT 1
81221: NEG
81222: PUSH
81223: EMPTY
81224: LIST
81225: LIST
81226: PUSH
81227: LD_INT 5
81229: PUSH
81230: LD_INT 0
81232: PUSH
81233: EMPTY
81234: LIST
81235: LIST
81236: PUSH
81237: LD_INT 5
81239: PUSH
81240: LD_INT 1
81242: PUSH
81243: EMPTY
81244: LIST
81245: LIST
81246: PUSH
81247: LD_INT 4
81249: PUSH
81250: LD_INT 1
81252: PUSH
81253: EMPTY
81254: LIST
81255: LIST
81256: PUSH
81257: LD_INT 3
81259: PUSH
81260: LD_INT 0
81262: PUSH
81263: EMPTY
81264: LIST
81265: LIST
81266: PUSH
81267: LD_INT 3
81269: PUSH
81270: LD_INT 1
81272: NEG
81273: PUSH
81274: EMPTY
81275: LIST
81276: LIST
81277: PUSH
81278: LD_INT 3
81280: PUSH
81281: LD_INT 2
81283: NEG
81284: PUSH
81285: EMPTY
81286: LIST
81287: LIST
81288: PUSH
81289: LD_INT 5
81291: PUSH
81292: LD_INT 2
81294: PUSH
81295: EMPTY
81296: LIST
81297: LIST
81298: PUSH
81299: LD_INT 3
81301: PUSH
81302: LD_INT 3
81304: PUSH
81305: EMPTY
81306: LIST
81307: LIST
81308: PUSH
81309: LD_INT 3
81311: PUSH
81312: LD_INT 2
81314: PUSH
81315: EMPTY
81316: LIST
81317: LIST
81318: PUSH
81319: LD_INT 4
81321: PUSH
81322: LD_INT 3
81324: PUSH
81325: EMPTY
81326: LIST
81327: LIST
81328: PUSH
81329: LD_INT 4
81331: PUSH
81332: LD_INT 4
81334: PUSH
81335: EMPTY
81336: LIST
81337: LIST
81338: PUSH
81339: LD_INT 3
81341: PUSH
81342: LD_INT 4
81344: PUSH
81345: EMPTY
81346: LIST
81347: LIST
81348: PUSH
81349: LD_INT 2
81351: PUSH
81352: LD_INT 3
81354: PUSH
81355: EMPTY
81356: LIST
81357: LIST
81358: PUSH
81359: LD_INT 2
81361: PUSH
81362: LD_INT 2
81364: PUSH
81365: EMPTY
81366: LIST
81367: LIST
81368: PUSH
81369: LD_INT 4
81371: PUSH
81372: LD_INT 2
81374: PUSH
81375: EMPTY
81376: LIST
81377: LIST
81378: PUSH
81379: LD_INT 2
81381: PUSH
81382: LD_INT 4
81384: PUSH
81385: EMPTY
81386: LIST
81387: LIST
81388: PUSH
81389: LD_INT 0
81391: PUSH
81392: LD_INT 4
81394: PUSH
81395: EMPTY
81396: LIST
81397: LIST
81398: PUSH
81399: LD_INT 0
81401: PUSH
81402: LD_INT 3
81404: PUSH
81405: EMPTY
81406: LIST
81407: LIST
81408: PUSH
81409: LD_INT 1
81411: PUSH
81412: LD_INT 4
81414: PUSH
81415: EMPTY
81416: LIST
81417: LIST
81418: PUSH
81419: LD_INT 1
81421: PUSH
81422: LD_INT 5
81424: PUSH
81425: EMPTY
81426: LIST
81427: LIST
81428: PUSH
81429: LD_INT 0
81431: PUSH
81432: LD_INT 5
81434: PUSH
81435: EMPTY
81436: LIST
81437: LIST
81438: PUSH
81439: LD_INT 1
81441: NEG
81442: PUSH
81443: LD_INT 4
81445: PUSH
81446: EMPTY
81447: LIST
81448: LIST
81449: PUSH
81450: LD_INT 1
81452: NEG
81453: PUSH
81454: LD_INT 3
81456: PUSH
81457: EMPTY
81458: LIST
81459: LIST
81460: PUSH
81461: LD_INT 2
81463: PUSH
81464: LD_INT 5
81466: PUSH
81467: EMPTY
81468: LIST
81469: LIST
81470: PUSH
81471: LD_INT 2
81473: NEG
81474: PUSH
81475: LD_INT 3
81477: PUSH
81478: EMPTY
81479: LIST
81480: LIST
81481: PUSH
81482: EMPTY
81483: LIST
81484: LIST
81485: LIST
81486: LIST
81487: LIST
81488: LIST
81489: LIST
81490: LIST
81491: LIST
81492: LIST
81493: LIST
81494: LIST
81495: LIST
81496: LIST
81497: LIST
81498: LIST
81499: LIST
81500: LIST
81501: LIST
81502: LIST
81503: LIST
81504: LIST
81505: LIST
81506: LIST
81507: LIST
81508: LIST
81509: LIST
81510: LIST
81511: LIST
81512: LIST
81513: LIST
81514: LIST
81515: LIST
81516: LIST
81517: LIST
81518: LIST
81519: LIST
81520: LIST
81521: LIST
81522: LIST
81523: LIST
81524: LIST
81525: LIST
81526: LIST
81527: LIST
81528: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
81529: LD_ADDR_VAR 0 34
81533: PUSH
81534: LD_INT 0
81536: PUSH
81537: LD_INT 4
81539: NEG
81540: PUSH
81541: EMPTY
81542: LIST
81543: LIST
81544: PUSH
81545: LD_INT 0
81547: PUSH
81548: LD_INT 5
81550: NEG
81551: PUSH
81552: EMPTY
81553: LIST
81554: LIST
81555: PUSH
81556: LD_INT 1
81558: PUSH
81559: LD_INT 4
81561: NEG
81562: PUSH
81563: EMPTY
81564: LIST
81565: LIST
81566: PUSH
81567: LD_INT 1
81569: PUSH
81570: LD_INT 3
81572: NEG
81573: PUSH
81574: EMPTY
81575: LIST
81576: LIST
81577: PUSH
81578: LD_INT 0
81580: PUSH
81581: LD_INT 3
81583: NEG
81584: PUSH
81585: EMPTY
81586: LIST
81587: LIST
81588: PUSH
81589: LD_INT 1
81591: NEG
81592: PUSH
81593: LD_INT 4
81595: NEG
81596: PUSH
81597: EMPTY
81598: LIST
81599: LIST
81600: PUSH
81601: LD_INT 1
81603: NEG
81604: PUSH
81605: LD_INT 5
81607: NEG
81608: PUSH
81609: EMPTY
81610: LIST
81611: LIST
81612: PUSH
81613: LD_INT 2
81615: PUSH
81616: LD_INT 3
81618: NEG
81619: PUSH
81620: EMPTY
81621: LIST
81622: LIST
81623: PUSH
81624: LD_INT 2
81626: NEG
81627: PUSH
81628: LD_INT 5
81630: NEG
81631: PUSH
81632: EMPTY
81633: LIST
81634: LIST
81635: PUSH
81636: LD_INT 3
81638: PUSH
81639: LD_INT 0
81641: PUSH
81642: EMPTY
81643: LIST
81644: LIST
81645: PUSH
81646: LD_INT 3
81648: PUSH
81649: LD_INT 1
81651: NEG
81652: PUSH
81653: EMPTY
81654: LIST
81655: LIST
81656: PUSH
81657: LD_INT 4
81659: PUSH
81660: LD_INT 0
81662: PUSH
81663: EMPTY
81664: LIST
81665: LIST
81666: PUSH
81667: LD_INT 4
81669: PUSH
81670: LD_INT 1
81672: PUSH
81673: EMPTY
81674: LIST
81675: LIST
81676: PUSH
81677: LD_INT 3
81679: PUSH
81680: LD_INT 1
81682: PUSH
81683: EMPTY
81684: LIST
81685: LIST
81686: PUSH
81687: LD_INT 2
81689: PUSH
81690: LD_INT 0
81692: PUSH
81693: EMPTY
81694: LIST
81695: LIST
81696: PUSH
81697: LD_INT 2
81699: PUSH
81700: LD_INT 1
81702: NEG
81703: PUSH
81704: EMPTY
81705: LIST
81706: LIST
81707: PUSH
81708: LD_INT 2
81710: PUSH
81711: LD_INT 2
81713: NEG
81714: PUSH
81715: EMPTY
81716: LIST
81717: LIST
81718: PUSH
81719: LD_INT 4
81721: PUSH
81722: LD_INT 2
81724: PUSH
81725: EMPTY
81726: LIST
81727: LIST
81728: PUSH
81729: LD_INT 4
81731: PUSH
81732: LD_INT 4
81734: PUSH
81735: EMPTY
81736: LIST
81737: LIST
81738: PUSH
81739: LD_INT 4
81741: PUSH
81742: LD_INT 3
81744: PUSH
81745: EMPTY
81746: LIST
81747: LIST
81748: PUSH
81749: LD_INT 5
81751: PUSH
81752: LD_INT 4
81754: PUSH
81755: EMPTY
81756: LIST
81757: LIST
81758: PUSH
81759: LD_INT 5
81761: PUSH
81762: LD_INT 5
81764: PUSH
81765: EMPTY
81766: LIST
81767: LIST
81768: PUSH
81769: LD_INT 4
81771: PUSH
81772: LD_INT 5
81774: PUSH
81775: EMPTY
81776: LIST
81777: LIST
81778: PUSH
81779: LD_INT 3
81781: PUSH
81782: LD_INT 4
81784: PUSH
81785: EMPTY
81786: LIST
81787: LIST
81788: PUSH
81789: LD_INT 3
81791: PUSH
81792: LD_INT 3
81794: PUSH
81795: EMPTY
81796: LIST
81797: LIST
81798: PUSH
81799: LD_INT 5
81801: PUSH
81802: LD_INT 3
81804: PUSH
81805: EMPTY
81806: LIST
81807: LIST
81808: PUSH
81809: LD_INT 3
81811: PUSH
81812: LD_INT 5
81814: PUSH
81815: EMPTY
81816: LIST
81817: LIST
81818: PUSH
81819: LD_INT 0
81821: PUSH
81822: LD_INT 3
81824: PUSH
81825: EMPTY
81826: LIST
81827: LIST
81828: PUSH
81829: LD_INT 0
81831: PUSH
81832: LD_INT 2
81834: PUSH
81835: EMPTY
81836: LIST
81837: LIST
81838: PUSH
81839: LD_INT 1
81841: PUSH
81842: LD_INT 3
81844: PUSH
81845: EMPTY
81846: LIST
81847: LIST
81848: PUSH
81849: LD_INT 1
81851: PUSH
81852: LD_INT 4
81854: PUSH
81855: EMPTY
81856: LIST
81857: LIST
81858: PUSH
81859: LD_INT 0
81861: PUSH
81862: LD_INT 4
81864: PUSH
81865: EMPTY
81866: LIST
81867: LIST
81868: PUSH
81869: LD_INT 1
81871: NEG
81872: PUSH
81873: LD_INT 3
81875: PUSH
81876: EMPTY
81877: LIST
81878: LIST
81879: PUSH
81880: LD_INT 1
81882: NEG
81883: PUSH
81884: LD_INT 2
81886: PUSH
81887: EMPTY
81888: LIST
81889: LIST
81890: PUSH
81891: LD_INT 2
81893: PUSH
81894: LD_INT 4
81896: PUSH
81897: EMPTY
81898: LIST
81899: LIST
81900: PUSH
81901: LD_INT 2
81903: NEG
81904: PUSH
81905: LD_INT 2
81907: PUSH
81908: EMPTY
81909: LIST
81910: LIST
81911: PUSH
81912: LD_INT 4
81914: NEG
81915: PUSH
81916: LD_INT 0
81918: PUSH
81919: EMPTY
81920: LIST
81921: LIST
81922: PUSH
81923: LD_INT 4
81925: NEG
81926: PUSH
81927: LD_INT 1
81929: NEG
81930: PUSH
81931: EMPTY
81932: LIST
81933: LIST
81934: PUSH
81935: LD_INT 3
81937: NEG
81938: PUSH
81939: LD_INT 0
81941: PUSH
81942: EMPTY
81943: LIST
81944: LIST
81945: PUSH
81946: LD_INT 3
81948: NEG
81949: PUSH
81950: LD_INT 1
81952: PUSH
81953: EMPTY
81954: LIST
81955: LIST
81956: PUSH
81957: LD_INT 4
81959: NEG
81960: PUSH
81961: LD_INT 1
81963: PUSH
81964: EMPTY
81965: LIST
81966: LIST
81967: PUSH
81968: LD_INT 5
81970: NEG
81971: PUSH
81972: LD_INT 0
81974: PUSH
81975: EMPTY
81976: LIST
81977: LIST
81978: PUSH
81979: LD_INT 5
81981: NEG
81982: PUSH
81983: LD_INT 1
81985: NEG
81986: PUSH
81987: EMPTY
81988: LIST
81989: LIST
81990: PUSH
81991: LD_INT 5
81993: NEG
81994: PUSH
81995: LD_INT 2
81997: NEG
81998: PUSH
81999: EMPTY
82000: LIST
82001: LIST
82002: PUSH
82003: LD_INT 3
82005: NEG
82006: PUSH
82007: LD_INT 2
82009: PUSH
82010: EMPTY
82011: LIST
82012: LIST
82013: PUSH
82014: EMPTY
82015: LIST
82016: LIST
82017: LIST
82018: LIST
82019: LIST
82020: LIST
82021: LIST
82022: LIST
82023: LIST
82024: LIST
82025: LIST
82026: LIST
82027: LIST
82028: LIST
82029: LIST
82030: LIST
82031: LIST
82032: LIST
82033: LIST
82034: LIST
82035: LIST
82036: LIST
82037: LIST
82038: LIST
82039: LIST
82040: LIST
82041: LIST
82042: LIST
82043: LIST
82044: LIST
82045: LIST
82046: LIST
82047: LIST
82048: LIST
82049: LIST
82050: LIST
82051: LIST
82052: LIST
82053: LIST
82054: LIST
82055: LIST
82056: LIST
82057: LIST
82058: LIST
82059: LIST
82060: ST_TO_ADDR
// end ; end ;
82061: GO 82064
82063: POP
// case btype of b_depot , b_warehouse :
82064: LD_VAR 0 1
82068: PUSH
82069: LD_INT 0
82071: DOUBLE
82072: EQUAL
82073: IFTRUE 82083
82075: LD_INT 1
82077: DOUBLE
82078: EQUAL
82079: IFTRUE 82083
82081: GO 82284
82083: POP
// case nation of nation_american :
82084: LD_VAR 0 5
82088: PUSH
82089: LD_INT 1
82091: DOUBLE
82092: EQUAL
82093: IFTRUE 82097
82095: GO 82153
82097: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
82098: LD_ADDR_VAR 0 9
82102: PUSH
82103: LD_VAR 0 11
82107: PUSH
82108: LD_VAR 0 12
82112: PUSH
82113: LD_VAR 0 13
82117: PUSH
82118: LD_VAR 0 14
82122: PUSH
82123: LD_VAR 0 15
82127: PUSH
82128: LD_VAR 0 16
82132: PUSH
82133: EMPTY
82134: LIST
82135: LIST
82136: LIST
82137: LIST
82138: LIST
82139: LIST
82140: PUSH
82141: LD_VAR 0 4
82145: PUSH
82146: LD_INT 1
82148: PLUS
82149: ARRAY
82150: ST_TO_ADDR
82151: GO 82282
82153: LD_INT 2
82155: DOUBLE
82156: EQUAL
82157: IFTRUE 82161
82159: GO 82217
82161: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
82162: LD_ADDR_VAR 0 9
82166: PUSH
82167: LD_VAR 0 17
82171: PUSH
82172: LD_VAR 0 18
82176: PUSH
82177: LD_VAR 0 19
82181: PUSH
82182: LD_VAR 0 20
82186: PUSH
82187: LD_VAR 0 21
82191: PUSH
82192: LD_VAR 0 22
82196: PUSH
82197: EMPTY
82198: LIST
82199: LIST
82200: LIST
82201: LIST
82202: LIST
82203: LIST
82204: PUSH
82205: LD_VAR 0 4
82209: PUSH
82210: LD_INT 1
82212: PLUS
82213: ARRAY
82214: ST_TO_ADDR
82215: GO 82282
82217: LD_INT 3
82219: DOUBLE
82220: EQUAL
82221: IFTRUE 82225
82223: GO 82281
82225: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
82226: LD_ADDR_VAR 0 9
82230: PUSH
82231: LD_VAR 0 23
82235: PUSH
82236: LD_VAR 0 24
82240: PUSH
82241: LD_VAR 0 25
82245: PUSH
82246: LD_VAR 0 26
82250: PUSH
82251: LD_VAR 0 27
82255: PUSH
82256: LD_VAR 0 28
82260: PUSH
82261: EMPTY
82262: LIST
82263: LIST
82264: LIST
82265: LIST
82266: LIST
82267: LIST
82268: PUSH
82269: LD_VAR 0 4
82273: PUSH
82274: LD_INT 1
82276: PLUS
82277: ARRAY
82278: ST_TO_ADDR
82279: GO 82282
82281: POP
82282: GO 82837
82284: LD_INT 2
82286: DOUBLE
82287: EQUAL
82288: IFTRUE 82298
82290: LD_INT 3
82292: DOUBLE
82293: EQUAL
82294: IFTRUE 82298
82296: GO 82354
82298: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
82299: LD_ADDR_VAR 0 9
82303: PUSH
82304: LD_VAR 0 29
82308: PUSH
82309: LD_VAR 0 30
82313: PUSH
82314: LD_VAR 0 31
82318: PUSH
82319: LD_VAR 0 32
82323: PUSH
82324: LD_VAR 0 33
82328: PUSH
82329: LD_VAR 0 34
82333: PUSH
82334: EMPTY
82335: LIST
82336: LIST
82337: LIST
82338: LIST
82339: LIST
82340: LIST
82341: PUSH
82342: LD_VAR 0 4
82346: PUSH
82347: LD_INT 1
82349: PLUS
82350: ARRAY
82351: ST_TO_ADDR
82352: GO 82837
82354: LD_INT 16
82356: DOUBLE
82357: EQUAL
82358: IFTRUE 82416
82360: LD_INT 17
82362: DOUBLE
82363: EQUAL
82364: IFTRUE 82416
82366: LD_INT 18
82368: DOUBLE
82369: EQUAL
82370: IFTRUE 82416
82372: LD_INT 19
82374: DOUBLE
82375: EQUAL
82376: IFTRUE 82416
82378: LD_INT 22
82380: DOUBLE
82381: EQUAL
82382: IFTRUE 82416
82384: LD_INT 20
82386: DOUBLE
82387: EQUAL
82388: IFTRUE 82416
82390: LD_INT 21
82392: DOUBLE
82393: EQUAL
82394: IFTRUE 82416
82396: LD_INT 23
82398: DOUBLE
82399: EQUAL
82400: IFTRUE 82416
82402: LD_INT 24
82404: DOUBLE
82405: EQUAL
82406: IFTRUE 82416
82408: LD_INT 25
82410: DOUBLE
82411: EQUAL
82412: IFTRUE 82416
82414: GO 82472
82416: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
82417: LD_ADDR_VAR 0 9
82421: PUSH
82422: LD_VAR 0 35
82426: PUSH
82427: LD_VAR 0 36
82431: PUSH
82432: LD_VAR 0 37
82436: PUSH
82437: LD_VAR 0 38
82441: PUSH
82442: LD_VAR 0 39
82446: PUSH
82447: LD_VAR 0 40
82451: PUSH
82452: EMPTY
82453: LIST
82454: LIST
82455: LIST
82456: LIST
82457: LIST
82458: LIST
82459: PUSH
82460: LD_VAR 0 4
82464: PUSH
82465: LD_INT 1
82467: PLUS
82468: ARRAY
82469: ST_TO_ADDR
82470: GO 82837
82472: LD_INT 6
82474: DOUBLE
82475: EQUAL
82476: IFTRUE 82528
82478: LD_INT 7
82480: DOUBLE
82481: EQUAL
82482: IFTRUE 82528
82484: LD_INT 8
82486: DOUBLE
82487: EQUAL
82488: IFTRUE 82528
82490: LD_INT 13
82492: DOUBLE
82493: EQUAL
82494: IFTRUE 82528
82496: LD_INT 12
82498: DOUBLE
82499: EQUAL
82500: IFTRUE 82528
82502: LD_INT 15
82504: DOUBLE
82505: EQUAL
82506: IFTRUE 82528
82508: LD_INT 11
82510: DOUBLE
82511: EQUAL
82512: IFTRUE 82528
82514: LD_INT 14
82516: DOUBLE
82517: EQUAL
82518: IFTRUE 82528
82520: LD_INT 10
82522: DOUBLE
82523: EQUAL
82524: IFTRUE 82528
82526: GO 82584
82528: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
82529: LD_ADDR_VAR 0 9
82533: PUSH
82534: LD_VAR 0 41
82538: PUSH
82539: LD_VAR 0 42
82543: PUSH
82544: LD_VAR 0 43
82548: PUSH
82549: LD_VAR 0 44
82553: PUSH
82554: LD_VAR 0 45
82558: PUSH
82559: LD_VAR 0 46
82563: PUSH
82564: EMPTY
82565: LIST
82566: LIST
82567: LIST
82568: LIST
82569: LIST
82570: LIST
82571: PUSH
82572: LD_VAR 0 4
82576: PUSH
82577: LD_INT 1
82579: PLUS
82580: ARRAY
82581: ST_TO_ADDR
82582: GO 82837
82584: LD_INT 36
82586: DOUBLE
82587: EQUAL
82588: IFTRUE 82592
82590: GO 82648
82592: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
82593: LD_ADDR_VAR 0 9
82597: PUSH
82598: LD_VAR 0 47
82602: PUSH
82603: LD_VAR 0 48
82607: PUSH
82608: LD_VAR 0 49
82612: PUSH
82613: LD_VAR 0 50
82617: PUSH
82618: LD_VAR 0 51
82622: PUSH
82623: LD_VAR 0 52
82627: PUSH
82628: EMPTY
82629: LIST
82630: LIST
82631: LIST
82632: LIST
82633: LIST
82634: LIST
82635: PUSH
82636: LD_VAR 0 4
82640: PUSH
82641: LD_INT 1
82643: PLUS
82644: ARRAY
82645: ST_TO_ADDR
82646: GO 82837
82648: LD_INT 4
82650: DOUBLE
82651: EQUAL
82652: IFTRUE 82674
82654: LD_INT 5
82656: DOUBLE
82657: EQUAL
82658: IFTRUE 82674
82660: LD_INT 34
82662: DOUBLE
82663: EQUAL
82664: IFTRUE 82674
82666: LD_INT 37
82668: DOUBLE
82669: EQUAL
82670: IFTRUE 82674
82672: GO 82730
82674: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
82675: LD_ADDR_VAR 0 9
82679: PUSH
82680: LD_VAR 0 53
82684: PUSH
82685: LD_VAR 0 54
82689: PUSH
82690: LD_VAR 0 55
82694: PUSH
82695: LD_VAR 0 56
82699: PUSH
82700: LD_VAR 0 57
82704: PUSH
82705: LD_VAR 0 58
82709: PUSH
82710: EMPTY
82711: LIST
82712: LIST
82713: LIST
82714: LIST
82715: LIST
82716: LIST
82717: PUSH
82718: LD_VAR 0 4
82722: PUSH
82723: LD_INT 1
82725: PLUS
82726: ARRAY
82727: ST_TO_ADDR
82728: GO 82837
82730: LD_INT 31
82732: DOUBLE
82733: EQUAL
82734: IFTRUE 82780
82736: LD_INT 32
82738: DOUBLE
82739: EQUAL
82740: IFTRUE 82780
82742: LD_INT 33
82744: DOUBLE
82745: EQUAL
82746: IFTRUE 82780
82748: LD_INT 27
82750: DOUBLE
82751: EQUAL
82752: IFTRUE 82780
82754: LD_INT 26
82756: DOUBLE
82757: EQUAL
82758: IFTRUE 82780
82760: LD_INT 28
82762: DOUBLE
82763: EQUAL
82764: IFTRUE 82780
82766: LD_INT 29
82768: DOUBLE
82769: EQUAL
82770: IFTRUE 82780
82772: LD_INT 30
82774: DOUBLE
82775: EQUAL
82776: IFTRUE 82780
82778: GO 82836
82780: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
82781: LD_ADDR_VAR 0 9
82785: PUSH
82786: LD_VAR 0 59
82790: PUSH
82791: LD_VAR 0 60
82795: PUSH
82796: LD_VAR 0 61
82800: PUSH
82801: LD_VAR 0 62
82805: PUSH
82806: LD_VAR 0 63
82810: PUSH
82811: LD_VAR 0 64
82815: PUSH
82816: EMPTY
82817: LIST
82818: LIST
82819: LIST
82820: LIST
82821: LIST
82822: LIST
82823: PUSH
82824: LD_VAR 0 4
82828: PUSH
82829: LD_INT 1
82831: PLUS
82832: ARRAY
82833: ST_TO_ADDR
82834: GO 82837
82836: POP
// temp_list2 = [ ] ;
82837: LD_ADDR_VAR 0 10
82841: PUSH
82842: EMPTY
82843: ST_TO_ADDR
// for i in temp_list do
82844: LD_ADDR_VAR 0 8
82848: PUSH
82849: LD_VAR 0 9
82853: PUSH
82854: FOR_IN
82855: IFFALSE 82907
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
82857: LD_ADDR_VAR 0 10
82861: PUSH
82862: LD_VAR 0 10
82866: PUSH
82867: LD_VAR 0 8
82871: PUSH
82872: LD_INT 1
82874: ARRAY
82875: PUSH
82876: LD_VAR 0 2
82880: PLUS
82881: PUSH
82882: LD_VAR 0 8
82886: PUSH
82887: LD_INT 2
82889: ARRAY
82890: PUSH
82891: LD_VAR 0 3
82895: PLUS
82896: PUSH
82897: EMPTY
82898: LIST
82899: LIST
82900: PUSH
82901: EMPTY
82902: LIST
82903: ADD
82904: ST_TO_ADDR
82905: GO 82854
82907: POP
82908: POP
// result = temp_list2 ;
82909: LD_ADDR_VAR 0 7
82913: PUSH
82914: LD_VAR 0 10
82918: ST_TO_ADDR
// end ;
82919: LD_VAR 0 7
82923: RET
// export function EnemyInRange ( unit , dist ) ; begin
82924: LD_INT 0
82926: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
82927: LD_ADDR_VAR 0 3
82931: PUSH
82932: LD_VAR 0 1
82936: PPUSH
82937: CALL_OW 255
82941: PPUSH
82942: LD_VAR 0 1
82946: PPUSH
82947: CALL_OW 250
82951: PPUSH
82952: LD_VAR 0 1
82956: PPUSH
82957: CALL_OW 251
82961: PPUSH
82962: LD_VAR 0 2
82966: PPUSH
82967: CALL 56326 0 4
82971: PUSH
82972: LD_INT 4
82974: ARRAY
82975: ST_TO_ADDR
// end ;
82976: LD_VAR 0 3
82980: RET
// export function PlayerSeeMe ( unit ) ; begin
82981: LD_INT 0
82983: PPUSH
// result := See ( your_side , unit ) ;
82984: LD_ADDR_VAR 0 2
82988: PUSH
82989: LD_OWVAR 2
82993: PPUSH
82994: LD_VAR 0 1
82998: PPUSH
82999: CALL_OW 292
83003: ST_TO_ADDR
// end ;
83004: LD_VAR 0 2
83008: RET
// export function ReverseDir ( unit ) ; begin
83009: LD_INT 0
83011: PPUSH
// if not unit then
83012: LD_VAR 0 1
83016: NOT
83017: IFFALSE 83021
// exit ;
83019: GO 83044
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
83021: LD_ADDR_VAR 0 2
83025: PUSH
83026: LD_VAR 0 1
83030: PPUSH
83031: CALL_OW 254
83035: PUSH
83036: LD_INT 3
83038: PLUS
83039: PUSH
83040: LD_INT 6
83042: MOD
83043: ST_TO_ADDR
// end ;
83044: LD_VAR 0 2
83048: RET
// export function ReverseArray ( array ) ; var i ; begin
83049: LD_INT 0
83051: PPUSH
83052: PPUSH
// if not array then
83053: LD_VAR 0 1
83057: NOT
83058: IFFALSE 83062
// exit ;
83060: GO 83117
// result := [ ] ;
83062: LD_ADDR_VAR 0 2
83066: PUSH
83067: EMPTY
83068: ST_TO_ADDR
// for i := array downto 1 do
83069: LD_ADDR_VAR 0 3
83073: PUSH
83074: DOUBLE
83075: LD_VAR 0 1
83079: INC
83080: ST_TO_ADDR
83081: LD_INT 1
83083: PUSH
83084: FOR_DOWNTO
83085: IFFALSE 83115
// result := Join ( result , array [ i ] ) ;
83087: LD_ADDR_VAR 0 2
83091: PUSH
83092: LD_VAR 0 2
83096: PPUSH
83097: LD_VAR 0 1
83101: PUSH
83102: LD_VAR 0 3
83106: ARRAY
83107: PPUSH
83108: CALL 87761 0 2
83112: ST_TO_ADDR
83113: GO 83084
83115: POP
83116: POP
// end ;
83117: LD_VAR 0 2
83121: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
83122: LD_INT 0
83124: PPUSH
83125: PPUSH
83126: PPUSH
83127: PPUSH
83128: PPUSH
83129: PPUSH
// if not unit or not hexes then
83130: LD_VAR 0 1
83134: NOT
83135: PUSH
83136: LD_VAR 0 2
83140: NOT
83141: OR
83142: IFFALSE 83146
// exit ;
83144: GO 83269
// dist := 9999 ;
83146: LD_ADDR_VAR 0 5
83150: PUSH
83151: LD_INT 9999
83153: ST_TO_ADDR
// for i = 1 to hexes do
83154: LD_ADDR_VAR 0 4
83158: PUSH
83159: DOUBLE
83160: LD_INT 1
83162: DEC
83163: ST_TO_ADDR
83164: LD_VAR 0 2
83168: PUSH
83169: FOR_TO
83170: IFFALSE 83257
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
83172: LD_ADDR_VAR 0 6
83176: PUSH
83177: LD_VAR 0 1
83181: PPUSH
83182: LD_VAR 0 2
83186: PUSH
83187: LD_VAR 0 4
83191: ARRAY
83192: PUSH
83193: LD_INT 1
83195: ARRAY
83196: PPUSH
83197: LD_VAR 0 2
83201: PUSH
83202: LD_VAR 0 4
83206: ARRAY
83207: PUSH
83208: LD_INT 2
83210: ARRAY
83211: PPUSH
83212: CALL_OW 297
83216: ST_TO_ADDR
// if tdist < dist then
83217: LD_VAR 0 6
83221: PUSH
83222: LD_VAR 0 5
83226: LESS
83227: IFFALSE 83255
// begin hex := hexes [ i ] ;
83229: LD_ADDR_VAR 0 8
83233: PUSH
83234: LD_VAR 0 2
83238: PUSH
83239: LD_VAR 0 4
83243: ARRAY
83244: ST_TO_ADDR
// dist := tdist ;
83245: LD_ADDR_VAR 0 5
83249: PUSH
83250: LD_VAR 0 6
83254: ST_TO_ADDR
// end ; end ;
83255: GO 83169
83257: POP
83258: POP
// result := hex ;
83259: LD_ADDR_VAR 0 3
83263: PUSH
83264: LD_VAR 0 8
83268: ST_TO_ADDR
// end ;
83269: LD_VAR 0 3
83273: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
83274: LD_INT 0
83276: PPUSH
83277: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
83278: LD_VAR 0 1
83282: NOT
83283: PUSH
83284: LD_VAR 0 1
83288: PUSH
83289: LD_INT 21
83291: PUSH
83292: LD_INT 2
83294: PUSH
83295: EMPTY
83296: LIST
83297: LIST
83298: PUSH
83299: LD_INT 23
83301: PUSH
83302: LD_INT 2
83304: PUSH
83305: EMPTY
83306: LIST
83307: LIST
83308: PUSH
83309: EMPTY
83310: LIST
83311: LIST
83312: PPUSH
83313: CALL_OW 69
83317: IN
83318: NOT
83319: OR
83320: IFFALSE 83324
// exit ;
83322: GO 83371
// for i = 1 to 3 do
83324: LD_ADDR_VAR 0 3
83328: PUSH
83329: DOUBLE
83330: LD_INT 1
83332: DEC
83333: ST_TO_ADDR
83334: LD_INT 3
83336: PUSH
83337: FOR_TO
83338: IFFALSE 83369
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
83340: LD_VAR 0 1
83344: PPUSH
83345: CALL_OW 250
83349: PPUSH
83350: LD_VAR 0 1
83354: PPUSH
83355: CALL_OW 251
83359: PPUSH
83360: LD_INT 1
83362: PPUSH
83363: CALL_OW 453
83367: GO 83337
83369: POP
83370: POP
// end ;
83371: LD_VAR 0 2
83375: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
83376: LD_INT 0
83378: PPUSH
83379: PPUSH
83380: PPUSH
83381: PPUSH
83382: PPUSH
83383: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
83384: LD_VAR 0 1
83388: NOT
83389: PUSH
83390: LD_VAR 0 2
83394: NOT
83395: OR
83396: PUSH
83397: LD_VAR 0 1
83401: PPUSH
83402: CALL_OW 314
83406: OR
83407: IFFALSE 83411
// exit ;
83409: GO 83878
// if GetLives ( i ) < 250 then
83411: LD_VAR 0 4
83415: PPUSH
83416: CALL_OW 256
83420: PUSH
83421: LD_INT 250
83423: LESS
83424: IFFALSE 83437
// begin ComAutodestruct ( i ) ;
83426: LD_VAR 0 4
83430: PPUSH
83431: CALL 83274 0 1
// exit ;
83435: GO 83878
// end ; x := GetX ( enemy_unit ) ;
83437: LD_ADDR_VAR 0 7
83441: PUSH
83442: LD_VAR 0 2
83446: PPUSH
83447: CALL_OW 250
83451: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
83452: LD_ADDR_VAR 0 8
83456: PUSH
83457: LD_VAR 0 2
83461: PPUSH
83462: CALL_OW 251
83466: ST_TO_ADDR
// if not x or not y then
83467: LD_VAR 0 7
83471: NOT
83472: PUSH
83473: LD_VAR 0 8
83477: NOT
83478: OR
83479: IFFALSE 83483
// exit ;
83481: GO 83878
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
83483: LD_ADDR_VAR 0 6
83487: PUSH
83488: LD_VAR 0 7
83492: PPUSH
83493: LD_INT 0
83495: PPUSH
83496: LD_INT 4
83498: PPUSH
83499: CALL_OW 272
83503: PUSH
83504: LD_VAR 0 8
83508: PPUSH
83509: LD_INT 0
83511: PPUSH
83512: LD_INT 4
83514: PPUSH
83515: CALL_OW 273
83519: PUSH
83520: EMPTY
83521: LIST
83522: LIST
83523: PUSH
83524: LD_VAR 0 7
83528: PPUSH
83529: LD_INT 1
83531: PPUSH
83532: LD_INT 4
83534: PPUSH
83535: CALL_OW 272
83539: PUSH
83540: LD_VAR 0 8
83544: PPUSH
83545: LD_INT 1
83547: PPUSH
83548: LD_INT 4
83550: PPUSH
83551: CALL_OW 273
83555: PUSH
83556: EMPTY
83557: LIST
83558: LIST
83559: PUSH
83560: LD_VAR 0 7
83564: PPUSH
83565: LD_INT 2
83567: PPUSH
83568: LD_INT 4
83570: PPUSH
83571: CALL_OW 272
83575: PUSH
83576: LD_VAR 0 8
83580: PPUSH
83581: LD_INT 2
83583: PPUSH
83584: LD_INT 4
83586: PPUSH
83587: CALL_OW 273
83591: PUSH
83592: EMPTY
83593: LIST
83594: LIST
83595: PUSH
83596: LD_VAR 0 7
83600: PPUSH
83601: LD_INT 3
83603: PPUSH
83604: LD_INT 4
83606: PPUSH
83607: CALL_OW 272
83611: PUSH
83612: LD_VAR 0 8
83616: PPUSH
83617: LD_INT 3
83619: PPUSH
83620: LD_INT 4
83622: PPUSH
83623: CALL_OW 273
83627: PUSH
83628: EMPTY
83629: LIST
83630: LIST
83631: PUSH
83632: LD_VAR 0 7
83636: PPUSH
83637: LD_INT 4
83639: PPUSH
83640: LD_INT 4
83642: PPUSH
83643: CALL_OW 272
83647: PUSH
83648: LD_VAR 0 8
83652: PPUSH
83653: LD_INT 4
83655: PPUSH
83656: LD_INT 4
83658: PPUSH
83659: CALL_OW 273
83663: PUSH
83664: EMPTY
83665: LIST
83666: LIST
83667: PUSH
83668: LD_VAR 0 7
83672: PPUSH
83673: LD_INT 5
83675: PPUSH
83676: LD_INT 4
83678: PPUSH
83679: CALL_OW 272
83683: PUSH
83684: LD_VAR 0 8
83688: PPUSH
83689: LD_INT 5
83691: PPUSH
83692: LD_INT 4
83694: PPUSH
83695: CALL_OW 273
83699: PUSH
83700: EMPTY
83701: LIST
83702: LIST
83703: PUSH
83704: EMPTY
83705: LIST
83706: LIST
83707: LIST
83708: LIST
83709: LIST
83710: LIST
83711: ST_TO_ADDR
// for i = tmp downto 1 do
83712: LD_ADDR_VAR 0 4
83716: PUSH
83717: DOUBLE
83718: LD_VAR 0 6
83722: INC
83723: ST_TO_ADDR
83724: LD_INT 1
83726: PUSH
83727: FOR_DOWNTO
83728: IFFALSE 83829
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
83730: LD_VAR 0 6
83734: PUSH
83735: LD_VAR 0 4
83739: ARRAY
83740: PUSH
83741: LD_INT 1
83743: ARRAY
83744: PPUSH
83745: LD_VAR 0 6
83749: PUSH
83750: LD_VAR 0 4
83754: ARRAY
83755: PUSH
83756: LD_INT 2
83758: ARRAY
83759: PPUSH
83760: CALL_OW 488
83764: NOT
83765: PUSH
83766: LD_VAR 0 6
83770: PUSH
83771: LD_VAR 0 4
83775: ARRAY
83776: PUSH
83777: LD_INT 1
83779: ARRAY
83780: PPUSH
83781: LD_VAR 0 6
83785: PUSH
83786: LD_VAR 0 4
83790: ARRAY
83791: PUSH
83792: LD_INT 2
83794: ARRAY
83795: PPUSH
83796: CALL_OW 428
83800: PUSH
83801: LD_INT 0
83803: NONEQUAL
83804: OR
83805: IFFALSE 83827
// tmp := Delete ( tmp , i ) ;
83807: LD_ADDR_VAR 0 6
83811: PUSH
83812: LD_VAR 0 6
83816: PPUSH
83817: LD_VAR 0 4
83821: PPUSH
83822: CALL_OW 3
83826: ST_TO_ADDR
83827: GO 83727
83829: POP
83830: POP
// j := GetClosestHex ( unit , tmp ) ;
83831: LD_ADDR_VAR 0 5
83835: PUSH
83836: LD_VAR 0 1
83840: PPUSH
83841: LD_VAR 0 6
83845: PPUSH
83846: CALL 83122 0 2
83850: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
83851: LD_VAR 0 1
83855: PPUSH
83856: LD_VAR 0 5
83860: PUSH
83861: LD_INT 1
83863: ARRAY
83864: PPUSH
83865: LD_VAR 0 5
83869: PUSH
83870: LD_INT 2
83872: ARRAY
83873: PPUSH
83874: CALL_OW 111
// end ;
83878: LD_VAR 0 3
83882: RET
// export function PrepareApemanSoldier ( ) ; begin
83883: LD_INT 0
83885: PPUSH
// uc_nation := 0 ;
83886: LD_ADDR_OWVAR 21
83890: PUSH
83891: LD_INT 0
83893: ST_TO_ADDR
// hc_sex := sex_male ;
83894: LD_ADDR_OWVAR 27
83898: PUSH
83899: LD_INT 1
83901: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
83902: LD_ADDR_OWVAR 28
83906: PUSH
83907: LD_INT 15
83909: ST_TO_ADDR
// hc_gallery :=  ;
83910: LD_ADDR_OWVAR 33
83914: PUSH
83915: LD_STRING 
83917: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
83918: LD_ADDR_OWVAR 31
83922: PUSH
83923: LD_INT 0
83925: PPUSH
83926: LD_INT 3
83928: PPUSH
83929: CALL_OW 12
83933: PUSH
83934: LD_INT 0
83936: PPUSH
83937: LD_INT 3
83939: PPUSH
83940: CALL_OW 12
83944: PUSH
83945: LD_INT 0
83947: PUSH
83948: LD_INT 0
83950: PUSH
83951: EMPTY
83952: LIST
83953: LIST
83954: LIST
83955: LIST
83956: ST_TO_ADDR
// end ;
83957: LD_VAR 0 1
83961: RET
// export function PrepareApemanEngineer ( ) ; begin
83962: LD_INT 0
83964: PPUSH
// uc_nation := 0 ;
83965: LD_ADDR_OWVAR 21
83969: PUSH
83970: LD_INT 0
83972: ST_TO_ADDR
// hc_sex := sex_male ;
83973: LD_ADDR_OWVAR 27
83977: PUSH
83978: LD_INT 1
83980: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
83981: LD_ADDR_OWVAR 28
83985: PUSH
83986: LD_INT 16
83988: ST_TO_ADDR
// hc_gallery :=  ;
83989: LD_ADDR_OWVAR 33
83993: PUSH
83994: LD_STRING 
83996: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
83997: LD_ADDR_OWVAR 31
84001: PUSH
84002: LD_INT 0
84004: PPUSH
84005: LD_INT 3
84007: PPUSH
84008: CALL_OW 12
84012: PUSH
84013: LD_INT 0
84015: PPUSH
84016: LD_INT 3
84018: PPUSH
84019: CALL_OW 12
84023: PUSH
84024: LD_INT 0
84026: PUSH
84027: LD_INT 0
84029: PUSH
84030: EMPTY
84031: LIST
84032: LIST
84033: LIST
84034: LIST
84035: ST_TO_ADDR
// end ;
84036: LD_VAR 0 1
84040: RET
// export function PrepareApeman ( agressivity ) ; begin
84041: LD_INT 0
84043: PPUSH
// uc_side := 0 ;
84044: LD_ADDR_OWVAR 20
84048: PUSH
84049: LD_INT 0
84051: ST_TO_ADDR
// uc_nation := 0 ;
84052: LD_ADDR_OWVAR 21
84056: PUSH
84057: LD_INT 0
84059: ST_TO_ADDR
// hc_sex := sex_male ;
84060: LD_ADDR_OWVAR 27
84064: PUSH
84065: LD_INT 1
84067: ST_TO_ADDR
// hc_class := class_apeman ;
84068: LD_ADDR_OWVAR 28
84072: PUSH
84073: LD_INT 12
84075: ST_TO_ADDR
// hc_gallery :=  ;
84076: LD_ADDR_OWVAR 33
84080: PUSH
84081: LD_STRING 
84083: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
84084: LD_ADDR_OWVAR 35
84088: PUSH
84089: LD_VAR 0 1
84093: NEG
84094: PPUSH
84095: LD_VAR 0 1
84099: PPUSH
84100: CALL_OW 12
84104: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
84105: LD_ADDR_OWVAR 31
84109: PUSH
84110: LD_INT 0
84112: PPUSH
84113: LD_INT 3
84115: PPUSH
84116: CALL_OW 12
84120: PUSH
84121: LD_INT 0
84123: PPUSH
84124: LD_INT 3
84126: PPUSH
84127: CALL_OW 12
84131: PUSH
84132: LD_INT 0
84134: PUSH
84135: LD_INT 0
84137: PUSH
84138: EMPTY
84139: LIST
84140: LIST
84141: LIST
84142: LIST
84143: ST_TO_ADDR
// end ;
84144: LD_VAR 0 2
84148: RET
// export function PrepareTiger ( agressivity ) ; begin
84149: LD_INT 0
84151: PPUSH
// uc_side := 0 ;
84152: LD_ADDR_OWVAR 20
84156: PUSH
84157: LD_INT 0
84159: ST_TO_ADDR
// uc_nation := 0 ;
84160: LD_ADDR_OWVAR 21
84164: PUSH
84165: LD_INT 0
84167: ST_TO_ADDR
// hc_class := class_tiger ;
84168: LD_ADDR_OWVAR 28
84172: PUSH
84173: LD_INT 14
84175: ST_TO_ADDR
// hc_gallery :=  ;
84176: LD_ADDR_OWVAR 33
84180: PUSH
84181: LD_STRING 
84183: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
84184: LD_ADDR_OWVAR 35
84188: PUSH
84189: LD_VAR 0 1
84193: NEG
84194: PPUSH
84195: LD_VAR 0 1
84199: PPUSH
84200: CALL_OW 12
84204: ST_TO_ADDR
// end ;
84205: LD_VAR 0 2
84209: RET
// export function PrepareEnchidna ( ) ; begin
84210: LD_INT 0
84212: PPUSH
// uc_side := 0 ;
84213: LD_ADDR_OWVAR 20
84217: PUSH
84218: LD_INT 0
84220: ST_TO_ADDR
// uc_nation := 0 ;
84221: LD_ADDR_OWVAR 21
84225: PUSH
84226: LD_INT 0
84228: ST_TO_ADDR
// hc_class := class_baggie ;
84229: LD_ADDR_OWVAR 28
84233: PUSH
84234: LD_INT 13
84236: ST_TO_ADDR
// hc_gallery :=  ;
84237: LD_ADDR_OWVAR 33
84241: PUSH
84242: LD_STRING 
84244: ST_TO_ADDR
// end ;
84245: LD_VAR 0 1
84249: RET
// export function PrepareFrog ( ) ; begin
84250: LD_INT 0
84252: PPUSH
// uc_side := 0 ;
84253: LD_ADDR_OWVAR 20
84257: PUSH
84258: LD_INT 0
84260: ST_TO_ADDR
// uc_nation := 0 ;
84261: LD_ADDR_OWVAR 21
84265: PUSH
84266: LD_INT 0
84268: ST_TO_ADDR
// hc_class := class_frog ;
84269: LD_ADDR_OWVAR 28
84273: PUSH
84274: LD_INT 19
84276: ST_TO_ADDR
// hc_gallery :=  ;
84277: LD_ADDR_OWVAR 33
84281: PUSH
84282: LD_STRING 
84284: ST_TO_ADDR
// end ;
84285: LD_VAR 0 1
84289: RET
// export function PrepareFish ( ) ; begin
84290: LD_INT 0
84292: PPUSH
// uc_side := 0 ;
84293: LD_ADDR_OWVAR 20
84297: PUSH
84298: LD_INT 0
84300: ST_TO_ADDR
// uc_nation := 0 ;
84301: LD_ADDR_OWVAR 21
84305: PUSH
84306: LD_INT 0
84308: ST_TO_ADDR
// hc_class := class_fish ;
84309: LD_ADDR_OWVAR 28
84313: PUSH
84314: LD_INT 20
84316: ST_TO_ADDR
// hc_gallery :=  ;
84317: LD_ADDR_OWVAR 33
84321: PUSH
84322: LD_STRING 
84324: ST_TO_ADDR
// end ;
84325: LD_VAR 0 1
84329: RET
// export function PrepareBird ( ) ; begin
84330: LD_INT 0
84332: PPUSH
// uc_side := 0 ;
84333: LD_ADDR_OWVAR 20
84337: PUSH
84338: LD_INT 0
84340: ST_TO_ADDR
// uc_nation := 0 ;
84341: LD_ADDR_OWVAR 21
84345: PUSH
84346: LD_INT 0
84348: ST_TO_ADDR
// hc_class := class_phororhacos ;
84349: LD_ADDR_OWVAR 28
84353: PUSH
84354: LD_INT 18
84356: ST_TO_ADDR
// hc_gallery :=  ;
84357: LD_ADDR_OWVAR 33
84361: PUSH
84362: LD_STRING 
84364: ST_TO_ADDR
// end ;
84365: LD_VAR 0 1
84369: RET
// export function PrepareHorse ( ) ; begin
84370: LD_INT 0
84372: PPUSH
// uc_side := 0 ;
84373: LD_ADDR_OWVAR 20
84377: PUSH
84378: LD_INT 0
84380: ST_TO_ADDR
// uc_nation := 0 ;
84381: LD_ADDR_OWVAR 21
84385: PUSH
84386: LD_INT 0
84388: ST_TO_ADDR
// hc_class := class_horse ;
84389: LD_ADDR_OWVAR 28
84393: PUSH
84394: LD_INT 21
84396: ST_TO_ADDR
// hc_gallery :=  ;
84397: LD_ADDR_OWVAR 33
84401: PUSH
84402: LD_STRING 
84404: ST_TO_ADDR
// end ;
84405: LD_VAR 0 1
84409: RET
// export function PrepareMastodont ( ) ; begin
84410: LD_INT 0
84412: PPUSH
// uc_side := 0 ;
84413: LD_ADDR_OWVAR 20
84417: PUSH
84418: LD_INT 0
84420: ST_TO_ADDR
// uc_nation := 0 ;
84421: LD_ADDR_OWVAR 21
84425: PUSH
84426: LD_INT 0
84428: ST_TO_ADDR
// vc_chassis := class_mastodont ;
84429: LD_ADDR_OWVAR 37
84433: PUSH
84434: LD_INT 31
84436: ST_TO_ADDR
// vc_control := control_rider ;
84437: LD_ADDR_OWVAR 38
84441: PUSH
84442: LD_INT 4
84444: ST_TO_ADDR
// end ;
84445: LD_VAR 0 1
84449: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
84450: LD_INT 0
84452: PPUSH
84453: PPUSH
84454: PPUSH
// uc_side = 0 ;
84455: LD_ADDR_OWVAR 20
84459: PUSH
84460: LD_INT 0
84462: ST_TO_ADDR
// uc_nation = 0 ;
84463: LD_ADDR_OWVAR 21
84467: PUSH
84468: LD_INT 0
84470: ST_TO_ADDR
// InitHc_All ( ) ;
84471: CALL_OW 584
// InitVc ;
84475: CALL_OW 20
// if mastodonts then
84479: LD_VAR 0 6
84483: IFFALSE 84550
// for i = 1 to mastodonts do
84485: LD_ADDR_VAR 0 11
84489: PUSH
84490: DOUBLE
84491: LD_INT 1
84493: DEC
84494: ST_TO_ADDR
84495: LD_VAR 0 6
84499: PUSH
84500: FOR_TO
84501: IFFALSE 84548
// begin vc_chassis := 31 ;
84503: LD_ADDR_OWVAR 37
84507: PUSH
84508: LD_INT 31
84510: ST_TO_ADDR
// vc_control := control_rider ;
84511: LD_ADDR_OWVAR 38
84515: PUSH
84516: LD_INT 4
84518: ST_TO_ADDR
// animal := CreateVehicle ;
84519: LD_ADDR_VAR 0 12
84523: PUSH
84524: CALL_OW 45
84528: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84529: LD_VAR 0 12
84533: PPUSH
84534: LD_VAR 0 8
84538: PPUSH
84539: LD_INT 0
84541: PPUSH
84542: CALL 86678 0 3
// end ;
84546: GO 84500
84548: POP
84549: POP
// if horses then
84550: LD_VAR 0 5
84554: IFFALSE 84621
// for i = 1 to horses do
84556: LD_ADDR_VAR 0 11
84560: PUSH
84561: DOUBLE
84562: LD_INT 1
84564: DEC
84565: ST_TO_ADDR
84566: LD_VAR 0 5
84570: PUSH
84571: FOR_TO
84572: IFFALSE 84619
// begin hc_class := 21 ;
84574: LD_ADDR_OWVAR 28
84578: PUSH
84579: LD_INT 21
84581: ST_TO_ADDR
// hc_gallery :=  ;
84582: LD_ADDR_OWVAR 33
84586: PUSH
84587: LD_STRING 
84589: ST_TO_ADDR
// animal := CreateHuman ;
84590: LD_ADDR_VAR 0 12
84594: PUSH
84595: CALL_OW 44
84599: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84600: LD_VAR 0 12
84604: PPUSH
84605: LD_VAR 0 8
84609: PPUSH
84610: LD_INT 0
84612: PPUSH
84613: CALL 86678 0 3
// end ;
84617: GO 84571
84619: POP
84620: POP
// if birds then
84621: LD_VAR 0 1
84625: IFFALSE 84692
// for i = 1 to birds do
84627: LD_ADDR_VAR 0 11
84631: PUSH
84632: DOUBLE
84633: LD_INT 1
84635: DEC
84636: ST_TO_ADDR
84637: LD_VAR 0 1
84641: PUSH
84642: FOR_TO
84643: IFFALSE 84690
// begin hc_class = 18 ;
84645: LD_ADDR_OWVAR 28
84649: PUSH
84650: LD_INT 18
84652: ST_TO_ADDR
// hc_gallery =  ;
84653: LD_ADDR_OWVAR 33
84657: PUSH
84658: LD_STRING 
84660: ST_TO_ADDR
// animal := CreateHuman ;
84661: LD_ADDR_VAR 0 12
84665: PUSH
84666: CALL_OW 44
84670: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84671: LD_VAR 0 12
84675: PPUSH
84676: LD_VAR 0 8
84680: PPUSH
84681: LD_INT 0
84683: PPUSH
84684: CALL 86678 0 3
// end ;
84688: GO 84642
84690: POP
84691: POP
// if tigers then
84692: LD_VAR 0 2
84696: IFFALSE 84780
// for i = 1 to tigers do
84698: LD_ADDR_VAR 0 11
84702: PUSH
84703: DOUBLE
84704: LD_INT 1
84706: DEC
84707: ST_TO_ADDR
84708: LD_VAR 0 2
84712: PUSH
84713: FOR_TO
84714: IFFALSE 84778
// begin hc_class = class_tiger ;
84716: LD_ADDR_OWVAR 28
84720: PUSH
84721: LD_INT 14
84723: ST_TO_ADDR
// hc_gallery =  ;
84724: LD_ADDR_OWVAR 33
84728: PUSH
84729: LD_STRING 
84731: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
84732: LD_ADDR_OWVAR 35
84736: PUSH
84737: LD_INT 7
84739: NEG
84740: PPUSH
84741: LD_INT 7
84743: PPUSH
84744: CALL_OW 12
84748: ST_TO_ADDR
// animal := CreateHuman ;
84749: LD_ADDR_VAR 0 12
84753: PUSH
84754: CALL_OW 44
84758: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84759: LD_VAR 0 12
84763: PPUSH
84764: LD_VAR 0 8
84768: PPUSH
84769: LD_INT 0
84771: PPUSH
84772: CALL 86678 0 3
// end ;
84776: GO 84713
84778: POP
84779: POP
// if apemans then
84780: LD_VAR 0 3
84784: IFFALSE 84907
// for i = 1 to apemans do
84786: LD_ADDR_VAR 0 11
84790: PUSH
84791: DOUBLE
84792: LD_INT 1
84794: DEC
84795: ST_TO_ADDR
84796: LD_VAR 0 3
84800: PUSH
84801: FOR_TO
84802: IFFALSE 84905
// begin hc_class = class_apeman ;
84804: LD_ADDR_OWVAR 28
84808: PUSH
84809: LD_INT 12
84811: ST_TO_ADDR
// hc_gallery =  ;
84812: LD_ADDR_OWVAR 33
84816: PUSH
84817: LD_STRING 
84819: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
84820: LD_ADDR_OWVAR 35
84824: PUSH
84825: LD_INT 2
84827: NEG
84828: PPUSH
84829: LD_INT 2
84831: PPUSH
84832: CALL_OW 12
84836: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
84837: LD_ADDR_OWVAR 31
84841: PUSH
84842: LD_INT 1
84844: PPUSH
84845: LD_INT 3
84847: PPUSH
84848: CALL_OW 12
84852: PUSH
84853: LD_INT 1
84855: PPUSH
84856: LD_INT 3
84858: PPUSH
84859: CALL_OW 12
84863: PUSH
84864: LD_INT 0
84866: PUSH
84867: LD_INT 0
84869: PUSH
84870: EMPTY
84871: LIST
84872: LIST
84873: LIST
84874: LIST
84875: ST_TO_ADDR
// animal := CreateHuman ;
84876: LD_ADDR_VAR 0 12
84880: PUSH
84881: CALL_OW 44
84885: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84886: LD_VAR 0 12
84890: PPUSH
84891: LD_VAR 0 8
84895: PPUSH
84896: LD_INT 0
84898: PPUSH
84899: CALL 86678 0 3
// end ;
84903: GO 84801
84905: POP
84906: POP
// if enchidnas then
84907: LD_VAR 0 4
84911: IFFALSE 84978
// for i = 1 to enchidnas do
84913: LD_ADDR_VAR 0 11
84917: PUSH
84918: DOUBLE
84919: LD_INT 1
84921: DEC
84922: ST_TO_ADDR
84923: LD_VAR 0 4
84927: PUSH
84928: FOR_TO
84929: IFFALSE 84976
// begin hc_class = 13 ;
84931: LD_ADDR_OWVAR 28
84935: PUSH
84936: LD_INT 13
84938: ST_TO_ADDR
// hc_gallery =  ;
84939: LD_ADDR_OWVAR 33
84943: PUSH
84944: LD_STRING 
84946: ST_TO_ADDR
// animal := CreateHuman ;
84947: LD_ADDR_VAR 0 12
84951: PUSH
84952: CALL_OW 44
84956: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84957: LD_VAR 0 12
84961: PPUSH
84962: LD_VAR 0 8
84966: PPUSH
84967: LD_INT 0
84969: PPUSH
84970: CALL 86678 0 3
// end ;
84974: GO 84928
84976: POP
84977: POP
// if fishes then
84978: LD_VAR 0 7
84982: IFFALSE 85049
// for i = 1 to fishes do
84984: LD_ADDR_VAR 0 11
84988: PUSH
84989: DOUBLE
84990: LD_INT 1
84992: DEC
84993: ST_TO_ADDR
84994: LD_VAR 0 7
84998: PUSH
84999: FOR_TO
85000: IFFALSE 85047
// begin hc_class = 20 ;
85002: LD_ADDR_OWVAR 28
85006: PUSH
85007: LD_INT 20
85009: ST_TO_ADDR
// hc_gallery =  ;
85010: LD_ADDR_OWVAR 33
85014: PUSH
85015: LD_STRING 
85017: ST_TO_ADDR
// animal := CreateHuman ;
85018: LD_ADDR_VAR 0 12
85022: PUSH
85023: CALL_OW 44
85027: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
85028: LD_VAR 0 12
85032: PPUSH
85033: LD_VAR 0 9
85037: PPUSH
85038: LD_INT 0
85040: PPUSH
85041: CALL 86678 0 3
// end ;
85045: GO 84999
85047: POP
85048: POP
// end ;
85049: LD_VAR 0 10
85053: RET
// export function WantHeal ( sci , unit ) ; begin
85054: LD_INT 0
85056: PPUSH
// if GetTaskList ( sci ) > 0 then
85057: LD_VAR 0 1
85061: PPUSH
85062: CALL_OW 437
85066: PUSH
85067: LD_INT 0
85069: GREATER
85070: IFFALSE 85140
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
85072: LD_VAR 0 1
85076: PPUSH
85077: CALL_OW 437
85081: PUSH
85082: LD_INT 1
85084: ARRAY
85085: PUSH
85086: LD_INT 1
85088: ARRAY
85089: PUSH
85090: LD_STRING l
85092: EQUAL
85093: PUSH
85094: LD_VAR 0 1
85098: PPUSH
85099: CALL_OW 437
85103: PUSH
85104: LD_INT 1
85106: ARRAY
85107: PUSH
85108: LD_INT 4
85110: ARRAY
85111: PUSH
85112: LD_VAR 0 2
85116: EQUAL
85117: AND
85118: IFFALSE 85130
// result := true else
85120: LD_ADDR_VAR 0 3
85124: PUSH
85125: LD_INT 1
85127: ST_TO_ADDR
85128: GO 85138
// result := false ;
85130: LD_ADDR_VAR 0 3
85134: PUSH
85135: LD_INT 0
85137: ST_TO_ADDR
// end else
85138: GO 85148
// result := false ;
85140: LD_ADDR_VAR 0 3
85144: PUSH
85145: LD_INT 0
85147: ST_TO_ADDR
// end ;
85148: LD_VAR 0 3
85152: RET
// export function HealTarget ( sci ) ; begin
85153: LD_INT 0
85155: PPUSH
// if not sci then
85156: LD_VAR 0 1
85160: NOT
85161: IFFALSE 85165
// exit ;
85163: GO 85230
// result := 0 ;
85165: LD_ADDR_VAR 0 2
85169: PUSH
85170: LD_INT 0
85172: ST_TO_ADDR
// if GetTaskList ( sci ) then
85173: LD_VAR 0 1
85177: PPUSH
85178: CALL_OW 437
85182: IFFALSE 85230
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
85184: LD_VAR 0 1
85188: PPUSH
85189: CALL_OW 437
85193: PUSH
85194: LD_INT 1
85196: ARRAY
85197: PUSH
85198: LD_INT 1
85200: ARRAY
85201: PUSH
85202: LD_STRING l
85204: EQUAL
85205: IFFALSE 85230
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
85207: LD_ADDR_VAR 0 2
85211: PUSH
85212: LD_VAR 0 1
85216: PPUSH
85217: CALL_OW 437
85221: PUSH
85222: LD_INT 1
85224: ARRAY
85225: PUSH
85226: LD_INT 4
85228: ARRAY
85229: ST_TO_ADDR
// end ;
85230: LD_VAR 0 2
85234: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
85235: LD_INT 0
85237: PPUSH
85238: PPUSH
85239: PPUSH
85240: PPUSH
// if not base_units then
85241: LD_VAR 0 1
85245: NOT
85246: IFFALSE 85250
// exit ;
85248: GO 85337
// result := false ;
85250: LD_ADDR_VAR 0 2
85254: PUSH
85255: LD_INT 0
85257: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
85258: LD_ADDR_VAR 0 5
85262: PUSH
85263: LD_VAR 0 1
85267: PPUSH
85268: LD_INT 21
85270: PUSH
85271: LD_INT 3
85273: PUSH
85274: EMPTY
85275: LIST
85276: LIST
85277: PPUSH
85278: CALL_OW 72
85282: ST_TO_ADDR
// if not tmp then
85283: LD_VAR 0 5
85287: NOT
85288: IFFALSE 85292
// exit ;
85290: GO 85337
// for i in tmp do
85292: LD_ADDR_VAR 0 3
85296: PUSH
85297: LD_VAR 0 5
85301: PUSH
85302: FOR_IN
85303: IFFALSE 85335
// begin result := EnemyInRange ( i , 22 ) ;
85305: LD_ADDR_VAR 0 2
85309: PUSH
85310: LD_VAR 0 3
85314: PPUSH
85315: LD_INT 22
85317: PPUSH
85318: CALL 82924 0 2
85322: ST_TO_ADDR
// if result then
85323: LD_VAR 0 2
85327: IFFALSE 85333
// exit ;
85329: POP
85330: POP
85331: GO 85337
// end ;
85333: GO 85302
85335: POP
85336: POP
// end ;
85337: LD_VAR 0 2
85341: RET
// export function FilterByTag ( units , tag ) ; begin
85342: LD_INT 0
85344: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
85345: LD_ADDR_VAR 0 3
85349: PUSH
85350: LD_VAR 0 1
85354: PPUSH
85355: LD_INT 120
85357: PUSH
85358: LD_VAR 0 2
85362: PUSH
85363: EMPTY
85364: LIST
85365: LIST
85366: PPUSH
85367: CALL_OW 72
85371: ST_TO_ADDR
// end ;
85372: LD_VAR 0 3
85376: RET
// export function IsDriver ( un ) ; begin
85377: LD_INT 0
85379: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
85380: LD_ADDR_VAR 0 2
85384: PUSH
85385: LD_VAR 0 1
85389: PUSH
85390: LD_INT 55
85392: PUSH
85393: EMPTY
85394: LIST
85395: PPUSH
85396: CALL_OW 69
85400: IN
85401: ST_TO_ADDR
// end ;
85402: LD_VAR 0 2
85406: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
85407: LD_INT 0
85409: PPUSH
85410: PPUSH
// list := [ ] ;
85411: LD_ADDR_VAR 0 5
85415: PUSH
85416: EMPTY
85417: ST_TO_ADDR
// case d of 0 :
85418: LD_VAR 0 3
85422: PUSH
85423: LD_INT 0
85425: DOUBLE
85426: EQUAL
85427: IFTRUE 85431
85429: GO 85564
85431: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
85432: LD_ADDR_VAR 0 5
85436: PUSH
85437: LD_VAR 0 1
85441: PUSH
85442: LD_INT 4
85444: MINUS
85445: PUSH
85446: LD_VAR 0 2
85450: PUSH
85451: LD_INT 4
85453: MINUS
85454: PUSH
85455: LD_INT 2
85457: PUSH
85458: EMPTY
85459: LIST
85460: LIST
85461: LIST
85462: PUSH
85463: LD_VAR 0 1
85467: PUSH
85468: LD_INT 3
85470: MINUS
85471: PUSH
85472: LD_VAR 0 2
85476: PUSH
85477: LD_INT 1
85479: PUSH
85480: EMPTY
85481: LIST
85482: LIST
85483: LIST
85484: PUSH
85485: LD_VAR 0 1
85489: PUSH
85490: LD_INT 4
85492: PLUS
85493: PUSH
85494: LD_VAR 0 2
85498: PUSH
85499: LD_INT 4
85501: PUSH
85502: EMPTY
85503: LIST
85504: LIST
85505: LIST
85506: PUSH
85507: LD_VAR 0 1
85511: PUSH
85512: LD_INT 3
85514: PLUS
85515: PUSH
85516: LD_VAR 0 2
85520: PUSH
85521: LD_INT 3
85523: PLUS
85524: PUSH
85525: LD_INT 5
85527: PUSH
85528: EMPTY
85529: LIST
85530: LIST
85531: LIST
85532: PUSH
85533: LD_VAR 0 1
85537: PUSH
85538: LD_VAR 0 2
85542: PUSH
85543: LD_INT 4
85545: PLUS
85546: PUSH
85547: LD_INT 0
85549: PUSH
85550: EMPTY
85551: LIST
85552: LIST
85553: LIST
85554: PUSH
85555: EMPTY
85556: LIST
85557: LIST
85558: LIST
85559: LIST
85560: LIST
85561: ST_TO_ADDR
// end ; 1 :
85562: GO 86262
85564: LD_INT 1
85566: DOUBLE
85567: EQUAL
85568: IFTRUE 85572
85570: GO 85705
85572: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
85573: LD_ADDR_VAR 0 5
85577: PUSH
85578: LD_VAR 0 1
85582: PUSH
85583: LD_VAR 0 2
85587: PUSH
85588: LD_INT 4
85590: MINUS
85591: PUSH
85592: LD_INT 3
85594: PUSH
85595: EMPTY
85596: LIST
85597: LIST
85598: LIST
85599: PUSH
85600: LD_VAR 0 1
85604: PUSH
85605: LD_INT 3
85607: MINUS
85608: PUSH
85609: LD_VAR 0 2
85613: PUSH
85614: LD_INT 3
85616: MINUS
85617: PUSH
85618: LD_INT 2
85620: PUSH
85621: EMPTY
85622: LIST
85623: LIST
85624: LIST
85625: PUSH
85626: LD_VAR 0 1
85630: PUSH
85631: LD_INT 4
85633: MINUS
85634: PUSH
85635: LD_VAR 0 2
85639: PUSH
85640: LD_INT 1
85642: PUSH
85643: EMPTY
85644: LIST
85645: LIST
85646: LIST
85647: PUSH
85648: LD_VAR 0 1
85652: PUSH
85653: LD_VAR 0 2
85657: PUSH
85658: LD_INT 3
85660: PLUS
85661: PUSH
85662: LD_INT 0
85664: PUSH
85665: EMPTY
85666: LIST
85667: LIST
85668: LIST
85669: PUSH
85670: LD_VAR 0 1
85674: PUSH
85675: LD_INT 4
85677: PLUS
85678: PUSH
85679: LD_VAR 0 2
85683: PUSH
85684: LD_INT 4
85686: PLUS
85687: PUSH
85688: LD_INT 5
85690: PUSH
85691: EMPTY
85692: LIST
85693: LIST
85694: LIST
85695: PUSH
85696: EMPTY
85697: LIST
85698: LIST
85699: LIST
85700: LIST
85701: LIST
85702: ST_TO_ADDR
// end ; 2 :
85703: GO 86262
85705: LD_INT 2
85707: DOUBLE
85708: EQUAL
85709: IFTRUE 85713
85711: GO 85842
85713: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
85714: LD_ADDR_VAR 0 5
85718: PUSH
85719: LD_VAR 0 1
85723: PUSH
85724: LD_VAR 0 2
85728: PUSH
85729: LD_INT 3
85731: MINUS
85732: PUSH
85733: LD_INT 3
85735: PUSH
85736: EMPTY
85737: LIST
85738: LIST
85739: LIST
85740: PUSH
85741: LD_VAR 0 1
85745: PUSH
85746: LD_INT 4
85748: PLUS
85749: PUSH
85750: LD_VAR 0 2
85754: PUSH
85755: LD_INT 4
85757: PUSH
85758: EMPTY
85759: LIST
85760: LIST
85761: LIST
85762: PUSH
85763: LD_VAR 0 1
85767: PUSH
85768: LD_VAR 0 2
85772: PUSH
85773: LD_INT 4
85775: PLUS
85776: PUSH
85777: LD_INT 0
85779: PUSH
85780: EMPTY
85781: LIST
85782: LIST
85783: LIST
85784: PUSH
85785: LD_VAR 0 1
85789: PUSH
85790: LD_INT 3
85792: MINUS
85793: PUSH
85794: LD_VAR 0 2
85798: PUSH
85799: LD_INT 1
85801: PUSH
85802: EMPTY
85803: LIST
85804: LIST
85805: LIST
85806: PUSH
85807: LD_VAR 0 1
85811: PUSH
85812: LD_INT 4
85814: MINUS
85815: PUSH
85816: LD_VAR 0 2
85820: PUSH
85821: LD_INT 4
85823: MINUS
85824: PUSH
85825: LD_INT 2
85827: PUSH
85828: EMPTY
85829: LIST
85830: LIST
85831: LIST
85832: PUSH
85833: EMPTY
85834: LIST
85835: LIST
85836: LIST
85837: LIST
85838: LIST
85839: ST_TO_ADDR
// end ; 3 :
85840: GO 86262
85842: LD_INT 3
85844: DOUBLE
85845: EQUAL
85846: IFTRUE 85850
85848: GO 85983
85850: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
85851: LD_ADDR_VAR 0 5
85855: PUSH
85856: LD_VAR 0 1
85860: PUSH
85861: LD_INT 3
85863: PLUS
85864: PUSH
85865: LD_VAR 0 2
85869: PUSH
85870: LD_INT 4
85872: PUSH
85873: EMPTY
85874: LIST
85875: LIST
85876: LIST
85877: PUSH
85878: LD_VAR 0 1
85882: PUSH
85883: LD_INT 4
85885: PLUS
85886: PUSH
85887: LD_VAR 0 2
85891: PUSH
85892: LD_INT 4
85894: PLUS
85895: PUSH
85896: LD_INT 5
85898: PUSH
85899: EMPTY
85900: LIST
85901: LIST
85902: LIST
85903: PUSH
85904: LD_VAR 0 1
85908: PUSH
85909: LD_INT 4
85911: MINUS
85912: PUSH
85913: LD_VAR 0 2
85917: PUSH
85918: LD_INT 1
85920: PUSH
85921: EMPTY
85922: LIST
85923: LIST
85924: LIST
85925: PUSH
85926: LD_VAR 0 1
85930: PUSH
85931: LD_VAR 0 2
85935: PUSH
85936: LD_INT 4
85938: MINUS
85939: PUSH
85940: LD_INT 3
85942: PUSH
85943: EMPTY
85944: LIST
85945: LIST
85946: LIST
85947: PUSH
85948: LD_VAR 0 1
85952: PUSH
85953: LD_INT 3
85955: MINUS
85956: PUSH
85957: LD_VAR 0 2
85961: PUSH
85962: LD_INT 3
85964: MINUS
85965: PUSH
85966: LD_INT 2
85968: PUSH
85969: EMPTY
85970: LIST
85971: LIST
85972: LIST
85973: PUSH
85974: EMPTY
85975: LIST
85976: LIST
85977: LIST
85978: LIST
85979: LIST
85980: ST_TO_ADDR
// end ; 4 :
85981: GO 86262
85983: LD_INT 4
85985: DOUBLE
85986: EQUAL
85987: IFTRUE 85991
85989: GO 86124
85991: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
85992: LD_ADDR_VAR 0 5
85996: PUSH
85997: LD_VAR 0 1
86001: PUSH
86002: LD_VAR 0 2
86006: PUSH
86007: LD_INT 4
86009: PLUS
86010: PUSH
86011: LD_INT 0
86013: PUSH
86014: EMPTY
86015: LIST
86016: LIST
86017: LIST
86018: PUSH
86019: LD_VAR 0 1
86023: PUSH
86024: LD_INT 3
86026: PLUS
86027: PUSH
86028: LD_VAR 0 2
86032: PUSH
86033: LD_INT 3
86035: PLUS
86036: PUSH
86037: LD_INT 5
86039: PUSH
86040: EMPTY
86041: LIST
86042: LIST
86043: LIST
86044: PUSH
86045: LD_VAR 0 1
86049: PUSH
86050: LD_INT 4
86052: PLUS
86053: PUSH
86054: LD_VAR 0 2
86058: PUSH
86059: LD_INT 4
86061: PUSH
86062: EMPTY
86063: LIST
86064: LIST
86065: LIST
86066: PUSH
86067: LD_VAR 0 1
86071: PUSH
86072: LD_VAR 0 2
86076: PUSH
86077: LD_INT 3
86079: MINUS
86080: PUSH
86081: LD_INT 3
86083: PUSH
86084: EMPTY
86085: LIST
86086: LIST
86087: LIST
86088: PUSH
86089: LD_VAR 0 1
86093: PUSH
86094: LD_INT 4
86096: MINUS
86097: PUSH
86098: LD_VAR 0 2
86102: PUSH
86103: LD_INT 4
86105: MINUS
86106: PUSH
86107: LD_INT 2
86109: PUSH
86110: EMPTY
86111: LIST
86112: LIST
86113: LIST
86114: PUSH
86115: EMPTY
86116: LIST
86117: LIST
86118: LIST
86119: LIST
86120: LIST
86121: ST_TO_ADDR
// end ; 5 :
86122: GO 86262
86124: LD_INT 5
86126: DOUBLE
86127: EQUAL
86128: IFTRUE 86132
86130: GO 86261
86132: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
86133: LD_ADDR_VAR 0 5
86137: PUSH
86138: LD_VAR 0 1
86142: PUSH
86143: LD_INT 4
86145: MINUS
86146: PUSH
86147: LD_VAR 0 2
86151: PUSH
86152: LD_INT 1
86154: PUSH
86155: EMPTY
86156: LIST
86157: LIST
86158: LIST
86159: PUSH
86160: LD_VAR 0 1
86164: PUSH
86165: LD_VAR 0 2
86169: PUSH
86170: LD_INT 4
86172: MINUS
86173: PUSH
86174: LD_INT 3
86176: PUSH
86177: EMPTY
86178: LIST
86179: LIST
86180: LIST
86181: PUSH
86182: LD_VAR 0 1
86186: PUSH
86187: LD_INT 4
86189: PLUS
86190: PUSH
86191: LD_VAR 0 2
86195: PUSH
86196: LD_INT 4
86198: PLUS
86199: PUSH
86200: LD_INT 5
86202: PUSH
86203: EMPTY
86204: LIST
86205: LIST
86206: LIST
86207: PUSH
86208: LD_VAR 0 1
86212: PUSH
86213: LD_INT 3
86215: PLUS
86216: PUSH
86217: LD_VAR 0 2
86221: PUSH
86222: LD_INT 4
86224: PUSH
86225: EMPTY
86226: LIST
86227: LIST
86228: LIST
86229: PUSH
86230: LD_VAR 0 1
86234: PUSH
86235: LD_VAR 0 2
86239: PUSH
86240: LD_INT 3
86242: PLUS
86243: PUSH
86244: LD_INT 0
86246: PUSH
86247: EMPTY
86248: LIST
86249: LIST
86250: LIST
86251: PUSH
86252: EMPTY
86253: LIST
86254: LIST
86255: LIST
86256: LIST
86257: LIST
86258: ST_TO_ADDR
// end ; end ;
86259: GO 86262
86261: POP
// result := list ;
86262: LD_ADDR_VAR 0 4
86266: PUSH
86267: LD_VAR 0 5
86271: ST_TO_ADDR
// end ;
86272: LD_VAR 0 4
86276: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
86277: LD_INT 0
86279: PPUSH
86280: PPUSH
86281: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
86282: LD_VAR 0 1
86286: NOT
86287: PUSH
86288: LD_VAR 0 2
86292: PUSH
86293: LD_INT 1
86295: PUSH
86296: LD_INT 2
86298: PUSH
86299: LD_INT 3
86301: PUSH
86302: LD_INT 4
86304: PUSH
86305: EMPTY
86306: LIST
86307: LIST
86308: LIST
86309: LIST
86310: IN
86311: NOT
86312: OR
86313: IFFALSE 86317
// exit ;
86315: GO 86400
// tmp := [ ] ;
86317: LD_ADDR_VAR 0 5
86321: PUSH
86322: EMPTY
86323: ST_TO_ADDR
// for i in units do
86324: LD_ADDR_VAR 0 4
86328: PUSH
86329: LD_VAR 0 1
86333: PUSH
86334: FOR_IN
86335: IFFALSE 86369
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
86337: LD_ADDR_VAR 0 5
86341: PUSH
86342: LD_VAR 0 5
86346: PPUSH
86347: LD_VAR 0 4
86351: PPUSH
86352: LD_VAR 0 2
86356: PPUSH
86357: CALL_OW 259
86361: PPUSH
86362: CALL 87761 0 2
86366: ST_TO_ADDR
86367: GO 86334
86369: POP
86370: POP
// if not tmp then
86371: LD_VAR 0 5
86375: NOT
86376: IFFALSE 86380
// exit ;
86378: GO 86400
// result := SortListByListDesc ( units , tmp ) ;
86380: LD_ADDR_VAR 0 3
86384: PUSH
86385: LD_VAR 0 1
86389: PPUSH
86390: LD_VAR 0 5
86394: PPUSH
86395: CALL_OW 77
86399: ST_TO_ADDR
// end ;
86400: LD_VAR 0 3
86404: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
86405: LD_INT 0
86407: PPUSH
86408: PPUSH
86409: PPUSH
// result := false ;
86410: LD_ADDR_VAR 0 3
86414: PUSH
86415: LD_INT 0
86417: ST_TO_ADDR
// if not building then
86418: LD_VAR 0 2
86422: NOT
86423: IFFALSE 86427
// exit ;
86425: GO 86565
// x := GetX ( building ) ;
86427: LD_ADDR_VAR 0 4
86431: PUSH
86432: LD_VAR 0 2
86436: PPUSH
86437: CALL_OW 250
86441: ST_TO_ADDR
// y := GetY ( building ) ;
86442: LD_ADDR_VAR 0 5
86446: PUSH
86447: LD_VAR 0 2
86451: PPUSH
86452: CALL_OW 251
86456: ST_TO_ADDR
// if not x or not y then
86457: LD_VAR 0 4
86461: NOT
86462: PUSH
86463: LD_VAR 0 5
86467: NOT
86468: OR
86469: IFFALSE 86473
// exit ;
86471: GO 86565
// if GetTaskList ( unit ) then
86473: LD_VAR 0 1
86477: PPUSH
86478: CALL_OW 437
86482: IFFALSE 86565
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
86484: LD_STRING e
86486: PUSH
86487: LD_VAR 0 1
86491: PPUSH
86492: CALL_OW 437
86496: PUSH
86497: LD_INT 1
86499: ARRAY
86500: PUSH
86501: LD_INT 1
86503: ARRAY
86504: EQUAL
86505: PUSH
86506: LD_VAR 0 4
86510: PUSH
86511: LD_VAR 0 1
86515: PPUSH
86516: CALL_OW 437
86520: PUSH
86521: LD_INT 1
86523: ARRAY
86524: PUSH
86525: LD_INT 2
86527: ARRAY
86528: EQUAL
86529: AND
86530: PUSH
86531: LD_VAR 0 5
86535: PUSH
86536: LD_VAR 0 1
86540: PPUSH
86541: CALL_OW 437
86545: PUSH
86546: LD_INT 1
86548: ARRAY
86549: PUSH
86550: LD_INT 3
86552: ARRAY
86553: EQUAL
86554: AND
86555: IFFALSE 86565
// result := true end ;
86557: LD_ADDR_VAR 0 3
86561: PUSH
86562: LD_INT 1
86564: ST_TO_ADDR
// end ;
86565: LD_VAR 0 3
86569: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
86570: LD_INT 0
86572: PPUSH
// result := false ;
86573: LD_ADDR_VAR 0 4
86577: PUSH
86578: LD_INT 0
86580: ST_TO_ADDR
// if GetTaskList ( unit ) then
86581: LD_VAR 0 1
86585: PPUSH
86586: CALL_OW 437
86590: IFFALSE 86673
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
86592: LD_STRING M
86594: PUSH
86595: LD_VAR 0 1
86599: PPUSH
86600: CALL_OW 437
86604: PUSH
86605: LD_INT 1
86607: ARRAY
86608: PUSH
86609: LD_INT 1
86611: ARRAY
86612: EQUAL
86613: PUSH
86614: LD_VAR 0 2
86618: PUSH
86619: LD_VAR 0 1
86623: PPUSH
86624: CALL_OW 437
86628: PUSH
86629: LD_INT 1
86631: ARRAY
86632: PUSH
86633: LD_INT 2
86635: ARRAY
86636: EQUAL
86637: AND
86638: PUSH
86639: LD_VAR 0 3
86643: PUSH
86644: LD_VAR 0 1
86648: PPUSH
86649: CALL_OW 437
86653: PUSH
86654: LD_INT 1
86656: ARRAY
86657: PUSH
86658: LD_INT 3
86660: ARRAY
86661: EQUAL
86662: AND
86663: IFFALSE 86673
// result := true ;
86665: LD_ADDR_VAR 0 4
86669: PUSH
86670: LD_INT 1
86672: ST_TO_ADDR
// end ; end ;
86673: LD_VAR 0 4
86677: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
86678: LD_INT 0
86680: PPUSH
86681: PPUSH
86682: PPUSH
86683: PPUSH
// if not unit or not area then
86684: LD_VAR 0 1
86688: NOT
86689: PUSH
86690: LD_VAR 0 2
86694: NOT
86695: OR
86696: IFFALSE 86700
// exit ;
86698: GO 86864
// tmp := AreaToList ( area , i ) ;
86700: LD_ADDR_VAR 0 6
86704: PUSH
86705: LD_VAR 0 2
86709: PPUSH
86710: LD_VAR 0 5
86714: PPUSH
86715: CALL_OW 517
86719: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
86720: LD_ADDR_VAR 0 5
86724: PUSH
86725: DOUBLE
86726: LD_INT 1
86728: DEC
86729: ST_TO_ADDR
86730: LD_VAR 0 6
86734: PUSH
86735: LD_INT 1
86737: ARRAY
86738: PUSH
86739: FOR_TO
86740: IFFALSE 86862
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
86742: LD_ADDR_VAR 0 7
86746: PUSH
86747: LD_VAR 0 6
86751: PUSH
86752: LD_INT 1
86754: ARRAY
86755: PUSH
86756: LD_VAR 0 5
86760: ARRAY
86761: PUSH
86762: LD_VAR 0 6
86766: PUSH
86767: LD_INT 2
86769: ARRAY
86770: PUSH
86771: LD_VAR 0 5
86775: ARRAY
86776: PUSH
86777: EMPTY
86778: LIST
86779: LIST
86780: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
86781: LD_VAR 0 7
86785: PUSH
86786: LD_INT 1
86788: ARRAY
86789: PPUSH
86790: LD_VAR 0 7
86794: PUSH
86795: LD_INT 2
86797: ARRAY
86798: PPUSH
86799: CALL_OW 428
86803: PUSH
86804: LD_INT 0
86806: EQUAL
86807: IFFALSE 86860
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
86809: LD_VAR 0 1
86813: PPUSH
86814: LD_VAR 0 7
86818: PUSH
86819: LD_INT 1
86821: ARRAY
86822: PPUSH
86823: LD_VAR 0 7
86827: PUSH
86828: LD_INT 2
86830: ARRAY
86831: PPUSH
86832: LD_VAR 0 3
86836: PPUSH
86837: CALL_OW 48
// result := IsPlaced ( unit ) ;
86841: LD_ADDR_VAR 0 4
86845: PUSH
86846: LD_VAR 0 1
86850: PPUSH
86851: CALL_OW 305
86855: ST_TO_ADDR
// exit ;
86856: POP
86857: POP
86858: GO 86864
// end ; end ;
86860: GO 86739
86862: POP
86863: POP
// end ;
86864: LD_VAR 0 4
86868: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
86869: LD_INT 0
86871: PPUSH
86872: PPUSH
86873: PPUSH
// if not side or side > 8 then
86874: LD_VAR 0 1
86878: NOT
86879: PUSH
86880: LD_VAR 0 1
86884: PUSH
86885: LD_INT 8
86887: GREATER
86888: OR
86889: IFFALSE 86893
// exit ;
86891: GO 87080
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
86893: LD_ADDR_VAR 0 4
86897: PUSH
86898: LD_INT 22
86900: PUSH
86901: LD_VAR 0 1
86905: PUSH
86906: EMPTY
86907: LIST
86908: LIST
86909: PUSH
86910: LD_INT 21
86912: PUSH
86913: LD_INT 3
86915: PUSH
86916: EMPTY
86917: LIST
86918: LIST
86919: PUSH
86920: EMPTY
86921: LIST
86922: LIST
86923: PPUSH
86924: CALL_OW 69
86928: ST_TO_ADDR
// if not tmp then
86929: LD_VAR 0 4
86933: NOT
86934: IFFALSE 86938
// exit ;
86936: GO 87080
// enable_addtolog := true ;
86938: LD_ADDR_OWVAR 81
86942: PUSH
86943: LD_INT 1
86945: ST_TO_ADDR
// AddToLog ( [ ) ;
86946: LD_STRING [
86948: PPUSH
86949: CALL_OW 561
// for i in tmp do
86953: LD_ADDR_VAR 0 3
86957: PUSH
86958: LD_VAR 0 4
86962: PUSH
86963: FOR_IN
86964: IFFALSE 87071
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
86966: LD_STRING [
86968: PUSH
86969: LD_VAR 0 3
86973: PPUSH
86974: CALL_OW 266
86978: STR
86979: PUSH
86980: LD_STRING , 
86982: STR
86983: PUSH
86984: LD_VAR 0 3
86988: PPUSH
86989: CALL_OW 250
86993: STR
86994: PUSH
86995: LD_STRING , 
86997: STR
86998: PUSH
86999: LD_VAR 0 3
87003: PPUSH
87004: CALL_OW 251
87008: STR
87009: PUSH
87010: LD_STRING , 
87012: STR
87013: PUSH
87014: LD_VAR 0 3
87018: PPUSH
87019: CALL_OW 254
87023: STR
87024: PUSH
87025: LD_STRING , 
87027: STR
87028: PUSH
87029: LD_VAR 0 3
87033: PPUSH
87034: LD_INT 1
87036: PPUSH
87037: CALL_OW 268
87041: STR
87042: PUSH
87043: LD_STRING , 
87045: STR
87046: PUSH
87047: LD_VAR 0 3
87051: PPUSH
87052: LD_INT 2
87054: PPUSH
87055: CALL_OW 268
87059: STR
87060: PUSH
87061: LD_STRING ],
87063: STR
87064: PPUSH
87065: CALL_OW 561
// end ;
87069: GO 86963
87071: POP
87072: POP
// AddToLog ( ]; ) ;
87073: LD_STRING ];
87075: PPUSH
87076: CALL_OW 561
// end ;
87080: LD_VAR 0 2
87084: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
87085: LD_INT 0
87087: PPUSH
87088: PPUSH
87089: PPUSH
87090: PPUSH
87091: PPUSH
// if not area or not rate or not max then
87092: LD_VAR 0 1
87096: NOT
87097: PUSH
87098: LD_VAR 0 2
87102: NOT
87103: OR
87104: PUSH
87105: LD_VAR 0 4
87109: NOT
87110: OR
87111: IFFALSE 87115
// exit ;
87113: GO 87304
// while 1 do
87115: LD_INT 1
87117: IFFALSE 87304
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
87119: LD_ADDR_VAR 0 9
87123: PUSH
87124: LD_VAR 0 1
87128: PPUSH
87129: LD_INT 1
87131: PPUSH
87132: CALL_OW 287
87136: PUSH
87137: LD_INT 10
87139: MUL
87140: ST_TO_ADDR
// r := rate / 10 ;
87141: LD_ADDR_VAR 0 7
87145: PUSH
87146: LD_VAR 0 2
87150: PUSH
87151: LD_INT 10
87153: DIVREAL
87154: ST_TO_ADDR
// time := 1 1$00 ;
87155: LD_ADDR_VAR 0 8
87159: PUSH
87160: LD_INT 2100
87162: ST_TO_ADDR
// if amount < min then
87163: LD_VAR 0 9
87167: PUSH
87168: LD_VAR 0 3
87172: LESS
87173: IFFALSE 87191
// r := r * 2 else
87175: LD_ADDR_VAR 0 7
87179: PUSH
87180: LD_VAR 0 7
87184: PUSH
87185: LD_INT 2
87187: MUL
87188: ST_TO_ADDR
87189: GO 87217
// if amount > max then
87191: LD_VAR 0 9
87195: PUSH
87196: LD_VAR 0 4
87200: GREATER
87201: IFFALSE 87217
// r := r / 2 ;
87203: LD_ADDR_VAR 0 7
87207: PUSH
87208: LD_VAR 0 7
87212: PUSH
87213: LD_INT 2
87215: DIVREAL
87216: ST_TO_ADDR
// time := time / r ;
87217: LD_ADDR_VAR 0 8
87221: PUSH
87222: LD_VAR 0 8
87226: PUSH
87227: LD_VAR 0 7
87231: DIVREAL
87232: ST_TO_ADDR
// if time < 0 then
87233: LD_VAR 0 8
87237: PUSH
87238: LD_INT 0
87240: LESS
87241: IFFALSE 87258
// time := time * - 1 ;
87243: LD_ADDR_VAR 0 8
87247: PUSH
87248: LD_VAR 0 8
87252: PUSH
87253: LD_INT 1
87255: NEG
87256: MUL
87257: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
87258: LD_VAR 0 8
87262: PUSH
87263: LD_INT 35
87265: PPUSH
87266: LD_INT 875
87268: PPUSH
87269: CALL_OW 12
87273: PLUS
87274: PPUSH
87275: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
87279: LD_INT 1
87281: PPUSH
87282: LD_INT 5
87284: PPUSH
87285: CALL_OW 12
87289: PPUSH
87290: LD_VAR 0 1
87294: PPUSH
87295: LD_INT 1
87297: PPUSH
87298: CALL_OW 55
// end ;
87302: GO 87115
// end ;
87304: LD_VAR 0 5
87308: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
87309: LD_INT 0
87311: PPUSH
87312: PPUSH
87313: PPUSH
87314: PPUSH
87315: PPUSH
87316: PPUSH
87317: PPUSH
87318: PPUSH
// if not turrets or not factories then
87319: LD_VAR 0 1
87323: NOT
87324: PUSH
87325: LD_VAR 0 2
87329: NOT
87330: OR
87331: IFFALSE 87335
// exit ;
87333: GO 87642
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
87335: LD_ADDR_VAR 0 10
87339: PUSH
87340: LD_INT 5
87342: PUSH
87343: LD_INT 6
87345: PUSH
87346: EMPTY
87347: LIST
87348: LIST
87349: PUSH
87350: LD_INT 2
87352: PUSH
87353: LD_INT 4
87355: PUSH
87356: EMPTY
87357: LIST
87358: LIST
87359: PUSH
87360: LD_INT 3
87362: PUSH
87363: LD_INT 5
87365: PUSH
87366: EMPTY
87367: LIST
87368: LIST
87369: PUSH
87370: EMPTY
87371: LIST
87372: LIST
87373: LIST
87374: PUSH
87375: LD_INT 24
87377: PUSH
87378: LD_INT 25
87380: PUSH
87381: EMPTY
87382: LIST
87383: LIST
87384: PUSH
87385: LD_INT 23
87387: PUSH
87388: LD_INT 27
87390: PUSH
87391: EMPTY
87392: LIST
87393: LIST
87394: PUSH
87395: EMPTY
87396: LIST
87397: LIST
87398: PUSH
87399: LD_INT 42
87401: PUSH
87402: LD_INT 43
87404: PUSH
87405: EMPTY
87406: LIST
87407: LIST
87408: PUSH
87409: LD_INT 44
87411: PUSH
87412: LD_INT 46
87414: PUSH
87415: EMPTY
87416: LIST
87417: LIST
87418: PUSH
87419: LD_INT 45
87421: PUSH
87422: LD_INT 47
87424: PUSH
87425: EMPTY
87426: LIST
87427: LIST
87428: PUSH
87429: EMPTY
87430: LIST
87431: LIST
87432: LIST
87433: PUSH
87434: EMPTY
87435: LIST
87436: LIST
87437: LIST
87438: ST_TO_ADDR
// result := [ ] ;
87439: LD_ADDR_VAR 0 3
87443: PUSH
87444: EMPTY
87445: ST_TO_ADDR
// for i in turrets do
87446: LD_ADDR_VAR 0 4
87450: PUSH
87451: LD_VAR 0 1
87455: PUSH
87456: FOR_IN
87457: IFFALSE 87640
// begin nat := GetNation ( i ) ;
87459: LD_ADDR_VAR 0 7
87463: PUSH
87464: LD_VAR 0 4
87468: PPUSH
87469: CALL_OW 248
87473: ST_TO_ADDR
// weapon := 0 ;
87474: LD_ADDR_VAR 0 8
87478: PUSH
87479: LD_INT 0
87481: ST_TO_ADDR
// if not nat then
87482: LD_VAR 0 7
87486: NOT
87487: IFFALSE 87491
// continue ;
87489: GO 87456
// for j in list [ nat ] do
87491: LD_ADDR_VAR 0 5
87495: PUSH
87496: LD_VAR 0 10
87500: PUSH
87501: LD_VAR 0 7
87505: ARRAY
87506: PUSH
87507: FOR_IN
87508: IFFALSE 87549
// if GetBWeapon ( i ) = j [ 1 ] then
87510: LD_VAR 0 4
87514: PPUSH
87515: CALL_OW 269
87519: PUSH
87520: LD_VAR 0 5
87524: PUSH
87525: LD_INT 1
87527: ARRAY
87528: EQUAL
87529: IFFALSE 87547
// begin weapon := j [ 2 ] ;
87531: LD_ADDR_VAR 0 8
87535: PUSH
87536: LD_VAR 0 5
87540: PUSH
87541: LD_INT 2
87543: ARRAY
87544: ST_TO_ADDR
// break ;
87545: GO 87549
// end ;
87547: GO 87507
87549: POP
87550: POP
// if not weapon then
87551: LD_VAR 0 8
87555: NOT
87556: IFFALSE 87560
// continue ;
87558: GO 87456
// for k in factories do
87560: LD_ADDR_VAR 0 6
87564: PUSH
87565: LD_VAR 0 2
87569: PUSH
87570: FOR_IN
87571: IFFALSE 87636
// begin weapons := AvailableWeaponList ( k ) ;
87573: LD_ADDR_VAR 0 9
87577: PUSH
87578: LD_VAR 0 6
87582: PPUSH
87583: CALL_OW 478
87587: ST_TO_ADDR
// if not weapons then
87588: LD_VAR 0 9
87592: NOT
87593: IFFALSE 87597
// continue ;
87595: GO 87570
// if weapon in weapons then
87597: LD_VAR 0 8
87601: PUSH
87602: LD_VAR 0 9
87606: IN
87607: IFFALSE 87634
// begin result := [ i , weapon ] ;
87609: LD_ADDR_VAR 0 3
87613: PUSH
87614: LD_VAR 0 4
87618: PUSH
87619: LD_VAR 0 8
87623: PUSH
87624: EMPTY
87625: LIST
87626: LIST
87627: ST_TO_ADDR
// exit ;
87628: POP
87629: POP
87630: POP
87631: POP
87632: GO 87642
// end ; end ;
87634: GO 87570
87636: POP
87637: POP
// end ;
87638: GO 87456
87640: POP
87641: POP
// end ;
87642: LD_VAR 0 3
87646: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
87647: LD_INT 0
87649: PPUSH
// if not side or side > 8 then
87650: LD_VAR 0 3
87654: NOT
87655: PUSH
87656: LD_VAR 0 3
87660: PUSH
87661: LD_INT 8
87663: GREATER
87664: OR
87665: IFFALSE 87669
// exit ;
87667: GO 87728
// if not range then
87669: LD_VAR 0 4
87673: NOT
87674: IFFALSE 87685
// range := - 12 ;
87676: LD_ADDR_VAR 0 4
87680: PUSH
87681: LD_INT 12
87683: NEG
87684: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
87685: LD_VAR 0 1
87689: PPUSH
87690: LD_VAR 0 2
87694: PPUSH
87695: LD_VAR 0 3
87699: PPUSH
87700: LD_VAR 0 4
87704: PPUSH
87705: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
87709: LD_VAR 0 1
87713: PPUSH
87714: LD_VAR 0 2
87718: PPUSH
87719: LD_VAR 0 3
87723: PPUSH
87724: CALL_OW 331
// end ;
87728: LD_VAR 0 5
87732: RET
// export function Video ( mode ) ; begin
87733: LD_INT 0
87735: PPUSH
// ingame_video = mode ;
87736: LD_ADDR_OWVAR 52
87740: PUSH
87741: LD_VAR 0 1
87745: ST_TO_ADDR
// interface_hidden = mode ;
87746: LD_ADDR_OWVAR 54
87750: PUSH
87751: LD_VAR 0 1
87755: ST_TO_ADDR
// end ;
87756: LD_VAR 0 2
87760: RET
// export function Join ( array , element ) ; begin
87761: LD_INT 0
87763: PPUSH
// result := Replace ( array , array + 1 , element ) ;
87764: LD_ADDR_VAR 0 3
87768: PUSH
87769: LD_VAR 0 1
87773: PPUSH
87774: LD_VAR 0 1
87778: PUSH
87779: LD_INT 1
87781: PLUS
87782: PPUSH
87783: LD_VAR 0 2
87787: PPUSH
87788: CALL_OW 1
87792: ST_TO_ADDR
// end ;
87793: LD_VAR 0 3
87797: RET
// export function JoinUnion ( array , element ) ; begin
87798: LD_INT 0
87800: PPUSH
// result := array union element ;
87801: LD_ADDR_VAR 0 3
87805: PUSH
87806: LD_VAR 0 1
87810: PUSH
87811: LD_VAR 0 2
87815: UNION
87816: ST_TO_ADDR
// end ;
87817: LD_VAR 0 3
87821: RET
// export function GetBehemoths ( side ) ; begin
87822: LD_INT 0
87824: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
87825: LD_ADDR_VAR 0 2
87829: PUSH
87830: LD_INT 22
87832: PUSH
87833: LD_VAR 0 1
87837: PUSH
87838: EMPTY
87839: LIST
87840: LIST
87841: PUSH
87842: LD_INT 31
87844: PUSH
87845: LD_INT 25
87847: PUSH
87848: EMPTY
87849: LIST
87850: LIST
87851: PUSH
87852: EMPTY
87853: LIST
87854: LIST
87855: PPUSH
87856: CALL_OW 69
87860: ST_TO_ADDR
// end ;
87861: LD_VAR 0 2
87865: RET
// export function Shuffle ( array ) ; var i , index ; begin
87866: LD_INT 0
87868: PPUSH
87869: PPUSH
87870: PPUSH
// result := [ ] ;
87871: LD_ADDR_VAR 0 2
87875: PUSH
87876: EMPTY
87877: ST_TO_ADDR
// if not array then
87878: LD_VAR 0 1
87882: NOT
87883: IFFALSE 87887
// exit ;
87885: GO 87986
// Randomize ;
87887: CALL_OW 10
// for i = array downto 1 do
87891: LD_ADDR_VAR 0 3
87895: PUSH
87896: DOUBLE
87897: LD_VAR 0 1
87901: INC
87902: ST_TO_ADDR
87903: LD_INT 1
87905: PUSH
87906: FOR_DOWNTO
87907: IFFALSE 87984
// begin index := rand ( 1 , array ) ;
87909: LD_ADDR_VAR 0 4
87913: PUSH
87914: LD_INT 1
87916: PPUSH
87917: LD_VAR 0 1
87921: PPUSH
87922: CALL_OW 12
87926: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
87927: LD_ADDR_VAR 0 2
87931: PUSH
87932: LD_VAR 0 2
87936: PPUSH
87937: LD_VAR 0 2
87941: PUSH
87942: LD_INT 1
87944: PLUS
87945: PPUSH
87946: LD_VAR 0 1
87950: PUSH
87951: LD_VAR 0 4
87955: ARRAY
87956: PPUSH
87957: CALL_OW 2
87961: ST_TO_ADDR
// array := Delete ( array , index ) ;
87962: LD_ADDR_VAR 0 1
87966: PUSH
87967: LD_VAR 0 1
87971: PPUSH
87972: LD_VAR 0 4
87976: PPUSH
87977: CALL_OW 3
87981: ST_TO_ADDR
// end ;
87982: GO 87906
87984: POP
87985: POP
// end ;
87986: LD_VAR 0 2
87990: RET
// export function GetBaseMaterials ( base ) ; begin
87991: LD_INT 0
87993: PPUSH
// result := [ 0 , 0 , 0 ] ;
87994: LD_ADDR_VAR 0 2
87998: PUSH
87999: LD_INT 0
88001: PUSH
88002: LD_INT 0
88004: PUSH
88005: LD_INT 0
88007: PUSH
88008: EMPTY
88009: LIST
88010: LIST
88011: LIST
88012: ST_TO_ADDR
// if not base then
88013: LD_VAR 0 1
88017: NOT
88018: IFFALSE 88022
// exit ;
88020: GO 88071
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
88022: LD_ADDR_VAR 0 2
88026: PUSH
88027: LD_VAR 0 1
88031: PPUSH
88032: LD_INT 1
88034: PPUSH
88035: CALL_OW 275
88039: PUSH
88040: LD_VAR 0 1
88044: PPUSH
88045: LD_INT 2
88047: PPUSH
88048: CALL_OW 275
88052: PUSH
88053: LD_VAR 0 1
88057: PPUSH
88058: LD_INT 3
88060: PPUSH
88061: CALL_OW 275
88065: PUSH
88066: EMPTY
88067: LIST
88068: LIST
88069: LIST
88070: ST_TO_ADDR
// end ;
88071: LD_VAR 0 2
88075: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
88076: LD_INT 0
88078: PPUSH
88079: PPUSH
// result := array ;
88080: LD_ADDR_VAR 0 3
88084: PUSH
88085: LD_VAR 0 1
88089: ST_TO_ADDR
// if size >= result then
88090: LD_VAR 0 2
88094: PUSH
88095: LD_VAR 0 3
88099: GREATEREQUAL
88100: IFFALSE 88104
// exit ;
88102: GO 88154
// if size then
88104: LD_VAR 0 2
88108: IFFALSE 88154
// for i := array downto size do
88110: LD_ADDR_VAR 0 4
88114: PUSH
88115: DOUBLE
88116: LD_VAR 0 1
88120: INC
88121: ST_TO_ADDR
88122: LD_VAR 0 2
88126: PUSH
88127: FOR_DOWNTO
88128: IFFALSE 88152
// result := Delete ( result , result ) ;
88130: LD_ADDR_VAR 0 3
88134: PUSH
88135: LD_VAR 0 3
88139: PPUSH
88140: LD_VAR 0 3
88144: PPUSH
88145: CALL_OW 3
88149: ST_TO_ADDR
88150: GO 88127
88152: POP
88153: POP
// end ;
88154: LD_VAR 0 3
88158: RET
// export function ComExit ( unit ) ; var tmp ; begin
88159: LD_INT 0
88161: PPUSH
88162: PPUSH
// if not IsInUnit ( unit ) then
88163: LD_VAR 0 1
88167: PPUSH
88168: CALL_OW 310
88172: NOT
88173: IFFALSE 88177
// exit ;
88175: GO 88237
// tmp := IsInUnit ( unit ) ;
88177: LD_ADDR_VAR 0 3
88181: PUSH
88182: LD_VAR 0 1
88186: PPUSH
88187: CALL_OW 310
88191: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
88192: LD_VAR 0 3
88196: PPUSH
88197: CALL_OW 247
88201: PUSH
88202: LD_INT 2
88204: EQUAL
88205: IFFALSE 88218
// ComExitVehicle ( unit ) else
88207: LD_VAR 0 1
88211: PPUSH
88212: CALL_OW 121
88216: GO 88227
// ComExitBuilding ( unit ) ;
88218: LD_VAR 0 1
88222: PPUSH
88223: CALL_OW 122
// result := tmp ;
88227: LD_ADDR_VAR 0 2
88231: PUSH
88232: LD_VAR 0 3
88236: ST_TO_ADDR
// end ;
88237: LD_VAR 0 2
88241: RET
// export function ComExitAll ( units ) ; var i ; begin
88242: LD_INT 0
88244: PPUSH
88245: PPUSH
// if not units then
88246: LD_VAR 0 1
88250: NOT
88251: IFFALSE 88255
// exit ;
88253: GO 88281
// for i in units do
88255: LD_ADDR_VAR 0 3
88259: PUSH
88260: LD_VAR 0 1
88264: PUSH
88265: FOR_IN
88266: IFFALSE 88279
// ComExit ( i ) ;
88268: LD_VAR 0 3
88272: PPUSH
88273: CALL 88159 0 1
88277: GO 88265
88279: POP
88280: POP
// end ;
88281: LD_VAR 0 2
88285: RET
// export function ResetHc ; begin
88286: LD_INT 0
88288: PPUSH
// InitHc ;
88289: CALL_OW 19
// hc_importance := 0 ;
88293: LD_ADDR_OWVAR 32
88297: PUSH
88298: LD_INT 0
88300: ST_TO_ADDR
// end ;
88301: LD_VAR 0 1
88305: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
88306: LD_INT 0
88308: PPUSH
88309: PPUSH
88310: PPUSH
// _x := ( x1 + x2 ) div 2 ;
88311: LD_ADDR_VAR 0 6
88315: PUSH
88316: LD_VAR 0 1
88320: PUSH
88321: LD_VAR 0 3
88325: PLUS
88326: PUSH
88327: LD_INT 2
88329: DIV
88330: ST_TO_ADDR
// if _x < 0 then
88331: LD_VAR 0 6
88335: PUSH
88336: LD_INT 0
88338: LESS
88339: IFFALSE 88356
// _x := _x * - 1 ;
88341: LD_ADDR_VAR 0 6
88345: PUSH
88346: LD_VAR 0 6
88350: PUSH
88351: LD_INT 1
88353: NEG
88354: MUL
88355: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
88356: LD_ADDR_VAR 0 7
88360: PUSH
88361: LD_VAR 0 2
88365: PUSH
88366: LD_VAR 0 4
88370: PLUS
88371: PUSH
88372: LD_INT 2
88374: DIV
88375: ST_TO_ADDR
// if _y < 0 then
88376: LD_VAR 0 7
88380: PUSH
88381: LD_INT 0
88383: LESS
88384: IFFALSE 88401
// _y := _y * - 1 ;
88386: LD_ADDR_VAR 0 7
88390: PUSH
88391: LD_VAR 0 7
88395: PUSH
88396: LD_INT 1
88398: NEG
88399: MUL
88400: ST_TO_ADDR
// result := [ _x , _y ] ;
88401: LD_ADDR_VAR 0 5
88405: PUSH
88406: LD_VAR 0 6
88410: PUSH
88411: LD_VAR 0 7
88415: PUSH
88416: EMPTY
88417: LIST
88418: LIST
88419: ST_TO_ADDR
// end ;
88420: LD_VAR 0 5
88424: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
88425: LD_INT 0
88427: PPUSH
88428: PPUSH
88429: PPUSH
88430: PPUSH
// task := GetTaskList ( unit ) ;
88431: LD_ADDR_VAR 0 7
88435: PUSH
88436: LD_VAR 0 1
88440: PPUSH
88441: CALL_OW 437
88445: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
88446: LD_VAR 0 7
88450: NOT
88451: PUSH
88452: LD_VAR 0 1
88456: PPUSH
88457: LD_VAR 0 2
88461: PPUSH
88462: CALL_OW 308
88466: NOT
88467: AND
88468: IFFALSE 88472
// exit ;
88470: GO 88590
// if IsInArea ( unit , area ) then
88472: LD_VAR 0 1
88476: PPUSH
88477: LD_VAR 0 2
88481: PPUSH
88482: CALL_OW 308
88486: IFFALSE 88504
// begin ComMoveToArea ( unit , goAway ) ;
88488: LD_VAR 0 1
88492: PPUSH
88493: LD_VAR 0 3
88497: PPUSH
88498: CALL_OW 113
// exit ;
88502: GO 88590
// end ; if task [ 1 ] [ 1 ] <> M then
88504: LD_VAR 0 7
88508: PUSH
88509: LD_INT 1
88511: ARRAY
88512: PUSH
88513: LD_INT 1
88515: ARRAY
88516: PUSH
88517: LD_STRING M
88519: NONEQUAL
88520: IFFALSE 88524
// exit ;
88522: GO 88590
// x := task [ 1 ] [ 2 ] ;
88524: LD_ADDR_VAR 0 5
88528: PUSH
88529: LD_VAR 0 7
88533: PUSH
88534: LD_INT 1
88536: ARRAY
88537: PUSH
88538: LD_INT 2
88540: ARRAY
88541: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
88542: LD_ADDR_VAR 0 6
88546: PUSH
88547: LD_VAR 0 7
88551: PUSH
88552: LD_INT 1
88554: ARRAY
88555: PUSH
88556: LD_INT 3
88558: ARRAY
88559: ST_TO_ADDR
// if InArea ( x , y , area ) then
88560: LD_VAR 0 5
88564: PPUSH
88565: LD_VAR 0 6
88569: PPUSH
88570: LD_VAR 0 2
88574: PPUSH
88575: CALL_OW 309
88579: IFFALSE 88590
// ComStop ( unit ) ;
88581: LD_VAR 0 1
88585: PPUSH
88586: CALL_OW 141
// end ;
88590: LD_VAR 0 4
88594: RET
// export function Abs ( value ) ; begin
88595: LD_INT 0
88597: PPUSH
// result := value ;
88598: LD_ADDR_VAR 0 2
88602: PUSH
88603: LD_VAR 0 1
88607: ST_TO_ADDR
// if value < 0 then
88608: LD_VAR 0 1
88612: PUSH
88613: LD_INT 0
88615: LESS
88616: IFFALSE 88633
// result := value * - 1 ;
88618: LD_ADDR_VAR 0 2
88622: PUSH
88623: LD_VAR 0 1
88627: PUSH
88628: LD_INT 1
88630: NEG
88631: MUL
88632: ST_TO_ADDR
// end ;
88633: LD_VAR 0 2
88637: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
88638: LD_INT 0
88640: PPUSH
88641: PPUSH
88642: PPUSH
88643: PPUSH
88644: PPUSH
88645: PPUSH
88646: PPUSH
88647: PPUSH
// if not unit or not building then
88648: LD_VAR 0 1
88652: NOT
88653: PUSH
88654: LD_VAR 0 2
88658: NOT
88659: OR
88660: IFFALSE 88664
// exit ;
88662: GO 88890
// x := GetX ( building ) ;
88664: LD_ADDR_VAR 0 4
88668: PUSH
88669: LD_VAR 0 2
88673: PPUSH
88674: CALL_OW 250
88678: ST_TO_ADDR
// y := GetY ( building ) ;
88679: LD_ADDR_VAR 0 6
88683: PUSH
88684: LD_VAR 0 2
88688: PPUSH
88689: CALL_OW 251
88693: ST_TO_ADDR
// d := GetDir ( building ) ;
88694: LD_ADDR_VAR 0 8
88698: PUSH
88699: LD_VAR 0 2
88703: PPUSH
88704: CALL_OW 254
88708: ST_TO_ADDR
// r := 4 ;
88709: LD_ADDR_VAR 0 9
88713: PUSH
88714: LD_INT 4
88716: ST_TO_ADDR
// for i := 1 to 5 do
88717: LD_ADDR_VAR 0 10
88721: PUSH
88722: DOUBLE
88723: LD_INT 1
88725: DEC
88726: ST_TO_ADDR
88727: LD_INT 5
88729: PUSH
88730: FOR_TO
88731: IFFALSE 88888
// begin _x := ShiftX ( x , d , r + i ) ;
88733: LD_ADDR_VAR 0 5
88737: PUSH
88738: LD_VAR 0 4
88742: PPUSH
88743: LD_VAR 0 8
88747: PPUSH
88748: LD_VAR 0 9
88752: PUSH
88753: LD_VAR 0 10
88757: PLUS
88758: PPUSH
88759: CALL_OW 272
88763: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
88764: LD_ADDR_VAR 0 7
88768: PUSH
88769: LD_VAR 0 6
88773: PPUSH
88774: LD_VAR 0 8
88778: PPUSH
88779: LD_VAR 0 9
88783: PUSH
88784: LD_VAR 0 10
88788: PLUS
88789: PPUSH
88790: CALL_OW 273
88794: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
88795: LD_VAR 0 5
88799: PPUSH
88800: LD_VAR 0 7
88804: PPUSH
88805: CALL_OW 488
88809: PUSH
88810: LD_VAR 0 5
88814: PPUSH
88815: LD_VAR 0 7
88819: PPUSH
88820: CALL_OW 428
88824: PPUSH
88825: CALL_OW 247
88829: PUSH
88830: LD_INT 3
88832: PUSH
88833: LD_INT 2
88835: PUSH
88836: EMPTY
88837: LIST
88838: LIST
88839: IN
88840: NOT
88841: AND
88842: IFFALSE 88886
// begin ComMoveXY ( unit , _x , _y ) ;
88844: LD_VAR 0 1
88848: PPUSH
88849: LD_VAR 0 5
88853: PPUSH
88854: LD_VAR 0 7
88858: PPUSH
88859: CALL_OW 111
// result := [ _x , _y ] ;
88863: LD_ADDR_VAR 0 3
88867: PUSH
88868: LD_VAR 0 5
88872: PUSH
88873: LD_VAR 0 7
88877: PUSH
88878: EMPTY
88879: LIST
88880: LIST
88881: ST_TO_ADDR
// exit ;
88882: POP
88883: POP
88884: GO 88890
// end ; end ;
88886: GO 88730
88888: POP
88889: POP
// end ;
88890: LD_VAR 0 3
88894: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
88895: LD_INT 0
88897: PPUSH
88898: PPUSH
88899: PPUSH
// result := 0 ;
88900: LD_ADDR_VAR 0 3
88904: PUSH
88905: LD_INT 0
88907: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
88908: LD_VAR 0 1
88912: PUSH
88913: LD_INT 0
88915: LESS
88916: PUSH
88917: LD_VAR 0 1
88921: PUSH
88922: LD_INT 8
88924: GREATER
88925: OR
88926: PUSH
88927: LD_VAR 0 2
88931: PUSH
88932: LD_INT 0
88934: LESS
88935: OR
88936: PUSH
88937: LD_VAR 0 2
88941: PUSH
88942: LD_INT 8
88944: GREATER
88945: OR
88946: IFFALSE 88950
// exit ;
88948: GO 89025
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
88950: LD_ADDR_VAR 0 4
88954: PUSH
88955: LD_INT 22
88957: PUSH
88958: LD_VAR 0 2
88962: PUSH
88963: EMPTY
88964: LIST
88965: LIST
88966: PPUSH
88967: CALL_OW 69
88971: PUSH
88972: FOR_IN
88973: IFFALSE 89023
// begin un := UnitShoot ( i ) ;
88975: LD_ADDR_VAR 0 5
88979: PUSH
88980: LD_VAR 0 4
88984: PPUSH
88985: CALL_OW 504
88989: ST_TO_ADDR
// if GetSide ( un ) = side1 then
88990: LD_VAR 0 5
88994: PPUSH
88995: CALL_OW 255
88999: PUSH
89000: LD_VAR 0 1
89004: EQUAL
89005: IFFALSE 89021
// begin result := un ;
89007: LD_ADDR_VAR 0 3
89011: PUSH
89012: LD_VAR 0 5
89016: ST_TO_ADDR
// exit ;
89017: POP
89018: POP
89019: GO 89025
// end ; end ;
89021: GO 88972
89023: POP
89024: POP
// end ;
89025: LD_VAR 0 3
89029: RET
// export function GetCargoBay ( units ) ; begin
89030: LD_INT 0
89032: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
89033: LD_ADDR_VAR 0 2
89037: PUSH
89038: LD_VAR 0 1
89042: PPUSH
89043: LD_INT 2
89045: PUSH
89046: LD_INT 34
89048: PUSH
89049: LD_INT 12
89051: PUSH
89052: EMPTY
89053: LIST
89054: LIST
89055: PUSH
89056: LD_INT 34
89058: PUSH
89059: LD_INT 51
89061: PUSH
89062: EMPTY
89063: LIST
89064: LIST
89065: PUSH
89066: LD_INT 34
89068: PUSH
89069: LD_INT 32
89071: PUSH
89072: EMPTY
89073: LIST
89074: LIST
89075: PUSH
89076: LD_INT 34
89078: PUSH
89079: LD_INT 89
89081: PUSH
89082: EMPTY
89083: LIST
89084: LIST
89085: PUSH
89086: EMPTY
89087: LIST
89088: LIST
89089: LIST
89090: LIST
89091: LIST
89092: PPUSH
89093: CALL_OW 72
89097: ST_TO_ADDR
// end ;
89098: LD_VAR 0 2
89102: RET
// export function Negate ( value ) ; begin
89103: LD_INT 0
89105: PPUSH
// result := not value ;
89106: LD_ADDR_VAR 0 2
89110: PUSH
89111: LD_VAR 0 1
89115: NOT
89116: ST_TO_ADDR
// end ;
89117: LD_VAR 0 2
89121: RET
// export function Inc ( value ) ; begin
89122: LD_INT 0
89124: PPUSH
// result := value + 1 ;
89125: LD_ADDR_VAR 0 2
89129: PUSH
89130: LD_VAR 0 1
89134: PUSH
89135: LD_INT 1
89137: PLUS
89138: ST_TO_ADDR
// end ;
89139: LD_VAR 0 2
89143: RET
// export function Dec ( value ) ; begin
89144: LD_INT 0
89146: PPUSH
// result := value - 1 ;
89147: LD_ADDR_VAR 0 2
89151: PUSH
89152: LD_VAR 0 1
89156: PUSH
89157: LD_INT 1
89159: MINUS
89160: ST_TO_ADDR
// end ;
89161: LD_VAR 0 2
89165: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
89166: LD_INT 0
89168: PPUSH
89169: PPUSH
89170: PPUSH
89171: PPUSH
89172: PPUSH
89173: PPUSH
89174: PPUSH
89175: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
89176: LD_VAR 0 1
89180: PPUSH
89181: LD_VAR 0 2
89185: PPUSH
89186: CALL_OW 488
89190: NOT
89191: PUSH
89192: LD_VAR 0 3
89196: PPUSH
89197: LD_VAR 0 4
89201: PPUSH
89202: CALL_OW 488
89206: NOT
89207: OR
89208: IFFALSE 89221
// begin result := - 1 ;
89210: LD_ADDR_VAR 0 5
89214: PUSH
89215: LD_INT 1
89217: NEG
89218: ST_TO_ADDR
// exit ;
89219: GO 89456
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
89221: LD_ADDR_VAR 0 12
89225: PUSH
89226: LD_VAR 0 1
89230: PPUSH
89231: LD_VAR 0 2
89235: PPUSH
89236: LD_VAR 0 3
89240: PPUSH
89241: LD_VAR 0 4
89245: PPUSH
89246: CALL 88306 0 4
89250: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
89251: LD_ADDR_VAR 0 11
89255: PUSH
89256: LD_VAR 0 1
89260: PPUSH
89261: LD_VAR 0 2
89265: PPUSH
89266: LD_VAR 0 12
89270: PUSH
89271: LD_INT 1
89273: ARRAY
89274: PPUSH
89275: LD_VAR 0 12
89279: PUSH
89280: LD_INT 2
89282: ARRAY
89283: PPUSH
89284: CALL_OW 298
89288: ST_TO_ADDR
// distance := 9999 ;
89289: LD_ADDR_VAR 0 10
89293: PUSH
89294: LD_INT 9999
89296: ST_TO_ADDR
// for i := 0 to 5 do
89297: LD_ADDR_VAR 0 6
89301: PUSH
89302: DOUBLE
89303: LD_INT 0
89305: DEC
89306: ST_TO_ADDR
89307: LD_INT 5
89309: PUSH
89310: FOR_TO
89311: IFFALSE 89454
// begin _x := ShiftX ( x1 , i , centerDist ) ;
89313: LD_ADDR_VAR 0 7
89317: PUSH
89318: LD_VAR 0 1
89322: PPUSH
89323: LD_VAR 0 6
89327: PPUSH
89328: LD_VAR 0 11
89332: PPUSH
89333: CALL_OW 272
89337: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
89338: LD_ADDR_VAR 0 8
89342: PUSH
89343: LD_VAR 0 2
89347: PPUSH
89348: LD_VAR 0 6
89352: PPUSH
89353: LD_VAR 0 11
89357: PPUSH
89358: CALL_OW 273
89362: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
89363: LD_VAR 0 7
89367: PPUSH
89368: LD_VAR 0 8
89372: PPUSH
89373: CALL_OW 488
89377: NOT
89378: IFFALSE 89382
// continue ;
89380: GO 89310
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
89382: LD_ADDR_VAR 0 9
89386: PUSH
89387: LD_VAR 0 12
89391: PUSH
89392: LD_INT 1
89394: ARRAY
89395: PPUSH
89396: LD_VAR 0 12
89400: PUSH
89401: LD_INT 2
89403: ARRAY
89404: PPUSH
89405: LD_VAR 0 7
89409: PPUSH
89410: LD_VAR 0 8
89414: PPUSH
89415: CALL_OW 298
89419: ST_TO_ADDR
// if tmp < distance then
89420: LD_VAR 0 9
89424: PUSH
89425: LD_VAR 0 10
89429: LESS
89430: IFFALSE 89452
// begin result := i ;
89432: LD_ADDR_VAR 0 5
89436: PUSH
89437: LD_VAR 0 6
89441: ST_TO_ADDR
// distance := tmp ;
89442: LD_ADDR_VAR 0 10
89446: PUSH
89447: LD_VAR 0 9
89451: ST_TO_ADDR
// end ; end ;
89452: GO 89310
89454: POP
89455: POP
// end ;
89456: LD_VAR 0 5
89460: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
89461: LD_INT 0
89463: PPUSH
89464: PPUSH
// if not driver or not IsInUnit ( driver ) then
89465: LD_VAR 0 1
89469: NOT
89470: PUSH
89471: LD_VAR 0 1
89475: PPUSH
89476: CALL_OW 310
89480: NOT
89481: OR
89482: IFFALSE 89486
// exit ;
89484: GO 89576
// vehicle := IsInUnit ( driver ) ;
89486: LD_ADDR_VAR 0 3
89490: PUSH
89491: LD_VAR 0 1
89495: PPUSH
89496: CALL_OW 310
89500: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
89501: LD_VAR 0 1
89505: PPUSH
89506: LD_STRING \
89508: PUSH
89509: LD_INT 0
89511: PUSH
89512: LD_INT 0
89514: PUSH
89515: LD_INT 0
89517: PUSH
89518: LD_INT 0
89520: PUSH
89521: LD_INT 0
89523: PUSH
89524: LD_INT 0
89526: PUSH
89527: EMPTY
89528: LIST
89529: LIST
89530: LIST
89531: LIST
89532: LIST
89533: LIST
89534: LIST
89535: PUSH
89536: LD_STRING E
89538: PUSH
89539: LD_INT 0
89541: PUSH
89542: LD_INT 0
89544: PUSH
89545: LD_VAR 0 3
89549: PUSH
89550: LD_INT 0
89552: PUSH
89553: LD_INT 0
89555: PUSH
89556: LD_INT 0
89558: PUSH
89559: EMPTY
89560: LIST
89561: LIST
89562: LIST
89563: LIST
89564: LIST
89565: LIST
89566: LIST
89567: PUSH
89568: EMPTY
89569: LIST
89570: LIST
89571: PPUSH
89572: CALL_OW 446
// end ;
89576: LD_VAR 0 2
89580: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
89581: LD_INT 0
89583: PPUSH
89584: PPUSH
// if not driver or not IsInUnit ( driver ) then
89585: LD_VAR 0 1
89589: NOT
89590: PUSH
89591: LD_VAR 0 1
89595: PPUSH
89596: CALL_OW 310
89600: NOT
89601: OR
89602: IFFALSE 89606
// exit ;
89604: GO 89696
// vehicle := IsInUnit ( driver ) ;
89606: LD_ADDR_VAR 0 3
89610: PUSH
89611: LD_VAR 0 1
89615: PPUSH
89616: CALL_OW 310
89620: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
89621: LD_VAR 0 1
89625: PPUSH
89626: LD_STRING \
89628: PUSH
89629: LD_INT 0
89631: PUSH
89632: LD_INT 0
89634: PUSH
89635: LD_INT 0
89637: PUSH
89638: LD_INT 0
89640: PUSH
89641: LD_INT 0
89643: PUSH
89644: LD_INT 0
89646: PUSH
89647: EMPTY
89648: LIST
89649: LIST
89650: LIST
89651: LIST
89652: LIST
89653: LIST
89654: LIST
89655: PUSH
89656: LD_STRING E
89658: PUSH
89659: LD_INT 0
89661: PUSH
89662: LD_INT 0
89664: PUSH
89665: LD_VAR 0 3
89669: PUSH
89670: LD_INT 0
89672: PUSH
89673: LD_INT 0
89675: PUSH
89676: LD_INT 0
89678: PUSH
89679: EMPTY
89680: LIST
89681: LIST
89682: LIST
89683: LIST
89684: LIST
89685: LIST
89686: LIST
89687: PUSH
89688: EMPTY
89689: LIST
89690: LIST
89691: PPUSH
89692: CALL_OW 447
// end ;
89696: LD_VAR 0 2
89700: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
89701: LD_INT 0
89703: PPUSH
89704: PPUSH
89705: PPUSH
// tmp := [ ] ;
89706: LD_ADDR_VAR 0 5
89710: PUSH
89711: EMPTY
89712: ST_TO_ADDR
// for i in units do
89713: LD_ADDR_VAR 0 4
89717: PUSH
89718: LD_VAR 0 1
89722: PUSH
89723: FOR_IN
89724: IFFALSE 89762
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
89726: LD_ADDR_VAR 0 5
89730: PUSH
89731: LD_VAR 0 5
89735: PPUSH
89736: LD_VAR 0 5
89740: PUSH
89741: LD_INT 1
89743: PLUS
89744: PPUSH
89745: LD_VAR 0 4
89749: PPUSH
89750: CALL_OW 256
89754: PPUSH
89755: CALL_OW 2
89759: ST_TO_ADDR
89760: GO 89723
89762: POP
89763: POP
// if not tmp then
89764: LD_VAR 0 5
89768: NOT
89769: IFFALSE 89773
// exit ;
89771: GO 89821
// if asc then
89773: LD_VAR 0 2
89777: IFFALSE 89801
// result := SortListByListAsc ( units , tmp ) else
89779: LD_ADDR_VAR 0 3
89783: PUSH
89784: LD_VAR 0 1
89788: PPUSH
89789: LD_VAR 0 5
89793: PPUSH
89794: CALL_OW 76
89798: ST_TO_ADDR
89799: GO 89821
// result := SortListByListDesc ( units , tmp ) ;
89801: LD_ADDR_VAR 0 3
89805: PUSH
89806: LD_VAR 0 1
89810: PPUSH
89811: LD_VAR 0 5
89815: PPUSH
89816: CALL_OW 77
89820: ST_TO_ADDR
// end ;
89821: LD_VAR 0 3
89825: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
89826: LD_INT 0
89828: PPUSH
89829: PPUSH
// task := GetTaskList ( mech ) ;
89830: LD_ADDR_VAR 0 4
89834: PUSH
89835: LD_VAR 0 1
89839: PPUSH
89840: CALL_OW 437
89844: ST_TO_ADDR
// if not task then
89845: LD_VAR 0 4
89849: NOT
89850: IFFALSE 89854
// exit ;
89852: GO 89896
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
89854: LD_ADDR_VAR 0 3
89858: PUSH
89859: LD_VAR 0 4
89863: PUSH
89864: LD_INT 1
89866: ARRAY
89867: PUSH
89868: LD_INT 1
89870: ARRAY
89871: PUSH
89872: LD_STRING r
89874: EQUAL
89875: PUSH
89876: LD_VAR 0 4
89880: PUSH
89881: LD_INT 1
89883: ARRAY
89884: PUSH
89885: LD_INT 4
89887: ARRAY
89888: PUSH
89889: LD_VAR 0 2
89893: EQUAL
89894: AND
89895: ST_TO_ADDR
// end ;
89896: LD_VAR 0 3
89900: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
89901: LD_INT 0
89903: PPUSH
// SetDir ( unit , d ) ;
89904: LD_VAR 0 1
89908: PPUSH
89909: LD_VAR 0 4
89913: PPUSH
89914: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
89918: LD_VAR 0 1
89922: PPUSH
89923: LD_VAR 0 2
89927: PPUSH
89928: LD_VAR 0 3
89932: PPUSH
89933: LD_VAR 0 5
89937: PPUSH
89938: CALL_OW 48
// end ;
89942: LD_VAR 0 6
89946: RET
// export function ToNaturalNumber ( number ) ; begin
89947: LD_INT 0
89949: PPUSH
// result := number div 1 ;
89950: LD_ADDR_VAR 0 2
89954: PUSH
89955: LD_VAR 0 1
89959: PUSH
89960: LD_INT 1
89962: DIV
89963: ST_TO_ADDR
// if number < 0 then
89964: LD_VAR 0 1
89968: PUSH
89969: LD_INT 0
89971: LESS
89972: IFFALSE 89982
// result := 0 ;
89974: LD_ADDR_VAR 0 2
89978: PUSH
89979: LD_INT 0
89981: ST_TO_ADDR
// end ;
89982: LD_VAR 0 2
89986: RET
// export function SortByClass ( units , class ) ; var un ; begin
89987: LD_INT 0
89989: PPUSH
89990: PPUSH
// if not units or not class then
89991: LD_VAR 0 1
89995: NOT
89996: PUSH
89997: LD_VAR 0 2
90001: NOT
90002: OR
90003: IFFALSE 90007
// exit ;
90005: GO 90102
// result := [ ] ;
90007: LD_ADDR_VAR 0 3
90011: PUSH
90012: EMPTY
90013: ST_TO_ADDR
// for un in units do
90014: LD_ADDR_VAR 0 4
90018: PUSH
90019: LD_VAR 0 1
90023: PUSH
90024: FOR_IN
90025: IFFALSE 90100
// if GetClass ( un ) = class then
90027: LD_VAR 0 4
90031: PPUSH
90032: CALL_OW 257
90036: PUSH
90037: LD_VAR 0 2
90041: EQUAL
90042: IFFALSE 90069
// result := Insert ( result , 1 , un ) else
90044: LD_ADDR_VAR 0 3
90048: PUSH
90049: LD_VAR 0 3
90053: PPUSH
90054: LD_INT 1
90056: PPUSH
90057: LD_VAR 0 4
90061: PPUSH
90062: CALL_OW 2
90066: ST_TO_ADDR
90067: GO 90098
// result := Replace ( result , result + 1 , un ) ;
90069: LD_ADDR_VAR 0 3
90073: PUSH
90074: LD_VAR 0 3
90078: PPUSH
90079: LD_VAR 0 3
90083: PUSH
90084: LD_INT 1
90086: PLUS
90087: PPUSH
90088: LD_VAR 0 4
90092: PPUSH
90093: CALL_OW 1
90097: ST_TO_ADDR
90098: GO 90024
90100: POP
90101: POP
// end ;
90102: LD_VAR 0 3
90106: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
90107: LD_INT 0
90109: PPUSH
90110: PPUSH
90111: PPUSH
90112: PPUSH
90113: PPUSH
90114: PPUSH
90115: PPUSH
// result := [ ] ;
90116: LD_ADDR_VAR 0 4
90120: PUSH
90121: EMPTY
90122: ST_TO_ADDR
// if x - r < 0 then
90123: LD_VAR 0 1
90127: PUSH
90128: LD_VAR 0 3
90132: MINUS
90133: PUSH
90134: LD_INT 0
90136: LESS
90137: IFFALSE 90149
// min_x := 0 else
90139: LD_ADDR_VAR 0 8
90143: PUSH
90144: LD_INT 0
90146: ST_TO_ADDR
90147: GO 90165
// min_x := x - r ;
90149: LD_ADDR_VAR 0 8
90153: PUSH
90154: LD_VAR 0 1
90158: PUSH
90159: LD_VAR 0 3
90163: MINUS
90164: ST_TO_ADDR
// if y - r < 0 then
90165: LD_VAR 0 2
90169: PUSH
90170: LD_VAR 0 3
90174: MINUS
90175: PUSH
90176: LD_INT 0
90178: LESS
90179: IFFALSE 90191
// min_y := 0 else
90181: LD_ADDR_VAR 0 7
90185: PUSH
90186: LD_INT 0
90188: ST_TO_ADDR
90189: GO 90207
// min_y := y - r ;
90191: LD_ADDR_VAR 0 7
90195: PUSH
90196: LD_VAR 0 2
90200: PUSH
90201: LD_VAR 0 3
90205: MINUS
90206: ST_TO_ADDR
// max_x := x + r ;
90207: LD_ADDR_VAR 0 9
90211: PUSH
90212: LD_VAR 0 1
90216: PUSH
90217: LD_VAR 0 3
90221: PLUS
90222: ST_TO_ADDR
// max_y := y + r ;
90223: LD_ADDR_VAR 0 10
90227: PUSH
90228: LD_VAR 0 2
90232: PUSH
90233: LD_VAR 0 3
90237: PLUS
90238: ST_TO_ADDR
// for _x = min_x to max_x do
90239: LD_ADDR_VAR 0 5
90243: PUSH
90244: DOUBLE
90245: LD_VAR 0 8
90249: DEC
90250: ST_TO_ADDR
90251: LD_VAR 0 9
90255: PUSH
90256: FOR_TO
90257: IFFALSE 90358
// for _y = min_y to max_y do
90259: LD_ADDR_VAR 0 6
90263: PUSH
90264: DOUBLE
90265: LD_VAR 0 7
90269: DEC
90270: ST_TO_ADDR
90271: LD_VAR 0 10
90275: PUSH
90276: FOR_TO
90277: IFFALSE 90354
// begin if not ValidHex ( _x , _y ) then
90279: LD_VAR 0 5
90283: PPUSH
90284: LD_VAR 0 6
90288: PPUSH
90289: CALL_OW 488
90293: NOT
90294: IFFALSE 90298
// continue ;
90296: GO 90276
// if GetResourceTypeXY ( _x , _y ) then
90298: LD_VAR 0 5
90302: PPUSH
90303: LD_VAR 0 6
90307: PPUSH
90308: CALL_OW 283
90312: IFFALSE 90352
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
90314: LD_ADDR_VAR 0 4
90318: PUSH
90319: LD_VAR 0 4
90323: PPUSH
90324: LD_VAR 0 4
90328: PUSH
90329: LD_INT 1
90331: PLUS
90332: PPUSH
90333: LD_VAR 0 5
90337: PUSH
90338: LD_VAR 0 6
90342: PUSH
90343: EMPTY
90344: LIST
90345: LIST
90346: PPUSH
90347: CALL_OW 1
90351: ST_TO_ADDR
// end ;
90352: GO 90276
90354: POP
90355: POP
90356: GO 90256
90358: POP
90359: POP
// end ;
90360: LD_VAR 0 4
90364: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
90365: LD_INT 0
90367: PPUSH
90368: PPUSH
90369: PPUSH
90370: PPUSH
90371: PPUSH
90372: PPUSH
90373: PPUSH
90374: PPUSH
// if not units then
90375: LD_VAR 0 1
90379: NOT
90380: IFFALSE 90384
// exit ;
90382: GO 90908
// result := UnitFilter ( units , [ f_ok ] ) ;
90384: LD_ADDR_VAR 0 3
90388: PUSH
90389: LD_VAR 0 1
90393: PPUSH
90394: LD_INT 50
90396: PUSH
90397: EMPTY
90398: LIST
90399: PPUSH
90400: CALL_OW 72
90404: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
90405: LD_ADDR_VAR 0 8
90409: PUSH
90410: LD_VAR 0 1
90414: PUSH
90415: LD_INT 1
90417: ARRAY
90418: PPUSH
90419: CALL_OW 255
90423: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
90424: LD_ADDR_VAR 0 10
90428: PUSH
90429: LD_INT 29
90431: PUSH
90432: LD_INT 91
90434: PUSH
90435: LD_INT 49
90437: PUSH
90438: EMPTY
90439: LIST
90440: LIST
90441: LIST
90442: ST_TO_ADDR
// if not result then
90443: LD_VAR 0 3
90447: NOT
90448: IFFALSE 90452
// exit ;
90450: GO 90908
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
90452: LD_ADDR_VAR 0 5
90456: PUSH
90457: LD_INT 81
90459: PUSH
90460: LD_VAR 0 8
90464: PUSH
90465: EMPTY
90466: LIST
90467: LIST
90468: PPUSH
90469: CALL_OW 69
90473: ST_TO_ADDR
// for i in result do
90474: LD_ADDR_VAR 0 4
90478: PUSH
90479: LD_VAR 0 3
90483: PUSH
90484: FOR_IN
90485: IFFALSE 90906
// begin tag := GetTag ( i ) + 1 ;
90487: LD_ADDR_VAR 0 9
90491: PUSH
90492: LD_VAR 0 4
90496: PPUSH
90497: CALL_OW 110
90501: PUSH
90502: LD_INT 1
90504: PLUS
90505: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
90506: LD_ADDR_VAR 0 7
90510: PUSH
90511: LD_VAR 0 4
90515: PPUSH
90516: CALL_OW 250
90520: PPUSH
90521: LD_VAR 0 4
90525: PPUSH
90526: CALL_OW 251
90530: PPUSH
90531: LD_INT 6
90533: PPUSH
90534: CALL 90107 0 3
90538: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
90539: LD_VAR 0 4
90543: PPUSH
90544: CALL_OW 247
90548: PUSH
90549: LD_INT 2
90551: EQUAL
90552: PUSH
90553: LD_VAR 0 7
90557: AND
90558: PUSH
90559: LD_VAR 0 4
90563: PPUSH
90564: CALL_OW 264
90568: PUSH
90569: LD_VAR 0 10
90573: IN
90574: NOT
90575: AND
90576: IFFALSE 90615
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
90578: LD_VAR 0 4
90582: PPUSH
90583: LD_VAR 0 7
90587: PUSH
90588: LD_INT 1
90590: ARRAY
90591: PUSH
90592: LD_INT 1
90594: ARRAY
90595: PPUSH
90596: LD_VAR 0 7
90600: PUSH
90601: LD_INT 1
90603: ARRAY
90604: PUSH
90605: LD_INT 2
90607: ARRAY
90608: PPUSH
90609: CALL_OW 116
90613: GO 90904
// if path > tag then
90615: LD_VAR 0 2
90619: PUSH
90620: LD_VAR 0 9
90624: GREATER
90625: IFFALSE 90833
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
90627: LD_ADDR_VAR 0 6
90631: PUSH
90632: LD_VAR 0 5
90636: PPUSH
90637: LD_INT 91
90639: PUSH
90640: LD_VAR 0 4
90644: PUSH
90645: LD_INT 8
90647: PUSH
90648: EMPTY
90649: LIST
90650: LIST
90651: LIST
90652: PPUSH
90653: CALL_OW 72
90657: ST_TO_ADDR
// if nearEnemy then
90658: LD_VAR 0 6
90662: IFFALSE 90731
// begin if GetWeapon ( i ) = ru_time_lapser then
90664: LD_VAR 0 4
90668: PPUSH
90669: CALL_OW 264
90673: PUSH
90674: LD_INT 49
90676: EQUAL
90677: IFFALSE 90705
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
90679: LD_VAR 0 4
90683: PPUSH
90684: LD_VAR 0 6
90688: PPUSH
90689: LD_VAR 0 4
90693: PPUSH
90694: CALL_OW 74
90698: PPUSH
90699: CALL_OW 112
90703: GO 90729
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
90705: LD_VAR 0 4
90709: PPUSH
90710: LD_VAR 0 6
90714: PPUSH
90715: LD_VAR 0 4
90719: PPUSH
90720: CALL_OW 74
90724: PPUSH
90725: CALL_OW 115
// end else
90729: GO 90831
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
90731: LD_VAR 0 4
90735: PPUSH
90736: LD_VAR 0 2
90740: PUSH
90741: LD_VAR 0 9
90745: ARRAY
90746: PUSH
90747: LD_INT 1
90749: ARRAY
90750: PPUSH
90751: LD_VAR 0 2
90755: PUSH
90756: LD_VAR 0 9
90760: ARRAY
90761: PUSH
90762: LD_INT 2
90764: ARRAY
90765: PPUSH
90766: CALL_OW 297
90770: PUSH
90771: LD_INT 6
90773: GREATER
90774: IFFALSE 90817
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
90776: LD_VAR 0 4
90780: PPUSH
90781: LD_VAR 0 2
90785: PUSH
90786: LD_VAR 0 9
90790: ARRAY
90791: PUSH
90792: LD_INT 1
90794: ARRAY
90795: PPUSH
90796: LD_VAR 0 2
90800: PUSH
90801: LD_VAR 0 9
90805: ARRAY
90806: PUSH
90807: LD_INT 2
90809: ARRAY
90810: PPUSH
90811: CALL_OW 114
90815: GO 90831
// SetTag ( i , tag ) ;
90817: LD_VAR 0 4
90821: PPUSH
90822: LD_VAR 0 9
90826: PPUSH
90827: CALL_OW 109
// end else
90831: GO 90904
// if enemy then
90833: LD_VAR 0 5
90837: IFFALSE 90904
// begin if GetWeapon ( i ) = ru_time_lapser then
90839: LD_VAR 0 4
90843: PPUSH
90844: CALL_OW 264
90848: PUSH
90849: LD_INT 49
90851: EQUAL
90852: IFFALSE 90880
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
90854: LD_VAR 0 4
90858: PPUSH
90859: LD_VAR 0 5
90863: PPUSH
90864: LD_VAR 0 4
90868: PPUSH
90869: CALL_OW 74
90873: PPUSH
90874: CALL_OW 112
90878: GO 90904
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
90880: LD_VAR 0 4
90884: PPUSH
90885: LD_VAR 0 5
90889: PPUSH
90890: LD_VAR 0 4
90894: PPUSH
90895: CALL_OW 74
90899: PPUSH
90900: CALL_OW 115
// end ; end ;
90904: GO 90484
90906: POP
90907: POP
// end ;
90908: LD_VAR 0 3
90912: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
90913: LD_INT 0
90915: PPUSH
90916: PPUSH
90917: PPUSH
// if not unit or IsInUnit ( unit ) then
90918: LD_VAR 0 1
90922: NOT
90923: PUSH
90924: LD_VAR 0 1
90928: PPUSH
90929: CALL_OW 310
90933: OR
90934: IFFALSE 90938
// exit ;
90936: GO 91029
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
90938: LD_ADDR_VAR 0 4
90942: PUSH
90943: LD_VAR 0 1
90947: PPUSH
90948: CALL_OW 250
90952: PPUSH
90953: LD_VAR 0 2
90957: PPUSH
90958: LD_INT 1
90960: PPUSH
90961: CALL_OW 272
90965: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
90966: LD_ADDR_VAR 0 5
90970: PUSH
90971: LD_VAR 0 1
90975: PPUSH
90976: CALL_OW 251
90980: PPUSH
90981: LD_VAR 0 2
90985: PPUSH
90986: LD_INT 1
90988: PPUSH
90989: CALL_OW 273
90993: ST_TO_ADDR
// if ValidHex ( x , y ) then
90994: LD_VAR 0 4
90998: PPUSH
90999: LD_VAR 0 5
91003: PPUSH
91004: CALL_OW 488
91008: IFFALSE 91029
// ComTurnXY ( unit , x , y ) ;
91010: LD_VAR 0 1
91014: PPUSH
91015: LD_VAR 0 4
91019: PPUSH
91020: LD_VAR 0 5
91024: PPUSH
91025: CALL_OW 118
// end ;
91029: LD_VAR 0 3
91033: RET
// export function SeeUnits ( side , units ) ; var i ; begin
91034: LD_INT 0
91036: PPUSH
91037: PPUSH
// result := false ;
91038: LD_ADDR_VAR 0 3
91042: PUSH
91043: LD_INT 0
91045: ST_TO_ADDR
// if not units then
91046: LD_VAR 0 2
91050: NOT
91051: IFFALSE 91055
// exit ;
91053: GO 91100
// for i in units do
91055: LD_ADDR_VAR 0 4
91059: PUSH
91060: LD_VAR 0 2
91064: PUSH
91065: FOR_IN
91066: IFFALSE 91098
// if See ( side , i ) then
91068: LD_VAR 0 1
91072: PPUSH
91073: LD_VAR 0 4
91077: PPUSH
91078: CALL_OW 292
91082: IFFALSE 91096
// begin result := true ;
91084: LD_ADDR_VAR 0 3
91088: PUSH
91089: LD_INT 1
91091: ST_TO_ADDR
// exit ;
91092: POP
91093: POP
91094: GO 91100
// end ;
91096: GO 91065
91098: POP
91099: POP
// end ;
91100: LD_VAR 0 3
91104: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
91105: LD_INT 0
91107: PPUSH
91108: PPUSH
91109: PPUSH
91110: PPUSH
// if not unit or not points then
91111: LD_VAR 0 1
91115: NOT
91116: PUSH
91117: LD_VAR 0 2
91121: NOT
91122: OR
91123: IFFALSE 91127
// exit ;
91125: GO 91217
// dist := 99999 ;
91127: LD_ADDR_VAR 0 5
91131: PUSH
91132: LD_INT 99999
91134: ST_TO_ADDR
// for i in points do
91135: LD_ADDR_VAR 0 4
91139: PUSH
91140: LD_VAR 0 2
91144: PUSH
91145: FOR_IN
91146: IFFALSE 91215
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
91148: LD_ADDR_VAR 0 6
91152: PUSH
91153: LD_VAR 0 1
91157: PPUSH
91158: LD_VAR 0 4
91162: PUSH
91163: LD_INT 1
91165: ARRAY
91166: PPUSH
91167: LD_VAR 0 4
91171: PUSH
91172: LD_INT 2
91174: ARRAY
91175: PPUSH
91176: CALL_OW 297
91180: ST_TO_ADDR
// if tmpDist < dist then
91181: LD_VAR 0 6
91185: PUSH
91186: LD_VAR 0 5
91190: LESS
91191: IFFALSE 91213
// begin result := i ;
91193: LD_ADDR_VAR 0 3
91197: PUSH
91198: LD_VAR 0 4
91202: ST_TO_ADDR
// dist := tmpDist ;
91203: LD_ADDR_VAR 0 5
91207: PUSH
91208: LD_VAR 0 6
91212: ST_TO_ADDR
// end ; end ;
91213: GO 91145
91215: POP
91216: POP
// end ;
91217: LD_VAR 0 3
91221: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
91222: LD_INT 0
91224: PPUSH
// uc_side := side ;
91225: LD_ADDR_OWVAR 20
91229: PUSH
91230: LD_VAR 0 1
91234: ST_TO_ADDR
// uc_nation := 3 ;
91235: LD_ADDR_OWVAR 21
91239: PUSH
91240: LD_INT 3
91242: ST_TO_ADDR
// vc_chassis := 25 ;
91243: LD_ADDR_OWVAR 37
91247: PUSH
91248: LD_INT 25
91250: ST_TO_ADDR
// vc_engine := engine_siberite ;
91251: LD_ADDR_OWVAR 39
91255: PUSH
91256: LD_INT 3
91258: ST_TO_ADDR
// vc_control := control_computer ;
91259: LD_ADDR_OWVAR 38
91263: PUSH
91264: LD_INT 3
91266: ST_TO_ADDR
// vc_weapon := 59 ;
91267: LD_ADDR_OWVAR 40
91271: PUSH
91272: LD_INT 59
91274: ST_TO_ADDR
// result := CreateVehicle ;
91275: LD_ADDR_VAR 0 5
91279: PUSH
91280: CALL_OW 45
91284: ST_TO_ADDR
// SetDir ( result , d ) ;
91285: LD_VAR 0 5
91289: PPUSH
91290: LD_VAR 0 4
91294: PPUSH
91295: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
91299: LD_VAR 0 5
91303: PPUSH
91304: LD_VAR 0 2
91308: PPUSH
91309: LD_VAR 0 3
91313: PPUSH
91314: LD_INT 0
91316: PPUSH
91317: CALL_OW 48
// end ;
91321: LD_VAR 0 5
91325: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
91326: LD_INT 0
91328: PPUSH
91329: PPUSH
91330: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
91331: LD_ADDR_VAR 0 2
91335: PUSH
91336: LD_INT 0
91338: PUSH
91339: LD_INT 0
91341: PUSH
91342: LD_INT 0
91344: PUSH
91345: LD_INT 0
91347: PUSH
91348: EMPTY
91349: LIST
91350: LIST
91351: LIST
91352: LIST
91353: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
91354: LD_VAR 0 1
91358: NOT
91359: PUSH
91360: LD_VAR 0 1
91364: PPUSH
91365: CALL_OW 264
91369: PUSH
91370: LD_INT 12
91372: PUSH
91373: LD_INT 51
91375: PUSH
91376: LD_INT 32
91378: PUSH
91379: LD_INT 89
91381: PUSH
91382: EMPTY
91383: LIST
91384: LIST
91385: LIST
91386: LIST
91387: IN
91388: NOT
91389: OR
91390: IFFALSE 91394
// exit ;
91392: GO 91492
// for i := 1 to 3 do
91394: LD_ADDR_VAR 0 3
91398: PUSH
91399: DOUBLE
91400: LD_INT 1
91402: DEC
91403: ST_TO_ADDR
91404: LD_INT 3
91406: PUSH
91407: FOR_TO
91408: IFFALSE 91490
// begin tmp := GetCargo ( cargo , i ) ;
91410: LD_ADDR_VAR 0 4
91414: PUSH
91415: LD_VAR 0 1
91419: PPUSH
91420: LD_VAR 0 3
91424: PPUSH
91425: CALL_OW 289
91429: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
91430: LD_ADDR_VAR 0 2
91434: PUSH
91435: LD_VAR 0 2
91439: PPUSH
91440: LD_VAR 0 3
91444: PPUSH
91445: LD_VAR 0 4
91449: PPUSH
91450: CALL_OW 1
91454: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
91455: LD_ADDR_VAR 0 2
91459: PUSH
91460: LD_VAR 0 2
91464: PPUSH
91465: LD_INT 4
91467: PPUSH
91468: LD_VAR 0 2
91472: PUSH
91473: LD_INT 4
91475: ARRAY
91476: PUSH
91477: LD_VAR 0 4
91481: PLUS
91482: PPUSH
91483: CALL_OW 1
91487: ST_TO_ADDR
// end ;
91488: GO 91407
91490: POP
91491: POP
// end ;
91492: LD_VAR 0 2
91496: RET
// export function Length ( array ) ; begin
91497: LD_INT 0
91499: PPUSH
// result := array + 0 ;
91500: LD_ADDR_VAR 0 2
91504: PUSH
91505: LD_VAR 0 1
91509: PUSH
91510: LD_INT 0
91512: PLUS
91513: ST_TO_ADDR
// end ;
91514: LD_VAR 0 2
91518: RET
// export function PrepareArray ( array ) ; begin
91519: LD_INT 0
91521: PPUSH
// result := array diff 0 ;
91522: LD_ADDR_VAR 0 2
91526: PUSH
91527: LD_VAR 0 1
91531: PUSH
91532: LD_INT 0
91534: DIFF
91535: ST_TO_ADDR
// if not result [ 1 ] then
91536: LD_VAR 0 2
91540: PUSH
91541: LD_INT 1
91543: ARRAY
91544: NOT
91545: IFFALSE 91565
// result := Delete ( result , 1 ) ;
91547: LD_ADDR_VAR 0 2
91551: PUSH
91552: LD_VAR 0 2
91556: PPUSH
91557: LD_INT 1
91559: PPUSH
91560: CALL_OW 3
91564: ST_TO_ADDR
// end ;
91565: LD_VAR 0 2
91569: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
91570: LD_INT 0
91572: PPUSH
91573: PPUSH
91574: PPUSH
91575: PPUSH
// sibRocketRange := 25 ;
91576: LD_ADDR_VAR 0 6
91580: PUSH
91581: LD_INT 25
91583: ST_TO_ADDR
// result := false ;
91584: LD_ADDR_VAR 0 4
91588: PUSH
91589: LD_INT 0
91591: ST_TO_ADDR
// for i := 0 to 5 do
91592: LD_ADDR_VAR 0 5
91596: PUSH
91597: DOUBLE
91598: LD_INT 0
91600: DEC
91601: ST_TO_ADDR
91602: LD_INT 5
91604: PUSH
91605: FOR_TO
91606: IFFALSE 91673
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
91608: LD_VAR 0 1
91612: PPUSH
91613: LD_VAR 0 5
91617: PPUSH
91618: LD_VAR 0 6
91622: PPUSH
91623: CALL_OW 272
91627: PPUSH
91628: LD_VAR 0 2
91632: PPUSH
91633: LD_VAR 0 5
91637: PPUSH
91638: LD_VAR 0 6
91642: PPUSH
91643: CALL_OW 273
91647: PPUSH
91648: LD_VAR 0 3
91652: PPUSH
91653: CALL_OW 309
91657: IFFALSE 91671
// begin result := true ;
91659: LD_ADDR_VAR 0 4
91663: PUSH
91664: LD_INT 1
91666: ST_TO_ADDR
// exit ;
91667: POP
91668: POP
91669: GO 91675
// end ;
91671: GO 91605
91673: POP
91674: POP
// end ;
91675: LD_VAR 0 4
91679: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
91680: LD_INT 0
91682: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
91683: LD_VAR 0 1
91687: PPUSH
91688: LD_VAR 0 2
91692: PPUSH
91693: LD_INT 0
91695: PPUSH
91696: LD_INT 0
91698: PPUSH
91699: LD_INT 1
91701: PPUSH
91702: LD_INT 0
91704: PPUSH
91705: CALL_OW 587
// end ; end_of_file
91709: LD_VAR 0 3
91713: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
91714: LD_VAR 0 1
91718: PUSH
91719: LD_INT 200
91721: DOUBLE
91722: GREATEREQUAL
91723: IFFALSE 91731
91725: LD_INT 299
91727: DOUBLE
91728: LESSEQUAL
91729: IFTRUE 91733
91731: GO 91765
91733: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
91734: LD_VAR 0 1
91738: PPUSH
91739: LD_VAR 0 2
91743: PPUSH
91744: LD_VAR 0 3
91748: PPUSH
91749: LD_VAR 0 4
91753: PPUSH
91754: LD_VAR 0 5
91758: PPUSH
91759: CALL 46380 0 5
91763: GO 91842
91765: LD_INT 300
91767: DOUBLE
91768: GREATEREQUAL
91769: IFFALSE 91777
91771: LD_INT 399
91773: DOUBLE
91774: LESSEQUAL
91775: IFTRUE 91779
91777: GO 91841
91779: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
91780: LD_VAR 0 1
91784: PPUSH
91785: LD_VAR 0 2
91789: PPUSH
91790: LD_VAR 0 3
91794: PPUSH
91795: LD_VAR 0 4
91799: PPUSH
91800: LD_VAR 0 5
91804: PPUSH
91805: LD_VAR 0 6
91809: PPUSH
91810: LD_VAR 0 7
91814: PPUSH
91815: LD_VAR 0 8
91819: PPUSH
91820: LD_VAR 0 9
91824: PPUSH
91825: LD_VAR 0 10
91829: PPUSH
91830: LD_VAR 0 11
91834: PPUSH
91835: CALL 42713 0 11
91839: GO 91842
91841: POP
// end ;
91842: PPOPN 11
91844: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
91845: LD_VAR 0 1
91849: PPUSH
91850: LD_VAR 0 2
91854: PPUSH
91855: LD_VAR 0 3
91859: PPUSH
91860: LD_VAR 0 4
91864: PPUSH
91865: LD_VAR 0 5
91869: PPUSH
91870: CALL 46116 0 5
// end ; end_of_file
91874: PPOPN 5
91876: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
91877: LD_VAR 0 1
91881: PPUSH
91882: LD_VAR 0 2
91886: PPUSH
91887: LD_VAR 0 3
91891: PPUSH
91892: LD_VAR 0 4
91896: PPUSH
91897: LD_VAR 0 5
91901: PPUSH
91902: LD_VAR 0 6
91906: PPUSH
91907: CALL 30365 0 6
// end ;
91911: PPOPN 6
91913: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
91914: LD_INT 0
91916: PPUSH
// begin if not units then
91917: LD_VAR 0 1
91921: NOT
91922: IFFALSE 91926
// exit ;
91924: GO 91926
// end ;
91926: PPOPN 7
91928: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
91929: CALL 30269 0 0
// end ;
91933: PPOPN 1
91935: END
